1
00:00:00,042 --> 00:00:06,667
 Hello. I am Grant Bugher I'm
giving my talk on detecting
Bluetooth surveillance systems.

2
00:00:06,667 --> 00:00:14,042
First, start off a bit about
myself. I do work in security.
But I don't work in anything

3
00:00:14,042 --> 00:00:18,125
that has anything to do with
blue tooth surveillance system
or traffic control or anything

4
00:00:18,125 --> 00:00:23,958
of the sort. So, this is my own
research and has nothing to do
with my employer or their

5
00:00:23,958 --> 00:00:31,625
opinions. This is really a
little project that came about
from reading a news story, it

6
00:00:31,625 --> 00:00:38,000
was -- I saw something mentioned
little white boxes by the sides
of the highway and people

7
00:00:38,000 --> 00:00:43,042
wondering what they were.
Someone pointed out, they're
Bluetooth sensors. Well, that's

8
00:00:43,042 --> 00:00:48,042
an interesting idea, why would
there be Bluetooth sensors on
the highway? I think why this is

9
00:00:48,042 --> 00:00:53,125
in why in DC101 this is a story
of how do you go from I read
something interesting in the

10
00:00:53,125 --> 00:00:58,708
news to, well let's just build
something and find out what it's
doing. Just put something

11
00:00:58,708 --> 00:01:05,625
together and see what happens.
So what I did at first was just
start, look around, look at the

12
00:01:05,625 --> 00:01:10,417
literature see what is out there
about why would there be
Bluetooth sensors on the

13
00:01:10,417 --> 00:01:15,708
highways? And well, here are a
couple of slides from the
federal highway administration,

14
00:01:15,708 --> 00:01:22,458
this is from the Wisconsin DOT,
showing a Department of
Transportation Bluetooth sensor.

15
00:01:22,458 --> 00:01:29,417
You got a field device with a
Bluetooth scanner, it's a
standard commodity Bluetooth,

16
00:01:29,417 --> 00:01:34,167
not anything special. It's
hooked up -- hooked up to a
database server then it detects

17
00:01:34,167 --> 00:01:40,625
the Bluetooth enabled devices in
your car, whether that's your
cell phone, the hands-free

18
00:01:40,625 --> 00:01:45,000
function of your car, Bluetooth
headset you're carrying with
you, whatever else. And it

19
00:01:45,000 --> 00:01:49,500
relays that back to the database
server. As you see in that
second slide over there, the

20
00:01:49,500 --> 00:01:55,250
purpose of this is you detect
Bluetooth at one known location
you detect the same hack again

21
00:01:55,250 --> 00:02:00,500
at another location now you know
the speed of traffic between
those locations because you know

22
00:02:00,500 --> 00:02:06,167
how far apart they are you know
the time delay between the mac
addresses. That's why the DOT

23
00:02:06,167 --> 00:02:12,208
started putting these out there.
And they're everywhere. Here we
have example of a little white

24
00:02:12,208 --> 00:02:17,250
box being installed alongside
the interstate, you'll see a lot
of -- the white box with the

25
00:02:17,250 --> 00:02:21,917
solar panel on top is probably
the most common one you'll see
but it's far from the only one

26
00:02:21,917 --> 00:02:27,125
you'll see. These are all
commercially available highway
Bluetooth scanners. And some of

27
00:02:27,125 --> 00:02:32,667
them are remarkably commercial.
If you go to like traffic casts
sites there are pamphlets, buy

28
00:02:32,667 --> 00:02:38,583
our Bluetooth scanners and put
them on your highway and they're
advertising to government

29
00:02:38,583 --> 00:02:44,750
departments of transportation. I
looked around for some of the
research on this and as research

30
00:02:44,750 --> 00:02:51,458
note from the Washington state
Department of Transportation.
And couple of choice clips from

31
00:02:51,458 --> 00:02:57,625
that is, the key advantages are
the cost of the Bluetooth reader
and the Mac address collection

32
00:02:57,625 --> 00:03:02,708
device scans multiple lanes,
over license plate riders in
addition Bluetooth based data

33
00:03:02,708 --> 00:03:09,958
time are easy to install, goes
on to also talk about users not
wishing to disclose their

34
00:03:09,958 --> 00:03:17,708
location can simply turn off the
broadcast function on their Mac
devices. We also have the state

35
00:03:17,708 --> 00:03:25,042
installing down at the joint
base, Lewis-McChord, which is an
Army base, a military base south

36
00:03:25,042 --> 00:03:31,917
of Seattle installing these
sensors in place. So, why would
they use Bluetooth of all

37
00:03:31,917 --> 00:03:36,833
things? It turns out there are
variety of reasons. There are a
lot of things they can use to

38
00:03:36,833 --> 00:03:41,417
monitor traffic, the most basic
is the loop, you see them in
front of every traffic light.

39
00:03:41,417 --> 00:03:45,708
There's a little circle on the
ground, and it detects from
impedance when your car goes

40
00:03:45,708 --> 00:03:50,750
over it, the engine block
changes the magnetic field. We
also saw in a presentation by

41
00:03:50,750 --> 00:03:55,500
Cesar Cerudo a few days ago,
they also use magnetometers.
It's the same idea. but they

42
00:03:55,500 --> 00:04:01,458
only tell you traffic volume.
They also use radar, which can
tell you traffic volume and

43
00:04:01,458 --> 00:04:07,125
speed. But Bluetooth is one
better because it provides route
choice. I can be for an

44
00:04:07,125 --> 00:04:11,833
intersection, put a Bluetooth
scanner there, and when someone
drives by it I gather their mac.

45
00:04:11,833 --> 00:04:14,708
I know which way they went since
by having other sensors in the
intersection. That is why the

46
00:04:14,708 --> 00:04:16,708
DOT likes Bluetooth scanners.
The only other thing that will
give them that are automated

47
00:04:16,708 --> 00:04:24,125
license plate readers, which are
comparatively more expensive and
honestly have even more privacy

48
00:04:24,125 --> 00:04:29,083
implications than the Bluetooth
scanner does. The Bluetooth
scanners are less expensive, two

49
00:04:29,083 --> 00:04:34,458
to five thousand dollars each at
and honestly the manufacturers
are making a fortune at those

50
00:04:34,458 --> 00:04:39,208
prices. They are commodity
hardware. They have a cellular
modem, solar power with a

51
00:04:39,208 --> 00:04:45,125
battery backup, or some of them
get power over Ethernet. They
only get a 3-6% sample rate.

52
00:04:45,125 --> 00:04:50,708
Which on one hand, obviously,
not everyone has Bluetooth. But
that honestly seems a little low

53
00:04:50,708 --> 00:04:56,583
and we'll get in to why they're
not getting most of the sample,
is that go by. Another thing the

54
00:04:56,583 --> 00:05:00,667
vendors point out that trucks
are going to be over sampled
because trucks have lot more --

55
00:05:00,667 --> 00:05:05,000
much higher percentage of trucks
have Bluetooth devices in them
than the percentage of cars

56
00:05:05,000 --> 00:05:10,208
does. You have to adjust for
that if you're a DOT and
tracking people, need to know

57
00:05:10,208 --> 00:05:15,958
that if I see X number of cars
and my road gets a lot of
trucks, I don't really have as

58
00:05:15,958 --> 00:05:21,625
many cars as I do if I'm on a
road that isn't a trucking
route. They do that adjustment.

59
00:05:21,625 --> 00:05:28,708
Another advantage they point out
a lot is fewer privacy concerns.
So, Bluetooth is a weird

60
00:05:28,708 --> 00:05:33,125
protocol. And it's a weird
protocol because as a
frequency-hopping

61
00:05:33,125 --> 00:05:38,250
spread-spectrum pattern based on
the Mac address of devices
communicating -- so it's

62
00:05:38,250 --> 00:05:43,500
actually pretty hard to sniff
traditional Bluetooth one and
two. VTLE is very different and

63
00:05:43,500 --> 00:05:47,625
really easy to sniff it. You
need to know the addresses so
the devices communicating.

64
00:05:47,625 --> 00:05:53,000
Bluetooth address is 48 bits
like normal Mac address but
divided in to parts. There's a

65
00:05:53,000 --> 00:05:57,375
non-significant address part
which is manufacturer I.D., the
upper address part which is

66
00:05:57,375 --> 00:06:03,375
eight bits. And the lower
address part is 24 bits. You get
LA in every single bit of

67
00:06:03,375 --> 00:06:09,750
traffic it's easy to get that.
If you want UAP you have to
capture a lot of packets and

68
00:06:09,750 --> 00:06:16,125
calculate it. It's not hard. But
it takes a lot of packets. And
any device can also send an

69
00:06:16,125 --> 00:06:21,167
inquiry, a special packet that
always comes from a Mac address
called the generic inquire

70
00:06:21,167 --> 00:06:27,167
access code. That is 98B3316 no
idea why they picked that, that
is Mac address that says this

71
00:06:27,167 --> 00:06:33,167
isn't really my address but I'm
asking, is anyone willing to
beacon with me? Once you get a

72
00:06:33,167 --> 00:06:36,708
response to a beacon you can
make a connection attempt. The
connection attempt will give you

73
00:06:36,708 --> 00:06:42,125
the device name, the device
class, the service list, the
clock offset, the rest of the

74
00:06:42,125 --> 00:06:46,625
stuff you need to actually form
a connection and negotiate
encryption and pair with the

75
00:06:46,625 --> 00:06:52,500
device. Turns out the highway
scanners don't really care about
much of any of that stuff. All

76
00:06:52,500 --> 00:06:57,792
they really want is LAP: they
want an address, a unique I.D.
think don't care what data is

77
00:06:57,792 --> 00:07:02,250
being sent -- they completely
ignore the data. As a result
they can sniff data in a few

78
00:07:02,250 --> 00:07:07,042
different ways. One is
inquiry-based tracking. Which is
. . . they set up a scanner to

79
00:07:07,042 --> 00:07:11,250
just spam inquiries all the
time. They tell every device,
hey, I want to pair with you.

80
00:07:11,250 --> 00:07:17,208
Any device that is in
discoverable mode will respond
that will give them their --

81
00:07:17,208 --> 00:07:22,083
their LAP. Another method
connection-based tracking. This
is the scanner, it keeps paging

82
00:07:22,083 --> 00:07:26,875
for asynchronous connection link
and logical link and adaptation
protocol connections. This is

83
00:07:26,875 --> 00:07:33,167
really good if you already know
somebody's Mac, this is the
scanner would you use if you

84
00:07:33,167 --> 00:07:38,333
want to track company cars
around or track individuals
through your building that are

85
00:07:38,333 --> 00:07:43,125
your employees. But it's not
very useful for general
surveillance. Finally there is

86
00:07:43,125 --> 00:07:48,708
passive sniffing where you just
sweep the Bluetooth frequency
range, you suck up packets and

87
00:07:48,708 --> 00:07:54,958
you don't ever try to respond to
any of them. The problem with
passive sniffing it requires

88
00:07:54,958 --> 00:08:00,500
non-standard hardware, you can't
do it with commodity Bluetooth
dongle or your laptop. That may

89
00:08:00,500 --> 00:08:06,792
be a disadvantage for the DOTs.
Here we have couple more slides,
this is from University of

90
00:08:06,792 --> 00:08:14,333
Washington Star lab. They are a
traffic research area. And they
installed on highway 520's

91
00:08:14,333 --> 00:08:18,583
bridge in Seattle, an automated
license plate reader as well as
couple of Bluetooth scanners to

92
00:08:18,583 --> 00:08:23,042
compare the efficacy of the
systems. We have over here a
graph, they monitored the

93
00:08:23,042 --> 00:08:28,417
Bluetooth devices and they got
certain percentage, Nokia, SG,
but we also have Tom-Tom and

94
00:08:28,417 --> 00:08:32,167
those are not phones, they are
equipment in people's cars. It's
their hands free headsets and

95
00:08:32,167 --> 00:08:38,167
that sort of thing. So, what
about those privacy concerns
that came up a little earlier

96
00:08:41,125 --> 00:08:47,958
that they said are minimized?
Here is an article from "Traffic
Technology International", yes,

97
00:08:47,958 --> 00:08:53,042
that is actually a magazine. I
imagine it's not very
interesting to most of us but

98
00:08:53,042 --> 00:08:58,250
somebody subscribes to "Traffic
Technology International" and
they talk about -- they have

99
00:08:58,250 --> 00:09:03,667
seen -- gains and matches 50%
over other methods with patent
pending methods which allow for

100
00:09:03,667 --> 00:09:10,583
far more robust analysis
capability including potentially
differentiating transit

101
00:09:10,583 --> 00:09:15,167
vehicles. They say, we have the
capability to make the Mac
address data collected anonymous

102
00:09:15,167 --> 00:09:19,250
before transmitting from the
field which we can do without
any reduction in the fidelity of

103
00:09:19,250 --> 00:09:23,917
the data. But isn't it anonymity
a major feature of Bluetooth?
Mac addresses are not linked to

104
00:09:23,917 --> 00:09:28,375
a user, why the extra process?
They sound really good here. If
there is even a very small

105
00:09:28,375 --> 00:09:32,875
chance that a hacker could sniff
the communications pathway from
field to host, there should be

106
00:09:32,875 --> 00:09:37,833
procedures and protocols in
place to minimize the threat.
Okay, so they kind of care about

107
00:09:37,833 --> 00:09:45,375
privacy. Here we have from a
Star Lab paper, and they have an
illustration there gathering

108
00:09:45,375 --> 00:09:51,542
couple of Macs from sensors,
calculating travel time, strip
the macs, filter the results.

109
00:09:51,542 --> 00:09:56,417
What they talk about up here is
the Macs are kept for
unspecified period, typically 60

110
00:09:56,417 --> 00:10:00,458
minutes, that's what they say in
their document. Now this was
from the experiment on 520

111
00:10:00,458 --> 00:10:04,542
affordable license reader, that
sort of thing. Most of the
commercial sensors I've looked

112
00:10:04,542 --> 00:10:09,500
at actually say they only keep
the data 20 minutes. Although it
is user serviceable -- because

113
00:10:09,500 --> 00:10:14,167
once again they're going after
route choice. If you really
wanted to put the sensors 50

114
00:10:14,167 --> 00:10:19,625
miles apart, you could do that
then you would need to keep your
Mac addresses for a longer

115
00:10:19,625 --> 00:10:24,833
period of time to be able to get
the route choice down. So, it's
configurable. But the Macs are

116
00:10:24,833 --> 00:10:30,125
anonymous they throw them away
after a short time -- clearly
there are no privacy concerns.

117
00:10:30,125 --> 00:10:34,583
[Laughter.] Or so, that's what
they say. For instance, we
shouldn't care that they're

118
00:10:34,583 --> 00:10:39,917
putting these on the Canadian
border at all of the border
crossings to monitor things. I

119
00:10:39,917 --> 00:10:45,542
bet they have them on other
borders, too. Canada just
happens to be heck of a lot

120
00:10:45,542 --> 00:10:52,208
closer to where I live. This is
what I was able to find out.
Again, these are from UW Star

121
00:10:52,208 --> 00:10:57,375
Lab. There are the three privacy
mitigations. One is they're
capturing LAP only, they are not

122
00:10:57,375 --> 00:11:01,417
getting your entire Bluetooth
address, not cracking your code,
they are not pulling your data.

123
00:11:01,417 --> 00:11:06,000
They don't compare that, they
don't make any is attempt to
sense that. With Bluetooth being

124
00:11:06,000 --> 00:11:10,542
frequency hopping spread
spectrum, with only passive
sniffing they are only getting

125
00:11:10,542 --> 00:11:18,042
one packet in 64 anyway without
cracking your UAP -- not really
cracking, guessing the UAP and

126
00:11:18,042 --> 00:11:22,500
pairing with you or making
connection attempts they can't
follow your communication. They

127
00:11:22,500 --> 00:11:27,708
can't get most of the packets
without doing a lot of stuff
that the DOT has no reason to

128
00:11:27,708 --> 00:11:35,375
do. LAP is 24 bits, it is not
globally unique. There are many
Bluetooth devices with the same

129
00:11:35,375 --> 00:11:41,750
LAP, there are only 16.7 million
possible LAPs. Next thing, they
anonymize it. Remember that

130
00:11:41,750 --> 00:11:47,292
little article in Traffic
Technology International, they
say that LAP is anonymized while

131
00:11:47,292 --> 00:11:54,125
preserving the fidelity of the
data. So, the anonymous LAP
matches one to one with a

132
00:11:54,125 --> 00:12:00,917
non-anonymous LAP. They hash it
before storing, and if they
wanted to they could use salt

133
00:12:00,917 --> 00:12:08,083
hash 256. They can use good
hashing practices. Then finally
their last mitigation is limited

134
00:12:08,083 --> 00:12:13,750
retention. And star lab said, 60
minutes commercial reader, say
20 minutes default time --

135
00:12:13,750 --> 00:12:17,000
that's usually plenty because
they will put it before an
intersection, after an

136
00:12:17,000 --> 00:12:23,958
intersection, so be it. That is
all they need. Let's take a look
at each of those privacy

137
00:12:23,958 --> 00:12:31,833
mitigations. Remember this? That
little illustration of the
manufacturers? Well, the

138
00:12:31,833 --> 00:12:39,292
manufacturers comes from NAP not
from LAP so LAP does not permit
manufacturer identification. So

139
00:12:39,292 --> 00:12:46,333
clearly at least in their
experimental reader deployment
they might have a little more

140
00:12:46,333 --> 00:12:52,583
than LAP captioned. And -- not
globally unique, one in 16.7
million is pretty unique for me

141
00:12:52,583 --> 00:12:59,792
in Seattle. There's one of me,
there's maybe 2.5 million in the
Seattle metro area. There is

142
00:12:59,792 --> 00:13:06,458
only a 1 in 8 chance I match
anybody. I have more than one
Bluetooth device. At that point

143
00:13:06,458 --> 00:13:11,458
you've got a pretty unique
signature of yourself. Now once
again they're right that there

144
00:13:11,458 --> 00:13:18,208
is no -- there is no central
registry of Bluetooth Mac
addresses, at least not that we

145
00:13:18,208 --> 00:13:24,750
know of. And you can't
necessarily get at somebody's
Bluetooth Mac look at DMV

146
00:13:24,750 --> 00:13:29,750
database see where they are. On
the other hand what it does mean
is the state would be useful for

147
00:13:29,750 --> 00:13:34,292
targeting tracking of a person
if you know there was a person
you can't to track around town

148
00:13:34,292 --> 00:13:38,875
you do some research in other
ways, you get -- brought a shot
of liquor -- [Applause] Just a

149
00:13:38,875 --> 00:13:44,875
moment! (Speaking off-mic). [
laughter ] All right. (Speaking
off-mic). >> Some love for the

150
00:14:14,083 --> 00:14:20,083
new speaker! [Applause] All
right. Back to tracking people
or not tracking them. So. All

151
00:14:38,750 --> 00:14:44,750
right! [laughter ] (Speaking
off-mic). So, yes, one in 16.7
million pretty unique in most

152
00:14:48,542 --> 00:14:53,500
areas, there is no central
registry. But if you're already
suspecting someone, say you are

153
00:14:53,500 --> 00:14:58,292
the FBI or something of that
accord -- you can probably
subpoena their cell phone

154
00:14:58,292 --> 00:15:04,167
provider, and get their INEI and
the phone manufacturer knows the
serial number that goes with

155
00:15:04,167 --> 00:15:08,583
that INEI. The phone
manufacturer knows the Bluetooth
Mac that was put in by default

156
00:15:08,583 --> 00:15:13,833
on that phone. So if you are
really tracking one person as a
targeted attack, LAP is good

157
00:15:13,833 --> 00:15:20,500
enough. If you are trying to do
dragnet surveillance, LAP is
kind of useless. So anybody

158
00:15:20,500 --> 00:15:25,917
remember this? This is an
interesting story. It's kind of
unrelated but not really. They

159
00:15:25,917 --> 00:15:32,208
talk about anonymizing your LAP.
This is from 2004. This is the
source code for the

160
00:15:32,208 --> 00:15:37,167
deck-shuffling algorithm on
PartyPoker.com. They put this
out to show how secure their

161
00:15:37,167 --> 00:15:42,167
deck shuffling algorithm is. On
the surface, it looks very fair.
You are taking each card in the

162
00:15:42,167 --> 00:15:45,083
entire deck, and you are
randomly swapping it with
another card. And you go through

163
00:15:45,083 --> 00:15:50,417
the entire deck this way. That
gives you 52 factorial possible
combinations. Full deck shuffle,

164
00:15:50,417 --> 00:15:56,833
225 bits of entropy. But wait
they're using the random
function in Pascal, and random

165
00:15:56,833 --> 00:16:02,542
generates a 32-bit number. So,
there is only 32 bits of entropy
going in to their 225 bits of

166
00:16:02,542 --> 00:16:06,583
entropy. They ceded it by
calling it randomized.
Randomized, it's the number of

167
00:16:06,583 --> 00:16:12,500
milliseconds since midnight, but
that is only a 26 bit number. So
really 26 bits of entropy. So

168
00:16:12,500 --> 00:16:16,792
even though they're shuffling
the deck perfectly there are
only 68 million possible decks

169
00:16:16,792 --> 00:16:22,000
this algorithm can output.
Somebody made a card shuffling
rainbow table where they

170
00:16:22,000 --> 00:16:27,000
generated all 68 million
possible decks. They get dealt
their own cards say this was the

171
00:16:27,000 --> 00:16:30,292
first and second card out of the
deck, how many of those 68
million start with these two

172
00:16:30,292 --> 00:16:34,625
cards. The plot comes out, how
many have those halls cards 9,
10, 11, then they are down to

173
00:16:34,625 --> 00:16:42,333
one deck and predict the rest of
the deck. So, the moral of the
story is, you cannot anonymize a

174
00:16:42,333 --> 00:16:49,625
24-bit number. You can't take a
24 bit number and turn it into
256 bit salted hash. Someone can

175
00:16:49,625 --> 00:16:54,958
try all those 24 bit number
numbers. They'll hit it. It's
trivial to force a brute number

176
00:16:54,958 --> 00:17:02,375
that size on modern computing
hardware. So that leaves us with
one last bit of protection. That

177
00:17:02,375 --> 00:17:07,583
is, well, they throw the data
away, they only keep it for 20
minutes. The DOT collects it,

178
00:17:07,583 --> 00:17:12,750
they collect the data, to see
route choice, speed, and traffic
volume. They don't care who you

179
00:17:12,750 --> 00:17:17,250
are, they're not trying to track
you. And then they get rid of
the data. They're not sharing it

180
00:17:17,250 --> 00:17:23,500
with intelligence agencies and
public institutions and so on.
They really have no reason to,

181
00:17:23,500 --> 00:17:29,500
they don't want this other data.
So anybody remember this? This
is Edward Snowden's slide,

182
00:17:32,083 --> 00:17:39,333
you'll note the smiley face by
SSL added in here of the
muscular project where in the

183
00:17:39,333 --> 00:17:45,083
data is encrypted to Google's
front end but then moving from
datacenter to datacenter it's in

184
00:17:45,083 --> 00:17:52,458
clear text, and the NSA just
tapped their lines. And we have
the same thing. The DOT may be

185
00:17:52,458 --> 00:17:57,417
throwing your data away after
twenty minutes. is everybody
throwing your data away after 20

186
00:17:57,417 --> 00:18:04,833
minutes? We can't really know if
this data is stored with or
without the cooperation of the

187
00:18:04,833 --> 00:18:10,083
DOT. Once again, it is
mitigation, I'm glad they're
throwing the data away after 20

188
00:18:10,083 --> 00:18:16,708
minutes, it's nice of them. But
all of these are a bit limited
in terms of how well they

189
00:18:16,708 --> 00:18:21,208
actually protect your privacy.
It is creating a nearly
nationwide tracking system. Now

190
00:18:21,208 --> 00:18:27,000
I will give them one thing, the
alternative to this is usually
automated license plate readers,

191
00:18:27,000 --> 00:18:31,792
and those are much worse. They
get way better than three to six
percent car identification. And

192
00:18:31,792 --> 00:18:38,333
your license plate does map one
to one to you and it clearly
available database that any

193
00:18:38,333 --> 00:18:44,083
police agency can access. So if
the choice is Bluetooth scanners
or putting ALPRs everywhere?

194
00:18:44,083 --> 00:18:47,833
Okay, yeah, they're right.
There's no privacy concerns at
least relatively speaking. On

195
00:18:47,833 --> 00:18:53,333
the other hand ALPRs cost five
times as much. Thus, they are
less inclined to put them

196
00:18:53,333 --> 00:18:57,667
everywhere. Bluetooth scanners
are pretty cheap. They're easy
for them to deploy, so they're

197
00:18:57,667 --> 00:19:04,417
quite widely deployed. So this
is what I could find out from
reading literature but it turns

198
00:19:04,417 --> 00:19:10,500
out you can't just Google,
"where are the Bluetooth
scanners in my city?" So that

199
00:19:10,500 --> 00:19:17,333
data is not really made public.
So I thought, well, why don't I
make a Bluetooth detector

200
00:19:17,333 --> 00:19:24,292
detector? And so I went on to
making my own. And with
Bluetooth scanning, first you

201
00:19:24,292 --> 00:19:28,458
have to get some equipment.
Bluetooth transceivers, the
typical dongle that you can buy

202
00:19:28,458 --> 00:19:34,542
anywhere can send and receive,
but can only send beacons or
send when they're paired. They

203
00:19:34,542 --> 00:19:41,250
don't have basically packet like
you call on Wi-Fi cards. Class
one 100 meter range don't see a

204
00:19:41,250 --> 00:19:46,667
lot of those. Class two and
three are ten and one meter.
Also commercial Bluetooth

205
00:19:46,667 --> 00:19:53,917
sniffers. These things are
$10,000 plus. They will grab all
channels, they will receive one,

206
00:19:53,917 --> 00:19:59,917
they don't transmit. They are
still single or dual or sweep,
they won't grab all 64 channels

207
00:20:02,708 --> 00:20:08,708
they just swap between them.
Until you tell them, "I am
interested in this Bluetooth

208
00:20:11,167 --> 00:20:17,167
device" -- then they will lock
on and frequency hop with it.
But I didn't want to spend

209
00:20:21,333 --> 00:20:27,333
$10,000 own commercial Bluetooth
sniffer. Luckily there is this
lovely thing that you can buy

210
00:20:29,792 --> 00:20:35,792
these down in the vendor area.
This is the uber tooth one it's
a non-commercial Bluetooth

211
00:20:39,250 --> 00:20:43,792
scanner. It has all the
capabilities I or Department of
Transportation would need to

212
00:20:43,792 --> 00:20:47,750
sniff up at least Bluetooth
Macs. 2.4 gigahertz, transmit
and receive, transmit power and

213
00:20:47,750 --> 00:20:51,750
receive sensitivity comparable
to class one Bluetooth, those
things have a 100 meter range.

214
00:20:51,750 --> 00:20:58,000
Comes with a nice 9DVI antenna
on it. All I needed was a bit of
hardware to attach it to. I have

215
00:20:58,000 --> 00:21:02,542
to use Linux, there are no
Windows ubertooth drivers. You
could use a Linux VM, the

216
00:21:02,542 --> 00:21:08,500
problem is Windows will not pass
USB device with no driver to the
VM, so you have to get a driver

217
00:21:08,500 --> 00:21:13,042
called WinUSB, which is just a
generic Windows USB support. You
can associate that driver with

218
00:21:13,042 --> 00:21:19,000
the uber tooth then pass that in
to your VM and it works. So, my
equipment for this at first was

219
00:21:19,000 --> 00:21:23,833
old ThinkPad in the garage.
Alternatively a copy of Ubuntu,
an uber tooth one, a global sat

220
00:21:23,833 --> 00:21:28,667
USB-GPS dongle for $27 on
Amazon, and an AZIO which is one
of those Chinese brands that

221
00:21:28,667 --> 00:21:33,208
doesn't actually exist -- they
just slap a random name on
products, a USB micro Bluetooth

222
00:21:33,208 --> 00:21:39,750
adapter, also class one, for
$16. And so I set up my Linux
PC, update it, install with Lib

223
00:21:39,750 --> 00:21:46,125
USB various USB drivers
required, blue Z which is a
really nice Linux Bluetooth sat.

224
00:21:46,125 --> 00:21:52,583
Download the Pi-USB, the
Bluetooth baseband, the uber
tooth software, and finally

225
00:21:52,583 --> 00:21:56,583
Kismet although you could
install binary Kismet. You
wouldn't necessarily build it

226
00:21:56,583 --> 00:22:01,792
all yourself but will have to
build the Kismet plug in that
associates with uber tooth, so

227
00:22:01,792 --> 00:22:09,333
you might as well download the
source, you need it anyway.
Install all that. This is older

228
00:22:09,333 --> 00:22:16,333
version of Kismet, it is 2013.
The latest released version of
kismet is a year and half old.

229
00:22:16,333 --> 00:22:20,708
There are newer ones available
on get hub but for stability
you're better off with an old

230
00:22:20,708 --> 00:22:27,458
one. Kismet is meant as Wi-Fi
scanner -- it will work as
Bluetooth scanner but pushing it

231
00:22:27,458 --> 00:22:34,333
out of its element. Anything
that stabilizes it is helpful.
And, okay, now I have a computer

232
00:22:34,333 --> 00:22:40,083
that can sniff Bluetooth. That
was all right. But I didn't
really want to drive around with

233
00:22:40,083 --> 00:22:46,208
computer on my dashboard all
over the city for hours until
the battery ran out and have to

234
00:22:46,208 --> 00:22:51,708
go back and swap another one. So
I thought, you know what would
cooler if I had this on an

235
00:22:51,708 --> 00:22:56,250
embedded system that I can just
stick on the dashboard and plug
in to the cigarette lighter and

236
00:22:56,250 --> 00:23:03,583
do it all that way. So, I built
an arm-based Bluetooth scanner.
Let's show you a bit of that. It

237
00:23:03,583 --> 00:23:08,875
was an inexpensive open source
hardware platform, raspberry
pie, made for education purposes

238
00:23:08,875 --> 00:23:13,208
which basically shows you here,
this is how you play with little
embedded systems. It's an arm

239
00:23:13,208 --> 00:23:18,625
processor, it's 35 bucks,
probably buy them in the vendor
room, too. And got two USB,

240
00:23:18,625 --> 00:23:24,000
HDMI, audio, GPI with SDI
capability all sorts of things I
don't need for a Bluetooth

241
00:23:24,000 --> 00:23:29,917
scanner. I also went ahead and
bought a screen and enclosure
for it I didn't want to drive

242
00:23:29,917 --> 00:23:36,125
all over town for five hours,
get home, and found I captured
no data. I wanted to have a

243
00:23:36,125 --> 00:23:41,000
readout. It's optional. I
wouldn't have needed it, it
works just fine without it. And

244
00:23:41,000 --> 00:23:47,208
then the equipment from the PC
build and -- finally I needed
something to power it off of. It

245
00:23:47,208 --> 00:23:53,417
runs on a five volt, 500
milliamp USB power supply. It is
meant to plug in to any USB

246
00:23:53,417 --> 00:23:59,583
adapter, a car charger has USB
adapter now I can plug it in to
my cigarette lighter. Let me

247
00:23:59,583 --> 00:24:07,500
show you what I built here. The
problem I have is I cannot see
my own screen. So I am going to

248
00:24:07,500 --> 00:24:13,625
show you with my camera here
what is built but you will have
to tell me if I am not actually

249
00:24:13,625 --> 00:24:17,458
aiming at it. Here is -- is that
in focus? Okay. Here is the
raspberry pie with display on

250
00:24:17,458 --> 00:24:20,792
it, those are a bunch of
Bluetooth Mac addresses and
number of packets it is captured

251
00:24:20,792 --> 00:24:28,125
from. I turned this on in
speaker room about 45 minutes
ago and as you can see there's a

252
00:24:28,125 --> 00:24:34,625
nice long list of Bluetooth Macs
that I have captured from
friendly DEF CON goers. Over

253
00:24:34,625 --> 00:24:40,625
here is what it is plugged in
to, we've got -- is that in
focus there? We've got USB hub,

254
00:24:42,750 --> 00:24:48,750
which has on it my GPS dongle
which is getting no reception
here in the Rio but in theory it

255
00:24:50,833 --> 00:24:57,292
could -- and my uber tooth one.
Then finally we have what's
powering all of this. This is a

256
00:24:57,292 --> 00:25:04,583
$29 gorilla gadget 16,800
milliamp cell phone re-charger
that also worked as USB counter

257
00:25:04,583 --> 00:25:10,583
source. Those altogether give me
a less than $200 embedded system
for use as a Bluetooth scanner.

258
00:25:15,500 --> 00:25:22,625
All right. Am I back to slides?
Setting this up was pretty
straight forward. Update the

259
00:25:22,625 --> 00:25:26,208
firm ware, I used the standard
raspbiean image. There is a
standard image there's actually

260
00:25:26,208 --> 00:25:32,250
available that already has
support for the screen if you
are using the screen then you

261
00:25:32,250 --> 00:25:37,167
can use that as well. And it
recompiles, a bunch of kernel
packets are required for

262
00:25:37,167 --> 00:25:43,458
raspberry pie, because
repurposes the general purpose
IO pins as a high speed bus to

263
00:25:43,458 --> 00:25:49,583
transmit and receive from the
screen. Installed the same
Bluetooth -- same packages as

264
00:25:49,583 --> 00:25:54,417
before, although a few others
are necessary. Actually I don't
list it there you also need

265
00:25:54,417 --> 00:26:01,167
build essential, Raspian does
not by default include some of
the tool change packages you

266
00:26:01,167 --> 00:26:07,750
need to build this. But Apt is
pretty friendly about telling
you what you're missing.

267
00:26:07,750 --> 00:26:14,792
Download usual software, make an
install. One thing is, the
raspberry pie is not the fastest

268
00:26:14,792 --> 00:26:20,542
DEF platform out there.
Compiling kismet on the pie
takes about four and half hours.

269
00:26:20,542 --> 00:26:25,833
As a result, you're going to be
doing a lot of experimenting
with this, it's probably worth

270
00:26:25,833 --> 00:26:31,958
setting up a Linux box to cross
compile going to be a hell of a
lot faster. But if you're only

271
00:26:31,958 --> 00:26:37,375
compiling kismet once on the
device it's not that big a deal
to just let it compile for four

272
00:26:37,375 --> 00:26:43,375
and a half hours. Then I did a
little more set up. Putting my
user in a plug DEF group setting

273
00:26:45,542 --> 00:26:50,833
up USB to automatically
associate the uber tooth with
that, so that I can run kismet

274
00:26:50,833 --> 00:26:56,000
in user mode instead of having
to run it as a root. I added a
new user called scanner, and

275
00:26:56,000 --> 00:27:02,125
that user is in the appropriate
groups. I modified a tab to
instead of display log in prompt

276
00:27:02,125 --> 00:27:07,833
on TTI one, the console, to
automatically log in the scanner
user. That way, when I boot up

277
00:27:07,833 --> 00:27:12,250
the pie, it automatically
displays the scanner user's
console on the screen I don't

278
00:27:12,250 --> 00:27:19,042
have to have plug a keyboard in
to it and do any kind of log in.
Then set GPSD speed to start up.

279
00:27:19,042 --> 00:27:24,792
This is actually necessary
because GPSD on Raspian - there
seems to a bug in install

280
00:27:24,792 --> 00:27:30,375
packages. It will not auto start
if you do a package re-configure
to tell it to auto start, it

281
00:27:30,375 --> 00:27:36,542
writes a bad GPSD config that
doesn't actually work. So, I
added a GPSD config to make it

282
00:27:36,542 --> 00:27:42,750
work and then finally start up
kismet on a computer where you
have a keyboard and a screen

283
00:27:42,750 --> 00:27:49,583
because you have to set up the
kismet UI the way you like it to
look then exit, that will save

284
00:27:49,583 --> 00:27:55,792
all your UI settings to display
the uber tooth plug in, and not
display the AI211, all the stuff

285
00:27:55,792 --> 00:28:00,750
we're not using, display GPS
coordinates that sort of thing.
Then finally modify the scanner

286
00:28:00,750 --> 00:28:07,292
user's batch RC to start up
kismet as soon as they log in.
The screen we saw on the little

287
00:28:07,292 --> 00:28:12,875
scanner a minute ago, that's
what it boots to. I just plug in
power it immediately starts

288
00:28:12,875 --> 00:28:18,667
running. It worked great to just
take it in to my car with car
charger drive around town with

289
00:28:18,667 --> 00:28:24,083
it and record logs. When I got
home the pie has Ethernet
adapter, so I plug it in to a

290
00:28:24,083 --> 00:28:30,208
network and SSH in to it, pull
off all the log files. And I
pulled off quite a lot of log

291
00:28:30,208 --> 00:28:36,875
files from it. So there were a
few issues with raspberry pie. I
got that USB hub, even though I

292
00:28:36,875 --> 00:28:42,000
have two devices plugged into it
and the pie has two USB ports.
Problem is the pie's USB source

293
00:28:42,000 --> 00:28:48,250
only supply 140 milliamps, and
that's not really enough to
drive uber tooth and Bluetooth

294
00:28:48,250 --> 00:28:54,792
transceiver and a GPS. I needed
external power. I grabbed a
powered USB hub. Other problem I

295
00:28:54,792 --> 00:29:01,083
had with that is powered USB has
to plug in to something. And USB
hub normally have a wall wart. I

296
00:29:01,083 --> 00:29:07,083
took the wall wart, took cut
that cord, soldered the power
cords in the wall cord to the

297
00:29:10,167 --> 00:29:15,958
power pins on the USB cord and
then just plug it in to the same
car charger as the pie. So I've

298
00:29:15,958 --> 00:29:21,333
got a custom made power cord for
the thing. Only other issue I
ran into is I cannot solder

299
00:29:21,333 --> 00:29:25,917
worth a damn. I found this out
the hard way when putting this
together and made plenty of

300
00:29:25,917 --> 00:29:32,417
mistakes with I think that was
my second power cable and had to
do a lot of desolderring to get

301
00:29:32,417 --> 00:29:39,000
the screen soldered on. But as a
result I can solder now. That
was an added benefit of this

302
00:29:39,000 --> 00:29:45,458
project. [Laughter.] Even if it
took a few extra hours. Finally
kismet on -- uber tooth and

303
00:29:45,458 --> 00:29:50,792
kismet on the pie sometimes
crashes with this corrupted
double link list error. Usually

304
00:29:50,792 --> 00:29:57,167
happens right at start up if it
does crash it's fine, you just
run kismet again, usually

305
00:29:57,167 --> 00:30:00,792
doesn't crash the second time.
If it doesn't crash in the first
two minutes it usually doesn't.

306
00:30:00,792 --> 00:30:06,208
I actually wrote a script for
that kismet's client and server
are started separately and if

307
00:30:06,208 --> 00:30:11,375
the server goes down just cycles
it and starts up again and the
client reconnects to the server

308
00:30:11,375 --> 00:30:16,125
so that, once again, you don't
have to have a keyboard, don't
have to have SSHN, The device

309
00:30:16,125 --> 00:30:22,042
just runs autonomously and it
recovers from its own faults. I
also have been working with

310
00:30:22,042 --> 00:30:27,042
people on Get Hub to try to
figure out what exactly this
plug is. It doesn't just happen

311
00:30:27,042 --> 00:30:33,458
on Raspian it happens on Cali
also, and that's a platform they
would like uber tooth to work

312
00:30:33,458 --> 00:30:40,333
properly on. Cali based on
Ubuntu, and it works great on
1204 and 1404. And it doesn't

313
00:30:40,333 --> 00:30:45,417
work on Cali, and we don't seem
to have figured out why. Thanks
to Dominick for his help in

314
00:30:45,417 --> 00:30:51,250
debugging this, even if we have
not quite figured how to get it
100% reliable yet. But fault

315
00:30:51,250 --> 00:30:55,875
tolerance script works. I was
still able to gather data. You
scan with uber tooth scan which

316
00:30:55,875 --> 00:31:01,292
performs an inquiry scan, it
sends out beacons. That needs
both an uber tooth one and a

317
00:31:01,292 --> 00:31:07,458
Bluetooth transceiver. That will
tell us the LAP only, nothing
else, or we can use kismet which

318
00:31:07,458 --> 00:31:13,000
will passively monitor all
frequencies, it takes only the
uber tooth one and it logs GPS

319
00:31:13,000 --> 00:31:18,917
coordinates constantly as well
as logging our data packets. So,
that's what I used for most of

320
00:31:18,917 --> 00:31:24,500
my data gathering because I need
coordinates. I need to know
exactly where I observed all

321
00:31:24,500 --> 00:31:29,708
these Bluetooth addresses. It's
a continuous sweep, it will miss
things because it is only

322
00:31:29,708 --> 00:31:35,958
getting one packet in 64 from
each connection. And, if it gets
enough packets to guess UAP it

323
00:31:35,958 --> 00:31:42,917
will do so. I have UAP on some
of the addresses I captured not
others. Um, the amount of time

324
00:31:42,917 --> 00:31:49,542
in inquiry scan it needs to be
sure it got everybody is 10.24
seconds. So if I'm going at

325
00:31:49,542 --> 00:31:55,708
highway speeds about 60 miles an
hour, that means 268.2 meters of
driving in order to be sure I

326
00:31:55,708 --> 00:32:02,500
caught everything around. A
class 1 transceiver, 300A, is
100 meters. it should be mostly

327
00:32:02,500 --> 00:32:07,375
enough to get at least the vast
majority of the devices. But I
have to accept that I'm not

328
00:32:07,375 --> 00:32:14,958
going to get everything unless I
drive by over and over and over
again. So, then we get to the

329
00:32:14,958 --> 00:32:21,458
results. First of all, after I
got all those logs I loaded them
in to wire shark in order to

330
00:32:21,458 --> 00:32:26,417
parse the kismet logs, and
basically dump everything but
the Mac address. I don't care

331
00:32:26,417 --> 00:32:31,458
about the data, I don't need the
contents of the packets, all I
really want is the Bluetooth

332
00:32:31,458 --> 00:32:39,125
addresses. So dumped all that to
a ridiculously massive CSV, was
very happy to have excel 2013

333
00:32:39,125 --> 00:32:46,542
because the 32-bit versions of
excel would have choked on my 16
gigabyte spread sheet.

334
00:32:46,542 --> 00:32:50,958
[Laughter.] The 64 bit version
was not delighted by it, either,
but it was able to work with it.

335
00:32:50,958 --> 00:32:56,958
And here we have whole bunch of
packets from, you will notice,
98B3316. The generic inquiry

336
00:33:01,167 --> 00:33:04,708
access code. These are beacons
that were picked up. Then I
mapped them all out on Google

337
00:33:04,708 --> 00:33:10,375
maps. These are areas on the
Seattle highways that are
showing recurrent inquiry

338
00:33:10,375 --> 00:33:15,042
activity. These are -- I found
an emitter of Bluetooth
inquiries on every pass of these

339
00:33:15,042 --> 00:33:19,625
locations, implying that there
is a stationary Bluetooth
source. Now, yes, it could be

340
00:33:19,625 --> 00:33:25,542
somebody semi pulled off the
side of the road for five hours.
I can't rule out the possibility

341
00:33:25,542 --> 00:33:30,167
that, these are not scanners
these are -- happens to be
stationary Bluetooth sources

342
00:33:30,167 --> 00:33:35,750
that are trying to pair all the
time. It seems maybe a little
unlikely, but it is

343
00:33:35,750 --> 00:33:40,667
circumstantial evidence. The
other thing is . . . These
locations map expected stops for

344
00:33:40,667 --> 00:33:46,917
route source tracking. If you
look at where they are -- on a
ramp to a highway over in

345
00:33:46,917 --> 00:33:51,833
Redmond, we've got place before
the highways diverge on the
north side of Seattle, likewise

346
00:33:51,833 --> 00:33:57,083
we've got a couple of places on
south side of Seattle just
before major intersections of

347
00:33:57,083 --> 00:34:02,250
high traffic. Got couple
downtown between I-5 20 and I-90
which are the main thoroughfares

348
00:34:02,250 --> 00:34:08,250
across the grid. They are places
I would expect the DOT to want
to put scanners. Combined with

349
00:34:08,250 --> 00:34:14,208
that, we got this. That said,
there are not as many as I would
expect. I probably missed a fair

350
00:34:14,208 --> 00:34:21,208
number of them. I also did not
spend all week driving around
Seattle. I can probably gather

351
00:34:21,208 --> 00:34:28,000
more if I spent more time
gathering data. Well, that tells
me with inquiry scans, but what

352
00:34:28,000 --> 00:34:32,667
if they're not doing inquiry
scans? What if they're doing
other types of Bluetooth scans?

353
00:34:32,667 --> 00:34:38,250
I loaded in the data of all the
Mac addresses not just the
inquiries and looked for --

354
00:34:38,250 --> 00:34:43,583
what's the first time I spotted
this? What's the last time I
spotted this? How far apart are

355
00:34:43,583 --> 00:34:49,500
they in hours and if they were
more than half hour apart, then
-- in the same location, that is

356
00:34:49,500 --> 00:34:55,208
stationary source. I looked all
the ones I spotted more than an
hour apart from themselves, then

357
00:34:55,208 --> 00:34:58,750
calculated the haversine
distance between those
locations. Haversine distance is

358
00:34:58,750 --> 00:35:03,042
the distance across the surface
of a sphere -- it is the way you
calculate distance if you have

359
00:35:03,042 --> 00:35:08,833
GPS coordinates. I found a
variety of them that had very
small haversine distance and

360
00:35:08,833 --> 00:35:13,208
very large time difference, once
again implying a stationary
Bluetooth emitter. They tended

361
00:35:13,208 --> 00:35:19,208
to look like this. We had
multiple areas where an address
was found in less than a 200

362
00:35:19,208 --> 00:35:24,917
meter area on multiple passes
around the highways. I'd show
you a map of these but honestly

363
00:35:24,917 --> 00:35:31,292
it looks whole lot like the
other map did. They were for the
most part a subset of the

364
00:35:31,292 --> 00:35:37,000
inquiry stand locations. I saw
them at the same places. What
this means, I am not sure. They

365
00:35:37,000 --> 00:35:40,875
could be using multiple
transceivers, they could be
false positives. It's a little

366
00:35:40,875 --> 00:35:46,083
difficult to know what to make
of that data. Notably absent,
though, there weren't any on

367
00:35:46,083 --> 00:35:50,833
state road 520 bridge which
surprises me. We saw on the Star
Labs experiments, that's where

368
00:35:50,833 --> 00:35:54,708
they were testing them
originally -- in addition the
520 bridge has dynamic speed

369
00:35:54,708 --> 00:36:01,458
limit signs. They are definitely
calculating travel times for
cars and calculating speed. They

370
00:36:01,458 --> 00:36:06,000
got some sort of traffic
monitoring on there. And they've
got Bluetooth scanners so I

371
00:36:06,000 --> 00:36:11,667
would think those things would
be connected. But despite quite
a few passes, I did not find

372
00:36:11,667 --> 00:36:17,292
evidence that that is the case.
This said, unlike when they were
doing the experiment, the 520

373
00:36:17,292 --> 00:36:22,542
bridge is a toll bridge now.
That means people have toll
passes, so they may have just

374
00:36:22,542 --> 00:36:26,375
switched to using electronic
tolling sensors and abandoned
using Bluetooth sensors on that

375
00:36:26,375 --> 00:36:30,833
bridge now that they have got a
potentially more reliable and
more uniquely identifiable way

376
00:36:30,833 --> 00:36:35,542
of tracking. On the other hand
that won't give them route
choice, tell them people are

377
00:36:35,542 --> 00:36:39,917
crossing the bridge, won't tell
them where they're going
afterwards, unless they have put

378
00:36:39,917 --> 00:36:44,042
hidden toll sensors elsewhere
that don't charge you a toll.
That may get in to paranoia

379
00:36:44,042 --> 00:36:50,583
territory but that's what DEFCON
is for. [Laughter.] So. Counter
measures. so what do we do about

380
00:36:50,583 --> 00:36:57,000
this or do we need to do
anything about it? Well first of
all there is going back to

381
00:36:57,000 --> 00:37:00,208
recognizing that if they weren't
doing this, they would probably
put license plate readers

382
00:37:00,208 --> 00:37:05,000
everywhere and that would be
worse. Nevertheless, the main
thing you can do is of course

383
00:37:05,000 --> 00:37:09,083
turn off your phone.
Unfortunately a little harder to
turn off the Bluetooth

384
00:37:09,083 --> 00:37:12,917
transceivers that are built in
your car. Depending on the car,
sometimes they don't have an

385
00:37:12,917 --> 00:37:19,667
off. They may transmit to
anything that transmits to them.
Some of them basically beacon

386
00:37:19,667 --> 00:37:26,208
continuously. They are pretty
easy to detect. If you want to
know you just build one of these

387
00:37:26,208 --> 00:37:32,958
things and you sniff your own
car see what you got. You can
check your own Bluetooth

388
00:37:32,958 --> 00:37:39,000
emanations. I know I found that
my car does not beacon
continuously but if it's powered

389
00:37:39,000 --> 00:37:44,750
on or if it has been powered on
in the last ten minutes it is
sending Bluetooth packets. Now I

390
00:37:44,750 --> 00:37:52,375
have -- I have devices its
paired to relatively near it --
I'm not making hands-free call,

391
00:37:52,375 --> 00:37:57,042
I'm not playing Bluetooth radio,
the ignition is turned off, I'm
not in the car and it's still

392
00:37:57,042 --> 00:38:03,125
exchanging Bluetooth data. These
devices are relatively leaky
from an information perspective

393
00:38:03,125 --> 00:38:08,375
and there is not a whole lot you
can do about that. This said,
this kind of leaking requires

394
00:38:08,375 --> 00:38:15,167
passive scanning, not the
inquiry scans which are probably
what most DOTs are using. If I

395
00:38:15,167 --> 00:38:18,667
look at commercial products
that's mostly what they're
doing. You read between the

396
00:38:18,667 --> 00:38:24,250
lines of what the capabilities
are they talk about only finding
discoverable devices. Inquiry

397
00:38:24,250 --> 00:38:29,500
scans only find discoverable
devices, passive scans will find
all devices. Well, all devices

398
00:38:29,500 --> 00:38:35,375
that are not turned off. The
other thing that you can do, you
can be someone else. I can run

399
00:38:35,375 --> 00:38:42,292
my sniffer look at all those
nice LAPs I got. And if I know
who one of them belongs to I can

400
00:38:42,292 --> 00:38:50,083
just -- this sniffer works just
as well as a spoofer. As a
spoofer, I can plug in a couple

401
00:38:50,083 --> 00:38:57,375
of Bluetooth dongles and then
with blue smash tools which are
included in backtrack and Cali,

402
00:38:57,375 --> 00:39:05,125
open source security tools, just
change my Bluetooth adapters to
spoof other Bluetooth Macs of my

403
00:39:05,125 --> 00:39:09,417
choice. Then I pair them off
with each other so they will
start leaking data everywhere

404
00:39:09,417 --> 00:39:14,583
and drive around and now I can
be someone else. If this is
being used as a surveillance

405
00:39:14,583 --> 00:39:19,375
system, if they are tracking
people this way, I can lay a
false trail. With my one device

406
00:39:19,375 --> 00:39:24,667
I can lay a false trail of as
many devices as I want. I know
somebody has a car has five

407
00:39:24,667 --> 00:39:28,958
Bluetooth devices in it, that's
fine, I've got a hub so I can
plug in multiple transceivers

408
00:39:28,958 --> 00:39:35,292
and leak all the data I want.
You can duplicate multiple
addresses with multiple

409
00:39:35,292 --> 00:39:43,250
transceivers. So that's where my
current state was. I do have a
little bit of follow-up ideas

410
00:39:43,250 --> 00:39:45,750
for what I'm going to do with it
next. One is now that I've got
these stationary locations, I'm

411
00:39:45,750 --> 00:39:51,750
going to go to them and try to
pair with them. If I make a
connection attempt and they are

412
00:39:54,708 --> 00:40:02,208
a commodity Bluetooth hardware
they should give me their
manufacturer and their service

413
00:40:02,208 --> 00:40:05,333
class and all the other data
necessary. I don't need to
connect to them, but I'm

414
00:40:05,333 --> 00:40:09,333
curious. Because once again if
they all have the same
manufacturer, that's another

415
00:40:09,333 --> 00:40:13,542
piece of evidence that, yes,
these are probably scanners and
not just some truck parked by

416
00:40:13,542 --> 00:40:19,542
the side of the highway. So,
that is my current state. We
have any questions? Yes. >> You

417
00:40:23,375 --> 00:40:29,375
talked about how -- >> The
question was, any way to know
that they're actually only

418
00:40:34,917 --> 00:40:40,667
collecting 3-6% and not
capturing the Dragnet? Truth is
they're trying to capture a

419
00:40:40,667 --> 00:40:45,917
dragnet, but that's part of the
evidence that they're doing
inquiry scans. If you're doing

420
00:40:45,917 --> 00:40:51,208
inquiry scans you only get
discoverable devices and most
are not discoverable. Also

421
00:40:51,208 --> 00:40:56,333
because of the frequency hopping
spectrum you're only getting one
packet in 64. That's where that

422
00:40:56,333 --> 00:41:01,542
3-6% comes from. Not that
they're trying to do sampling or
trying to protect privacy, it's

423
00:41:01,542 --> 00:41:08,000
that the scanning methodology
they use loses a lot of packets.
And because the DOT just doing

424
00:41:08,000 --> 00:41:12,167
statistical analysis they don't
care. They don't have any
incentive to capture more

425
00:41:12,167 --> 00:41:17,792
packets or to make the system
better. That's good enough for
them. So really the only

426
00:41:17,792 --> 00:41:24,833
evidence we have is the kind of
- assume that DOT have fixed
budgets not going to spend money

427
00:41:24,833 --> 00:41:32,750
on stuff that doesn't actually
improve their mission. Unless
the NSA wants to pay for it, the

428
00:41:32,750 --> 00:41:38,750
NSA probably has to take what
they can get from them. Yes? The
tool built into Cali and

429
00:41:41,125 --> 00:41:46,167
Backtrack? Let's see. There is
uber tooth tools in kismet but
you may be thinking of blue

430
00:41:46,167 --> 00:41:51,542
smash tools which include a
command line. Bluetooth Mac
changer. That said, you don't

431
00:41:51,542 --> 00:41:57,417
even necessarily need that. The
blue Z library that is the key
Bluetooth library of Linux will

432
00:41:57,417 --> 00:42:01,958
allow you to specify Mac
addresses to your devices. I
think may able to do with it HDI

433
00:42:01,958 --> 00:42:09,083
tool, I'm not certain about
that. On Linux Bluetooth Macs
are user programmable. You can

434
00:42:09,083 --> 00:42:15,833
set -- it's actually kind of
nice because the blue Z stack
was basically Linux's Bluetooth

435
00:42:15,833 --> 00:42:20,750
support was written open source
from the start so a lot of the
great stuff that we had to clone

436
00:42:20,750 --> 00:42:25,958
drivers and Wi-Fi world can
manage to get to work was built
in there from the ground up on

437
00:42:25,958 --> 00:42:31,958
Bluetooth. It's been quite
convenient for people like me.
Anything else? How the scanners

438
00:42:35,625 --> 00:42:41,625
communicate with each other?
I've not looked in to that. Like
I said they said either Ethernet

439
00:42:43,875 --> 00:42:49,458
or cell modem is the way all of
the manufacturers I looked at
advertise communication. If it's

440
00:42:49,458 --> 00:42:54,875
cell modem, you can use software
radio and try to interpret that
-- probably two G cell modem,

441
00:42:54,875 --> 00:43:00,875
they don't need much bandwidth
at all. If it's Ethernet it's
obviously a little harder.

442
00:43:00,875 --> 00:43:06,875
Question over there? The
question was, is there some
mechanism like acknowledgment

443
00:43:18,833 --> 00:43:24,167
frames in Bluetooth where you
can stimulate a response on
somebody else. Yes, there is. In

444
00:43:24,167 --> 00:43:31,083
fact the uber tooth scan tool
does basically that. It spews
out a bunch of packets to get

445
00:43:31,083 --> 00:43:37,458
responses from things. The main
thing, though, is beaconing. If
the device is discoverable

446
00:43:37,458 --> 00:43:43,458
that's what the GISD address
packets do. You send them out
and they're basically screaming,

447
00:43:43,458 --> 00:43:48,250
does anybody want to pair with
me and any device that's
discoverable will respond, yes,

448
00:43:48,250 --> 00:43:54,250
this is my address. And they can
allow initiate a connection. All
right. One more? Question was

449
00:44:01,125 --> 00:44:07,333
classic Bluetooth not BLE? Yes,
it is. Because those devices in
cars all headsets those are

450
00:44:07,333 --> 00:44:12,917
Bluetooth 1.0 and 2.0, they
aren't BLE devices, they're not
Bluetooth smart. Bluetooth smart

451
00:44:12,917 --> 00:44:19,042
is hell of a lot easier to sniff
than classic Bluetooth is. But
in this case that is not what

452
00:44:19,042 --> 00:44:24,042
they're using because the
particular devices they want to
track, that's not what they're

453
00:44:24,042 --> 00:44:31,542
using. All right. I've got the
link to where I've got copy of
my slides up on my blog. I will

454
00:44:31,542 --> 00:44:38,542
update those to the current copy
of the slides today. And I will
also within next week be posting

455
00:44:38,542 --> 00:44:44,542
this talk in more white paper
oriented format on
permitergrid.com. All right.

456
00:44:47,917 --> 00:44:53,042
Thanks. [Applause]

