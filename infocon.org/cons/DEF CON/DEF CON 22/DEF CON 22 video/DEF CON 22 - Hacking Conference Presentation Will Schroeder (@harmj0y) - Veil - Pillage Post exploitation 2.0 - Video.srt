1
00:00:00,042 --> 00:00:04,292
>> So this talk is about the two
I'm tool I'm releasing called
Veil-Pillage. It's the tool I

2
00:00:04,292 --> 00:00:10,292
always wanted on internal pen
test. Real quick, a little bit
about me, I'm a security

3
00:00:15,458 --> 00:00:21,042
researcher and pen tester slash
red teamer for a company called
Veris group in northern

4
00:00:21,042 --> 00:00:26,292
Virginia, and I work for a
subgroup in there called the
Adaptive Threat Division. I'm a

5
00:00:26,292 --> 00:00:32,292
cofounder of the veil-framework,
hash tag AVLOL. Our main site is
veil-framework.com. We kind of

6
00:00:36,250 --> 00:00:42,583
premiered our tool this year at
Schmoocon 2014, under a talk
called AV evasion frame work.

7
00:00:42,583 --> 00:00:48,583
And the other guy that works on
the tool work with me is Chris.
Hi Chris. So Chris and I

8
00:00:51,833 --> 00:00:57,417
co-wrote veil evasion. I wrote
veil catapult which I'll go over
in a little bit. I wrote a

9
00:00:57,417 --> 00:01:02,042
Powershell post exploitation
situational awareness tool
called veil power tool. We'll

10
00:01:02,042 --> 00:01:06,000
talk about a couple of the
functions that are applicable
here. And I wrote a window's

11
00:01:06,000 --> 00:01:08,208
(indiscernible) show called
power up. Active Cortana and
NovaHacker. Kind of the overview

12
00:01:08,208 --> 00:01:14,208
of we're going to go through
today. A background on the frame
work A. Genesis on how we got

13
00:01:21,708 --> 00:01:26,750
there and the thought process
and the various components. And
I want to go over a few quick

14
00:01:26,750 --> 00:01:32,250
slides on post exploitation.
Kind of let everyone know this
is the exact realm of the

15
00:01:32,250 --> 00:01:38,167
assessment cycle that we're
operating in. I'm going to go
over veil Pillage. And feature

16
00:01:38,167 --> 00:01:45,292
sets and a few interesting
current modules. There's 59 of
these so I'm not going to sit

17
00:01:45,292 --> 00:01:50,542
here and go through every single
one. Don't worry. I will then
come back and talk specifically

18
00:01:50,542 --> 00:01:56,583
about some of the functionality
that deals with hashdumping and
plain text spread covering.

19
00:01:56,583 --> 00:02:02,958
Demos a few videos. So I don't
have to pray the demo gods so
nothing would break. I'll wrap

20
00:02:02,958 --> 00:02:08,958
up talking a little bit about KB
2871997. A Microsoft pass the
hash patch. We'll see if that

21
00:02:11,042 --> 00:02:17,000
stops that much. I'll finish
with going over a few of the
upcoming module releases and how

22
00:02:17,000 --> 00:02:21,000
you can develop your own
functionality for this frame
work. And then I'll recap a

23
00:02:21,000 --> 00:02:28,375
little bit. The veil frame work.
Is anyone willing to raise their
hand who might be using the veil

24
00:02:28,375 --> 00:02:31,667
frame work for veil evasion?
That's awesome. Our kind of
branding for the tool set is we

25
00:02:31,667 --> 00:02:34,500
want to bridge the gap between
testing and renting
capabilities. So it started with

26
00:02:34,500 --> 00:02:36,708
the release of veil evasion.
veil originally titled veil.
Later renamed veil evasion. We

27
00:02:36,708 --> 00:02:38,708
released a few more tools since
then that I mention. So the
original motivation for this

28
00:02:38,708 --> 00:02:41,792
first part was our back door's
were being caught by AV. AV
started to catch up. So we built

29
00:02:41,792 --> 00:02:46,083
a modular framework that
generated AV-Evading
executables. So we have a

30
00:02:46,083 --> 00:02:51,917
variety of shell code injectors
and higher level of pure
Meterpreter stagers with that

31
00:02:51,917 --> 00:02:56,500
same logic translated into a
higher language like power shell
and pi THON. We debuted at

32
00:02:56,500 --> 00:03:02,500
Schmoocon 2014 with AV evasion
with the veil frame work. We're
excited. Kind of how Pillage

33
00:03:21,542 --> 00:03:27,542
came about. After dealing with
AV evasion, our focus moved
toward payload delivery. How do

34
00:03:32,542 --> 00:03:38,542
we get it on our target machine?
Also released was a small tool
called veil catapult which tied

35
00:03:44,125 --> 00:03:50,042
in with veil evasion that can up
load and trigger executables
and ‑‑ ‑‑ and do a UMC hack back

36
00:03:50,042 --> 00:03:56,000
and I'll go into more detail
about that. And a few common
tricks like everyone's sticky

37
00:03:56,000 --> 00:04:02,708
piece back door. The thing with
that is it's kind of screaming
for a more generalized post

38
00:04:02,708 --> 00:04:08,833
exploitation structure. And the
attack cycle is my nifty little
graphic and you have your basic

39
00:04:08,833 --> 00:04:10,833
recon, enumeration. Pillage
doesn't deal with exploitation
and numeration special

40
00:04:10,833 --> 00:04:18,583
specifically with the initial
part of the assessment we're
entirely operating with the post

41
00:04:18,583 --> 00:04:25,708
exploitation component. I'm not
going to go through all of
these. The slides are online.

42
00:04:25,708 --> 00:04:31,083
Our slide share via our frame
work. This is a more granular
way of breaking down these

43
00:04:31,083 --> 00:04:35,583
exploitation actions. The big
point here is we want to
demonstrate impact. If we have a

44
00:04:35,583 --> 00:04:42,083
relatively short engagement, we
don't want to waste time
scripting stuff up all the time

45
00:04:42,083 --> 00:04:46,792
or rerolling back doors and that
type of stuff. We want to
maximize time we can demonstrate

46
00:04:46,792 --> 00:04:52,792
impact. So exploitation stuff in
plain English. This is one way
to interpret it. If you have

47
00:04:55,750 --> 00:05:00,750
access or credentials to one or
more machines in the net work,
what can you do? You can execute

48
00:05:00,750 --> 00:05:05,750
a command on the box what kind
of nastiness can you kinda tell.
Kind of a quintessential

49
00:05:05,750 --> 00:05:11,458
example, local administer hash
or several remote hosts on a
network. And you want to grab

50
00:05:11,458 --> 00:05:16,000
plain text of all the users
logged onto the host. How would
you go about doing that? One

51
00:05:16,000 --> 00:05:22,000
option is using Metasploit.
Connect to the box get a section
install an agent. The advantages

52
00:05:25,292 --> 00:05:29,875
of this are its very flexible
and powerful. You can utilize
the entire Metasploit frame work

53
00:05:29,875 --> 00:05:34,583
around all those awesome
extensions, all those awesome
post modules some of the draw

54
00:05:34,583 --> 00:05:40,500
backs are service running the
systems created. So that can
create noise or logs and dis.

55
00:05:40,500 --> 00:05:46,000
And there's a lot of nonstandard
traffic when you're staging an
an interpreter. If the client

56
00:05:46,000 --> 00:05:52,000
has more in depth network
filtering detection, that might
get you caught. Also known

57
00:05:55,125 --> 00:06:00,875
malicious binary dropped. You
can throw in custom things, but
you're still touching disks.

58
00:06:03,042 --> 00:06:08,417
Another option is to use the
tool SMBexecs to upload and
execute a WCE binary.

59
00:06:08,417 --> 00:06:14,542
(Indiscernible) files after. If
advantages are, you don't need
to establish a full interpreter

60
00:06:14,542 --> 00:06:22,167
session, and it doesn't rely on
the Metasploit binary templates.
But, system level service is

61
00:06:22,167 --> 00:06:27,750
still created and known
malicious binaries are
throughout the disk. If you have

62
00:06:27,750 --> 00:06:33,750
a static binary that's touching
disk, it's pretty easy for AV to
write a static signature for it.

63
00:06:36,208 --> 00:06:42,208
Another option is using the PASH
and hash kit. Awesome projects.
The advantages are, use WIMS, no

64
00:06:44,500 --> 00:06:49,500
service is created. It's quiet.
Also no binary's dropped to this
if you're operating purely in

65
00:06:49,500 --> 00:06:55,917
powershell. Draw backs, it's
incredibly powerful tool set,
but the usage is not always is

66
00:06:55,917 --> 00:07:02,167
simplest. People who play with
this it, there's a variable
entry. There's got to be a way

67
00:07:02,167 --> 00:07:08,167
we can weaponize this a little
bit easier. What if power
shell's disabled or not

68
00:07:12,000 --> 00:07:18,542
installed. And the key here is
all these options might work in
certain situations, but often

69
00:07:18,542 --> 00:07:24,542
not every situation. The kind of
what I envisioned we wanted in
an ideal tool is a lot of

70
00:07:27,167 --> 00:07:33,167
trigger options as many as you
can have. We use Win EXE. WIMS.
SMD impact. We also want really

71
00:07:37,750 --> 00:07:42,667
good modularity to where you
want it as easy as possible
to implement additional

72
00:07:42,667 --> 00:07:48,333
exploitation act. We want other
tools to integrate with ours.
You can run a module and drop it

73
00:07:48,333 --> 00:07:55,542
in. You want this to be as
flexible as possible. And also
completeness. It would be nice

74
00:07:55,542 --> 00:08:00,000
if there was full automation and
comprehensive log in and clean
up. We want to know every single

75
00:08:00,000 --> 00:08:07,083
host we touch and what they did.
And we want a way to repair that
very easily in the ‑‑ I'll go

76
00:08:07,083 --> 00:08:13,708
over the (indiscernible) enough
stuff and go over that later. My
tool, Veil-Pillage, is the next

77
00:08:13,708 --> 00:08:19,708
iteration of catapult. It was
kind of the genesis of it. The
primitives that it's built on is

78
00:08:22,750 --> 00:08:28,750
using the pass in the hash I
mentioned.  ‑‑ ‑‑ doesn't create
a service. (Indiscernible) the

79
00:08:32,333 --> 00:08:39,958
equivalent of PS exec.it runs a
system of binary DRO. Something
that touches disk but not

80
00:08:39,958 --> 00:08:45,958
working. Also use S and P
impact. Everything is extracted
out to library methods. So when

81
00:08:57,292 --> 00:09:03,042
you're developing your module,
what's the syntax for this and
that, you can drop stuff in and

82
00:09:03,042 --> 00:09:09,458
use it on library. I'm going to
be building this diagram up of
all the components of

83
00:09:09,458 --> 00:09:17,083
Veil-Pillage. These are the
primitives that the entire frame
work is built on. So veil

84
00:09:17,083 --> 00:09:23,083
catapult, these are also
catapults that, security
essential castles. All the demo

85
00:09:23,083 --> 00:09:30,708
machines recorded on. And it
still didn't catch anything a
year later. So all of catapult's

86
00:09:30,708 --> 00:09:36,708
functionality has been modularly
integrated. The EXE delivery,
the powershell injector, the

87
00:09:41,792 --> 00:09:47,958
python injector. I'll talk about
in a few slides. And everyone's
favorite sticky keys. The

88
00:09:47,958 --> 00:09:55,625
catapult will now be obsoleted.
We recommend everyone use
pillage because it's a lot more

89
00:09:55,625 --> 00:10:01,625
flexible. A close up soon on
transitioning and the difference
between the two tools. And so

90
00:10:03,875 --> 00:10:07,917
yeah, I think catapult's cool,
but those are a little cooler.
EXE is core original function

91
00:10:07,917 --> 00:10:13,917
for catapult executables can be
specify. Or you can take
advantage of seamless

92
00:10:18,458 --> 00:10:26,083
integration. While shown the
demo, you specify veil, it'll
drop into the exact same

93
00:10:26,083 --> 00:10:32,458
interface. You can roll up all
the options you want and drops
right back to the veil

94
00:10:32,458 --> 00:10:38,458
interface. So the seamless as I
can make it And triggered with a
UNC backpack. What's this? So.

95
00:10:47,125 --> 00:10:51,833
(Laughing) I help create the
veil frame work. And there's a
veil vodka we found. So that's

96
00:10:51,833 --> 00:10:57,833
my shot. >>	No no keep talking.
>>	Okay. Keep talking. So the
UNC location. You stand up and

97
00:11:06,917 --> 00:11:12,917
kind of host the file
temporarily on an SMB server
that's set up and torn down

98
00:11:18,750 --> 00:11:24,583
transparently. When you trigger
it, that's EXE is loaded
straight on a memory into host.

99
00:11:24,583 --> 00:11:31,625
This gets some otherwise disk
detectable EXE's right by
antivirus. If you want to see a

100
00:11:31,625 --> 00:11:36,292
demo of this, check out our
schmoocon presentation. The
slides and everything is online.

101
00:11:38,792 --> 00:11:46,750
The python injector I mentioned.
This take a strip down python
environment in the strip and

102
00:11:46,750 --> 00:11:52,750
upload it to the host. >>	Ready?
>>	Okay. First time Speaker DEF
CON. Have a little love.

103
00:11:57,250 --> 00:12:03,250
(Applause.). we've got the veil
vodka for the veil tool.
>>	Thank you. >>	You're the

104
00:12:11,583 --> 00:12:17,958
first speaker to provide your
own shot. By the way, that
bottle is big enough for

105
00:12:17,958 --> 00:12:23,667
everybody in the audience. So
if. >>	If anyone want AS shot
after, come talk to me. I'm not

106
00:12:23,667 --> 00:12:29,542
going to drink all that. So the
python injector. It'll upload
the python zip and unzip the

107
00:12:29,542 --> 00:12:35,542
entire thing to disk into a
temporary file. And then it uses
a dash D option with python EXE

108
00:12:38,125 --> 00:12:44,125
to ‑‑ ‑‑ straight to memory. So
this is basically a analog. It's
very similar to power shell

109
00:12:46,750 --> 00:12:51,917
injection that a lot of people
are familiar with. So what's
nice about this is the only

110
00:12:51,917 --> 00:12:56,917
files that touch this are the
trusted python libraries and the
trusted known python

111
00:12:56,917 --> 00:13:01,792
interpreter. So this can help
you get by certain types of
reputation filters. Saying oh I

112
00:13:01,792 --> 00:13:05,833
didn't have I haven't seen the
EXE before, I don't know if it's
bad but I'm going to provide

113
00:13:05,833 --> 00:13:11,417
additional protection on it
because it's unknown. And also,
when you want to generate shell

114
00:13:11,417 --> 00:13:15,750
code, it'll drop right into the
the veil evasion too. So just
like one little line, you don't

115
00:13:15,750 --> 00:13:22,417
have to do any kind of heavy
lifting. All kind of veil
functionality built in if you're

116
00:13:22,417 --> 00:13:28,417
going out. So the fun stuff, new
modules. Enumeration. So you
know, if you have ‑‑ if you scan

117
00:13:31,417 --> 00:13:36,708
your net work with Medusa or
incorrect or something like
that, I think these credentials

118
00:13:36,708 --> 00:13:44,625
work in different places, this
will verify if you can connect
to the box. It connects them.

119
00:13:44,625 --> 00:13:48,500
Tries to create a temporary
folder and immediately delete
it. It's a little bit more

120
00:13:48,500 --> 00:13:53,375
accurate and a bit more slower.
So scan and use this. ‑‑ ‑‑ User
hunting is a very common

121
00:13:53,375 --> 00:13:57,750
activity that any pen testers
I'm sure do if you have
credentials that work on lots of

122
00:13:57,750 --> 00:14:04,208
machines. You wanna find okay a
high valued user logged in on
the network. You use this, it

123
00:14:04,208 --> 00:14:11,792
runs through a few boxes it
works on. Validates, and it'll
pop. Saying -- is here here here

124
00:14:11,792 --> 00:14:17,000
here here here here. Or if you
want to do some kind of basic
host enumeration reactions, it's

125
00:14:17,000 --> 00:14:23,167
the arch table, do the
interfaces, that type of stuff.
Management, occasionally, if

126
00:14:23,167 --> 00:14:30,625
you're an internal test, you
might want to do enable disable
UAC or RDP. Actually showed this

127
00:14:30,625 --> 00:14:36,583
in the demo. If you have net
work level access on the chain,
RDP may not be enabled. Maybe

128
00:14:36,583 --> 00:14:40,125
you want to set your sticky keys
back ‑‑ there's certain actions.
Also you might, in certain

129
00:14:40,125 --> 00:14:46,125
situations need to force users
to log off, reboot the machine,
shut it down. To trigger certain

130
00:14:50,542 --> 00:14:56,708
post exploitation actions. This
is fun, persistent stuff,
everyone's favorite little fun

131
00:14:56,708 --> 00:15:00,833
activity. We can throw up the
bits in the back door really
easily. To schedule a download

132
00:15:00,833 --> 00:15:05,958
job for an EXE. Sticky keys,
it ‑‑ ‑‑ stick key keys binary.
So it sets the bugger. The box

133
00:15:05,958 --> 00:15:11,958
for the system pops up before
you could log in. Little bit of
a lesser own one. UNC hijacking.

134
00:15:23,292 --> 00:15:31,000
If you append a UNC path to a
packing variable on a machine
and that machine reboots, system

135
00:15:31,000 --> 00:15:36,542
services or services and
programs and stuff when they
start up will actually look to

136
00:15:36,542 --> 00:15:42,458
that UNC path for dll's to load.
So I have a tool in here under
slash tool that is you can bring

137
00:15:42,458 --> 00:15:49,750
it up and it'll scrip wire shark
and hijack opportunities. You
host up a malicious DLL from

138
00:15:49,750 --> 00:15:55,625
your host, and you have your
persistence. Powersploit ‑‑ ‑‑
weaponization. So my solution is

139
00:15:55,625 --> 00:16:01,625
I'll set up a temporary web
server and I trigger everyone's
little favorite download string.

140
00:16:08,125 --> 00:16:14,125
It'll trigger that, re inspect
your tacker box, running memory.
Now click files out put. And

141
00:16:18,083 --> 00:16:24,500
then I run and grab it and clean
everything out. So this makes it
really easy to run powersploit

142
00:16:24,500 --> 00:16:30,000
across a large number of
machines when you're on
engagement. There's also clean

143
00:16:30,000 --> 00:16:34,792
up to kill off all the processes
and stuff. Now this is really
kind of the meat of the tool,

144
00:16:34,792 --> 00:16:41,875
all the modules and Powersploits
stuff and enumeration stuff and
those types of things. So here

145
00:16:41,875 --> 00:16:48,333
I'm going to go over a few of
the new features I integrated
in. So last month the veil team

146
00:16:48,333 --> 00:16:55,833
released a custom written higher
level powershell stagers for
Meterpreter. Reverse https.

147
00:16:55,833 --> 00:16:59,792
These don't utilize shell code
and they work great in the
passing the hash tool kit. That

148
00:16:59,792 --> 00:17:07,375
shell code can't be decoded from
a file or something like that.
Because it's not being run.

149
00:17:07,375 --> 00:17:12,708
There's also X86 and 64‑bit
compatibility by default. You
run this stuff, and then choose

150
00:17:12,708 --> 00:17:20,500
the correct string to inject,
it'll choose the correct power
shell binary to use for the

151
00:17:20,500 --> 00:17:28,458
injection. Output and cleanup,
like I said, we're pen testers.
We really like to have

152
00:17:28,458 --> 00:17:32,833
everything logged. We want to
know exactly what happened if
something goes wrong. Our client

153
00:17:32,833 --> 00:17:38,208
wants to know how we got into
somewhere. These credentials
were used on this box for this

154
00:17:38,208 --> 00:17:44,667
action. So Pillage has a
universal activity log it also
breaks it out by modules. So

155
00:17:44,667 --> 00:17:50,125
everything host and everything
is broken down and time stamped.
And also clients are pretty

156
00:17:50,125 --> 00:17:54,375
picky. They don't like malware.
They don't like you leaving
malware around the networks.

157
00:17:54,375 --> 00:18:00,125
They don't like stickykeys
backdoor On a hundred machines.
So every single action veil

158
00:18:00,125 --> 00:18:05,833
pillage can execute, has a
reciprocal cleanup action that's
output to a script. So universal

159
00:18:05,833 --> 00:18:11,167
cleanup file and cleanup file
for module. You can type
Cleanup give it the file or pull

160
00:18:11,167 --> 00:18:16,292
the universal file and clean
everything up and remove any
files and all that stuff. I'll

161
00:18:16,292 --> 00:18:21,875
show that in the demo. Random
features, state preservation, if
something crashes, you can

162
00:18:21,875 --> 00:18:27,042
always rage quit with control C.
All the options are preserved.
The current module that you're

163
00:18:27,042 --> 00:18:32,625
operating under is dumped right
back to. All your targets and
credential sets and options it's

164
00:18:32,625 --> 00:18:37,542
all preserved. When you start it
up it'll prompt you do you want
to restore this initial state?

165
00:18:37,542 --> 00:18:43,792
You can save those off and
rename them. There's also
Metasploit back end database

166
00:18:43,792 --> 00:18:51,000
interaction. Right now it can
pull in any credential sets or
targets from a Metasploit back

167
00:18:51,000 --> 00:18:56,083
end and you can add those into
your target. A common thing we
can do is SMB log in ‑‑ ‑‑ Every

168
00:18:56,083 --> 00:19:04,042
single thing will be tab
complete able is tab complete
able, cause I've had to type

169
00:19:04,042 --> 00:19:08,833
through this stuff so many
times. There's reasonably robust
air check. There's complete

170
00:19:08,833 --> 00:19:14,833
command line options. And just a
really big UI focus. Pillage
contains complete command line

171
00:19:18,708 --> 00:19:24,917
flags for every option you can
set in the frame work. I Script
up other tools beneath mine a

172
00:19:24,917 --> 00:19:32,417
lot of the time. I want people
to be able to integrate all this
functionality. So Veil-Pillage

173
00:19:32,417 --> 00:19:38,792
SH. It's really small but there
for every option. You can set at
targets, clean up stuff, state

174
00:19:38,792 --> 00:19:45,250
restores, veil evasion options,
all these types of things. So
that's kind of the last part of

175
00:19:45,250 --> 00:19:51,292
veil Pillage. We have the
features and icing on top. And
the modules on part of it. The

176
00:19:51,292 --> 00:19:57,292
functionality and primitives and
all the good stuff. I'm going to
back up just real quick. Some of

177
00:19:59,375 --> 00:20:05,375
the interesting core modules for
hash dumping and plain text
graphing. The hash dumping.

178
00:20:07,375 --> 00:20:12,833
There are a verse number of ways
to dump hash on a system. A lot
of traditional ways is dropping

179
00:20:12,833 --> 00:20:20,750
a binary. Deal with that is, AV
start today flag or write
signature should be static tool.

180
00:20:20,750 --> 00:20:25,333
So we don't always like to drop
stuff to disk, you could get
registry backups w/ reg.exe pull

181
00:20:25,333 --> 00:20:29,750
those files down. Or you can get
a Meterpreter session, do it a
little bit manually do a hash

182
00:20:29,750 --> 00:20:35,750
dump, wdigest and all that
stuff. Some of the new hotness,
power dump strip. You can hash

183
00:20:35,750 --> 00:20:41,375
dump using power power shell.
Using WCE and Mimikatz binaries.
And also, the power split

184
00:20:41,375 --> 00:20:47,375
project has Mimikatz integrated
completely in power shell. Which
I'll go over completely in a few

185
00:20:49,667 --> 00:20:53,250
slides. The thing, like I
mentioned with hash company,
different actions work in

186
00:20:53,250 --> 00:20:57,625
different situations. So if you
want a universal solution, you
need to expose all those

187
00:20:57,625 --> 00:21:02,333
options. But maybe you can
automate some logic. Depending
on architecture, Powershell

188
00:21:02,333 --> 00:21:08,333
Installation, AV installation
can affect what they might do.
And some of these like I mention

189
00:21:08,333 --> 00:21:14,167
involve dropping a well known
close-sourced tools to disk. You
want to always have options to

190
00:21:14,167 --> 00:21:20,167
fall back. We like staying off
of disk as much as possible.
Mimikatz, I saw your

191
00:21:23,917 --> 00:21:29,917
credentials, Mimikatz stickers,
(indiscernible) is actually
right here. Thank you for

192
00:21:33,667 --> 00:21:39,667
Mimikatz. Mimikatz and power
shell is incredibly awesome. It
utilizes WLS fire work

193
00:21:45,208 --> 00:21:49,792
with reflectivePEinjection to
inject an architecture
appropriate Mimikatz DLL into

194
00:21:49,792 --> 00:21:55,458
the system. This is just awesome
you can harness the power of
Mimikatz without having to touch

195
00:21:55,458 --> 00:22:01,458
the disk. You can do all that
fun stuff. So for Pillage, all
these users are exposed as

196
00:22:05,458 --> 00:22:11,375
modules. In case the users wants
to force this for particular
decisions. But there's also

197
00:22:11,375 --> 00:22:17,917
modules called autograph that
tries to build this in. It'll
check the power shell working.

198
00:22:17,917 --> 00:22:23,875
Not even just if it's install.
But power shell command. If you
can, I have a combination of

199
00:22:23,875 --> 00:22:28,917
power dump and powersploit
triggered with that web
downloader. If it's not, it runs

200
00:22:28,917 --> 00:22:34,750
a command to try to determine
the architecture. And host is
x86 or 64-bit binaries with that

201
00:22:34,750 --> 00:22:39,708
SMB server and just a U/nC
backpack. Then it collects
credentials and all unique lists

202
00:22:39,708 --> 00:22:45,750
and has all the raw out put as
well. All right, demos, I'm not
tempting the demo god. So this

203
00:22:45,750 --> 00:22:51,750
is starting at veil Pillage. I'm
going to show a little bit of
the interface. We have our

204
00:22:56,833 --> 00:23:03,708
version up there. Right now
we're 1.0.0. We have the site.
We have the number of modules

205
00:23:03,708 --> 00:23:11,250
released or loaded. In this case
it's 59. I'll go over the
release schedule soon. List is

206
00:23:11,250 --> 00:23:16,500
the command to list, either your
modules target or credentials.
Set, you can set a single

207
00:23:16,500 --> 00:23:22,500
target. You can also specify a
target file. So if you have a
giant list of targets from a

208
00:23:24,542 --> 00:23:30,542
tool output, targets being set.
I'll show resetting the targets
if you want to just clear it all

209
00:23:34,833 --> 00:23:40,833
out. This is the best way back
into stuff. So the DB list
targets will clear the database.

210
00:23:43,042 --> 00:23:47,708
It doesn't do a live link to the
database it'll do a query and
then I can add pull in that

211
00:23:47,708 --> 00:23:53,708
static set and choosing
separated and it'll set that in
an internal state and Pillage.

212
00:24:00,250 --> 00:24:05,833
So then I think I'm going to
show how you use a the database
interaction to actually set the

213
00:24:05,833 --> 00:24:11,833
credential sets. See this is
output from successful SMB post
log in or post module or

214
00:24:16,875 --> 00:24:22,667
enumeration module. So DBi creds
can become separated. Set all
those up. Administrative and

215
00:24:22,667 --> 00:24:28,667
hash. So now if you just type
list or list module, see
Powersploits, persistence,

216
00:24:32,833 --> 00:24:38,542
payload delivery, impact and
stuff enumeration this is the
module that had a little bit of

217
00:24:38,542 --> 00:24:45,042
logic built in called the
autograb. Here are all the
options available for this

218
00:24:45,042 --> 00:24:51,042
module. The other way you can
invoke it is say using the
number and use and tab complete

219
00:24:53,042 --> 00:25:01,000
and it'll tab complete out the
entire trip. So I'm setting an
option for the reach back. You

220
00:25:01,000 --> 00:25:05,917
can set SSL for HTTPS something
like that if you wanted. So I
just press control C so I just

221
00:25:05,917 --> 00:25:11,917
rage quit out the entire thing.
It'll prompt the state ones to
be restored. Or right back in to

222
00:25:14,292 --> 00:25:17,958
autograb. All the options are
still set, all the targets are
still set. All the creds are

223
00:25:17,958 --> 00:25:23,958
still set. I'm going to run it.
It's going to prompt me to
confirm. On that background

224
00:25:39,250 --> 00:25:44,750
defective power shell is
installed on the first host.
HTTP server. You see the Get

225
00:25:44,750 --> 00:25:48,375
actually coming back from that
host, you don't have to
configure the server or

226
00:25:48,375 --> 00:25:54,375
anything. Making it as easy as
possible for the user. Killed it
off. Gives it a few seconds and

227
00:26:00,250 --> 00:26:05,833
when you're playing around with
L sats it might be just take a
little bit. Move on to the next

228
00:26:05,833 --> 00:26:10,000
host. See Powershells installed
again. You're going to set up
that same server, reach back,

229
00:26:10,000 --> 00:26:16,000
you know with the different
little randomized script name.
So all these modules will have

230
00:26:31,083 --> 00:26:37,625
an output file. You can also
display that out put immediately
when you hit next. All the

231
00:26:37,625 --> 00:26:44,917
unique cashes. Unique apply to a
nice list. The raw out put is
going to be under the

232
00:26:44,917 --> 00:26:50,917
autograbber spreads. It'll show
you the raw out put file and the
host in the time stamp. So

233
00:26:53,083 --> 00:27:00,625
there's that one the host,
you'll see the autograb.texy.
All this stuff for veil is out

234
00:27:00,625 --> 00:27:06,625
put by Veil output. For veil
Pillage, there's activity logs.
It'll start building up. If you

235
00:27:11,250 --> 00:27:17,458
go into the the module folder,
it'll be split up with that
initial out put file in the time

236
00:27:17,458 --> 00:27:23,458
stamp we saw. And also it'll
show the raw out puts. So
there's all the nice raw

237
00:27:32,542 --> 00:27:38,542
MimiKatz output. Now, show some
power sploit. I think I ‑‑ I'll
shed the list targets again. And

238
00:27:51,833 --> 00:27:56,583
we're going to upload these
demos to the veil frame work
YouTube. We'll tweet out a link

239
00:27:56,583 --> 00:28:02,333
or something about it. So all of
the nice powersploit modules.
I'm going to use both invoke

240
00:28:02,333 --> 00:28:09,458
shell code MISL and use them,
neat little.net reflections to
execute shell code. I still have

241
00:28:09,458 --> 00:28:14,875
all my al hosts and stuff. And
set, and one thing here, in this
one handler, you set it to true,

242
00:28:14,875 --> 00:28:20,875
we'll autospawn you to hand
learn in the background. You see
here, we're dropping straight

243
00:28:24,083 --> 00:28:30,292
evasion for veil shell code
evasion. You're not having to
script up stuff and facing them.

244
00:28:30,292 --> 00:28:36,292
If you're more interested in in
the evasion functionality, check
out the smoothcon talk. I'm

245
00:28:36,292 --> 00:28:42,292
saying all the options for
windows interpreter TCP.
Autolaunchers a handler. All the

246
00:28:46,292 --> 00:28:52,292
options are preconfigured. Make
sure it runs. when I hit this is
the same kind of thing just like

247
00:29:03,417 --> 00:29:10,208
with the autograph. The host is
reaching back and scribing that
power shell snippet, running a

248
00:29:10,208 --> 00:29:15,875
memory to an out put file but
then it goes in the graph. So
there are all my interpreter

249
00:29:15,875 --> 00:29:21,875
sessions proving I'm not a liar
actually as an interpreter. Now,
if there's a clean up file or

250
00:29:29,625 --> 00:29:33,792
there's a clean up action
associated with the module,
showing output first exactly

251
00:29:33,792 --> 00:29:39,750
what was triggered where, this,
we're going to invoke the global
clean up file. You could have

252
00:29:39,750 --> 00:29:44,208
specified the global clean up
file. Is it going to run
through? It's going to kill

253
00:29:44,208 --> 00:29:47,167
everything off. All your
sessions are dead. So
everything's back out to out

254
00:29:47,167 --> 00:29:53,167
laws. Last one, sticky keys. See
all the resistance options,
adding users, main groups, UFC

255
00:30:06,333 --> 00:30:12,625
stuff. Stick key keys. People
have used the sticky keys.
There's no reason we can't up

256
00:30:12,625 --> 00:30:18,625
load our own binary to set that
to be the bugger. So why don't
we generate a stager to set that

257
00:30:21,958 --> 00:30:27,958
to be the sticky keys trigger.
This now is dropping into the
the full veil evasion menu.

258
00:30:30,125 --> 00:30:36,375
We're going to use our python
tripper reverse CCP. It's just
kind of that logic from the

259
00:30:36,375 --> 00:30:42,375
shell code translates to a
higher level language.  into a
pyinstaller executable here. All

260
00:30:45,292 --> 00:30:49,500
again in the background, I
remember having to do this
manually back in the day. It

261
00:30:49,500 --> 00:30:55,958
wasn't as much fun. That's our
output. veil evasion. Press
enter and we're dropped right

262
00:30:55,958 --> 00:31:02,042
back into veil Pillage
transparently. This is up
loading that payload file and

263
00:31:02,042 --> 00:31:08,042
naming this sys update.exe and
uploading it to C:/ Windows. We
have our out put again showing

264
00:31:10,625 --> 00:31:15,958
our binary. Show exactly where
it's uploaded using more
credentials. And I'll say, even

265
00:31:15,958 --> 00:31:22,500
though we can reach that host,
we can't actually RDP it,
because it's disabled. So I can

266
00:31:22,500 --> 00:31:27,833
use some of the management
functionality, to actually
enable RDP stuff. It'll set the

267
00:31:27,833 --> 00:31:33,833
firewall rule and all those
types of things. Output again.
Firewall accept ion already

268
00:31:45,625 --> 00:31:53,417
enabled. Let's try RDPing again.
We're not even having to log in.
We have our handler in the

269
00:31:53,417 --> 00:31:59,417
background. Press shift five
times and we get our Meterpreter
session. (Applause.) This is a

270
00:32:02,667 --> 00:32:08,667
little nicer because if you just
leave the regular sticky keys up
and anyone can connect to it.

271
00:32:10,708 --> 00:32:16,875
With this, at least control the
IPs connect back to the state.
So I'm going to go through clean

272
00:32:16,875 --> 00:32:23,208
up manually. I'm going to go
through both parts. Both able
the sticky keys. I could show

273
00:32:23,208 --> 00:32:29,208
you the clean up and repairs but
I can show two steps. Specify
the clean up file. I could have

274
00:32:31,542 --> 00:32:39,167
passed this command line. So
cleaned it up. Shift five times
and sticky keys is back. And

275
00:32:39,167 --> 00:32:45,167
binary's cleaned off. No
artifact left on the machine.
The second clean up file to

276
00:32:48,958 --> 00:32:56,833
redisable RDP. The box is
exactly how it was when we first
got to it. Nope, can't RDP

277
00:32:56,833 --> 00:33:03,208
anymore. So again, this isn't
rocket science, but it really
simplifies being able to

278
00:33:03,208 --> 00:33:09,208
weaponize log in techniques. All
right, let's talk about
KB 2871997. The oh my God us pen

279
00:33:19,250 --> 00:33:25,250
testers don't have a job patch.
My boss freaked out. It's not
that bad. It's pass the hash

280
00:33:30,333 --> 00:33:36,333
patch AKA the MimiKatz KB. It's
a Microsoft backport of a lot of
window's 8.1 security

281
00:33:39,583 --> 00:33:44,750
protections. It does stuff that
makes it difficult to pour creds
of veil pass. But the thing we

282
00:33:44,750 --> 00:33:50,333
care about in this context, it
contains this line that TO say
this patch prevents network log

283
00:33:50,333 --> 00:33:54,542
on and promote interactive log
on using local accounts. The
reason this sounds ominous is

284
00:33:54,542 --> 00:33:56,542
because this how you almost
always spread laterally. You've
done local admin hashes. You pop

285
00:33:56,542 --> 00:33:58,542
all your boxes and find your
high value users. This is a
screen shot of the Microsoft

286
00:33:58,542 --> 00:34:00,542
advisory. Originally titled
update to fix. Someone yelled at
them and a few hours later is

287
00:34:00,542 --> 00:34:02,542
now update to improve
credentials protection and
management. Someone luckily

288
00:34:02,542 --> 00:34:04,542
caught this. So is this actually
a patch? We're pass the hatch.
No. Even though they claim local

289
00:34:04,542 --> 00:34:10,542
accounts on the box in the local
administrator's group you can no
longer patch the hash with. As

290
00:34:33,167 --> 00:34:38,750
usual, the head 500 account
which is the default administer,
you can still pass the hatch

291
00:34:38,750 --> 00:34:44,625
with it if it's enabled.
Window's 7n by default will
disable this, but we've seen

292
00:34:44,625 --> 00:34:51,833
this rid 500 still enable the a
very, very large number of
enterprises. The reason is

293
00:34:51,833 --> 00:34:58,208
backwards compatibility. And
security management and things
like that. Also domain accounts

294
00:34:58,208 --> 00:35:04,708
and administer's local group can
still patch the hatch. If you
have the plain text for these

295
00:35:04,708 --> 00:35:11,708
local administrator accounts you
can use powershell removing RDP
you need a plain text. You might

296
00:35:11,708 --> 00:35:17,708
be able to crack or GPP.
Obviously XP and window's 2003
aren't affected. Pop the hatch

297
00:35:23,000 --> 00:35:29,750
is not hatched is not going away
anytime soon. One of the things
I realize I'm looking into this

298
00:35:29,750 --> 00:35:36,125
is it would be really nice to
know what that rid 500 account
is named in the remote machine.

299
00:35:36,125 --> 00:35:42,625
Whether it's enabled and what
domain user accounts are in the
local group for administrators.

300
00:35:42,625 --> 00:35:49,083
Luckily using the power shell,
the most basic domain account,
using no privileges whatsoever,

301
00:35:49,083 --> 00:35:54,167
you can use this neat thing
called WinNT service provider to
pull all of this information.

302
00:35:54,167 --> 00:36:00,833
You can get the full said for
the admin account, whether it's
enabled disabled and all of the

303
00:36:00,833 --> 00:36:05,833
domain users in that local
group. You can also use ‑‑ if
you have an account, again, this

304
00:36:05,833 --> 00:36:11,000
you can't use in like old
sessions or something. You can
also use the M map scripts, SMB

305
00:36:11,000 --> 00:36:18,625
groups and SMB users. All these
power shell functions have been
integrated in the power project.

306
00:36:18,625 --> 00:36:23,750
So there's one function you can
grab them from a single host.
There's one that will query AD

307
00:36:23,750 --> 00:36:28,417
at every single machine. That's
sortable. Telling you every
single host, every single local

308
00:36:28,417 --> 00:36:34,417
admin and all that stuff.
There's more information on my
blog humjoy.net. A few last

309
00:36:37,333 --> 00:36:43,333
things. So module releases we
have something called V day. We
released at least one new

310
00:36:45,917 --> 00:36:51,500
payload module. For pillage, the
plan is for at least a few
months try to release at least

311
00:36:51,500 --> 00:36:56,500
one new post exploitation module
on the first. It'll be at the
Gethub which I'll check at the

312
00:36:56,500 --> 00:37:02,500
end. veilframe work.com for
dates. For module development, I
want you to be able to implement

313
00:37:05,583 --> 00:37:09,875
whatever post exploitation fund
you can think of. All the
triggering methods, the file

314
00:37:09,875 --> 00:37:15,292
down loads, all available as
library methods, you don't have
to configure them or remember

315
00:37:15,292 --> 00:37:21,958
the syntax. There's a module
template included in the tree.
We're going to have a blog post

316
00:37:21,958 --> 00:37:29,250
up on how to develop them if you
are interested if you do, please
send a full request. So quick

317
00:37:29,250 --> 00:37:35,125
recap. veil Pillage is a
flexible frame work for post
exploitation for target machines

318
00:37:35,125 --> 00:37:39,542
on an internal pen test. There's
three separate ways from
triggering. New modules are

319
00:37:39,542 --> 00:37:46,375
really easy to implement with
the common library. You can drop
them in the tree. That

320
00:37:46,375 --> 00:37:50,625
enumeration folder and
everything's split up and it'll
load it right up for you.

321
00:37:50,625 --> 00:37:55,625
There's a lot of automation,
which complete full lodging
capabilities. Complete full

322
00:37:55,625 --> 00:37:59,458
cleaning capabilities. There's a
really big UI focus. This isn't
some random script they wrote a

323
00:37:59,458 --> 00:38:02,250
month ago and dropping for DEF
CON. It's 30,000 lines.  There's
150 internal on Gets, we've been

324
00:38:02,250 --> 00:38:09,500
testing this out for a while.
I'm sure there'll be bugs. The
code's up live. I'll have it at

325
00:38:09,500 --> 00:38:15,500
the end. Please report bugs. I
want the tool to be as good as
possible. So my real quick

326
00:38:23,750 --> 00:38:29,750
Shameless sidebar testing. You
know, hit me up by e‑mail
offline or talk to me later or

327
00:38:33,333 --> 00:38:39,333
come work for us. You're an
awesome team. And that's it.
(Applause.) Any questions, hit

328
00:38:43,167 --> 00:38:49,167
me up on twitter... @harmj0y
Humj0y at veil-framework.com.
I'm on Freenode a lot.

329
00:38:55,542 --> 00:39:00,625
Veil-framework.com. Personal
blog, humj0y.net. Stuff that
doesn't directly relate to the

330
00:39:00,625 --> 00:39:05,583
veil framework good complete
write up for complete pass the
hash stuff there's a really

331
00:39:05,583 --> 00:39:11,250
complete article with screen
shot examples. If you want the
veil-framework, go to

332
00:39:11,250 --> 00:39:15,583
GetHub.com/Veil.framework.
There's also a veil super
project, where you do veil frame

333
00:39:15,583 --> 00:39:21,583
works slash veil. Run the set
up, it'll install all the
dependencies, download all the

334
00:39:26,750 --> 00:39:32,167
necessary stuff for colleague
which is the platform at this
point. It does this all

335
00:39:32,167 --> 00:39:39,042
transparently and pass the hash
tool kit and all that type of
stuff. And hopefully everything

336
00:39:39,042 --> 00:39:45,208
should work nice together. Any
questions? That's it.
>>	(Inaudible). >>	I do not have

337
00:39:45,208 --> 00:39:51,208
pass the ticket yet. I heard
about it just two days ago.
We'll see if we can get that in.

338
00:39:53,708 --> 00:39:59,875
But I think with the Mimikatz in
powersploit, because that all
the functionality there, it

339
00:39:59,875 --> 00:40:06,583
shouldn't be too hard to set up.
You won't do it directly from
your Kelly box. But you can

340
00:40:06,583 --> 00:40:12,583
essentially kind of pivot that
functionality on that target
booth. >>	(Inaudible). Umm so,

341
00:40:22,417 --> 00:40:28,792
for us, if you're doing read
teaming. Sorry the question is,
value in exploitation, oh low

342
00:40:28,792 --> 00:40:36,667
medium bone scan type things.
Everything has its place. People
need to run bone scans to get

343
00:40:36,667 --> 00:40:41,167
the low hanging fruit. But all
the attackers are doing
post-exploitation. Red teams and

344
00:40:41,167 --> 00:40:46,333
stuff and all the ports you see,
that's what they do. A lot of
tests, I'll get a basic user

345
00:40:46,333 --> 00:40:51,250
account once I get there you
know. It can just be a few hours
to domain admin, their using

346
00:40:51,250 --> 00:40:58,250
things that will not apply for
(indiscernible). Okay? I think
that's it. Anyone else has any

347
00:40:58,250 --> 00:41:04,250
questions I'll try to be out
there somewhere in the chill out
room in a bit. (Applause.) 

