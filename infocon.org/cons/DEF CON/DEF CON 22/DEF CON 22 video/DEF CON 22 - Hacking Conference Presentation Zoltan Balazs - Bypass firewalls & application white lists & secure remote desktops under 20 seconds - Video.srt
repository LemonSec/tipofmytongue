1
00:00:00,000 --> 00:00:02,833
>> All right. So, this is the
talk about fire bypassing
firewall application white list

2
00:00:02,833 --> 00:00:08,833
and secure remote desktops. Do
you know how to bypass fire
walls? If yes, raise your hand.

3
00:00:17,417 --> 00:00:23,417
Now I promised that the end of
my presentation all of you will
be able to bypass fire walls.

4
00:00:46,917 --> 00:00:52,917
This is my name, this is where I
work and this is what we usually
do. We call it AV testing but in

5
00:01:09,292 --> 00:01:15,417
reality we try bypass the
antivirus symptoms. I know it's
not challenging but some will

6
00:01:15,417 --> 00:01:22,417
have to do that job as well.
These are the things I'm really
proud to show you I'm a proud

7
00:01:22,417 --> 00:01:29,792
member of the team and we have
accompanied the second runner up
at the global competition in

8
00:01:29,792 --> 00:01:35,792
2012. I'm from Hungary and as we
are very, very small country, we
are really proud of our

9
00:01:42,000 --> 00:01:47,583
achievements. For example, did
you know that the Rubik's cube
has been invented by a Hungarian

10
00:01:47,583 --> 00:01:53,583
guy 40 years ago or did you know
that the exchange system is the
idea of a Hungarian guy. I know

11
00:01:58,875 --> 00:02:06,333
that the phone exchange system
is basically the den mother of
the internet. Also, one of the

12
00:02:06,333 --> 00:02:12,333
main parts of the basic language
is from Hungary and last but not
least two years ago a guy

13
00:02:14,417 --> 00:02:20,417
nicknamed BEBOCH won the
lifetime achievement award here
for his patches. He's also from

14
00:02:24,167 --> 00:02:30,167
Hungary. And I have to admit
that I love hacking. This is
what I do. This is my life. This

15
00:02:32,500 --> 00:02:38,500
is my hobby. Okay. Now I'm going
to ask you for a little game.
Close your eyes. All of you. And

16
00:02:44,250 --> 00:02:50,250
what I'm going ask question and
I want you to think about it for
a second. Hacking high security

17
00:02:53,042 --> 00:02:59,042
systems, what is the first image
that pops into your mind? Now
you can open it. Was it this

18
00:03:03,042 --> 00:03:09,042
one? Okay. In the slides we will
do something similar but without
having these cables and

19
00:03:12,167 --> 00:03:18,167
acrobatic stuff. Okay. So, here
is the story. Let's say that I'm
a spy and I want access to a

20
00:03:23,292 --> 00:03:29,875
secure RTP server and
unfortunately I'm not Tom Cruise
and I want to access this server

21
00:03:29,875 --> 00:03:35,875
because it's got very
confidential data or something
like that and on top of that, I

22
00:03:41,792 --> 00:03:47,792
need command and control
communication. For example I
want to upload files, download

23
00:03:49,958 --> 00:03:55,958
files or just having some code
exchange. All right. This hack
could be very easy in an ideal

24
00:04:02,083 --> 00:04:08,083
world. For example, let's say I
can steel the RTP class word,
connect to the RTP server ‑‑

25
00:04:14,458 --> 00:04:20,458
yes. (Applause). >> We have a
first time speaker and judging
by the round of applause I take

26
00:04:27,125 --> 00:04:33,125
you guys know what's going on.
We have a tradition here at DEF
CON it's called shock the newb.

27
00:04:40,208 --> 00:04:46,208
>> (Inaudible). >> Are you by
yourself. (Laughter). >> So, our
way to welcome you here to DEF

28
00:04:49,542 --> 00:04:55,542
CON, welcome. >>
Congratulations. (Applause). >>
(Inaudible). (Laughter). >>

29
00:05:11,542 --> 00:05:16,417
So ‑‑ (Laughter). 

30
00:05:19,125 --> 00:05:26,625
>>> After I impact the client
desktop I can steal the RTP
password and with the password I

31
00:05:26,625 --> 00:05:32,625
can connect to the RDP server
the command and control and
that's all. But in my case, it's

32
00:05:37,875 --> 00:05:43,917
a little bit different,
something more challenging. For
example, the RDP server is not

33
00:05:43,917 --> 00:05:50,583
reachable from the internet. And
the users are using two factor
to access the RDP server. Also

34
00:05:50,583 --> 00:05:56,583
drive has been disabled which
means there is no direct between
the RDP client and server. And

35
00:06:01,833 --> 00:06:06,917
the most important thing is that
there is some very hard firewall
between the user and the remote

36
00:06:06,917 --> 00:06:12,917
access server which only allows
from the users work stations to
the RDP server, nothing else. No

37
00:06:18,958 --> 00:06:26,667
inbounds no outbounds, nothing
else just the RDP port. At least
on the RDP server there is some

38
00:06:26,667 --> 00:06:32,667
application used. Okay. If you
think this has been made up I
can assure you that this is a

39
00:06:37,833 --> 00:06:43,833
really real scenario because
when I was doing some tests we
had a very similar environment

40
00:06:46,917 --> 00:06:53,625
client and we were talking about
whether this environment is
capable or not and 'cause I'm a

41
00:06:53,625 --> 00:06:59,625
hacker and I said yes we can
hack it, but unfortunately
during the engagement we didn't

42
00:07:02,458 --> 00:07:09,667
have enough dedicated time for
that, so you might ask whether I
was pissed off that I couldn't

43
00:07:09,667 --> 00:07:15,667
hack this environment .
(Laughter) >> I went home and
although the project was over I

44
00:07:21,375 --> 00:07:27,375
started to code. Now, this is
how you can image and spy at the
bottom and after infecting the

45
00:07:33,292 --> 00:07:39,292
user's work station I want to
access the desktop server
through the firewall. And one

46
00:07:42,542 --> 00:07:47,833
wise man said in hacking there
is no such thing as impossible,
only things that are more

47
00:07:47,833 --> 00:07:53,833
challenging. Now, if you agree
with this wise man, raise your
hand. All right. So, I don't

48
00:07:59,750 --> 00:08:07,333
want to begin the story from
Adam and Eve, so let's say that
I have already compromised a

49
00:08:07,333 --> 00:08:15,042
user's work station who has
usually access to the second RDP
server. And meanwhile I have

50
00:08:15,042 --> 00:08:21,042
also accessed the test RDP
server which is pretty similar
to the production one I want to

51
00:08:23,292 --> 00:08:29,292
hack. But it doesn't have the
confidential data I'm looking
for. But I know how the server

52
00:08:32,042 --> 00:08:39,000
looks like, the services are, so
forth. Now, as you can clearly
see the talk is about post

53
00:08:39,000 --> 00:08:45,000
exploitation. Now, if you are a
RAP member hands up. All right.
Now, you should listen because

54
00:08:50,625 --> 00:08:57,458
I'm going to show you two new
tools which you can use during
your hacking. Now, if you are a

55
00:08:57,458 --> 00:09:03,458
blue team member, hands up.
Okay. So, now I'm going to show
you some new things you should

56
00:09:05,875 --> 00:09:13,458
look for during log analyzes or
incident response or forensic ‑‑
something like that. Now after I

57
00:09:13,458 --> 00:09:19,458
was facing this big problem I'm
not sure what to do. Now you
have such huge problems, what I

58
00:09:23,708 --> 00:09:31,458
do is that I try to divide the
problem into smaller pieces and
cure them all one by one. Have I

59
00:09:31,458 --> 00:09:37,542
identified four different
problems I have to solve. First
one is how can I drop the

60
00:09:37,542 --> 00:09:45,083
malware into the RDP server.
Second is how can I start it
because the application should

61
00:09:45,083 --> 00:09:51,417
block it. After that I have to
elevate my privileges to
administrative level which was

62
00:09:51,417 --> 00:09:59,250
needed for the fourth step which
is bypassing the hardware
firewall. And the focus of my

63
00:09:59,250 --> 00:10:07,000
presentation is on the first and
the fourth step, because these
are the tools I have developed.

64
00:10:07,000 --> 00:10:13,000
Okay. Now, let's start with a
small demo of the first tool I'm
calling it for the user

65
00:10:18,083 --> 00:10:25,375
simulator. What it means that
this tool can simulate keyboard
events and through the keyboard

66
00:10:25,375 --> 00:10:31,375
events I can do a hell of a lot
of different things. Now, let's
show it. Here ‑‑ oh, that's

67
00:10:47,167 --> 00:10:53,167
going to be fun. Okay, now
that's better. So, this is the
tool I'm going start soon and

68
00:11:03,917 --> 00:11:09,917
this is the concentration file
of the tool. It starts with some
sleep and it presses the Windows

69
00:11:13,333 --> 00:11:18,708
R button which is start. Create
a new document, some sleep
again. Now, please give me a

70
00:11:18,708 --> 00:11:24,708
color you want to use for this
demo. Shout out please. >>
(Inaudible). >> Okay. I heard

71
00:11:33,417 --> 00:11:39,417
purple and give me an animal
name. >> (Inaudible). >> So we
going to use purple zebra for

72
00:12:07,000 --> 00:12:13,000
this demo. Now I'm going to
start this tool and I'm going to
show my hands that I'm not

73
00:12:21,917 --> 00:12:27,917
cheating. What should happen
that it starts, creates a new
document, ties purple together

74
00:12:34,500 --> 00:12:40,500
and I can do a lot of stuff, for
example I can change the font
size, I can change the font

75
00:12:44,625 --> 00:12:50,625
style, comic sans, for example,
I can change the colors. So, you
get an idea of what it does. No,

76
00:13:00,583 --> 00:13:06,583
I don't need that. Okay. Now,
what my tool does in this
hacking scenario that it waits

77
00:13:27,500 --> 00:13:34,875
for the user so that the user
connect to the RDP server with
the application and also the

78
00:13:34,875 --> 00:13:39,917
connection is processed than my
tool creates a screen shot and
it shows to the user in the

79
00:13:39,917 --> 00:13:45,917
foreground and operationally it
can block the user keyboard and
mouse as well for ten seconds.

80
00:13:51,750 --> 00:13:57,750
User experiences, oh, my God, it
froze again. What really happens
in the background that it starts

81
00:14:05,708 --> 00:14:11,708
typing things and we chose the
RDP client connection is the
currently active window

82
00:14:13,958 --> 00:14:21,125
everything which is typed it's
been done on the RDP server. So,
I can start, for example,

83
00:14:21,125 --> 00:14:29,042
Microsoft Word on the RDP
server, drop some ST encoded pay
load into the Word document,

84
00:14:29,042 --> 00:14:35,042
create some macro code, basic
macro code which can write out
the binary code I will need and

85
00:14:37,958 --> 00:14:43,958
it will start the binary. That's
the first step. >> I said that I
want to drop my malware into the

86
00:14:47,583 --> 00:14:53,583
RDP server. I'm going to show
you how this really looks like
in practice. Now, there are

87
00:14:57,167 --> 00:15:03,167
another use cases I can ‑‑ I was
able to test with these user
simulator. For example, I can

88
00:15:06,917 --> 00:15:12,917
instruct the antivirus GUI to
add a directory to exclusion
from the scan and it's very good

89
00:15:16,083 --> 00:15:18,375
because ‑‑ (Laughter). 

90
00:15:18,375 --> 00:15:24,375
>>> Just a second. All right. I
think it's going to work now.
No? >> (Inaudible). (Applause).

91
00:15:31,583 --> 00:15:39,042
>> Other cases that I can
install some retractible table
data with the RDP and there is

92
00:15:39,042 --> 00:15:45,417
going to be a warning dialogue
which the user should accept but
my tool can detect this warning

93
00:15:45,417 --> 00:15:51,417
dialogue and accept the warning.
So, it's the possibilities with
this tool is really endless.

94
00:15:53,708 --> 00:15:59,708
Okay, now, next step I have to
bypass these application which
is Microsoft Applocker. When I

95
00:16:02,208 --> 00:16:08,208
try to research how I can bypass
Applocker I have checked the
official documentation and

96
00:16:12,292 --> 00:16:20,042
Microsoft was kind enough to
give me lot of bypass exploit
code but you can use ‑‑ you can

97
00:16:20,042 --> 00:16:26,042
set some things in your binary.
I should say it should be called
bypass flag or something like

98
00:16:33,708 --> 00:16:41,125
that because that's the only
purpose of this slide: Last but
not least if you have

99
00:16:41,125 --> 00:16:47,583
administrative privileges then
by this you are ‑‑ In my case I
have chosen something different

100
00:16:47,583 --> 00:16:53,583
because it's turned out that I
can load it directly from the
word macro code visual basic

101
00:17:01,458 --> 00:17:07,458
macro code and it's funny
because with the DLR loading
there is no executable running

102
00:17:09,583 --> 00:17:15,583
so there is nothing to execute
so it will bypass the Microsoft
and if you fold that Microsoft

103
00:17:21,542 --> 00:17:27,542
office tools like word or excel
you didn't know that you can
even run shell code directly

104
00:17:30,333 --> 00:17:36,333
from your basic code. You can do
scans. So, if you have a box
where you can't install stuff

105
00:17:38,375 --> 00:17:43,792
but Microsoft office is
installed there, you have
everything you want really. It's

106
00:17:43,792 --> 00:17:49,792
a really powerful tool .
(Laughter). >> All right. Now,
the first step I have to elevate

107
00:17:54,125 --> 00:17:58,667
my privileges to administrator
level because I do need this ‑‑
I will need this for the fourth

108
00:17:58,667 --> 00:18:06,042
step and you will see why. There
are a lot of possibilities how I
can achieve this. For example,

109
00:18:06,042 --> 00:18:12,042
if I have some privilege
exploration exploit then I can
use that or if the server is on.

110
00:18:14,542 --> 00:18:20,542
I can exploit that. Perm
vulnerability, I can search for
vulnerable RP service for

111
00:18:24,708 --> 00:18:31,125
example for privilege
exploration and don't forget
there after I have admin, I'm

112
00:18:31,125 --> 00:18:37,125
not restricted. And in my case I
have chosen the first one by
exploiting the vulnerable

113
00:18:40,667 --> 00:18:46,667
service and as you can clearly
see on this slide the service is
vulnerable to privilege

114
00:18:51,917 --> 00:18:57,917
escalation because I can replace
the service file and, before,
replacing the file I can stop

115
00:19:01,667 --> 00:19:07,667
the service, so my file will be
started with system privileges.
If you were not able to see it

116
00:19:15,292 --> 00:19:21,292
in the previous slide, it might
be a little bit better that
every server user has privileges

117
00:19:25,250 --> 00:19:29,833
to this file and every
indirectly logged upon users are
allowed to stop or start a

118
00:19:29,833 --> 00:19:35,833
service. I am sure that all of
are you bored to death so here's
a little quiz for you. The first

119
00:19:41,333 --> 00:19:47,958
person who can answer this
question will get this Rubik's
cube from me for the

120
00:19:47,958 --> 00:19:53,958
presentation. So, the question
is what's the name of the
company which published the

121
00:20:00,833 --> 00:20:06,833
first paper about fire walls.
Not Microsoft, not Sun. >>
(Inaudible). >> I heard back

122
00:20:17,083 --> 00:20:23,083
there. Yes. All right.
(Applause). 

123
00:20:28,958 --> 00:20:34,958
>>> Okay. Now, the fourth step.
So, as I said there is a really
firewall between the users and

124
00:20:38,792 --> 00:20:44,792
me and now I have dropped my
malware, I will be able to
elevate my privileges to admin

125
00:20:47,083 --> 00:20:53,083
but still how can I get my
shells. I confuse the shell, I
confuse original like Vienna,

126
00:20:58,542 --> 00:21:04,542
QDP, whatever. I don't have any
shells so I have to do something
about this. My very first idea

127
00:21:10,750 --> 00:21:16,750
was that let's say that I
install a kernel driver and the
kernel driver will look for the

128
00:21:20,000 --> 00:21:27,708
incoming traffic and when the
traffic starts with some magic
data I set, then the kernel

129
00:21:27,708 --> 00:21:33,708
driver will know that this has
to be handled differently and
the kernel driver can direct the

130
00:21:39,208 --> 00:21:45,625
traffic to another destination
port. But the problem with this
approach was that we found out

131
00:21:45,625 --> 00:21:51,500
that I have to write, either
rewrite or the hacker ‑‑ all the
hacker applications I want to

132
00:21:51,500 --> 00:21:57,500
use for my shells or I have to
create some proxy application
and use that proxy application

133
00:21:59,917 --> 00:22:07,625
on both the client and proxy
level toward these magic vibe
and remove the magic vibe and I

134
00:22:07,625 --> 00:22:14,875
said no, no, that's not going to
work. That should be something
simpler here. And my idea was

135
00:22:14,875 --> 00:22:20,875
that why don't I use the TCP
source port to indicate kernel
driver that this traffic is

136
00:22:24,500 --> 00:22:32,458
something special and there are
some limitations with this
approach, for example, the ether

137
00:22:32,458 --> 00:22:38,458
server there is firewall but in
my case I said that I don't care
about the scenario. It's pretty

138
00:22:53,083 --> 00:22:59,083
easy it's really one line of ITP
code. Let's say that every
destination port constitutes a

139
00:23:03,208 --> 00:23:09,208
sage which is coming from source
port 1337, should be redirected
to my blind shell on 31337 you

140
00:23:17,958 --> 00:23:23,958
don't have IP tables on Windows.
This is how it should look like
in reality. So, either the ether

141
00:23:28,333 --> 00:23:34,333
or the infected work station I
can set the specific source for
the communication and I will

142
00:23:38,667 --> 00:23:45,792
connect to the RDP port on the
RDP server but kernel driver
will see that this communication

143
00:23:45,792 --> 00:23:53,292
is special so it will redirect
the traffic to another port that
I can start a blind shell, for

144
00:23:53,292 --> 00:23:59,292
example. If you are into Lord of
the rings, this is the guy who
is the very dumb faithful

145
00:24:07,750 --> 00:24:15,625
firewall with all his friends
and they are inspecting the
package and they are really

146
00:24:15,625 --> 00:24:21,625
drunk. They only check the port,
the destination port in my case
so they think this is legit and

147
00:24:26,792 --> 00:24:32,792
they cannot see the back door
traffic inside but after the
traffic arrives, the back door

148
00:24:37,250 --> 00:24:43,250
traffic can be separated from
the port perfect and I can use
this for my blind shell. In

149
00:24:48,167 --> 00:24:54,167
order to install kernel driver
on a Windows 64 environment, you
need a trusted signed kernel

150
00:24:57,583 --> 00:25:03,583
driver and this was a problem
until I found a really great
framework called WinDivert and

151
00:25:08,250 --> 00:25:14,250
the framework is called
(Inaudible) and he has asked the
Nemea Development team to sign

152
00:25:22,000 --> 00:25:28,000
the kernel drivers and they ship
it with the framework which is a
trusted kernel driver and with

153
00:25:31,167 --> 00:25:37,167
the framework you can use your
own executables and this will
interact with the signed kernel

154
00:25:39,500 --> 00:25:45,500
driver. (Applause). 

155
00:25:53,500 --> 00:26:01,333
>>> There are also other ways to
bypass these restrictions. For
example, there is bench guard

156
00:26:01,333 --> 00:26:08,583
bypass code on port project,
there are also some root keys
which use the ‑‑ I think they

157
00:26:08,583 --> 00:26:15,917
have used counter driver and
they exploited something like
that, the kernel driver to

158
00:26:15,917 --> 00:26:21,917
accept code at the kernel level.
Last but not least one can use
my user simulator to install

159
00:26:27,958 --> 00:26:33,958
certificate and after that one
can use the kernel driver with
the (Inaudible) signed by the

160
00:26:37,750 --> 00:26:43,750
hacker. Okay, now the question
was that how can I set the TCP
source port for any application

161
00:26:49,042 --> 00:26:56,917
and it turned out it's pretty
easy because the Netcat tool,
Oracle provides it for use so

162
00:26:56,917 --> 00:27:02,917
using this syntax you can set
the TCP source port for any
application you want. Netcat

163
00:27:05,125 --> 00:27:11,125
will reroute it for you for
free. Okay. Now, let's see this
in action, this hardware

164
00:27:16,750 --> 00:27:22,750
firewall bypass. Is it working
now? Hm? Okay. So, this new one
is the client and that you can

165
00:27:29,083 --> 00:27:35,750
see I just set the source ports
for this and set the destination
to the RD P‑4 89. This is the

166
00:27:35,750 --> 00:27:41,750
server, the green one and I will
start a blind shell on it on a
different port. As you can see

167
00:27:59,375 --> 00:28:05,375
there was no traffic yet. And I
am also going to start my
executable, the kernel driver

168
00:28:11,125 --> 00:28:17,125
and as you can see in the syntax
I set the TCP source port the
original destination port and

169
00:28:19,750 --> 00:28:25,750
the new one where the blind
shell is. Okay, now the client
is going to connect to the RDP

170
00:28:34,583 --> 00:28:40,583
port through Netcat, send some
message and if you look at the
Netcat, the communication has

171
00:28:49,042 --> 00:28:55,042
been established. If you look at
the bio short level you can see
that the communication was

172
00:28:57,417 --> 00:29:03,417
through the RDP port. But if you
look at the user space, you will
see that the communication was

173
00:29:11,083 --> 00:29:17,083
between the special source port
and the special blind shell
port. And you know because it's

174
00:29:35,917 --> 00:29:41,917
a TCP traffic it's two ways, so
from now on I can use anything
because it's simple TCP

175
00:29:46,542 --> 00:29:52,542
connection. So, I cannot just
send it out from the client
server but back and forth. All

176
00:29:54,833 --> 00:30:00,833
right. (Applause). 

177
00:30:07,500 --> 00:30:15,083
>>> There are also some other
use cases for these hardware
firewall bypass kernel driver.

178
00:30:15,083 --> 00:30:21,625
For example, let's say that you
have hacked a server and you
have already admin privileges

179
00:30:21,625 --> 00:30:27,625
but you don't have any shells
because of the firewall then you
can use this tool. And on the

180
00:30:31,083 --> 00:30:37,083
other hand, for example, you can
set up Netcat on the hack server
and you can basically create a

181
00:30:41,375 --> 00:30:47,375
proxy from the hacked server and
use this as a point, for
example, and last but not least,

182
00:30:51,125 --> 00:30:57,125
you can use it to hide your back
door traffic. So, for example,
if there is some log analysis

183
00:30:59,375 --> 00:31:07,208
done at the hack company and
they will see, whoa, this port
is strange, this is something

184
00:31:07,208 --> 00:31:13,208
new, what the heck is going on,
but before that happens, you use
the kernel driver and you put in

185
00:31:18,708 --> 00:31:24,708
it a way that in the firewall
you can stay under the radar.
Okay, let's put the whole hack

186
00:31:31,375 --> 00:31:37,375
together. What happens? The
user's work station has been
already infected. I drop my

187
00:31:40,375 --> 00:31:45,458
malware there and the malware
waits for the user to log into
the RDP server with proper

188
00:31:45,458 --> 00:31:51,458
identification which creates a
screen shot, he's able to get
the mouse, user says oh, shit,

189
00:31:54,250 --> 00:32:00,250
and meanwhile my malware in the
background can drop the malware
on the RDP server using the

190
00:32:04,667 --> 00:32:10,667
keyboard events and Microsoft
office visual basic code and the
clipboard. The visual base code

191
00:32:14,042 --> 00:32:20,042
will load the DLR to bypass the
application why at least I can
escalate my privileges. I can

192
00:32:22,167 --> 00:32:26,625
install with the admin
privileges my kernel driver. I
can also start my favorite blind

193
00:32:26,625 --> 00:32:32,625
shell which was zebra purple in
my case and this is how it looks
like in one picture. And it can

194
00:32:39,042 --> 00:32:45,042
connect to the work station, my
traffic gets rerouted, I set the
TCP source port to the special

195
00:32:54,833 --> 00:33:00,833
port 1337. I connect to the port
3389. This is what the firewall
sees but because of my kernel

196
00:33:04,708 --> 00:33:10,708
driver at the RDP server
disconnection gets redirected to
the blind shell on port 31337.

197
00:33:13,750 --> 00:33:19,750
Now, let's see. Okay, so I
connect to the work station
because I have already

198
00:33:53,583 --> 00:33:59,583
compromised it. I set off the
port in the infected client. And
if I run the calculator which is

199
00:34:08,125 --> 00:34:14,125
here on the work station, this
is where my code gets executed
at the moment and I already

200
00:34:22,167 --> 00:34:28,167
uploaded my malware to the
infected work station and I'm
going to start the user

201
00:34:30,958 --> 00:34:36,958
simulator. Now, the user
connected to the RDP server and
as you can see this directory is

202
00:34:39,333 --> 00:34:45,333
empty at the moment and whatever
happens from now this is done by
the user simulator because RDP

203
00:34:51,250 --> 00:34:57,708
executed on the RDP server so
starts, creates a new document,
some hex encoded pay load into

204
00:34:57,708 --> 00:35:03,708
the work, creates a new visual
basic application through the
clipboard it creates the macro

205
00:35:11,333 --> 00:35:17,333
code, which will basically
decode the hack's pay load, the
folder and as you can see the

206
00:35:27,500 --> 00:35:33,500
directory now has all my files
and it started the Meterpreter
blind shell together with the

207
00:35:39,458 --> 00:35:45,458
kernel driver I have dropped and
both of them are running with
the service privileges which was

208
00:35:48,292 --> 00:35:54,292
system in my case. Okay, now I
start Netcat on the user's work
station to set the TCP source

209
00:35:59,250 --> 00:36:05,250
port. And after everything is
set, from the machine I can
connect through all the port

210
00:36:17,208 --> 00:36:23,208
fire walls and Netcats and
kernel driver stuff to the blind
shell on the RDP server. And as

211
00:36:38,375 --> 00:36:44,375
you can see, this is the command
station which at the firewall
level is through the RDP port

212
00:36:47,958 --> 00:36:53,958
and the Meterpreter space is
downloaded, downloaded and here
we have our shell. We have the

213
00:37:02,500 --> 00:37:08,500
shells on the restricted work
station through all this magic.
(Applause). 

214
00:37:20,417 --> 00:37:28,083
>>> Now, as you can see, it can
be how shall I say, quite
suspicious for the user who sees

215
00:37:28,083 --> 00:37:34,750
these things going on, so let's
see, the user experience what
really happens. This is the user

216
00:37:34,750 --> 00:37:40,750
desktop. And is connecting to
the RDP server. User says, oh,
shit, Microsoft sucks again.

217
00:37:46,917 --> 00:37:48,875
(Laughter). 

218
00:37:48,875 --> 00:37:55,042
>>> I can't use my keyboard, I
can't use my mouse. What
happened? I'm going to call ‑‑

219
00:37:55,042 --> 00:38:01,042
oh, no, it works. Everything is
fine. (Applause). 

220
00:38:15,500 --> 00:38:21,500
>>> Okay. So, lesson learned.
You have two new tools. One, you
can simulate the user and create

221
00:38:26,625 --> 00:38:32,792
some keyboard events and for
example you can drop malware or
configure easy or something like

222
00:38:32,792 --> 00:38:38,792
that and my other tool as you
have seen, you can bypass
hardware fire walls after you

223
00:38:43,667 --> 00:38:49,667
can execute kernel level code at
server level. New team members,
you know, every additional level

224
00:38:55,750 --> 00:39:03,667
of security you add to your
network increases your execute
level but you never can achieve

225
00:39:03,667 --> 00:39:09,667
100 percent protection. Every
layer can be bypassed and I have
heard from a lot of people that

226
00:39:11,667 --> 00:39:17,667
restricting desktop is pretty
secure because this is not an
interface or malware spreading,

227
00:39:23,292 --> 00:39:29,292
it is a really tough studying
malware. This can be stopped by
using some next generation

228
00:39:31,333 --> 00:39:37,333
firewall. I'm sure you have
heard about it on Black Hat but
the thing is that if I write a

229
00:39:40,083 --> 00:39:43,208
proxy and let Meterpreter
through this proxy which
basically wraps my communication

230
00:39:43,208 --> 00:39:49,208
into something which looks like
RDP, then, again, these next
generation fire walls can be

231
00:39:53,792 --> 00:39:59,792
bypassed as well. And last but
not least, you shouldn't trust
your firewall blindly because

232
00:40:02,083 --> 00:40:08,083
they might lie to you. Okay,
guys, these tools have not been
published yet. If you think I

233
00:40:13,500 --> 00:40:19,500
should not publish these because
this is dangerous, shout no.
Okay. (Laughter). 

234
00:40:25,417 --> 00:40:31,417
>>> If you think I should
publish it, shout yes. >> Yes.
>> All right. All right. It's

235
00:40:43,208 --> 00:40:49,208
public and there you go.
(Applause). 

236
00:40:59,917 --> 00:41:05,917
>>> But there's one more thing.
Actually, two things. I have
created both tools with modules,

237
00:41:12,833 --> 00:41:18,833
it's available to you just at
your fingertips. (Applause). 

238
00:41:30,750 --> 00:41:36,750
>>> Now on this final slide, you
can see the links to the
published code and to contact me

239
00:41:39,125 --> 00:41:46,708
and my blog and a lot of things
but the most important thing is
if you happen to be in Europe

240
00:41:46,708 --> 00:41:52,708
especially in Hungary in
October, visit the Hacktivity.
It's the same as DEF CON but the

241
00:41:57,167 --> 00:42:03,083
lines are shorter. (Applause). 

242
00:42:07,792 --> 00:42:13,792
>>> Thank you.

