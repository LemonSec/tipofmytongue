1
00:00:03,042 --> 00:00:09,042
[Applause]. DEFCON 22. So I came
up with some stuff between when
I submitted my slides and the

2
00:00:16,792 --> 00:00:23,417
conference so I did a little bit
of deviation here from what you
guys have but I've got a really

3
00:00:23,417 --> 00:00:29,417
awesome tool and I was like I'm
not going to sit back and not
release it so I'm still going to

4
00:00:29,417 --> 00:00:36,667
share the page table shell code
stuff which isn't new. I did do
that. I held new stuff back just

5
00:00:36,667 --> 00:00:42,667
for you guys, DEFCON 22
exclusive on finding what is
really running on your system.

6
00:00:47,125 --> 00:00:53,125
We will kill the Root- kit. Oh,
any Rootkit I believe we're
going to be able to handle in

7
00:00:59,917 --> 00:01:05,917
the future quite decisively. I
believe that we have a defensive
mode, defensive exploit that you

8
00:01:09,958 --> 00:01:15,958
can now use to actively find any
attacker in your infrastructure
in a very high assurance way.

9
00:01:19,333 --> 00:01:25,333
Specifically the tool that's on
the CD then I've got an updated
version you can download on the

10
00:01:29,333 --> 00:01:34,583
source code as well, whatever.
And I am reimplemented in dot
net so you can run it in Linux,

11
00:01:34,583 --> 00:01:40,583
or mono and all that stuff. It's
designed around solving the
deacon type Rootkit problem,

12
00:01:44,000 --> 00:01:50,000
there was some work earlier on
32 byte similar to this and then
the papers you could read my

13
00:01:57,208 --> 00:02:00,750
slides there's some references.
Just follow the slides, follow
the slides, follow the links.

14
00:02:00,750 --> 00:02:06,750
Those authors left it a little
short mode, you know we're going
long. The thing about the 64 bit

15
00:02:14,125 --> 00:02:20,042
long mode is we have so many
more bits we can check. We've
got so many more places to

16
00:02:20,042 --> 00:02:26,042
identify that if you mess with
the bits that we're checking the
system just won't run. You will

17
00:02:28,250 --> 00:02:35,083
get a blue screen, a reboot,
whatever. So it's based on
properties of the MMU, the

18
00:02:35,083 --> 00:02:41,333
virtual management system and I
wanted to throw that up there so
I can get you engaged. I will

19
00:02:41,333 --> 00:02:47,333
talk about the road to this
discovery. So, Barnaby Jack,
forever in our hearts and mind 

20
00:03:04,417 --> 00:03:07,667
‑ ‑ [Applause]. ‑ ‑ you know he
would talk about or he would
talk about it's about the

21
00:03:07,667 --> 00:03:15,250
journey not the destination. So
you know with that I'll have a
little bit of the journey here.

22
00:03:15,250 --> 00:03:21,250
Thirteen years ago I was here at
DEFCON I guess I invented or
first released a tool kit for

23
00:03:27,833 --> 00:03:33,833
shell code and put it into a
version you probably are
running. So that was 13 years

24
00:03:38,250 --> 00:03:44,458
ago. The more things change of
course the more they stay the
same. You know? And a lot of

25
00:03:44,458 --> 00:03:51,000
these attacks get recycled and
brought back and, you know,
when  ‑ ‑ before I made the

26
00:03:51,000 --> 00:03:56,292
discovery on this Rootkit
detection stuff and you will see
how that links in with the page

27
00:03:56,292 --> 00:04:03,917
table stuff, you know, um, I
thought about even just like
doing a new patch. Hey 14 years

28
00:04:03,917 --> 00:04:09,542
later I still get the same code
I'm talking about. I thought
that would be a little bit

29
00:04:09,542 --> 00:04:15,542
funny. But, you know, I just
wanted something a lot more
practical so...  What you guys

30
00:04:17,750 --> 00:04:23,042
have now on the CD I would love
to get some feedback on what
your experiences are with the

31
00:04:23,042 --> 00:04:28,750
detection technique and it's
definitely a million times more
practical than just another

32
00:04:28,750 --> 00:04:35,667
attack, just another encoder,
just another thingy. You know an
attack  ‑ ‑ attack is hard and

33
00:04:35,667 --> 00:04:38,250
people get a lot of kudos for
their attack. But it all ends
up, it's fun. You know,

34
00:04:38,250 --> 00:04:44,250
exploiting stuff is definitely
fun and getting that shell code
and getting those root shells, I

35
00:04:52,042 --> 00:04:59,208
mean it's fun until it's scary I
guess. Fun scary. And defense is
just a hard stress. That's the

36
00:04:59,208 --> 00:05:05,667
hard part of defense. And I'm
going to try to energize you
guys and try to change some of

37
00:05:05,667 --> 00:05:12,458
the way we're kind of thinking
about defense. You know everyone
is like attacking for fun and

38
00:05:12,458 --> 00:05:18,583
profit. I don't think I've ever
seen a defense for profit or
defense for fun. I've never

39
00:05:18,583 --> 00:05:24,583
thought defending my network for
fun. What? Really? So, you know,
it's obviously the quarter back

40
00:05:30,583 --> 00:05:36,583
usually gets the headline. He's
making the point. The defense
just grinds it out. So I got

41
00:05:38,792 --> 00:05:44,792
this a couple times in here,
let's hear it for the D. DEFCON.
>> Defense. >> I say D. Help her

42
00:05:48,792 --> 00:05:54,792
out. She lost her voice. >> I
lost my voice. >> : The idea
here is that the tool that I've

43
00:05:59,708 --> 00:06:05,708
given you on the CD or if you
want to download the .net
version it has two different

44
00:06:10,167 --> 00:06:17,542
modes, less bit checking and a
little bit of logic. Anyway... 
Sort of a defensive exploit.

45
00:06:17,542 --> 00:06:20,958
Anyone that's going to exploit
it, anyone that's been exploited
or hacked, it sucks. It sucks

46
00:06:20,958 --> 00:06:26,958
getting exploited. And some
things that you can do though on
the defensive side is, you know,

47
00:06:32,042 --> 00:06:37,458
you have this historical
knowledge and you have an
ability to maybe talk post

48
00:06:37,458 --> 00:06:43,458
process some of these events
and, you know, the future.
Storage is cheap. I will keep my

49
00:06:45,500 --> 00:06:52,417
memory from any incident ever
because maybe there's something
I missed. I'm fanatical about

50
00:06:52,417 --> 00:06:58,417
that. Hey, did I miss something?
When I do like a forensic or
look at the memory the physical

51
00:07:00,417 --> 00:07:07,083
memory of the machine, it's like
how do I know I looked at
everything? I'm always checking

52
00:07:07,083 --> 00:07:13,625
myself. Like I'm one of the
worst programmers ever and that
makes me a good code auditor

53
00:07:13,625 --> 00:07:19,625
because I'm like, you know, like
checking man cages like every
line. No problem. So what we've

54
00:07:24,458 --> 00:07:30,458
got today is the def of Dcom,
process hiding is dead. Anyone
doing process hiding Rootkits?

55
00:07:34,750 --> 00:07:42,333
That's like you might as well be
a rapper or something else like
easily detectable. I don't know.

56
00:07:42,333 --> 00:07:47,500
But that technique is
effectively dead now. There's no
hiding from it. I will digress a

57
00:07:47,500 --> 00:07:53,500
little bit. Also 13 years ago
this insane bash assembler thing
kind of blows my mind. Right?

58
00:07:56,708 --> 00:08:02,708
What goes on  ‑ ‑ you know, this
guy wrote an assembler in dash
and so you just think about

59
00:08:06,917 --> 00:08:14,792
things, people have been kind of
doing this stunt tricks for a
while and that was kind of my

60
00:08:14,792 --> 00:08:22,667
talk. It was going to be like
this stunty thing. So anyway... 
That's probably a little bit why

61
00:08:22,667 --> 00:08:27,917
I'm cutting it a little short. I
didn't want to be too happy and
too just like another stunt. I'm

62
00:08:27,917 --> 00:08:33,917
giving you something real. This
is something super real. Okay?
We're going to find out as best

63
00:08:38,833 --> 00:08:45,625
as possible all possible code
running the machine. There would
be no code running that we don't

64
00:08:45,625 --> 00:08:51,625
know about. There's ways to
inject DLLs but that sort of
attack is handled by hash

65
00:08:53,917 --> 00:08:59,083
checking pretty easily so I
don't want to spend a whole lot
of time on hey this is an

66
00:08:59,083 --> 00:09:05,458
integrity check as well, blah
blah blah. Hash checking is kind
of like what everyone is

67
00:09:05,458 --> 00:09:11,708
accustomed to in files so it's
also possible in memory so... 
The other thing I wanted to talk

68
00:09:11,708 --> 00:09:17,708
about is procedurally we can
devise a system that resists
attack, resists back doors. I

69
00:09:21,500 --> 00:09:29,375
noticed  ‑ ‑ I went to the EFI
talks earlier and I know the
Intel and Miter guys are

70
00:09:29,375 --> 00:09:35,375
brilliant, awesome work. But
practically if you're an
administrator on my host, you

71
00:09:38,625 --> 00:09:44,417
know, I mean it's game over. So
I'm not really like at that
point I don't believe an

72
00:09:44,417 --> 00:09:50,417
attacker is typically going to
be escaping the guest on me. You
know? If you're using a VM, a

73
00:09:52,625 --> 00:09:59,750
cloud, some kind of virtual
hyperviser even something maybe
with a more weaker track record

74
00:09:59,750 --> 00:10:06,583
like, you know, I don't want to
call out virtual box but I know
it sometimes crashes more than

75
00:10:06,583 --> 00:10:12,583
other VM's. Even not I'm
probably not even a great enough
target to waste a virtual box

76
00:10:15,000 --> 00:10:22,042
exploit on. Right? So if we use
the hyperviser‑ if we use these
systems we can establish a

77
00:10:22,042 --> 00:10:26,917
number of things and I'll talk
about device verifiability,
verifying devices and that's why

78
00:10:26,917 --> 00:10:32,917
this stuff is really cool. It's
not really applicable in a lot
of real world cases. I don't

79
00:10:41,333 --> 00:10:47,333
know. There's 3 pillars here.
Structural analysis, physical
memory traversal and integrity

80
00:10:49,625 --> 00:10:55,625
checking. We need to analyze
memory from the physical memory
side because I don't want to

81
00:10:58,375 --> 00:11:04,375
deal with IDTLB issues, being
trapped by like another threat
in the kernel, being evaded on,

82
00:11:08,625 --> 00:11:14,625
dumping memory. So dumping
memory analyzing memory from a
VM snap shot is vastly

83
00:11:17,125 --> 00:11:23,125
simplified unless you do a dump
of your ram or something like
that. So here are the practical

84
00:11:25,792 --> 00:11:31,792
concepts, again. The weird
machine attacks are awesome. I
mean finding the hidden machine

85
00:11:37,958 --> 00:11:43,958
in custom application or you
know code data intermixed in a
font and that somehow triggers

86
00:11:48,000 --> 00:11:54,000
the GPU to do some pixel shading
to like anti alianize your
retina display and that somehow

87
00:11:58,208 --> 00:12:04,208
enables that code to like inject
into some other memory and
yad-da, yad-da. Yeah. I mean

88
00:12:06,875 --> 00:12:14,000
like the more esoteric those
attacks, that's awesome. Right?
Let's say it's the cool stuff

89
00:12:14,000 --> 00:12:20,000
but in the real world,
procedurally we want to adapt
the home field advantage to use

90
00:12:24,292 --> 00:12:29,250
defensively  ‑ ‑ I mean I've
been using a hypervisor for 10
years. I don't know. Everyone

91
00:12:29,250 --> 00:12:35,250
else probably the same. So
default handler don't work on
VMs. The snap shot will collect

92
00:12:38,792 --> 00:12:45,500
everything. If it did work the
VM wouldn't function so you know
that you're not going to have

93
00:12:45,500 --> 00:12:51,500
that shuttle walker issue. The
EFI stuff doesn't work. A lot
don't support SMM. People talk

94
00:12:55,458 --> 00:13:01,458
like it still goes on. A lot of
times you can't get in SMM. So
you will need that VM escape.

95
00:13:09,375 --> 00:13:15,542
Well I'm not the DOD and you're
not China probably and you're
not wasting that exploit on me.

96
00:13:15,542 --> 00:13:21,333
Maybe those guys do but...  Um
another couple cool properties
about this thing you will see is

97
00:13:21,333 --> 00:13:28,000
that nested page tables, it's
not really an issue either.
Things like that. So the page

98
00:13:28,000 --> 00:13:34,000
table shell code stuff was, you
know, something devised to work
on just evolving our

99
00:13:40,750 --> 00:13:46,750
understanding of systems and go,
okay, this is cool. I can kind
of implant memory up until

100
00:13:49,708 --> 00:13:55,708
windows 7 by just  ‑ ‑ it's sort
of a complicated thing but I'm
just going to go over it quick

101
00:14:02,833 --> 00:14:08,833
but the motivation was to help
understand physical memory
systems. So until windows 7 or

102
00:14:11,208 --> 00:14:17,208
after windows 7 none of the page
tables shell code stuff worked
anymore and I was kind of like

103
00:14:20,458 --> 00:14:25,875
deincentivized to work on an
information disclosure on how to
make it better, how to make it

104
00:14:25,875 --> 00:14:31,875
like awesomer. If you want to
look at this other reference
here that's a mind melting

105
00:14:36,458 --> 00:14:42,458
paper. They found a way between
the interaction of the page
fault handler and mapping the

106
00:14:44,500 --> 00:14:50,500
TSS and GDT and doing this crazy
faulting so the faulting itself
in the CPU that would normally

107
00:14:54,417 --> 00:14:58,708
be like bringing pages in and
dealing with invalid
instructions and these sorts of

108
00:14:58,708 --> 00:15:05,125
things, that would actually,
that interaction actually read
and wrote memory. So all you

109
00:15:05,125 --> 00:15:12,125
needed to read and write memory
and you can kind of coerce that
into a weird machine. And they

110
00:15:12,125 --> 00:15:18,125
wrote a compiler for it. It's
pretty amazing stuff. Um, here's
an explanation on what the

111
00:15:20,417 --> 00:15:26,833
virtual address base looks like
on X64. I took this off code
machine an interesting site with

112
00:15:26,833 --> 00:15:29,583
other low level stuff. We can
see here that, you know,
obviously Microsoft has done

113
00:15:29,583 --> 00:15:35,583
pretty good. The second row here
you can see that the space
nonexecuteable. They've been

114
00:15:43,083 --> 00:15:49,083
doing a good job of reducing the
surface area of what's kernel
space. Other people talk about

115
00:15:53,500 --> 00:15:59,500
sign drivers and there was an
attack there was code injected
into the hibernation file which

116
00:16:01,667 --> 00:16:07,667
was awesome but they've been
working on reducing this stuff.
So again they did catch this

117
00:16:12,625 --> 00:16:18,000
stuff. One interesting thing I
want you to look at on this
slide is look at the left hand

118
00:16:18,000 --> 00:16:24,000
column. That column there those
addresses aren't just random.
Some of those ranges, what that

119
00:16:29,042 --> 00:16:35,042
correlates to is entries in the
root global table and they can
mark security at that root level

120
00:16:39,000 --> 00:16:44,208
to kind of adjust the
permissions in the entire
address space. And here's the

121
00:16:44,208 --> 00:16:50,208
actual page table shell code
weird machine. We can actually
emit shell code or emit code

122
00:16:57,458 --> 00:17:02,750
into the kernel on Windows 7 and
earlier. So I know  ‑ ‑ I was
not going to upgrade to Windows

123
00:17:02,750 --> 00:17:08,000
8. I don't know if anyone else 
‑ ‑ I was like I'll wait for 9.
But I'm telling you they did a

124
00:17:08,000 --> 00:17:15,583
lot of security. Windows 8 is a
lot better in the kernel and
there's a lot of interesting

125
00:17:15,583 --> 00:17:22,750
things they did. 8.1 they
brought back the start menu.
It's like oh great. By just

126
00:17:22,750 --> 00:17:28,750
doing a virtual owlen user space
not as an administrator, you
know, unprivileged user, remote

127
00:17:33,042 --> 00:17:39,042
user, even a remote user if I'm
interacting with a service like
a web server when I send a

128
00:17:41,750 --> 00:17:47,750
request for that server when it
allocates memory to receive
that, that allocation emits

129
00:17:50,167 --> 00:17:56,167
executable information into the
kernel space. So what that means
is like I can do a ROP right

130
00:17:59,208 --> 00:18:05,208
through that. I can get code
into the kernel by just
reserving memory which is pretty

131
00:18:07,583 --> 00:18:13,583
powerful which is pretty
interesting. Those there means
it's executable. Then, you know,

132
00:18:16,708 --> 00:18:21,500
it wasn't bounded by the amount
of physical memory. Just by
reserving the space you would

133
00:18:21,500 --> 00:18:27,500
have that area as well. This
number here on the left if
anyone knows what that number

134
00:18:31,125 --> 00:18:37,125
is, feel free to yell it out.
You can't see it? Sorry I
assumed people had the slides

135
00:18:40,833 --> 00:18:46,833
and stuff. I'll explain later.
So again it's dead. Frowny face
or indifferent face. If you do

136
00:18:53,500 --> 00:18:59,667
want to kind of look at how the
kernel in windows 8 interprets
exceptions and page fault and

137
00:18:59,667 --> 00:19:05,667
how the page fault handler, you
know, the internals of it work
feel free to step through it. In

138
00:19:08,500 --> 00:19:14,500
this particular stack trace I
was actually pretty perplexed
for a while why if it was

139
00:19:16,542 --> 00:19:23,667
patched I wasn't getting a
straight abort exception. This
is actually I guess a DOS. It

140
00:19:23,667 --> 00:19:29,667
will spin a thread to infinity.
Again I spent time wrestling
with, okay I'm going to do this

141
00:19:35,458 --> 00:19:41,458
as 80 mutate update. They
released this dot net compiler
thing. Maybe I'll do a compiler.

142
00:19:43,542 --> 00:19:49,792
Maybe I'll do it as a bash
script. I was like well it's
really hard to deal with the

143
00:19:49,792 --> 00:19:55,792
nulls and bash and...  So what I
did find along the line was this
upcoming technique and I'll show

144
00:19:59,917 --> 00:20:05,417
you in a second. I will build up
to it. This is going to be the
longest build up to one lined

145
00:20:05,417 --> 00:20:11,417
code than you've ever saw. This
whole technique is one line. Big
one line but...  So...  Instead

146
00:20:16,917 --> 00:20:22,375
of doing another attack, instead
of trying to be like just how
cool my hacking is, this is how

147
00:20:22,375 --> 00:20:28,292
cool my stunts are I will give
you a defensive exploit. I'm
going to obsolete process

148
00:20:28,292 --> 00:20:34,292
hiding. Anyone that does
forensic, anyone that does
incident issue, you know,

149
00:20:34,292 --> 00:20:39,792
dealing with hidden processes,
dealing with APC thread or
whatever you want to call it is

150
00:20:39,792 --> 00:20:45,792
kind of a pain and now like
after this talk you can
qualitatively say absolutely you

151
00:20:48,458 --> 00:20:53,375
fucking found everything. I did
look at everything. There's no
hidden process or maybe there is

152
00:20:53,375 --> 00:20:59,375
something new and no Rootkit is
safe that I know of at this
point. And again in a hypervisor

153
00:21:02,000 --> 00:21:09,833
if you're dealing bare metal,
you know, maybe you're a
masochist. I don't know. Let's

154
00:21:09,833 --> 00:21:15,833
hear from the D. >> Fence. >>
Come on everybody. >> So there's
a sign code example in D64. I

155
00:21:18,875 --> 00:21:22,958
will forward this to other
detectors soon. The other reason
it doesn't work on all

156
00:21:22,958 --> 00:21:28,500
immediately because the
properties I'm detecting is
something to do with the MMU and

157
00:21:28,500 --> 00:21:34,500
on different operator systems
it's on a different offset. If
you are a harsh kernel debugging

158
00:21:36,625 --> 00:21:42,625
with Linux and you want to help
me like that would be great. And
we're definitely closing the

159
00:21:45,958 --> 00:21:51,292
door on the conference today.
We're closing the door on the
Rootkit and, you know, keep your

160
00:21:51,292 --> 00:21:58,792
interesting memory dumps around
so that sometime in the future
you can deal with them. And

161
00:21:58,792 --> 00:22:03,792
these are some issues again, you
know, sometimes I personally
feel like I recap stuff too

162
00:22:03,792 --> 00:22:09,792
much. Maybe it's because I know
this and obviously I wrote these
slides. But, um, dumping memory

163
00:22:13,167 --> 00:22:19,167
is really a pain physically.
Please use a hypervisor. Please.
I'm not really a super fan of

164
00:22:21,292 --> 00:22:27,292
docker unless it's used in a
hypervisor deployment. The zones
or whatever that's not really

165
00:22:30,083 --> 00:22:36,083
the most efficient possible
thing around. Several different
ways to detect hidden processes

166
00:22:38,375 --> 00:22:43,250
have been proposed in the past.
>>: [Off mic] I was told if I
came up here I would get a shot.

167
00:22:45,458 --> 00:22:51,458
>> Wait a minute. Raise your
hand if you're a first time
speaker at DEFCON. >> No you're

168
00:22:54,333 --> 00:23:00,333
not. You spoke 13 years ago. >>
Raise your hand if you were a
first time speaker at DEFCON

169
00:23:05,833 --> 00:23:11,833
like 15 years ago. Oh, wow.
Alison gets a shot too. >> So
dumping memory is a pain. >> Oh,

170
00:23:21,750 --> 00:23:27,750
no. >> Spill in aisle 3. >> (not
audible) >> Hope not. >>
Scanning can be slow and it's a

171
00:23:34,667 --> 00:23:40,500
pain. The technique I have
single pass. A lot of other
techniques along this path are

172
00:23:40,500 --> 00:23:47,125
multi-pass. Multi-pass is like
traversing the memory multiple
times. Link list pointer

173
00:23:47,125 --> 00:23:53,125
traversal is easily confused but
also super fast. I will back up
again and say what is a process.

174
00:23:55,500 --> 00:24:01,500
>> What's a process? Holy shit.
[Laughing]. I guess we're in
DEFCON 101. Anyway... 

175
00:24:13,917 --> 00:24:19,917
[Laughing]. Hey listen it is
really hard to get accepted to
DEFCON. I'm sorry back up.

176
00:24:22,375 --> 00:24:26,792
You're one of the guys that's
been here so long you've gone
back to zero. How about some

177
00:24:26,792 --> 00:24:33,917
love? [Applause]. >> It
definitely is an honor and
privilege and thank you very

178
00:24:33,917 --> 00:24:39,917
much for having me and that's
especially why I wanted to bring
you something fresh and new and

179
00:24:54,625 --> 00:25:00,083
not just another stunt hat. >>
By the way if after 15 years you
still don't know what a process

180
00:25:00,083 --> 00:25:07,667
is...  >> The reason I put this
up will become clear in one
slide. A lot of people talk

181
00:25:07,667 --> 00:25:13,875
about a process as a thread
container. Right? But a process
is also an address space

182
00:25:13,875 --> 00:25:20,333
configuration. It shares common
address space and that's why we
have to lock and do things like

183
00:25:20,333 --> 00:25:26,333
that. So they're a container for
threads. It is difficult to know
if you have all the processes.

184
00:25:30,167 --> 00:25:37,375
Especially if someone is doing
this decom thing and everything
else. Process detection for a

185
00:25:37,375 --> 00:25:40,917
lot of guys kind of boils down
to these techniques here, the
volatility. Great these are

186
00:25:40,917 --> 00:25:46,917
great techniques. People should
be using these tools, especially
in forensic type situations. The

187
00:25:51,292 --> 00:25:57,292
only caveat here is these are
logical identifiers. This is a
link list. These are operating

188
00:26:00,167 --> 00:26:05,708
system constructs. I mean so
we're in a cat and mouse came
we're always in. Attack,

189
00:26:05,708 --> 00:26:11,708
defense, I found this other
table process thing, K thread,
G  ‑ ‑ I don't even know. And

190
00:26:13,792 --> 00:26:19,792
this is what was said when you
analyze memory and try to find
out what's in there there's

191
00:26:36,083 --> 00:26:43,750
these little things like
flipping a bit here, flipping a
bit there in these advanced sort

192
00:26:43,750 --> 00:26:49,750
of low level areas, debug data
header, 64 thing where I think
with just like one bit this guy

193
00:26:52,792 --> 00:26:58,792
like crippled all the software.
But it can be crippled by the
technique which is a little

194
00:27:06,625 --> 00:27:13,250
unfortunate. So again to fully
wrap it up before I go on I
wanted to make sure I did the

195
00:27:13,250 --> 00:27:21,167
appropriate thing and invited as
many people as possible that had
led up to this and prior work

196
00:27:21,167 --> 00:27:29,042
before me the PMO dump that's a
32 bit one is great and
everything but 32 bits we just

197
00:27:29,042 --> 00:27:36,708
don't have the assurance level
that we do on 64. So please go
to 64, use a hypervisor, high

198
00:27:36,708 --> 00:27:42,708
assurance. This technique that
I'm going to be showing in one
more slide the integrity of it,

199
00:27:45,583 --> 00:27:51,583
how easy is it to attack this
thing? Well can I make it
nonabortable? Yes I can. The

200
00:27:54,125 --> 00:27:59,250
current check is really good and
I would appreciate anybody
coming to me with some updates

201
00:27:59,250 --> 00:28:05,250
or everything else. This is a
quickie to just show you what a
PFNs it's a page frame number.

202
00:28:07,375 --> 00:28:14,833
This is a physical address in
the memory dump. Virtual
addresses are the bigger numbers

203
00:28:14,833 --> 00:28:22,208
usually but a PFN is what the
hardware specifically looks like
when it's like number 1 is the

204
00:28:22,208 --> 00:28:28,208
first 4K, number 2 is the next
4K. And then here's a slide from
Microsoft where it almost shows

205
00:28:32,417 --> 00:28:38,417
everything. Essentially what the
detection has is based on self
mapping page tables. This CR3

206
00:28:42,042 --> 00:28:48,042
register is the register in your
computer that when you switch
processes this register changes

207
00:28:50,542 --> 00:28:56,542
and gives you a new address and
this is what actually gives you
the process isolation. So at the

208
00:28:59,042 --> 00:29:05,042
root level CR3 then we got these
other pointers that are like you
see this one kind of pointing

209
00:29:07,208 --> 00:29:13,208
back to itself. So that's really
handy. It's pointing back to
itself in a way that we're going

210
00:29:16,042 --> 00:29:23,042
to be able to leverage that to
identify any point in time where
we can find a page table. And

211
00:29:23,042 --> 00:29:29,417
because each process has a page
table inherently we're going to
find every process by detecting

212
00:29:29,417 --> 00:29:35,000
every page table. It doesn't
matter if it's a kernel process.
There could be two supervisor

213
00:29:35,000 --> 00:29:41,000
processing or something like
that, super weird but definitely
we will find anything. Any of

214
00:29:46,875 --> 00:29:52,875
the Linux guys out here, you
know, if you want to help me
evolve this technique for Linux

215
00:29:56,333 --> 00:30:01,000
or something like that. Here is
a huge paper on Linux and it is
cross platform, cross

216
00:30:01,000 --> 00:30:07,000
architecture process detection.
And this quote here kind of goes
down the line of like the kernel

217
00:30:14,708 --> 00:30:20,292
developers really wanted this
flexibility when they're dealing
with managing memory. Right?

218
00:30:20,292 --> 00:30:26,292
Having this pointer in there
really makes it flexible for
them in leveraging, you know,

219
00:30:29,417 --> 00:30:35,417
memory allocations and dealing
with processes, whatever. So the
great thing about it is it is

220
00:30:37,625 --> 00:30:43,625
for all processes. If you know
when the bug or some other
debugger and during your kernel

221
00:30:47,292 --> 00:30:53,292
debugging you can go exclamation
process 0, 0, this gives us
these registers, the CR3 base

222
00:30:56,583 --> 00:31:02,000
registers, the page table base
pointer, whatever you want to
call it. It's a really long

223
00:31:02,000 --> 00:31:08,000
thing we say all the time. CR3
is a lot shorter. So !DQ is the
physical memory dump. !DQ is

224
00:31:14,500 --> 00:31:20,625
dump physical quad word. What we
will see here is when you do
that at the base register for

225
00:31:20,625 --> 00:31:26,625
CR3 this is going to be the
first quad word. So null is
always happened because null

226
00:31:28,750 --> 00:31:33,208
needs to be mapped in the
virtual memory system because if
it's not you're not going to

227
00:31:33,208 --> 00:31:39,958
appropriately be able to handle
like null, null violations and
things like that. Right? So

228
00:31:39,958 --> 00:31:45,958
that's always going to be there.
This is the magic number here
f68. For windows at least. At

229
00:31:51,500 --> 00:31:57,500
this address which is the base
CR3 page table DQ on that, f68,
the response is here. What we

230
00:32:00,708 --> 00:32:06,708
see. The blue bits here are the
bits that are option bits. You
can see there's quite a number

231
00:32:10,125 --> 00:32:17,125
of them. This middle section of
blue bits this is 32 bits on its
own. So you can see this check

232
00:32:17,125 --> 00:32:23,125
is very high assurance.
Essentially, at least double.
The current was found in

233
00:32:25,833 --> 00:32:31,833
physical memory so just by
looking at each 4K by itself at
this offset checking a very few

234
00:32:38,167 --> 00:32:45,167
amount of bits, in this case it
looks like I'm checking a lot of
bits. If you do the download

235
00:32:45,167 --> 00:32:51,167
this is the mode 2, mode 1 only
checks 1 bit. So, you know, I
would like to see that. So based

236
00:32:59,708 --> 00:33:06,625
on this app I can identify the
current PFN by looking at
current memory I can identify

237
00:33:06,625 --> 00:33:12,625
all page tables for every
process. So PFN for the win,
defensive exploit. D. >> Fence.

238
00:33:15,167 --> 00:33:21,167
Come on guys. >> Dead Rootkits.
Everywhere. Again a more
powerful thing. You will have a

239
00:33:31,167 --> 00:33:37,167
lot of nulls unless you have
tons of memory so those are
additional bits. I know how big

240
00:33:42,542 --> 00:33:48,542
the input is I'm looking at and
it's always going to be
incrementing and things like

241
00:33:52,083 --> 00:33:57,500
that. If you try to attack it,
you know, we could do additional
checking. I would love to see

242
00:33:57,500 --> 00:34:03,625
someone come up with an attack.
I'll do additional checking. If
you want to do attacks you go

243
00:34:03,625 --> 00:34:09,625
banged. There's no eq. You can
dump a quad word. You can't edit
it. If you want to modify the

244
00:34:21,042 --> 00:34:27,042
page table entries on a kernel
debugging you could bang ED that
same offset from F68 then play

245
00:34:32,500 --> 00:34:38,500
with the bits and see if you can
actually run your system. For me
the system bsaud every time.

246
00:34:41,500 --> 00:34:49,167
That's a help to your assurance
level that you're doing good and
everything like that. Here's the

247
00:34:49,167 --> 00:34:56,917
implementation of the code and
it's also, you know, it's on the
CD and everything like that. The

248
00:34:56,917 --> 00:35:02,917
managed version is on‑ line. You
can download it. This is the one
line right here checking in the

249
00:35:05,083 --> 00:35:11,083
middle. Pardon me? >>: [Off mic]
>>: Tennessee. On your phone or
something. I don't know. I'm

250
00:35:15,417 --> 00:35:20,833
running short on time. Here is a
couple other cool properties.
This is me dumping. This is also

251
00:35:20,833 --> 00:35:26,833
format. Unless you've got some
space memory dump like some
virtual memory system might have

252
00:35:30,292 --> 00:35:36,292
which would be an issue here  ‑
‑ so VMware is not an issue,
what we will see here is

253
00:35:41,375 --> 00:35:47,083
detected values and then this
disk thing is also really
important because it allows us

254
00:35:47,083 --> 00:35:53,542
to do something very important.
It allows us to detect memory
runs. A memory run is like a gap

255
00:35:53,542 --> 00:36:00,500
in memory so the hypervisor
establishes these runs so that
physical like PCI cards and

256
00:36:00,500 --> 00:36:06,125
things like this have their
marked areas of memory which
aren't in the physical memory

257
00:36:06,125 --> 00:36:13,375
they're in the card space or
whatever. So we can see here
this jump disk jump and we can

258
00:36:13,375 --> 00:36:20,042
round up and round down these
other values and we can
automatically get the memory

259
00:36:20,042 --> 00:36:27,333
down. So again there's a blog
post on neighbors the butt there
was with finding memory runs.

260
00:36:27,333 --> 00:36:34,375
Well shit now you can use this
and we're all good. Another
interesting property is you can

261
00:36:34,375 --> 00:36:41,417
actually detect processes in
guest memory in a VM guest from
a host dump. If you really

262
00:36:41,417 --> 00:36:48,167
wanted to get really like super
awesome with this you can
actually look at this header

263
00:36:48,167 --> 00:36:55,958
file for virtual box and this MM
page full thing and, you know N
is where you're going to look at

264
00:36:55,958 --> 00:37:01,958
and essentially this is dumping
a memory dump from a cloud
server. The system has 64 giga

265
00:37:04,375 --> 00:37:11,000
and these diff values you can
see are aligned. The first 3 are
aligned. If you can't see them

266
00:37:11,000 --> 00:37:16,792
I'm sorry you will have to pull
up the slides on your phone or
something and then we see the

267
00:37:16,792 --> 00:37:23,875
skew here because the VM doesn't
necessarily, um, you know, it's
allocating memory off the heap

268
00:37:23,875 --> 00:37:28,708
on the host. It's not doing it
physically. Right? So these
discs start to skew and that's

269
00:37:28,708 --> 00:37:34,708
where you will have to use the
MM internal dot h to d muks and
it will have other things that

270
00:37:38,083 --> 00:37:45,042
handle whatever and you can see
this 187 here  ‑ ‑ 187, I don't
know it's like the fucking

271
00:37:45,042 --> 00:37:51,042
physical patriot number for
kernels. For some reason 187 is
always like the PFN for kernel.

272
00:37:57,375 --> 00:38:04,000
Oh, okay. But then you can see
down here this is because they
did a dump and there's a

273
00:38:04,000 --> 00:38:11,500
realignment again. These are
host processes that the disk is
realigned. The underlined ones

274
00:38:11,500 --> 00:38:17,500
are in the guest. Guest memory
doesn't necessarily wipe on the
way out. The future is kind of

275
00:38:25,292 --> 00:38:29,833
like, okay, well these weird
machines are still happening.
You know, this is a tool that

276
00:38:29,833 --> 00:38:34,625
Microsoft research guys have.
They have access to the source,
they have a lot more data than

277
00:38:34,625 --> 00:38:39,500
we do. That means maybe we can
use public symbols to the
rescue. Sort of RTTI, you know,

278
00:38:39,500 --> 00:38:47,125
there's a lot of antiROP attack
that we can then leverage. An
antiROP attack kind of needs to

279
00:38:47,125 --> 00:38:55,042
understand the stack and be able
to analyze return addresses and
make sure they're in the

280
00:38:55,042 --> 00:39:01,833
appropriate place. So someone
doing ROP they're so easily
detected not even funny. In

281
00:39:01,833 --> 00:39:08,292
summary there are issues
possibly with GPU. I'm not so
sure the EFI stuff is going to

282
00:39:08,292 --> 00:39:14,292
work that well from a guest and
again finally, you know, we've
got these defenses kind of

283
00:39:18,333 --> 00:39:25,542
active protection system that
you can also try to use which
combines this process detection

284
00:39:25,542 --> 00:39:31,083
with integrity checking. There's
a link on there. We call it
block watch. Let's hear it for

285
00:39:31,083 --> 00:39:37,083
the D. >> Fence. >> A couple
more slides that I will kind of
blow through. Hypervisor. Self

286
00:39:44,708 --> 00:39:50,708
map detection. There is one
possible thing. If you have a no
paging process that means that

287
00:39:52,875 --> 00:39:57,667
the MMU is not involved in that
process. There could be
something there. So if you are

288
00:39:57,667 --> 00:40:04,958
going to rewrite your Rootkits
to be no paging Rootkit I would
like to see that. Remote DMA.

289
00:40:04,958 --> 00:40:10,958
Please, no. Network cards,
remote and everything, oh man
just don't expose that stuff.

290
00:40:16,583 --> 00:40:22,333
Authors, editors in here?
There's a page and they talk on
doom about how it's difficult

291
00:40:22,333 --> 00:40:28,333
and stuff like this. I would
like to see, you know, preDEFCON
22 hard. Post DEFCON 22 easy.

292
00:40:30,875 --> 00:40:36,875
Very hard and difficult to very
easy to detect in one day. If
anyone has questions or anything

293
00:40:42,500 --> 00:40:48,167
feel free to grab me after. I'm
going to show you something,
just some eye candy maybe. This

294
00:40:48,167 --> 00:40:51,917
is our tool that we have. This
is the TDL Rootkit. This is our
analysis. It's free. You can go

295
00:40:51,917 --> 00:40:57,917
ahead and download it. Whatever.
This is a preWindows 8 so the
kernel executable space, I don't

296
00:41:03,208 --> 00:41:08,667
lie about what is executable in
memory. I will not hide things
from you. Here is the Rootkit

297
00:41:08,667 --> 00:41:15,000
database that's executable. Here
are different processes. This
red bit is modified. Things like

298
00:41:15,000 --> 00:41:20,625
that. But if you want to play
with it, help us evolve our
detection mechanisms, help us

299
00:41:20,625 --> 00:41:28,333
evolve the defensive side of
things, um, I'm very confident
that there's not going to be a

300
00:41:28,333 --> 00:41:34,875
Rootkit problem if you're using
a hypervisor. If you
procedurally developed your

301
00:41:34,875 --> 00:41:42,375
systems you don't let people
execute on your host into your
EFI. I'm pretty confident you're

302
00:41:42,375 --> 00:41:48,375
safe. So...  Anything else it's
pretty much it and thanks for
coming and yeah the death of the

303
00:41:51,250 --> 00:41:57,250
Rootkit. >> : Yeah. >> : We did
it. >> : We finally did it. Yes.
[Applause].

