1
00:00:00,042 --> 00:00:05,417
>>	The talk that you're in right
now is the instrumenting point
of sale malware talk. This talk

2
00:00:05,417 --> 00:00:11,417
has a little bit of a dual
purpose to it. Half of it's
about how we're gunna, how we

3
00:00:13,750 --> 00:00:19,583
intend to propose to communicate
malware analysis more
effectively. So how can we

4
00:00:19,583 --> 00:00:26,292
publish our information that we
found about malware in such a
way that another analyst can

5
00:00:26,292 --> 00:00:34,083
pick it up and run with it and
not waste their time doing the
same old shit that we did. And

6
00:00:34,083 --> 00:00:40,000
so, that's kind of boring and
it's preaching to the choir type
of thing. Well of course I want

7
00:00:40,000 --> 00:00:45,167
malware analysis to have more
detail and things like that. So
to make it a little bit more

8
00:00:45,167 --> 00:00:51,167
fun, we have a case study in
here. And it's the Jack POS,
point of sale malware. And on

9
00:00:53,833 --> 00:00:58,625
your DEF CON DVD, there's a, not
a sample for it because I didn't
want to have something

10
00:00:58,625 --> 00:01:05,333
triggering antivirus on the DVD,
but available on virus share
right now, there is a sample and

11
00:01:05,333 --> 00:01:09,667
the hash is on there and
everything on the white paper
and all. So you'll be able to

12
00:01:09,667 --> 00:01:16,958
get a hold of that. What I do
have on the DVD is a copy of the
actual commanding control server

13
00:01:16,958 --> 00:01:22,167
for that piece of malware. Not a
recreated one like I have my
students do or anything. It's on

14
00:01:22,167 --> 00:01:28,208
that the bad guy actually uses
and sells. So you got a real
value with it. It probably worth

15
00:01:28,208 --> 00:01:35,083
about as much as you paid for
the badge and I'll show you how
to set it up. So I'm Wesley

16
00:01:35,083 --> 00:01:41,042
Mcgrew I'm an assistant research
professor at Mississippi State
University and the newly formed

17
00:01:41,042 --> 00:01:48,583
distributed analytics security
institute. For me, for my
research, I'm sort of the

18
00:01:48,583 --> 00:01:56,333
pragmatic and unapologetic
offensive security guy. People
talk about how you know, you

19
00:01:56,333 --> 00:02:01,208
should be well balanced on
offense and defense. I think
there is enough stuff out there

20
00:02:01,208 --> 00:02:07,458
to break and enough unique ways
to do it and it is hard enough
to do, that you can spend all of

21
00:02:07,458 --> 00:02:12,792
your time breaking things, being
productive of that and hand it
off to whoever likes defense to

22
00:02:12,792 --> 00:02:18,042
actually fix that. So my
research largely centers around
breaking things, reverse

23
00:02:18,042 --> 00:02:22,875
engineering things. I teach at
Mississippi State University, I
teach cyber security class and a

24
00:02:22,875 --> 00:02:29,083
reverse engineering course so
that part of our center of
academic excellence designation

25
00:02:29,083 --> 00:02:33,417
from the NSA in cyber
operations. This is my fourth
year speaking at DEF CON. I

26
00:02:33,417 --> 00:02:38,625
freaking love speaking here. So
I always try to come up with
something special. For my first

27
00:02:38,625 --> 00:02:44,708
year I talked about -- I talk
about a wide variety of things.
I pulled the title slides down

28
00:02:44,708 --> 00:02:50,333
here. I have got
post-exploitation, forensics of
metasploit. I've got SCADA HMI

29
00:02:50,333 --> 00:02:55,417
vulnerabilities compared to the
vulnerabilities of the Microsoft
BOB in the early nineties. And

30
00:02:55,417 --> 00:03:03,333
then last year, I gave a talk on
analyzing and counter-attacking
attacker implanted devices,

31
00:03:03,333 --> 00:03:09,000
essentially attacking
penetration testers, penetrating
testing software and penetrating

32
00:03:09,000 --> 00:03:15,000
testing devices. The case study
at last year was the pwn-plug
from pwnie express. And I

33
00:03:17,042 --> 00:03:23,042
dropped a little zero down at
there and I gave a little bit of
a warning last year, there's

34
00:03:23,042 --> 00:03:28,417
lots of these devices. There's
like these wifi pineapples
around here you might have heard

35
00:03:28,417 --> 00:03:33,833
about getting hacked here at
this conference Having given
that talk last year, I've had

36
00:03:33,833 --> 00:03:41,292
people come up to me and ask are
you in any way involved with
these hacks? These compromises

37
00:03:41,292 --> 00:03:47,292
of these devices? And I find
these accusations to be
outrageous. (Laughing) I find

38
00:03:50,042 --> 00:03:57,125
these accusations to be
fantastic. (Laughing) and to
tell you to truth. (Plays Iron

39
00:03:57,125 --> 00:04:03,125
Man by Black Sabbath.) I hunt
pineapples! (Laughing) So if I
manage to pop yours over the

40
00:04:13,625 --> 00:04:19,625
past day or two, that's the SSH
password. (Laughing) I would
actually just recommend a

41
00:04:24,167 --> 00:04:30,625
refresh. I do some really dirty
things to it. I didn't have one
of them while I was developing

42
00:04:30,625 --> 00:04:34,875
the exploits so the payloads
kind of like YOLO let's just get
rid of this stuff. (Laughing) So

43
00:04:34,875 --> 00:04:40,875
yeah my bad Now back to the
first slide, back to what I'm
really talking about the point

44
00:04:47,250 --> 00:04:52,417
of sale malware. The purpose of
this talk is to promote better
communication in malware

45
00:04:52,417 --> 00:04:58,417
analysis so that we're not
wasting time. So that we're
sharing information, we don't

46
00:05:00,458 --> 00:05:05,458
have analysts reinventing the
wheel every time, the idea is to
adopt better practices in

47
00:05:05,458 --> 00:05:09,333
describing and demonstrating
malware capabilities. We want to
show how these things actually

48
00:05:09,333 --> 00:05:15,333
work. We want to, you know a
list of indicators and
compromises is nice if you're on

49
00:05:18,583 --> 00:05:24,667
the defense side solely and you
just want to see if this on my
system, if so don't let it on my

50
00:05:24,667 --> 00:05:31,250
system, if so get it off. But if
you're investigating, you know,
what's the scheme, what's the

51
00:05:31,250 --> 00:05:34,750
plan for the attacker or what
are they going after or how are
they doing it? What's the

52
00:05:34,750 --> 00:05:41,458
operation like? You need a
little bit more in depth
analysis for this stuff. So the

53
00:05:41,458 --> 00:05:46,208
idea is to supplement written
analysis, like we've seen now
with illustration that uses it

54
00:05:46,208 --> 00:05:52,208
is malware itself. So if we
have, you know, this piece of
code, you know, we can say, oh

55
00:05:56,542 --> 00:06:01,000
well it has this particular name
domain generation algorithm in
right now. It has this

56
00:06:01,000 --> 00:06:05,833
particular memory scraper in it
and everything. But it's nicer
if we can, as the malware

57
00:06:05,833 --> 00:06:10,042
isrunning, show what it's doing.
These things don't have user
interfaces when they are running

58
00:06:10,042 --> 00:06:13,708
they don't wanna pop anything up
on the screen. But what we're
going to show you today is how

59
00:06:13,708 --> 00:06:20,917
you're, as you're developing
your malware analysis, sort of
build a harness to illustrate

60
00:06:20,917 --> 00:06:27,500
what you found so far. And we're
going to show this off. So the
idea here is this is part of the

61
00:06:27,500 --> 00:06:32,125
scientific method. We want to
release the important bits of
it. The most important bit of it

62
00:06:32,125 --> 00:06:37,333
is so people can reproduce your
work and verify your work.
There's a lot of analysis of the

63
00:06:37,333 --> 00:06:45,083
big name, high profile malware
that companies are putting out
there whit papers on it. And for

64
00:06:45,083 --> 00:06:51,833
many different reasons, there's
some of them are hard to
replicate. Sometimes they're

65
00:06:51,833 --> 00:06:56,750
in-information. Sometimes they
neglect to mention important
aspects of it. Like how the hell

66
00:06:56,750 --> 00:07:02,125
did they unpacked it in first
place. Things like that. So the
idea is we want to have a

67
00:07:02,125 --> 00:07:07,292
situation where people can
verify results. Start new
analysis where old analysis left

68
00:07:07,292 --> 00:07:12,917
off. And for me, the big thing
is educating new reversing
engineering specialists. I teach

69
00:07:12,917 --> 00:07:19,792
a course on this. And so, being
able to pick up where somebody
left off on some advanced

70
00:07:19,792 --> 00:07:25,292
persistent threat malware, it's
like -- being able to pick up
where someone left off on that,

71
00:07:25,292 --> 00:07:30,417
it's huge for them. Because it
gets them deep in to the malware
and looking at important stuff

72
00:07:30,417 --> 00:07:36,917
and they're not just starting
from scratch every time. And so,
the issue here though, is most

73
00:07:36,917 --> 00:07:42,333
malware analysis that is
published, its targeting
indicator of compromise

74
00:07:42,333 --> 00:07:48,625
consumers. People who are
building, you know, end point
protection systems, or you know

75
00:07:48,625 --> 00:07:53,042
managing those system,
firewalls, gateways and things
like that that are scanning

76
00:07:53,042 --> 00:07:56,667
things, looking for these
indicators. That's the bad I
thing, don't let it on the

77
00:07:56,667 --> 00:08:02,833
system. But those of us who are
interested in interworkings of
it, this is really important. So

78
00:08:02,833 --> 00:08:07,625
what's missing in a lot of
malware analysis out there? And
I'm not going to start going

79
00:08:07,625 --> 00:08:13,708
down the list of, you know,
Mandi and Norman and all these
folks and everything publishing

80
00:08:13,708 --> 00:08:18,583
white papers on malware. And
pointing out exactly what is
missing in these cases, I'm

81
00:08:18,583 --> 00:08:22,708
going to talk a little bit about
why they don't have some of that
information. But this is what's

82
00:08:22,708 --> 00:08:29,542
often missing, in key aspects of
the analysis that keep us from
being able to use it at a very

83
00:08:29,542 --> 00:08:35,542
deep reverse engineering level.
The biggest one is just
information on the hashes or

84
00:08:35,542 --> 00:08:39,917
information on the sample.
Sometimes you don't even get a
hash of the malware. If you do

85
00:08:39,917 --> 00:08:46,500
then you go off searching for it
in public domain and open source
sources and you can't find it.

86
00:08:46,500 --> 00:08:52,625
It's something they pulled off a
client system and they haven't
submitted the virus total

87
00:08:52,625 --> 00:08:59,292
obviously. They haven't given it
to the virus share folks. And
it's just not out there. And so,

88
00:08:59,292 --> 00:09:03,542
you know, I've run into this
before, a sample I want to take
a look at, you know, that has

89
00:09:03,542 --> 00:09:09,083
published an analysis out there.
Just can't get my hands on it. I
wind up finding some shady back

90
00:09:09,083 --> 00:09:14,833
channel connection to somebody
who is on a mailing list of
somebody else. And don't tell

91
00:09:14,833 --> 00:09:20,667
anybody I gave you this sort of
thing. And that's silly to have
to do that for code that an

92
00:09:20,667 --> 00:09:27,292
attacker wrote. It's not, it's
not like we're protecting
intellectual property here

93
00:09:27,292 --> 00:09:34,375
right? So the availability of
malware is often missing. Again
there's reasons why that

94
00:09:34,375 --> 00:09:40,542
happens. We'll talk about those.
As far as procedure is
concerned, sometimes stats are

95
00:09:40,542 --> 00:09:44,583
skipped. Obviously sometimes
steps are going to get skipped.
Especially considering target

96
00:09:44,583 --> 00:09:51,042
audience for many of these
things. These um, you know
things like how do we unpack it

97
00:09:51,042 --> 00:09:58,000
and how do we find its
functionality? You know, thing
that it might have in common

98
00:09:58,000 --> 00:10:01,875
with other malware that we just
didn't bother looking at because
we weren't interested in that

99
00:10:01,875 --> 00:10:07,792
part of it. So sometimes part of
the process that somebody uses
to do this isn't documented

100
00:10:07,792 --> 00:10:12,625
well, you know as computer geeks
we're not very good about
keeping lab notebook about what

101
00:10:12,625 --> 00:10:16,667
we're doing. So we just kind of
hack at it for a while and
documents it later, it's a

102
00:10:16,667 --> 00:10:24,417
problem. There's often content
missing. You know, especially if
there's no sample available,

103
00:10:24,417 --> 00:10:30,458
there's also the ability to
redact things like what hosts
are being contacted? Where are

104
00:10:30,458 --> 00:10:36,875
command and control host? Even
what industry was this malware
found in? Cuz that's important

105
00:10:36,875 --> 00:10:44,583
and in at the very lowest level,
sort of the internal points of
reference. Things like just

106
00:10:44,583 --> 00:10:50,042
addresses of where, like what
functions or what. If you went
through all the trouble of

107
00:10:50,042 --> 00:10:55,042
reverse engineering, this huge
chunk of functionality and
malware, and what's the harm in

108
00:10:55,042 --> 00:11:02,583
giving me in the function names
at least and arguments you
figured out. The devil's

109
00:11:02,583 --> 00:11:07,458
advocate viewpoint of this is
that it's missing because you
know, number one, it's, you

110
00:11:07,458 --> 00:11:14,333
know, the target audience are
the white paper itself. For
people who are working at a

111
00:11:14,333 --> 00:11:18,958
higher level than we want to.
I'm assuming everybody in here
wants to get down and dirty with

112
00:11:18,958 --> 00:11:25,792
mall ware x86 assembly really
mess it up at that low level and
you know, if you're down there,

113
00:11:25,792 --> 00:11:30,625
you're going to be pretty
disappointed with a lot of this
stuff. So we're kind of left to

114
00:11:30,625 --> 00:11:35,958
pick through technically useful
information. I'm always like,
different algorithms for

115
00:11:35,958 --> 00:11:41,417
unbluring things and unpixlating
things and anything to try to
figure out that IP address

116
00:11:41,417 --> 00:11:47,417
behind the redaction and
anything. That's me. That's what
I'm always trying to do. There's

117
00:11:51,458 --> 00:11:57,250
a lot of added effort in
documenting things. Well, it
takes more time to reverse

118
00:11:57,250 --> 00:12:00,750
engineer something if you're
keeping a lab notebook and
documenting what you are doing,

119
00:12:00,750 --> 00:12:06,375
because usually we're flying
through datapro, naming this,
naming that, and cross

120
00:12:06,375 --> 00:12:11,250
references. Five minutes later,
we're in another part of the
code and we couldn't tell you

121
00:12:11,250 --> 00:12:17,333
how we got there, but if you
take a little bit more
methodical approach, then it's

122
00:12:17,333 --> 00:12:21,750
easier to keep track of all
that. And you end up with a
really good paper at the end,

123
00:12:21,750 --> 00:12:28,708
but it talks a lot more work.
Again with the targeted audience
of these papers, there's a

124
00:12:28,708 --> 00:12:35,167
concern for analysis consumer
safety. The consumers of
analysis, you don't want to get

125
00:12:35,167 --> 00:12:39,500
too much information so that
they grab a sample and start
playing with it and infect

126
00:12:39,500 --> 00:12:44,208
themselves, it's a little bit
silly. If have to put some
boilerplate disclaimer in there,

127
00:12:44,208 --> 00:12:50,208
go for it whatever. The most
compelling argument for this for
me though, the devil's advocate

128
00:12:50,208 --> 00:12:55,375
argument I like the most that I
can get on board with is client
confidentiality. Sometimes you

129
00:12:55,375 --> 00:13:01,375
pull this malware from a system
that a client of yours, you
don't know yet if that malware

130
00:13:03,875 --> 00:13:10,917
is specifically targeted against
your client. Perhaps it's hard
coded with internal information

131
00:13:10,917 --> 00:13:14,833
that they previously found out
about your client. You don't
want to up load that to virus

132
00:13:14,833 --> 00:13:22,500
share. You don't want to up load
it to virus total yet, but a lot
of y'all do. (Laughing) You

133
00:13:22,500 --> 00:13:30,375
know, so I can understand that.
But once you sort of kind of get
into reverse engineering and you

134
00:13:30,375 --> 00:13:35,542
find out hey this really isn't
that hard, it doesn't have
specific information about my

135
00:13:35,542 --> 00:13:39,417
client, then it's start to think
about, let's push this out to
where other people can take a

136
00:13:39,417 --> 00:13:44,750
look at it. The biggest reason,
so all those other reasons is
the reasons that if you had

137
00:13:44,750 --> 00:13:51,500
approached somebody with this
they would try to claim. The
last reason is, the real reason

138
00:13:51,500 --> 00:13:56,542
in many cases, it is competitive
advantage. There's so many
people doing these analyses.

139
00:13:56,542 --> 00:14:04,292
There's so much you know benefit
to them for being the first out
there, To being the best out

140
00:14:04,292 --> 00:14:08,375
there, to being the most
accurate out there, maybe not
most accurate, to have that

141
00:14:08,375 --> 00:14:15,042
public image of being the ones
the reverse engineered the net
Stuxnet or something like that.

142
00:14:15,042 --> 00:14:21,792
The so it's not in their best
interest to share that with
anybody. They don't want to, if

143
00:14:21,792 --> 00:14:26,125
you have all these big companies
splitting up the work, you know,
you'd have the reverse engineer

144
00:14:26,125 --> 00:14:32,917
in a snap. But, umm, that's not
how they work. That's not, and
it's a competitive advantage.

145
00:14:32,917 --> 00:14:38,667
And I get it, you know, I hold
the contents of my talks and
anything, very close to my

146
00:14:38,667 --> 00:14:44,333
chest, and anything that is in
em, that gives me an advantage.
That's the real reason, rather

147
00:14:44,333 --> 00:14:50,333
than any kind of you know,
altruism. So let's what's being
done elsewhere? Elsewhere in

148
00:14:53,333 --> 00:14:59,500
science? So reproducibility and
verifiability are big in
academia, in any scientific

149
00:14:59,500 --> 00:15:05,125
endeavor. Peer review is
supposed to enforce this, if you
get published, you're supposed

150
00:15:05,125 --> 00:15:11,167
to have been peer reviewed and
able for anybody to take that
work and replicate it and verify

151
00:15:11,167 --> 00:15:17,542
those results. That means that,
we may not be as rigorous of
that as you ought to do as we

152
00:15:17,542 --> 00:15:22,333
should be in computer science
and computer engineering, but
it's something we shoot for at

153
00:15:22,333 --> 00:15:27,292
least, something we strive for.
You know, you want to have a
software environment data, all

154
00:15:27,292 --> 00:15:31,167
that documented to the point
where somebody would recreate
the experiment. That's the gold

155
00:15:31,167 --> 00:15:37,083
standard for any kind of
science, computer or not. And
recently there's a push for

156
00:15:37,083 --> 00:15:43,750
having research papers that
embody the algorithms,
especially computer science and

157
00:15:43,750 --> 00:15:51,083
any kind of algorithm type of
numeric computation type
situation. There's a push for

158
00:15:51,083 --> 00:15:57,208
having papers that embody the
algorithms and data in papers so
you can manipulate them

159
00:15:57,208 --> 00:16:01,917
interactively. There's been
challenges out there, to
implemented systems for this. So

160
00:16:01,917 --> 00:16:07,625
you have a paper with embedded
algorithms, for somebody who
attacks things like me, attack

161
00:16:07,625 --> 00:16:13,625
services just went crazy on this
thing. But assuming we can do
this and we run PDF renderers

162
00:16:16,292 --> 00:16:24,292
any way. So they're kind of
nasty any way. So why not do
this? It sounds scary regarding

163
00:16:24,292 --> 00:16:29,750
malware, we're all professionals
and we're all taking on this
challenge of reverse engineering

164
00:16:29,750 --> 00:16:37,500
malware, maybe we, you know, put
on our big boy pants and deal
with it. So the recommendation

165
00:16:37,500 --> 00:16:44,667
here is to go beyond just normal
sand box output for malware
analysis. So that's one way of

166
00:16:44,667 --> 00:16:50,458
sharing malware analysis. But
that's all automated. It's all
one size fits all. It drops it

167
00:16:50,458 --> 00:16:56,167
onto a clean window system. it
runs. It may click a few times
and triggers or whatever. And it

168
00:16:56,167 --> 00:17:02,000
logs all the interaction system.
The problem with that is, that's
very surface level. It may not

169
00:17:02,000 --> 00:17:07,583
be giving the target, the
mallware exactly what it's
looking for in order to do its

170
00:17:07,583 --> 00:17:14,875
thing. For the point-of-sale
malware, it maybe that it's not,
you know, giving it process that

171
00:17:14,875 --> 00:17:21,000
have credit cards in memory, so
it doesn't exercise a large part
of its functionality. We want to

172
00:17:21,000 --> 00:17:25,792
document these host environments
in such a way that people can
reproduce them or host them in a

173
00:17:25,792 --> 00:17:30,917
cloud environment where they can
access the same environment or a
copy of that environment. We

174
00:17:30,917 --> 00:17:35,500
want to give target data,
something to exhilarate. We
start giving this thing what it

175
00:17:35,500 --> 00:17:39,208
wants and that's target data,
network environment, and all
this sort of thing. Give it what

176
00:17:39,208 --> 00:17:45,333
it wantsto talk to. In this case
study, I have the point of sale
malwares command and control

177
00:17:45,333 --> 00:17:49,875
server. But that's not very
common. We don't always get
command and control server for

178
00:17:49,875 --> 00:17:56,083
the malware. You know, why not
write a bare bones one. One of
the exercises in the class I

179
00:17:56,083 --> 00:18:02,583
teach in reverse engineering,
they take some of the MANDI and
APT One malware, they give it to

180
00:18:02,583 --> 00:18:07,500
them as a binary blog they find
out how that thing talks to a
command and control server and

181
00:18:07,500 --> 00:18:12,792
implement a working command and
control server for ti that lets
them control it and so, it's a

182
00:18:12,792 --> 00:18:18,792
very great exercise for them.
And if they can do it, you know,
four, five weeks into reverse

183
00:18:18,792 --> 00:18:23,208
engineering training, and in a
university environment, why
can't anybody else? So give it

184
00:18:23,208 --> 00:18:29,208
that sort of, that other thing
to talk to and the other thing,
besides just a giving it what

185
00:18:35,417 --> 00:18:39,208
the presidents, instrumenting
this thing so we can watch it
run. So it's not just running in

186
00:18:39,208 --> 00:18:45,208
the background unseen. And so,
the big, the coolest tool for
this I know is write your own

187
00:18:47,250 --> 00:18:52,458
debugger for it. It's easier
than you think. Winapi Debug is
a great library for doing this

188
00:18:52,458 --> 00:18:57,208
again I use it in the class for
the main thing. I don't, I think
it's cheating for my students to

189
00:18:57,208 --> 00:19:01,250
use dynamic analysis too much. I
like to affirm that they are
just sitting there staring at

190
00:19:01,250 --> 00:19:05,000
assembly for a good chunk of
their time. But if you're going
to do some debu,ing, I like to

191
00:19:05,000 --> 00:19:10,042
write them to write their own
debugger. That's a great library
for kinda boot strapping

192
00:19:10,042 --> 00:19:15,500
yourself up into it. It allows
you isolate functionality of the
malware, but it lets you run

193
00:19:15,500 --> 00:19:21,667
live. But when it hits something
that's interesting, show us
what's going on and you could

194
00:19:21,667 --> 00:19:27,542
have a good visualization of
this or you could do a crappy
one like I did. (Laughing) So

195
00:19:27,542 --> 00:19:31,417
the case study here, so that's
all preaching to the choir type
stuff. I don't think we'd get

196
00:19:31,417 --> 00:19:36,667
any argument, like we need to
communicate better. Of course,
but the case study, this is the

197
00:19:36,667 --> 00:19:42,708
fun part huh? So before, I'm
having an acknowledgment slides
right here in the middle of my

198
00:19:42,708 --> 00:19:47,458
talk because I want to make sure
we get in before we get out on
the demo. The original malware

199
00:19:47,458 --> 00:19:54,458
samples for this are sourced
from Xylitol, I guess that's how
I'd pronounce that. Great guy,

200
00:19:54,458 --> 00:20:01,667
runs cybercrimetracker.net and
basically it's a live feed of
kind of shady-ass sites that

201
00:20:01,667 --> 00:20:07,375
have things like this. So you
can grab some fun things off of
there and play around with them.

202
00:20:07,375 --> 00:20:15,333
Umm, I actually, he got turned
onto this particular sample
through a tweet that I've long

203
00:20:15,333 --> 00:20:20,000
since forgot he tweeted it. He
has a screen shot of the
commanding controller server's

204
00:20:20,000 --> 00:20:26,625
web interface up and had
redacted out the IP address
poorly. They left the top couple

205
00:20:26,625 --> 00:20:34,042
rows of pixels on there and well
here we go, about five or six
possibilities. Let's do this.

206
00:20:34,042 --> 00:20:39,833
(Laughing) So that's how, that's
kind of how I got turned on, but
an official source

207
00:20:39,833 --> 00:20:47,792
cybercrimetracker.net There has
been a couple other analyses of
this same malware that I want to

208
00:20:47,792 --> 00:20:51,708
acknowledge. These were
published of after I published I
had done analysis, but I didn't

209
00:20:51,708 --> 00:20:56,500
want to publish my analysis
until I got here so I could drop
some cool stuff on ya'll. Of

210
00:20:56,500 --> 00:21:02,500
course the Spider Labs guys had
a great analysis, Jack POS the
House Always Wins. A couple

211
00:21:05,458 --> 00:21:10,708
things different from mine, I'm
not sure if it's a different
sample or they didn't look at it

212
00:21:10,708 --> 00:21:16,917
the same way I did. And the
Maleware Must Die folks had a
look at it from the viewpoint of

213
00:21:16,917 --> 00:21:21,208
tracking down the author and it
that had a foreign post they
found where the guy was selling

214
00:21:21,208 --> 00:21:27,917
this thing. Now it's free on the
DEF CON DVD, cool. (Laughing) So
I've got more citations in the

215
00:21:27,917 --> 00:21:33,833
white paper for tools,
executable paper prior work, I
believe in giving a white paper

216
00:21:33,833 --> 00:21:39,542
out with these talks and highly
encourage everybody to do the
same. Nothing angers me more

217
00:21:39,542 --> 00:21:46,125
than knowing there's one good
source or one good talk for a
particular subject and go there,

218
00:21:46,125 --> 00:21:52,083
and you're downloading slides
and no white paper. So I'm left
at what to kind of guess what

219
00:21:52,083 --> 00:21:59,625
they're talking about in there
and kind of fill in the details.
So why Jack POS? It's the one

220
00:21:59,625 --> 00:22:06,125
that fell into my lap whenever
it was time for DEF CON CSP to
roll around to a certain extent.

221
00:22:06,125 --> 00:22:13,583
It also fell into my lap around
the time, I got a five month old
twins right now. So I was

222
00:22:13,583 --> 00:22:18,417
analyzing this just around the
time they were born and
everything. So when I was unable

223
00:22:18,417 --> 00:22:23,250
to sleep and wasn't holding one
of them, or if I was just
holding one and I could work

224
00:22:23,250 --> 00:22:28,750
with the other arm, this is what
I was tinkering with. But it's
kind of cool one to look at for

225
00:22:28,750 --> 00:22:33,417
this, because there's a lot of
-- POS malware huge topic.
Probably what ya'll lined up out

226
00:22:33,417 --> 00:22:39,958
there for, you didn't know what
you were going to come to the I
hunt pineapples talk. It's a big

227
00:22:39,958 --> 00:22:45,958
thing this year. So yeah chase
that buzz. The C2, the command
and control server was

228
00:22:50,167 --> 00:22:58,083
available. I've had the ability
here to demonstrate the complete
environment for you. I managed

229
00:22:58,083 --> 00:23:05,458
to take that from the server
that was listed. So I can show
it to you from card swipe to

230
00:23:05,458 --> 00:23:11,083
command and control. It's weird
at a low level because it looks
like it is using C++ strings and

231
00:23:11,083 --> 00:23:14,875
everthing. It basically dynamic
allocates all of the memory for
strings at the beginning of the

232
00:23:14,875 --> 00:23:20,875
program and only uses those
offsets, those memory locations
for the strings later on. It's

233
00:23:25,708 --> 00:23:31,208
like a cross reference datapro
are all broken, but at run time,
doing it dynamic, it works out

234
00:23:31,208 --> 00:23:34,875
pretty good with these
harnesses. And the harnesses
that I have, I have a separate

235
00:23:34,875 --> 00:23:41,542
harness for the memory search
functionality. It actually hooks
into the functions that ,does

236
00:23:41,542 --> 00:23:45,667
the sort of regular expression
search for the credit card
number. It sets up the stack

237
00:23:45,667 --> 00:23:50,917
call and just call that is
function. So there's a harness
that just run that is part of

238
00:23:50,917 --> 00:23:56,125
the malware. That's a cool way
of, a cool use for this is I
just want to look at the domain

239
00:23:56,125 --> 00:24:00,375
name generation algorithm. I
just want to look at scraper. I
just want to look at this part

240
00:24:00,375 --> 00:24:04,792
of it and anything. Let's rig up
an environment where we could
continuously run it and reset

241
00:24:04,792 --> 00:24:12,750
the stack back around and call
it again. So the harnesses,
Winapi debug, Python script

242
00:24:12,750 --> 00:24:16,708
debugging. It's a really fun
library and it's very well
documented there are lots of

243
00:24:16,708 --> 00:24:22,708
examples. If my students can do
it, anybody can do it right?
Just set a bunch of break

244
00:24:32,000 --> 00:24:36,375
points, I set them all in a
dictionary and I have a loop
that just goes through and sets

245
00:24:36,375 --> 00:24:40,542
them all up. You get call backs
for your Python code whenever
they trigger and then it's just

246
00:24:40,542 --> 00:24:44,458
like the old school Commodore 64
program, Just peek and poke in
memory. It's great, you know,

247
00:24:44,458 --> 00:24:48,875
you can get the current state of
the thread, current state of the
process. You can read and write

248
00:24:48,875 --> 00:24:53,042
memory, mess around with the
stack and then keep going. So
it's pretty cool like that. So I

249
00:24:53,042 --> 00:24:56,958
can, I can do some pretty
interesting stuff that I'll show
you on that. That's the trial

250
00:24:56,958 --> 00:25:01,125
run for the sample I looked at,
there were several on that same
server. It was apparently the

251
00:25:01,125 --> 00:25:05,292
server for the person who
actually wrote the malware, not
a customer of it because some of

252
00:25:05,292 --> 00:25:13,125
the samples were hard coded to
192.168 IP addresses for command
and control. It's basically the

253
00:25:13,125 --> 00:25:19,125
samples he was using to test it
locally. And so, I think I've
going to a list of the other

254
00:25:25,208 --> 00:25:28,750
shot ones for like the internal
testing samples and things like
that in the white paper, if you

255
00:25:28,750 --> 00:25:32,292
need that contact me.
Virusshare.com. If you're not
familiar with it, go on there or

256
00:25:32,292 --> 00:25:38,667
either get an invite from me or
just request access to it. If
you're an anti-virus researcher,

257
00:25:38,667 --> 00:25:44,667
any sort, even amateur, they're
pretty cool. You know, you can
get on there and download, lots

258
00:25:47,250 --> 00:25:51,542
of samples. Everybody's
uploading that now and I'll also
put this sample up on the

259
00:25:51,542 --> 00:25:56,375
mcgrewsecurity.com. If it
becomes a problem to get a hold
of it, that's the only part

260
00:25:56,375 --> 00:26:02,583
that's not on the DVD of course.
The commanding control server is
on the DVD. It's as PHP web

261
00:26:02,583 --> 00:26:08,667
application. It's using this
weird model viewing controller
framework called Yii. I'm a

262
00:26:08,667 --> 00:26:13,833
Django person Python anything so
this was a very big change for
me. I was trying to understand

263
00:26:13,833 --> 00:26:19,625
what this guy was doing. It's
tricky to set up. I'm not going
to go through the steps of

264
00:26:19,625 --> 00:26:26,333
setting up a Ubunto server to
get it up and running. But all
those steps are in the white

265
00:26:26,333 --> 00:26:30,042
paper. This is a view of the
panel. We're going to go through
this interactively. But there is

266
00:26:30,042 --> 00:26:36,042
a data module, a model view
controller type interface for
this thing. And so, you have

267
00:26:38,333 --> 00:26:46,292
objects in there. Tables of
them., So bot, cards, commands,
track dumps, there's ranges of

268
00:26:46,292 --> 00:26:51,000
IP addresses for the
geo-location. that I didn't
manage to get because I didn't

269
00:26:51,000 --> 00:26:58,625
grab the SQL tables at that
time. Track data, users for the
system. It's actually in a state

270
00:26:58,625 --> 00:27:04,375
of development it looks like. If
you start digging in the source
of this thing, the way it stands

271
00:27:04,375 --> 00:27:09,333
right now, you log in to it and
you're basically the only user.
There's not any kind of

272
00:27:09,333 --> 00:27:14,625
speeration for different users.
You might as well have only one
user on the system. But it

273
00:27:14,625 --> 00:27:19,958
looked like there's a lot of
underlying code there that
indicates instead of selling,

274
00:27:19,958 --> 00:27:25,958
you know, selling generated
samples and the code for command
and control server, he would

275
00:27:28,500 --> 00:27:34,500
migrate to having this as a
service. Where he would set it
up and have client logins for

276
00:27:34,500 --> 00:27:41,000
people who want dumps of credit
cards and things like that and
allow them to get small subsets

277
00:27:41,000 --> 00:27:45,917
of the data set. And it looks
like that's what he's working
towards. But it', there's

278
00:27:45,917 --> 00:27:52,417
indications of it that's not
completely implemented. It's all
pretty much, you know, one user

279
00:27:52,417 --> 00:27:58,417
gets everything type of thing.
Back to the sample itself. The
UPX packed sample, so thank god

280
00:28:01,250 --> 00:28:07,250
I'm not going to go into a weird
unpacking talk or tutorial here.
I'm just happy when it's done

281
00:28:07,250 --> 00:28:14,708
with. So the nice thing is you
could UPX extract the thing and
you're good to go. But, the

282
00:28:14,708 --> 00:28:18,583
unpacked version for whatever
reason, maybe I'm using the
wrong version of UPX or

283
00:28:18,583 --> 00:28:25,417
something, it crashes at check
for stack cookie in one of the
earliest functions and I think,-

284
00:28:25,417 --> 00:28:31,250
I know that it's just not
rebuilding the relocation tables
correctly. The fix for this

285
00:28:31,250 --> 00:28:37,250
would be to figure out exactly
what UPX to extract it back out
with or what alternate packer

286
00:28:39,750 --> 00:28:45,667
the implementing UPX was. But
the easiest way to do this is to
disable ASLR for that particular

287
00:28:45,667 --> 00:28:52,167
binary in your your PE headers,
you can do with to Image NT
headers, optional header

288
00:28:52,167 --> 00:28:56,958
characteristics, DLL
characteristics, dynamic base,
unset that bit and now all of a

289
00:28:56,958 --> 00:29:03,292
sudden, your malware doesn't hop
addresses every time you run it.
And I like doing this, if I know

290
00:29:03,292 --> 00:29:07,333
that a samples not going to
freak out if I do this. I like
doing this anyways, because that

291
00:29:07,333 --> 00:29:12,583
means I don't have to keep
rebasing in my static analysts
in datapro. To keep all my

292
00:29:12,583 --> 00:29:19,792
addresses consistent, it also
makes the harnesses on a little
bit easier. This is the nasty

293
00:29:19,792 --> 00:29:24,750
main loop of the program. Up
towards the top it calls a
function that sets up all the

294
00:29:24,750 --> 00:29:29,875
strings that are going to be
used in the program for the rest
of its execution and that's the

295
00:29:29,875 --> 00:29:37,167
command and control server. The
file names of the executables
that it tries to install itself

296
00:29:37,167 --> 00:29:43,958
to. And also, process names that
the it wants to avoid whenever
it's doing its graphing through

297
00:29:43,958 --> 00:29:49,958
memory for credit cards. Towards
the bottom down that red channel
there, in datapro you got the,

298
00:29:53,125 --> 00:29:57,500
when you have a jump, if it's
true, you get take the green if
it's false you take the red

299
00:29:57,500 --> 00:30:02,917
path. The red path is after a
check for am I installed or not.
Then it dumps down to some code

300
00:30:02,917 --> 00:30:09,667
down there at the bottom. That
installs itself. It copies
itself and does some very

301
00:30:09,667 --> 00:30:14,458
standard registry persistence
and sets itself up with runkeys
and things like that. The

302
00:30:14,458 --> 00:30:21,417
harness that I designed, it
patches the command and control
string as it is sets up so it

303
00:30:21,417 --> 00:30:28,000
points to one of my VMs. That's
something you want to change for
your environment. It patches the

304
00:30:28,000 --> 00:30:32,500
installation check so you can
just run it from a directory and
you don't have to dig it back

305
00:30:32,500 --> 00:30:38,958
out of the one of the app data
folders in the middle of it, and
also it prevents this watchdog

306
00:30:38,958 --> 00:30:43,875
process from executing. It
spawns off another process that
watches this process. And if it

307
00:30:43,875 --> 00:30:49,708
dies, it starts up another one
and that is really obnoxious
when you are trying to keep this

308
00:30:49,708 --> 00:30:55,667
thing under control, you want it
to stop when you tell it to
stop. The other stuff that it

309
00:30:55,667 --> 00:31:01,333
does is it prevents anything
from shell executing there's
some functionality to install

310
00:31:01,333 --> 00:31:09,167
other malware through this
malware. And I just, let me know
what you were going to run, but

311
00:31:09,167 --> 00:31:15,833
don't quite do it yet.
Communication wise, there's a
loop up there where it looks for

312
00:31:15,833 --> 00:31:23,250
the command and control server.
It hits a post-echo address on
the command and control server.

313
00:31:23,250 --> 00:31:29,250
If that server responds with
simply no HDP, no HTML tags or
anything, if you just says, it's

314
00:31:33,500 --> 00:31:37,333
like okay I'm talking to the
right command and control, I'm
going to keep going on, this is

315
00:31:37,333 --> 00:31:43,792
where your sand box would be
like I don't know. So that keeps
it normal, simple sand boxes

316
00:31:43,792 --> 00:31:47,750
from really getting much from
this. Once it figures out
there's an actual command and

317
00:31:47,750 --> 00:31:53,750
control server, it checks its
own state to see if it's has
already snagged any track data

318
00:31:53,750 --> 00:32:00,833
from memory. It does it later in
the loop but it does come back
to here. If it got earlier track

319
00:32:00,833 --> 00:32:06,583
data it's going to base 64
encode that out and send it out.
So we can set up a harness to

320
00:32:06,583 --> 00:32:12,333
play that and not basic 64 so we
could actually read it. It
checks a queue. Actually clever,

321
00:32:12,333 --> 00:32:17,167
they have a queue on the command
and control server with commands
execute on the target system

322
00:32:17,167 --> 00:32:21,875
that are being distributed out
to the different bots. The hosts
uniquely identify themselves via

323
00:32:21,875 --> 00:32:27,875
MAC address and there's probably
some weird cross-site scripting
cross-site request forgery sruff

324
00:32:30,083 --> 00:32:36,083
you can do with that. Commands
wise, you've got, so there's
very limited set of commands in

325
00:32:38,250 --> 00:32:43,292
this malware. Some of them back
doors and general purpose lets
mess around on the system and

326
00:32:43,292 --> 00:32:48,833
set up things and look for files
and stuff like that. There's not
much of that on here because

327
00:32:48,833 --> 00:32:54,042
it's scrapping track data and
just that. You don't have to
tell it to do that it's always

328
00:32:54,042 --> 00:32:59,958
doing that. So the remainder of
the command data is very simple.
Kill just knocks the bot out. I

329
00:32:59,958 --> 00:33:06,417
think it even uninstalls it.
There's an update that replaces
the current malware with the

330
00:33:06,417 --> 00:33:11,542
latest version of it that's in a
directory on the command and
control server by hitting the

331
00:33:11,542 --> 00:33:17,542
post download function on the
server. And then, aside from
that, there's an exec that's

332
00:33:19,708 --> 00:33:25,417
basically, it looks like on the
server that I pulled it from,
was being used to install other

333
00:33:25,417 --> 00:33:32,250
malware. When you got a Botnet,
if got a bot net, you could make
some good money installing other

334
00:33:32,250 --> 00:33:38,500
pieces of malware for other
folks. So that's a way of doing
that. There's a memory scraper

335
00:33:38,500 --> 00:33:44,583
in here. This is the memory
scraper function that you're
seeing here. In the

336
00:33:44,583 --> 00:33:48,458
advertisements for this
particular piece of malware,
he's like, does not use regular

337
00:33:48,458 --> 00:33:53,250
expressions. Well this code
essentially does the same thing
as the regular expression, it's

338
00:33:53,250 --> 00:33:59,708
embodiment and code of a regular
expression search for valid
credit card numbers. The reason

339
00:33:59,708 --> 00:34:05,333
why he's bragging about not
using regular expressions is,
otherwise, some, any idiot can

340
00:34:05,333 --> 00:34:09,750
just run strings on a binary
that is using a regular
expression library and see, hey

341
00:34:09,750 --> 00:34:15,375
this thing is including some GNU
regular expression library and
here's the regular expression

342
00:34:15,375 --> 00:34:21,542
string it's compiling down to
use for it. So it's a little
less subtle. They're having fun

343
00:34:21,542 --> 00:34:27,542
over there what's going on. And
so it does some interesting
things. It gets a list of

344
00:34:31,292 --> 00:34:37,292
processes, I say functions there
but processes. It avoids 64 bit
processes because for whatever

345
00:34:39,917 --> 00:34:43,333
reason. I guess it just doesn't
figure there is going to be
anything there. And then it has

346
00:34:43,333 --> 00:34:51,292
an internal table of processes
that it knows is not going to
have track data. Windows system

347
00:34:51,292 --> 00:34:55,042
process, basically if you did a
PS list on a stock window system
not running anything, it's

348
00:34:55,042 --> 00:35:01,042
avoiding all those because
that's not point-of-sale
software. It iterates and

349
00:35:04,125 --> 00:35:11,583
searches through two regular
expression- esque functions that
implement the ISOIAC standard

350
00:35:11,583 --> 00:35:18,250
for card data. It's more or less
adhering to the standard, sort
of evolved to the little quirks

351
00:35:18,250 --> 00:35:23,625
for getting Visas and
Mastercards and things like
that. And so, it was an

352
00:35:23,625 --> 00:35:28,875
iterative process harnessing
this particular function and
just throwing what I thought

353
00:35:28,875 --> 00:35:36,333
were valid cards at it. So I was
getting traction and getting
through and getting more code

354
00:35:36,333 --> 00:35:40,792
coverage through this. The
harness basically identifies
this search process in both

355
00:35:40,792 --> 00:35:47,125
harnesses that I demonstrate.
And then one of the harnesses
will, basically let point this

356
00:35:47,125 --> 00:35:52,208
function at an arbitrary process
ID to the system for testing. So
I don't have to is it there

357
00:35:52,208 --> 00:35:59,667
scanning the entirety of memory
everytime All right so the demo
we're going to show here, again,

358
00:35:59,667 --> 00:36:06,042
this again, the samples of Indy
five of it. The other ones, that
doesn't look familiar. I'm

359
00:36:06,042 --> 00:36:10,958
looking at two different
samples. No it's the same
samples. The two harnesses one

360
00:36:10,958 --> 00:36:18,250
instrument all operation of the
thing. The other one, I will
just show the code for, just

361
00:36:18,250 --> 00:36:22,833
skips to the proc harness. I can
demonstrate that. We got a lot
of time. I've got a track

362
00:36:22,833 --> 00:36:28,417
generator, basically It's just a
python script. It generates a
bunch of valid looking tracks

363
00:36:28,417 --> 00:36:34,958
and just sits there on them in
variables and memory. This thing
will come around and find them.

364
00:36:34,958 --> 00:36:42,125
And then the PHP source for the
actual command and control
server. Again, due to the issues

365
00:36:42,125 --> 00:36:48,000
of getting this command and
control server, I did not get
the database schema, and unlike

366
00:36:48,000 --> 00:36:54,667
Django, in Yii you can't just
generate a schema from the
model. I don't know and so I

367
00:36:54,667 --> 00:37:02,042
recreated it and it works.
There's some stuff that is
probably not right. But it works

368
00:37:02,042 --> 00:37:09,833
well enough for us. It'll bump
out and go intoVM land here. So
we've got, Ubunto server here

369
00:37:09,833 --> 00:37:17,833
configured up with this
particular point of sale
malware. I have forgotten the

370
00:37:17,833 --> 00:37:24,958
log in password for this thing
twice already, once a week when
I went to look at this and once

371
00:37:24,958 --> 00:37:29,625
again earlier today like around
lunch when I was testing these
out. I can't remember the

372
00:37:29,625 --> 00:37:34,792
password for this thing. So I
wound up resetting the password
for the Ubonto there and for the

373
00:37:34,792 --> 00:37:40,792
actual web interface, I just
went in and knocked out the
hashing algorithm. So basically,

374
00:37:40,792 --> 00:37:46,792
to log into this thing you know
badguy@localhost then password
do do da du du who knows! And

375
00:37:49,750 --> 00:37:55,750
then my own dang system has a
captcha. It's the worse captcha
ever. It's the same font every

376
00:37:58,000 --> 00:38:04,000
time. What? (Laughing) What? Is
that an I? All right. Cool. Oh
yeah. that was a successful

377
00:38:14,750 --> 00:38:20,792
demo. (Laughing) So we've got,
and you know, in the low
revolution, we're kind of

378
00:38:20,792 --> 00:38:26,542
looking at this kind of nasty.
Zoom out a little bit. That's
way you normally see it. You get

379
00:38:26,542 --> 00:38:31,125
some statistics for things that
you've seen. This is reverted VM
so we're not seeing anything

380
00:38:31,125 --> 00:38:37,917
yet. A list where the dumps will
go and where the bots will check
into and the only settings right

381
00:38:37,917 --> 00:38:43,000
now are account and passwords.
This is where you have a user
with admin rights and he'd be

382
00:38:43,000 --> 00:38:47,542
able to add users and stuff but
that is not implemented in this
one. Maybe I need to steal

383
00:38:47,542 --> 00:38:53,542
another C2 from them. On the
other side of this coin, we've
got the client for it over here.

384
00:39:00,500 --> 00:39:06,500
Let's pull up, we have in here.
So we've got three pythons. We
have the malware itself

385
00:39:08,917 --> 00:39:14,750
currently named something such
that it's happy with. It tries
to pretend it's a java update

386
00:39:14,750 --> 00:39:20,750
scheduler. That's its default.
It has a whole list of them, if
it can't pull one, it does

387
00:39:23,875 --> 00:39:27,333
another one. We've got the main
harness, the search process
harness. What I am going to do

388
00:39:27,333 --> 00:39:32,208
first is I'm going to show you
the code to generate the track
data and just kind of

389
00:39:32,208 --> 00:39:38,125
implementing the basic algorithm
for it. Just John Doe and the
various elements of that

390
00:39:38,125 --> 00:39:44,458
particular ISS standard and some
probably pretty terrible things,
I never did ACM program contests

391
00:39:44,458 --> 00:39:51,917
or anything like that, So we're
going to run that and one window
here. That is going to generate

392
00:39:51,917 --> 00:39:58,333
-- oop. I can mute that now that
Iron Man's over. Alright gen
track data, so that generates a

393
00:39:58,333 --> 00:40:04,333
bunch of track data. It's in the
python dictionary, or python
list and just sitting there in

394
00:40:07,708 --> 00:40:13,708
memory. So we can just leave
that there. We can run,
hopefully process mods on here,

395
00:40:15,750 --> 00:40:23,167
process explorer rather. Do I
not have process explorer on
here? Cuz then we can actually

396
00:40:23,167 --> 00:40:29,792
watch this a little bit nicer.
There we are. You're hiding over
here. So right now, this is PID

397
00:40:29,792 --> 00:40:35,792
1480 is the one for the, for
that particular track data.
We'll show off the search

398
00:40:39,500 --> 00:40:44,250
process harness first since
we've going to that PID fresh in
our memory. So our search

399
00:40:44,250 --> 00:40:50,500
process harness, it's actually
our simplest one. Basically I've
got some neat stuff up here for

400
00:40:50,500 --> 00:40:56,833
polarizing my log output and
everything. But the gist of it
here is I setup a list of break

401
00:40:56,833 --> 00:41:01,875
points here and call backs for
them. I have some stuff that
actually goes and sets those.

402
00:41:01,875 --> 00:41:07,042
And basically anytime one of
these hits one of these
functions up here gets called,

403
00:41:07,042 --> 00:41:13,042
and so it's reading memory from
that. We'll watch it run. It's a
little bit nicer like that. You

404
00:41:16,625 --> 00:41:24,292
can read the code later if you
really like. But you will.
You'll like. Search process

405
00:41:24,292 --> 00:41:30,292
harness. And I think I need to
provide the PID 1480. Wasn't?
It? 1480. So there goes

406
00:41:33,250 --> 00:41:38,500
searching through that. And the
fact that some of these data
structures return not 0 admit

407
00:41:38,500 --> 00:41:44,667
that it worked and found things.
That was my indication that I
got enough code coverage in

408
00:41:44,667 --> 00:41:51,250
there with my data that I
actually got some results out of
it. Now still with that data in

409
00:41:51,250 --> 00:41:57,250
memory, I can run the main Jack
POS harness. We'll look at that.
So that's got a lot more of

410
00:42:01,542 --> 00:42:06,750
these break points here. I've
got break points for patching
command and control and install

411
00:42:06,750 --> 00:42:12,417
checks, blocking the shell and
open it in a URL. So I can see
what URL is pulling and that

412
00:42:12,417 --> 00:42:19,333
sort of stuff. And so basically
we're launching the process. We
are setting all our break

413
00:42:19,333 --> 00:42:25,333
points. We modified the command
and control from that I that I
am not in any way redacting to

414
00:42:27,958 --> 00:42:33,958
my local VM here. It tests to
see if command and control is
up. It's up. It responds

415
00:42:36,208 --> 00:42:43,042
correctly it's checking in.
While that's searching, I can go
back over to Jack POS here and

416
00:42:43,042 --> 00:42:49,250
now I've got a bot checking in.
And it's in this IP address
range. It thinks that in Zaire I

417
00:42:49,250 --> 00:42:54,250
don't know how to build that
country code up. I can bring
that -- the country code

418
00:42:54,250 --> 00:43:00,250
database in there it's got some
geo-location capability. That's
South Africa you're right. This

419
00:43:05,125 --> 00:43:11,583
is just like a default here
because I didn't build that
table out. IP address. Mac

420
00:43:11,583 --> 00:43:18,167
address for that VM not for my
host and by now, we should have
some dumps in there. Nope not

421
00:43:18,167 --> 00:43:24,167
yet. It's still searching, it
hasn't hit 1480 yet. This is the
exciting part y'all. (Laughing)

422
00:43:30,792 --> 00:43:37,000
The part where we wait. Should
have killed some stuff. Alright,
process explorer, still over

423
00:43:37,000 --> 00:43:44,750
here. Showing us that we've got
this python. This is our python
running the malware right over

424
00:43:44,750 --> 00:43:50,750
here. We've hit 1480, so now,
over here, we should have dumps.
Oh no. What happened? It broke.

425
00:43:56,792 --> 00:44:02,792
Oh but it hadn't checked in yet.
That's what it is. See there,
that's where it sends it. So now

426
00:44:06,542 --> 00:44:12,333
it loops back around to the
check in, tests to see if it's
up, it's up. And it base 64

427
00:44:12,333 --> 00:44:18,333
encodes everything and sends it
along. So now, dumps. So there,
you can play around with this

428
00:44:23,708 --> 00:44:28,000
and you can have some fun with
it. If you were really evil, you
could actually just patch this

429
00:44:28,000 --> 00:44:34,000
malware and start using it
yourself. Don't do that, naughty
naughty don't hack things.

430
00:44:37,083 --> 00:44:44,208
(Laughing) So wrapping up on
this, the idea is we're
addressing reproducibility and

431
00:44:44,208 --> 00:44:51,750
verifiability in malware. That's
the preaching to the choir part.
We all want to have better

432
00:44:51,750 --> 00:44:56,250
information about what we're
analyzing. I encourage you to
slow down for a moment and just

433
00:44:56,250 --> 00:45:02,875
document what you're doing and
share that. Giving the malware
what the wants, the data the it

434
00:45:02,875 --> 00:45:07,583
wants, the network services it
wants to connect to, that's a
big deal. And that's better than

435
00:45:07,583 --> 00:45:10,750
just the generic sand box. It's
not what you want to roll out
for everything. You want this

436
00:45:10,750 --> 00:45:17,458
generic sand box as triage, but
if you're going to go deep dive
and try to be fire eye to that

437
00:45:17,458 --> 00:45:22,583
great new analysis, and you're
going to be the cool one, you're
going to do this. And there's a

438
00:45:22,583 --> 00:45:27,958
potential for publishing this.
Would be neat to have a cloud
based service where you could

439
00:45:27,958 --> 00:45:32,375
log in and be able to interact
with these sorts of things in a
relatively safe environment.

440
00:45:34,667 --> 00:45:39,833
There's my contact information.
wesley@mcgrewsecurity.com. I
check that e-mail whenever. Then

441
00:45:39,833 --> 00:45:45,833
I have a work e-mail, but I only
check that at work. There's my
primary twitter account.

442
00:45:48,083 --> 00:45:51,333
McGrewSecurity. And the
secondary one, which is not
listed right now,

443
00:45:51,333 --> 00:45:57,333
IHuntPineapples (Laughing) So,
I'll be hanging around the con
and talking to people and

444
00:45:59,417 --> 00:46:05,417
answering questions and drinking
and things like that. So get up
with me. Thank you so much for

445
00:46:12,917 --> 00:46:15,333
coming. (Applause.) 

