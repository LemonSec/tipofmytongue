1
00:00:00,000 --> 00:00:04,208
>> I would like to introduce
John, Menerick speaking of open
source fairy dust andpoking

2
00:00:04,208 --> 00:00:10,208
holes in all sorts of weird
crap. So  ‑ ‑ >> Good morning,
everyone. Would anyone like some

3
00:00:16,792 --> 00:00:22,792
bubbly? Come on up. Come on.
Anyone right here. >> Yeah, I
need alcohol. (Laughter). >> I

4
00:00:59,625 --> 00:01:05,250
just asked that individual, do
you have a driver's license.
Steal his identity. He was like

5
00:01:05,250 --> 00:01:11,250
fuck you. I was like damn it.
Cheers for the lovely champagne
and, yeah, this talk is going to

6
00:01:17,917 --> 00:01:23,917
be interesting. We'll talk about
projects, particular the ones
that Al lout internet to run or

7
00:01:25,958 --> 00:01:31,958
vice versa, quite interesting
and overall in my day to day
life or in real life I am a

8
00:01:38,083 --> 00:01:42,458
security dragon. I do fun
things, good or bad depending on
your pointer of view. Let's get

9
00:01:42,458 --> 00:01:48,458
the legal part out of the way.
The views and pins expressed
here are my own, only and in no

10
00:01:50,625 --> 00:01:58,333
way represent the views it,
positions or pins expressed or
implied of my employer presenter

11
00:01:58,333 --> 00:02:05,667
or past of any one else of my
thoughts or opinions are like to
change from time to time. This

12
00:02:05,667 --> 00:02:12,750
is an off shoot of having an
open mind. So let's start off
with what we're not going to be

13
00:02:12,750 --> 00:02:18,750
talking about. We're not going
to be talking about wars between
proprietary. We're not going to

14
00:02:18,750 --> 00:02:25,750
be talking about the scary
vulnerabilities in projects
because I like to open a big

15
00:02:25,750 --> 00:02:30,292
toolbox. I'll be dropping the
latest and greatest here. I
haven't told anyone. Hey guys I

16
00:02:30,292 --> 00:02:36,333
have this awesome exploit for
Linux. I don't think a lot of
people would be happy with me

17
00:02:36,333 --> 00:02:42,333
but I know I would Ma ache lot
of underground people happy. So
what we're going to talk about

18
00:02:52,208 --> 00:02:58,208
is this magical theory about
unicorns pixies and fairy dust.
LL cat looking down on you and

19
00:03:07,708 --> 00:03:14,250
everything is magical and fun
and then I was looking at
node.GS from a security

20
00:03:14,250 --> 00:03:19,458
perspective, are they checking
validations and things like that
and I was oh my God this is

21
00:03:19,458 --> 00:03:24,458
scary. Where is the bleach. I
need it for my eyes. What is
going on. I looked at spying, I

22
00:03:24,458 --> 00:03:30,458
looked at MGP, I looked at web
servers and I looked on and on
and I was like this is really

23
00:03:33,042 --> 00:03:39,042
bad. Then I started looking at
is this a systemic issue. What's
going on. So, it's like what's

24
00:03:43,625 --> 00:03:48,792
going on? So, we're going to
start off way very simple
welcome to open source. Welcome

25
00:03:48,792 --> 00:03:54,792
to the internet. Here's some of
the data that I found. And then
show you guys how to reproduce

26
00:03:57,292 --> 00:04:04,417
this and test it all on your
own. So we'll have our lovely
assistant Jen here show us the

27
00:04:04,417 --> 00:04:10,417
internet. Yes, the internet.
This is a hilarious prank
blowing up on youtube but circa

28
00:04:17,125 --> 00:04:23,125
2007, AT&T created this cute
little info graphic of the
internet. It's a huge map where

29
00:04:27,500 --> 00:04:32,333
it's basically a collection of
things that agreed to share
information with each other.

30
00:04:32,333 --> 00:04:38,333
Hey, I'll send your way if you
send it your way. How are we
going to do. Let's use open

31
00:04:42,625 --> 00:04:50,417
standards. Way back in the early
days of the internet got my
former mentor, I use a  ‑ ‑ a

32
00:04:50,417 --> 00:04:55,208
strong contributor to the home
group video club featured the
early days where you had all

33
00:04:55,208 --> 00:05:01,208
these people sharing source code
with each other. From there it
grew into this ideal where open

34
00:05:04,125 --> 00:05:10,125
source software, open standards,
open free bear, free hardware.
When you have this ideal kind of

35
00:05:15,333 --> 00:05:21,333
growing over time through
decades you start to get a lot
of fallacies and myths untruths

36
00:05:21,333 --> 00:05:29,083
about it. One of the biggest
ones that I saw was no one ever
said that it was secure. Sure,

37
00:05:29,083 --> 00:05:35,083
free, take it but it was truly
never secure. And then that's
what I thought about a month ago

38
00:05:43,125 --> 00:05:49,125
when I was watching a
presentation about the history
of the internet and I lied.

39
00:05:51,167 --> 00:05:58,542
Someone said open source is more
secure. Everyone's looking at it
and everyone's  ‑ ‑ it's locked

40
00:05:58,542 --> 00:06:06,250
down, yeah, and I'm like I quick
rewind back, flipped through the
title. Internet society

41
00:06:06,250 --> 00:06:11,333
president, one of the
organizations for the internet
said yeah this stuff is all

42
00:06:11,333 --> 00:06:15,500
right its secured. Just ignore
attacks, just ignore all the
fundamental design flaws. And,

43
00:06:15,500 --> 00:06:17,500
yeah, it's not secure. >>
(Inaudible). (Laughter). >> You
really need to work on your

44
00:06:17,500 --> 00:06:23,500
slides, man. (Laughter). >> It's
just so genius it just bleeds
into people. You don't even have

45
00:06:31,417 --> 00:06:37,417
to see. It just bleeds through
the screens. So, I would like,
if I may, to tell you a short

46
00:06:46,000 --> 00:06:52,000
story about the next policy. >>
(Inaudible). >> So, this is a
sort story about four people

47
00:07:08,500 --> 00:07:14,500
named everybody, somebody,
anybody and nobody. Okay, good
times. There was a job to be

48
00:07:20,958 --> 00:07:26,958
done and everybody was asked to
do it. Everybody was sure
somebody would do it. Anybody

49
00:07:31,292 --> 00:07:37,292
could have done it but nobody
did it. Keep going on. Somebody
got angry that  ‑ ‑ somebody got

50
00:07:44,750 --> 00:07:50,750
angry that no one really did
anything because it was, can we
guess why? Everybody's job.

51
00:07:55,625 --> 00:08:01,625
Everybody thought that anybody
could do it. Nobody realized
that everybody would not do it.

52
00:08:05,667 --> 00:08:11,667
So, we end up with everybody
blamed somebody and nobody did
what anybody could have done.

53
00:08:14,708 --> 00:08:20,333
Now, when I read this story
online I was like wait, where
have I seen this recently? Oh,

54
00:08:20,333 --> 00:08:25,958
that's right the security
chamber in the blogosphere
blaming SSI, like oh, heart

55
00:08:25,958 --> 00:08:31,042
bleed it was so easy to find,
anybody could have found it, it
was in there for years. Take

56
00:08:31,042 --> 00:08:37,917
those one to three developers
and lynch mob them. I'm like,
wait, what, one to three people?

57
00:08:37,917 --> 00:08:43,917
Huge code base. If you've ever
seen the hollow rampage  ‑ ‑ you
should read. And, no, and, you

58
00:08:54,125 --> 00:08:59,375
know, further echo chamber where
hey guys I'm the policy of
everybody's looking at the code

59
00:08:59,375 --> 00:09:04,292
or hey, guys, let's make sure
there's nothing on there. No.
They're really not. Or if they

60
00:09:04,292 --> 00:09:10,292
are. >> I have a different code
for you. >> Yeah, drink,
motherfucker, drink. (Applause).

61
00:09:17,500 --> 00:09:25,000
>> Congratulations. >> And
actually that's really
interesting. >> (Inaudible). >>

62
00:09:25,000 --> 00:09:31,000
Yeah, right. But I can't. >>
Good morning. >> Good morning.
>> And good luck. >> Thank you.

63
00:09:34,542 --> 00:09:40,542
>> All right. So, who are the
type of contributors who help
out with open source projects.

64
00:09:46,000 --> 00:09:52,000
In the lower right you have the
activist. Touring other's work,
they want to contribute or

65
00:09:54,125 --> 00:10:00,125
create owned property to solve a
particular ethical, moral or
lifestyle choice. >> Code that

66
00:10:02,958 --> 00:10:08,958
when you run it it prints up the
source code in the shape of a
camel. Cool I guess or just do

67
00:10:21,708 --> 00:10:27,708
it for the hell of it. And then
till you see more on the
internet infrastructure open

68
00:10:29,750 --> 00:10:32,583
source projects was more
financially motivated
contributors where they're like

69
00:10:32,583 --> 00:10:37,667
this company will come in and
say, hey, there's a large sum of
money, can you write this

70
00:10:37,667 --> 00:10:42,250
feature for us. You can
contribute it, open source was
like hey, can you write it for

71
00:10:42,250 --> 00:10:48,250
us or you'll have institutions
will be like, hey, I have some
money here, I don't really care

72
00:10:55,208 --> 00:11:01,208
how you spend it, you guys are
doing an amazing job. Go on. Or
you'll have others that are like

73
00:11:11,083 --> 00:11:17,083
hey, I really like what you're
doing with this language or
project. Come work for us and

74
00:11:24,167 --> 00:11:28,875
you'll spend half your time and
work on your project.
Interesting incentives but

75
00:11:28,875 --> 00:11:34,875
effectively overall these are
very crucial projects that are
maintained, created by a

76
00:11:43,792 --> 00:11:49,792
strained cadre of volunteers.
Very rare to use incentivize.
They're strange and it's pretty

77
00:11:53,625 --> 00:11:59,333
saw. When you end up with
strained resources you have to
presidential candidate your

78
00:11:59,333 --> 00:12:06,042
priorities. So let's pick a very
over simplistic list,
functional, stability,

79
00:12:06,042 --> 00:12:12,042
compliance, performance,
usable/maintainability and then
security. Well, when I create

80
00:12:15,958 --> 00:12:21,958
something on the internet that I
want to run and just work fairly
well, functionality, nah, not so

81
00:12:23,958 --> 00:12:31,083
G you're seeing projects that
whenever I run these systems I'm
not looking for the latest and

82
00:12:31,083 --> 00:12:37,542
greatest thing. I'm looking for
the most stable thing and since
I love bashing out compliance,

83
00:12:37,542 --> 00:12:42,750
let's get that one out of here.
Compliance is the by product of
the bit security program but

84
00:12:42,750 --> 00:12:48,750
unless you're dealing with
crypto or situations where your
project need use such as Phipps,

85
00:12:51,167 --> 00:12:57,167
no compliance after thought. And
I'm not sure how many of you
have ever played with host rules

86
00:13:00,250 --> 00:13:06,250
but usability/maintainability
not really an operation up
there. Like that's nice but they

87
00:13:08,667 --> 00:13:14,708
don't care. We're not going to
maintain it. We're left with
three. Stability, performance

88
00:13:14,708 --> 00:13:21,250
and security. So, the fun part
is I originally thought security
was kind of up there. Like

89
00:13:21,250 --> 00:13:25,542
stealing candy from a baby,
you'll find something in there
butter once you get to a certain

90
00:13:25,542 --> 00:13:32,875
level then they're financially
motivated to care about
security, either reputation or

91
00:13:32,875 --> 00:13:38,917
context but for the most part
they really only care about two
things, performance and

92
00:13:38,917 --> 00:13:43,958
stability, the network  ‑ ‑ this
admin, this reliability in here.
They just want D and S that

93
00:13:43,958 --> 00:13:49,958
works. They own have to play one
or two machines and off it goes.
But ultimately you have these

94
00:13:55,250 --> 00:14:02,542
very limited number of
contributors who have really
only so much time in the day.

95
00:14:02,542 --> 00:14:09,958
You can't grow time. So, you end
up with a lot of thrift code
being created with very little

96
00:14:09,958 --> 00:14:15,958
attention. It actually kind of
makes it kind of hard. So, now
we're going to play a game. Name

97
00:14:19,583 --> 00:14:27,250
this programming language. So,
here we have a an awesome set of
guys, living the life, cool,

98
00:14:27,250 --> 00:14:33,250
water's there, looks like a
grille, electric, hooked up to
an extension cord. HP up here

99
00:14:36,917 --> 00:14:44,625
and someone said that yesterday
but we'll get to that but no.
No, you're not far off but

100
00:14:44,625 --> 00:14:49,917
there's a better analogy. The
extension cord with the water
going through, can anyone guess

101
00:14:49,917 --> 00:14:55,917
what it is? CC plus plus. I
guess the easiest way to define
it is from one of the top I'd

102
00:15:05,042 --> 00:15:12,250
say  ‑ ‑ when you carry pointers
around and can't track if
they're live or how long they

103
00:15:12,250 --> 00:15:18,250
are it's going to hard. The hard
part is  ‑ ‑ thousands of lines
of code, thousands of files it's

104
00:15:23,042 --> 00:15:28,792
not that you have to worry about
your application logic but with
this language you have to start

105
00:15:28,792 --> 00:15:35,000
worrying about memories, you
have certain memory management
and boundary management and

106
00:15:35,000 --> 00:15:42,500
exceptions and oh, God, my brain
is tired of thinking about it.
There's going to be a hobbyist

107
00:15:42,500 --> 00:15:50,292
thrown in here or the project
themselves but unless they have
a very strong security

108
00:15:50,292 --> 00:15:56,292
development background which
none of them really do, C, C
plus experts and java, man, what

109
00:16:00,000 --> 00:16:07,417
can I say about java these days?
I think Charlie Miller said it
best. It's not like java got

110
00:16:07,417 --> 00:16:14,417
insecure all of a sudden. It's
been insecure for years. The
hard part is the life cycle it's

111
00:16:14,417 --> 00:16:20,417
like we need to get this out the
door, we need the pack and shit
we're making decisions at 4:00 

112
00:16:23,750 --> 00:16:30,458
a.m. we have to live with for
the rest of our lives. We'll
come back to that tomorrow. And

113
00:16:30,458 --> 00:16:36,583
really smart people working on
this create a program like java,
write once, run anywhere really

114
00:16:36,583 --> 00:16:42,583
hard. And well, for the lovely
fellow who loves to talk about
PHP, kind of like programming

115
00:16:42,583 --> 00:16:44,583
with a noose around your head.
It will give developers plenty
of room to program their write

116
00:16:44,583 --> 00:16:50,583
and before you know it the noose
is around your neck and you're
like oh, shit, fuck and, bam.

117
00:16:55,958 --> 00:17:03,042
And I'm not really going to talk
about go, dart, fortunately but
I don't like looking at Pearl.

118
00:17:03,042 --> 00:17:09,042
But there's tons of languages
out there. From what I've seen
just browsing, what would I use

119
00:17:19,958 --> 00:17:25,958
to run DNS, what would I use to
run X, old school going way back
to the bricks of building of the

120
00:17:28,083 --> 00:17:34,000
internet and you'll see CC plus
plus has survived over the
years. So when I started looking

121
00:17:34,000 --> 00:17:39,458
at all these different projects
of, hm, there's so many out
there, what did I look at. It's

122
00:17:39,458 --> 00:17:45,458
like well there's some really
big warning signs. I could go on
about the technical side of

123
00:17:49,542 --> 00:17:56,417
really old security
vulnerabilities that are still
opened that they haven't patched

124
00:17:56,417 --> 00:18:00,167
or, you know, if they can't even
do the functional feature
requests from ten years ago

125
00:18:00,167 --> 00:18:06,167
they're probably not even caring
about security. But the obvious
one is no strategy from the

126
00:18:10,125 --> 00:18:15,000
project coding and everything
where someone will come in and
they'll code for a year or two

127
00:18:15,000 --> 00:18:21,208
and then kind of give it up and
then someone will work off the
source code and then they'll go

128
00:18:21,208 --> 00:18:26,708
to the other side and go it was
cool or development‑ wise you
have people going here and

129
00:18:26,708 --> 00:18:33,042
there, implement their own
memory allocation management,
libraries and they'll introduce 

130
00:18:33,042 --> 00:18:39,042
‑ ‑ instead of strategizing the
not the greatest research comes
out crowd here and yeah it's

131
00:18:43,167 --> 00:18:49,167
quite interesting. And this one 
‑ ‑ next one should be fairly
obvious. So, when I was  ‑ ‑ I

132
00:18:53,792 --> 00:18:57,167
think I have probably a few
thousand vulnerabilities in
exploit. Some of these I have to

133
00:18:57,167 --> 00:19:03,167
really tell someone. Looked in
their web site, looked in their
source code and I'm like how do

134
00:19:07,708 --> 00:19:14,625
I tell them. Send E‑ mails to
their RFC's security app, no
response. And I was like fine i

135
00:19:14,625 --> 00:19:21,208
really have no choice. Throw it
up in their issue tracker. Then
one of the core developers says

136
00:19:21,208 --> 00:19:28,750
John, why did you put this here?
Everyone can see this. And I'm
like because I didn't know where

137
00:19:28,750 --> 00:19:33,875
else to put it. I looked on
Google, didn't find anything,
looked on your web site. Here's

138
00:19:33,875 --> 00:19:38,958
a patch for your read me. I'm
sorry . (Laughter). 

139
00:19:38,958 --> 00:19:45,500
>>> But unless these projects
had a large swath of issues
coming their way they don't

140
00:19:45,500 --> 00:19:51,500
really know thousand digest
them. They don't know how to
handle them. And second to last,

141
00:19:53,583 --> 00:19:59,708
complex code. This is quite
technical but looking through
this code and it looks really

142
00:19:59,708 --> 00:20:04,875
complex and you're like I don't
really know what's going on
here. Reality is neither does

143
00:20:04,875 --> 00:20:07,125
the developer. (Laughter). 

144
00:20:07,125 --> 00:20:14,625
>>> And as you can see this
chart green is bad, red is kind
of good. But, um, yeah, just

145
00:20:14,625 --> 00:20:20,625
complex code. Now the Black Hat,
there's a lot of old
installations running, so old

146
00:20:28,125 --> 00:20:34,125
versions for engine X. Why?
Because change is actually hard.
I didn't see how security go in

147
00:20:43,583 --> 00:20:51,250
there you need to upgrade your
patching server because Kaminski
just said something awesome and

148
00:20:51,250 --> 00:20:56,250
DNS admins will be like oh but
you don't have to suffer any of
the consequences and we were

149
00:20:56,250 --> 00:21:02,167
like, yes, that's nice, go ahead
upgrade it. So a lot of people
rarely upgrade unless they're

150
00:21:02,167 --> 00:21:08,167
force to do for compliance
obligations. But ultimately
change is hard. So, where are we

151
00:21:13,375 --> 00:21:19,792
now? That is the great question.
Now that we've gone through the
history. Start looking at what

152
00:21:19,792 --> 00:21:25,792
we're going to be doing. So,
I've studied a lot of the major
open source projects for web

153
00:21:28,333 --> 00:21:34,333
servers, hyper visors, since our
audience is bunch of security,
security tools, MP3 servers. I

154
00:21:37,417 --> 00:21:43,417
don't like Windows programming
so much other than very new
areas working on services a lost

155
00:21:46,958 --> 00:21:54,917
people typically don't run
Windows technology for
infrastructure services.

156
00:21:54,917 --> 00:22:00,917
Typically it's DSP. Can anyone
tell me what I think is the
scariest most vulnerable open

157
00:22:04,417 --> 00:22:10,417
source project out there today
that everyone is using $50 for
someone who can tell me the name

158
00:22:15,875 --> 00:22:21,875
of the project that is the most
vulnerable. >> (Inaudible).
(Laughter). 

159
00:22:31,125 --> 00:22:37,125
>>> Here's a hint its a mail
server. Not send mail. If you
think ex‑ ‑ you would think

160
00:22:39,708 --> 00:22:45,708
exchange but can't make any
statements to that. >> Hugo. >>
Who said XM? >> Here you are,

161
00:22:52,708 --> 00:22:58,708
sir, come on up. (Applause). >>
(Inaudible). (Laughter). >>
Exactly. So, let's look at the

162
00:23:09,958 --> 00:23:15,958
data, shall we? Okay. So what we
have here is good old blue
charts. Kind of fun. So what we

163
00:23:23,125 --> 00:23:29,417
have done here is critical
deaths is the. We have critical
density as every how many lines

164
00:23:29,417 --> 00:23:35,833
of code there would be one, you
know, vulnerability. What I did
is inversed that saying for

165
00:23:35,833 --> 00:23:43,542
every line of code how likely is
there to be a vulnerability. And
then same with high density.

166
00:23:43,542 --> 00:23:49,833
High vulnerabilities, you know,
not critical, not at low,
quantitatively I could go on for

167
00:23:49,833 --> 00:23:57,417
hours but the reality is up and
to the right is scary. Down to
the left is safe. Then we have

168
00:23:57,417 --> 00:24:04,000
here color wise just a pure
number of critical
vulnerabilities, just overall.

169
00:24:04,000 --> 00:24:08,875
And then the size just an idea
of the size of the project. So,
not just executable lines of

170
00:24:08,875 --> 00:24:14,875
code. So XM has 13,000 critical
vulnerabilities. What the hell?
And X bit of lines of code, sure

171
00:24:25,625 --> 00:24:31,625
up and down you could argue but
35,000. Yeah. Let's go all the
way down here, 290 critical

172
00:24:34,500 --> 00:24:40,500
vuln. Yeah, so on this chart you
really can't tell. They're all
relative to each other. But when

173
00:24:46,750 --> 00:24:52,750
you look at the overall and XM's
an outlier. So, DNS, God, feels
like I'm just beating on a dead

174
00:24:58,042 --> 00:25:04,042
horse. Yeah. Bind, let's look at
a really old version of Vine.
Bind eight, just continued this.

175
00:25:07,417 --> 00:25:14,583
It was a horrendous project,
we're going to tear it all down
with bind nine and start anew.

176
00:25:14,583 --> 00:25:21,333
Deadline for development life
cycle, now we have to make
priorities, you're making

177
00:25:21,333 --> 00:25:29,000
shareholders happy so overall,
you know, not bad but when you
say not bad 6,000 critical

178
00:25:29,000 --> 00:25:35,000
vulnerabilities, 4,000, I mean,
was the into your versions per
se, 2000, it's better but, yeah,

179
00:25:40,167 --> 00:25:47,250
that's scary. So, normally I
would have Bundy or bind ten out
here  ‑ ‑ up here. I won't go

180
00:25:47,250 --> 00:25:51,333
into reasons why that was a
failed project. Most likely it
was split off and there was a

181
00:25:51,333 --> 00:25:57,125
write 68 presentation on the
magical fairy dust of that
progress and how it's

182
00:25:57,125 --> 00:26:02,833
bastardized and kicked off but
effectively it would make all of
this look like an outlier. Also

183
00:26:02,833 --> 00:26:08,833
many of the other open source
DNS projects that would look far
down to the left, like they're

184
00:26:13,417 --> 00:26:19,583
actually pretty solid and on
their web sites, say, hey we
actually care about security and

185
00:26:19,583 --> 00:26:25,583
we do it well. Web servers. Top
and to the right, 90, 98. Not
too bad and number out here,

186
00:26:32,417 --> 00:26:38,417
okay, cool, and then engine X.
You think there would be a lot
but you can see as I slowly move

187
00:26:40,417 --> 00:26:46,042
down here it's a little bit
better and then down there solid
Apache. They do testing, they

188
00:26:46,042 --> 00:26:52,042
have a lot of infrastructure
built up, so overall, I'm going
to pick Apache over Lidy. Let's

189
00:26:58,250 --> 00:27:06,083
look at good old open source
operating systems. Since I
didn't have enough time nor

190
00:27:06,083 --> 00:27:12,083
sanity to go through the DSB set
and many others I created this
picture versions of Linux and

191
00:27:17,250 --> 00:27:23,250
just for shits and giggles let's
do zen. Not that bad. 139
bricks. Doesn't get down to

192
00:27:27,042 --> 00:27:34,250
Linux. The 3261 series, not that
many criticals. They're pretty
responsive, proactive. What's

193
00:27:34,250 --> 00:27:40,250
wrong with you, blah, blah,
blah, not appropriate. Yeah. And
I was like hey let's just lick

194
00:27:47,750 --> 00:27:52,833
the file system and devices and
that's really where a lot of the
vulnerabilities existed, the

195
00:27:52,833 --> 00:27:57,750
device drivers and file system.
For the core part I'm sure
there's a few there in crypto

196
00:27:57,750 --> 00:28:03,750
but not really. It's actually
pretty solid. Time, something we
never have enough of. Yeah.

197
00:28:06,667 --> 00:28:12,667
MCPDAV, still not that bad. MC
P‑ 4 26, 139, no the that bad.
KRONI better. And open MPC

198
00:28:22,083 --> 00:28:29,542
didn't have a lot of crits. So
then we start looking over here
at FSL, right. Everyone loves

199
00:28:29,542 --> 00:28:35,542
open SSL so this is an old
release. And, yeah, it was bad.
4500 criticals. Way up here

200
00:28:51,042 --> 00:28:57,042
crypto cat. Look at it this way.
So, here we have high density,
critical, crypto cat, SSL, main

201
00:29:06,208 --> 00:29:10,833
base they're working out of but
imagine the amount of technical
security. As these different

202
00:29:10,833 --> 00:29:18,083
teams, you know, transfer the
code and they let off
everybody's doing better.

203
00:29:18,083 --> 00:29:24,083
SSL21crits. GSR, java, cryptos,
doing better. Java, open SL, 98,
bitcoin, everyone looks for

204
00:29:33,667 --> 00:29:39,667
bitcoin, I don't have the status
up here but bitcoin, two, three
years ago, set up I analyzed it

205
00:29:46,083 --> 00:29:53,500
and it was scary. Now when I
came back and it was cleaned up
so thank you to whoever looked

206
00:29:53,500 --> 00:29:59,667
at all that source code and
cleaned it all. And crypto. Yes.
All of the fun application

207
00:29:59,667 --> 00:30:05,667
libraries. Before we get there
let's talk about security. Open
PPGJS. That's kind of scary. You

208
00:30:10,417 --> 00:30:16,417
know what's also scary, really,
really old version of snort. NCH
root kit has a few crits. Has

209
00:30:22,542 --> 00:30:28,542
some privilege escalations that
no one else has. Another version
of pseudo, snort, little bit

210
00:30:38,625 --> 00:30:44,625
more compliant. Tech secure,
java, snort, snort, tour has
some issues but nothing really

211
00:30:50,208 --> 00:30:58,000
bad. Open GPN. I was expecting
open GPN because I really wanted
some code execution exploits.

212
00:30:58,000 --> 00:31:04,000
There are few but it's pretty
solid surprisingly. Yes, so, I
like core libraries but what I

213
00:31:07,458 --> 00:31:13,708
use on a daily basis that I
would love to see exploits and
vulnerabilities for so I just

214
00:31:13,708 --> 00:31:19,708
picked a few. So, way up to the
top left we have W get. I should
have done lip curl and curl but

215
00:31:19,708 --> 00:31:26,167
I didn't have enough time but,
dude, W get is vulnerable. It
needs some attention from either

216
00:31:26,167 --> 00:31:32,167
part, white hat or Black Hat.
Barb, not that bad. There's a
few things. And then SSM peg, I

217
00:31:38,625 --> 00:31:43,958
believe they're  ‑ ‑ they were
talking about hey, guys, watch
out, there's flaws in SSM peg.

218
00:31:43,958 --> 00:31:49,958
Look remote code execution.
Awesome. Installed everywhere.
And I'm like really, it's not

219
00:31:52,042 --> 00:31:58,458
that bad, a the least the stuff
that I'm seeing, so, yeah it's 
‑ ‑ there's a lot of people that

220
00:31:58,458 --> 00:32:03,042
SSM peg is really vulnerable. In
my perspective there's a lot
more scarier stuff out there.

221
00:32:03,042 --> 00:32:09,042
So, here we go. Looking at kind
of all those low data sets
together, far out and to the

222
00:32:17,208 --> 00:32:24,083
right is XM. Now one thing about
this from the previous ones now
we're looking at this from a log

223
00:32:24,083 --> 00:32:31,292
rhythmic perspective. If we were
to do this linear, it would be
like oh, yeah, hey, no, no, no,

224
00:32:31,292 --> 00:32:34,875
that's an outlier. No, it's
legit. But I'm like yeah, it's
bad. So, yeah, it's out there

225
00:32:34,875 --> 00:32:40,875
once again. But, um, open SSL,
old versions, W get's out there,
crypto cat way down here, Linux.

226
00:32:53,208 --> 00:33:00,250
Okay, interesting. Not as scary
as you would have thought. And
then, yeah, are you surprised?

227
00:33:00,250 --> 00:33:07,958
So, I'm going through about 2000
plus open source projects, open
up their repositories and going

228
00:33:07,958 --> 00:33:12,958
through it. Most of them are all
right. But the critical internet
ones are pretty scary. They're

229
00:33:12,958 --> 00:33:18,958
not trying to make the world
secure. So, with that being
said, (Inaudible) where would I

230
00:33:25,958 --> 00:33:31,958
be without all of the good juicy
exploits and vulnerabilities. So
let's like name this project.

231
00:33:38,917 --> 00:33:44,917
So, what we have here is a
couple of java applications,
hello, bit further down below

232
00:33:49,708 --> 00:33:57,542
towards the bottom line 119,
okay go do something, trans this
form, send that request log. As

233
00:33:57,542 --> 00:34:03,542
you get further along,
highlighted, I'm looking through
this there's like HTmel. Content

234
00:34:10,917 --> 00:34:16,917
injection. That's not the worst
thing in the world but, you
know, okay, you're kind of

235
00:34:20,167 --> 00:34:25,750
failing at it but you're in many
places but not here. Can anyone
guess what is this project?

236
00:34:28,000 --> 00:34:34,000
Anyone? Buehler? >> (Inaudible).
>> Big data. Anyone. Pretty
close. GFS. They try to do well.

237
00:34:40,625 --> 00:34:46,625
Yeah, it's interesting. So, one
of those warning signs to you.
This code is shit. It's badly

238
00:34:53,500 --> 00:34:59,833
formatted. It's hard to
understand. It readmits tons of
things which are already in the

239
00:34:59,833 --> 00:35:05,833
server core. If you're like me
with my nomadic application
library, yeah I'm going to get

240
00:35:08,792 --> 00:35:16,708
this thing and at the very
bottom, okay, cool, do some
stuff, I'm going through then at

241
00:35:16,708 --> 00:35:22,708
the very bottom and the farther
left you can barely see you're
like rather mal. The server

242
00:35:28,875 --> 00:35:34,875
source code says this will
always succeed. And yes, it
will. Name that project. Free

243
00:35:44,083 --> 00:35:50,083
radius. Short simple one. Yeah,
this one is the typical of this
project, you know, I'm going

244
00:35:54,250 --> 00:36:01,500
call this array, when I look at
it dynamicly, okay, cool. And
down below you stuff the array

245
00:36:01,500 --> 00:36:07,500
with this value, 96 bites, so
96, H, throws it in, loads it up
out of bounds. Oh, XM I love

246
00:36:12,458 --> 00:36:18,458
you. So what we have now are
Black Hats. Some projects. It's
out there. It's vulnerable. It's

247
00:36:22,417 --> 00:36:28,167
easy to produce but the white
hats here, make sure you apply
their appropriate risk

248
00:36:28,167 --> 00:36:34,875
management. Third party source
code that you include in your
projects or use in your

249
00:36:34,875 --> 00:36:41,083
infrastructure and use
operational security best
practices. Make sure everything

250
00:36:41,083 --> 00:36:47,083
is secured. So, yeah, many
people looking for these. I was
amazed that I was finding these,

251
00:36:52,333 --> 00:36:58,333
just pure number like hell why
am I not seeing these mailing
list, why are all these entities

252
00:37:00,667 --> 00:37:06,458
such as the MXA, and others
just  ‑ ‑ who  ‑ ‑ am I the only
one using my toolbox? Like

253
00:37:06,458 --> 00:37:14,125
what's going on here. I'm not
doing anything really special
and neither do you have to as

254
00:37:14,125 --> 00:37:22,000
well. So, whether or not you
want to do this for street cred,
to get a job or say, hey, look

255
00:37:22,000 --> 00:37:28,542
at my name, I'm a nar cystic
vulnerability pimp or maybe you
want to sign off as net dad and

256
00:37:28,542 --> 00:37:34,542
say hey I pulled off this
exploit or you want to do it for
the lulls like watch this

257
00:37:37,167 --> 00:37:43,167
explode, quick send, like here's
a cool exploit for Linux through
the terminal, everybody will be

258
00:37:47,208 --> 00:37:52,292
like, oh, or pretty much like
myself, you're like worst case 
‑ ‑ what you could also do is go

259
00:37:52,292 --> 00:37:58,292
more the white hat route, bug
bounty program, they'll offer
you some small sum of money

260
00:38:08,750 --> 00:38:14,750
depending on the person who's
paying or you can kind of go the
gray market where ethical,

261
00:38:18,208 --> 00:38:25,958
legal, moral boundaries aren't
so clear and you could go
straight underground and get 100

262
00:38:25,958 --> 00:38:32,833
to a thousand X. But really
depends what is your incentive.
'Cause once you figure out your

263
00:38:32,833 --> 00:38:38,708
incentive, really determines how
much time and resources you're
going to put into this. My

264
00:38:38,708 --> 00:38:44,708
typical stack was using gift
such that I didn't have to watch
all the time, I just had my

265
00:38:47,167 --> 00:38:51,375
automation take off. Oh, look,
somebody did something at 2:00
a.m. I didn't have to wake up.

266
00:38:51,375 --> 00:38:58,208
As using Amazon web searchs, a
few hundred instances, you don't
really have to, really depends

267
00:38:58,208 --> 00:39:04,375
on what scale you want to go.
You could have it run on
moderately powered laptop,

268
00:39:04,375 --> 00:39:10,375
decent solid drive and memory.
Just like Neal said we need
guns, well, we need memory just

269
00:39:15,083 --> 00:39:19,208
to handle all of this. And I
used Jenkins and tracked
everything, which ones are

270
00:39:19,208 --> 00:39:25,208
scary, which ones are not. Hey,
John you need pay attention.
Ultimately I was doing static

271
00:39:28,625 --> 00:39:32,417
and dynamic analysis. On the
static side you could use cling,
good old break man, find bugs or

272
00:39:32,417 --> 00:39:38,417
use a proprietary software such
as fortify and there's tons of
these tools out here. You just

273
00:39:46,417 --> 00:39:52,125
have to understand the
limitations of each but static
has its faults. It won't find

274
00:39:52,125 --> 00:39:58,208
everything. It says I think
there's something here I'm not
really sure. That's when you

275
00:39:58,208 --> 00:40:04,208
refer to get the dynamic side as
well. D trades, RDDB and then
really hit it such that you get

276
00:40:06,500 --> 00:40:10,833
your code coverage as well so
when you get all three together
you're like, wait, I know how to

277
00:40:10,833 --> 00:40:16,833
reproduce this, hello exploit
but I also see. And if you don't
want to do this, there's a lot

278
00:40:21,833 --> 00:40:27,333
of new infrastructure projects
towards open source project but
they still haven't made you

279
00:40:27,333 --> 00:40:34,708
identify yourself as, hey, I'm
from IFC, so you just say yeah,
probe bind in there and they'll

280
00:40:34,708 --> 00:40:40,042
break it and give you all the
vulnerabilities so thank you.
Swap is a great tool like that.

281
00:40:40,042 --> 00:40:44,583
But ultimately you'll end up
with all these vulnerabilities,
you need some assurance such

282
00:40:44,583 --> 00:40:52,042
that when I come up with you I'm
not blowing a bunch of hot air
in your face. So look at the

283
00:40:52,042 --> 00:40:59,667
natural vulnerability database
and work backwards. Run all your
shit on it and be like hey

284
00:40:59,667 --> 00:41:05,042
what's going on here. I didn't
find it and then find out why
and keep fine tuning it until

285
00:41:05,042 --> 00:41:11,042
you get there. You're going to
have a lot of chat and you need
to separate the two so since I

286
00:41:13,208 --> 00:41:19,208
love programming, working with
data sets and everything, it's
pretty easy to get a very black

287
00:41:22,167 --> 00:41:25,917
and white, sure there will be a
area of gray and that's where
your manual side comes in, and

288
00:41:25,917 --> 00:41:33,583
also source code in addition to
static and dynamic but I know
math and commuter science is

289
00:41:33,583 --> 00:41:39,000
hard so here's some research
from some Stanford researchers,
they're like hey you have all

290
00:41:39,000 --> 00:41:45,417
niece vulnerability data sets
from distinct sources here's how
you pull them altogether. Okay.

291
00:41:45,417 --> 00:41:49,083
So, without going into the
gibberish math there in the
lower left of the screen,

292
00:41:49,083 --> 00:41:54,708
effectively you have those data
sets, how confident are you,
okay, cool, did some cool  ‑ ‑

293
00:41:54,708 --> 00:42:00,708
does some cool stuff and then
pulls that many altogether.
Nice. Now I need to rank them.

294
00:42:03,625 --> 00:42:09,625
They also produced ranking. So,
if you can imagine the network
here isn't that safe and I don't

295
00:42:14,500 --> 00:42:19,625
really trust right now anything
that's electronic. So, when I
get back home I'll code all of

296
00:42:19,625 --> 00:42:25,625
the source code, all of the
findings so that they summarize
and I'll be like hey guys look

297
00:42:25,625 --> 00:42:31,625
at some of my previous note
you'll see where I ripped apart
open SSL, node. There's tons of

298
00:42:34,042 --> 00:42:40,042
stuff there. ultimately the web
site for this is going to be
hack the planet dot ninja. So

299
00:42:42,708 --> 00:42:48,167
just go to the internet here,
use all your fun stuff. Now you
have to have all the fun little

300
00:42:48,167 --> 00:42:55,500
fonts and all that but
effectively that's it. So, I
would like to thank everyone for

301
00:42:55,500 --> 00:43:01,500
comeing. [Applause]. >> Oh,
wait. One more thing. You guys
are keeping  ‑ ‑ I have always

302
00:43:05,708 --> 00:43:13,333
wantd to see a remote execution
or exploit for notepad. Like
come on where is it? I've been

303
00:43:13,333 --> 00:43:17,375
waiting. Privilege escalation
anything? No. I'm like wait,
pike company. Let's hate on some

304
00:43:17,375 --> 00:43:23,375
E max. Here we have E max. I
won't say too much but 2788
here's your array 4,000 bites in

305
00:43:41,625 --> 00:43:47,625
size, very large number of stuff
in there. Yeah. Nice try. But
thanks. No thanks. I like Zim.

306
00:43:54,167 --> 00:44:00,583
I'll stay. Thank you for coming.
That's all. (Applause). >> Why
did you set up your own Jenkins

307
00:44:00,583 --> 00:44:04,250
box? >> I have a lot of Amazon
credits. (Laughter). >> Pick the
tool that's best for you.

308
00:44:04,250 --> 00:44:06,250
Whatever makes you happy. >>
Thanks. 

