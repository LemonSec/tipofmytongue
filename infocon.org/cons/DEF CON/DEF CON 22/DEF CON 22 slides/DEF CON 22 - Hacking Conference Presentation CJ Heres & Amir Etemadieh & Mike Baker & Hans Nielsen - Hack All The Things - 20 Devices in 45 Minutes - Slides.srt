1
00:00:00,292 --> 00:00:06,292
 >> So, we've got, uh, Amir, CJ
Hahn and Mike and they are going
to hack 45, or 20 devices in 45

2
00:00:08,292 --> 00:00:14,292
minutes. Let's give them a big
party track welcome. [Applause]
>> Charge! All right. Good

3
00:00:20,125 --> 00:00:25,708
stuff. Hello everyone, I wanted
to welcome you to GTV. Hacker
presents hack all of the things.

4
00:00:25,708 --> 00:00:32,000
20 devices in 45 minutes of GTV
hacker production. So who are
we? We are GTV hacker we form to

5
00:00:32,000 --> 00:00:37,958
route the original Google TV in
2010, we released exploits for
every Google TV devices since

6
00:00:37,958 --> 00:00:43,542
then, plus some others including
the chrome cast locator and many
more come today, you guys will

7
00:00:43,542 --> 00:00:48,958
really enjoy this presentation.
So who are we, the speaking
members today you will get to

8
00:00:48,958 --> 00:00:55,167
hear from, are myself. I work at
Accuvant as a research scientist
and I funded the GTV hacker

9
00:00:55,167 --> 00:01:00,958
group. There's CJ here, he is a
security researcher, group head
at a nonprofit. We have Hans

10
00:01:00,958 --> 00:01:06,958
Nielsen, he is senior security
consultant at Manasono. And we
have Mike Baker, MBM former

11
00:01:09,625 --> 00:01:15,625
developer and open Cofo or
opener WTR cofounder. [Applause]
>> So who are the other members?

12
00:01:21,042 --> 00:01:26,917
There's only able to be four of
us on stage to present and we
have roughly eight members. We

13
00:01:26,917 --> 00:01:33,708
have Gina Fage, he's actually
running the CTF right now. He's
part of the GPS. We have Saric

14
00:01:33,708 --> 00:01:40,792
who was the creator of Syvia. We
have Qua Han, who is the student
and, uh, has a triple test

15
00:01:40,792 --> 00:01:47,167
apparently. [Laughter] And, um,
we have Tom Dwanger who goes by
TV owang and he is our APK

16
00:01:47,167 --> 00:01:52,750
reserver and really just handles
anything Java. Um, so why do we
hack all the things? Well, we

17
00:01:52,750 --> 00:01:57,500
own the hardware, why not the
software. We also really don't
like devices to end up in

18
00:01:57,500 --> 00:02:02,667
landfills. When a device hits
its end of life, you know, it's
-- It cannot be really useful

19
00:02:02,667 --> 00:02:06,625
anymore it, it could just --
essentially it can kill a device
like, in the case of Logitech

20
00:02:06,625 --> 00:02:11,167
review if any of you are
familiar with it. Um, we also
always aim to make the product

21
00:02:11,167 --> 00:02:14,708
better. If we can do anything to
make the product better, you
know, give it more

22
00:02:14,708 --> 00:02:19,625
functionality, whatever it is,
you know, we do it. Last but not
least, we really enjoy the

23
00:02:19,625 --> 00:02:25,458
challenge. You know, it's, it's
like solving a puzzle. You
really just -- you love it when

24
00:02:25,458 --> 00:02:31,458
you win. So what takeaways are
you going to get today? So --
[Laughter] So you got a root,

25
00:02:37,500 --> 00:02:45,125
you get a root! No, so what
takeaways? So essentially, 20,
20 devices in 45 minutes doesn't

26
00:02:45,125 --> 00:02:49,250
leave us a whole lot of time to
spend on each device. What we
are doing is -- consider this a

27
00:02:49,250 --> 00:02:54,000
show case of things that will be
added to our Wiki right after
the conf -- uh, our

28
00:02:54,000 --> 00:02:59,458
presentation. We're going to
give technical details, um,
hardware diagrams, everything we

29
00:02:59,458 --> 00:03:04,458
can. 'Cause it's gonna be pretty
hard to read and we're not gonna
give everything a lot of time.

30
00:03:04,458 --> 00:03:10,917
So, um, you know, you see the,
the link at the bottom of our
slide deck DC22.GTVhacker.com.

31
00:03:10,917 --> 00:03:15,167
Visit that right after the
presentation. When we get back
to our hotel, we will kill the

32
00:03:15,167 --> 00:03:19,917
basic off on it, and you know,
you will get access to all of
the stuff you saw at the

33
00:03:19,917 --> 00:03:25,917
presentation. So let me
introduce Hans. >> Thank you,
Amir. So there are a limitless

34
00:03:32,292 --> 00:03:37,083
number of ways to attack these
kind of devices it does
everything. Uh, today these 20

35
00:03:37,083 --> 00:03:44,250
devices we have three main
methods that we're gonna look
at. We can use UARTS, serial

36
00:03:44,250 --> 00:03:51,625
ports to talk to debug ports and
get into advice it where we
shouldn't be able to. We can use

37
00:03:51,625 --> 00:03:57,917
EMMC. It's SD card like, and we
can just connect to that and use
that the modify storage directly

38
00:03:57,917 --> 00:04:02,917
if it will let us access, uh,
device operating systems and
also just a whole bunch of

39
00:04:02,917 --> 00:04:08,250
command injection related bugs
that they are very, very popular
in consumer electronic devices.

40
00:04:08,250 --> 00:04:14,250
So with no further do, let's
talk about a whole bunch of UR
base tasks. So what is a UR?

41
00:04:18,208 --> 00:04:22,417
Usually, they are used to
interact with debug ports on a
board. In consumer electronics

42
00:04:22,417 --> 00:04:28,583
they generally not used for any
actual functionality. They are
just used for the manufacturer

43
00:04:28,583 --> 00:04:34,542
to connect to it and debug
stuff, that kind of thing. It's
a very, very simple interface.

44
00:04:34,542 --> 00:04:40,958
There's one wire for transmit,
one wire for receive and one
wire for ground reference so

45
00:04:40,958 --> 00:04:47,833
that everything works. The
protocol is simple, it's been
around forever. It's way older

46
00:04:47,833 --> 00:04:53,833
than I am. Uh, how old are you?
>> I am 27, thank you for
asking. So yeah. It's, it's this

47
00:04:58,750 --> 00:05:02,500
great simple protocol that shows
up in all kinds of places
because it's really convenient

48
00:05:02,500 --> 00:05:08,000
to use on these devices. Uses
all kind of different voltage
levels, there's the serial port,

49
00:05:08,000 --> 00:05:14,000
you're familiar with on your
computer. Hmm? [Applause] >> So
we have a few free UR adapters

50
00:05:22,292 --> 00:05:28,625
to give out at the end. You can
go play with your own devices
with. I hope you get as much use

51
00:05:28,625 --> 00:05:34,917
out at them as we do. So what do
we look for with we are trying
to find a UR. Usually they are

52
00:05:34,917 --> 00:05:41,375
pretty easy to spot on boards
that consist of three or four
pins usually in a line or little

53
00:05:41,375 --> 00:05:46,167
square. You can get a -- the
sole scope poke around the board
try and find things that look

54
00:05:46,167 --> 00:05:51,583
like they are spitting out data
you can see the way they form.
So without further do, let's get

55
00:05:51,583 --> 00:05:55,625
started looking at the actual
devices. The first guy here is
-- it's a printer. Okay, so we

56
00:05:55,625 --> 00:06:01,625
have this network all-in-one
photo, scanner, printer whatever
thing. It's running Linux,

57
00:06:05,500 --> 00:06:08,958
everyone is running Linux. So,
what to do with this guy here?
So, if we take a look there's --

58
00:06:08,958 --> 00:06:16,667
here's a board shot. So,
throughout the presentation we
will show you board shots along

59
00:06:16,667 --> 00:06:21,500
with the place on the board
where you can see the ports
accessible. If you look off to

60
00:06:21,500 --> 00:06:28,083
the left here, you can see where
we solder on these four wires to
the UR port and you can see it

61
00:06:28,083 --> 00:06:35,333
has that classic, you know, four
pins in a row arrangement. So,
right there is our UR. Okay,

62
00:06:35,333 --> 00:06:41,792
awesome. What can we do with
that? Well, when we turn the
printer on and have the UR

63
00:06:41,792 --> 00:06:47,792
connected, the printer gives
this cool console menu, okay.
You know, it's got useful things

64
00:06:50,833 --> 00:06:57,875
like, reboot the printer, reset
the settings or run arbitrary
shell command. [Laughter] So,

65
00:06:57,875 --> 00:07:03,875
there we go. We didn't have to
do anything. We got the shell
there. With that shell -- run

66
00:07:05,917 --> 00:07:10,625
shell command we can run
whatever command we want and
then we can go have fun playing

67
00:07:10,625 --> 00:07:16,625
with our printer. The Belkin
WeMo is Internet connected wall
plug, basically you can use your

68
00:07:19,042 --> 00:07:26,583
phone to turn things like, a
coffee maker on and off. It's,
it's been wildly exploited by

69
00:07:26,583 --> 00:07:32,583
various people and, yeah, it's a
tiny fun little device. So,
pulling this open, you know -- a

70
00:07:35,667 --> 00:07:40,333
little hard to read there but
often the -- off to the left of
center, you can see the transmit

71
00:07:40,333 --> 00:07:46,333
and receive pins there. Once we
hook up a UR to that, what do we
get? Well, the Internet tells us

72
00:07:48,458 --> 00:07:54,750
that, you know, it's batch they
can fix that. It turns out that,
no. They didn't quite get that.

73
00:07:54,750 --> 00:08:02,500
So, during recovery you actually
have two seconds to insert a
command. Okay, so what do we do

74
00:08:02,500 --> 00:08:07,792
about that? We can just run this
single command down here at the
bottom. It kills the scrip that

75
00:08:07,792 --> 00:08:14,375
reboots it and then there you
go. We're running this root in
recovery. We can do what we

76
00:08:14,375 --> 00:08:20,375
want. Cool. So, this is a fun
little embedded device. It is
just a gateway thing that

77
00:08:24,917 --> 00:08:28,917
controls smart light bulbs. Um,
kind of, kind of like the
Phillips view if you've seen

78
00:08:28,917 --> 00:08:36,208
that. It uses ZigBee. ZigBee is
a pretty popular protocol that
we've seen in these things. I

79
00:08:36,208 --> 00:08:41,667
know there's been lots of great
talks about ZigBee here already.
Um, so, yeah, this thing is kind

80
00:08:41,667 --> 00:08:45,875
of fun. It just has a power PC.
Who uses power PC these days?
You know Apple hasn't done that

81
00:08:45,875 --> 00:08:53,250
for -- who knows how long. It
provides an SSH server when you
run this thing. But we don't

82
00:08:53,250 --> 00:08:59,250
have credentials for that. Okay,
too bad. What else can we do?
UR. So, look at the board you

83
00:09:02,458 --> 00:09:06,958
can see those cool little test
points down there at the bottom,
the, uh, red arrows. There's the

84
00:09:06,958 --> 00:09:12,417
transmit, there's the receive.
The, uh -- it's really fun
trying to find these things.

85
00:09:12,417 --> 00:09:16,958
Because they always king of just
standout. You're saying, what is
this? Plug in your multimedia,

86
00:09:16,958 --> 00:09:21,208
plug in your scope connect to it
and see, is there stuff coming
out of here? Can I do anything

87
00:09:21,208 --> 00:09:27,208
with it? So, cool. We have the
UR here and it has U-Boot on it.
It has you without settings

88
00:09:30,750 --> 00:09:35,917
changed on it's just U-Boot.
What is U-Boot? The U-Boot is
the boot loader that lets us

89
00:09:35,917 --> 00:09:41,917
load and run Linux. So, we can
talk to the boot loader now we
can do anything. We can re-flash

90
00:09:45,125 --> 00:09:49,583
the device, we can change the
kernel command line. What is
changing the kernel line let us

91
00:09:49,583 --> 00:09:55,583
do? When booting Linux you can
provide it with a bunch of
options. You know, how much

92
00:09:55,583 --> 00:10:00,167
memory does this device have?
What port do I want my serial
dongle on? What is the first

93
00:10:00,167 --> 00:10:05,750
program I want you the run once
you've loaded that file system?
So the end argument, you can

94
00:10:05,750 --> 00:10:11,750
pass BNSH to that. What does
that do? It responds the shell
as route. Cool. Really easy way

95
00:10:14,167 --> 00:10:19,083
to get past all of the various
other initialization scripts
that might lock settings down

96
00:10:19,083 --> 00:10:24,708
and not provide consoles. It
skips all that goes right into a
route shell and then we can do

97
00:10:24,708 --> 00:10:30,417
whatever it is we want. It turns
out the thing that we want it to
do is crack the route password.

98
00:10:30,417 --> 00:10:36,417
So, we grabbed that password
instant green it's good stuff.
The file transporter. Another

99
00:10:41,417 --> 00:10:45,375
device that came out recently.
It's kind of neat. It's
basically a cloud-mass sort of.

100
00:10:45,375 --> 00:10:51,375
You have this device it had this
big'o hard drive in it, leave it
on your home network. Through

101
00:10:55,917 --> 00:11:03,042
their service, you can connect
back to your home device and
then access your files. Great.

102
00:11:03,042 --> 00:11:09,125
So, you know pretty standard
kind of device it's running
Linux running ARM builder grace

103
00:11:09,125 --> 00:11:14,458
user land which is a fun thing
that we haven't as much of these
days. Builder it's awesome for

104
00:11:14,458 --> 00:11:21,542
those of you who played with the
WRT54G back in the day. Lots of
fun there. So pull this thing

105
00:11:21,542 --> 00:11:27,542
open -- oh, hey look at that
they even gave us a header.
Often we find that there are

106
00:11:30,375 --> 00:11:38,208
headers in devices, but they are
not populated. In this case, it
was populated. So, again, we

107
00:11:38,208 --> 00:11:45,375
have a U-Boot shell available.
Which lets us change the kernel
command line again and get that

108
00:11:45,375 --> 00:11:51,375
route shell and do whatever we
want to with this device. Which
is awesome. The co-star LT. It

109
00:11:54,708 --> 00:12:00,250
is the successor to the video
co-star. Which was a Google TV.
This is no longer a Google TV,

110
00:12:00,250 --> 00:12:06,250
which is funny we don't even
hack Google TV's anymore. So
ignore the arrow the arrow you

111
00:12:09,042 --> 00:12:13,333
don't want to look at the arrow.
You want to look at the little
red and white text on the top

112
00:12:13,333 --> 00:12:19,333
left there. There is the classic
four pins in a row layout. You
can see the transmit there. So

113
00:12:22,625 --> 00:12:28,625
this is a fun one. Because when
we first turned it on, you know,
we saw three lines of the output

114
00:12:30,667 --> 00:12:35,292
from the UR. It's basically
saying, hello, it's the kernel,
okay, external. That is it.

115
00:12:35,292 --> 00:12:42,625
Nothing. Okay. That was weird.
At some point we left the flash
drive plugged in. And said, oh,

116
00:12:42,625 --> 00:12:50,125
I don't understand the file
system on the flash device. What
do we do now? Try 532. So format

117
00:12:50,125 --> 00:12:57,458
is 532, and plug it in and try
it. What do we get? Hey, I can't
find FS dot SIS. Okay, that is

118
00:12:57,458 --> 00:13:03,667
really suspicious. So we did a
little bit of research into
this, and turns out that FS dot

119
00:13:03,667 --> 00:13:09,667
SIS is a U-Boot script image
file. Which is a file that
U-Boot will load and execute

120
00:13:12,375 --> 00:13:18,375
arbitrary commands from. Cool.
So we can then use the same
tricks we used with the previous

121
00:13:21,083 --> 00:13:27,250
U-Boot hacks and modify that and
make the argument with the
kernel again. And with that we

122
00:13:27,250 --> 00:13:33,958
can get root. Along with FS dot
SIS there's this safe kernel dot
image one. We can use this to

123
00:13:33,958 --> 00:13:37,625
boot an actual complete
different kernel just from the
USB flash drive we just plugged

124
00:13:37,625 --> 00:13:43,625
in. Awesome. The stables connect
is just another small home
automation. It's rebranded OEM

125
00:13:45,667 --> 00:13:51,667
hardware. We have seen a lot of
this stuff. It has WiFi, it has
a USB port for plugging in your

126
00:13:56,333 --> 00:14:04,125
hard drives, whatever. What do
we have here? Hey, look it's a
header. Look, there are receive

127
00:14:04,125 --> 00:14:10,333
and transmit pin on it. Sweet.
What does that get us? Well, it
got us a restricted U-Boot

128
00:14:10,333 --> 00:14:16,333
environment. So what do we do
here? Well, the obvious answer,
if we short out pins 29 and 30

129
00:14:20,750 --> 00:14:23,833
on man chip to ground while it
is booting. The U-Boot is
saying, uh-huh, and resets

130
00:14:23,833 --> 00:14:25,833
everything and, uh, there we go.
We can actually just type
commands into the U-Boot console

131
00:14:25,833 --> 00:14:33,208
again. So after we reset all of
the various properties and
commands. We can just get route

132
00:14:33,208 --> 00:14:40,500
on there and congratulations we
have now rooted this. We can
also crack the password for this

133
00:14:40,500 --> 00:14:46,750
one. This was not a very hard
password to crack. But it is
useful to know that. At this

134
00:14:46,750 --> 00:14:53,958
point, I would like to introduce
CJ. [Applause] >> All right. So
I'm going to talk to you as he

135
00:14:53,958 --> 00:14:59,958
pointed EMC flash is pretty much
an SD card on a chip. The
thought was that you can take an

136
00:15:19,375 --> 00:15:24,542
SD card, put it on a chip and
not have to worry about any
extra magical bits. A flash will

137
00:15:24,542 --> 00:15:31,458
have extra bits that handles
error correcting code stuff. So
drop the flash on there and then

138
00:15:31,458 --> 00:15:38,542
you can ahead and use a normal
file system, access it like an
SD card everything just supports

139
00:15:38,542 --> 00:15:44,542
it, it is great. And hacking
wise, usually you can get into
it rather cheap readers. Which

140
00:15:47,708 --> 00:15:53,583
we are giving a few away,
totally free. We have, um, since
EMC is pretty much compatible

141
00:15:53,583 --> 00:15:59,583
with SD cards many EMC readers
can be used. If you're looking
for -- figure out -- you know,

142
00:16:01,750 --> 00:16:09,292
you have EMC flash. It's BGA.
You need pins to find it. So the
thought is, how do I do that?

143
00:16:09,292 --> 00:16:15,583
You can first look at it by
resistance. Furthermore, you can
talk about the board design.

144
00:16:15,583 --> 00:16:19,500
Sometimes things will be
labeled. You will see resister
numbers and figure out

145
00:16:19,500 --> 00:16:24,250
increments and whatnot. Also,
the command lines and the cock
lines tend to be on one side of

146
00:16:24,250 --> 00:16:31,583
the flash while the data line on
the other. And if has doesn't
work hook it up. If that doesn't

147
00:16:31,583 --> 00:16:37,583
work, then you pull the chip and
trace it. Which is what we did
with the Amazon. For that

148
00:16:43,833 --> 00:16:50,917
picture, although small is a BJ
flash pulled and wired up to an
EMC reader so we could get a

149
00:16:50,917 --> 00:16:56,917
dump. But speaking of the fire
TV. As we know, this is our
device number seven. It's a snap

150
00:17:00,833 --> 00:17:06,833
dragon. Which is just a modified
-- well heavily modified
android. So EMC on the left. Uh,

151
00:17:09,000 --> 00:17:16,125
two boxes, my first box I found
the pinup, I couldn't get it to
work. So got a second box,

152
00:17:16,125 --> 00:17:20,500
pulled the flash, realized, no,
I was right. But somehow in the
process killed the first time.

153
00:17:20,500 --> 00:17:25,833
So third time is the charm got
it, rooted it, it's fine, it's
great. It is on the Wiki

154
00:17:25,833 --> 00:17:31,708
GC22.GTVhacker.com and on the
right we have UR pin up, not a
lot of information. So moving on

155
00:17:31,708 --> 00:17:37,708
with the EMC. We have the high
sense android TV. It's a Google
TV, sort of, they rebranded it

156
00:17:41,500 --> 00:17:47,000
to kind of lose the stigma. Uses
a slightly newer processor. Last
year at DEF CON, we demonstrated

157
00:17:47,000 --> 00:17:53,333
how to bypass. It was a nice
little bug. But moving on with
this high sense, which is a

158
00:17:53,333 --> 00:17:59,333
quadco CPU used Android 4.2.2.
We bring up the EMC again. So
pinups, we have pinups. Data

159
00:18:04,083 --> 00:18:10,208
zero for a data line. Command
clock ground and power. That's
all that you need. Usually easy

160
00:18:10,208 --> 00:18:16,667
to solve the two. The resistors
are small but you're not pulling
the flash. With a high sense

161
00:18:16,667 --> 00:18:21,583
Google TV pretty much what you
do is mount the factory setting
partition. Which, um, by the

162
00:18:21,583 --> 00:18:27,833
system is mounted with no
printers. So no, no SUIG no, no,
you can pretty much dump

163
00:18:27,833 --> 00:18:33,000
whatever you want on there and
fund it as a non-user. So wire
it up, bounce, bounce factory

164
00:18:33,000 --> 00:18:37,125
setting partition which contains
a bunch of DRM stuff. Which
usually you don't touch it.

165
00:18:37,125 --> 00:18:44,083
Which is good for persistence.
Giving it a good the command you
get to execute through ADB and

166
00:18:44,083 --> 00:18:49,000
just elevate it. You could also
modify system, which pretty much
holds the general or less and

167
00:18:49,000 --> 00:18:55,000
then put on super SU, but I like
a normal, you know, static SU
binary. Moving forward never say

168
00:18:59,833 --> 00:19:05,167
something has never been hacked.
In 2011, the post office put out
an ad stating that a

169
00:19:05,167 --> 00:19:08,875
refrigerator has never been
hacked. I didn't have the room
or the --pretty much the reason

170
00:19:08,875 --> 00:19:12,125
to spend $3,000 on a
refrigerator. So finally got to
do the second best thing, buy

171
00:19:12,125 --> 00:19:18,125
parts for the refrigerator. Into
the LG smart fridge. Runs
Android 2.3. Which is a bit old,

172
00:19:26,833 --> 00:19:31,458
but, okay. Its brains of the
fridge it controls ice,
compressor, water pretty much

173
00:19:31,458 --> 00:19:37,542
everything. Normal usage you
would use it to track groceries
or say I drank this much water

174
00:19:37,542 --> 00:19:43,542
today. It has WiFi, USB and an
SD card. So the first thought
pull it open. Again, big

175
00:19:46,958 --> 00:19:52,958
pictures on the Wiki. So what we
did instead, went through AMC.
You got to go the hardware. You

176
00:19:58,125 --> 00:20:05,833
go to AMC and mount system as
with the fire TV what we did
instead, we pushed a normal

177
00:20:05,833 --> 00:20:11,833
android launcher when the system
boots up, it asks you what
launcher. You can start the

178
00:20:13,875 --> 00:20:16,917
normal 1 and then run your own
apps with ease. Since we booted
the council, the skill was zero,

179
00:20:16,917 --> 00:20:22,917
that meant they didn't even try.
Now moving on. The hardware
stuff into command injection.

180
00:20:33,458 --> 00:20:40,708
So, just a heads up. User input
cannot be trusted. Do not use
shell commands in your ZIP code.

181
00:20:40,708 --> 00:20:48,000
Again, never ever trust user
input. If you do, please escape
your commands. This counts to

182
00:20:48,000 --> 00:20:55,208
system as well. You are seeing
manufacturers that will put in
an LS and then pull variable S

183
00:20:55,208 --> 00:20:59,000
into the system and then say I
passed into the variable. It
will execute LS semicolon that

184
00:20:59,000 --> 00:21:02,208
tells us let's execute a new
command. That will happen at
route. So a perfect demo of

185
00:21:02,208 --> 00:21:08,208
that. A series of VIZIO smart
TVs It is a little bit old, but
still widely available. And full

186
00:21:21,458 --> 00:21:27,458
-- has life -- um, the smartness
could be better. Again, it is a
little bit old. TV is nice and

187
00:21:29,792 --> 00:21:35,000
thick. So there is a command
injection with the WiFi
password. You go to menu and

188
00:21:35,000 --> 00:21:41,000
network and select WiFi. If you
type in these commands, which I
will explain in a moment, you

189
00:21:43,333 --> 00:21:50,708
can have route over UR. So
pretty much what we do is take
USB run, which we are some to

190
00:21:50,708 --> 00:21:56,375
give away very soon. And enter
the first command, which makes
it a character note, that pretty

191
00:21:56,375 --> 00:22:02,458
much tells the colonel where to
send the data to where we want
to. You have a major and minor

192
00:22:02,458 --> 00:22:08,458
and runs the data properly. Give
it a minute or two, it will
error out. And takes the input

193
00:22:13,292 --> 00:22:20,042
and sends it to the shell, and
everything from the shell to the
character device. Which is

194
00:22:20,042 --> 00:22:26,042
great. We have route over USB.
So that is device 10. Moving to
device 11. The Sony Blu-Ray

195
00:22:29,250 --> 00:22:35,250
player. It is a Blu-Ray player.
It runs Linux. WiFi, Netflix,
vudo, smart apps. Keep that in

196
00:22:40,125 --> 00:22:47,125
mind for a second. Next up we
have the LG Blu-Ray player. It a
Blu-Ray player with the same

197
00:22:47,125 --> 00:22:53,125
chip set. They are pretty
similar. And we found there is
actual a bug in the supply

198
00:22:56,125 --> 00:23:01,083
packages from the major
manufacturers that effects many
players possibly many more than

199
00:23:01,083 --> 00:23:06,250
this. If you put a TXT on the
drive in a folder called voodoo
and a file SH, at the comment --

200
00:23:06,250 --> 00:23:12,250
commands in that overrides the
password. We didn't want to
crack it, just zeros it out. You

201
00:23:19,375 --> 00:23:25,375
press voodoo and you get it on
many players with the same chip
set, such as the next one, the

202
00:23:32,833 --> 00:23:38,833
Panasonic EDT230. But that is
easy. We found another one on
this, just because. So picture

203
00:23:42,208 --> 00:23:49,625
the board. We have UR -- that
was rather important for us in
figuring out this bug. At times

204
00:23:49,625 --> 00:23:55,833
the debugging output comes
across the pins you would not
normally see. We are able to see

205
00:23:55,833 --> 00:24:01,833
it there. There was a command
injection in the network folder
name. So timing in a command,

206
00:24:05,000 --> 00:24:12,375
which we only noticed because of
the UR. We were able to inject
commands in. So now I will hand

207
00:24:12,375 --> 00:24:18,375
it off. >> Thanks, C.J. So next
up is the Motorola raiser. I'm
not going to talk about android.

208
00:24:28,708 --> 00:24:34,708
This is an isolated processor
separate from android. So the
communication between android

209
00:24:38,292 --> 00:24:44,292
and the base is done over a USB
network connection. The base ban
listens on the USB network port

210
00:24:49,333 --> 00:24:55,333
of, runs a diagnostic script and
it runs that diagnostic scripts
a root. Now, if you actually go

211
00:24:59,458 --> 00:25:05,458
and you look at the script, the
running -- a busy box command,
typing the file name through us.

212
00:25:07,792 --> 00:25:15,500
This means that using the file
name we can do an injection. So
if we have the file name that

213
00:25:15,500 --> 00:25:21,500
contains the, this X01 system we
can inject any command that we
want and run it as root. So next

214
00:25:28,917 --> 00:25:34,917
up we're going to talk about the
polo plug mobile. This is a
cloud storage device. Also a

215
00:25:36,958 --> 00:25:42,958
NAZ. You can plug in a USB
drive. We have a UR on it. This
gives us access to the boot

216
00:25:47,208 --> 00:25:53,208
logger and the root shell, but
we also have a command line
injection using the web page. If

217
00:25:55,250 --> 00:26:01,250
you go to the SQ plug page and
you add an action command, you
can inject arbitrary commands.

218
00:26:07,542 --> 00:26:13,542
They all runs a root. So if we
move onto the net gear push to
TV. This is a set top box. We

219
00:26:23,750 --> 00:26:29,750
have the UR pins and through the
UR we can interrupt the boot
loader and through the boot

220
00:26:33,000 --> 00:26:40,667
loader we can also control the
Linux and run our own commands
using the same injection that we

221
00:26:40,667 --> 00:26:46,417
talked about earlier. Now, if
you happen to miss the boot
loader, you can also run

222
00:26:46,417 --> 00:26:53,958
commands using the root shell
for a few seconds. And we also
have command line injunction via

223
00:26:53,958 --> 00:26:59,958
the web interface. You set the
nickname of the box, that is
root. So semicolon, whatever.

224
00:27:05,667 --> 00:27:11,542
And you can make this persistent
if you want. You can mess around
with the SDI. You is set the

225
00:27:11,542 --> 00:27:17,542
default you boot environment
variable. Set whatever you want
to run at you boot the next

226
00:27:21,125 --> 00:27:27,125
level. So moving on, we have the
OMOTELO. This is a voice router.
It is running open WRT. And we

227
00:27:35,417 --> 00:27:41,417
have a UR again, this is using
console login, but we are
talking about command injection.

228
00:27:45,333 --> 00:27:51,333
So they already have the SSH
running. It is just firewalled
by default. So what we need to

229
00:27:53,458 --> 00:27:59,458
do is to inject a command to
change the firewall rules. And
we do this using the web

230
00:28:02,958 --> 00:28:08,333
interface, we can inject
whatever commands we want and
we're, we're going to show you

231
00:28:08,333 --> 00:28:14,333
on the next slide the actual
command, but we want to point
out the default root password is

232
00:28:16,667 --> 00:28:22,667
the exclamation mark. We had
fun, we dumped the file and
started a cracker. The default

233
00:28:28,667 --> 00:28:34,667
SSH is only available on the
LAN. There is no risk there.
This is the web interface. If

234
00:28:36,750 --> 00:28:44,542
you look at the arrow there, we
are pointing at the command. If
you type in the command with the

235
00:28:44,542 --> 00:28:50,542
IP tables rule, that gives you
access to the SSH. You can use
the password that I just gave.

236
00:28:55,458 --> 00:29:03,458
So next up we have the Net gear.
This is the media device. It is
flash-based. So everything is in

237
00:29:03,458 --> 00:29:09,458
SWF file. This is a secure broad
com SOC with encrypted updates.
So early on this box is signed

238
00:29:17,917 --> 00:29:25,250
so let's take a quick look at
the UR. Again, this gives us
access to some things but we're

239
00:29:25,250 --> 00:29:31,250
going to talk about the command
line, or the injection via the
web interface. So when it

240
00:29:33,542 --> 00:29:39,542
downloads an update, the updates
are downloaded over HTTP. This
is a really bad idea. So if I

241
00:29:44,500 --> 00:29:50,500
pull down one of the apps, pull
it open, I can inject a
malicious link and traverse the

242
00:29:53,333 --> 00:30:00,917
file system and dump files
anywhere on the file system. So
if I repack the app, put a man

243
00:30:00,917 --> 00:30:06,917
in the middle, and my version of
the app using the update, I can
drop a root shell. So moving on.

244
00:30:13,167 --> 00:30:20,625
We have the HSQ. We are also
hacked this previously. We had
an app available on to play

245
00:30:20,625 --> 00:30:27,333
store. Unfortunately Google
pulled it. They don't like these
apps. Let's talk about how to

246
00:30:27,333 --> 00:30:33,333
get back in. If we mound a SMB
share. We get the permissions of
the SMB share. We need to set up

247
00:30:39,958 --> 00:30:45,958
the SMB share with the SU binary
and we set the bit. We can get
into the queue, run the binary

248
00:30:51,625 --> 00:30:57,625
and we get root. So now I'm
going to hand off to Amir.
[Applause] >> Thank you, Mike.

249
00:31:04,833 --> 00:31:09,708
So let's, let's start having
some more fun. Let's get more
interesting devices here. I'm

250
00:31:09,708 --> 00:31:15,708
going it talk about the summer
baby zoom WiFi. So what this is,
it is WiFi baby monitor, and

251
00:31:17,875 --> 00:31:23,875
custom RF and marketed as a
secure baby monitoring device.
We always look at the UR. Here

252
00:31:27,875 --> 00:31:33,875
is the UR connect. It is a
little bit hard to read. Again,
go to our website after the

253
00:31:37,750 --> 00:31:43,750
presentation. This actual bug
the first bug, they have
hardcoded user name and password

254
00:31:45,833 --> 00:31:51,833
on the device that the binary
uses to communicate with the web
interface. Now, you know, this

255
00:31:53,833 --> 00:32:00,917
is a terrible practice. From a
secure standpoint you don't want
to hard code credentials in

256
00:32:00,917 --> 00:32:06,917
every single place. So if you
can see below the credentials
are leak, speak, MS admin and

257
00:32:11,542 --> 00:32:19,083
authenticate is the password. So
let's get into the hard coded
user name and password. If you

258
00:32:19,083 --> 00:32:25,083
call this, you can see it lists
three users. Two of which have
different user rights and then

259
00:32:27,292 --> 00:32:33,292
the hard coded user name and
password has admin and the
snapped admin the one with

260
00:32:36,083 --> 00:32:42,083
specific password that changes
with the device. So let's get
into command execution on this

261
00:32:46,625 --> 00:32:52,625
device. The passwords are cool,
but command execution we want to
look for. So system GT is a

262
00:32:56,417 --> 00:33:02,417
binary that is accessible and
uses SSH and a post if executed
with system as root. If you can

263
00:33:07,625 --> 00:33:13,625
see below we gave an example how
you can make a call. Every time
you enable a Telnet server,

264
00:33:17,750 --> 00:33:23,208
remember most cases it is
probably not going to be
password protected unless you

265
00:33:23,208 --> 00:33:26,750
are passing like a dash L slash
login, that tells someone to
connect to the device to run

266
00:33:26,750 --> 00:33:32,750
slash login. Normally we do dash
LH, so it drops you a root
shell. Don't leave that open.

267
00:33:41,125 --> 00:33:47,125
You don't want people connecting
to your device. Let's be safe
here. So 20 devices. That's cool

268
00:33:49,792 --> 00:33:55,792
and all, but this is DEF CON 22.
We want to take it one step
further. So why not 22 devices?

269
00:34:01,625 --> 00:34:09,458
[Laughter] So we figured and
actually, this was a, it was a
lot of work to come up with 20

270
00:34:09,458 --> 00:34:16,250
devices to hack. And more work
to get 22 done in the period of
time before the conference. So

271
00:34:16,250 --> 00:34:23,375
let's get into the next one. The
next item on our list is the
Samsung smart cam. This is

272
00:34:23,375 --> 00:34:27,083
similar to the summer WiFi baby
zoom pro, but just a standalone
camera. Doesn't have a handle or

273
00:34:27,083 --> 00:34:31,875
a monitor, doesn't pan and tilt.
It is just a network camera with
a speaker and a microphone. It

274
00:34:31,875 --> 00:34:37,875
has a web interface and a mobile
phone for remote access. Yeah.
So let's get into the UR

275
00:34:47,583 --> 00:34:53,375
adapter. Again, you can say a
populated pin header. And we
note the bad settings and the

276
00:34:53,375 --> 00:34:59,375
connection settings at the
bottom. And it only does console
logging. So it is rather

277
00:35:03,917 --> 00:35:10,958
interesting. We found this guy
after looking at how this
process logins and creating the

278
00:35:10,958 --> 00:35:16,958
original administrator password.
You first setup the device. They
don't look at the password is

279
00:35:22,500 --> 00:35:27,875
set. You can call the script to
change the password on an
administrator password that is

280
00:35:27,875 --> 00:35:33,875
already setup. So you know, it's
a nasty bug. So the script does
the odd check, not on the new

281
00:35:41,083 --> 00:35:46,958
user. This is only accessible
over the LAN. So command
injunction on this particular

282
00:35:46,958 --> 00:35:53,417
thing. Now, they, they set up a
wireless, wireless settings for
your wireless network at home,

283
00:35:53,417 --> 00:35:59,417
and even set up a WPA2, WPA or
open network. With the WEP, it
is put into a config file and

284
00:36:04,958 --> 00:36:12,208
pulled out a little bit later
and pulled out and stored into a
command. You get command

285
00:36:12,208 --> 00:36:18,208
injunction by inputting a shell
-- escape command into the WEP
key. It can be exploited without

286
00:36:24,458 --> 00:36:30,833
physical access to the device.
How it works is in order for the
bug to get triggered, you setup

287
00:36:30,833 --> 00:36:36,583
your WEP key with the malicious
string, and to get it to do the
connection, you have to unplug

288
00:36:36,583 --> 00:36:42,375
the network cable, unless it is
connected over WiFi. If it is
connected over WiFi and you

289
00:36:42,375 --> 00:36:48,375
change the WEP key, it could
disconnect you, and you could
lose access. You know, it's --

290
00:36:52,667 --> 00:36:57,583
it means the physical access
essentially to trigger. The more
things the web interface runs as

291
00:36:57,583 --> 00:37:05,250
root. So root command injunction
by changing the web key. In this
particular screen shot. We show

292
00:37:05,250 --> 00:37:12,042
where the command injection
occurs and do an example of
enabling the root shell. I

293
00:37:12,042 --> 00:37:17,458
mentioned earlier, SL tells us
to pass new connections over to
SL/. So this is another one that

294
00:37:17,458 --> 00:37:23,458
you don't want to do and leave
running on your camera, unless
you add another user. So that's

295
00:37:33,583 --> 00:37:38,667
the route on that device. That's
our 21st. I'm really excited to
tell you guys about the 22nd.

296
00:37:38,667 --> 00:37:44,667
Mostly because I see so much
potential in this device. Mostly
for us hackers. This device is

297
00:37:46,792 --> 00:37:52,792
called the wink hub. I really
like this device, mostly because
of the peripheral it has, it has

298
00:37:57,833 --> 00:38:03,833
a Bluetooth, chip set, and a
TICC1101RFSDR and it, you know,
with little of work it could be

299
00:38:11,125 --> 00:38:17,125
a good RF toolkit for the
hackers. This is a home
automation gateway, it

300
00:38:19,875 --> 00:38:27,167
interactions with setup APIs and
has all of the communication
methods so it can contact your

301
00:38:27,167 --> 00:38:33,500
devices and have their on-line
of devices from a prone pain
gauge, to humidity, light, and

302
00:38:33,500 --> 00:38:39,500
motion sensing and smart locks.
So the thing about the device.
We will get to the information

303
00:38:43,750 --> 00:38:49,750
in a second. So this is the
board. It is a pretty board.
Everything is compartmentalized.

304
00:38:52,667 --> 00:38:58,625
It is broken out. The other
thing about this device, it is
under $50 device. There are

305
00:38:58,625 --> 00:39:03,875
deals where if you buy
peripherals you can get it for
free. If you are interested in

306
00:39:03,875 --> 00:39:09,875
RI stuff, this is a cool board.
It has five antenna, it gives
you the ability to communicate

307
00:39:15,250 --> 00:39:21,250
with every snort device you can
think of, if there is API
available and wink has chosen to

308
00:39:23,542 --> 00:39:29,542
support it. So the wink hub has
a command injection bug. If you
-- don't read PHP, or know PHP.

309
00:39:34,542 --> 00:39:41,708
You can see there is a pseudo
command that takes in a note ID
and an attribute ID passed in by

310
00:39:41,708 --> 00:39:47,708
the variable. This goes through
the password, and then it is
pushed in past the output of the

311
00:39:50,125 --> 00:39:56,125
command. So really cool. Take it
home, go buy one. You can root
it and have a lot of fun. Now,

312
00:39:58,292 --> 00:40:06,042
probably what you guys have been
waiting for. Let's get dual core
up here for a little, a little

313
00:40:06,042 --> 00:40:12,042
fun. [Applause] >> Got it.
Anyone? [Laughter] I can tackle
things, but it will not turn out

314
00:40:27,417 --> 00:40:33,417
well, I promise you. [Laughter]
Okay. Sweet. Come on, buddy.
Okay. Good times. Just play. It

315
00:41:01,125 --> 00:41:07,125
doesn't seem like fun. We have a
light show and fun. Okay. I see
him -- let's welcome M80 to the

316
00:41:10,000 --> 00:41:16,000
show. Come on, guys. Look at him
run. That's a dedicated rapper
right there. Thanks, buddy you

317
00:41:20,375 --> 00:41:26,375
saved me. Okay. >> Rap music and
rap music accessories. >> So
while, while he's rapping we're

318
00:41:28,833 --> 00:41:34,833
going to walk around and handout
adapters and dual core CDs, and
chrome cast, and adapters, we

319
00:41:38,375 --> 00:41:43,750
have roughly UR adapters a lot
of fun. Cool lights. There is a
lot of fun, guys. This is the

320
00:41:43,750 --> 00:41:49,750
party track. Let's make it rain.
[Applause] >> Please make noise
for the hackers hacking all of

321
00:42:22,792 --> 00:42:28,792
the things. [Applause] Now to be
honest that is a cheap ploy to
catch my breath. My name is M80.

322
00:42:36,375 --> 00:42:42,375
You might have heard our songs.
I want to give a shout-out
really quick. Anyone here hack

323
00:42:45,125 --> 00:42:51,125
cars? Cool. My friend published
the car hackers' handbook. You
can download it on-line and buy

324
00:42:53,583 --> 00:42:59,583
it on Amazon. I have a couple of
copies in my booth in the vendor
air. If you have cars, come talk

325
00:43:05,167 --> 00:43:11,167
to me about car hacking shit.
All right. I'm going to do rap
music. Probably run out of death

326
00:43:15,625 --> 00:43:21,000
and die. And I get you guys to
officially DJ, like my DJ does,
and hit the space bar to start

327
00:43:21,000 --> 00:43:27,000
the song. >> Ready for this?
Tell me when. >> All right.
Count it down. One, two, wait,

328
00:43:29,833 --> 00:43:36,458
what comes after two? [Music] >>
I'm going to take the booth. You
guys yell, hack all the things.

329
00:43:36,458 --> 00:43:42,458
Whoa, given up, a disaster
recovery. Proof it on my C64,
and fluid into orbit. With eight

330
00:43:48,417 --> 00:43:54,417
straight perfect. The motion
make circuits, the case you
heard, the namesake service,

331
00:43:57,583 --> 00:44:03,583
optimize the run time, because
then it just flows the code. So
before it is after, there is a

332
00:44:10,958 --> 00:44:16,958
rapper, with humans, the theme
that destroyed recapture. Finish
this chapter, we're not anything

333
00:44:20,792 --> 00:44:26,792
to hack into NASA. We drink all
the booze. Drink all the booze.
Drink all the booze. So we drink

334
00:44:34,875 --> 00:44:40,875
all the booze. Drink all the
booze. Drink all the booze. 0 to
3, running every single day. I'm

335
00:44:46,500 --> 00:44:51,917
just waiting until my blackberry
dies. I will replace it with a
raspberry pie. Instead they are

336
00:44:51,917 --> 00:44:56,417
at the BX heaven. To the high
stress. Quit school when we hit
X. They didn't run the form. So

337
00:44:56,417 --> 00:45:03,708
we got a print F. The next
check. Crushed Internet MCs,
hacked by pineapple. I don't

338
00:45:03,708 --> 00:45:09,708
think you will like my Snapple,
because I have mine with a
cyanide capsule. Are you guys

339
00:45:37,333 --> 00:45:43,333
ready to hack? Here we go. We
drink all the booze. We drink
all the booze. We drink all the

340
00:45:45,958 --> 00:45:52,375
booze. Everybody so we drink all
the booze. Drink all the booze.
Drink all the booze. First we

341
00:45:52,375 --> 00:45:58,375
drink all the booze, than hack
all the things. Hardware,
service or encoded. Connected to

342
00:46:01,750 --> 00:46:07,750
the Internet, someone is going
to own it. This is for the
pirates, around, dragging you

343
00:46:14,542 --> 00:46:20,542
down. Hack on -- the challenges
devices on-line, you know the
challenges, so undercover, this

344
00:46:26,542 --> 00:46:32,542
is what we're doing with the
burger. No. I think I need to
earn one of my burns. Drink all

345
00:46:42,542 --> 00:46:48,542
the booze. Drink all the booze.
Drink all the booze. So we drink
all the booze. Drink all the

346
00:46:57,750 --> 00:47:03,750
booze. Drink all the booze.
Zero, two, three, every single
day. Hack all the things. Yep,

347
00:47:11,125 --> 00:47:17,125
make some noise for the hackers,
guys. [Applause] We did it
without notice and without pay.

348
00:47:27,000 --> 00:47:33,000
He is a great guy. So real
quick, let's go to the slides
again. Where are we add? >> We

349
00:47:41,833 --> 00:47:47,833
got to get out of here, soon. >>
Wow! >> Okay. >> So we're going
to have questions in the Q & A

350
00:47:52,583 --> 00:47:58,583
at the chat lounge and a big
thank you to -- so a big shot
out to DEF CON, and dual core --

351
00:48:04,833 --> 00:48:10,833
we'll have our slides after we
get back to our hotel room. We
can push the switch and Wiki

352
00:48:18,333 --> 00:48:24,333
forms. Go to our blog. And I got
to exercise more. [Laughter]
Follow us on Twitter. We don't

353
00:48:35,125 --> 00:48:39,750
bite. We love hearing from the
community. Thank you, everyone
for having us out. We love you

354
00:48:39,750 --> 00:48:43,833
guys. Thank you again.
[Applause]

