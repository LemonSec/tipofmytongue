1
00:00:00,042 --> 00:00:06,042
>> : So this is abusing software
defined networks, so, yeah, here
we go. [Applause]. >> : Thank

2
00:00:08,417 --> 00:00:14,417
you. I'll try to get this right.
It's very loud this year. You
used to have to pretty much hold

3
00:00:17,750 --> 00:00:25,042
your face right in the mic.
Okay. Thank you first of all for
coming out to the talk today. As

4
00:00:25,042 --> 00:00:31,958
he said, this is abusing
software defined networks. My
name is Gregory Pickett with

5
00:00:31,958 --> 00:00:38,833
Hellfire Security. You don't
have to applaud. A brief
overview of today's talk--what

6
00:00:38,833 --> 00:00:42,333
is it? What is software defined
networking? And some weaknesses
in software defined networking

7
00:00:42,333 --> 00:00:50,083
and how to exploit them. Okay.
And no matter how much fun it is
in breaking things, we are here

8
00:00:50,083 --> 00:00:56,083
also to help. So also I'll tell
you how to fix it. [Applause].
>> : Moving forward obviously we

9
00:00:59,208 --> 00:01:03,917
need to protect, protect it now
as well as for the future. It is
going to be a bit part of what

10
00:01:03,917 --> 00:01:09,208
we do with the network. And then
wrapping up, I will be
introducing a toolkit today to

11
00:01:09,208 --> 00:01:14,458
explore SDN, these particular
controllers, as well as in your
own environment. So I will show

12
00:01:14,458 --> 00:01:20,417
you where to find that, as well
as provide some links to learn
more about software defined

13
00:01:20,417 --> 00:01:26,417
networking. We will start with
-- well, networks as they stand
today. They are very vendor

14
00:01:28,833 --> 00:01:34,208
dependent. You learn a unique
set of skills. You learn the
commands for a particular piece

15
00:01:34,208 --> 00:01:40,292
of hardware that a vendor sells.
There are unique features to
those pieces of equipment we

16
00:01:40,292 --> 00:01:46,250
buy--the switches, the routers,
that we all become dependent
upon. Now these networks are

17
00:01:46,250 --> 00:01:52,000
difficult to scale. We're adding
one box after the other. Right?
Each with its own configuration;

18
00:01:52,000 --> 00:01:57,000
therefore, the network becomes
rather complex rather fast and
prone to break. The

19
00:01:57,000 --> 00:02:03,792
configuration is distributed and
is often an inconsistency each
box has its own unique view of

20
00:02:03,792 --> 00:02:10,292
that network. We make mistakes,
all sorts of things happen, and
they use protocols that, well,

21
00:02:10,292 --> 00:02:15,250
we're not responsible for these
protocols. They were developed,
turned into a standard, and we

22
00:02:15,250 --> 00:02:22,417
have to use them as they are
regardless of how well they work
for us. And the network is also

23
00:02:22,417 --> 00:02:27,542
unable to consider other
factors. Like application needs,
business needs. Can't see

24
00:02:27,542 --> 00:02:34,917
anything outside the bits and
bytes of the flows. Right? And
good luck. Once you have all

25
00:02:34,917 --> 00:02:40,000
this set up, it's rather
brittle. Good luck if you
actually want to actually try to

26
00:02:40,000 --> 00:02:46,333
change it. Enter software
defined networking. The idea is
to separate the control and the

27
00:02:46,333 --> 00:02:52,292
data point. Before any decisions
are made by the controller, you
take the logic off of those

28
00:02:52,292 --> 00:02:56,042
switches and routers. You put it
into a central controller, and
then the switches and routers

29
00:02:56,042 --> 00:03:01,833
just forward packets. Add the
controller with the logic. It's
programmed with the

30
00:03:01,833 --> 00:03:07,750
intelligence. It has full
visibility of the network and
can consider the totality of the

31
00:03:07,750 --> 00:03:13,125
network before making any
decisions to enforce a very
granular and consistent policy

32
00:03:13,125 --> 00:03:19,125
across that entire network. This
leaves the switches as bare
metal only. Any vendor,

33
00:03:21,375 --> 00:03:27,667
hardware, software, it really
doesn't matter. They are truly a
commodity. It solves lots of

34
00:03:27,667 --> 00:03:34,750
problems with commodity
switches. Right? The harbor,
then, is very inexpensive, less

35
00:03:34,750 --> 00:03:40,083
expensive, right? So it reduces
the cost of operating a network.
It solves a lot of problems that

36
00:03:40,083 --> 00:03:46,833
we have with VGP and aspects of
VGP that are lacking. Right? A
lot of neat things you can do.

37
00:03:46,833 --> 00:03:52,417
You could do a maintenance
tryout. You don't have to take a
router out of service, wait for

38
00:03:52,417 --> 00:03:55,958
the registry to calculate and
propagate. You can just steer
the traffic around that router

39
00:03:55,958 --> 00:04:01,708
ahead of time before you do your
maintenance. You can give your
customers the opportunity to

40
00:04:01,708 --> 00:04:06,792
choose where on the network
their packets egress. You get
better security at the right

41
00:04:06,792 --> 00:04:12,708
level, the VGP, because you can
consider other factors such as
reputation before selecting.

42
00:04:12,708 --> 00:04:19,625
Faster Convergence. You don't
have to wait for events to
occur, nodes to detect it,

43
00:04:19,625 --> 00:04:25,125
propagation of routes. You can
just go ahead and tell everyone,
this is now your next hop. And

44
00:04:25,125 --> 00:04:30,250
it also allows for granular
hearing at the internet exchange
points. You don't have to -- we

45
00:04:30,250 --> 00:04:34,125
don't have to be in a situation
of all or nothing. You can
decide what sorts of protocols

46
00:04:34,125 --> 00:04:38,417
you're going to peer over, what
protocols you're going to use to
communicate with your neighbors.

47
00:04:38,417 --> 00:04:44,333
Okay? And it expands our
capability. We can do real world
network slicing of the flow

48
00:04:44,333 --> 00:04:49,500
space. You can take that VLAN
idea and expand that network
wide. We also are able to

49
00:04:49,500 --> 00:04:54,792
expand--can expand from server
load balancing to network load
balancing, gaining a significant

50
00:04:54,792 --> 00:04:59,333
amount of efficiency in the
network. And security--there's
so many things you can do with

51
00:04:59,333 --> 00:05:05,042
security under SDM. Access
control. You can apply your
access control that includes a

52
00:05:05,042 --> 00:05:11,000
lot more than just this host can
talk to this host over these
protocols over these ports. You

53
00:05:11,000 --> 00:05:15,583
can then begin to say, okay,
times a day. You can add a lot
more dimension to it. Adapter

54
00:05:15,583 --> 00:05:19,458
traffic monitoring. You no
longer have to have fixed points
on the network that you are

55
00:05:19,458 --> 00:05:26,042
looking at. You can move your
traffic monitoring around as the
needs -- as needs change. And it

56
00:05:26,042 --> 00:05:29,375
also allows you to program the
network with a bit of
intelligence so that the network

57
00:05:29,375 --> 00:05:33,917
can begin detecting attacks and
engaging in mitigation
automatically. So a lot of

58
00:05:33,917 --> 00:05:41,667
really neat things you can do
with SDN. Now there are some
emerging standards that they

59
00:05:41,667 --> 00:05:47,167
have come up with. Well, not
really come up with. When they
realize after a certain point

60
00:05:47,167 --> 00:05:50,125
that the network gets a little
unwieldy, a little out of
control, and we've kind of known

61
00:05:50,125 --> 00:05:57,833
this for a while, they attempted
to adapt existing protocols to
kind of gain the breadth of

62
00:05:57,833 --> 00:06:02,875
control as well as the
consistency that SDN provides
before I think even SDN was an

63
00:06:02,875 --> 00:06:10,417
idea. So they had SNMP,
extensions of DGP, Netcom list.
But there was always something

64
00:06:10,417 --> 00:06:16,458
lacking. So they went ahead and
designed the protocol from the
ground up and opened flow with a

65
00:06:16,458 --> 00:06:23,250
sister protocol VSDB to
implement SDN from the ground up
considering all the different

66
00:06:23,250 --> 00:06:28,458
factors that might be involved
in it to start over. And that's
what we'll be talking about

67
00:06:28,458 --> 00:06:33,708
today. Open flow. It established
the elements. It establishes
that paradigm with the

68
00:06:33,708 --> 00:06:39,208
controller making all the
decisions, a secure channel for
the controller to talk to the

69
00:06:39,208 --> 00:06:43,958
different forwarding elements
over and defines a forwarding
process at those forwarding

70
00:06:43,958 --> 00:06:48,292
elements and messaging format to
be able to communicate
information back from the

71
00:06:48,292 --> 00:06:55,625
forwarding elements to the
controllers. The forwarding
process. The forwarding element

72
00:06:55,625 --> 00:07:01,000
will check the flow table. If a
match is found, it will carry
out the action. This is very

73
00:07:01,000 --> 00:07:05,167
much like a firewall. If no
match is found, then it sends
the package to the controller.

74
00:07:05,167 --> 00:07:11,375
The controller makes his
decision, referencing policy and
then updates the flow table on

75
00:07:11,375 --> 00:07:16,292
that forwarding element. The
forwarding element has a flow
table. It's basically a set of

76
00:07:16,292 --> 00:07:22,000
match action entries. There are
12 fields available for
matching, and there's wild card

77
00:07:22,000 --> 00:07:26,417
matching available too. So you
can pretty much kill more than
one bird with a single stone.

78
00:07:26,417 --> 00:07:30,542
You don't have to have a single
entry for each type of packet
that you might end up running

79
00:07:30,542 --> 00:07:38,375
across. Graphical representation
of that relationship. Controller
communicating with the, in this

80
00:07:38,375 --> 00:07:43,792
case, an open flow switch with
its flow table over the secure
channel using the open flow

81
00:07:43,792 --> 00:07:48,042
protocol. So this is the
paradigm we will be looking at
today. What these people have

82
00:07:48,042 --> 00:07:55,333
tried to make happen in their
products. All right. So we have
some proprietary controllers.

83
00:07:55,333 --> 00:07:59,708
There are lots of controllers
out there, but these are some of
the leading platforms. Cisco has

84
00:07:59,708 --> 00:08:05,708
some, HP, IBM and of course Open
Source, Nocs, Pocs, RIU, and the
ones we will look at

85
00:08:07,708 --> 00:08:12,750
today--Floodlight and Open
Daylight, specifically because,
well, they're production

86
00:08:12,750 --> 00:08:17,208
capable. They are promoted as
something you want to put in
your network to run your

87
00:08:17,208 --> 00:08:23,208
operations. So we need to know
what we're in for. Okay?
Floodlight is an open source

88
00:08:25,833 --> 00:08:32,250
Java controller. It's primarily
an open flow base controller
supporting version 1.0. It's a

89
00:08:32,250 --> 00:08:37,500
fork from the beacon Java open
flow controller maintained by
big switch networks. So one

90
00:08:37,500 --> 00:08:45,042
outfit is behind this. Open
Daylight is an open source Java
controller with many southbound

91
00:08:45,042 --> 00:08:48,875
actions, including open flow.
And there's a lot of backward
compatibility there with the

92
00:08:48,875 --> 00:08:55,208
other protocols supporting 1.0
and 1.3, and it's also a fork
from the beacon Java open flow

93
00:08:55,208 --> 00:09:00,708
controller, Linux Foundation
collaborative project though by
a lot of companies with their

94
00:09:00,708 --> 00:09:05,125
hands in it--Citrix, Red Had,
Ericsson, Hewlett-Packard, the
rest there, a lot of industry

95
00:09:05,125 --> 00:09:11,125
heavyweights. So we have some
problems. Open flow. We've had
this idea for SDN open flow is

96
00:09:14,042 --> 00:09:17,375
going to do it for us. It's
going to solve those problems,
and it's going to be nothing but

97
00:09:17,375 --> 00:09:21,667
puppy dogs and rainbows. Right?
That's what they always tell us
when they're trying to sell it

98
00:09:21,667 --> 00:09:28,708
to you. Not exactly. That's why
we're here. So there are some
protocol weaknesses. And we'll

99
00:09:28,708 --> 00:09:32,875
start with the protocol, less
serious to the more serious
things. Encryption and

100
00:09:32,875 --> 00:09:39,667
authentication is specified.
It's implemented using TLS, but
it's more of a suggestion than a

101
00:09:39,667 --> 00:09:46,833
requirement. It started out very
good. 1.0 was saying, okay, yes,
TLS. Got to do TLS. 1.4 said,

102
00:09:46,833 --> 00:09:53,833
no, we don't have to do TLS. You
don't have to do TLS. You can do
TCP if you want. And as you know

103
00:09:53,833 --> 00:09:59,500
when give someone the
opportunity to be less secure,
to slack, if you will, they will

104
00:09:59,500 --> 00:10:04,667
do so. And we'll see some
slackers here. So Floodlight
said, ah, we're not going to do

105
00:10:04,667 --> 00:10:09,750
it then. You don't require it?
We're not going to do it. So no
support. Open Daylight is a tad

106
00:10:09,750 --> 00:10:17,042
better than Floodlight. It
separates it, but it's not
required. And the switches.

107
00:10:17,042 --> 00:10:22,750
Switch vendors are kind of a
mixed bag. But you're really in
the same boat. Arista, no. Dell,

108
00:10:22,750 --> 00:10:28,625
no. Stream, yes. There's a
couple yeses in here but a lot
are no. So along with some more

109
00:10:28,625 --> 00:10:34,083
noes here. So you really have a
situation where even if you want
to do TLS based on the makeup of

110
00:10:34,083 --> 00:10:36,958
your controller and your
switches, you may not be able
to. So a large portion of people

111
00:10:36,958 --> 00:10:40,958
wanting to even try to do this
won't be able to do. And what
we've found with these

112
00:10:40,958 --> 00:10:46,542
imitations is that it kind of
left a few things out.
Encryption, yes, of course. It's

113
00:10:46,542 --> 00:10:50,625
TLS. But going through all the
configuration options, you
really don't see anything in

114
00:10:50,625 --> 00:10:55,250
there for certificates. Without
certificates, you can't have
authentication. That means

115
00:10:55,250 --> 00:11:00,250
pretty much anyone and their dog
to use an overused phrase can
talk to this and manipulate it

116
00:11:00,250 --> 00:11:07,250
and attack it, kind of like what
I've done. So, you know, it's a
mixed bag here. So a large

117
00:11:07,250 --> 00:11:12,208
portion of people don't even
have an option because you don't
have a matching of controllers

118
00:11:12,208 --> 00:11:17,417
and switches. And even if you do
get it, you know, really you're
kind of half covered here.

119
00:11:17,417 --> 00:11:23,542
You're really still exposed
there. Now what this can lead
to. For a mass majority or a

120
00:11:23,542 --> 00:11:29,333
vast majority of people using
these products and using the
protocol, information disclosure

121
00:11:29,333 --> 00:11:33,333
through interception and
modifications through man in the
middle. That's a large portion

122
00:11:33,333 --> 00:11:39,750
of the people trying to do open
flow, trying to do SDN, because
they don't have the right match

123
00:11:39,750 --> 00:11:46,542
of equipment. Now everyone
though is going to have an issue
with the service because even if

124
00:11:46,542 --> 00:11:50,625
you are one of the lucky ones
that happens to have a
controller using TLS and a

125
00:11:50,625 --> 00:11:55,458
switch that uses TLS, you can't
change. Once you have your
switches in place, it's not easy

126
00:11:55,458 --> 00:11:59,583
to change over. You're stuck
with it. But let's say you are
lucky and have a switch that

127
00:11:59,583 --> 00:12:04,750
supports it, and you have a
controller that supports it. It
really doesn't matter. No

128
00:12:04,750 --> 00:12:09,125
authentication, so pretty much
everyone across the board is
going to have issues with denial

129
00:12:09,125 --> 00:12:16,083
of service. So speaking of
denial of service nastiness,
open flow. It's about

130
00:12:16,083 --> 00:12:23,500
centralization. Centralization,
well it's dependency. Dependency
can be exploited. So we have to

131
00:12:23,500 --> 00:12:29,500
look at how the vendors are
handling it. Well, Selman looked
at it, looked up Floodlight. And

132
00:12:32,958 --> 00:12:38,625
it's an experiment. They set up
a Floodlight controller. They
brought up some instances of

133
00:12:38,625 --> 00:12:45,792
CBench, and what they found was
that Floodlight handles it
poorly. It even -- well, there's

134
00:12:45,792 --> 00:12:51,292
actually some options and when
you compile it to put in some
rate limiting and they found

135
00:12:51,292 --> 00:12:57,292
when you turn on the rate
limiting, it was actually worse.
Okay? Now their presentation on

136
00:12:59,875 --> 00:13:05,625
this is on the slide share. I
recommend you look at it to see
what they came up with, how much

137
00:13:05,625 --> 00:13:11,750
-- how many instances of CBench
it took to actually take this
thing down. It wasn't hard at

138
00:13:11,750 --> 00:13:17,708
all. So now there's also Open
Daylight. It is unknown. I
didn't take a stab at this, but

139
00:13:17,708 --> 00:13:24,667
it's worth investigating because
it is Java for God's sake.
Memory issues. Right? Now you

140
00:13:24,667 --> 00:13:31,167
too can recreate Salma Natal's
work or play with your own
controller, poke at it. All

141
00:13:31,167 --> 00:13:37,167
right. Start off looking at SDN
in particular, Open Flow, and I
built kind of an emulator here

142
00:13:40,583 --> 00:13:46,458
or a switch. This is the
beginning of the toolkit. It
impersonates an open flow switch

143
00:13:46,458 --> 00:13:53,750
utilizing 1.0. It exchanges the
hellos. It will receive a
feature request. It will return

144
00:13:53,750 --> 00:13:59,708
the features. It will receive a
set configuration. It will
respond to that. It will receive

145
00:13:59,708 --> 00:14:03,542
a get configuration. It does the
whole thing. Send a bogus
configuration back and then do

146
00:14:03,542 --> 00:14:08,000
echo or request echo or apply
over open flow with that
controller. So you can observe

147
00:14:08,000 --> 00:14:12,750
that yourself and see how these
things interrelate. Well, Flood
takes that a little bit further.

148
00:14:12,750 --> 00:14:17,625
It establishes that relationship
and then just pounds on it.
Pound, pound, pound. There are

149
00:14:17,625 --> 00:14:21,833
12 fields available for
matching. You just do the math,
the number of possible

150
00:14:21,833 --> 00:14:26,208
combinations. One instance of
flood hitting that controller
with all those millions of

151
00:14:26,208 --> 00:14:30,000
packets. You throw up a couple
more, and let's see how many it
takes to knock over the

152
00:14:30,000 --> 00:14:37,750
controller of your choice. Okay?
So a little fun you can have
there. Now it's important to

153
00:14:37,750 --> 00:14:42,250
note -- so we have the TLS
issue. Right? TLS issue not
really implementing it really

154
00:14:42,250 --> 00:14:48,458
well. Those who are as part of
the standard. As they move along
and get to that and they begin

155
00:14:48,458 --> 00:14:51,875
to completely get through the
standard and become more
compliant, D bug force will be a

156
00:14:51,875 --> 00:14:57,250
problem. There's no encryption,
no authentication, just full
control of the switches. This is

157
00:14:57,250 --> 00:15:02,875
a switch side issue. You can use
it very easily with an
obtainable tool--DPCTL. As I

158
00:15:02,875 --> 00:15:07,583
said, they are still working out
getting TLS in there. So it's
not a problem yet, but once they

159
00:15:07,583 --> 00:15:13,542
get past that and get more
compliant to get to the D bug
port and start looking for those

160
00:15:13,542 --> 00:15:17,208
in your environment, are the D
bug ports showing up on our
switches? So it's not a problem

161
00:15:17,208 --> 00:15:23,208
yet but soon will be. Now this
is where we get to the fun
stuff. Controller weaknesses. It

162
00:15:25,833 --> 00:15:32,958
gets bad here. Floodlight. No
encryption, no authentication on
the northbound API. You can just

163
00:15:32,958 --> 00:15:38,792
connect to it, take control of
it, and have your way with it.
Not a problem. It's a very easy

164
00:15:38,792 --> 00:15:46,500
controller. Open Daylight. There
is encryption for the northbound
API, but they were kind enough

165
00:15:46,500 --> 00:15:52,083
to have it turned off by
default. Thank you very much.
Well, I work a lot in defensive

166
00:15:52,083 --> 00:15:57,500
security, so for me it's a
blessing. I like those things.
And there is some authentication

167
00:15:57,500 --> 00:16:04,042
for that northbound API, but
it's HTTP basic authentication.
Not much of a challenge. Default

168
00:16:04,042 --> 00:16:10,250
with passing and strong
passwords turned off. Another
thank you. Now, you may say to

169
00:16:10,250 --> 00:16:14,750
yourself, with Open Daylight we
have a little coverage. Not
really. There are weak

170
00:16:14,750 --> 00:16:18,250
protections there, but we can
actually get around those. I
have an exploit for you today.

171
00:16:18,250 --> 00:16:25,667
It's brand new. I have a zero
day that's going to allow you to
bypass all that. So while

172
00:16:25,667 --> 00:16:31,500
they're there, they won't be a
problem for you. Now what this
means is both controllers,

173
00:16:31,500 --> 00:16:37,875
either directly with Floodlight
or indirectly with Open Daylight
we're using an exploit. They're

174
00:16:37,875 --> 00:16:43,083
going to have problems with
information disclosure through
interception, topology,

175
00:16:43,083 --> 00:16:49,167
credentials. If they don't turn
on the encryption on the Open
Daylight, you can get the

176
00:16:49,167 --> 00:16:53,792
credentials. Information
disclosure through unauthorized
access, topology and targets

177
00:16:53,792 --> 00:16:59,708
directly with Floodlight and
indirectly with Open Daylight
using the exploit and then turn

178
00:16:59,708 --> 00:17:04,958
around and do the same thing,
and there's problems here with
topology flow and message

179
00:17:04,958 --> 00:17:08,583
modification through
unauthorized access. While
you're there, you might as well

180
00:17:08,583 --> 00:17:13,875
add access, remove access, hide
traffic, put blind spots in
those sensors, and you can

181
00:17:13,875 --> 00:17:19,708
change traffic. Flow rules are
rather flexible. You can change
things to add the VLANs, taking

182
00:17:19,708 --> 00:17:25,167
[indiscernible] away. So
directly with Floodlight or
indirectly with Open Daylight,

183
00:17:25,167 --> 00:17:31,125
still both of these have these
problems. Now, first off you
have to identify controllers and

184
00:17:31,125 --> 00:17:34,792
switches. You can't have fun
with them if you don't know
where they're at. Now, they're

185
00:17:34,792 --> 00:17:40,792
currently listening on TCP port
6633, but there's now an
official port of 6653. All the

186
00:17:43,250 --> 00:17:49,083
tools allow you to change the
port, so if you run across a
next gen or version 2 of any of

187
00:17:49,083 --> 00:17:54,542
these things and they change the
port or they're trying to be
secret and they hide the port by

188
00:17:54,542 --> 00:18:00,792
moving it to something else, you
can go ahead and adapt, add a
port as a commandlet and still

189
00:18:00,792 --> 00:18:07,500
use the tools. Now to identify
these guys, you try to exchange
hellos with the service to see

190
00:18:07,500 --> 00:18:12,417
if you're working with an open
flow based service, and if you
get a feature request back, then

191
00:18:12,417 --> 00:18:19,917
you know you're dealing with a
controller. So as we do here
with the next tools. These two

192
00:18:19,917 --> 00:18:23,833
are about discovery. So you're
going to give them lists of
targets, and they're going to

193
00:18:23,833 --> 00:18:29,000
narrow things down for you. You
start with your bigger list to
OFcheck. It identifies open flow

194
00:18:29,000 --> 00:18:34,042
services and reports on
diversions. Say you have 100.
You give two or more. They're

195
00:18:34,042 --> 00:18:40,958
going to class C. So you give
that big list to -- I don't
recommend necessary internet,

196
00:18:40,958 --> 00:18:48,625
but they're out there. I'll just
say that. All right. So you have
a list of let's say 100, and you

197
00:18:48,625 --> 00:18:52,250
go ahead and you go through that
with OFcheck. You'll take that
smaller list, and you're going

198
00:18:52,250 --> 00:18:56,750
to hand it off to enum, and then
you'll enumerate the end points
there. It will tell you whether

199
00:18:56,750 --> 00:19:01,458
or not you're working with a
controller or a switch because,
of course, you want the

200
00:19:01,458 --> 00:19:06,417
controllers because they're the
fun ones. Okay? All right. Now
for those who don't play around

201
00:19:06,417 --> 00:19:11,375
with Python too much there is
also in Metscript to add that
capability, same functionality

202
00:19:11,375 --> 00:19:19,250
as OFenum. [Indiscernible] End
points. [Indiscernible]. Whether
it's a controller or a switch.

203
00:19:19,250 --> 00:19:25,250
So let's go ahead and identify
some right now. Is that big
enough? Okay. So we have a

204
00:19:29,042 --> 00:19:35,042
target list, open flow service
version 1 found at 192.168.2.67.
I kind of knew it was there. So

205
00:19:42,167 --> 00:19:46,125
we have that there, and then you
would go ahead and take that
smaller list and pass it off

206
00:19:46,125 --> 00:19:52,125
to--. Bigger. I think the next
size is way too big. So we have
open flow controller found at

207
00:20:03,375 --> 00:20:09,375
192.168.2.67, so very easy to
identify these guys. So once
you've identified

208
00:20:19,167 --> 00:20:23,542
it-[indiscernible]. So once
you've identified it, you can go
about some naughtiness. We have

209
00:20:23,542 --> 00:20:27,958
a small local area network
there. I've instantiated in main
net. It's a great

210
00:20:27,958 --> 00:20:32,875
experimentation tool. One admin
host, two user hosts, one
server, and a censor, which I

211
00:20:32,875 --> 00:20:37,458
will call an IDS. So there's
hacker me. That's the fun stuff,
so I'm going to do it here.

212
00:20:37,458 --> 00:20:41,708
Identify targets, enumerate
ACLs, and, of course, look
around to see if anyone is

213
00:20:41,708 --> 00:20:47,917
listening/looking at what may be
going on. We'll do that with
OFmap. It downloads slow from an

214
00:20:47,917 --> 00:20:52,583
open flow controller and then
uses those slows to identify
targets and target services,

215
00:20:52,583 --> 00:20:58,833
identify ACLs, and to identify
censors. It works with
Floodlight and Open Daylight and

216
00:20:58,833 --> 00:21:03,958
JSON. It auto detects the
controller you're working with.
Now, I did mention that the work

217
00:21:03,958 --> 00:21:09,500
credentials are Open Daylight.
The exploit actually allows you
to get the credentials for Open

218
00:21:09,500 --> 00:21:14,875
Daylight. It will start off with
an Open Daylight controller. It
will use the default for you.

219
00:21:14,875 --> 00:21:21,500
That's very nice of it. If you
must go get the credentials with
the exploit, you can then plug

220
00:21:21,500 --> 00:21:25,375
them in. OFMap and the next one
OFaccess will allow you to add
credentials. Should they change

221
00:21:25,375 --> 00:21:29,458
it, you have to go get it and
put them in there and then go
ahead and hit D Open Daylight

222
00:21:29,458 --> 00:21:35,458
control anywhere. And we'll
demonstrate. Here we go. I have
to learn how to spell. And we

223
00:21:45,833 --> 00:21:51,833
know that Controller and then
2168, 2067. There we go. So the
first thing we want to do is map

224
00:21:58,333 --> 00:22:05,417
that network. It's going to
report on that. There. Map the
network and then, of course, the

225
00:22:05,417 --> 00:22:10,500
connection. It would normally
tell you the switch you're
attached to. That's a bonus

226
00:22:10,500 --> 00:22:14,625
actually, because you want to
know if you're going to make
some modifications, you kind of

227
00:22:14,625 --> 00:22:18,750
want to know where you're at.
For some reason, these networks
here, I'm not seeing them. I

228
00:22:18,750 --> 00:22:23,292
have to figure out why. Next
thing you might want to do is
look at the flows. But in the

229
00:22:23,292 --> 00:22:27,083
production network, I don't
necessarily recommend you do
that, at least not live on the

230
00:22:27,083 --> 00:22:32,083
screen. You can if you want.
Number 2 lists all the flows.
The option in the production

231
00:22:32,083 --> 00:22:37,875
network is to do number 7, which
is dump the flows to a file. We
can go ahead and take a look

232
00:22:37,875 --> 00:22:43,875
real quick. I don't know if it
will fit here. All right. So
we'll go ahead and jump to the

233
00:22:46,500 --> 00:22:52,500
good stuff here, which is missed
targets. 225, 215, 227, 228.
This happens to be me 215.

234
00:22:54,833 --> 00:23:00,833
Server 225, admin 228. Next
thing I want to look at here is
the ACLs. I want to know what

235
00:23:08,500 --> 00:23:16,458
I'm being kept out of because
that's actually exactly where I
want to go. Found one. It's just

236
00:23:16,458 --> 00:23:22,458
very big. Okay. So 215 is me.
I'm being kept out of 225. As I
said, that's where I'm not

237
00:23:28,000 --> 00:23:34,000
allowed to go. That's the first
place I want to go. So here we
go. Isn't that where all the fun

238
00:23:34,000 --> 00:23:38,833
stuff is at, right? Behind
locked doors? So we have the
salesmen. I want to check to see

239
00:23:38,833 --> 00:23:43,375
if there are any censors. This
does it by dissecting or looking
through the flow tables to see

240
00:23:43,375 --> 00:23:49,917
if there is any mirroring. So
number 6 identify censors. All
right. So there's some mirroring

241
00:23:49,917 --> 00:23:55,917
going on to port 5. And I'm
going select this because I need
this later on. So very easy to

242
00:23:58,750 --> 00:24:05,167
dump the flows, identify
targets, and then find anything
that might be looking at you,

243
00:24:05,167 --> 00:24:11,167
watching what's going on. All
right. Well we're not going to
stop there, right? You always

244
00:24:14,000 --> 00:24:17,792
start off an attack with
reconnaissance, but the next
thing is our vulnerable

245
00:24:17,792 --> 00:24:22,708
identification, exploitation,
that sort of thing. So as an
attacker, I'm going to open the

246
00:24:22,708 --> 00:24:27,417
way for myself and take that
same network. I'm going to grant
myself access to that server,

247
00:24:27,417 --> 00:24:32,958
and them I'm going to isolate
the administrator. Turnabout is
fair play. Right? I don't want

248
00:24:32,958 --> 00:24:38,500
him interfering, and then I'm
going to put a blind spot in
that censor, and I'm going to

249
00:24:38,500 --> 00:24:43,333
remove that mirroring for myself
and my target. And that leaves
me free to then attack the

250
00:24:43,333 --> 00:24:50,417
server. The tool we'll be using
is OFaccess, or I'll be using.
Modifies flows on the network

251
00:24:50,417 --> 00:24:55,208
through the open flow
controller, adds and removes
access for the host, applies

252
00:24:55,208 --> 00:25:00,292
transformation. You can actually
write your own flow roll and put
it in right from the tool. It

253
00:25:00,292 --> 00:25:05,250
also removes mirroring for any
particular IP of interest,
yourself-I'm going to do that,

254
00:25:05,250 --> 00:25:10,417
of course, and the target. It
works for Floodlight and Open
Daylight as well via JSON, audit

255
00:25:10,417 --> 00:25:17,958
the text, everything, put
credentials in if you need to by
the Open Daylight controller and

256
00:25:17,958 --> 00:25:23,958
demonstration. So we're going
over here and run this,
OFaccess. Now the first thing I

257
00:25:26,375 --> 00:25:32,083
want to go after is that server,
but then I have to grant myself
access. So let's show how I can

258
00:25:32,083 --> 00:25:38,083
talk to the server now. Nothing
up my sleeves. So I currently
can't talk to that server.

259
00:25:41,542 --> 00:25:47,542
Request timed out. Now I'm going
to go ahead and through the
magic of SDN and, in this case,

260
00:25:51,333 --> 00:25:57,333
Floodlight-it's easiest to go
after--I will grant myself
access. And that is why I need

261
00:26:06,417 --> 00:26:11,750
that switch. I need to know what
switch to put the flow roll on,
and priority. Priority is a

262
00:26:11,750 --> 00:26:17,500
little tricky. Right now, the
tools only overwrite entries, so
it's important to have a high

263
00:26:17,500 --> 00:26:21,375
priority. With Floodlight,
overwriting requires the highest
priority, so I'm going to accept

264
00:26:21,375 --> 00:26:26,875
the default here. Next version,
yes, I know, it's always that
way. Next version I will be

265
00:26:26,875 --> 00:26:32,875
adding a feature to remove flow
rules. Hooks up that and then
confirm. It's very polite. And

266
00:26:37,833 --> 00:26:43,833
then ping that server. OK? There
we go. [Applause]. >> : We're
not finished yet. We have to go

267
00:26:50,458 --> 00:26:57,542
after that administrator. All
right. So we have H4 as an
administrator and H1 as the

268
00:26:57,542 --> 00:27:03,000
server. Internally contain the
server. We'll let that go. And
then I'm going to take that

269
00:27:03,000 --> 00:27:09,000
away. I'll drop traffic,
192.168.2.228 is the
administrator. And 225 is the

270
00:27:14,500 --> 00:27:20,500
server, same switch, same
priority, yes and now, denied.
There we go. [Applause]. >> :

271
00:27:33,125 --> 00:27:39,125
We'll break that off there.
We're seeing lots of drops
there. 42% [indiscernible]. But

272
00:27:43,375 --> 00:27:47,000
there's still some mirroring
going on there. I want to take
care of that. So I'm going to

273
00:27:47,000 --> 00:27:52,167
move that up there. Let's go
ahead and hide from sensor. I'm
going to go ahead and hide

274
00:27:56,000 --> 00:28:03,708
anything heading toward me.
Don't mirror that. And that same
switch. And we know it's on port

275
00:28:03,708 --> 00:28:09,708
5. Not quite yet. I want to show
you something here. I'm going to
do TCP dump. We'll see how it

276
00:28:18,208 --> 00:28:24,208
does currently see me. No tricks
here. Some pings. So we're
seeing both sides of that

277
00:28:35,125 --> 00:28:40,667
conversation currently being
mirrored to the sensor. Now
let's put the blind spot in. And

278
00:28:40,667 --> 00:28:46,667
I need to go over. So anything
heading toward me will not be
mirrored, and then let's do the

279
00:28:49,250 --> 00:28:55,250
other side of the server. I
actually did the wrong one here.
All right. There we go. So

280
00:29:09,667 --> 00:29:15,667
that's 225. Yes, yes. On that
same switch. Stopping mirroring
to port 5 or anything heading

281
00:29:24,333 --> 00:29:30,333
toward that server. You have to
excuse my Windows 8. Get out of
here. >> : [Off mic] >> : And

282
00:29:38,833 --> 00:29:45,000
back to this way. Right here.
This was a last-minute
replacement. I haven't yanked

283
00:29:45,000 --> 00:29:51,000
all that stuff off. So that was
hidden. Now, let's go ahead and
start this up again. There we

284
00:29:54,792 --> 00:30:00,792
go. Pinging of course, going
through, and let's go zero
packets captured. [Applause]. >>

285
00:30:13,417 --> 00:30:21,083
: Thank you. Nice little blind
spot, which is what I like. So
now you can do whatever you

286
00:30:21,083 --> 00:30:25,500
want. Have your way with that
server if you will. And now, not
only will nothing see you, but

287
00:30:25,500 --> 00:30:31,500
no one can stop you. OK. So we
talked about Open Daylight, a
little indirect. Right? So

288
00:30:39,500 --> 00:30:45,958
there's a small problem with
Open Daylight. A little bit of a
problem. So I found that, and

289
00:30:45,958 --> 00:30:51,333
we're going to go ahead and
exploit that weakness, exploit
Open Daylight. So sorry, no

290
00:30:51,333 --> 00:30:57,333
puppy dogs and rainbows for you.
All right. So this is awfully
detailed, probably more detailed

291
00:31:00,083 --> 00:31:07,125
than it should be. So Open
Daylight, very backwards
compatible, and there's other

292
00:31:07,125 --> 00:31:12,625
southbound APIs besides Open
Flow. No encryption. No
authentication on this. It's a

293
00:31:12,625 --> 00:31:18,750
TCP version of Netcom. Just
connect and exchange messages.
Can you see where I'm going with

294
00:31:18,750 --> 00:31:24,750
this here? What's hot today?
XXE, external entity injection.
A little Java. If you're

295
00:31:28,083 --> 00:31:34,542
familiar with XXE, Java has a
big problem. You've got all
sorts of space out there

296
00:31:34,542 --> 00:31:42,167
dedicated to that. OS pretty
much paints a door right on this
and just go in. Java has big

297
00:31:42,167 --> 00:31:48,167
problems with XXE. So boom goes
Open Daylight. And this is a
bonus here. Yes, that's what I

298
00:31:51,208 --> 00:31:57,208
said. Demonstration. So, let's
go ahead and exit out of here.
Let's just do this. I tweaked

299
00:32:16,417 --> 00:32:22,417
out a little bit, added
features. Got one at 60. All
right. There you go. Now, it

300
00:32:24,833 --> 00:32:29,083
starts out with default of a
password file, but I'm greedy.
So I'm going to go after the

301
00:32:29,083 --> 00:32:35,083
shadow file. You got the access,
you might as well use it. It's
very friendly. Says hello.

302
00:32:39,875 --> 00:32:45,875
Everything is okay. Here we go.
We're feeling all right. That's
the latest one. So there we go.

303
00:32:52,417 --> 00:32:58,417
[Applause]. >> : Thank you. And
that's the good stuff. Right? So
then you can mount an offline

304
00:33:01,000 --> 00:33:07,333
password attack, gain a sense of
credentials. You're going to get
a lot more in that box than

305
00:33:07,333 --> 00:33:10,625
northbound API credentials, but
after you're done with that box,
you might as well go after

306
00:33:10,625 --> 00:33:17,000
everything else. So you get
those credentials and you plug
them into the tool, and then

307
00:33:17,000 --> 00:33:23,000
I'll show you in just a second
here. All right. It's important
to note before I go through the

308
00:33:25,875 --> 00:33:30,875
whole thing, the whole cycle
again with Open Daylight or show
you what you can do there, if

309
00:33:30,875 --> 00:33:34,667
the service is not available,
all right, say you don't have
the opportunity to use the

310
00:33:34,667 --> 00:33:39,708
exploit because the service is
not available or, low and
behold, they fix it, not to

311
00:33:39,708 --> 00:33:46,417
worry. You can password guess
it. Okay? Default pass or tweak.
Strong passwords turned off by

312
00:33:46,417 --> 00:33:53,458
default. No account lockout. And
no sys lock output. So you can
just pound on it and pound on it

313
00:33:53,458 --> 00:33:59,458
and pound on it, and it gets
credentials that way. So either
way, you just repeat. All right.

314
00:34:01,792 --> 00:34:08,083
Go through the whole cycle again
and then own that network too.
So Open Daylight. Put those

315
00:34:08,083 --> 00:34:15,375
extra protections in place, and
it didn't turn out to be much.
Other exploits are waiting to be

316
00:34:15,375 --> 00:34:19,125
found. This is where you guys
come in. The only way to get
these people to secure this

317
00:34:19,125 --> 00:34:24,458
stuff is just keep poking at it.
Northbound APIs, Floodlight,
southbound APIs for Floodlight

318
00:34:24,458 --> 00:34:32,250
as well. Open Daylight has
northbound APIs. Open flow has
southbound APIs. The Netcoms,

319
00:34:32,250 --> 00:34:39,708
there's also an SSH1 D bug port
for Netcomp. And this is the
other servers also running the

320
00:34:39,708 --> 00:34:45,708
box. Okay? Lots of these are XML
based being run by Java. I see
some duplication here. Some

321
00:34:50,208 --> 00:34:54,625
duplication. So we'll go out
there, poke at this sucker.
You're going to find stuff. You

322
00:34:54,625 --> 00:35:02,000
are. Available solutions. Yes,
this is the less exciting part.
For now and for the future, of

323
00:35:02,000 --> 00:35:07,958
course. For right now, transport
security. We're talking about
it, but it's not really

324
00:35:07,958 --> 00:35:13,500
finished. They're not really
done with it. For those not
supporting it, put it in. And

325
00:35:13,500 --> 00:35:17,875
when you put it in, add
authentication, please. Do
certificates. Those who

326
00:35:17,875 --> 00:35:22,667
currently have it, throw that
extra piece on. We need to close
the loop on this. I'm not sure

327
00:35:22,667 --> 00:35:29,583
how good TLS is in this
situation unless you're using
certificates. Now as we move to

328
00:35:29,583 --> 00:35:34,958
commodity switches, it then also
becomes realistic. There are
some cycles for TLS. That's

329
00:35:34,958 --> 00:35:42,667
probably a lot of the reason why
vendors aren't implementing it.
It takes extra cycles to do TLS.

330
00:35:42,667 --> 00:35:48,625
Going to commodity switches, you
have the cycles. So it's very
feasible and very realistic to

331
00:35:48,625 --> 00:35:53,458
make it happen. Hardening, of
course. These are some of the
basic things we should be doing

332
00:35:53,458 --> 00:36:00,583
anyway. And then, of course,
VLAN, too many flat networks out
there. I'm a network guy. All

333
00:36:00,583 --> 00:36:07,500
right? But even I know you need
to do a code review. Right? As I
said, OS pretty much paints the

334
00:36:07,500 --> 00:36:12,875
door on the outside of this box
and says, here, this is how you
get in. I can't imagine that did

335
00:36:12,875 --> 00:36:16,667
a code review. Please go back
and do a code review. Those
vendors out there, if you

336
00:36:16,667 --> 00:36:22,542
haven't done a code review, we
haven't looked at it yet. Do one
before we get there. Please. Now

337
00:36:22,542 --> 00:36:27,250
for the future. This is a little
more the details of that scan to
protect against denial of

338
00:36:27,250 --> 00:36:32,333
service. You have to consider
your architecture, partition
that network. Don't put one

339
00:36:32,333 --> 00:36:35,833
controller or a group of
controllers in charge of the
whole network. Not a great idea,

340
00:36:35,833 --> 00:36:42,458
especially as the network gets
larger, performance also comes
into consideration because not

341
00:36:42,458 --> 00:36:46,625
just denial of service but also
in the performance of the daily
operations of network. And then

342
00:36:46,625 --> 00:36:52,542
controller clustering. Spread
the burden out a bit. Share the
load. And then when you can, put

343
00:36:52,542 --> 00:36:57,750
in site flow entries. A lot of
this is going to occur because
you've got reactive mode where

344
00:36:57,750 --> 00:37:01,333
the switch is going to go ahead
for every single packet it sees,
it's going to send up. It

345
00:37:01,333 --> 00:37:05,667
doesn't have anything to go with
at the beginning. It's going to
send every single packet. That's

346
00:37:05,667 --> 00:37:09,583
a lot of combinations-there are
millions--up to the controller.
If you have some flip site floor

347
00:37:09,583 --> 00:37:13,750
entries that you can use, use
them so it doesn't necessarily
have to depend on the controller

348
00:37:13,750 --> 00:37:21,250
as much. It doesn't need to
depend on it as much as
possible, so minimize that. And

349
00:37:21,250 --> 00:37:25,667
then, of course, to protect
against modification. This is
about DSDN applications. Traffic

350
00:37:25,667 --> 00:37:28,958
counters are available. You
don't have to infer the network.
You can actually measure that

351
00:37:28,958 --> 00:37:34,167
out. You can see it as it's
currently operating. The
application space within the

352
00:37:34,167 --> 00:37:40,625
controller is really supposed to
be about putting in these code
sets, modules to put on these

353
00:37:40,625 --> 00:37:44,500
boxes that are supposed to do a
lot of that work. The APIs are
kind of secondary to external

354
00:37:44,500 --> 00:37:48,917
integration. So as you go on
here, you can throw on secondary
applications that are all about

355
00:37:48,917 --> 00:37:53,125
security. Right? Reading in the
traffic counters, measuring
them, looking for

356
00:37:53,125 --> 00:37:57,750
[indiscernible], and then
responding. So have those
applications in there to kind of

357
00:37:57,750 --> 00:38:01,542
check what's going on. Now,
that's kind of after things are
in operation. You can do things

358
00:38:01,542 --> 00:38:06,375
on the front side too with
verification with header space
analysis where you turn the

359
00:38:06,375 --> 00:38:11,792
switches and the routers into a
mathematical model, and then you
basically punch all your packets

360
00:38:11,792 --> 00:38:16,333
through that, and you can
actually see how the network is
going to operate beforehand. So

361
00:38:16,333 --> 00:38:20,958
the verification is the front
side where we can verify how a
policy will function, and then

362
00:38:20,958 --> 00:38:25,042
you have something on the back
side with the secondary
applications to monitor things

363
00:38:25,042 --> 00:38:31,042
and respond. So can get coverage
there and protect against people
like me poking around. Now how

364
00:38:35,542 --> 00:38:40,333
prevalent is this going to be?
We see issues. We see these
weaknesses, weaknesses that are

365
00:38:40,333 --> 00:38:45,375
easily exploitable. But if
they're just a couple people,
you know, well we have a couple

366
00:38:45,375 --> 00:38:50,417
people that may have it, but
what about the rest of us? Well,
Garter says, the academics say

367
00:38:50,417 --> 00:38:55,667
this is going to be one of the
10 critical IT trends for the
next five years. So they are

368
00:38:55,667 --> 00:39:00,958
looking into their crystal ball
and seeing this having a really
big impact on the enterprises

369
00:39:00,958 --> 00:39:06,833
out there. Major networking
vendors have products planned
for SDN, and they're betting

370
00:39:06,833 --> 00:39:13,875
money on this, and people are
already moving on it. 60 percent
felt that SDN would be part of

371
00:39:13,875 --> 00:39:19,875
their network within five years.
43 percent already have plans to
put it in production. It's

372
00:39:22,292 --> 00:39:28,292
actually here now. Data centers
and cloud space, investments,
VMware. This is considered the

373
00:39:31,542 --> 00:39:39,208
killer [indiscernible]. And the
expectation is actually higher,
80 percent. And of course we're

374
00:39:39,208 --> 00:39:43,542
seeing it in the LAN with
Caltech and [indiscernible] and
[indiscernible] as well, already

375
00:39:43,542 --> 00:39:48,750
here. Google has it on one of
their major backbones, and NTT
and AT&T, everyone is rushing

376
00:39:48,750 --> 00:39:53,250
forward into this. So this is
something that we're all going
to have to keep an eye on. This

377
00:39:53,250 --> 00:39:56,958
is something we're all going to
have to worry about it. It's not
just isolated to these

378
00:39:56,958 --> 00:40:00,708
controllers and these unique
situations. It's all of us.
We're going to have to address

379
00:40:00,708 --> 00:40:07,750
this. Now so mainly we move
forward on this. We are going to
move forward on this. How could

380
00:40:07,750 --> 00:40:11,958
it go right? What are the things
we expect to see out of this
besides the problems that it

381
00:40:11,958 --> 00:40:16,750
solves? Vendor independence,
ultimately our costs. A lot of
the limitations are currently

382
00:40:16,750 --> 00:40:22,167
experienced in network space
will go away. Network is the
mask to the application and the

383
00:40:22,167 --> 00:40:25,708
business needs and not the other
way around. We don't have to
make our network fit the

384
00:40:25,708 --> 00:40:30,708
equipment. We can make the
equipment fit what we want to do
on our network and the faster

385
00:40:30,708 --> 00:40:34,958
evolution of that network. We
can actually run production
scale simulations side by side,

386
00:40:34,958 --> 00:40:39,750
and we do lots of
experimentation. It allows us to
do things like exchange network

387
00:40:39,750 --> 00:40:45,417
aspects, instantiate network
function virtualization, where
we actually have middle boxes.

388
00:40:45,417 --> 00:40:49,208
We have load bouncers. We have
firewalls, and we can actually
move those things around

389
00:40:49,208 --> 00:40:54,208
wherever they need to be as
traffic conditions change and
the situation changes. And you

390
00:40:54,208 --> 00:40:58,292
get dynamic and truly active
defenses. You can program that
network and detect

391
00:40:58,292 --> 00:41:02,500
abnormalities, respond to those
abnormalities, and start
defending itself. A lot of

392
00:41:02,500 --> 00:41:08,500
amazing things. But a lot of bad
things can also happen too.
Denial of service. It's like a

393
00:41:10,750 --> 00:41:18,250
dog pile. All the nodes on the
network gang up on one other
network. You think bots are bad?

394
00:41:18,250 --> 00:41:24,417
Wait until you harness an entire
network and you can slam
somebody else. So that's bad.

395
00:41:24,417 --> 00:41:29,333
The flip side of that,
selectively dropping traffic. A
message disappears, an important

396
00:41:29,333 --> 00:41:35,875
message. A transaction never
arrives. Man in the middle.
Let's say you want to be a

397
00:41:35,875 --> 00:41:41,667
little more creative, a little
more ninja, man in the middle an
entire network. Local subnet

398
00:41:41,667 --> 00:41:48,375
host. Change a transaction
route. Change maybe an email a
little bit, piss some people

399
00:41:48,375 --> 00:41:55,000
off, start manipulating events.
It gets bad. Networks within
networks. You get uber admins

400
00:41:55,000 --> 00:41:59,708
moving chess pieces behind the
scenes. This could go bad if
we're not keeping our eye on the

401
00:41:59,708 --> 00:42:05,542
ball. So we need to make a
difference. This is what this is
about. Traditional means of

402
00:42:05,542 --> 00:42:13,000
securing controllers still
applies. Now, security has been
part of the discussion. I said

403
00:42:13,000 --> 00:42:17,875
it needs to be, but it needs to
be done in a different way.
Until now, it's been about

404
00:42:17,875 --> 00:42:21,875
you're all very excited about
how it can help security, but
people aren't really looking at

405
00:42:21,875 --> 00:42:27,875
how secure SDN is. And all this
is being done typically by
outsiders. People are doing it

406
00:42:30,833 --> 00:42:35,083
and are doing it in a
traditional approach, a very 2D
approach, very Isolated. The

407
00:42:35,083 --> 00:42:38,792
code guys, the application guys
are looking at it separately
from the network guys. They need

408
00:42:38,792 --> 00:42:44,625
to converge there because
controllers, really, they need a
security reference. They need a

409
00:42:44,625 --> 00:42:49,292
security reference and an audit
capability. They talk about
these as network operating

410
00:42:49,292 --> 00:42:54,750
systems, so start treating it
like one. Make sure that
operations are authorized. Make

411
00:42:54,750 --> 00:42:59,500
that once authorized operations
occur that someone can figure
out who did it, what they did,

412
00:42:59,500 --> 00:43:05,583
and when. All right. Now, some
final thoughts. We're wrapping
up here. SDN has the potential

413
00:43:05,583 --> 00:43:12,500
to turn the entire internet into
a cloud. The benefit would be
orders of magnitude above what

414
00:43:12,500 --> 00:43:18,417
we see now, but there's a hole
in the middle that could be
filled by the likes of the NSA,

415
00:43:18,417 --> 00:43:24,792
nation-states like China. We
pick on China, but they're all
doing it--United States, Russia,

416
00:43:24,792 --> 00:43:30,708
the Euro block, governments are
getting in the middle. We don't
want them there. All right.

417
00:43:30,708 --> 00:43:35,625
Let's not let that happen, and
that starts here by telling you
guys about this. So we start

418
00:43:35,625 --> 00:43:42,250
poking holes. We start holding
vendors to account, these
developers. The toolkit as we

419
00:43:42,250 --> 00:43:48,292
wrap up here. It's available at
SDN-toolkit@sourceforge.net. I'm
a little old school, the hash

420
00:43:48,292 --> 00:43:55,083
there. Make sure it's genuine.
Available here. And some links,
let me get that mouse back. To

421
00:43:55,083 --> 00:44:02,125
provide some context to today's
talk, get more information, I
highly recommend these, a course

422
00:44:02,125 --> 00:44:05,542
taught here by Nick Finster,
Professor Finster, SDN nuts and
bolts from beginning to end,

423
00:44:05,542 --> 00:44:11,542
learning about SDN. So that's
it. Thanks for coming.
[Applause].

