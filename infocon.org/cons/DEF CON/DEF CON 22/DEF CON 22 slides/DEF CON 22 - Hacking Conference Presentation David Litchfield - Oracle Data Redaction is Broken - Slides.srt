1
00:00:00,250 --> 00:00:05,667
>> Good morning. I like to say
it is nice to see all of you
bright and early, but I can't

2
00:00:05,667 --> 00:00:10,167
see anybody at all right now so
I've got bright lights in my
face. We're going to be talking

3
00:00:10,167 --> 00:00:16,500
about Oracle data redaction and
how it failed to protect data at
the moment. Or actually not at

4
00:00:16,500 --> 00:00:22,917
the moment because it has to be
patched so I won’t be dropped an
0day at the moment. But before

5
00:00:22,917 --> 00:00:28,917
we get there who am I? I'm David
Lichtfield. I'm been a security
researcher for 12, 14 years now

6
00:00:30,958 --> 00:00:38,667
or so. I work for some companies
work with really cool people. At
stake back in the day NCC, we

7
00:00:38,667 --> 00:00:44,667
were acquired by NCC back in
2008 and since then they Accu
VON. I'm working for a company

8
00:00:48,500 --> 00:00:54,500
in Australia called DataCom TSS
well, TSS is a nice company.
It's more for the sharks and

9
00:00:59,875 --> 00:01:05,875
Australian waters. Buffer
exploitation was my forte. I
enjoyed the bits and bytes but

10
00:01:08,125 --> 00:01:14,083
commercially I was driven
towards database security. No
one seemed to be doing it or

11
00:01:14,083 --> 00:01:21,458
doing it very well, and so
basically I took a decision that
I would get out of the bits and

12
00:01:21,458 --> 00:01:28,083
bytes; well to be fair, I still
do a lot of bits and bytes
because database obviously have

13
00:01:28,083 --> 00:01:32,875
data overflows. >> Probably the
best bit of work I did was in
2003. I've not really done

14
00:01:32,875 --> 00:01:37,083
anything great since then or
what I feel is good. When I
wrote the first paper on

15
00:01:37,083 --> 00:01:43,083
defeating the MicroSoft stack
protection and SafeSEH. Ever
since then, I have not really

16
00:01:59,792 --> 00:02:05,792
been writing exploits. >> If
you're interested in security or
sharks, you can follow me at D

17
00:02:25,500 --> 00:02:31,042
Lichtfield on twitter or if you
wander to have a session longer
conversation not necessarily in

18
00:02:31,042 --> 00:02:37,042
public I can be contacted. >>
Who remembers the Sony Play
Station breach in 2011. That was

19
00:03:03,042 --> 00:03:08,625
an Oracle based server. That
senior Oracle management didn't
know it was their database. It

20
00:03:08,625 --> 00:03:14,625
was criminal. He should spend
less time on his boat and more
time concentrating on his

21
00:03:20,542 --> 00:03:26,542
software. >> We should be buying
other products. So standing by
those words I would like to then

22
00:03:53,250 --> 00:04:00,000
continue this talk. I want to
give you some background before
we get to how we bypass Oracle.

23
00:04:00,000 --> 00:04:06,000
Let's do it from the beginning.
So, the guy a few years ago
about 12, 14 years ago called

24
00:04:11,250 --> 00:04:17,250
RFP, still around but he was one
of the greatest researchers of
our time and he did a lot of

25
00:04:19,667 --> 00:04:23,625
research into sequin injection.
It wasn't called sequin
injection at the time. People

26
00:04:23,625 --> 00:04:28,375
were talking about things like
sequence session at the time.
RFP had written a couple papers

27
00:04:28,375 --> 00:04:34,375
and we had a conversation boy
it. I was like I've never really
looked at the service. >> So I

28
00:04:41,583 --> 00:04:48,500
put together a paper called web
application disassembly. This
was my first venture into the

29
00:04:48,500 --> 00:04:53,750
database world essentially. And
then we were kicking the hell
out of Microsoft server. I wrote

30
00:04:53,750 --> 00:04:58,958
a paper called trip profiler and
I covered ââ (Technical
difficulties.) >> Some of the

31
00:04:58,958 --> 00:05:02,458
more interesting patching
stories we've had with Oracle, I
want toÂ ââ the reason I'm

32
00:05:02,458 --> 00:05:07,500
bringing this up is because as I
said it's sort of setting the
scene for where we are today and

33
00:05:07,500 --> 00:05:12,208
why we are called data reââ
the Oracle data redaction stuff
is as bad as it is. It's not so

34
00:05:12,208 --> 00:05:18,208
much that it can be bypass. It's
more representative of what's
going on in the Oracle security

35
00:06:19,042 --> 00:06:25,042
world or their approach to
security. Any way I want to give
background. One of the reports I

36
00:07:26,250 --> 00:07:33,667
reported to them was essentially
you could without user ID and
password cause the database

37
00:07:33,667 --> 00:07:37,875
server to load an arbitrary
library, execute an arbitrary
function. Now the way this

38
00:07:37,875 --> 00:07:43,875
operates is throughÂ ââ what
happens when you have a PR
package that sort of like PR

39
00:07:45,958 --> 00:07:51,958
sequel is the stuff that extends
an Oracle database server,
theÂ ââ if you want to load

40
00:07:54,958 --> 00:08:00,958
the library and call a function
or something like that what
happens is the IPBMSÂ ââ

41
00:08:03,542 --> 00:08:09,958
sorry, the IBBMS connects to the
T nest listener the great way to
all Oracle communications

42
00:08:09,958 --> 00:08:15,042
essentially so the database
connects to the listener. When
you execute this function it

43
00:08:15,042 --> 00:08:21,042
says noâno I won't do that but
I know a program that will. It
launches a program and passes

44
00:08:23,792 --> 00:08:31,333
Oracle back, the handleÂ ââ
redirects it to a port basically
and the Oracle connects to X

45
00:08:31,333 --> 00:08:36,667
pock loads the library and
executes the function. There's
no authentication going on

46
00:08:36,667 --> 00:08:42,667
there. IBBMS from the other side
of the network and say to the
listener will you load the

47
00:08:47,417 --> 00:08:54,958
library for me. It goes no way
will I do that but I know a
program that will. Lo and behold

48
00:08:54,958 --> 00:09:00,958
Xbox loads the library in this
case in the case of windows
executes the system function and

49
00:09:03,167 --> 00:09:06,292
executes an operating system
without using any password and
of course the network so that's

50
00:09:06,292 --> 00:09:09,917
pretty bad so I report this to
Oracle of course because I'm one
of these people who wander to

51
00:09:09,917 --> 00:09:12,208
find a bug and report it
straight to the vendor, I'm
quite happy nowadays but let's

52
00:09:12,208 --> 00:09:14,625
be honest about it, you know,
computer security is a fine
distinction am I report my bugs

53
00:09:14,625 --> 00:09:20,625
to the vendors when I find them
and so Oracle said yeah, okay,
we're going to fix this and what

54
00:09:36,417 --> 00:09:41,542
they do now or did at the time
was basically turned around and
said if someone attempts to do

55
00:09:41,542 --> 00:09:45,250
this we'll block it but we'll
log it which is good because we
want to see if someone is

56
00:09:45,250 --> 00:09:49,833
attempting to attack us. The
problem is theyÂ ââ they
know exactly what's going on.

57
00:09:49,833 --> 00:09:55,833
There's a stack box for the
overflow. So I was like Oracle
we can still exploit this

58
00:10:01,000 --> 00:10:07,000
without using (Inaudible). And
then we were like oh yeah we'll
fix that. So what we'll do this

59
00:10:12,667 --> 00:10:18,208
is Oracle speaking here, I'm
paraphrasing of course, we'll
put a link check in before we

60
00:10:18,208 --> 00:10:22,750
call S print out. Why they
didn't say SSM print I don't
know. They expanded environment

61
00:10:22,750 --> 00:10:28,750
variables. That's in between you
remember so if I said don't sign
par that is expanded off to a

62
00:10:34,667 --> 00:10:40,667
line check so that's five
characters and that expands. So
suddenly we have a (Inaudible).

63
00:10:42,875 --> 00:10:48,875
They should have just done SFM
print F260 bites max but they
didn't do that. This went over a

64
00:10:53,333 --> 00:11:00,917
period of years backwards and
forward until eventually they
fixed all supported versions.

65
00:11:00,917 --> 00:11:06,208
Unsupported versions are still
vulnerable to this. There are
still people out there using

66
00:11:06,208 --> 00:11:12,208
Oracle seven. So, this was the
kind of, you know, approach to
patching that Oracle would take.

67
00:11:17,708 --> 00:11:21,833
You would wait two years for a
patch and it would be
insufficient and I'll give you

68
00:11:21,833 --> 00:11:28,292
another good example of this.
So, way back when, Oracle
application seven, originally

69
00:11:28,292 --> 00:11:31,417
called the Oracle web listener
had something calledÂ ââ
it's a cool function especially

70
00:11:31,417 --> 00:11:37,417
if you want to hack into it,
essentially what it does is the
PR sequel gateway allows you to

71
00:11:40,583 --> 00:11:47,708
program your web application in
PISQUELL and have it execute in
the database and the results are

72
00:11:47,708 --> 00:11:55,417
broadcast back to the browser.
Essentially what happens is the
web server takes the user's web

73
00:11:55,417 --> 00:12:01,417
request, get flash PLSv package
dot procedure, basically the web
server turns around and takes

74
00:12:06,042 --> 00:12:10,000
that request, strips out the
package dot feature, turns
around to database server and

75
00:12:10,000 --> 00:12:15,458
says execute that for me and
pass me back the results. This
is going to be riddled with

76
00:12:15,458 --> 00:12:19,708
security bugs because nothing is
being validated and it's just
being executed by the database

77
00:12:19,708 --> 00:12:25,708
server. If you knew of a
vulnerable package or procedure,
so who remembersÂ ââ how

78
00:12:30,208 --> 00:12:36,458
many actual Oracle people do we
have in here? Show of hands? Who
remembers dry load. It was a

79
00:12:36,458 --> 00:12:40,625
package that basically had a
procedure validate statement and
what it did was

80
00:12:40,625 --> 00:12:45,208
basicallyÂ ââ remember it
was a BB8 form. You
passedÂ ââ would execute it.

81
00:12:45,208 --> 00:12:48,500
Executes would deviate
privileges and so you could say
grant BBA to public and suddenly

82
00:12:48,500 --> 00:12:54,500
the public was a DDB
essentially. We could execute
this through the server. We

83
00:13:00,625 --> 00:13:06,625
could just go get slash dolt
validate statement question mark
C buffer equals select star from

84
00:13:14,333 --> 00:13:18,833
whatever or create user or
loadÂ ââ create library,
whatever we wanted to do we

85
00:13:18,833 --> 00:13:23,333
would deviate privileges
essentially. So that's pretty
bad. Oracle introduced the

86
00:13:23,333 --> 00:13:29,333
exclusion list and on that list
are things in the SIS schemer,
it's like root the most

87
00:13:32,708 --> 00:13:38,167
powerfulÂ ââ anything that
starts with DBMS underscore
would be rejected because most

88
00:13:38,167 --> 00:13:45,167
of the SIS has a synonym so we
can access it without specifying
a schemer and they will be given

89
00:13:45,167 --> 00:13:51,000
thatÂ ââ most of the
packages start with DBM
underscore schemer. They decide

90
00:13:51,000 --> 00:13:56,292
to reject that. Anything that
started with the OWA underscore
because the Oracle web

91
00:13:56,292 --> 00:14:01,083
application took it basically
had thingsÂ ââ there was a
package called OWM underscore

92
00:14:01,083 --> 00:14:07,333
and one of the features was
sells print and it presented the
results back to you so this was

93
00:14:07,333 --> 00:14:12,333
bad. So, it became incumbent
upon you if you wanted to break
into an Oracle database

94
00:14:12,333 --> 00:14:17,917
serverÂ ââ things like CTX
were not in the band from the
get go so you could still

95
00:14:17,917 --> 00:14:23,917
exploit things like the dry load
validate. And assuming we wanted
to execute scheme load we had to

96
00:14:29,958 --> 00:14:36,042
bypass the PR sequence. So
having reported this and them
introducing the exclusion list

97
00:14:36,042 --> 00:14:42,042
it was not important to bypass
the list. And so certainly the
first way of doing it was put up

98
00:14:44,667 --> 00:14:51,625
imprint assist 'cause it's a
space and a space does not match
of course SIS. They're two

99
00:14:51,625 --> 00:14:58,125
different things. Or you could
go zero wave new line, zero
defer line feed and all of these

100
00:14:58,125 --> 00:15:05,583
things would bypass the
exclusion list so we could gain
access to everything for

101
00:15:05,583 --> 00:15:10,833
example. So I reported this to
Oracle, Oracle fixed it so on
and so on. All good. We came

102
00:15:10,833 --> 00:15:14,917
across another Oracle
application and they all
patched. We have to bypass the

103
00:15:14,917 --> 00:15:20,917
exclusion list again so this way
next time was basically using
angle brackets. If you do double

104
00:15:24,375 --> 00:15:29,458
angle bracket, double angle
bracket that's like a go to
label. You would request get

105
00:15:29,458 --> 00:15:35,458
slash PL slash angle bracket
angle bracket, bar angle bracket
angle bracket and that would

106
00:15:40,167 --> 00:15:46,167
break the matching. Oracle fixed
it. This is now about year three
and another time theyÂ ââ I

107
00:15:49,958 --> 00:15:55,292
found a few bugs in the schemer
and they were like they're not
going to fix them because the

108
00:15:55,292 --> 00:16:01,292
only risk is through the
application server. What if we
find another bypass. They're we

109
00:16:08,458 --> 00:16:13,042
fixed all the bypasses. You're
not going to get around it this
time. And I was like well I'll

110
00:16:13,042 --> 00:16:17,542
stop you guys. And it's silly, I
should have thought of it from
the get go. Double quotes

111
00:16:17,542 --> 00:16:25,458
bypasses their exclusion list.
So they go ahead and fix that
and eventually, you know, we're

112
00:16:25,458 --> 00:16:29,750
now sort of like pingâpong or
tennis T they fix it, I bypass
it, they fix it, I bypass.

113
00:16:29,750 --> 00:16:35,750
Eventually and this is a real
funny one. Who knows what the
character with the value hex FX

114
00:16:39,875 --> 00:16:47,792
looks like? Anyone many like a Y
with a numeral on top of it.
Looks like a letter Y and guess

115
00:16:47,792 --> 00:16:52,417
what the database server thinks
it is? So, anyway the web
application server would look at

116
00:16:52,417 --> 00:16:58,417
it you go SFS, you know, for SIS
essentially, the web server
would go well that is not SYS

117
00:17:01,542 --> 00:17:07,208
because that FS part, that's any
other a Y, that's some weird
thing, I've never seen that,

118
00:17:07,208 --> 00:17:12,458
pass it through. The database
searcher depending upon the
language eventually says what

119
00:17:12,458 --> 00:17:17,458
the hell is this double doing on
there. I don't think you mean
it. It would revert to it a Y.

120
00:17:17,458 --> 00:17:24,917
So then you would get access to
the SYS schemer. >> Eventually
Oracle decides that they can't

121
00:17:24,917 --> 00:17:31,542
rely on the web developers to do
the validation so here's a
really smart idea. Let's get the

122
00:17:31,542 --> 00:17:39,167
guys to do the validation. So
I'm sorry I was expecting a
laugh. You're getting the

123
00:17:39,167 --> 00:17:45,500
database server to do its own
validation. So guess what? That
first attempt is vulnerable

124
00:17:45,500 --> 00:17:51,500
sequence injection. We're now
six years into this. So, you
send this stuff and you wait six

125
00:17:53,542 --> 00:17:59,000
months or eight months for them
to come back with a suitable
patch and it's just not

126
00:17:59,000 --> 00:18:02,542
sufficient enough. You've paid
it lip service. We'll come back
to Oracle patch in a minute.

127
00:18:02,542 --> 00:18:08,542
Spend some time looking
atÂ ââ I'm not just pulling
at Oracle here. Sent IBM is

128
00:18:14,167 --> 00:18:20,167
bunch of bugs I think about 15
in all. We'll talk about common
criteria in a minute and a

129
00:18:22,708 --> 00:18:28,208
problem Oracle had with it but
info Mex had a buffer flow way
long user name. The

130
00:18:28,208 --> 00:18:34,208
authentication procedureÂ ââ
I said we'll come back to that.
As time progresses you start

131
00:18:37,708 --> 00:18:45,375
looking for these wonderful
things, you know, and coming up
with new classes of attacks such

132
00:18:45,375 --> 00:18:53,292
or new classes of flaws. Lateral
sequin injection but here's the
thing. Nine times out of ten you

133
00:18:53,292 --> 00:18:56,958
go and do an assessment of
someone and they still got like
weak password management in

134
00:18:56,958 --> 00:19:01,000
place so they don't care about
things like lateral soup are
injection and stuff like that.

135
00:19:01,000 --> 00:19:07,000
They've not even got the
password stuff right. It's a bit
of a disappointment. And so yeah

136
00:19:07,000 --> 00:19:13,000
long story short I went by
eventually and came back to it:
Most of the time they used to

137
00:19:17,208 --> 00:19:22,125
fix the flaw. They didn't fix
the flaw they would fix the
exploit. If my exploit had a

138
00:19:22,125 --> 00:19:28,917
space in it because you like
select start from SYS user
dollar or whatever it happens to

139
00:19:28,917 --> 00:19:35,375
be they would say well if the
parameter being supplied by the
user has a space in it, reject

140
00:19:35,375 --> 00:19:42,208
it. Well, hold on, we don't need
a space. We could replace the
space with forward slash star,

141
00:19:42,208 --> 00:19:48,208
star forward slash. AndÂ ââ
or you know double pack. There's
a whole number of things. It was

142
00:19:50,375 --> 00:19:53,708
still vulnerable. They hadn't
fixed the actual flaw itself but
just the exploit. So that was

143
00:19:53,708 --> 00:19:59,708
typically the kind of response
you would get. Or they would use
a super secret that no one is

144
00:20:02,375 --> 00:20:06,000
supposed to ever know but of
course that's what hackers do,
researchers do that, they

145
00:20:06,000 --> 00:20:11,417
reverse engine. As long as you
knew what that secret was you
would pass that as a parameter

146
00:20:11,417 --> 00:20:19,250
and you would still be able to
execute the flaw. You would
typically report an issue and

147
00:20:19,250 --> 00:20:24,958
often you would find the same
vulnerability in the probe two
lines later that they had

148
00:20:24,958 --> 00:20:29,917
neglected to fix but they fixed
the one you had reported so
again I just wanted to stress it

149
00:20:29,917 --> 00:20:35,375
that this isÂ ââ Oracle
often takes a long time to
patch. Two years you used to

150
00:20:35,375 --> 00:20:43,208
wait for a patch to come out and
it would be broken severely
broken. I do wander to point out

151
00:20:43,208 --> 00:20:49,625
though thatÂ ââ who
remembers the hacker group, they
foundÂ ââ this is the flaw

152
00:20:49,625 --> 00:20:55,625
that slammedÂ ââ (Inaudible)
ended up exploiting. Anyone
remember that? It was very nice.

153
00:20:59,958 --> 00:21:05,958
Any way, just, you know, showing
that even people like Microsoft
basically after the whole SDL

154
00:21:08,625 --> 00:21:14,167
stuff they fell vulnerable to
this. There was a heap of
overflow they forgot to overfix.

155
00:21:14,167 --> 00:21:19,083
Two lines of code later they
fixed the base overflow. So,
it's not that this is just

156
00:21:19,083 --> 00:21:25,083
Oracle doing this, it's the
other vendors, too. So, I want
to do some comparisons between

157
00:21:33,583 --> 00:21:39,792
Oracle and Microsoft in terms of
just the database side of
things. So, we can see that

158
00:21:39,792 --> 00:21:46,417
they're actually getting better.
Back in 2004 days, you know,
they would patch you 28

159
00:21:46,417 --> 00:21:52,583
issuesÂ ââ each one of these
blue blocks represents a flaw
that they have caught in their

160
00:21:52,583 --> 00:21:58,583
advisories basically and so
before 2004 they patched things
on an ad hoc basis. Now, this

161
00:22:01,583 --> 00:22:07,208
was at time when Microsoft was
turning towards patch Tuesday.
And Microsoft was saying we have

162
00:22:07,208 --> 00:22:13,125
to patch so many things we need
to really get on top of this so
our customers can have a

163
00:22:13,125 --> 00:22:19,125
recognizable date when they know
they're going to have to look
for patches. Excuse me. Oracle

164
00:22:21,417 --> 00:22:26,125
at the time slagged them off.
Oracle was like that's leaving
your customers exposed for a

165
00:22:26,125 --> 00:22:32,708
month, you know. Says the
company that waits two years to
patch things crappily. Oracle

166
00:22:32,708 --> 00:22:38,708
has three months, a quarterly
patch update. So, after slagging
off Microsoft for doing a

167
00:22:43,333 --> 00:22:49,333
monthly patch cycle, Oracle will
do a three month, you know. So,
I think one of the things that

168
00:22:51,333 --> 00:22:56,750
Oracle doesn't like to do is be
like schooled by Microsoft but
they really should and one of

169
00:22:56,750 --> 00:23:02,500
the things we'll talk about is
SDR, the security development
life cycle and really ifÂ ââ

170
00:23:02,500 --> 00:23:06,500
I know Oracle says they've got
one but I see no evidence of it
at this stage of the game and

171
00:23:06,500 --> 00:23:13,125
this what we'll talk about
towards the end of the talk. So,
here is for all Microsoft SDL

172
00:23:13,125 --> 00:23:19,125
server products is the
comparison. So, this is Oracle
9R8 remember eventually that

173
00:23:21,833 --> 00:23:29,250
died out. So, all the way to
Oracle 12C, so this is all
Oracle's products. This is all

174
00:23:29,250 --> 00:23:34,500
Microsoft server products.
That's a pretty good record so
it sorter of those SDL is

175
00:23:34,500 --> 00:23:41,708
probably working. On the
leftâhand side of the graph is
the days when people who like

176
00:23:41,708 --> 00:23:47,708
myself were weekly kicking the
crap out of it basically. And at
that point Microsoft turned

177
00:23:49,917 --> 00:23:55,917
around and said you know what,
enough is enough. In fact, bill
gates trustworthy memo was at

178
00:23:58,250 --> 00:24:03,500
this time, they were
hemorrhaging customers and
what's important here is that

179
00:24:03,500 --> 00:24:08,208
they took everyone off, this is
unheard of in, you knowÂ ââ
at the time was unheard of, they

180
00:24:08,208 --> 00:24:14,750
took everyone off the
development review con and said
you know what, let's get back to

181
00:24:14,750 --> 00:24:20,667
sequel server 2000 and do code
review and the results have paid
off as far as I'm concerned.

182
00:24:20,667 --> 00:24:26,667
That's a fantastic graph
compared to that one. It was a
number of years before some

183
00:24:26,667 --> 00:24:32,667
decent bugs were found in it. I
think it was a bit more from
security assessment found a

184
00:24:35,500 --> 00:24:42,125
couple overflows or something
and again there's been so
manyÂ ââ so few flaws. I

185
00:24:42,125 --> 00:24:46,625
don't want to talk about IE
because IE doesn't follow this
track record so well, but when

186
00:24:46,625 --> 00:24:52,625
was the last time you saw a bug
in internet information server.
When you saw a decent overflow

187
00:24:58,708 --> 00:25:05,250
in exchange server? It was a
long time ago. They got the
service life down and it is due

188
00:25:05,250 --> 00:25:12,708
to the script. I don't know
what's going on with internet
Explorer. I think they're trying

189
00:25:12,708 --> 00:25:19,833
to compete with fire fox and
Chrome or something but those
guys are doing really well. You

190
00:25:19,833 --> 00:25:26,250
know, the other peopleÂ ââ
yeah, it's just like IE what is
going on? I'm confused. So they

191
00:25:26,250 --> 00:25:34,083
actually work for the same
company, they read the same
documentation. Where are we?

192
00:25:34,083 --> 00:25:41,167
Yeah. So, this is the
background. This is the back
drop to Oracle. And when I

193
00:25:41,167 --> 00:25:47,167
retired from the industry in
2010ish I went shark diving and
decided I'm never coming back.

194
00:25:49,625 --> 00:25:56,458
I'm back unfortunately. I
actually gave them a B plus am I
was like, you know, they've sold

195
00:25:56,458 --> 00:26:03,042
theÂ ââ oversold the PL
sequel injection problem so
that's pretty good. Their

196
00:26:03,042 --> 00:26:08,667
processes are looking comfier
and so on. When they're
releasing problems, like when

197
00:26:08,667 --> 00:26:16,667
Madden came out not bad Oracle,
B plus and I go away diving for
a couple years and I come back

198
00:26:16,667 --> 00:26:22,667
and I'm like what the hell.
What's going on? They revert
back and they're back to an F.

199
00:26:25,500 --> 00:26:30,708
We are going to be looking a the
something very, very simple.
Oracle data redaction. At any

200
00:26:30,708 --> 00:26:37,542
stage this isÂ ââ these are
points from the Microsoft SDL by
the way. If Oracle had an SDL in

201
00:26:37,542 --> 00:26:44,250
place, a decent one, any one of
these stages would have found
and stopped the bugs that I'm

202
00:26:44,250 --> 00:26:49,208
about to speak about in their
tracks. They would not have
reached the public. So,

203
00:26:49,208 --> 00:26:55,750
establish security and privacy
requirements, attack service
analysis, skipping through to

204
00:26:55,750 --> 00:27:01,958
the end, conduct a final
security review, okay. That
means pen test the product

205
00:27:01,958 --> 00:27:08,083
before it goes out the door.
Anyone with a mod come of SQL
would have found these bugs as

206
00:27:08,083 --> 00:27:12,583
far as I'm concerned. And I
think you'll agree with me by
the time you get to the end of

207
00:27:12,583 --> 00:27:18,583
this talk. So you're going to be
really disappointed so what is
Oracle data redaction? It's a

208
00:27:21,333 --> 00:27:28,583
simple but it's a great idea.
So, if you have a webÂ ââ a
database application there has

209
00:27:28,583 --> 00:27:34,667
some kind of potentially
confidential information in one
of the columns, for example,

210
00:27:34,667 --> 00:27:40,292
Eâmail addresses, passwords,
credit cards, whatever it
happens to be, you can redact it

211
00:27:40,292 --> 00:27:47,917
so what is presented to the
user, if they select from that
table, is a list of X's or

212
00:27:47,917 --> 00:27:52,625
whatever you want to redact it
with essentially. It's not a bad
idea. We don't have to change

213
00:27:52,625 --> 00:27:58,250
any redaction code. We change
the policy on a particular table
and if our web application is

214
00:27:58,250 --> 00:28:04,875
vulnerable and someone tries to
do a union collect stop in
customer kind of situation, you

215
00:28:04,875 --> 00:28:10,667
know, and snap all the juicy
stuff out there they're not
going to get the secret stuff

216
00:28:10,667 --> 00:28:15,542
because we redacted it. The no
change necessary to the
application code which is I

217
00:28:15,542 --> 00:28:23,042
think really cool. The problem
is at the door, this is in
Oracle 12C, the back port to

218
00:28:23,042 --> 00:28:26,333
Oracle 11 release, it's trivial
bypass. It failed within the
first five minutes of simple

219
00:28:26,333 --> 00:28:32,333
assessment so it's realÂ ââ
it really speaks to Oracle not
pen testing their products

220
00:28:38,583 --> 00:28:44,458
before theyÂ ââ in their
flagship product before they go
out the door. So, let's look at

221
00:28:44,458 --> 00:28:50,458
some demos. So, before we do
anything I'm going set up a
table called redaction tests and

222
00:28:55,917 --> 00:29:01,917
insert a fake credit card number
into it and then we'll commit
it. Okay. And now so if we

223
00:29:05,083 --> 00:29:11,083
select it. Can everyone see or
do I need to increase the font
size? Increase. Come closer.

224
00:29:13,792 --> 00:29:16,208
(Laughter). 

225
00:29:18,625 --> 00:29:24,625
>>> Let me see. All right. I'm
just going to modify the size of
the window now. Layout, width.

226
00:29:34,042 --> 00:29:40,042
All right. And zero. Okay. No, I
said zero. Okay, perfect. Okay,
so if we select from select CC,

227
00:30:05,833 --> 00:30:10,042
that's the name of the program
we're going to redact and ID
from redaction test see if we

228
00:30:10,042 --> 00:30:13,708
get the credit card. We don't
want the world seeing that
credit card. We're going to

229
00:30:13,708 --> 00:30:19,708
create a privacy on it and if we
grant select and update to
David, then connect as David, we

230
00:30:22,000 --> 00:30:28,000
do a select from the redaction
test table, we can see we get a
list of X's essentially so we

231
00:30:37,167 --> 00:30:42,250
can't see that date today. The
data has not been changed. The
data is still there, it's just

232
00:30:42,250 --> 00:30:48,708
the way it's been presented to
us has been modified. If I had
bypassed policy and stuff like,

233
00:30:48,708 --> 00:30:55,833
that redaction policy wouldn't
patch me and I would get to see
the stuff. If I was like a DBA

234
00:30:55,833 --> 00:31:01,833
for example I can see the data
but I'm not a DBA so I can't see
the data. All there is is the

235
00:31:04,083 --> 00:31:09,792
redacted data. Let's get the
data out. There are a couple of
X and L inquiries that allow you

236
00:31:09,792 --> 00:31:15,792
to run X inquiry. One of those X
and L inquiry functions is
called X and inquiry and it

237
00:31:19,042 --> 00:31:25,042
allows you to use theseÂ ââ
this is Q inquiry stuff and
we're using X and L inquiry

238
00:31:32,042 --> 00:31:39,417
function. Now, those of you who
do penetrate testing and get
involved in exploiting sequence

239
00:31:39,417 --> 00:31:45,417
injection rule understand the
importance of functions. We can
execute this X and L inquiry to

240
00:31:47,417 --> 00:31:49,583
get the unredacted data back. We
are going through a path that
they've forgot about. A simple

241
00:31:49,583 --> 00:31:55,583
pen test anyone with an idea of
how the Oracle data server works
and everything like that would

242
00:32:03,750 --> 00:32:09,792
have said they should probably
check X and L inquiry to see if
they can bypass redaction and of

243
00:32:09,792 --> 00:32:15,125
course you can. If you're going
toÂ ââ if you're looking for
information like, you know,

244
00:32:15,125 --> 00:32:21,125
monitor and everything like that
the X and L table function is
also vulnerable so it's not just

245
00:32:23,917 --> 00:32:29,917
sufficient to protect against X
and L inquiry. Table needs to be
do as well. These are trivial.

246
00:32:33,625 --> 00:32:39,625
This is SQL. One of the DML
operations update, we'll
concentrate on update has a

247
00:32:45,333 --> 00:32:51,750
returning into sub codes and
what returning into basically
says once I get this table if

248
00:32:51,750 --> 00:32:56,500
there's an auto column for
example a sequence that's
incremented or whatever return

249
00:32:56,500 --> 00:33:01,542
that value to me so I can
include it later on in a further
application code. This returning

250
00:33:01,542 --> 00:33:06,708
into feature, guess what? We
don'tÂ ââ it doesn't have to
be incremented or whatever. You

251
00:33:06,708 --> 00:33:13,958
can just basically specify
return the credit card column
information into this buffer and

252
00:33:13,958 --> 00:33:21,000
print it to the screen so there
we go. So, we can see what's
going on there. We've updated

253
00:33:21,000 --> 00:33:26,792
the redaction test column set
the ID to itself so it doesn't
modify data but it returns the

254
00:33:26,792 --> 00:33:32,792
credit card column into the
buffer and then printed the
buffer to the screen. So, again,

255
00:33:34,958 --> 00:33:41,458
trivial way. Anyone who has done
will know the returning into
clause. So anyone at Oracle who

256
00:33:41,458 --> 00:33:48,000
I assume they know SQL because
they work in Oracle would have
said well, do a pen test on this

257
00:33:48,000 --> 00:33:52,583
project and we got to check this
because without it you'll be
able to bypass redaction, you

258
00:33:52,583 --> 00:33:56,292
know. The predicate is
notÂ ââ is not checked
either so I would like to take

259
00:33:56,292 --> 00:34:02,292
credit for this one but turns
out Al Cornbusker had already
done this. He noticed that the

260
00:34:09,500 --> 00:34:15,542
web predicate was not protected
either so you could pass it to
UTL underscore HTTP, you know,

261
00:34:15,542 --> 00:34:21,292
dot request and send it tout
some server somewhere and
there's a couple other functions

262
00:34:21,292 --> 00:34:27,292
that can be used that generate
an error or alternatively what
you can do is simply force it.

263
00:34:29,583 --> 00:34:35,583
So we'll create aÂ ââ
creating a little procedure here
and let's talk about what it

264
00:34:39,292 --> 00:34:44,708
does. We select from the
redaction test table the where,
the credit card column sub

265
00:34:44,708 --> 00:34:50,708
string so we get the first
character of the proper credit
card column and convert it to a

266
00:34:57,625 --> 00:35:03,208
letter and check if that letter
is a zero, one, a two, a three,
a four up to nine. Once we find

267
00:35:03,208 --> 00:35:09,000
out what the answer is we then
go to the second character and
the third character and the

268
00:35:09,000 --> 00:35:15,000
fourth character. Essentially we
guess it as we go along. Now we
created that procedure where we

269
00:35:18,250 --> 00:35:24,250
can simply do a serverÂ ââ
sorry. So, if we execute that
little procedure now, it

270
00:35:30,917 --> 00:35:38,875
basically, you know, returns the
information. So, given that the
information once we can't get

271
00:35:38,875 --> 00:35:43,500
that information back from the
where inquiry unless of course
you're shelling out using UPI

272
00:35:43,500 --> 00:35:51,042
it's not protected its another
thing to be aware of. They can't
fix it in the where clause. The

273
00:35:51,042 --> 00:35:55,875
other stuff has been patched
apparently but this they can't
fix because they need to be able

274
00:35:55,875 --> 00:36:01,875
to inquiry in the predicate. So
just be aware of that if you are
using that redaction. If you

275
00:36:07,333 --> 00:36:12,875
have the privileges to execute
DDMS underscore redact you have
the privileges to create

276
00:36:12,875 --> 00:36:19,417
redaction policies in auto
people schemers. You have the
privileges to remove redaction

277
00:36:19,417 --> 00:36:23,167
qualities from other people
schemers. Again that's another
thing you need to be aware of.

278
00:36:23,167 --> 00:36:28,875
If you've got privileges on DDMS
redact you have control over
everyone basically. There is a

279
00:36:28,875 --> 00:36:36,583
thing called a lateral sequence
injection in most database sis
and what it essentially does is

280
00:36:36,583 --> 00:36:40,750
where there's information coming
from, say, environment variables
or stuff like that, that's

281
00:36:40,750 --> 00:36:48,583
considered obviously trusted,
you know, by database server and
often the developers will like,

282
00:36:48,583 --> 00:36:53,208
you know, do simple straight
encapsulation and that may
become vulnerable to sequence

283
00:36:53,208 --> 00:37:00,333
injection. For example,
inÂ ââ a couple years ago
people used to think if it was a

284
00:37:00,333 --> 00:37:06,333
number, you could not exploit a
numberÂ ââ numeric sequel
injection. You can because you

285
00:37:09,250 --> 00:37:15,625
can specify the number format in
a certain way that the comma or
the decimal sign is actually a

286
00:37:15,625 --> 00:37:22,417
letter. So, essentially we can
provided we can create a
synonym, we can create a

287
00:37:22,417 --> 00:37:27,917
function that eventually
isÂ ââ can calculate it as a
number and would be translate it

288
00:37:27,917 --> 00:37:33,917
into a, B01. If we have a B01
that gets executed. So, because
of developers thinking you

289
00:37:37,125 --> 00:37:42,000
can'tÂ ââ it's a number how
are you going get arbitrary SQL
into a number there is a way but

290
00:37:42,000 --> 00:37:48,042
they forgot about that. So
remember I spoke about PL sequel
injection almost being gone and

291
00:37:48,042 --> 00:37:54,083
Oracle doing a good job in that
regard. They have left all of
the numeric sequel injection

292
00:37:54,083 --> 00:37:58,917
flaws so typically this stuff
I'm sending them these days is a
numeric sequel injection flaw.

293
00:37:58,917 --> 00:38:04,917
But anyway, we have toÂ ââ
I've got five more minutes for
questions and stuff like that.

294
00:38:08,083 --> 00:38:14,833
So I'll wrap up. Just last
point. As I said this is basic
stuff. A pen test of the product

295
00:38:14,833 --> 00:38:19,083
before it was shipped should
have found this stuff and this
really speaks to the Oracle

296
00:38:19,083 --> 00:38:25,583
security processes so going back
to what Mary Anne Davidson said,
the beginning, you know, that I

297
00:38:25,583 --> 00:38:30,792
spoke about, holding the vendors
to a higher standard, well, this
is what we need to do. If you

298
00:38:30,792 --> 00:38:34,000
don'tÂ ââ if you're running
Oracle database servers and you
don't like the way they're

299
00:38:34,000 --> 00:38:40,000
treating you as far as security
is concerned get on the phone to
them and tell them I'm going to

300
00:38:43,042 --> 00:38:49,042
start buying something else
instead because we really need
to get this improved. So thank

301
00:38:52,333 --> 00:38:58,333
you for listening. Are there any
questions? >> (Inaudible). >>
Sure. Oracle, which features? >>

302
00:39:01,667 --> 00:39:06,125
(Inaudible). >> Database 12. No,
I haven't. But I know other
people have doneÂ ââ sorry.

303
00:39:06,125 --> 00:39:10,583
Oracle database, I have played
with Oracle database 12 yet. I
know some other people have done

304
00:39:10,583 --> 00:39:13,958
great research in that area and
I can't think of who it was off
the top of my head but if you

305
00:39:13,958 --> 00:39:17,208
Google it, you know, you'll find
it but it's on my list to do
because they've patched a lot of

306
00:39:17,208 --> 00:39:23,208
stuff. The same with audit volt
as well. I suspect it's going to
be like the rest of Oracle

307
00:39:37,333 --> 00:39:43,333
product. Sure. Any other
questions. Sure. In the front
here. >> (Inaudible). >> I'm

308
00:39:46,083 --> 00:39:53,542
sorry? >> (Inaudible). >> It
should be, yeah. You just need
to ââ yeah. Right. I think

309
00:39:53,542 --> 00:40:00,125
we'll wrap up. I thank you
everybody for attending.
Hopefully it was useful.

310
00:40:00,125 --> 00:40:02,125
(Applause). >> Sorry. >>
(Inaudible). >> So, I used to
but these daysÂ ââ I don't

311
00:40:02,125 --> 00:40:04,125
really want to get involved in
that. That's the thing. They
should be. They should have a

312
00:40:04,125 --> 00:40:06,125
checklist to make sure. Exactly,
yeah. >> (Inaudible). >> We
have, yeah, yeah. >>

313
00:40:06,125 --> 00:40:08,125
(Inaudible). >> Yeah. Did I say
that? Well, don't quote me on
that. I'm not talking about

314
00:40:08,125 --> 00:40:10,125
data, soÂ ââ I don't want to
ââ yeah. All right, thank
you. 

