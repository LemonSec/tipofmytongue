1
00:00:00,042 --> 00:00:04,417
>>So, good morning and welcome.
I know this is kind of early
Sunday morning. Appreciate you

2
00:00:04,417 --> 00:00:08,292
guys all being here. Today we're
going to be talking about
hacking and implanting a

3
00:00:08,292 --> 00:00:14,292
DropCam. So we both work at the
R and D team at Synack. My name
is Patrick Little. I worked at

4
00:00:17,625 --> 00:00:23,625
various acronym places. I'm the
director of research at Synack.
>> I'm Colby Moore. I work at

5
00:00:27,625 --> 00:00:33,625
Synack as a research engineer.
>> Security ninja I think. >>
First a brief overview of

6
00:00:39,208 --> 00:00:46,417
DropCam then how we got a root
shell on the device. We'll talk
about some vulnerabilities we

7
00:00:46,417 --> 00:00:51,417
found and then finally we want
to present a persistent implant
that we designed for DropCam.

8
00:00:51,417 --> 00:00:57,417
First let's talk a little bit  ‑
‑ get a little bit of overview
talk about some background

9
00:00:59,750 --> 00:01:06,167
information, talk about what
DropCam is. Before jumping in I
think it's a good idea to

10
00:01:06,167 --> 00:01:12,167
concisely define any possible
ambiguous terms especially since
it can be confusing. When we

11
00:01:12,167 --> 00:01:20,000
talk about implants we're
talking about persistent code
that is malicious. Intercepting

12
00:01:20,000 --> 00:01:26,000
function calls by installing a
hook or a detour. A Trojan is
malicious piece of software that

13
00:01:28,417 --> 00:01:35,625
pretends to be something it
isn't. Injection is about
getting code into a process and

14
00:01:35,625 --> 00:01:41,625
finally a back door is some code
that provides, you know,
undetected remote control. So

15
00:01:51,667 --> 00:01:56,125
what is a DropCam? Well, as you
can see from their definition
it's a cloud based video wifi

16
00:01:56,125 --> 00:02:02,125
solution. The core of it is the
camera. So besides incredible
simple setup, it features cloud

17
00:02:04,333 --> 00:02:11,792
recording night vision, two way
talks and intelligent alerts.
Now one of the main fields of

18
00:02:11,792 --> 00:02:17,792
DropCam is its trivial set up.
All the camera needs is the name
and password of your wireless

19
00:02:19,833 --> 00:02:24,625
network. There's two ways to do
this. This configuration can be
done by plugging the camera into

20
00:02:24,625 --> 00:02:31,208
a commuter with a USB or a smart
phone that has bluetooth. The
camera will be connected to

21
00:02:31,208 --> 00:02:38,000
their wifi network. From then on
its fully autonomous. It will
stream audio and video to the

22
00:02:38,000 --> 00:02:44,000
cloud and beacon to the DropCam
server for updates. So a lot of
IT based video solutions out

23
00:02:46,458 --> 00:02:53,208
there so what's special about
DropCam. Well now DropCam is
owned by Google and Google has

24
00:02:53,208 --> 00:02:58,000
indicated it will become the
core of their push to connect at
home. Soon there will be

25
00:02:58,000 --> 00:03:02,750
DropCams everywhere. When we
started this research we didn't
know Google was going to buy

26
00:03:02,750 --> 00:03:08,750
DropCam. It's really popular.
You see it all over. Secondly it
shows up in interesting places

27
00:03:14,083 --> 00:03:20,083
like homes and offices. Again,
the bay area, all the startups
use DropCams for their security

28
00:03:22,292 --> 00:03:28,542
solutions and finally it's kind
of a juicy target that has some
really cool capabilities that we

29
00:03:28,542 --> 00:03:33,667
thought were pretty powerful and
were begging to be abused. Now
we'll talk about rooting a

30
00:03:33,667 --> 00:03:39,375
DropCam. So, based on the
network, it's. The first thing
to do is get the camera opened.

31
00:03:39,375 --> 00:03:44,333
Conveniently DropCam left us
this mysterious letter right
here. Probing around revealed

32
00:03:44,333 --> 00:03:50,333
what looks like the 3.3‑ volt UR
on there. So, hooked it up to
the serial USB connector you

33
00:03:56,083 --> 00:04:02,083
guys are all familiar with and
here's a little photo showing
our ground connection. So after

34
00:04:09,667 --> 00:04:15,667
a quick reboot, DropCam through
the  ‑ ‑ really no luck. So, I
suppose I should probably

35
00:04:24,750 --> 00:04:31,083
mention the DropCam is running
on a Linux system on chip from a
company called amber based in

36
00:04:31,083 --> 00:04:37,083
the bay area. We figured we
would take more of a Linux view
approach. So, we started to go

37
00:04:41,875 --> 00:04:46,792
up to the boot loader. If you
hold enter on power on or you
short the transmit and receive

38
00:04:46,792 --> 00:04:52,083
line when you power on the
device it should drop you to the
bootlegger. Now, looking at the

39
00:04:52,083 --> 00:04:58,083
boot loader we got a couple
operations. The set didn't look
too promising. Looks like

40
00:05:01,542 --> 00:05:07,542
there's an operation to change
the boot parameters. Went ahead
and changed the input parameter.

41
00:05:14,708 --> 00:05:20,708
And that worked . (Laughter). >>
Now we got to get rid of that
password. So, we checked out

42
00:05:23,083 --> 00:05:29,083
shadow and it wouldn't open so
looks like it was  ‑ ‑ it gave
us the necessary information

43
00:05:35,375 --> 00:05:41,958
needed. We mounted it up and now
we have access to the file, went
ahead and just knocked out the

44
00:05:41,958 --> 00:05:48,708
patch and saved, went ahead and
rebooted and reset the boot
parameters in the boot loader

45
00:05:48,708 --> 00:05:54,708
and rebooted the boom. Full
feature root shell. We kind of
have a little bit of a different

46
00:05:58,375 --> 00:06:04,375
opinion. So we're going to talk
a little bit about the  ‑ ‑
first let's talk about the

47
00:06:08,250 --> 00:06:13,125
environment. Since we have a
root shell we cannot poke around
in explore. The DropCam is

48
00:06:13,125 --> 00:06:20,000
running armed 32 bit Linux and
the heart of the DropCam is this
connect executable. We'll talk

49
00:06:20,000 --> 00:06:26,000
about that a lot later. Also
left all sorts of goodies on the
device for us, drop bear, GB

50
00:06:30,083 --> 00:06:36,083
server. So, overall, DropCam is
decently secured. There were no
exposed network services. All

51
00:06:38,917 --> 00:06:44,875
communications were SSL drop
load. And the DropCam employs
device specific provisioning

52
00:06:44,875 --> 00:06:48,917
from the factory and that's
likely why we couldn't drop the
boot password. It employs

53
00:06:48,917 --> 00:06:54,917
automatic updates and the push
cam hold devices request so it's
pretty row bust in that sense.

54
00:07:01,250 --> 00:07:07,250
But let's take a look at the
first bug. The camera but it's
vulnerable. So, what can we do

55
00:07:12,292 --> 00:07:18,292
with that? DropCam says our
cameras communicate with anyone
only DropCam services. That's

56
00:07:21,875 --> 00:07:27,875
not true. It will download the
camera's private and public to
use among other applications.

57
00:07:32,500 --> 00:07:37,333
So, realistically now that we
have these what can we do.
Normally the DropCam talks to

58
00:07:37,333 --> 00:07:43,250
the cloud by SS and will user
devices gets the video from the
cloud. You should know it

59
00:07:43,250 --> 00:07:49,250
authenticates the same feed we
stole. Provide false video to
the cloud DVR. Should the user

60
00:07:54,500 --> 00:08:02,458
really trust what they're
seeing? We notified DropCam of
this bug and they patched it. If

61
00:08:02,458 --> 00:08:08,458
anybody happens to have a
certificate, we don't, there's
nothing the consumer can really

62
00:08:11,208 --> 00:08:16,833
do at this point. So then for
most of its functionality
DropCam, the version is

63
00:08:16,833 --> 00:08:22,833
outdated. Basically it's an old
bug there allows command
injection via malicious. Use

64
00:08:25,458 --> 00:08:31,458
area assembly to inject commands
using the host name parameter.
This is only triggered if the

65
00:08:35,292 --> 00:08:40,875
host name is used by another
utility. But we checked out the
vulnerable source code and

66
00:08:40,875 --> 00:08:46,375
compared it to the disassembly
from DropCam and it definitely
matches. So, we weren't able to

67
00:08:46,375 --> 00:08:49,875
trigger this bug right now about
DropCam isn't using the host
name in a way that would trigger

68
00:08:49,875 --> 00:08:55,875
this. So, all those bugs are
pretty cool. We had to open up a
camera. Wouldn't it be nice if

69
00:08:57,958 --> 00:09:05,458
we could implant the device
without opening it up. Luckily
there's an app for that. It's

70
00:09:05,458 --> 00:09:10,250
called direct USB. We found a
copy somewhere on the dark part
of the internet. If you hold

71
00:09:10,250 --> 00:09:16,250
down the button on the back of
the cam remark the button
DropCam swears does nothing, if

72
00:09:18,292 --> 00:09:23,167
you hold it down, there's a firm
update code and we believe this
was how the device was

73
00:09:23,167 --> 00:09:29,167
commissioned at the factory. We
were able to read and write
untimed data together.

74
00:09:32,458 --> 00:09:36,500
(Inaudible) we call that  ‑ ‑ a
user may use their computer  ‑ ‑
to this to do this the camera is

75
00:09:36,500 --> 00:09:42,500
plugged into the computer and
then it mounts part of the
camera. Its utility which

76
00:09:53,208 --> 00:10:00,833
requests root privileges to run
gets the SSID and password at
the wifi network and then pop

77
00:10:00,833 --> 00:10:04,625
gates that back to the camera.
The end result is a connected
and configured camera.

78
00:10:07,125 --> 00:10:12,125
Unfortunately this application
which runs the boot is writable
so an approval concept a

79
00:10:12,125 --> 00:10:19,417
nonprivileged hacker can wait
until any DropCam is plugged in.
It can inject a malicious pay

80
00:10:19,417 --> 00:10:25,625
load into the mounted DropCam
setup utility. Now when the
application is run an elevated

81
00:10:25,625 --> 00:10:32,458
utility hacker code. The Windows
installer set up privilege has a
considerable vulnerability as

82
00:10:32,458 --> 00:10:38,458
well. CEO of DropCam said their
cameras only talk to DropCam
server which is discounting

83
00:10:42,333 --> 00:10:48,333
things like heart bleed is true.
SSL pining is a extra layer of
security that ensures a client

84
00:10:54,125 --> 00:10:58,792
will only communicate with a
well defined set up service.
Since the DropCam iOS

85
00:10:58,792 --> 00:11:05,458
application does not use SSL
pining man in the middle attack
can occur. If an attacker has

86
00:11:05,458 --> 00:11:11,750
compromised root certificate or
coerces the user to install a
certificate sending them E‑ mail

87
00:11:11,750 --> 00:11:17,667
connection can be man in the
middle. So here we have a
capture showing a man in the

88
00:11:17,667 --> 00:11:22,833
middle attack action actually
against my own phone. It reveals
a user name and password for a

89
00:11:22,833 --> 00:11:28,833
DropCam account. Now since
DropCam does not use dual
DropCam or as session alerts an

90
00:11:31,083 --> 00:11:38,792
attacker can surreptitiously spy
on the user at any time. This is
really good for the bad guys, no

91
00:11:38,792 --> 00:11:44,792
the good for the rest of us. >>
Now that we have a good way to
implant the camera let's have

92
00:11:46,833 --> 00:11:52,833
some fun. Introducing our full
featured implant. keeping the
row bust capability of the

93
00:12:01,542 --> 00:12:07,333
DropCam as malicious software
should you want to be able to
intercept a room, here you want

94
00:12:07,333 --> 00:12:15,000
to hot‑ mic a room, propagate,
we wander to be able to Geo
locate the DropCam so we send a

95
00:12:15,000 --> 00:12:21,000
bunch out in the wild. We want
to be able connect a basic serve
an device. We need a method for

96
00:12:40,833 --> 00:12:46,833
other devices on DropCam's
network. We also need a method 
‑ ‑ sorry. Okay. Any way. So,

97
00:12:51,917 --> 00:12:57,917
our implant comes with a
function. It's easy when you're
sleeping, he knows if you're

98
00:13:00,042 --> 00:13:06,042
awake, he knows if you've been
bad or good like the NSA. So in
a real world scenario how do we

99
00:13:10,042 --> 00:13:13,917
install our software. Currently
we don't have remote code
execution but there's a lost

100
00:13:13,917 --> 00:13:19,167
options. We can intercept the
package in transit, we could
maybe give the DropCam to

101
00:13:19,167 --> 00:13:25,167
somebody or we could break and
enter and modify. Realistically
that stuff never happens, right?

102
00:13:31,167 --> 00:13:37,125
No further comment. We approach
DropCam about this and they were
convinced an adversary wouldn't

103
00:13:37,125 --> 00:13:43,625
be able to reach a DropCam. Then
alone would be an inappropriate
anti‑ tampering mechanism. What

104
00:13:43,625 --> 00:13:49,625
do you guys think? Now what
about sending one as a gift.
Incubator space was broken into.

105
00:13:56,125 --> 00:14:03,208
Security cameras implement?
Probably not. Breaking entering
scenario plausible? Only one

106
00:14:03,208 --> 00:14:09,208
third of user sign up for
DropCam's depository. Even then
if you showed up with a wifi

107
00:14:12,167 --> 00:14:20,083
camera the camera doesn't patch
into the video local. So what
makes DropCam a good target? The

108
00:14:20,083 --> 00:14:24,708
DropCam CEO said all software
products are susceptible to
jailbreak. That's true. We tend

109
00:14:24,708 --> 00:14:29,292
to agree with that. The DropCam
really is low hanging fruit.
Here are the other options.

110
00:14:32,625 --> 00:14:36,875
Someone can go after a computer,
they can go after  ‑ ‑ you got
to crack it opened and you can't

111
00:14:36,875 --> 00:14:42,875
see it, can't hear it there's a
lot of things. It can go after a
gaming console, go after a

112
00:14:47,625 --> 00:14:53,625
mobile phone, run time code and
it's off person. So the DropCam
you don't need to open it up. No

113
00:15:02,375 --> 00:15:08,458
password, no signed code, the
operating system is open source,
its always on, there's tons of

114
00:15:08,458 --> 00:15:14,458
capabilities and who is going to
suspect a security camera is
spying? So. >> So in order to

115
00:15:20,375 --> 00:15:23,958
create an advanced. REPORTER
Plant we need to fully
understand how the DropCam

116
00:15:23,958 --> 00:15:30,333
works. In other words we had to
answer questions such as how
does it hear see or think, what

117
00:15:30,333 --> 00:15:38,083
is its core logic, the main
module and finally can this be
manipulated or rewired. The

118
00:15:38,083 --> 00:15:42,625
DropCam has many hardware and
software components. However
these all kind of come together

119
00:15:42,625 --> 00:15:48,208
in the connect wire, which we'll
be talking about lot. The brain
of the camera, it contains most

120
00:15:48,208 --> 00:15:52,917
of DropCam specific operations
such as talking through the
audio and video devices,

121
00:15:52,917 --> 00:15:58,917
streaming content from the cloud
and also handling or executing
command that are received from

122
00:15:58,917 --> 00:16:04,917
DropCam service. The connect
binary is hacked, UBX which is
not normal Al problem. When we

123
00:16:07,000 --> 00:16:13,208
tried to unpack it, it failed.
Since we wanted a full unpack
that would make everything easy

124
00:16:13,208 --> 00:16:20,458
from the bugging to the analysis
we decided to look into this a
little more. Now the unpacker

125
00:16:20,458 --> 00:16:26,458
stub matched the UBS source code
indicating it wasn't custom
version. Single step through

126
00:16:33,250 --> 00:16:39,250
unpacking self instructions and
follow it along in UBX source
code which wasn't fun. The code

127
00:16:42,500 --> 00:16:48,667
was checking a value within the
binary and then branching into a
code path or a hacking shared

128
00:16:48,667 --> 00:16:55,833
library that unfortunately
errored out. Now connect is a
normal executable, it's not a

129
00:16:55,833 --> 00:17:01,833
shared writable code. We decided
to write a small Python script.
Once we did this we then

130
00:17:08,375 --> 00:17:10,917
reinspected UBX and that works.
Connect was fully unpacked which
was really nice. Using the

131
00:17:10,917 --> 00:17:16,917
inverse of this technique, so
setting that member in the
header we were able to create

132
00:17:23,958 --> 00:17:30,542
unpackable binaries as well. >>
So now that we've talked about
capabilities we'll talk about

133
00:17:30,542 --> 00:17:37,667
the core of our impact. We
wanted to create something
simple and have the ability to

134
00:17:37,667 --> 00:17:44,917
leverage third party libraries.
So, high functioning. Cross
compiled and stripped down

135
00:17:44,917 --> 00:17:50,917
Python. And then Python then
extracted the ram and implants.
We have an implanted camera but

136
00:18:01,000 --> 00:18:05,792
how is it going to talk to us?
All coms are done over HGTPS.
Our command and control and

137
00:18:05,792 --> 00:18:11,792
streaming data are set on
separate channels and CNC
channels are set on the same as

138
00:18:14,250 --> 00:18:21,250
DropCams. Given the nature of
our COM's it really wouldn't be
that easy to tell the difference

139
00:18:21,250 --> 00:18:27,042
between a drop  ‑ ‑ our  ‑ ‑
regular DropCam traffic and our
implant or even create

140
00:18:27,042 --> 00:18:33,042
appropriate IDS rules.
Connection's legit. What about
if we wanted to ship a ton of

141
00:18:35,875 --> 00:18:43,000
these cameras out into the wild?
How will we know where they'll
end up? Wifi server and ships it

142
00:18:43,000 --> 00:18:49,000
back to the CNC server. They
send it back to Google and
returns the device location.

143
00:18:51,792 --> 00:18:57,792
Thanks Google. >> We also wanted
our implanter to autonomously.
Since we (Inaudible) we actually

144
00:19:02,500 --> 00:19:08,500
controlled the setup application
as well so we simply replaced it
with a malicious. Now whenever

145
00:19:10,958 --> 00:19:16,958
the user runs the implant or the
setup application they're
actually running the implant

146
00:19:20,500 --> 00:19:25,625
first. We often use a holograph
attack so it's hard to tell
which binary is the malicious

147
00:19:25,625 --> 00:19:33,000
one. We also made sure to
disable the bluetooth setup so
the user was forced to plug the

148
00:19:33,000 --> 00:19:39,417
camera into the computer in
order to couldn't figure us
which insured they would infect

149
00:19:39,417 --> 00:19:45,417
their computer. Apple  ‑ ‑ some
of these are bypassable while
others can be avoided altogether

150
00:19:49,375 --> 00:19:55,375
which allows our implant to
execute freely. So if you want
more information we gave a talk

151
00:19:58,833 --> 00:20:04,833
about this stuff at shock a con.
This talk describes bypasses for
Apple's anti‑ virus component,

152
00:20:09,750 --> 00:20:17,458
gatekeeper, the sand box and
even sign coding on fios
unsigned kernel module  ‑ ‑ so

153
00:20:17,458 --> 00:20:23,458
sorry apple. A major component
of our implant is the ability to
grab and manipulate audio and

154
00:20:32,667 --> 00:20:38,625
video. Data is read from these
devices streamed to the DropCam
cloud servers where it can be

155
00:20:38,625 --> 00:20:44,708
seen by the user. First I want
to talk about how our implant is
able to hot‑ mic the camera.

156
00:20:44,708 --> 00:20:52,042
Since the connect binary
exclusively opens the audio card
it has to inject a module into

157
00:20:52,042 --> 00:20:58,292
the connect process. Here are
the various relevant components.
The connect binary is continuing

158
00:20:58,292 --> 00:21:05,000
reading the audio stream.
Injected module can install a
hook and gain access to the

159
00:21:05,000 --> 00:21:12,750
audio stream and then install it
to our command and control. Our
DropCam uses a standard

160
00:21:12,750 --> 00:21:18,750
(Inaudible). So to get the audio
it invokes suspend MCM read end
function which retrieves audio

161
00:21:21,667 --> 00:21:28,625
framed audio. This is where the
implanter installs its audio.
Again the goal is to clone the

162
00:21:28,625 --> 00:21:34,167
audio and stream to the server
while letting it use parallel up
to DropCam. So here's the code

163
00:21:34,167 --> 00:21:40,167
that is inserted as an auto
hook. This code gets appointed
to the original send PCM read

164
00:21:44,667 --> 00:21:49,833
function invokes it and
exfiltrates any data or audio
that's captured so pretty

165
00:21:49,833 --> 00:21:57,208
straightforward. Now, on to the
video. By disassembling the
connect binder we were able to

166
00:21:57,208 --> 00:22:03,208
control how the video accesses
and streams. You can see it
opening the video which is slash

167
00:22:06,833 --> 00:22:12,833
IED. This device is backed by a
chip that does all the video
processing in hardware for

168
00:22:15,292 --> 00:22:20,917
obviously. Second disassembly
showed the  ‑ ‑ luckily there
were some comments or error

169
00:22:20,917 --> 00:22:26,917
message in the disassembly so we
could maybe kind of get the name
of the Ioctal which gave us some

170
00:22:40,417 --> 00:22:45,125
insight into what it was doing.
We wanted to clone the video and
stream it to the implant

171
00:22:45,125 --> 00:22:49,792
servers. Undo you meaned eye
octal resulted in a ton of
reverse engineering. We got it

172
00:22:49,792 --> 00:22:55,792
all figured out and we want to
describe that here. So. So first
you open the slash tab slash IAD

173
00:22:58,292 --> 00:23:04,292
device. You then match the bit
stream buffer memory and a
digital signal process. Now

174
00:23:10,458 --> 00:23:17,375
after you check that the video
is actually up loaded the video
stream can be read with IAD read

175
00:23:17,375 --> 00:23:23,375
bit stream  ‑ ‑ bit stream
EXIoctal. It actually allows you
to stream the video to a server

176
00:23:28,833 --> 00:23:34,250
or DVR of your choice. Save your
money so you don't have to pay
DropCam $30 a month to store

177
00:23:34,250 --> 00:23:38,458
your video and it prevents
Google from seeing what's going
on. That's kind of a cool

178
00:23:38,458 --> 00:23:45,958
feature. I don't want Google to
see what I'm up to. Now we could
clone the video feed send it to

179
00:23:45,958 --> 00:23:51,833
our implant server parallel to
DropCam but we thought we wanted
to take this a step farther and

180
00:23:51,833 --> 00:23:56,708
actually manipulate the live
video screen on the device. To
do cool things in the movies for

181
00:23:56,708 --> 00:24:04,458
example making an attacker
invisible. Here are the various
relevant components. The video

182
00:24:04,458 --> 00:24:10,083
card is going to generate frames
which will in this example show
the attacker breaking in or

183
00:24:10,083 --> 00:24:16,375
doing some bad things. We really
don't want that. However the
injected module will intercept

184
00:24:16,375 --> 00:24:21,292
each frame and inject other
frames. These injected frames
will then be streamed to the

185
00:24:21,292 --> 00:24:29,167
cloud instead and actually back
which will hide the attacker.
Take a little bit of a closer

186
00:24:29,167 --> 00:24:36,333
look. Here's the video device
and the connect binary which is
reading frames. The injected

187
00:24:36,333 --> 00:24:40,917
module installs another hook
this time it's an eye octal and
watches for the IOC read bit

188
00:24:40,917 --> 00:24:46,917
16's IOCTAL. It populates a
structure with various values.
Through reverse engineering we

189
00:24:52,083 --> 00:24:56,958
were able to determine what the
values were. Some of the
relevant ones include the frame

190
00:24:56,958 --> 00:25:02,958
number, the address to the
frame's raw encoded data, the
frame type and finally the frame

191
00:25:05,375 --> 00:25:11,750
size. Now the easiest way to
manipulate the video screen is
just to wait for and then moving

192
00:25:11,750 --> 00:25:19,458
forward you can either just
replay the frame or actually
inject other full screen frames

193
00:25:19,458 --> 00:25:25,458
as well. Other frames are not
ideal because H26 encoding
pretty much encodes Deltas.

194
00:25:25,458 --> 00:25:31,458
These JPEG full frames happen
every second, so it's pretty
easy to wait for them and then

195
00:25:34,792 --> 00:25:40,250
use them moving forward. So,
video demo time I'm wanted to
show you how we can

196
00:25:40,250 --> 00:25:45,167
transparently lock the video
stream. If you look at the top
left is the DropCam feed so this

197
00:25:45,167 --> 00:25:49,458
is what the user's going to see
and this is what we're
manipulating. The top right is a

198
00:25:49,458 --> 00:25:56,000
shot from an external camera,
bottom left is a CIS log input.
All right. Sorry, this is a

199
00:25:56,000 --> 00:26:02,000
little... all right, so if you
look at an attacker's window
they're going to then run the

200
00:26:04,458 --> 00:26:10,458
unable command to activate the
video log. You then see  ‑ ‑
(Laughter). 

201
00:26:13,250 --> 00:26:19,417
>>> And attacker that somehow
looks like. The video now is
lost frame, injecting the frame.

202
00:26:19,417 --> 00:26:25,417
You can see the camera is still.
Then we run the disable command
which tells the camera to

203
00:26:31,500 --> 00:26:37,500
rethink and then it's going to
flip back. Now I'm sure the mom
is going to accept this child as

204
00:26:37,500 --> 00:26:43,500
one of their own. (Laughter). 

205
00:26:53,333 --> 00:26:59,333
>>> All right. How do we control
it? So, naturally on the main
screen all the cameras call back

206
00:27:15,250 --> 00:27:21,042
with their name locations so
targeting is super easy. From
there it's easy to select a

207
00:27:21,042 --> 00:27:27,042
target to be sent down to the
drop kit. The camera calls home
to the server at a standard

208
00:27:31,000 --> 00:27:37,833
interval. Job results. If a
series of completed  ‑ ‑ here we
have a series of completed and

209
00:27:37,833 --> 00:27:44,958
unsent jobs cued up as an
execute  ‑ ‑ there are several
completed surveys. It is also

210
00:27:44,958 --> 00:27:52,125
completed in the wall. For the
next part we need a bit of a
disclaimer. What we're about to

211
00:27:52,125 --> 00:27:58,125
do is theoretically possible on
any process not just DropCam.
Easy enough and there's lots of

212
00:28:00,333 --> 00:28:06,708
free space inside of DropCam
it's conceivable. Someone turn
this device into a server

213
00:28:06,708 --> 00:28:12,708
weapon. Most embedded systems
contain a GPI. Since we don't
have the device schematic

214
00:28:20,000 --> 00:28:26,000
generally founded on wanted to
use a  ‑ ‑ in this case decided
interface with the DropCam

215
00:28:31,208 --> 00:28:37,208
status. Stats LAD hides. We need
add way to do this intelligently
because the light comes on

216
00:28:40,542 --> 00:28:46,792
randomly and we didn't want to
be setting off whatever we're
doing intermittently. So, here's

217
00:28:46,792 --> 00:28:53,333
some code do show what we D we
figured out how to separate in
the a loop up there. Then we

218
00:28:53,333 --> 00:28:58,375
installed the mic to listen to
the square wave of what we're
generating. It's looking for

219
00:28:58,375 --> 00:29:03,750
that frequency. When the
microphone gets the frequency
something happens. If the camera

220
00:29:03,750 --> 00:29:09,750
starts blinking get out of the
way. Here's one possible
scenario. Please note that the

221
00:29:12,542 --> 00:29:18,250
following is in compliance with
all local laws and you should
not try this at home. >> ¶¶ >>

222
00:29:18,250 --> 00:29:22,833
Tragic. (Laughter). >> That's a
wrap. You probably heard the
beginning of things is blowing

223
00:29:22,833 --> 00:29:28,833
up. Again I'm Patrick and this
my co‑ worker Colby. Feel free
to contact us. Probably won't

224
00:29:41,000 --> 00:29:47,000
plug in any devices you send us.
Yeah, are there any questions
now? We have a few extra

225
00:30:01,292 --> 00:30:07,292
minutes. Yes, in the front. >>
(Inaudible). >> So the question
was while we're hooking the

226
00:30:19,333 --> 00:30:25,333
video and audio up did we see
any degradation in the
performance of the device. Since

227
00:30:37,375 --> 00:30:43,375
we were hooking pretty well
level, we pretty much them
copying them off and putting

228
00:30:46,542 --> 00:30:52,542
that in a shared buffer where
code would take it off and do
there. In our testing we didn't

229
00:31:31,375 --> 00:31:37,375
see any specific degradation or
anything. Sometimes the video
stream goes in and out anyway,

230
00:31:40,208 --> 00:31:48,083
so, it's independent of us. Any
other questions? Awesome. Thanks
again. Remember, don't trust

231
00:31:48,083 --> 00:31:52,625
cameras from strangers.
(Laughter). >> Can we have some
love for these guys. >> Thank

232
00:31:52,625 --> 00:31:54,625
you, DEF CON. >> All right.

