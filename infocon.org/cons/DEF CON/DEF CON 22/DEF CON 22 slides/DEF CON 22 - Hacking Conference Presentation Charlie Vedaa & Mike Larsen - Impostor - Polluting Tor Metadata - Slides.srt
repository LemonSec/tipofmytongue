1
00:00:00,042 --> 00:00:06,042
This is Charlie Vera and Mike
Larson and Paul Strip polluting
Torrent Meta Data. Awesome.

2
00:00:09,250 --> 00:00:15,250
Thank you! Alright we know that
this is going to get a lot of
press attention we want you all

3
00:00:18,750 --> 00:00:24,583
to use our logo in anything you
write about this please. Alright
we are going to move quick

4
00:00:24,583 --> 00:00:31,167
because we appreciate that you
are busy so that TLDR is that.
Intrusion detection systems can

5
00:00:31,167 --> 00:00:36,708
and do sniff out to our users.
And we think that's bullshit. So
we brought false positives for

6
00:00:36,708 --> 00:00:43,125
everybody. The Torrent overview.
There is directory authorities
you get a consensus doc that

7
00:00:43,125 --> 00:00:51,000
your client caches and it's so
similar to HTTPS, HTTP and HTTPS
that we can make your web

8
00:00:51,000 --> 00:00:57,000
browser generate false positives
in an IDS. We understand there's
always opportunity costs we've

9
00:01:10,792 --> 00:01:16,083
made some attempts to reduce it
other talks going on at the
conference that you're missing.

10
00:01:16,083 --> 00:01:22,083
It's up. There's some car
hacking going on. We decided to
cover the physical portion of

11
00:01:47,542 --> 00:01:52,542
the hack backers way to car
hacking. 

12
00:01:52,542 --> 00:02:00,167
>>>: They covered the digital
part when full coverage for car
attack. Alright. I'm the graph

13
00:02:00,167 --> 00:02:06,167
designer. I created that awesome
logo that you saw I dabble in
security cause privacy is the

14
00:02:09,250 --> 00:02:13,875
utmost importance. Yes so just
like you were interested in
security and privacy but were

15
00:02:13,875 --> 00:02:17,875
also interested in arts and
crafts here's one of our
projects 

16
00:02:17,875 --> 00:02:23,667
>>>: Ah yeah. The the fake the
badge contest. If you go you go
to June and show them your fake

17
00:02:23,667 --> 00:02:28,833
badge you win a black badge. So
do that. 

18
00:02:28,833 --> 00:02:34,833
>>>: OK. So if you download
Torrent warning number 6 of 6 on
the down load page, is that, the

19
00:02:37,250 --> 00:02:41,917
fact that you're using Torrent
like it provides the anonymity
in the sense that people

20
00:02:41,917 --> 00:02:44,833
monitoring the wire can't see
where you're going but it
doesn't hide the fact that you

21
00:02:44,833 --> 00:02:50,292
are using Torrent So the wording
on this is a little, is a little
vague on the webpage but

22
00:02:50,292 --> 00:02:56,917
essentially it means an IDS can
detect that you are using
Torrent and log it. And

23
00:02:56,917 --> 00:03:02,083
sometimes this can have real
consequences like in the case of
the Harvard bomb threat kid. So

24
00:03:02,083 --> 00:03:07,083
if you're unfamiliar. Kid wanted
to get out of finals. He sent an
email via Gorilla Mail

25
00:03:07,083 --> 00:03:12,250
connecting over Torrent. Turns
out he was one of the handful of
Torrent users on the Harvard

26
00:03:12,250 --> 00:03:16,833
Campus at the time. So the same
day they were able to track down
trough the logs and interview

27
00:03:16,833 --> 00:03:20,500
him and get a confession.
Although he hasn't been formally
indicted yet. 

28
00:03:23,542 --> 00:03:28,375
>>>: Is Torrent safe? That
depends on what safe means.
Understanding Torrent, they are

29
00:03:28,375 --> 00:03:32,917
pretty up front with what it's
designed to do and what it's
not. There has been quite a few

30
00:03:32,917 --> 00:03:35,375
talks about that. 

31
00:03:35,375 --> 00:03:39,625
>>>: And so Runa Sandvik from
the Torrent project presented a
very good talk last year that

32
00:03:39,625 --> 00:03:42,500
you all should watch if your
curious. 

33
00:03:42,500 --> 00:03:47,958
>>>: Endpoint security is still
important. You've got
vulnerabilities in the software

34
00:03:47,958 --> 00:03:53,958
that your using that could RCV
exploit it. For example Onion
browser and the Firefox exploit

35
00:03:58,750 --> 00:04:04,750
that you may be familiar with.
To help with that is portal that
is a person named Doug Q. Doug

36
00:04:11,542 --> 00:04:17,542
the Grout. So you have the
device that you can put upstream
and if your endpoints were

37
00:04:21,958 --> 00:04:27,292
compromised, it'll end up not
leaking any data. 

38
00:04:27,292 --> 00:04:33,000
>>>: Alright, So we brought a
portal a pie to give away. It's
supposed to be for certified

39
00:04:33,000 --> 00:04:38,958
Unix network technicians only,
ah, but we're just going to give
it away to somebody in the

40
00:04:38,958 --> 00:04:44,958
audience. We think it's fine
cause a lot of you all look like
cunts. So the bridging issue

41
00:04:47,208 --> 00:04:54,458
defaults matter as it's set up
if you were to use it by
default, Torrent creates a bunch

42
00:04:54,458 --> 00:04:59,458
of signatures that will show how
they're getting caught, but if
you use these pluggable

43
00:04:59,458 --> 00:05:07,167
transports that use various
forms of steganography they can
be used to obfuscate the fact

44
00:05:07,167 --> 00:05:11,792
that you are connecting Torrent,
but that is not one of the
direct goals of Torrent itself,

45
00:05:11,792 --> 00:05:18,458
to be clear. OK, so we're gonna
show some signatures here in a
few minutes and when you

46
00:05:18,458 --> 00:05:22,208
initially look at them it's a
little confusing because there
matching different pieces and

47
00:05:22,208 --> 00:05:25,833
different places and essentially
fall into these three
categories. Either clients

48
00:05:25,833 --> 00:05:30,542
connecting to the Torrent
network or connections coming
from the Torrent network or

49
00:05:30,542 --> 00:05:34,375
leaking information. Stuff that
should have, traffic that should
have been routed over a Torrent

50
00:05:34,375 --> 00:05:40,375
tunnel, but was not. IDS, is
sort of a boring routine thing
and a lot of you all may not

51
00:05:49,333 --> 00:05:55,208
bother to keep up to date with
the latest IDS news. So we're
going to start like if you're

52
00:05:55,208 --> 00:06:00,458
not familiar with the 1998
insertion of Asian Idala service
paper, it's worth reading even

53
00:06:00,458 --> 00:06:06,458
now. And then nothing happened
for a couple of years. A
conference of history here.

54
00:06:09,750 --> 00:06:15,750
Finally like in 2004, still
nothing happens. Nothing
happened for a while. And then

55
00:06:18,500 --> 00:06:23,792
last year Cisco bought
Sourcefire for 2.7 billion. Came
with an explosion, for sure. So

56
00:06:23,792 --> 00:06:27,167
you're up to date on what's been
happening with IDS. 

57
00:06:27,167 --> 00:06:33,167
>>>: So here's some example
rules that will, will trigger
these snort, the highlighted red

58
00:06:41,042 --> 00:06:47,542
portion is all that it takes to
trigger an alert. Which would be
support of someone using Torrent

59
00:06:47,542 --> 00:06:53,542
at that time. You can see the
examples there and the java
script at the bottom is what we

60
00:06:55,917 --> 00:07:00,458
have assembled to induce those
quote false positives. 

61
00:07:00,458 --> 00:07:04,208
>>>: And it's important to note
that these VRT rules actually
aren't going to work in a

62
00:07:04,208 --> 00:07:08,833
default client configuration. To
give you an example of the first
one just matching that straight

63
00:07:08,833 --> 00:07:15,750
http content but from the
directory specification, but
that traffic now by default, it

64
00:07:15,750 --> 00:07:20,958
goes over like a one hop to our
circuit. In the second case this
has been the signature, while

65
00:07:20,958 --> 00:07:27,333
it's still in the official VRT
rules would only match like a
Torrent 0.1 client when there is

66
00:07:27,333 --> 00:07:31,750
still client certificate
validation. You can read about
that at the link there. 

67
00:07:34,292 --> 00:07:40,792
>>>: Similar rules matching
binary content the like 05 hex
onion is matching like the dot

68
00:07:40,792 --> 00:07:46,583
onion that you see in DNS. Same
thing on for exit. That you see
in red. 

69
00:07:46,583 --> 00:07:51,500
>>>: And if your not familiar
with reading historic rules the
piece between the pipes is just

70
00:07:51,500 --> 00:07:54,000
a raw match on a hex
representation of bytes. 

71
00:07:54,000 --> 00:07:59,250
>>>: So the ten bytes are just
straight from the, the DNS
flags. 

72
00:07:59,250 --> 00:08:06,000
>>>: I revoke when I said dot.
There's no dot. Yeah there's no
dot. The number ahead of the TLD

73
00:08:06,000 --> 00:08:10,792
is just the length of the TLD.
And that's straight from the
RFC. 

74
00:08:13,375 --> 00:08:17,458
>>>: So for this one ET open
also has a bunch of rules that's
detecting traffic from Torrent

75
00:08:17,458 --> 00:08:24,500
nodes like as we mentioned very
quickly in the discussion in the
beginning there's a, the a

76
00:08:24,500 --> 00:08:29,750
Torrent relays and the Torrent
accents there all, it's all
published information. So in

77
00:08:29,750 --> 00:08:36,708
this case you see, this is just
an example of hundreds and
hundreds of straight IP naturals

78
00:08:36,708 --> 00:08:42,708
for traffic source from Torrent
Nodes so in the case of the
first one. We need to make a TCP

79
00:08:42,708 --> 00:08:48,167
connection from a Torrent Note
to your host to generate the
false positive so in that case

80
00:08:48,167 --> 00:08:54,375
what we did is there's our
Torrent relay that we stood up
called imposter and on there is

81
00:08:54,375 --> 00:08:56,375
running a web server. 

82
00:08:59,125 --> 00:09:06,500
>>>: That this is just the
source code. It just joins, it's
going to connect back to you

83
00:09:06,500 --> 00:09:12,083
when you connect to it. So this
will gen, generate a hit on that
ET open signature, showing a

84
00:09:12,083 --> 00:09:16,250
connection from the Torrent
network to you. In the second
case it's a little more

85
00:09:16,250 --> 00:09:21,583
difficult to generate EDP
traffic from java script from
your browser. So what we did to

86
00:09:21,583 --> 00:09:26,125
get an EDP packet is we looked
at some of the relays, some of
the relays also happen to be DNS

87
00:09:26,125 --> 00:09:33,250
servers. So we set up some lame
delegations under the domain
lame delegation dash lame

88
00:09:33,250 --> 00:09:40,542
delegation dot net... and, did
some, added some host names that
point to these Torrent Nodes

89
00:09:40,542 --> 00:09:45,667
that are also DNS servers, so
when you look at those domains.
Your domain server is going to

90
00:09:45,667 --> 00:09:51,750
get an x domain response from
those boxes generating a Torrent
alert source from the Torrent

91
00:09:51,750 --> 00:09:57,750
network destined for your DNS,
your recursive DNS server. Oh,
and I guess I should actually

92
00:10:00,750 --> 00:10:06,625
show that that's in place. So
this is the Torrent node, this
is the IP address, this is the

93
00:10:06,625 --> 00:10:12,625
emerging threads, and it's in
the list of hundreds and
hundreds of Torrent Torrent that

94
00:10:12,625 --> 00:10:14,625
come with that rule set. 

95
00:10:20,542 --> 00:10:27,333
>>>: Another idea, this is the
code that matches. 

96
00:10:27,333 --> 00:10:33,333
>>>: Okay, it's just matching
the subject and issuer from the
TLS handshake because as there's

97
00:10:44,458 --> 00:10:49,333
Torrent does not use valid host
names as use just sort of a
random string of characters, so

98
00:10:49,333 --> 00:10:56,292
it looks for those weird looking
certs and if there is enough of
them, bro will send an alert,

99
00:10:56,292 --> 00:11:01,083
but because it's just a TLS
handshake that it's matching on,
you can just point your browser

100
00:11:01,083 --> 00:11:07,042
to any Torrent node, make that
TLS handshake, and trigger that
alert. 

101
00:11:07,042 --> 00:11:13,042
>>>: A lot of the pros and cons
to using java script. The
publishing parts probably the

102
00:11:16,333 --> 00:11:23,292
most relevant, this can be
induced through cross eyed
scripting, for example if you

103
00:11:23,292 --> 00:11:27,500
want to frame someone, if
they're, you know, on the
Torrent network a lot of people

104
00:11:27,500 --> 00:11:33,250
use time correlation at
networks, that's another source
that you can use to get this

105
00:11:33,250 --> 00:11:39,250
java script code running that
would induce these IDS alerts.
And there some examples, you

106
00:11:42,000 --> 00:11:48,250
just essentially plug that into
your code on your site internet.
Wherever you want to have these

107
00:11:48,250 --> 00:11:55,250
alerts triggered. And you'll
start generating the alerts on
the, on the nids. 

108
00:11:55,250 --> 00:12:00,625
>>>: So all of the users of your
website can become fake torrent
users providing coverage from,

109
00:12:00,625 --> 00:12:04,333
for everybody that uses torrent
from those networks. 

110
00:12:04,333 --> 00:12:09,333
>>>: And I would totally trust
us to host that java script. I
wouldn't recommend pulling it

111
00:12:09,333 --> 00:12:11,333
down for audinate yourself. 

112
00:12:17,542 --> 00:12:23,542
>>>: So there's a few
limitations we had to work
around here. Here's most of

113
00:12:26,625 --> 00:12:27,625
them. 

114
00:12:27,625 --> 00:12:31,208
>>>: So like Exostar you can't
write arbitrary headers so
there's things like the user

115
00:12:31,208 --> 00:12:36,792
agent that the spec doesn't
allow you to overwrite. So that
has to come from the browser.

116
00:12:36,792 --> 00:12:41,583
The browser can't make just
arbitrary connections to TCP
ports, there's a handful that

117
00:12:41,583 --> 00:12:46,833
are prohibited. There's a black
list of ports. There used to be
attacks, cross protocols,

118
00:12:46,833 --> 00:12:52,917
scripting attacks that allowed
you to like send email from a
browser by pointing it to an IP

119
00:12:52,917 --> 00:12:59,083
address port 25 posting and
hoping that the mail server
would like ignore all of the HB

120
00:12:59,083 --> 00:13:04,500
header information and just
match the ASCII text of the post
body. So a list of those ports

121
00:13:04,500 --> 00:13:09,542
you can find them in the tangled
web. From a browser, java script
perspective, you don't have a

122
00:13:09,542 --> 00:13:14,250
lot of ability to generate EDP
traffic. But of course all the
matches, Torrent doesn't tunnel

123
00:13:14,250 --> 00:13:22,125
EDP all the matches are probably
going to be DNS, and of course
you can generate DNS traffic and

124
00:13:22,125 --> 00:13:27,958
there's also a challenge in
getting, like for the first
batch of signatures we saw.

125
00:13:27,958 --> 00:13:34,750
Where we're just matching simple
bytes like at to our server.
It's hard to a, from an https

126
00:13:34,750 --> 00:13:41,250
site to generate, clear text
traffic because the, mixed
content warnings are pretty

127
00:13:41,250 --> 00:13:47,708
robust, they follow all sorts of
weird use cases like following
redirects, calling other

128
00:13:47,708 --> 00:13:53,417
protocols, calling web sockets,
like you can't call a, a
non-encrypted web socket from an

129
00:13:53,417 --> 00:13:59,125
encrypted site. So if you have
suggestions on getting around
mixed content warning we'd like

130
00:13:59,125 --> 00:14:00,125
to hear them. 

131
00:14:00,125 --> 00:14:06,125
>>>: There's various other
detection techniques. Here's a
few. There's time

132
00:14:09,750 --> 00:14:16,875
synchronization. One published.
There's the TBD user agent. And
512 byte cells. Want to cover

133
00:14:16,875 --> 00:14:21,333
those in any detail? There's
URL's if you need that. 

134
00:14:21,333 --> 00:14:25,375
>>>: So I, I think the most
interesting one is user agent so
the Torrent browser has a fixed

135
00:14:25,375 --> 00:14:32,583
user agent that's like a trade
off to prevent finger printing,
like if your familiar with pan

136
00:14:32,583 --> 00:14:39,417
opticote, pan opticlick project,
like a, there's a lot to
identify you, in a, a normal

137
00:14:39,417 --> 00:14:41,417
browser user agent, 

138
00:14:47,417 --> 00:14:52,000
>>>: Yeah, so this is all
generic. Like, essentially all
you need is a device so the

139
00:14:52,000 --> 00:14:57,750
TCCPA piece stack that is would
take data from a protocol and
end up connecting to an

140
00:14:57,750 --> 00:15:05,083
arbitrary host with some data so
we just, this would apply to any
of those protocols we just

141
00:15:05,083 --> 00:15:12,958
abused browsers because they're
really popular, but there's, @
so pot et introduces this

142
00:15:12,958 --> 00:15:18,500
question. Is it possible to
write any rules that cannot be
spoofed. Yes, there is. If

143
00:15:18,500 --> 00:15:21,625
people change the protocol, but
it, it does a lot. 

144
00:15:23,958 --> 00:15:31,458
>>>: Okay so what we would like
you to do is go to the website
and put post your IO. And let us

145
00:15:31,458 --> 00:15:36,375
know if it triggers IDS alerts.
If you're responsible for
security infrastructure. If it

146
00:15:36,375 --> 00:15:42,958
doesn't work, take a look
yourself, let us know what you
think the traffic should be. And

147
00:15:42,958 --> 00:15:46,458
there's contact information on
the website. I'd be happy to
help you, we'd be happy to help

148
00:15:46,458 --> 00:15:53,250
you figure out how to generate
matches against your closed
source tools. If you want to

149
00:15:53,250 --> 00:15:59,625
help, again, visit the website
and support the Torrent project.
One key part about supporting

150
00:15:59,625 --> 00:16:05,333
anonymity online is here it's a
very popular opinion, but when
you get back to the real world a

151
00:16:05,333 --> 00:16:09,042
lot of people, it's not a
popular opinion, a lot of people
are more worried about

152
00:16:09,042 --> 00:16:15,292
terrorists and pedophiles than
supporting freedom on line.
Alright, there's a quick

153
00:16:15,292 --> 00:16:20,042
summary, if you have questions
meet us in the chill out room
after this talk and thank you

154
00:16:20,042 --> 00:16:25,042
very much. And we have some
important research to introduce
from our colleague, Joe. 

155
00:16:25,042 --> 00:16:31,042
>>>: Okay guys, this is about to
be some heavy shit here. When we
were doing this Torrent stuff,

156
00:16:40,208 --> 00:16:47,333
we ran into these packets and we
were going through these leaked
documents that Snowden let us

157
00:16:47,333 --> 00:16:54,708
view... turns out that there's
these walking bipedal nuclear
tanks. And, there's a code name

158
00:16:54,708 --> 00:17:01,083
"Metal Gear". And we were going
through these packets and they
seemed to be using all the game

159
00:17:01,083 --> 00:17:07,083
protocols as Stego to hide their
real, their real process. And as
we were going through this we

160
00:17:07,083 --> 00:17:13,750
started seeing these repeated
pites. Now little did we know it
had something to do with bitwise

161
00:17:13,750 --> 00:17:21,583
operators and exclusive stuff,
so we outsourced it to Snowden
and he actually figured it out

162
00:17:21,583 --> 00:17:28,250
for us and it's this thing
called exwhore. So we we're not
able to read their traffic with

163
00:17:28,250 --> 00:17:35,625
these nuclear tanks and
supposedly they want us to think
that somebody reverse engineered

164
00:17:35,625 --> 00:17:41,292
these video games and the
network protocol and if you hack
your PS2 and PS3 your going to

165
00:17:41,292 --> 00:17:46,667
start playing this game again
But that's not the truth. So
we're going to go ahead and

166
00:17:46,667 --> 00:17:52,667
describe this protocol for you
so you can start checking it
out. And actually, find out the

167
00:17:55,167 --> 00:18:00,917
truth, so there's these command
identifiers right here, and they
tell the client what it's

168
00:18:00,917 --> 00:18:06,417
actually going to do. And the
palletes will be in the end and
there's an MD5 check sum that

169
00:18:06,417 --> 00:18:11,750
will de verifications across
them. All you have to do is MD5
the payload with the command

170
00:18:11,750 --> 00:18:17,750
header and you're good to go. So
you can go ahead and hop on
this. And actually find out what

171
00:18:17,750 --> 00:18:23,833
they're actually doing with
"Metal Gear". Supposedly,
there's an amphibious one that's

172
00:18:23,833 --> 00:18:31,000
going to be coming out soon, and
just go ahead and start
exploring from there. ...

173
00:18:31,000 --> 00:18:33,000
Fucking Chemtrails, man!

