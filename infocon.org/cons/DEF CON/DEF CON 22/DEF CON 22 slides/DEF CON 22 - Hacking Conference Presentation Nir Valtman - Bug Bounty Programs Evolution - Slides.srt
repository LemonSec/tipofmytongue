1
00:00:00,000 --> 00:00:07,458
So Good Morning my name is Neir
and I'm here to speak a little
bit about Bug Bounty Programs

2
00:00:07,458 --> 00:00:14,542
evolution. Before I begin I just
want to do a short presentation
about myself it will be pretty

3
00:00:14,542 --> 00:00:20,708
quick. So I'm working as
security architect for this
company but it's not related to

4
00:00:20,708 --> 00:00:26,708
this talk this is something I
did before working this company.
So a little bit research that

5
00:00:29,167 --> 00:00:36,708
I've done is about this, that
and least few open source tools.
But actually I'm here because

6
00:00:36,708 --> 00:00:43,958
I'm trying to show something
that I've done I'm actually an
entrepreneur this is a like hair

7
00:00:43,958 --> 00:00:49,958
care but different spelling. So
I just want to show you the
research that I've done in last

8
00:00:52,917 --> 00:01:00,333
three years about bug bounty
programs. It started actually as
an academy final project, I

9
00:01:00,333 --> 00:01:06,333
thought about a way to create a
bug bounty program which was
something that I saw on I-Test

10
00:01:11,000 --> 00:01:16,542
but not from the skewed
perspective but from the IT
perspective. So ok I thought

11
00:01:16,542 --> 00:01:22,875
about creating this bug bounty
program and I decided that I
wanted to upload images like at

12
00:01:22,875 --> 00:01:28,875
testing environment in order to
allow this safe bug bounty
program. But then I realized ok

13
00:01:33,500 --> 00:01:37,917
may be a problem if wanted to
maybe use main frames for the
testing and then well it may be

14
00:01:37,917 --> 00:01:42,500
a problem. So I just decided to
limited it to a specific scope
and thought ok may be I'll use

15
00:01:42,500 --> 00:01:48,500
VMware I can take VMware I can
just develop a nice gui and then
just let the customers kind of

16
00:01:51,292 --> 00:01:55,917
upload the images to my
environment and then they'll be
able to do the pan testing

17
00:01:55,917 --> 00:02:01,583
pretty easily, and to be pretty
honest cause if someone tries to
drop the database well it's a

18
00:02:01,583 --> 00:02:07,583
test environment so that's easy
its safe. The problem was during
this development that I started

19
00:02:09,875 --> 00:02:17,500
to develop kind of virtual IP
addresses which is something
that amazon already developed so

20
00:02:17,500 --> 00:02:23,875
I couldn't go with it, it was a
paton by Amazon. So I just
figured out ok if it could be

21
00:02:23,875 --> 00:02:29,875
done join these guys but yet I
just thought about it and if I
just define a virtual

22
00:02:34,875 --> 00:02:41,083
environment per tester that
would be really great cause
every tester will have his own

23
00:02:41,083 --> 00:02:47,417
environment if you have person
that takes a test probably you
won't see it on the other

24
00:02:47,417 --> 00:02:51,833
environment which is pretty
perfect. On the other hand if I
wanted to create a new

25
00:02:51,833 --> 00:02:57,042
environment for the tester then
I probably will need to pay for
the traffic for the vm and

26
00:02:57,042 --> 00:03:03,458
there's a lot of payments on the
way when I want to create such
an environment per tester and by

27
00:03:03,458 --> 00:03:09,458
the way, no one promises that
the tester will find findings so
I see only outcomes not incomes.

28
00:03:11,750 --> 00:03:18,750
And then I met this guy, this
was my partner his name is Jai.
And we decided to kind of

29
00:03:18,750 --> 00:03:25,458
establish a new company which
was closed a few months ago. It
was a pretty nice concept we

30
00:03:25,458 --> 00:03:31,375
decided to develop a company
that does safe bug bounty
programs which is -- the

31
00:03:31,375 --> 00:03:36,000
difference between bug bounty
programs and safe bug bounty
programs is totally different

32
00:03:36,000 --> 00:03:42,000
and I will explain it here. So,
I know that that's a failure but
yet we decided it may be good to

33
00:03:44,750 --> 00:03:51,167
spread ideas here and let you
know what is my thoughts here
and what can be improved in the

34
00:03:51,167 --> 00:03:58,208
future. So, let's start with the
evolution of bug bounty programs
or actually bounty hunters. So

35
00:03:58,208 --> 00:04:04,208
the bounty hunter, not in the
visual world let's say the
physical world, is someone that

36
00:04:06,500 --> 00:04:13,042
probably don't want to be
identified. He's bypassing
things as a way of life. So all

37
00:04:13,042 --> 00:04:19,292
he wants is killers like this.
They have got Terms and
Conditions that are fun by the

38
00:04:19,292 --> 00:04:25,542
way, through tour you will
probably find a lot of bounty
hunters there. And I saw that

39
00:04:25,542 --> 00:04:32,500
they really know what they want
to do. They know where to aim.
And they also have few things

40
00:04:32,500 --> 00:04:38,500
that are similar to the way of
work that we see today in the
bug bounty programs. So, I just

41
00:04:38,500 --> 00:04:44,500
thought about it, if someone
tries to kill and he succeeds
with it he'll get the money,

42
00:04:46,583 --> 00:04:52,583
obviously. Or maybe he won't and
he'll need to kill again. Yeah.
But yet if he kills someone

43
00:04:56,125 --> 00:05:01,833
probably he'll get not only the
money because that's only one
time payment, he'll get a good

44
00:05:01,833 --> 00:05:08,333
reputation. By the way, if he
doesn't succeed to kill someone
probably he don't get anymore

45
00:05:08,333 --> 00:05:14,333
reputation cause maybe someone
killed him. So, as bug bounty
hunters there are specific

46
00:05:17,833 --> 00:05:23,833
targets that bounty hunters
choose. So, some of them choose
to kill animals some of them

47
00:05:27,917 --> 00:05:33,917
choose to kill kids, people,
women, politicians, etc. And
well any killer also chooses

48
00:05:36,708 --> 00:05:43,500
what to hack or what to kill
cause let's say I saw something
pretty nice in terms and

49
00:05:43,500 --> 00:05:49,500
conditions that one killer said
that if someone just wants him
to kill a politician that would

50
00:05:52,542 --> 00:05:57,875
be fast. Doesn't matter if you
want to pay more money cause
that's the way he works that's

51
00:05:57,875 --> 00:06:03,500
the way he believes it should be
done. So that's the physical
world, so let's keep it on the

52
00:06:03,500 --> 00:06:07,958
side because that is something
old, this is something that
started a long time ago. But

53
00:06:07,958 --> 00:06:15,375
does someone know what happened
in 1995? Raise your hand if you
know what happened in 1995. No

54
00:06:15,375 --> 00:06:21,375
one? Yeah. Yeah, so I wish I had
prizes here. You want my iPhone?
No? [Laughter] It's old. So,

55
00:06:27,417 --> 00:06:33,417
yeah Netscape established the
first bug bounty program. And,
well -- the first bug bounty

56
00:06:38,083 --> 00:06:44,083
program actually was not in
terms of security it just --
these guys just wanted to do

57
00:06:46,625 --> 00:06:53,875
good QA for their environment
and they thought ok maybe a lot
of people will be smarter than 5

58
00:06:53,875 --> 00:06:59,917
people that testing the
software. So they just decided
to put the trunk of their

59
00:06:59,917 --> 00:07:05,917
development and just let the QA
to test it. It was pretty nice,
but I don't think it worked.

60
00:07:10,875 --> 00:07:18,792
Well, I'll explain it. That's
pretty easy. Just putting the
code there somewhere and the

61
00:07:18,792 --> 00:07:26,167
testers went to this code and
was able to test it and as long
as they submit findings that was

62
00:07:26,167 --> 00:07:32,167
nice. But then comes the part of
the rewards. Well, someone knows
what were the rewards then in

63
00:07:35,000 --> 00:07:41,000
1995? Raise your hand if you
heard about it. No? Ok great.
So, there's a Netscape polo

64
00:07:43,625 --> 00:07:49,625
t-shirt that was nice and a
Netscape mug that's all, no
money, just prizes. And you know

65
00:07:52,958 --> 00:07:58,958
what? A lot of people did it
because they wanted a mug with a
Netscape logo. I know they

66
00:08:01,417 --> 00:08:05,625
couldn't afford themselves to
buy the mug with the Netscape
logo, so they just got it. So,

67
00:08:08,292 --> 00:08:12,958
do you think it was a successful
story or not? Raise your hand if
you think it was a success

68
00:08:12,958 --> 00:08:18,958
story. All the rest, get out.
Ok. So, it was a success story
and I'll explain you why. In

69
00:08:25,542 --> 00:08:31,542
2004, which was following the
requisition of -- which was
following the requisition of

70
00:08:34,208 --> 00:08:40,000
Netscape by AOL, a newer
foundation started the Mozilla
foundation which is something

71
00:08:40,000 --> 00:08:46,000
that uses the same engine that
Netscape used and created a new
company, Mozilla. So Mozilla is

72
00:08:48,292 --> 00:08:54,292
kind of Netscape but an open
source and well they started in
2004 their bug bounty program

73
00:08:56,875 --> 00:09:03,000
and again it succeeded and
you'll see the results of today.
This is something I just found a

74
00:09:03,000 --> 00:09:09,000
few months ago when it was a
result of the Heartbleed attack.
They just said, hey guys I just

75
00:09:11,917 --> 00:09:18,083
signed my software kind you find
a few vulnerabilities there and
I am willing to pay a lot for

76
00:09:18,083 --> 00:09:25,208
that. By the way they are not
giving t-shirts anymore for
that. So I just thought ok we

77
00:09:25,208 --> 00:09:31,333
know about bug bounty programs
and understand that this is
pretty good idea and yet I just

78
00:09:31,333 --> 00:09:35,708
want to share with you the
perspectives that business
thinks about and then what a bug

79
00:09:35,708 --> 00:09:42,333
bounty hunter looks in these
programs. So let's start with
the business. I just decided to

80
00:09:42,333 --> 00:09:49,625
just leave the perspectives to
three. The first of them is the
technology perspective let's say

81
00:09:49,625 --> 00:09:55,625
from the technology perspective
probably I will need to handle a
lot of traffic cause hackers,

82
00:09:57,958 --> 00:10:03,958
they don't use one thread. They
don't need to use one thread. So
probably they'll use ten threads

83
00:10:06,083 --> 00:10:12,125
or more it depends on the amount
of tools they have and how
strong their computer by the

84
00:10:12,125 --> 00:10:18,125
way. And then obviously when the
customer or the business will
receive this traffic it may be

85
00:10:21,875 --> 00:10:27,875
effect on the performance and
obviously it can do a lot of
other things. So, maybe these

86
00:10:30,917 --> 00:10:36,917
companies need to upgrade their
IDS or IPS. By the way this is
the one that just barks, right.

87
00:10:39,917 --> 00:10:45,917
This is something else, this can
bite, this is the IPS. So this
means that I will need to

88
00:10:48,083 --> 00:10:55,167
upgrade my machines in order to
stop any attacks from various
sources and this will probably

89
00:10:55,167 --> 00:11:01,667
be done on the production
environment. On the other hand,
maybe I have a WAF so again I

90
00:11:01,667 --> 00:11:09,375
need to pay a lot of money to
get a stronger WAF. So that's
the technology and it can be

91
00:11:09,375 --> 00:11:15,458
solved by money, not easily but
it depends on the size of the
company. And then I was just

92
00:11:15,458 --> 00:11:22,792
thinking about the operations.
Ok, so we have the operations,
we have the bug bounty program

93
00:11:22,792 --> 00:11:28,667
and then the question is how do
I manage incidents? Well if
someone tries to do -- how do I

94
00:11:28,667 --> 00:11:36,000
manage that? If someone tries to
drop my database because he just
found a pretty nice Sequel

95
00:11:36,000 --> 00:11:41,542
injection. Well could be a
problem because I need an
incident response team. And

96
00:11:41,542 --> 00:11:47,125
sometimes in small, medium
businesses they don't have an
incident response team. So if we

97
00:11:47,125 --> 00:11:52,250
go to the enterprises the big
ones probably it's not a
problem. But if we go to the

98
00:11:52,250 --> 00:11:58,250
small ones, well they just need
to think about maybe engaging a
third party company to do this

99
00:12:00,583 --> 00:12:06,875
for them or maybe someone can
supply that for them as part of
the service of being a bug

100
00:12:06,875 --> 00:12:13,292
bounty program. So this is the
first problem, but the second
one is gonna be different

101
00:12:13,292 --> 00:12:19,292
because I know that I'll have
bugs because someone will
finally find something there.

102
00:12:22,583 --> 00:12:28,375
Obviously hackers are pretty
good. Mainly if there are a lot
of hackers that try to find bugs

103
00:12:28,375 --> 00:12:34,667
there. So, I just thought about
it, maybe I should manage it as
part of my change control

104
00:12:34,667 --> 00:12:40,458
system. Yeah. And that means
that all the developers in the
company will be able to see the

105
00:12:40,458 --> 00:12:46,458
bugs. That's not good cause they
can sell them pretty easily. So
maybe someone that can supply

106
00:12:48,542 --> 00:12:54,750
this bug bounty programs can
also supply me a bug bounty
management system. Which is

107
00:12:54,750 --> 00:12:59,458
pretty good if it is secure
enough. And obviously this is
something that should be managed

108
00:12:59,458 --> 00:13:05,458
somewhere in the cloud unless it
is proprietary development. So
that's just a problem. So, I

109
00:13:08,208 --> 00:13:13,083
just thought about another
thing. And this is something
that one of the customers that I

110
00:13:13,083 --> 00:13:20,250
worked with, asked me. You know
what, no problem I'll get you to
do bug bounty program, but what

111
00:13:20,250 --> 00:13:26,250
happens if someone just harms my
business? What then? Who should
I sue? Well, there are bounty

112
00:13:30,625 --> 00:13:36,875
hunters. How will you sue them?
You can't. So probably you will
sue the company that engages

113
00:13:36,875 --> 00:13:42,458
these bounty hunters. That's a
problem, no one wants to get the
liability on that. And by the

114
00:13:42,458 --> 00:13:48,667
way I am not familiar with a see
saw that will want to go home
because someone just harms his

115
00:13:48,667 --> 00:13:56,333
business and there's no one that
he can sue in case of something
or in case of breech. So, let me

116
00:13:56,333 --> 00:14:01,500
just split the bug bounty
programs into two. There are
self owned bug bounty programs

117
00:14:01,500 --> 00:14:05,667
and there are external bug
bounty programs. If I talk about
the self owned, well there is a

118
00:14:05,667 --> 00:14:12,792
lot of companies that just
created their own bug bounty
programs for themselves. And you

119
00:14:12,792 --> 00:14:17,042
can see a pretty nice list here.
And by the way, if you want
there's pretty much a more

120
00:14:17,042 --> 00:14:23,042
extended list on Bug Crowd
website. So, this is just an
example. And the other external

121
00:14:25,625 --> 00:14:31,042
are actually companies that
actually provide the service of
creating a bug bounty program.

122
00:14:31,042 --> 00:14:37,042
And I am not sure if I posted
all of the companies here but I
saw a few logos here, raise your

123
00:14:41,083 --> 00:14:47,083
hand if you are from an external
company. Yeah, so there is a lot
of people here. Pretty nice. So

124
00:14:49,458 --> 00:14:54,125
let me just explain a little
about the external companies
because the self owned are the

125
00:14:54,125 --> 00:15:00,375
ones the enterprises can't
afford themselves. The self
owned are for the rest. One of

126
00:15:00,375 --> 00:15:06,375
the things that I saw or one of
these companies, the external
ones, that these companies can

127
00:15:08,583 --> 00:15:15,208
actually build an A team, they
can build an elite team of Pen
Testers. And that's pretty good

128
00:15:15,208 --> 00:15:21,708
because the elite team probably
will be better than five other
Pen Testers because probably

129
00:15:21,708 --> 00:15:27,792
will fell engaged to the
company. I know that you trust
this Pen testing company, but

130
00:15:27,792 --> 00:15:33,792
yet there is only 3 to 5 people
of my team that does this Pen
Testing. On the other hand, when

131
00:15:36,500 --> 00:15:42,500
the external company builds an A
team, that means that this
company can trust these hackers.

132
00:15:45,417 --> 00:15:51,125
And then they can feel more
comfortable when actually
engaging them to do Pen Testing

133
00:15:51,125 --> 00:15:57,042
because as I said no one wants
to be sued. The next thing that
these external companies do or

134
00:15:57,042 --> 00:16:04,083
part of them, the actually
verify the identity of the
hackers. Because, well I need to

135
00:16:04,083 --> 00:16:11,292
know who's the hacker behind all
the testing there. Because if
something happens I want to know

136
00:16:11,292 --> 00:16:17,000
how to reach him. So there are a
few ways to do identity
verification. First of them is

137
00:16:17,000 --> 00:16:22,750
pretty easy, just register with
your email but it can be ten
minutes mail, but yet someone

138
00:16:22,750 --> 00:16:30,417
can register. On the other hand,
I saw one company, I think it
was C-nack that actually

139
00:16:30,417 --> 00:16:38,167
identifies with a real ID,
identifies these users and that
means if someone do something

140
00:16:38,167 --> 00:16:44,167
wrong, he knows that they have
his ID. And that's pretty good.
The next thing that external

141
00:16:46,750 --> 00:16:52,750
companies do is a search -- is
actually the kind of meeting
place where -- meeting place is

142
00:16:55,917 --> 00:17:01,500
not a new concept. But yet if
you have a good meeting place
with a good blog and a good

143
00:17:01,500 --> 00:17:08,083
community probably you'll be
able to get better testers. So
if you get better testers I

144
00:17:08,083 --> 00:17:15,583
suppose that this company can be
-- can provide better services.
So this is one thing that this

145
00:17:15,583 --> 00:17:21,750
company do but if you have
already a meeting place,
probably this company -- by the

146
00:17:21,750 --> 00:17:28,250
way this is or -- the way to do
it. This company should be a
middle man. That means that if

147
00:17:28,250 --> 00:17:33,250
someone pays for a bug they do
kind of revenue sharing so if
someone pays I don't know 500

148
00:17:33,250 --> 00:17:39,167
dollars for a bug, let's say the
company pays 500 dollars, then
probably this external company

149
00:17:39,167 --> 00:17:44,875
will take a specific percent of
it as a revenue and will leave
the rest of it for the hacker.

150
00:17:44,875 --> 00:17:51,750
The majority by the way should
go to the hacker. Another thing
that I saw in these external

151
00:17:51,750 --> 00:17:59,208
companies is also a nice idea is
the traffic shaping. Traffic
shaping is like let's say using

152
00:17:59,208 --> 00:18:04,375
a private VPN, when using
private VPN to connect to
websites and then to test them,

153
00:18:04,375 --> 00:18:12,083
well, if you've already
identified the users then I can
actually verify their identity

154
00:18:12,083 --> 00:18:18,292
by using a VPN. On the other
hand, a VPN is not the only
solution that can be done here.

155
00:18:18,292 --> 00:18:25,708
I for instance did something as
URL authentication. I won't
provide the solution here but

156
00:18:25,708 --> 00:18:31,000
just think about it and probably
you will get to the solution
here. So there are a few

157
00:18:31,000 --> 00:18:37,333
benefits and concerns from a
business side when you decide to
go with the bug bounty programs.

158
00:18:37,333 --> 00:18:43,917
I just want to begin with the
benefits. The benefits that --
first of all they have very

159
00:18:43,917 --> 00:18:49,167
payment models they don't need
to pay a fixed price all the
times as they do with a company.

160
00:18:49,167 --> 00:18:55,167
Unless they want to do a
competition which is a pretty
nice idea. So they have various

161
00:18:57,417 --> 00:19:04,000
was to give something additional
to the testers. So, money is one
of them. But hey, most of the

162
00:19:04,000 --> 00:19:09,792
testers want to be on Google. So
they have a wall of fame which
is pretty nice idea probably you

163
00:19:09,792 --> 00:19:16,542
will see a lot of them. And
there are obviously a few
prizes. But the thing is that a

164
00:19:16,542 --> 00:19:21,417
hall of fame, let's say Google,
you go to Google and you know
that the hall of fame is only

165
00:19:21,417 --> 00:19:26,458
for Google. But for the external
companies the hall of fame is
not only for Google. The hall of

166
00:19:26,458 --> 00:19:32,458
fame is something much wider, it
goes to all of the websites that
the tester tests. So it can be

167
00:19:35,667 --> 00:19:40,708
good for the testers, they try
to go wider but it's not that
good for the tester that just

168
00:19:40,708 --> 00:19:46,708
has the mention to let's say
test only e-commerce websites.
So I just thought about it and

169
00:19:49,083 --> 00:19:55,917
maybe a few promotions can help
here. Let's say that this
external companies can so ok I

170
00:19:55,917 --> 00:20:02,958
have the hall of fame for all
the websites but maybe I should
just create a hall of fame per

171
00:20:02,958 --> 00:20:09,542
customer. And then the one that
tests only e-commerce websites
will be able to get recognition

172
00:20:09,542 --> 00:20:16,167
on it. Another thing that can be
done as part of this program is
that, well if someone just gets

173
00:20:16,167 --> 00:20:18,167
into the hall of fame of a
specific customer probably this
customer will want that these

174
00:20:18,167 --> 00:20:20,667
guys that are in the hall of
fame will test them again
because in the beginning

175
00:20:20,667 --> 00:20:26,667
probably you will find technical
things but as long as you test
more -- a specific platform you

176
00:20:34,292 --> 00:20:38,667
will understand the business.
And when you understand the
business it's much more easier

177
00:20:38,667 --> 00:20:43,167
to find bugs. So if you have
already experience with one of
the customers probably you want

178
00:20:43,167 --> 00:20:49,167
to pay them more to get back.
So, this is not something that
the external companies should do

179
00:20:52,500 --> 00:20:56,583
probably I believe that
customers will want to get these
promotions but yet it is a

180
00:20:56,583 --> 00:21:01,667
pretty nice idea. The next thing
is a pretty good benefit because
as I said a thousand hackers are

181
00:21:01,667 --> 00:21:07,667
much better than 5 and the
customers get a real world
hacking scenario in this case.

182
00:21:10,583 --> 00:21:17,500
Accept the fact that they have a
real world hacking scenario, a
company that writes that they

183
00:21:17,500 --> 00:21:23,500
have a bad bug program probably
can be pictured as a leader. And
why am I saying that, because if

184
00:21:26,458 --> 00:21:32,708
you're not mature enough you
won't put a bug bounty program
or if it's not early enough

185
00:21:32,708 --> 00:21:37,958
during the development stages.
So, if I am just putting in a
bad bug program that means that

186
00:21:37,958 --> 00:21:43,750
I know that I need security and
I want the best security. Not
only from one company but really

187
00:21:43,750 --> 00:21:49,875
from the majority of the
hackers. On the other hand,
there are a few concerns. Let's

188
00:21:49,875 --> 00:21:56,792
say that the first concern is
well what should I test? Should
I test the production, should I

189
00:21:56,792 --> 00:22:04,583
test the testings, staging
environment, who thinks that the
better way to test is the

190
00:22:04,583 --> 00:22:10,583
testing environment? No one?
One, ok. Who thinks the
production is better? And the

191
00:22:13,833 --> 00:22:19,833
rest? No thinking, or what?
[Laughter] Ok, so the testing
environment has a benefit. For

192
00:22:22,208 --> 00:22:26,750
instance if someone drops the
database it will be only on the
testing environment. On the

193
00:22:26,750 --> 00:22:31,625
other hand, no one can promise
that the testing environment or
the staging environment is

194
00:22:31,625 --> 00:22:38,292
similar to the production and
that means that not all high
risk vulnerabilities can be

195
00:22:38,292 --> 00:22:45,750
found. Only the specific ones
that just developed now. The
best example here, just using

196
00:22:45,750 --> 00:22:50,792
SSL I can use not trusted
certificate on the testing and
then just putting something

197
00:22:50,792 --> 00:22:57,667
trusted on the production
environment and then I will need
to pay for the hacker although

198
00:22:57,667 --> 00:23:03,667
it's not a vulnerability at all.
The next concern is actually
data leakage. Let's say we go to

199
00:23:06,208 --> 00:23:12,208
the production and then we have
credit cards on the website.
Wait we have credit cards? We

200
00:23:14,375 --> 00:23:20,375
have bounty hunters and then we
just need to calculate. I have
100,000 credit cards on one hand

201
00:23:22,875 --> 00:23:28,875
and I have $500 price. What
would you choose? I think that I
would go with the credit cards.

202
00:23:31,250 --> 00:23:37,625
That's better. Another thing
that is pretty much a big
concern is denial of service.

203
00:23:37,625 --> 00:23:41,583
Well that's pretty obvious
because if you have a lot of
testers and it goes to the

204
00:23:41,583 --> 00:23:47,583
production environment it is
feasible problem. Next one is
the way we detect Blackhats.

205
00:23:51,958 --> 00:23:57,792
Because let's say that we have a
bug bounty program and we have
our perimeter and that's pretty

206
00:23:57,792 --> 00:24:03,792
nice. But then we're exposed to
all the good hackers and the bad
ones and the thing that we don't

207
00:24:06,167 --> 00:24:14,042
want to happen is this. Well
this is Facebook, by the way
it's a screen shot from 157 --

208
00:24:14,042 --> 00:24:21,542
raise your hand if you know this
website. Ok. So I'll just
explain shortly, this is a

209
00:24:21,542 --> 00:24:27,542
website that you can find a lot
of exploits there and for part
of them you need to pay. So you

210
00:24:29,625 --> 00:24:35,167
don't want to get posted there
because the hacker can post the
vulnerability there and get a

211
00:24:35,167 --> 00:24:41,708
little bit more money then he
planned to get as part of a bug
bounty program. Ok, so that's

212
00:24:41,708 --> 00:24:47,708
another concern what happens
when there are too many bounty
hunters and then not all of them

213
00:24:51,625 --> 00:24:56,875
really understand security. So
let's say that something that I
got from one of the companies,

214
00:24:56,875 --> 00:25:04,375
that they have a lot of hackers
from let's say India, no
mentions to harm anyone, but

215
00:25:04,375 --> 00:25:10,375
these hackers sometimes just try
to post bugs that are not
security bugs. For instance the

216
00:25:13,083 --> 00:25:20,500
CSS here is not working. This is
not a security bug. And someone
really thinks he will get money

217
00:25:20,500 --> 00:25:28,375
for that? Not really. So the
problem here is not the posting
of the bugs the problem here is

218
00:25:28,375 --> 00:25:36,000
who verifies that. I can get
thousands of bugs of CSS and
cracked CSS and then I need to

219
00:25:36,000 --> 00:25:41,208
spend my time as an external
company to verify these bugs and
if I am not spending this time

220
00:25:41,208 --> 00:25:47,042
probably the customer will have
to spend this time to verify CSS
bugs, well it can be nice

221
00:25:47,042 --> 00:25:54,250
because we have another QA team
but that's not the purpose of
this bug bounty program. So

222
00:25:54,250 --> 00:26:00,250
there is something nice that I
saw on Bug Crowd's website they
actually see what customer --

223
00:26:04,042 --> 00:26:10,208
see or are given identification
from the customers that they
say, hey guys we have

224
00:26:10,208 --> 00:26:17,250
performance issues just notify
the hackers that they need to
stop. Yeah so they are sending

225
00:26:17,250 --> 00:26:23,250
mails and notifying the hackers
to stop. Most of the hackers
will stop so that's kind of a

226
00:26:26,208 --> 00:26:32,792
good solution. Maybe it can be
better but this is pretty good
solution because if let's say we

227
00:26:32,792 --> 00:26:38,375
don't have an external company
it will be hard to identify the
users and then send them the

228
00:26:38,375 --> 00:26:45,292
mail because we don't know who
tests us. The next one is kind
of minimizing the exposure time

229
00:26:45,292 --> 00:26:52,375
let's say that we found
something as a hacker on the
website and now obviously we are

230
00:26:52,375 --> 00:26:58,375
posting it but then maybe the
hacker posts it in other
websites so how can I be sure

231
00:27:00,917 --> 00:27:06,917
that actually someone will stop
this attack. So I can try to
prevent somehow zero days by

232
00:27:09,042 --> 00:27:16,333
just not publishing it
somewhere. But yet the company
needs to identify that there's a

233
00:27:16,333 --> 00:27:23,792
specific time that they have to
fix the issue and if they don't
fix it, probably the hacker will

234
00:27:23,792 --> 00:27:30,500
want to publish it. So, these
are the perspective from the
business side but let's look at

235
00:27:30,500 --> 00:27:36,500
the bug bounty hunters and these
guys are obviously the most
experienced people in the world

236
00:27:38,875 --> 00:27:44,875
because they tired from working
only on their day job they just
want to find the next thing. So

237
00:27:47,958 --> 00:27:53,958
they are just looking for bugs
in these companies that allow
bug bounty programs. But a small

238
00:27:57,875 --> 00:28:03,667
problem that we have here is
that it is a little bit hard to,
to classify these hackers

239
00:28:03,667 --> 00:28:10,708
because all of them are equal
and we don't know which hacker
is better and then well, I'm

240
00:28:10,708 --> 00:28:15,917
just competing with other
hackers and why is that because
they just write that they have

241
00:28:15,917 --> 00:28:21,000
80 years of experience although
they have 8 months of
experience. So this is not

242
00:28:21,000 --> 00:28:27,000
exactly fair to work with a
variety of Pen Testers, but
that's a fact that everybody

243
00:28:29,958 --> 00:28:36,833
should work together. So, I just
thought about the motivations.
Well actually I not only thought

244
00:28:36,833 --> 00:28:42,583
about it I just interviewed a
few hackers and I tried to
understand what motivates them

245
00:28:42,583 --> 00:28:48,583
to do bug bounty programs. So
the first thing is pretty
obvious. Yeah. That's what we

246
00:28:51,083 --> 00:28:57,083
all want. But with dollars.
Yeah. The next thing is
prestige. Hackers want to be the

247
00:29:01,583 --> 00:29:08,875
ones who identified as the best
hackers of a certain bug bounty
program. Let's say hackers want

248
00:29:08,875 --> 00:29:14,875
to be on Google, Facebook,
Paypal and hackers want to be
the best of -- excel at a bug

249
00:29:14,875 --> 00:29:21,292
bounty program because that
means that they have experience
in various websites. Not only

250
00:29:21,292 --> 00:29:27,292
specific websites. And this is
good because I think that if
someone looks for a name on

251
00:29:29,875 --> 00:29:34,583
Google they probably want to
have more than ten pages in
Google and this can lead to

252
00:29:34,583 --> 00:29:40,583
this. The next question is,
which one of you likes gaming?
No one? Ok, that's all? Only

253
00:29:46,958 --> 00:29:52,958
half? Ok. So, hackers, most of
them like gaming. And since they
like gaming, if you combine

254
00:29:57,292 --> 00:30:03,667
gamification into these programs
it will be much easier because
let's say you have ranks you

255
00:30:03,667 --> 00:30:10,375
have kind of Kings and new born
hackers and then you can give
ranks to them that would be

256
00:30:10,375 --> 00:30:17,667
pretty nice because they will
try to get to the King hacker.
And they won't stop until they

257
00:30:17,667 --> 00:30:23,500
get there. And until they get
there probably you invent
another ranks. So that's good it

258
00:30:23,500 --> 00:30:29,167
won't end anyway. On the other
hand there are a few
frustrations on these programs.

259
00:30:29,167 --> 00:30:36,750
The first of them is something
that I did a little bit more
than a year ago, or less, less

260
00:30:36,750 --> 00:30:44,125
than a year ago. I just found
something on a company's
website, well it wasn't the

261
00:30:44,125 --> 00:30:50,958
website it was on their
messaging system. And I decided
to post about it not because I

262
00:30:50,958 --> 00:30:55,542
just wanted the money because
this company -- not giving
money. I just wanted to post

263
00:30:55,542 --> 00:31:01,542
because I'm using this service.
And then I posted it. And I
asked them, guys what's going

264
00:31:03,583 --> 00:31:09,917
on? I want to publish it, yeah,
I just want to be on Google, but
guys tell me what is happening.

265
00:31:09,917 --> 00:31:16,583
And they are not transparent
enough they just need the
hackers to ask them every time

266
00:31:16,583 --> 00:31:21,625
just pulling data for them.
What's going on, are you fixing
it? Because no one wants to be

267
00:31:21,625 --> 00:31:27,542
bad. The hackers want to be
good, but yet they don't have
the patience to wait for that

268
00:31:27,542 --> 00:31:33,542
whole time. >> Keep going. >>
Yeah? [Applause] >> Wait another
thing is the fact that no one

269
00:31:41,750 --> 00:31:48,667
really knows when bug bounty
program stops. They can just
post something on a HTML page,

270
00:31:48,667 --> 00:31:52,792
they can say hey guys just stop
testing me. I know that you
don't see the status so I just

271
00:31:52,792 --> 00:31:58,792
decided to bring it on to you.
So you can see that the bug
bounty program object changed to

272
00:32:01,500 --> 00:32:08,083
cancelation that's something
from Paypal's website. Dam. >>
Hey, it's really hard to get

273
00:32:08,083 --> 00:32:14,083
accepted at Def Con. Some love
for our first time speaker.
[Applause] >> To DefCon!

274
00:32:16,125 --> 00:32:22,125
[Applause] >> Nice Job. >> You
have more? >> Yes we do. Do you
want another? >> Go ahead.

275
00:32:31,125 --> 00:32:37,125
[Laughter] [Applause] >> I'm
sorry the first one is free.
[Laughter] >> What about you

276
00:32:39,292 --> 00:32:45,292
guys? No, what about you? Can
you drink? >> I'm sorry don't we
appear to be drinking? >> Maybe

277
00:32:58,708 --> 00:33:04,708
you are. >> It's five o'clock
somewhere. [Laughter] >> To Def
Con again! [Applause] >> Carry

278
00:33:15,125 --> 00:33:21,125
on. >> Give me another bottle.
[Laughter] >> Ok >> You're cut
off! [Laughter] >> Ok >> Speak

279
00:33:25,208 --> 00:33:31,208
responsibly. >> I can't. So,
this is one of the problems that
we have here. Because no one

280
00:33:34,833 --> 00:33:41,583
really knows when bug bounty
program stops and then, I can
post a bug as a hacker but then

281
00:33:41,583 --> 00:33:45,417
no one can assure me that I will
get the money from it, this is
one thing, and worst case

282
00:33:45,417 --> 00:33:52,542
someone can sue me because I am
testing the website although
it's prohibited. So I have a

283
00:33:52,542 --> 00:33:59,250
case study, I understand that
these guys -- Orin maybe in Def
Con so if Orin is here, this is

284
00:33:59,250 --> 00:34:06,542
Orin. This is the case study
that I got from his website.
[Clapping] >> Yeah, you need to

285
00:34:06,542 --> 00:34:14,042
pay me cause I am publishing
you. So this is something that I
got from his website. Orin is a

286
00:34:14,042 --> 00:34:20,042
bounty hunter and he found
something on Google he just
exposed the way that he can get

287
00:34:23,417 --> 00:34:28,042
emails on Google you know
addresses. I just don't want to
get into the details of it

288
00:34:28,042 --> 00:34:33,500
because you can probably find it
on his website. But then he
posted it to Google and the

289
00:34:33,500 --> 00:34:39,792
first response was denied
because it's not a risk that's
what Google said. But then he

290
00:34:39,792 --> 00:34:46,250
posted it again while explaining
them that this is a real risk
and they just decided to reward

291
00:34:46,250 --> 00:34:53,958
him with $500. As a result of it
I just started to look at the
title of what you've done and I

292
00:34:53,958 --> 00:35:00,250
saw -- well I stopped at page
three on Google with virus
websites just posting how bad it

293
00:35:00,250 --> 00:35:07,875
is, because he really found
something that can cause a lot
of losses for Google. I think

294
00:35:07,875 --> 00:35:13,875
someone just calculated it to
more than $1,200 -- $12,000
sorry. And it's not really much

295
00:35:17,500 --> 00:35:25,042
money but then the PR would be
bad for Google if someone finds
that. So that's just a case

296
00:35:25,042 --> 00:35:30,250
study of someone that I believe
-- I didn't get this feeling
from him but, I believe it can

297
00:35:30,250 --> 00:35:34,958
be a little bit frustrating.
Another thing that can be a
little bit frustrating for

298
00:35:34,958 --> 00:35:42,792
testers is the fact that someone
just records what they do. Let's
say that I am a hacker I have my

299
00:35:42,792 --> 00:35:49,667
specific knowledge that's my
added value. I don't want that
someone else will log everything

300
00:35:49,667 --> 00:35:56,125
I do. And if he logs maybe his
purpose is to replace me at
certain -- certain time of the

301
00:35:56,125 --> 00:36:02,125
testing. That's the way by the
way of developing security
tools. Because they learn how

302
00:36:04,167 --> 00:36:10,917
hackers work. But no one wants
to be the one that just everyone
knows what he knows. There's the

303
00:36:10,917 --> 00:36:16,917
way that hackers get money. So
those are generally the things
that are related to the business

304
00:36:20,875 --> 00:36:25,417
end for the testers. But I am
here actually to explain to you
a little bit more about what I

305
00:36:25,417 --> 00:36:31,417
can see in the future about bug
bounty programs. And well, I
think that we need to change

306
00:36:33,625 --> 00:36:37,667
something. And I am not saying
that it's something that should
be done by all the external

307
00:36:37,667 --> 00:36:43,083
companies, I am just saying that
this is a conceptual thing that
should be done. So one of the

308
00:36:43,083 --> 00:36:50,292
things that I believe that
should be done for testing
purposes is actually the fact

309
00:36:50,292 --> 00:36:56,292
that these external companies
should be like front end server.
And that means that if someone

310
00:36:58,667 --> 00:37:04,042
tests during testing, a front
end server should control a lot
of things that I will explain

311
00:37:04,042 --> 00:37:10,042
here and then the benefits are
that the front end server knows
exactly who are all the testers.

312
00:37:13,375 --> 00:37:18,625
And on the other hand if the
front end server wants to log
something about the hackers

313
00:37:18,625 --> 00:37:23,583
probably he will be able to do
it and then develop the next
product. I know that this is bad

314
00:37:23,583 --> 00:37:31,458
for the hackers but this is good
for business. So I just thought
about how to minimize the

315
00:37:31,458 --> 00:37:38,292
security risks by creating bug
bounty program and I thought, ok
if we'll allow Pen Testing and

316
00:37:38,292 --> 00:37:45,833
then prevent the malicious
exploitation it can be nice. But
hey I can't put a WAF there

317
00:37:45,833 --> 00:37:51,458
cause a WAF will stall the Pen
Testing. Obviously. So this is a
pretty good challenge. If

318
00:37:51,458 --> 00:37:58,167
someone tries to do that because
there is a lot of fine tuning
that should be done here. But

319
00:37:58,167 --> 00:38:04,167
yet, that is the idea. So if we
just try to minimize the risks,
I think that we can start with

320
00:38:08,417 --> 00:38:13,667
data leakage, that's a pretty
good example because we said
that this is one of the concerns

321
00:38:13,667 --> 00:38:19,667
that business have. And we want
to take one step further here so
if we have a front end server we

322
00:38:21,875 --> 00:38:27,250
can kind of do deep pack
inspection and actually see what
is going on there. So if we are

323
00:38:27,250 --> 00:38:33,000
able to see what's going on
there and we can validate using
a regular expression how

324
00:38:33,000 --> 00:38:38,625
actually credit cards look like,
we'll be able to stop data
leakage. And it can be done on

325
00:38:38,625 --> 00:38:44,375
credit cards, social security
numbers or anything that can
work with regular expressions.

326
00:38:44,375 --> 00:38:50,375
What I've did then when I had
this middle server I actually
created a page. This page

327
00:38:53,083 --> 00:39:00,667
actually was kind of replace
response for the hackers that
says hey man you found

328
00:39:00,667 --> 00:39:08,375
something! Congratulations! The
token of what you've found is
this one. Please post this token

329
00:39:08,375 --> 00:39:13,083
with your name and you'll get
rewarded for that. Obviously
someone will need to validate

330
00:39:13,083 --> 00:39:18,875
it. But yet the hacker won't be
exposed to credit cards. And
this is good for the business.

331
00:39:18,875 --> 00:39:26,208
It really minimizes the risk.
Another thing is the fact that,
as we all know, organizations

332
00:39:26,208 --> 00:39:33,625
can ddos. So if we have front
end server -- I'm not saying
that front end server should be

333
00:39:33,625 --> 00:39:39,625
a ddos prevention product but if
this product can somehow use
another ddos protection server

334
00:39:43,708 --> 00:39:50,708
it could be pretty good because
the websites won't be effected
by ddos. The only ones that can

335
00:39:50,708 --> 00:39:58,625
be effected by ddos is the
external company. Another thing
that I just got an input from

336
00:39:58,625 --> 00:40:04,625
one of the customers that I had,
he asked me, you know what? I
want to upgrade a version of the

337
00:40:06,958 --> 00:40:12,333
website and I am really afraid
because this is the production
and I don't want the hackers to

338
00:40:12,333 --> 00:40:17,417
be able to test me while I am
just upgrading the version
because bounty hunters are from

339
00:40:17,417 --> 00:40:23,417
all over the world so an IT job
is not exactly an IT job right?
It's 5am somewhere. So there

340
00:40:26,000 --> 00:40:31,833
should be kind of an on off
switch for the testers if
someone wants to do upgrades or

341
00:40:31,833 --> 00:40:38,250
any other maintenance things on
the website. And the concept is
pretty, pretty simple. The

342
00:40:38,250 --> 00:40:43,792
testers doing their job or just
stopping their job using the
front end server and then when

343
00:40:43,792 --> 00:40:49,792
finishing the testers can
continue to work. Next one is
actually we said that someone

344
00:40:55,417 --> 00:41:02,375
can exploit something and then
report it somewhere else. So I
was just thinking if we have the

345
00:41:02,375 --> 00:41:09,333
front end server and we are able
to log the attempts that hackers
have, probably we will be able

346
00:41:09,333 --> 00:41:15,375
to identify part of their
attacks, the malicious attacks
or at least the ones that are

347
00:41:15,375 --> 00:41:21,000
not false positives. I know that
-- it's a great challenge to
find not false positives. But

348
00:41:21,000 --> 00:41:28,708
yet, if we are able to get it,
let's assume that in order to
minimize this risk we'll be able

349
00:41:28,708 --> 00:41:34,708
to create a WAF rule and then
the customer can just -- with
the code fixing. But for now we

350
00:41:37,125 --> 00:41:43,292
can just supply him a WAF rule
and then, let's say he goes with
an open source WAF, multi

351
00:41:43,292 --> 00:41:48,833
security and then we're just
generating a multi security rule
and that's all. Fix the problem.

352
00:41:48,833 --> 00:41:54,833
And by the way, if this front
end server has a WAF by itself
we can do something even better.

353
00:42:00,042 --> 00:42:05,958
We can actually allow QA.
Because we can apply the patch
on the front end server and then

354
00:42:05,958 --> 00:42:12,333
let the testers just test
everything and add the QA team
and then probably would have a

355
00:42:12,333 --> 00:42:17,875
pretty good QA testing scenario
and we would see that we don't
have bugs and take this rule

356
00:42:17,875 --> 00:42:24,125
from the testing environment to
the production which is also
pretty awesome to have already

357
00:42:24,125 --> 00:42:30,125
imbedded testing environment. So
how do we really -- can identify
Blackhat hackers. As I said we

358
00:42:34,250 --> 00:42:40,750
need to somehow allow Pen
Testing and prevent malicious
exploitation. So I just decided

359
00:42:40,750 --> 00:42:45,750
to give you a few examples of
what is legitimate and what is
malicious. Let's say this kind

360
00:42:45,750 --> 00:42:50,958
of Sequel injection is pretty
legitimate. Next one is also
legitimate. All of the selects

361
00:42:50,958 --> 00:42:58,083
are -- most of the selects are
legitimate. On the other hand,
if we go with the malicious

362
00:42:58,083 --> 00:43:04,792
Sequel injection that's pretty
nice. Yeah, especially on
production. [Laughter] Yeah.

363
00:43:04,792 --> 00:43:10,792
It's even better if you can drop
the backups. So this is one
second thing that maybe may

364
00:43:16,208 --> 00:43:22,083
include invasions. So that's
kind of other way to do it. And
the last one shows that just

365
00:43:22,083 --> 00:43:28,333
selecting data is not only
something that is legitimate but
selecting data can actually

366
00:43:28,333 --> 00:43:34,167
select a file from the file
system and then it can be
actually malicious. So there is

367
00:43:34,167 --> 00:43:38,542
a lot of fine tuning that should
be done in such a front end
server and it's not a WAF. This

368
00:43:38,542 --> 00:43:46,167
is something that is much wider
than a WAF. Because WAF will
stop all of this payloads. Or at

369
00:43:46,167 --> 00:43:52,167
least should stop all of these
payloads. So the problem is that
we have Blackhat hackers and

370
00:43:55,458 --> 00:44:02,083
somehow we need to ban them from
the system because we don't want
them in the system. So the way

371
00:44:02,083 --> 00:44:09,417
to ban them is by just using
authentication. If we know who
they are and they already

372
00:44:09,417 --> 00:44:14,333
registered to our system then
probably we will need to
identify them. It can be done

373
00:44:14,333 --> 00:44:20,458
through ID, it can be done
through as I said VPN, URL
identification or other creative

374
00:44:20,458 --> 00:44:25,583
methods. All of you security
guys will probably find other
ways except the ones I just

375
00:44:25,583 --> 00:44:32,750
mentioned. So if I am thinking a
little bit forward. I think that
not only hackers should be in

376
00:44:32,750 --> 00:44:38,417
bug bounty programs. I think
that if we just engage in other
people to the bug bounty

377
00:44:38,417 --> 00:44:43,708
programs it can be even better
because for instance let's say
that we have attorneys. The

378
00:44:43,708 --> 00:44:50,042
attorney probably won't find
Sequel injection. Obviously the
attorney doesn't know what is

379
00:44:50,042 --> 00:44:56,292
Sequel injection unless someone
learned to be an attorney and he
is a hacker which I don't think

380
00:44:56,292 --> 00:45:03,167
there are people here like that.
But yet, the attorney can find
incorrect terms and conditions

381
00:45:03,167 --> 00:45:07,458
on the website. And this is
pretty nice. This is a pretty
short test and if he finds

382
00:45:07,458 --> 00:45:12,250
something he can just report the
bug which is a business bug it's
not exactly a technical bug and

383
00:45:12,250 --> 00:45:17,750
that's nice. Other things are
also a business analyst which
can test the flow, test the

384
00:45:17,750 --> 00:45:22,542
flows that we have in our
application. And sometimes the
flow can be incorrect and

385
00:45:22,542 --> 00:45:26,917
obviously I am talking about
security analyst and I'm not
speaking about kind of product

386
00:45:26,917 --> 00:45:33,583
analysts that don't understand
security. So I'm saying that
when we have bug bounty programs

387
00:45:33,583 --> 00:45:40,167
probably we will need other guys
except the technical ones to do
the job and we will probably

388
00:45:40,167 --> 00:45:45,750
need to involve them in other
ways. I don't have the
properties of all of these

389
00:45:45,750 --> 00:45:50,667
characteristics but we will
probably need to understand what
it means but -- yet it is a good

390
00:45:50,667 --> 00:45:57,667
idea. So just to sum it up, I
just think that the bug bounty
programs is a great idea. it can

391
00:45:57,667 --> 00:46:03,667
be done through internal or
external program. The external
ones as far as I understand up

392
00:46:05,958 --> 00:46:11,750
to now are pretty good. And I
think that we will find a lot of
these programs in the future.

393
00:46:11,750 --> 00:46:17,667
But yet, if I'm thinking about
the business perspective and the
one that really wants to defend

394
00:46:17,667 --> 00:46:23,833
his organization and don't want
to go home because someone has
breached, I suppose we have a

395
00:46:23,833 --> 00:46:29,833
long journey in front of us to
fix all these risks or at least
part of them and then we will be

396
00:46:31,833 --> 00:46:37,833
much safer. And if you have any
questions there is time.
[Applause] >> Thank you. 

