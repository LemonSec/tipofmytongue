1
00:00:00,000 --> 00:00:06,000
>> Thank you for coming out and
give a big hand, this is Chris.
	>> Come on, get that going?

2
00:00:11,500 --> 00:00:18,208
(Applause) 	>> Thank you. These
lights are bright. I just took a
shot. This is The $env:PATH Less

3
00:00:18,208 --> 00:00:24,333
Traveled is Full of Easy
Privilege Escalation Vulns. I am
a security researcher, Chris

4
00:00:24,333 --> 00:00:31,167
Campbell for the Harris
corporation. I am not do not
represent them in this talk,

5
00:00:31,167 --> 00:00:37,167
this is all personal research,
standard disclaimer applies. Any
former red team people here?

6
00:00:40,083 --> 00:00:45,500
None. They love me so much. I'm
one of the developers at
PowerSploit -- does anyone use

7
00:00:45,500 --> 00:00:51,500
PowerSploit I'm on Twitter
normally yelling at people at
obscure sec and my blog is

8
00:00:54,125 --> 00:01:01,417
obscuresec.com. This is my first
time talking here. I've wanted
to talk for many many years, I'm

9
00:01:01,417 --> 00:01:08,292
excited and terrified at the
same time. So let's start with
Windows sucks! 	(Laughter)

10
00:01:08,292 --> 00:01:15,917
(Cheers and applause) 	>> As
someone who has been forced to
work with it for over a decade I

11
00:01:15,917 --> 00:01:21,708
can say that with great
authority. It sucks a lot.
Windows 8 is terrible. But it

12
00:01:21,708 --> 00:01:27,583
does suck a lot less now because
of power shell. Right. Everybody
using power shell now? Finally

13
00:01:27,583 --> 00:01:33,708
we have a full shell like the
rest of the worlds. PowerShell
is awesome and it's definitely

14
00:01:33,708 --> 00:01:40,167
moving Microsoft's product,
their flagship product, forward.
And gives us a lot more power

15
00:01:40,167 --> 00:01:46,542
but moving forward in the next
version of Windows in Windows 9,
we're going to have some new and

16
00:01:46,542 --> 00:01:52,917
exciting things in the form of
OneGet. It is already shipping
with PowerShell version 5, a

17
00:01:52,917 --> 00:01:59,875
package manager. Has anyone ever
heard of 1 get?	 	>> Woo-hoo!
	>> Wow, that's more people than

18
00:01:59,875 --> 00:02:05,875
I thought. How many people have
heard of chocolaty nuget? Yeah,
how about PS Get? All these

19
00:02:12,208 --> 00:02:18,250
utilities have lots of purposes
and the reason I put this talk
together was to highlight these

20
00:02:18,250 --> 00:02:22,917
things because every con I would
go to I'd mention it and people
had no idea. Full disclosure

21
00:02:22,917 --> 00:02:28,917
chocolaty nuget was written by a
friend of mine. I do beat up on
it in this talk but he's a good

22
00:02:32,125 --> 00:02:38,125
guy and he has patched all the
vulns before today. These things
will help simplify if you are an

23
00:02:40,917 --> 00:02:46,958
admin or pen tester and you want
to advocate how to patch third
party applications moving

24
00:02:46,958 --> 00:02:53,542
forward this will be a way using
1 get to patch Adobe, Java,
Flash, all the third-party apps

25
00:02:53,542 --> 00:03:00,250
you are paying money for other
products. OneGet will allow you
to patch those on a regular

26
00:03:00,250 --> 00:03:07,208
basis with easy scheduled tasks.
It also is great for researching
vulnerabilities. I'll tell you

27
00:03:07,208 --> 00:03:14,000
one story about how I used it in
a few slides and another way is
to build quick CTS. I do that

28
00:03:14,000 --> 00:03:20,417
quite often. Once I find a
vulnerability and I am building
a little environment for people

29
00:03:20,417 --> 00:03:26,875
to play around in, this speeds
this up and gives you the
ability to randomize what is on

30
00:03:26,875 --> 00:03:32,875
each box to make it look more
real. 	These are quotes from the
Oneget page. A new way to

31
00:03:35,125 --> 00:03:40,542
discover and install software
packages for Windows. It's new.
Except everyone in every other

32
00:03:40,542 --> 00:03:45,583
language -- every other
operating system has had it
forever. But it lets you see

33
00:03:45,583 --> 00:03:51,625
mostly in stall and uninstall
with single PowerShell command.
It ships with version 5 which is

34
00:03:51,625 --> 00:03:57,208
in beta right now, you can get
it and download it and it's
actually open source which is

35
00:03:57,208 --> 00:04:03,208
really cool. Give Microsoft a
hand for starting to open-source
some products! (Applause) So

36
00:04:06,375 --> 00:04:13,583
it's on get hub if you want to
check out source code. At the
bottom. All right. 	My favorite

37
00:04:13,583 --> 00:04:19,583
package manager is Chocolaty
Nuget. This has over 4 million
downloads and over 2,000 unique

38
00:04:23,458 --> 00:04:29,458
packages it's written by Rob
Reynolds, over 30 contributors,
open source as well and recently

39
00:04:31,708 --> 00:04:37,292
Microsoft declared that it was a
supported open source project. I
really don't honestly -- not a

40
00:04:37,292 --> 00:04:43,333
knock on Microsoft, I have no
idea what that means, if it
means money or what. But

41
00:04:43,333 --> 00:04:49,083
Chocolaty is out there, if you
have never used it, it's great
but it's got a few problems.

42
00:04:51,167 --> 00:04:58,083
	PSGet is specific to
PowerShell. I just included it
just to be complete. PSGet is

43
00:04:58,083 --> 00:05:04,083
for like PIP, it is just a bunch
of functions that have been
screened by a few people you can

44
00:05:07,208 --> 00:05:13,208
grab easily and download and
use. All right. So I was doing a
long-term engagement and

45
00:05:15,292 --> 00:05:21,458
discovered chocolaty knew gat
being used and they had their
own private repo server in an

46
00:05:21,458 --> 00:05:27,167
enterprise. Has anyone ran into
any of these on a package
managers on a pen test ?

47
00:05:27,167 --> 00:05:35,000
Anybody? Nobody. Yes. So you
probably will run into them in
the future so it's great you are

48
00:05:35,000 --> 00:05:41,917
here. I saw it was being used, I
found some privilege escalation
vulnerabilities on their main

49
00:05:41,917 --> 00:05:46,958
baseline and then later
discovered they kind of came
from their use of chocolaty

50
00:05:46,958 --> 00:05:52,958
nuget, I reached out to Rob, and
told him hey I'll do tests, he
was like cool I didn't realize

51
00:05:57,500 --> 00:06:04,250
Rob was paying for his bandwidth
so that first day I just started
downloading every single package

52
00:06:04,250 --> 00:06:11,875
and just shot his bill sky-high.
All his numbers on his website.
I also blue-screened the VM

53
00:06:11,875 --> 00:06:16,250
because in my infinite wisdom I
decided to do it all from one VM
so I just said you know download

54
00:06:16,250 --> 00:06:22,250
start and install them all. So I
tried to install 1800 binaries
on a single Windows 8 GM and I

55
00:06:28,417 --> 00:06:34,417
got the frowny face pretty
quick. 	Let's go over a couple
problems. It is 2014, is it not,

56
00:06:36,458 --> 00:06:42,458
can we stop using http to
download installation files?
This is currently on the

57
00:06:45,833 --> 00:06:53,208
website. This is how they
suggest that you install PS get.
What you are doing is you are

58
00:06:53,208 --> 00:06:58,500
using the .NET and you are
downloading the content of the
Get.ps1 script, and you are

59
00:06:58,500 --> 00:07:04,500
piping it to IEX, which is a
alias for invoked expression so
you are basically downloading a

60
00:07:07,958 --> 00:07:13,958
script from a http and executing
it. It is 2014, people! Below
that, though, you have chocolaty

61
00:07:17,500 --> 00:07:24,208
which had a similar problem but
he immediately fixed it as soon
as I brought it up, but the

62
00:07:24,208 --> 00:07:30,208
installation itself was pulling
down a NUP KG package which is
just a zipped up PowerShell

63
00:07:35,250 --> 00:07:41,250
script over http so it, itself
had the exact same problem. But
that's been fixed. 	All right.

64
00:07:44,583 --> 00:07:50,583
So the next thing I decided to
do was to make this more
parallel so I created a bunch of

65
00:07:53,542 --> 00:08:01,083
Windows VMs, some of them using
Azure and got a nice call from
the Azure abuse team. But I

66
00:08:01,083 --> 00:08:05,458
decide today use Windows 7 and 8
because not all software
supported Windows 8 at that

67
00:08:05,458 --> 00:08:11,208
time. And then I still had a few
blue screens so the first thing
I want to do because it's my

68
00:08:11,208 --> 00:08:19,208
friend's repo was no one was
doing quality check on the code
or the actual binaries, packages

69
00:08:19,208 --> 00:08:25,083
being submitted. 	I wanted to
see if it was being abused
already with malware. So I

70
00:08:25,083 --> 00:08:31,958
scripted hashing every single
one in there, tons of tools to
do this. One is built into sys

71
00:08:31,958 --> 00:08:38,125
internals so I was able to find,
I scripted hashing all new files
and found 100 that when I

72
00:08:38,125 --> 00:08:45,875
submitted MD fives it didn't
know about. So then I scanned
those and 31 of them had

73
00:08:45,875 --> 00:08:51,708
detections. A lot were admin
tools but there was full-blown
malware including one that was

74
00:08:51,708 --> 00:08:56,167
straight you were on the
binaries that someone built a
package for and put it up there.

75
00:08:58,542 --> 00:09:04,542
	Most of those I believe are
removed. I think Rob and the
other developers are doing a

76
00:09:10,750 --> 00:09:15,417
good job looking for that now. I
also wanted to use this
opportunity to write a new tool

77
00:09:15,417 --> 00:09:20,250
to look for escalation
vulnerabilities. Aspen testers
that's something we do on the

78
00:09:20,250 --> 00:09:26,250
box a lot. You are Fishing and
you have to escalate. Every way
I've been taught is run a series

79
00:09:28,750 --> 00:09:35,333
of commands to check to go
through manually so power slate
was missing a module so I looked

80
00:09:35,333 --> 00:09:41,333
for the common path-based file
permission base service
preloading and found a bunch and

81
00:09:44,333 --> 00:09:50,083
a lot of this talk would be
about that but I had a lot of
push-back from vendors so you

82
00:09:50,083 --> 00:09:55,000
can beat me up about it but I
really got tired of dealing with
them so I'm not disclosing any

83
00:09:55,000 --> 00:10:02,333
of the silly vulnerabilities in
silly products and not giving
them any press at DEF CON. Most

84
00:10:02,333 --> 00:10:08,417
of the applications were so
obscure that no one here really
would care. 	But the talk I

85
00:10:08,417 --> 00:10:13,542
followed mostly was this one.
Has anyone seen this talk? On
Encyclopedia of Windows

86
00:10:13,542 --> 00:10:19,250
privilege escalation. Couple
years old but still very valid.
Great talk. I wanted to give

87
00:10:19,250 --> 00:10:25,792
that talk a shoutout. Here are
other resources, Chris Gates and
Rob fuller gave a talk a couple

88
00:10:25,792 --> 00:10:31,792
times, I believe it was add is
the new black. That talk is
great. Rest is mostly about

89
00:10:35,167 --> 00:10:40,542
subverting the path. I wrote a
blog post about that couple
months ago at the bottom. Those

90
00:10:40,542 --> 00:10:45,750
other two are great resources
for privilege escalation. There
were already -- there was prior

91
00:10:45,750 --> 00:10:51,750
work before I submitted this to
DEF CON. I actually took this
code almost completely and just

92
00:10:53,792 --> 00:10:59,958
rewrote each thing in
PowerShell. So this was Windows
check from pen test monkey. Has

93
00:10:59,958 --> 00:11:06,958
anyone used this? Couple people?
It's actually really cool but it
kind of defeats the purpose in

94
00:11:06,958 --> 00:11:13,292
that you have to either compile
it as a binary, put it down on
disk or have Python installed on

95
00:11:13,292 --> 00:11:18,083
the box. With PowerShell we
don't need that. I wrote a
privilege escalation module I

96
00:11:18,083 --> 00:11:24,083
was planning on releasing here
but then this guy who is awesome
harmjOy, wrote power up. Has

97
00:11:24,083 --> 00:11:26,083
anyone seen power up? Couple
people. All right. 	Well,
hopefully more people, it's

98
00:11:26,083 --> 00:11:32,083
already on version 1.1, Will
added a ton of stuff and it is
way better than what I wrote.

99
00:11:37,750 --> 00:11:43,750
What we are doing right now is
porting all that, adding things
and that will be the next

100
00:11:46,542 --> 00:11:54,375
privilege escalation module in
power suploit but it will be 95%
of Harmjoy's work, download it,

101
00:11:54,375 --> 00:12:00,375
it works great. So back to the
package managers. 	The problem
that 1 get suffers from already

102
00:12:03,208 --> 00:12:08,583
and it hasn't been released yet
is the repo server has to be
trusted and right now there's so

103
00:12:08,583 --> 00:12:14,292
many people already using
chocolaty repo servers they have
decided not to stand up their

104
00:12:14,292 --> 00:12:21,583
own yet. Maybe they will do that
in the future. We saw that over
four million people have used

105
00:12:21,583 --> 00:12:29,417
Choclaty repo's to download
stuff but Choclaty repo allows
anyone in this room to build a

106
00:12:29,417 --> 00:12:37,333
package and deploy it. So right
now with 1 get, you have to
explicitly go and say yes, I

107
00:12:37,333 --> 00:12:43,000
trust chocolaty repo but it's
already there, really easy to do
and there are a bunch of guides

108
00:12:43,000 --> 00:12:48,458
on the Internet, just trust this
repo but bottom line is all
packet managers whether written

109
00:12:48,458 --> 00:12:54,458
by Microsoft or anyone else,
they inherit all vulnerabilities
from both repo and the packages

110
00:12:58,208 --> 00:13:05,500
themselves. So here is probably
can't see that at all can you.
	This is what a chocolaty

111
00:13:05,500 --> 00:13:11,500
package looks like, two things,
XML document with different
descriptions. And then it's a

112
00:13:14,750 --> 00:13:19,583
PowerShell script to install it
and all the different switches
and flags to install it

113
00:13:19,583 --> 00:13:26,500
silently. That's really all it
is. So it would be really easy
for an enterprise to stand up

114
00:13:26,500 --> 00:13:32,500
their own repo server and deploy
their own for all internal
tools. So let's talk about the

115
00:13:35,458 --> 00:13:41,458
path. Really easy to see what's
in your path. And this
screenshot, I have a few things,

116
00:13:46,583 --> 00:13:52,583
anyone see anything problematic
that is in my path? Say it
louder. Python. Check your box

117
00:13:56,375 --> 00:14:01,167
right now, see if Python is
sitting on the root of C. If it
is it probably inherited the

118
00:14:01,167 --> 00:14:07,167
permission which allows the user
to write to any binary in that
folder. Now we have created not

119
00:14:10,042 --> 00:14:16,583
just a DLL preloading problem
but we have created a problem
where every service that is

120
00:14:16,583 --> 00:14:22,583
using the path to pull its TLLs
can actually be abused. 	There's
something else that uses the

121
00:14:26,708 --> 00:14:34,542
path. PowerShell version three,
really easy way to find in
problem and deal with

122
00:14:34,542 --> 00:14:40,500
highjacking and other
DLL-related issues is use
process monitor. There are lots

123
00:14:40,500 --> 00:14:46,625
of guys on the Internet that
show you how. In this case
PowerShell version 3 will check

124
00:14:46,625 --> 00:14:52,625
for PS console host reline.PS 1,
P MS1, PST (?), blah, blah,
blah. Anyone have a guess as to

125
00:14:57,583 --> 00:15:03,583
wait does as it finds it? It
would not execute it, would it?
(Pause) So any user on this box

126
00:15:15,500 --> 00:15:21,500
could just write PS console
host.cmd, and make it be net add
myself to local admin and sit

127
00:15:26,333 --> 00:15:32,500
back and wait for an admin to
just open PowerShell, as soon as
the console shows up, that's

128
00:15:32,500 --> 00:15:38,500
executed and you have just
escalated. 	So the vast majority
of packages, I'll show you but

129
00:15:43,000 --> 00:15:48,792
so up top is what it used to be
install for chocolaty used to
look like and at the bottom is

130
00:15:48,792 --> 00:15:54,167
what it currently looks like.
The problem with chocolaty and
all its packages and why they

131
00:15:54,167 --> 00:16:01,250
were almost all vulnerable
including things like sys
internals, if you are using

132
00:16:01,250 --> 00:16:05,167
chocolaty, you might want to
check those out because they
didn't go back to fix

133
00:16:05,167 --> 00:16:12,500
permissions. They were dropping
everything with, in C chocolaty
bin which any user has the

134
00:16:12,500 --> 00:16:17,542
ability to write to. So anyone
who was using chocolaty or
OneGet with chocolaty and

135
00:16:17,542 --> 00:16:24,417
installed packages, all those
packages are vulnerable to
privilege escalation to the tune

136
00:16:24,417 --> 00:16:29,708
of hundreds and hundreds and
hundreds of them. The fix was
actually really simple. He's

137
00:16:29,708 --> 00:16:35,708
using all users profile. Can you
guys see that? Yes, you can see
it? 	Before the fix, that does

138
00:16:47,458 --> 00:16:54,250
not look great on this screen
either. 	Before the fix cinst is
the command to install

139
00:16:54,250 --> 00:17:02,125
something, CINST, you can go
into the actual chocolaty files
and go in and change and add

140
00:17:02,125 --> 00:17:08,042
whatever commands you wanted and
then the environment I was pen
testing they were running

141
00:17:08,042 --> 00:17:13,875
commands remotely to execute
this locally to update
everything. So I was able to get

142
00:17:13,875 --> 00:17:19,875
domain admin by just writing a
net user add command to add
myself to domain admins and

143
00:17:22,083 --> 00:17:28,958
sitting back and waiting one
day. In this case I'm just
popping. So I really have no

144
00:17:28,958 --> 00:17:34,958
idea what I'm doing most of the
time. So I have lots of friends
and friends are good. So I'll

145
00:17:39,167 --> 00:17:45,500
start with Rob. Rob wrote
chocolaty, and he has done a
great job fixing everything that

146
00:17:45,500 --> 00:17:50,292
I find and telling me when some
of the stuff is just plain
stupid. Matt Graber, really good

147
00:17:50,292 --> 00:17:56,292
friend of mine. Joe Bolakirks
from Microsoft, help me a lot,
Will who wrote Power Up, and

148
00:18:01,667 --> 00:18:08,667
Will Peteroy and Lee Holmes from
PowerShell security team who
worked through removing that

149
00:18:08,667 --> 00:18:14,000
feature from PowerShell version
four and all of you guys who
came to my first DEF CON talk. I

150
00:18:14,000 --> 00:18:18,792
hope to have many more and
hopefully the next ones are a
full hour. But thanks, guys!

151
00:18:18,792 --> 00:18:24,792
(Applause) 

