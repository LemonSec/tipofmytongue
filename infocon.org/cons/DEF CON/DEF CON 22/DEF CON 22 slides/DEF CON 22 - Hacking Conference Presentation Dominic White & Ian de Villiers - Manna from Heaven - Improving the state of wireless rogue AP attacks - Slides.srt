1
00:00:00,167 --> 00:00:05,125
>> Hello! Thank you for making
it through to our talk at the
last day. Oh, I should probably

2
00:00:05,125 --> 00:00:09,417
not run that stuff before I give
you a disclaimer. So we're going
to be talking about improvements

3
00:00:09,417 --> 00:00:16,417
in attacking client devices on
Wi- Fi networks, so rogue access
point or evil AP stuff. And this

4
00:00:16,417 --> 00:00:22,750
year is the ten year anniversary
of when Karma attacks was first
released. And there's a lot of

5
00:00:22,750 --> 00:00:27,833
work that needs doing and that's
what this talk is about. Some of
you might recognize the logo we

6
00:00:27,833 --> 00:00:32,417
put up there, after Heart Bleed,
we realized that every tool
needs a logo. You can't just

7
00:00:32,417 --> 00:00:36,625
write code anymore, you have to
have a logo. So, Facebook writes
hack on everything and they sort

8
00:00:36,625 --> 00:00:40,708
of sent this out in an email
invite, so I hacked their logo
to make a logo for our thing, I

9
00:00:40,708 --> 00:00:47,167
thought that was appropriate.
But thanks to Facebook for not
suing us yet. Okay, so we're

10
00:00:47,167 --> 00:00:51,833
going to be talking about Wi- Fi
at Def Con and we got live
demos, so it's guaranteed to do

11
00:00:51,833 --> 00:00:57,417
terrible things at some point.
We'd like to not do terrible
things to you, so please turn

12
00:00:57,417 --> 00:01:01,542
off your Wi- Fi if you don't
want to be part of any potential
terrible things. If you choose

13
00:01:01,542 --> 00:01:06,250
not to turn off your Wi- Fi and
you stay in this room, we take
that as consent that you're ok

14
00:01:06,250 --> 00:01:10,375
with it. That said, we're not
going to be showing people's
passwords, we've got demos of

15
00:01:10,375 --> 00:01:17,500
our devices and things like
that. Standard disclaimer. Hi,
I'm Dominic, this is Ian. We

16
00:01:17,500 --> 00:01:22,292
work for a small company in
South Africa called Sensepost. A
Pen Testing firm that has been

17
00:01:22,292 --> 00:01:28,500
going for about 14 years. Those
are our contact details. Our
first name at sensepost.com if

18
00:01:28,500 --> 00:01:33,667
you want to get a hold of us. We
like talking about this and our
happy to continue the

19
00:01:33,667 --> 00:01:39,000
conversation and we're also at
Twitter at those handles.
Alright, so the ubiquitous why

20
00:01:39,000 --> 00:01:44,917
Wi- Fi or justification for our
research slide. I think we all
understand that Wi- Fi is pretty

21
00:01:44,917 --> 00:01:50,292
valuable. People when they start
hacking, the first skinny
project, you go buy yourself a

22
00:01:50,292 --> 00:01:57,208
pineapple and turn it on and if
you at Def Con, you get owned. I
don't know if you saw that. SO

23
00:01:57,208 --> 00:02:02,250
it's pretty fascinating, we were
worried that the volms and that
stuff might -- because of some

24
00:02:02,250 --> 00:02:06,708
commonality exists in ours,
thankfully it doesn't, but we
suspect we spotted it every now

25
00:02:06,708 --> 00:02:11,750
and again, just massive amounts
of shell code stuff flying
through the sky and so who ever

26
00:02:11,750 --> 00:02:17,667
that is, nicely done. But I
think -- so Wi- Fi gives you
pretty cool stuff. We know that

27
00:02:17,667 --> 00:02:21,125
these things are ubiquitous,
they're sitting in our pockets,
we've all got them on us and

28
00:02:21,125 --> 00:02:25,042
they are all connected to cloud
services with tons of valuable
information, be it your

29
00:02:25,042 --> 00:02:28,667
corporate information or your
personal information. So we want
to hack the Wi- Fis. They're

30
00:02:28,667 --> 00:02:35,083
everywhere and they give us
useful stuff. And the promise of
hacking Wi-Fi is that you get

31
00:02:35,083 --> 00:02:39,750
creds from the sky. Manna from
Heaven. There's vulnerabilities
that have existed at every layer

32
00:02:39,750 --> 00:02:46,333
and we can own Wi- Fi devices on
almost every layer of the ozone
model. And we should have creds

33
00:02:46,333 --> 00:02:50,542
falling from the sky. So you can
spoof devices into connecting to
your network with rogue AP

34
00:02:50,542 --> 00:02:55,500
attacks. If there's a secure
network that you can try and
crack those creds. WPA handshake

35
00:02:55,500 --> 00:03:00,125
cracking or EAP cracking then
you get corporate creds. Once
you are on the network you can

36
00:03:00,125 --> 00:03:04,750
man in the middle them and get
passwords like Doug Song
released this stuff in 2000,

37
00:03:04,750 --> 00:03:10,625
Robert Graham released his
hamster and ferret stuff in
2007, we had Fire Cheet in 2010

38
00:03:10,625 --> 00:03:14,333
there are lots of tools released
to give you passwords once
people have connected. And then

39
00:03:14,333 --> 00:03:19,292
we've got stuff to try to mess
with protection so we can get
around SSL using SSL strip and

40
00:03:19,292 --> 00:03:25,625
Moxie's tools. So technically at
every layer we've got these
vulnerabilities. Why can't we

41
00:03:25,625 --> 00:03:31,292
walk around with passwords
filling up the database
somewhere? The reality these

42
00:03:31,292 --> 00:03:35,667
days is kind of far from that,
there's no Manna falling from
Heaven. You can run this stuff

43
00:03:35,667 --> 00:03:39,875
and you will get maybe the odd
noob whose still checking mail
over pop without certificate

44
00:03:39,875 --> 00:03:45,833
validation. You really don't get
a bunch of credentials flying
out of the sky. And to try to

45
00:03:45,833 --> 00:03:50,250
get a lot of credentials, you
have to put a lot of work in. So
if you look at the Karma attacks

46
00:03:50,250 --> 00:03:56,583
which we are going to look at in
a bit, those things don't work
as well as they used to, and

47
00:03:56,583 --> 00:04:00,833
we'll get into that, ten year
anniversary. With things like
cracking WPA handshakes and

48
00:04:00,833 --> 00:04:05,458
cracking EAP networks, those
things have not kept up- to-
date with our ability to crack

49
00:04:05,458 --> 00:04:10,042
stuff and the speed of which we
can do that. And if you look at
the man in the middle stuff,

50
00:04:10,042 --> 00:04:17,208
Doug Song released D-Sniff in
2000, and if you want to capture
MSN credentials, going with the

51
00:04:17,208 --> 00:04:23,792
MSN messenger, those things are
great. But nobody uses MSN
messenger any more. And then

52
00:04:23,792 --> 00:04:28,417
things like HSTS and certificate
pinning have come along and
messed with our ability to man

53
00:04:28,417 --> 00:04:33,667
in the middle as well. So we
wanted to fix that. So we're
releasing a set of tools today,

54
00:04:33,667 --> 00:04:38,000
we're calling it the Manna
toolkit. We're calling it Manna
because of the Manna from Heaven

55
00:04:38,000 --> 00:04:44,042
thing and we're trying to figure
out what a decent acronym would
be. Something that made that

56
00:04:44,042 --> 00:04:48,417
make sense. And we thought of
something lame, like man in the
middle and network attack

57
00:04:48,417 --> 00:04:52,792
toolkit. And we thought ok,
that's possible, we'll go with
it. Somebody yesterday suggested

58
00:04:52,792 --> 00:04:56,500
we call it -- many are now
active. Which we thought was a
pretty cool blame. I don't know

59
00:04:56,500 --> 00:05:01,250
if you're here, so we decided
we're going to call it, many are
now active. Okay, so before we

60
00:05:01,250 --> 00:05:07,250
look at Karma attacks, this is a
targeted primer about Wi- Fi.
First off we are talking Wi- Fi,

61
00:05:10,458 --> 00:05:17,292
we're not talking 3G, GSN,
Bluetooth, NSC, anything like
that. 80211 ABGNAC stuff. In Wi-

62
00:05:17,292 --> 00:05:22,042
Fi, you have three types of
packets. You have management
data and control packets. The

63
00:05:22,042 --> 00:05:27,000
control packets are the kinds of
things that prevent RF
collisions and allow lots of

64
00:05:27,000 --> 00:05:33,250
devices to talk RF at the same
time and get decent throughputs.
And data packets are the stuff

65
00:05:33,250 --> 00:05:36,750
that carries the data you are
sending over the network.
Management packets are the ones

66
00:05:36,750 --> 00:05:41,750
we're interested in. And in
particular there are three sets
of packets, probe requests,

67
00:05:41,750 --> 00:05:48,917
probe responses and beacons. So
when your device looks for a
network, when you open up your

68
00:05:48,917 --> 00:05:53,333
phone and you look at available
Wi- Fi networks or do it on your
laptop, this is what happens.

69
00:05:53,333 --> 00:05:58,125
Your device sends out a broad
cross probe request and then all
of the access points nearby say,

70
00:05:58,125 --> 00:06:05,375
hey, I'm this network and I'm
available. And that's a probe
response coming back. Now when

71
00:06:05,375 --> 00:06:09,208
you connect to a network, this
happens. Well, something
slightly more complicated than

72
00:06:09,208 --> 00:06:13,958
this, this is the simplified
version. You send a directed
probe request which is different

73
00:06:13,958 --> 00:06:18,583
from a broad path probe request
in that you are looking for that
specific network and it will

74
00:06:18,583 --> 00:06:23,083
respond to that directed probe
request and you get an
association. So if you have

75
00:06:23,083 --> 00:06:29,667
played with the aircrack suites
and you have run fake off with
air replay, that's what this is.

76
00:06:29,667 --> 00:06:35,417
And you get that association ID
to reach the end of this
process. So current Karma

77
00:06:35,417 --> 00:06:41,417
attacks, the stuff released by
Dino and Shawn in 2004, and they
target this aspect of the

78
00:06:45,667 --> 00:06:49,833
association. So if something
tries to associate to a network
with a directed probe, they will

79
00:06:49,833 --> 00:06:55,833
respond -- But they don't target
this part of the whole thing.
And what ends up happening is if

80
00:06:58,292 --> 00:07:04,292
you look at - - sorry - - I'm
jumping ahead a little. Anyway.
So if you look at problems that

81
00:07:06,333 --> 00:07:10,958
happen, if you run Karma these
days, it doesn't work as well.
So if you take like a standard

82
00:07:10,958 --> 00:07:17,208
Android device, this is a Nexus
running the latest one, it will
show you a list of networks that

83
00:07:17,208 --> 00:07:22,167
are available, but it's not
necessarily directed probing for
those networks. So Karma won't

84
00:07:22,167 --> 00:07:26,708
know to respond to that stuff.
So if you have a home network
saved there, you can click on

85
00:07:26,708 --> 00:07:30,208
it, but it will say your home
network is not here, so I'm not
going to try to associate and

86
00:07:30,208 --> 00:07:36,208
send that off. So we need to
fool those devices into thinking
that network is here. I'm going

87
00:07:38,250 --> 00:07:43,750
to jump back a little. So in
South Africa as kids, we play a
game in the pool called

88
00:07:43,750 --> 00:07:48,375
Marco/Polo. We asked some people
in the conference if they have
heard of Marco/Polo and they say

89
00:07:48,375 --> 00:07:53,542
they have, not the explorer, the
game. I apologize if this is a
localized reference. But the way

90
00:07:53,542 --> 00:07:59,250
the game works is, some kid
closes his eyes and he is it and
he shouts out Marco and then

91
00:07:59,250 --> 00:08:03,792
everybody nearby shouts out Polo
and he has to try and catch
them. So he has to acoustically

92
00:08:03,792 --> 00:08:08,708
locate them. So this works well
for Wi-Fi. So imagine that your
client device when it sends out

93
00:08:08,708 --> 00:08:14,000
a broadcast probe is shouting
Marco and all of the access
points are responding, shouting

94
00:08:14,000 --> 00:08:20,000
Polo with their network name. So
that's -- what Karma relies on
is the fact that we can't tell

95
00:08:22,042 --> 00:08:26,417
the difference between one
person saying polo, home
network, and another person

96
00:08:26,417 --> 00:08:30,875
saying polo home network. And
that's built into the pro -- the
way Wi- Fi works. It's your

97
00:08:30,875 --> 00:08:35,417
corporate networks, you're going
to have hundreds of APs spread
across your campus, you need to

98
00:08:35,417 --> 00:08:42,417
be able to have lots of BSS,
BSSIDs advertising the same
ESSID so that you can roam

99
00:08:42,417 --> 00:08:47,542
around and connect to lots of
different things. And the places
where authentication happens is

100
00:08:47,542 --> 00:08:52,500
after the association. That's
where you do your EAP stuff
where you do your WPA stuff. So

101
00:08:52,500 --> 00:08:57,750
before then, it's completely
unauthenticated and you can
spoof it and nothing knows -- is

102
00:08:57,750 --> 00:09:03,542
any the wiser. The other aspect
that makes Karma work is that
devices have preferred network

103
00:09:03,542 --> 00:09:07,500
lists on them. So when you
connect to a network and you
choose save that network or

104
00:09:07,500 --> 00:09:13,708
remember it, that gets stored as
a preferred network. And one of
the problems that devices have,

105
00:09:13,708 --> 00:09:17,500
is that they probe out for these
networks even when they
shouldn't. They should just be

106
00:09:17,500 --> 00:09:21,500
sending out a broad burst
request and looking for networks
nearby, but for a variety of

107
00:09:21,500 --> 00:09:25,750
different reasons on different
devices, they will send directed
probe requests saying, hey, home

108
00:09:25,750 --> 00:09:32,875
network, are you here? Hey, home
network, are you here? Just
shouting out Marco. So the

109
00:09:32,875 --> 00:09:38,875
modern implementations of Karma
these days, so the guy on your
right is Robin Wood --

110
00:09:38,875 --> 00:09:45,583
DigiNinja, he wrote the first
patches for Karma for host APD
which is the open source and

111
00:09:45,583 --> 00:09:49,250
access point software and that's
the stuff that's used on the
pineapple, although they

112
00:09:49,250 --> 00:09:53,000
released a new version of
pineapple stuff yesterday, so
it's slightly changed now. The

113
00:09:53,000 --> 00:09:59,542
guy on the right is, I can never
pronounce his name, Thomas
d'Otreppe. I'm sorry if he is

114
00:09:59,542 --> 00:10:04,708
here and I'm butchering it. He
is the guy that wrote the
aircrack suite and the airbase

115
00:10:04,708 --> 00:10:12,292
MG tool implements Karma in
software mode. >> Right, hi
everyone, as Dominic said, my

116
00:10:12,292 --> 00:10:17,458
name is Ian de Villiers. Believe
it or not this little note is
actually stuck up on my wall at

117
00:10:17,458 --> 00:10:23,208
the office because I really
battle with host APD. It seems
that the developers follow that

118
00:10:23,208 --> 00:10:27,167
old thing about not commenting
the code because if it was
difficult to write, it should be

119
00:10:27,167 --> 00:10:33,417
difficult to read. I've also got
to say it's a bit disappointing,
I'm doing my first presentation

120
00:10:33,417 --> 00:10:40,333
at Def Con and I'm forced to use
Windows. We presented yesterday
and Linux just didn't want to

121
00:10:40,333 --> 00:10:47,250
work with the projectors and
stuff, so I thought -- I'd be
safe, but anyway. In any case,

122
00:10:47,250 --> 00:10:52,625
there a big thing that Dominic
pointed out, in order to
successfully start getting

123
00:10:52,625 --> 00:10:58,792
devices to associate with our
rogue access points, our access
points are going to have to

124
00:10:58,792 --> 00:11:05,292
respond both to directed probe
requests as well as broadcasts.
So literally what we did is we

125
00:11:05,292 --> 00:11:12,208
did quite a bit of work on the
actual hostapd code and we added
components, essentially just a

126
00:11:12,208 --> 00:11:18,333
bunch of hashes and stuff --
patch tables where we restored
the list of networks that

127
00:11:18,333 --> 00:11:23,875
devices had probed for on a per
device used. So if Dominic's
phone is probed for three

128
00:11:23,875 --> 00:11:28,750
networks, we would store that
and then later on we'd respond
for broadcasts with that. And

129
00:11:28,750 --> 00:11:33,375
this literally would mean that
devices would potentially start
noticing that networks were open

130
00:11:33,375 --> 00:11:39,125
and would start connecting to
them. So to give you an idea
over here, I'm just going to

131
00:11:39,125 --> 00:11:45,958
display over here -- yeah, one
thing, we are going to fire this
up now, as Dominic said right at

132
00:11:45,958 --> 00:11:51,708
the beginning, the disclaimer,
if you have your Wi- Fi on,
you'll probably see networks

133
00:11:51,708 --> 00:11:57,708
that you associated with
previously will start becoming
available as I go through the

134
00:12:01,208 --> 00:12:07,542
talk over here. In any case, on
the screen, we have a screen
cast of an Android device, we

135
00:12:07,542 --> 00:12:13,250
can see a couple of networks
connected to previously, so post
mana, et cetera, et cetera, they

136
00:12:13,250 --> 00:12:18,292
all stored -- the Flamingo Rooms
is currently available over
there. And then literally, we

137
00:12:18,292 --> 00:12:26,000
are going to fire up Mana and on
the left hand screen we're going
to fire it up and you will see a

138
00:12:26,000 --> 00:12:31,667
bunch of output from it and that
is where it's storing a direct
probe request for specific

139
00:12:31,667 --> 00:12:37,375
devices. And when we come along
over here, our previously saved
network is now obviously is now

140
00:12:37,375 --> 00:12:42,542
available and it's attempting to
connect to the thing and we can
carry on and it's actually

141
00:12:42,542 --> 00:12:49,792
connected. This is following the
same logic as normal in terms of
it follows the new logic we

142
00:12:49,792 --> 00:12:54,833
implemented that being, that
we've stored the direct probe
request and then responded to

143
00:12:54,833 --> 00:12:59,708
the broadcast, hello, we're
here. And the device is actually
going to connect. If this gets

144
00:12:59,708 --> 00:13:05,542
further and we just delete that
network and we create a new one,
then you will see more how the

145
00:13:05,542 --> 00:13:08,958
original Karma attacks worked.
So, we delete that, we're going
to create a network, and then

146
00:13:08,958 --> 00:13:14,458
it's going to say, hello, are
you there? We're going to call
the network Manna Sensepost, we

147
00:13:14,458 --> 00:13:19,250
haven't connected to it before,
and we're going to connect to it
almost immediately. It just

148
00:13:19,250 --> 00:13:24,875
makes it very easy. There we go.
And so we've connected. >>
Sorry, I'm laughing at some of

149
00:13:24,875 --> 00:13:30,875
the messages that some of you
are choosing to send us in your
network names. Thank you. All

150
00:13:33,125 --> 00:13:38,750
right, so the implication there
is that Karma starts working
much better than it used to.

151
00:13:38,750 --> 00:13:42,500
We're now responding to those
broadcast requests based on the
view of the PNL that we can

152
00:13:42,500 --> 00:13:46,542
build up from your device. So if
you have Wi-Fi on now, we're not
running anything malicious other

153
00:13:46,542 --> 00:13:52,667
than just sending out the Karma
stuff, it's pretty busy at the
moment. But you should see some

154
00:13:52,667 --> 00:13:58,125
networks specific to your device
showing up. Now one of our
colleagues who is sitting down

155
00:13:58,125 --> 00:14:02,917
in the front here, Glenn, he
presented in this track
yesterday around this time on

156
00:14:02,917 --> 00:14:08,417
practical ariel hacking
surveillance and a tool kit that
he built called Snoopy. And what

157
00:14:08,417 --> 00:14:13,042
Snoopy does is it looks at these
probe requests that you are
sending out and it builds up a

158
00:14:13,042 --> 00:14:17,167
location history of where you've
been. So based on your network
name, if that's unique and it's

159
00:14:17,167 --> 00:14:23,000
been driven into the database
can find out where you are. So
stuff like Snoopy and creepy ass

160
00:14:23,000 --> 00:14:29,042
retailers using this to track
people around and other things
have led to a reduction in the

161
00:14:29,042 --> 00:14:32,667
number of probes, directed
probes that these devices send
out send out. Because

162
00:14:32,667 --> 00:14:36,167
technically these devices don't
need to send a directed probe
out other than when it is

163
00:14:36,167 --> 00:14:41,292
actually associating to the
network. So in the case of IOS,
the number of probes it sends

164
00:14:41,292 --> 00:14:45,333
out for open networks has been
dramatically reduced. And even
the number of probes it sends

165
00:14:45,333 --> 00:14:50,375
out for hidden networks has been
reduced which I will come back
to in a moment. In the case of

166
00:14:50,375 --> 00:14:55,375
Android devices, they've
actually pushed the patch to WPS
applicant which is the thing

167
00:14:55,375 --> 00:15:00,125
that associates to networks and
to limit the number of probes
that gets sent out. That will

168
00:15:00,125 --> 00:15:05,792
get built into Android at some
point in the future. So we
expect to see even fewer probes

169
00:15:05,792 --> 00:15:10,625
coming down the line. So when I
was trying to figure out why IOS
devices weren't probing for

170
00:15:10,625 --> 00:15:18,167
hidden networks, because that's
weird. Hidden network, it's not
broadcast on the SSID. If you

171
00:15:18,167 --> 00:15:23,083
send out -- I mean on beacons --
if you send out the broadcast
probe request it won't respond

172
00:15:23,083 --> 00:15:28,000
saying, hi I'm this network. You
have to know the network name
and do a directed probe for that

173
00:15:28,000 --> 00:15:32,458
network and it will respond. So
what that means is if you have
any hidden networks in your PNL

174
00:15:32,458 --> 00:15:36,292
on your devices, basically your
device runs around going, hey
network are you there, hey

175
00:15:36,292 --> 00:15:41,833
network are you there, hey
network are you there. So how
had Apple figured out to not do

176
00:15:41,833 --> 00:15:47,542
that? Like it's impossible. I
spent a bunch of time building
Faraday Cages trying to see if

177
00:15:47,542 --> 00:15:51,125
they were maybe they were using
location history and then
realizing I don't know math and

178
00:15:51,125 --> 00:15:56,833
can't build a Faraday Cage to
save my life and tin foil works
much better. And we eventually

179
00:15:56,833 --> 00:16:02,958
figured out that what Apple does
is if there is at least one
hidden network nearby then it

180
00:16:02,958 --> 00:16:07,750
will probe for its hidden
networks. But if there is no
hidden networks nearby then it

181
00:16:07,750 --> 00:16:12,167
won't probe for hidden networks.
So easy win if you weren't using
stuff like Snoopy or your trying

182
00:16:12,167 --> 00:16:16,000
to look for probes or you want
to make your Karma attacks work
better you must have a hidden

183
00:16:16,000 --> 00:16:22,583
network nearby. >> Right, so
what we did then is we thought
about this because there were a

184
00:16:22,583 --> 00:16:27,833
couple of things one could do.
One could either run a hidden
network or we also thought about

185
00:16:27,833 --> 00:16:35,500
broadcasting hidden network
frames alongside the beacon and
so on and so forth, that's not

186
00:16:35,500 --> 00:16:41,167
implemented yet, or
alternatively de-offing users
and having them rescan which

187
00:16:41,167 --> 00:16:46,792
could potentially be
problematic, it's really easy,
but problematic from other

188
00:16:46,792 --> 00:16:51,292
aspects. Eventually what we
thought was because different
devices react in different ways

189
00:16:51,292 --> 00:16:57,125
and the large number of people
these days carry more than one
Wi-Fi device around with them,

190
00:16:57,125 --> 00:17:00,917
which would probably have
different levels of stealthness,
if I can put it that way. What

191
00:17:00,917 --> 00:17:06,417
we thought we would actually go
along and implement something
else. You remember earlier when

192
00:17:06,417 --> 00:17:13,667
I was talking about Karma with
the -- device view of networks
that it actually probes for, we

193
00:17:13,667 --> 00:17:19,875
decided, actually let's skip
this. If there's anybody out
there, we're going to go through

194
00:17:19,875 --> 00:17:22,708
every network that we've
actually collected from any
device and we're going to

195
00:17:22,708 --> 00:17:27,708
broadcast it. And it actually
makes our Karma attack
significantly better. So if I

196
00:17:27,708 --> 00:17:32,583
skip back to the videos and I go
to Karma now, it's basically a
configuration setting. It's not

197
00:17:32,583 --> 00:17:37,958
enabled by default because it's
really noisy. And we start
running the actual Karma engine.

198
00:17:37,958 --> 00:17:45,125
What we're going to see is on
our right hand side we have our
Android application there's only

199
00:17:45,125 --> 00:17:50,292
one open network, but as Karma
starts picking up more and more
networks from other devices

200
00:17:50,292 --> 00:17:55,458
nearby that list is going to
grow substantially. And all of
the sudden you start seeing a

201
00:17:55,458 --> 00:17:59,333
whole heard of them and
unfortunately that tablet that I
was screen casting this from is

202
00:17:59,333 --> 00:18:03,042
a bit longer than my screen, but
there are a lot of them. And
they just sort of carry on

203
00:18:03,042 --> 00:18:09,042
coming up and so on and so
forth. It really improves the
success of our Karma attacks. >>

204
00:18:11,542 --> 00:18:16,750
So I'm running that at the
moment, if you are looking at
your Wi-Fi device, you will see

205
00:18:16,750 --> 00:18:20,500
that. But the problem is, it
ends up trying to generate more
packets than this card can -- or

206
00:18:20,500 --> 00:18:23,833
frames -- that this card can
send out in a reasonable
timeframe and there's lots to

207
00:18:23,833 --> 00:18:29,875
view. >> It might work for a bit
and then it will probably fall
over and start working again.

208
00:18:29,875 --> 00:18:36,625
It's working. >> Okay, so up
until now what we did is we
fixed Karma. Karma is ten years

209
00:18:36,625 --> 00:18:43,125
old, it wasn't working so well,
it now works much better. We
field tested this and we're

210
00:18:43,125 --> 00:18:50,750
prepared to stand by that. We're
releasing this tool at the end
of the talk, you can take it and

211
00:18:50,750 --> 00:18:57,833
have new Karma attacks that work
much better. But then we wanted
to -- [Applause] >> In a fine

212
00:18:57,833 --> 00:19:02,167
tradition of over promising and
under delivering, we thought
what else can we put in our Def

213
00:19:02,167 --> 00:19:06,458
Con abstract that will make it
look cool? So we thought let's
make ridiculous claims about

214
00:19:06,458 --> 00:19:12,167
secure networks and see if we
can live up to them. So Karma
attacks work only on open

215
00:19:12,167 --> 00:19:18,042
networks, you need the network
to be open. Secure networks, so
that's WPA networks, or

216
00:19:18,042 --> 00:19:24,875
pre-shared key networks, or
stuff like 8021X are juicy
targets. They, on the one hand

217
00:19:24,875 --> 00:19:29,083
provide you credentials and on
the other hand, if you can
actually get them to connect,

218
00:19:29,083 --> 00:19:34,083
you get man in the middle -- the
benefits of the man in the
middling someone. So we spent

219
00:19:34,083 --> 00:19:38,875
some time working on extending
that. And Ian just gave me a
meaningful look which makes me

220
00:19:38,875 --> 00:19:46,250
think that -- here we go -- the
meaningful look meant I forgot
something. So when you have a

221
00:19:46,250 --> 00:19:51,958
secured network in your PNL
list, different devices behave
in different ways. Let's say an

222
00:19:51,958 --> 00:19:58,500
Android device probes out for a
hidden -- not a hidden network,
a secured network. Right now

223
00:19:58,500 --> 00:20:03,542
current versions of Karma and
Karma running in open mode only
our version, will send a

224
00:20:03,542 --> 00:20:09,625
response, but the devices match
the network based on the
security settings and the name.

225
00:20:09,625 --> 00:20:12,917
So they are not going to auto
associate to those networks.
They see it as a different

226
00:20:12,917 --> 00:20:17,375
network. So what that means is
that if we want devices to
automatically connect, when they

227
00:20:17,375 --> 00:20:21,167
are in people's pockets, we want
them to automatically connect to
us. We don't want them to have

228
00:20:21,167 --> 00:20:26,708
to click on the network to just
connect. That's not going to
happen. And even if they do

229
00:20:26,708 --> 00:20:31,167
click on the network to connect,
different devices give you funny
warnings. Like on an Apple -- on

230
00:20:31,167 --> 00:20:36,167
an OSx device it will tell you,
this used to be a WPN network
and now it's open that's wired

231
00:20:36,167 --> 00:20:40,250
are you sure you want to
continue. Android shows it as a
completely different network and

232
00:20:40,250 --> 00:20:45,292
things like that. So we spent
some time thinking about how to
deal with that. >> So one of the

233
00:20:45,292 --> 00:20:50,625
things I came up with was well,
we came up with was basically is
we decided if there's no

234
00:20:50,625 --> 00:20:56,625
certificate validation on a
device, then it actually could
theoretically be quite easy to

235
00:20:58,792 --> 00:21:03,958
get them to actually connect and
look at cracking things. Now the
big thing is previously people

236
00:21:03,958 --> 00:21:09,417
have relied on Pre Radius
written by Joshua Wright and
Brad Antoniewicz. I hope I got

237
00:21:09,417 --> 00:21:14,708
that right. But what we've done,
we've actually ported some
patches by Brad into hostapd so

238
00:21:14,708 --> 00:21:20,708
we've now got our own Radius
server and so it's all
incorporated to make it a little

239
00:21:42,917 --> 00:21:46,917
bit easier. Nice. So we're
rather tethered over here.
Anyway. But in any case, if we

240
00:21:46,917 --> 00:21:51,375
look at WPA2, we only got to
capture the first two parts of
the authentication and pass them

241
00:21:51,375 --> 00:21:55,583
off to some other cracking tool
and then what we thought we
would do is look at

242
00:21:55,583 --> 00:21:59,333
automatically crack and add EAP
credentials into our hostapd
config. So the reason for that

243
00:21:59,333 --> 00:22:03,792
is just as Dominic pointed out
is very much -- firstly we've
got to Radius server built into

244
00:22:03,792 --> 00:22:07,542
the thing, point number one.
Point number two is you are
talking normally about slightly

245
00:22:07,542 --> 00:22:11,250
more high venue credentials,
it's not someone's WPA2 personal
at home etc, etc, it's normally

246
00:22:11,250 --> 00:22:15,250
going to be a corporate or
something similar. Plus you have
the benefits of actually being

247
00:22:15,250 --> 00:22:19,458
able to man in the middle that
specific device, so that makes
it really, really, really juicy.

248
00:22:19,458 --> 00:22:24,167
If we have a look at this, we
have a video over here again.
There's a bunch of stuff

249
00:22:24,167 --> 00:22:27,667
happening. There's two windows
open over here. Just explain
quickly, the bottom left hand

250
00:22:27,667 --> 00:22:31,875
one, and unfortunately, the
screen is a bit compressed so I
hope it's going to be clear

251
00:22:31,875 --> 00:22:36,875
enough, is where I am going to
tail our EAP users file so we
can see when users get added.

252
00:22:36,875 --> 00:22:41,833
The top list is the output from
hostapd and I'm going to stop
here a bit later as the crack

253
00:22:41,833 --> 00:22:46,292
and add process actually works.
And on the right hand side, we
have an Android device with a

254
00:22:46,292 --> 00:22:50,250
secure network configured. Now
if we actually skip through
this, have a look at the network

255
00:22:50,250 --> 00:22:57,333
config -- The identity, the
user, password, et cetera, et
cetera. And we'll skip on ahead

256
00:22:57,333 --> 00:23:03,042
a bit and now we tail the users
file. That's basically pretty
much the default one. I've got

257
00:23:03,042 --> 00:23:09,125
nothing past the final entries
in that. And I just want to keep
an eye on the time here because

258
00:23:09,125 --> 00:23:15,458
it's -- so literally I started
this app now and we'll see our
device is almost immediately

259
00:23:15,458 --> 00:23:21,000
going to connect, about now.
Yeah, it's really already come
through, I actually missed it.

260
00:23:21,000 --> 00:23:27,625
If we have a look on the top
left, we've got output from
crackapd, which sort of says

261
00:23:27,625 --> 00:23:34,292
credentials cracked user Peap,
TTLS, password and we have a new
entry in our EAP users file. And

262
00:23:34,292 --> 00:23:41,292
if we let this carry on, you
will see it says it's going to
connect pretty much now. There

263
00:23:41,292 --> 00:23:47,583
we go obtaining IP address and
it's now connected. Now how it
all works currently is literally

264
00:23:47,583 --> 00:23:55,042
from hostapd, I just write up --
create a -- when the application
starts and I write from there.

265
00:23:55,042 --> 00:23:59,958
But the cracking is actually
taking place using generic
tools. In my case I'm using

266
00:23:59,958 --> 00:24:05,583
Asleep with the standard Charlie
Linux BrockU word list. But the
script itself is implemented in

267
00:24:05,583 --> 00:24:11,667
Python it just makes it easier
-- people want to go along and
start looking at cloud based

268
00:24:11,667 --> 00:24:17,417
cracking providers or something
like that. It makes it easier to
extend that. You have to say

269
00:24:17,417 --> 00:24:23,542
depending on the complexity of
the password, it might not crack
as fast as this one. This one's

270
00:24:23,542 --> 00:24:28,333
user was password so it would
naturally crack virtually
immediately. But it could take,

271
00:24:28,333 --> 00:24:34,333
if it's crackable it could even
take a significant amount of
time. >> So the implication

272
00:24:36,708 --> 00:24:42,708
there is two-fold. The one is we
took free-Radius WPE which was
released in 2008 and has not

273
00:24:42,708 --> 00:24:47,583
been really updated much since
and that's not integrated within
this toolkit. You don't have to

274
00:24:47,583 --> 00:24:53,167
run a separate tool, that stuff
will all work for you. And then
the other thing we did is also

275
00:24:53,167 --> 00:24:59,125
crack an add as Ian pointed out,
so you can hopefully get --
start man in the middling

276
00:24:59,125 --> 00:25:06,917
people. So up to now what we did
is we focused on improving Karma
attacks. The broadcast stuff and

277
00:25:06,917 --> 00:25:12,917
trying to deal with things like
loud mode, trying to deal with
secure networks. But to really

278
00:25:12,917 --> 00:25:18,458
make this stuff count, like if
we just left it there and it's
kind of a technical -- it

279
00:25:18,458 --> 00:25:22,125
doesn't fulfill the promise of
creds falling from the sky,
Manna from Heaven. So we

280
00:25:22,125 --> 00:25:27,125
realized we need to look at the
man in the middle side. Now here
we have relied a lot more on

281
00:25:27,125 --> 00:25:31,875
lots of other people's tools. We
built some of our own. But the
problem is there are so many

282
00:25:31,875 --> 00:25:36,333
different tools out there and
you never really sure which of
the ones that are going to work

283
00:25:36,333 --> 00:25:40,875
best for you and with the
current configuration and the
way devices work and the new

284
00:25:40,875 --> 00:25:44,958
stuff that's coming out like
HSTF, and certificate pinning,
some of that stuff just doesn't

285
00:25:44,958 --> 00:25:49,708
work. I mentioned it in the
beginning that it doesn't work
as well. So we spent some time

286
00:25:49,708 --> 00:25:54,292
trying to put together a
configuration that would give us
really nice results when man in

287
00:25:54,292 --> 00:25:57,583
the middling and give us the
credentials from the sky. So up
to now we are just getting the

288
00:25:57,583 --> 00:26:02,542
EAP credentials. What else can
we get? So the first thing we
used is a tool by a guy name

289
00:26:02,542 --> 00:26:07,792
Daniel Roethlisberger. Once
again I'm sorry if I'm messing
it. That's why there is a

290
00:26:07,792 --> 00:26:13,792
hamburger there. So I could
remember his name. This is a
tool called SSLSplit. If you

291
00:26:18,375 --> 00:26:21,667
want to man in the middle SSL
connections, I highly recommend
this tool. It's scalable, it can

292
00:26:21,667 --> 00:26:24,792
do non HTTP protocols and it
wraps the output out into useful
formats. It's a really cool

293
00:26:24,792 --> 00:26:31,000
tool. The Mana toolkit uses this
to do a lot of heavy lifting, we
didn't make any changes to it.

294
00:26:31,000 --> 00:26:36,125
The next thing we looked was
different configurations for
different situations. Most

295
00:26:36,125 --> 00:26:42,042
people when they are man in the
middling will rely on Natting or
some kind of upstream connection

296
00:26:42,042 --> 00:26:45,458
that they are literally sitting
in the middle of. But it's
really useful to be able to do

297
00:26:45,458 --> 00:26:50,583
this stuff in places where
people have left their Wi-Fi on,
but haven't -- but there isn't

298
00:26:50,583 --> 00:26:53,875
necessarily an upstream
connection. Like if you are a
visitor in a foreign land and

299
00:26:53,875 --> 00:26:59,167
you don't have a data bundle. Or
an airplane or down a mine,
something like that, lots of

300
00:26:59,167 --> 00:27:04,958
people leave their Wi-Fi on in
airplanes when they're not
supposed to. So a lot of devices

301
00:27:04,958 --> 00:27:09,583
will do these checks to check if
they are on line or if there is
a captive portal. Apple devices

302
00:27:09,583 --> 00:27:15,000
and more recently Android
devices try and get trixie. So
Google will make a request to

303
00:27:15,000 --> 00:27:21,000
something called generate 204
and expect a HTTP 204 response
back. So to make it think it's

304
00:27:21,000 --> 00:27:24,542
on line, you have to try and
respond to these different
things. Apple gets particually

305
00:27:24,542 --> 00:27:30,500
tricky, they make a random
request to a random URL on one
of two hundred different hosts

306
00:27:30,500 --> 00:27:35,417
which chooses randomly with two
different user agents just to
check that it's not being locked

307
00:27:35,417 --> 00:27:40,083
based on user agents. So we
built a bunch of stuff that
deals with all of this, Apache

308
00:27:40,083 --> 00:27:44,417
Vhost it's built into the Manna
toolkit that'll help you deal
with it. And the reason it's

309
00:27:44,417 --> 00:27:48,292
interesting is because of stuff
I'm going to talk about just
now, where you can push

310
00:27:48,292 --> 00:27:52,542
malicious certificates to
devices to make your man in the
middle work much better. There's

311
00:27:52,542 --> 00:27:56,875
an option with this stuff, in
the toolkit to have that happen
as it connects to the network.

312
00:27:59,250 --> 00:28:03,208
So one of the ways we can get
creds, one of the easy ways is
to have a malicious captive

313
00:28:03,208 --> 00:28:08,375
portal and we'll show you the
demo and it's a bit lame, it
says log into your Google creds,

314
00:28:08,375 --> 00:28:12,667
and hopefully somebody will do
that, but all of you guys would
be far too smart for that I'm

315
00:28:12,667 --> 00:28:17,500
sure. But it also gives us the
ability in the upstream mode to
start getting some credentials

316
00:28:17,500 --> 00:28:22,417
from people and it gives us a
place that we can push out our
malicious certificates which

317
00:28:22,417 --> 00:28:29,167
I'll show in a bit. So if you're
going to be man in the middling
stuff on these devices, it's

318
00:28:29,167 --> 00:28:33,208
really useful if there's a
certificate in their root store
that you have the private key

319
00:28:33,208 --> 00:28:38,542
for. But we're not Law
Enforcement or the Government of
Tunisia, so we don't get to do

320
00:28:38,542 --> 00:28:43,333
that to our population. And we
have to try and convince people
to put those certificates on

321
00:28:43,333 --> 00:28:49,750
there. And that's supposedly
quite difficult, right?
Actually, it's ridiculous easy.

322
00:28:49,750 --> 00:28:55,500
And I think people should maybe
taken to task for how easy it
is. If you send an Android or

323
00:28:55,500 --> 00:29:00,875
IOS device a .cer file. C-E-R.
It doesn't even have to have the
right mime type. Then they will

324
00:29:00,875 --> 00:29:05,958
helpfully offer to add that to
their root CA store. Like over
HTTP. So if they are doing their

325
00:29:05,958 --> 00:29:10,625
captive portal network request
and they receive a dot server
instead of an HTML file, they'll

326
00:29:10,625 --> 00:29:15,833
be like, hey, you're sending me
a certificate. Why don't I add
that to my root CA store? You

327
00:29:15,833 --> 00:29:20,667
need to type in your password
granted, so there is an element
of them warning you. But it just

328
00:29:20,667 --> 00:29:24,417
feels like that should be a
harder thing to do. Like
somebody in corporate IT should

329
00:29:24,417 --> 00:29:28,917
have to go and do that, or you
need to like work for it, not
you can just send it. And in

330
00:29:28,917 --> 00:29:34,625
Apple's case you can even push
malicious iOS configs over there
in the exact same way. Once

331
00:29:34,625 --> 00:29:38,667
again you have to type in their
four digit password. But some
users are going to fall for that

332
00:29:38,667 --> 00:29:44,125
and given that it gives us a
root CA on their device it's
totally worth it. The next thing

333
00:29:44,125 --> 00:29:51,917
is HSTS. HSTS stands for HTTP
strict transport security. Three
acronyms I can remember. Four,

334
00:29:51,917 --> 00:29:58,625
it blows my RAM. So HSTS is
something to defeat tools like
SSLStrip. And what SSLStrip

335
00:29:58,625 --> 00:30:03,000
relies on is that if you type in
something like Google.com, you
didn't type in

336
00:30:03,000 --> 00:30:08,958
HTTPS://Google.com because you
are my mother. She is a very
smart lady, but she's not going

337
00:30:08,958 --> 00:30:13,375
to type that stuff in. So you're
going to hit the page on HTTP at
which point you'll get a

338
00:30:13,375 --> 00:30:19,917
redirect to HTTPS. So SSLStrip,
stuff -- previously, it will
just prevent that redirect and

339
00:30:19,917 --> 00:30:25,917
serve things over HTTP and
rewrite links to HTTP. With
HSTS, a site can configure that

340
00:30:28,417 --> 00:30:33,667
will basically send a directive
to your browser that will say,
always access me via SSL. So

341
00:30:33,667 --> 00:30:37,750
even if you type in
accounts.Google.com, or
HTTP://accounts.Google.com, your

342
00:30:37,750 --> 00:30:43,750
browser will still go to
accounts of Google over SSL
without ever hitting -- playing

343
00:30:47,958 --> 00:30:52,792
clear text HTTP. So things like
SSLStrip don't get an
opportunity to work there and it

344
00:30:52,792 --> 00:30:57,625
gets very difficult to man in
the middle. But there was this
guy, Leonardo MVE who presented

345
00:30:57,625 --> 00:31:02,542
at Black Hat Asia this year, who
had this awesome idea for
getting around HSTS. And it

346
00:31:02,542 --> 00:31:06,667
works really well, so we
implemented it.?And it's one of
the things we are releasing in

347
00:31:06,667 --> 00:31:11,333
the Manna toolkit. But, it's his
work, all credit goes to him. We
just made some changes to make

348
00:31:11,333 --> 00:31:17,083
it work slightly better. >> So,
I'm going show you some demos of
how those things fit together.

349
00:31:21,125 --> 00:31:28,083
So it's the same set up as up to
now, we have the tablet on the
right and we have chrome open

350
00:31:28,083 --> 00:31:33,417
and we're running in no upstream
mode. So if you try to go to a
page that we haven't faked, it's

351
00:31:33,417 --> 00:31:39,750
going to take you to our captive
portal. And we're going to go to
foo.com. And it takes us to our

352
00:31:39,750 --> 00:31:45,125
fancy captive portal and you'll
notice it asks you to log in and
it's got a drop down for

353
00:31:45,125 --> 00:31:48,917
different services like Google
or Facebook and the hopes that
somebody is going to be a dork

354
00:31:48,917 --> 00:31:56,542
and just type their details for
one of those things in. Creds
from the sky. Ok. So, we're

355
00:31:56,542 --> 00:32:01,042
going to type some creds in
there and we've created a bunch
of accounts for the purpose of

356
00:32:01,042 --> 00:32:07,208
these demos. Somebody types it
in and it will send it as a get
request over plain HTTP. We can

357
00:32:07,208 --> 00:32:11,458
just pull that from our Apache
logs which is where we're
storing all of that. If we look

358
00:32:11,458 --> 00:32:19,083
in our Apache logs, there it is
his username and his password on
the right hand side. So that's

359
00:32:19,083 --> 00:32:23,917
really straightforward. But now
if we wanted to actually get his
Google creds when he went to

360
00:32:23,917 --> 00:32:29,625
Google, what we can do is
implement this HSTS bypass. So
you will notice we went to

361
00:32:29,625 --> 00:32:33,167
Google.com, but it's redirected
to quadw.Google.com, now
quadw.Google.com it's not a real

362
00:32:33,167 --> 00:32:41,042
domain, and because it's not a
real domain there's no HSTS
policy for it saved in your

363
00:32:41,042 --> 00:32:47,417
Browser. So this requires two
things. One is it requires a DNS
proxy which Leonardo wrote that

364
00:32:47,417 --> 00:32:53,500
will do this exchange. So you're
trying to go www.Google.com,
actually go to four w's but to

365
00:32:53,500 --> 00:32:57,833
return the proper result and the
modified version of Moxie's
SSLStrip that once again

366
00:32:57,833 --> 00:33:04,208
Leonardo wrote and that will
serve the right content, strip
out HTTPL, HTTPLL. In this

367
00:33:04,208 --> 00:33:10,125
instance, we're not actually
using that because this is in
upstream mode we can control the

368
00:33:10,125 --> 00:33:15,125
full interaction so we can
create a VHost for quad
w.Google.com and later on we'll

369
00:33:15,125 --> 00:33:19,458
show you it running in nat with
that stuff happening live. So
now we have rewritten the link

370
00:33:19,458 --> 00:33:22,458
so that if you click sign in on
the right, which would normally
redirect you to

371
00:33:22,458 --> 00:33:27,500
accounts.Google.com, it once
again keeps us on the
quadw.Google.com domain, and

372
00:33:27,500 --> 00:33:33,125
with the live nat stuff it will
redirect you to
accounts.Google.com.x And now we

373
00:33:33,125 --> 00:33:38,333
type in the same credentials,
we've edited the get request,
it's in clear text and it's

374
00:33:38,333 --> 00:33:45,708
going to show up in our Apache
log just the same as the other
one. But then the last thing is

375
00:33:45,708 --> 00:33:52,750
this malicious certificate side
loading. There is the username
and password showing up in the

376
00:33:52,750 --> 00:33:57,167
get request. Ok so that's the
second way we can get -- the
third way we can get creds from

377
00:33:57,167 --> 00:34:02,750
the sky easily. So lastly we're
now going to try the certificate
side loading. We're going to go

378
00:34:02,750 --> 00:34:07,958
back to foo.com, a site that
doesn't exist with our portal.
And you will notice it's got

379
00:34:07,958 --> 00:34:13,583
this helpful let us auto
configure the network for you.
Ten minutes, thanks. If you

380
00:34:13,583 --> 00:34:18,208
click on that, it pushes that
cer file to you and chrome
helpfully pops up a prompt

381
00:34:18,208 --> 00:34:22,292
saying, what do you want to call
this new root CA with a healthy
add for you? You can type in

382
00:34:22,292 --> 00:34:28,500
anything and you click ok and
you have a root CA sitting on
your device. Like, it shouldn't

383
00:34:28,500 --> 00:34:34,125
be that easy. So if the user
makes the mistake of believing
us, clicking on that and

384
00:34:34,125 --> 00:34:37,542
clicking okay. And then it kind
of comes down to how good your
social engineering is I guess

385
00:34:37,542 --> 00:34:43,167
then. What it does, to their
credit due, in the top left hand
corner you will see a warning

386
00:34:43,167 --> 00:34:48,875
pops up which says, warning this
network might be monitored by a
third party because our root CA

387
00:34:48,875 --> 00:34:54,875
is not signed. So those are
three ways in which we can
improve the state of man in the

388
00:34:57,292 --> 00:35:02,792
middling after we have gotten
things connecting to our device.
>> Great, so those that were

389
00:35:02,792 --> 00:35:08,917
Glenn Wilkinson's talk yesterday
about aerial surveillance, etc,
etc. You would heard a reference

390
00:35:08,917 --> 00:35:14,750
to FireLamb, but in any case,
FireSheep no longer works, etc,
etc, so Glenn quite a while ago

391
00:35:14,750 --> 00:35:21,708
wrote a tool called FireLamb,
which is basically a Python
script. That sort of can capture

392
00:35:21,708 --> 00:35:27,583
cookie information, that parses
out cookies made by requests
made from specific machines and

393
00:35:27,583 --> 00:35:33,583
literally creates new Firefox
profiles with the cookies stores
for every device that's actually

394
00:35:37,125 --> 00:35:42,833
gone through or all the traffic
that's been sniffed or loaded
from a packet capture file. We

395
00:35:42,833 --> 00:35:47,833
used a modified one in terms of
it, in terms of Mana because
obviously a large chunk of our

396
00:35:47,833 --> 00:35:52,792
information is actually still
traversing the network
encrypted. All be it through

397
00:35:52,792 --> 00:35:58,458
SSLSplit etc, etc. So obviously
FireLamb isn't going to work, so
we have quite a lot of

398
00:35:58,458 --> 00:36:02,833
modifications to actually parse
-- not a lot of modifications,
but just to parse the cookie

399
00:36:02,833 --> 00:36:09,875
information out of the SSLSplit
logs. And this basically gives
us -- because now, obviously, we

400
00:36:09,875 --> 00:36:14,000
have spoken about credentials,
we can get that using all of
these specifics thing. But in

401
00:36:14,000 --> 00:36:19,583
terms of that session IDs and
cookies, etc, etc, are also some
form of access token and they

402
00:36:19,583 --> 00:36:26,292
are obviously very important. So
we've implemented FireLamb
inside the Mana toolkit as well

403
00:36:26,292 --> 00:36:31,500
and let's give you a demo of
that. So, it's quite a long
demo, so I'm probably going to

404
00:36:31,500 --> 00:36:39,250
skip a head a little bit with
this one, at some places. But in
any case, if we go through here,

405
00:36:39,250 --> 00:36:43,958
this one has got a bad
certificate loaded, this is all
stripped, we are man in the

406
00:36:43,958 --> 00:36:47,958
middling all over the place. So
first thing we're going to do is
we're going to go to

407
00:36:47,958 --> 00:36:54,625
accounts.com, this is the real
Google.com. Accounts.Google.com.
We're just MITMing it at this

408
00:36:54,625 --> 00:36:59,833
specific point. And we signed on
and we can see that it says
Andrew Hacker, Hacker that's the

409
00:36:59,833 --> 00:37:05,375
profile page etc, etc. And
that's not enough, so we'll skip
forward and we'll sign on to

410
00:37:05,375 --> 00:37:11,375
Facebook as well. A Hacker 1337.
What's nice to note over here
you will see we've actually --

411
00:37:13,833 --> 00:37:20,125
Facebook also implements HSTS so
we've got the same trick
implemented and we've actuall

412
00:37:20,125 --> 00:37:27,667
signing on to quadw.Facebook.com
as A Hacker, which is awesome
and then we can sign on using a

413
00:37:27,667 --> 00:37:33,667
password. And I'm going to skip
ahead here a bit. I believe he
creates a post to -- >> His

414
00:37:38,083 --> 00:37:45,292
mother. >> Hello mom what is you
maiden name? And then he sends a
mail etc, etc. All of this

415
00:37:45,292 --> 00:37:52,625
information is being captured at
some specific point. But the big
thing over here is if I sign on

416
00:37:52,625 --> 00:37:58,542
to my Charlie Linux which is
doing all of this work, in this
case I'm now going to be running

417
00:37:58,542 --> 00:38:03,500
FireLamb to actually have a look
at this. I'm going to hit space
here. You see what it's gone and

418
00:38:03,500 --> 00:38:09,333
done is it's created a bunch of
output directories. Now all of
those output directories -- what

419
00:38:09,333 --> 00:38:15,958
they implemented -- are actually
Firefox profiles. In my case I'm
interested in output directory

420
00:38:15,958 --> 00:38:22,750
number 6 and I can actually go
along and enter 6 at this point
and it's going to fire a Firefox

421
00:38:22,750 --> 00:38:28,375
using that actual profile, which
means I'll have access to all
those cookies, I'll have a link

422
00:38:28,375 --> 00:38:33,875
to a whole bunch of pages he's
actually recently visited. So
let's pick on

423
00:38:33,875 --> 00:38:37,583
accounts.google.com, we are
using the same cookie he was
using a couple of minutes ago,

424
00:38:37,583 --> 00:38:41,625
so we now actually have signed
on to it -- well signed on,
we've been impersonating him on

425
00:38:41,625 --> 00:38:47,625
accounts.Google.com as Andrew
Hacker. [Applause] >> And now we
can set them and go back a bit

426
00:38:51,417 --> 00:38:55,792
and we'll go on to, in this
case, it's strange, the host
name is actually

427
00:38:55,792 --> 00:39:03,125
pixel.Facebook.com, and not trip
W. But if we click on that, we
get the same effect. >> Any

428
00:39:03,125 --> 00:39:09,917
moment now. >> Any moment. There
we go. So we have actually
authenticated, well impersonated

429
00:39:09,917 --> 00:39:15,292
him on Facebook at this point.
Now we made a couple of changes
to FireLamb once again, in the

430
00:39:15,292 --> 00:39:19,792
meantime we are pulling out a
whole bunch of creds, which
obviously aren't cookies, etc,

431
00:39:19,792 --> 00:39:26,417
etc. But they stored all over
the place in these SSLSplit
files. Which hasn't all been

432
00:39:26,417 --> 00:39:30,250
completed by the time we
recorded this demo. So I'm just
going to skip forward a little

433
00:39:30,250 --> 00:39:36,250
bit over here. The other example
is basic auth for -- and I know
that's not that one. Somewhere

434
00:39:41,958 --> 00:39:47,958
over here we've got basic auth
for mail. >> Uh- oh. I think
that is time. >> But in any

435
00:39:52,042 --> 00:39:58,042
case, even the clear text mail,
everything is stored in there
and that is all over there.

436
00:40:01,125 --> 00:40:08,792
[Laughter] >> So I'm sure many
of you have seen this before.
These two fine gentlemen and I

437
00:40:08,792 --> 00:40:14,792
use that term very loosely, have
never spoken at Def Con before.
So what does that mean they do?

438
00:40:18,375 --> 00:40:24,375
>> Shots! [Applause] >> You go,
that's right, they drink! Oh,
not yet. I have to get my shot

439
00:40:27,000 --> 00:40:32,042
of water. [Laughter] >> Thank
you so much for joining us and
congratulations for our first

440
00:40:32,042 --> 00:40:39,167
timers. And everyone give them a
huge round of applause.
[Applause] >> Hey, feel free to

441
00:40:39,167 --> 00:40:47,000
go about your business -- Hey,
they're not done yet! Feel free
to go about your business. >>

442
00:40:47,000 --> 00:40:54,250
Thank you. >> Okay, so somebody
was shouting, where can we get
it? We have not posted the code

443
00:40:54,250 --> 00:40:59,750
up there yet, we just need to
switch it over to the public
repositories. But they'll all be

444
00:40:59,750 --> 00:41:05,000
there. So you can see there are
a ton of tools that we messed
with, and so Mana is the main

445
00:41:05,000 --> 00:41:09,708
thing that ties it all together.
The others are tools that we
have written or contributed to

446
00:41:09,708 --> 00:41:15,042
and made changes. And in other
tools like SSLSplit we're using
that vanilla -- there just

447
00:41:15,042 --> 00:41:21,958
configurations in Mana. So the
net results of all of this stuff
is that we think, and we run it,

448
00:41:21,958 --> 00:41:25,833
it works, we get creds falling
from the sky. There are still
places in which people are

449
00:41:25,833 --> 00:41:30,708
protected, so this isn't
something that's necessarily
inherent. You can still run

450
00:41:30,708 --> 00:41:35,792
secure, but there's lots of ways
in which people can make
mistakes. Even though we're

451
00:41:35,792 --> 00:41:40,792
supposedly savvy to this, we
keep catching ourselves, we
forget to turn off our Wi-Fi, so

452
00:41:40,792 --> 00:41:45,667
you see your home network show
up, next thing you see some of
your creds coming and it can be

453
00:41:45,667 --> 00:41:52,083
a real pain. So if it starts
working against us, it works
even better against potential

454
00:41:52,083 --> 00:41:58,917
victims. So that's us. Thank you
very much for your time and
patience. That's where you can

455
00:41:58,917 --> 00:42:02,500
get the info. >> Thank you very
much. [Applause]

