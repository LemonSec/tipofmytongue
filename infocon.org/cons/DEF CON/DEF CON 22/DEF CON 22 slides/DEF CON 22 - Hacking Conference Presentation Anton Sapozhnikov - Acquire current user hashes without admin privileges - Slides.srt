1
00:00:00,458 --> 00:00:07,042
>> This is acquired current user
hashes without admin privileges.
So please join me in giving

2
00:00:07,042 --> 00:00:13,042
Anton Sapozhinikov a very warm
welcome. (Applause.) >> Hi guys.
So what this talk about I will

3
00:00:27,750 --> 00:00:33,750
discuss common penetration
testing case I expect to see
during any engagement during my

4
00:00:39,167 --> 00:00:45,167
work. We will discuss
traditional techniques to gather
credentials for the user and

5
00:00:47,625 --> 00:00:53,625
(indiscernible) SSPI. So, who is
me? A little bit of penetration
tester for seven years. CTF

6
00:00:58,417 --> 00:01:04,417
player; maybe you know my team
is MoreSmokedLeetChicken
(indiscernible 1:04 – 1:10) but

7
00:01:09,583 --> 00:01:15,583
anyway. Working for KPMG Russia
and project volema. So let's
start. Let's imagine a situation

8
00:01:27,458 --> 00:01:33,458
where we don't have ‑‑ we
exported some vulnerability in
the (indiscernible) sites of

9
00:01:36,292 --> 00:01:41,792
(indiscernible) for example
browser or I don't know, Flash
Player . Or maybe these are just

10
00:01:41,792 --> 00:01:47,792
downloaded and executed a
payload from internet. And there
is no access to internet from

11
00:01:51,208 --> 00:01:57,958
his computer. I mean, about
(indiscernible) for example or
there is some kind of

12
00:01:57,958 --> 00:02:03,958
restrictions on it. Of course we
have showed access to user
workstation because our payload

13
00:02:08,917 --> 00:02:14,917
was (indiscernible) framework or
some kind of rank. And these
rank fully (indiscernible)

14
00:02:17,042 --> 00:02:24,458
windows and any kind of rank
from XP to the latest 8.1. And
of course we don't have any

15
00:02:24,458 --> 00:02:30,458
privileges on that workstation.
I mean usually running
credentials of a user. So, the

16
00:02:34,458 --> 00:02:40,458
admin working have done. Admin
drop was done. So our goal was
to find an ‑‑ our goal is oh to

17
00:02:46,583 --> 00:02:52,583
find out a password for user and
try to use it that way after
that. Why do we need to try to

18
00:02:56,667 --> 00:03:02,667
get user password? First of all,
any shell is going to die from
day‑to‑day. We use buggy

19
00:03:06,042 --> 00:03:12,042
software. How many of you see
(indiscernible) unexpectedly
dying? So it's - - I see every

20
00:03:17,875 --> 00:03:23,875
day unfortunately. So
workstation of the user may be
powered off. For example,

21
00:03:26,792 --> 00:03:34,708
(indiscernible) for a weekend
maybe your dock was detected and
forensics people start to

22
00:03:34,708 --> 00:03:40,708
instigate a computer. So your
shell will die and you will have
no access to work station after

23
00:03:43,083 --> 00:03:49,083
that. But if you grab a password
for the user, you can use it to
connect I don't know, web mail,

24
00:03:52,417 --> 00:03:58,417
Citrix, VPN, exchange, any
incorporation, and incorporate
sources what is available from

25
00:04:04,833 --> 00:04:10,833
the internet. What's the
traditional ways to get a
password of a user? There are

26
00:04:13,458 --> 00:04:19,458
famous tools like Fgdump or
maybe you know Mimikatz or those
credentials editor. Or maybe

27
00:04:23,083 --> 00:04:30,958
just extract passwords from not
(indicernible) but hashes from
(indiscernible), registry or SAM

28
00:04:30,958 --> 00:04:36,958
file. But the disadvantages of
those ways is that you have to
have admin privileges for

29
00:04:40,250 --> 00:04:47,750
example, to grab registry or
some debug privileges to extract
hashes and passwords from a

30
00:04:47,750 --> 00:04:53,750
memory like Mimikatz or Fgdump.
If you remember during the
definition of our task, we don't

31
00:04:59,667 --> 00:05:05,667
have heightened privileges on
our workstation. So we can't use
those tools to perform our

32
00:05:09,708 --> 00:05:15,708
engagement. The second way could
be try to elevate privileges in
some way, for example, try to

33
00:05:18,708 --> 00:05:24,708
find some third party service.
We filed permissions and over
write some sensitive files. Or

34
00:05:27,958 --> 00:05:33,958
from DLL hijacking attacks or
something else. But, as I
mentioned before, we have fully

35
00:05:37,917 --> 00:05:43,792
portioned operating system. We
have fully function
(indiscernible). So still no way

36
00:05:43,792 --> 00:05:49,792
to escalate privileges and
exploit it and use our favorite
tools like Mimikatz. That's sad.

37
00:05:56,458 --> 00:06:04,042
There's some alternative ways.
For example, we could try to
popup user window could look

38
00:06:04,042 --> 00:06:11,125
like that. It's a standard
window from Windows XP. But as I
mentioned, there is some

39
00:06:11,125 --> 00:06:18,708
localisation. Just imagine what
you are exposing computer sort
of staying somewhere in Russia

40
00:06:18,708 --> 00:06:24,708
or China, you couldn't popup a
window with the correct word ‑‑
we would call it letters so when

41
00:06:27,125 --> 00:06:34,792
the native speaker will mention
it with the letters and he will
not trick and he will not enter

42
00:06:34,792 --> 00:06:40,792
his password in that window. So
you fail. And you wait, even if
you, if you use your real belief

43
00:06:47,125 --> 00:06:54,500
to your window, he will, for
example, enter some different
words that are not actually user

44
00:06:54,500 --> 00:07:02,083
names or passwords. During my
experience, during my
engagements, I see a lot of

45
00:07:02,083 --> 00:07:09,625
users were trying to put, for
example, some words like, I
don't know, get off or something

46
00:07:09,625 --> 00:07:16,250
like that. If they actually
realize it was some kind of
social engineering type. We try

47
00:07:16,250 --> 00:07:22,250
to have some fun with you, I
don't know. The second way could
be for example, use of script

48
00:07:31,708 --> 00:07:37,708
from Metasploit frame work. It's
actually called hash snarfing.
Also, this technique is

49
00:07:42,292 --> 00:07:48,292
implemented in a tool called
Incognito. How it works, it
approaches (indiscernible)

50
00:07:51,208 --> 00:07:59,042
credentials of a current user
trying to connect to SMB server
that's arriving somewhere in the

51
00:07:59,042 --> 00:08:05,042
network, the local network and
authenticate using credentials
for current user. And attacker

52
00:08:09,750 --> 00:08:15,750
should control its SMB server to
grab the credentials and somehow
extract the passwords from it.

53
00:08:19,083 --> 00:08:25,500
But as I mentioned in the
definition of the task, we do
not have access to the network.

54
00:08:25,500 --> 00:08:31,500
So we do not have any SMB
servers in the networks and we
can't execute such kind of

55
00:08:36,083 --> 00:08:42,083
attacks. The third way is try to
use Internet Explorer. The
default browser could use

56
00:08:52,000 --> 00:08:58,000
credentials from a current user
to authenticate you. And you
also could grab the hashes but

57
00:09:02,583 --> 00:09:09,833
there are some disadvantages.
For example, the host name you
should use. Browse with Internet

58
00:09:09,833 --> 00:09:15,542
Explorer should be like
everything in the trusted zone
of the domain and

59
00:09:15,542 --> 00:09:21,542
(indiscernible) should be
allocating the local net work.
Wherever the user is current

60
00:09:24,125 --> 00:09:30,542
located. That's option number
one. Or option number two is
whether it could change a proxy

61
00:09:30,542 --> 00:09:36,542
server of the browser, and for
example, the proxy server will
be actually ‑‑ your seller and

62
00:09:40,375 --> 00:09:46,375
(indiscernible) from the browser
will go through that proxy and
capture the hashes. But it's

63
00:09:49,833 --> 00:09:56,333
quite difficult to perform
because actually could
(indiscernible) control internet

64
00:09:56,333 --> 00:10:02,333
access for public user, and you
know if Internet is not working
for the user, he will call help

65
00:10:06,000 --> 00:10:12,000
desk. And your shell or your
Metaputuer or something,
(indiscernible) will be killed.

66
00:10:16,417 --> 00:10:29,250
You'll be, you're incident will
be investigated. Anyway, we're
‑‑ if you want to follow the way

67
00:10:29,250 --> 00:10:35,250
of using internet explorer, all
of you know, if you're executing
internet browser, it will use a

68
00:10:42,625 --> 00:10:48,625
lot of (indiscernible)s and
you'll be very, very slow and
user will notice it. So I think

69
00:10:51,667 --> 00:11:12,417
in terms of pace, it's not for
us. So what is security support
provider? Provider interface?

70
00:11:12,417 --> 00:11:20,500
It's some kind of layer. What
allows different applications
starting from browsers any kind

71
00:11:20,500 --> 00:11:28,000
of applications to talk to
security providers what
implemented by breaking systems.

72
00:11:28,000 --> 00:11:37,542
So what is it? It's several
packages. Simplest of then is
Microsoft Negotiate. It just

73
00:11:37,542 --> 00:11:44,625
picks the best security package
to handle the current
configuration of a computer and

74
00:11:44,625 --> 00:11:53,917
try to use the package was
actually configured by admins.
The second package is Microsoft

75
00:11:53,917 --> 00:12:02,250
NTLM and everybody thinks, no
what is it? Microsoft Kerberos
and Microsoft Digest SSP. Digest

76
00:12:02,250 --> 00:12:12,708
SSP currently, not widely used,
but in the past it was used to
authenticate users of a mail

77
00:12:12,708 --> 00:12:22,542
systems like three POP3 protocol
or for example HTTP Digest
Authentication. And a Secure

78
00:12:22,542 --> 00:12:33,208
Channel package, it's just
implementation of SSL or TLS by
a Microsoft. So how does any

79
00:12:33,208 --> 00:12:41,500
application talk to any server
using SSPI. For example, we have
a client application and the

80
00:12:41,500 --> 00:12:54,625
server application. Umm, and the
client would like to
authenticate on the server using

81
00:12:54,625 --> 00:13:05,625
password of the current user. It
will change (indiscernible) some
kind of messages and any way ‑‑

82
00:13:05,625 --> 00:13:14,917
client should generate the
message called ETLM. Negotiate
and send it to the server. The

83
00:13:14,917 --> 00:13:22,375
main advantage of it is SSPI
interface is at client
application shouldn't know

84
00:13:22,375 --> 00:13:29,375
anything about what NTLM
negotiate is. It'll just tell
SSPI. SSPI please can you write

85
00:13:29,375 --> 00:13:38,000
me that type of message and then
client just get it from a buffer
and send it to a center and log

86
00:13:38,000 --> 00:13:47,333
any authentication. On the
server side, happens the same.
Server will talk to SSPI

87
00:13:47,333 --> 00:13:55,958
interface and read the
following: Hay SSPI, here is a
message from a client. Go read

88
00:13:55,958 --> 00:14:02,292
it from buffer. Please prevent
buffer and can you write for
please, NTLM challenge and I

89
00:14:02,292 --> 00:14:11,583
will send it to the client.
After that, client will receive
NTLM challenge message, also

90
00:14:11,583 --> 00:14:24,083
will send it to SPPI interface.
And SPPI will prepare for client
the message what should be sent

91
00:14:24,083 --> 00:14:34,417
to the server. So SPPI allows us
to extract from implementation
of different mechanism currently

92
00:14:34,417 --> 00:14:41,833
running from breaking systems,
power (indiscernible). What
options are configured? Various

93
00:14:41,833 --> 00:14:48,125
domain controller or within an
(indiscernible). What's it
current. Where is location, how

94
00:14:48,125 --> 00:15:01,708
many of them? Just ask SPPI to
perform authentication and
that's solved. So there is three

95
00:15:01,708 --> 00:15:10,000
types of messages as I told
before. That message type one is
just contains features that

96
00:15:10,000 --> 00:15:19,625
supported by the client. Message
type two just contains features
that are supported by the server

97
00:15:19,625 --> 00:15:24,458
and it contains a challenge
generated by the server. The
challenge should be used to

98
00:15:24,458 --> 00:15:38,542
generate the message type three.
And the hashes that are
contained in the message type

99
00:15:38,542 --> 00:15:53,333
three calculated using the
change from a message type two.
So let's optimize approaches.

100
00:15:53,333 --> 00:15:57,792
I'll talk the SSPI, for example,
implement the server and the
client application in the one

101
00:15:57,792 --> 00:16:06,542
process. What does this mean? We
will send the message type one
message type two, and message

102
00:16:06,542 --> 00:16:20,958
type three from ourself to
client to server in one
application. That means that

103
00:16:20,958 --> 00:16:25,583
application actually know what
is the challenge, what is sent
through the server and what was

104
00:16:25,583 --> 00:16:30,833
captured by the client. So there
is not any traffic on the
network. And the application

105
00:16:30,833 --> 00:16:41,042
could grab all that information
what was passed and use it
somehow to calculate and extract

106
00:16:41,042 --> 00:16:50,208
later applications. So how it
looks like. Message type one,
it's just different bytes. Using

107
00:16:50,208 --> 00:16:58,667
that you could extract the
knowns, the challenge. The
hashes were calculated by the

108
00:16:58,667 --> 00:17:13,500
challenge and if you grab all
the things, you could just
format it for different crackers

109
00:17:13,500 --> 00:17:21,250
for example, John the Ripper,
and it will crack it for you.
And after a little bit of brute

110
00:17:21,250 --> 00:17:32,125
forcing, you will get a password
of a user. I did little bit of
benchmarking, as you can see. If

111
00:17:32,125 --> 00:17:43,750
you are using different types of
protocols for authentication,
for example, you could brute

112
00:17:43,750 --> 00:17:56,208
force as fast as one million
hashes per second. If you are
currently using NTLM version

113
00:17:56,208 --> 00:18:12,417
one, it's about two million
hashes and NTLM version two is
about 500 hashes per second.

114
00:18:12,417 --> 00:18:17,292
What is mean for us? It means
NTLM version one is disabled on
the computer we could try to use

115
00:18:17,292 --> 00:18:25,083
HTTP Digest to authenticate the
user. It allows us to brute
force at double speed. So what

116
00:18:25,083 --> 00:18:40,167
attack flow willl actually look
like? The processer will send
the user some kind of spear

117
00:18:40,167 --> 00:18:49,458
fishing user will be navigating,
clicking on the link or
downloading some payload or any

118
00:18:49,458 --> 00:19:03,417
exploited any how. Payload will
try to authenticate a user on
itself and send the

119
00:19:03,417 --> 00:19:07,792
authentication data and what was
extracted on the data flow to a
pentester. The pentester will

120
00:19:07,792 --> 00:19:14,792
force it and extract the user
name and password of the user.
Afterward, he will use it to

121
00:19:14,792 --> 00:19:22,792
connect to any incorporated
sources and exfiltrate the data
what means is the

122
00:19:22,792 --> 00:19:27,708
(indiscernible) was successful.
How again exfiltrate code load
can send the message to our

123
00:19:27,708 --> 00:19:47,292
common control center with
authentication data what was
just extracted. Where is, I

124
00:19:47,292 --> 00:19:52,875
think we used ‑‑ everybody will
know that some kind of
(indiscernible) shells, but

125
00:19:52,875 --> 00:20:02,708
(indiscernible). But it's off
the blogs. And umm, I would like
to present you with two

126
00:20:02,708 --> 00:20:13,083
(indiscernible) and
(indiscernible). The way number
one is using DNS for it. For

127
00:20:13,083 --> 00:20:21,167
example, we could try to use, to
ask that DNS server to resolve
for us some kind of name like

128
00:20:21,167 --> 00:20:28,292
some information goes here dot
to my dot evildomain dot com.
That means that our DNS servers

129
00:20:28,292 --> 00:20:36,625
are trying from that domain will
capture the data, what was
requested. But every time your

130
00:20:36,625 --> 00:20:52,375
payload will try to resolve a
domain, window's security alert,
for example, or any other

131
00:20:52,375 --> 00:20:55,333
personal firewall will alert it
and these may block your
payload. There are some work

132
00:20:55,333 --> 00:20:58,625
arounds for it. For example, a
workaround I suggest is using
file system. For example,

133
00:20:58,625 --> 00:21:14,583
windows acted like create file
set current directory with a way
like slash slash some

134
00:21:14,583 --> 00:21:27,583
information goes here in my
domain slash some directory will
force break in systems to result

135
00:21:27,583 --> 00:21:36,708
the DNS main for you. And it
will send a DNS request to your
server. And umm, personal

136
00:21:36,708 --> 00:21:48,417
firewall, actually will not
block it. And that means you
win. If you would like some to

137
00:21:48,417 --> 00:21:53,833
get some information back from
DNS server and not using any
network connections, you for

138
00:21:53,833 --> 00:22:02,042
example would like, use for
example IPConfig slash display
DNS. And you will see the result

139
00:22:02,042 --> 00:22:15,750
of DNS replies or test by DNS
client for you and you could
extract from that and actually

140
00:22:15,750 --> 00:22:39,292
know there's not any personal
firewalls that will get you
doing such things. It's slowly,

141
00:22:39,292 --> 00:22:45,792
but if you want just to send
your user name and password to
somewhere in the internet,

142
00:22:45,792 --> 00:22:51,042
that's quite enough. Second way
to send the user name and hashes
to what you just dropped to your

143
00:22:51,042 --> 00:23:05,500
common control center is using
Google. Many times during my
penetration testing works I see

144
00:23:05,500 --> 00:23:11,542
the company was using some kind
of white listing (indiscernible)
or proxy servers a we block any

145
00:23:11,542 --> 00:23:15,667
unknown web sites but Google
come in quite often. It's opened
for everybody even for

146
00:23:15,667 --> 00:23:25,167
(indiscernible) company. Even
for the most unprivileged users
so we could use to, we could try

147
00:23:25,167 --> 00:23:36,958
to use it to send data back to
home. The trick is using the IP
off Google.com and try to ask

148
00:23:36,958 --> 00:23:51,500
Google.com to send the data to a
application in China for Google.
So to perform that attack we

149
00:23:51,500 --> 00:24:01,167
should install our own
application engine and capture
the data is and send it to

150
00:24:01,167 --> 00:24:11,958
somewhere else where actually
could brute force it. And using
that way, any proxy server that

151
00:24:11,958 --> 00:24:18,667
is monitoring the internet of
users, could see what user just
searching something in internet

152
00:24:18,667 --> 00:24:35,542
and nothing else. So we will win
after that. How could we
mitigate of those kind of that

153
00:24:35,542 --> 00:24:42,125
attacks? First of all, we could
try to use two factor
authentication. Any kind of

154
00:24:42,125 --> 00:25:01,333
talking or hardware talking or
software talking strong
passwords as you mentioned. We

155
00:25:01,333 --> 00:25:05,000
should brute force caches that
we just drop to extract the
passwords. If the password was

156
00:25:05,000 --> 00:25:10,875
quite strong we will fail and
passwords wouldn't be extracted.
And the last suggestion is just

157
00:25:10,875 --> 00:25:17,250
to try to disable unused
packages. For example, as you
see the benchmarking slide.

158
00:25:17,250 --> 00:25:33,625
There is it, HTTP Digest package
allows you to double the speed
of brute force and passwords. So

159
00:25:33,625 --> 00:25:38,167
if you disable it, the attackers
only, will use only
(indiscernible) to attack your

160
00:25:38,167 --> 00:25:54,458
users. So what's next? In a
week, I will release Metasploit
post exploitation model. My

161
00:25:54,458 --> 00:26:02,917
implementation of attacks
(indiscernible) in the seat
currently on a github. But the

162
00:26:02,917 --> 00:26:16,833
Metasploit model is currently in
the work. It has some bugs, for
example, it doesn't support

163
00:26:16,833 --> 00:26:21,375
fully supported protocol and do
not extract hashes from every
operating system. I know at

164
00:26:21,375 --> 00:26:30,583
least, I know it (indiscernible)
hashes, but, it's difficult to
extract because (indiscernible)

165
00:26:30,583 --> 00:26:37,583
for that protocol is about one
hundred pages. So I don't have
time to read it full. And umm, I

166
00:26:37,583 --> 00:26:45,167
don't know something else.
Something else to improve. So
that's all. I am ready to think

167
00:26:45,167 --> 00:00:00,000
maybe answer questions.
(Applause.) 

