1
00:00:52,292 --> 00:00:57,750
This is lance, a first time
speaker. hes doing an intro to
backdooring operating system

2
00:00:57,750 --> 00:01:03,750
[ Applause ] >> Thank you, my
name is lance. I'm DC801 we run
a hackers space in Salt Lake

3
00:01:11,750 --> 00:01:17,750
City. I wrote this presentation,
kind of training material for
new members of our hacker space

4
00:01:19,792 --> 00:01:25,708
and kind of to provide a basic
introduction to do something
kind of interesting with

5
00:01:25,708 --> 00:01:31,708
computer security and just kind
of seeing, you know, what you
can do with just basic tools.

6
00:01:34,083 --> 00:01:39,125
Not using anything complicated
like ‑‑ Metasploit, or you know,
any complicated coding. Or

7
00:01:39,125 --> 00:01:44,708
anything like this. So this is
super introductory, I hope that
you enjoy it. I like to give

8
00:01:44,708 --> 00:01:50,708
special thanks to Netedmac,
metacortex, grifter, D3c4f and
eveyone at DC801 here, and every

9
00:01:56,875 --> 00:02:00,917
one at this for helping me out
with this presentation. You guys
have been great. Just a little

10
00:02:00,917 --> 00:02:06,833
bit disclaimer, I'm not
responsible for anything dumb
that you do with this

11
00:02:06,833 --> 00:02:12,375
information. So ‑‑ if you do
something dumb, I learned this
is from Nemus, here is his phone

12
00:02:12,375 --> 00:02:18,375
number. No. I'm not responsible.
So what this presentation does
not cover, I'm not going to tell

13
00:02:21,375 --> 00:02:27,125
you how to hide your backdoor
from skilled forensic
investigators. Most of the stuff

14
00:02:27,125 --> 00:02:33,417
you see here will probably be
undetectable by regular users.
But anyone who knows what they

15
00:02:33,417 --> 00:02:39,417
are doing will see this stuff
immediately. So just be warned
that ‑‑ you can get in trouble

16
00:02:41,667 --> 00:02:49,083
and you're not hiding your
tracks very well. Then the ‑‑ I
thought it would be good to just

17
00:02:49,083 --> 00:02:54,708
kind of give you what I'm
assuming your background is. So
I'm assuming you have a

18
00:02:54,708 --> 00:03:00,708
familiarity with linux, and
networking and windows command
line, um, administration. So the

19
00:03:05,333 --> 00:03:11,917
goal of this talk is to take
advantage of a user who has left
their computer unlocked. Right?

20
00:03:11,917 --> 00:03:16,750
How many people here leave their
computer unlocked to go to the
bathroom. Every one raised your

21
00:03:16,750 --> 00:03:23,208
hand, you have done it. I do it,
too. Right? So guess what
happens. What happens when you

22
00:03:23,208 --> 00:03:25,250
do that and your coworker sees
it you get David Hasselhoff,
right? Sometimes you get this

23
00:03:25,250 --> 00:03:31,250
awesome picture of David
Hasselhoff, right? And a great
reminder of why you need to lock

24
00:03:34,500 --> 00:03:41,958
your computer, right? So I think
was thinking we can get the
David Hasselhoff in there by the

25
00:03:41,958 --> 00:03:47,167
time someone goes to the
bathroom and comes back. So what
else can we do, right? What

26
00:03:47,167 --> 00:03:52,500
other things can we do to the
person who left their computer
unlocked. Let's see how fast we

27
00:03:52,500 --> 00:03:57,833
can install a backdoor. Right?
We have five minutes we want to
get the backdoor installed,

28
00:03:57,833 --> 00:04:04,375
everything setup, and walk away,
let them set down and star
missing with them. So we're

29
00:04:04,375 --> 00:04:10,375
going to start using windows 7,
setting up a Netcat backdoor.
Netcat is really good, like the

30
00:04:12,917 --> 00:04:18,917
hello world of backdoors. Now,
for this what we're using, we're
using very basic tools we need

31
00:04:21,000 --> 00:04:27,000
a to set prebuilt. You have to
do a‑‑ setup of all of your
tools and everything beforehand

32
00:04:29,292 --> 00:04:34,208
so you are ready for when the
user walks away from their
computer. So you want to make

33
00:04:34,208 --> 00:04:39,500
sure that you have the files on
a USB drive or on the Internet
you can quickly download them

34
00:04:39,500 --> 00:04:45,875
and put them on your computer.
Another thing you want to look
for is portable applications.

35
00:04:45,875 --> 00:04:53,542
Portable applications are
applications that don't require,
DLLs, setup process, basically

36
00:04:53,542 --> 00:04:57,375
you put them on the computer and
you can run them. So this is
kind of my basic toolkit for

37
00:04:57,375 --> 00:05:03,375
windows 7. I'm using gViM,
windows used to have edit, an
awesome command line editor at

38
00:05:07,708 --> 00:05:13,583
16 bit. The new 64‑bit operating
system doesn't have it. I found
gVim, a portable binary, you

39
00:05:13,583 --> 00:05:19,583
connect to your netCat backdoor,
you can use gVim to edit files.
And Wget. Once you get on there

40
00:05:24,542 --> 00:05:30,000
you probably want more things
you need a way of downloading
that to the command line. This

41
00:05:30,000 --> 00:05:37,583
a great to I found that is
compiled for windows 64‑bit.
There are 32‑bit out there. And

42
00:05:37,583 --> 00:05:43,583
the next place to get NETCAT is
from the kali linux image. This
is that. So ‑‑ we want to set up

43
00:05:49,083 --> 00:05:56,583
Netcat. So we get Netcat why
we're going to grab it from and
set up a backdoor. Right? Here

44
00:05:56,583 --> 00:06:04,417
in this command we're running
Netcat with the listener on port
449 and execute the command line

45
00:06:04,417 --> 00:06:11,500
CMB. As soon as I connect to
that port through Netcat as
a client I'm going to get

46
00:06:11,500 --> 00:06:18,042
a command prompt. So before I
can connect to it, I have to
make the operating system allow

47
00:06:18,042 --> 00:06:25,083
me to connect to it. So I have
to put Netcat somewhere, right?
In the path, I have to do

48
00:06:25,083 --> 00:06:30,708
registry settings, and I have to
disable that firewall, or add
a rule to the firewall to allow

49
00:06:30,708 --> 00:06:38,500
me to get to that Netcat
instance and also, I'm assuming
that this point, the user log‑in

50
00:06:38,500 --> 00:06:45,292
has admin privileges. You need
that to modify the firewall.
This is an example I got exactly

51
00:06:45,292 --> 00:06:51,375
expanded from the offensive
security stuff. They have
a great tutorial of setting up

52
00:06:51,375 --> 00:06:58,167
a Netcat backdoor. I provided
a link here and slides on their
website, too. This is the basic

53
00:06:58,167 --> 00:07:04,333
windows command, if you're just
not familiar with them. I
thought I would put them in here

54
00:07:04,333 --> 00:07:09,875
just so you have something to
reference on what their
correlation to Linux commands

55
00:07:09,875 --> 00:07:17,750
are. The key here, mainly you're
going to add new directories and
items to the path. You're not

56
00:07:17,750 --> 00:07:24,625
constantly typing the full name
path in there for the Netcat
session. This is just kind of an

57
00:07:24,625 --> 00:07:32,042
example of what it looks like.
So now that we have the
firewalls disabled and Netcat

58
00:07:32,042 --> 00:07:37,750
running we now ‑‑ we have a
persistent, we want to find the
registration settings to allow

59
00:07:37,750 --> 00:07:43,000
Netcat to start, your computer
reboots, but we want to get to
it right now, we have the five

60
00:07:43,000 --> 00:07:49,000
minute window. Here is the VBS
scrypt, a visual basic scrypt ‑‑
scrypt that allows us to start

61
00:07:51,750 --> 00:07:54,500
Netcat and walkway. This puts
Netcat in the background, and
starts listening and don't wait

62
00:07:54,500 --> 00:07:57,333
for the use to restart the
computer. We connect to the
computer through Netcat here,

63
00:07:57,333 --> 00:07:59,875
you look at, this is probably ‑‑
it looks a little faded, I can't
see. Basically it is just

64
00:07:59,875 --> 00:08:05,875
Netcat, we do the mode, the IP
address and the port number. And
we get connected and we have

65
00:08:10,417 --> 00:08:16,417
theCMD command prompt and access
to the remote computers. This
works great. Local LANs we will

66
00:08:28,375 --> 00:08:35,250
show you how to get to the
firewall and connect that way.
In this point working in the

67
00:08:35,250 --> 00:08:42,250
same office or same place with
the target you can now connect
to that computer from your

68
00:08:42,250 --> 00:08:48,625
computer and start messing with
them. So if you're interested
you can take care just to

69
00:08:48,625 --> 00:08:54,625
verify ‑‑ did it disconnect? All
right. This is process explorer
if you're not familiar with it.

70
00:09:37,167 --> 00:09:42,083
Process explorer let's us look
at all of the processing on the
operating system. So you're

71
00:09:42,083 --> 00:09:47,500
going through this process and
look at how Netcat works and how
the processes works. You can use

72
00:09:47,500 --> 00:09:53,542
process explorer to see that
Netcat is running thin
background there, that is what

73
00:09:53,542 --> 00:09:59,542
is highlighted in the bottom.
You can download process
explorer and take a look at it.

74
00:10:04,792 --> 00:10:09,458
If you want to view connections
to it, once you are connected
the backdoor can, you can look

75
00:10:09,458 --> 00:10:16,958
at the Netcat has an executable
coming to from another IP
address. And a good tool for

76
00:10:16,958 --> 00:10:22,958
windows as the TCP view to view
that. Now, so now we have
connectivity to the box. So the

77
00:10:27,250 --> 00:10:33,250
next question is, okay. What can
I do with the connectivity and
the backdoor. What fun things

78
00:10:38,750 --> 00:10:43,083
can I do to the person has just
left their computer unlocked and
now they have come back? Right?

79
00:10:43,083 --> 00:10:47,250
So ‑‑ we, we, I have a list of
pranks here. The one cool thing
we can do, can have their

80
00:10:47,250 --> 00:10:54,417
keyboard time hello to them.
Right? Every 100 seconds their
keyboard is typing hello. They

81
00:10:54,417 --> 00:11:00,417
are working on code, and it was
a types hello, go on forever. We
can continuously cycle the cap

82
00:11:03,750 --> 00:11:09,750
lock button. Every one hundred
seconds cap lock on and off. Can
we can write a batch scrypt

83
00:11:13,042 --> 00:11:20,875
spread to spread all over the
place on their file system.
Start notepad continuously. It

84
00:11:20,875 --> 00:11:25,958
starts notepad up, closes it,
there it is again. Or you can
have it start, this is really

85
00:11:25,958 --> 00:11:31,958
cool, you can have it start the
website up, close it, there it
is again. Start it up, close it,

86
00:11:34,708 --> 00:11:40,000
there it is again. You can
make ‑‑ this is kind of cool,
their keyboard, this makes a

87
00:11:40,000 --> 00:11:45,750
disco on the keyboard, it cycles
the caps lock, scroll lock, it
repeats the lights on the

88
00:11:45,750 --> 00:11:53,167
keyboard. It is really annoying.
Because, I was testing these and
trying to disable this one and

89
00:11:53,167 --> 00:11:59,458
it kept change everything when I
was trying to turn it off. You
know, and this is one of my

90
00:11:59,458 --> 00:12:06,167
favorites. You can continuously
play the startup song, right?
The best part about it is your

91
00:12:06,167 --> 00:12:10,000
coworker is like why are you
restarting your computer, I'm
not. It just keeps doing that.

92
00:12:10,000 --> 00:12:16,000
You know, this is the classic,
popping the CD‑ROM drive in and
out, right? Something weird is

93
00:12:21,708 --> 00:12:26,542
going on when your CD‑ROM just
keeps going in and out in the
old days. You get control of

94
00:12:26,542 --> 00:12:34,500
your computer, what do you do,
Pop the CD‑ROM drive. So this is
what the, this is what is called

95
00:12:34,500 --> 00:12:41,292
a fork bomb. So basically what
this does is a piece of code or
instructions that continuously

96
00:12:41,292 --> 00:12:46,000
eat up resources of the
operating system. This is a fun
thing. You know, they are typing

97
00:12:46,000 --> 00:12:50,917
along doing their stuff. You can
start a fork bomb, and it will
stop and halt, they have to

98
00:12:50,917 --> 00:12:56,917
reboot. Sure. They are just my
control panel. [ Laughter ] [
Applause ] [ Laughter ] Now,

99
00:13:42,792 --> 00:13:50,417
just a drunk hazard. [ Laughter
] This is another cool little
thing. This is easy to get past

100
00:13:50,417 --> 00:13:57,167
if you know how to close a file,
you know, control, kill a task.
You don't know how to do this,

101
00:13:57,167 --> 00:14:02,542
this is super frustrating.
Because it makes, like you hit
the X, you minimize it, it just

102
00:14:02,542 --> 00:14:10,000
sits there in the desktop
completely unable to do
anything. This one is my

103
00:14:10,000 --> 00:14:16,333
favorite, so if you remoted into
their computer through Netcat
you can start talking to them

104
00:14:16,333 --> 00:14:21,958
with windows 7 because it has
a text to speak engine. So you
can start messing with them,

105
00:14:21,958 --> 00:14:27,667
start talking with them, saying
hello. Hi, what's going on. You
seem to be having trouble with

106
00:14:27,667 --> 00:14:33,667
your computer. So we had our
fun, we've done everything. You
know, and, so we might need, we

107
00:14:38,167 --> 00:14:45,667
might run into issues and might
need to reboot their computer,
because we feel like it, or

108
00:14:45,667 --> 00:14:51,625
happen after 30 seconds and
walkout of the room saying it
was not me, I'm not doing this,

109
00:14:51,625 --> 00:14:57,542
right? These are the shutdown
commands for windows and command
lines. This is another thing you

110
00:14:57,542 --> 00:15:03,708
can do to try to hide your code.
So if someone sees what you're
doing and you want to just kind

111
00:15:03,708 --> 00:15:07,458
of hide it so they don't know
what the scrypt is, and can't
use it again, right? Later in

112
00:15:07,458 --> 00:15:13,458
the office, you can use batch
EXE and other ones here, these
are sketchy backdoors that work

113
00:15:16,750 --> 00:15:23,542
really well. The VBS ones worked
pretty well. Tried to power
shell one, didn't have much luck

114
00:15:23,542 --> 00:15:30,917
with it. You can take your
scrypt and turn it into binary
code, at that point they have to

115
00:15:30,917 --> 00:15:37,208
live look at the binary and do
things with it. Makes it a
little bit more difficult to

116
00:15:37,208 --> 00:15:44,583
figure out how it works. Also
kind of useful to be able to
control the firewall on windows

117
00:15:44,583 --> 00:15:50,750
7. These are all of the commands
I thought were useful. You know,
you can turn off all of the

118
00:15:50,750 --> 00:15:56,083
traffic. You can do all kinds of
cool stuff with that. If you
write a rule, you can delete it.

119
00:15:56,083 --> 00:16:01,958
You can control the windows
firewall from the command line.
So we set our scrypts up and

120
00:16:01,958 --> 00:16:08,333
down a bunch of stuff, it is
realtime. A great tool, you can
use the "at" command to have

121
00:16:08,333 --> 00:16:13,333
stuff run later. You can setup
your prank, do a bunch of stuff.
Walkway from your terminal, get

122
00:16:13,333 --> 00:16:18,583
a glass of water and watch the
guy who is frustrated with
things that are happening to

123
00:16:18,583 --> 00:16:25,958
him. And this is a good command
later on if you want your
backdoor dial out, you can set

124
00:16:25,958 --> 00:16:32,667
it up with an at command and
have it run at a certain time,
or schedule it with a scheduler.

125
00:16:32,667 --> 00:16:38,000
That creates a process with the
operating system that they can
look at later. What is this

126
00:16:38,000 --> 00:16:44,375
program running every day at
3:00? But with at it is kind of
invisible. You have to look at

127
00:16:44,375 --> 00:16:51,917
the at command and see all of
the tasks set. Another good tool
is S delete. This goes through

128
00:16:51,917 --> 00:16:57,917
and wipes all of the code, or
basically what you tell it to it
does a deep delete, better than

129
00:17:00,000 --> 00:17:06,000
normal delete, it doesn't leave
as much fragmentation and
remnants of the file. So we have

130
00:17:08,583 --> 00:17:14,583
gone over windows. Let's go to
Linux so Linux admin. He typing
away and goes to the bathroom

131
00:17:17,792 --> 00:17:24,792
and leave the shell in. Has the
VPNN, the SSH, he is not going
to close the session. So ‑‑ what

132
00:17:24,792 --> 00:17:30,792
can we do to mess with the Linux
user or just the Linux consul
that is open? At this point

133
00:17:34,250 --> 00:17:40,250
we're going to need a Linux tool
kit, too. So another crucial to
is the autoSSH. In this case, I

134
00:17:44,542 --> 00:17:50,542
went out and compiled a new
Netcat. I had a lot ‑‑ a little
bit of trouble with it, shred

135
00:17:53,000 --> 00:17:59,000
and screen are useful tools. The
great thing about auto SSH it is
a persistent the backdoor. I

136
00:18:04,417 --> 00:18:08,708
took it from one machine to
another and it worked just fine
with that compiled version and

137
00:18:08,708 --> 00:18:14,708
just one file. So the new Netcat
doesn't have a persistent
listener, like the windows

138
00:18:17,375 --> 00:18:23,375
Netcat did. In this version I
had to do a while loop on the
Netcat listener. The reason I

139
00:18:25,917 --> 00:18:29,917
did this, is because the
listener would listen to one
inbound connection. So if you

140
00:18:29,917 --> 00:18:33,958
had a connection to it, it would
do everything. If you dropped
the connection it would stop the

141
00:18:33,958 --> 00:18:40,542
process and exit. So I set in
a do while loop so I could
continue to connect to it. Here

142
00:18:40,542 --> 00:18:46,542
we can see that Netcat listen on
port 445, anytime you want to
connect execute and then bash.

143
00:18:49,000 --> 00:18:55,000
Then again ‑‑ then again here is
the Netcat backdoor on Linux.
You can use Wget and copy it,

144
00:18:59,042 --> 00:19:04,625
copy it into the user bin so its
in path, setup the Ip first
tables. The critical thing you

145
00:19:04,625 --> 00:19:10,625
want to know about the listener,
we want to disconnect the
command line user from the

146
00:19:12,625 --> 00:19:16,500
process. So when they exit their
terminal and go and do something
else, and log into a different

147
00:19:16,500 --> 00:19:23,042
machine, we still get to that
process and that process is not
owned by that user. So I was

148
00:19:23,042 --> 00:19:29,042
trying to think of a good way to
hide the Netcat to start on
boot. I think the best place I

149
00:19:31,208 --> 00:19:35,583
could find was the D process.
There is a bunch of scrypts ‑‑
scrypts in there, the start up

150
00:19:35,583 --> 00:19:41,583
scrypts. I look at my RC files.
If you put it in there it is
more than likely to be

151
00:19:46,417 --> 00:19:52,417
discovered. Yet again, use
Netcat the version IP address,
port, and you connect to it.

152
00:19:55,458 --> 00:19:59,833
With the Linux version it is a
little different than the
windows version. You're not

153
00:19:59,833 --> 00:20:04,875
going to get the actual command
prompt that you're used to.
You're going to get a blank

154
00:20:04,875 --> 00:20:10,500
screen that will have a cursor
in it. You do have a connection
to the batch shell, if you type

155
00:20:10,500 --> 00:20:14,958
LS or something like that. You
will see the command output, but
not the standard Linux terminal.

156
00:20:14,958 --> 00:20:20,625
This is critical, because you
connect to it and think that
something is wrong with it

157
00:20:20,625 --> 00:20:25,875
because I'm not seeing the batch
prompt. In this version of
Netcat, when I was connected it,

158
00:20:25,875 --> 00:20:31,875
I did not see a batch prompt, so
something to look out for. So if
we want, so now that we have

159
00:20:34,625 --> 00:20:41,667
everything installed and setup,
we kind of what to verify it is
working. We have everything that

160
00:20:41,667 --> 00:20:48,875
we need. So I use net
stat‑LPTUN. That matches
processes to listening ports. So

161
00:20:48,875 --> 00:20:54,875
here I can see that Netcat is
listening on 445 and accepting
connections from any IP address.

162
00:20:57,875 --> 00:21:02,792
Or it is listening on all
available ‑‑ IP addresses. So
now we've got connectivity, and

163
00:21:02,792 --> 00:21:08,792
same thing with it windows box.
Now our Linux pranks, right,
this is the cool pro scrypt that

164
00:21:11,500 --> 00:21:18,708
I found. If they are using Linux
as their main desktop and they
browse, you can put this in

165
00:21:18,708 --> 00:21:25,583
line, basically it takes every
image that they brows to and
turns it up side down. Pretty

166
00:21:25,583 --> 00:21:31,833
awesome. We have a Linux fork
bomb. We can take the system to
a crawl. We can write to the

167
00:21:31,833 --> 00:21:37,833
user terminal. If the system is
local. This is annoying. You can
cat random data to the computer

168
00:21:43,042 --> 00:21:47,125
bell sound. Right? So they are
connected, everything is going
fine, and just a bunch of

169
00:21:47,125 --> 00:21:53,125
garbage and noise comes coming
out of their computer. Pretty
funny. Then, so this is a cool

170
00:21:55,542 --> 00:22:02,167
little prank. This turns
everything in the terminal to ‑‑
bork bork. It is all formatted

171
00:22:02,167 --> 00:22:08,167
the way it is supposed to do,
but everything is just bork,
bork, bork, bork, bork. So okay.

172
00:22:14,375 --> 00:22:20,375
This has been a classic prank at
my work. My boss did this to me
on my first day. So you send

173
00:22:22,500 --> 00:22:27,667
star wars to their terminal.
They are typing along and
configure the system. You log‑in

174
00:22:27,667 --> 00:22:33,667
and tell them towel blinking
lights .NL and find the process,
their PTS instance that they're

175
00:22:36,917 --> 00:22:43,417
connected to and they cannot do
anything with that terminal
except watch "Star Wars." It is

176
00:22:43,417 --> 00:22:47,917
really annoying. Because you
don't own the process either. It
is constantly sending stuff to

177
00:22:47,917 --> 00:22:54,375
your terminal. Pretty funny.
Another cool thing you can do,
you can said fortunes to the

178
00:22:54,375 --> 00:23:01,042
user terminal and use C matrix,
which is a matrix screen to
their Linux terminal. They are

179
00:23:01,042 --> 00:23:05,292
supposed to be able to type and
do stuff. But you can still see
the output. but its just clears

180
00:23:05,292 --> 00:23:11,292
and refreshes everything. It is
pretty funny. This is kind of
cool. You can play with the man

181
00:23:14,125 --> 00:23:17,500
bell, you know that annoying
bell that goes off all of the
time when you hit mistake or try

182
00:23:17,500 --> 00:23:23,167
to tab something that is not
there. Put that in a loop and
have the go off randomly. That

183
00:23:23,167 --> 00:23:29,167
is pretty bad. This, again,
going over nohup so ‑‑ it is
kind of what you want to do, if

184
00:23:32,792 --> 00:23:38,792
you forget he nohup, this is
easily, you start the command
and like, crap, I didn't know it

185
00:23:45,333 --> 00:23:53,042
is still used, the process is
still being ran by the user, you
can then do a control Z,

186
00:23:53,042 --> 00:23:59,375
background the process and the
percent disown one, is kind of
the equivalent of nohup, but

187
00:23:59,375 --> 00:24:05,375
nohup will work better. I stop
the process and it will run in
the background and my terminal

188
00:24:11,625 --> 00:24:17,625
session can die. These are PHP
compilers. If you write great
pranks in PHP you can compile

189
00:24:23,042 --> 00:24:29,042
it. Hide the the code from users
and the other stuff. Now,
Netcat. So at this point we

190
00:24:34,208 --> 00:24:42,083
built a backdoor into both
windows and Linux. We've got
ways to get into it, but this is

191
00:24:42,083 --> 00:24:47,042
kind of, it is kind of rough,
right? We can only connect to it
if we're on a local area

192
00:24:47,042 --> 00:24:52,792
network, it is not encrypted. It
is kind of dangerous to leave it
open to everyone. I don't want

193
00:24:52,792 --> 00:24:59,458
to open a firewall port on my
firewall and access into it
remotely. That would be bad. It

194
00:24:59,458 --> 00:25:06,750
is not encrypted. So what else
can we do with this? Get past
the firewall easily and get back

195
00:25:06,750 --> 00:25:12,750
to this Netcat? So what we're
going to do, we're going to hit
up a persistent SSH tunnel. So

196
00:25:14,875 --> 00:25:22,417
what we're going to do with the
SSH tunnel we're going to have
the go out ‑‑ to the target

197
00:25:22,417 --> 00:25:27,708
system and connect back to
a server that we have somewhere
on there, the virtual private

198
00:25:27,708 --> 00:25:33,708
server or whatever and then map
a port locally, just kind of
picture of how it works. It will

199
00:25:37,125 --> 00:25:43,292
map a port locally on that
machine to a port locally on
a remote machine. If they allow

200
00:25:43,292 --> 00:25:50,500
SSH out or a port out it will
maintain the session connection
outside to the firewall or past

201
00:25:50,500 --> 00:25:56,750
their firewall to your server
and then you can log into your
server and connect to that port

202
00:25:56,750 --> 00:26:02,000
on your server and it tunnels
through the SSH connection and
back to that user's ‑‑ the,

203
00:26:02,000 --> 00:26:08,000
the ‑‑ machine. This is reverse
SSH tunneling. Here we use SSH F
cap N dash R. The R is the

204
00:26:17,875 --> 00:26:25,375
remote port. And then we're
saying hey we want to loop back
on his machine 22 and then so

205
00:26:25,375 --> 00:26:30,542
what that is going to do, on my
remote Linux service, is my VPS
somewhere out in the internet it

206
00:26:30,542 --> 00:26:37,833
will put port 10,000 as
listening port and then come
back and map to SSH on this

207
00:26:37,833 --> 00:26:43,833
local machine here. Here is a
more detailed example. I don't
have to use 22. So I have my

208
00:26:46,417 --> 00:26:52,417
Netcat port listening. Right? So
I can just take this SSH
instance and map it to my Netcat

209
00:26:57,208 --> 00:27:03,833
backdoor. So at this point it is
now bypassing their firewall I
can connect to a Linux remote

210
00:27:03,833 --> 00:27:11,458
machine. If I'm at my friend's
house I can go home and mess
with them. Right? I go home and

211
00:27:11,458 --> 00:27:17,458
log into my Linux VPS. I connect
to the port, come back and have
access to the SSH instances.

212
00:27:20,083 --> 00:27:25,125
You're probably wondering about
passwords. They have to enter
the password and everything. If

213
00:27:25,125 --> 00:27:31,833
you generate SSH keys, you can
take the SSH key and put it on
your remote server and allow it

214
00:27:31,833 --> 00:27:39,083
to come, allow that remote
connection to just automatically
authenticate itself. So you can

215
00:27:39,083 --> 00:27:45,083
use SSH key gen and then do the
SSH copy I D‑back to your remote
server. So now we can set up

216
00:27:49,125 --> 00:27:56,042
like a job, a scheduled task and
have this ‑‑ SSH remote instance
run automatically while we're

217
00:27:56,042 --> 00:28:02,625
not there. So on Linux you can
use autoSSH to make it
persistent. After they

218
00:28:02,625 --> 00:28:05,125
disconnect, the Internet is kind
of buggy at times, it
disconnects and auto

219
00:28:05,125 --> 00:28:11,125
reauthenticate the connection
back to your server. That's
great in Linux. You can do the

220
00:28:22,792 --> 00:28:28,792
same thing in windows. There is
a command line utility called
plink, part of the putty library

221
00:28:31,000 --> 00:28:38,958
you can use to do remote reverse
shells back to Linux systems.
You can use this to set up an

222
00:28:38,958 --> 00:28:46,542
SSH to reverse shell to your
linux instances to your netcat
persistence intance. i was

223
00:28:46,542 --> 00:28:53,458
trying to find the equivalent of
auto-ssh for windows 7, My
encrypted tunnel came close. but

224
00:28:53,458 --> 00:28:59,458
it has a setup, and a gooey and
a system trace it is obvious it
is installed. You can make it

225
00:29:01,750 --> 00:29:07,750
portable, but go through a bunch
of stuff. That's on my list to
do, to expand my presentation.

226
00:29:13,375 --> 00:29:19,375
At that point we set up a
backdoor using basic tools. We
have not done binary

227
00:29:22,750 --> 00:29:28,750
manipulation, we just have
remote access to the system
through, just basic admin tools.

228
00:29:32,083 --> 00:29:38,083
Right? So now I'm going to talk
a little bit about Metasploit.
So it takes all of this, we had

229
00:29:41,292 --> 00:29:46,292
to do the prep work and get the
tools in place. It takes less of
that and makes it a little bit

230
00:29:46,292 --> 00:29:53,083
more easy to manage. So one of
the key to Metasploit you need
to understand vulnerabilities,

231
00:29:53,083 --> 00:29:58,333
exploits and payloads.
Vulnerabilities are places in
which you can take advantage of

232
00:29:58,333 --> 00:30:05,083
something. There is something
wrong with something, or
something not right. So in this

233
00:30:05,083 --> 00:30:10,000
case, the kind of venerability
they usually left their computer
unlocked. The exploit is what

234
00:30:10,000 --> 00:30:15,458
you do. The exploiting is you
installing stuff on their
computer because you have access

235
00:30:15,458 --> 00:30:21,458
to it. It payload in this case
would be Netcat, which is on the
system to gain access to it

236
00:30:24,292 --> 00:30:30,292
later. So using it we're going
to do the same thing, and set up
a reverse shell. So we startup

237
00:30:33,125 --> 00:30:39,583
the Metasploit consul, a great
way to get metasploit training
is through offensive.security-

238
00:30:39,583 --> 00:30:45,083
metasploit unleash,
unfortunately I don't have time
to develop over that. Basically

239
00:30:45,083 --> 00:30:51,083
just getting the MSF console and
then run the MS update and get
all of the updates and stuff. So

240
00:30:54,125 --> 00:30:59,417
now let's generate a binary
payload instead of using Netcat.
So basically what we're going to

241
00:30:59,417 --> 00:31:06,208
do is create a binary that we
can e‑mail and sent to somebody,
when they execute it, it will

242
00:31:06,208 --> 00:31:13,042
start a reverse shell that we
can connect to, like Netcat.
Here we're using MS payload with

243
00:31:13,042 --> 00:31:18,750
the windows reverse shell. So
that is the payload. We're
basically just going to use

244
00:31:18,750 --> 00:31:25,417
Metasploit payload library to
generate our binary. Here are
the commands to do that. The L

245
00:31:25,417 --> 00:31:31,917
command just shows all of the
options available here. In this
case, I need to set up a

246
00:31:31,917 --> 00:31:39,458
listening port and a listening
host. So the IP address it will
listen to, listen on, on our

247
00:31:39,458 --> 00:31:46,292
target machine and the port I
want to connect to. Here you can
use MS payload is pretty cool.

248
00:31:46,292 --> 00:31:52,292
You can use to it create raw
payloads and payloads in C. So
you can kind of see how it

249
00:31:54,583 --> 00:32:00,750
works. So here is the command
that we're going to run. MS
payload, with use a windows

250
00:32:00,750 --> 00:32:06,458
shell, reverse TCP. we set the
L-host we set the remote port .
So we created our David

251
00:32:06,458 --> 00:32:12,458
Hasselhoff EXE and e‑mail it to
our victim, have it available
other put it on their system. I

252
00:32:16,875 --> 00:32:22,875
have this great Hasselhoff
program you need to check out.
A cool command is file, file

253
00:32:25,375 --> 00:32:31,375
lets you verify what type of
file is on a Linux system. So I
run files to verify, yes this is

254
00:32:35,208 --> 00:32:41,875
a windows executable. So we're
going to hit this reverse shell
to connect, we're going to give

255
00:32:41,875 --> 00:32:46,750
the user, we're going to have
the come back and listen to our
instance, right? So at this

256
00:32:46,750 --> 00:32:52,250
point we need to set up
a listener on Metasploit to
listen to this instance. We are

257
00:32:52,250 --> 00:32:59,333
going to start the MSF console
and use the exploit multi
handler, and set the L host and

258
00:32:59,333 --> 00:33:04,875
had L port. At this point you're
ready to listen for the
connection, you send the binary

259
00:33:04,875 --> 00:33:12,458
to the user. They execute it.
Here, you is the PS example they
execute the binary and then here

260
00:33:12,458 --> 00:33:18,792
in metasploit, you sit here and
listen for it to come in, now
you have CMB command shell on

261
00:33:18,792 --> 00:33:26,375
their system. Pretty cool. This
is a great way. If you want to
get into this stuff, this kind

262
00:33:26,375 --> 00:33:33,792
of like the best way to get the
most out of your, your time and
energy. You can learn something

263
00:33:33,792 --> 00:33:39,792
cool really quickly and then
move on to more advance things.
So ‑‑ I want to thank everybody

264
00:33:43,708 --> 00:33:49,833
for coming to my talk. This is
our code library that I'm
building. It has all of the

265
00:33:49,833 --> 00:33:55,458
codes that I have in the
presentation, minus some stuff
that I need to put in there. Any

266
00:33:55,458 --> 00:33:59,750
time you have a great prank or
something you want to, you know,
share with the world, we're

267
00:33:59,750 --> 00:34:05,500
going to keep track with a bunch
of Linux and windows pranks to
send out to people. If you build

268
00:34:05,500 --> 00:34:12,083
something or expand, I would
love to have you contribute. And
then I also have intros to

269
00:34:12,083 --> 00:34:19,042
backdoors.com, which has the
slide presentation, code
library, and we'll ‑‑ do some

270
00:34:19,042 --> 00:34:25,708
other cool stuff with that. This
is another cool thing you can
get to ‑‑ these are one line

271
00:34:25,708 --> 00:34:29,833
reverse shells. If you setup
your metasploit listener, you
can run the command and have

272
00:34:29,833 --> 00:34:36,583
a connection come back to your
listener. If you are interested
in VPSs and remote systems there

273
00:34:36,583 --> 00:34:43,583
are great places you can look
for VPS. The problem is, there
is no one good VPS provider.

274
00:34:43,583 --> 00:34:49,250
They are good for three or four
months and then Peter out and
then move onto another one. So I

275
00:34:49,250 --> 00:34:57,167
kind of keep up on which ones
are new, and what they allow me
to do and what they don't. Some

276
00:34:57,167 --> 00:35:03,167
interesting projects with the
raspberry pie that is based on
the remote SSH reserve tunnel

277
00:35:14,375 --> 00:35:17,250
and using python to create
a backdoor. All right. Any
questions? Thank you. [ Applause

278
00:35:17,250 --> 00:35:19,708
] "This text is being provided
in a rough draft format. 
Communication Access Realtime

279
00:35:19,708 --> 00:35:21,833
Translation (CART) is provided
in order to facilitate
communication accessibility and

280
00:35:21,833 --> 00:35:23,833
may not be a totally verbatim
record of the proceedings." 

