1
00:00:00,167 --> 00:00:04,625
All right after a morning and
early afternoon of a lot of
stuff about policy and things

2
00:00:04,625 --> 00:00:10,458
it's time for a technical talk
in party track and we'll hear
about a new tool and new service

3
00:00:10,458 --> 00:00:17,375
that will be exciting and once
again we have a first-time
attendee and a first-time

4
00:00:17,375 --> 00:00:23,375
speaker. So and Elijah is
totally calm, not worried about
it at all! What's that? Eijah, I

5
00:00:27,083 --> 00:00:33,083
apologize, he's thrilled to talk
to you guys about his tool that
he's been working on for a long

6
00:00:38,667 --> 00:00:44,667
time, demonsaw, let's give him a
big party track welcome!
(Applause) 	>> Thank you.

7
00:00:46,708 --> 00:00:51,500
Recently, our right to share
files on line has been under
assault by governments,

8
00:00:51,500 --> 00:00:57,292
corporations, and others who
fear openness and personal
privacy rights. People have been

9
00:00:57,292 --> 00:01:04,292
persecuted, fined and even
imprisoned simply for sharing
data electronically. As private

10
00:01:04,292 --> 00:01:09,375
conversations transition from
the home to the web, we're
losing our fundamental rights to

11
00:01:09,375 --> 00:01:16,042
privacy and personal beliefs.
	Imagine for a moment a secure
file sharing application that

12
00:01:16,042 --> 00:01:23,750
lets you share whatever you want
with anybody you wanted across
all of your devices without

13
00:01:23,750 --> 00:01:29,542
fear. Governments, corporations,
and others would not be able to
know what you are doing, what

14
00:01:29,542 --> 00:01:34,500
you are sharing and know who you
are. They wouldn't be able to
track your IP address, and not

15
00:01:34,500 --> 00:01:41,167
being a centralized base network
they could not take you down.
	Now, imagine a million file

16
00:01:41,167 --> 00:01:48,458
sharing networks just like that.
This presentation is a free data
manifesto, historical analysis

17
00:01:48,458 --> 00:01:53,958
and recipe for creating a new
type of file sharing
application. My name is Eijah

18
00:01:53,958 --> 00:02:01,792
and I believe in the right to
share. 	Glenn Greenwald said one
can easily remain free of even

19
00:02:01,792 --> 00:02:07,417
the most intense political
oppression simply by placing
one's faith and trust in

20
00:02:07,417 --> 00:02:14,375
institutions of authority. But I
think the Bible says it even
better in Psalms 56:3, when I am

21
00:02:14,375 --> 00:02:20,375
afraid I put my trust in you.
The modern Internet -- (Pause)
The modern Internet is a very

22
00:02:22,833 --> 00:02:28,625
different place today than it
was in the past. We can define
the modern Internet by four

23
00:02:28,625 --> 00:02:34,875
different states. The state of
trust, a state of convenience, a
state of control, and a state of

24
00:02:34,875 --> 00:02:41,958
change. 	Over the last 15 years,
the Internet has shifted from a
web of isolated content to a

25
00:02:41,958 --> 00:02:47,542
cloud of in the operable
networks and trusted third
parties. A primary reason for

26
00:02:47,542 --> 00:02:54,875
this state of trust is
technological innovation.
	>> Speaking of change...

27
00:02:54,875 --> 00:03:00,875
(Laughter) 	>> Shot time! 	>> So
companies have begun to support
open source technologies, web

28
00:03:05,042 --> 00:03:09,250
and data standards, shared
protocols and in the
operability. This has been going

29
00:03:09,250 --> 00:03:16,625
on for the last 15 + years. But
it's more prevalent now than it
ever was before.

30
00:03:16,625 --> 00:03:23,125
	Interoperability being the
mutual coexisting of disparate
domains, single sign-on, shared

31
00:03:23,125 --> 00:03:29,958
authentication protocols and
open ID which is what we use
with Facebook accounts. Now I'm

32
00:03:29,958 --> 00:03:35,958
ready. 	>> All right. So you all
know the drill. By the way, I
wasn't gonna interrupt a Bible

33
00:03:39,875 --> 00:03:46,542
verse walking in here. I had to
pause for a second, I was like,
oh, shit! It is very hard to get

34
00:03:46,542 --> 00:03:49,750
selected at DEF CON. So
congratulations, welcome to the
team! [Cheers and applause]

35
00:03:49,750 --> 00:03:55,750
Thank you, sir. So the benefits
of trust are cost-effective
applications, companies can roll

36
00:04:04,625 --> 00:04:11,750
out apps fast they are than ever
before. Faster to get apps on
the market, easier to share

37
00:04:11,750 --> 00:04:17,083
content across domains,
different companies are working
together that never did 10 or 15

38
00:04:17,083 --> 00:04:23,333
years before. And there is a
level of convenience to us as
users of this content. 	Now,

39
00:04:23,333 --> 00:04:27,917
trust is made possible a level
of convenience that we have
grown accustomed to and can no

40
00:04:27,917 --> 00:04:32,958
longer live without. We have
improved application usability
like signing in with our Google

41
00:04:32,958 --> 00:04:38,250
and Facebook accounts
everywhere. There is everything
at our fingertips, all content,

42
00:04:38,250 --> 00:04:42,417
our bank accounts, social
networks, everything we can get
to from laptops or home

43
00:04:42,417 --> 00:04:49,875
computers, phones, tablets. And
everything is simple now. 	There
is obviously concerns with this.

44
00:04:49,875 --> 00:04:56,667
Such as privacy. Our anonymity,
potential abuse from these
companies and an overall loss of

45
00:04:56,667 --> 00:05:02,667
control. For a model based on
trust, the cost of convenience
is control. When our personal

46
00:05:04,917 --> 00:05:10,708
data is in the hands of others,
we have lost control. 	At that
point, we are faced with some

47
00:05:10,708 --> 00:05:17,667
rather difficult questions. Who
owns our data? Are we simply a
source or are we greater than

48
00:05:17,667 --> 00:05:23,792
the sum? 	A fundamental flaw in
the model of trust is this loss
of control. And once we have

49
00:05:23,792 --> 00:05:29,792
given up control, it's gone
forever. My favorite examples of
a loss of control and never

50
00:05:33,833 --> 00:05:39,708
being able to get it back are I
have three of them. One is
release of the AACS processing

51
00:05:39,708 --> 00:05:46,000
and keys and continual release
of those. Number two is and I
still find this absolutely

52
00:05:46,000 --> 00:05:50,500
fabulous, the Tom Cruise
scientology videos, if you
haven't seen those, I highly

53
00:05:50,500 --> 00:05:57,167
advise them, seven minutes well
worth to watch those. 	And of
course WikiLeaks and the great

54
00:05:57,167 --> 00:06:03,417
work they are doing with we
leasing documents. Loss of
control brings concerns to us as

55
00:06:03,417 --> 00:06:10,292
private citizens. Data retention
and oversight. Do we trust the
companies to take care of our

56
00:06:10,292 --> 00:06:15,833
data? 	Legal compliance matters.
What corporations are giving our
data over to the government?

57
00:06:15,833 --> 00:06:20,625
What are governments doing with
that data? Security breaches and
what happens with data when

58
00:06:20,625 --> 00:06:26,625
companies cannot protect what is
ours. Overall transparency. Do
we have the right to know that

59
00:06:26,625 --> 00:06:30,750
what companies are doing with
our data behind the scenes?
	Finally, the bottom line,

60
00:06:30,750 --> 00:06:35,917
because everything a company
does is for its' own best
interest and is driven by

61
00:06:35,917 --> 00:06:43,583
financial means. 	The truth
about this modern internet is
that convenience does not

62
00:06:43,583 --> 00:06:49,958
require trust. We can achieve
the same level of convenience
that we get today, without

63
00:06:49,958 --> 00:06:56,542
giving up control and without
trusting governments and
companies. 	The power to change

64
00:06:56,542 --> 00:07:04,375
the world is in our hands.We're
experts in our fields. We're
passionate, envied and feared.

65
00:07:04,375 --> 00:07:09,833
We have the knowledge, tools and
experiences and most
importantly, we have the free

66
00:07:09,833 --> 00:07:15,833
time to code. 	The path forward
involves becoming advocates for
distrust, even Ronald Reagan,

67
00:07:19,125 --> 00:07:26,792
I've quoted the Bible now I'll
quote a Republican, even Ronald
Reagan said, trust but verify.

68
00:07:26,792 --> 00:07:30,875
We can break the mold of old and
stale thinking, create something
beautiful and secure and we can

69
00:07:30,875 --> 00:07:36,875
open up the Internet for what I
call digital self-expression.
	Stephen Hawking said, "The

70
00:07:43,583 --> 00:07:49,750
increase of disorder or entropy
is what distinguishes the past
from the future, giving a

71
00:07:49,750 --> 00:07:56,667
direction to time." And Aaron
Schwartz said, "Information is
power, but like all power there

72
00:07:56,667 --> 00:08:02,833
are those who want to keep it
for themselves." 	Reinventing
file sharing means that we need

73
00:08:02,833 --> 00:08:08,583
to understand the current file
sharing applications available
to us now. We also need to

74
00:08:08,583 --> 00:08:14,375
understand how secure or
insecure these applications are.
So let's look back in history

75
00:08:14,375 --> 00:08:20,500
and look at the existing
file-sharing applications to see
what type of network model they

76
00:08:20,500 --> 00:08:24,875
are based on. There are two
primary models for network
sharing applications.

77
00:08:24,875 --> 00:08:31,625
Centralized model and the
decentralized model. 	The
centralized model is a

78
00:08:31,625 --> 00:08:38,792
tried-and-true model with over
45 years of history. Did you
know that FTP is over 45 years

79
00:08:38,792 --> 00:08:44,042
old? 	I did not know that until
I did a little bit of research
for this presentation. That is

80
00:08:44,042 --> 00:08:51,208
amazing. 	The pros of the
centralized model are fairly
obvious, it's a simplified

81
00:08:51,208 --> 00:08:56,542
programming model. If you take
in any computer science class or
you get bored at home and code

82
00:08:56,542 --> 00:09:02,625
like I do you know how simple it
is to open up a socket
connection and send data. Very,

83
00:09:02,625 --> 00:09:07,542
very simplified program model.
There are dedicated hosting
benefits for centralized. Web

84
00:09:07,542 --> 00:09:15,167
hosting now only costs a
fraction of what it did five,
10, 15 years ago. You can get a

85
00:09:15,167 --> 00:09:21,167
shared hosting environment,
Linux or .NET for $3 a month.
That is extremely inexpensive.

86
00:09:23,750 --> 00:09:29,750
	The cons are logging
inaudiability. Lot of credential
based security with a

87
00:09:29,750 --> 00:09:34,833
centralized model. Companies are
storing our information, there
is a question of digital rights

88
00:09:34,833 --> 00:09:40,833
management. Identity or IP and
usage transparency, and the
centralized model is easily

89
00:09:43,167 --> 00:09:46,958
susceptible to down. A single
point of failure and very very
easy for governments or

90
00:09:46,958 --> 00:09:52,875
corporations or the legal system
to go after a single point. Here
are examples of different types

91
00:09:52,875 --> 00:09:59,792
of file sharing applications
that use the centralized model.
Most will be familiar to us. We

92
00:09:59,792 --> 00:10:05,792
have file system base like samba
or RTFS. We have IRC, FTPs, we
have Web-based choices like

93
00:10:09,208 --> 00:10:15,250
mega, rapid share, we have new
streaming applications like
Netflix, prime, go, et cetera.

94
00:10:15,250 --> 00:10:22,833
And we have got Cloud Computing
which entered the market a few
years back like Google drive,

95
00:10:22,833 --> 00:10:28,333
Amazon web services, Dropbox, et
cetera. 	The decentralized
model, on the other hand, is a

96
00:10:28,333 --> 00:10:36,250
rather newer model for file
sharing but imperfect as well.
The pros are no central point of

97
00:10:36,250 --> 00:10:42,250
access or failure. It could also
last forever. A well designed
decentralized file sharing

98
00:10:45,292 --> 00:10:53,125
application or network, once
live, has the potential to never
be taken down. However, there

99
00:10:53,125 --> 00:10:59,917
are some concerns with the
decentralized model as well such
as identity and IP usage

100
00:10:59,917 --> 00:11:04,667
transparency. That's the same
con as we saw in the centralized
model and we'll talk about that

101
00:11:04,667 --> 00:11:10,750
later. You also have the loss of
anonymity, IP address is
revealed and that could be

102
00:11:10,750 --> 00:11:18,250
linked to your name. 	There is
personal liability which is
something new. The legal system

103
00:11:18,250 --> 00:11:23,708
can go after us directly for
downloading files via
BitTorrent. And then there's a

104
00:11:23,708 --> 00:11:31,000
security issue, too. Really
quick I want to point out some
of these, these should be all

105
00:11:31,000 --> 00:11:38,708
familiar but BitTorrent to go
way back, Napster, the start of
it all, stuff like plex, are

106
00:11:38,708 --> 00:11:40,958
sync, plex is newer to the
market and then streaming
applications that I think are

107
00:11:40,958 --> 00:11:46,958
very exciting like Chromecast
and of course XPNC which has
been around for a long time now.

108
00:11:51,042 --> 00:11:57,417
	File-sharing is an amazing
technology. But this doesn't
mean it's perfect. There are

109
00:11:57,417 --> 00:12:03,417
some fundamental problems with
file-sharing. For example, file
share is insecure. Either we

110
00:12:05,792 --> 00:12:12,292
trust a third party source like
a centralized server or set of
applications, or we risk

111
00:12:12,292 --> 00:12:16,833
revealing our identity via a
peer-to-peer or decentralized
network. There are also legality

112
00:12:16,833 --> 00:12:22,833
issues with file sharing. It's
also inflexible. I want my files
available to me at all times. I

113
00:12:26,042 --> 00:12:32,292
don't want to force sync content
across boxes and what if I'm
offline? I can't stream Netflix.

114
00:12:32,292 --> 00:12:39,792
Or I can't grab my files via the
Dropbox, so I want more
flexibility in file sharing.

115
00:12:39,792 --> 00:12:44,250
	It's also inconvenient. I want
to watch the show that I'm
paying for. I don't want to

116
00:12:44,250 --> 00:12:50,042
watch "Ads" and by the way the
thing that most upset me about
HuluPlus, is the requirement

117
00:12:50,042 --> 00:12:57,583
that we watch ads. Some are
funny but seeing the same ad
four times over in an hour is

118
00:12:57,583 --> 00:13:05,292
not funny anymore. Why do we
have to watch ads? 	File sharing
is also unreliable. If you look

119
00:13:05,292 --> 00:13:10,167
at streaming providers, they
have exclusive content and they
have licensing disputes which

120
00:13:10,167 --> 00:13:16,167
changes the content available in
their sites. Netflix, prime does
this all the time. Network

121
00:13:16,167 --> 00:13:23,292
outages. Why when they go down
should I suffer? And there's not
enough seeds for BitTorrent. I

122
00:13:23,292 --> 00:13:29,833
want something nobody else
wants. How do I get that? 	File
sharing choices are sometimes

123
00:13:29,833 --> 00:13:35,875
expensive. Has anyone looked
into upgrading their Dropbox
accounts? Free two gigs that

124
00:13:35,875 --> 00:13:41,708
were given costs substantially
more when you want 100 gigs.
That shouldn't be the case. Hard

125
00:13:41,708 --> 00:13:48,750
drives are cheap these days. The
cloud is also expensive. And not
only the price, but what are

126
00:13:48,750 --> 00:13:55,250
these companies doing with our
data? Who has access and what if
it's stolen? Netflix and Amazon

127
00:13:55,250 --> 00:14:01,250
prime are doing it the best.
HBO Go not so much, I don't want
cable or satellite. My HBO

128
00:14:04,208 --> 00:14:08,875
subscription is through U
torrent. Some of my friends get
theirs through the HBO

129
00:14:08,875 --> 00:14:14,875
subscriptions of their friends
and their logins. I would prefer
to watch HBO through Netflix or

130
00:14:16,875 --> 00:14:22,917
Amazon prime. Granted HBO
finally caved in recently. If
you want to watch shows five

131
00:14:22,917 --> 00:14:28,500
years old. What about the shows
that are out now? So my Game of
Thrones subscription is through

132
00:14:28,500 --> 00:14:35,833
uTorrent. The modern Internet
has also taught us to value
something if it is good,

133
00:14:35,833 --> 00:14:43,042
convenient, and reasonably
priced so I want to throw those
3 things out there. The modern

134
00:14:43,042 --> 00:14:48,083
Internet teaches us that
convenience is a good thing and
we like convenience. But it's

135
00:14:48,083 --> 00:14:54,083
also taught us to value things
that are good, convenient, and
reasonably priced. 	This is why

136
00:14:56,208 --> 00:15:02,833
we still torrent, this is while
we still download illegally. I
find from my personal use if a

137
00:15:02,833 --> 00:15:09,375
show is on Netflix or prime I'm
likely to stream it because it's
good, convenient, and reasonably

138
00:15:09,375 --> 00:15:16,792
priced. Actually more work to
Torrent it. Finally file sharing
problems or file sharing can be

139
00:15:16,792 --> 00:15:23,458
unfair. Not all usage patterns
are the same. BitTorrent network
is a very important and powerful

140
00:15:23,458 --> 00:15:30,167
network and we all use it but
it's designed to adhere to a
state of pseudoequality across

141
00:15:30,167 --> 00:15:33,167
the board. If it did not, then
we would not be able to download
if we didn't have to upload. So

142
00:15:33,167 --> 00:15:39,167
the ratio of seeding to
downloading is very, very
critical. But not all usage

143
00:15:44,042 --> 00:15:50,042
patterns are the same. 	What if
I only wanted to download? Is
that possible? Well, it should

144
00:15:52,125 --> 00:15:58,667
be allowed. The differentiation
between acquisition, which is
the initial acquiring of new

145
00:15:58,667 --> 00:16:04,750
content, and the subsequent
aggregation of that, which is
the disbursing and sharing

146
00:16:04,750 --> 00:16:11,333
should be separate models in a
file sharing app and
configurable separately. 	So

147
00:16:11,333 --> 00:16:16,917
these problems with file sharing
have led to the creation of a
niche market for solutions.

148
00:16:16,917 --> 00:16:22,917
Inadequacy breeds innovation.
VPNs, proxies, file wall, dark
net, tor, peer block, which

149
00:16:25,042 --> 00:16:31,833
doesn't work but people like it
none the less, and hacking our
neighbor's access points are all

150
00:16:31,833 --> 00:16:38,208
cures to the symptoms and not
the problem. You laugh, many of
us do it. I probably shouldn't

151
00:16:38,208 --> 00:16:45,208
admit that I would do such a
thing but if I did I would laugh
as well. 	(Inaudible) 	Yes.

152
00:16:45,208 --> 00:16:49,208
Exactly. 	So reinventing file
sharing, we need to -- in order
to reinvent file sharing we need

153
00:16:49,208 --> 00:16:56,583
to leverage the power of our
Internet access. I will quote
Aaron Schwartz who said

154
00:16:56,583 --> 00:17:03,125
something absolutely amazing
2007. He said "When you have a
distributed network like the

155
00:17:03,125 --> 00:17:08,042
Internet everybody can be a
server. You can take your home
laptop and run a server off it

156
00:17:08,042 --> 00:17:13,833
that can distribute movies and
music and Web pages and e-mail
in the same way that the biggest

157
00:17:13,833 --> 00:17:19,417
computers at Google can. There
is no fundamental difference
between the computers they have

158
00:17:19,417 --> 00:17:24,750
in the racks in their server
rooms and what you have on your
desk." 	He was absolutely

159
00:17:24,750 --> 00:17:30,167
correct. Reinventing file
sharing means we need a new
solution that's secure,

160
00:17:30,167 --> 00:17:36,167
anonymous, free and everywhere.
What does it take to reinvent
file sharing? Norm Chomsky said

161
00:17:40,000 --> 00:17:46,500
if you want to achieve something
you build the basis for it. And
Julian Assange said the only way

162
00:17:46,500 --> 00:17:53,208
to keep a secret is to never
have one. 	Let's talk about five
key principles that will secure

163
00:17:53,208 --> 00:17:59,792
file sharing network and
maintain the privacy of data.
	Number one, saving cyberspace

164
00:17:59,792 --> 00:18:05,667
means that we need to reclaim
the authoritative source. Well,
what is the authoritative

165
00:18:05,667 --> 00:18:12,042
source? The authoritative source
is the primary repository of
trusted data. It's basically our

166
00:18:12,042 --> 00:18:18,500
data that we're about to share.
	When we give away the
authoritative source we give

167
00:18:18,500 --> 00:18:25,375
away the control of our
sensitive data. 	The price of
online data storage is our

168
00:18:25,375 --> 00:18:32,625
anonymity and potential for
abuse of our data. The
foundation of file sharing is

169
00:18:32,625 --> 00:18:37,458
data. Right? Everything is based
around data. Data should be the
first thing that is secured and

170
00:18:37,458 --> 00:18:42,625
the last thing to be
compromised. It should never
leave our control. Companies I

171
00:18:42,625 --> 00:18:49,375
used to work in the financial
sector, companies I learned are
very, very good at securing

172
00:18:49,375 --> 00:18:55,833
their devices. Their corporate
devices like laptops and phones,
and USB drives, they excel at

173
00:18:55,833 --> 00:19:01,333
securing those, but they are
very bad at securing network
transmissions between those

174
00:19:01,333 --> 00:19:08,875
devices. The weakest link are
the users and the methods by
which they exchange data. 	When

175
00:19:08,875 --> 00:19:14,333
we lose control of our data, we
lose control of everything. This
includes the power to protect

176
00:19:14,333 --> 00:19:20,750
what's ours, the certainty that
our data is protected, and the
choice to respond to attacks and

177
00:19:20,750 --> 00:19:27,208
the ability to remain anonymous.
The solution? We need to take
responsibility and reclaim the

178
00:19:27,208 --> 00:19:33,333
authoritative source. 	Our data
should not leave our personal
devices. It should never go into

179
00:19:33,333 --> 00:19:38,625
the cloud, it should never go
into Dropbox, it should never go
beyond the devices we own like

180
00:19:38,625 --> 00:19:45,542
this laptop or my phone or my
tablet. 	We need to do what
companies continue to fail us on

181
00:19:45,542 --> 00:19:53,083
and that is secure our data.
	Number two, saving cyberspace
means that we need to redefine

182
00:19:53,083 --> 00:19:58,875
authentication. Well, what does
it mean to authenticate? We do
it all the time, multiple times

183
00:19:58,875 --> 00:20:05,792
per day, simply authentication
is the process by which I prove
who I claim to be. That is

184
00:20:05,792 --> 00:20:13,250
really it. Right now, there are
many, many forms of stateful
authentication. Stateful

185
00:20:13,250 --> 00:20:17,292
authentication is used for
credential-based or
certificate-based authentication

186
00:20:17,292 --> 00:20:23,000
where there is some sort of
state being maintained. Usually
in a database. It's a necessary

187
00:20:23,000 --> 00:20:29,000
model but in some cases it can
be antiquated and unnecessary.
Relying on trusted third parties

188
00:20:31,375 --> 00:20:37,750
is not always the best solution
for authentication. Stateless
authentication is a form of

189
00:20:37,750 --> 00:20:45,083
shared secret authentication
that leverages shared assets or
other known data to mutually

190
00:20:45,083 --> 00:20:52,958
authenticated clients. 	The
benefits are obvious in that the
modern Internet gives us a

191
00:20:52,958 --> 00:20:59,958
wealth of information or shared
secrets. Such as pictures that
we have uploaded to Facebook or

192
00:20:59,958 --> 00:21:06,042
posts we have made or tweets, et
cetera. There is an immense
amount of information available

193
00:21:06,042 --> 00:21:11,792
that can be used to share
secrets across multiple people.
Mutual coexistence by shared

194
00:21:11,792 --> 00:21:17,667
knowledge is the basis for
stateless authentication. 	This
means that the shared secret is

195
00:21:17,667 --> 00:21:22,458
something that is obvious to the
very specific group of people.
There is no registration process

196
00:21:22,458 --> 00:21:27,458
and no data storage. No need for
databases, SQL or otherwise. And
the beauty of this is we can use

197
00:21:27,458 --> 00:21:33,458
a series of dynamic encryption
algorithms based on this
information because no state

198
00:21:36,083 --> 00:21:40,667
needs to be maintained. So
there's no certificate
authorities, there is no

199
00:21:40,667 --> 00:21:45,625
databases, there is no, nothing
in the background that can link
what we are doing to our

200
00:21:45,625 --> 00:21:53,292
identity. 	So the solution for
stateless authentication is
redefining the need to

201
00:21:53,292 --> 00:21:58,125
authenticate. Let's create a
temporary trust. We have learned
trust is bad and we should be

202
00:21:58,125 --> 00:22:05,250
advocates for distrust. But
temporary trust that can be
changed and modified over the

203
00:22:05,250 --> 00:22:11,250
course of seconds or minutes or
hours is valuable. 	Our social
networks have an immense amount

204
00:22:13,583 --> 00:22:19,833
of shared secrets we can tap
into. No data is stored and the
loss of security because

205
00:22:19,833 --> 00:22:25,875
insignificant with stateless
authentication. Why? It's not
necessarily a secured model that

206
00:22:25,875 --> 00:22:32,333
needs to stand the test of time.
It's a transitory nature,
stateless authentication that

207
00:22:32,333 --> 00:22:39,792
has the ability to adapt via
dynamic encryption algorithms.
	Number three is saving

208
00:22:39,792 --> 00:22:46,167
cyberspace means that we
transmit a module approach to
security. Modular security is

209
00:22:46,167 --> 00:22:52,542
something that is based on
layered security and layered
security being the practice of

210
00:22:52,542 --> 00:22:57,792
combining multiple mitigating
security controls to protect
data, make it more difficult to

211
00:22:57,792 --> 00:23:04,250
compromise the whole. While
modular security takes layered
security and builds on top of it

212
00:23:04,250 --> 00:23:11,417
by creating more of an
obfuscated and disjointed
separation of duties. I use the

213
00:23:11,417 --> 00:23:17,375
double-lined approach so nobody
knows the entire secret and
there's an inability to store

214
00:23:17,375 --> 00:23:23,333
complete secrets. It's not
feasible in a network design
based on modular securities to

215
00:23:23,333 --> 00:23:30,250
have any secrets. It's a bit
like a free-for-all, a hail Mary
in a way, but a guaranteed

216
00:23:30,250 --> 00:23:36,500
touchdown so perhaps a bad
analogy. 	There are existing
applications today which are two

217
00:23:36,500 --> 00:23:42,125
tempting targets for take down.
Too many single points of
failure that reveal too much

218
00:23:42,125 --> 00:23:48,125
information. Modular security
provides plausible deniability.
We should always assume that

219
00:23:50,208 --> 00:23:56,625
someone is listening. Always be
paranoid. It's better to be
paranoid than to be caught. And

220
00:23:56,625 --> 00:24:02,625
what they don't know won't hurt
us. They cannot audit what we do
not have. The solution implement

221
00:24:04,833 --> 00:24:12,000
multiple modules of defense to
resist penetration. As messages
propagate through the

222
00:24:12,000 --> 00:24:17,667
transmission stream, they will
increase in strength. But nobody
will be able to know the entire

223
00:24:17,667 --> 00:24:25,500
secret and even a compromise of
99% of a network will not reveal
the entire secret. Each module

224
00:24:25,500 --> 00:24:32,208
therefore is isolated,
autonomous, self-sufficient and
resistant to attacks. 	Number

225
00:24:32,208 --> 00:24:37,958
four, saving cyberspace means we
need to leverage existing
protocols. Our choice of

226
00:24:37,958 --> 00:24:43,625
protocol message or otherwise
does not define us as an
application. When we create a

227
00:24:43,625 --> 00:24:49,167
new file-sharing app it's really
about art and science. This is
my second file-sharing app in

228
00:24:49,167 --> 00:24:54,875
the last 15 years and it truly
is always a journey. This one
I'm about to share with you

229
00:24:54,875 --> 00:25:00,875
shortly has taken a year
part-time, as a labor of love.
But creating a message protocol

230
00:25:04,833 --> 00:25:09,250
is true wizardry and have more
difficult than creating a file
sharing app. Use standard

231
00:25:09,250 --> 00:25:14,417
protocols the benefits are
obfuscation, which there's a
Japanese proverb I love that

232
00:25:14,417 --> 00:25:20,083
says "The nail that sticks out
gets hammered down. This means
calling undue attention to

233
00:25:20,083 --> 00:25:26,167
ourselves will only result in
problems. So let's blend in with
the rest of the http network

234
00:25:26,167 --> 00:25:33,333
traffic, pretend like we're no
different. It's interoperable,
will work with existing web

235
00:25:33,333 --> 00:25:40,875
services and sites, and
hopefully undetectable
transfers. The solution for a

236
00:25:40,875 --> 00:25:46,875
profile, use these preexisting
protocols, stuff like HTP, XML,
JSON, etc. And finally number 5

237
00:25:50,500 --> 00:25:55,750
is saving cyberspace means that
we need to support a more
flexible and adaptive model for

238
00:25:55,750 --> 00:26:01,667
file sharing. What does this
mean? Flexible and adaptive.
Well, first of all, we need to

239
00:26:01,667 --> 00:26:08,833
be simple and effective. It
needs to be easy to use our
file-sharing app. BitTorrent is

240
00:26:08,833 --> 00:26:16,000
an amazing, amazing protocol and
uTorrent is an amazing
application. I use uTorrent most

241
00:26:16,000 --> 00:26:23,250
every day. It's very complex and
a lot of my friends aren't
necessarily like us, they might

242
00:26:23,250 --> 00:26:27,583
not have the same technical
background so if we can make
something that everybody can

243
00:26:27,583 --> 00:26:33,625
use, then file sharing can be
everywhere. 	Individuals,
families, and organizations,

244
00:26:33,625 --> 00:26:39,750
small, medium and large, should
be able to use this application
equally. It should be available

245
00:26:39,750 --> 00:26:45,750
on all devices, phones, tablets,
work stations, laptops, servers,
and even low-power consumption

246
00:26:45,750 --> 00:26:51,875
devices like the Raspberry Pi
and Ouya and even these badges
should be able to run file

247
00:26:51,875 --> 00:26:59,208
sharing networks. Very, very
possible. Also operating systems
should be agnostic, Windows,

248
00:26:59,208 --> 00:27:05,208
Linux, Mac, Android and iOS
should support all of them.
	Finally, we need a hybrid

249
00:27:07,792 --> 00:27:14,625
model. We need a file sharing
app that takes the best of the
centralized model and the best

250
00:27:14,625 --> 00:27:20,500
of the decentralized model and
removes everything else that is
crap. How do we create this

251
00:27:20,500 --> 00:27:26,833
hybrid model? We need to
abstract the content from the
transfer. No fixed servers and

252
00:27:26,833 --> 00:27:32,625
no direct peer-to-peer. So
nobody knows about your IP
address and no fixed servers,

253
00:27:32,625 --> 00:27:38,583
needs to be pervasive and
ubiquitous, everywhere and
throughout everything and it

254
00:27:38,583 --> 00:27:44,583
needs to be secure, anonymous,
free, and everywhere. 	Edward
Snowden recently said, "I don't

255
00:27:47,458 --> 00:27:51,375
want to live in a world where
there's no privacy and therefore
no room for intellectual

256
00:27:51,375 --> 00:27:57,583
exploration and creativity" and
Bjarne Stroustrup, his name is
very difficult for me to

257
00:27:57,583 --> 00:28:03,958
pronounce, one of my personal
heroes, founded C++, said people
who think they know everything

258
00:28:03,958 --> 00:28:11,167
really annoy those of us who
know we don't. I think that's
true. Right. 	He's a very -- far

259
00:28:11,167 --> 00:28:18,542
smarter man than I am and he
seemed to get annoyed quite
frequently! Do we really need,

260
00:28:18,542 --> 00:28:23,375
let's be honest, do we need
another file-sharing
application? I struggled with

261
00:28:23,375 --> 00:28:30,042
this a year ago before I started
writing Demonsaw. There's a lot
out there and every year there's

262
00:28:30,042 --> 00:28:35,833
a new file sharing that comes
out. Recently I found myself
halfway around the world. I

263
00:28:35,833 --> 00:28:41,542
won't tell you what area of the
world or what country but it was
far, far from home and I found

264
00:28:41,542 --> 00:28:48,083
myself there for many, many
months. And I realized that I
had no good way of getting

265
00:28:48,083 --> 00:28:54,500
access to all the files that I
had downloaded previously. I had
no good way of sharing or

266
00:28:54,500 --> 00:29:01,167
accessing my content. And I felt
a little vulnerable and I
thought, why is this the case? I

267
00:29:01,167 --> 00:29:08,708
could have FTP'd or uploaded it
to a cloud or done Dropbox or
Amazon a shit load of money to

268
00:29:08,708 --> 00:29:15,208
host my content but I realized I
wasn't happy with the current
state of file sharing. I wanted

269
00:29:15,208 --> 00:29:23,083
to share with friends and family
or 10,000 complete strangers. I
wanted to do it whenever I

270
00:29:23,083 --> 00:29:29,208
wanted on any device. I wanted
access to all my content from
anywhere in the world. I wanted

271
00:29:29,208 --> 00:29:36,833
convenience and control. Why
doesn't a solution for me
already exist? 	I realize this

272
00:29:36,833 --> 00:29:42,833
is a problem that we can solve.
I would like to introduce you to
Demonsaw. Demonsaw is a tool

273
00:29:46,042 --> 00:29:52,292
that allows me to share my files
my way. In fact, just this
morning, we made Demonsaw

274
00:29:52,292 --> 00:29:58,125
available to the public.
Demonsaw.com, if you go there,
you can download it, have fun,

275
00:29:58,125 --> 00:30:04,125
do whatever you want. It's free.
	When I was stuck across the
world, I realized that most file

276
00:30:07,042 --> 00:30:13,000
sharing networks, they really
break down to three fundamental
components. When you look at any

277
00:30:13,000 --> 00:30:18,417
file sharing network.
BitTorrent, FTP, doesn't matter.
They all come down to three

278
00:30:18,417 --> 00:30:25,750
components. That is you have a
client or multiple client nodes.
What these do is these either

279
00:30:25,750 --> 00:30:31,708
upload or download. They either
share or acquire data. Then you
have this type of node that

280
00:30:31,708 --> 00:30:37,750
serves as really a message
propagator. What it does is
controls program flow. It makes

281
00:30:37,750 --> 00:30:45,250
sure messages get sent where
they need to. This can be
torrent trackers, or this can be

282
00:30:45,250 --> 00:30:51,250
built into the client in the
case of more direct applications
like FTP. Then finally you have

283
00:30:53,542 --> 00:31:00,125
a server component that is
really responsible, the dumbest
of the three components. All it

284
00:31:00,125 --> 00:31:07,875
does, it's like a tank, all it
does is gets data sent through
it, 99.99 % of the bytes get

285
00:31:07,875 --> 00:31:14,917
sent through the server, all it
does is propagate data. Most
file sharing applications have

286
00:31:14,917 --> 00:31:22,542
combined these three components
into two components. Either the
client and the server are

287
00:31:22,542 --> 00:31:28,542
combined, or the router and
server are combined and the
client is separate. 	Demonsaw is

288
00:31:31,042 --> 00:31:35,208
a completely new type of file
sharing application.
Architecture is based on a

289
00:31:35,208 --> 00:31:41,250
combination of network routing,
Web-based and security patterns,
but it's succeptively simple at

290
00:31:41,250 --> 00:31:48,250
its core. The magic behind
Demonsaw is it keeps these three
functions, three different

291
00:31:48,250 --> 00:31:53,500
client, router and server nodes
separate. It doesn't try to
combine them. Because of that

292
00:31:53,500 --> 00:31:59,875
it's able to achieve an enhanced
level of security and anonymity
we'll see shortly. 	What I want

293
00:31:59,875 --> 00:32:06,417
to do now is give you a quick,
very very brief demo of Demonsaw
and just show you what it can

294
00:32:06,417 --> 00:32:12,417
do, just a local demo but it
will be a live demo. I'll just
talk you through a very, very

295
00:32:14,958 --> 00:32:20,958
basic scenario. What will happen
here is a router, here just a
Windows-based router -- all

296
00:32:27,625 --> 00:32:33,625
right. Thank you. 	Hmm. (Pause)
All right. We'll use our backup
demo, then. Which is a static

297
00:32:59,042 --> 00:33:05,042
demo. Hopefully that will work.
Okay. Sorry about that, there
are always technical

298
00:33:11,500 --> 00:33:15,833
difficulties in live demos. 	I
will be available after this, in
the cafe. And I will be glad to

299
00:33:15,833 --> 00:33:21,833
walk you through the live demo
or answer any of your questions
that you may have. 	So I always

300
00:33:26,292 --> 00:33:32,500
come prepared. Let's talk about
the demo. Julian Assange also
said non-conformity is the only

301
00:33:32,500 --> 00:33:38,833
real passion being ruled by,
Sean Parker, very very famous
person, anybody know Sean Parker

302
00:33:38,833 --> 00:33:44,833
said you can now be the master
of your own destiny. 	What you
will see here is you'll see the

303
00:33:49,167 --> 00:33:53,833
client. Basically there is three
downloads that I have made
available. There is a

304
00:33:53,833 --> 00:34:00,375
Windows-based router which
serves only as a message
Facilitator. All it does is

305
00:34:00,375 --> 00:34:05,083
groups clients and controls
message flow and that's it.
	There is the client which you

306
00:34:05,083 --> 00:34:12,708
see here and that is just going
to share, search, browse, and
transfer. And then you have a

307
00:34:12,708 --> 00:34:18,250
Web-based server I have
available which is a .NET web
app that you can drop in any

308
00:34:18,250 --> 00:34:23,625
.NET web hosting provider and
all your data will be sent
through that. For $3 or $4 a

309
00:34:23,625 --> 00:34:29,750
month you can go to a hosting
company and get something that
supports .NET 4.5, in fact, fuck

310
00:34:29,750 --> 00:34:35,750
it, get 25 of them for 100, get
25 hosting environments for 100
bucks a month, and you could

311
00:34:39,958 --> 00:34:45,083
basically be routing as much
traffic as you want through it.
Because web hosting is so cheap

312
00:34:45,083 --> 00:34:52,083
these days. 	But the web server
will allow the router not to
handle large streams of data. In

313
00:34:52,083 --> 00:34:59,875
this example we have searched
for I think Daft Punk. For some
reason I want to listen to the

314
00:34:59,875 --> 00:35:03,958
new Daft Punk this day. So you
just type search, bang, gives
you the results instantly. In

315
00:35:03,958 --> 00:35:11,667
the next window you have a
browse function. This allows you
to navigate through any of the

316
00:35:11,667 --> 00:35:19,125
content in your secret group.
Now, a secret group will be
defined by an AES key that will

317
00:35:19,125 --> 00:35:24,542
be dynamically created by some
sort of shared asset. In this
version of Demonsaw that will be

318
00:35:24,542 --> 00:35:30,542
simply an image. 	Let's say the
front row and I all have that
picture of the Christmas party

319
00:35:33,958 --> 00:35:38,958
where things got a little crazy.
Right. Got a little crazy, we
all had a good laugh and then we

320
00:35:38,958 --> 00:35:45,083
wanted to forget about that
party. Let's use that similar
imagine and the 12, 13, 14 of

321
00:35:45,083 --> 00:35:51,250
you are in a group that nobody
else can get to. Anything we
share will only be available to

322
00:35:51,250 --> 00:35:57,083
us in the group but even through
using the client we are not
gonna know that I'm downloading

323
00:35:57,083 --> 00:36:02,625
from you or you are downloading
from me or you have X, Y, and Z
files available. But we are

324
00:36:02,625 --> 00:36:08,667
gonna isolate ourselves to a
specific group simply by this
shared image from which our

325
00:36:08,667 --> 00:36:14,792
dynamic AES keys will be
created. 	We'll be able to
browse each other's content and,

326
00:36:14,792 --> 00:36:18,167
by the way, the names of the
clients here are really
irrelevant. You can make them

327
00:36:18,167 --> 00:36:24,167
whatever you want. I just,
server and work station worked
for me. 	You can transfer,

328
00:36:24,167 --> 00:36:30,167
download stuff into your status.
Very Napster-like. And here you
can share content. So I can

329
00:36:32,667 --> 00:36:36,792
choose what folders I want to
share and this is a little
browse window where I can get

330
00:36:36,792 --> 00:36:42,167
access to my content. And then
right here you see the little
image of the little demon guy,

331
00:36:42,167 --> 00:36:48,958
that is the image from which the
AES keys will be created. So if
you want to deny someone access

332
00:36:48,958 --> 00:36:55,708
to your group, this is why
security is almost unnecessary
and insignificant for Demonsaw,

333
00:36:55,708 --> 00:37:01,708
I just change my image and
nobody has access to my shit.
Say one of our friends that we

334
00:37:06,083 --> 00:37:09,542
don't like to hang out with
found that image and he suddenly
wants to transfer all our Daft

335
00:37:09,542 --> 00:37:13,250
Punk. For some reason I don't
like him. We just change our
image. There's no need to revoke

336
00:37:13,250 --> 00:37:19,167
security access, or we change an
image every day, something
different. The lack of an image

337
00:37:19,167 --> 00:37:24,958
will default to the global or
default group, basically what
BitTorrent does now. If I choose

338
00:37:24,958 --> 00:37:30,958
not to have an image it defaults
to nothing. 	Now, sorry about
that. Technical difficulties.

339
00:37:38,542 --> 00:37:44,500
	Now, how does Demonsaw address
all these problems we talked
about with file sharing? Right.

340
00:37:44,500 --> 00:37:52,333
First of all, it's secure. There
is no peer-to-peer. There is no
IP addresses that are revealed.

341
00:37:52,333 --> 00:37:56,375
Nobody can know what you are
downloading, nobody can even
know what you are uploading and

342
00:37:56,375 --> 00:38:02,917
there is no centralized servers,
routers and servers can be
dynamic and shift as much as

343
00:38:02,917 --> 00:38:08,917
they want. In fact, I don't have
my phone on me, but -- now I do.
Right now we're working on an

344
00:38:13,542 --> 00:38:20,208
Android port of Demonsaw that
will bring client and router to
your phone. What that means is

345
00:38:20,208 --> 00:38:26,250
I'll be able to host a private
file sharing network on my phone
and all data that gets

346
00:38:26,250 --> 00:38:30,625
transferred can be sent through
hundreds or thousands of
different servers all around the

347
00:38:30,625 --> 00:38:36,292
world. They can be in countries
that don't discriminate against
data sharing rules or data

348
00:38:36,292 --> 00:38:41,000
sharing in general but I can
control my own private file
sharing network from my phone.

349
00:38:41,000 --> 00:38:44,917
That's what we're working on
right now on Android and I can
download stuff from the phone.

350
00:38:44,917 --> 00:38:49,500
We'll also be working on
Chromecast and possibly plex
plug-ins so you can download and

351
00:38:49,500 --> 00:38:55,500
the 2% or 3% that's done you can
stream it to TV. Anywhere in the
world have access, not just

352
00:38:57,542 --> 00:39:04,542
local like plex or DLNA or XBMC
but you can do this from the
phone. We all have old phones,

353
00:39:04,542 --> 00:39:10,917
Androids or otherwise sitting
around, doing nothing, plug them
in, make them routers. Take them

354
00:39:10,917 --> 00:39:17,292
with you, have access wireless
networks and suddenly you have a
mobile router that is your

355
00:39:17,292 --> 00:39:23,917
file-sharing network that nobody
knows what you are doing.
Demonsaw is encrypted.

356
00:39:23,917 --> 00:39:30,708
Everything is encrypted.
Multiple layers of encryption.
We leverage encryption

357
00:39:30,708 --> 00:39:34,875
standards. You could
theoretically rotate he
description keys and algorithms

358
00:39:34,875 --> 00:39:39,667
at will. That is something we
can easily add if there is a
need. There are varying

359
00:39:39,667 --> 00:39:45,917
encryption types and algorithms,
AES, mutating, automatic,
isolating, data-driven and

360
00:39:45,917 --> 00:39:51,917
stateless algorithms. There are
varying encryption techniques,
messages and data are encrypted

361
00:39:54,000 --> 00:40:01,333
separately. So if someone sniffs
your network and they happen to
get access to a message packet

362
00:40:01,333 --> 00:40:08,667
and they happen to know the
shared Diffie Hellman key by
some act of God and they happen

363
00:40:08,667 --> 00:40:14,375
to decrypt that message packet
they won't even know what you
are trying to do. They won't

364
00:40:14,375 --> 00:40:21,125
know what packet, what packet
that belongs to, whether it's
upload are or downloading, no

365
00:40:21,125 --> 00:40:28,750
idea if you are sharing a file
or a turbo tax document from
2003. They'll have no idea. 	In

366
00:40:28,750 --> 00:40:35,583
order to know that, they have to
completely compromise the entire
end to end chain which is what

367
00:40:35,583 --> 00:40:42,333
we saw with modular security.
	Of course authentication and
authorization is all done via

368
00:40:42,333 --> 00:40:48,333
keys. Demonsaw is anonymous, no
log-in, no registration, Mo data
retention, no loss of control.

369
00:40:50,625 --> 00:40:58,458
I'll go one step further. It's
free and there's no ads. You can
use it however you will. No

370
00:40:58,458 --> 00:41:02,167
callback to demonsaw.com, I
don't even know you are using
it, I don't even care. A year

371
00:41:02,167 --> 00:41:08,208
ago I started on this journey to
write this, to meet my needs and
I want to share it with

372
00:41:08,208 --> 00:41:12,833
everybody because I thought
maybe other people share my
need. Yours to use however you

373
00:41:12,833 --> 00:41:19,042
want. Set up a sniffer and
verify I'm not sending any data
back to demonsaw.com. It's

374
00:41:19,042 --> 00:41:25,542
modular, separation of messages
and content. We are unable to
deduce the type of content

375
00:41:25,542 --> 00:41:32,500
exchange. This of course is the
need-to-know basis. It's simple.
You saw the interface. It's

376
00:41:32,500 --> 00:41:40,125
share, search, browse, download
and upload. That's it! I'm sure
the Android and iOS versions

377
00:41:40,125 --> 00:41:46,500
will be even simpler once we
create them. 	Use it at home,
work, or while traveling. It

378
00:41:46,500 --> 00:41:51,750
will go right through most
firewalls because it's standard
http, nobody will even know what

379
00:41:51,750 --> 00:41:57,000
you are doing which is great
because I didn't really think
about the security ramifications

380
00:41:57,000 --> 00:42:01,542
of this but if you set up a
Demonsaw client and share a C
drive, yes, you can transfer

381
00:42:01,542 --> 00:42:07,917
your entire work computer and
work from home. I've not tried
this. I do enjoy my day job and

382
00:42:07,917 --> 00:42:12,917
the paychecks that come as a
result of it, but that is the
theoretically possible.

383
00:42:12,917 --> 00:42:19,125
Firewalls and proxies, as long
as http can get through, this
shit can get through. It's

384
00:42:19,125 --> 00:42:26,417
everywhere, Windows, Linux, Mac,
Android, iOS and the Web. Right
now we just released the Windows

385
00:42:26,417 --> 00:42:32,792
version of the router and the
client. And a Windows web
application based version of the

386
00:42:32,792 --> 00:42:39,542
server. The router will do
server functionality. Router is
a server as well. But if you

387
00:42:39,542 --> 00:42:43,917
specify additional servers like
the web server component it will
override that and allow the

388
00:42:43,917 --> 00:42:50,125
router only to do message
propagation. 	We're working on
the Android version. It's

389
00:42:50,125 --> 00:42:54,875
written in C Sharp right now but
we're putting it to c++ so we
can roll it across all these

390
00:42:54,875 --> 00:43:01,500
platforms. Just a matter of time
before it's on Linux, Mac, iOS
and you should see hopefully

391
00:43:01,500 --> 00:43:05,625
something in the next three
months we'll launch the Android
version, fingers crossed. It's

392
00:43:05,625 --> 00:43:12,833
based on design patterns. I'm a
game programmer, that's my
professional job and in game

393
00:43:12,833 --> 00:43:18,000
programming we use what's called
the entity component system and
what this does is favors

394
00:43:18,000 --> 00:43:24,000
composition over inheritance and
it makes adding new code and
expanding the system extremely

395
00:43:24,000 --> 00:43:30,333
easy. In terms of faster, more
flexible features and
maintenance we will be able to

396
00:43:30,333 --> 00:43:36,667
roll these features out fast
because it's based on -- entity
component system. Demonsaw is

397
00:43:36,667 --> 00:43:42,667
silent and unseen. We leverage
standards, we avoid suspicion,
and we remain undetectable.

398
00:43:45,083 --> 00:43:51,250
Flexible and adaptive. As I said
before, share files just with
yourself, share them with family

399
00:43:51,250 --> 00:43:57,250
and friends or share it with
10,000 people. A million file
sharing networks. 	Excuse me.

400
00:44:05,958 --> 00:44:10,958
Finally, if you are curious what
the architecture looks like here
is a picture of a very simple

401
00:44:10,958 --> 00:44:18,000
Demonsaw network. Router is
performing message propagation
and data propagation services.

402
00:44:18,000 --> 00:44:22,417
There are four clients in this
example. They don't have to be
all different devices but here

403
00:44:22,417 --> 00:44:27,417
is a very, very simple way you
can share your content just with
yourself or with three other

404
00:44:27,417 --> 00:44:33,583
people. You just, there is a
UPNP functionality in the router
and it will just open up and the

405
00:44:33,583 --> 00:44:39,958
ports appropriately in your
routers. If you just have stuff
and want to get to it from work

406
00:44:39,958 --> 00:44:45,583
this is a great way to do it and
not trust Dropbox or the cloud.
Since it's your shit on your

407
00:44:45,583 --> 00:44:52,333
devices it's free! This is a
slightly more complicated design
which I think will be probably

408
00:44:52,333 --> 00:44:58,375
the majority of you. This is a
friends and family model. Here
you have a router that just does

409
00:44:58,375 --> 00:45:03,333
message propagation in the
center. Very, very lightweight.
This can be on a phone or on a

410
00:45:03,333 --> 00:45:08,833
old Windows box you have sitting
around doing nothing. You have a
bunch of clients that can be

411
00:45:08,833 --> 00:45:14,458
anywhere and you have some
servers here. One a Web server
and one Windows server that does

412
00:45:14,458 --> 00:45:18,917
data propagation services so
when files are uploaded or
downloaded they are sent through

413
00:45:18,917 --> 00:45:26,542
the servers and router is very
very lightweight. Finally a much
more complicated network

414
00:45:26,542 --> 00:45:32,375
topology of multiple routers
that are completely isolated
with multiple servers and

415
00:45:32,375 --> 00:45:36,833
multiple different groups that
all have different AES keys
because they have a different

416
00:45:36,833 --> 00:45:42,167
shared secret. 	Green groups
have the same shared secret, red
have different, and purple have

417
00:45:42,167 --> 00:45:47,708
their own. We are currently
working on session propagation
technology which would allow any

418
00:45:47,708 --> 00:45:54,125
routers that opt in to be able
to propagate the sessions of
people that are logged in which

419
00:45:54,125 --> 00:45:59,750
means you could theoretically
log into any router and be able
to access anybody else. This is

420
00:45:59,750 --> 00:46:04,000
something that we're working on
right now, haven't thoroughly
tested it, haven't vetted

421
00:46:04,000 --> 00:46:10,792
security concerns with it but
it's something in the works. I
think it's kind of a cool idea.

422
00:46:10,792 --> 00:46:17,875
	And in summary, Albert Einstein
said "Only a life lived for
others is a life worth while." I

423
00:46:17,875 --> 00:46:23,333
created Demonsaw as a labor of
love to meet a personal need. I
want to share it with you

424
00:46:23,333 --> 00:46:30,458
because I think it met my need
and if it meets your need as
well I encourage you to download

425
00:46:30,458 --> 00:46:36,458
it, use it, let me know whether
you like it or not. If you have
feature ideas please e-mail me.

426
00:46:38,542 --> 00:46:44,542
As Steve Jobs said and one more
thing, "changing the world, our
potential is unbound. We possess

427
00:46:46,875 --> 00:46:51,875
a tremendous amount of talent,
we're good at what we do and we
enjoy what we're good at. We can

428
00:46:51,875 --> 00:46:57,583
create something new and
beautiful that can change the
world and we can do it together.

429
00:46:57,583 --> 00:47:03,917
Demonsaw is a tool that deviates
from the insecure models of file
sharing. It is a new way to

430
00:47:03,917 --> 00:47:09,917
share content without fear. It's
secure, it's anonymous, it's
free and it's everywhere. My

431
00:47:12,708 --> 00:47:17,875
name is Eijah and thank you very
much. You can contact me here
and Twitter and the website.

432
00:47:17,875 --> 00:47:23,875
Thank you. (Applause) 	>> Eijah,
I have one question for you real
quick. Can you explain how it is

433
00:47:29,000 --> 00:47:35,000
that you are paneling encrypted
transportation over http?
	>> We're almost out of time but

434
00:47:37,542 --> 00:47:41,958
I'll take a quick stab and if
you want more information I'll
be at the cafe. Basically what

435
00:47:41,958 --> 00:47:47,958
we're doing is using standard
http so adhering to those
protocols and data appears to

436
00:47:51,875 --> 00:47:58,917
look just like http. So it's
basically if your firewall is
set to allow http content, port

437
00:47:58,917 --> 00:48:04,583
80 or 443, this gets sent but
because there is no direct
connection coming into the

438
00:48:04,583 --> 00:48:08,833
network there's no issues with
firewalls blocking incoming
transmissions because everything

439
00:48:08,833 --> 00:48:14,750
is designed from an inside-out
perspective. If that doesn't
answer your question I'm glad to

440
00:48:14,750 --> 00:48:20,917
go into more detail. 	>> Do you
have the protocol speck
published someplace? 	>> I don't

441
00:48:20,917 --> 00:48:27,417
but e-mail and follow me on
Twitter and I'll be glad to talk
about it in more detail, as well

442
00:48:27,417 --> 00:48:31,958
as opensource, I have gotten
questions about that. I haven't
had time with development to

443
00:48:31,958 --> 00:48:36,917
even think about open-sourcing
it but it's something that I'll
definitely think about. If you

444
00:48:36,917 --> 00:48:42,917
have some thoughts about that,
I'd love to hear them. Thank you
again. (Applause)

