1
00:00:00,000 --> 00:00:07,780
>> Okay, thank you for coming.
I will be talking about hacking
traffic control systems from US

2
00:00:07,780 --> 00:00:17,800
and a few other countries.
So this is quickly about me,
just to make a point that I'm 

3
00:00:17,800 --> 00:00:24,380
not new in the security 
business/industry. I have 
been around for a long time.

4
00:00:24,380 --> 00:00:30,240
I've been doing different 
kinds of research and this
is my last research. I did

5
00:00:30,240 --> 00:00:36,600
want to leave the thanks
to the end because I got 
a lot of help from different 

6
00:00:36,600 --> 00:00:43,160
people, from my company,
and maybe it was a little help
but when you put everything

7
00:00:43,160 --> 00:00:48,520
together, it's a lot of help
and it allows you to save
a lot of time. 

8
00:00:51,600 --> 00:01:00,100
How this research got started.
Were you ever curious when 
you go on the roads, on the

9
00:01:00,100 --> 00:01:06,900
street, on the highway, if you
look around at the poles to 
the electronic signs, the toll

10
00:01:06,900 --> 00:01:14,780
collector, the traffic light, you
will see a lot of different 
devices. Most common are the

11
00:01:14,780 --> 00:01:21,580
traffic signals and besides that
the traffic cameras. But if you pay
attention you will find a lot more

12
00:01:21,580 --> 00:01:27,940
different devices around. So I 
was really curious about that 
and I wanted to research some

13
00:01:27,940 --> 00:01:33,440
of them and I didn't know 
anything about that, so I 
started to look around. When

14
00:01:33,440 --> 00:01:40,100
I was looking around, I found
some news that the Department
of Transport from London was 

15
00:01:40,100 --> 00:01:48,940
going to implement some traffic
wireless detection system and 
it got my attention because London

16
00:01:48,940 --> 00:01:56,140
is a big city, important city, and 
these devices are wireless. So
it's an interesting technology and

17
00:01:56,140 --> 00:02:01,800
possible attack vector if they
are insecure. So I started to
look around, specifically for this

18
00:02:01,800 --> 00:02:07,800
technology. It took me a while to
find out the vendor because they
were acquiring the devices from

19
00:02:07,800 --> 00:02:17,020
[indiscernible] so I kept digging
and I found out the vendor name,
the maker, and it was really 

20
00:02:17,020 --> 00:02:23,740
interesting because when I kept
searching, I found out that it was
really widely deployed, mostly in the

21
00:02:23,740 --> 00:02:30,240
US but also in a few more 
countries. So this is information
from the customers. They have

22
00:02:30,240 --> 00:02:38,020
more than 250 customers
worldwide. The customers 
would be like city Department 

23
00:02:38,020 --> 00:02:46,640
of Transport, State Department 
of Transport or the country could
be. And in the last news from the

24
00:02:46,640 --> 00:02:55,900
vendor I saw they state they 
have 200 thousand wireless
sensors deployed worldwide.

25
00:02:55,900 --> 00:02:57,880
Most of them are in the US.

26
00:03:00,480 --> 00:03:06,980
Here you can see this is an 
image from the vendor, the
deployment around the US.

27
00:03:06,980 --> 00:03:12,660
You can see most important
cities are there, maybe it's 
small for this screen, but most

28
00:03:12,660 --> 00:03:15,800
important cities are there,
including Las Vegas.

29
00:03:18,940 --> 00:03:25,920
For instance, one popular
deployment is Washington DC.
This is a slide from a vendor 

30
00:03:25,920 --> 00:03:33,360
presentation. So it says there
are 1300 wireless sensors 
installed there in Washington DC.

31
00:03:35,520 --> 00:03:44,400
When you start to do research,
you get the available documentation
and I found kind of a user manual,

32
00:03:44,400 --> 00:03:51,840
a 100 page user manual and it
has just one paragraph about
security. So it was a really good

33
00:03:51,840 --> 00:03:59,040
indicator that probably these
devices weren't really secure.
So there was a challenge of how

34
00:03:59,040 --> 00:04:07,680
to get the devices because the
device is not something you can
easily buy around because customers

35
00:04:07,680 --> 00:04:15,292
are probably resellers and 
Governments. So what we
did was social engineer the

36
00:04:15,292 --> 00:04:23,892
vendor saying we needed to do
some testing for an undisclosed
customer and we needed just

37
00:04:23,900 --> 00:04:30,020
a couple of devices which is
weird because when they 
get bought they get them by

38
00:04:30,020 --> 00:04:38,360
the dozens or hundreds. So 
after some talks they agreed.
So we got a couple of devices

39
00:04:38,360 --> 00:04:44,240
and at that time I was in Puerto
Rico so I got them shipped to
Puerto Rico and then came to

40
00:04:44,240 --> 00:04:49,320
the US with the devices, then
returned to Argentina and then
returned to the US, to Argentina,

41
00:04:49,320 --> 00:04:54,300
to US to Argentina like five times 
with the devices without any
problems. The point is you can

42
00:04:54,300 --> 00:04:58,120
freely travel around with these 
devices without any problems.

43
00:05:00,720 --> 00:05:08,620
So what are the devices? Well
first we have the wireless sensor
which, I have one here, you can

44
00:05:08,620 --> 00:05:20,880
see this small device.
So this goes in the road.
So basically they are

45
00:05:21,583 --> 00:05:32,833
magnetometers, so they detect
the anomaly in the natural
magnetic field of the Earth and

46
00:05:32,833 --> 00:05:39,708
that way it can detect when a
car goes over it. So in order to
install it, you have to make a

47
00:05:39,708 --> 00:05:49,917
hole in the road with the sensor
and then it's filled with epoxy.
So the battery life is ten

48
00:05:49,917 --> 00:06:00,697
years. This is what the vendor
says. And it has a TI radio transceiver,
which is CC‑2430 which is pretty

49
00:06:00,708 --> 00:06:14,060
common for the specifications.
It runs on 2.4gHz and it has a
microcontroller from TI which is

50
00:06:14,060 --> 00:06:22,480
MCP430, which is also pretty
common. I lost my initial notes
but I think they run TinyOS. 

51
00:06:25,900 --> 00:06:39,040
So this is, like, a view of how
internally the sensor, you have
the ‑‑ in the top, the antenna.

52
00:06:39,042 --> 00:06:47,042
So below is the electronic board
and then the batteries and then
the plastic that's protecting

53
00:06:47,042 --> 00:06:56,540
it. So we open it and there you
can see the antenna at the top.
Here, we push out the electronic

54
00:06:56,540 --> 00:07:03,040
board, and there are the 
batteries. This is the board and 
here you have the transceiver,

55
00:07:03,040 --> 00:07:10,880
the microcontroller and then 
the device, the electronic 
device is used for detecting the 

56
00:07:10,880 --> 00:07:21,060
magnetic interference. And
then we have the access point
which is this wide box, you

57
00:07:21,060 --> 00:07:30,840
can see here. You can usually
find this in a pole next to the
traffic light or sometimes another

58
00:07:30,840 --> 00:07:31,780
pole around.

59
00:07:34,220 --> 00:07:40,600
So basically what the access
point does is get the wireless
data from the sensor from the

60
00:07:40,600 --> 00:07:47,580
traffic detection and relays it
to the traffic control systems.
It runs using Linux, it has a 

61
00:07:47,580 --> 00:07:55,780
Coldfire processor and also 
runs software and interfaces
with the traffic controller with

62
00:07:55,780 --> 00:08:01,940
a contact closure card in order
to communicate with the traffic
control systems. It can be used

63
00:08:01,940 --> 00:08:04,400
as a router etc. for internal networks.

64
00:08:06,220 --> 00:08:13,480
Then we have repeaters. I don't
have one of that, but it's similar
to the access points and the wide

65
00:08:13,480 --> 00:08:19,600
box. And basically what it
does is to extend the range 
when the sensors are too 

66
00:08:19,600 --> 00:08:25,240
far away from the access 
point. So they transmit on
two different channels. In 

67
00:08:25,240 --> 00:08:30,958
one channel they get the
information from the sensors
and in the other channel they

68
00:08:30,958 --> 00:08:40,738
relay the data to the access
point. So this is the range for
the communication between the

69
00:08:40,750 --> 00:08:47,542
sensors and the access point,
which is a maximum 150 feet. And
then if you want to extend the

70
00:08:47,542 --> 00:08:55,702
range, you add the repeaters and
the maximum range by vendor
recommendation is 1,000 feet. Of

71
00:08:55,708 --> 00:09:01,708
course, I mean, if you have
equipment, antenna, you can
probably go further away.

72
00:09:03,880 --> 00:09:11,800
How these devices work, well,
like I said, the sensor goes in the
road, there are different configurations.

73
00:09:13,080 --> 00:09:20,958
One of those ‑‑ this one, it is
at an intersection. So here you
have a set of sensors that are

74
00:09:20,958 --> 00:09:28,018
used for stop bar detection.
That means that once a car is
detected as stopping, they are

75
00:09:28,020 --> 00:09:33,792
waiting for the signal, the
sensor will detect it. And then
you have advanced detection to

76
00:09:33,792 --> 00:09:42,792
detect when the cars keep coming
and are waiting far away from the
stop bar. So the sensor gets the

77
00:09:42,792 --> 00:09:47,072
detection data and sends it
to the access point and the 
access point relays it to the

78
00:09:47,080 --> 00:09:52,900
traffic control systems. So
basically the traffic system
uses this information to know

79
00:09:52,900 --> 00:10:00,400
how to best set the timing, for
instance, for the green light.
If they see there's a lot of

80
00:10:00,400 --> 00:10:08,880
traffic, they will set the
timing longer, maybe 20 or 30
seconds, depends on the

81
00:10:08,880 --> 00:10:16,600
configuration. Also at some
intersections, probably most of
you, some of you have seen these

82
00:10:16,600 --> 00:10:22,080
late night, sometimes you are
waiting at that intersection and
the traffic light won't change

83
00:10:22,083 --> 00:10:27,875
or will take a lot to change.
Sometimes that's because the
detection mechanism is not

84
00:10:27,875 --> 00:10:35,167
working very well. So that's the
stop bar detection. So when a
car is waiting, the traffic

85
00:10:35,167 --> 00:10:40,875
control system will set some
parameters so that the traffic
light will change faster and you

86
00:10:40,875 --> 00:10:47,750
get the green light and you can
go. This is called the access
point connect to the traffic

87
00:10:47,750 --> 00:10:54,370
controller by the contact closure
card and can also connect to
some internal network et cetera.

88
00:10:55,580 --> 00:11:05,400
Another deployment, another
configuration is ramp metering.
So here you have pressure 

89
00:11:05,400 --> 00:11:10,420
detection, which is a kind of
stop bar detection, which will
detect when a car is waiting

90
00:11:10,420 --> 00:11:16,540
and also queue the detection
to measure the length
of the queue. Then at the

91
00:11:16,542 --> 00:11:24,375
freeway, you have several
wireless sensors to measure
the traffic in the freeway

92
00:11:24,375 --> 00:11:32,535
just before the access ramp to
the freeway. So this way the
traffic control system knows how

93
00:11:32,542 --> 00:11:39,625
to set the proper timing to the
ramp meter. If they see there's
no traffic at this freeway, they

94
00:11:39,625 --> 00:11:46,583
will turn off maybe the ramp
meter or they may allow the cars
to go faster on the freeway. If

95
00:11:46,583 --> 00:11:54,500
there's a lot of traffic, they
will allow the cars to go slower
on the freeway. Another kind of

96
00:11:54,500 --> 00:12:01,917
use is for travel times. So
basically you get an array of
sensors at some point on the

97
00:12:01,917 --> 00:12:08,875
freeway and then maybe 1 or 2
miles away another array of
sensors. What they can do with

98
00:12:08,875 --> 00:12:16,000
this technology is to identify a
car. So basically they detect
the car, they do some possible

99
00:12:16,000 --> 00:12:24,120
assessing, and they will create
a fingerprint of the car. So
after a mile or two, they will

100
00:12:24,125 --> 00:12:30,583
re-identify the car so they can
know what the travel time for
that lane. So that information

101
00:12:30,583 --> 00:12:37,333
is the information that you
later see on the electronic
signals on the freeway. And also

102
00:12:37,333 --> 00:12:48,353
it can assess the speed limit.
If they see there's a very low
speed in some lane, they could

103
00:12:48,360 --> 00:12:50,580
slow down the speed limit.

104
00:12:53,660 --> 00:12:58,920
So in order to configure 
the devices to access them
there is a Windows software

105
00:12:58,920 --> 00:13:03,960
that basically we have over
here.

106
00:13:06,940 --> 00:13:13,480
So actually it's in Flash,
it's very easy to decompile.
You get the source code,

107
00:13:13,480 --> 00:13:20,120
You get the hard coded root
credential for the access point. 
But that's a local attack vector 

108
00:13:20,120 --> 00:13:26,540
for the internal network so 
I didn't go that way. And so
you connect to the access point

109
00:13:26,540 --> 00:13:32,875
with this software and then you
can access the sensors, too. And
you can configure them, install

110
00:13:32,875 --> 00:13:41,833
update firmware, et cetera. And
then you have some server
software that you can use to collect

111
00:13:41,833 --> 00:13:48,958
all of the information from 
different access points from
the different intersections, et cetera.

112
00:13:48,958 --> 00:13:58,375
Also the vendor provides a SaaS
that allows you to connect to
any access point worldwide and

113
00:13:58,375 --> 00:14:05,915
look at some information and set
some specific configuration options.
I didn't test this because it is

114
00:14:05,920 --> 00:14:15,760
server-side and of course would
be illegal. So this is a diagram that 
shows the information from the 

115
00:14:15,760 --> 00:14:21,580
access point goes to a central 
location sometimes and then 
is distributed with a different

116
00:14:21,580 --> 00:14:25,520
traffic control system [inaudible]
or some place.

117
00:14:26,700 --> 00:14:32,540
So what are the vulnerabilities? 
Basically they don't have any 
encryption, all the wireless

118
00:14:32,540 --> 00:14:43,240
communication is cleartext. >>
[applause] >> This was interesting
because it took me a while to

119
00:14:43,240 --> 00:14:51,958
make this thing work because, I
don't know, it took me a while,
but when I made it work I saw

120
00:14:51,958 --> 00:14:58,158
there was no encryption I went
and I reported this vulnerability
through [inaudible]. I got

121
00:14:58,158 --> 00:15:04,738
information back from the vendor
saying that they do use encryption.
But I never saw it. So they were

122
00:15:04,740 --> 00:15:11,960
claiming that yes, they were doing 
encryption. The only paragraph I
mentioned earlier that I found in

123
00:15:11,960 --> 00:15:19,380
the user documentation was
the next one. So you can read
it there. So basically they said

124
00:15:19,380 --> 00:15:25,940
because the array information
doesn't carry any comments,
it's only data, they don't care.

125
00:15:25,940 --> 00:15:32,380
Because there is no opportunity
to attack. That's what I understand
because it's really difficult to

126
00:15:32,380 --> 00:15:37,640
understand what they tried to
say there, but that's the only
paragraph about security in the

127
00:15:37,640 --> 00:15:46,920
whole user manual. So when
I continued insisting that I 
wasn't seeing any encryption

128
00:15:46,920 --> 00:15:54,060
option in any place, that I wasn't
looking at the communication, 
there was no encryption, they 

129
00:15:54,060 --> 00:15:58,240
got back after many e-mails
with this answer. You can read it. >>

130
00:16:04,320 --> 00:16:11,820
[Laughter]  >> Right. It's
funny because the customers are
Government.  >> [Laughter].

131
00:16:11,820 --> 00:16:17,360
 >> And I don't know if it's
intentional or just a lie from
the vendor because the vendor

132
00:16:17,360 --> 00:16:24,200
was lying all the time, but this
is a really crazy answer. It
works at the sign, so there is

133
00:16:24,200 --> 00:16:37,200
no issue there.  So the other 
issue is no authentication. >>
[Laughter] >>. So nothing

134
00:16:37,200 --> 00:16:45,792
prevents an attacker to access a
sensor or to access a repeater. I
mean, access points are protected

135
00:16:45,792 --> 00:16:52,042
because you have to access them
from the internal network, but
sensors and repeaters can be

136
00:16:52,042 --> 00:17:03,333
accessed wirelessly and there is 
no protection mechanism. Also
the access point doesn't authenticate

137
00:17:03,333 --> 00:17:11,292
the sensor nor the repeater, so 
the access point gets any data 
that matched the protocol and matched

138
00:17:11,292 --> 00:17:20,625
the address of the sensor, then they
would just accept it as data and
trust it. So another issue is that the

139
00:17:20,625 --> 00:17:28,708
firmware updates are not signed,
encrypted at all. So basically
you can go and change the firmware

140
00:17:28,708 --> 00:17:31,508
of the sensor or the repeaters.

141
00:17:34,020 --> 00:17:46,040
So when I told all of this to the
vendor, well >> [laughter] >>
This is from our presentation from

142
00:17:46,040 --> 00:17:50,000
the vendor, when I was looking
at different documentation I
found a presentation and I said

143
00:17:50,000 --> 00:18:00,600
this is probably their protocol so
what they said to me when I
reported the issue was that they

144
00:18:00,600 --> 00:18:07,920
were encrypting and signing
the firmware in the next version
of the sensor. But what's the

145
00:18:07,920 --> 00:18:16,240
problem? The problem is these
sensors are buried in the road
worldwide, because of the

146
00:18:16,240 --> 00:18:25,000
security architecture is nonexistent
hopefully they update the firmware
with encryption in a secure way

147
00:18:25,000 --> 00:18:31,760
without actually changing the
sensor physically. I mean you 
are open to attack because you

148
00:18:31,760 --> 00:18:40,560
have to share the key in some 
way. Basically they will have to
do a physical replacement to 

149
00:18:40,560 --> 00:18:43,100
have a secure update.

150
00:18:44,880 --> 00:18:52,820
So let's see about the protocol
they used. So basically the 
standard 802.15.4 physical

151
00:18:52,820 --> 00:19:05,620
level. It's the same as ZigBee
other wireless protocols use.
It's very low rate. They choose

152
00:19:05,620 --> 00:19:14,660
this because it's very low
power consumption. And
it has 16 channels in 2.4 GHz.

153
00:19:14,667 --> 00:19:21,833
And they have their own protocol
which is the sensor are wireless
protocol, which is a kind of a

154
00:19:21,833 --> 00:19:30,413
media access protocol. Basically
it's a customization of the MAC
standard. It's very similar and it's

155
00:19:30,420 --> 00:19:40,800
used TMDA. So they divide
the timeframe in 64 slots so
the access point will tell to one

156
00:19:40,800 --> 00:19:49,020
sensor okay, you have to transmit
and listen at this time and so on
with every sensor. They do that to 

157
00:19:49,020 --> 00:19:55,200
avoid collisions and also to
optimize the power consumption
so the sensor doesn't need to be

158
00:19:55,208 --> 00:19:57,288
awake all the time.

159
00:20:01,520 --> 00:20:08,520
So sensors will only listen
and transmit on some specific
time slot, but the access point

160
00:20:08,520 --> 00:20:14,880
will get data at any time. You
can just send data to the access
point. It will get it and process it.

161
00:20:17,580 --> 00:20:26,160
So if there is no detection, there's
no car around then the sensor will
just send data every 30 seconds.

162
00:20:27,920 --> 00:20:33,740
The access points just
acknowledge when they get
detection data from the sensor.

163
00:20:33,740 --> 00:20:39,680
If there is not knowledge, then
the sensor will retransmit a few
times and then will get to sleep.

164
00:20:42,260 --> 00:20:50,000
So the basic packet structure is 
the following: the first two bytes 
are for the kind of packet

165
00:20:50,000 --> 00:21:01,220
The third byte is for the sequence
number. The sequence of packets
in its transmission. And the

166
00:21:01,220 --> 00:21:06,875
following two bytes are for the
address of the sensor because
the sensors are identified by

167
00:21:06,875 --> 00:21:14,515
these two bytes. So the access
point knows from where the data
is coming. And then it's the

168
00:21:14,520 --> 00:21:24,500
data part. So the frame header
is for the type of packet. And 
then there's a special in the 

169
00:21:24,500 --> 00:21:32,340
address part from the access 
point side. They use a special
byte which they call "color code"

170
00:21:32,340 --> 00:21:39,720
which is used so the sensors 
can know if they are getting
information from the right access

171
00:21:39,720 --> 00:21:46,340
point. Because the access point
doesn't have a specific address,
the sensors will know they are

172
00:21:46,340 --> 00:21:52,480
getting the right information
by the "color code". By the radio
channel and the "color code"

173
00:21:54,600 --> 00:22:03,060
So the data part is 4 to 50 
bytes. So the data that the
sensor sends is sometimes

174
00:22:03,060 --> 00:22:10,980
the battery level, the firmware
version, the detection of the
cars if there is traffic or not 

175
00:22:10,980 --> 00:22:17,160
and then from the access point
to the sensors and repeaters 
you get synchronization data,

176
00:22:17,160 --> 00:22:20,980
and also configuration 
information and also 
firmware updates.

177
00:22:24,320 --> 00:22:32,620
This is a sample packet from the
sensor to the access point. That
means there is no detection in

178
00:22:32,620 --> 00:22:40,380
any event, so basically they
transmit every 30 seconds. And
this is a slightly different

179
00:22:40,380 --> 00:22:43,840
packet which means there's a
detection of a car.

180
00:22:46,880 --> 00:22:53,720
This is also from the sensor
to the access point when they
send status information, and

181
00:22:53,720 --> 00:22:58,820
configuration information.
Sometimes you can query 
the sensors with the access

182
00:22:58,820 --> 00:23:04,580
point to know how they are
configured. So here they
send the firmware version,

183
00:23:04,580 --> 00:23:13,458
the channel, the physical
address that they get from the
factory that you can change, so

184
00:23:13,458 --> 00:23:19,667
they will send all this information.
And finally, in this sample packet
from the access point to the 

185
00:23:19,667 --> 00:23:24,940
this is used to synchronize the
sensor when they say okay, 
you transmit on this timing and

186
00:23:24,940 --> 00:23:27,000
you on this other timing, etc.

187
00:23:28,580 --> 00:23:35,620
So for the firmware, they provide
the firmware in a file which has
a proprietary format that looks

188
00:23:35,620 --> 00:23:44,660
this way. So the first two
bytes are the address for
the flash memory I think.

189
00:23:44,660 --> 00:23:51,580
They have the firmware twice.
I think they do it because when
the firmware is actually running

190
00:23:51,580 --> 00:23:56,900
in the device it's running at
some specific address so 
when it gets the update it will

191
00:23:56,900 --> 00:24:03,660
copy it to the alternate address
which is specified here. If it's
running at the first address it

192
00:24:03,660 --> 00:24:10,320
will copy the firmware update
to the other address and then
will reboot and change. Basically

193
00:24:10,320 --> 00:24:20,380
the security mechanism is just one
checksum at the end of each line,
which is a very simple checksum and

194
00:24:20,380 --> 00:24:29,480
then you have a general checksum
for all of the firmware which is 
8 bytes. So basically you change

195
00:24:29,480 --> 00:24:35,500
the firmware, you modify it and
then engineer the checksum
and that's it. Then you can update it.

196
00:24:35,500 --> 00:24:41,560
The packets for the firmware
update is very simple. You 
just upload the firmware to the

197
00:24:41,560 --> 00:24:48,800
access point, set the sensors
in firmware update mode
and then the firmware starts

198
00:24:48,800 --> 00:24:59,120
to be broadcast by the access point.
So basically they broadcast every
line of the file. You can see here--

199
00:25:21,060 --> 00:25:29,020
That's the file. It's just one line
as you can see there and that
is what it's broadcasting.

200
00:25:37,180 --> 00:25:42,600
So in order to do this research
I needed some hardware
because you have to sniff the 

201
00:25:42,600 --> 00:25:49,140
wireless communication and then
you have to be able to modify 
packets et cetera. So basically

202
00:25:49,140 --> 00:26:00,220
I got USB dongle for sniffing 
802.15.4 protocol which is this
device, which is very small.

203
00:26:04,140 --> 00:26:05,833
You can see it here.

204
00:26:07,500 --> 00:26:17,360
It's pretty cool. You just plug 
it in and it will start sniffing
with the software provided

205
00:26:19,580 --> 00:26:27,440
And then I got a programming
board, all fro Texas Instruments.
So you get the programming 

206
00:26:27,440 --> 00:26:32,940
board, you get the radio 
transceiver, and a sniffer.
Just plug the programming

207
00:26:32,940 --> 00:26:43,260
board by USB to the computer
and then you have the framework
to program it, which is the IAR

208
00:26:43,260 --> 00:26:51,200
embedded workbench IDE. 
Then the smartRF studio and 
the packet sniffer software.

209
00:26:51,200 --> 00:26:59,980
We can see the software, this
is for sniffing. So you can see
just run the program and you 

210
00:26:59,980 --> 00:27:06,540
will start getting the packets.
These are the packets from the
access point to the sensor.

211
00:27:06,540 --> 00:27:11,840
Here you can see the data.
And if you know the protocol
you know it's cleartext because

212
00:27:11,840 --> 00:27:16,060
all of the information is just there,
the address and the options.

213
00:27:18,600 --> 00:27:25,375
It's pretty simple. Just look at the
type of protocol you want to
capture and then set up the

214
00:27:25,375 --> 00:27:35,095
radio channel here and start
sniffing. And then with the board
you have the RF studio, which is

215
00:27:35,100 --> 00:27:45,700
pretty cool, you just choose the
right transceiver and you can
manually craft packets. You can

216
00:27:45,700 --> 00:27:55,580
also sniff packets, too. You just
type a complete packet and you
can just send one or 100. And

217
00:27:55,583 --> 00:28:06,542
finally, the software for
programming the device is just
coded in C and you can upload

218
00:28:06,542 --> 00:28:11,102
the firmware and you can debug
and test. It's pretty simple.

219
00:28:18,860 --> 00:28:24,420
So what's the impact? So
the vendor says there are 
200 thousand sensors

220
00:28:24,420 --> 00:28:33,180
worldwide, most of them in the 
US. I would say, based on my
research, maybe 80% or 70%

221
00:28:33,180 --> 00:28:40,300
are in the US. And then you
have repeaters also. I have 
seen the prices of the sensors

222
00:28:40,300 --> 00:28:49,920
Each sensors is $500, $600,
the access point is $4000,
and the repeaters are $1000

223
00:28:49,920 --> 00:28:56,960
or more. So we're talking 
about $100 million or more
worth of equipment that 

224
00:28:56,960 --> 00:29:06,120
probably can be bricked.
So you can see there's
a huge money impact here.

225
00:29:07,640 --> 00:29:13,940
Then of course, you can cause
traffic jams because you can
directly influence the traffic 

226
00:29:13,940 --> 00:29:19,020
control system because you can
lie to the system. You can send
fake data and say there's a lot

227
00:29:19,020 --> 00:29:24,020
of traffic here or there isn't any
traffic there. Or you can say
there's no traffic and in fact

228
00:29:24,020 --> 00:29:33,720
there is a lot of traffic. So
you can cause a big mess. I
remember a years ago there was a

229
00:29:33,720 --> 00:29:41,020
conflict with Los Angeles
Department of Transportation
over the transport traffic

230
00:29:41,020 --> 00:29:48,740
machinery and a couple of them
had 2 or 4 intersections, but
they were the main intersections

231
00:29:48,740 --> 00:29:56,660
of Los Angeles and they
created a chaos for 2 days just
hacking 2 or 4 intersections.

232
00:29:56,660 --> 00:30:03,640
Because, you know, when there's
a problem at the intersection,
it propegates over the other

233
00:30:03,640 --> 00:30:10,560
intersections and if they are
the main of the city, then you
have a big mess. Of course, it

234
00:30:10,560 --> 00:30:15,580
depends on the configuration
of the traffic light or the traffic
controller because they can 

235
00:30:15,580 --> 00:30:22,560
have different configurations. So
you can have a simple accident
or you can have a really tragic

236
00:30:22,560 --> 00:30:27,700
accident because, you know
when people see they are
waiting at the red light and the

237
00:30:27,700 --> 00:30:34,620
red light doesn't change and you
are there one minute. Okay, one
minute is fine. Two minutes is just

238
00:30:34,620 --> 00:30:42,080
not so fine. More than two
minutes, the cars will try to
go anyway. And in that way,

239
00:30:42,080 --> 00:30:51,960
you get accidents. So what
the U.S. Department of
Transportation said, they said

240
00:30:51,960 --> 00:31:01,240
that sensors and signal failures
increase motorist time and
delays, making accidents. This

241
00:31:01,250 --> 00:31:11,625
is what the U.S. DOT says. Not
me. I have an issue with the
vendor because with the

242
00:31:11,625 --> 00:31:18,585
communication, what they get
back from the vendor was lie.
Because I said there is no 

243
00:31:18,585 --> 00:31:24,305
encryption. And they came
back saying yes, there is. I 
said there is no authentication

244
00:31:24,305 --> 00:31:30,420
and they came back saying
yes there is. So they were 
lying and saying really stupid

245
00:31:30,420 --> 00:31:38,460
things. So I had a conflict
because I did the testing at
home using these devices

246
00:31:38,460 --> 00:31:45,080
which is a nonproduction
system, so I don't like to
make a statement saying,

247
00:31:45,083 --> 00:31:50,823
okay, this devices are insecure
and maybe when you go to a
production side you see

248
00:31:50,823 --> 00:31:54,903
that the configuration is
different or they may have
another option and what you

249
00:31:54,903 --> 00:32:05,903
found is completely inaccurate.
So what I did was get the
devices in my backpack and

250
00:32:05,903 --> 00:32:12,083
made them portable because
the access point by default 
is power over ethernet so I got

251
00:32:12,083 --> 00:32:20,143
help and made it power over
USB and got it connected to
a portable battery supply and

252
00:32:20,143 --> 00:32:28,700
then I connected it to the 
portable Wi-Fi router so I
put the access point in my

253
00:32:28,700 --> 00:32:37,840
backpack and I could access
wirelessly the access point from
my notebook. So I went to

254
00:32:37,840 --> 00:32:45,760
Seattle, New York. The problem
in Seattle when I tested, it was
a testing site. It wasn't a production

255
00:32:45,760 --> 00:32:52,880
site, so I wasn't very sure. The
same in New York. But when I
went to DC, which is a big

256
00:32:52,880 --> 00:33:00,500
deployment there, it was a
production site, so I did some
testing there that I will show now.

257
00:33:02,420 --> 00:33:12,320
So this is New York. It was
good because I was next to
the New York Police Traffic.

258
00:33:12,320 --> 00:33:22,100
>> [Laughter]. >> So here
you can see the marks from the
sensors in the street. Those

259
00:33:22,100 --> 00:33:36,640
black circles are the marks and
then on the pole, here is the
access point. And this is just, like

260
00:33:36,640 --> 00:33:44,760
three blocks away from the
Empire State. So there I
was pointing with my backpack

261
00:33:44,760 --> 00:33:51,380
 to the sensor because of
the directional antenna, so I
was pointing with my backpack

262
00:33:51,380 --> 00:33:59,020
 to the sensor.  >> [Laughter].
 >> And I was able to access
the sensor. I was able to see

263
00:33:59,020 --> 00:34:05,340
the configuration of them. And
if I wanted, I can could have
compromised them, changed

264
00:34:05,340 --> 00:34:17,680
the firmware. Which I didn't
do it. >> Laughter >> So there
is -- we see this later, this is the

265
00:34:17,680 --> 00:34:25,875
software from the vendor. I put
the access point in discovery
mode, which queried for some

266
00:34:25,875 --> 00:34:35,542
specific channel. So the sensor
started to appear on the
graphical interface. This is a

267
00:34:35,542 --> 00:34:45,602
line, you can see green, that's
my sensor which I carried in my
backpack. But then, there you

268
00:34:45,602 --> 00:34:50,502
can see three more sensors that
were there in the road.

269
00:35:03,480 --> 00:35:05,480
Let's see if I can find the --

270
00:35:15,660 --> 00:35:25,160
Okay that's enough. I wanted
to show that I was like 5 blocks
from the Empire State Building.

271
00:35:25,160 --> 00:35:34,020
So I went to DC and just
when we get out there to
Union Station, I found a nice

272
00:35:34,020 --> 00:35:40,260
surprise because I didn't know
there was something there.
So I was looking around outside

273
00:35:40,260 --> 00:35:47,400
Union Station and I think it was
around the exit ramp and we
found some sensors there. There

274
00:35:47,400 --> 00:35:53,360
you can see the mark of the
sensor. Because maybe if you
have been there, it is a really

275
00:35:53,360 --> 00:35:59,840
complex intersection. There are,
I don't know, how many streets
there. And there you can see the

276
00:35:59,840 --> 00:36:05,632
access point. So with that
configuration, it's for
detecting that a car is waiting

277
00:36:05,640 --> 00:36:13,340
there at the ramp trying to
exit, so it would put faster the
green light or if it doesn't detect

278
00:36:13,340 --> 00:36:18,280
any car it won't give a green
light. So I was, you can see,
pointing my backpack to the

279
00:36:18,280 --> 00:36:26,940
sensors >> [laughter] >>
And there I was able to
access them just to look

280
00:36:26,940 --> 00:36:33,860
at the configuration. Basically
capturing the wireless data
and displaying it in a graphical

281
00:36:33,860 --> 00:36:40,740
interface but because the 
software knows how to process
the data and give it meaning

282
00:36:40,740 --> 00:36:47,520
I can see all the options, the
configuration options et cetera.
So that is the traffic I was seeing

283
00:36:47,520 --> 00:36:52,580
from the access point to the
sensor and from the sensor
to the access point.

284
00:36:54,000 --> 00:37:05,300
But there is another part where
we went to do some testing,
there was a lot of sensors there

285
00:37:05,300 --> 00:37:12,420
and there was a repeater too.
Here you can see every line
is a sensor expect one which

286
00:37:12,420 --> 00:37:20,680
is a repeater. These are all
sensors and this one is the
repeater. So by just clicking

287
00:37:20,680 --> 00:37:26,840
one I can access them, change
the configuration if I want,
change the firmware, do anything.

288
00:37:26,840 --> 00:37:29,480
Change the radio channel.

289
00:37:30,400 --> 00:37:31,860
And this was--

290
00:37:34,760 --> 00:37:41,680
As you can see two blocks
from the Capitol. I mean there
was some weird people, some

291
00:37:41,680 --> 00:37:48,580
spooks, but we didn't get
any problems. It was weird. We
weren't paranoid because we

292
00:37:48,580 --> 00:37:55,320
weren't doing anything illegal
but it was weird. There was the
access point and here in the

293
00:37:55,320 --> 00:38:07,800
street, the mark of the sensors,
and there was a repeater here.
So in this way I could prove

294
00:38:07,800 --> 00:38:15,420
that I was right with what I was
saying, what I found.

295
00:38:17,920 --> 00:38:24,280
So what are the possible attacks?
Basically you can do a denial
of service which is not cool

296
00:38:24,280 --> 00:38:32,060
So you can disable the sensors,
change the frequency channel,
change the firmware, probably

297
00:38:32,060 --> 00:38:39,560
brick them, send fake packets.
[inaudible] will send fake traffic
detection data because if you

298
00:38:39,560 --> 00:38:45,680
know how the protocol works,
how the device communicates
you can just send fake data.

299
00:38:45,680 --> 00:38:54,940
And in order to do that I built
a special device. I will show you
later. So basically just send

300
00:38:54,940 --> 00:39:00,440
fake data saying okay, there
is a lot of traffic here but 
there isn't. Like I already said.

301
00:39:02,520 --> 00:39:08,780
So in order to launch an attack
in the real world it's kind of easy
because there is a lot of vendor

302
00:39:08,780 --> 00:39:12,900
presentations, documentation,
press releases where they say
okay we are implementing this

303
00:39:12,900 --> 00:39:22,940
in New York, in DC. There is
a lot of public documents also
from the Government. And the 

304
00:39:22,940 --> 00:39:30,240
cool part is you can specifically
know the coordinates of the 
devices using Google Street View.

305
00:39:30,250 --> 00:39:39,300
>> [Laughter].  >> Here are a
couple of repeaters and here are
the sensors. This is New York.

306
00:39:39,300 --> 00:39:47,540
So you know specifically the
GPS coordinates where they are
located. This is really cool for

307
00:39:47,540 --> 00:39:53,120
an attack. So basically on 
vendor specification you have
to be at least 1000 feet

308
00:39:55,300 --> 00:40:01,500
away in order to attack them.
To be able to connect. So one
option to attack is being on-site.

309
00:40:01,500 --> 00:40:10,240
Being near the devices so you
can send fake data. So what I
did, building this, which I 

310
00:40:10,240 --> 00:40:22,760
programmed a sample proof-
of-concept which is cheap. I 
can show you here.

311
00:40:24,660 --> 00:40:33,820
So basically, simple. You have
an LCD screen so you can put
a menu there so I put a menu

312
00:40:33,820 --> 00:40:42,700
to different attacks. One is
for creating fake sensors, the
other one is to send fake data

313
00:40:42,700 --> 00:40:50,220
I did some ASCII art, maybe 
you can see. >> [Laughter] >>

314
00:40:52,640 --> 00:41:00,500
And then I can also send 
fake data about configuration.
I will show you now.

315
00:41:04,680 --> 00:41:13,220
So I have here the vendor
software, so I will connect
to the--

316
00:41:16,220 --> 00:41:23,020
I'm connect to the access
point now. So basically here
in every line you get the 

317
00:41:23,020 --> 00:41:27,940
devices which are the sensors
and repeaters listed there.
So you can see there isn't

318
00:41:27,940 --> 00:41:36,600
any device there. There is just
one, my sensor which I have.
So now I will create a fake sensor.

319
00:41:36,600 --> 00:41:40,880
In a real attack it would be 
replacing an existing one,
maybe the same name and 

320
00:41:40,880 --> 00:41:48,700
just some new fake data. So I'll
push this button here and you will
see new sensors being created.

321
00:41:51,220 --> 00:42:00,540
So you can see I'm sending
fake data to the access point
and it's accepting it as valid data.

322
00:42:01,520 --> 00:42:11,640
There are a couple of columns
here. Which is that there is a
car present at the sensor. And

323
00:42:11,640 --> 00:42:24,920
the other is the number of cars
being detected. So now what I
will do is send fake data about

324
00:42:24,920 --> 00:42:33,760
car detection, about traffic. So
I push "now" and you will see
here the detection number to be

325
00:42:33,760 --> 00:42:43,940
increased a lot.  >>
[Laughter]. [Applause].  >> So
basically the access point is

326
00:42:43,940 --> 00:42:51,160
taking this data which is fake,
it's made up, and processing it.
So this is the data that would

327
00:42:51,167 --> 00:42:55,087
get the traffic control system
to make decisions.

328
00:43:03,100 --> 00:43:10,540
So if you don't want to be onsite
what you can do is just to program
a radio transceiver with a GPS,

329
00:43:10,540 --> 00:43:19,300
set up the coordinates of where 
the device is located and attach
it to a bus, or to a car and let it go.

330
00:43:19,300 --> 00:43:27,160
Here you have the map where the
buses go, so you can know where to
launch the attack automatically

331
00:43:27,167 --> 00:43:38,500
by the attached device. Another
option I tested and works is from
this guy using a drone. This is a new

332
00:43:38,500 --> 00:43:46,620
service where you can rent drones if
you don't have one. So in this case,
I attached this to my drone and

333
00:43:46,620 --> 00:43:55,280
make it fly at like 350 feet and
it worked. And when you have
light outside and you have a

334
00:43:55,280 --> 00:44:00,300
good antenna, you can go 1,000
feet or more in the sky and
launch the attack. Another

335
00:44:02,280 --> 00:44:11,020
Another attack could be to do a
firmware update. So basically you
change the firmware and make a

336
00:44:11,020 --> 00:44:18,820
worm. It will propagate and infect
sensors that are near, or maybe
not near because the repeaters

337
00:44:18,820 --> 00:44:28,900
will propagate worm, too. When
you have the firmware compromised
there's no way to know if you

338
00:44:28,900 --> 00:44:38,280
have compromised or not unless
you look at the code and see.
But if you just use the

339
00:44:38,280 --> 00:44:42,700
functionality, you never know if
it's compromised or not.

340
00:44:44,240 --> 00:44:52,200
In this case of attack, maybe in 
the future you can know in
real-time using social media,

341
00:44:52,200 --> 00:44:59,180
GPS coordinates, pictures, et
cetera. You can search maybe
in FourSquare, people in NewYork

342
00:44:59,180 --> 00:45:06,472
right now and then compromise
their smartphone and from the 
smartphone launch an attack.

343
00:45:06,480 --> 00:45:11,580
Right now I think it's kind of
limited but if we are talking about
software defined radio or maybe

344
00:45:11,580 --> 00:45:19,400
a radio that can be modified also
by using this protocol you can have
someone else with his cell phone

345
00:45:19,400 --> 00:45:30,080
attacking this device. Another
kind of crazy attack, not my idea,
is basically because you can 

346
00:45:30,080 --> 00:45:37,180
fingerprint cars you can use
this as a trigger to a bomb.
So you fingerprint one car and

347
00:45:37,180 --> 00:45:44,780
use that fingerprint to reidentify
later a car at some intersection
and use that as a trigger to a bomb.

348
00:45:44,780 --> 00:45:49,700
So because this is in Washington DC
maybe you can fingerprint
Cadillac One. 

349
00:45:51,960 --> 00:45:59,200
My final conclusion is like
any field work guy like me,
I live in a small town,

350
00:45:59,200 --> 00:46:08,340
many miles from here, can get
these devices that are used in
other countries and hack them

351
00:46:08,340 --> 00:46:16,160
and then you want to hack the
U.S. or other countries, the
attack tools would cost you $100

352
00:46:16,167 --> 00:46:29,040
or less to build if you buy the
part and program it. It's cheap.
The Government is buying devices

353
00:46:29,040 --> 00:46:35,960
that are being used without
testing the security of them.
They are just assuming the

354
00:46:35,960 --> 00:46:40,500
crazy claims from the vendors
and they are putting it on critical
infrastructure and that is

355
00:46:40,500 --> 00:46:49,920
happening right now. And
finally, when we talk about
being smart, if you get devices

356
00:46:49,920 --> 00:46:57,280
like this that blindly trust the
data, then the city is not very
smart is. Kind of stupid.  >>

357
00:46:57,280 --> 00:47:09,720
[Laughter].  >> And finally, it
is cheap. I'm part of Build It
Secure.ly where trying to help

358
00:47:09,720 --> 00:47:15,792
the small vendors to improve the
security of IoT devices. And if
you don't know about this, you

359
00:47:15,792 --> 00:47:22,612
can check the site and there are
step‑by‑step instructions to
build secure products, et

360
00:47:22,620 --> 00:47:31,020
cetera. And that's it. I hope you 
liked it. >> [Applause] >>

