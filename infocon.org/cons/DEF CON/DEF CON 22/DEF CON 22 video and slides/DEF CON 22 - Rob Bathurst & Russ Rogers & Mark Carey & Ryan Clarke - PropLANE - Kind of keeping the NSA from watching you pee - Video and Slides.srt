1
00:00:00,125 --> 00:00:04,833
 >> All right. So we've got a
big group up here. We've got --
we've got Russ and Rob and LosT

2
00:00:04,833 --> 00:00:09,167
is going to be up here and Phorkus
is going to be working the
technical angle of things. So

3
00:00:09,167 --> 00:00:22,107
let's give these people a big
PartyTrack welcome. [Applause] >> Hello,
DEF CON. So it's about once per

4
00:00:22,107 --> 00:00:26,740
year I actually get to get on
stage that is not opening
ceremony or closing ceremony, so

5
00:00:26,750 --> 00:00:32,870
this is your one shot to get --
to get to watch me embarrass
myself publicly. >> No, it's

6
00:00:32,870 --> 00:00:41,080
not. >> My boss is in the
audience. >> She's right here.
>> Yes, she is. She's in the

7
00:00:41,083 --> 00:00:48,583
front row. Sorry, George. So
anyway, this talk's about the
prop lane. And we'll go into a

8
00:00:48,583 --> 00:00:53,003
little bit of the history. We'll
talk about the technology.
Everything we're going to talk

9
00:00:53,003 --> 00:00:59,620
about is public. We'll have all
the source code. We will have
all the schematics. You will be

10
00:00:59,625 --> 00:01:09,665
able to build everything that we
are showing you today on your
own. [Applause] >> They love you. >> Yeah.

11
00:01:09,667 --> 00:01:15,125
On top of that, we originally
built this on the DEF CON 20
badge because it uses a Parallax

12
00:01:15,125 --> 00:01:24,000
propeller chip. They're like,
yeah, Parallax. Kick ass. As it
turns out, this year's badge

13
00:01:24,000 --> 00:01:30,708
also uses the Parallax propeller
chip. And LosT was kind enough
to build out the board to make

14
00:01:30,708 --> 00:01:35,417
it really easy for you to build
shields for this. We may
actually design those and

15
00:01:35,417 --> 00:01:41,708
release the schematics for those
as well. But everybody that has
been at DEF CON, either at DC 20

16
00:01:41,708 --> 00:01:46,208
or this year, should be able to
build these devices and carry
around the mobile encryption

17
00:01:46,208 --> 00:01:51,000
device. You can modify the
encryption. You can modify the
software. And we've got a list

18
00:01:51,000 --> 00:01:57,333
of ideas that we want to see you
guys do at the end. All right?
So I did not come up with the

19
00:01:57,333 --> 00:02:02,250
title. I will give that dubious
honor to Rob. >> Who doesn't
love sensationalist headlines?

20
00:02:02,250 --> 00:02:09,208
>> So if you were here when
General Alexander was here, he
made us a lot of promises. He

21
00:02:09,208 --> 00:02:13,750
talked a lot of crap. He -- he
lied to a lot of us about
certain things and what was

22
00:02:13,750 --> 00:02:17,542
going on. And then in the press
a couple weeks ago, we saw that
he's trying to make a million

23
00:02:17,542 --> 00:02:22,708
dollars a day releasing all
these great ideas for securing
the Internet and transactions

24
00:02:22,708 --> 00:02:28,375
and stuff. So this talk ended up
being more timely than we
intended. Now, before I get too

25
00:02:28,375 --> 00:02:37,995
far, how many of you know about
Hackers for Charity? [Applause] All right.
And how many of you have seen

26
00:02:38,000 --> 00:02:46,458
Eddie Mize in the contest area
or the artwork that he does? [Cheering]
All right. So Eddie has drawn a

27
00:02:46,458 --> 00:02:52,250
special piece for Hackers for
Charity. And this is going up
for auction. You can place your

28
00:02:52,250 --> 00:02:56,333
bids at Eddie's booth in the
contest area. He doesn't keep
any of the money. And if you

29
00:02:56,333 --> 00:03:02,653
know Eddie, you'll know that
that's the absolute truth. So
this is an original piece, and

30
00:03:02,660 --> 00:03:07,620
it will go to whoever has the
highest bid. So please help
support Hackers for Charity.

31
00:03:07,625 --> 00:03:14,625
Help support Eddie, and go over
there, please. All right. So
let's get on with introductions.

32
00:03:14,625 --> 00:03:20,625
I'm Russ. I'm chief of
operations at DEF CON. I am
helping run the show, but really

33
00:03:20,625 --> 00:03:29,292
it runs itself and I get to walk
around and do this. So over here
we have Rob, Evil Rob. This

34
00:03:29,300 --> 00:03:34,240
concept of this kind of a device
was originally his idea. And
we'll get into that a little bit

35
00:03:34,250 --> 00:03:40,375
more. You know Ryan Clark, the
LosT boy. He creates all the
badges. And then Mark Carey, or

36
00:03:40,375 --> 00:03:46,125
Phorkus, who has done a large
part of the software development
of this. Now, the one part of

37
00:03:46,125 --> 00:03:50,208
this team that is not up on this
stage is you. And you'll
remember I said a few minutes

38
00:03:50,208 --> 00:03:54,292
ago that we have a list of
projects at the end of this
slideshow, at the end of the

39
00:03:54,292 --> 00:04:00,500
demo and everything, where we
want to see you guys build this
out and bring it to us next

40
00:04:00,500 --> 00:04:06,875
year. All right? So take that as
your challenge. We've made it as
easy as possible for you guys to

41
00:04:06,875 --> 00:04:13,958
do this and get involved. So
let's talk a little bit about
crypto. How many of you are

42
00:04:13,958 --> 00:04:18,458
actually into crypto, that's
what you work with? All right.
So you're the people I cannot

43
00:04:18,458 --> 00:04:24,750
have a conversation with. All
right? They can. I'm not the one
you want to talk to about that.

44
00:04:24,750 --> 00:04:32,542
You know, you go from everything
is simple, like a Caesar cipher
that was used thousands of years

45
00:04:32,542 --> 00:04:38,542
ago, really easy for us, now you
can do it with pencil and paper,
right, and then you get more

46
00:04:38,542 --> 00:04:43,902
complex as we get -- as we move
through history, past the Enigma
machine that was used during the

47
00:04:43,902 --> 00:04:57,122
war, up to AES that NSA adopted.
So we're actually using AES on
this device. And I don't want to

48
00:04:57,125 --> 00:05:02,167
steal any of their thunder, so
I'm trying to be careful about
what I say. But suffice it to

49
00:05:02,167 --> 00:05:06,542
say, we've built enough
flexibility for you guys to be
able to make changes to the

50
00:05:06,542 --> 00:05:12,792
software, add modules and change
the functionality. And we really
want to see some good stuff come

51
00:05:12,792 --> 00:05:19,972
out of this. Some of the things
that kind of were the impetus
for this, the whole NSA vacuum,

52
00:05:19,980 --> 00:05:27,540
that was actually a big part of
what we're doing here. And so we
figured what's the best way to

53
00:05:27,542 --> 00:05:32,792
do this? We can port all of our
research and code over to a
microcontroller that most people

54
00:05:32,792 --> 00:05:37,333
have. And since we used it this
year as well, you guys are in
good shape, right, because

55
00:05:37,333 --> 00:05:42,953
everybody has a badge either
from DC 20 or this year, I'm
hoping. And if you got temp

56
00:05:42,960 --> 00:05:50,200
badges this year, you should
have gotten a DC 20 badge
because we had some extras. All

57
00:05:50,208 --> 00:05:57,833
right. Who's willing to stand up
and say that Tor is safe now?
You can almost hear the

58
00:05:57,833 --> 00:06:06,033
crickets. It's amazing. Again,
we need safe ways to
communicate. You know, Darknets,

59
00:06:06,042 --> 00:06:09,958
we've got a lot of people
creating their own Darknets.
This is another way to do it. If

60
00:06:09,958 --> 00:06:14,398
we could get everybody that's
been at these last two
conferences to build these

61
00:06:14,400 --> 00:06:20,920
things out, we'd have about 25
to 30,000 of these things
floating around out there.

62
00:06:20,920 --> 00:06:30,380
That's a lot of secure
communication. So I'm going to
let Rob take this. The whole

63
00:06:30,380 --> 00:06:35,792
concept of this came from -- we
were actually funded for a
project, and I'll let him talk

64
00:06:35,792 --> 00:06:40,458
about his ideas and stuff. And
we were sitting there talking,
and I said, you know, it would

65
00:06:40,458 --> 00:06:45,667
be really cool if we could port
that code over to the propeller
chips so we could put it on the

66
00:06:45,667 --> 00:06:51,875
badges. And it all went to hell
from -- in a hand basket from
there. So I think you'll like

67
00:06:51,875 --> 00:06:57,375
the show. The traffic is
running. If you can see the
blinky lights, we're -- we have

68
00:06:57,375 --> 00:07:04,833
a sniffer going. We can see the
encrypted traffic going. So our
demo should work just fine. Keep

69
00:07:04,833 --> 00:07:08,667
your fingers crossed. There's
very few people that are willing
to tread that ground at DEF CON.

70
00:07:08,667 --> 00:07:15,920
But I think we're in good shape.
Here's Rob Batherst, and I'll
let him move. >> All right.

71
00:07:15,920 --> 00:07:22,917
Thank you, Russ. [Applause] I assume you
all can hear me okay. Who's
sleeping from after lunch?

72
00:07:22,917 --> 00:07:28,792
Anyone? Anyone? Or was it
breakfast, if you're doing it
right? So, you know, we're going

73
00:07:28,792 --> 00:07:34,042
to talk a little bit about the
impetus for this and why we did
it. So, you know, I spent some

74
00:07:34,042 --> 00:07:40,060
time in the government. And I
decided that the government has
these, you know, really neat

75
00:07:40,060 --> 00:07:44,458
ways they do things when it
comes to encryption. And they
don't tend to relay on -- rely

76
00:07:44,458 --> 00:07:49,958
on software as we traditionally
think of it from a VPN
perspective or a VPI tech or an

77
00:07:49,960 --> 00:07:57,280
SSL. They use, actually, a
hardware type of device to
protect that communication end to end.

78
00:07:57,280 --> 00:08:00,620
so I was sitting there, and I
was like, you know, why do we
have all of these, you know,

79
00:08:00,625 --> 00:08:05,833
really just absolute shit VPN
clients that never work and
always need configuration

80
00:08:05,833 --> 00:08:10,583
changes and the concentrator is
down and everything else? I was
like, you know, what's a good

81
00:08:10,583 --> 00:08:16,250
way that we can actually provide
this type of system to the
masses to make it easy to get

82
00:08:16,250 --> 00:08:21,500
into your home or your office or
communicate with Russ or LosT or
any of us and, you know,

83
00:08:21,500 --> 00:08:26,625
actually have it be moderately
secure? Depending on the
platform, maybe not fast, but

84
00:08:26,625 --> 00:08:34,333
moderately secure. You know,
like I said, we did this because
we want our privacy to stay

85
00:08:34,333 --> 00:08:37,833
in our hands. We want to make
sure what we're saying is
protected and we only show it to

86
00:08:37,833 --> 00:08:43,458
those who actually should be
able to see it. Luckily enough,
we got funding -- what's that?

87
00:08:43,458 --> 00:08:48,083
Did you say something? Did you
interrupt me? >> I didn't say
anything. >> You did. You did.

88
00:08:48,083 --> 00:08:54,750
They're agreeing with me. So,
you know, we actually got
funding from the Cyber Fast

89
00:08:54,750 --> 00:09:01,417
Track program, which is an
amazing DARPA program, that
allowed us to actually take the

90
00:09:01,417 --> 00:09:05,958
time to research these
particular aspects. And if you
didn't know anything about it or

91
00:09:05,958 --> 00:09:11,042
the projects that came from it,
I would totally take some time
and go on Google and look for

92
00:09:11,042 --> 00:09:15,167
the Cyber Fast Track and see
what came out of it because some
of these projects are absolutely

93
00:09:15,167 --> 00:09:20,000
amazing. So what's been
happening since then? So about
two years ago when we actually

94
00:09:20,000 --> 00:09:25,917
produced this for DARPA, we did
a considerable amount of work on
the key management aspects and

95
00:09:25,917 --> 00:09:30,833
everything else that goes into
managing a crypto system. And
for those of you who have not

96
00:09:30,833 --> 00:09:36,458
had to deal with IPSec crypto,
that is one of the biggest
challenges, is dropped keys on

97
00:09:36,458 --> 00:09:41,250
ins and people trying to
communicate back and forth. And
in a large organization, it can

98
00:09:41,250 --> 00:09:48,917
take you five or six admins just
to manage all of your site to
site VPN connections. But that

99
00:09:48,917 --> 00:09:55,292
is a whole other talk. So, you
know, what's our approach here?
We have the cheap way, which is

100
00:09:55,292 --> 00:09:59,792
what we're looking at. It's a
propeller chip, which Ryan was
kind enough to provide, or an

101
00:09:59,792 --> 00:10:04,917
ARM chip if we wanted to do
custom development that we
already started to work on. Then

102
00:10:04,917 --> 00:10:10,417
we have the -- the -- you know,
is it fast? Well, the propeller
is not fast. It runs 80

103
00:10:10,417 --> 00:10:16,000
megahertz on a single course. So
it's not very fast. Then we have
the ARM, which, you know, ARM

104
00:10:16,000 --> 00:10:20,667
has, you know, quad core
processors now. They can be very
fast from a crypto perspective,

105
00:10:20,667 --> 00:10:26,833
but they have a theoretical
limit. And then you have the
FPGA or the ASIC, which are

106
00:10:26,833 --> 00:10:34,250
custom made to be extremely fast
because that's all they do. So,
you know, some of the neat

107
00:10:34,250 --> 00:10:41,042
advantages are the dual-cored
FPGAs or ASICs that also have an
ARM core on them. But, you know,

108
00:10:41,042 --> 00:10:45,542
look into those. We're like,
okay, what's the best tradeoff
here? We can make a custom ARM

109
00:10:45,542 --> 00:10:49,458
board, but then people would
have to get ARM boards. And
we're like, you know what? Let's

110
00:10:49,458 --> 00:10:56,958
just use the propeller chip
that's on the badge. So the keys
here are simple to use, simple

111
00:10:56,958 --> 00:11:03,042
key exchange that we'll go into,
and then an on/off switch. The
encryption system's running. The

112
00:11:03,042 --> 00:11:09,042
encryption still's not running.
The encryption system may not be
running, no, it's on or it's

113
00:11:09,042 --> 00:11:16,167
off. It works or it doesn't. And
I like stupid simple, if you get
to know me. So about this

114
00:11:16,167 --> 00:11:25,035
project in particular, we have
the parts, a DC 20 badge or a 22
badge, which has a Parallax

115
00:11:25,042 --> 00:11:34,320
propeller chip on it, 16 user I/O
pins, a SPI bootRAM, a TTL
serial-to-USB, transceiver and

116
00:11:34,320 --> 00:11:42,000
whatever else you want to cram
onto it. So that's what you get
just with the badge. Then with

117
00:11:42,000 --> 00:11:45,750
the additional stuff that we
added, we added the Ethernet
transceivers, which it is very

118
00:11:45,750 --> 00:11:50,750
difficult to do wired
communication without Ethernet
transceivers. But if you have a

119
00:11:50,750 --> 00:11:56,583
way, please let me know. Anyone?
Anyone? No. All right. So it's a
microchip BNC, 28 J60. I don't

120
00:11:56,583 --> 00:12:00,750
expect you to remember this,
which is why the slides and
everything else will be public.

121
00:12:00,750 --> 00:12:08,030
It's a 3.3 or 5 volt, static Ram
buffer. And if you don't use
this particular model that we

122
00:12:08,030 --> 00:12:14,500
have that we wrote the driver
for, you'll have to write your
own. So good luck and Godspeed.

123
00:12:14,500 --> 00:12:17,958
[Inaudible]

124
00:12:17,958 --> 00:12:21,167
>> Yeah, these are, like, two
bucks if you get them from
China. They're super cheap. >>

125
00:12:21,167 --> 00:12:29,707
EBay. >> So the key store is an
SD card. It's very simple. Go to
Fry's, super cheap. The only

126
00:12:29,708 --> 00:12:32,792
thing we had to do from a custom
hardware perspective that was
one of those

127
00:12:32,792 --> 00:12:40,352
if-I-had-all-day-and-a-pile-of-c
ocaine type of things, was
create a custom VRU. We have the

128
00:12:40,360 --> 00:12:45,120
instructions for it. They're
actually very easy to make. It's
just a voltage regulator. And

129
00:12:45,125 --> 00:12:49,750
like I said, we'll have that up
there. So what you see up here
is a much better version of

130
00:12:49,750 --> 00:12:55,458
this, which is what it started
as, okay, a piece of metal, a
badge, some FYEs and everything

131
00:12:55,458 --> 00:13:01,208
else. You know, props to Phork.
Just give this man a hand. He
wired everything up and made

132
00:13:01,208 --> 00:13:06,458
these rigs and everything so you
could see them. [Applause] >> Thank you,
thank you. And one safety

133
00:13:06,458 --> 00:13:10,500
warning -- >> I didn't say you
could talk yet. >> I know. I
just have to give the safety

134
00:13:10,500 --> 00:13:15,167
warnings. If you're ever
drilling a printed circuit board,
remember that if you go too

135
00:13:15,167 --> 00:13:20,417
fast, that smoke causes
mesothelioma and it will kill
you. >> You know this isn't

136
00:13:20,417 --> 00:13:27,837
public radio, right? >> This is
my best Barry White knockoff.
What can I say? >> All right. So

137
00:13:28,750 --> 00:13:33,125
moving on, you know, I'm going
to let Ryan touch on this, but,
you know, the high level here is

138
00:13:33,125 --> 00:13:36,208
when you're dealing with these
propeller chips which, you know,
may or may not help you when

139
00:13:36,208 --> 00:13:40,792
you're doing stuff with the
badges, is Spin, which is
basically the high level

140
00:13:40,792 --> 00:13:47,500
programming language. You can go
to learn.parallax.com to read
all about it, and then the PASM,

141
00:13:47,500 --> 00:13:52,375
which is actually an assembly 
version. It's faster. There's
simulators out there called,

142
00:13:52,375 --> 00:13:58,125
like, Gear. You know, they're
great. I do recommend looking
them up, great tutorials, lots

143
00:13:58,125 --> 00:14:04,520
of people talking about them. So
fair warning about this badge,
when you go to pull it off github, we

144
00:14:04,520 --> 00:14:12,292
had to use a specialized SPI cog
to be able to do what we did. It
runs in transparent bridging, so

145
00:14:12,292 --> 00:14:18,292
attempting to figure out what's
happening from the side where
the encryption's running is very

146
00:14:18,292 --> 00:14:24,292
hard to do. And then for our
particular implementation that
we'll be making public, it uses

147
00:14:24,292 --> 00:14:32,612
a 128 key. It can use 256.
However, it will go very, very,
very slow because the propeller

148
00:14:32,625 --> 00:14:38,750
is not very fast. Yes, sir? >>
Hey, Ryan. Can you answer a
question for me? If they use

149
00:14:38,750 --> 00:14:43,417
PASM instead of Spin, it will
actually run faster, right,
because the code's not having to

150
00:14:43,417 --> 00:14:48,417
go through an interpreter? >>
Yes and no. It depends on how
they write the code. I mean, you

151
00:14:48,417 --> 00:14:54,042
can write really awful code, and
then it's not going to be fast.
>> Okay. >> And actually, as a

152
00:14:54,042 --> 00:14:59,417
caveat to that, the -- >> Public
radio time. >> -- pieces of this
that are speed intensive are

153
00:14:59,417 --> 00:15:05,500
already written in PASM. So the
encryption routines are in PASM.
The driver code, which actually

154
00:15:05,500 --> 00:15:11,125
communicates on SPI is already
on PASM. So most of the speed
sensitive stuff was actually not

155
00:15:11,125 --> 00:15:15,250
written by me. They were written
by open source driver folks and
then modified to actually work

156
00:15:15,250 --> 00:15:21,125
the way they were supposed to.
>> Open source does not mean
quality. I'm warning you right

157
00:15:21,125 --> 00:15:26,792
now before you go look at our
code, okay? You know, so those
-- those are some fair warnings

158
00:15:26,792 --> 00:15:33,412
with what we're doing. So it's
not a -- it's 256, though it's
capable, it's just 128 for speed

159
00:15:33,420 --> 00:15:38,500
purposes. So why crypto works,
you know, the two things we tend
to talk around, and I'll just --

160
00:15:38,500 --> 00:15:43,167
high level again, is a hash
versus encryption. You know,
you're supposed to be able to do

161
00:15:43,167 --> 00:15:46,867
a symmetric encryption. Do I
have the key? Do you have the
key? Yay. It comes out the other

162
00:15:46,867 --> 00:15:51,267
side, is what it should be.
Whereas, in theory, you're not
supposed to be able to figure

163
00:15:51,267 --> 00:15:56,240
out what is on the other side of
a hash. You know, crypto can be
defeated. You know, this is the

164
00:15:56,250 --> 00:16:00,000
general warning to everybody.
You know, crypto, you can lose
your symmetric key, which means

165
00:16:00,000 --> 00:16:04,417
anybody who gets that particular
segment can read it. You can
have compromised PK inserts in

166
00:16:04,417 --> 00:16:10,792
the sense of, you know, public
key infrastructure. They could
brute force the entire key space

167
00:16:10,792 --> 00:16:15,250
and just wait to find the one
that matches your segment. And
the number one killer in

168
00:16:15,250 --> 00:16:18,958
everything -- and this is my
fair, fair warning. Go read the
code and look at it yourself.

169
00:16:18,958 --> 00:16:23,958
You know, we built this for fun.
It was a side project. You know,
we weren't paid to do this

170
00:16:23,958 --> 00:16:28,833
particular thing -- is poor
implementation. Poor
implementation in key control,

171
00:16:28,833 --> 00:16:33,583
poor implementation in memory
management, poor implementation
in the actual S blocks within the

172
00:16:33,583 --> 00:16:39,417
code. You know, it's only as
secure as, you know, it's
reviewed and trusted to be. So

173
00:16:39,417 --> 00:16:46,750
fair warning. Yeah, it's his
fault if it doesn't work. So,
you know, here's the money shot.

174
00:16:46,750 --> 00:16:51,042
This is what you're looking at
right here. This was -- this was
the hours of torture and toil to

175
00:16:51,042 --> 00:16:59,622
come up with it. Yes. So, again,
give a hand to this guy. He
never sleeps. [Applause] And so the other

176
00:16:59,708 --> 00:17:04,667
guy who doesn't sleep, you know,
I'm going to hand it off to him
and let him talk about the DC 20

177
00:17:04,667 --> 00:17:10,667
badges and 22 badges and
anything else he wants to go
into. So LosT, everyone. >> Hey. [Applause]

178
00:17:13,333 --> 00:17:18,113
So I'm only going to speak for a
few minutes here because I want
to give Phork as much time as

179
00:17:18,120 --> 00:17:22,000
possible because these guys --
you know, it's their baby and I
was just kind of along for the

180
00:17:22,000 --> 00:17:25,917
ride. I've also been on stage
like four times this year, and
you guys are probably sick of

181
00:17:25,917 --> 00:17:31,333
hearing from me. And really,
Phork tends to be a little bit
verbose. And so I'd like to give

182
00:17:31,333 --> 00:17:37,333
him more time. They asked me to
speak a little bit about the
badge this year. So how many of

183
00:17:37,333 --> 00:17:47,673
you here were at DEF CON 20?
Okay. Like three people? It was
a very small conference. So if

184
00:17:47,680 --> 00:17:53,120
you came to the intro talk, you
know a little bit maybe why we
went with the propeller again

185
00:17:53,125 --> 00:17:57,667
this year. It also -- it lined
up really well with the prop lane project Russ was talking

186
00:17:57,667 --> 00:18:01,875
to us about. For those of you
who don't know, the DEF CON 20
badge was the same architecture.

187
00:18:01,875 --> 00:18:07,458
The layout was a little bit
different. We had some alternate
components. Again, we had them assembled by

188
00:18:07,458 --> 00:18:11,000
Parallax. I think a bunch of the
Parallax guys are in the
audience, are you not? Raise

189
00:18:11,000 --> 00:18:21,340
your hands if you're here, guys.
So give those guys a hand. [Applause]
I don't know, also, if we put this

190
00:18:21,340 --> 00:18:26,958
in the slides here, but I'm
going to bring this up. Chip
Gracey, who is the founder of

191
00:18:26,958 --> 00:18:34,917
Parallax, and Ken announced that
they are open sourcing the
propeller chip. So they have

192
00:18:34,917 --> 00:18:39,667
Verilog code that has been --
that has been put out there. And
I'd really like to give them a

193
00:18:39,667 --> 00:18:44,375
hand for taking -- as a company
to take that proprietary 
information, get the Verilog

194
00:18:44,375 --> 00:18:50,375
code information out to you guys
as a community. I think they
deserve a hand for that. [Applause] Yeah.

195
00:18:53,292 --> 00:18:58,958
So Fork suggested maybe I should
say what that means. For those
of you not familiar, they had

196
00:18:58,958 --> 00:19:03,583
mentioned FPGAs and other
things. What this allows you to
do is basically emulate the

197
00:19:03,583 --> 00:19:09,750
processor and software or on
hardware, like an FPGA, which
means you can actually implement

198
00:19:09,750 --> 00:19:15,208
this and test it if you don't
even have the chip, if you have
hardware capable of loading the

199
00:19:15,208 --> 00:19:20,375
Verilog code. So really what it
is, is the design of the chip.
It's the -- it's the description

200
00:19:20,375 --> 00:19:27,625
of the chip's hardware. This is
a high enough level of
description? >> Yeah. >> So for

201
00:19:27,625 --> 00:19:30,500
those of you that aren't
familiar, if you're not familiar
with hardware description

202
00:19:30,500 --> 00:19:35,208
languages, go look up Verilog
and see what it is. But
basically it's a big deal for a

203
00:19:35,208 --> 00:19:40,542
company to give out that type of
information, to go ahead and
say, hey, here's Verilog. So if

204
00:19:40,542 --> 00:19:44,833
you go to open cores and stuff
like that, you can get that for
a lot of other chips. But it's

205
00:19:44,833 --> 00:19:48,292
been stuff that has been
reversed and has been done by
other groups. This is actual

206
00:19:48,292 --> 00:19:53,958
Parallax releasing that. >> So
one of the things this will let
you do that's important is if

207
00:19:53,958 --> 00:19:57,875
you want to add additional cogs,
so if you have eight cogs on a
propeller normally, which are

208
00:19:57,875 --> 00:20:02,500
essentially little risk
processors with some static ram.
Well, if you wanted to put 12

209
00:20:02,500 --> 00:20:08,833
cogs on there, you could. So
that's what makes the Verilog so
very important and so very

210
00:20:08,833 --> 00:20:14,167
powerful. So if you take an FPGA
of, you know, a substantial
quality of gates, you can

211
00:20:14,167 --> 00:20:21,792
actually emulate not only the
propeller, but you can modularly
add additional cores, additional

212
00:20:21,792 --> 00:20:28,250
memory, additional I/O. So it
sets you free. It's a wonderful
thing. >> It sets you free. >>

213
00:20:28,250 --> 00:20:36,042
It's very -- >> You didn't know
you were coming to an
inspirational talk, did you?

214
00:20:36,042 --> 00:20:39,667
It's also going to keep you from
drinking -- speaking of the
badges, by the way, I apologize

215
00:20:39,667 --> 00:20:44,167
if I'm a little lethargic. For
the past three days, there have
been folks working on the badge

216
00:20:44,167 --> 00:20:50,780
challenge, and we actually had a
solution at 5:30 this morning.
So I'm a little exhausted. Yeah. [Applause]

217
00:20:50,780 --> 00:20:55,292
For those of you who don't know
what that means, there were
groups and groups of people for

218
00:20:55,292 --> 00:21:00,708
the past three days that have
had no sleep that literally have
been going 24/7. At the point we

219
00:21:00,708 --> 00:21:05,375
walked out last night, there was
no one left on the DEF CON floor
including the CTI folks. So the

220
00:21:05,375 --> 00:21:09,500
folks that were doing the badge challenge
had gone for three days
straight. So we had a solution.

221
00:21:09,500 --> 00:21:15,542
Congratulations to those guys.
They're way smarter than I am.
Just to break out of the pinouts

222
00:21:15,542 --> 00:21:19,125
on the DEF CON 20 badge, and we
had a lot of people bitch
because it was a non-standard

223
00:21:19,125 --> 00:21:24,750
spacing, but it was more done
for aesthetics. This year we
kind of took that and ran the --

224
00:21:24,750 --> 00:21:30,667
if you look at your own badge,
the two rows of header holes
that are along the sides

225
00:21:30,667 --> 00:21:37,750
facilitate a shield-type add-on
board which will make it much
easier to do than to build a

226
00:21:37,750 --> 00:21:42,708
prop lane for yourself because
we've also got gerbers we're
going to give out for everybody

227
00:21:42,708 --> 00:21:48,958
that you can actually design
add-ons for your board
yourself. If you didn't go to

228
00:21:48,958 --> 00:21:53,750
the talk, also we facilitated
removing parts without actually
taking them with those cut --

229
00:21:53,750 --> 00:21:57,792
those places where you can cut
the traces and take parts out.
So hopefully it will be easier

230
00:21:57,792 --> 00:22:03,583
for you to build. So I
don't know what else -- I'm --
oh, you can keep hearing this

231
00:22:03,583 --> 00:22:09,583
discussion of cogs. So basically
the chip that's on your badge is
a multi-core processor. It's got

232
00:22:09,583 --> 00:22:15,417
eight 32-bit cores on it.
They're called cogs. And it uses
a -- in high terms, like a round

233
00:22:15,417 --> 00:22:19,500
robin that goes through for
executing. They're all running
concurrently so you don't have

234
00:22:19,500 --> 00:22:22,750
to worry about interrupts and
things like that. How many of
you have ever been a slave for

235
00:22:22,750 --> 00:22:26,583
dealing with timings for
interrupting your teams? You
know how much of a pain in the

236
00:22:26,583 --> 00:22:31,667
ass that is. So with a
propeller, you can also launch
another cog so you don't have to

237
00:22:31,667 --> 00:22:36,042
worry about that timing issue.
And there's also facilities for
talking between cogs, passing

238
00:22:36,042 --> 00:22:44,122
information and there's also ram
that's individual to each cog.
So I'm going to go ahead and

239
00:22:44,125 --> 00:22:47,458
just turn it over to -- like I
said, I want to give Phork as
much time as possible because

240
00:22:47,458 --> 00:22:53,458
really he's put a lot work in on
this. So give Phork a hand, guys. [Applause] 

241
00:22:55,820 --> 00:22:58,580
>> So okay, where to start. Wow.

242
00:22:58,667 --> 00:23:03,417
Yeah. They've warned you that I
can be kind of verbose, so I
know some of you in the audience

243
00:23:03,417 --> 00:23:10,457
have stop talking cards. Do you
want to hold those up? Anybody?
No? Okay. Okay. All right. So

244
00:23:11,458 --> 00:23:19,167
The basic discussion of the
architecture of the prop lane is
that we've set up two device

245
00:23:19,167 --> 00:23:24,083
drivers for each of the network
interfaces. So each one of these
network interfaces uses a chip

246
00:23:24,083 --> 00:23:34,743
called an ENC. What is it,
28J60, I think? Anyway, it's in
the slides. And the point to it

247
00:23:34,750 --> 00:23:40,667
is it's nice -- a nice little
device. It actually manages all
of your Ethernet FYE information

248
00:23:40,667 --> 00:23:47,167
for you. It manages SPI for you.
>> They don't need your life
story. >> Right. Sorry. High

249
00:23:47,167 --> 00:23:53,708
level. Okay. So you have cogs
for the Ethernet drivers. You
have cogs for the encryptor and

250
00:23:53,708 --> 00:23:58,708
the decryptor. Now, right now
they're not fully a synchronous,
meaning they don't all run

251
00:23:58,708 --> 00:24:05,958
independently and -- like an
engine without a timing belt. >>
That was a good analogy. >>

252
00:24:05,958 --> 00:24:10,417
Yeah, but eventually they will.
And they won't have rod
collisions and have horrible

253
00:24:10,417 --> 00:24:15,000
things happen either. But
anyway, the speed the speed of
this device is about 2 to 3

254
00:24:15,000 --> 00:24:23,240
megabits a second on a good day.
And the propeller is running at
80 megahertz. For those of you

255
00:24:23,250 --> 00:24:28,083
who know propellers, you can run
them at varying clock speeds. We
ran them as fast as we possibly

256
00:24:28,083 --> 00:24:34,583
could, well, because crypto
tends to be pretty demanding.
And yeah, we wanted to get as

257
00:24:34,583 --> 00:24:38,500
much performance as we could. So
the basic sequence of
operations. How many of you guys

258
00:24:38,500 --> 00:24:43,720
have written a network
encryptor. >> Hey, we've got one
back there. >> We've got one?

259
00:24:43,720 --> 00:24:50,080
All right. Excellent. Well done,
sir. So the basic sequence of
operations is -- 

260
00:24:50,080 --> 00:24:54,240
[Inaudible]

261
00:24:54,240 --> 00:25:00,240
The basic sequence of operations is that
you have data that comes in on
the protected side that gets

262
00:25:00,917 --> 00:25:07,917
transformed and then shot out
the other end, right? And on the
other end, it gets taken in from

263
00:25:07,917 --> 00:25:12,667
the public Internet, transformed
back and shot to the other
client, at least that's the

264
00:25:12,667 --> 00:25:18,000
general theory of operation. >>
Lightning bolt, lightning. >>
Magic missile, magic missile. >>

265
00:25:18,000 --> 00:25:26,333
Encryption at Hogwarts, Mark
style. >> Magic. The point to
this is there's different

266
00:25:26,333 --> 00:25:30,000
algorithms, et cetera, et
cetera, et cetera. We chose AES
because it's a standardized

267
00:25:30,000 --> 00:25:37,042
algorithm. It's relatively
speedy on embedded hardware and,
you know, we had some great

268
00:25:37,042 --> 00:25:44,500
public implementations with
varying quality in their CVC
routines. So let's talk about

269
00:25:44,500 --> 00:25:49,375
the network cogs. All right? So
how many of you guys know that
your Ethernet card has its own

270
00:25:49,375 --> 00:25:55,167
processor on it. Anybody? Yeah.
Good. Good show of hands. All
right. Good. Well, we use one of

271
00:25:55,167 --> 00:26:02,042
the cogs as the processor on our
network card, essentially. So
technically there's the Ethernet

272
00:26:02,042 --> 00:26:06,667
FYE, which has the ability to
receive packets from the wire
and write them into a buffer.

273
00:26:06,667 --> 00:26:11,583
And then you have to do
something with those. Well, in
this particular Ethernet

274
00:26:11,583 --> 00:26:16,542
device's case, we use the SPI
protocol, which stands for
serial peripheral interconnect,

275
00:26:16,542 --> 00:26:22,500
to retrieve the data from that
chip into the main propeller
core. Now, the way that this is

276
00:26:22,500 --> 00:26:26,333
written right now, it uses
what's called a zero copy
architecture. Anybody familiar

277
00:26:26,333 --> 00:26:30,293
with that one? Yeah? A couple of
Linux guys in the
audience, I see. All right. So

278
00:26:30,300 --> 00:26:35,740
what zero copy architecture
means is you only copy the darn
thing when you need to. So we

279
00:26:35,750 --> 00:26:42,500
copy it once into main memory,
do the transformation and then
send it out ESP I bust to the

280
00:26:42,500 --> 00:26:51,700
other interface. So >>[inaudible] >> think of it as two giant packet shovels. That's the best way to think of it.

281
00:26:53,040 --> 00:26:56,333
And it's -- it's a FIFO
queue, which means
first-in/first-out, because

282
00:26:56,333 --> 00:27:02,500
that's how those chips work and
they're cheap. Like I said,
about two bucks apiece on eBay,

283
00:27:02,500 --> 00:27:05,417
although if you guys all order
them there's going to be a run
and they'll go up to four or

284
00:27:05,417 --> 00:27:12,417
five. But nice little pieces of
hardware. Highly recommend them.
And if you do anything with

285
00:27:12,417 --> 00:27:18,417
embedded, that particular chip,
great -- great piece of
hardware. Excuse me. Packet

286
00:27:20,880 --> 00:27:26,700
So packet wrapping, encryption. We've
talked about the transformation.
What we do in this particular

287
00:27:26,708 --> 00:27:32,542
case is we converted it to IP
protocol 99. So IP protocol 99
is a reserved protocol number.

288
00:27:32,542 --> 00:27:39,500
So you know TCP is, you know,
zero or six. UDP is seventeen.
ICMP is one. Well, IP Protocol

289
00:27:39,500 --> 00:27:46,417
No. 99 is reserved for private
encryption systems. And every
router on the Internet, for the

290
00:27:46,417 --> 00:27:52,500
most part, will transit this
protocol number without much
trouble. So if you want to build

291
00:27:52,500 --> 00:27:59,750
your own crypto system, that's a
really handy fact to exploit. So
what we do is we convert the IP

292
00:27:59,750 --> 00:28:07,750
protocol number to 99, add a
little bit to the packet size,
and we end up with a packet

293
00:28:07,750 --> 00:28:13,125
structure that has appended an
AES block size. So anybody who
knows stuff about crypto is

294
00:28:13,125 --> 00:28:18,375
going to tell you have what's
called blocking, which means
it's the smallest unit that the

295
00:28:18,375 --> 00:28:23,542
encryption system will deal
with. All right? So in order to
use this device, your clients

296
00:28:23,542 --> 00:28:27,500
have to set their M T U, the
maximum transfer unit on the
unit, down to 1,400 bytes

297
00:28:27,500 --> 00:28:33,167
because otherwise you don't have
the headroom to add other stuff
sometimes, like, the AES block

298
00:28:33,167 --> 00:28:41,333
size or the size of the packet
in the original protocol in our
case. So -- forgive me. Forgive

299
00:28:41,333 --> 00:28:51,413
me. Let me get a glass of water.
>> Make some noise for Phorkus, you
guys. Come on. [Applause] >> Thank you very

300
00:28:51,417 --> 00:28:56,958
much. I do realize that some of
this stuff is incredibly dry.
Trust me. I'm going parched even

301
00:28:56,958 --> 00:29:08,738
talking about it. That's also
true. So targeting this
particular device right now, the

302
00:29:08,750 --> 00:29:12,917
source code and the condition
it's in right now, it has one
key to rule them all. In other

303
00:29:12,917 --> 00:29:18,083
words, anything that you try to
send to anybody gets encrypted
with that particular key. Now,

304
00:29:18,083 --> 00:29:22,917
the advantagal strategy on this
is that the SD card that you
plug into it is going to have a

305
00:29:22,917 --> 00:29:28,458
representation of a network name
and a mask. And what does that
buy you? Well, it gives you the

306
00:29:28,458 --> 00:29:32,875
ability to individually
communicate with different
people with different keys. And

307
00:29:32,875 --> 00:29:37,875
what does that buy you? Well,
that keeps -- you know, if
you're communicating with Alice

308
00:29:37,875 --> 00:29:42,208
and she has one of these and
you're communicating with Bob
and he has one of these but they

309
00:29:42,208 --> 00:29:46,667
don't have the same key, now
they can't read each other's
communications. Right now they

310
00:29:46,667 --> 00:29:53,083
could. So right now. >> And we
all know all hackers are named
Alice or Bob. >> I've met a few

311
00:29:53,083 --> 00:30:05,540
Ivanhoffs, but that's neither
here nor there. >> Stay on
target. >> Or Alexanders, yes,

312
00:30:05,540 --> 00:30:11,540
indeed. >> [Inaudible] >> So
multi-key management is a
special kind of joy, for anybody

313
00:30:11,542 --> 00:30:18,333
that's not done it. One of the
impetuses between -- or behind
the original DARPA project was,

314
00:30:18,333 --> 00:30:25,292
as Rob said, this key management
stuff. That's hard. That's
really, really hard because if

315
00:30:25,292 --> 00:30:30,417
you have two end points that
have desynchronized key, well,
what happens? They can't talk.

316
00:30:30,417 --> 00:30:33,958
And what does that mean? >> You
send your lowest-paid
administrator to fix it? >> That

317
00:30:33,958 --> 00:30:38,708
is correct, usually, usually.
And usually they fix it on the
lowest-paid administrator

318
00:30:38,708 --> 00:30:44,417
schedule, about three weeks. So
practically speaking, you don't
want that. You want something

319
00:30:44,417 --> 00:30:51,792
that's automatic, largely
bulletproof, and that's where it
gets really complicated. But I'm

320
00:30:51,792 --> 00:30:56,208
running off of the face. >>
Yeah. >> So suggested
protections for key management,

321
00:30:56,208 --> 00:31:00,917
stuff that you can do to keep
yourself safe. If you want to
add a snazzy user input device

322
00:31:00,917 --> 00:31:06,917
to that, you could. You could
use an SPI or an I squared C
32-bit extender, for example,

323
00:31:06,917 --> 00:31:11,958
and add a key pad so they could
type a pin in that would
then decrypt the actual

324
00:31:11,958 --> 00:31:17,333
material. Pretty good idea too.
And the pin should probably be
at least eight digits, if not

325
00:31:17,333 --> 00:31:28,073
twelve or fourteen. >> 64. >>
64, yeah. >> But it's all sixes. [Laughter]
>> How do you know my password?

326
00:31:28,083 --> 00:31:36,292
Oh, no. So you encrypt the keys
for the destination device with
some other master key, never

327
00:31:36,292 --> 00:31:41,833
transmit things in plain text.
Do we all know that one?
Everybody. >> No, or people

328
00:31:41,833 --> 00:31:48,953
wouldn't have jobs. >> There
wouldn't be wall of sheep.
Right, got it. Use alternate

329
00:31:48,960 --> 00:31:55,792
channels, if possible. So that
means, you know, we could have
used the infrared on the badge to transmit keys.

330
00:31:55,792 --> 00:32:03,375
You can say let's swap keys, and then
everybody in the room could get
it too. >> It's super private.

331
00:32:03,375 --> 00:32:12,655
>> Super private. In addition,
you can use -- I mean, yeah, use
mechanisms like texting people

332
00:32:12,667 --> 00:32:17,292
the keys or whatever you really
want to do. I recommend
face to face, dark alleys,

333
00:32:17,292 --> 00:32:26,832
phones off, you know, the usual. >> [Inaudible]
>> Okay. I'm sorry. All right.
So separate communication, yada,

334
00:32:26,833 --> 00:32:33,417
yada, yada. Live demo. Okay.
Grab your beverages, kids. Here we
go. And what's the first rule of

335
00:32:33,417 --> 00:32:38,292
live demos? >> Don't do them. >>
Well, not just don't do them,
but they never go as planned. >>

336
00:32:38,292 --> 00:32:46,292
And don't talk about doing them
instead of before you do them.
Just sit down and do them. >>

337
00:32:46,292 --> 00:32:54,332
All righty then. So -- so one of
the caveats here is that the
MacBooks come with two thunder

338
00:32:54,333 --> 00:32:59,625
bolt ports. Both of those are in
use right now and we have a VGA to thunder bolt adapter. So

339
00:32:59,625 --> 00:33:04,167
I've prerecorded some of this
presentation because, well,
there's no way to show you live

340
00:33:04,167 --> 00:33:07,208
with both interfaces plugged in.
>> And if you would like to see
it live, it should be running

341
00:33:07,208 --> 00:33:13,958
after -- >> And I would be happy
to show you up here live. >>
Assuming you have all day,

342
00:33:13,958 --> 00:33:22,158
because that's about how long it
would take you to see the demo.
>> Sorry. Give me one moment to

343
00:33:22,167 --> 00:33:28,167
actually save the captured files
so in case I plug this in
somewhere and it crashes --

344
00:33:37,250 --> 00:33:43,250
How about that? It didn't crash. All
right. 

345
00:33:46,700 --> 00:33:48,700
All right. So, okay.

346
00:33:51,100 --> 00:33:59,120
Now that we have a tiny, yikes, screen, yeah, can
you guys actually read any of
this? >> Yeah. >> All right.

347
00:33:59,125 --> 00:34:03,792
Groovy. That's what I wanted to
hear. So back in this window
over here, you see something

348
00:34:03,792 --> 00:34:11,458
that looks fairly standard.
We've got address 10. 30 -- or
10. 230, 10. 231 over what

349
00:34:11,458 --> 00:34:17,750
appears to be a local network,
correct? All right. And we see a
very standard-looking I C M P

350
00:34:17,750 --> 00:34:24,083
request packet and a very
standard-looking I C M P reply
packet, all right? So let's see

351
00:34:24,083 --> 00:34:29,167
what that looks like from the
man in the middle perspective.
So from the man in the middle

352
00:34:29,167 --> 00:34:36,625
perspective, if we look at the
packets being sent, assuming
that the window is going to

353
00:34:36,625 --> 00:34:43,750
cooperate, which it may not --
okay, there we go. Yeah, that's
all right. So one of the things

354
00:34:43,750 --> 00:34:49,583
that we notice here is that the
data that's being sent here
doesn't look the same at all,

355
00:34:49,583 --> 00:34:56,958
does it? It's been encrypted.
Shocker. Which is the whole
point of the presentation.

356
00:34:56,958 --> 00:35:02,875
Sorry, yes, I know. Lousy at
showmanship. But the thing that
I'm good at is writing crypto.

357
00:35:02,875 --> 00:35:13,195
So if we start looking at -- >>
Remember, if it doesn't work,
that guy. >> Oh, crap. Anyway.

358
00:35:13,333 --> 00:35:19,417
The I C M P packet structure is
still intact, but it's fully
encapsulated now. So this is

359
00:35:19,417 --> 00:35:27,125
encapsulated in IP protocol No.
99. And we will go up through
here. So IP protocol 99 reads as

360
00:35:27,125 --> 00:35:33,083
any private encryption scheme.
So, again, if you're building
your own, IP No. 99 is the one

361
00:35:33,083 --> 00:35:39,083
to use because it's a route,
it's clean and it works like a
champ. And in our case, 

362
00:35:42,708 --> 00:35:47,792
that's our encrypted data, which
includes the I C M P header, as
well as the actual I C M P

363
00:35:47,792 --> 00:35:52,917
content. >> I mean, this -- this
truly is where the magic
happens, like from a crypto

364
00:35:52,917 --> 00:35:57,337
perspective, demoing crypto is
one of the hardest things ever
because it's like look at this

365
00:35:57,340 --> 00:36:01,960
jumbly crap and look at this
jumbly crap and then tell me
the difference. >> Right. And so

366
00:36:01,960 --> 00:36:07,000
thus jumbly crap is what the 
man-in-the-middle sees which
is the stuff you don't want him to see.

367
00:36:07,000 --> 00:36:08,760
 -- >> I
mean, the government just has

368
00:36:08,760 --> 00:36:12,220
more jumbled crap than everybody
else. So that's -- that's really
-- I mean, this really is

369
00:36:12,220 --> 00:36:18,740
impressive from an interviewing
perspective. And I can't thank this dude
enough for all the time he put it together. 

370
00:36:18,740 --> 00:36:22,580
It really is... [Applause]>>
Thank you, guys. Seriously,
flattery will get you

371
00:36:22,580 --> 00:36:30,380
everywhere. I'll work for days
without food or sleep. >> Yeah,
that's a lie. I mean, the sleep

372
00:36:30,380 --> 00:36:36,200
thing is -- you know -- >> Well,
okay. Without sleep. But in any
case, I think that's the demo.

373
00:36:36,200 --> 00:36:42,280
So who wants some question time?
>> Hey, hey -- >> I'm sorry. Rob
is not done. I will get off the

374
00:36:42,280 --> 00:36:54,080
stage. Sorry. >> Again, this
man. [Applause] So little -- a little
bit more in -- you know, then

375
00:36:54,083 --> 00:37:04,417
you can go back to drinking. So
let's get this guy running. So
yes. Live demo, kind of sort of.

376
00:37:04,417 --> 00:37:08,667
It's running right now, so if
you really want to see it before
we strip everything down or come

377
00:37:08,667 --> 00:37:14,080
find us later, we'll probably be
in the contest area with them
running anyway. So, you know,

378
00:37:14,080 --> 00:37:18,000
using the prop lane, I just want
to give everybody an overview of
kind of what to do with it or

379
00:37:18,000 --> 00:37:24,540
what to expect when you actually
pull it off the github. So the
badge assembly should look like

380
00:37:24,542 --> 00:37:28,722
the money shot over there. It
doesn't have to look like this,
but this is just the easiest

381
00:37:28,722 --> 00:37:34,333
architecture from a riser
perspective to get to everything,
or if you're using the DC 22

382
00:37:34,333 --> 00:37:38,917
badge and you make an awesome
shield for it, please share with
the community because the better

383
00:37:38,917 --> 00:37:43,750
we can make all this, the better
it is for everyone. >> Jumbly
crap for everyone. >> Jumbly

384
00:37:43,750 --> 00:37:51,840
crap for all. So anyway, here's
the basics. So this is what kind
of Phork was alluding to, was the

385
00:37:51,840 --> 00:37:56,660
key dot text that will be
distributed in the github code
is where you set your targets.

386
00:37:56,667 --> 00:38:03,250
And what we mean by that is the
target is this key matches this
network. So as long as your key

387
00:38:03,250 --> 00:38:07,292
and your target match on the
other side after all the jumble
crap happens, it should work,

388
00:38:07,292 --> 00:38:15,612
fingers crossed. So what the
prop lane actually does is uses
a black side/ red side concept.

389
00:38:15,620 --> 00:38:19,540
The black side is the 
fully protected and 
encrypted side and

390
00:38:19,540 --> 00:38:23,560
the red side is if
anybody got on this side, they
could see everything I'm doing.

391
00:38:23,560 --> 00:38:29,833
Normally, that's about a foot of
cable between your computer and
the encryption device, if you're

392
00:38:29,833 --> 00:38:34,083
smart. Or, you know, if you
really want to risk it, you
could put it on wireless, you

393
00:38:34,083 --> 00:38:39,042
know, just saying. There's some
guys down in the village down
there that would like to talk to

394
00:38:39,042 --> 00:38:44,667
you, if you do, though. So, you
know, what the prop lane won't
do, it's not fancy. It doesn't

395
00:38:44,667 --> 00:38:50,542
do fancy shit. It's -- it's a
very straightforward device
right now. The bright side, with

396
00:38:50,542 --> 00:38:55,792
our code, there's still half the
cogs unused. So if you wanted to
have a web server on it or

397
00:38:55,792 --> 00:38:59,667
you wanted to do anything else,
make it like a little file
storage server with your SD card

398
00:38:59,667 --> 00:39:04,587
in there, you absolutely could,
you know, from an innovation
perspective, there's a lot of

399
00:39:04,587 --> 00:39:11,080
room. What you shouldn't use the
prop lane for, hiding from the
government. It is not an anonymity

400
00:39:11,080 --> 00:39:16,740
 device. It is an
encryption device. They still
see where it's coming from. You

401
00:39:16,740 --> 00:39:20,282
know, theoretically, a bunch of
you could get together and make
exit nodes out of them if you

402
00:39:20,282 --> 00:39:26,040
really want to and, you know, by all
means, go right ahead. But it is
-- it is not fast and not really

403
00:39:26,040 --> 00:39:31,240
for that. But neither is Tor. >>
If John McAfee is still in this
room, please don't use this. >>

404
00:39:31,250 --> 00:39:37,660
Right. >> It is not going to
save your life. I swear. >> It
won't take a bullet very well.

405
00:39:37,660 --> 00:39:44,000
So, you know, don't -- don't put
secrets on it. If you do happen
to work for the G O D, don't

406
00:39:44,000 --> 00:39:48,760
take it in and try to replace it
with whatever was there before,
just because it's cheaper. So,

407
00:39:48,760 --> 00:39:53,875
you know, don't do -- >> The
feds are laughing. >> Right,
exactly. It is budget conscious,

408
00:39:53,875 --> 00:39:59,292
I promise. >> Or crying. >>
What's that? >> Laughing or
crying. >> Laughing or crying

409
00:39:59,292 --> 00:40:04,612
because they know it's true. So,
banking, again, don't do stuff you
wouldn't want to see out there,

410
00:40:04,620 --> 00:40:09,040
unless you're totally sure what
we did is awesome. And if it is,
then by all means, I accept

411
00:40:09,040 --> 00:40:13,660
checks. >> I encourage
independent code review, lots of
it. >> You know, what you should

412
00:40:13,667 --> 00:40:16,875
use it for, though, you should
make something new out of it.
You know, that's kind of the

413
00:40:16,875 --> 00:40:21,042
whole theme of why we did this,
you know, why it's out there and
what we should do with it. You

414
00:40:21,042 --> 00:40:25,000
know, make something new,
innovate, take what we have, rip it
apart, say it sucks, make

415
00:40:25,000 --> 00:40:29,375
something better. By all
meanings, we are not the end all
be all. And the lulls, that is

416
00:40:29,375 --> 00:40:34,250
the first one. If someone can
get a nyan cat going through the
pipes as an encryption thing,

417
00:40:34,250 --> 00:40:39,833
that would be outstanding. Who
knows what a nyan cat is? Come
on, it was funnier than that.

418
00:40:39,833 --> 00:40:49,013
Jeez. So, you know, from -- from
a danger Will Robinson, if you're
that old, perspective, right now

419
00:40:49,020 --> 00:40:54,958
we have the mode we're releasing
to you that has two variants. It
has an ECB code book variant

420
00:40:54,958 --> 00:41:02,998
and a C B C variant. The C B
code book will run faster.
However, it is not as secure as

421
00:41:03,000 --> 00:41:12,560
C B C. So use at your own risk.
And right now, as Phork was
saying, it uses a single device

422
00:41:12,560 --> 00:41:17,700
key so it's targeting zero zero
zero zero. So anything you send
out with the single key, it will

423
00:41:17,700 --> 00:41:22,700
just create a network of that
same key. You can change the key
between all your friends.

424
00:41:22,700 --> 00:41:26,780
However, it's just going to send
it all out at once. When we
release it to the get hub, we

425
00:41:26,780 --> 00:41:31,620
should have the multi-target
environment. So, you know, John,
Joe and Susan can all have

426
00:41:31,620 --> 00:41:41,740
different keys. Expected
privacy. I mean, it is a 128. It
is a, you know, 256. As long as

427
00:41:41,750 --> 00:41:44,750
you don't lose your symmetric
key, you're doing pretty well. I
mean, like I said, it's not

428
00:41:44,750 --> 00:41:49,083
going to be fast, but it still
takes a tremendous amount of
effort to actually -- you know,

429
00:41:49,083 --> 00:41:54,875
to break that. And then, you
know, the difficulty in actually
creating it, it is not a small

430
00:41:54,875 --> 00:42:00,417
task. I mean, like he said, he
spent a lot of time -- he spent
a lot of time not eating and not

431
00:42:00,417 --> 00:42:03,167
sleeping. And, you know, we
spent a tremendous amount of
time thinking into the key

432
00:42:03,167 --> 00:42:10,333
managements and all the aspects
around the evolution of this. So
be prepared to do some work,

433
00:42:10,333 --> 00:42:13,375
but, you know, that's half the
fun of doing all this is the
challenge you get from

434
00:42:13,375 --> 00:42:18,750
understanding what's going on at
the end. So the future goals,
this is where we're going to

435
00:42:18,750 --> 00:42:22,042
continue working on this
project. You know, we want this
to be an open source project for

436
00:42:22,042 --> 00:42:25,583
everyone. We're going to
continue to contribute, and we
hope you do too. You know, what

437
00:42:25,583 --> 00:42:31,167
we're going to look to do is --
the crypto is portable because
it runs on a single cog. So what

438
00:42:31,167 --> 00:42:35,500
we want to try to do is switch
out cogs or some of the hardware
algorithms which

439
00:42:35,500 --> 00:42:40,833
were released by everybody's
favorite agency a couple years
ago. And, you know, some of the

440
00:42:40,833 --> 00:42:47,393
EU stuff that can be released
for crypto reasons. We'd like to
complete an ARM port of this

441
00:42:47,400 --> 00:42:52,100
particular code variation. And
then any direction you guys
want. I mean, that's kind of

442
00:42:52,100 --> 00:42:55,280
what it is. If the community
thinks this is an awesome
direction to go in, we'll go in

443
00:42:55,280 --> 00:43:03,333
that direction. You know, what
-- what -- what we think we
should do in the future, we're

444
00:43:03,333 --> 00:43:08,000
going to try and speed up the
implementation of large key
crypto on very small processors.

445
00:43:08,000 --> 00:43:12,333
That's kind of what the NSA
algorithms were designed to do,
but we're going to try to do it

446
00:43:12,333 --> 00:43:16,000
for some of the public key
already existing. We're not sure
we're going to be able to do it,

447
00:43:16,000 --> 00:43:21,020
but we've got it pretty
efficient on this prop chip as
it is. We'd like to make crypto

448
00:43:21,020 --> 00:43:26,380
a feature on all future
electronic DC badges just to allow
communication, plug it in, talk to

449
00:43:26,380 --> 00:43:30,922
your friends, say bad things
about everyone else in the room.
And, you know, we want to help

450
00:43:30,922 --> 00:43:35,182
protect the community and give
somebody something to hack on,
you know, break on and improve.

451
00:43:35,860 --> 00:43:39,652
So from a possibilities
perspective, this is, you know,
what we're looking at. I mean,

452
00:43:39,660 --> 00:43:44,202
theoretically, you can take the
code we have right now, slap on
another FYE, make it a firewall,

453
00:43:44,202 --> 00:43:49,922
do wired, you know, ham
communication, VoiP sip, you
know, you can do multi-plexing

454
00:43:49,922 --> 00:43:58,240
prop lanes into a single one and make it 
like a T1 core. You can do point coms
with onboard antennas. You can

455
00:43:58,250 --> 00:44:02,083
do so much more. I mean, this is
just stuff we thought about
sitting around for five minutes

456
00:44:02,083 --> 00:44:05,875
that, you know, hey, this would
be a fun variant to do for this
project. So from an

457
00:44:05,875 --> 00:44:09,833
administrative perspective, and
I know I'm going through kind of
fast because I want to stay on

458
00:44:09,833 --> 00:44:14,583
time and get some questions --
you can get the software here as
soon as we upload it. It's

459
00:44:14,583 --> 00:44:21,900
basically github prop lane prop lane.
prop lane dot org Is the domain. We'll put all the
F A Qs up and how to use it and

460
00:44:21,900 --> 00:44:28,860
everything else. You can contact all
of us, Evil Rob, Russer, Phorkus, LosT,
at prop lane dot org >> That would be

461
00:44:28,860 --> 00:44:34,100
set up in the next couple of
days. >> Yeah, it should be set
up after cons over. And then

462
00:44:34,100 --> 00:44:42,340
drink preferences, anything that
anyone hands me, don't give me
roofies, I swear. So questions

463
00:44:42,340 --> 00:44:49,480
and dogs. All right. So -- hot
dogs anyone? Five minutes. I'll
take some questions for -- for

464
00:44:49,480 --> 00:44:55,480
anyone up here. If there's a
microphone out there, we have a,
you know, a little bit if anyone

465
00:44:55,480 --> 00:45:03,020
has any questions or not, we can
talk afterwards. Last chance.
Oh, you have a question? >> [Inaudible]

466
00:45:12,180 --> 00:45:17,792
-- yes. So one thing before he
starts talking, so the -- yeah,
we did it -- we had considered

467
00:45:17,792 --> 00:45:22,500
doing it, but we wanted to make
sure that there was no extra
piles of cocaine you needed to

468
00:45:22,500 --> 00:45:28,042
make this, so that's why we did
it just the way it was on the
naked chip itself. >> We've

469
00:45:28,042 --> 00:45:33,500
looked at things like the A T S
H S 24 from that for
authentication reasons. And

470
00:45:33,500 --> 00:45:37,292
there's also a few others like
-- I don't remember the chip
number, but there's an AES chip

471
00:45:37,292 --> 00:45:43,458
they have as well that's fairly
compact. And it's actually in an
S P I form already. So that was

472
00:45:43,458 --> 00:45:50,708
a consideration but I didn't
want you to have to order and
then sign and on and on. >> So,

473
00:45:50,708 --> 00:45:55,042
I mean, come talk to us later.
We can talk about all the chips
we looked at. Yes, sir? >> You

474
00:45:56,760 --> 00:46:00,500
Can you hear me? You
mentioned that in the future you
were looking at the [Inaudible]

475
00:46:00,500 --> 00:46:03,792
algorithm for future
growth. Do you have a lot of
faith in that algorith being

476
00:46:03,792 --> 00:46:09,750
that it was designed for a
particular alphabet? >> It's not
that I don't necessarily have

477
00:46:09,750 --> 00:46:14,625
faith in it. It's just given my
schedule, with the amount of
time I have, someone should have

478
00:46:14,625 --> 00:46:20,375
done a cryptanalysis on it by the
time I get it. That's really
what should have happened with

479
00:46:20,380 --> 00:46:25,940
it. And it's new and should improve
both the software and hardware speed
of crypto for small processors in embedded devices

480
00:46:25,940 --> 00:46:33,875
So it's a curiosity, at best. >> Thank
you. >> Is there another
question? Yes? >> I'm curious

481
00:46:33,875 --> 00:46:38,083
about the ether types that you deal
with and react. I noticed you
mentioned making some special

482
00:46:38,083 --> 00:46:42,340
exceptions for things like ARP.
I wonder what would happen if I
attached this to a dual stack network

483
00:46:42,340 --> 00:46:49,500
where I have things like ICMP v6 and IP v6 running across the network.  >> At present, it's
going to look at it with a great

484
00:46:49,500 --> 00:46:55,958
amount of confusion. However,
the algorithm is extremely
extensible. All you need to do

485
00:46:55,958 --> 00:47:01,667
is put in an appropriate test
condition. So if you look at the
protocol class and it says IP v6

486
00:47:01,667 --> 00:47:05,625
 instead, you say, oh,
then I'm going to go look at
this offset to get the packet

487
00:47:05,625 --> 00:47:12,542
length instead of this other
offset. So it's a matter of
very, very simple extensibility.

488
00:47:12,542 --> 00:47:17,833
It's all done through constants
at the end of the file, and it's
very easy to extend and modify

489
00:47:17,833 --> 00:47:22,667
for anybody. >> I have a better
one. Have you looked at it? >>
Not yet. I have just received

490
00:47:22,667 --> 00:47:28,042
the URL. >> Well, there. Now you
can go look at it. >> Yes. >>
So, you know, again, try and do

491
00:47:28,042 --> 00:47:31,167
whatever you can with it. If you
have questions for us, come talk
about that. I just want to make

492
00:47:31,167 --> 00:47:35,667
sure we can address whatever we
need to address. But, you know,
thank you. >> Yeah. And I try to

493
00:47:35,667 --> 00:47:38,667
remain accessible via e-mail,
although it may take a month
sometimes for me to get back to

494
00:47:38,667 --> 00:47:42,708
you. I apologize for that. I
tend to be that swamped. >> The
gentleman behind you and then

495
00:47:42,708 --> 00:47:49,375
we'll take one more, and then
we're done. >> Okay. One more.
We'll talk to you afterwards.

496
00:47:49,375 --> 00:47:53,125
Yes, sir? >> Sure. I was
curious. Do you have any
estimate on how much current

497
00:47:53,125 --> 00:48:00,167
consumption one node takes? >>
In terms of power or what? >>
Yeah, power. >> So it will take

498
00:48:00,167 --> 00:48:04,250
over the normal USB port in its
present incarceration. And the
reason for that is that the

499
00:48:04,250 --> 00:48:09,250
clocking on both of the boards
is using its own crystal, so
that takes a fair amount of

500
00:48:09,250 --> 00:48:13,958
draw. In addition, you have to
have enough current to actually
run the Ethernet transceivers.

501
00:48:13,958 --> 00:48:17,750
And being a differential trance
receiver, you have to create
enough potential across the

502
00:48:17,750 --> 00:48:27,625
pairs basically, or across the
signals. That said, I'm running
it through an LD 1117 V 33 power

503
00:48:27,625 --> 00:48:35,250
converter, and that provides
adequate draw through a beefy
bit coin esque hub to power each

504
00:48:35,250 --> 00:48:39,958
device without much trouble. >>
Excellent. Thank you. >> So I
don't think you can run it off a

505
00:48:39,958 --> 00:48:45,958
USB port, if that's what you're
asking. >> But you should try.
So with that, I think we're out

506
00:48:45,960 --> 00:48:49,760
of time. If you have any
questions for any of us, we're
extremely approachable and

507
00:48:49,760 --> 00:48:54,880
usually wandering around. >>
Thank you. >> Thank you for your
time. >> And thank all of you

508
00:48:54,880 --> 00:48:56,880
for participating in the
community. Seriously. 

