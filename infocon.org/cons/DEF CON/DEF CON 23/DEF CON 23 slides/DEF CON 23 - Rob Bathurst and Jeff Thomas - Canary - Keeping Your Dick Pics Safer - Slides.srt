00:00:00.000 --> 00:00:06.006
Good morning, everybody. How are
we doing? All right. So how many

00:00:08.542 --> 00:00:14.281
people have looked at closed
captioning all weekend? Do you

00:00:14.281 --> 00:00:18.619
like that? What software is
that? That's not software.

00:00:18.619 --> 00:00:22.923
That's meatwear. On the other
end of the wire someone is

00:00:22.923 --> 00:00:27.461
typing that in, and they've been
very patient and probably typing

00:00:27.461 --> 00:00:32.699
things they normally don't type
out in a regular day-to-day. So

00:00:32.699 --> 00:00:36.069
why don't we take this
opportunity and ask or person to

00:00:36.069 --> 00:00:42.075
do the transcription what have
you thought of the conference so

00:00:44.344 --> 00:00:50.350
far? >> I've learned a lot. (
Applause ) >> Well, thank you

00:00:56.356 --> 00:01:02.296
very much. Since this has been
going on, it's really helped

00:01:08.569 --> 00:01:12.172
out, and it's really add the to
the conference experience for

00:01:12.172 --> 00:01:16.443
everybody, and we're really glad
you put in the time to help us

00:01:16.443 --> 00:01:20.347
out. Let's give them a round of
applause one more time. (

00:01:20.347 --> 00:01:24.284
Applause ) Great. Next Geoff and
rob talk about web browsers and

00:01:24.284 --> 00:01:28.288
encryption. We're at a spot
where a lot of people, certainly

00:01:28.288 --> 00:01:32.726
or mugle friends at home look
for the little green lock. If it

00:01:32.726 --> 00:01:37.097
has the green lock, it has the
same security banks use,

00:01:37.097 --> 00:01:40.667
therefore it's secure, right?
Military grade. Yes. We're going

00:01:40.667 --> 00:01:45.839
to talk about why that may not
be the case and maybe some

00:01:45.839 --> 00:01:51.011
things we can do to make sure
that when you see that little

00:01:51.011 --> 00:01:56.183
lock that it might mean a little
bit more than it's locked. Let's

00:01:56.183 --> 00:02:01.688
get Geoff and Rob a big hand. >>
What's that? >> I hope that's

00:02:01.688 --> 00:02:06.460
not premature. >> No. I'd hold
your applause until you see what

00:02:06.460 --> 00:02:11.231
happens. First, I'd like to say
I'm sorry to the person typing

00:02:11.231 --> 00:02:16.003
everything I'm about to say. So,
you know, welcome to the Canary,

00:02:16.003 --> 00:02:20.774
which is our project we started
doing. It's the theme of keeping

00:02:20.774 --> 00:02:24.678
your Dick pics safer. I don't
mean to look relaxed, but this

00:02:24.678 --> 00:02:28.148
is the only way I can talk into
the mic. We'll have a little

00:02:28.148 --> 00:02:32.919
intimate conversation going on
here. So I am evilrob and you

00:02:32.919 --> 00:02:38.692
may see me walking around. I'm
the director for health care and

00:02:38.692 --> 00:02:42.229
biomedical security for an
antivirus company called

00:02:42.229 --> 00:02:44.931
zilense. It's not McAfee. I
don't mean to insult you. I'm

00:02:44.931 --> 00:02:50.937
turn it over to Geoff real
quick. >> I do stuff with

00:02:55.675 --> 00:03:01.615
computers. >> He is barely awake
I assure you. So I'm glad you

00:03:10.490 --> 00:03:13.060
all decided to make it here in a
semi conscious, hungover or

00:03:13.060 --> 00:03:15.862
fully awake kind of state. This
is one of the greatest quotes in

00:03:15.862 --> 00:03:18.665
all of reporting, I think, that
there could be. How many of you

00:03:18.665 --> 00:03:21.201
saw the actual interview that
this was taken from? Was it not

00:03:21.201 --> 00:03:24.137
amazing? It was truly the best
thing. I was rifted the entire

00:03:24.137 --> 00:03:27.774
time. Aside from the quantum
project and everything the NSA

00:03:27.774 --> 00:03:35.148
runs, I want to know whether my
dick pics are collected? >> The

00:03:35.148 --> 00:03:39.086
answer is always yes. >> The
answer is always yes. We want to

00:03:39.086 --> 00:03:44.891
talk about better ways to take
the dick pics collected so

00:03:44.891 --> 00:03:50.697
they're intrigued, what angle to
take them at, if it's better

00:03:50.697 --> 00:03:58.105
from the side or up top. Always
put a penny or something next to

00:03:58.105 --> 00:04:04.377
it just to enhance that. So
realistically, you know, why are

00:04:04.377 --> 00:04:09.082
-- why this? Why this project?
You know, things we like

00:04:09.082 --> 00:04:13.553
ourselves, obviously, and some
of you, a very small percentage

00:04:13.553 --> 00:04:17.257
but you're out there, and
systems that are not not built

00:04:17.257 --> 00:04:20.894
on blind trust. I mean, the
whole reason we started looking

00:04:20.894 --> 00:04:25.098
into this and the whole reason
that we built this project is

00:04:25.098 --> 00:04:27.400
because a lot of the
infrastructure behind the

00:04:27.400 --> 00:04:31.404
Internet was an add-on and
addition well after the fact.

00:04:31.404 --> 00:04:36.743
They're like, yeah, okay, so I
can see that web page, but I

00:04:36.743 --> 00:04:40.580
really need to transmit
something securely. We could

00:04:40.580 --> 00:04:44.151
re-engineer it, or just tack it
on? It's fine. Just use the same

00:04:44.151 --> 00:04:48.221
communications, mechanisms and
protocols and throw some things

00:04:48.221 --> 00:04:52.359
in it and we'll sign some stuff
and it's all great. You know,

00:04:52.359 --> 00:04:57.330
I'm sure there's no other system
out there like that, other than,

00:04:57.330 --> 00:05:02.669
you know, the PKI. >> Other than
everything. >> I was trying to

00:05:02.669 --> 00:05:07.207
give them the benefit of the
doubt. Things we don't like

00:05:07.207 --> 00:05:12.179
ourselves, which is why we put
on this talk, more of you.

00:05:12.179 --> 00:05:16.316
Things that fail without
warning. You know, I'm okay for

00:05:16.316 --> 00:05:21.288
systems that have failures and
flaws and errors as long as they

00:05:21.288 --> 00:05:24.991
yell and scream when those
errors actually occur unlike

00:05:24.991 --> 00:05:29.896
most things. So why? You know,
I'm sure a large percentage of

00:05:29.896 --> 00:05:35.302
you of the did you know it was
compromised by a lone Iranian

00:05:35.302 --> 00:05:41.241
hacker. One guy. He's like, you
know what? I'm bored today. I

00:05:41.241 --> 00:05:46.513
could look at fortune, or I
could hack in and issue a bunch

00:05:46.513 --> 00:05:51.718
of certificates for no purpose
other than boredom. 531 was the

00:05:51.718 --> 00:05:59.259
count came up with, and it was
used to intercept Gmail users in

00:05:59.259 --> 00:06:04.397
Iran and only Iran. You
compromise an entire certificate

00:06:04.397 --> 00:06:12.038
authority, and that's all you do
with it. I'm not sure what's --

00:06:12.038 --> 00:06:16.643
we'll talk that technical
failure. >> About that time

00:06:16.643 --> 00:06:20.814
frame there was little things
going on, and intercepting Gmail

00:06:20.814 --> 00:06:24.417
is what hackers do when they're
really bored. >> This was on a

00:06:24.417 --> 00:06:28.888
bored Saturday night. He's like,
I hate these people, and I want

00:06:28.888 --> 00:06:35.028
to read their e-mail. Second
thing, Turk trust, right? 200

00:06:35.028 --> 00:06:39.899
certificates were issued out of
this. They were used at man in

00:06:39.899 --> 00:06:45.372
the middle wildcard, Google.com.
How can that be a bad thing?

00:06:45.372 --> 00:06:50.310
Obviously, Google doesn't mind.
It was detected by some of the

00:06:50.310 --> 00:06:54.814
technology built into Chrome
with the pinning they do with

00:06:54.814 --> 00:06:58.418
certificates, so only their
applications will trust it.

00:06:58.418 --> 00:07:02.689
We'll talk about pinning. Just a
quick precursor of what we'll

00:07:02.689 --> 00:07:06.192
talk about. Google has done a
lot of work in this, and what

00:07:06.192 --> 00:07:10.330
we're doing is not to detract
from anything they're doing.

00:07:10.330 --> 00:07:15.735
It's just their project will
take a long time to get to the

00:07:15.735 --> 00:07:19.372
end. Obviously, issuing the man
in the middle certificates for

00:07:19.372 --> 00:07:24.511
Google with a wildcard was for
totally legit purposes like

00:07:24.511 --> 00:07:30.517
this. Another instance where the
Brazil ministry of mines and

00:07:32.953 --> 00:07:38.391
energy allegedly -- >> Alleged.
>> Allegedly was used to target

00:07:38.391 --> 00:07:44.631
individuals and organizations
the same day. It's the same

00:07:44.631 --> 00:07:51.004
theme we keep going over. Your
entire certificate system is

00:07:51.004 --> 00:07:56.643
based on trusting someone.
Seriously? That right there is

00:07:56.643 --> 00:08:00.880
the epitome of everybody like,
don't worry. It's safe. It's

00:08:00.880 --> 00:08:06.453
full of kittens and nothing
could go wrong. We like to point

00:08:06.453 --> 00:08:11.191
out that these are just the
attacks that are public, ones we

00:08:11.191 --> 00:08:14.194
know about because someone
detected them, Google or

00:08:14.194 --> 00:08:18.765
Microsoft detected them or there
was some system out there, some

00:08:18.765 --> 00:08:21.768
organization looking out for
realistically their own

00:08:21.768 --> 00:08:25.372
self-interests. They weren't
looking out for you. They are

00:08:25.372 --> 00:08:27.974
looking out for reputation
damage and looking out for

00:08:27.974 --> 00:08:31.311
protecting the systems. They're
going to say they're looking out

00:08:31.311 --> 00:08:33.913
for you, but realistically
there's not a lot of systems out

00:08:33.913 --> 00:08:37.350
there to protect you as an
individual. It will give you the

00:08:37.350 --> 00:08:41.388
power to figure out what's going
on. CAs are run by companies,

00:08:41.388 --> 00:08:46.559
agencies, people, organizations,
staff. How many of you work in a

00:08:46.559 --> 00:08:50.296
corporate environment where
they're like, we'll load our

00:08:50.296 --> 00:08:53.466
certificate on it, and it's
cool? You'll get some e-mail

00:08:53.466 --> 00:08:55.902
from it. It will be great. We
can contact you wherever we

00:08:55.902 --> 00:09:00.774
want. Don't worry. We're not
doing anything we shouldn't. All

00:09:00.774 --> 00:09:03.943
people regardless in all
organizations are vulnerable to

00:09:03.943 --> 00:09:08.048
corruption, common mistakes,
issuance of bad certificates

00:09:08.048 --> 00:09:14.287
because they got lazy that day.
So those are things you really

00:09:14.287 --> 00:09:18.491
need to look at with this type
of certificate. It's just

00:09:18.491 --> 00:09:21.628
computers and software and a
bunch of signatures and hashes

00:09:21.628 --> 00:09:25.065
and things that get moved
around. The way the system is

00:09:25.065 --> 00:09:29.669
built is we just blindly accept
that, and from an attacker's

00:09:29.669 --> 00:09:33.006
perspective -- I'm not saying
that bored Iranian hacker

00:09:33.006 --> 00:09:37.243
himself, but from an attacker
that may want a mass collection

00:09:37.243 --> 00:09:43.983
or something like that, CAs are
high value. They are absolutely

00:09:43.983 --> 00:09:50.356
high value, because if you can
get to the root CAs or the

00:09:50.356 --> 00:09:56.362
intermediary CAs, you have a
tremendous amount of power over

00:09:58.665 --> 00:10:00.667
anyone that connects and
authenticates through those CAs,

00:10:00.667 --> 00:10:02.669
which is basically everyone. >>
You also extended certificates

00:10:02.669 --> 00:10:04.671
to be used for other purposes
such as software signing and

00:10:04.671 --> 00:10:06.673
things that can actually be
invented in your operating

00:10:06.673 --> 00:10:10.610
system. Being able to divert
those has a proven track record

00:10:10.610 --> 00:10:14.881
of allowing you to do some very
nasty things. >> Even as we

00:10:14.881 --> 00:10:19.519
bring up an example, your
citizenship to a country is

00:10:19.519 --> 00:10:24.791
controlled by a PKI certificate.
So, you know, what is a

00:10:24.791 --> 00:10:27.293
certificate? I'm not going to
bore you with all the details,

00:10:27.293 --> 00:10:33.933
but in general it verifies
ownership of a key associated

00:10:33.933 --> 00:10:38.838
with a resource. It's issued by
a certificate authority at some

00:10:38.838 --> 00:10:43.910
level that is trusted, trusted.
On your computers they're used

00:10:43.910 --> 00:10:48.481
in applications, used on your
cell phones and software

00:10:48.481 --> 00:10:53.019
updates. They're used for
anything that needs to establish

00:10:53.019 --> 00:10:58.625
a unique identity of something.
You know, so, again, it's all

00:10:58.625 --> 00:11:03.630
built on trust. It doesn't
actually work, and it's super

00:11:03.630 --> 00:11:10.503
broken but I can't go out and
say that right away. So legit

00:11:10.503 --> 00:11:13.773
certs are signed by a trusted VA
or life or the large ones that

00:11:13.773 --> 00:11:19.779
collect money for doing this
time and time again. Our

00:11:22.115 --> 00:11:26.085
browsers that trust anything
signed by these CAs by default

00:11:26.085 --> 00:11:30.690
because they are inside of our
root of trust, inside the

00:11:30.690 --> 00:11:35.161
browsers, et cetera, et cetera.
Sessions get negotiated by

00:11:35.161 --> 00:11:38.131
magic. I say that because my
talk is not to talk about how

00:11:38.131 --> 00:11:41.501
broken TLS is and all the
protocols but just the

00:11:41.501 --> 00:11:44.771
infrastructure around them.
After you get that lock symbol

00:11:44.771 --> 00:11:49.309
or you get that it's all good,
you're free to send your very

00:11:49.309 --> 00:11:52.779
secured dick pics through them,
and that's what we're really

00:11:52.779 --> 00:11:55.615
here for. >> From the user's
perspective they've been

00:11:55.615 --> 00:11:58.885
trained. If you see the green
lock, this is considered

00:11:58.885 --> 00:12:01.688
progress. If they see the green
lock, they know it's okay to

00:12:01.688 --> 00:12:04.791
type in their password and do
their banking or whatever else

00:12:04.791 --> 00:12:11.731
online. >> If you get on the DEF
CON network and see the green

00:12:11.731 --> 00:12:17.937
lock, you're good to go. Bally's
wants to make sure you have the

00:12:17.937 --> 00:12:24.110
room number and credit card with
you all the time. We call this

00:12:24.110 --> 00:12:29.082
the chain of fools, right? It's
I'm the root CA for whatever I'm

00:12:29.082 --> 00:12:34.554
doing. You pay me some money.
It's a lot of hard work to sign

00:12:34.554 --> 00:12:38.491
those certificates, so I search
your cert and take your money

00:12:38.491 --> 00:12:41.861
and it's trusted by everyone
because I'm in your root store

00:12:41.861 --> 00:12:48.601
doing whatever you do. You can
be whoever you asked to be. The

00:12:48.601 --> 00:12:52.572
wildcard for Google.com, a
computer that uses that as a

00:12:52.572 --> 00:12:57.443
reference for trust or if you're
being funneled into that proxy,

00:12:57.443 --> 00:13:00.013
you're not going to know. Your
browser will give you the same,

00:13:00.013 --> 00:13:03.683
hey, it's all good as the search
said with Google issues. That's

00:13:03.683 --> 00:13:10.056
because to your browser under
certs it has loaded into the

00:13:10.056 --> 00:13:15.828
root store, it's legitimately
okay to have Google is this

00:13:15.828 --> 00:13:20.633
computer over here not
collecting your data whatsoever.

00:13:20.633 --> 00:13:25.471
I got to credit citric for this
to prove my point. I think they

00:13:25.471 --> 00:13:30.710
were trying to sell a product to
the Belgian government to help

00:13:30.710 --> 00:13:35.081
them do the VA infrastructure
and verification. You have the

00:13:35.081 --> 00:13:39.452
global signed root. You have the
Belgian intermediary root CAs,

00:13:39.452 --> 00:13:44.691
and you have a bunch of citizen
CAs that verify the citizenship

00:13:44.691 --> 00:13:50.363
of the people at the bottom, the
Army of people. If you took

00:13:50.363 --> 00:13:56.035
control of a Belgian CAs, one of
the citizen CAs that has the

00:13:56.035 --> 00:14:00.740
ability to say this person, this
EID is legitimate, what

00:14:00.740 --> 00:14:04.043
implication does that have for
border control? What implication

00:14:04.043 --> 00:14:07.213
does that have for actually
whether or not somebody is who

00:14:07.213 --> 00:14:10.783
they say they are. You know
you've been trained not to be

00:14:10.783 --> 00:14:13.920
able to trust the physical
picture. You've been trained not

00:14:13.920 --> 00:14:19.058
to trust the paper in front of
you because of how easily forged

00:14:19.058 --> 00:14:24.831
it is. If you had control of one
of these CAs, it's like six

00:14:24.831 --> 00:14:29.068
lines of code and you generated
a citizen. I say this in a broad

00:14:29.068 --> 00:14:33.806
kind of way. That's the world on
fire perspective in this type of

00:14:33.806 --> 00:14:38.644
example. >> This also violates a
level of trust we put in

00:14:38.644 --> 00:14:41.714
technology and this system is
very complicated system of

00:14:41.714 --> 00:14:49.055
systems. They spy on it to make
high level decisions and do high

00:14:49.055 --> 00:14:52.792
level verification of someone's
identity and citizenship. >>

00:14:52.792 --> 00:14:57.463
Yeah. It's not like you can
harden these CAs and stick them

00:14:57.463 --> 00:15:00.967
away and put them somewhere no
one can touch them, because at

00:15:00.967 --> 00:15:03.870
some point it has to connect to
another system to another system

00:15:03.870 --> 00:15:07.406
to another system that will tell
you where the one with the (

00:15:07.406 --> 00:15:12.278
inaudible ) and you can target
that organization and do it. I'm

00:15:12.278 --> 00:15:16.482
sure there's been 50 other talks
already about that type of

00:15:16.482 --> 00:15:20.887
stuff. That is the root and the
sequence of trust that is the

00:15:20.887 --> 00:15:27.326
world we live in today. So, you
know, again, I'm going to do a

00:15:27.326 --> 00:15:32.832
basic overview of things. We
have SMTP, FTP. They're not

00:15:32.832 --> 00:15:36.769
encryption mechanism. They were
not designed to encryption

00:15:36.769 --> 00:15:41.507
systems. They were protocols. At
the beginning, you know,

00:15:41.507 --> 00:15:45.011
everything is all about how do
we talk? Anytime an application

00:15:45.011 --> 00:15:50.016
developer builds a program, how
do I get to A to B? I got to A

00:15:50.016 --> 00:15:56.055
and B, and my design goal is
done. Security is here. I need A

00:15:56.055 --> 00:16:01.594
to B in a somewhat secure way.
We use SSL certificates and TLS

00:16:01.594 --> 00:16:04.730
and it's cool and fine. It's
great. At the core at the end of

00:16:04.730 --> 00:16:11.370
day, everybody is just concerned
with how do I get from A to B.

00:16:11.370 --> 00:16:17.510
How do I get the dick pic here
to here and make it look good?

00:16:17.510 --> 00:16:21.647
That's really the concern people
have. The secure tubes work,

00:16:21.647 --> 00:16:27.420
right? It's SSLA. It cape from
netscape. This stuff was tacked

00:16:27.420 --> 00:16:34.260
on. If you watch Moxie talk back
in 2011 he found the actual

00:16:34.260 --> 00:16:39.232
doctor from netscape, the Ph.D.
that wrote the original SSL

00:16:39.232 --> 00:16:44.070
libraries. He admitted, yeah, we
just tacked it on. We need some

00:16:44.070 --> 00:16:49.775
security, and we put it to the
side, and that was one point

00:16:49.775 --> 00:16:55.948
out. A sense then you had the
RFC 6101, 6176 and the TLS 13

00:16:55.948 --> 00:17:01.587
which is the new, new draft
coming out. If you need bed time

00:17:01.587 --> 00:17:06.893
reading go ahead. >> It's not
hyperboly to say SSL is the

00:17:06.893 --> 00:17:09.161
reason we have the Internet we
have today. Business is

00:17:09.161 --> 00:17:13.299
conducted because people feel
safe putting their credit card

00:17:13.299 --> 00:17:18.337
online and getting it to a
website. They see the green

00:17:18.337 --> 00:17:23.843
lock, and they know that their
credit card can't be stolen. >>

00:17:23.843 --> 00:17:27.947
Yeah. Anyone who says that
marketing doesn't deserve money

00:17:27.947 --> 00:17:33.452
has not been paying attention.
Seriously. You can see ice to an

00:17:33.452 --> 00:17:38.958
Eskimo if you have the right
marketing, guys. Why is it old

00:17:38.958 --> 00:17:43.029
and busted from a protocol
perspective? SSL has a problem

00:17:43.029 --> 00:17:46.599
with using identical keys for
messages and encryption, lack of

00:17:46.599 --> 00:17:49.635
protection from the handshake. I
won't list out specifically the

00:17:49.635 --> 00:17:53.539
version, but it's wonderful for
attacks, and suite cyber attacks

00:17:53.539 --> 00:17:58.144
and something about -- >>
Something about a Poodle. >>

00:17:58.144 --> 00:18:03.449
Something about a Poodle and
beast and fire sheep. Creative

00:18:03.449 --> 00:18:09.455
names really. TLS is the
solution. It's not SSL, and it

00:18:11.824 --> 00:18:17.063
took researchers like a year to
be as broken as it was before.

00:18:17.063 --> 00:18:22.668
But it's broken in interesting
ways. >> It provides the same

00:18:22.668 --> 00:18:24.837
certificate authority
infrastructure. >> Right. It

00:18:24.837 --> 00:18:29.675
doesn't matter if we create TLS
55, it still is using the same

00:18:29.675 --> 00:18:32.311
certificates if you bought the
same things with the same

00:18:32.311 --> 00:18:38.084
problems we're discussing
before. So interception. >> I

00:18:38.084 --> 00:18:40.252
can't play the music. It's too
much. >> We were going to do it

00:18:40.252 --> 00:18:44.724
for this, but unfortunately,
it's not conducive so what we're

00:18:44.724 --> 00:18:50.730
working with. When I did an
inventory of iOS it trusted

00:18:53.165 --> 00:18:59.472
about 226 certificate
authorities, about. I didn't get

00:18:59.472 --> 00:19:04.043
an exact count at the diversion
I had last looked at. You can go

00:19:04.043 --> 00:19:08.314
to Apple, and they list all the
ones they look at. My favorite

00:19:08.314 --> 00:19:12.284
is the Hong Kong post office. If
the Hong Kong post office

00:19:12.284 --> 00:19:16.422
wanting to be Google one day,
they can be Google. Fire trucks,

00:19:16.422 --> 00:19:21.627
FireFox trusts about 180. You
can go to that link. They list

00:19:21.627 --> 00:19:24.797
all of them. It's nice from a
transparency perspective that

00:19:24.797 --> 00:19:29.635
most of these manufacturers of
various systems actually list

00:19:29.635 --> 00:19:32.605
out the certificate authorities
in their root. Unfortunately,

00:19:32.605 --> 00:19:38.611
it's still a shitload where they
get added every day. Countries

00:19:38.611 --> 00:19:45.117
are like I need you trust these
five organizations and the

00:19:45.117 --> 00:19:48.654
browser for interoperability
sake has to put it into their

00:19:48.654 --> 00:19:53.692
root. It's very rare, and I
think Microsoft was one of the

00:19:53.692 --> 00:19:58.064
first people to do it, to
actually pull certificates out

00:19:58.064 --> 00:20:03.269
during a refresh. You know, one
of the things to consider, too,

00:20:03.269 --> 00:20:07.206
from an issuance of certificate
authorities is they're subject

00:20:07.206 --> 00:20:10.976
to many laws. They're subject to
local laws, state laws, federal

00:20:10.976 --> 00:20:14.714
laws, international laws, what
have you. If an organization

00:20:14.714 --> 00:20:17.950
decides that, you know, for
lawful purposes they want some

00:20:17.950 --> 00:20:21.721
form of interception, they do
all the government forms and you

00:20:21.721 --> 00:20:26.892
tell them SCA and the rest of
the world, no I'm not going to

00:20:26.892 --> 00:20:33.332
comply with this. It only takes
one globally trusted root

00:20:33.332 --> 00:20:37.436
authority to issue a bad
certificate for lots and lots of

00:20:37.436 --> 00:20:40.940
people to have a very bad time.
>> If you've ever looked at the

00:20:40.940 --> 00:20:45.511
lists and for a little more
paranoia, go to one of these

00:20:45.511 --> 00:20:49.014
links. Google it and look for
yourself. You can see which

00:20:49.014 --> 00:20:52.184
certificates Chrome trusts and
FireFox and which one are

00:20:52.184 --> 00:20:56.589
embedded in Windows and various
other iOSs. You can see how many

00:20:56.589 --> 00:21:00.593
there are. They're in so many
different countries under

00:21:00.593 --> 00:21:07.433
different jurisdictions, it will
make you worry. >> Something to

00:21:07.433 --> 00:21:12.605
also consider that we didn't
actually bring up in a corner

00:21:12.605 --> 00:21:16.375
case, the computers you're
using, the manufacturers can put

00:21:16.375 --> 00:21:19.645
their own certificate on it and
basically tell that system to

00:21:19.645 --> 00:21:23.015
trust it no matter what for
updates and everything else. >>

00:21:23.015 --> 00:21:27.086
They would do that. >> But that
type of activity, whether

00:21:27.086 --> 00:21:33.893
malicious or not, if implemented
incorrectly, can wreck havoc in

00:21:33.893 --> 00:21:40.699
terms of what gets trusted. If
you could possibly be

00:21:40.699 --> 00:21:45.271
intercepted without realizing
what's happening. So there's a

00:21:45.271 --> 00:21:50.209
subversion of secure
communications in the sense that

00:21:50.209 --> 00:21:52.611
there's basically two
categories. There's the illegal

00:21:52.611 --> 00:21:56.415
reasons to do it. You all go to
work, and you decide, I want to

00:21:56.415 --> 00:21:59.251
use the work computer. They make
you sign some forms and they're

00:21:59.251 --> 00:22:02.555
like, okay, we can monitor
everything you're doing. You hit

00:22:02.555 --> 00:22:09.695
a blue code, it proxies it out
and you're being watched. If our

00:22:09.695 --> 00:22:15.034
browsing porn, seriously. >> For
the past five or six years of my

00:22:15.034 --> 00:22:18.737
professional life, recommending
a lot of places do this. It's a

00:22:18.737 --> 00:22:21.106
good thing if you have to
protect a corporate network. >>

00:22:21.106 --> 00:22:23.876
You have good policies in place.
>> You're subverting the

00:22:23.876 --> 00:22:26.679
security inherent into the
communication protocol. >>

00:22:26.679 --> 00:22:31.517
Right. It would be ideal to have
it end-to-end, but that doesn't

00:22:31.517 --> 00:22:35.154
work for more corporations.
That's where you load balancers

00:22:35.154 --> 00:22:40.793
and front end it out. Now all of
a sudden its secure from this

00:22:40.793 --> 00:22:45.197
point to this point. It's only
secure until it hits the

00:22:45.197 --> 00:22:49.235
perimeter is no longer secured.
While you browse Gmail and

00:22:49.235 --> 00:22:53.172
everything, it's on the clear
network. The last potentially

00:22:53.172 --> 00:22:59.378
reasonable expectation is a
government request that has its

00:22:59.378 --> 00:23:04.650
own geopolitical issues I don't
want to get into. >> We go to

00:23:04.650 --> 00:23:09.655
the next cat gear. >> The not to
good but maybe secretly legal.

00:23:09.655 --> 00:23:15.060
The government request versus
government demand. Criminals,

00:23:15.060 --> 00:23:17.396
you know, the loan Iranian
hacker that wants to break into

00:23:17.396 --> 00:23:22.201
something and my personal
favorite advertisers. It's much

00:23:22.201 --> 00:23:26.038
easier if you're not secured to
target more ads to you, which

00:23:26.038 --> 00:23:28.274
makes more money for them, which
makes more money for other

00:23:28.274 --> 00:23:32.645
people and so on and so forth.
They have a secret agenda and

00:23:32.645 --> 00:23:39.218
not so secret agenda to make
sure that -- >> I didn't money

00:23:39.218 --> 00:23:43.289
was secret. >> They like to play
it off as it's better for you

00:23:43.289 --> 00:23:49.295
and the economy. A good example
of that is actually no script.

00:23:51.397 --> 00:23:56.869
No script, I believe, or add
block plus, one of the two, is

00:23:56.869 --> 00:24:00.706
working on what constitutes a
good advertisement. And what can

00:24:00.706 --> 00:24:04.877
go through because it's not
obtrusive. These are systems we

00:24:04.877 --> 00:24:09.048
rely on to protect ourselves
from malicious drive-byes and

00:24:09.048 --> 00:24:12.785
all kinds of other attack
techniques we hope it blocked.

00:24:12.785 --> 00:24:18.190
We're like, it's okay because
this is only -- there's nothing

00:24:18.190 --> 00:24:24.063
bad going on here. That's the
same approach with the PKI and

00:24:24.063 --> 00:24:27.399
everything else. It's okay
because somebody else has our

00:24:27.399 --> 00:24:33.405
best interests in mind. The
depressing reality check is most

00:24:40.980 --> 00:24:43.382
people are just conditioned to
click okay. When something bad

00:24:43.382 --> 00:24:46.285
happens, they look like this guy
over here. >> When this happens,

00:24:46.285 --> 00:24:49.421
you you know that people are the
weak link always. >> This poor

00:24:49.421 --> 00:24:52.491
sheep's credit card was used in
Bulgaria, and the bank won't

00:24:52.491 --> 00:24:54.860
give him back his money. That's
how he looks in the end.

00:24:54.860 --> 00:24:59.832
Solutions right? I stand up here
with a doom and gloom

00:24:59.832 --> 00:25:02.968
perspective for anything and
everything. The convergence

00:25:02.968 --> 00:25:07.506
project that we mentioned
earlier, Moxie did back in the

00:25:07.506 --> 00:25:13.379
day, I high lie recommend you
get it. It's some great work and

00:25:13.379 --> 00:25:17.916
takes a different approach to
what we were really attempting

00:25:17.916 --> 00:25:22.454
to do and our Band-Aid. The more
encompassing project, the

00:25:22.454 --> 00:25:25.958
certificate transparency
project, Google has some power

00:25:25.958 --> 00:25:29.561
and just going to put it out
there. The certificate

00:25:29.561 --> 00:25:34.566
transparent.org, while not fully
implemented or public in any way

00:25:34.566 --> 00:25:39.638
in the sense that they have
something to grab and easily and

00:25:39.638 --> 00:25:43.842
insert into everything you're
doing, they do have it built

00:25:43.842 --> 00:25:47.646
into Chrome and use a
certificate extension for things

00:25:47.646 --> 00:25:52.718
they control called the HSTS,
which allows them to do a form

00:25:52.718 --> 00:25:57.923
of pinning to say this is a
trusted one and I it belongs to

00:25:57.923 --> 00:26:01.293
me. I highly recommend you look
at it. >> What are the problems

00:26:01.293 --> 00:26:07.299
with the current infrastructure?
>> It was HDKB. P. HP -- KP.

00:26:17.109 --> 00:26:23.148
Thank you. Sorry. >> You can't
remember everything? >> I got it

00:26:23.148 --> 00:26:30.222
all stolen at Mandalay Bay. I
haven't got to the slide yet. >>

00:26:30.222 --> 00:26:35.661
One of the problems with the
current infrastructure is a

00:26:35.661 --> 00:26:39.832
certificate can be issued in
secret. There's no way to see

00:26:39.832 --> 00:26:45.204
that a certificate has been
generated. So these 531 in the

00:26:45.204 --> 00:26:48.740
previous examples and God knows
how many others generated exist.

00:26:48.740 --> 00:26:51.677
They won't be noticed until
something goes wrong, until a

00:26:51.677 --> 00:26:55.380
user notices that the
certificate is by the wrong

00:26:55.380 --> 00:27:01.320
authority, which just doesn't
happen. Or they try to hit

00:27:04.723 --> 00:27:07.926
Google, which has a certificate
pending which is a great way to

00:27:07.926 --> 00:27:10.863
detect when chicanery is going
on. The cool thing is students

00:27:10.863 --> 00:27:18.804
can't be issued that. All the
peers involved in the system,

00:27:18.804 --> 00:27:25.110
the ginger actions are visible
and public, and because of

00:27:25.110 --> 00:27:28.313
public they can be verified or
noticed when something bad

00:27:28.313 --> 00:27:35.554
happens. >> Exactly. Go look at
it seriously. In the end it will

00:27:35.554 --> 00:27:42.394
be that or a project like that
associated with the

00:27:42.394 --> 00:27:48.734
infrastructure we're using. So
pinning. Technically it's a --

00:27:48.734 --> 00:27:51.904
every application inside should
use a form of pinning, but it's

00:27:51.904 --> 00:27:56.875
a little cumbersome to get done.
At the core of it is trust this

00:27:56.875 --> 00:28:01.914
and only this certificate to say
that I am who I am. >> This

00:28:01.914 --> 00:28:06.018
model works really well with
mobile apps. They're dedicated

00:28:06.018 --> 00:28:09.488
on your phone or Twitter. It's
easy to pin a certificate in the

00:28:09.488 --> 00:28:13.659
app, because the app developer
is the up with providing the

00:28:13.659 --> 00:28:18.497
service. They can embed that,
and it's truly the end. >> It's

00:28:18.497 --> 00:28:22.134
great. When it works, it works.
Unfortunately, it is relatively

00:28:22.134 --> 00:28:28.140
hard to configure if you go out
and they tell you how to do the

00:28:34.079 --> 00:28:37.683
pinning and it's a giant web
page. From a normal

00:28:37.683 --> 00:28:40.919
administrator's perspective,
it's going to turn into one of

00:28:40.919 --> 00:28:45.257
those I could but type of
situations. In the end we really

00:28:45.257 --> 00:28:48.493
do not want. Implementation
varies obviously. The Google I

00:28:48.493 --> 00:28:51.396
mentioned incorrectly acronymed.
The example before, the Hong

00:28:51.396 --> 00:28:55.367
Kong post office could not send
my dick pic application, which

00:28:55.367 --> 00:29:02.507
is really what we're here for in
the end. So we're not

00:29:02.507 --> 00:29:06.712
developers. We're hackers. I
write scripts to achieve an end

00:29:06.712 --> 00:29:10.449
goal. I write a code to achieve
an end goal. I don't right it to

00:29:10.449 --> 00:29:15.654
do enterprise products, which is
why we put this out there in an

00:29:15.654 --> 00:29:20.158
open foreman so others can
really contribute. We have no

00:29:20.158 --> 00:29:27.032
power. I do not represent Google
or Microsoft or the IETF or

00:29:27.032 --> 00:29:31.003
anyone like that. We're trying
to find a temporary solution to

00:29:31.003 --> 00:29:35.340
what seems to be a permanent
problem that we can go with.

00:29:35.340 --> 00:29:41.179
Canary, our application and our
project, is not the solution but

00:29:41.179 --> 00:29:47.419
it's a fairly better one than
what is currently out there in

00:29:47.419 --> 00:29:51.890
the failing you never know who
you're trusting type of approach

00:29:51.890 --> 00:29:59.498
we use today. Yes, I got there,
and there's some various ideas

00:29:59.498 --> 00:30:03.535
as to how that occurred. The end
result is that stuff got stolen

00:30:03.535 --> 00:30:07.439
out of my room, and I lost my
laptops and had to rewrite 300

00:30:07.439 --> 00:30:13.445
or 400 lines of plug-ins last
night. I should have tried to do

00:30:15.847 --> 00:30:22.154
a repo or something. If it looks
hodgepodging, it's balls I was

00:30:22.154 --> 00:30:26.758
up most of the night. Articles,
protect your dick pkg -- pics.

00:30:26.758 --> 00:30:30.429
We want to make sure you realize
the site you're going to and the

00:30:30.429 --> 00:30:33.065
certificate sheet is what you're
going to. It's stopping shady

00:30:33.065 --> 00:30:36.201
shit. The whole structure is
meant to be a good idea and

00:30:36.201 --> 00:30:39.371
turned into a horribly abused
idea. >> It's so meant to be

00:30:39.371 --> 00:30:41.440
trustworthy. >> Yeah,
trustworthy. What the tool does,

00:30:41.440 --> 00:30:44.876
the tool is build in a client
server model. We built it that

00:30:44.876 --> 00:30:47.212
way so you could specifically
leverage or infrastructure and

00:30:47.212 --> 00:30:50.716
build your own plug-ins and do
what you're going to do. We'll

00:30:50.716 --> 00:30:56.722
show it in a section. There's a
cert comparison compared on what

00:31:16.975 --> 00:31:22.981
you sigh and what our
distributed system of service

00:31:31.156 --> 00:31:36.294
is. You go out, and it basically
will keep -- it will collect

00:31:36.294 --> 00:31:39.731
your searching locally and send
it to your server and compare

00:31:39.731 --> 00:31:42.501
them, and if you're matched
you're good. If it doesn't

00:31:42.501 --> 00:31:48.507
match, you might have have a
problem. Version 1 says you have

00:31:54.780 --> 00:32:00.952
a problem because what you see
is what the rest of the world

00:32:00.952 --> 00:32:03.688
sees. >> If the Canary dies,
then you have a problem. >> No

00:32:03.688 --> 00:32:06.391
one wants to kill the tiny,
cute, fat bird, but if it dies

00:32:06.391 --> 00:32:08.693
it dies. It doesn't protect you
from compromised sites. I can't

00:32:08.693 --> 00:32:11.429
tell you Facebook.com is jacked
up if it is around the world. It

00:32:11.429 --> 00:32:13.799
does not protect you from
subpoenas, warrants, people

00:32:13.799 --> 00:32:16.601
kicking down your door, someone
controlling the AS from a

00:32:16.601 --> 00:32:20.172
routing perspective. It will not
encrypt or protect your Dick

00:32:20.172 --> 00:32:25.644
pics at rest. That's not what
our application does. >> All

00:32:25.644 --> 00:32:31.650
Canary does is proceed multiple
perspectives. If your link is

00:32:33.985 --> 00:32:36.822
being hijacked or intercepts or
routed through a transparent

00:32:36.822 --> 00:32:43.428
proxy, submit a query to Canary,
which one will be outside of the

00:32:43.428 --> 00:32:48.400
jurisdiction and compare what
you see to what the world sees.

00:32:48.400 --> 00:32:52.103
If they're different, there's
probably something going on and

00:32:52.103 --> 00:32:55.607
something wrong. >> We are going
to release their server he code

00:32:55.607 --> 00:33:01.046
back on the repo. If you want to
spin your own up, you can spin

00:33:01.046 --> 00:33:04.382
of your own up. Obviously some
nefarious organization could

00:33:04.382 --> 00:33:08.587
spin up servers and put them
where they can control them.

00:33:08.587 --> 00:33:12.023
Realistically I'm not that
interesting. That's too it.

00:33:12.023 --> 00:33:15.961
Maybe they will. Who knows. So
the goal is a globally

00:33:15.961 --> 00:33:22.100
distributed network outside the
jurisdiction of one individual

00:33:22.100 --> 00:33:27.038
organization, power, agency,
control, area, what have you. It

00:33:27.038 --> 00:33:32.277
is scalable, and it's designed
to be able to accept many, many

00:33:32.277 --> 00:33:36.648
requests for second and the
return is basically 100, and

00:33:36.648 --> 00:33:41.853
that's good or bad. That's V 1.
We would hopefully build in

00:33:41.853 --> 00:33:46.224
certificate history chain so it
keeps track if any changes

00:33:46.224 --> 00:33:50.996
occurring in the change and some
of the mother featured Round

00:33:50.996 --> 00:33:55.800
Robining across the globe and
stuff like that. >> Have you

00:33:55.800 --> 00:34:00.939
heard of the SSL observatory?
It's a very cool project. One of

00:34:00.939 --> 00:34:04.776
the developers I contacted him
about using some of their code.

00:34:04.776 --> 00:34:09.281
We didn't end up using it. They
scan the Internet looking for

00:34:09.281 --> 00:34:15.287
SSL web servers and gather those
certificates and keep them in a

00:34:19.858 --> 00:34:26.564
database. They've done that for
a long time. They have multiple

00:34:26.564 --> 00:34:30.101
snapshots and a running history
of certificates, which you eat a

00:34:30.101 --> 00:34:33.939
lot of certificates. The Canary
has the potential to do the same

00:34:33.939 --> 00:34:37.175
thing. Rather than doing the
actual scanning to build the

00:34:37.175 --> 00:34:40.378
database. It's focused on the
most commonly used and popular

00:34:40.378 --> 00:34:44.883
websites. >> It's not meant to
be a stand over time but as it

00:34:44.883 --> 00:34:48.420
happened. I don't want to
compare the serve from a month

00:34:48.420 --> 00:34:51.923
ago. I want to know what you're
being presented at this

00:34:51.923 --> 00:34:55.393
particular moment >> This is the
Jazon structure. This is all it

00:34:55.393 --> 00:35:01.366
takes to commit a query to this
and get a shot back. >> I'd like

00:35:05.503 --> 00:35:11.509
to take this time to thank Red
beer. >> I'm not learning it. >>

00:35:19.551 --> 00:35:26.024
Yeah. He was instrumental in
helping us get it done on time.

00:35:26.024 --> 00:35:32.797
>> Yes. I can't think Geoff and
red beer and focus and various

00:35:32.797 --> 00:35:39.170
other people that recovered from
the enterprise. And I helped to

00:35:39.170 --> 00:35:45.710
make this be possible. Thank you
to the man in the beard up

00:35:45.710 --> 00:35:51.716
there. ( Applause ) >> It's very
straightforward. We don't want

00:35:55.587 --> 00:36:00.525
your information or log. If you
look at the code there is no

00:36:00.525 --> 00:36:05.864
logging other than a query was
made. All you have to do is

00:36:05.864 --> 00:36:10.201
whatever language or tool you
want, you can construct this

00:36:10.201 --> 00:36:15.874
that has these fields and this
form. We go and grab from the

00:36:15.874 --> 00:36:20.245
same website presented in the
query. Grab the TLS certificate

00:36:20.245 --> 00:36:23.782
and compare it to what you gave
to us. If it matches, we return

00:36:23.782 --> 00:36:28.053
it yes. If it doesn't match, we
will turn it one. It's as simple

00:36:28.053 --> 00:36:32.157
as that. >> The only IP or name
it keeps is the target we have

00:36:32.157 --> 00:36:37.262
to pull the certificates from.
It doesn't keep yours or a

00:36:37.262 --> 00:36:41.266
history on anything else. Once
they have pulled it, we keep the

00:36:41.266 --> 00:36:44.102
host name in the certificate
chain and don't care about the

00:36:44.102 --> 00:36:50.208
IP anyway. If you want to move
on. This is essentially the

00:36:50.208 --> 00:36:55.313
plug-in I was writing last
night. It's a FireFox plug-in.

00:36:55.313 --> 00:37:00.885
It turns out the NRO does not
have a security website

00:37:00.885 --> 00:37:05.990
apparently. So your dick picks
could be stolen. It's mostly

00:37:05.990 --> 00:37:12.097
because our system detected it.
It will warm you the same way.

00:37:12.097 --> 00:37:19.270
Basically it throws a red banner
up around it. It gives you a job

00:37:19.270 --> 00:37:23.875
description, and it's Job
Descriptor or Python or DC.

00:37:23.875 --> 00:37:28.446
There's particular add-ones.
There's no cert attached to and

00:37:28.446 --> 00:37:35.620
your Dick pic is taken by these
guys. I really want to meet you.

00:37:35.620 --> 00:37:41.726
I think you would be a very
interesting person to have a

00:37:41.726 --> 00:37:46.831
beer with. Just saying. >>
Freezing. Look, you know, beer

00:37:46.831 --> 00:37:51.936
is beer. Especially the next
version is a binary comparison,

00:37:51.936 --> 00:37:59.110
right. It goes up and hits it
and say yea or nay. With the

00:37:59.110 --> 00:38:03.982
next one, this is a good place
to submit your dick pics.

00:38:03.982 --> 00:38:09.988
There's a green border in this
case. Green border says yes, we

00:38:13.758 --> 00:38:16.895
have taken the certificate chain
and it matches. It matches what

00:38:16.895 --> 00:38:23.768
the server sees. If you want to
put your dick pic here, it will

00:38:23.768 --> 00:38:28.139
be protected by the same
certificates. >> This is where

00:38:28.139 --> 00:38:32.510
real developers can actually
contribute. We know FireFox, and

00:38:32.510 --> 00:38:36.314
we could see there's hooks for
intercepting the calls. We can

00:38:36.314 --> 00:38:40.685
enter is September the web
requests before they go out, and

00:38:40.685 --> 00:38:44.489
if the certificate chain doesn't
match, we can broke them. When

00:38:44.489 --> 00:38:49.260
you deal with an Android or iOS,
it's a lot more difficult to

00:38:49.260 --> 00:38:54.799
intercept and transition it and
move forward. If you move up the

00:38:54.799 --> 00:38:59.537
entire log-in into your bank or
whatever, your password could be

00:38:59.537 --> 00:39:02.540
transmitted before Canary knows
that something that has gone

00:39:02.540 --> 00:39:09.981
wrong. Your activity is logged,
and it didn't serve its purpose.

00:39:09.981 --> 00:39:13.718
>> Yeah. The browser are okay.
There's stuff actually built

00:39:13.718 --> 00:39:17.889
into the metscape libraries that
allow you full controversy over

00:39:17.889 --> 00:39:22.894
some of the stuff with chrome
and FireFox. It really is as

00:39:22.894 --> 00:39:26.664
Geoff was saying the
applications where iOS has a

00:39:26.664 --> 00:39:30.902
tight control over the exclusive
network and it's more after the

00:39:30.902 --> 00:39:37.242
fact we're working to get with
and get around. So why use it,

00:39:37.242 --> 00:39:41.813
right? The hole of everything.
Why use it? It's here to provide

00:39:41.813 --> 00:39:45.350
awareness. It's here to provide,
hey, something isn't right. I'm

00:39:45.350 --> 00:39:50.355
looking at this sight, and it's
not matching. It me or the rest

00:39:50.355 --> 00:39:57.862
of the world? We want lights on
fire failures where it's

00:39:57.862 --> 00:40:01.232
obvious. It's super lightweight.
The whole point is to take the

00:40:01.232 --> 00:40:07.472
code examples and throw it in
and do it yourself or use what

00:40:07.472 --> 00:40:13.778
we have. We don't cash data
requests. We might start cashing

00:40:13.778 --> 00:40:18.950
observed certs, but that has
less to do with and more to do

00:40:18.950 --> 00:40:22.186
with the general infrastructure
of the Internet. We'll never

00:40:22.186 --> 00:40:26.557
store your personal requests. >>
This is the light part of it

00:40:26.557 --> 00:40:30.028
where it's more of an
intellectual curiosity and to be

00:40:30.028 --> 00:40:34.966
able to speed up if it's
popular, God forbid. Speak up

00:40:34.966 --> 00:40:42.840
and do correlation and history.
When something changes, if it

00:40:42.840 --> 00:40:46.344
changes before the certificate
expires, just general tracking.

00:40:46.344 --> 00:40:51.449
>> Yeah. Why not use it. I mean,
really. Come on. That's what

00:40:51.449 --> 00:40:53.451
we're here for. That's why I
spent all of last night writing

00:40:53.451 --> 00:40:59.157
this crap and he spent all week.
No reason I can think of not to

00:40:59.157 --> 00:41:04.762
use it. That's why we're making
it open and putting it out there

00:41:04.762 --> 00:41:09.400
for everybody and trust your
coach and figure it out. Does it

00:41:09.400 --> 00:41:13.338
work for what you attempt to do
or work for the goals to

00:41:13.338 --> 00:41:17.508
achieve? I can't change that
opinion. Other people like

00:41:17.508 --> 00:41:22.847
myself like to know when their
stuff is messed with. >> We

00:41:22.847 --> 00:41:26.751
didn't write this for just the
general users. If you're

00:41:26.751 --> 00:41:31.756
concerned and have a real to be,
disagree with your government

00:41:31.756 --> 00:41:35.860
and want to change it somehow.
Some governments take a look at

00:41:35.860 --> 00:41:41.899
that and some take affirmative
action to limit your capability

00:41:41.899 --> 00:41:43.901
and limit your ability to
communicate in private. >> On if

00:41:43.901 --> 00:41:48.039
you're oat DEF CON network. >>
That, too. >> Either/or. This is

00:41:48.039 --> 00:41:53.344
where you can find it. The
TLSCanary.net is where we end up

00:41:53.344 --> 00:41:58.182
tossing, you know, instructions,
kind of use your guides here and

00:41:58.182 --> 00:42:02.620
there, what it's there to do and
some observations. Right now

00:42:02.620 --> 00:42:05.590
it's plain text and get had you
been is where you pull the

00:42:05.590 --> 00:42:11.696
source from that will upload
tomorrow or Tuesday. >> When do

00:42:11.696 --> 00:42:17.568
you get your laptop back? >>
When I get my new laptop shipped

00:42:17.568 --> 00:42:22.106
in. It will contain client
codes, our FireFox example and

00:42:22.106 --> 00:42:25.777
hopefully our other example and
some of the code we're working

00:42:25.777 --> 00:42:31.015
on to do the application the
iPhone platform >> It used

00:42:31.015 --> 00:42:37.021
lightweight. If you want to go
to AC instance and run the code

00:42:37.021 --> 00:42:41.626
yourself and use your own
private Canary, great. Have one.

00:42:41.626 --> 00:42:46.697
It works. >> The request
structure is so light and what

00:42:46.697 --> 00:42:51.302
it's pulling is not context.
It's certificates. So it's a

00:42:51.302 --> 00:42:56.841
very low transaction overhead if
you want to run it yourself. So

00:42:56.841 --> 00:43:02.346
any questions? ( Inaudible
question ) >> It will say that a

00:43:02.346 --> 00:43:07.418
self-signed cert does not match
what I see globally unless the

00:43:07.418 --> 00:43:12.957
server also has the same. >> If
you present us with this

00:43:12.957 --> 00:43:17.562
self-signed certificate and give
you the same one, it matches.

00:43:17.562 --> 00:43:23.100
It's not your problem. It's a
one to one, and that's what

00:43:23.100 --> 00:43:27.271
matters from the application
perspective. >> So this is

00:43:27.271 --> 00:43:32.610
pretty cool stuff, guys. I was
wondering if a guy goes along

00:43:32.610 --> 00:43:35.413
with OCSP, except for they
employ with a security

00:43:35.413 --> 00:43:39.484
authority. This is more of
gathering Intel across the

00:43:39.484 --> 00:43:43.588
community and sharing that
information. Did you think of

00:43:43.588 --> 00:43:46.958
publishing this as part of an
RFC to kind of standardize this

00:43:46.958 --> 00:43:52.964
as a method for additional
checks. It will be cool in this

00:43:52.964 --> 00:43:57.902
information gets out there to
where people make decisions on

00:43:57.902 --> 00:43:59.904
authorities and go, wait a
manipulate knit. Those

00:43:59.904 --> 00:44:05.843
certificate authorities are bad
and monitor those guys. Which

00:44:09.547 --> 00:44:12.216
one ares doing the proper things
and which ones aren't. If

00:44:12.216 --> 00:44:15.152
they're not doing the proper
things, get rid of them. >>

00:44:15.152 --> 00:44:19.590
Sure. The potential is out
there. This is an open source

00:44:19.590 --> 00:44:23.194
and query searches and what we
observe. Someone without

00:44:23.194 --> 00:44:28.032
authority wanted to go through
and do that effort, we'd be more

00:44:28.032 --> 00:44:32.103
than happen to suspect that and
provide whatever information to

00:44:32.103 --> 00:44:37.074
find. >> This is a Band-Aid. >>
It is a Band-Aid and will

00:44:37.074 --> 00:44:40.711
require someone with power to
actually implement those type of

00:44:40.711 --> 00:44:43.614
processes and protocols and
procedures. >> I personally

00:44:43.614 --> 00:44:47.351
would rather see somebody like
the Google transparency project

00:44:47.351 --> 00:44:51.722
move forward. >> We'll see if
someone from Google is here and

00:44:51.722 --> 00:44:57.028
wants to din grate that. That
works took. >> Something that

00:44:57.028 --> 00:45:01.265
solving the problem is and put a
Band-Aid on it so you can detect

00:45:01.265 --> 00:45:06.704
when the problem is being
exploited. >> First of all,

00:45:06.704 --> 00:45:11.909
thank you for helping protect by
dickpics. >> That's what we're

00:45:11.909 --> 00:45:17.915
here for. If your slongis on the
web. >> Did you contemplate that

00:45:21.886 --> 00:45:26.791
Paas part of the Canary
exercise? >> I have revocation

00:45:26.791 --> 00:45:31.996
built into the extension. The
Canary project on its own is a

00:45:31.996 --> 00:45:36.767
cert comparison tool. It could
be built into the server, but

00:45:36.767 --> 00:45:42.006
it's one check to slow it down.
If you already utilize the

00:45:42.006 --> 00:45:46.344
extension libraries, it can do
the revocation check before it

00:45:46.344 --> 00:45:51.549
pulls it. In the example of the
FireFox extension, it would just

00:45:51.549 --> 00:45:57.989
check it and say it's bad and
not bother sending the thing up.

00:45:57.989 --> 00:46:02.994
>> We're not replacing. We're
just augmenting. >> I'm curious

00:46:02.994 --> 00:46:07.465
in a compromised case where you
have a mix of good state and bad

00:46:07.465 --> 00:46:10.234
state, how do you know what
reality is? Are you going by

00:46:10.234 --> 00:46:14.839
numbers? It seems like since
you're not logging any kind of

00:46:14.839 --> 00:46:17.675
identifying information or
tracking information from users

00:46:17.675 --> 00:46:21.879
that potentially maybe your lone
Iranian hacker can send five

00:46:21.879 --> 00:46:29.120
from them to you. >> In the case
of -- I think I'm hearing you

00:46:29.120 --> 00:46:35.393
correctly. In the case to mix
some are good and some are bad

00:46:35.393 --> 00:46:41.198
type of scenarios. You need an
algorithm that says 5% of the

00:46:41.198 --> 00:46:47.471
world sees it this way, and
what's the odds that 65% of my

00:46:47.471 --> 00:46:51.809
300 sensors are bad? We're
considering putting in the

00:46:51.809 --> 00:46:56.347
confidence of how good this is
from what you're seeing. In V1

00:46:56.347 --> 00:47:01.385
it's not something we put in.
We're thinking about those

00:47:01.385 --> 00:47:06.991
problems. At what point and
sample size do I need? >>

00:47:06.991 --> 00:47:10.094
There's the implications two
Jackasses being an arbitrator of

00:47:10.094 --> 00:47:12.997
what is good or bad. This is
simple. It presents the sitters

00:47:12.997 --> 00:47:18.369
and signature and serial number
and verify if they match and

00:47:18.369 --> 00:47:23.240
send it right back. >>
Fundamentally saying you won't (

00:47:23.240 --> 00:47:28.112
inaudible ) you're limiting
yourself. There's a lot you can

00:47:28.112 --> 00:47:34.452
do. >> We won't log. I don't
care where they come from. When

00:47:34.452 --> 00:47:40.291
we do a phone grab, we grab it.
Those will probably be cashed at

00:47:40.291 --> 00:47:44.462
first for efficiency and for low
balancing and spreading the

00:47:44.462 --> 00:47:49.900
load. In the long time I'd like
to see what they've done and

00:47:49.900 --> 00:47:53.637
start building the database and
looking at how certificates

00:47:53.637 --> 00:47:58.843
change over time. It's academic
and join the service and make it

00:47:58.843 --> 00:48:01.445
better. >> All right. Well,
we're out of time. Come find us

00:48:01.445 --> 00:48:06.650
in the bar if you want if you're
still here. I appreciate your

00:48:06.650 --> 00:48:11.856
time, and hopefully your dick
pics will be safe in the future.

00:48:11.856 --> 00:48:13.858
( Cheers and applause )

