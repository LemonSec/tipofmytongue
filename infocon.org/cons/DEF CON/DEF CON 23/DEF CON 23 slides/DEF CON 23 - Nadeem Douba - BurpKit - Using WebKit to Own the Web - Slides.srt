00:00:00.067 --> 00:00:04.838
 this is BurpKit using WebKit to
own the web, welcome welcome.

00:00:04.838 --> 00:00:11.845
	>> Hi everybody, I thought I
would have big competition with

00:00:11.845 --> 00:00:16.917
Charlie Miller, I guess, thank
you for coming out. 	My name is

00:00:16.917 --> 00:00:19.820
Nadeem and I'll be presenting
BurpKit, using WebKit to own the

00:00:19.820 --> 00:00:21.822
web. 	I'm, I love hacking,
exploiting stuff, making tools

00:00:21.822 --> 00:00:23.824
to break stuff. 	I did prior
work, Sploitago, DEF CON 20, and

00:00:23.824 --> 00:00:25.826
Canari, used by a bunch of
companies. 	If you want to see

00:00:25.826 --> 00:00:27.828
my page, there are plenty of
tools you can play with and I'm

00:00:27.828 --> 00:00:29.830
sure there is something to meet
your requirement. 	I'm going to

00:00:29.830 --> 00:00:31.832
talk about how to integrate
BurpKit into your web tools and

00:00:31.832 --> 00:00:37.838
I integrated it into BurpSuite.
	And how, I use it in BurpKit,

00:01:18.045 --> 00:01:20.981
design concerns and I'll show
demos. 	We'll have final

00:01:20.981 --> 00:01:26.987
thoughts and hopefully some time
to answer any questions. 	So --

00:01:32.225 --> 00:01:36.763
BurpKit came around, I kind of
felt we were stuck in this state

00:01:36.763 --> 00:01:43.804
where, we have these massive web
applications running the web

00:01:43.804 --> 00:01:48.775
today, mashups of everything,
Facebook connect, Twitter feeds,

00:01:48.775 --> 00:01:52.546
a Jack web service calls,
rendering different parts of the

00:01:52.546 --> 00:01:57.451
webpage and not getting the full
picture if you're just HTML

00:01:57.451 --> 00:02:03.490
scraping. 	Our security tools
are not advancing. 	We're stuck

00:02:03.490 --> 00:02:09.496
doing counsel base tacking, and
in fact the only app that I

00:02:11.665 --> 00:02:19.206
think has a web view is proxy
from web purify. 	We're stuck in

00:02:19.206 --> 00:02:24.244
the Middle Ages, and I was
really getting frustrated at

00:02:24.244 --> 00:02:28.315
client sites, they have huge
apps. 	And I'm using BurpSuite

00:02:28.315 --> 00:02:33.520
and no way to see, if there was
a bunch of AJAX calls that had

00:02:33.520 --> 00:02:41.261
to be made ahead of time within
BurpSuite to render the content

00:02:41.261 --> 00:02:48.368
of the page. 	So, like I said,
our tool kit, mostly console, we

00:02:48.368 --> 00:02:54.307
have BurpSuite, defector web
testing tool and in BurpSuite we

00:02:54.307 --> 00:03:00.013
only have that really lame
render tab, that uses LOBO,

00:03:00.013 --> 00:03:05.018
nobody uses it, the guys that I
spoke to, and the other ones,

00:03:05.018 --> 00:03:08.221
are just proxies and web secure
flash proxy dot app has a web

00:03:08.221 --> 00:03:14.227
screw. 	When I, set out to build
the tool -- I said, we really

00:03:19.399 --> 00:03:22.202
need to start taking advantage
of modern web browsing

00:03:22.202 --> 00:03:28.041
capabilities in our tools.
	These tools like the web need

00:03:28.041 --> 00:03:32.079
to interpret Javascript and
inspect content. 	The web

00:03:32.079 --> 00:03:38.085
browser itself, is. 	Compel
leapt tool, give you lots of

00:03:41.121 --> 00:03:45.625
capabilities and not taking
advantage of it, we need the

00:03:45.625 --> 00:03:53.066
tool to interact with the DOM
and vice versa. 	So WebKit.

00:03:53.066 --> 00:03:55.268
	What is WebKit? If you're not
familiar -- most think think

00:03:55.268 --> 00:04:02.576
[static-inaudible] but the the
core of Safari, and core of web

00:04:02.576 --> 00:04:05.011
browser pro products. 	That
renders different parts of page.

00:04:05.011 --> 00:04:11.017
	And -- parts in Chrome and
other android browsers and other

00:04:15.021 --> 00:04:17.724
products. 	I like this
definition. 	WebKit is basically

00:04:17.724 --> 00:04:19.726
collection of views after freeze
somehow manages to render HTML

00:04:19.726 --> 00:04:21.728
-- [static-inaudible] so, if you
look at WebKit, it's essentially

00:04:21.728 --> 00:04:25.532
-- they're broken in 2 major
components. 	One is Java script

00:04:25.532 --> 00:04:31.538
core, garbage collection
debugging etc... 	The second is

00:04:37.911 --> 00:04:42.048
WEBCOR, responsible for
everything else. 	You have web

00:04:42.048 --> 00:04:45.218
inspector you right click on
webpage and say inspect

00:04:45.218 --> 00:04:51.224
elements, that's part of WEBCOR.
	CSS, all of that is part of

00:04:56.096 --> 00:05:02.035
WEBCOR. 	When you try to bring
WebKit into your tool you're

00:05:06.873 --> 00:05:10.243
primarily dealing with these 2
major components and different

00:05:10.243 --> 00:05:13.313
libraries will give you
different levels of abstraction

00:05:13.313 --> 00:05:19.920
of WebKit. 	Here are a few known
implementations of forks and

00:05:19.920 --> 00:05:24.057
forks of WebKit. We all know
Apple, Safari, android, AKAMAI

00:05:24.057 --> 00:05:30.063
and Java, just recently after
the release of 1.8 update 30,

00:05:34.000 --> 00:05:38.338
started getting web view
natively bundled with Java, and

00:05:38.338 --> 00:05:44.878
what's interesting, on the graph
on the left, you see 2 major

00:05:44.878 --> 00:05:48.315
companies driving the project
are still Apple and Google even

00:05:48.315 --> 00:05:54.487
though Google forked away from
WebKit. 	They're now have Google

00:05:54.487 --> 00:06:00.927
Chrome but major contributors.
	The question is why use WebKit?

00:06:00.927 --> 00:06:06.933
So the reason why, is primarily
we have widespread adoption.

00:06:09.669 --> 00:06:14.107
	That means the websites out
there to day, they're all going

00:06:14.107 --> 00:06:19.112
to be compatible with WebKit.
	You're not using links browser,

00:06:19.112 --> 00:06:22.882
not imbed links browser where
nobody is using it. 	I want to

00:06:22.882 --> 00:06:25.752
use something that everybody
serve coding websites for. 	And

00:06:25.752 --> 00:06:31.758
the second part, there's lots of
language support. 	If you go on

00:06:34.160 --> 00:06:37.497
the web and looking for a
language binding for WebKit,

00:06:37.497 --> 00:06:40.567
there's tons of stuff out there
for Java, python, CC plus,

00:06:40.567 --> 00:06:46.373
there's lots of implementations
out there. 	Part able across

00:06:46.373 --> 00:06:52.178
many platforms. 	Because Google
and Apple wants browser to work

00:06:52.178 --> 00:06:56.216
on all major platforms. 	It
gives you basic API. 	So, the

00:06:56.216 --> 00:07:01.888
[static-inaudible] you'll be
susceptible to the same bug that

00:07:01.888 --> 00:07:07.894
affects WebKit library. 	It's
hungry for system resources,

00:07:16.870 --> 00:07:20.940
that's expected. 	You have a
whole bunch of stuff going on to

00:07:20.940 --> 00:07:26.012
render the page, execute the
Javascript etc... 	But that

00:07:26.012 --> 00:07:30.984
really, those 2 cons were, they
didn't drive me away from

00:07:30.984 --> 00:07:33.887
WebKit. 	Okay, the code is
susceptible to bugs, but I'm

00:07:33.887 --> 00:07:41.261
assessing client websites. 	And
unless they want to exploit me,

00:07:41.261 --> 00:07:46.499
you know, I'm not really
worried. 	So, how can you use

00:07:46.499 --> 00:07:51.738
WebKit? There's a whole bunch of
language binding available.

00:07:51.738 --> 00:07:55.475
	These are some of the major
languages supported. 	Libraries

00:07:55.475 --> 00:08:00.413
on the other side. 	What you O I
use is [static-inaudible] web

00:08:00.413 --> 00:08:06.553
view. 	I'll go over why.
	BurpKit, BurpKit is basically,

00:08:06.553 --> 00:08:14.361
the combination of BurpSuite.
	One of best tools for testing

00:08:14.361 --> 00:08:16.363
web apps and Java web view or
WebKit implementation. 	In Java

00:08:16.363 --> 00:08:19.466
FX what they provide you is
essentially the very high level

00:08:19.466 --> 00:08:21.835
API, which -- direct access to
the web view, which was

00:08:21.835 --> 00:08:23.837
responsible for rendering the
webpage and debugger, needs

00:08:23.837 --> 00:08:26.840
hacking as well as web engine.
	And, what I was able to do with

00:08:26.840 --> 00:08:29.976
this, is provide a real
rendering tab, that's right. 	No

00:08:29.976 --> 00:08:34.647
more logo, what you'll see in a
few minutes is a demo of real

00:08:34.647 --> 00:08:37.751
render tab, where Google fully
rendered, not probe broken up in

00:08:37.751 --> 00:08:39.753
LOBO tab. 	Buy directional
bridge between

00:08:39.753 --> 00:08:41.755
[static-inaudible] I'll go into
that in a few minutes. 	When I

00:08:41.755 --> 00:08:43.790
was designing this, I was
looking all over the web for

00:08:43.790 --> 00:08:46.292
Java -- came across 2 leaders.
	Java FK and JX browser. 	JK

00:08:46.292 --> 00:08:48.561
browser uses chromium to provide
you with a Java interface. 	And,

00:08:48.561 --> 00:08:50.830
but the only problem was, to
redistribute my product, I would

00:08:50.830 --> 00:08:53.099
have to redistribute 250 megs of
library with the project. 	The

00:08:53.099 --> 00:08:55.802
other part is was not free. 	It
was closed-source and I was tied

00:08:55.802 --> 00:08:58.271
to whatever the developers chose
to expose to me in terms of

00:08:58.271 --> 00:09:01.074
interface. 	And finally API was
not that clean. 	So of the pros

00:09:01.074 --> 00:09:07.680
and cons of Java FX. 	It's easy
to use web application, you're

00:09:07.680 --> 00:09:14.020
not confused with all sorts of
funky function called, and has

00:09:14.020 --> 00:09:19.259
complete Javascript bridge. 	You
can inject Java objects into

00:09:19.259 --> 00:09:25.265
Javascript engine, and retrieve
Javascript and play within the

00:10:30.196 --> 00:10:35.134
Java virtual machine. 	It levels
Java [static-inaudible] I'll go

00:10:35.134 --> 00:10:39.539
into that later. 	It does
provide [static-inaudible]

00:10:39.539 --> 00:10:43.977
provide profiling information
only available through some

00:10:43.977 --> 00:10:47.046
hacking. 	They don't really
document it. 	It's still a work

00:10:47.046 --> 00:10:52.719
in progress, at least bundle
with Java 1.8 plus. 	When I say

00:10:52.719 --> 00:10:58.591
API is incomplete not getting
any of the nice things that you

00:10:58.591 --> 00:11:02.462
see in web browser, some of the
stuff you have to reinvent the

00:11:02.462 --> 00:11:08.468
wheel and. 	Little document on
advance features. 	If you want

00:11:11.804 --> 00:11:16.176
to use debugger function, you
have to dig through that source

00:11:16.176 --> 00:11:22.015
code to find where the debugger
is exposed in the API, and,

00:11:22.015 --> 00:11:25.285
they're kind of labeled, it
makes you nervous, is this going

00:11:25.285 --> 00:11:27.587
to go away or stick around. 	It
gives you indication they're

00:11:27.587 --> 00:11:34.961
still working through API, but
give you enough to work with so

00:11:34.961 --> 00:11:39.632
you can make neat tools. And
there are still rendering bugs

00:11:39.632 --> 00:11:42.735
as expected. 	But for the most
part, it does a really great

00:11:42.735 --> 00:11:49.642
job. 	So implementation. 	So, I
had various challenges when I

00:11:49.642 --> 00:11:54.781
had actually tried to embedded
WebKit into BurpSuite. 	One was

00:11:54.781 --> 00:11:58.751
that BurpSuite was using swing
event. 	Swing is old GOOEY

00:11:58.751 --> 00:12:04.691
library, and web view was
written for Java effects. 	And,

00:12:16.769 --> 00:12:20.239
so there had to be some sort of
integration point there. Web

00:12:20.239 --> 00:12:25.245
engine doesn't have a load
content -- what that means is

00:12:25.245 --> 00:12:31.784
that if I wanted to load an HTML
page with base URL so I can get

00:12:31.784 --> 00:12:35.588
different images and stuff from
the server but have content in

00:12:35.588 --> 00:12:40.827
desktop on client's, it wasn't
possible. 	So I had to find some

00:12:40.827 --> 00:12:46.366
way of hacking it. 	BurpSuite
had to interact with Javascript

00:12:46.366 --> 00:12:51.771
and vice versa. 	So the first
challenge was very easy to

00:12:51.771 --> 00:12:57.744
solve. 	There were a few
glitchs. 	Java gives JFX panel,

00:13:00.346 --> 00:13:05.652
-- [static-inaudible] -- you
have to be careful with

00:13:05.652 --> 00:13:11.257
intervening synchronous function
calls. 	If I had getter method

00:13:11.257 --> 00:13:15.428
that went through swing thread
first, Java effects second and

00:13:15.428 --> 00:13:19.399
back to swing or the other way
around, I run into deadlock

00:13:19.399 --> 00:13:23.302
issues because threads would be
waiting. 	There was a lot of

00:13:23.302 --> 00:13:28.875
hacking with rappers, had to do
eager fetching to make sure

00:13:28.875 --> 00:13:31.878
appropriate resources were
allocated on the appropriate

00:13:31.878 --> 00:13:35.114
loop. 	This is something you
have to do if you work with

00:13:35.114 --> 00:13:39.786
swing and Java effects@
sometime. 	Second challenge.

00:13:39.786 --> 00:13:45.792
	Loading content with basic URL.
	Repeater tab allows you to

00:13:48.695 --> 00:13:50.697
repeat a request, look at
response. 	In order to look at

00:13:50.697 --> 00:13:57.103
the response in a real render,
basically with WebKit, I didn't

00:13:57.103 --> 00:14:00.473
want to reissue the request, all
I have access to in terms of

00:14:00.473 --> 00:14:05.812
support for request was get. 	I
don't want the response to

00:14:05.812 --> 00:14:11.851
change based on time. 	I want to
see what I got in the response

00:14:11.851 --> 00:14:16.122
tab in WebKit. 	So I had to hook
the Java. net handling

00:14:16.122 --> 00:14:22.962
framework. 	Web view uses that
framework to process HTTP

00:14:22.962 --> 00:14:27.567
request. 	So the entire, HTTP
request framework is hook able.

00:14:27.567 --> 00:14:33.573
	Change these responses and so
on. 	Implemented 2 new handlers.

00:14:36.242 --> 00:14:39.445
	What you see, the minimum
amount of implementation you

00:14:39.445 --> 00:14:42.715
have to do in terms of
overriding the preexisting

00:14:42.715 --> 00:14:50.456
[static-inaudible] handlers.
	What those protocol handlers

00:14:50.456 --> 00:14:57.930
did, was tag request that was
suppose to be repeated. 	Tag

00:14:57.930 --> 00:15:03.870
user -- and if protocol handler
saw that, it would fetch the

00:15:06.072 --> 00:15:09.642
content from a cash rather than
going life to the server. 	That

00:15:09.642 --> 00:15:14.514
was a fun exercise. 	Because it
involved a lot of digging in

00:15:14.514 --> 00:15:19.318
source code and figuring out how
things worked. 	Third challenge

00:15:19.318 --> 00:15:24.624
was easy to fix. 	In the end.
	Only thing I ran into was

00:15:24.624 --> 00:15:28.461
deadlocks. 	Essentially that web
engine bridge is readily

00:15:28.461 --> 00:15:32.532
available for you to use, you
just need to know how to use it,

00:15:32.532 --> 00:15:37.837
how the web engine returns
objects. 	That's all documented.

00:15:37.837 --> 00:15:43.509
	The only glitch there, is in
some cases using reflection

00:15:43.509 --> 00:15:49.115
algorithm to determine whether
or not a field function is

00:15:49.115 --> 00:15:52.952
accessible. 	You have to write a
lot of wrapper to get around

00:15:52.952 --> 00:15:55.621
that [static-inaudible] --
there's a lot of cases where you

00:15:55.621 --> 00:16:03.095
have to eagerly substantiate
swing components in the right

00:16:03.095 --> 00:16:08.734
event loop, swing event loop.
	This is the final project.

00:16:08.734 --> 00:16:14.273
	Before and after. 	On the left
you see logo, ugly Google page

00:16:14.273 --> 00:16:20.112
and on the right you see Google
in all its glory. 	So here,

00:16:20.112 --> 00:16:26.118
let's show you what BurpKit
looks like. 	So, BurpKit, you

00:16:36.095 --> 00:16:42.101
get 3 extra tabs. 	One is a
bonus. 	Burp KITTY full web

00:16:42.101 --> 00:16:47.206
browser. 	Which and you have
basically a Javascript counsel

00:16:47.206 --> 00:16:52.712
on the bottom. 	SS tracker I'll
show you later. 	Page resource

00:16:52.712 --> 00:16:58.217
tab, shows you H references, and
other references to on tent

00:16:58.217 --> 00:17:01.087
within the page. 	And the nice
thing here, you right click on

00:17:01.087 --> 00:17:06.092
these and send them to any part
of the BurpSuite framework. 	If

00:17:06.092 --> 00:17:12.298
I send repeat err, you see, I
get request that WebKit made

00:17:12.298 --> 00:17:17.069
with all of the cookies that it
has, so you can maintain session

00:17:17.069 --> 00:17:23.109
within BurpSuite. 	If I go into,
if I repeat a request you see ex

00:17:23.109 --> 00:17:26.746
pra BurpKit tab and essentially
the same view you see in Burp

00:17:26.746 --> 00:17:32.752
KITTY, unfortunately the screen
is too small here. 	Okay, so you

00:17:36.956 --> 00:17:42.562
see Google here. 	And, basically
this view you're going to be

00:17:42.562 --> 00:17:46.499
able to see in any message
editor tab within BurpSuite. 	It

00:17:46.499 --> 00:17:53.572
will manifest itself here, if we
have HTML document return,

00:17:53.572 --> 00:17:59.645
you'll see these as well here.
	Even intruder. 	The other nice

00:17:59.645 --> 00:18:04.750
thing here, is that I added a
Burp script tab. 	It allows you

00:18:04.750 --> 00:18:07.553
to build Javascript base web web
applications. 	If you want to

00:18:07.553 --> 00:18:10.523
write some advanced HTML scraper
you can. 	It allows you to oos

00:18:10.523 --> 00:18:12.525
WebKit to navigate pages,
extract that information, to

00:18:12.525 --> 00:18:18.531
interact with BurpSuite at the
same time, send that information

00:18:39.685 --> 00:18:43.322
from WebKit to BurpSuite. 	And
for you python users, that's an

00:18:43.322 --> 00:18:49.328
extra bonus. 	So -- I hope that
was kind of impressive we'll

00:18:52.531 --> 00:18:57.036
give you demos. 	So, the first
[static-inaudible] tracker.

00:18:57.036 --> 00:19:02.975
	This is -- a lot -- is my
screen still up there. 	A lot of

00:19:06.045 --> 00:19:12.018
potential for WebKit where we
use WebKit effectively is S

00:19:12.018 --> 00:19:18.024
tracking. 	So -- let's say, I
come across a lot, I want to

00:19:21.360 --> 00:19:27.366
know where how bad a stored SS
vulnerability is. 	I can send

00:19:31.871 --> 00:19:38.811
this to the repeater. 	I don't
know happened to resolution

00:19:38.811 --> 00:19:44.817
there, thank you for telling me.
	Is that better? 	>> No. 	>>

00:19:48.988 --> 00:19:54.994
Just let me know. 	>> Is that
better? Sorry about that. 	Let's

00:20:01.534 --> 00:20:07.139
see if we can increase a bit to
get more real estate on the

00:20:07.139 --> 00:20:13.145
screen there. 	Is that good? 	>>
Yes. 	>> Great, 	Nadeem Douba:

00:20:15.881 --> 00:20:19.318
Say I want to track an XSS, I'm
using TRI editor, allows to

00:20:19.318 --> 00:20:25.324
render XTML, pretend this is the
app, I want to track XSS across

00:20:28.728 --> 00:20:36.068
the app. 	I can, value in the
alert box, tainting value.

00:20:36.068 --> 00:20:43.843
	Generate ran done ID, when I
press go, you'll see that when I

00:20:43.843 --> 00:20:48.280
go to the BurpKit tab it tells
me I have one alert, no alert

00:20:48.280 --> 00:20:54.286
box, it shows content of alert.
	If I push offer access tracker,

00:20:56.655 --> 00:21:01.627
you see entry, that says I
detected tainting value,

00:21:01.627 --> 00:21:05.931
detected alert and originally
came from this webpage and now

00:21:05.931 --> 00:21:11.937
in this webpage. 	Now you
understood how how stored

00:21:14.173 --> 00:21:18.577
vulnerability has gone in the
app. 	How bad it is. 	I think

00:21:18.577 --> 00:21:23.482
that's example how we can use
WebKit to perform dynamic

00:21:23.482 --> 00:21:28.120
analysis in the app in a very
easy way. 	So we don't have to

00:21:28.120 --> 00:21:33.259
inspect HTML, the nice part.
	Say I want to get the money

00:21:33.259 --> 00:21:38.297
shot and I want that alert box
so I can take a screen shot.

00:21:38.297 --> 00:21:44.236
	Toggle this button, press go
again, get the alert box, take

00:21:44.236 --> 00:21:50.242
the money shot, screen shot
there, and good to go. 	That's

00:21:53.612 --> 00:21:59.618
the money shot, so, and, the
last thing I would like to show

00:22:05.224 --> 00:22:11.230
you here, say you want to do
some web inspect. 	You can

00:22:20.339 --> 00:22:25.144
launch firebug light. 	It comes
up with inspector and you can do

00:22:25.144 --> 00:22:29.615
the same thing you do with
firebug right from BurpSuite.

00:22:29.615 --> 00:22:35.621
	That's the demo and part of
repeater tab. 	Now the next demo

00:22:38.057 --> 00:22:42.294
I'll show you is dom interaction
-- and how we script for

00:22:42.294 --> 00:22:47.800
followers. 	I've included on the
DVD, with this project a bunch

00:22:47.800 --> 00:22:53.772
of examples. 	This is will be on
gethub later. 	I included a

00:22:53.772 --> 00:22:58.644
bunch of examples you can use.
	This is one of things I do,

00:22:58.644 --> 00:23:05.184
it's a quick way of dumping
users Twitter followers. 	So --

00:23:05.184 --> 00:23:09.989
highlight this one feature here,
in bottom right hand corner you

00:23:09.989 --> 00:23:16.028
see refresh button. 	But what
that does, essentially creates

00:23:16.028 --> 00:23:19.865
this loop that you can trigger
every time a page -- this script

00:23:19.865 --> 00:23:22.701
gets run. 	You essentially
created loop with document

00:23:22.701 --> 00:23:24.703
unload. 	Press play, it asks
what user you want to scrape, I

00:23:24.703 --> 00:23:32.177
use this random user, it's
scrolling down to get all of the

00:23:32.177 --> 00:23:38.183
user's followers and collecting
all of this information and now,

00:23:45.524 --> 00:23:51.530
I can save to CSV -- 	Look at
results and there you go, I got

00:23:59.171 --> 00:24:03.309
a full list of Twitter followers
not doing anything, just running

00:24:03.309 --> 00:24:07.079
my Burp script. 	I extended to
include a whole bunch of things

00:24:07.079 --> 00:24:10.683
like injected Javascript -- a
bunch of things that come from

00:24:10.683 --> 00:24:13.485
note JS and allow extensions to
write directly to the file

00:24:13.485 --> 00:24:15.688
system so you can create
scrapers for things like

00:24:15.688 --> 00:24:18.257
LinkedIn for instance. 	If doing
penetration test and want to

00:24:18.257 --> 00:24:21.093
know employees of organization,
you click that, hit it against

00:24:21.093 --> 00:24:23.095
[static-inaudible] example for
LinkedIn and example directory

00:24:23.095 --> 00:24:25.864
you scrape all employees name
and create e-mail list. 	The

00:24:25.864 --> 00:24:29.902
next example that I would ribing
to show you -- and example of

00:24:29.902 --> 00:24:34.306
how I would able to get this to
work with the Burp extender API.

00:24:34.306 --> 00:24:37.109
	I'll use simple example.
	Verbal proxy listener, it uses,

00:24:37.109 --> 00:24:40.546
gives me a brief listing of what
messages are going through

00:24:40.546 --> 00:24:43.982
proxy, this is prove you can use
Javascript to write BurpSuite

00:24:43.982 --> 00:24:47.820
plugins. 	Did I press play?
There we go. 	That's an example

00:24:47.820 --> 00:24:49.888
of a BurpSuite plugin written in
Javascript. 	And finally if you

00:24:49.888 --> 00:24:51.890
wanted to do something GOOEY
based but, there's also an

00:24:51.890 --> 00:24:53.892
example there [static-inaudible]
-- and so this is from

00:24:53.892 --> 00:24:56.829
BurpSuite, so if I just press go
there, come on you see

00:24:56.829 --> 00:25:02.701
serialized input tab, that was
created using Javascript as

00:25:02.701 --> 00:25:09.308
well. 	To give you facilities to
interact with WebKit from

00:25:09.308 --> 00:25:16.582
BurpSuite and and vice versa. 	I
hope to include multiple tabbing

00:25:16.582 --> 00:25:23.956
and so on. 	There's a lot of
examples in the project, and I'm

00:25:23.956 --> 00:25:29.395
eager to see what you can come
up with in terms of ideas to

00:25:29.395 --> 00:25:33.665
extend the project, ideas how to
leverage WebKit. 	There's a rot

00:25:33.665 --> 00:25:37.169
of potential promise using
WebKit library with our security

00:25:37.169 --> 00:25:41.507
tools. 	And we don't have to be
stuck in the Middle Agess with

00:25:41.507 --> 00:25:43.776
console based apps or very
rudimentary rendering apps. 	So

00:25:43.776 --> 00:25:47.279
to end this talk, I think I'm
ahead of time, but, I'd like to

00:25:47.279 --> 00:25:50.282
thank my lovely wife who let me
come here after having our

00:25:50.282 --> 00:25:52.284
beautiful baby 2 weeks ago.
	(Applause). 	(Applause).

00:25:52.284 --> 00:25:54.286
	(Applause). 	(Applause).
	Nadeem Douba: And Justin SYKES,

00:25:54.286 --> 00:25:56.955
ease been a great guy in terms
of feedback and testing and

00:25:56.955 --> 00:25:59.091
giving me tips on the
presentation, thank you Justin.

00:25:59.091 --> 00:26:01.026
	DURK Lieberman, network
timeline component that you see,

00:26:01.026 --> 00:26:03.028
in BurpKit, this thing here,
network timeline. 	And finally,

00:26:03.028 --> 00:26:06.598
the Thomas MCKULA, code editing
component, great job on that,

00:26:06.598 --> 00:26:12.604
and a whole bunch of other
people. 	If, there's plenty of

00:26:15.407 --> 00:26:21.413
time for questions, I'd be more
than happy to field them.

00:26:24.216 --> 00:26:27.419
	(Applause). 	(Applause).
	(Applause). 	(Applause).

00:26:27.419 --> 00:26:33.425
	Nadeem Douba: Is it available
on gethub? It will be tonight.

00:26:36.228 --> 00:26:42.234
	My gethub is -- let me put it
up here, I forgot that. 	There's

00:26:47.406 --> 00:26:53.412
my gethub. 	And, zoom in. 	There
you go. 	And I have -- like to

00:26:55.614 --> 00:27:01.553
chat with me over e-mail, if you
have questions regarding the

00:28:08.353 --> 00:28:14.359
BurpKit tool kit. 	Does it have
a BurpKit tab in proxy history?

00:28:58.036 --> 00:29:03.976
Not yet, but I'm working on
that. 	HTTP support, that is

00:29:06.345 --> 00:29:09.848
based on WebKit library, support
at that time, I cannot guarantee

00:29:09.848 --> 00:29:15.854
that.

