00:00:00.267 --> 00:00:05.806
Good afternoon, everyone. Thank
you for coming to our talk. My

00:00:05.806 --> 00:00:09.710
name is Vivek Ramachandran and
today I'm going to talk about

00:00:09.710 --> 00:00:16.149
how to create your own wi-fi IDS
firewall on a windows endpoint.

00:00:16.149 --> 00:00:23.590
This has been a team, and was
responsible for most of the

00:00:23.590 --> 00:00:31.398
testing. A little about me. I
started as a programmer than as

00:00:31.398 --> 00:00:38.739
an architect. I found a bunch of
virus attacks the caffe latte

00:00:38.739 --> 00:00:44.745
attack, after that went full
time. I run security tube

00:00:48.348 --> 00:00:52.452
training and Pentester academy.
Written a bunch of books on

00:00:52.452 --> 00:00:57.958
wireless security and we also
have our very first

00:00:57.958 --> 00:01:05.666
self-published book. How to
build your even own wi-fi from

00:01:05.666 --> 00:01:10.904
scratch. So let's begin with the
talk. What was the motivation

00:01:10.904 --> 00:01:15.142
for working on this? Now, as
someone working with wireless

00:01:15.142 --> 00:01:20.480
security probably for the last
14 years, I have always been

00:01:20.480 --> 00:01:23.784
doing attacks. I found my own
attacks, talked about them,

00:01:23.784 --> 00:01:27.621
demonstrated them to my
customers and that is fun. We

00:01:27.621 --> 00:01:32.059
all love attacks. But what about
defense? So every single time I

00:01:32.059 --> 00:01:37.898
create a honeypot and the
clients connect to it, it looks

00:01:37.898 --> 00:01:40.834
great. The very first question I
get asked is can this be

00:01:40.834 --> 00:01:46.039
stopped. Could you make a
Windows or any operating system

00:01:46.039 --> 00:01:52.045
based endpoint smart enough that
it can figure out that is not

00:01:52.045 --> 00:01:56.116
the authorized access point that
it should be connecting to. It

00:01:56.116 --> 00:02:00.220
seemed like an important problem
to solve, but was the solution

00:02:00.220 --> 00:02:06.326
even viable. Now I started
looking at what was out there.

00:02:06.326 --> 00:02:11.598
Most of the defenses today --
some infrastructure windows are

00:02:11.598 --> 00:02:17.771
trying as far at roaming clients
are concerned, at this point

00:02:17.771 --> 00:02:23.777
generally it's policy based. You
can switch off your bluetooth,

00:02:36.456 --> 00:02:41.228
your wi-fi, once you're out of
the enterprise, unfortunately

00:02:41.228 --> 00:02:45.432
nothing is intelligent enough to
detect things like actual wi-fi

00:02:45.432 --> 00:02:51.038
attacks. Why is this so
complicated to solve? Well, you

00:02:51.038 --> 00:02:57.044
have tablets, phones, so coming
up with a solution which will

00:03:00.814 --> 00:03:05.519
work across all platforms is
actually quite difficult. So I

00:03:05.519 --> 00:03:11.792
decided to go ahead and look at
this and choose Windows to begin

00:03:11.792 --> 00:03:14.094
with. Without your own custom on
Windows you can't do anything.

00:03:14.094 --> 00:03:20.100
So when I started off I decided
let's look at attack surface so

00:03:32.312 --> 00:03:38.318
we can narrow the problem down.
Now, most wi-fi clients now most

00:03:44.791 --> 00:03:49.096
people actually think honeypots
are restricted to open networks.

00:03:49.096 --> 00:03:51.231
These request packets are
searching for different SSIDs

00:03:51.231 --> 00:03:54.167
which the client has in its
preferred network list. At that

00:03:54.167 --> 00:03:56.970
point the attacker creates
different honeypots and the

00:03:56.970 --> 00:03:59.406
client may be lured to connect
to one or more of those honey

00:03:59.406 --> 00:04:01.341
pots. When that happens the
hacker can give a different IP

00:04:01.341 --> 00:04:03.343
address. This is you how
typically pretty much every

00:04:03.343 --> 00:04:05.345
device out there works in having
clients connect to it. Is the

00:04:05.345 --> 00:04:07.347
captioning working okay? I'm
sure a lot of the stuff must be

00:04:07.347 --> 00:04:09.349
fun to read. I don't know if it
can pick up everything I say

00:04:09.349 --> 00:04:11.351
with my accent. It will be fun.
(Laughter.) At least you'll have

00:04:11.351 --> 00:04:13.353
fun either way. So one of the
different ways by which clients

00:04:13.353 --> 00:04:15.355
can be attacked, so as I said,
AP less cracking is what happens

00:04:15.355 --> 00:04:17.357
in the wild. When there is no
encryption, that's of course

00:04:17.357 --> 00:04:19.359
easy. You have WEP, PSK, and you
all of that. And there are

00:04:19.359 --> 00:04:21.361
different techniques or AP less
cracking which include the caffe

00:04:21.361 --> 00:04:23.363
latte and a bunch of others. You
could be attacked pretty much

00:04:23.363 --> 00:04:25.365
anywhere and once someone goes
ahead and hijacks your wi-fi, he

00:04:25.365 --> 00:04:27.367
basically owns your lair too. So
when we begun researching on

00:04:27.367 --> 00:04:29.369
this, I decided to define the
scope first. To create something

00:04:29.369 --> 00:04:31.371
that should work across all
operating systems if day one, is

00:04:31.371 --> 00:04:37.377
always difficult to solve. So
windows end points. In version

00:05:00.634 --> 00:05:06.640
one, the biggest stipulation
which I added is there cannot be

00:05:18.518 --> 00:05:20.520
a requirement for any custom
hardware or drivers. This should

00:05:20.520 --> 00:05:22.522
work on any Windows endpoint,
Windows 7 and above, which is

00:05:22.522 --> 00:05:24.524
probably having a wi-fi which is
Windows compliant. Unlike when

00:05:24.524 --> 00:05:26.526
you create fake access points
which require specific cards

00:05:26.526 --> 00:05:28.528
like the Rio tech chip set, this
will work out of the box on

00:05:28.528 --> 00:05:30.530
every Windows endpoint,
including the surface pro. I've

00:05:30.530 --> 00:05:32.532
done a little test, and it will
work. Now, I wanted that we

00:05:32.532 --> 00:05:34.534
should be able to detect honey
pot creation tools automatically

00:05:34.534 --> 00:05:36.536
out of the box, and actually
have the world's first only

00:05:36.536 --> 00:05:38.538
firewall with the only denying
vets which we can create, change

00:05:38.538 --> 00:05:40.540
and modify. So for version one,
this was our goal. First to

00:05:40.540 --> 00:05:42.542
develop a wireless -- something
which can look at what is

00:05:42.542 --> 00:05:44.544
happening over the air, find
very detailed information

00:05:44.544 --> 00:05:46.546
elements for the individual APs
and correlate all of that

00:05:46.546 --> 00:05:48.548
together. At the very same time
something which can learn your

00:05:48.548 --> 00:05:50.550
good wireless networks. So let's
say you connect to your home IP.

00:05:50.550 --> 00:05:52.552
Can we learn how your home AP
looks like so when you're at an

00:05:52.552 --> 00:05:54.554
airport sending out a probe
request, and an attacker brings

00:05:54.554 --> 00:05:56.556
up a honey pot the tool tells
you this isn't your home AP,

00:05:56.556 --> 00:05:59.125
right? Could we do the same for
enterprise where you have a

00:05:59.125 --> 00:06:01.628
bunch of access points serving
the same network. Now, this is a

00:06:01.628 --> 00:06:03.630
overall architecture of the
tool. Let's start from the

00:06:03.630 --> 00:06:06.166
absolute bottom. Now when we say
we cannot use any custom device

00:06:06.166 --> 00:06:08.535
drivers, we are dependent on the
wi-fi subsystem on the endpoint.

00:06:08.535 --> 00:06:10.870
This is am I connected, am I
authenticating, am I associated.

00:06:10.870 --> 00:06:12.873
The scan data, roughly every
minute Windows automatically

00:06:12.873 --> 00:06:15.775
scans and looks at all the APs
around. We pick that data up as

00:06:15.775 --> 00:06:17.777
well. Network profiles.
Preferred network lists consist

00:06:17.777 --> 00:06:19.779
of all the networks you've
connected to previously. And

00:06:19.779 --> 00:06:21.781
finally card control. The APIs
are actually a bit involved. I

00:06:21.781 --> 00:06:23.984
spend around two to three weeks
actually researching and looking

00:06:23.984 --> 00:06:29.990
at what the individual APIs give
me. So let me actually run a

00:07:46.633 --> 00:07:48.735
quick demo of the tool to show
you what kind of data sources

00:07:48.735 --> 00:07:50.737
are available. Some of the
things maybe show from the

00:07:50.737 --> 00:07:52.739
bottom. Comes in four different
colors. So every time you start

00:07:52.739 --> 00:07:54.741
to select a new color. There's
actually a loading bar at the

00:07:54.741 --> 00:07:56.743
bottom but because we are on low
resolution, you can't see that.

00:07:56.743 --> 00:07:58.745
So as soon as Chellam starts, it
gives you an interface where you

00:07:58.745 --> 00:08:00.680
can start looking at all the
networks around. Now, Chellam

00:08:00.680 --> 00:08:02.682
runs in the background and waits
for Windows to tell it, hey,

00:08:02.682 --> 00:08:04.684
I've just finished a scan, here
are the results. So we have a

00:08:04.684 --> 00:08:06.686
call-back from the wireless
subsystem. We do not go ahead

00:08:06.686 --> 00:08:08.688
and do any form of aggressive
scanning. The moment we get

00:08:08.688 --> 00:08:10.857
back, you see a ton of -- let me
suppress the alerts. At the top

00:08:10.857 --> 00:08:12.859
left we've already discovered
128 networks. (Laughter.) Right?

00:08:12.859 --> 00:08:14.861
And if I were to sort it, this
will actually give you here in

00:08:14.861 --> 00:08:16.863
the society ones. The ones which
are probably showing up as the

00:08:16.863 --> 00:08:18.865
two bricks, that's basically me
not dealing with certain

00:08:18.865 --> 00:08:20.867
character sets. That could be
fixed. If you look at alpha you

00:08:20.867 --> 00:08:22.869
can see all the different BSSIDs
that are giving it out.

00:08:22.869 --> 00:08:24.871
Something that are wireless
configurators doesn't tell you

00:08:24.871 --> 00:08:26.873
anything. Just a list. You
already see Chellam has found

00:08:26.873 --> 00:08:28.875
171 networks and we can see a
ton of details about these

00:08:28.875 --> 00:08:30.877
networks. So this gives you an
immediate snapshot. Here is the

00:08:30.877 --> 00:08:32.879
another thing. I'm not sniffing
the air but I can always query

00:08:32.879 --> 00:08:34.881
the APIs and pick up different
attributes about the network and

00:08:34.881 --> 00:08:36.883
reconstruct how the beacon frame
looks like. So once I do that, I

00:08:36.883 --> 00:08:38.885
can actually see different
information elements and all of

00:08:38.885 --> 00:08:40.887
that stuff which previously was
impossible. Now Chellam

00:08:40.887 --> 00:08:42.889
integrates closely with the we
if a subsystem. Now Chellam

00:08:42.889 --> 00:08:44.891
tells you you've been
momentarily disconnected. It

00:08:44.891 --> 00:08:46.893
will try to aggressively
reconnect. If the connection

00:08:46.893 --> 00:08:48.895
succeeds, it's completely happy.
It doesn't worry about it.

00:08:48.895 --> 00:08:50.897
Chellam will show you all of
these smaller transitions as

00:08:50.897 --> 00:08:52.899
well. Chellam runs entirely in
the background. You can switch

00:08:52.899 --> 00:08:54.901
off your wi-fi network if you
desire and it will run in the

00:08:54.901 --> 00:08:56.903
background here. We have tried
our best to have a very small

00:08:56.903 --> 00:08:58.905
memory this time, but of course
this is very early software so I

00:08:58.905 --> 00:09:00.840
assume there will be bugs. Now
once we've collected all of that

00:09:00.840 --> 00:09:06.846
incredible data which I just
showed you, we push that into

00:09:06.846 --> 00:09:10.216
SQL databases. So this may allow
you later to do simple SQL

00:09:10.216 --> 00:09:16.222
queries and look at what was
around. To begin with Chellam

00:09:20.493 --> 00:09:26.499
can be an auditing wi-fi tool.
Then we have the analysis and

00:09:31.704 --> 00:09:37.710
rule matching engine. This can
look at different rule sets

00:09:41.047 --> 00:09:47.053
which we create and do
interesting things with it. So

00:09:50.390 --> 00:09:56.396
let me give you an example. Here
is my attacker machine. Let's

00:10:02.368 --> 00:10:08.374
start Chellam from a clean slate
so you see how it works. So what

00:10:20.353 --> 00:10:26.359
we've done is -- and you could
write your own signatures and

00:10:43.843 --> 00:10:45.845
create your own rules. That's a
black list. Unfortunately,

00:10:45.845 --> 00:10:47.847
beyond the point, black lists
aren't very useful. There's

00:10:47.847 --> 00:10:50.550
going to be a race between us
and the tool authors. Okay.

00:10:50.550 --> 00:10:53.219
Let's change this, let's change
that. And this is where what we

00:10:53.219 --> 00:10:55.889
decided was to go ahead and also
include white lists. Now, keep

00:10:55.889 --> 00:10:58.591
in mind even though we have
killed the fake AP, you might

00:10:58.591 --> 00:11:00.994
see a couple more pop-ups. The
reason for that is Windows

00:11:00.994 --> 00:11:03.897
catches the scanned results and
gives it to the APIs. So if you

00:11:03.897 --> 00:11:06.366
call an API, you are not
necessarily running a life scan.

00:11:06.366 --> 00:11:09.469
So now if you go back, let's
look at white listing. So we can

00:11:09.469 --> 00:11:12.405
go to Chellam. I can look at the
list of networks which are

00:11:12.405 --> 00:11:15.742
around. And I can find one which
let's say is my home AP is an

00:11:15.742 --> 00:11:18.211
example. One of the things I
forget to mention, Chellam will

00:11:18.211 --> 00:11:21.347
show in red the fake access
point so you know where it is so

00:11:21.347 --> 00:11:24.484
the other details about it. Here
is an AP which we have set up.

00:11:24.484 --> 00:11:26.920
How do we fingerprint the access
point using beacon frames? We

00:11:26.920 --> 00:11:30.557
made it really simple. Just
right click. You're taken to an

00:11:30.557 --> 00:11:34.127
interface which goes ahead and
creates a prepopulated rule

00:11:34.127 --> 00:11:40.099
which you can use. So I can go
in here and say my home AP

00:11:40.099 --> 00:11:45.672
enabled the rule by default and
say this is my home AP. It's a

00:11:45.672 --> 00:11:50.443
white list, when do I test the
rule. Two possibilities. When we

00:11:50.443 --> 00:11:54.414
are scanning the network at
regular intervals, the second is

00:11:54.414 --> 00:11:58.785
when I'm actually connecting to
a network. Right? So I'm going

00:11:58.785 --> 00:12:03.890
to enable for both. Now we can
choose from a ton of parameters

00:12:03.890 --> 00:12:08.628
which we already figured out
about our home AP. The first is

00:12:08.628 --> 00:12:13.800
the BSSID. At the extreme right
I have an option that says hey,

00:12:13.800 --> 00:12:18.972
can this value change. So if we
tell Chellam that this value can

00:12:18.972 --> 00:12:24.210
change, it's going to ignore it.
So I'm going to say no, it's

00:12:24.210 --> 00:12:26.579
never going to change, it's an
infrastructure AP, the hardware

00:12:26.579 --> 00:12:32.585
type is not changing and if it's
on a fixed channel, that doesn't

00:12:36.489 --> 00:12:42.495
change as well. And at the
bottom here we actually have a

00:12:49.502 --> 00:12:55.508
ton of other parameters,
capability and formation, IE

00:12:58.211 --> 00:13:04.083
elements and all of that. You
can decide how rigid or how

00:13:04.083 --> 00:13:07.487
flexible you want your rule to
be. Right? The power is your

00:13:07.487 --> 00:13:10.123
hands. Now, one of the other
things we have actually added is

00:13:10.123 --> 00:13:12.925
neighboring networks. So how
does that work? Now what we

00:13:12.925 --> 00:13:16.195
figured out, that if you're
running an access point at your

00:13:16.195 --> 00:13:19.132
home, there are a couple of
neighboring APs which are always

00:13:19.132 --> 00:13:22.568
around. So we tell you hey,
would you want us to check that

00:13:22.568 --> 00:13:26.272
at least one or more of those
APs are around the next time you

00:13:26.272 --> 00:13:28.908
actually see your home network.
An attacker could never know

00:13:28.908 --> 00:13:32.612
this at an airport. I mean, he
can't know a ton of other stuff

00:13:32.612 --> 00:13:35.281
as well, but this is something
almost impossible to know,

00:13:35.281 --> 00:13:38.184
unless he's actually walking
back to your home, where I think

00:13:38.184 --> 00:13:40.319
you have bigger problems than
wireless security. (Laughter.)

00:13:40.319 --> 00:13:42.955
(Applause.) So Chellam allows
you to actually select from all

00:13:42.955 --> 00:13:45.591
of these neighboring networks.
Now at this point, given the

00:13:45.591 --> 00:13:48.528
volatility of all the networks
here, I'm not going to select

00:13:48.528 --> 00:13:51.698
that. And new elements, can new
IEs be there? Typically once you

00:13:51.698 --> 00:13:54.600
start up an IE, it doesn't
change. If you change the

00:13:54.600 --> 00:13:57.770
configure, you could change the
rule set then. So we say cannot

00:13:57.770 --> 00:14:01.174
be present. So we go up here and
create this rule. Rule created.

00:14:01.174 --> 00:14:03.810
Now Chellam is protecting you
from connecting to any other

00:14:03.810 --> 00:14:06.713
open system which has parameters
different from what is in the

00:14:06.713 --> 00:14:09.649
rule set. So we can allow
Chellam to run in the

00:14:09.649 --> 00:14:12.819
background. I can go back to my
attacker machine. I won't use

00:14:12.819 --> 00:14:15.722
air base because we already have
the detection for that built

00:14:15.722 --> 00:14:19.158
this. I'm going to use host APD,
kernel mode access point. And I

00:14:19.158 --> 00:14:22.628
already have the open config for
that. This could be a WEP the

00:14:22.628 --> 00:14:25.798
process is really the same. The
IEs will change. You have window

00:14:25.798 --> 00:14:30.169
specific IEs. So I'm going to
run host. Now when we create a

00:14:30.169 --> 00:14:36.175
new access point open system. At
this point it will be a regular

00:14:39.579 --> 00:14:45.585
AP or a software AP, right?
Chellam doesn't have the black

00:14:49.756 --> 00:14:55.762
list in it, but Chellam says if
I see an open system, I have to

00:15:03.569 --> 00:15:09.575
see these parameters in it. If I
don't see it, this isn't the one

00:15:16.516 --> 00:15:22.522
you're used to connecting to.
And there you go, Chellam picked

00:15:26.692 --> 00:15:32.698
it up. (Applause.) It actually
gets even better. As a security

00:15:36.836 --> 00:15:42.842
researchers I wanted to actually
see where the rule sets differ.

00:15:47.013 --> 00:15:53.019
So you can go to alerts. This
part is buggy, I apologize if it

00:15:59.959 --> 00:16:05.898
crashes. And then you can click
on view. Okay, it worked.

00:16:10.069 --> 00:16:16.075
(Laughter.) I wish I could take
that statement back. The moment

00:16:16.075 --> 00:16:22.081
I say buggy. I would have looked
way more cooler if it just

00:16:27.453 --> 00:16:33.459
worked. So on the right-hand
side you can actually see that

00:16:37.063 --> 00:16:43.069
the network BSSID did not match.
A couple of things did. The

00:16:47.573 --> 00:16:53.579
center frequency didn't. Many of
these which we haven't gone

00:16:56.315 --> 00:17:02.255
ahead and applied in the rule
set are completely okay. We said

00:17:05.491 --> 00:17:09.362
it's okay if the neighboring
networks change, right? So it's

00:17:09.362 --> 00:17:15.935
completely fine with it. If we
scroll down we see that a ton of

00:17:15.935 --> 00:17:20.640
things did not match in the
capability and the formation

00:17:20.640 --> 00:17:25.811
IEs. So Chellam actually tells
you that hey, this access point

00:17:25.811 --> 00:17:30.516
opens the same. It looks
completely different in so many

00:17:30.516 --> 00:17:34.787
ways from what you're used to
connecting. Now if we go back,

00:17:34.787 --> 00:17:36.822
we can actually extrapolate
this. At the very top there we

00:17:36.822 --> 00:17:38.824
have the entire 802.11 set. Let
me close Chellam. So we are

00:17:38.824 --> 00:17:40.826
looking at a bunch of things in
there the EIs, the neighboring

00:17:40.826 --> 00:17:42.828
APs, the AP details. Keep in
mind we could learn all of these

00:17:42.828 --> 00:17:44.830
things repulsively as well.
Typically this AP has a couple

00:17:44.830 --> 00:17:46.832
of these IEs, right? Which
actually makes the solution even

00:17:46.832 --> 00:17:48.834
more robust. However, while I
was working on it, I thought

00:17:48.834 --> 00:17:50.836
okay. What about post-connect
parameters, which is let's say

00:17:50.836 --> 00:17:52.838
after you connect to a network,
what you see on the network, for

00:17:52.838 --> 00:17:54.840
example, the address which you
get, that also can be sometimes

00:17:54.840 --> 00:17:56.842
unique to your network. The
gateway. Hey, you can actually

00:17:56.842 --> 00:17:58.844
go overboard and scan and do an
OSN map fingerprinting on the

00:17:58.844 --> 00:18:00.780
gate way and say every time
these are the ports which I see

00:18:00.780 --> 00:18:02.782
are open. The lower part isn't
implemented in the tool yet.

00:18:02.782 --> 00:18:04.784
This is just a research thought
which I had. So once you have a

00:18:04.784 --> 00:18:10.289
white list for your home
network, or your office network,

00:18:10.289 --> 00:18:16.295
Chellam allows you to click on
SSID and if it has multiple

00:18:22.268 --> 00:18:28.274
BSSIDs, it can keep them all
together. Keep in mind that's

00:18:30.643 --> 00:18:34.313
only a good idea if all of your
APs are using the same

00:18:34.313 --> 00:18:36.315
controller so the
characteristics are roughly the

00:18:36.315 --> 00:18:40.052
same. If not you can as an admin
create combination rule sets and

00:18:40.052 --> 00:18:43.489
push it out to all the end
clients. Now how complex are

00:18:43.489 --> 00:18:47.593
Chellam's tables to allow us to
do all this? So when I started

00:18:47.593 --> 00:18:50.296
on this project and looked at
the APIs, I underestimated how

00:18:50.296 --> 00:18:53.466
much time it would take to get a
reliable solution. We actually

00:18:53.466 --> 00:18:56.902
use 43 different tables to track
all of the data. Many of these

00:18:56.902 --> 00:19:00.272
tables can contain a ton of data
in there. So every single thing

00:19:00.272 --> 00:19:02.908
that Chellam actually sees is
something which goes in there.

00:19:02.908 --> 00:19:05.811
For example, all the scanned
results, right? In just the last

00:19:05.811 --> 00:19:09.248
five or ten minutes that we ran
the tool, because I started with

00:19:09.248 --> 00:19:12.685
a fresh copy of it, you already
have 3,500 scan results taken at

00:19:12.685 --> 00:19:16.255
different times. So we collected
all of this data, co-related

00:19:16.255 --> 00:19:22.261
them -- correlated them through
different queries, picked up

00:19:42.748 --> 00:19:48.754
what was interesting and then
the analysis and rule engine

00:19:51.123 --> 00:19:57.129
works on all of that. Can you
tell me how much time I have

00:20:05.471 --> 00:20:10.543
left? 25 minutes? I'm going
faster than I should. Why is

00:20:10.543 --> 00:20:13.512
this interesting or important,
at least in my humble view? To

00:20:13.512 --> 00:20:16.782
date most wireless attack tools
do not try to understand or try

00:20:16.782 --> 00:20:19.752
to mimic the authorized network.
Once you use Chellam, the tools

00:20:19.752 --> 00:20:22.455
you'll find it extremely
difficult to go ahead and create

00:20:22.455 --> 00:20:25.157
honey pots for any network
you're sounding out a probe

00:20:25.157 --> 00:20:28.694
request to if you have a white
list on Chellam for it. Now,

00:20:28.694 --> 00:20:31.931
what happens if someone goes
ahead and, as I said, he stalks

00:20:31.931 --> 00:20:33.933
you, manages to clone everything
exactly, exceptionally

00:20:33.933 --> 00:20:36.268
difficult, right? But if he
manages to clone everything

00:20:36.268 --> 00:20:39.271
exactly, is there something
which can be done. How much time

00:20:39.271 --> 00:20:42.775
do I have? 15, okay. Is it
possible. So when I looked at

00:20:42.775 --> 00:20:45.478
it, what typically ends up
happening is if the attacker

00:20:45.478 --> 00:20:48.481
clones every single thing in the
beacon frame, including the Mac

00:20:48.481 --> 00:20:50.916
address, there are interesting
beacon and host time stamps

00:20:50.916 --> 00:20:54.153
which are in the package which
you can use to correlate and

00:20:54.153 --> 00:20:57.690
look at things. There seems to
be a ton of research papers on

00:20:57.690 --> 00:21:00.860
it on how you can figure that
out. That isn't implemented in

00:21:00.860 --> 00:21:04.130
the current version but we will
probably do that soon. Road map

00:21:04.130 --> 00:21:06.565
for enhancements. Now, you're
probably thinking okay, we just

00:21:06.565 --> 00:21:09.535
found a wonderful -- an attack
network which we could connect

00:21:09.535 --> 00:21:13.606
to. What do we do about it now?
I mean is Chellam going to stop

00:21:13.606 --> 00:21:17.276
me from connecting to it
immediately? Well, if you figure

00:21:17.276 --> 00:21:23.282
out this is an attack network
when we were scanning, Chellam

00:21:29.889 --> 00:21:35.895
will actually try to disconnect
you from the network as soon as

00:21:43.636 --> 00:21:49.642
you try to connect. However, in
version 1 we are picking up

00:21:57.349 --> 00:22:03.656
everything from the wireless
subsystem. Right? So it happens

00:22:03.656 --> 00:22:09.128
and then we know. So what I'm
already working on is version 2,

00:22:09.128 --> 00:22:15.701
which should be out maybe in the
next three or four months, which

00:22:15.701 --> 00:22:20.272
actually has an intermediate
driver sitting about the mini

00:22:20.272 --> 00:22:25.811
port just below the protocol
edge and we're going to be

00:22:25.811 --> 00:22:31.383
looking at every single packet
going up and down the wi-fi

00:22:31.383 --> 00:22:36.956
stack. The solution is exactly
similar to how your fire walls

00:22:36.956 --> 00:22:42.027
work. They have a kernel
component and anything that does

00:22:42.027 --> 00:22:46.165
not match the rule set is
discarded at the intermediate

00:22:46.165 --> 00:22:51.170
driver itself. Filter drivers.
The preferred way of writing

00:22:51.170 --> 00:22:57.309
that right now is collar
drivers. We could have a filter

00:22:57.309 --> 00:23:04.483
or a call out. The moment it
sees your system showing up from

00:23:04.483 --> 00:23:11.156
what it is used to, it will
immediately go ahead and discard

00:23:11.156 --> 00:23:17.162
it so that Windows doesn't even
see it and we could have a very

00:23:35.848 --> 00:23:41.854
simple alert that says a rogue
AP or something was found. The

00:24:25.397 --> 00:24:31.403
other thing if you wanted to do
is assist an automatic learning.

00:24:49.455 --> 00:24:51.991
For a technical audience, we're
going to be releasing Chellam

00:24:51.991 --> 00:24:54.960
tonight, you can download it,
it's a complete free tool, use

00:24:54.960 --> 00:24:58.764
it as you please. If you find
bugs, let us know what more you

00:24:58.764 --> 00:25:01.867
need. What about, my mother or
my dad. So we're already

00:25:01.867 --> 00:25:04.903
building a feature where it
could actually do some kind of

00:25:04.903 --> 00:25:07.906
automated learning. Just an idea
at this point. You can actually

00:25:07.906 --> 00:25:11.510
write your own plug-ins where we
are trying to see if you can

00:25:11.510 --> 00:25:14.246
actually use things to write
your own plug-ins for Chellam

00:25:14.246 --> 00:25:17.182
and that's the reason we
actually chose the code of

00:25:17.182 --> 00:25:23.188
Chellam, all the data
collection, all the analysis and

00:25:35.634 --> 00:25:41.640
all that to be SQL like so you
can write your own plug-ins

00:26:02.194 --> 00:26:08.200
which can pick up stuff from
some of the tables, work on that

00:26:28.854 --> 00:26:34.860
and push the other tables. And
we can call you as a call-back

00:26:55.481 --> 00:27:01.420
when different events happen on
the system. Chellam will be

00:27:15.901 --> 00:27:21.907
available at the URL Pentester
academy. The link will be open

00:27:38.457 --> 00:27:44.463
by tonight. At Def Con I kept
getting disconnected. Now, why

00:27:58.977 --> 00:28:01.313
did I call that Chellam? Well,
you know, this isn't a fancy

00:28:01.313 --> 00:28:03.315
name in Hindi or any other
language. Chellam is my

00:28:03.315 --> 00:28:05.317
grandmother's name who taught me
mathematics and English so this

00:28:05.317 --> 00:28:07.319
is my dedication to her.
(Applause.) Thank you. Do we

00:28:07.319 --> 00:28:09.321
have time for questions. We have
time for a couple of questions

00:28:09.321 --> 00:28:11.323
if anyone has. >> All the core
principles -- his question was

00:28:11.323 --> 00:28:13.325
what about creating something
like this for Android. We are

00:28:13.325 --> 00:28:15.327
working on it. If you notice the
exact principles actually apply

00:28:15.327 --> 00:28:17.329
pretty much to any operating
system, right? On Linux's and

00:28:17.329 --> 00:28:23.335
many other iOSs it's easier to
get data on beacon frames like

00:28:25.737 --> 00:28:31.743
that. So you should see an
Android version. IOS, maybe

00:28:34.780 --> 00:28:41.119
never. (Laughter.) Simply
because Apple is super

00:28:41.119 --> 00:28:46.458
restrictive about what we can
and cannot do. So maybe for this

00:28:46.458 --> 00:28:50.796
audience wherever one might have
a jail broken iPhone where we

00:28:50.796 --> 00:28:55.534
can run our own little programs
to do monitoring, I don't see

00:28:55.534 --> 00:29:01.006
any other way to do that >> It's
completely free and you can just

00:29:01.006 --> 00:29:06.511
download and use it. So right
now the Gui is in, a couple of

00:29:06.511 --> 00:29:10.849
other components are, you can
download and use it and modify

00:29:10.849 --> 00:29:15.387
it. What language is this
written? The code of Chellam is

00:29:15.387 --> 00:29:21.393
actually written in C++. The GUI
which you see is WPF in C sharp.

00:30:30.195 --> 00:30:33.131
Right? Thank you very much.
(Applause.)

