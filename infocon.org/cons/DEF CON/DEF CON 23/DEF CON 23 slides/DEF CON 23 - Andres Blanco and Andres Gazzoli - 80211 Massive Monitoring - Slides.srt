00:00:00.000 --> 00:00:07.107
 We're in 802.11 massive
monitoring. with andreas____ and

00:00:07.107 --> 00:00:13.046
andreas ______, without further
ado, gentlemen claps >> Hi

00:00:13.046 --> 00:00:19.052
there, hi DEFCON. We're glad to
be here. We're first-time

00:00:22.756 --> 00:00:28.762
speakers. Thanks. We are from
Argentina. We work at core

00:00:32.466 --> 00:00:38.739
security. We're here to present
our talk which is 802.11 massive

00:00:38.739 --> 00:00:44.945
monitoring. And what is it
about? Well, it's about how to

00:00:44.945 --> 00:00:48.849
monitor several Wi-Fi channels
at the same time in an easy way.

00:00:48.849 --> 00:00:54.855
Here are the outlines,
introduction. I'm going to say

00:00:57.057 --> 00:01:03.997
that. Then the main part of our
talk will be explained by my

00:01:03.997 --> 00:01:09.469
partner and consists in
approaches. The USB dilemma and

00:01:09.469 --> 00:01:14.942
distributed system. And then I'm
going to come back to explain

00:01:14.942 --> 00:01:21.715
our work which is our last
solution. Let's start. Who is

00:01:21.715 --> 00:01:29.423
this talk for? If you go around
looking for access point or

00:01:29.423 --> 00:01:37.197
wireless routers [indiscernible]
for example, this talk is for

00:01:37.197 --> 00:01:42.369
you. If you no matter where you
are doing or where you are, and

00:01:42.369 --> 00:01:45.505
you are trying to monitor
wireless traffic, this talk is

00:01:45.505 --> 00:01:52.646
for you. If you have just a
couple of routers at your home,

00:01:52.646 --> 00:01:56.817
if you like to spend your day
watching TCC (inaudible) or

00:01:56.817 --> 00:02:02.756
playing with [indiscernible]
this talk is for you. Okay. Last

00:02:06.293 --> 00:02:12.299
year we were doing some research
about different protocols. We

00:02:12.299 --> 00:02:18.305
faced a problem with Wi-Fi
direct. At that point we

00:02:20.807 --> 00:02:24.945
realized that when two devices
in Wi-Fi direct tried to

00:02:24.945 --> 00:02:29.149
establish a connection, they
start sending frames on

00:02:29.149 --> 00:02:33.320
different channels. And of
course we never know on which

00:02:33.320 --> 00:02:40.093
ones. It sounds trivial, but it
wasn't. So at that point we

00:02:40.093 --> 00:02:45.465
realized about two things. The
first one, we didn't have a good

00:02:45.465 --> 00:02:51.938
way to do it. And the second
one, there were more similar

00:02:51.938 --> 00:02:57.944
scenarios in which we might want
to do that. So we defined the

00:03:00.747 --> 00:03:06.053
goals of our project and our
talk and here is the goals.

00:03:06.053 --> 00:03:11.191
monitor channel (indiscernible)
traffic such as Wi-Fi direct.

00:03:11.191 --> 00:03:14.995
Monitor access point with auto
selection channels. They are

00:03:14.995 --> 00:03:19.466
access points that change the
channel in which they are

00:03:19.466 --> 00:03:26.006
working and according, if there
are so much traffic or other

00:03:26.006 --> 00:03:32.312
parameters. Monitor multiple
access points at the same time.

00:03:32.312 --> 00:03:37.384
Monitor stations which can be
connected to one access point

00:03:37.384 --> 00:03:42.289
using a channel and later
connected to another one using

00:03:42.289 --> 00:03:47.461
another channel. Monitor
multiple locations at the same

00:03:47.461 --> 00:03:51.364
time and the last one of our
goals which is not about

00:03:51.364 --> 00:03:55.469
monitoring but it's quite
related to it which is inject

00:03:55.469 --> 00:04:03.009
frames on different channels at
the same time. Here we can see a

00:04:03.009 --> 00:04:09.683
couple of tables with a list of
Wi-Fi channels. Wi-Fi has

00:04:09.683 --> 00:04:14.754
several standards. They are
named using letters, A, B, C, N,

00:04:14.754 --> 00:04:21.495
et cetera. Standards can be
grouped by the base frequency in

00:04:21.495 --> 00:04:27.200
which they work. For example, we
have some standards that work on

00:04:27.200 --> 00:04:33.206
2.4 gigahertz. Other ones on
3.6. And other ones on 5

00:04:36.009 --> 00:04:42.215
gigahertz. Each of these
standards has a set of

00:04:42.215 --> 00:04:48.221
well-defined frequencies called
channels. We have maybe 50

00:04:51.725 --> 00:04:58.398
channels. When we try, when
everyone tried to monitor

00:04:58.398 --> 00:05:05.472
traffic, we can do two things.
We can do channel hopping which

00:05:05.472 --> 00:05:11.578
consists of monitored traffic on
one channel and then hop to

00:05:11.578 --> 00:05:16.883
another one and hop to another
one. Or we can set a specific

00:05:16.883 --> 00:05:23.290
channel and monitor all the
traffic in that channel. We have

00:05:23.290 --> 00:05:27.227
problem with the two approaches
because we're losing a lot of

00:05:27.227 --> 00:05:33.900
Wi-Fi traffic. So in this
presentation and with our

00:05:33.900 --> 00:05:39.906
solution, we are trying to solve
that problem. >> Hi everyone, my

00:05:44.544 --> 00:05:48.782
name is Andres. well im gonna
start talking about approaches

00:05:48.782 --> 00:05:53.086
(inaudible) the first one is
this one, as you can see there

00:05:53.086 --> 00:05:59.159
are 6 (inaudible) network card,
with a food container, it was

00:05:59.159 --> 00:06:05.098
really good one. Last year I
brought it here for the wireless

00:06:09.603 --> 00:06:15.609
CTF (ph.). It was nice to go
through AM to the airport with

00:06:18.044 --> 00:06:24.150
this. It was really fun. So the
problem with approach was only

00:06:24.150 --> 00:06:28.121
SIM card. The second approach
which is one I have here, I

00:06:28.121 --> 00:06:31.491
couldn't put it on the table
because the cables are too short

00:06:31.491 --> 00:06:37.497
but after the talk you can come
and see it. Then you can see it

00:06:44.871 --> 00:06:51.378
afterwards. But this approach
start giving us the idea if this

00:06:51.378 --> 00:06:56.449
could scale or if the system was
not going to be able to scale.

00:06:56.449 --> 00:07:02.155
How we use this two approaches
we made. One is using Wireshark,

00:07:02.155 --> 00:07:05.158
easy to use. you open Wireshark
and You select all the

00:07:05.158 --> 00:07:09.095
interfaces you want to monitor
and you are able to use them,

00:07:09.095 --> 00:07:15.068
really easy, and there was one
approach of using a python in

00:07:15.068 --> 00:07:19.439
some libraries which is copy and
pocket. We can monitor and do

00:07:19.439 --> 00:07:23.276
processing of the frames and do
some stuff. In this case we're

00:07:23.276 --> 00:07:30.483
going to see a quick demo. It
says here if you don't want your

00:07:30.483 --> 00:07:33.153
traffic to be displayed during
the demo, please stop your

00:07:33.153 --> 00:07:39.159
Wi-Fi. Let's hope it works. So
the script is now interfacing

00:07:51.671 --> 00:07:55.742
and is sending the wireless
cards to different channels and

00:07:55.742 --> 00:08:02.782
now we are monitoring for
specific packages, like DNS,

00:08:02.782 --> 00:08:10.056
HTTP. So it's only a demo to
show that it's quite easy to

00:08:10.056 --> 00:08:15.595
grab a lot of frames and process
it with a lot of cards. It's

00:08:15.595 --> 00:08:21.267
also really fun to see the data
going around in the air. But

00:08:21.267 --> 00:08:27.273
we're going to stop it so no one
feels bad about it. What's the

00:08:30.143 --> 00:08:33.213
problem with these approaches
that we make? We started seeing

00:08:33.213 --> 00:08:37.317
some things that they were not
working as we expected. And

00:08:37.317 --> 00:08:42.555
where he started thinking that
the USB was the problem. so the

00:08:42.555 --> 00:08:45.892
first things is scalability,
Planting one USB device on a

00:08:45.892 --> 00:08:49.129
computer is something that
everyone knows it works and it

00:08:49.129 --> 00:08:52.699
works fine. were gonna start
playing and put alot of devices

00:08:52.699 --> 00:08:56.703
in your USB, sometimes it
doesn't work like it should.

00:08:56.703 --> 00:09:01.241
It's 11 cards its shouldnt be a
problem, we are not playing with

00:09:01.241 --> 00:09:06.980
100 devices, its only 11 cards,
but the problem is, the monitor

00:09:06.980 --> 00:09:10.984
mode that we're going to explain
now. The thing is we plug 11

00:09:10.984 --> 00:09:16.356
cards, we use LSUSB common, to
see that every card is plugged

00:09:16.356 --> 00:09:21.761
in and working and I'm going to
show you another demo now. This

00:09:21.761 --> 00:09:27.333
demo is really short. We're
going to see -- we're going to

00:09:27.333 --> 00:09:33.339
load USB module in the
[indiscernible] kernel to

00:09:35.408 --> 00:09:41.414
analyze the USB traffic. Running
war shark again. Were gonna be

00:09:44.584 --> 00:09:50.590
able to see what is going on and
what's the problem here. We go

00:09:53.093 --> 00:09:57.897
to interface list. We see as
they mentioned that we were

00:09:57.897 --> 00:10:03.903
seeing before. We have all the
interfaces and the USB devices

00:10:06.406 --> 00:10:11.344
here. We can monitor the buses.
We start monitoring the buses

00:10:11.344 --> 00:10:16.316
and we see a lot of USB traffic.
We are not now using war shark

00:10:16.316 --> 00:10:20.153
or CTP dump or any other
software. Trying to use the

00:10:20.153 --> 00:10:24.023
network interfaces. Once the
network interface is on monitor

00:10:24.023 --> 00:10:27.894
mode it doesn't careb its gonna
grab the frames in there and its

00:10:27.894 --> 00:10:31.698
gonna send it to a USB to the
kernel, There the driver is

00:10:31.698 --> 00:10:35.535
going to forward it to the user
line. The problem here is that

00:10:35.535 --> 00:10:41.274
the card is not figuring the
traffic. It's sending all the

00:10:41.274 --> 00:10:47.280
time the traffic to the USB bus.
That's the first issue that we

00:10:50.550 --> 00:10:53.019
find. that is BUS saturation,
Sometimes USB or usually USB

00:10:53.019 --> 00:10:59.025
devices, they are not using the
bus all the time like you can

00:11:02.629 --> 00:11:05.732
use, I don't know, a hard drive
or something and use it

00:11:05.732 --> 00:11:09.002
sometimes. But it's not
constantly sending information

00:11:09.002 --> 00:11:13.173
to the bus. When you put monitor
mode as well at interface

00:11:13.173 --> 00:11:17.644
monitor mode, all the time the
information, and we start seeing

00:11:17.644 --> 00:11:23.816
USB saturation. That is a
problem for us. As I was telling

00:11:23.816 --> 00:11:28.121
before, the filters only apply
on the kernel. it does not apply

00:11:28.121 --> 00:11:32.859
on the wireless interface. So
when that happens,a couple of

00:11:32.859 --> 00:11:36.162
buses with the people trying to
get into the buss and go to the

00:11:36.162 --> 00:11:42.602
kernel and we end up with this.
Something really bad. We're not

00:11:42.602 --> 00:11:49.509
able to send all the people in
the buses. As I was showing

00:11:49.509 --> 00:11:53.046
before, we can see here, I was
not able to show you with a

00:11:53.046 --> 00:11:59.953
laser. but wireless interface
No. 16. It says 0 packets. That

00:11:59.953 --> 00:12:05.024
is a problem of bus saturation.
We're not receiving any frame

00:12:05.024 --> 00:12:09.729
from that interface but the
interface is working. And we

00:12:09.729 --> 00:12:16.135
know USB, wireless interfaces
that are listening in monitor

00:12:16.135 --> 00:12:19.906
mode, they receive frames all
the time. It's almost impossible

00:12:19.906 --> 00:12:23.876
if you have devices going around
to get zero frames. We always

00:12:23.876 --> 00:12:27.246
get something, approve request,
or some frame going around, were

00:12:27.246 --> 00:12:33.453
gonna catch it, so this is a
saturation problem. We're going

00:12:33.453 --> 00:12:36.923
to talk another issue, later
we're going to catch up with

00:12:36.923 --> 00:12:40.159
this issue that i was mentioning
about saturation and we're going

00:12:40.159 --> 00:12:43.596
to talk about how maybe to fix
it. Now we're going to talk

00:12:43.596 --> 00:12:46.666
about now removal of devices,
that is another issue that we

00:12:46.666 --> 00:12:50.136
have here is, (inaudible) lets
Say we use all these cards in my

00:12:50.136 --> 00:12:55.141
laptop to do a pen test or
something. and i plug this in my

00:12:55.141 --> 00:12:58.911
computer and say okay I'm going
to use my bus, my USB bus only

00:12:58.911 --> 00:13:03.249
for the interfaces. But this is
not so true. because nowadays,

00:13:03.249 --> 00:13:07.654
computers already come with
devices that they are using the

00:13:07.654 --> 00:13:12.425
USB bus without us knowing about
them. In this case we have a

00:13:12.425 --> 00:13:16.195
webcam and a bluetooth device
that I don't know if it's clear

00:13:16.195 --> 00:13:22.235
to see, a little bit small, the
letter, but these two devices

00:13:22.235 --> 00:13:27.707
are using bus No. 1. Bus No. 1
has already some traffic that we

00:13:27.707 --> 00:13:34.647
cannot control. Again, we have a
bus with some people that is

00:13:34.647 --> 00:13:37.817
already there we are not able to
take them down, they are and

00:13:37.817 --> 00:13:41.287
they are going to be sending
things in the bus. So that is --

00:13:41.287 --> 00:13:45.992
the second issue. These one
maybe we can fix it. Removing a

00:13:45.992 --> 00:13:51.564
kernel module driver to see if
the device stopped talking to us

00:13:51.564 --> 00:13:56.769
through the USB bus. But I don't
know. its something you have to

00:13:56.769 --> 00:14:02.809
test with every device. Another
thing that is funny about it is

00:14:02.809 --> 00:14:04.877
that in this computer we have
four USB buses. So we said,

00:14:04.877 --> 00:14:11.684
okay, we have four USB buses. If
we use like, we balance the

00:14:11.684 --> 00:14:15.788
usage like put some device on
the first bus, some on the

00:14:15.788 --> 00:14:21.394
second bus we may mitigate the
USB saturation issue. But it's

00:14:21.394 --> 00:14:25.898
not so true. When we plug
devices into every port we see

00:14:25.898 --> 00:14:30.703
something like this. we plug a
card in the USB port No. 1, and

00:14:30.703 --> 00:14:34.006
we are using bus No. 1. The same
oone that was already using my

00:14:34.006 --> 00:14:39.245
webcam and my bluetooth device.
I plug in the USB port No. 2,

00:14:39.245 --> 00:14:43.783
we're using now bus No. 3. I
plug it in the last port that I

00:14:43.783 --> 00:14:47.887
have in the machine, and im
already, again, im using bus No.

00:14:47.887 --> 00:14:52.358
3. So I have three ports and I
can use only two buses. The

00:14:52.358 --> 00:14:57.497
other two buses are not
available. So mitigation of bus

00:14:57.497 --> 00:15:01.868
saturation is not going to be
able with this. The last issue

00:15:01.868 --> 00:15:05.872
im gonna talk about is power
negotiation of power issue with

00:15:05.872 --> 00:15:09.342
USB devices. When you plug a lot
of device and they're trying to

00:15:09.342 --> 00:15:12.178
power nail share with the
kernel, a linux kernel,

00:15:12.178 --> 00:15:15.815
sometimes you end up with less
devices than the ones we plug

00:15:15.815 --> 00:15:20.186
in, and this is because there is
issue on the Linux kernel which

00:15:20.186 --> 00:15:24.657
I'm not sure why. because
Sometime now from now that is

00:15:24.657 --> 00:15:29.762
going on. But this issue happens
not all the time. Sometimes it

00:15:29.762 --> 00:15:33.299
happens, sometime its not. When
you plug it the device doesn't

00:15:33.299 --> 00:15:39.305
appear there -- oh, okay. I will
continue. And when it does not

00:15:41.541 --> 00:15:45.945
appear, if we plug it and unplug
the device, it's going to still

00:15:45.945 --> 00:15:50.216
do not appear. It's blacklisted
because kernel says it doesn't

00:15:50.216 --> 00:15:55.555
negotiate. We have to reboot the
machine to be able see again,

00:15:55.555 --> 00:16:01.160
that device. So it's a really
bad, this issue, I didn't find a

00:16:01.160 --> 00:16:07.166
work around for this. Reboot the
system and try it again if you

00:16:15.341 --> 00:16:21.347
can monitor. Okay. >> You
stopped talking. >> I can

00:16:37.463 --> 00:16:43.469
continue. >> These are -- what
country are these from? >>

00:16:52.211 --> 00:16:59.218
Argentinian chocolate. They
don't do anything small. This

00:16:59.218 --> 00:17:05.157
was a gift to us. Are these guys
doing a good job? That's

00:17:17.336 --> 00:17:24.110
awesome. All right guys. You
know how hard it is to get on

00:17:24.110 --> 00:17:30.116
this stage, so congratulations.
To DEFCON. Now let me pick up

00:17:35.588 --> 00:17:40.660
where they left off. Okay. I'm
going to have to learn this

00:17:40.660 --> 00:17:45.898
first. Could I get some help? >>
This is computer things, I don't

00:17:45.898 --> 00:17:51.904
know. >> Excellent description.
>> Thanks. So again, so i was, I

00:18:11.924 --> 00:18:17.930
think I said this, I don't know.
It was -- we were talking about

00:18:20.499 --> 00:18:25.171
USB issues. We got USB
saturation, we got no removal of

00:18:25.171 --> 00:18:30.176
the devices that were used in
the bus. We have power issues.

00:18:30.176 --> 00:18:37.350
And we have I forget. Okay. It
was removal of devices.

00:18:37.350 --> 00:18:42.955
Saturation, power issues, and
available ports USB buses. We

00:18:42.955 --> 00:18:46.826
have three ports and four buses
and with three ports we're using

00:18:46.826 --> 00:18:50.096
only two buses. They are
designing really good, these

00:18:50.096 --> 00:18:57.003
computer. The solution for some
of the problems can be applying

00:18:57.003 --> 00:19:00.473
a filter on the wireless
interface instead of using the

00:19:00.473 --> 00:19:05.578
filter on the kernel side. If we
do this we filter only the

00:19:05.578 --> 00:19:09.148
traffic that we're interested
in. If you do traffic monitoring

00:19:09.148 --> 00:19:13.252
you should know we're not
interested always in the

00:19:13.252 --> 00:19:17.623
traffic. Sometimes we're
interested in some traffic.

00:19:17.623 --> 00:19:20.826
Putting a filter on the wireless
interface it will be a thing

00:19:20.826 --> 00:19:24.597
that could work around some of
the issues. But doing this is

00:19:24.597 --> 00:19:31.704
really hard. modifying firmware
is in open source, ok we can

00:19:31.704 --> 00:19:37.910
apply some changes and maybe it
will be easier, but apply it in

00:19:37.910 --> 00:19:41.747
closet source and applying
modifications in the driver, we

00:19:41.747 --> 00:19:45.084
have to modify a few more in the
driver, its really hard and you

00:19:45.084 --> 00:19:48.487
have to do it for every
different card and its really a

00:19:48.487 --> 00:19:53.392
work that is not so good,
sometime a go, we gave a talk

00:19:53.392 --> 00:19:57.129
about modifying broadcom
wireless drivers, about to put

00:19:57.129 --> 00:20:02.601
it on monitor mode, it was only
two chipsets and we have to do

00:20:02.601 --> 00:20:07.106
alot of work, and every time we
have to update in IOS again, we

00:20:07.106 --> 00:20:10.743
have to remodify and reverse
again the codes, it was really

00:20:10.743 --> 00:20:16.582
hard work, So it doesnt escalate
so good. We said, okay, we can

00:20:16.582 --> 00:20:22.354
modify this idea and try to
[indiscernible] of the scheme

00:20:22.354 --> 00:20:25.257
that we were using. We can say
we have a worker or something

00:20:25.257 --> 00:20:28.994
that is monitoring and injecting
frames. We have a -- shell that

00:20:28.994 --> 00:20:33.432
is in charge of analyzing or
injecting traffic and we have a

00:20:33.432 --> 00:20:37.436
bus. In this case the bus is
going to be ethernet. And we

00:20:37.436 --> 00:20:42.208
know we can talk to the worker
and say with this filter and

00:20:42.208 --> 00:20:44.276
only give me this traffic
instead of all traffic. We can

00:20:44.276 --> 00:20:50.549
avoid the bus saturation and we
can also avoid the other issues

00:20:50.549 --> 00:20:56.555
that we were mentioning before.
How we can do this? We can do

00:21:05.998 --> 00:21:10.302
this with this way. We can have
a couple of machines with USB

00:21:10.302 --> 00:21:15.474
wireless devices or interfaces.
And we can have a manager that

00:21:15.474 --> 00:21:18.477
is in the middle and we can talk
to these machines and say, okay,

00:21:18.477 --> 00:21:23.149
you put in channel 6, you put in
channel 4. Now i start

00:21:23.149 --> 00:21:27.419
monitoring give me only traffic
that it works with the filter.

00:21:27.419 --> 00:21:30.856
Now you go and check, ill do
anything. But what is the

00:21:30.856 --> 00:21:35.461
problem with this is you don't
want to have like 11 computers.

00:21:35.461 --> 00:21:37.930
If you want to get these
computers to another site you

00:21:37.930 --> 00:21:42.368
have 11 computers in your bag.
It's expensive and it doesnt

00:21:42.368 --> 00:21:47.239
escalate so good for my pocket.
I don't want to use all that

00:21:47.239 --> 00:21:52.211
money for this. Nowadays
computers are not always

00:21:52.211 --> 00:21:56.081
computers like we used to know.
Now we have embedded devices

00:21:56.081 --> 00:22:00.386
everywhere. We can find cheap
embedded device that have

00:22:00.386 --> 00:22:04.790
wireless. There you go. We have
a lot of wireless devices that

00:22:04.790 --> 00:22:08.861
they are really cheap and we can
put it really easily and have a

00:22:08.861 --> 00:22:12.231
lot in my bag and I can around
monitoring and injecting

00:22:12.231 --> 00:22:17.169
traffic. Using instead of
computers we're going to use

00:22:17.169 --> 00:22:22.841
open -- devices that run Linux
and work with wireless. Okay? >>

00:22:22.841 --> 00:22:28.847
Finally we arrive to our last
approach. We called it wirework,

00:22:37.590 --> 00:22:43.596
which means wireless workers. We
defined it as distributed 802.11

00:22:45.965 --> 00:22:51.337
monitoring and injecting system
which was designed to be simple

00:22:51.337 --> 00:22:57.343
and scaleable. In which workers
note, it can be managed by a

00:23:00.479 --> 00:23:07.786
framework. From one side we have
routers converted into workers.

00:23:07.786 --> 00:23:13.325
We are using a custom open WRT.
We removed several the four

00:23:13.325 --> 00:23:20.332
packages and added a new one
called Walter. We developed that

00:23:20.332 --> 00:23:26.338
package in C language. From the
other side we have python lip

00:23:28.774 --> 00:23:36.515
that we also designed,
developed, sorry. And we

00:23:36.515 --> 00:23:40.219
communicate workers and the
manager using a protocol that we

00:23:40.219 --> 00:23:46.225
design and implemented. And it
runs over ethernet. In theory

00:23:49.728 --> 00:23:55.768
each kind of router that can
support open WRT can be

00:23:55.768 --> 00:24:02.675
converted into a worker. But we
chose three different routers to

00:24:02.675 --> 00:24:08.681
work. This is the first one.
It's a TMTR3020 (ph.). It has

00:24:11.116 --> 00:24:18.691
not so much flash nor RAM
memory. It has not such a good

00:24:18.691 --> 00:24:24.697
CPU. But it's cheap and small.
We also chose this other router.

00:24:29.134 --> 00:24:32.771
It's an RTP link. The main
feature of this router is they

00:24:32.771 --> 00:24:38.777
have two wireless interfaces.
One of them works on 2.4

00:24:42.047 --> 00:24:46.618
gigahertz and the other one on 5
gigahertz. We design and

00:24:46.618 --> 00:24:51.557
implemented wirework to support
routers with more than one

00:24:51.557 --> 00:24:57.563
interface. And this is the last
router that we used. It's pretty

00:24:59.765 --> 00:25:06.572
similar to the first one. But it
can work with batteries. So this

00:25:06.572 --> 00:25:12.144
is important because we can
implement wirework a system and

00:25:12.144 --> 00:25:18.150
do it mobile. From the other
side we have the manager. It's a

00:25:20.519 --> 00:25:27.493
python lip. The main feature of
the lip is looking for workers

00:25:27.493 --> 00:25:33.065
on the network, get information
about the available interfaces

00:25:33.065 --> 00:25:39.071
in the workers, start monitoring
a worker interface using a BPF

00:25:41.140 --> 00:25:47.146
filter. And inject frames from
an interface, from a worker

00:25:51.717 --> 00:25:59.091
interface. Sorry. This is a
scheme of how is our manager.

00:25:59.091 --> 00:26:03.462
There are three processes. The
main one is the manager service.

00:26:03.462 --> 00:26:08.033
But we have other two processes
which handle data frames and

00:26:08.033 --> 00:26:14.039
management frames. Why we
decided to use ethernet instead

00:26:21.113 --> 00:26:26.785
of IP? Our protocol runs over
ethernet. There are several

00:26:26.785 --> 00:26:32.791
reasons. We always try to keep
it simple. IP may need some

00:26:35.327 --> 00:26:41.333
initial settings. And we also --
our original idea was have our

00:26:44.636 --> 00:26:51.877
own network with the workers. We
didn't want to plug workers in a

00:26:51.877 --> 00:26:58.817
system network. So using
ethernet we were able to connect

00:26:58.817 --> 00:27:06.625
a new worker and it start
immediately working. We also can

00:27:06.625 --> 00:27:11.129
control better the traffic on
the network because we are not

00:27:11.129 --> 00:27:17.402
using IP and there are several
services, several IP services

00:27:17.402 --> 00:27:21.607
that are not there sending
frames. So we have better

00:27:21.607 --> 00:27:27.613
control over the network. Then
ethernet has an NQ of 1,500

00:27:32.985 --> 00:27:38.991
bytes. And it has a very short
header. So much shortened than

00:27:43.462 --> 00:27:51.036
IP. So we have more bytes
available for our stuff. Doing

00:27:51.036 --> 00:27:57.042
that we can keep fragmentation
low. Here we have a couple of

00:28:00.679 --> 00:28:05.017
devices, a router and a switch.
We are using these kind of

00:28:05.017 --> 00:28:12.891
devices in our POC here. They
are of 10, 100, megabit per

00:28:12.891 --> 00:28:18.764
second. With these kind of
devices we are not able to

00:28:18.764 --> 00:28:23.535
monitor all the traffic with
high performance. But the good

00:28:23.535 --> 00:28:29.541
thing here is that we can get
better devices. Like this ones.

00:28:31.710 --> 00:28:35.948
Here we have a router, a Wi-Fi
card and a switch. They are

00:28:35.948 --> 00:28:40.786
devices that work on one
gigabits per second or ten

00:28:40.786 --> 00:28:46.124
gigabytes per second. If we get
better devices, we are going to

00:28:46.124 --> 00:28:52.130
get better performance. We're
not going to have scaleable

00:28:56.702 --> 00:29:02.641
problems. OK wirework is not a
tool. It's a framework. You can

00:29:05.978 --> 00:29:13.051
do a lot of things with this
framework. For example, you can

00:29:13.051 --> 00:29:20.659
build a distributed wireless IDS
or IPS. You can do traffic

00:29:20.659 --> 00:29:24.262
analysis. We are getting a lot
of traffic. We are getting

00:29:24.262 --> 00:29:30.268
traffic from different channels
so our analysis will be more

00:29:30.268 --> 00:29:36.842
complete and reliable we can do
device tracking. We can put

00:29:36.842 --> 00:29:43.448
different workers, for example
in a building and in that way we

00:29:43.448 --> 00:29:50.022
will be able to know every time
where a device is. And finally

00:29:50.022 --> 00:29:54.393
we can use it to perform
protocol analysis like we did

00:29:54.393 --> 00:30:00.399
with Wi-Fi direct. Here is our
PLC. We have 11 routers. A

00:30:06.071 --> 00:30:12.344
couple of switches. And a USB
hub just for power. The main

00:30:12.344 --> 00:30:19.885
idea behind this POC was have
one router per channel in Wi-Fi

00:30:19.885 --> 00:30:27.259
standard B or G. And to have
just one power plug and just one

00:30:27.259 --> 00:30:33.265
ethernet plug. Well, demo time.
Please disable Wi-Fi. Not all

00:30:36.902 --> 00:30:42.908
the Wi-Fi, please. >> We're
going to try this demo. Hope it

00:30:49.147 --> 00:30:55.253
works fine. So the framework
comes with some examples. So if

00:30:55.253 --> 00:30:58.990
someone wants to use a framework
to develop their own tools, it's

00:30:58.990 --> 00:31:04.563
easy to use these examples as
guides. But we're going to put a

00:31:04.563 --> 00:31:08.133
lot of information and
documentation on the GitHub.

00:31:08.133 --> 00:31:15.040
Okay. Let's test the war shark
example. The war shark example

00:31:15.040 --> 00:31:19.978
is going to find every wireless
worker that we found in the

00:31:19.978 --> 00:31:24.616
network. It's going to search
for the best optimal channel

00:31:24.616 --> 00:31:30.622
segment. And once we have every
channel assigned we're going to

00:31:30.622 --> 00:31:34.192
need some BPS filtering and we
are gonna receive all the

00:31:34.192 --> 00:31:37.028
information and send it to wire
shark. So we can use a tool that

00:31:37.028 --> 00:31:43.268
we know. We're going to say that
we need the network interface

00:31:43.268 --> 00:31:47.105
where we are connected to the
workers. we put a filter that

00:31:47.105 --> 00:31:52.144
say IP, when we put IP its
gonna.. The workers are only

00:31:52.144 --> 00:31:55.280
going to send me the traffic
they know in this IP. So the

00:31:55.280 --> 00:32:01.219
thing they're going to do is
search for encrypted traffic and

00:32:01.219 --> 00:32:06.324
then if it's IP, it's going to
send it to the Manager, so the

00:32:06.324 --> 00:32:09.294
Manager onlyprocess this traffic
and not all the traffic that is

00:32:09.294 --> 00:32:15.901
in there. lets say that I'm out
of minutes, but [indiscernible]

00:32:15.901 --> 00:32:22.207
the application. So now as we
can see here in the console, on

00:32:22.207 --> 00:32:27.579
the terminal. We will.. the
manager is starting, hes gonna

00:32:27.579 --> 00:32:32.017
looks for workers. Hoping he
found every worker we have.

00:32:36.454 --> 00:32:42.461
There we go. We find 12 workers.
One worker has two interfaces.

00:32:47.732 --> 00:32:51.002
This black one, that has
interfaces, one has 5 gigahertz

00:32:51.002 --> 00:32:56.074
and the other is 11 and now
we're getting traffic. All this

00:32:56.074 --> 00:33:00.278
traffic is captured by the
workers and sent through a

00:33:00.278 --> 00:33:03.648
network encapsulated in the
ethernet and the manager is

00:33:03.648 --> 00:33:07.319
processing the frames. this way,
The workers are doing the hard

00:33:07.319 --> 00:33:10.555
work like filtering the traffic
and the manager is only

00:33:10.555 --> 00:33:14.125
processing the traffic he wants
in every channel we find. If

00:33:14.125 --> 00:33:19.097
someone notices I'm going to
change channel or now someone

00:33:19.097 --> 00:33:22.434
plugs a new access point there,
were gonna receive the traffic,

00:33:22.434 --> 00:33:26.137
because we are monitoring 11
channels and 1 channel at 5

00:33:26.137 --> 00:33:33.879
gigahertz. Here we have radio
tap information and we receive

00:33:33.879 --> 00:33:41.419
frames in channel 11. Here we
can see the channel. This is in

00:33:41.419 --> 00:33:44.022
5 gigahertz. We can see here, we
have radio-tapped information,

00:33:44.022 --> 00:33:46.524
and we can see that we received
frames at Channel 11, here we

00:33:46.524 --> 00:33:49.527
can see the channel, this one is
at 5 gigahertz, and we can see

00:33:49.527 --> 00:33:52.764
channel 11, it looks like there
are two wireless devices here or

00:33:52.764 --> 00:33:56.368
two wireless access points. One
is 5 gigahertz and another in

00:33:56.368 --> 00:33:58.703
channel 11 of 2.4. We can
process any frame that is in

00:33:58.703 --> 00:34:04.643
there. So we have other
examples, like for example, let

00:34:15.487 --> 00:34:21.493
me see, we can copy -- his
example is going to find. It's

00:34:38.543 --> 00:34:41.646
going to say the workers to
monitor only approved requests

00:34:41.646 --> 00:34:47.018
on every channel and every time
they see a per request it's

00:34:47.018 --> 00:34:53.224
going to inject a response. We
have a (inaudible) attack on

00:34:53.224 --> 00:34:59.998
every channel. There you go. >>
Well, future work. We think of

00:34:59.998 --> 00:35:06.137
having IP support. The original
idea wasn't that. But we know

00:35:06.137 --> 00:35:11.776
that it's important in some
scenarios. We are thinking of

00:35:11.776 --> 00:35:16.314
building new open WRT
frameworks. We already released

00:35:16.314 --> 00:35:21.453
these frameworks with some
example, some wireworks. We are

00:35:21.453 --> 00:35:26.458
thinking of building more
frameworks and create more

00:35:26.458 --> 00:35:32.464
examples. And finally we are
thinking of adding introduction

00:35:36.501 --> 00:35:42.507
with some well-known tools.
That's all. Here is where you

00:36:03.895 --> 00:36:08.400
can find the white wall project,
our emails and our twitter, if

00:36:08.400 --> 00:36:13.138
you want to contact us. That's
all. Thank you so much. Is there

00:36:13.138 --> 00:36:19.144
any questions? Audience speaking
yeah Audience speaking yeah They

00:36:39.697 --> 00:36:45.704
work from one to one. It works
like, you have only one

00:36:50.842 --> 00:36:57.916
instance. For doing that we
usually modified like air crack

00:36:57.916 --> 00:37:02.587
code to make it like work from
one manager to multiple workers.

00:37:02.587 --> 00:37:07.459
We see a little bit the code.
But we wanted something that is

00:37:07.459 --> 00:37:14.032
also in python so it can be easy
in multi-platform. The manager

00:37:14.032 --> 00:37:18.303
works on windows, Mac,linux ever
where. The manager is right in

00:37:18.303 --> 00:37:24.309
python. We thought about it. But
we end up making a

00:37:28.680 --> 00:37:31.149
[indiscernible]. Thanks for your
question and because you did the

00:37:31.149 --> 00:37:35.987
first question, you won a --
worker on a device. 

