00:00:06.573 --> 00:00:10.510
I'm Gina matthews and this is
ronnie gould, I'm a computer

00:00:10.510 --> 00:00:14.114
science professor from clarkson
university, in way way up state

00:00:14.114 --> 00:00:18.785
NY, almost Canada, nose bleed NY
as you like to call it, and

00:00:18.785 --> 00:00:23.090
Ronny is both of a professor
type at Utacca college and also

00:00:23.090 --> 00:00:27.027
finishing up his PHD at
Clarkson. And we are going to

00:00:27.027 --> 00:00:30.264
talk about n layer to network
security in virtualizing

00:00:30.264 --> 00:00:34.935
environment, so first a little
road map of what we are going to

00:00:34.935 --> 00:00:39.239
do today. firsts were going to
do a little context a background

00:00:39.239 --> 00:00:43.176
to set the stage. were gonna
talk about some very basic

00:00:43.176 --> 00:00:45.712
virtualization, multi tenant
environment and cloud services.

00:00:45.712 --> 00:00:49.316
and were going to talk about
some networking basic, Both

00:00:49.316 --> 00:00:53.253
physical and visual and we are
going to talk about the

00:00:53.253 --> 00:00:57.190
platforms that we use to do our
testing the hypervisor platforms

00:00:57.190 --> 00:01:01.128
of virtual networking device
that we test it and things like

00:01:01.128 --> 00:01:05.799
that. And then woo we're going
to do get into the good stuff

00:01:05.799 --> 00:01:09.736
and attacks and results that we
obtain. In particular we are

00:01:09.736 --> 00:01:13.674
going to look at max webbing
attacks and DHCP attacks in

00:01:13.674 --> 00:01:16.543
virtualized environments and
mitigations in these attacks and

00:01:16.543 --> 00:01:20.480
some next ups and conclusions.
So this might be starting a

00:01:20.480 --> 00:01:25.152
little bit basic for some folks
but just to make sure that we

00:01:25.152 --> 00:01:28.755
are all in the same page,
vitalization 101 right, we

00:01:28.755 --> 00:01:33.060
have we used to have a bunch
of physical servers, and now

00:01:33.060 --> 00:01:36.663
weve converted these all into
one virtual machines and They're

00:01:36.663 --> 00:01:39.533
now living together on one
physical box, theyre

00:01:39.533 --> 00:01:42.069
co-located together on one
physical virtualization server,

00:01:42.069 --> 00:01:46.740
And that's one step in the plat
thickens the next step in the

00:01:46.740 --> 00:01:50.344
plot thickens is that they are
likely sharing a virtual

00:01:50.344 --> 00:01:53.580
networking device the physical
networking device out of this

00:01:53.580 --> 00:01:57.184
one virtualization server. And
the third step in the plot

00:01:57.184 --> 00:02:01.121
thickens is the virtual machines
that are located together on the

00:02:01.121 --> 00:02:05.792
same physical box may not belong
to the same trust domain so this

00:02:05.792 --> 00:02:09.730
the classic example if you look
carefully. and see some virtual

00:02:09.730 --> 00:02:12.966
machines that belong to
competitors, some belong to coke

00:02:12.966 --> 00:02:17.270
and some belong to Pepsi and
what the question is what they

00:02:17.270 --> 00:02:21.208
can do to one another since they
happen to land co-located

00:02:21.208 --> 00:02:25.512
together in the same physical
machine. If one of these VMs is

00:02:25.512 --> 00:02:29.816
malicious what kind of attacks
could they do to the other VMs

00:02:29.816 --> 00:02:33.754
in the system, and just to
emphasize the important of what

00:02:33.754 --> 00:02:37.357
we're talking about the multi
tenant cloud services like this

00:02:37.357 --> 00:02:41.294
model are all over the place.
you know amazon HP2, Microsoft

00:02:41.294 --> 00:02:44.898
Azure, Google cloud services
lots of less high profile places

00:02:44.898 --> 00:02:49.202
do the same thing and there is a
lot of mission critical

00:02:49.202 --> 00:02:52.806
applications being run in this
way. most of these environments

00:02:52.806 --> 00:02:57.110
are running some sort of zen,
mothers open source to enter zen

00:02:57.110 --> 00:03:01.415
Server some of them using VM
ware or hyper V and they're

00:03:01.415 --> 00:03:04.284
pretty much all sharing network
connectivity between the

00:03:04.284 --> 00:03:08.588
tenants. I would like to
emphasize that we did not do the

00:03:08.588 --> 00:03:13.260
touching of our attacks in EC2
or AZURE or in any of these

00:03:13.260 --> 00:03:17.931
places, but wed love to, so if
any of you is from Amazon,

00:03:17.931 --> 00:03:21.535
Microsoft or Google or any
hosting environment, wed love to

00:03:21.535 --> 00:03:25.138
do some testing in your
environment, no actual VMs would

00:03:25.138 --> 00:03:30.177
be hurt, uuuhm we would love to
come and do that so come and

00:03:30.177 --> 00:03:34.114
talk to us afterwards alright?
okay. So the key question before

00:03:34.114 --> 00:03:38.051
us is since all of these client
virtual machines are essentially

00:03:38.051 --> 00:03:41.655
connected to a virtual version
of a physical networking device

00:03:41.655 --> 00:03:45.258
and theyre sharing it, do the
layers you attack. Network

00:03:45.258 --> 00:03:49.563
attacks that we all have known
and loved for so long still

00:03:49.563 --> 00:03:53.166
work? when they're apply to
their virtualize version and cut

00:03:53.166 --> 00:03:58.205
to the chase, yes most of them
do. uhhhm but get after that in

00:03:58.205 --> 00:04:02.509
a minute, I did want to
emphasize that this is not the

00:04:02.509 --> 00:04:06.446
only class of attack that
co-located VMs can do to one

00:04:06.446 --> 00:04:10.751
another, this is by no means the
only source of nastiness. Our

00:04:10.751 --> 00:04:14.688
research group of Clarkson has
done other this where we hammer

00:04:14.688 --> 00:04:19.359
the disk from one VM or did it
tanked the performance of other

00:04:19.359 --> 00:04:24.030
VM on the system or hammered the
network with a lot of traffic

00:04:24.030 --> 00:04:28.335
not the network attacks that we
have today. Just allocate a huge

00:04:28.335 --> 00:04:32.639
lot of memory. Spin crazy on the
CPU all sorts of different

00:04:32.639 --> 00:04:35.509
things. And other different
groups have demonstrated things

00:04:35.509 --> 00:04:40.180
amazing things cash effects and
so this is by no means the only

00:04:40.180 --> 00:04:44.117
class of nastiness that virtual
machine can do to one another

00:04:44.117 --> 00:04:48.788
when they happen to land in the
cloud. Is an old lesson. that

00:04:48.788 --> 00:04:53.460
you are vulnerable to those who
are close to you. That's why we

00:04:53.460 --> 00:04:57.764
are all a little extra nervous.
Being here at DEFCON. Right? We

00:04:57.764 --> 00:05:01.701
normally are spread out. We're
all together. Okay so the bottom

00:05:01.701 --> 00:05:04.571
line is that our experimental
results virtualized network

00:05:04.571 --> 00:05:08.875
devices do have the potential to
be exploited in the same manner

00:05:08.875 --> 00:05:13.180
as are physical devices. and
that's going to be the hard of

00:05:13.180 --> 00:05:18.218
the demo that we are going to do
today and show you the specifics

00:05:18.218 --> 00:05:21.821
those attacks in fact in some
environment those attacks are

00:05:21.821 --> 00:05:24.691
still in the virtualized
environment onto the physical

00:05:24.691 --> 00:05:27.928
network they're connected to.
They're some good stories about

00:05:27.928 --> 00:05:31.531
that. Matt flatting in Citrix
server and basically allow east

00:05:31.531 --> 00:05:34.768
dropping on the physical network
traffic. Basically flowed out

00:05:34.768 --> 00:05:38.371
flooded the cam tables On all
the physical switches around

00:05:38.371 --> 00:05:43.410
also. Okay. So in that what if
slide I had a malicious VM what

00:05:43.410 --> 00:05:47.013
can that malicious do. In
particular today we will talk

00:05:47.013 --> 00:05:50.617
about we are not gonna
demonstrate all these but here

00:05:50.617 --> 00:05:54.921
is the classes of things you can
do. Capture all the network

00:05:54.921 --> 00:05:58.158
traffic from the victims VM.
Thats bad, right? Redirect

00:05:58.158 --> 00:06:01.394
the victims VM traffic some
place they didnt intend

00:06:01.394 --> 00:06:05.699
that's bad. From a whole variety
man in the middle attacks. Do

00:06:05.699 --> 00:06:08.235
denial of service. Gain
unauthorized access to

00:06:08.235 --> 00:06:10.770
restricted subnetworks and
generally tank their performer.

00:06:10.770 --> 00:06:15.075
So those are all example of
nastiness. One more bit of just

00:06:15.075 --> 00:06:19.379
one setting review before we get
into the details of the attacks

00:06:19.379 --> 00:06:22.983
a quick review of network
basics. So what are physical

00:06:22.983 --> 00:06:26.920
bridges, the devices at a
connect two or more segments at

00:06:26.920 --> 00:06:30.156
layer two. They do separate
collision domains so theyre

00:06:30.156 --> 00:06:33.026
maintaining MAC address porting
tables. And they're forwarding

00:06:33.026 --> 00:06:36.263
their request based on the
destination Mac address. Here

00:06:36.263 --> 00:06:40.200
see the layer or two ethernet
frame basically the decision is

00:06:40.200 --> 00:06:43.803
being made based on that
destination address and here it

00:06:43.803 --> 00:06:48.108
is classic bridge picture Its
very simple. If a frame is sent

00:06:48.108 --> 00:06:52.779
in one domain and is destine on
this domain it stays put and

00:06:52.779 --> 00:06:57.083
doest cost the bridge, if it is
destine for another domain it

00:06:57.083 --> 00:07:00.687
will be forwarding according to
information in that table. So

00:07:00.687 --> 00:07:04.624
virtual bridged are very similar
you can kinda think about them

00:07:04.624 --> 00:07:08.561
as the simplest form of virtual
networking in particular we were

00:07:08.561 --> 00:07:12.499
using the bridging support that
is built into the Linux kernel

00:07:12.499 --> 00:07:16.436
and the bridge will tell the
user space package and we

00:07:16.436 --> 00:07:20.740
actually found in some cases it
did better than some of the

00:07:20.740 --> 00:07:23.610
enterprise switch solutions. So
that was an interesting

00:07:23.610 --> 00:07:26.846
surprise. Then we also have
switches so physical switches

00:07:26.846 --> 00:07:31.151
operate also layer 2 or higher.
You can think about them as

00:07:31.151 --> 00:07:34.020
multipart bridges. They also
separate coalition domains. And

00:07:34.020 --> 00:07:37.624
they allegation have dynamic
table a cam table. A content

00:07:37.624 --> 00:07:40.860
addressable memory table. It is
very similar to bridge

00:07:40.860 --> 00:07:44.097
forwarding table and it also
using the destination Mac

00:07:44.097 --> 00:07:48.401
address to figure out where to
forward each frame, port to port

00:07:48.401 --> 00:07:52.005
frame onto and classic switching
picture showing that the switch

00:07:52.005 --> 00:07:56.309
would keep track of which Mac
address lives off of every port.

00:07:56.309 --> 00:08:00.246
So it can successfully send only
the frames destined for that

00:08:00.246 --> 00:08:04.918
port for the MAC address out
that port when all is well. And

00:08:04.918 --> 00:08:08.521
virtual switches are like their
physical counter parts. The are

00:08:08.521 --> 00:08:11.758
most advance form of virtual
networking and bridging. They

00:08:11.758 --> 00:08:15.695
can emulate layer 2 and their
physical devices. And they can

00:08:15.695 --> 00:08:19.299
provide additional services such
as quality of service view and

00:08:19.299 --> 00:08:21.468
traffic separation and
performance traffic monitoring

00:08:21.468 --> 00:08:25.405
as some examples. Ok so with
that content text set. Im

00:08:25.405 --> 00:08:29.709
ready to hand over to Ronny.
Hes gonna tell you all about

00:08:29.709 --> 00:08:34.381
the cool attacks. >> Ok so we
are gonna discuss some of the

00:08:34.381 --> 00:08:37.250
attacks that we experimented
with in these virtualized

00:08:37.250 --> 00:08:40.487
environment. Specifically the
mac clouding attack and the DHCP

00:08:40.487 --> 00:08:44.424
attack. There are a few
scenarios for each attack we are

00:08:44.424 --> 00:08:49.462
going to go over. So this is the
test environment that we used. A

00:08:49.462 --> 00:08:53.767
big rack of servers dedicated
for this work. And here some of

00:08:53.767 --> 00:08:56.302
the hardware specks for
particular experimentation. We

00:08:56.302 --> 00:09:00.607
have 3 servers running open
source zen. On JEN 2 linux the

00:09:00.607 --> 00:09:04.544
other one is running linux
bridging and the other one was

00:09:04.544 --> 00:09:08.848
running open V switch 1.1.11.0
and we have open 2-0 a citrix

00:09:08.848 --> 00:09:14.220
server -2 hyper V and then we
have hyper V free so we had the

00:09:14.220 --> 00:09:18.525
free version of that actual full
MS 2008 server hyper V. And

00:09:18.525 --> 00:09:21.761
VMware sphere. so you can
different specs here fairly

00:09:21.761 --> 00:09:25.698
similar. But in reality With the
testing we are doing the

00:09:25.698 --> 00:09:29.302
hardware specs has no meaning to
this because were actually

00:09:29.302 --> 00:09:32.906
attacking the virtual switch. So
let's talk about the mac

00:09:32.906 --> 00:09:37.210
flooding attack. I see with we
have people up there. Okay. So

00:09:37.210 --> 00:09:41.514
mac flooding is basically we are
just taking a bunch of frames

00:09:41.514 --> 00:09:45.819
random frame flooding the switch
with it to talk to that cam

00:09:45.819 --> 00:09:50.123
table. Fill that cam table the
switch goes to into the hub

00:09:50.123 --> 00:09:53.726
mode. Which basically would
forward all the frames to the

00:09:53.726 --> 00:09:56.596
network to every devices
connected. Breaking all those

00:09:56.596 --> 00:10:00.533
coalitions remains. Keep going.
So here's an imagine of the Mac

00:10:00.533 --> 00:10:04.137
flooding attack occurring. You
can see a bunch random mac

00:10:04.137 --> 00:10:07.740
addresses going on here. Just
flooding that network out. >>

00:10:07.740 --> 00:10:12.779
That's my computer. >> Is it? >>
You all know how this works? Are

00:10:12.779 --> 00:10:16.716
they doing a good job? [
APPLAUSE ] Cheers. Cheers guys.

00:10:16.716 --> 00:10:21.387
Good Job. Yeah. [ APPLAUSE ] >>
Go back to that TCP flood

00:10:21.387 --> 00:10:25.692
screen. So for our scenario this
is the basic network diagram we

00:10:25.692 --> 00:10:29.629
have. We have a target virtual
machine running Kali Linux. And

00:10:29.629 --> 00:10:33.233
then the attacker is running
Kali Linux setup. The virtual

00:10:33.233 --> 00:10:36.469
switch all connected to the
physical interface its connected

00:10:36.469 --> 00:10:39.706
up to the physical network
switching the infrastucture then

00:10:39.706 --> 00:10:44.010
you know gateway router going
out to the internet. so let show

00:10:44.010 --> 00:10:48.314
some demos. It depends on the
virtual environment. So if we go

00:10:48.314 --> 00:10:52.619
back here to this slide. Here
the Mac playing summary so I

00:10:52.619 --> 00:10:56.556
guess I will show the downloads
later after this. Open source

00:10:56.556 --> 00:11:01.227
zen with linux bridging. We also
have the open V switch We the

00:11:01.227 --> 00:11:05.165
zen server which was running
open V switch. An older version

00:11:05.165 --> 00:11:08.768
1.4.6. Microsoft the hyper V
virtual switch and the free

00:11:08.768 --> 00:11:13.439
version also with the hyper V
switch and VMware V spears so I

00:11:13.439 --> 00:11:17.377
kind spilled the beans there,
Lets us look at these demos.

00:11:17.377 --> 00:11:20.980
hopefully they'll work Its a
reduced resolution and I had

00:11:20.980 --> 00:11:25.652
test them all here. It may not
see the text too well but

00:11:25.652 --> 00:11:30.690
they're on the CD. If you have
the DEFCON CD you can view them.

00:11:30.690 --> 00:11:34.994
So here basically we see the
Linux bridge mode. We have a

00:11:34.994 --> 00:11:38.231
virtual machine running zen 2
linux running zen, kernel

00:11:38.231 --> 00:11:42.535
bridging. You can see in this
fist window here We are showing

00:11:42.535 --> 00:11:45.772
the network interface. Showing
the configuration in bridge mode

00:11:45.772 --> 00:11:49.008
showing the the actual interface
providing for the virtual

00:11:49.008 --> 00:11:52.946
machine does not have an IP
address its just bridge. And

00:11:52.946 --> 00:11:56.883
then we have two virtual
machines. The one in the middle

00:11:56.883 --> 00:12:01.554
is the target and all the way
over is the attacker system. So

00:12:01.554 --> 00:12:06.226
on the attacking system we are
going to fire wire shark and we

00:12:06.226 --> 00:12:09.462
can see our traffic general
broadcast traffic across that

00:12:09.462 --> 00:12:14.133
what we will do we apply HTTP
filter and start running the mac

00:12:14.133 --> 00:12:18.071
flooding attack just using mac
off. Which is been around since

00:12:18.071 --> 00:12:22.742
1999. So can you the mac running
attack running over there on the

00:12:22.742 --> 00:12:27.413
side. we can see the wire shark.
We can see a malformed packets

00:12:27.413 --> 00:12:31.351
flooding the network. So just an
in indication that something is

00:12:31.351 --> 00:12:36.022
going on here. So apply the HTT
paperwork filter, view if we can

00:12:36.022 --> 00:12:40.326
see the target systems web
traffic. So we can see if we

00:12:40.326 --> 00:12:44.263
could get some plain text
information out of that. So we

00:12:44.263 --> 00:12:48.935
really should not be able to do
that but this is an environment,

00:12:48.935 --> 00:12:52.538
but this is a bridge
environment. so is loading up

00:12:52.538 --> 00:12:56.843
the filter here, filtering all
the pass packets and over on the

00:12:56.843 --> 00:13:00.780
target system we are going to
start surfing the web. Nothing

00:13:00.780 --> 00:13:04.017
interesting is happening in the
wireshark windows. so basically

00:13:04.017 --> 00:13:08.321
what is going on here is Linux
is preventing the mac flooding

00:13:08.321 --> 00:13:11.924
attack in actually from being
successful in this case. So

00:13:11.924 --> 00:13:16.596
let's take a look what actually
happens when we do this in open

00:13:16.596 --> 00:13:20.900
V switch. 2.0.0. So again in the
first window that's the hyper

00:13:20.900 --> 00:13:25.204
vicar the host that is zen 2
Linux. And again Im just

00:13:25.204 --> 00:13:28.441
showing off the basic working
configuration for this system.

00:13:28.441 --> 00:13:32.745
It has a management interface
set up with a dedicated IP and

00:13:32.745 --> 00:13:37.417
it has a second interface set up
use for the virtual switch for

00:13:37.417 --> 00:13:42.088
the open version V switch and we
can see here the configuration V

00:13:42.088 --> 00:13:46.759
switch. A couple of VMs that are
attached to it and running. And

00:13:46.759 --> 00:13:51.431
again in middle we have the
target and over the on the side

00:13:51.431 --> 00:13:55.034
the attacking system highlighted
the IP addresses there. We are

00:13:55.034 --> 00:13:58.971
gonna open up the web browser
and the target system. Start

00:13:58.971 --> 00:14:02.208
running wire shark and the
attacking system so very

00:14:02.208 --> 00:14:06.145
systematic in our approach here.
Same VA all the same. Same

00:14:06.145 --> 00:14:10.083
process. Weve seen the art
traffic We apply the HTTP filter

00:14:10.083 --> 00:14:13.686
and we are gonna starting
running the mac flooding attack.

00:14:13.686 --> 00:14:17.990
So flooding the network. And we
will start surfing the wire over

00:14:17.990 --> 00:14:21.594
the target system and pretty
much immediately we start seeing

00:14:21.594 --> 00:14:25.531
the HTTP packets coming from
wireshark at this point we are

00:14:25.531 --> 00:14:28.768
acquiring all the network
traffic point from that target

00:14:28.768 --> 00:14:32.371
system. The stuff that should be
prevented from the coalition

00:14:32.371 --> 00:14:36.676
domain protection. [APPLAUSE ]
>> In the video we go a little

00:14:36.676 --> 00:14:40.279
deeper and go through the
packets after we have gathered

00:14:40.279 --> 00:14:44.584
enough. So lets gather a few
more here and then. Its a

00:14:44.584 --> 00:14:49.255
little hard enough to see up
there but if you watch the video

00:14:49.255 --> 00:14:52.859
later you can see where we
actually started inspecting some

00:14:52.859 --> 00:14:57.530
these packets and we were able
to pull some clear text all the

00:14:57.530 --> 00:15:01.467
header information. I go into
show you were you can actually

00:15:01.467 --> 00:15:06.139
look at the text of on of the
webpages and view them in

00:15:06.139 --> 00:15:09.742
wireshark it is passing text
over, showing that demo here.

00:15:09.742 --> 00:15:14.413
That third video for the sake of
time I'm going to skip that

00:15:14.413 --> 00:15:18.351
third one. But Its just
showing the open V switch in

00:15:18.351 --> 00:15:23.022
Citrix zen server and It does
work. So is just using an older

00:15:23.022 --> 00:15:28.394
version of open V source so feel
free to look at in you tube or

00:15:28.394 --> 00:15:33.065
check it out on the CD as well.
So actually we already showed

00:15:33.065 --> 00:15:37.003
this slide. But basically
summery is that it worked in any

00:15:37.003 --> 00:15:40.606
open V switch environment. and
the performance has impact every

00:15:40.606 --> 00:15:44.210
single environment. we can't
talk about VM ware because in

00:15:44.210 --> 00:15:46.746
the VMware user license
agreement specifically state

00:15:46.746 --> 00:15:50.683
where he not allow to publish or
talk about public venue

00:15:50.683 --> 00:15:53.219
performing benchmarking results
without prior consent from

00:15:53.219 --> 00:15:57.523
VMware so. N/A. But when you
look at what happen to basic

00:15:57.523 --> 00:16:00.760
networking over that networking
after the attack is occurring

00:16:00.760 --> 00:16:05.064
you can see something like this.
So this was performed at the

00:16:05.064 --> 00:16:09.001
this test was gathered out of
the bridge interface. The first

00:16:09.001 --> 00:16:14.040
60 ICP request there was no mac
flooding on any so we have a

00:16:14.040 --> 00:16:18.344
baseline there. so you can see
its really low What I was

00:16:18.344 --> 00:16:22.281
doing is pinning a server one
hop away from the virtualized

00:16:22.281 --> 00:16:27.320
switch so we are just going out
in the land to a server out

00:16:27.320 --> 00:16:32.358
there and just pinging it to see
what we are getting. 60 is a

00:16:32.358 --> 00:16:36.662
really low latency there for the
first 60 ICMP packets and as

00:16:36.662 --> 00:16:40.600
soon as we start doing that mac
flooding attack its gradually

00:16:40.600 --> 00:16:44.904
increasing up and then and all
the sudden that flood is really

00:16:44.904 --> 00:16:48.507
happening we got a lot of
variation and latency there

00:16:48.507 --> 00:16:52.445
peaking almost at 130 140
milliseconds and as soon as we

00:16:52.445 --> 00:16:56.749
caught of that mac flooding
attack you can see it drop right

00:16:56.749 --> 00:17:01.420
down to nothing back to baseline
again so you can really see the

00:17:01.420 --> 00:17:05.024
performance does get impacted
here on the network when running

00:17:05.024 --> 00:17:09.695
this attack. Ok so we do our do
diligence here and we reported

00:17:09.695 --> 00:17:13.299
this vulnerability we notify
cert.org we assigned a EU number

00:17:13.299 --> 00:17:17.236
there. Haven't received anything
from each of that org so hopeful

00:17:17.236 --> 00:17:21.908
we hear something to them. We
report to open V switch and they

00:17:21.908 --> 00:17:25.845
immediately responded for the
patch so any version of open V

00:17:25.845 --> 00:17:30.516
switch from 2 dot 0 dot 0 and
higher been hatch to mediate

00:17:30.516 --> 00:17:35.554
this attack. So feel free to
test it out. If you want to go

00:17:35.554 --> 00:17:40.226
to that link the slide is
available and in CD as well you

00:17:40.226 --> 00:17:44.163
can actually read the whole
details of that patch and that

00:17:44.163 --> 00:17:47.767
everything that entails. And
also see the source code as

00:17:47.767 --> 00:17:51.003
well. So traditionally these
attacks in physical network are

00:17:51.003 --> 00:17:54.607
mitigated by using for security.
The limit the actual mac

00:17:54.607 --> 00:17:58.544
addresses that can accumulate on
a port so they actually dont

00:17:58.544 --> 00:18:01.781
hit that threshold with
overflowed we can start flooding

00:18:01.781 --> 00:18:05.718
that network. we can also allow
authorize mac addresses. We just

00:18:05.718 --> 00:18:09.655
specifically say You're the only
system that can connect to this

00:18:09.655 --> 00:18:13.592
port and that will help midigate
this attack too. [inaudible] Or

00:18:13.592 --> 00:18:17.530
we can just disable all unused
ports but this stuff doesn't

00:18:17.530 --> 00:18:21.133
really work on virtual switches.
Port security is available in

00:18:21.133 --> 00:18:25.805
the nexus one thousand V of
Cisco but it is paid version and

00:18:25.805 --> 00:18:30.476
you on in a vmware environment
or a hyper V environment. so is

00:18:30.476 --> 00:18:34.780
very costly to get into at a
level of protection so this

00:18:34.780 --> 00:18:38.384
other virtual switches hopefully
they with brought up to speed.

00:18:38.384 --> 00:18:41.988
Especially open source versions
to actually offer this kind of

00:18:41.988 --> 00:18:45.591
security cause we are getting
into the virtualized world here

00:18:45.591 --> 00:18:49.195
this is very important. So
lets discuss DHCP attacks. So

00:18:49.195 --> 00:18:53.499
the basic of the DHCP protocol
we can use it to allocate

00:18:53.499 --> 00:18:56.736
network information IP address
information to a bunch of

00:18:56.736 --> 00:19:00.339
machine in the network. Makes
thing a lot simpler for

00:19:00.339 --> 00:19:03.209
administrations. Things like
subnet mask default gateway all

00:19:03.209 --> 00:19:07.513
these essentials you need to
actually be on a network can be

00:19:07.513 --> 00:19:10.750
allocation to DHCP. The basic
client server protocol the

00:19:10.750 --> 00:19:13.986
client broadcast out for an
address. the server response

00:19:13.986 --> 00:19:17.590
with the lease information and
offer. And the client broadcast

00:19:17.590 --> 00:19:21.527
by saying yeah sure I'll take
that. And then the server

00:19:21.527 --> 00:19:25.131
acknowledges and we have this
lease establishes. The we have

00:19:25.131 --> 00:19:29.435
an IP address and all the
information that we need in that

00:19:29.435 --> 00:19:34.106
server. DHCP allows if for
action so we can take a look at

00:19:34.106 --> 00:19:37.710
RFC 2132. You're going to find
there 255 different option

00:19:37.710 --> 00:19:41.647
available to pass to your DHCP.
time server domain names art

00:19:41.647 --> 00:19:45.584
cash, all sorts over good stuff.
So really to perform DHCP

00:19:45.584 --> 00:19:50.256
attack, we are going to put a
rouge DHCP server control on the

00:19:50.256 --> 00:19:53.859
network this is going to compete
legitimate DHCP server to

00:19:53.859 --> 00:19:56.028
actually provide address
information network information

00:19:56.028 --> 00:20:01.067
to clients on that network. Well
this is only has a 50, 50 chance

00:20:01.067 --> 00:20:05.738
of being successful and if you
put multiple row of DHCP in a

00:20:05.738 --> 00:20:09.675
network and you're going to able
to increase that probable. And

00:20:09.675 --> 00:20:14.714
this is very simple we are using
DNS mask you set this up for

00:20:14.714 --> 00:20:18.651
about 5 minutes or less
[inaudible] so we have a few

00:20:18.651 --> 00:20:21.887
conditions few scenarios we ran
this will duplicate addressing

00:20:21.887 --> 00:20:25.825
basically you try to identify
the IP range the legitimate DHDP

00:20:25.825 --> 00:20:30.129
server passing out. You try to
mimic that in your own server.

00:20:30.129 --> 00:20:34.066
And trying to do some duplicate
addressing attacks. We are going

00:20:34.066 --> 00:20:37.670
to call denial of service. So
basically a denial service

00:20:37.670 --> 00:20:40.906
conflict. You just a graphic
illustrated. we have a

00:20:40.906 --> 00:20:44.844
legitimate DHCP server and a
malicious one. And the first two

00:20:44.844 --> 00:20:48.447
clients get their addresses from
the legitimate server well you

00:20:48.447 --> 00:20:52.751
can see the third client got it
from malicious server and with

00:20:52.751 --> 00:20:57.056
in conflict with the first one.
We have a problem on our

00:20:57.056 --> 00:21:01.727
network. We have a rouge DNS
server. If we are running a DHCP

00:21:01.727 --> 00:21:04.964
server we can provide DNS
information and Primary DNS

00:21:04.964 --> 00:21:08.901
server information for that
system on that network so if we

00:21:08.901 --> 00:21:13.205
are control of the DHCP server
we are running like DNS mac

00:21:13.205 --> 00:21:17.877
that also doubles as a DNS
server so now we can use that

00:21:17.877 --> 00:21:21.113
actually provide false or poison
our DNS server information

00:21:21.113 --> 00:21:25.417
clients in our network and
really the effect of that we are

00:21:25.417 --> 00:21:30.089
directed that traffic to where
we want it to go. So can start

00:21:30.089 --> 00:21:32.958
stealing information harvesting
information for direct it to

00:21:32.958 --> 00:21:37.630
servers that we are control of.
So basic this is a rouge, DNS

00:21:37.630 --> 00:21:41.567
server attack. that we have on
the top a legitimate server,

00:21:41.567 --> 00:21:45.871
client S for Gmail that gets
back the IP address on gmail.com

00:21:45.871 --> 00:21:49.475
legitimate address. But if we
have a malicious server out

00:21:49.475 --> 00:21:54.146
there we direct it to where we
want it to go. Incorrect default

00:21:54.146 --> 00:21:57.383
gateway is another attack we try
just providing incorrect

00:21:57.383 --> 00:22:00.986
information . And base just
causing a denial of service

00:22:00.986 --> 00:22:04.924
attack for those system of
network trying to get out side

00:22:04.924 --> 00:22:08.160
of the network outside of
different subnet or different

00:22:08.160 --> 00:22:12.097
resources outside of the LAN. A
malicious honey net was another

00:22:12.097 --> 00:22:16.035
attack we used. So instead of
getting just a bad default

00:22:16.035 --> 00:22:19.972
gateway address we actually had
a router system on another VM

00:22:19.972 --> 00:22:23.576
pointed the clients to that
router system then routed the

00:22:23.576 --> 00:22:27.179
traffic through that and mirror
the production network and the

00:22:27.179 --> 00:22:30.783
malicious honey net and gather
information by doing that. This

00:22:30.783 --> 00:22:35.087
is just an imagine showing that
we client A going through a

00:22:35.087 --> 00:22:39.024
regular default gateway and this
is happily getting to where it

00:22:39.024 --> 00:22:43.696
needs to be, client B associated
with a rouge DSCP server got a

00:22:43.696 --> 00:22:47.633
bad default gateway and traffic
was directed for that honey net

00:22:47.633 --> 00:22:51.570
for collection and finally we
did remote execution of code. So

00:22:51.570 --> 00:22:55.507
when we started this research on
DHCP attacks its right around

00:22:55.507 --> 00:23:00.546
the corner when shell shock was
big so we were trying to do what

00:23:00.546 --> 00:23:05.217
we can do with that. So by
making use of the DHCP options

00:23:05.217 --> 00:23:09.521
we find shell shock to run the
remote code on these systems.

00:23:09.521 --> 00:23:14.193
And what happens is we have a
lease time DHCP server time so

00:23:14.193 --> 00:23:17.796
every time that the lease
refreshes itself that code is

00:23:17.796 --> 00:23:23.168
ran so we can use as a mock up
CRON job on the systems. The

00:23:23.168 --> 00:23:26.405
effect really this can be
catastrophic this can be

00:23:26.405 --> 00:23:31.076
harmless. You can set this to
MODP and we can use this to

00:23:31.076 --> 00:23:34.680
shadow file to some email
address or some other server.

00:23:34.680 --> 00:23:38.617
And we can recursive redelete
the system as is booting up

00:23:38.617 --> 00:23:42.221
right after it gather his IP
address information. So the

00:23:42.221 --> 00:23:46.158
basic protocol is the same. We
are doing that client server

00:23:46.158 --> 00:23:49.762
exchange for IP address
information. But in the end here

00:23:49.762 --> 00:23:53.699
were passing the option 114 and
were throwing out the shell

00:23:53.699 --> 00:23:58.003
attack socket packet on this
case. So we are passing the RF

00:23:58.003 --> 00:24:01.941
to RF4 slash with that shell
shark attack to delete the

00:24:01.941 --> 00:24:06.612
system. So the test environment
for this was the same as it is

00:24:06.612 --> 00:24:09.848
mac flooding attack. Reproducing
this stuff on the same

00:24:09.848 --> 00:24:14.153
environment that we have built
there. But we did need to expand

00:24:14.153 --> 00:24:18.824
the virtual machine beyond the
system But we fire up 4 sent to

00:24:18.824 --> 00:24:23.128
FVM one configured that DHCP and
DNS server and then we have

00:24:23.128 --> 00:24:28.167
simple router system. To do that
honey nut attack and we set up a

00:24:28.167 --> 00:24:32.471
basic web server to use to do
our poisonous DNS attack and

00:24:32.471 --> 00:24:36.775
we'll show you another DEMO here
another way we used that. And

00:24:36.775 --> 00:24:40.713
our final system which is our
client system left vulnerable to

00:24:40.713 --> 00:24:45.384
shell shock. And so we actually
do a proof of concept with that.

00:24:45.384 --> 00:24:49.321
So the actual scenarios we did
for the remote execution of

00:24:49.321 --> 00:24:53.992
code. See that we did pas a
[inaudible] so we are just doing

00:24:53.992 --> 00:24:58.297
a proof of concept fairly harm
less attack here. we just echo

00:24:58.297 --> 00:25:02.601
out a shell shock vulnerability
if you could read this it work

00:25:02.601 --> 00:25:06.905
tool file and slash temp call
shell shack. We also tested to

00:25:06.905 --> 00:25:11.944
see what kind of access we had
to use the ID command. So we

00:25:11.944 --> 00:25:16.982
pass the ID command instead of
this bin echo we just did bin id

00:25:16.982 --> 00:25:20.586
and that pass into action
actually when a client receives

00:25:20.586 --> 00:25:24.189
its IP address information
from the DHCP server it showed

00:25:24.189 --> 00:25:28.861
that it was running as route. So
the poison DNA server we just

00:25:28.861 --> 00:25:32.798
basically give it the poison DNA
server the information and then

00:25:32.798 --> 00:25:37.836
pass it to spoof gmail mail dot
google dot com and www dot gmail

00:25:37.836 --> 00:25:40.706
dot com to steal users
credentials. default default

00:25:40.706 --> 00:25:44.309
gateway invalid default gateway
attack we pass 1.1.1.1 so basic

00:25:44.309 --> 00:25:48.981
denial of service in the rest of
the systems and in the malicious

00:25:48.981 --> 00:25:53.285
gateway we gave it that 1.1.20
address which was our system our

00:25:53.285 --> 00:25:57.956
router system to pass it up to
another honey nut. so how do

00:25:57.956 --> 00:26:01.894
monitor this how do we really
see this having a 50/50

00:26:01.894 --> 00:26:04.763
probability between our
legitimate and our rouge servers

00:26:04.763 --> 00:26:09.802
we just use TCP dump. So here is
a simple bash scrip that was

00:26:09.802 --> 00:26:12.671
Written just to gather
information for the DHCP

00:26:12.671 --> 00:26:16.608
handshake. And produce output
like this where we just saw the

00:26:16.608 --> 00:26:20.546
broadcast traffic coming between
us the clients and the server we

00:26:20.546 --> 00:26:25.217
can look into this you can see
that it was about 50/50 percent

00:26:25.217 --> 00:26:29.521
chance that you would hit that
rouge DHCP servers. So what I

00:26:29.521 --> 00:26:34.193
was just doing I was running
DHCP servers I run it once. I

00:26:34.193 --> 00:26:39.231
watch TCP dump output. I kill
it, run it again, kill it run it

00:26:39.231 --> 00:26:42.835
again and keep collecting and
pretty much bounce back and

00:26:42.835 --> 00:26:46.772
fourth. So [inaudible] is a
legitamate server and 1.3 is the

00:26:46.772 --> 00:26:51.076
rouge server. can you see here
were going back and forth. So

00:26:51.076 --> 00:26:56.115
in order to do the ID test to
verify as we were running at

00:26:56.115 --> 00:27:00.419
route as we are running shell
shock command. We just did user

00:27:00.419 --> 00:27:05.791
ban ID and it produces an output
on the client when we run the DH

00:27:05.791 --> 00:27:10.829
client just show we were running
as the UID of root the GID of

00:27:10.829 --> 00:27:15.134
root. We were in the route user
root group. And summarize these

00:27:15.134 --> 00:27:18.737
attacks it worked on everything.
Every attack every scenario we

00:27:18.737 --> 00:27:22.341
did worked across the board
there is no protection against

00:27:22.341 --> 00:27:27.012
this attack default out of the
box for any of the hyper vicar

00:27:27.012 --> 00:27:31.683
environment. So we have a few
demo here for this. How are we

00:27:31.683 --> 00:27:36.355
doing on time? We are going to
skip poison DNS server just for

00:27:36.355 --> 00:27:40.659
time. For it is very basic we
are just running DHCP server

00:27:40.659 --> 00:27:45.697
pushing it out but we kinda want
to show you the shell shock ones

00:27:45.697 --> 00:27:50.002
and hopefully they come out
good. So here we have a shell

00:27:50.002 --> 00:27:53.605
shock system, which is that
client system that is vulnerable

00:27:53.605 --> 00:27:58.644
to shell shock, and on the other
end we have road DHCP server. So

00:27:58.644 --> 00:28:03.315
if we look at the resolve we can
see the system originally grab

00:28:03.315 --> 00:28:06.919
his IP address from the
legitimate DHCP server and just

00:28:06.919 --> 00:28:10.856
contain that yum dot log which
is a standard insulation nothing

00:28:10.856 --> 00:28:15.527
else in there. We are going to
restart the DHDP server to DH

00:28:15.527 --> 00:28:20.198
client service here to pull a
new address and try to grab one

00:28:20.198 --> 00:28:24.870
from that rouge DHCP server. And
just wait a few for the process

00:28:24.870 --> 00:28:29.541
to occur. My wall is waiting.
Lets take a look at that mask

00:28:29.541 --> 00:28:33.845
dot com file. We can see the
DHCP range. Which was specified

00:28:33.845 --> 00:28:39.952
by a one liner here. we can see
we did 200 to 254 and we did a

00:28:39.952 --> 00:28:44.256
least time of one minute to
cycle to the leasing. Just to

00:28:44.256 --> 00:28:49.628
see what we can do we can go it
quickly. So we can verify that

00:28:49.628 --> 00:28:53.231
it is actually refreshing. We
set the default gateway to

00:28:53.231 --> 00:28:57.169
[inaudible] when we look at
further in the config file. We

00:28:57.169 --> 00:29:01.473
can see the shell shock attack
here that we pass that echo

00:29:01.473 --> 00:29:05.777
command testing shell shock. We
would try to write into temp. So

00:29:05.777 --> 00:29:09.715
over here the client pull the
DNS information from the road

00:29:09.715 --> 00:29:14.386
DHP server so we got an address
from that rouge DHCP server so

00:29:14.386 --> 00:29:18.323
the shell shock command should
of ran on that client system.

00:29:18.323 --> 00:29:22.260
Now we check the context an
interesting thing. So every time

00:29:22.260 --> 00:29:26.198
the system either pull from the
legitimate DHCP server or the

00:29:26.198 --> 00:29:30.135
rouge one they should pull the
same IP address it just

00:29:30.135 --> 00:29:34.072
requested each each time. So
there we could see the shell

00:29:34.072 --> 00:29:39.111
shock apply was written to that
client to DHCP and If we cat out

00:29:39.111 --> 00:29:43.415
the file we can see it actually
contains the information we want

00:29:43.415 --> 00:29:48.453
to place in that file. We can
see it was written as the root

00:29:48.453 --> 00:29:53.492
user as well. [ APPLAUSE ] Thank
you. And over here you can see

00:29:53.492 --> 00:29:57.796
on this side VM mask dot com.
I'm just comparing showing that

00:29:57.796 --> 00:30:01.733
we actually push through was
actually went through. Now if we

00:30:01.733 --> 00:30:07.105
just wait about a minute or so.
So you will see in the video I'm

00:30:07.105 --> 00:30:12.144
just going to keep trying to do
the command just to see what is

00:30:12.144 --> 00:30:16.448
going on here but we are going
to see actually got written

00:30:16.448 --> 00:30:20.385
again. Over writes the file.
Just takes a couple of seconds.

00:30:20.385 --> 00:30:24.322
What happens when you run, it
doesn't happen on the exact

00:30:24.322 --> 00:30:28.260
minute. When you run the DH
client command It goes through

00:30:28.260 --> 00:30:31.863
the whole process of doing the
lease and everything and

00:30:31.863 --> 00:30:35.801
sometimes that goes beyond on
the minute and it actually it

00:30:35.801 --> 00:30:39.404
hits it so sitting here being
impatient running the command

00:30:39.404 --> 00:30:44.076
and it does end up going across
the next minute to push the

00:30:44.076 --> 00:30:49.114
shell shock. We go back up and
look at the least time as one

00:30:49.114 --> 00:30:54.152
minute here. And we just do the
LS over on this side again we

00:30:54.152 --> 00:30:58.824
can see this MD wrote. The first
time stamp samples 14: 36 and

00:30:58.824 --> 00:31:03.862
the next time stamp is 14:37 I
was able to write it down every

00:31:03.862 --> 00:31:08.166
minute if I wanted too. That was
our basic proof of concept

00:31:08.166 --> 00:31:13.205
attack. So we just see if it
works. Then we ask what can we

00:31:13.205 --> 00:31:17.509
really do with this? Thats
great we can write the temp put

00:31:17.509 --> 00:31:22.547
a file on there. But how can we
use this to elaborate and gain

00:31:22.547 --> 00:31:26.852
forward access to that client
system? So what we did we figure

00:31:26.852 --> 00:31:31.523
well maybe we should play with
some HSS keys and see what we

00:31:31.523 --> 00:31:36.194
can do. So the same scenario
same set up. W have our client

00:31:36.194 --> 00:31:41.233
system and rouge HDP server over
here and we are going to try HSS

00:31:41.233 --> 00:31:45.537
over the system first. And we
see the prompting us for the

00:31:45.537 --> 00:31:49.474
password. So there is no key
information use right now in

00:31:49.474 --> 00:31:54.846
that system. So next what we are
going to do is look at that host

00:31:54.846 --> 00:32:00.218
file in the system. Well it is
using a DHS mask it is the host

00:32:00.218 --> 00:32:03.822
file trying to provide DNS
information on the system. And

00:32:03.822 --> 00:32:08.126
we can see we have a web server
running at [inaudible]1.10 is

00:32:08.126 --> 00:32:12.798
providing the web of name as
well as the gmail stuff that we

00:32:12.798 --> 00:32:17.469
were spoofing before. And if I
SHH over to that system We look

00:32:17.469 --> 00:32:21.773
at var www html directory we ca
see contents right there. There

00:32:21.773 --> 00:32:26.812
is a index.html and there a bad
key that I put it in there.

00:32:26.812 --> 00:32:31.116
Figure this is my web where I
control all through the world

00:32:31.116 --> 00:32:36.488
and this is my server and try to
use to holds that key that I

00:32:36.488 --> 00:32:41.526
about to push over the client
system and we can it out we can

00:32:41.526 --> 00:32:46.198
see the public key. Key that was
generated the key gen SHH key

00:32:46.198 --> 00:32:50.502
gen command. We leave the web
server and go back over here.

00:32:50.502 --> 00:32:55.540
And look at the dns.comp file.
Let see. So at the end of here

00:32:55.540 --> 00:32:59.845
we are using a little more
intricate command you can see in

00:32:59.845 --> 00:33:04.883
curl to pull that down that bad
key file from the web server and

00:33:04.883 --> 00:33:08.119
redirecting that to root.shh
that authorize keys on the

00:33:08.119 --> 00:33:12.057
client system. when we run DHCP
this the actually command that

00:33:12.057 --> 00:33:16.361
is gonna be using. so its going
out there. its gonna download

00:33:16.361 --> 00:33:20.298
that key file and place it
directly in the root user

00:33:20.298 --> 00:33:24.603
authorize keys file. So we will
go over on the client we'll

00:33:24.603 --> 00:33:28.907
check out that authorize key
file and see if it there. There

00:33:28.907 --> 00:33:32.510
is not authorized key file
currently on that client system.

00:33:32.510 --> 00:33:37.182
So it was never place in there
and we'll try to obtain an

00:33:37.182 --> 00:33:41.486
address from that system. But
first we are looking at the root

00:33:41.486 --> 00:33:45.790
directory on the rouge DHCP
server we can see there is a

00:33:45.790 --> 00:33:50.462
private and public key on the
.HSS folder and if we cat out

00:33:50.462 --> 00:33:55.500
the file the public key we will
see is the same public key on

00:33:55.500 --> 00:33:59.804
the we are server that is being
pushed down through the client

00:33:59.804 --> 00:34:04.109
through DHCP. So going back on
the client we will just rerun

00:34:04.109 --> 00:34:08.780
the client server to try to pull
a new address. From the road

00:34:08.780 --> 00:34:13.451
server and after the few we a
little time here should get our

00:34:13.451 --> 00:34:16.688
information. And hopefully the
authorized keys file is placed

00:34:16.688 --> 00:34:21.359
in the .shh folder. And there it
is. Written by root. [ APPLAUSE

00:34:21.359 --> 00:34:26.731
] >> Great we got the file but
does it work? If we go back

00:34:26.731 --> 00:34:31.403
over. Is catted out we can see
that we have double entries in.

00:34:31.403 --> 00:34:36.441
What happens I believe when I
ran DH client I ran it at the

00:34:36.441 --> 00:34:41.112
tail end it wrote it once. And
as I was redirecting or doing

00:34:41.112 --> 00:34:45.050
append instead of an overwrite
it just added another entry of

00:34:45.050 --> 00:34:49.721
that key. So good house key when
you get into that system clear

00:34:49.721 --> 00:34:54.759
up that authorize key file and
you should be good to go. So we

00:34:54.759 --> 00:34:59.064
are using that curl command and
redirecting that's how we got at

00:34:59.064 --> 00:35:03.735
a double entry and we should
just test the shh into it. So

00:35:03.735 --> 00:35:08.406
when look at ur history we look
backward. I just gonna grab that

00:35:08.406 --> 00:35:12.711
same command we used the first
time. Instead of typing it all

00:35:12.711 --> 00:35:16.314
again. Going to 168.1.1.226
which is the shell shock system

00:35:16.314 --> 00:35:20.986
and it went right in. So it did
prompt for the password this

00:35:20.986 --> 00:35:24.923
time. So authorize key file was
pushed over there and was

00:35:24.923 --> 00:35:29.594
effective in getting us root
access. So ID we can see that we

00:35:29.594 --> 00:35:34.265
are root user in that system.
exit out. Try its own again and

00:35:34.265 --> 00:35:38.937
of course the last log should
say we came from the rouge DHCP

00:35:38.937 --> 00:35:43.241
server so it was affected. Okay
so how can us mitigate these

00:35:43.241 --> 00:35:46.111
attacks. Enforces static
addresses. So our DHCP servers

00:35:46.111 --> 00:35:50.415
will ran out a question. If you
a really large environment you

00:35:50.415 --> 00:35:54.019
are really depending on DHCP for
address allocation this could

00:35:54.019 --> 00:35:57.956
cause some issues. We can also
use DHCP snooping on switches

00:35:57.956 --> 00:36:02.260
usually affected in the physical
word but is no really there yet.

00:36:02.260 --> 00:36:05.497
Virtualized switch environment.
Is an option in some physical

00:36:05.497 --> 00:36:09.801
switches like cisco and HP but
we can also restrict access to

00:36:09.801 --> 00:36:13.038
specific mac address to those
systems. This is highly

00:36:13.038 --> 00:36:15.206
restrictive. Or DHCP server
authorization windows

00:36:15.206 --> 00:36:19.144
environment. The windows 2000
server and up. If you have an

00:36:19.144 --> 00:36:22.747
active directory environment and
you are writing a whole windows

00:36:22.747 --> 00:36:26.351
DHCP servers you can do DHCP
authorization but really who

00:36:26.351 --> 00:36:30.288
wants to run the whole windows
environment. So we can also

00:36:30.288 --> 00:36:33.525
explore techniques in software
to define networking so ideas

00:36:33.525 --> 00:36:37.128
maybe to defining filters to
identify these DHCPs request and

00:36:37.128 --> 00:36:41.433
transfers say hay this is the
real legitimate DHCP server if I

00:36:41.433 --> 00:36:44.669
see any other addresses
broadcasting to this network we

00:36:44.669 --> 00:36:48.273
just ignore that we will
[inaudible] those clients to the

00:36:48.273 --> 00:36:51.509
correct place. So most virtual
switches these days especially

00:36:51.509 --> 00:36:56.181
those open v switch allow you to
integrate with open flow so this

00:36:56.181 --> 00:37:00.485
is a good way to move forward
and use software networking to

00:37:00.485 --> 00:37:03.721
prevent some of this from
occurring. We did find

00:37:03.721 --> 00:37:07.325
especially in environment that
when I started running a shell

00:37:07.325 --> 00:37:11.996
shock test I was able to write
the temp find [inaudible] it was

00:37:11.996 --> 00:37:16.301
rouge writable it worked great
but when I started the HCSS key

00:37:16.301 --> 00:37:20.605
attack it didnt work. So I
wonder why. I have root access

00:37:20.605 --> 00:37:24.909
why isnt working. down to su
linux so a lot of system

00:37:24.909 --> 00:37:28.847
administrators disable SU linux,
right out of the box. It is

00:37:28.847 --> 00:37:31.716
enabled in red hat
distributions. What this was

00:37:31.716 --> 00:37:35.653
doing It was preventing it from
occurring. It is seeing this

00:37:35.653 --> 00:37:39.591
network service trying to write
to a non rouge writable folder

00:37:39.591 --> 00:37:44.629
or file. So it says no you
cant do it. So it never works

00:37:44.629 --> 00:37:49.300
until I disable SU linux And I
could write my files anywhere I

00:37:49.300 --> 00:37:52.904
want to. So take us into
consideration. SU linux will

00:37:52.904 --> 00:37:55.774
help prevent from writing
unauthorized keys attacks cause

00:37:55.774 --> 00:37:59.377
you cant write anywhere
except for temp but it doesnt

00:37:59.377 --> 00:38:04.048
work in any of the other DHCP
attacks we were trying out. Or

00:38:04.048 --> 00:38:07.986
any of the mac attacks flooding
attacks for that matter. So

00:38:07.986 --> 00:38:12.290
looking ahead we tend to move
forward in looking at V landing,

00:38:12.290 --> 00:38:16.594
V land hopping attacks to be
specifically to see if we could

00:38:16.594 --> 00:38:20.198
start hopping V landing in the
virtualized environments. So we

00:38:20.198 --> 00:38:23.434
are trying to separate domains
logical isolate these systems

00:38:23.434 --> 00:38:27.372
through V landing on the network
and most switches offer this

00:38:27.372 --> 00:38:30.608
capability. But using things
like double tagging or switch

00:38:30.608 --> 00:38:34.212
spoofing can we actually break
these V line separations on

00:38:34.212 --> 00:38:38.883
these networks? So we have to
see maybe we come back this year

00:38:38.883 --> 00:38:43.188
and present our research results
on this. >> All right so was

00:38:43.188 --> 00:38:47.859
that scary. little bit. Okay so
to wrap this up. All the layer

00:38:47.859 --> 00:38:51.095
to vulnerability we discus were
targeted toward the virtual

00:38:51.095 --> 00:38:54.332
networking devices. Not the
higher visors in particular. So

00:38:54.332 --> 00:38:58.636
that's the good thing to keep in
mind. Not every virtual switch

00:38:58.636 --> 00:39:02.574
product is available in hyper
visor. As you saw the result

00:39:02.574 --> 00:39:05.810
shows that the networking
devices can be just as

00:39:05.810 --> 00:39:09.047
vulnerable as their physical
counter parts to these classic

00:39:09.047 --> 00:39:12.650
attack, mac flooding and road
DHCP and these things. Were

00:39:12.650 --> 00:39:17.322
gonna work on these as Ronnie
said. Is good to know that zen

00:39:17.322 --> 00:39:21.259
server and other solutions using
open v switch are vulnerable to

00:39:21.259 --> 00:39:25.196
ease dropping out the box right
now. Although there is that

00:39:25.196 --> 00:39:29.500
patch, so you should get that.
and all the environment that we

00:39:29.500 --> 00:39:32.737
tested were vulnerable to all
the DHCP attack manipulations

00:39:32.737 --> 00:39:37.408
that we did. so that's the
really good one to know as well.

00:39:37.408 --> 00:39:41.012
So a single malicious virtual
machine running in a multitenant

00:39:41.012 --> 00:39:44.949
environment has a potential to
sniffing all the traffic that is

00:39:44.949 --> 00:39:48.886
going over that virtual switch.
And you saw some of the

00:39:48.886 --> 00:39:52.123
devastating effects that it can
have. Its obviously a

00:39:52.123 --> 00:39:54.292
significant treat to
confidentially, integrity and

00:39:54.292 --> 00:39:57.528
availability of data passing
over these networks in virtual

00:39:57.528 --> 00:39:59.697
multi-tenant virtual
environment. and the cloud

00:39:59.697 --> 00:40:02.934
service environment that are
being used for tons of

00:40:02.934 --> 00:40:06.170
production stuff right now. And
this all these results

00:40:06.170 --> 00:40:09.774
definitely indicate that a full
assessment of layer to network

00:40:09.774 --> 00:40:11.943
security multi-tenant
environments is warranted and

00:40:11.943 --> 00:40:15.880
important and we hope that the
take away action people will

00:40:15.880 --> 00:40:19.484
have is to really question their
hosting providers about what

00:40:19.484 --> 00:40:23.087
they're running. Are there any
mitigations steps that they are

00:40:23.087 --> 00:40:27.025
taking, ask for that, push for
that. Encourage auditing of the

00:40:27.025 --> 00:40:31.329
workload. We are happy to help
with that. Auditing the risk of

00:40:31.329 --> 00:40:35.266
the workload that you run in the
cloud. Thinking about these

00:40:35.266 --> 00:40:39.570
issues. You have no idea who you
just landed with in these

00:40:39.570 --> 00:40:41.372
multi-tenant environments.
Consider additional extra

00:40:41.372 --> 00:40:45.310
security measures some for the
users and some for the service

00:40:45.310 --> 00:40:48.546
providers. So use increase of
encryption log obviously be

00:40:48.546 --> 00:40:51.082
good.And additional service
monitoring and additional steps

00:40:51.082 --> 00:40:54.686
to detect this steps and notice
the traffic happening and

00:40:54.686 --> 00:40:58.623
alerting. Great. We will be
happy to take some questions. >>

00:40:58.623 --> 00:41:01.859
[Inaudible Question]. >>
Thats the next thing we are

00:41:01.859 --> 00:41:06.164
working on. >> We did noticed
that when the mac flooding was

00:41:06.164 --> 00:41:10.835
running it did brake the V
lines. So it broke the V line

00:41:10.835 --> 00:41:15.139
separation right off the bat.
When we turn into rouge mode. >>

00:41:15.139 --> 00:41:20.878
So in wire shark you are able to
see all the V line tags on all

00:41:20.878 --> 00:41:24.816
the framings on whatever system
that you were sniffing? >> We

00:41:24.816 --> 00:41:28.753
did not look for that
specifically at that time but we

00:41:28.753 --> 00:41:33.424
did we can see traffic on other
V lands especially when we ran

00:41:33.424 --> 00:41:37.028
other traffic and V lands
especially when we ran the

00:41:37.028 --> 00:41:41.699
citrix server and it flooded the
switches so we could see all the

00:41:41.699 --> 00:41:46.004
traffic V lad from all those
upstream as well. it really got

00:41:46.004 --> 00:41:50.675
pretty bad. We flooded close to
100 switches and put them all in

00:41:50.675 --> 00:41:54.612
hub mode. >> If you have
questions come down here to

00:41:54.612 --> 00:41:58.549
front and if you are leaving
please leave through the back

00:41:58.549 --> 00:42:02.854
door not the side doors please.
it will help the congestion out

00:42:02.854 --> 00:42:07.892
of the hallways thank you. >> On
the VM ware test that you guys

00:42:07.892 --> 00:42:11.129
indicated they were not
vulnerable to the mac flooding.

00:42:11.129 --> 00:42:14.732
Did you test any of the
workloads with allow for

00:42:14.732 --> 00:42:18.336
transmit sets or just their
default. >> Just the default

00:42:18.336 --> 00:42:22.640
EXXI virtual switch and we did
the same test in every platform.

00:42:22.640 --> 00:42:26.944
What you saw on the demo the mac
flooding attack. Nothing beyond

00:42:26.944 --> 00:42:30.181
that point. >> People have a
bunch of specific

00:42:30.181 --> 00:42:33.418
configurations. They think it
would interesting to test on

00:42:33.418 --> 00:42:36.654
some products. So thats
another thing were happy to

00:42:36.654 --> 00:42:40.591
hear. >> On the Linux side,
which virtualized nix did you

00:42:40.591 --> 00:42:44.896
used. On the virtualized side
which nix did you use, like E

00:42:44.896 --> 00:42:49.934
1000 versus rodeo and also did
you try test like KBM vs Zen >>

00:42:49.934 --> 00:42:54.605
We did not use KBM vs Zen
because we are really looking at

00:42:54.605 --> 00:42:58.209
V switch. so the switching
mechanism was the important part

00:42:58.209 --> 00:43:03.581
here and if are you using KBM or
ZEN you are using open v switch

00:43:03.581 --> 00:43:06.451
anyway. hyper vicar doesn't
really matter. Its the

00:43:06.451 --> 00:43:09.687
virtual switch implementation.
We were using open source zen.

00:43:09.687 --> 00:43:13.991
we are just using straight xl
command. so no over the top

00:43:13.991 --> 00:43:17.228
higher layer interaction from
management. It was just straight

00:43:17.228 --> 00:43:21.165
command line exhale. >> Did you
try different nix drivers like

00:43:21.165 --> 00:43:25.103
ro-IO vs P-1000? >> No we
didnt. thank you though. >>

00:43:25.103 --> 00:43:30.141
So my question is your testing
seems to be on a flat layer tune

00:43:30.141 --> 00:43:34.078
network only. Have you guys
testing this on across a routed

00:43:34.078 --> 00:43:37.315
switch network were you be
implementing something like IP

00:43:37.315 --> 00:43:40.184
helper address to forward
clients to specific address

00:43:40.184 --> 00:43:44.121
rather than relying on picking
up HPH request across a flat

00:43:44.121 --> 00:43:48.059
network? >> No we were just
looking on the specific land

00:43:48.059 --> 00:43:52.730
itself and moving forward to V
land attacks next. >> And I mean

00:43:52.730 --> 00:43:56.334
the reason why I ask that in
multitentent environment you

00:43:56.334 --> 00:44:01.005
would typically never be picking
up or a local DHCP server you be

00:44:01.005 --> 00:44:04.942
routed back to your corporate
network to your own DHCP address

00:44:04.942 --> 00:44:09.614
or DHP server so unless have you
had a DHDP server that was

00:44:09.614 --> 00:44:12.850
spoofing, DHCP server address
that should not be happening

00:44:12.850 --> 00:44:16.787
across multi turn network,
right? >> If you send us an

00:44:16.787 --> 00:44:21.092
e-mail with specific things you
want us to test we would love

00:44:21.092 --> 00:44:25.396
that. And like I said we would
like to test more environments.

00:44:25.396 --> 00:44:30.067
>> On my network we use DHCP
guard on the physical ports do

00:44:30.067 --> 00:44:33.671
such technology existed in the
virtual switches? >> Have not

00:44:33.671 --> 00:44:37.608
seen anything on the virtual
switches yet. Maybe when you get

00:44:37.608 --> 00:44:41.546
to the higher the paid cisco
versions maybe they have some

00:44:41.546 --> 00:44:45.149
implementations of that but I
havent seen it. Yeah the

00:44:45.149 --> 00:44:49.086
nexus. Not the free version
though. I would think it would

00:44:49.086 --> 00:44:53.391
be in the paid version. >> Do
you have any theory's or

00:44:53.391 --> 00:44:56.627
information about EC2 or about
structures and service. Any

00:44:56.627 --> 00:44:59.864
information that you have gotten
from other documentations stuff

00:44:59.864 --> 00:45:03.801
like that. [Inaudible] >> You
should come visit us from the

00:45:03.801 --> 00:45:08.839
labs. >> The only we know about
EC2 is that they use Zen and

00:45:08.839 --> 00:45:13.144
they use open V switch. But they
may have higher level controls

00:45:13.144 --> 00:45:17.448
on top of that that they have
implemented. Other than that, it

00:45:17.448 --> 00:45:22.119
is safely guarded. We are really
trying to get in there but is

00:45:22.119 --> 00:45:26.057
very difficult. >> I have been
with some information with WS

00:45:26.057 --> 00:45:29.994
there and they make you sign
nondisclosure. >> So it sounds

00:45:29.994 --> 00:45:34.665
like you did this in all one
flat layer networks. So in a

00:45:34.665 --> 00:45:38.269
multi-tenant environment they
may deploy that says a bunch of

00:45:38.269 --> 00:45:42.940
layer network is surprise if you
they put the same tenants in the

00:45:42.940 --> 00:45:47.245
same layer. As possible. I just
wonder if you thought about that

00:45:47.245 --> 00:45:51.916
and if other thing a lot of
these attacks are possible in a

00:45:51.916 --> 00:45:55.519
physical network but I totally
agree with you. That these

00:45:55.519 --> 00:45:59.824
attacks could be prevented in a
virtual network they have a lot

00:45:59.824 --> 00:46:04.128
more ability to look that kind
of thing. >> The stakes are

00:46:04.128 --> 00:46:07.365
higher because in the physical
world you can control

00:46:07.365 --> 00:46:11.302
[inaudible] and the virtual you
cannot as much. >> There should

00:46:11.302 --> 00:46:14.905
be more control I agree? >>
[inaudible question] >> I'm

00:46:14.905 --> 00:46:18.843
still not understanding, are
you? >> I was wondering if you

00:46:18.843 --> 00:46:22.079
were using the standard VMware
switches or the distribute

00:46:22.079 --> 00:46:26.017
switches >> Standard, we are
setting up the environment to do

00:46:26.017 --> 00:46:29.253
the setup for the nexus
distributing switching but we

00:46:29.253 --> 00:46:33.190
havent got to that point yet.
We are acquiring licensing and

00:46:33.190 --> 00:46:38.229
funding to do that. But we are
getting there. We have to set up

00:46:38.229 --> 00:46:41.832
multiple VMware environments and
do the distributing there but we

00:46:41.832 --> 00:46:45.770
are getting there. >> Any other
questions? >> Thanks everybody [

00:46:45.770 --> 00:46:46.771
APPLAUSE ] 

00:46:46.771 --> 00:46:50.708
This text is being provided in a
rough draft format. 
Communication

00:46:50.708 --> 00:46:55.012
Access Realtime Translation
(CART) is provided in order
to facilitat e communication

00:46:55.012 --> 00:00:00.000
accessibility and may not
be a totally verbatim reco
rd of the proceedings."

