00:00:00.133 --> 00:00:04.404
>> hello My name is Weston
Hecker, goodbye memory scraping

00:00:04.404 --> 00:00:09.476
malware. I'll go over the talk
in great detail about some of

00:00:09.476 --> 00:00:13.947
the -- a concept, I'm not
plugging any kind of software,

00:00:13.947 --> 00:00:19.052
proof of concept. F con lunch.
Had trouble with internet

00:00:19.052 --> 00:00:26.326
connectivity, load everything up
there, play around with it. I

00:00:26.326 --> 00:00:28.729
work for a company, KLJ,
engineering company up north.

00:00:28.729 --> 00:00:34.434
Not the views of my employer.
Yeah, who am I? What is this

00:00:34.434 --> 00:00:38.305
talk about? I spoke at DEFCON
22. A lot of computer

00:00:38.305 --> 00:00:41.508
certifications. I went for
computer science in geophysics.

00:00:41.508 --> 00:00:45.045
So I've done pentesting
professionally about 11 years. A

00:00:45.045 --> 00:00:48.916
lot of security research, in
malware, things like that, so

00:00:48.916 --> 00:00:53.020
spoke at DEFCON 22 last year, on
burner phone DDOS. Did anybody

00:00:53.020 --> 00:00:58.492
check that out? That was good
times. We do a lot of auditing.

00:00:58.492 --> 00:01:03.530
I know lots -- I've read so many
manuals it's not even funny.

00:01:03.530 --> 00:01:07.568
Wrote custom exploits for a lot
of obscure ISP gear. Something

00:01:07.568 --> 00:01:09.803
that's neglected. A lot of
people write exploits, they go

00:01:09.803 --> 00:01:15.008
for the 50 --> 000 units, 500 --> 000
units, so it's nice to be able

00:01:15.008 --> 00:01:17.010
to have -- exploits for more
obscure gear. Anybody here do

00:01:17.010 --> 00:01:19.012
pentesting for a living? Yeah.
It's really, really hard to find

00:01:19.012 --> 00:01:21.014
some of the exploits for some of
the more obscure gear. Nice to

00:01:21.014 --> 00:01:27.187
have community going. Anybody
have questions about that, feel

00:01:27.187 --> 00:01:31.692
free to throw out information
for contact later on. The

00:01:31.692 --> 00:01:36.830
software I'm going over today,
it was myself and a co-writer,

00:01:36.830 --> 00:01:41.735
Tim Schwartz, a concept we came
up with. Got sick of hearing of

00:01:41.735 --> 00:01:46.073
breaches in the news. Something
implemented correctly it could

00:01:46.073 --> 00:01:50.243
stop a lot of the breaches. So
like I said, source code will be

00:01:50.243 --> 00:01:54.848
loaded on GitHub later today.
Yeah, everything in -- as far as

00:01:54.848 --> 00:01:57.084
pentesting goes, banks,
hospitals, you name it and

00:01:57.084 --> 00:02:01.588
actually off my talk last year,
DHS contract over the next three

00:02:01.588 --> 00:02:05.459
years to attack 911 centers, so
that is very good times to be

00:02:05.459 --> 00:02:11.465
had. So I did -- last year, you
do pentesting, rubber duckies,

00:02:13.500 --> 00:02:15.936
an amazing thing. 10C3.0s, fake
phone closures, teach -- tired

00:02:15.936 --> 00:02:19.206
of -- now I rock in HTC, Android
hand set for that matter, and

00:02:19.206 --> 00:02:25.212
they're little -- keyboard, you
can do drive by attacks, you can

00:02:28.582 --> 00:02:34.588
run stuff. It's very, very cool
stuff. If you have any

00:02:36.723 --> 00:02:40.894
questions, how to build one, let
me know. I'm going to get the

00:02:40.894 --> 00:02:44.831
demo started here, so we can see
how it goes, as it progresses.

00:02:44.831 --> 00:02:50.837
So -- slides here for one
moment. There we go. Anybody

00:02:54.341 --> 00:03:00.280
familiar with point of sale
skimming software? Done any

00:03:04.651 --> 00:03:08.288
research on it or seen any other
demonstrations? This is -- the

00:03:08.288 --> 00:03:13.860
only reason I used I, a black
POS variance, very graphically

00:03:13.860 --> 00:03:18.098
nice to view, so -- and actually
I have a command version of --

00:03:18.098 --> 00:03:22.402
you'll be able to see all the
console injection, so actually

00:03:22.402 --> 00:03:25.238
slowed it down, normally injects
500 cards per second into

00:03:25.238 --> 00:03:28.742
memory. Feeds the malware, fake
credit card numbers. Going to

00:03:28.742 --> 00:03:32.212
show a little demonstration. The
actual. This is not set up like

00:03:32.212 --> 00:03:36.116
a normal environment. Normally
the POS does not have where the

00:03:36.116 --> 00:03:38.919
malicious data is being sent to,
on the same system. Just for

00:03:38.919 --> 00:03:41.822
demonstration purposes, I'm sure
everybody knew that. I had to

00:03:41.822 --> 00:03:44.724
get that out there from when I
was telling somebody else about

00:03:44.724 --> 00:03:49.463
it. It's basically -- this is
the actual place where the

00:03:49.463 --> 00:03:52.699
credit card numbers are sent, so
all the stolen credit card

00:03:52.699 --> 00:03:55.702
information will be sent by post
requests from the point of sale

00:03:55.702 --> 00:04:00.140
system to a server, but in this
sense, both of them. Going to go

00:04:00.140 --> 00:04:04.978
over the dumps. We have 3100
track data already, so -- yeah,

00:04:04.978 --> 00:04:07.814
resolution is a little bit bad
on that. These are basically a

00:04:07.814 --> 00:04:11.218
track one and track two data.
This is where they start putting

00:04:11.218 --> 00:04:14.254
into credit card dumps on forms,
validity rates, they'll do

00:04:14.254 --> 00:04:18.825
tests, stuff like that. This is
the point where the bad guy is

00:04:18.825 --> 00:04:22.262
selling it. I'm going to go next
into the actual software and

00:04:22.262 --> 00:04:27.434
what it's doing. So here's the
actual installer. Console

00:04:27.434 --> 00:04:30.570
version. Graphically pretty. It
looks like matrix stuff sliding

00:04:30.570 --> 00:04:34.307
down, and the graphic version,
full blown application you can

00:04:34.307 --> 00:04:37.711
install, modify. Does a source
code. As you can see right now,

00:04:37.711 --> 00:04:42.983
injecting track one and two.
Randomly bins, bank

00:04:42.983 --> 00:04:48.989
identification numbers. We have
special bins, designate I'm

00:04:52.159 --> 00:04:56.596
North Dakotaen, they look like
valid credit card numbers, there

00:04:56.596 --> 00:04:59.966
are no open source bin lists so
at this time we're basically

00:04:59.966 --> 00:05:04.070
injecting -- yeah, just
injecting random generated

00:05:04.070 --> 00:05:07.707
credit card numbers. I'll go
back to the slides. Desktop is

00:05:07.707 --> 00:05:13.213
one of our engagement photos.
Nothing strange going on there.

00:05:13.213 --> 00:05:19.219
I forgot you would see that. Go
back over to my slides. One

00:05:22.489 --> 00:05:28.495
second. Okay. Go to second
slide, or third slide here. You

00:05:32.332 --> 00:05:37.504
all -- it's basically, source
will be on GitHub pretty soon.

00:05:37.504 --> 00:05:42.709
Open source, once again I'm not
trying to plug anything. Just

00:05:42.709 --> 00:05:46.680
proof of concept. Working on
building into PMS, and -- I

00:05:46.680 --> 00:05:49.616
don't say why it wouldn't be in
every single system eventually,

00:05:49.616 --> 00:05:53.820
and the problem, it's gotten
large over the last few years.

00:05:53.820 --> 00:05:55.922
Literally can't turn on the news
without hearing of a breach,

00:05:55.922 --> 00:05:57.924
it's gotten a little ridiculous
over the years and that's kind

00:05:57.924 --> 00:06:03.997
of the reason Tim and myself
came up with software, and yeah,

00:06:03.997 --> 00:06:08.401
why do people skim data? I think
they're pretty obvious, and how

00:06:08.401 --> 00:06:10.971
much does it cost? Some of the
credit cards, like validity

00:06:10.971 --> 00:06:14.841
rates, very, very low, nine out
of ten will work type situation,

00:06:14.841 --> 00:06:18.645
and nine out of ten cards, $45
apiece and off of the bins, you

00:06:18.645 --> 00:06:21.081
can tell how much you could put
on them. This is what nefarious

00:06:21.081 --> 00:06:23.583
people do, there are people who
literally drive around the

00:06:23.583 --> 00:06:28.321
United States just buying pros,
and selling them, whatever.

00:06:28.321 --> 00:06:31.992
That's basically where this
industry comes, and with some of

00:06:31.992 --> 00:06:36.496
the firms, filter by the bins
and things, recently, which is

00:06:36.496 --> 00:06:38.665
-- has made it a lot more
dangerous. Say for example,

00:06:38.665 --> 00:06:42.402
somebody is trying to use my
card down in Texas, North Dakota

00:06:42.402 --> 00:06:45.572
bin, get a call on cell phone,
hey, did you try to do this?

00:06:45.572 --> 00:06:50.010
They'll block it. Scary people
are able to filter by bins and

00:06:50.010 --> 00:06:53.546
it's something actually able to
have more valid looking

00:06:53.546 --> 00:06:58.051
generated credit card data, so
-- how much does it cost? As you

00:06:58.051 --> 00:07:01.621
can see, some of these ones are
-- yeah, four and a half dollars

00:07:01.621 --> 00:07:05.425
up to -- I think the highest
one, I have a script that does

00:07:05.425 --> 00:07:09.062
analytics for the data, and
validity rates go down, affects

00:07:09.062 --> 00:07:14.768
price. Anywhere from four --
I've seen $3 up to 40, 150 for

00:07:14.768 --> 00:07:18.405
some of them, for the really big
ones. And yeah, it's basically

00:07:18.405 --> 00:07:21.808
goes into a little bit how it's
cost. How is it used to defraud?

00:07:21.808 --> 00:07:29.015
Anyone -- or -- Amazon, exactly.
They're very, very easily

00:07:29.015 --> 00:07:31.518
obtainable, and that's one of
the things, whenever I was

00:07:31.518 --> 00:07:34.054
telling people about, they'd ask
about some software or whatever.

00:07:34.054 --> 00:07:37.157
It's very, very simple. There
are tons of people that are

00:07:37.157 --> 00:07:39.592
going out and doing this stuff.
I'm not endorsing. I'm letting

00:07:39.592 --> 00:07:44.264
people know how scary the actual
megastrip data, the mag strip

00:07:44.264 --> 00:07:50.370
is. Track one and track two,
write them on the cards, five

00:07:50.370 --> 00:07:54.341
minutes later, either ATM or
inside a store actually doing

00:07:54.341 --> 00:07:57.977
fraudulent purposes, so -- or
they -- people order things

00:07:57.977 --> 00:08:00.880
online, tons of things, if
you're interested into that

00:08:00.880 --> 00:08:05.318
stuff, tons of -- very long
time, there's been lots of

00:08:05.318 --> 00:08:08.254
information about how people do
carding and stuff, if it's

00:08:08.254 --> 00:08:13.360
something of interest? How is it
used to defraud? Carding,

00:08:13.360 --> 00:08:16.629
ordering things. Tons of things
that people can see as valid

00:08:16.629 --> 00:08:19.799
online. So like -- actually
ordering things online, these --

00:08:19.799 --> 00:08:24.237
they do try to -- people
anonymous, duplicating cards and

00:08:24.237 --> 00:08:27.841
using them in stores. That's one
of the biggest. The card not

00:08:27.841 --> 00:08:31.978
present stuff is not as big any
more. ATM cash outruns, a bunch

00:08:31.978 --> 00:08:33.980
of homeless people, feed them
for the day, run around ATM

00:08:33.980 --> 00:08:38.084
machines. Kind of scary. I've
seen where some guy had

00:08:38.084 --> 00:08:44.090
600-gallon tank attached to
truck. It's crazy, some of the

00:08:47.927 --> 00:08:51.097
extents people go through.
Online services, internet

00:08:51.097 --> 00:08:55.435
services for 9.99. I don't know
which one more embarrassing,

00:08:55.435 --> 00:08:59.739
K-Mart to take a picture of it,
or that still exists, so, yeah,

00:08:59.739 --> 00:09:05.879
so digital movies, digital
sales. Some of the training

00:09:05.879 --> 00:09:09.883
courses that have been leaked
online lately, we got water

00:09:09.883 --> 00:09:12.118
marks on it. It doesn't matter
because it was purchased with

00:09:12.118 --> 00:09:14.454
fraudulent card. Do you know
what I mean? So that stuff is

00:09:14.454 --> 00:09:17.490
kind of scary and it's hard to
track that down and it defeats a

00:09:17.490 --> 00:09:22.195
lot of the DRM people are using.
Used cards, Western Union

00:09:22.195 --> 00:09:27.100
transfers, things like that,
it's crazy. If you've never

00:09:27.100 --> 00:09:29.102
looked at the dark side of the
internet, it's definitely

00:09:29.102 --> 00:09:33.573
interesting to take some looks
at it, and, yeah. And how are

00:09:33.573 --> 00:09:36.176
the they actually exfiltrated,
something I get a question all

00:09:36.176 --> 00:09:41.948
the time. For example, you can
get the version 2, I believe

00:09:41.948 --> 00:09:45.385
that one is Dexter and Dexter is
one of the many POS mall form

00:09:45.385 --> 00:09:51.391
goes through and steals the
credit card information.

00:09:55.862 --> 00:10:00.166
Difference, this one has a key
stroke. USB keyboards. A portion

00:10:00.166 --> 00:10:03.703
I'll go over antikey stroke
catching more than just credit

00:10:03.703 --> 00:10:06.940
card environments. And yeah,
basically four Bitcoins, people

00:10:06.940 --> 00:10:11.644
can go buy the software, that's
kind of ridiculous, because I

00:10:11.644 --> 00:10:14.981
guess that's pretty expensive
now. For about a thousand bucks,

00:10:14.981 --> 00:10:18.518
people after they actually steal
-- or hack a system, they can

00:10:18.518 --> 00:10:21.221
have the host and the server
portions running pretty quick

00:10:21.221 --> 00:10:23.823
and they'll be stealing data, so
that's actually how it gets

00:10:23.823 --> 00:10:27.494
loaded on, so -- so people,
yeah, people ask how it gets

00:10:27.494 --> 00:10:31.531
loaded on. It's obvious any way
a computer is breached in any of

00:10:31.531 --> 00:10:35.301
the classic ways as I would call
them, USB devices, people using

00:10:35.301 --> 00:10:39.205
spear fish campaigns, so my
compromised system, pull point

00:10:39.205 --> 00:10:46.646
of sale systems, a lot of them
running -- software, things like

00:10:46.646 --> 00:10:51.751
that. The -- basically -- it
sends poster pests, basically

00:10:51.751 --> 00:10:53.953
what are sent to server, so
that's how it's exfiltrating

00:10:53.953 --> 00:10:58.892
data and some stored on hand,
exfiltrate the files after they

00:10:58.892 --> 00:11:02.495
have like a gig's worth or 25
megabytes worth of data. Do

00:11:02.495 --> 00:11:07.834
store locally but majority send
them out encrypted HTML post

00:11:07.834 --> 00:11:11.104
requests. Not something like
people can network monitor. Does

00:11:11.104 --> 00:11:15.775
generate 600 times the traffic
if you're doing the poster class

00:11:15.775 --> 00:11:19.412
method. You can't see if they
are stolen credit card datas.

00:11:19.412 --> 00:11:24.050
Starts doing 25 megabytes of
data, doing about a half a meg a

00:11:24.050 --> 00:11:27.820
bit ago. You definitely have
something. It's very, very

00:11:27.820 --> 00:11:31.024
useful for intrusion detection
also and getting your intrusion

00:11:31.024 --> 00:11:34.694
detection to work better. It's
amazing the amount of data. I

00:11:34.694 --> 00:11:39.098
couldn't believe how actually
clean it runs. When it idles,

00:11:39.098 --> 00:11:43.403
it's under 1% of the CPU
utilization, for running and

00:11:43.403 --> 00:11:46.039
that's injecting a thousand
credit cards a second and that's

00:11:46.039 --> 00:11:49.309
into memory. Stability with it.
You can inject it into any 32 or

00:11:49.309 --> 00:11:53.046
64 bit process. So when it goes
around and steals and looks for

00:11:53.046 --> 00:11:56.683
credit card data, it's going to
come across a lot of cards, so

00:11:56.683 --> 00:12:00.920
-- and it's -- that will go here
and the two year old -- probably

00:12:00.920 --> 00:12:05.024
three year old now, but validity
rate of 10%. And that's just

00:12:05.024 --> 00:12:07.961
crazy to think that. That's what
I'm saying, a lot of this will

00:12:07.961 --> 00:12:11.998
go into the actual -- it's kind
of like .004 after you run some

00:12:11.998 --> 00:12:15.301
of these batches, so -- and
compiled into bins. That's the

00:12:15.301 --> 00:12:19.038
thing that really scares me and
actually has shot through the

00:12:19.038 --> 00:12:23.910
roof. So initial -- yeah,
terminal was breached loaded

00:12:23.910 --> 00:12:28.448
with malware. Bad person loads
under the point of sale server

00:12:28.448 --> 00:12:31.517
and basically sends it off to
the server, post request. Pull

00:12:31.517 --> 00:12:36.823
the data, FTP. I've seen
incremental backups. They're

00:12:36.823 --> 00:12:40.159
finding very, very tricky ways
to actually -- credit card data

00:12:40.159 --> 00:12:45.231
and other data. So basically
after it's stole on the POS,

00:12:45.231 --> 00:12:49.135
sent off to the server and I
just wanted to stress again,

00:12:49.135 --> 00:12:51.671
this demonstration is all
running on the same box, so

00:12:51.671 --> 00:12:56.442
basically sending to 127,
sending to home address, so --

00:12:56.442 --> 00:13:00.980
and it's basically catching it.
For the most part. So that's --

00:13:00.980 --> 00:13:03.850
it's very good for this
demonstration because internet

00:13:03.850 --> 00:13:07.754
connectivity is very shoddy.
I've had demos -- in the past,

00:13:07.754 --> 00:13:11.157
especially when it involves
virtual machines and unplugged

00:13:11.157 --> 00:13:14.727
laptops. Usually shots CPUs off,
so that's why I've gone with the

00:13:14.727 --> 00:13:19.699
video version of the demo. How
does it tell credit card data

00:13:19.699 --> 00:13:23.202
from other data? Just random
numbers in there, and usually a

00:13:23.202 --> 00:13:25.438
lot of them have custom
algorithm, some of them go off

00:13:25.438 --> 00:13:30.276
the basic algorithm, check
digital, mathematically able to

00:13:30.276 --> 00:13:33.780
detect what is a credit card
number and the first few numbers

00:13:33.780 --> 00:13:36.983
are actual -- first six are the
bank identification number, that

00:13:36.983 --> 00:13:40.453
will tell you if it's a Houston
bank or if it's in North Dakota,

00:13:40.453 --> 00:13:44.324
Bismarck, Minneapolis number, be
able to tell those, and that's a

00:13:44.324 --> 00:13:47.760
way to protect your data. If
you've had a breach four times

00:13:47.760 --> 00:13:51.230
in a year, go up to Alaska, get
yourself a bank account and it

00:13:51.230 --> 00:13:56.102
will never happen again. Or to
Bismarck, North Dakota, about

00:13:56.102 --> 00:14:02.975
600 --> 000 of us. Anybody from
North Dakota? Oh, awesome. Yep.

00:14:02.975 --> 00:14:09.015
There's two of us. And this is a
little bit blown up. The actual

00:14:09.015 --> 00:14:14.754
malware we tested against,
Dexter, backoff. There's a

00:14:14.754 --> 00:14:17.824
couple other ones that are
definitely Russian variance. B

00:14:17.824 --> 00:14:24.597
skimmer, you tested -- all of
them, and actual -- only ones we

00:14:24.597 --> 00:14:28.701
didn't were the -- some of the
versions of Dexter, they had

00:14:28.701 --> 00:14:32.438
some key stroke catching a
little harder to catch but I

00:14:32.438 --> 00:14:35.942
have a tendency that actually
does injections, there's a black

00:14:35.942 --> 00:14:39.479
hole on the actual software
where you can inject key strokes

00:14:39.479 --> 00:14:44.150
into, so it's pretty decent for
blocking, just in general

00:14:44.150 --> 00:14:51.591
anything like that. Anybody do
-- yeah, you can definitely --

00:14:51.591 --> 00:14:53.826
this is -- that is another
reason. If you're doing reverse

00:14:53.826 --> 00:14:56.662
engineering of point of sale
malware -- it's very good way to

00:14:56.662 --> 00:15:03.503
get that malware alive, feed it.
And I've seen -- actual ones

00:15:03.503 --> 00:15:08.241
where they dump, like Dexter, I
actually locked up a computer. I

00:15:08.241 --> 00:15:11.344
think it was making 500
megabytes a day of data, and we

00:15:11.344 --> 00:15:13.346
were just running it to make
sure it wouldn't crash or

00:15:13.346 --> 00:15:15.782
anything. It's amazing how big
some of those files get, how

00:15:15.782 --> 00:15:21.988
quick they get. So -- so the
approach, like stop breaches,

00:15:21.988 --> 00:15:25.558
open source software I made. Or
myself and Tim made, and we --

00:15:25.558 --> 00:15:28.394
yeah, we just wanted to release
it and see if people could use

00:15:28.394 --> 00:15:31.597
it and implement it into their
own APIs for some of their other

00:15:31.597 --> 00:15:34.100
software, so -- and that's what
I'm saying, no reason at all --

00:15:34.100 --> 00:15:38.538
I got an MIT license, anybody
can improve on it, put it into

00:15:38.538 --> 00:15:42.041
pretty much anything. That's
something nice to be able -- I

00:15:42.041 --> 00:15:46.012
don't see any reason why people
-- chip and pin but I'm actually

00:15:46.012 --> 00:15:50.716
working on methods and proof of
concepts to make -- chip and pin

00:15:50.716 --> 00:15:53.519
properly, because a lot of
people that aren't putting chip

00:15:53.519 --> 00:15:57.790
and pin to its fullest extent.
And what currently exists, there

00:15:57.790 --> 00:16:01.360
are some skimming. Classical
firewall that can manage

00:16:01.360 --> 00:16:05.765
packets, scan out, put snort
rules, lots actual tools out

00:16:05.765 --> 00:16:11.637
there, firewalls, ID Ss, look
for specific things, look for

00:16:11.637 --> 00:16:14.140
signatures but that's not enough
for some of the stuff.

00:16:14.140 --> 00:16:16.676
Especially when you get into
some of the Honeypotting

00:16:16.676 --> 00:16:19.812
features, it's nice to know when
you're breached. There's some

00:16:19.812 --> 00:16:24.483
high -- of bins that you can
actually paste in, almost

00:16:24.483 --> 00:16:32.058
guaranteed, they look like
$15 --> 000 AMAX or something, get

00:16:32.058 --> 00:16:34.994
grabbed first, seed those into
batches and those will get sold

00:16:34.994 --> 00:16:38.030
off first and you'll know a lot
better when the breach happened

00:16:38.030 --> 00:16:41.234
and there are other ways, where
people can buy for the credit

00:16:41.234 --> 00:16:44.003
cards and run them through
processers and things like that

00:16:44.003 --> 00:16:46.806
to actually tell where they're
breached or who is breached and

00:16:46.806 --> 00:16:50.843
things like that. So -- which as
of right now, I haven't run into

00:16:50.843 --> 00:16:53.512
any tools, and if you do know of
any tools that are made

00:16:53.512 --> 00:16:56.415
specifically fortunately point
of sale skimming or stopping

00:16:56.415 --> 00:16:59.318
point of sale skimming, fill me
in, I love hearing about them.

00:17:01.320 --> 00:17:05.491
Concept make batches useable?
Valid credit card data being

00:17:05.491 --> 00:17:09.962
swiped into there. Where it's
being stolen is actually in

00:17:09.962 --> 00:17:13.699
memory, so it's -- for the most
part simple concept and I'm

00:17:13.699 --> 00:17:16.202
surprised a lot of the bigger
companies have not come across

00:17:16.202 --> 00:17:20.840
it. 500 credit card, for every
valid credit card number in

00:17:20.840 --> 00:17:25.177
memory. When people steal them,
exfiltrating tons of fake data.

00:17:25.177 --> 00:17:30.616
Tried scrubbing. 500, credit
processor, after 50 cards were

00:17:30.616 --> 00:17:33.452
run, how to do -- had to do
manual authorization. There's no

00:17:33.452 --> 00:17:36.022
way a person would be able to
scrub these batches. Generated

00:17:36.022 --> 00:17:41.961
off 25 --> 000 most common names in
United States. If you live in a

00:17:41.961 --> 00:17:45.164
more dominant Asian area,
something like that, import,

00:17:45.164 --> 00:17:49.068
better names list, things like
that. If you go off the bins

00:17:49.068 --> 00:17:53.439
list, you can generate traffic.
You can leave open, credit cards

00:17:53.439 --> 00:17:56.609
from everywhere, and just
statistically speaking, you're

00:17:56.609 --> 00:18:00.079
going to generate tons -- or it
won't matter, and when people

00:18:00.079 --> 00:18:02.782
try to scrub these batches and
try to sell them online, they're

00:18:02.782 --> 00:18:05.084
going to lose their reputation
and that's one of the biggest

00:18:05.084 --> 00:18:08.587
things, validity rate is 98%.
People will gladly buy those all

00:18:08.587 --> 00:18:12.758
day long. .004. It's not going
to happen. That's kind of what

00:18:12.758 --> 00:18:16.762
the -- it goes after. Stopping
people from doing the breaches,

00:18:16.762 --> 00:18:21.167
because there won't be any money
to be had on it. Yeah, hardly

00:18:21.167 --> 00:18:26.906
generated. Algorithm, and we
have bins list and not fully

00:18:26.906 --> 00:18:30.209
implemented. The bins list is
sold. Planning on making an open

00:18:30.209 --> 00:18:32.445
source bin list but I thought it
would be used for nefarious

00:18:32.445 --> 00:18:38.250
things, than -- I had E I would
have had to leave the bins list.

00:18:38.250 --> 00:18:42.355
Not separate things compiled.
Bins list, $25 --> 000 in some

00:18:42.355 --> 00:18:44.357
instances, so it's not
affordable for, you know, a

00:18:44.357 --> 00:18:49.795
project such as this one, so --
that's something, first six

00:18:49.795 --> 00:18:51.998
numbers, first one tells Visa,
MasterCard, American Express,

00:18:51.998 --> 00:18:58.004
and the rest of them actual bank
and financial institutions. How

00:19:01.807 --> 00:19:04.744
-- basically generates from
scratch and attaches a name to

00:19:04.744 --> 00:19:07.580
them, track one, track two data.
They look like valid credit card

00:19:07.580 --> 00:19:12.885
numbers. Value customer or gift
card in there once in a while.

00:19:12.885 --> 00:19:16.856
It's actually very, very good
system of way of blocking it.

00:19:16.856 --> 00:19:19.825
Like I was saying, pulled list
off Social Security web page for

00:19:19.825 --> 00:19:22.895
United States first and last
names and basically generated

00:19:22.895 --> 00:19:26.799
from scratch, and pretty good
list of names to input and like

00:19:26.799 --> 00:19:29.068
I was saying, you could modify
names and I was watching, my

00:19:29.068 --> 00:19:34.273
dad's name came across. It's a
good list. Some names, that is

00:19:34.273 --> 00:19:40.112
an awesome name. Vampire names,
things like that. And this

00:19:40.112 --> 00:19:42.148
basically explains the Honeypot
services much these credit

00:19:42.148 --> 00:19:46.218
numbers do not occur naturally.
Something when a credit

00:19:46.218 --> 00:19:49.388
processor comes across them,
they were not ever issued.

00:19:49.388 --> 00:19:51.957
There's not actually a physical
card. The card will come through

00:19:51.957 --> 00:19:56.762
the credit processor and they'll
be able to tell, that one -- so

00:19:56.762 --> 00:19:58.931
and so company. I will notify
them of the breach. Some of

00:19:58.931 --> 00:20:02.635
those bins, they'll look like
they're unlimited cards or

00:20:02.635 --> 00:20:05.137
corporate cards, not checked
that often. Things like that.

00:20:05.137 --> 00:20:10.576
Lucrative 154 -- or have
information with it. That's

00:20:10.576 --> 00:20:13.412
something, when it's randomly
generated, they'll also be

00:20:13.412 --> 00:20:16.916
padded around that. That's why I
made those actual Honeypot

00:20:16.916 --> 00:20:21.120
cards, they look a lot better.
And that's the -- when you input

00:20:21.120 --> 00:20:23.622
them, there's a way to reverse
the batches, depending on how

00:20:23.622 --> 00:20:27.727
you input yours. Ways to
actually fully remove once you

00:20:27.727 --> 00:20:32.031
seed your Honeypot card, so it's
a little bit of a lengthy

00:20:32.031 --> 00:20:34.700
process and it's not fully
developed but it is something

00:20:34.700 --> 00:20:38.337
that it is possible. It's very
easy to reverse is the only

00:20:38.337 --> 00:20:40.673
problem. For the kind of people
that are actually stealing

00:20:40.673 --> 00:20:43.509
credit card information, I think
it would be a coverage, almost

00:20:43.509 --> 00:20:48.614
70% of the situation. Antikey
stroke. Plugging in, inject,

00:20:48.614 --> 00:20:55.554
what being allows like valid
credit card numbers. Puts some

00:20:55.554 --> 00:21:00.593
in. I didn't have enough
processing power to do full

00:21:00.593 --> 00:21:04.130
SkimBad-type situation but it
will fill up whatever -- the

00:21:04.130 --> 00:21:08.601
ones -- the ones actually
capturing data, locally, are

00:21:08.601 --> 00:21:10.603
also the ones vice president
functionality -- have

00:21:10.603 --> 00:21:16.075
functionality with key stroke.
Catch from scratch, key strokes.

00:21:16.075 --> 00:21:22.081
IDSs will detect a log that's
going -- megabytes, looks like

00:21:24.116 --> 00:21:29.922
OM input. How will malware
evolve and how can we stay on

00:21:29.922 --> 00:21:33.759
top of this? Obviously people
are going to try to attack, you

00:21:33.759 --> 00:21:37.730
know, SkimBad. Get out in wild,
get used. Things like that. We

00:21:37.730 --> 00:21:41.901
did build watchdog, simple ones,
start out with. Oh, let's only

00:21:41.901 --> 00:21:47.339
read the memory of point of sale
system. You can just directly

00:21:47.339 --> 00:21:51.043
inject into the POS, point of
sale software and it doesn't

00:21:51.043 --> 00:21:54.079
affect how it goes to the credit
processor either. Another big

00:21:54.079 --> 00:21:57.316
question I always get. So, yeah,
how it will evolve. They're

00:21:57.316 --> 00:22:02.388
going to get smarter about it.
Have to take step forward. I

00:22:02.388 --> 00:22:05.624
know most of the malware that
I've been coming across, always

00:22:05.624 --> 00:22:09.195
bust some 17 year old eastern
European guy, you would think

00:22:09.195 --> 00:22:12.898
they would have had somebody
more behind, making it sound

00:22:12.898 --> 00:22:16.902
like it's a dangerous persistent
threat. Simple to stop it. A lot

00:22:16.902 --> 00:22:20.172
of very good development tools
and things like that, but it's

00:22:20.172 --> 00:22:26.111
something if we stand one step
ahead, and another thing -- able

00:22:26.111 --> 00:22:29.815
-- because that's why a lot of
the stuff, when it installs,

00:22:29.815 --> 00:22:34.320
randomizes it. That's pretty
much the -- I'm sure a lot of

00:22:34.320 --> 00:22:36.889
people have things coming to
mind also of how people would,

00:22:36.889 --> 00:22:39.959
you know, try to stop this type
of stuff, and I love to hear

00:22:39.959 --> 00:22:41.961
that kind of stuff because that
makes the product that much

00:22:41.961 --> 00:22:48.500
better, or you can -- yourself.
Detects bins from certain areas.

00:22:48.500 --> 00:22:51.904
Say for example, North Dakota,
there's a bunch of Florida bins,

00:22:51.904 --> 00:22:54.773
try to scrub the batches and
only do bins that are North

00:22:54.773 --> 00:22:58.110
Dakotaen bins, wouldn't work
that way. Sheer amount of them.

00:22:58.110 --> 00:23:02.381
Not to mention, when I did the
credit processing, after ten

00:23:02.381 --> 00:23:05.417
failed attempts it does to make
you manually authorize them and

00:23:05.417 --> 00:23:10.756
that would be a lot of work.
Actually skim through those, so

00:23:10.756 --> 00:23:13.492
-- watchdog force, so I protect
it from malware basically, when

00:23:13.492 --> 00:23:16.495
it stops the process, unless had
something specifically made to

00:23:16.495 --> 00:23:19.898
attack SkimBad it would be
pretty hard to stop it. In

00:23:19.898 --> 00:23:24.003
itself, it's not necessarily a
-- kit, but does have some

00:23:24.003 --> 00:23:27.439
protection, it does restart
itself when it stops. It's very,

00:23:27.439 --> 00:23:30.309
very simple. That's the last
thing I want is to have

00:23:30.309 --> 00:23:32.311
signature on actual
antisoftware. Skim around on it,

00:23:32.311 --> 00:23:37.383
and it's something -- that's
something people can implement

00:23:37.383 --> 00:23:43.155
and if it's implemented, you
know, another product, it would

00:23:43.155 --> 00:23:46.525
be very simple. It's about 80
companies, very, very hard to

00:23:46.525 --> 00:23:52.698
kill watchdogs. Yeah, basically,
how does the batch look real?

00:23:52.698 --> 00:23:56.335
All valid -- for the most part,
they're valid bins, tons not

00:23:56.335 --> 00:23:58.771
invalid bins, like I was saying,
I didn't want to load the bin

00:23:58.771 --> 00:24:03.175
and I don't want people to have
to pay even a dime for it. So

00:24:03.175 --> 00:24:06.478
that's something we're literally
as you can see there, it fills

00:24:06.478 --> 00:24:10.249
just with random data. Not
random data, but they are credit

00:24:10.249 --> 00:24:14.520
card passing data, so, yeah, so
it's just the sheer mass and

00:24:14.520 --> 00:24:19.158
volume of it what makes it
inherently protected. And so

00:24:19.158 --> 00:24:21.560
basically, yeah, when they're
sent off, grabbing the fake ones

00:24:21.560 --> 00:24:25.297
right along with the real ones,
so there are -- I tried ways to

00:24:25.297 --> 00:24:27.566
cross check it and if anybody
can come up with ways, love

00:24:27.566 --> 00:24:31.737
hearing them, love to improve
it, so -- how to reverse the

00:24:31.737 --> 00:24:36.208
batches, it was blocked -- I
tried two interauthentication

00:24:36.208 --> 00:24:38.210
companies -- different
authentication companies.

00:24:38.210 --> 00:24:44.383
Random, generate credit cards,
things like that, use it that

00:24:44.383 --> 00:24:48.987
way. That is a mechanism that is
working, scrubbing the batches.

00:24:48.987 --> 00:24:51.857
Some of the other ways, people
keep signing up for stuff using

00:24:51.857 --> 00:24:53.959
credit card, stolen credit card
information to get

00:24:53.959 --> 00:24:58.063
authentication stuff. It would
make it ridiculously hard.

00:24:58.063 --> 00:25:01.567
Several hundreds of hours,
thousands of hours, it would

00:25:01.567 --> 00:25:06.839
literally make it not worth it.
Basically, chip and pin going to

00:25:06.839 --> 00:25:11.477
stop it? For the most part if
it's set up correctly, there are

00:25:11.477 --> 00:25:13.979
some replay attacks, I'm sure
people have seen out in the

00:25:13.979 --> 00:25:20.786
wild. England, replay attack in
a store. I know there are some

00:25:20.786 --> 00:25:24.223
with the chip and signature,
that's the exact same as it's

00:25:24.223 --> 00:25:27.393
pretty much been in the past.
That's all about getting people

00:25:27.393 --> 00:25:30.829
to properly implement them, and
getting it to roll forward, so

00:25:33.399 --> 00:25:36.035
-- so I -- I honestly don't
think it will stop it until

00:25:36.035 --> 00:25:41.407
people properly implement it.
And it is a software that's open

00:25:41.407 --> 00:25:44.376
source. It's free. People can
help make it better. Have source

00:25:44.376 --> 00:25:47.379
code out there. If it's
something you want to implement

00:25:47.379 --> 00:25:51.617
into something else, or work for
something that I would like to

00:25:51.617 --> 00:25:53.619
get a community behind it and
help people build it up, yeah,

00:25:53.619 --> 00:25:57.723
I'm going to open it up to
questions here in a little bit.

00:25:57.723 --> 00:26:00.058
I'm going to get the demo
running in the background.

00:26:00.058 --> 00:26:06.065
Transcode 480. It's pixilated.
It's amazing, I did slow the

00:26:08.200 --> 00:26:12.271
demo down. When it goes through
-- contact information. Do you

00:26:12.271 --> 00:26:18.277
have any questions, Twitter.
Appreciate that. If you want to

00:26:21.213 --> 00:26:26.218
build device, really fun, and I
recommend to people who pentest

00:26:26.218 --> 00:26:32.224
for a living. One step up from
USBs. And open up to questions.

00:26:34.560 --> 00:26:40.566
They have the mic too somewhere.
Oh, sorry about that, yes. >>

00:26:45.938 --> 00:26:51.944
That is my real name. That's not
my handle. That means -- that is

00:27:04.456 --> 00:27:10.462
German for hacker. >> [
Inaudible ] >> Okay. >> To

00:27:22.641 --> 00:27:28.647
modify the track -- >> Yeah,
I've seen where people can

00:27:36.955 --> 00:27:39.324
actually make them look like
manual authorizations when they

00:27:39.324 --> 00:27:41.793
aren't. And that's a -- I know
there's some people that ran

00:27:41.793 --> 00:27:44.963
photo stuff through in Brazil.
She was asking if you can modify

00:27:44.963 --> 00:27:48.166
the track data to make it look
like chip and pin. Is that

00:27:48.166 --> 00:27:50.502
correct what you're asking?
Yeah, there are a couple of

00:27:50.502 --> 00:27:54.039
attacks it is like that. If it
is improperly installed by

00:27:54.039 --> 00:27:58.710
actual vendor, so actually point
of sale -- or authentication is

00:27:58.710 --> 00:28:01.513
improperly set up, that is
something that can be done. So

00:28:01.513 --> 00:28:04.650
-- thank you. Does that answer
your question? Yeah, there are a

00:28:04.650 --> 00:28:06.652
couple of attacks out there.
They haven't released the

00:28:06.652 --> 00:28:10.889
details on them. Anybody else
have any other questions? Yeah.

00:28:18.330 --> 00:28:24.336
>> [ Inaudible ] >> Yes. Yes.
Yeah. >> [ Inaudible ] >> Yeah.

00:29:21.293 --> 00:29:27.299
Okay. Yes. That's what I was
talking about, that's the

00:29:30.268 --> 00:29:34.339
feedback I want, like the -- not
only will people, myself and

00:29:34.339 --> 00:29:37.643
other people in the community,
things over, to other operating

00:29:37.643 --> 00:29:40.912
systems. This one I made it work
for Windows. It should work with

00:29:40.912 --> 00:29:43.849
a lot of the older libraries, so
it is something that's not

00:29:43.849 --> 00:29:48.487
resource intensive. Utilizes
less than 1% of a CPU, 4

00:29:48.487 --> 00:29:52.557
gigabyte VM with one core.
Negligible amount. That was

00:29:52.557 --> 00:29:54.960
injecting -- does that answer
your question for that one?

00:29:57.963 --> 00:30:02.267
Exactly. I -- that's what I'm
saying, some of the things --

00:30:02.267 --> 00:30:07.139
you can be -- tune them to be
more efficient and at ten, even

00:30:07.139 --> 00:30:10.142
ten credit cards, I think it
would be a very, very simple,

00:30:10.142 --> 00:30:13.512
resources and some of the log
ins, that's the next generation.

00:30:13.512 --> 00:30:18.483
That's what I want feedback on.
Literally proof of concept.

00:30:18.483 --> 00:30:21.687
Covers most of those malwares,
literally the people who are

00:30:21.687 --> 00:30:24.423
trying to -- just literally
slapping them on -- XPOS, yeah,

00:30:24.423 --> 00:30:30.962
they're going to be able to look
at the source code, they're

00:30:30.962 --> 00:30:33.098
going to be able to look at
certain other things and

00:30:33.098 --> 00:30:35.701
actually tune their malware to
it. I'm not saying that.

00:30:35.701 --> 00:30:40.038
Literally just a cover. Running
on some of the POSs and larger

00:30:40.038 --> 00:30:42.441
breaches, it definitely would
have helped with it. Validity

00:30:42.441 --> 00:30:47.446
rates, class -- lawsuits cut
down, wouldn't have had to

00:30:47.446 --> 00:30:53.585
cancel people's cards when
people are in Belize on

00:30:53.585 --> 00:31:01.026
vacation. End up suing for. Does
that answer your question? Okay.

00:31:01.026 --> 00:31:08.533
Awesome. >> [ Inaudible ] >>
Anything more than that, you're

00:31:08.533 --> 00:31:11.403
technically going to start
covering in memory, especially

00:31:11.403 --> 00:31:15.507
on smaller POS systems, going to
cover them in memory before

00:31:15.507 --> 00:31:18.310
they're actually pulled by the
scraping malware. You can do up

00:31:18.310 --> 00:31:22.614
to 60 --> 000. That's the highest I
went and it would just be

00:31:22.614 --> 00:31:25.517
counterintuitive. It wouldn't
have any purpose to it. So

00:31:25.517 --> 00:31:29.087
that's why I stayed with 500
credit card numbers, because it

00:31:29.087 --> 00:31:31.923
will start copying over itself.
So -- does that answer your

00:31:31.923 --> 00:31:38.463
question? Excuse me? Oh, yeah,
you can do it, you can pretty

00:31:38.463 --> 00:31:42.067
much fine tune it. Like I said,
anybody in here program C++? Be

00:31:42.067 --> 00:31:48.073
able to easily modify -- and
stuff getting worked out. Going

00:31:51.076 --> 00:31:57.082
to release it here soon. Yes. >>
[ Inaudible ] >> Offer some of

00:32:02.154 --> 00:32:08.160
the post requests and stuff like
that? Yeah, that's -- a lot of

00:32:13.298 --> 00:32:15.300
the IDS do block. That's why the
malware dump them locally or

00:32:15.300 --> 00:32:19.604
other ways of exfiltrating.
Going over a lot of the main

00:32:19.604 --> 00:32:25.610
ones. Yeah. Yep. Tell that to
the last fortune 50 company got

00:32:29.614 --> 00:32:31.616
breached. There's no way, but,
yeah, it happens every day and a

00:32:31.616 --> 00:32:37.622
lot of people -- they do. One of
the original IDSs, too many

00:32:40.091 --> 00:32:42.727
e-mails, too many red flags on
some of the stuff, how do you

00:32:42.727 --> 00:32:45.730
tell it's real at the end of the
day? Does that answer your

00:32:45.730 --> 00:32:48.633
question? It's kind of an --
kind of been ignored by a lot of

00:32:48.633 --> 00:32:52.170
the industry, stuff like that.
Some of them do have V lands,

00:32:52.170 --> 00:32:56.274
other systems in place that do
work. Some have to actually --

00:32:56.274 --> 00:32:59.911
other steps you have to take to
actually breach their point of

00:32:59.911 --> 00:33:02.881
sale systems. Some of the point
of sale implementations I've

00:33:02.881 --> 00:33:06.484
seen in last two years are
ridiculous and doing a very good

00:33:06.484 --> 00:33:10.355
job at it. Once again, the mom
and pop shops can't afford it,

00:33:10.355 --> 00:33:15.093
or some of the smaller point of
sale ones. Any other questions?

00:33:15.093 --> 00:33:21.099
Yes. >> [ Inaudible ] >> One of
the main systems I did go into

00:33:29.541 --> 00:33:33.311
embedded systems, so I've tried
it on Windows based point of

00:33:33.311 --> 00:33:37.115
sale systems, Windows 7, Windows
XP, some of the older ones, some

00:33:37.115 --> 00:33:40.318
of the embedded ones and what
was the question again? How it

00:33:40.318 --> 00:33:46.324
actually -- >> [ Inaudible ] >>
Doesn't interfere with all the

00:33:48.460 --> 00:33:51.129
ones -- I can't go into detail.
I can't program the point of

00:33:51.129 --> 00:33:55.066
sale systems, but just injects
it into memory, so it's after

00:33:55.066 --> 00:33:58.069
the fact of where it would have
gotten dumped. That's the point

00:33:58.069 --> 00:34:02.374
it's taken, before -- some of
the end, end encryption stuff.

00:34:02.374 --> 00:34:05.076
That's where it would lose it
at. So it's -- yeah. I hope --

00:34:05.076 --> 00:34:08.547
did that answer your question,
or -- okay. Yeah, not a problem

00:34:08.547 --> 00:34:14.552
at all. What was your question?
>> [ Inaudible ] >> Every single

00:34:18.523 --> 00:34:22.193
one of them on that list, which
was the big breaches, they have

00:34:22.193 --> 00:34:26.097
-- I've literally tested, and --
so, yeah, it's something that a

00:34:26.097 --> 00:34:30.268
lot of those, they do literally
just go through memory and even

00:34:30.268 --> 00:34:33.705
-- you select the process ID you
put it into, so -- like you can

00:34:33.705 --> 00:34:36.207
actually put the process ID for
your actual point of sale

00:34:36.207 --> 00:34:38.777
system, so that's what I'm
saying, can inject it directly

00:34:38.777 --> 00:34:42.747
into the memory of point of sale
systems, hard embedded stuff.

00:34:42.747 --> 00:34:48.253
Malware looks for. The point of
sales, ever reverse engineer

00:34:48.253 --> 00:34:52.457
point of sales malware, very,
very, very, very simple in most

00:34:52.457 --> 00:34:57.262
cases, and very, very not
resource intensive. So -- does

00:34:57.262 --> 00:35:00.332
that answer your question? And I
would love to talk to you guys

00:35:00.332 --> 00:35:02.500
afterwards. I love constructive
criticism. Yes. >> [ Inaudible ]

00:35:02.500 --> 00:35:08.506
>> None of the near field stuff,
I haven't tested any of that. I

00:35:13.111 --> 00:35:19.684
don't have the money to actually
buy some of that stuff. Some of

00:35:19.684 --> 00:35:23.655
those systems to do a proper --
back end server stuff, and you

00:35:23.655 --> 00:35:26.124
need time server. A lot of setup
for it. Something I didn't take

00:35:26.124 --> 00:35:29.861
the time to learn and something
I have not had the privilege of

00:35:29.861 --> 00:35:32.897
testing, environment like that.
But I see no reason at all if

00:35:32.897 --> 00:35:37.068
it's being ripped to credit card
data, that would pass one of the

00:35:37.068 --> 00:35:39.638
algorithms or the search
algorithms for the malware. No

00:35:39.638 --> 00:35:42.340
reason at all you couldn't
inject that data with it. So --

00:35:42.340 --> 00:35:49.414
does that answer your question?
Okay. Yes. Yes. >> [ Inaudible ]

00:35:49.414 --> 00:35:55.420
>> Yes. Yeah. And that's
something -- that's why I talked

00:36:05.230 --> 00:36:11.236
about the evolution. I know this
is very simple, but the malware

00:36:16.408 --> 00:36:18.877
skimmers out there are very
simple right now. That's why

00:36:18.877 --> 00:36:21.446
that next step is injecting that
data. Some -- tons of other

00:36:21.446 --> 00:36:25.750
methods, literally to cover the
last five years. People are

00:36:25.750 --> 00:36:32.824
still using some of the first
generation Dexter, the Jack POS

00:36:32.824 --> 00:36:37.328
I've actually seen. Ridiculous
able to creep through memory and

00:36:37.328 --> 00:36:42.734
steal credit card data. Blunt
force of it and get concept out

00:36:42.734 --> 00:36:44.969
of there. Open source. Not
trying to make money. Not

00:36:44.969 --> 00:36:47.839
pitching software. Something I
want the vendor, to implement

00:36:47.839 --> 00:36:53.845
that. Do I have time for one
more question? >> [ Inaudible ]

00:37:01.719 --> 00:37:09.461
>> Yes. Just the nature of the
point of sale systems, and just

00:37:09.461 --> 00:37:11.930
computers in general, there's a
lot of things that stay resonant

00:37:11.930 --> 00:37:17.268
in memory until the actual power
gets powered off. A couple of --

00:37:17.268 --> 00:37:19.938
point of sale systems they dump
memory at certain times. I did

00:37:19.938 --> 00:37:25.376
come across some of that, but
nothing to the level. Yeah. And

00:37:25.376 --> 00:37:28.213
that's -- you guys come up with
exact same reasons. Why don't

00:37:28.213 --> 00:37:30.482
people do this or that? That's
kind of why I did that talk this

00:37:30.482 --> 00:37:36.488
year, proof of concept out
there. Any other questions? I

00:37:39.090 --> 00:37:45.096
really do appreciate your time,
and I would love -- [ Applause ]

