00:00:00.133 --> 00:00:04.204
>> Welcome everybody. If -- here
to talk to us about linux

00:00:04.204 --> 00:00:10.210
containers. >> [Applause] --
Linux containers. >> I've been

00:00:20.053 --> 00:00:24.424
doing security awhile. If you
don't know who NCC group is, we

00:00:24.424 --> 00:00:29.563
were brought by entity group
from UK but same people same

00:00:29.563 --> 00:00:35.636
place. Given some talks before
on some different things. So

00:00:35.636 --> 00:00:39.673
this is myself first DEF CON
talk my 12th DEF CON10 second

00:00:39.673 --> 00:00:45.679
motivational slide to not wait
as long as I did and not be a

00:00:54.021 --> 00:00:56.023
slack consider if you got an
idea we got lots of inspiration

00:00:56.023 --> 00:00:58.558
until talks keep that going and
do research urge submit to urge

00:00:58.558 --> 00:01:03.163
-- and give talks don't wait as
long as I did. So, I want to

00:01:03.163 --> 00:01:06.533
start with a story. So Bob
here's Bob here, he's got some

00:01:06.533 --> 00:01:08.535
web app or he's got something on
the internet it's on Linux

00:01:08.535 --> 00:01:10.537
somehow there's a bug there's
some kind of -- [indiscernible]

00:01:10.537 --> 00:01:12.539
something like that. And he
wants to add security but he's

00:01:12.539 --> 00:01:14.541
not really sure. So somebody
says, well you should do CH

00:01:14.541 --> 00:01:16.543
route that's legitimate. You
know open SSH uses it it must be

00:01:16.543 --> 00:01:18.545
good, right. As you know it's
broke Ken if you have -- and

00:01:18.545 --> 00:01:20.547
then you can go up to the route
and yeah, so that's well-known.

00:01:20.547 --> 00:01:26.553
Somebody else oh you should use
-- NSA made it. Must be secure.

00:01:58.752 --> 00:02:01.855
If you no anything about SELinux
designed for multilevel security

00:02:01.855 --> 00:02:05.359
really designed for government
things when you've got different

00:02:05.359 --> 00:02:11.365
things to class tie. It's not
support on -- but other than

00:02:14.668 --> 00:02:19.639
that its you know not so great.
Some of those reasons complexity

00:02:19.639 --> 00:02:21.642
really complicated. Created
[indiscernible] most of the

00:02:21.642 --> 00:02:27.681
other modules have where you
know he doesn't really believe

00:02:27.681 --> 00:02:33.687
in any of them. If you walk into
a box that has S -- are high.

00:02:37.724 --> 00:02:40.894
And you know at the end of the
day the colonial got a colonial

00:02:40.894 --> 00:02:48.168
if there's vulnerability -- he
loves to just and then dig at

00:02:48.168 --> 00:02:54.174
them as he does. So somebody
else comes ago to Bob and says

00:02:56.410 --> 00:03:02.149
you should do jar jar and yeah,
it really is in a lot of ways

00:03:02.149 --> 00:03:05.318
but notes root really solving
some the problem. If he has word

00:03:05.318 --> 00:03:12.793
pres, command injection -- going
to do nothing you are doing a

00:03:12.793 --> 00:03:16.930
lot of other things unless you
do all that -- turn everything

00:03:16.930 --> 00:03:20.834
to 11 and everything, not going
to solve that. Somebody else

00:03:20.834 --> 00:03:28.208
says just use VM that's got to
be very secure. They are not

00:03:28.208 --> 00:03:35.015
perfect you've got a lot of
other problems. So second story

00:03:35.015 --> 00:03:40.554
is Glen. He knows a lot about
security. He's -- and so he

00:03:40.554 --> 00:03:47.260
talks to potential source he's
really really paranoid he wants

00:03:47.260 --> 00:03:53.266
tolan Linux he doesn't trust OSC
Malware on windows all the cool

00:03:55.802 --> 00:03:58.972
kids run Linux its got to be
super secure right. Not really

00:03:58.972 --> 00:04:00.907
he's one exploit away from
having his calculate popped --

00:04:00.907 --> 00:04:02.909
last time I updated my
[indiscernible] that didn't go

00:04:02.909 --> 00:04:06.146
so well. Third story is
Margaret, Margaret works at IOT

00:04:06.146 --> 00:04:12.152
company. She is tired of getting
these everything running as

00:04:14.888 --> 00:04:20.894
route and everything getting
popped and not any kind of

00:04:24.831 --> 00:04:30.770
execute on the little platform.
Then I actually inserted this

00:04:30.770 --> 00:04:33.507
slide after I saw Charlie and --
Charlie maybe Margaret works own

00:04:33.507 --> 00:04:39.513
-- team and doesn't want to run,
no ability to control things.

00:04:45.385 --> 00:04:49.856
Really a lot of that is done
because money obviously takes

00:04:49.856 --> 00:04:54.828
time to add security. There's
no, you know, there's no way of

00:04:54.828 --> 00:04:59.432
virtualize something on -- this
I mean bedded thing running

00:04:59.432 --> 00:05:02.636
Linux there's got to be
something we can do. And really

00:05:02.636 --> 00:05:08.141
this story -- have in common the
worse attack service a -- sand

00:05:08.141 --> 00:05:14.147
box and containers it would be
great to see them being the norm

00:05:18.084 --> 00:05:23.123
not the exception if you look at
chrome and a adobe, any kind of

00:05:23.123 --> 00:05:29.563
modern sand box environment that
should be everywhere there's a

00:05:29.563 --> 00:05:34.000
battle we are fighting and you
are going to lose, right. And

00:05:34.000 --> 00:05:37.771
so, until we can win, written in
some crazy -- or whatever it may

00:05:37.771 --> 00:05:44.477
be we have to cut our losses you
can do that with sand box and

00:05:44.477 --> 00:05:49.115
you can do that with other
isolation. For Linux open source

00:05:49.115 --> 00:05:53.587
loves to reinvent the wheel. How
I would like to set this up

00:05:53.587 --> 00:05:58.225
being in VEGAS one of my
favorite movies there's this

00:05:58.225 --> 00:06:03.263
movie [indiscernible] where they
come out of this house tearing

00:06:03.263 --> 00:06:09.169
at six guys with guns drawn and
you know, it's a fire fight to

00:06:09.169 --> 00:06:16.376
paraphrase. And there's kind of
-- investigate who says what if

00:06:16.376 --> 00:06:20.814
it wasn't six guys with six guns
but one guy with six guns he's

00:06:20.814 --> 00:06:24.818
William DEFOY -- one guy with
six guns the person what if it

00:06:24.818 --> 00:06:28.288
wasn't a whole bunch of colonial
but one colonial -- that's

00:06:28.288 --> 00:06:32.225
really the core idea of
containers, right. There's also

00:06:32.225 --> 00:06:38.565
not a new idea this has been
done a long time before

00:06:38.565 --> 00:06:44.571
everything came long. So before
we keep going I just want to say

00:06:53.179 --> 00:06:57.350
that this is -- if you are
really scared about security or

00:06:57.350 --> 00:07:03.290
paranoid and -- you do not -- on
any kind of -- dash you need

00:07:09.896 --> 00:07:15.135
guys with guns and fences actual
air gaps not things connected by

00:07:15.135 --> 00:07:18.338
wires. Really, I'm not up here
to say that containers can do

00:07:18.338 --> 00:07:26.313
everything. But, but I am going
to say you don't want to depend

00:07:26.313 --> 00:07:30.050
on anyone single mental.
Containers are getting a lot

00:07:30.050 --> 00:07:34.287
easier, more powerful. And if
you can do anything, you might

00:07:34.287 --> 00:07:40.360
as well just add things in
layers as we've seen. So, to get

00:07:40.360 --> 00:07:45.098
to how this actually works. Lt
first major area is name spaces

00:07:45.098 --> 00:07:50.804
win the -- just like any other
cool stuff on -- it started ten

00:07:50.804 --> 00:07:55.709
plan anyone where they had the
idea of [indiscernible] but the

00:07:55.709 --> 00:08:00.613
Linux colonial is split up into
five spaces, and the way you get

00:08:00.613 --> 00:08:06.619
into one of these names is you
-- -- kind of the new fancy fork

00:08:20.900 --> 00:08:22.902
the kind of phrase you can --
concern until execution context,

00:08:22.902 --> 00:08:24.904
the way do you that is by when
you call clone, you add special

00:08:24.904 --> 00:08:29.743
flags at the end depending on
the name -- that you want to

00:08:29.743 --> 00:08:34.981
enter the. The ad d first a long
time ago. Basically let's your

00:08:34.981 --> 00:08:42.622
process have a -- of what the
file system is. We can keep

00:08:42.622 --> 00:08:47.627
going through these. Host name.
They can have their own view of

00:08:47.627 --> 00:08:52.298
the other processes. And they
can be nest Ted there's cool

00:08:52.298 --> 00:08:55.468
tricks you can do. If you look
at how this actually works. If

00:08:55.468 --> 00:08:59.472
you create attain never and you
run PS in it you pretty much see

00:08:59.472 --> 00:09:03.676
the processes that are in your
container which leads me to the

00:09:03.676 --> 00:09:08.248
awesome snake oil solution you
can't hack what you can't see.

00:09:08.248 --> 00:09:13.420
So the new, there's also a
network name space that you know

00:09:13.420 --> 00:09:18.158
isolates your IP fire wall, your
routing table and user name

00:09:18.158 --> 00:09:22.862
space which is the newest one
which was added really important

00:09:22.862 --> 00:09:26.099
for accident occurring
containers and essentially let's

00:09:26.099 --> 00:09:29.169
you be inside of attain never
that's still treated as a low

00:09:29.169 --> 00:09:34.340
rights user in the context
outside of the container. Which

00:09:34.340 --> 00:09:37.877
obviously also high risk area of
the container that you are

00:09:37.877 --> 00:09:41.247
really controlling a lot of how
the U ID system works win the

00:09:41.247 --> 00:09:44.551
colonel and very sensitive area
there have been a few

00:09:44.551 --> 00:09:50.256
vulnerability using user name
space to break things outside

00:09:50.256 --> 00:09:54.828
the context of containers. The
way t looks is you know if you

00:09:54.828 --> 00:09:58.865
attach to our food container, if
you your route you can see

00:09:58.865 --> 00:10:02.602
inside run sleep and outside of
it you are U ID a hundred

00:10:02.602 --> 00:10:08.608
thousand essentially -- so the
other major area of containers

00:10:12.946 --> 00:10:16.883
is capability. The idea is you
take the user route, right who

00:10:16.883 --> 00:10:20.753
can do -- and a whole bunch of
little pieces you know whether

00:10:20.753 --> 00:10:25.492
you need to bind to something
lower than a thousand 24,

00:10:25.492 --> 00:10:28.294
whether you need to be able to
run [indiscernible] whether you

00:10:28.294 --> 00:10:34.567
need to be able to you know
change network settings. And

00:10:34.567 --> 00:10:39.038
[indiscernible] are great let's
us get rid of this God mowed and

00:10:39.038 --> 00:10:41.474
split it up into a whole bunch
of little pieces real

00:10:41.474 --> 00:10:47.313
confidential do only what -- you
want the process to be able to

00:10:47.313 --> 00:10:50.917
do with root. They started
lumping them together in weird

00:10:50.917 --> 00:10:57.090
ways. You end up with capability
model that somewhat works but is

00:10:57.090 --> 00:11:01.761
confusing hard and can be messed
up. You know, kind of -- ability

00:11:01.761 --> 00:11:08.234
that you might commonly
encounter things like being able

00:11:08.234 --> 00:11:12.438
to receive -- or a thousand 24
or change resource controls or

00:11:12.438 --> 00:11:16.676
send -- everyone asks what
capability should be dropped

00:11:16.676 --> 00:11:22.815
should I drop this or that
really you want to drop all of

00:11:22.815 --> 00:11:27.987
them. You want to set up
everything for your name space

00:11:27.987 --> 00:11:32.158
ahead of time. When you pivot
into it you want to throw away

00:11:32.158 --> 00:11:36.362
all -- and just live in your
little -- and you can't do

00:11:36.362 --> 00:11:40.133
anything at all. And then you're
going to get questions on forms

00:11:40.133 --> 00:11:43.703
or even just people as implement
tongue this you are thinking

00:11:43.703 --> 00:11:47.607
what if I leave this one
capability enabled what happens

00:11:47.607 --> 00:11:53.780
the answer is it depends. So if
we go and look at example we

00:11:53.780 --> 00:12:00.219
look at [indiscernible] from CD
record set ID root pop shells on

00:12:00.219 --> 00:12:06.226
LINN U Q you can get instant
route pink still has route and

00:12:13.132 --> 00:12:17.704
obviously attack service pink
pounded on a bunch. If you copy

00:12:17.704 --> 00:12:22.642
PING to somewhere else you will
lose -- and if you try to run

00:12:22.642 --> 00:12:27.580
that PING you will get option
not permitted raw socket for

00:12:27.580 --> 00:12:34.320
PING. So, the way to fix that is
you can stackability of cap net

00:12:34.320 --> 00:12:38.024
raw on that new [indiscernible].
If we, you know, look at that we

00:12:38.024 --> 00:12:43.930
can see we have cap net raw, run
it even though -- that's at the

00:12:43.930 --> 00:12:48.501
only thing I can do, only
capability that I have.

00:12:48.501 --> 00:12:51.271
Obviously there's a lot of
dangerous capability that to you

00:12:51.271 --> 00:12:57.644
-- that can be bad. Override you
know discretionary access

00:12:57.644 --> 00:13:04.317
controls or turn off the
miniture access control system.

00:13:04.317 --> 00:13:07.854
You know, things like that.
Definitely things you don't want

00:13:07.854 --> 00:13:09.856
to have. Other bad thing really
cap -- that sound pretty

00:13:09.856 --> 00:13:12.458
important. Its basically route.
There's a whole lot of things

00:13:12.458 --> 00:13:18.931
that it can do. There's also a
great post you by that goes into

00:13:18.931 --> 00:13:21.968
all the detail and all different
cape pallet and how they can be

00:13:21.968 --> 00:13:26.172
used to get route or do bad
things and that's the link to it

00:13:26.172 --> 00:13:31.611
and so the other major aspect of
containers is control groups.

00:13:31.611 --> 00:13:38.418
Basic idea of those inheritable
system for controlling resource

00:13:38.418 --> 00:13:45.258
across a set of processes.
Process sees. And that can be

00:13:45.258 --> 00:13:50.830
devices or CP U usage or
physical CP U memory amounts,

00:13:50.830 --> 00:13:57.370
rates of a certain device.
Network. And it's really you

00:13:57.370 --> 00:14:03.710
limit on -- if you want to think
about it that way. Urge its used

00:14:03.710 --> 00:14:09.716
to fill gaps as main spaces
there's no -- there's no name

00:14:12.185 --> 00:14:14.487
space scooped of have to get
around that a little bit by

00:14:14.487 --> 00:14:18.558
using C groups in a way that
that some one intended to do

00:14:18.558 --> 00:14:22.762
that but not really. They are
typically controlled by a

00:14:22.762 --> 00:14:24.764
[indiscernible] file system, so,
it's just a directory and you

00:14:24.764 --> 00:14:27.200
put, you know, create
directories and corresponds --

00:14:27.200 --> 00:14:34.640
and things will read that the
good thing it's a file system

00:14:34.640 --> 00:14:39.412
based and everything on -- as
file used to be at least.

00:14:39.412 --> 00:14:46.486
Following in that model but at
the end of the day you know you

00:14:46.486 --> 00:14:50.723
can do tricky over amount
attacks and other things that is

00:14:50.723 --> 00:14:55.027
a side effect of having it be a
file. So, you know it can be

00:14:55.027 --> 00:14:58.564
controlled through CG manager
but really most of the container

00:14:58.564 --> 00:15:01.701
platforms with -- when you put
all that together name spaces

00:15:01.701 --> 00:15:03.703
ice sew late the elements of the
colonial capability help enforce

00:15:03.703 --> 00:15:05.705
those name spaces and limit the,
you know, capability win that --

00:15:05.705 --> 00:15:08.241
and then the C groups limit
access. So really that those

00:15:08.241 --> 00:15:14.247
three elements along with some
other you know magic sauce will

00:15:23.556 --> 00:15:27.894
create containers and it is
better than -- there's a lot of

00:15:27.894 --> 00:15:31.697
background to those. You get
special amount options you can

00:15:31.697 --> 00:15:34.467
do things like overlay file
system where you know part of

00:15:34.467 --> 00:15:37.870
the directory is shown part of
it is shown to the host there's

00:15:37.870 --> 00:15:40.606
go between you go do
[indiscernible] so where API

00:15:40.606 --> 00:15:46.612
container is being used now on
servers a lot of platform is a

00:15:49.282 --> 00:15:51.818
service system you know EC two
you can do [indiscernible]

00:15:51.818 --> 00:15:56.722
Google API engine uses
containers, [indiscernible] has

00:15:56.722 --> 00:15:59.926
been doing it way before anybody
did and [indiscernible]

00:15:59.926 --> 00:16:05.298
everybody probably more than I
can list. Also being used in

00:16:05.298 --> 00:16:09.969
compliance. Chrome is a huge
user of these technology they

00:16:09.969 --> 00:16:15.241
have done a lot of hard work on
making awesome hand boxing and

00:16:15.241 --> 00:16:22.181
chrome, it's some what used in
ANDROID cool sand box tools if

00:16:22.181 --> 00:16:28.187
you are into those that use
these. Skipped of major one that

00:16:32.091 --> 00:16:35.027
started on the kind of path of
[indiscernible] was LQE van nil

00:16:35.027 --> 00:16:37.029
language interpreter I won't go
into the details controlled

00:16:37.029 --> 00:16:43.035
through a template you set
various options you know what

00:16:43.035 --> 00:16:49.976
devices you want to have, some
security things like

00:16:49.976 --> 00:16:54.113
[indiscernible] API
architectural more what to keep

00:16:54.113 --> 00:17:01.687
or drop. Recent advancement win
the last year or two, of

00:17:01.687 --> 00:17:04.624
containers. So, unprivileged
containers I mentioned user name

00:17:04.624 --> 00:17:07.026
space creates ability for non
privileged user then be root in

00:17:07.026 --> 00:17:10.429
all treated as a non root user
when it comes down to it.

00:17:10.429 --> 00:17:18.237
Obviously there's some weird
things that can happen with that

00:17:18.237 --> 00:17:22.708
situation, so there's more work
that needs to be done that will

00:17:22.708 --> 00:17:26.279
be a things where you know that
doesn't have rot will be able t

00:17:26.279 --> 00:17:30.283
create roots and do things.
There's a problem we talked

00:17:30.283 --> 00:17:34.720
about attack surface one of the
main entry points to the

00:17:34.720 --> 00:17:39.926
colonials there was a lot back
in two point two now there's a

00:17:39.926 --> 00:17:44.764
whole lot more. What are all
those does your API really need

00:17:44.764 --> 00:17:50.803
all those, you know, 300 some
odd says calls probably not. So

00:17:50.803 --> 00:17:55.474
then this thing came along, guys
that Google chrome team doing a

00:17:55.474 --> 00:17:59.779
ton of awesome work to push
boundaries of what you can do

00:17:59.779 --> 00:18:04.350
herein very good way. This has
been tried before. But the way

00:18:04.350 --> 00:18:07.520
they are doing it is much better
than some of the methods that

00:18:07.520 --> 00:18:12.058
have been tried in the past.
Important to point out

00:18:12.058 --> 00:18:15.328
[indiscernible] is not a sand
box its purely made to just

00:18:15.328 --> 00:18:18.331
limit the attack surface to
things your API doesn't really

00:18:18.331 --> 00:18:22.902
need to have. So you can also
not only can you fillet on

00:18:22.902 --> 00:18:26.238
certain calls like this process
just crunch chinning numbers

00:18:26.238 --> 00:18:32.011
just needs to call return and
open and -- you can actually

00:18:32.011 --> 00:18:37.483
control calls and say -- you can
only deal with these flags and

00:18:37.483 --> 00:18:44.857
this file. That's pretty power F
you do encounter -- when you got

00:18:44.857 --> 00:18:52.598
a lot of filter there will be
some impact I think figuring out

00:18:52.598 --> 00:18:56.402
what that is. But definitely is
something to consider in fur

00:18:56.402 --> 00:19:01.307
going to be rolling it out.
Right now you will need LQE or

00:19:01.307 --> 00:19:05.911
-- or use end box or something
like that. If you are going to

00:19:05.911 --> 00:19:09.949
use [indiscernible] you have to
use a slash couldn't crib or

00:19:09.949 --> 00:19:13.185
wait until one point ate which
is I think when we are going to

00:19:13.185 --> 00:19:16.489
launch [indiscernible] LXE has
it right now and you can crew

00:19:16.489 --> 00:19:23.329
it. Its typically done through
PR control. You basically can

00:19:23.329 --> 00:19:31.270
set one of two flags, -- which
should be used for just like a

00:19:31.270 --> 00:19:33.739
you know once you get process
into a spot going to be crunch

00:19:33.739 --> 00:19:38.277
and numbers or basic you can put
that on there you can filter

00:19:38.277 --> 00:19:44.617
which everybody remembers from
-- this T-shirt contest how you

00:19:44.617 --> 00:19:49.955
would use in an actual program
directly. Berkeley packet filter

00:19:49.955 --> 00:19:52.358
is pretty cool you can use --
some of the language that -- I

00:19:52.358 --> 00:19:58.364
don't know how it works
underneath but its cool K where

00:20:01.667 --> 00:20:06.272
is it being used right now lots
of places. You be turn it on in

00:20:06.272 --> 00:20:10.509
lots of place at least it's not
necessarily on by default it is

00:20:10.509 --> 00:20:13.646
definitely in chrome they have
been doing a lot of good work

00:20:13.646 --> 00:20:17.383
they also did tour. So,
containers you know whose doing

00:20:17.383 --> 00:20:23.389
these, right. So [indiscernible]
there's interesting other

00:20:25.891 --> 00:20:29.161
companies that are doing these
in the back grouped or offering

00:20:29.161 --> 00:20:36.135
them as a service, offering it
as a service. Big shout out to

00:20:36.135 --> 00:20:39.805
-- they have a crazy like
customer moved system they do

00:20:39.805 --> 00:20:42.808
[indiscernible] for everything.
And they are super serious about

00:20:42.808 --> 00:20:47.513
security and everything else.
And also the [indiscernible] is

00:20:47.513 --> 00:20:52.351
interesting everything in that
kind of minimal system runs in

00:20:52.351 --> 00:20:56.489
attain never. It's also funny I
don't know if it's been fixed

00:20:56.489 --> 00:20:58.924
when you would Google that it
would bring up [indiscernible]

00:20:58.924 --> 00:21:04.797
Google would fix it they might
have some problems. You know,

00:21:04.797 --> 00:21:08.267
we're really here to talk about
the big two when I usually

00:21:08.267 --> 00:21:12.404
mention dock consider this is
the response from sill couldn't

00:21:12.404 --> 00:21:16.542
valley this is usually the
response I get it's really

00:21:16.542 --> 00:21:20.246
packaging kind of development
focussed. One thing that is

00:21:20.246 --> 00:21:24.917
really good about that I think
it's also very API focussed the

00:21:24.917 --> 00:21:29.555
kind of philosophy of dock
consider it's not just attain

00:21:29.555 --> 00:21:32.658
never with you know some things
in it, it's just, its -- one

00:21:32.658 --> 00:21:36.095
process in that container and
that's it. And that you know as

00:21:36.095 --> 00:21:41.000
a security person I really like
that because then not only is it

00:21:41.000 --> 00:21:45.237
that one process nine container
one process just libraries that

00:21:45.237 --> 00:21:48.607
it needs and just the files it
needs and nothing else and so

00:21:48.607 --> 00:21:53.579
you really are cutting off a lot
of attack service there and the

00:21:53.579 --> 00:22:01.120
you know the big dilemma dock
and why its gotten so pop her

00:22:01.120 --> 00:22:07.693
makes -- in kind of the harder
mowed. DOC KER you know you just

00:22:07.693 --> 00:22:13.265
do -- didn't magic happens. But
isn't just containers there's

00:22:13.265 --> 00:22:16.902
all these other things that
they've done. Used to be based

00:22:16.902 --> 00:22:19.138
off of? A -- written in go they
also have chain and all these

00:22:19.138 --> 00:22:24.610
other things. They have arrest
API by default uses dark dash

00:22:24.610 --> 00:22:30.616
also budget kind of down sides
of it that they are working

00:22:34.019 --> 00:22:38.991
other than fixing related to the
fact there's this call call --

00:22:38.991 --> 00:22:43.229
all your containers that runs as
root you have to be root to

00:22:43.229 --> 00:22:46.398
interactive act with it that
makes people run as root on the

00:22:46.398 --> 00:22:52.271
container host and you know its
never a good thing. So you know

00:22:52.271 --> 00:22:57.876
you -- dash you can map things
from the host into your

00:22:57.876 --> 00:23:02.948
container. Also had this idea of
[indiscernible] had you been for

00:23:02.948 --> 00:23:09.021
containers you know you can do
commits and all this stuff S all

00:23:09.021 --> 00:23:12.758
the orchestrating communication
management I don't think the

00:23:12.758 --> 00:23:17.196
word orchestrating was mentioned
much at all in the last hundred

00:23:17.196 --> 00:23:20.499
years except maybe last year.
Any way so [indiscernible] S

00:23:20.499 --> 00:23:24.637
other big one. Really started
out as amine must OS for hosting

00:23:24.637 --> 00:23:29.008
containers. They are luncheon
rocket in API container spek

00:23:29.008 --> 00:23:32.845
they are trying to distance
themselves main idea that they

00:23:32.845 --> 00:23:38.817
are trying to be more secure and
lean and be what dock consider

00:23:38.817 --> 00:23:44.056
should be or used to be. And but
you know why would anybody use

00:23:44.056 --> 00:23:48.294
any of these systems and its
mostly just to make it easy or

00:23:48.294 --> 00:23:53.299
to package a lot of the
functional will the with it one

00:23:53.299 --> 00:23:56.435
way you can relate to it you can
secure that but -- or you can

00:23:56.435 --> 00:24:03.242
run OS10 easy but you kind of
have to take some things, you

00:24:03.242 --> 00:24:07.780
know, for grantor Ted about
control. And so, you know it's

00:24:07.780 --> 00:24:10.949
kind of van nil language
interpreter let's you do what

00:24:10.949 --> 00:24:14.953
you want you get bleeding edge
you have to know what you are

00:24:14.953 --> 00:24:18.357
doing to do everything correctly
especially based on default do a

00:24:18.357 --> 00:24:21.360
lot of stuff for you drop most
of the cape ability that you

00:24:21.360 --> 00:24:27.166
don't need kind of disable those
if your API doesn't need them

00:24:27.166 --> 00:24:31.904
we'll get into that. So you know
hard mowed you got flexibility

00:24:31.904 --> 00:24:36.508
[indiscernible] easy you have
costs or risk [indiscernible]

00:24:36.508 --> 00:24:41.113
its new. It's very very new.
We'll get to that. So but we are

00:24:41.113 --> 00:24:45.084
here to talk about attack that's
all just stuff. If you think

00:24:45.084 --> 00:24:47.853
about this there's a lot of
different ways that we can go

00:24:47.853 --> 00:24:50.889
about thinking what are the
attacks in attain never what

00:24:50.889 --> 00:24:54.126
should I be worried about.
Containers to other containers.

00:24:54.126 --> 00:24:57.696
Things in the container against
itself essentially trying to

00:24:57.696 --> 00:25:00.599
elevate privileges win attain
fer if you are not just a single

00:25:00.599 --> 00:25:05.437
process container to the
container host. You know, things

00:25:05.437 --> 00:25:09.541
-- whether that's orchestrating
and all that other stuff or

00:25:09.541 --> 00:25:13.445
whether you know other things on
the network. And you can go from

00:25:13.445 --> 00:25:16.115
there. So, kind of starting at
the top, you know, the colonials

00:25:16.115 --> 00:25:21.387
obviously is going all the
virtual sayings stuff so in the

00:25:21.387 --> 00:25:26.191
colonials all [indiscernible]
file systems, pretty much nobody

00:25:26.191 --> 00:25:29.561
compiles acorn until from
scratch anymore that has all

00:25:29.561 --> 00:25:36.101
this stuff you don't need.
Inherit tongue vulnerability,

00:25:36.101 --> 00:25:42.574
special -- thing in -- that you
don't use on your server S the

00:25:42.574 --> 00:25:48.580
other way this goes bad is not
dropping disability so

00:25:51.183 --> 00:25:53.185
[indiscernible] there's been I
don't know how many different --

00:25:53.185 --> 00:26:00.459
tolt station where you can go
from -- to something else that

00:26:00.459 --> 00:26:03.262
you shouldn't be doing that
isn't related Ted to network

00:26:03.262 --> 00:26:06.532
country the way that's happened
in a lot of cases being able to

00:26:06.532 --> 00:26:11.236
force to load colonials module
that you then control. But you

00:26:11.236 --> 00:26:16.608
know speaking to have dropping
typability -- sung by this they

00:26:16.608 --> 00:26:21.113
kept around for a long time the
cap [indiscernible] capability

00:26:21.113 --> 00:26:26.251
if you read and maybe this is
what they did you know it says

00:26:26.251 --> 00:26:31.156
something like you know, you can
read some files related to

00:26:31.156 --> 00:26:37.196
permission, you can also invoke
open handle act which is --

00:26:37.196 --> 00:26:41.133
which doesn't have documentation
they probably thought oh,

00:26:41.133 --> 00:26:45.671
whatever. But it turns out that
if you actually use that says

00:26:45.671 --> 00:26:50.943
call and you do other tricks you
can -- I need host and read it

00:26:50.943 --> 00:26:55.981
from inside the container
obviously there's other attacks

00:26:55.981 --> 00:27:00.085
you can do related to that that
was something that really gave

00:27:00.085 --> 00:27:05.124
the disability model a good
example of why you need to drop

00:27:05.124 --> 00:27:09.461
the ones that you don't really
need because they are

00:27:09.461 --> 00:27:12.264
complicated. And you know if you
don't drop those you have to

00:27:12.264 --> 00:27:16.635
rely on some other thing to to
you know enforce the rules on

00:27:16.635 --> 00:27:20.873
your container and you know
that's typically done through a

00:27:20.873 --> 00:27:25.511
access control unit but if you
don't use that, the

00:27:25.511 --> 00:27:29.715
[indiscernible] you are still
root on a host unless you are

00:27:29.715 --> 00:27:33.619
using the user name space which
doesn't have a ton of support

00:27:33.619 --> 00:27:38.790
yet or adoption. You also have
the problem of limiting access

00:27:38.790 --> 00:27:42.361
we mentioned how the colonials
-- that is not a name space for

00:27:42.361 --> 00:27:44.363
[indiscernible] there's not a
name space for [indiscernible]

00:27:44.363 --> 00:27:49.334
you have things in the container
that are exposed from the host

00:27:49.334 --> 00:27:53.906
or that bridge that the host and
the container so things like

00:27:53.906 --> 00:27:58.877
where you can expose the
colonials memory into the -- you

00:27:58.877 --> 00:28:01.446
have things like [indiscernible]
everyone forgets about butting

00:28:01.446 --> 00:28:07.452
LXE for a number of years we are
leaving that open. You also have

00:28:10.656 --> 00:28:14.226
things like being able to make
new devices or CD message that's

00:28:14.226 --> 00:28:17.963
not a ton of attack service
there you are leaking things

00:28:17.963 --> 00:28:22.901
like fire wall rules. Unattended
access to the -- bridge system

00:28:22.901 --> 00:28:28.907
buy are default. A bridge is a
switch. So, most of the default

00:28:31.043 --> 00:28:35.247
system I think almost all the
containers will create a bridge

00:28:35.247 --> 00:28:37.649
and let your containers talk to
each other it isn't something

00:28:37.649 --> 00:28:40.085
most people realize when they
die employ they don't think they

00:28:40.085 --> 00:28:44.122
will be able to communicate but
they can unless you've written

00:28:44.122 --> 00:28:46.692
fire wall rules or switched to
some other network and type.

00:28:46.692 --> 00:28:52.698
Container with my favorite
function there you are going to

00:28:55.334 --> 00:28:59.504
be fork bombing the host.
Relating to you know

00:28:59.504 --> 00:29:05.110
[indiscernible] sung by this a
couple times this d ideas of

00:29:05.110 --> 00:29:09.748
taking your application
packaging it up putting a lock

00:29:09.748 --> 00:29:13.085
on it and shipping it off
everywhere you know that sun

00:29:13.085 --> 00:29:17.522
really happen what happens when
there's a vulnerability and you

00:29:17.522 --> 00:29:20.959
need to update it what do you do
you know you can't just you are

00:29:20.959 --> 00:29:25.564
not supposed to run -- on
containers kind of a no no in

00:29:25.564 --> 00:29:29.067
the container world because
there's supposed to be --

00:29:29.067 --> 00:29:31.503
[indiscernible] so what do you
do and so you kind of need to

00:29:31.503 --> 00:29:34.139
have a system to adopt have a
patching system. And then the

00:29:34.139 --> 00:29:39.011
lack of -- so most of the
container systems also have some

00:29:39.011 --> 00:29:46.618
form of API armour support that
works quite well obviously not

00:29:46.618 --> 00:29:51.690
perfect there's been bugs
recently publish there. But at

00:29:51.690 --> 00:29:54.526
the end of the day you know the
colonials is still enforce sink

00:29:54.526 --> 00:29:57.863
things this is the perfect
solution one facet of many

00:29:57.863 --> 00:30:02.968
different things. And we
mentioned networking dough

00:30:02.968 --> 00:30:10.509
faults. For [indiscernible] the
defaults are quite bad for

00:30:10.509 --> 00:30:13.245
dropping that relates to the way
that the model of LXC you have

00:30:13.245 --> 00:30:19.251
been -- dash its supposed to be
a feudist things maybe --

00:30:26.625 --> 00:30:30.062
whereas idea of one process.
Speaking of [indiscernible] does

00:30:30.062 --> 00:30:35.834
a pretty good job of dropping
capability but if you read

00:30:35.834 --> 00:30:39.971
between the mind they mention
they drop all capability except

00:30:39.971 --> 00:30:42.741
for those required but if they
don't know what you are going to

00:30:42.741 --> 00:30:45.544
be running how do they no the
ones that are still retired. You

00:30:45.544 --> 00:30:47.546
have to to be root to use it
that end up being bad. I've been

00:30:47.546 --> 00:30:49.548
on a number of engagement people
have been added to the group but

00:30:49.548 --> 00:30:51.917
you know if you are in the
group, you can essentially root

00:30:51.917 --> 00:30:57.923
the host . There's also things
like -- doesn't have

00:31:04.763 --> 00:31:08.400
authentication if you turn that
on then you have some problem

00:31:08.400 --> 00:31:13.605
where some outside attacker can
get to it or some -- or some

00:31:13.605 --> 00:31:19.544
other thing where you can get to
that system and it could even be

00:31:19.544 --> 00:31:24.216
exposed to containers through
that -- if to you don't have

00:31:24.216 --> 00:31:30.122
fire wall. Also has -- which I
think is not just -- has the

00:31:30.122 --> 00:31:32.424
problem where you know not
something like it's in including

00:31:32.424 --> 00:31:35.660
this from these five veep dorse
and they just accept they commit

00:31:35.660 --> 00:31:38.930
request from five random all
that code being -- he doesn't

00:31:38.930 --> 00:31:44.936
that the code he's committing is
going to data center and a crazy

00:31:47.239 --> 00:31:51.343
company and all it would take
would be one commit. There's

00:31:51.343 --> 00:31:56.681
been back door -- AMI published
that happens with get had you

00:31:56.681 --> 00:32:00.018
been and all that. It also I
mentioned it doesn't drop all

00:32:00.018 --> 00:32:02.754
capability by default --
[indiscernible] you can still

00:32:02.754 --> 00:32:08.760
make devices in your container
API armour you know most of the

00:32:12.397 --> 00:32:15.066
time your API isn't going to
need those so you should drop

00:32:15.066 --> 00:32:22.007
them. When you bind a port to
binds it to all the interfaces

00:32:22.007 --> 00:32:25.744
and so if you have a multiple
interface going to be on all

00:32:25.744 --> 00:32:30.515
those. Doctors some other things
reHACK late Ted to base images a

00:32:30.515 --> 00:32:36.721
lot of people dock consider file
main way of [indiscernible]

00:32:36.721 --> 00:32:42.661
they'll -- but that pulse in
like 200 visit megabits of pack

00:32:42.661 --> 00:32:46.464
damages that you don't need and
you know that's kind of a

00:32:46.464 --> 00:32:51.169
problem where you think you are
just running a single process in

00:32:51.169 --> 00:32:55.440
that container really there's a
local bunch of other stuff that

00:32:55.440 --> 00:33:00.445
could be used or try to attack
to break out of that container.

00:33:00.445 --> 00:33:04.349
I mention mention giving user
access to -- essentially giving

00:33:04.349 --> 00:33:09.054
them root. It doesn't have
support right now for -- or user

00:33:09.054 --> 00:33:13.692
name spaces which are two really
critical security benefits but

00:33:13.692 --> 00:33:18.997
it will very soon I think one
point ate what they've mentioned

00:33:18.997 --> 00:33:22.701
about that. And the other thing
I mentioned that I've seen is

00:33:22.701 --> 00:33:24.803
people for trying to do -- with
container something in the

00:33:24.803 --> 00:33:27.205
container be able to see what's
going on with itself they'll

00:33:27.205 --> 00:33:29.207
expose the [indiscernible]
inside the container don't do

00:33:29.207 --> 00:33:33.245
that. That's giving your
container root on your host.

00:33:33.245 --> 00:33:40.418
Speaking about the user name
space I have to poke at them a

00:33:40.418 --> 00:33:47.025
little bit more. They mentioned
on hooker news that you know, on

00:33:47.025 --> 00:33:51.329
the you know, we will soon have
support for user name space when

00:33:51.329 --> 00:33:53.431
we feel comfortable the
[indiscernible] can run

00:33:53.431 --> 00:33:58.837
[indiscernible] we will say so
clearly that was a year ago. No

00:33:58.837 --> 00:34:01.640
problem l more than a year ago
now. And they still don't have

00:34:01.640 --> 00:34:06.177
it. To give them a little credit
I think that one of the major

00:34:06.177 --> 00:34:10.181
reasons why they don't have the
user name space that was a

00:34:10.181 --> 00:34:13.518
limitation of go and not
necessarily their fault but they

00:34:13.518 --> 00:34:17.489
are on it now. Hopefully it will
be soon. Also, every container

00:34:17.489 --> 00:34:21.826
talk has to have an image of
some broken container, so I can

00:34:21.826 --> 00:34:24.829
check that box. So, rocket is
the other one that kind of came

00:34:24.829 --> 00:34:28.600
on the stage. It's still you
know their whole selling point

00:34:28.600 --> 00:34:32.537
there's no root Damon there's a
[indiscernible] that you can

00:34:32.537 --> 00:34:35.774
run. There's no thing after
running on your host. Still

00:34:35.774 --> 00:34:41.413
requires root to run it. So, I
don't know if they really solved

00:34:41.413 --> 00:34:45.050
the problem. Also doesn't drop
almost any of the dangerous

00:34:45.050 --> 00:34:49.487
typability doesn't support the
user name space. Let's see what

00:34:49.487 --> 00:34:53.925
else. Oh yeah doesn't support
[indiscernible] kind of support

00:34:53.925 --> 00:34:58.797
-- ins to documentation. They
had a bug where you couldn't run

00:34:58.797 --> 00:35:03.134
things inside attain never
without running them as a root

00:35:03.134 --> 00:35:07.405
inside the container which seems
crazy. They don't have in -- so

00:35:07.405 --> 00:35:13.678
you know if you read the
documentation they have this

00:35:13.678 --> 00:35:18.383
very impressive design with this
multi stage system and it sounds

00:35:18.383 --> 00:35:21.186
really good, but unfortunately I
think this is -- and you know I

00:35:21.186 --> 00:35:27.225
hope it improves I like to see
exesion but I think right now

00:35:27.225 --> 00:35:31.863
this is where they are. So then
very reply cents l there was I

00:35:31.863 --> 00:35:33.865
think at [indiscernible] they
announced open container

00:35:33.865 --> 00:35:36.034
project. I was really really bum
bd that they didn't go with this

00:35:36.034 --> 00:35:42.040
logo because its awesome and a
great movie actually changed

00:35:44.976 --> 00:35:50.682
their name to the open container
initiative. And they really have

00:35:50.682 --> 00:35:54.285
this specification for
containers and kind of

00:35:54.285 --> 00:35:59.391
standardized the system and have
all -- they launched something

00:35:59.391 --> 00:36:03.128
called run -- which is a very
very money mal container

00:36:03.128 --> 00:36:07.732
essentially is a kind of exesion
for proct it's very minimal you

00:36:07.732 --> 00:36:11.169
know you just define container
with -- something like that. And

00:36:11.169 --> 00:36:14.873
then its backed by -- which is
supported by -- but they still

00:36:14.873 --> 00:36:20.879
are not work [indiscernible] all
that stuff sound kind of bad and

00:36:23.581 --> 00:36:28.219
messed up and you know what can
we do. So, there's a lot of

00:36:28.219 --> 00:36:31.256
recommendations I have. I
actually a -- that I'm going to

00:36:31.256 --> 00:36:34.526
be publish shinning really soon
I kind of designed my slides to

00:36:34.526 --> 00:36:40.732
be high level of each area but
the white paper goes no atone of

00:36:40.732 --> 00:36:44.602
detail all this such really the
big message is -- I know

00:36:44.602 --> 00:36:49.741
everybody says that you know to
the a horn a bunch really if you

00:36:49.741 --> 00:36:53.611
are trying to defend you want to
build defense in layers that's

00:36:53.611 --> 00:36:57.882
really the only way you are
going to do it. So, if -- start

00:36:57.882 --> 00:37:03.154
with the colonials, cause, its
got acorn until, so you want to

00:37:03.154 --> 00:37:06.925
do GR security everyone should
be running it it's ridiculous

00:37:06.925 --> 00:37:11.029
especially on the server where
there's no special hardware you

00:37:11.029 --> 00:37:14.299
know sometimes on a laptop can
be a little tricky with drivers

00:37:14.299 --> 00:37:18.069
or whatever it may be. But, on a
server when you are just running

00:37:18.069 --> 00:37:25.176
a few things or you are doing
jousted it and so, you know

00:37:25.176 --> 00:37:29.013
obviously dropping all
capability that you don't want

00:37:29.013 --> 00:37:31.850
trying to design for the
smallest possible set you are

00:37:31.850 --> 00:37:35.887
giving these out but you want to
be careful about the what they

00:37:35.887 --> 00:37:40.758
are and try to fully understand
what capability really can do.

00:37:40.758 --> 00:37:44.395
You also want to use API armour
or GR security -- or some other

00:37:44.395 --> 00:37:51.469
thing if you can most of the
container systems will have API

00:37:51.469 --> 00:37:56.774
armour by default enforced
enabled which is awesome. It

00:37:56.774 --> 00:37:59.844
also can be nest Ted it's kind
of crazy to think about API

00:37:59.844 --> 00:38:04.849
armour profile for attain never
in that container if you want to

00:38:04.849 --> 00:38:10.855
have something to -- limited API
arm nor profile of that first

00:38:10.855 --> 00:38:15.226
one you can do that T that's
kind of need. For

00:38:15.226 --> 00:38:18.796
[indiscernible] specifically you
don't want to allow user to run

00:38:18.796 --> 00:38:20.798
[indiscernible] if you don't
want to give them root on that

00:38:20.798 --> 00:38:24.302
host. You don't want to run
containers that are

00:38:24.302 --> 00:38:28.873
[indiscernible]. As we've seen
either using IP table trick or

00:38:28.873 --> 00:38:32.944
using the [indiscernible]
ozonate need -- you do not need

00:38:32.944 --> 00:38:35.680
to be root -- if I don't know
how many times you've been I'm

00:38:35.680 --> 00:38:41.686
sure you guys no you've been on
a project or looked at security

00:38:44.222 --> 00:38:46.224
only reason why they are running
it because they need to

00:38:46.224 --> 00:38:48.593
[indiscernible] and that's super
and doesn't exist anymore and

00:38:48.593 --> 00:38:55.633
nobody should be doing it. Small
base images is really cool

00:38:55.633 --> 00:38:58.870
there's a -- crazy tiny
[indiscernible] and this is

00:38:58.870 --> 00:39:04.809
going to be documented using
[indiscernible] if you can so

00:39:07.445 --> 00:39:11.049
right now with LQC you can use
[indiscernible] you want at a --

00:39:11.049 --> 00:39:17.055
allow your API to be able to
call. In ways that is typically

00:39:19.857 --> 00:39:25.864
you know accessed. You want to
do all your normal -- that's a

00:39:28.132 --> 00:39:35.607
long list of things there's a
lot of stuff to do there that's

00:39:35.607 --> 00:39:39.210
what should be done. You want to
avoid things that are -- or just

00:39:39.210 --> 00:39:41.446
keep that inned that in mind
that cross container network

00:39:41.446 --> 00:39:43.982
king the other thing that's cool
if you have these different

00:39:43.982 --> 00:39:46.651
interface it is really easy to
tell what is going aphony

00:39:46.651 --> 00:39:53.725
process [indiscernible] so the
core picture is you know you've

00:39:53.725 --> 00:39:57.362
got this harden application
you've got [indiscernible] user

00:39:57.362 --> 00:40:01.499
name space dropped capability
[indiscernible] protection read

00:40:01.499 --> 00:40:05.703
only except for maybe like the
log files or something like

00:40:05.703 --> 00:40:11.376
that. And then, you got a main
mal container and then you do

00:40:11.376 --> 00:40:17.382
[indiscernible] and then you've
got -- on some other kind of

00:40:19.817 --> 00:40:23.688
virtual machine to gain some
like actual hardware separation

00:40:23.688 --> 00:40:26.891
and then you isolate that whole
thing by some trust that you

00:40:26.891 --> 00:40:31.863
give it do that differently for
other things so you know, your

00:40:31.863 --> 00:40:35.700
containers that are getting hit
by API on the front end of your

00:40:35.700 --> 00:40:38.236
system those should be treated
than different trust to you

00:40:38.236 --> 00:40:40.672
don't want to have those on the
same system if you can avoid

00:40:40.672 --> 00:40:43.775
them -- that that's not ideal.
So where do we go from here more

00:40:43.775 --> 00:40:49.847
name spaces hopefully will be
coming that will help clear that

00:40:49.847 --> 00:40:55.119
up edge cases where
[indiscernible] is a -- so,

00:40:55.119 --> 00:41:02.060
there's the thing reply sent l
in tell came out with clear

00:41:02.060 --> 00:41:04.595
containers essentially like a 20
megabit [indiscernible] that

00:41:04.595 --> 00:41:10.668
will give you some hardware
virtual sales aspect that you

00:41:10.668 --> 00:41:18.576
can apply to containers that's
cool that I think is going to be

00:41:18.576 --> 00:41:25.249
need to explore. -- or more
refined going forward. And also,

00:41:25.249 --> 00:41:31.990
you know, these -- because this
is Linux on Linux anywhere it

00:41:31.990 --> 00:41:35.927
can run you can do this kind of
stuff on I mean bedded devices

00:41:35.927 --> 00:41:41.132
isolation mechanism or run
containers on a phone or

00:41:41.132 --> 00:41:47.572
whatever where virtual sayings
or other things is less keypal.

00:41:47.572 --> 00:41:52.410
We talked about server threes no
reason why desk top Linux can

00:41:52.410 --> 00:41:58.383
benefit from all these isolation
-- or using containers hopefully

00:41:58.383 --> 00:42:01.652
there's a lot more effort there
I personally run everything in

00:42:01.652 --> 00:42:05.189
attain never that speaks
anything externally or parse

00:42:05.189 --> 00:42:11.195
anything from the outside. So
Mike services idea which is

00:42:13.898 --> 00:42:16.334
somewhat new it's kind of cool
you end up with something looks

00:42:16.334 --> 00:42:19.237
like this. I think budget ways
to think about it that actually

00:42:19.237 --> 00:42:23.508
isn't a micro service picture
that's the chrome sand box so if

00:42:23.508 --> 00:42:27.445
you think about it, the way that
Mike service is the idea of them

00:42:27.445 --> 00:42:29.514
you know splitting up everything
into a hundred -- that sounds

00:42:29.514 --> 00:42:37.088
like a pain in the ASS it let
you do a lot of these privileges

00:42:37.088 --> 00:42:41.225
you can do a lot of crazy cool
security wear. Everyone drives

00:42:41.225 --> 00:42:43.928
all these boxes on a white board
this is what our system look

00:42:43.928 --> 00:42:46.864
like by the end is of the day
there's a whole bunch of other

00:42:46.864 --> 00:42:49.934
piece that get connected there
and they don't have the security

00:42:49.934 --> 00:42:54.005
they should it's not my off
service it can talk to some

00:42:54.005 --> 00:42:57.141
other thing nobody rights fire
wall rules for all that stuff.

00:42:57.141 --> 00:42:59.844
So you know the service model
kind of splitting everything up

00:42:59.844 --> 00:43:06.117
into pieces running it all in
little containers. Having, you

00:43:06.117 --> 00:43:10.955
know, message C U ES and all
kind of things in starts off

00:43:10.955 --> 00:43:17.128
something like that and ends up
something like this. So really

00:43:17.128 --> 00:43:21.265
it's not about perfect security
containers you can't drop that

00:43:21.265 --> 00:43:25.736
and think you ever security its
impoving the work the number of

00:43:25.736 --> 00:43:29.140
times I've been on a pen test or
red team or something I've been

00:43:29.140 --> 00:43:33.144
stopped by popping something and
having it be inside a sand box

00:43:33.144 --> 00:43:38.316
or container close to zero. And
that's just silly these days.

00:43:38.316 --> 00:43:43.721
Not that hard to do containers.
It can secure a lot of existing

00:43:43.721 --> 00:43:48.926
systems that are Linux micro
service dark dark that's going

00:43:48.926 --> 00:43:54.298
to be a lot more popular I
actually like it from the

00:43:54.298 --> 00:43:58.736
security aspect of it. So coming
soon my white paper is coming

00:43:58.736 --> 00:44:01.806
out covers everything I talked
bane whole lot more depth covers

00:44:01.806 --> 00:44:05.943
all kind of past attacks and
locating at new areas and

00:44:05.943 --> 00:44:10.081
everything hopefully it will be
relieved soon. If you want to

00:44:10.081 --> 00:44:14.585
make sure that you get it I'm
going to be writing everybody

00:44:14.585 --> 00:44:18.189
that emails mein text file you
can follow me on winter I'll

00:44:18.189 --> 00:44:24.195
talk about it at some point.
But, yeah, any questions or

00:44:30.568 --> 00:44:36.340
comments? I'll be around this is
the last talk. Thanks a lot for

00:44:36.340 --> 00:44:39.343
hanging out. It's kind of late,
but i appreciate it.

