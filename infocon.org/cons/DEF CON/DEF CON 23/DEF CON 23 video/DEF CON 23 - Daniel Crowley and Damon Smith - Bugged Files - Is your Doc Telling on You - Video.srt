00:00:00.067 --> 00:00:04.738
 welcome, welcome to DEFCON,
welcome to DEFCON 23, and I hope

00:00:04.738 --> 00:00:09.409
y'all have as much fun as I
generally have, and so to start

00:00:09.409 --> 00:00:14.381
off, this is -- this is the talk
bug files, if you're here for

00:00:14.381 --> 00:00:18.085
some other talk then you're in
the wrong room. And let's start

00:00:18.085 --> 00:00:24.224
out by introducing ourselves. >>
My name is Damon Smith. I am a

00:00:24.224 --> 00:00:31.465
security engineer with NCC
Group. I work alongside this

00:00:31.465 --> 00:00:37.471
happen man. Embedded devices but
recently file format research

00:00:40.240 --> 00:00:43.277
with this man right here. >> And
this man right here is Daniel

00:00:43.277 --> 00:00:47.381
Crowley, as aforementioned hand
some, thank you. Thank you. And

00:00:47.381 --> 00:00:52.586
I -- I like web applications
encrypto and fiddling with file

00:00:52.586 --> 00:00:56.590
formats, so this is right up my
alley, which you would hope

00:00:56.590 --> 00:01:01.028
because I'm up on stage talking
to you about all of this. And

00:01:01.028 --> 00:01:04.698
so, yeah, just so you know,
we're from Austin, Texas.

00:01:04.698 --> 00:01:11.238
Anybody -- yay. And there's some
local up there, Austin hackers

00:01:11.238 --> 00:01:17.978
anonymous, ha ha. It's a time
honored tradition, if you have

00:01:17.978 --> 00:01:24.685
something funny, feel free to
shout it out. If you're not

00:01:24.685 --> 00:01:31.258
funny, please just stay silent.
So let's begin. So what is this

00:01:31.258 --> 00:01:36.063
talk about? This talk is about
abusing features of file formats

00:01:36.063 --> 00:01:39.700
to make files that trigger
outbound traffic when opened.

00:01:39.700 --> 00:01:43.236
And there are some caveats to
this. We focused research in

00:01:43.236 --> 00:01:46.139
particular directions because
you know, if we were to stand up

00:01:46.139 --> 00:01:48.742
here and say, I can make an
executable that calls that when

00:01:48.742 --> 00:01:51.745
you open it, well, yeah, okay.
So it's slightly more

00:01:51.745 --> 00:01:54.781
interesting things like that,
document formats, media formats,

00:01:54.781 --> 00:01:59.319
that sort of thing, and this
does not -- the important thing

00:01:59.319 --> 00:02:04.558
to keep in mind here is that
none of this is exploit -- well,

00:02:04.558 --> 00:02:08.729
it's sort of exploitation, but
it's not exploiting any kind of

00:02:08.729 --> 00:02:13.500
bug, right? These are not
mistakes so much as user

00:02:13.500 --> 00:02:16.803
vulnerabilities are. We're
talking about features in file

00:02:16.803 --> 00:02:20.407
formats, features in parsers
that allow this to happen. >>

00:02:20.407 --> 00:02:27.280
Why do you care, why in this
room? Three main reasons this

00:02:27.280 --> 00:02:31.251
stuff is important. The obvious
is privacy. There are a lot of

00:02:31.251 --> 00:02:33.854
obvious privacy implications,
there are also some more hidden

00:02:33.854 --> 00:02:35.856
privacy implications. We're
going to go over each one of

00:02:35.856 --> 00:02:40.093
these points in detail during
the talk but just briefly, we're

00:02:40.093 --> 00:02:43.296
talking DRM, files phone home as
soon as you open them for

00:02:43.296 --> 00:02:47.668
tracking their use, data loss
prevention. Files that exist on

00:02:47.668 --> 00:02:50.037
a corporate network as soon as
they're opened outside the

00:02:50.037 --> 00:02:52.539
corporate network they phone
home to let someone know they've

00:02:52.539 --> 00:02:55.909
been reached. Deanonymization,
some real serious information

00:02:55.909 --> 00:03:00.480
that we're going to go over a
bit more in depth later. We have

00:03:00.480 --> 00:03:04.618
files as soon as you open them,
credentials to an attacker.

00:03:04.618 --> 00:03:11.158
Finally as Dan mentioned, not
going to be fixed on patch

00:03:11.158 --> 00:03:14.494
Tuesday. These are going to be
around for years, that's what

00:03:14.494 --> 00:03:20.133
makes these bugs different than
your standard buffer overflow

00:03:20.133 --> 00:03:24.071
type bugs. >> We're going to
start out with a little

00:03:24.071 --> 00:03:26.640
demonstration. I'm sure a lot of
people, they heard, ooh,

00:03:26.640 --> 00:03:31.945
credentials. Credentials. Let's
see it. So we're going to show

00:03:31.945 --> 00:03:37.751
you two demonstrations now, one
with RTF and one with SVG. >>

00:03:37.751 --> 00:03:42.422
Quick prayer to the demo gods,
please. >> Did you bring the

00:03:42.422 --> 00:03:47.327
live chicken? Does anybody have
a live chicken? I've got the

00:03:47.327 --> 00:03:51.264
ceremonial dagger, but -- okay,
well, we'll just have to hope

00:03:51.264 --> 00:03:57.270
for the best. >> Resolution. [
Laughter ] >> Okay. >> So I

00:04:15.088 --> 00:04:17.257
guess I'll tell you what he's
doing, while he's doing it,

00:04:17.257 --> 00:04:19.326
since he can't hold his
microphone and use computer at

00:04:19.326 --> 00:04:25.332
the same time. I know, I know.
You see in front of you a

00:04:28.368 --> 00:04:32.506
standard Windows image, Windows
8.1 fully patched, fully up to

00:04:32.506 --> 00:04:38.512
date. Nothing up my sleeve.
Nothing up my sleeve at all.

00:04:40.847 --> 00:04:44.050
What you don't see is the Kali
image running in the background

00:04:44.050 --> 00:04:48.021
in this machine that is going to
be capturing credentials, if

00:04:48.021 --> 00:04:54.027
we're lucky. Come on. Pray
harder. Demo gods. >> Like

00:05:07.607 --> 00:05:13.613
Santa. >> This doesn't look
good. Something is wrong with

00:05:17.851 --> 00:05:23.223
your disk. Mmm. I guess this is
the failure of putting demos at

00:05:23.223 --> 00:05:29.763
the beginning instead at the
end. Oh. Great. >> It's moving.

00:05:29.763 --> 00:05:35.769
It's working. That's good. All
right. So here we have a

00:05:40.307 --> 00:05:46.313
completely normal document, and
if I can just -- >> I'm just

00:05:50.517 --> 00:05:55.522
muttering to myself, don't
listen to me. >> Hey, there it

00:05:55.522 --> 00:06:00.460
is. [ Laughter ] >> You may be
at the wrong talk. >> That's

00:06:00.460 --> 00:06:06.466
funny. Do that. That's -- >>
Don't do that. That wasn't

00:06:11.938 --> 00:06:17.944
funny. Be meaner. Come on. [
Music playing ] [ Laughter ] >>

00:06:30.523 --> 00:06:36.529
Credit where credit is due.
Thank you. Thank you. He's

00:06:43.136 --> 00:06:48.541
available for parties, bar
mitzvahs, weddings. >> Web URL

00:06:48.541 --> 00:06:54.547
-- >> Put in your password. >>
I'm working on it, Pal. >> I

00:07:00.120 --> 00:07:06.126
swear it worked five minutes
ago. >> This is why -- [

00:07:17.203 --> 00:07:23.209
Laughter ] >> Oh. [ Applause ]
>> Yeah. >> No virus protection.

00:07:34.487 --> 00:07:40.493
This is how we roll at DEFCON,
am I right? Ooh, this is not

00:07:43.930 --> 00:07:48.601
good. We are waiting to enter
the password into the Kali Linux

00:07:48.601 --> 00:07:53.940
machine. >> I wish I had chosen
a less complex password. You

00:07:53.940 --> 00:07:57.177
know what? This is -- this is
not going well, so let's try

00:07:57.177 --> 00:08:02.949
this towards the end. >> We will
revisit the demos later. Back to

00:08:02.949 --> 00:08:08.955
the presentation. All right. So
-- >> Thank you. >> Thank you.

00:08:13.226 --> 00:08:19.232
The best demo you'll see at
DEFCON this year. >> We'll try

00:08:21.267 --> 00:08:26.006
again later on. Hopefully it
will work later, once it's

00:08:26.006 --> 00:08:30.377
finished thinking about it. So
there's already a number of

00:08:30.377 --> 00:08:33.580
formats that are known to allow
this. There's been some research

00:08:33.580 --> 00:08:39.085
into office document formats.
There's play list files, there's

00:08:39.085 --> 00:08:42.021
short cut files and that's
actually kind of an interesting

00:08:42.021 --> 00:08:44.958
vector because as soon as you
open up a folder with one of

00:08:44.958 --> 00:08:48.828
these files in it, it triggers
this interaction. Interestingly

00:08:48.828 --> 00:08:54.634
HTML, yeah, it's obvious you can
do remote references with this,

00:08:54.634 --> 00:08:58.271
and all -- >> Kind of the whole
point. >> Yes. You know.

00:08:58.271 --> 00:09:06.112
Hypertext. Not like calm
uncaffeinated text. And so you

00:09:06.112 --> 00:09:09.916
can also do NTLM references,
certain browsers, Internet

00:09:09.916 --> 00:09:15.021
Explorer will work. In Internet
Explorer, image source equals

00:09:15.021 --> 00:09:21.261
SMB URL and that's actually the
trigger, is when Windows tries

00:09:21.261 --> 00:09:26.232
to do SMB communication, if that
SMB service asks for

00:09:26.232 --> 00:09:28.968
authentication, Windows will
take your current cast

00:09:28.968 --> 00:09:32.472
credentials, whoever currently
logged in, authentication using

00:09:32.472 --> 00:09:38.478
those credentials. If you
receive an HTML formatted e-mail

00:09:44.350 --> 00:09:48.221
through Outlook and has images
that do the same sort of thing,

00:09:48.221 --> 00:09:52.425
referencing SMB share, this will
trigger the interaction as well.

00:09:52.425 --> 00:09:54.928
>> So that's what's been done in
the past. Let's talk a little

00:09:54.928 --> 00:09:57.730
bit what our research is focused
on. We were specifically

00:09:57.730 --> 00:10:03.002
targeting your average Windows
build. Your average user in a

00:10:03.002 --> 00:10:05.939
corporate environment is used to
opening at e-mail attachments

00:10:05.939 --> 00:10:10.143
much these are document formats,
media formats, images or audio

00:10:10.143 --> 00:10:14.547
and video and stuff like that.
Outlook stuff, meeting

00:10:14.547 --> 00:10:20.687
invitations, contact cards. We
wanted formats that the average

00:10:20.687 --> 00:10:23.189
corporate user is used to
receiving in their inbox every

00:10:23.189 --> 00:10:30.396
day and double clicking it
without thinking. >> So just a

00:10:30.396 --> 00:10:37.437
quick note here. Up at the top,
you'll see, like R type N, just

00:10:37.437 --> 00:10:43.776
-- this is some quick notations,
you know this particular format

00:10:43.776 --> 00:10:47.747
supports ordinary remote. MTLN
credential capture so PDF

00:10:47.747 --> 00:10:52.685
supports both, just a quick
note. So PDF, a couple different

00:10:52.685 --> 00:10:57.857
ways that we found. You can
actually embed remote images

00:10:57.857 --> 00:11:02.395
into PDFs, which is interesting.
A very interesting format. The

00:11:02.395 --> 00:11:08.401
1.3 specification 300, 400 pages
long, so it's a wonderful read,

00:11:11.337 --> 00:11:14.607
if you are, like, having trouble
sleeping on the plane. So -- so

00:11:14.607 --> 00:11:19.512
remote images. This is one of
the simplest ones, so you just

00:11:19.512 --> 00:11:25.785
embed a remote image in a PDF
and -- when you open it, it has

00:11:25.785 --> 00:11:30.390
to try to load that image, of
course. There's also JavaScript

00:11:30.390 --> 00:11:34.594
stored in PDF. Anybody out there
didn't know PDF supported

00:11:34.594 --> 00:11:39.199
JavaScript. >> All educated in
the PDF format. >> Probably in

00:11:39.199 --> 00:11:44.637
the right talk, good. You can
pop up a media player, and this

00:11:44.637 --> 00:11:51.611
supports SMB URLs. That's not --
UNC paths, and the same thing

00:11:51.611 --> 00:11:58.818
with git URL, a specific
JavaScript function. One really

00:11:58.818 --> 00:12:04.557
funny thing, Damon, I'll let you
talk about the warning. >> It

00:12:04.557 --> 00:12:07.227
does issue a warning, as soon as
you embed one of these -- SMB

00:12:07.227 --> 00:12:13.466
URL in your document. You're
trying to connect to post name,

00:12:13.466 --> 00:12:16.336
attacker.com, do you want to
allow this? What's funny, if

00:12:16.336 --> 00:12:19.539
you're familiar with UNC, you
might be familiar with long UNC.

00:12:19.539 --> 00:12:27.380
Slash, file. Long form UNC is
slash slash, question, slash

00:12:27.380 --> 00:12:30.316
host name, slash share name,
slash file. I don't know why it

00:12:30.316 --> 00:12:33.386
exists, but it does. And his you
can see by this cute error

00:12:33.386 --> 00:12:38.257
message, it says this document
is trying to connect, huh? Do

00:12:38.257 --> 00:12:41.527
you want to allow this? So, yes,
it's still a warning message and

00:12:41.527 --> 00:12:44.297
it's kind of funny we can make
it an obscure and bizarre

00:12:44.297 --> 00:12:49.736
warning message. >> I can't tell
if this is more or less shady,

00:12:49.736 --> 00:12:54.774
would you like to connect to
completely legitimate site.com?

00:12:54.774 --> 00:12:59.545
There you have it. >> So the
next file format we got a quick

00:12:59.545 --> 00:13:03.983
one was the RTF format. You
hopefully see a demonstration of

00:13:03.983 --> 00:13:07.387
later in our talk. This slide
wouldn't make much more sense if

00:13:07.387 --> 00:13:10.657
you already had seen the
demonstration. The technique

00:13:10.657 --> 00:13:15.128
used, you are allowed to embed
links to remote documents in an

00:13:15.128 --> 00:13:19.532
RFT file. I don't know why
that's the case, but it exists,

00:13:19.532 --> 00:13:23.936
so the cool thing about the RTF
concept we cooked up, Word and

00:13:23.936 --> 00:13:27.940
Word pad. Doesn't matter if they
have Office installed or not,

00:13:27.940 --> 00:13:35.882
I'm going to get credentials. It
does issue a warning, saying

00:13:35.882 --> 00:13:38.084
this document has links to
remote content, do you want to

00:13:38.084 --> 00:13:41.154
allow this? But the funny part
and the part you'll see in our

00:13:41.154 --> 00:13:45.091
demo in maintain, already sent
your credentials before shows

00:13:45.091 --> 00:13:50.129
the warning. So not the most
useful warning in the world,

00:13:50.129 --> 00:13:55.702
but, hey, what are you going to
do? >> So there's a -- an image

00:13:55.702 --> 00:13:59.105
format called SVG, scalable
vector graphics, contrast to

00:13:59.105 --> 00:14:04.243
traditional formats where you
have a bunch of data about the

00:14:04.243 --> 00:14:08.614
dimensions, the raw color data
encoded into some format, SVG is

00:14:08.614 --> 00:14:14.821
actually a sort of series of
instructions how to build the

00:14:14.821 --> 00:14:18.024
image, kind of like how HTML,
series of instructions what to

00:14:18.024 --> 00:14:22.862
put where. SVG is kind of
similar and what's interesting

00:14:22.862 --> 00:14:26.699
about SVG it looks a lot like
HTML, and it actually supports a

00:14:26.699 --> 00:14:32.939
subset of HTML and some of that.
So you can actually have remote

00:14:32.939 --> 00:14:39.145
style sheets, so you can import
a cascading style sheet from a

00:14:39.145 --> 00:14:42.381
remote location. And there's
also support for JavaScript in

00:14:42.381 --> 00:14:45.885
SVG, which is fucking hilarious
as well. >> Your images have

00:14:45.885 --> 00:14:49.756
JavaScript in them. >> Welcome
to the future. So SVG, you can

00:14:49.756 --> 00:14:56.963
use a UNC path, or rather a file
URL which basically, when you're

00:14:56.963 --> 00:15:02.001
referencing a remote host, file
path is for Windows is going to

00:15:02.001 --> 00:15:07.340
use SMB, right? So SVG we can
use that as well. >> So the next

00:15:07.340 --> 00:15:13.479
one, N3U -- basically all the
play list formats. The core goal

00:15:13.479 --> 00:15:16.182
of these formats is to have a
list of media files that will be

00:15:16.182 --> 00:15:19.318
played in sequential order, so
obviously these are going to be

00:15:19.318 --> 00:15:23.189
able to make remote references.
What is perhaps less obvious and

00:15:23.189 --> 00:15:25.491
maybe not such a great idea is
that they're allowed to

00:15:25.491 --> 00:15:29.262
reference UNC paths. I know for
a fact I've never had a play

00:15:29.262 --> 00:15:32.632
list that needed a legitimate
reference to UNC path. I can't

00:15:32.632 --> 00:15:37.069
imagine why that's a feature.
You open play list a we get your

00:15:37.069 --> 00:15:40.506
credentials. That's kind of
cool. >> Worth mentioning -- do

00:15:40.506 --> 00:15:46.512
you have a question, sir? >> [
Inaudible ] >> So the question

00:15:52.351 --> 00:15:55.922
is, is two factor authentication
a reasonable mitigation against

00:15:55.922 --> 00:15:59.358
this? My response, far too
complicated. This is a much

00:15:59.358 --> 00:16:04.130
simpler problem. You should do
this 100%, absolutely you should

00:16:04.130 --> 00:16:07.834
do that, but this is a much
lower level problem than that,

00:16:07.834 --> 00:16:11.270
right? It should not be the case
when you open a file format it

00:16:11.270 --> 00:16:13.439
is allowed to accepted your
credentials to a remote party.

00:16:13.439 --> 00:16:15.608
That should never happen. >>
Especially without your

00:16:15.608 --> 00:16:21.514
interaction. So it's worth
mentioning at this point that

00:16:21.514 --> 00:16:25.351
the handling of UNC paths is
sort of -- I'll get to you in

00:16:25.351 --> 00:16:28.454
just a moment, sir, I promise.
It's done at a different level

00:16:28.454 --> 00:16:34.260
than you might imagine, so the
parser that's working with an

00:16:34.260 --> 00:16:41.934
M3U or PLS, Windows, it's
expecting either a URL or a file

00:16:41.934 --> 00:16:46.305
path. Now, if you get -- if you
give it something that -- ally

00:16:46.305 --> 00:16:50.509
URL, doesn't start like HTTP
colon, slash, whatever, it's

00:16:50.509 --> 00:16:56.649
going to say, hey, Windows, you
handle this, right? So in -- in

00:16:56.649 --> 00:17:00.353
many places, where you're
calling out to some file, file

00:17:00.353 --> 00:17:04.557
path, pulling a file from a file
system, Windows is actually

00:17:04.557 --> 00:17:10.196
handling this, this is UNC path,
I know what to do with this. So

00:17:10.196 --> 00:17:13.900
what enabled us to do a lot of
these things, and just kind of

00:17:13.900 --> 00:17:18.371
mentioning this at random point,
I know, but Windows is actually

00:17:18.371 --> 00:17:21.507
going to handle this and not a
parser. The fact a lot of these

00:17:21.507 --> 00:17:25.978
support UNC path is not so odd
when you understand that. Now,

00:17:25.978 --> 00:17:31.984
we had a question. >> [
Inaudible ] >> Yeah. >> [

00:17:38.591 --> 00:17:40.593
Inaudible ] >> That is an
excellent question. The question

00:17:40.593 --> 00:17:44.196
is: Other than the default
parsers that we have shown, are

00:17:44.196 --> 00:17:47.700
other parsers also vulnerable.
My answer is, we don't know. We

00:17:47.700 --> 00:17:51.170
didn't check. >> We did do -- >>
We did look into it but it

00:17:51.170 --> 00:17:54.273
wasn't our primary focus. Our
core focus was your stock

00:17:54.273 --> 00:17:57.376
corporate build, which is going
to have Adobe Reader and it's

00:17:57.376 --> 00:18:00.613
going to probably have Internet
Explorer as the default browser,

00:18:00.613 --> 00:18:03.449
let's be honest. What I can tell
you is -- >> For PDF

00:18:03.449 --> 00:18:05.451
specifically we did look into
that more than any other format.

00:18:05.451 --> 00:18:08.054
I can tell you that most PDF
readers out there support only a

00:18:08.054 --> 00:18:12.258
small subset of the full PDF
functionality, because as I

00:18:12.258 --> 00:18:16.762
mentioned, flipping huge.
Actually huge. Crazy things in

00:18:16.762 --> 00:18:18.764
there. Great -- I mean we could
do an entire talk just about PDF

00:18:18.764 --> 00:18:20.766
and if you're interested in PDF
in all its weirdness, I can

00:18:20.766 --> 00:18:22.768
recommend -- by Julia Wolff.
Great talk. So great talk, if

00:18:22.768 --> 00:18:26.706
you want to look more into PDF.
But Chromes, PDF reader, I think

00:18:26.706 --> 00:18:30.776
it's just PDF.JS, Firefox's,
Mozilla, it doesn't support a

00:18:30.776 --> 00:18:35.715
wide range of things, so none of
these techniques work on

00:18:35.715 --> 00:18:39.986
Firefox's built in PDF reader,
Chrome's PDF reader, pretty much

00:18:39.986 --> 00:18:45.992
just Adobe products that will,
like, do the whole set of

00:18:51.097 --> 00:18:57.103
functionality. So these -- the
techniques we mentioned for PDF

00:19:01.140 --> 00:19:07.146
work on Adobe Reader and that's
what we've tested it on, so,

00:19:13.285 --> 00:19:19.358
good question. >> Okay. So the
next family of formats we looked

00:19:19.358 --> 00:19:22.161
at is the ASF family formats
which maybe you've never heard

00:19:22.161 --> 00:19:25.064
of, but some of the
implementations, Windows media

00:19:25.064 --> 00:19:31.404
audio, video, or your classic
ASF file. I know it may shock

00:19:31.404 --> 00:19:35.474
you, but your Windows media
video file has the ability to

00:19:35.474 --> 00:19:38.678
fetch from an URL when you open
it, which is incredibly bizarre.

00:19:38.678 --> 00:19:41.447
I can't imagine why this
functionality exists, you play a

00:19:41.447 --> 00:19:46.619
video file and retrieves
information -- it pops open your

00:19:46.619 --> 00:19:49.689
web browser to a remote URL,
which is completely insane, and

00:19:49.689 --> 00:19:53.893
since the average corporate
build, the default browser is

00:19:53.893 --> 00:19:57.296
going to be Internet Explorer
and Internet Explorer has the

00:19:57.296 --> 00:20:01.400
ability to fetch images from an
SN -- what this means is, you

00:20:01.400 --> 00:20:05.337
open our video file, and it
sends us credentials. Particular

00:20:05.337 --> 00:20:11.444
technique, URL exit. You're
allowed to embed scripts that

00:20:11.444 --> 00:20:14.613
are executed at a certain point
in the video file, so for

00:20:14.613 --> 00:20:17.950
instance, five seconds into the
video file, run this script.

00:20:17.950 --> 00:20:20.352
Traditionally this is used for
including closed caption

00:20:20.352 --> 00:20:25.257
information in a video file.
With URL, exit command it opens

00:20:25.257 --> 00:20:30.262
URL and the default browser and
stops play back of the media. >>

00:20:30.262 --> 00:20:33.833
So you can see how this might be
applicable to a bunch of

00:20:33.833 --> 00:20:36.435
different things and even if
your default browser isn't IE,

00:20:36.435 --> 00:20:42.441
opens -- I am a pirate.HTML --
you can see where I'm going with

00:20:44.577 --> 00:20:51.851
this, but it's kind of -- kind
of odd. So MP3, about the loss

00:20:51.851 --> 00:20:56.388
in a wind. MP3 by itself, very
simple format. You have a fixed

00:20:56.388 --> 00:20:59.692
size block of data which
defines, like, here's what the

00:20:59.692 --> 00:21:03.696
next block of audio is going to
be -- going to be like and this

00:21:03.696 --> 00:21:07.833
is what allows things like
variable bit rate. I want this

00:21:07.833 --> 00:21:13.806
bit rate. Block of metadata,
block of audio data. An

00:21:13.806 --> 00:21:17.176
extension, not MP3 but de facto
has become part of the standard,

00:21:17.176 --> 00:21:22.081
tagging format which is just
sort of tacked on to MP3 in

00:21:22.081 --> 00:21:26.519
modern context. So we looked
into ID3, some interesting stuff

00:21:26.519 --> 00:21:31.123
in there. There's a frame that
says, hey, there's -- the frame

00:21:31.123 --> 00:21:35.995
that's supposed to go here is
actually in this remote location

00:21:35.995 --> 00:21:40.866
and also the attached picture
frame, which is, like, you know,

00:21:40.866 --> 00:21:45.738
if you open up, you know,
Windows Explorer and you see,

00:21:45.738 --> 00:21:50.609
like, various pictures of Album
Art or whatever, when you look

00:21:50.609 --> 00:21:55.981
at MP3, that's because there's
an embedder in the MP3 file in

00:21:55.981 --> 00:22:00.519
the ID3 tag. So that actually
supports remote pictures as

00:22:00.519 --> 00:22:03.756
well. Unfortunately, with every
player we tried and we tried a

00:22:03.756 --> 00:22:07.326
lot of them, these features
don't work, so one of the things

00:22:07.326 --> 00:22:10.663
we learned throughout this is,
what the VRFC says, the parser

00:22:10.663 --> 00:22:14.867
actually supports are two
different things. We did find

00:22:14.867 --> 00:22:18.003
some interesting reading through
the ID3 spec though. You might

00:22:18.003 --> 00:22:22.841
be wondering why a brightly
colored fish as picture for this

00:22:22.841 --> 00:22:26.579
slide. It doesn't really seem to
make sense. That's because you

00:22:26.579 --> 00:22:30.015
can tell, in the APIC frame, you
can say what type of picture is

00:22:30.015 --> 00:22:34.787
actually being attached, and
there's like a number says what

00:22:34.787 --> 00:22:36.789
kind of picture and number 13 is
a brightly colored fish. >>

00:22:36.789 --> 00:22:43.729
Specification, people. >> I have
no idea. Another fun fact, own

00:22:43.729 --> 00:22:49.735
genre in ID3, so there you have
it. So at least reading the RFC

00:22:52.938 --> 00:22:57.810
wasn't a complete waste, had a
good laugh or two. >> Oh. Come

00:22:57.810 --> 00:23:02.982
on. >> I mean, everybody know,
but come on, be nice. >> That's

00:23:02.982 --> 00:23:08.587
hateful. >> So, yeah, but the
fun thing is, if you take

00:23:08.587 --> 00:23:14.126
something like a WMA file and
rename to MP3 and Windows media

00:23:14.126 --> 00:23:19.531
player consumes it, it's like,
oh, this is a WMA. Okay. You

00:23:19.531 --> 00:23:22.701
want me to pop up a URL? All
right. Sure. Here you go. Sort

00:23:22.701 --> 00:23:26.272
of a win, sort of a loss, you
know. >> So the next one we

00:23:26.272 --> 00:23:30.342
looked at kind of obvious,
actually, is torrent files. The

00:23:30.342 --> 00:23:33.579
whole point of these files is to
embed a list of trackers from

00:23:33.579 --> 00:23:36.482
which you can obtain peers to
down load a file. You would

00:23:36.482 --> 00:23:40.719
think, of course, it's going --
but what we found, that's a

00:23:40.719 --> 00:23:45.057
little bit more interesting, is
what are the implications of a

00:23:45.057 --> 00:23:48.494
torrent file that makes
arbitrary remote requests? So we

00:23:48.494 --> 00:23:51.096
-- we are in the process of
creating the one torrent file to

00:23:51.096 --> 00:23:54.667
rule them all, which is
basically one torrent file that

00:23:54.667 --> 00:23:57.870
has a list of every known
cross-site request, in standard

00:23:57.870 --> 00:24:02.341
home router that will go through
these URLs one after the other

00:24:02.341 --> 00:24:04.476
trying to pop a shell on your
router, as soon as you open this

00:24:04.476 --> 00:24:08.914
torrent files. Even though,
remote references, consider --

00:24:08.914 --> 00:24:11.083
they become much more
interesting. >> This is not so

00:24:11.083 --> 00:24:13.285
bad, though, because people
don't generally open torrents

00:24:13.285 --> 00:24:15.654
and leave them running on their
computer for hours or days. So

00:24:15.654 --> 00:24:18.891
it's not thatted ba. But, yeah.
We found an interesting thing as

00:24:18.891 --> 00:24:24.897
well. Support for URL seed, so
you can have, like, an FTP

00:24:32.604 --> 00:24:36.942
server or HTTP server to serve
as alternate seed in case the

00:24:36.942 --> 00:24:43.982
swarm -- in case there's no
peers. Or seeds active. But this

00:24:43.982 --> 00:24:48.053
is -- we weren't able to find
any players that supported this,

00:24:48.053 --> 00:24:53.225
so that's unfortunate. Next we
have the V card format, so this

00:24:53.225 --> 00:24:57.429
is kind of like -- like a
contact card, virtual contact

00:24:57.429 --> 00:25:00.933
card where you send somebody the
virtual equivalent of business

00:25:00.933 --> 00:25:02.935
card and then they have, you
know, your -- a picture of you,

00:25:02.935 --> 00:25:05.170
and your e-mail address and your
phone number and full name, all

00:25:05.170 --> 00:25:09.441
this wonderful stuff. One of the
interesting things that's in

00:25:09.441 --> 00:25:15.748
there is a free Bis URL, can
check or rather your calendar

00:25:15.748 --> 00:25:23.088
user agent can check to see when
is this fern free or busy? And

00:25:23.088 --> 00:25:29.028
normally this is specified as an
HTTP URL but as it turns out,

00:25:29.028 --> 00:25:35.334
you can use UNC path. So this
does require specific actions. I

00:25:35.334 --> 00:25:38.937
would need -- if you were to be
exploited by me using this, you

00:25:38.937 --> 00:25:42.508
would need to receive my contact
card, import it and then try to,

00:25:42.508 --> 00:25:45.310
like, see when I'm free or busy,
because that's when the

00:25:45.310 --> 00:25:49.381
interaction triggers. But you
know, any of you who have done

00:25:49.381 --> 00:25:52.551
any social engineering, this is
not necessarily a hard thing to

00:25:52.551 --> 00:25:55.320
do, like, hey, you know, I need
to have this meeting with you,

00:25:55.320 --> 00:25:58.023
please, you know, find some
availability, and you know,

00:25:58.023 --> 00:26:00.392
here's my contact card,
whatever. So -- >> The next

00:26:00.392 --> 00:26:07.032
format we looked at, I Cal
format, ICS. This is the

00:26:07.032 --> 00:26:09.301
standard, when you receive an
e-mail that says I want to

00:26:09.301 --> 00:26:11.403
schedule a meeting with you,
this is -- there's a decent

00:26:11.403 --> 00:26:15.707
chance the attached file is an
ICS file. This is another really

00:26:15.707 --> 00:26:20.612
sad instance of people not
following the RFC. Through this

00:26:20.612 --> 00:26:22.981
research we basically discovered
that three essential steps to

00:26:22.981 --> 00:26:28.987
building a parser. Step two,
forget everything you just read.

00:26:28.987 --> 00:26:32.891
Three, step the RFC on file,
write your parser however you

00:26:32.891 --> 00:26:39.364
want. So reading the ICS file
specification we found some very

00:26:39.364 --> 00:26:42.734
interesting and very scary items
that are included. You are

00:26:42.734 --> 00:26:46.071
allowed to set an alarm,
familiar when you set up a

00:26:46.071 --> 00:26:48.774
meeting. I want to be reminded
30 minutes before, I want to be

00:26:48.774 --> 00:26:53.445
reminded two days before,
whatever. These alarms have

00:26:53.445 --> 00:26:56.081
certain actions attached to
they, so 30 minutes before the

00:26:56.081 --> 00:26:58.817
meeting, I want an e-mail to be
sent to me. Thirty minutes

00:26:58.817 --> 00:27:01.720
before the meeting, I want a
little noise to play for my cell

00:27:01.720 --> 00:27:04.690
phone. Those are the different
options that are available in

00:27:04.690 --> 00:27:08.026
the alarm category. One option
that is actually kind of

00:27:08.026 --> 00:27:11.763
terrifying is called procedure,
which means run this program

00:27:11.763 --> 00:27:14.066
with these command line
arguments 30 minutes before the

00:27:14.066 --> 00:27:16.869
meeting. I don't know why that
would ever have a legitimate use

00:27:16.869 --> 00:27:19.471
case. I don't know why that's in
the format because to put you

00:27:19.471 --> 00:27:22.908
all at ease, none of the
calendar agents that we tested

00:27:22.908 --> 00:27:25.511
actually support that. So you're
not going to have calendar

00:27:25.511 --> 00:27:27.980
agents opening programs 30
minutes before a meeting,

00:27:27.980 --> 00:27:31.250
nothing crazy like that. >> I'm
kind of sad, kind of relieved.

00:27:31.250 --> 00:27:33.986
>> They got this one right. >>
You know, all right. >> It's

00:27:33.986 --> 00:27:39.291
great for trolling, because you
can define as many alarms as you

00:27:39.291 --> 00:27:43.762
want and it's defined by the
calendar invite itself. So if

00:27:43.762 --> 00:27:47.399
you want to say, like, yeah,
let's have a meeting in 30

00:27:47.399 --> 00:27:50.435
minutes and every single minute
from now until then pop up an

00:27:50.435 --> 00:27:56.275
alert and play an alarm sound,
like -- I haven't done that yet,

00:27:56.275 --> 00:28:00.612
but that's coming. So obviously
there's a bunch of different

00:28:00.612 --> 00:28:05.617
ways you could deliver these
documents. Obviously via e-mail.

00:28:05.617 --> 00:28:09.221
You could do this -- distribute
these on some open file share.

00:28:09.221 --> 00:28:14.393
You might have you know, let's
say that you compromised some

00:28:14.393 --> 00:28:16.461
site that you know a target is
going to be on, you might

00:28:16.461 --> 00:28:19.531
replace a document with a bug
version. Distribution, that's

00:28:19.531 --> 00:28:25.370
pretty obvious vector for this
sort of thing. And then we have

00:28:25.370 --> 00:28:28.073
Honeypot. So this is one of the
more interesting things we

00:28:28.073 --> 00:28:33.512
thought of as uses for this. So
let's say that you wanted to see

00:28:33.512 --> 00:28:35.581
if somebody had gotten into your
company's trove of, you know,

00:28:35.581 --> 00:28:41.587
documents. You might bug one of
them, like put a bugged file in

00:28:44.256 --> 00:28:49.428
there, like, you know, something
like salaries, 2016, .PDF or

00:28:49.428 --> 00:28:53.899
some such, and then, you know --
that that file has no legitimate

00:28:53.899 --> 00:28:56.168
usage, that doesn't actually
contain anything but when

00:28:56.168 --> 00:29:00.739
somebody you know, opens it,
huh, they're not supposed to do

00:29:00.739 --> 00:29:03.375
that and you get a notification
about that. So that's actually

00:29:03.375 --> 00:29:10.782
kind of an interesting, you know
-- use for this. Yeah. Like a

00:29:10.782 --> 00:29:14.353
Honey document. >> So we've
talked a little bit about what

00:29:14.353 --> 00:29:17.656
we're able to do. Now let's talk
about how we think this could be

00:29:17.656 --> 00:29:21.226
applied. One of the more
worrying potential uses for this

00:29:21.226 --> 00:29:26.698
is, future DRM, every time up
open this document it calls

00:29:26.698 --> 00:29:29.067
home. This is a little more
troubling than your standard

00:29:29.067 --> 00:29:32.771
DRM, only purpose is to prevent
you from playing or viewing a

00:29:32.771 --> 00:29:35.374
document when don't have
legitimate need for it. Goes

00:29:35.374 --> 00:29:39.111
beyond deterrence. They know who
you are, they know you tried to

00:29:39.111 --> 00:29:45.117
open it, so this is kind of
scary stuff. And this is --

00:29:47.786 --> 00:29:50.022
you're able to do this today.
Nothing is stopping this from

00:29:50.022 --> 00:29:55.894
happening today. >> So there's
sort of another side of data

00:29:55.894 --> 00:30:00.599
loss prevention. The honey
document idea, also the fact,

00:30:00.599 --> 00:30:05.070
let's say you're trying to, you
know, be a whistleblower, trying

00:30:05.070 --> 00:30:08.540
to leak what you feel is
information that should be

00:30:08.540 --> 00:30:15.013
public knowledge because of some
wrongdoing. And -- but you get,

00:30:15.013 --> 00:30:18.183
you know, like some important
document that's been bugged. And

00:30:18.183 --> 00:30:20.652
then you know, all of the
sudden, you know, the people who

00:30:20.652 --> 00:30:22.921
own this document who have
bugged this document see it

00:30:22.921 --> 00:30:25.891
opened from your work computer,
then your home computer, and

00:30:25.891 --> 00:30:29.494
then you know, wherever you
shared it, you know, all of the

00:30:29.494 --> 00:30:33.799
sudden this is known to this
party, this bugging, and you get

00:30:33.799 --> 00:30:39.538
disappeared. So that's a little
bit scary. >> So one of the most

00:30:39.538 --> 00:30:43.442
obvious implications of this,
deanonymization, if you've ever

00:30:43.442 --> 00:30:48.046
used -- you don't want people to
know you use it, if you've ever

00:30:48.046 --> 00:30:52.918
used it and ever downloaded a
fire through the tour browser

00:30:52.918 --> 00:30:55.854
bundle it will pop up this cool
little warning message that

00:30:55.854 --> 00:30:59.157
says, hey, we're going to parse
this file in an external

00:30:59.157 --> 00:31:02.294
application, there's a chance
this external application will

00:31:02.294 --> 00:31:05.197
unmask you because it might not
go through TOR, you should be

00:31:05.197 --> 00:31:09.601
very careful opening this file.
This research is the reason that

00:31:09.601 --> 00:31:12.637
warning exists. Take that
warning seriously. If you are

00:31:12.637 --> 00:31:16.675
opening files, they can track
you, even if you're using the

00:31:16.675 --> 00:31:20.412
TOR browser bundle. I think
you're safer for using the tails

00:31:20.412 --> 00:31:23.348
live CD because routes all
traffic through TOR. I don't

00:31:23.348 --> 00:31:25.951
know. I'm not an expert. Don't
listen to me. >> We actually --

00:31:25.951 --> 00:31:28.253
we're just going to leave now.
>> Yeah, we're done.

00:31:28.253 --> 00:31:34.259
Additionally, maybe you're
working for a government agency.

00:31:36.895 --> 00:31:40.832
You do not own or control the
Jihaddist, you are not

00:31:40.832 --> 00:31:45.170
administrator on the site, you
do have ability upload PDF file,

00:31:45.170 --> 00:31:48.707
how to make bomb in three easy
steps. Every one opens this

00:31:48.707 --> 00:31:54.713
file, you know they're
interested. So you

00:31:58.250 --> 00:32:01.987
deanonymization, that person. >>
We've mentioned this a billion

00:32:01.987 --> 00:32:06.992
times, at least, and definitely
not exaggerating there. But MTL

00:32:06.992 --> 00:32:11.396
credential capture, relay. I've
already discussed all of this,

00:32:11.396 --> 00:32:14.800
so this is sort of in here for
posterity but I'm going to move

00:32:14.800 --> 00:32:18.170
on, limited time and I really
want to try to get that demo to

00:32:18.170 --> 00:32:23.508
work, but for those of you who
are not aware of how NTLM

00:32:23.508 --> 00:32:27.412
relaying works, I'm going to go
over it really quickly. So

00:32:27.412 --> 00:32:30.582
there's obviously the fact if I
get your NTLM hash I can crack

00:32:30.582 --> 00:32:33.652
it, but what if you have a
strong password? This is the way

00:32:33.652 --> 00:32:37.823
it normally works. I say, hey,
server, I want to negotiate, I

00:32:37.823 --> 00:32:41.893
want to access whatever it is
you've got, whatever your -- and

00:32:41.893 --> 00:32:44.930
the server says, well, first
here's a number, mix it in with

00:32:44.930 --> 00:32:48.633
your hash and send it back to me
and so once that happens, you're

00:32:48.633 --> 00:32:51.837
authenticated. If you can get
somebody to try to authenticate

00:32:51.837 --> 00:32:53.872
to you, there's no
authentication. There's client

00:32:53.872 --> 00:32:59.878
authentication but no server
authentication. No -- to a

00:33:03.114 --> 00:33:06.718
particular server, just to the
client. Server doesn't have to

00:33:06.718 --> 00:33:12.724
authenticate itself. If I get a
connection from you, I then pass

00:33:16.595 --> 00:33:18.597
that along to the server and
pass the information back and

00:33:18.597 --> 00:33:20.599
forth, and I never have to learn
the password. I just have to get

00:33:20.599 --> 00:33:22.601
you to go through the steps,
give me access, at which point I

00:33:22.601 --> 00:33:24.603
tell you, sorry, no, that didn't
work, would you like to try

00:33:24.603 --> 00:33:28.006
again and then I pass it to a
different server. If I can get

00:33:28.006 --> 00:33:34.913
you to try to authenticate to me
via MTLM, I can to anybody, and

00:33:34.913 --> 00:33:38.416
actually multiple parties, so
that's fun. >> Something we've

00:33:38.416 --> 00:33:40.852
already discussed a little bit
but it's worth talking about in

00:33:40.852 --> 00:33:47.525
further detail. Cross-site
request forgery. They're inside

00:33:47.525 --> 00:33:51.429
your corporate firewall or on
home network, whatever. This

00:33:51.429 --> 00:33:54.733
means the person who crafted the
document is able to access these

00:33:54.733 --> 00:33:57.702
-- these resources in a limited
way. For instance, they could

00:33:57.702 --> 00:34:03.742
browse to your router, slash,
shut down,.HTML. Whatever. They

00:34:03.742 --> 00:34:07.545
will have the ability to send a
cross over attack, vulnerable

00:34:07.545 --> 00:34:10.015
device, as I discussed with the
torrent file. >> Sometimes as we

00:34:10.015 --> 00:34:16.021
discussed earlier, the format,
the parser that will initiate

00:34:18.690 --> 00:34:20.926
the southbound traffic will pop
up -- words. Pop open your

00:34:20.926 --> 00:34:26.932
default browser, and if you have
an authenticated session with

00:34:30.568 --> 00:34:35.440
some site, any site, in that
default browser, then it will

00:34:35.440 --> 00:34:37.909
ride on those credentials,
right, so you have -- your sort

00:34:37.909 --> 00:34:42.180
of classic sea surf attack
there. We thought about

00:34:42.180 --> 00:34:49.054
mitigations, we -- I don't think
we should spend too much time on

00:34:49.054 --> 00:34:52.757
this. But AV is not going to be
affected against this because

00:34:52.757 --> 00:34:57.095
there's too many different ways
to do this, too many formats,

00:34:57.095 --> 00:35:00.598
and there's a possibility of
false positives. It is

00:35:00.598 --> 00:35:04.069
legitimate functionality to have
remote images in PDFs. How

00:35:04.069 --> 00:35:07.806
legitimate? You know that's a
good question, but it is

00:35:07.806 --> 00:35:11.242
legitimate functionality. It's
in the spec, so having a remote

00:35:11.242 --> 00:35:15.213
image in a document isn't
necessarily bad. Like having one

00:35:15.213 --> 00:35:20.085
by one pixel image that is
transparent on an HTML page or

00:35:20.085 --> 00:35:23.822
e-mail, that's clearly for
tracking purposes, that's

00:35:23.822 --> 00:35:29.694
legitimate, question mark. So
not really effective defense.

00:35:29.694 --> 00:35:32.897
You could change the formats,
way too many formats and people

00:35:32.897 --> 00:35:36.735
are already, like, using the
formats as they are, so, like,

00:35:36.735 --> 00:35:39.204
you might be killing legitimate
functionality by changing the

00:35:39.204 --> 00:35:43.908
formats. Application level
firewalls are really good

00:35:43.908 --> 00:35:48.046
defense, something like little
snitch for OSX or zone alarm or

00:35:48.046 --> 00:35:52.717
leopard flower for Linux. These
are good mitigations against

00:35:52.717 --> 00:35:55.854
this for some things, so, I
don't ever want word pad to be

00:35:55.854 --> 00:35:59.991
talking to word server, I don't
ever want that, ever. So if I

00:35:59.991 --> 00:36:03.595
ever see that pop up in little
snitch, I'm going to say, fuck,

00:36:03.595 --> 00:36:08.667
no, absolutely not, but for
something like M3U, yeah, I want

00:36:08.667 --> 00:36:13.538
it to connect to last FM, or
whatever. So it's not a perfect

00:36:13.538 --> 00:36:17.342
solution. >> So a few other
mitigations we considered.

00:36:17.342 --> 00:36:20.745
Warnings. This is the classic
NCF, information security

00:36:20.745 --> 00:36:23.581
community. More warnings. So,
yes, you could have more

00:36:23.581 --> 00:36:26.384
warnings. We do want to see more
parsers that warn users, hey,

00:36:26.384 --> 00:36:28.920
this document is about to do
something kind of sketchy. This

00:36:28.920 --> 00:36:32.424
document is about to send
tracking information to a remote

00:36:32.424 --> 00:36:36.061
party. As we all in this room
are probably aware, every user

00:36:36.061 --> 00:36:40.565
clicks okay on every warning box
ever. It doesn't matter what it

00:36:40.565 --> 00:36:43.001
says. Warning box, opening this
file, we'll set your house on

00:36:43.001 --> 00:36:47.372
fire and they will still click
okay. That's why it's not a

00:36:47.372 --> 00:36:50.642
great mitigation. Additionally
we could do something that

00:36:50.642 --> 00:36:53.311
actually hooks the lower level
networking libraries. If ever

00:36:53.311 --> 00:36:57.315
used proxy chains, cool tool.
Routes all traffic from

00:36:57.315 --> 00:37:01.786
application, proxy, low level --
libraries. Unfortunately this

00:37:01.786 --> 00:37:04.989
isn't perfect either. First off
it's very difficult to set it

00:37:04.989 --> 00:37:08.159
up. It's kind of annoying.
Additionally, it doesn't work

00:37:08.159 --> 00:37:11.796
every application. For instance,
I think Chrome does not allow

00:37:11.796 --> 00:37:14.699
the use of proxy chains because
it prevents use of the LD free

00:37:14.699 --> 00:37:18.069
load command, which is how proxy
chains work on Linux at least.

00:37:18.069 --> 00:37:25.577
Egress filtering, you should be
blocking SMB traffic at your

00:37:25.577 --> 00:37:29.681
corporate perimeter. If you're
not doing that, you're behind

00:37:29.681 --> 00:37:34.786
the times. Egress filtering is
not perfect. You may be able to

00:37:34.786 --> 00:37:39.657
block SMB traffic. You can't
block HTTP traffic. Like every

00:37:39.657 --> 00:37:44.529
one blocking every firewall
ever. >> This is normally the

00:37:44.529 --> 00:37:49.901
point where we take questions,
I'm going to hope beyond hope

00:37:49.901 --> 00:37:56.207
that this demo will work now. >>
Demo gods, please be with us

00:37:56.207 --> 00:38:01.112
now. >> Let's give this a shot.
See if we can get this to work

00:38:01.112 --> 00:38:05.183
now. >> I guess I can take
questions while he's setting up

00:38:05.183 --> 00:38:08.920
the demo, so we'll do that to
save time. Any questions? Yes.

00:38:22.567 --> 00:38:24.569
>> [ Inaudible ] >> So the
question was, what tools are

00:38:24.569 --> 00:38:26.671
available to see what it's
trying to connect to when you

00:38:26.671 --> 00:38:30.542
open a file? The best one
application level firewalls. If

00:38:30.542 --> 00:38:33.545
you're on OSX, want to install
little snitch. When you open

00:38:33.545 --> 00:38:36.981
this PDF file, it's going to
say, PDF reader is trying to

00:38:36.981 --> 00:38:41.586
connect to remote host. Fuck,
no, I don't ever want that

00:38:41.586 --> 00:38:46.991
button. Says, no, never allow
this thing to connect to a

00:38:46.991 --> 00:38:50.161
remote server. That's OSX's
little snitch. On Window, zone

00:38:50.161 --> 00:38:57.101
alarm. On Linux, it's leopard
flower. Any other questions?

00:38:57.101 --> 00:39:03.041
Yes. >> [ Inaudible ] >> Going
to be a script? Oh, so the

00:39:11.816 --> 00:39:15.186
question is, do any of the
parsers support fetching

00:39:15.186 --> 00:39:18.056
something that might be a script
or executable code? Sort of

00:39:18.056 --> 00:39:24.062
would be my answer. Not
directly. But keeping in mind

00:39:24.062 --> 00:39:28.266
that for instance, what we --
the -- the stuff that we saw for

00:39:28.266 --> 00:39:31.269
the Windows media video files,
it opens your default browser

00:39:31.269 --> 00:39:36.040
and goes to a web page. Not
directly executing code but it's

00:39:36.040 --> 00:39:40.545
fairly -- it's common -- how to
exploit Internet Explorer to get

00:39:40.545 --> 00:39:44.649
code execution. That happens
regularly. You send the -- you

00:39:44.649 --> 00:39:49.320
give a video file that embeds a
link to your Metasploit file,

00:39:49.320 --> 00:39:55.526
not directly executing code. We
didn't find anything to do that.

00:39:55.526 --> 00:40:00.198
But there are paths to code
execution. Any other questions?

00:40:00.198 --> 00:40:06.204
Over there. >> [ Inaudible ] >>
Did we look at parsers for

00:40:08.973 --> 00:40:12.677
mobile platforms was the
question. Unfortunately, we did

00:40:12.677 --> 00:40:16.180
not research mobile platforms.
There's a good chance that a lot

00:40:16.180 --> 00:40:18.683
of these techniques are going to
work on a mobile platform. For

00:40:18.683 --> 00:40:21.753
instance, if you're using Adobe
Reader on your mobile, there's a

00:40:21.753 --> 00:40:24.622
good chance that the stuff we
found is still going to work.

00:40:24.622 --> 00:40:27.625
It's very common that -- it's
very common mobile versions of

00:40:27.625 --> 00:40:30.061
software are at least a few
versions behind. Adobe Reader

00:40:30.061 --> 00:40:33.231
you have on mobile might be out
of date and might -- it might

00:40:33.231 --> 00:40:35.233
not even show the same warnings
that your desktop client does.

00:40:35.233 --> 00:40:41.239
Any other questions? Yes. >> [
Inaudible ] >> So the question

00:40:51.316 --> 00:40:53.885
was, can some of these bugs be
mitigated through policy

00:40:53.885 --> 00:40:58.690
settings? The answer to that is,
some of them, yes. All of them,

00:40:58.690 --> 00:41:04.395
no. So, mmm -- I'm not exactly
sure which ones can. I'm pretty

00:41:04.395 --> 00:41:07.732
sure that the Windows media
video, Windows media audio stuff

00:41:07.732 --> 00:41:10.635
can be affected by group policy
but don't quote me on that. In

00:41:10.635 --> 00:41:15.940
general, no, group policy is not
an effective mitigation. That

00:41:15.940 --> 00:41:22.947
would be my answer. Any other
questions? Yes. >> [ Inaudible ]

00:41:22.947 --> 00:41:25.083
>> Was the question, what am I
going to get VM environment?

00:41:28.953 --> 00:41:33.124
Sure, so for the purposes of
these techniques we're showing

00:41:33.124 --> 00:41:36.094
today, VM is functionally
equivalent to a regular

00:41:36.094 --> 00:41:39.664
computer. If you open one of
these documents and it triggers

00:41:39.664 --> 00:41:43.768
SMB traffic I'm going to get the
credentials for that VM, so it

00:41:43.768 --> 00:41:48.005
doesn't really change when you
move to a VM, in general. Yes.

00:41:53.778 --> 00:41:55.913
>> [ Inaudible ] >> Are you
talking about the demo? [

00:41:55.913 --> 00:42:01.853
Laughter ] >> Sorry. Sorry. >> [
Inaudible ] >> I hate to harp on

00:42:16.801 --> 00:42:20.138
this because everyone harps on
this, but I think user education

00:42:20.138 --> 00:42:23.207
is a critical component to
fixing this problem. I know that

00:42:23.207 --> 00:42:25.476
there are a lot of debate
whether user education actually

00:42:25.476 --> 00:42:28.579
works but people need to know
this is dangerous. People

00:42:28.579 --> 00:42:31.149
opening a file can track you.
People need to understand

00:42:31.149 --> 00:42:34.819
implications of opening files,
even if doesn't have memory

00:42:34.819 --> 00:42:39.323
corruption exploit in it. I
think that's one of the most

00:42:39.323 --> 00:42:42.326
important things you can tell
your clients. User education,

00:42:42.326 --> 00:42:44.429
they need to understand that
this stuff is dangerous and that

00:42:44.429 --> 00:42:51.736
this stuff is out there. >> [
Inaudible ] >> Everyone opens

00:42:51.736 --> 00:42:59.143
every file, ever. So -- beyond
user education. You already

00:42:59.143 --> 00:43:01.379
mentioned egress filtering, I
think one of the best you can

00:43:01.379 --> 00:43:05.082
apply to corporate wide
mitigation but even that

00:43:05.082 --> 00:43:11.889
obviously, it isn't perfect.
Application level firewalls, I

00:43:11.889 --> 00:43:13.958
think that's the best answer I
can give and that's not a very

00:43:13.958 --> 00:43:19.964
good one, I'm sorry. Any other
questions? Yes. >> [ Inaudible ]

00:43:33.211 --> 00:43:36.414
>> As far as I'm aware, no.
There is no way to say, only

00:43:36.414 --> 00:43:40.051
authenticate -- the demo is
ready, so we'll take a bit more

00:43:40.051 --> 00:43:42.720
questions after the demo. >> All
right. So, charge. So we've got

00:43:42.720 --> 00:43:47.525
-- we've got an RTF file here.
I'm just going to open that real

00:43:47.525 --> 00:43:51.295
quick. And so we've got this
warning, hey, this document

00:43:51.295 --> 00:43:57.301
contains links to other files,
do you want to update? >> We

00:44:01.205 --> 00:44:03.608
don't want to do that. That
sounds sketchy. If I pull this

00:44:03.608 --> 00:44:09.714
over here, you can see that I've
already captured the hashes. So

00:44:09.714 --> 00:44:12.583
-- so that's -- >> It's like
closing the gate after the

00:44:12.583 --> 00:44:20.024
horses left the barn, am I
right? [ Applause ] >> So that

00:44:20.024 --> 00:44:24.428
-- oh, no, I don't think I want
to do that, actually. Not do

00:44:24.428 --> 00:44:30.201
that. So -- so let's go ahead
and close this. And then I'm

00:44:30.201 --> 00:44:35.873
going to open this. Let me just
clear my -- nothing up my sleeve

00:44:35.873 --> 00:44:41.712
here. I'm just going to clear
the -- I've got this cleared.

00:44:41.712 --> 00:44:44.749
I've got this cleared. And I'm
going to go ahead and open up

00:44:44.749 --> 00:44:49.120
this SVG. And you can see it
doesn't show anything, although

00:44:49.120 --> 00:44:53.291
we could make it show something.
And again, we have captured

00:44:53.291 --> 00:44:59.697
hashes. And from here, I'm just
going to go ahead and crack

00:44:59.697 --> 00:45:05.403
quickly, I've got like a crack
password here. So just going to

00:45:05.403 --> 00:45:11.409
run, John. So just run it
through John quickly, and made

00:45:16.814 --> 00:45:19.217
it a really easy password so
crack instantly, so don't have

00:45:19.217 --> 00:45:23.454
to wait a long time. >> Password
is also throw away, in case that

00:45:23.454 --> 00:45:29.460
wasn't obvious. >> Right. Again,
just to review, this not an

00:45:31.629 --> 00:45:36.968
exploit. This is features of
Windows, this is features of

00:45:36.968 --> 00:45:40.404
SVG. >> This is how it's
supposed to work. >> Yes, and

00:45:40.404 --> 00:45:47.378
this is what we get. Right. So
just by opening an -- image

00:45:47.378 --> 00:45:51.115
file, a video file, a -- a
document, even -- and this is,

00:45:51.115 --> 00:45:55.119
like, we don't have -- even have
Office installed. This worked in

00:45:55.119 --> 00:46:01.892
Word pad, right? So all of the
sudden, this happened. Right? So

00:46:01.892 --> 00:46:05.963
thank you for waiting patiently
for the demo to work. I'm glad

00:46:05.963 --> 00:46:13.371
it finally did. >> We finally
did it. [ Applause ] >> Thank

00:46:13.371 --> 00:46:15.373
you. Thank you very much.

