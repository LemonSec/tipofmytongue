00:00:00.100 --> 00:00:06.206
Today we're going to talk to you
about how to secure your

00:00:06.206 --> 00:00:10.644
infrastructure service
environment in one minute.

00:00:10.644 --> 00:00:14.815
Obviously our talk is not one
minute, but we'll try to secure

00:00:14.815 --> 00:00:20.020
in one minute. Obviously secure
already. So short introduction

00:00:20.020 --> 00:00:27.060
before we get into the details,
my name is Nir. And I'm a public

00:00:27.060 --> 00:00:33.367
speaker as well as managing the
security for the retail division

00:00:33.367 --> 00:00:40.707
within NCR. Here I'm speaking
about something that is my

00:00:40.707 --> 00:00:45.245
passion. And just one thing you
should know about me, I like

00:00:45.245 --> 00:00:50.884
sport but just not sweating
sport. I'll let Moshe introduce

00:00:50.884 --> 00:00:55.389
himself. >> Thank you for
coming. My name is Moshe, and

00:00:55.389 --> 00:01:00.227
actually I don't like sports,
but it's pretty much the same as

00:01:00.227 --> 00:01:04.331
not liking -- as liking not
sweating sports. I've been

00:01:04.331 --> 00:01:07.935
working with -- I've been
working with the innovation

00:01:07.935 --> 00:01:11.004
in Israel for the last couple of
years working with startups, we

00:01:11.004 --> 00:01:14.708
have a lot of startups in this
neck of the woods, as you

00:01:14.708 --> 00:01:17.811
probably know. And I've been
examining their challenges in

00:01:17.811 --> 00:01:20.314
the last couple of years how
they adapt cloud, how they

00:01:20.314 --> 00:01:23.350
handle cloud security and this
is where this stuff is coming

00:01:23.350 --> 00:01:27.254
from. From our experience,
regarding the new reduction of

00:01:27.254 --> 00:01:33.593
cloud services. Cloud and cloud
securities, such large words, I

00:01:33.593 --> 00:01:38.131
try to emphasize exactly what we
mean. I try to focus the talk.

00:01:38.131 --> 00:01:40.434
First of all, we're going to
talk about IaaS, infrastructures

00:01:40.434 --> 00:01:42.703
of service. Which Im pretty
sure you are familiar with this

00:01:42.703 --> 00:01:46.239
term. Infrastructures of
service, Amazon web service,

00:01:46.239 --> 00:01:50.978
AWS, Google Compute and Azure
backspace. Those are basically

00:01:50.978 --> 00:01:55.048
the providers that we talk
about. Inside infrastructures of

00:01:55.048 --> 00:01:59.186
service, there's a layer, it's a
relatively new layer, introduced

00:01:59.186 --> 00:02:02.055
in the last, I don't know, five
to six years. It's the

00:02:02.055 --> 00:02:06.393
orchestration layer. It's
basically the layer that enables

00:02:06.393 --> 00:02:10.964
the automation, allocating the
resources between the different

00:02:10.964 --> 00:02:15.202
cloud services. It's the layer
that will spin up your virtual

00:02:15.202 --> 00:02:20.807
machine, connect the instances,
connect a IP addresses, storage,

00:02:20.807 --> 00:02:25.946
basically a very important
layer, and it's also the one

00:02:25.946 --> 00:02:29.650
that needs to be addressed when
we talk about security. So if we

00:02:29.650 --> 00:02:32.586
want to focus what we're talking
about, we're talking about how

00:02:32.586 --> 00:02:38.091
to use orchestration in order to
increase the security in IS

00:02:38.091 --> 00:02:42.162
environments. And why do we need
this talk? What has changed?

00:02:42.162 --> 00:02:46.299
What is basically the attack
vectors we're talking about.

00:02:46.299 --> 00:02:49.736
What you see here is I basically
attack vector -- basically what

00:02:49.736 --> 00:02:52.873
you see attack vectors unique to
cloud or most amplified by the

00:02:52.873 --> 00:02:57.244
different cloud characteristics.
We not going to talk about all

00:02:57.244 --> 00:03:00.380
of them. We're going to focus on
three. Im going to give you a

00:03:00.380 --> 00:03:05.018
quick briefing, for the
background, we have the provider

00:03:05.018 --> 00:03:08.855
administration, again, someone
is managing our data. We have

00:03:08.855 --> 00:03:12.592
the management console, which
basically allows you to access

00:03:12.592 --> 00:03:18.698
the infrastructures of service
and it's a very wide dashboard.

00:03:18.698 --> 00:03:22.202
You can do so many things with
it. You can access almost every

00:03:22.202 --> 00:03:27.140
aspect of your organization.
Very scary, attack vector. We

00:03:27.140 --> 00:03:30.444
got multi tenant infrastructure
right, everything on

00:03:30.444 --> 00:03:33.914
infrastructure the service runs
on multi tenant environment

00:03:33.914 --> 00:03:36.016
using visualized software and
hardware, so basically it's also

00:03:36.016 --> 00:03:38.051
an attack vector. Not going to
talk about this one, theres a

00:03:38.051 --> 00:03:40.520
lot of talk about security, side
channels attack and stuff like

00:03:40.520 --> 00:03:43.824
this, different talk.
Automation, API. Everything is

00:03:43.824 --> 00:03:49.830
the cloud is API based
everything you do if dashboard

00:03:55.235 --> 00:03:58.371
you can do out of the dashboard,
and this is what usually most

00:03:58.371 --> 00:04:02.876
cloud programmers do and also
about automation, right? You

00:04:02.876 --> 00:04:07.114
move to the cloud in order to
automate stuff, also an attack

00:04:07.114 --> 00:04:11.118
vector we're going to talk
about. You buy software from a

00:04:11.118 --> 00:04:14.121
software service vendor he
builds the software on top of

00:04:14.121 --> 00:04:16.356
platform of service or
infrastructure of service, so

00:04:16.356 --> 00:04:18.658
you have to secure the entire
thing but not going to talk

00:04:18.658 --> 00:04:23.263
about this one either. Side
channel attacks, again, things

00:04:23.263 --> 00:04:27.434
come from virtual environment.
Insecure instances, in the

00:04:27.434 --> 00:04:32.706
cloud, it is very easy to launch
instances, spin up instances.

00:04:32.706 --> 00:04:36.810
Sometimes it's so easy we launch
them and we forget about them.

00:04:36.810 --> 00:04:39.479
We forget to hide them, we
forget to do all those important

00:04:39.479 --> 00:04:45.085
things we used to do in the
traditional environment. And of

00:04:45.085 --> 00:04:48.288
course, this was another thing
we are going to talk about. So

00:04:48.288 --> 00:04:50.924
we're going to focus on those
three attack vectors, the

00:04:50.924 --> 00:04:54.628
management, insecure instances
the automation and API. Let's

00:04:54.628 --> 00:04:58.732
take a look how those attack
vectors are being used in the

00:04:58.732 --> 00:05:02.469
real world attacks. Let's take
the story of browser, for

00:05:02.469 --> 00:05:06.640
instance. A couple of months
ago, the browser stack company,

00:05:06.640 --> 00:05:10.343
it's a software service company
installed on top of Amazon web

00:05:10.343 --> 00:05:15.448
service, which is basically the
IS provider for them. They were

00:05:15.448 --> 00:05:19.586
hacked, and this is what happens
this is how it went. An attacker

00:05:19.586 --> 00:05:23.590
found his way in through an
insecure instance, basically an

00:05:23.590 --> 00:05:27.894
instance they spin up couple
years ago, forgot about, it was

00:05:27.894 --> 00:05:33.099
standing there, with a shell
shock vulnerability. This is the

00:05:33.099 --> 00:05:37.003
exit sorry, this is the starting
point. Managed to go in. Found

00:05:37.003 --> 00:05:41.942
an API access key. API access
key is basically, if you give

00:05:41.942 --> 00:05:44.444
somebody an anti-access key,
about the same thing. Found an

00:05:44.444 --> 00:05:46.813
access key, managed to
whitelist, sorry, he managed to

00:05:46.813 --> 00:05:52.819
spin off new instance and white
list this instance in the fire

00:05:57.791 --> 00:06:05.465
walls. Once he has an instance
running with firewalls open, he

00:06:05.465 --> 00:06:11.404
attached backup disk. Inside the
backup disk we found a database

00:06:11.404 --> 00:06:15.609
connection string and basically
from there on, it's very simple

00:06:15.609 --> 00:06:18.612
how you move on to the
organization data. So again,

00:06:18.612 --> 00:06:20.614
attack vectors, insecure
instances, forgot to lock them

00:06:20.614 --> 00:06:22.616
down. Automation, API. All of
those tool stuff you can do like

00:06:22.616 --> 00:06:25.518
connect, backup disk. Whitelist
an IP address in the firewalls.

00:06:25.518 --> 00:06:31.524
Automation, APIs and of course,
the wide dashboard that allows

00:06:39.699 --> 00:06:45.171
you to do so many things, like
connecting backup disks, using

00:06:45.171 --> 00:06:48.341
-- changing firewalls for
instance, from the same

00:06:48.341 --> 00:06:51.444
dashboard. So those are the new
attack vectors that we want to

00:06:51.444 --> 00:06:54.414
cope with. And I say that we
don't good enough tools to do

00:06:54.414 --> 00:06:56.416
so. We have simply dont, we
haven't adopted the security to

00:06:56.416 --> 00:06:58.418
be -- to be good enough
environments. I say

00:06:58.418 --> 00:07:00.353
infrastructure and also new
software development

00:07:00.353 --> 00:07:02.355
methodologies that are coming. A
lot of software development and

00:07:02.355 --> 00:07:04.357
also infrastructure services
have been changed because of

00:07:04.357 --> 00:07:06.359
infrastructure service. We now
have other scaling. Once your

00:07:06.359 --> 00:07:08.361
server hits 80% CPU load, it
will replicate itself,

00:07:08.361 --> 00:07:10.363
automatically. We have entire
environment that are spinning

00:07:10.363 --> 00:07:12.365
up, processing, like 200 servers
spinning up at once, processing

00:07:12.365 --> 00:07:14.367
and terminating after ten, 20
minutes or even one hour. It's

00:07:14.367 --> 00:07:16.369
not something we use traditional
network, so accelerated

00:07:16.369 --> 00:07:18.371
lifecycle. We can see a lot of
environments that are, instead

00:07:18.371 --> 00:07:20.373
of upgrading them to new
versions, they are simply being

00:07:20.373 --> 00:07:22.375
terminated -- whoop, sorry, and
being launched with new

00:07:22.375 --> 00:07:24.377
instances, the new software. And
what is -- and one last thing,

00:07:24.377 --> 00:07:26.379
the infrastructure, the way you
charge the infrastructure is

00:07:26.379 --> 00:07:28.381
changing, because the provider,
started billing secretary every

00:07:28.381 --> 00:07:30.383
one hour, theyre reducing it.
So you can bigger servers for

00:07:30.383 --> 00:07:32.385
one minute or ten minutes, so it
gives the organization more

00:07:32.385 --> 00:07:34.387
incentive to lower the time that
the servers are up, and why is

00:07:34.387 --> 00:07:36.389
that a problem? Because so many
of our corrective controls and

00:07:36.389 --> 00:07:38.391
security are based on
maintenance windows, right? We

00:07:38.391 --> 00:07:40.393
do -- management, vulnerability
standing, penetration testing,

00:07:40.393 --> 00:07:42.395
all of this is done in periodic
maintenance testing, right?

00:07:42.395 --> 00:07:44.397
Sometimes two a day, sometimes
it's once a week, sometimes it's

00:07:44.397 --> 00:07:46.399
once in a month, sometimes it's
never. But you have a

00:07:46.399 --> 00:07:51.204
maintenance cycle, and how can
you do maintenance windows if

00:07:51.204 --> 00:07:54.941
your server only alive for one
hour or two or three hours?

00:07:54.941 --> 00:07:59.245
Security is not adapted to those
environments. And what happens?

00:07:59.245 --> 00:08:03.750
Companies are moving to the
cloud, because security --

00:08:03.750 --> 00:08:05.752
sorry, companies are moving to
the cloud because infrastructure

00:08:05.752 --> 00:08:07.754
will not slow them down. What
happens next? Security slows

00:08:07.754 --> 00:08:10.924
them down. You know what happens
if security slows you down.

00:08:10.924 --> 00:08:14.894
Companies will simply give up on
it. This is the problem we think

00:08:14.894 --> 00:08:16.896
to solve, asking the security
community to attack new

00:08:16.896 --> 00:08:18.898
methodologies, it's not even
about tools, it's a new way of

00:08:18.898 --> 00:08:20.900
thinking. Who do we automate
securities in that charge.

00:08:20.900 --> 00:08:22.902
Developers learn how to automate
software deployment, software

00:08:22.902 --> 00:08:24.904
testing, yes way behind. So
we started Cloudefigo.

00:08:24.904 --> 00:08:26.906
Cloudefigo is an open source,
you can download from link --

00:08:26.906 --> 00:08:28.908
the link is here. It's on
GitHub. Everybody can download

00:08:28.908 --> 00:08:30.910
and take a look at it. By the
way, it's based on the work from

00:08:30.910 --> 00:08:32.912
Rich Mater.. I don't know if
he's in the audience, but if he

00:08:32.912 --> 00:08:34.914
is, the entire credit goes to
him, and so Cloudefigo is a tool

00:08:34.914 --> 00:08:36.916
about automating the processes
that were mentioned. >> We

00:08:36.916 --> 00:08:38.918
understood importance of
creating a tool, so we decided

00:08:38.918 --> 00:08:40.920
to invest in it, so basically,
we're investor in that, invested

00:08:40.920 --> 00:08:42.922
the whole $5 in the logo. >> I
hope you appreciate it. [

00:08:42.922 --> 00:08:44.924
Laughter ] Okay. So this the
tool that we started. It's

00:08:44.924 --> 00:08:46.926
called Cloudefigo, and in the
end we give details about

00:08:46.926 --> 00:08:48.928
everybody who wants to
contribute but first of all,

00:08:48.928 --> 00:08:50.930
let's talk about, what does it
do? So it's basically automates

00:08:50.930 --> 00:08:52.932
instance lifecycle, instance
operations in the cloud. I mean,

00:08:52.932 --> 00:08:54.934
we talking about how to launch
servers, low security

00:08:54.934 --> 00:08:56.936
configuration, encrypt, scan for
vulnerabilities, right, all of

00:08:56.936 --> 00:08:58.938
those stuff which require --
usually require maintenance

00:08:58.938 --> 00:09:00.874
windows and then move into
production. What we going to do

00:09:00.874 --> 00:09:02.876
next is basically show you a
couple of those steps and what

00:09:02.876 --> 00:09:04.878
we do in those steps, but first
of all, let's talk about the

00:09:04.878 --> 00:09:09.149
components that we used in order
to do cycle. You can change any

00:09:09.149 --> 00:09:12.085
of those components, components
that you use, simply chose

00:09:12.085 --> 00:09:15.055
those, usually because either
they're Free Open Source or

00:09:15.055 --> 00:09:19.759
because our environment was
Amazon Web Services but you can

00:09:19.759 --> 00:09:24.531
definitely with little changes
migrate it to other vendors. So

00:09:24.531 --> 00:09:29.736
what is the lifecycle? What is
this accelerated -- what is the

00:09:29.736 --> 00:09:33.907
component inside this
accelerated lifecycle? We as

00:09:33.907 --> 00:09:39.779
object storage, in this case,
Amazon S3, you can any other

00:09:39.779 --> 00:09:43.583
object storage coming from other
vendors. We use vulnerability

00:09:43.583 --> 00:09:49.122
scanning, in order to make sure
that the instance is ready to go

00:09:49.122 --> 00:09:54.627
to production. In this case, we
use NAS, you can even use audix,

00:09:54.627 --> 00:09:58.465
cameras, today there are IWS
aware connect, connecting with

00:09:58.465 --> 00:10:03.603
APRs can give you some benefits.
We use cloud init. Cloud Init

00:10:03.603 --> 00:10:05.672
can give you the perfect tool
for automation, if you're not

00:10:05.672 --> 00:10:07.674
familiar, invest five minutes to
read. Allows you to run scripts,

00:10:07.674 --> 00:10:09.676
a route permissions when the
server is launching, so it's a

00:10:09.676 --> 00:10:11.678
great place to put in your --
basically granular adopted

00:10:11.678 --> 00:10:13.680
scripts for your environment.
For configuration management, we

00:10:13.680 --> 00:10:15.682
are loading Chef, you can use
either -- you can use any other

00:10:15.682 --> 00:10:17.684
software configuration
management. We just use chef,

00:10:17.684 --> 00:10:19.686
for our purposes it's very
convenient and free. We use 

00:10:19.686 --> 00:10:21.688
basically Amazon name for
permissions for servers, you

00:10:21.688 --> 00:10:23.690
give permission to different
servers because servers interact

00:10:23.690 --> 00:10:25.692
with the console, right? Usually
talk about permissions and

00:10:25.692 --> 00:10:27.694
roles, we talk about users to
dashboard. Amazon and  can

00:10:27.694 --> 00:10:29.696
give permissions to instances to
servers. What they can do with

00:10:29.696 --> 00:10:31.698
their Amazon APIs, what they can
do inside Amazon environment. A

00:10:31.698 --> 00:10:33.700
lot of it -- research we did, a
lot of the development we did

00:10:33.700 --> 00:10:35.702
was in order to make sure that
we have the right configuration

00:10:35.702 --> 00:10:37.704
and basically access controls
and we'll elaborate a little bit

00:10:37.704 --> 00:10:39.706
more later. And we do volume
encryption. Cloud goes into

00:10:39.706 --> 00:10:41.708
encryption by default, right?
The only question is, how you do

00:10:41.708 --> 00:10:43.710
the encryption, we demonstrate a
way how to automate creation and

00:10:43.710 --> 00:10:45.712
also giving the keys, Im not
talking about -- basically what

00:10:45.712 --> 00:10:47.714
I'm talking about is volume
encryption, not encryption in

00:10:47.714 --> 00:10:49.716
the database, I'm talking about
encryption, encrypting basically

00:10:49.716 --> 00:10:51.718
volume. What will be in the
volume? Usually you install your

00:10:51.718 --> 00:10:53.720
database into that encrypted
volume. Nothing -- that can

00:10:53.720 --> 00:10:55.722
happen to you, that somebody can
get ahold, not be able to

00:10:55.722 --> 00:10:57.724
snapshot, right? You will not be
able to use the data inside of

00:10:57.724 --> 00:10:59.726
it. So this is the lifecycle
that we're talking about. We are

00:10:59.726 --> 00:11:01.661
talking about how to launch an
instance, updating it,

00:11:01.661 --> 00:11:03.663
controlling it, scanning it,
moving it to production, and

00:11:03.663 --> 00:11:05.665
then terminate it. Basically the
lifecycle of every average cloud

00:11:05.665 --> 00:11:07.667
service. What we do now is
basically offer you those steps,

00:11:07.667 --> 00:11:09.669
those phases, and then give you
a quick demo on each one of

00:11:09.669 --> 00:11:11.671
them. So when you launch an
instance, every machine handles

00:11:11.671 --> 00:11:13.673
its own encryption keys. It
started by a remediation, when

00:11:13.673 --> 00:11:15.675
machine is launched, it started
in remediation group. Only when

00:11:15.675 --> 00:11:17.677
it's ready will it be moved to
production group. Basically,

00:11:17.677 --> 00:11:19.679
it's a methodology we know from
network access controls, right?

00:11:19.679 --> 00:11:21.681
Network access controls prevents
workstations from connecting to

00:11:21.681 --> 00:11:23.683
your corporate line, right? How
they do it, make sure you're

00:11:23.683 --> 00:11:25.685
okay, and when you're okay, they
move you to production line, or

00:11:25.685 --> 00:11:27.687
users line. Management of those
attributes usually require

00:11:27.687 --> 00:11:29.689
permissions. So we start and
usually those permissions are

00:11:29.689 --> 00:11:31.691
higher when you're talking about
the launching phase, and

00:11:31.691 --> 00:11:33.693
production, you want as little
permission as possible. Create

00:11:33.693 --> 00:11:36.429
something that is called --
experiment a little bit what you

00:11:36.429 --> 00:11:38.498
did over there? >> Yeah, so
basically, since we wrote the

00:11:38.498 --> 00:11:40.500
API codes, to Amazon, we know
API codes we have in the code,

00:11:40.500 --> 00:11:45.939
so therefore we created a list
of the -- of the permissions

00:11:45.939 --> 00:11:50.510
that we need during launching
instance but actually, we

00:11:50.510 --> 00:11:55.748
created the concept, new concept
that at least we call it, so

00:11:55.748 --> 00:11:58.318
basically, when launch -- when
launch an instance, we can

00:11:58.318 --> 00:12:00.253
assign only one role, or very
specific role to this instance

00:12:00.253 --> 00:12:02.255
on Amazon and we won't be able
to change the role. That's how

00:12:02.255 --> 00:12:04.257
Amazon works, so that's the
reason why we decided to just

00:12:04.257 --> 00:12:06.259
edit the role when moving to
production. On production, we

00:12:06.259 --> 00:12:08.261
won't need permission such as, I
don't know, instance from

00:12:08.261 --> 00:12:10.263
remediation to production, or
put encryption key on the

00:12:10.263 --> 00:12:12.265
storage, won't need it. And
that's the reason why we --

00:12:12.265 --> 00:12:14.267
we're introducing the
permissions later, I'll

00:12:14.267 --> 00:12:16.269
demonstrate it. >> This is how
the role looks like at the

00:12:16.269 --> 00:12:18.271
launch phase. A lot of different
IPUs, it gives a lot of wide

00:12:18.271 --> 00:12:20.273
permission. Later on, when the
server is moving through

00:12:20.273 --> 00:12:22.275
production, it is much reduced.
And launch, again, cloud in it,

00:12:22.275 --> 00:12:24.277
as I said, great thing to
automate. When the instance is

00:12:24.277 --> 00:12:26.279
launched, we simply inject all
the scripts we want into the

00:12:26.279 --> 00:12:28.281
launching phase. Sometimes
people ask you why we didnt

00:12:28.281 --> 00:12:30.283
try to find image. Try to find
image which basically its

00:12:30.283 --> 00:12:32.285
going to contradict the idea,
the idea of automation because

00:12:32.285 --> 00:12:34.287
each time theres a new patch,
you need to prepare a new image.

00:12:34.287 --> 00:12:36.289
We prefer to use latest images
and do the initialization script

00:12:36.289 --> 00:12:38.291
when the server is launching. >>
This is -- at this point, show

00:12:38.291 --> 00:12:40.293
how it works. >> So before I'm
starting -- well, you know that

00:12:40.293 --> 00:12:42.295
all people at DEFCON, not
connecting to the Wi-Fi. So all

00:12:42.295 --> 00:12:44.297
the AT & T, Verizon networks
basically flooded, so we hope

00:12:44.297 --> 00:12:46.299
our online demo will work, if
not well have to backup. But

00:12:46.299 --> 00:12:48.301
that's fine. So as for example,
basically I want to start with

00:12:48.301 --> 00:12:52.538
explaining what we have with a
Cloudefigo tool. Wow, that's

00:12:52.538 --> 00:12:57.243
big. So basically we developed
the tool named Python, since we

00:12:57.243 --> 00:13:01.014
want to have API codes,
basically its exposed by 

00:13:01.014 --> 00:13:06.552
and now we just starting server.
On this server, we have our own

00:13:06.552 --> 00:13:08.688
API code to let's say to just
launch an instance. So we'll

00:13:08.688 --> 00:13:14.694
just go and launch an instance.
So when launching this instance,

00:13:16.796 --> 00:13:19.065
it takes time. We'll see,
actually creating a new role,

00:13:19.065 --> 00:13:22.201
Amazon IAM, but then we need to
launch an instance with this

00:13:22.201 --> 00:13:24.804
role. Amazon has a pretty wide
infrastructure takes time to

00:13:24.804 --> 00:13:27.674
synchronize between the IAM role
that just created a moment ago

00:13:27.674 --> 00:13:30.543
with instance tried to create --
so basically that's the reason

00:13:30.543 --> 00:13:33.179
why we have time-outs, pretty
common when you get into

00:13:33.179 --> 00:13:35.515
developments with Amazon,
youll see that there are few

00:13:35.515 --> 00:13:38.384
timers here and there just to
make sure that works. And

00:13:38.384 --> 00:13:41.788
eventually we see that we have
here 200, so we should be good

00:13:41.788 --> 00:13:45.458
to go. So now I connected to the
Amazon Web Services. Okay. And

00:13:45.458 --> 00:13:48.161
we can see that we have here a
new instance called secured

00:13:48.161 --> 00:13:52.131
instance. This is the instance
that eventually going to start,

00:13:52.131 --> 00:13:56.502
and be the secure instance down
the road, so when now starting

00:13:56.502 --> 00:14:00.473
the whole process we can see
that when start have remediation

00:14:00.473 --> 00:14:03.676
service group, which is where
starting, and also have role

00:14:03.676 --> 00:14:05.878
that we created. It's a pretty
long name here. So I'll just

00:14:05.878 --> 00:14:11.884
click it. And I want to see the
list of what I am allowed

00:14:30.069 --> 00:14:33.339
access, so basically go to the
policy, you can see that it's a

00:14:33.339 --> 00:14:35.942
pretty long list of what I'm
allowed to do, but later we will

00:14:35.942 --> 00:14:38.144
reduce it. So I'll let Moshe
continue with our explanation.

00:14:38.144 --> 00:14:40.146
>> By the way, were sorry
that the screen resolution is

00:14:40.146 --> 00:14:42.515
low, so you don't see the entire
screens but those of you

00:14:42.515 --> 00:14:44.517
familiar with Amazon probably
understand where we are. Those

00:14:44.517 --> 00:14:46.519
of you who are not, we're
looking at the instances, launch

00:14:46.519 --> 00:14:48.721
and IM roles screen, two Amazon
but two different models. Okay.

00:14:48.721 --> 00:14:51.624
Moving on. The instance is
launched. As we speak, it's

00:14:51.624 --> 00:14:53.926
basically initializing itself.
What happens next, update OS.

00:14:53.926 --> 00:14:57.230
Again, we don't have instances
to do management that we need to

00:14:57.230 --> 00:14:59.532
do, we do it on spot. We do,
upgrade to our packages,

00:14:59.532 --> 00:15:03.136
basically through that cloud in
its script we install other,

00:15:03.136 --> 00:15:08.274
everything we need for this --
for the cloud to move on. Want

00:15:08.274 --> 00:15:12.078
to explain what kind of things
you have over there? >> Yeah, so

00:15:12.078 --> 00:15:14.147
again, since we are using
python, we have basic packages,

00:15:14.147 --> 00:15:16.449
we have python wheel, basically
want to have -- pretty quick

00:15:16.449 --> 00:15:18.451
installations, Amazon SDK,
already mentioned components we

00:15:18.451 --> 00:15:20.453
have, and management component.
And also have our scripts on S3

00:15:20.453 --> 00:15:22.555
that only all of these instances
allow to access through the

00:15:22.555 --> 00:15:24.557
scripts, and download them,
because we may have some

00:15:24.557 --> 00:15:26.592
configurations that may be
secret or you can define what

00:15:26.592 --> 00:15:29.262
you want to have there. So
thats the reason we also

00:15:29.262 --> 00:15:31.264
remediated the access, the
access control. Okay. So -- oh,

00:15:31.264 --> 00:15:37.904
you jumped. Okay. Okay. The next
phase, phase nothing to show in

00:15:37.904 --> 00:15:40.840
demo, right, so skip, install
things, and upgrade, no point

00:15:40.840 --> 00:15:44.377
showing you those packages are
installed. The next phase is the

00:15:44.377 --> 00:15:48.247
phase that I take this new
instance, and I harness it, I

00:15:48.247 --> 00:15:51.784
put it under my control system.
Again, usually when it happens

00:15:51.784 --> 00:15:55.988
in the real world and not --
network, the IT guys finish to

00:15:55.988 --> 00:15:59.192
install servers, move to
security guys, wait a couple of

00:15:59.192 --> 00:16:01.727
weeks, the security guys do the
hardening, configuration,

00:16:01.727 --> 00:16:04.931
install the antivirus software,
all that stuff is really slowing

00:16:04.931 --> 00:16:08.801
down the progress. We want to do
them really fast, including all

00:16:08.801 --> 00:16:12.672
those tasks security guys need
to do. What we did, basically at

00:16:12.672 --> 00:16:16.542
this point, we -- the cloud init
installs chef client, chef again

00:16:16.542 --> 00:16:19.779
configuration management shows
you what to do. Build a receipt,

00:16:19.779 --> 00:16:23.316
a recipe, sorry, a recipe
basically a list of packages and

00:16:23.316 --> 00:16:27.386
commands that you want to run.
We attach the recipe to the

00:16:27.386 --> 00:16:33.392
servers, and then downloads
everything we need from the

00:16:42.535 --> 00:16:48.541
secure point of view. There's a
lot of chef recipes in GitHub or

00:16:52.545 --> 00:16:58.551
everywhere else. You can use
them to automate almost every

00:17:02.221 --> 00:17:08.227
aspect of your operations. So
once the client is registered,

00:17:17.603 --> 00:17:20.940
the policy is downloading, and
then we -- what we do is

00:17:20.940 --> 00:17:23.843
generate an encryption keys. As
I said, the goal of encryption

00:17:23.843 --> 00:17:27.013
is basically to protect the
disk. Inside the disk, probably,

00:17:27.013 --> 00:17:29.015
you'll have your application
files or database, doesn't

00:17:29.015 --> 00:17:31.117
really matter. We use DEM crypt,
basically utility for Linux,

00:17:31.117 --> 00:17:33.586
very common, you can use any
other utilities out there for

00:17:33.586 --> 00:17:36.255
Windows or Linux, but the idea
here is where you store the

00:17:36.255 --> 00:17:38.291
keys. Usually when you are
working for infrastructure to

00:17:38.291 --> 00:17:40.993
service, you have a couple of
options. You can save it with

00:17:40.993 --> 00:17:43.462
the cloud provider, right? Some
of the cloud provider will even

00:17:43.462 --> 00:17:46.165
give you places that you can
store keys. It's okay, but it's

00:17:46.165 --> 00:17:48.167
still vulnerable to some attacks
like malicious insider inside

00:17:48.167 --> 00:17:50.202
the cloud provider, or basically
subpoena from government or

00:17:50.202 --> 00:17:53.472
other court orders for stuff
like this. It basically good

00:17:53.472 --> 00:17:59.612
enough for configuration,
organization might not be good

00:17:59.612 --> 00:18:05.551
enough for other organizations.
You can save it on premise,

00:18:08.621 --> 00:18:14.627
right? You control the keys.
Then you can control who has

00:18:18.631 --> 00:18:24.637
access to it. You put it on --
but then you have to think how

00:18:28.140 --> 00:18:30.276
you transferred the keys in and
out of the cloud. Therefore you

00:18:30.276 --> 00:18:32.278
expose it again, every -- every
method has pros and cons, right?

00:18:32.278 --> 00:18:34.280
So -- probably if you're a bank,
you want to keep the encryption

00:18:34.280 --> 00:18:36.282
keys in your hands, and transfer
it somehow to the cloud,

00:18:36.282 --> 00:18:38.284
transfer temporary key to the
cloud. You can also use a third

00:18:38.284 --> 00:18:40.286
party. Third party can be a key
escort service. Today we have

00:18:40.286 --> 00:18:42.288
companies that provide you HSM
escort service to put the keys.

00:18:42.288 --> 00:18:44.290
This way it can protect you also
from government, at some point,

00:18:44.290 --> 00:18:46.292
yeah, because government work
has to come to both cloud

00:18:46.292 --> 00:18:48.294
providers, which complicates it.
But again, you need to move the

00:18:48.294 --> 00:18:50.296
keys between the different
providers so again, every method

00:18:50.296 --> 00:18:52.298
has its pros and cons. It's
basically defended on your

00:18:52.298 --> 00:18:54.300
threat analysis. What we did
here, in Cloudefigo, we built a

00:18:54.300 --> 00:18:56.302
system that allows to be very
flexible. In what we show here,

00:18:56.302 --> 00:18:58.304
we keep the key in a special
place inside S3, object storage.

00:18:58.304 --> 00:19:00.239
You can very easily, if you're
working Amazon, you can very

00:19:00.239 --> 00:19:02.241
easily migrate the application
to keep the keys in a different

00:19:02.241 --> 00:19:04.243
cloud provider, like Google
compute engine and do third

00:19:04.243 --> 00:19:06.245
parties or in your premises. In
order to make sure that the keys

00:19:06.245 --> 00:19:08.247
are, I would say good enough
security with them, and it's not

00:19:08.247 --> 00:19:10.249
bulletproof, but quite
protected, basically a system,

00:19:10.249 --> 00:19:12.251
Nir will explain, how works
those keys on object storage. >>

00:19:12.251 --> 00:19:14.253
So I'll just translate good
enough. Good enough equals

00:19:14.253 --> 00:19:16.255
annoying. Okay? So want to make
it annoying enough for anyone to

00:19:16.255 --> 00:19:18.257
access the keys. So basically,
we put our keys on S3 on the

00:19:18.257 --> 00:19:20.259
object storage on Amazon. What
actually doing, were

00:19:20.259 --> 00:19:22.261
launching the instance,
generating a key, and we're not

00:19:22.261 --> 00:19:24.263
storing the key anywhere on the
instance. Basically creating a

00:19:24.263 --> 00:19:26.265
key, NID, and using the ID,
which is basically combination,

00:19:26.265 --> 00:19:28.267
with a few perimeters we get
from the instance, like NET

00:19:28.267 --> 00:19:30.269
address, instance ID and a few
things that are not changed on

00:19:30.269 --> 00:19:32.271
the instance we create actually
a bucket with this name, so it's

00:19:32.271 --> 00:19:34.273
a hash. Its pretty hard to
guess that but you can reverse

00:19:34.273 --> 00:19:36.275
the code. Again, it's annoying,
but you can do that, but

00:19:36.275 --> 00:19:38.277
eventually when you'll get into
the object storage, and when you

00:19:38.277 --> 00:19:40.279
get the name of the object
storage, that stores the key,

00:19:40.279 --> 00:19:42.281
you will also need to face with
two things. One, you'll have to

00:19:42.281 --> 00:19:44.283
access the storage with the same
account that is running this

00:19:44.283 --> 00:19:46.285
instance, this is one thing. And
the second thing is actually a

00:19:46.285 --> 00:19:48.287
per editor that we had that we
added to each request, when it

00:19:48.287 --> 00:19:50.289
goes to the -- out to the
storage, and this -- 512 of

00:19:50.289 --> 00:19:52.291
additional data that we
generated, so basically, you can

00:19:52.291 --> 00:19:54.293
try to get access to these
object storage. It would be

00:19:54.293 --> 00:19:56.295
annoying, really. Okay. So
basically what we did is

00:19:56.295 --> 00:19:58.297
creation of a dynamic policy on
S32, so we have also dynamic

00:19:58.297 --> 00:20:00.299
policy with -- with account name
and 512. Lets just do the

00:20:00.299 --> 00:20:02.301
demo. I'll move to my spot. So
here first of all, just proved

00:20:02.301 --> 00:20:04.303
we succeeded to connect the
server to chef. It's not

00:20:04.303 --> 00:20:06.305
difficult. Basically here we can
see the ronlus. So our ronlus

00:20:06.305 --> 00:20:08.307
contains volume encryption. You
can have Apache installation,

00:20:08.307 --> 00:20:10.309
whatever you need with this
script, and that's kind of the

00:20:10.309 --> 00:20:12.311
first part, and the second part,
as I mentioned, we already

00:20:12.311 --> 00:20:14.313
encrypted volume. But we need to
know where is the encryption

00:20:14.313 --> 00:20:16.315
key, so therefore I will need to
connect with the server because

00:20:16.315 --> 00:20:18.317
I have no other way to know
which volume I should connect

00:20:18.317 --> 00:20:20.319
to. Let's go to the secure
instance. Let's connect to it.

00:20:20.319 --> 00:20:22.321
[No audio] So I'm getting into
the Cloudefigo, just for

00:20:22.321 --> 00:20:24.323
demonstration purposes. >> [
Inaudible ] >> What? >> [

00:20:24.323 --> 00:20:26.325
Inaudible ] >> Oh, yeah. Is it
better? Okay. So, umm still and

00:20:26.325 --> 00:20:28.327
writing below. Yeah, I have --
here, so probably you won't see

00:20:28.327 --> 00:20:30.329
in the log I have a bucket name,
like this. It's pretty -- we'll

00:20:30.329 --> 00:20:32.331
need to look for this bucket on
S3, so let's go to S3 and look

00:20:32.331 --> 00:20:34.333
for that. We're on S3, as you
can see we had a lot of demos.

00:20:34.333 --> 00:20:36.335
And here we will look for the
bucket. And we'll go to the

00:20:36.335 --> 00:20:38.337
properties. So if you look at
the properties, we'll see that

00:20:38.337 --> 00:20:40.339
here, in the permissions, we
have added bucket policy and you

00:20:40.339 --> 00:20:42.341
can see here that we actually
created access only to the

00:20:42.341 --> 00:20:44.343
specific bucket, only with a
specific refer header. Yeah. I

00:20:44.343 --> 00:20:46.345
need to put it up but I can't.
>> Sorry for that. >> Yeah.

00:20:46.345 --> 00:20:48.347
Anyway, Moshe? >> Okay. Moving
on. So now we got an access --

00:20:48.347 --> 00:20:50.349
we have an instance that is
controlled. We have all the

00:20:50.349 --> 00:20:52.351
software we want. We have
launched the encryption. We got

00:20:52.351 --> 00:20:54.353
the keys. What do we do next? Is
this instance ready to move to

00:20:54.353 --> 00:20:56.355
production? The basic question
will be, is it hardened enough

00:20:56.355 --> 00:20:58.357
and doesn't have any
vulnerabilities, so this is

00:20:58.357 --> 00:21:00.292
where we do an automatic scan to
launch for the instance. The

00:21:00.292 --> 00:21:02.294
nice thing about cloud is it
enables you to automate the

00:21:02.294 --> 00:21:04.296
scan. Then move the item to
production immediately. Move it

00:21:04.296 --> 00:21:06.298
to different security groups,
all of those things that can be

00:21:06.298 --> 00:21:08.300
done automatically. So what we
do here is launch. Analyze

00:21:08.300 --> 00:21:10.302
automatically the results. I
think we set up everything over

00:21:10.302 --> 00:21:12.304
medium. If something is over
medium, get a finding, over

00:21:12.304 --> 00:21:14.306
medium, we don't move it to
production. It will stay on

00:21:14.306 --> 00:21:16.308
remediation. Anything lower than
medium or lower, into

00:21:16.308 --> 00:21:18.310
production, sending us results.
>> Want to finish off how it

00:21:18.310 --> 00:21:20.312
works. No. Okay. So we'll go to
the NAS. We need to access the

00:21:20.312 --> 00:21:22.314
deck okay. So basically we'll
go to our NAS, yeah. >> Please

00:21:22.314 --> 00:21:24.316
don't record the IP address.
Don't access it. >> Is it

00:21:24.316 --> 00:21:26.318
secure? No, it's not secure.
Believe me. >> Moment of relief.

00:21:26.318 --> 00:21:28.320
So hard to do live demos. We
have here the scan. Basically we

00:21:28.320 --> 00:21:30.322
can see here we have one low,
one informational finding, so

00:21:30.322 --> 00:21:32.324
that means that the server
should be on production now.

00:21:32.324 --> 00:21:34.326
Let's look at it. We'll just
refresh it and we'll see what's

00:21:34.326 --> 00:21:36.328
going on with our server.
Well just refresh it and see

00:21:36.328 --> 00:21:38.330
whats going on with our
server. So I'm going down. And

00:21:38.330 --> 00:21:40.332
we can see server is in
production. Okay. Yeah. >> So we

00:21:40.332 --> 00:21:42.334
got a server, it's moving to
production. From now on

00:21:42.334 --> 00:21:44.336
basically we finished the
launching phase. I don't know

00:21:44.336 --> 00:21:46.338
the initialization phase, want
to call it. We moved to

00:21:46.338 --> 00:21:48.340
production. A couple of things
we need to remember in

00:21:48.340 --> 00:21:50.342
production environments.
Permissions are lower, okay, the

00:21:50.342 --> 00:21:52.344
server has now done everything
he needs in the automation part.

00:21:52.344 --> 00:21:54.346
We need to reduce permissions.
This is the IM role, after

00:21:54.346 --> 00:21:56.348
Cloudefigo finished configuring
it. If you remember IM in the

00:21:56.348 --> 00:21:58.350
beginning really that big. Now
very specific couple of things,

00:21:58.350 --> 00:22:00.286
basically access to the S3
bucket where you can find

00:22:00.286 --> 00:22:02.288
encryption keys, so it's done
dynamically. Reduce it

00:22:02.288 --> 00:22:04.290
dynamically. And then we put the
ongoing management, right? What

00:22:04.290 --> 00:22:06.292
kind of ongoing management?
Usually in cloud, use

00:22:06.292 --> 00:22:08.294
compensating controls. Basically
what it means is, we are

00:22:08.294 --> 00:22:10.296
checking to see if we haven't
launched somebody -- somebody

00:22:10.296 --> 00:22:12.298
hasn't launched instances not
managed by the infrastructure

00:22:12.298 --> 00:22:14.300
that we created, right? We want
to identify if there are a

00:22:14.300 --> 00:22:16.302
service somehow popped up
somewhere and we're not managing

00:22:16.302 --> 00:22:18.304
them, right? And we want to use
an alarms if somebody has

00:22:18.304 --> 00:22:20.306
managed to access server and
trying to do something, right?

00:22:20.306 --> 00:22:22.308
How do we do those? Basically,
for the first thing, for the --

00:22:22.308 --> 00:22:24.310
for checking out if servers are
managed or not, we pulling out

00:22:24.310 --> 00:22:30.316
from Amazon the list of servers
and compare it to the list of

00:22:30.316 --> 00:22:36.322
servers that are in the Chef.
Bottom line, if we see a server

00:22:36.322 --> 00:22:42.328
on Amazon, which is not in the
Chef directory, it's probably

00:22:42.328 --> 00:22:44.463
not a good server, somebody
launched it either by mistake or

00:22:44.463 --> 00:22:50.469
a malicious server. The second
thing we do, we monitor Amazon

00:23:00.846 --> 00:23:06.852
cloud trail. Cloud trail is
basically a logging mechanism

00:23:14.293 --> 00:23:20.299
for every activity you do on the
dashboard or API, right? So

00:23:32.211 --> 00:23:37.950
basically what we do is, we look
for those things in the logs.

00:23:37.950 --> 00:23:39.952
Those of you who have been
trying and playing with Amazon

00:23:39.952 --> 00:23:45.958
cloud trail, it's not well
documented. Again, it's new.

00:23:52.931 --> 00:23:58.937
Nothing better to say about
Amazon, it's new. Not so much

00:24:04.610 --> 00:24:10.449
experience. Here is what we
found out. If you tried to use

00:24:10.449 --> 00:24:12.518
the access keys -- sorry, if you
tried to do something on Amazon

00:24:12.518 --> 00:24:15.120
servers, and do it and you get
an access denied because don't

00:24:15.120 --> 00:24:17.189
have permissions it could come
up as two different logs. One of

00:24:17.189 --> 00:24:19.191
them is access denied, one of
them could be a client

00:24:19.191 --> 00:24:21.193
authorization operations usually
if you try to do something in

00:24:21.193 --> 00:24:23.195
S3, you'll get the client
unauthorized authorization.

00:24:23.195 --> 00:24:25.197
Other places, you get access
denied. So we are looking for

00:24:25.197 --> 00:24:27.199
those two in the logs. This is
pretty much -- this will be very

00:24:27.199 --> 00:24:29.201
useful for you, if you'll be
playing with cloud trail. Again,

00:24:29.201 --> 00:24:31.203
it's a great tool. Just needs
some more -- we need some more

00:24:31.203 --> 00:24:33.205
experience with it, us,
community that is. So basically

00:24:33.205 --> 00:24:35.207
let's take a look on the -- >>
Okay, so we'll get into the

00:24:35.207 --> 00:24:37.209
production role, and we'll see
what exactly we have there. So

00:24:37.209 --> 00:24:39.211
we'll go back to this long role,
refresh it and see what's going

00:24:39.211 --> 00:24:41.213
on. You can see that the policy
allows us only to access very

00:24:41.213 --> 00:24:43.215
specific object on S3, so this
machine cannot do anything

00:24:43.215 --> 00:24:45.217
anymore. So let's do a test.
Let's see what happens. I'll go

00:24:45.217 --> 00:24:47.219
back to the instance, and I'll
try to -- you can't see the

00:24:47.219 --> 00:24:49.221
text, but I'm promising you that
you'll see it in a moment. So

00:24:49.221 --> 00:24:51.223
I'm just trying to access with
AWS, SDK, to a specific instance

00:24:51.223 --> 00:24:53.225
where just IEM resource, so I'll
just try to list access keys,

00:24:53.225 --> 00:24:55.227
which is pretty much something
as a hacker I want to do. And as

00:24:55.227 --> 00:24:57.229
can see here, yeah, as can see
here, I'm not authorized to do

00:24:57.229 --> 00:24:59.231
anything. But as Moshe
mentioned, we're going to have

00:24:59.231 --> 00:25:01.166
an alert to present it. The
thing is, as I mentioned in the

00:25:01.166 --> 00:25:03.168
start, it takes time to
synchronize and get an alert, so

00:25:03.168 --> 00:25:05.170
we have two options. Either you
will wait 50 minutes or I have a

00:25:05.170 --> 00:25:07.172
probably will go with option
two. So on option two,

00:25:07.172 --> 00:25:10.642
basically, we'll go to the
alert, just -- >> Just to

00:25:10.642 --> 00:25:17.750
emphasize, takes Amazon 15
minutes from the moment you do

00:25:17.750 --> 00:25:21.754
something, basically to the
logs, okay, so we don't want to

00:25:21.754 --> 00:25:25.924
wait 15 minutes, so we got a
recording. >> So just short

00:25:25.924 --> 00:25:30.095
demo, basically when we go to
the cloud watch, we'll see our

00:25:30.095 --> 00:25:35.601
alert, which is the same as what
I did now. I just tried to

00:25:35.601 --> 00:25:39.538
access to the keys and
eventually I should see the

00:25:39.538 --> 00:25:44.977
alarm here. In the same moment,
if you want to get an e-mail or

00:25:44.977 --> 00:25:48.414
other way to get everything --
to get keys. Yeah. Well. [

00:25:48.414 --> 00:25:50.416
Laughter ] [ Applause ] >> Thank
you, guys, it's a methodical

00:25:50.416 --> 00:25:52.418
break. We have a little
tradition here. You know what it

00:25:52.418 --> 00:25:57.923
is. How do I get shoutouts from
the crowd? I can't do it

00:25:57.923 --> 00:26:05.664
anymore. Welcome to DEFCON. [
Applause ] >> It's good I'm

00:26:05.664 --> 00:26:13.439
already passed the demos. Let's
go and just continue. [Laughter]

00:26:13.439 --> 00:26:21.246
>> You didn't see -- last night.
So anyway, also decided to

00:26:21.246 --> 00:26:27.619
validate exactly what happens
with machines that are not

00:26:27.619 --> 00:26:33.992
managed by the Cloudefigo,
because basically you can launch

00:26:33.992 --> 00:26:41.066
instances but it won't be
controlled, so in this scenario,

00:26:41.066 --> 00:26:47.072
we basically took the list from
chef, and the list that we have

00:26:50.275 --> 00:26:58.050
on Amazon, compared it, and
provided the output of what is

00:26:58.050 --> 00:27:02.855
not managed. So it will see here
-- where is the browser? [

00:27:02.855 --> 00:27:05.757
Laughter ] I'm fine. Believe me.
So basically we have another API

00:27:05.757 --> 00:27:08.026
code in Cloudefigo, one server
we can translate it to the name

00:27:08.026 --> 00:27:14.032
but basically this is our
server, just wanted to show an

00:27:21.273 --> 00:27:27.279
input, something that we have in
the list. Your turn. >> I think

00:27:31.116 --> 00:27:37.122
we're wrapping things up now.
The next phase -- yep, cool. The

00:27:40.058 --> 00:27:43.328
next phase will be basic
determination, right? Launching,

00:27:43.328 --> 00:27:47.533
processing, last thing would be
termination. Basically you need

00:27:47.533 --> 00:27:52.638
to terminate the server, unless
you do some kind of backup,

00:27:52.638 --> 00:27:57.743
different servers, you need kill
the INR specific for servers and

00:27:57.743 --> 00:28:03.282
the most important thing, some
of the attacks on the cloud are

00:28:03.282 --> 00:28:07.920
basically on data thats
thought to be deleted, but it

00:28:07.920 --> 00:28:12.758
stays, am I right? Cloud
provider dont like to really

00:28:12.758 --> 00:28:18.764
delete stuff. Right? They put it
on shelf somewhere, and waiting

00:28:28.307 --> 00:28:34.313
for you to say can you restore
that for me? And they say yeah,

00:28:44.256 --> 00:28:49.928
we can do that for a nice amount
of money, right. But the problem

00:28:49.928 --> 00:28:57.502
is, basically being replicated
all of those places. How can you

00:28:57.502 --> 00:29:03.442
do -- how can you make sure if
you really deleted, there are a

00:29:07.045 --> 00:29:14.620
couple of ways to do it.
Basically what is called crypto

00:29:14.620 --> 00:29:21.460
shredding. Data here is that
thats been encrypted and we

00:29:21.460 --> 00:29:29.001
need to terminate the key. Once
terminate the key, that is

00:29:29.001 --> 00:29:35.874
useless. Again, it's dependent
on your scenario where you keep

00:29:35.874 --> 00:29:41.880
the keys. Over here we did it
from S3. You could say S3,

00:29:44.783 --> 00:29:50.956
you're correct, but then
according to your threat, you

00:29:50.956 --> 00:29:57.829
keep it in the physical
location, you can also destroy

00:29:57.829 --> 00:30:04.002
physically the key, and then
your data is basically

00:30:04.002 --> 00:30:10.876
protected. It could be kept
somewhere but it's useless, so

00:30:10.876 --> 00:30:17.716
don't forget about this crypto
shredding, the shredding of the

00:30:17.716 --> 00:30:23.722
keys to make sure data is safe.
So this was the last phase and

00:30:25.857 --> 00:30:31.563
also pretty much closing it,
wrapping things up, so what we

00:30:31.563 --> 00:30:35.033
want you to take out of this?
New software development

00:30:35.033 --> 00:30:37.102
methodologies and new
infrastructure services are

00:30:37.102 --> 00:30:40.238
basically changing the way that
we treat applications. Premise,

00:30:40.238 --> 00:30:44.076
production server was like the
holy grail, you don't touch it.

00:30:44.076 --> 00:30:47.179
Periodic maintenance once every
six months, pizza nights, people

00:30:47.179 --> 00:30:54.653
treat it like the holy things,
don't really want to mess with

00:30:54.653 --> 00:31:00.592
it. In the cloud, we can send
production environment change

00:31:12.471 --> 00:31:18.477
five times a day, deleted,
launched again, right? This is

00:31:31.356 --> 00:31:37.362
continuous integration. It's
changing, and need to change --

00:31:40.165 --> 00:31:43.435
so you need to learn how to
automate your security. You will

00:31:43.435 --> 00:31:46.004
not automate your security, you
basically will be left out and

00:31:46.004 --> 00:31:48.340
they will call you once every
while to -- just for you to give

00:31:48.340 --> 00:31:50.575
something, some kind of opinion,
but they will not security in

00:31:50.575 --> 00:31:52.577
production servers. I mean IT
Department, right? So we need a

00:31:52.577 --> 00:31:55.647
new thinking and think how to
automate security. This is the

00:31:55.647 --> 00:31:58.283
new challenge for software
development companies. So

00:31:58.283 --> 00:32:01.620
hopefully, demonstrated enough,
how to do automation, what are

00:32:01.620 --> 00:32:05.757
the different phases. You can
take it into different areas you

00:32:05.757 --> 00:32:10.662
can use Cloudefigo or build your
own. You have the right tools to

00:32:10.662 --> 00:32:15.567
do it. I think we have a couple
minutes for questions coming, if

00:32:15.567 --> 00:32:19.371
you have questions, wed be
happy to take one. If not, come

00:32:19.371 --> 00:32:25.944
and check us later, well be
around you get Twitter handles

00:32:25.944 --> 00:32:31.950
and any other ways to access it.
>> Before the questions, we're

00:32:34.853 --> 00:32:40.859
also going to post updated link,
if you want -- first of all, you

00:32:45.230 --> 00:32:51.236
can follow us. We're going to --
Cloudefigo and you can also get

00:32:54.873 --> 00:33:02.247
into the website, looking for
contributors. We need to improve

00:33:02.247 --> 00:33:09.654
our documentation, our features.
So youre welcome to join. >>

00:33:09.654 --> 00:33:15.660
Thank you. [ Applause ] >> There
was a question? >> One of the

00:33:20.031 --> 00:33:26.705
things you talk about, instances
appear you aren't expecting.

00:33:26.705 --> 00:33:31.276
What about instances and such
that don't die when you should

00:33:31.276 --> 00:33:35.747
have died? >> Instances that
died that shouldn't have died.

00:33:35.747 --> 00:33:41.753
>> No, instances that didn't die
when they should have died? In

00:33:48.426 --> 00:33:55.967
other words, you're looking at
all these instances, lots of

00:33:55.967 --> 00:33:57.969
instances, lots of brawls, and
you're expecting, say, these

00:33:57.969 --> 00:33:59.971
particular servers to only be
around for, say, 24 hours, but

00:33:59.971 --> 00:34:01.907
this particular instance has
been around for eight months.

00:34:01.907 --> 00:34:03.909
And you just don't -- aren't
aware of that. >> I agree. We

00:34:03.909 --> 00:34:05.911
thought about handling this. I
mean, this was one of the phases

00:34:05.911 --> 00:34:07.913
we thought about doing, but then
we took a look at, I think it's

00:34:07.913 --> 00:34:09.915
called security generator from
Netflix, and it's pretty awesome

00:34:09.915 --> 00:34:11.917
tool. I'm -- it's a -- monkey or
gorilla, security, something

00:34:11.917 --> 00:34:13.919
like that. And what it does, it
overviews the configuration and

00:34:13.919 --> 00:34:15.921
it terminates all the
unnecessary instances,roles all

00:34:15.921 --> 00:34:17.923
garbage left behind. So
basically we said, okay, good

00:34:17.923 --> 00:34:19.925
enough tools so we won't go into
that. But I agree this is

00:34:19.925 --> 00:34:23.762
definitely a challenge and needs
to be addressed, because a lot

00:34:23.762 --> 00:34:25.931
of junk that is filing in. >>
Well because I mean as an

00:34:25.931 --> 00:34:30.735
attacker, using this tool, if I
can jam your shut down

00:34:30.735 --> 00:34:35.106
procedure, that's almost good
enough. >> I agree. It's a

00:34:35.106 --> 00:34:39.311
problem that we're not solving
every world problem here. Thanks

00:34:39.311 --> 00:34:43.348
a lot for the comment. Any other
questions, guys? >> No more. >>

00:34:43.348 --> 00:34:45.784
Sorry. No more questions, Kevin?
Sorry, thanks a lot, again. [

00:34:45.784 --> 00:34:47.786
Applause ]

