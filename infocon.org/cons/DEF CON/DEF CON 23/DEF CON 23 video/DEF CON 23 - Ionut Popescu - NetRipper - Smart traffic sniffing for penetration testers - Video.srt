00:00:00.234 --> 00:00:04.671
>> Good afternoon everyone.
First and foremost, a little bit

00:00:04.671 --> 00:00:08.108
of housekeeping, if anybody has
lost a pair of sunglasses and

00:00:08.108 --> 00:00:11.812
can describe them to me come to
me. other wise I'm gonna have a

00:00:11.812 --> 00:00:15.382
new set of sunglasses I'm gonna
thank em for that. next up i

00:00:15.382 --> 00:00:18.819
wanna point out that if you are
looking for seats because are

00:00:18.819 --> 00:00:22.556
you coming in. They're some at
front and on the side as well.

00:00:22.556 --> 00:00:26.760
Now we are in track 3 for net
rippers, smart traffic sniffing

00:00:26.760 --> 00:00:30.564
for penetration testers and
without further ado, I give you

00:00:30.564 --> 00:00:36.570
Yanish Popesu. >>uhhh First a
little bit about me, I am Yanish

00:00:40.207 --> 00:00:46.213
Popesu, I am from Romania and I
work as senior security

00:00:49.549 --> 00:00:54.721
consultant at (inaudible). Also
I'm a blogger at security cafe

00:00:54.721 --> 00:01:01.194
and administrator of the biggest
largest security community in

00:01:01.194 --> 00:01:06.266
eastern Europe. A few things
about my country. Is located in

00:01:06.266 --> 00:01:12.306
Eastern Europe. The country of
Dracula. We have the first

00:01:12.306 --> 00:01:16.777
standing olympics, we invented
the jet plain and probably the

00:01:16.777 --> 00:01:20.280
most beautiful girls in the
world. Don't ask me, come and

00:01:20.280 --> 00:01:26.286
check. Here is the agenda what
we are going to talk about.

00:01:30.057 --> 00:01:34.194
Introduction about this tool, a
few details about how it works.

00:01:34.194 --> 00:01:41.368
Some details about the
reflective DLL injection. The ll

00:01:41.368 --> 00:01:47.741
the API hooking some hooking
examples, demo and hopefully

00:01:47.741 --> 00:01:54.047
everything will be okay. The
introduction, what is net

00:01:54.047 --> 00:01:57.951
ripper. Net ripper is a post
exploitation tool for Windows

00:01:57.951 --> 00:02:04.825
system. That captures the
network traffic even if it is

00:02:04.825 --> 00:02:12.499
encrypted or after it is
decrypted at the application

00:02:12.499 --> 00:02:17.871
layer by injecting a DLL and
using API hooking and hooking

00:02:17.871 --> 00:02:23.110
specific functions. The most
important thing about this is

00:02:23.110 --> 00:02:26.613
that it works without an
administrator, it works for a

00:02:26.613 --> 00:02:34.221
low privilege user. Uh, here is
the main scenario, in our

00:02:34.221 --> 00:02:38.592
projects we encountered this
situation multiple times, we had

00:02:38.592 --> 00:02:44.531
access to administrator laptops,
and we didn't know what to do to

00:02:44.531 --> 00:02:50.537
pivot to the other servers, so
this is where the idea came

00:02:52.873 --> 00:02:59.579
from. This is the general
example of how it works. Let say

00:02:59.579 --> 00:03:05.519
outlook. The -- someone writes
an e-mail, the e-mail is

00:03:05.519 --> 00:03:11.825
encrypted and the encrypted data
is sent through the network. So

00:03:11.825 --> 00:03:18.198
the user layer, use types of
e-mail. The network layer

00:03:18.198 --> 00:03:21.802
contains the encrypted data and
net ripper is injected after the

00:03:21.802 --> 00:03:27.808
encryption layer. Here is an
example, the user writes the

00:03:29.843 --> 00:03:34.347
email (inaudible) the
(inaudible) this example is for

00:03:34.347 --> 00:03:38.285
outlook. Outlook uses
encrypt.dll and ssl encrypt

00:03:38.285 --> 00:03:42.489
packets and ssl decrypt packets
in order for to encrypt and

00:03:42.489 --> 00:03:48.361
decrypt the data. The data is
then sent encrypted after with

00:03:48.361 --> 00:03:55.635
send WSA send or windows API
function. Here it what happens

00:03:55.635 --> 00:04:00.907
when the net ripper.dll is
injected the dll from the net

00:04:00.907 --> 00:04:08.148
ripper it hooks this function
from encrypt.dll and it gets the

00:04:08.148 --> 00:04:12.419
data before it is encrypted.
This also happens for the

00:04:12.419 --> 00:04:17.958
decryption. It hooks the ssl
decrypt packet And after the

00:04:17.958 --> 00:04:20.560
data is decrypted by the
function it can access the

00:04:20.560 --> 00:04:26.566
plaintiffs data. This is the
main idea. I use the reflective

00:04:30.504 --> 00:04:34.641
dll injection to inject the DLL.
API hooking to hook specific

00:04:34.641 --> 00:04:42.349
functions and save the data
locally. this is how classic DLL

00:04:42.349 --> 00:04:48.355
injection works. The application
opens remote process memory DLL,

00:04:51.158 --> 00:04:57.664
full pack in the process memory
and call library to load the

00:04:57.664 --> 00:05:00.267
DLL. Into the process memory.
But this have some advantages.

00:05:00.267 --> 00:05:03.537
The DLL must be written on this
so the anti-virus can pick it

00:05:03.537 --> 00:05:06.306
and the DLL is listed in the
process. The reflective dll

00:05:06.306 --> 00:05:12.312
injection was implemented by the
-- security and this is how it

00:05:21.288 --> 00:05:27.160
works. The DLL contents are
copied, the full DLL contents,

00:05:27.160 --> 00:05:29.162
is copied into the target
process memory, however the DLL

00:05:29.162 --> 00:05:35.168
doesn't look the same in process
memory like on the disc. So we

00:05:38.071 --> 00:05:44.311
have to auto load itself
correctly. For this the

00:05:44.311 --> 00:05:48.114
reflective DLL injection uses a
function called reflective

00:05:48.114 --> 00:05:53.320
loader. This function has all
the steps necessary to correctly

00:05:53.320 --> 00:05:59.125
load the DLL. The advantages of
this method that the DLL doesn't

00:05:59.125 --> 00:06:03.463
touch the disc, so you can
easily bypass the anti-virus.

00:06:03.463 --> 00:06:07.767
And that the DLL is not listed
in the process modules. Because

00:06:07.767 --> 00:06:13.773
is not loaded with low library
and window system use the PEV,

00:06:18.211 --> 00:06:24.217
processing environment block who
to keep a link the list with all

00:06:26.753 --> 00:06:32.993
process module. I hope you can
read this. This is first step

00:06:32.993 --> 00:06:39.065
for the DLL injection. This is
actually -- for DLL, using

00:06:39.065 --> 00:06:45.672
reflective DLL injection. if you
can see there is a method called

00:06:45.672 --> 00:06:50.343
a function call get the
reflected loader object. This

00:06:50.343 --> 00:06:55.148
function just searches the
reflected loading function and

00:06:55.148 --> 00:07:01.554
returns the offset in the DLL.
after this step we allocate

00:07:01.554 --> 00:07:05.659
space in the process memory and
it targets the process memory

00:07:05.659 --> 00:07:11.865
with he full size of the DLL.
The DLL is now written with the

00:07:11.865 --> 00:07:18.004
process write process memory
function. And the we call using

00:07:18.004 --> 00:07:25.278
create mode thread the reflector
loading function. This code

00:07:25.278 --> 00:07:31.284
actually reflected DLL injection
code is from different -- after

00:07:34.621 --> 00:07:41.895
this function is called. What it
does is to search for the image

00:07:41.895 --> 00:07:44.431
based off the process --
actually -- search where the DLL

00:07:44.431 --> 00:07:50.103
is in the mapped in the memory,
search for the window portable

00:07:50.103 --> 00:07:54.975
executable header. So is like
from the location and search for

00:07:54.975 --> 00:08:02.615
the header. After you find the
header it needs to know some

00:08:02.615 --> 00:08:07.420
function require to properly
load itself into memory so it

00:08:07.420 --> 00:08:13.526
finds in has to find function
like load library and get proc

00:08:13.526 --> 00:08:19.532
address and get flash
instruction case. Next step is

00:08:27.407 --> 00:08:31.745
to load the DLL header in new
location. The section must be

00:08:31.745 --> 00:08:37.317
aligning in memory so this step
is required. Is not difficult to

00:08:37.317 --> 00:08:42.288
pass the PE the portable
executable header. So it just

00:08:42.288 --> 00:08:48.294
parts the PE header and get each
section and the map it into the

00:08:51.831 --> 00:08:56.703
place of memory. After the
section is loaded the next step

00:08:56.703 --> 00:09:01.975
is to process the imports. You
may create a DLL that use some,

00:09:01.975 --> 00:09:06.646
I don't know, specific DLL from
window. In order to make sure

00:09:06.646 --> 00:09:11.184
everything will work you have to
make sure every DLL is loaded

00:09:11.184 --> 00:09:17.957
into memory. Every important DLL
is imported to memory. Is to

00:09:17.957 --> 00:09:25.298
pass data directory. The
directory imports. Is a location

00:09:25.298 --> 00:09:29.536
in the PE header that describes
each DLL that should be loaded

00:09:29.536 --> 00:09:34.007
in order to make sure the DLL is
loaded properly? Those things

00:09:34.007 --> 00:09:40.013
are automatically done the
windows PE loader but we want to

00:09:43.883 --> 00:09:50.423
avoid using it. Next step is to
process the remote location. Are

00:09:50.423 --> 00:09:52.992
some addresses that are directly
pushed on the step or code? For

00:09:52.992 --> 00:09:58.998
example if you have a push
location this location has to be

00:10:05.004 --> 00:10:11.611
relocated in case DLL is not
loaded at the require memory

00:10:11.611 --> 00:10:18.118
location. Each PE file DLL or
executable has a preferred image

00:10:18.118 --> 00:10:24.023
base -- but at least for the
DLLS it may have -- happen to

00:10:24.023 --> 00:10:31.431
load the DLL another location.
This is required. After the DLL

00:10:31.431 --> 00:10:38.705
is completed loaded into memory
correctly. It just needs to call

00:10:38.705 --> 00:10:44.711
the main function of the DLL.
Okay. API hooking. We take the

00:10:49.349 --> 00:10:54.254
same example with Outlook and
encrypt.dll. So we want to

00:10:54.254 --> 00:11:01.794
redirect the SSL encrypt packet
so our booking function. So we

00:11:01.794 --> 00:11:06.299
will redirect to function from
encrypt dot DLL to net

00:11:06.299 --> 00:11:13.072
ripper.dll. These are the steps
that we have to follow in order

00:11:13.072 --> 00:11:16.709
to do this. We to find the
function address. We place the

00:11:16.709 --> 00:11:22.181
call instruction and we call a
generic hooking function

00:11:22.181 --> 00:11:28.187
instead. We restore the original
bytes because we modified them,

00:11:30.823 --> 00:11:37.964
call back function that process
the data from our target

00:11:37.964 --> 00:11:44.537
function in this case as select
packet and in that function we

00:11:44.537 --> 00:11:49.075
have the plain text data. For
additional hook and core. This

00:11:49.075 --> 00:11:51.277
is normal assembly for our
function classic function EBP

00:11:51.277 --> 00:11:53.947
ASP after we hook this function
first five bytes are replace by

00:11:53.947 --> 00:11:56.616
our call. That address is of our
generic hooking function. A few

00:11:56.616 --> 00:11:59.285
details about how this works.
This is how we place the hook.

00:11:59.285 --> 00:12:01.888
We place a call instruction. The
op code for the call instruction

00:12:01.888 --> 00:12:04.090
is 0xE8 and we calculate that
the distance between the

00:12:04.090 --> 00:12:06.092
original function and our call
back function. Our hooking

00:12:06.092 --> 00:12:08.328
function. And we safe the
original byte in order to

00:12:08.328 --> 00:12:10.330
restore them later. Flash
instruction case actually I'm

00:12:10.330 --> 00:12:12.865
not sure if this particularly
require on Windows because it

00:12:12.865 --> 00:12:18.871
doesn't seem to do anything.
Here it is our generic hooking

00:13:01.214 --> 00:13:07.220
function. Every time we place a
hook we call this function and

00:13:10.590 --> 00:13:15.595
this is how it works. First we
have hook instruction. In this

00:13:15.595 --> 00:13:21.334
structure we save the call back
address of our function. The

00:13:21.334 --> 00:13:25.672
original address, the address
that we hook. The original bytes

00:13:25.672 --> 00:13:32.812
and the call bytes. If you can
see an important thing about

00:13:32.812 --> 00:13:37.884
call and not jump is that the
call automatically pushes on the

00:13:37.884 --> 00:13:42.522
stack the -- next instruction.
What we have to do is to

00:13:42.522 --> 00:13:50.263
subtract five from that return
address and we have the original

00:13:50.263 --> 00:13:55.702
address of the hooked function.
So we can just iterate to all

00:13:55.702 --> 00:14:01.641
hooks and find the structure for
that specific hook. The hook --

00:14:05.745 --> 00:14:11.751
do this for us. After we found
our hook structure we can access

00:14:16.522 --> 00:14:23.629
the original address and
original byte. We can call me

00:14:23.629 --> 00:14:29.635
CPI to restore the original
byte. After we restore the

00:14:33.439 --> 00:14:39.412
original byte what we have to do
is to call our call back

00:14:39.412 --> 00:14:45.418
function. Our call back function
will safe locally the data and

00:14:50.857 --> 00:14:55.962
restore the hook. This is how
our call back function works. It

00:14:55.962 --> 00:15:01.167
must have the prototype and must
specify the calling convention.

00:15:01.167 --> 00:15:07.173
And the it does is to write to a
temporary file the encrypted

00:15:17.083 --> 00:15:21.554
data this packet to once we
encrypt the data input -- and

00:15:21.554 --> 00:15:24.624
data site is specify. So after
data is safe we call the

00:15:24.624 --> 00:15:30.630
original function so make sure
the data is connected to the

00:15:36.936 --> 00:15:42.942
network and restore the hook.
First example the easiest one

00:15:45.578 --> 00:15:48.948
fireworks and some of
applications we find the DLLS

00:15:48.948 --> 00:15:54.954
that encrypt in the data. Those
are NC -- we found the --

00:16:02.495 --> 00:16:08.501
function and PR maybe use by
some other application. Another

00:16:15.641 --> 00:16:21.647
useful example will be putty.
Call it from -- Romania. That

00:16:31.991 --> 00:16:35.394
does the same thing it put some
function. Enter data that send

00:16:35.394 --> 00:16:42.401
will each character and will be
call with the -- in order the be

00:16:42.401 --> 00:16:48.407
display. Writer can do a lot of
other things so you may take a

00:16:53.980 --> 00:16:59.986
look at it. For the function so
I only have use the signatures

00:17:04.423 --> 00:17:07.093
actually the first byte of the
function in order to find it. So

00:17:07.093 --> 00:17:13.099
I just find the section from
putty dot -- and search those

00:17:18.137 --> 00:17:24.143
functions and for when -- in
your life. I found they just pay

00:17:28.614 --> 00:17:34.820
to compile the source. It took
me a few hours but I was able to

00:17:34.820 --> 00:17:38.157
compile it. It also took me
sometime to find the correct

00:17:38.157 --> 00:17:43.229
functions but I found SHH dot C
the functions that looks to send

00:17:43.229 --> 00:17:50.202
the network before it is
encrypted or to decrypt the

00:17:50.202 --> 00:17:56.208
traffic. So we have just find
the -- functions we place

00:17:58.577 --> 00:18:04.150
encrypt, 0, 3 compile the
application and run. And see the

00:18:04.150 --> 00:18:10.156
data -- those are the functions
use by WINSTP. SHH make it stand

00:18:13.559 --> 00:18:19.565
have a perimeter. SHH 2 will
return a packet structure. This

00:18:28.941 --> 00:18:34.947
is how the send memory function
is like. Look like. And the I

00:18:41.754 --> 00:18:49.028
have -- I had to just copy first
byte of each function and search

00:18:49.028 --> 00:18:51.030
in the code section so I was
able to hook them and find their

00:18:51.030 --> 00:18:54.433
location. The main problem is
that not all the reapplication

00:18:54.433 --> 00:19:00.373
uses the DLL in order to call
some functions (inaudible) and

00:19:04.010 --> 00:19:10.149
the masterpiece -- they are --
some different library. Maybe

00:19:10.149 --> 00:19:17.657
really difficult. And the
function prototype will be able

00:19:17.657 --> 00:19:23.095
to hook them. So this is the
code that hooks the win STP.

00:19:23.095 --> 00:19:27.166
Like putty I created signatures
for functions. And I search the

00:19:27.166 --> 00:19:31.437
process memory for this function
and place our hooks. Chrome

00:19:31.437 --> 00:19:37.443
maybe I think it make difficult
to compile chrome. I did try to

00:19:43.182 --> 00:19:49.188
do this instead I use some idea
from some underground and this

00:19:51.824 --> 00:19:57.830
can be more complicated --
Chrome uses a table called SSL

00:20:01.600 --> 00:20:09.375
methods. So we have to find that
SSL methods structure that

00:20:09.375 --> 00:20:13.879
contains the SSL read and SSL
write functions. In the source

00:20:13.879 --> 00:20:17.983
code of chrome this is for --
until version 37. Chrome is the

00:20:17.983 --> 00:20:20.953
NSS -- they after some problems
they wanted to change open SSL

00:20:20.953 --> 00:20:23.989
but we open SLL that are a lot
of problems and they decided to

00:20:23.989 --> 00:20:29.995
create their own fork of
Open-SSL. so in the code of NSS

00:20:46.378 --> 00:20:52.118
you can find call to a function,
call to a function, SSL. This

00:20:52.118 --> 00:20:58.124
will call the get default your
methods. However we have to find

00:21:00.259 --> 00:21:07.933
the start of the SLL methods
pointer and in order to find

00:21:07.933 --> 00:21:13.939
these we rely on the PR
displayer attributed which have

00:21:17.877 --> 00:21:23.883
the value for. So we find the
call of the function by

00:21:26.585 --> 00:21:31.490
searching the SSL string as you
can see on the SSL -- beneath

00:21:31.490 --> 00:21:37.496
layer. There is a method call
Identity. We find that string on

00:21:40.166 --> 00:21:44.870
the data section of the
executable and we can find the

00:21:44.870 --> 00:21:50.776
call for this function and then
we find the call for this set of

00:21:50.776 --> 00:21:56.782
io methods where we can find the
SSL method stable. So string we

00:22:00.319 --> 00:22:05.958
find the method that sets the
SSL method and highlighted with

00:22:05.958 --> 00:22:10.596
red in the bottom corner you can
see a value of 4 attributed

00:22:10.596 --> 00:22:15.000
location. That's the location of
SSL table and we use that table

00:22:15.000 --> 00:22:19.672
to find the SSL read and SSL
write functions. This is the

00:22:19.672 --> 00:22:25.411
code we find the string in the
process memory and we find that

00:22:25.411 --> 00:22:31.483
specific method and using that
specific method we are able to

00:22:31.483 --> 00:22:37.089
find SSL read and function. And
starting with version 38 chrome

00:22:37.089 --> 00:22:43.095
use -- boarding SSL. And those
functions are available in

00:22:45.631 --> 00:22:51.637
Chrome.dll is a huge DLL and in
order to find the correct

00:22:55.908 --> 00:23:01.847
functions we idea light on the
message that was available in

00:23:05.551 --> 00:23:11.257
both SSL read and write
functions This string is

00:23:11.257 --> 00:23:17.263
specified by the SSL put error
marker So the DLL will contain

00:23:21.166 --> 00:23:27.806
in the data section a string
that contain the compiling file.

00:23:27.806 --> 00:23:34.213
So we search in the data
section. That is called

00:23:34.213 --> 00:23:40.219
CW/bill/build. And so on. And we
have to find the correct call of

00:23:43.022 --> 00:23:50.562
the function. That are about 20
calls of this string so we have

00:23:50.562 --> 00:23:53.699
to find -- the 15 and the 17 --
location, those are the SSL read

00:23:53.699 --> 00:23:59.705
and the SSL write functions.
This is the code that search --

00:24:02.474 --> 00:24:08.480
code -- specify string in data
section. We search for the 17

00:24:11.083 --> 00:24:16.689
and 15 location of that string.
So you are able to find the SSL

00:24:16.689 --> 00:24:22.695
sent and SSL read function. I
thought it might be useful to

00:24:25.831 --> 00:24:30.836
create some -- for this tool.
That we'll process both send and

00:24:30.836 --> 00:24:36.542
receive data. That are only 3
plugging but I hope they're

00:24:36.542 --> 00:24:42.548
useful. The plain texts specify
if we want to safe -- or to safe

00:24:45.250 --> 00:24:50.155
the data. Limit is use to avoid
large load files and we set

00:24:50.155 --> 00:24:56.895
maximum file request site and
string finder is a plugin that

00:24:56.895 --> 00:25:02.835
we write in a specific file for
some new lines -- some strings

00:25:05.904 --> 00:25:11.143
that we can specify so for
example if the data contains the

00:25:11.143 --> 00:25:18.751
word fast we can log in in
another file. The plain text

00:25:18.751 --> 00:25:24.123
plugin maybe useful to avoid a
large amount of data. That's not

00:25:24.123 --> 00:25:29.061
our interest. The data limit
maybe used to trim the data and

00:25:29.061 --> 00:25:35.067
safe only the first 4 thousand
bytes of the data and the string

00:25:44.009 --> 00:25:50.015
finder can find the words in the
data. For instance it finds the

00:25:54.353 --> 00:25:59.958
password for the specific
accounts. Net ripper has the two

00:25:59.958 --> 00:26:05.964
components. DLL configuration
meaning just to specify specific

00:26:12.237 --> 00:26:17.676
values for the plug in. To
specify if you want to -- not

00:26:17.676 --> 00:26:22.714
specify the data limit but
finding the request some strings

00:26:22.714 --> 00:26:28.720
using -- to DLL to be process.
Like in this example -- statics.

00:26:31.457 --> 00:26:38.931
This can be useful in order to
test sound specific application.

00:26:38.931 --> 00:26:40.933
For example you are not a
penetration tester, you do not

00:26:40.933 --> 00:26:42.935
want to (inaudible) but you want
to find what the application is

00:26:42.935 --> 00:26:47.439
sending through the network, so
it may be useful to analyze such

00:26:47.439 --> 00:26:53.445
application. And you can see in
example firefox. Here is the

00:26:59.718 --> 00:27:07.259
metasploit module. So we need to
have access. Come propriety

00:27:07.259 --> 00:27:14.299
machine and they're the same
configuration option. Slide in

00:27:14.299 --> 00:27:20.305
windows modules. We need to find
the data -- stream temp will

00:27:25.911 --> 00:27:31.850
automatically detect the local
temporary folder. And we can

00:27:31.850 --> 00:27:39.424
specify either the process ID
order process name where we want

00:27:39.424 --> 00:27:46.064
to inject the DLL. Now for the
demo I have to get machine. And

00:27:46.064 --> 00:27:52.070
the other one Window 7 64 byte
and this will be the victim we

00:28:03.549 --> 00:28:09.555
should have I am not sure if you
can see, yep thought so, ok, we

00:28:58.303 --> 00:29:05.777
should have meterpreter session
and I chose an easy way to get

00:29:05.777 --> 00:29:11.783
this. This will be the pentester
so this is normal user, the

00:29:21.126 --> 00:29:28.867
sysadmin. So, it is a normal
user. And we will use the post

00:29:28.867 --> 00:29:34.873
exploitation module. we just
have to inject this in to

00:29:50.589 --> 00:29:56.595
specific processes. Is the
example of this. And run. I'm

00:30:08.573 --> 00:30:14.579
sorry. Okay and the module will
inject the DLL in all processes

00:30:22.320 --> 00:30:28.326
with specific process name. And
let's take some example. And

00:30:44.409 --> 00:30:50.415
we'll do some stuff. It can use
the WINSTP. And let say it will

00:31:10.502 --> 00:31:16.508
modify the file. Configuration
file. The transfer is not

00:31:23.515 --> 00:31:29.521
complete. It can connect to
MYSQL data base and it can

00:31:36.428 --> 00:31:42.434
execute a Query. It can Skype or
talk to someone. It can use

00:31:56.281 --> 00:32:02.220
yahoo messenger really using in
Romania it can use the SQL

00:32:06.958 --> 00:32:12.964
server to connect today at data
base. It can use files and

00:32:38.123 --> 00:32:44.129
modify some data in that file,
you may send e-mail. And may

00:32:46.331 --> 00:32:52.337
browse some secure server safe.
Or even from Facebook log into

00:33:21.967 --> 00:33:27.973
an account. Important advantage
of this method is this one. The

00:33:33.111 --> 00:33:39.684
certificate is not modified and
you don't see another signer of

00:33:39.684 --> 00:33:44.956
your certificate. So someone may
look at the certificate and may

00:33:44.956 --> 00:33:52.764
not be sure that if everything
is okay. And now the attacker.

00:33:52.764 --> 00:33:58.770
What it has to do. I have to
down load the log file specify

00:34:14.452 --> 00:34:20.659
the local directory.
C:/Users/localuser/appdata.local

00:34:20.659 --> 00:34:26.665
/temp. Here it Will create a
folder called net ripper. And it

00:34:31.436 --> 00:34:35.273
should be all the files we just
down load. All of them. Each

00:34:35.273 --> 00:34:42.180
file contain the process ID and
process name and the if you

00:34:42.180 --> 00:34:47.252
think in order to capture the
data. This may be useful because

00:34:47.252 --> 00:34:53.258
the processes mail so that the
net ripper can also catch

00:34:53.258 --> 00:34:57.429
encrypt data and the data before
is encrypted. Have you to filter

00:34:57.429 --> 00:35:03.368
the results. Just a moment to
finish the execution. The string

00:35:07.505 --> 00:35:13.511
file, the string finder. Plug in
creates those files and then

00:35:17.349 --> 00:35:23.355
specify the string finder. Okay.
Now we have the files hide the

00:35:28.493 --> 00:35:34.499
sql the mysql client will
receive some data. And the we

00:35:45.710 --> 00:35:49.781
executed the select star from
dot user which contain it from

00:35:49.781 --> 00:35:52.083
he admin this may be useful. The
data send. And are ready the

00:35:52.083 --> 00:35:54.085
string finder finds our
(inaudible) our strings and one

00:35:54.085 --> 00:35:56.087
of them is pass -- and contain
the hash of the user. For chrome

00:35:56.087 --> 00:35:58.089
we may find useful information
in SSL read and SSL write

00:35:58.089 --> 00:36:00.025
functions. And SSL write. Yup.
Those are for the plaintext I

00:36:00.025 --> 00:36:02.027
have you may not find release of
information here. Putty. This is

00:36:02.027 --> 00:36:04.029
what putty received and here and
you can see the contents of the

00:36:04.029 --> 00:36:06.031
SWD file here. And this is what
will send so we can find the

00:36:06.031 --> 00:36:08.033
user name. Don't contain any
useful information. For us the

00:36:08.033 --> 00:36:10.035
string finder found some useful
information. WINSCP send and

00:36:10.035 --> 00:36:12.037
receive Will not contain useful
information but is SHH will

00:36:12.037 --> 00:36:14.039
contain the context of the
modify file and it will also

00:36:14.039 --> 00:36:16.041
contain the file read from the
server. So everything is plain

00:36:16.041 --> 00:36:18.043
text. For outlook the encrypt
message packet. I think this is

00:36:18.043 --> 00:36:20.045
message encoded in base 64 and
here is the context of the

00:36:20.045 --> 00:36:22.047
e-mail. This is the data
received from our servers, from

00:36:22.047 --> 00:36:24.049
firefox read and write for is
use read the information. Can

00:36:24.049 --> 00:36:26.051
you see some junk information
ability a lot of context is

00:36:26.051 --> 00:36:28.053
compressed appear right? Here
are the Facebook requests I

00:36:28.053 --> 00:36:30.055
think. Yeah. And it is the
logging information that you are

00:36:30.055 --> 00:36:32.057
searching for. User name and
password. For the SQL server

00:36:32.057 --> 00:36:34.059
management studio. We can also
find some queries automatically

00:36:34.059 --> 00:36:36.061
executed and the data received.
You may (Inaudible) I don't know

00:36:36.061 --> 00:36:38.063
you may find new things about
this. SQL server using. And for

00:36:38.063 --> 00:36:40.065
file -- the whole traffic is
plain text and you can find the

00:36:40.065 --> 00:36:45.336
information here. Here is the
same data, so the username and

00:36:45.336 --> 00:36:51.342
the password. [ APPLAUSE ] >>
The tool is not complete, I want

00:36:59.084 --> 00:37:05.023
to make it support 64 processes
and to support the application

00:37:07.258 --> 00:37:13.264
and even all the version of the
application the hook is also not

00:37:42.060 --> 00:37:48.066
thread safe so I have to work on
this regular expression plugin.

00:37:51.503 --> 00:37:57.876
For the defense I think this is
an Microsoft operation issue.

00:37:57.876 --> 00:38:00.411
For example my Kaspersky
actually warns me if an

00:38:00.411 --> 00:38:03.481
application in usr land tries to
modify the process memory of

00:38:03.481 --> 00:38:06.618
another application. And I think
all anti viruses should do this.

00:38:06.618 --> 00:38:12.624
It is project, is private now
but in a few minutes I will make

00:38:43.288 --> 00:38:49.294
it public. So you will have the
source code, binaries, and

00:39:14.185 --> 00:39:20.191
metasploit module. As a
conclusion this is a post

00:39:22.493 --> 00:39:29.267
exploitation tool reflect DLL
injection that encrypt and

00:39:29.267 --> 00:39:35.273
decrypt the data in other to
capture the network in plaintext

00:39:40.278 --> 00:39:46.284
and it should be ease to use. If
you have any questions. I can't

00:39:54.292 --> 00:40:01.532
hear you, I'm sorry. Oh okay. It
doesn't work now I'll make it

00:40:01.532 --> 00:40:04.068
public in a few minutes. And
here is my contact information

00:40:04.068 --> 00:40:10.074
if you need help or you have
suggestions or everything else.

00:41:11.736 --> 00:41:17.742
Thank you. [ APPLAUSE ]

