00:00:00.000 --> 00:00:06.006
Hello. I am peter Shipley and.
>> I'm Ryan Gooler. >> And we're

00:00:09.843 --> 00:00:15.849
here to talk about Insteon. This
talk is a little backwards. A

00:00:20.854 --> 00:00:27.961
lot of talks at various
conferences they talk about the

00:00:27.961 --> 00:00:31.131
research and what they're doing
and hold the good stuff to the

00:00:31.131 --> 00:00:36.703
very end like a mystery novel.
I'm going to go through things

00:00:36.703 --> 00:00:40.207
and give you the conclusion and
then talk about how I got there?

00:00:42.743 --> 00:00:48.749
>> Insteon -- it's a virus
protocol, a bunch of devices

00:00:54.187 --> 00:00:56.890
like this you plug around your
house, turn the lights on and

00:00:56.890 --> 00:01:02.896
off, sprinkler systems. I got
bored and started playing with

00:01:02.896 --> 00:01:08.902
it. It's made by a company
called smart home.

00:01:15.075 --> 00:01:17.878
[indiscernible] dual band
communication. It's an asset and

00:01:17.878 --> 00:01:22.916
a problem as we'll soon see. 	
All the devices -- as a

00:01:22.916 --> 00:01:27.521
repeater. Any light switch in
the house is also a beta

00:01:27.521 --> 00:01:31.124
frequency repeater. It's easy to
pick up the signals.

00:01:31.124 --> 00:01:37.130
[indiscernible] nest and
Microsoft. I haven't seen it

00:01:42.336 --> 00:01:48.909
yet. This is why it's relevant.
Insteon by itself is not a true

00:01:48.909 --> 00:01:51.211
security problem but they're
being paired up with more and

00:01:51.211 --> 00:01:56.783
more home automation. This is
the weakest link. And I'm giving

00:01:56.783 --> 00:01:58.785
this talk to the weakest link
doesn't become part of the

00:01:58.785 --> 00:02:05.225
chain. Things you do with it.
Turn the lights on and off,

00:02:05.225 --> 00:02:09.930
sprinklers, alarms, lock
systems, water pumps, all the

00:02:09.930 --> 00:02:16.403
usual things. As I mentioned
about the weakest link, it's a

00:02:16.403 --> 00:02:22.876
protocol for a [indiscernible]
it can do many other things and

00:02:22.876 --> 00:02:29.383
this is the problem. For
example, putting a lock on, with

00:02:29.383 --> 00:02:35.856
this and RF [indiscernible] you
can open the lock. And hopefully

00:02:35.856 --> 00:02:42.829
we'll do it later. Just to be
fair, the lock is a good lock.

00:02:42.829 --> 00:02:48.835
It's not meta code but it's a
Schlage lock. The weakness is

00:02:51.838 --> 00:02:57.277
the Insteon bridge to it. They
published a paper on the RF

00:02:57.277 --> 00:03:04.017
protocol. Just Google it. It's
been published for 12 or 13

00:03:04.017 --> 00:03:10.223
years. The protocol has not
changed. It's been in heavy

00:03:10.223 --> 00:03:17.431
detail for the last decade or
so. This is the problem. They

00:03:17.431 --> 00:03:19.433
also have a very BIOSed --
[indiscernible] to compare

00:03:19.433 --> 00:03:25.439
themselves to other protocols.
(muffled) I'm a pretty good

00:03:28.875 --> 00:03:34.881
programmer. Over 20 years. My
code didn't work. Normally my

00:03:38.285 --> 00:03:44.291
code doesn't fail that bad, just
a little bit. This is

00:03:48.628 --> 00:03:54.634
interesting. I was getting
nothing. So I investigated. I

00:03:57.104 --> 00:04:04.578
successfully [indiscernible] the
protocol. The protocol is so

00:04:04.578 --> 00:04:10.584
full of shit that I wanted to
say bull shit in my

00:04:15.856 --> 00:04:22.462
documentation. [indiscernible]
contains less fiction. The fun

00:04:22.462 --> 00:04:28.468
part. The protocol that we're
talking about. This is the

00:04:31.872 --> 00:04:37.878
protocol, how accurate do you
think this is? Frequency, bull

00:04:41.281 --> 00:04:47.287
shit. It's pretty close. It's
off by a couple K just to make

00:04:53.527 --> 00:04:59.533
your demodulation a pain in the
ass. Bull shit. [indiscernible]

00:05:02.869 --> 00:05:08.875
Manchester. Believe it or not
[indiscernible]. Bull shit. Bull

00:05:11.344 --> 00:05:17.350
shit. Bull shit. 83 percent bull
shit. Insteon describes,

00:05:20.754 --> 00:05:28.295
[indiscernible] modulated using
frequency shift key. Let me back

00:05:28.295 --> 00:05:34.301
up, the module --
[indiscernible] they got that --

00:05:36.770 --> 00:05:43.810
deviation is a shift in the
center frequency to the

00:05:43.810 --> 00:05:49.816
[indiscernible]. Not the -- bull
shit. Let's say this is a typo.

00:05:52.986 --> 00:05:58.992
Clarify (audio blipped) very,
very clear to say, the first

00:06:02.862 --> 00:06:08.868
shift is 64K. On that point, the
actual spec is, it's a little

00:06:16.243 --> 00:06:22.249
off. Manchester. Claiming to be
a little over 3000, the -- not

00:06:28.588 --> 00:06:34.594
even close. Look at the standard
package format. This is a

00:06:39.899 --> 00:06:45.905
standard package that you would
expect to see transmitted. Who

00:06:50.210 --> 00:06:56.216
thinks it's accurate? Come on.
[indiscernible] malarkey. Not

00:06:58.451 --> 00:07:04.391
even close. This is the --
packet order. Let me back up,

00:07:10.730 --> 00:07:17.871
there is a preamble. Reality,
it's actually the flag. The

00:07:17.871 --> 00:07:21.775
[indiscernible] they give it to
you is even wrong. It gets

00:07:21.775 --> 00:07:27.781
worse. This had my head pounding
on the wall for quite a while.

00:07:34.120 --> 00:07:41.728
How the bits are encoded here.
[indiscernible] (muffled)

00:07:41.728 --> 00:07:47.734
wouldn't be that hard. Takes the
mac addresses and shifts them

00:07:52.172 --> 00:07:59.779
and x-rays every possible
combination against the packet.

00:07:59.779 --> 00:08:05.719
I was getting lots of hits. I
went back. These things actually

00:08:11.124 --> 00:08:17.130
work. >> My laser is missing. >>
I did not steal your laser. >>

00:08:25.071 --> 00:08:28.575
To points off for the speaker
for not being ready. I can't

00:08:28.575 --> 00:08:35.715
even see the screens.
Effectively this is how it's

00:08:35.715 --> 00:08:43.656
encoded. 3 bytes. Effectively 3
bytes. Every byte is encoded

00:08:43.656 --> 00:08:49.662
with ... Is it back yet? Back up
one. Okay. 3 bytes encoded. The

00:08:54.734 --> 00:09:02.609
first byte is 03, E5. Five,
eight bits. Transmitted

00:09:02.609 --> 00:09:09.749
[indiscernible] first. So you
flip the whole thing over. And

00:09:09.749 --> 00:09:17.690
Manchester encoded to make your
life just wonderful. And the

00:09:17.690 --> 00:09:23.696
line at the top is wrong. When
using -- if it's 3 bytes, a

00:09:28.802 --> 00:09:35.942
very, very inefficient method of
transmitting. In the packets,

00:09:35.942 --> 00:09:41.948
this is from the documentation,
this is correct, believe it or

00:09:44.651 --> 00:09:50.990
not. Shocking. The only
documentation that was accurate.

00:09:50.990 --> 00:09:58.364
Insteon talks about -- you can
see, after researching this it

00:09:58.364 --> 00:10:03.136
took me quite a while to figure
this out and it's complete poppy

00:10:03.136 --> 00:10:07.907
cock. It's not a linear shift
register. The actual limitation,

00:10:07.907 --> 00:10:14.781
by the way, [indiscernible] the
CRC which is interesting. It's

00:10:14.781 --> 00:10:20.787
basically - I tried to describe
this, I tried to work this slide

00:10:23.723 --> 00:10:29.729
out. It's easier to say this.
This will all be published with

00:10:31.965 --> 00:10:39.539
all the documentation for this.
Now for the fun part. Insteon

00:10:39.539 --> 00:10:45.345
claims to be secure. The
security to quote them, is two

00:10:45.345 --> 00:10:51.518
levels of security, a link
control system, where you create

00:10:51.518 --> 00:10:58.291
links without physical access to
your devices. Bull shit. And

00:10:58.291 --> 00:11:03.162
[indiscernible] for your device.
And then they talk about

00:11:03.162 --> 00:11:09.168
software programming and if you
go to the -- address you can get

00:11:11.171 --> 00:11:17.176
to it. I'm in the going to try
to pronounce that. My Russian

00:11:19.179 --> 00:11:24.717
friends say it's garbage. These
are quotes from the

00:11:24.717 --> 00:11:29.656
documentation here. The firmware
prohibits you from

00:11:29.656 --> 00:11:33.326
[indiscernible]. Firmware to
protect your secrets. Exactly.

00:11:33.326 --> 00:11:39.332
They mask the -- of all traffic.
Did I mention the -- protocols a

00:11:41.968 --> 00:11:49.342
few minutes ago. You have a
problem with the security here.

00:11:49.342 --> 00:11:53.680
[indiscernible] I call it mac
address, it's easier.

00:11:53.680 --> 00:11:58.484
Unencrypted. There is no
security. They published an

00:11:58.484 --> 00:12:04.090
entire white paper describing
their security versus --

00:12:04.090 --> 00:12:06.359
protocol and saying how they're
superior. [indiscernible] the

00:12:06.359 --> 00:12:14.167
claim of encryption. If you're a
street person with a sharp eye

00:12:14.167 --> 00:12:20.173
you'll spot this. A lot of my
friends that I think are very

00:12:22.642 --> 00:12:28.481
good missed this. They claim
they support encryption. They

00:12:28.481 --> 00:12:32.385
support encryption
[indiscernible]. A packet that

00:12:32.385 --> 00:12:39.559
is encrypted. If you read
between the lines here, it says

00:12:39.559 --> 00:12:46.065
the extended packets can contain
encrypted payloads. This is a

00:12:46.065 --> 00:12:53.239
quote from them. Encryption of
AES236. I think it said that

00:12:53.239 --> 00:12:57.777
because [indiscernible]. They
give out support encryption.

00:12:57.777 --> 00:13:03.583
Insteon doesn't encrypt
anything. If you go over the

00:13:03.583 --> 00:13:08.121
documentation, they mention
they're encrypted every chapter.

00:13:08.121 --> 00:13:15.928
Bull shit. I've never seen a
company lie so much about their

00:13:15.928 --> 00:13:21.134
documentation and be so clear
[indiscernible] in transmission.

00:13:21.134 --> 00:13:27.140
Let's get to more stuff here and
then I picked on Insteon enough.

00:13:29.609 --> 00:13:35.615
Originally in this talk I was
going to say how I -- the

00:13:38.051 --> 00:13:45.858
protocol and all that stuff.
Everybody in here has been to an

00:13:45.858 --> 00:13:51.864
SDR talk. Those guys do just as
good a job as I do. I'm not

00:13:55.635 --> 00:14:02.709
going to waste your time. I will
talk about the [indiscernible].

00:14:02.709 --> 00:14:09.882
It took me a while. There
doesn't documentation on it. I

00:14:09.882 --> 00:14:17.690
needed good information on how
to crack a CRC. It isn't that

00:14:17.690 --> 00:14:24.197
hard once you figure it out.
Their documentation says --

00:14:24.197 --> 00:14:30.703
linear shift register, bull
shit. I look at this

00:14:30.703 --> 00:14:37.410
[indiscernible] here is an
example of actual packets. If

00:14:37.410 --> 00:14:43.382
you bring the packets together
and x-ray the packets, the

00:14:43.382 --> 00:14:47.820
[indiscernible] equates to. The
first one, it ends in 0. That

00:14:47.820 --> 00:14:54.393
tells me that the second or the
lower -- is a (inaudible) and

00:14:54.393 --> 00:15:11.144
the upper level is not.
(muffled). Next one. Because

00:15:11.144 --> 00:15:21.053
there are [indiscernible]
packets of information. What I

00:15:21.053 --> 00:15:25.525
did was since those packets vary
by what they did, I -- together,

00:15:25.525 --> 00:15:32.498
the resulting data is changed
bits. You see here the packets,

00:15:32.498 --> 00:15:37.770
with themselves -- the bits have
changed.[indiscernible] doesn't

00:15:37.770 --> 00:15:52.084
effect anything. Next thing is
vary the packet variability. I

00:15:52.084 --> 00:15:55.788
was able to derive a formula.
This is how you crack an 8 bit

00:15:55.788 --> 00:16:03.963
CRC. In this case the algorithm
is simple. You take the first --

00:16:03.963 --> 00:16:25.184
[indiscernible] upper hand.
Again, proving they lied. That's

00:16:25.184 --> 00:16:33.493
protocol. Identifying the
signals, like I said I'm not

00:16:33.493 --> 00:16:45.471
going to waste your time with
that one.[indiscernible] can be

00:16:45.471 --> 00:16:50.142
useful. A handful of tools that
are useful. I based the tools

00:16:50.142 --> 00:17:00.319
off of (inaudible) hardware.
Using [indiscernible] RF cat. A

00:17:00.319 --> 00:17:07.960
modulator for this. Here is an
example of commands. Read and

00:17:07.960 --> 00:17:13.633
decode live streams of the data.
With this live stream you can

00:17:13.633 --> 00:17:18.871
play and replay and attack
systems. To transmit a packet,

00:17:18.871 --> 00:17:29.749
same thing. After this we'll do
some question and answer. Tough

00:17:29.749 --> 00:17:52.171
crowd. Running ahead of
schedule. >> Hopefully some of

00:17:52.171 --> 00:18:29.208
this will work. Likely none of
it will but we'll see. No video,

00:18:29.208 --> 00:19:16.522
awesome. First thing we have
going here is the lovely little

00:19:16.522 --> 00:19:21.861
RF cat dongle. You may notice
this one is soldered and hot

00:19:21.861 --> 00:19:34.740
glued. Very simply we have a
couple scripts here. One is

00:19:34.740 --> 00:19:38.310
going to receive data from the
RF cat and out put it to the

00:19:38.310 --> 00:19:50.990
screen showing you what the
packets look like. About this.

00:19:50.990 --> 00:20:00.266
So if you'll notice, I have the
very same device which is a

00:20:00.266 --> 00:20:04.870
light switch attached to a power
plug. Some of you may think this

00:20:04.870 --> 00:20:12.478
is insane but it's also a
transmitter. If I hit up and

00:20:12.478 --> 00:20:20.753
down I start getting packets. So
the 11, 78, 28 here is I believe

00:20:20.753 --> 00:20:23.923
one of the lights that we do not
have hooked up because we could

00:20:23.923 --> 00:20:29.662
not find a lamp. And the other
IDs are various things that they

00:20:29.662 --> 00:21:46.372
sync to. >> (inaudible) (too far
from mic). >> Please take a

00:21:46.372 --> 00:22:07.293
Screenshot of this and the tools
will be posted after the talk.

00:22:07.293 --> 00:22:10.062
>> The flags here is the only
thing correctly documented in

00:22:10.062 --> 00:22:15.067
the protocol. You have your
photographs. The to address. And

00:22:15.067 --> 00:22:20.172
in the documentation, they talk
about how it's supposed to go to

00:22:20.172 --> 00:22:24.843
the -- phone address transmitted
first. The reason that is not

00:22:24.843 --> 00:22:29.515
done is because of the pairing.
It effectively only talks to

00:22:29.515 --> 00:22:33.419
devices that you're paired with.
So they're more concerned with

00:22:33.419 --> 00:22:38.424
the from address than the to
address. >> I will ask for

00:22:38.424 --> 00:22:46.365
anyone that works on encryption,
does any of that look like RSA

00:22:46.365 --> 00:22:52.371
to you? >> You literally with
our tools, you can basically cut

00:22:55.274 --> 00:22:59.044
and paste the transmitter and
simple replay attack, no problem

00:22:59.044 --> 00:23:04.717
at all. It will regenerate the
CRC for you. >> We could prove

00:23:04.717 --> 00:23:12.224
that if we had a lamp. >> We
tried to get a lamp for this

00:23:12.224 --> 00:23:19.231
room and a lightbulb. But it's
really hard to get a lamp in a

00:23:19.231 --> 00:23:25.738
hotel. We tried. We stopped by
stores trying to find a lamp. We

00:23:25.738 --> 00:23:31.710
wanted the stocking lamp with
the leg. No one sold it around

00:23:31.710 --> 00:23:38.450
here, we looked. >> I have
attempted to sync this to the RF

00:23:38.450 --> 00:23:42.421
lock controller through the
light switch to get to the lock

00:23:42.421 --> 00:23:48.427
and I do not believe I got it
fully working. Incorrect. But

00:23:56.635 --> 00:24:00.706
the lock does in fact actually
work if you push the button and

00:24:00.706 --> 00:24:06.612
remember to bring all the gate
way parts not the ones you only

00:24:06.612 --> 00:24:12.484
think you need? >> That was my
bad. I was backing up things

00:24:12.484 --> 00:24:17.022
from Berkeley to here and I
forgot the Insteon programmer

00:24:17.022 --> 00:24:23.395
and I bought one on Amazon and
it doesn't seem to talk to my

00:24:23.395 --> 00:24:29.268
lock. >> Note, if you want to
use this, when you run the

00:24:29.268 --> 00:24:32.638
script and exit it, the RF cat
will stop working until you

00:24:32.638 --> 00:24:35.908
unplug it and plug it in again.
Standard debugging strategy

00:24:35.908 --> 00:24:43.849
applies. >> The RF cat is a
wonderful device but it's

00:24:43.849 --> 00:24:48.987
finicky. RF cat likes Manchester
data or not Manchester data.

00:24:48.987 --> 00:24:53.292
With the Insteon protocol it's
26 bits of Manchester and two

00:24:53.292 --> 00:24:56.628
runs and 26 bits of Manchester
so the dongle will not receive

00:24:56.628 --> 00:25:03.068
it. You can put the dongle into
carrier mode within a sync bit

00:25:03.068 --> 00:25:09.308
and you can receive and encode
the raw data yourself. And we

00:25:09.308 --> 00:25:14.513
transmit similar, RF transmits
the preamble and the code. The

00:25:14.513 --> 00:25:20.386
most annoying thing, I meant to
put it up here, because of the

00:25:20.386 --> 00:25:25.991
two runs between the Manchester,
you see four runs in a row,

00:25:25.991 --> 00:25:31.230
three runs in a row,
[indiscernible]. I hit my head

00:25:31.230 --> 00:25:38.570
on the wall for about a month. I
looked at the modulator and what

00:25:38.570 --> 00:25:45.911
I did wrong. What is going on
here. I dug into it. No. They

00:25:45.911 --> 00:25:50.616
just broke the Manchester
encoding. The question is --

00:25:50.616 --> 00:25:54.820
different documentation of
vendors. They told me it's

00:25:54.820 --> 00:25:59.958
non-disclosure and can't talk to
me about it. There is a command

00:25:59.958 --> 00:26:05.964
to turn off RF in the devices
but they couldn't tell me that

00:26:08.000 --> 00:26:14.006
command. I plan to reverse
engineer it. >> We have a

00:26:19.411 --> 00:26:26.185
tradition here at DEFCON for our
first-time speakers. Many of you

00:26:26.185 --> 00:26:32.191
might be familiar with it.
Usually my cohort comes out here

00:26:34.526 --> 00:26:40.532
with a giant bottle of Jack. I
have a bottle of Jack. Also

00:26:42.835 --> 00:26:47.906
actually funny, this is a
tradition for first-time

00:26:47.906 --> 00:26:52.978
speakers. Now what's funny is
Pete is not a first-time speaker

00:26:52.978 --> 00:26:58.984
at DEFCON. He is. Which is
hilarious to me. Because I was

00:27:02.788 --> 00:27:07.726
like, you know, Pete's been
speaking at DEFCON since like

00:27:07.726 --> 00:27:14.132
six. And you, you, you. >> I'm
the FMG. >> He is not a

00:27:14.132 --> 00:27:20.138
first-time speaker. >>
Congratulations, you made it to

00:27:23.375 --> 00:27:29.381
DEFCON. >> To DEFCON. >> That
was bad. Can I have a second

00:27:34.753 --> 00:27:41.493
one? >> Sure. >> Anybody have a
donation of chest hair after the

00:27:41.493 --> 00:27:46.131
talk, see any of the three of us
and we'll be glad to donate. >>

00:27:46.131 --> 00:27:52.137
Back to the slides here. Scroll
back up a little bit. In here,

00:27:55.107 --> 00:28:02.014
[indiscernible] byte order
problems. All my code talks to

00:28:02.014 --> 00:28:08.020
each other in ones and zeros.
The demodulator, ones and zeros.

00:28:11.623 --> 00:28:17.629
Anybody familiar with net PBM
(ph.). It makes the code a lot

00:28:22.067 --> 00:28:28.073
more portable. (muffled) arc10
to demodulate stuff. I want to

00:28:30.776 --> 00:28:36.782
show you here, invert the 1s and
0s. So in this case, we have a

00:28:43.855 --> 00:28:49.861
new packet, a new line. You have
101010 and where are the

00:28:52.030 --> 00:28:59.304
bastards? See the three, three
zero there is and three ones,

00:28:59.304 --> 00:29:01.940
that is another packet and
another set of three ones there.

00:29:01.940 --> 00:29:07.079
Those are all the cases where I
put the other ones into the code

00:29:07.079 --> 00:29:11.183
and you can't de-Manchester it.
0s and 1s because they invert

00:29:11.183 --> 00:29:16.021
the frequency shift. I think a
bunch of guys sat at a table

00:29:16.021 --> 00:29:20.492
with beer and said let's make
this hard, flip it over. Let's

00:29:20.492 --> 00:29:24.763
do a couple other things to
screw with you. >> As you can

00:29:24.763 --> 00:29:30.769
see, it worked. >> The question
is how does this compare to the

00:29:33.705 --> 00:29:39.711
power line protocol. I have no
idea. I am afraid to hook up my

00:29:44.850 --> 00:29:50.856
gear to a power line. >> If
you'd like to hook up your gear

00:29:55.961 --> 00:30:01.967
to a power line, we will watch
and put it on YouTube. >>

00:30:07.072 --> 00:30:14.246
[indiscernible] I have a key
fob, hopefully these tools will

00:30:14.246 --> 00:30:20.252
be useful for other tools. I
tried to write slides on how I

00:30:24.556 --> 00:30:30.562
cracked the protocol. I can't
say how. I basically stared at

00:30:32.864 --> 00:30:36.501
it until it came to me. I wrote
an XO program. Finally I -- why

00:30:36.501 --> 00:30:38.904
and you see the rivers and
streams of the data and then you

00:30:38.904 --> 00:30:40.939
see a pattern and then you
analyze the patterns. This is

00:30:40.939 --> 00:30:43.875
how I did it. I can't say how I
did it. I stared at it and

00:30:43.875 --> 00:30:45.877
eventually I saw the patterns
[indiscernible]. >> This is the

00:30:45.877 --> 00:30:48.613
command that would have turned
on the lamp had we had one. >>

00:30:48.613 --> 00:30:54.619
How are we doing on time? >>
Severely painfully early. >>

00:30:56.621 --> 00:31:02.561
Welshing I guess we have time
for questions now. I guess it's

00:31:05.330 --> 00:31:11.336
time for Q and A and that way
you can escape the crowds.

00:31:14.806 --> 00:31:20.812
Replay it back or if you ever
programmed a PLM it's the same

00:31:24.282 --> 00:31:31.790
only a different order. You can
cut and paste. Or you can

00:31:31.790 --> 00:31:37.329
construct it yourself. The
question is how the mitigate

00:31:37.329 --> 00:31:43.335
this. There isn't any way to
mitigate this. You can turn off

00:31:46.838 --> 00:31:52.844
RF in your house and
unfortunately there is no way of

00:31:55.580 --> 00:31:59.217
doing it, the command exists in
the devices but it's not

00:31:59.217 --> 00:32:05.157
[indiscernible]. There is a way
of fixing it and hopefully after

00:32:07.592 --> 00:32:13.598
this talk we'll put out a fix on
how to turn off the RF so your

00:32:17.235 --> 00:32:22.707
house isn't full of
transmitters. 950 megahertz. I

00:32:22.707 --> 00:32:30.215
have good range on that. These
devices of firmware are not

00:32:30.215 --> 00:32:37.722
upgrade able. They cannot be
upgraded. I don't own a

00:32:37.722 --> 00:32:43.862
[indiscernible] yet. I have a
bridge port. Z wave is

00:32:43.862 --> 00:32:49.868
encrypted. Questions? Or we head
to the bar. The question is what

00:32:52.037 --> 00:32:56.808
costs money. I have
[indiscernible] challenge me,

00:32:56.808 --> 00:33:02.747
that is not a security problem,
why you have to talk about it.

00:33:05.617 --> 00:33:10.689
Well, because they lied. And as
I pointed out, turning

00:33:10.689 --> 00:33:17.662
lightbulbs on and off is not the
end of the world, it's not going

00:33:17.662 --> 00:33:23.101
to bring down planes. But
Insteon has paired up with nest

00:33:23.101 --> 00:33:26.705
and others and it's a weak link.
Let's address it before it

00:33:26.705 --> 00:33:32.711
becomes the weak link. How big
is your antenna? Their devices

00:33:35.080 --> 00:33:37.983
themselves make it half way
across my 1500 square foot

00:33:37.983 --> 00:33:43.989
house. I have a nice fiber 90B
antenna. With radio, if you can

00:33:46.191 --> 00:33:51.997
see it, you can control it.
Questions, answers, accusations?

00:33:51.997 --> 00:33:59.704
All devices repeat. So if you
have a light switch and a

00:33:59.704 --> 00:34:06.711
control device which are on hard
wire, all the switches will

00:34:06.711 --> 00:34:11.850
bridge also. Basically all the
repeaters repeat everything.

00:34:11.850 --> 00:34:18.924
There can be a three hop count
but that [indiscernible] through

00:34:18.924 --> 00:34:24.930
the network anyway? >> I think I
can demo that. >> Yes, DEFCON

00:34:27.299 --> 00:34:33.305
will get the slides and put them
up. And the slides will include

00:34:35.674 --> 00:34:41.680
GitHub. My GitHub is evil peach.
Evil peach at GitHub. I will put

00:34:44.015 --> 00:34:50.021
my personal code up there. >> --
to get this paired. But right

00:34:52.691 --> 00:34:57.162
here at the bottom, these are
the commands from the lock

00:34:57.162 --> 00:34:59.464
controller. When I push the
button it undid the lock. And if

00:34:59.464 --> 00:35:05.403
I push the light switch, you
should not see those repeat. >>

00:35:10.542 --> 00:35:16.548
Basically those are the commands
to unlock the front door. I

00:35:20.752 --> 00:35:26.758
guess we're done early. I'm not
going to waste your time. Enjoy.

