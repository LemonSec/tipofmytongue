00:00:00.133 --> 00:00:04.037
>>Good morning and welcome to
DEFCON Sunday! How are we doing?

00:00:04.037 --> 00:00:08.408
Yeah! >>(crowd cheers) >> That
is a disturbing level of

00:00:08.408 --> 00:00:13.881
enthusiasm. Wow. Welcome to the
most coveted speaking slot,

00:00:13.881 --> 00:00:18.919
first thing in the morning on
Sunday. Um, funny story, a

00:00:18.919 --> 00:00:22.222
couple years ago, I spoke at
Black Hat and I spoke at the

00:00:22.222 --> 00:00:26.460
same time Dan Kaminsky was
giving his talk on DNS, and

00:00:26.460 --> 00:00:30.631
hardly anyone came to that. So
here I am, and David was my

00:00:30.631 --> 00:00:34.134
speaker handler there so I'm
returning the favor introducing

00:00:34.134 --> 00:00:38.138
him in a highly coveted speaking
spot. It's an interesting talk.

00:00:38.138 --> 00:00:44.211
I'm excited to hear more about
this stuff. Let's give Dave

00:00:44.211 --> 00:00:50.217
Mortman a big hand. >> Good
morning, everyone. Thank you for

00:00:56.089 --> 00:01:00.360
coming out at this really
stupidly early hour. I

00:01:00.360 --> 00:01:04.564
appreciate the effort. Let's
talk about Docker and the whole

00:01:04.564 --> 00:01:10.571
security thing with regards to
that. A little bit about me. So

00:01:13.607 --> 00:01:16.376
in my day job I'm a chief
security architect for Dell

00:01:16.376 --> 00:01:20.314
software. In spite of that, they
let me use a Mac for the most

00:01:20.314 --> 00:01:24.518
part, unless I go to customers
in which cases I pull up the

00:01:24.518 --> 00:01:29.222
Windows thing. I do clouding
stuff most of the stuff and I'm

00:01:29.222 --> 00:01:34.995
poking around a bit at Docker.
It got a lot of publicity in the

00:01:34.995 --> 00:01:39.633
last year. Everyone is like
Docker this and that. You can't

00:01:39.633 --> 00:01:42.502
go anywhere near a tech blog
without someone talking about

00:01:42.502 --> 00:01:46.073
how awesome Docker is. What is
the really big deal about

00:01:46.073 --> 00:01:50.844
Docker? In some sense it's not a
big deal at all but a container

00:01:50.844 --> 00:01:55.716
but for those of us around for a
while, remember the jails? I

00:01:55.716 --> 00:02:01.655
remember studying TARUT because
that's more secure. The cool

00:02:04.091 --> 00:02:08.228
thing about containers is that
standard containers or jails or

00:02:08.228 --> 00:02:11.531
LXC, which is the modern version
of that stuff, and you wrap it

00:02:11.531 --> 00:02:17.604
with meta data. You give it
context of what's inside the

00:02:17.604 --> 00:02:23.944
container. You say, hey, I'm
containable, but I can tell the

00:02:23.944 --> 00:02:28.148
rest of the operating system
what's inside it. Now I can say,

00:02:28.148 --> 00:02:34.521
hey, this is a format. We have
taken a container and made it a

00:02:34.521 --> 00:02:38.959
package format. So now it's just
like any other packaging format

00:02:38.959 --> 00:02:42.629
instead of a single executables
with a list of dependencies you

00:02:42.629 --> 00:02:45.365
need to download yourself or
rely on a favorite package of

00:02:45.365 --> 00:02:49.069
choice, all are self-contained
in this little package. It's

00:02:49.069 --> 00:02:54.274
cool and effective from an
operational perspective. Life

00:02:54.274 --> 00:02:58.178
gets easier especially when you
look at things like, hey, I'm

00:02:58.178 --> 00:03:01.415
developing something, and I need
to hand it off to QA, who then

00:03:01.415 --> 00:03:05.485
hands it off to some other
security team for evaluation who

00:03:05.485 --> 00:03:07.721
hands it off to production. If
you're lucky, that's the order

00:03:07.721 --> 00:03:10.657
it goes in. If you're not lucky,
we get calls three weeks later.

00:03:10.657 --> 00:03:15.729
It's in production. Can you scan
it? In theory that's how it

00:03:15.729 --> 00:03:19.433
works. The great thing means
that what goes from devto

00:03:19.433 --> 00:03:24.571
production is the actual same
exact code. You avoid things

00:03:24.571 --> 00:03:29.543
like it worked on my laptop, or,
well, we thought you had this

00:03:29.543 --> 00:03:32.813
version of the library in
production, and but in dev we're

00:03:32.813 --> 00:03:35.482
three versions later. It's
convenient that way. From an

00:03:35.482 --> 00:03:41.521
operational perspective it's
awesome. The problem is, of

00:03:41.521 --> 00:03:44.624
course, that everything has
security issues in it because,

00:03:44.624 --> 00:03:50.597
you know, what doesn't? In the
last year people have gone to

00:03:50.597 --> 00:03:54.101
lots of effort and say, oh, my
God, containers don't contain.

00:03:54.101 --> 00:03:57.871
They're not secure. They're not
like a VM, because VMs are

00:03:57.871 --> 00:04:02.509
secure. We know that, right?
Containers, you know, in some

00:04:02.509 --> 00:04:09.416
absolute sense are not as secure
as VM. They're much lighter

00:04:09.416 --> 00:04:12.252
weight in terms of security in
terms of isolation, but they're

00:04:12.252 --> 00:04:18.925
pretty good, and the fact is for
the most part they actually do

00:04:18.925 --> 00:04:21.495
contain. There's a couple of
issues in a little bit about

00:04:21.495 --> 00:04:25.031
places where they don't do full
containment. If you looked at

00:04:25.031 --> 00:04:29.669
what it was like 20 years with
jails, you've significantly

00:04:29.669 --> 00:04:34.207
reduced the attack surface that
someone can go after.

00:04:34.207 --> 00:04:37.177
Realistically if they escape the
container, they're just running

00:04:37.177 --> 00:04:43.216
on bare metal. So it's not
actually a huge loss in security

00:04:43.216 --> 00:04:46.887
that you get at that point. In
particular, there were a few

00:04:46.887 --> 00:04:50.524
blog posts over the last year
where people are like, trivial

00:04:50.524 --> 00:04:53.193
escaped from the container. I
can do this. There was a

00:04:53.193 --> 00:05:00.200
beautiful one as a Docker user
launch a container, create an

00:05:00.200 --> 00:05:04.504
SUID shell and copy it out of
the container and get it en

00:05:04.504 --> 00:05:10.911
route on the SUS? Whoops. That's
scary. I should validate that.

00:05:10.911 --> 00:05:16.249
I'm taking all the posts of
container escapes that people

00:05:16.249 --> 00:05:20.687
have done in the last year, and
Docker has fixed all of them

00:05:20.687 --> 00:05:27.093
mostly through changing the
default configurations. Funny

00:05:27.093 --> 00:05:30.030
how that works. There's things
like -- it's things like, you

00:05:30.030 --> 00:05:36.036
know what? Don't run Docker as
root. Don't run Docker as root

00:05:38.705 --> 00:05:43.610
and do a few other basic sort of
hygiene-type things. The

00:05:43.610 --> 00:05:46.179
equivalent of washing your
hands. Putting away the trash.

00:05:46.179 --> 00:05:53.520
That's good. Escapes aren't
trivial anymore, however,

00:05:53.520 --> 00:05:58.291
there's still a lot to do. Where
are we today? What do we get

00:05:58.291 --> 00:06:02.395
from Docker? What does Docker
give you or other container

00:06:02.395 --> 00:06:07.267
strength? They're all the same.
There's app C and there's a

00:06:07.267 --> 00:06:10.770
clear Linux thing that's not
quite a container, but they all

00:06:10.770 --> 00:06:15.475
have the same basic structure
going on. They all have, you

00:06:15.475 --> 00:06:21.681
know, some sort of -- where is
it? Some sort of basic container

00:06:21.681 --> 00:06:27.787
management to limit what you can
do. I got ahead of myself here.

00:06:27.787 --> 00:06:31.224
They all have like, you know, C
groups, and they all have mean

00:06:31.224 --> 00:06:34.895
spaces mostly. Most of the areas
are name spaces. This is good.

00:06:34.895 --> 00:06:38.598
If you're in one work stack, you
can't see another container's

00:06:38.598 --> 00:06:45.138
network stack. Generally a good
idea. Excuse me. They all have

00:06:45.138 --> 00:06:50.143
things like IP tables. The file
system is own name spaces and

00:06:50.143 --> 00:06:54.314
processes with their own name
spaces. There's two key places

00:06:54.314 --> 00:07:00.153
that they're not yet name-spaced
that are being fixed. There's

00:07:00.153 --> 00:07:03.523
not a user name space yet. This
means that if you're operating

00:07:03.523 --> 00:07:06.593
as a user -- a particular user
in a container and you scan the

00:07:06.593 --> 00:07:10.430
container somehow, you operate
as that same user outside the

00:07:10.430 --> 00:07:15.368
container. Not so good. They're
fixing that, and the next

00:07:15.368 --> 00:07:19.172
release of Docker we talk more
about that later. It's implants

00:07:19.172 --> 00:07:23.076
name spaces in the underlying
structure, so pretty soon we

00:07:23.076 --> 00:07:27.814
have user name spaces. Another
big issue, however, is that the

00:07:27.814 --> 00:07:33.820
kernel key space, that place
with cryptO secrets is not name

00:07:36.122 --> 00:07:42.829
spaced at all. As the host LS if
you put a critical kernel key

00:07:42.829 --> 00:07:50.303
space, any of the containers can
see that. Not so good. Also, if

00:07:50.303 --> 00:07:53.773
you have local containers
running, any one container

00:07:53.773 --> 00:07:57.544
happens to put something to the
kernel key space, all the

00:07:57.544 --> 00:08:02.382
containers are see it. So if you
need to use containers, you

00:08:02.382 --> 00:08:04.984
really care about what you're
putting -- what kind of key

00:08:04.984 --> 00:08:09.422
management and secrets you're
dealing with, and similarly be

00:08:09.422 --> 00:08:13.827
careful about user space stuff.
This is why the state-of-the-art

00:08:13.827 --> 00:08:17.464
is to run one container per VM
or one container per bare metal.

00:08:17.464 --> 00:08:20.934
You get a lot of benefits of
containers with production

00:08:20.934 --> 00:08:23.970
without running risks around the
key space situation. That's a

00:08:23.970 --> 00:08:30.310
useful thing to consider. The
key space stuff is addressed by

00:08:30.310 --> 00:08:36.316
running SC Linux, and if you run
SC Linux -- keep your hands up.

00:08:36.316 --> 00:08:41.221
Keep your hands up if using SC
Linux, the first thing you do is

00:08:41.221 --> 00:08:47.394
turn it off when you get your
operating system up. Exactly. SC

00:08:47.394 --> 00:08:51.898
Len nix is a really cool tool
for most of us if we're not Dan

00:08:51.898 --> 00:08:56.803
Walsh we don't use it to the
full extent of its capabilities.

00:08:56.803 --> 00:09:00.540
This is one of the pain points
still in containers. Running SC

00:09:00.540 --> 00:09:03.777
Linux by default solves this
particular key space issue is my

00:09:03.777 --> 00:09:07.580
understanding, but to really get
the benefit out of SC Linux

00:09:07.580 --> 00:09:12.986
takes a lot of time and effort.
All right. So there's dedicated

00:09:12.986 --> 00:09:17.357
network stacks as I mentioned.
When Docker first came out,

00:09:17.357 --> 00:09:20.927
there was no signatures, there
was no one validating the

00:09:20.927 --> 00:09:27.100
container you were downloading
from a registry was actually the

00:09:27.100 --> 00:09:32.806
container you thought you were
getting. Nothing. That's crazy

00:09:32.806 --> 00:09:36.843
kind of. It's not comforting at
all. It's terrible. In dock to

00:09:36.843 --> 00:09:42.749
her 1.3, maybe 1.4, they started
to offer selling to manifests

00:09:42.749 --> 00:09:45.752
for official Docker containers.
So if you were going to download

00:09:45.752 --> 00:09:49.189
a container from Docker,
Docker.org that has the official

00:09:49.189 --> 00:09:52.292
Docker stamp of approval on it,
the manifest would describe the

00:09:52.292 --> 00:09:56.663
container signature on it.
That's a good step forward,

00:09:56.663 --> 00:10:00.600
except for the part where the
container itself isn't signed so

00:10:00.600 --> 00:10:04.471
there's no way to actually
validate what's in the manifest

00:10:04.471 --> 00:10:10.477
is in the container. Boy howdy
is that manifest signed. I was

00:10:10.477 --> 00:10:15.715
like, okay. So what does this
get me? It gets me a validated

00:10:15.715 --> 00:10:22.155
manifest, so I feel comfortable.
Okay, I don't. But they're

00:10:22.155 --> 00:10:25.124
fixing that. I'll talk about
that later as well. That's kind

00:10:25.124 --> 00:10:30.630
of cool. What Docker has done,
the folks have hired new people

00:10:30.630 --> 00:10:34.033
in the last six months to a year
to work on security Docker. I

00:10:34.033 --> 00:10:38.104
have spoken with them several
times now, and they basically

00:10:38.104 --> 00:10:41.074
released Docker knowing there
were security issues. They're

00:10:41.074 --> 00:10:43.977
like, this is data code. We have
a road map for fixing the

00:10:43.977 --> 00:10:47.180
security issues, and every
single release adds extra

00:10:47.180 --> 00:10:49.616
functionality on the front.
We're getting better. That's

00:10:49.616 --> 00:10:52.952
what we want to be. Definitely
not the opposite trend or

00:10:52.952 --> 00:10:58.324
direction. They recently
released a high level paper on

00:10:58.324 --> 00:11:00.260
securing Docker. I'll be posting
the new version of the slides

00:11:00.260 --> 00:11:06.432
online and a whole section with
all the links to it over the

00:11:06.432 --> 00:11:11.704
course of the talk. So you have
a great high level paper on how

00:11:11.704 --> 00:11:15.308
Docker works and containers work
in general and security things

00:11:15.308 --> 00:11:22.582
to do. They recently released
with CIS a document on how to

00:11:22.582 --> 00:11:28.588
harden Docker. It's 190 pages.
So I had a lot of spare time

00:11:32.125 --> 00:11:34.127
apparently and read it all. I've
put up some highlights for you

00:11:34.127 --> 00:11:38.598
so you don't need to read it
all. It is worth going through.

00:11:38.598 --> 00:11:42.969
One of things you're going to
find here is as you go to

00:11:42.969 --> 00:11:47.540
lockdown Docker, this is listed
and sounds familiar with locking

00:11:47.540 --> 00:11:50.643
down anything else, really.
There's a few special things

00:11:50.643 --> 00:11:53.913
around Docker, but realistically
speaking it's an application and

00:11:53.913 --> 00:11:59.919
has special corner cases, but in
the end there's a lot to do just

00:12:02.789 --> 00:12:08.361
like anything else. So they
recommend let's restrict network

00:12:08.361 --> 00:12:12.165
traffic between containers. If
you run multiple containers on

00:12:12.165 --> 00:12:17.570
your host there, don't allow
Docker or the containers to talk

00:12:17.570 --> 00:12:21.307
through internal buses, through
internal operating system guts.

00:12:21.307 --> 00:12:27.914
Make it go over the network.
Excuse me. That's a great thing.

00:12:27.914 --> 00:12:30.116
Make sure everything goes across
the network because you

00:12:30.116 --> 00:12:33.586
maintained that network name
space and the integrity of those

00:12:33.586 --> 00:12:37.023
separate network stacks. As soon
as the containers communicate

00:12:37.023 --> 00:12:40.326
through the host US, you lose
protection. Always, always,

00:12:40.326 --> 00:12:44.297
always make containers talk
across the network. Generally

00:12:44.297 --> 00:12:49.769
just using loop-back anyway, but
it goes out through stack and

00:12:49.769 --> 00:12:55.141
back through and IP tables and
things also take effect. Here's

00:12:55.141 --> 00:13:00.680
a clever one. Turn on audit D.
For all of the Docker files in

00:13:00.680 --> 00:13:04.584
the network itself, and here's
the radical part. You actually

00:13:04.584 --> 00:13:09.155
have to read the logs. I know, I
know. We don't generally do that

00:13:09.155 --> 00:13:11.324
in this industry. We just
collect the logs or spray them

00:13:11.324 --> 00:13:18.264
to DEF install, but it's 10:00
a.m. on Sunday. Most of us are

00:13:18.264 --> 00:13:22.802
somewhat hung over. Please
review the logs. It will make

00:13:22.802 --> 00:13:25.104
your auditors happy at least,
and they'll be nicer to you.

00:13:25.104 --> 00:13:30.443
That's worth something like
right there, I think. This is a

00:13:30.443 --> 00:13:37.016
good default. Don't turn to
SSLLS when connecting to Docker

00:13:37.016 --> 00:13:43.222
registry. I think we all know
this. Don't turn it off anyway.

00:13:43.222 --> 00:13:47.860
In fact, don't let the Docker
itself listen on the network. If

00:13:47.860 --> 00:13:50.830
you're in production you may not
be able to avoid that, but if

00:13:50.830 --> 00:13:54.434
you doing it local that's not a
connection. The Docker client is

00:13:54.434 --> 00:13:59.405
right there on the machine
anyway. Don't have the Docker

00:13:59.405 --> 00:14:03.976
delistening on the network. That
gives you a lot of protection he

00:14:03.976 --> 00:14:07.046
is suspiciously because the
Docker API has no

00:14:07.046 --> 00:14:12.952
authentication. It has no
concept of identity yet or

00:14:12.952 --> 00:14:16.522
roles. It's just local. They're
saying, here's me. There's me.

00:14:16.522 --> 00:14:22.528
So, please, don't go out of
network. After you go to the

00:14:26.099 --> 00:14:30.803
network, enable circuit-based on
top of that, sin generics or

00:14:30.803 --> 00:14:35.074
something like that. You get the
comfort level that only the

00:14:35.074 --> 00:14:39.645
people you know are using that.
There's no authentication, proxy

00:14:39.645 --> 00:14:42.348
something on top of it. Give
yourself some safety if you put

00:14:42.348 --> 00:14:47.754
it on the network. This happens
in any larger environment or if

00:14:47.754 --> 00:14:52.024
you're doing some sort of
orchestration using third-party

00:14:52.024 --> 00:14:54.560
tools or something. You have to
put it on the network, which

00:14:54.560 --> 00:15:01.167
sucks, but give yourself some
protection. Another radical

00:15:01.167 --> 00:15:06.005
idea. Lock down all the config
files to root only. They aren't

00:15:06.005 --> 00:15:09.575
containing critical information,
so they shouldn't be writable by

00:15:09.575 --> 00:15:15.581
anyone else but can be readable
by the public. If you use search

00:15:17.717 --> 00:15:23.623
keys make sure they're owned by
root 400. This is more or less

00:15:23.623 --> 00:15:27.527
obvious, but I've seen multiple
test installers of Docker where

00:15:27.527 --> 00:15:29.862
they put a cert there, so check
those things. This is not rocket

00:15:29.862 --> 00:15:35.868
science. That's a different
talk. Don't run your containers

00:15:38.571 --> 00:15:41.507
as root. Run them as non-root
users which gives you some

00:15:41.507 --> 00:15:48.181
protection like with Apache and
Tomcat and my SQL. This is a

00:15:48.181 --> 00:15:54.187
weird thing, I know. Don't
download the Internet and click

00:16:00.726 --> 00:16:08.134
on it, right, people? Come on.
That was funny. Okay. I'll get

00:16:08.134 --> 00:16:10.136
more for that later. This is
generally a problem space. It's

00:16:10.136 --> 00:16:16.809
not an operational issue, but
I'll get to that later on.

00:16:16.809 --> 00:16:21.147
Minimize your package installs.
Basic systems admin 101. Don't

00:16:21.147 --> 00:16:26.686
install shit you don't need in
your container. One parent

00:16:26.686 --> 00:16:29.722
process, keep it simple.
Containers are fast to spin off.

00:16:29.722 --> 00:16:31.724
They're increasingly SOA and
things like that. If you have a

00:16:31.724 --> 00:16:33.726
container, just have one app
running inside that thing. If

00:16:33.726 --> 00:16:35.728
it's a microservice, fine. You
don't need to build your entire

00:16:35.728 --> 00:16:37.730
application stack top-to-bottom
in one container. It's tempting,

00:16:37.730 --> 00:16:43.736
it's all one cute package. It's
not harder to spin it with three

00:16:56.616 --> 00:17:04.490
separate containers and keep the
communications more secure. It's

00:17:04.490 --> 00:17:07.793
easier to audit that package,
and it's much easier to avoid

00:17:07.793 --> 00:17:11.564
dependency conflicts and issues
with things brought in by

00:17:11.564 --> 00:17:14.000
third-party libraries I'll get
into later. Take advantage of --

00:17:14.000 --> 00:17:17.303
Linux has this concept of kernel
capabilities. Take advantage of

00:17:17.303 --> 00:17:23.309
those. Restrict that container
to have the capabilities at the

00:17:25.478 --> 00:17:31.083
kernel level that it needs.
That's the benchmark, the CIS

00:17:31.083 --> 00:17:35.554
benchmark has a great list of
what all those capabilities are,

00:17:35.554 --> 00:17:38.057
and by default -- the default
for them -- these are pretty

00:17:38.057 --> 00:17:43.162
good. If you start to get some
weird, raw packet stuff, you may

00:17:43.162 --> 00:17:47.033
need to adjust that a bit.
Defaults are good. This is one

00:17:47.033 --> 00:17:50.536
where I'll say trust the
default, but be aware of certain

00:17:50.536 --> 00:17:56.175
things. It does funky things in
general, so that might break

00:17:56.175 --> 00:18:01.747
working on fixing that with the
capabilities thing as well. The

00:18:01.747 --> 00:18:07.887
size okay for everyone? Okay.
Generally speaking when you talk

00:18:07.887 --> 00:18:11.958
-- the default capabilities are
general admin, sys module, that

00:18:11.958 --> 00:18:18.331
does it. That's all you need.
Don't use privileged containers.

00:18:18.331 --> 00:18:20.533
A privileged container has root
level access, lets you do root

00:18:20.533 --> 00:18:22.768
level functionality. Generally
speaking, if you're doing root

00:18:22.768 --> 00:18:28.774
level privilege containers,
you're actively abusing the

00:18:33.145 --> 00:18:36.515
point of containers and negating
them as well. That's not so

00:18:36.515 --> 00:18:40.319
useful. Avoid privileged
containers unless you really,

00:18:40.319 --> 00:18:46.325
really can't. Another rocket
science item. Don't mount

00:19:01.574 --> 00:19:05.578
sensitive host file systems and
directories, et cetera, in your

00:19:05.578 --> 00:19:10.016
containers. Your container
doesn't need it mounted. I know.

00:19:10.016 --> 00:19:16.022
It doesn't need it. It really
doesn't need proc. So don't

00:19:19.392 --> 00:19:24.830
mount that shit. This was one
that surprised me. Don't put SSH

00:19:24.830 --> 00:19:31.570
into your containers. You don't
need it. If you need to access a

00:19:31.570 --> 00:19:35.508
container, log into the
operating system, use NS enter,

00:19:35.508 --> 00:19:37.510
which basically gives you the
ability to jump into your

00:19:37.510 --> 00:19:42.982
container, but generally
speaking SSH is hard to secure.

00:19:42.982 --> 00:19:46.018
It's hard to manage. It's kind
of funky. It does interesting,

00:19:46.018 --> 00:19:51.157
bizarre things with the stack
and greatly expands the

00:19:51.157 --> 00:19:57.063
capabilities to make it work
properly. So avoid SSH if at all

00:19:57.063 --> 00:20:02.401
possible. It adds complexity you
really don't need. So avoid that

00:20:02.401 --> 00:20:08.607
if at all possible. Also, if at
all possibility don't use

00:20:08.607 --> 00:20:10.609
privileged ports. If you're
running Apache or similar

00:20:10.609 --> 00:20:16.615
applications for 1024, you can't
avoid that. Generally speaking

00:20:19.952 --> 00:20:23.322
anything other than this
front-facing services, don't run

00:20:23.322 --> 00:20:25.958
them on privileged ports.
Anything that has to run on

00:20:25.958 --> 00:20:29.095
privileged port needs greater
access to the kernel and adds to

00:20:29.095 --> 00:20:34.633
the tech surface. Your mid unit
on a privileged port, your

00:20:34.633 --> 00:20:40.406
database, don't run it on a
privileged port container. Don't

00:20:40.406 --> 00:20:44.877
do that shit. Again, set
reasonable limits for usage.

00:20:44.877 --> 00:20:50.649
Anybody had the pleasure of
configuring Java on the VM, all

00:20:50.649 --> 00:20:56.522
that shit? Yes. I was doing
this. Yes. You're going to have

00:20:56.522 --> 00:21:01.293
that same joy as you start
running containers, but this is

00:21:01.293 --> 00:21:04.930
a good idea, particularly if you
go to a production environment.

00:21:04.930 --> 00:21:08.000
Set those maximums and give
yourself some protection from

00:21:08.000 --> 00:21:12.304
DOS attacks or run-away
processes. There's no reason the

00:21:12.304 --> 00:21:18.778
container needs all the memory
on a box. You want to run bare

00:21:18.778 --> 00:21:23.082
metal anyway and possibly not
even in a VM. Containers, that's

00:21:23.082 --> 00:21:29.054
not your best suit. So set the
CPU priority. Again, this new

00:21:29.054 --> 00:21:33.459
you won't have a container go
awry and kill your entire

00:21:33.459 --> 00:21:41.133
machine. Not crazy rocket
science stuff. Set reasonable

00:21:41.133 --> 00:21:45.404
limits. Does anyone actually
like U limits? They are

00:21:45.404 --> 00:21:49.241
generally speaking the thing
that distances with admin

00:21:49.241 --> 00:21:56.582
running databases with the C
world variety, you up new limits

00:21:56.582 --> 00:21:58.851
constantly. Pay attention to
those. That's a great way to

00:21:58.851 --> 00:22:02.021
protect yourself. Make sure you
have a reasonable limit on the U

00:22:02.021 --> 00:22:05.991
limit, and at least that way you
see what happens. You see that

00:22:05.991 --> 00:22:10.763
pain and suffering coming, and
it prevents that container from

00:22:10.763 --> 00:22:15.067
getting out of control. For the
most part containers, there's no

00:22:15.067 --> 00:22:18.904
reason not to mount your file
system as anything other than

00:22:18.904 --> 00:22:24.843
read only. There's really no
reason to ever mount your root

00:22:24.843 --> 00:22:28.614
file system as read/write in a
container especially. If you

00:22:28.614 --> 00:22:31.483
need to make changes to your
container where you actually

00:22:31.483 --> 00:22:34.920
take a copy of that container
offline and make the changes you

00:22:34.920 --> 00:22:38.190
want and generate a new
container image and then launch

00:22:38.190 --> 00:22:40.793
it. I'll talk more about
configuration management later

00:22:40.793 --> 00:22:44.463
and the ways in which containers
change configuration management

00:22:44.463 --> 00:22:46.465
in terms of from a security
perspective. Only bind your

00:22:46.465 --> 00:22:52.838
containers to the appropriate
network interfaces. Don't go the

00:22:52.838 --> 00:22:57.409
default of having them bind to
every network interface on the

00:22:57.409 --> 00:23:03.015
box. For the most part, most of
your containers can be hooked to

00:23:03.015 --> 00:23:05.017
that. There's no reason they
could ever be exposed to a

00:23:05.017 --> 00:23:11.957
network interface on the --
unless you have boxes running,

00:23:11.957 --> 00:23:14.827
but there's no reason for
containers to withstand anything

00:23:14.827 --> 00:23:20.899
other than loop back. This is an
exciting one, which is limit

00:23:20.899 --> 00:23:24.303
your audit -- containers
automatically restart and die.

00:23:24.303 --> 00:23:28.540
That's a cool feature. You want
to limit that to three or five

00:23:28.540 --> 00:23:32.344
or a few more than that. The
last thing you want is your

00:23:32.344 --> 00:23:36.148
container constantly restarting
and hosing your box. It's just

00:23:36.148 --> 00:23:39.118
generally good practice in dev
environments. Instead of having

00:23:39.118 --> 00:23:42.154
a DOS attack take down your box,
have it force a constant reboot

00:23:42.154 --> 00:23:44.923
cycle and take down your box.
That's just as painful. Don't

00:23:44.923 --> 00:23:47.927
share name spaces. The default
spaces are separated between the

00:23:47.927 --> 00:23:49.928
hosts and containers and
devices. If you share name

00:23:49.928 --> 00:23:51.930
spaces, you destroyed the point
of name spaces. Don't share.

00:23:51.930 --> 00:23:57.870
This is a default that are not
shared. Some people think it's

00:23:57.870 --> 00:24:03.008
easier to share the name space,
but you might as well run one

00:24:03.008 --> 00:24:09.014
container or not use containers
at all. You just shot yourself

00:24:16.555 --> 00:24:23.228
in the foot in that case. Back
up. I know, I know. Back up your

00:24:23.228 --> 00:24:29.234
shit. It's kind of fun going,
no, man, don't do that. Get

00:24:32.404 --> 00:24:36.342
logs. I know, logs. Logging is a
little bit tricky still, and the

00:24:36.342 --> 00:24:40.479
last release added sys log hooks
finally and that makes it

00:24:40.479 --> 00:24:45.584
easier. Every SIM has a unique
tutorial how to enable Docker

00:24:49.621 --> 00:24:54.326
containers and logging into
their product sites, so that's

00:24:54.326 --> 00:24:58.063
easy. It's not ideal yet but
it's tricky. There's direction.

00:24:58.063 --> 00:25:01.700
It's definitely -- it's like
programming and cut and paste

00:25:01.700 --> 00:25:07.439
and you're probably in good
shape in that regard. Work with

00:25:07.439 --> 00:25:11.076
a minimal number of images.
Anyone remember when we first

00:25:11.076 --> 00:25:15.080
started to do VMs and people
generated a VM for every single

00:25:15.080 --> 00:25:20.452
application they had as opposed
to have three or four VMs and

00:25:20.452 --> 00:25:24.089
add the applications on using
shepherd Put pet. Don't get in

00:25:24.089 --> 00:25:28.327
the same situation with Docker.
That's a huge problem already

00:25:28.327 --> 00:25:32.097
for folks with maintenance with
windows and things like that.

00:25:32.097 --> 00:25:38.804
You can always add things on if
you need to. Every time you add

00:25:38.804 --> 00:25:44.376
an image, it gets not quite
harder especially above 12 or

00:25:44.376 --> 00:25:49.681
13. People are really bad at
managing large numbers like 12

00:25:49.681 --> 00:25:53.752
or 13. A minimal number of
containers per host. I recommend

00:25:53.752 --> 00:25:57.623
anything production recommended
for one container and it keeps

00:25:57.623 --> 00:26:00.793
it simple. If someone escapes
it's not the end of the world.

00:26:00.793 --> 00:26:04.930
If I run multiple containers,
you do like services. I have a

00:26:04.930 --> 00:26:09.935
big honking box. Rather than
running 12 VMs on the box, I run

00:26:09.935 --> 00:26:13.539
12 containers running the web
server or something like that.

00:26:13.539 --> 00:26:18.010
Still, make sure you have
diversity across boxes like VMs.

00:26:18.010 --> 00:26:21.947
If you lose your hardware,
you're not down just like

00:26:21.947 --> 00:26:25.951
anywhere else. I talked a bit
about trusted containers. You

00:26:25.951 --> 00:26:27.853
want to know that the container
you're using is the container

00:26:27.853 --> 00:26:35.127
you think it is. So this becomes
a supply chain problem. How do

00:26:35.127 --> 00:26:39.231
you know that you actually have
what you think you have? As I

00:26:39.231 --> 00:26:43.669
said earlier, right now Docker
published images have manifests

00:26:43.669 --> 00:26:47.372
associated with each image, and
that's signed. That's a start.

00:26:47.372 --> 00:26:52.478
It's not ideal because, like I
said, it isn't signed so you

00:26:52.478 --> 00:26:58.817
don't know if that container
itself -- what's in the

00:26:58.817 --> 00:27:00.452
container is actually in the
manifest. They're fixing that in

00:27:00.452 --> 00:27:04.623
the 1.8 release, which is due
out any second now. It's already

00:27:04.623 --> 00:27:07.793
been released. I've been off the
Internet mostly this week

00:27:07.793 --> 00:27:11.129
because there was a security
conference or two going on. My

00:27:11.129 --> 00:27:15.200
laptop has not been on the
wireless here. I didn't want to

00:27:15.200 --> 00:27:18.537
be on the wireless chute here
for some strange reason. You

00:27:18.537 --> 00:27:21.607
want to watch the supply chain,
and you want to validate your

00:27:21.607 --> 00:27:26.945
containers are what they think
they are. Given the current

00:27:26.945 --> 00:27:29.882
state, don't use public
repositories. September a

00:27:29.882 --> 00:27:35.921
private repositories and
validate the images and with TLS

00:27:35.921 --> 00:27:41.593
only and then just continue to
sort of double-check things. The

00:27:41.593 --> 00:27:48.634
server kind of keys them in an
audit monitor and have

00:27:48.634 --> 00:27:52.838
appropriate protections in place
to make sure those containers

00:27:52.838 --> 00:27:55.941
have not been violated in any
way. There was a recent blog

00:27:55.941 --> 00:28:03.749
post about last month, maybe six
weeks ago where someone -- 30%

00:28:03.749 --> 00:28:10.589
of the images of the public
Docker repository are insecure.

00:28:10.589 --> 00:28:14.726
This proves that Docker is
insecure. It seems like a really

00:28:14.726 --> 00:28:20.499
big number. I bet it's kind of
on the small side. I did

00:28:20.499 --> 00:28:24.670
research and poked around. Some
other folks did deeper analysis

00:28:24.670 --> 00:28:29.341
and they meant that 30% of the
containers that they found have

00:28:29.341 --> 00:28:33.345
-- had a library or an
application that was vulnerable

00:28:33.345 --> 00:28:40.819
to some ( inaudible ). Yeah,
and? So you download it. If you

00:28:40.819 --> 00:28:43.956
use a container, you do what you
do with every container, which

00:28:43.956 --> 00:28:47.626
is you run upgrade after the
download the container to make

00:28:47.626 --> 00:28:50.862
sure you run the latest versions
in the code and move on. Just

00:28:50.862 --> 00:28:55.934
because it has a vulnerability
in it isn't the end of the

00:28:55.934 --> 00:28:59.705
world. You can't assume your
container is up to date, which

00:28:59.705 --> 00:29:03.241
is why I said earlier patch. You
have to actually pay attention

00:29:03.241 --> 00:29:05.944
to the stuff and patch your
containers that keep them

00:29:05.944 --> 00:29:10.415
up-to-date just like anything
else. We want to do something

00:29:10.415 --> 00:29:14.219
radical. This was not
recommended by the CIS

00:29:14.219 --> 00:29:21.393
benchmark, but don't use chef or
puppet with your containers.

00:29:21.393 --> 00:29:24.496
Don't use any online
configuration management with

00:29:24.496 --> 00:29:28.166
containers. I've got quizzical
looks in the front row. The

00:29:28.166 --> 00:29:35.140
reason I'm telling you this is
Docker are the ideal candidates

00:29:35.140 --> 00:29:41.613
for mutable servers. The problem
with using management is you get

00:29:41.613 --> 00:29:45.951
-- or the reason configuration
management was invented was the

00:29:45.951 --> 00:29:49.955
concept of configuration drift,
and a configuration drift is you

00:29:49.955 --> 00:29:54.059
have the drawing on the shelf or
Excel spreadsheet saying this is

00:29:54.059 --> 00:29:58.030
the configuration of the web
server. Over time you make

00:29:58.030 --> 00:30:03.702
changes but it's not copied to
the spreadsheet or printed out

00:30:03.702 --> 00:30:07.072
and put in the binder for
disaster recovery. Three years

00:30:07.072 --> 00:30:09.908
later when you have an issue, no
one knows what the configuration

00:30:09.908 --> 00:30:15.514
looks like. So Chef and Puppet
were invented. Not only does is

00:30:15.514 --> 00:30:23.622
it automate everything, but you
have basically a CMVB. What

00:30:23.622 --> 00:30:28.360
cheffer puppet thinks is the
configuration is the

00:30:28.360 --> 00:30:31.830
configuration. In fact, if you
run these tools and the

00:30:31.830 --> 00:30:35.000
configuration -- someone changes
the configuration on the box,

00:30:35.000 --> 00:30:39.504
chef and puppet have a tripwire
type thing and say huh-uh. Any

00:30:39.504 --> 00:30:45.711
changes that happen outside that
space get pushed back. Chef and

00:30:45.711 --> 00:30:48.947
Puppet are kind of heavy
clients. In the container world

00:30:48.947 --> 00:30:54.152
you want to run one process, and
that's not going to be Chef.

00:30:54.152 --> 00:30:57.122
It's pointless to have a
container running Chef or

00:30:57.122 --> 00:31:00.025
Puppet, right? You're not doing
anything. Your configuration is

00:31:00.025 --> 00:31:04.096
good. Instead, because
containers are so fast to spin

00:31:04.096 --> 00:31:07.766
up, we're talking milliseconds
in one case. You create a new

00:31:07.766 --> 00:31:15.107
container and spread that up and
shut down the old container. If

00:31:15.107 --> 00:31:17.709
there's an issue, does it work,
you shut it down and bring it

00:31:17.709 --> 00:31:23.882
back up. Classic AB things. You
might use your load balancer and

00:31:23.882 --> 00:31:28.120
shift it over to the new
containers, but any change you

00:31:28.120 --> 00:31:32.290
make generates a new container.
So this is what Netflix does.

00:31:32.290 --> 00:31:36.695
They don't actually make
configuration changes on Amazon.

00:31:36.695 --> 00:31:41.700
They burn it and spin up a you
whole new instances, hundreds of

00:31:41.700 --> 00:31:45.837
instances and transition to
little balancers. Facebook does

00:31:45.837 --> 00:31:50.408
similar things like Amazon. The
great thing here is you have a

00:31:50.408 --> 00:31:53.879
history of what everything looks
like, and you're not worried

00:31:53.879 --> 00:31:58.383
about it failing and you keep
your container nice and tight

00:31:58.383 --> 00:32:03.688
and clean. Related to this
issue, of course, in terms of

00:32:03.688 --> 00:32:08.794
just trusted containers is that
because you only had a signature

00:32:08.794 --> 00:32:11.963
on the manifest is how do you
actually have any attribution to

00:32:11.963 --> 00:32:20.105
the life span of that container?
There's interesting stuff

00:32:20.105 --> 00:32:22.140
coming. There's other things we
can do beyond these basics,

00:32:22.140 --> 00:32:31.383
which is you can run App Armor
and SC Linux. The cool thing is

00:32:31.383 --> 00:32:34.252
if you run SC Linux, once you
get the configuration, it lives

00:32:34.252 --> 00:32:38.490
with the container. You don't
need to track that separately.

00:32:38.490 --> 00:32:42.394
You figure out what your ideal
configuration looks like. It's

00:32:42.394 --> 00:32:44.529
built into the container. As you
transition across your

00:32:44.529 --> 00:32:50.802
infrastructure, it goes with it.
At least again that's still

00:32:50.802 --> 00:32:53.071
consistent. There's a cool tool
called Set Comp. It's on a

00:32:53.071 --> 00:33:03.481
case-by-case basis. You can get
really tight control over what

00:33:03.481 --> 00:33:06.885
the system calls are doing in
back to the kernel and operating

00:33:06.885 --> 00:33:11.590
system in general. That's pretty
cool and this is a cool tool

00:33:11.590 --> 00:33:19.464
called Docker bench security.
I'll have the links to that

00:33:19.464 --> 00:33:23.001
along with the other stuff when
I get the slides redone. What

00:33:23.001 --> 00:33:25.670
Docker Bench Security does is
goes through your container and

00:33:25.670 --> 00:33:29.941
validates or alerts you to
configuration and settings for

00:33:29.941 --> 00:33:32.744
your Docker container. Most of
these recommendations I made are

00:33:32.744 --> 00:33:36.748
built -- checks for them are
built into Docker Bench Security

00:33:36.748 --> 00:33:44.623
and download and make sewer in a
good shape. It's a complex thing

00:33:44.623 --> 00:33:52.264
to do and every time you do
something so that's a win right

00:33:52.264 --> 00:33:59.170
there. There's also two
third-party things to do to lock

00:33:59.170 --> 00:34:03.408
down your containers more. The
folks at economical released a

00:34:03.408 --> 00:34:12.951
project called LXD, Lima, x-ray
delta. That is a container

00:34:12.951 --> 00:34:19.291
hypervisor. They're building the
container version of VM

00:34:19.291 --> 00:34:25.730
hypervisor. There's a thing
layer like you have with a

00:34:25.730 --> 00:34:29.401
traditional hypervisor, so
that's out. That's continuing to

00:34:29.401 --> 00:34:35.974
mature, and that looks promising
and the commercial package. They

00:34:35.974 --> 00:34:43.782
do policy and security of
containers in general and they

00:34:43.782 --> 00:34:46.952
do VMs and containers originally
built with platforms with a

00:34:46.952 --> 00:34:49.821
service many mind but as
container they take off in

00:34:49.821 --> 00:34:54.526
general. It's a policy-based
link that set what containers

00:34:54.526 --> 00:34:58.563
can do. This is looking
promises. I haven't done a deep

00:34:58.563 --> 00:35:05.170
dive on this. Derek who is the
primary author of cloud foundry,

00:35:05.170 --> 00:35:08.974
and he's involved in the cloud
and virtual computing space

00:35:08.974 --> 00:35:11.576
forever. It looks very
promising. That's another one to

00:35:11.576 --> 00:35:17.716
check out. Maybe you have free
accessibility of things. There's

00:35:17.716 --> 00:35:20.885
cool stuff coming from Docker.
Docker is not sitting on their

00:35:20.885 --> 00:35:23.688
laurels going it's good enough.
They're continuing to add

00:35:23.688 --> 00:35:30.261
security at Docker.com several
months ago they announced a new

00:35:30.261 --> 00:35:36.701
product called Notary. It's a
secure package management system

00:35:36.701 --> 00:35:43.174
based on the update framework,
and Notary coming out in 1.8 out

00:35:43.174 --> 00:35:50.181
any day now and may be out, in
fact, is using the ability not

00:35:50.181 --> 00:35:55.120
only to have signed manifests
from Docker, it lets anyone have

00:35:55.120 --> 00:36:00.091
signed and more importantly it's
a content -- it's a notary,

00:36:00.091 --> 00:36:02.927
which is part of the V2
registry, is a

00:36:02.927 --> 00:36:07.766
content-addressable registry,
which means that now your

00:36:07.766 --> 00:36:11.970
manifests contain a list of
hashes of all of your -- of all

00:36:11.970 --> 00:36:15.840
your contents of your container.
So you don't need to sign a

00:36:15.840 --> 00:36:18.209
container or encrypt your
container, though you could do

00:36:18.209 --> 00:36:23.148
that if you wanted to. So now
when you get the manifest, you

00:36:23.148 --> 00:36:25.884
validate the signature on the
manifest, and now you list

00:36:25.884 --> 00:36:29.654
hashes of all the contents of
the container. Now you could

00:36:29.654 --> 00:36:32.891
validate what's in the container
is what you think it is, and

00:36:32.891 --> 00:36:35.593
it's not restricted to official
Docker containers at this point.

00:36:35.593 --> 00:36:38.363
You can do this yourself in your
private registry. You can have

00:36:38.363 --> 00:36:43.068
much more confidence that the
container you downloaded last

00:36:43.068 --> 00:36:46.104
week and validated is acceptable
for your standards is still the

00:36:46.104 --> 00:36:50.041
same container. The update
framework is cool is because not

00:36:50.041 --> 00:36:54.913
only does it address the file
system, but it has a concept of

00:36:54.913 --> 00:37:02.721
freshness. So what this means is
-- it's the signatures are

00:37:02.721 --> 00:37:09.627
unique enough that what happens
is that when you go to registry

00:37:09.627 --> 00:37:11.930
and say, hey, I want this
container and the registry says

00:37:11.930 --> 00:37:15.734
go to this mural over here in
the western U.S. other this one

00:37:15.734 --> 00:37:20.071
in England or Ireland, it
validates against the map --

00:37:20.071 --> 00:37:24.342
your client looks at what's on
the mirror and looks on the

00:37:24.342 --> 00:37:28.113
master and validates it's the
same thing and you get the most

00:37:28.113 --> 00:37:33.451
recent version. Obviously,
things get out of sync,

00:37:33.451 --> 00:37:37.322
especially with recent updates.
Now you know not only you get

00:37:37.322 --> 00:37:41.793
what's in it, but it's what the
manifest says in the container

00:37:41.793 --> 00:37:46.464
but you have a version that you
want. If you want a new version,

00:37:46.464 --> 00:37:50.001
it's the right version of the
older one as well. That's pretty

00:37:50.001 --> 00:37:55.840
cool. It also has the concept of
snapshots again. You can version

00:37:55.840 --> 00:38:01.913
your container, so it makes it
easier to roll back to a

00:38:01.913 --> 00:38:04.916
different version forward. It's
designed for survival to key

00:38:04.916 --> 00:38:13.558
compromise. If any gets lost the
spec is designed to allow for

00:38:13.558 --> 00:38:16.828
survival compromise, so that's
kind of cool. The folks at

00:38:16.828 --> 00:38:21.766
Docker had this audited by a
well-known security firm. They

00:38:21.766 --> 00:38:24.435
will announce it -- when they
release it, they won't say who

00:38:24.435 --> 00:38:29.874
did the work, but I know who
they are, and it's very talented

00:38:29.874 --> 00:38:34.479
folks you've heard of. That
looks promising as well. They're

00:38:34.479 --> 00:38:37.215
doing all the right things in
terms of adding security net

00:38:37.215 --> 00:38:40.685
space. They're adding user name
spaces finally. Once they add

00:38:40.685 --> 00:38:44.088
user name spaces, that means you
can have a user but the general

00:38:44.088 --> 00:38:55.500
operator thinks is a general
user. This is in 1.8. That's the

00:38:55.500 --> 00:38:59.304
underlying infrastructure that
makes it work at all. It will

00:38:59.304 --> 00:39:04.542
bubble up all the way through
cocker in the next release or

00:39:04.542 --> 00:39:14.152
two. There are a few places that
still need some help. I already

00:39:14.152 --> 00:39:18.456
talked about the ring isn't name
spaced. That's the whole problem

00:39:18.456 --> 00:39:20.558
with encrypting that and other
people see it. They solve that

00:39:20.558 --> 00:39:26.297
sort of kind of, but it's not
ideal yet. In terms of managing

00:39:26.297 --> 00:39:30.602
secrets, there's two open source
projects. Vault from Hashi Corp,

00:39:30.602 --> 00:39:38.142
and key vault to manage keys in
the container environment. Check

00:39:38.142 --> 00:39:43.948
those out. As I mentioned, the
API for Docker has notice

00:39:43.948 --> 00:39:46.985
consent of authentication or
authorization at this point.

00:39:46.985 --> 00:39:51.022
They're working on that, but be
aware if you use the API locally

00:39:51.022 --> 00:39:54.859
or on network again, the proxy
is in front of it so you can get

00:39:54.859 --> 00:40:01.532
that certificate based off
anything. I mentioned set comp,

00:40:01.532 --> 00:40:06.371
SC Linux app armor. The big fans
say, oh, it's easy. No, it's

00:40:06.371 --> 00:40:16.881
not. At this point it's my
opinion that set comp is really

00:40:16.881 --> 00:40:19.150
( inaudible ) for the most part.
The tools for managing them are

00:40:19.150 --> 00:40:25.156
not there. This is actually my
biggest nervous point about

00:40:25.156 --> 00:40:30.628
Docker. The tools you need to
use to make these things much

00:40:30.628 --> 00:40:33.831
safer are really hard to use and
they're hard to use at scale,

00:40:33.831 --> 00:40:37.302
which means a lot of containers
are in a less than ideal state

00:40:37.302 --> 00:40:41.940
because of that. I try to run
something with less Linux on,

00:40:41.940 --> 00:40:46.778
and then the solution to fixing
it is to turn SC Linux off,

00:40:46.778 --> 00:40:52.317
because that's the fastest route
to doing it. I'm one of those

00:40:52.317 --> 00:40:58.389
people. Logging is getting
better but they still need help.

00:40:58.389 --> 00:41:03.695
Orchestration again. If you do
anything at scale, you have

00:41:03.695 --> 00:41:09.600
nicos or both, and they're for
the 1% still early on if you're

00:41:09.600 --> 00:41:12.704
not Google or handful of others,
you're not using them yet, and

00:41:12.704 --> 00:41:18.409
they're hard to use. That's
what's left at this point. Then

00:41:18.409 --> 00:41:22.347
like I said, I'll post the
resources -- I'll send the

00:41:22.347 --> 00:41:25.483
latest slides with all the
resources, because you don't

00:41:25.483 --> 00:41:33.024
want to take screenshots of this
and everything. Just to finish

00:41:33.024 --> 00:41:36.794
up, it's not as bad as it used
to be. A year ago it was

00:41:36.794 --> 00:41:40.331
horrible and six months ago it
wasn't so bad. We're at a place

00:41:40.331 --> 00:41:45.036
where Docker is user, and if
you're at that far right end of

00:41:45.036 --> 00:41:50.208
the curve, it's really useable.
It's relatively safe to use at

00:41:50.208 --> 00:41:53.511
this point, and again, if you go
in production, please one

00:41:53.511 --> 00:41:57.448
container per VM at this point.
And that's any story for the

00:41:57.448 --> 00:42:00.752
day. I have just a minute or two
for questions, if there's any

00:42:00.752 --> 00:42:07.859
questions. Otherwise I'll give
you five minutes back. (

00:42:07.859 --> 00:42:16.768
Inaudible question ) >> What
about Docker U.S.? I'm not

00:42:16.768 --> 00:42:21.272
familiar with the second one. I
have a deep dive into the

00:42:21.272 --> 00:42:24.809
security of those in particular.
I assume at this point they have

00:42:24.809 --> 00:42:31.282
the same general issues to deal
with at that point. You know,

00:42:31.282 --> 00:42:32.884
containers are containers
regardless of OS at this point

00:42:32.884 --> 00:42:41.426
still. >> Last month Docker was
boarded to previous state. They

00:42:41.426 --> 00:42:46.664
were limiting in a jail on set
FS. That combination itself

00:42:46.664 --> 00:42:51.869
should make for interesting
security issues. >> Definitely.

00:42:51.869 --> 00:42:55.840
>> Fixing rather than issues. >>
I want to make sure everyone

00:42:55.840 --> 00:42:59.410
heard that. Our audience member
said that last Docker was

00:42:59.410 --> 00:43:05.950
comported to freebie SD. They're
working with jail. I agree I

00:43:05.950 --> 00:43:08.886
wasn't aware of that. That
sounds cool, though. I

00:43:08.886 --> 00:43:14.225
definitely have to check that
out. Thank you very much,

00:43:14.225 --> 00:00:00.000
everyone. ( Applause ) 

