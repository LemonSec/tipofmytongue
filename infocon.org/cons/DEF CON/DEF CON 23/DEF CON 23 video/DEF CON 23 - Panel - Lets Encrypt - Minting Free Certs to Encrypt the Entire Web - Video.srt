00:00:00.000 --> 00:00:06.006
I'm Yan Zhu, I don't work at
night, technology fellow at EFF.

00:00:10.878 --> 00:00:16.884
	Who here is excited to encrypt
the entire web? 	(Applause) 	Yan

00:00:26.293 --> 00:00:32.299
Zhu: I like the energy.
	[Static-inaudible] it's 2015,

00:00:46.079 --> 00:00:50.851
for instance, last summer when I
went, this was the last time I

00:00:50.851 --> 00:00:57.824
logging into CORA, log in place
was over HTTP and lo and behold

00:00:57.824 --> 00:01:04.464
passwords were being sent over.
	This is bad if you're like

00:01:04.464 --> 00:01:10.537
daily active users in that case,
the purpose of spreading

00:01:10.537 --> 00:01:16.043
information about various
topics. 	It's not bad if you

00:01:16.043 --> 00:01:23.350
have a man in the middle. 	I
don't know, there's a little

00:01:23.350 --> 00:01:28.522
little site of Google, some
pages like this, landing page

00:01:28.522 --> 00:01:34.528
for Google ads, still over HTTP
by default, all public

00:01:36.563 --> 00:01:42.402
information, man in the middle
like myself can inject a button

00:01:42.402 --> 00:01:48.575
that makes it look life-like and
Google-like, and unsuspecting

00:01:48.575 --> 00:01:52.713
user will read it, and I'll
direct them to my fishing site.

00:01:52.713 --> 00:01:54.748
	This is still a problem.
	Second big problem of the

00:01:54.748 --> 00:02:00.687
world, is that setting up TLS is
tedious, even in 2015. Who here

00:02:12.866 --> 00:02:18.805
has done this process? You know
how bad it is. 	>> I still have

00:02:18.805 --> 00:02:24.478
one arm at least 	Yan Zhu:
What's that. 	If you want it do

00:02:24.478 --> 00:02:31.651
this on dream host, go to web
WIKI, you're not an alcoholic

00:02:31.651 --> 00:02:38.792
anonymous yet, but still a
12-step process. 	How long does

00:02:38.792 --> 00:02:44.798
it take a total Newbie to setup
for the first time? I made a

00:02:47.401 --> 00:02:52.205
little video with some of
co-workers from EFF. 	I went

00:02:52.205 --> 00:02:57.878
around and asked people can you
setup TLS and none had done it

00:02:57.878 --> 00:03:05.585
before, So, hopefully, this will
work. 	(Music Playing) (Video

00:03:05.585 --> 00:03:11.591
Playing) 	>> Hello Parker, what
are you doing today. 	>> Trying

00:03:13.994 --> 00:03:20.767
to setup HTTPS on my website.
	>> That sounds fun. 	>>

00:03:20.767 --> 00:03:26.773
Yeah.	Maybe. 	>> WOW, I didn't
think that was going to be click

00:03:35.982 --> 00:03:41.988
able, no kidding -- so -- what
do I do? -- how do I do this?

00:03:47.427 --> 00:03:53.433
(Laughter). 	>> Okay. 	Click the
wizard. 	>> So their site was

00:04:17.190 --> 00:04:25.132
down that day. 	Guess we won't
do that today. 	>> Okay. 	>>

00:04:25.132 --> 00:04:29.436
That's it (Laughter) so then I
went to someone else in the

00:04:29.436 --> 00:04:35.442
office. 	>> Here we have NOAH
making sure he can get e-mail at

00:04:42.916 --> 00:04:48.922
[static-inaudible] which we'll
need later to setup. 	>> All

00:04:56.129 --> 00:05:00.066
right, 3 minutes later. 	>>
What's up NOAH? We are totally

00:05:00.066 --> 00:05:06.072
filming this. 	So because NOAH
has not [static-inaudible] he is

00:05:14.948 --> 00:05:20.954
going to get coffee instead
(Laughter). 	>> No kidding,

00:05:40.106 --> 00:05:46.112
that's not click able. 	Express
lane, I want express lane. 	Do I

00:06:10.570 --> 00:06:14.841
have to give them my real home
address? How long does it take

00:06:14.841 --> 00:06:20.847
to sign in, congratulations.
Okay. 	What does this mean?

00:06:45.905 --> 00:06:51.912
Generally free of charge?
(Laughter) handling fee? But

00:07:09.963 --> 00:07:15.969
where is my -- is it attached?
Where is it? Is it in browser?

00:07:52.205 --> 00:07:58.211
Oh, here I am, still waiting for
the e-mail with my certificate.

00:08:01.348 --> 00:08:06.119
	I got a thank you e-mail that
maybe points me to an account, I

00:08:06.119 --> 00:08:12.125
have a proxy error, from their
website, want to try to go to

00:08:16.629 --> 00:08:22.369
it, yeah. 	After an hour and
multiple tries, no certificate.

00:08:22.369 --> 00:08:28.375
	(End of Video) 	Yan Zhu: Sorry,
that was sad video, this took a

00:08:30.377 --> 00:08:36.383
lot of hours due to various
mistakes we were making. 	All

00:08:45.291 --> 00:08:47.727
right. 	So let's assume that
went perfectly and got our

00:08:47.727 --> 00:08:51.264
certificate. 	We want to setup
SSL on server, but SSL

00:08:51.264 --> 00:08:57.270
configuration is confusing. 	Few
years ago people say R C4 is

00:09:00.006 --> 00:09:06.012
efficient and fast, but in 2015,
say we need to kill R C4.

00:09:08.448 --> 00:09:10.617
	Another example, Chrome
[static-inaudible] not secure

00:09:10.617 --> 00:09:13.653
and sooner or later if your site
uses hashes and certificate

00:09:13.653 --> 00:09:19.659
chain you'll be insecure in
Chrome and Firefox. 	We should

00:09:23.062 --> 00:09:29.068
make a movie about
[static-inaudible] man, gets

00:09:31.471 --> 00:09:37.477
fired from job and reads Morgan
FREEDMAN -- in theaters next

00:09:39.979 --> 00:09:45.652
fall. 	Other examples, so, even
later in the fall, people said,

00:09:45.652 --> 00:09:51.658
disable. 	There's log jam and
log jam means you have to

00:09:53.693 --> 00:10:00.300
generate your own, and the point
is, if you're not paying

00:10:00.300 --> 00:10:03.570
attention to this stuff, you can
fall behind. 	And SSL

00:10:03.570 --> 00:10:08.274
configuration will be insecure
if you use configure audit tool.

00:10:08.274 --> 00:10:14.280
	It will give you F. 	But, like
notice that Let's Encrypt is

00:10:18.017 --> 00:10:22.222
getting A plus, it's getting one
of best sites SSL has seen

00:10:22.222 --> 00:10:28.228
recently. 	What's that?
(Laughter). 	Sorry, I did that a

00:10:31.264 --> 00:10:37.270
few days ago. 	We use latest
recommended from

00:10:39.439 --> 00:10:41.441
[static-inaudible] book. 	I'll
put a plugin for him right here.

00:10:41.441 --> 00:10:47.714
	People don't have capacity to
keep track of, so we end up with

00:10:47.714 --> 00:10:53.720
a broken encryption on the
Internet. 	Problem 4, mix

00:10:56.456 --> 00:10:59.759
content blocking. 	This is
keeping a lot of people from

00:10:59.759 --> 00:11:04.164
transitioning to full HTTPS.
	Mixed content blocking when

00:11:04.164 --> 00:11:11.471
your site is over XDDL, browser
says we need to keep user at

00:11:11.471 --> 00:11:16.176
HTTPS secure level. 	So we block
HTTPS resources that you try to

00:11:16.176 --> 00:11:20.313
load. 	Your site is broken in
you load scriptions from AT&T.

00:11:24.183 --> 00:11:28.621
	It's available over HTTPS, but
they can't load fonts yet over

00:11:28.621 --> 00:11:34.227
HTTPS, so by default you use
HTTP. 	Who here uses HTTPS

00:11:34.227 --> 00:11:39.966
Everywhere? Awesome. 	Peter and
I work on maintaining that

00:11:39.966 --> 00:11:46.039
browser extension. 	If you use
HTTPS Everywhere and Chrome you

00:11:46.039 --> 00:11:49.642
can go to website and see what
sites -- this is useful

00:11:49.642 --> 00:11:55.648
developer tool if you convert
site from insecure to secure.

00:12:00.920 --> 00:12:04.123
	So, open up web tools and
there's a tab you with play with

00:12:04.123 --> 00:12:10.363
that helps rewrite stuff. 	W 3 C
will help you out. 	There's a

00:12:10.363 --> 00:12:15.702
new header, called upgrade
insecure request. 	When browser

00:12:15.702 --> 00:12:21.708
sees header, it says this site
wants to upgrade, -- so physical

00:12:25.678 --> 00:12:30.316
try to HTTPS request and if that
fails, it gets blocks, but it

00:12:30.316 --> 00:12:36.823
won't do insecure network
request. 	And I think the final

00:12:36.823 --> 00:12:40.059
problem, is that there's too
matter certificate authorities.

00:12:40.059 --> 00:12:46.032
	There's a lot. 	Peter and some
colleagues made this very

00:12:46.032 --> 00:12:49.669
complicated scaring looking
graph a few years ago, Peter can

00:12:49.669 --> 00:12:52.939
you tell me what it means.
	Peter Eckersley: Yeah, it's not

00:12:52.939 --> 00:12:57.143
the whole map, we presented at
DEF CON in 2010. We set out, we

00:12:57.143 --> 00:13:03.082
thought there would be about 66
certificate authority if

00:13:07.220 --> 00:13:12.125
FireFox, maybe 150. But when we
scan the Internet we realize

00:13:12.125 --> 00:13:14.894
they're all signing and
delegating certificate

00:13:14.894 --> 00:13:18.331
authorities, -- and we concluded
that, CA's operated by

00:13:18.331 --> 00:13:26.172
organizations and compromise of
CA's could compromise the demand

00:13:26.172 --> 00:13:32.178
on the web. 	Yan Zhu: Scary, not
able to sleep. 	Early this year,

00:13:37.450 --> 00:13:44.390
last year, this year, Google
found certificates from Chinese

00:13:44.390 --> 00:13:47.593
certificate authority. 	This is
not just theoretical, we

00:13:47.593 --> 00:13:49.595
detected this in the wild.
	Peter, this sounds bleak, how

00:13:49.595 --> 00:13:55.601
are we going to make a world
that we want to live in, in the

00:13:58.104 --> 00:14:04.043
future. 	Peter Eckersley:
Solution to problem, of far too

00:14:07.213 --> 00:14:12.552
many certificate authorities, is
actually to start another

00:14:12.552 --> 00:14:18.558
certificate of authority
(Laughter). 	(Applause). 	But

00:14:23.730 --> 00:14:28.534
really in more detail, I'll
explain in a few minutes. We

00:14:28.534 --> 00:14:34.540
need detail vision for security
so we get every website it needs

00:14:41.047 --> 00:14:47.053
and not suppose to have. 	So
solution for security. 	And also

00:14:54.093 --> 00:14:56.629
solution for user ability. 	Web
developers don't want to go down

00:14:56.629 --> 00:14:58.965
the insane rabbit hole. 	So,
biggest question we need to

00:14:58.965 --> 00:15:00.967
answer for this project is,
we're going to issue

00:15:00.967 --> 00:15:03.770
certificates, how do we decide
whether to do so. 	And think of

00:15:03.770 --> 00:15:09.041
this as being like that scene
from the Holy Grail, someone

00:15:09.041 --> 00:15:13.946
shows up and says I want to
certificate, and you say, bring

00:15:13.946 --> 00:15:21.721
me a shrubbery and you go on
your quest, and come back with a

00:15:21.721 --> 00:15:25.792
shrubbery, say that's nice but I
would like a different one as

00:15:25.792 --> 00:15:32.799
well. 	This dialog, hopefully
not so comical, called the ACME

00:15:32.799 --> 00:15:39.138
protocol -- we'll have a client
as well, and then the shrubbery

00:15:39.138 --> 00:15:46.045
called challenges, has to
perform to prove they deserve a

00:15:46.045 --> 00:15:52.251
certificate, there's issue you
have to deal with, is

00:15:52.251 --> 00:15:55.688
bootstrapping from non
cryptographic authentication,

00:15:55.688 --> 00:16:03.229
somehow up to cryptor, how do
you know what --

00:16:03.229 --> 00:16:07.366
[static-inaudible] for at least
bulk issues certificate

00:16:07.366 --> 00:16:12.205
authorities the ones
comparatively cheap and not

00:16:12.205 --> 00:16:18.578
charge $1 --> 000, you send e-mail
to, our address at that domain

00:16:18.578 --> 00:16:22.648
name, web master or something,
send off e-mail, totally

00:16:22.648 --> 00:16:27.520
insecure, if link gets clicked
who ever asks to happen gets

00:16:27.520 --> 00:16:33.526
[static-inaudible]. 	Some go in
and inspect -- 	So, we are going

00:16:40.433 --> 00:16:47.874
to do variance of this time of
domain validation, there's a new

00:16:47.874 --> 00:16:55.248
DV protocol, that works at TLS,
aim to prove not just that

00:16:55.248 --> 00:16:57.917
you're user on destination
machine that you happen to

00:16:57.917 --> 00:17:02.555
register the name admin, but
that you actually have

00:17:02.555 --> 00:17:06.592
administrative control over the
web. 	Consider, fake host we ask

00:17:06.592 --> 00:17:13.266
you to answer for. 	We do in TLS
handshake. 	We inspect the

00:17:13.266 --> 00:17:18.838
results and make sure you're
able to customize those. 	We

00:17:18.838 --> 00:17:23.809
also support simple HTTP, which
has less security in it, but

00:17:23.809 --> 00:17:29.749
will also be necessary for some
people behind proxies or in the

00:17:29.749 --> 00:17:35.855
wild we get certain number of
tax against these things and

00:17:35.855 --> 00:17:40.626
monitor statistics and see how
it's going. 	Probably down

00:17:40.626 --> 00:17:42.628
[static-inaudible] extra things
one we get a lot of request is

00:17:42.628 --> 00:17:48.634
DNS valudation, have the DNS
name, in a special record, and,

00:17:53.105 --> 00:17:57.243
another one we may do is upgrade
of DVS, do a whole lot of domain

00:17:57.243 --> 00:18:02.248
in single handshake. 	If you're
hosting thousands of domains, do

00:18:02.248 --> 00:18:06.452
one fancy challenge instead of
thousands over and over again.

00:18:06.452 --> 00:18:09.488
	And might do that on different
port. 	Additional port. 	For

00:18:09.488 --> 00:18:14.493
people that want to keep their
file 443 going the way it is.

00:18:14.493 --> 00:18:20.499
	We have to do a lot of auditing
on that port before you pick

00:18:23.069 --> 00:18:29.008
which one you'll use. 	Probably
involve Internet wide scans. All

00:18:29.008 --> 00:18:33.913
of this domain validation stuff
is terrifying, imagine Internet

00:18:33.913 --> 00:18:38.117
is dark hole and flinging
packets down the hole and

00:18:38.117 --> 00:18:44.624
something comes back and is he,
yes, I'm this domain. 	And could

00:18:44.624 --> 00:18:50.596
have been eaten by monsters or
modified. 	You never know.

00:18:50.596 --> 00:18:54.400
	[Static-inaudible] they can
defeat these messages. 	Not very

00:18:54.400 --> 00:18:59.138
reassuring. 	We can do better
than that. 	We can do multi

00:18:59.138 --> 00:19:05.077
path, servers in multiple discs
to make several versions of

00:19:07.346 --> 00:19:13.019
validation request, this doesn't
completely project you, might

00:19:13.019 --> 00:19:16.022
compromise each of places or
someone may compromise route.

00:19:16.022 --> 00:19:19.025
	[Static-inaudible] this
probably isn't good enough for

00:19:19.025 --> 00:19:22.862
us to build the whole Internet
security infrastructure. 	We can

00:19:22.862 --> 00:19:30.169
do better than that, what we
need to do is ensure this leap

00:19:30.169 --> 00:19:36.175
of faith down the dark hole only
happens once. 	How? We talked

00:19:39.945 --> 00:19:45.951
about SSL observatory, we spoke
at DEF CON years ago, there's a

00:19:48.654 --> 00:19:52.391
number of projects, we have
decentralized a million FireFox

00:19:52.391 --> 00:19:55.194
clients opted in sending
certificates, certificates

00:19:55.194 --> 00:20:01.200
transparency databases, and Z
map project that James and

00:20:05.171 --> 00:20:08.641
colleagues have done. 	And these
build giant databases of all

00:20:08.641 --> 00:20:12.311
public databases in existence.
	We know, the public portion at

00:20:12.311 --> 00:20:18.317
any given movement. 	That lets
us do this thing, when someone

00:20:21.287 --> 00:20:25.157
comes through the door and asks
for domain name like bank in New

00:20:25.157 --> 00:20:29.028
Zealand or corporate name
[static-inaudible] we look in

00:20:29.028 --> 00:20:32.932
database and say there is valid
certificate for this domain

00:20:32.932 --> 00:20:36.335
name. 	We're not going to do
[static-inaudible] we're going

00:20:36.335 --> 00:20:43.442
to ask you to prove position of
private key in the existing

00:20:43.442 --> 00:20:48.647
valid certificate. 	That way you
only get a certificate if you

00:20:48.647 --> 00:20:50.649
already, by signing something
[static-inaudible]. 	This is

00:20:50.649 --> 00:20:53.919
going to be a little less
usable. 	It may mean you have to

00:20:53.919 --> 00:20:59.859
chase around to figure out where
existing keys for your set. 	If

00:20:59.859 --> 00:21:05.264
you lost it, you might have to
go to another certificate

00:21:05.264 --> 00:21:11.203
authority and buy a set. 	We
insure we never wrote, to bank

00:21:11.203 --> 00:21:15.174
or anything that has a
certificate right now. 	Just

00:21:15.174 --> 00:21:21.180
because router got compromised.
	You might notice, if you

00:21:25.084 --> 00:21:31.257
[static-inaudible] -- TOFU,
TOFU, it's model where, if

00:21:31.257 --> 00:21:35.161
whatever trust establish on
insecure connection if anything

00:21:35.161 --> 00:21:39.632
changes the person on other end
changes you'll notice and be

00:21:39.632 --> 00:21:45.404
protected against it. Next
problem we have to deal with, is

00:21:45.404 --> 00:21:51.410
the horrible TLS configuration,
there are, hot jam that can get

00:21:53.479 --> 00:21:56.348
you. 	What we want to have is a
client that runs on your server,

00:21:56.348 --> 00:22:00.119
agent that runs on your server
and magically figures out the

00:22:00.119 --> 00:22:05.824
right way to do things for you.
	At least if you want that.

00:22:05.824 --> 00:22:08.594
	What this does is take current
situation where every web

00:22:08.594 --> 00:22:13.399
developer out in the world is
like a giant, crowd of millions

00:22:13.399 --> 00:22:17.870
of people, and sitting as
security community quelling

00:22:17.870 --> 00:22:20.839
saying understanding this
knowledge, all of you need to

00:22:20.839 --> 00:22:26.178
understand this body of
knowledge to customize your site

00:22:26.178 --> 00:22:32.551
correctly. 	A world where we
have a small team of people,

00:22:32.551 --> 00:22:35.888
maybe the people in this room,
people that want to contribute

00:22:35.888 --> 00:22:40.693
to the project, figure how we do
do it correctly, do it once

00:22:40.693 --> 00:22:45.464
correctly and give everyone a
tool to sort out the details.

00:22:45.464 --> 00:22:50.135
	That's the aim with the fancy
client we're supporting. 	I aim,

00:22:50.135 --> 00:22:57.309
plan for when someone gets it
and installs, it will support,

00:22:57.309 --> 00:23:01.981
tweaking existing server, we
have API you can use to, to pass

00:23:01.981 --> 00:23:06.518
the challenges and then install
resulting certificate or

00:23:06.518 --> 00:23:13.158
certificates. 	If you need lots
of them. 	And tweak all security

00:23:13.158 --> 00:23:17.396
parameters and options,
maximizing security or subject

00:23:17.396 --> 00:23:21.166
to constraints to compatibility
to all clients. 	And, automating

00:23:21.166 --> 00:23:24.837
tasks like renewal and response
to security incident,

00:23:24.837 --> 00:23:27.940
[static-inaudible] -- some of
you probably are a little

00:23:27.940 --> 00:23:32.177
terrified saying automated
security [static-inaudible].

00:23:32.177 --> 00:23:38.183
	Let me talk about what we mean
by doing that. 	It's a spectrum,

00:23:42.855 --> 00:23:46.692
this is easy stuff. 	We go and
look up lists of recommended,

00:23:46.692 --> 00:23:52.698
debate them for a while, pick a
good value. 	We CSP stapling so

00:23:55.401 --> 00:23:57.836
everyone can tell where the
certificates have been

00:23:57.836 --> 00:24:01.040
[static-inaudible]. 	More tricky
is redirecting from HTTP to

00:24:01.040 --> 00:24:07.046
HTTPS because of mixed content
blocking, sometimes this can

00:24:14.953 --> 00:24:20.025
cause breakage. 	We can do a
fancier version, if you look if

00:24:20.025 --> 00:24:23.495
you have client modern enough
and do different upgrade more

00:24:23.495 --> 00:24:26.765
modern client. 	Order renewal,
we have implemented largely, but

00:24:26.765 --> 00:24:31.236
they're a little tricky, and
cases, what happened if you fail

00:24:31.236 --> 00:24:36.742
to renew domain and something
went wrong with one of domains

00:24:36.742 --> 00:24:43.782
so you have old set that's about
to expire and new set for fewer

00:24:43.782 --> 00:24:49.822
names -- so, have to transition,
you want to tell admin, please,

00:24:49.822 --> 00:24:55.361
pay attention to me, program on
your server, I'm trying to

00:24:55.361 --> 00:25:01.333
juggle, but admin is not reading
e-mail. 	We want to get these

00:25:01.333 --> 00:25:04.837
cases right. 	And then the hot
stuff is fully right for

00:25:04.837 --> 00:25:08.207
everyone and depending on
[static-inaudible] HSTS header

00:25:08.207 --> 00:25:14.780
if you don't set it your site is
totally insecure but secret that

00:25:14.780 --> 00:25:20.018
can break if not done correctly.
	We need to be handholding and

00:25:20.018 --> 00:25:26.024
give admin good tools and advice
and to turn on when ready and

00:25:28.394 --> 00:25:34.700
not beforehand. 	The hottest
stuff -- HPKP pinning that lets

00:25:34.700 --> 00:25:38.337
you lock out all other
certificate authorities but can

00:25:38.337 --> 00:25:40.506
break sites easily.
	[Static-inaudible] proxy in the

00:25:40.506 --> 00:25:42.508
server or, [static-inaudible]
this stuff is theoretically

00:25:42.508 --> 00:25:44.943
possibly but engineering task
down the road. 	CA is terrifying

00:25:44.943 --> 00:25:50.949
things because they control the
security of the whole web and

00:25:59.124 --> 00:26:04.596
trying to build a giant
automated machine and have to be

00:26:04.596 --> 00:26:10.402
afraid of thing we're building.
	How did we design for safety as

00:26:10.402 --> 00:26:13.071
we build this giant robot
authentication machine? So one

00:26:13.071 --> 00:26:19.077
part of answer is defense in
depth. 	I think things I'm

00:26:22.481 --> 00:26:28.487
describe describe is that -- we
need to plan, detect and

00:26:33.225 --> 00:26:41.066
survive. 	Protect against
ourselves basically, we have a

00:26:41.066 --> 00:26:47.306
few cards up our sleeve with
this. 	One is, all of them

00:26:47.306 --> 00:26:53.479
amount to be transparent. 	We'll
publish the logs of transactions

00:26:53.479 --> 00:26:57.382
we have when people ask for a
certificate. 	As a public server

00:26:57.382 --> 00:27:00.752
asking for public certificate we
believe it's totally public

00:27:00.752 --> 00:27:05.891
event, so we list the logs. 	And
what happened when we tried to

00:27:05.891 --> 00:27:13.866
verify it. 	Publish full
verifiable certificate of issue.

00:27:13.866 --> 00:27:19.872
	See if they're all signed and
collect the set. 	And we'll also

00:27:24.076 --> 00:27:26.645
push that data into the
certificate transparency logs.

00:27:26.645 --> 00:27:29.882
	So people can validate
everything is there. 	Now we

00:27:29.882 --> 00:27:34.753
also help you with HPKP, if
you're brave and crazy to lock

00:27:34.753 --> 00:27:40.759
out the other thousand CA's, you
still need to keep us and couple

00:27:44.062 --> 00:27:49.935
of [static-inaudible] as backup
options. 	If you break that pin

00:27:49.935 --> 00:27:54.873
your site will become
unreachable for months and it's

00:27:54.873 --> 00:27:58.510
happened to people. 	And then,
we also need a plan

00:27:58.510 --> 00:28:00.445
[static-inaudible] compromise.
	What happened in employee is

00:28:00.445 --> 00:28:04.550
working for someone and what
happens if we just screw up and

00:28:04.550 --> 00:28:07.920
there was a bug we should have
stopped, but one of systems gets

00:28:07.920 --> 00:28:13.926
compromised and we're planning
to, what happens if we, we see

00:28:17.462 --> 00:28:21.600
CRYPTO attacks that are
powerful. 	The plan is to have

00:28:21.600 --> 00:28:27.606
some mechanisms that allow fast
server initiation response. 	We

00:28:30.275 --> 00:28:33.679
should be able to put up a flag
on a million sets and get them

00:28:33.679 --> 00:28:37.649
within 24 hours, issues,
reissued, if client is calling

00:28:37.649 --> 00:28:44.523
us saying do you have emergency
for us to respond to we can tell

00:28:44.523 --> 00:28:49.394
them before that happens. 	If
they want their site working

00:28:49.394 --> 00:28:52.831
that way. 	We can do
recertification,

00:28:52.831 --> 00:28:57.736
[static-inaudible] we can switch
it out for a different one, go

00:28:57.736 --> 00:29:04.509
to cold storage, bank vault make
a key and get new one, and roll

00:29:04.509 --> 00:29:09.448
everyone onto the new set really
fast. 	These are structural

00:29:09.448 --> 00:29:15.921
protections that help make this
safer. 	So, institutional, this

00:29:15.921 --> 00:29:21.927
project began as merger, and
Mozilla project, it's now, all

00:29:25.297 --> 00:29:30.035
organizations teeming up
together. 	Non-profit called

00:29:30.035 --> 00:29:33.038
Internet security research
group, and has major sponsors,

00:29:33.038 --> 00:29:38.977
EFF, Mozilla, AKAMAI, and
putting resources in. Linux

00:29:38.977 --> 00:29:45.617
foundation, couple more sponsors
on the way. 	Breakdown which

00:29:45.617 --> 00:29:51.623
bits are being done by which
teams. 	Operations of CA servers

00:29:53.759 --> 00:29:59.765
and so forth -- everyone has
been chipping in on the giant

00:30:02.634 --> 00:30:07.806
complicated policy and
bureaucratic tasks that happen

00:30:07.806 --> 00:30:13.078
here. 	Current schedule we have,
this is as of this week --

00:30:13.078 --> 00:30:16.548
slight revision so we'll have
our first set issue during the

00:30:16.548 --> 00:30:21.453
week of the 7th of September,
default browsers trust from mid

00:30:21.453 --> 00:30:27.459
October roughly and beta program
to start deploying them on wider

00:30:27.459 --> 00:30:32.164
set of sites and general
availability. Availability for

00:30:32.164 --> 00:30:37.969
everyone will be the 16th of
November. 	In the meantime we

00:30:37.969 --> 00:30:41.873
have a lot of work today. 	This,
bureaucratic tests of passing

00:30:41.873 --> 00:30:45.410
audits, producing documents,
documentation about your backup

00:30:45.410 --> 00:30:50.549
plans for everything, that's one
of giant tasks that make

00:30:50.549 --> 00:30:55.687
starting certificate authority
expensive and time consuming.

00:30:55.687 --> 00:31:02.928
	We have a couple people working
through this. 	They're tenacious

00:31:02.928 --> 00:31:08.500
in getting those audits passed.
	And if you guys are interested

00:31:08.500 --> 00:31:15.273
our, for server and client, on
gethub, come and hack it, break

00:31:15.273 --> 00:31:20.011
it, implement some of the cool
features we talked about and

00:31:20.011 --> 00:31:25.917
have not got yet and help us
encrypt the entire web. 	I'm not

00:31:25.917 --> 00:31:30.155
going to leave it there, hand
over to James to give demo how

00:31:30.155 --> 00:31:36.795
the client works and some of the
stuff we have running right now.

00:31:36.795 --> 00:31:43.468
	>> I'm James, hopefully we can
do a life demo here and nothing

00:31:43.468 --> 00:31:50.442
will go wrong. 	Pray to demo
Gods if it does. 	There we go.

00:31:50.442 --> 00:31:56.448
	You can increase your font
size. 	Yan Zhu: Can people see

00:32:02.220 --> 00:32:08.226
that? Bigger? 	>> No 	Yan Zhu:
That's about as big as you can

00:32:14.065 --> 00:32:20.071
get. 	James Kasten: Right now
using virtual environment --

00:32:22.908 --> 00:32:27.479
hopefully we'll get into
managers here, when you download

00:32:27.479 --> 00:32:32.083
the code off gethub it gives
instructions to setup virtual

00:32:32.083 --> 00:32:38.590
environment and client is
running in python right now.

00:32:38.590 --> 00:32:43.061
	But let's go through an example
here. 	So, pretend,

00:32:45.096 --> 00:32:53.038
[static-inaudible] who owned
encryption example.com -- you

00:32:53.038 --> 00:33:00.679
know, he likes to teach people
about CRYPTO set it up himself

00:33:00.679 --> 00:33:06.985
-- (Laughter) and, you know he's
also interested in making money.

00:33:06.985 --> 00:33:12.991
	So he, it has everything to be
secure, all logos, and, icon up

00:33:18.330 --> 00:33:24.336
there, but doesn't run over TLS.
	Unfortunate it looks secure to

00:33:27.072 --> 00:33:33.278
me. 	You know how that goes.
	So, luckily, you can, simply he

00:33:33.278 --> 00:33:39.284
has Apache, server that -- sorry
-- not used to that -- all

00:34:00.071 --> 00:34:07.712
right. 	So, I, when you run the
client, go through, it preview

00:34:07.712 --> 00:34:13.585
release, basically client go
through your server

00:34:13.585 --> 00:34:17.289
configuration and figure out
what names you're hosting. 	Goes

00:34:17.289 --> 00:34:23.929
through CONFIG files and select
which names. 	First example we

00:34:23.929 --> 00:34:29.501
do -- it will go through and
solve the challenges for you.

00:34:29.501 --> 00:34:35.507
	Listing what it does here. 	Can
use a little tune up, in that

00:34:40.679 --> 00:34:44.582
timeframe we solved the
challenges and setup TLS on

00:34:44.582 --> 00:34:47.986
server, that was 20 seconds
rather than 3 hours.

00:34:47.986 --> 00:34:53.992
	(Applause). 	James Kasten:
There we go. 	Yeah. 	So we have,

00:34:58.196 --> 00:35:04.135
now mind you it's self signed
because we do have CA up and

00:35:08.640 --> 00:35:14.646
running yet, if you, happy
hacker route, I don't advice,

00:35:20.385 --> 00:35:26.391
because keys public. 	You can
get that green bar up there

00:35:33.298 --> 00:35:40.939
right now. 	(Laughter) the logo,
or the, are you talked about

00:35:40.939 --> 00:35:46.945
extended elevation certificates.
	So we can also, you know --

00:35:51.816 --> 00:35:58.323
it's probably advised for the
we're awls going to want to run

00:35:58.323 --> 00:36:05.797
over HTTPS, so we can run and,
you can specify everything on

00:36:05.797 --> 00:36:10.902
the commandline and not use any
prompts at all. 	Once again, it

00:36:10.902 --> 00:36:16.341
will quickly setup the server,
solve the challenges and it also

00:36:16.341 --> 00:36:22.347
create redirect from the
original HTTPS host to, to the

00:36:24.516 --> 00:36:30.522
new host. 	So, that's all
[static-inaudible]. 	>> So we'll

00:36:34.092 --> 00:36:40.098
add nice -- try to figure out
which the doss --

00:36:46.838 --> 00:36:52.677
[static-inaudible]. 	James
Kasten: Now you're safe, some

00:36:52.677 --> 00:36:59.384
people don't want us to touch
configuration, which makes

00:36:59.384 --> 00:37:05.657
sense, if you want to simply
remove everything or mess up

00:37:05.657 --> 00:37:10.095
configuration, which it won't,
hopefully -- you can, roll back

00:37:10.095 --> 00:37:16.101
everything that I just did.
	There are 3 check points, roll

00:37:21.372 --> 00:37:24.509
back everything and now HTTPS is
no longer enabled on anything

00:37:24.509 --> 00:37:28.079
and goes back to original state
as if we didn't touch anything.

00:37:28.079 --> 00:37:34.085
	What? Not yet. 	I was trying to
get that ready for demo but

00:37:44.462 --> 00:37:50.468
could not code fast enough.
	Finally, you know if we don't

00:37:54.239 --> 00:37:56.774
support your server right now or
want to use another technique,

00:37:56.774 --> 00:38:04.382
you can specify, we have manual
authenticator, which does not

00:38:04.382 --> 00:38:10.488
require route, it simply gives
file to server and stand alone,

00:38:10.488 --> 00:38:16.427
and click. 	>> That's on 443 so
turn off existing website if you

00:38:16.427 --> 00:38:24.169
have one. 	James Kasten: Yeah,
that's it. 	(Applause). 	>> Do

00:38:24.169 --> 00:38:31.409
we have time for questions? 10
minutes, awesome, let's go. 	I

00:38:31.409 --> 00:38:36.948
think there's a MIC, go up and
ask questions on the MIC. 	>>

00:38:36.948 --> 00:38:42.954
How hard was it to become
certificate authority and get

00:38:54.933 --> 00:39:01.940
accepted by browser. 	>> We
didn't talk about this. 	How

00:39:01.940 --> 00:39:06.144
many people here think that in
order to become a certificate

00:39:06.144 --> 00:39:09.747
authority you need to be
accepted by the browser vendors?

00:39:09.747 --> 00:39:14.886
Can I see hands? I'm seeing
like, so many of you may have

00:39:14.886 --> 00:39:17.288
realized you don't need to be
accepted by the browser vendors

00:39:17.288 --> 00:39:24.529
at all. 	All you need to do is
get one existing certificate

00:39:24.529 --> 00:39:29.868
authority to promise, by
contract to cross sign you. 	And

00:39:29.868 --> 00:39:34.339
you're in, all of the browsers
instantly. 	So the crucial thing

00:39:34.339 --> 00:39:38.042
for us was getting agreement
with certificate authority

00:39:38.042 --> 00:39:43.047
saying if you pass audit we'll
cross sign you. 	And once we had

00:39:43.047 --> 00:39:46.050
that we can talk about the fact
we're going to do this. 	Because

00:39:46.050 --> 00:39:50.355
we had reliable path of being
browser trusted CA. 	There's

00:39:50.355 --> 00:39:57.862
bureaucracy, documents hundreds
of pages long, think we should

00:39:57.862 --> 00:40:05.169
probably have a backup plan and
emergency plan and way of

00:40:05.169 --> 00:40:09.374
vetting personnel and write all
of those things down, it becomes

00:40:09.374 --> 00:40:13.444
a long list. 	And write down
another entry, document all your

00:40:13.444 --> 00:40:17.282
answers to previous questions an
pass audit where you get asked

00:40:17.282 --> 00:40:19.584
for the documentation where the
documentation is. 	It costs

00:40:19.584 --> 00:40:22.053
money and takes time. 	We're
close to have it done. 	We're

00:40:22.053 --> 00:40:24.722
going to have cross sign from CA
called IdenTrust. 	>> Demo is

00:40:24.722 --> 00:40:27.425
awesome, is there plans to get
involved with C panel or hosting

00:40:27.425 --> 00:40:29.894
environment where users are not
so savvy to get certificates.

00:40:29.894 --> 00:40:31.896
	>> Absolutely we want those
tools available. 	The fancy

00:40:31.896 --> 00:40:34.132
python one can be used by those
hosting environment. 	I think

00:40:34.132 --> 00:40:36.367
they'll be trade off for
different people. 	Some will do

00:40:36.367 --> 00:40:39.304
their own and some will apply
our. 	>> API. 	>> Yes, 2 API,

00:40:39.304 --> 00:40:42.607
ACME, protocol, it's opened.
	And another API for client.

00:40:42.607 --> 00:40:48.613
	You have new server so you
might want to write for instance

00:41:18.109 --> 00:41:24.115
a post fix or XMVP server
module. 	We have a simple API

00:41:31.155 --> 00:41:38.730
with python client that helps
you understand new types of

00:41:38.730 --> 00:41:44.802
servers. 	>> So, obviously with
certificate you have to think of

00:41:44.802 --> 00:41:48.840
revocation lists, something as
large as Internet you'll have a

00:41:48.840 --> 00:41:55.780
large revocation list.
	[Static-inaudible] that can

00:41:55.780 --> 00:42:01.452
cause security issues, because
of compromise if they get pushed

00:42:01.452 --> 00:42:07.392
off CRL, so, what is your plan
for dealing with that. 	>> We're

00:42:07.392 --> 00:42:14.065
going to do OSCP, I can't
remember latest plan, the reason

00:42:14.065 --> 00:42:21.906
for doing CRL's is make sure
Google, reverts certificate list

00:42:21.906 --> 00:42:27.445
are going to have fresh way of
knowing which of our sets is

00:42:27.445 --> 00:42:31.416
valid. 	We'll lunch with a 3
month validity window. 	We'll

00:42:31.416 --> 00:42:36.187
have little less risk
structurally than most CA's in

00:42:36.187 --> 00:42:42.193
the long run, perhaps we could
aim to one day have, CSP, staple

00:42:44.495 --> 00:42:49.067
environment, I think that's more
speculative. 	And a lot of

00:42:49.067 --> 00:42:53.271
missing technical pieces an
questions, because revocation on

00:42:53.271 --> 00:43:00.445
the web right now is broken. 	>>
Thanks. 	>> On the server side,

00:43:00.445 --> 00:43:05.450
when actually updated CONFIGS,
do you have plans on integrating

00:43:05.450 --> 00:43:09.120
management tools that are vying
for updating those -- 	>> We

00:43:09.120 --> 00:43:11.122
want to be -- oh, yeah, we'd
like to write installer for

00:43:11.122 --> 00:43:17.128
puppet and chef, I'm aware that
is major need there. 	We have

00:43:21.165 --> 00:43:25.169
not got around to that yet. 	It
should be possible and if people

00:43:25.169 --> 00:43:28.606
want to write their own clients
that would be awesome too. 	>>

00:43:28.606 --> 00:43:36.581
We have a fairly clean API for
extending client functionality,

00:43:36.581 --> 00:43:39.951
if you want to make those things
happen, come and find us on

00:43:39.951 --> 00:43:45.957
gethub. 	>> I work for puppet,
I'll check it out. 	>> As we

00:43:49.594 --> 00:43:53.631
know a lot of ad sites or web
content are paid for through ad

00:43:53.631 --> 00:43:59.637
sites, as you push to even crept
these, [static-inaudible] how do

00:44:06.143 --> 00:44:08.145
you think that will impact
constant information on the web.

00:44:08.145 --> 00:44:10.147
	>> We launched thrive si
badger, the answer is, I don't

00:44:10.147 --> 00:44:12.917
think there's a technical
reason, ad tech companies switch

00:44:12.917 --> 00:44:20.525
to HTTPS, there's nothing you
can't do in HTTPS that you can't

00:44:20.525 --> 00:44:26.531
to in HTTP. 	Much to my, sadness
actually you can get refers,

00:44:32.937 --> 00:44:38.276
either you can post them which
ad companies do, or you, if it's

00:44:38.276 --> 00:44:42.580
HTTPS, they'll largely still
there. 	It's complicated, but

00:44:42.580 --> 00:44:48.119
mostly they get blocked because
it's HTTP destination and HTTPS

00:44:48.119 --> 00:44:51.822
source. 	I think,
[static-inaudible] some ad

00:44:51.822 --> 00:44:57.828
company why could do this. 	I've
been in room with ad tech people

00:44:59.897 --> 00:45:06.070
saying why are you doing this,
and I think the answer is

00:45:06.070 --> 00:45:12.343
everyone will end up doing it.
	>> You have a lot of plans that

00:45:12.343 --> 00:45:17.848
seem lofty and large goals. 	You
have 2 API's available, do you

00:45:17.848 --> 00:45:22.086
have any other API's planned and
if so what will they do. 	>> No

00:45:22.086 --> 00:45:28.092
other API's planned in, for the
short-term and one of 2 API's is

00:45:30.528 --> 00:45:32.797
small. 	The big one is ACME
protocol, Massachusetts

00:45:32.797 --> 00:45:35.666
shepherding through that, it's
going to be like big new web

00:45:35.666 --> 00:45:41.672
protocol, the API smaller for
python clients, way to write

00:45:47.812 --> 00:45:51.048
python code for your particular
server that slots in neatly,

00:45:51.048 --> 00:45:54.719
it's more like plugin
infrastructure for the client.

00:45:54.719 --> 00:46:00.424
	>> Thank you very much. 	>> I
was one of guys that said not

00:46:00.424 --> 00:46:07.498
every it site should have SSL,
you talked about your plans for

00:46:07.498 --> 00:46:10.835
avoiding direction collusion,
site.com, site.com, no reissue

00:46:10.835 --> 00:46:16.841
to a different actor. 	What if I
get site secure.com. 	>> I think

00:46:24.448 --> 00:46:26.450
this is opened question. 	We in
talking a lot internally about 2

00:46:26.450 --> 00:46:32.056
plans, 2 different types of
plans. 	I think from a first

00:46:32.056 --> 00:46:36.994
principle basis, we need to
protect against fishing, but

00:46:36.994 --> 00:46:38.996
also a question that whether
[static-inaudible] is going to

00:46:38.996 --> 00:46:43.367
continue to be the best layer to
do this. 	Because it's

00:46:43.367 --> 00:46:47.338
traditionally been the layer,
because of lock icon and

00:46:47.338 --> 00:46:50.174
[static-inaudible] which made
sense when that was a mock of a

00:46:50.174 --> 00:46:54.011
trusty E-Commerce site. 	>> It's
not trust, it's identity, gives

00:46:54.011 --> 00:47:01.786
identity and transport security.
	>> Let me finish -- sir, let me

00:47:01.786 --> 00:47:08.526
finish. 	If we were going to do
it outside of [static-inaudible]

00:47:08.526 --> 00:47:13.798
the 2 places would go into
domain system itself or into the

00:47:13.798 --> 00:47:17.568
client. 	So that there's a
richer API. 	The client has,

00:47:17.568 --> 00:47:22.273
already existing clients with
safe browser from Google and

00:47:22.273 --> 00:47:26.277
used by other browsers. 	One
option is take data set and

00:47:26.277 --> 00:47:29.080
[static-inaudible] do all of
maximum protection against

00:47:29.080 --> 00:47:36.187
fishing and pass data set over
to save browsing or say we have

00:47:36.187 --> 00:47:42.193
a flag going up, here is
evidence, you make a decision to

00:47:47.531 --> 00:47:49.734
right [static-inaudible], the
other option is we do that

00:47:49.734 --> 00:47:53.137
ourselves inside our own
infrastructure but there are

00:47:53.137 --> 00:47:59.143
costs to that. 	One is, when we
deploy HSTS, and then their site

00:48:03.881 --> 00:48:09.120
gets on to a watch list because
they host 10 --> 000 software

00:48:09.120 --> 00:48:12.423
downloads and 3 turn out to be
malware, they get put on safe

00:48:12.423 --> 00:48:18.429
browsing list. 	If we respond to
that by revokes server, would he

00:48:20.765 --> 00:48:26.170
close unrepairable outage at
site. 	It seems dangerous to do

00:48:26.170 --> 00:48:31.742
this kind of detection with
false positive rates inside kind

00:48:31.742 --> 00:48:35.212
of basic protocol layer that
protects communication. 	We have

00:48:35.212 --> 00:48:40.351
not got [static-inaudible] these
are factors we weigh out.

00:48:40.351 --> 00:48:43.888
	People say I run that site with
thousand downloads and Google

00:48:43.888 --> 00:48:47.992
blocks me sometimes, I don't
want to be denied, ability to

00:48:47.992 --> 00:48:55.332
communicate for people. 	>> I
think you're also looking at

00:48:55.332 --> 00:48:57.668
identity validation versus
domain validation, 	>> Say

00:48:57.668 --> 00:48:59.970
you're new sales certificate
authority is successful and

00:49:09.280 --> 00:49:15.286
everyone has your certificates.
	Seeing primary goal to -- say I

00:49:19.356 --> 00:49:22.893
go to your encryption example
right now, my web browser makes

00:49:22.893 --> 00:49:28.365
connection on port 80 first, if
I'm man in middle respond to

00:49:28.365 --> 00:49:34.672
that connection, how are you
going to address that. 	>> HSTS,

00:49:34.672 --> 00:49:38.375
that, it does 2 things, deals
with that and fact that people

00:49:38.375 --> 00:49:41.111
don't know secure flag on
cookies and so huge numbers of

00:49:41.111 --> 00:49:47.117
wen site, don't flag them as
secure and [static-inaudible]

00:49:52.456 --> 00:49:55.292
you need ultimately for secure
site, we will try to help site

00:49:55.292 --> 00:50:00.898
do that but in category of
things that can cause breakage

00:50:00.898 --> 00:50:07.104
and need good tooling, turning
on for a few minutes, are us and

00:50:07.104 --> 00:50:11.909
gradually increasing, good test
for breakage. 	The plan is go in

00:50:11.909 --> 00:50:13.944
there and fix this stuff for
people but it will take work to

00:50:13.944 --> 00:50:16.847
smooth out rough edges. 	>> Even
every site is sending header,

00:50:16.847 --> 00:50:20.217
man in middle will intercept.
	>> There are preload lists in

00:50:20.217 --> 00:50:24.855
browser, we could auto submit.
	That would wind up on preload

00:50:24.855 --> 00:50:30.861
list, that's a bridge we have to
cross with browser when we have

00:50:42.139 --> 00:50:48.145
enough deployment to cause a
problem. 	>> Do you think better

00:50:52.816 --> 00:50:58.122
solution to make browser makers
to start with port 443. 	>>

00:50:58.122 --> 00:51:02.927
Doesn't help, attacker can drop
the package. 	>> Good point. 	>>

00:51:02.927 --> 00:51:08.933
Thank you. 	Will you eventually
support world card certificates.

00:51:13.370 --> 00:51:19.376
	>> Not support at first, who
knows what we'll do later. 	>> I

00:51:24.315 --> 00:51:28.252
can tell you why it's hard,
people mad about identity and

00:51:28.252 --> 00:51:32.022
fishing, to give people wild
card certificates they can get

00:51:32.022 --> 00:51:34.892
PayPal, they're domain.com
whatever, and they can do that

00:51:34.892 --> 00:51:40.898
without limits. 	And so -- we
will get, unless we have a good

00:51:42.933 --> 00:51:46.637
answer to the fishing debate,
wild cards will be politically

00:51:46.637 --> 00:51:51.175
sensitive for that reason. 	>>
Follow up with that, anyway at

00:51:51.175 --> 00:51:56.146
all you can use this for dot
local domains. 	>> Dot local

00:51:56.146 --> 00:52:01.885
domains, in TLS make sense, the
thing one should aim for there,

00:52:01.885 --> 00:52:08.425
is get name space that's, not
colliding or makeup new browser

00:52:08.425 --> 00:52:10.427
UI for local.
	[Static-inaudible] for this

00:52:10.427 --> 00:52:12.429
local name spaces. 	But
[static-inaudible] separately

00:52:12.429 --> 00:52:14.431
from public web names. Thank
you. 	>> Thank you everyone.

00:52:14.431 --> 00:52:20.437
	(Applause). 	(Applause).

