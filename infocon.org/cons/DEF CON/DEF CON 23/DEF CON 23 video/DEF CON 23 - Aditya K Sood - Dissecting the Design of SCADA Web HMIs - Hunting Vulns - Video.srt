00:00:00.033 --> 00:00:04.905
>>So what we are going to talk
today is on SCADA HMIs, and to

00:00:04.905 --> 00:00:07.507
understand the different kind of
vulnerabilities that exist in

00:00:07.507 --> 00:00:13.714
those kind of app interfaces
that are used by SCADA devices

00:00:13.714 --> 00:00:16.483
-- so let's get it started. So a
little bit of background on

00:00:16.483 --> 00:00:20.654
mine. I'm actually part of the
cloud tech labs, cloud security

00:00:20.654 --> 00:00:26.260
in Elasticka in San Jose, and
just wrote a book on targeted

00:00:26.260 --> 00:00:32.966
cyber attacks, if you get a
chance, take a look at it. So

00:00:32.966 --> 00:00:36.236
before going to discuss research
on this topic, I just want to

00:00:36.236 --> 00:00:38.539
very quickly, lay a disclaimer
vulnerabilities or issues we're

00:00:38.539 --> 00:00:42.509
going to discuss are solely
based on my research. It does

00:00:42.509 --> 00:00:45.646
not relate to my previous or
present employers and all the

00:00:45.646 --> 00:00:48.949
vulnerabilities we are going to
take a look at have been

00:00:48.949 --> 00:00:52.552
reported, in the scenario, and
they are in the process of

00:00:52.552 --> 00:00:54.888
patching it. A couple of
vulnerabilities have already

00:00:54.888 --> 00:01:00.093
been patched, and other vendors
are actually working to address

00:01:00.093 --> 00:01:05.599
the issue. So let me get into
the brief idea why SCADA is

00:01:05.599 --> 00:01:10.270
becoming a problem, because of
critical infrastructure, several

00:01:10.270 --> 00:01:13.240
things, because this is getting
on the edge at the spot of time.

00:01:13.240 --> 00:01:16.610
Hackers are targeting SCADA
infrastructure, devices, and all

00:01:16.610 --> 00:01:19.513
along try to get control of
infrastructure, and then from

00:01:19.513 --> 00:01:23.216
there on, you can have
diversified impact on the

00:01:23.216 --> 00:01:27.187
target, so just pick up what
media is talking about in here,

00:01:27.187 --> 00:01:30.123
SCADA systems face diverse
software attacks and thats in

00:01:30.123 --> 00:01:33.860
several other issues. But the
end point is this is a problem

00:01:33.860 --> 00:01:37.230
and we need to take a look into
it as a community, hunt for

00:01:37.230 --> 00:01:41.768
vulnerabilities, report it, and
make it secure. A little down

00:01:41.768 --> 00:01:45.205
the lane during the host of this
presentation, you will realize

00:01:45.205 --> 00:01:49.910
that SCADA design is completely
broken. something -- so take a

00:01:49.910 --> 00:01:53.647
look into it, so before moving
further, let's have an idea of

00:01:53.647 --> 00:01:59.252
you know the vulnerabilities of
SCADA existed in last few years

00:01:59.252 --> 00:02:02.622
how the trend is going on. I did
this snapshot from the SCADA

00:02:02.622 --> 00:02:08.628
hacker, very good website, and
so they took the SCADA from OSV

00:02:10.731 --> 00:02:16.203
and they get an idea that with
moving forward, so 2015 you'll

00:02:16.203 --> 00:02:19.740
see 98 vulnerabilities have been
released, and if you look at

00:02:19.740 --> 00:02:22.175
from the last couple of years,
the trend is increasing. Its

00:02:22.175 --> 00:02:25.679
exponential. It means that the
more that you have visibility

00:02:25.679 --> 00:02:28.815
here, the more attacks in this
scenario and that is what is

00:02:28.815 --> 00:02:33.653
happening in this SCADA
infrastructure. Another brief

00:02:33.653 --> 00:02:36.056
look on the way the SCADA
vulnerabilities from the

00:02:36.056 --> 00:02:39.660
advisories, this one released,
[indiscernible] just like a few

00:02:39.660 --> 00:02:45.632
weeks back. Different kind of
[indiscernible] like different

00:02:45.632 --> 00:02:52.639
kind of vulnerabilities that
exist in SCADA devices here, and

00:02:52.639 --> 00:02:56.877
so it goes from overflows,
directory travels, man in the

00:02:56.877 --> 00:03:01.214
middle, hijacking and different
kind of things and even if you

00:03:01.214 --> 00:03:04.117
look the scenario,
vulnerabilities, file inclusion,

00:03:04.117 --> 00:03:07.521
local file inclusion,
authentication bypasses, those

00:03:07.521 --> 00:03:12.125
scenarios, wide variety of
vulnerabilities out there. We'll

00:03:12.125 --> 00:03:16.997
take a look into it. Now, again,
its a big problem because if

00:03:16.997 --> 00:03:20.934
you look as service, attackers
in underground market,

00:03:20.934 --> 00:03:26.073
compromises SCADA infrastructure
and sells control to other

00:03:26.073 --> 00:03:31.011
buyers for making money and that
is one interesting, because the

00:03:31.011 --> 00:03:35.348
SCADA is not up to that mark,
SCADA becomes very easy for them

00:03:35.348 --> 00:03:40.053
to go ahead, just sell the
excess, manufacturing plan

00:03:40.053 --> 00:03:42.055
[indiscernible], you know things
like that. But this is a big

00:03:42.055 --> 00:03:48.729
problem these days, and as a
community, as a nation, you

00:03:48.729 --> 00:03:53.900
know, find issues, have them to
patch things. So take a look at

00:03:53.900 --> 00:03:56.103
it, the simple SCADA model.
Sometimes I have a couple

00:03:56.103 --> 00:03:58.105
suspicions with the search
engine, pretty good researchers,

00:03:58.105 --> 00:04:00.040
audience. Sometimes they think
HMI is not actually a part of

00:04:00.040 --> 00:04:07.848
SCADA, but whole model, if you
look at, so this is an etching,

00:04:07.848 --> 00:04:11.118
its the one complement of it.
BLC programmer, to watch and

00:04:11.118 --> 00:04:15.689
controls your drivers driving,
and the SCADA devices and in

00:04:15.689 --> 00:04:19.860
this picture I have basically
taken a simple scenario, you

00:04:19.860 --> 00:04:23.930
have HMI complement BLC,
interface through drivers, and

00:04:23.930 --> 00:04:27.000
then it goes from the actual
manufacturing point, devices. So

00:04:27.000 --> 00:04:29.202
if you look in this particular
model, you see HMI is actually

00:04:29.202 --> 00:04:32.439
being used at the front end and
from there onwards, a lot of

00:04:32.439 --> 00:04:34.741
statistics about different
components of SCADA, and you can

00:04:34.741 --> 00:04:36.810
perform operations, you can look
into statistics. Execute

00:04:36.810 --> 00:04:38.812
commands that will be
[indiscernible] through BLC to

00:04:38.812 --> 00:04:44.818
drivers and have the inclined
motor. Target is looking into

00:04:49.756 --> 00:04:55.796
the HMI [indiscernible] so
basically, HMI human machine

00:04:55.796 --> 00:04:58.965
interface to a web. Could be a
web server, phone, further

00:04:58.965 --> 00:05:04.037
application, desktop
applications, but in this

00:05:04.037 --> 00:05:08.074
particular talk [indiscernible].
An interesting point HMI,

00:05:08.074 --> 00:05:14.114
visually presentation of what is
going inside the complete SCADA

00:05:14.114 --> 00:05:19.452
environment. And how the data
is, you know, taken from the

00:05:19.452 --> 00:05:23.156
panel and then how it's taken
from the various devices that

00:05:23.156 --> 00:05:27.694
are running back end. So simple
way, centralized control center

00:05:27.694 --> 00:05:31.731
managed through web. If you
control the web, the front

00:05:31.731 --> 00:05:35.001
component of it, you can do much
more with it. And we'll take a

00:05:35.001 --> 00:05:39.439
look with a scenario. So this is
basically a Web HMI, embedded

00:05:39.439 --> 00:05:44.778
web server in a phone, which is
exposed on the internet, or

00:05:44.778 --> 00:05:48.381
maybe not properly secure, and
things like that. But our motive

00:05:48.381 --> 00:05:54.421
in particular talk to go into
the design and the security, of

00:05:54.421 --> 00:05:58.158
the web HMI, how they have
designed, why they're not

00:05:58.158 --> 00:06:00.961
following secure design
principles and what could be the

00:06:00.961 --> 00:06:07.767
impact. So in this particular
talk, I mean, you can say most

00:06:07.767 --> 00:06:10.270
of these devices are not
deployed with SSL, which is

00:06:10.270 --> 00:06:14.107
fine. They are basically
configured in wrong manner

00:06:14.107 --> 00:06:17.477
because not securely configured.
They have having a default

00:06:17.477 --> 00:06:20.113
username and password or even if
they configured the password,

00:06:20.113 --> 00:06:26.019
the password is weak.
[Indiscernible] Security which

00:06:26.019 --> 00:06:28.922
actually means that if the web
server tries to send some sort

00:06:28.922 --> 00:06:32.158
of hacker, embedded web server
no capability at this point in

00:06:32.158 --> 00:06:36.563
time to send some sort hackers
back to the browser, and from

00:06:36.563 --> 00:06:39.032
there on the browser can act
accordingly. For example,

00:06:39.032 --> 00:06:41.534
extreme options can include,
intense security, so there's no

00:06:41.534 --> 00:06:45.005
concept of that, at this point
in time. But we are not going

00:06:45.005 --> 00:06:48.141
into these issues in this talk,
but what we are going to talk

00:06:48.141 --> 00:06:53.146
about is how the design has been
done. So what we are going to

00:06:53.146 --> 00:06:57.150
have in -- so any embedded,
primarily web servers, power

00:06:57.150 --> 00:07:02.122
lines slash -- web technology
used by HMS, anything exposed

00:07:02.122 --> 00:07:09.629
through web is target of this
talk. So we are basically, in

00:07:09.629 --> 00:07:12.899
this particular talk, is going
to target front end. Any web

00:07:12.899 --> 00:07:16.903
based software used to control
HMI, any software that is used

00:07:16.903 --> 00:07:21.041
to spool HMI, any web component
providing interface to these

00:07:21.041 --> 00:07:27.614
SCADA device, so that's the
target here. So what vendors we

00:07:27.614 --> 00:07:31.751
are going to look into from
security vulnerability point of

00:07:31.751 --> 00:07:37.757
view. So there are many vendors
out there, but I chosen for this

00:07:37.757 --> 00:07:40.960
talk, automation [indiscernible]
paired devices, Schneider

00:07:40.960 --> 00:07:45.699
electric prisma, [indiscernible]
and a whole lot of

00:07:45.699 --> 00:07:48.501
vulnerabilities out there, can't
discuss in this because of time

00:07:48.501 --> 00:07:51.271
constraint. What I will say now
is that there are a lot of

00:07:51.271 --> 00:07:54.140
vulnerabilities out there. And
we'll take a look and you might,

00:07:54.140 --> 00:07:58.745
you know, think of it as fun,
but it is actually a fun, when

00:07:58.745 --> 00:08:00.947
you look at vulnerabilities,
there are so many ridiculous

00:08:00.947 --> 00:08:06.720
vulnerabilities out there. Now
we are going to target for the

00:08:06.720 --> 00:08:11.157
next couple of minutes on the
BMX family of devices, which has

00:08:11.157 --> 00:08:15.295
been provided by Schneider
Electric. Basically HMI active

00:08:15.295 --> 00:08:19.232
web services, as a part of the
web server, embedded in the

00:08:19.232 --> 00:08:22.569
phone here. It requires real
time communication with internet

00:08:22.569 --> 00:08:27.340
ECPI, used for that end device.
It has a capacity to host

00:08:27.340 --> 00:08:29.843
dynamic user defined web pages
to provide more updated

00:08:29.843 --> 00:08:34.881
information, for what's going
on. One target, let's talk about

00:08:34.881 --> 00:08:38.251
some vulnerabilities, so while I
was doing research on it hard

00:08:38.251 --> 00:08:41.287
core vulnerability, possible
actually [indiscernible]

00:08:41.287 --> 00:08:45.759
account, in the [indiscernible]
file. We have multiple

00:08:45.759 --> 00:08:48.762
[indiscernible] vulnerabilities,
a remote file inclusion, local

00:08:48.762 --> 00:08:54.134
file inclusion, authentication
design. And in this particular

00:08:54.134 --> 00:08:57.137
device, and put the most stress
on the RF file, which I will

00:08:57.137 --> 00:08:59.506
hopefully be demoing, hopefully
DEFCON network will work,

00:08:59.506 --> 00:09:03.176
otherwise we have a video. But
let's just go into a better

00:09:03.176 --> 00:09:06.079
analysis. Let's say
[indiscernible] and I have not

00:09:06.079 --> 00:09:12.218
masked a URL in this case. You
find this device, and you open

00:09:12.218 --> 00:09:16.156
it in your browser, you will be
presented with Java. You need to

00:09:16.156 --> 00:09:19.993
install Java for that. You will
be install like this, you will

00:09:19.993 --> 00:09:23.496
install it, because in order to
excess all the HMI

00:09:23.496 --> 00:09:27.600
functionalities you have to
access this shallow template, to

00:09:27.600 --> 00:09:31.304
install it accordingly. >> When
you install it, you come up

00:09:31.304 --> 00:09:35.375
with, you know when you download
this, the update, you try to

00:09:35.375 --> 00:09:37.744
look into the source code, you
know where the Java update has

00:09:37.744 --> 00:09:41.781
been placed, how you can access
it and things like that. So the

00:09:41.781 --> 00:09:44.551
whole just this slide is going
to tell you where the Java

00:09:44.551 --> 00:09:48.888
update is placed for that
particular web HMI and how you

00:09:48.888 --> 00:09:51.691
can access. Basically looking
into the source code of it, that

00:09:51.691 --> 00:09:57.697
browser. When you do the source
code analysis, just presenting a

00:09:57.697 --> 00:10:00.099
figure here, if you do the
source code analysis of the Java

00:10:00.099 --> 00:10:06.105
file, password in it and you can
see, Schneider, and then you

00:10:08.708 --> 00:10:12.812
have activity log and a sys log.
So you're basically looking into

00:10:12.812 --> 00:10:16.282
the decompilation of the Java
source for analysis and this is

00:10:16.282 --> 00:10:19.719
hard coded. You can use it to
actually access the FTB

00:10:19.719 --> 00:10:26.926
[indiscernible] server. Moving
forward, so a bit more of source

00:10:26.926 --> 00:10:30.363
code analysis, you get an idea
all the config files are hard

00:10:30.363 --> 00:10:36.936
coded, pick apart, put in URL,
and if you are authenticated you

00:10:36.936 --> 00:10:42.976
can even access it, or in
certain cases you can even

00:10:42.976 --> 00:10:48.081
bypass that too. Moving forward,
so vulnerabilities, specify, so

00:10:48.081 --> 00:10:51.751
it is a complete URL, which is
simply HTTP. You have

00:10:51.751 --> 00:10:56.189
parameters. Force the user to
click on the link and you can

00:10:56.189 --> 00:10:59.392
change the password. You can
control the editor password.

00:10:59.392 --> 00:11:05.231
Things like that. It's all open
in that scenario and this is one

00:11:05.231 --> 00:11:08.768
is interesting one, so they have
vulnerability in the scenario,

00:11:08.768 --> 00:11:14.007
unauthenticated, file inclusion,
one URL, when you search for

00:11:14.007 --> 00:11:19.879
URLs on that web HMI, specific
URL, validates the input you are

00:11:19.879 --> 00:11:24.417
supplying, so basically framing
the content. In this case I have

00:11:24.417 --> 00:11:27.387
shown that, on this particular
device you can include a remote

00:11:27.387 --> 00:11:35.228
trial, and I will be demoing in
just a bit in seconds.

00:11:35.228 --> 00:11:38.064
Similarly, all these
vulnerabilities are also present

00:11:38.064 --> 00:11:40.066
in the factory cost this is
[indiscernible] I think

00:11:40.066 --> 00:11:42.068
Schneider Electric and
Telemecanique are

00:11:42.068 --> 00:11:44.070
collaboratively releases these
devices. If you go ahead to like

00:11:44.070 --> 00:11:50.076
the previous devices, some old
school devices, or even devices

00:11:52.812 --> 00:11:56.716
that are being, you know
released these days, the same

00:11:56.716 --> 00:12:01.721
vulnerabilities apply affect the
cost. So I'm going to demo here,

00:12:01.721 --> 00:12:09.228
remote file inclusion
vulnerability, I hope. Connect

00:12:09.228 --> 00:12:15.234
with box. [No audio] This was
working just five minutes back,

00:12:52.505 --> 00:12:55.274
so. It happens DEFCON all the
time but I have a backup.

00:13:00.713 --> 00:13:02.982
[Laughter] Very interesting
demo, actually somehow you can

00:13:02.982 --> 00:13:07.353
even download malware, encode
format to device. If you get a

00:13:07.353 --> 00:13:11.357
chance later on, and I can show
you where the network is

00:13:11.357 --> 00:13:14.661
working, so this was the demo.
So let's take a look from the

00:13:14.661 --> 00:13:22.001
video point of view. So this you
will see that we are

00:13:22.001 --> 00:13:25.605
highlighting file inclusion
vulnerability in Schneider, BMX,

00:13:25.605 --> 00:13:31.544
CPUs. Web HMI, the video might
not tell you exactly how you can

00:13:31.544 --> 00:13:35.415
download [indiscernible] in the
encoded format but it can give

00:13:35.415 --> 00:13:37.917
you an idea where is the
vulnerability and what you can

00:13:37.917 --> 00:13:43.923
do with it. We just try you know
as a researcher try to look at

00:13:46.025 --> 00:13:49.362
what's going on in and out of a
system, and you can see that

00:13:49.362 --> 00:13:51.497
even if you try to access some
of the source, basically

00:13:51.497 --> 00:13:55.635
restricted, so you need to
provide a basic -- so actually a

00:13:55.635 --> 00:14:01.374
basic authentication here. But,
we have -- this is a case we

00:14:01.374 --> 00:14:08.147
want to show. We want to
actually look at it. So I closed

00:14:08.147 --> 00:14:14.153
it. So you see that the
vulnerability is present in one

00:14:20.693 --> 00:14:25.098
of the index HTML file not
actually validating what kind of

00:14:25.098 --> 00:14:28.835
content is being passed through,
so you can easily load any third

00:14:28.835 --> 00:14:32.472
party website directly into it,
and in this case we uploaded the

00:14:32.472 --> 00:14:36.409
BlackHat One so I can explain
how this can be used in targeted

00:14:36.409 --> 00:14:41.013
attacks. A similar case, you can
go find a host or some sort of

00:14:41.013 --> 00:14:43.216
malware on the third party
domain. You know, its used

00:14:43.216 --> 00:14:45.718
for any [indiscernible] effect.
You basically encode the URL or

00:14:45.718 --> 00:14:50.323
you can use URL shockna, you can
simply pass it through it and

00:14:50.323 --> 00:14:53.392
force the user to click it. Any
SCADA administer or other guy

00:14:53.392 --> 00:14:58.364
and that way download the
malware and use the system and

00:14:58.364 --> 00:15:02.435
it's very interesting. You can
also pass an XY code through to

00:15:02.435 --> 00:15:07.840
and HTMP file. Wherever its
framed, HTML in the browser, but

00:15:07.840 --> 00:15:11.544
then you can get compromised.
But basically, simply through

00:15:11.544 --> 00:15:16.716
RFI in this case. The next
device I'm going to target here

00:15:16.716 --> 00:15:21.187
is the mock Sy Logic. From the
authentication final view. Just

00:15:21.187 --> 00:15:23.456
a simple [indiscernible] So
basically they dont provide

00:15:23.456 --> 00:15:27.693
any [indiscernible] for XTPS in
this. If you look at how the

00:15:27.693 --> 00:15:30.863
password is being hacked, this
is basically the MD5 and no

00:15:30.863 --> 00:15:34.634
fault provided for it, so --
which makes it pretty difficult

00:15:34.634 --> 00:15:38.704
to replay attacks and you can
crack it within a spec of time.

00:15:38.704 --> 00:15:42.608
So whatever the vulnerabilities,
I'm discussing in this, test

00:15:42.608 --> 00:15:45.011
radius [indiscernible] along
different devices and these are

00:15:45.011 --> 00:15:50.049
basically tested on the real
devices on the internet. So once

00:15:53.753 --> 00:15:56.923
you, this is basically in
software is like a bad design,

00:15:56.923 --> 00:16:00.159
where you pass your credentials
in the HTTP get because its

00:16:00.159 --> 00:16:03.229
got cached [indiscernible] and
then it becomes easy for the

00:16:03.229 --> 00:16:06.165
attackers get access to that,
any proxy device or it may have

00:16:06.165 --> 00:16:09.168
been the web server, everything
is going to get cached that's

00:16:09.168 --> 00:16:14.607
bad security design. But in this
case, we did our test for real

00:16:14.607 --> 00:16:19.679
time device, so in this case, if
you look, you will be presenter

00:16:19.679 --> 00:16:23.783
with this web log in prompt. You
provide a password and that kind

00:16:23.783 --> 00:16:29.188
of STTP request is issued. You
can see that the [indiscernible]

00:16:29.188 --> 00:16:32.959
hash has passed, and in this
particular case -- so we

00:16:32.959 --> 00:16:38.364
actually moved forward and just
hoping some normal website on

00:16:38.364 --> 00:16:42.134
the internet and you can see
here, that when we pass by a

00:16:42.134 --> 00:16:45.872
hash, it was easily crackable
and once get access to the

00:16:45.872 --> 00:16:48.641
password, you can go ahead and
access the complete

00:16:48.641 --> 00:16:51.010
[indiscernible]. So the problem
is that no [indiscernible] an

00:16:51.010 --> 00:16:54.447
HTTP can get, no man in the
middle and things like that. But

00:16:54.447 --> 00:17:00.519
this is a big problem with --
from the authentication point,

00:17:00.519 --> 00:17:06.526
several web HMIs, they are not
up to the mark. On the next

00:17:08.828 --> 00:17:13.099
target, Symantic HMI rap, I
personally like the

00:17:13.099 --> 00:17:17.970
vulnerability that exists in
this web HMI. The reason, this

00:17:17.970 --> 00:17:21.407
HMI provides an exploder
interface. So when you click the

00:17:21.407 --> 00:17:24.277
exploder interface you are
presented with a directory

00:17:24.277 --> 00:17:27.780
listing of all hard drives that
are connected to it and any

00:17:27.780 --> 00:17:32.051
directories connected on the
server. In that scenario if you

00:17:32.051 --> 00:17:39.458
move forward, just in case, I
want to highlight vulnerability,

00:17:39.458 --> 00:17:42.995
[indiscernible] file uploading.
So it is possible to actually

00:17:42.995 --> 00:17:47.800
upload a file by sending a link
to a target. Once it clicks the

00:17:47.800 --> 00:17:50.336
link, the file will be uploaded
to the USB device that is

00:17:50.336 --> 00:17:56.742
connected to it. This web HMI or
any exploder with interface on

00:17:56.742 --> 00:17:59.745
it. But again, these are
vulnerabilities out there. You

00:17:59.745 --> 00:18:03.516
can execute any command or force
the user to perform any actions,

00:18:03.516 --> 00:18:09.121
which not authorized to do. Just
snapshot, you get an idea that

00:18:09.121 --> 00:18:13.459
when you are uploading a file,
[indiscernible] specified, which

00:18:13.459 --> 00:18:20.499
is very bad design practice, and
-- but this exists. So this is

00:18:20.499 --> 00:18:23.936
actually a web HMI for Symantec.
I have actually shown an

00:18:23.936 --> 00:18:27.807
exploder interface, so you can
get an idea, we are into the

00:18:27.807 --> 00:18:32.979
directory of that web HMI for
this particular one, and another

00:18:32.979 --> 00:18:37.883
small snapshot is present, once
we uploaded the file, you can

00:18:37.883 --> 00:18:42.455
access the file directly from
there. And if you look at this

00:18:42.455 --> 00:18:45.524
particular screenshot, you get
an idea that we use simple

00:18:45.524 --> 00:18:49.662
external HTTP request to trigger
the cross origin not actually

00:18:49.662 --> 00:18:53.699
the cross origin, just trigger
the cross request, and from

00:18:53.699 --> 00:18:57.303
there on, which we can upload
any file directly to it. And

00:18:57.303 --> 00:18:59.605
then actually once we access it,
you get a control of it, you can

00:18:59.605 --> 00:19:02.642
process files. A lot of data out
of it. Maybe you can upload

00:19:02.642 --> 00:19:05.678
malware through the USB
directly. If you remember in

00:19:05.678 --> 00:19:10.950
2009, Stuxnet, they simply put a
malware on the USB, but in this

00:19:10.950 --> 00:19:14.320
particular case, you can --
through the web and force the

00:19:14.320 --> 00:19:17.657
user to click on a link, file
will be uploaded directly to the

00:19:17.657 --> 00:19:23.262
USB. Once disconnected, it will
be taken care of that. But once

00:19:23.262 --> 00:19:26.799
connected, you can also upload
files on the web panel, and

00:19:26.799 --> 00:19:30.136
things like that. You have
another cross [indiscernible]

00:19:30.136 --> 00:19:35.374
vulnerability, you can delete
any files, by forcing the user

00:19:35.374 --> 00:19:41.547
to have no tokens. You can keep
on deleting files, lock files

00:19:41.547 --> 00:19:44.650
and other interesting things.
Let's take a look at this

00:19:44.650 --> 00:19:50.656
vulnerability. Actually -- if I
remember correctly, Semens in

00:20:01.467 --> 00:20:03.469
the process of patching this
vulnerability. Might have

00:20:03.469 --> 00:20:08.240
already patched. But we can try.
In this case, we go to the file

00:20:08.240 --> 00:20:10.876
browser. You can see that
there's a www route temp

00:20:10.876 --> 00:20:16.849
directory storage card, storage
card two, and -- so this is our

00:20:16.849 --> 00:20:22.855
target. We want to upload a file
here. I just created a custom

00:20:25.191 --> 00:20:29.762
demo, so just for the sake of
showing what is exactly happens

00:20:29.762 --> 00:20:32.565
in the back, so we clicked the
button. But you can basically

00:20:32.565 --> 00:20:36.435
send a link, once it has been
clicked by the user, backups is

00:20:36.435 --> 00:20:39.205
automatically cookies will be
taken care of, and then the

00:20:39.205 --> 00:20:42.241
request will issue. so this is a
classified site file,

00:20:42.241 --> 00:20:49.548
vulnerability. Next part is just
uploading that test file. If you

00:20:49.548 --> 00:20:57.256
see, we don't have any test file
at this point of time. There's

00:20:57.256 --> 00:21:01.060
no file uploaded right now. And
let's figure the export code.

00:21:01.060 --> 00:21:07.066
Show how has been issued through
the HTTP box. And this all --

00:21:09.568 --> 00:21:13.839
URL can be sent out in an
automated manner. So we clicked

00:21:13.839 --> 00:21:19.845
it. The request has been issued.
So request has been accepted by

00:21:21.914 --> 00:21:27.486
the web server. This is a file
we uploaded a simple text file

00:21:27.486 --> 00:21:33.492
in this case. If you go back,
and refresh the page, and there

00:21:41.467 --> 00:21:46.272
you go. We got a XTP file there.
So the idea is that you can

00:21:46.272 --> 00:21:50.643
upload any file, executable, as
I mentioned earlier and from

00:21:50.643 --> 00:21:54.914
there onwards you can access the
file through URL. Like routing

00:21:54.914 --> 00:21:59.752
or compromising the systems
through web, and all these

00:21:59.752 --> 00:22:02.821
vulnerabilities play a
significant role in it, and all

00:22:02.821 --> 00:22:05.157
these vulnerabilities as I
mentioned tested against a real

00:22:05.157 --> 00:22:10.262
environment. So moving next, we
going to tackle a similar device

00:22:10.262 --> 00:22:12.464
in this scenario. Im going to
show you in just a few but these

00:22:12.464 --> 00:22:15.668
are interesting vulnerabilities
to understand what kind of

00:22:15.668 --> 00:22:19.939
design they are following. In
the solar device, again hard

00:22:19.939 --> 00:22:23.509
coded administrator password and
these devices are heavily used

00:22:23.509 --> 00:22:31.383
for visualization for solar
plans, take a look into it. Once

00:22:31.383 --> 00:22:36.388
you open -- you know this HMI
interface to a web, you will be

00:22:36.388 --> 00:22:40.960
have this XP Java template. Just
the name. You have to install a

00:22:40.960 --> 00:22:46.532
Java or download a .jar file to
it, and another snapshot you can

00:22:46.532 --> 00:22:50.202
see that there is links to where
the .jar file is placed, so

00:22:50.202 --> 00:22:53.539
follow the same tactics, and we
perform this source code

00:22:53.539 --> 00:22:57.610
analysis, and then from there on
wards we get an idea, just an

00:22:57.610 --> 00:23:01.413
old system for the vulnerability
demonstration, so if you take a

00:23:01.413 --> 00:23:07.419
look in that. SO you get a
username and password as

00:23:10.656 --> 00:23:12.658
[indiscernible] and then
something, 2008, all of that.

00:23:12.658 --> 00:23:15.027
This password will give you a
direct access to the web HMI.

00:23:15.027 --> 00:23:19.331
Now once we use this password,
and then you can see we get

00:23:19.331 --> 00:23:23.702
access to that device, and if
you see, this HMI interface,

00:23:23.702 --> 00:23:29.275
placed in that mimic diagram,
and then you can get complete

00:23:29.275 --> 00:23:32.411
idea that you are in control of
that -- this solar panel, maybe

00:23:32.411 --> 00:23:38.851
solar devices, through importers
and all of that. The problem

00:23:38.851 --> 00:23:43.522
again here is that its just a
web, these problems persist, and

00:23:43.522 --> 00:23:47.426
from there on, that hacker can
easily to gain control of that.

00:23:47.426 --> 00:23:51.330
I always believe if I can do it,
and I think any other person can

00:23:51.330 --> 00:23:54.967
easily do it, because the reason
is that, SCADA, things from that

00:23:54.967 --> 00:23:58.337
perspective, and hackers are
thinking from much more wider

00:23:58.337 --> 00:24:01.040
perspective because they have a
lot of time, significant and

00:24:01.040 --> 00:24:03.742
solicit interest and I think
these vulnerabilities can be

00:24:03.742 --> 00:24:09.748
powned pretty easily and control
all these devices. So I just --

00:24:12.318 --> 00:24:18.324
we can take a look into it. Demo
here. Just one minute demo. Just

00:24:24.697 --> 00:24:28.000
want to show that the
vulnerability actually exists

00:24:28.000 --> 00:24:30.235
there, so the vulnerability has
been avoided. I see they are

00:24:30.235 --> 00:24:32.404
working with the vendor now, so
see you get a Java

00:24:32.404 --> 00:24:37.376
[indiscernible] like this. You
have to accept the risk in this

00:24:37.376 --> 00:24:43.382
case. We are trying to accept
the Java application here. Try

00:24:51.357 --> 00:24:57.363
the admin password but it's not
going to work. You're not

00:25:04.303 --> 00:25:07.806
allowed, so we are going to
follow our simple tactic, we

00:25:07.806 --> 00:25:11.410
going to go into the source code
and go to the .jar file, to try

00:25:11.410 --> 00:25:15.381
to see what is actually in
there. The file they have this

00:25:15.381 --> 00:25:21.387
VM -- VMS.jar file, and we I
already downloaded it, and now

00:25:23.622 --> 00:25:25.924
we're going to look into the
source code analysis, just a

00:25:25.924 --> 00:25:30.195
simple thing, five minute of
stuff. And once you look at the

00:25:30.195 --> 00:25:32.731
classes once you do a lot of
source code analysis, you get an

00:25:32.731 --> 00:25:36.268
idea where you have to look
into. For example,

00:25:36.268 --> 00:25:39.605
authentication log in classes,
you know, session identifier

00:25:39.605 --> 00:25:44.543
classes, things like that. So
just skimming over things. So of

00:25:44.543 --> 00:25:47.346
course, we're going to look into
hard coded configuration and any

00:25:47.346 --> 00:25:53.352
other things. So now here you
go. When we look into this, hard

00:25:58.223 --> 00:26:03.962
coded information. It just five
to ten minute, in this case and

00:26:03.962 --> 00:26:07.032
for an advance tech it might be
a little lesser. Again, the

00:26:07.032 --> 00:26:09.501
thing is that your hard core
credentials are being presented

00:26:09.501 --> 00:26:12.538
in .jar files. Flash files,
insecure authentication design

00:26:12.538 --> 00:26:17.342
and frameworks, and we are using
SCADA a lot these days, and we

00:26:17.342 --> 00:26:19.445
are finding vulnerability
protocol levels, and you know

00:26:19.445 --> 00:26:21.680
[indiscernible] and all those
kind of things but we also need

00:26:21.680 --> 00:26:26.552
to look into the web HMIs, just
broken, and take a look a bit

00:26:26.552 --> 00:26:31.056
more into it. If you see access
to the complete HMI I can look

00:26:31.056 --> 00:26:34.493
into, I can change configuration
and I can screw the device if I

00:26:34.493 --> 00:26:39.731
want. Just for testing purposes.
So again, you don't need to

00:26:39.731 --> 00:26:42.367
attack the infrastructure right
away. You just need to access

00:26:42.367 --> 00:26:45.137
the device to web, and then you
have the idea of whats going

00:26:45.137 --> 00:26:49.007
on in and out of the system, and
there you go. You got access.

00:26:51.610 --> 00:26:54.213
Now, in the next set of devices,
Im just going to show the

00:26:54.213 --> 00:26:57.449
wide variety of devices to show
the vulnerabilities we are

00:26:57.449 --> 00:27:00.519
discussing in here, are not
actually present in one specific

00:27:00.519 --> 00:27:04.556
device but a wide range of
devices, and this time I cannot

00:27:04.556 --> 00:27:07.826
cover all of them,
vulnerabilities, but still

00:27:07.826 --> 00:27:10.996
whatever the best I can, I will
take care of it. In this

00:27:10.996 --> 00:27:12.998
[indiscernible] automation,
[indiscernible] there's a

00:27:12.998 --> 00:27:17.836
variety of they have devices
here. I766. I769 family and

00:27:17.836 --> 00:27:23.509
thing. Simple thing I want to
highlight information basically

00:27:23.509 --> 00:27:28.981
through default files. A lot of
information being presented in

00:27:28.981 --> 00:27:32.251
it and by default design, web
applications and things. You

00:27:32.251 --> 00:27:37.322
need to get the credential first
to provide any kind of info but

00:27:37.322 --> 00:27:40.192
in this case, the design
principle is not following.

00:27:40.192 --> 00:27:43.996
Again, you have a RFI, you have
a local file inclusion, and long

00:27:43.996 --> 00:27:48.400
live processed scripting. Good
to find out, again it can be

00:27:48.400 --> 00:27:52.671
used is Schneiders, but in
case of SCADA, I don't consider

00:27:52.671 --> 00:27:56.008
this that kind of pretty
advanced vulnerability or

00:27:56.008 --> 00:28:01.213
basically hard core one. So if
you look at this particular

00:28:01.213 --> 00:28:04.950
screenshot information
disclosure is happening. We move

00:28:04.950 --> 00:28:08.987
forward, more file inclusion.
Again we just uploaded the data.

00:28:08.987 --> 00:28:13.158
BlackHat web page in it and
its all authenticated, so you

00:28:13.158 --> 00:28:17.029
don't need to wait for the
person to do the authentication

00:28:17.029 --> 00:28:19.831
and process the link. You just
place the link and it should be

00:28:19.831 --> 00:28:23.302
done. And I see if I get time
later on and the network is

00:28:23.302 --> 00:28:27.606
working, I rapidly show you that
demo that you can download

00:28:27.606 --> 00:28:33.512
malware on the fly with this
thing. So scripting as usual.

00:28:33.512 --> 00:28:36.281
Unauthenticated, simply send a
link, get whatever you want.

00:28:36.281 --> 00:28:43.488
Now, we have gone through the
Schneider electrical devices,

00:28:43.488 --> 00:28:47.759
drop [indiscernible] prisma and
we're going to target fisma web.

00:28:47.759 --> 00:28:53.565
Interesting, one of the most, I
think easy vulnerability you

00:28:53.565 --> 00:28:57.636
can, or funny vulnerability.
Fisma web is one of the vendor

00:28:57.636 --> 00:29:00.072
that are based out of the [
indiscernible] and they actually

00:29:00.072 --> 00:29:03.809
build different devices like
metal detectors. Build devices

00:29:03.809 --> 00:29:07.846
like jack [indiscernible] and
stuff like that. And they also

00:29:07.846 --> 00:29:13.385
build devices for X rays like
inspection machines. So

00:29:13.385 --> 00:29:16.054
interesting thing with this
device is web HMI, the password

00:29:16.054 --> 00:29:23.695
disclosure in JavaScript file.
Who could ever imagine this? So

00:29:23.695 --> 00:29:25.697
you are, lets say you are
acting in so some sort of

00:29:25.697 --> 00:29:27.833
airport or another place with a
metal detector. Or somewhere you

00:29:27.833 --> 00:29:31.870
found is a prisma web metal
detector, somewhere you get

00:29:31.870 --> 00:29:35.807
access to IP. Boom, I mean you
can do a lot of bad things. It's

00:29:35.807 --> 00:29:40.178
all in JavaScript, the client
side. and it was working, the

00:29:40.178 --> 00:29:44.049
all the vulnerability has been
reported. Again these are full

00:29:44.049 --> 00:29:46.051
of [indiscernible]
vulnerabilities, which I don't

00:29:46.051 --> 00:29:50.489
want to go in right now, but
this one is interesting through

00:29:50.489 --> 00:29:54.092
simple JavaScript file. Take a
look. So we access this, prisma

00:29:54.092 --> 00:29:58.797
web here, so you get this web
panel, and from there on, try to

00:29:58.797 --> 00:30:02.734
look into the source code to
just understand what kind of

00:30:02.734 --> 00:30:05.270
components are being used, what
kind of files are being included

00:30:05.270 --> 00:30:12.511
in with this web HMI. If you
see, we access two specific JS

00:30:12.511 --> 00:30:17.716
files, one is log in .path JS,
the other one is config.JS So

00:30:17.716 --> 00:30:21.853
the config.JS. has been
configured in a simple manner.

00:30:21.853 --> 00:30:26.925
But if you look in a log in .JS,
it says Fisma web, and fisma. So

00:30:26.925 --> 00:30:29.494
this actually show that it might
be running in this case a

00:30:29.494 --> 00:30:32.264
default password could be
possible, but they are storing

00:30:32.264 --> 00:30:35.634
it in a JavaScript file, so if
you are going to configure, any

00:30:35.634 --> 00:30:38.537
administrator is going to
configure a new password for it,

00:30:38.537 --> 00:30:41.873
it's still going to be present
in the JavaScript file because

00:30:41.873 --> 00:30:47.479
thats how exactly how that
device works. And -- so we have

00:30:47.479 --> 00:30:53.485
the credentials. So I got access
to the fisma web by using the

00:30:53.485 --> 00:30:57.155
password, and from there on, you
can see particular device, you

00:30:57.155 --> 00:31:00.392
can set up the parameters, can
screw up the process it is going

00:31:00.392 --> 00:31:03.261
in. But this is -- this is one
of the funniest vulnerability

00:31:03.261 --> 00:31:10.235
I've seen in this SCADA HMI
research. A lot of impact. This

00:31:10.235 --> 00:31:14.005
vulnerability, if you were going
to manipulate metal detectors,

00:31:14.005 --> 00:31:18.944
it's just crazy. But -- from
there onwards you also have a

00:31:18.944 --> 00:31:23.248
crosseyed request forgery. Means
the connector tokens is totally,

00:31:23.248 --> 00:31:27.719
not followed with SCADA HMI
simple through HTTP guest, and

00:31:27.719 --> 00:31:31.056
change the password on the fly
and then you can gain access to

00:31:31.056 --> 00:31:37.062
it. Now, see if internet is
working, but I [No audio]

00:31:58.583 --> 00:32:04.523
Looks like we're not lucky
today. I can show you the demo,

00:32:07.926 --> 00:32:10.829
if you're interested. Just
outside somewhere I can show you

00:32:10.829 --> 00:32:16.434
the real time how this can be.
Just some live device somewhere.

00:32:16.434 --> 00:32:19.371
Moving forward, now we're going
to take a look into the ITC

00:32:19.371 --> 00:32:23.842
controller devices, primarily
that goes in thumbs, so if you

00:32:23.842 --> 00:32:26.645
look into these thumbs, these
are basically used for pumping

00:32:26.645 --> 00:32:30.982
water, some sort of further
purposes. Again, you can look

00:32:30.982 --> 00:32:33.518
into the snapshot and you can
get an idea that what it

00:32:33.518 --> 00:32:36.454
actually looks like as a -- you
know, the controller 3 --> 000

00:32:36.454 --> 00:32:41.560
design for it, and you'll again
have a web HMI for it. But they

00:32:41.560 --> 00:32:46.331
have like some problem, again
you can upload the phoneware in

00:32:46.331 --> 00:32:49.334
this case, uploading the files.
You can go and upload the

00:32:49.334 --> 00:32:55.073
phoneware, forgery. From there
onwards, you can go ahead and

00:32:55.073 --> 00:33:01.179
play the device through in this
case but this is also so

00:33:01.179 --> 00:33:03.582
there's a lot of other
vulnerabilities also present in

00:33:03.582 --> 00:33:07.953
this [indiscernible] controller,
which might not cover but just

00:33:07.953 --> 00:33:10.722
an open platform. You can go
ahead, if you have some time,

00:33:10.722 --> 00:33:14.192
motivated enough to hunt for
vulnerabilities. I think this is

00:33:14.192 --> 00:33:16.628
a very good platform and work
with the [indiscernible] to

00:33:16.628 --> 00:33:22.667
report them those issues. And
following that, this is one IDC

00:33:22.667 --> 00:33:25.971
controller, request, actually
the request and response

00:33:25.971 --> 00:33:27.973
mechanism, and from there, how
the request has been issued and

00:33:27.973 --> 00:33:29.975
has been accepted, so you can
upload files, phoneware, things.

00:33:29.975 --> 00:33:32.744
With this vulnerability, once
you control the phoneware, so

00:33:32.744 --> 00:33:38.750
you control [indiscernible]
using in addition to that,

00:33:41.186 --> 00:33:44.656
these are totally configured.
You can find a lot of devices

00:33:44.656 --> 00:33:46.925
and the passwords and all of
that. But this is just from the

00:33:46.925 --> 00:33:52.163
design perspective all security
has been lined according to, to

00:33:52.163 --> 00:33:58.103
the research. Basically these
are people who dwell this kind

00:33:58.103 --> 00:34:03.241
of devices. Now, from there
onwards, hunting continues, a

00:34:03.241 --> 00:34:07.812
little discussion, and -- this
is just tip of the iceberg. If

00:34:07.812 --> 00:34:11.616
you go around and search,
vendors out there that provide

00:34:11.616 --> 00:34:16.488
HMI web services and keep
looking for them, research

00:34:16.488 --> 00:34:20.191
different devices, you will find
a lot of vulnerabilities, just

00:34:20.191 --> 00:34:24.896
not rocket science, you need to
look into the control point that

00:34:24.896 --> 00:34:28.366
you need to control. And from
there on wards you can spy own

00:34:28.366 --> 00:34:32.704
input stuff and see device is
working according to the way you

00:34:32.704 --> 00:34:35.774
want it to be. There's a big
playground out there. You

00:34:35.774 --> 00:34:39.878
just broken, not enough
vulnerabilities in web HMI have

00:34:39.878 --> 00:34:44.316
been reported back to the IC,
but more on the protocol level,

00:34:44.316 --> 00:34:48.153
[indiscernible] hijacking, but
if you open the scan, a lot of

00:34:48.153 --> 00:34:54.459
vulnerabilities in there. And
from the conclusion, I can only

00:34:54.459 --> 00:34:59.464
say this research, and other
vulnerabilities out there, the

00:34:59.464 --> 00:35:03.935
SCADA web HMI security is
completely broken. Why is so?

00:35:03.935 --> 00:35:08.473
Because we all used to say all
is good and all is gold and you

00:35:08.473 --> 00:35:11.109
can see SCADA technology has
been used for a long period of

00:35:11.109 --> 00:35:14.512
time but in this case when it
comes to security it's not that

00:35:14.512 --> 00:35:20.852
golden. But the problem here is
that it's still being used in

00:35:20.852 --> 00:35:25.390
more stronger critical functions
on the internet, or our day to

00:35:25.390 --> 00:35:28.860
day routine purposes, like
discussed earlier metal

00:35:28.860 --> 00:35:32.697
detector, thumbs, and a lot of
further additional details out

00:35:32.697 --> 00:35:35.400
there so easy to find
vulnerabilities, so easy to

00:35:35.400 --> 00:35:39.504
attack them, so easy to control
them and you can see how a big

00:35:39.504 --> 00:35:43.708
market crimeware as a service
can build a threat. But you go

00:35:43.708 --> 00:35:46.144
ahead find it, distribute an
account and start selling these

00:35:46.144 --> 00:35:48.880
devices in the underground
community. This is a real

00:35:48.880 --> 00:35:53.118
problem, and for that, I think
for researchers, any motivated

00:35:53.118 --> 00:35:56.087
people, they need to come up and
hunt vulnerabilities, work with

00:35:56.087 --> 00:36:00.191
the teams, whatever the best we
can. This is actual the state

00:36:00.191 --> 00:36:05.196
this amount of time. Moving
forward, some of the relative

00:36:05.196 --> 00:36:09.401
research done earlier, other
people portals, good resources

00:36:09.401 --> 00:36:12.570
to look into to understand what
kind of vulnerabilities have

00:36:12.570 --> 00:36:17.142
already been disclosed, what new
are there. Personally feel that

00:36:17.142 --> 00:36:20.245
the vulnerabilities like cross
side file uploading, phoneware

00:36:20.245 --> 00:36:24.182
uploading, remote file inclusion
all have a a potential impact

00:36:24.182 --> 00:36:30.522
considering the state of
security and web HMI. And thanks

00:36:30.522 --> 00:36:33.291
and I'm open to questions.
You're free to have any

00:36:33.291 --> 00:36:37.462
questions. If you need some
demos I can show you that. [

00:36:37.462 --> 00:36:39.464
Applause ]

