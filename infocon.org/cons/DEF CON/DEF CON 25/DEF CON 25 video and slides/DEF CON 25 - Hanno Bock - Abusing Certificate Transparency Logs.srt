00:00:00.100-->00:00:05.739
>>So today I'm going to explain
to you how you can hijack your
web application before it's even

00:00:05.739-->00:00:12.613
installed and use certification
transparency for that. So to get
started so you all know that

00:00:12.613-->00:00:19.152
we're using much more HTTPS
these days so there's a lot of
effort to move the web to

00:00:19.152-->00:00:24.992
encrypted connections like
Google gives you a higher search
ranking if your site is using

00:00:24.992-->00:00:30.364
HTTPS, and there have been
initiatives like Let's Encrypt
to make it easier, so yeah. So

00:00:30.364-->00:00:35.369
HTTPS is a very important piece
of modern web security. Um and
uh part of that is certificate

00:00:37.671-->00:00:44.077
authorities. So if you want to
run a web page with HTTPS you
need a certificate and that

00:00:44.077-->00:00:49.283
needs to be signed by one of the
certificate authorities and here
are some of the bigger ones like

00:00:49.283-->00:00:56.056
Comodo, Symantec, and Let's
Encrypt which is like a new and
free one. [yelling from crowd]

00:00:56.056-->00:01:00.294
Umm and one question that comes
up quite often is how much can
we trust these certificate

00:01:00.294-->00:01:06.333
authorities? And for many people
the answer to that question is
just: no we cannot trust them.

00:01:06.333-->00:01:10.771
Uh because like there have been
a lot of incidents in the past
where certificate authorities

00:01:10.771-->00:01:16.043
have issued certificates for
domains where they haven't been
asked for or even for ill

00:01:16.043-->00:01:21.048
purposes for attacking people um
so many people don't trust the
system very much. And uh some

00:01:24.117-->00:01:29.122
thing I hear very often is that
people say "Yeah this whole
system is broken we need to get

00:01:31.525-->00:01:36.263
rid of it we need to completely
replace that with something
else." Um that's something I

00:01:36.263-->00:01:42.602
hear very often eh especially in
the IT security community. Umm
the problem however with that is

00:01:42.602-->00:01:48.542
uh in reality I think nobody
really has a plan with what to
replace the certificate

00:01:48.542-->00:01:53.547
authorities or at least not any
plan that is realistically
feasible. Um and so what has

00:01:55.983-->00:02:00.320
been happening a lot in the past
couple of years that people have
thought have can we improve this

00:02:00.320-->00:02:06.293
system? How can we make the
existing system more secure? Um
one thing that has happened is

00:02:06.293-->00:02:11.431
the so called baseline
requirements. So that's just a
document that is writing down

00:02:11.431-->00:02:17.671
the rules under which the
certificate authorities operate
and uh yeah so how they should

00:02:17.671-->00:02:23.510
issue certificates how the che-
check uh that a domain really
belongs to the domain owner. And

00:02:23.510-->00:02:27.948
that's already improving a lot
because if if something strange
is going on and the certificate

00:02:27.948-->00:02:33.587
authority is doing things that
it probably shouldn't do then
there's probably something in

00:02:33.587-->00:02:39.726
the baseline requirements where
you can say "hey, here is a rule
that's not allowed." Um then

00:02:39.726-->00:02:45.899
there's uh uh technology called
HTTP public key pinning which is
a very strong protection but

00:02:45.899-->00:02:52.439
it's also kind of dangerous uh
because you could pin your site
to a key that then and then lose

00:02:52.439-->00:02:57.444
the key so this is uh a very
strong technology but it it you
probably shouldn't use it unless

00:03:00.313-->00:03:07.087
you know exactly what you're
doing. Um one other thing is
called CAA uh certificate

00:03:07.087-->00:03:12.759
authority authorization what's
happening there is that you can
define a DNS record which saying

00:03:12.759-->00:03:17.998
"I only want certificates from
this specific certificate
authority and not from any

00:03:17.998-->00:03:24.671
other." Um and then there's this
thing called certificate
transparency which will be the

00:03:24.671-->00:03:29.676
main topic of my talk. Um and
the idea here is that we have
public logs of certificates so

00:03:34.948-->00:03:40.821
all the certificates we put them
in a log eh that is also
verifiable in some cryptographic

00:03:40.821-->00:03:45.826
sense so there's more
transparency in that system so
that people can watch what's

00:03:48.562-->00:03:54.868
going on. Um so I'm not gonna
talk about the details of how
that works so there's a lot of

00:03:54.868-->00:04:00.941
fancy crypto there, Merkle Hash
Trees use, then you you get a
lot of acronyms like Science

00:04:00.941-->00:04:05.946
Certificate Timestamps, Signed
Tree Heads et cetera um. The
basic idea is all of that is uh

00:04:08.782-->00:04:15.355
to prevent cheating in that
system. So the idea is to make
it really hard to to for for any

00:04:15.355-->00:04:21.528
actor in the system whether it's
a certificate authority or a log
operator to to make something

00:04:21.528-->00:04:27.501
appear like it isn't' really. So
so this for example so these,
these logs have some

00:04:27.501-->00:04:32.906
cryptographic integrity and it
is very hard to like log
something and then remove it

00:04:32.906-->00:04:37.911
again from the log without that
being noted. Um um and uh so
right now this is uh not fully

00:04:43.116-->00:04:48.722
implemented but starting next
year at least according to the
current plan this has been

00:04:48.722-->00:04:54.327
changed, uh but according to the
current plan next year in April
there will be a requirement for

00:04:54.327-->00:04:59.332
all new certificates that they
need to be submitted to at least
two of these public logs. Um but

00:05:03.370-->00:05:08.141
in practice today a lot of
certificates are already logged,
uh and there are a number of

00:05:08.141-->00:05:13.313
reasons for that. So for example
there are some certificate
authorities that already submit

00:05:13.313-->00:05:18.385
their certificates to logs, uh
one of them is Symantec and they
do it because Google said they

00:05:18.385-->00:05:24.157
have to do it because there were
a lot of issues with Symantec in
the past. Uh Let's Encrypt is

00:05:24.157-->00:05:28.395
doing it voluntarily because
they say they want to support
this they think this is a good

00:05:28.395-->00:05:33.700
system. Um also CloudFlare is
doing it so if you're registered
CloudFlare side you

00:05:33.700-->00:05:39.139
automatically get a HTTPS and
they submit the certificates to
logs. And also the Google search

00:05:39.139-->00:05:45.278
engine crawler so if the crawler
from the google search engine
surfs to your site and you have

00:05:45.278-->00:05:50.283
HTTPS then they would honor the
certificate and submit it to
their logs. So eh um yeah so in

00:05:52.886-->00:05:58.291
practice that means ah-already
today a lot of certificates are
in these logs and are get

00:05:58.291-->00:06:05.131
submitted pretty quickly to
these logs. Um so you can think
of certificate transparency like

00:06:05.131-->00:06:11.137
a bit like a CA watchdog. So
everyone can look into these
logs and see if there's anything

00:06:11.137-->00:06:17.577
that looks in any way
suspicious. So the most obvious
thing is to look into these logs

00:06:17.577-->00:06:22.949
if there are certificates for
your own domains that you
haven't ordered yourself. So if

00:06:22.949-->00:06:28.188
they answer a certificate for my
domain and I don't know about it
then something is wrong, that's

00:06:28.188-->00:06:34.027
obvious. But there's also things
like if you look at this
certificate um what's a bit

00:06:34.027-->00:06:39.032
suspicious here is that it's
only valid for one day. And it's
for Google com. Um that was an

00:06:41.601-->00:06:46.640
internal test at Symantec uh
apparently they have still
submitted the certificate from

00:06:46.640-->00:06:52.112
the internal test to the public
log so Google found out about it
so it's a certificate for Google

00:06:52.112-->00:06:57.117
com but it is not from Google so
that started the whole Symantec
controversy. Um and this is also

00:07:03.423-->00:07:08.428
interesting. So um uh does
anyone see what's wrong here?
[crowd yelling] So if you look

00:07:11.064-->00:07:16.069
at the location it says that's
in in Rotterdam in California in
the Netherlands. [crowd laughs]

00:07:19.806-->00:07:25.512
So I don't know about your
geography skills but um
California is as far as I know

00:07:25.512-->00:07:32.352
not part of the Netherlands.
[laughter] Um maybe there are
some similarities but uh yeah.

00:07:32.352-->00:07:39.292
Um this one is also interesting
so here you can see in one of
the lower lines there's a domain

00:07:39.292-->00:07:44.297
name with two dots in it. So it
says dot dot biz and that's not
a valid host name. So we we can

00:07:46.900-->00:07:52.706
be sure that there's no way
anyone has really checked that
this hostname eh- that belongs

00:07:52.706-->00:07:58.445
to anyone because it's an
invalid host name. It cannot
belong to anyone. So so here you

00:07:58.445-->00:08:03.383
can see like uh uh but but this
the system really works. Like
people are looking at these logs

00:08:06.052-->00:08:10.724
and they're seeing ok here is
something strange here is
something fishy uh and we should

00:08:10.724-->00:08:15.729
report that. And yeah. And
hopefully then the CA will not
do it again in the future. Um if

00:08:18.865-->00:08:24.270
you want to check this out a bit
there's a search engine for
certificates and certificate

00:08:24.270-->00:08:29.275
transparency under your LC or
TSH. That's very nice that's
operated by Comodo. Um so for

00:08:32.245-->00:08:36.549
example the very easiest thing
you could do right now is search
there if there are certificates

00:08:36.549-->00:08:41.988
for your domain that you don't
know about. Umm but on the other
hand certificate transparencies

00:08:41.988-->00:08:48.428
also are kind of data source.
Because like we have all the
certificates. Ok so for example

00:08:48.428-->00:08:54.868
they contain as we have seen
sometimes the location and also
they contain host names so for

00:08:54.868-->00:09:00.306
example if you operate a search
engine this could be interesting
because you could know here ok

00:09:00.306-->00:09:05.311
here are all of these theses
hosts that have web pages so
maybe I look at them. Um so in a

00:09:08.715-->00:09:15.188
certain sense certificate
transparency gives you a kind of
feed for new hosts names. So if

00:09:15.188-->00:09:20.460
you're permanently observing
these logs as they are public
like there's an API you could

00:09:20.460-->00:09:25.432
just simply request a new
certificate from them um and
then you can look into these

00:09:25.432-->00:09:31.504
certificates and see hostnames
and when someone creates a new
web host with HTTPS and gets a

00:09:31.504-->00:09:36.509
certificate then it will end up
in logs so you kind of have a
feed of new web host names. So

00:09:39.079-->00:09:44.417
and now I want to kind of switch
the topic a bit to something
which may appear like something

00:09:44.417-->00:09:50.490
completely unrelated at first
and it's uh web applications and
when I talk about web

00:09:50.490-->00:09:55.628
applications here I mean things
like self hosted web
applications. So things like

00:09:55.628-->00:10:01.935
WordPress, things like Joomla or
things like Nextcloud uh these
are usually written in PHP

00:10:01.935-->00:10:07.640
usually use MySQL you probably
all know one of these, like.
It's typically content

00:10:07.640-->00:10:12.645
management systems and similar
things. When you install one of
those um -e what usually happens

00:10:14.914-->00:10:19.919
so you upload the files from the
software to some web hosting
company or on your own server um

00:10:23.690-->00:10:29.929
and then usually you just call
the webpage and get an installer
and click through a few things.

00:10:29.929-->00:10:34.934
It it asks you for your database
credentials then it asks you to
create an initial administration

00:10:37.303-->00:10:42.642
account and then you have
installed your application.
What's notable is there's no

00:10:42.642-->00:10:48.948
authentication whatsoever. So
these installers have no
protections so everyone who like

00:10:48.948-->00:10:53.953
if someone else calls this
installer he can install it just
as well. So um and this has been

00:10:57.056-->00:11:02.395
known for a while. Like people
have been using Google to search
for unistalled Wordpresses that

00:11:02.395-->00:11:06.766
have been abandoned like maybe
someone has uploaded them and
then a problem happened and they

00:11:06.766-->00:11:11.871
just forgot about this
installation. And if you find
them with Google then you can

00:11:11.871-->00:11:16.876
take them over. And so but the
new idea here is um there's a
small time window between when a

00:11:21.848-->00:11:28.521
webmaster uploads the]is
application and when he finishes
the installation. And if we can

00:11:28.521-->00:11:33.526
hit that time window we have an
attack cause then we we can do
the installation and uh then we

00:11:35.862-->00:11:40.867
are in control of this
application. So and you might
see where this is getting at.

00:11:43.770-->00:11:49.342
You may remember from earlier we
have this feed of new host
names. So if we combine these

00:11:49.342-->00:11:54.347
things we have our tech. So we
can monitor the certificate
transparency logs all the time

00:11:57.884-->00:12:03.756
probably with some kind of
contra business script
automated, and extract all the

00:12:03.756-->00:12:08.761
hostnames. Um and then we check
these hosts like we do a Curl or
a W Git on them and compare what

00:12:13.666-->00:12:19.238
they're currently serving as a
web page to common application
installers from Wordpress from

00:12:19.238-->00:12:24.243
Joomla from whatever. So and if
you find one of them we install
this application ourselves. And

00:12:27.814-->00:12:32.819
if you're a real attacker we
would probably do this automated
of course cause eh it's faster.

00:12:35.521-->00:12:39.626
Now then when we have done this
installation we can upload a
plugin because all these

00:12:39.626-->00:12:43.730
applications usually have some
kind of extension mechanism
where it can upload a plug and

00:12:43.730-->00:12:48.735
basically that gives you code
execution. Um and we we ideally
we upload something that gives

00:12:51.170-->00:12:56.175
us further code execution so we
can just then execute arbitrary
code. And what we do then is

00:12:58.511-->00:13:03.516
that we revert the installation.
Because like how these
installers work is usually just

00:13:03.516-->00:13:08.688
when they finish they write down
a conflict file and if we delete
that conflict file then the

00:13:08.688-->00:13:13.693
installation is undone. So um
one thing we need from the whole
thing are database credentials

00:13:18.297-->00:13:24.771
but that's not a problem because
you can just define an external
MySQL host um and there's for

00:13:24.771-->00:13:29.776
example a service called
FreeMySQL hosting dot net which
offers free MySQL hosting which

00:13:31.878-->00:13:36.883
is very convenient for what we
are trying to do. Um... yeah so
we have a little demo. Um so

00:13:44.457-->00:13:49.796
what I'm doing here- this is the
search engine I mentioned
earlier. So umm and what I'm now

00:13:49.796-->00:13:54.801
doing is ju- like I put in a
percent which is a wildcard
character and then I put in dot

00:13:57.837-->00:14:02.775
TIS fun dot DE. That is one of
my own domains. Um and I'll make
this a bit bigger. You see like

00:14:06.612-->00:14:11.617
the the very latest entry here
is for block dot TIS fun dot DE.
And let's just copy that URL and

00:14:14.754-->00:14:19.759
see what we can find there. Oh
this is a Wordpress
installation. That is nice so we

00:14:24.931-->00:14:29.936
click on continue. I click
another button ok now we need
his database credentials um and

00:14:32.438-->00:14:38.511
uh as I'm prepared for this I
already have database
credentials here. As I said from

00:14:38.511-->00:14:43.516
free MySQL hosting. Umm ch--
password...and this host.
Ok..run on install... so now I

00:14:59.332-->00:15:04.270
need a side title I'll just use
test and username Admin. Wants a
password from me. And an email

00:15:10.910-->00:15:15.915
there I'll just use something at
trash mail. And installation.
Now it takes a bit. Ok. So it

00:15:23.022-->00:15:28.027
says Wordpress has been
installed thank you and enjoy.
Log in. So now I'm logging in

00:15:32.999-->00:15:38.004
with the admin account I just
created with the password I just
typed in. Ok and um now I go in

00:15:46.579-->00:15:51.584
plugins and click on "add new"
and here so I here I can just
install plugins from Wordpress

00:15:58.024-->00:16:02.962
itself but I can also click on
"upload plugin." So I can upload
my own plugin which I've

00:16:06.399-->00:16:11.404
prepared before which is called
Hijack um and we'll install it.
Ok. So now in this plug in I

00:16:21.547-->00:16:26.552
have uh file called Shell PHP
and it doesn't show me anything
because it wants a secret.

00:16:32.191-->00:16:37.196
Secret is DEFCON2017 it's not
very exciting but ok. Ok and
this is a very simple PHP Shell

00:16:40.333-->00:16:45.338
so we can make LS and we can
also umm ok now the screen is
cut off that's not very good.

00:16:49.141-->00:16:54.146
But I can show you for example
if I type in Uname then I'll get
all kind of Unames so I

00:16:57.283-->00:17:02.221
basically have a shell now. Umm
and the interesting thing is I
also here have a button which

00:17:06.425-->00:17:11.430
says "remove installation
traces" umm I'll just try to let
you see that...yeah that's

00:17:13.566-->00:17:18.571
better. And now if I go on this
again...then you'll see the
installer is back. And that is

00:17:21.941-->00:17:27.480
important because the person who
is the owner of this Wordpress
which in this case is me but in

00:17:27.480-->00:17:32.485
the real case is someone else,
will never notice what happened.
So I have a backdoor now I can

00:17:36.556-->00:17:41.560
execute arbitrary code on that
server but the owner of that
Wordpress installation will

00:17:45.932-->00:17:50.937
never notice it. At least that
we'll know of. Um yeah. That was
the demo. [applause] Umm so one

00:17:57.944-->00:18:03.449
challenge we hear that we have
is that the certificates are not
immediately public eh, there is

00:18:03.449-->00:18:10.423
a time lag which so it is a
maximum two hours but eh uh I
have kind of measured it and

00:18:10.423-->00:18:16.862
it's usually about 30 minutes.
So from certificate issuance til
the certificate ends up in a

00:18:16.862-->00:18:22.969
log. Um but uh it doesn't really
matter because there are still
like enough people who will just

00:18:22.969-->00:18:28.841
create that host and then upload
that Wordpress and then go for a
coffee and finish the

00:18:28.841-->00:18:33.846
installation later so will just
hit enough vulnerable hosts in
that time frame. Um and uh this

00:18:37.316-->00:18:42.855
could also be further optimized
like you could say I am not only
checking a site once but when I

00:18:42.855-->00:18:47.927
see a new host in the
certificate transparency logs I
just check it every five minutes

00:18:47.927-->00:18:52.932
again and again for maybe a
couple of hours. Umm so umm I
ran a test group where I was

00:18:57.136-->00:19:03.342
searching for these installers
with certificate transparency
logs over 3 months and I could

00:19:03.342-->00:19:08.581
have taken over 5 thousand
Wordpress installations in that
time. So that's quite a nice

00:19:08.581-->00:19:13.586
spot net. Ff you have 5 thousand
uh b- 5 thousand ways to execute
PHP code use that to send spam

00:19:16.455-->00:19:22.161
or host phishing sites or
whatever. Um also around 500
Joomla installations, 120

00:19:22.161-->00:19:27.466
Nextcloud and 70 OwnCloud. The
others were all quite low so the
others I would say it probably

00:19:27.466-->00:19:33.939
doesn't deserve the effort. Umm
one thing is eh true part
doesn't show up because their

00:19:33.939-->00:19:38.944
installer page is uh so slow
that the time out of my script
hit. [crowd laughs] Um so [more

00:19:42.281-->00:19:47.286
laughter] Um but yeah. That's
just kind of a technicality. Um
so how can you protect against

00:19:49.855-->00:19:55.928
this? So in very general I think
these installers need to be
authenticated. I think it's just

00:19:55.928-->00:20:01.400
not a good design to say I
upload an installer and then its
just without any protection out

00:20:01.400-->00:20:07.139
there in the internet and we
just hope nobody finds it. Um um
the challenges o-of course the

00:20:07.139-->00:20:13.546
the developers of these
applications they want to make
the installation as easy as

00:20:13.546-->00:20:18.551
possible and if you add any kind
of authentication that creates
extra effort, so I can kind of

00:20:21.787-->00:20:26.792
understand that they are
reluctant but still this somehow
needs to be fixed. Um so one one

00:20:29.261-->00:20:35.634
thing you can imagine is is that
the installation process creates
a secret token, writes that into

00:20:35.634-->00:20:41.607
a file, and then the user has to
download that file and paste
that token into a web forum, and

00:20:41.607-->00:20:45.678
only then he can install the
application. That's one option
but of course there are other

00:20:45.678-->00:20:50.683
options as well. Um so I
reported this to a couple of
vendors, primarily the big

00:20:53.152-->00:20:57.156
content management systems
because they are the most
interesting here. Uh so from

00:20:57.156-->00:21:02.661
Drupal, Typo3, and OwnCloud I
got no reaction at all, they
just ignored my messages. Um

00:21:02.661-->00:21:08.234
then from Wordpress, NextCloud,
and Serendipity they uh said so
there were some there came some

00:21:08.234-->00:21:14.840
answers like "We would like to
discuss this with other vendors
and can you kind of can we have

00:21:14.840-->00:21:21.413
a cross vendor discussion?" And
I said OK I'll set up a mailing
list umm but then there was not

00:21:21.413-->00:21:26.418
a whole lot of discussion. So
um. Umm this is interesting uh
MediaWiki is not vulnerable to

00:21:30.189-->00:21:35.194
it it and was not even before I
did this research and the reason
is their installer works a bit

00:21:38.430-->00:21:42.801
different so when you finish the
installer they don't just write
the conflict file but they

00:21:42.801-->00:21:47.306
provide the conflict file for
download and you have to
download it and then upload it

00:21:47.306-->00:21:51.877
again to your webhost uh
otherwise the installation
doesn't get finished. Um

00:21:51.877-->00:21:56.882
although um uh MediaWiki allows
you to use SQLite and SQlite is
file based so the installer

00:21:59.084-->00:22:05.825
still kind of allows you to
create a file on the server but
you don't have a whole lot of

00:22:05.825-->00:22:12.498
control over it. So I don't
think this can be exploited but
it's a nice challenge so if

00:22:12.498-->00:22:17.203
anyone of you has an idea how to
exploit that I would be very
interested to hear about that.

00:22:17.203-->00:22:22.208
Umm and then Joomla, Joomla was
the only um content management
system that implemented a fix

00:22:26.045-->00:22:32.585
after I reported it to them they
released it a couple of days
ago. Um and what they are doing

00:22:32.585-->00:22:37.590
um is that that is was uh
basically my idea the problem is
I don't I later decided that I

00:22:39.725-->00:22:44.730
don't like the idea any more.
[crowd laughs] Um so um what
they are doing is they are

00:22:46.832-->00:22:52.671
whitelisting localhost as a
MySQL server so if you have a
local database server uh the

00:22:52.671-->00:22:58.844
installation is just like it was
before. And if you have an
external MySQL server then they

00:22:58.844-->00:23:05.017
have an extra authentication
step. And uh the extra
authentication step is that uh

00:23:05.017-->00:23:10.089
it has created a directory with
a random file name and you're
supposed to remove that

00:23:10.089-->00:23:16.962
directory and then you can
continue the installation. Um so
why don't I like it? So the

00:23:16.962-->00:23:21.900
problem here is if you have a
large web hosting company that
may have thousands of customers

00:23:21.900-->00:23:27.840
on a single server then it may
just be that the attacker
already has credentials for that

00:23:27.840-->00:23:34.647
server. Uh like he can just
register a couple of accounts at
major web hosting companies. Or

00:23:34.647-->00:23:39.418
you could even think one step
further the attacker is of
course attacking multiple

00:23:39.418-->00:23:45.057
applications at once and
Wordpress is still vulnerable.
So chances are high he may have

00:23:45.057-->00:23:50.296
already hijacked one wordpress
on that server when he finds the
Joomla and then he can use the

00:23:50.296-->00:23:56.035
database credentials from that
Wordpress to hijack that Joomla.
So I don't think it's an ideal

00:23:56.035-->00:24:00.773
fix but at least I have to give
Joomla credit that they were the
only ones that did a fix at all.

00:24:00.773-->00:24:05.778
Like the others just didn't do
anything with it. Um so what can
you do as a user? Like if you

00:24:10.015-->00:24:15.287
think now "Ok, that's um that's
a problem I don't want my
Wordpress to get hi-jacked

00:24:15.287-->00:24:20.292
before I even use it um how can
I protect myself?" Um you can
say ok. [audience laughs]

00:24:23.195-->00:24:28.200
Re-file yeah, as I said these
logs are not updated instantly
so you have like 30 minutes but

00:24:31.670-->00:24:36.675
eh eh it's kind of a bit risky,
because like there's no
guarantee how fast these logs

00:24:36.675-->00:24:42.548
are. And it could just be that
next month Google decides they
make a super fast log because

00:24:42.548-->00:24:46.318
they have optimized their
software and its running much
faster and then this doesn't

00:24:46.318-->00:24:51.957
work anymore. So I don't think
it's a very good solution but
yeah you could see about that.

00:24:51.957-->00:24:56.962
Um then there's a thing called
cer- certificate redaction so uh
with the certificate

00:25:00.299-->00:25:06.071
transparency some certificate
authorities were worried that uh
oh that means all these

00:25:06.071-->00:25:11.577
hostnames are now public and our
customers might not like it. Um
particularly Symantec now

00:25:11.577-->00:25:16.582
already offers that so so there
is uh a part of certificate
transparency where you can have

00:25:18.684-->00:25:23.689
redacted domain labels so you
can say this certificate in the
log is for redacted label dot

00:25:25.891-->00:25:30.896
something dot com. Um but um I
don't think that's very
practical either. So for one uh

00:25:34.400-->00:25:38.871
as soon as the Google crawler
sees your real certificate
you're still again in the log uh

00:25:38.871-->00:25:44.777
and uh the other thing is umm
not all certificate authorities
offer this and it's also this

00:25:44.777-->00:25:51.216
has been quite controversial so
I-I am not entirely sure if if
it's gonna stick around. And

00:25:51.216-->00:25:55.454
particularly if you have some
web host that automatically
issues certificates for you they

00:25:55.454-->00:26:02.261
are likely not gonna use this.
So it's also not a very good
solution. Um you could use an

00:26:02.261-->00:26:08.634
HTaccess file to just password
protect your installation um
that works um a problem is that

00:26:08.634-->00:26:14.907
some of these applications use
HTaccess themselves to configure
things um. And you need to make

00:26:14.907-->00:26:19.978
sure that that doesn't
interfere. Like for example if
you finish a Wordpress

00:26:19.978-->00:26:25.784
installation it creates an
HTaccess file. And what you can
however do is that you put your

00:26:25.784-->00:26:32.157
password protection HTaccess
file in the upper directory
because like uh patching

00:26:32.157-->00:26:37.162
software goes regressively
through all the directories uh
uh to scan for HTaccess files.

00:26:40.032-->00:26:44.102
Uh that doesn't work in all web
hosting environments because
sometimes you only have Right

00:26:44.102-->00:26:48.674
Access in your web root, but if
you have Right Access in the
upper directory then you can do

00:26:48.674-->00:26:54.580
that. And that's kind of the
best you can do right now as
long as these applications don't

00:26:54.580-->00:26:59.585
protect you. Um so yeah
defending as a user is hard
here. And we really need fixes

00:27:05.157-->00:27:10.162
from vendors here. Um then I was
wondering "Do attackers already
use this? Does anyone know about

00:27:12.898-->00:27:19.137
this attack? Has anyone had the
same idea? And do they already
exploit it?" So I sent a couple

00:27:19.137-->00:27:25.077
of posts uh with just random
subdomains from my domains and
checked if anyone would access

00:27:25.077-->00:27:31.416
them. And ok of course my own
test group would access them.
That's obvious. Um and I also

00:27:31.416-->00:27:36.421
saw this um in the log file uh
which says Netcraft Survey Agent
so NetCraft is a company I think

00:27:40.526-->00:27:45.531
they mainly do statistics around
the web so I think this is non
malicious and it's also a good

00:27:47.666-->00:27:51.937
example like that this data of
course it can be used for
attacks but it can also be used

00:27:51.937-->00:27:57.509
for legitimate purposes like
doing statistics looking for a
new website. That I think is

00:27:57.509-->00:28:02.447
leg- legitimate use of that
data. Um so so I think nobody is
exploiting this yet but that

00:28:04.850-->00:28:09.855
might change um yeah. So um my
other take away I think is um
un-authenticated installs are a

00:28:13.592-->00:28:18.597
security risk and I really think
uh these web applications need
to do something about that and

00:28:21.833-->00:28:28.140
should fix this. Um then one
thing and and I think that
message many people haven't

00:28:28.140-->00:28:33.679
gotten yet. There are no more
secret hostnames at least if you
use HTTPS. So if you ever had

00:28:33.679-->00:28:39.685
the idea, in my company I could
have internal secret something
something dot company name dot

00:28:39.685-->00:28:46.425
com and there's a internal
backend interface that nobody
ever will find. Forget about

00:28:46.425-->00:28:51.964
that. That has been a bad idea
in the past anyway because host
names are not encrypted even if

00:28:51.964-->00:28:58.737
you use HTTPS the host name is
always visible on the traffic
both through DNS and through uh

00:28:58.737-->00:29:04.576
server name indication. Um but
right uh now it's a really
broken assumption. So if you

00:29:04.576-->00:29:09.915
have HTTPS for your webpages you
must assume that the hostnames
are public. And it's also

00:29:09.915-->00:29:14.620
interesting if you're maybe a
pentist or looking to back
bounty program this is a good

00:29:14.620-->00:29:19.625
way to search for host names
from companies. Um and yeah
final take away like uh

00:29:23.629-->00:29:30.235
certificate transparency is a
very useful data source both for
attackers and defenders um and

00:29:30.235-->00:29:35.807
I'd like to say something that
that I find important. So I when
I submitted this talk I feared a

00:29:35.807-->00:29:40.879
bit that people might use this
as an argument against
certificate transparency. And

00:29:40.879-->00:29:44.916
therefor I want to make very
clear that I don't think it is.
Like I think certificate

00:29:44.916-->00:29:50.255
transparency is an amazing
system it's probably the best
security improvement the TLS

00:29:50.255-->00:29:55.260
ecosystem has seen in a while
um. And I think the problem
really here lies elsewhere.

00:30:07.439-->00:30:12.244
Certificate transparency is just
kind of amplifying the problem
of un authenticated installers

00:30:12.244-->00:30:17.249
here. So yeah. Um yeah I think
um I was I was pretty fast so we
should have time for some

00:30:20.052-->00:30:21.687
questions. Thank you. [applause]

