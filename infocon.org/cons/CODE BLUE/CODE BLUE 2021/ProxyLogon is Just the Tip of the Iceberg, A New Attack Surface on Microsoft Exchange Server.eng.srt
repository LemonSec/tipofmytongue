1
00:00:16,640 --> 00:00:19,640
is

2
00:00:30,480 --> 00:00:33,200
oh hi uh

3
00:00:33,200 --> 00:00:34,000
hi

4
00:00:34,000 --> 00:00:36,640
it's going to be back to the stage of

5
00:00:36,640 --> 00:00:38,480
cobra

6
00:00:38,480 --> 00:00:41,520
thank you all for being here

7
00:00:41,520 --> 00:00:43,280
yeah and this

8
00:00:43,280 --> 00:00:46,320
will report a series of vulnerabilities

9
00:00:46,320 --> 00:00:49,360
on exchange server to microsoft

10
00:00:49,360 --> 00:00:52,480
and then it is proxy logan

11
00:00:52,480 --> 00:00:54,559
if you are paying attention to the

12
00:00:54,559 --> 00:00:57,440
industry news you must have heard this

13
00:00:57,440 --> 00:00:59,039
name

14
00:00:59,039 --> 00:01:01,680
proceed lockdown may be the most severe

15
00:01:01,680 --> 00:01:04,559
vulnerability in the exchange history

16
00:01:04,559 --> 00:01:05,840
ever

17
00:01:05,840 --> 00:01:08,960
however as we went into deep dive on

18
00:01:08,960 --> 00:01:10,479
proxy logang

19
00:01:10,479 --> 00:01:13,360
it came to us that it is not just a

20
00:01:13,360 --> 00:01:16,320
single bug but a whole new attack

21
00:01:16,320 --> 00:01:20,080
service to help researchers to uncover

22
00:01:20,080 --> 00:01:23,040
more vulnerabilities

23
00:01:23,040 --> 00:01:25,920
so to unveil the beauty of this attack

24
00:01:25,920 --> 00:01:26,960
surface

25
00:01:26,960 --> 00:01:29,119
we will start from explaining the

26
00:01:29,119 --> 00:01:30,720
architecture

27
00:01:30,720 --> 00:01:32,960
analyzing the loot course

28
00:01:32,960 --> 00:01:36,479
and ending up with naive abilities we

29
00:01:36,479 --> 00:01:38,159
find

30
00:01:38,159 --> 00:01:40,880
by understanding the basics of this new

31
00:01:40,880 --> 00:01:44,079
attack service you won't be surprised

32
00:01:44,079 --> 00:01:49,039
why we can pop out your desk easily

33
00:01:52,799 --> 00:01:56,320
okay so let me introduce myself first

34
00:01:56,320 --> 00:01:59,280
an orange and now the principal security

35
00:01:59,280 --> 00:02:02,399
researcher at deathcore

36
00:02:02,399 --> 00:02:05,119
i'm a zero day researcher and focusing

37
00:02:05,119 --> 00:02:08,560
on web and application security

38
00:02:08,560 --> 00:02:11,760
my job is to find out the most severe

39
00:02:11,760 --> 00:02:13,280
vulnerabilities

40
00:02:13,280 --> 00:02:16,160
that can impact the world ahead of the

41
00:02:16,160 --> 00:02:17,680
bad guys

42
00:02:17,680 --> 00:02:21,760
and reporting to the vendors directly

43
00:02:21,760 --> 00:02:25,280
apart from that and also a speaker ctf

44
00:02:25,280 --> 00:02:28,480
player and bhagavanti hunter

45
00:02:28,480 --> 00:02:32,000
i got several awards from my researchers

46
00:02:32,000 --> 00:02:35,120
such as the pony awards and the champion

47
00:02:35,120 --> 00:02:37,360
of pancho own

48
00:02:37,360 --> 00:02:39,519
if you are interested welcome to follow

49
00:02:39,519 --> 00:02:43,040
my twitter and blog

50
00:02:46,000 --> 00:02:49,760
so however we targeting exchange server

51
00:02:49,760 --> 00:02:52,720
in terms of enterprise security mail

52
00:02:52,720 --> 00:02:56,000
servers are high value assets since they

53
00:02:56,000 --> 00:02:58,159
are the place to keep corporate

54
00:02:58,159 --> 00:03:00,959
copyright confidentials

55
00:03:00,959 --> 00:03:03,519
exchange server is the most well-known

56
00:03:03,519 --> 00:03:07,519
and important male solution in the world

57
00:03:07,519 --> 00:03:10,239
with this in mind exchange has also been

58
00:03:10,239 --> 00:03:13,760
the top target for nation state haters

59
00:03:13,760 --> 00:03:16,080
for a long time

60
00:03:16,080 --> 00:03:19,120
so based on our research there are more

61
00:03:19,120 --> 00:03:22,640
than 400 thousands exchange servers

62
00:03:22,640 --> 00:03:25,440
exposed on the internet

63
00:03:25,440 --> 00:03:28,319
every server replace every server

64
00:03:28,319 --> 00:03:30,720
represents a company

65
00:03:30,720 --> 00:03:34,080
so you can imagine how severe it could

66
00:03:34,080 --> 00:03:36,280
be when there is a critical

67
00:03:36,280 --> 00:03:40,959
vulnerabilities on exchange server

68
00:03:42,239 --> 00:03:44,640
so what have we done

69
00:03:44,640 --> 00:03:47,440
we have reviewed the exchange security

70
00:03:47,440 --> 00:03:50,720
from the architectural levels and find a

71
00:03:50,720 --> 00:03:53,439
new attack service

72
00:03:53,439 --> 00:03:55,760
through this new attack service we

73
00:03:55,760 --> 00:04:00,319
uncover 911 abilities and chat this box

74
00:04:00,319 --> 00:04:04,159
into four attacking exploits

75
00:04:04,159 --> 00:04:06,720
the first and the most famous one is

76
00:04:06,720 --> 00:04:08,400
proxy logang

77
00:04:08,400 --> 00:04:11,200
it's a pre-os rce

78
00:04:11,200 --> 00:04:14,319
and the second one is proxy oracle x and

79
00:04:14,319 --> 00:04:17,680
exploit that can recover any user's

80
00:04:17,680 --> 00:04:21,440
password in plain text format

81
00:04:21,440 --> 00:04:23,919
the last one is proxy shell

82
00:04:23,919 --> 00:04:26,800
is the exploit with damage chat at pong2

83
00:04:26,800 --> 00:04:28,560
own 2021

84
00:04:28,560 --> 00:04:32,400
is also a pre-owned rce

85
00:04:32,400 --> 00:04:34,800
i would like to highlight that all the

86
00:04:34,800 --> 00:04:38,320
abilities we uncovered here are logic

87
00:04:38,320 --> 00:04:39,600
box

88
00:04:39,600 --> 00:04:42,800
which means they could be reproduced and

89
00:04:42,800 --> 00:04:45,680
exploited easily than any memory

90
00:04:45,680 --> 00:04:48,800
corruption box

91
00:04:50,720 --> 00:04:53,840
the new attack service i proposed also

92
00:04:53,840 --> 00:04:56,560
launched a new edge for hackers to

93
00:04:56,560 --> 00:04:59,840
research exchange server

94
00:04:59,840 --> 00:05:02,080
there are lots of vulnerabilities

95
00:05:02,080 --> 00:05:04,400
related to my research

96
00:05:04,400 --> 00:05:07,199
such as the proxima file

97
00:05:07,199 --> 00:05:11,639
report by nsa and the proxy token by

98
00:05:11,639 --> 00:05:14,560
vmptisc team

99
00:05:14,560 --> 00:05:17,039
it should be note that there will be one

100
00:05:17,039 --> 00:05:20,639
more attack from me in the near future

101
00:05:20,639 --> 00:05:23,280
however it's still under the patreon

102
00:05:23,280 --> 00:05:26,160
process and we are not able to to

103
00:05:26,160 --> 00:05:28,880
disclose today

104
00:05:28,880 --> 00:05:31,919
as you can see all of their men have the

105
00:05:31,919 --> 00:05:34,080
proxy prefix

106
00:05:34,080 --> 00:05:36,560
that's also because of my new attack

107
00:05:36,560 --> 00:05:41,680
service and we will explain that later

108
00:05:43,520 --> 00:05:45,759
exchange is a very sophisticat

109
00:05:45,759 --> 00:05:47,440
application

110
00:05:47,440 --> 00:05:49,919
before we cut to the chest let me

111
00:05:49,919 --> 00:05:53,360
introduce the architecture first

112
00:05:53,360 --> 00:05:56,479
since 2000 exchange has released a new

113
00:05:56,479 --> 00:05:59,440
version every three years

114
00:05:59,440 --> 00:06:02,720
whenever exchange released a new version

115
00:06:02,720 --> 00:06:05,520
the architecture changed a lot and

116
00:06:05,520 --> 00:06:08,160
becomes different

117
00:06:08,160 --> 00:06:10,560
the changes of architecture and

118
00:06:10,560 --> 00:06:14,240
iterations make it difficult to upgrade

119
00:06:14,240 --> 00:06:16,639
an exchange server

120
00:06:16,639 --> 00:06:19,440
in order to ensure the compatibility

121
00:06:19,440 --> 00:06:21,840
between the new architecture and old

122
00:06:21,840 --> 00:06:23,120
ones

123
00:06:23,120 --> 00:06:26,560
several design depths were incurred and

124
00:06:26,560 --> 00:06:31,360
led to the new attack service we find

125
00:06:33,360 --> 00:06:35,919
so where do we focus

126
00:06:35,919 --> 00:06:41,280
we focus on the client access service cs

127
00:06:41,280 --> 00:06:44,479
cs is a fundamental component in

128
00:06:44,479 --> 00:06:46,400
exchange

129
00:06:46,400 --> 00:06:50,400
the official document indicates cs is a

130
00:06:50,400 --> 00:06:54,319
front-end that accept client connections

131
00:06:54,319 --> 00:06:56,560
for all protocols

132
00:06:56,560 --> 00:07:00,479
and responsible for routing and proxy in

133
00:07:00,479 --> 00:07:03,039
connections

134
00:07:03,039 --> 00:07:06,720
cs was further we paid attention to

135
00:07:06,720 --> 00:07:11,280
and further attack service x60

136
00:07:11,280 --> 00:07:14,880
because the cls is located at a very

137
00:07:14,880 --> 00:07:17,840
early stage of exchange request

138
00:07:17,840 --> 00:07:19,520
processing

139
00:07:19,520 --> 00:07:23,840
all blocks here are authentication free

140
00:07:23,840 --> 00:07:27,680
so you can imagine how dangerous it is

141
00:07:27,680 --> 00:07:30,400
when this fundamental service is

142
00:07:30,400 --> 00:07:33,039
vulnerable

143
00:07:37,840 --> 00:07:40,800
so here is the cs architecture copied

144
00:07:40,800 --> 00:07:42,960
from the document

145
00:07:42,960 --> 00:07:46,000
as you can see the left side is the

146
00:07:46,000 --> 00:07:47,120
client

147
00:07:47,120 --> 00:07:49,919
no matter where the connections come

148
00:07:49,919 --> 00:07:50,960
from

149
00:07:50,960 --> 00:07:57,360
either http pop3 imf or snpp

150
00:07:57,360 --> 00:08:00,400
cis in the middle part processes all

151
00:08:00,400 --> 00:08:02,000
connections

152
00:08:02,000 --> 00:08:04,960
and practices to the back-end service on

153
00:08:04,960 --> 00:08:07,039
the right side

154
00:08:07,039 --> 00:08:09,520
the back-end service will continue to

155
00:08:09,520 --> 00:08:13,840
handle further business logix

156
00:08:14,639 --> 00:08:17,360
and because

157
00:08:18,639 --> 00:08:20,479
and because i'm specialized in web

158
00:08:20,479 --> 00:08:24,800
security so it works on the web

159
00:08:25,360 --> 00:08:30,319
the cs web is built on microsoft iis

160
00:08:30,319 --> 00:08:33,360
as you can see there are two websites

161
00:08:33,360 --> 00:08:35,279
inside the iis

162
00:08:35,279 --> 00:08:38,240
the default website is the front ad we

163
00:08:38,240 --> 00:08:40,559
mentioned before

164
00:08:40,559 --> 00:08:43,120
and the exchange backhand is where the

165
00:08:43,120 --> 00:08:46,560
business logic is

166
00:08:47,839 --> 00:08:49,920
if you look at the configuration

167
00:08:49,920 --> 00:08:53,440
carefully you will notice the front end

168
00:08:53,440 --> 00:08:58,240
is listening on post 80 and 443

169
00:08:58,240 --> 00:09:00,560
and the backend is listening on the port

170
00:09:00,560 --> 00:09:04,320
81 and vote 44

171
00:09:04,320 --> 00:09:06,800
it should be note that the posts are

172
00:09:06,800 --> 00:09:10,240
exposed on all interfaces

173
00:09:10,240 --> 00:09:14,240
so you may sense something wrong here

174
00:09:14,240 --> 00:09:17,920
all the posts are open to all interfaces

175
00:09:17,920 --> 00:09:20,959
which means you can access the backend

176
00:09:20,959 --> 00:09:22,720
directly

177
00:09:22,720 --> 00:09:25,519
wouldn't it be dangerous

178
00:09:25,519 --> 00:09:28,080
yes please keep this question in mind

179
00:09:28,080 --> 00:09:32,160
and we will answer that later

180
00:09:34,320 --> 00:09:37,680
the cs is composed of several iis

181
00:09:37,680 --> 00:09:39,120
modules

182
00:09:39,120 --> 00:09:41,760
applications in front-end include the

183
00:09:41,760 --> 00:09:43,440
proxy module

184
00:09:43,440 --> 00:09:46,240
which is responsible for passing all

185
00:09:46,240 --> 00:09:48,240
incoming requests

186
00:09:48,240 --> 00:09:51,120
applying protocol specific settings

187
00:09:51,120 --> 00:09:55,120
and forwarding them to the back cam

188
00:09:55,120 --> 00:09:58,000
as for the backhand applications include

189
00:09:58,000 --> 00:10:00,240
a rehydration module

190
00:10:00,240 --> 00:10:03,040
which is taking charge of passing

191
00:10:03,040 --> 00:10:04,959
front-end requests

192
00:10:04,959 --> 00:10:07,920
populating the client information back

193
00:10:07,920 --> 00:10:12,000
and continuing the business logic

194
00:10:12,000 --> 00:10:14,720
so here is a question for you

195
00:10:14,720 --> 00:10:17,519
how did the front end and backhand

196
00:10:17,519 --> 00:10:20,560
exchange the information

197
00:10:20,560 --> 00:10:22,880
they synchronize the information and

198
00:10:22,880 --> 00:10:27,839
internal status by http haters

199
00:10:29,680 --> 00:10:33,040
for a client request it will first be

200
00:10:33,040 --> 00:10:35,360
handled by the front end

201
00:10:35,360 --> 00:10:37,839
and the request will be passed through

202
00:10:37,839 --> 00:10:40,320
several is modules

203
00:10:40,320 --> 00:10:42,640
such as the filter

204
00:10:42,640 --> 00:10:44,000
validation

205
00:10:44,000 --> 00:10:45,120
logging

206
00:10:45,120 --> 00:10:48,399
at the last proxy module

207
00:10:48,399 --> 00:10:51,920
the proxy module then picks up a handler

208
00:10:51,920 --> 00:10:55,279
based on the current application path

209
00:10:55,279 --> 00:11:01,279
such as the slash owa or slash ecp

210
00:11:01,279 --> 00:11:04,320
the handler will do the proxy work and

211
00:11:04,320 --> 00:11:08,880
forward the request to the backend

212
00:11:08,880 --> 00:11:11,839
when the backhand receives the request

213
00:11:11,839 --> 00:11:15,200
it passes the request to the rehydration

214
00:11:15,200 --> 00:11:16,240
module

215
00:11:16,240 --> 00:11:19,360
to restore the original client state

216
00:11:19,360 --> 00:11:23,920
and continue the business logics

217
00:11:25,279 --> 00:11:28,880
so our idea is simple could we access

218
00:11:28,880 --> 00:11:32,720
the backend intentionally

219
00:11:32,720 --> 00:11:34,880
since the exchange synchronized

220
00:11:34,880 --> 00:11:38,399
information by http haters

221
00:11:38,399 --> 00:11:41,680
it seems like most of the essa's control

222
00:11:41,680 --> 00:11:44,480
is done by the front end

223
00:11:44,480 --> 00:11:46,480
if we can access the

224
00:11:46,480 --> 00:11:49,200
if we can access to the backend we saw

225
00:11:49,200 --> 00:11:50,720
restrictions

226
00:11:50,720 --> 00:11:54,079
maybe there are several internal apis we

227
00:11:54,079 --> 00:11:56,480
can abuse

228
00:11:56,480 --> 00:11:59,519
we all know implementing implementing a

229
00:11:59,519 --> 00:12:01,680
proxy is hard

230
00:12:01,680 --> 00:12:04,399
and the front end seems like a well

231
00:12:04,399 --> 00:12:08,160
implemented http client

232
00:12:08,160 --> 00:12:11,200
so if there are some magic tricks to

233
00:12:11,200 --> 00:12:13,680
manipulate the contacts between the

234
00:12:13,680 --> 00:12:15,839
front end and backhand

235
00:12:15,839 --> 00:12:18,880
it must be fine

236
00:12:21,279 --> 00:12:24,399
so in order to abuse the context we have

237
00:12:24,399 --> 00:12:29,680
to know how the proxy module works first

238
00:12:29,680 --> 00:12:33,120
the proxy request handler is the most

239
00:12:33,120 --> 00:12:36,240
important part of the front end

240
00:12:36,240 --> 00:12:39,680
all handlers should inherit this class

241
00:12:39,680 --> 00:12:43,360
to implement their message such as how

242
00:12:43,360 --> 00:12:46,880
to handle the client cookies or haters

243
00:12:46,880 --> 00:12:50,160
and how to proxy the client request to

244
00:12:50,160 --> 00:12:50,839
the

245
00:12:50,839 --> 00:12:52,560
bacon

246
00:12:52,560 --> 00:12:55,440
we separate the messes into three

247
00:12:55,440 --> 00:12:57,040
section

248
00:12:57,040 --> 00:12:59,360
the first is request

249
00:12:59,360 --> 00:13:02,000
which will pass and modify the client

250
00:13:02,000 --> 00:13:03,839
request

251
00:13:03,839 --> 00:13:06,800
and next is proxy section

252
00:13:06,800 --> 00:13:09,839
which will proxy and send the http

253
00:13:09,839 --> 00:13:12,959
request to the backend

254
00:13:12,959 --> 00:13:16,000
and the last section is response

255
00:13:16,000 --> 00:13:18,480
this section will receive the response

256
00:13:18,480 --> 00:13:22,240
from the backend and decide which hater

257
00:13:22,240 --> 00:13:25,120
our cookies should be sent back to the

258
00:13:25,120 --> 00:13:27,600
client

259
00:13:27,920 --> 00:13:30,560
because this handler is important we

260
00:13:30,560 --> 00:13:35,638
will explain the messages one by one

261
00:13:36,079 --> 00:13:40,000
the first method of request section is

262
00:13:40,000 --> 00:13:43,680
copy headers to server request

263
00:13:43,680 --> 00:13:47,199
it will decide which http haters from

264
00:13:47,199 --> 00:13:51,920
the client can be sent to the backend

265
00:13:51,920 --> 00:13:54,720
as we said the front end and backhand

266
00:13:54,720 --> 00:13:57,519
synchronize information and internal

267
00:13:57,519 --> 00:14:00,959
status by http haters

268
00:14:00,959 --> 00:14:04,480
so maybe you are thinking i could force

269
00:14:04,480 --> 00:14:08,480
the haters to conceal something

270
00:14:08,480 --> 00:14:11,360
this is a nice try

271
00:14:11,360 --> 00:14:14,800
but unfortunately you can see here is a

272
00:14:14,800 --> 00:14:18,079
blacklist in the mazer

273
00:14:18,079 --> 00:14:22,160
the front end blocks several http haters

274
00:14:22,160 --> 00:14:25,600
which are used internally

275
00:14:25,600 --> 00:14:28,320
please keep it please keep in mind that

276
00:14:28,320 --> 00:14:31,680
the hater x common as this token

277
00:14:31,680 --> 00:14:33,680
is an important one

278
00:14:33,680 --> 00:14:37,359
you will learn this later

279
00:14:42,480 --> 00:14:45,680
the second is copy cookies to server

280
00:14:45,680 --> 00:14:47,440
request

281
00:14:47,440 --> 00:14:50,000
the functionality is the send as

282
00:14:50,000 --> 00:14:51,839
previous one

283
00:14:51,839 --> 00:14:56,399
but it copies cookies instead

284
00:14:57,519 --> 00:15:01,040
the last method of request section is

285
00:15:01,040 --> 00:15:04,399
add protocol specific headers to server

286
00:15:04,399 --> 00:15:06,320
request

287
00:15:06,320 --> 00:15:09,440
this method allows a handler to apply

288
00:15:09,440 --> 00:15:12,800
customized protocol settings

289
00:15:12,800 --> 00:15:16,720
for example if the front-end owa would

290
00:15:16,720 --> 00:15:20,399
like to pass information to the backend

291
00:15:20,399 --> 00:15:23,040
here is the place it can insert

292
00:15:23,040 --> 00:15:27,240
information to haters

293
00:15:28,560 --> 00:15:31,839
besides the customized protocol settings

294
00:15:31,839 --> 00:15:34,959
this means that also clones the user

295
00:15:34,959 --> 00:15:39,360
identity to a new http hater

296
00:15:39,360 --> 00:15:41,279
the identity is the client

297
00:15:41,279 --> 00:15:44,800
authentication result in iis

298
00:15:44,800 --> 00:15:47,519
also consisting of your security

299
00:15:47,519 --> 00:15:49,839
identifier

300
00:15:49,839 --> 00:15:53,680
the message theorized it to a string

301
00:15:53,680 --> 00:15:56,720
and press it into the haters

302
00:15:56,720 --> 00:15:59,440
which will be forward to the back end

303
00:15:59,440 --> 00:16:01,680
later

304
00:16:01,680 --> 00:16:06,240
so as of now you know how the front end

305
00:16:06,240 --> 00:16:09,920
and back can synchronize your identity

306
00:16:09,920 --> 00:16:13,600
then do it by the hater as common access

307
00:16:13,600 --> 00:16:16,079
token

308
00:16:18,240 --> 00:16:21,440
once the request passing is done

309
00:16:21,440 --> 00:16:25,519
it will lead to the proxy section

310
00:16:25,519 --> 00:16:29,519
the proxy first uses the get target that

311
00:16:29,519 --> 00:16:31,519
can server url

312
00:16:31,519 --> 00:16:35,360
to calculate the url where the front end

313
00:16:35,360 --> 00:16:37,920
shoes sent to

314
00:16:37,920 --> 00:16:40,880
this method is also a body plus

315
00:16:40,880 --> 00:16:44,160
and full of vulnerabilities

316
00:16:44,160 --> 00:16:47,439
we will discuss this

317
00:16:48,839 --> 00:16:53,279
later the second step of proxy is create

318
00:16:53,279 --> 00:16:55,519
server request

319
00:16:55,519 --> 00:16:57,360
which first in

320
00:16:57,360 --> 00:17:01,199
which first initialize an http client

321
00:17:01,199 --> 00:17:04,799
sets up the http message and haters

322
00:17:04,799 --> 00:17:08,559
and forwards it to the backend

323
00:17:08,559 --> 00:17:12,400
we mentioned that posts in is are open

324
00:17:12,400 --> 00:17:13,919
to anyone

325
00:17:13,919 --> 00:17:16,720
and this is dangerous

326
00:17:16,720 --> 00:17:20,000
that's why exchange has a mechanism to

327
00:17:20,000 --> 00:17:23,520
avoid the situation

328
00:17:25,039 --> 00:17:27,439
while the front end is creating a

329
00:17:27,439 --> 00:17:28,960
request

330
00:17:28,960 --> 00:17:32,400
it will generate a kerberos tikki and

331
00:17:32,400 --> 00:17:37,200
put it in the authorization header

332
00:17:37,200 --> 00:17:40,320
this hater will be sent to the backend

333
00:17:40,320 --> 00:17:43,440
along with the request

334
00:17:43,440 --> 00:17:46,640
so how the spec can mode which

335
00:17:46,640 --> 00:17:51,200
connection is from a valid front end

336
00:17:51,200 --> 00:17:55,679
by verifying this clever sticky

337
00:17:57,840 --> 00:18:00,799
we look into the general kerose of

338
00:18:00,799 --> 00:18:01,919
header

339
00:18:01,919 --> 00:18:04,880
and note that the header is generated

340
00:18:04,880 --> 00:18:08,799
with the http spn of the exchange

341
00:18:08,799 --> 00:18:12,440
machine account

342
00:18:14,559 --> 00:18:17,440
if you observe the traffic between the

343
00:18:17,440 --> 00:18:19,600
front end and backhand

344
00:18:19,600 --> 00:18:21,039
you will see

345
00:18:21,039 --> 00:18:25,360
two headers shown in the request

346
00:18:25,360 --> 00:18:28,799
one is the authorization header which is

347
00:18:28,799 --> 00:18:32,400
the kerberos tiki used to indicate you

348
00:18:32,400 --> 00:18:35,280
are a valid front-end

349
00:18:35,280 --> 00:18:38,320
the other is the hater x common access

350
00:18:38,320 --> 00:18:39,679
token

351
00:18:39,679 --> 00:18:42,640
it's a sterilized token indicates your

352
00:18:42,640 --> 00:18:44,720
identity

353
00:18:44,720 --> 00:18:47,760
for example if you log in with the nand

354
00:18:47,760 --> 00:18:50,480
orange the hater is the serialized

355
00:18:50,480 --> 00:18:55,799
result of your security identifier

356
00:18:58,320 --> 00:19:01,200
after sending the request to the backcam

357
00:19:01,200 --> 00:19:04,320
the front end receive the response and

358
00:19:04,320 --> 00:19:07,760
enter the last section

359
00:19:08,720 --> 00:19:11,120
the response section is similar to

360
00:19:11,120 --> 00:19:12,640
request

361
00:19:12,640 --> 00:19:15,679
it checks the response from the backend

362
00:19:15,679 --> 00:19:19,679
and decide which haters or cookies are

363
00:19:19,679 --> 00:19:24,160
allowed to be sent back to the client

364
00:19:24,160 --> 00:19:26,960
so now you understand how the front end

365
00:19:26,960 --> 00:19:28,000
works

366
00:19:28,000 --> 00:19:29,760
let's move on

367
00:19:29,760 --> 00:19:32,960
to see how the back-end process and

368
00:19:32,960 --> 00:19:38,600
populate the request from front end

369
00:19:40,000 --> 00:19:42,799
the backhand rehydration module first

370
00:19:42,799 --> 00:19:45,919
uses the mesa to check whether the

371
00:19:45,919 --> 00:19:50,559
incoming request is authenticated or not

372
00:19:50,559 --> 00:19:53,919
it is the time to leverage the capacity

373
00:19:53,919 --> 00:19:57,120
the front end generate

374
00:19:57,120 --> 00:20:00,160
by handing over the ticket the backhand

375
00:20:00,160 --> 00:20:03,200
knows you are from you are valid from

376
00:20:03,200 --> 00:20:05,520
and now

377
00:20:05,520 --> 00:20:09,039
the back-end then codemaster try get

378
00:20:09,039 --> 00:20:11,840
common access token to restore the

379
00:20:11,840 --> 00:20:16,559
user's identity from front-end

380
00:20:19,039 --> 00:20:22,320
the mesa retrieves the header this will

381
00:20:22,320 --> 00:20:25,440
exterize it back to the original access

382
00:20:25,440 --> 00:20:26,480
token

383
00:20:26,480 --> 00:20:30,559
and put it in the http contacts object

384
00:20:30,559 --> 00:20:33,280
for later use

385
00:20:33,280 --> 00:20:36,000
so far you learned how the front end and

386
00:20:36,000 --> 00:20:39,840
back can synchronize the user's identity

387
00:20:39,840 --> 00:20:43,840
and how the header x common access token

388
00:20:43,840 --> 00:20:46,960
plays an important role in the cs

389
00:20:46,960 --> 00:20:49,360
architecture

390
00:20:49,360 --> 00:20:52,720
since the nasa just checks if the user

391
00:20:52,720 --> 00:20:56,159
are looking or not it doesn't check the

392
00:20:56,159 --> 00:20:58,000
identity

393
00:20:58,000 --> 00:21:00,640
here comes a question

394
00:21:00,640 --> 00:21:03,679
could we all send cash as a normal user

395
00:21:03,679 --> 00:21:06,720
in the backend

396
00:21:06,720 --> 00:21:09,520
if we access the backend directly

397
00:21:09,520 --> 00:21:12,720
and on sandycat with a normal user

398
00:21:12,720 --> 00:21:15,840
we can specify whatever values in the

399
00:21:15,840 --> 00:21:18,799
header x common access token

400
00:21:18,799 --> 00:21:23,200
and impersonal as any users

401
00:21:24,480 --> 00:21:27,840
the idea is good and actually you can

402
00:21:27,840 --> 00:21:30,799
pass the is authentication of the back

403
00:21:30,799 --> 00:21:32,240
can

404
00:21:32,240 --> 00:21:35,039
but there is one more checkpoint

405
00:21:35,039 --> 00:21:38,559
the method is token serialization laws

406
00:21:38,559 --> 00:21:41,760
manifest the current log user

407
00:21:41,760 --> 00:21:45,039
and there is a rehydration exception if

408
00:21:45,039 --> 00:21:48,799
the checkpoint is fail

409
00:21:50,720 --> 00:21:53,120
it checks if you have a token

410
00:21:53,120 --> 00:21:55,520
sterilization right

411
00:21:55,520 --> 00:21:58,559
by default only the exchange machine

412
00:21:58,559 --> 00:22:01,440
account has this right

413
00:22:01,440 --> 00:22:03,919
so that's why the kerberos ticket

414
00:22:03,919 --> 00:22:06,480
generated by front end can pass this

415
00:22:06,480 --> 00:22:07,840
checkpoint

416
00:22:07,840 --> 00:22:10,640
but you will fail even you are using the

417
00:22:10,640 --> 00:22:13,840
correct credential

418
00:22:18,240 --> 00:22:20,960
so here is a quick summary

419
00:22:20,960 --> 00:22:23,600
when there's a client request the

420
00:22:23,600 --> 00:22:27,280
front-end is first tries to ascend

421
00:22:27,280 --> 00:22:29,200
category cost

422
00:22:29,200 --> 00:22:32,400
if succeed the front end series the user

423
00:22:32,400 --> 00:22:36,400
identity and adds it into the hater x

424
00:22:36,400 --> 00:22:39,360
common access token

425
00:22:39,360 --> 00:22:42,080
the front end then generates a kerberos

426
00:22:42,080 --> 00:22:46,320
ticket by xhttp spn and press it into

427
00:22:46,320 --> 00:22:49,039
the authorization header

428
00:22:49,039 --> 00:22:51,679
it will forward these headers along with

429
00:22:51,679 --> 00:22:55,760
the client request to the backend

430
00:22:55,760 --> 00:22:58,480
the backend also tries to authenticate

431
00:22:58,480 --> 00:23:01,360
the request at the beginning

432
00:23:01,360 --> 00:23:04,000
the rehydration module will verify

433
00:23:04,000 --> 00:23:07,039
whether the user have the right of token

434
00:23:07,039 --> 00:23:10,159
sterilization or not

435
00:23:10,159 --> 00:23:12,480
since we are using a kubrow sticky

436
00:23:12,480 --> 00:23:14,640
generated by the front end

437
00:23:14,640 --> 00:23:17,120
we passed

438
00:23:17,120 --> 00:23:20,559
lastly the rehydration restores the user

439
00:23:20,559 --> 00:23:23,280
identity from the header x command

440
00:23:23,280 --> 00:23:25,760
access token

441
00:23:25,760 --> 00:23:30,320
and continue the backend business logic

442
00:23:32,320 --> 00:23:34,480
so far we briefly explained the

443
00:23:34,480 --> 00:23:37,360
communication between the front end and

444
00:23:37,360 --> 00:23:38,559
backhand

445
00:23:38,559 --> 00:23:41,600
let's start the hack

446
00:23:43,279 --> 00:23:46,880
okay the first exploit is proxy logong

447
00:23:46,880 --> 00:23:49,840
as introduced before this may be the

448
00:23:49,840 --> 00:23:52,480
most severe vulnerability in the

449
00:23:52,480 --> 00:23:55,279
exchange history

450
00:23:55,279 --> 00:23:58,559
proxy lock gun is checked with two bugs

451
00:23:58,559 --> 00:24:01,039
to get rce

452
00:24:01,039 --> 00:24:04,720
one is an ssrf on the front end

453
00:24:04,720 --> 00:24:08,000
and the other is an arbitrary file right

454
00:24:08,000 --> 00:24:12,480
on the control panel of the backend

455
00:24:14,240 --> 00:24:16,640
here is proxy logon

456
00:24:16,640 --> 00:24:19,760
the bug is mainly looked at at the proxy

457
00:24:19,760 --> 00:24:22,799
section in the front end

458
00:24:22,799 --> 00:24:25,919
we mentioned that the front end handlers

459
00:24:25,919 --> 00:24:28,559
calculates the back-end url

460
00:24:28,559 --> 00:24:34,240
and forwards the request to that url

461
00:24:37,279 --> 00:24:40,480
one of the handler is in charge of

462
00:24:40,480 --> 00:24:44,559
processing the static resources

463
00:24:44,559 --> 00:24:47,360
it will assign the backend target from

464
00:24:47,360 --> 00:24:49,760
the cookie

465
00:24:49,760 --> 00:24:53,440
so you will figure out how simple this

466
00:24:53,440 --> 00:24:58,679
box is after learning the architecture

467
00:25:00,320 --> 00:25:03,200
the front end change the user's supplied

468
00:25:03,200 --> 00:25:06,240
cookie as the domain name and the domain

469
00:25:06,240 --> 00:25:09,039
name will be concatenate as the backend

470
00:25:09,039 --> 00:25:10,960
url

471
00:25:10,960 --> 00:25:13,679
we use a bit of passing checks to

472
00:25:13,679 --> 00:25:17,440
enclose the url and force the exchange

473
00:25:17,440 --> 00:25:21,200
to fetch example.com

474
00:25:21,200 --> 00:25:24,080
the exchange will then return the whole

475
00:25:24,080 --> 00:25:28,520
response back to us

476
00:25:29,840 --> 00:25:33,840
so what is the loot code of this archery

477
00:25:33,840 --> 00:25:36,480
back-end assignment

478
00:25:36,480 --> 00:25:39,760
as we mentioned that the exchange server

479
00:25:39,760 --> 00:25:41,840
changed its

480
00:25:41,840 --> 00:25:45,200
while releasing new versions

481
00:25:45,200 --> 00:25:48,000
this cookie is a quick solution for

482
00:25:48,000 --> 00:25:51,279
exchange to map the front end in new

483
00:25:51,279 --> 00:25:52,720
architecture

484
00:25:52,720 --> 00:25:57,760
to identify where the old backhand is

485
00:25:57,760 --> 00:26:01,679
so it looks like a design step to that

486
00:26:01,679 --> 00:26:05,320
backward compatibility

487
00:26:05,760 --> 00:26:07,039
so with

488
00:26:07,039 --> 00:26:09,840
the backhand this with this abstract

489
00:26:09,840 --> 00:26:11,520
back-end assignment

490
00:26:11,520 --> 00:26:15,120
we have a super ssrf and that can

491
00:26:15,120 --> 00:26:18,640
control almost all the requests

492
00:26:18,640 --> 00:26:22,080
and get all the responses

493
00:26:22,080 --> 00:26:24,320
and the most important and the most

494
00:26:24,320 --> 00:26:26,480
impressive is that

495
00:26:26,480 --> 00:26:29,279
it will generate a coverage ticket for

496
00:26:29,279 --> 00:26:30,720
us

497
00:26:30,720 --> 00:26:34,480
which means even when we are taking a

498
00:26:34,480 --> 00:26:38,880
protected and domain joint http service

499
00:26:38,880 --> 00:26:40,919
we can still hack with the

500
00:26:40,919 --> 00:26:44,000
authentication of exchange machine

501
00:26:44,000 --> 00:26:46,480
account

502
00:26:47,600 --> 00:26:51,520
so thank you thanks to the super ssrf we

503
00:26:51,520 --> 00:26:54,640
can leverage the internal api

504
00:26:54,640 --> 00:26:58,320
flash proxy logong.ecp to get a

505
00:26:58,320 --> 00:27:02,159
validation to access the control panel

506
00:27:02,159 --> 00:27:05,840
the api is also the reason why we called

507
00:27:05,840 --> 00:27:09,200
it praxilogan

508
00:27:09,200 --> 00:27:12,159
as for the rest of the exploitation i

509
00:27:12,159 --> 00:27:15,039
believe there are already lots of

510
00:27:15,039 --> 00:27:18,159
technical analysis out there

511
00:27:18,159 --> 00:27:20,559
we will skip it today further

512
00:27:20,559 --> 00:27:24,080
consideration of time

513
00:27:25,760 --> 00:27:29,440
we will not do the demonstration today

514
00:27:29,440 --> 00:27:31,919
but if you are interested welcome to

515
00:27:31,919 --> 00:27:36,480
check the demo on our website

516
00:27:37,919 --> 00:27:40,720
next i will be sharing details about

517
00:27:40,720 --> 00:27:43,600
proxy oracle

518
00:27:43,600 --> 00:27:46,640
compared to proxy log gun proxy autocar

519
00:27:46,640 --> 00:27:49,279
is an interesting exploit with a

520
00:27:49,279 --> 00:27:52,080
different approach

521
00:27:52,080 --> 00:27:55,520
proxy oracle would allow the attacker to

522
00:27:55,520 --> 00:27:59,279
recover the victim's plan tax password

523
00:27:59,279 --> 00:28:02,080
simply by leading them to a malicious

524
00:28:02,080 --> 00:28:03,919
link

525
00:28:03,919 --> 00:28:06,480
we use a cross-site scripting and

526
00:28:06,480 --> 00:28:11,520
padding oracle to complete the exporting

527
00:28:12,799 --> 00:28:15,840
first we would like to explain how the

528
00:28:15,840 --> 00:28:21,279
owa or ecp or centicad uses

529
00:28:21,279 --> 00:28:24,480
if the negative is authentication is

530
00:28:24,480 --> 00:28:25,520
used

531
00:28:25,520 --> 00:28:28,080
an ugly prompt will

532
00:28:28,080 --> 00:28:31,279
pop out and asking you to enter the

533
00:28:31,279 --> 00:28:36,240
password instead of this fancy interface

534
00:28:36,240 --> 00:28:39,360
which means exchange is using a certain

535
00:28:39,360 --> 00:28:43,360
mechanism to ask you the transformation

536
00:28:43,360 --> 00:28:47,679
between credentials and cookies

537
00:28:47,679 --> 00:28:51,279
so let's take a look at how this fancy

538
00:28:51,279 --> 00:28:54,320
interface is working with the original

539
00:28:54,320 --> 00:28:57,320
architecture

540
00:28:59,039 --> 00:29:03,200
let's get back to the cls architecture

541
00:29:03,200 --> 00:29:08,480
all the ota and ecp looking mechanism is

542
00:29:08,480 --> 00:29:11,360
done by the phone-based authentication

543
00:29:11,360 --> 00:29:13,440
module

544
00:29:13,440 --> 00:29:15,520
the fba module

545
00:29:15,520 --> 00:29:18,559
is an authentication module prior to the

546
00:29:18,559 --> 00:29:20,720
exchange front end

547
00:29:20,720 --> 00:29:23,679
and responsible for converting the

548
00:29:23,679 --> 00:29:27,279
username and password into cookies

549
00:29:27,279 --> 00:29:30,480
or translating cool kicks back to the

550
00:29:30,480 --> 00:29:34,320
original credential pairs

551
00:29:34,320 --> 00:29:37,760
the implementation stores your username

552
00:29:37,760 --> 00:29:42,080
and password in cookies directly

553
00:29:42,080 --> 00:29:45,279
of course the cookie is encrypted to

554
00:29:45,279 --> 00:29:49,039
avoid bad guys catching your password in

555
00:29:49,039 --> 00:29:53,480
plain text on the phone

556
00:29:54,240 --> 00:29:57,760
if you read the login traffic carefully

557
00:29:57,760 --> 00:30:01,840
you will see several cookies which stand

558
00:30:01,840 --> 00:30:04,720
for your identity

559
00:30:04,720 --> 00:30:07,840
for the later mail operation you have to

560
00:30:07,840 --> 00:30:13,520
attach cookies to identify who you are

561
00:30:13,520 --> 00:30:16,159
among all cookies there are five

562
00:30:16,159 --> 00:30:21,600
important ones with the prefix ca data

563
00:30:21,600 --> 00:30:24,159
you can see from the screen

564
00:30:24,159 --> 00:30:27,600
the ci data contains your encrypted

565
00:30:27,600 --> 00:30:31,360
username and password

566
00:30:32,399 --> 00:30:34,240
here is the pseudo code for the

567
00:30:34,240 --> 00:30:37,919
encryption logic extract generates to

568
00:30:37,919 --> 00:30:41,440
render string as the iv and key for

569
00:30:41,440 --> 00:30:43,440
every session

570
00:30:43,440 --> 00:30:46,640
the ibm key will be sent and stored on

571
00:30:46,640 --> 00:30:49,120
the client side

572
00:30:49,120 --> 00:30:51,919
however to avoid someone stealing the

573
00:30:51,919 --> 00:30:55,440
cookies and decrypting it with the iv

574
00:30:55,440 --> 00:30:56,799
and key

575
00:30:56,799 --> 00:31:00,880
exchange uses rsa to encrypt with its

576
00:31:00,880 --> 00:31:05,360
private key again before sending

577
00:31:05,360 --> 00:31:09,279
the extract then use this aes

578
00:31:09,279 --> 00:31:12,399
to encrypt your encoded credential with

579
00:31:12,399 --> 00:31:14,240
the iv and key

580
00:31:14,240 --> 00:31:19,159
and put the result into the cookies

581
00:31:20,640 --> 00:31:23,279
and yes you can find painting oracle

582
00:31:23,279 --> 00:31:25,600
here

583
00:31:26,720 --> 00:31:29,760
exchange text the cbc as its painting

584
00:31:29,760 --> 00:31:30,960
mode

585
00:31:30,960 --> 00:31:33,760
if you are familiar with cryptography

586
00:31:33,760 --> 00:31:37,440
you must know that cbc is vulnerable to

587
00:31:37,440 --> 00:31:40,000
the painting or local attack

588
00:31:40,000 --> 00:31:42,960
the exchange implementation catches the

589
00:31:42,960 --> 00:31:46,000
painting error exception and returns

590
00:31:46,000 --> 00:31:48,960
immediately

591
00:31:49,840 --> 00:31:52,480
when the login process fails

592
00:31:52,480 --> 00:31:55,679
exchange redirects the http back to the

593
00:31:55,679 --> 00:31:59,279
login pack with an error code

594
00:31:59,279 --> 00:32:02,240
and due to the return we have an oracle

595
00:32:02,240 --> 00:32:04,080
here

596
00:32:04,080 --> 00:32:07,519
if the encryption fails the error code

597
00:32:07,519 --> 00:32:09,039
is zero

598
00:32:09,039 --> 00:32:12,240
which stands for noun

599
00:32:12,240 --> 00:32:14,799
and if we corrupt the cyber tags

600
00:32:14,799 --> 00:32:16,480
successfully

601
00:32:16,480 --> 00:32:19,519
the exchange will try to login with the

602
00:32:19,519 --> 00:32:22,880
corrupted credential pair

603
00:32:22,880 --> 00:32:26,080
and at this moment a result must be a

604
00:32:26,080 --> 00:32:29,600
failure and the error code is 2

605
00:32:29,600 --> 00:32:34,399
which stands for the invalid credentials

606
00:32:34,399 --> 00:32:37,120
by differing from the error number

607
00:32:37,120 --> 00:32:40,320
we have an oracle to recover the plan

608
00:32:40,320 --> 00:32:43,320
text

609
00:32:44,320 --> 00:32:48,000
so now we know we can decrypt any cookie

610
00:32:48,000 --> 00:32:50,480
with the painting oracle

611
00:32:50,480 --> 00:32:52,960
but the problem is

612
00:32:52,960 --> 00:32:57,679
how to get the cookie from the victims

613
00:32:59,120 --> 00:33:02,159
in order to get a cookie on clients we

614
00:33:02,159 --> 00:33:04,960
uncover a cross-sized grouping to train

615
00:33:04,960 --> 00:33:06,799
together

616
00:33:06,799 --> 00:33:11,440
but it comes up with another problem

617
00:33:11,440 --> 00:33:14,880
in exchange all sensitive cookies are

618
00:33:14,880 --> 00:33:18,640
protected by http only

619
00:33:18,640 --> 00:33:21,679
so we can't access the cookies by

620
00:33:21,679 --> 00:33:24,880
javascript or javascript

621
00:33:24,880 --> 00:33:28,080
so what can we do

622
00:33:28,080 --> 00:33:30,320
since we can ask you the arbitrary

623
00:33:30,320 --> 00:33:33,039
javascript on the client side

624
00:33:33,039 --> 00:33:37,360
why don't we just insert the ssi cookie

625
00:33:37,360 --> 00:33:41,120
which is used in proxy logan

626
00:33:41,120 --> 00:33:44,320
once we add a cookie to the browsers we

627
00:33:44,320 --> 00:33:47,840
can sniff and take over all the user's

628
00:33:47,840 --> 00:33:50,320
web requests

629
00:33:50,320 --> 00:33:53,760
all we need to do is to sit on our

630
00:33:53,760 --> 00:33:57,279
server and wait for the cookie to come

631
00:33:57,279 --> 00:33:59,519
back

632
00:34:01,279 --> 00:34:05,360
i will elaborate the process further

633
00:34:05,360 --> 00:34:08,239
we first send a malicious link to the

634
00:34:08,239 --> 00:34:10,079
victim

635
00:34:10,079 --> 00:34:13,679
once the victim triggers our xss

636
00:34:13,679 --> 00:34:17,599
we insert the ssr cookie to pretend we

637
00:34:17,599 --> 00:34:21,440
are the backend of exchange

638
00:34:21,440 --> 00:34:24,239
then the exchange server becomes a proxy

639
00:34:24,239 --> 00:34:27,040
between the victim and earth

640
00:34:27,040 --> 00:34:30,000
we will take over all the traffic and

641
00:34:30,000 --> 00:34:33,918
bypass the http only to get encrypted

642
00:34:33,918 --> 00:34:36,399
cookies

643
00:34:38,239 --> 00:34:41,040
okay in the demonstration

644
00:34:41,040 --> 00:34:43,679
because the tank consideration and i

645
00:34:43,679 --> 00:34:47,119
will also skip the demonstration today

646
00:34:47,119 --> 00:34:49,760
if you are interested you can follow my

647
00:34:49,760 --> 00:34:53,839
blog to see the demonstration

648
00:34:55,440 --> 00:34:57,760
oops

649
00:34:58,240 --> 00:35:00,880
and the last expert i will share today

650
00:35:00,880 --> 00:35:02,720
is proxy shield

651
00:35:02,720 --> 00:35:05,119
this is the explorer with diamonds chat

652
00:35:05,119 --> 00:35:08,400
at pong2 on 2021.

653
00:35:08,400 --> 00:35:11,040
the result of proxy shell is the

654
00:35:11,040 --> 00:35:13,760
center's proxy lockdown

655
00:35:13,760 --> 00:35:16,880
and authenticate attack and an authentic

656
00:35:16,880 --> 00:35:20,800
head attack can ask you absurd command

657
00:35:20,800 --> 00:35:23,599
on the exchange server

658
00:35:23,599 --> 00:35:26,560
but exploit check is different

659
00:35:26,560 --> 00:35:29,599
proxy share is checked with an sdl

660
00:35:29,599 --> 00:35:32,160
bypass in the front end

661
00:35:32,160 --> 00:35:35,440
an elevation of privacy in the backend

662
00:35:35,440 --> 00:35:37,520
partial

663
00:35:37,520 --> 00:35:43,320
and an actual firewire to get rce

664
00:35:44,240 --> 00:35:46,880
so where is the proxy show

665
00:35:46,880 --> 00:35:50,480
this first or the first pre-all spark is

666
00:35:50,480 --> 00:35:53,440
also looked at at the back-end url

667
00:35:53,440 --> 00:35:56,440
calculation

668
00:35:58,240 --> 00:36:00,480
proxy shield begins with a pass

669
00:36:00,480 --> 00:36:02,000
confusion

670
00:36:02,000 --> 00:36:04,640
exchange has a feature called the

671
00:36:04,640 --> 00:36:08,240
explicit logon feature

672
00:36:08,240 --> 00:36:11,760
this feature is used to display another

673
00:36:11,760 --> 00:36:15,520
user's mailbox or calendar in a new

674
00:36:15,520 --> 00:36:18,240
browser window

675
00:36:18,240 --> 00:36:21,119
of course the displayed mailbox must

676
00:36:21,119 --> 00:36:24,240
have to be configured with permission to

677
00:36:24,240 --> 00:36:27,359
publish first

678
00:36:27,359 --> 00:36:30,240
in order to open with a single get

679
00:36:30,240 --> 00:36:31,839
request

680
00:36:31,839 --> 00:36:35,359
the url format must be simple

681
00:36:35,359 --> 00:36:38,800
and the mailbox address must be included

682
00:36:38,800 --> 00:36:42,079
in the url such as the highlight part in

683
00:36:42,079 --> 00:36:44,320
the slide

684
00:36:44,320 --> 00:36:48,320
the extract normalize this spatial url

685
00:36:48,320 --> 00:36:50,160
and reroute it

686
00:36:50,160 --> 00:36:54,759
into the existing handler

687
00:36:56,560 --> 00:36:59,520
of course the past is not the only way

688
00:36:59,520 --> 00:37:03,040
to specify the mailbox edges

689
00:37:03,040 --> 00:37:06,320
we find that a special cast in the

690
00:37:06,320 --> 00:37:09,920
outdoor discovery handler

691
00:37:09,920 --> 00:37:12,800
exchange will consider edges from the

692
00:37:12,800 --> 00:37:16,720
query string if the path ends with slash

693
00:37:16,720 --> 00:37:21,078
auto discover the season

694
00:37:22,320 --> 00:37:25,040
effort after getting the address the

695
00:37:25,040 --> 00:37:29,359
handler tries to normalize the url

696
00:37:29,359 --> 00:37:32,320
you see that exchange won't conduct too

697
00:37:32,320 --> 00:37:35,119
much checking on the patent of the

698
00:37:35,119 --> 00:37:36,400
remote

699
00:37:36,400 --> 00:37:39,599
of the removing mailbox edges

700
00:37:39,599 --> 00:37:43,119
which led us to use the substring

701
00:37:43,119 --> 00:37:48,599
to to address any part of the url

702
00:37:50,400 --> 00:37:53,040
as you can see from the slide

703
00:37:53,040 --> 00:37:58,240
this is the url we will be visiting

704
00:37:59,599 --> 00:38:02,880
and this is the mailbox agers we use the

705
00:38:02,880 --> 00:38:07,280
query string to specify

706
00:38:08,560 --> 00:38:11,599
and here is the part will be removed

707
00:38:11,599 --> 00:38:14,160
from the exchange according to our

708
00:38:14,160 --> 00:38:16,640
patent

709
00:38:17,200 --> 00:38:20,720
with with the address

710
00:38:21,520 --> 00:38:25,040
this is the actual url the request will

711
00:38:25,040 --> 00:38:28,400
be sent to the backend

712
00:38:28,400 --> 00:38:31,440
as for now we can access any exchange

713
00:38:31,440 --> 00:38:34,800
they can't get

714
00:38:36,400 --> 00:38:39,599
also this box is not as powerful as the

715
00:38:39,599 --> 00:38:43,680
ssrf in proxy logong it's sufficient to

716
00:38:43,680 --> 00:38:46,960
answer archery backhands

717
00:38:46,960 --> 00:38:50,400
we try to access the an api in the fast

718
00:38:50,400 --> 00:38:53,599
to identify our priority

719
00:38:53,599 --> 00:38:56,640
from the screenshot you could see that

720
00:38:56,640 --> 00:38:59,760
we did access the backend with the

721
00:38:59,760 --> 00:39:04,079
exchange system privileges again

722
00:39:05,760 --> 00:39:09,520
so here comes the post exploitation part

723
00:39:09,520 --> 00:39:12,880
the approach of original proxy long gun

724
00:39:12,880 --> 00:39:16,480
fails due to some exchange in depth

725
00:39:16,480 --> 00:39:18,240
protections

726
00:39:18,240 --> 00:39:20,000
so we have to

727
00:39:20,000 --> 00:39:22,960
discover a new approach

728
00:39:22,960 --> 00:39:26,640
now let's turn the focus to exchange

729
00:39:26,640 --> 00:39:29,839
posture remote

730
00:39:30,160 --> 00:39:32,640
partial remoting is a feature for

731
00:39:32,640 --> 00:39:33,839
exchange

732
00:39:33,839 --> 00:39:37,040
to automation for automations

733
00:39:37,040 --> 00:39:39,200
through the defined power shield

734
00:39:39,200 --> 00:39:40,480
commands

735
00:39:40,480 --> 00:39:42,480
users can read mail

736
00:39:42,480 --> 00:39:45,920
spent mail and even configure settings

737
00:39:45,920 --> 00:39:48,800
by command lines

738
00:39:48,800 --> 00:39:51,680
the exchange posture implementation is

739
00:39:51,680 --> 00:39:54,960
built upon the powershell api

740
00:39:54,960 --> 00:39:57,680
by calling the api exchange could

741
00:39:57,680 --> 00:40:00,640
realize approach to realize a partial

742
00:40:00,640 --> 00:40:04,480
server and uses the wrong space to limit

743
00:40:04,480 --> 00:40:08,000
and isolate the command execution

744
00:40:08,000 --> 00:40:09,520
all the

745
00:40:09,520 --> 00:40:12,960
are based on the wing rn protocol

746
00:40:12,960 --> 00:40:14,800
it should be note that

747
00:40:14,800 --> 00:40:17,200
although we can access the power shield

748
00:40:17,200 --> 00:40:19,119
backhand directly

749
00:40:19,119 --> 00:40:22,000
we can't still in

750
00:40:22,000 --> 00:40:24,720
interact with it because we are the

751
00:40:24,720 --> 00:40:26,079
system

752
00:40:26,079 --> 00:40:29,040
we will fail the business logic

753
00:40:29,040 --> 00:40:32,319
since this normal box for the system

754
00:40:32,319 --> 00:40:34,800
user

755
00:40:34,800 --> 00:40:38,880
we also can forge our identity by the x

756
00:40:38,880 --> 00:40:42,319
common access token

757
00:40:42,319 --> 00:40:46,319
due to the black list in the front end

758
00:40:46,319 --> 00:40:48,800
so what should i do

759
00:40:48,800 --> 00:40:51,520
we dive into the powershell server

760
00:40:51,520 --> 00:40:54,800
implementation and find a piece of code

761
00:40:54,800 --> 00:40:57,520
that extracts the access token from the

762
00:40:57,520 --> 00:41:00,160
url

763
00:41:01,040 --> 00:41:03,839
the code is sitting after the is backend

764
00:41:03,839 --> 00:41:05,599
authentication

765
00:41:05,599 --> 00:41:08,079
and before the rehydration module it

766
00:41:08,079 --> 00:41:10,160
checks if there is no

767
00:41:10,160 --> 00:41:13,520
if there is no excellent access token

768
00:41:13,520 --> 00:41:16,720
the code will call out another measure

769
00:41:16,720 --> 00:41:21,720
to get the access token from url

770
00:41:22,160 --> 00:41:25,839
the common access token from url is a

771
00:41:25,839 --> 00:41:29,319
short message and retrieves the value of

772
00:41:29,319 --> 00:41:31,040
xrps

773
00:41:31,040 --> 00:41:34,560
clt from current string and then

774
00:41:34,560 --> 00:41:39,440
distributes it back to the access token

775
00:41:40,560 --> 00:41:43,920
as of now we have an elevation of

776
00:41:43,920 --> 00:41:46,640
primary because we can access the

777
00:41:46,640 --> 00:41:48,400
powershell backend

778
00:41:48,400 --> 00:41:52,720
and specify the access token directly

779
00:41:52,720 --> 00:41:55,599
the intention of this operation is to be

780
00:41:55,599 --> 00:41:58,960
a quick proxy for internal exchange

781
00:41:58,960 --> 00:42:00,839
powershell

782
00:42:00,839 --> 00:42:04,319
communication by abusing this feature

783
00:42:04,319 --> 00:42:08,560
we can impress that as any user

784
00:42:08,560 --> 00:42:12,640
but here we use this eop to downgrade

785
00:42:12,640 --> 00:42:16,160
ourselves from the system user result

786
00:42:16,160 --> 00:42:17,359
mailbox

787
00:42:17,359 --> 00:42:20,960
to exchange admin

788
00:42:21,920 --> 00:42:25,200
so i can now ask you the arbitrary power

789
00:42:25,200 --> 00:42:28,000
share command as admin

790
00:42:28,000 --> 00:42:31,240
and then

791
00:42:31,440 --> 00:42:34,400
the last piece of the puzzle is to find

792
00:42:34,400 --> 00:42:38,000
a post-house rce to trend everything

793
00:42:38,000 --> 00:42:39,920
together

794
00:42:39,920 --> 00:42:42,640
because we are the enemy and there are

795
00:42:42,640 --> 00:42:46,079
hundreds of exchange published comments

796
00:42:46,079 --> 00:42:48,400
out here

797
00:42:48,400 --> 00:42:52,480
it's easy to find a postal spot

798
00:42:52,480 --> 00:42:56,319
we abuse the command new mailbox export

799
00:42:56,319 --> 00:43:00,880
request to export a user's mailbox into

800
00:43:00,880 --> 00:43:05,359
the webloot to be our web shield

801
00:43:06,480 --> 00:43:09,680
so let's check everything together

802
00:43:09,680 --> 00:43:13,440
we first deliver our encoded web show to

803
00:43:13,440 --> 00:43:16,000
the target mailbox

804
00:43:16,000 --> 00:43:19,359
and we then launch a windows powershell

805
00:43:19,359 --> 00:43:22,319
client to connect to our proxies proxy

806
00:43:22,319 --> 00:43:24,000
server

807
00:43:24,000 --> 00:43:27,280
we use a proxy server because we have to

808
00:43:27,280 --> 00:43:31,040
modify the wing rm protocol to rewrite

809
00:43:31,040 --> 00:43:34,319
the path lead to the vulnerable auto

810
00:43:34,319 --> 00:43:36,240
discovery handler

811
00:43:36,240 --> 00:43:38,839
which will invest in

812
00:43:38,839 --> 00:43:41,520
eventually trigger the past confusion

813
00:43:41,520 --> 00:43:42,720
bug

814
00:43:42,720 --> 00:43:45,200
and add the access token to the current

815
00:43:45,200 --> 00:43:47,280
stream

816
00:43:47,280 --> 00:43:50,480
once the session has been established

817
00:43:50,480 --> 00:43:54,160
we can ask you the powershot command to

818
00:43:54,160 --> 00:43:55,920
grant ourselves

819
00:43:55,920 --> 00:43:57,040
the mail

820
00:43:57,040 --> 00:44:00,319
the mailbox export law and involve the

821
00:44:00,319 --> 00:44:03,119
mailbox exploiting

822
00:44:03,119 --> 00:44:07,319
and enjoy the show

823
00:44:09,359 --> 00:44:12,240
okay the demonstration but i think the

824
00:44:12,240 --> 00:44:13,359
time is a

825
00:44:13,359 --> 00:44:15,359
little bit

826
00:44:15,359 --> 00:44:20,598
straight so we also skip it today

827
00:44:22,720 --> 00:44:25,200
okay the last let's talk about

828
00:44:25,200 --> 00:44:28,000
mitigations

829
00:44:28,560 --> 00:44:31,520
since it's an architectural problem it's

830
00:44:31,520 --> 00:44:33,440
hard to meet

831
00:44:33,440 --> 00:44:36,079
it's hard to make get a text service

832
00:44:36,079 --> 00:44:37,359
with

833
00:44:37,359 --> 00:44:40,079
with with one single action

834
00:44:40,079 --> 00:44:42,400
all you can do is keep your exchange

835
00:44:42,400 --> 00:44:46,000
server up today and with the support of

836
00:44:46,000 --> 00:44:50,720
the acl or firewall to not externally

837
00:44:50,720 --> 00:44:54,319
facing to the internet

838
00:44:54,960 --> 00:44:57,680
microsoft has enhanced the cls

839
00:44:57,680 --> 00:45:00,400
architecture in april

840
00:45:00,400 --> 00:45:03,040
the authentication part of this attack

841
00:45:03,040 --> 00:45:07,200
service has been reduced in this patch

842
00:45:07,200 --> 00:45:10,640
so if you are lazy please update to the

843
00:45:10,640 --> 00:45:14,400
outro patch at least

844
00:45:16,240 --> 00:45:18,880
and if you are super lazy maybe you can

845
00:45:18,880 --> 00:45:23,839
give a shot at the office 365.

846
00:45:23,839 --> 00:45:26,720
it's kidding yeah

847
00:45:26,720 --> 00:45:29,920
okay this is the end of my presentation

848
00:45:29,920 --> 00:45:33,119
if you have any questions or want to

849
00:45:33,119 --> 00:45:36,079
see the demo with the skip today

850
00:45:36,079 --> 00:45:38,640
here's my contact information and blog

851
00:45:38,640 --> 00:45:40,960
you can visit it

852
00:45:40,960 --> 00:45:46,280
thank you again for being here thanks

853
00:45:57,599 --> 00:46:00,319
foreign

