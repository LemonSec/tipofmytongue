1
00:00:21,920 --> 00:00:24,400
hello everyone welcome to our talk this

2
00:00:24,400 --> 00:00:27,840
is not as not as secure i'm todd william

3
00:00:27,840 --> 00:00:30,080
from tx1 networks

4
00:00:30,080 --> 00:00:32,079
also we have shelley quo from zuso

5
00:00:32,079 --> 00:00:34,719
generation

6
00:00:35,200 --> 00:00:36,880
first we will go through the background

7
00:00:36,880 --> 00:00:39,680
of our research

8
00:00:40,399 --> 00:00:42,000
our research

9
00:00:42,000 --> 00:00:44,559
is regarding recent ransomware attacks

10
00:00:44,559 --> 00:00:47,120
against qnet-nas devices

11
00:00:47,120 --> 00:00:49,280
qnap is a major player in the field of

12
00:00:49,280 --> 00:00:51,600
network attached storage

13
00:00:51,600 --> 00:00:53,280
but we have seen lots of attacks

14
00:00:53,280 --> 00:00:55,840
targeted against qnap

15
00:00:55,840 --> 00:00:58,320
so it can probably mean that either

16
00:00:58,320 --> 00:01:00,399
attack against qnap devices are very

17
00:01:00,399 --> 00:01:02,960
profitable or internet devices has a

18
00:01:02,960 --> 00:01:06,879
great amount of attack surfaces

19
00:01:09,040 --> 00:01:11,360
while this should be treated seriously

20
00:01:11,360 --> 00:01:12,720
we believe

21
00:01:12,720 --> 00:01:14,560
nasa devices are usually filled with

22
00:01:14,560 --> 00:01:16,159
precious data

23
00:01:16,159 --> 00:01:17,200
and

24
00:01:17,200 --> 00:01:20,479
they are usually not closely guarded

25
00:01:20,479 --> 00:01:22,159
in most cases they are treated as a

26
00:01:22,159 --> 00:01:23,920
black box being set up by it

27
00:01:23,920 --> 00:01:27,119
professionals in enterprise or by end

28
00:01:27,119 --> 00:01:31,439
users and run in your internet

29
00:01:33,200 --> 00:01:35,600
these devices are usually close to some

30
00:01:35,600 --> 00:01:37,840
interesting segments

31
00:01:37,840 --> 00:01:40,960
for example inside your local network

32
00:01:40,960 --> 00:01:43,280
thus they can be used as a foothold or

33
00:01:43,280 --> 00:01:45,920
relay for another attacks because it's

34
00:01:45,920 --> 00:01:49,280
natural for nas devices to be set up

35
00:01:49,280 --> 00:01:53,960
through an dbnz or internal

36
00:01:55,920 --> 00:01:57,360
we're interested

37
00:01:57,360 --> 00:02:00,880
in a recent attack called q locker

38
00:02:00,880 --> 00:02:02,880
something special about it

39
00:02:02,880 --> 00:02:05,759
one is after our investigation into q

40
00:02:05,759 --> 00:02:07,920
locker we found our own vulnerability

41
00:02:07,920 --> 00:02:09,520
very quickly

42
00:02:09,520 --> 00:02:11,599
in the component effective

43
00:02:11,599 --> 00:02:14,000
by q locker

44
00:02:14,000 --> 00:02:16,400
this suggests that the vector component

45
00:02:16,400 --> 00:02:20,000
might still be very unsafe

46
00:02:20,239 --> 00:02:22,080
the queue localizer will express quite

47
00:02:22,080 --> 00:02:24,160
fast and it operates differently like

48
00:02:24,160 --> 00:02:27,120
others it uses a shotgun approach

49
00:02:27,120 --> 00:02:29,200
it asks for a little resin and heat a

50
00:02:29,200 --> 00:02:32,640
big deep amount of devices

51
00:02:32,640 --> 00:02:34,959
plus we haven't looked into nas devices

52
00:02:34,959 --> 00:02:39,200
before it can be a good time to do so

53
00:02:40,319 --> 00:02:41,760
we will go through what we call

54
00:02:41,760 --> 00:02:45,679
vulnerability archaeology

55
00:02:48,480 --> 00:02:50,879
first we are met with this qnap's own

56
00:02:50,879 --> 00:02:52,720
security advisory

57
00:02:52,720 --> 00:02:55,200
in this advisory it states the version

58
00:02:55,200 --> 00:02:58,480
number affected by q locker ransomware

59
00:02:58,480 --> 00:03:01,200
and also from this advisory we know the

60
00:03:01,200 --> 00:03:03,519
name of a reservoir node and how it

61
00:03:03,519 --> 00:03:06,560
encrypts the files

62
00:03:08,480 --> 00:03:10,800
and looking further into social network

63
00:03:10,800 --> 00:03:12,879
here are some claims from qnap this is

64
00:03:12,879 --> 00:03:14,800
posted on their facebook page written in

65
00:03:14,800 --> 00:03:16,959
taiwanese mandarin this is a rough

66
00:03:16,959 --> 00:03:18,879
translation

67
00:03:18,879 --> 00:03:20,959
qnap claim that is not a hardcore

68
00:03:20,959 --> 00:03:23,200
defector used by q locker

69
00:03:23,200 --> 00:03:25,120
and they target then they are targeting

70
00:03:25,120 --> 00:03:28,000
hps free

71
00:03:30,720 --> 00:03:32,799
but to validate qnsk

72
00:03:32,799 --> 00:03:36,159
we must dig into their older versions

73
00:03:36,159 --> 00:03:38,080
here's a project on github which allows

74
00:03:38,080 --> 00:03:41,360
you to extract qnap update packages

75
00:03:41,360 --> 00:03:43,519
and if you don't happen to have an old

76
00:03:43,519 --> 00:03:45,360
qnap package

77
00:03:45,360 --> 00:03:48,400
ready you can make one yourself

78
00:03:48,400 --> 00:03:50,879
you can download it from qnf's own cdn

79
00:03:50,879 --> 00:03:52,640
by changing the version number in the

80
00:03:52,640 --> 00:03:53,680
url

81
00:03:53,680 --> 00:03:56,480
but be aware that qnap will remove older

82
00:03:56,480 --> 00:03:58,319
versions or old

83
00:03:58,319 --> 00:04:01,280
vulnerable versions so you have to make

84
00:04:01,280 --> 00:04:04,480
backups very often

85
00:04:07,439 --> 00:04:09,360
then we can try to tell what is fixed by

86
00:04:09,360 --> 00:04:11,280
qnap

87
00:04:11,280 --> 00:04:14,239
first we can see what's stated in their

88
00:04:14,239 --> 00:04:16,720
change node is one they have fixed a

89
00:04:16,720 --> 00:04:19,199
credential vulnerability two they fix

90
00:04:19,199 --> 00:04:22,240
two command injection vulnerabilities

91
00:04:22,240 --> 00:04:23,919
so we can try to tell the direction we

92
00:04:23,919 --> 00:04:25,680
need to login by looking at the patch

93
00:04:25,680 --> 00:04:26,800
nodes

94
00:04:26,800 --> 00:04:28,800
once we have extracted the package we

95
00:04:28,800 --> 00:04:31,440
can use div on two versions

96
00:04:31,440 --> 00:04:34,240
and because the hbs3 is written in

97
00:04:34,240 --> 00:04:38,639
python it is trivial to do a div on

98
00:04:40,479 --> 00:04:42,720
so we came up with some very interesting

99
00:04:42,720 --> 00:04:43,759
findings

100
00:04:43,759 --> 00:04:45,520
by searching through text without

101
00:04:45,520 --> 00:04:47,600
mentions of the vectors id

102
00:04:47,600 --> 00:04:50,320
sid is roughly an access token in qnap's

103
00:04:50,320 --> 00:04:51,680
language

104
00:04:51,680 --> 00:04:53,199
this is quite weird because this

105
00:04:53,199 --> 00:04:55,840
contradicts with connect's claim

106
00:04:55,840 --> 00:04:58,240
about no back doors but we're seeing

107
00:04:58,240 --> 00:05:02,000
something related to using backdoor xib

108
00:05:02,000 --> 00:05:04,479
and also inside the updates brief it

109
00:05:04,479 --> 00:05:06,720
mentions about removing the entire cgi

110
00:05:06,720 --> 00:05:08,560
path

111
00:05:08,560 --> 00:05:09,440
so

112
00:05:09,440 --> 00:05:12,160
it must mean that something very wrong

113
00:05:12,160 --> 00:05:16,320
is going up with the cgi

114
00:05:16,320 --> 00:05:18,560
we did investigate further into this but

115
00:05:18,560 --> 00:05:22,320
it's better for surely to elaborate

116
00:05:22,320 --> 00:05:27,199
the lists are exploited by q locker

117
00:05:30,080 --> 00:05:32,560
nq nav has made some mitigation inside

118
00:05:32,560 --> 00:05:35,360
the component called more remover

119
00:05:35,360 --> 00:05:38,479
according to bleeping computer they have

120
00:05:38,479 --> 00:05:41,039
changed 7-zip to some script which will

121
00:05:41,039 --> 00:05:44,240
log the execution command line to some

122
00:05:44,240 --> 00:05:45,520
lock files

123
00:05:45,520 --> 00:05:48,240
and block backlash some python files via

124
00:05:48,240 --> 00:05:50,000
file name

125
00:05:50,000 --> 00:05:52,400
so maybe qnap is assuming everyone using

126
00:05:52,400 --> 00:05:55,840
7-zip is qlogger

127
00:05:58,160 --> 00:06:00,400
so at this point without any public

128
00:06:00,400 --> 00:06:02,720
disclosure and write-ups we would we

129
00:06:02,720 --> 00:06:05,199
know one queue locker is using something

130
00:06:05,199 --> 00:06:07,680
related to what is removed

131
00:06:07,680 --> 00:06:10,800
two qlokker uses 7zip to do something

132
00:06:10,800 --> 00:06:14,720
very bad such as encrypting your files

133
00:06:14,720 --> 00:06:17,280
so we came up with a yara rule

134
00:06:17,280 --> 00:06:19,360
we found our second stage payload we

135
00:06:19,360 --> 00:06:24,479
found the url by looking into google

136
00:06:24,479 --> 00:06:28,159
for its ransom domain

137
00:06:29,039 --> 00:06:31,520
we found the second stage payload it

138
00:06:31,520 --> 00:06:34,720
tries to encrypt the disk via

139
00:06:34,720 --> 00:06:38,080
embedded rsa public key

140
00:06:38,080 --> 00:06:39,840
but we still don't know what is the

141
00:06:39,840 --> 00:06:42,479
exact initial vector

142
00:06:42,479 --> 00:06:43,919
because the operator has stopped

143
00:06:43,919 --> 00:06:45,759
rendering new devices by the time we

144
00:06:45,759 --> 00:06:47,840
have started the research so we did not

145
00:06:47,840 --> 00:06:52,719
catch any intrusion attempts by honeypot

146
00:06:55,440 --> 00:07:00,240
so we'll try to break hps3 again

147
00:07:00,800 --> 00:07:05,599
so what is hps3 hps3 is a plugin to be

148
00:07:05,599 --> 00:07:08,160
run on qnap nas it will enable syncing

149
00:07:08,160 --> 00:07:11,520
between local nas and cloud storage or

150
00:07:11,520 --> 00:07:12,800
remote nuts

151
00:07:12,800 --> 00:07:16,240
it uses a client server architecture

152
00:07:16,240 --> 00:07:19,280
the server part is run by wsgi called r2

153
00:07:19,280 --> 00:07:21,919
server and the client side there's a set

154
00:07:21,919 --> 00:07:25,039
of scripts called rr2 client

155
00:07:25,039 --> 00:07:27,680
you can feel free to play with r2 client

156
00:07:27,680 --> 00:07:30,080
it has some wonderful documentations and

157
00:07:30,080 --> 00:07:33,599
a very helpful command line

158
00:07:35,360 --> 00:07:38,479
hbs3 on the server side

159
00:07:38,479 --> 00:07:40,720
there is a huge handler handling

160
00:07:40,720 --> 00:07:42,400
numerous commands

161
00:07:42,400 --> 00:07:46,080
but something caught our eye

162
00:07:46,080 --> 00:07:48,319
this instantly took our attention why

163
00:07:48,319 --> 00:07:50,000
would locking and other commands

164
00:07:50,000 --> 00:07:53,199
implemented separately in the same layer

165
00:07:53,199 --> 00:07:55,440
this seems weird so we take a deeper

166
00:07:55,440 --> 00:07:58,440
look

167
00:07:58,639 --> 00:08:00,479
when you're trying to run and custom

168
00:08:00,479 --> 00:08:03,199
plugin in your hbs3 server it will try

169
00:08:03,199 --> 00:08:05,199
to import the module directory and run

170
00:08:05,199 --> 00:08:07,360
it

171
00:08:08,080 --> 00:08:11,440
then we locate the folder of set plugins

172
00:08:11,440 --> 00:08:15,759
and we found some interesting commands

173
00:08:17,360 --> 00:08:18,319
however

174
00:08:18,319 --> 00:08:20,319
the commands doesn't even check for any

175
00:08:20,319 --> 00:08:22,160
authentication

176
00:08:22,160 --> 00:08:24,960
in this branch of hbs3

177
00:08:24,960 --> 00:08:28,000
authentication has to implement

178
00:08:28,000 --> 00:08:30,000
per plugin

179
00:08:30,000 --> 00:08:32,320
and in the case of list handler it does

180
00:08:32,320 --> 00:08:34,799
not even check for authorization so the

181
00:08:34,799 --> 00:08:38,080
server will accept and run any commands

182
00:08:38,080 --> 00:08:41,839
sent over internet by strangers

183
00:08:43,440 --> 00:08:45,600
now we will demo how to overtake a qnap

184
00:08:45,600 --> 00:08:49,640
nas with set vulnerability

185
00:08:54,640 --> 00:08:57,120
hello in this demo we'll show you our

186
00:08:57,120 --> 00:08:59,040
proof of what we can do on the craft

187
00:08:59,040 --> 00:09:01,360
nuts

188
00:09:02,560 --> 00:09:04,720
as you can see the nas is running a very

189
00:09:04,720 --> 00:09:06,959
old version of qts but that doesn't

190
00:09:06,959 --> 00:09:10,560
matter the problem lies within hbs3

191
00:09:10,560 --> 00:09:14,160
the hps3 version we have used

192
00:09:14,160 --> 00:09:16,959
well let's go to fps3

193
00:09:16,959 --> 00:09:20,279
is 3.0.210412.

194
00:09:21,200 --> 00:09:23,200
we have reported the issue to connect

195
00:09:23,200 --> 00:09:25,040
and let us fix it very quickly in the

196
00:09:25,040 --> 00:09:27,519
next version

197
00:09:27,519 --> 00:09:29,120
as for our demo we will show you

198
00:09:29,120 --> 00:09:30,720
something interesting

199
00:09:30,720 --> 00:09:32,399
let's try writing something else into

200
00:09:32,399 --> 00:09:34,240
the file system

201
00:09:34,240 --> 00:09:37,839
let's try running our plc

202
00:09:42,240 --> 00:09:43,920
well seems like we have succeeded in

203
00:09:43,920 --> 00:09:46,320
running the plc let's go back to nuts

204
00:09:46,320 --> 00:09:49,480
and check

205
00:09:52,880 --> 00:09:55,279
our poc has succeeded in creating a file

206
00:09:55,279 --> 00:09:57,200
in a temp directory

207
00:09:57,200 --> 00:09:59,680
but we think it's it's not enough to

208
00:09:59,680 --> 00:10:01,440
alert the owner of these vulnerable

209
00:10:01,440 --> 00:10:04,160
devices so we decided to add more noise

210
00:10:04,160 --> 00:10:06,399
into our poc

211
00:10:06,399 --> 00:10:09,200
well let's go to our front page of the

212
00:10:09,200 --> 00:10:11,519
nas

213
00:10:13,920 --> 00:10:16,399
as you can see anyone visiting this nas

214
00:10:16,399 --> 00:10:19,600
will instantly be rig rolled

215
00:10:19,600 --> 00:10:22,079
thank you

216
00:10:28,880 --> 00:10:30,959
so back from our demo we have some

217
00:10:30,959 --> 00:10:33,839
conclusion

218
00:10:33,920 --> 00:10:35,120
there is some

219
00:10:35,120 --> 00:10:36,800
there's some device fragmentation

220
00:10:36,800 --> 00:10:37,760
problem

221
00:10:37,760 --> 00:10:40,800
on the qnap side for example on hbs3

222
00:10:40,800 --> 00:10:42,880
there are two code branches one is three

223
00:10:42,880 --> 00:10:47,839
point x one is 16.x and 17 port x

224
00:10:47,839 --> 00:10:50,560
for free point x is used by qts 4.3

225
00:10:50,560 --> 00:10:52,240
which is an older version but still

226
00:10:52,240 --> 00:10:54,959
maintained version of the qts

227
00:10:54,959 --> 00:10:58,399
and for 16 and older and newer is being

228
00:10:58,399 --> 00:11:01,040
used by qts 4.5 which is a

229
00:11:01,040 --> 00:11:03,680
mainstream version by now

230
00:11:03,680 --> 00:11:06,320
they are both supported by qnap

231
00:11:06,320 --> 00:11:09,040
and the architecture of 3 and 16 are

232
00:11:09,040 --> 00:11:10,240
quite different

233
00:11:10,240 --> 00:11:12,720
in 16 authorization is checked like a

234
00:11:12,720 --> 00:11:15,519
middleware and free in free

235
00:11:15,519 --> 00:11:20,000
authorization is checked per plugin

236
00:11:20,079 --> 00:11:23,120
thus our vulnerability only exists in

237
00:11:23,120 --> 00:11:26,079
free branch of the plugin

238
00:11:26,079 --> 00:11:28,160
now we will hand out to shirley she'll

239
00:11:28,160 --> 00:11:31,040
tell stories on how broken hbs3 and qnap

240
00:11:31,040 --> 00:11:33,279
is

241
00:11:36,160 --> 00:11:38,640
thanks for thank you introduction

242
00:11:38,640 --> 00:11:41,519
my name is shirley and i'm very happy to

243
00:11:41,519 --> 00:11:44,480
represent our work at cobu

244
00:11:44,480 --> 00:11:47,040
in this presentation i want to explain

245
00:11:47,040 --> 00:11:50,240
why we started the security of kills and

246
00:11:50,240 --> 00:11:53,920
not products and what we found

247
00:11:53,920 --> 00:11:57,040
but first let me introduce myself

248
00:11:57,040 --> 00:12:00,079
my company is called zuso russo is an

249
00:12:00,079 --> 00:12:03,040
information security company in taiwan

250
00:12:03,040 --> 00:12:05,839
we are conduct penetration testing and

251
00:12:05,839 --> 00:12:07,760
rating assessment

252
00:12:07,760 --> 00:12:09,920
while conducting rating assessment

253
00:12:09,920 --> 00:12:13,440
service for a customer we found that the

254
00:12:13,440 --> 00:12:17,600
customer was using the qnap nas system

255
00:12:17,600 --> 00:12:20,200
for this reason we started

256
00:12:20,200 --> 00:12:24,079
investigating not devices and then we

257
00:12:24,079 --> 00:12:28,560
found qnab and the qsan cves

258
00:12:28,560 --> 00:12:31,760
in the next of this presentation i will

259
00:12:31,760 --> 00:12:34,639
explain how we could find these

260
00:12:34,639 --> 00:12:38,760
two high security vulnerabilities

261
00:12:39,360 --> 00:12:42,399
first i want to talk about the

262
00:12:42,399 --> 00:12:45,120
past traversal vulnerability

263
00:12:45,120 --> 00:12:48,000
q names now services run their own

264
00:12:48,000 --> 00:12:51,519
operation system nand qts

265
00:12:51,519 --> 00:12:54,800
this vulnerability can modify an any

266
00:12:54,800 --> 00:12:58,000
file and impact the system

267
00:12:58,000 --> 00:13:01,440
integrity in some qts versions

268
00:13:01,440 --> 00:13:05,200
the cpss score is airpoint ad that means

269
00:13:05,200 --> 00:13:09,120
it is a high security risk

270
00:13:09,760 --> 00:13:13,120
when we started during this research we

271
00:13:13,120 --> 00:13:16,240
did not have any real nos device

272
00:13:16,240 --> 00:13:19,120
however we found out there is a live

273
00:13:19,120 --> 00:13:23,279
version online that can be used for free

274
00:13:23,279 --> 00:13:26,560
this service gives you access to older

275
00:13:26,560 --> 00:13:28,079
qnap

276
00:13:28,079 --> 00:13:32,240
services and it also includes the test

277
00:13:32,240 --> 00:13:33,760
applications

278
00:13:33,760 --> 00:13:36,880
i think this platform is for the people

279
00:13:36,880 --> 00:13:40,560
who they want to try out qnet products

280
00:13:40,560 --> 00:13:43,040
before buying them

281
00:13:43,040 --> 00:13:46,079
when you launch this online service you

282
00:13:46,079 --> 00:13:50,560
will get a demo link an account and a

283
00:13:50,560 --> 00:13:52,240
password

284
00:13:52,240 --> 00:13:54,880
this platform has a time limit of two

285
00:13:54,880 --> 00:13:55,760
hours

286
00:13:55,760 --> 00:13:58,000
but it's not important

287
00:13:58,000 --> 00:14:01,360
since we could launch another service

288
00:14:01,360 --> 00:14:04,880
after each time out

289
00:14:05,120 --> 00:14:06,000
okay

290
00:14:06,000 --> 00:14:08,959
and this link shows on the main page

291
00:14:08,959 --> 00:14:12,240
from this interface we could add new

292
00:14:12,240 --> 00:14:15,199
accounts and we also could check the

293
00:14:15,199 --> 00:14:16,720
control panel

294
00:14:16,720 --> 00:14:19,040
and set up all the

295
00:14:19,040 --> 00:14:23,920
available services such as ftp ssh

296
00:14:23,920 --> 00:14:27,519
we decided to use the ssl service

297
00:14:27,519 --> 00:14:30,480
because it can be easily used

298
00:14:30,480 --> 00:14:33,760
to get all the detail of the system

299
00:14:33,760 --> 00:14:36,959
using a terminal

300
00:14:37,519 --> 00:14:41,279
we connected to the live demo service

301
00:14:41,279 --> 00:14:44,800
and we got an admin account login

302
00:14:44,800 --> 00:14:47,360
using this terminal we could quickly

303
00:14:47,360 --> 00:14:50,399
read the system configurations and

304
00:14:50,399 --> 00:14:53,920
reverse engineering running programs

305
00:14:53,920 --> 00:14:57,279
but unfortunately right now you cannot

306
00:14:57,279 --> 00:15:00,800
use this ssh service anymore because

307
00:15:00,800 --> 00:15:04,000
qnap released patched and limited some

308
00:15:04,000 --> 00:15:07,120
high privileged actions on the live demo

309
00:15:07,120 --> 00:15:08,399
platform

310
00:15:08,399 --> 00:15:11,920
but i will still describe how it worked

311
00:15:11,920 --> 00:15:15,040
and to explain the process we use to

312
00:15:15,040 --> 00:15:18,160
find the vulnerability

313
00:15:18,800 --> 00:15:21,680
at first we spend a lot of time to check

314
00:15:21,680 --> 00:15:24,639
every application functionality and

315
00:15:24,639 --> 00:15:28,560
their package and then we found an

316
00:15:28,560 --> 00:15:31,600
interesting application

317
00:15:31,600 --> 00:15:34,079
in a slight picture you can see a text

318
00:15:34,079 --> 00:15:35,839
editor application

319
00:15:35,839 --> 00:15:40,399
it can read and or edit a text file

320
00:15:40,399 --> 00:15:44,079
upload filer user to the nas

321
00:15:44,079 --> 00:15:47,440
of course if you upload a file using the

322
00:15:47,440 --> 00:15:49,120
log permission account

323
00:15:49,120 --> 00:15:51,759
the file will be saved in their own

324
00:15:51,759 --> 00:15:53,120
folder

325
00:15:53,120 --> 00:15:55,759
it is not possible to change permissions

326
00:15:55,759 --> 00:15:59,920
if you are a lower permission user

327
00:16:00,560 --> 00:16:05,360
then we uploaded a file and used magneto

328
00:16:05,360 --> 00:16:07,120
to

329
00:16:07,120 --> 00:16:10,160
intercept the package

330
00:16:10,160 --> 00:16:12,720
you can see our captured package in this

331
00:16:12,720 --> 00:16:14,240
in a slide

332
00:16:14,240 --> 00:16:17,600
the editor use a special cgi command

333
00:16:17,600 --> 00:16:20,240
when a file is uploaded

334
00:16:20,240 --> 00:16:23,040
let me introduce the

335
00:16:23,040 --> 00:16:28,240
parameters used by this cgi command

336
00:16:29,360 --> 00:16:31,680
you could see the parameter

337
00:16:31,680 --> 00:16:33,279
named srd

338
00:16:33,279 --> 00:16:36,720
it is like the php station token it

339
00:16:36,720 --> 00:16:39,360
allows the service to identify user

340
00:16:39,360 --> 00:16:40,560
rules

341
00:16:40,560 --> 00:16:43,279
we don't know the reason why they send

342
00:16:43,279 --> 00:16:46,639
srd three times in the send request

343
00:16:46,639 --> 00:16:50,240
but we found that the srd has always the

344
00:16:50,240 --> 00:16:52,399
same length whether the account

345
00:16:52,399 --> 00:16:56,160
permissions are high or low

346
00:16:57,279 --> 00:17:02,079
okay the next parameter is file content

347
00:17:02,079 --> 00:17:05,679
it contains the content of the text file

348
00:17:05,679 --> 00:17:08,799
including invest 64.

349
00:17:08,799 --> 00:17:11,359
it's worth a mention that

350
00:17:11,359 --> 00:17:14,240
the upload file type is not limited

351
00:17:14,240 --> 00:17:16,640
limited to text

352
00:17:16,640 --> 00:17:19,119
we could also upload other file types

353
00:17:19,119 --> 00:17:22,239
such as php

354
00:17:22,880 --> 00:17:26,000
the next parameter is file name to

355
00:17:26,000 --> 00:17:28,799
select this name when you upload a file

356
00:17:28,799 --> 00:17:32,559
the file saved the user's own folder

357
00:17:32,559 --> 00:17:35,039
do you remember what i said before

358
00:17:35,039 --> 00:17:37,520
if you upload the file with admin

359
00:17:37,520 --> 00:17:40,559
account the file will be located in the

360
00:17:40,559 --> 00:17:42,640
user admin folder

361
00:17:42,640 --> 00:17:45,760
using administration permissions

362
00:17:45,760 --> 00:17:48,000
you cannot change the permission if you

363
00:17:48,000 --> 00:17:51,120
are a low permission user

364
00:17:51,120 --> 00:17:54,160
it is worth checking if we could add a

365
00:17:54,160 --> 00:17:57,600
data slash in front of the file name

366
00:17:57,600 --> 00:17:58,799
and

367
00:17:58,799 --> 00:18:01,840
let me check the result

368
00:18:02,720 --> 00:18:05,840
look we successfully upload a file in

369
00:18:05,840 --> 00:18:08,080
the system folder

370
00:18:08,080 --> 00:18:11,520
after this experience we are sure this

371
00:18:11,520 --> 00:18:15,039
upload cgi is affected by a test

372
00:18:15,039 --> 00:18:17,039
transfer vulnerability

373
00:18:17,039 --> 00:18:21,440
but what about a real nut service

374
00:18:22,640 --> 00:18:26,000
so we decided to buy a real nas device

375
00:18:26,000 --> 00:18:28,720
and check if this vulnerability was

376
00:18:28,720 --> 00:18:31,679
present in it

377
00:18:32,960 --> 00:18:35,760
as soon as we got the real device we are

378
00:18:35,760 --> 00:18:38,080
all excited to set up

379
00:18:38,080 --> 00:18:41,760
and repeat our plc attack

380
00:18:41,760 --> 00:18:44,799
but unfortunately we could not find the

381
00:18:44,799 --> 00:18:48,080
test editor application since it is not

382
00:18:48,080 --> 00:18:50,880
available by default in a real nas

383
00:18:50,880 --> 00:18:52,799
device

384
00:18:52,799 --> 00:18:54,880
this could mean that

385
00:18:54,880 --> 00:18:56,559
past travel

386
00:18:56,559 --> 00:18:59,280
could not be launched against a real

387
00:18:59,280 --> 00:19:00,559
server

388
00:19:00,559 --> 00:19:03,440
is it only available in the live demo

389
00:19:03,440 --> 00:19:05,360
version

390
00:19:05,360 --> 00:19:08,000
we still could install the

391
00:19:08,000 --> 00:19:10,559
test editor in the notes

392
00:19:10,559 --> 00:19:13,600
but it's not good situation for hackers

393
00:19:13,600 --> 00:19:17,600
because it requests the user to

394
00:19:17,600 --> 00:19:22,240
install the application manually

395
00:19:22,240 --> 00:19:25,120
even though we could not find the

396
00:19:25,120 --> 00:19:28,480
notepad application installed by default

397
00:19:28,480 --> 00:19:31,039
some team members still want to try the

398
00:19:31,039 --> 00:19:34,000
cgi payload

399
00:19:34,559 --> 00:19:37,760
okay some interesting thing happened

400
00:19:37,760 --> 00:19:39,600
even though the application is not

401
00:19:39,600 --> 00:19:43,679
installed the cgi endpoint still works

402
00:19:43,679 --> 00:19:48,559
so with though maybe qnap nas enables

403
00:19:48,559 --> 00:19:51,360
all the cgi employees even if the

404
00:19:51,360 --> 00:19:55,120
application is not installed

405
00:19:55,520 --> 00:19:58,799
we also try to upload the file using

406
00:19:58,799 --> 00:20:01,360
past travel vulnerability and

407
00:20:01,360 --> 00:20:04,559
using a load permission account user

408
00:20:04,559 --> 00:20:07,840
it still works

409
00:20:09,280 --> 00:20:11,919
as i said previously

410
00:20:11,919 --> 00:20:14,799
we can upload any file type including

411
00:20:14,799 --> 00:20:16,400
php

412
00:20:16,400 --> 00:20:19,840
by exporting this we could execute many

413
00:20:19,840 --> 00:20:24,320
high privileged comments in the end

414
00:20:24,320 --> 00:20:27,200
by the way i also want to say something

415
00:20:27,200 --> 00:20:29,760
about a special feature

416
00:20:29,760 --> 00:20:33,280
implicit by the cdr script

417
00:20:33,280 --> 00:20:35,919
sometimes people like to override the

418
00:20:35,919 --> 00:20:39,440
system config files instead of upload a

419
00:20:39,440 --> 00:20:42,320
file in a new location or just upload a

420
00:20:42,320 --> 00:20:44,159
new file

421
00:20:44,159 --> 00:20:47,520
but in this case we cannot directly

422
00:20:47,520 --> 00:20:49,840
override the file by the upload

423
00:20:49,840 --> 00:20:51,919
functionary

424
00:20:51,919 --> 00:20:54,400
about this i want to show another

425
00:20:54,400 --> 00:20:58,000
interesting parameter

426
00:20:59,440 --> 00:21:02,400
if you try to override a file the

427
00:21:02,400 --> 00:21:06,159
response will show you something wrong

428
00:21:06,159 --> 00:21:09,200
to override a file we need to know the

429
00:21:09,200 --> 00:21:12,400
last m type of the file we want to

430
00:21:12,400 --> 00:21:13,760
override

431
00:21:13,760 --> 00:21:15,039
and

432
00:21:15,039 --> 00:21:17,360
specify this time

433
00:21:17,360 --> 00:21:20,640
in the request content

434
00:21:20,640 --> 00:21:23,280
but how could we know the correct m type

435
00:21:23,280 --> 00:21:24,640
number

436
00:21:24,640 --> 00:21:27,679
the upload functionality responds with

437
00:21:27,679 --> 00:21:29,520
such a value

438
00:21:29,520 --> 00:21:31,600
but it only does

439
00:21:31,600 --> 00:21:35,760
this the first time a file is uploaded

440
00:21:35,760 --> 00:21:38,080
for this reason if you want to override

441
00:21:38,080 --> 00:21:41,520
the system file it is unlikely to get

442
00:21:41,520 --> 00:21:44,240
the file and time

443
00:21:44,240 --> 00:21:46,720
so we tried many different things and

444
00:21:46,720 --> 00:21:50,799
finally found a way to bypass this issue

445
00:21:50,799 --> 00:21:55,919
we just need to edit the m time to zero

446
00:21:55,919 --> 00:21:57,120
if

447
00:21:57,120 --> 00:22:00,320
if we set the m time to zero

448
00:22:00,320 --> 00:22:03,600
we can override any files without

449
00:22:03,600 --> 00:22:04,720
knowing

450
00:22:04,720 --> 00:22:07,679
its original m time

451
00:22:07,679 --> 00:22:10,400
don't ask me what's the reason of this i

452
00:22:10,400 --> 00:22:15,360
have i honestly don't have any idea

453
00:22:15,840 --> 00:22:18,240
okay let's summarize what we found about

454
00:22:18,240 --> 00:22:19,919
this vulnerability

455
00:22:19,919 --> 00:22:20,799
first

456
00:22:20,799 --> 00:22:23,840
the apache service is launched by high

457
00:22:23,840 --> 00:22:27,039
permissions otherwise the path traversal

458
00:22:27,039 --> 00:22:29,760
will not be able to write files in other

459
00:22:29,760 --> 00:22:31,360
locations

460
00:22:31,360 --> 00:22:34,880
second we can bypass the check under m

461
00:22:34,880 --> 00:22:38,559
time by setting it to 0.

462
00:22:38,559 --> 00:22:39,600
ok

463
00:22:39,600 --> 00:22:42,640
let's now talk about the second qnap

464
00:22:42,640 --> 00:22:45,360
vulnerability

465
00:22:46,640 --> 00:22:49,360
this vulnerability is well known since

466
00:22:49,360 --> 00:22:53,200
it is used by the krillok prison whale

467
00:22:53,200 --> 00:22:56,640
and the qnap published an article about

468
00:22:56,640 --> 00:22:59,440
the fact that q locker was using this

469
00:22:59,440 --> 00:23:02,559
vulnerability to encrypt the victim's

470
00:23:02,559 --> 00:23:04,320
files

471
00:23:04,320 --> 00:23:07,039
and this vulnerability allows remote

472
00:23:07,039 --> 00:23:10,480
attackers to log into a device

473
00:23:10,480 --> 00:23:14,480
the cvss score is 10 is the highest

474
00:23:14,480 --> 00:23:17,360
possible value

475
00:23:18,960 --> 00:23:22,159
if you followed the event about q locker

476
00:23:22,159 --> 00:23:25,840
you may already know this backdoor which

477
00:23:25,840 --> 00:23:28,960
is due to the magic password you can see

478
00:23:28,960 --> 00:23:31,039
on the slide

479
00:23:31,039 --> 00:23:33,360
and you could also find out

480
00:23:33,360 --> 00:23:36,400
is an id that means

481
00:23:36,400 --> 00:23:38,880
dream so so cool

482
00:23:38,880 --> 00:23:40,080
hbs

483
00:23:40,080 --> 00:23:41,520
management

484
00:23:41,520 --> 00:23:44,559
from the article on the website

485
00:23:44,559 --> 00:23:48,240
but i will not discuss the detail of

486
00:23:48,240 --> 00:23:51,360
this one vlc today what i won't discuss

487
00:23:51,360 --> 00:23:54,960
today is the process we followed to find

488
00:23:54,960 --> 00:23:56,799
this vulnerability

489
00:23:56,799 --> 00:23:59,600
maybe it could help someone else in

490
00:23:59,600 --> 00:24:02,640
writing the zero-day box in the other

491
00:24:02,640 --> 00:24:05,600
products

492
00:24:05,600 --> 00:24:06,400
okay

493
00:24:06,400 --> 00:24:09,039
in this case since we have the real nas

494
00:24:09,039 --> 00:24:10,080
device

495
00:24:10,080 --> 00:24:15,039
we can uh read all of its code easily if

496
00:24:15,039 --> 00:24:18,799
they didn't encode it and or applicate

497
00:24:18,799 --> 00:24:21,039
it

498
00:24:21,440 --> 00:24:22,960
the first time

499
00:24:22,960 --> 00:24:26,080
you use the nas the system will ask you

500
00:24:26,080 --> 00:24:29,200
to log in using a username and a

501
00:24:29,200 --> 00:24:31,679
password

502
00:24:31,679 --> 00:24:32,720
also

503
00:24:32,720 --> 00:24:36,159
we did make in the middle to

504
00:24:36,159 --> 00:24:39,039
intercept the network packets

505
00:24:39,039 --> 00:24:42,640
in this slide you can see that we found

506
00:24:42,640 --> 00:24:46,159
the request parameters

507
00:24:46,159 --> 00:24:49,600
the parameters are used to access a cgi

508
00:24:49,600 --> 00:24:52,640
program and outlooking

509
00:24:52,640 --> 00:24:56,000
maybe we could check if this cdr program

510
00:24:56,000 --> 00:24:57,039
has

511
00:24:57,039 --> 00:25:00,279
any vulnerability

512
00:25:00,880 --> 00:25:04,960
so uh we tried to read the soft code but

513
00:25:04,960 --> 00:25:08,159
also logincgi is uh compiled

514
00:25:08,159 --> 00:25:10,559
our team member of

515
00:25:10,559 --> 00:25:14,159
lazy and latina reverse it in that

516
00:25:14,159 --> 00:25:16,080
moment

517
00:25:16,080 --> 00:25:17,120
so

518
00:25:17,120 --> 00:25:18,559
try to do

519
00:25:18,559 --> 00:25:22,080
um in other ways

520
00:25:22,320 --> 00:25:25,440
yes we asked mr google

521
00:25:25,440 --> 00:25:28,640
we checked has anyone ever done research

522
00:25:28,640 --> 00:25:30,720
about this cgi program

523
00:25:30,720 --> 00:25:33,440
and we actually found someone that

524
00:25:33,440 --> 00:25:34,720
studied

525
00:25:34,720 --> 00:25:37,440
in the past so we decide

526
00:25:37,440 --> 00:25:41,760
give up uh analysis more of this cgi

527
00:25:41,760 --> 00:25:44,080
because we thought that other

528
00:25:44,080 --> 00:25:45,919
researchers had

529
00:25:45,919 --> 00:25:48,159
already found all the vulnerabilities

530
00:25:48,159 --> 00:25:50,000
about this

531
00:25:50,000 --> 00:25:51,919
so result uh

532
00:25:51,919 --> 00:25:53,840
it will be down

533
00:25:53,840 --> 00:25:57,679
infected if we check another cgi

534
00:25:57,679 --> 00:25:59,840
so we stop and size

535
00:25:59,840 --> 00:26:03,678
the also log in cgi

536
00:26:04,400 --> 00:26:07,840
we try to check every cdr file

537
00:26:07,840 --> 00:26:11,440
in the cgi cgi-bing pass

538
00:26:11,440 --> 00:26:12,720
looking for

539
00:26:12,720 --> 00:26:14,320
vulnerabilities

540
00:26:14,320 --> 00:26:17,760
in this step we spend a lot of time in

541
00:26:17,760 --> 00:26:19,360
reviewing code

542
00:26:19,360 --> 00:26:22,720
finally we found an interesting cgi in a

543
00:26:22,720 --> 00:26:26,080
folder code backup

544
00:26:27,279 --> 00:26:30,559
inside the backup folder there was a cdr

545
00:26:30,559 --> 00:26:33,120
file named hbs

546
00:26:33,120 --> 00:26:35,919
management.cgi

547
00:26:35,919 --> 00:26:38,880
this file links to other scripts in

548
00:26:38,880 --> 00:26:39,679
other

549
00:26:39,679 --> 00:26:42,720
shared folders so we started checking

550
00:26:42,720 --> 00:26:45,679
this script very carefully

551
00:26:45,679 --> 00:26:46,559
and

552
00:26:46,559 --> 00:26:49,120
let's start for review

553
00:26:49,120 --> 00:26:50,720
this slide shows

554
00:26:50,720 --> 00:26:53,039
the main function of

555
00:26:53,039 --> 00:26:54,240
this script

556
00:26:54,240 --> 00:26:55,279
which is

557
00:26:55,279 --> 00:26:58,400
written in python so we didn't need to

558
00:26:58,400 --> 00:27:00,000
reverse it

559
00:27:00,000 --> 00:27:01,279
the script

560
00:27:01,279 --> 00:27:03,360
checks cgi of

561
00:27:03,360 --> 00:27:06,360
paramount

562
00:27:06,559 --> 00:27:08,000
we continue

563
00:27:08,000 --> 00:27:09,919
our

564
00:27:09,919 --> 00:27:11,919
analysis by

565
00:27:11,919 --> 00:27:15,279
announcing the code of the function of

566
00:27:15,279 --> 00:27:18,080
run module

567
00:27:18,640 --> 00:27:21,760
and then we triggered the wrong merger

568
00:27:21,760 --> 00:27:25,039
and we found out that the script wants

569
00:27:25,039 --> 00:27:30,320
to verify the user's srd and

570
00:27:30,320 --> 00:27:32,720
what does the user want to do

571
00:27:32,720 --> 00:27:36,080
in next function so we continued tracing

572
00:27:36,080 --> 00:27:38,799
this function

573
00:27:39,360 --> 00:27:42,480
after following the script process

574
00:27:42,480 --> 00:27:44,799
we found some code that

575
00:27:44,799 --> 00:27:47,760
script executed when the cgi command is

576
00:27:47,760 --> 00:27:49,600
executed

577
00:27:49,600 --> 00:27:53,279
first it receives a package from a post

578
00:27:53,279 --> 00:27:55,279
request

579
00:27:55,279 --> 00:27:57,919
second it checks whether the content

580
00:27:57,919 --> 00:28:00,320
type is json

581
00:28:00,320 --> 00:28:03,360
finally this is there is a function

582
00:28:03,360 --> 00:28:05,679
called check sid

583
00:28:05,679 --> 00:28:09,039
checking the user srd from the post

584
00:28:09,039 --> 00:28:11,039
parameters

585
00:28:11,039 --> 00:28:15,360
okay by the way we appreciated that

586
00:28:15,360 --> 00:28:19,120
the comments in the code were very very

587
00:28:19,120 --> 00:28:22,240
clear it also helped us to understand

588
00:28:22,240 --> 00:28:26,720
how every function is executed

589
00:28:28,799 --> 00:28:32,640
so we checked the check sid function and

590
00:28:32,640 --> 00:28:37,279
we found that it has a spatial fixed sid

591
00:28:37,279 --> 00:28:41,200
and this sid is that sid we saw the

592
00:28:41,200 --> 00:28:44,919
article at first

593
00:28:45,039 --> 00:28:48,640
even though we got the magic as id we

594
00:28:48,640 --> 00:28:51,600
still need to get more information about

595
00:28:51,600 --> 00:28:52,720
the

596
00:28:52,720 --> 00:28:54,320
parameters

597
00:28:54,320 --> 00:28:57,200
we want to send the payload to this cgi

598
00:28:57,200 --> 00:28:58,799
page

599
00:28:58,799 --> 00:29:01,679
so we need to understand every element

600
00:29:01,679 --> 00:29:03,679
we need to send

601
00:29:03,679 --> 00:29:04,880
first

602
00:29:04,880 --> 00:29:07,919
of all we figure out that we need to set

603
00:29:07,919 --> 00:29:10,640
more environmental settings like the

604
00:29:10,640 --> 00:29:15,200
http map and the the content type

605
00:29:15,200 --> 00:29:17,760
then we focus on the process parameter

606
00:29:17,760 --> 00:29:20,000
we need to set

607
00:29:20,000 --> 00:29:22,559
in this picture you can see that

608
00:29:22,559 --> 00:29:27,039
this parameter includes x and srd

609
00:29:27,039 --> 00:29:31,679
but there is still an other parameter

610
00:29:32,720 --> 00:29:35,679
the process of tracing soft core is a

611
00:29:35,679 --> 00:29:38,159
little bit long long time

612
00:29:38,159 --> 00:29:41,520
finally we found the last one parameter

613
00:29:41,520 --> 00:29:44,960
and we also found out uh what code it be

614
00:29:44,960 --> 00:29:47,200
how could it be

615
00:29:47,200 --> 00:29:50,320
okay let me uh listing all parameters we

616
00:29:50,320 --> 00:29:53,200
need to use in the pillow

617
00:29:53,200 --> 00:29:55,840
we got the magic srd

618
00:29:55,840 --> 00:29:57,600
and the act

619
00:29:57,600 --> 00:30:00,000
and the last one parameter

620
00:30:00,000 --> 00:30:02,960
okay let's do it

621
00:30:03,120 --> 00:30:05,279
this picture shows everything we found

622
00:30:05,279 --> 00:30:08,240
from the soft call and the response

623
00:30:08,240 --> 00:30:11,279
shows the result we got from the server

624
00:30:11,279 --> 00:30:14,559
until now this is the process we used to

625
00:30:14,559 --> 00:30:17,678
find the vector

626
00:30:18,960 --> 00:30:20,159
and

627
00:30:20,159 --> 00:30:22,240
i would like to add some extra

628
00:30:22,240 --> 00:30:24,880
information about q larger

629
00:30:24,880 --> 00:30:28,399
our thing was also focused on enersize q

630
00:30:28,399 --> 00:30:32,159
locker situation while it was happening

631
00:30:32,159 --> 00:30:35,039
we did some research about this racing

632
00:30:35,039 --> 00:30:36,399
whale and

633
00:30:36,399 --> 00:30:40,000
computed statuses about the

634
00:30:40,000 --> 00:30:41,120
uh used

635
00:30:41,120 --> 00:30:42,960
bitcoin wallet

636
00:30:42,960 --> 00:30:46,559
we found that in total kill larker got

637
00:30:46,559 --> 00:30:49,440
8.5 8.4

638
00:30:49,440 --> 00:30:52,799
bitcoin until you know

639
00:30:52,799 --> 00:30:55,760
okay this is the left side let's lie

640
00:30:55,760 --> 00:30:58,320
about the q net vulnerability let's move

641
00:30:58,320 --> 00:31:01,600
to the next topic

642
00:31:02,559 --> 00:31:05,679
actually in starting non-security issues

643
00:31:05,679 --> 00:31:09,279
our team is not only focused on qnap

644
00:31:09,279 --> 00:31:12,240
in fact we also start the other nas

645
00:31:12,240 --> 00:31:15,679
company like synology and the qsyn

646
00:31:15,679 --> 00:31:17,760
because we thought we should also do

647
00:31:17,760 --> 00:31:19,840
research about other different

648
00:31:19,840 --> 00:31:22,559
enterprise nas services

649
00:31:22,559 --> 00:31:25,360
in the next of this presentation i will

650
00:31:25,360 --> 00:31:29,918
explain what we found in queues and not

651
00:31:30,640 --> 00:31:33,600
in this year our team disclosure 13

652
00:31:33,600 --> 00:31:36,720
vulnerabilities about q7 products

653
00:31:36,720 --> 00:31:39,919
specifically we found 14 critical

654
00:31:39,919 --> 00:31:42,880
vulnerabilities and 7 high security

655
00:31:42,880 --> 00:31:44,559
availabilities

656
00:31:44,559 --> 00:31:47,279
if you want to find more detail about

657
00:31:47,279 --> 00:31:49,600
the vulnerabilities you could search on

658
00:31:49,600 --> 00:31:53,439
my company azusa website

659
00:31:54,480 --> 00:31:57,840
in this slide i show a

660
00:31:57,840 --> 00:32:00,240
classification of all the queues and

661
00:32:00,240 --> 00:32:02,960
vulnerabilities we found

662
00:32:02,960 --> 00:32:05,440
it shows that most of vulnerabilities

663
00:32:05,440 --> 00:32:07,760
are communication

664
00:32:07,760 --> 00:32:12,000
directory listing and the path capsule

665
00:32:12,000 --> 00:32:14,880
of course two net variabilities are also

666
00:32:14,880 --> 00:32:16,159
part of

667
00:32:16,159 --> 00:32:18,799
those type

668
00:32:19,200 --> 00:32:22,080
um because the time for the presentation

669
00:32:22,080 --> 00:32:25,039
is limited i will just mention a few

670
00:32:25,039 --> 00:32:26,480
examples of

671
00:32:26,480 --> 00:32:28,480
interesting vulnerabilities affecting

672
00:32:28,480 --> 00:32:31,519
q10 products

673
00:32:31,919 --> 00:32:34,960
the first one is a communication we

674
00:32:34,960 --> 00:32:36,480
found some

675
00:32:36,480 --> 00:32:37,519
transfer

676
00:32:37,519 --> 00:32:41,039
transferred package content parameters

677
00:32:41,039 --> 00:32:44,399
for which log code does not check the

678
00:32:44,399 --> 00:32:46,159
string very well

679
00:32:46,159 --> 00:32:48,799
for this reason we could send some

680
00:32:48,799 --> 00:32:51,600
spatial commands in it

681
00:32:51,600 --> 00:32:55,440
in this example we create a package to

682
00:32:55,440 --> 00:32:56,880
write a

683
00:32:56,880 --> 00:32:59,840
malicious web webpage in the website

684
00:32:59,840 --> 00:33:01,840
folder then

685
00:33:01,840 --> 00:33:04,640
we could get the shadow file by

686
00:33:04,640 --> 00:33:06,880
accessing

687
00:33:06,880 --> 00:33:11,320
this malicious web page

688
00:33:13,440 --> 00:33:15,519
and then we found the

689
00:33:15,519 --> 00:33:19,360
hardcore password in qcent devices too

690
00:33:19,360 --> 00:33:22,159
this is a big issue especially in this

691
00:33:22,159 --> 00:33:23,760
case

692
00:33:23,760 --> 00:33:27,120
q1 allows user to connect to the not

693
00:33:27,120 --> 00:33:30,799
server by ssh but it only allows a

694
00:33:30,799 --> 00:33:32,799
limited console

695
00:33:32,799 --> 00:33:36,320
however in this picture you can see that

696
00:33:36,320 --> 00:33:39,279
we type a spatial secret key after the

697
00:33:39,279 --> 00:33:42,080
department uh debug command

698
00:33:42,080 --> 00:33:44,799
by the way we got this secret key by

699
00:33:44,799 --> 00:33:46,000
also by

700
00:33:46,000 --> 00:33:48,000
call review

701
00:33:48,000 --> 00:33:50,240
after you type in this secret key you

702
00:33:50,240 --> 00:33:51,039
can

703
00:33:51,039 --> 00:33:54,879
use an unlimited share

704
00:33:57,120 --> 00:33:59,840
and the last vulnerability is an

705
00:33:59,840 --> 00:34:02,399
improper access control

706
00:34:02,399 --> 00:34:06,799
as in the previous slide qsan enabled

707
00:34:06,799 --> 00:34:10,719
ssh service to connect to the console

708
00:34:10,719 --> 00:34:12,239
in this screen

709
00:34:12,239 --> 00:34:15,440
we can check every command by sending

710
00:34:15,440 --> 00:34:18,399
question mark to the console

711
00:34:18,399 --> 00:34:21,359
but even if they show only uh 13

712
00:34:21,359 --> 00:34:25,040
comments you can also use other comments

713
00:34:25,040 --> 00:34:27,520
as you can see in the picture on the

714
00:34:27,520 --> 00:34:30,000
right on the right

715
00:34:30,000 --> 00:34:33,040
you can also get an unlimited share if

716
00:34:33,040 --> 00:34:35,119
you add a slash

717
00:34:35,119 --> 00:34:37,760
bing slash sh

718
00:34:37,760 --> 00:34:41,199
behind the ssh command

719
00:34:41,199 --> 00:34:43,760
because the time for the

720
00:34:43,760 --> 00:34:46,800
for this presentation is almost finished

721
00:34:46,800 --> 00:34:49,280
it is time to start with the conclusion

722
00:34:49,280 --> 00:34:52,480
with talon

723
00:34:54,879 --> 00:34:58,160
so thanks to shirley we now know on what

724
00:34:58,160 --> 00:35:02,000
level cuneif nas and qsan are broken

725
00:35:02,000 --> 00:35:06,160
let's go to our results and conclusions

726
00:35:06,880 --> 00:35:10,400
so in our research we broke hbs3 again

727
00:35:10,400 --> 00:35:12,560
and we have also proven that enterprise

728
00:35:12,560 --> 00:35:14,800
offering is not secure either because we

729
00:35:14,800 --> 00:35:17,680
have found so many cvs in qsan some of

730
00:35:17,680 --> 00:35:19,520
them involve

731
00:35:19,520 --> 00:35:22,079
pre-op called execution or cross-site

732
00:35:22,079 --> 00:35:24,480
groups

733
00:35:25,440 --> 00:35:28,480
we're still seeing common bad patterns

734
00:35:28,480 --> 00:35:31,680
such as lack of input validation

735
00:35:31,680 --> 00:35:34,800
weak or non-existing preconditions check

736
00:35:34,800 --> 00:35:37,599
or cross-size dripping and unlock back

737
00:35:37,599 --> 00:35:38,880
door

738
00:35:38,880 --> 00:35:40,720
we're very surprised because this is

739
00:35:40,720 --> 00:35:43,720
2021

740
00:35:45,599 --> 00:35:49,280
so we came up with some suggestions

741
00:35:49,280 --> 00:35:51,359
for vendors please be cautious while

742
00:35:51,359 --> 00:35:53,760
writing code for devices

743
00:35:53,760 --> 00:35:56,160
please think about like

744
00:35:56,160 --> 00:35:58,400
whether your code can be abused

745
00:35:58,400 --> 00:36:01,119
or is it safe and is not only safe in

746
00:36:01,119 --> 00:36:04,240
happy scenarios

747
00:36:04,640 --> 00:36:07,040
also for the vendors you can try to

748
00:36:07,040 --> 00:36:10,160
employ third party code reviews

749
00:36:10,160 --> 00:36:14,160
for enterprise or soho end users

750
00:36:14,160 --> 00:36:16,960
our only suggestion is to try to lock

751
00:36:16,960 --> 00:36:19,760
your untrusted devices down you can put

752
00:36:19,760 --> 00:36:22,480
it behind the vpn employ strict firewall

753
00:36:22,480 --> 00:36:23,760
rules

754
00:36:23,760 --> 00:36:26,320
or even disable external internet for

755
00:36:26,320 --> 00:36:29,040
the devices

756
00:36:30,640 --> 00:36:33,440
so this will conclude our talk

757
00:36:33,440 --> 00:36:36,240
secure analysis stay safe or to be

758
00:36:36,240 --> 00:36:37,760
ransomed

759
00:36:37,760 --> 00:36:41,079
thank you

760
00:36:53,280 --> 00:36:55,359
foreign

