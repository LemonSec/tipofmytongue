1
00:00:07,400 --> 00:00:15,269
thank you hello everyone I'm very happy

2
00:00:13,320 --> 00:00:18,240
to see you guys here today I am going to

3
00:00:15,269 --> 00:00:20,930
talk about attacking the RM sub system

4
00:00:18,240 --> 00:00:23,759
to gain colonel privilege on Chromebooks

5
00:00:20,930 --> 00:00:27,509
but first of all let me introduce myself

6
00:00:23,760 --> 00:00:29,789
briefly my name is Steven also known as

7
00:00:27,510 --> 00:00:32,430
rats me so my friends will call me rat

8
00:00:29,789 --> 00:00:34,890
me so you can call me this way as well

9
00:00:32,430 --> 00:00:38,989
I'm a senior security researcher of

10
00:00:34,890 --> 00:00:43,530
kidnapped innocent and based in Shanghai

11
00:00:38,989 --> 00:00:46,199
my research mainly focus on the kernel

12
00:00:43,530 --> 00:00:50,070
one ability hunting and exploitation

13
00:00:46,200 --> 00:00:53,070
things 2014 and my target device

14
00:00:50,070 --> 00:00:56,699
normally is enjoyed but I also care

15
00:00:53,070 --> 00:01:00,719
about any other Linux distribution this

16
00:00:56,699 --> 00:01:02,608
time I will talk about the Chrome OS you

17
00:01:00,719 --> 00:01:04,500
can follow me on Twitter or follow me on

18
00:01:02,609 --> 00:01:08,070
github my ID has been shown on the

19
00:01:04,500 --> 00:01:10,890
slides by the way I am also a fan of

20
00:01:08,070 --> 00:01:13,318
console games anime and mystery novels

21
00:01:10,890 --> 00:01:16,020
so I'm always a big fan of Japanese

22
00:01:13,319 --> 00:01:20,670
culture always happy to be here to visit

23
00:01:16,020 --> 00:01:22,890
Tokyo and see you guys here here is

24
00:01:20,670 --> 00:01:26,270
today's agenda but first of all let's

25
00:01:22,890 --> 00:01:29,670
take a look at the chrome OS security

26
00:01:26,270 --> 00:01:31,140
what is a Chromebook so on the picture

27
00:01:29,670 --> 00:01:34,020
you can see there are many different

28
00:01:31,140 --> 00:01:37,830
kinds of Chromebooks a Chromebook maybe

29
00:01:34,020 --> 00:01:40,800
a laptop or tablet a Chromebook is

30
00:01:37,830 --> 00:01:43,259
running a Linux based a Chrome OS and

31
00:01:40,800 --> 00:01:44,940
there are different kinds of Chromebook

32
00:01:43,259 --> 00:01:48,800
and different brands and different

33
00:01:44,940 --> 00:01:53,550
models in the picture you can see some

34
00:01:48,800 --> 00:01:55,440
Chromebook made by HP Dell Asus and

35
00:01:53,550 --> 00:01:57,840
Lenovo

36
00:01:55,440 --> 00:02:00,989
there must be some reason for you to buy

37
00:01:57,840 --> 00:02:03,989
a Chromebook first of all let me say it

38
00:02:00,989 --> 00:02:06,300
clearly it's not for video gamers the

39
00:02:03,989 --> 00:02:08,520
graphic performance is really poor you

40
00:02:06,300 --> 00:02:11,310
cannot buy a current book to play some

41
00:02:08,520 --> 00:02:14,340
games like Final Fantasy 15 or something

42
00:02:11,310 --> 00:02:16,800
like that yeah but it's still good

43
00:02:14,340 --> 00:02:19,920
enough for you to finish the daily work

44
00:02:16,800 --> 00:02:20,890
for example browsing the internet and

45
00:02:19,920 --> 00:02:24,940
checking with your

46
00:02:20,890 --> 00:02:28,510
and watching a video and maybe I think

47
00:02:24,940 --> 00:02:30,640
editing some documents and one more

48
00:02:28,510 --> 00:02:34,060
thing is it's very easy to use there is

49
00:02:30,640 --> 00:02:37,420
no different between the Chrome OS and

50
00:02:34,060 --> 00:02:40,030
Mac OS on UI so it's easy to use and

51
00:02:37,420 --> 00:02:43,510
some model can be very cheap on the

52
00:02:40,030 --> 00:02:45,970
picture there is a Lenovo Chromebook you

53
00:02:43,510 --> 00:02:49,480
can see the price it's only 30,000 new

54
00:02:45,970 --> 00:02:52,300
home yen it's very cheap and that may be

55
00:02:49,480 --> 00:02:55,000
a reason for you to buy it but whatever

56
00:02:52,300 --> 00:02:58,510
you want to talk about is Chromebook is

57
00:02:55,000 --> 00:03:01,780
very secure I have to say a Chromebook

58
00:02:58,510 --> 00:03:04,840
is one of the most secure laptop for now

59
00:03:01,780 --> 00:03:07,660
because there are some reasons the first

60
00:03:04,840 --> 00:03:11,620
row for there is a Chrome browser I

61
00:03:07,660 --> 00:03:14,590
think most of you will agree that chrome

62
00:03:11,620 --> 00:03:17,200
is the most a secure browser for now so

63
00:03:14,590 --> 00:03:20,709
in Chrome OS all applications are based

64
00:03:17,200 --> 00:03:24,369
on Chrome and there must be a sandbox

65
00:03:20,709 --> 00:03:28,030
just like chrome Chrome OS has is

66
00:03:24,370 --> 00:03:31,060
os-level sandbox and post applications

67
00:03:28,030 --> 00:03:32,820
and system services are isolated and

68
00:03:31,060 --> 00:03:36,519
sandbox

69
00:03:32,820 --> 00:03:40,090
another thing is there is a secure file

70
00:03:36,519 --> 00:03:44,590
system and secure storage so you cannot

71
00:03:40,090 --> 00:03:46,860
modify the root partition and the root

72
00:03:44,590 --> 00:03:50,200
the root filesystem is read-only and

73
00:03:46,860 --> 00:03:52,810
this feature is powered by the verified

74
00:03:50,200 --> 00:03:56,950
boot and TM rarity and we will talk

75
00:03:52,810 --> 00:03:59,920
about it later so that's the thing is

76
00:03:56,950 --> 00:04:02,768
there is a additional security niché's

77
00:03:59,920 --> 00:04:05,649
security module the LS I'm interest

78
00:04:02,769 --> 00:04:08,079
stacked ahead of selinux and it's

79
00:04:05,650 --> 00:04:11,650
developed by chrome team to make sure

80
00:04:08,079 --> 00:04:13,840
the file system is secure oh there is

81
00:04:11,650 --> 00:04:18,280
another thing that is automatic updates

82
00:04:13,840 --> 00:04:20,829
so the chrome team not only fixed no

83
00:04:18,279 --> 00:04:24,669
impacts on chrome and Chrome OS as soon

84
00:04:20,829 --> 00:04:27,970
as possible but also will apply security

85
00:04:24,669 --> 00:04:30,640
patches to the kernel regularly so you

86
00:04:27,970 --> 00:04:32,880
cannot attack it by exploiting under

87
00:04:30,640 --> 00:04:32,880
bugs

88
00:04:33,680 --> 00:04:39,830
so let's take a look at the sandbox so

89
00:04:36,770 --> 00:04:43,849
the Chrome OS is using the mini jail 0

90
00:04:39,830 --> 00:04:45,859
to execute a system services the mini jl

91
00:04:43,850 --> 00:04:48,590
will apply different kinds of

92
00:04:45,860 --> 00:04:52,789
restrictions for example the user ID the

93
00:04:48,590 --> 00:04:56,659
comp abilities namespace a secure secure

94
00:04:52,789 --> 00:04:59,000
computing future policy and SELinux

95
00:04:56,660 --> 00:05:02,270
policy so all these restrictions are

96
00:04:59,000 --> 00:05:05,210
based on Linux security features but

97
00:05:02,270 --> 00:05:08,240
nothing is special there but it's very

98
00:05:05,210 --> 00:05:10,430
efficient to bypass the sandbox each

99
00:05:08,240 --> 00:05:12,830
requires additional vulnerability and

100
00:05:10,430 --> 00:05:14,690
for the more details about the sandbox

101
00:05:12,830 --> 00:05:19,909
you can check the official documents of

102
00:05:14,690 --> 00:05:22,550
Google Chrome so the Chrome OS can

103
00:05:19,910 --> 00:05:26,470
verify the boot chain during the system

104
00:05:22,550 --> 00:05:29,960
putting up that is verified boot

105
00:05:26,470 --> 00:05:33,169
firmware room disk and system partition

106
00:05:29,960 --> 00:05:36,138
can be verified and especially the

107
00:05:33,169 --> 00:05:42,169
system partition is verified by the DM

108
00:05:36,139 --> 00:05:44,900
rarity in the kernel so the emeriti is a

109
00:05:42,169 --> 00:05:48,250
kernel module developed by chrome team

110
00:05:44,900 --> 00:05:52,159
but now it can be used on Chrome OS and

111
00:05:48,250 --> 00:05:54,260
enjoyed and it can be protected by it

112
00:05:52,159 --> 00:05:56,719
can protect the system partition from

113
00:05:54,260 --> 00:05:59,719
being modified and each will calculate

114
00:05:56,720 --> 00:06:04,220
the checksum of every block on disk

115
00:05:59,720 --> 00:06:06,080
before i/o operation so it will crash

116
00:06:04,220 --> 00:06:09,889
the whole system if the checksum is

117
00:06:06,080 --> 00:06:11,810
wrong so the system partition if the

118
00:06:09,889 --> 00:06:14,539
system partition is modified by

119
00:06:11,810 --> 00:06:15,020
malicious program the Chrome OS will

120
00:06:14,539 --> 00:06:17,210
know that

121
00:06:15,020 --> 00:06:22,099
and will enter a boot loop which means

122
00:06:17,210 --> 00:06:24,710
you cannot push up the system anymore so

123
00:06:22,099 --> 00:06:28,580
to bypass the emergency you need a

124
00:06:24,710 --> 00:06:31,609
persistent exploit so the persistence

125
00:06:28,580 --> 00:06:34,969
means keep your malicious process

126
00:06:31,610 --> 00:06:38,030
persistently persistently alive across

127
00:06:34,970 --> 00:06:40,760
the reboots however besides the

128
00:06:38,030 --> 00:06:45,520
emergency chrome OS also has multiple

129
00:06:40,760 --> 00:06:45,520
features to stop persistent to attack

130
00:06:45,919 --> 00:06:51,810
so what have done what have they done

131
00:06:49,320 --> 00:06:54,389
for an cheaper distance the first thing

132
00:06:51,810 --> 00:06:57,510
is the America I have given out enough

133
00:06:54,389 --> 00:07:00,389
explanation about it the second one is

134
00:06:57,510 --> 00:07:02,909
no execute month for writable data

135
00:07:00,389 --> 00:07:06,510
partition so the more we're in this

136
00:07:02,910 --> 00:07:10,290
partition cannot be executed and another

137
00:07:06,510 --> 00:07:14,659
one is the ASM Linux security module and

138
00:07:10,290 --> 00:07:16,830
I will talk about it on next page and

139
00:07:14,660 --> 00:07:19,229
chrome chrome also have other

140
00:07:16,830 --> 00:07:22,190
medications for specific persistent

141
00:07:19,229 --> 00:07:24,990
exploits in the history that is because

142
00:07:22,190 --> 00:07:26,969
benefiting from the Google we are Google

143
00:07:24,990 --> 00:07:29,729
Chrome we are Pete the mono bility

144
00:07:26,970 --> 00:07:33,150
reward program Google received many

145
00:07:29,729 --> 00:07:35,280
reports on persistent exploits so they

146
00:07:33,150 --> 00:07:41,370
can keep improving the ante persistence

147
00:07:35,280 --> 00:07:45,960
logic on Chrome OS so for now let's just

148
00:07:41,370 --> 00:07:48,620
take a look at our s/m m/l s/m is a

149
00:07:45,960 --> 00:07:51,719
security mode linux security module and

150
00:07:48,620 --> 00:07:54,810
this module will reject the symlinks

151
00:07:51,720 --> 00:07:57,960
that will redirect the system's reaction

152
00:07:54,810 --> 00:08:01,260
during boot so it was a regular approach

153
00:07:57,960 --> 00:08:03,330
for attackers to make a symlink which

154
00:08:01,260 --> 00:08:05,729
may lead to abusing the system

155
00:08:03,330 --> 00:08:08,700
configuration to achieve the persistence

156
00:08:05,729 --> 00:08:12,389
persistence and for the same reason the

157
00:08:08,700 --> 00:08:15,840
MSM also refused to mount us a path with

158
00:08:12,389 --> 00:08:17,760
symlinks and it also can provide a

159
00:08:15,840 --> 00:08:20,219
hardening against the load module and

160
00:08:17,760 --> 00:08:22,620
firmware from data predictions so

161
00:08:20,220 --> 00:08:28,410
attackers can out load the untrusted

162
00:08:22,620 --> 00:08:31,139
module or untrusted from where so that's

163
00:08:28,410 --> 00:08:33,570
all about Chrome OS security today and

164
00:08:31,139 --> 00:08:38,490
I'm going to introduce our exploit

165
00:08:33,570 --> 00:08:41,459
exploit chain and Chrome OS so what is a

166
00:08:38,490 --> 00:08:45,240
chrome poem a poem is a special program

167
00:08:41,458 --> 00:08:49,349
of a Chrome we RP and Google as we have

168
00:08:45,240 --> 00:08:51,380
a standing 150,000 US dollar reward for

169
00:08:49,350 --> 00:08:54,959
participants that can compromise

170
00:08:51,380 --> 00:08:56,990
Chromebook or Chrome box with device

171
00:08:54,959 --> 00:08:58,680
persistence in the guest mode and

172
00:08:56,990 --> 00:08:59,220
actually the price

173
00:08:58,680 --> 00:09:03,930
previous

174
00:08:59,220 --> 00:09:06,540
was 100 was 100,000 USD but for now

175
00:09:03,930 --> 00:09:10,560
starting from this July it has been

176
00:09:06,540 --> 00:09:15,060
reached to 150 you southern US US

177
00:09:10,560 --> 00:09:17,699
dollars so here is the podium

178
00:09:15,060 --> 00:09:21,060
requirements the Pony requires an

179
00:09:17,699 --> 00:09:23,790
exploit chain includes three parts the

180
00:09:21,060 --> 00:09:27,388
first one is a Chrome browser renderer

181
00:09:23,790 --> 00:09:30,420
RCE in the guest mode mostly you need to

182
00:09:27,389 --> 00:09:34,019
fund v8 JavaScript engine back to finish

183
00:09:30,420 --> 00:09:39,000
it the second one is a sandbox xscape

184
00:09:34,019 --> 00:09:41,189
and the last one is OS persistence so

185
00:09:39,000 --> 00:09:44,670
you should you should achieve the OS

186
00:09:41,189 --> 00:09:49,980
persistence just keep the exploits alive

187
00:09:44,670 --> 00:09:52,579
across the reboots so in my list year my

188
00:09:49,980 --> 00:09:55,259
teammates are now from keen lab Tencent

189
00:09:52,579 --> 00:09:57,628
submitted a fully exploited chain to the

190
00:09:55,259 --> 00:10:00,740
chrome VRP it includes five

191
00:09:57,629 --> 00:10:06,209
vulnerabilities and the first one is

192
00:10:00,740 --> 00:10:11,009
okay so I'm going to speak slowly for

193
00:10:06,209 --> 00:10:16,469
the interpreter yeah yeah there are 5-1

194
00:10:11,009 --> 00:10:21,000
abilities the first one is CVE 20 1958

195
00:10:16,470 --> 00:10:24,480
25 it is a lot of bombs out of bounds

196
00:10:21,000 --> 00:10:30,449
right in v8 JavaScript engine and the

197
00:10:24,480 --> 00:10:34,019
second one is 320 1958 26 it is used

198
00:10:30,449 --> 00:10:38,309
after free index the database we use

199
00:10:34,019 --> 00:10:41,339
this back to bypass the sandbox so the

200
00:10:38,309 --> 00:10:41,730
next there are two privilege escalation

201
00:10:41,339 --> 00:10:44,129
bugs

202
00:10:41,730 --> 00:10:49,620
why is for kernel mode and another one

203
00:10:44,129 --> 00:10:51,779
is for user mode of the the last one

204
00:10:49,620 --> 00:10:54,149
after we gain the root privilege on

205
00:10:51,779 --> 00:10:56,910
Chrome OS we still need another bag to

206
00:10:54,149 --> 00:11:01,439
pipe to to achieve the Chrome OS

207
00:10:56,910 --> 00:11:06,300
persistence so that is CV 2019 one three

208
00:11:01,439 --> 00:11:09,750
six eight nine so we use all these parts

209
00:11:06,300 --> 00:11:12,059
to build and fully exploit chain and we

210
00:11:09,750 --> 00:11:13,260
use this chain to bypass all other

211
00:11:12,059 --> 00:11:17,990
mitigations

212
00:11:13,260 --> 00:11:20,640
on Chrome OS and finally Google Chrome

213
00:11:17,990 --> 00:11:22,950
confirmed the exploit chain and the

214
00:11:20,640 --> 00:11:27,360
chain made spawning requirements and

215
00:11:22,950 --> 00:11:28,980
this is it's a male from Google they

216
00:11:27,360 --> 00:11:34,380
just say that we match the requirements

217
00:11:28,980 --> 00:11:38,040
and guess the bounty so this is the

218
00:11:34,380 --> 00:11:40,860
disclosure process of the our chain so

219
00:11:38,040 --> 00:11:44,730
we have already disclosed the first and

220
00:11:40,860 --> 00:11:49,260
the second bug on on cake Hong and black

221
00:11:44,730 --> 00:11:51,240
hat but here for now we are here we are

222
00:11:49,260 --> 00:11:53,790
here on the code blue Tokyo and I'm

223
00:11:51,240 --> 00:11:57,690
going to talk about the third part it's

224
00:11:53,790 --> 00:12:03,319
a kernel exploits font by myself it the

225
00:11:57,690 --> 00:12:07,110
Serie number is ze 2019 165 own 8 and

226
00:12:03,320 --> 00:12:11,760
for the last part actually Lagrange is

227
00:12:07,110 --> 00:12:16,770
going to be disclosed on POC so by my

228
00:12:11,760 --> 00:12:19,710
teammates coming and malady and what is

229
00:12:16,770 --> 00:12:22,710
my contribution to this chain Harada say

230
00:12:19,710 --> 00:12:26,700
that I country B which kernel exploits

231
00:12:22,710 --> 00:12:29,340
by the end of March this year so my

232
00:12:26,700 --> 00:12:32,460
friend and my teammate and my teammates

233
00:12:29,340 --> 00:12:33,890
whose name is coming he asked me so if I

234
00:12:32,460 --> 00:12:37,290
can find

235
00:12:33,890 --> 00:12:40,439
if can find one kernel one orbit here or

236
00:12:37,290 --> 00:12:43,560
I can make kernel exploit for the Chrome

237
00:12:40,440 --> 00:12:46,650
OS that is because as last time he

238
00:12:43,560 --> 00:12:49,410
already have a BH bug for the RCE and

239
00:12:46,650 --> 00:12:52,949
sandbox escape but he don't have a

240
00:12:49,410 --> 00:12:54,689
privilege escalation and persistence so

241
00:12:52,950 --> 00:12:57,660
he believed that he needed a root

242
00:12:54,690 --> 00:13:01,350
privilege to achieve the OS persistence

243
00:12:57,660 --> 00:13:07,110
so he just asked me if I can do that so

244
00:13:01,350 --> 00:13:10,890
I just say ok let's see what I can do so

245
00:13:07,110 --> 00:13:13,770
I start I start my research by the end

246
00:13:10,890 --> 00:13:16,260
of March and first the first thing I

247
00:13:13,770 --> 00:13:20,100
need to think about is the attack

248
00:13:16,260 --> 00:13:22,860
surface so actually I don't need to fund

249
00:13:20,100 --> 00:13:25,980
a Linux kernel one ability that can

250
00:13:22,860 --> 00:13:28,950
affect or Linux distributions

251
00:13:25,980 --> 00:13:31,770
lettuce that may be difficult and maybe

252
00:13:28,950 --> 00:13:34,110
takes me more time I just launched I

253
00:13:31,770 --> 00:13:37,680
just want it easy job to get the bounty

254
00:13:34,110 --> 00:13:42,270
and to finish the work so I believe that

255
00:13:37,680 --> 00:13:48,660
a park about targeted at official Chrome

256
00:13:42,270 --> 00:13:51,630
OS hardware will be fun so because you

257
00:13:48,660 --> 00:13:56,969
know I have only 30 days to finish it if

258
00:13:51,630 --> 00:14:00,030
I cannot it may be failed so let's just

259
00:13:56,970 --> 00:14:05,280
try to fund vendor bug on specific

260
00:14:00,030 --> 00:14:09,120
Chromebook so here is a partial list of

261
00:14:05,280 --> 00:14:13,260
Chromebook models I'm looking for easy

262
00:14:09,120 --> 00:14:16,320
target so after looking for a while I

263
00:14:13,260 --> 00:14:21,480
found very good one that is the noble

264
00:14:16,320 --> 00:14:24,750
Chromebook as 330 but it just came in my

265
00:14:21,480 --> 00:14:28,080
eyes because of its platform so can you

266
00:14:24,750 --> 00:14:31,260
see that the platform and kernel Libre

267
00:14:28,080 --> 00:14:34,800
here API here is different with others

268
00:14:31,260 --> 00:14:38,370
it's not Intel CPU it's an arm CPU and

269
00:14:34,800 --> 00:14:46,290
it was powered by the media attack the

270
00:14:38,370 --> 00:14:48,810
platform model is MT 81-73 and it maybe

271
00:14:46,290 --> 00:14:51,839
were noble because you know I have to

272
00:14:48,810 --> 00:14:54,780
say the major hug is always the paradise

273
00:14:51,840 --> 00:14:57,960
for bug hunters you can always find more

274
00:14:54,780 --> 00:14:59,689
and more parks and endless bugs on media

275
00:14:57,960 --> 00:15:02,580
attack yep

276
00:14:59,690 --> 00:15:07,200
so I just choose this one the models

277
00:15:02,580 --> 00:15:10,440
name is Lenovo s3 30 and you can see the

278
00:15:07,200 --> 00:15:14,340
picture it just looks like a laptop

279
00:15:10,440 --> 00:15:17,730
nothing special and so but it has a

280
00:15:14,340 --> 00:15:21,090
board name who was was given by the

281
00:15:17,730 --> 00:15:23,550
Google Chrome is Hana is Japanese Wars

282
00:15:21,090 --> 00:15:28,320
it's just means flower yeah and I like

283
00:15:23,550 --> 00:15:31,530
it so okay we just confirmed that the

284
00:15:28,320 --> 00:15:34,290
attacking target but is it easy to

285
00:15:31,530 --> 00:15:36,420
exploit it let's check a look at let's

286
00:15:34,290 --> 00:15:38,810
take a look at is a mitigation on

287
00:15:36,420 --> 00:15:41,959
hardware so

288
00:15:38,810 --> 00:15:45,079
this is the main mitigation and arm CPU

289
00:15:41,960 --> 00:15:47,990
and let's take a look at what is an

290
00:15:45,080 --> 00:15:52,700
abled and what which which is not so

291
00:15:47,990 --> 00:15:55,340
that is the other reason I choose MTK

292
00:15:52,700 --> 00:15:57,470
based a Chromebook because the lack of

293
00:15:55,340 --> 00:16:02,270
the hardware mitigations

294
00:15:57,470 --> 00:16:04,850
so only PA and the P P accent onion in a

295
00:16:02,270 --> 00:16:07,730
neighborhood so they can make some

296
00:16:04,850 --> 00:16:10,880
trouble for exploitation but it's not a

297
00:16:07,730 --> 00:16:14,120
very big problem we are very experienced

298
00:16:10,880 --> 00:16:17,390
that you bypass it and achieve the

299
00:16:14,120 --> 00:16:21,320
kernel code execution so but the other

300
00:16:17,390 --> 00:16:23,870
mitigation you can see the ueo the KS on

301
00:16:21,320 --> 00:16:28,160
many other things for example PA c or

302
00:16:23,870 --> 00:16:33,140
some other things are not enabled so in

303
00:16:28,160 --> 00:16:35,660
summarize is very easy to exploit so

304
00:16:33,140 --> 00:16:38,180
what's next so we have to some analyze

305
00:16:35,660 --> 00:16:41,030
and we know it's easy to make it so I

306
00:16:38,180 --> 00:16:45,010
just about the novel s researchy

307
00:16:41,030 --> 00:16:47,720
from imagine you okay and I need to wait

308
00:16:45,010 --> 00:16:50,300
two weeks for the global delivery

309
00:16:47,720 --> 00:16:51,080
because you know the delivery from UK to

310
00:16:50,300 --> 00:16:54,589
China

311
00:16:51,080 --> 00:16:56,830
it takes some time so I just wait but

312
00:16:54,590 --> 00:17:00,680
during my wait I can do something like

313
00:16:56,830 --> 00:17:04,130
think about which parts of the code may

314
00:17:00,680 --> 00:17:07,339
be runnable so finally I found a good

315
00:17:04,130 --> 00:17:13,250
good one it is a directed rendering

316
00:17:07,339 --> 00:17:15,169
manager that is DRM so let's talk about

317
00:17:13,250 --> 00:17:18,050
the direct rendering manager

318
00:17:15,170 --> 00:17:21,230
it's a subsystem of the Linux kernel and

319
00:17:18,050 --> 00:17:26,530
you can see the source path is Traverse

320
00:17:21,230 --> 00:17:29,510
GPU DRM and it is responsible for

321
00:17:26,530 --> 00:17:32,360
interfacing with GPUs you know every

322
00:17:29,510 --> 00:17:35,600
laptop will have a GPU for you to draw

323
00:17:32,360 --> 00:17:37,370
the pictures and graphics and he's

324
00:17:35,600 --> 00:17:43,300
responsible for interfacing research

325
00:17:37,370 --> 00:17:47,060
reviews and especially for MT 81-73

326
00:17:43,300 --> 00:17:49,520
platform it is using a power VR GPU by

327
00:17:47,060 --> 00:17:51,300
imagination I'm not sure if you ever

328
00:17:49,520 --> 00:17:54,420
heard of it

329
00:17:51,300 --> 00:18:00,090
actually the power we are is very widely

330
00:17:54,420 --> 00:18:03,660
used by the tablet but actually not many

331
00:18:00,090 --> 00:18:05,370
laptops is using it so I guess after you

332
00:18:03,660 --> 00:18:09,000
have a chance to find some new bus

333
00:18:05,370 --> 00:18:13,320
because not many laptops are using it

334
00:18:09,000 --> 00:18:15,510
and maybe maybe I am the first one to do

335
00:18:13,320 --> 00:18:17,720
some research on it so I can find some

336
00:18:15,510 --> 00:18:17,720
bugs

337
00:18:18,110 --> 00:18:27,689
so DRM actually provides accessible DV

338
00:18:22,980 --> 00:18:31,350
pass and Larry OB card 0 card one card -

339
00:18:27,690 --> 00:18:33,720
if you have multiple video cards and it

340
00:18:31,350 --> 00:18:36,149
is accessible for normal users that's

341
00:18:33,720 --> 00:18:40,140
important if it's not accessible you

342
00:18:36,150 --> 00:18:46,140
cannot attack it so it exposes in IO

343
00:18:40,140 --> 00:18:49,580
control interface for users so so

344
00:18:46,140 --> 00:18:52,500
normally the DRM subsystem will provide

345
00:18:49,580 --> 00:18:56,730
public commands handled by this function

346
00:18:52,500 --> 00:18:59,310
the DRM IO control and you can see it is

347
00:18:56,730 --> 00:19:05,850
it's definitions there are lots of i/o

348
00:18:59,310 --> 00:19:08,340
control handlers and so but we have no

349
00:19:05,850 --> 00:19:11,520
permission to request the commands with

350
00:19:08,340 --> 00:19:14,669
these special flags and you can see if

351
00:19:11,520 --> 00:19:18,330
example the DRM rules only DRM master

352
00:19:14,670 --> 00:19:20,550
and DRM most if the if the command has

353
00:19:18,330 --> 00:19:22,919
been set these flags you cannot access

354
00:19:20,550 --> 00:19:26,879
it as a normal user you need more

355
00:19:22,920 --> 00:19:29,580
privilege to access it so I have to say

356
00:19:26,880 --> 00:19:32,310
the public commands is not a very good

357
00:19:29,580 --> 00:19:36,560
attack surface for us because we cannot

358
00:19:32,310 --> 00:19:40,050
access most of them so what's next it is

359
00:19:36,560 --> 00:19:43,169
it's still possible to a jacket actually

360
00:19:40,050 --> 00:19:45,780
it is so we still have another way so we

361
00:19:43,170 --> 00:19:47,880
should we should know that the DRM

362
00:19:45,780 --> 00:19:51,270
suppose private commands by winders

363
00:19:47,880 --> 00:19:56,400
because the public commands is provided

364
00:19:51,270 --> 00:19:58,830
for all GPUs and you may fund so and but

365
00:19:56,400 --> 00:20:02,070
there are still some privates features

366
00:19:58,830 --> 00:20:05,409
for different vendors so Sony it need to

367
00:20:02,070 --> 00:20:08,050
provide the private handlers so

368
00:20:05,410 --> 00:20:10,840
when the window when the number of

369
00:20:08,050 --> 00:20:14,770
command is larger than this one 2d RM

370
00:20:10,840 --> 00:20:19,060
command base it will be the private

371
00:20:14,770 --> 00:20:24,370
commands another serie ok as you have to

372
00:20:19,060 --> 00:20:27,990
meet 20 minutes to go so let's take a

373
00:20:24,370 --> 00:20:29,199
look at the private Handler on the s3 30

374
00:20:27,990 --> 00:20:32,680
Chromebook

375
00:20:29,200 --> 00:20:37,390
so there will be two private handlers

376
00:20:32,680 --> 00:20:40,540
one is mtk our conchos another one is PV

377
00:20:37,390 --> 00:20:42,850
RT r am i work on shows so for this time

378
00:20:40,540 --> 00:20:46,629
we just offer a curse on the D to P we

379
00:20:42,850 --> 00:20:49,659
are trm our control so this function

380
00:20:46,630 --> 00:20:54,430
actually handles a special command that

381
00:20:49,660 --> 00:20:58,600
is PB r sv r km CMD and this command

382
00:20:54,430 --> 00:21:01,180
will accept a structure it's a parameter

383
00:20:58,600 --> 00:21:04,360
so the structure includes two members

384
00:21:01,180 --> 00:21:07,630
which are very important the first one

385
00:21:04,360 --> 00:21:12,250
is breech ID the second one is bridge

386
00:21:07,630 --> 00:21:15,760
functionality the breech ID the bridge

387
00:21:12,250 --> 00:21:19,510
ready has a range is from 0 to 25 24

388
00:21:15,760 --> 00:21:23,040
which means there are 25 bridges in

389
00:21:19,510 --> 00:21:26,290
total and for the bridge function ID

390
00:21:23,040 --> 00:21:28,889
each bridge may have multiple function

391
00:21:26,290 --> 00:21:31,600
handlers so the bridge function ID

392
00:21:28,890 --> 00:21:39,070
represents which function you want to

393
00:21:31,600 --> 00:21:41,879
call so so hundreds of functions are

394
00:21:39,070 --> 00:21:45,100
handled by this handler in total and

395
00:21:41,880 --> 00:21:47,830
that is exactly the attack surface I

396
00:21:45,100 --> 00:21:50,760
want because all the functions all the

397
00:21:47,830 --> 00:21:53,409
features and all the source code was

398
00:21:50,760 --> 00:21:56,170
provided by the windows they are not

399
00:21:53,410 --> 00:22:01,630
available in Linux a free upstream but

400
00:21:56,170 --> 00:22:03,460
it's available and from Chromebook so ok

401
00:22:01,630 --> 00:22:06,610
we just to confirm the attack surface

402
00:22:03,460 --> 00:22:10,410
it's awesome so what's next

403
00:22:06,610 --> 00:22:13,629
it's time for me to build a father or so

404
00:22:10,410 --> 00:22:15,760
first of all I need to recompile the

405
00:22:13,630 --> 00:22:18,910
kernel and flash it to the Chromebooks

406
00:22:15,760 --> 00:22:22,900
to enable some sanitizer like

407
00:22:18,910 --> 00:22:25,390
and cake our cake harborage and this

408
00:22:22,900 --> 00:22:29,500
stuff can help me recognize sparks

409
00:22:25,390 --> 00:22:31,090
easily and I knew to defund the

410
00:22:29,500 --> 00:22:38,140
rules targeting the power we are

411
00:22:31,090 --> 00:22:40,439
interface PVR as we are km CMD so at on

412
00:22:38,140 --> 00:22:43,390
this stage I just told the father was

413
00:22:40,440 --> 00:22:46,150
was target was the target is and how to

414
00:22:43,390 --> 00:22:49,060
fight it then I just need to run the

415
00:22:46,150 --> 00:22:50,470
father by the SSH and wait for one night

416
00:22:49,060 --> 00:22:53,740
so do you remember each I can do

417
00:22:50,470 --> 00:22:56,230
something else just of relaxed and maybe

418
00:22:53,740 --> 00:22:59,170
play some games on ps4 and just a wait

419
00:22:56,230 --> 00:23:01,570
because there is nothing more I can do

420
00:22:59,170 --> 00:23:04,060
I just await the father to finish his

421
00:23:01,570 --> 00:23:09,220
work and let's see if we can cause some

422
00:23:04,060 --> 00:23:14,530
crashes or not lucky it just a fun lots

423
00:23:09,220 --> 00:23:17,170
of crashes and this is one of them so by

424
00:23:14,530 --> 00:23:20,110
analyzing the stack trace the stack

425
00:23:17,170 --> 00:23:23,680
trace is here so this is the start race

426
00:23:20,110 --> 00:23:26,949
and by analyzing the stack trace I know

427
00:23:23,680 --> 00:23:28,810
that a wonderful function maybe maybe

428
00:23:26,950 --> 00:23:32,790
least one the PVR

429
00:23:28,810 --> 00:23:35,620
as we are bridge sync frame o P create

430
00:23:32,790 --> 00:23:39,250
so if you want to access this function

431
00:23:35,620 --> 00:23:42,239
you just simply set the bridge ID to two

432
00:23:39,250 --> 00:23:44,860
and set the bridge function ID to eight

433
00:23:42,240 --> 00:23:48,190
then you can achieve then you can call

434
00:23:44,860 --> 00:23:51,250
this vulnerable function so the root

435
00:23:48,190 --> 00:23:53,860
cause of this park is that missing check

436
00:23:51,250 --> 00:23:57,420
miss checking the buffer size coming

437
00:23:53,860 --> 00:24:00,969
from user input which may lead to

438
00:23:57,420 --> 00:24:03,730
integral over flow and the yellow the

439
00:24:00,970 --> 00:24:06,310
yellow one is a variable came from user

440
00:24:03,730 --> 00:24:09,790
users input you can control the sponsor

441
00:24:06,310 --> 00:24:14,169
and the sponsor points to user buffer

442
00:24:09,790 --> 00:24:16,960
and so it's just an integral all about

443
00:24:14,170 --> 00:24:20,500
after analyze it I know that it's able

444
00:24:16,960 --> 00:24:23,320
to convert the spark to a heap out of

445
00:24:20,500 --> 00:24:27,970
bounds right then achieve the arbitrary

446
00:24:23,320 --> 00:24:30,290
memory over writing so let's just look

447
00:24:27,970 --> 00:24:33,080
how the burnable code

448
00:24:30,290 --> 00:24:38,389
first of all there is of arrival that is

449
00:24:33,080 --> 00:24:41,418
the UI 32 buffer size here and he

450
00:24:38,390 --> 00:24:46,160
firstly need to calculate this Mariah Bo

451
00:24:41,419 --> 00:24:48,140
and you can see that all these Mariah

452
00:24:46,160 --> 00:24:50,690
balls came from the user space so you

453
00:24:48,140 --> 00:24:53,870
can control it but he did this function

454
00:24:50,690 --> 00:24:59,660
didn't check these parameters so he's

455
00:24:53,870 --> 00:25:02,178
able to overflow this in Tigger and so

456
00:24:59,660 --> 00:25:06,049
if the integer is overflowed so you can

457
00:25:02,179 --> 00:25:09,740
allocate much smaller buffer than expect

458
00:25:06,049 --> 00:25:12,020
so this function the OS airlock mmmm no

459
00:25:09,740 --> 00:25:14,900
stays we'll add a couple and the buffer

460
00:25:12,020 --> 00:25:18,168
this is the pointer of the buffer PRA ox

461
00:25:14,900 --> 00:25:21,860
buffer so on the last you can see that

462
00:25:18,169 --> 00:25:23,690
he will call the OS coffee from user so

463
00:25:21,860 --> 00:25:26,090
this function will copy the user buffer

464
00:25:23,690 --> 00:25:29,419
from user space to the kernel space and

465
00:25:26,090 --> 00:25:32,899
he will copy a bigger buffer to the much

466
00:25:29,419 --> 00:25:36,020
smaller kernel buffer that is heap will

467
00:25:32,900 --> 00:25:40,929
be right so we just simply converts the

468
00:25:36,020 --> 00:25:40,929
integer or float to heap will be right

469
00:25:41,950 --> 00:25:50,179
so this page will explain how to exploit

470
00:25:46,040 --> 00:25:52,909
people be so there will be two buffers

471
00:25:50,179 --> 00:25:56,750
and each buffer size is two thousand

472
00:25:52,910 --> 00:26:00,230
bytes the first one is the pea puree ox

473
00:25:56,750 --> 00:26:04,640
buffer is the victim buffer and the last

474
00:26:00,230 --> 00:26:08,240
the next one is a vector array it was

475
00:26:04,640 --> 00:26:10,280
made by a hip spray so hopefully it's

476
00:26:08,240 --> 00:26:15,830
just after the victim buffer so it's

477
00:26:10,280 --> 00:26:19,520
justa here so then I'm going to use the

478
00:26:15,830 --> 00:26:24,260
park to override the first first Iove

479
00:26:19,520 --> 00:26:28,520
base and hopefully we can override the

480
00:26:24,260 --> 00:26:31,580
IO we base here so so originally I alway

481
00:26:28,520 --> 00:26:33,980
base is user space puncher but after

482
00:26:31,580 --> 00:26:39,379
over writing it it becames a kernel

483
00:26:33,980 --> 00:26:41,750
address so next to do is just write the

484
00:26:39,380 --> 00:26:43,640
pipe FD to copy the user buffer to the

485
00:26:41,750 --> 00:26:44,090
kernel address because normally it will

486
00:26:43,640 --> 00:26:47,900
be

487
00:26:44,090 --> 00:26:49,668
to the real al Baxter base but after we

488
00:26:47,900 --> 00:26:51,710
overwrite it we can complete the

489
00:26:49,669 --> 00:26:54,409
userspace buffer to the colonel address

490
00:26:51,710 --> 00:26:59,230
so in this way we just achieved the

491
00:26:54,409 --> 00:26:59,230
pitch rate colonel address over writing

492
00:26:59,679 --> 00:27:06,350
but nurse knew a problem my first

493
00:27:03,770 --> 00:27:10,610
version of this exploit is not very

494
00:27:06,350 --> 00:27:13,789
readable so the kernel may crash in 50%

495
00:27:10,610 --> 00:27:17,209
possibility by a kernel feature-rich

496
00:27:13,789 --> 00:27:20,899
name is hardened user copy so that

497
00:27:17,210 --> 00:27:23,270
happens with my hips very failed and the

498
00:27:20,899 --> 00:27:26,600
Court of kernel function copy from user

499
00:27:23,270 --> 00:27:29,000
will override some small hips sauce so

500
00:27:26,600 --> 00:27:31,668
in this picture you can see that the

501
00:27:29,000 --> 00:27:33,980
first one is a PRA ox buffer is the

502
00:27:31,669 --> 00:27:40,549
mixing buffer no problem but the next

503
00:27:33,980 --> 00:27:43,250
one is came a log 128 but buffers is not

504
00:27:40,549 --> 00:27:46,850
my sprayed buffer is something else by

505
00:27:43,250 --> 00:27:50,270
random so so when this happens you will

506
00:27:46,850 --> 00:27:51,139
copy each will copy the buffer to a very

507
00:27:50,270 --> 00:27:53,559
small object

508
00:27:51,140 --> 00:27:59,360
he will coffee two thousand bytes to a

509
00:27:53,559 --> 00:28:00,950
buffer which only has 128 bytes so the

510
00:27:59,360 --> 00:28:03,590
Kerner will know that and Colonel Bo

511
00:28:00,950 --> 00:28:07,580
panic by the hardened use a coffee

512
00:28:03,590 --> 00:28:13,129
feature so what is the hardened user

513
00:28:07,580 --> 00:28:16,668
copy so normally is a mitigation country

514
00:28:13,130 --> 00:28:20,960
built by the Linux community community

515
00:28:16,669 --> 00:28:27,010
and it was introduced in Linux version 4

516
00:28:20,960 --> 00:28:30,190
or maybe 4.5 or 4.4 or maybe later but

517
00:28:27,010 --> 00:28:34,340
since the Google Chrome team has already

518
00:28:30,190 --> 00:28:38,299
back ported to by project it to the

519
00:28:34,340 --> 00:28:40,970
Linux 3.18 so it's enabled on the

520
00:28:38,299 --> 00:28:46,010
Chromebook is very annoying but we need

521
00:28:40,970 --> 00:28:48,350
to bypass it so you can see there is a

522
00:28:46,010 --> 00:28:50,360
boundary check in the function coffee

523
00:28:48,350 --> 00:28:53,090
from user and copy to user by the

524
00:28:50,360 --> 00:28:55,879
instrumentation so copy from user will

525
00:28:53,090 --> 00:28:57,179
firstly call the check by check coffee

526
00:28:55,880 --> 00:29:01,800
size 2

527
00:28:57,180 --> 00:29:05,220
check if is if he's a burnable attack or

528
00:29:01,800 --> 00:29:07,379
it's a normal call so each wheel goes to

529
00:29:05,220 --> 00:29:11,940
this function and this function will do

530
00:29:07,380 --> 00:29:14,580
many check and if you're so if it's copy

531
00:29:11,940 --> 00:29:21,590
a larger buffer to a small buffer size

532
00:29:14,580 --> 00:29:24,600
and it will crash how to bypass it

533
00:29:21,590 --> 00:29:28,770
actually by passing you see is quite

534
00:29:24,600 --> 00:29:31,889
simple because I know previously I copy

535
00:29:28,770 --> 00:29:36,990
a very large size the two thousand bytes

536
00:29:31,890 --> 00:29:39,600
to the object 128 but actually copying

537
00:29:36,990 --> 00:29:42,810
20 bytes is good enough for me to

538
00:29:39,600 --> 00:29:45,929
overwrite the error vector base so this

539
00:29:42,810 --> 00:29:48,030
time I just hope he only 20 bytes and

540
00:29:45,930 --> 00:29:51,690
you can see that is the content I copy

541
00:29:48,030 --> 00:29:53,970
it the first two by refers to zero then

542
00:29:51,690 --> 00:29:56,640
I copy the kernel address and this of

543
00:29:53,970 --> 00:30:00,390
the L vector that's good enough for me

544
00:29:56,640 --> 00:30:03,620
to authorize the kernel memory and it

545
00:30:00,390 --> 00:30:06,420
will not crash anymore even I failed to

546
00:30:03,620 --> 00:30:09,270
spray the heap I still got another

547
00:30:06,420 --> 00:30:11,900
chance to try again so that's good

548
00:30:09,270 --> 00:30:11,900
enough for me

549
00:30:13,640 --> 00:30:21,330
so that's all about the exploitation but

550
00:30:17,610 --> 00:30:27,449
I'd like to show you a demonstration of

551
00:30:21,330 --> 00:30:32,960
this kernel exploit so let's just take a

552
00:30:27,450 --> 00:30:36,090
look at a video so we just start video

553
00:30:32,960 --> 00:30:38,280
so you can see it's in the Gaston mode

554
00:30:36,090 --> 00:30:40,949
in this mode on Chromebook you cannot

555
00:30:38,280 --> 00:30:44,430
install any application and you cannot

556
00:30:40,950 --> 00:30:47,510
install any plug-in of Chrome is just a

557
00:30:44,430 --> 00:30:50,490
simple browser what you can do is just

558
00:30:47,510 --> 00:30:54,420
browse the internet maybe watch a video

559
00:30:50,490 --> 00:30:56,850
or something so but we just enabled the

560
00:30:54,420 --> 00:30:58,980
developer mode so this time I just I

561
00:30:56,850 --> 00:31:01,439
will not show the full exploitation I

562
00:30:58,980 --> 00:31:04,370
just show my own kernel exploit so

563
00:31:01,440 --> 00:31:04,370
everyone able shell

564
00:31:10,610 --> 00:31:15,500
and I'm going to excuse my battery

565
00:31:23,809 --> 00:31:30,928
at least part I just need some time to

566
00:31:26,730 --> 00:31:34,679
spray the heap and just only maybe

567
00:31:30,929 --> 00:31:37,019
several seconds I made it and a root

568
00:31:34,679 --> 00:31:39,299
shell just showing up and you can see

569
00:31:37,019 --> 00:31:48,799
just cause the root privilege of

570
00:31:39,299 --> 00:31:57,539
Chromebook thank you

571
00:31:48,799 --> 00:32:01,289
no sorry not this page okay so that's

572
00:31:57,539 --> 00:32:04,019
the the demonstration so that's all

573
00:32:01,289 --> 00:32:06,480
about my talk I have to thank you for

574
00:32:04,019 --> 00:32:08,490
your home you know also I want to thanks

575
00:32:06,480 --> 00:32:12,120
to the interpreter for helping me to

576
00:32:08,490 --> 00:32:15,480
translate it and here is my twitter ID

577
00:32:12,120 --> 00:32:17,459
and github ID and my gmail if you have

578
00:32:15,480 --> 00:32:20,429
any questions feel free to ask me or

579
00:32:17,460 --> 00:32:23,730
just contact me if you have any interest

580
00:32:20,429 --> 00:32:25,919
in something like Japanese culture or

581
00:32:23,730 --> 00:32:28,289
anime or something else I'd like to talk

582
00:32:25,919 --> 00:32:31,049
with you about it as well and there is a

583
00:32:28,289 --> 00:32:31,649
QR code you can scan it and follow me on

584
00:32:31,049 --> 00:32:35,840
Twitter

585
00:32:31,649 --> 00:32:35,840
thank you that's what

586
00:32:35,910 --> 00:32:38,569
[Applause]

