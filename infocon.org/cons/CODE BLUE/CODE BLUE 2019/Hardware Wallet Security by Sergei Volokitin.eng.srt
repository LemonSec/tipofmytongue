1
00:00:07,150 --> 00:00:12,650
good morning everyone my name is Sergey

2
00:00:10,460 --> 00:00:15,559
I'm from risk Y in the Netherlands I'm a

3
00:00:12,650 --> 00:00:17,870
security analyst so I work on a security

4
00:00:15,559 --> 00:00:21,289
lab we look at all kind of devices so I

5
00:00:17,870 --> 00:00:24,680
focus on smart cards and buy the devices

6
00:00:21,289 --> 00:00:28,070
phones tablets all kind of embedded

7
00:00:24,680 --> 00:00:29,810
systems so that was the reason why I was

8
00:00:28,070 --> 00:00:32,960
interested in Hardware wallets as well

9
00:00:29,810 --> 00:00:36,760
because it's well it's an interesting

10
00:00:32,960 --> 00:00:40,570
target and today I will talk about two

11
00:00:36,760 --> 00:00:44,899
different research devices we took and

12
00:00:40,570 --> 00:00:47,269
the security of analyzed and the attacks

13
00:00:44,899 --> 00:00:52,179
we found to be possible on these devices

14
00:00:47,269 --> 00:00:54,829
so before we go into security and

15
00:00:52,179 --> 00:00:57,309
attacks just a few words about what is a

16
00:00:54,829 --> 00:01:00,859
Hardware wallet if you've never used one

17
00:00:57,309 --> 00:01:03,050
so it is a secure device it stores your

18
00:01:00,859 --> 00:01:05,979
private keys on the device the keys are

19
00:01:03,050 --> 00:01:09,440
normally to your cryptocurrency wallets

20
00:01:05,979 --> 00:01:13,009
the harbor wallet connects to your PC or

21
00:01:09,440 --> 00:01:15,408
a smartphone it has trusted screen where

22
00:01:13,009 --> 00:01:17,840
it shows the transaction what are you're

23
00:01:15,409 --> 00:01:19,880
actually signing you don't want to show

24
00:01:17,840 --> 00:01:22,310
it on your PC or smartphone because you

25
00:01:19,880 --> 00:01:24,920
don't really trust and represent your

26
00:01:22,310 --> 00:01:30,020
screen what is shown on your PC because

27
00:01:24,920 --> 00:01:31,939
of all kind of software running there it

28
00:01:30,020 --> 00:01:34,369
has trusted controls so normally have a

29
00:01:31,939 --> 00:01:36,710
button and this physical button is used

30
00:01:34,369 --> 00:01:38,570
to confirm a transaction and it's on the

31
00:01:36,710 --> 00:01:41,479
device so you can trust that when you

32
00:01:38,570 --> 00:01:46,240
press it it's actually you confirming it

33
00:01:41,479 --> 00:01:49,280
physically normally it has some kind of

34
00:01:46,240 --> 00:01:51,530
protected firmware what that means is

35
00:01:49,280 --> 00:01:53,390
you cannot easily modify it and there is

36
00:01:51,530 --> 00:01:57,770
normally some kind of signature check

37
00:01:53,390 --> 00:02:00,950
and happening on the device and finally

38
00:01:57,770 --> 00:02:03,320
the device is tamper resistant that

39
00:02:00,950 --> 00:02:05,570
means when you have physical access to

40
00:02:03,320 --> 00:02:11,120
the device you cannot easily extract the

41
00:02:05,570 --> 00:02:13,880
secrets from the device how does it look

42
00:02:11,120 --> 00:02:15,830
in real life so there are a number of

43
00:02:13,880 --> 00:02:18,290
different devices all kind of

44
00:02:15,830 --> 00:02:20,420
manufacturers try to solve this problem

45
00:02:18,290 --> 00:02:23,810
of providing

46
00:02:20,420 --> 00:02:27,440
people with a hardware wallet what I can

47
00:02:23,810 --> 00:02:29,750
see here they look a bit different but

48
00:02:27,440 --> 00:02:32,870
overall they do have the features we

49
00:02:29,750 --> 00:02:35,630
mentioned before what we're going to

50
00:02:32,870 --> 00:02:37,280
talk today the most about is two

51
00:02:35,630 --> 00:02:38,720
Hardware wallets they have quite

52
00:02:37,280 --> 00:02:41,060
different architecture so that's a

53
00:02:38,720 --> 00:02:45,190
ledger in an OS we're going to talk

54
00:02:41,060 --> 00:02:50,470
about software tags on this wallet and

55
00:02:45,190 --> 00:02:54,170
keep key again we're going to talk about

56
00:02:50,470 --> 00:02:58,989
Hardware tags as we applied to this

57
00:02:54,170 --> 00:03:02,238
device so who is the attacker who try to

58
00:02:58,989 --> 00:03:04,150
attack your hardware wallet so it could

59
00:03:02,239 --> 00:03:07,670
be somebody who has access to a computer

60
00:03:04,150 --> 00:03:13,160
somebody who can install malware on it

61
00:03:07,670 --> 00:03:15,649
or another user of your PC why the these

62
00:03:13,160 --> 00:03:18,859
people could be attackers it is because

63
00:03:15,650 --> 00:03:20,480
they can send all kind of commands to

64
00:03:18,860 --> 00:03:22,880
your device when you plug it in or

65
00:03:20,480 --> 00:03:28,340
because they can observe communication

66
00:03:22,880 --> 00:03:30,590
between your wallet and PC we're going

67
00:03:28,340 --> 00:03:32,390
to mostly focus on PCs today because

68
00:03:30,590 --> 00:03:35,180
both of the harbor wallets ledger and

69
00:03:32,390 --> 00:03:39,920
keep key they connect via USB tour your

70
00:03:35,180 --> 00:03:42,200
computer another possible attacker

71
00:03:39,920 --> 00:03:43,910
attack vector is somebody who got

72
00:03:42,200 --> 00:03:46,850
physical access to your device

73
00:03:43,910 --> 00:03:49,280
so for example somebody who has access

74
00:03:46,850 --> 00:03:50,709
to a hotel room when you live your

75
00:03:49,280 --> 00:03:53,780
Hardware wallet there on the desk or

76
00:03:50,709 --> 00:03:55,310
somebody who steals the device and they

77
00:03:53,780 --> 00:03:57,680
have it in their possession they can do

78
00:03:55,310 --> 00:04:01,370
whatever to it and there is all kind of

79
00:03:57,680 --> 00:04:03,260
physical attacks possible and finally it

80
00:04:01,370 --> 00:04:04,549
could be somebody who has access before

81
00:04:03,260 --> 00:04:06,709
you go to the device before you

82
00:04:04,549 --> 00:04:08,810
initialize it and started to use it so

83
00:04:06,709 --> 00:04:10,820
the supply chain attacks here and it

84
00:04:08,810 --> 00:04:13,120
could be well it could be evil

85
00:04:10,820 --> 00:04:15,980
government who tries to control how

86
00:04:13,120 --> 00:04:17,660
citizens use cryptocurrencies or it

87
00:04:15,980 --> 00:04:19,668
could be previous owner if you bought

88
00:04:17,660 --> 00:04:21,109
secondhand device from somebody and they

89
00:04:19,668 --> 00:04:22,580
tampered with this and they changed

90
00:04:21,108 --> 00:04:25,340
firmware or they changed something on

91
00:04:22,580 --> 00:04:28,120
the device to later be able to access

92
00:04:25,340 --> 00:04:28,119
your private keys

93
00:04:29,040 --> 00:04:34,650
and finally before we go into attacks

94
00:04:32,430 --> 00:04:37,730
what are the security features how

95
00:04:34,650 --> 00:04:41,429
hardware will is try to make sure that

96
00:04:37,730 --> 00:04:43,980
your assets stay secure well first of

97
00:04:41,430 --> 00:04:45,770
all the most important your private keys

98
00:04:43,980 --> 00:04:50,400
always stay on the device

99
00:04:45,770 --> 00:04:54,060
so normally you generate the keys on the

100
00:04:50,400 --> 00:04:57,630
device you store them securely there in

101
00:04:54,060 --> 00:05:00,000
memory you use them in a secure way so

102
00:04:57,630 --> 00:05:01,830
you sign transactions but you never send

103
00:05:00,000 --> 00:05:04,130
the keys outside the device and then

104
00:05:01,830 --> 00:05:06,450
when you're done with using your

105
00:05:04,130 --> 00:05:08,760
Hardware wallet you can wipe the keys

106
00:05:06,450 --> 00:05:12,240
and then it shouldn't have no trace of

107
00:05:08,760 --> 00:05:13,950
the secrets you had so that's the most

108
00:05:12,240 --> 00:05:15,360
important part when you plug it in into

109
00:05:13,950 --> 00:05:19,200
a computer it doesn't really copy your

110
00:05:15,360 --> 00:05:22,470
keys so it always stays there the second

111
00:05:19,200 --> 00:05:24,180
part is it has a very small API and so

112
00:05:22,470 --> 00:05:27,230
there are only a few commands you can

113
00:05:24,180 --> 00:05:30,240
actually send via the interfaces and

114
00:05:27,230 --> 00:05:32,610
here the simplicity is the key you don't

115
00:05:30,240 --> 00:05:34,200
want to have a very complicated software

116
00:05:32,610 --> 00:05:35,970
running on the device because then it's

117
00:05:34,200 --> 00:05:40,050
very difficult to make it secure so I

118
00:05:35,970 --> 00:05:43,200
want to try to make it as usable for

119
00:05:40,050 --> 00:05:47,340
users and it's secure to protect the

120
00:05:43,200 --> 00:05:49,979
assets then it has a protected memory so

121
00:05:47,340 --> 00:05:51,810
as mentioned before it shouldn't be easy

122
00:05:49,980 --> 00:05:54,390
to extract the keys it will be external

123
00:05:51,810 --> 00:05:56,970
memory when you can just connect to the

124
00:05:54,390 --> 00:05:57,690
wires and get the keys right away or

125
00:05:56,970 --> 00:06:03,060
something like that

126
00:05:57,690 --> 00:06:05,910
and finally the secure boot or some kind

127
00:06:03,060 --> 00:06:08,270
of protected bootloader is normally on

128
00:06:05,910 --> 00:06:11,220
the device so you can verify

129
00:06:08,270 --> 00:06:15,289
authenticate the firmware upon every

130
00:06:11,220 --> 00:06:15,290
boot and when you apply firmware updates

131
00:06:16,160 --> 00:06:23,990
so that's all the features and now we're

132
00:06:20,070 --> 00:06:26,370
going to go and see what are the

133
00:06:23,990 --> 00:06:28,260
software attacks possible and we're

134
00:06:26,370 --> 00:06:30,330
going to take a look at a ledger for

135
00:06:28,260 --> 00:06:33,630
software attacks so that's how the

136
00:06:30,330 --> 00:06:35,840
device looks like you plug it in here to

137
00:06:33,630 --> 00:06:38,070
your USB port on the left you have the

138
00:06:35,840 --> 00:06:41,580
screenshot of the screen it's just

139
00:06:38,070 --> 00:06:42,420
Chrome extension and you enter your PIN

140
00:06:41,580 --> 00:06:44,550
you have three

141
00:06:42,420 --> 00:06:45,960
attempts to enter it correctly and then

142
00:06:44,550 --> 00:06:48,270
you have multiple applications on the

143
00:06:45,960 --> 00:06:51,630
device so what's important here is that

144
00:06:48,270 --> 00:06:53,039
this wallet supports multi third-party

145
00:06:51,630 --> 00:06:55,350
applications and they have their own

146
00:06:53,040 --> 00:06:57,600
store from which you can load a new

147
00:06:55,350 --> 00:06:59,430
application any it supports like five or

148
00:06:57,600 --> 00:07:04,680
something depends on the memory how much

149
00:06:59,430 --> 00:07:07,320
they use so how does it look inside

150
00:07:04,680 --> 00:07:12,840
inside of a hardware wallet of this one

151
00:07:07,320 --> 00:07:15,960
they have two chips so there is MCU just

152
00:07:12,840 --> 00:07:19,739
a microcontroller which mostly used as a

153
00:07:15,960 --> 00:07:22,289
proxy so it handles the screen it

154
00:07:19,740 --> 00:07:25,500
handles the button presses it handles

155
00:07:22,290 --> 00:07:30,690
USB communication and over serial here

156
00:07:25,500 --> 00:07:33,240
it talks to the secure element so MCU is

157
00:07:30,690 --> 00:07:35,340
not really a very secure chip and it's

158
00:07:33,240 --> 00:07:38,250
used here it doesn't store any secrets

159
00:07:35,340 --> 00:07:40,320
and use just two forward communication

160
00:07:38,250 --> 00:07:42,660
you cannot directly connect to the

161
00:07:40,320 --> 00:07:45,690
secure element the screen because it

162
00:07:42,660 --> 00:07:48,630
only has serial interface so it's very

163
00:07:45,690 --> 00:07:51,240
simple cheap but it provides very high

164
00:07:48,630 --> 00:07:56,180
level of protection against physical

165
00:07:51,240 --> 00:08:00,440
attacks on the secure element you have

166
00:07:56,180 --> 00:08:03,270
nos a very very simple operating system

167
00:08:00,440 --> 00:08:05,550
it is a trusted execution environment

168
00:08:03,270 --> 00:08:06,539
and you have a number of applications

169
00:08:05,550 --> 00:08:08,340
which we've seen before in the previous

170
00:08:06,540 --> 00:08:11,130
slide you have number of different

171
00:08:08,340 --> 00:08:15,359
applications installed and this dotted

172
00:08:11,130 --> 00:08:16,770
line here it means that your operating

173
00:08:15,360 --> 00:08:19,020
system of the hardware wallet on the

174
00:08:16,770 --> 00:08:21,630
secure element it is meant to provide

175
00:08:19,020 --> 00:08:23,909
isolation so the idea is you do not

176
00:08:21,630 --> 00:08:26,250
really hundred percent trust every

177
00:08:23,910 --> 00:08:29,490
wallet on the device and if one of them

178
00:08:26,250 --> 00:08:32,580
is compromised or is malicious you don't

179
00:08:29,490 --> 00:08:34,919
want them to cause security issues to

180
00:08:32,580 --> 00:08:36,930
other applications or to the operating

181
00:08:34,919 --> 00:08:38,669
system itself so it's similar to the

182
00:08:36,929 --> 00:08:41,750
approach of all the operating systems

183
00:08:38,669 --> 00:08:47,459
your smartphone when installed apps from

184
00:08:41,750 --> 00:08:49,800
App Store and so on but so utterly

185
00:08:47,460 --> 00:08:53,190
trusted what can we do as an attacker

186
00:08:49,800 --> 00:08:54,829
when we have our application installed

187
00:08:53,190 --> 00:08:56,410
so the nice thing here is that

188
00:08:54,830 --> 00:08:59,280
manufacturer provided

189
00:08:56,410 --> 00:09:01,300
and as decay so you can make your own

190
00:08:59,280 --> 00:09:06,449
applications you can install them on

191
00:09:01,300 --> 00:09:08,620
your device you can see what they can do

192
00:09:06,450 --> 00:09:10,120
the way it looks like when you install

193
00:09:08,620 --> 00:09:15,040
it on the device so you have a gradient

194
00:09:10,120 --> 00:09:17,290
system and your app is in memory so you

195
00:09:15,040 --> 00:09:19,560
get some memory you get flash when you

196
00:09:17,290 --> 00:09:23,199
install the application and you get some

197
00:09:19,560 --> 00:09:25,119
RAM memory normally by default you get

198
00:09:23,200 --> 00:09:27,700
like 16 kilobyte of flash and 1 kilobyte

199
00:09:25,120 --> 00:09:30,910
of RAM and there's memory protection

200
00:09:27,700 --> 00:09:32,920
unit and it is meant to make sure that

201
00:09:30,910 --> 00:09:35,350
your application can never access memory

202
00:09:32,920 --> 00:09:37,060
which is not meant to access so for

203
00:09:35,350 --> 00:09:39,280
example you cannot access operating

204
00:09:37,060 --> 00:09:42,369
system memory you cannot access memory

205
00:09:39,280 --> 00:09:45,040
of other applications and of course you

206
00:09:42,370 --> 00:09:46,930
have to have syscalls because if you

207
00:09:45,040 --> 00:09:49,680
want to do some more advanced operations

208
00:09:46,930 --> 00:09:51,670
than just simple commands in your code

209
00:09:49,680 --> 00:09:55,120
for example when you want to compute

210
00:09:51,670 --> 00:09:57,849
hash of some buffer or when you want to

211
00:09:55,120 --> 00:10:02,620
use script engine hardware crypt engine

212
00:09:57,850 --> 00:10:05,620
you will send the Cisco to the OS to do

213
00:10:02,620 --> 00:10:10,690
that and then RS verifies if you have

214
00:10:05,620 --> 00:10:12,880
rights to do this on this memory which

215
00:10:10,690 --> 00:10:16,090
is also very nice attack surface you

216
00:10:12,880 --> 00:10:17,890
have more than 100 system calls a lot of

217
00:10:16,090 --> 00:10:22,090
them take multiple parameters so there

218
00:10:17,890 --> 00:10:23,530
is a lot to explore there so that's we

219
00:10:22,090 --> 00:10:28,600
found a number of vulnerabilities on the

220
00:10:23,530 --> 00:10:31,420
device 7 in total some of them like the

221
00:10:28,600 --> 00:10:35,080
system correlated ones they resulted in

222
00:10:31,420 --> 00:10:36,729
some memory disclosure of operating

223
00:10:35,080 --> 00:10:38,310
system and other applications but we're

224
00:10:36,730 --> 00:10:40,210
not going to really focus today on that

225
00:10:38,310 --> 00:10:42,280
we're also not going to talk about

226
00:10:40,210 --> 00:10:44,440
supply chain attack which was possible

227
00:10:42,280 --> 00:10:47,800
in the device we'll just talk about - as

228
00:10:44,440 --> 00:10:51,730
an example what you can do and why it

229
00:10:47,800 --> 00:10:54,370
often happens that your security small

230
00:10:51,730 --> 00:10:56,950
security issues on the device can result

231
00:10:54,370 --> 00:11:00,340
in a bigger attack so we're going to

232
00:10:56,950 --> 00:11:06,070
talk about debug applications and the

233
00:11:00,340 --> 00:11:07,780
wipe process so what is the debug app so

234
00:11:06,070 --> 00:11:09,570
we've done this research black box

235
00:11:07,780 --> 00:11:12,500
without knowing

236
00:11:09,570 --> 00:11:14,430
there or s-works OS is close source

237
00:11:12,500 --> 00:11:15,810
manufacturer doesn't release the source

238
00:11:14,430 --> 00:11:18,989
code so you don't really know what it

239
00:11:15,810 --> 00:11:20,670
does exactly the applications though

240
00:11:18,990 --> 00:11:22,350
they are open source so you can see

241
00:11:20,670 --> 00:11:25,050
their code but not the operating system

242
00:11:22,350 --> 00:11:26,580
and that's something you can see an SDK

243
00:11:25,050 --> 00:11:28,979
that's what it says so you can install

244
00:11:26,580 --> 00:11:30,690
debug app providing this flag when you

245
00:11:28,980 --> 00:11:32,850
install it when you install your

246
00:11:30,690 --> 00:11:36,540
application and then you can dump some

247
00:11:32,850 --> 00:11:38,340
core arm register it's not very detailed

248
00:11:36,540 --> 00:11:40,949
description you don't really know what

249
00:11:38,340 --> 00:11:43,320
it does but you can try that install and

250
00:11:40,950 --> 00:11:45,570
see if you can access some extra memory

251
00:11:43,320 --> 00:11:49,920
or some registers and so on so that's

252
00:11:45,570 --> 00:11:53,790
what we tried and so what we found out

253
00:11:49,920 --> 00:11:56,040
is that your debug application due to

254
00:11:53,790 --> 00:11:58,469
miss configuration of memory protection

255
00:11:56,040 --> 00:12:01,740
unit could actually read more memory

256
00:11:58,470 --> 00:12:03,630
than it's supposed to so normally when

257
00:12:01,740 --> 00:12:05,760
you have your application here you have

258
00:12:03,630 --> 00:12:07,680
boundaries of this 16 kilobyte this is

259
00:12:05,760 --> 00:12:09,480
flash memory and that's what it can read

260
00:12:07,680 --> 00:12:13,140
if you try to read something outside you

261
00:12:09,480 --> 00:12:15,290
get an exception what happens to debug

262
00:12:13,140 --> 00:12:18,090
app it can actually read a bit more

263
00:12:15,290 --> 00:12:19,709
before the application the application

264
00:12:18,090 --> 00:12:21,360
is also installed sequentially on the

265
00:12:19,710 --> 00:12:24,750
device in flash they just follow each

266
00:12:21,360 --> 00:12:26,610
other so if you install the debug app

267
00:12:24,750 --> 00:12:29,940
you can read memory of another

268
00:12:26,610 --> 00:12:31,830
application which is very convenient so

269
00:12:29,940 --> 00:12:33,330
you can dump a bit of flash the nice

270
00:12:31,830 --> 00:12:37,530
part you can also repeat this process

271
00:12:33,330 --> 00:12:39,390
you can do it you can delete the

272
00:12:37,530 --> 00:12:41,550
previous application install the debug

273
00:12:39,390 --> 00:12:44,430
application again dump a bit more of the

274
00:12:41,550 --> 00:12:48,930
memory and continue it again and even

275
00:12:44,430 --> 00:12:52,189
dumb system flash so that's a nice thing

276
00:12:48,930 --> 00:12:55,439
that we can do that that's clearly a

277
00:12:52,190 --> 00:12:57,420
security issue because application not

278
00:12:55,440 --> 00:13:00,420
supposed to access memory of other

279
00:12:57,420 --> 00:13:03,209
applications or the system but all you

280
00:13:00,420 --> 00:13:06,209
can do is read a bit more of other apps

281
00:13:03,210 --> 00:13:07,530
and the problem here is to install

282
00:13:06,210 --> 00:13:09,120
application to install the debug

283
00:13:07,530 --> 00:13:12,180
application you need to know the pin

284
00:13:09,120 --> 00:13:13,470
code but if you know pin code what's the

285
00:13:12,180 --> 00:13:15,239
point like you already have pin code you

286
00:13:13,470 --> 00:13:18,420
can do whatever on the device so that

287
00:13:15,240 --> 00:13:20,070
issue is not that big on its own you

288
00:13:18,420 --> 00:13:22,550
cannot really exploit it in any real

289
00:13:20,070 --> 00:13:25,190
life scenario but

290
00:13:22,550 --> 00:13:28,010
the next issue found is the white

291
00:13:25,190 --> 00:13:33,170
process so that's something I would like

292
00:13:28,010 --> 00:13:37,100
to show a small demo on the video if it

293
00:13:33,170 --> 00:13:41,410
works yes so what you see here that's

294
00:13:37,100 --> 00:13:44,120
the device so first we're just gonna

295
00:13:41,410 --> 00:13:45,079
unlock it with a correct pin and you can

296
00:13:44,120 --> 00:13:47,000
see that there is a number of

297
00:13:45,080 --> 00:13:48,740
applications already installed this is

298
00:13:47,000 --> 00:13:53,180
our own application we just call it evil

299
00:13:48,740 --> 00:13:54,589
coin that's our what we install there so

300
00:13:53,180 --> 00:13:56,689
that's what you have on your device

301
00:13:54,589 --> 00:13:58,610
before then if you enter your PIN three

302
00:13:56,690 --> 00:14:00,709
times incorrectly you can think of an

303
00:13:58,610 --> 00:14:02,300
attacker who stole your device they try

304
00:14:00,709 --> 00:14:05,329
to unlock it they try to guess the pin

305
00:14:02,300 --> 00:14:09,319
and they fail three times what is going

306
00:14:05,330 --> 00:14:13,670
to happen then it is going to show that

307
00:14:09,320 --> 00:14:17,420
you reach the attempt counter and the

308
00:14:13,670 --> 00:14:19,160
device is going to be wiped so that's

309
00:14:17,420 --> 00:14:21,170
what can happen to anybody

310
00:14:19,160 --> 00:14:23,089
once you stole the device you don't need

311
00:14:21,170 --> 00:14:28,310
to know the pin you try to guess you

312
00:14:23,089 --> 00:14:32,329
fail you reset the device what happens

313
00:14:28,310 --> 00:14:34,369
then once you fail to enter the pin it

314
00:14:32,329 --> 00:14:36,349
resets the settings you see the it's

315
00:14:34,370 --> 00:14:39,410
flip now because it is has the setting

316
00:14:36,350 --> 00:14:41,600
of the screen orientation orientation

317
00:14:39,410 --> 00:14:42,770
and then it tells you to configure if

318
00:14:41,600 --> 00:14:45,500
you would like to configure the device

319
00:14:42,770 --> 00:14:47,449
as a new one so you can set the new pin

320
00:14:45,500 --> 00:14:51,940
which you want to use it started already

321
00:14:47,450 --> 00:14:56,630
wiped itself and then it just shows you

322
00:14:51,940 --> 00:14:58,720
the generated set of words this is your

323
00:14:56,630 --> 00:15:02,510
sentence which corresponds to the master

324
00:14:58,720 --> 00:15:04,550
seed so that's your main secret but what

325
00:15:02,510 --> 00:15:06,819
you can see after is that you can see

326
00:15:04,550 --> 00:15:09,529
that the flash is still there so

327
00:15:06,820 --> 00:15:11,690
although they wipe the device so they

328
00:15:09,529 --> 00:15:13,490
wipe the master seed which is used to

329
00:15:11,690 --> 00:15:16,070
derive the keys for example your Bitcoin

330
00:15:13,490 --> 00:15:21,110
or their iam application is going to

331
00:15:16,070 --> 00:15:23,329
derive the the keys at runtime using the

332
00:15:21,110 --> 00:15:25,310
master seed which is wiped so that you

333
00:15:23,329 --> 00:15:28,279
cannot will attack but you can see that

334
00:15:25,310 --> 00:15:29,959
it this flash is still there so what can

335
00:15:28,279 --> 00:15:31,939
we find in flash is there something

336
00:15:29,959 --> 00:15:35,150
interesting or everybody drives there

337
00:15:31,940 --> 00:15:36,499
are keys at runtime if they would then

338
00:15:35,150 --> 00:15:38,329
well that's all

339
00:15:36,499 --> 00:15:40,969
so not much you can get but what I

340
00:15:38,329 --> 00:15:42,909
mentioned before we have open source

341
00:15:40,969 --> 00:15:45,739
application so for example this is

342
00:15:42,909 --> 00:15:49,609
second factor authentication app which

343
00:15:45,739 --> 00:15:53,449
manufacturers also provided and you can

344
00:15:49,609 --> 00:15:56,809
see this application uses non-volatile

345
00:15:53,449 --> 00:16:01,008
memory right system call to write a

346
00:15:56,809 --> 00:16:02,868
smart key in flash so what it means if

347
00:16:01,009 --> 00:16:03,229
you have this application and you used

348
00:16:02,869 --> 00:16:06,829
it

349
00:16:03,229 --> 00:16:08,689
what is going to keep in flash is the a

350
00:16:06,829 --> 00:16:12,498
smart key of your second factor

351
00:16:08,689 --> 00:16:14,539
authentication so an attacker who can do

352
00:16:12,499 --> 00:16:16,639
what we just showed before who can steal

353
00:16:14,539 --> 00:16:19,039
the device from you who can try to guess

354
00:16:16,639 --> 00:16:21,919
the pin if he succeeds unlikely but

355
00:16:19,039 --> 00:16:27,589
possible then he has full access to the

356
00:16:21,919 --> 00:16:29,989
device if he fails he can try to

357
00:16:27,589 --> 00:16:31,839
initialize devices new install debug

358
00:16:29,989 --> 00:16:35,509
application and actually read the memory

359
00:16:31,839 --> 00:16:38,089
including some of the secret keys on the

360
00:16:35,509 --> 00:16:40,909
device so that's one of the examples we

361
00:16:38,089 --> 00:16:46,220
also found that some other applications

362
00:16:40,909 --> 00:16:48,769
use this method of storing the private

363
00:16:46,220 --> 00:16:51,769
keys or secret keys for example manera

364
00:16:48,769 --> 00:16:53,929
application which was better that moment

365
00:16:51,769 --> 00:16:57,379
they also stored the key in flash they

366
00:16:53,929 --> 00:17:00,319
couldn't derive it at runtime or PGP

367
00:16:57,379 --> 00:17:05,389
application also stored the key in flash

368
00:17:00,319 --> 00:17:07,579
so you can see here that two simple bugs

369
00:17:05,388 --> 00:17:09,648
which are not big deal on its own well

370
00:17:07,579 --> 00:17:12,948
they're bad but they cannot be exploited

371
00:17:09,648 --> 00:17:16,069
right away combined together could lead

372
00:17:12,949 --> 00:17:18,610
to a real-life scenario attack so that's

373
00:17:16,069 --> 00:17:22,490
something would like to show today on

374
00:17:18,609 --> 00:17:25,250
Hardware wallet software attacks what

375
00:17:22,490 --> 00:17:28,339
would be the conclusion of this talk

376
00:17:25,250 --> 00:17:29,929
well software cannot be trusted you no

377
00:17:28,339 --> 00:17:32,869
matter how hard you try you always have

378
00:17:29,929 --> 00:17:36,139
bugs you just need to try to manage it

379
00:17:32,869 --> 00:17:38,860
in the best way you can and try to limit

380
00:17:36,139 --> 00:17:43,820
the attack surface of an attacker and

381
00:17:38,860 --> 00:17:45,889
I'll handle the bugs as they come well

382
00:17:43,820 --> 00:17:50,350
is it the end for hardware wallets

383
00:17:45,889 --> 00:17:55,990
that's not yet dent so that's an

384
00:17:50,350 --> 00:17:58,030
the case I would like to show what

385
00:17:55,990 --> 00:17:59,710
you're gonna do if you cannot find a

386
00:17:58,030 --> 00:18:01,928
software bug so if there is a

387
00:17:59,710 --> 00:18:04,929
exploitable bug that's easy you can just

388
00:18:01,929 --> 00:18:06,700
exploit it and you are done but what if

389
00:18:04,929 --> 00:18:09,070
there is nothing you can find does it

390
00:18:06,700 --> 00:18:12,850
mean that the hardware wallet is secure

391
00:18:09,070 --> 00:18:17,200
against any attacker so that's another

392
00:18:12,850 --> 00:18:20,080
hardware wallet that's keep key it has a

393
00:18:17,200 --> 00:18:23,320
bit of different architecture so it has

394
00:18:20,080 --> 00:18:27,070
only one chip unlike previous one ledger

395
00:18:23,320 --> 00:18:29,408
it only has stm32 and this is just a

396
00:18:27,070 --> 00:18:32,590
microcontroller which is quite common to

397
00:18:29,409 --> 00:18:36,190
all kind of IOT devices it's not meant

398
00:18:32,590 --> 00:18:40,629
as a very secure device it just it's

399
00:18:36,190 --> 00:18:43,720
good enough for some purposes so there

400
00:18:40,630 --> 00:18:46,539
are a number of commands available for

401
00:18:43,720 --> 00:18:50,950
you to send from your PC via USB to the

402
00:18:46,539 --> 00:18:53,890
device and it is fully open source you

403
00:18:50,950 --> 00:18:57,039
can see firmware and bootloader on

404
00:18:53,890 --> 00:19:01,480
github you can have all the code you

405
00:18:57,039 --> 00:19:03,490
want and it has protected boot the same

406
00:19:01,480 --> 00:19:05,500
way as we mentioned before so upon both

407
00:19:03,490 --> 00:19:07,480
there verify signature that you execute

408
00:19:05,500 --> 00:19:09,520
exactly the code which you meant to

409
00:19:07,480 --> 00:19:13,059
execute so you cannot just easily change

410
00:19:09,520 --> 00:19:15,850
it to something else how does it look

411
00:19:13,059 --> 00:19:19,658
you can see here here you have similar

412
00:19:15,850 --> 00:19:22,870
picture this is the sentence for your

413
00:19:19,659 --> 00:19:25,240
backup which corresponds to the master

414
00:19:22,870 --> 00:19:27,879
seed and that's your pin so you actually

415
00:19:25,240 --> 00:19:29,289
type your PIN from your computer it only

416
00:19:27,880 --> 00:19:32,799
has one button here to confirm

417
00:19:29,289 --> 00:19:34,390
transactions but it is crumbled so your

418
00:19:32,799 --> 00:19:36,639
malware cannot easily figure out what

419
00:19:34,390 --> 00:19:38,590
you pin because you just have to see the

420
00:19:36,640 --> 00:19:40,480
randomly scrambled pin and then you

421
00:19:38,590 --> 00:19:44,350
enter from your PC from the new pad and

422
00:19:40,480 --> 00:19:47,530
then your unlocking your device that's

423
00:19:44,350 --> 00:19:50,559
for the way it's used it's not very big

424
00:19:47,530 --> 00:19:54,190
difference here so that's the chip you

425
00:19:50,559 --> 00:19:56,200
have single chip as I mentioned stm32 it

426
00:19:54,190 --> 00:19:59,559
has internal flash so you cannot really

427
00:19:56,200 --> 00:20:01,720
read the memory the flash is protected

428
00:19:59,559 --> 00:20:03,940
so you cannot connect with the JTAG or

429
00:20:01,720 --> 00:20:05,530
something

430
00:20:03,940 --> 00:20:07,210
here's the layout of your flesh so it

431
00:20:05,530 --> 00:20:11,470
has some secure storage it has

432
00:20:07,210 --> 00:20:13,330
bootloaders it has firmware all within

433
00:20:11,470 --> 00:20:21,160
this one megabyte of flesh internally on

434
00:20:13,330 --> 00:20:23,679
the sock so why would we try to use a

435
00:20:21,160 --> 00:20:26,050
hardware attack on this device well it

436
00:20:23,680 --> 00:20:28,540
is a popular open source project so a

437
00:20:26,050 --> 00:20:30,520
lot of people look at the firmware they

438
00:20:28,540 --> 00:20:32,590
have a bug bounty so a lot of people

439
00:20:30,520 --> 00:20:35,410
reported bugs in the software

440
00:20:32,590 --> 00:20:39,070
it was patched over time

441
00:20:35,410 --> 00:20:41,980
all the easy issues are solved and it

442
00:20:39,070 --> 00:20:45,389
has a microcontroller general-purpose

443
00:20:41,980 --> 00:20:47,740
MCU so it's not really very secure

444
00:20:45,390 --> 00:20:51,850
against hardware tax it was not

445
00:20:47,740 --> 00:20:54,130
developed this way so that's exactly the

446
00:20:51,850 --> 00:20:58,270
place when an attacker can try and use

447
00:20:54,130 --> 00:21:02,140
some of the hardware tax what can you do

448
00:20:58,270 --> 00:21:05,290
with the hardware so what we got today

449
00:21:02,140 --> 00:21:09,340
talk about today briefly is what is a

450
00:21:05,290 --> 00:21:12,250
fault injection or glitching so normally

451
00:21:09,340 --> 00:21:15,159
your hardware expects to some conditions

452
00:21:12,250 --> 00:21:18,520
to execute properly for example it

453
00:21:15,160 --> 00:21:21,460
expects stable clock it expects normal

454
00:21:18,520 --> 00:21:24,910
voltage it expect expects that there is

455
00:21:21,460 --> 00:21:28,480
no e/m pulses happening around do it

456
00:21:24,910 --> 00:21:32,950
nobody shoots laser at it or nobody sets

457
00:21:28,480 --> 00:21:36,190
it on fire or puts it in a freezer so

458
00:21:32,950 --> 00:21:37,750
that's a normal condition of your device

459
00:21:36,190 --> 00:21:39,670
that's how you want to use it if you're

460
00:21:37,750 --> 00:21:41,950
a user but for an attacker you don't

461
00:21:39,670 --> 00:21:43,660
really have to do that you can do

462
00:21:41,950 --> 00:21:46,990
anything to the chip and hope you can

463
00:21:43,660 --> 00:21:48,370
get some secrets out of it so what

464
00:21:46,990 --> 00:21:50,080
thermal happens for example you can

465
00:21:48,370 --> 00:21:52,510
provide very unstable clock on some

466
00:21:50,080 --> 00:21:56,139
devices and that would mean that

467
00:21:52,510 --> 00:21:59,260
sometimes there corruptions happening if

468
00:21:56,140 --> 00:22:01,900
you can control your glitch precisely so

469
00:21:59,260 --> 00:22:04,750
doing it for very short time for this

470
00:22:01,900 --> 00:22:07,210
exact instruction which is executed then

471
00:22:04,750 --> 00:22:10,680
you can just try to affect this specific

472
00:22:07,210 --> 00:22:14,710
instruction you want to bypass and

473
00:22:10,680 --> 00:22:16,720
normally what happens is you can corrupt

474
00:22:14,710 --> 00:22:17,860
data on the line if you do it in a

475
00:22:16,720 --> 00:22:20,080
specific moment for very

476
00:22:17,860 --> 00:22:23,139
short poles you can just corrupt one or

477
00:22:20,080 --> 00:22:28,000
few bytes of data when it's read from

478
00:22:23,140 --> 00:22:29,650
memory or write written to memory you

479
00:22:28,000 --> 00:22:32,110
can try to similar way corrupt

480
00:22:29,650 --> 00:22:34,030
instructions so instead of executing one

481
00:22:32,110 --> 00:22:36,820
assembly instruction is going to execute

482
00:22:34,030 --> 00:22:38,920
another one or you can try to skip

483
00:22:36,820 --> 00:22:40,899
instruction which is just one of the

484
00:22:38,920 --> 00:22:43,059
cases of corrupt instructions because

485
00:22:40,900 --> 00:22:46,660
for example if you corrupt move

486
00:22:43,059 --> 00:22:48,760
instruction r0 to r1 to move our zero

487
00:22:46,660 --> 00:22:52,690
zero we just skip in this instruction so

488
00:22:48,760 --> 00:22:54,580
doing nothing for this clock that's most

489
00:22:52,690 --> 00:22:56,679
common corruptions which you can expect

490
00:22:54,580 --> 00:23:00,850
and you can normally expect it with all

491
00:22:56,679 --> 00:23:03,190
kind of fault injection methods so for

492
00:23:00,850 --> 00:23:05,230
example if you use clock if you use

493
00:23:03,190 --> 00:23:06,549
voltage if use a.m. or laser

494
00:23:05,230 --> 00:23:09,160
normally you can see more or less

495
00:23:06,549 --> 00:23:13,418
similar picture it's not as precise all

496
00:23:09,160 --> 00:23:15,309
of them to the same level so what we're

497
00:23:13,419 --> 00:23:19,330
going to talk today is electromagnetic

498
00:23:15,309 --> 00:23:21,549
fault injection so first thing you do if

499
00:23:19,330 --> 00:23:23,918
you want to try to use a hardware attack

500
00:23:21,549 --> 00:23:26,679
well you need to open the device you can

501
00:23:23,919 --> 00:23:29,890
see the awful job I did here almost

502
00:23:26,679 --> 00:23:33,040
broke the PCB I won't try to open it but

503
00:23:29,890 --> 00:23:35,110
well when it's out job is done the most

504
00:23:33,040 --> 00:23:37,090
difficult part is over you just build

505
00:23:35,110 --> 00:23:39,340
the set up like that that's a horrible

506
00:23:37,090 --> 00:23:43,418
mess I had on my desk for like half a

507
00:23:39,340 --> 00:23:46,990
year well playing with this what do you

508
00:23:43,419 --> 00:23:49,000
see here you have your glitcher that's

509
00:23:46,990 --> 00:23:51,220
the device which actually creates

510
00:23:49,000 --> 00:23:54,250
ampoules there is a coral on top here

511
00:23:51,220 --> 00:23:56,710
and just a bunch of capacitors there is

512
00:23:54,250 --> 00:23:58,860
another device which provides signals so

513
00:23:56,710 --> 00:24:04,140
it's pretty much a fancy FPGA

514
00:23:58,860 --> 00:24:07,449
it provides a very precise low jitter

515
00:24:04,140 --> 00:24:10,330
signals so you can specify exactly when

516
00:24:07,450 --> 00:24:13,000
you want to send a signal and there's X

517
00:24:10,330 --> 00:24:14,949
Y that stable so later on this glitcher

518
00:24:13,000 --> 00:24:18,070
goes on top of XY z-- that so you can

519
00:24:14,950 --> 00:24:19,900
move precisely on top of the chip to try

520
00:24:18,070 --> 00:24:22,689
to bleach it and the device there itself

521
00:24:19,900 --> 00:24:26,280
in the middle locked in exercise that

522
00:24:22,690 --> 00:24:26,280
stable station

523
00:24:26,520 --> 00:24:29,670
and there's a scope if you want to

524
00:24:28,350 --> 00:24:32,340
measure the signal and see what exactly

525
00:24:29,670 --> 00:24:35,220
happens on the device so we have the

526
00:24:32,340 --> 00:24:37,949
device we have the equipment to glitch

527
00:24:35,220 --> 00:24:39,540
where do we reach so we need to decide

528
00:24:37,950 --> 00:24:41,880
when exactly do we need to send this

529
00:24:39,540 --> 00:24:43,560
pulse and of course as an attacker you

530
00:24:41,880 --> 00:24:45,780
know only so much about what actually

531
00:24:43,560 --> 00:24:49,260
happens on a very low level of your

532
00:24:45,780 --> 00:24:51,810
hardware so you see that this is a deep

533
00:24:49,260 --> 00:24:54,480
last line of your USB when you send

534
00:24:51,810 --> 00:24:56,580
commands from your PC you can see here

535
00:24:54,480 --> 00:24:58,740
the command and here the response you

536
00:24:56,580 --> 00:25:01,470
get back and there is one millisecond in

537
00:24:58,740 --> 00:25:05,880
between and somewhere here is happening

538
00:25:01,470 --> 00:25:07,950
the operation which you want to try to

539
00:25:05,880 --> 00:25:10,200
glitch we're going to talk later what

540
00:25:07,950 --> 00:25:12,030
exactly we try to affect here

541
00:25:10,200 --> 00:25:14,760
but for now so you don't know when

542
00:25:12,030 --> 00:25:18,450
exactly you cannot find it better so

543
00:25:14,760 --> 00:25:20,010
what you can do is try to brute force

544
00:25:18,450 --> 00:25:22,470
these parameters so you just tried to

545
00:25:20,010 --> 00:25:24,690
bleach with different offsets you start

546
00:25:22,470 --> 00:25:26,700
here somewhere from the command you wait

547
00:25:24,690 --> 00:25:28,410
for some clocks and then you try to

548
00:25:26,700 --> 00:25:30,510
glitch there and see what the results

549
00:25:28,410 --> 00:25:35,150
are and then you try to optimize the

550
00:25:30,510 --> 00:25:35,150
parameters to get the best out of it

551
00:25:35,390 --> 00:25:43,770
so what do we see so that's a picture of

552
00:25:40,490 --> 00:25:45,720
full scan of the chip with a some simple

553
00:25:43,770 --> 00:25:47,100
command so that's characterization

554
00:25:45,720 --> 00:25:52,590
that's what you often do when they try

555
00:25:47,100 --> 00:25:54,449
to use fault injection so what's used

556
00:25:52,590 --> 00:25:56,370
here is a simple command so hardware

557
00:25:54,450 --> 00:26:00,030
well it provides you with a command ping

558
00:25:56,370 --> 00:26:01,649
which is just you send a string and you

559
00:26:00,030 --> 00:26:03,660
get the string back so I just send a

560
00:26:01,650 --> 00:26:05,370
hello world and I get it back and that

561
00:26:03,660 --> 00:26:07,740
just means it works as expected and

562
00:26:05,370 --> 00:26:10,770
that's the green dots here the yellow

563
00:26:07,740 --> 00:26:13,440
dots on this picture the ones when you

564
00:26:10,770 --> 00:26:15,240
send the command you attempt to glitch

565
00:26:13,440 --> 00:26:17,600
with the specific parameters in this

566
00:26:15,240 --> 00:26:20,910
location with a specific power and

567
00:26:17,600 --> 00:26:23,580
specific delay from the command you sent

568
00:26:20,910 --> 00:26:26,370
and what happens there is no response so

569
00:26:23,580 --> 00:26:27,960
the yellow dot means you just muted the

570
00:26:26,370 --> 00:26:30,899
device may be corrupted too much or the

571
00:26:27,960 --> 00:26:33,890
corruption is not really good one so the

572
00:26:30,900 --> 00:26:36,630
way you affected it actually a result in

573
00:26:33,890 --> 00:26:38,310
reset of the device and the most

574
00:26:36,630 --> 00:26:39,990
interesting ones are the red dots here

575
00:26:38,310 --> 00:26:40,409
you can see if you on the left side and

576
00:26:39,990 --> 00:26:44,460
on the right

577
00:26:40,410 --> 00:26:48,600
site and what they correspond to is the

578
00:26:44,460 --> 00:26:50,700
actual corruptions so you send this

579
00:26:48,600 --> 00:26:53,070
string a specific command for this case

580
00:26:50,700 --> 00:26:54,510
and you get something back but it's not

581
00:26:53,070 --> 00:26:56,429
what you expected that's not the string

582
00:26:54,510 --> 00:27:01,830
you've sent for the ping command it's

583
00:26:56,430 --> 00:27:04,350
just something different and that's what

584
00:27:01,830 --> 00:27:07,230
we want to do that's the kind of effects

585
00:27:04,350 --> 00:27:09,840
who want to have from the device to try

586
00:27:07,230 --> 00:27:14,100
to change it's a normal execution to

587
00:27:09,840 --> 00:27:17,550
what we try to affect so I'll just show

588
00:27:14,100 --> 00:27:20,490
a small video here of the process just

589
00:27:17,550 --> 00:27:22,800
to give some feeling of how it works

590
00:27:20,490 --> 00:27:24,720
this is not in the XY that table anymore

591
00:27:22,800 --> 00:27:26,820
just took it out to see if I can be as

592
00:27:24,720 --> 00:27:31,170
effective just moving it by hand I

593
00:27:26,820 --> 00:27:35,120
wasn't but you can see here the glitcher

594
00:27:31,170 --> 00:27:39,930
here on the horizontally this is the

595
00:27:35,120 --> 00:27:42,030
FPGA and you can see here the commands

596
00:27:39,930 --> 00:27:44,130
we send so the green light is barely

597
00:27:42,030 --> 00:27:46,710
visible but the green means that just

598
00:27:44,130 --> 00:27:48,840
the string we get back back is what

599
00:27:46,710 --> 00:27:54,420
expected and yellow is that there is

600
00:27:48,840 --> 00:27:57,449
reset and that's the USB communication I

601
00:27:54,420 --> 00:27:59,340
believe and that's the command we send

602
00:27:57,450 --> 00:28:03,710
that's where we glitch you can see this

603
00:27:59,340 --> 00:28:06,270
byte here on the underline as well

604
00:28:03,710 --> 00:28:09,540
because we just provide more voltage or

605
00:28:06,270 --> 00:28:12,420
less voltage there and you can see when

606
00:28:09,540 --> 00:28:14,190
we glitch it to hard it is there's no

607
00:28:12,420 --> 00:28:17,310
response but when we glitch it just

608
00:28:14,190 --> 00:28:20,940
enough there's two response back but we

609
00:28:17,310 --> 00:28:24,330
try to affect it in a specific way so

610
00:28:20,940 --> 00:28:26,790
that's the process more or less and then

611
00:28:24,330 --> 00:28:30,000
all you need to do is to try to find the

612
00:28:26,790 --> 00:28:31,889
where you want to glitch and what are

613
00:28:30,000 --> 00:28:33,110
the parameters of your glitch what are

614
00:28:31,890 --> 00:28:35,730
the parameters of your

615
00:28:33,110 --> 00:28:38,969
[Music]

616
00:28:35,730 --> 00:28:42,869
fault injection to change the specific

617
00:28:38,970 --> 00:28:44,639
amount so there are a number of outputs

618
00:28:42,869 --> 00:28:46,199
on the screen as well so that's not the

619
00:28:44,639 --> 00:28:49,110
glitch we want but that's something we

620
00:28:46,200 --> 00:28:52,950
get so the one on top it says error

621
00:28:49,110 --> 00:28:55,229
detected reboot device that's something

622
00:28:52,950 --> 00:28:57,029
manufacturers implemented so they read

623
00:28:55,230 --> 00:28:59,639
something from trash and then they do

624
00:28:57,029 --> 00:29:02,580
CRC on it just to check that the data

625
00:28:59,639 --> 00:29:04,379
read correctly and that's what we affect

626
00:29:02,580 --> 00:29:07,408
here so we're pretty much corrupted data

627
00:29:04,379 --> 00:29:09,899
read which results in incorrect CRC

628
00:29:07,409 --> 00:29:12,600
check so that's not a good glitch but

629
00:29:09,899 --> 00:29:15,059
that just shows that it have some

630
00:29:12,600 --> 00:29:17,549
effects on the read from flash another

631
00:29:15,059 --> 00:29:22,190
one says cloak instability detected

632
00:29:17,549 --> 00:29:24,090
reboot device what happens here is that

633
00:29:22,190 --> 00:29:28,350
hardware wallet manufactures they

634
00:29:24,090 --> 00:29:31,769
implemented some simple check on the

635
00:29:28,350 --> 00:29:37,980
clock register so they actually verify

636
00:29:31,769 --> 00:29:40,289
that your clock is working as expected

637
00:29:37,980 --> 00:29:42,659
so if you try to do a clock fault

638
00:29:40,289 --> 00:29:44,549
injection that might not be working

639
00:29:42,659 --> 00:29:45,899
because of this check but as we're

640
00:29:44,549 --> 00:29:47,549
trying to do a.m. that's not something

641
00:29:45,899 --> 00:29:50,518
we'll want to do sometimes we affect the

642
00:29:47,549 --> 00:29:54,119
clock register but we try to see other

643
00:29:50,519 --> 00:29:57,749
glitches a few more examples of what can

644
00:29:54,119 --> 00:30:01,110
happen here you can see that we probably

645
00:29:57,749 --> 00:30:03,480
corrupted the XY of the output screen so

646
00:30:01,110 --> 00:30:05,189
where the screen starts and you can see

647
00:30:03,480 --> 00:30:08,940
that it actually wraps around and prints

648
00:30:05,190 --> 00:30:10,980
the message in a glitched way so it can

649
00:30:08,940 --> 00:30:12,809
happen on all kind of screens it's quite

650
00:30:10,980 --> 00:30:15,720
a common corruption also not very useful

651
00:30:12,809 --> 00:30:18,178
for an attacker you can affect the

652
00:30:15,720 --> 00:30:22,080
screen but it's not something you want

653
00:30:18,179 --> 00:30:23,940
to do so what do we want to do then what

654
00:30:22,080 --> 00:30:27,740
is there exploitable bitch who one would

655
00:30:23,940 --> 00:30:30,690
like to execute on the device so that's

656
00:30:27,740 --> 00:30:31,980
as I mentioned before it is fully open

657
00:30:30,690 --> 00:30:34,769
source which is very nice for an

658
00:30:31,980 --> 00:30:37,590
attacker you can just see the code see

659
00:30:34,769 --> 00:30:40,710
exactly what you want to avoid and do

660
00:30:37,590 --> 00:30:46,929
that so can here see one of the commands

661
00:30:40,710 --> 00:30:49,600
a second

662
00:30:46,930 --> 00:30:52,210
so that's command reset device you can

663
00:30:49,600 --> 00:30:54,490
send it from your PC it takes a message

664
00:30:52,210 --> 00:30:57,010
which you provide in the buffer and

665
00:30:54,490 --> 00:30:59,080
first thing it does it checks if your

666
00:30:57,010 --> 00:31:00,370
device is already initialized which

667
00:30:59,080 --> 00:31:02,020
makes sense if you already initialized

668
00:31:00,370 --> 00:31:04,629
your device you shouldn't initialize it

669
00:31:02,020 --> 00:31:06,040
again so it says if you want to

670
00:31:04,630 --> 00:31:08,470
initialize the gun you need to wipe it

671
00:31:06,040 --> 00:31:10,840
first if you wipe you'll lose all your

672
00:31:08,470 --> 00:31:11,830
keys and pin code and the rest so that's

673
00:31:10,840 --> 00:31:13,750
not something we want to do we don't

674
00:31:11,830 --> 00:31:15,939
want to really wipe the device we want

675
00:31:13,750 --> 00:31:17,400
to skip this check and what happens if

676
00:31:15,940 --> 00:31:19,870
we skip this check this if statement

677
00:31:17,400 --> 00:31:22,960
then this is not going to be executed

678
00:31:19,870 --> 00:31:25,360
and the following code is going to be so

679
00:31:22,960 --> 00:31:28,480
what is going to happen is that it will

680
00:31:25,360 --> 00:31:31,090
do in it of the device with the pin you

681
00:31:28,480 --> 00:31:33,790
provide in the message so you can set a

682
00:31:31,090 --> 00:31:36,669
new pin or you can set if you want to

683
00:31:33,790 --> 00:31:38,770
have pin at all or not and then you can

684
00:31:36,670 --> 00:31:41,680
put it in the message and try to glitch

685
00:31:38,770 --> 00:31:47,530
this if check to skip it all together

686
00:31:41,680 --> 00:31:51,430
and change the pin on the device so that

687
00:31:47,530 --> 00:31:54,940
sounds easy and while once you have that

688
00:31:51,430 --> 00:31:56,920
setup which is ready to do the

689
00:31:54,940 --> 00:31:58,600
glitchyness we've seen before all you

690
00:31:56,920 --> 00:32:04,090
need to do is you send this command

691
00:31:58,600 --> 00:32:05,800
again and again and you provide set the

692
00:32:04,090 --> 00:32:08,230
pin to a specific value which you want

693
00:32:05,800 --> 00:32:10,360
to have it after and you try to skip

694
00:32:08,230 --> 00:32:12,970
that if you see that this message is

695
00:32:10,360 --> 00:32:17,889
printed it means that you would like to

696
00:32:12,970 --> 00:32:19,570
try to try again if you see that it

697
00:32:17,890 --> 00:32:25,330
applies these changes than what you are

698
00:32:19,570 --> 00:32:27,100
done and that was one thing so first you

699
00:32:25,330 --> 00:32:29,530
can send reset device but then it's only

700
00:32:27,100 --> 00:32:32,260
going to change your PIN in RAM it's not

701
00:32:29,530 --> 00:32:34,960
going to change pin in flash so that's

702
00:32:32,260 --> 00:32:36,310
could be enough for us but it's not

703
00:32:34,960 --> 00:32:38,290
persistent so if you just reboot the

704
00:32:36,310 --> 00:32:39,909
device then or you don't really know

705
00:32:38,290 --> 00:32:42,190
what's the pin there and it's going to

706
00:32:39,910 --> 00:32:44,170
be loaded into Ram again so you can only

707
00:32:42,190 --> 00:32:45,820
use it for one good what we would like

708
00:32:44,170 --> 00:32:49,920
to have is the persistent change of the

709
00:32:45,820 --> 00:32:53,379
pin so what we do here we send the reset

710
00:32:49,920 --> 00:32:54,640
device command and we try to glitch here

711
00:32:53,380 --> 00:32:56,260
many times and we need only one

712
00:32:54,640 --> 00:32:58,120
successful glitch one which would

713
00:32:56,260 --> 00:33:01,809
actually change the pin on Ram

714
00:32:58,120 --> 00:33:05,709
and the second we can send change pin

715
00:33:01,809 --> 00:33:08,139
command and it expects you to know the

716
00:33:05,710 --> 00:33:11,380
pin and it checks it again pin and RAM

717
00:33:08,140 --> 00:33:13,330
so all we need to do is to reset advise

718
00:33:11,380 --> 00:33:15,610
set pin and RAM to the value we know

719
00:33:13,330 --> 00:33:16,928
dance and change pin command we don't

720
00:33:15,610 --> 00:33:19,510
need to glitch anymore because we know

721
00:33:16,929 --> 00:33:21,970
the pin in RAM we authenticate using

722
00:33:19,510 --> 00:33:24,640
this pin and we provide new pin which is

723
00:33:21,970 --> 00:33:26,830
written to flash so then in this with a

724
00:33:24,640 --> 00:33:29,289
single single glitch on the device we

725
00:33:26,830 --> 00:33:31,510
are able to change and two commands we

726
00:33:29,289 --> 00:33:36,039
send were able to change the pin and

727
00:33:31,510 --> 00:33:38,260
flash how does it work well bunch of

728
00:33:36,039 --> 00:33:40,929
words here we can just see it on the

729
00:33:38,260 --> 00:33:43,179
picture the same scenario so your

730
00:33:40,929 --> 00:33:45,220
attacker again gets physical access so

731
00:33:43,179 --> 00:33:48,669
they found the device or they stole it

732
00:33:45,220 --> 00:33:52,899
from you or anything they could do then

733
00:33:48,669 --> 00:33:54,399
they put it in the setup they send reset

734
00:33:52,899 --> 00:33:56,830
device command and they try to glitch

735
00:33:54,399 --> 00:33:58,629
again and again until it's successful

736
00:33:56,830 --> 00:34:00,520
once it's successful they change the

737
00:33:58,630 --> 00:34:02,740
pinion RAM then they send this command

738
00:34:00,520 --> 00:34:04,960
no glitching is needed anymore they

739
00:34:02,740 --> 00:34:06,840
change pin in flash and well that's the

740
00:34:04,960 --> 00:34:08,800
end of story so you still have your

741
00:34:06,840 --> 00:34:10,480
private keys on the device

742
00:34:08,800 --> 00:34:13,480
it wasn't wiped because we skipped this

743
00:34:10,480 --> 00:34:15,940
check we didn't send the wipe command

744
00:34:13,480 --> 00:34:18,780
but it has a new pin now so you have

745
00:34:15,940 --> 00:34:23,730
full access to the device after the

746
00:34:18,780 --> 00:34:26,919
successful glitch what were the results

747
00:34:23,730 --> 00:34:28,960
once you find the good parameters good

748
00:34:26,918 --> 00:34:31,388
support where you want to glitch more or

749
00:34:28,960 --> 00:34:34,149
less good timing when it happens and you

750
00:34:31,389 --> 00:34:36,129
try to repeat it the success rate is 1.2

751
00:34:34,149 --> 00:34:38,830
percent which doesn't sound like much

752
00:34:36,129 --> 00:34:40,239
but it's not like success rate that out

753
00:34:38,830 --> 00:34:42,159
of hundred volleys you can which one

754
00:34:40,239 --> 00:34:44,408
it's a success rate out of hundred

755
00:34:42,159 --> 00:34:46,899
commands you send to this wallet one of

756
00:34:44,409 --> 00:34:48,639
them on average will be successful so it

757
00:34:46,899 --> 00:34:50,888
will change the pin and you can repeat

758
00:34:48,639 --> 00:34:54,250
this many times so on a single hardware

759
00:34:50,889 --> 00:34:58,150
wallet I had I done more than a few

760
00:34:54,250 --> 00:35:01,300
million glitches it didn't ruin the

761
00:34:58,150 --> 00:35:02,800
device so it's still working so

762
00:35:01,300 --> 00:35:04,540
temperate is not very high because it

763
00:35:02,800 --> 00:35:06,160
boots every time it verifies all the

764
00:35:04,540 --> 00:35:08,380
signatures so it's quite slow but still

765
00:35:06,160 --> 00:35:11,899
fine overall in five minutes with this

766
00:35:08,380 --> 00:35:16,400
success rate you can change the pin

767
00:35:11,900 --> 00:35:19,850
to have bully enough parameters so

768
00:35:16,400 --> 00:35:22,670
that's that's the result of the second

769
00:35:19,850 --> 00:35:25,220
study so we've seen today the software

770
00:35:22,670 --> 00:35:26,750
text software cannot barely trust it

771
00:35:25,220 --> 00:35:28,700
that's what we've seen with illogical

772
00:35:26,750 --> 00:35:31,040
attacks and you have to try if you make

773
00:35:28,700 --> 00:35:33,680
your embedded devices try to make it as

774
00:35:31,040 --> 00:35:35,560
secure as possible to have some firmware

775
00:35:33,680 --> 00:35:39,799
update mechanism so you can change and

776
00:35:35,560 --> 00:35:41,930
fix the issues which are found and use

777
00:35:39,800 --> 00:35:46,370
somebody's help so maybe you can ask

778
00:35:41,930 --> 00:35:48,230
third parties you can ask have a bug

779
00:35:46,370 --> 00:35:52,250
bounty and have people who actually try

780
00:35:48,230 --> 00:35:54,680
to help you with these issues so also

781
00:35:52,250 --> 00:35:56,180
may be good to mention that this issues

782
00:35:54,680 --> 00:35:59,299
we found they we reported it to

783
00:35:56,180 --> 00:36:02,480
manufacturers they also have bug bounces

784
00:35:59,300 --> 00:36:05,150
and they try to fix it so this issues

785
00:36:02,480 --> 00:36:09,620
should be solved on the latest updates

786
00:36:05,150 --> 00:36:12,920
of the devices and finally hardware if

787
00:36:09,620 --> 00:36:14,210
you have your secure hardware you cannot

788
00:36:12,920 --> 00:36:17,120
really trust it hundred percent of the

789
00:36:14,210 --> 00:36:19,460
time if your attacker is able to spend

790
00:36:17,120 --> 00:36:21,710
enough money they always have more

791
00:36:19,460 --> 00:36:22,940
advantage than you but there is still

792
00:36:21,710 --> 00:36:24,680
some things you can do so you can

793
00:36:22,940 --> 00:36:26,480
implement some con to measure you can

794
00:36:24,680 --> 00:36:28,910
use more secure hardware there's

795
00:36:26,480 --> 00:36:31,940
specific hardware which is meant to be

796
00:36:28,910 --> 00:36:35,210
used for these cases and you can

797
00:36:31,940 --> 00:36:39,260
implement more advanced checks in your

798
00:36:35,210 --> 00:36:43,280
software as well so that is it for my

799
00:36:39,260 --> 00:36:46,340
talk I just interesting picture one of

800
00:36:43,280 --> 00:36:48,020
the glitches I had on the device is what

801
00:36:46,340 --> 00:36:50,000
happens here it probably corrupted the

802
00:36:48,020 --> 00:36:52,450
pointer to the string it was to print so

803
00:36:50,000 --> 00:36:54,710
it wants to print here something like

804
00:36:52,450 --> 00:36:57,020
maybe there is a pink command and says

805
00:36:54,710 --> 00:36:58,550
the message is this and that but instead

806
00:36:57,020 --> 00:37:00,800
it corrupts the pointer to the string

807
00:36:58,550 --> 00:37:03,050
and it just prints random place in

808
00:37:00,800 --> 00:37:04,670
memory which doesn't have really ASCII

809
00:37:03,050 --> 00:37:08,720
printable characters so you can see

810
00:37:04,670 --> 00:37:10,370
these set faces that is it thank you for

811
00:37:08,720 --> 00:37:12,529
attention and if there are any questions

812
00:37:10,370 --> 00:37:16,730
I will be happy to answer now or after

813
00:37:12,530 --> 00:37:17,220
the talk somewhere and yeah those are

814
00:37:16,730 --> 00:37:21,000
messed up

815
00:37:17,220 --> 00:37:21,000
[Applause]

