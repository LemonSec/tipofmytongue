1
00:00:02,780 --> 00:00:10,610
good afternoon everybody my name is
Brian going to look like introductions

2
00:00:10,610 --> 00:00:15,059
my name is Brian Lawrence I'm the
manager vulnerability research we're

3
00:00:15,059 --> 00:00:20,480
going to be talking today about abusing
adobe Reader is JavaScript API we hope

4
00:00:20,480 --> 00:00:27,390
you enjoy the presentation go today but
kinda quick agenda what we're going to

5
00:00:27,390 --> 00:00:32,590
be talking about First we introduced
ourselves and our research project that

6
00:00:32,590 --> 00:00:39,300
we we did talk about the attack surface
that exists in Adobe readers JavaScript

7
00:00:39,300 --> 00:00:43,998
API ice now kind of areas that most
people have not thought about yet and

8
00:00:43,999 --> 00:00:48,920
we'll talk about how you actually look
for vulnerabilities in this JavaScript

9
00:00:48,920 --> 00:00:56,100
API set what to look for how to find
them and then finally will close with

10
00:00:56,100 --> 00:01:01,420
constructing the exploit and chaining
the vulnerabilities together taxi gain

11
00:01:01,420 --> 00:01:12,200
remote code execution a quick
introduction

12
00:01:12,200 --> 00:01:19,060
my name's Brian Lawrence I run I worked
at HP security research organization and

13
00:01:19,060 --> 00:01:24,520
I'm the manager of vulnerability
research my primary responsibility is

14
00:01:24,520 --> 00:01:30,460
running the zero day initiative which is
the world's largest and diagnostic

15
00:01:30,460 --> 00:01:37,179
bounty program the program has been in
existence for 10 years celebrating our

16
00:01:37,180 --> 00:01:42,289
10 year anniversary and over these last
10 years we've purchased over ten

17
00:01:42,289 --> 00:01:46,859
million dollars worth of vulnerabilities
and exploit information from the

18
00:01:46,859 --> 00:01:54,809
community we've disclosed over 2,000
public public advisories help fix a

19
00:01:54,810 --> 00:01:59,369
large percentage of Internet Explorer's
use after free vulnerabilities Java

20
00:01:59,369 --> 00:02:05,640
sandbox escapes and now Adobe readers
JavaScript vulnerabilities I'm also

21
00:02:05,640 --> 00:02:09,679
responsible for organizing the
ever-popular phone hacking competition

22
00:02:09,679 --> 00:02:14,300
where we asked researchers from around
the world

23
00:02:14,300 --> 00:02:18,880
to come to our contest and try to
exploit the world's hardest attack

24
00:02:18,880 --> 00:02:25,140
surfaces including browsers browser
plug-ins and mobile devices and we've

25
00:02:25,140 --> 00:02:29,839
actually held onto mobile to mobile
version of the contest mobile phone down

26
00:02:29,840 --> 00:02:36,320
here in tokyo over the last two years
have my partner here introduce myself my

27
00:02:36,320 --> 00:02:41,670
name is Abdul I'm a security researcher
working for the CIA which is part of HPC

28
00:02:41,670 --> 00:02:48,190
18 research for now I do a lot of good
cause analysis by hunting and Export

29
00:02:48,190 --> 00:03:00,310
Development I work on my own office in
Canada besides running this year and a

30
00:03:00,310 --> 00:03:04,820
nursing program at running the Punto
contest we do a lot of internal research

31
00:03:04,820 --> 00:03:08,930
and so we are both countries in our own
rights and what we're going to be

32
00:03:08,930 --> 00:03:13,620
talking about today is a set of internal
research that we did what we started in

33
00:03:13,620 --> 00:03:20,750
December 2014 in which you can see on
the screen here are the patched

34
00:03:20,750 --> 00:03:25,670
basically all of the vulnerabilities
that we've discovered to date and in

35
00:03:25,670 --> 00:03:29,458
which ones are patched in which ones are
unpatched they're all that the vendor

36
00:03:29,459 --> 00:03:35,790
waiting to be fixed and in fact last
patch Tuesday Adobe released another

37
00:03:35,790 --> 00:03:42,769
patch for Adobe Reader in 45 of those
vulnerabilities were on this list in the

38
00:03:42,770 --> 00:03:47,600
unpatched section there now fixed and
and that attack surface is gone away

39
00:03:47,600 --> 00:03:51,880
from from attackers over the lifetime of
this research is almost a hundred

40
00:03:51,880 --> 00:03:57,140
zero-day vulnerabilities that we've
discovered in Adobe Reader JavaScript

41
00:03:57,140 --> 00:04:05,399
API and will continue to do research in
this space

42
00:04:05,400 --> 00:04:10,909
so we're gonna be talking about the
attack surface and the vulnerabilities

43
00:04:10,909 --> 00:04:16,000
that exists within them before we get
started we need to come to understand

44
00:04:16,000 --> 00:04:21,949
the prior research that has occurred in
this area

45
00:04:21,949 --> 00:04:26,590
first we'll cover a set of research done
by a researcher at the last name owner

46
00:04:26,590 --> 00:04:33,239
and he was really the first researcher
to highlight the JavaScript API bypass

47
00:04:33,240 --> 00:04:40,110
issue did a presentation discovered a
bug in and got it fixed in 2014 and it

48
00:04:40,110 --> 00:04:46,130
was it was fixed and according to Adobe
this vulnerability could lead to

49
00:04:46,130 --> 00:04:51,150
information disclosure and when Moammar
did his presentation he kind of

50
00:04:51,150 --> 00:04:55,780
highlighted how it worked and provided a
proof of concept which would disclose

51
00:04:55,780 --> 00:05:03,530
information from the attacked at a
computer on the ghetto bleak link there

52
00:05:03,530 --> 00:05:07,479
if you wanted to get an idea of that
type of research the next presentation

53
00:05:07,479 --> 00:05:13,449
will talk about is MWR labs where they
did an assessment of why would a person

54
00:05:13,449 --> 00:05:19,360
bother auditing popular software with
the assumption being that all of the

55
00:05:19,360 --> 00:05:22,729
low-hanging fruit and all of the heart
of vulnerabilities have been discovered

56
00:05:22,729 --> 00:05:28,419
in really why would you spend your time
there and focus elsewhere as a new

57
00:05:28,419 --> 00:05:33,770
researcher and they highlighted the
various tax services that existed in the

58
00:05:33,770 --> 00:05:38,190
product and they hire and one of the
areas that they talked about was the

59
00:05:38,190 --> 00:05:47,500
JavaScript API it's so again this
research which started in December 2014

60
00:05:47,500 --> 00:05:53,630
the primary reason we did this research
is because in the zero day initiative

61
00:05:53,630 --> 00:05:59,020
program we were not really receiving a
lot of vulnerabilities from the

62
00:05:59,020 --> 00:06:03,760
community in Adobe Reader and we were
very interested in this attack surface

63
00:06:03,760 --> 00:06:08,710
because we knew that it was being used
in the wild to to break into

64
00:06:08,710 --> 00:06:13,570
corporations and we wanted to kind of
get an idea of what was going on and we

65
00:06:13,570 --> 00:06:18,210
also are we also wanted to kill as many
of those bugs as possible

66
00:06:18,210 --> 00:06:22,948
and hard in the attack surface so that
the corporation would not be compromised

67
00:06:22,949 --> 00:06:28,470
from these type of Honor bilities this
in internal research really discovered

68
00:06:28,470 --> 00:06:33,699
of various types of bugs and we took a
different approaches on fine I'm looking

69
00:06:33,699 --> 00:06:38,449
for them first we developed a set of
fathers which we ran on the JavaScript

70
00:06:38,449 --> 00:06:43,949
API ice we also did code analysis static
code analysis and looking for

71
00:06:43,949 --> 00:06:48,780
vulnerabilities by hand we also reverse
engineered how the shared memory works

72
00:06:48,780 --> 00:06:52,239
within the software looking for
vulnerabilities and we discovered

73
00:06:52,240 --> 00:06:56,389
basically every different type of an
ability that exists in a piece of

74
00:06:56,389 --> 00:07:00,979
software including memory corruption
vulnerabilities

75
00:07:00,979 --> 00:07:06,250
information disclosure vulnerabilities
use after freeze elevation of privileges

76
00:07:06,250 --> 00:07:11,490
and the most interesting for us was this
JavaScript API restriction bypasses

77
00:07:11,490 --> 00:07:15,909
really something that hadn't been talked
about outside of mourners research and

78
00:07:15,909 --> 00:07:21,190
we wanted to explore that area more and
we're going to cover all of that so what

79
00:07:21,190 --> 00:07:27,020
exactly are the JavaScript API's well
they expect spose functionality to

80
00:07:27,020 --> 00:07:31,799
document authors that allow you to
generate really complex and and that in

81
00:07:31,800 --> 00:07:35,000
interesting documents for the end user

82
00:07:35,000 --> 00:07:38,659
they allow you to interact with
multimedia they allow you to process

83
00:07:38,659 --> 00:07:43,919
complex forms you can do collaboration
with the API's there's really a large

84
00:07:43,919 --> 00:07:48,580
amount of functionality that exists in
these API is available to document

85
00:07:48,580 --> 00:07:53,960
authors and there is security
restrictions in the JavaScript API then

86
00:07:53,960 --> 00:07:59,698
we'll talk about those in a second with
the idea of privilege context and non

87
00:07:59,699 --> 00:08:03,490
privilege context you get really good
understanding of what of it what is

88
00:08:03,490 --> 00:08:06,770
available in the API's by reading the
documentation that is available from

89
00:08:06,770 --> 00:08:10,090
Adobe been a kind of documents
everything that it can do everything

90
00:08:10,090 --> 00:08:18,520
that you can do so let's take a look at
some of the medications they do exist in

91
00:08:18,520 --> 00:08:24,609
the Adobe Reader JavaScript API first
there's this idea of privileged vs non

92
00:08:24,610 --> 00:08:29,000
privileged context and this is defined
in the documentation

93
00:08:29,000 --> 00:08:35,049
and API's that are available and that I
have security restrictions on them

94
00:08:35,049 --> 00:08:39,699
need to be executed in a privileged
context and you can see in in privileged

95
00:08:39,700 --> 00:08:44,460
context I can only be executed in in
several spots in the console when you're

96
00:08:44,460 --> 00:08:48,830
executing a console mode when you're
executing in batch mode and when the

97
00:08:48,830 --> 00:08:53,960
application is that is initializing and
finally you can execute privilege API's

98
00:08:53,960 --> 00:08:58,340
if you are trusting the document
certificate there is a lot of

99
00:08:58,340 --> 00:09:03,370
functionality that is not privileged but
an example of a privileged API is

100
00:09:03,370 --> 00:09:07,930
launched URL which he see on the slide
which allows the doctor and author to

101
00:09:07,930 --> 00:09:12,560
basically pop up a browser and any
address that should they wish and you

102
00:09:12,560 --> 00:09:20,300
have to be in privileged mode to
actually get access to the API itself if

103
00:09:20,300 --> 00:09:26,560
you try to execute the API from what we
call the doc contacts are within a

104
00:09:26,560 --> 00:09:31,689
documents you're going to get a security
warning like this now as a security

105
00:09:31,690 --> 00:09:36,320
researcher or as as an IT as a hacker
you're not going to want to see the

106
00:09:36,320 --> 00:09:41,420
security warning popup on your victim's
machine it's going to clear them in that

107
00:09:41,420 --> 00:09:44,790
there is an attack underway that you're
trying to do something in the document

108
00:09:44,790 --> 00:09:49,980
that is security restricted to the goal
is to make sure that this security

109
00:09:49,980 --> 00:10:00,150
warning doesn't pop up is also the idea
of trusted functions which allow you to

110
00:10:00,150 --> 00:10:05,990
execute privilege methods from 9
privilege context and you can see here

111
00:10:05,990 --> 00:10:10,550
on the code this is an example of a
trusted function and to define a trusted

112
00:10:10,550 --> 00:10:16,120
function you do this with the coat on
strike happened . trusted function and

113
00:10:16,120 --> 00:10:20,890
you can see here here aan verifier
comments is a trusted function because

114
00:10:20,890 --> 00:10:25,780
it has that line in it and then within
that function the code that needs to be

115
00:10:25,780 --> 00:10:31,199
executed in a privileged context is
surrounded by apt up again proved and a

116
00:10:31,200 --> 00:10:36,360
p.m prove and so in this case after
alert is being executed in a privileged

117
00:10:36,360 --> 00:10:41,950
context online 2027

118
00:10:41,950 --> 00:10:46,880
so why would you use the the trusted
functions well if you're trying to

119
00:10:46,880 --> 00:10:52,610
automate some functionality in a PDF and
you want to do a lot of batch processing

120
00:10:52,610 --> 00:10:57,430
you can use these trusted functions to
do that and get access to the privilege

121
00:10:57,430 --> 00:11:02,560
API's that you need for your processing
is also this idea of folder level

122
00:11:02,560 --> 00:11:07,699
scripts which you see on the screen here
and there inside of a full there you can

123
00:11:07,700 --> 00:11:12,790
put these scripts the side of a folder
as you can see on the screen and they're

124
00:11:12,790 --> 00:11:17,839
used to implement functions for
automation purposes

125
00:11:17,840 --> 00:11:21,980
you can use the trusted functions inside
of these for the level scripts and

126
00:11:21,980 --> 00:11:23,850
luckily luckily enough for us

127
00:11:23,850 --> 00:11:30,250
Adobe Reader provides the end-user a set
folder level scripts upon default

128
00:11:30,250 --> 00:11:37,500
installation they're called Jas bytecode
win . been and in this bin file there is

129
00:11:37,500 --> 00:11:42,110
a set of JavaScript API ice they get
loaded up on an application

130
00:11:42,110 --> 00:11:47,100
initialization and they contained
trusted functions which which have

131
00:11:47,100 --> 00:11:50,930
privileged functionality all of this
will become very important for us when

132
00:11:50,930 --> 00:11:56,410
we start doing our vulnerability hunting
all these API's are loaded into root

133
00:11:56,410 --> 00:12:01,530
context upon application start the
exposed to the document authors through

134
00:12:01,530 --> 00:12:08,650
the doc contacts exposed to in to the
doc when it the document is open so we

135
00:12:08,650 --> 00:12:16,640
want to get access to the code that is
in the JSE by told wind-up been so we

136
00:12:16,640 --> 00:12:21,319
can start auditing that code for
vulnerabilities and you can decompile

137
00:12:21,320 --> 00:12:24,020
this code it is this

138
00:12:24,020 --> 00:12:30,600
been filed is actually spider monkey XTR
by code and in this been like I said

139
00:12:30,600 --> 00:12:37,310
there's trusted functions and privileged
code being executed now I'm honor when

140
00:12:37,310 --> 00:12:43,599
he did his research back in 2014 he
published a Decompiler for this been

141
00:12:43,600 --> 00:12:47,850
filed and the code is available as
ghetto blink and you can actually

142
00:12:47,850 --> 00:12:54,010
decompile it and it will spit out a set
of JavaScript that she cannot it by hand

143
00:12:54,010 --> 00:12:59,870
and the output of this D complete
compilation is really messy so you need

144
00:12:59,870 --> 00:13:05,550
to pass it through a beautifying process
so that you can actually audit the code

145
00:13:05,550 --> 00:13:12,630
and what you see on the screen is you
know about 10 lines of the 27,000 lines

146
00:13:12,630 --> 00:13:18,930
that exists in this javascript been file
you can see here you can you can clearly

147
00:13:18,930 --> 00:13:22,719
read that this is the color conversion
function and there's some sort of

148
00:13:22,720 --> 00:13:26,740
processing going on there that you can
then audit for security vulnerabilities

149
00:13:26,740 --> 00:13:33,040
so now we have a really good
understanding of the code that exists

150
00:13:33,040 --> 00:13:37,949
and what we're going to try to find
vulnerabilities in and so we need to

151
00:13:37,950 --> 00:13:41,660
look at how we're going to discover the
vulnerabilities in the spin this code

152
00:13:41,660 --> 00:13:50,100
base the first thing that we need to
think about is when does JavaScript make

153
00:13:50,100 --> 00:13:54,910
implicit method calls that the
application developer may not understand

154
00:13:54,910 --> 00:14:01,469
is happening in this case there are
various three areas in which the code on

155
00:14:01,470 --> 00:14:02,650
the screen

156
00:14:02,650 --> 00:14:09,420
actually makes implicit calls the first
is in the if conditional its argument .

157
00:14:09,420 --> 00:14:16,079
attribute not equal value in this case
we attribute property is actually

158
00:14:16,080 --> 00:14:22,620
calling again or function implicitly and
you can actually redefine the

159
00:14:22,620 --> 00:14:29,940
functionality of this Gator using
javascript to to explain the next place

160
00:14:29,940 --> 00:14:34,920
in this code where an implicit method is
being called is in the apt alert air

161
00:14:34,920 --> 00:14:40,680
this is not a valid value plus argument
the plus argument is actually implicitly

162
00:14:40,680 --> 00:14:45,739
calling a toString function which can be
redefined by the attacker to change the

163
00:14:45,740 --> 00:14:51,500
way the code executes finally there is
the setter method on the argument that

164
00:14:51,500 --> 00:14:56,950
attribute equals different value this is
actually calling an implicit setter

165
00:14:56,950 --> 00:15:01,120
method or mutated method and you can
redefine the way that functionality

166
00:15:01,120 --> 00:15:06,100
works in JavaScript to change the value
that's coming in

167
00:15:06,100 --> 00:15:10,579
leave the value alone he can do whatever
you want using

168
00:15:10,579 --> 00:15:17,699
redefined setter method and so how do
you actually change the way to the code

169
00:15:17,699 --> 00:15:22,579
functions were in JavaScript you can
actually overload the method or property

170
00:15:22,579 --> 00:15:28,989
using underscore underscore defined data
underscore underscore this will allow

171
00:15:28,990 --> 00:15:33,750
you to assign a function to that
property which will do the functionality

172
00:15:33,750 --> 00:15:38,730
that she wanted to say the attacker
wants to implement you can also use

173
00:15:38,730 --> 00:15:43,560
underscore underscore defines setter
underscore underscore with what changed

174
00:15:43,560 --> 00:15:48,758
the mutator of a property and will allow
you to change the functionality and how

175
00:15:48,759 --> 00:15:57,750
that implementation works the next way
to do it is through inheritance using

176
00:15:57,750 --> 00:16:02,089
underscore underscore proto underscore
underscore in this in this case you can

177
00:16:02,089 --> 00:16:07,800
define a new property using an object in
a sign all the object to Prado what you

178
00:16:07,800 --> 00:16:13,649
inherit the methods that inherited
methods and allow you to redefine the

179
00:16:13,649 --> 00:16:19,660
way that a property works on an object
so I'm going to turn it over to him

180
00:16:19,660 --> 00:16:24,019
doing now who's going to explain how to
out of the code to look for

181
00:16:24,019 --> 00:16:30,480
vulnerabilities alright so physical
let's say we compiled the main file and

182
00:16:30,480 --> 00:16:34,779
we have the source code so the next step
is to choose or to find spots where we

183
00:16:34,779 --> 00:16:40,439
should I write so the first thing that
we should look for alcohol and sign that

184
00:16:40,439 --> 00:16:44,769
specific areas that we did you compile
the reason for this is that if we were

185
00:16:44,769 --> 00:16:50,160
able to hijack or gain access to one of
these evolves then we're going to secure

186
00:16:50,160 --> 00:16:55,209
execution inside they would context
which is the first step to achieve the

187
00:16:55,209 --> 00:17:00,699
bypass so you guys can see if we grab
through the Jets we have we have a

188
00:17:00,699 --> 00:17:07,319
couple of sites that we can target
hijacked that caused so the next time we

189
00:17:07,319 --> 00:17:11,959
should look for a privilege black and
just like Brian explained that a

190
00:17:11,959 --> 00:17:15,079
privilege black basically it

191
00:17:15,079 --> 00:17:21,198
it's cool that lies inside begin prayer
band and basically this blog has to be

192
00:17:21,199 --> 00:17:28,929
inside trusted function so when we get a
system we're gonna have to escalate and

193
00:17:28,929 --> 00:17:38,140
escalation should be happening inside a
trusted function that contains alright

194
00:17:38,140 --> 00:17:43,539
so this is one of the codes that we can
we can actually hijack the evals a week

195
00:17:43,539 --> 00:17:49,779
and hijackers you guys can see if parts
date it it takes an argument cold like

196
00:17:49,779 --> 00:17:54,710
entry and this this function is exposed
to us that the user so basically we can

197
00:17:54,710 --> 00:17:59,760
forge long entry and if you see at the
end of this function there's an eval

198
00:17:59,760 --> 00:18:05,419
call that caused the log entry quiet so
basically we can control our country and

199
00:18:05,419 --> 00:18:11,620
forced car at and gain access to and
this basically gives us a system-level

200
00:18:11,620 --> 00:18:23,090
or root context if we were able to do
that we will have to to find a trusted

201
00:18:23,090 --> 00:18:26,689
function without with a privilege black
with something inside of that we can

202
00:18:26,690 --> 00:18:31,210
hijack this is one of the function
inside the compound JavaScript code

203
00:18:31,210 --> 00:18:36,769
basically to trusted function without
with up with a privilege to block it has

204
00:18:36,769 --> 00:18:45,840
three arguments arguments is interesting
which is deceased or CRL basically the C

205
00:18:45,840 --> 00:18:48,159
source URL

206
00:18:48,160 --> 00:18:56,110
passed to the Islamic Center URL
collected is dark center which is inside

207
00:18:56,110 --> 00:19:01,990
the trust trusted black college park so
the plan here is just to hijack or

208
00:19:01,990 --> 00:19:08,340
overload dysfunction with the with a
function that is basically privilege so

209
00:19:08,340 --> 00:19:12,189
in that case we're gonna we gonna be
able to execute a privilege function

210
00:19:12,190 --> 00:19:25,240
from inside the privilege but so is a
clear chain all this together we have to

211
00:19:25,240 --> 00:19:29,890
find an evolve that basically allows us
to gain execution inside the right

212
00:19:29,890 --> 00:19:35,640
contacts and the second one the second
second step is basically find a trusted

213
00:19:35,640 --> 00:19:41,960
function and hijack a method that lies
inside this privilege black and finally

214
00:19:41,960 --> 00:19:49,300
we are to trigger the car so putting
putting this all together this is how it

215
00:19:49,300 --> 00:19:57,460
works basically we called AF price date
and a half price later actually gain and

216
00:19:57,460 --> 00:19:59,640
give us access to that involve

217
00:19:59,640 --> 00:20:05,010
basically will will will excuse exploit
function that exploit function contains

218
00:20:05,010 --> 00:20:08,940
the code that does the privilege
escalation and basically whatever you

219
00:20:08,940 --> 00:20:16,570
did here is defined and you object coca
coca lab and I highly overloaded as Doc

220
00:20:16,570 --> 00:20:23,280
Center URL method and I replace it with
other ones URL URL is basically a

221
00:20:23,280 --> 00:20:28,520
privilege function and then I said the
product of collab to app which is

222
00:20:28,520 --> 00:20:33,270
basically inheriting all of the methods
of the properties and methods of have

223
00:20:33,270 --> 00:20:37,650
been putting in the psych lab and
finally secured see be shared review

224
00:20:37,650 --> 00:20:43,370
security dialogue with that specific
object data created and that would

225
00:20:43,370 --> 00:20:47,820
actually secure an execution inside the
privilege block which is which lies

226
00:20:47,820 --> 00:20:54,759
inside the trusted function and
basically that's how we can escalate

227
00:20:54,759 --> 00:21:02,099
I'm gonna get a video that demonstrates
if if if if anyone wants to execute a

228
00:21:02,099 --> 00:21:10,589
privilege API from inside the normal doc
privileges how it looks like basically

229
00:21:10,589 --> 00:21:15,570
throws a warning because they are you
trying to execute privilege API which

230
00:21:15,570 --> 00:21:21,549
has a potential in this case from inside
the doc religious so just United you

231
00:21:21,549 --> 00:21:29,319
from doing it pops up morning so I'm
gonna show a video that demonstrates the

232
00:21:29,319 --> 00:21:34,899
escalation and like a successful
escalation basically it triggers that at

233
00:21:34,899 --> 00:21:38,208
lunch lol which pounds I E

234
00:21:38,209 --> 00:21:46,829
with whatever target area you are right
so before it before the public for every

235
00:21:46,829 --> 00:21:51,239
patch this blog basically allows it
allowed us to override system objects

236
00:21:51,239 --> 00:21:56,999
like collab spells search all these
system object we're able to override

237
00:21:56,999 --> 00:22:01,249
them whatever objects we want and we can
overload whatever method they contain

238
00:22:01,249 --> 00:22:09,669
with any methods we want to this is
before the patch so after the patch the

239
00:22:09,669 --> 00:22:15,149
the released version called Adobe Reader
Dec and basically what they did is they

240
00:22:15,149 --> 00:22:21,678
denied us or disliked stopped allowing
operating system objects so they kind of

241
00:22:21,679 --> 00:22:26,329
securities objects from being overridden
and from having decent the methods of

242
00:22:26,329 --> 00:22:32,349
these objects being overloaded

243
00:22:32,349 --> 00:22:38,889
a quick recap in order to have a
successful bypass we need that excuse it

244
00:22:38,889 --> 00:22:44,859
inside the root context and then when it
already overloaded function that's being

245
00:22:44,859 --> 00:22:50,210
called from inside a privilege block
which lies inside a trusted function

246
00:22:50,210 --> 00:22:58,580
right so the exploitation by the whole

247
00:22:58,580 --> 00:23:03,580
when one more like baghdad reported this
blog Adobe like flag this magazine

248
00:23:03,580 --> 00:23:08,290
information we could bug and that was
quite interesting for us it was a

249
00:23:08,290 --> 00:23:12,940
challenge we wanted to take this to the
next step which is gaining icy lake or

250
00:23:12,940 --> 00:23:17,380
execution out of this basically if you
wanna do that we have to play by the

251
00:23:17,380 --> 00:23:23,030
rules which is basically using the
JavaScript API that I exposed by a

252
00:23:23,030 --> 00:23:31,649
reader so in fact we needed as we needed
to find an API that would allow us to

253
00:23:31,650 --> 00:23:39,710
write their own discs dumped a file on
disk and we need that API to relax

254
00:23:39,710 --> 00:23:46,350
restrictions basically file types file
contents and stuff like that so what it

255
00:23:46,350 --> 00:23:51,520
is like I went through the whole API and
and search for for all the API and other

256
00:23:51,520 --> 00:23:56,889
communication and social for all the API
allows me to dump files on disk and

257
00:23:56,890 --> 00:24:03,400
basically I tried all of them and I just
failed because basically these API's I

258
00:24:03,400 --> 00:24:09,180
kind of design in a way that wouldn't
allow you to to dump files in certain

259
00:24:09,180 --> 00:24:14,740
directories of certain types so they
really hard and so so we kind of gave up

260
00:24:14,740 --> 00:24:19,310
on the idea gaining I see I think this
and just went back to fighting

261
00:24:19,310 --> 00:24:27,580
corruption basically so so one day I was
I was designing a moderating a model 225

262
00:24:27,580 --> 00:24:32,449
the collab object so I went back to the
documentation just to to read how

263
00:24:32,450 --> 00:24:33,090
collapse

264
00:24:33,090 --> 00:24:38,639
methods and that should be collapse has
basically I don't be documented three

265
00:24:38,640 --> 00:24:43,940
methods in club which are limited so I
was kind of curious and and went back to

266
00:24:43,940 --> 00:24:48,890
the console and and when it would impose
ambassador methods or just to make sure

267
00:24:48,890 --> 00:24:55,490
that everybody has everything documented
so that's what i got I found out that I

268
00:24:55,490 --> 00:25:00,290
don't be that collaboratively has 128
methods so if we do them at its

269
00:25:00,290 --> 00:25:02,379
basically 125 undocumented

270
00:25:02,380 --> 00:25:11,250
methods among these methods there
there's there's a bunch of functions

271
00:25:11,250 --> 00:25:15,580
that start with Uri that are quite
interesting as you guys can see here

272
00:25:15,580 --> 00:25:22,699
there's your I create for the Delete
Folder X files the fire you guys can you

273
00:25:22,700 --> 00:25:28,590
imagine what these guys do so I wasn't
convinced that these AP as well not

274
00:25:28,590 --> 00:25:29,250
really

275
00:25:29,250 --> 00:25:33,530
documented so I went and they researched
one of these API's on Google and a fight

276
00:25:33,530 --> 00:25:38,399
I found only two heads no information
about it

277
00:25:38,400 --> 00:25:43,950
one if one of the heads is just a risk
report from the Australian Government

278
00:25:43,950 --> 00:25:51,650
that just like threat modeling Adobe
Reader and so I'm gonna go through

279
00:25:51,650 --> 00:25:56,850
through these AP I really quick just to
explain the audience they take so the

280
00:25:56,850 --> 00:26:00,540
first one is your I put there are
basically takes two arguments the first

281
00:26:00,540 --> 00:26:06,210
argument is the path of the Father you
wanna dump their to the second argument

282
00:26:06,210 --> 00:26:10,320
or data which is basically the data that
you want to jump to the far side the

283
00:26:10,320 --> 00:26:17,120
file so that it was basically takes one
argument which is the path and that is

284
00:26:17,120 --> 00:26:23,679
the only true you are I create well
they're just as the name implies its

285
00:26:23,680 --> 00:26:28,370
creator for their takes one argument and
I came into the path of the for the day

286
00:26:28,370 --> 00:26:35,560
want to create and you made files is an
API that takes also one argument which

287
00:26:35,560 --> 00:26:40,000
is the path and basically what this
function does is just list the contents

288
00:26:40,000 --> 00:26:45,370
of the file of the folder that he wants
to it just kind of lucky to have you

289
00:26:45,370 --> 00:26:53,489
ever sell API URI delete files as the
name implies it just delete a file it

290
00:26:53,490 --> 00:27:02,250
takes the path of the other guys want to
eat right so now we have a set of API is

291
00:27:02,250 --> 00:27:06,220
that basically allows us to do whatever
we want and described so just an

292
00:27:06,220 --> 00:27:08,210
overview these API's I used

293
00:27:08,210 --> 00:27:14,640
as part of the collaboration feature
that crater exposes which is basically

294
00:27:14,640 --> 00:27:21,180
allows you to share files submitted them
for your views and stuff like that so

295
00:27:21,180 --> 00:27:25,620
one thing one thing coming among these
API's which is the delightful they're

296
00:27:25,620 --> 00:27:34,129
grateful they're put there and this is
it basically these are a privilege EPS

297
00:27:34,130 --> 00:27:42,610
files is is basically an excuse it
without being without being put in this

298
00:27:42,610 --> 00:27:48,000
context we can actually missed whatever
father's identity from the doc context

299
00:27:48,000 --> 00:27:55,940
2011 one thing in common between all
these API's is that they take a path

300
00:27:55,940 --> 00:28:02,690
basically the spare despite is a UNC
power so it has to start with assembly /

301
00:28:02,690 --> 00:28:11,210
/ 45 / / so things that this API is a
lie is that they they don't really it

302
00:28:11,210 --> 00:28:15,140
doesn't they don't they only sanitize
the path so basically you can provide

303
00:28:15,140 --> 00:28:20,270
SMB / last localhost / see and whatever
path you want and that works quite well

304
00:28:20,270 --> 00:28:25,050
it doesn't there's a price they don't
check the file time they actually

305
00:28:25,050 --> 00:28:30,389
jumping to anything like that's
basically what they're gonna put their

306
00:28:30,390 --> 00:28:35,440
specifically in doesn't check for the
data that since i text so if you guys

307
00:28:35,440 --> 00:28:39,670
wanna dump like an exe file idea and
file it doesn't mind you can just do

308
00:28:39,670 --> 00:28:50,440
whatever they want whenever extension
you want we know that we can dump files

309
00:28:50,440 --> 00:28:56,780
on disk using using the URI put the file
contents should be a fan or data object

310
00:28:56,780 --> 00:29:02,060
type but if we think that if we think
about the old data object weather

311
00:29:02,060 --> 00:29:07,010
what they object so basically went back
to documentation and and start looking

312
00:29:07,010 --> 00:29:12,340
for clues about how to create an
ordinary objects and basically we found

313
00:29:12,340 --> 00:29:17,350
nothing but during our testing we found
out that if we pass a no stream object

314
00:29:17,350 --> 00:29:22,000
instead of the only downside basically
it's gonna pass so all three months

315
00:29:22,000 --> 00:29:28,310
after being treated as objects and it
works so I'm a screenshot here I tested

316
00:29:28,310 --> 00:29:33,970
the URI put there are basically the
method and I gave it a path and I gave

317
00:29:33,970 --> 00:29:38,660
it an Austrian object which is created
by the stream from string and I give it

318
00:29:38,660 --> 00:29:43,650
a string so basically just wrote
whatever whatever I gave it in the

319
00:29:43,650 --> 00:29:54,200
father that pointed to it is in this
case in this case is ADA taxed so now we

320
00:29:54,200 --> 00:30:00,240
know that we can actually create or
stream objects using using attachment so

321
00:30:00,240 --> 00:30:04,850
basically if you attach files to PDF so
you can extract the contents from these

322
00:30:04,850 --> 00:30:09,100
attachments and store them in a stream
object so this is this is a good thing

323
00:30:09,100 --> 00:30:13,990
we can use URL put there at the house
that we want on this but how can how can

324
00:30:13,990 --> 00:30:18,580
you actually get RCR do this so
basically there are two matters do that

325
00:30:18,580 --> 00:30:24,030
for the first method which we call it
like the choking method method which is

326
00:30:24,030 --> 00:30:26,190
basically dumping of fire

327
00:30:26,190 --> 00:30:31,780
understand that the profile so basically
you with Newegg need the tiger to log

328
00:30:31,780 --> 00:30:37,800
off and log n to get the code executed
or we would the box or anything like

329
00:30:37,800 --> 00:30:43,399
that and and the second letter is
basically dumping and lol and waiting

330
00:30:43,400 --> 00:30:50,820
for Acrobat to actually load that there
and we're in touch so just to recap

331
00:30:50,820 --> 00:30:56,379
underfunded vulnerable versions of Adobe
basically all the other provisions

332
00:30:56,380 --> 00:31:03,370
vulnerable to this specific attack the
only difference is the rear as a sandbox

333
00:31:03,370 --> 00:31:06,350
limitations or doesn't allow you to
actually done for us and explain this

334
00:31:06,350 --> 00:31:12,149
because I like all the jobs cuts calls
are being routed to the to the broker at

335
00:31:12,150 --> 00:31:18,150
Basildon broker and basically denies
that Acrobat Pro basically it's a little

336
00:31:18,150 --> 00:31:23,280
because they don't have sandbox
technology available on both Windows and

337
00:31:23,280 --> 00:31:28,430
Mac OS X so i didnt includes a version
number is because the first time I don't

338
00:31:28,430 --> 00:31:32,490
get past it we broke the patch the
second time they pass away but the past

339
00:31:32,490 --> 00:31:35,880
and the third time which is which was
last time we brought the patch as well

340
00:31:35,880 --> 00:31:41,380
and they're being fixed right now but
it's a different factors and other times

341
00:31:41,380 --> 00:31:48,680
you just discussed so let's put this all
together basically we have to attach our

342
00:31:48,680 --> 00:31:53,560
payload which is at the end to the PDF
and then create a javascript that will

343
00:31:53,560 --> 00:31:58,649
execute when when the document is open
this javascript should be composed of

344
00:31:58,650 --> 00:32:04,850
code that actually extract the contents
of the of the attachment to attend

345
00:32:04,850 --> 00:32:10,129
Allstream object and use one of our
bypasses to execute your I put there and

346
00:32:10,130 --> 00:32:15,670
done the file on disk and basically just
wait until Acrobat and then we're gonna

347
00:32:15,670 --> 00:32:22,060
have a code execution out of it I'm
going to play a video that demonstrates

348
00:32:22,060 --> 00:32:31,090
the whole team which is basically our
CEO on Acrobat Pro basically the girls

349
00:32:31,090 --> 00:32:35,030
being open the file is being dumped in
the front desk and then we're gonna have

350
00:32:35,030 --> 00:32:43,879
to wait a little bit of our loaded

351
00:32:43,879 --> 00:32:55,708
basically Google account so we changed
we bypassed 22 game code execution and

352
00:32:55,709 --> 00:33:00,289
really which is under MacOS X as well so
this is a video that demonstrates two

353
00:33:00,289 --> 00:33:06,229
bags which is the the bypass and another
bug which is a codex command execution

354
00:33:06,229 --> 00:33:17,190
but it works well this was on the latest
version of Mac OS X reader so this is

355
00:33:17,190 --> 00:33:26,840
the latest version pre-order back then

356
00:33:26,840 --> 00:33:37,290
basically we've got company so so in
order to actually gain I see I do this

357
00:33:37,290 --> 00:33:44,409
we needed to to leverage a couple of the
couple of stuff which is believed with a

358
00:33:44,410 --> 00:33:50,240
bypass system with a trusted function
hijacking of a method call inside the

359
00:33:50,240 --> 00:33:54,920
producer bloc and then changing it with
one of the undocumented API is this

360
00:33:54,920 --> 00:34:04,300
identify landers and GRC out of it so
that we'd like to thank you for having

361
00:34:04,300 --> 00:34:08,259
us out here we hope you enjoy the
presentation we do run the zero day

362
00:34:08,260 --> 00:34:14,130
initiative program it is a bug bounty
program we work with researchers and

363
00:34:14,130 --> 00:34:18,880
vendors around the world to to purchase
their own abilities and work with the

364
00:34:18,880 --> 00:34:23,890
vendors to get them fixed in a
responsible way we're really like I

365
00:34:23,889 --> 00:34:26,420
think everybody could live for having us
out here and open during the

366
00:34:26,420 --> 00:34:52,850
presentation is there any questions

367
00:34:52,850 --> 00:35:31,870
a lot of the research that we do inside
of the zero day initiative program is

368
00:35:31,870 --> 00:35:38,200
actually the core output of this purpose
of this research is filters inside of

369
00:35:38,200 --> 00:35:42,390
the TippingPoint intrusion prevention
system and so all of the vulnerabilities

370
00:35:42,390 --> 00:35:48,180
that you saw earlier in the presentation
Hall hundred of them are being filtered

371
00:35:48,180 --> 00:35:54,230
and detected using the TippingPoint
intrusion prevention system and and in

372
00:35:54,230 --> 00:35:59,510
his ear at a fashion show we're able to
stop the incoming attack because we've

373
00:35:59,510 --> 00:36:04,050
done a set of research on this attack
surface in helping protect the

374
00:36:04,050 --> 00:36:23,730
enterprise prior to the vendor releasing
the patch

375
00:36:23,730 --> 00:36:31,770
yes so in this in our case for the
TippingPoint IPS is a signature-based

376
00:36:31,770 --> 00:36:38,670
detection

377
00:36:38,670 --> 00:36:44,320
fashion shoot at the theatre Academy
must gather myself included

