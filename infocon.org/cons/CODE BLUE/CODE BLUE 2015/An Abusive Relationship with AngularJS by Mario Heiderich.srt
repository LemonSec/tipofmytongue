1
00:00:02,780 --> 00:00:11,620
well first of all good morning ladies
and gentlemen and thank you so much for

2
00:00:11,620 --> 00:00:16,219
having me here is my first time in Japan
and I'm very excited

3
00:00:16,219 --> 00:00:23,050
and today we're going to talk about an
abusive relationship with angularjs we

4
00:00:23,050 --> 00:00:28,599
here knows already what angularjs is and
what it does some people who that's

5
00:00:28,599 --> 00:00:33,690
great let me introduce myself my name is
Mario I am a researcher and post

6
00:00:33,690 --> 00:00:39,579
doctorate at the University of Bochum I
lead a penetration testing firm that is

7
00:00:39,579 --> 00:00:43,970
located in Berlin and we essentially to
penetration test security training and

8
00:00:43,970 --> 00:00:48,750
security consulting I wrote some books
and papers maintain some security

9
00:00:48,750 --> 00:00:52,549
related projects some of them you may
know the age of five security cheat

10
00:00:52,549 --> 00:00:59,010
don't purifying others and I do tweet
mostly nonsense but if you want to

11
00:00:59,010 --> 00:01:04,229
follow that your most certainly welcome
if you do have any questions about the

12
00:01:04,229 --> 00:01:08,090
talk material feel free to send me an
email addresses there you can find it

13
00:01:08,090 --> 00:01:15,400
online I will reply as quickly as
possible now to get to the actual talk

14
00:01:15,400 --> 00:01:17,650
topic today we would like to talk about

15
00:01:17,650 --> 00:01:23,580
angularjs and want to talk about how
England Jas relates to web security how

16
00:01:23,580 --> 00:01:28,640
it changes web security and what new
kinds of attacks we might be able to

17
00:01:28,640 --> 00:01:34,370
carry out against web sites that are
using angularjs

18
00:01:34,370 --> 00:01:41,210
I do think that angularjs is a framework
that has a strange attitude and it kind

19
00:01:41,210 --> 00:01:45,970
of comparison to the attitude of a
toddler in a tiara because somethings

20
00:01:45,970 --> 00:01:52,350
angularjs does are in my opinion very
immature and very hectic and have broken

21
00:01:52,350 --> 00:01:56,509
things unnecessarily and we want to see
these want to learn why that is the case

22
00:01:56,510 --> 00:02:03,550
and how we as penetration testers and
detectors can actually view is that so

23
00:02:03,550 --> 00:02:09,030
first of all what is English areas
angularjs a very popular JavaScript

24
00:02:09,030 --> 00:02:13,750
model-view-controller framework so it
does a lot of logic that was formerly

25
00:02:13,750 --> 00:02:18,720
done on the server in the browser in the
client actually the developers are

26
00:02:18,720 --> 00:02:22,320
calling it a model of you whatever
because it's so flexible that you can do

27
00:02:22,320 --> 00:02:27,870
whatever and not necessarily just the
controller it calls itself a superhero a

28
00:02:27,870 --> 00:02:32,240
framework because it believes that it
has super heroic strength and they want

29
00:02:32,240 --> 00:02:33,680
to see if that is really true

30
00:02:33,680 --> 00:02:38,770
interestingly it is maintained and
recommended by Google so if you want to

31
00:02:38,770 --> 00:02:43,640
for example create a Google Chrome
package tap Chrome extension that most

32
00:02:43,640 --> 00:02:47,670
of the tutorials you will find will
recommend angularjs to be used as the

33
00:02:47,670 --> 00:02:53,329
JavaScript framework bangladesh also has
a polarizing philosophy because

34
00:02:53,330 --> 00:02:59,239
essentially it throws away all the
knowledge that you might had before

35
00:02:59,239 --> 00:03:04,050
about how to write a web application and
it says if you want to write about the

36
00:03:04,050 --> 00:03:08,450
application throw all that away that you
know and do it in a different way in our

37
00:03:08,450 --> 00:03:13,859
way in the framework way we're going to
talk about this in the second language

38
00:03:13,860 --> 00:03:18,430
it has an ever growing user base nor
more developers are using it more and

39
00:03:18,430 --> 00:03:22,730
more upset though using it you will
notice that some of the areas on the

40
00:03:22,730 --> 00:03:26,149
slights our own church once you have
excess of the slights you can click

41
00:03:26,150 --> 00:03:29,640
those areas and then you will be
directed directly to the source of what

42
00:03:29,640 --> 00:03:34,029
I'm claiming it is a very large range of
adoption so you can see that there is a

43
00:03:34,030 --> 00:03:38,110
growing graph of websites like a growing
number of websites that are using

44
00:03:38,110 --> 00:03:42,030
English as more and more people are
actually adopting to it and if you have

45
00:03:42,030 --> 00:03:46,050
a look at the GitHub repository of this
framework you will see that there is

46
00:03:46,050 --> 00:03:52,630
lot a lot of traffic many pull requests
many tickets tens of thousands of

47
00:03:52,630 --> 00:04:00,000
commits so it's very very popular it's
not the very first time that I've been

48
00:04:00,000 --> 00:04:06,050
talking about angularjs I talked about
it before when covering the topic J SMBC

49
00:04:06,050 --> 00:04:11,630
oMFG which translates to JavaScript
model-view-controller of my friend

50
00:04:11,630 --> 00:04:17,180
george and we have been spotting
security issues in English GSM earlier

51
00:04:17,180 --> 00:04:21,760
but no this is an exclusive talk only
covering angularjs and I think it's

52
00:04:21,760 --> 00:04:29,460
necessary and I think that the issues
that we spotted before were interesting

53
00:04:29,460 --> 00:04:35,799
because we decided as a team that there
was a security issues but the angularjs

54
00:04:35,800 --> 00:04:42,290
developer team said no this is no
security issue no CVE no announcement

55
00:04:42,290 --> 00:04:47,490
nothing but we will fix it so they fix
that and it led to a strange discussion

56
00:04:47,490 --> 00:04:50,760
that is linked here and you can have a
look as soon as you have extra flights

57
00:04:50,760 --> 00:04:56,159
because we had a security discussion
with the developers of England vs

58
00:04:56,160 --> 00:04:59,410
and it was not always a good discussion
you will see what I mean when you read

59
00:04:59,410 --> 00:05:04,880
the discussion so is it a personal thing
that I'm standing here talking about

60
00:05:04,880 --> 00:05:12,520
English as a little bit maybe but all in
all the reasons are different

61
00:05:12,520 --> 00:05:18,430
well one of the reasons is that England
has a very strong attitude and indeed

62
00:05:18,430 --> 00:05:24,069
calls itself the super heroic JavaScript
framework those are strong words and

63
00:05:24,069 --> 00:05:30,470
strong words and it's wrong tracks so
there is a lot of self love in this

64
00:05:30,470 --> 00:05:35,509
framework and as mentioned it changes
completely the way home web applications

65
00:05:35,509 --> 00:05:39,919
and websites work but also changes
completely the way home we penetration

66
00:05:39,919 --> 00:05:45,198
test websites angularjs breaks the API
either to do this and that it offers

67
00:05:45,199 --> 00:05:50,990
very often and makes operates literally
all the time so someone who is using an

68
00:05:50,990 --> 00:05:55,710
old version of angularjs on their
website will not necessarily be able to

69
00:05:55,710 --> 00:06:00,130
just quickly install the newest ones
because many breaking changes happen

70
00:06:00,130 --> 00:06:02,039
which is not always good

71
00:06:02,039 --> 00:06:07,919
bangladesh also assumes that it smarter
than HTML and adds new attributes new

72
00:06:07,919 --> 00:06:14,400
tax you events and new functionality to
a channel because this markup sugar and

73
00:06:14,400 --> 00:06:19,250
in addition to that once the version 2.0
is out again everything will break and

74
00:06:19,250 --> 00:06:25,630
everything will change here you can see
a screenshot of the documentation of the

75
00:06:25,630 --> 00:06:27,460
changelog of English

76
00:06:27,460 --> 00:06:32,909
you will notice that I'm searching for
the term breaking and I'm finding it

77
00:06:32,909 --> 00:06:39,110
once here and 92 times again on this
page so on this single page that has the

78
00:06:39,110 --> 00:06:48,130
changelog they have 92 breaking changes
a lot so is that really the honey boo

79
00:06:48,130 --> 00:06:56,020
boo of model controllers let's find out
because we want to attack it right

80
00:06:56,020 --> 00:07:00,590
maybe not maybe it is not the honey boo
boo of JavaScript frameworks because

81
00:07:00,590 --> 00:07:06,599
they do have high security standards
over a technology yes and the security

82
00:07:06,599 --> 00:07:10,870
level that an application can have if
all the rules are being followed by

83
00:07:10,870 --> 00:07:17,180
developers are great I really high
standard both developers and maintainers

84
00:07:17,180 --> 00:07:24,289
have high security standards but the
problem is it's a complex framework and

85
00:07:24,289 --> 00:07:28,659
it runs in the browser and if you run
something complex in the browser you

86
00:07:28,659 --> 00:07:36,319
have to know the browser really really
well do that we'll see about that I

87
00:07:36,319 --> 00:07:41,909
often call it the web security paradox
of layers because web security is often

88
00:07:41,909 --> 00:07:48,190
that complicated because everything is a
layer and contains some players like the

89
00:07:48,190 --> 00:07:54,120
network layer or the data base layer the
application layer the browser itself is

90
00:07:54,120 --> 00:07:58,860
a layer and contains multiple layers and
one of them will become angularjs

91
00:07:58,860 --> 00:08:06,560
interacting with all the other layers
which makes it even more complex here is

92
00:08:06,560 --> 00:08:13,130
a copy and paste of what the angel a
team says about security they say it's

93
00:08:13,130 --> 00:08:16,120
better to design your application such a
way that users cannot change and so on

94
00:08:16,120 --> 00:08:22,620
and so on and they say clearly that it's
not ok anymore to reflect content on the

95
00:08:22,620 --> 00:08:28,690
server to build content on the server
but you have to serve a return static

96
00:08:28,690 --> 00:08:33,500
Jason data and have the browser and the
JavaScript framework to all the job

97
00:08:33,500 --> 00:08:37,700
because then you don't have class
expresso scripting anymore on that is

98
00:08:37,700 --> 00:08:43,930
even true but maybe there is new attacks
and want to find out about these

99
00:08:43,929 --> 00:08:49,180
so now the question is if we want to
attack a complex and ever-changing

100
00:08:49,180 --> 00:08:55,500
JavaScript framework how do we do it and
how do we do it in a methodology with

101
00:08:55,500 --> 00:09:02,670
the logically correct way that makes
sense and that the systematic I decided

102
00:09:02,670 --> 00:09:08,939
to cluster the attacks in four areas the
first area would be attacked one

103
00:09:08,940 --> 00:09:14,459
attacking a military ascend books to
talk about this very soon the second

104
00:09:14,459 --> 00:09:18,890
would be attacking the sanitizer
angularjs has an HTML sanitizer that

105
00:09:18,890 --> 00:09:24,990
claims to be able to take and sanitized
potentially dangerous HTML and turn it

106
00:09:24,990 --> 00:09:31,970
into clean HTML you can use without risk
for excess of all we are going to attack

107
00:09:31,970 --> 00:09:36,820
the CSP mode content security policy and
EULA Jas is capable of working together

108
00:09:36,820 --> 00:09:43,430
with CSP which is quite unique in the
world of JavaScript frameworks and last

109
00:09:43,430 --> 00:09:47,660
but not least we decided to play dirty
and we attacked the course base

110
00:09:47,660 --> 00:09:53,180
themselves so we attack the developers
and we did something to English Jas that

111
00:09:53,180 --> 00:10:00,589
wasn't paralyzed but proved an important
point that would be a for let's talk

112
00:10:00,589 --> 00:10:04,460
about a 1% books

113
00:10:04,460 --> 00:10:13,090
the angular Jassem books as a mechanism
that allows to safely use expressions on

114
00:10:13,090 --> 00:10:18,770
your website that follow a certain kind
of Microsoft tax and allow a developer

115
00:10:18,770 --> 00:10:24,520
to express certain things and the
template simple logic simple the rival

116
00:10:24,520 --> 00:10:30,140
assignments and courts now the question
is is the safe and how do these

117
00:10:30,140 --> 00:10:35,710
expressions look like and what happens
if an attacker can actually inject into

118
00:10:35,710 --> 00:10:43,630
one of these expressions the developers
of England JSA exists not for security

119
00:10:43,630 --> 00:10:49,260
purposes but the core purposes to
isolate everything from the original Don

120
00:10:49,260 --> 00:10:54,980
because they don't want developers to
interact with the dumb they want

121
00:10:54,980 --> 00:10:59,320
developers to interact with their API
but not the original Don this should be

122
00:10:59,320 --> 00:11:04,100
locked away but they clearly say it's
not a security tool they still call it

123
00:11:04,100 --> 00:11:09,580
samples and given the practical
experience that we had from the last

124
00:11:09,580 --> 00:11:15,590
months and years developers actually do
use this as a security feature and do

125
00:11:15,590 --> 00:11:20,240
put your content in there and then we
might have a sandbox bypass and as a

126
00:11:20,240 --> 00:11:27,770
result across the first thing i jus
sandbox bypasses for trivial the only

127
00:11:27,770 --> 00:11:32,090
thing that we had to do was basically
create an expression with the double

128
00:11:32,090 --> 00:11:37,200
curly's and then we would say construct
to construct alert one so we would jump

129
00:11:37,200 --> 00:11:40,840
from the scope to its construct object
to its constructor object receive

130
00:11:40,840 --> 00:11:47,740
function then we have never execute
whatever we want so that is very trivial

131
00:11:47,740 --> 00:11:54,090
and was takes quickly this worked in
older versions of English as one point

132
00:11:54,090 --> 00:12:01,770
zero 1.1 and it stopped working and 1.2
points but interestingly many many pages

133
00:12:01,770 --> 00:12:08,140
still he was old versions of energy as
because of the breaking API and because

134
00:12:08,140 --> 00:12:09,970
of it being heart

135
00:12:09,970 --> 00:12:13,450
updating OJS once you have a complex
application already

136
00:12:13,450 --> 00:12:20,810
so this would be the full bypass of one
of the older versions trivial to import

137
00:12:20,810 --> 00:12:23,479
general English

138
00:12:23,480 --> 00:12:29,170
declare NGO make sure that the container
you inject into is a real angularjs up

139
00:12:29,170 --> 00:12:34,900
and then used to construct a constructor
on that there was the first bypass but

140
00:12:34,900 --> 00:12:41,620
there was simple and they fixed it and
be implemented interesting Pyxis

141
00:12:41,620 --> 00:12:47,770
Bangladesh has a parser and this parser
is capable of piercing expressions and

142
00:12:47,770 --> 00:12:53,960
turning them into coat and all they had
to do is modify the parser and make sure

143
00:12:53,960 --> 00:12:59,870
that the parser doesn't accidentally hit
something dangerous and executed and the

144
00:12:59,870 --> 00:13:04,260
patches that they made are actually
quite smart they are prohibiting access

145
00:13:04,260 --> 00:13:09,140
to function they are prohibiting access
to window they are providing access to

146
00:13:09,140 --> 00:13:13,949
DOM elements to events to location to
pretty much everything that can execute

147
00:13:13,950 --> 00:13:21,210
JavaScript from a strength but people
were getting interested into that and

148
00:13:21,210 --> 00:13:25,470
had a closer look at how that sent box
actually wear it and some of the

149
00:13:25,470 --> 00:13:29,820
bypasses i'm going to show because they
are very creative the finders here are

150
00:13:29,820 --> 00:13:35,310
young horny mature skulls on government
and one of the bypasses including myself

151
00:13:35,310 --> 00:13:42,359
and we need to find ways of still being
able to execute arbitrary code from

152
00:13:42,360 --> 00:13:47,640
within an expression despite all the
protection mechanisms know how would

153
00:13:47,640 --> 00:13:53,480
that look here's a bypass created by
young porn and you would see it very

154
00:13:53,480 --> 00:13:57,120
simple you just take a stream you called
someone and you say call call of that

155
00:13:57,120 --> 00:14:00,610
method from the string then you fix the
constructor as the string when you

156
00:14:00,610 --> 00:14:03,550
called get on property descriptor in the
throw the underscore underscore protein

157
00:14:03,550 --> 00:14:06,290
in their colleagues value returned this
whole thing you can string it done

158
00:14:06,290 --> 00:14:13,900
extremely well maybe not but you can see
that by passing the sandbox gets harder

159
00:14:13,900 --> 00:14:18,410
of course they fix that

160
00:14:18,410 --> 00:14:25,279
then I realized that there was a gap in
the history of bypasses because we want

161
00:14:25,279 --> 00:14:29,860
to make sure that for every version we
have at least one bypassed so I had a

162
00:14:29,860 --> 00:14:35,740
look what the problem was and I realized
that in version 1.2 point out you have

163
00:14:35,740 --> 00:14:39,980
to do something else because they check
for more thinks the former bypass here

164
00:14:39,980 --> 00:14:46,019
you could see me as you can see I'm
using proto in one point 2.0 pro two on

165
00:14:46,019 --> 00:14:55,519
the facade is forbidden and we can do
that anymore instead of using proto we

166
00:14:55,519 --> 00:15:01,800
can now use get prototype of which
pretty much does the same thing so this

167
00:15:01,800 --> 00:15:07,479
was another bypass either way similar

168
00:15:07,480 --> 00:15:14,170
then there was a bypass created by
Mattias Karlsson he was pretty smart he

169
00:15:14,170 --> 00:15:20,540
said let's stick to string of the scope
object its constructor its prototype its

170
00:15:20,540 --> 00:15:26,610
to string and other ride with two string
constructor prototype and call so to

171
00:15:26,610 --> 00:15:33,760
string is being turned into a call only
the framework doesn't notice then he

172
00:15:33,760 --> 00:15:39,269
creates an array with two elements
element and a malicious element then he

173
00:15:39,269 --> 00:15:45,800
starts that area and afterwards he just
passes the militias constructor that he

174
00:15:45,800 --> 00:15:51,459
just overwrote it would get a function
call it would enable sandbox by past

175
00:15:51,459 --> 00:15:58,729
governors bypass is even more complex I
suggest we're not gonna go through this

176
00:15:58,730 --> 00:16:03,779
thing right now because it's gonna
consume too much time but if you are

177
00:16:03,779 --> 00:16:09,589
interested in how it works in the detail
please approach me after the talk but

178
00:16:09,589 --> 00:16:13,480
you can see it's getting more complex

179
00:16:13,480 --> 00:16:20,899
there is another possibility to a bypass
it by using event handlers you can say

180
00:16:20,899 --> 00:16:28,000
we have an event and refocus and then
you access the event object which is

181
00:16:28,000 --> 00:16:28,620
window

182
00:16:28,620 --> 00:16:33,380
access location you access location
replace you throw in a javascript your

183
00:16:33,380 --> 00:16:40,740
eye and then you do it much more simple
but not as generic and last but not

184
00:16:40,740 --> 00:16:46,279
least there is a new my past that is
also working against one point 3.2 and

185
00:16:46,279 --> 00:16:53,060
this is really extreme it looks like
list as mentioned maybe I should explain

186
00:16:53,060 --> 00:16:58,899
it piece by piece after the presentation
because otherwise be sitting here one

187
00:16:58,899 --> 00:17:08,160
hour however this is the current state
seemingly and after one point 2.3 the

188
00:17:08,160 --> 00:17:13,490
sandbox was considered secure access to
pretty much everything has been

189
00:17:13,490 --> 00:17:22,140
restricted no window no function no
object no call no reply no document

190
00:17:22,140 --> 00:17:28,130
notes nothing everything was blocked but
that really derail the end of the road

191
00:17:28,130 --> 00:17:35,440
is it really safe no not this is a
bypass that is working against almost

192
00:17:35,440 --> 00:17:42,090
the newest version one point for point
five and this time it makes use of a

193
00:17:42,090 --> 00:17:48,549
trick where you don't accept lead
directly access proto but indirectly

194
00:17:48,549 --> 00:17:55,370
with the screen being element of an
array element of an array and then you

195
00:17:55,370 --> 00:17:55,989
call ever

196
00:17:55,990 --> 00:18:02,680
which has been provided by English as a
secure tentative to really run

197
00:18:02,680 --> 00:18:09,000
then was fixed and meanwhile the
bypasses have reached a level that

198
00:18:09,000 --> 00:18:13,300
seemingly cannot be fixed anymore where
the mid trainers seem to have given up

199
00:18:13,300 --> 00:18:19,379
one of them I have fewer that was owned
by Kara Thrace and you can see it's

200
00:18:19,380 --> 00:18:24,990
getting even more simple because he
directly impacts the evil and not the

201
00:18:24,990 --> 00:18:33,280
sent box anymore which is very
interesting and there is last but not

202
00:18:33,280 --> 00:18:38,210
least one more bypass that however
requires interaction but I think it's

203
00:18:38,210 --> 00:18:45,310
fun and it looks like this it's a
sandbox bypass that requires you to use

204
00:18:45,310 --> 00:18:53,379
copy and paste because they basically
abuses the expression Paris or inside

205
00:18:53,380 --> 00:18:59,920
angularjs to fill your clip art with
malicious data and the next time you

206
00:18:59,920 --> 00:19:02,250
paste you have an alert

207
00:19:02,250 --> 00:19:06,860
JavaScript execution

208
00:19:06,860 --> 00:19:13,689
so you can see building a javascript and
boxes heart maintaining the Sandbox is

209
00:19:13,690 --> 00:19:17,660
even harder but making sure that the
same purpose doesn't break too many

210
00:19:17,660 --> 00:19:23,660
things and still is secure as close to
impossible there will always be bypasses

211
00:19:23,660 --> 00:19:30,600
it's just a matter of time whenever you
run into a pan test where you have to

212
00:19:30,600 --> 00:19:36,070
penetration test a website that is using
angularjs always have a look at the

213
00:19:36,070 --> 00:19:41,918
bypasses always try to play with them
don't use classic XSS directors because

214
00:19:41,919 --> 00:19:50,440
they will work the classic ones won't
talk about the next attack a two and

215
00:19:50,440 --> 00:19:56,419
let's talk about the sanitizer as
mentioned angularjs offers to sanitize

216
00:19:56,419 --> 00:20:02,140
potentially dangerous HTML and for the
future of the component that is called

217
00:20:02,140 --> 00:20:09,000
dollar senators you give it a string
that is user controlled and after its

218
00:20:09,000 --> 00:20:13,890
done with its training done sanitizing
that string the supposed to be clean and

219
00:20:13,890 --> 00:20:23,070
safe to use does that really work that
so many times over is being used for was

220
00:20:23,070 --> 00:20:30,549
being used up until a few weeks ago and
it relied on a core feature on an HTML

221
00:20:30,549 --> 00:20:37,740
parser there was written by John Rzeznik
in 2008 so this should give you

222
00:20:37,740 --> 00:20:41,870
something to think like such an old fart
like such an old piece of software

223
00:20:41,870 --> 00:20:47,000
security component can let go well

224
00:20:47,000 --> 00:20:55,090
cannot restrict and it doesn't allow too
many things so you can use links

225
00:20:55,090 --> 00:21:03,459
elements paragraphs but that's it but it
can still be bypassed

226
00:21:03,460 --> 00:21:11,409
this is the way how to do it was an SVG
because they are white list that element

227
00:21:11,409 --> 00:21:18,039
inside the SVG because it's likely that
it all you need is some JSON response or

228
00:21:18,039 --> 00:21:24,789
some image are some PDF or anything
where you can control the contents and

229
00:21:24,789 --> 00:21:29,658
then you have a Nexus S and have a full
blown bypass we see these bypasses the

230
00:21:29,659 --> 00:21:34,419
lot and they work and almost universally
across chrome for example does not check

231
00:21:34,419 --> 00:21:40,190
the MIME type and it doesn't matter what
you fetch with SPG use it will execute

232
00:21:40,190 --> 00:21:49,480
able to use any type of one that is not
that broken and now they're using

233
00:21:49,480 --> 00:21:55,059
document implementation add-on feature
that is supposed to be safe we also use

234
00:21:55,059 --> 00:22:02,360
it with Tom purify so I hope it's safe
it's still very strict but they made it

235
00:22:02,360 --> 00:22:08,850
even more strict by prohibiting SVG
because they realized a serious heart to

236
00:22:08,850 --> 00:22:16,678
10 but of course by possible the trick
here is to use Chrome because chrome has

237
00:22:16,679 --> 00:22:21,640
a bag and if you have a URL and chrome
like this

238
00:22:21,640 --> 00:22:29,320
using a Unicode white base in front of
the protocol handler and then you feed

239
00:22:29,320 --> 00:22:34,129
that to the sanitizer the senators would
say that was safe because it's not

240
00:22:34,130 --> 00:22:40,490
really a job when you take the resulting
HTML and you put it into the page with

241
00:22:40,490 --> 00:22:46,679
inner HTML this is what you normally do
then chrome will internally mutate the

242
00:22:46,679 --> 00:22:52,770
white space stripper to remove it and
thereby activity javascriptyour I and

243
00:22:52,770 --> 00:22:57,668
you have a bypass this works for this
this this this this this this and all

244
00:22:57,669 --> 00:22:59,140
those characters

245
00:22:59,140 --> 00:23:04,610
so whenever you run into application
that uses the sanitizer try to play with

246
00:23:04,610 --> 00:23:11,840
these kinds of your else because you're
very likely to bypass it so again we can

247
00:23:11,840 --> 00:23:15,199
see creating a sanitizer is easy

248
00:23:15,200 --> 00:23:19,680
creating a sanitizer that actually works
and knows about the browser's first

249
00:23:19,680 --> 00:23:24,710
Cummings it's much harder and that is
the part that is missing they created

250
00:23:24,710 --> 00:23:30,990
something but they didn't go into detail

251
00:23:30,990 --> 00:23:39,410
let's talk about a three attacking the
CSP mode and it starts to get funny as

252
00:23:39,410 --> 00:23:45,590
mentioned angularjs is capable of being
top of being compatible with CSP content

253
00:23:45,590 --> 00:23:55,350
to security policy to hear no see espy
esp is amazing because he is a good

254
00:23:55,350 --> 00:24:01,059
technique to actually stop cross-site
scripting from happening because CSP

255
00:24:01,059 --> 00:24:07,860
restricts the scripts that the browser
is allowed to execute that means no more

256
00:24:07,860 --> 00:24:09,649
external resources

257
00:24:09,650 --> 00:24:15,230
except the ones that are weightless that
no more evil normal location assignment

258
00:24:15,230 --> 00:24:20,750
normal Dominic's RSS no more event
handlers all these are gone CSP blocks

259
00:24:20,750 --> 00:24:29,270
all of them so most of the frameworks
that exist don't work with CSP because

260
00:24:29,270 --> 00:24:34,950
they use the function constructor to
evaluate expressions angularjs however

261
00:24:34,950 --> 00:24:41,700
it does work with CSP it has a special
note so the only framework that you can

262
00:24:41,700 --> 00:24:46,250
use just so on a website that is
utilizing CSP

263
00:24:46,250 --> 00:24:52,600
angularjs making even more popular
everyone to bypass that and we want to

264
00:24:52,600 --> 00:24:58,830
abuse angularjs to bypass eSP is that
possible

265
00:24:58,830 --> 00:25:02,699
it was quite easily

266
00:25:02,700 --> 00:25:07,860
in a website that is not protected by
CSP where you have an injection you can

267
00:25:07,860 --> 00:25:12,949
easily do this just inject the on click
alert one and done

268
00:25:12,950 --> 00:25:18,030
gripping trivial but if she is peace
existing you can't do that because it's

269
00:25:18,030 --> 00:25:25,500
blocked not if English is there because
angularjs uses mark-up sugar as

270
00:25:25,500 --> 00:25:30,710
mentioned before and they bring their
own event handlers for example in G

271
00:25:30,710 --> 00:25:37,740
minor click inside this event handler to
have access to an object that is called

272
00:25:37,740 --> 00:25:44,530
$2 event dollar event is the actual
document and every day event exposes

273
00:25:44,530 --> 00:25:52,930
window by the property of you so this is
a window that holy and very important

274
00:25:52,930 --> 00:25:58,210
property in the dog that you always want
access to its right here so all you have

275
00:25:58,210 --> 00:26:02,810
to do is say window alert one and done
you have a full blown XSS despite see or

276
00:26:02,810 --> 00:26:10,480
speak thanks to English of course they
fix that

277
00:26:10,480 --> 00:26:15,130
this is what you could do back then and
all the versions you could inject energy

278
00:26:15,130 --> 00:26:21,309
miners click and recall include X miners
and reminders clerk data miners and

279
00:26:21,309 --> 00:26:25,250
reminders click or if you wanted to
underscore minus underscore minus

280
00:26:25,250 --> 00:26:28,260
underscore and so on because they
normalize the attribute before they

281
00:26:28,260 --> 00:26:33,220
Paris them so you can feed the parser
nonsense and it makes something

282
00:26:33,220 --> 00:26:38,429
reasonably fit so when you run into a
white list or a blacklist try to play

283
00:26:38,429 --> 00:26:43,470
with these they might give you a
prescription but as mentioned they fix

284
00:26:43,470 --> 00:26:51,110
that of course well interestingly there
is to buy passes one that is theoretical

285
00:26:51,110 --> 00:26:57,629
we're going to see this now and one that
is universal in case of one condition is

286
00:26:57,630 --> 00:27:02,980
given and that conditions common the
theoretical bypass he was a sec my

287
00:27:02,980 --> 00:27:09,160
script 6 the new version of JavaScript
and it makes use of the reflect API

288
00:27:09,160 --> 00:27:18,600
because combining of lawn chrome and
block your eyes and to reflect API you

289
00:27:18,600 --> 00:27:24,240
can inject coat into an expression that
will end up to become actual arbitrary

290
00:27:24,240 --> 00:27:29,850
JavaScript execution know how does that
work but it's actually looks like this

291
00:27:29,850 --> 00:27:35,459
since this is a bit complicated to read
I would like to explain in more detail

292
00:27:35,460 --> 00:27:41,080
on the next flight we have to read from
bottom to top

293
00:27:41,080 --> 00:27:46,809
to understand what is going on first
building block

294
00:27:46,809 --> 00:27:51,590
but we don't build a regular blow up to
build a block in javascript

295
00:27:51,590 --> 00:27:57,279
we need the new operator but in
angularjs becomes use the new operator

296
00:27:57,279 --> 00:28:04,059
it oppresses that we bypass that
restriction by using a escape six and

297
00:28:04,059 --> 00:28:09,950
then you reflect API because with that
we can omit the new operator and can't

298
00:28:09,950 --> 00:28:15,379
do this in a functional way but calling
reflect construct this is equivalent to

299
00:28:15,379 --> 00:28:21,990
the new operator then we have a blob we
feel that block with HTML we feel that

300
00:28:21,990 --> 00:28:28,129
extra mile with JavaScript we create a
blog URL and then we throw the blog URL

301
00:28:28,129 --> 00:28:32,039
into location replace and that is
allowed

302
00:28:32,039 --> 00:28:39,499
despite your speech and interestingly
for blog URLs chrome forgets about CSP

303
00:28:39,499 --> 00:28:44,710
and we have full-blown code execution
despite it being in place in the first

304
00:28:44,710 --> 00:28:50,929
time sadly this is theoretical because
chrome does not yet support reflect

305
00:28:50,929 --> 00:28:57,529
firefox does and Microsoft edged us
chrome not yet let's see maybe tomorrow

306
00:28:57,529 --> 00:29:02,869
this works maybe in one week maybe in
one year we don't know but we don't want

307
00:29:02,869 --> 00:29:10,490
to see theoretical bypasses wanna see
real bypasses so the real bypass is

308
00:29:10,490 --> 00:29:18,509
actually quite funny because it's unreal
bypass the problem is something else and

309
00:29:18,509 --> 00:29:24,749
the problem is something that cannot be
fixed easily because imagine a page

310
00:29:24,749 --> 00:29:33,440
using angularjs newest version no
bypasses no CSP bypasses and its

311
00:29:33,440 --> 00:29:38,610
fetching and luxurious from a content
delivery network and you have an

312
00:29:38,610 --> 00:29:39,879
injection on that page

313
00:29:39,879 --> 00:29:46,230
well the first thing that comes to mind
as I can maybe just include an older

314
00:29:46,230 --> 00:29:51,929
version of angularjs and overwrite the
existing one and bring the old man's

315
00:29:51,929 --> 00:29:55,549
back the old bypasses that might work

316
00:29:55,549 --> 00:30:01,999
but then you might think this cannot
work because it's a race condition we

317
00:30:01,999 --> 00:30:08,899
have to be slower than the New England
Jas and the old angularjs smaller than

318
00:30:08,899 --> 00:30:10,189
the New England vs

319
00:30:10,190 --> 00:30:16,289
so the older one always loads faster
than the newer one so the you run comes

320
00:30:16,289 --> 00:30:23,610
later and we'll get control over the top
because it executes last but the funding

321
00:30:23,610 --> 00:30:29,789
is there is no race condition because
the developers decided to implement a

322
00:30:29,789 --> 00:30:35,609
collision check that means that old
angularjs versions might call light you

323
00:30:35,609 --> 00:30:42,080
can fetch two of them are three loading
at the same time on the same page but

324
00:30:42,080 --> 00:30:47,428
newer versions have a collision check in
when they find a different version but I

325
00:30:47,429 --> 00:30:52,879
have to get out and they won't vote so
that collision checkers winning the race

326
00:30:52,879 --> 00:30:59,939
for us always and at all times no matter
how do the English version is because

327
00:30:59,940 --> 00:31:05,519
the newer one whenever it loads will
find out hey there is one already I will

328
00:31:05,519 --> 00:31:11,359
stop now I will not vote in the older
who wins and you have other bypasses

329
00:31:11,359 --> 00:31:16,020
back that looks like this

330
00:31:16,020 --> 00:31:23,150
here you see strong CSP headers here you
see the latest version of England Jas

331
00:31:23,150 --> 00:31:28,740
being factored that is there in the
first place on the injected page and

332
00:31:28,740 --> 00:31:34,820
here's our injection to inject here you
close the attribute old version of

333
00:31:34,820 --> 00:31:38,820
English Jas reassigned the event handler

334
00:31:38,820 --> 00:31:43,700
event you will read one and that's it
just such an older version and you will

335
00:31:43,700 --> 00:31:50,170
always have universal bypass that they
made is that they implemented a

336
00:31:50,170 --> 00:31:54,370
collision check which is good they did
it too late

337
00:31:54,370 --> 00:32:00,419
which is not so good so this bypasses
gonna state and its gonna be heart to be

338
00:32:00,420 --> 00:32:10,080
fixed if at all but not for the real fun
part so we don't want to we don't only

339
00:32:10,080 --> 00:32:19,480
want to accept attack angularjs code and
San boxers and the CSP mode but we want

340
00:32:19,480 --> 00:32:25,030
to see if we can really be evil and
attack the framework itself and the

341
00:32:25,030 --> 00:32:33,200
developers and there was a coordinated
plan that I developed with Google and

342
00:32:33,200 --> 00:32:39,900
the security team and we wanted to find
out if you can smuggle a back into the

343
00:32:39,900 --> 00:32:46,050
English escort base and see if the
developers notice

344
00:32:46,050 --> 00:32:50,220
let's see how that went I mentioned
already

345
00:32:50,220 --> 00:32:58,350
angularjs has a lot of traction a lot of
commits a lot of pull requests a lot of

346
00:32:58,350 --> 00:33:05,899
takers a lot of users who contribute so
we wanted to abuse that and the fact

347
00:33:05,900 --> 00:33:07,850
that so popular

348
00:33:07,850 --> 00:33:16,139
to sneak in or payload the only thing
that we needed was the stars to be in

349
00:33:16,140 --> 00:33:22,130
the right constellation for an attack
and with a framework that big and that

350
00:33:22,130 --> 00:33:30,550
complex this is very likely very
probable what we needed would be a

351
00:33:30,550 --> 00:33:37,430
Saddleback a small bug that no one
really noticed but that gave us the

352
00:33:37,430 --> 00:33:44,110
possibility to sneak in an attack and
stand and this attack would have to

353
00:33:44,110 --> 00:33:50,340
bypass the security audits QA and the
scrutiny of the users and developers

354
00:33:50,340 --> 00:33:56,178
heart but it's possible

355
00:33:56,179 --> 00:34:01,519
there we were lucky and we found this
kind of bug after a long time and it

356
00:34:01,519 --> 00:34:08,010
looks like this as mentioned angularjs
has a sanitizer and we have already seen

357
00:34:08,010 --> 00:34:14,089
how to bypass the sanitizer but those
bypasses all conditional and we wanted

358
00:34:14,089 --> 00:34:17,578
to have something universal

359
00:34:17,579 --> 00:34:22,369
analyzed the Senate oh so closely and
realized that it using a wait list for

360
00:34:22,369 --> 00:34:27,300
attributes and in this way for a
tributes they have two attributes that

361
00:34:27,300 --> 00:34:35,119
are very interesting attribute name and
attribute type those are SVG attributes

362
00:34:35,119 --> 00:34:41,500
and they allow us to cause cross-site
scripting how we will see in a second

363
00:34:41,500 --> 00:34:47,319
know those two attributes are already in
there inside that whitelist so

364
00:34:47,319 --> 00:34:53,129
technically they created their own
bypass they didn't they had about

365
00:34:53,129 --> 00:35:02,799
because when sanitizing HTML they lower
cased all attributes but they forgot

366
00:35:02,799 --> 00:35:11,480
that lower casing of HTML is ok but
lower casing an SVG is not because SCG

367
00:35:11,480 --> 00:35:17,559
has CamelCase attributes so we can just
lower case if you do so you ruin the

368
00:35:17,559 --> 00:35:24,030
sanitizer because it will not match even
if it develops so we decided to follow

369
00:35:24,030 --> 00:35:31,460
back and tell them about their could you
please fix it and we kind of wrote some

370
00:35:31,460 --> 00:35:36,960
cases and made a tasty for them and we
were hoping that they won't realize what

371
00:35:36,960 --> 00:35:41,090
our actual plan was

372
00:35:41,090 --> 00:35:46,810
so we found the back and we knew if that
bad was being fixed we would get a

373
00:35:46,810 --> 00:35:51,970
cross-site scripting for free as a
consequence from the six and it took two

374
00:35:51,970 --> 00:35:59,990
months it was actually close to January
2015 when they saw the buck ticket and

375
00:35:59,990 --> 00:36:08,270
they decided to fix it and the evil part
of me was the fix the back and create a

376
00:36:08,270 --> 00:36:12,540
cross-site scripting the process
gripping would look like this

377
00:36:12,540 --> 00:36:19,970
to take an SVG element to take an anchor
you have a harmless attributed this

378
00:36:19,970 --> 00:36:23,020
anger you say X link href

379
00:36:23,020 --> 00:36:28,509
question mark completely harmless
doesn't do anything then you put

380
00:36:28,510 --> 00:36:31,540
something inside this anchor to
displayed

381
00:36:31,540 --> 00:36:38,460
huge circle this one here and then after
that circle you put in any major element

382
00:36:38,460 --> 00:36:46,040
without any major element you can any
mate declaratively the parent element of

383
00:36:46,040 --> 00:36:53,960
the enemy element and you can pick the
attributes that you want to change but

384
00:36:53,960 --> 00:36:59,890
the sanitizer realizes if you want to do
something evil and the senate I realize

385
00:36:59,890 --> 00:37:07,480
if UN email a link to a javascript URL
so that wouldn't work but there is a

386
00:37:07,480 --> 00:37:15,490
small bypass in the small bypass is
using invalid XML because we having a

387
00:37:15,490 --> 00:37:21,009
harmless until you hear question mark
and we want to any made that harmlessly

388
00:37:21,010 --> 00:37:30,780
through different harmlessly p.m.
percent but this in XML and XML is an

389
00:37:30,780 --> 00:37:37,110
invalid entity so the browser will try
to any made it to the invalid entity

390
00:37:37,110 --> 00:37:45,090
within realize oh I can do that and then
it will forget what you get back to and

391
00:37:45,090 --> 00:37:51,589
instead of using the old attribute that
to the from attribute

392
00:37:51,589 --> 00:37:55,069
and thereby creating jobs could be your
ID that is active and you have a

393
00:37:55,069 --> 00:38:02,450
cross-site scripting so we abused three
things the browser the weird

394
00:38:02,450 --> 00:38:09,259
intersections between HTML and XML and
the fact that the sanitizer doesn't

395
00:38:09,259 --> 00:38:15,089
realize this multi-step injection that
is giving us the possibility to animate

396
00:38:15,089 --> 00:38:20,700
a link to something harmless but in
velit and then have the browser change

397
00:38:20,700 --> 00:38:27,230
it for us to something malicious and
that worked

398
00:38:27,230 --> 00:38:32,560
needless to say we of course reported
that issue too good security and told

399
00:38:32,560 --> 00:38:37,040
them that we just tricked the English
test him and that he tricked them into

400
00:38:37,040 --> 00:38:42,560
doing a commit that is giving us a
cross-site scripting and that we knew

401
00:38:42,560 --> 00:38:47,859
about this all the time and were kind of
playing with them they informed the

402
00:38:47,859 --> 00:38:56,650
England team and the team was angry and
they didn't like it and they were so

403
00:38:56,650 --> 00:39:02,510
angry that they didn't want to fix it so
nothing happened four weeks we did this

404
00:39:02,510 --> 00:39:09,540
against a better version and the second
better came in the third better came

405
00:39:09,540 --> 00:39:16,720
like getting nervous in the fifth letter
came in the release candidate came into

406
00:39:16,720 --> 00:39:22,490
contact with Google again and you have
to urge them to fix this right now

407
00:39:22,490 --> 00:39:29,049
because you're very close to release and
then you really have a problem so

408
00:39:29,050 --> 00:39:33,680
finally they actually did fix the bug
about it was last minute

409
00:39:33,680 --> 00:39:39,470
the consequence of that is that the
England team doesn't really like me

410
00:39:39,470 --> 00:39:46,930
anymore but I think that it's OK and
other good consequence is that they now

411
00:39:46,930 --> 00:39:56,060
have extra security in the sanitizer so
they added the comment that nobody ever

412
00:39:56,060 --> 00:40:02,210
just touch it or else because someone
was here and did evil already we don't

413
00:40:02,210 --> 00:40:09,580
want to have to think twice so now
they're more careful but the funniest

414
00:40:09,580 --> 00:40:16,040
thing was in the end because the England
team really didn't like her so that but

415
00:40:16,040 --> 00:40:20,369
the funny thing was to be given back
wanting so

416
00:40:20,369 --> 00:40:28,839
we saw back we realize that the fix
would be a security problem we've had

417
00:40:28,839 --> 00:40:37,200
that buck be convinced them to fix it we
had them create an exercise for us then

418
00:40:37,200 --> 00:40:44,730
we told Google and Google told them to
fix that thing they were angry and in

419
00:40:44,730 --> 00:40:55,099
the end even even got plenty so now we
are turning into honey boo boo well my

420
00:40:55,099 --> 00:41:03,809
conclusion here is Angela Jae s still
provides a lot of attack surface and the

421
00:41:03,809 --> 00:41:10,259
framework is so complex that we really
need to be watching closely what is

422
00:41:10,259 --> 00:41:15,319
happening and we need to be systematic
about analyzing the security properties

423
00:41:15,319 --> 00:41:24,440
in many situations when you ordered a
website that is used in England Jas it

424
00:41:24,440 --> 00:41:30,450
is getting extremely heart and tedious
it's really hard to find her abilities

425
00:41:30,450 --> 00:41:35,739
you know that they might be there but
you can never clearly pin-point them

426
00:41:35,739 --> 00:41:43,230
unless you really know angularjs this is
the same for developers who wants to

427
00:41:43,230 --> 00:41:48,099
want to build websites using a luxurious
they not only have to understand the

428
00:41:48,099 --> 00:41:53,880
framework they also have to understand
the shortcomings of the framework and

429
00:41:53,880 --> 00:41:57,489
the shortcomings that appear if you
don't follow the philosophy of the

430
00:41:57,489 --> 00:42:05,680
framework and complex websites are
complex so there's always ways that you

431
00:42:05,680 --> 00:42:11,769
want to utilize that cannot follow the
standard and then you see those joined

432
00:42:11,769 --> 00:42:18,799
points these kind of complicated areas
and website for example interaction

433
00:42:18,799 --> 00:42:25,230
between two domains and intelligence
being in place then you can almost be

434
00:42:25,230 --> 00:42:25,999
certain

435
00:42:25,999 --> 00:42:30,578
that you have a bypass that you have an
attack but to be able to carry out that

436
00:42:30,579 --> 00:42:36,229
attack you need to know the sandbox
bypass or shine on your own and that's

437
00:42:36,229 --> 00:42:45,549
the complicated part one of the topics
of future work for us is to create a

438
00:42:45,549 --> 00:42:52,699
sandbox bypass guide that means we're
currently building a tool that gives you

439
00:42:52,699 --> 00:42:58,509
all known samples by passes sort of a
version number so whenever you run into

440
00:42:58,509 --> 00:43:04,219
a penetration test against the language
as driven application you just have to

441
00:43:04,219 --> 00:43:09,629
use the tool and enter the version
number and get the proper bypass it's

442
00:43:09,629 --> 00:43:15,169
not done yet I hope it will be done
within the next two weeks but I guess

443
00:43:15,169 --> 00:43:19,969
this is one of the few ways that we can
actually easy penetration testing

444
00:43:19,969 --> 00:43:25,200
websites that use a religious

445
00:43:25,200 --> 00:43:30,868
conclude that using older versions of
angola Jas is very very dangerous

446
00:43:30,869 --> 00:43:38,220
because the old versions have many banks
and even if you have an injection into a

447
00:43:38,220 --> 00:43:44,348
website that uses a very new version you
can bring the old version back and we

448
00:43:44,349 --> 00:43:49,640
also learned that an open source project
or library that is used everywhere but

449
00:43:49,640 --> 00:43:54,890
has a lot of traction and thousands of
commits is dangerous because people

450
00:43:54,890 --> 00:43:59,390
might oversee security issue is even if
they are maliciously introduced by

451
00:43:59,390 --> 00:44:04,160
someone from the outside world forever
to be positive

452
00:44:04,160 --> 00:44:09,140
Google security team already does well
and they do a lot to make english as

453
00:44:09,140 --> 00:44:16,960
even more secure I do believe however
that there is room for optimization and

454
00:44:16,960 --> 00:44:22,140
that Google could do better and hadn't
developers because there is not so many

455
00:44:22,140 --> 00:44:28,089
guidelines of their developers how to
securely single-edge a yes and that is

456
00:44:28,089 --> 00:44:28,700
still missing

457
00:44:28,700 --> 00:44:35,390
maybe this is also one of the outcomes
of this presentation will take

458
00:44:35,390 --> 00:44:40,640
that is basically it we have seen four
different attack parent's attacking the

459
00:44:40,640 --> 00:44:47,049
sandbox taking the sanitizer taking the
CSP moat and last but not least

460
00:44:47,049 --> 00:44:54,359
attacking the code base in all of the
four attacks were successful so let's

461
00:44:54,359 --> 00:44:55,288
see where this goes

462
00:44:55,289 --> 00:45:02,260
and I'm very excited for future versions
of England jazz and especially excited

463
00:45:02,260 --> 00:45:07,190
for version 2.0 because then again
everything will change and the web will

464
00:45:07,190 --> 00:45:12,859
change along and so do we as penetration
testers because we still have to be able

465
00:45:12,859 --> 00:45:17,160
to evaluate and assess the security of
those websites and we can only do that

466
00:45:17,160 --> 00:45:22,328
if you really know the browser if you
really know the framework and if you

467
00:45:22,329 --> 00:45:28,490
really love the application and that
doesn't make it easier last but not

468
00:45:28,490 --> 00:45:32,538
least credits go to Gareth McKay's

469
00:45:32,539 --> 00:45:39,670
actually carry case I just take care of
my case of cult on government David Ross

470
00:45:39,670 --> 00:45:44,089
of Google and other word of Eli of
Google and those two gentlemen David

471
00:45:44,089 --> 00:45:48,890
Ross and Eduardo Vela actually permitted
us to do this attack against the court

472
00:45:48,890 --> 00:45:54,269
basis so thanks to them and thanks a lot
and also things look to you for

473
00:45:54,269 --> 00:45:58,558
attending the STOCK and if you don't
have any questions and I think now is

474
00:45:58,559 --> 00:46:06,099
the time to kill you you know
presentation tomorrow to give us good

475
00:46:06,099 --> 00:46:21,720
question I'll answer them or their
vehicle and cutting who need JavaScript

476
00:46:21,720 --> 00:46:38,439
talking on the phone 09 2009 averaged
about script that I do much that I

477
00:46:38,440 --> 00:46:55,730
yes I believe that JavaScript itself is
not vulnerable are attainable I believe

478
00:46:55,730 --> 00:47:02,880
that JavaScript in combination with the
DOM creates abilities because the DOM is

479
00:47:02,880 --> 00:47:09,470
the one that is turning strings into
coat in HTML function constructor HTML

480
00:47:09,470 --> 00:47:16,618
elements etc etc so I would still
recommend to develop JavaScript and

481
00:47:16,619 --> 00:47:22,579
telescope implications of all kinds no
problem with it all but the problem I

482
00:47:22,579 --> 00:47:28,910
have is when JavaScript hits something
else like the DOM or any similar later

483
00:47:28,910 --> 00:47:34,279
then we'll abilities that period because
new language features and unknown

484
00:47:34,280 --> 00:47:40,480
language features of JavaScript don't
necessarily transpire to the dorm in a

485
00:47:40,480 --> 00:47:45,319
way it's safe and that is the majority
of all abilities that we find an

486
00:47:45,319 --> 00:47:52,460
application's not religious and
JavaScript them itself but

487
00:47:52,460 --> 00:47:55,020
rehabilitation JavaScript plus the dog

488
00:47:55,020 --> 00:48:08,620
Tommy Hunter totemo

489
00:48:08,620 --> 00:48:11,630
to Jas

490
00:48:11,630 --> 00:48:14,950
Jordan you don't know

491
00:48:14,950 --> 00:48:22,430
yes

492
00:48:22,430 --> 00:48:31,029
I think reactor yes mostly takes care of
the view controller and the model

493
00:48:31,030 --> 00:48:42,079
actually we tested react very thoroughly
and they thought it was fine so

494
00:48:42,079 --> 00:48:48,579
bilities Jas are hard to trigger and
they are rarely caused by the framework

495
00:48:48,579 --> 00:48:55,040
itself whereas with angularjs it's clear
that the framework causes verbal

496
00:48:55,040 --> 00:49:00,800
abilities because the framework exposes
new features that can be abused

497
00:49:00,800 --> 00:49:10,220
we also had a look at other frameworks
amber knockout and similar but angularjs

498
00:49:10,220 --> 00:49:16,770
were still sticking out in terms of
numbers of bugs numbers of new patterns

499
00:49:16,770 --> 00:49:24,859
not always the best developer reaction
never any CD East despite security

500
00:49:24,859 --> 00:49:32,680
vulnerabilities so I think other
frameworks have problems as well but

501
00:49:32,680 --> 00:49:38,069
English is these are the most attention
because popularity and number of issues

502
00:49:38,069 --> 00:49:47,950
and development processes

503
00:49:47,950 --> 00:49:58,109
the Syrian article she has been bypassed
you can instead he is alright God

504
00:49:58,109 --> 00:50:26,490
resource provide the hash and that's it
so you don't have a compromise CBN you

505
00:50:26,490 --> 00:50:30,859
just touch something else from the CD
and calculate the hash and you're done

506
00:50:30,859 --> 00:50:38,910
so sry smarter solution

507
00:50:38,910 --> 00:50:53,879
thank you I think he ended the first
session thank you very much for your

508
00:50:53,880 --> 00:50:56,720
wonderful presentation when he joined

