1
00:00:05,540 --> 00:00:10,960
my name is Ben Schmitt I'm the chief

2
00:00:08,420 --> 00:00:12,980
security officer at Polly's Warren and

3
00:00:10,960 --> 00:00:19,550
today I'm going to be talking about

4
00:00:12,980 --> 00:00:22,330
smart contract honey pots assuming I get

5
00:00:19,550 --> 00:00:22,330
to the next slide

6
00:00:22,900 --> 00:00:30,099
so what this talk is gonna cover our

7
00:00:26,170 --> 00:00:32,660
supposedly vulnerable contracts that

8
00:00:30,100 --> 00:00:34,819
aren't actually as vulnerable as they

9
00:00:32,659 --> 00:00:37,248
look when you look at them that have

10
00:00:34,819 --> 00:00:39,649
actually been deployed in the wild if

11
00:00:37,249 --> 00:00:41,569
you guys are participating in the poly

12
00:00:39,649 --> 00:00:43,069
swarm smart contract hacking challenge

13
00:00:41,569 --> 00:00:46,269
there's also some interesting tips in

14
00:00:43,069 --> 00:00:51,319
here that are related to this talk so

15
00:00:46,269 --> 00:00:54,199
definitely pay attention what this talk

16
00:00:51,319 --> 00:00:56,780
doesn't cover is how to find these honey

17
00:00:54,199 --> 00:00:57,979
pots there's some active research that

18
00:00:56,780 --> 00:01:02,239
I'm doing on that but it's not quite

19
00:00:57,979 --> 00:01:04,039
ready to publish it scams that aren't

20
00:01:02,239 --> 00:01:07,070
about attacking attackers so there's a

21
00:01:04,040 --> 00:01:10,009
ton of scams in the community but they

22
00:01:07,070 --> 00:01:11,839
are not a particularly technical

23
00:01:10,009 --> 00:01:14,180
technically interesting most of the time

24
00:01:11,840 --> 00:01:17,649
and I'm definitely not going to be

25
00:01:14,180 --> 00:01:19,850
talking about the legal status of

26
00:01:17,649 --> 00:01:23,030
stealing money from people trying to

27
00:01:19,850 --> 00:01:25,369
hack things I'm not a lawyer but I would

28
00:01:23,030 --> 00:01:30,140
definitely not recommend doing anything

29
00:01:25,369 --> 00:01:32,149
in this presentation so before we can

30
00:01:30,140 --> 00:01:34,460
start talking about these things because

31
00:01:32,149 --> 00:01:37,009
a lot of these contracts are technically

32
00:01:34,460 --> 00:01:39,829
interesting we need to understand how a

33
00:01:37,009 --> 00:01:42,140
theorem works so I'm gonna give a quick

34
00:01:39,829 --> 00:01:45,048
crash course on both aetherium and the

35
00:01:42,140 --> 00:01:47,149
major programming language solidity so

36
00:01:45,049 --> 00:01:51,380
that you can understand how some of

37
00:01:47,149 --> 00:01:52,969
these contracts work internally the so

38
00:01:51,380 --> 00:01:55,869
funds in aetherium are managed by

39
00:01:52,969 --> 00:01:58,309
account it's just like a bank account

40
00:01:55,869 --> 00:02:00,740
except your access is managed by a

41
00:01:58,310 --> 00:02:02,990
public/private key pair now there's two

42
00:02:00,740 --> 00:02:06,859
types of accounts external accounts

43
00:02:02,990 --> 00:02:10,759
which are the normal funds funded

44
00:02:06,859 --> 00:02:13,549
accounts that anyone any normal person

45
00:02:10,759 --> 00:02:14,959
would use to send and receive funds the

46
00:02:13,550 --> 00:02:17,570
other type is a special

47
00:02:14,960 --> 00:02:20,540
caught a contract account now these

48
00:02:17,570 --> 00:02:24,320
accounts actually manage the funds that

49
00:02:20,540 --> 00:02:26,660
are sent into them by executing code and

50
00:02:24,320 --> 00:02:29,600
determining how to distribute funds or

51
00:02:26,660 --> 00:02:32,660
not distribute funds based on this code

52
00:02:29,600 --> 00:02:35,299
deployed to the collection now accounts

53
00:02:32,660 --> 00:02:38,060
send and receive transactions and what

54
00:02:35,300 --> 00:02:40,370
transactions are at at their simplest

55
00:02:38,060 --> 00:02:42,140
form are proposed changes to the state

56
00:02:40,370 --> 00:02:45,560
of the etherium blockchain

57
00:02:42,140 --> 00:02:47,750
so whenever you send hit send something

58
00:02:45,560 --> 00:02:49,190
as long as it doesn't violate consensus

59
00:02:47,750 --> 00:02:51,500
rules and you're paying enough money to

60
00:02:49,190 --> 00:03:00,770
get it included in a block it will get

61
00:02:51,500 --> 00:03:06,290
included sorry hope everyone has been

62
00:03:00,770 --> 00:03:08,180
able to hear me so the the these

63
00:03:06,290 --> 00:03:11,420
transactions to get them included you

64
00:03:08,180 --> 00:03:13,820
have to pay fees to the miners to

65
00:03:11,420 --> 00:03:16,339
include them in a blog now these fees

66
00:03:13,820 --> 00:03:19,730
are paid and either these fees are

67
00:03:16,340 --> 00:03:21,110
important because they prevent people

68
00:03:19,730 --> 00:03:24,500
from spamming and filling up the

69
00:03:21,110 --> 00:03:28,000
blockchain and they make everything that

70
00:03:24,500 --> 00:03:30,920
you do have an Associated cost to it so

71
00:03:28,000 --> 00:03:32,360
you need some small amount of money to

72
00:03:30,920 --> 00:03:34,910
get anything processed you can think

73
00:03:32,360 --> 00:03:36,980
about it as a transaction fee once the

74
00:03:34,910 --> 00:03:40,160
transaction is confirmed the state

75
00:03:36,980 --> 00:03:46,359
changes are immutable and stored forever

76
00:03:40,160 --> 00:03:50,260
and more or less it's now the truth of

77
00:03:46,360 --> 00:03:55,760
the blockchain that everyone can see

78
00:03:50,260 --> 00:04:00,230
so all contracts these contract accounts

79
00:03:55,760 --> 00:04:02,450
are executed on the EVM so basically you

80
00:04:00,230 --> 00:04:04,070
compile down some code normally you

81
00:04:02,450 --> 00:04:07,519
don't normally write these assembly

82
00:04:04,070 --> 00:04:09,769
instructions yourself but there's a

83
00:04:07,520 --> 00:04:13,040
series of instructions that get executed

84
00:04:09,770 --> 00:04:15,350
and they will modify the chain in

85
00:04:13,040 --> 00:04:17,390
whatever way that you tell them to so

86
00:04:15,350 --> 00:04:20,570
each one of these instructions has an

87
00:04:17,390 --> 00:04:22,159
Associated gas cost which means that if

88
00:04:20,570 --> 00:04:24,560
you do a lot of stuff you might not be

89
00:04:22,160 --> 00:04:26,960
able to afford the changes that you're

90
00:04:24,560 --> 00:04:29,530
proposing and it won't actually get

91
00:04:26,960 --> 00:04:29,530
confirmed

92
00:04:32,730 --> 00:04:41,890
so solidity is what most people write in

93
00:04:38,590 --> 00:04:43,599
so they don't write this evm bytecode so

94
00:04:41,890 --> 00:04:47,680
literally it's by far the most widely

95
00:04:43,600 --> 00:04:51,010
used programming language for the

96
00:04:47,680 --> 00:04:52,330
targets the EVM it is statically typed

97
00:04:51,010 --> 00:04:55,030
turing-complete

98
00:04:52,330 --> 00:04:59,200
and it's sort of like JavaScript but not

99
00:04:55,030 --> 00:05:01,960
but it allows you to more easily manage

100
00:04:59,200 --> 00:05:05,050
the funds that go how these funds are

101
00:05:01,960 --> 00:05:08,530
transferred between accounts in your

102
00:05:05,050 --> 00:05:11,350
contract so this is a simple example all

103
00:05:08,530 --> 00:05:14,739
it does is let you store a simple string

104
00:05:11,350 --> 00:05:22,450
to the chain and allows you to view it

105
00:05:14,740 --> 00:05:24,970
in a particular way so each one of these

106
00:05:22,450 --> 00:05:27,909
contracts has a constructor and it's a

107
00:05:24,970 --> 00:05:30,850
special function that sets the initial

108
00:05:27,910 --> 00:05:34,450
state of the chain to whatever you want

109
00:05:30,850 --> 00:05:36,040
it to be so you supply some arguments

110
00:05:34,450 --> 00:05:38,380
and it sets the initial state and then

111
00:05:36,040 --> 00:05:41,110
from there all these other functions

112
00:05:38,380 --> 00:05:46,480
that you call in the contract will

113
00:05:41,110 --> 00:05:51,160
update that state and potentially allow

114
00:05:46,480 --> 00:05:54,790
you to do interesting things to it

115
00:05:51,160 --> 00:05:57,250
so functions in all contracts are by

116
00:05:54,790 --> 00:05:59,500
default public so anyone on the network

117
00:05:57,250 --> 00:06:05,500
can call in to this and depending on

118
00:05:59,500 --> 00:06:08,130
what happens it is it will confirm or

119
00:06:05,500 --> 00:06:09,790
it'll get reverted or something

120
00:06:08,130 --> 00:06:13,030
something will happen

121
00:06:09,790 --> 00:06:15,400
so each contract also has one unnamed

122
00:06:13,030 --> 00:06:20,349
function now this unnamed function is a

123
00:06:15,400 --> 00:06:23,140
fallback function it it determines what

124
00:06:20,350 --> 00:06:25,750
happens when you just send a transaction

125
00:06:23,140 --> 00:06:28,090
to a contract but don't actually specify

126
00:06:25,750 --> 00:06:30,100
what function you want to execute or if

127
00:06:28,090 --> 00:06:32,469
you specify a function that does not

128
00:06:30,100 --> 00:06:34,630
exist so this is the last-ditch effort

129
00:06:32,470 --> 00:06:37,150
to make sure something happens whenever

130
00:06:34,630 --> 00:06:39,159
you send money to a contract in most

131
00:06:37,150 --> 00:06:41,830
cases it will just fail if it's not

132
00:06:39,160 --> 00:06:44,650
intended but some contracts actually

133
00:06:41,830 --> 00:06:49,150
fun's when you don't actually call a

134
00:06:44,650 --> 00:06:51,669
function so functions are called by

135
00:06:49,150 --> 00:06:53,620
sending a transaction with associated

136
00:06:51,670 --> 00:06:55,870
transaction data now this transaction

137
00:06:53,620 --> 00:06:59,710
data is pretty simple and it's well

138
00:06:55,870 --> 00:07:03,730
defined it consists of a method ID which

139
00:06:59,710 --> 00:07:05,859
is a shortened hash of the name of the

140
00:07:03,730 --> 00:07:11,310
function and the arguments of the

141
00:07:05,860 --> 00:07:14,710
function after you specify that hash it

142
00:07:11,310 --> 00:07:18,100
you also supply encoded arguments so

143
00:07:14,710 --> 00:07:21,039
you'll put in a number or you'll put in

144
00:07:18,100 --> 00:07:24,400
some string that you want to be stored

145
00:07:21,040 --> 00:07:28,210
or processed by the contract and it'll

146
00:07:24,400 --> 00:07:30,940
be executed now constructing data is

147
00:07:28,210 --> 00:07:32,770
handled transparently by web 3 bindings

148
00:07:30,940 --> 00:07:34,480
in most cases but if you don't have

149
00:07:32,770 --> 00:07:36,370
contract source it can be a little bit

150
00:07:34,480 --> 00:07:45,040
tricky to figure out what the original

151
00:07:36,370 --> 00:07:47,490
arguments were so in addition to

152
00:07:45,040 --> 00:07:49,450
directly calling into contracts

153
00:07:47,490 --> 00:07:51,669
contracts themselves are actually

154
00:07:49,450 --> 00:07:55,479
allowed to call functions and other

155
00:07:51,669 --> 00:08:01,840
contract accounts so if you deploy a

156
00:07:55,479 --> 00:08:04,510
contract and it it needs to access some

157
00:08:01,840 --> 00:08:07,630
other contracts so you want to log some

158
00:08:04,510 --> 00:08:10,000
data in a separate place you can

159
00:08:07,630 --> 00:08:14,710
actually call in to other contracts and

160
00:08:10,000 --> 00:08:17,470
you get very complex chains of data at

161
00:08:14,710 --> 00:08:20,590
that point so you can get one contract

162
00:08:17,470 --> 00:08:24,100
calls into contract a calls into

163
00:08:20,590 --> 00:08:27,820
contract B calls into contracts see all

164
00:08:24,100 --> 00:08:29,710
of these message calls or internal

165
00:08:27,820 --> 00:08:33,909
transactions as ether scan calls them

166
00:08:29,710 --> 00:08:37,299
allow you to do things like implement

167
00:08:33,909 --> 00:08:40,088
implement libraries or implement much

168
00:08:37,299 --> 00:08:42,429
more modular code bases however it also

169
00:08:40,089 --> 00:08:46,270
makes things a lot more complicated at

170
00:08:42,429 --> 00:08:49,140
times when there's interactions between

171
00:08:46,270 --> 00:08:51,910
these contracts that you didn't expect

172
00:08:49,140 --> 00:08:54,189
so this is an example of what it looks

173
00:08:51,910 --> 00:08:54,800
like in either scan whenever a contract

174
00:08:54,190 --> 00:09:02,930
calls in

175
00:08:54,800 --> 00:09:04,790
two other contracts and as you could see

176
00:09:02,930 --> 00:09:07,010
there's a trace so every single time

177
00:09:04,790 --> 00:09:08,899
this happens an advantage generated and

178
00:09:07,010 --> 00:09:11,360
you could see that things are calling

179
00:09:08,899 --> 00:09:14,149
into each contracts this is actually an

180
00:09:11,360 --> 00:09:20,060
exploit attempt but there are normal

181
00:09:14,149 --> 00:09:21,829
reasons why this would happen so we've

182
00:09:20,060 --> 00:09:24,619
been talking a bit about how contracts

183
00:09:21,829 --> 00:09:26,239
store and updates state all contracts

184
00:09:24,620 --> 00:09:29,829
are able to store state between

185
00:09:26,240 --> 00:09:32,500
indications in an area called storage

186
00:09:29,829 --> 00:09:37,130
it's a key value store that map's

187
00:09:32,500 --> 00:09:40,779
256-bit words to other 256-bit words so

188
00:09:37,130 --> 00:09:45,110
what that essentially means is that

189
00:09:40,779 --> 00:09:48,829
starting at zero you can write 256 bits

190
00:09:45,110 --> 00:09:50,480
at a time and that's what the byte code

191
00:09:48,829 --> 00:09:51,949
that you're executing is actually

192
00:09:50,480 --> 00:09:54,410
updating whenever you're trying to

193
00:09:51,950 --> 00:09:56,600
update chance date there's two other

194
00:09:54,410 --> 00:10:00,110
places where your contract code can

195
00:09:56,600 --> 00:10:03,500
store data but it's not persistent so it

196
00:10:00,110 --> 00:10:05,390
can use memory or stack so they're much

197
00:10:03,500 --> 00:10:07,730
much cheaper to use because writing to a

198
00:10:05,390 --> 00:10:10,490
blockchain is very expensive because

199
00:10:07,730 --> 00:10:12,500
there's very limited space so most

200
00:10:10,490 --> 00:10:14,240
contracts will try and keep most of

201
00:10:12,500 --> 00:10:17,630
their cap temporary calculations in

202
00:10:14,240 --> 00:10:20,029
memory or on the stack but write them

203
00:10:17,630 --> 00:10:23,060
into storage whenever they've determined

204
00:10:20,029 --> 00:10:25,910
what needs to be stored so interestingly

205
00:10:23,060 --> 00:10:27,619
solidity actually defaults to using

206
00:10:25,910 --> 00:10:30,890
storage which can cause a lot of

207
00:10:27,620 --> 00:10:32,870
performance problems and also lead to

208
00:10:30,890 --> 00:10:35,560
some weird behaviors that we'll see

209
00:10:32,870 --> 00:10:38,270
later but you have to explicitly declare

210
00:10:35,560 --> 00:10:42,649
otherwise if you actually want to make

211
00:10:38,270 --> 00:10:44,870
your code more efficient so it's also

212
00:10:42,649 --> 00:10:48,940
important to know some of the common

213
00:10:44,870 --> 00:10:48,940
pitfalls and vulnerabilities that have

214
00:10:48,970 --> 00:10:53,540
been encountered while writing stability

215
00:10:51,440 --> 00:10:55,880
so you still under active development so

216
00:10:53,540 --> 00:10:58,790
it it's easy to make some of these

217
00:10:55,880 --> 00:11:01,399
mistakes unfortunately so the first one

218
00:10:58,790 --> 00:11:04,959
is unhandled reentrant flow now

219
00:11:01,399 --> 00:11:07,430
unhandled reentrant flow control flow is

220
00:11:04,959 --> 00:11:08,630
it's an issue where one contract

221
00:11:07,430 --> 00:11:11,810
contract a

222
00:11:08,630 --> 00:11:16,610
calls into contract B which then calls

223
00:11:11,810 --> 00:11:18,589
back into contract a and undesirable

224
00:11:16,610 --> 00:11:22,060
state changes haven't actually been

225
00:11:18,590 --> 00:11:25,250
committed in contract a had leading to

226
00:11:22,060 --> 00:11:29,660
behaviors that were actually unexpected

227
00:11:25,250 --> 00:11:31,790
so the biggest example of this was a the

228
00:11:29,660 --> 00:11:34,490
Dow hack where tens of millions of

229
00:11:31,790 --> 00:11:36,500
dollars were lost and it actually led to

230
00:11:34,490 --> 00:11:39,410
a hard work of the network to try and

231
00:11:36,500 --> 00:11:42,860
recover some of those funds but the

232
00:11:39,410 --> 00:11:45,500
basic problem here is that prior to

233
00:11:42,860 --> 00:11:48,500
actually updating the account balances

234
00:11:45,500 --> 00:11:50,960
during withdrawal the contract allowed

235
00:11:48,500 --> 00:11:54,770
you to call into an attacker control

236
00:11:50,960 --> 00:11:57,500
contract so a contract a an attacker

237
00:11:54,770 --> 00:12:00,650
deployed a malicious contract then

238
00:11:57,500 --> 00:12:05,770
forced it then forced a withdrawal to

239
00:12:00,650 --> 00:12:09,380
take place so when the Dow contract

240
00:12:05,770 --> 00:12:11,390
called in to this attacker contract the

241
00:12:09,380 --> 00:12:13,280
attack are called right back into the

242
00:12:11,390 --> 00:12:16,550
same withdrawal function which

243
00:12:13,280 --> 00:12:19,790
repeatedly which allowed them to remove

244
00:12:16,550 --> 00:12:21,380
all the etherium from contract rather

245
00:12:19,790 --> 00:12:25,640
than just the etherium that was

246
00:12:21,380 --> 00:12:29,630
allocated to their account so another

247
00:12:25,640 --> 00:12:32,449
common issue is delegate calling into

248
00:12:29,630 --> 00:12:34,250
vulnerable libraries this was most

249
00:12:32,450 --> 00:12:36,470
favored this was most famously

250
00:12:34,250 --> 00:12:40,000
demonstrated in the parody hack which

251
00:12:36,470 --> 00:12:42,290
was another gigantic compromise and

252
00:12:40,000 --> 00:12:47,570
essentially what it allowed you to do

253
00:12:42,290 --> 00:12:49,550
was delegate call into a vulnerable

254
00:12:47,570 --> 00:12:52,850
library now delegate call basically

255
00:12:49,550 --> 00:12:54,620
transitions transparently transitions

256
00:12:52,850 --> 00:12:58,070
the execution environment from the

257
00:12:54,620 --> 00:13:00,650
contract you called into to a library

258
00:12:58,070 --> 00:13:04,370
contract as if it was the same contract

259
00:13:00,650 --> 00:13:06,980
that you were executed now what this

260
00:13:04,370 --> 00:13:09,830
allowed the attacker to do was actually

261
00:13:06,980 --> 00:13:12,380
remarkably call into an initialization

262
00:13:09,830 --> 00:13:14,870
function that was mistakenly included in

263
00:13:12,380 --> 00:13:16,670
the library this allowed them to set

264
00:13:14,870 --> 00:13:18,770
themselves as the sole owner of the

265
00:13:16,670 --> 00:13:21,680
contract even though they weren't an

266
00:13:18,770 --> 00:13:22,520
owner at all and then they were able to

267
00:13:21,680 --> 00:13:25,550
simply just

268
00:13:22,520 --> 00:13:26,960
through all of the funds even simpler

269
00:13:25,550 --> 00:13:30,140
than this problem however our

270
00:13:26,960 --> 00:13:33,710
unprotected critical functions so as I

271
00:13:30,140 --> 00:13:36,530
mentioned earlier all contract functions

272
00:13:33,710 --> 00:13:38,870
in solidity are by default public anyone

273
00:13:36,530 --> 00:13:40,970
can call them so if you forget to

274
00:13:38,870 --> 00:13:45,050
protect certain functions it can

275
00:13:40,970 --> 00:13:47,720
actually lead to compromise so it's very

276
00:13:45,050 --> 00:13:50,240
very common that people forget to mark

277
00:13:47,720 --> 00:13:52,310
something as only owner which means only

278
00:13:50,240 --> 00:13:54,040
the person that mark themselves is the

279
00:13:52,310 --> 00:13:58,760
owner of the contract can call into it

280
00:13:54,040 --> 00:14:02,420
so when that happens it can actually

281
00:13:58,760 --> 00:14:04,700
cause loss of funds or cause some

282
00:14:02,420 --> 00:14:06,469
someone to be able to steal funds the

283
00:14:04,700 --> 00:14:07,880
most famous case of this is the parody

284
00:14:06,470 --> 00:14:10,760
freeze which happened a little while

285
00:14:07,880 --> 00:14:13,250
after the original parody hack they

286
00:14:10,760 --> 00:14:14,930
fixed the delegate call issue but you

287
00:14:13,250 --> 00:14:18,500
could still call directly into the

288
00:14:14,930 --> 00:14:21,020
library which was not initialized so it

289
00:14:18,500 --> 00:14:22,700
didn't actually have an owner and you

290
00:14:21,020 --> 00:14:24,740
could set yourself as an owner of the

291
00:14:22,700 --> 00:14:27,230
contract and then terminate the library

292
00:14:24,740 --> 00:14:30,050
what this meant is that all contracts

293
00:14:27,230 --> 00:14:32,240
that were calling into this that into

294
00:14:30,050 --> 00:14:35,680
this library contract would then fail

295
00:14:32,240 --> 00:14:38,540
and you couldn't move any funds out

296
00:14:35,680 --> 00:14:40,670
today there's still no way to move that

297
00:14:38,540 --> 00:14:43,780
out there's been discussion about it but

298
00:14:40,670 --> 00:14:46,339
it probably will not happen and the

299
00:14:43,780 --> 00:14:48,589
final one that's relevant today is

300
00:14:46,340 --> 00:14:51,140
improper handling of secrets so

301
00:14:48,590 --> 00:14:52,850
obviously on a public blockchain keeping

302
00:14:51,140 --> 00:14:56,120
secrets is very difficult

303
00:14:52,850 --> 00:14:58,100
so there's a lot one of the more popular

304
00:14:56,120 --> 00:15:02,260
contracts out there are gambling

305
00:14:58,100 --> 00:15:05,600
applications so playing roulette or

306
00:15:02,260 --> 00:15:07,880
poker or any number of different things

307
00:15:05,600 --> 00:15:10,910
where you need some trusted source of

308
00:15:07,880 --> 00:15:12,590
randomness well if you can predict what

309
00:15:10,910 --> 00:15:15,949
those secrets are then you can cheat at

310
00:15:12,590 --> 00:15:18,380
the game so people still have a lot of

311
00:15:15,950 --> 00:15:23,060
trouble doing this and it's it's not a

312
00:15:18,380 --> 00:15:24,260
particularly easy problem so there's a

313
00:15:23,060 --> 00:15:27,170
lot of tools that are being developed

314
00:15:24,260 --> 00:15:29,930
for aetherium the main one that we're

315
00:15:27,170 --> 00:15:32,479
going to look at today is ether scan now

316
00:15:29,930 --> 00:15:35,479
ether scan is what's known as a block

317
00:15:32,480 --> 00:15:36,620
Explorer so it allows you to inspect the

318
00:15:35,480 --> 00:15:38,570
blocks and Tran

319
00:15:36,620 --> 00:15:43,340
actions that are being confirmed to the

320
00:15:38,570 --> 00:15:44,990
network so if you're interested in you

321
00:15:43,340 --> 00:15:46,610
know what's happening on the network and

322
00:15:44,990 --> 00:15:48,320
you want some way to view the

323
00:15:46,610 --> 00:15:53,110
transactions in an easy to read manner

324
00:15:48,320 --> 00:15:56,330
you'd probably be using either scan now

325
00:15:53,110 --> 00:15:57,770
unfortunately it doesn't display all the

326
00:15:56,330 --> 00:15:59,270
information that might be relevant and

327
00:15:57,770 --> 00:16:01,189
sometimes displays things in a

328
00:15:59,270 --> 00:16:03,949
misleading way which we'll get into in a

329
00:16:01,190 --> 00:16:06,110
bit these are a bunch of other really

330
00:16:03,950 --> 00:16:07,880
interesting tools and I definitely

331
00:16:06,110 --> 00:16:12,610
recommend checking them out but they're

332
00:16:07,880 --> 00:16:17,689
not too relevant for for the talk today

333
00:16:12,610 --> 00:16:21,350
so this is what ether scan looks like so

334
00:16:17,690 --> 00:16:24,020
as I said it indexes blocks and displays

335
00:16:21,350 --> 00:16:25,730
them it allows you to search for things

336
00:16:24,020 --> 00:16:27,740
it allows you to view things and

337
00:16:25,730 --> 00:16:29,630
actually they have a beta feature for

338
00:16:27,740 --> 00:16:33,760
actually directly interacting with

339
00:16:29,630 --> 00:16:36,020
contracts so calling functions etc so

340
00:16:33,760 --> 00:16:38,380
one of the other features that they have

341
00:16:36,020 --> 00:16:40,990
and this is relevant to a lot of the

342
00:16:38,380 --> 00:16:43,550
honey pots we're gonna look at today is

343
00:16:40,990 --> 00:16:47,570
they're verified code feature

344
00:16:43,550 --> 00:16:50,719
now what ether scan lets you do is

345
00:16:47,570 --> 00:16:54,230
actually upload the source code to a

346
00:16:50,720 --> 00:16:59,600
given contract and it will compile it

347
00:16:54,230 --> 00:17:03,710
using the sol c compiler which is what

348
00:16:59,600 --> 00:17:07,040
you used compile solidity contracts and

349
00:17:03,710 --> 00:17:10,910
it will verify that the bytecode exactly

350
00:17:07,040 --> 00:17:13,760
matches the source code the result of

351
00:17:10,910 --> 00:17:18,410
compiling the source code that you

352
00:17:13,760 --> 00:17:20,810
uploaded so so whenever you upload

353
00:17:18,410 --> 00:17:23,990
something that is valid it gives it a

354
00:17:20,810 --> 00:17:26,510
nice clean green checkmark and it's

355
00:17:23,990 --> 00:17:29,960
presumed that this is the exact source

356
00:17:26,510 --> 00:17:36,379
code that led to the creation of this

357
00:17:29,960 --> 00:17:39,950
contract so with that intro sort of out

358
00:17:36,380 --> 00:17:43,310
of the way let's get into smart

359
00:17:39,950 --> 00:17:46,130
contracts so why are these even a thing

360
00:17:43,310 --> 00:17:48,560
well you know a lot of people think a

361
00:17:46,130 --> 00:17:50,030
lot of attackers like to think that you

362
00:17:48,560 --> 00:17:53,030
know a revocable

363
00:17:50,030 --> 00:17:55,280
transfers plus bad code more or less

364
00:17:53,030 --> 00:17:57,470
equals free money so there's a lot of

365
00:17:55,280 --> 00:18:02,690
people looking to find the next parity

366
00:17:57,470 --> 00:18:06,140
bug the next da hack and they want these

367
00:18:02,690 --> 00:18:10,100
tens of billions of dollars so a lot of

368
00:18:06,140 --> 00:18:13,310
these people are pretty new to to the

369
00:18:10,100 --> 00:18:16,250
ecosystem however and are still learning

370
00:18:13,310 --> 00:18:19,520
some of the ins and outs in addition

371
00:18:16,250 --> 00:18:22,550
because a lot of the tooling is very is

372
00:18:19,520 --> 00:18:24,379
still in early stages it can present

373
00:18:22,550 --> 00:18:27,280
misleading information to these people

374
00:18:24,380 --> 00:18:31,490
trying to exploit these things well some

375
00:18:27,280 --> 00:18:33,260
enterprising hackers decided I could

376
00:18:31,490 --> 00:18:35,150
take advantage of this and deploy things

377
00:18:33,260 --> 00:18:38,210
that look vulnerable but are actually

378
00:18:35,150 --> 00:18:40,670
exploitative so there are contracts that

379
00:18:38,210 --> 00:18:42,980
require people to send money into them

380
00:18:40,670 --> 00:18:45,050
to try and exploit a bug but they

381
00:18:42,980 --> 00:18:49,700
actually can't exploit that bug and they

382
00:18:45,050 --> 00:18:53,120
lose their money so I first got

383
00:18:49,700 --> 00:18:55,040
interested in these when I was running a

384
00:18:53,120 --> 00:18:58,040
challenge at hack in the box Amsterdam

385
00:18:55,040 --> 00:18:59,840
so I it's very similar to the challenge

386
00:18:58,040 --> 00:19:02,710
that were running today it deployed a

387
00:18:59,840 --> 00:19:06,770
vulnerable crack for this challenge and

388
00:19:02,710 --> 00:19:08,600
it was called the hot ol wallet so the

389
00:19:06,770 --> 00:19:11,240
bug was a very classic reentrant Z

390
00:19:08,600 --> 00:19:14,990
attack similar to the Dow the Dow hack

391
00:19:11,240 --> 00:19:17,510
the difference is is that the balance

392
00:19:14,990 --> 00:19:19,670
the the account balance was actually

393
00:19:17,510 --> 00:19:21,590
updated prior to calling into the other

394
00:19:19,670 --> 00:19:25,550
contract so you couldn't actually

395
00:19:21,590 --> 00:19:28,370
withdraw all the ether from the contract

396
00:19:25,550 --> 00:19:30,889
but you could bypass the limits I had

397
00:19:28,370 --> 00:19:34,300
set on withdrawals from that account so

398
00:19:30,890 --> 00:19:37,370
rather than only being able to withdraw

399
00:19:34,300 --> 00:19:40,370
$1 worth of aetherium you could withdraw

400
00:19:37,370 --> 00:19:42,469
about $40 worth of aetherium and once

401
00:19:40,370 --> 00:19:46,120
you did that we gave a bonus to people

402
00:19:42,470 --> 00:19:49,760
who were able to do it first so

403
00:19:46,120 --> 00:19:51,830
interestingly less than an hour before I

404
00:19:49,760 --> 00:19:53,510
deployed this and uploaded the source

405
00:19:51,830 --> 00:19:56,960
code to eat their scan for people of

406
00:19:53,510 --> 00:19:58,760
view someone tried to deposit funds into

407
00:19:56,960 --> 00:20:01,880
the account and actually started trying

408
00:19:58,760 --> 00:20:03,520
to exploit the bug this was very

409
00:20:01,880 --> 00:20:06,220
interesting because the

410
00:20:03,520 --> 00:20:08,710
tract was very explicitly designed to

411
00:20:06,220 --> 00:20:10,930
not allow you to interact with it and

412
00:20:08,710 --> 00:20:13,300
actually exploit the bug unless you were

413
00:20:10,930 --> 00:20:15,280
in a whitelist that I had provided so

414
00:20:13,300 --> 00:20:18,700
the attacker had no chance of actually

415
00:20:15,280 --> 00:20:21,370
exploiting this but actually got his

416
00:20:18,700 --> 00:20:25,930
funds stuck in the contract because he

417
00:20:21,370 --> 00:20:28,570
was unable to actually exploit him now I

418
00:20:25,930 --> 00:20:31,330
hadn't set any minimum deposits on this

419
00:20:28,570 --> 00:20:34,510
contract but if I had it's possible that

420
00:20:31,330 --> 00:20:37,840
this person could have been could have

421
00:20:34,510 --> 00:20:40,180
lost a significant amount of money so I

422
00:20:37,840 --> 00:20:42,399
got interested if in whether or not

423
00:20:40,180 --> 00:20:43,840
these things were common and it actually

424
00:20:42,400 --> 00:20:46,330
turns out that there was a bit of an

425
00:20:43,840 --> 00:20:49,240
industry around this where people were

426
00:20:46,330 --> 00:20:54,460
coming up with new tricks to steal

427
00:20:49,240 --> 00:20:57,100
attackers money so my first example that

428
00:20:54,460 --> 00:21:02,020
wasn't so accidental is something called

429
00:20:57,100 --> 00:21:05,439
the private bank so in February Reddit

430
00:21:02,020 --> 00:21:08,530
user posted about a an interesting

431
00:21:05,440 --> 00:21:10,990
contract that he had found that he

432
00:21:08,530 --> 00:21:13,860
thought was vulnerable and being the

433
00:21:10,990 --> 00:21:16,870
kind Internet citizen that he is

434
00:21:13,860 --> 00:21:20,439
attempted to exploit the contract and

435
00:21:16,870 --> 00:21:24,010
said he was going to give it back if it

436
00:21:20,440 --> 00:21:27,040
worked so the contract the private bank

437
00:21:24,010 --> 00:21:29,470
was a very simple wallet contract it had

438
00:21:27,040 --> 00:21:32,040
a very obvious reentrant Eve owner

439
00:21:29,470 --> 00:21:34,720
ability almost seemingly taken from

440
00:21:32,040 --> 00:21:40,030
solidity worming documents telling you

441
00:21:34,720 --> 00:21:42,310
not to do this but basically it looked

442
00:21:40,030 --> 00:21:45,370
like you could you could call into your

443
00:21:42,310 --> 00:21:47,530
own contract and do it multiple times

444
00:21:45,370 --> 00:21:51,879
and withdraw the entire balance of the

445
00:21:47,530 --> 00:21:55,270
contract so to be careful the user

446
00:21:51,880 --> 00:21:58,330
actually tested their exploit on the

447
00:21:55,270 --> 00:22:01,450
test now the person who deployed this

448
00:21:58,330 --> 00:22:03,639
malicious honeypot had helpfully

449
00:22:01,450 --> 00:22:06,250
uploaded the source code to either scan

450
00:22:03,640 --> 00:22:11,310
so that people could see the bug more

451
00:22:06,250 --> 00:22:13,570
easily and when this user went to go

452
00:22:11,310 --> 00:22:15,159
attempt to exploit it on the test net

453
00:22:13,570 --> 00:22:17,260
from the source code that was provided

454
00:22:15,160 --> 00:22:19,800
his exploit succeeded how

455
00:22:17,260 --> 00:22:23,560
ever whenever he went to deploy it I

456
00:22:19,800 --> 00:22:27,970
went to execute this exploit on the main

457
00:22:23,560 --> 00:22:30,550
net it failed mysteriously so it was

458
00:22:27,970 --> 00:22:33,460
very confusing why why this would ever

459
00:22:30,550 --> 00:22:36,159
happen so what's the problem here

460
00:22:33,460 --> 00:22:42,640
and the problem is internal transactions

461
00:22:36,160 --> 00:22:45,820
so in this contract as a withdrawal is

462
00:22:42,640 --> 00:22:49,900
being made it actually calls into a log

463
00:22:45,820 --> 00:22:51,760
function called transfer log and they

464
00:22:49,900 --> 00:22:55,720
helpfully provided the source code to

465
00:22:51,760 --> 00:22:58,570
the log contract and upon inspection

466
00:22:55,720 --> 00:23:01,810
everything looks fine it looks perfectly

467
00:22:58,570 --> 00:23:03,669
safe to execute this and there's no

468
00:23:01,810 --> 00:23:10,000
reason it would cause a transaction to

469
00:23:03,670 --> 00:23:12,190
fail however it in actuality this

470
00:23:10,000 --> 00:23:13,750
function was the key to preventing

471
00:23:12,190 --> 00:23:16,840
people from actually exploiting the

472
00:23:13,750 --> 00:23:18,310
contract so because how it and this is

473
00:23:16,840 --> 00:23:20,169
because of how ether scan actually

474
00:23:18,310 --> 00:23:20,740
verifies the contract source that you

475
00:23:20,170 --> 00:23:23,560
provide

476
00:23:20,740 --> 00:23:25,660
so rather than compiling every single

477
00:23:23,560 --> 00:23:29,710
contract that is provided in a source

478
00:23:25,660 --> 00:23:32,320
file because only one it it actually

479
00:23:29,710 --> 00:23:34,480
only compiles one contract that you

480
00:23:32,320 --> 00:23:37,090
specify and any calls into external

481
00:23:34,480 --> 00:23:40,810
contracts just make sure that the

482
00:23:37,090 --> 00:23:43,929
function signature matches so when you

483
00:23:40,810 --> 00:23:47,379
went or the method ID match matches

484
00:23:43,930 --> 00:23:51,040
rather so when you compile this source

485
00:23:47,380 --> 00:23:53,980
code it doesn't actually compile the log

486
00:23:51,040 --> 00:23:59,020
contract what it does is make sure that

487
00:23:53,980 --> 00:24:01,810
the ABI is correct so when the attacker

488
00:23:59,020 --> 00:24:04,600
actually went to deploy this contract

489
00:24:01,810 --> 00:24:06,520
they deployed a closed source contract

490
00:24:04,600 --> 00:24:08,409
which was entirely different from the

491
00:24:06,520 --> 00:24:12,879
source code that they provided to either

492
00:24:08,410 --> 00:24:15,010
scan this that log contract would

493
00:24:12,880 --> 00:24:16,540
actually revert anyone's transaction

494
00:24:15,010 --> 00:24:20,080
unless it was theirs

495
00:24:16,540 --> 00:24:23,500
so you could verify this by looking at

496
00:24:20,080 --> 00:24:26,530
the actual transfer log address and you

497
00:24:23,500 --> 00:24:29,350
cannot verify it with the provided

498
00:24:26,530 --> 00:24:30,840
source in fact it looks like a lot of a

499
00:24:29,350 --> 00:24:34,830
lot of code

500
00:24:30,840 --> 00:24:36,330
so this also means interesting like that

501
00:24:34,830 --> 00:24:37,919
even if you've tested it given the

502
00:24:36,330 --> 00:24:43,379
source code provided you think your

503
00:24:37,920 --> 00:24:47,490
exploit works but it doesn't actually so

504
00:24:43,380 --> 00:24:49,560
that's a more technical attempt to steal

505
00:24:47,490 --> 00:24:51,090
people's money but there's a lot of

506
00:24:49,560 --> 00:24:54,179
simpler approaches that people have

507
00:24:51,090 --> 00:24:56,520
taken so another one that took advantage

508
00:24:54,180 --> 00:25:01,350
of some errors in displaying and ether

509
00:24:56,520 --> 00:25:04,320
scan was whale giveaway now in this one

510
00:25:01,350 --> 00:25:06,030
they deployed a contract and upload to

511
00:25:04,320 --> 00:25:08,820
the source code again to ether scan with

512
00:25:06,030 --> 00:25:12,540
validated perfectly when you looked at

513
00:25:08,820 --> 00:25:15,840
it it looked like you as long as you

514
00:25:12,540 --> 00:25:17,670
sent one ether into it it would transfer

515
00:25:15,840 --> 00:25:21,270
the entire balance of the contract back

516
00:25:17,670 --> 00:25:24,090
to you in action woody however hidden

517
00:25:21,270 --> 00:25:26,129
off thousands of spaces to the side was

518
00:25:24,090 --> 00:25:30,020
a check that only allowed that function

519
00:25:26,130 --> 00:25:33,300
to be called by the owner so basically

520
00:25:30,020 --> 00:25:35,639
it would send the entire balance of the

521
00:25:33,300 --> 00:25:40,980
contract to the person who deployed it

522
00:25:35,640 --> 00:25:43,410
rather than sending it to you so an even

523
00:25:40,980 --> 00:25:49,710
simpler one which I kind of think was

524
00:25:43,410 --> 00:25:52,050
brilliant in its approach was that a

525
00:25:49,710 --> 00:25:54,060
user started going around into various

526
00:25:52,050 --> 00:25:56,190
chat rooms asking for help and when he

527
00:25:54,060 --> 00:25:59,310
asked for help he would post a private

528
00:25:56,190 --> 00:26:03,270
key instead of a public key what was in

529
00:25:59,310 --> 00:26:06,470
the account were some coins for

530
00:26:03,270 --> 00:26:12,750
lack of a better word the materia Moyne

531
00:26:06,470 --> 00:26:15,450
is a random IRC 20 token and it appeared

532
00:26:12,750 --> 00:26:18,480
to have at the time thousands of dollars

533
00:26:15,450 --> 00:26:20,550
of this token in this account so in

534
00:26:18,480 --> 00:26:23,210
theory someone could take that private

535
00:26:20,550 --> 00:26:27,030
key and then transfer those out and

536
00:26:23,210 --> 00:26:29,970
they'd have free money what the account

537
00:26:27,030 --> 00:26:31,710
didn't have though was ether now if you

538
00:26:29,970 --> 00:26:34,440
remember you have to actually pay for

539
00:26:31,710 --> 00:26:37,290
transactions on the network so to send

540
00:26:34,440 --> 00:26:39,300
those tokens out from that account you

541
00:26:37,290 --> 00:26:44,299
actually had to deposit aetherium

542
00:26:39,300 --> 00:26:48,080
into it so the

543
00:26:44,299 --> 00:26:51,029
it wasn't actually that easy however

544
00:26:48,080 --> 00:26:53,699
what these what these attackers didn't

545
00:26:51,029 --> 00:26:55,289
know was that there was a script that

546
00:26:53,700 --> 00:26:58,159
was watching all the transactions to

547
00:26:55,289 --> 00:27:01,769
this account and immediately after the

548
00:26:58,159 --> 00:27:05,720
trend the fund transfer was confirmed

549
00:27:01,769 --> 00:27:08,519
they just take the money out in addition

550
00:27:05,720 --> 00:27:12,029
they particular token that they had

551
00:27:08,519 --> 00:27:14,159
chosen has a quirk in its ERC 20

552
00:27:12,029 --> 00:27:18,990
contract now all the tokens on the

553
00:27:14,159 --> 00:27:22,340
etherium network generally follow ERC 20

554
00:27:18,990 --> 00:27:24,029
which is a standard contract ABI for

555
00:27:22,340 --> 00:27:26,340
interacting with these things

556
00:27:24,029 --> 00:27:29,190
with with these tokens one of the

557
00:27:26,340 --> 00:27:31,918
functions that that they have is called

558
00:27:29,190 --> 00:27:35,190
balance of so that's supposed to tell

559
00:27:31,919 --> 00:27:39,960
you how many tokens this particular

560
00:27:35,190 --> 00:27:41,970
address owns now this this contract also

561
00:27:39,960 --> 00:27:45,419
had an additional field called the

562
00:27:41,970 --> 00:27:47,760
available balance of so what this ERC 20

563
00:27:45,419 --> 00:27:49,590
token allows you to do was actually lock

564
00:27:47,760 --> 00:27:52,980
tokens so that you couldn't transfer

565
00:27:49,590 --> 00:27:54,928
them so while it looked like there were

566
00:27:52,980 --> 00:27:56,730
thousands of dollars of tokens that were

567
00:27:54,929 --> 00:28:00,149
actually transferable they actually

568
00:27:56,730 --> 00:28:01,950
weren't so people kept trying to send

569
00:28:00,149 --> 00:28:03,899
money into this account and steal the

570
00:28:01,950 --> 00:28:10,350
tokens and it wasn't even possible to

571
00:28:03,899 --> 00:28:11,639
take them in the first place so this one

572
00:28:10,350 --> 00:28:14,039
is actually probably the most

573
00:28:11,639 --> 00:28:15,840
technically interesting to me but it was

574
00:28:14,039 --> 00:28:19,919
a game called crypto roulette

575
00:28:15,840 --> 00:28:22,289
so crypto roulette is a simple gambling

576
00:28:19,919 --> 00:28:24,360
car smart contract so if you guess

577
00:28:22,289 --> 00:28:29,100
enough the right number you win some

578
00:28:24,360 --> 00:28:31,769
atheria so this contract had a pretty

579
00:28:29,100 --> 00:28:34,529
obviously bad secret generation method

580
00:28:31,769 --> 00:28:37,409
but even worse it was storing the secret

581
00:28:34,529 --> 00:28:41,250
in a quote-unquote private variable now

582
00:28:37,409 --> 00:28:44,279
in solidity when variables are private

583
00:28:41,250 --> 00:28:45,600
that doesn't mean that nobody can read

584
00:28:44,279 --> 00:28:50,880
them it just means that it isn't

585
00:28:45,600 --> 00:28:52,830
actually easily exposed to the user so

586
00:28:50,880 --> 00:28:55,019
you could directly because you can

587
00:28:52,830 --> 00:28:57,530
directly read storage locations you can

588
00:28:55,019 --> 00:28:59,660
directly read these

589
00:28:57,530 --> 00:29:01,690
these private variables off-the-chain

590
00:28:59,660 --> 00:29:05,090
it's a common mistake that people make

591
00:29:01,690 --> 00:29:07,280
but it makes it very easy to compromise

592
00:29:05,090 --> 00:29:11,480
gambling apps because the secret is

593
00:29:07,280 --> 00:29:14,899
obvious to anyone who has access to the

594
00:29:11,480 --> 00:29:16,340
etherion network so you guessed the

595
00:29:14,900 --> 00:29:20,180
number that's stored on the chain and

596
00:29:16,340 --> 00:29:24,919
you get some free thright well not quite

597
00:29:20,180 --> 00:29:29,810
so the play function requires that you

598
00:29:24,920 --> 00:29:36,470
send a small amount of if the rmn the

599
00:29:29,810 --> 00:29:38,659
minimum bet and if you're successful it

600
00:29:36,470 --> 00:29:42,620
sends you the entire balance of the

601
00:29:38,660 --> 00:29:44,720
contract well it it may not be obvious

602
00:29:42,620 --> 00:29:47,929
from the source here and that's

603
00:29:44,720 --> 00:29:49,730
intentional but the number is actually

604
00:29:47,930 --> 00:29:55,520
not what you're reading off of the

605
00:29:49,730 --> 00:29:58,100
contract so in this case the attacker

606
00:29:55,520 --> 00:30:03,560
had actually declared an uninitialized

607
00:29:58,100 --> 00:30:06,020
pointer to a game structure now looking

608
00:30:03,560 --> 00:30:08,270
at it you would think that this person

609
00:30:06,020 --> 00:30:10,550
is just allocating a new quote game

610
00:30:08,270 --> 00:30:14,960
structure initializing it with the

611
00:30:10,550 --> 00:30:16,389
values that they want and store storing

612
00:30:14,960 --> 00:30:18,620
the result

613
00:30:16,390 --> 00:30:22,790
unfortunately what it's actually doing

614
00:30:18,620 --> 00:30:26,209
is writing to the zeroeth storage slot

615
00:30:22,790 --> 00:30:27,530
so because it's uninitialized its value

616
00:30:26,210 --> 00:30:31,910
is actually pointing to the first

617
00:30:27,530 --> 00:30:34,850
storage slot in storage so whenever the

618
00:30:31,910 --> 00:30:37,940
user goes to call this function message

619
00:30:34,850 --> 00:30:41,629
sender gets written into player what

620
00:30:37,940 --> 00:30:43,640
that's actually writing to is the secret

621
00:30:41,630 --> 00:30:45,620
number quote-unquote on the chain

622
00:30:43,640 --> 00:30:48,620
because the number has to be less than

623
00:30:45,620 --> 00:30:53,870
16 and it's exceedingly unlikely that

624
00:30:48,620 --> 00:30:56,719
you're at public address is less than 16

625
00:30:53,870 --> 00:31:04,429
it's actually impossible to win this

626
00:30:56,720 --> 00:31:06,680
contest so buy it once once a few people

627
00:31:04,430 --> 00:31:08,840
transferred funds in and failed to

628
00:31:06,680 --> 00:31:11,980
exploit it the the attacker went and

629
00:31:08,840 --> 00:31:11,980
collected all the phones

630
00:31:12,420 --> 00:31:22,810
so the the multiplicator x3 contract was

631
00:31:18,460 --> 00:31:25,300
another pretty simple one I'm not sure

632
00:31:22,810 --> 00:31:30,480
if if this one is very obvious either

633
00:31:25,300 --> 00:31:34,360
but the issue is that message balance

634
00:31:30,480 --> 00:31:37,360
sorry message value has to be greater

635
00:31:34,360 --> 00:31:39,639
than or equal to this stop balance so

636
00:31:37,360 --> 00:31:42,399
what someone reading this thinks is that

637
00:31:39,640 --> 00:31:44,830
if they send in more money than what is

638
00:31:42,400 --> 00:31:46,840
already in the contract they're actually

639
00:31:44,830 --> 00:31:49,419
going to be able to transfer out the

640
00:31:46,840 --> 00:31:51,310
entirety of the balances well the

641
00:31:49,420 --> 00:31:52,480
problem with this is that that is an

642
00:31:51,310 --> 00:31:54,879
impossible condition

643
00:31:52,480 --> 00:31:57,910
whenever you transfer funds into an

644
00:31:54,880 --> 00:32:01,240
account this stop balance is immediately

645
00:31:57,910 --> 00:32:03,310
updated so whenever someone tries to

646
00:32:01,240 --> 00:32:05,290
send more money into this this stop

647
00:32:03,310 --> 00:32:09,580
balance is always going to be greater

648
00:32:05,290 --> 00:32:16,780
than message value causing them to lose

649
00:32:09,580 --> 00:32:19,210
all their funds so these are some of the

650
00:32:16,780 --> 00:32:23,230
more interesting ones there's a lot more

651
00:32:19,210 --> 00:32:26,260
out there it's it's pretty undeniable

652
00:32:23,230 --> 00:32:29,740
that it's interesting to watch these

653
00:32:26,260 --> 00:32:33,360
attackers attack people who are trying

654
00:32:29,740 --> 00:32:36,010
to scam and hack and steal money but

655
00:32:33,360 --> 00:32:38,879
they definitely demonstrate some serious

656
00:32:36,010 --> 00:32:41,260
issues with the common tools for viewing

657
00:32:38,880 --> 00:32:44,950
smart contracts interacting with smart

658
00:32:41,260 --> 00:32:47,770
contracts and validating that what a

659
00:32:44,950 --> 00:32:50,320
contract does is actually what it what

660
00:32:47,770 --> 00:32:51,850
you think it does so there's a lot more

661
00:32:50,320 --> 00:32:53,860
work that needs to be done to make

662
00:32:51,850 --> 00:32:57,129
solidity a little more intuitive and

663
00:32:53,860 --> 00:32:58,990
explicit as what it's actually going to

664
00:32:57,130 --> 00:33:02,370
be doing there's a lot more work that

665
00:32:58,990 --> 00:33:06,670
needs to be done on making viewers more

666
00:33:02,370 --> 00:33:10,479
of transactions and the blockchain in

667
00:33:06,670 --> 00:33:11,740
general to make it obvious what's

668
00:33:10,480 --> 00:33:14,380
actually occurring

669
00:33:11,740 --> 00:33:18,720
rather than sort of misleading people as

670
00:33:14,380 --> 00:33:22,240
to what a given contract actually does

671
00:33:18,720 --> 00:33:24,730
so hopefully if we can work on some of

672
00:33:22,240 --> 00:33:25,240
those things moving forward and some of

673
00:33:24,730 --> 00:33:26,800
these issues

674
00:33:25,240 --> 00:33:28,720
have already been addressed by ether

675
00:33:26,800 --> 00:33:31,720
skin unfortunately some of the issues

676
00:33:28,720 --> 00:33:35,350
with validating and verifying contracts

677
00:33:31,720 --> 00:33:39,220
haven't quite but its future work and

678
00:33:35,350 --> 00:33:44,620
hopefully we can make things better so

679
00:33:39,220 --> 00:33:54,760
that's all I have for right now do we

680
00:33:44,620 --> 00:33:56,989
have any questions okay well thank you

681
00:33:54,760 --> 00:34:01,789
very much great time

682
00:33:56,990 --> 00:34:01,789
[Applause]

