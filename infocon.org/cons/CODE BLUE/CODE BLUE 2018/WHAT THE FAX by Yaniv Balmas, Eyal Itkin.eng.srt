1
00:00:16,540 --> 00:00:23,780
hello everyone thank you for attending

2
00:00:20,600 --> 00:00:25,670
this talk it's a pleasure being in code

3
00:00:23,780 --> 00:00:28,610
blue and it's a pleasure being in Tokyo

4
00:00:25,670 --> 00:00:30,949
it's my first time in Japan and I'm here

5
00:00:28,610 --> 00:00:33,409
to talk to you today about a recent

6
00:00:30,949 --> 00:00:37,789
research project that we did we named it

7
00:00:33,409 --> 00:00:41,510
what the Fox so just before we begin a

8
00:00:37,789 --> 00:00:42,739
bit about ourselves so this is me my

9
00:00:41,510 --> 00:00:44,719
name is Genevieve Alma's

10
00:00:42,739 --> 00:00:48,288
and I'm a security researcher I work for

11
00:00:44,719 --> 00:00:51,370
a checkpoint and my colleague in this

12
00:00:48,289 --> 00:00:53,559
research project is a young 18 also

13
00:00:51,370 --> 00:00:55,998
security researcher checkpoint which

14
00:00:53,559 --> 00:00:59,649
unfortunately could not be here with us

15
00:00:55,999 --> 00:01:04,220
today but he is with with us in spirit

16
00:00:59,649 --> 00:01:08,869
so before we begin just a bit about the

17
00:01:04,220 --> 00:01:11,450
history of fax so it all began in 1846

18
00:01:08,869 --> 00:01:14,000
when a scientist named Alexander they

19
00:01:11,450 --> 00:01:15,799
invented the first ever something that

20
00:01:14,000 --> 00:01:19,460
looks like oxygen sent the first image

21
00:01:15,799 --> 00:01:22,039
of a wire this happened in 1846 just

22
00:01:19,460 --> 00:01:24,020
roughly 20 years before the invention of

23
00:01:22,039 --> 00:01:26,149
the light bulb right and then it

24
00:01:24,020 --> 00:01:27,740
continued in 1860 the first thing that

25
00:01:26,149 --> 00:01:30,439
looks like a fax machine came to be

26
00:01:27,740 --> 00:01:33,259
again 20 years before the invention of

27
00:01:30,439 --> 00:01:36,500
the telephone and then there were more

28
00:01:33,259 --> 00:01:39,109
developments like radio fax and then in

29
00:01:36,500 --> 00:01:41,719
1966 a very small company that nobody

30
00:01:39,109 --> 00:01:44,179
heard of called Xerox they invented the

31
00:01:41,719 --> 00:01:47,658
they came out with the first commercial

32
00:01:44,179 --> 00:01:51,590
fax machine it looked like this and then

33
00:01:47,659 --> 00:01:55,759
in 1980 a group called ITU defined the

34
00:01:51,590 --> 00:01:57,770
current standards for fax namely T 30 T

35
00:01:55,759 --> 00:02:02,240
4 and T 6

36
00:01:57,770 --> 00:02:05,240
so apparently fax had a very big part in

37
00:02:02,240 --> 00:02:07,219
the technological history and its really

38
00:02:05,240 --> 00:02:08,780
changed the way that we send and receive

39
00:02:07,219 --> 00:02:11,660
electronic documents for one to the

40
00:02:08,780 --> 00:02:14,360
other but that was all in the past I

41
00:02:11,660 --> 00:02:14,959
mean today we have far better ways to

42
00:02:14,360 --> 00:02:16,430
send

43
00:02:14,959 --> 00:02:20,689
20 their documents from one to the other

44
00:02:16,430 --> 00:02:23,239
right so let's just try and compare

45
00:02:20,689 --> 00:02:26,480
facts to one of the you know more common

46
00:02:23,239 --> 00:02:29,569
techniques let's say email for example

47
00:02:26,480 --> 00:02:34,189
so just to remind you we are comparing

48
00:02:29,569 --> 00:02:36,679
this to this right so in terms of

49
00:02:34,189 --> 00:02:39,019
quality I really have nothing to add you

50
00:02:36,680 --> 00:02:41,269
know you just saw the pictures in terms

51
00:02:39,019 --> 00:02:43,549
of accessibility what I'm pretty sure

52
00:02:41,269 --> 00:02:47,120
that most of you if not all of you have

53
00:02:43,549 --> 00:02:48,709
24 by 7 access to emails not so sure you

54
00:02:47,120 --> 00:02:51,739
are carrying around your fax machines

55
00:02:48,709 --> 00:02:53,599
with you in terms of reliability well

56
00:02:51,739 --> 00:02:56,750
when you send an email you know that it

57
00:02:53,599 --> 00:02:58,790
gets received or not received but when

58
00:02:56,750 --> 00:03:01,040
you're sending a fax you have absolutely

59
00:02:58,790 --> 00:03:03,469
no verification yes there is this page

60
00:03:01,040 --> 00:03:05,989
saying received ok but if there was no

61
00:03:03,469 --> 00:03:08,209
paper in the printer for example you

62
00:03:05,989 --> 00:03:10,639
still get the same receive so absolutely

63
00:03:08,209 --> 00:03:13,159
no reliability in fax and regarding

64
00:03:10,639 --> 00:03:16,430
authenticity well we can argue whether

65
00:03:13,159 --> 00:03:19,069
or not email is authenticated but there

66
00:03:16,430 --> 00:03:20,930
are solutions like public Creek public

67
00:03:19,069 --> 00:03:23,328
key cryptography and stuff like that

68
00:03:20,930 --> 00:03:25,790
what we don't have is we have nothing

69
00:03:23,329 --> 00:03:29,060
for fax absolutely nothing right so

70
00:03:25,790 --> 00:03:33,069
looking at this table you might think ok

71
00:03:29,060 --> 00:03:37,459
so nobody should use fax anymore right

72
00:03:33,069 --> 00:03:41,599
wrong everybody uses fax it's used in

73
00:03:37,459 --> 00:03:43,329
naval to in ships in in the open seas to

74
00:03:41,599 --> 00:03:46,698
receive this kind of very critical

75
00:03:43,329 --> 00:03:49,099
topology maps in Japan fax is very

76
00:03:46,699 --> 00:03:52,459
popular almost everybody in Japan uses

77
00:03:49,099 --> 00:03:54,978
fax and if you just do some Google

78
00:03:52,459 --> 00:03:57,799
combos like you know contact us and fax

79
00:03:54,979 --> 00:04:00,799
you will find something like three three

80
00:03:57,799 --> 00:04:03,199
hundred and eighty million results on

81
00:04:00,799 --> 00:04:05,000
Google so these are they published fax

82
00:04:03,199 --> 00:04:06,560
numbers on Google think about how many

83
00:04:05,000 --> 00:04:09,590
fax numbers are not published

84
00:04:06,560 --> 00:04:11,120
it's simply huge right and and in

85
00:04:09,590 --> 00:04:13,849
thinking about that you know it's not

86
00:04:11,120 --> 00:04:16,099
only the numbers does know not only how

87
00:04:13,849 --> 00:04:19,159
many people are using fax but it's also

88
00:04:16,099 --> 00:04:21,320
who is using fax well if you're a small

89
00:04:19,159 --> 00:04:23,779
company a media company or a huge

90
00:04:21,320 --> 00:04:25,729
cooperate you use fax you have a fax

91
00:04:23,779 --> 00:04:27,650
number right I don't know if you receive

92
00:04:25,729 --> 00:04:29,250
anything over that fax number but you do

93
00:04:27,650 --> 00:04:31,560
have a fax number

94
00:04:29,250 --> 00:04:33,780
if you're a bank Bank of China it's the

95
00:04:31,560 --> 00:04:36,530
biggest bank in the world and this is

96
00:04:33,780 --> 00:04:38,900
the flex number we just Google it up and

97
00:04:36,530 --> 00:04:41,429
obviously if you're a government

98
00:04:38,900 --> 00:04:43,049
institution you really love facts you

99
00:04:41,430 --> 00:04:45,270
wake up in the morning and you want to

100
00:04:43,050 --> 00:04:46,620
have some facts so if you want to fax

101
00:04:45,270 --> 00:04:49,020
the Donald Trump and the white house

102
00:04:46,620 --> 00:04:51,630
this is the fax number again just google

103
00:04:49,020 --> 00:04:53,490
it so fax is out there and I think that

104
00:04:51,630 --> 00:04:55,620
the crazy thing is sometimes these

105
00:04:53,490 --> 00:04:57,980
government institutions they don't only

106
00:04:55,620 --> 00:05:00,540
allow you to send fax but it's actually

107
00:04:57,980 --> 00:05:02,460
mandatory to send fax there is no other

108
00:05:00,540 --> 00:05:06,330
way you cannot send an email it's other

109
00:05:02,460 --> 00:05:09,960
postal mail or fax this seemed like a

110
00:05:06,330 --> 00:05:12,930
crazy thing to us I mean we are in 2018

111
00:05:09,960 --> 00:05:16,500
how can it be that we still we are still

112
00:05:12,930 --> 00:05:18,360
so dependent on fax so in order to

113
00:05:16,500 --> 00:05:19,950
understand that a bit you need to

114
00:05:18,360 --> 00:05:23,070
understand how those facts looks like

115
00:05:19,950 --> 00:05:25,260
today you see 20 years ago fax was this

116
00:05:23,070 --> 00:05:28,580
standalone machines right it was only

117
00:05:25,260 --> 00:05:31,469
fax but today fax the same old

118
00:05:28,580 --> 00:05:34,500
technology is wrapped with newer

119
00:05:31,470 --> 00:05:37,800
technologies so for example we have you

120
00:05:34,500 --> 00:05:40,740
know services like email to fax fax to

121
00:05:37,800 --> 00:05:43,620
email stuff like that we have fax over

122
00:05:40,740 --> 00:05:45,930
radio we have fax over satellite and I

123
00:05:43,620 --> 00:05:48,780
think that most commonly we have this

124
00:05:45,930 --> 00:05:50,310
these things its all-in-one printers

125
00:05:48,780 --> 00:05:52,979
these things come shipped with a

126
00:05:50,310 --> 00:05:54,540
telephone cord that you can connect and

127
00:05:52,980 --> 00:05:57,450
they do fax they do a lot of other

128
00:05:54,540 --> 00:06:00,540
things but they also do fax it's default

129
00:05:57,450 --> 00:06:03,030
and our research in our research we

130
00:06:00,540 --> 00:06:05,730
decided to focus exactly on those

131
00:06:03,030 --> 00:06:08,159
all-in-one printers so if you look at

132
00:06:05,730 --> 00:06:10,740
these printers from a security point of

133
00:06:08,160 --> 00:06:13,140
view you can consider them to be black

134
00:06:10,740 --> 00:06:15,540
boxes right and on one side of these

135
00:06:13,140 --> 00:06:18,450
black boxes you have interfaces like you

136
00:06:15,540 --> 00:06:20,610
know Wi-Fi internet Bluetooth stuff like

137
00:06:18,450 --> 00:06:22,050
that those interfaces connects the

138
00:06:20,610 --> 00:06:24,120
printer basically to the internal

139
00:06:22,050 --> 00:06:27,030
network to the external network Oh to

140
00:06:24,120 --> 00:06:29,250
the world and on the other side of this

141
00:06:27,030 --> 00:06:32,789
printer there's this little interface

142
00:06:29,250 --> 00:06:34,830
which connects it to well somewhere in

143
00:06:32,790 --> 00:06:38,220
1970 I would say to the telephone line

144
00:06:34,830 --> 00:06:40,530
and so if you understand that at the end

145
00:06:38,220 --> 00:06:42,210
of the day those printers are really

146
00:06:40,530 --> 00:06:44,789
nothing but computers I mean

147
00:06:42,210 --> 00:06:47,039
they have CPUs they have memories they

148
00:06:44,789 --> 00:06:49,560
have an operating system so we talk to

149
00:06:47,039 --> 00:06:52,009
ourselves okay what will happen if an

150
00:06:49,560 --> 00:06:54,990
attacker sitting somewhere in the world

151
00:06:52,009 --> 00:06:57,449
with access to the telephone line and

152
00:06:54,990 --> 00:07:00,090
equipped with its targets fax number

153
00:06:57,449 --> 00:07:03,030
what will happen if he will be able to

154
00:07:00,090 --> 00:07:05,400
send a malicious fax that will enable

155
00:07:03,030 --> 00:07:07,799
him to exploit this printer and actually

156
00:07:05,400 --> 00:07:10,219
take control of the printer if he would

157
00:07:07,800 --> 00:07:12,780
be able to do that he could then give it

158
00:07:10,220 --> 00:07:16,410
through any one of the other interfaces

159
00:07:12,780 --> 00:07:18,960
let's say the internet and go into the

160
00:07:16,410 --> 00:07:21,180
internal network effectively creating a

161
00:07:18,960 --> 00:07:23,400
connection between the external world

162
00:07:21,180 --> 00:07:26,430
and the internal network through nothing

163
00:07:23,400 --> 00:07:28,888
but the telephone line it's 1980 again

164
00:07:26,430 --> 00:07:32,750
right so we thought that this is a

165
00:07:28,889 --> 00:07:36,210
really cool idea and challenge accepted

166
00:07:32,750 --> 00:07:38,880
and we decided to do it so after we got

167
00:07:36,210 --> 00:07:40,500
a bit excited about the listing we sat

168
00:07:38,880 --> 00:07:43,380
down and actually started thinking about

169
00:07:40,500 --> 00:07:45,330
the challenges ahead and it turns out

170
00:07:43,380 --> 00:07:48,240
that there are quite a few challenges

171
00:07:45,330 --> 00:07:52,349
and let me just name the major ones of

172
00:07:48,240 --> 00:07:53,820
them so for example okay how do we

173
00:07:52,349 --> 00:07:56,820
obtain the film work how do we obtain

174
00:07:53,820 --> 00:07:59,580
the code of this printer and then how do

175
00:07:56,820 --> 00:08:01,229
we analyze this framework and then what

176
00:07:59,580 --> 00:08:02,940
operating system is this thing running

177
00:08:01,229 --> 00:08:04,979
is it Windows is that Linux is it the

178
00:08:02,940 --> 00:08:07,169
real-time operating system I don't know

179
00:08:04,979 --> 00:08:09,479
and after we understand that how can we

180
00:08:07,169 --> 00:08:12,448
debug this thing debug it printer I

181
00:08:09,479 --> 00:08:13,530
never debug the printer and then after

182
00:08:12,449 --> 00:08:15,120
we understood all this we need to

183
00:08:13,530 --> 00:08:18,119
understand how those facts even work I

184
00:08:15,120 --> 00:08:19,949
don't know and after we did all that we

185
00:08:18,120 --> 00:08:21,960
can start discussing work and we find

186
00:08:19,949 --> 00:08:24,120
vulnerabilities inside this printer so

187
00:08:21,960 --> 00:08:25,560
these are a lot of questions and today

188
00:08:24,120 --> 00:08:27,599
during this talk I'm going to take you

189
00:08:25,560 --> 00:08:29,759
through all of these questions one by

190
00:08:27,599 --> 00:08:31,349
one hopefully you will understand

191
00:08:29,759 --> 00:08:33,120
everything by by the time that I'm

192
00:08:31,349 --> 00:08:35,760
finished so let's start with the first

193
00:08:33,120 --> 00:08:39,120
question how to obtain the framework of

194
00:08:35,760 --> 00:08:42,479
the printer so we had to choose the

195
00:08:39,120 --> 00:08:44,250
printer to work on and meet our printer

196
00:08:42,479 --> 00:08:47,640
this is the very poop printer that we

197
00:08:44,250 --> 00:08:50,070
abused for so long it's an HP printer

198
00:08:47,640 --> 00:08:52,560
it's an HP Officejet printer

199
00:08:50,070 --> 00:08:55,380
we chose HP not not because we dislike

200
00:08:52,560 --> 00:08:56,130
HP simply because HP has something like

201
00:08:55,380 --> 00:08:58,620
40

202
00:08:56,130 --> 00:09:00,449
of the market chief for for printers so

203
00:08:58,620 --> 00:09:03,180
they seemed like a very good target to

204
00:09:00,449 --> 00:09:04,680
us and this specific model well I can

205
00:09:03,180 --> 00:09:06,420
say a lot of tea a lot of things about

206
00:09:04,680 --> 00:09:10,319
why why we chose this model but

207
00:09:06,420 --> 00:09:13,050
basically it's the cheapest one so yes

208
00:09:10,319 --> 00:09:16,050
we bought this printer and now we need

209
00:09:13,050 --> 00:09:18,120
to break fax but before we break fax we

210
00:09:16,050 --> 00:09:20,639
need to break the printer and I mean

211
00:09:18,120 --> 00:09:22,589
literally break the printer so this was

212
00:09:20,639 --> 00:09:24,569
the fun part of the research so we took

213
00:09:22,589 --> 00:09:28,290
everything apart and it looks something

214
00:09:24,569 --> 00:09:29,490
like this basically this is the heart of

215
00:09:28,290 --> 00:09:31,170
the printer

216
00:09:29,490 --> 00:09:33,060
that's how it looks like from the inside

217
00:09:31,170 --> 00:09:36,000
so it has a lot of components on it

218
00:09:33,060 --> 00:09:39,449
let's try and look at them so this is a

219
00:09:36,000 --> 00:09:43,949
flash rom manufactured by expansion and

220
00:09:39,449 --> 00:09:46,349
this is an SRAM so if you look at it it

221
00:09:43,949 --> 00:09:49,258
might look like two little components on

222
00:09:46,350 --> 00:09:51,600
this PCB and that's right because it has

223
00:09:49,259 --> 00:09:54,870
another side and on the other side are

224
00:09:51,600 --> 00:09:58,079
the more interesting components stuff

225
00:09:54,870 --> 00:10:00,240
like USB Wi-Fi electricity SRAM this big

226
00:09:58,079 --> 00:10:02,849
battery that does something I don't know

227
00:10:00,240 --> 00:10:04,800
but most interestly most interesting

228
00:10:02,850 --> 00:10:07,350
there are two components here one of

229
00:10:04,800 --> 00:10:09,540
them is this and this is the main CPU

230
00:10:07,350 --> 00:10:12,000
it's a CPU manufactured by Marvel and

231
00:10:09,540 --> 00:10:14,550
it's manufactured probably for HP so you

232
00:10:12,000 --> 00:10:18,360
can get this online you can do nothing

233
00:10:14,550 --> 00:10:21,209
with it it's just it just for HP and

234
00:10:18,360 --> 00:10:23,939
then there is this this is the fax modem

235
00:10:21,209 --> 00:10:26,008
and what we need to do in our research

236
00:10:23,939 --> 00:10:28,680
is to understand these two components

237
00:10:26,009 --> 00:10:30,660
and the relationship between them if we

238
00:10:28,680 --> 00:10:33,599
can do that maybe we can do our work so

239
00:10:30,660 --> 00:10:36,269
as I said the first challenge was to

240
00:10:33,600 --> 00:10:39,720
obtain a few more and when we look a bit

241
00:10:36,269 --> 00:10:41,779
closer at this PCB we find some things

242
00:10:39,720 --> 00:10:44,189
that look very promising

243
00:10:41,779 --> 00:10:46,620
two interfaces one of them is called

244
00:10:44,189 --> 00:10:49,139
civil debug another called JTAG and it's

245
00:10:46,620 --> 00:10:50,399
clearly marked on the PCB so looking at

246
00:10:49,139 --> 00:10:52,529
this if you're not familiar with this

247
00:10:50,399 --> 00:10:54,209
interfaces so basically they are

248
00:10:52,529 --> 00:10:57,089
debugging interfaces they will let you

249
00:10:54,209 --> 00:10:59,430
read memory write memory so basically

250
00:10:57,089 --> 00:11:00,600
this is what we need in order to to get

251
00:10:59,430 --> 00:11:02,849
the code of this filmer

252
00:11:00,600 --> 00:11:04,860
so when we looked at this we say ah this

253
00:11:02,850 --> 00:11:07,589
is going to be too easy but

254
00:11:04,860 --> 00:11:09,540
unfortunately things don't go the way we

255
00:11:07,589 --> 00:11:11,699
want to every time

256
00:11:09,540 --> 00:11:14,969
is completely disabled we cannot use it

257
00:11:11,699 --> 00:11:17,490
and the serial port we were able to

258
00:11:14,970 --> 00:11:21,870
connect to it and we got this nice

259
00:11:17,490 --> 00:11:23,550
terminal which gives us this arrow for

260
00:11:21,870 --> 00:11:25,709
almost every instruction that we try to

261
00:11:23,550 --> 00:11:28,109
do ever I don't understand what we don't

262
00:11:25,709 --> 00:11:29,609
understand either but what we do

263
00:11:28,110 --> 00:11:32,040
understand is that the serial is not

264
00:11:29,610 --> 00:11:34,350
going to get us very far so we need to

265
00:11:32,040 --> 00:11:37,110
find some other way to get this film

266
00:11:34,350 --> 00:11:40,620
well luckily for us after looking a bit

267
00:11:37,110 --> 00:11:42,779
we find a very nice FTP site online so

268
00:11:40,620 --> 00:11:46,560
this is the FTP site apparently it's an

269
00:11:42,779 --> 00:11:49,259
HP FTP site which contains every female

270
00:11:46,560 --> 00:11:51,869
version for every HP product ever

271
00:11:49,259 --> 00:11:53,880
produced in the entire history it's a

272
00:11:51,870 --> 00:11:55,889
huge FTP site it actually took us

273
00:11:53,880 --> 00:11:59,209
something like two weeks to find our

274
00:11:55,889 --> 00:12:02,880
film work inside this mass of film was

275
00:11:59,209 --> 00:12:04,859
it was very funny but then we found the

276
00:12:02,880 --> 00:12:07,139
file and now that we have the ephemeral

277
00:12:04,860 --> 00:12:09,540
update file which is supposed to contain

278
00:12:07,139 --> 00:12:12,060
the code for the film well we now need

279
00:12:09,540 --> 00:12:14,040
to understand how do we upgrade the

280
00:12:12,060 --> 00:12:15,839
printer phew I never did it before

281
00:12:14,040 --> 00:12:17,760
and I have no idea how to do it with

282
00:12:15,839 --> 00:12:20,339
this file and so we need to understand

283
00:12:17,760 --> 00:12:22,740
the answer to this question is

284
00:12:20,339 --> 00:12:25,110
surprisingly funny how do you upgrade

285
00:12:22,740 --> 00:12:28,260
the printer film oh yeah you just print

286
00:12:25,110 --> 00:12:31,170
it of course it turns out that this

287
00:12:28,260 --> 00:12:34,410
printers has this listening port that

288
00:12:31,170 --> 00:12:37,649
receives print jobs this is defined by

289
00:12:34,410 --> 00:12:39,930
an HP document called PCL excel future

290
00:12:37,649 --> 00:12:42,959
reference protocol class 2.1 supplement

291
00:12:39,930 --> 00:12:44,969
that if you are still sane after reading

292
00:12:42,959 --> 00:12:48,180
all this thing you understand that the

293
00:12:44,970 --> 00:12:51,510
printer accepts a thermal upgrade just

294
00:12:48,180 --> 00:12:54,060
the same way as it receives a print job

295
00:12:51,510 --> 00:12:56,100
that's it and looking at our file it

296
00:12:54,060 --> 00:12:58,979
really correlates with that because you

297
00:12:56,100 --> 00:13:01,740
see it says pjl print job language this

298
00:12:58,980 --> 00:13:04,769
is exactly what what we expected to see

299
00:13:01,740 --> 00:13:08,069
so now that we understand this we need

300
00:13:04,769 --> 00:13:10,980
to somehow open this file so we can read

301
00:13:08,069 --> 00:13:13,560
it it's compressed somehow and after

302
00:13:10,980 --> 00:13:16,319
reading this PCL a document we kinda

303
00:13:13,560 --> 00:13:19,500
understand that this thing is composed

304
00:13:16,319 --> 00:13:21,779
of a lot of encoders so we need to

305
00:13:19,500 --> 00:13:23,100
decode them one by one I'm not going to

306
00:13:21,779 --> 00:13:24,990
go too

307
00:13:23,100 --> 00:13:27,360
of the decoder because you know it's

308
00:13:24,990 --> 00:13:30,360
basically it's quite boring but just to

309
00:13:27,360 --> 00:13:31,860
give you a the overview of it it

310
00:13:30,360 --> 00:13:35,190
contains stuff that's called null

311
00:13:31,860 --> 00:13:37,670
decoder 50 code Delta or decoder there

312
00:13:35,190 --> 00:13:41,970
are all decoders they do something like

313
00:13:37,670 --> 00:13:44,310
if the previous line was all spaces then

314
00:13:41,970 --> 00:13:46,530
if the next line is also all spaces just

315
00:13:44,310 --> 00:13:48,180
write one instead of the line it makes

316
00:13:46,530 --> 00:13:50,430
sense when you're talking about

317
00:13:48,180 --> 00:13:52,199
a print job you know when I print a

318
00:13:50,430 --> 00:13:54,599
print page but when you're talking about

319
00:13:52,200 --> 00:13:56,520
a film or a binary file it makes

320
00:13:54,600 --> 00:13:58,530
absolutely no sense but still this is

321
00:13:56,520 --> 00:14:00,870
what it uses and we left about this and

322
00:13:58,530 --> 00:14:02,790
said that you know when you're a hammer

323
00:14:00,870 --> 00:14:04,380
everything looks like a nail and we

324
00:14:02,790 --> 00:14:05,750
turns out that when your printer

325
00:14:04,380 --> 00:14:09,510
everything looks like a print job

326
00:14:05,750 --> 00:14:11,700
including the framework so okay we

327
00:14:09,510 --> 00:14:14,730
managed to decode everything and now we

328
00:14:11,700 --> 00:14:17,100
have something that looks like a valid

329
00:14:14,730 --> 00:14:20,160
file and now we need to understand how

330
00:14:17,100 --> 00:14:22,770
to analyze it so we start to look at

331
00:14:20,160 --> 00:14:24,569
this file and write in the beginning of

332
00:14:22,770 --> 00:14:27,689
this file we see something that looks

333
00:14:24,570 --> 00:14:30,540
like a table so with the we define it

334
00:14:27,690 --> 00:14:32,970
and we we understand that it really is a

335
00:14:30,540 --> 00:14:35,280
table and this is a table that actually

336
00:14:32,970 --> 00:14:37,590
defines sections you see it says

337
00:14:35,280 --> 00:14:40,350
something like loading address section

338
00:14:37,590 --> 00:14:41,910
name and location in binary so this is

339
00:14:40,350 --> 00:14:43,680
great because now we understand that

340
00:14:41,910 --> 00:14:46,589
this big file that we are looking at is

341
00:14:43,680 --> 00:14:49,140
just composed of smaller sections in it

342
00:14:46,590 --> 00:14:51,300
and this table actually defines each and

343
00:14:49,140 --> 00:14:53,550
every section so we can now break this

344
00:14:51,300 --> 00:14:55,620
into the respective sections and look at

345
00:14:53,550 --> 00:14:58,170
every section and that's exactly what we

346
00:14:55,620 --> 00:14:59,790
do and then we find one section that

347
00:14:58,170 --> 00:15:01,530
looks really interesting to us it's

348
00:14:59,790 --> 00:15:03,180
actually the biggest section and it

349
00:15:01,530 --> 00:15:04,770
really looks like what we're looking for

350
00:15:03,180 --> 00:15:06,810
we are looking for the code for the

351
00:15:04,770 --> 00:15:10,350
place for the printer and this is what

352
00:15:06,810 --> 00:15:12,390
we see take a look it says hello I don't

353
00:15:10,350 --> 00:15:14,640
understand right it's exactly the same

354
00:15:12,390 --> 00:15:17,040
thing that we saw on the serial so

355
00:15:14,640 --> 00:15:18,870
probably yes this is our code this is

356
00:15:17,040 --> 00:15:21,270
what we were looking for but if you look

357
00:15:18,870 --> 00:15:23,460
closely it's not exactly there well

358
00:15:21,270 --> 00:15:25,260
almost there because some characters are

359
00:15:23,460 --> 00:15:27,620
missing from this thing so it's not

360
00:15:25,260 --> 00:15:29,730
complete and those characters are

361
00:15:27,620 --> 00:15:32,700
consistently missing from the entire

362
00:15:29,730 --> 00:15:34,680
file so although we know that we are

363
00:15:32,700 --> 00:15:36,510
there until we know we will know what

364
00:15:34,680 --> 00:15:38,849
these bytes are we can't

365
00:15:36,510 --> 00:15:41,910
go on so we really need to understand

366
00:15:38,850 --> 00:15:44,940
what they are so the question is what is

367
00:15:41,910 --> 00:15:47,219
this why are those bite missing probably

368
00:15:44,940 --> 00:15:48,750
it's another compression algorithm well

369
00:15:47,220 --> 00:15:50,940
we have no idea why you need another

370
00:15:48,750 --> 00:15:52,980
compression it makes no sense but it's

371
00:15:50,940 --> 00:15:54,930
actually the least craziest option that

372
00:15:52,980 --> 00:15:57,660
it's it's another compression algorithm

373
00:15:54,930 --> 00:15:59,160
so we decide to go with this way also if

374
00:15:57,660 --> 00:16:01,110
we try to compress this thing with

375
00:15:59,160 --> 00:16:03,540
something like dilib one of the most

376
00:16:01,110 --> 00:16:05,910
standard compression algorithms we get

377
00:16:03,540 --> 00:16:08,099
80% better compression and we know that

378
00:16:05,910 --> 00:16:10,650
the printer has dilib in it because we

379
00:16:08,100 --> 00:16:12,980
can see the strings for the lip so why

380
00:16:10,650 --> 00:16:15,240
didn't they use the lip I don't know but

381
00:16:12,980 --> 00:16:17,220
the problem is still there and we need

382
00:16:15,240 --> 00:16:18,870
to and we need to handle it so now we

383
00:16:17,220 --> 00:16:21,390
need to understand those missing bytes

384
00:16:18,870 --> 00:16:24,150
in let me walk you through the the

385
00:16:21,390 --> 00:16:26,250
analysis process of this so this is one

386
00:16:24,150 --> 00:16:27,990
of the code snippets that I just showed

387
00:16:26,250 --> 00:16:30,150
you and let's try to decompress this

388
00:16:27,990 --> 00:16:32,610
thing together so if you look at this

389
00:16:30,150 --> 00:16:35,939
thing basically it's composed of two

390
00:16:32,610 --> 00:16:38,250
main categories one is ASCII characters

391
00:16:35,940 --> 00:16:40,500
stuff that we can read right and the

392
00:16:38,250 --> 00:16:43,890
other is non ASCII characters stuff that

393
00:16:40,500 --> 00:16:46,290
we can't read right and look at this

394
00:16:43,890 --> 00:16:48,180
it'll bite you and let's take out the

395
00:16:46,290 --> 00:16:50,579
ASCII characters and we are left only

396
00:16:48,180 --> 00:16:53,280
with the non ASCII characters now these

397
00:16:50,580 --> 00:16:55,500
are actually our missing bytes this is

398
00:16:53,280 --> 00:16:57,449
what we can't read this will was

399
00:16:55,500 --> 00:17:00,090
replaced with something else we need to

400
00:16:57,450 --> 00:17:02,910
understand what was it replaced with and

401
00:17:00,090 --> 00:17:05,459
now if you stare at this long enough you

402
00:17:02,910 --> 00:17:07,680
will start seeing a pattern let me make

403
00:17:05,459 --> 00:17:10,829
it a bit clearer to you you see it's

404
00:17:07,680 --> 00:17:14,610
composed of again two types of missing

405
00:17:10,829 --> 00:17:16,829
bytes one is one byte and two bytes and

406
00:17:14,609 --> 00:17:20,458
double bytes and the distance between

407
00:17:16,829 --> 00:17:22,260
the born bytes looks suspiciously

408
00:17:20,459 --> 00:17:25,199
pattern Asia with the eight bytes 9

409
00:17:22,260 --> 00:17:27,089
bytes 9 bytes 9 bytes 8 bytes and this

410
00:17:25,199 --> 00:17:28,380
starts looking like a pattern I mean and

411
00:17:27,089 --> 00:17:29,100
if you look at this from a different

412
00:17:28,380 --> 00:17:31,440
perspective

413
00:17:29,100 --> 00:17:34,919
maybe the pattern will start being a bit

414
00:17:31,440 --> 00:17:38,130
clearer you see the FF and the FF they

415
00:17:34,920 --> 00:17:40,110
look the same the f7 and the f7 they

416
00:17:38,130 --> 00:17:42,720
look the same but what does it mean and

417
00:17:40,110 --> 00:17:45,120
in order to understand this you need to

418
00:17:42,720 --> 00:17:48,210
sharpen your binary view a bit and if

419
00:17:45,120 --> 00:17:50,129
you understand it FF stands for 8 1 bits

420
00:17:48,210 --> 00:17:52,110
and if you do this consistently

421
00:17:50,130 --> 00:17:55,380
for everything then now you see your

422
00:17:52,110 --> 00:17:58,439
button you see the zero bit always falls

423
00:17:55,380 --> 00:18:00,660
within this to bite hole always and it's

424
00:17:58,440 --> 00:18:03,150
consistent throughout the entire page so

425
00:18:00,660 --> 00:18:05,940
the entire file so that's great because

426
00:18:03,150 --> 00:18:08,550
now we understand that the first bite is

427
00:18:05,940 --> 00:18:10,380
simply a bitmap it's defining the next

428
00:18:08,550 --> 00:18:11,940
eight bytes wherever there was a

429
00:18:10,380 --> 00:18:14,190
replacement there will be a zero of it

430
00:18:11,940 --> 00:18:16,440
that's it so great we understand what is

431
00:18:14,190 --> 00:18:18,060
this one byte but now we need to

432
00:18:16,440 --> 00:18:21,150
understand what are those two bytes

433
00:18:18,060 --> 00:18:23,280
that's a big question and if you know

434
00:18:21,150 --> 00:18:24,990
anything about compression then you know

435
00:18:23,280 --> 00:18:27,149
the Dozen there's not a lot of options

436
00:18:24,990 --> 00:18:30,420
it could either be something like a

437
00:18:27,150 --> 00:18:32,880
forward or backward pointer oh it could

438
00:18:30,420 --> 00:18:35,070
be a dictionary an index to a dictionary

439
00:18:32,880 --> 00:18:37,350
oh it could be something called a

440
00:18:35,070 --> 00:18:39,030
sliding window well we can pretty easily

441
00:18:37,350 --> 00:18:40,770
say that it's not a for the backward

442
00:18:39,030 --> 00:18:43,110
fighter and also we can say that it's

443
00:18:40,770 --> 00:18:44,910
not a dictionary simply because you know

444
00:18:43,110 --> 00:18:46,949
if we try to reference that we can't

445
00:18:44,910 --> 00:18:49,800
find what we are looking for so we're

446
00:18:46,950 --> 00:18:51,900
all these options out so it must be a

447
00:18:49,800 --> 00:18:54,240
sliding window and when we have this

448
00:18:51,900 --> 00:18:57,120
information we go to our favorite

449
00:18:54,240 --> 00:19:01,110
favorite place to Google to try to find

450
00:18:57,120 --> 00:19:03,560
something similar and we run in run into

451
00:19:01,110 --> 00:19:07,740
in some dark corner of the Internet this

452
00:19:03,560 --> 00:19:10,919
nice site explaining something called

453
00:19:07,740 --> 00:19:12,570
the soft disk library format it defines

454
00:19:10,920 --> 00:19:14,190
a lot of things but inside this there is

455
00:19:12,570 --> 00:19:17,070
a compression algorithm that looks

456
00:19:14,190 --> 00:19:19,650
similar to ours actually it looks really

457
00:19:17,070 --> 00:19:23,399
like ours actually it looks exactly like

458
00:19:19,650 --> 00:19:26,430
ours exactly and we found it very funny

459
00:19:23,400 --> 00:19:29,970
because this thing was invented around

460
00:19:26,430 --> 00:19:34,190
30 years ago and used in history in one

461
00:19:29,970 --> 00:19:37,400
place can you guess what place was this

462
00:19:34,190 --> 00:19:40,980
no no it wasn't HP at all it was in

463
00:19:37,400 --> 00:19:44,490
Commander Keen yes this is a compression

464
00:19:40,980 --> 00:19:48,090
algorithm designed and used in commander

465
00:19:44,490 --> 00:19:50,820
game the game that I grew up playing so

466
00:19:48,090 --> 00:19:52,470
that's we found this really funny but

467
00:19:50,820 --> 00:19:54,389
now that we understand this we can

468
00:19:52,470 --> 00:19:57,870
actually understand what these two bytes

469
00:19:54,390 --> 00:20:00,030
are so basically what they are they just

470
00:19:57,870 --> 00:20:02,399
they just define a window location and

471
00:20:00,030 --> 00:20:04,050
data length which is all the information

472
00:20:02,400 --> 00:20:06,150
that we need in order to

473
00:20:04,050 --> 00:20:08,460
compress this thing let me explain to

474
00:20:06,150 --> 00:20:11,010
you how this book so we have an input

475
00:20:08,460 --> 00:20:13,290
text and output text and a sliding

476
00:20:11,010 --> 00:20:17,370
window right and let's try to decode

477
00:20:13,290 --> 00:20:20,010
this string here okay using this this

478
00:20:17,370 --> 00:20:21,449
method so the first byte is a bitmap we

479
00:20:20,010 --> 00:20:23,580
don't know what the value will be so

480
00:20:21,450 --> 00:20:25,740
we'll leave it open for now and we begin

481
00:20:23,580 --> 00:20:28,590
so a we write it both in the output text

482
00:20:25,740 --> 00:20:33,150
and in the sliding window then be the

483
00:20:28,590 --> 00:20:34,770
same C D and then when we eat a a is

484
00:20:33,150 --> 00:20:36,510
already present in the sliding window so

485
00:20:34,770 --> 00:20:38,520
we don't need to write it in the output

486
00:20:36,510 --> 00:20:39,810
text and then B is just the following

487
00:20:38,520 --> 00:20:42,300
character so again we don't need to

488
00:20:39,810 --> 00:20:46,080
write it and then E is a new character

489
00:20:42,300 --> 00:20:48,330
so what we write here is 0 0 0 2 what it

490
00:20:46,080 --> 00:20:50,970
means is go to the sliding window at

491
00:20:48,330 --> 00:20:55,080
position 0 and take the first 2 bytes

492
00:20:50,970 --> 00:20:57,300
right and then you continue e f g that's

493
00:20:55,080 --> 00:20:59,730
that's all there is to it now you know

494
00:20:57,300 --> 00:21:02,399
the bitmap there was a replacement here

495
00:20:59,730 --> 00:21:04,830
and you know the value here and that's

496
00:21:02,400 --> 00:21:06,570
it that's how you decode this thing it

497
00:21:04,830 --> 00:21:08,610
looks very easy when you look at it that

498
00:21:06,570 --> 00:21:11,280
way right but we're looking at the Trib

499
00:21:08,610 --> 00:21:14,850
reverse is I think a bit more

500
00:21:11,280 --> 00:21:17,190
problematic so that's great now we can

501
00:21:14,850 --> 00:21:20,060
open this file and now we actually have

502
00:21:17,190 --> 00:21:22,800
a film where code that we can look at

503
00:21:20,060 --> 00:21:24,810
and now we need to understand what

504
00:21:22,800 --> 00:21:27,210
operating system and what is this code

505
00:21:24,810 --> 00:21:28,830
even and this took us quite some time

506
00:21:27,210 --> 00:21:31,470
but let me just give you the brief

507
00:21:28,830 --> 00:21:33,300
explanation of it so we are looking at

508
00:21:31,470 --> 00:21:36,870
the operating system a real-time

509
00:21:33,300 --> 00:21:40,370
operating system called red X the CPU

510
00:21:36,870 --> 00:21:42,360
it's running on is arm 9 it's big-endian

511
00:21:40,370 --> 00:21:43,709
and it's manufactured by a company

512
00:21:42,360 --> 00:21:45,870
called Green Hills which is

513
00:21:43,710 --> 00:21:48,540
manufacturing stuff for missiles and

514
00:21:45,870 --> 00:21:50,610
airplanes for the US military so it's

515
00:21:48,540 --> 00:21:52,470
pretty good real time operating system

516
00:21:50,610 --> 00:21:55,439
and then it's composed of several

517
00:21:52,470 --> 00:21:58,350
components like system and stuff common

518
00:21:55,440 --> 00:22:01,830
libraries and tasks tasks are the rough

519
00:21:58,350 --> 00:22:04,439
equivalent of processes in in in normal

520
00:22:01,830 --> 00:22:06,300
operating systems and in system we have

521
00:22:04,440 --> 00:22:09,290
a two-stage bootloader and some

522
00:22:06,300 --> 00:22:12,360
networking framework and stuff like that

523
00:22:09,290 --> 00:22:14,010
and then common libraries just common

524
00:22:12,360 --> 00:22:16,439
library libraries libraries that we all

525
00:22:14,010 --> 00:22:17,950
know and use and tasks yeah we can

526
00:22:16,440 --> 00:22:20,560
define this task and we see the

527
00:22:17,950 --> 00:22:23,680
and after we have this picture here so

528
00:22:20,560 --> 00:22:26,679
now we know that we need to concentrate

529
00:22:23,680 --> 00:22:29,050
on these tasks nothing else is important

530
00:22:26,680 --> 00:22:31,030
these tasks are the tasks that control

531
00:22:29,050 --> 00:22:32,800
the fax functionality so if we look at

532
00:22:31,030 --> 00:22:35,050
them we might be able to find

533
00:22:32,800 --> 00:22:37,330
vulnerabilities in there but just a

534
00:22:35,050 --> 00:22:40,480
second before we do that we see

535
00:22:37,330 --> 00:22:43,960
something that looks pretty suspicious

536
00:22:40,480 --> 00:22:45,640
here and this is spider monkey I don't

537
00:22:43,960 --> 00:22:47,530
know if you're familiar with spider

538
00:22:45,640 --> 00:22:49,870
monkey what it is spider monkey is the

539
00:22:47,530 --> 00:22:52,300
JavaScript implementation of Mozilla and

540
00:22:49,870 --> 00:22:54,870
we were thinking to ourselves why would

541
00:22:52,300 --> 00:22:57,159
the printer need to implement JavaScript

542
00:22:54,870 --> 00:22:59,260
it's not a web browser there's

543
00:22:57,160 --> 00:23:01,270
absolutely no logic for for it to use

544
00:22:59,260 --> 00:23:04,990
JavaScript and we found this question

545
00:23:01,270 --> 00:23:07,420
pretty intriguing so we started looking

546
00:23:04,990 --> 00:23:09,130
up where is it used in the printer and

547
00:23:07,420 --> 00:23:11,800
it turns out that the question is pretty

548
00:23:09,130 --> 00:23:15,070
simple it's used in a feature called

549
00:23:11,800 --> 00:23:17,470
puck PA see these stands for proxy Auto

550
00:23:15,070 --> 00:23:19,810
configuration it's something that

551
00:23:17,470 --> 00:23:22,030
configures your proxy automatically when

552
00:23:19,810 --> 00:23:23,740
you connect to the network and the most

553
00:23:22,030 --> 00:23:26,920
important thing is that the top player

554
00:23:23,740 --> 00:23:29,470
of this functionality was written by HP

555
00:23:26,920 --> 00:23:31,930
and when we're looking at this top layer

556
00:23:29,470 --> 00:23:34,990
functionality we see something that

557
00:23:31,930 --> 00:23:37,420
looks like this look at this so it turns

558
00:23:34,990 --> 00:23:38,560
out that before doing the proxy

559
00:23:37,420 --> 00:23:41,620
auto-configuration

560
00:23:38,560 --> 00:23:44,169
the printer connects to this URL fake

561
00:23:41,620 --> 00:23:45,550
URL one two three four com it just

562
00:23:44,170 --> 00:23:47,860
connects you it does nothing with that

563
00:23:45,550 --> 00:23:50,500
connection just connect to it maybe some

564
00:23:47,860 --> 00:23:52,780
kind of sanity testing I don't really

565
00:23:50,500 --> 00:23:54,850
know why but it does do that and the

566
00:23:52,780 --> 00:23:56,980
interesting thing here is do you know

567
00:23:54,850 --> 00:24:02,909
who owns this domain fake URL one two

568
00:23:56,980 --> 00:24:02,910
three four com any guesses it's not HP

569
00:24:04,230 --> 00:24:08,050
you're right I do

570
00:24:06,460 --> 00:24:10,480
it wasn't registered

571
00:24:08,050 --> 00:24:13,210
so I registered it for $5.00 and now

572
00:24:10,480 --> 00:24:17,290
every HP printer in the world connects

573
00:24:13,210 --> 00:24:20,590
to my domain hey that's very nice and if

574
00:24:17,290 --> 00:24:22,840
if HP is listening I'm willing to sell

575
00:24:20,590 --> 00:24:28,120
this domain for a very good price please

576
00:24:22,840 --> 00:24:30,220
contact me so yes that's it and now

577
00:24:28,120 --> 00:24:35,639
after we talked about all this we can

578
00:24:30,220 --> 00:24:39,120
finally talk about facts so TTL td30

579
00:24:35,640 --> 00:24:44,110
also known as itu-t recommendation t 30

580
00:24:39,120 --> 00:24:49,149
is the de facto protocol for sending fax

581
00:24:44,110 --> 00:24:50,860
over phone line it's actually does all

582
00:24:49,150 --> 00:24:55,120
the heavy lifting all the facts

583
00:24:50,860 --> 00:24:57,310
functionality is in this T 30 photo : if

584
00:24:55,120 --> 00:24:59,350
you have a fax machine it is using T 30

585
00:24:57,310 --> 00:25:02,500
there is no other option for it it was

586
00:24:59,350 --> 00:25:06,909
designed in 1985 and it was less updated

587
00:25:02,500 --> 00:25:10,930
in 2005 yeah 30 years ago so we started

588
00:25:06,910 --> 00:25:13,870
looking at this protocol and it was very

589
00:25:10,930 --> 00:25:15,460
hard to analyze because looking it has

590
00:25:13,870 --> 00:25:18,189
graphs like this it might look like

591
00:25:15,460 --> 00:25:20,050
maybe doable but every one of these

592
00:25:18,190 --> 00:25:21,550
nodes as another state machine in it and

593
00:25:20,050 --> 00:25:23,740
another state machine in it it was

594
00:25:21,550 --> 00:25:26,860
really really really very very messy and

595
00:25:23,740 --> 00:25:29,200
there's a lot of dynamic tables and

596
00:25:26,860 --> 00:25:31,810
dynamic tables and dynamic tables and

597
00:25:29,200 --> 00:25:33,820
really looking at this statically was

598
00:25:31,810 --> 00:25:37,240
not going to get us anywhere we weren't

599
00:25:33,820 --> 00:25:39,639
gonna go anywhere so what we need is

600
00:25:37,240 --> 00:25:43,030
basically we need a debugger we need

601
00:25:39,640 --> 00:25:45,300
some way to debug this printer and the

602
00:25:43,030 --> 00:25:48,670
question is how can you debug a printer

603
00:25:45,300 --> 00:25:50,860
well it's a good question because you

604
00:25:48,670 --> 00:25:52,450
see we have a lot of challenges how do

605
00:25:50,860 --> 00:25:54,520
how do we debug this if there's

606
00:25:52,450 --> 00:25:56,620
absolutely no native way to debug the

607
00:25:54,520 --> 00:25:58,960
printer there are no debugging

608
00:25:56,620 --> 00:26:01,149
facilities we have no control over the

609
00:25:58,960 --> 00:26:03,250
execution flow we can't stop the machine

610
00:26:01,150 --> 00:26:05,560
we can go and we can't actually do

611
00:26:03,250 --> 00:26:07,450
anything and even if we could do an it

612
00:26:05,560 --> 00:26:08,169
something with it does the hardware

613
00:26:07,450 --> 00:26:09,970
watchdog

614
00:26:08,170 --> 00:26:12,490
how about watchdog is just watching the

615
00:26:09,970 --> 00:26:14,860
CPU and if the CPU halts he will just

616
00:26:12,490 --> 00:26:16,270
restart the printer and basically what

617
00:26:14,860 --> 00:26:17,860
the debugger does when you put a

618
00:26:16,270 --> 00:26:20,290
breakpoint it puts you in an endless

619
00:26:17,860 --> 00:26:21,949
loop basically halting the CPU so even

620
00:26:20,290 --> 00:26:23,658
if we could put a black dog

621
00:26:21,950 --> 00:26:25,340
breakpoint the hardware watchdog will

622
00:26:23,659 --> 00:26:27,980
just throw us away and restart the

623
00:26:25,340 --> 00:26:33,168
printer so we go no we need to find some

624
00:26:27,980 --> 00:26:35,510
way to to overcome this and you know

625
00:26:33,169 --> 00:26:37,669
every research project and everything in

626
00:26:35,510 --> 00:26:42,350
life needs a little bit of luck and this

627
00:26:37,669 --> 00:26:45,860
is where our luck came to be and roughly

628
00:26:42,350 --> 00:26:49,340
the same time we do this company called

629
00:26:45,860 --> 00:26:51,439
semi Oh found vulnerability called

630
00:26:49,340 --> 00:26:54,139
Devils ivy it's a vulnerability in the G

631
00:26:51,440 --> 00:26:56,510
soap open-source library

632
00:26:54,139 --> 00:26:59,658
and luckily for us the printer has

633
00:26:56,510 --> 00:27:01,370
exactly this version of G soap so we

634
00:26:59,659 --> 00:27:04,460
have a vulnerability in our printer and

635
00:27:01,370 --> 00:27:08,689
we can actually exploit it using its web

636
00:27:04,460 --> 00:27:10,580
interface so that's great so now we can

637
00:27:08,690 --> 00:27:13,789
exploit the printer so we have control

638
00:27:10,580 --> 00:27:15,649
over the execution flow but just to show

639
00:27:13,789 --> 00:27:17,389
you how it looks like this is the

640
00:27:15,649 --> 00:27:20,000
vulnerable part in the printer the

641
00:27:17,389 --> 00:27:21,918
containing the Phase IV if you don't

642
00:27:20,000 --> 00:27:24,139
spot the vulnerability it's okay it's

643
00:27:21,919 --> 00:27:26,899
here basically the bootable ability is

644
00:27:24,139 --> 00:27:28,279
an integer under flow so what this means

645
00:27:26,899 --> 00:27:32,239
I don't know if you're familiar with

646
00:27:28,279 --> 00:27:34,730
data rates for for sending fax over for

647
00:27:32,240 --> 00:27:37,070
printers only but this means that we

648
00:27:34,730 --> 00:27:39,470
need to send over to Jigga bytes of data

649
00:27:37,070 --> 00:27:42,260
in order to to exploit this

650
00:27:39,470 --> 00:27:45,919
vulnerability and each one of these

651
00:27:42,260 --> 00:27:49,158
iterations takes us around seven minutes

652
00:27:45,919 --> 00:27:51,470
so we have to exploit this thing start

653
00:27:49,159 --> 00:27:53,179
walking on it and then you know we crash

654
00:27:51,470 --> 00:27:55,279
something and then we have to wait for

655
00:27:53,179 --> 00:27:56,929
another seven minutes and another seven

656
00:27:55,279 --> 00:27:58,639
minutes and another so we waited a lot

657
00:27:56,929 --> 00:28:00,740
of seven minutes during this research

658
00:27:58,639 --> 00:28:03,590
and it looked something I think like

659
00:28:00,740 --> 00:28:09,649
this a lot of coffees do this go get

660
00:28:03,590 --> 00:28:11,809
coffee do this go get so it was fun okay

661
00:28:09,649 --> 00:28:14,239
so we need to find some way to debug

662
00:28:11,809 --> 00:28:17,510
this thing we need to find some way to

663
00:28:14,240 --> 00:28:19,279
basically read and write memory now that

664
00:28:17,510 --> 00:28:22,519
we have control of the over days accusin

665
00:28:19,279 --> 00:28:24,470
flow we need to load our own code and we

666
00:28:22,519 --> 00:28:28,909
need to somehow bypass memory protection

667
00:28:24,470 --> 00:28:31,850
on the printer and somehow embedded the

668
00:28:28,909 --> 00:28:34,700
bugging stab into the Kohen film what we

669
00:28:31,850 --> 00:28:35,610
did is design our own debugger we called

670
00:28:34,700 --> 00:28:40,560
it scout

671
00:28:35,610 --> 00:28:43,560
it supports x86 accessible on both arm

672
00:28:40,560 --> 00:28:46,350
and thumb mode we used it before to

673
00:28:43,560 --> 00:28:49,350
debug Linux kernel and we can also use

674
00:28:46,350 --> 00:28:51,510
it in an embedded mode in this mode it's

675
00:28:49,350 --> 00:28:53,610
very versatile so if you have any

676
00:28:51,510 --> 00:28:55,590
similar research that you are doing you

677
00:28:53,610 --> 00:28:57,629
can basically take this thing define the

678
00:28:55,590 --> 00:28:59,850
functions if you know their locations

679
00:28:57,630 --> 00:29:02,160
and boom you have a debugger and if you

680
00:28:59,850 --> 00:29:04,669
want this tool you can go ahead and get

681
00:29:02,160 --> 00:29:07,170
it here we have it on our github account

682
00:29:04,670 --> 00:29:09,660
it's I think you will find it pretty

683
00:29:07,170 --> 00:29:13,170
useful if you are doing anything like

684
00:29:09,660 --> 00:29:16,290
this so yes now we can actually debug

685
00:29:13,170 --> 00:29:18,750
this thing and now after we did all this

686
00:29:16,290 --> 00:29:22,560
we need to understand how does facts

687
00:29:18,750 --> 00:29:24,750
even work so again let me give you the

688
00:29:22,560 --> 00:29:27,450
brief explanation of it a fact says

689
00:29:24,750 --> 00:29:30,420
there's a sending fax sending modem and

690
00:29:27,450 --> 00:29:33,030
receiving modem does the CPU that does

691
00:29:30,420 --> 00:29:36,900
all the heavy lifting and then there is

692
00:29:33,030 --> 00:29:39,240
all the print jobs and and and and stuff

693
00:29:36,900 --> 00:29:41,430
to do printing so we start with the

694
00:29:39,240 --> 00:29:43,800
first stage at the first stage there are

695
00:29:41,430 --> 00:29:46,950
several phases a phase called network

696
00:29:43,800 --> 00:29:50,450
interaction probing arranging equalizer

697
00:29:46,950 --> 00:29:53,700
and echo canceller and a training phase

698
00:29:50,450 --> 00:29:55,530
if you don't know these phases it's okay

699
00:29:53,700 --> 00:30:01,170
but basically you all know them because

700
00:29:55,530 --> 00:30:03,030
they sound like this so that's the all

701
00:30:01,170 --> 00:30:05,130
they do basically at the end of the day

702
00:30:03,030 --> 00:30:08,010
is create a tunnel between the receiving

703
00:30:05,130 --> 00:30:11,010
and the sending modem talent called an

704
00:30:08,010 --> 00:30:13,590
HD SC tunnel and over this tunnel all

705
00:30:11,010 --> 00:30:17,040
the all the other protocols they work so

706
00:30:13,590 --> 00:30:19,590
basically now the modem and the CPU are

707
00:30:17,040 --> 00:30:22,170
using t30 protocol and T 30 protocol is

708
00:30:19,590 --> 00:30:24,300
also divided into several stages in

709
00:30:22,170 --> 00:30:27,270
phase a we are the caller ID saying

710
00:30:24,300 --> 00:30:29,159
hello I'm this thing and then in phase B

711
00:30:27,270 --> 00:30:30,840
we're doing some kind of handshake like

712
00:30:29,160 --> 00:30:32,670
I have these features you have these

713
00:30:30,840 --> 00:30:35,310
features let's decide that we are using

714
00:30:32,670 --> 00:30:37,950
these features pretty standard and then

715
00:30:35,310 --> 00:30:39,960
phase C we actually sent the data and

716
00:30:37,950 --> 00:30:42,600
then on face D we say okay thank you

717
00:30:39,960 --> 00:30:46,740
goodbye basically this is T 30 in a

718
00:30:42,600 --> 00:30:49,080
nutshell so let me show you when you

719
00:30:46,740 --> 00:30:51,660
send a fax how does it work so

720
00:30:49,080 --> 00:30:54,330
a normal fax a black-and-white fax is

721
00:30:51,660 --> 00:30:56,280
sent as a tiff file although this entire

722
00:30:54,330 --> 00:30:58,500
thing that I showed you over the hdl-c

723
00:30:56,280 --> 00:31:01,110
tunnel and then over the data section in

724
00:30:58,500 --> 00:31:03,360
phase C and then it gets to the to the

725
00:31:01,110 --> 00:31:06,689
printer itself and basically what you

726
00:31:03,360 --> 00:31:08,879
sent is the tiff body now the printer

727
00:31:06,690 --> 00:31:10,710
needs to have a tiff header in order to

728
00:31:08,880 --> 00:31:12,390
print this thing and that affair is

729
00:31:10,710 --> 00:31:14,580
composed of the data that is send in

730
00:31:12,390 --> 00:31:16,890
phase a and phase B so now we have a

731
00:31:14,580 --> 00:31:18,899
complete TIF file and it goes to

732
00:31:16,890 --> 00:31:22,440
printing because this is what you do

733
00:31:18,900 --> 00:31:24,510
with fax you print it so that's nice but

734
00:31:22,440 --> 00:31:26,520
now it turns out the totality has a lot

735
00:31:24,510 --> 00:31:28,230
of extensions to it and some of these

736
00:31:26,520 --> 00:31:31,470
extensions are really really weird I

737
00:31:28,230 --> 00:31:33,030
think one of them is called they're kind

738
00:31:31,470 --> 00:31:34,920
of extension yeah it turns out that you

739
00:31:33,030 --> 00:31:37,320
can send colorful fax did you know that

740
00:31:34,920 --> 00:31:38,730
I didn't know that and I actually have

741
00:31:37,320 --> 00:31:40,889
no idea why should you send their

742
00:31:38,730 --> 00:31:42,600
colorful fax but apparently you can and

743
00:31:40,890 --> 00:31:44,250
it's supported on almost every printer

744
00:31:42,600 --> 00:31:46,679
it's almost default in it

745
00:31:44,250 --> 00:31:48,630
the procedure is pretty much the same

746
00:31:46,680 --> 00:31:51,570
procedure the only difference is that

747
00:31:48,630 --> 00:31:54,780
now instead of sending a tiff file we

748
00:31:51,570 --> 00:31:57,030
are sending a JPEG file and also it's

749
00:31:54,780 --> 00:31:59,399
not just a JP it's a full JPEG file so

750
00:31:57,030 --> 00:32:01,710
we are sending both the header and the

751
00:31:59,400 --> 00:32:03,930
body of the JPEG file and then again it

752
00:32:01,710 --> 00:32:07,740
lets get receive by the printer and then

753
00:32:03,930 --> 00:32:09,930
printed so yes that's very nice and now

754
00:32:07,740 --> 00:32:12,270
we can start talking about well we can

755
00:32:09,930 --> 00:32:14,070
find vulnerability so you saw all of

756
00:32:12,270 --> 00:32:16,620
these layers of sending attacks

757
00:32:14,070 --> 00:32:17,909
basically we could look at any one of

758
00:32:16,620 --> 00:32:20,669
these layers in order to find

759
00:32:17,910 --> 00:32:23,070
vulnerabilities but we decided because

760
00:32:20,670 --> 00:32:27,840
it's most convenient to start looking at

761
00:32:23,070 --> 00:32:30,149
the topmost layers and specifically we

762
00:32:27,840 --> 00:32:32,220
wanted to look at the JPEG passing

763
00:32:30,150 --> 00:32:35,040
because we're sending a full JPEG file

764
00:32:32,220 --> 00:32:36,990
so maybe we have more control of the of

765
00:32:35,040 --> 00:32:39,030
the user data and maybe we can find

766
00:32:36,990 --> 00:32:41,280
vulnerabilities there so before we

767
00:32:39,030 --> 00:32:43,710
discuss the vulnerabilities let me

768
00:32:41,280 --> 00:32:46,770
explain to you how a JPEG file looks

769
00:32:43,710 --> 00:32:50,370
like basically this is kind of a JPEG

770
00:32:46,770 --> 00:32:53,550
file it's composed of sections like a

771
00:32:50,370 --> 00:32:55,919
start of image up and then it has a size

772
00:32:53,550 --> 00:32:57,540
and data and then another section with

773
00:32:55,920 --> 00:33:00,720
its size and data and then another

774
00:32:57,540 --> 00:33:02,610
section with its data and then another

775
00:33:00,720 --> 00:33:05,220
section which is the end of image this

776
00:33:02,610 --> 00:33:07,830
how basically a JPEG file look it looks

777
00:33:05,220 --> 00:33:10,770
like and now let's try to look at one of

778
00:33:07,830 --> 00:33:13,049
these sections specifically it's a

779
00:33:10,770 --> 00:33:16,290
compression section okay a compression

780
00:33:13,049 --> 00:33:19,730
is a repeating motto in our research so

781
00:33:16,290 --> 00:33:23,309
this section defines a compression table

782
00:33:19,730 --> 00:33:26,400
it looks like this it has a header it

783
00:33:23,309 --> 00:33:30,030
has a size it has a four by four matrix

784
00:33:26,400 --> 00:33:31,710
and then it has data right this is how

785
00:33:30,030 --> 00:33:35,070
this section looks like and the way it

786
00:33:31,710 --> 00:33:38,280
works is that you basically take this

787
00:33:35,070 --> 00:33:40,830
four by four matrix and then you sum up

788
00:33:38,280 --> 00:33:42,210
all the values and you see if you sum up

789
00:33:40,830 --> 00:33:44,730
all the values here you will get the

790
00:33:42,210 --> 00:33:48,990
value six it's one and two and one and

791
00:33:44,730 --> 00:33:51,059
two and then you take six bytes from the

792
00:33:48,990 --> 00:33:56,340
data section right because this is the

793
00:33:51,059 --> 00:34:00,389
sum and you copy them into a 256 stuck

794
00:33:56,340 --> 00:34:02,629
buffer right look at this for a second

795
00:34:00,390 --> 00:34:04,890
do you see anything strange here

796
00:34:02,630 --> 00:34:06,600
well if you're dealing with

797
00:34:04,890 --> 00:34:08,040
vulnerability research you probably

798
00:34:06,600 --> 00:34:09,750
already understand the problem here and

799
00:34:08,040 --> 00:34:13,980
let me explain it to you what will

800
00:34:09,750 --> 00:34:16,080
happen if I will send here all ffs what

801
00:34:13,980 --> 00:34:19,740
will happen is that the printer will

802
00:34:16,080 --> 00:34:22,460
think that he needs to take roughly 4k

803
00:34:19,739 --> 00:34:27,089
of data from the data and copy this 4k

804
00:34:22,460 --> 00:34:30,149
into a 256 bytes long stalks a buffer so

805
00:34:27,090 --> 00:34:31,460
this will create another flow this is

806
00:34:30,149 --> 00:34:34,770
just as simple as that

807
00:34:31,460 --> 00:34:39,510
so basically we have a stack overflow a

808
00:34:34,770 --> 00:34:41,340
very very primitive and very nice stack

809
00:34:39,510 --> 00:34:43,350
overflow we have absolutely no

810
00:34:41,340 --> 00:34:46,500
constraints because we can send any data

811
00:34:43,350 --> 00:34:49,679
we have no forbidden BOTS we have a

812
00:34:46,500 --> 00:34:52,980
round 4k of controlled data that we can

813
00:34:49,679 --> 00:34:54,750
send and the file even contains more

814
00:34:52,980 --> 00:34:57,930
information that we can use later in our

815
00:34:54,750 --> 00:35:00,030
exploit chain so this is great so we

816
00:34:57,930 --> 00:35:03,169
have an exploit now for the printer over

817
00:35:00,030 --> 00:35:06,869
fax and now that we have it we need to

818
00:35:03,170 --> 00:35:09,180
bypass all the OS mitigations that the

819
00:35:06,869 --> 00:35:12,930
printer provides just kidding there is

820
00:35:09,180 --> 00:35:15,779
no there are absolutely no protections

821
00:35:12,930 --> 00:35:16,589
on this operating system so basically

822
00:35:15,780 --> 00:35:18,720
once you

823
00:35:16,590 --> 00:35:22,140
stackoverflow you basically control the

824
00:35:18,720 --> 00:35:24,390
printer so these are the two CDs that we

825
00:35:22,140 --> 00:35:26,339
received from HP for for the

826
00:35:24,390 --> 00:35:28,680
vulnerabilities HP define them as

827
00:35:26,340 --> 00:35:30,210
critical with a CVS ESCO of nine point

828
00:35:28,680 --> 00:35:32,609
eight which is pretty rare for any

829
00:35:30,210 --> 00:35:34,230
vulnerability and this is HP's response

830
00:35:32,610 --> 00:35:36,240
I must read it when HP learned of this

831
00:35:34,230 --> 00:35:38,400
issue they were quickly to provide

832
00:35:36,240 --> 00:35:40,049
updates to mitigate risks HP takes

833
00:35:38,400 --> 00:35:42,360
security seriously and encourages

834
00:35:40,050 --> 00:35:43,890
customers to keep their systems updated

835
00:35:42,360 --> 00:35:45,690
to protect against potential

836
00:35:43,890 --> 00:35:49,109
vulnerabilities basically this

837
00:35:45,690 --> 00:35:52,020
vulnerability affects all HP Officejet

838
00:35:49,110 --> 00:35:55,110
printer so that's around 100 different

839
00:35:52,020 --> 00:35:57,750
models of HP and it gives you full

840
00:35:55,110 --> 00:36:00,170
control of the printer so let me show

841
00:35:57,750 --> 00:36:02,700
you a short demo of how this looks like

842
00:36:00,170 --> 00:36:05,100
so this is our attacker machine it

843
00:36:02,700 --> 00:36:08,609
connects to a modem that we bought in

844
00:36:05,100 --> 00:36:11,880
Amazon for five dollars we run the

845
00:36:08,610 --> 00:36:15,300
script and we send our malicious fax and

846
00:36:11,880 --> 00:36:17,930
this is our printer so now the facts

847
00:36:15,300 --> 00:36:17,930
gets received

848
00:36:26,900 --> 00:36:36,730
as you can see there it's sent for me

849
00:36:28,430 --> 00:36:39,379
evil attack oh hey we found it funny and

850
00:36:36,730 --> 00:36:41,630
yes basically we have complete control

851
00:36:39,380 --> 00:36:43,760
over the printer but this is not enough

852
00:36:41,630 --> 00:36:45,680
because we want to show how we can go

853
00:36:43,760 --> 00:36:47,299
from the printer to any computer

854
00:36:45,680 --> 00:36:49,640
connected to it so what we did is put

855
00:36:47,299 --> 00:36:51,500
eternal blue inside the value of facts

856
00:36:49,640 --> 00:36:52,879
that we sent and now every computer

857
00:36:51,500 --> 00:36:55,670
connected to the printer will

858
00:36:52,880 --> 00:36:59,839
immediately get exploited as you can see

859
00:36:55,670 --> 00:37:01,520
here right now so it's a Cal poppin that

860
00:36:59,839 --> 00:37:04,099
means that we can do anything we want to

861
00:37:01,520 --> 00:37:05,779
on the on the computer basically we did

862
00:37:04,099 --> 00:37:07,490
exactly what we planned to do so we

863
00:37:05,779 --> 00:37:11,980
showed how we can get into the internal

864
00:37:07,490 --> 00:37:14,209
network just using malicious fax so

865
00:37:11,980 --> 00:37:17,150
that's pretty much it so some

866
00:37:14,210 --> 00:37:19,460
conclusions PSTN public service

867
00:37:17,150 --> 00:37:21,740
telephone line is still a valid attack

868
00:37:19,460 --> 00:37:24,170
surface even in 2013

869
00:37:21,740 --> 00:37:26,569
facts can be used as a gateway for

870
00:37:24,170 --> 00:37:28,940
internal networks and all the outdated

871
00:37:26,569 --> 00:37:31,759
protocols up pretty bad for you so try

872
00:37:28,940 --> 00:37:33,470
and not use them if you can but what can

873
00:37:31,760 --> 00:37:35,930
you do to protect yourself against this

874
00:37:33,470 --> 00:37:37,788
thing basically one thing you can do is

875
00:37:35,930 --> 00:37:40,250
patch your printers if you have an HP

876
00:37:37,789 --> 00:37:43,369
Officejet printer this link here by

877
00:37:40,250 --> 00:37:44,779
provided by HP will tell you if your if

878
00:37:43,369 --> 00:37:46,670
your model is vulnerable if it's an

879
00:37:44,779 --> 00:37:49,970
office yet it is vulnerable and you can

880
00:37:46,670 --> 00:37:52,460
download the updates we actually flew to

881
00:37:49,970 --> 00:37:54,109
HP headquarters to help them create the

882
00:37:52,460 --> 00:37:57,829
patch for this and the patch box I can

883
00:37:54,109 --> 00:37:59,960
tell you another recommendation is if

884
00:37:57,829 --> 00:38:01,640
you don't need fax don't connect it if

885
00:37:59,960 --> 00:38:03,470
you buy this printer don't just connect

886
00:38:01,640 --> 00:38:05,808
it to the fax if you don't need it you

887
00:38:03,470 --> 00:38:07,939
better leave it alone but if you do need

888
00:38:05,809 --> 00:38:10,119
to connect the fax maybe the best thing

889
00:38:07,940 --> 00:38:12,619
to do is to segregate your printers and

890
00:38:10,119 --> 00:38:14,420
havin EV them on a separate villain or

891
00:38:12,619 --> 00:38:16,130
something like this so if somebody can

892
00:38:14,420 --> 00:38:18,020
take control over the printer at least

893
00:38:16,130 --> 00:38:18,890
it won't be able to propagate to the

894
00:38:18,020 --> 00:38:23,040
rest of the network

895
00:38:18,890 --> 00:38:24,850
and though these are all very good

896
00:38:23,040 --> 00:38:26,290
recommendations maybe the best

897
00:38:24,850 --> 00:38:30,220
recommendation I can give you here today

898
00:38:26,290 --> 00:38:33,070
is please stop using facts it's 2018

899
00:38:30,220 --> 00:38:35,410
it's time that we evolve into New York

900
00:38:33,070 --> 00:38:38,290
ways of sending documents from one to

901
00:38:35,410 --> 00:38:41,290
the other and I can't finish this talk

902
00:38:38,290 --> 00:38:43,270
without giving some credits to friends

903
00:38:41,290 --> 00:38:45,310
who helped us a lot during this research

904
00:38:43,270 --> 00:38:46,090
so these are them they deserve the

905
00:38:45,310 --> 00:38:49,029
credit

906
00:38:46,090 --> 00:38:52,270
they helped us physically technically

907
00:38:49,030 --> 00:38:54,310
mentally and however you would like to

908
00:38:52,270 --> 00:38:58,060
say and special thanks to Yan I live

909
00:38:54,310 --> 00:39:01,779
near which made it all happen and that's

910
00:38:58,060 --> 00:39:05,190
it you can find more of our work here if

911
00:39:01,780 --> 00:39:05,190
you want to see thank you very much

