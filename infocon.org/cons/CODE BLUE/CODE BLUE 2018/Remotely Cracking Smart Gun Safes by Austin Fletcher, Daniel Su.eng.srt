1
00:00:04,649 --> 00:00:11,290
all right so as mentioned this is about

2
00:00:08,980 --> 00:00:14,710
remotely cracking bluetooth-enabled gun

3
00:00:11,290 --> 00:00:16,270
safes and verifying the secure

4
00:00:14,710 --> 00:00:22,360
implementation of Bluetooth low-energy

5
00:00:16,270 --> 00:00:24,250
devices I'm Austin Fletcher my lead

6
00:00:22,360 --> 00:00:27,580
vulnerability research engineer at two

7
00:00:24,250 --> 00:00:30,790
six labs this is Dan su he's a senior

8
00:00:27,580 --> 00:00:33,820
research engineer at 2/6 and we both do

9
00:00:30,790 --> 00:00:36,039
software and hardware security there we

10
00:00:33,820 --> 00:00:39,999
work on embedded systems security team

11
00:00:36,039 --> 00:00:43,620
where we do product security for various

12
00:00:39,999 --> 00:00:46,179
IOT and embedded systems and we also

13
00:00:43,620 --> 00:00:49,570
perform fundamental research into

14
00:00:46,179 --> 00:00:54,460
security including Hardware side channel

15
00:00:49,570 --> 00:00:57,159
analysis so we're going to be going over

16
00:00:54,460 --> 00:01:00,879
a brief introduction of the topic as

17
00:00:57,159 --> 00:01:04,030
well as an overview of Bluetooth Low

18
00:01:00,879 --> 00:01:07,780
Energy security will tell you about how

19
00:01:04,030 --> 00:01:09,550
we found these issues in this safe we

20
00:01:07,780 --> 00:01:11,610
have a demonstration and then we will

21
00:01:09,550 --> 00:01:16,240
talk a little bit about how to avoid

22
00:01:11,610 --> 00:01:18,220
making these mistakes in your product so

23
00:01:16,240 --> 00:01:21,759
as mentioned this is about a gun safe in

24
00:01:18,220 --> 00:01:25,450
this case it's a vaulteq v t20i smart

25
00:01:21,760 --> 00:01:27,340
gun safe we're gonna look at some of the

26
00:01:25,450 --> 00:01:30,220
poor implementation decisions that they

27
00:01:27,340 --> 00:01:32,320
made and hopefully teach you some best

28
00:01:30,220 --> 00:01:38,110
practices on how to avoid some of these

29
00:01:32,320 --> 00:01:42,339
in your product so the gun safe is one

30
00:01:38,110 --> 00:01:45,220
of Amazon's best selling gun safes it

31
00:01:42,340 --> 00:01:47,560
has a number of really cool features it

32
00:01:45,220 --> 00:01:50,110
was successfully funded through a

33
00:01:47,560 --> 00:01:52,270
crowdfunding campaign and it's very

34
00:01:50,110 --> 00:01:53,980
popular so popular that one of our

35
00:01:52,270 --> 00:01:56,110
co-workers actually purchased one of

36
00:01:53,980 --> 00:01:58,780
these safes and he was talking about it

37
00:01:56,110 --> 00:02:03,100
and we decided hey that would be cool to

38
00:01:58,780 --> 00:02:04,270
take a look at it it has Bluetooth

39
00:02:03,100 --> 00:02:06,250
functionality and we thought it would be

40
00:02:04,270 --> 00:02:08,560
really neat to try to break into this

41
00:02:06,250 --> 00:02:10,209
safe through the Bluetooth functionality

42
00:02:08,560 --> 00:02:14,010
without actually needing to know any of

43
00:02:10,209 --> 00:02:16,080
the pin code or anything else required

44
00:02:14,010 --> 00:02:18,359
so we spent a couple of days on it and

45
00:02:16,080 --> 00:02:22,470
this presentation is a result of that

46
00:02:18,360 --> 00:02:24,120
work so this safe like I said it

47
00:02:22,470 --> 00:02:25,560
features a Bluetooth but it also

48
00:02:24,120 --> 00:02:26,310
features another a couple of ways to

49
00:02:25,560 --> 00:02:29,099
access it

50
00:02:26,310 --> 00:02:30,930
including biometrics in this case of

51
00:02:29,099 --> 00:02:32,700
fingerprints it has some physical

52
00:02:30,930 --> 00:02:35,519
buttons on the top so it allows you to

53
00:02:32,700 --> 00:02:37,619
enter a PIN code to open it as well as

54
00:02:35,519 --> 00:02:39,420
taking a key and it's advertised as

55
00:02:37,620 --> 00:02:43,769
being securely designed which is why we

56
00:02:39,420 --> 00:02:46,140
really wanted to try to break it so why

57
00:02:43,769 --> 00:02:49,500
a gun safe well in America gun ownership

58
00:02:46,140 --> 00:02:51,390
is very very common almost a third of

59
00:02:49,500 --> 00:02:53,970
all households have a firearm inside of

60
00:02:51,390 --> 00:02:56,279
it and responsible gun owners will

61
00:02:53,970 --> 00:02:58,140
typically try to utilize a gun safe to

62
00:02:56,280 --> 00:03:00,390
keep keep it away from their children

63
00:02:58,140 --> 00:03:03,089
things like that but they still want

64
00:03:00,390 --> 00:03:04,589
access to these safes in the event of an

65
00:03:03,090 --> 00:03:11,700
emergency like somebody breaking into

66
00:03:04,590 --> 00:03:15,209
their house so the problem here really

67
00:03:11,700 --> 00:03:17,810
is that historically speaking secure

68
00:03:15,209 --> 00:03:20,579
systems like this like this gun safe or

69
00:03:17,810 --> 00:03:22,530
bank vault or something would be hard to

70
00:03:20,579 --> 00:03:25,260
break into they would require either

71
00:03:22,530 --> 00:03:27,419
specialized tools or knowledge or lots

72
00:03:25,260 --> 00:03:30,179
of destructive noisy processes to break

73
00:03:27,419 --> 00:03:34,709
into and people got really good at

74
00:03:30,180 --> 00:03:36,090
designing these secure systems so one of

75
00:03:34,709 --> 00:03:38,669
the things that they do though is they

76
00:03:36,090 --> 00:03:40,739
make it hard to actually access the

77
00:03:38,669 --> 00:03:42,510
system harder or time-consuming and

78
00:03:40,739 --> 00:03:45,260
that's something that consumers don't

79
00:03:42,510 --> 00:03:46,798
really like so to address this

80
00:03:45,260 --> 00:03:49,260
manufacturers started adding

81
00:03:46,799 --> 00:03:52,620
functionality like Bluetooth or

82
00:03:49,260 --> 00:03:55,319
biometrics things that allow a user to

83
00:03:52,620 --> 00:03:58,680
more easily access their safe or device

84
00:03:55,319 --> 00:04:00,780
in general adding IOT functionality to a

85
00:03:58,680 --> 00:04:05,790
system that historically has never had

86
00:04:00,780 --> 00:04:07,769
one before and this is of course

87
00:04:05,790 --> 00:04:09,599
increasing the attack surface of the

88
00:04:07,769 --> 00:04:11,790
device which is great for me as an

89
00:04:09,599 --> 00:04:13,798
attacker because increasing the attack

90
00:04:11,790 --> 00:04:17,250
surface gives me four more vectors into

91
00:04:13,799 --> 00:04:21,358
your devices and securing these sorts of

92
00:04:17,250 --> 00:04:24,000
access vectors is very difficult so in

93
00:04:21,358 --> 00:04:25,950
other words we're going to from breaking

94
00:04:24,000 --> 00:04:27,100
into a safe to being something like this

95
00:04:25,950 --> 00:04:28,780
where you

96
00:04:27,100 --> 00:04:31,120
you are actually drilling or being

97
00:04:28,780 --> 00:04:34,659
destructive to get into the safe into a

98
00:04:31,120 --> 00:04:37,090
situation where you have something like

99
00:04:34,660 --> 00:04:41,530
a laptop that's just running some code

100
00:04:37,090 --> 00:04:43,570
that we wrote and it's going to just

101
00:04:41,530 --> 00:04:46,960
connect we have Bluetooth to the safe

102
00:04:43,570 --> 00:04:48,940
and we should see the safe open and

103
00:04:46,960 --> 00:04:50,229
we'll get into how this works but we're

104
00:04:48,940 --> 00:04:55,780
really lowering the barrier to entry

105
00:04:50,230 --> 00:04:57,970
here so we decided to start looking at

106
00:04:55,780 --> 00:05:00,250
the IOT communications of this product

107
00:04:57,970 --> 00:05:02,410
as we often do and we're looking

108
00:05:00,250 --> 00:05:04,720
initially for things like eavesdropping

109
00:05:02,410 --> 00:05:07,480
or the ability to perform a

110
00:05:04,720 --> 00:05:10,960
man-in-the-middle attack or even just be

111
00:05:07,480 --> 00:05:13,390
able to track where these devices are so

112
00:05:10,960 --> 00:05:15,280
in the case for eavesdropping here we

113
00:05:13,390 --> 00:05:18,240
might be able to intercept the pin code

114
00:05:15,280 --> 00:05:21,940
as the user is opening the safe or

115
00:05:18,240 --> 00:05:25,480
possibly replay a valid opening sequence

116
00:05:21,940 --> 00:05:27,520
or in the case of tracking maybe we

117
00:05:25,480 --> 00:05:30,280
could track if a user moves one of these

118
00:05:27,520 --> 00:05:32,409
safes or maybe even just drive down the

119
00:05:30,280 --> 00:05:36,489
street and see who has one in each

120
00:05:32,410 --> 00:05:39,040
neighborhood so we'll talk a little bit

121
00:05:36,490 --> 00:05:40,170
about some high-level Bluetooth Low

122
00:05:39,040 --> 00:05:43,270
Energy security

123
00:05:40,170 --> 00:05:46,420
so Bluetooth Low Energy is very very

124
00:05:43,270 --> 00:05:51,099
popular it's in a lot of devices that we

125
00:05:46,420 --> 00:05:54,160
all have phones fitness trackers watches

126
00:05:51,100 --> 00:05:59,170
your car they're cheap to produce

127
00:05:54,160 --> 00:06:01,000
products with these things just a lot of

128
00:05:59,170 --> 00:06:03,760
commercial system on chips that you just

129
00:06:01,000 --> 00:06:08,500
buy will support bluetooth off the shelf

130
00:06:03,760 --> 00:06:11,260
and typically when people are developing

131
00:06:08,500 --> 00:06:14,170
these products they're concerned with

132
00:06:11,260 --> 00:06:15,789
rapid development and mass market sales

133
00:06:14,170 --> 00:06:17,950
so they're trying to make it cheaply and

134
00:06:15,790 --> 00:06:20,340
efficiently and they're maybe not giving

135
00:06:17,950 --> 00:06:23,590
the kind of respect to the security

136
00:06:20,340 --> 00:06:27,820
aspect as they should and we'll see

137
00:06:23,590 --> 00:06:29,320
later on that Bluetooth Low Energy has

138
00:06:27,820 --> 00:06:31,240
various things that you can do to help

139
00:06:29,320 --> 00:06:33,969
secure product but a lot of these

140
00:06:31,240 --> 00:06:36,960
require additional hardware or have some

141
00:06:33,970 --> 00:06:38,870
impacts on battery life that a lot of

142
00:06:36,960 --> 00:06:41,330
developers don't really want

143
00:06:38,870 --> 00:06:43,010
and so due to these issues a lot of

144
00:06:41,330 --> 00:06:44,449
devices rely on the least secure

145
00:06:43,010 --> 00:06:46,639
possible operation of modes with

146
00:06:44,449 --> 00:06:48,860
bluetooth and security issues are

147
00:06:46,639 --> 00:06:52,669
extremely a common across these devices

148
00:06:48,860 --> 00:06:56,840
so Bluetooth Low Energy is really a

149
00:06:52,669 --> 00:06:58,609
marketing term for like Bluetooth for so

150
00:06:56,840 --> 00:06:59,989
this is kind of split there's a number

151
00:06:58,610 --> 00:07:03,770
of versions it's kind of split between

152
00:06:59,990 --> 00:07:05,630
four point to secure and later and four

153
00:07:03,770 --> 00:07:08,359
point two and earlier which becomes

154
00:07:05,630 --> 00:07:10,669
legacy and so the difference between

155
00:07:08,360 --> 00:07:13,100
this legacy and four point to secure is

156
00:07:10,669 --> 00:07:15,830
how they do a key exchange in the

157
00:07:13,100 --> 00:07:17,840
pairing process so is pretty quickly

158
00:07:15,830 --> 00:07:20,780
identified that there is a deficiency in

159
00:07:17,840 --> 00:07:23,229
the key exchange if somebody observes

160
00:07:20,780 --> 00:07:25,369
this key exchange in the legacy version

161
00:07:23,229 --> 00:07:28,219
they're able to break the future

162
00:07:25,370 --> 00:07:30,410
encryption between the devices and so in

163
00:07:28,220 --> 00:07:32,180
four point to secure they fix this by

164
00:07:30,410 --> 00:07:35,810
switching to an elliptic curve

165
00:07:32,180 --> 00:07:37,340
diffie-hellman key exchange since this

166
00:07:35,810 --> 00:07:39,889
device that we're looking at and a lot

167
00:07:37,340 --> 00:07:41,000
of other devices support this legacy

168
00:07:39,889 --> 00:07:45,560
mode that's what we're going to be

169
00:07:41,000 --> 00:07:48,310
talking about mostly here so looking at

170
00:07:45,560 --> 00:07:50,990
this pairing method it starts off with a

171
00:07:48,310 --> 00:07:52,729
pre connection phase this is where a

172
00:07:50,990 --> 00:07:55,570
device is going to be can out and say

173
00:07:52,729 --> 00:07:58,880
hey I'm a device that you can connect to

174
00:07:55,570 --> 00:08:01,310
assuming that that user wants to connect

175
00:07:58,880 --> 00:08:04,159
to that you move on to phase one which

176
00:08:01,310 --> 00:08:05,720
is where a feature discovery and an

177
00:08:04,160 --> 00:08:07,430
exchange of capabilities is going to

178
00:08:05,720 --> 00:08:08,840
take place this is how they determine

179
00:08:07,430 --> 00:08:12,050
what security modes they're going to use

180
00:08:08,840 --> 00:08:13,849
and in Phase two they start trading keys

181
00:08:12,050 --> 00:08:15,800
and this is where the encryption begins

182
00:08:13,849 --> 00:08:17,780
and then in phase three is where the

183
00:08:15,800 --> 00:08:19,789
devices become bonded together and that

184
00:08:17,780 --> 00:08:23,659
pairing process completes and becomes

185
00:08:19,789 --> 00:08:25,460
permanent so starting with the pre

186
00:08:23,660 --> 00:08:27,440
connection phase you have a peripheral

187
00:08:25,460 --> 00:08:29,950
device in this case our safe it's going

188
00:08:27,440 --> 00:08:31,940
to be beaconing out an advertisement a

189
00:08:29,950 --> 00:08:33,830
phone is going to receive this

190
00:08:31,940 --> 00:08:35,838
advertisement and it'll pop up in the

191
00:08:33,830 --> 00:08:37,849
app and say hey do you want to connect

192
00:08:35,839 --> 00:08:40,339
to me the user is lux that they want to

193
00:08:37,849 --> 00:08:45,529
connect and it starts with with this

194
00:08:40,339 --> 00:08:47,780
connection request moving on to phase

195
00:08:45,529 --> 00:08:50,150
one these devices have now completed

196
00:08:47,780 --> 00:08:51,500
this initial connection and this is when

197
00:08:50,150 --> 00:08:54,199
they're going to start

198
00:08:51,500 --> 00:08:55,550
talking about what security modes

199
00:08:54,200 --> 00:08:57,920
they're going to use in the future

200
00:08:55,550 --> 00:09:01,189
and specifically what association mode

201
00:08:57,920 --> 00:09:04,760
is going to be used for the temporary

202
00:09:01,190 --> 00:09:06,950
key so an important note here is that

203
00:09:04,760 --> 00:09:08,630
the actual device capabilities and

204
00:09:06,950 --> 00:09:12,020
what's actually being advertised might

205
00:09:08,630 --> 00:09:13,790
differ so a lot of hardware supports

206
00:09:12,020 --> 00:09:15,470
more secure or later versions of

207
00:09:13,790 --> 00:09:21,980
Bluetooth than they're actually going to

208
00:09:15,470 --> 00:09:24,080
be using during this pairing phase so

209
00:09:21,980 --> 00:09:26,030
getting to these association modes they

210
00:09:24,080 --> 00:09:28,730
determine how this key this temporary

211
00:09:26,030 --> 00:09:30,230
key is going to be generated the

212
00:09:28,730 --> 00:09:32,150
temporary key is a hundred and twenty

213
00:09:30,230 --> 00:09:33,950
eight bit value depending on the

214
00:09:32,150 --> 00:09:37,069
Association mode it doesn't necessarily

215
00:09:33,950 --> 00:09:39,860
come up with all 128 bits so if that's

216
00:09:37,070 --> 00:09:42,710
the case it'll be padded to 128 bits

217
00:09:39,860 --> 00:09:45,290
with nulls and these association modes

218
00:09:42,710 --> 00:09:48,830
include just works out of band and pass

219
00:09:45,290 --> 00:09:50,870
P starting with just works it uses the

220
00:09:48,830 --> 00:09:54,710
same key as Kanye's iPhone which is just

221
00:09:50,870 --> 00:09:57,200
all zeros it's the most basic connection

222
00:09:54,710 --> 00:09:59,980
mechanism acting as a fallback for other

223
00:09:57,200 --> 00:10:03,200
devices it doesn't have any hardware

224
00:09:59,980 --> 00:10:05,510
additional hardware overhead if you're

225
00:10:03,200 --> 00:10:06,770
following some tutorial online there's a

226
00:10:05,510 --> 00:10:09,770
very good chance that it's going to be

227
00:10:06,770 --> 00:10:11,510
using that just works mechanism it's

228
00:10:09,770 --> 00:10:14,360
commonly used in things like speakers

229
00:10:11,510 --> 00:10:19,160
and headphones and other cheap sort of

230
00:10:14,360 --> 00:10:20,660
devices next we have out-of-band which

231
00:10:19,160 --> 00:10:23,959
is where we're going to distribute this

232
00:10:20,660 --> 00:10:26,120
temporary key out of band so it's not

233
00:10:23,960 --> 00:10:28,340
going to be in the Bluetooth Channel so

234
00:10:26,120 --> 00:10:30,950
this is commonly seen in like headphones

235
00:10:28,340 --> 00:10:33,170
using NFC or in the case of this Apple

236
00:10:30,950 --> 00:10:35,600
watch it has kind of a swirling mass of

237
00:10:33,170 --> 00:10:37,819
dots you hold your iPhone above it and

238
00:10:35,600 --> 00:10:40,190
it captures the motion of this and

239
00:10:37,820 --> 00:10:42,740
that's how it transmits the key it's the

240
00:10:40,190 --> 00:10:44,800
most secure option available to you but

241
00:10:42,740 --> 00:10:48,260
it does have the hardware requirements

242
00:10:44,800 --> 00:10:53,780
either the NFC or a camera or screen

243
00:10:48,260 --> 00:10:55,790
something of that nature last one we'll

244
00:10:53,780 --> 00:10:58,370
talk about here is the passkey this is

245
00:10:55,790 --> 00:10:59,959
where one device generates a key and a

246
00:10:58,370 --> 00:11:03,350
user has to actually input that into

247
00:10:59,960 --> 00:11:04,529
another device it requires one device to

248
00:11:03,350 --> 00:11:06,569
have a screen and another

249
00:11:04,529 --> 00:11:08,430
have an input mechanism I've commonly

250
00:11:06,569 --> 00:11:13,469
seen this used in things like car

251
00:11:08,430 --> 00:11:16,469
infotainment systems so now we have this

252
00:11:13,470 --> 00:11:19,350
temporary key we're going to use this to

253
00:11:16,470 --> 00:11:21,930
form the encryption if this link is

254
00:11:19,350 --> 00:11:23,579
going to be encrypted and we use it to

255
00:11:21,930 --> 00:11:25,349
generate this short-term key the

256
00:11:23,579 --> 00:11:26,670
short-term key is going to be used to

257
00:11:25,350 --> 00:11:29,629
actually encrypt the future

258
00:11:26,670 --> 00:11:32,969
communications going into Phase three

259
00:11:29,629 --> 00:11:35,490
now if an attacker listens in Donna's

260
00:11:32,970 --> 00:11:37,759
key exchange in legacy mode since all of

261
00:11:35,490 --> 00:11:40,620
these values and the equations are known

262
00:11:37,759 --> 00:11:49,079
they can break the future encryption

263
00:11:40,620 --> 00:11:53,759
algorithms so in phase three we perform

264
00:11:49,079 --> 00:11:55,589
a long-term key distribution so there's

265
00:11:53,759 --> 00:12:00,089
a few keys involved here some of them

266
00:11:55,589 --> 00:12:02,029
are exchanged to help devices recognize

267
00:12:00,089 --> 00:12:05,009
the devices over a long period of time

268
00:12:02,029 --> 00:12:07,259
so one of the things that devices do or

269
00:12:05,009 --> 00:12:09,720
they or they can do is they can change

270
00:12:07,259 --> 00:12:11,730
their physical MAC address over time to

271
00:12:09,720 --> 00:12:14,519
help prevent tracking and so some of

272
00:12:11,730 --> 00:12:16,589
these help resolve that over time and at

273
00:12:14,519 --> 00:12:18,449
the end of this the devices are bonded

274
00:12:16,589 --> 00:12:19,860
which means that the future connections

275
00:12:18,449 --> 00:12:25,319
don't necessarily need to go through

276
00:12:19,860 --> 00:12:26,910
this full pairing process again so there

277
00:12:25,319 --> 00:12:28,709
are some built-in mitigation as to what

278
00:12:26,910 --> 00:12:31,199
we've talked about previously in

279
00:12:28,709 --> 00:12:35,250
Bluetooth so for eavesdropping there's

280
00:12:31,199 --> 00:12:38,430
link layer encryption using AES 128 bit

281
00:12:35,250 --> 00:12:40,410
encryption and then in 4.2 secure and

282
00:12:38,430 --> 00:12:43,559
later they switch this diffie-hellman

283
00:12:40,410 --> 00:12:44,759
key exchange which gives a protection

284
00:12:43,559 --> 00:12:48,709
against man-in-the-middle and

285
00:12:44,759 --> 00:12:50,730
eavesdropping they also add this other

286
00:12:48,709 --> 00:12:53,339
association mode called numeric

287
00:12:50,730 --> 00:12:55,769
comparison where you have two devices

288
00:12:53,339 --> 00:12:58,050
with screens and they each display a

289
00:12:55,769 --> 00:13:02,370
number and a user asked to verify the

290
00:12:58,050 --> 00:13:04,620
authenticity of each device and then it

291
00:13:02,370 --> 00:13:06,120
provides that tracking protection by

292
00:13:04,620 --> 00:13:10,170
allowing the device to change its

293
00:13:06,120 --> 00:13:14,040
physical address over time so

294
00:13:10,170 --> 00:13:15,509
mitigations are great but just because

295
00:13:14,040 --> 00:13:16,889
the features are available doesn't mean

296
00:13:15,509 --> 00:13:17,950
that they're necessarily going to be

297
00:13:16,889 --> 00:13:20,050
used

298
00:13:17,950 --> 00:13:22,840
again if you follow some demos or

299
00:13:20,050 --> 00:13:25,050
examples online oftentimes they don't

300
00:13:22,840 --> 00:13:27,640
pay any attention to any of these steps

301
00:13:25,050 --> 00:13:29,560
and the security of the encrypted

302
00:13:27,640 --> 00:13:31,240
channel relies on the confidentiality of

303
00:13:29,560 --> 00:13:34,359
the key exchange for the legacy mode

304
00:13:31,240 --> 00:13:37,510
especially and the Association modes

305
00:13:34,360 --> 00:13:41,200
that are the easiest to exploit are also

306
00:13:37,510 --> 00:13:47,500
the simplest to implement and have the

307
00:13:41,200 --> 00:13:49,420
lowest hardware requirements so as you

308
00:13:47,500 --> 00:13:52,180
start looking at some of the claims that

309
00:13:49,420 --> 00:13:56,349
these devices make like this safe it

310
00:13:52,180 --> 00:13:59,770
claims to use 256 bit AES and Bank level

311
00:13:56,350 --> 00:14:02,950
encryption so these aren't supported at

312
00:13:59,770 --> 00:14:05,740
the protocol layer an application layer

313
00:14:02,950 --> 00:14:08,050
you can implement whatever schemes you

314
00:14:05,740 --> 00:14:10,240
want however doing something like this

315
00:14:08,050 --> 00:14:12,310
takes more processing power and would

316
00:14:10,240 --> 00:14:15,610
decrease battery life it also adds

317
00:14:12,310 --> 00:14:20,310
complexity and so really they're not

318
00:14:15,610 --> 00:14:23,110
going to do this so big red flag for us

319
00:14:20,310 --> 00:14:25,949
so looking at finding the

320
00:14:23,110 --> 00:14:28,510
vulnerabilities that exist in the safe

321
00:14:25,950 --> 00:14:30,430
we start out like we often do with

322
00:14:28,510 --> 00:14:33,400
product security reviews and we start

323
00:14:30,430 --> 00:14:36,880
looking at the documentation for the

324
00:14:33,400 --> 00:14:38,860
device we start learning how people use

325
00:14:36,880 --> 00:14:43,450
it how the developers use it and how

326
00:14:38,860 --> 00:14:46,540
users use it we do open source research

327
00:14:43,450 --> 00:14:48,820
we want to see if anyone has hacked the

328
00:14:46,540 --> 00:14:50,890
thing previously and we want to evaluate

329
00:14:48,820 --> 00:14:54,310
the attack surface so we look at things

330
00:14:50,890 --> 00:14:57,790
like the input output for the device and

331
00:14:54,310 --> 00:14:59,439
what communications channels it uses if

332
00:14:57,790 --> 00:15:01,300
the device is more or less a black box

333
00:14:59,440 --> 00:15:02,800
meaning it doesn't have many of these

334
00:15:01,300 --> 00:15:06,010
things available to us or in this case

335
00:15:02,800 --> 00:15:08,140
our safe a good first step is going to

336
00:15:06,010 --> 00:15:13,750
be to analyze the communications that it

337
00:15:08,140 --> 00:15:15,640
uses under normal operation so in normal

338
00:15:13,750 --> 00:15:18,370
operation we have our safe it's going to

339
00:15:15,640 --> 00:15:20,980
beacon at it's advertisement a user is

340
00:15:18,370 --> 00:15:24,340
going to be using the app in this case

341
00:15:20,980 --> 00:15:27,010
the Android app they'll see the safes

342
00:15:24,340 --> 00:15:29,190
pop up in the app and they can choose to

343
00:15:27,010 --> 00:15:31,390
pair with it

344
00:15:29,190 --> 00:15:35,380
assuming they choose to pair with a

345
00:15:31,390 --> 00:15:38,350
they are brought to the screen where it

346
00:15:35,380 --> 00:15:41,020
wants a pin code and the pin code here

347
00:15:38,350 --> 00:15:42,910
would be the same numeric pin code that

348
00:15:41,020 --> 00:15:46,590
a user would type in on the top of the

349
00:15:42,910 --> 00:15:49,270
safe to get it to open and should be

350
00:15:46,590 --> 00:15:50,860
noted that the pairing in that step step

351
00:15:49,270 --> 00:15:52,329
is actually separate than the bluetooth

352
00:15:50,860 --> 00:15:54,460
pairing that's already happened at this

353
00:15:52,330 --> 00:15:58,420
point and this is an application-level

354
00:15:54,460 --> 00:16:00,340
pairing that happens assuming the user

355
00:15:58,420 --> 00:16:01,839
puts in their correct pin code then

356
00:16:00,340 --> 00:16:04,990
they're presented with another screen

357
00:16:01,840 --> 00:16:07,720
that allows them to initiate commands on

358
00:16:04,990 --> 00:16:11,200
the safe like open it or change the

359
00:16:07,720 --> 00:16:13,900
lighting various other things so back to

360
00:16:11,200 --> 00:16:16,150
this application so like we said the

361
00:16:13,900 --> 00:16:17,079
safes just beaconing out Hey connect to

362
00:16:16,150 --> 00:16:19,890
me

363
00:16:17,080 --> 00:16:22,540
assuming a user wants to connect to it

364
00:16:19,890 --> 00:16:25,090
they're able to so this allows anyone

365
00:16:22,540 --> 00:16:28,839
near the safe to attempt to connect to

366
00:16:25,090 --> 00:16:34,330
it and enter this pin code so right away

367
00:16:28,840 --> 00:16:37,000
that's a bad sign but in doing this

368
00:16:34,330 --> 00:16:40,480
process we realized that the application

369
00:16:37,000 --> 00:16:43,690
doesn't have any penalties for incorrect

370
00:16:40,480 --> 00:16:46,780
pin code entries so that allows you to

371
00:16:43,690 --> 00:16:48,970
do something pretty quickly like are

372
00:16:46,780 --> 00:16:51,790
lousy attempt here just brute forcing

373
00:16:48,970 --> 00:16:53,410
the key since it doesn't penalize you in

374
00:16:51,790 --> 00:16:56,829
any way for getting it wrong you can

375
00:16:53,410 --> 00:16:59,890
quickly exhaust the key space for entry

376
00:16:56,830 --> 00:17:02,650
into this safe since it only supports

377
00:16:59,890 --> 00:17:05,020
four to eight digit PIN codes with

378
00:17:02,650 --> 00:17:07,510
numbers one through five available we

379
00:17:05,020 --> 00:17:10,060
just wrote this Python script and

380
00:17:07,510 --> 00:17:13,030
instrumented the application over a TB

381
00:17:10,060 --> 00:17:14,980
and we're able to log into the safe now

382
00:17:13,030 --> 00:17:18,099
this is a vulnerability but this isn't

383
00:17:14,980 --> 00:17:20,800
what we want it to find this isn't good

384
00:17:18,099 --> 00:17:23,469
enough so where do we go from here

385
00:17:20,800 --> 00:17:26,109
well we don't have too much else to look

386
00:17:23,470 --> 00:17:28,150
at at this point so we're gonna look at

387
00:17:26,109 --> 00:17:30,909
this network communication so let's look

388
00:17:28,150 --> 00:17:34,320
at the Bluetooth level so we're gonna

389
00:17:30,910 --> 00:17:38,860
try to capture user pairing with and

390
00:17:34,320 --> 00:17:41,590
opening the safe so I'm gonna hand it

391
00:17:38,860 --> 00:17:44,550
over to Dan here to talk more about this

392
00:17:41,590 --> 00:17:44,550
bluetooth capture process

393
00:17:48,150 --> 00:17:54,580
all right so the next phase we want to

394
00:17:52,450 --> 00:17:56,830
like Austin said capture the

395
00:17:54,580 --> 00:18:00,879
communication between the application

396
00:17:56,830 --> 00:18:03,010
and the safe so how do we do that so we

397
00:18:00,880 --> 00:18:06,160
use this device called the uber tooth

398
00:18:03,010 --> 00:18:08,590
one it is a USB dongle

399
00:18:06,160 --> 00:18:12,820
that can be used to monitor Bluetooth

400
00:18:08,590 --> 00:18:15,540
and perform analysis on the capture the

401
00:18:12,820 --> 00:18:19,570
capture can be imported into Wireshark

402
00:18:15,540 --> 00:18:22,600
and the device is relatively cheap and

403
00:18:19,570 --> 00:18:25,720
has good documentation online it's also

404
00:18:22,600 --> 00:18:28,750
an open source platform so those are the

405
00:18:25,720 --> 00:18:31,450
reasons why we liked it there's a link

406
00:18:28,750 --> 00:18:34,510
for that there hopefully if you can see

407
00:18:31,450 --> 00:18:36,970
that so what you did was we took a

408
00:18:34,510 --> 00:18:38,919
capture of you know just playing around

409
00:18:36,970 --> 00:18:42,790
with the safe we opened up the

410
00:18:38,919 --> 00:18:46,660
application we connected to the safe

411
00:18:42,790 --> 00:18:48,639
sent it a few commands right unlocked it

412
00:18:46,660 --> 00:18:53,350
you know dimmed the LEDs a little bit it

413
00:18:48,640 --> 00:18:56,049
was messing around so the next step is

414
00:18:53,350 --> 00:18:58,270
we take this capture that we just did

415
00:18:56,049 --> 00:19:02,350
right that contains these various

416
00:18:58,270 --> 00:19:05,139
actions that we took and we opened it up

417
00:19:02,350 --> 00:19:08,199
in Wireshark immediately what we can see

418
00:19:05,140 --> 00:19:12,870
is that the the capture is unencrypted

419
00:19:08,200 --> 00:19:16,000
or the communication is unencrypted the

420
00:19:12,870 --> 00:19:18,479
the write commands that the application

421
00:19:16,000 --> 00:19:22,000
is sending to the safe are in the clear

422
00:19:18,480 --> 00:19:23,410
see the payload they're you know just

423
00:19:22,000 --> 00:19:25,780
taking a look at it briefly there are

424
00:19:23,410 --> 00:19:28,179
some interesting data sequences that are

425
00:19:25,780 --> 00:19:30,460
being exchanged but at this point we

426
00:19:28,179 --> 00:19:37,750
really don't understand the application

427
00:19:30,460 --> 00:19:40,919
protocol so just an example of encrypted

428
00:19:37,750 --> 00:19:45,070
versus unencrypted the image at the top

429
00:19:40,919 --> 00:19:47,919
is just an encrypted capture so what we

430
00:19:45,070 --> 00:19:50,320
see is like an encryption request and

431
00:19:47,919 --> 00:19:52,929
then you know afterwards it's just layer

432
00:19:50,320 --> 00:19:55,030
2 fragments that we can't decrypt and

433
00:19:52,929 --> 00:19:56,590
then the unencrypted traffic right we

434
00:19:55,030 --> 00:19:57,649
can basically see everything that's

435
00:19:56,590 --> 00:20:00,050
going

436
00:19:57,650 --> 00:20:06,800
so that was actually just like a quick

437
00:20:00,050 --> 00:20:09,050
and easy you know when so in the case

438
00:20:06,800 --> 00:20:11,570
where there is encryption you know you

439
00:20:09,050 --> 00:20:14,210
can still deal with that based off what

440
00:20:11,570 --> 00:20:18,200
Austin said right the issue with the

441
00:20:14,210 --> 00:20:21,950
pairing exchange so a nice tool to use

442
00:20:18,200 --> 00:20:25,670
is a crackle this will perform the

443
00:20:21,950 --> 00:20:28,130
brute-force attack on on that

444
00:20:25,670 --> 00:20:30,679
vulnerability and you will be able to

445
00:20:28,130 --> 00:20:37,790
brute force the temporary key using this

446
00:20:30,679 --> 00:20:40,370
tool alongside the uber tooth so at this

447
00:20:37,790 --> 00:20:43,850
point we have a few options that we can

448
00:20:40,370 --> 00:20:47,149
take we can you know continue with the

449
00:20:43,850 --> 00:20:51,770
Bluetooth captures take a look at the

450
00:20:47,150 --> 00:20:54,140
android apk or iOS application another

451
00:20:51,770 --> 00:20:57,520
option is just to take the firmware off

452
00:20:54,140 --> 00:21:01,160
the device ray and analyze that instead

453
00:20:57,520 --> 00:21:02,960
so you know the the step that we took

454
00:21:01,160 --> 00:21:06,679
was just taking a look at the android

455
00:21:02,960 --> 00:21:09,559
apk and this was because sometimes these

456
00:21:06,679 --> 00:21:12,710
apks are relatively easy to understand

457
00:21:09,559 --> 00:21:15,950
and reverse-engineer we can decompile

458
00:21:12,710 --> 00:21:19,370
the apk and hopefully it doesn't use

459
00:21:15,950 --> 00:21:21,260
office Gatien right even if there is

460
00:21:19,370 --> 00:21:25,600
obfuscation there are ways to deal with

461
00:21:21,260 --> 00:21:25,600
that but you know just hope for the best

462
00:21:26,890 --> 00:21:33,380
so it ended up actually that the apk

463
00:21:30,340 --> 00:21:38,300
wasn't up if you skated too heavily but

464
00:21:33,380 --> 00:21:41,360
the tools that we used to analyze it so

465
00:21:38,300 --> 00:21:44,928
first off we download the apk from an

466
00:21:41,360 --> 00:21:47,629
apk archive website there are various of

467
00:21:44,929 --> 00:21:50,420
these around one example that we used

468
00:21:47,630 --> 00:21:52,220
was apk mirror so it just allows you to

469
00:21:50,420 --> 00:21:55,720
download apk is without a phone you can

470
00:21:52,220 --> 00:21:59,480
also grab archived versions

471
00:21:55,720 --> 00:22:02,630
sorry historical versions so once we get

472
00:21:59,480 --> 00:22:05,900
this apk we run a PK tool and Dexter jar

473
00:22:02,630 --> 00:22:08,929
on it this gives us the Java classes

474
00:22:05,900 --> 00:22:10,409
back and then we open those up in ad

475
00:22:08,929 --> 00:22:13,769
compiler

476
00:22:10,409 --> 00:22:16,110
so we used wayton which is a GUI for the

477
00:22:13,769 --> 00:22:23,429
Pratt County compiler there are other

478
00:22:16,110 --> 00:22:25,949
ones out there but just what we used so

479
00:22:23,429 --> 00:22:27,330
opening up the apk you know first we

480
00:22:25,950 --> 00:22:30,269
want to just take a look at what's

481
00:22:27,330 --> 00:22:32,970
inside take a look at the hierarchy as

482
00:22:30,269 --> 00:22:35,639
well as the the class names you know see

483
00:22:32,970 --> 00:22:37,889
if anything pops up and then you know

484
00:22:35,639 --> 00:22:40,500
look for points of interest inside those

485
00:22:37,889 --> 00:22:43,459
classes so things that we're looking for

486
00:22:40,500 --> 00:22:45,779
are just communication between services

487
00:22:43,460 --> 00:22:48,029
you know any type of hard-coded

488
00:22:45,779 --> 00:22:50,519
definitions hard-coded constants you

489
00:22:48,029 --> 00:22:52,710
know interesting strings you know that

490
00:22:50,519 --> 00:22:55,409
might have to do with the safe just you

491
00:22:52,710 --> 00:23:01,769
know anything to interact with the safe

492
00:22:55,409 --> 00:23:04,409
in general so the the first point of

493
00:23:01,769 --> 00:23:08,100
interest we found was in the order utils

494
00:23:04,409 --> 00:23:11,070
VT xx class we found you know various

495
00:23:08,100 --> 00:23:14,639
commands in there with constant

496
00:23:11,070 --> 00:23:17,100
definitions and these seem to be the

497
00:23:14,639 --> 00:23:20,149
application layer commands that the apk

498
00:23:17,100 --> 00:23:22,080
is using to communicate with the device

499
00:23:20,149 --> 00:23:25,110
and you know there are a few in there

500
00:23:22,080 --> 00:23:29,129
there's like command author command info

501
00:23:25,110 --> 00:23:30,330
command finger door right so that kind

502
00:23:29,129 --> 00:23:33,959
of sounds like it has something to do

503
00:23:30,330 --> 00:23:36,110
with opening the safe you weren't sure

504
00:23:33,960 --> 00:23:39,120
about what some of the other ones meant

505
00:23:36,110 --> 00:23:42,949
but you know at this point we just want

506
00:23:39,120 --> 00:23:42,949
to see if these are inside the capture

507
00:23:44,120 --> 00:23:49,879
so unfortunately we didn't immediately

508
00:23:46,799 --> 00:23:51,870
see these magic constants in the capture

509
00:23:49,879 --> 00:23:54,928
but we do know that our Bluetooth

510
00:23:51,870 --> 00:23:57,449
capture right contains these commands

511
00:23:54,929 --> 00:24:00,299
somehow because we did interact with the

512
00:23:57,450 --> 00:24:03,210
safe we did you know unlock the safe we

513
00:24:00,299 --> 00:24:06,450
did messed around with the LEDs so they

514
00:24:03,210 --> 00:24:09,570
should be in there some in some form so

515
00:24:06,450 --> 00:24:11,070
you must be missing something so the

516
00:24:09,570 --> 00:24:13,710
next step is we have to go back into the

517
00:24:11,070 --> 00:24:16,259
apk you know see what they're doing with

518
00:24:13,710 --> 00:24:19,139
those commands and it ends up you know

519
00:24:16,259 --> 00:24:21,299
it's being transformed there's some type

520
00:24:19,139 --> 00:24:23,699
of encoding and packing function that's

521
00:24:21,299 --> 00:24:24,240
being applied before they are being

522
00:24:23,700 --> 00:24:26,070
transmitted

523
00:24:24,240 --> 00:24:31,860
so that's why we couldn't see them

524
00:24:26,070 --> 00:24:34,649
directly in the capture so fortunately

525
00:24:31,860 --> 00:24:38,429
for us the this packing algorithm is

526
00:24:34,650 --> 00:24:41,490
easy to understand what they do is they

527
00:24:38,430 --> 00:24:44,630
they take the command payload they

528
00:24:41,490 --> 00:24:48,110
divide it into 20 by trunks and then

529
00:24:44,630 --> 00:24:52,380
bytes in these chunks are then split off

530
00:24:48,110 --> 00:24:55,889
by the each nibble is split off you know

531
00:24:52,380 --> 00:24:58,320
added to 20 added to 97 and then store

532
00:24:55,890 --> 00:25:01,320
it as its own byte so you transform like

533
00:24:58,320 --> 00:25:05,280
one bite into two there's an image on

534
00:25:01,320 --> 00:25:08,040
the bottom that shows this the image on

535
00:25:05,280 --> 00:25:11,220
the top is just the function that

536
00:25:08,040 --> 00:25:15,590
performs this so we don't really know

537
00:25:11,220 --> 00:25:15,590
why they did this but they just do it

538
00:25:15,830 --> 00:25:21,360
it's real it's totally simple to reverse

539
00:25:19,040 --> 00:25:25,110
image to left just shows us joining

540
00:25:21,360 --> 00:25:31,770
those bytes back together and script to

541
00:25:25,110 --> 00:25:34,620
do that so at this point we want to

542
00:25:31,770 --> 00:25:37,770
apply our decoding to the actual capture

543
00:25:34,620 --> 00:25:42,600
and just see what commands are being

544
00:25:37,770 --> 00:25:46,230
sent so we do that and we we see a you

545
00:25:42,600 --> 00:25:48,929
know a couple of commands and then here

546
00:25:46,230 --> 00:25:52,500
this image shows the timing diagram of

547
00:25:48,930 --> 00:25:55,830
the commands so we see you know it's

548
00:25:52,500 --> 00:25:59,310
doing this like pair command and keep in

549
00:25:55,830 --> 00:26:01,230
mind this is the application pairing

550
00:25:59,310 --> 00:26:03,179
command so not the same as a bluetooth

551
00:26:01,230 --> 00:26:07,170
pairing but it's sending some type of

552
00:26:03,180 --> 00:26:09,360
you know pair command get author setting

553
00:26:07,170 --> 00:26:12,900
the time you know opening the door

554
00:26:09,360 --> 00:26:16,590
opening the safe perhaps and then a

555
00:26:12,900 --> 00:26:17,940
bunch of other commands initially you

556
00:26:16,590 --> 00:26:20,340
know some of them were not that

557
00:26:17,940 --> 00:26:24,030
interesting we kind of glanced over them

558
00:26:20,340 --> 00:26:27,209
like yet author but and if this command

559
00:26:24,030 --> 00:26:31,530
was actually pretty essential and we can

560
00:26:27,210 --> 00:26:33,540
talk about that next slide so again we

561
00:26:31,530 --> 00:26:35,670
initially thought this command stood for

562
00:26:33,540 --> 00:26:37,889
you know get author get author of like

563
00:26:35,670 --> 00:26:40,680
the app I get author of some

564
00:26:37,890 --> 00:26:43,800
type of right requests but actually

565
00:26:40,680 --> 00:26:45,540
stands for get authorization so what you

566
00:26:43,800 --> 00:26:49,889
use this command for is use it to

567
00:26:45,540 --> 00:26:52,409
request an authorization token and in

568
00:26:49,890 --> 00:26:56,130
the structure this command you actually

569
00:26:52,410 --> 00:26:59,010
send it with the pin code to that safe

570
00:26:56,130 --> 00:27:00,720
so there's a field in there if you see

571
00:26:59,010 --> 00:27:04,110
the image that's reserved for that pin

572
00:27:00,720 --> 00:27:06,540
code so immediately here there's an

573
00:27:04,110 --> 00:27:09,120
issue because someone who's

574
00:27:06,540 --> 00:27:11,790
eavesdropping can't see this command

575
00:27:09,120 --> 00:27:14,070
being sent the pin code is in there

576
00:27:11,790 --> 00:27:16,110
right so they can extract the pin code

577
00:27:14,070 --> 00:27:23,370
and identify what that is

578
00:27:16,110 --> 00:27:27,240
for the device so what the authorization

579
00:27:23,370 --> 00:27:30,800
request responds with is the safe will

580
00:27:27,240 --> 00:27:33,090
give you back for by authorization token

581
00:27:30,800 --> 00:27:37,139
using this token you can then issue

582
00:27:33,090 --> 00:27:39,659
privileged commands so a sample of a

583
00:27:37,140 --> 00:27:42,540
privileged command is just opening up

584
00:27:39,660 --> 00:27:45,570
the safe right so below there's an

585
00:27:42,540 --> 00:27:47,790
example of that where you take the four

586
00:27:45,570 --> 00:27:53,240
by authorization token you place it in

587
00:27:47,790 --> 00:27:55,950
the first four bytes of the open command

588
00:27:53,240 --> 00:28:02,250
you send that right and then lets you

589
00:27:55,950 --> 00:28:03,690
open it up so it ends up if all you want

590
00:28:02,250 --> 00:28:07,440
to do is just you know connect to the

591
00:28:03,690 --> 00:28:09,330
safe and open it up the the bare minimum

592
00:28:07,440 --> 00:28:12,390
that you need to do right is just to

593
00:28:09,330 --> 00:28:15,389
request authorization and then you know

594
00:28:12,390 --> 00:28:17,760
get that auth token and then send the

595
00:28:15,390 --> 00:28:19,500
open command with the auth token right

596
00:28:17,760 --> 00:28:22,440
so some of the other commands that we

597
00:28:19,500 --> 00:28:29,130
saw before were not really necessary for

598
00:28:22,440 --> 00:28:32,370
that task so at this point you know we

599
00:28:29,130 --> 00:28:34,740
understand this application layer

600
00:28:32,370 --> 00:28:36,300
protocol a little bit better what we

601
00:28:34,740 --> 00:28:39,210
want to do is you want to you know play

602
00:28:36,300 --> 00:28:42,360
around with it a little bit modify some

603
00:28:39,210 --> 00:28:45,540
payloads see what happens so at this

604
00:28:42,360 --> 00:28:48,000
point we're not using the app anymore to

605
00:28:45,540 --> 00:28:51,629
communicate with the device we're using

606
00:28:48,000 --> 00:28:54,780
our laptops and we chose to use this

607
00:28:51,630 --> 00:28:57,750
no js' bluetooth library called noble

608
00:28:54,780 --> 00:29:01,230
and manly and just due to cross-platform

609
00:28:57,750 --> 00:29:04,650
support you know so using this library

610
00:29:01,230 --> 00:29:07,200
we just mess around with the safe and

611
00:29:04,650 --> 00:29:11,070
also we use a tool called packet logger

612
00:29:07,200 --> 00:29:13,380
on Mac it's just a neat Mac tool for

613
00:29:11,070 --> 00:29:21,149
sniffing or sorry for examining

614
00:29:13,380 --> 00:29:23,850
Bluetooth traffic so so we did is a you

615
00:29:21,150 --> 00:29:28,440
test around with the safe we issue some

616
00:29:23,850 --> 00:29:29,939
unlock commands you know we want to make

617
00:29:28,440 --> 00:29:34,290
sure that we're not hitting some type of

618
00:29:29,940 --> 00:29:36,240
cash or pre-authorized behavior so we

619
00:29:34,290 --> 00:29:40,470
changed the pin code right you know

620
00:29:36,240 --> 00:29:45,180
rerun it see what happens and you know

621
00:29:40,470 --> 00:29:47,370
like the safe opened so it was this was

622
00:29:45,180 --> 00:29:50,040
very surprising to us so you know at

623
00:29:47,370 --> 00:29:52,489
first we didn't you know we thought we

624
00:29:50,040 --> 00:29:55,379
made a mistake or something right but

625
00:29:52,490 --> 00:29:58,080
that ends up that uh the safe actually

626
00:29:55,380 --> 00:30:01,230
doesn't check the pin code of the get

627
00:29:58,080 --> 00:30:04,139
authorization request it just ends up

628
00:30:01,230 --> 00:30:06,660
always responding with an authorization

629
00:30:04,140 --> 00:30:10,080
token you know even if you give it the

630
00:30:06,660 --> 00:30:12,420
wrong pin code so that's that's pretty

631
00:30:10,080 --> 00:30:14,570
bad right that's a that's like this

632
00:30:12,420 --> 00:30:16,770
image right where you have this

633
00:30:14,570 --> 00:30:18,659
absolutely failure for security where

634
00:30:16,770 --> 00:30:22,070
you have you know this lock door but we

635
00:30:18,660 --> 00:30:24,390
can just kind of ignore it and go around

636
00:30:22,070 --> 00:30:27,179
so what what this ends up meaning is

637
00:30:24,390 --> 00:30:31,350
that any attacker can open this device

638
00:30:27,180 --> 00:30:33,330
by just issuing two commands right

639
00:30:31,350 --> 00:30:36,810
and we also verified this by purchasing

640
00:30:33,330 --> 00:30:43,800
a brand new device off Amazon and right

641
00:30:36,810 --> 00:30:47,040
out of the box right worked so the

642
00:30:43,800 --> 00:30:49,490
results I guess these safes right there

643
00:30:47,040 --> 00:30:54,930
constantly broadcasting advertisements

644
00:30:49,490 --> 00:30:57,420
anyone can connect to them and then you

645
00:30:54,930 --> 00:31:00,200
know during normal operation

646
00:30:57,420 --> 00:31:03,570
when a user right tries to open the door

647
00:31:00,200 --> 00:31:05,280
it transmits the pin code into clear so

648
00:31:03,570 --> 00:31:07,139
that's a big issue too

649
00:31:05,280 --> 00:31:09,510
and then you know the really bad one

650
00:31:07,140 --> 00:31:12,360
where anyone can kind of connect to

651
00:31:09,510 --> 00:31:17,129
these devices request an authorization

652
00:31:12,360 --> 00:31:19,500
code with any pin value right get that

653
00:31:17,130 --> 00:31:21,960
authorization token back and then use

654
00:31:19,500 --> 00:31:23,670
that to unlock the device you can also

655
00:31:21,960 --> 00:31:27,690
do other cool stuff right like dim the

656
00:31:23,670 --> 00:31:29,490
LEDs if you want oh and there's also no

657
00:31:27,690 --> 00:31:31,740
remote update mechanism that we are

658
00:31:29,490 --> 00:31:35,630
aware of so this should work quite

659
00:31:31,740 --> 00:31:46,290
reliably with any device in this series

660
00:31:35,630 --> 00:31:50,160
so here's a demo video of this place so

661
00:31:46,290 --> 00:31:52,170
at this step we're just showing the pin

662
00:31:50,160 --> 00:31:56,070
code is set to 5 4 3 2 1

663
00:31:52,170 --> 00:31:58,590
we're running this unlock command sorry

664
00:31:56,070 --> 00:32:02,580
unlock scripts it's waiting for that

665
00:31:58,590 --> 00:32:04,110
advertisement for the safe once it gets

666
00:32:02,580 --> 00:32:06,929
that it's going to issue that

667
00:32:04,110 --> 00:32:11,219
authorization request get back that

668
00:32:06,930 --> 00:32:14,280
authorization token and it opened it and

669
00:32:11,220 --> 00:32:16,320
now we change the password just to show

670
00:32:14,280 --> 00:32:19,740
that you know you don't even need to

671
00:32:16,320 --> 00:32:22,830
know the password to open it so we

672
00:32:19,740 --> 00:32:25,560
change it to 1 2 3 4 5 we're gonna run

673
00:32:22,830 --> 00:32:26,850
the exact same script and it's gonna do

674
00:32:25,560 --> 00:32:33,060
the same process right it's just gonna

675
00:32:26,850 --> 00:32:34,649
wait for that advertisement so here it's

676
00:32:33,060 --> 00:32:39,300
scanning it's gonna wait for the

677
00:32:34,650 --> 00:32:41,730
advertisement once it hits that

678
00:32:39,300 --> 00:32:44,180
advertisement it's gonna issue that

679
00:32:41,730 --> 00:32:46,920
authorization request get the

680
00:32:44,180 --> 00:32:52,670
authorization token back and then unlock

681
00:32:46,920 --> 00:32:52,670
it right so same process doesn't matter

682
00:32:55,370 --> 00:33:04,010
all right with that I'm gonna hand it

683
00:32:57,230 --> 00:33:05,900
back to Austin for the next part all

684
00:33:04,010 --> 00:33:08,570
right so we've seen several failures

685
00:33:05,900 --> 00:33:10,970
that have been made in the design of

686
00:33:08,570 --> 00:33:16,610
this product so let's talk about some

687
00:33:10,970 --> 00:33:19,460
good practices for your products so some

688
00:33:16,610 --> 00:33:20,959
really simple things you can do or that

689
00:33:19,460 --> 00:33:23,420
would have helped here would be

690
00:33:20,960 --> 00:33:25,130
something like even hiding the

691
00:33:23,420 --> 00:33:28,100
manufacturer or name string and the

692
00:33:25,130 --> 00:33:30,110
Bluetooth advertisement so as it is here

693
00:33:28,100 --> 00:33:32,750
all of these safes are beaconing out hey

694
00:33:30,110 --> 00:33:35,629
I'm a vault X safe and now we know that

695
00:33:32,750 --> 00:33:37,400
all these vault X safes are vulnerable

696
00:33:35,630 --> 00:33:39,740
so if we ever see one of these

697
00:33:37,400 --> 00:33:42,470
advertisements we can just open it so

698
00:33:39,740 --> 00:33:43,850
you can imagine driving down a street or

699
00:33:42,470 --> 00:33:47,240
something and just popping all these

700
00:33:43,850 --> 00:33:50,360
open so if that wasn't broadcast out in

701
00:33:47,240 --> 00:33:52,309
the open then I we would at least have

702
00:33:50,360 --> 00:33:56,240
to do some kind of work to figure out if

703
00:33:52,309 --> 00:33:59,410
this device was one of these safes you

704
00:33:56,240 --> 00:34:03,260
want to use a software application

705
00:33:59,410 --> 00:34:04,880
obfuscation so again this applicant riod

706
00:34:03,260 --> 00:34:06,740
application we were just basically able

707
00:34:04,880 --> 00:34:09,980
to decompile and get back readable

708
00:34:06,740 --> 00:34:11,600
source something as simple as ProGuard

709
00:34:09,980 --> 00:34:13,929
or something else would have made it

710
00:34:11,600 --> 00:34:16,250
that much harder to get to that point

711
00:34:13,929 --> 00:34:18,470
and that's really what you want to do is

712
00:34:16,250 --> 00:34:20,719
make my job as an attacker harder so

713
00:34:18,469 --> 00:34:22,658
this isn't a guarantee of security but

714
00:34:20,719 --> 00:34:25,549
it just raises that bar that much higher

715
00:34:22,659 --> 00:34:27,530
and something that would have really

716
00:34:25,550 --> 00:34:30,110
helped here would have been implementing

717
00:34:27,530 --> 00:34:33,710
a pairing enable switch on the device so

718
00:34:30,110 --> 00:34:35,419
just allowing any user to pair to the

719
00:34:33,710 --> 00:34:36,350
safe at any time it's probably a pretty

720
00:34:35,418 --> 00:34:39,230
bad idea

721
00:34:36,350 --> 00:34:41,000
so if there is a key press sequence or

722
00:34:39,230 --> 00:34:43,280
an actual button on the safe that you

723
00:34:41,000 --> 00:34:45,409
had to hit to initiate this pairing at

724
00:34:43,280 --> 00:34:47,120
least the first time then that would at

725
00:34:45,409 --> 00:34:50,720
least require some kind of physical

726
00:34:47,120 --> 00:34:53,239
access to the device and you want to use

727
00:34:50,719 --> 00:34:55,399
the most secure bluetooth version and

728
00:34:53,239 --> 00:34:58,160
association modes available to you so

729
00:34:55,399 --> 00:35:00,259
you want to use out-of-band if you can

730
00:34:58,160 --> 00:35:03,410
it's the most secure you want to use

731
00:35:00,260 --> 00:35:04,910
bluetooth for point to secure mode and

732
00:35:03,410 --> 00:35:08,950
later with that diffie-hellman key

733
00:35:04,910 --> 00:35:11,578
exchange and possibly most importantly

734
00:35:08,950 --> 00:35:13,810
you can't think like these manufacturers

735
00:35:11,579 --> 00:35:15,099
you can't think that they can't break

736
00:35:13,810 --> 00:35:17,109
your encryption if you don't use any

737
00:35:15,099 --> 00:35:18,730
encryption you have to use that link

738
00:35:17,109 --> 00:35:24,750
layer encryption that the protocol

739
00:35:18,730 --> 00:35:29,260
allows you to so some other general tips

740
00:35:24,750 --> 00:35:32,290
you want to keep all of the data that is

741
00:35:29,260 --> 00:35:34,960
sensitive encrypted so even beyond the

742
00:35:32,290 --> 00:35:37,540
link level if they had taken that pin

743
00:35:34,960 --> 00:35:40,240
code and that get authorization field

744
00:35:37,540 --> 00:35:43,329
and maybe entangled it was some other

745
00:35:40,240 --> 00:35:46,270
user to find secret then it wouldn't

746
00:35:43,329 --> 00:35:49,869
have even mattered if we could have you

747
00:35:46,270 --> 00:35:52,349
know captured it you want to assume

748
00:35:49,869 --> 00:35:55,150
scenarios where you have a full physical

749
00:35:52,349 --> 00:35:56,530
compromise of the product so assume that

750
00:35:55,150 --> 00:35:58,960
somebody's going to be tearing apart

751
00:35:56,530 --> 00:36:00,820
your product pulling off the firmware

752
00:35:58,960 --> 00:36:02,349
assume that we're going to be taking

753
00:36:00,820 --> 00:36:05,530
your application and reverse engineering

754
00:36:02,349 --> 00:36:08,589
it because we are and you want to really

755
00:36:05,530 --> 00:36:10,480
keep in mind that the more avenues and

756
00:36:08,589 --> 00:36:12,040
communication pathways and things that

757
00:36:10,480 --> 00:36:13,960
you add to your applications

758
00:36:12,040 --> 00:36:15,759
that's just broadening the attack

759
00:36:13,960 --> 00:36:18,160
surface so it's making my job as an

760
00:36:15,760 --> 00:36:21,280
attacker easier the more things you add

761
00:36:18,160 --> 00:36:23,290
the harder it is to secure in the case

762
00:36:21,280 --> 00:36:25,599
here you want to use really strong

763
00:36:23,290 --> 00:36:30,310
credential policies so having that

764
00:36:25,599 --> 00:36:31,780
really short key space and having the

765
00:36:30,310 --> 00:36:34,060
really small key space allows an

766
00:36:31,780 --> 00:36:37,300
attacker to brute force the pin code in

767
00:36:34,060 --> 00:36:39,009
this case and even if you are going to

768
00:36:37,300 --> 00:36:41,530
use credential policies don't give a

769
00:36:39,010 --> 00:36:43,839
user an unlimited number of retries to

770
00:36:41,530 --> 00:36:47,589
get a get it right give them some kind

771
00:36:43,839 --> 00:36:48,819
of timeout something like that and you

772
00:36:47,589 --> 00:36:50,710
really need to understand the security

773
00:36:48,819 --> 00:36:52,660
implications of subcontracting out

774
00:36:50,710 --> 00:36:54,089
development so in this case when we

775
00:36:52,660 --> 00:36:55,960
started looking at the software

776
00:36:54,089 --> 00:36:59,109
application it became apparent to us

777
00:36:55,960 --> 00:37:02,579
that it was a Chinese company that

778
00:36:59,109 --> 00:37:06,578
developed the application and they

779
00:37:02,579 --> 00:37:09,250
primarily do I owe t subcontracting for

780
00:37:06,579 --> 00:37:11,079
various vendors and that's pretty common

781
00:37:09,250 --> 00:37:13,450
right not everyone has the in-house

782
00:37:11,079 --> 00:37:16,569
talent or resources necessary to build a

783
00:37:13,450 --> 00:37:18,578
product from end to end and so it's

784
00:37:16,569 --> 00:37:21,460
pretty common to subcontract out various

785
00:37:18,579 --> 00:37:22,870
pieces of the development and but you

786
00:37:21,460 --> 00:37:25,210
want to keep in mind that some

787
00:37:22,870 --> 00:37:27,069
these subcontractors don't necessarily

788
00:37:25,210 --> 00:37:29,410
have the same security model that you

789
00:37:27,070 --> 00:37:31,870
might so you need a way to really verify

790
00:37:29,410 --> 00:37:36,430
that they're implementing their pieces

791
00:37:31,870 --> 00:37:37,900
in a secure manner so some other things

792
00:37:36,430 --> 00:37:40,419
you can do for prevention and

793
00:37:37,900 --> 00:37:42,370
remediation so like dansa there's not

794
00:37:40,420 --> 00:37:44,260
really a remote firmware update

795
00:37:42,370 --> 00:37:46,930
mechanism for this you don't want to be

796
00:37:44,260 --> 00:37:48,070
caught in the scenario like this company

797
00:37:46,930 --> 00:37:53,680
where you have to put on your website

798
00:37:48,070 --> 00:37:56,200
that they're offering an upgrade if you

799
00:37:53,680 --> 00:37:58,120
mail your safe back to them so having

800
00:37:56,200 --> 00:38:02,470
user have to physically send the device

801
00:37:58,120 --> 00:38:04,120
back is probably pretty pretty bad some

802
00:38:02,470 --> 00:38:06,879
simple things you can do you can run a

803
00:38:04,120 --> 00:38:10,839
bug bounty program so give out a small

804
00:38:06,880 --> 00:38:14,890
cash award to various parties when they

805
00:38:10,840 --> 00:38:18,310
find bugs in your in your product that

806
00:38:14,890 --> 00:38:19,779
helps increase the scope and talent pool

807
00:38:18,310 --> 00:38:23,170
that you have looking at your product

808
00:38:19,780 --> 00:38:26,350
and usually those are parties they'll

809
00:38:23,170 --> 00:38:28,390
sign NDA's and various other things to

810
00:38:26,350 --> 00:38:30,400
protect your secrets

811
00:38:28,390 --> 00:38:31,960
you can also engage in professional

812
00:38:30,400 --> 00:38:34,750
security audits it's something that my

813
00:38:31,960 --> 00:38:38,410
company does we take a look at your

814
00:38:34,750 --> 00:38:40,060
product under NDA we analyze it and we

815
00:38:38,410 --> 00:38:42,250
come up with any possible ways we can

816
00:38:40,060 --> 00:38:44,830
find to break into it and we help you to

817
00:38:42,250 --> 00:38:45,880
secure these issues going forward and

818
00:38:44,830 --> 00:38:48,220
you want to keep an open communication

819
00:38:45,880 --> 00:38:50,230
pipeline and that's with both the

820
00:38:48,220 --> 00:38:53,169
security community and with your

821
00:38:50,230 --> 00:38:54,820
consumers so if you do have an issue or

822
00:38:53,170 --> 00:39:00,610
a bug that comes up don't deny it

823
00:38:54,820 --> 00:39:04,660
keep be open about it and you want to be

824
00:39:00,610 --> 00:39:06,610
as open as possible the easiest thing

825
00:39:04,660 --> 00:39:08,830
you can really do here though is start a

826
00:39:06,610 --> 00:39:11,170
responsible disclosure program and that

827
00:39:08,830 --> 00:39:16,290
can be as simple as having security at

828
00:39:11,170 --> 00:39:19,510
your domain calm and just receiving

829
00:39:16,290 --> 00:39:26,259
disclosures when researcher finds your

830
00:39:19,510 --> 00:39:28,900
vulnerability so that's really all we

831
00:39:26,260 --> 00:39:30,520
have here here are email addresses you

832
00:39:28,900 --> 00:39:32,470
can feel free to contact us if you want

833
00:39:30,520 --> 00:39:34,180
to talk about product security or

834
00:39:32,470 --> 00:39:35,209
embedded system security or if you want

835
00:39:34,180 --> 00:39:37,520
to hear more about the same

836
00:39:35,210 --> 00:39:39,369
if we also have a blog post written up

837
00:39:37,520 --> 00:39:42,940
about this safe that you can check out

838
00:39:39,369 --> 00:39:42,940
addresses also here

