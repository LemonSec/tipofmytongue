1
00:00:00,060 --> 00:00:02,760
all right hello everyone uh today we're

2
00:00:02,760 --> 00:00:04,500
going to be present presenting Sisyphus

3
00:00:04,500 --> 00:00:07,200
and the cve feed and talking about how

4
00:00:07,200 --> 00:00:08,460
we worked on automating our

5
00:00:08,460 --> 00:00:10,620
vulnerability Management program

6
00:00:10,620 --> 00:00:13,019
a quick legal disclaimer um we have

7
00:00:13,019 --> 00:00:14,280
pretty strict rules of what we're

8
00:00:14,280 --> 00:00:16,800
allowed to share and what we can't uh so

9
00:00:16,800 --> 00:00:18,119
while we've tried to be as clear as

10
00:00:18,119 --> 00:00:19,800
possible there'll be some places where

11
00:00:19,800 --> 00:00:23,640
we have to be a bit vague on the data

12
00:00:23,640 --> 00:00:26,640
all right so quick introduction time my

13
00:00:26,640 --> 00:00:28,500
name is kazia senior software engineer

14
00:00:28,500 --> 00:00:31,260
at Airbnb under information security

15
00:00:31,260 --> 00:00:34,620
team I've been at Airbnb for almost six

16
00:00:34,620 --> 00:00:37,500
years now I describe myself as more of a

17
00:00:37,500 --> 00:00:40,200
builder than a breaker so thank you to

18
00:00:40,200 --> 00:00:42,300
all the hackers out there who keep my

19
00:00:42,300 --> 00:00:43,980
job interesting

20
00:00:43,980 --> 00:00:47,100
and fun fact about me is that I was

21
00:00:47,100 --> 00:00:51,000
actually born in Osaka but my parents

22
00:00:51,000 --> 00:00:52,800
moved away when I was two so this is the

23
00:00:52,800 --> 00:00:55,020
first time I've been back since then so

24
00:00:55,020 --> 00:00:57,780
it's been really exciting to be here

25
00:00:57,780 --> 00:01:00,780
hi I'm Katya mashar I'm an engineering

26
00:01:00,780 --> 00:01:03,420
manager at Airbnb I've been with Airbnb

27
00:01:03,420 --> 00:01:05,700
for over four years started as an

28
00:01:05,700 --> 00:01:07,799
engineer and now I'm an engineering

29
00:01:07,799 --> 00:01:10,979
manager but yeah one fun fact about me

30
00:01:10,979 --> 00:01:14,460
my first time in Tokyo big thank you to

31
00:01:14,460 --> 00:01:16,439
the code blue staff who allowed me to

32
00:01:16,439 --> 00:01:18,119
change my picture very last minute so I

33
00:01:18,119 --> 00:01:20,820
went to team lab if you have not been to

34
00:01:20,820 --> 00:01:23,640
team lab please go it's such an amazing

35
00:01:23,640 --> 00:01:25,259
experience here at Tokyo so that's where

36
00:01:25,259 --> 00:01:26,759
I took the picture and they allowed me

37
00:01:26,759 --> 00:01:28,860
to update it so thanks again and yeah

38
00:01:28,860 --> 00:01:31,259
let's keep it going

39
00:01:31,259 --> 00:01:33,840
all right so full disclaimer if you're

40
00:01:33,840 --> 00:01:35,880
here to learn about Greek mythology that

41
00:01:35,880 --> 00:01:39,320
is not the topic of this talk

42
00:01:40,560 --> 00:01:42,540
um I'll give a quick uh summary of The

43
00:01:42,540 --> 00:01:44,400
Myth of Sisyphus if you aren't familiar

44
00:01:44,400 --> 00:01:47,040
with it so it's from Greek mythology

45
00:01:47,040 --> 00:01:49,740
it's about a mortal named Sisyphus who

46
00:01:49,740 --> 00:01:52,200
angered the gods by his General trickery

47
00:01:52,200 --> 00:01:55,619
and trying to cheat death so the gods do

48
00:01:55,619 --> 00:01:57,600
manage to punish him and what they force

49
00:01:57,600 --> 00:02:00,119
him to do is essentially roll a boulder

50
00:02:00,119 --> 00:02:02,060
up the hill for eternity

51
00:02:02,060 --> 00:02:04,920
and once he manages to push the boulder

52
00:02:04,920 --> 00:02:06,780
all the way up the hill it immediately

53
00:02:06,780 --> 00:02:09,060
rolls back down and he has to start the

54
00:02:09,060 --> 00:02:11,580
task over again just like a never-ending

55
00:02:11,580 --> 00:02:14,220
problem he has to repeat for eternity

56
00:02:14,220 --> 00:02:17,480
so if you work in information security

57
00:02:17,480 --> 00:02:20,520
that feeling May resonate a little bit

58
00:02:20,520 --> 00:02:21,959
with you

59
00:02:21,959 --> 00:02:24,720
we may not be pushing a large Rock up

60
00:02:24,720 --> 00:02:27,000
the hill for eternity but it can

61
00:02:27,000 --> 00:02:28,500
definitely feel like we're fighting a

62
00:02:28,500 --> 00:02:30,480
losing battle against never-ending

63
00:02:30,480 --> 00:02:33,420
stream of cves

64
00:02:33,420 --> 00:02:36,239
so before we talk about how we automated

65
00:02:36,239 --> 00:02:38,700
vulnerability management we'll talk

66
00:02:38,700 --> 00:02:42,120
about the fundamentals first

67
00:02:42,120 --> 00:02:45,300
so we all know there is no such thing as

68
00:02:45,300 --> 00:02:47,940
software that is clean and has no

69
00:02:47,940 --> 00:02:49,800
vulnerabilities that's the dream unless

70
00:02:49,800 --> 00:02:51,420
you remove your code base but that's

71
00:02:51,420 --> 00:02:54,180
obviously not ideal we want to talk

72
00:02:54,180 --> 00:02:56,400
about how you should Implement so design

73
00:02:56,400 --> 00:02:58,260
and implement the process that can

74
00:02:58,260 --> 00:03:00,599
effectively efficiently meet the

75
00:03:00,599 --> 00:03:03,599
vulnerability life cycle requirements

76
00:03:03,599 --> 00:03:06,120
so before we um so if you're not

77
00:03:06,120 --> 00:03:07,860
familiar with the vulnerability life

78
00:03:07,860 --> 00:03:10,319
cycle first of all it's very common for

79
00:03:10,319 --> 00:03:12,720
a company you find a vulnerability you

80
00:03:12,720 --> 00:03:14,459
detect it this can happen through pen

81
00:03:14,459 --> 00:03:17,340
testing vulnerability scans but Ponte

82
00:03:17,340 --> 00:03:20,040
you name it exactly

83
00:03:20,040 --> 00:03:22,860
and the next step is where you assess

84
00:03:22,860 --> 00:03:25,140
the vulnerability how many of you have

85
00:03:25,140 --> 00:03:26,640
seen vulnerability reports that weren't

86
00:03:26,640 --> 00:03:30,060
applicable can be very noisy so the

87
00:03:30,060 --> 00:03:31,739
third step of a vulnerability life cycle

88
00:03:31,739 --> 00:03:34,620
is when you report on known attack

89
00:03:34,620 --> 00:03:38,340
surface and share metrics and the fourth

90
00:03:38,340 --> 00:03:39,720
step here which we consider very

91
00:03:39,720 --> 00:03:42,239
critical is remediating and preventing

92
00:03:42,239 --> 00:03:45,840
the vulnerability in your environment

93
00:03:45,840 --> 00:03:49,620
so what are our objectives when we

94
00:03:49,620 --> 00:03:52,260
started thinking about Automation in our

95
00:03:52,260 --> 00:03:54,540
organization at Airbnb

96
00:03:54,540 --> 00:03:58,200
first we are a cloud-based company we

97
00:03:58,200 --> 00:04:00,480
use AWS which means

98
00:04:00,480 --> 00:04:02,819
um in the cloud you can expand and

99
00:04:02,819 --> 00:04:05,159
change your environment very quickly so

100
00:04:05,159 --> 00:04:07,560
our objective here was to support the

101
00:04:07,560 --> 00:04:09,299
changing environment as quickly as

102
00:04:09,299 --> 00:04:11,040
possible and as you all know as we

103
00:04:11,040 --> 00:04:13,019
expand that also means your attack

104
00:04:13,019 --> 00:04:15,299
surface increases so you wanted to build

105
00:04:15,299 --> 00:04:16,918
something that can keep up with those

106
00:04:16,918 --> 00:04:19,199
changes we also wanted to make sure that

107
00:04:19,199 --> 00:04:21,120
we just don't find vulnerabilities but

108
00:04:21,120 --> 00:04:24,240
we also quickly remediate them but also

109
00:04:24,240 --> 00:04:25,979
verify that the vulnerability has

110
00:04:25,979 --> 00:04:27,840
actually been fixed

111
00:04:27,840 --> 00:04:29,759
we also wanted to make sure that we

112
00:04:29,759 --> 00:04:31,500
built something that can help us address

113
00:04:31,500 --> 00:04:34,020
and prioritize vulnerabilities all of

114
00:04:34,020 --> 00:04:36,360
you are familiar there are hundreds of

115
00:04:36,360 --> 00:04:37,919
vulnerabilities that get released every

116
00:04:37,919 --> 00:04:40,259
day how do you keep up with that and how

117
00:04:40,259 --> 00:04:42,000
do you prioritize and focus on the

118
00:04:42,000 --> 00:04:44,880
actual risk in your environment

119
00:04:44,880 --> 00:04:46,560
another objective of ours was

120
00:04:46,560 --> 00:04:48,000
understanding the root cause of

121
00:04:48,000 --> 00:04:50,220
vulnerability how did the vulnerability

122
00:04:50,220 --> 00:04:52,680
get integrated or implemented in the

123
00:04:52,680 --> 00:04:54,840
first place so understanding the root

124
00:04:54,840 --> 00:04:56,520
cause of a vulnerability was incredibly

125
00:04:56,520 --> 00:04:58,020
important to us

126
00:04:58,020 --> 00:04:59,820
we also wanted to build something that

127
00:04:59,820 --> 00:05:02,100
is vendor agnostic regardless of which

128
00:05:02,100 --> 00:05:04,620
tool you use your infrastructure your

129
00:05:04,620 --> 00:05:06,300
vulnerability Management program should

130
00:05:06,300 --> 00:05:09,180
be robust regardless of any vendor

131
00:05:09,180 --> 00:05:10,440
limitations that you have in your

132
00:05:10,440 --> 00:05:12,720
environment

133
00:05:12,720 --> 00:05:15,060
as you can tell I was not hired as a

134
00:05:15,060 --> 00:05:17,639
graphic designer for Airbnb but I wanted

135
00:05:17,639 --> 00:05:20,340
to highlight quickly that

136
00:05:20,340 --> 00:05:21,840
um what the traditional vulnerability

137
00:05:21,840 --> 00:05:24,360
Management program is so most of the

138
00:05:24,360 --> 00:05:27,060
companies have a bunch of vulnerability

139
00:05:27,060 --> 00:05:29,520
sources like for instance threat Intel

140
00:05:29,520 --> 00:05:31,740
wound scanners bug Bounty security

141
00:05:31,740 --> 00:05:34,800
tweets and most of the time you have one

142
00:05:34,800 --> 00:05:37,259
security engineers and security resource

143
00:05:37,259 --> 00:05:40,139
that has to go through this entire noise

144
00:05:40,139 --> 00:05:42,960
and then forwards the vulnerabilities to

145
00:05:42,960 --> 00:05:45,360
the remediation owner that's obviously

146
00:05:45,360 --> 00:05:47,340
not ideal because you're a bottleneck

147
00:05:47,340 --> 00:05:49,199
and it's taken away from critical

148
00:05:49,199 --> 00:05:51,780
vulnerability or mediation time if this

149
00:05:51,780 --> 00:05:55,400
process is operational and manual

150
00:05:55,440 --> 00:05:58,680
so what challenges did we face before we

151
00:05:58,680 --> 00:06:02,479
when we started building the automation

152
00:06:02,639 --> 00:06:05,720
risk assessment

153
00:06:05,759 --> 00:06:08,039
if you're familiar with vulnerability

154
00:06:08,039 --> 00:06:10,800
advisories each vulnerability has a CVSs

155
00:06:10,800 --> 00:06:13,340
score or a severity associated with it

156
00:06:13,340 --> 00:06:16,440
and not all of them necessarily are

157
00:06:16,440 --> 00:06:18,419
always applicable to your environment so

158
00:06:18,419 --> 00:06:20,960
how do you make sure that it's

159
00:06:20,960 --> 00:06:23,100
contextualized so most of these are very

160
00:06:23,100 --> 00:06:25,160
security advisories are very vague

161
00:06:25,160 --> 00:06:28,259
inflated severity ratings or the

162
00:06:28,259 --> 00:06:31,380
exploitation is incredibly hard and

163
00:06:31,380 --> 00:06:34,139
um or it just misses context that is

164
00:06:34,139 --> 00:06:36,199
relevant for your environment

165
00:06:36,199 --> 00:06:39,840
so which brings us to the next point

166
00:06:39,840 --> 00:06:42,240
so here's a good way I like to think

167
00:06:42,240 --> 00:06:44,880
about dealing with inaccurate severity

168
00:06:44,880 --> 00:06:48,419
scores from your many scanners and

169
00:06:48,419 --> 00:06:51,120
vulnerability sources so this is the

170
00:06:51,120 --> 00:06:52,919
Winchester Mystery House at San Jose

171
00:06:52,919 --> 00:06:55,560
California it's famous for having been

172
00:06:55,560 --> 00:06:58,259
built by an extra eccentric woman who

173
00:06:58,259 --> 00:07:00,000
put a lot of weird features into the

174
00:07:00,000 --> 00:07:00,780
house

175
00:07:00,780 --> 00:07:02,520
for example

176
00:07:02,520 --> 00:07:05,639
this door on the second floor that just

177
00:07:05,639 --> 00:07:08,639
opens out to nowhere

178
00:07:08,639 --> 00:07:11,639
so let's see here we are at work and

179
00:07:11,639 --> 00:07:13,560
then we get a scanner telling us there's

180
00:07:13,560 --> 00:07:15,720
a critical vulnerability address just

181
00:07:15,720 --> 00:07:18,060
dropped go fix it admit it immediately

182
00:07:18,060 --> 00:07:20,699
it's an Open Door

183
00:07:20,699 --> 00:07:23,400
but then we take a step back and look at

184
00:07:23,400 --> 00:07:25,680
it in the context of our infrastructure

185
00:07:25,680 --> 00:07:28,979
yes it is an open door but it's on the

186
00:07:28,979 --> 00:07:31,319
second floor there's not exactly an easy

187
00:07:31,319 --> 00:07:33,060
way for someone to climb up there

188
00:07:33,060 --> 00:07:35,099
someone would probably have to bring a

189
00:07:35,099 --> 00:07:37,319
ladder and with our existing mitigations

190
00:07:37,319 --> 00:07:39,060
we would probably notice someone

191
00:07:39,060 --> 00:07:41,220
dragging a ladder across our property

192
00:07:41,220 --> 00:07:43,620
before they even make it there

193
00:07:43,620 --> 00:07:45,840
so this critical vulnerability when

194
00:07:45,840 --> 00:07:48,419
looked at with more internal context is

195
00:07:48,419 --> 00:07:50,220
probably more like a medium severity

196
00:07:50,220 --> 00:07:52,440
doesn't mean it's not a risk but it's

197
00:07:52,440 --> 00:07:54,840
not as high a risk as the scanner tells

198
00:07:54,840 --> 00:07:57,599
us and again this changes so much for

199
00:07:57,599 --> 00:07:59,639
company to company in another company

200
00:07:59,639 --> 00:08:02,340
that door could be on the first floor so

201
00:08:02,340 --> 00:08:04,080
that would be a true critical in that

202
00:08:04,080 --> 00:08:06,479
case but that means everyone you keep

203
00:08:06,479 --> 00:08:08,160
spending time over and over again

204
00:08:08,160 --> 00:08:10,800
filtering through these large feeds

205
00:08:10,800 --> 00:08:13,020
trying to decide which ones are true

206
00:08:13,020 --> 00:08:15,060
criticals or which ones are actually

207
00:08:15,060 --> 00:08:17,340
lower risk in your environment and if

208
00:08:17,340 --> 00:08:18,960
this is happening constantly with

209
00:08:18,960 --> 00:08:21,180
never-ending cve feeds it gets very

210
00:08:21,180 --> 00:08:23,840
overwhelming

211
00:08:24,120 --> 00:08:26,160
another challenge that we faced is

212
00:08:26,160 --> 00:08:28,919
inflexible vendor features

213
00:08:28,919 --> 00:08:30,840
all of you probably have worked with

214
00:08:30,840 --> 00:08:32,219
vendors before there are many great

215
00:08:32,219 --> 00:08:34,440
vendors out there but most of them

216
00:08:34,440 --> 00:08:37,080
require some sort of customization for

217
00:08:37,080 --> 00:08:39,179
instance they tell you we have

218
00:08:39,179 --> 00:08:41,279
um reporting pipelines that you can use

219
00:08:41,279 --> 00:08:43,440
but if you look into it you say don't

220
00:08:43,440 --> 00:08:45,120
allow you to change the severity rating

221
00:08:45,120 --> 00:08:48,360
which again introduces operational work

222
00:08:48,360 --> 00:08:49,800
so

223
00:08:49,800 --> 00:08:51,480
um which brings us to the next point

224
00:08:51,480 --> 00:08:54,060
every time you introduce a new vendor in

225
00:08:54,060 --> 00:08:57,360
your environment it means you have to

226
00:08:57,360 --> 00:08:59,459
create operational work as well to

227
00:08:59,459 --> 00:09:01,440
customize it to your environment and one

228
00:09:01,440 --> 00:09:02,700
thing that I also want to highlight is

229
00:09:02,700 --> 00:09:06,120
every time you implement a new vendor in

230
00:09:06,120 --> 00:09:07,620
your environment you increase your

231
00:09:07,620 --> 00:09:09,839
attack surface so it's not just

232
00:09:09,839 --> 00:09:11,459
operational work it's also from a

233
00:09:11,459 --> 00:09:12,959
security perspective something that you

234
00:09:12,959 --> 00:09:14,580
should keep in mind and something that

235
00:09:14,580 --> 00:09:16,860
we had a challenge with also

236
00:09:16,860 --> 00:09:18,720
accountability how many of you or

237
00:09:18,720 --> 00:09:20,760
probably know that security is maybe not

238
00:09:20,760 --> 00:09:22,260
always the highest priority in the

239
00:09:22,260 --> 00:09:24,600
business so accountability was

240
00:09:24,600 --> 00:09:26,279
definitely a challenge for us and how do

241
00:09:26,279 --> 00:09:27,839
you make sure that people are engaged

242
00:09:27,839 --> 00:09:29,940
and responsible for vulnerabilities that

243
00:09:29,940 --> 00:09:32,480
they introduce

244
00:09:33,000 --> 00:09:35,700
all right so with those challenges and

245
00:09:35,700 --> 00:09:38,580
objectives in mind our team tries to

246
00:09:38,580 --> 00:09:40,440
stick to some general guiding principles

247
00:09:40,440 --> 00:09:42,899
these aren't set in stone there's always

248
00:09:42,899 --> 00:09:44,880
exceptions and we definitely do not

249
00:09:44,880 --> 00:09:46,860
accomplish them immediately but it's

250
00:09:46,860 --> 00:09:48,779
kind of a North star we want to always

251
00:09:48,779 --> 00:09:51,120
be heading in

252
00:09:51,120 --> 00:09:53,720
all right so as mentioned earlier

253
00:09:53,720 --> 00:09:56,279
default severity scores can be

254
00:09:56,279 --> 00:09:58,740
inaccurate without context creating what

255
00:09:58,740 --> 00:10:01,500
I'll call here a false positive to be

256
00:10:01,500 --> 00:10:03,180
clear I'm not saying there isn't risk

257
00:10:03,180 --> 00:10:05,339
associated or it's a fake vulnerability

258
00:10:05,339 --> 00:10:07,980
but rather it's a false positive in that

259
00:10:07,980 --> 00:10:10,800
it's not the severity rating provided to

260
00:10:10,800 --> 00:10:13,680
us it's still important but maybe it's

261
00:10:13,680 --> 00:10:15,240
not the thing that needs to be fixed

262
00:10:15,240 --> 00:10:18,600
first so just relying on default scores

263
00:10:18,600 --> 00:10:21,180
like CVSs scores is not actually

264
00:10:21,180 --> 00:10:23,100
sufficient to automate the risk and

265
00:10:23,100 --> 00:10:25,200
still requires human intervention to

266
00:10:25,200 --> 00:10:26,399
parse through

267
00:10:26,399 --> 00:10:28,500
now it can be really tempting to want to

268
00:10:28,500 --> 00:10:29,880
catch every single potential

269
00:10:29,880 --> 00:10:32,040
vulnerability but just might as well

270
00:10:32,040 --> 00:10:33,600
just look through everything provided

271
00:10:33,600 --> 00:10:36,060
and the intention is good it's better

272
00:10:36,060 --> 00:10:38,220
safe than sorry

273
00:10:38,220 --> 00:10:40,560
um I'll call this kind of call this the

274
00:10:40,560 --> 00:10:43,620
maximizing true positive solution

275
00:10:43,620 --> 00:10:46,500
but this is a misconception humans are

276
00:10:46,500 --> 00:10:48,300
not going to catch 100 of

277
00:10:48,300 --> 00:10:50,760
vulnerabilities there's alert fatigue

278
00:10:50,760 --> 00:10:55,200
people misread or misunderstand things a

279
00:10:55,200 --> 00:10:57,120
major security principle I'm sure we all

280
00:10:57,120 --> 00:10:59,160
familiar with humans are the weak Link

281
00:10:59,160 --> 00:11:00,600
in a process

282
00:11:00,600 --> 00:11:02,820
and we can't also forget that

283
00:11:02,820 --> 00:11:05,399
undisclosed vulnerabilities exist there

284
00:11:05,399 --> 00:11:07,079
will be vulnerabilities in our software

285
00:11:07,079 --> 00:11:09,079
that a scanner will not tell us about

286
00:11:09,079 --> 00:11:13,200
and so relying on trying to have a

287
00:11:13,200 --> 00:11:15,360
manual person go through everything is

288
00:11:15,360 --> 00:11:17,880
not going to catch everything and at the

289
00:11:17,880 --> 00:11:19,980
same time creates all these challenges

290
00:11:19,980 --> 00:11:22,019
we had mentioned in the beginning

291
00:11:22,019 --> 00:11:25,800
and let's be real a lot of the time like

292
00:11:25,800 --> 00:11:27,480
a lot of the most severe vulnerabilities

293
00:11:27,480 --> 00:11:29,220
are dropped by an anonymous Twitter

294
00:11:29,220 --> 00:11:30,839
account

295
00:11:30,839 --> 00:11:33,720
so our biggest goal here was to create a

296
00:11:33,720 --> 00:11:35,519
system that does not rely on human

297
00:11:35,519 --> 00:11:38,339
intervention to triage risk we wanted to

298
00:11:38,339 --> 00:11:40,320
focus on cutting the human element out

299
00:11:40,320 --> 00:11:43,019
as much as possible by automating the

300
00:11:43,019 --> 00:11:45,540
risk assessment process to ruthlessly

301
00:11:45,540 --> 00:11:48,120
minimize these false positives as much

302
00:11:48,120 --> 00:11:50,519
as possible rather than maximize the

303
00:11:50,519 --> 00:11:51,959
true positives

304
00:11:51,959 --> 00:11:53,640
and so this can make people feel really

305
00:11:53,640 --> 00:11:55,500
nervous because you know what if we

306
00:11:55,500 --> 00:11:58,200
missed something however as I keep

307
00:11:58,200 --> 00:12:00,180
hammering down there is nothing that is

308
00:12:00,180 --> 00:12:02,279
going to catch every like vulnerability

309
00:12:02,279 --> 00:12:04,680
the boulder is not going to stay on top

310
00:12:04,680 --> 00:12:07,500
of the hill and so since that's

311
00:12:07,500 --> 00:12:09,779
impossible it's much better for us to be

312
00:12:09,779 --> 00:12:12,360
prioritizing things like remediation

313
00:12:12,360 --> 00:12:14,760
speed so that we get vulnerabilities out

314
00:12:14,760 --> 00:12:17,640
of our infrastructure faster because the

315
00:12:17,640 --> 00:12:19,740
longer you spend on manual triage the

316
00:12:19,740 --> 00:12:22,320
longer a vulnerability is in your system

317
00:12:22,320 --> 00:12:24,660
so okay this brings us to our next Point

318
00:12:24,660 --> 00:12:26,579
accepting this principle means that

319
00:12:26,579 --> 00:12:28,140
we're accepting an imperfect detection

320
00:12:28,140 --> 00:12:30,660
strategy that means things will slip

321
00:12:30,660 --> 00:12:33,060
through the cracks we also can't ignore

322
00:12:33,060 --> 00:12:34,560
those what should we do about that

323
00:12:34,560 --> 00:12:36,800
problem

324
00:12:37,079 --> 00:12:39,839
so what we want to highlight is here

325
00:12:39,839 --> 00:12:42,600
pair detection was preventative measures

326
00:12:42,600 --> 00:12:44,579
um it is definitely important to balance

327
00:12:44,579 --> 00:12:46,920
the risk by making sure that you block

328
00:12:46,920 --> 00:12:48,540
vulnerabilities from being introduced in

329
00:12:48,540 --> 00:12:50,700
the first place do not rely on detection

330
00:12:50,700 --> 00:12:53,100
if you wait for a vulnerability report

331
00:12:53,100 --> 00:12:54,839
in order to act and Harden your

332
00:12:54,839 --> 00:12:56,880
environment that's obviously that's not

333
00:12:56,880 --> 00:13:00,000
gonna be scalable for you also you

334
00:13:00,000 --> 00:13:01,620
should be thinking long term versus

335
00:13:01,620 --> 00:13:04,800
tactical and you can achieve that by

336
00:13:04,800 --> 00:13:08,100
being proactive versus reactive for

337
00:13:08,100 --> 00:13:10,380
instance introduce a standard deployment

338
00:13:10,380 --> 00:13:12,120
pipeline in your environment make sure

339
00:13:12,120 --> 00:13:15,060
that people follow a standard deployment

340
00:13:15,060 --> 00:13:18,480
process see I checks make sure that when

341
00:13:18,480 --> 00:13:21,420
you deploy code especially packages that

342
00:13:21,420 --> 00:13:23,459
they are flagged if they're insecure so

343
00:13:23,459 --> 00:13:24,899
that that you stop the vulnerability

344
00:13:24,899 --> 00:13:26,600
from being introduced in the first place

345
00:13:26,600 --> 00:13:30,000
also image authoritation don't wait for

346
00:13:30,000 --> 00:13:32,279
vulnerability reports um especially

347
00:13:32,279 --> 00:13:34,920
again as kazia mentioned not every

348
00:13:34,920 --> 00:13:37,079
vulnerability has been disclosed there

349
00:13:37,079 --> 00:13:38,820
there are many vulnerabilities out there

350
00:13:38,820 --> 00:13:40,440
that we don't hear about until three

351
00:13:40,440 --> 00:13:42,839
four months later so again make sure

352
00:13:42,839 --> 00:13:44,820
that you're proactive and constantly

353
00:13:44,820 --> 00:13:47,399
rotate images and if all of these steps

354
00:13:47,399 --> 00:13:48,600
are challenging for the environment

355
00:13:48,600 --> 00:13:50,399
there is always the traditional approach

356
00:13:50,399 --> 00:13:51,660
where you can at least have a patch

357
00:13:51,660 --> 00:13:53,639
Cadence to address the vulnerabilities

358
00:13:53,639 --> 00:13:57,440
that may are in your environment

359
00:13:57,899 --> 00:13:59,519
we also can't neglect building

360
00:13:59,519 --> 00:14:01,740
relationships all the Automation in the

361
00:14:01,740 --> 00:14:03,720
world won't necessarily be helpful if

362
00:14:03,720 --> 00:14:05,399
you're antagonizing other engineering

363
00:14:05,399 --> 00:14:08,279
teams in your business for example it's

364
00:14:08,279 --> 00:14:10,200
really important to balance security and

365
00:14:10,200 --> 00:14:12,660
developer productivity trade-offs are

366
00:14:12,660 --> 00:14:14,040
important we don't want to be

367
00:14:14,040 --> 00:14:16,019
sacrificing the effectiveness of our

368
00:14:16,019 --> 00:14:18,300
engineering teams for a low priority

369
00:14:18,300 --> 00:14:21,120
security request that may not need to be

370
00:14:21,120 --> 00:14:23,700
fixed immediately within reason we're

371
00:14:23,700 --> 00:14:26,339
not saying compromise security but we're

372
00:14:26,339 --> 00:14:27,839
saying that's really important to

373
00:14:27,839 --> 00:14:30,480
prioritize what you fix and may also

374
00:14:30,480 --> 00:14:31,920
think of Creative Solutions that can

375
00:14:31,920 --> 00:14:34,260
work with for everyone for example it

376
00:14:34,260 --> 00:14:36,000
can be really helpful to work with other

377
00:14:36,000 --> 00:14:39,120
teams to pair Security benefits with

378
00:14:39,120 --> 00:14:42,480
their engineering goals so we benefit by

379
00:14:42,480 --> 00:14:44,399
integrating security while another

380
00:14:44,399 --> 00:14:47,880
engineering interior team gets to deploy

381
00:14:47,880 --> 00:14:49,860
or work on something that's within their

382
00:14:49,860 --> 00:14:52,560
scope so we've made the mistake in the

383
00:14:52,560 --> 00:14:54,839
past of being too top down but it's

384
00:14:54,839 --> 00:14:56,579
never been as effective as when we've

385
00:14:56,579 --> 00:14:58,199
treated engineering teams as our

386
00:14:58,199 --> 00:15:00,600
partners sought their input and tried to

387
00:15:00,600 --> 00:15:03,920
make it mutually beneficial

388
00:15:04,260 --> 00:15:06,300
thank you so again we mentioned that

389
00:15:06,300 --> 00:15:07,920
accountability was a challenge so how

390
00:15:07,920 --> 00:15:10,980
can you as an organization deal with

391
00:15:10,980 --> 00:15:14,279
this problem the way we deal with

392
00:15:14,279 --> 00:15:17,399
accountability is set SLA service level

393
00:15:17,399 --> 00:15:20,279
agreements based on risk so for instance

394
00:15:20,279 --> 00:15:22,620
set expectations when a remediation

395
00:15:22,620 --> 00:15:24,779
owner should be addressed a

396
00:15:24,779 --> 00:15:27,180
vulnerability and also allow extensions

397
00:15:27,180 --> 00:15:28,500
if you have mitigations in your

398
00:15:28,500 --> 00:15:30,600
environments there is no need to focus

399
00:15:30,600 --> 00:15:32,820
on the wrong risk focus on the critical

400
00:15:32,820 --> 00:15:35,699
risk and allow for lower risk SLA

401
00:15:35,699 --> 00:15:37,079
extensions to happen

402
00:15:37,079 --> 00:15:40,019
also especially for organizations make

403
00:15:40,019 --> 00:15:41,699
sure that security metrics are part of

404
00:15:41,699 --> 00:15:43,800
business metrics how many times do you

405
00:15:43,800 --> 00:15:45,320
hear an organizations talk about

406
00:15:45,320 --> 00:15:48,480
downtime but security metrics should be

407
00:15:48,480 --> 00:15:49,860
also part of your business metrics

408
00:15:49,860 --> 00:15:52,440
because security metrics also have a

409
00:15:52,440 --> 00:15:54,540
picture about your business and also

410
00:15:54,540 --> 00:15:57,740
give you a picture about your posture

411
00:15:57,740 --> 00:16:01,920
also invest in asset ownership again the

412
00:16:01,920 --> 00:16:05,459
quicker you find a remediation owner the

413
00:16:05,459 --> 00:16:08,399
quicker the remediation will happen most

414
00:16:08,399 --> 00:16:10,680
of the time we don't think of assets

415
00:16:10,680 --> 00:16:13,139
ownership as a security problem but if

416
00:16:13,139 --> 00:16:14,760
you do not know who's supposed to fix

417
00:16:14,760 --> 00:16:16,620
your vulnerability that's a lost battle

418
00:16:16,620 --> 00:16:18,600
you know that the vulnerabilities your

419
00:16:18,600 --> 00:16:20,579
environment and you are not taking quick

420
00:16:20,579 --> 00:16:24,739
enough steps to actually remediate it

421
00:16:25,380 --> 00:16:27,660
all right so with that in mind let's go

422
00:16:27,660 --> 00:16:29,459
into the system we built to manage our

423
00:16:29,459 --> 00:16:32,060
vulnerabilities

424
00:16:33,779 --> 00:16:36,420
vulnerabilities

425
00:16:36,420 --> 00:16:38,940
so depending on your setup you may have

426
00:16:38,940 --> 00:16:41,519
any number of scanners they probably

427
00:16:41,519 --> 00:16:43,320
have different formats different levels

428
00:16:43,320 --> 00:16:46,380
of information provide provided they're

429
00:16:46,380 --> 00:16:48,240
also siled they don't know about each

430
00:16:48,240 --> 00:16:49,620
other so you have to be looking at

431
00:16:49,620 --> 00:16:50,880
different locations for different

432
00:16:50,880 --> 00:16:53,519
vulnerability reports and as mentioned

433
00:16:53,519 --> 00:16:55,920
earlier while some do have some limited

434
00:16:55,920 --> 00:16:58,079
automation features it doesn't usually

435
00:16:58,079 --> 00:17:00,420
allow for much customization

436
00:17:00,420 --> 00:17:02,699
so instead of just using a scanner out

437
00:17:02,699 --> 00:17:05,880
of the box what we do is import the data

438
00:17:05,880 --> 00:17:08,699
standardize it centralize it in one

439
00:17:08,699 --> 00:17:10,980
place and so this lets us do things like

440
00:17:10,980 --> 00:17:13,740
deduplicate repeated reports from

441
00:17:13,740 --> 00:17:15,079
different scanners

442
00:17:15,079 --> 00:17:18,299
we also track every unique vulnerability

443
00:17:18,299 --> 00:17:21,720
with a uuid and this is a key part of

444
00:17:21,720 --> 00:17:23,880
how we track a vulnerability through its

445
00:17:23,880 --> 00:17:24,900
life cycle

446
00:17:24,900 --> 00:17:27,299
our general thought is that a uuid

447
00:17:27,299 --> 00:17:29,460
should represent an asset and a

448
00:17:29,460 --> 00:17:31,559
vulnerability and it's even better if

449
00:17:31,559 --> 00:17:33,600
you can connect the uuid to the

450
00:17:33,600 --> 00:17:36,059
associated fix

451
00:17:36,059 --> 00:17:38,820
um so for example let's say you have a

452
00:17:38,820 --> 00:17:41,520
scanner that says in cluster a there are

453
00:17:41,520 --> 00:17:43,559
a hundred cves stemming from a

454
00:17:43,559 --> 00:17:46,200
vulnerable software package there's no

455
00:17:46,200 --> 00:17:48,179
need to track every single individual

456
00:17:48,179 --> 00:17:51,000
cve what we need to track is the package

457
00:17:51,000 --> 00:17:53,820
version on that asset so once we see

458
00:17:53,820 --> 00:17:55,620
that that asset no longer has that

459
00:17:55,620 --> 00:17:58,500
vulnerable package then we know that any

460
00:17:58,500 --> 00:18:00,660
vulnerable any CV associated with that

461
00:18:00,660 --> 00:18:03,299
package is fixed

462
00:18:03,299 --> 00:18:05,520
so I mentioned earlier contextualizing

463
00:18:05,520 --> 00:18:07,440
the risk was a challenge for us

464
00:18:07,440 --> 00:18:10,980
um so the way we we fix that problem is

465
00:18:10,980 --> 00:18:13,320
we build a risk service this Risk

466
00:18:13,320 --> 00:18:16,020
Service collects metadata about every

467
00:18:16,020 --> 00:18:18,419
asset in our environment and the

468
00:18:18,419 --> 00:18:20,760
associated metadata with it so for

469
00:18:20,760 --> 00:18:23,039
instance think of it this way if we have

470
00:18:23,039 --> 00:18:25,140
an asset in our environment we collect

471
00:18:25,140 --> 00:18:28,140
information about is it excess network

472
00:18:28,140 --> 00:18:30,299
accessible over the network or

473
00:18:30,299 --> 00:18:33,299
accessible internally only what type of

474
00:18:33,299 --> 00:18:35,580
data does the asset actually handle is

475
00:18:35,580 --> 00:18:38,280
it pii or is it data that we may not

476
00:18:38,280 --> 00:18:41,100
care as much about as sensitive

477
00:18:41,100 --> 00:18:44,039
information we also try to understand

478
00:18:44,039 --> 00:18:46,500
what type of Access Control does the

479
00:18:46,500 --> 00:18:48,360
affected asset have so if a

480
00:18:48,360 --> 00:18:50,700
vulnerability is affected if an asset is

481
00:18:50,700 --> 00:18:53,520
affected by a vulnerability how far can

482
00:18:53,520 --> 00:18:55,919
a hacker go so we try to collect

483
00:18:55,919 --> 00:18:57,780
information about the access controls

484
00:18:57,780 --> 00:19:01,200
and the IM permissions of this asset we

485
00:19:01,200 --> 00:19:03,240
also collect information about every

486
00:19:03,240 --> 00:19:05,640
vulnerability that is associated with

487
00:19:05,640 --> 00:19:07,080
this asset to have a better

488
00:19:07,080 --> 00:19:09,120
understanding of the risk in case of a

489
00:19:09,120 --> 00:19:10,620
disaster

490
00:19:10,620 --> 00:19:13,919
so again think of it this way

491
00:19:13,919 --> 00:19:16,320
um so we have the acid risk information

492
00:19:16,320 --> 00:19:18,419
that I just told you about from the risk

493
00:19:18,419 --> 00:19:19,980
service but we also collect

494
00:19:19,980 --> 00:19:22,500
vulnerability data from multiple sources

495
00:19:22,500 --> 00:19:25,020
so as I mentioned vulnerability scanners

496
00:19:25,020 --> 00:19:27,600
tend to have one standard cve rating a

497
00:19:27,600 --> 00:19:29,760
CVS score but we also collect

498
00:19:29,760 --> 00:19:32,820
information from Red Hat Amazon a bunch

499
00:19:32,820 --> 00:19:34,860
of Open Source Solutions out there offer

500
00:19:34,860 --> 00:19:36,780
an API that give you actually a lot of

501
00:19:36,780 --> 00:19:38,400
vulnerability data that you can break

502
00:19:38,400 --> 00:19:40,740
down into your and installing your

503
00:19:40,740 --> 00:19:43,140
animated think of it this way if you

504
00:19:43,140 --> 00:19:46,500
have cbss you can break it down and

505
00:19:46,500 --> 00:19:48,480
understand the exploitation does it

506
00:19:48,480 --> 00:19:50,760
require user interaction is it an rce

507
00:19:50,760 --> 00:19:54,360
versus local escalation so again break

508
00:19:54,360 --> 00:19:56,160
down the vulnerability metadata as much

509
00:19:56,160 --> 00:19:58,919
as possible and store it internally the

510
00:19:58,919 --> 00:20:01,980
more sources you have you better risk

511
00:20:01,980 --> 00:20:04,620
signal you will have when you automate

512
00:20:04,620 --> 00:20:06,960
this process

513
00:20:06,960 --> 00:20:09,120
um a great example here to to share with

514
00:20:09,120 --> 00:20:10,919
you imagine it this way you have a

515
00:20:10,919 --> 00:20:12,780
vulnerability in a sandbox account in an

516
00:20:12,780 --> 00:20:15,179
isolated developer account and you have

517
00:20:15,179 --> 00:20:16,440
a vulnerability in your production

518
00:20:16,440 --> 00:20:19,200
environment you should not prioritize

519
00:20:19,200 --> 00:20:21,360
the sandbox account vulnerability the

520
00:20:21,360 --> 00:20:23,039
same way you prioritize your vulnerable

521
00:20:23,039 --> 00:20:25,020
in the production environment you should

522
00:20:25,020 --> 00:20:27,960
adjust the risk based on the asset that

523
00:20:27,960 --> 00:20:29,820
you know the metadata has shared the

524
00:20:29,820 --> 00:20:32,240
info about

525
00:20:32,580 --> 00:20:36,600
all right next reporting and Remediation

526
00:20:36,600 --> 00:20:39,360
now all that information can be passed

527
00:20:39,360 --> 00:20:41,039
into our reporting service

528
00:20:41,039 --> 00:20:43,080
in our reporting service doesn't need to

529
00:20:43,080 --> 00:20:44,460
care about any details of the

530
00:20:44,460 --> 00:20:46,260
vulnerability it doesn't need to know

531
00:20:46,260 --> 00:20:48,360
what scanner it came from it doesn't

532
00:20:48,360 --> 00:20:50,539
need to know if it's a misconfigured

533
00:20:50,539 --> 00:20:54,440
miscar configuration problem or a cve

534
00:20:54,440 --> 00:20:57,000
this is where the uuid comes into play

535
00:20:57,000 --> 00:20:59,940
again the reporting service uses it as a

536
00:20:59,940 --> 00:21:01,500
way to track the status of a

537
00:21:01,500 --> 00:21:04,200
vulnerability at any point in time and

538
00:21:04,200 --> 00:21:06,299
in a few slides I'll go into the

539
00:21:06,299 --> 00:21:08,700
technical details of this reporting

540
00:21:08,700 --> 00:21:10,559
service

541
00:21:10,559 --> 00:21:13,919
and lastly verification our motto is

542
00:21:13,919 --> 00:21:17,039
trust but verify people will try to fix

543
00:21:17,039 --> 00:21:19,559
something but mistakes always happen so

544
00:21:19,559 --> 00:21:21,539
we want to assume that that can be the

545
00:21:21,539 --> 00:21:24,179
case and rely on program programmatic

546
00:21:24,179 --> 00:21:25,919
verification so that we have confidence

547
00:21:25,919 --> 00:21:27,720
that the vulnerability is no longer

548
00:21:27,720 --> 00:21:30,360
present in our infrastructure so here we

549
00:21:30,360 --> 00:21:33,720
can use the uuid again if we're tracking

550
00:21:33,720 --> 00:21:35,700
a vulnerability via the asset and

551
00:21:35,700 --> 00:21:38,220
Associated remediation then we can know

552
00:21:38,220 --> 00:21:40,020
if something's fixed by checking for the

553
00:21:40,020 --> 00:21:41,940
presence in our infrastructure

554
00:21:41,940 --> 00:21:44,700
so as mentioned earlier if the package

555
00:21:44,700 --> 00:21:46,679
the vulnerable package version isn't in

556
00:21:46,679 --> 00:21:48,240
that asset anymore then we can feel

557
00:21:48,240 --> 00:21:52,820
Comfort confident that the cve is gone

558
00:21:53,159 --> 00:21:55,799
now what's important is to take this one

559
00:21:55,799 --> 00:21:57,600
step at a time this is a really long

560
00:21:57,600 --> 00:22:00,600
process every company has unique

561
00:22:00,600 --> 00:22:03,120
problems and Legacy infrastructure that

562
00:22:03,120 --> 00:22:04,799
doesn't fall neatly into a single

563
00:22:04,799 --> 00:22:08,640
solution so contextualized risk might be

564
00:22:08,640 --> 00:22:10,980
really hard with your legacy code maybe

565
00:22:10,980 --> 00:22:12,900
just start by being able to centralize

566
00:22:12,900 --> 00:22:15,120
all your vulnerability in one place for

567
00:22:15,120 --> 00:22:17,700
tracking and metrics or let's say you

568
00:22:17,700 --> 00:22:19,559
don't have any metadata in order to find

569
00:22:19,559 --> 00:22:22,260
things like ownership or increase the

570
00:22:22,260 --> 00:22:24,840
accuracy if you're like risk assessment

571
00:22:24,840 --> 00:22:27,480
just start collecting it now even if you

572
00:22:27,480 --> 00:22:29,820
can't use it for a while and partial

573
00:22:29,820 --> 00:22:31,440
automation is still better than no

574
00:22:31,440 --> 00:22:34,080
automation at least you're reducing the

575
00:22:34,080 --> 00:22:36,539
time on manual operational work even if

576
00:22:36,539 --> 00:22:39,120
some does happen and so that means your

577
00:22:39,120 --> 00:22:41,820
your security Engineers can still spend

578
00:22:41,820 --> 00:22:44,159
less time filtering through all this

579
00:22:44,159 --> 00:22:47,120
noise and actually get to prioritize

580
00:22:47,120 --> 00:22:49,919
proactive remediation work and use their

581
00:22:49,919 --> 00:22:53,880
time more wisely or more hacking

582
00:22:53,880 --> 00:22:57,179
all right so uh how do we scale to more

583
00:22:57,179 --> 00:22:59,520
into easily integrate different kinds of

584
00:22:59,520 --> 00:23:02,159
vulnerabilities with this process as I

585
00:23:02,159 --> 00:23:03,960
quickly mentioned earlier what ties this

586
00:23:03,960 --> 00:23:06,960
together is our reporting service

587
00:23:06,960 --> 00:23:09,600
so quick background um for our

588
00:23:09,600 --> 00:23:11,940
architecture uh where we use cloud

589
00:23:11,940 --> 00:23:14,760
infrastructure and we are a service

590
00:23:14,760 --> 00:23:16,620
oriented architecture so one of the

591
00:23:16,620 --> 00:23:18,600
biggest asset use cases for us are

592
00:23:18,600 --> 00:23:21,600
microservices

593
00:23:21,659 --> 00:23:24,539
quickly also about the tax tag we do not

594
00:23:24,539 --> 00:23:27,780
use any vendor uis we don't use out of

595
00:23:27,780 --> 00:23:29,880
the box deployments we leverage vendor

596
00:23:29,880 --> 00:23:32,520
apis for various reasons obviously you

597
00:23:32,520 --> 00:23:34,620
can standardize the format

598
00:23:34,620 --> 00:23:37,679
Etc but we also use Apache airflow which

599
00:23:37,679 --> 00:23:40,020
Airbnb open source as I mentioned

600
00:23:40,020 --> 00:23:41,159
earlier there are a bunch of different

601
00:23:41,159 --> 00:23:43,679
vulnerability sources that constantly

602
00:23:43,679 --> 00:23:46,620
stream vulnerabilities so Apache airflow

603
00:23:46,620 --> 00:23:48,780
is a great data management platform that

604
00:23:48,780 --> 00:23:52,080
lets you handle large data sets another

605
00:23:52,080 --> 00:23:54,059
thing that we also use is Hive Presto

606
00:23:54,059 --> 00:23:56,820
also open source where we store large

607
00:23:56,820 --> 00:23:59,940
data sets again to standardize and

608
00:23:59,940 --> 00:24:01,860
create the formatting for the reporting

609
00:24:01,860 --> 00:24:03,480
service that we're interested in I mean

610
00:24:03,480 --> 00:24:06,240
that we use we also use Spinnaker which

611
00:24:06,240 --> 00:24:07,580
is a deployment

612
00:24:07,580 --> 00:24:10,200
deployment tool and again because yeah

613
00:24:10,200 --> 00:24:11,460
we'll go into more detail about the

614
00:24:11,460 --> 00:24:13,919
Spinnaker use case here in the next

615
00:24:13,919 --> 00:24:16,380
slides we also use ticketing apis we do

616
00:24:16,380 --> 00:24:18,059
not use

617
00:24:18,059 --> 00:24:21,299
reporting or ticketing UI uis we try to

618
00:24:21,299 --> 00:24:23,940
Leverage The API for bulk tickets

619
00:24:23,940 --> 00:24:26,039
creation Etc but I do want to highlight

620
00:24:26,039 --> 00:24:28,020
ticketing is usually the last resort so

621
00:24:28,020 --> 00:24:29,100
you should definitely focus on

622
00:24:29,100 --> 00:24:30,900
remediation and prevention

623
00:24:30,900 --> 00:24:33,179
yeah our goal is to first try to solve

624
00:24:33,179 --> 00:24:36,419
it with proactive measures before we go

625
00:24:36,419 --> 00:24:39,659
to Just reactive ticketing

626
00:24:39,659 --> 00:24:41,880
all right so how does our reporting

627
00:24:41,880 --> 00:24:42,960
service work

628
00:24:42,960 --> 00:24:45,840
so we have a client that writes code to

629
00:24:45,840 --> 00:24:48,120
ingest vulnerabilities standardize them

630
00:24:48,120 --> 00:24:51,179
and calculate risk then the client plugs

631
00:24:51,179 --> 00:24:53,700
it in into a reporting service and after

632
00:24:53,700 --> 00:24:55,679
that the reporting service can handle

633
00:24:55,679 --> 00:24:57,360
the rest

634
00:24:57,360 --> 00:24:59,159
so there are a lot of benefits that come

635
00:24:59,159 --> 00:25:01,620
with this system it unifies all the

636
00:25:01,620 --> 00:25:04,200
shared implementation clients don't have

637
00:25:04,200 --> 00:25:06,059
to worry about Reinventing the wheel and

638
00:25:06,059 --> 00:25:07,679
having to do their own ticket creation

639
00:25:07,679 --> 00:25:09,840
or having to do their own asset finding

640
00:25:09,840 --> 00:25:12,720
or asset ownership finding uh handles

641
00:25:12,720 --> 00:25:15,179
things like deduplication a client

642
00:25:15,179 --> 00:25:16,679
doesn't have to worry about accidentally

643
00:25:16,679 --> 00:25:18,299
reporting something twice and having

644
00:25:18,299 --> 00:25:20,100
something something like multiple

645
00:25:20,100 --> 00:25:22,380
tickets created the reporting service

646
00:25:22,380 --> 00:25:24,539
has all that tracked and knows when

647
00:25:24,539 --> 00:25:25,919
something is new and when something

648
00:25:25,919 --> 00:25:26,940
isn't

649
00:25:26,940 --> 00:25:28,740
uh it also allows us to have such

650
00:25:28,740 --> 00:25:30,840
centralized metrics tracking via the

651
00:25:30,840 --> 00:25:34,140
uuid we can track remediation by

652
00:25:34,140 --> 00:25:37,080
connecting to the ticketing API and

653
00:25:37,080 --> 00:25:38,940
having everything centralized allows us

654
00:25:38,940 --> 00:25:41,159
to potentially see patterns and maybe

655
00:25:41,159 --> 00:25:43,559
identify weaknesses in an in our

656
00:25:43,559 --> 00:25:45,360
infrastructure that we should devote

657
00:25:45,360 --> 00:25:49,320
more resources towards hardening

658
00:25:49,320 --> 00:25:51,240
and so this makes it really easy to

659
00:25:51,240 --> 00:25:52,799
scale with additional vulnerabilities

660
00:25:52,799 --> 00:25:55,140
you want to track the functionality is

661
00:25:55,140 --> 00:25:57,120
modular anyone can write the code

662
00:25:57,120 --> 00:25:59,760
adjusting the data and process it and

663
00:25:59,760 --> 00:26:01,500
then pass it into the reporting service

664
00:26:01,500 --> 00:26:04,740
and this made the process significantly

665
00:26:04,740 --> 00:26:06,720
more efficient we don't have to do the

666
00:26:06,720 --> 00:26:08,700
blocker for tracking all vulnerabilities

667
00:26:08,700 --> 00:26:10,919
we don't have to own every single

668
00:26:10,919 --> 00:26:13,320
scanner for a company we just need to

669
00:26:13,320 --> 00:26:15,419
maintain the service for other people to

670
00:26:15,419 --> 00:26:17,640
use and that also means we don't have to

671
00:26:17,640 --> 00:26:20,480
make a different flow per scanner type

672
00:26:20,480 --> 00:26:22,799
whether or not it's a insecure

673
00:26:22,799 --> 00:26:25,260
configuration or if it's a cve the same

674
00:26:25,260 --> 00:26:27,659
flow is always used and after we

675
00:26:27,659 --> 00:26:29,580
deployed this multiple security teams

676
00:26:29,580 --> 00:26:31,140
were able to start using it immediately

677
00:26:31,140 --> 00:26:33,840
and if a new vulnerability drops that

678
00:26:33,840 --> 00:26:35,340
doesn't fall within our standard

679
00:26:35,340 --> 00:26:37,380
scanning flows we can start tracking it

680
00:26:37,380 --> 00:26:39,240
right away

681
00:26:39,240 --> 00:26:41,820
so we spoke a bit about the automation

682
00:26:41,820 --> 00:26:45,840
what results did we experience this is

683
00:26:45,840 --> 00:26:50,220
not a Bitcoin slide but I do so

684
00:26:50,220 --> 00:26:52,140
um we were not allowed to share the

685
00:26:52,140 --> 00:26:54,000
actual metrics from our legal team they

686
00:26:54,000 --> 00:26:55,620
were very uh they were very tough on

687
00:26:55,620 --> 00:26:57,360
that but we did want to highlight with

688
00:26:57,360 --> 00:26:58,260
you

689
00:26:58,260 --> 00:27:01,799
um how the risk significantly went down

690
00:27:01,799 --> 00:27:03,779
when we started contextualizing the risk

691
00:27:03,779 --> 00:27:05,700
so again so instead of seeing hundreds

692
00:27:05,700 --> 00:27:07,220
of criticals in your environment

693
00:27:07,220 --> 00:27:08,880
contextualizing the risk actually

694
00:27:08,880 --> 00:27:11,279
allowed us to focus what the actual risk

695
00:27:11,279 --> 00:27:12,960
or the highest risk in our environment

696
00:27:12,960 --> 00:27:16,580
is and remove all the noise and again

697
00:27:16,580 --> 00:27:18,840
removing the noise means also less

698
00:27:18,840 --> 00:27:21,299
operational time and security Engineers

699
00:27:21,299 --> 00:27:23,520
can focus on breaking and building

700
00:27:23,520 --> 00:27:25,919
secure infrastructure versus going

701
00:27:25,919 --> 00:27:27,720
through a bunch of vulnerability scanner

702
00:27:27,720 --> 00:27:31,279
reports and just waste time on that

703
00:27:31,320 --> 00:27:33,600
another use case scenario is how this

704
00:27:33,600 --> 00:27:37,500
helped us jump on log for Jay quickly

705
00:27:37,500 --> 00:27:39,679
all right so timeline

706
00:27:39,679 --> 00:27:42,539
log4j dropped right before the holidays

707
00:27:42,539 --> 00:27:46,440
as is tradition uh so when that happened

708
00:27:46,440 --> 00:27:48,900
uh we quickly wrote some code to track

709
00:27:48,900 --> 00:27:50,760
all the Java services that would need to

710
00:27:50,760 --> 00:27:53,159
be patched

711
00:27:53,159 --> 00:27:55,740
we then integrating it integrated it

712
00:27:55,740 --> 00:27:57,960
with our reporting platform so that

713
00:27:57,960 --> 00:28:01,080
pulled information from hive and then

714
00:28:01,080 --> 00:28:02,820
created tickets for all service owners

715
00:28:02,820 --> 00:28:04,860
along with instructions on how to apply

716
00:28:04,860 --> 00:28:06,980
the patch

717
00:28:06,980 --> 00:28:10,080
service owners then receive the tickets

718
00:28:10,080 --> 00:28:12,360
and work to apply the patch to their

719
00:28:12,360 --> 00:28:14,400
assets

720
00:28:14,400 --> 00:28:18,360
and simultaneously we wrote code trying

721
00:28:18,360 --> 00:28:20,760
to use our internal deployment data in

722
00:28:20,760 --> 00:28:22,740
order to verify if a patch was actually

723
00:28:22,740 --> 00:28:25,500
applied to a service and so if there was

724
00:28:25,500 --> 00:28:27,360
a service owner that made a mistake or

725
00:28:27,360 --> 00:28:29,340
missed something we could let them know

726
00:28:29,340 --> 00:28:31,620
what happened and so they can go back

727
00:28:31,620 --> 00:28:33,659
and correctly fix it

728
00:28:33,659 --> 00:28:35,580
and I wanted to provide this as an

729
00:28:35,580 --> 00:28:37,740
example of how building a vulnerability

730
00:28:37,740 --> 00:28:40,020
management platform can allow you to

731
00:28:40,020 --> 00:28:41,640
quickly respond to new kinds of

732
00:28:41,640 --> 00:28:43,740
vulnerabilities and to be creative in

733
00:28:43,740 --> 00:28:46,200
your Solutions so if something falls out

734
00:28:46,200 --> 00:28:47,940
of your scanning flow you don't have to

735
00:28:47,940 --> 00:28:50,220
create a whole new system to track it it

736
00:28:50,220 --> 00:28:52,679
uses the exact same tracking system as

737
00:28:52,679 --> 00:28:54,360
any of your scanners in your environment

738
00:28:54,360 --> 00:28:55,200
does

739
00:28:55,200 --> 00:28:57,960
and you don't have to rely on just the

740
00:28:57,960 --> 00:29:00,120
default data provided by a single

741
00:29:00,120 --> 00:29:02,400
scanner you can use as many sources as

742
00:29:02,400 --> 00:29:05,100
you can get to help you in our case it

743
00:29:05,100 --> 00:29:07,500
was significantly faster to use the

744
00:29:07,500 --> 00:29:09,840
internal deployment metadata in order to

745
00:29:09,840 --> 00:29:11,820
detect and verify that the patch had

746
00:29:11,820 --> 00:29:13,980
actually been correctly applied and if

747
00:29:13,980 --> 00:29:16,559
we had used just a default like pipeline

748
00:29:16,559 --> 00:29:18,779
that wouldn't let you customize inputs

749
00:29:18,779 --> 00:29:20,039
that would have been a lot more

750
00:29:20,039 --> 00:29:23,039
difficult and so leveraging existing

751
00:29:23,039 --> 00:29:25,500
tooling and metadata like this means

752
00:29:25,500 --> 00:29:26,640
that you don't always have to be

753
00:29:26,640 --> 00:29:29,340
deploying a brand new performance heavy

754
00:29:29,340 --> 00:29:31,380
scanner solution you can use the

755
00:29:31,380 --> 00:29:35,820
information you already have to do so

756
00:29:35,820 --> 00:29:38,460
so yeah one of the goals that we really

757
00:29:38,460 --> 00:29:40,559
want to convey in this presentation is

758
00:29:40,559 --> 00:29:43,260
uh be vendor agnostic uh design your

759
00:29:43,260 --> 00:29:46,020
infrastructure for your environment not

760
00:29:46,020 --> 00:29:49,080
for a vendor make sure that you leverage

761
00:29:49,080 --> 00:29:52,260
vendor apis so that you create standard

762
00:29:52,260 --> 00:29:53,880
formatting for the vulnerability

763
00:29:53,880 --> 00:29:55,500
databases instead of having

764
00:29:55,500 --> 00:29:57,360
vulnerabilities staggered all over the

765
00:29:57,360 --> 00:30:00,419
place in multiple multiple Solutions

766
00:30:00,419 --> 00:30:02,720
also make sure that you explore

767
00:30:02,720 --> 00:30:05,279
non-traditional or open source security

768
00:30:05,279 --> 00:30:07,380
solutions for instance kazia mentioned

769
00:30:07,380 --> 00:30:09,659
that we use Spinnaker to verify that a

770
00:30:09,659 --> 00:30:11,820
vulnerability has been fixed so instead

771
00:30:11,820 --> 00:30:13,380
of running a performance heavy

772
00:30:13,380 --> 00:30:15,000
vulnerability scanner no we had

773
00:30:15,000 --> 00:30:16,740
deployment metadata already in our

774
00:30:16,740 --> 00:30:20,039
environment to verify the fix or for

775
00:30:20,039 --> 00:30:22,740
instance OS query we OS query is not a

776
00:30:22,740 --> 00:30:25,260
vulnerability scanner but we leverage OS

777
00:30:25,260 --> 00:30:27,840
query metadata to understand what type

778
00:30:27,840 --> 00:30:31,140
of packages or what type of information

779
00:30:31,140 --> 00:30:33,059
and metadata do we have about an asset

780
00:30:33,059 --> 00:30:34,919
versus again rolling out more and more

781
00:30:34,919 --> 00:30:36,779
Asians which means again you increase

782
00:30:36,779 --> 00:30:38,700
your attack surface the more agents you

783
00:30:38,700 --> 00:30:40,559
deploy so again leveraging maybe

784
00:30:40,559 --> 00:30:42,419
existing agency or environment will save

785
00:30:42,419 --> 00:30:45,059
you money but also reduce the attack

786
00:30:45,059 --> 00:30:48,240
surface in your environment also make

787
00:30:48,240 --> 00:30:50,700
sure that you I don't rely on just

788
00:30:50,700 --> 00:30:52,740
vulnerability scoring data from one

789
00:30:52,740 --> 00:30:54,720
source like it's very common in the US

790
00:30:54,720 --> 00:30:56,940
to rely on nvd and the national

791
00:30:56,940 --> 00:30:58,740
vulnerability database but one thing

792
00:30:58,740 --> 00:31:00,299
that we really try to do is leverage one

793
00:31:00,299 --> 00:31:03,240
ability data from multiple sources it

794
00:31:03,240 --> 00:31:04,380
will give you a better understanding

795
00:31:04,380 --> 00:31:06,679
about the risk of the vulnerability

796
00:31:06,679 --> 00:31:09,419
and also against a bunch of Open Source

797
00:31:09,419 --> 00:31:10,919
solutions that you can leverage there

798
00:31:10,919 --> 00:31:13,140
are not again they're open source and

799
00:31:13,140 --> 00:31:14,340
it's great when especially when the

800
00:31:14,340 --> 00:31:16,620
business is not invested in spending

801
00:31:16,620 --> 00:31:20,279
more on the Security Solutions

802
00:31:21,600 --> 00:31:23,159
again so here are a couple of Open

803
00:31:23,159 --> 00:31:25,919
Source solutions that are out there that

804
00:31:25,919 --> 00:31:28,140
are reliable some of them are open

805
00:31:28,140 --> 00:31:31,760
source by Airbnb Google NCC

806
00:31:31,760 --> 00:31:35,720
meta OS query so so again all of these

807
00:31:35,720 --> 00:31:38,580
Solutions definitely helped us automate

808
00:31:38,580 --> 00:31:41,100
our vulnerability Management program

809
00:31:41,100 --> 00:31:44,959
so let's talk about the takeaways

810
00:31:45,240 --> 00:31:48,240
yeah invest in robust metadata do not

811
00:31:48,240 --> 00:31:52,320
rely on single reports from each

812
00:31:52,320 --> 00:31:54,779
um vendor solution or scanning solution

813
00:31:54,779 --> 00:31:57,480
collect every metadata you have in your

814
00:31:57,480 --> 00:31:59,640
environment it will help you address a

815
00:31:59,640 --> 00:32:01,860
vulnerability more quickly and it

816
00:32:01,860 --> 00:32:04,679
definitely helped us also it will also

817
00:32:04,679 --> 00:32:07,260
allow you to contextualize the risk so

818
00:32:07,260 --> 00:32:09,779
for instance if you have metadata you

819
00:32:09,779 --> 00:32:11,760
can always increase and adjust the risk

820
00:32:11,760 --> 00:32:14,159
assessment in your environment and again

821
00:32:14,159 --> 00:32:16,740
as you remember the Bitcoin slide so you

822
00:32:16,740 --> 00:32:19,380
will definitely see a slide you will

823
00:32:19,380 --> 00:32:21,539
definitely see um

824
00:32:21,539 --> 00:32:23,760
um down in the criticality of some of

825
00:32:23,760 --> 00:32:25,279
the false positives

826
00:32:25,279 --> 00:32:28,140
also one thing that we want you to focus

827
00:32:28,140 --> 00:32:30,480
on is again it's great to report on

828
00:32:30,480 --> 00:32:32,700
vulnerabilities but make sure that you

829
00:32:32,700 --> 00:32:35,399
invest in the root cause analysis if you

830
00:32:35,399 --> 00:32:37,200
have a standard vulnerability if you

831
00:32:37,200 --> 00:32:38,399
have standardized vulnerability

832
00:32:38,399 --> 00:32:40,320
information environment you will see

833
00:32:40,320 --> 00:32:42,000
patterns that means you will understand

834
00:32:42,000 --> 00:32:43,440
the root cause of the vulnerabilities

835
00:32:43,440 --> 00:32:45,419
and that focus on prevention in the

836
00:32:45,419 --> 00:32:47,580
first place use the security Engineers

837
00:32:47,580 --> 00:32:49,860
for fun projects instead of letting them

838
00:32:49,860 --> 00:32:51,840
just go through vulnerability reports or

839
00:32:51,840 --> 00:32:54,779
noise from bug Bounty programs Etc again

840
00:32:54,779 --> 00:32:56,640
I'm not saying that vulnerability

841
00:32:56,640 --> 00:32:58,740
scanners are bad or bug bounties are bad

842
00:32:58,740 --> 00:33:00,720
but there is a lot of noise but focusing

843
00:33:00,720 --> 00:33:02,880
and hardening your environment is

844
00:33:02,880 --> 00:33:04,440
definitely something that will help you

845
00:33:04,440 --> 00:33:05,700
long term

846
00:33:05,700 --> 00:33:08,580
also um one thing that I also want you

847
00:33:08,580 --> 00:33:09,659
to take away

848
00:33:09,659 --> 00:33:11,279
move away from the traditional

849
00:33:11,279 --> 00:33:13,019
vulnerability Management program which

850
00:33:13,019 --> 00:33:15,419
is very manual and you have one

851
00:33:15,419 --> 00:33:17,340
bottleneck the security engineer or the

852
00:33:17,340 --> 00:33:19,500
security person reviewed all of the

853
00:33:19,500 --> 00:33:21,899
vulnerability sources it will take away

854
00:33:21,899 --> 00:33:24,539
from critical remediation time automate

855
00:33:24,539 --> 00:33:26,640
as much as you can so that you can scale

856
00:33:26,640 --> 00:33:28,440
and detect and remediate vulnerabilities

857
00:33:28,440 --> 00:33:31,640
as quickly as possible

858
00:33:32,940 --> 00:33:35,279
all right um first we'd like to thank

859
00:33:35,279 --> 00:33:37,200
the code blue staff for all their hard

860
00:33:37,200 --> 00:33:38,100
work

861
00:33:38,100 --> 00:33:39,600
um we've had a great time here and

862
00:33:39,600 --> 00:33:42,120
everything has gone so smoothly we'd

863
00:33:42,120 --> 00:33:43,320
also like to thank some of our

864
00:33:43,320 --> 00:33:46,440
co-workers Deanna Derek Yahweh Tina

865
00:33:46,440 --> 00:33:49,200
Chris and Mark for supporting us through

866
00:33:49,200 --> 00:33:52,880
this project and also this talk

867
00:33:53,039 --> 00:33:56,880
and Q a time and in in addition if

868
00:33:56,880 --> 00:33:58,440
you're also interested we do have a blog

869
00:33:58,440 --> 00:34:00,539
post on this topic on the Airbnb

870
00:34:00,539 --> 00:34:03,120
engineering blog and we've also added

871
00:34:03,120 --> 00:34:05,519
our contact information here and we'll

872
00:34:05,519 --> 00:34:08,699
also be at the networking event to chat

873
00:34:08,699 --> 00:34:12,119
with anyone who is interested in this

874
00:34:12,119 --> 00:34:15,000
thank you arigato

875
00:34:15,000 --> 00:34:19,040
[Applause]

876
00:34:19,040 --> 00:34:21,599
thank you for the presentation we still

877
00:34:21,599 --> 00:34:23,820
have a few minutes for questions if

878
00:34:23,820 --> 00:34:27,679
somebody wants to ask from the audience

879
00:34:30,480 --> 00:34:33,740
sure yeah

880
00:34:34,320 --> 00:34:36,960
so one of my questions is regarding

881
00:34:36,960 --> 00:34:39,780
adding to your data risk model do you

882
00:34:39,780 --> 00:34:42,239
have like an onboarding process for the

883
00:34:42,239 --> 00:34:43,980
projects so that you have the code

884
00:34:43,980 --> 00:34:46,679
owners you have the dependencies that

885
00:34:46,679 --> 00:34:48,179
they use so that you can hook that all

886
00:34:48,179 --> 00:34:51,139
in like is there a process for new

887
00:34:51,139 --> 00:34:53,159
repositories and systems to come into

888
00:34:53,159 --> 00:34:55,260
the system yeah we definitely have

889
00:34:55,260 --> 00:34:57,300
um we do have that there is a standard

890
00:34:57,300 --> 00:34:59,339
way but of course there are outliners

891
00:34:59,339 --> 00:35:01,140
sometimes that you have to still deal

892
00:35:01,140 --> 00:35:02,460
with so it's again it's a learning

893
00:35:02,460 --> 00:35:03,540
process

894
00:35:03,540 --> 00:35:06,540
um so the more metadata more metadata we

895
00:35:06,540 --> 00:35:08,460
collect we sometimes that you can apply

896
00:35:08,460 --> 00:35:09,960
machine learning where you can for

897
00:35:09,960 --> 00:35:12,420
instance guess who the owner is who

898
00:35:12,420 --> 00:35:14,339
committed the code last so again

899
00:35:14,339 --> 00:35:16,320
anything any API that we have available

900
00:35:16,320 --> 00:35:17,820
in our environment we just fetch the

901
00:35:17,820 --> 00:35:19,380
data and try to learn as much as

902
00:35:19,380 --> 00:35:20,760
possible and then apply it to the

903
00:35:20,760 --> 00:35:21,960
standard process

904
00:35:21,960 --> 00:35:24,180
but yes definitely over time

905
00:35:24,180 --> 00:35:26,040
um we started having a lot stricter

906
00:35:26,040 --> 00:35:27,720
rules of when you're starting to add

907
00:35:27,720 --> 00:35:30,540
assets you have to start tracking that

908
00:35:30,540 --> 00:35:33,240
information rather than having just ad

909
00:35:33,240 --> 00:35:35,579
hoc assets that nobody knows who owns it

910
00:35:35,579 --> 00:35:37,260
yeah

911
00:35:37,260 --> 00:35:39,000
and I had one other question regarding

912
00:35:39,000 --> 00:35:40,619
the data risk stuff again do you have to

913
00:35:40,619 --> 00:35:42,180
work with your compliance teams to

914
00:35:42,180 --> 00:35:44,280
categorize like the risk for data and

915
00:35:44,280 --> 00:35:46,500
all that stuff yes so for instance in

916
00:35:46,500 --> 00:35:47,640
the

917
00:35:47,640 --> 00:35:49,859
slide that I had where we say where we

918
00:35:49,859 --> 00:35:52,440
spoke about pii for instance if the

919
00:35:52,440 --> 00:35:55,619
asset is handling pii that's obviously

920
00:35:55,619 --> 00:35:58,680
means it's critical even if the scanner

921
00:35:58,680 --> 00:36:00,960
or the pen tester Etc says it's maybe a

922
00:36:00,960 --> 00:36:03,359
medium low variability we make sure that

923
00:36:03,359 --> 00:36:04,920
we still prioritize it because we

924
00:36:04,920 --> 00:36:06,540
obviously at Airbnb care about your data

925
00:36:06,540 --> 00:36:08,940
I hope you all use our product but no

926
00:36:08,940 --> 00:36:10,859
but on a serious note we really want to

927
00:36:10,859 --> 00:36:12,180
make sure that it also work with

928
00:36:12,180 --> 00:36:13,920
compliance and any kind of regulations

929
00:36:13,920 --> 00:36:17,640
in our risk assessment great thank you

930
00:36:17,640 --> 00:36:19,740
okay are there any more questions yes

931
00:36:19,740 --> 00:36:22,520
someone over here

932
00:36:27,180 --> 00:36:29,700
so uh thank you for a great presentation

933
00:36:29,700 --> 00:36:31,920
uh you talked about the importance of

934
00:36:31,920 --> 00:36:34,020
gathering data from lots of sources

935
00:36:34,020 --> 00:36:38,220
right uh some metadata is delightfully

936
00:36:38,220 --> 00:36:39,500
machine readable

937
00:36:39,500 --> 00:36:42,540
some really isn't and so adding more

938
00:36:42,540 --> 00:36:44,579
data could make it trick could you talk

939
00:36:44,579 --> 00:36:47,040
about what's the what's the data that

940
00:36:47,040 --> 00:36:49,560
helps you easily automate and what's

941
00:36:49,560 --> 00:36:51,119
some of the data that you found really

942
00:36:51,119 --> 00:36:52,920
hard to automate that we may want to

943
00:36:52,920 --> 00:36:55,020
work on improving security advisories

944
00:36:55,020 --> 00:36:57,359
all of you probably know there is no

945
00:36:57,359 --> 00:36:59,400
standard with security advisor is I know

946
00:36:59,400 --> 00:37:02,040
Google and a bunch of other uh products

947
00:37:02,040 --> 00:37:04,619
have tried to do that but if you look at

948
00:37:04,619 --> 00:37:07,680
package parsers Etc it was definitely

949
00:37:07,680 --> 00:37:09,240
difficult so we had to spend a lot of

950
00:37:09,240 --> 00:37:11,040
time creating it into for instance a

951
00:37:11,040 --> 00:37:13,380
Json format Etc but Json format

952
00:37:13,380 --> 00:37:14,940
definitely helped us

953
00:37:14,940 --> 00:37:17,040
um with standardizing yeah but yeah it's

954
00:37:17,040 --> 00:37:18,300
definitely not that's definitely a

955
00:37:18,300 --> 00:37:20,280
challenge we've faced as we which is why

956
00:37:20,280 --> 00:37:21,900
we spend so much time searching for

957
00:37:21,900 --> 00:37:23,460
different sources because sometimes

958
00:37:23,460 --> 00:37:24,900
we'll find a source that seems really

959
00:37:24,900 --> 00:37:26,640
great and then we realize we have no way

960
00:37:26,640 --> 00:37:28,740
to automate it so it's definitely kind

961
00:37:28,740 --> 00:37:30,420
of a I would say an industry challenge

962
00:37:30,420 --> 00:37:32,339
that I really hope that we start

963
00:37:32,339 --> 00:37:35,180
prioritizing machine readable reports

964
00:37:35,180 --> 00:37:37,680
can I put in a plug for the common

965
00:37:37,680 --> 00:37:40,200
security advisory framework framework or

966
00:37:40,200 --> 00:37:43,320
csaf which is a new Oasis standard

967
00:37:43,320 --> 00:37:46,079
fantastic note it thanks for the comment

968
00:37:46,079 --> 00:37:48,720
yeah yeah we're always um

969
00:37:48,720 --> 00:37:50,700
only been over time people are really

970
00:37:50,700 --> 00:37:52,619
starting to prioritize it there are

971
00:37:52,619 --> 00:37:54,300
definitely things that do not fall under

972
00:37:54,300 --> 00:37:57,359
that but it's been really great over the

973
00:37:57,359 --> 00:37:59,820
last few years seeing a increase of

974
00:37:59,820 --> 00:38:02,160
people prioritizing machine readable

975
00:38:02,160 --> 00:38:03,900
formats

976
00:38:03,900 --> 00:38:06,320
hello

977
00:38:12,359 --> 00:38:13,740
hello

978
00:38:13,740 --> 00:38:17,160
um they are

979
00:38:17,160 --> 00:38:17,820
um

980
00:38:17,820 --> 00:38:21,300
so are you dropping the CVSs score or

981
00:38:21,300 --> 00:38:23,339
are you using the CVSs score are you

982
00:38:23,339 --> 00:38:25,260
purely contextualizing it based upon

983
00:38:25,260 --> 00:38:27,900
where the in what what services impact

984
00:38:27,900 --> 00:38:30,079
uh

985
00:38:30,079 --> 00:38:33,480
no we try to not only look at one score

986
00:38:33,480 --> 00:38:35,820
yeah so we compare you know different

987
00:38:35,820 --> 00:38:37,500
advisories can actually have different

988
00:38:37,500 --> 00:38:40,140
scores so we like to look at like

989
00:38:40,140 --> 00:38:41,940
different kind of sources and see how

990
00:38:41,940 --> 00:38:43,320
they differ

991
00:38:43,320 --> 00:38:45,900
um or certain advisors for instance they

992
00:38:45,900 --> 00:38:48,000
don't use cbss at all and just tell you

993
00:38:48,000 --> 00:38:50,520
the criticality based on the vendor so

994
00:38:50,520 --> 00:38:53,040
we take that and apply it into the in

995
00:38:53,040 --> 00:38:55,200
the the database that we use as a for

996
00:38:55,200 --> 00:38:57,780
the risk calculation so we try not to

997
00:38:57,780 --> 00:38:59,700
rely on CSS only

998
00:38:59,700 --> 00:39:01,859
um so we try to break and use more

999
00:39:01,859 --> 00:39:04,560
sources as much as possible and I think

1000
00:39:04,560 --> 00:39:05,940
you had another question as well right

1001
00:39:05,940 --> 00:39:07,079
yeah

1002
00:39:07,079 --> 00:39:09,660
um do you have a human in the loop on on

1003
00:39:09,660 --> 00:39:13,200
some all any none oh yeah of course so

1004
00:39:13,200 --> 00:39:14,760
instead of looking at 300

1005
00:39:14,760 --> 00:39:16,680
vulnerabilities a day we look for

1006
00:39:16,680 --> 00:39:17,760
instance something that we consider

1007
00:39:17,760 --> 00:39:20,400
critical or for instance pen tester like

1008
00:39:20,400 --> 00:39:23,040
for instance if you have a human who

1009
00:39:23,040 --> 00:39:25,500
finds a vulnerability or a black bounty

1010
00:39:25,500 --> 00:39:27,420
we we tend to make sure that we

1011
00:39:27,420 --> 00:39:29,460
prioritize that because again these are

1012
00:39:29,460 --> 00:39:31,800
usually more qualified findings if

1013
00:39:31,800 --> 00:39:33,720
you're a good pen tester

1014
00:39:33,720 --> 00:39:35,880
definitely this I'd say is a very hard

1015
00:39:35,880 --> 00:39:37,619
problem I don't know if it'll ever be

1016
00:39:37,619 --> 00:39:40,560
possible to 100 automate it

1017
00:39:40,560 --> 00:39:42,359
but reduce the noise but the point is to

1018
00:39:42,359 --> 00:39:44,160
reduce the noise so people are not

1019
00:39:44,160 --> 00:39:47,760
spending as much time on Pure Noise that

1020
00:39:47,760 --> 00:39:50,160
we could automate away things like you

1021
00:39:50,160 --> 00:39:52,500
know zero days dropped on Twitter like

1022
00:39:52,500 --> 00:39:54,359
yeah all of us will have to go look at

1023
00:39:54,359 --> 00:39:56,160
it and actually evaluate it yeah that's

1024
00:39:56,160 --> 00:39:57,720
another thing that we really um security

1025
00:39:57,720 --> 00:39:59,520
advisor is when vulnerabilities drop

1026
00:39:59,520 --> 00:40:01,440
especially when they're vague you

1027
00:40:01,440 --> 00:40:02,820
definitely have to sometimes sit down

1028
00:40:02,820 --> 00:40:04,440
and look at the code and the function

1029
00:40:04,440 --> 00:40:06,480
that is being used Etc so you can't

1030
00:40:06,480 --> 00:40:10,099
fully move away like

