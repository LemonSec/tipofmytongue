1
00:00:00,120 --> 00:00:01,860


2
00:00:01,860 --> 00:00:03,780
I would like to make a presentation on whether embedded devices can withstand ROP attacks.Thank

3
00:00:03,780 --> 00:00:05,160


4
00:00:05,160 --> 00:00:07,020
you for your time today.First of

5
00:00:07,020 --> 00:00:09,240


6
00:00:09,240 --> 00:00:11,940
all, a brief self-introduction.I learned about low-layer security such as OS and CPU

7
00:00:11,940 --> 00:00:14,639
at Hokkaido Institute of Information Science.

8
00:00:14,639 --> 00:00:16,619


9
00:00:16,619 --> 00:00:17,640


10
00:00:17,640 --> 00:00:19,560


11
00:00:19,560 --> 00:00:20,820


12
00:00:20,820 --> 00:00:22,680
Last year, I was researching

13
00:00:22,680 --> 00:00:25,019


14
00:00:25,019 --> 00:00:27,240


15
00:00:27,240 --> 00:00:29,340
how to implement castella using Prika

16
00:00:29,340 --> 00:00:29,939


17
00:00:29,939 --> 00:00:32,420
at a Japanese security researcher called 365

18
00:00:33,480 --> 00:00:35,460


19
00:00:35,460 --> 00:00:38,040
.

20
00:00:38,040 --> 00:00:39,540


21
00:00:39,540 --> 00:00:41,940
I ran a vulnerable test

22
00:00:41,940 --> 00:00:43,260
program in ,

23
00:00:43,260 --> 00:00:47,420
and performed lock verification on it.

24
00:00:47,520 --> 00:00:48,840
Embedded devices use

25
00:00:48,840 --> 00:00:51,239
qm to emulate high-

26
00:00:51,239 --> 00:00:53,460
spec to low-spec

27
00:00:53,460 --> 00:00:55,640


28
00:00:56,699 --> 00:00:57,840


29
00:00:57,840 --> 00:01:00,180
devices.  The

30
00:01:00,180 --> 00:01:01,620
reason is that the

31
00:01:01,620 --> 00:01:02,760


32
00:01:02,760 --> 00:01:04,979
demand for embedded functions is increasing due to the spread of IoT devices in recent years.

33
00:01:04,979 --> 00:01:07,500


34
00:01:07,500 --> 00:01:10,140


35
00:01:10,140 --> 00:01:11,280


36
00:01:11,280 --> 00:01:12,479


37
00:01:12,479 --> 00:01:13,439


38
00:01:13,439 --> 00:01:14,880


39
00:01:14,880 --> 00:01:18,119


40
00:01:18,119 --> 00:01:19,799


41
00:01:19,799 --> 00:01:22,380
There are things that require

42
00:01:22,380 --> 00:01:23,220


43
00:01:23,220 --> 00:01:24,540
security migration,

44
00:01:24,540 --> 00:01:28,100
and there are things that cannot be prepared sufficiently.

45
00:01:28,920 --> 00:01:30,540
On the other hand,

46
00:01:30,540 --> 00:01:33,060
wide-ranging research is progressing

47
00:01:33,060 --> 00:01:35,400


48
00:01:35,400 --> 00:01:36,479


49
00:01:36,479 --> 00:01:38,700
.  It

50
00:01:38,700 --> 00:01:40,619
's a

51
00:01:40,619 --> 00:01:42,920
wide range of things that can be combined to perform arbitrary processing, but

52
00:01:42,960 --> 00:01:44,700
for example, blind drops and

53
00:01:44,700 --> 00:01:48,920
other derivative technologies of ROPS are being created one after another.

54
00:01:49,380 --> 00:01:50,520


55
00:01:50,520 --> 00:01:52,200
ROPS can also be applied to various architectures

56
00:01:52,200 --> 00:01:53,820


57
00:01:53,820 --> 00:01:56,100
.

58
00:01:56,100 --> 00:01:58,220
No. In the

59
00:01:59,880 --> 00:02:01,200
selection research,

60
00:02:01,200 --> 00:02:03,360


61
00:02:03,360 --> 00:02:06,000
lock measures such as the introduction of CFI control flow intelligence to embedded architecture

62
00:02:06,000 --> 00:02:06,899


63
00:02:06,899 --> 00:02:09,538
are progressing.

64
00:02:09,538 --> 00:02:11,099


65
00:02:11,099 --> 00:02:13,080


66
00:02:13,080 --> 00:02:15,959


67
00:02:15,959 --> 00:02:18,300


68
00:02:18,300 --> 00:02:20,840


69
00:02:22,260 --> 00:02:24,180
Therefore, in this research, we

70
00:02:24,180 --> 00:02:26,400
will conduct lop verification for

71
00:02:26,400 --> 00:02:28,800
low-spec built-in deadlines where flop countermeasures may not have been

72
00:02:28,800 --> 00:02:31,580
implemented.

73
00:02:32,400 --> 00:02:34,800


74
00:02:34,800 --> 00:02:37,260


75
00:02:37,260 --> 00:02:41,480


76
00:02:43,379 --> 00:02:44,280
Well,

77
00:02:44,280 --> 00:02:45,959


78
00:02:45,959 --> 00:02:48,180
let me move on to Ropp's overview.  This lock

79
00:02:48,180 --> 00:02:50,700
attack was originally devised

80
00:02:50,700 --> 00:02:52,680
to circumvent a security mechanism

81
00:02:52,680 --> 00:02:55,280


82
00:02:55,620 --> 00:02:56,819
called the NX bit.

83
00:02:56,819 --> 00:02:59,400


84
00:02:59,400 --> 00:03:00,420


85
00:03:00,420 --> 00:03:02,700


86
00:03:02,700 --> 00:03:04,980


87
00:03:04,980 --> 00:03:08,840
It is possible to prevent the execution of shellcode with a property.It is

88
00:03:10,879 --> 00:03:13,500
an

89
00:03:13,500 --> 00:03:15,659
image diagram of that trap.As shown in

90
00:03:15,659 --> 00:03:18,859
the figure below,

91
00:03:19,860 --> 00:03:21,060


92
00:03:21,060 --> 00:03:22,379
from a normal executable file

93
00:03:22,379 --> 00:03:25,680
, collect only the items necessary for trading,

94
00:03:25,680 --> 00:03:27,959
and collect only the instructions necessary for the attack.

95
00:03:27,959 --> 00:03:30,540


96
00:03:30,540 --> 00:03:32,900


97
00:03:33,060 --> 00:03:35,159
The

98
00:03:35,159 --> 00:03:37,640
flow of step 6 is to

99
00:03:38,120 --> 00:03:40,440
build a chain and incorporate it

100
00:03:40,440 --> 00:03:43,980
into an executable file to perform arbitrary processing.

101
00:03:43,980 --> 00:03:46,920


102
00:03:46,920 --> 00:03:48,599
Since it is used, we

103
00:03:48,599 --> 00:03:51,980
can avoid the NX bit. It's going to be

104
00:03:53,819 --> 00:03:56,819
even more, or rather,

105
00:03:56,819 --> 00:03:58,799
detailed, of the lop.

106
00:03:58,799 --> 00:03:59,760
Here I'll show you an example of escaping control by calling the

107
00:03:59,760 --> 00:04:00,599
system

108
00:04:00,599 --> 00:04:03,120
function system serapin

109
00:04:03,120 --> 00:04:04,379
SH in

110
00:04:04,379 --> 00:04:05,459


111
00:04:05,459 --> 00:04:06,360


112
00:04:06,360 --> 00:04:07,620


113
00:04:07,620 --> 00:04:08,659


114
00:04:08,659 --> 00:04:11,900


115
00:04:12,239 --> 00:04:14,879
this lop chain.  The assembly code to be handled

116
00:04:14,879 --> 00:04:15,480
is

117
00:04:15,480 --> 00:04:17,519
written in the upper right, so

118
00:04:17,519 --> 00:04:18,298


119
00:04:18,298 --> 00:04:21,298
please check it accordingly. In

120
00:04:21,298 --> 00:04:24,900
this way, from this initial state, fill the

121
00:04:24,900 --> 00:04:26,580
normal stack buffer

122
00:04:26,580 --> 00:04:27,540


123
00:04:27,540 --> 00:04:28,919
up to the return address with

124
00:04:28,919 --> 00:04:30,960
junk data like a buff flow attack, and then

125
00:04:30,960 --> 00:04:33,960
insert the top chain.  If you do that,

126
00:04:33,960 --> 00:04:36,680
it will look like this

127
00:04:37,080 --> 00:04:38,280
Here, the

128
00:04:38,280 --> 00:04:39,540
return address

129
00:04:39,540 --> 00:04:41,520


130
00:04:41,520 --> 00:04:43,620
has been rewritten to 0x4001002, so

131
00:04:43,620 --> 00:04:47,820


132
00:04:47,820 --> 00:04:49,979
transitions to

133
00:04:49,979 --> 00:04:52,919
this pop rdi

134
00:04:52,919 --> 00:04:56,220


135
00:04:56,220 --> 00:04:59,460
address.  The value

136
00:04:59,460 --> 00:05:02,840
will be stored in rdi, and

137
00:05:03,000 --> 00:05:04,979
then

138
00:05:04,979 --> 00:05:06,840
the Red Mail

139
00:05:06,840 --> 00:05:09,120
will be executed.

140
00:05:09,120 --> 00:05:10,800


141
00:05:10,800 --> 00:05:14,040


142
00:05:14,040 --> 00:05:16,259


143
00:05:16,259 --> 00:05:18,320
It's going

144
00:05:18,660 --> 00:05:20,100
to be like this

145
00:05:20,100 --> 00:05:21,540


146
00:05:21,540 --> 00:05:24,180


147
00:05:24,180 --> 00:05:25,320


148
00:05:25,320 --> 00:05:26,160
The

149
00:05:26,160 --> 00:05:27,840
flow of a

150
00:05:27,840 --> 00:05:31,080
loop is to steal control by manipulating the values ​​of each

151
00:05:31,080 --> 00:05:33,120
register using the instruction version.

152
00:05:33,120 --> 00:05:34,560


153
00:05:34,560 --> 00:05:35,759


154
00:05:35,759 --> 00:05:37,680
can be applied to various architectures

155
00:05:37,680 --> 00:05:39,800
.

156
00:05:40,620 --> 00:05:42,539


157
00:05:42,539 --> 00:05:44,940
As an example of such countermeasures

158
00:05:44,940 --> 00:05:46,259


159
00:05:46,259 --> 00:05:47,820
, there is the so-called address space layer randomization. By randomizing

160
00:05:47,820 --> 00:05:49,440
the addresses

161
00:05:49,440 --> 00:05:50,699


162
00:05:50,699 --> 00:05:52,919
of code and data areas within a program,

163
00:05:52,919 --> 00:05:54,240


164
00:05:54,240 --> 00:05:56,160


165
00:05:56,160 --> 00:05:58,500


166
00:05:58,500 --> 00:06:01,280
it is possible to make it difficult to access

167
00:06:02,160 --> 00:06:03,539
specific data and code.

168
00:06:03,539 --> 00:06:05,580
Let me give you an example. In the

169
00:06:05,580 --> 00:06:07,020
previous example,

170
00:06:07,020 --> 00:06:08,039


171
00:06:08,039 --> 00:06:10,380
we knew where the pop rdi red was located

172
00:06:10,380 --> 00:06:11,340
, so

173
00:06:11,340 --> 00:06:12,960
we were able to build the lop chain.

174
00:06:12,960 --> 00:06:14,820


175
00:06:14,820 --> 00:06:18,000


176
00:06:18,000 --> 00:06:21,600


177
00:06:21,600 --> 00:06:23,759
I ca

178
00:06:23,759 --> 00:06:25,199


179
00:06:25,199 --> 00:06:27,319
n't use the

180
00:06:27,319 --> 00:06:31,699
necessary instructions.

181
00:06:32,580 --> 00:06:33,240


182
00:06:33,240 --> 00:06:35,520


183
00:06:35,520 --> 00:06:36,900


184
00:06:36,900 --> 00:06:39,240


185
00:06:39,240 --> 00:06:42,080


186
00:06:42,840 --> 00:06:43,800


187
00:06:43,800 --> 00:06:45,600


188
00:06:45,600 --> 00:06:47,880
By modeling the model and

189
00:06:47,880 --> 00:06:50,460
comparing it with the control flow at runtime,

190
00:06:50,460 --> 00:06:52,380
we can detect this kind of control flow

191
00:06:52,380 --> 00:06:54,500
.

192
00:06:56,940 --> 00:07:00,360
Again, this is a really simple example

193
00:07:00,360 --> 00:07:02,160


194
00:07:02,160 --> 00:07:04,919
.

195
00:07:04,919 --> 00:07:06,300


196
00:07:06,300 --> 00:07:07,500


197
00:07:07,500 --> 00:07:10,500


198
00:07:10,500 --> 00:07:11,580


199
00:07:11,580 --> 00:07:12,660


200
00:07:12,660 --> 00:07:15,419
Now, let's take an example of a normal seg flow from completion of the main to function 1 to function 3, but it's due to a loop.

201
00:07:15,419 --> 00:07:17,479


202
00:07:17,639 --> 00:07:19,860


203
00:07:19,860 --> 00:07:22,440


204
00:07:22,440 --> 00:07:25,699


205
00:07:27,360 --> 00:07:29,039


206
00:07:29,039 --> 00:07:31,380
If you

207
00:07:31,380 --> 00:07:35,280
compare it with the normal control flow on the left, it's

208
00:07:35,280 --> 00:07:37,319
not function 2, so it's detected

209
00:07:37,319 --> 00:07:40,880
, which is a simple example, but it's an

210
00:07:40,880 --> 00:07:43,080
example of control flow

211
00:07:43,080 --> 00:07:44,940


212
00:07:44,940 --> 00:07:48,599


213
00:07:48,599 --> 00:07:51,599
integrity.  I showed you an example, but originally

214
00:07:51,599 --> 00:07:52,919
, monitoring and detection are performed on an instruction-by-instruction basis

215
00:07:52,919 --> 00:07:56,099
.

216
00:07:56,099 --> 00:07:58,020
These two

217
00:07:58,020 --> 00:08:00,300
security mechanisms, Acerato CFI,

218
00:08:00,300 --> 00:08:01,740
each

219
00:08:01,740 --> 00:08:04,639


220
00:08:06,479 --> 00:08:09,479
have their own weaknesses.

221
00:08:09,479 --> 00:08:12,960
Space

222
00:08:12,960 --> 00:08:14,940
lacks sufficient entropy for randomization,

223
00:08:14,940 --> 00:08:16,919


224
00:08:16,919 --> 00:08:18,720
and

225
00:08:18,720 --> 00:08:22,020
it has the weakness of allowing address

226
00:08:22,020 --> 00:08:25,259


227
00:08:25,259 --> 00:08:28,139
leaks due to brute force.

228
00:08:28,139 --> 00:08:31,039


229
00:08:32,219 --> 00:08:35,219
This is also a weak point of

230
00:08:35,219 --> 00:08:37,080


231
00:08:37,080 --> 00:08:39,539


232
00:08:39,539 --> 00:08:41,419
However, since it requires a processor with high computing power,

233
00:08:41,419 --> 00:08:44,279


234
00:08:44,279 --> 00:08:47,540
it is difficult to implement

235
00:08:49,380 --> 00:08:51,360


236
00:08:51,360 --> 00:08:54,120
it on low-spec embedded machines.

237
00:08:54,120 --> 00:08:56,459


238
00:08:56,459 --> 00:08:59,160
As for the lops that are used

239
00:08:59,160 --> 00:09:00,420


240
00:09:00,420 --> 00:09:01,260


241
00:09:01,260 --> 00:09:02,540


242
00:09:02,540 --> 00:09:04,140


243
00:09:04,140 --> 00:09:06,000
, I explained at the beginning that there are many derivative technologies for lops, such as blind drops,

244
00:09:06,000 --> 00:09:07,440
but in

245
00:09:07,440 --> 00:09:10,800
this research, we use

246
00:09:10,800 --> 00:09:12,480


247
00:09:12,480 --> 00:09:15,839
simple lops because even simple lops can be controlled.  This is the policy that

248
00:09:15,839 --> 00:09:17,880
I want to focus on this time, even though it's an embedded machine that

249
00:09:17,880 --> 00:09:21,380


250
00:09:22,940 --> 00:09:25,860


251
00:09:25,860 --> 00:09:27,660


252
00:09:27,660 --> 00:09:29,339


253
00:09:29,339 --> 00:09:32,399


254
00:09:32,399 --> 00:09:34,860
can be stolen.  This

255
00:09:34,860 --> 00:09:37,560


256
00:09:37,560 --> 00:09:38,760


257
00:09:38,760 --> 00:09:41,820
is the configuration diagram of qm. In

258
00:09:41,820 --> 00:09:43,380
this way

259
00:09:43,380 --> 00:09:44,820


260
00:09:44,820 --> 00:09:47,940
, a vulnerable test program is run on the guest OS, which is an embedded environment,

261
00:09:47,940 --> 00:09:49,380


262
00:09:49,380 --> 00:09:51,300


263
00:09:51,300 --> 00:09:53,640
and the exploit code is sent to it from the host OS.

264
00:09:53,640 --> 00:09:55,560
At the

265
00:09:55,560 --> 00:09:58,040


266
00:10:01,080 --> 00:10:03,720
current stage, the environment where we tested the drop is 6 verifications for

267
00:10:03,720 --> 00:10:05,339
this

268
00:10:05,339 --> 00:10:08,160
battle s6 on air win and

269
00:10:08,160 --> 00:10:10,320
Raspberry Pi OS Cortex

270
00:10:10,320 --> 00:10:12,120
English 3.

271
00:10:12,120 --> 00:10:14,899


272
00:10:16,440 --> 00:10:19,800
First of all, it is a demonstration on the battle S side

273
00:10:19,800 --> 00:10:20,720
.  However,

274
00:10:20,720 --> 00:10:24,959
this is an imitation of the personal computer environment from a while ago,

275
00:10:24,959 --> 00:10:27,260
and

276
00:10:27,360 --> 00:10:29,279
here

277
00:10:29,279 --> 00:10:30,240
we started a vulnerable test server

278
00:10:30,240 --> 00:10:33,240
and sent the spread code.

279
00:10:33,240 --> 00:10:36,060


280
00:10:36,060 --> 00:10:38,640


281
00:10:38,640 --> 00:10:40,380


282
00:10:40,380 --> 00:10:44,600
This environment is used for comparison.The

283
00:10:47,459 --> 00:10:49,800
wide-area target information is as

284
00:10:49,800 --> 00:10:51,859


285
00:10:54,180 --> 00:10:57,979
follows.Although it is a video,

286
00:11:02,160 --> 00:11:03,600
this is

287
00:11:03,600 --> 00:11:04,740
the terminal on the battle S side

288
00:11:04,740 --> 00:11:07,459
.

289
00:11:07,500 --> 00:11:10,220


290
00:11:10,860 --> 00:11:12,540


291
00:11:12,540 --> 00:11:14,220


292
00:11:14,220 --> 00:11:15,660


293
00:11:15,660 --> 00:11:19,880
Run a program with Faber-Frosee vulnerability

294
00:11:22,920 --> 00:11:26,180
Yes, and this is the host environment, but when you send

295
00:11:26,180 --> 00:11:28,260


296
00:11:28,260 --> 00:11:30,420
the

297
00:11:30,420 --> 00:11:32,640
Excel spread code created using

298
00:11:32,640 --> 00:11:35,279


299
00:11:35,279 --> 00:11:37,920
Python here, it looks like this, and now the

300
00:11:37,920 --> 00:11:41,060
shell is stolen.

301
00:11:41,279 --> 00:11:45,240
This time, we use the command lscpu

302
00:11:45,240 --> 00:11:46,079


303
00:11:46,079 --> 00:11:48,979
to confirm the establishment of a wide area

304
00:11:51,720 --> 00:11:54,060
.

305
00:11:54,060 --> 00:11:55,920


306
00:11:55,920 --> 00:11:56,760


307
00:11:56,760 --> 00:11:59,160


308
00:11:59,160 --> 00:12:01,380


309
00:12:01,380 --> 00:12:03,600


310
00:12:03,600 --> 00:12:05,760


311
00:12:05,760 --> 00:12:09,480
However, since this environment is a 32-bit environment,

312
00:12:09,480 --> 00:12:11,519
address leaks due to brute force attacks were not possible without disabling them.

313
00:12:11,519 --> 00:12:14,279


314
00:12:14,279 --> 00:12:18,200
Depending on the program, it is also possible to connect

315
00:12:19,740 --> 00:12:20,760
the

316
00:12:20,760 --> 00:12:22,620
RaspberryPi to the

317
00:12:22,620 --> 00:12:25,500


318
00:12:25,500 --> 00:12:28,019
flop after doing it.

319
00:12:28,019 --> 00:12:30,779


320
00:12:30,779 --> 00:12:32,880


321
00:12:32,880 --> 00:12:33,839


322
00:12:33,839 --> 00:12:38,060
The target information is as follows.I'm

323
00:12:44,639 --> 00:12:48,019
going to move on to the demo right away, but

324
00:12:51,959 --> 00:12:54,180
here

325
00:12:54,180 --> 00:12:55,980


326
00:12:55,980 --> 00:12:58,920
I run the same vulnerable program called

327
00:12:58,920 --> 00:13:01,860
checkname as before, and send the express spread code from the host,

328
00:13:01,860 --> 00:13:04,500
and this time it's called lscpu.  I used commands

329
00:13:04,500 --> 00:13:05,399


330
00:13:05,399 --> 00:13:07,980
to confirm that the attack was successful, but this time I

331
00:13:07,980 --> 00:13:10,079
'd like to explain a bit about the exp spread code. In

332
00:13:10,079 --> 00:13:12,920


333
00:13:13,500 --> 00:13:16,200
6 plays on x8664,

334
00:13:16,200 --> 00:13:17,639
the first argument is

335
00:13:17,639 --> 00:13:19,079


336
00:13:19,079 --> 00:13:21,120


337
00:13:21,120 --> 00:13:23,360
stored in the rdi register, and the program counter is stored in the RIP register.  However, in

338
00:13:23,360 --> 00:13:25,079
ARM's

339
00:13:25,079 --> 00:13:28,019
A and 32 environments,

340
00:13:28,019 --> 00:13:30,000
the first argument is

341
00:13:30,000 --> 00:13:30,779


342
00:13:30,779 --> 00:13:31,800


343
00:13:31,800 --> 00:13:33,540


344
00:13:33,540 --> 00:13:35,519
stored in the R0 register, and the program counter is stored in the program counter register

345
00:13:35,519 --> 00:13:37,079


346
00:13:37,079 --> 00:13:39,899
.

347
00:13:39,899 --> 00:13:42,000


348
00:13:42,000 --> 00:13:46,200
The difference

349
00:13:46,200 --> 00:13:50,100
is that there are instructions that pop to multiple registers at once, and

350
00:13:50,100 --> 00:13:53,720
there are instructions like this pop R0AD.

351
00:13:53,720 --> 00:13:56,100


352
00:13:56,100 --> 00:13:59,060


353
00:13:59,880 --> 00:14:01,740


354
00:14:01,740 --> 00:14:03,300


355
00:14:03,300 --> 00:14:05,399
It's

356
00:14:05,399 --> 00:14:07,440
a

357
00:14:07,440 --> 00:14:10,399
simple lock chain that runs the system with slice growth.

358
00:14:13,440 --> 00:14:15,000
As for the verification results, it's a

359
00:14:15,000 --> 00:14:17,459
RaspberryPi environment.

360
00:14:17,459 --> 00:14:19,500


361
00:14:19,500 --> 00:14:21,500


362
00:14:21,500 --> 00:14:23,220


363
00:14:23,220 --> 00:14:25,019


364
00:14:25,019 --> 00:14:28,139
Therefore, without disabling those security mechanisms

365
00:14:28,139 --> 00:14:29,220
,

366
00:14:29,220 --> 00:14:30,779


367
00:14:30,779 --> 00:14:32,519
it was impossible to issue a simple ROP restriction.Furthermore, in

368
00:14:32,519 --> 00:14:34,079


369
00:14:34,079 --> 00:14:35,160


370
00:14:35,160 --> 00:14:37,260
previous research,

371
00:14:37,260 --> 00:14:39,060
CFI implementation on RaspberryPi is also

372
00:14:39,060 --> 00:14:42,420
progressing, so it is not possible to issue ROP control in the future.

373
00:14:42,420 --> 00:14:46,219
It seems that it will become even more severe.

374
00:14:48,240 --> 00:14:50,639
It looks like the table,

375
00:14:50,639 --> 00:14:53,339
but I haven't

376
00:14:53,339 --> 00:14:54,600


377
00:14:54,600 --> 00:14:57,120
yet verified low-spec embedded devices, which is the main theme of this research,

378
00:14:57,120 --> 00:14:59,100
so I'm thinking of doing that in the future

379
00:14:59,100 --> 00:15:01,220


380
00:15:01,380 --> 00:15:03,600
.

381
00:15:03,600 --> 00:15:05,600
Hey,

382
00:15:08,459 --> 00:15:10,440


383
00:15:10,440 --> 00:15:14,060
I'd like to do drop verification in an environment called

384
00:15:15,480 --> 00:15:20,180
M0. This is the reason why I prepared

385
00:15:20,220 --> 00:15:23,040
this environment.

386
00:15:23,040 --> 00:15:24,660


387
00:15:24,660 --> 00:15:27,800


388
00:15:31,019 --> 00:15:31,920


389
00:15:31,920 --> 00:15:33,540
It's a really small OS

390
00:15:33,540 --> 00:15:34,920
that supports

391
00:15:34,920 --> 00:15:35,760
low-spec

392
00:15:35,760 --> 00:15:38,420
boards and can run on Aldi's

393
00:15:38,420 --> 00:15:41,760
2560 or Microbit, etc.

394
00:15:41,760 --> 00:15:44,459


395
00:15:44,459 --> 00:15:46,860


396
00:15:46,860 --> 00:15:49,260
This Zephyr OS has

397
00:15:49,260 --> 00:15:51,779
memory protection.  There

398
00:15:51,779 --> 00:15:54,019
are three main functions,

399
00:15:54,019 --> 00:15:55,920
one is

400
00:15:55,920 --> 00:15:58,019
staff protection, the other is

401
00:15:58,019 --> 00:16:00,600
memory isolation, and the other is thread

402
00:16:00,600 --> 00:16:02,279


403
00:16:02,279 --> 00:16:03,899


404
00:16:03,899 --> 00:16:06,959


405
00:16:06,959 --> 00:16:08,339
isolation.

406
00:16:08,339 --> 00:16:10,260


407
00:16:10,260 --> 00:16:13,040


408
00:16:16,199 --> 00:16:17,279
MPa is

409
00:16:17,279 --> 00:16:18,120


410
00:16:18,120 --> 00:16:20,160
an abbreviation for memory protection unit, and it is

411
00:16:20,160 --> 00:16:21,959


412
00:16:21,959 --> 00:16:24,480


413
00:16:24,480 --> 00:16:27,120
an important hardware unit that realizes the memory method in low-spec embedded keys that cannot implement

414
00:16:27,120 --> 00:16:29,839


415
00:16:30,120 --> 00:16:32,579
mmu.As a function, the address space is divided into

416
00:16:32,579 --> 00:16:36,240
several areas.  The main function

417
00:16:36,240 --> 00:16:39,240
of this mpu is that it is possible to divide it into two areas and set access rights to each area

418
00:16:39,240 --> 00:16:40,980


419
00:16:40,980 --> 00:16:44,120


420
00:16:45,240 --> 00:16:46,440


421
00:16:46,440 --> 00:16:49,440


422
00:16:49,440 --> 00:16:53,220
.

423
00:16:53,220 --> 00:16:55,019


424
00:16:55,019 --> 00:16:58,199
It turned out that the memory protection used by the OS cannot be applied.For

425
00:16:58,199 --> 00:17:00,439
the

426
00:17:02,880 --> 00:17:04,859
above reasons,

427
00:17:04,859 --> 00:17:07,559


428
00:17:07,559 --> 00:17:10,319
we would like to conduct verification in the future

429
00:17:10,319 --> 00:17:12,980
.

430
00:17:14,880 --> 00:17:18,240


431
00:17:18,240 --> 00:17:21,059
As for

432
00:17:21,059 --> 00:17:23,760


433
00:17:23,760 --> 00:17:25,919
how to deal with the target,

434
00:17:25,919 --> 00:17:27,839
at the computer security symposium 202022 held the other day,

435
00:17:27,839 --> 00:17:30,320


436
00:17:30,320 --> 00:17:32,340


437
00:17:32,340 --> 00:17:34,380


438
00:17:34,380 --> 00:17:36,780
we had a place to discuss a little about countermeasures for low-spec embedded machines

439
00:17:36,780 --> 00:17:38,640


440
00:17:38,640 --> 00:17:41,460


441
00:17:41,460 --> 00:17:42,919
.

442
00:17:42,919 --> 00:17:45,660


443
00:17:45,660 --> 00:17:47,880
However, I felt that these two countermeasures are lightweight and can be implemented.

444
00:17:47,880 --> 00:17:50,059


445
00:17:50,400 --> 00:17:51,840


446
00:17:51,840 --> 00:17:53,640


447
00:17:53,640 --> 00:17:56,760
Another staff protection is

448
00:17:56,760 --> 00:18:00,419


449
00:18:00,419 --> 00:18:01,440


450
00:18:01,440 --> 00:18:03,299
implemented like a simple

451
00:18:03,299 --> 00:18:05,299


452
00:18:06,480 --> 00:18:08,640


453
00:18:08,640 --> 00:18:09,900


454
00:18:09,900 --> 00:18:13,020
CFI that

455
00:18:13,020 --> 00:18:16,039
detects and detects memory violations peculiar to loops.  Last

456
00:18:17,820 --> 00:18:20,400


457
00:18:20,400 --> 00:18:22,980


458
00:18:22,980 --> 00:18:24,120
but not least,

459
00:18:24,120 --> 00:18:26,340
it is possible to take control of a program to

460
00:18:26,340 --> 00:18:27,840


461
00:18:27,840 --> 00:18:29,520


462
00:18:29,520 --> 00:18:30,720


463
00:18:30,720 --> 00:18:33,240


464
00:18:33,240 --> 00:18:34,980
which cfire Asura is not applied, even with a simple ROP.

465
00:18:34,980 --> 00:18:37,380


466
00:18:37,380 --> 00:18:39,179


467
00:18:39,179 --> 00:18:42,620
I'm thinking about implementing a security

468
00:18:43,799 --> 00:18:45,240


469
00:18:45,240 --> 00:18:47,820


470
00:18:47,820 --> 00:18:49,919


471
00:18:49,919 --> 00:18:52,620


472
00:18:52,620 --> 00:18:54,299


473
00:18:54,299 --> 00:18:56,880
mechanism based on the lock countermeasure proposal.  I would like to express

474
00:18:56,880 --> 00:18:58,860


475
00:18:58,860 --> 00:19:01,380
my heartfelt thanks to the trainers, Sakai City and Sight 36, to everyone involved

476
00:19:01,380 --> 00:19:03,559


477
00:19:04,320 --> 00:19:05,460
. This is the end of the presentation. Thank you.

478
00:19:05,460 --> 00:19:07,640


479
00:19:11,040 --> 00:19:13,260


480
00:19:13,260 --> 00:19:14,640


481
00:19:14,640 --> 00:19:16,039


482
00:19:16,039 --> 00:19:19,260


483
00:19:19,260 --> 00:19:22,380
But if

484
00:19:22,380 --> 00:19:26,960
you have any questions, please raise your

485
00:19:28,640 --> 00:19:32,299


486
00:19:35,280 --> 00:19:38,178
hand

487
00:19:39,120 --> 00:19:41,840
.

488
00:19:42,000 --> 00:19:44,580


489
00:19:44,580 --> 00:19:46,020


490
00:19:46,020 --> 00:19:49,620


491
00:19:49,620 --> 00:19:51,240


492
00:19:51,240 --> 00:19:52,380
Yes

493
00:19:52,380 --> 00:19:55,740


494
00:19:55,740 --> 00:19:58,380


495
00:19:58,380 --> 00:20:00,900
, how can we implement

496
00:20:00,900 --> 00:20:02,160


497
00:20:02,160 --> 00:20:04,740
it in software?

498
00:20:04,740 --> 00:20:07,380
How can we implement it in software

499
00:20:07,380 --> 00:20:09,539
?

500
00:20:09,539 --> 00:20:12,179


501
00:20:12,179 --> 00:20:14,640


502
00:20:14,640 --> 00:20:16,860
I haven't seen much about it, but

503
00:20:16,860 --> 00:20:19,039


504
00:20:20,820 --> 00:20:23,160
the papers I've seen a little about

505
00:20:23,160 --> 00:20:25,020
are implementations of CFI that use trust zones,

506
00:20:25,020 --> 00:20:28,980
and those that use cardware units dedicated to embedding them.

507
00:20:28,980 --> 00:20:32,100
I found

508
00:20:32,100 --> 00:20:33,960


509
00:20:33,960 --> 00:20:36,480


510
00:20:36,480 --> 00:20:40,460
a paper about implementing a payment CFI with some kind of award

511
00:20:40,460 --> 00:20:43,260


512
00:20:43,260 --> 00:20:44,039
.

513
00:20:44,039 --> 00:20:47,179
Thank you.

