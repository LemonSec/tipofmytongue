1
00:00:00,420 --> 00:00:01,680
Thank you for your introduction. My name

2
00:00:01,680 --> 00:00:05,160
is Tomonaga from jpcert. In this

3
00:00:05,160 --> 00:00:07,020
presentation, I would like to introduce

4
00:00:07,020 --> 00:00:10,200
Maruya analysis and incident response investigation methods using the cloud.

5
00:00:10,200 --> 00:00:13,579


6
00:00:14,040 --> 00:00:16,880


7
00:00:17,160 --> 00:00:19,220


8
00:00:19,220 --> 00:00:20,880


9
00:00:20,880 --> 00:00:23,160
It's a

10
00:00:23,160 --> 00:00:24,900
diagram, but I think the

11
00:00:24,900 --> 00:00:28,680
attacker will create malware and attack tools,

12
00:00:28,680 --> 00:00:31,439
test

13
00:00:31,439 --> 00:00:33,540


14
00:00:33,540 --> 00:00:34,500
them, and then

15
00:00:34,500 --> 00:00:36,719
send them to the target as an actual attack

16
00:00:36,719 --> 00:00:38,340
.

17
00:00:38,340 --> 00:00:41,219
We detect that it has infiltrated the organization

18
00:00:41,219 --> 00:00:42,840


19
00:00:42,840 --> 00:00:46,980
and remove it, so the

20
00:00:46,980 --> 00:00:48,480
attacker develops

21
00:00:48,480 --> 00:00:51,180
a new tool and attacks again after being removed.

22
00:00:51,180 --> 00:00:54,180


23
00:00:54,180 --> 00:00:55,860


24
00:00:55,860 --> 00:00:58,320


25
00:00:58,320 --> 00:01:01,460


26
00:01:01,620 --> 00:01:03,000
Unfortunately,

27
00:01:03,000 --> 00:01:05,040
we are embedded in the

28
00:01:05,040 --> 00:01:06,720
attacker's complete ware development

29
00:01:06,720 --> 00:01:09,299
life cycle, and

30
00:01:09,299 --> 00:01:10,439
we are

31
00:01:10,439 --> 00:01:12,600
stuck with it forever.

32
00:01:12,600 --> 00:01:14,580
There is a current situation where we have to repeat the process of extermination

33
00:01:14,580 --> 00:01:16,439


34
00:01:16,439 --> 00:01:19,260
. In contrast, Maruya analysts

35
00:01:19,260 --> 00:01:20,060


36
00:01:20,060 --> 00:01:21,720


37
00:01:21,720 --> 00:01:24,180
are in order for

38
00:01:24,180 --> 00:01:25,920


39
00:01:25,920 --> 00:01:28,860
Marue to be detected.

40
00:01:28,860 --> 00:01:32,640
It's just that you're going to have to

41
00:01:32,640 --> 00:01:35,280
repeat the analysis. You get tired of repeating this analysis all the time, and before you know

42
00:01:35,280 --> 00:01:37,079


43
00:01:37,079 --> 00:01:40,320
it, everyone

44
00:01:40,320 --> 00:01:42,780
comes to the conclusion

45
00:01:42,780 --> 00:01:45,079


46
00:01:46,079 --> 00:01:49,259
that this has to be automated.  Maruya: The current situation is that

47
00:01:49,259 --> 00:01:51,060


48
00:01:51,060 --> 00:01:52,259


49
00:01:52,259 --> 00:01:57,180
analysts are competing against the development lifecycle by automating the creation of tools and analysis

50
00:01:57,180 --> 00:02:00,119


51
00:02:00,119 --> 00:02:01,439
.

52
00:02:01,439 --> 00:02:02,360


53
00:02:02,360 --> 00:02:07,259


54
00:02:07,259 --> 00:02:08,959
Or

55
00:02:08,959 --> 00:02:13,260
change Maruya's encryption sphere, and

56
00:02:13,260 --> 00:02:16,319
then we will add new functions.

57
00:02:16,319 --> 00:02:19,680


58
00:02:19,680 --> 00:02:20,400


59
00:02:20,400 --> 00:02:22,080


60
00:02:22,080 --> 00:02:24,319


61
00:02:24,319 --> 00:02:26,879
Analysts are tools, and

62
00:02:26,879 --> 00:02:28,620
they repeat maintenance on a daily basis

63
00:02:28,620 --> 00:02:31,620


64
00:02:31,620 --> 00:02:33,599


65
00:02:33,599 --> 00:02:34,860


66
00:02:34,860 --> 00:02:36,120


67
00:02:36,120 --> 00:02:38,940


68
00:02:38,940 --> 00:02:42,239
.

69
00:02:42,239 --> 00:02:43,739


70
00:02:43,739 --> 00:02:45,840
of the tool  The problem now is that there will come a time when we will give up on maintenance

71
00:02:45,840 --> 00:02:48,180


72
00:02:48,180 --> 00:02:51,180
.

73
00:02:51,180 --> 00:02:53,519
This slide summarizes the problems with maops.

74
00:02:53,519 --> 00:02:57,360


75
00:02:57,360 --> 00:02:58,920


76
00:02:58,920 --> 00:03:00,720


77
00:03:00,720 --> 00:03:04,379
Therefore,

78
00:03:04,379 --> 00:03:06,900


79
00:03:06,900 --> 00:03:09,180
I would like to develop the new

80
00:03:09,180 --> 00:03:11,580
Maruya analysis tool more and more, but the more tools are created, the more

81
00:03:11,580 --> 00:03:14,340
time it takes to maintain

82
00:03:14,340 --> 00:03:16,560


83
00:03:16,560 --> 00:03:18,599
them.

84
00:03:18,599 --> 00:03:20,760


85
00:03:20,760 --> 00:03:22,319


86
00:03:22,319 --> 00:03:24,540


87
00:03:24,540 --> 00:03:25,920
I think that there is a need for a method to

88
00:03:25,920 --> 00:03:28,339


89
00:03:28,379 --> 00:03:29,459


90
00:03:29,459 --> 00:03:31,620


91
00:03:31,620 --> 00:03:33,239
counteract the shin development life

92
00:03:33,239 --> 00:03:36,599
cycle.

93
00:03:36,599 --> 00:03:38,700
As an

94
00:03:38,700 --> 00:03:42,140


95
00:03:42,299 --> 00:03:45,000
approach to this problem, I think

96
00:03:45,000 --> 00:03:48,180
that the response we are taking

97
00:03:48,180 --> 00:03:50,340
is now commonplace in the development field,

98
00:03:50,340 --> 00:03:52,140
but

99
00:03:52,140 --> 00:03:54,720


100
00:03:54,720 --> 00:03:56,280
Debox's approach to maops.

101
00:03:56,280 --> 00:03:56,940
For example,

102
00:03:56,940 --> 00:03:59,519


103
00:03:59,519 --> 00:04:02,280
after introducing cicd, we will use technologies centered on the cloud,

104
00:04:02,280 --> 00:04:06,780


105
00:04:06,780 --> 00:04:09,540
such as serverless and IAC

106
00:04:09,540 --> 00:04:11,459


107
00:04:11,459 --> 00:04:12,360


108
00:04:12,360 --> 00:04:14,879
.

109
00:04:14,879 --> 00:04:16,918


110
00:04:16,918 --> 00:04:19,500
I think that it has many elements to solve the

111
00:04:19,500 --> 00:04:21,000


112
00:04:21,000 --> 00:04:23,180


113
00:04:24,060 --> 00:04:27,419
problem.The

114
00:04:27,419 --> 00:04:30,300
advantages of using the cloud

115
00:04:30,300 --> 00:04:32,699


116
00:04:32,699 --> 00:04:34,560
for mfps are as follows.I would like to introduce the details later

117
00:04:34,560 --> 00:04:36,120
.  But for

118
00:04:36,120 --> 00:04:36,900
example, the

119
00:04:36,900 --> 00:04:39,479
ability to dynamically change IP addresses, the

120
00:04:39,479 --> 00:04:42,240


121
00:04:42,240 --> 00:04:44,400
ease of updating analysis tools, the ease

122
00:04:44,400 --> 00:04:47,220
of building a scale-out system, and the ease of server

123
00:04:47,220 --> 00:04:49,620
maintenance are advantages.

124
00:04:49,620 --> 00:04:52,680


125
00:04:52,680 --> 00:04:54,240
Actually, we

126
00:04:54,240 --> 00:04:57,540


127
00:04:57,540 --> 00:04:58,860


128
00:04:58,860 --> 00:05:01,620
have built

129
00:05:01,620 --> 00:05:02,940


130
00:05:02,940 --> 00:05:03,720


131
00:05:03,720 --> 00:05:06,000
and are operating our analysis system

132
00:05:06,000 --> 00:05:07,979
on the cloud.

133
00:05:07,979 --> 00:05:09,479


134
00:05:09,479 --> 00:05:10,860


135
00:05:10,860 --> 00:05:12,960
I would like to introduce whether it is possible to build a system that can compete

136
00:05:12,960 --> 00:05:15,198


137
00:05:15,600 --> 00:05:18,240
with the round

138
00:05:18,240 --> 00:05:21,300
devometer life cycle.  First,

139
00:05:21,300 --> 00:05:24,720
I would like

140
00:05:24,720 --> 00:05:27,120
to introduce an example of building a

141
00:05:27,120 --> 00:05:28,440


142
00:05:28,440 --> 00:05:30,740


143
00:05:31,860 --> 00:05:33,360


144
00:05:33,360 --> 00:05:35,039


145
00:05:35,039 --> 00:05:37,620
C2 monitoring system on the cloud.

146
00:05:37,620 --> 00:05:40,259
It is very important to understand the activities of attackers,

147
00:05:40,259 --> 00:05:43,320
so I think many Maruya analysts are doing it every

148
00:05:43,320 --> 00:05:44,880


149
00:05:44,880 --> 00:05:47,880
day.There are some problems with monitoring C2 servers.

150
00:05:47,880 --> 00:05:49,380


151
00:05:49,380 --> 00:05:53,580
The first problem is that if you

152
00:05:53,580 --> 00:05:55,320
access more than necessary

153
00:05:55,320 --> 00:05:57,360
, your access will be

154
00:05:57,360 --> 00:05:59,039
blocked by the

155
00:05:59,039 --> 00:06:02,759


156
00:06:02,759 --> 00:06:04,680
attacker.

157
00:06:04,680 --> 00:06:06,840


158
00:06:06,840 --> 00:06:10,380
These problems

159
00:06:10,380 --> 00:06:11,460


160
00:06:11,460 --> 00:06:13,380
can be solved

161
00:06:13,380 --> 00:06:14,759


162
00:06:14,759 --> 00:06:16,800
by using cloud services. Here, I would like

163
00:06:16,800 --> 00:06:19,020


164
00:06:19,020 --> 00:06:21,539
to introduce an example of using cloud services to monitor the CF2 infrastructure of a scam called Lucky Visitor Fraud

165
00:06:21,539 --> 00:06:23,759


166
00:06:23,759 --> 00:06:25,860
.  I

167
00:06:25,860 --> 00:06:27,240


168
00:06:27,240 --> 00:06:29,039
don't think there's anyone who hasn't encountered a pop-up, but

169
00:06:29,039 --> 00:06:31,500
when you

170
00:06:31,500 --> 00:06:33,300
access a site that has been altered, it displays

171
00:06:33,300 --> 00:06:34,680
a fake ad like this and

172
00:06:34,680 --> 00:06:35,520
asks you

173
00:06:35,520 --> 00:06:36,660


174
00:06:36,660 --> 00:06:37,919


175
00:06:37,919 --> 00:06:40,979
to enter your personal information.  This

176
00:06:40,979 --> 00:06:43,620
is a

177
00:06:43,620 --> 00:06:46,440
fraudulent act of trying to get you to enter your personal information

178
00:06:46,440 --> 00:06:48,360
. Behind the scenes of this improved site, there is

179
00:06:48,360 --> 00:06:50,280
a mechanism that controls tampered sites

180
00:06:50,280 --> 00:06:52,199


181
00:06:52,199 --> 00:06:55,680
.

182
00:06:55,680 --> 00:06:57,240
When a

183
00:06:57,240 --> 00:07:00,440
user

184
00:07:00,440 --> 00:07:03,360
accesses, for that reason

185
00:07:03,360 --> 00:07:06,000
the information of that user is

186
00:07:06,000 --> 00:07:09,479
sent to the C2 server, and each time the redirect

187
00:07:09,479 --> 00:07:11,520
destination URL is

188
00:07:11,520 --> 00:07:13,860


189
00:07:13,860 --> 00:07:15,780
sent to the improved site.  The IP address

190
00:07:15,780 --> 00:07:17,960


191
00:07:18,000 --> 00:07:21,740
of the C2 server is hard-coded on the site that has been tampered with. This means that the tampered site

192
00:07:22,560 --> 00:07:24,440


193
00:07:24,440 --> 00:07:28,860


194
00:07:28,860 --> 00:07:30,900
has this kind of PHP

195
00:07:30,900 --> 00:07:32,639
background video installed.

196
00:07:32,639 --> 00:07:34,740


197
00:07:34,740 --> 00:07:37,220


198
00:07:38,280 --> 00:07:40,620
To the server,

199
00:07:40,620 --> 00:07:43,319
client access

200
00:07:43,319 --> 00:07:46,380


201
00:07:46,380 --> 00:07:48,960


202
00:07:48,960 --> 00:07:50,160


203
00:07:50,160 --> 00:07:52,680
Send client information such as the IP

204
00:07:52,680 --> 00:07:55,440
address and

205
00:07:55,440 --> 00:07:57,120
user agent that accessed the site that

206
00:07:57,120 --> 00:07:59,639
was tampered with.  In the

207
00:07:59,639 --> 00:08:01,380


208
00:08:01,380 --> 00:08:04,139
improved site, the html is sent

209
00:08:04,139 --> 00:08:07,139
to the

210
00:08:07,139 --> 00:08:09,240
user

211
00:08:09,240 --> 00:08:11,039


212
00:08:11,039 --> 00:08:13,020
to redirect and

213
00:08:13,020 --> 00:08:15,120
finally access the lucky visitor scam site.

214
00:08:15,120 --> 00:08:17,400


215
00:08:17,400 --> 00:08:19,379


216
00:08:19,379 --> 00:08:20,400
By the way,

217
00:08:20,400 --> 00:08:22,560
PHP's backdoor not only redirects users,

218
00:08:22,560 --> 00:08:24,479
but it also has

219
00:08:24,479 --> 00:08:27,660
various functions, such as the

220
00:08:27,660 --> 00:08:28,879
functions

221
00:08:28,879 --> 00:08:33,199
listed

222
00:08:33,360 --> 00:08:36,120
here.

223
00:08:36,120 --> 00:08:39,539
This is a list of C2 servers that are

224
00:08:39,539 --> 00:08:42,299
being used, but this attack has been ongoing for many years, and the

225
00:08:42,299 --> 00:08:44,459


226
00:08:44,459 --> 00:08:46,320
C2 servers are changed regularly, so

227
00:08:46,320 --> 00:08:49,800


228
00:08:49,800 --> 00:08:52,560
in order to monitor the C2 servers, this C2

229
00:08:52,560 --> 00:08:55,500
It means that we have to detect that the server itself has been changed.So

230
00:08:55,500 --> 00:08:58,440


231
00:08:58,440 --> 00:09:01,140
, we have to deal with this attack by

232
00:09:01,140 --> 00:09:02,820


233
00:09:02,820 --> 00:09:05,100
changing or discovering the C2 server, and registering it in a blacklist

234
00:09:05,100 --> 00:09:07,080
to block web browser redirects.

235
00:09:07,080 --> 00:09:08,399


236
00:09:08,399 --> 00:09:10,500
We are automating the processing of the process

237
00:09:10,500 --> 00:09:12,720
.

238
00:09:12,720 --> 00:09:14,820
Specifically, the flow is like this. From the

239
00:09:14,820 --> 00:09:16,560
BI illustration

240
00:09:16,560 --> 00:09:19,200
total, we will acquire the PHP backdoor introduced earlier,

241
00:09:19,200 --> 00:09:21,060
and

242
00:09:21,060 --> 00:09:22,620


243
00:09:22,620 --> 00:09:24,360


244
00:09:24,360 --> 00:09:27,240
acquire the information of the C2 server to the C2 server.

245
00:09:27,240 --> 00:09:27,899
On the other hand,

246
00:09:27,899 --> 00:09:30,660
by

247
00:09:30,660 --> 00:09:33,000
obtaining the user URL that is used directly and reporting that URL by registering it with

248
00:09:33,000 --> 00:09:35,339
Google Safe Browsing,

249
00:09:35,339 --> 00:09:37,920
it is possible to block it in the

250
00:09:37,920 --> 00:09:40,680
browser

251
00:09:40,680 --> 00:09:42,600
.

252
00:09:42,600 --> 00:09:44,880
Well, since

253
00:09:44,880 --> 00:09:47,940
everything runs automatically,

254
00:09:47,940 --> 00:09:49,820


255
00:09:49,820 --> 00:09:52,019
it's a mechanism that automatically goes all the way to defense.This

256
00:09:52,019 --> 00:09:53,820


257
00:09:53,820 --> 00:09:55,680
system is very simple

258
00:09:55,680 --> 00:09:56,339
,

259
00:09:56,339 --> 00:09:58,980
and it runs on AWS, but it's an

260
00:09:58,980 --> 00:10:01,080
AWS serverless service.

261
00:10:01,080 --> 00:10:02,880


262
00:10:02,880 --> 00:10:06,060
Lambda and C2 are

263
00:10:06,060 --> 00:10:09,480
scanned, and the results are reported to

264
00:10:09,480 --> 00:10:11,040
Google Safe

265
00:10:11,040 --> 00:10:12,360
Browsing with Guitar Abaction.

266
00:10:12,360 --> 00:10:15,440


267
00:10:16,740 --> 00:10:19,260
URL information is

268
00:10:19,260 --> 00:10:22,320
stored on Guitar.  We have made it public like this, so

269
00:10:22,320 --> 00:10:23,820


270
00:10:23,820 --> 00:10:25,500
I hope that those who are interested can take a look at it later

271
00:10:25,500 --> 00:10:28,339


272
00:10:28,380 --> 00:10:30,959


273
00:10:30,959 --> 00:10:34,320
.  It's possible to build a

274
00:10:34,320 --> 00:10:36,779
serverless service, such as the

275
00:10:36,779 --> 00:10:37,980
Google

276
00:10:37,980 --> 00:10:40,160
Cloud

277
00:10:40,160 --> 00:10:43,080


278
00:10:43,080 --> 00:10:44,700


279
00:10:44,700 --> 00:10:46,740


280
00:10:46,740 --> 00:10:49,040


281
00:10:50,100 --> 00:10:52,800
.  As for the appreciation of the C2 server,

282
00:10:52,800 --> 00:10:55,740
one of the advantages of doing it on the cloud

283
00:10:55,740 --> 00:10:57,000


284
00:10:57,000 --> 00:10:59,339
is that if the access to the C2 server is

285
00:10:59,339 --> 00:11:01,980
restricted, the migration will be smooth

286
00:11:01,980 --> 00:11:03,540


287
00:11:03,540 --> 00:11:06,240
.

288
00:11:06,240 --> 00:11:08,880


289
00:11:08,880 --> 00:11:11,160


290
00:11:11,160 --> 00:11:13,740
There was a case where the C2 server was blocked for a certain period of time, but in this

291
00:11:13,740 --> 00:11:16,440
case,

292
00:11:16,440 --> 00:11:19,200
it was easy to migrate to another region, so

293
00:11:19,200 --> 00:11:22,620
we were able to avoid it.

294
00:11:22,620 --> 00:11:25,019
When monitoring the C2 server, if

295
00:11:25,019 --> 00:11:26,160


296
00:11:26,160 --> 00:11:28,440
you don't change the IP address regularly, there will be

297
00:11:28,440 --> 00:11:31,440
various problems, and that will be the

298
00:11:31,440 --> 00:11:33,540
biggest

299
00:11:33,540 --> 00:11:34,740


300
00:11:34,740 --> 00:11:36,959
bottleneck when using the cloud.  I think that the cat's

301
00:11:36,959 --> 00:11:38,700
problem is

302
00:11:38,700 --> 00:11:41,160
one individual that can be

303
00:11:41,160 --> 00:11:43,399
solved.From

304
00:11:43,860 --> 00:11:46,440
here on, it's reference information, but so

305
00:11:46,440 --> 00:11:47,459


306
00:11:47,459 --> 00:11:49,320
far.I've been interfering with the

307
00:11:49,320 --> 00:11:51,060
C2 server of the Lucky Visitor scam for over a year

308
00:11:51,060 --> 00:11:53,399
, but I've been

309
00:11:53,399 --> 00:11:56,160
attacked.  The attacker

310
00:11:56,160 --> 00:11:59,160
changes the URL they use about once a day.

311
00:11:59,160 --> 00:12:00,120


312
00:12:00,120 --> 00:12:03,480


313
00:12:03,480 --> 00:12:06,839


314
00:12:06,839 --> 00:12:08,399


315
00:12:08,399 --> 00:12:10,380
It doesn't look like it's being done dynamically, so it

316
00:12:10,380 --> 00:12:13,079
feels like it's being done manually, but

317
00:12:13,079 --> 00:12:15,839
we're in a situation where it's fully automated and has even reached the

318
00:12:15,839 --> 00:12:18,240
block

319
00:12:18,240 --> 00:12:20,779


320
00:12:21,060 --> 00:12:22,920
.

321
00:12:22,920 --> 00:12:25,740
I would like to introduce the Maria Hunting System

322
00:12:25,740 --> 00:12:28,500
.

323
00:12:28,500 --> 00:12:30,300
Maruya Analyst is a Maruei Analyst

324
00:12:30,300 --> 00:12:31,440


325
00:12:31,440 --> 00:12:34,860


326
00:12:34,860 --> 00:12:36,740


327
00:12:36,740 --> 00:12:39,480
.

328
00:12:39,480 --> 00:12:41,279


329
00:12:41,279 --> 00:12:44,040


330
00:12:44,040 --> 00:12:45,959


331
00:12:45,959 --> 00:12:47,360


332
00:12:47,360 --> 00:12:50,459


333
00:12:50,459 --> 00:12:52,980


334
00:12:52,980 --> 00:12:54,540


335
00:12:54,540 --> 00:12:56,700
This is the next session.  Is it the speaker

336
00:12:56,700 --> 00:12:57,720


337
00:12:57,720 --> 00:13:00,300
of the slide that Mr. Haruyama is making public

338
00:13:00,300 --> 00:13:00,899
?

339
00:13:00,899 --> 00:13:04,380
This is what I quoted, but if you

340
00:13:04,380 --> 00:13:06,120
distribute it, it's a strike, isn't it? It's

341
00:13:06,120 --> 00:13:08,540
the result of investigating the C2 server

342
00:13:08,540 --> 00:13:12,180


343
00:13:12,180 --> 00:13:15,180


344
00:13:15,180 --> 00:13:16,700
.

345
00:13:16,700 --> 00:13:19,139
It

346
00:13:19,139 --> 00:13:22,740


347
00:13:22,740 --> 00:13:24,720
's almost impossible to manually analyze

348
00:13:24,720 --> 00:13:27,019


349
00:13:27,360 --> 00:13:30,300
malware like the one used by attackers.

350
00:13:30,300 --> 00:13:33,000


351
00:13:33,000 --> 00:13:34,019


352
00:13:34,019 --> 00:13:36,120
The system we're using

353
00:13:36,120 --> 00:13:38,700


354
00:13:38,700 --> 00:13:41,040
collects Cobalt Strike beacons from the Internet,

355
00:13:41,040 --> 00:13:44,339
automatically analyzes

356
00:13:44,339 --> 00:13:47,279
them, and accumulates the information.

357
00:13:47,279 --> 00:13:50,540


358
00:13:50,540 --> 00:13:52,680


359
00:13:52,680 --> 00:13:54,660
Information on the C2 server is collected

360
00:13:54,660 --> 00:13:57,480
from TOTAL, and based on that information, a beacon

361
00:13:57,480 --> 00:13:58,200
file is

362
00:13:58,200 --> 00:14:01,700
downloaded from the server. After that,

363
00:14:01,700 --> 00:14:03,899
analysis is

364
00:14:03,899 --> 00:14:05,880
automatically performed,

365
00:14:05,880 --> 00:14:09,480
Maruya's setting information is extracted, and the results

366
00:14:09,480 --> 00:14:12,120
are accumulated.

367
00:14:12,120 --> 00:14:15,300
So this cycle is also done automatically, so

368
00:14:15,300 --> 00:14:16,680
new malware is steadily gathering more and

369
00:14:16,680 --> 00:14:18,839
more

370
00:14:18,839 --> 00:14:21,380


371
00:14:21,899 --> 00:14:24,660
.

372
00:14:24,660 --> 00:14:25,870


373
00:14:25,870 --> 00:14:27,180


374
00:14:27,180 --> 00:14:29,639
In addition to the virus total,

375
00:14:29,639 --> 00:14:31,500


376
00:14:31,500 --> 00:14:32,399


377
00:14:32,399 --> 00:14:34,560


378
00:14:34,560 --> 00:14:36,120
there is a current situation where information is input daily by many researchers on

379
00:14:36,120 --> 00:14:38,519
various open platforms, so based on that information

380
00:14:38,519 --> 00:14:40,680
, C2 of Covalette Strike.  We

381
00:14:40,680 --> 00:14:43,860
're going to investigate the server, but it's the

382
00:14:43,860 --> 00:14:45,899
C2 server, isn't it?

383
00:14:45,899 --> 00:14:48,779


384
00:14:48,779 --> 00:14:53,339


385
00:14:53,339 --> 00:14:54,959


386
00:14:54,959 --> 00:14:57,560


387
00:14:57,560 --> 00:15:00,180
The acquired beacon

388
00:15:00,180 --> 00:15:02,899


389
00:15:03,899 --> 00:15:06,060


390
00:15:06,060 --> 00:15:08,639
contains configuration information encoded like

391
00:15:08,639 --> 00:15:11,100
this, and by analyzing this,

392
00:15:11,100 --> 00:15:13,019
various information about Maruya can be obtained.

393
00:15:13,019 --> 00:15:16,639


394
00:15:17,880 --> 00:15:19,620
This system is also an

395
00:15:19,620 --> 00:15:22,380
AWS server, and

396
00:15:22,380 --> 00:15:24,899
it runs on

397
00:15:24,899 --> 00:15:26,940
github.

398
00:15:26,940 --> 00:15:28,440


399
00:15:28,440 --> 00:15:30,060
The

400
00:15:30,060 --> 00:15:33,138


401
00:15:34,440 --> 00:15:37,260
collected analysis information is also

402
00:15:37,260 --> 00:15:40,500
published on github, so

403
00:15:40,500 --> 00:15:41,399


404
00:15:41,399 --> 00:15:44,660
I hope you can see it

405
00:15:45,500 --> 00:15:47,699
later.In addition to

406
00:15:47,699 --> 00:15:50,579
automatically collecting C2 servers,

407
00:15:50,579 --> 00:15:52,920
We

408
00:15:52,920 --> 00:15:56,220
are also preparing an API

409
00:15:56,220 --> 00:15:57,180
for manually

410
00:15:57,180 --> 00:16:00,180
investigating C2

411
00:16:00,180 --> 00:16:02,160


412
00:16:02,160 --> 00:16:03,420


413
00:16:03,420 --> 00:16:05,100


414
00:16:05,100 --> 00:16:08,220
servers.  Sometimes it is necessary to analyze manually,

415
00:16:08,220 --> 00:16:10,980
but if you prepare an API like this,

416
00:16:10,980 --> 00:16:14,100


417
00:16:14,100 --> 00:16:16,260
just give it an IP address

418
00:16:16,260 --> 00:16:18,779
and it will automatically download it

419
00:16:18,779 --> 00:16:20,579
and display the analysis results.

420
00:16:20,579 --> 00:16:22,260
So,

421
00:16:22,260 --> 00:16:23,399
it's

422
00:16:23,399 --> 00:16:25,860
possible to build a system like this.

423
00:16:25,860 --> 00:16:29,820
When doing C2 server or Maruya analysis,

424
00:16:29,820 --> 00:16:31,740
prepare an API and it

425
00:16:31,740 --> 00:16:34,680
's a part that can be done manually, so it's appropriate to leave some.

426
00:16:34,680 --> 00:16:36,060


427
00:16:36,060 --> 00:16:39,439
I think that

428
00:16:40,079 --> 00:16:42,480
this is

429
00:16:42,480 --> 00:16:45,060
a

430
00:16:45,060 --> 00:16:46,860
broken strike of the discovered C2 server,

431
00:16:46,860 --> 00:16:48,899
isn't it?

432
00:16:48,899 --> 00:16:52,440


433
00:16:52,440 --> 00:16:56,339
At the

434
00:16:56,339 --> 00:16:57,959
level of manual analysis

435
00:16:57,959 --> 00:17:00,000


436
00:17:00,000 --> 00:17:02,459
, I think you can see that it is not a level

437
00:17:02,459 --> 00:17:04,759


438
00:17:06,359 --> 00:17:09,059


439
00:17:09,059 --> 00:17:11,178


440
00:17:11,339 --> 00:17:14,339
that can be analyzed manually.

441
00:17:14,339 --> 00:17:16,980


442
00:17:16,980 --> 00:17:20,059
Although it is currently being released, I think that the current situation

443
00:17:20,059 --> 00:17:22,980
is that it is difficult to find something that can be used

444
00:17:22,980 --> 00:17:24,959


445
00:17:24,959 --> 00:17:28,260
.

446
00:17:28,260 --> 00:17:30,240
The list

447
00:17:30,240 --> 00:17:32,220
must be done manually,

448
00:17:32,220 --> 00:17:35,520


449
00:17:35,520 --> 00:17:36,419


450
00:17:36,419 --> 00:17:39,299


451
00:17:39,299 --> 00:17:40,620


452
00:17:40,620 --> 00:17:43,440
which will take a lot of time.

453
00:17:43,440 --> 00:17:46,679


454
00:17:46,679 --> 00:17:49,140
I think that automating the generation of rules has always been an issue for Murray analysts.

455
00:17:49,140 --> 00:17:50,460


456
00:17:50,460 --> 00:17:51,600


457
00:17:51,600 --> 00:17:53,280


458
00:17:53,280 --> 00:17:56,400


459
00:17:56,400 --> 00:17:58,799


460
00:17:58,799 --> 00:18:01,520


461
00:18:01,520 --> 00:18:03,840
Is there a way to automatically generate

462
00:18:03,840 --> 00:18:07,220
We are operating a system that automatically generates

463
00:18:08,700 --> 00:18:10,919
Yalao for specific patterns of malware

464
00:18:10,919 --> 00:18:12,000


465
00:18:12,000 --> 00:18:14,280


466
00:18:14,280 --> 00:18:16,020
.

467
00:18:16,020 --> 00:18:18,000
Here we

468
00:18:18,000 --> 00:18:19,919


469
00:18:19,919 --> 00:18:23,400


470
00:18:23,400 --> 00:18:25,860
have a campaign called V Loader called apt10 Blue Termite A41apt.

471
00:18:25,860 --> 00:18:27,900


472
00:18:27,900 --> 00:18:30,120
I

473
00:18:30,120 --> 00:18:31,980
would like to introduce

474
00:18:31,980 --> 00:18:33,660
the

475
00:18:33,660 --> 00:18:35,940


476
00:18:35,940 --> 00:18:36,840


477
00:18:36,840 --> 00:18:40,020


478
00:18:40,020 --> 00:18:41,880
loader-type Maruya that is used in the loader-type Maruya.  However, the

479
00:18:41,880 --> 00:18:43,320
decoder algorithm is very simple

480
00:18:43,320 --> 00:18:46,140
, and it looks like this

481
00:18:46,140 --> 00:18:50,220


482
00:18:50,220 --> 00:18:52,140


483
00:18:52,140 --> 00:18:55,260


484
00:18:55,260 --> 00:18:57,299
. It uses XY operations.

485
00:18:57,299 --> 00:18:59,400
The

486
00:18:59,400 --> 00:19:04,080
current situation is that there is not much change in the encoding algorithm of

487
00:19:04,080 --> 00:19:07,559
the loader.A common problem with loader-type round rocks

488
00:19:07,559 --> 00:19:10,559
is that the

489
00:19:10,559 --> 00:19:12,780
loader can be found, but the

490
00:19:12,780 --> 00:19:14,960
encoded malware that it reads

491
00:19:14,960 --> 00:19:17,580
cannot be found.

492
00:19:17,580 --> 00:19:20,299
In such cases,

493
00:19:20,299 --> 00:19:22,559
we know the encoding algorithm, so we know

494
00:19:22,559 --> 00:19:25,679


495
00:19:25,679 --> 00:19:28,080
what kind of encoding is used

496
00:19:28,080 --> 00:19:30,780


497
00:19:30,780 --> 00:19:32,940
to detect this malware.

498
00:19:32,940 --> 00:19:35,460


499
00:19:35,460 --> 00:19:37,200


500
00:19:37,200 --> 00:19:39,600
So this is the flow of the system, but

501
00:19:39,600 --> 00:19:40,460


502
00:19:40,460 --> 00:19:43,140
we acquired the V loader from Virus Total

503
00:19:43,140 --> 00:19:45,179


504
00:19:45,179 --> 00:19:47,039
, automatically analyzed Maruya, and

505
00:19:47,039 --> 00:19:49,440
automatically generated rules.  Then,

506
00:19:49,440 --> 00:19:51,600


507
00:19:51,600 --> 00:19:54,179
by applying that to the negative total, it becomes a flow that automatically

508
00:19:54,179 --> 00:19:56,220
hunts Maruya and analyzes

509
00:19:56,220 --> 00:19:58,620
it, repeating

510
00:19:58,620 --> 00:20:00,918


511
00:20:01,320 --> 00:20:04,320
this process.This system is also AWS.

512
00:20:04,320 --> 00:20:06,120
It runs on a serverless service and on the guitar

513
00:20:06,120 --> 00:20:08,460


514
00:20:08,460 --> 00:20:10,080
part.As you can see from the three

515
00:20:10,080 --> 00:20:11,400


516
00:20:11,400 --> 00:20:14,760
systems so far, most of Maruya Analysis can be done on AWS with only lambda and S3.

517
00:20:14,760 --> 00:20:17,039


518
00:20:17,039 --> 00:20:19,140


519
00:20:19,140 --> 00:20:21,840


520
00:20:21,840 --> 00:20:23,820
So here is an example of an automatically generated

521
00:20:23,820 --> 00:20:26,400


522
00:20:26,400 --> 00:20:29,220
rule that can be played.

523
00:20:29,220 --> 00:20:31,679


524
00:20:31,679 --> 00:20:34,160


525
00:20:34,799 --> 00:20:35,880


526
00:20:35,880 --> 00:20:37,919
As for the results of the V-loader, which was automatically analyzed,

527
00:20:37,919 --> 00:20:39,059


528
00:20:39,059 --> 00:20:41,280
we will publish it here on the Guitar Department as we did earlier

529
00:20:41,280 --> 00:20:43,080


530
00:20:43,080 --> 00:20:45,419
.

531
00:20:45,419 --> 00:20:46,200
When new

532
00:20:46,200 --> 00:20:48,539
specimens are found, they are

533
00:20:48,539 --> 00:20:51,120
added here every day, so if anyone is interested,

534
00:20:51,120 --> 00:20:52,020


535
00:20:52,020 --> 00:20:53,780
please take

536
00:20:53,780 --> 00:20:56,400


537
00:20:56,400 --> 00:20:59,299
a look

538
00:21:07,320 --> 00:21:10,799
.  Mr. Masubuchi of JP Cert

539
00:21:10,799 --> 00:21:13,140


540
00:21:13,140 --> 00:21:14,700


541
00:21:14,700 --> 00:21:17,940
would like to introduce the method

542
00:21:17,940 --> 00:21:19,260
of realizing a surface analysis system

543
00:21:19,260 --> 00:21:22,440


544
00:21:22,440 --> 00:21:24,720


545
00:21:24,720 --> 00:21:27,120


546
00:21:27,120 --> 00:21:30,000
on the cloud.  However,

547
00:21:30,000 --> 00:21:32,340
Maruya's name in those

548
00:21:32,340 --> 00:21:35,159
reports is based on the vendor's own standards and has a

549
00:21:35,159 --> 00:21:36,299
different

550
00:21:36,299 --> 00:21:38,880
name.

551
00:21:38,880 --> 00:21:40,620


552
00:21:40,620 --> 00:21:43,200
Then, what kind of Maruya

553
00:21:43,200 --> 00:21:43,820


554
00:21:43,820 --> 00:21:46,200


555
00:21:46,200 --> 00:21:49,159
is that? There is a problem that it is

556
00:21:49,200 --> 00:21:51,960


557
00:21:51,960 --> 00:21:55,140
very difficult for

558
00:21:55,140 --> 00:21:57,000


559
00:21:57,000 --> 00:21:59,280
analysts to understand.  If you can confirm it, you will be able to understand

560
00:21:59,280 --> 00:22:01,380
the relationship between the report and the information that your company has,

561
00:22:01,380 --> 00:22:03,120
so

562
00:22:03,120 --> 00:22:04,799


563
00:22:04,799 --> 00:22:07,440
I think that it will deepen your understanding in research.In

564
00:22:07,440 --> 00:22:08,580


565
00:22:08,580 --> 00:22:09,960
addition to blogs and reports

566
00:22:09,960 --> 00:22:12,059
, the same is true for Twitter.  I wonder if I can say that, and I think

567
00:22:12,059 --> 00:22:15,059
that hash

568
00:22:15,059 --> 00:22:18,840
sites and analysis blog URLs are

569
00:22:18,840 --> 00:22:20,340
published and

570
00:22:20,340 --> 00:22:22,740


571
00:22:22,740 --> 00:22:24,720
tweeted every day in this way.

572
00:22:24,720 --> 00:22:27,299


573
00:22:27,299 --> 00:22:29,580
Since you can see the relationship between the tweeted information and the information your company collects, it will be a factor that you can say that the

574
00:22:29,580 --> 00:22:31,860
research will

575
00:22:31,860 --> 00:22:34,740
progress

576
00:22:34,740 --> 00:22:37,140
more.A sandbox service

577
00:22:37,140 --> 00:22:41,460
is an effective solution to this problem.  In

578
00:22:41,460 --> 00:22:42,780


579
00:22:42,780 --> 00:22:44,460
short, we think that it is insufficient.The

580
00:22:44,460 --> 00:22:48,000
reason for this is that

581
00:22:48,000 --> 00:22:49,559
of course there are cases where the result of the sandbox fails,

582
00:22:49,559 --> 00:22:52,799
and even if the operation check succeeds, the

583
00:22:52,799 --> 00:22:54,780


584
00:22:54,780 --> 00:22:57,960
result is insufficient.  There are many cases, and the

585
00:22:57,960 --> 00:23:00,780
information that the self-propelled type has  I

586
00:23:00,780 --> 00:23:01,620
think that

587
00:23:01,620 --> 00:23:04,140


588
00:23:04,140 --> 00:23:07,020


589
00:23:07,020 --> 00:23:09,000


590
00:23:09,000 --> 00:23:10,980
the requirements for the Maruwa Analysis System that can be realized on the cloud that solved these problems this time can

591
00:23:10,980 --> 00:23:12,059
be

592
00:23:12,059 --> 00:23:14,520
considered in this form. First of all,

593
00:23:14,520 --> 00:23:15,840
it is simple.  The number

594
00:23:15,840 --> 00:23:17,720
of steps to execution is very small.

595
00:23:17,720 --> 00:23:21,659
Many Maruya can be analyzed at once.

596
00:23:21,659 --> 00:23:24,419
Additional customization is possible. The

597
00:23:24,419 --> 00:23:27,799
execution results can be saved

598
00:23:28,620 --> 00:23:30,539
.

599
00:23:30,539 --> 00:23:31,679


600
00:23:31,679 --> 00:23:34,140
Various analysis tools can be applied immediately to malware replicas that you want to check

601
00:23:34,140 --> 00:23:36,360


602
00:23:36,360 --> 00:23:38,418
.

603
00:23:38,880 --> 00:23:40,440
The operation flow of this system is as

604
00:23:40,440 --> 00:23:43,559
follows.

605
00:23:43,559 --> 00:23:45,419


606
00:23:45,419 --> 00:23:45,960


607
00:23:45,960 --> 00:23:48,240
The

608
00:23:48,240 --> 00:23:50,460


609
00:23:50,460 --> 00:23:52,500


610
00:23:52,500 --> 00:23:54,720
cloud system acquires the corresponding circles from the VT and applies

611
00:23:54,720 --> 00:23:57,000


612
00:23:57,000 --> 00:23:58,620
the analysis tools prepared in advance

613
00:23:58,620 --> 00:24:03,020
to them to apply the analysis results.  In

614
00:24:03,419 --> 00:24:05,760
this system, we created

615
00:24:05,760 --> 00:24:07,679


616
00:24:07,679 --> 00:24:09,500
an add-on for the

617
00:24:09,500 --> 00:24:12,960


618
00:24:12,960 --> 00:24:14,039


619
00:24:14,039 --> 00:24:16,919
Firefox browser as a mechanism for sending hash values

620
00:24:16,919 --> 00:24:19,740
to the cloud.  If you go there,

621
00:24:19,740 --> 00:24:22,260
right-click

622
00:24:22,260 --> 00:24:24,419
and there should be a button such as Maru Analyst AWS, but

623
00:24:24,419 --> 00:24:25,799
by selecting this, the

624
00:24:25,799 --> 00:24:27,179


625
00:24:27,179 --> 00:24:29,700
time of transmission will be sent on the cloud and you can view the analysis results About

626
00:24:29,700 --> 00:24:32,179
each

627
00:24:32,700 --> 00:24:33,840
selected

628
00:24:33,840 --> 00:24:36,480
Maruya  The

629
00:24:36,480 --> 00:24:38,940
results of this analysis tool are shown

630
00:24:38,940 --> 00:24:40,860
here. You can check the obtained hashes and their

631
00:24:40,860 --> 00:24:43,500
analysis results from your browser like this

632
00:24:43,500 --> 00:24:47,059
.

633
00:24:47,220 --> 00:24:49,799
This system is on AWS.

634
00:24:49,799 --> 00:24:52,140
It is possible to build an environment for the environment

635
00:24:52,140 --> 00:24:53,760
, and the mechanism is

636
00:24:53,760 --> 00:24:55,500
like this.

637
00:24:55,500 --> 00:24:57,299
Using a Firefox add-on, first,

638
00:24:57,299 --> 00:24:58,260


639
00:24:58,260 --> 00:24:59,280


640
00:24:59,280 --> 00:25:01,559
the client sends 8 seeds of information

641
00:25:01,559 --> 00:25:03,539
to

642
00:25:03,539 --> 00:25:06,000
AWS.  We will send the start in batch In batch, we will run

643
00:25:06,000 --> 00:25:06,799


644
00:25:06,799 --> 00:25:09,960


645
00:25:09,960 --> 00:25:12,419
the various analysis tools prepared serverless

646
00:25:12,419 --> 00:25:15,360
and save the execution results to SD

647
00:25:15,360 --> 00:25:16,280


648
00:25:16,280 --> 00:25:18,900
Finally, it will be possible to check it from the client

649
00:25:18,900 --> 00:25:22,440
In other

650
00:25:22,440 --> 00:25:24,659
words, apart from this flow, we

651
00:25:24,659 --> 00:25:25,620
also

652
00:25:25,620 --> 00:25:27,240
moved the mechanism for that Twitter, and we made the Twitter

653
00:25:27,240 --> 00:25:29,580
crawler operate with a certain sense, and by that, we

654
00:25:29,580 --> 00:25:32,460
crawled

655
00:25:32,460 --> 00:25:33,900
hash values ​​tweeted

656
00:25:33,900 --> 00:25:36,779
and blog links.

657
00:25:36,779 --> 00:25:39,299
Then, the

658
00:25:39,299 --> 00:25:42,740
hash value written there is extracted, and the

659
00:25:43,200 --> 00:25:43,980


660
00:25:43,980 --> 00:25:46,740
analysis

661
00:25:46,740 --> 00:25:48,659
tool that I explained earlier is automatically run,

662
00:25:48,659 --> 00:25:52,159
and it is possible to store it with STA

663
00:25:52,559 --> 00:25:54,659


664
00:25:54,659 --> 00:25:57,559


665
00:25:58,919 --> 00:26:01,260
.  I think there is a blog post like this,

666
00:26:01,260 --> 00:26:04,039
but I

667
00:26:04,039 --> 00:26:07,620
would like you to first select the range like this

668
00:26:07,620 --> 00:26:09,678
.

669
00:26:11,100 --> 00:26:12,659
After that,

670
00:26:12,659 --> 00:26:15,240
right-click Analysis on AWS

671
00:26:15,240 --> 00:26:17,940
Click here, click here,

672
00:26:17,940 --> 00:26:21,779
and you can display the analysis results.

673
00:26:21,779 --> 00:26:23,400
It actually

674
00:26:23,400 --> 00:26:25,320
takes a few minutes to analyze, but in this demonstration,

675
00:26:25,320 --> 00:26:28,919
we will send it in a form that omits that.

676
00:26:28,919 --> 00:26:30,419


677
00:26:30,419 --> 00:26:31,980


678
00:26:31,980 --> 00:26:34,080


679
00:26:34,080 --> 00:26:35,640


680
00:26:35,640 --> 00:26:40,700
It is also possible to check the 2nd bullet, etc.

681
00:26:41,220 --> 00:26:43,080
For example, if you want to check the floss screen here,

682
00:26:43,080 --> 00:26:45,419
you can click

683
00:26:45,419 --> 00:26:49,520
on it and you can see the contents like this

684
00:26:52,380 --> 00:26:55,080
.

685
00:26:55,080 --> 00:26:56,820
It is also possible to add an existing tool in addition, and if

686
00:26:56,820 --> 00:26:59,940
you select the create button like this in the lower right corner,

687
00:26:59,940 --> 00:27:02,460


688
00:27:02,460 --> 00:27:05,279
like this, it's the

689
00:27:05,279 --> 00:27:07,380
result of an existing tool, but

690
00:27:07,380 --> 00:27:09,120
it's automatically acquired.

691
00:27:09,120 --> 00:27:10,919


692
00:27:10,919 --> 00:27:13,380
It is also possible to display and display the results that will generate the results.

693
00:27:13,380 --> 00:27:14,820


694
00:27:14,820 --> 00:27:16,140


695
00:27:16,140 --> 00:27:18,120


696
00:27:18,120 --> 00:27:20,220


697
00:27:20,220 --> 00:27:22,799


698
00:27:22,799 --> 00:27:25,220


699
00:27:25,919 --> 00:27:28,080
No. When building such a system on the cloud

700
00:27:28,080 --> 00:27:29,159


701
00:27:29,159 --> 00:27:31,820


702
00:27:31,820 --> 00:27:36,179
, I think there will be a desire

703
00:27:36,179 --> 00:27:38,760
to automate the construction itself.

704
00:27:38,760 --> 00:27:41,039


705
00:27:41,039 --> 00:27:42,659


706
00:27:42,659 --> 00:27:44,039
This time,

707
00:27:44,039 --> 00:27:46,260
we are using IAC to

708
00:27:46,260 --> 00:27:48,360
automate it.

709
00:27:48,360 --> 00:27:51,720
However, IAC also has a problem

710
00:27:51,720 --> 00:27:52,980
.

711
00:27:52,980 --> 00:27:55,080


712
00:27:55,080 --> 00:27:56,460


713
00:27:56,460 --> 00:28:00,900
there is  So,

714
00:28:00,900 --> 00:28:02,640
for example

715
00:28:02,640 --> 00:28:04,679
, if it's a simple system with few updates,

716
00:28:04,679 --> 00:28:06,600


717
00:28:06,600 --> 00:28:09,179
you can think of it as not needing to use IAC.

718
00:28:09,179 --> 00:28:10,320


719
00:28:10,320 --> 00:28:11,580


720
00:28:11,580 --> 00:28:15,139
In

721
00:28:16,260 --> 00:28:17,640
the case of this system, IAC is used in

722
00:28:17,640 --> 00:28:19,500
that managing it with IAC makes

723
00:28:19,500 --> 00:28:21,600
it easy to incorporate new analysis logic

724
00:28:21,600 --> 00:28:23,820


725
00:28:23,820 --> 00:28:25,860


726
00:28:25,860 --> 00:28:27,960
.

727
00:28:27,960 --> 00:28:29,400


728
00:28:29,400 --> 00:28:32,940


729
00:28:32,940 --> 00:28:35,419


730
00:28:36,299 --> 00:28:38,820
Using this system, anyone can easily build an analysis analysis environment, especially with this system.

731
00:28:38,820 --> 00:28:40,620


732
00:28:40,620 --> 00:28:41,880


733
00:28:41,880 --> 00:28:44,520


734
00:28:44,520 --> 00:28:47,520
It's provided in this way.

735
00:28:47,520 --> 00:28:49,260
By running Terraphone in githubson

736
00:28:49,260 --> 00:28:50,640


737
00:28:50,640 --> 00:28:52,440


738
00:28:52,440 --> 00:28:56,000
, an environment is automatically built

739
00:28:56,700 --> 00:28:58,919


740
00:28:58,919 --> 00:29:00,360


741
00:29:00,360 --> 00:29:02,520
on AWS.

742
00:29:02,520 --> 00:29:03,900


743
00:29:03,900 --> 00:29:05,520


744
00:29:05,520 --> 00:29:07,760


745
00:29:08,640 --> 00:29:11,159
First of all,

746
00:29:11,159 --> 00:29:12,120


747
00:29:12,120 --> 00:29:13,740


748
00:29:13,740 --> 00:29:15,419
it is necessary to prepare a chron or forked

749
00:29:15,419 --> 00:29:18,659
repository from jpsert's github.After that, there are some setting items,

750
00:29:18,659 --> 00:29:19,799
but

751
00:29:19,799 --> 00:29:22,760
setting  There's a section called "

752
00:29:24,899 --> 00:29:26,880
Secret Actions

753
00:29:26,880 --> 00:29:29,340
" in the box,

754
00:29:29,340 --> 00:29:32,820


755
00:29:32,820 --> 00:29:35,279


756
00:29:35,279 --> 00:29:37,980
but you need to register account information related to AWS in advance in the settings section

757
00:29:37,980 --> 00:29:42,059
.  There is also a

758
00:29:42,059 --> 00:29:45,360
setting item in , and there

759
00:29:45,360 --> 00:29:48,179
is a file that defines this variable,

760
00:29:48,179 --> 00:29:51,419
but it is necessary to edit and enter the VT private API key to be used here, the

761
00:29:51,419 --> 00:29:53,520


762
00:29:53,520 --> 00:29:55,140
Twitter token

763
00:29:55,140 --> 00:29:57,960
email address, etc.

764
00:29:57,960 --> 00:30:01,100


765
00:30:02,100 --> 00:30:04,200
After that

766
00:30:04,200 --> 00:30:06,240
, I think there are several ways to get the actions to work

767
00:30:06,240 --> 00:30:08,279
, but we need to

768
00:30:08,279 --> 00:30:12,059
commit, so we will commit this time

769
00:30:12,059 --> 00:30:14,039


770
00:30:14,039 --> 00:30:16,080
.

771
00:30:16,080 --> 00:30:19,200


772
00:30:19,200 --> 00:30:21,899
You can check the contents of the

773
00:30:21,899 --> 00:30:24,179


774
00:30:24,179 --> 00:30:26,159
deployment from here.  Now, I am sending this in an abbreviated form

775
00:30:26,159 --> 00:30:28,220
. When the

776
00:30:33,240 --> 00:30:35,820
deployment is complete, you

777
00:30:35,820 --> 00:30:38,399


778
00:30:38,399 --> 00:30:39,960
can see something like a green image check box in the upper left

779
00:30:39,960 --> 00:30:42,419
.

780
00:30:42,419 --> 00:30:44,460
This

781
00:30:44,460 --> 00:30:48,140


782
00:30:50,179 --> 00:30:52,919


783
00:30:52,919 --> 00:30:54,539
surface analysis system is

784
00:30:54,539 --> 00:30:56,580
open to the public on this github, so I think that

785
00:30:56,580 --> 00:30:58,559
anyone can easily practice it immediately

786
00:30:58,559 --> 00:31:01,340


787
00:31:01,520 --> 00:31:04,020
.

788
00:31:04,020 --> 00:31:07,140


789
00:31:07,140 --> 00:31:10,279
I would like to introduce a method of realizing a system on the cloud. A system in which investigation is limited by the size

790
00:31:10,740 --> 00:31:13,320
of the memory

791
00:31:13,320 --> 00:31:16,320
, the size of the memory image,

792
00:31:16,320 --> 00:31:17,640
or the size and

793
00:31:17,640 --> 00:31:18,960
number of memory when performing memory frendics.

794
00:31:18,960 --> 00:31:20,760


795
00:31:20,760 --> 00:31:22,679


796
00:31:22,679 --> 00:31:24,179


797
00:31:24,179 --> 00:31:26,880
I think that it cannot be said that it is a very good memory-foreign axis system. I think that a system that does not have such restrictions and

798
00:31:26,880 --> 00:31:29,460
that can simultaneously analyze memory

799
00:31:29,460 --> 00:31:31,200
images

800
00:31:31,200 --> 00:31:33,659
can be called a better system.

801
00:31:33,659 --> 00:31:36,659
This time,

802
00:31:36,659 --> 00:31:39,840
we have built a memory orange check system on the cloud that can easily be scaled out

803
00:31:39,840 --> 00:31:41,399


804
00:31:41,399 --> 00:31:43,080


805
00:31:43,080 --> 00:31:45,179
, so I would like to introduce it

806
00:31:45,179 --> 00:31:48,020
.

807
00:31:49,200 --> 00:31:51,000


808
00:31:51,000 --> 00:31:52,919


809
00:31:52,919 --> 00:31:55,500
First of all, we acquire

810
00:31:55,500 --> 00:31:57,480
a

811
00:31:57,480 --> 00:31:58,799


812
00:31:58,799 --> 00:32:00,980
memory image and upload it to the cloud.

813
00:32:00,980 --> 00:32:03,899


814
00:32:03,899 --> 00:32:07,020
We run volatility 3 on the uploaded memory

815
00:32:07,020 --> 00:32:09,799
and save the analysis results

816
00:32:10,500 --> 00:32:13,919
.

817
00:32:13,919 --> 00:32:16,559
The system is as follows.

818
00:32:16,559 --> 00:32:17,640


819
00:32:17,640 --> 00:32:18,659


820
00:32:18,659 --> 00:32:19,500


821
00:32:19,500 --> 00:32:21,600
First, upload the memory image obtained from the client to S3.

822
00:32:21,600 --> 00:32:24,179
Starting from the upload

823
00:32:24,179 --> 00:32:24,779


824
00:32:24,779 --> 00:32:28,440
, start preparation with lambda. This time,

825
00:32:28,440 --> 00:32:30,320
we used volatility 3.

826
00:32:30,320 --> 00:32:33,120
However, this is

827
00:32:33,120 --> 00:32:34,740
stored as a Docker image on ecr,

828
00:32:34,740 --> 00:32:39,080


829
00:32:39,120 --> 00:32:40,260


830
00:32:40,260 --> 00:32:42,779
so it is possible to execute

831
00:32:42,779 --> 00:32:45,299
volatility 3 in a batch.

832
00:32:45,299 --> 00:32:47,159


833
00:32:47,159 --> 00:32:49,380


834
00:32:49,380 --> 00:32:50,520


835
00:32:50,520 --> 00:32:54,620
We also have a mechanism to notify you by e-mail when it takes a very long time.

836
00:32:55,260 --> 00:32:58,380
The divided part is the

837
00:32:58,380 --> 00:33:01,500
part that can be scaled out.

838
00:33:01,500 --> 00:33:03,120
By using the cloud, you can

839
00:33:03,120 --> 00:33:04,500
easily realize a

840
00:33:04,500 --> 00:33:06,179
memory forensics system that scales out

841
00:33:06,179 --> 00:33:08,340


842
00:33:08,340 --> 00:33:09,779


843
00:33:09,779 --> 00:33:11,220
.

844
00:33:11,220 --> 00:33:13,919
I'm thinking that by utilizing the cloud, it will be possible for people in their tens of generations

845
00:33:13,919 --> 00:33:16,679
to perform memory forensing in parallel

846
00:33:16,679 --> 00:33:18,299


847
00:33:18,299 --> 00:33:21,860


848
00:33:22,019 --> 00:33:24,419


849
00:33:24,419 --> 00:33:27,000
.

850
00:33:27,000 --> 00:33:28,919


851
00:33:28,919 --> 00:33:30,419


852
00:33:30,419 --> 00:33:31,799
Each command or

853
00:33:31,799 --> 00:33:33,179
plug-in name is displayed on the menu screen on the left, but

854
00:33:33,179 --> 00:33:36,000
by selecting it,

855
00:33:36,000 --> 00:33:39,860
you can check the contents from

856
00:33:40,260 --> 00:33:42,960
the browser.  This is an example of the execution results of the PS tree

857
00:33:42,960 --> 00:33:45,779
. In this way,

858
00:33:45,779 --> 00:33:47,460


859
00:33:47,460 --> 00:33:51,019
you can check the relationship between processes from

860
00:33:52,380 --> 00:33:53,580


861
00:33:53,580 --> 00:33:56,039


862
00:33:56,039 --> 00:33:58,760
the browser.

863
00:33:59,279 --> 00:34:02,279
First of all, I think it's the AWS screen,

864
00:34:02,279 --> 00:34:05,159
but here's

865
00:34:05,159 --> 00:34:07,080
the upload button.

866
00:34:07,080 --> 00:34:09,599


867
00:34:09,599 --> 00:34:11,280


868
00:34:11,280 --> 00:34:13,320


869
00:34:13,320 --> 00:34:15,480
Drag and drop

870
00:34:15,480 --> 00:34:17,599


871
00:34:18,060 --> 00:34:20,040
After that, you can upload by pressing the upload button

872
00:34:20,040 --> 00:34:22,679


873
00:34:22,679 --> 00:34:24,780
.

874
00:34:24,780 --> 00:34:26,639


875
00:34:26,639 --> 00:34:28,859


876
00:34:28,859 --> 00:34:31,800


877
00:34:31,800 --> 00:34:34,800
You can check it from the browser in

878
00:34:34,800 --> 00:34:38,780
this way

879
00:34:42,960 --> 00:34:44,760


880
00:34:44,760 --> 00:34:46,679
. If you check the list of processes in the timeline like this,

881
00:34:46,679 --> 00:34:49,099
it looks like this.

882
00:34:50,399 --> 00:34:52,320


883
00:34:52,320 --> 00:34:56,000
It's a diagram

884
00:35:15,599 --> 00:35:19,339
Also, is it a registry or a

885
00:35:23,880 --> 00:35:27,920
module? Yes

886
00:35:28,440 --> 00:35:30,660


887
00:35:30,660 --> 00:35:32,339
, I think there are some plug-ins with volatility 3,

888
00:35:32,339 --> 00:35:34,800
but

889
00:35:34,800 --> 00:35:36,480
it's also

890
00:35:36,480 --> 00:35:39,380
possible to add this plug-in one by one.

891
00:35:40,260 --> 00:35:43,680
This system is similar, but

892
00:35:43,680 --> 00:35:45,960
we use Terra Forma

893
00:35:45,960 --> 00:35:48,720
to provide a means for anyone to easily build an environment on AWS

894
00:35:48,720 --> 00:35:51,680
.

895
00:35:52,380 --> 00:35:53,880


896
00:35:53,880 --> 00:35:56,900


897
00:35:57,300 --> 00:36:00,180


898
00:36:00,180 --> 00:36:02,700
Regarding this, it is also published on this github

899
00:36:02,700 --> 00:36:05,839
. Finally, I would like to introduce tips on building systems for systems

900
00:36:06,119 --> 00:36:07,920


901
00:36:07,920 --> 00:36:09,839
that use the cloud so far.

902
00:36:09,839 --> 00:36:11,760
I think there are several, but

903
00:36:11,760 --> 00:36:13,920


904
00:36:13,920 --> 00:36:16,560
there are limit values ​​set for the execution time of each service, memory size, and data size

905
00:36:16,560 --> 00:36:19,800
.

906
00:36:19,800 --> 00:36:21,960


907
00:36:21,960 --> 00:36:24,180


908
00:36:24,180 --> 00:36:25,740
I think it's

909
00:36:25,740 --> 00:36:27,740


910
00:36:27,780 --> 00:36:30,060


911
00:36:30,060 --> 00:36:32,280
necessary to take these things into account when transferring very large

912
00:36:32,280 --> 00:36:34,020
amounts of data.

913
00:36:34,020 --> 00:36:37,140


914
00:36:37,140 --> 00:36:38,160


915
00:36:38,160 --> 00:36:40,500
If you are sharing the

916
00:36:40,500 --> 00:36:42,960
AWS cli,

917
00:36:42,960 --> 00:36:44,880


918
00:36:44,880 --> 00:36:47,460
you can say that Sierra is suitable in this case when dealing with large

919
00:36:47,460 --> 00:36:51,079


920
00:36:51,480 --> 00:36:53,760
amounts of

921
00:36:53,760 --> 00:36:56,099
data.  There is a limit of 3000 minutes per month

922
00:36:56,099 --> 00:36:59,960


923
00:37:00,300 --> 00:37:01,859


924
00:37:01,859 --> 00:37:03,480


925
00:37:03,480 --> 00:37:05,280


926
00:37:05,280 --> 00:37:07,079


927
00:37:07,079 --> 00:37:08,940


928
00:37:08,940 --> 00:37:12,000
.  When you think about actual use,

929
00:37:12,000 --> 00:37:13,320


930
00:37:13,320 --> 00:37:15,180
there is a possibility that you will get stuck immediately due to the operating time limit,

931
00:37:15,180 --> 00:37:16,380
so

932
00:37:16,380 --> 00:37:17,880
I think you need to be careful

933
00:37:17,880 --> 00:37:20,119


934
00:37:20,940 --> 00:37:23,400
.

935
00:37:23,400 --> 00:37:24,720
I would like to summarize the main points. Maruyama

936
00:37:24,720 --> 00:37:25,980
: In

937
00:37:25,980 --> 00:37:27,599
this presentation, I

938
00:37:27,599 --> 00:37:29,220


939
00:37:29,220 --> 00:37:32,040


940
00:37:32,040 --> 00:37:35,099
have shared with

941
00:37:35,099 --> 00:37:38,339
you several examples of creating a mechanism to counter the reverberation life cycle.

942
00:37:38,339 --> 00:37:41,339
We introduced a method for building an analysis system on the

943
00:37:41,339 --> 00:37:43,380


944
00:37:43,380 --> 00:37:46,380
cloud using specific examples

945
00:37:46,380 --> 00:37:48,599
.

946
00:37:48,599 --> 00:37:50,280


947
00:37:50,280 --> 00:37:52,260


948
00:37:52,260 --> 00:37:53,760


949
00:37:53,760 --> 00:37:55,800
I

950
00:37:55,800 --> 00:37:57,660
would like

951
00:37:57,660 --> 00:37:59,400
to conclude my presentation with this

952
00:37:59,400 --> 00:38:02,180
. Thank you for your attention.

