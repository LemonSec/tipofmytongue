1
00:00:00,359 --> 00:00:05,220
hi everyone I'm hariyama today I talk

2
00:00:05,220 --> 00:00:08,580
about my internet-wide Marvel City

3
00:00:08,580 --> 00:00:13,760
scanning research focusing on apt Marvel

4
00:00:14,480 --> 00:00:17,340
I imagine yesterday researcher with

5
00:00:17,340 --> 00:00:20,699
VMware threat analysis unit for Marie

6
00:00:20,699 --> 00:00:22,320
carbon black

7
00:00:22,320 --> 00:00:25,199
I did several researches in the past

8
00:00:25,199 --> 00:00:29,580
such as firmware acquisition MIT attack

9
00:00:29,580 --> 00:00:33,739
defeating compiler level classifications

10
00:00:33,739 --> 00:00:37,519
scanning and so on

11
00:00:38,100 --> 00:00:39,540
first of all

12
00:00:39,540 --> 00:00:42,840
please take a look at this virus total

13
00:00:42,840 --> 00:00:47,540
result against one IP address

14
00:00:47,579 --> 00:00:50,940
antivirus engines detected it as

15
00:00:50,940 --> 00:00:52,620
harmless

16
00:00:52,620 --> 00:00:54,960
zero detection

17
00:00:54,960 --> 00:00:57,719
but I'm sure it's malicious

18
00:00:57,719 --> 00:00:59,039
in fact

19
00:00:59,039 --> 00:01:03,120
these IPS are winning TI budget for C2

20
00:01:03,120 --> 00:01:07,080
server with TRS protocol

21
00:01:07,080 --> 00:01:11,220
the C2 server has been active at least

22
00:01:11,220 --> 00:01:12,119
since

23
00:01:12,119 --> 00:01:17,520
February and probably even now

24
00:01:17,520 --> 00:01:21,780
why can I conclude that

25
00:01:21,780 --> 00:01:23,100
because

26
00:01:23,100 --> 00:01:25,140
since 2019

27
00:01:25,140 --> 00:01:27,240
I repeated system

28
00:01:27,240 --> 00:01:28,740
discovering

29
00:01:28,740 --> 00:01:31,380
active Memorial C2 servers on the

30
00:01:31,380 --> 00:01:34,979
Internet by protocol emulation

31
00:01:34,979 --> 00:01:39,060
then use these intelligence to detect

32
00:01:39,060 --> 00:01:44,220
and stop threats in almost real time

33
00:01:44,220 --> 00:01:47,640
as I show in this example

34
00:01:47,640 --> 00:01:51,240
IP reputation is not effective

35
00:01:51,240 --> 00:01:55,020
for catching fresh Mario C2 servers

36
00:01:55,020 --> 00:01:58,380
especially when APD actors

37
00:01:58,380 --> 00:02:01,320
limit their manual deployment to

38
00:02:01,320 --> 00:02:04,740
specific targets

39
00:02:04,740 --> 00:02:08,459
in this presentation I will explain how

40
00:02:08,459 --> 00:02:12,599
to emulate the C2 Protocols of to

41
00:02:12,599 --> 00:02:15,420
long-term apt malware

42
00:02:15,420 --> 00:02:21,079
green NTI version 4 and Shadow path

43
00:02:23,400 --> 00:02:26,959
this is today's overview

44
00:02:29,720 --> 00:02:33,959
first I summarize the target malware in

45
00:02:33,959 --> 00:02:35,940
this table

46
00:02:35,940 --> 00:02:40,680
both are utilized by PRC linked Side by

47
00:02:40,680 --> 00:02:42,420
spinach reductors

48
00:02:42,420 --> 00:02:47,340
and support multiple City protocols

49
00:02:47,340 --> 00:02:51,959
the big difference is the preference

50
00:02:51,959 --> 00:02:54,599
there has been minimal reporting on

51
00:02:54,599 --> 00:02:57,660
winning LTI while

52
00:02:57,660 --> 00:02:59,700
there are a lot of Publications

53
00:02:59,700 --> 00:03:02,640
regarding shadowbot

54
00:03:02,640 --> 00:03:06,000
I will explain details including the

55
00:03:06,000 --> 00:03:10,220
unique feature in each section

56
00:03:11,640 --> 00:03:14,819
first I explained the vlti version for

57
00:03:14,819 --> 00:03:17,780
C2 scanning

58
00:03:18,379 --> 00:03:22,159
realityi is malware

59
00:03:22,159 --> 00:03:25,800
seeing many large scale attacks and has

60
00:03:25,800 --> 00:03:30,120
been attributed to apt-41 as a list

61
00:03:30,120 --> 00:03:33,360
in 2013

62
00:03:33,360 --> 00:03:35,819
winning TI was first reported by

63
00:03:35,819 --> 00:03:37,860
Kaspersky

64
00:03:37,860 --> 00:03:39,000
and

65
00:03:39,000 --> 00:03:43,739
in 2015 no better analyzed the startup

66
00:03:43,739 --> 00:03:47,940
sequence and C2 protocol of version 3.

67
00:03:47,940 --> 00:03:51,120
the vnti version 3 components are

68
00:03:51,120 --> 00:03:54,620
separated into three components

69
00:03:54,620 --> 00:03:58,200
dropper service and worker

70
00:03:58,200 --> 00:04:01,200
the Opera decrypts and saves service and

71
00:04:01,200 --> 00:04:05,220
worker then service runs worker that is

72
00:04:05,220 --> 00:04:07,640
a payroll

73
00:04:08,340 --> 00:04:10,920
in 2016

74
00:04:10,920 --> 00:04:13,920
I observed the version 3 startup

75
00:04:13,920 --> 00:04:16,199
sequence changed

76
00:04:16,199 --> 00:04:18,899
mechanical networks first described the

77
00:04:18,899 --> 00:04:22,620
new variants at the Json Japan security

78
00:04:22,620 --> 00:04:25,139
analyst conference

79
00:04:25,139 --> 00:04:27,300
to differentiate from other previous

80
00:04:27,300 --> 00:04:28,800
versions

81
00:04:28,800 --> 00:04:33,540
I refer to the variance as version 4.

82
00:04:33,540 --> 00:04:36,320
the version 4 is more carefully

83
00:04:36,320 --> 00:04:39,900
implemented to make the worker code

84
00:04:39,900 --> 00:04:42,840
equation harder

85
00:04:42,840 --> 00:04:45,120
that's why there is very limited public

86
00:04:45,120 --> 00:04:48,979
information about this version

87
00:04:51,000 --> 00:04:53,100
in 2018

88
00:04:53,100 --> 00:04:56,699
I identified our new worker component

89
00:04:56,699 --> 00:04:59,759
Foods seed support converts completely

90
00:04:59,759 --> 00:05:03,600
different from the existing version 3.

91
00:05:03,600 --> 00:05:08,040
so I analyzed the new version for C2

92
00:05:08,040 --> 00:05:10,400
protocol

93
00:05:11,160 --> 00:05:14,460
the version of ovaca component supports

94
00:05:14,460 --> 00:05:16,740
5c support codes

95
00:05:16,740 --> 00:05:20,639
basically the same customized packet is

96
00:05:20,639 --> 00:05:22,740
handling every protocol

97
00:05:22,740 --> 00:05:25,979
but there are minor differences and

98
00:05:25,979 --> 00:05:29,160
additional structures

99
00:05:29,160 --> 00:05:34,080
TRS and https are encrypted versions of

100
00:05:34,080 --> 00:05:37,259
TCP and http

101
00:05:37,259 --> 00:05:39,360
as a unique point

102
00:05:39,360 --> 00:05:43,560
this malware has a server mode accepting

103
00:05:43,560 --> 00:05:45,479
incoming packets

104
00:05:45,479 --> 00:05:49,320
it behaves like a C2 server

105
00:05:49,320 --> 00:05:52,860
this Behavior was helpful to verify the

106
00:05:52,860 --> 00:05:55,560
correctness of the protocol format and

107
00:05:55,560 --> 00:05:58,500
encryption for the C2 scanner

108
00:05:58,500 --> 00:06:01,100
development

109
00:06:02,400 --> 00:06:05,060
the customized packet is separated into

110
00:06:05,060 --> 00:06:07,979
header and payroll

111
00:06:07,979 --> 00:06:10,320
both are encrypted

112
00:06:10,320 --> 00:06:14,160
except for the temp key seed value in

113
00:06:14,160 --> 00:06:15,660
the header

114
00:06:15,660 --> 00:06:19,979
the signature and payroll ranks values

115
00:06:19,979 --> 00:06:22,680
are checked after the decryption the

116
00:06:22,680 --> 00:06:25,520
receiver side

117
00:06:25,919 --> 00:06:28,800
the initial hand track packet period

118
00:06:28,800 --> 00:06:30,120
contains

119
00:06:30,120 --> 00:06:31,680
period type

120
00:06:31,680 --> 00:06:33,360
guid

121
00:06:33,360 --> 00:06:37,880
Ed sequence number and so on

122
00:06:38,759 --> 00:06:41,759
actually the pocket encryption algorithm

123
00:06:41,759 --> 00:06:45,539
is still unknown so I emulated using

124
00:06:45,539 --> 00:06:47,360
guide app core

125
00:06:47,360 --> 00:06:50,280
there are two kinds of keys

126
00:06:50,280 --> 00:06:53,639
one is different dynamically generated

127
00:06:53,639 --> 00:06:57,840
key from the temp key seed value

128
00:06:57,840 --> 00:07:02,280
Discord shows the key generation

129
00:07:02,280 --> 00:07:05,100
the other is a portion with a Sharma

130
00:07:05,100 --> 00:07:09,560
hash value over hard-coded string

131
00:07:10,500 --> 00:07:13,860
in the TCP and UDP protocols the

132
00:07:13,860 --> 00:07:17,160
customized packet data is simply sent

133
00:07:17,160 --> 00:07:21,479
on the other hand in HTTP protocol

134
00:07:21,479 --> 00:07:24,419
the packet is sent through a post method

135
00:07:24,419 --> 00:07:27,960
with several headers and the cookie

136
00:07:27,960 --> 00:07:28,979
header value

137
00:07:28,979 --> 00:07:33,258
contains its pocket size

138
00:07:33,840 --> 00:07:37,020
the cookie header value is a string made

139
00:07:37,020 --> 00:07:40,380
up of 5 divided hex values in Little

140
00:07:40,380 --> 00:07:41,699
India

141
00:07:41,699 --> 00:07:45,060
by using this calculation the previous

142
00:07:45,060 --> 00:07:51,919
example value is decoded as 34 in HEX

143
00:07:52,919 --> 00:07:56,400
prior to the post request an initial get

144
00:07:56,400 --> 00:07:58,620
request will be made

145
00:07:58,620 --> 00:08:01,800
in the get request all values except the

146
00:08:01,800 --> 00:08:04,919
cookie are randomly generated

147
00:08:04,919 --> 00:08:09,419
so the decoded size value is zero

148
00:08:09,419 --> 00:08:12,539
I'm not sure about the purpose but this

149
00:08:12,539 --> 00:08:15,539
Behavior can be utilized for the city

150
00:08:15,539 --> 00:08:18,199
scanning

151
00:08:19,039 --> 00:08:22,139
after the initial handshake

152
00:08:22,139 --> 00:08:25,620
the packet period contains the command

153
00:08:25,620 --> 00:08:29,099
ID and dispatcher ID in the nested

154
00:08:29,099 --> 00:08:32,399
nested structure to control the infected

155
00:08:32,399 --> 00:08:34,760
host

156
00:08:34,799 --> 00:08:37,860
most CC commands are related to program

157
00:08:37,860 --> 00:08:42,659
management but like version 3.

158
00:08:42,659 --> 00:08:45,480
the detailed commands will be compared

159
00:08:45,480 --> 00:08:47,700
with another malware called spider

160
00:08:47,700 --> 00:08:50,540
Raider

161
00:08:52,019 --> 00:08:55,080
for the winning TI version 460 scanning

162
00:08:55,080 --> 00:08:58,920
I implemented the two Python scripts

163
00:08:58,920 --> 00:09:02,880
it's um realistic to scan for range of

164
00:09:02,880 --> 00:09:05,399
wipes on the internet with Python

165
00:09:05,399 --> 00:09:10,320
scripts so I first use that map for

166
00:09:10,320 --> 00:09:14,820
to generate input or Candida

167
00:09:14,820 --> 00:09:18,060
next the standard on python scripture

168
00:09:18,060 --> 00:09:21,060
hundreds two kinds of packets

169
00:09:21,060 --> 00:09:24,779
in HTTP protocol the script sensor get

170
00:09:24,779 --> 00:09:28,860
to request then the codes and validates

171
00:09:28,860 --> 00:09:31,260
cookie body of the response

172
00:09:31,260 --> 00:09:35,279
in other protocols the script sensor

173
00:09:35,279 --> 00:09:38,940
fixed customized packet then

174
00:09:38,940 --> 00:09:42,060
get suspicious responses with the same

175
00:09:42,060 --> 00:09:45,120
size and different key for excluding

176
00:09:45,120 --> 00:09:47,640
honeypots

177
00:09:47,640 --> 00:09:50,220
after that the either python up core

178
00:09:50,220 --> 00:09:52,800
script decrypt responses customized

179
00:09:52,800 --> 00:09:53,820
packet

180
00:09:53,820 --> 00:09:58,940
and validates the values in the header

181
00:09:59,820 --> 00:10:03,600
by the way I explained the vnti version

182
00:10:03,600 --> 00:10:05,940
4 support the server mode

183
00:10:05,940 --> 00:10:09,720
so how can we differentiate the server

184
00:10:09,720 --> 00:10:13,320
model infections and C2 servers

185
00:10:13,320 --> 00:10:17,940
at least in TCP TLS and HD

186
00:10:17,940 --> 00:10:20,940
UDP protocols we can identify the

187
00:10:20,940 --> 00:10:24,600
difference by checking the guid and

188
00:10:24,600 --> 00:10:27,480
packet sequence number values in the

189
00:10:27,480 --> 00:10:29,700
decrypted period

190
00:10:29,700 --> 00:10:31,680
specifically

191
00:10:31,680 --> 00:10:35,100
server mode infections send the send

192
00:10:35,100 --> 00:10:38,760
back the same guid value as client and

193
00:10:38,760 --> 00:10:40,440
the package sequence number is

194
00:10:40,440 --> 00:10:42,000
incremented

195
00:10:42,000 --> 00:10:45,600
on the other hand situ servers returned

196
00:10:45,600 --> 00:10:47,760
our new guid value

197
00:10:47,760 --> 00:10:51,120
and the packet sequence number is reset

198
00:10:51,120 --> 00:10:55,279
so we can differentiate the same

199
00:10:56,060 --> 00:10:59,760
I showed the scanning result

200
00:10:59,760 --> 00:11:03,920
first population by protocol

201
00:11:04,920 --> 00:11:07,500
I will scan doing NTI version for C2

202
00:11:07,500 --> 00:11:09,540
servers since

203
00:11:09,540 --> 00:11:11,940
December 2019

204
00:11:11,940 --> 00:11:16,320
and so far I've identified 55 servers in

205
00:11:16,320 --> 00:11:18,420
total

206
00:11:18,420 --> 00:11:23,220
other regular system servers because in

207
00:11:23,220 --> 00:11:27,060
TCP KRS and UDP protocols

208
00:11:27,060 --> 00:11:30,720
I could validate by payroll values that

209
00:11:30,720 --> 00:11:34,079
I explained in the previous slide

210
00:11:34,079 --> 00:11:36,959
and in HTTP protocol

211
00:11:36,959 --> 00:11:39,120
the scanners just to the codes and

212
00:11:39,120 --> 00:11:41,540
validate the cookie value but the

213
00:11:41,540 --> 00:11:45,120
discovered IPS were hosted by previous

214
00:11:45,120 --> 00:11:48,120
providers which were overwrapped with

215
00:11:48,120 --> 00:11:50,700
other protocol servers

216
00:11:50,700 --> 00:11:54,600
so that's why I concluded all of our

217
00:11:54,600 --> 00:11:56,700
record system servers

218
00:11:56,700 --> 00:11:59,160
I guess the server model infection

219
00:11:59,160 --> 00:12:04,399
samples use high ports for binding

220
00:12:04,860 --> 00:12:07,320
this graph shows a change in number of

221
00:12:07,320 --> 00:12:09,779
active Shadows are active between NTI

222
00:12:09,779 --> 00:12:13,260
version for system servers performance

223
00:12:13,260 --> 00:12:17,100
I disclose the system iocs twice

224
00:12:17,100 --> 00:12:22,560
February 2020 and November last year

225
00:12:22,560 --> 00:12:25,260
I think that's why the number in

226
00:12:25,260 --> 00:12:27,899
November sharply dropped

227
00:12:27,899 --> 00:12:32,040
Ebner around 10 C2 servers are still

228
00:12:32,040 --> 00:12:34,459
active

229
00:12:35,880 --> 00:12:37,860
as far as I know

230
00:12:37,860 --> 00:12:40,320
there are only two public reports

231
00:12:40,320 --> 00:12:45,300
related to vati version 460 servers

232
00:12:45,300 --> 00:12:47,880
both were published last year

233
00:12:47,880 --> 00:12:51,480
about two years after I disclosed

234
00:12:51,480 --> 00:12:54,600
I will keep tracking the C2 servers on

235
00:12:54,600 --> 00:12:57,720
the internet as long as the malware is

236
00:12:57,720 --> 00:12:59,899
used

237
00:13:00,360 --> 00:13:01,500
because

238
00:13:01,500 --> 00:13:06,260
the next scanner example is Shadow path

239
00:13:06,480 --> 00:13:10,019
Shadow part is a modular Mario protocol

240
00:13:10,019 --> 00:13:12,899
privately shared with multiple PRC

241
00:13:12,899 --> 00:13:16,500
linked threat actors since 2015.

242
00:13:16,500 --> 00:13:20,399
according to change network this is the

243
00:13:20,399 --> 00:13:23,040
successor of projects

244
00:13:23,040 --> 00:13:26,339
Shadow path supports six C3 protocols

245
00:13:26,339 --> 00:13:31,500
but in this research I focus on TCP HTTP

246
00:13:31,500 --> 00:13:36,360
and UDP protocols because SSL and DNS

247
00:13:36,360 --> 00:13:40,380
are not directly utilized by the recent

248
00:13:40,380 --> 00:13:44,420
samples as far as I know

249
00:13:45,240 --> 00:13:48,660
the C2 protocol format and encoding

250
00:13:48,660 --> 00:13:52,260
algorithms are different between TCP and

251
00:13:52,260 --> 00:13:53,820
HTTP

252
00:13:53,820 --> 00:13:55,440
UDP protocols

253
00:13:55,440 --> 00:13:58,500
for example the key for the packet

254
00:13:58,500 --> 00:14:01,560
encoding is included in the header in

255
00:14:01,560 --> 00:14:05,040
both protocols but

256
00:14:05,040 --> 00:14:09,420
the key size is different

257
00:14:09,420 --> 00:14:13,620
and the hector size also different

258
00:14:13,620 --> 00:14:17,160
and randomly resize the data will be

259
00:14:17,160 --> 00:14:20,459
appended as the payload to the initial

260
00:14:20,459 --> 00:14:22,200
handshake packet

261
00:14:22,200 --> 00:14:25,680
the size is random but the maximum size

262
00:14:25,680 --> 00:14:30,560
is different for each protocol

263
00:14:31,800 --> 00:14:33,360
besides

264
00:14:33,360 --> 00:14:37,079
the immediate values used by the

265
00:14:37,079 --> 00:14:39,839
encoding algorithms are different Power

266
00:14:39,839 --> 00:14:41,040
variant

267
00:14:41,040 --> 00:14:43,380
probably for shadow party Builder

268
00:14:43,380 --> 00:14:44,639
version

269
00:14:44,639 --> 00:14:47,699
so I analyzed the three variance

270
00:14:47,699 --> 00:14:51,120
collected in August last year

271
00:14:51,120 --> 00:14:54,740
variant run also known as scatter B

272
00:14:54,740 --> 00:14:58,560
reported by positive Technologies

273
00:14:58,560 --> 00:15:02,880
variant to reported by E said

274
00:15:02,880 --> 00:15:06,600
variance 3 variance Rivers hunted from

275
00:15:06,600 --> 00:15:09,240
parasota at that time

276
00:15:09,240 --> 00:15:11,399
but a few months ago positive

277
00:15:11,399 --> 00:15:15,500
Technologies also reported to it

278
00:15:17,040 --> 00:15:20,760
the TCP protocol format has been the

279
00:15:20,760 --> 00:15:24,560
same since 2015.

280
00:15:25,579 --> 00:15:29,279
is randomly generated then used for

281
00:15:29,279 --> 00:15:33,360
encoding both the header and payroll

282
00:15:33,360 --> 00:15:36,300
the next field contains programming ID

283
00:15:36,300 --> 00:15:38,699
and command ID

284
00:15:38,699 --> 00:15:43,199
the IDS are different Power variant

285
00:15:43,199 --> 00:15:45,260
my C2 scanner

286
00:15:45,260 --> 00:15:49,220
utilizes the compressed and original

287
00:15:49,220 --> 00:15:53,399
payroll size information for the format

288
00:15:53,399 --> 00:15:55,880
validation

289
00:15:56,600 --> 00:15:58,339
the

290
00:15:58,339 --> 00:16:02,220
TCP protocol packet encoding is like

291
00:16:02,220 --> 00:16:04,440
this in Python

292
00:16:04,440 --> 00:16:07,139
among the shadow Pat variants that were

293
00:16:07,139 --> 00:16:08,399
analyzed

294
00:16:08,399 --> 00:16:11,579
only variant run had the TCP programming

295
00:16:11,579 --> 00:16:14,040
for C2 protocol

296
00:16:14,040 --> 00:16:17,000
so another variant may use different

297
00:16:17,000 --> 00:16:19,139
immediate value

298
00:16:19,139 --> 00:16:23,579
for the encoding

299
00:16:24,660 --> 00:16:27,660
and after the initial handshake Shadow

300
00:16:27,660 --> 00:16:31,079
Pat executes C2 commands specified by

301
00:16:31,079 --> 00:16:33,440
the C2 server

302
00:16:33,440 --> 00:16:37,199
for the individual command IDs and

303
00:16:37,199 --> 00:16:39,720
payroll formats please refer to the

304
00:16:39,720 --> 00:16:42,480
doctor web white paper

305
00:16:42,480 --> 00:16:44,880
the sample analyzed in the paper is

306
00:16:44,880 --> 00:16:48,600
older than variant run but the formats

307
00:16:48,600 --> 00:16:51,680
should be similar

308
00:16:52,560 --> 00:16:57,120
in HTTP and UDP protocols the heter and

309
00:16:57,120 --> 00:17:01,740
payloader are sent as raw data in UDP or

310
00:17:01,740 --> 00:17:06,319
through a post method in http

311
00:17:09,559 --> 00:17:15,780
encoding but the key size is different

312
00:17:15,780 --> 00:17:19,919
and the next field is constant value I

313
00:17:19,919 --> 00:17:21,660
call it the type

314
00:17:21,660 --> 00:17:25,020
and other session IDs

315
00:17:25,020 --> 00:17:27,660
the session Society

316
00:17:27,660 --> 00:17:29,520
sent by the client

317
00:17:29,520 --> 00:17:32,460
will be set will be set in the session

318
00:17:32,460 --> 00:17:34,320
destination ID

319
00:17:34,320 --> 00:17:36,539
on the server side

320
00:17:36,539 --> 00:17:40,980
so we can utilize these red card

321
00:17:40,980 --> 00:17:45,559
field values for the format validation

322
00:17:46,320 --> 00:17:50,580
in HTTP and UDP protocols the immediate

323
00:17:50,580 --> 00:17:53,160
values in the packet decoding code are

324
00:17:53,160 --> 00:17:55,320
different Power variant

325
00:17:55,320 --> 00:18:00,439
but the algorithm is identical

326
00:18:01,740 --> 00:18:04,440
after the initial handshake the payload

327
00:18:04,440 --> 00:18:06,960
will contain the same data structure as

328
00:18:06,960 --> 00:18:10,080
the TCP customizer packet

329
00:18:10,080 --> 00:18:13,140
and the type field in the header will be

330
00:18:13,140 --> 00:18:15,919
incremented

331
00:18:16,740 --> 00:18:19,860
before the scanner implementation

332
00:18:19,860 --> 00:18:22,740
the target protocols and ports were

333
00:18:22,740 --> 00:18:25,980
decided based on the recent samples

334
00:18:25,980 --> 00:18:28,620
configuration values

335
00:18:28,620 --> 00:18:31,980
I had to implement the scanner power

336
00:18:31,980 --> 00:18:34,200
scanner power variant

337
00:18:34,200 --> 00:18:37,799
due to the the difference of immediate

338
00:18:37,799 --> 00:18:42,299
values used in the packet encoding

339
00:18:42,299 --> 00:18:44,480
foreign

340
00:18:47,220 --> 00:18:52,080
first I create a list of hosts open at

341
00:18:52,080 --> 00:18:56,960
the Target data ports using that map

342
00:18:57,840 --> 00:19:01,440
next the standard on python script sends

343
00:19:01,440 --> 00:19:04,679
the shadow platform at the packets to

344
00:19:04,679 --> 00:19:08,160
all IPS on the list then

345
00:19:08,160 --> 00:19:11,720
there was a response packet and

346
00:19:11,720 --> 00:19:15,960
validates the decoded values in TCP

347
00:19:15,960 --> 00:19:16,860
protocol

348
00:19:16,860 --> 00:19:19,140
payroll size information

349
00:19:19,140 --> 00:19:25,260
in HTTP and UDP protocols type and

350
00:19:25,260 --> 00:19:29,360
session ID will be checked

351
00:19:30,960 --> 00:19:34,080
by the way during this research I found

352
00:19:34,080 --> 00:19:38,340
the wrong Shadow Pat sample including

353
00:19:38,340 --> 00:19:40,740
exactly the same

354
00:19:40,740 --> 00:19:43,140
hostile name and the port acceptor

355
00:19:43,140 --> 00:19:45,740
protocol

356
00:19:45,980 --> 00:19:48,980
hinted

357
00:19:49,100 --> 00:19:52,080
can accept multiple protocol requests

358
00:19:52,080 --> 00:19:55,260
after a single single port

359
00:19:55,260 --> 00:19:58,919
so I tested my guess by scanning one

360
00:19:58,919 --> 00:20:03,020
active Shadow part C2 server

361
00:20:04,860 --> 00:20:08,760
as a result the seats could accept both

362
00:20:08,760 --> 00:20:11,820
protocols at the same port

363
00:20:11,820 --> 00:20:15,120
this is the reason why I just scan the

364
00:20:15,120 --> 00:20:19,260
HTTP protocol notables

365
00:20:19,260 --> 00:20:22,500
the same behavior may be seen in other

366
00:20:22,500 --> 00:20:26,400
protocol combinations like TCP and SSL

367
00:20:26,400 --> 00:20:27,900
or

368
00:20:27,900 --> 00:20:29,760
UDP and

369
00:20:29,760 --> 00:20:35,299
DNS but I will not research yet

370
00:20:36,539 --> 00:20:39,360
this graph is a population by Shadow

371
00:20:39,360 --> 00:20:41,580
part variant

372
00:20:41,580 --> 00:20:45,000
I've identified uh I've scanned Shadow

373
00:20:45,000 --> 00:20:47,820
but C2 servers since

374
00:20:47,820 --> 00:20:49,799
September last year

375
00:20:49,799 --> 00:20:53,580
and so far I've identified the 83 C2

376
00:20:53,580 --> 00:20:56,520
servers in total

377
00:20:56,520 --> 00:20:59,820
during the tracking period variant run

378
00:20:59,820 --> 00:21:04,159
had to become more active

379
00:21:04,620 --> 00:21:08,039
and this is a changing number of active

380
00:21:08,039 --> 00:21:11,340
Shadow particular servers performance

381
00:21:11,340 --> 00:21:14,280
the sharp drop in February is just a

382
00:21:14,280 --> 00:21:15,900
system issue

383
00:21:15,900 --> 00:21:19,919
currently around 10 C2 servers are

384
00:21:19,919 --> 00:21:21,600
active

385
00:21:21,600 --> 00:21:23,280
thank you

386
00:21:23,280 --> 00:21:27,059
it's a scanner may have missed new

387
00:21:27,059 --> 00:21:30,120
variance readily because Shadow patch

388
00:21:30,120 --> 00:21:33,419
changes the immediate values used in the

389
00:21:33,419 --> 00:21:37,320
packet encoding algorithm power variant

390
00:21:37,320 --> 00:21:40,080
so I will keep tracking uh keep

391
00:21:40,080 --> 00:21:43,080
improving the scanner while hunting new

392
00:21:43,080 --> 00:21:45,500
samples

393
00:21:46,820 --> 00:21:50,220
as Shadow path is more prevalent than

394
00:21:50,220 --> 00:21:52,380
with NTI version 4.

395
00:21:52,380 --> 00:21:55,200
I could identify three examples on

396
00:21:55,200 --> 00:21:56,580
parasota

397
00:21:56,580 --> 00:21:59,159
communicating with the

398
00:21:59,159 --> 00:22:01,380
Shadow discovered the shadow particular

399
00:22:01,380 --> 00:22:02,940
IPS

400
00:22:02,940 --> 00:22:06,840
all the malware are utilized by PRC link

401
00:22:06,840 --> 00:22:09,720
to cyber Springs red doctors

402
00:22:09,720 --> 00:22:13,440
spider is used by apt-41

403
00:22:13,440 --> 00:22:16,679
reverse window is used by

404
00:22:16,679 --> 00:22:18,179
blue U

405
00:22:18,179 --> 00:22:21,860
named by gmt5

406
00:22:22,020 --> 00:22:23,580
and

407
00:22:23,580 --> 00:22:27,539
or C2 servers were discovered by the

408
00:22:27,539 --> 00:22:29,760
tcp-443

409
00:22:29,760 --> 00:22:31,740
variant one scanner

410
00:22:31,740 --> 00:22:32,880
and

411
00:22:32,880 --> 00:22:35,100
except the spider case

412
00:22:35,100 --> 00:22:38,640
the C2 servers accepted multiple

413
00:22:38,640 --> 00:22:43,220
protocols and ports at the same time

414
00:22:43,440 --> 00:22:47,640
and in all cases the city scanning

415
00:22:47,640 --> 00:22:51,600
system called the C2 servers prior to

416
00:22:51,600 --> 00:22:54,320
the sample submissions

417
00:22:54,320 --> 00:22:57,960
this is a big Advantage by the system

418
00:22:57,960 --> 00:23:00,860
scanning research

419
00:23:02,280 --> 00:23:05,100
by the way spider contains are called

420
00:23:05,100 --> 00:23:07,980
handling the same city command data

421
00:23:07,980 --> 00:23:11,940
structure as vndi version for worker

422
00:23:11,940 --> 00:23:17,480
Ito has 37 percent called similarity

423
00:23:18,419 --> 00:23:21,240
so I got interested and analyzed the

424
00:23:21,240 --> 00:23:24,419
command IDs of both malware

425
00:23:24,419 --> 00:23:27,600
the C2 command is decided by a

426
00:23:27,600 --> 00:23:30,480
combination of two constant values

427
00:23:30,480 --> 00:23:33,720
in the dried spider

428
00:23:33,720 --> 00:23:38,100
report they call tag and ID

429
00:23:38,100 --> 00:23:42,059
and in my analysis I call command ID and

430
00:23:42,059 --> 00:23:44,280
dispatcher ID

431
00:23:44,280 --> 00:23:47,820
they have almost the same functions

432
00:23:47,820 --> 00:23:51,980
regarding the program management

433
00:23:52,919 --> 00:23:54,799
but the

434
00:23:54,799 --> 00:23:58,620
dispatcher ideas are different and no

435
00:23:58,620 --> 00:24:01,919
command for sending connection

436
00:24:01,919 --> 00:24:06,960
information in reality worker

437
00:24:08,299 --> 00:24:11,280
this table shows the comparison between

438
00:24:11,280 --> 00:24:16,520
spider and the NTI version for worker

439
00:24:16,679 --> 00:24:19,740
the winning TI worker supports multiple

440
00:24:19,740 --> 00:24:23,760
City support goals and server mode

441
00:24:23,760 --> 00:24:26,480
it also makes the payroll acquisition

442
00:24:26,480 --> 00:24:29,640
harder than spider

443
00:24:29,640 --> 00:24:33,000
so I guess spider is the right weight

444
00:24:33,000 --> 00:24:38,419
version of green NTI vodka component

445
00:24:40,140 --> 00:24:42,299
let's get back to talking about the

446
00:24:42,299 --> 00:24:45,419
discovered Shadow part C2 IPS

447
00:24:45,419 --> 00:24:48,440
the discovery of Shadow part c2ip

448
00:24:48,440 --> 00:24:51,960
triggered around instant response

449
00:24:51,960 --> 00:24:54,960
the APT attack had to bypass the many

450
00:24:54,960 --> 00:24:58,679
methods of endpoint detections but it

451
00:24:58,679 --> 00:25:00,900
was erupted

452
00:25:00,900 --> 00:25:05,039
because of the pre-identified c2ip

453
00:25:05,039 --> 00:25:07,919
in this case the city scanning technique

454
00:25:07,919 --> 00:25:11,100
worked as a proactive threat detection

455
00:25:11,100 --> 00:25:13,580
method

456
00:25:14,700 --> 00:25:17,700
in this section I'd like to share my

457
00:25:17,700 --> 00:25:20,820
findings for internet-wide CT scanning

458
00:25:20,820 --> 00:25:26,299
not limited to realityi and Shadow path

459
00:25:26,640 --> 00:25:30,419
I generate a initial photo scan data for

460
00:25:30,419 --> 00:25:33,299
the city scanning Python scripts using

461
00:25:33,299 --> 00:25:34,559
that map

462
00:25:34,559 --> 00:25:37,200
not purchasing the third party date

463
00:25:37,200 --> 00:25:41,100
service such as Showdown census rapid

464
00:25:41,100 --> 00:25:44,480
saving and so on

465
00:25:44,580 --> 00:25:48,360
because for UDP based protocols we must

466
00:25:48,360 --> 00:25:51,179
scan host with the customized protocol

467
00:25:51,179 --> 00:25:52,380
formats

468
00:25:52,380 --> 00:25:57,320
or the C2 servers won't answer

469
00:25:58,559 --> 00:26:01,140
the Commercial Services normally don't

470
00:26:01,140 --> 00:26:03,840
provide the option

471
00:26:03,840 --> 00:26:06,779
Additionally the Commercial Services

472
00:26:06,779 --> 00:26:10,580
don't scam Miner products actively

473
00:26:10,580 --> 00:26:14,940
this table is the result of the number

474
00:26:14,940 --> 00:26:16,140
of ips

475
00:26:16,140 --> 00:26:21,299
open at minor ports in Russia November

476
00:26:21,299 --> 00:26:24,840
if the reports are not targeted

477
00:26:24,840 --> 00:26:27,779
Showdown and census

478
00:26:27,779 --> 00:26:33,440
return the extremely small data

479
00:26:34,380 --> 00:26:38,460
so by choosing the minor ports thread

480
00:26:38,460 --> 00:26:41,460
doctors can avoid detections by Showdown

481
00:26:41,460 --> 00:26:43,860
and senses easily

482
00:26:43,860 --> 00:26:46,440
that's why I generated input support

483
00:26:46,440 --> 00:26:49,940
scan data on my own

484
00:26:51,179 --> 00:26:55,260
another consideration is anonymization

485
00:26:55,260 --> 00:26:58,260
scanning operations are sometimes forced

486
00:26:58,260 --> 00:27:01,980
to be terminated by isps and

487
00:27:01,980 --> 00:27:06,600
BPS providers due to abuse reports

488
00:27:06,600 --> 00:27:09,600
in order to sustain the research

489
00:27:09,600 --> 00:27:14,299
The Source address should be anonymized

490
00:27:14,580 --> 00:27:17,340
there are two anonymization methods

491
00:27:17,340 --> 00:27:20,039
using Twitter and

492
00:27:20,039 --> 00:27:23,539
commercial VPN service

493
00:27:23,580 --> 00:27:25,320
twice free

494
00:27:25,320 --> 00:27:29,039
but only supports tcp-based report codes

495
00:27:29,039 --> 00:27:30,600
and

496
00:27:30,600 --> 00:27:33,539
has a risk of being blocked

497
00:27:33,539 --> 00:27:37,860
because store exit released is published

498
00:27:37,860 --> 00:27:40,980
on the other hand commercial VPN service

499
00:27:40,980 --> 00:27:45,900
is no free but supports both

500
00:27:45,900 --> 00:27:49,679
TCP and UDP based protocols

501
00:27:49,679 --> 00:27:52,799
that's why I utilize valve commercial

502
00:27:52,799 --> 00:27:57,379
prepaid services for anonymization

503
00:27:58,559 --> 00:28:01,200
by the way when we use that map with

504
00:28:01,200 --> 00:28:03,900
known ethernet interfaces

505
00:28:03,900 --> 00:28:06,539
that map will cause their segmentation

506
00:28:06,539 --> 00:28:10,140
fault and this bug has not been

507
00:28:10,140 --> 00:28:11,640
patulated

508
00:28:11,640 --> 00:28:14,400
so I recommend it to patch using the

509
00:28:14,400 --> 00:28:18,799
code explained on the issue page

510
00:28:19,740 --> 00:28:23,340
from here I introduce anti-scanning

511
00:28:23,340 --> 00:28:25,559
techniques that were observed in the

512
00:28:25,559 --> 00:28:26,940
world

513
00:28:26,940 --> 00:28:29,159
the first case is

514
00:28:29,159 --> 00:28:31,440
Cobalt strike

515
00:28:31,440 --> 00:28:34,260
I've scanned cover Strike Team servers

516
00:28:34,260 --> 00:28:36,179
since

517
00:28:36,179 --> 00:28:38,100
February 2020

518
00:28:38,100 --> 00:28:41,279
by downloading share code with an

519
00:28:41,279 --> 00:28:43,679
encoded Beacon based on the stage

520
00:28:43,679 --> 00:28:46,260
approach goal

521
00:28:46,260 --> 00:28:50,059
I observed some trivial but effective

522
00:28:50,059 --> 00:28:52,620
anti-scanning techniques

523
00:28:52,620 --> 00:28:57,480
for example as 5 HD HTTP header

524
00:28:57,480 --> 00:29:01,380
content encoding GDP is appended but the

525
00:29:01,380 --> 00:29:03,600
content is not compressed

526
00:29:03,600 --> 00:29:06,659
and the content rank size is more than

527
00:29:06,659 --> 00:29:08,159
the actual size

528
00:29:08,159 --> 00:29:11,400
to cause a connection reset error

529
00:29:11,400 --> 00:29:14,279
both ahead does variable the normal HTTP

530
00:29:14,279 --> 00:29:16,820
requests

531
00:29:17,880 --> 00:29:22,320
actually I'm not fully confident but

532
00:29:22,320 --> 00:29:24,899
some Chim servers provided the share

533
00:29:24,899 --> 00:29:28,799
code only event scanning through VPN so

534
00:29:28,799 --> 00:29:31,620
I guess they blocked clients using

535
00:29:31,620 --> 00:29:33,480
Twitter

536
00:29:33,480 --> 00:29:37,799
other than that as anti-decoding methods

537
00:29:37,799 --> 00:29:40,500
junk share code instructions

538
00:29:40,500 --> 00:29:43,799
and randomize the single byte x-ray key

539
00:29:43,799 --> 00:29:45,960
were observed

540
00:29:45,960 --> 00:29:49,140
basically the key is fixed but the

541
00:29:49,140 --> 00:29:53,480
different keys were used in the world

542
00:29:54,299 --> 00:29:56,340
in the different Marvel case

543
00:29:56,340 --> 00:29:59,100
different anti-scanning technique is

544
00:29:59,100 --> 00:30:01,399
used

545
00:30:01,740 --> 00:30:05,220
I implemented the Royals reverse Windows

546
00:30:05,220 --> 00:30:08,640
C2 scanner in March last year

547
00:30:08,640 --> 00:30:11,580
I think this actor is there very nervous

548
00:30:11,580 --> 00:30:15,120
about CC Discovery because the C3 port

549
00:30:15,120 --> 00:30:18,360
numbers were minor and not scanned by

550
00:30:18,360 --> 00:30:21,539
Commercial Services usually

551
00:30:21,539 --> 00:30:25,320
and the protocol format has been updated

552
00:30:25,320 --> 00:30:27,960
to a frequently

553
00:30:27,960 --> 00:30:30,720
at least I implemented three different

554
00:30:30,720 --> 00:30:32,940
formats

555
00:30:32,940 --> 00:30:35,520
Additionally the initial handshake

556
00:30:35,520 --> 00:30:39,480
require RSA public key and password

557
00:30:39,480 --> 00:30:42,659
embedded in the configuration data

558
00:30:42,659 --> 00:30:45,480
I finally implemented the several

559
00:30:45,480 --> 00:30:49,020
scanner versions for the malware but

560
00:30:49,020 --> 00:30:51,960
the number of the discovered C2 servers

561
00:30:51,960 --> 00:30:54,600
were very limited

562
00:30:54,600 --> 00:30:57,899
so this CT scanning was not cost

563
00:30:57,899 --> 00:31:00,439
effective

564
00:31:01,620 --> 00:31:04,799
uh I'm a researcher

565
00:31:04,799 --> 00:31:09,379
my mission is a research publication

566
00:31:09,600 --> 00:31:13,500
but I'm still not sure if I should

567
00:31:13,500 --> 00:31:16,500
publish or share this type of research

568
00:31:16,500 --> 00:31:19,679
because of the pros and cons

569
00:31:19,679 --> 00:31:23,039
I'd like to share the pros and cons

570
00:31:23,039 --> 00:31:26,220
obtained from their past

571
00:31:26,220 --> 00:31:28,620
couple strike City scanning research

572
00:31:28,620 --> 00:31:31,100
publication

573
00:31:32,039 --> 00:31:34,320
one of the good things by the

574
00:31:34,320 --> 00:31:38,279
publication is I could help to stop

575
00:31:38,279 --> 00:31:41,880
Microsoft Azure domain fronting

576
00:31:41,880 --> 00:31:44,520
I identified multiple gradual front

577
00:31:44,520 --> 00:31:47,159
cover Strike Team servers with cracked

578
00:31:47,159 --> 00:31:50,840
and rigged customer IDs

579
00:31:51,240 --> 00:31:54,240
that means they were likely to be

580
00:31:54,240 --> 00:31:56,700
managed by criminals

581
00:31:56,700 --> 00:31:58,679
not to Red Chambers

582
00:31:58,679 --> 00:32:02,220
so I provided the data with a person at

583
00:32:02,220 --> 00:32:05,220
Microsoft then two months later

584
00:32:05,220 --> 00:32:08,039
Microsoft decided to stop and prevent

585
00:32:08,039 --> 00:32:11,159
domain fronting within azure

586
00:32:11,159 --> 00:32:15,720
since then the new Azure fronted cases

587
00:32:15,720 --> 00:32:19,279
have decreased

588
00:32:21,059 --> 00:32:23,279
another good thing is

589
00:32:23,279 --> 00:32:26,399
I supported

590
00:32:26,399 --> 00:32:30,120
stopping ongoing attack campaign

591
00:32:30,120 --> 00:32:33,059
I've identified potential victims based

592
00:32:33,059 --> 00:32:36,419
on manual product settings of the cover

593
00:32:36,419 --> 00:32:39,299
strike Beacon configuration data

594
00:32:39,299 --> 00:32:43,080
and in August last year

595
00:32:43,080 --> 00:32:47,100
I found one server Hardware cracked and

596
00:32:47,100 --> 00:32:48,840
wreaked customer ID

597
00:32:48,840 --> 00:32:53,880
and it was active at that time so these

598
00:32:53,880 --> 00:32:57,299
words were real ongoing attack

599
00:32:57,299 --> 00:33:01,679
I contacted the big team and as a result

600
00:33:01,679 --> 00:33:05,600
they blocked the campaign

601
00:33:06,299 --> 00:33:07,980
on the other hand

602
00:33:07,980 --> 00:33:10,860
there were some bad things since the

603
00:33:10,860 --> 00:33:12,720
publication

604
00:33:12,720 --> 00:33:16,019
because the developer and thread doctors

605
00:33:16,019 --> 00:33:18,840
also watched it

606
00:33:18,840 --> 00:33:22,380
for example I disclosed the DNS protocol

607
00:33:22,380 --> 00:33:26,940
details at the Json for the first time

608
00:33:26,940 --> 00:33:29,640
then two months later the developer

609
00:33:29,640 --> 00:33:33,120
added new C2 profile settings mainly

610
00:33:33,120 --> 00:33:35,519
focusing on DNS

611
00:33:35,519 --> 00:33:39,919
to change the behavior for X3

612
00:33:41,220 --> 00:33:45,559
I think this was not due to only me but

613
00:33:45,559 --> 00:33:48,659
covers likes retractors have started to

614
00:33:48,659 --> 00:33:52,460
disable the Stager protocol

615
00:33:53,220 --> 00:33:56,460
for example apt-41

616
00:33:56,460 --> 00:34:01,019
the ratio of the stage disabled Gene

617
00:34:01,019 --> 00:34:02,700
servers was

618
00:34:02,700 --> 00:34:05,399
20 to 40 percent

619
00:34:05,399 --> 00:34:06,659
last year

620
00:34:06,659 --> 00:34:11,839
now around 50 percent or more

621
00:34:13,679 --> 00:34:18,418
they also have similar to start to use

622
00:34:18,418 --> 00:34:20,699
redirectors

623
00:34:20,699 --> 00:34:23,699
because the number we discovered servers

624
00:34:23,699 --> 00:34:25,859
decreased

625
00:34:25,859 --> 00:34:29,399
it makes the scanning harder

626
00:34:29,399 --> 00:34:34,040
the captain Mouse game still continues

627
00:34:35,099 --> 00:34:39,200
I wrap up my presentation

628
00:34:39,418 --> 00:34:42,839
by emulating the C2 protocols then

629
00:34:42,839 --> 00:34:45,060
scanning the internet

630
00:34:45,060 --> 00:34:49,918
I've discovered over 140 vneti version 4

631
00:34:49,918 --> 00:34:53,219
and Shadow part C2 servers

632
00:34:53,219 --> 00:34:55,379
after the end of this month's last

633
00:34:55,379 --> 00:34:56,460
months

634
00:34:56,460 --> 00:35:01,500
65 65 percent of the iocs have zero

635
00:35:01,500 --> 00:35:03,480
detection on virus water

636
00:35:03,480 --> 00:35:07,619
and around 10 C2 servers are always

637
00:35:07,619 --> 00:35:11,040
active in both malware

638
00:35:11,040 --> 00:35:14,280
I think there is a little possibility of

639
00:35:14,280 --> 00:35:17,460
false positive because the city protocol

640
00:35:17,460 --> 00:35:22,760
formats and encoding are fairly unique

641
00:35:23,280 --> 00:35:26,640
I believe the city scanning can become a

642
00:35:26,640 --> 00:35:28,800
game changer

643
00:35:28,800 --> 00:35:31,980
as well the most proactive threat to

644
00:35:31,980 --> 00:35:34,820
detection approaches

645
00:35:36,780 --> 00:35:39,780
for This research I appreciate the two

646
00:35:39,780 --> 00:35:41,640
external researchers

647
00:35:41,640 --> 00:35:44,880
tadash kobashi from internet initiative

648
00:35:44,880 --> 00:35:46,200
Japan

649
00:35:46,200 --> 00:35:48,900
his otherwise regarding the scalable

650
00:35:48,900 --> 00:35:51,660
scanner implementation and terrible

651
00:35:51,660 --> 00:35:55,279
shooting was helpful

652
00:35:55,760 --> 00:35:58,380
from gmt5

653
00:35:58,380 --> 00:36:01,920
he shared his knowledge to gain a more

654
00:36:01,920 --> 00:36:04,680
complete picture of the Shadow part

655
00:36:04,680 --> 00:36:06,060
variance

656
00:36:06,060 --> 00:36:07,800
thank you so much

657
00:36:07,800 --> 00:36:10,680
and last about the not wrist

658
00:36:10,680 --> 00:36:15,780
I appreciate my manager Brian Bosque

659
00:36:15,780 --> 00:36:21,560
for his patient management as always

660
00:36:22,140 --> 00:36:24,960
this is a sample hash

661
00:36:24,960 --> 00:36:28,140
and the discovered City iocs are

662
00:36:28,140 --> 00:36:30,799
published here

663
00:36:31,859 --> 00:36:33,960
that's it

664
00:36:33,960 --> 00:36:36,960
and if I have time

665
00:36:36,960 --> 00:36:39,359
I would like to demonstrate the C2

666
00:36:39,359 --> 00:36:40,800
scanner

667
00:36:40,800 --> 00:36:43,520
that's it

668
00:36:49,320 --> 00:36:51,480
now we would like to go to the q1d

669
00:36:51,480 --> 00:36:53,640
session due to time constraints we would

670
00:36:53,640 --> 00:36:55,800
like to receive only one question and if

671
00:36:55,800 --> 00:36:57,660
you have any question please raise your

672
00:36:57,660 --> 00:36:59,839
hand

673
00:37:02,579 --> 00:37:06,540
you'll see this no question

674
00:37:06,540 --> 00:37:08,099
maybe not

675
00:37:08,099 --> 00:37:11,119
teacher scanner

676
00:37:12,119 --> 00:37:14,540
yes

677
00:37:17,180 --> 00:37:21,300
may I run the demonstration

678
00:37:21,300 --> 00:37:25,460
I'm so sorry yes please go ahead

679
00:37:27,060 --> 00:37:29,779
just a moment

680
00:37:37,320 --> 00:37:39,960
can you see the screen

681
00:37:39,960 --> 00:37:44,280
uh first I demonstrate the vati https

682
00:37:44,280 --> 00:37:46,880
scanner

683
00:37:48,540 --> 00:37:51,920
I hope they are similar

684
00:37:54,300 --> 00:37:59,480
the scanner since uh get to request then

685
00:37:59,480 --> 00:38:01,440
go to the

686
00:38:01,440 --> 00:38:03,839
cookie data value of the response

687
00:38:03,839 --> 00:38:05,940
and

688
00:38:05,940 --> 00:38:07,920
if the

689
00:38:07,920 --> 00:38:11,160
decoded size information is zero

690
00:38:11,160 --> 00:38:16,380
there must be the reality ic2 servers

691
00:38:16,380 --> 00:38:17,760
so

692
00:38:17,760 --> 00:38:22,339
we can say they are actiminal

693
00:38:24,480 --> 00:38:27,079
next

694
00:38:27,960 --> 00:38:31,380
I demonstrate their Shadow part TCP

695
00:38:31,380 --> 00:38:33,800
scanner

696
00:38:48,839 --> 00:38:54,780
uh the shadow pattern TCP scanner sensor

697
00:38:54,780 --> 00:38:57,900
TCP customizer packet then

698
00:38:57,900 --> 00:39:01,260
they go to the response data

699
00:39:01,260 --> 00:39:04,260
the

700
00:39:04,320 --> 00:39:06,119
response data

701
00:39:06,119 --> 00:39:10,619
look to the random but after decoding

702
00:39:10,619 --> 00:39:12,420
the data

703
00:39:12,420 --> 00:39:14,280
is

704
00:39:14,280 --> 00:39:16,820
always

705
00:39:18,839 --> 00:39:21,540
matched

706
00:39:21,540 --> 00:39:24,180
so

707
00:39:24,180 --> 00:39:26,839
we can say

708
00:39:26,839 --> 00:39:30,720
these shadow part C2 servers are in

709
00:39:30,720 --> 00:39:33,618
operation now

710
00:39:34,320 --> 00:39:36,980
that's it

