1
00:00:01,740 --> 00:00:05,400
Today

2
00:00:05,400 --> 00:00:09,120
, I would like to talk about the benefits of IPA, a

3
00:00:09,120 --> 00:00:12,500


4
00:00:14,160 --> 00:00:15,480


5
00:00:15,480 --> 00:00:19,080
self-made memory tampering tool.

6
00:00:19,080 --> 00:00:21,180


7
00:00:21,180 --> 00:00:23,880


8
00:00:23,880 --> 00:00:25,859


9
00:00:25,859 --> 00:00:29,240
I'm a cto. I

10
00:00:31,560 --> 00:00:33,719
have three strengths:

11
00:00:33,719 --> 00:00:36,899
a magazine feature on vulnerability diagnosis

12
00:00:36,899 --> 00:00:38,760


13
00:00:38,760 --> 00:00:42,620
and two thick books on reverse engineering with Ghidorah.

14
00:00:45,920 --> 00:00:49,260


15
00:00:49,260 --> 00:00:52,079


16
00:00:52,079 --> 00:00:55,260
Today's

17
00:00:55,260 --> 00:00:57,480
announcement is a continuation of that

18
00:00:57,480 --> 00:01:00,860
and will be the announcement of the iOS version

19
00:01:04,680 --> 00:01:07,140
Today's topic is about vulnerability diagnosis for game applications

20
00:01:07,140 --> 00:01:11,060
Vulnerability diagnosis for simple mobile applications with no logic implemented

21
00:01:14,580 --> 00:01:16,439
on web applications or clients

22
00:01:16,439 --> 00:01:19,380


23
00:01:19,380 --> 00:01:21,360


24
00:01:21,360 --> 00:01:23,460


25
00:01:23,460 --> 00:01:25,680


26
00:01:25,680 --> 00:01:28,799


27
00:01:28,799 --> 00:01:31,020
Most of the vulnerabilities can be discovered by using proxy tools to change the

28
00:01:31,020 --> 00:01:33,200


29
00:01:37,259 --> 00:01:38,820


30
00:01:38,820 --> 00:01:41,159


31
00:01:41,159 --> 00:01:43,380
request response to the

32
00:01:43,380 --> 00:01:45,420


33
00:01:45,420 --> 00:01:47,520
server.  It takes time and effort to check on

34
00:01:47,520 --> 00:01:49,579
your own.

35
00:01:53,820 --> 00:01:56,520


36
00:01:56,520 --> 00:01:58,680
When performing vulnerability diagnosis for mobile game applications, work involving reverse engineering is required, making

37
00:01:58,680 --> 00:02:00,960


38
00:02:00,960 --> 00:02:02,700


39
00:02:02,700 --> 00:02:05,280
diagnosis more difficult than for simple

40
00:02:05,280 --> 00:02:06,840
mobile applications.

41
00:02:06,840 --> 00:02:07,860
For example,

42
00:02:07,860 --> 00:02:10,199
there are the following items

43
00:02:10,199 --> 00:02:12,780
Encryption of data in request response

44
00:02:12,780 --> 00:02:14,099
Composite

45
00:02:14,099 --> 00:02:16,500
Bypassing SSL pinning

46
00:02:16,500 --> 00:02:18,540
Bypassing root detection

47
00:02:18,540 --> 00:02:20,940
Memory tampering Today

48
00:02:20,940 --> 00:02:25,099
we will talk in detail about memory tampering In

49
00:02:28,980 --> 00:02:30,599
game cheats

50
00:02:30,599 --> 00:02:33,959
memory tampering is the easiest way In

51
00:02:33,959 --> 00:02:36,000
IOS games

52
00:02:36,000 --> 00:02:37,800
I Game Guardian or

53
00:02:37,800 --> 00:02:40,500
A cheat tool called Game Player is famous

54
00:02:40,500 --> 00:02:42,300


55
00:02:42,300 --> 00:02:44,280
A cheat tool called Game Guardian is

56
00:02:44,280 --> 00:02:46,580
famous for Android games

57
00:02:50,400 --> 00:02:52,260
IPA Merit is

58
00:02:52,260 --> 00:02:54,480


59
00:02:54,480 --> 00:02:56,099
a tool for memory tampering with iOS apps

60
00:02:56,099 --> 00:02:59,099
No need to jailbreak,

61
00:02:59,099 --> 00:03:01,319
but you need to name the IPA file first

62
00:03:01,319 --> 00:03:02,700
There is

63
00:03:02,700 --> 00:03:04,260
IPA merit

64
00:03:04,260 --> 00:03:06,360
is not a cheat tool for unauthorized users

65
00:03:06,360 --> 00:03:10,700
but a tool for vulnerability diagnosis

66
00:03:14,400 --> 00:03:17,340
ITA merit is other  Compared to tools, it

67
00:03:17,340 --> 00:03:20,099
has the following advantages: First

68
00:03:20,099 --> 00:03:22,800
, it does not require root privileges, so

69
00:03:22,800 --> 00:03:25,200


70
00:03:25,200 --> 00:03:26,819
there is no need to avoid detection

71
00:03:26,819 --> 00:03:29,220
of jailbreak environments Game apps

72
00:03:29,220 --> 00:03:31,560
often have functions to detect jailbreak environments

73
00:03:31,560 --> 00:03:35,480
.  It works with a colorful tui

74
00:03:35,480 --> 00:03:38,220
This is the only problem, but since

75
00:03:38,220 --> 00:03:41,280
tui makes it easier to track operation logs,

76
00:03:41,280 --> 00:03:46,040
I think it's more convenient than gui for verification

77
00:03:49,739 --> 00:03:52,260


78
00:03:52,260 --> 00:03:55,080
Considering the risk of information leakage, cheat tools that are not open source

79
00:03:55,080 --> 00:03:57,060
have been released  It's

80
00:03:57,060 --> 00:03:59,580
a little difficult to use for new game apps that don't

81
00:03:59,580 --> 00:04:02,519
exist. IPA Advantage is an open source

82
00:04:02,519 --> 00:04:05,580
tool developed by a game company, so

83
00:04:05,580 --> 00:04:08,159
you can use it for vulnerability diagnosis with peace

84
00:04:08,159 --> 00:04:10,340


85
00:04:17,339 --> 00:04:19,500


86
00:04:19,500 --> 00:04:22,019
of mind.  Here's how IPA Merit is used for a

87
00:04:22,019 --> 00:04:24,120
game that can be cleared with a million taps

88
00:04:24,120 --> 00:04:26,820


89
00:04:26,820 --> 00:04:30,120
To find the value displayed in the memory,

90
00:04:30,120 --> 00:04:33,060
use the Find command Now

91
00:04:33,060 --> 00:04:36,660
searching the memory This process

92
00:04:36,660 --> 00:04:39,740
will take some time

93
00:05:00,720 --> 00:05:03,120


94
00:05:03,120 --> 00:05:04,800
Instead of searching the data in the

95
00:05:04,800 --> 00:05:07,259
IOS device, the data in the memory of the IOS device

96
00:05:07,259 --> 00:05:10,199
is moved to the PC and searched, so

97
00:05:10,199 --> 00:05:12,720
it takes time to

98
00:05:12,720 --> 00:05:15,660
search If you know the location of the value in memory, you can use the patch

99
00:05:15,660 --> 00:05:19,220
command  You can change it.

100
00:05:43,320 --> 00:05:46,380
So far, it's pretty much

101
00:05:46,380 --> 00:05:49,199
the same thing we announced at the Black Hat USA Arsenal in 2020. Back

102
00:05:49,199 --> 00:05:50,699


103
00:05:50,699 --> 00:05:51,960
then,

104
00:05:51,960 --> 00:05:54,360


105
00:05:54,360 --> 00:05:57,000
it was only for iOS apps running on iPhones, but

106
00:05:57,000 --> 00:05:58,800
now it's

107
00:05:58,800 --> 00:06:01,020
on Apple Silicon Macs.

108
00:06:01,020 --> 00:06:03,479


109
00:06:03,479 --> 00:06:04,860
Apple Silicon Mac is

110
00:06:04,860 --> 00:06:07,620
a Mac equipped with Arm architecture,

111
00:06:07,620 --> 00:06:10,020
which allows iOS apps to run on MacOS

112
00:06:10,020 --> 00:06:12,680


113
00:06:18,539 --> 00:06:20,699


114
00:06:20,699 --> 00:06:22,800


115
00:06:22,800 --> 00:06:25,620
Memory tampering with IOS apps running on Apple Silicon Mac  This is a demo video that

116
00:06:25,620 --> 00:06:27,300
runs all processing on a

117
00:06:27,300 --> 00:06:30,479
Mac, so it runs fast

118
00:06:30,479 --> 00:06:32,599
. From

119
00:06:46,319 --> 00:06:49,259
here, I'll introduce what you need to run IPA Merit

120
00:06:49,259 --> 00:06:52,440
. First,

121
00:06:52,440 --> 00:06:55,620
you need a PC that runs MacOS.

122
00:06:55,620 --> 00:06:58,139
Certificate

123
00:06:58,139 --> 00:07:00,740
must be

124
00:07:04,680 --> 00:07:07,139


125
00:07:07,139 --> 00:07:09,000


126
00:07:09,000 --> 00:07:11,100
installed X code must be installed on Mac if you are targeting IOS apps running on iOS

127
00:07:11,100 --> 00:07:12,720
devices

128
00:07:12,720 --> 00:07:15,180
I  PA Merit uses lldb which is included in

129
00:07:15,180 --> 00:07:18,680
xcode

130
00:07:22,080 --> 00:07:23,639
Also

131
00:07:23,639 --> 00:07:26,340
you need

132
00:07:26,340 --> 00:07:28,500
Livei mobile device LIVEI mobile device is a famous library to

133
00:07:28,500 --> 00:07:30,599
communicate with IOS devices with native protocol

134
00:07:30,599 --> 00:07:33,180


135
00:07:33,180 --> 00:07:35,460
Livei mobile device and I device

136
00:07:35,460 --> 00:07:37,020
installer can be installed by homebrew

137
00:07:37,020 --> 00:07:39,720
At that time, you need

138
00:07:39,720 --> 00:07:41,819


139
00:07:41,819 --> 00:07:44,580
to install the latest code that is not included in the latest version yet in the head

140
00:07:44,580 --> 00:07:48,120
option, otherwise the debug server will not start on

141
00:07:48,120 --> 00:07:50,580
newer versions of iOS The

142
00:07:50,580 --> 00:07:53,539


143
00:07:58,800 --> 00:08:01,259
target IOS app must

144
00:08:01,259 --> 00:08:03,660
be installed on your PC  If

145
00:08:03,660 --> 00:08:06,180


146
00:08:06,180 --> 00:08:09,060
you want to target an iOS app developed by a third party,

147
00:08:09,060 --> 00:08:10,979


148
00:08:10,979 --> 00:08:13,259
you need to name the IPA file first For the

149
00:08:13,259 --> 00:08:15,380


150
00:08:20,340 --> 00:08:23,699
first name, I recommend a tool called IPAutil that I created

151
00:08:23,699 --> 00:08:26,039


152
00:08:26,039 --> 00:08:28,440
Using ITAutil,

153
00:08:28,440 --> 00:08:31,199
you can do the first name with a single command. It

154
00:08:31,199 --> 00:08:34,320
's not the main topic of today's presentation, so I

155
00:08:34,320 --> 00:08:37,679
won't go into too much detail here, but

156
00:08:37,679 --> 00:08:40,679
IPA utility has other

157
00:08:40,679 --> 00:08:44,000
useful functions for vulnerability diagnosis.

158
00:08:47,820 --> 00:08:50,519
How to install I use

159
00:08:50,519 --> 00:08:53,100
github ACTION to build and distribute binaries

160
00:08:53,100 --> 00:08:55,440


161
00:08:55,440 --> 00:08:57,320
Binaries can be obtained from github After

162
00:08:57,320 --> 00:09:00,720
downloading the binaries,

163
00:09:00,720 --> 00:09:04,040
please place them in a location where your path is

164
00:09:08,700 --> 00:09:11,220
accessible Explains how to start

165
00:09:11,220 --> 00:09:13,560
Target  If you

166
00:09:13,560 --> 00:09:15,480
want

167
00:09:15,480 --> 00:09:18,000
to target

168
00:09:18,000 --> 00:09:19,980
apps running on iOS devices, specify

169
00:09:19,980 --> 00:09:22,320
the binary in the ITA file on the command

170
00:09:22,320 --> 00:09:24,300
line

171
00:09:24,300 --> 00:09:26,399
Targeting iOS apps running on Apple Silicon Macs

172
00:09:26,399 --> 00:09:29,399
If you want to do this

173
00:09:29,399 --> 00:09:31,320
, specify the process name on the command line

174
00:09:31,320 --> 00:09:33,500
. From here on, I'll

175
00:09:38,519 --> 00:09:40,200


176
00:09:40,200 --> 00:09:42,600
show you how to tamper with memory

177
00:09:42,600 --> 00:09:43,740
.

178
00:09:43,740 --> 00:09:46,320
Many subcommands are

179
00:09:46,320 --> 00:09:48,000
implemented in IPA Merit, and you can

180
00:09:48,000 --> 00:09:50,339
enter them from the prompt that appears immediately after the orbit.

181
00:09:50,339 --> 00:09:51,839


182
00:09:51,839 --> 00:09:54,120
Use the Find command to

183
00:09:54,120 --> 00:09:56,040
search for a number in memory Use the

184
00:09:56,040 --> 00:09:58,560
Filter command to search

185
00:09:58,560 --> 00:10:00,720
for a specified number in the addresses found in the previous

186
00:10:00,720 --> 00:10:03,660
search result Use the Patch command to search for the address

187
00:10:03,660 --> 00:10:06,540
found in the previous search

188
00:10:06,540 --> 00:10:10,519
Overwrite the value at address with the specified value

189
00:10:16,320 --> 00:10:19,080
These three commands can be used to tamper

190
00:10:19,080 --> 00:10:20,640
with the memory Search for

191
00:10:20,640 --> 00:10:23,220
the value displayed in the harmful state with the Find command,

192
00:10:23,220 --> 00:10:25,260
and

193
00:10:25,260 --> 00:10:28,019
if many results are displayed

194
00:10:28,019 --> 00:10:31,560
, advance the game and change the value on the UI,

195
00:10:31,560 --> 00:10:34,019
and narrow down with the filter command  When the number of

196
00:10:34,019 --> 00:10:36,959
search results is sufficiently small

197
00:10:36,959 --> 00:10:40,579
, change the value with the patch command.

198
00:10:45,720 --> 00:10:48,420
From here, I will explain how the memory is internally

199
00:10:48,420 --> 00:10:50,519
tampered with, and the

200
00:10:50,519 --> 00:10:53,899
implementation details. The

201
00:10:59,100 --> 00:11:01,620
target application is running on an iOS device

202
00:11:01,620 --> 00:11:03,779
.

203
00:11:03,779 --> 00:11:06,180


204
00:11:06,180 --> 00:11:09,120
The mechanism of memory tampering differs depending

205
00:11:09,120 --> 00:11:11,760
on whether the application is running on an Apple silicon Mac or an Apple Silicon Mac.

206
00:11:11,760 --> 00:11:15,319


207
00:11:20,220 --> 00:11:22,680


208
00:11:22,680 --> 00:11:24,600
Target case

209
00:11:24,600 --> 00:11:26,640
Use LIVEI mobile

210
00:11:26,640 --> 00:11:28,920
device to operate IOS device

211
00:11:28,920 --> 00:11:31,140
LIVEI mobile device is

212
00:11:31,140 --> 00:11:33,240


213
00:11:33,240 --> 00:11:36,800
a well-known library that communicates with IOS device with native protocol

214
00:11:40,320 --> 00:11:41,820
Also,

215
00:11:41,820 --> 00:11:44,760
lldb API is

216
00:11:44,760 --> 00:11:47,940
used to read and write memory This is xcode

217
00:11:47,940 --> 00:11:50,459


218
00:11:50,459 --> 00:11:52,440


219
00:11:52,440 --> 00:11:54,959
lldb is used inside xcode

220
00:11:54,959 --> 00:11:57,180
ITA advantage is implemented in GO but

221
00:11:57,180 --> 00:11:58,620


222
00:11:58,620 --> 00:12:00,899
lldb provides

223
00:12:00,899 --> 00:12:03,540
ati that can be used from Python

224
00:12:03,540 --> 00:12:04,980
Embed PythonScript in binary

225
00:12:04,980 --> 00:12:06,899
I

226
00:12:06,899 --> 00:12:10,459
'm calling PythonAPI by doing this The

227
00:12:16,019 --> 00:12:19,260
mobile device is implemented in C, and

228
00:12:19,260 --> 00:12:21,779
lldb's ati is

229
00:12:21,779 --> 00:12:24,839
calling from Python, so some

230
00:12:24,839 --> 00:12:27,120
people may wonder why I implemented the IPA merit in the issue It's

231
00:12:27,120 --> 00:12:30,019


232
00:12:34,680 --> 00:12:35,579


233
00:12:35,579 --> 00:12:37,920
gone IOS  This is because I implemented it

234
00:12:37,920 --> 00:12:40,019
with reference to the tool implemented inside the

235
00:12:40,019 --> 00:12:41,760


236
00:12:41,760 --> 00:12:43,620
GO

237
00:12:43,620 --> 00:12:45,779
A tool for debugging the IOS library implemented in GO

238
00:12:45,779 --> 00:12:47,100


239
00:12:47,100 --> 00:12:50,040
is prepared inside the issue Idea

240
00:12:50,040 --> 00:12:52,339
for implementing the initial IPA merit

241
00:12:52,339 --> 00:12:55,639


242
00:12:59,639 --> 00:13:03,060
From here on, I

243
00:13:03,060 --> 00:13:05,100
will explain how memory tampering is performed when targeting an application running on an Apple Silicon Mac.

244
00:13:05,100 --> 00:13:07,980


245
00:13:07,980 --> 00:13:11,880


246
00:13:11,880 --> 00:13:13,800


247
00:13:13,800 --> 00:13:15,360


248
00:13:15,360 --> 00:13:17,639


249
00:13:17,639 --> 00:13:20,700


250
00:13:20,700 --> 00:13:24,000
At the beginning of development, I thought that it would be possible to go with the same logic as this time.  But

251
00:13:24,000 --> 00:13:26,339
MacOS was quite different from

252
00:13:26,339 --> 00:13:28,760


253
00:13:34,500 --> 00:13:36,480
Linux Memory tampering in Linux is

254
00:13:36,480 --> 00:13:39,120
done as follows First

255
00:13:39,120 --> 00:13:41,519


256
00:13:41,519 --> 00:13:42,839
read the memory map from the block PID map

257
00:13:42,839 --> 00:13:45,240
to get a list of addresses of readable

258
00:13:45,240 --> 00:13:47,760
regions Then

259
00:13:47,760 --> 00:13:49,800
D trace  Use system call

260
00:13:49,800 --> 00:13:52,260


261
00:13:52,260 --> 00:13:53,760
to get

262
00:13:53,760 --> 00:13:56,220
data in memory from block PID memo Find desired value in read data Write value

263
00:13:56,220 --> 00:13:57,660


264
00:13:57,660 --> 00:13:59,579
to memory using teatrace system call

265
00:13:59,579 --> 00:14:02,899


266
00:14:07,740 --> 00:14:10,560
Memory map shows where in memory can be read and written

267
00:14:10,560 --> 00:14:13,680
However, there is no memory

268
00:14:13,680 --> 00:14:15,180
map pseudo-file in

269
00:14:15,180 --> 00:14:17,100
MacOS. It was

270
00:14:17,100 --> 00:14:20,399


271
00:14:20,399 --> 00:14:22,500


272
00:14:22,500 --> 00:14:25,320
not possible to obtain information about which part of the memory was readable without using a dedicated

273
00:14:25,320 --> 00:14:27,600
API.In order to reduce the implementation cost, the

274
00:14:27,600 --> 00:14:30,420
current implementation is  The VM map command is

275
00:14:30,420 --> 00:14:31,920
internally called

276
00:14:31,920 --> 00:14:34,320
to obtain the information equivalent to the memory map

277
00:14:34,320 --> 00:14:36,440


278
00:14:40,079 --> 00:14:43,079
. Let's move on to the part that reads

279
00:14:43,079 --> 00:14:45,540
memory. PIDMEM, a pseudo-file block in which data in memory is expanded

280
00:14:45,540 --> 00:14:47,940


281
00:14:47,940 --> 00:14:50,699
, is not available in Mac OS.

282
00:14:50,699 --> 00:14:53,579


283
00:14:53,579 --> 00:14:55,560
Teatrace is a system call used when creating a debugger,

284
00:14:55,560 --> 00:14:58,260


285
00:14:58,260 --> 00:15:02,480
and the operating mode can be switched with the first argument.

286
00:15:06,420 --> 00:15:09,300


287
00:15:09,300 --> 00:15:12,060


288
00:15:12,060 --> 00:15:13,860


289
00:15:13,860 --> 00:15:15,000
No

290
00:15:15,000 --> 00:15:16,620
Specifically, it is not possible to specify

291
00:15:16,620 --> 00:15:19,079
the peterace peak data for reading

292
00:15:19,079 --> 00:15:20,760


293
00:15:20,760 --> 00:15:22,800
memory and the teetrace poke data for writing to memory in the first argument

294
00:15:22,800 --> 00:15:25,880


295
00:15:30,720 --> 00:15:33,959


296
00:15:33,959 --> 00:15:36,899
.  An API is

297
00:15:36,899 --> 00:15:39,959
provided, and you can use it to

298
00:15:39,959 --> 00:15:41,760
read and write memory. Specifically, you can

299
00:15:41,760 --> 00:15:42,839


300
00:15:42,839 --> 00:15:46,139
use membrane VM read to read memory and

301
00:15:46,139 --> 00:15:47,940
Macvml write to write

302
00:15:47,940 --> 00:15:50,420
.

303
00:15:55,800 --> 00:15:59,279


304
00:15:59,279 --> 00:16:01,560


305
00:16:01,560 --> 00:16:04,440
You can get a list of memory addresses that you can read with a command,

306
00:16:04,440 --> 00:16:06,600
and use MacVM read to read the data in memory,

307
00:16:06,600 --> 00:16:08,339


308
00:16:08,339 --> 00:16:10,860
look up the number you're looking for, and

309
00:16:10,860 --> 00:16:13,339


310
00:16:20,399 --> 00:16:23,220
MacVS.

311
00:16:23,220 --> 00:16:27,839


312
00:16:27,839 --> 00:16:29,579


313
00:16:29,579 --> 00:16:31,279
can debug unsigned programs

314
00:16:31,279 --> 00:16:35,160
Therefore

315
00:16:35,160 --> 00:16:37,199
, it must be signed with ComApple Security CS with an attribute called

316
00:16:37,199 --> 00:16:40,219


317
00:16:45,360 --> 00:16:48,240


318
00:16:48,240 --> 00:16:50,699
backout.The information necessary for signing is written in an XML file called arrears list.It

319
00:16:50,699 --> 00:16:52,380


320
00:16:52,380 --> 00:16:54,959
is used for signing IPA benefits.

321
00:16:54,959 --> 00:16:56,880
The contents of the overdue torment list will

322
00:16:56,880 --> 00:16:59,360
be as follows: The

323
00:17:06,240 --> 00:17:08,400
program that uses the debugger must also be

324
00:17:08,400 --> 00:17:11,160
signed and must have the attribute ComApple

325
00:17:11,160 --> 00:17:12,839
Security GetTaskArrow

326
00:17:12,839 --> 00:17:16,760


327
00:17:23,339 --> 00:17:25,679
Debugged side  The contents of the deferred title list used by this program are as

328
00:17:25,679 --> 00:17:27,780


329
00:17:27,780 --> 00:17:30,379
follows I explained two

330
00:17:37,440 --> 00:17:40,260
methods of memory tampering for iOS applications

331
00:17:40,260 --> 00:17:42,679
with implementation details,

332
00:17:42,679 --> 00:17:46,500
but these methods are not the only methods

333
00:17:46,500 --> 00:17:47,580


334
00:17:47,580 --> 00:17:49,320
Use Frida  For example,

335
00:17:49,320 --> 00:17:51,299


336
00:17:51,299 --> 00:17:52,799


337
00:17:52,799 --> 00:17:55,140


338
00:17:55,140 --> 00:17:57,059
you can debug an IOS app without Jailbreak by inserting a gadget into the

339
00:17:57,059 --> 00:17:59,520
debuggee app. Although it is necessary to make changes to the debuggee app,

340
00:17:59,520 --> 00:18:02,760
this method also

341
00:18:02,760 --> 00:18:04,860
avoids jailbreak detection and allows memory tampering.

342
00:18:04,860 --> 00:18:07,340
The

343
00:18:12,919 --> 00:18:15,840
method using lldbysonAPI

344
00:18:15,840 --> 00:18:18,140
takes more time than the method using Frida,

345
00:18:18,140 --> 00:18:21,960
but the advantage is that there is no need to apply patches to the application, and it will not

346
00:18:21,960 --> 00:18:25,320
be caught by tampering detection of the application.In the

347
00:18:25,320 --> 00:18:28,320
future

348
00:18:28,320 --> 00:18:31,320


349
00:18:31,320 --> 00:18:34,760
, we will work on an implementation similar to Frida's dynamic analysis method.  It may

350
00:18:39,240 --> 00:18:42,539
already be the last slide.

351
00:18:42,539 --> 00:18:45,120
To summarize the story so far,

352
00:18:45,120 --> 00:18:47,280
if you use the IPA merit, you can

353
00:18:47,280 --> 00:18:49,860
avoid the JLBREAK detection and

354
00:18:49,860 --> 00:18:53,940
tamper with the memory

355
00:18:53,940 --> 00:18:56,700
.

356
00:18:56,700 --> 00:18:59,100


357
00:18:59,100 --> 00:19:01,620


358
00:19:01,620 --> 00:19:03,299
I hope that it will become the de facto standard tool for diagnosing vulnerabilities in game apps

359
00:19:03,299 --> 00:19:05,418


360
00:19:08,460 --> 00:19:11,160


361
00:19:11,160 --> 00:19:13,260


362
00:19:13,260 --> 00:19:14,760
. I would be happy if you could browse githubrepostri and try using the benefits of IPA

363
00:19:14,760 --> 00:19:18,020
. Thank you for your attention.

