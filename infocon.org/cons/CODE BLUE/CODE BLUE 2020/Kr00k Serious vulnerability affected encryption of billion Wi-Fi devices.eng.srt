1
00:00:39,040 --> 00:00:40,320
hi

2
00:00:40,320 --> 00:00:43,360
do we have any iphone or macbook users

3
00:00:43,360 --> 00:00:45,280
listening

4
00:00:45,280 --> 00:00:48,399
what about samsung galaxy amazon echo

5
00:00:48,399 --> 00:00:51,440
or raspberry pi users

6
00:00:51,440 --> 00:00:53,280
now i can't see you as we're streaming

7
00:00:53,280 --> 00:00:55,600
virtually but i'm pretty sure a lot of

8
00:00:55,600 --> 00:00:59,520
virtual hands were just raised

9
00:00:59,520 --> 00:01:02,160
now what if i told you that anyone could

10
00:01:02,160 --> 00:01:02,559
break

11
00:01:02,559 --> 00:01:06,400
into your encrypted wi-fi communication

12
00:01:06,400 --> 00:01:08,960
when you connect to a wpa2 protected

13
00:01:08,960 --> 00:01:10,960
encrypted wi-fi network

14
00:01:10,960 --> 00:01:13,600
then even without tls on the application

15
00:01:13,600 --> 00:01:14,320
layer

16
00:01:14,320 --> 00:01:16,080
no one should be able to read the data

17
00:01:16,080 --> 00:01:18,640
exchanged between your device

18
00:01:18,640 --> 00:01:21,520
and the wireless access point but that

19
00:01:21,520 --> 00:01:22,479
was not the case

20
00:01:22,479 --> 00:01:24,880
because your devices and not only those

21
00:01:24,880 --> 00:01:26,080
that i mentioned

22
00:01:26,080 --> 00:01:30,080
had this serious wi-fi vulnerability

23
00:01:30,320 --> 00:01:32,560
that was the discovery of eset's iot

24
00:01:32,560 --> 00:01:33,840
research team

25
00:01:33,840 --> 00:01:34,960
that's dedicated to finding

26
00:01:34,960 --> 00:01:37,119
vulnerabilities in popular devices used

27
00:01:37,119 --> 00:01:38,079
at home

28
00:01:38,079 --> 00:01:41,280
and in the enterprise we feel this type

29
00:01:41,280 --> 00:01:43,840
of research is really important

30
00:01:43,840 --> 00:01:46,000
we participated on a forester report

31
00:01:46,000 --> 00:01:48,240
that went out earlier this year

32
00:01:48,240 --> 00:01:50,320
and the conclusions were that consumer

33
00:01:50,320 --> 00:01:52,000
iot devices

34
00:01:52,000 --> 00:01:54,000
are expanding the enterprise attack

35
00:01:54,000 --> 00:01:55,280
surface

36
00:01:55,280 --> 00:01:57,759
now couple that with the fact that most

37
00:01:57,759 --> 00:02:01,119
consumer iot devices can be exploited

38
00:02:01,119 --> 00:02:04,799
and it's a disaster waiting to happen

39
00:02:05,040 --> 00:02:07,920
our iot research team found flaws in a

40
00:02:07,920 --> 00:02:08,479
bunch of

41
00:02:08,479 --> 00:02:11,920
different devices in smart cameras that

42
00:02:11,920 --> 00:02:14,720
allowed an unauthorized adversary to see

43
00:02:14,720 --> 00:02:16,160
whatever that camera saw

44
00:02:16,160 --> 00:02:20,080
you don't want that right in amazon echo

45
00:02:20,080 --> 00:02:22,959
in insecure smart home hubs by various

46
00:02:22,959 --> 00:02:25,040
different manufacturers

47
00:02:25,040 --> 00:02:27,120
and smart home hubs are the gateway to

48
00:02:27,120 --> 00:02:28,080
your whole home

49
00:02:28,080 --> 00:02:30,239
or potentially your your company if

50
00:02:30,239 --> 00:02:33,519
you're using them in a small home office

51
00:02:33,519 --> 00:02:36,640
and the

52
00:02:36,640 --> 00:02:39,599
effect of that depends on what's

53
00:02:39,599 --> 00:02:41,440
connected to that smart home so you can

54
00:02:41,440 --> 00:02:43,680
use your imagination

55
00:02:43,680 --> 00:02:45,920
but crook is our most impactful

56
00:02:45,920 --> 00:02:47,760
discovery yet

57
00:02:47,760 --> 00:02:50,319
that's because it goes beyond iot in the

58
00:02:50,319 --> 00:02:52,800
sense of cool smart gadgets like your

59
00:02:52,800 --> 00:02:54,319
smart watch

60
00:02:54,319 --> 00:02:57,519
or your smart toaster krook affected

61
00:02:57,519 --> 00:02:59,920
billions of wi-fi capable devices

62
00:02:59,920 --> 00:03:01,680
including your laptops

63
00:03:01,680 --> 00:03:05,519
tablets and phones

64
00:03:05,519 --> 00:03:07,920
i'm robert lipowski he sets senior

65
00:03:07,920 --> 00:03:09,040
malware researcher

66
00:03:09,040 --> 00:03:11,040
and my co-speaker today is stefan

67
00:03:11,040 --> 00:03:12,480
svodenchik

68
00:03:12,480 --> 00:03:15,120
hi he said's head of experimental

69
00:03:15,120 --> 00:03:16,959
research and detection

70
00:03:16,959 --> 00:03:19,760
but credit also goes to milos cermak who

71
00:03:19,760 --> 00:03:21,200
was the lead researcher behind this

72
00:03:21,200 --> 00:03:22,159
discovery

73
00:03:22,159 --> 00:03:23,840
as well as issa researcher martin

74
00:03:23,840 --> 00:03:26,480
kalosnik

75
00:03:26,799 --> 00:03:30,159
this and other types of threat research

76
00:03:30,159 --> 00:03:32,720
are in eset's dna and it goes hand in

77
00:03:32,720 --> 00:03:34,720
hand with our focus for the past 30

78
00:03:34,720 --> 00:03:38,239
years on proactive detection

79
00:03:38,239 --> 00:03:40,799
now before we get into the specifics of

80
00:03:40,799 --> 00:03:42,799
the vulnerability and its impact

81
00:03:42,799 --> 00:03:44,959
let's quickly go over some wi-fi

82
00:03:44,959 --> 00:03:46,000
security basics

83
00:03:46,000 --> 00:03:47,840
which are needed to understand how crook

84
00:03:47,840 --> 00:03:50,159
works

85
00:03:50,480 --> 00:03:53,040
first i'm going to talk about wi-fi

86
00:03:53,040 --> 00:03:55,680
associations and disassociations

87
00:03:55,680 --> 00:03:58,799
and their four-way handshake so

88
00:03:58,799 --> 00:04:00,720
the first thing that happens when you

89
00:04:00,720 --> 00:04:02,159
connect your device to an

90
00:04:02,159 --> 00:04:05,439
access point is called the association

91
00:04:05,439 --> 00:04:08,480
basically a connection for our purpose

92
00:04:08,480 --> 00:04:11,040
when talking about crook we're mostly

93
00:04:11,040 --> 00:04:12,840
going to be interested in the reverse

94
00:04:12,840 --> 00:04:15,439
disassociations and these happen for a

95
00:04:15,439 --> 00:04:17,040
multitude of reasons

96
00:04:17,040 --> 00:04:19,199
they can actually occur naturally for

97
00:04:19,199 --> 00:04:20,238
example when

98
00:04:20,238 --> 00:04:22,880
a client roams from one wi-fi station to

99
00:04:22,880 --> 00:04:23,840
another

100
00:04:23,840 --> 00:04:25,320
and then we're talking about a

101
00:04:25,320 --> 00:04:27,360
reassociation

102
00:04:27,360 --> 00:04:29,600
or they happen manually simply when you

103
00:04:29,600 --> 00:04:31,199
turn off the wi-fi connection of your

104
00:04:31,199 --> 00:04:33,120
device

105
00:04:33,120 --> 00:04:34,680
all of these associations and

106
00:04:34,680 --> 00:04:36,479
disassociations are governed by

107
00:04:36,479 --> 00:04:37,360
so-called

108
00:04:37,360 --> 00:04:40,080
management frames and an important thing

109
00:04:40,080 --> 00:04:41,040
to note

110
00:04:41,040 --> 00:04:43,919
these are most often unauthenticated and

111
00:04:43,919 --> 00:04:45,199
unencrypted

112
00:04:45,199 --> 00:04:47,919
and also can be triggered manually what

113
00:04:47,919 --> 00:04:50,560
could go wrong

114
00:04:51,600 --> 00:04:54,000
the four-way handshake establishes

115
00:04:54,000 --> 00:04:54,720
secure

116
00:04:54,720 --> 00:04:57,759
wireless communication now without going

117
00:04:57,759 --> 00:04:59,759
into the technical details

118
00:04:59,759 --> 00:05:02,080
or the group key used for multicast and

119
00:05:02,080 --> 00:05:03,199
broadcast

120
00:05:03,199 --> 00:05:05,039
i'll just mention that the handshake

121
00:05:05,039 --> 00:05:06,479
serves two main purposes

122
00:05:06,479 --> 00:05:09,440
first it's authentication to ensure that

123
00:05:09,440 --> 00:05:10,080
the client

124
00:05:10,080 --> 00:05:12,960
is authorized to connect to the wi-fi

125
00:05:12,960 --> 00:05:15,199
for example knows the wi-fi password

126
00:05:15,199 --> 00:05:17,199
and secondly for confidentiality and

127
00:05:17,199 --> 00:05:18,720
integrity

128
00:05:18,720 --> 00:05:21,039
so a unique per session encryption key

129
00:05:21,039 --> 00:05:22,479
is constructed

130
00:05:22,479 --> 00:05:24,960
it's called the pairwise transient key

131
00:05:24,960 --> 00:05:27,039
the ptk

132
00:05:27,039 --> 00:05:30,160
and a part of that ptk is the tk

133
00:05:30,160 --> 00:05:32,639
which stands for temporal key and this

134
00:05:32,639 --> 00:05:34,400
is used to encrypt unicast data

135
00:05:34,400 --> 00:05:36,320
exchanged between the client

136
00:05:36,320 --> 00:05:39,360
and the access point

137
00:05:39,360 --> 00:05:41,120
so let's take a closer look at how that

138
00:05:41,120 --> 00:05:42,560
tk is used

139
00:05:42,560 --> 00:05:45,919
how encryption is done in wpa2 with

140
00:05:45,919 --> 00:05:48,080
ccmp which is the most ubiquitous

141
00:05:48,080 --> 00:05:49,680
standard today

142
00:05:49,680 --> 00:05:51,520
now i'm going to simplify the scheme not

143
00:05:51,520 --> 00:05:53,840
going into the details of counter mode

144
00:05:53,840 --> 00:05:55,600
and cbc mac

145
00:05:55,600 --> 00:05:58,160
uh here we have some plain text data

146
00:05:58,160 --> 00:05:58,800
that we

147
00:05:58,800 --> 00:06:01,360
are going to transmit and needs to be

148
00:06:01,360 --> 00:06:02,240
encrypted

149
00:06:02,240 --> 00:06:04,160
the cipher being used in this scheme is

150
00:06:04,160 --> 00:06:06,240
aes so we have that

151
00:06:06,240 --> 00:06:08,960
session key the tk which was established

152
00:06:08,960 --> 00:06:10,800
in the four-way handshake

153
00:06:10,800 --> 00:06:13,840
we have a so-called nonce

154
00:06:13,840 --> 00:06:15,520
a number which is only supposed to be

155
00:06:15,520 --> 00:06:17,440
used once this also includes

156
00:06:17,440 --> 00:06:19,840
the packet number these are used to

157
00:06:19,840 --> 00:06:21,520
generate the key stream

158
00:06:21,520 --> 00:06:23,919
that key stream is then xor with the

159
00:06:23,919 --> 00:06:25,120
plaintext data

160
00:06:25,120 --> 00:06:27,680
to get the encrypted data then along

161
00:06:27,680 --> 00:06:29,600
with the packet header this is then

162
00:06:29,600 --> 00:06:31,759
transmitted into the air

163
00:06:31,759 --> 00:06:33,759
and the decryption is the reverse and

164
00:06:33,759 --> 00:06:35,360
shtiva will talk about

165
00:06:35,360 --> 00:06:38,400
that in his part

166
00:06:38,400 --> 00:06:40,720
so let now that we covered the basics

167
00:06:40,720 --> 00:06:42,160
let's get to the main part

168
00:06:42,160 --> 00:06:46,560
what is crook aka cve 2019

169
00:06:46,560 --> 00:06:49,840
15 126.

170
00:06:53,280 --> 00:06:55,280
this is a typical wi-fi connection

171
00:06:55,280 --> 00:06:56,400
between a device

172
00:06:56,400 --> 00:06:59,520
and an access point secured by the wpa2

173
00:06:59,520 --> 00:07:01,039
protocol

174
00:07:01,039 --> 00:07:02,960
the communication is encrypted using

175
00:07:02,960 --> 00:07:05,120
that tk the pairwise session key

176
00:07:05,120 --> 00:07:07,680
that was established in the handshake so

177
00:07:07,680 --> 00:07:09,039
even if someone else

178
00:07:09,039 --> 00:07:11,680
captures those wireless network packets

179
00:07:11,680 --> 00:07:13,360
flying through the air

180
00:07:13,360 --> 00:07:14,960
they wouldn't be able to decrypt them

181
00:07:14,960 --> 00:07:17,759
and read the content right

182
00:07:17,759 --> 00:07:21,840
well the crook vulnerability breaks that

183
00:07:21,840 --> 00:07:23,599
here's an example of how an attacker

184
00:07:23,599 --> 00:07:26,080
could exploit the bug

185
00:07:26,080 --> 00:07:28,880
they could transmit a crafted

186
00:07:28,880 --> 00:07:30,319
disassociation frame

187
00:07:30,319 --> 00:07:31,840
addressed to the victim the victim

188
00:07:31,840 --> 00:07:33,440
device accepts it

189
00:07:33,440 --> 00:07:36,240
and disassociates and data transmission

190
00:07:36,240 --> 00:07:38,319
stops

191
00:07:38,319 --> 00:07:40,479
up to this point everything happened as

192
00:07:40,479 --> 00:07:42,639
it should have

193
00:07:42,639 --> 00:07:45,759
but after that disassociation one last

194
00:07:45,759 --> 00:07:48,080
fragment of data is transmitted

195
00:07:48,080 --> 00:07:50,080
only this time as you can see it's

196
00:07:50,080 --> 00:07:51,840
encrypted with an all zero

197
00:07:51,840 --> 00:07:55,280
trans uh transient key and the attacker

198
00:07:55,280 --> 00:07:56,479
can intercept it

199
00:07:56,479 --> 00:07:59,840
and easily decrypt the content

200
00:08:00,000 --> 00:08:02,800
so how was all that possible well to

201
00:08:02,800 --> 00:08:03,520
answer that

202
00:08:03,520 --> 00:08:06,560
let's rewind and

203
00:08:06,560 --> 00:08:08,639
take a closer look under the hood of

204
00:08:08,639 --> 00:08:12,639
that vulnerable device

205
00:08:12,639 --> 00:08:15,520
spoiler alert this is the culprit behind

206
00:08:15,520 --> 00:08:16,160
crook

207
00:08:16,160 --> 00:08:19,199
a full mac wi-fi chip by the way this

208
00:08:19,199 --> 00:08:20,080
particular one

209
00:08:20,080 --> 00:08:22,960
is from an amazon kindle and it's only

210
00:08:22,960 --> 00:08:23,199
an

211
00:08:23,199 --> 00:08:25,199
eighth of an inch wide so taking this

212
00:08:25,199 --> 00:08:26,479
photograph was

213
00:08:26,479 --> 00:08:29,520
took a bit of an effort stevo tell us

214
00:08:29,520 --> 00:08:32,559
more about these chips

215
00:08:39,760 --> 00:08:42,958
so uh every mobile device your phone

216
00:08:42,958 --> 00:08:45,200
your laptop your smartwatch

217
00:08:45,200 --> 00:08:46,880
which doesn't stop reminding you that

218
00:08:46,880 --> 00:08:48,399
you're gonna probably die tomorrow if

219
00:08:48,399 --> 00:08:49,360
you don't make those 10

220
00:08:49,360 --> 00:08:51,600
000 steps today and even your

221
00:08:51,600 --> 00:08:53,600
intelligent vacuum cleaner if there ever

222
00:08:53,600 --> 00:08:56,320
be intelligent enough to vacuum properly

223
00:08:56,320 --> 00:08:58,880
everything has its own wi-fi chip which

224
00:08:58,880 --> 00:09:01,440
handles all the wi-fi communication

225
00:09:01,440 --> 00:09:03,120
in all reasons mobile device is a full

226
00:09:03,120 --> 00:09:05,680
mac chip tend to be the most used kind

227
00:09:05,680 --> 00:09:07,279
of chips in the market

228
00:09:07,279 --> 00:09:10,000
full max offer better performance in

229
00:09:10,000 --> 00:09:11,519
terms of power consumption

230
00:09:11,519 --> 00:09:13,360
and speed and they are easier to

231
00:09:13,360 --> 00:09:16,720
integrate in complete products

232
00:09:16,720 --> 00:09:19,200
this is a block diagram of one of them

233
00:09:19,200 --> 00:09:21,360
as you can see it's fairly complicated

234
00:09:21,360 --> 00:09:23,040
this one also includes the bluetooth

235
00:09:23,040 --> 00:09:25,680
part but we won't bother with it

236
00:09:25,680 --> 00:09:27,440
we'll look only at the small part of it

237
00:09:27,440 --> 00:09:28,880
which manages the whole wifi

238
00:09:28,880 --> 00:09:31,360
encryption

239
00:09:32,240 --> 00:09:36,000
and this

240
00:09:36,000 --> 00:09:38,480
where the magic happens this is a mac

241
00:09:38,480 --> 00:09:40,160
layer short for media access control

242
00:09:40,160 --> 00:09:41,120
architecture

243
00:09:41,120 --> 00:09:42,560
these are the small parts which handle

244
00:09:42,560 --> 00:09:44,320
all the communication encryption

245
00:09:44,320 --> 00:09:46,240
buffers are used to store order

246
00:09:46,240 --> 00:09:47,360
communication frames

247
00:09:47,360 --> 00:09:48,880
for the time they are being encrypted or

248
00:09:48,880 --> 00:09:51,440
decrypted the transmit engine

249
00:09:51,440 --> 00:09:53,519
constitutes the transmit data to and

250
00:09:53,519 --> 00:09:54,959
from the transmit buffer

251
00:09:54,959 --> 00:09:56,480
receive engine does the same for the

252
00:09:56,480 --> 00:09:58,000
receive buffer

253
00:09:58,000 --> 00:09:59,839
the web engine encapsulates all the

254
00:09:59,839 --> 00:10:01,519
hardware accelerators to perform the

255
00:10:01,519 --> 00:10:02,320
encryption

256
00:10:02,320 --> 00:10:04,880
and encryption it implements all cypher

257
00:10:04,880 --> 00:10:07,040
algorithms

258
00:10:07,040 --> 00:10:11,920
s wep wpa wpa2

259
00:10:11,920 --> 00:10:14,480
psm is a microcontroller that is highly

260
00:10:14,480 --> 00:10:15,440
optimized

261
00:10:15,440 --> 00:10:17,279
for flow control operation is also it

262
00:10:17,279 --> 00:10:19,360
also determines

263
00:10:19,360 --> 00:10:21,360
based on the frame type and association

264
00:10:21,360 --> 00:10:23,200
information the appropriate cipher

265
00:10:23,200 --> 00:10:26,320
algorithm to be used

266
00:10:27,120 --> 00:10:29,519
so how the encryption goes as robert

267
00:10:29,519 --> 00:10:30,959
explained before

268
00:10:30,959 --> 00:10:32,560
every time a device is connected or

269
00:10:32,560 --> 00:10:34,720
reconnected to an access point

270
00:10:34,720 --> 00:10:37,200
after authentication and association a

271
00:10:37,200 --> 00:10:39,279
session encryption key is generated

272
00:10:39,279 --> 00:10:40,640
which is then used for all the

273
00:10:40,640 --> 00:10:46,160
encryption empty location ends the

274
00:10:46,160 --> 00:10:48,880
transit buffer

275
00:10:49,120 --> 00:10:51,839
is being filled with data frames which

276
00:10:51,839 --> 00:10:53,519
need to be send out

277
00:10:53,519 --> 00:10:56,800
web engine encrypts the data per frame

278
00:10:56,800 --> 00:10:58,640
with the generated encryption key and

279
00:10:58,640 --> 00:11:02,319
the transit engine sends them away

280
00:11:03,200 --> 00:11:04,959
so what happens after the association

281
00:11:04,959 --> 00:11:06,480
occurs

282
00:11:06,480 --> 00:11:08,240
the disassociation frame comes through

283
00:11:08,240 --> 00:11:10,399
the receive engine to receive buffer

284
00:11:10,399 --> 00:11:12,480
state machine evaluates the frame and

285
00:11:12,480 --> 00:11:13,519
sends the information

286
00:11:13,519 --> 00:11:16,720
up the ladder there the information is

287
00:11:16,720 --> 00:11:17,600
interpreted as

288
00:11:17,600 --> 00:11:19,920
okay we are about to disconnect let's

289
00:11:19,920 --> 00:11:20,800
drop all the

290
00:11:20,800 --> 00:11:23,440
encryption keys a command to drop

291
00:11:23,440 --> 00:11:25,120
generated session encryption key

292
00:11:25,120 --> 00:11:27,839
is then send since in computing you

293
00:11:27,839 --> 00:11:29,839
don't erase anything properly

294
00:11:29,839 --> 00:11:32,880
you just replace it with zeros decision

295
00:11:32,880 --> 00:11:35,120
encryption key is after dissociation

296
00:11:35,120 --> 00:11:38,399
overwritten by zeros

297
00:11:38,959 --> 00:11:40,880
here comes the term all zero encryption

298
00:11:40,880 --> 00:11:43,519
key this is expected behavior

299
00:11:43,519 --> 00:11:45,600
as no further data is supposed to be

300
00:11:45,600 --> 00:11:47,760
transmitted after the association

301
00:11:47,760 --> 00:11:49,360
and it stays that way until a new

302
00:11:49,360 --> 00:11:50,880
session is generated

303
00:11:50,880 --> 00:11:53,040
after the new reassociation and the new

304
00:11:53,040 --> 00:11:54,399
four-way handshake

305
00:11:54,399 --> 00:11:57,440
but until that happens the transmit

306
00:11:57,440 --> 00:12:00,000
buffer still may contain data the

307
00:12:00,000 --> 00:12:01,920
transmit engine needs to send them away

308
00:12:01,920 --> 00:12:05,839
and continues to do so as usual

309
00:12:05,839 --> 00:12:07,680
so all data which were left in that

310
00:12:07,680 --> 00:12:09,200
buffer after dissociation

311
00:12:09,200 --> 00:12:12,000
occurred are now sent away encrypted

312
00:12:12,000 --> 00:12:15,760
with an all zero encryption key

313
00:12:19,360 --> 00:12:21,839
so when you can grab these frames you

314
00:12:21,839 --> 00:12:23,120
can easily decrypt them into

315
00:12:23,120 --> 00:12:25,279
index data you know the encryption

316
00:12:25,279 --> 00:12:27,839
algorithm

317
00:12:28,000 --> 00:12:31,120
you know the encryption key

318
00:12:31,279 --> 00:12:34,480
you get the nouns from the header

319
00:12:34,480 --> 00:12:39,839
and you can easily decrypt them then

320
00:12:40,720 --> 00:12:42,720
the question is how do you identify

321
00:12:42,720 --> 00:12:44,800
these particular frames in the air

322
00:12:44,800 --> 00:12:48,160
the answer is simple you don't you just

323
00:12:48,160 --> 00:12:49,760
try to decrypt everything you see with

324
00:12:49,760 --> 00:12:50,959
an all zero key

325
00:12:50,959 --> 00:12:53,040
and those frames which after decryption

326
00:12:53,040 --> 00:12:54,720
match binary pattern of the plaintext

327
00:12:54,720 --> 00:12:55,839
data frames

328
00:12:55,839 --> 00:12:58,880
which is something like aaaa03

329
00:12:58,880 --> 00:13:00,880
those are the ones which are formerly

330
00:13:00,880 --> 00:13:04,079
encrypted within all zero key

331
00:13:04,079 --> 00:13:06,160
one can ask how much data can you

332
00:13:06,160 --> 00:13:08,720
decrypt after one disassociation

333
00:13:08,720 --> 00:13:10,880
well the transit buffer has a memory

334
00:13:10,880 --> 00:13:12,720
space of 32 kilobytes

335
00:13:12,720 --> 00:13:15,040
for comparison one kilobyte is a couple

336
00:13:15,040 --> 00:13:16,720
of hundred words of plain text

337
00:13:16,720 --> 00:13:20,000
so 32 kilobytes will be about 10 to

338
00:13:20,000 --> 00:13:22,720
20 000 words which is quite a few pages

339
00:13:22,720 --> 00:13:24,320
of a book

340
00:13:24,320 --> 00:13:27,360
but you must understand that the buffer

341
00:13:27,360 --> 00:13:29,440
isn't always full when the dissociation

342
00:13:29,440 --> 00:13:30,240
happens

343
00:13:30,240 --> 00:13:35,120
it really depends on the timing

344
00:13:35,120 --> 00:13:36,639
so what can an attacker do with this

345
00:13:36,639 --> 00:13:38,959
vulnerability well there are two ways to

346
00:13:38,959 --> 00:13:40,639
an adversary can eavesdrop on these

347
00:13:40,639 --> 00:13:44,800
frames a passive one and an active one

348
00:13:44,800 --> 00:13:47,600
let's begin with the passive one as was

349
00:13:47,600 --> 00:13:48,000
already

350
00:13:48,000 --> 00:13:50,399
mentioned the disassociation occurs

351
00:13:50,399 --> 00:13:51,199
naturally

352
00:13:51,199 --> 00:13:54,240
moving around changing access points low

353
00:13:54,240 --> 00:13:55,920
signal strength

354
00:13:55,920 --> 00:13:59,040
or just due to single interference most

355
00:13:59,040 --> 00:14:00,560
of the time you won't even notice

356
00:14:00,560 --> 00:14:02,079
because of the quick subsequent

357
00:14:02,079 --> 00:14:03,680
reassociation

358
00:14:03,680 --> 00:14:05,920
so let's do the math since this issue

359
00:14:05,920 --> 00:14:07,760
concerns many wi-fi chips

360
00:14:07,760 --> 00:14:09,680
somewhere where there are many of these

361
00:14:09,680 --> 00:14:11,519
mobile devices in one place

362
00:14:11,519 --> 00:14:13,920
like a workspace for example there

363
00:14:13,920 --> 00:14:15,920
should be a lot of them vulnerable

364
00:14:15,920 --> 00:14:17,199
combining with the fact

365
00:14:17,199 --> 00:14:18,800
that natural dissociation occurs quite

366
00:14:18,800 --> 00:14:20,800
often there should be

367
00:14:20,800 --> 00:14:23,680
all zero equipment just flying around

368
00:14:23,680 --> 00:14:24,320
and yes

369
00:14:24,320 --> 00:14:28,240
they are so let's grab them

370
00:14:28,800 --> 00:14:30,560
so what do you think have we tried to

371
00:14:30,560 --> 00:14:32,720
eavesdrow at our workplace

372
00:14:32,720 --> 00:14:35,519
of course we did because you know

373
00:14:35,519 --> 00:14:37,279
sticking your own into things of people

374
00:14:37,279 --> 00:14:40,399
you know is always interesting

375
00:14:40,399 --> 00:14:43,360
and what did you saw first we saw all

376
00:14:43,360 --> 00:14:45,040
vulnerable devices and access points to

377
00:14:45,040 --> 00:14:46,800
which they are connecting

378
00:14:46,800 --> 00:14:49,440
but then after decryption we saw what

379
00:14:49,440 --> 00:14:51,680
kind of data are actually exposed

380
00:14:51,680 --> 00:14:55,040
dns requests tcp http requests

381
00:14:55,040 --> 00:14:57,600
website that people owed you name it

382
00:14:57,600 --> 00:14:59,040
actually everything

383
00:14:59,040 --> 00:15:01,920
that wasn't tls encrypted because that's

384
00:15:01,920 --> 00:15:03,680
another layer of encryption on the ip

385
00:15:03,680 --> 00:15:06,000
level

386
00:15:07,120 --> 00:15:10,240
now when we identified all vulnerable

387
00:15:10,240 --> 00:15:11,040
devices

388
00:15:11,040 --> 00:15:13,839
we can get them to drop even more than

389
00:15:13,839 --> 00:15:16,399
they would normally give up for free

390
00:15:16,399 --> 00:15:18,880
how i can trigger this association

391
00:15:18,880 --> 00:15:19,760
between them

392
00:15:19,760 --> 00:15:26,800
and their access points wherever i want

393
00:15:26,800 --> 00:15:29,279
and again

394
00:15:31,199 --> 00:15:33,680
and again

395
00:15:37,040 --> 00:15:39,759
and just like captain america i can do

396
00:15:39,759 --> 00:15:40,079
this

397
00:15:40,079 --> 00:15:43,600
all day and this is the most dangerous

398
00:15:43,600 --> 00:15:45,199
thing about this vulnerability

399
00:15:45,199 --> 00:15:46,800
because now you can gather this partial

400
00:15:46,800 --> 00:15:48,639
information let me get one thing

401
00:15:48,639 --> 00:15:49,120
straight

402
00:15:49,120 --> 00:15:51,040
the nature of the data frames which are

403
00:15:51,040 --> 00:15:52,880
eventually only a zero key

404
00:15:52,880 --> 00:15:54,880
encrypted and can be eventually

405
00:15:54,880 --> 00:15:56,160
decrypted to plaintext

406
00:15:56,160 --> 00:15:59,199
is quite random it really depends on the

407
00:15:59,199 --> 00:16:01,199
timing of the dissociation

408
00:16:01,199 --> 00:16:04,000
but if you can now invoke it over and

409
00:16:04,000 --> 00:16:04,880
over again

410
00:16:04,880 --> 00:16:07,279
the vulnerability will manage will

411
00:16:07,279 --> 00:16:08,399
manifest itself

412
00:16:08,399 --> 00:16:11,519
over and over again and now you're in

413
00:16:11,519 --> 00:16:13,279
the information gathering business

414
00:16:13,279 --> 00:16:15,440
just waiting until something interesting

415
00:16:15,440 --> 00:16:16,480
pops out

416
00:16:16,480 --> 00:16:23,839
and it always does

417
00:16:29,040 --> 00:16:31,600
as much as i enjoyed those animations

418
00:16:31,600 --> 00:16:33,519
let's demonstrate that this stuff really

419
00:16:33,519 --> 00:16:34,800
works

420
00:16:34,800 --> 00:16:37,440
so we prepared a little demo in our lab

421
00:16:37,440 --> 00:16:39,680
so you can see the attack in action

422
00:16:39,680 --> 00:16:41,600
we're going to use a wireless adapter in

423
00:16:41,600 --> 00:16:43,519
a so-called monitor mode

424
00:16:43,519 --> 00:16:45,199
now some of you that played around with

425
00:16:45,199 --> 00:16:46,639
wireshark

426
00:16:46,639 --> 00:16:49,040
are surely familiar with promiscuous

427
00:16:49,040 --> 00:16:50,959
mode which is also used for packet

428
00:16:50,959 --> 00:16:51,920
sniffing

429
00:16:51,920 --> 00:16:54,160
monitor mode is similar but it allows

430
00:16:54,160 --> 00:16:55,440
packets to be captured

431
00:16:55,440 --> 00:16:57,839
without having to be associated with an

432
00:16:57,839 --> 00:16:59,120
access point

433
00:16:59,120 --> 00:17:01,759
in other words an attacker can carry out

434
00:17:01,759 --> 00:17:03,920
this attack without knowing the wi-fi

435
00:17:03,920 --> 00:17:05,119
password

436
00:17:05,119 --> 00:17:09,199
okay so this is our would be victim

437
00:17:09,199 --> 00:17:12,079
uses his phone is connected to our work

438
00:17:12,079 --> 00:17:12,640
wi-fi

439
00:17:12,640 --> 00:17:15,919
see work wi-fi and

440
00:17:15,919 --> 00:17:17,919
they're gonna check on their smart home

441
00:17:17,919 --> 00:17:19,280
so

442
00:17:19,280 --> 00:17:22,480
connect to the smart home

443
00:17:22,480 --> 00:17:26,880
command interface enters

444
00:17:26,880 --> 00:17:29,919
his credentials

445
00:17:31,520 --> 00:17:35,120
clicks on login and if those credentials

446
00:17:35,120 --> 00:17:37,919
were correct which they were

447
00:17:37,919 --> 00:17:40,960
in a moment he's connected

448
00:17:40,960 --> 00:17:45,120
and can check up on his smart home

449
00:17:45,120 --> 00:17:48,799
see how his nuclear power plant

450
00:17:48,799 --> 00:17:51,840
is doing turn it on off

451
00:17:51,840 --> 00:17:54,000
whatever now let's switch over to the

452
00:17:54,000 --> 00:17:54,960
perspective

453
00:17:54,960 --> 00:17:58,400
of the attacker so

454
00:17:58,400 --> 00:18:01,679
the attacker has prepared his script

455
00:18:01,679 --> 00:18:04,480
for invoking crook uh the parameters

456
00:18:04,480 --> 00:18:04,880
there

457
00:18:04,880 --> 00:18:07,840
are the victim's mac address which was

458
00:18:07,840 --> 00:18:08,559
uh

459
00:18:08,559 --> 00:18:10,240
would have to be known in a different

460
00:18:10,240 --> 00:18:11,840
way and also uh

461
00:18:11,840 --> 00:18:14,880
that wifi that targeted wi-fi ssid

462
00:18:14,880 --> 00:18:16,799
and note that as i mentioned earlier

463
00:18:16,799 --> 00:18:19,679
doesn't need to know the wi-fi password

464
00:18:19,679 --> 00:18:22,960
as you can see some packets

465
00:18:22,960 --> 00:18:25,679
were captured and we're letting the

466
00:18:25,679 --> 00:18:26,400
script run

467
00:18:26,400 --> 00:18:29,600
so it's running continuously so uh we're

468
00:18:29,600 --> 00:18:31,440
continuing to

469
00:18:31,440 --> 00:18:35,120
capture more packets now let's go back

470
00:18:35,120 --> 00:18:37,760
and see what happened over there so in

471
00:18:37,760 --> 00:18:38,559
the beginning

472
00:18:38,559 --> 00:18:41,440
we sent out that this script sent out

473
00:18:41,440 --> 00:18:44,400
that disassociation frame to the victim

474
00:18:44,400 --> 00:18:46,640
uh now we can see that the victim

475
00:18:46,640 --> 00:18:48,400
reconnected to that wi-fi so the

476
00:18:48,400 --> 00:18:50,559
disassociation frame was accepted and

477
00:18:50,559 --> 00:18:53,120
and it worked and now we figured that

478
00:18:53,120 --> 00:18:54,720
the device is vulnerable

479
00:18:54,720 --> 00:18:56,880
because we were able to successfully

480
00:18:56,880 --> 00:18:58,080
decrypt

481
00:18:58,080 --> 00:19:00,240
uh this packet as shtevo mentioned this

482
00:19:00,240 --> 00:19:01,120
is that

483
00:19:01,120 --> 00:19:04,720
uh magic identifier aaaa03

484
00:19:04,720 --> 00:19:06,480
and now we can see we can read it in

485
00:19:06,480 --> 00:19:09,360
plain text that we were able to

486
00:19:09,360 --> 00:19:13,280
decrypt with an all zero key

487
00:19:13,280 --> 00:19:15,840
this packet now we scroll down there's

488
00:19:15,840 --> 00:19:17,840
another packet

489
00:19:17,840 --> 00:19:19,600
we can choose whichever one is

490
00:19:19,600 --> 00:19:20,880
interesting

491
00:19:20,880 --> 00:19:24,240
is useful for our needs and more packets

492
00:19:24,240 --> 00:19:28,160
continue coming in so let's select

493
00:19:28,160 --> 00:19:32,799
this one this http packet

494
00:19:33,120 --> 00:19:36,799
wireshark helps us

495
00:19:36,799 --> 00:19:39,840
parse uh some of those fields over there

496
00:19:39,840 --> 00:19:42,240
so let's let's select that session id so

497
00:19:42,240 --> 00:19:43,280
this particular one

498
00:19:43,280 --> 00:19:45,520
contains the session id copy it to the

499
00:19:45,520 --> 00:19:46,320
clipboard

500
00:19:46,320 --> 00:19:49,919
switch over to our browser and then

501
00:19:49,919 --> 00:19:53,280
the attacker is able without knowing the

502
00:19:53,280 --> 00:19:54,160
password

503
00:19:54,160 --> 00:19:55,840
to the smart home interface without

504
00:19:55,840 --> 00:19:57,370
knowing password to the wi-fi

505
00:19:57,370 --> 00:19:58,880
[Music]

506
00:19:58,880 --> 00:20:02,159
able to connect to that interface

507
00:20:02,159 --> 00:20:06,559
and do whatever malicious mischief

508
00:20:06,559 --> 00:20:08,880
and we will be releasing that testing

509
00:20:08,880 --> 00:20:10,480
script that we used

510
00:20:10,480 --> 00:20:15,039
in the demo on our github after the

511
00:20:18,840 --> 00:20:21,840
presentation

512
00:20:22,559 --> 00:20:25,200
uh but that's not all here's a different

513
00:20:25,200 --> 00:20:26,159
scenario

514
00:20:26,159 --> 00:20:28,000
where it's the access point that is

515
00:20:28,000 --> 00:20:31,200
susceptible to this vulnerability

516
00:20:31,200 --> 00:20:34,320
similarly to the previous example an

517
00:20:34,320 --> 00:20:36,159
attacker would be able to intercept and

518
00:20:36,159 --> 00:20:37,919
decrypt private data that was being

519
00:20:37,919 --> 00:20:39,360
addressed from the access point to your

520
00:20:39,360 --> 00:20:40,480
decline device

521
00:20:40,480 --> 00:20:42,080
even if your client device wasn't

522
00:20:42,080 --> 00:20:43,760
vulnerable itself

523
00:20:43,760 --> 00:20:46,000
he can still get information about your

524
00:20:46,000 --> 00:20:46,799
connection

525
00:20:46,799 --> 00:20:48,720
directly from the access point the

526
00:20:48,720 --> 00:20:50,640
difference is only

527
00:20:50,640 --> 00:20:53,600
that he will get to see only responses

528
00:20:53,600 --> 00:20:54,159
now

529
00:20:54,159 --> 00:20:57,280
dns and http responses for example or a

530
00:20:57,280 --> 00:20:58,480
document being sent

531
00:20:58,480 --> 00:21:01,280
to a wi-fi printer the fact that

532
00:21:01,280 --> 00:21:02,559
wireless routers

533
00:21:02,559 --> 00:21:04,320
and access points are also affected by

534
00:21:04,320 --> 00:21:05,760
this vulnerability

535
00:21:05,760 --> 00:21:07,760
greatly increases the scope of the

536
00:21:07,760 --> 00:21:09,679
attack

537
00:21:09,679 --> 00:21:11,760
and it's also more difficult to protect

538
00:21:11,760 --> 00:21:13,679
protect against it

539
00:21:13,679 --> 00:21:16,000
since the security of access points is

540
00:21:16,000 --> 00:21:18,080
typically beyond your control

541
00:21:18,080 --> 00:21:21,440
a solution to this is to treat even

542
00:21:21,440 --> 00:21:25,200
wpa to protected networks as insecure

543
00:21:25,200 --> 00:21:27,679
and make sure you always use encryption

544
00:21:27,679 --> 00:21:28,960
on the ip level

545
00:21:28,960 --> 00:21:32,320
tls or vpn

546
00:21:42,880 --> 00:21:45,840
crook affected devices with cypress and

547
00:21:45,840 --> 00:21:47,760
broadcom wi-fi chips

548
00:21:47,760 --> 00:21:50,799
and these chips are really prevalent

549
00:21:50,799 --> 00:21:52,799
these are just the examples of devices

550
00:21:52,799 --> 00:21:54,480
we confirmed to have been vulnerable

551
00:21:54,480 --> 00:21:56,559
in our lab but we know there were many

552
00:21:56,559 --> 00:21:58,799
more and the total number of

553
00:21:58,799 --> 00:22:02,720
affected devices was well over a billion

554
00:22:02,720 --> 00:22:04,480
when we were doing our initial crook

555
00:22:04,480 --> 00:22:06,159
testing last year

556
00:22:06,159 --> 00:22:07,760
we did not see the vulnerability

557
00:22:07,760 --> 00:22:09,919
manifest itself on devices with wi-fi

558
00:22:09,919 --> 00:22:11,760
chips from other manufacturers like

559
00:22:11,760 --> 00:22:13,120
qualcomm realtek

560
00:22:13,120 --> 00:22:16,320
raylink or mediatek but we later found

561
00:22:16,320 --> 00:22:18,480
out that some of those companies had

562
00:22:18,480 --> 00:22:20,960
other similar issues and stefan will

563
00:22:20,960 --> 00:22:24,480
tell you more about that in a minute

564
00:22:25,520 --> 00:22:28,080
so what happened after that discovery

565
00:22:28,080 --> 00:22:29,440
well we work with

566
00:22:29,440 --> 00:22:31,120
the affected manufacturers through a

567
00:22:31,120 --> 00:22:33,760
responsible disclosure process

568
00:22:33,760 --> 00:22:36,480
and considering the complexity of the

569
00:22:36,480 --> 00:22:36,880
bug

570
00:22:36,880 --> 00:22:39,280
and the two-step patching process

571
00:22:39,280 --> 00:22:41,520
involving chip manufacturers

572
00:22:41,520 --> 00:22:44,480
and then oems or device manufacturers we

573
00:22:44,480 --> 00:22:46,320
agreed on a longer than usual grace

574
00:22:46,320 --> 00:22:50,000
period of a 120 days

575
00:22:50,000 --> 00:22:52,400
as far as we know most major vendors

576
00:22:52,400 --> 00:22:55,679
have released patches

577
00:22:55,679 --> 00:22:58,000
now not only would it be difficult for

578
00:22:58,000 --> 00:22:59,840
us to communicate with

579
00:22:59,840 --> 00:23:02,000
every individual device manufacturer

580
00:23:02,000 --> 00:23:04,080
that could possibly be using

581
00:23:04,080 --> 00:23:06,720
these chips in their devices it would

582
00:23:06,720 --> 00:23:08,240
also be impossible

583
00:23:08,240 --> 00:23:10,320
i mean there is no public comprehensive

584
00:23:10,320 --> 00:23:12,000
list

585
00:23:12,000 --> 00:23:14,480
clients of broadcom and cyprus that's

586
00:23:14,480 --> 00:23:16,480
proprietary information of broadcom and

587
00:23:16,480 --> 00:23:17,679
cyprus

588
00:23:17,679 --> 00:23:20,480
and they didn't tell us so what we did

589
00:23:20,480 --> 00:23:21,760
in order to ensure that

590
00:23:21,760 --> 00:23:23,919
all possibly affected parties became

591
00:23:23,919 --> 00:23:25,679
aware of the bug

592
00:23:25,679 --> 00:23:28,799
was we work with ikasi an organization

593
00:23:28,799 --> 00:23:30,799
that helps coordinate such complicated

594
00:23:30,799 --> 00:23:32,080
disclosures

595
00:23:32,080 --> 00:23:33,440
and we strongly encourage other

596
00:23:33,440 --> 00:23:35,600
researchers in similar situations to do

597
00:23:35,600 --> 00:23:38,879
so they were very helpful

598
00:23:40,720 --> 00:23:43,200
i mentioned that our initial scripts for

599
00:23:43,200 --> 00:23:44,640
testing crook didn't reveal the

600
00:23:44,640 --> 00:23:46,640
vulnerability on other chipsets than

601
00:23:46,640 --> 00:23:49,200
broadcom or cyprus

602
00:23:49,200 --> 00:23:51,919
that was true but we did find something

603
00:23:51,919 --> 00:23:53,200
nevertheless

604
00:23:53,200 --> 00:23:56,559
and stefan will tell you more

605
00:24:01,279 --> 00:24:04,720
so after our former rsa presentation in

606
00:24:04,720 --> 00:24:05,600
february

607
00:24:05,600 --> 00:24:07,279
the issue was brought to attention of

608
00:24:07,279 --> 00:24:09,600
many other chipset manufacturers

609
00:24:09,600 --> 00:24:11,679
one of the chips we were looking into

610
00:24:11,679 --> 00:24:13,760
aside from broadcom and cyprus were from

611
00:24:13,760 --> 00:24:14,720
qualcomm

612
00:24:14,720 --> 00:24:17,039
our investigation found that their wi-fi

613
00:24:17,039 --> 00:24:18,400
chips are also vulnerable

614
00:24:18,400 --> 00:24:20,159
but the exploit manifests itself

615
00:24:20,159 --> 00:24:22,799
differently

616
00:24:24,720 --> 00:24:26,960
this is via shark block of a residual

617
00:24:26,960 --> 00:24:29,039
frame after the association was invoked

618
00:24:29,039 --> 00:24:30,720
on a qualcomm router

619
00:24:30,720 --> 00:24:34,960
as you can see protected flag isn't true

620
00:24:34,960 --> 00:24:36,960
and the frame appears to have a ccemp

621
00:24:36,960 --> 00:24:39,039
parameter but the data

622
00:24:39,039 --> 00:24:40,799
aren't encrypted at all as they should

623
00:24:40,799 --> 00:24:42,320
be this frame

624
00:24:42,320 --> 00:24:47,279
is an icmp echo from ping command

625
00:24:47,279 --> 00:24:50,559
we reported this this the issue to them

626
00:24:50,559 --> 00:24:51,760
and they approached it as a crook

627
00:24:51,760 --> 00:24:53,679
variant and assigned

628
00:24:53,679 --> 00:24:58,080
cve 2020 3702

629
00:24:58,080 --> 00:25:01,840
the affected chip was qca 9531

630
00:25:01,840 --> 00:25:03,360
which is a highly integrated and

631
00:25:03,360 --> 00:25:04,960
feature-rich system and chip

632
00:25:04,960 --> 00:25:08,320
for advanced wi-fi platforms

633
00:25:08,320 --> 00:25:11,360
it is used mainly in network routers

634
00:25:11,360 --> 00:25:13,120
they resolve the issue with updating

635
00:25:13,120 --> 00:25:16,000
their proprietary linux driver in july

636
00:25:16,000 --> 00:25:18,000
the only problem is that not all devices

637
00:25:18,000 --> 00:25:19,360
with qualcomm chips

638
00:25:19,360 --> 00:25:21,919
use this proprietary driver in some

639
00:25:21,919 --> 00:25:22,880
cases

640
00:25:22,880 --> 00:25:26,960
open source linux drivers are also used

641
00:25:26,960 --> 00:25:30,159
such as upstream adh9k

642
00:25:30,159 --> 00:25:33,520
driver for example so a word of caution

643
00:25:33,520 --> 00:25:36,400
that these may or may not be patched yet

644
00:25:36,400 --> 00:25:38,240
the good news is the new mobile devices

645
00:25:38,240 --> 00:25:39,520
with integrated

646
00:25:39,520 --> 00:25:42,159
system and chips specific specifically

647
00:25:42,159 --> 00:25:44,799
for android and windows on snapdragon

648
00:25:44,799 --> 00:25:47,360
should be not affected by this issue

649
00:25:47,360 --> 00:25:49,760
other widespread wi-fi chips that were

650
00:25:49,760 --> 00:25:52,640
that we looked into were from mediatek

651
00:25:52,640 --> 00:25:54,720
we observed a vulnerable behavior very

652
00:25:54,720 --> 00:25:56,640
similar to the one observed on qualcomm

653
00:25:56,640 --> 00:25:57,679
devices

654
00:25:57,679 --> 00:26:00,400
on an older access router but what was

655
00:26:00,400 --> 00:26:01,919
far more interesting

656
00:26:01,919 --> 00:26:04,320
we observed it on the current microsoft

657
00:26:04,320 --> 00:26:05,760
azure sphere development kit

658
00:26:05,760 --> 00:26:08,840
which uses mediatek mt-3630

659
00:26:08,840 --> 00:26:10,799
microcontroller

660
00:26:10,799 --> 00:26:13,360
the mt3620 is a highly integrated

661
00:26:13,360 --> 00:26:16,159
high-performance iot mcu

662
00:26:16,159 --> 00:26:17,919
with the high level of security

663
00:26:17,919 --> 00:26:19,840
necessary for modern robust internet

664
00:26:19,840 --> 00:26:22,159
connected devices

665
00:26:22,159 --> 00:26:23,919
it targets wide range of iot

666
00:26:23,919 --> 00:26:26,159
applications including smart homes

667
00:26:26,159 --> 00:26:28,799
commercial industrial and many other

668
00:26:28,799 --> 00:26:31,360
domains

669
00:26:31,520 --> 00:26:33,039
we've contacted mediatek above this

670
00:26:33,039 --> 00:26:35,600
discovery discovered vulnerabilities

671
00:26:35,600 --> 00:26:38,159
mediatek has informed us that they are

672
00:26:38,159 --> 00:26:39,600
aware of the issue

673
00:26:39,600 --> 00:26:42,799
and reviewed all wi-fi products and that

674
00:26:42,799 --> 00:26:44,480
corresponding software patches to

675
00:26:44,480 --> 00:26:46,000
impacted projects

676
00:26:46,000 --> 00:26:47,200
have been released to different

677
00:26:47,200 --> 00:26:50,320
customers around march and april already

678
00:26:50,320 --> 00:26:51,919
a separate question remains whether all

679
00:26:51,919 --> 00:26:53,840
device manufacturers have implemented

680
00:26:53,840 --> 00:26:56,080
these patches

681
00:26:56,080 --> 00:26:59,440
with regard to other sphere mt3620

682
00:26:59,440 --> 00:27:01,200
the patch should be integrated into

683
00:27:01,200 --> 00:27:05,039
latest operational system update

684
00:27:05,440 --> 00:27:07,039
and how the one liberty manifested

685
00:27:07,039 --> 00:27:08,640
itself on mediatek devices

686
00:27:08,640 --> 00:27:11,200
very similar as on the qualcomm devices

687
00:27:11,200 --> 00:27:12,960
this is a very sharp lock

688
00:27:12,960 --> 00:27:14,400
of a residual frame after the

689
00:27:14,400 --> 00:27:18,840
association was invoked on azure sphere

690
00:27:18,840 --> 00:27:21,360
mt-3620 as you can see the protected

691
00:27:21,360 --> 00:27:21,840
flag

692
00:27:21,840 --> 00:27:25,360
is set true but the frame doesn't have

693
00:27:25,360 --> 00:27:28,480
any ccmp parameters

694
00:27:28,480 --> 00:27:31,520
and the beginning of the data is falsely

695
00:27:31,520 --> 00:27:32,720
identified as a

696
00:27:32,720 --> 00:27:38,000
wep header here we didn't use icmp echo

697
00:27:38,000 --> 00:27:40,720
because of the device limitations but an

698
00:27:40,720 --> 00:27:41,360
application

699
00:27:41,360 --> 00:27:43,279
which sends udp frames with a simple

700
00:27:43,279 --> 00:27:44,960
pattern

701
00:27:44,960 --> 00:27:49,840
as you can see the frame isn't encrypted

702
00:27:50,000 --> 00:27:53,440
okay let's wrap up so what are the

703
00:27:53,440 --> 00:27:56,159
takeaways for you

704
00:27:56,159 --> 00:27:58,399
the source of crook and the other

705
00:27:58,399 --> 00:28:00,240
related vulnerabilities

706
00:28:00,240 --> 00:28:03,440
is the wi-fi chip now fortunately you

707
00:28:03,440 --> 00:28:04,720
don't have to go

708
00:28:04,720 --> 00:28:06,399
and replace the chips on all your

709
00:28:06,399 --> 00:28:09,039
devices how would you do that

710
00:28:09,039 --> 00:28:11,279
and you don't have to be throwing away

711
00:28:11,279 --> 00:28:14,000
your iphones either

712
00:28:14,000 --> 00:28:15,840
no you can mitigate the vulnerabilities

713
00:28:15,840 --> 00:28:19,360
with a firmware or or driver update

714
00:28:19,360 --> 00:28:22,159
the obvious advice that arose from our

715
00:28:22,159 --> 00:28:24,159
initial crook discovery was

716
00:28:24,159 --> 00:28:26,720
make sure that all of your devices with

717
00:28:26,720 --> 00:28:28,559
broadcom or cypress chips

718
00:28:28,559 --> 00:28:31,520
are running the latest software versions

719
00:28:31,520 --> 00:28:33,600
now that device has its limitations

720
00:28:33,600 --> 00:28:35,200
though first

721
00:28:35,200 --> 00:28:37,760
as a regular user you often have no way

722
00:28:37,760 --> 00:28:38,480
of knowing

723
00:28:38,480 --> 00:28:42,080
what vendor made the chip in your device

724
00:28:42,080 --> 00:28:45,279
and secondly as it turned out

725
00:28:45,279 --> 00:28:47,840
other similar vulnerabilities affected

726
00:28:47,840 --> 00:28:50,399
chips by other manufacturers

727
00:28:50,399 --> 00:28:53,679
so we're going back to the almighty

728
00:28:53,679 --> 00:28:54,399
advice

729
00:28:54,399 --> 00:28:56,320
just better to make sure to keep all of

730
00:28:56,320 --> 00:28:59,279
your devices up to date

731
00:28:59,279 --> 00:29:01,039
and it goes for access points in wi-fi

732
00:29:01,039 --> 00:29:02,559
routers too

733
00:29:02,559 --> 00:29:05,120
because as stable talked about crook

734
00:29:05,120 --> 00:29:07,279
affects those too

735
00:29:07,279 --> 00:29:11,440
and it also affects wpa2 enterprise

736
00:29:11,440 --> 00:29:14,799
a final general note many of those

737
00:29:14,799 --> 00:29:16,159
devices

738
00:29:16,159 --> 00:29:18,480
we talked about that were vulnerable

739
00:29:18,480 --> 00:29:20,159
like smartphones

740
00:29:20,159 --> 00:29:21,600
they get over-the-air updates

741
00:29:21,600 --> 00:29:24,159
automatically or the user is at least

742
00:29:24,159 --> 00:29:26,480
prompted to install them

743
00:29:26,480 --> 00:29:29,360
but others like some wi-fi routers for

744
00:29:29,360 --> 00:29:30,080
example

745
00:29:30,080 --> 00:29:32,480
need to be updated manually and this is

746
00:29:32,480 --> 00:29:34,159
often problematic

747
00:29:34,159 --> 00:29:36,640
it could lead to attack scenarios like

748
00:29:36,640 --> 00:29:37,200
those

749
00:29:37,200 --> 00:29:40,240
stefan talked about and this is cause

750
00:29:40,240 --> 00:29:42,559
for concern in normal situations

751
00:29:42,559 --> 00:29:44,640
but even more so when more people are

752
00:29:44,640 --> 00:29:45,840
working from home

753
00:29:45,840 --> 00:29:50,159
due to covet 19. so these are employees

754
00:29:50,159 --> 00:29:52,960
accessing corporate resources that are

755
00:29:52,960 --> 00:29:54,080
responsible for their

756
00:29:54,080 --> 00:29:57,520
own home wi-fi security so crook is

757
00:29:57,520 --> 00:29:59,679
something that company csos definitely

758
00:29:59,679 --> 00:30:03,200
need to be paying attention to

759
00:30:04,399 --> 00:30:06,240
for more technical details on the crook

760
00:30:06,240 --> 00:30:08,240
vulnerability check out our

761
00:30:08,240 --> 00:30:10,799
research paper for up-to-date

762
00:30:10,799 --> 00:30:11,679
information

763
00:30:11,679 --> 00:30:14,399
frequently asked questions the script

764
00:30:14,399 --> 00:30:16,080
that we used in the demo

765
00:30:16,080 --> 00:30:18,640
and links to vendor advisories go to

766
00:30:18,640 --> 00:30:20,240
this webpage we created

767
00:30:20,240 --> 00:30:23,840
dedicated to crook

768
00:30:24,640 --> 00:30:27,120
thank you for watching do make sure to

769
00:30:27,120 --> 00:30:28,240
check out our lab's

770
00:30:28,240 --> 00:30:31,279
twitter account at eset research

771
00:30:31,279 --> 00:30:34,399
and our blog reliefsecurity.com for the

772
00:30:34,399 --> 00:30:37,678
latest research updates

