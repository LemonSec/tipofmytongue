1
00:00:47,920 --> 00:00:48,480
hi

2
00:00:48,480 --> 00:00:51,120
thanks for watching my presentation

3
00:00:51,120 --> 00:00:51,680
today

4
00:00:51,680 --> 00:00:53,120
i would like to talk about memory

5
00:00:53,120 --> 00:00:54,800
authentication 2.

6
00:00:54,800 --> 00:00:58,000
i have created a tool called apk mate

7
00:00:58,000 --> 00:01:00,480
it's a particular interesting to do's

8
00:01:00,480 --> 00:01:02,800
all you full forecast on scripting test

9
00:01:02,800 --> 00:01:05,759
or penetration test

10
00:01:08,960 --> 00:01:11,280
i am thai squad from japan and i am

11
00:01:11,280 --> 00:01:13,600
script engineer at akatsuki

12
00:01:13,600 --> 00:01:16,400
akatsuki is a game company that focused

13
00:01:16,400 --> 00:01:18,080
on mobile games

14
00:01:18,080 --> 00:01:21,759
recently i've been focusing on

15
00:01:21,759 --> 00:01:24,840
networking printer pen testing on game

16
00:01:24,840 --> 00:01:26,080
security

17
00:01:26,080 --> 00:01:28,320
three years ago i was a student staff

18
00:01:28,320 --> 00:01:29,840
member at coldwell

19
00:01:29,840 --> 00:01:32,079
so i am very excited to be able to

20
00:01:32,079 --> 00:01:34,960
present it today

21
00:01:38,720 --> 00:01:42,159
i recently published two works in japan

22
00:01:42,159 --> 00:01:44,560
the first one is the future of a very

23
00:01:44,560 --> 00:01:47,119
famous japanese version called www press

24
00:01:47,119 --> 00:01:50,159
where i write about web security tools

25
00:01:50,159 --> 00:01:52,320
the second book is about universal

26
00:01:52,320 --> 00:01:54,880
engineering with github

27
00:01:54,880 --> 00:01:57,200
our book comes out earlier than the

28
00:01:57,200 --> 00:01:59,840
guitar book

29
00:02:03,600 --> 00:02:05,920
today's topic is 3d testing for more

30
00:02:05,920 --> 00:02:07,680
game app

31
00:02:07,680 --> 00:02:10,000
i've created a useful tool for screen

32
00:02:10,000 --> 00:02:10,720
testing

33
00:02:10,720 --> 00:02:14,160
i'll share with you

34
00:02:18,239 --> 00:02:20,800
security testing of web applications are

35
00:02:20,800 --> 00:02:22,959
simple mobile apps can find the most

36
00:02:22,959 --> 00:02:23,760
primaries

37
00:02:23,760 --> 00:02:26,319
by using a procedure to modify with

38
00:02:26,319 --> 00:02:27,120
request

39
00:02:27,120 --> 00:02:30,800
response to server

40
00:02:34,959 --> 00:02:37,599
however mobile games often implement

41
00:02:37,599 --> 00:02:38,319
game logic

42
00:02:38,319 --> 00:02:41,200
and ansi logic in their clients and

43
00:02:41,200 --> 00:02:42,000
zachariah

44
00:02:42,000 --> 00:02:45,680
needs to take time to check it

45
00:02:45,680 --> 00:02:48,000
it's more difficult than a simple one of

46
00:02:48,000 --> 00:02:50,800
because of the perspective of reverse

47
00:02:50,800 --> 00:02:53,120
engineering

48
00:02:53,120 --> 00:02:55,440
some examples include the following

49
00:02:55,440 --> 00:02:56,800
items

50
00:02:56,800 --> 00:02:59,920
decrypting request response inclusion

51
00:02:59,920 --> 00:03:02,400
essential planning private lewd

52
00:03:02,400 --> 00:03:04,640
privileges detection bypass

53
00:03:04,640 --> 00:03:07,200
memory modification today i am going to

54
00:03:07,200 --> 00:03:08,720
discuss memory modification

55
00:03:08,720 --> 00:03:11,200
in depth

56
00:03:16,640 --> 00:03:19,040
memory modification is the easiest way

57
00:03:19,040 --> 00:03:20,800
to cheat in games

58
00:03:20,800 --> 00:03:22,959
whole android games there is a

59
00:03:22,959 --> 00:03:27,120
well-known teacher called game guarding

60
00:03:30,319 --> 00:03:32,720
apk mate is memory search and password

61
00:03:32,720 --> 00:03:35,840
for debuggable apk

62
00:03:35,840 --> 00:03:39,280
it works without blood and the android

63
00:03:39,280 --> 00:03:40,560
ndk

64
00:03:40,560 --> 00:03:44,080
it's implemented in goron this is a

65
00:03:44,080 --> 00:03:44,879
mobile screen

66
00:03:44,879 --> 00:03:48,480
testing tool agaski's internal security

67
00:03:48,480 --> 00:03:49,440
teams use

68
00:03:49,440 --> 00:03:52,400
it to perform security test for mobile

69
00:03:52,400 --> 00:03:54,959
game app

70
00:03:58,080 --> 00:04:00,480
the following are the advantages well it

71
00:04:00,480 --> 00:04:01,120
became right

72
00:04:01,120 --> 00:04:04,560
over the over other

73
00:04:04,560 --> 00:04:07,599
such as game guardian

74
00:04:08,640 --> 00:04:10,720
akp image does not require root

75
00:04:10,720 --> 00:04:12,080
privileges

76
00:04:12,080 --> 00:04:14,640
therefore there is no need to bypass

77
00:04:14,640 --> 00:04:16,639
rejection

78
00:04:16,639 --> 00:04:20,639
game off of direct blood privileges

79
00:04:20,639 --> 00:04:25,840
also it works with carpal cui

80
00:04:25,840 --> 00:04:28,560
there are no competing tools that work

81
00:04:28,560 --> 00:04:31,360
with cui

82
00:04:36,400 --> 00:04:39,520
now let's all sit down video

83
00:04:39,520 --> 00:04:43,040
this is how ap camera is used for a game

84
00:04:43,040 --> 00:04:45,440
that can be created by typing a million

85
00:04:45,440 --> 00:04:46,720
times

86
00:04:46,720 --> 00:04:49,520
the find quant is used to find the value

87
00:04:49,520 --> 00:04:52,639
displayed in memory

88
00:04:52,800 --> 00:04:55,440
if you find where the value in the

89
00:04:55,440 --> 00:04:56,320
memory

90
00:04:56,320 --> 00:05:00,400
you can use the first command to change

91
00:05:08,840 --> 00:05:11,840
it

92
00:05:14,320 --> 00:05:17,199
from here i will explain how to use ap

93
00:05:17,199 --> 00:05:18,560
game rate

94
00:05:18,560 --> 00:05:20,800
first of all let's start with how to

95
00:05:20,800 --> 00:05:23,039
install epic game rate

96
00:05:23,039 --> 00:05:26,320
you can get the binary on github after

97
00:05:26,320 --> 00:05:27,680
downloading the binary

98
00:05:27,680 --> 00:05:31,360
use gadg bitcoin to push the binary

99
00:05:31,360 --> 00:05:38,720
to your android device

100
00:05:38,720 --> 00:05:41,840
let's start with how to run it use the

101
00:05:41,840 --> 00:05:44,240
last quantity read files used by the

102
00:05:44,240 --> 00:05:45,440
target app

103
00:05:45,440 --> 00:05:48,639
so et camera can only be used with apps

104
00:05:48,639 --> 00:05:51,199
that have the developer attribute

105
00:05:51,199 --> 00:05:53,759
enabled

106
00:05:53,759 --> 00:05:57,039
so apk made can only be used with apps

107
00:05:57,039 --> 00:05:57,520
that

108
00:05:57,520 --> 00:06:01,840
have the debug attribute enabled

109
00:06:05,680 --> 00:06:08,240
to enable the debugger attribute open

110
00:06:08,240 --> 00:06:10,319
the android graphics xml

111
00:06:10,319 --> 00:06:13,520
and add the following xml attribute to

112
00:06:13,520 --> 00:06:21,840
the application xml node

113
00:06:22,240 --> 00:06:25,440
using apk user you can change jfk to

114
00:06:25,440 --> 00:06:28,880
read background with a single command

115
00:06:28,880 --> 00:06:35,840
apk u3 is another tool i created

116
00:06:37,759 --> 00:06:41,280
apk u3 is a useful utility for android

117
00:06:41,280 --> 00:06:44,800
of security testing other useful

118
00:06:44,800 --> 00:06:45,360
features

119
00:06:45,360 --> 00:06:49,680
are taking snapshot move to connected pc

120
00:06:49,680 --> 00:06:54,639
design the apk

121
00:06:54,880 --> 00:06:58,080
checking android max xml when

122
00:06:58,080 --> 00:07:03,840
they called the apk

123
00:07:05,919 --> 00:07:08,880
after running the last con directory is

124
00:07:08,880 --> 00:07:11,520
automatically changes

125
00:07:11,520 --> 00:07:15,520
so could be made from data local tnp

126
00:07:15,520 --> 00:07:18,000
learning rate launches on interactive

127
00:07:18,000 --> 00:07:20,400
prompts

128
00:07:24,080 --> 00:07:27,199
many softwares are implemented in the

129
00:07:27,199 --> 00:07:30,000
interactive prompt but there are three

130
00:07:30,000 --> 00:07:31,280
main ones

131
00:07:31,280 --> 00:07:34,240
first find commands that are specified

132
00:07:34,240 --> 00:07:36,560
into the barrier in memory

133
00:07:36,560 --> 00:07:38,639
second predator command filter starts

134
00:07:38,639 --> 00:07:41,199
without using the specified value

135
00:07:41,199 --> 00:07:43,759
third party command lines the specified

136
00:07:43,759 --> 00:07:44,879
value to the

137
00:07:44,879 --> 00:07:48,479
address found by the search

138
00:07:54,639 --> 00:07:57,759
here's the flow of memory modification

139
00:07:57,759 --> 00:08:01,280
use the find command to search the

140
00:08:01,280 --> 00:08:01,840
project

141
00:08:01,840 --> 00:08:06,080
on the ui if many results are displayed

142
00:08:06,080 --> 00:08:09,280
change the value on the ui to filter the

143
00:08:09,280 --> 00:08:13,440
results when there are fewer results

144
00:08:13,440 --> 00:08:15,919
you can modify the memory by using the

145
00:08:15,919 --> 00:08:18,560
positive command

146
00:08:23,520 --> 00:08:27,599
next i'll explain file the two drugs

147
00:08:27,599 --> 00:08:29,680
i'm going to show you how memory

148
00:08:29,680 --> 00:08:32,879
verification works now

149
00:08:37,279 --> 00:08:40,799
on relaxed basis the files are pressed

150
00:08:40,799 --> 00:08:43,120
on the block to access process

151
00:08:43,120 --> 00:08:45,760
information

152
00:08:46,399 --> 00:08:49,760
apk made use proc pid maps

153
00:08:49,760 --> 00:08:55,839
and proc pid map

154
00:08:58,880 --> 00:09:01,600
flock vid maps contains some memory math

155
00:09:01,600 --> 00:09:02,880
information

156
00:09:02,880 --> 00:09:05,360
the memory map indicates which part of

157
00:09:05,360 --> 00:09:08,399
the memory sub process specified by pid

158
00:09:08,399 --> 00:09:12,480
has permission to read and write to

159
00:09:16,800 --> 00:09:19,519
the memory map looks like the following

160
00:09:19,519 --> 00:09:20,800
image

161
00:09:20,800 --> 00:09:22,959
it contains a range of addresses

162
00:09:22,959 --> 00:09:26,719
permissions and process names

163
00:09:32,480 --> 00:09:36,080
using proc pid map it's possible to

164
00:09:36,080 --> 00:09:38,240
raise the memory failed by the process

165
00:09:38,240 --> 00:09:39,200
specified by

166
00:09:39,200 --> 00:09:42,480
the player id the memory can be laid out

167
00:09:42,480 --> 00:09:44,560
by system calls such as urban

168
00:09:44,560 --> 00:09:51,839
red and airship

169
00:09:51,920 --> 00:09:55,279
the memory map tells us well we can lay

170
00:09:55,279 --> 00:09:58,399
on right it used prog

171
00:09:58,399 --> 00:10:01,120
pid map to raise the memory and search

172
00:10:01,120 --> 00:10:01,519
for

173
00:10:01,519 --> 00:10:04,399
the tagged value when the target value

174
00:10:04,399 --> 00:10:05,120
is found

175
00:10:05,120 --> 00:10:10,160
it prog vid mem to pass the memory

176
00:10:17,519 --> 00:10:21,440
apk rate is increment in grant

177
00:10:21,440 --> 00:10:24,720
next i'm going to show you

178
00:10:24,720 --> 00:10:26,640
the benefit of using golan to

179
00:10:26,640 --> 00:10:28,640
information that run

180
00:10:28,640 --> 00:10:33,839
on android

181
00:10:37,200 --> 00:10:39,600
there are problems of using guarantee

182
00:10:39,600 --> 00:10:40,480
credits

183
00:10:40,480 --> 00:10:43,600
that run on android

184
00:10:43,600 --> 00:10:47,839
i will explain this in detail

185
00:10:54,560 --> 00:10:57,600
first easy to prepare for binary for

186
00:10:57,600 --> 00:11:01,760
r go compare supports cross compilation

187
00:11:01,760 --> 00:11:04,800
goods goes environment varies

188
00:11:04,800 --> 00:11:08,079
and provided for specified g os

189
00:11:08,079 --> 00:11:14,560
and cpu

190
00:11:14,560 --> 00:11:17,839
second easy to invoke system calls goron

191
00:11:17,839 --> 00:11:19,360
has a unix package that

192
00:11:19,360 --> 00:11:22,399
wrap the system calls nicely and make

193
00:11:22,399 --> 00:11:29,839
it easy to invoke the system calls

194
00:11:31,440 --> 00:11:34,160
third easy to find the target bite in

195
00:11:34,160 --> 00:11:36,399
large bicycles quickly

196
00:11:36,399 --> 00:11:38,880
a first string search algorithm called

197
00:11:38,880 --> 00:11:39,760
the laughing gap

198
00:11:39,760 --> 00:11:43,839
is used inside byte index

199
00:11:44,000 --> 00:11:46,640
without implementing complex algorithms

200
00:11:46,640 --> 00:11:47,360
i can

201
00:11:47,360 --> 00:11:50,560
quickly find data in the memory by

202
00:11:50,560 --> 00:11:57,839
simply using bit index

203
00:11:59,600 --> 00:12:03,040
horse easy to distribute binary by using

204
00:12:03,040 --> 00:12:04,000
github actions

205
00:12:04,000 --> 00:12:07,680
and go racer the 12 actions and glorious

206
00:12:07,680 --> 00:12:11,040
make it easy to develop with golem

207
00:12:11,040 --> 00:12:14,240
where attack the comment is upload

208
00:12:14,240 --> 00:12:17,279
to github the page runs be a github

209
00:12:17,279 --> 00:12:17,760
action

210
00:12:17,760 --> 00:12:20,160
and the goal is automatically restart

211
00:12:20,160 --> 00:12:21,200
the binary

212
00:12:21,200 --> 00:12:25,839
to guitar releases

213
00:12:30,320 --> 00:12:33,600
summary if i can briefly summarize

214
00:12:33,600 --> 00:12:35,600
apk mate allows memory communication

215
00:12:35,600 --> 00:12:36,880
without purchasing

216
00:12:36,880 --> 00:12:40,320
good selection but there is a need to

217
00:12:40,320 --> 00:12:40,880
change

218
00:12:40,880 --> 00:12:45,279
the fpga to be debuggable

219
00:12:45,279 --> 00:12:47,680
goron is a useful language for building

220
00:12:47,680 --> 00:12:49,360
android tools

221
00:12:49,360 --> 00:12:52,240
i hope ap game made will become the

222
00:12:52,240 --> 00:12:54,160
director standard for

223
00:12:54,160 --> 00:12:57,040
security testing

224
00:13:01,600 --> 00:13:04,880
well this brings me to the end of my

225
00:13:04,880 --> 00:13:06,880
presentation

226
00:13:06,880 --> 00:13:10,399
please please guitar and try it

227
00:13:10,399 --> 00:13:16,639
thank you for your attention

