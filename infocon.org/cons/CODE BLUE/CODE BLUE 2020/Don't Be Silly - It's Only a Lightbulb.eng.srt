1
00:00:26,640 --> 00:00:28,320
it's only a light bulb

2
00:00:28,320 --> 00:00:32,880
please welcome our speaker el eatkin

3
00:00:33,300 --> 00:00:36,400
[Music]

4
00:00:37,680 --> 00:00:39,520
hello everyone and thank you for joining

5
00:00:39,520 --> 00:00:41,360
my talk today called don't be silly

6
00:00:41,360 --> 00:00:43,840
it's only a light bulb before i begin

7
00:00:43,840 --> 00:00:45,840
just a brief introduction

8
00:00:45,840 --> 00:00:48,239
my name is ayal etkin i'm a

9
00:00:48,239 --> 00:00:50,320
vulnerability researcher working for a

10
00:00:50,320 --> 00:00:52,079
checkpoints resource group

11
00:00:52,079 --> 00:00:53,680
and in my research project we tend to

12
00:00:53,680 --> 00:00:55,199
focus on embedded devices

13
00:00:55,199 --> 00:00:56,960
and network protocols and in this

14
00:00:56,960 --> 00:01:00,239
research we combine them both together

15
00:01:00,239 --> 00:01:02,320
the motivation for this research started

16
00:01:02,320 --> 00:01:03,280
a few years ago

17
00:01:03,280 --> 00:01:05,920
in 2016 when i heard of a new smart id

18
00:01:05,920 --> 00:01:06,720
device

19
00:01:06,720 --> 00:01:09,280
smart light bulbs i was already quite

20
00:01:09,280 --> 00:01:10,240
familiar with

21
00:01:10,240 --> 00:01:13,119
range of smart iot devices even

22
00:01:13,119 --> 00:01:15,280
including a smart air conditioner

23
00:01:15,280 --> 00:01:17,200
a device you can turn on on your way at

24
00:01:17,200 --> 00:01:19,200
home so the temperature will be just

25
00:01:19,200 --> 00:01:21,200
fine when you arrive

26
00:01:21,200 --> 00:01:24,240
however why would i need a smart light

27
00:01:24,240 --> 00:01:25,040
bulb

28
00:01:25,040 --> 00:01:26,400
i only need the light when i'm

29
00:01:26,400 --> 00:01:28,320
physically in the room and i'm fully

30
00:01:28,320 --> 00:01:30,240
capable of toggling the switch on

31
00:01:30,240 --> 00:01:32,560
and off when i enter and leave the room

32
00:01:32,560 --> 00:01:33,439
why would i need an

33
00:01:33,439 --> 00:01:36,640
app for that and i figured out to myself

34
00:01:36,640 --> 00:01:39,439
okay this is just a trend people won't

35
00:01:39,439 --> 00:01:40,079
buy it

36
00:01:40,079 --> 00:01:43,119
it will die out soon and apparently i

37
00:01:43,119 --> 00:01:44,079
was wrong

38
00:01:44,079 --> 00:01:45,600
because according to our port from the

39
00:01:45,600 --> 00:01:48,320
end of 2018 more than 400

40
00:01:48,320 --> 00:01:50,880
000 households in the uk were already

41
00:01:50,880 --> 00:01:53,040
using smart lighting solutions so people

42
00:01:53,040 --> 00:01:55,200
use smart light bulbs

43
00:01:55,200 --> 00:01:57,840
okay but if i connect my light bulb to

44
00:01:57,840 --> 00:01:58,560
the wi-fi

45
00:01:58,560 --> 00:02:01,280
or to the internet there'll surely be

46
00:02:01,280 --> 00:02:04,399
some security risk about it right

47
00:02:04,399 --> 00:02:06,079
so i went around and i asked a few

48
00:02:06,079 --> 00:02:08,000
people and i always receive the same

49
00:02:08,000 --> 00:02:10,800
response don't be silly it's only a

50
00:02:10,800 --> 00:02:11,680
light bulb

51
00:02:11,680 --> 00:02:15,280
it's fine obviously i was not the first

52
00:02:15,280 --> 00:02:17,440
to tackle this issue so we'll go on

53
00:02:17,440 --> 00:02:19,680
after a few prior work notable of

54
00:02:19,680 --> 00:02:20,640
discussing

55
00:02:20,640 --> 00:02:23,440
which is a light bulb worm by colin

56
00:02:23,440 --> 00:02:23,920
flynn

57
00:02:23,920 --> 00:02:26,480
and elon m presented their work on black

58
00:02:26,480 --> 00:02:28,720
at usa in 2016.

59
00:02:28,720 --> 00:02:30,879
later on they developed the research

60
00:02:30,879 --> 00:02:33,360
into iot goes nuclear

61
00:02:33,360 --> 00:02:35,840
creating a zigbee chain reaction this

62
00:02:35,840 --> 00:02:38,000
time we were joined by adisha meow

63
00:02:38,000 --> 00:02:39,920
and the girl wengerton and i really

64
00:02:39,920 --> 00:02:41,440
recommend you reading more about the

65
00:02:41,440 --> 00:02:44,879
research on the detailed website

66
00:02:44,879 --> 00:02:46,480
you really should read about the

67
00:02:46,480 --> 00:02:48,400
research because they actually presented

68
00:02:48,400 --> 00:02:51,120
a word flying demo from a drone in which

69
00:02:51,120 --> 00:02:53,040
they took over all of the smart light

70
00:02:53,040 --> 00:02:56,000
bulbs on campus

71
00:02:56,000 --> 00:02:58,319
as both elon and the hill are all

72
00:02:58,319 --> 00:02:59,440
colleagues of mine

73
00:02:59,440 --> 00:03:01,920
we together decided that with yellow n's

74
00:03:01,920 --> 00:03:03,040
help

75
00:03:03,040 --> 00:03:04,959
am going to continue on the research and

76
00:03:04,959 --> 00:03:06,239
take it one step

77
00:03:06,239 --> 00:03:10,879
further ok so what did they find

78
00:03:10,879 --> 00:03:13,200
well a team of researchers found out

79
00:03:13,200 --> 00:03:14,959
that attackers can remotely steal a

80
00:03:14,959 --> 00:03:16,959
light bulb from a given zigbee network

81
00:03:16,959 --> 00:03:19,599
and force it to join their own once it

82
00:03:19,599 --> 00:03:20,720
joined the network

83
00:03:20,720 --> 00:03:22,560
attacker can transmit a malicious

84
00:03:22,560 --> 00:03:24,480
firmware update to the light bulb

85
00:03:24,480 --> 00:03:26,239
thus fully taking over the light bulb

86
00:03:26,239 --> 00:03:27,519
itself

87
00:03:27,519 --> 00:03:29,599
and if that wasn't enough it turns out

88
00:03:29,599 --> 00:03:31,680
that even a regular light bulb can steal

89
00:03:31,680 --> 00:03:32,000
other

90
00:03:32,000 --> 00:03:34,080
light bulbs and we don't need any fancy

91
00:03:34,080 --> 00:03:36,400
rf equipment antenna or anything of this

92
00:03:36,400 --> 00:03:38,319
sort

93
00:03:38,319 --> 00:03:40,080
by combining all of these capabilities

94
00:03:40,080 --> 00:03:42,319
together the researchers claimed

95
00:03:42,319 --> 00:03:44,640
that an attacker couldn't take over a

96
00:03:44,640 --> 00:03:46,000
selected set of light bulbs

97
00:03:46,000 --> 00:03:48,239
in a given city each light bulb will

98
00:03:48,239 --> 00:03:49,840
take over all of the light bulbs in

99
00:03:49,840 --> 00:03:51,200
close proximity

100
00:03:51,200 --> 00:03:53,680
and so on and so forth effectively

101
00:03:53,680 --> 00:03:55,920
creating a nuclear-like chain reaction

102
00:03:55,920 --> 00:03:57,519
that will take over all of the light

103
00:03:57,519 --> 00:03:59,680
bulbs in the city

104
00:03:59,680 --> 00:04:01,760
sadly for us the vendor fixed the last

105
00:04:01,760 --> 00:04:02,879
vulnerability

106
00:04:02,879 --> 00:04:06,159
so we're only left with the first two

107
00:04:06,159 --> 00:04:07,680
putting that into action we can see the

108
00:04:07,680 --> 00:04:09,519
following diagram

109
00:04:09,519 --> 00:04:11,680
on the right we can see a smart zigbee

110
00:04:11,680 --> 00:04:12,879
light bulb

111
00:04:12,879 --> 00:04:15,760
communicating over radio with the bridge

112
00:04:15,760 --> 00:04:17,279
the bridge is connected both to the

113
00:04:17,279 --> 00:04:18,238
zigbee network

114
00:04:18,238 --> 00:04:20,079
and to the local network via an ethernet

115
00:04:20,079 --> 00:04:22,479
cable so that we will be able to control

116
00:04:22,479 --> 00:04:25,759
the light bulb from our mobile app

117
00:04:25,759 --> 00:04:28,080
on the left we can see the attacker the

118
00:04:28,080 --> 00:04:29,440
attack starts when the attacker

119
00:04:29,440 --> 00:04:30,080
transmits

120
00:04:30,080 --> 00:04:32,400
zigbee factor reset messages to confuse

121
00:04:32,400 --> 00:04:33,440
the light bulb

122
00:04:33,440 --> 00:04:35,040
and convince you to join the long

123
00:04:35,040 --> 00:04:37,759
network once join the network

124
00:04:37,759 --> 00:04:39,520
the attackers will transmit a malicious

125
00:04:39,520 --> 00:04:41,520
firmware update to the light bulb

126
00:04:41,520 --> 00:04:43,440
thus fully taking over the light bulb

127
00:04:43,440 --> 00:04:44,720
itself

128
00:04:44,720 --> 00:04:46,479
i know this is where the original

129
00:04:46,479 --> 00:04:48,560
research stops

130
00:04:48,560 --> 00:04:50,720
our new goal is to infiltrate the

131
00:04:50,720 --> 00:04:51,600
network

132
00:04:51,600 --> 00:04:53,040
using the light bulb that we already

133
00:04:53,040 --> 00:04:55,440
possess we hope to find and exploit a

134
00:04:55,440 --> 00:04:57,120
zigbee vulnerability in the bridge

135
00:04:57,120 --> 00:04:57,919
itself

136
00:04:57,919 --> 00:05:00,000
so that we will remotely take over the

137
00:05:00,000 --> 00:05:01,440
bridge

138
00:05:01,440 --> 00:05:03,360
once we took over the bridge we are

139
00:05:03,360 --> 00:05:05,520
practically inside the local network

140
00:05:05,520 --> 00:05:08,160
and we hope to trace and find local

141
00:05:08,160 --> 00:05:09,120
computers

142
00:05:09,120 --> 00:05:12,960
and hopefully even taking over them

143
00:05:12,960 --> 00:05:15,280
now that the attack scenario is playing

144
00:05:15,280 --> 00:05:18,239
it's time to start

145
00:05:19,440 --> 00:05:22,639
some preliminary slides on zigbee

146
00:05:22,639 --> 00:05:24,560
zigbee is a suit of high level protocols

147
00:05:24,560 --> 00:05:26,800
for close proximity networks

148
00:05:26,800 --> 00:05:29,919
it's an ieee 802 15 for base

149
00:05:29,919 --> 00:05:31,199
specifications

150
00:05:31,199 --> 00:05:35,120
that define a low range low power radio

151
00:05:35,120 --> 00:05:38,160
not to be confused with ieee 80211

152
00:05:38,160 --> 00:05:41,440
which is the more commonly used wi-fi

153
00:05:41,440 --> 00:05:43,440
from our perspective an additional phone

154
00:05:43,440 --> 00:05:44,720
information we should

155
00:05:44,720 --> 00:05:47,520
be aware of is that the maximum

156
00:05:47,520 --> 00:05:48,960
transmission unit or

157
00:05:48,960 --> 00:05:54,320
dmtu over zigbee is only 127 bytes long

158
00:05:54,320 --> 00:05:56,880
and i'll repeat that the maximal packet

159
00:05:56,880 --> 00:05:58,000
we can transmit

160
00:05:58,000 --> 00:06:02,160
over the ao will only contain up to 127

161
00:06:02,160 --> 00:06:02,960
bytes

162
00:06:02,960 --> 00:06:05,919
and with this harsh limitation we should

163
00:06:05,919 --> 00:06:07,039
somehow

164
00:06:07,039 --> 00:06:10,080
still be able to exploit remotely if an

165
00:06:10,080 --> 00:06:11,759
ability we hope to find in the bridge

166
00:06:11,759 --> 00:06:12,400
itself

167
00:06:12,400 --> 00:06:16,080
so it's going to be very interesting

168
00:06:16,080 --> 00:06:19,039
time to meet our target our target for

169
00:06:19,039 --> 00:06:21,039
this result is the philips use smart

170
00:06:21,039 --> 00:06:22,160
lighting solution

171
00:06:22,160 --> 00:06:25,440
now brandon donors signify in turn

172
00:06:25,440 --> 00:06:27,680
signify controls one third of the market

173
00:06:27,680 --> 00:06:30,240
in the uk

174
00:06:30,400 --> 00:06:32,240
as we described earlier we're going to

175
00:06:32,240 --> 00:06:34,000
focus specifically on the bridge

176
00:06:34,000 --> 00:06:35,680
because the bridge is connected to both

177
00:06:35,680 --> 00:06:37,440
the network both the zigbee

178
00:06:37,440 --> 00:06:39,919
the radio network and the local network

179
00:06:39,919 --> 00:06:42,080
via an ethernet cable

180
00:06:42,080 --> 00:06:43,840
when tearing down the plastic cover of

181
00:06:43,840 --> 00:06:45,600
the bridge we can see the following

182
00:06:45,600 --> 00:06:47,120
board

183
00:06:47,120 --> 00:06:49,360
on the right we can see the main cpu

184
00:06:49,360 --> 00:06:52,000
which is a qualcomm cpu usually used on

185
00:06:52,000 --> 00:06:54,479
wifi enabled emitter devices

186
00:06:54,479 --> 00:06:57,440
on the left we can see the zigbee modem

187
00:06:57,440 --> 00:07:00,160
which is an atmel cpu

188
00:07:00,160 --> 00:07:02,000
like any other embedded device we have a

189
00:07:02,000 --> 00:07:03,440
clear pin out for

190
00:07:03,440 --> 00:07:05,759
serial debug which proved itself to be

191
00:07:05,759 --> 00:07:06,960
quite useful for

192
00:07:06,960 --> 00:07:09,599
this result

193
00:07:10,639 --> 00:07:13,360
the main cpu is of mips architecture and

194
00:07:13,360 --> 00:07:15,919
the operating system this time is linux

195
00:07:15,919 --> 00:07:18,000
since in previous research projects we

196
00:07:18,000 --> 00:07:19,919
usually dealt with real-time operating

197
00:07:19,919 --> 00:07:20,800
systems

198
00:07:20,800 --> 00:07:24,080
linux is quite refreshing

199
00:07:24,080 --> 00:07:25,840
colleen of lane details in his blog

200
00:07:25,840 --> 00:07:27,599
exactly how to run the bridge

201
00:07:27,599 --> 00:07:31,599
here on this link and using the serial

202
00:07:31,599 --> 00:07:34,319
debug interface and a few glitches and

203
00:07:34,319 --> 00:07:36,160
we will eventually get a full

204
00:07:36,160 --> 00:07:38,639
ssh connection to the bridge so that we

205
00:07:38,639 --> 00:07:40,160
could extract the firmware

206
00:07:40,160 --> 00:07:42,960
and even upload our own gdb server to

207
00:07:42,960 --> 00:07:46,159
debug the bridge itself

208
00:07:46,560 --> 00:07:49,039
as the l1n described when we first

209
00:07:49,039 --> 00:07:50,400
started this research

210
00:07:50,400 --> 00:07:52,080
the bridge is using a single huge

211
00:07:52,080 --> 00:07:53,919
process that is pretty much doing

212
00:07:53,919 --> 00:07:54,720
everything

213
00:07:54,720 --> 00:07:58,319
and this process is the ip bridge the ip

214
00:07:58,319 --> 00:07:59,599
bridge acts as the

215
00:07:59,599 --> 00:08:02,160
brain of the device it is responsible

216
00:08:02,160 --> 00:08:03,280
for both

217
00:08:03,280 --> 00:08:05,840
parsing and communicable messages

218
00:08:05,840 --> 00:08:08,080
maintaining the protocol state machine

219
00:08:08,080 --> 00:08:10,080
and pretty much everything out there

220
00:08:10,080 --> 00:08:12,720
that needs to be done

221
00:08:12,720 --> 00:08:15,120
and like most modern devices the ivy

222
00:08:15,120 --> 00:08:16,000
bridge is

223
00:08:16,000 --> 00:08:18,560
executed with root privileges meaning

224
00:08:18,560 --> 00:08:20,479
that once we took over this process we

225
00:08:20,479 --> 00:08:22,160
took over the entire bridge

226
00:08:22,160 --> 00:08:26,639
with the maximal available privileges

227
00:08:26,639 --> 00:08:29,120
as you probably understood this is going

228
00:08:29,120 --> 00:08:30,720
to be the target process for our

229
00:08:30,720 --> 00:08:33,120
research

230
00:08:33,120 --> 00:08:35,200
time to look for vulnerabilities inside

231
00:08:35,200 --> 00:08:37,360
the ipv8

232
00:08:37,360 --> 00:08:40,719
we started with the zcl interface zcl

233
00:08:40,719 --> 00:08:43,519
stands for the zigbee cluster library

234
00:08:43,519 --> 00:08:44,959
which is responsible for

235
00:08:44,959 --> 00:08:47,200
managing the configurations of the

236
00:08:47,200 --> 00:08:48,640
device

237
00:08:48,640 --> 00:08:51,680
zcl exports a read attribute write

238
00:08:51,680 --> 00:08:52,959
attribute interface

239
00:08:52,959 --> 00:08:55,040
which is very similar to snmp on

240
00:08:55,040 --> 00:08:59,040
traditional network-enabled devices

241
00:08:59,279 --> 00:09:02,560
zcl supports multiple types such as

242
00:09:02,560 --> 00:09:06,000
booleans unsigned integers of eight bits

243
00:09:06,000 --> 00:09:09,040
and signed into those 32 bits and even

244
00:09:09,040 --> 00:09:12,000
dynamic arrays

245
00:09:12,480 --> 00:09:14,640
variable size data types in embedded

246
00:09:14,640 --> 00:09:16,720
devices is a shoe recipe for

247
00:09:16,720 --> 00:09:17,839
vulnerabilities

248
00:09:17,839 --> 00:09:20,880
so this looks promising let's look

249
00:09:20,880 --> 00:09:23,040
how they implemented the parsing of

250
00:09:23,040 --> 00:09:24,480
incoming zcl

251
00:09:24,480 --> 00:09:28,720
variables we started by looking over the

252
00:09:28,720 --> 00:09:29,760
old film

253
00:09:29,760 --> 00:09:32,080
which we inherited from the initial

254
00:09:32,080 --> 00:09:33,279
research

255
00:09:33,279 --> 00:09:35,839
and we can see on the start that we are

256
00:09:35,839 --> 00:09:36,800
parsing a one

257
00:09:36,800 --> 00:09:39,519
byte line field from the incoming packet

258
00:09:39,519 --> 00:09:41,040
we allocate a fixed

259
00:09:41,040 --> 00:09:44,240
size heap buffer of 33 bytes

260
00:09:44,240 --> 00:09:46,800
and then we read the entire blob into

261
00:09:46,800 --> 00:09:47,760
the hip buffer

262
00:09:47,760 --> 00:09:50,959
without any side checks essentially

263
00:09:50,959 --> 00:09:53,200
we have a controlled one byteman copy

264
00:09:53,200 --> 00:09:54,399
into a fixed

265
00:09:54,399 --> 00:09:57,040
heap buffer and this is the definition

266
00:09:57,040 --> 00:09:59,519
of a heap-based buffer overflow

267
00:09:59,519 --> 00:10:02,079
sadly for us this is the old film when

268
00:10:02,079 --> 00:10:04,079
we still need to check the latest film

269
00:10:04,079 --> 00:10:06,079
to see if the vulnerability remained in

270
00:10:06,079 --> 00:10:07,279
the code

271
00:10:07,279 --> 00:10:09,839
and of course they didn't the support

272
00:10:09,839 --> 00:10:11,120
for array was dropped

273
00:10:11,120 --> 00:10:13,360
and instead strings are viewed used in

274
00:10:13,360 --> 00:10:14,800
the film

275
00:10:14,800 --> 00:10:17,120
when parsing the cell strings we

276
00:10:17,120 --> 00:10:18,800
allocate a new type of buffer

277
00:10:18,800 --> 00:10:21,600
still over the heap with enough bytes

278
00:10:21,600 --> 00:10:22,000
for

279
00:10:22,000 --> 00:10:24,000
all of our content plus the additional

280
00:10:24,000 --> 00:10:25,920
byte for the null terminator

281
00:10:25,920 --> 00:10:28,160
so there is no vulnerability in this

282
00:10:28,160 --> 00:10:30,079
time

283
00:10:30,079 --> 00:10:33,040
as we can see we still have new

284
00:10:33,040 --> 00:10:35,120
information in this updated film

285
00:10:35,120 --> 00:10:37,760
because now we have debug symbols

286
00:10:37,760 --> 00:10:39,519
throughout the entire film which really

287
00:10:39,519 --> 00:10:41,360
helped when we reverse engineered the

288
00:10:41,360 --> 00:10:43,680
film

289
00:10:43,760 --> 00:10:45,279
so the latest film version dropped

290
00:10:45,279 --> 00:10:47,279
support for the sale race

291
00:10:47,279 --> 00:10:50,079
and instead zcl strings are supported

292
00:10:50,079 --> 00:10:53,279
but without the original vulnerability

293
00:10:53,279 --> 00:10:54,959
so it's time to search for other

294
00:10:54,959 --> 00:10:56,720
vulnerabilities

295
00:10:56,720 --> 00:10:59,839
but wait who handles the incoming sale

296
00:10:59,839 --> 00:11:00,399
strings

297
00:11:00,399 --> 00:11:04,000
after the initial parsing after we dug

298
00:11:04,000 --> 00:11:04,959
in a bit deeper

299
00:11:04,959 --> 00:11:08,079
we found the following code and here we

300
00:11:08,079 --> 00:11:09,120
can find

301
00:11:09,120 --> 00:11:12,480
a fixed hip buffer location of

302
00:11:12,480 --> 00:11:16,160
33 bytes which is quite suspicious

303
00:11:16,160 --> 00:11:18,320
and it is followed by an additional mem

304
00:11:18,320 --> 00:11:19,839
copy using the size

305
00:11:19,839 --> 00:11:22,640
from our incoming the ccl string into

306
00:11:22,640 --> 00:11:24,720
the buffer and without side checks

307
00:11:24,720 --> 00:11:27,519
so essentially this is the exact same

308
00:11:27,519 --> 00:11:29,040
array vulnerability

309
00:11:29,040 --> 00:11:30,640
we've seen in the earlier firmware

310
00:11:30,640 --> 00:11:33,440
version and just buried

311
00:11:33,440 --> 00:11:36,640
along the way in order to read this code

312
00:11:36,640 --> 00:11:37,760
we need an op code

313
00:11:37,760 --> 00:11:40,160
stored in our struct and the output

314
00:11:40,160 --> 00:11:42,880
should be 16.

315
00:11:42,880 --> 00:11:45,040
when we go back and see how the zcl

316
00:11:45,040 --> 00:11:47,279
string was parsed initially

317
00:11:47,279 --> 00:11:48,880
we can see that the opcode that was

318
00:11:48,880 --> 00:11:53,040
stored in the start was indeed 16.

319
00:11:53,760 --> 00:11:55,279
it turns out that someone forgot to

320
00:11:55,279 --> 00:11:57,279
finish the migration from arrays to

321
00:11:57,279 --> 00:11:58,480
strings

322
00:11:58,480 --> 00:12:01,360
always sorry strings should have been

323
00:12:01,360 --> 00:12:02,079
marked with

324
00:12:02,079 --> 00:12:05,279
f which later means that we

325
00:12:05,279 --> 00:12:08,240
will be duplicated using stl dupe and

326
00:12:08,240 --> 00:12:09,120
instead

327
00:12:09,120 --> 00:12:12,000
it was marked as array with 16

328
00:12:12,000 --> 00:12:13,920
triggering the old vulnerability that

329
00:12:13,920 --> 00:12:14,320
was

330
00:12:14,320 --> 00:12:17,200
still in the code just buried a bit

331
00:12:17,200 --> 00:12:18,959
deeper

332
00:12:18,959 --> 00:12:20,959
now that we found a good vulnerability

333
00:12:20,959 --> 00:12:22,160
as a candidate

334
00:12:22,160 --> 00:12:24,399
it is a good time to start transmitting

335
00:12:24,399 --> 00:12:25,519
zigbee messages

336
00:12:25,519 --> 00:12:29,200
hoping to trigger the vulnerability

337
00:12:31,120 --> 00:12:33,040
when playing around with zigbee like the

338
00:12:33,040 --> 00:12:34,880
previous research we chose to use the

339
00:12:34,880 --> 00:12:35,920
atmega board

340
00:12:35,920 --> 00:12:38,399
cute mega boards enable us to send and

341
00:12:38,399 --> 00:12:39,040
receive

342
00:12:39,040 --> 00:12:42,320
zigbee ready frames with

343
00:12:42,320 --> 00:12:46,320
raw format and whatever we like

344
00:12:46,320 --> 00:12:47,760
they should be computationally

345
00:12:47,760 --> 00:12:49,519
equivalent to a light bulb

346
00:12:49,519 --> 00:12:51,680
which is important because the original

347
00:12:51,680 --> 00:12:53,680
research showed that you can

348
00:12:53,680 --> 00:12:55,839
install our malicious firmware update

349
00:12:55,839 --> 00:12:57,120
over the light bulb

350
00:12:57,120 --> 00:12:59,200
and if we will be able to implement our

351
00:12:59,200 --> 00:13:01,200
entire attack over this board

352
00:13:01,200 --> 00:13:03,440
it means that we will be able to deploy

353
00:13:03,440 --> 00:13:06,560
it from the light bulb itself

354
00:13:06,560 --> 00:13:08,560
and it turns out the timing constraints

355
00:13:08,560 --> 00:13:10,800
indeed dictate that we use c code

356
00:13:10,800 --> 00:13:13,200
executed from the board because we can't

357
00:13:13,200 --> 00:13:14,320
handle the delays

358
00:13:14,320 --> 00:13:17,279
from relaying the packet from the board

359
00:13:17,279 --> 00:13:18,320
to the laptop

360
00:13:18,320 --> 00:13:21,360
for further processing and this meant

361
00:13:21,360 --> 00:13:23,120
that our entire zigbee stack

362
00:13:23,120 --> 00:13:25,760
plus the exploit were indeed implemented

363
00:13:25,760 --> 00:13:26,320
in c

364
00:13:26,320 --> 00:13:29,519
which took a while

365
00:13:29,680 --> 00:13:32,639
and we found out that the venerable flow

366
00:13:32,639 --> 00:13:34,000
is accessible during a

367
00:13:34,000 --> 00:13:37,040
phase called commissioning so what is

368
00:13:37,040 --> 00:13:40,880
commissioning commissioning is a process

369
00:13:40,880 --> 00:13:42,880
of pairing and associating a new light

370
00:13:42,880 --> 00:13:44,480
bulb into the network

371
00:13:44,480 --> 00:13:46,560
there are two types of commissioning we

372
00:13:46,560 --> 00:13:48,320
have classic commissioning

373
00:13:48,320 --> 00:13:51,760
and touchlink commissioning in our case

374
00:13:51,760 --> 00:13:54,160
the philips u app for android uses

375
00:13:54,160 --> 00:13:56,240
classic commissioning and so we focused

376
00:13:56,240 --> 00:13:58,639
on this one

377
00:13:58,639 --> 00:14:00,800
in theory the zigbee specs explain the

378
00:14:00,800 --> 00:14:02,639
entire process

379
00:14:02,639 --> 00:14:04,320
and in practice there's a lot of room

380
00:14:04,320 --> 00:14:06,240
for vendors to do as they wish with the

381
00:14:06,240 --> 00:14:08,639
standard

382
00:14:08,639 --> 00:14:12,079
when analyzing the protocol we found an

383
00:14:12,079 --> 00:14:13,199
obstacle

384
00:14:13,199 --> 00:14:15,440
we couldn't find a document in the flow

385
00:14:15,440 --> 00:14:16,720
of messages

386
00:14:16,720 --> 00:14:18,560
meaning that we have the entire

387
00:14:18,560 --> 00:14:20,720
information for each message

388
00:14:20,720 --> 00:14:22,480
but we don't know which message is

389
00:14:22,480 --> 00:14:23,839
supposed to be sent

390
00:14:23,839 --> 00:14:27,120
and when as a response for what so

391
00:14:27,120 --> 00:14:31,680
we're missing critical information here

392
00:14:31,680 --> 00:14:33,600
we try to sniff a full conversation from

393
00:14:33,600 --> 00:14:36,079
a legitimate light bulb ndip bridge

394
00:14:36,079 --> 00:14:38,959
but there are too many messages sent too

395
00:14:38,959 --> 00:14:40,320
fast we couldn't

396
00:14:40,320 --> 00:14:42,480
track all of the messages and all of the

397
00:14:42,480 --> 00:14:43,600
flow

398
00:14:43,600 --> 00:14:45,680
and if that wasn't enough the initial

399
00:14:45,680 --> 00:14:47,440
messages and commissioning

400
00:14:47,440 --> 00:14:49,839
are encrypted with a transport crypto

401
00:14:49,839 --> 00:14:50,480
key

402
00:14:50,480 --> 00:14:52,560
a broadcast key that is shared between

403
00:14:52,560 --> 00:14:54,880
all of the zigbee lite devices

404
00:14:54,880 --> 00:14:58,000
and we don't have it luckily for

405
00:14:58,000 --> 00:15:00,240
us we're not forced to tackle this issue

406
00:15:00,240 --> 00:15:02,079
and in this blog

407
00:15:02,079 --> 00:15:05,360
there's a detailed explanations of all

408
00:15:05,360 --> 00:15:07,040
of the keys used during the

409
00:15:07,040 --> 00:15:08,000
commissioning

410
00:15:08,000 --> 00:15:10,160
including the key itself used in the

411
00:15:10,160 --> 00:15:11,360
classic commissioning

412
00:15:11,360 --> 00:15:13,519
so we extracted the key added it to

413
00:15:13,519 --> 00:15:14,639
wireshark

414
00:15:14,639 --> 00:15:17,279
and now we're enabled to decrypt the

415
00:15:17,279 --> 00:15:18,880
messages we can sniff

416
00:15:18,880 --> 00:15:22,399
and encrypt our own messages

417
00:15:22,399 --> 00:15:24,800
the analysis and implementation of the

418
00:15:24,800 --> 00:15:26,480
entire commissioning took a lot of

419
00:15:26,480 --> 00:15:28,399
effort really a lot of effort

420
00:15:28,399 --> 00:15:30,959
but eventually it worked as you can see

421
00:15:30,959 --> 00:15:31,519
here

422
00:15:31,519 --> 00:15:33,680
our bird successfully masqueraded to a

423
00:15:33,680 --> 00:15:35,519
legitimate light bulb which is a brand

424
00:15:35,519 --> 00:15:37,519
new checkpoint research light bulb

425
00:15:37,519 --> 00:15:41,360
with the model of cpr123

426
00:15:41,360 --> 00:15:44,320
it turns out that we can do the entire

427
00:15:44,320 --> 00:15:45,920
commissioning from our board

428
00:15:45,920 --> 00:15:47,920
and we decided to open source our entire

429
00:15:47,920 --> 00:15:49,839
pickup with the classic commissioning

430
00:15:49,839 --> 00:15:52,639
on this link so that other developers

431
00:15:52,639 --> 00:15:54,000
and researchers will be able

432
00:15:54,000 --> 00:15:58,000
to enjoy our conclusions

433
00:15:58,399 --> 00:16:01,440
the lessons we learned thus far without

434
00:16:01,440 --> 00:16:03,440
user interaction the bridge won't accept

435
00:16:03,440 --> 00:16:05,279
new light bulbs which is a good security

436
00:16:05,279 --> 00:16:07,199
design

437
00:16:07,199 --> 00:16:09,440
still we have approximately one minute

438
00:16:09,440 --> 00:16:11,199
to commission as many light bulbs as we

439
00:16:11,199 --> 00:16:11,680
want

440
00:16:11,680 --> 00:16:14,399
once the user told the bridge to look

441
00:16:14,399 --> 00:16:16,240
for new light bulbs

442
00:16:16,240 --> 00:16:18,880
in addition the user will only see light

443
00:16:18,880 --> 00:16:19,440
bulbs

444
00:16:19,440 --> 00:16:22,000
in the app after a certain phase which

445
00:16:22,000 --> 00:16:24,480
we refer to as the zcl phase

446
00:16:24,480 --> 00:16:26,240
if we have additional light bulbs that

447
00:16:26,240 --> 00:16:27,839
won't reach this step

448
00:16:27,839 --> 00:16:31,040
the user won't be aware of them and the

449
00:16:31,040 --> 00:16:32,880
good news are we managed to trigger the

450
00:16:32,880 --> 00:16:34,240
vulnerability during this

451
00:16:34,240 --> 00:16:36,560
phase so we indeed have a remotely

452
00:16:36,560 --> 00:16:40,399
exploitable vulnerability in the bridge

453
00:16:40,560 --> 00:16:42,480
there's no state machine check in place

454
00:16:42,480 --> 00:16:44,639
we can simply send whatever response we

455
00:16:44,639 --> 00:16:45,199
like

456
00:16:45,199 --> 00:16:47,839
whenever we like however we need to do

457
00:16:47,839 --> 00:16:51,839
that during the zcl phase

458
00:16:51,920 --> 00:16:55,360
time to start the exploitation

459
00:16:55,440 --> 00:16:57,519
as we have a heat based buffer overflow

460
00:16:57,519 --> 00:17:00,320
let us focus on the heat for a minute

461
00:17:00,320 --> 00:17:02,480
the bridge uses eucelepsy or more

462
00:17:02,480 --> 00:17:04,640
specifically euselepc ng

463
00:17:04,640 --> 00:17:05,919
which is an amended liberty

464
00:17:05,919 --> 00:17:07,760
implementation

465
00:17:07,760 --> 00:17:10,720
aimed at slim devices without a lot of

466
00:17:10,720 --> 00:17:13,039
farm and without a lot of cpu power

467
00:17:13,039 --> 00:17:16,720
essentially it is micro limsy

468
00:17:16,720 --> 00:17:18,880
it is much like gillipsy but with way

469
00:17:18,880 --> 00:17:20,160
less sanity checks

470
00:17:20,160 --> 00:17:23,359
against a slim implementation and

471
00:17:23,359 --> 00:17:25,679
essentially it is based on the dl malloc

472
00:17:25,679 --> 00:17:28,240
hip implementation

473
00:17:28,240 --> 00:17:30,160
all of our buffers will fall into the

474
00:17:30,160 --> 00:17:32,000
range of the fast bins

475
00:17:32,000 --> 00:17:33,600
meaning that there is a bin for each

476
00:17:33,600 --> 00:17:36,080
buffer size in multiples of 8 bytes

477
00:17:36,080 --> 00:17:38,640
starting form 16 me being the minimal

478
00:17:38,640 --> 00:17:39,919
size

479
00:17:39,919 --> 00:17:42,000
and inside each bin we have a singly

480
00:17:42,000 --> 00:17:43,120
linked list of

481
00:17:43,120 --> 00:17:46,400
three buffers our plan

482
00:17:46,400 --> 00:17:48,640
is to corrupt the single linked list

483
00:17:48,640 --> 00:17:50,240
inside a given bin

484
00:17:50,240 --> 00:17:53,200
so that malloc will be confused into

485
00:17:53,200 --> 00:17:55,200
allocate a buffer at an arbitrary

486
00:17:55,200 --> 00:17:58,400
address of our liking

487
00:17:58,559 --> 00:18:00,960
when reading the code of frame we found

488
00:18:00,960 --> 00:18:01,840
out that

489
00:18:01,840 --> 00:18:04,880
when size is indeed small enough for

490
00:18:04,880 --> 00:18:08,400
the fast bins if the macro of fast bin

491
00:18:08,400 --> 00:18:10,240
index is used in order to find a

492
00:18:10,240 --> 00:18:12,160
suitable bin

493
00:18:12,160 --> 00:18:14,880
in turn fastbin index essentially

494
00:18:14,880 --> 00:18:16,320
divides the size by

495
00:18:16,320 --> 00:18:19,520
8 and subtracts 2 because 16 should be

496
00:18:19,520 --> 00:18:21,440
the minimal size

497
00:18:21,440 --> 00:18:23,520
however there's no check in place with

498
00:18:23,520 --> 00:18:25,840
16 is indeed the minimal size

499
00:18:25,840 --> 00:18:27,520
meaning that if we corrupt the size of

500
00:18:27,520 --> 00:18:29,360
an adjacent hip buffer

501
00:18:29,360 --> 00:18:32,080
upon three we could get the illegal

502
00:18:32,080 --> 00:18:32,799
indices

503
00:18:32,799 --> 00:18:36,639
of minus one and minus two

504
00:18:36,799 --> 00:18:39,440
the inverse of minus one will store our

505
00:18:39,440 --> 00:18:41,679
buffer before the first beans array and

506
00:18:41,679 --> 00:18:42,000
on top

507
00:18:42,000 --> 00:18:44,400
of the max fast configurable variable

508
00:18:44,400 --> 00:18:46,400
which is too risky

509
00:18:46,400 --> 00:18:49,360
however the illegal index of -2 will

510
00:18:49,360 --> 00:18:51,440
store our buffer before the malloc state

511
00:18:51,440 --> 00:18:52,559
global variable

512
00:18:52,559 --> 00:18:55,120
and on top of an unused variable in the

513
00:18:55,120 --> 00:18:57,120
firmware added space

514
00:18:57,120 --> 00:18:59,280
essentially we will create a singly

515
00:18:59,280 --> 00:19:01,760
linked list that malloc is not aware of

516
00:19:01,760 --> 00:19:04,559
and only three is using effectively

517
00:19:04,559 --> 00:19:06,160
creating a ghost linked list

518
00:19:06,160 --> 00:19:10,880
which acts as a dev null fastbin

519
00:19:10,880 --> 00:19:13,440
once we have this bin our hip overflow

520
00:19:13,440 --> 00:19:15,679
plan is as follows

521
00:19:15,679 --> 00:19:18,160
on blue we can see all buffer and on

522
00:19:18,160 --> 00:19:19,440
purple we can see an

523
00:19:19,440 --> 00:19:21,520
adjacent buffer that we hope will be a

524
00:19:21,520 --> 00:19:23,679
free one

525
00:19:23,679 --> 00:19:26,000
our plans modify only the size and the

526
00:19:26,000 --> 00:19:28,480
pointer of the adjacent buffer

527
00:19:28,480 --> 00:19:31,280
as a cell the pointer will point at an

528
00:19:31,280 --> 00:19:32,320
arbitrary address

529
00:19:32,320 --> 00:19:34,960
as we've seen earlier and the size will

530
00:19:34,960 --> 00:19:36,320
be corrupted to be

531
00:19:36,320 --> 00:19:39,440
an effective size of 0 using the devnet

532
00:19:39,440 --> 00:19:42,559
phasmin and 1 meaning that the previous

533
00:19:42,559 --> 00:19:45,678
buffer is still in use

534
00:19:46,480 --> 00:19:49,760
our heap shaping strategy will be

535
00:19:49,760 --> 00:19:51,840
assuming we overflow the free fast bin

536
00:19:51,840 --> 00:19:53,360
buffer we won

537
00:19:53,360 --> 00:19:54,960
this is exactly what we aim at we

538
00:19:54,960 --> 00:19:57,200
corrupted the singly linked list and you

539
00:19:57,200 --> 00:20:00,960
will get a malloc query location

540
00:20:01,280 --> 00:20:04,240
if we overflow the use buffer then upon

541
00:20:04,240 --> 00:20:04,960
free it will

542
00:20:04,960 --> 00:20:07,360
be inserted into the dev null fast beam

543
00:20:07,360 --> 00:20:09,600
we won't see it any longer and gradually

544
00:20:09,600 --> 00:20:11,760
we will shape the heap into the desired

545
00:20:11,760 --> 00:20:14,000
form

546
00:20:14,000 --> 00:20:15,760
if we overflow the used buffer that

547
00:20:15,760 --> 00:20:17,280
lives forever

548
00:20:17,280 --> 00:20:20,559
oh well nothing bad really happened

549
00:20:20,559 --> 00:20:23,039
and only in the last case if we overflow

550
00:20:23,039 --> 00:20:25,280
the freelance buffer we actually will

551
00:20:25,280 --> 00:20:25,919
crash

552
00:20:25,919 --> 00:20:29,120
so we don't want to do that if done

553
00:20:29,120 --> 00:20:30,080
correctly

554
00:20:30,080 --> 00:20:31,840
we will get the desired molecular

555
00:20:31,840 --> 00:20:34,720
primitive enabling us to override

556
00:20:34,720 --> 00:20:36,799
a function pointer and execute our

557
00:20:36,799 --> 00:20:37,840
shellcode

558
00:20:37,840 --> 00:20:40,000
which is a good time to introduce the

559
00:20:40,000 --> 00:20:43,600
shellcode we decided to implement

560
00:20:44,000 --> 00:20:47,120
location location location we need to

561
00:20:47,120 --> 00:20:47,600
store

562
00:20:47,600 --> 00:20:49,760
a binary shell code in a fixed global

563
00:20:49,760 --> 00:20:51,120
address

564
00:20:51,120 --> 00:20:53,120
and we only found one good candidate for

565
00:20:53,120 --> 00:20:54,320
such a buffer

566
00:20:54,320 --> 00:20:57,120
being the zigbee phonebook the zigbee

567
00:20:57,120 --> 00:20:58,799
phonebook is an array of zigbee

568
00:20:58,799 --> 00:20:59,520
addresses

569
00:20:59,520 --> 00:21:03,919
seen by far or advertise to the bridge

570
00:21:03,919 --> 00:21:07,039
it can hold up to 65 records of 16 bytes

571
00:21:07,039 --> 00:21:09,039
each giving us an upper bound of

572
00:21:09,039 --> 00:21:11,039
approximately one kilobyte for the

573
00:21:11,039 --> 00:21:13,760
entire shell code

574
00:21:13,760 --> 00:21:15,919
when going over the neighbor record we

575
00:21:15,919 --> 00:21:18,080
can see that the first eight bytes

576
00:21:18,080 --> 00:21:20,480
are the extended network zigbee address

577
00:21:20,480 --> 00:21:22,240
which are fully controlled by an

578
00:21:22,240 --> 00:21:24,240
attacker

579
00:21:24,240 --> 00:21:26,080
followed by an additional two bytes

580
00:21:26,080 --> 00:21:28,000
which is the short network address

581
00:21:28,000 --> 00:21:31,280
again controlled and now stock flag

582
00:21:31,280 --> 00:21:34,159
ended because now we have six bytes of

583
00:21:34,159 --> 00:21:36,240
miscellaneous fields but we don't really

584
00:21:36,240 --> 00:21:37,120
contour

585
00:21:37,120 --> 00:21:40,240
which basically means that we have 10

586
00:21:40,240 --> 00:21:41,280
controllable

587
00:21:41,280 --> 00:21:44,960
adjacent bytes out of each 16 bytes

588
00:21:44,960 --> 00:21:48,480
and if that wasn't enough the blade is

589
00:21:48,480 --> 00:21:50,400
unstable when it gets more than 20

590
00:21:50,400 --> 00:21:51,039
records

591
00:21:51,039 --> 00:21:53,360
so our shell code is going to be quite

592
00:21:53,360 --> 00:21:55,919
small one

593
00:21:55,919 --> 00:21:58,320
after a few failed shellcode attempts we

594
00:21:58,320 --> 00:22:01,120
came up with the following plan

595
00:22:01,120 --> 00:22:03,039
we will call empotect to install a

596
00:22:03,039 --> 00:22:04,640
backdoor in rom

597
00:22:04,640 --> 00:22:06,159
the shellcode will fully restore the

598
00:22:06,159 --> 00:22:08,000
execution afterwards meaning that we

599
00:22:08,000 --> 00:22:08,240
will

600
00:22:08,240 --> 00:22:11,200
store the got in the heap and the cost

601
00:22:11,200 --> 00:22:12,400
of the shell code is

602
00:22:12,400 --> 00:22:15,120
only 16 records which is well in budget

603
00:22:15,120 --> 00:22:17,918
less than 20.

604
00:22:18,080 --> 00:22:20,640
if we look over shellcode in ida it will

605
00:22:20,640 --> 00:22:21,120
look

606
00:22:21,120 --> 00:22:24,400
as a cell the first cycle will execute

607
00:22:24,400 --> 00:22:25,440
the few

608
00:22:25,440 --> 00:22:28,640
is assembly instruction and jump to the

609
00:22:28,640 --> 00:22:29,919
second record

610
00:22:29,919 --> 00:22:32,480
which will execute a bit more

611
00:22:32,480 --> 00:22:34,559
instructions and jump to the third

612
00:22:34,559 --> 00:22:37,200
jumping to the fourth and so on and so

613
00:22:37,200 --> 00:22:38,000
forth

614
00:22:38,000 --> 00:22:40,799
until we execute our entire shell code

615
00:22:40,799 --> 00:22:42,320
restored execution

616
00:22:42,320 --> 00:22:46,639
and continued on as if nothing happened

617
00:22:46,799 --> 00:22:48,720
if we connect all of the dots together

618
00:22:48,720 --> 00:22:50,240
we can see that we start by

619
00:22:50,240 --> 00:22:52,080
commissioning a legitimate looking light

620
00:22:52,080 --> 00:22:53,200
bulb

621
00:22:53,200 --> 00:22:55,200
after that a fake light bulb will attack

622
00:22:55,200 --> 00:22:58,159
the bridge and install the backdoor

623
00:22:58,159 --> 00:22:59,679
now that the back door is installed the

624
00:22:59,679 --> 00:23:01,840
legitimate light bulb will interact with

625
00:23:01,840 --> 00:23:03,840
the installed backdoor in the

626
00:23:03,840 --> 00:23:07,520
bridge and will deploy the payload

627
00:23:07,520 --> 00:23:09,600
which in this case we decided that it

628
00:23:09,600 --> 00:23:11,440
will be eternal blue for attacking the

629
00:23:11,440 --> 00:23:13,840
computers inside the network

630
00:23:13,840 --> 00:23:16,159
as we can see here we dropped the file

631
00:23:16,159 --> 00:23:17,679
into temp exploit

632
00:23:17,679 --> 00:23:20,400
on the bridge and it was executed with

633
00:23:20,400 --> 00:23:23,440
vote privileges which is a good time for

634
00:23:23,440 --> 00:23:26,080
our demo

635
00:23:34,080 --> 00:23:35,919
here we can see the user controlling the

636
00:23:35,919 --> 00:23:39,039
light bulb from the mobile app

637
00:23:39,039 --> 00:23:40,960
even changing the color of the smart

638
00:23:40,960 --> 00:23:50,320
light bulb

639
00:23:50,320 --> 00:23:52,240
once the attack starts the attacker will

640
00:23:52,240 --> 00:23:53,919
start by steering the light bulb

641
00:23:53,919 --> 00:23:56,159
from the network and convincing to join

642
00:23:56,159 --> 00:23:58,000
their own network

643
00:23:58,000 --> 00:24:00,000
once he joined the attackers network the

644
00:24:00,000 --> 00:24:01,520
attacker will change the

645
00:24:01,520 --> 00:24:03,440
color of the light bulb into a hideous

646
00:24:03,440 --> 00:24:05,360
color so the users

647
00:24:05,360 --> 00:24:07,039
will notice that something is wrong with

648
00:24:07,039 --> 00:24:08,799
the light bulb but they won't think that

649
00:24:08,799 --> 00:24:10,320
the light bulb is working because then

650
00:24:10,320 --> 00:24:13,120
we will toss it away

651
00:24:13,120 --> 00:24:15,520
here we can see the user trying to fix

652
00:24:15,520 --> 00:24:17,360
the color of the light bulb but to no

653
00:24:17,360 --> 00:24:19,840
avail

654
00:24:20,799 --> 00:24:22,640
when looking in the app the light bulb

655
00:24:22,640 --> 00:24:24,240
will be shown as unreachable

656
00:24:24,240 --> 00:24:25,840
and the only way to reboot the light

657
00:24:25,840 --> 00:24:27,840
bulb is to delete it from the app

658
00:24:27,840 --> 00:24:30,080
and tell the bridge to search for new

659
00:24:30,080 --> 00:24:31,279
light bulbs

660
00:24:31,279 --> 00:24:33,679
here the attack starts because we will

661
00:24:33,679 --> 00:24:35,279
masquerade to

662
00:24:35,279 --> 00:24:39,039
legitimate light bulb from our bridge

663
00:24:39,039 --> 00:24:41,760
and behind the scenes additional fake

664
00:24:41,760 --> 00:24:43,200
light bulbs will exploit the

665
00:24:43,200 --> 00:24:45,520
vulnerability as we've shown before

666
00:24:45,520 --> 00:24:48,559
and attack the bridge

667
00:24:49,039 --> 00:24:50,880
meanwhile the user is happy because he

668
00:24:50,880 --> 00:24:53,039
thinks he has a legitimate light bulb

669
00:24:53,039 --> 00:24:55,840
and now it works

670
00:24:56,480 --> 00:24:58,240
looking at a different angle we can see

671
00:24:58,240 --> 00:25:00,080
the bridge connected to the

672
00:25:00,080 --> 00:25:02,720
laptop and communicated over radio with

673
00:25:02,720 --> 00:25:03,919
our

674
00:25:03,919 --> 00:25:06,880
attacker the attacker will exploit the

675
00:25:06,880 --> 00:25:07,840
vulnerability

676
00:25:07,840 --> 00:25:10,080
attack the board install it on a blue

677
00:25:10,080 --> 00:25:11,279
and attack the laptop

678
00:25:11,279 --> 00:25:14,720
hopefully popping a caulk and as you can

679
00:25:14,720 --> 00:25:15,279
see

680
00:25:15,279 --> 00:25:18,080
the attack worked

681
00:25:19,520 --> 00:25:21,039
the vulnerability was reported to the

682
00:25:21,039 --> 00:25:23,760
vendo on the 5th of november 2019

683
00:25:23,760 --> 00:25:25,600
and the vendor issued a patch via an

684
00:25:25,600 --> 00:25:27,200
automatic update on january

685
00:25:27,200 --> 00:25:30,480
this year you can read more about

686
00:25:30,480 --> 00:25:32,559
our research and the advisory of the

687
00:25:32,559 --> 00:25:34,880
vandal in our linked blog post

688
00:25:34,880 --> 00:25:36,880
the official cv for this heap-based

689
00:25:36,880 --> 00:25:38,080
buffer overflow

690
00:25:38,080 --> 00:25:42,320
is cv 2020 6007.

691
00:25:42,320 --> 00:25:45,120
and if you happen to use smart light

692
00:25:45,120 --> 00:25:46,559
bulbs from signify

693
00:25:46,559 --> 00:25:48,960
you shouldn't worry all of the products

694
00:25:48,960 --> 00:25:52,559
should have received the update by now

695
00:25:52,559 --> 00:25:56,880
conclusions even with an mto of 127

696
00:25:56,880 --> 00:25:57,440
bytes

697
00:25:57,440 --> 00:25:58,960
zigbee vulnerabilities are indeed

698
00:25:58,960 --> 00:26:03,440
remotely exploitable as we demonstrated

699
00:26:03,440 --> 00:26:06,080
indeed in addition security mitigations

700
00:26:06,080 --> 00:26:06,799
only work

701
00:26:06,799 --> 00:26:10,240
when they are on by default the ip

702
00:26:10,240 --> 00:26:11,840
bridge was a static binary

703
00:26:11,840 --> 00:26:14,159
using fixed addresses without stacking

704
00:26:14,159 --> 00:26:16,720
areas and with a writable good

705
00:26:16,720 --> 00:26:20,000
and yet there was aslr for the heap

706
00:26:20,000 --> 00:26:23,200
for stack and four loaded libraries and

707
00:26:23,200 --> 00:26:26,400
that's thanks to linux

708
00:26:27,039 --> 00:26:29,840
and last but not least it turns out the

709
00:26:29,840 --> 00:26:31,919
smart devices are becoming popular by a

710
00:26:31,919 --> 00:26:32,480
minute

711
00:26:32,480 --> 00:26:34,799
and yet we can't even trust their own

712
00:26:34,799 --> 00:26:35,679
light bulbs

713
00:26:35,679 --> 00:26:38,640
maybe we should do something about it

714
00:26:38,640 --> 00:26:40,080
and with that

715
00:26:40,080 --> 00:26:43,760
thank you for joining this talk

