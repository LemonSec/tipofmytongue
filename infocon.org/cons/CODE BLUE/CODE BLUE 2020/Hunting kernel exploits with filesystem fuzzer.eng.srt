1
00:00:40,480 --> 00:00:42,800
hello i'll start our presentation on the

2
00:00:42,800 --> 00:00:44,640
hunting corner exploit with flash

3
00:00:44,640 --> 00:00:46,640
temperature

4
00:00:46,640 --> 00:00:48,640
first of all let me briefly introduce

5
00:00:48,640 --> 00:00:51,680
the table of contents before starting

6
00:00:51,680 --> 00:00:53,600
for the beginning i will briefly

7
00:00:53,600 --> 00:00:54,800
introduce our team

8
00:00:54,800 --> 00:00:57,760
and why we select this topic let me tell

9
00:00:57,760 --> 00:00:59,920
you how much the vulnerabilities affect

10
00:00:59,920 --> 00:01:01,280
various ways

11
00:01:01,280 --> 00:01:02,960
then i'll tell you in the order of

12
00:01:02,960 --> 00:01:05,438
tradition monitor analysis crashes and

13
00:01:05,438 --> 00:01:08,000
corner exploitation

14
00:01:08,000 --> 00:01:10,159
this project was conducted in the secret

15
00:01:10,159 --> 00:01:12,960
talent training curriculum called pov

16
00:01:12,960 --> 00:01:15,920
there are two mentors and one pl i'm in

17
00:01:15,920 --> 00:01:17,040
charge of the pm

18
00:01:17,040 --> 00:01:19,759
and there are three team members there

19
00:01:19,759 --> 00:01:21,920
are various 5g stamps in the world

20
00:01:21,920 --> 00:01:24,320
however there are a few cases of attacks

21
00:01:24,320 --> 00:01:26,000
through the file system

22
00:01:26,000 --> 00:01:29,520
this is because it is a weak model

23
00:01:29,520 --> 00:01:32,079
at this point you might think isn't it

24
00:01:32,079 --> 00:01:33,920
already load privileges to mount the

25
00:01:33,920 --> 00:01:34,799
image

26
00:01:34,799 --> 00:01:38,079
however if you put in a usb and plug

27
00:01:38,079 --> 00:01:39,040
into a pc

28
00:01:39,040 --> 00:01:41,759
it becomes automatic without any need

29
00:01:41,759 --> 00:01:42,479
for blue

30
00:01:42,479 --> 00:01:45,360
privilege at this time if the crafted

31
00:01:45,360 --> 00:01:46,479
image is mounted

32
00:01:46,479 --> 00:01:49,360
corner panel can occur in this way there

33
00:01:49,360 --> 00:01:51,759
was nothing with there through usb

34
00:01:51,759 --> 00:01:55,280
and also we use janus we develop

35
00:01:55,280 --> 00:01:58,399
our web monitor and analyze analyze

36
00:01:58,399 --> 00:02:00,240
one day and successfully electronic

37
00:02:00,240 --> 00:02:03,200
memory at last we exploited corner

38
00:02:03,200 --> 00:02:05,600
through jail day

39
00:02:05,600 --> 00:02:07,840
there are various oasis in the world and

40
00:02:07,840 --> 00:02:09,520
there are many file system

41
00:02:09,520 --> 00:02:13,520
used for each os but firestem is

42
00:02:13,520 --> 00:02:15,840
first systems are large and complex

43
00:02:15,840 --> 00:02:18,239
making it difficult to find bugs

44
00:02:18,239 --> 00:02:20,480
however file systems are managed in

45
00:02:20,480 --> 00:02:21,520
corner space

46
00:02:21,520 --> 00:02:24,720
so they can be good attack surfaces

47
00:02:24,720 --> 00:02:26,319
in addition corner interaction is

48
00:02:26,319 --> 00:02:28,160
possible in user mode

49
00:02:28,160 --> 00:02:31,040
these processes access one file system

50
00:02:31,040 --> 00:02:31,440
so

51
00:02:31,440 --> 00:02:35,920
ua4 expandation box can occur frequently

52
00:02:35,920 --> 00:02:38,000
as shown in the belowing the file stamp

53
00:02:38,000 --> 00:02:39,440
is difficult to audit

54
00:02:39,440 --> 00:02:43,519
because the line of the code is long

55
00:02:45,599 --> 00:02:48,840
janus uses the linsconus linux kernel

56
00:02:48,840 --> 00:02:51,040
library

57
00:02:51,040 --> 00:02:53,440
ak there is a library of corner at the

58
00:02:53,440 --> 00:02:54,720
application level

59
00:02:54,720 --> 00:02:57,440
it is generally used to lightly emulate

60
00:02:57,440 --> 00:02:59,280
the corner with kmu

61
00:02:59,280 --> 00:03:01,440
helicare is now the corner sources are

62
00:03:01,440 --> 00:03:03,840
organized in linux libraries

63
00:03:03,840 --> 00:03:06,640
separately from the kernel version so

64
00:03:06,640 --> 00:03:09,040
the version of akl is always lower than

65
00:03:09,040 --> 00:03:10,800
the corner version

66
00:03:10,800 --> 00:03:13,360
the reason for using aka is to recover

67
00:03:13,360 --> 00:03:16,080
quickly and attach affair when folding

68
00:03:16,080 --> 00:03:18,720
first remove the metadata from the image

69
00:03:18,720 --> 00:03:20,800
second bound with mutated image and

70
00:03:20,800 --> 00:03:22,000
metadata

71
00:03:22,000 --> 00:03:24,720
finally operator cisco that realized

72
00:03:24,720 --> 00:03:25,760
image files

73
00:03:25,760 --> 00:03:30,319
display it refreshed at two dimensions

74
00:03:30,640 --> 00:03:33,200
the file stem looks for files by inode

75
00:03:33,200 --> 00:03:34,319
as metadata

76
00:03:34,319 --> 00:03:37,280
because metadata information is mutated

77
00:03:37,280 --> 00:03:38,159
and a crash

78
00:03:38,159 --> 00:03:41,200
occurs even if data is mutated

79
00:03:41,200 --> 00:03:44,239
is useless in this way an image is

80
00:03:44,239 --> 00:03:47,040
created and system cores are called

81
00:03:47,040 --> 00:03:49,040
and no need to induce the corner to

82
00:03:49,040 --> 00:03:50,480
touch it wrong

83
00:03:50,480 --> 00:03:53,439
therefore it occurs when mounts sync and

84
00:03:53,439 --> 00:03:54,959
unmount

85
00:03:54,959 --> 00:03:58,799
our targets are the xt4 x2fs and pcrfs

86
00:03:58,799 --> 00:04:00,959
which share file systems that are

87
00:04:00,959 --> 00:04:03,840
automated in ubuntu

88
00:04:03,840 --> 00:04:06,720
especially ext4 is automated in many

89
00:04:06,720 --> 00:04:07,920
ways

90
00:04:07,920 --> 00:04:10,879
as the basic has the most basic file

91
00:04:10,879 --> 00:04:11,439
system

92
00:04:11,439 --> 00:04:13,920
there is metadata in the block based on

93
00:04:13,920 --> 00:04:14,799
ino table

94
00:04:14,799 --> 00:04:18,160
and folder will mutate this ptrfs

95
00:04:18,160 --> 00:04:21,040
is light efficient v3 based memory

96
00:04:21,040 --> 00:04:21,839
management

97
00:04:21,839 --> 00:04:24,800
and features automatic defragmentation

98
00:04:24,800 --> 00:04:26,080
interface is

99
00:04:26,080 --> 00:04:28,479
optimized for ssd and although you can

100
00:04:28,479 --> 00:04:30,639
use it like a single ssd

101
00:04:30,639 --> 00:04:34,160
although multiple plugged in app2ps

102
00:04:34,160 --> 00:04:36,320
is on file system optimized for nand

103
00:04:36,320 --> 00:04:38,560
flash created by samsung for flash

104
00:04:38,560 --> 00:04:40,560
memory

105
00:04:40,560 --> 00:04:42,639
when the price is occurred by the actual

106
00:04:42,639 --> 00:04:43,759
geraldine company

107
00:04:43,759 --> 00:04:46,960
the price is set as far lows and the box

108
00:04:46,960 --> 00:04:47,840
they want

109
00:04:47,840 --> 00:04:51,280
should remain long five system

110
00:04:51,280 --> 00:04:53,680
file systems are managed individually so

111
00:04:53,680 --> 00:04:55,360
even if a ball is patched

112
00:04:55,360 --> 00:04:59,520
it is reflected in the corner late

113
00:04:59,840 --> 00:05:02,479
when applying the foundation a bulk

114
00:05:02,479 --> 00:05:03,919
occurred in various ways

115
00:05:03,919 --> 00:05:06,960
as follows three or one two three in

116
00:05:06,960 --> 00:05:07,520
ubuntu

117
00:05:07,520 --> 00:05:10,160
four in groundwater 25 in the harmonica

118
00:05:10,160 --> 00:05:10,639
west

119
00:05:10,639 --> 00:05:14,000
and two in red star wars then i'll show

120
00:05:14,000 --> 00:05:14,479
you

121
00:05:14,479 --> 00:05:16,639
what causes corner panic when usb is

122
00:05:16,639 --> 00:05:17,919
plotted in

123
00:05:17,919 --> 00:05:21,440
on a smart tv the video shows there are

124
00:05:21,440 --> 00:05:22,080
negative

125
00:05:22,080 --> 00:05:24,479
existing crashes affecting the device

126
00:05:24,479 --> 00:05:25,840
you are using

127
00:05:25,840 --> 00:05:32,240
the vulnerability is cbe 2018-10879

128
00:05:32,240 --> 00:05:34,720
and the target tv is a samsung tv

129
00:05:34,720 --> 00:05:35,840
released in march

130
00:05:35,840 --> 00:05:39,440
19th the class meeting west is tizen

131
00:05:39,440 --> 00:05:44,000
5. victim is using a tv

132
00:05:44,000 --> 00:05:46,880
and the attacker is a malicious usb plus

133
00:05:46,880 --> 00:05:47,680
or usb

134
00:05:47,680 --> 00:05:53,120
into the tv

135
00:05:53,120 --> 00:05:55,680
afterwards corner padding occurs and you

136
00:05:55,680 --> 00:05:56,240
can see

137
00:05:56,240 --> 00:05:59,199
victim's tv freeze if debugging is

138
00:05:59,199 --> 00:06:01,520
possible i have seen the possibility of

139
00:06:01,520 --> 00:06:03,360
exploring

140
00:06:03,360 --> 00:06:05,919
we ported it to the version 5 of the

141
00:06:05,919 --> 00:06:06,639
corner

142
00:06:06,639 --> 00:06:09,919
and then uploaded it to 5.3 but there

143
00:06:09,919 --> 00:06:11,759
were many duplicate crashes

144
00:06:11,759 --> 00:06:15,680
and many invalid crashes therefore

145
00:06:15,680 --> 00:06:17,919
trade was developed and the crash fire

146
00:06:17,919 --> 00:06:18,880
was changed

147
00:06:18,880 --> 00:06:21,680
to a monterey image and the custom

148
00:06:21,680 --> 00:06:24,240
memory analysis plugged in was installed

149
00:06:24,240 --> 00:06:25,199
there

150
00:06:25,199 --> 00:06:27,520
the product through cameo unicrash was

151
00:06:27,520 --> 00:06:28,560
classified

152
00:06:28,560 --> 00:06:30,800
according to the type of bulk and then

153
00:06:30,800 --> 00:06:33,440
saved in db

154
00:06:33,440 --> 00:06:35,440
efficiently checked and managed through

155
00:06:35,440 --> 00:06:36,720
the web monitor

156
00:06:36,720 --> 00:06:38,960
you can remotely set and run file system

157
00:06:38,960 --> 00:06:40,319
folders and check the

158
00:06:40,319 --> 00:06:44,160
crash list this this is overall

159
00:06:44,160 --> 00:06:44,720
structure

160
00:06:44,720 --> 00:06:48,479
of the 3h and monitor there are a total

161
00:06:48,479 --> 00:06:48,800
of

162
00:06:48,800 --> 00:06:51,520
60 achievements reported by us some of

163
00:06:51,520 --> 00:06:54,080
the reported series will be explained by

164
00:06:54,080 --> 00:06:55,680
our team members

165
00:06:55,680 --> 00:06:58,800
now let me explain the cpu later we

166
00:06:58,800 --> 00:07:03,520
reported and detailed analysis of cve

167
00:07:03,520 --> 00:07:06,960
the following is the percentage of cve

168
00:07:06,960 --> 00:07:10,240
we obtained profile system the number of

169
00:07:10,240 --> 00:07:11,039
cbe

170
00:07:11,039 --> 00:07:14,800
that we reported was total of 16

171
00:07:14,800 --> 00:07:17,919
which is small but it can be seen

172
00:07:17,919 --> 00:07:20,960
that they occupy a significant version

173
00:07:20,960 --> 00:07:24,240
of the cv ratio for file system

174
00:07:24,240 --> 00:07:27,039
this means that there is not much

175
00:07:27,039 --> 00:07:29,280
research on the vulnerability of the

176
00:07:29,280 --> 00:07:30,720
fire system

177
00:07:30,720 --> 00:07:33,759
it would be nice if additional research

178
00:07:33,759 --> 00:07:37,919
on fire system was done in the future

179
00:07:37,919 --> 00:07:41,680
so since

180
00:07:41,680 --> 00:07:45,280
the final core of our analysis

181
00:07:45,280 --> 00:07:49,039
of crisis is lpe we internally scored

182
00:07:49,039 --> 00:07:49,440
each

183
00:07:49,440 --> 00:07:53,199
crash from 1 to 10 depending on

184
00:07:53,199 --> 00:07:59,039
the extent of exploitability now

185
00:07:59,039 --> 00:08:01,680
i will explain the analysis of each

186
00:08:01,680 --> 00:08:02,879
crease type

187
00:08:02,879 --> 00:08:06,160
first null pointer reference

188
00:08:06,160 --> 00:08:09,280
vulnerability the

189
00:08:09,280 --> 00:08:12,319
ext4 mtdir function check

190
00:08:12,319 --> 00:08:15,840
if there there are many any

191
00:08:15,840 --> 00:08:18,960
files in the directory when executing a

192
00:08:18,960 --> 00:08:19,520
command

193
00:08:19,520 --> 00:08:22,720
that deletes or directly such

194
00:08:22,720 --> 00:08:26,080
as rmdir the vulnerability is

195
00:08:26,080 --> 00:08:29,599
structure point called bh in the ect4

196
00:08:29,599 --> 00:08:33,120
mtdir function if the pointer becomes

197
00:08:33,120 --> 00:08:36,880
ner the location of b data cannot be

198
00:08:36,880 --> 00:08:38,880
calculated

199
00:08:38,880 --> 00:08:42,479
if the next rule fails to find next

200
00:08:42,479 --> 00:08:44,240
entry during the

201
00:08:44,240 --> 00:08:47,360
loop of the function if the return value

202
00:08:47,360 --> 00:08:50,399
of the export leads diablo function

203
00:08:50,399 --> 00:08:51,680
becomes zero

204
00:08:51,680 --> 00:08:54,959
then the next group is a

205
00:08:54,959 --> 00:08:57,760
null point of the nerf interreference

206
00:08:57,760 --> 00:08:58,720
vulnerability

207
00:08:58,720 --> 00:09:02,480
that occurs because the location

208
00:09:02,480 --> 00:09:07,040
of php data is not calculated

209
00:09:07,040 --> 00:09:09,600
for the exploit of the null pointer

210
00:09:09,600 --> 00:09:10,640
difference

211
00:09:10,640 --> 00:09:13,839
you need to assign memory uh to

212
00:09:13,839 --> 00:09:17,440
a low main address however

213
00:09:17,440 --> 00:09:20,080
the general address protection protect

214
00:09:20,080 --> 00:09:21,680
the non-religion

215
00:09:21,680 --> 00:09:24,720
so if you use the

216
00:09:24,720 --> 00:09:27,839
noir pointer therefore spawnability you

217
00:09:27,839 --> 00:09:28,320
can

218
00:09:28,320 --> 00:09:31,600
only do color panic so it is

219
00:09:31,600 --> 00:09:34,839
not much different from turning off the

220
00:09:34,839 --> 00:09:37,200
pc so

221
00:09:37,200 --> 00:09:40,880
we gave one point internally

222
00:09:40,880 --> 00:09:44,959
next slab will be vulnerability

223
00:09:44,959 --> 00:09:48,560
the body over all size and new site

224
00:09:48,560 --> 00:09:51,600
is set during the process of setting up

225
00:09:51,600 --> 00:09:55,600
entry for the exec file system

226
00:09:55,600 --> 00:09:58,800
these two variables are defined as size

227
00:09:58,800 --> 00:10:00,720
on the rt

228
00:10:00,720 --> 00:10:04,000
among them the values stored in all

229
00:10:04,000 --> 00:10:06,800
size is calculated through a function

230
00:10:06,800 --> 00:10:08,360
called

231
00:10:08,360 --> 00:10:11,279
le32 cpu

232
00:10:11,279 --> 00:10:14,399
and unexpected large value may be

233
00:10:14,399 --> 00:10:17,440
set due to the difference

234
00:10:17,440 --> 00:10:20,600
between the 32-bit data type and the

235
00:10:20,600 --> 00:10:22,480
64-bit data type

236
00:10:22,480 --> 00:10:27,519
in 64-bit os

237
00:10:31,040 --> 00:10:34,079
this is vulnerability that occurs when

238
00:10:34,079 --> 00:10:37,360
there is no code modified the

239
00:10:37,360 --> 00:10:40,800
value after that and very large

240
00:10:40,800 --> 00:10:44,560
area from the

241
00:10:44,560 --> 00:10:46,959
first power pointer memory initialize

242
00:10:46,959 --> 00:10:48,959
zero

243
00:10:48,959 --> 00:10:52,399
i wanted to use this vulnerability but

244
00:10:52,399 --> 00:10:55,680
the mem set itself was only zero

245
00:10:55,680 --> 00:10:58,959
and in order to use another method i

246
00:10:58,959 --> 00:11:01,760
had to consider other side effects that

247
00:11:01,760 --> 00:11:02,320
occurred

248
00:11:02,320 --> 00:11:05,920
when the value was initialized to zero

249
00:11:05,920 --> 00:11:11,199
so i gave it four point internally

250
00:11:13,279 --> 00:11:18,399
next is the uas vulnerability

251
00:11:19,120 --> 00:11:22,320
this is a vulnerability caused by

252
00:11:22,320 --> 00:11:26,880
the ptrf's q work function

253
00:11:26,880 --> 00:11:29,680
free walk q structure comes into the

254
00:11:29,680 --> 00:11:31,120
function

255
00:11:31,120 --> 00:11:34,320
and vulnerability occurs when leveling

256
00:11:34,320 --> 00:11:37,839
to work high

257
00:11:38,640 --> 00:11:42,079
if you know free timing then

258
00:11:42,079 --> 00:11:44,800
you can easily exclude it by pushing

259
00:11:44,800 --> 00:11:47,200
another object

260
00:11:47,200 --> 00:11:50,320
also the work queue structure has

261
00:11:50,320 --> 00:11:54,240
a meaningful function pointer so

262
00:11:54,240 --> 00:11:56,560
if you have triggering part of function

263
00:11:56,560 --> 00:11:58,720
pointer

264
00:11:58,720 --> 00:12:02,639
uh control flow hijacking is possible

265
00:12:02,639 --> 00:12:06,160
so i gave it eight point internally

266
00:12:06,160 --> 00:12:12,160
because it is very exploitable

267
00:12:13,120 --> 00:12:16,079
to exploit this vulnerability we need to

268
00:12:16,079 --> 00:12:16,959
use

269
00:12:16,959 --> 00:12:20,399
hip spring technique before spraying the

270
00:12:20,399 --> 00:12:21,760
corner hip

271
00:12:21,760 --> 00:12:24,800
there are a few things we need to know

272
00:12:24,800 --> 00:12:28,399
first memory allocation and management

273
00:12:28,399 --> 00:12:31,920
are done indirectly through 6 cores

274
00:12:31,920 --> 00:12:35,600
secondly which each score

275
00:12:35,600 --> 00:12:38,320
has an allocator minimum and maximum

276
00:12:38,320 --> 00:12:39,519
size

277
00:12:39,519 --> 00:12:42,720
therefore there is possibility that we

278
00:12:42,720 --> 00:12:43,360
will not

279
00:12:43,360 --> 00:12:46,880
be able to allocate objects

280
00:12:46,880 --> 00:12:50,000
of a certain size finally

281
00:12:50,000 --> 00:12:53,120
since the corner hip is manages through

282
00:12:53,120 --> 00:12:55,839
these curves that are current by

283
00:12:55,839 --> 00:12:57,839
multiple processes

284
00:12:57,839 --> 00:13:01,519
variable various variables

285
00:13:01,519 --> 00:13:05,519
exist when spraying the corner hip

286
00:13:05,519 --> 00:13:08,720
so there are several conditions for hip

287
00:13:08,720 --> 00:13:10,720
spring

288
00:13:10,720 --> 00:13:14,240
it must be user call over shift score

289
00:13:14,240 --> 00:13:17,600
and memory location size must be also

290
00:13:17,600 --> 00:13:18,639
stable

291
00:13:18,639 --> 00:13:21,200
and the allocation value must be

292
00:13:21,200 --> 00:13:22,800
controllable

293
00:13:22,800 --> 00:13:26,160
and there were some c scores

294
00:13:26,160 --> 00:13:31,439
that struggle for these conditions

295
00:13:32,160 --> 00:13:36,480
now we will explain the overview of the

296
00:13:36,480 --> 00:13:39,199
zero day vulnerability that we found the

297
00:13:39,199 --> 00:13:39,920
part

298
00:13:39,920 --> 00:13:42,959
that was blocked while developing the

299
00:13:42,959 --> 00:13:48,240
exploit and how we solved it

300
00:13:48,240 --> 00:13:51,680
first the vulnerabilities of uaf

301
00:13:51,680 --> 00:13:54,959
found in the ptrfs file system

302
00:13:54,959 --> 00:13:58,320
in btrfs the corner or queue

303
00:13:58,320 --> 00:14:01,760
function is used to

304
00:14:01,760 --> 00:14:05,360
async operation and our work queue are

305
00:14:05,360 --> 00:14:06,480
released

306
00:14:06,480 --> 00:14:11,440
by the closest function we scored

307
00:14:11,440 --> 00:14:15,199
during the amounting process however

308
00:14:15,199 --> 00:14:18,639
if the async option is set in the

309
00:14:18,639 --> 00:14:22,240
output function called in the same

310
00:14:22,240 --> 00:14:25,680
closed c3 function it enters

311
00:14:25,680 --> 00:14:28,959
on specific routine and

312
00:14:28,959 --> 00:14:32,160
usually episode 3 occur reporting to the

313
00:14:32,160 --> 00:14:35,440
work queue that already

314
00:14:35,440 --> 00:14:38,240
has been free

315
00:14:39,120 --> 00:14:41,519
you have to do hip spring to exploit

316
00:14:41,519 --> 00:14:43,040
this vulnerability

317
00:14:43,040 --> 00:14:46,959
but there were several problems

318
00:14:46,959 --> 00:14:50,240
first due to the property of

319
00:14:50,240 --> 00:14:53,760
the vulnerability it was not possible to

320
00:14:53,760 --> 00:14:56,800
exploit the general uaf method

321
00:14:56,800 --> 00:15:01,519
of pre layer locate reuse

322
00:15:01,519 --> 00:15:04,000
since everything is done within closed

323
00:15:04,000 --> 00:15:05,040
city

324
00:15:05,040 --> 00:15:08,639
the problem was solved by triggering

325
00:15:08,639 --> 00:15:11,839
the vulnerability by spraying the corner

326
00:15:11,839 --> 00:15:15,120
hip throw or background

327
00:15:15,120 --> 00:15:18,160
process second the

328
00:15:18,160 --> 00:15:21,600
size of target structure was 16 bytes

329
00:15:21,600 --> 00:15:24,399
which was too small the hip spring

330
00:15:24,399 --> 00:15:25,040
technique

331
00:15:25,040 --> 00:15:28,720
described earlier could not be resized

332
00:15:28,720 --> 00:15:32,000
or have had a header

333
00:15:32,000 --> 00:15:35,440
of 18 bytes so

334
00:15:35,440 --> 00:15:38,480
our hip spring technique

335
00:15:38,480 --> 00:15:41,839
was needed

336
00:15:43,199 --> 00:15:46,000
at this time we discovered the hip

337
00:15:46,000 --> 00:15:48,000
spring techniques

338
00:15:48,000 --> 00:15:52,839
used in the presentation of bbx

339
00:15:52,839 --> 00:15:54,959
2018

340
00:15:54,959 --> 00:15:58,560
corner vulnerability exploitation

341
00:15:58,560 --> 00:16:02,320
these techniques use on

342
00:16:02,320 --> 00:16:06,000
set xa tic score and the allocation size

343
00:16:06,000 --> 00:16:07,120
can be set

344
00:16:07,120 --> 00:16:10,560
from 8 bytes however when the

345
00:16:10,560 --> 00:16:13,920
6th chord that terminates terminated

346
00:16:13,920 --> 00:16:17,440
the allocated memory was split

347
00:16:17,440 --> 00:16:20,320
so heaps playing was not possible with

348
00:16:20,320 --> 00:16:23,279
the cisco order

349
00:16:23,279 --> 00:16:27,040
typically the main the minimum size

350
00:16:27,040 --> 00:16:30,160
of corner memory allocated

351
00:16:30,160 --> 00:16:33,839
by the zx80ti 6 curve is

352
00:16:33,839 --> 00:16:37,759
16 bytes which fits

353
00:16:37,759 --> 00:16:41,199
the spring size we needed

354
00:16:41,199 --> 00:16:43,199
when curling shift curve the corner

355
00:16:43,199 --> 00:16:44,720
memory is allocated

356
00:16:44,720 --> 00:16:47,920
through km unlock function

357
00:16:47,920 --> 00:16:52,160
and the optical input value is copied

358
00:16:52,160 --> 00:16:57,360
to the color memory through the settings

359
00:16:57,360 --> 00:17:01,199
through the copy promoter function

360
00:17:01,199 --> 00:17:04,000
however after the shift system operation

361
00:17:04,000 --> 00:17:06,160
is finished

362
00:17:06,160 --> 00:17:10,000
the memory is all delocated so we needed

363
00:17:10,000 --> 00:17:13,760
a way to make sure that your location

364
00:17:13,760 --> 00:17:16,480
does not happen

365
00:17:16,480 --> 00:17:20,319
so in this presentation vitaly used

366
00:17:20,319 --> 00:17:23,679
a memory geolocation delaying technique

367
00:17:23,679 --> 00:17:27,599
through the userport fd score

368
00:17:27,599 --> 00:17:30,640
briefly after setting the memory orders

369
00:17:30,640 --> 00:17:32,000
to be copied

370
00:17:32,000 --> 00:17:35,440
to span between two pages when

371
00:17:35,440 --> 00:17:38,799
a second memory page is

372
00:17:38,799 --> 00:17:41,520
reported sheet or page port can be

373
00:17:41,520 --> 00:17:42,799
occurred

374
00:17:42,799 --> 00:17:46,240
by userport fd first

375
00:17:46,240 --> 00:17:49,440
in two articles routine

376
00:17:49,440 --> 00:17:53,280
in the routine that occurred later

377
00:17:53,280 --> 00:17:57,120
at co i record that the last

378
00:17:57,120 --> 00:17:59,840
delays corner memory their location

379
00:17:59,840 --> 00:18:00,320
through

380
00:18:00,320 --> 00:18:03,520
the sleep function to prevent memory

381
00:18:03,520 --> 00:18:04,640
deal location

382
00:18:04,640 --> 00:18:07,360
from happening

383
00:18:08,880 --> 00:18:12,000
visualizing this when calling the

384
00:18:12,000 --> 00:18:15,360
cutie prom user function in the zx dti

385
00:18:15,360 --> 00:18:18,720
score user protected is set between

386
00:18:18,720 --> 00:18:22,240
a and b of the user memory

387
00:18:22,240 --> 00:18:26,480
where the memory copies will be made

388
00:18:26,480 --> 00:18:30,080
it then shift it and curl c score

389
00:18:30,080 --> 00:18:33,840
to allocate 16 bytes to

390
00:18:33,840 --> 00:18:37,360
the color memory after

391
00:18:37,360 --> 00:18:41,280
locating corner memory set x attr copies

392
00:18:41,280 --> 00:18:45,600
the string a from the specified

393
00:18:45,600 --> 00:18:48,960
user memory to color memory

394
00:18:48,960 --> 00:18:52,480
as shown in the figure

395
00:18:52,480 --> 00:18:55,600
after copying a string while copying

396
00:18:55,600 --> 00:18:57,120
this string

397
00:18:57,120 --> 00:19:00,480
our page port occurred because

398
00:19:00,480 --> 00:19:04,000
usual project d reports due to the

399
00:19:04,000 --> 00:19:07,679
set memory address

400
00:19:07,679 --> 00:19:10,640
and course designated callback function

401
00:19:10,640 --> 00:19:11,039
for

402
00:19:11,039 --> 00:19:14,000
exception handling

403
00:19:14,160 --> 00:19:16,960
and the designated callback function the

404
00:19:16,960 --> 00:19:18,160
thread slips

405
00:19:18,160 --> 00:19:21,360
for the specified time therefore

406
00:19:21,360 --> 00:19:24,280
memory allocated through the statex

407
00:19:24,280 --> 00:19:26,720
attitude remains

408
00:19:26,720 --> 00:19:28,880
in the corner memory without being

409
00:19:28,880 --> 00:19:29,760
played

410
00:19:29,760 --> 00:19:34,879
for a specified period period of time

411
00:19:35,280 --> 00:19:39,280
in this way we were able to relocate the

412
00:19:39,280 --> 00:19:42,559
print work structure

413
00:19:42,559 --> 00:19:45,679
in the closed city using this technique

414
00:19:45,679 --> 00:19:48,799
and modify it to an

415
00:19:48,799 --> 00:19:52,320
arbitrary value

416
00:19:52,320 --> 00:19:55,840
since we will since we have to

417
00:19:55,840 --> 00:19:59,360
poor control over the pairs of

418
00:19:59,360 --> 00:20:02,960
the workkey struct we started

419
00:20:02,960 --> 00:20:06,080
partner analysis of how the

420
00:20:06,080 --> 00:20:09,120
fields in the world queue structure are

421
00:20:09,120 --> 00:20:09,760
used

422
00:20:09,760 --> 00:20:12,880
in operation after the ptrfs

423
00:20:12,880 --> 00:20:18,640
work queue ptra press q work function

424
00:20:18,880 --> 00:20:21,520
and through the analysis it was

425
00:20:21,520 --> 00:20:22,799
confirmed that

426
00:20:22,799 --> 00:20:25,919
the following actions were performed

427
00:20:25,919 --> 00:20:30,000
first it inserts a structure pointer

428
00:20:30,000 --> 00:20:34,240
into the work queue

429
00:20:34,240 --> 00:20:37,760
through insert work queue insert work

430
00:20:37,760 --> 00:20:38,720
function

431
00:20:38,720 --> 00:20:42,480
that is called upon amounting second

432
00:20:42,480 --> 00:20:45,840
our worker thread is created through the

433
00:20:45,840 --> 00:20:48,799
wake up workflow function called from

434
00:20:48,799 --> 00:20:49,120
the

435
00:20:49,120 --> 00:20:52,240
amount process amount thread

436
00:20:52,240 --> 00:20:55,600
third it calls the select test card

437
00:20:55,600 --> 00:20:56,400
queue

438
00:20:56,400 --> 00:20:59,840
function pointer that exists in the

439
00:20:59,840 --> 00:21:00,559
structure

440
00:21:00,559 --> 00:21:04,640
print to be to specify the cpu number

441
00:21:04,640 --> 00:21:08,400
to be used by thread at this time

442
00:21:08,400 --> 00:21:11,280
the select select test rq function

443
00:21:11,280 --> 00:21:12,159
pointer

444
00:21:12,159 --> 00:21:16,799
is referenced used using the period of

445
00:21:16,799 --> 00:21:20,559
the workq structure that was controlled

446
00:21:20,559 --> 00:21:23,840
through the previous hip

447
00:21:23,840 --> 00:21:27,360
spring technique so it is possible to

448
00:21:27,360 --> 00:21:30,480
manipulate the pointer in the

449
00:21:30,480 --> 00:21:31,679
environment

450
00:21:31,679 --> 00:21:35,200
where the corner protection technique

451
00:21:35,200 --> 00:21:38,480
is off therefore

452
00:21:38,480 --> 00:21:41,600
by analyzing the

453
00:21:41,600 --> 00:21:45,120
following structure reference flow

454
00:21:45,120 --> 00:21:48,320
we were able to match the structure

455
00:21:48,320 --> 00:21:50,159
appearance values

456
00:21:50,159 --> 00:21:53,760
the crunches by each routine

457
00:21:53,760 --> 00:21:57,120
and finally make the select test

458
00:21:57,120 --> 00:22:00,240
function pointer point to articles

459
00:22:00,240 --> 00:22:02,720
record

460
00:22:02,720 --> 00:22:07,280
so it was possible to control rip

461
00:22:07,280 --> 00:22:12,480
through vulnerability as parallels

462
00:22:12,480 --> 00:22:15,520
first check the user id try to read

463
00:22:15,520 --> 00:22:16,799
secret file

464
00:22:16,799 --> 00:22:20,480
and learn the explore code and sometimes

465
00:22:20,480 --> 00:22:22,799
later

466
00:22:24,960 --> 00:22:29,280
the share opens check the user id

467
00:22:29,280 --> 00:22:32,559
it's not privileged and you can read the

468
00:22:32,559 --> 00:22:35,280
secret file

469
00:22:38,240 --> 00:22:40,080
if you have any if you have any

470
00:22:40,080 --> 00:22:42,640
questions please contact us

471
00:22:42,640 --> 00:22:48,559
at the email address below thank you

