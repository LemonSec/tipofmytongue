1
00:00:00,030 --> 00:00:11,969
hi<font color="#E5E5E5"> everybody they will tell you about</font>

2
00:00:03,350 --> 00:00:14,009
what is<font color="#CCCCCC"> fin spy</font><font color="#E5E5E5"> and they will have PT</font>

3
00:00:11,969 --> 00:00:16,198
expert<font color="#E5E5E5"> security</font><font color="#CCCCCC"> center specialists</font>

4
00:00:14,009 --> 00:00:26,070
<font color="#CCCCCC">against Russell and Nikita</font><font color="#E5E5E5"> Roshan and</font>

5
00:00:16,199 --> 00:00:29,570
let's start<font color="#E5E5E5"> the fin spy is spy software</font>

6
00:00:26,070 --> 00:00:36,719
developed by gamma group for sales to

7
00:00:29,570 --> 00:00:39,930
some governments frequently appears in

8
00:00:36,719 --> 00:00:47,629
<font color="#E5E5E5">different</font><font color="#CCCCCC"> political conflicts used to</font>

9
00:00:39,930 --> 00:00:54,180
target<font color="#E5E5E5"> russian-speaking</font><font color="#CCCCCC"> victims uses</font>

10
00:00:47,629 --> 00:00:57,149
<font color="#E5E5E5">zero day to distribute</font><font color="#CCCCCC"> to targets it's</font>

11
00:00:54,180 --> 00:01:05,729
twenty seventeen eighty seven fifty nine

12
00:00:57,149 --> 00:01:19,229
and<font color="#CCCCCC"> CVE 2017</font><font color="#E5E5E5"> 11</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> 9</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> in a top flash</font>

13
00:01:05,729 --> 00:01:22,520
<font color="#E5E5E5">player so fin</font><font color="#CCCCCC"> Spy is a very</font><font color="#E5E5E5"> complex</font>

14
00:01:19,229 --> 00:01:26,130
story<font color="#CCCCCC"> and it works a lot of</font><font color="#E5E5E5"> methods of</font>

15
00:01:22,520 --> 00:01:32,310
analysis among<font color="#CCCCCC"> which we can see</font><font color="#E5E5E5"> the</font>

16
00:01:26,130 --> 00:01:35,699
analysis of surrounding obfuscation<font color="#E5E5E5"> and</font>

17
00:01:32,310 --> 00:01:39,240
<font color="#E5E5E5">most interesting virtualization of code</font>

18
00:01:35,700 --> 00:01:41,490
<font color="#E5E5E5">and antivirus and coding and Serbia will</font>

19
00:01:39,240 --> 00:01:44,039
tell you about<font color="#E5E5E5"> that but</font><font color="#CCCCCC"> before we start</font>

20
00:01:41,490 --> 00:01:45,929
looking at<font color="#E5E5E5"> virtualization we'll talk</font>

21
00:01:44,040 --> 00:01:48,930
about different protection measures

22
00:01:45,930 --> 00:01:51,420
<font color="#CCCCCC">we'll start</font><font color="#E5E5E5"> from a fist occasion on a</font>

23
00:01:48,930 --> 00:01:55,200
slide you can see<font color="#CCCCCC"> the structure of a</font>

24
00:01:51,420 --> 00:01:58,229
skated<font color="#E5E5E5"> box one two three real</font>

25
00:01:55,200 --> 00:02:02,070
<font color="#E5E5E5">instructions and then blocks and with</font>

26
00:01:58,229 --> 00:02:05,600
two conditional branch instructions it's

27
00:02:02,070 --> 00:02:05,600
well<font color="#CCCCCC"> well known</font>

28
00:02:12,510 --> 00:02:20,799
then you can see<font color="#CCCCCC"> screenshot it's um</font>

29
00:02:17,069 --> 00:02:28,049
obfuscated<font color="#E5E5E5"> VM interpreter function graph</font>

30
00:02:20,800 --> 00:02:34,810
<font color="#E5E5E5">and this type of obfuscation</font><font color="#CCCCCC"> is used for</font>

31
00:02:28,050 --> 00:02:39,640
<font color="#E5E5E5">32 and 64-bit systems</font><font color="#CCCCCC"> I think it's clear</font>

32
00:02:34,810 --> 00:02:44,200
with the dumb instructions it<font color="#CCCCCC"> is used</font>

33
00:02:39,640 --> 00:02:48,940
<font color="#CCCCCC">only</font><font color="#E5E5E5"> in 32 code containing</font><font color="#CCCCCC"> this</font>

34
00:02:44,200 --> 00:02:51,850
sophistication it used only for handles

35
00:02:48,940 --> 00:02:56,829
of which last functions and you can see

36
00:02:51,850 --> 00:03:02,650
this<font color="#CCCCCC"> and Apple</font><font color="#E5E5E5"> skated with markzware it</font>

37
00:02:56,830 --> 00:03:07,660
is real code is dummy that's<font color="#E5E5E5"> all about</font>

38
00:03:02,650 --> 00:03:13,239
alpha station<font color="#E5E5E5"> quite quickly but we took</font>

39
00:03:07,660 --> 00:03:15,510
a lot time to sort it out viewers about

40
00:03:13,239 --> 00:03:19,810
the VM itself

41
00:03:15,510 --> 00:03:27,880
it supports 32 and 64-bit architecture

42
00:03:19,810 --> 00:03:32,049
and<font color="#E5E5E5"> kernel hears a loud has several</font>

43
00:03:27,880 --> 00:03:37,480
global context and the<font color="#CCCCCC"> slider</font><font color="#E5E5E5"> can see</font><font color="#CCCCCC"> a</font>

44
00:03:32,049 --> 00:03:41,410
<font color="#E5E5E5">structure of the instruction the size</font>

45
00:03:37,480 --> 00:03:47,500
<font color="#E5E5E5">statics it's 64 byte you can see</font>

46
00:03:41,410 --> 00:03:49,030
structure and slide supported for

47
00:03:47,500 --> 00:03:51,700
instructions at the<font color="#E5E5E5"> time each</font>

48
00:03:49,030 --> 00:03:56,890
instruction is<font color="#CCCCCC"> inscripted by a simple</font>

49
00:03:51,700 --> 00:03:59,500
algorithm<font color="#CCCCCC"> picker is compressed by a</font>

50
00:03:56,890 --> 00:04:03,518
<font color="#E5E5E5">plate encryption algorithms are</font>

51
00:03:59,500 --> 00:04:08,950
different<font color="#E5E5E5"> between 32 and 64 algorithms</font>

52
00:04:03,519 --> 00:04:13,900
<font color="#E5E5E5">this</font><font color="#CCCCCC"> file showing</font><font color="#E5E5E5"> global context stores</font>

53
00:04:08,950 --> 00:04:16,529
the current<font color="#E5E5E5"> state of the em</font><font color="#CCCCCC"> looked loves</font>

54
00:04:13,900 --> 00:04:19,478
to work different flows very float has

55
00:04:16,529 --> 00:04:21,039
the<font color="#CCCCCC"> context reflecting its current</font>

56
00:04:19,478 --> 00:04:24,880
<font color="#CCCCCC">status Tate</font>

57
00:04:21,040 --> 00:04:28,780
<font color="#CCCCCC">a few words about some fields</font><font color="#E5E5E5"> we are</font>

58
00:04:24,880 --> 00:04:30,790
<font color="#E5E5E5">zero is</font><font color="#CCCCCC"> temporary</font><font color="#E5E5E5"> register straight it's</font>

59
00:04:28,780 --> 00:04:31,929
very important<font color="#CCCCCC"> I recommend you to</font>

60
00:04:30,790 --> 00:04:36,040
<font color="#CCCCCC">memorize it</font>

61
00:04:31,930 --> 00:04:43,050
it might find it<font color="#CCCCCC"> very useful and</font><font color="#E5E5E5"> also</font>

62
00:04:36,040 --> 00:04:47,320
feel dynamic code where some processor

63
00:04:43,050 --> 00:04:53,920
<font color="#E5E5E5">craft the code</font><font color="#CCCCCC"> a few words about the</font>

64
00:04:47,320 --> 00:04:58,980
registers<font color="#CCCCCC"> 32-bit contains eleven</font>

65
00:04:53,920 --> 00:04:58,980
registers 64 contains<font color="#E5E5E5"> 18 registers</font>

66
00:05:04,170 --> 00:05:11,050
64-bit doesn't support push<font color="#CCCCCC"> a Papa</font>

67
00:05:08,140 --> 00:05:18,669
analog<font color="#E5E5E5"> that's why the virtual machine</font>

68
00:05:11,050 --> 00:05:23,170
implements its own routines and it

69
00:05:18,670 --> 00:05:25,900
stores on a stack that's actually the

70
00:05:23,170 --> 00:05:29,020
mapping virtual register to machine

71
00:05:25,900 --> 00:05:32,859
registers for 64-bit system there is no

72
00:05:29,020 --> 00:05:38,590
<font color="#E5E5E5">such</font><font color="#CCCCCC"> push an instruction and VM realized</font>

73
00:05:32,860 --> 00:05:43,420
their own sub programs<font color="#E5E5E5"> on stack machine</font>

74
00:05:38,590 --> 00:05:48,070
registers so what are the instructions

75
00:05:43,420 --> 00:05:53,620
<font color="#CCCCCC">style not many of them</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> 34 them the</font>

76
00:05:48,070 --> 00:05:56,830
same time and most of them<font color="#E5E5E5"> their</font>

77
00:05:53,620 --> 00:06:00,280
synthesis is very similar<font color="#CCCCCC"> to</font><font color="#E5E5E5"> that of</font>

78
00:05:56,830 --> 00:06:05,979
instructions except<font color="#E5E5E5"> a few that we</font>

79
00:06:00,280 --> 00:06:12,070
consider as<font color="#CCCCCC"> reco racial</font><font color="#E5E5E5"> call cognitive</font>

80
00:06:05,980 --> 00:06:18,030
<font color="#E5E5E5">function and call a special IP call used</font>

81
00:06:12,070 --> 00:06:20,800
to call every function and<font color="#E5E5E5"> X me which is</font>

82
00:06:18,030 --> 00:06:24,989
executed machine instruction instruction

83
00:06:20,800 --> 00:06:29,020
that performs one specific machine

84
00:06:24,990 --> 00:06:32,860
instruction given in arguments most

85
00:06:29,020 --> 00:06:34,859
instructions<font color="#E5E5E5"> are similar to native 86</font>

86
00:06:32,860 --> 00:06:41,560
options and we will not look into<font color="#E5E5E5"> them</font>

87
00:06:34,860 --> 00:06:44,560
<font color="#E5E5E5">let's start</font><font color="#CCCCCC"> from X me as I said before</font>

88
00:06:41,560 --> 00:06:49,240
it<font color="#CCCCCC"> is needed</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> execute one</font><font color="#E5E5E5"> machine</font>

89
00:06:44,560 --> 00:06:52,240
instruction for<font color="#E5E5E5"> example there's</font>

90
00:06:49,240 --> 00:06:57,219
instruction<font color="#E5E5E5"> push but no instruction pops</font>

91
00:06:52,240 --> 00:07:01,120
or something to get out of stack<font color="#CCCCCC"> they</font>

92
00:06:57,219 --> 00:07:05,830
<font color="#CCCCCC">use a command</font><font color="#E5E5E5"> X me and it performs</font>

93
00:07:01,120 --> 00:07:11,710
machine instruction pop the processor of

94
00:07:05,830 --> 00:07:18,599
this virtual instruction is crafting a

95
00:07:11,710 --> 00:07:22,870
code into global context<font color="#E5E5E5"> following by</font>

96
00:07:18,599 --> 00:07:34,360
pattern hard-coded into<font color="#E5E5E5"> the instruction</font>

97
00:07:22,870 --> 00:07:36,479
handler<font color="#E5E5E5"> as you can see here in for you</font>

98
00:07:34,360 --> 00:07:39,129
to get down<font color="#E5E5E5"> to facts and registries</font>

99
00:07:36,479 --> 00:07:41,469
virtual registries are reflected<font color="#CCCCCC"> in the</font>

100
00:07:39,129 --> 00:07:42,789
machine once<font color="#E5E5E5"> and backwards and then</font>

101
00:07:41,469 --> 00:07:44,889
there's a<font color="#E5E5E5"> machine instruction that you</font>

102
00:07:42,789 --> 00:07:47,889
must be performed<font color="#E5E5E5"> and fulfilled and then</font>

103
00:07:44,889 --> 00:07:52,180
there's a log<font color="#CCCCCC"> that brings the controls</font>

104
00:07:47,889 --> 00:07:55,990
back to<font color="#E5E5E5"> interpret a turn so for 64-bit</font>

105
00:07:52,180 --> 00:07:58,960
systems is the same except<font color="#E5E5E5"> there is no</font>

106
00:07:55,990 --> 00:08:06,310
<font color="#CCCCCC">Prolog as there are</font><font color="#E5E5E5"> no such instructions</font>

107
00:07:58,960 --> 00:08:09,310
and the Prolog<font color="#E5E5E5"> well Prolog is the call</font>

108
00:08:06,310 --> 00:08:11,520
<font color="#E5E5E5">of these sub programs before the control</font>

109
00:08:09,310 --> 00:08:18,580
<font color="#E5E5E5">goes here</font>

110
00:08:11,520 --> 00:08:22,150
<font color="#CCCCCC">IP call is very similar to ask me it has</font>

111
00:08:18,580 --> 00:08:26,800
other number<font color="#CCCCCC"> of opcode but as you can</font>

112
00:08:22,150 --> 00:08:31,859
<font color="#CCCCCC">see it's absolute because</font><font color="#E5E5E5"> it performs</font>

113
00:08:26,800 --> 00:08:31,860
jumped to an<font color="#E5E5E5"> address from I 80</font>

114
00:08:41,750 --> 00:08:51,889
so right<font color="#CCCCCC"> that</font><font color="#E5E5E5"> could be developed</font><font color="#CCCCCC"> into</font>

115
00:08:47,029 --> 00:08:54,769
two types<font color="#E5E5E5"> absolute which performs</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> call</font>

116
00:08:51,889 --> 00:08:57,860
of IP function directly<font color="#CCCCCC"> from</font><font color="#E5E5E5"> IIT and</font>

117
00:08:54,769 --> 00:09:02,240
<font color="#CCCCCC">that is relative</font><font color="#E5E5E5"> indeed as you jump to a</font>

118
00:08:57,860 --> 00:09:05,329
certain<font color="#E5E5E5"> registry after a shift in</font><font color="#CCCCCC"> terms</font>

119
00:09:02,240 --> 00:09:13,819
of<font color="#E5E5E5"> VM they are inseparable</font>

120
00:09:05,329 --> 00:09:16,459
we simply separated<font color="#E5E5E5"> them the</font><font color="#CCCCCC"> Tecla</font><font color="#E5E5E5"> for</font>

121
00:09:13,819 --> 00:09:20,360
the sampler<font color="#CCCCCC"> that was the</font><font color="#E5E5E5"> only reason we</font>

122
00:09:16,459 --> 00:09:25,029
split up before<font color="#E5E5E5"> we take a look at the</font>

123
00:09:20,360 --> 00:09:31,279
last<font color="#CCCCCC"> virtual machine instruction recall</font>

124
00:09:25,029 --> 00:09:33,560
we tell you how the reading is made in

125
00:09:31,279 --> 00:09:38,120
the<font color="#E5E5E5"> VM all the instructions that either</font>

126
00:09:33,560 --> 00:09:43,089
write a read from<font color="#CCCCCC"> the memory occur by</font>

127
00:09:38,120 --> 00:09:43,089
<font color="#CCCCCC">r-va</font><font color="#E5E5E5"> in the dress space of the process</font>

128
00:09:43,310 --> 00:09:51,439
[Music]

129
00:09:46,389 --> 00:09:54,199
not certain<font color="#E5E5E5"> ships but</font><font color="#CCCCCC"> RV a calling</font>

130
00:09:51,439 --> 00:10:00,230
convention for a visualized function is

131
00:09:54,199 --> 00:10:03,229
similar<font color="#E5E5E5"> to 32</font><font color="#CCCCCC"> deckle first</font><font color="#E5E5E5"> called with</font>

132
00:10:00,230 --> 00:10:07,550
64-bit and instruction set doesn't

133
00:10:03,230 --> 00:10:10,459
<font color="#CCCCCC">contain any analog as you can see the</font>

134
00:10:07,550 --> 00:10:13,459
handlers have some<font color="#CCCCCC"> prologue it's</font>

135
00:10:10,459 --> 00:10:19,479
maintained from the function which was

136
00:10:13,459 --> 00:10:23,599
virtualized and they have the same

137
00:10:19,480 --> 00:10:26,329
variables etc<font color="#E5E5E5"> just so the same so this</font>

138
00:10:23,600 --> 00:10:38,420
<font color="#CCCCCC">is a screenshot</font><font color="#E5E5E5"> shows how</font><font color="#CCCCCC"> the vehicles</font>

139
00:10:26,329 --> 00:10:42,410
made so our vehicle handler<font color="#E5E5E5"> gets out and</font>

140
00:10:38,420 --> 00:10:44,809
first<font color="#E5E5E5"> read instruction ID and you can</font>

141
00:10:42,410 --> 00:10:49,029
see<font color="#E5E5E5"> below</font><font color="#CCCCCC"> that prologue I was referring</font>

142
00:10:44,809 --> 00:10:49,029
to<font color="#E5E5E5"> in the very bottom</font>

143
00:10:49,519 --> 00:10:56,459
<font color="#E5E5E5">we see</font><font color="#CCCCCC"> a push idea first virtual</font>

144
00:10:53,699 --> 00:11:02,279
instruction of function every

145
00:10:56,459 --> 00:11:05,339
instruction has unique ID it is placed

146
00:11:02,279 --> 00:11:08,839
into a stack and<font color="#E5E5E5"> then there's jump back</font>

147
00:11:05,339 --> 00:11:12,899
to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> the interpreter interpreter</font>

148
00:11:08,839 --> 00:11:17,069
<font color="#E5E5E5">brings it out from the stack looks for</font>

149
00:11:12,899 --> 00:11:23,449
it and makes it transfer<font color="#E5E5E5"> to that virtual</font>

150
00:11:17,069 --> 00:11:28,769
instruction which actually the first

151
00:11:23,449 --> 00:11:34,620
<font color="#E5E5E5">visualized instruction function so how</font>

152
00:11:28,769 --> 00:11:38,579
to get this pickle<font color="#E5E5E5"> from the inspire</font><font color="#CCCCCC"> it's</font>

153
00:11:34,620 --> 00:11:41,550
very<font color="#E5E5E5"> simple here were</font><font color="#CCCCCC"> searching for</font><font color="#E5E5E5"> the</font>

154
00:11:38,579 --> 00:11:44,069
last<font color="#E5E5E5"> interpreter instruction the</font>

155
00:11:41,550 --> 00:11:46,160
transition itself<font color="#CCCCCC"> I</font><font color="#E5E5E5"> mean the instruction</font>

156
00:11:44,069 --> 00:11:49,740
which performs<font color="#E5E5E5"> the transfer to the</font>

157
00:11:46,160 --> 00:11:55,079
processor<font color="#E5E5E5"> a virtual function at that</font>

158
00:11:49,740 --> 00:12:01,949
moment you can<font color="#CCCCCC"> see the register</font><font color="#E5E5E5"> point</font>

159
00:11:55,079 --> 00:12:05,939
and<font color="#CCCCCC"> e</font><font color="#E5E5E5"> aside points to the</font><font color="#CCCCCC"> REM if we</font>

160
00:12:01,949 --> 00:12:10,019
scroll up<font color="#E5E5E5"> to</font><font color="#CCCCCC"> beginning</font><font color="#E5E5E5"> of the dedicated</font>

161
00:12:05,940 --> 00:12:15,600
<font color="#E5E5E5">look this is going to be the beginning</font>

162
00:12:10,019 --> 00:12:21,360
<font color="#E5E5E5">of this</font><font color="#CCCCCC"> you dump it and</font><font color="#E5E5E5"> you work with</font>

163
00:12:15,600 --> 00:12:24,089
<font color="#CCCCCC">that now let me</font><font color="#E5E5E5"> tell you about how the</font>

164
00:12:21,360 --> 00:12:26,639
assembler<font color="#E5E5E5"> is working that we wrote the</font>

165
00:12:24,089 --> 00:12:28,980
<font color="#E5E5E5">first thing</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> need to do is to</font>

166
00:12:26,639 --> 00:12:32,220
determine<font color="#E5E5E5"> the base address</font><font color="#CCCCCC"> of the</font>

167
00:12:28,980 --> 00:12:38,100
virtual machine<font color="#E5E5E5"> start of the</font><font color="#CCCCCC"> Assumption</font>

168
00:12:32,220 --> 00:12:40,500
interpreter function after that<font color="#E5E5E5"> as it's</font>

169
00:12:38,100 --> 00:12:43,410
both<font color="#E5E5E5"> the instructions at the</font><font color="#CCCCCC"> same time</font>

170
00:12:40,500 --> 00:12:48,620
we have to<font color="#CCCCCC"> match the signatures with the</font>

171
00:12:43,410 --> 00:12:52,500
handlers<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> VL instructions we</font>

172
00:12:48,620 --> 00:12:55,709
actually<font color="#E5E5E5"> realize</font><font color="#CCCCCC"> which collect</font>

173
00:12:52,500 --> 00:12:57,850
signatures from<font color="#CCCCCC"> the developers</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> match</font>

174
00:12:55,709 --> 00:13:01,219
them with the

175
00:12:57,850 --> 00:13:08,060
my makes a table between<font color="#E5E5E5"> the ethanol</font>

176
00:13:01,220 --> 00:13:13,519
numbers and the handlers<font color="#CCCCCC"> of instructions</font>

177
00:13:08,060 --> 00:13:18,170
<font color="#E5E5E5">after</font><font color="#CCCCCC"> that we are passing FP code to a</font>

178
00:13:13,519 --> 00:13:21,439
very simple<font color="#E5E5E5"> I are actually it is</font>

179
00:13:18,170 --> 00:13:23,990
reflected them<font color="#E5E5E5"> shown them so then we are</font>

180
00:13:21,439 --> 00:13:29,449
<font color="#CCCCCC">trying to</font><font color="#E5E5E5"> recover all visualized</font>

181
00:13:23,990 --> 00:13:34,220
functions and control flow graph<font color="#E5E5E5"> that's</font>

182
00:13:29,449 --> 00:13:37,779
<font color="#E5E5E5">how it looks</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> actually the script</font>

183
00:13:34,220 --> 00:13:43,939
<font color="#E5E5E5">for Eden which does that that's vehicle</font>

184
00:13:37,779 --> 00:13:48,290
and we've managed<font color="#CCCCCC"> to restore this</font>

185
00:13:43,939 --> 00:13:53,349
function automatically and all the

186
00:13:48,290 --> 00:13:58,459
registries in<font color="#CCCCCC"> the dish except the</font><font color="#E5E5E5"> r0</font>

187
00:13:53,350 --> 00:14:04,970
replaced<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> machine ones also it has</font>

188
00:13:58,459 --> 00:14:06,888
some<font color="#E5E5E5"> marks which appear because we</font>

189
00:14:04,970 --> 00:14:12,519
restored control flow but we cannot

190
00:14:06,889 --> 00:14:17,720
always do<font color="#E5E5E5"> this</font><font color="#CCCCCC"> I have a</font><font color="#E5E5E5"> question to you</font>

191
00:14:12,519 --> 00:14:21,310
<font color="#E5E5E5">last thing we did to finish with</font><font color="#CCCCCC"> the</font>

192
00:14:17,720 --> 00:14:25,779
<font color="#CCCCCC">machine</font><font color="#E5E5E5"> we did</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> - Eliza</font>

193
00:14:21,310 --> 00:14:30,768
<font color="#E5E5E5">can anybody propose how can we do that</font>

194
00:14:25,779 --> 00:14:34,519
explain how<font color="#CCCCCC"> we set it up can't anyone</font>

195
00:14:30,769 --> 00:14:37,240
suggest how can we do this<font color="#E5E5E5"> can you raise</font>

196
00:14:34,519 --> 00:14:37,240
just handle

197
00:14:42,540 --> 00:14:49,099
sorry no microphone<font color="#E5E5E5"> any other options</font>

198
00:14:49,640 --> 00:15:00,780
price you're absolutely right<font color="#E5E5E5"> exactly</font>

199
00:14:54,180 --> 00:15:04,680
<font color="#CCCCCC">what we did except a small</font><font color="#E5E5E5"> thing we're</font>

200
00:15:00,780 --> 00:15:08,520
trying<font color="#CCCCCC"> to find spoiled</font><font color="#E5E5E5"> virtual registers</font>

201
00:15:04,680 --> 00:15:09,420
and split them<font color="#E5E5E5"> into spoiled blocks if</font>

202
00:15:08,520 --> 00:15:12,990
needed

203
00:15:09,420 --> 00:15:17,610
it's<font color="#E5E5E5"> white often visualized functions</font>

204
00:15:12,990 --> 00:15:21,570
are small mostly they are small and<font color="#CCCCCC"> we</font>

205
00:15:17,610 --> 00:15:24,180
<font color="#CCCCCC">can find a register which is</font><font color="#E5E5E5"> not engaged</font>

206
00:15:21,570 --> 00:15:28,320
<font color="#E5E5E5">in the function and then it becomes the</font>

207
00:15:24,180 --> 00:15:31,170
register we are<font color="#CCCCCC"> zero we cannot find such</font>

208
00:15:28,320 --> 00:15:35,340
<font color="#E5E5E5">a register</font><font color="#CCCCCC"> we're trying</font><font color="#E5E5E5"> to split the</font>

209
00:15:31,170 --> 00:15:37,260
function to such blocks where some

210
00:15:35,340 --> 00:15:41,120
register is not used<font color="#E5E5E5"> and then we are</font>

211
00:15:37,260 --> 00:15:45,710
using<font color="#E5E5E5"> global variable to keep the</font>

212
00:15:41,120 --> 00:15:45,710
register condition between<font color="#CCCCCC"> the blocks so</font>

213
00:15:46,010 --> 00:15:54,990
<font color="#CCCCCC">after we find replacement</font><font color="#E5E5E5"> on vr0 we fix</font>

214
00:15:51,900 --> 00:15:59,939
the disassembled text for compatibility

215
00:15:54,990 --> 00:16:01,950
<font color="#CCCCCC">with the</font><font color="#E5E5E5"> X 32 or 63 Keystone assembler</font>

216
00:15:59,940 --> 00:16:06,120
for<font color="#E5E5E5"> example we convert that because to</font>

217
00:16:01,950 --> 00:16:11,910
native calls pick<font color="#E5E5E5"> X 3 and keep just</font>

218
00:16:06,120 --> 00:16:14,310
machine instructions<font color="#CCCCCC"> after we fix it we</font>

219
00:16:11,910 --> 00:16:16,469
append<font color="#CCCCCC"> a new executive</font><font color="#E5E5E5"> all segments to</font>

220
00:16:14,310 --> 00:16:23,630
<font color="#CCCCCC">RDA in write</font><font color="#E5E5E5"> the code compiled by</font>

221
00:16:16,470 --> 00:16:23,630
<font color="#E5E5E5">histone into the new segment and</font>

222
00:16:24,639 --> 00:16:30,860
performative<font color="#CCCCCC"> generalization</font><font color="#E5E5E5"> step on the</font>

223
00:16:27,649 --> 00:16:34,300
street<font color="#E5E5E5"> all dependent functions or</font>

224
00:16:30,860 --> 00:16:40,490
dependent functions are those<font color="#E5E5E5"> functions</font>

225
00:16:34,300 --> 00:16:43,790
with<font color="#CCCCCC"> indirect reference for indirect</font><font color="#E5E5E5"> we</font>

226
00:16:40,490 --> 00:16:47,660
cannot make it<font color="#E5E5E5"> automatic also there is a</font>

227
00:16:43,790 --> 00:16:54,740
big but<font color="#CCCCCC"> very pleasant</font><font color="#E5E5E5"> thing is the fact</font>

228
00:16:47,660 --> 00:16:58,850
<font color="#E5E5E5">that some</font><font color="#CCCCCC"> of instructions are awaiting</font>

229
00:16:54,740 --> 00:17:02,089
for<font color="#CCCCCC"> RBA</font><font color="#E5E5E5"> and in the moment automatic</font>

230
00:16:58,850 --> 00:17:04,400
passing we cannot fix them<font color="#E5E5E5"> we can but</font>

231
00:17:02,089 --> 00:17:08,380
<font color="#CCCCCC">it's a small overhead</font><font color="#E5E5E5"> start so many we</font>

232
00:17:04,400 --> 00:17:15,409
can patch it manually but there are some

233
00:17:08,380 --> 00:17:19,459
that's the de<font color="#E5E5E5"> virtualization example on</font>

234
00:17:15,409 --> 00:17:26,870
one hand<font color="#CCCCCC"> we see the virtualized</font>

235
00:17:19,459 --> 00:17:33,679
virtualized script for then you<font color="#E5E5E5"> can see</font>

236
00:17:26,869 --> 00:17:36,010
this assembler virtualized you can take

237
00:17:33,679 --> 00:17:36,010
a look

238
00:17:43,590 --> 00:17:48,790
I'm done with DVR now I give a floor<font color="#E5E5E5"> to</font>

239
00:17:48,250 --> 00:17:54,910
Nikita

240
00:17:48,790 --> 00:18:01,720
<font color="#E5E5E5">how do like DVR cool right</font><font color="#CCCCCC"> so let's talk</font>

241
00:17:54,910 --> 00:18:08,500
about other analysis except we<font color="#CCCCCC"> are I</font>

242
00:18:01,720 --> 00:18:12,610
thought we have in the first would be<font color="#E5E5E5"> an</font>

243
00:18:08,500 --> 00:18:16,360
<font color="#CCCCCC">T hook methods is that we take the set</font>

244
00:18:12,610 --> 00:18:19,419
of dll's<font color="#E5E5E5"> which is reflectively loaded</font>

245
00:18:16,360 --> 00:18:28,510
from<font color="#E5E5E5"> the system folder</font><font color="#CCCCCC"> and this contains</font>

246
00:18:19,420 --> 00:18:32,850
every API used so we do<font color="#E5E5E5"> this to avoid</font>

247
00:18:28,510 --> 00:18:37,120
<font color="#E5E5E5">any hooks that have endpoint solutions</font>

248
00:18:32,850 --> 00:18:40,510
and<font color="#CCCCCC"> using this hooks</font><font color="#E5E5E5"> they identify any</font>

249
00:18:37,120 --> 00:18:45,850
behavioral patterns<font color="#E5E5E5"> and they can</font>

250
00:18:40,510 --> 00:18:47,500
prohibit malware to be executed that's

251
00:18:45,850 --> 00:18:58,169
<font color="#E5E5E5">why there are</font><font color="#CCCCCC"> no</font><font color="#E5E5E5"> hooks everything is</font>

252
00:18:47,500 --> 00:19:00,970
fine we can make it done as far as the

253
00:18:58,170 --> 00:19:05,650
<font color="#E5E5E5">entire virtual machine things are</font>

254
00:19:00,970 --> 00:19:09,190
concerned here we have checks the

255
00:19:05,650 --> 00:19:11,130
<font color="#E5E5E5">manufacturers IDs of</font><font color="#CCCCCC"> devices existing in</font>

256
00:19:09,190 --> 00:19:14,830
the system

257
00:19:11,130 --> 00:19:18,400
<font color="#E5E5E5">I'm sorry for saying we it's not rebut</font>

258
00:19:14,830 --> 00:19:21,820
malware inspire gets a list of all the

259
00:19:18,400 --> 00:19:25,720
devices<font color="#E5E5E5"> get the first eight symbols from</font>

260
00:19:21,820 --> 00:19:35,379
every device<font color="#E5E5E5"> we get the hash and</font><font color="#CCCCCC"> compile</font>

261
00:19:25,720 --> 00:19:40,950
<font color="#CCCCCC">compare with the values and we compare</font>

262
00:19:35,380 --> 00:19:40,950
with<font color="#E5E5E5"> three vendors</font><font color="#CCCCCC"> VMS</font><font color="#E5E5E5"> anti sandbox</font>

263
00:19:41,770 --> 00:19:49,430
checks if<font color="#CCCCCC"> the image path of the process</font>

264
00:19:44,720 --> 00:19:55,370
contains<font color="#E5E5E5"> for example an md5 hash or file</font>

265
00:19:49,430 --> 00:19:57,650
as a substring also empty sandbox checks

266
00:19:55,370 --> 00:20:02,199
if the alphabet of<font color="#E5E5E5"> the image path is</font>

267
00:19:57,650 --> 00:20:07,540
equal<font color="#CCCCCC"> to the</font><font color="#E5E5E5"> X additional alphabet</font>

268
00:20:02,200 --> 00:20:07,540
because<font color="#E5E5E5"> the deck directors of hash fast</font>

269
00:20:07,930 --> 00:20:19,570
and then compares the md5<font color="#E5E5E5"> of parent</font>

270
00:20:12,110 --> 00:20:26,540
<font color="#CCCCCC">processes name to hard-coded values also</font>

271
00:20:19,570 --> 00:20:32,750
<font color="#CCCCCC">we see whether md5 hash same logic with</font>

272
00:20:26,540 --> 00:20:38,649
boxes<font color="#E5E5E5"> and take md5 hash sorry</font>

273
00:20:32,750 --> 00:20:42,710
not rebut inspired again we take hash of

274
00:20:38,650 --> 00:20:49,190
the parent<font color="#E5E5E5"> processes name and compared</font>

275
00:20:42,710 --> 00:20:54,850
with hard-coded values and to<font color="#E5E5E5"> determine</font>

276
00:20:49,190 --> 00:20:54,850
what parents process inspire would say

277
00:20:56,140 --> 00:21:05,060
in<font color="#E5E5E5"> addition to</font><font color="#CCCCCC"> the above-mentioned ways</font>

278
00:20:59,830 --> 00:21:11,600
<font color="#E5E5E5">we check the registry key we</font><font color="#CCCCCC"> need</font><font color="#E5E5E5"> to say</font>

279
00:21:05,060 --> 00:21:17,540
that these<font color="#E5E5E5"> values machine greet digital</font>

280
00:21:11,600 --> 00:21:20,629
product<font color="#CCCCCC"> LD and system buyers date well</font>

281
00:21:17,540 --> 00:21:23,420
they come across<font color="#CCCCCC"> older</font><font color="#E5E5E5"> versions are</font>

282
00:21:20,630 --> 00:21:29,930
inspired<font color="#CCCCCC"> to understand what are the</font>

283
00:21:23,420 --> 00:21:34,970
<font color="#CCCCCC">environments we have</font><font color="#E5E5E5"> the values in this</font>

284
00:21:29,930 --> 00:21:39,310
case<font color="#E5E5E5"> we couldn't then let's go to it and</font>

285
00:21:34,970 --> 00:21:45,430
<font color="#CCCCCC">tidy but the first way is used is the</font>

286
00:21:39,310 --> 00:21:48,230
patch in<font color="#E5E5E5"> 3</font><font color="#CCCCCC"> & 2 nope everything that</font><font color="#E5E5E5"> the</font>

287
00:21:45,430 --> 00:21:50,470
buggers want to say we<font color="#E5E5E5"> want to put</font>

288
00:21:48,230 --> 00:21:52,540
<font color="#CCCCCC">breakpoint whatever</font>

289
00:21:50,470 --> 00:21:55,600
don't break points possible<font color="#E5E5E5"> because it's</font>

290
00:21:52,540 --> 00:21:56,980
going<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> all replaced too not nothing</font>

291
00:21:55,600 --> 00:22:04,169
is going<font color="#E5E5E5"> to be stopped</font>

292
00:21:56,980 --> 00:22:04,170
and<font color="#CCCCCC"> other methods are</font><font color="#E5E5E5"> realized using</font>

293
00:22:05,040 --> 00:22:16,840
empty set information thread and antique

294
00:22:08,140 --> 00:22:19,780
<font color="#CCCCCC">clear information</font><font color="#E5E5E5"> process it means that</font>

295
00:22:16,840 --> 00:22:23,709
the debugger<font color="#E5E5E5"> stops getting any events</font>

296
00:22:19,780 --> 00:22:27,250
from applications in in particular<font color="#CCCCCC"> the</font>

297
00:22:23,710 --> 00:22:35,910
end<font color="#E5E5E5"> event which spoils the debugging a</font>

298
00:22:27,250 --> 00:22:38,620
lot with info<font color="#CCCCCC"> class seven this parameter</font>

299
00:22:35,910 --> 00:22:40,120
<font color="#E5E5E5">finds out what I did</font><font color="#CCCCCC"> back fault</font><font color="#E5E5E5"> is open</font>

300
00:22:38,620 --> 00:22:42,610
for this<font color="#E5E5E5"> process a lot which means that</font>

301
00:22:40,120 --> 00:22:47,530
the process is being debugged<font color="#E5E5E5"> and</font>

302
00:22:42,610 --> 00:22:54,540
finally processing for class<font color="#E5E5E5"> one e is a</font>

303
00:22:47,530 --> 00:22:58,899
<font color="#CCCCCC">parameter which</font><font color="#E5E5E5"> is responsible for its</font>

304
00:22:54,540 --> 00:23:02,830
<font color="#CCCCCC">called processed about handle and</font>

305
00:22:58,900 --> 00:23:11,320
starting from<font color="#E5E5E5"> the system creates the</font>

306
00:23:02,830 --> 00:23:15,820
object with<font color="#CCCCCC"> the descriptor 1e you can</font>

307
00:23:11,320 --> 00:23:19,620
get it and if the function<font color="#E5E5E5"> is there we</font>

308
00:23:15,820 --> 00:23:23,710
can see<font color="#CCCCCC"> that this is being debugged</font>

309
00:23:19,620 --> 00:23:29,379
<font color="#E5E5E5">interesting fact if we discover anything</font>

310
00:23:23,710 --> 00:23:35,620
of that<font color="#CCCCCC"> if the check is not passed to</font>

311
00:23:29,380 --> 00:23:39,240
<font color="#E5E5E5">jump on to random address which the</font>

312
00:23:35,620 --> 00:23:39,239
<font color="#E5E5E5">intelligence operation and so</font>

313
00:23:40,160 --> 00:23:46,780
the viewers about anti virus detection

314
00:23:48,580 --> 00:23:55,490
started at the<font color="#CCCCCC"> endpoint</font><font color="#E5E5E5"> they try to find</font>

315
00:23:52,700 --> 00:23:59,539
specific<font color="#E5E5E5"> names of the processes and</font>

316
00:23:55,490 --> 00:24:02,870
specific driver names<font color="#CCCCCC"> module names</font><font color="#E5E5E5"> get</font>

317
00:23:59,539 --> 00:24:05,990
hashes and compared<font color="#E5E5E5"> with the</font><font color="#CCCCCC"> hard core</font>

318
00:24:02,870 --> 00:24:08,689
values<font color="#E5E5E5"> what</font><font color="#CCCCCC"> vendors products drivers</font>

319
00:24:05,990 --> 00:24:12,010
processes are there you<font color="#E5E5E5"> can say in a</font>

320
00:24:08,690 --> 00:24:19,419
slide and you<font color="#E5E5E5"> see</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot of different</font>

321
00:24:12,010 --> 00:24:19,419
things only<font color="#CCCCCC"> these yes</font>

322
00:24:31,830 --> 00:24:40,570
well it works with depending on that

323
00:24:36,059 --> 00:24:45,789
<font color="#E5E5E5">from the following stages you</font><font color="#CCCCCC"> send some</font>

324
00:24:40,570 --> 00:24:48,129
<font color="#E5E5E5">flags</font><font color="#CCCCCC"> some variables are used in the</font>

325
00:24:45,789 --> 00:24:52,539
following<font color="#E5E5E5"> modules the results of this</font>

326
00:24:48,129 --> 00:24:54,969
check is like a bit vector<font color="#E5E5E5"> and it's used</font>

327
00:24:52,539 --> 00:25:05,919
in<font color="#E5E5E5"> the following modules like yeah the</font>

328
00:24:54,970 --> 00:25:10,809
<font color="#E5E5E5">behaviors changes please talk</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

329
00:25:05,919 --> 00:25:14,369
microphone<font color="#CCCCCC"> I wanted</font><font color="#E5E5E5"> to ask the behavior</font>

330
00:25:10,809 --> 00:25:19,139
is changing correct yes

331
00:25:14,369 --> 00:25:22,889
trying to avoid<font color="#CCCCCC"> a dynamic signatures</font><font color="#E5E5E5"> yes</font>

332
00:25:19,139 --> 00:25:27,850
<font color="#E5E5E5">later and I'll have an example of what</font>

333
00:25:22,889 --> 00:25:31,719
was found<font color="#CCCCCC"> I apologize</font><font color="#E5E5E5"> let's talk about</font>

334
00:25:27,850 --> 00:25:35,918
<font color="#E5E5E5">the stages</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> attacking</font><font color="#CCCCCC"> inspire there</font>

335
00:25:31,720 --> 00:25:38,710
are many stages of unpacking as we can

336
00:25:35,919 --> 00:25:41,529
see in<font color="#CCCCCC"> the</font><font color="#E5E5E5"> scheme it consists of</font><font color="#CCCCCC"> five</font>

337
00:25:38,710 --> 00:25:44,859
stages stage<font color="#E5E5E5"> number one there's a drop</font>

338
00:25:41,529 --> 00:25:48,340
pass that falls into<font color="#CCCCCC"> an machine Stage</font>

339
00:25:44,859 --> 00:25:51,460
<font color="#E5E5E5">two is architecture-specific module</font>

340
00:25:48,340 --> 00:25:55,178
which is unpacking<font color="#E5E5E5"> of the following step</font>

341
00:25:51,460 --> 00:25:58,859
which is the<font color="#E5E5E5"> persistence module step</font>

342
00:25:55,179 --> 00:26:03,570
three is the persistence module itself

343
00:25:58,859 --> 00:26:06,970
step<font color="#E5E5E5"> four actually as a special module</font>

344
00:26:03,570 --> 00:26:16,418
which is searching for<font color="#CCCCCC"> the loader</font><font color="#E5E5E5"> of the</font>

345
00:26:06,970 --> 00:26:18,369
main<font color="#CCCCCC"> Troyan already depending on say</font><font color="#E5E5E5"> OS</font>

346
00:26:16,419 --> 00:26:22,960
and the rights<font color="#CCCCCC"> that we have</font><font color="#E5E5E5"> a stage</font><font color="#CCCCCC"> step</font>

347
00:26:18,369 --> 00:26:25,988
5 I'm taking<font color="#CCCCCC"> mentorians</font><font color="#E5E5E5"> main</font><font color="#CCCCCC"> tree on is</font>

348
00:26:22,960 --> 00:26:29,669
never<font color="#E5E5E5"> stored on the disk and finally</font>

349
00:26:25,989 --> 00:26:29,669
step<font color="#CCCCCC"> six main tree on</font>

350
00:26:32,070 --> 00:26:41,070
let's take a look<font color="#E5E5E5"> first stage all</font>

351
00:26:37,550 --> 00:26:43,139
described by me and<font color="#E5E5E5"> Sergei and analysis</font>

352
00:26:41,070 --> 00:26:48,120
procedures are performed at that stage

353
00:26:43,140 --> 00:26:50,730
then also we have<font color="#E5E5E5"> UAC bypass and methods</font>

354
00:26:48,120 --> 00:26:55,229
<font color="#CCCCCC">used is similar to the one described</font><font color="#E5E5E5"> by</font>

355
00:26:50,730 --> 00:26:59,370
James<font color="#E5E5E5"> for show I'll tell you a bit later</font>

356
00:26:55,230 --> 00:27:01,910
<font color="#CCCCCC">about</font><font color="#E5E5E5"> it as I said before the second</font>

357
00:26:59,370 --> 00:27:06,989
stage is<font color="#E5E5E5"> architecture-specific</font>

358
00:27:01,910 --> 00:27:11,460
it would define where it is launched and

359
00:27:06,990 --> 00:27:17,550
if it is launched under<font color="#E5E5E5"> 64-bit is going</font>

360
00:27:11,460 --> 00:27:22,920
to be used it<font color="#CCCCCC"> will use heaven's gates</font>

361
00:27:17,550 --> 00:27:25,139
for running next<font color="#CCCCCC"> stage if needed it's</font>

362
00:27:22,920 --> 00:27:29,070
going to be interpreted<font color="#CCCCCC"> and perform this</font>

363
00:27:25,140 --> 00:27:32,720
code<font color="#E5E5E5"> 64 let's have a closer look at you</font>

364
00:27:29,070 --> 00:27:38,010
<font color="#E5E5E5">AC bypass and below you see a link to</font>

365
00:27:32,720 --> 00:27:44,670
<font color="#CCCCCC">the</font><font color="#E5E5E5"> James for short work</font><font color="#CCCCCC"> let me shortly</font>

366
00:27:38,010 --> 00:27:48,810
discuss<font color="#E5E5E5"> his method UAC</font><font color="#CCCCCC"> approach about</font>

367
00:27:44,670 --> 00:27:52,550
<font color="#CCCCCC">two bucks but number one is to write</font>

368
00:27:48,810 --> 00:27:56,190
<font color="#CCCCCC">quite a limited</font><font color="#E5E5E5"> information as you see</font>

369
00:27:52,550 --> 00:28:00,300
quite a little<font color="#E5E5E5"> information is not in</font><font color="#CCCCCC"> a</font>

370
00:27:56,190 --> 00:28:06,720
read not<font color="#E5E5E5"> write but an</font><font color="#CCCCCC"> executor is like</font>

371
00:28:00,300 --> 00:28:10,730
this this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> all because of</font><font color="#E5E5E5"> the</font>

372
00:28:06,720 --> 00:28:14,400
mandatory<font color="#CCCCCC"> il policy which by default</font>

373
00:28:10,730 --> 00:28:17,910
parameters which by default is<font color="#CCCCCC"> no right</font>

374
00:28:14,400 --> 00:28:19,680
<font color="#E5E5E5">up no read up this is what before</font>

375
00:28:17,910 --> 00:28:22,920
checking<font color="#CCCCCC"> your tokens and</font><font color="#E5E5E5"> duxelles</font>

376
00:28:19,680 --> 00:28:30,060
if you don't have the rights we will not

377
00:28:22,920 --> 00:28:35,070
<font color="#E5E5E5">even reach this check but as a Microsoft</font>

378
00:28:30,060 --> 00:28:37,649
they decided it's<font color="#E5E5E5"> not to be good at the</font>

379
00:28:35,070 --> 00:28:41,730
<font color="#CCCCCC">regular process will not</font><font color="#E5E5E5"> be able to get</font>

380
00:28:37,650 --> 00:28:45,300
a name<font color="#E5E5E5"> or more privileged process and so</font>

381
00:28:41,730 --> 00:28:47,160
<font color="#E5E5E5">on that's why instead of acquiring</font>

382
00:28:45,300 --> 00:28:48,830
information right which allows you<font color="#E5E5E5"> to</font>

383
00:28:47,160 --> 00:28:53,460
<font color="#E5E5E5">get a lot of</font><font color="#CCCCCC"> information by</font><font color="#E5E5E5"> the process</font>

384
00:28:48,830 --> 00:28:57,449
information<font color="#E5E5E5"> tokens etc it made for</font>

385
00:28:53,460 --> 00:29:00,330
limited<font color="#CCCCCC"> information which is very down</font>

386
00:28:57,450 --> 00:29:02,100
set of various things<font color="#E5E5E5"> and put it in</font>

387
00:29:00,330 --> 00:29:06,290
execute because<font color="#E5E5E5"> if there's no write up</font>

388
00:29:02,100 --> 00:29:12,480
move it up<font color="#E5E5E5"> you can say that it</font><font color="#CCCCCC"> is very</font>

389
00:29:06,290 --> 00:29:15,080
legal<font color="#E5E5E5"> leverage sorry legal solution so</font>

390
00:29:12,480 --> 00:29:19,440
how it is implement it it is<font color="#CCCCCC"> implemented</font>

391
00:29:15,080 --> 00:29:23,550
with<font color="#CCCCCC"> a special</font><font color="#E5E5E5"> lagune session which you</font>

392
00:29:19,440 --> 00:29:28,170
can see at the right<font color="#E5E5E5"> hand</font><font color="#CCCCCC"> side there are</font>

393
00:29:23,550 --> 00:29:30,330
<font color="#E5E5E5">two pictures</font><font color="#CCCCCC"> that one is default tackle</font>

394
00:29:28,170 --> 00:29:32,760
inside<font color="#E5E5E5"> the access token of normal user</font>

395
00:29:30,330 --> 00:29:35,820
and<font color="#CCCCCC"> second admin user</font><font color="#E5E5E5"> and we see that</font>

396
00:29:32,760 --> 00:29:39,120
session<font color="#E5E5E5"> with the generic execute and</font>

397
00:29:35,820 --> 00:29:41,580
generic<font color="#E5E5E5"> read as you can understand it</font>

398
00:29:39,120 --> 00:29:43,679
allows you<font color="#CCCCCC"> to make</font><font color="#E5E5E5"> inquire limited</font>

399
00:29:41,580 --> 00:29:45,360
information<font color="#E5E5E5"> so</font><font color="#CCCCCC"> bug quite a little bit</font>

400
00:29:43,680 --> 00:29:50,790
information<font color="#E5E5E5"> which gives</font><font color="#CCCCCC"> a very limited</font>

401
00:29:45,360 --> 00:30:02,520
<font color="#E5E5E5">it gives you all information it happens</font>

402
00:29:50,790 --> 00:30:07,200
at Windows 7 Vista<font color="#E5E5E5"> 88.1 specific</font>

403
00:30:02,520 --> 00:30:10,620
sequence of steps to get the right right

404
00:30:07,200 --> 00:30:14,310
<font color="#E5E5E5">first bug realized in the very first</font>

405
00:30:10,620 --> 00:30:15,870
<font color="#CCCCCC">blockage the open process tokens with</font>

406
00:30:14,310 --> 00:30:18,750
quite limited information<font color="#E5E5E5"> we got the</font>

407
00:30:15,870 --> 00:30:21,919
<font color="#CCCCCC">Polish token but we can't write</font><font color="#E5E5E5"> to it</font>

408
00:30:18,750 --> 00:30:25,800
because we have treat we have<font color="#E5E5E5"> execute</font>

409
00:30:21,920 --> 00:30:31,860
however in the right<font color="#E5E5E5"> read group we have</font>

410
00:30:25,800 --> 00:30:39,120
impersonate token<font color="#E5E5E5"> but what do we want we</font>

411
00:30:31,860 --> 00:30:44,010
want that the integrity<font color="#E5E5E5"> level check</font>

412
00:30:39,120 --> 00:30:48,449
<font color="#E5E5E5">would go and to make sure</font><font color="#CCCCCC"> it goes</font><font color="#E5E5E5"> you</font>

413
00:30:44,010 --> 00:30:51,600
<font color="#CCCCCC">notice the</font><font color="#E5E5E5"> left hand picture is the</font>

414
00:30:48,450 --> 00:30:53,850
<font color="#E5E5E5">shows the process of a current</font>

415
00:30:51,600 --> 00:30:55,639
verification<font color="#E5E5E5"> whether we can impersonate</font>

416
00:30:53,850 --> 00:30:57,469
<font color="#E5E5E5">or not</font>

417
00:30:55,640 --> 00:31:00,230
having<font color="#CCCCCC"> good token</font><font color="#E5E5E5"> and we again and we</font>

418
00:30:57,470 --> 00:31:04,160
have it because of the bug<font color="#CCCCCC"> and in this</font>

419
00:31:00,230 --> 00:31:08,480
verification<font color="#E5E5E5"> the small vulnerability if</font>

420
00:31:04,160 --> 00:31:13,070
we<font color="#CCCCCC"> before hands have got a privileged</font>

421
00:31:08,480 --> 00:31:18,620
token with lots of permissions if we

422
00:31:13,070 --> 00:31:23,750
make<font color="#CCCCCC"> it</font><font color="#E5E5E5"> medium level if we make its</font>

423
00:31:18,620 --> 00:31:28,070
<font color="#E5E5E5">integrity level equal to that our own</font>

424
00:31:23,750 --> 00:31:36,620
process that's<font color="#E5E5E5"> trying to impersonate so</font>

425
00:31:28,070 --> 00:31:38,659
this test will pass so we need to<font color="#E5E5E5"> reduce</font>

426
00:31:36,620 --> 00:31:41,870
this level and<font color="#E5E5E5"> we</font><font color="#CCCCCC"> don't have write</font><font color="#E5E5E5"> write</font>

427
00:31:38,660 --> 00:31:44,150
permissions<font color="#E5E5E5"> but</font><font color="#CCCCCC"> let's duplicate</font><font color="#E5E5E5"> read</font>

428
00:31:41,870 --> 00:31:48,020
allows us to duplicate the tokens

429
00:31:44,150 --> 00:31:50,000
obtained<font color="#E5E5E5"> and so that we can now write it</font>

430
00:31:48,020 --> 00:31:53,000
<font color="#E5E5E5">again so we change integrity level</font>

431
00:31:50,000 --> 00:31:55,520
<font color="#CCCCCC">returning</font><font color="#E5E5E5"> to impersonate and even though</font>

432
00:31:53,000 --> 00:31:58,610
<font color="#E5E5E5">token is not high integrity but on the</font>

433
00:31:55,520 --> 00:32:01,190
medium integrity<font color="#E5E5E5"> we can do 99% of</font>

434
00:31:58,610 --> 00:32:03,590
<font color="#E5E5E5">everything that high integrity can do</font>

435
00:32:01,190 --> 00:32:08,510
<font color="#E5E5E5">which as you understand these more</font><font color="#CCCCCC"> than</font>

436
00:32:03,590 --> 00:32:10,939
<font color="#E5E5E5">enough I said</font><font color="#CCCCCC"> there are two plugs</font><font color="#E5E5E5"> there</font>

437
00:32:08,510 --> 00:32:15,970
are two indeed because<font color="#CCCCCC"> in Windows 10</font><font color="#E5E5E5"> it</font>

438
00:32:10,940 --> 00:32:18,260
stopped working<font color="#E5E5E5"> as you can see</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> yep</font>

439
00:32:15,970 --> 00:32:23,210
have the<font color="#CCCCCC"> bugs been</font><font color="#E5E5E5"> closed already yes</font>

440
00:32:18,260 --> 00:32:26,510
yes<font color="#CCCCCC"> there could you</font><font color="#E5E5E5"> use the microphone</font>

441
00:32:23,210 --> 00:32:28,669
please<font color="#E5E5E5"> these bugs so that you</font><font color="#CCCCCC"> talk about</font>

442
00:32:26,510 --> 00:32:29,390
it's clear that they stopped working<font color="#E5E5E5"> in</font>

443
00:32:28,669 --> 00:32:32,720
Windows<font color="#E5E5E5"> 10</font>

444
00:32:29,390 --> 00:32:36,290
have they been closed after<font color="#E5E5E5"> they the</font>

445
00:32:32,720 --> 00:32:38,809
face by was detected no no no so they

446
00:32:36,290 --> 00:32:42,678
were closed<font color="#CCCCCC"> geo while it was operating</font>

447
00:32:38,809 --> 00:32:45,470
<font color="#E5E5E5">you yes while it was operating also</font>

448
00:32:42,679 --> 00:32:51,320
<font color="#E5E5E5">because also did you play the role</font><font color="#CCCCCC"> in</font>

449
00:32:45,470 --> 00:32:53,000
finding<font color="#E5E5E5"> it</font><font color="#CCCCCC"> so did you use this way</font><font color="#E5E5E5"> of</font>

450
00:32:51,320 --> 00:32:57,799
bypassing<font color="#E5E5E5"> our</font><font color="#CCCCCC"> other versions of</font><font color="#E5E5E5"> things</font>

451
00:32:53,000 --> 00:33:01,880
<font color="#E5E5E5">by no no other software so basically the</font>

452
00:32:57,799 --> 00:33:03,010
<font color="#CCCCCC">question is is just</font><font color="#E5E5E5"> so you didn't do</font>

453
00:33:01,880 --> 00:33:08,120
<font color="#CCCCCC">that No</font>

454
00:33:03,010 --> 00:33:09,270
so for this method when investigating<font color="#E5E5E5"> we</font>

455
00:33:08,120 --> 00:33:12,629
came across it

456
00:33:09,270 --> 00:33:15,870
when investigating<font color="#CCCCCC"> finis play</font><font color="#E5E5E5"> as you can</font>

457
00:33:12,630 --> 00:33:19,140
see here the<font color="#E5E5E5"> sequence of verification</font>

458
00:33:15,870 --> 00:33:23,989
whether we can impersonate<font color="#E5E5E5"> the captured</font>

459
00:33:19,140 --> 00:33:29,850
token has<font color="#E5E5E5"> changed a bit and that's why</font>

460
00:33:23,990 --> 00:33:32,400
it all stopped working but we can<font color="#CCCCCC"> just</font>

461
00:33:29,850 --> 00:33:36,750
make another iteration how can it be

462
00:33:32,400 --> 00:33:39,480
done<font color="#E5E5E5"> we take</font><font color="#CCCCCC"> the token that very token</font>

463
00:33:36,750 --> 00:33:42,120
<font color="#E5E5E5">so we've captured it but can't do</font>

464
00:33:39,480 --> 00:33:44,220
anything with it<font color="#CCCCCC"> so what we can do is we</font>

465
00:33:42,120 --> 00:33:46,949
create<font color="#CCCCCC"> a</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> creative</font><font color="#E5E5E5"> process using the</font>

466
00:33:44,220 --> 00:33:52,289
<font color="#E5E5E5">Emmy</font><font color="#CCCCCC"> for instance we can create a</font>

467
00:33:46,950 --> 00:33:55,640
process<font color="#E5E5E5"> using</font><font color="#CCCCCC"> vm e which will allow us</font>

468
00:33:52,289 --> 00:33:58,970
give us a<font color="#CCCCCC"> system service so that</font><font color="#E5E5E5"> will</font>

469
00:33:55,640 --> 00:34:02,789
<font color="#E5E5E5">work in an unrestricted logon surface</font>

470
00:33:58,970 --> 00:34:05,309
session I'm sorry and then we can steal

471
00:34:02,789 --> 00:34:07,559
<font color="#E5E5E5">the token again and do</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> same thing to</font>

472
00:34:05,309 --> 00:34:12,119
reduce impersonate and so on and so

473
00:34:07,559 --> 00:34:14,609
forth<font color="#CCCCCC"> you can see</font><font color="#E5E5E5"> the unpacking stage to</font>

474
00:34:12,119 --> 00:34:17,580
process based on<font color="#E5E5E5"> the resources of the</font>

475
00:34:14,609 --> 00:34:20,339
first one is so encrypted through the

476
00:34:17,580 --> 00:34:27,440
rc4 algorithm the key is different for

477
00:34:20,339 --> 00:34:30,960
different stages<font color="#CCCCCC"> as you can see for the</font>

478
00:34:27,440 --> 00:34:33,210
64-bit<font color="#CCCCCC"> version</font><font color="#E5E5E5"> it applies to the 64-bit</font>

479
00:34:30,960 --> 00:34:41,280
version if you spy decides that we need

480
00:34:33,210 --> 00:34:45,869
to get executed<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the x64 it should be</font>

481
00:34:41,280 --> 00:34:49,109
<font color="#E5E5E5">a key</font><font color="#CCCCCC"> timestamp</font><font color="#E5E5E5"> four times five hundred</font>

482
00:34:45,869 --> 00:34:52,710
thirty-two bits time to the stage to

483
00:34:49,109 --> 00:34:57,359
stage two starts with self decryption

484
00:34:52,710 --> 00:35:00,440
and<font color="#E5E5E5"> unpacking the persistence module it</font>

485
00:34:57,359 --> 00:35:03,089
<font color="#E5E5E5">will then be injected in Explorer eggs a</font>

486
00:35:00,440 --> 00:35:12,420
control will also be passed to<font color="#E5E5E5"> the</font>

487
00:35:03,089 --> 00:35:15,029
custom<font color="#E5E5E5"> loader the self encryption at</font>

488
00:35:12,420 --> 00:35:17,430
stage two the algorithm<font color="#CCCCCC"> that we</font><font color="#E5E5E5"> call</font>

489
00:35:15,030 --> 00:35:19,950
classic decrypt during our analysis

490
00:35:17,430 --> 00:35:23,009
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> it's a</font><font color="#E5E5E5"> four</font><font color="#CCCCCC"> byte source with a</font>

491
00:35:19,950 --> 00:35:26,098
key cyclically shifting

492
00:35:23,010 --> 00:35:29,849
by one<font color="#E5E5E5"> position at each transaction</font><font color="#CCCCCC"> each</font>

493
00:35:26,099 --> 00:35:31,799
operation<font color="#CCCCCC"> here you can see</font><font color="#E5E5E5"> the</font>

494
00:35:29,849 --> 00:35:37,380
decryption<font color="#E5E5E5"> and passing the control</font><font color="#CCCCCC"> to</font>

495
00:35:31,799 --> 00:35:41,400
<font color="#E5E5E5">the custom loader next you have the</font>

496
00:35:37,380 --> 00:35:44,579
<font color="#CCCCCC">persistence module at first its</font><font color="#E5E5E5"> they an</font>

497
00:35:41,400 --> 00:35:50,180
additional<font color="#E5E5E5"> privilege check privileges</font>

498
00:35:44,579 --> 00:35:52,430
check happens<font color="#E5E5E5"> for Windows</font><font color="#CCCCCC"> Vista</font>

499
00:35:50,180 --> 00:35:55,770
<font color="#CCCCCC">integrity</font><font color="#E5E5E5"> level is checked</font>

500
00:35:52,430 --> 00:35:58,859
additionally then<font color="#CCCCCC"> timestamp</font><font color="#E5E5E5"> constants</font>

501
00:35:55,770 --> 00:36:04,279
are prepared<font color="#E5E5E5"> that</font><font color="#CCCCCC"> are made for</font><font color="#E5E5E5"> a year</font>

502
00:35:58,859 --> 00:36:07,259
that's a known technique of timestamp

503
00:36:04,279 --> 00:36:10,920
also a<font color="#E5E5E5"> working directory for the main</font>

504
00:36:07,260 --> 00:36:13,170
Trojan is created configuration files

505
00:36:10,920 --> 00:36:15,529
are encrypted and<font color="#E5E5E5"> dropped</font><font color="#CCCCCC"> stopped</font><font color="#E5E5E5"> and</font>

506
00:36:13,170 --> 00:36:19,170
depending on the level of privileges

507
00:36:15,529 --> 00:36:22,799
<font color="#E5E5E5">privilege level the</font><font color="#CCCCCC"> offense pipe I was</font>

508
00:36:19,170 --> 00:36:26,160
trying to<font color="#E5E5E5"> obtain persistence on machine</font>

509
00:36:22,799 --> 00:36:30,440
will be achieved<font color="#E5E5E5"> either via the registry</font>

510
00:36:26,160 --> 00:36:35,190
or using a service also system logs<font color="#CCCCCC"> a</font>

511
00:36:30,440 --> 00:36:43,529
<font color="#CCCCCC">cleansed SEC at the bottom right on the</font>

512
00:36:35,190 --> 00:36:47,279
slides<font color="#CCCCCC"> and the main</font><font color="#E5E5E5"> Trojan loader is</font>

513
00:36:43,529 --> 00:36:50,940
dropped<font color="#E5E5E5"> and the alleles are dropped for</font>

514
00:36:47,279 --> 00:36:54,029
side loading<font color="#E5E5E5"> if needed</font><font color="#CCCCCC"> I'll explain</font><font color="#E5E5E5"> it</font>

515
00:36:50,940 --> 00:37:00,049
in<font color="#CCCCCC"> more detail a little</font><font color="#E5E5E5"> bit later here</font>

516
00:36:54,029 --> 00:37:03,329
you can see one of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> working director</font>

517
00:37:00,049 --> 00:37:04,799
<font color="#E5E5E5">contents</font><font color="#CCCCCC"> I'd like to know that the</font>

518
00:37:03,329 --> 00:37:07,049
arguments passing from<font color="#E5E5E5"> stage</font><font color="#CCCCCC"> 1 to stage</font>

519
00:37:04,799 --> 00:37:13,259
2 depending on the persistence module

520
00:37:07,049 --> 00:37:16,890
depend on the detectors<font color="#CCCCCC"> back to the</font>

521
00:37:13,260 --> 00:37:18,420
question<font color="#E5E5E5"> of why this verification</font><font color="#CCCCCC"> ii can</font>

522
00:37:16,890 --> 00:37:19,799
different<font color="#E5E5E5"> can</font><font color="#CCCCCC"> be different we</font><font color="#E5E5E5"> can drop</font>

523
00:37:18,420 --> 00:37:22,349
<font color="#E5E5E5">it into this folder</font>

524
00:37:19,799 --> 00:37:23,849
if there are no anti viruses and

525
00:37:22,349 --> 00:37:26,779
<font color="#E5E5E5">everything</font><font color="#CCCCCC"> okay all we can</font><font color="#E5E5E5"> drop it into</font>

526
00:37:23,849 --> 00:37:30,960
the temp<font color="#CCCCCC"> folder under a different name</font>

527
00:37:26,779 --> 00:37:35,220
<font color="#CCCCCC">to corrupt a file extension there for</font>

528
00:37:30,960 --> 00:37:38,910
instance<font color="#E5E5E5"> let's copy copy them and win</font>

529
00:37:35,220 --> 00:37:43,169
there so this kind of things that<font color="#CCCCCC"> follow</font>

530
00:37:38,910 --> 00:37:46,290
from<font color="#E5E5E5"> I bend on the antivirus in the tech</font>

531
00:37:43,170 --> 00:37:48,450
<font color="#CCCCCC">detect detection activities that</font>

532
00:37:46,290 --> 00:37:50,220
happened before additional<font color="#E5E5E5"> privilege</font>

533
00:37:48,450 --> 00:37:55,259
shake and the presented model was also

534
00:37:50,220 --> 00:37:58,500
<font color="#E5E5E5">not arbitrary if the different ways of</font>

535
00:37:55,260 --> 00:38:01,369
loading the main<font color="#CCCCCC"> trojan depend on them</font>

536
00:37:58,500 --> 00:38:14,869
<font color="#E5E5E5">so we</font><font color="#CCCCCC"> I want to get a</font><font color="#E5E5E5"> four variants it's</font>

537
00:38:01,369 --> 00:38:22,250
32 X 64<font color="#E5E5E5"> hello hello hi in X 64 with low</font>

538
00:38:14,869 --> 00:38:32,730
<font color="#E5E5E5">rights it will be launched via</font><font color="#CCCCCC"> Ram DLL</font>

539
00:38:22,250 --> 00:38:36,090
<font color="#E5E5E5">and in the high case</font><font color="#CCCCCC"> the old hijacking</font>

540
00:38:32,730 --> 00:38:39,030
will be<font color="#CCCCCC"> used</font><font color="#E5E5E5"> so this is you can see the</font>

541
00:38:36,090 --> 00:38:41,400
<font color="#CCCCCC">3 Rd 90</font><font color="#E5E5E5"> ml and they troubleshoot to</font>

542
00:38:39,030 --> 00:38:45,540
exact adapter which has been found

543
00:38:41,400 --> 00:38:47,609
so it's vulnerable<font color="#CCCCCC"> so the</font><font color="#E5E5E5"> 3 D 90 ml is</font>

544
00:38:45,540 --> 00:38:53,190
exactly what we're going to<font color="#CCCCCC"> put</font><font color="#E5E5E5"> next to</font>

545
00:38:47,609 --> 00:38:56,819
<font color="#E5E5E5">it so let's go forward in the 32 bit of</font>

546
00:38:53,190 --> 00:39:00,330
branch<font color="#E5E5E5"> with low</font><font color="#CCCCCC"> rights</font><font color="#E5E5E5"> the same will</font>

547
00:38:56,820 --> 00:39:02,240
<font color="#CCCCCC">happen and with high</font><font color="#E5E5E5"> rights</font>

548
00:39:00,330 --> 00:39:07,759
I'll explain<font color="#E5E5E5"> in more detail because</font>

549
00:39:02,240 --> 00:39:07,759
virtualized driver<font color="#E5E5E5"> is going to be used</font>

550
00:39:10,220 --> 00:39:20,390
so this slide shows<font color="#E5E5E5"> you</font><font color="#CCCCCC"> the file</font>

551
00:39:14,040 --> 00:39:20,390
configuration that got dropped

552
00:39:21,260 --> 00:39:28,140
to the working file the first<font color="#CCCCCC"> 4 bytes</font>

553
00:39:23,970 --> 00:39:32,689
are<font color="#E5E5E5"> there crc32 checksum for the entire</font>

554
00:39:28,140 --> 00:39:37,859
file config the next<font color="#E5E5E5"> 8 the signature</font>

555
00:39:32,690 --> 00:39:41,990
that's the main<font color="#CCCCCC"> trojan louder I will use</font>

556
00:39:37,859 --> 00:39:46,740
to look for file config<font color="#E5E5E5"> and the next</font>

557
00:39:41,990 --> 00:39:48,479
block<font color="#CCCCCC"> of data is</font><font color="#E5E5E5"> the data blob</font><font color="#CCCCCC"> contained</font>

558
00:39:46,740 --> 00:39:48,868
<font color="#E5E5E5">the file names the name of the file that</font>

559
00:39:48,480 --> 00:39:52,019
have

560
00:39:48,869 --> 00:39:54,809
to the work folder<font color="#CCCCCC"> how we're</font><font color="#E5E5E5"> going to</font>

561
00:39:52,019 --> 00:39:59,399
call them and all<font color="#CCCCCC"> the</font><font color="#E5E5E5"> all the other</font>

562
00:39:54,809 --> 00:40:03,930
names and things that<font color="#E5E5E5"> will may need of</font>

563
00:39:59,400 --> 00:40:06,690
the variable part the loader<font color="#E5E5E5"> at the main</font>

564
00:40:03,930 --> 00:40:10,069
local<font color="#CCCCCC"> Trojan loader</font><font color="#E5E5E5"> it affects the main</font>

565
00:40:06,690 --> 00:40:13,079
Trojan from the resources section

566
00:40:10,069 --> 00:40:17,880
the main Trojan is a cryptid by classic

567
00:40:13,079 --> 00:40:26,400
decrypt that<font color="#E5E5E5"> is so with a with an offset</font>

568
00:40:17,880 --> 00:40:29,970
<font color="#CCCCCC">and compressed by a a plebe</font><font color="#E5E5E5"> and finally</font>

569
00:40:26,400 --> 00:40:32,339
it injects the<font color="#CCCCCC"> end Padme</font><font color="#E5E5E5"> Trojan into</font>

570
00:40:29,970 --> 00:40:36,169
energy accent into the into wind<font color="#CCCCCC"> log on</font>

571
00:40:32,339 --> 00:40:39,230
<font color="#E5E5E5">eggs a let's come back to the 32-bit</font>

572
00:40:36,170 --> 00:40:43,700
<font color="#E5E5E5">high privilege branch</font>

573
00:40:39,230 --> 00:40:47,400
it's a virtualized driver<font color="#E5E5E5"> the trans in</font>

574
00:40:43,700 --> 00:40:52,788
kernel<font color="#CCCCCC"> mode itself checks to verify</font><font color="#E5E5E5"> a</font>

575
00:40:47,400 --> 00:40:56,630
<font color="#E5E5E5">cheese integrity via</font><font color="#CCCCCC"> crc32 then it</font>

576
00:40:52,789 --> 00:41:00,420
selectively<font color="#E5E5E5"> checks the importance</font>

577
00:40:56,630 --> 00:41:05,039
functions where they hacked or not where

578
00:41:00,420 --> 00:41:06,749
they hooked or not<font color="#E5E5E5"> 2 4 6 or 8 bytes</font><font color="#CCCCCC"> you</font>

579
00:41:05,039 --> 00:41:10,380
can take them<font color="#E5E5E5"> and check if they're</font>

580
00:41:06,749 --> 00:41:12,149
hooked or the kernel memory<font color="#CCCCCC"> ports have</font>

581
00:41:10,380 --> 00:41:16,619
<font color="#E5E5E5">an on type parameters for some reason</font>

582
00:41:12,150 --> 00:41:18,809
another way to fight the sandbox the

583
00:41:16,619 --> 00:41:20,819
<font color="#CCCCCC">doubly</font><font color="#E5E5E5"> linked list that can</font><font color="#CCCCCC"> ask LD a</font>

584
00:41:18,809 --> 00:41:23,430
data table entries must contain more

585
00:41:20,819 --> 00:41:27,029
<font color="#E5E5E5">than</font><font color="#CCCCCC"> 10</font><font color="#E5E5E5"> nodes and also this driver has a</font>

586
00:41:23,430 --> 00:41:30,200
mechanism<font color="#E5E5E5"> to retrieve the next sub stage</font>

587
00:41:27,029 --> 00:41:33,210
from<font color="#E5E5E5"> the resource section but it uses</font>

588
00:41:30,200 --> 00:41:39,419
<font color="#E5E5E5">what the function just returns zeros</font>

589
00:41:33,210 --> 00:41:42,499
<font color="#E5E5E5">that</font><font color="#CCCCCC"> are responsible and we it just uses</font>

590
00:41:39,420 --> 00:41:48,779
<font color="#E5E5E5">hard-coded offsets to achieve that and</font>

591
00:41:42,499 --> 00:41:54,140
finally putting a<font color="#CCCCCC"> 32 bit driver of the</font>

592
00:41:48,779 --> 00:41:58,830
loader<font color="#E5E5E5"> looks or which kernel is loaded</font>

593
00:41:54,140 --> 00:42:06,150
<font color="#E5E5E5">kernel or you know P over PA</font>

594
00:41:58,830 --> 00:42:10,920
receives the<font color="#CCCCCC"> Cisco's numbers for create</font>

595
00:42:06,150 --> 00:42:12,990
<font color="#CCCCCC">federal crates RDX uses ZW locate</font>

596
00:42:10,920 --> 00:42:17,550
process memory<font color="#E5E5E5"> to allocate memory</font><font color="#CCCCCC"> when</font>

597
00:42:12,990 --> 00:42:21,990
<font color="#CCCCCC">log on recovers</font><font color="#E5E5E5"> SSD</font><font color="#CCCCCC"> T whether it has</font>

598
00:42:17,550 --> 00:42:25,770
<font color="#CCCCCC">been hooked</font><font color="#E5E5E5"> explicitly creates a user</font>

599
00:42:21,990 --> 00:42:30,899
mode process context and then attaches

600
00:42:25,770 --> 00:42:35,430
to<font color="#E5E5E5"> win lock on create thread</font><font color="#CCCCCC"> attached</font>

601
00:42:30,900 --> 00:42:38,940
process injects the<font color="#CCCCCC"> trampling</font><font color="#E5E5E5"> codes and</font>

602
00:42:35,430 --> 00:42:43,759
the encrypted<font color="#CCCCCC"> main Trojan after this it</font>

603
00:42:38,940 --> 00:42:48,060
starts with it<font color="#CCCCCC"> really school and this</font>

604
00:42:43,760 --> 00:42:51,990
<font color="#CCCCCC">trampling codes within when</font><font color="#E5E5E5"> logon</font>

605
00:42:48,060 --> 00:42:53,790
decrypts<font color="#CCCCCC"> the main trojan</font><font color="#E5E5E5"> and the</font>

606
00:42:51,990 --> 00:42:56,970
<font color="#E5E5E5">controller's</font><font color="#CCCCCC"> pass to the main trojan</font><font color="#E5E5E5"> and</font>

607
00:42:53,790 --> 00:42:59,180
<font color="#CCCCCC">i'm passing they control to Sergey thank</font>

608
00:42:56,970 --> 00:42:59,180
you

609
00:43:00,180 --> 00:43:11,790
the main<font color="#E5E5E5"> Trojan can be structurally</font>

610
00:43:03,570 --> 00:43:15,210
split a question<font color="#E5E5E5"> question using</font>

611
00:43:11,790 --> 00:43:17,640
resources to store the<font color="#E5E5E5"> encrypted body</font>

612
00:43:15,210 --> 00:43:20,910
<font color="#CCCCCC">the functionality is there but then of</font>

613
00:43:17,640 --> 00:43:25,710
them they're<font color="#E5E5E5"> kind of an overlay but they</font>

614
00:43:20,910 --> 00:43:28,230
were in the resources yeah

615
00:43:25,710 --> 00:43:32,480
you're not about the driver<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> think</font>

616
00:43:28,230 --> 00:43:34,980
<font color="#CCCCCC">innocence so the next question</font><font color="#E5E5E5"> if</font>

617
00:43:32,480 --> 00:43:38,760
there's encryption the<font color="#E5E5E5"> entropy is high</font>

618
00:43:34,980 --> 00:43:40,520
and a lot of anti viruses<font color="#E5E5E5"> respond to</font>

619
00:43:38,760 --> 00:43:43,650
high entropy how come they haven't

620
00:43:40,520 --> 00:43:47,520
detected it<font color="#E5E5E5"> as generic you didn't</font>

621
00:43:43,650 --> 00:43:50,760
mention<font color="#E5E5E5"> did they blow up the entropy as</font>

622
00:43:47,520 --> 00:43:53,420
it appears or they didn't I mean I think

623
00:43:50,760 --> 00:43:53,420
I got a question

624
00:43:53,510 --> 00:44:02,480
so you first need<font color="#CCCCCC"> to blow it up well</font>

625
00:43:58,590 --> 00:44:10,550
basically look there was an encryption

626
00:44:02,480 --> 00:44:10,550
piece<font color="#CCCCCC"> it</font><font color="#E5E5E5"> was hugely encrypted so</font><font color="#CCCCCC"> they</font>

627
00:44:10,630 --> 00:44:24,950
nothing was there<font color="#E5E5E5"> no antivirus was there</font>

628
00:44:14,420 --> 00:44:28,749
and everything was<font color="#E5E5E5"> bad no</font><font color="#CCCCCC"> so you can</font>

629
00:44:24,950 --> 00:44:28,749
actually find<font color="#E5E5E5"> the picture oh you can't</font>

630
00:44:33,039 --> 00:44:42,349
so you<font color="#CCCCCC"> can split</font><font color="#E5E5E5"> it into four large</font>

631
00:44:37,789 --> 00:44:44,509
pieces<font color="#E5E5E5"> the thread that injects the</font>

632
00:44:42,349 --> 00:44:51,849
<font color="#E5E5E5">user-mode encrypter to all the available</font>

633
00:44:44,509 --> 00:44:57,170
process<font color="#CCCCCC"> almost all the plugin</font><font color="#E5E5E5"> manager</font>

634
00:44:51,849 --> 00:45:01,130
<font color="#CCCCCC">executes</font><font color="#E5E5E5"> correct loading and downloading</font>

635
00:44:57,170 --> 00:45:03,880
of<font color="#E5E5E5"> plugins in the FS the network manager</font>

636
00:45:01,130 --> 00:45:07,789
that's responsible<font color="#E5E5E5"> for</font><font color="#CCCCCC"> communication and</font>

637
00:45:03,880 --> 00:45:10,009
LPC server<font color="#CCCCCC"> I'm not going</font><font color="#E5E5E5"> to talk about</font>

638
00:45:07,789 --> 00:45:11,499
<font color="#CCCCCC">OPC server in my presentation because</font>

639
00:45:10,009 --> 00:45:14,269
when you edit for<font color="#E5E5E5"> inter-process</font>

640
00:45:11,499 --> 00:45:17,718
communication with the plugins plugins

641
00:45:14,269 --> 00:45:19,578
<font color="#E5E5E5">and we haven't found such so many</font>

642
00:45:17,719 --> 00:45:23,119
<font color="#E5E5E5">plugins and a lot</font><font color="#CCCCCC"> of this will be a</font>

643
00:45:19,579 --> 00:45:26,329
server<font color="#CCCCCC"> in particular message codes are</font>

644
00:45:23,119 --> 00:45:29,779
not quite clear<font color="#E5E5E5"> to us except</font><font color="#CCCCCC"> for a</font>

645
00:45:26,329 --> 00:45:37,160
couple<font color="#CCCCCC"> that lead to an</font><font color="#E5E5E5"> eject in the</font><font color="#CCCCCC"> root</font>

646
00:45:29,779 --> 00:45:41,049
<font color="#CCCCCC">kit</font><font color="#E5E5E5"> also at the bottom you can see</font><font color="#CCCCCC"> how</font>

647
00:45:37,160 --> 00:45:43,098
you can<font color="#CCCCCC"> identify</font><font color="#E5E5E5"> the working spike</font>

648
00:45:41,049 --> 00:45:45,680
usually it's when<font color="#CCCCCC"> logon what is this</font>

649
00:45:43,099 --> 00:45:50,019
<font color="#E5E5E5">name normally shouldn't be there and</font>

650
00:45:45,680 --> 00:45:54,009
then this screenshot shows the hooks

651
00:45:50,019 --> 00:45:57,859
<font color="#CCCCCC">that the main</font><font color="#E5E5E5"> Trojan puts on the API</font>

652
00:45:54,009 --> 00:46:02,029
functions and you could see it's these

653
00:45:57,859 --> 00:46:05,029
are<font color="#CCCCCC"> all functions</font><font color="#E5E5E5"> to cover the now</font>

654
00:46:02,029 --> 00:46:07,849
working<font color="#CCCCCC"> with files</font><font color="#E5E5E5"> you needed to work</font>

655
00:46:05,029 --> 00:46:12,349
<font color="#E5E5E5">whether it's the FS</font><font color="#CCCCCC"> or the drop the</font>

656
00:46:07,849 --> 00:46:15,849
persistence modules module so the

657
00:46:12,349 --> 00:46:15,849
virtual<font color="#E5E5E5"> file system that</font><font color="#CCCCCC"> it has</font>

658
00:46:16,610 --> 00:46:22,820
it's needed to<font color="#E5E5E5"> contain configuration</font>

659
00:46:20,450 --> 00:46:26,390
files<font color="#CCCCCC"> and plugins every our</font><font color="#E5E5E5"> plugin has</font>

660
00:46:22,820 --> 00:46:28,790
its own configuration file<font color="#CCCCCC"> and the main</font>

661
00:46:26,390 --> 00:46:30,710
<font color="#CCCCCC">throat Joe</font><font color="#E5E5E5"> Trojan also has its own</font>

662
00:46:28,790 --> 00:46:33,920
<font color="#E5E5E5">configuration file it always has the</font>

663
00:46:30,710 --> 00:46:40,640
<font color="#E5E5E5">same name within the VFS you can see</font>

664
00:46:33,920 --> 00:46:44,690
<font color="#E5E5E5">structure below the checksum and some</font>

665
00:46:40,640 --> 00:46:48,650
identifiers<font color="#E5E5E5"> the file names then there's</font>

666
00:46:44,690 --> 00:46:51,260
a flag responsible for this big

667
00:46:48,650 --> 00:46:55,690
configuration<font color="#E5E5E5"> file or a plug-in</font><font color="#CCCCCC"> and then</font>

668
00:46:51,260 --> 00:46:59,930
the data<font color="#E5E5E5"> block itself the plug-in</font>

669
00:46:55,690 --> 00:47:02,990
<font color="#E5E5E5">encrypted and compressed by a plate is</font>

670
00:46:59,930 --> 00:47:06,830
encrypted<font color="#E5E5E5"> by</font><font color="#CCCCCC"> EXO</font><font color="#E5E5E5"> and a lot</font><font color="#CCCCCC"> of macau a</font>

671
00:47:02,990 --> 00:47:13,060
circle for<font color="#CCCCCC"> the help</font><font color="#E5E5E5"> in passing in this</font>

672
00:47:06,830 --> 00:47:16,509
VFS<font color="#E5E5E5"> here you see how the</font><font color="#CCCCCC"> request</font><font color="#E5E5E5"> happens</font>

673
00:47:13,060 --> 00:47:16,509
open in the<font color="#E5E5E5"> file</font>

674
00:47:17,980 --> 00:47:27,100
<font color="#CCCCCC">80c that is the main configuration file</font>

675
00:47:21,650 --> 00:47:32,350
and<font color="#CCCCCC"> then you can</font><font color="#E5E5E5"> see how the file name</font>

676
00:47:27,100 --> 00:47:36,290
is transformed into the file system ID

677
00:47:32,350 --> 00:47:41,569
yep so<font color="#E5E5E5"> it's exactly the configuration</font>

678
00:47:36,290 --> 00:47:47,890
<font color="#E5E5E5">file the main configuration file of the</font>

679
00:47:41,570 --> 00:47:52,250
<font color="#CCCCCC">trojan contains a lot of information the</font>

680
00:47:47,890 --> 00:47:56,200
relay server IP addresses ports<font color="#CCCCCC"> a list</font>

681
00:47:52,250 --> 00:48:00,700
of<font color="#E5E5E5"> applications</font><font color="#CCCCCC"> they're all stored in</font>

682
00:47:56,200 --> 00:48:05,200
records<font color="#E5E5E5"> first they have a size and then</font>

683
00:48:00,700 --> 00:48:11,359
yeah for<font color="#CCCCCC"> the record ID which is unique</font>

684
00:48:05,200 --> 00:48:15,109
reflecting what it contains if you have

685
00:48:11,360 --> 00:48:19,160
IP addresses within<font color="#E5E5E5"> the records ace ID</font>

686
00:48:15,110 --> 00:48:24,230
will<font color="#CCCCCC"> be</font><font color="#E5E5E5"> 80</font><font color="#CCCCCC"> 3770</font><font color="#E5E5E5"> and it'll be like this</font>

687
00:48:19,160 --> 00:48:26,359
in any config file<font color="#CCCCCC"> okay how explain this</font>

688
00:48:24,230 --> 00:48:28,810
as well here you can see the<font color="#E5E5E5"> plug-in</font>

689
00:48:26,360 --> 00:48:28,810
interface

690
00:48:29,589 --> 00:48:41,650
well it's it<font color="#E5E5E5"> doesn't have anything</font>

691
00:48:34,359 --> 00:48:45,769
<font color="#E5E5E5">especially difficult to understand we</font>

692
00:48:41,650 --> 00:48:48,890
<font color="#E5E5E5">have a</font><font color="#CCCCCC"> plugin that</font><font color="#E5E5E5"> encrypts data in the</font>

693
00:48:45,769 --> 00:48:51,410
network<font color="#E5E5E5"> video audio recorders recorder</font>

694
00:48:48,890 --> 00:48:53,598
<font color="#E5E5E5">and the thing</font><font color="#CCCCCC"> that captures</font><font color="#E5E5E5"> data from</font>

695
00:48:51,410 --> 00:48:55,490
the screen<font color="#CCCCCC"> regard</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> user mode it</font>

696
00:48:53,599 --> 00:48:59,180
injects user mode<font color="#CCCCCC"> a rootkit</font><font color="#E5E5E5"> into all</font>

697
00:48:55,490 --> 00:49:01,910
available processes<font color="#E5E5E5"> except for these but</font>

698
00:48:59,180 --> 00:49:04,879
if it's<font color="#E5E5E5"> going to run on XP it will be</font>

699
00:49:01,910 --> 00:49:10,899
ignoring<font color="#E5E5E5"> this list</font><font color="#CCCCCC"> and we'll try</font><font color="#E5E5E5"> to get</font>

700
00:49:04,880 --> 00:49:13,940
everywhere here you can see a small

701
00:49:10,900 --> 00:49:18,760
selection of functions<font color="#E5E5E5"> that this user</font>

702
00:49:13,940 --> 00:49:26,539
mode rootkit intercepts and also what it

703
00:49:18,760 --> 00:49:32,750
<font color="#E5E5E5">covers what it conceals so user mode</font>

704
00:49:26,539 --> 00:49:35,180
rootkit<font color="#E5E5E5"> DNS get</font><font color="#CCCCCC"> cache data table so this</font>

705
00:49:32,750 --> 00:49:41,920
one this<font color="#CCCCCC"> is one</font><font color="#E5E5E5"> other interesting thing</font>

706
00:49:35,180 --> 00:49:45,288
right file it tries to find<font color="#E5E5E5"> se keys it</font>

707
00:49:41,920 --> 00:49:49,279
appears them and<font color="#E5E5E5"> sensor</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> they do not</font>

708
00:49:45,289 --> 00:49:51,710
slow slot the<font color="#CCCCCC"> plug-in now there's</font>

709
00:49:49,279 --> 00:49:54,529
another<font color="#CCCCCC"> special plug-in that exists in</font>

710
00:49:51,710 --> 00:49:59,329
any<font color="#CCCCCC"> fin spy built it's the mail slot</font>

711
00:49:54,529 --> 00:50:01,940
control<font color="#CCCCCC"> plug-in so the mail slot that</font>

712
00:49:59,329 --> 00:50:05,779
you've seen<font color="#CCCCCC"> at the beginning</font><font color="#E5E5E5"> is actually</font>

713
00:50:01,940 --> 00:50:07,700
<font color="#E5E5E5">the outcome of this a plugins operation</font>

714
00:50:05,779 --> 00:50:10,670
it collects<font color="#CCCCCC"> all data</font><font color="#E5E5E5"> coming to the mail</font>

715
00:50:07,700 --> 00:50:15,038
slot<font color="#E5E5E5"> stores it and if needed</font>

716
00:50:10,670 --> 00:50:18,319
dispatches it to the network module for

717
00:50:15,039 --> 00:50:23,869
later processing<font color="#E5E5E5"> regarding the network</font>

718
00:50:18,319 --> 00:50:26,299
module<font color="#CCCCCC"> so it spawns</font><font color="#E5E5E5"> it injects into</font>

719
00:50:23,869 --> 00:50:29,539
<font color="#E5E5E5">Explorer</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> taxi or are shelled a taxi</font>

720
00:50:26,299 --> 00:50:33,079
<font color="#CCCCCC">that spawns I</font><font color="#E5E5E5"> explore at otech single</font>

721
00:50:29,539 --> 00:50:36,619
launch<font color="#E5E5E5"> when app</font><font color="#CCCCCC"> X a</font><font color="#E5E5E5"> and it's only after</font>

722
00:50:33,079 --> 00:50:39,380
that<font color="#E5E5E5"> that the malicious activity of the</font>

723
00:50:36,619 --> 00:50:41,180
network module<font color="#E5E5E5"> begins the interaction</font>

724
00:50:39,380 --> 00:50:45,230
between<font color="#E5E5E5"> the main</font><font color="#CCCCCC"> Trojan</font>

725
00:50:41,180 --> 00:50:47,690
and the network module is happening

726
00:50:45,230 --> 00:50:50,210
<font color="#E5E5E5">through a global shared memory</font><font color="#CCCCCC"> and you</font>

727
00:50:47,690 --> 00:50:56,779
<font color="#E5E5E5">can see how this is another</font><font color="#CCCCCC"> indicator</font>

728
00:50:50,210 --> 00:51:04,059
that<font color="#CCCCCC"> Finn's file is running also all</font>

729
00:50:56,779 --> 00:51:04,059
messages are<font color="#E5E5E5"> encrypted by crypto plugin</font>

730
00:51:05,470 --> 00:51:15,709
<font color="#CCCCCC">so same records that are stored</font><font color="#E5E5E5"> in the</font>

731
00:51:10,220 --> 00:51:17,598
main<font color="#CCCCCC"> configuration file so it doesn't it</font>

732
00:51:15,710 --> 00:51:20,900
depends on the implementation<font color="#E5E5E5"> of the</font>

733
00:51:17,599 --> 00:51:26,660
crypto plugin<font color="#E5E5E5"> so that's basically how it</font>

734
00:51:20,900 --> 00:51:38,329
happens<font color="#E5E5E5"> first you look for Explorer or</font>

735
00:51:26,660 --> 00:51:40,670
<font color="#E5E5E5">Explorer and that's it it's a very</font>

736
00:51:38,329 --> 00:51:43,490
<font color="#E5E5E5">sophisticated piece of malware I'm</font>

737
00:51:40,670 --> 00:51:46,930
hoping that we have<font color="#CCCCCC"> been able to show</font>

738
00:51:43,490 --> 00:51:46,930
you<font color="#E5E5E5"> that but it's easy to detect</font>

739
00:51:47,049 --> 00:51:55,220
<font color="#E5E5E5">you have to use hashes crc32 checksum</font>

740
00:51:52,359 --> 00:51:59,900
<font color="#E5E5E5">different specific keys that</font><font color="#CCCCCC"> are</font>

741
00:51:55,220 --> 00:52:03,220
available<font color="#E5E5E5"> there from 2013</font><font color="#CCCCCC"> that milestone</font>

742
00:51:59,900 --> 00:52:05,930
<font color="#CCCCCC">names and so on and so forth most</font>

743
00:52:03,220 --> 00:52:10,490
malicious functionality is located in

744
00:52:05,930 --> 00:52:14,089
plugins so we found<font color="#E5E5E5"> some</font><font color="#CCCCCC"> plugins so we</font>

745
00:52:10,490 --> 00:52:16,848
haven't found others so basically there

746
00:52:14,089 --> 00:52:19,849
should be a lot<font color="#CCCCCC"> more in the WikiLeaks</font>

747
00:52:16,849 --> 00:52:22,329
available documents that we found so

748
00:52:19,849 --> 00:52:26,510
<font color="#CCCCCC">this sequence</font><font color="#E5E5E5"> of stages can be</font><font color="#CCCCCC"> different</font>

749
00:52:22,329 --> 00:52:30,380
<font color="#E5E5E5">different bundles of this fence by will</font>

750
00:52:26,510 --> 00:52:33,260
use a<font color="#E5E5E5"> different unpacking stages that's</font>

751
00:52:30,380 --> 00:52:34,910
it at the<font color="#E5E5E5"> bottom you</font><font color="#CCCCCC"> can see a link to</font>

752
00:52:33,260 --> 00:52:36,890
github<font color="#E5E5E5"> where you can see they find the</font>

753
00:52:34,910 --> 00:52:39,440
codes of<font color="#E5E5E5"> the disassembler that we have</font>

754
00:52:36,890 --> 00:52:48,589
been speaking about<font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> any</font>

755
00:52:39,440 --> 00:52:52,130
<font color="#E5E5E5">questions I'm asked a question I have</font>

756
00:52:48,589 --> 00:52:53,819
seen that lines were all were open<font color="#E5E5E5"> all</font>

757
00:52:52,130 --> 00:52:56,819
lines

758
00:52:53,819 --> 00:52:58,709
were in clear text in this<font color="#CCCCCC"> Trojan</font><font color="#E5E5E5"> or is</font>

759
00:52:56,819 --> 00:53:00,420
just<font color="#E5E5E5"> presentation</font><font color="#CCCCCC"> oh no</font><font color="#E5E5E5"> you should have</font>

760
00:52:58,709 --> 00:53:02,459
<font color="#E5E5E5">explained that because in presentation</font>

761
00:53:00,420 --> 00:53:08,339
that were open so they had been

762
00:53:02,459 --> 00:53:11,219
encrypted yeah look yeah<font color="#CCCCCC"> all stages</font><font color="#E5E5E5"> were</font>

763
00:53:08,339 --> 00:53:13,979
virtualized<font color="#CCCCCC"> they were all virtualized</font>

764
00:53:11,219 --> 00:53:15,239
<font color="#E5E5E5">and all additional all lines were</font>

765
00:53:13,979 --> 00:53:17,249
additionally covered you should have

766
00:53:15,239 --> 00:53:20,609
explained<font color="#CCCCCC"> that</font><font color="#E5E5E5"> because it looks like a</font>

767
00:53:17,249 --> 00:53:23,218
<font color="#CCCCCC">high-level</font><font color="#E5E5E5"> malware but if the lines are</font>

768
00:53:20,609 --> 00:53:25,109
not<font color="#E5E5E5"> encrypted it leads us</font><font color="#CCCCCC"> to some</font><font color="#E5E5E5"> kind</font>

769
00:53:23,219 --> 00:53:26,729
of a cognitive<font color="#CCCCCC"> dissonance no no of</font>

770
00:53:25,109 --> 00:53:29,719
course<font color="#E5E5E5"> of course they were all decrypted</font>

771
00:53:26,729 --> 00:53:33,149
another question there<font color="#E5E5E5"> was a slide about</font>

772
00:53:29,719 --> 00:53:35,099
<font color="#CCCCCC">a strange</font><font color="#E5E5E5"> registry keys have you found</font>

773
00:53:33,150 --> 00:53:37,589
anything no we haven't

774
00:53:35,099 --> 00:53:41,849
what was it doing<font color="#E5E5E5"> well what are doing</font>

775
00:53:37,589 --> 00:53:43,440
anything<font color="#E5E5E5"> with was running well if it</font>

776
00:53:41,849 --> 00:53:47,279
finds it it'll stop

777
00:53:43,440 --> 00:53:50,880
it'll so the Ute machine<font color="#E5E5E5"> a low</font><font color="#CCCCCC"> Product</font>

778
00:53:47,279 --> 00:53:54,029
<font color="#CCCCCC">ID are just termination yes yeah if I</font>

779
00:53:50,880 --> 00:53:55,559
find it it's anti sandboxing basically

780
00:53:54,029 --> 00:53:57,930
so if it finds<font color="#E5E5E5"> it I've got it</font>

781
00:53:55,559 --> 00:54:00,209
<font color="#CCCCCC">alright yeah yeah there was something</font>

782
00:53:57,930 --> 00:54:03,598
<font color="#E5E5E5">else I wanted to ask and there's a micro</font>

783
00:54:00,209 --> 00:54:05,489
question the modules is it a pluggable

784
00:54:03,599 --> 00:54:08,880
<font color="#CCCCCC">so - yes</font>

785
00:54:05,489 --> 00:54:11,459
so some modules were embedded somebody

786
00:54:08,880 --> 00:54:13,799
some were loaded so<font color="#E5E5E5"> two modes so you</font>

787
00:54:11,459 --> 00:54:17,549
could embed<font color="#E5E5E5"> your module when building</font>

788
00:54:13,799 --> 00:54:18,269
this thing<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> you could load</font><font color="#CCCCCC"> it as</font>

789
00:54:17,549 --> 00:54:21,690
needed

790
00:54:18,269 --> 00:54:24,680
yes right yeah any more questions<font color="#E5E5E5"> thank</font>

791
00:54:21,690 --> 00:54:27,809
<font color="#E5E5E5">you</font><font color="#CCCCCC"> for your presentation</font><font color="#E5E5E5"> now how long</font>

792
00:54:24,680 --> 00:54:37,629
<font color="#E5E5E5">did this research take two months</font><font color="#CCCCCC"> and</font>

793
00:54:27,809 --> 00:54:44,200
the team - two<font color="#E5E5E5"> of us thank you yeah</font>

794
00:54:37,630 --> 00:54:49,000
<font color="#E5E5E5">a question to clarify how do you do</font>

795
00:54:44,200 --> 00:54:50,348
the obfuscation of this garbage code in

796
00:54:49,000 --> 00:54:53,470
more details please<font color="#E5E5E5"> oh yeah good</font>

797
00:54:50,349 --> 00:54:57,460
<font color="#CCCCCC">question</font><font color="#E5E5E5"> the guy</font><font color="#CCCCCC"> oh we didn't we decided</font>

798
00:54:53,470 --> 00:55:01,200
not to analyze this garbage<font color="#E5E5E5"> codes</font>

799
00:54:57,460 --> 00:55:05,769
<font color="#E5E5E5">because it was</font><font color="#CCCCCC"> covered by the</font>

800
00:55:01,200 --> 00:55:09,689
virtualization<font color="#E5E5E5"> functions and as to the</font>

801
00:55:05,769 --> 00:55:14,078
application of<font color="#CCCCCC"> control flow we replaced</font>

802
00:55:09,690 --> 00:55:15,789
one unconditional jump<font color="#CCCCCC"> with substitute</font>

803
00:55:14,079 --> 00:55:20,230
<font color="#E5E5E5">one conditional jumper for two</font>

804
00:55:15,789 --> 00:55:23,470
conditional jumps yeah and I just<font color="#CCCCCC"> saw</font>

805
00:55:20,230 --> 00:55:25,089
this<font color="#CCCCCC"> thing that the one jump goes they</font>

806
00:55:23,470 --> 00:55:27,899
go to the same place<font color="#E5E5E5"> but for</font><font color="#CCCCCC"> filling</font>

807
00:55:25,089 --> 00:55:34,900
them some<font color="#E5E5E5"> garbage he's inserted which</font>

808
00:55:27,900 --> 00:55:39,930
brings<font color="#E5E5E5"> I do from yes the correct term is</font>

809
00:55:34,900 --> 00:55:39,930
this synchronization<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> disassembler</font>

810
00:55:40,259 --> 00:55:47,589
well thank you<font color="#E5E5E5"> for</font><font color="#CCCCCC"> your presentation I</font>

811
00:55:42,609 --> 00:55:50,890
have several questions<font color="#CCCCCC"> is the command</font>

812
00:55:47,589 --> 00:55:53,470
assets changing between<font color="#E5E5E5"> versions of</font>

813
00:55:50,890 --> 00:55:55,240
inspire yeah<font color="#CCCCCC"> when I was</font><font color="#E5E5E5"> talking about it</font>

814
00:55:53,470 --> 00:56:03,629
is a simpler operation the second<font color="#E5E5E5"> point</font>

815
00:55:55,240 --> 00:56:03,629
was to identify<font color="#E5E5E5"> a match between the</font>

816
00:56:04,520 --> 00:56:10,509
[Music]

817
00:56:06,059 --> 00:56:12,009
between the between<font color="#E5E5E5"> the instructions the</font>

818
00:56:10,509 --> 00:56:15,099
<font color="#CCCCCC">standard instruction and those that</font>

819
00:56:12,009 --> 00:56:16,960
<font color="#E5E5E5">exist so we see what instructions are</font>

820
00:56:15,099 --> 00:56:19,920
there and what opcode numbers regarding

821
00:56:16,960 --> 00:56:23,680
instructions<font color="#E5E5E5"> even each particular stage</font>

822
00:56:19,920 --> 00:56:25,359
<font color="#E5E5E5">they're all virtualized right so the</font>

823
00:56:23,680 --> 00:56:28,598
instruction set can<font color="#E5E5E5"> be different for</font>

824
00:56:25,359 --> 00:56:33,690
<font color="#CCCCCC">instance if not just right but they said</font>

825
00:56:28,599 --> 00:56:37,690
they're all mixed so the shift table

826
00:56:33,690 --> 00:56:39,789
<font color="#E5E5E5">dispatch finding all</font><font color="#CCCCCC"> stages in at the</font>

827
00:56:37,690 --> 00:56:42,880
<font color="#E5E5E5">execution of rationalise come and they</font>

828
00:56:39,789 --> 00:56:46,809
<font color="#E5E5E5">can be mixed just taking a jump</font><font color="#CCCCCC"> table</font>

829
00:56:42,880 --> 00:56:48,790
and<font color="#CCCCCC"> match them across all stages</font><font color="#E5E5E5"> won't</font>

830
00:56:46,809 --> 00:56:53,570
work

831
00:56:48,790 --> 00:56:55,430
how the malware<font color="#CCCCCC"> was looking for the</font>

832
00:56:53,570 --> 00:56:57,590
vulnerability where files were you

833
00:56:55,430 --> 00:57:03,799
mentioned<font color="#E5E5E5"> they did it was it looking</font><font color="#CCCCCC"> up</font>

834
00:56:57,590 --> 00:57:07,430
for the<font color="#E5E5E5"> import table</font><font color="#CCCCCC"> I won't be able to</font>

835
00:57:03,800 --> 00:57:10,370
explain it<font color="#CCCCCC"> right here well we can come</font>

836
00:57:07,430 --> 00:57:12,830
out and discuss separately<font color="#CCCCCC"> Oh</font><font color="#E5E5E5"> haven't</font>

837
00:57:10,370 --> 00:57:15,049
you looked all I can't get my<font color="#CCCCCC"> notebook</font>

838
00:57:12,830 --> 00:57:17,360
and<font color="#E5E5E5"> take a look at the records I just</font>

839
00:57:15,050 --> 00:57:22,900
can't do<font color="#CCCCCC"> it off</font><font color="#E5E5E5"> the cuff</font><font color="#CCCCCC"> okay okay</font>

840
00:57:17,360 --> 00:57:26,840
and also does<font color="#E5E5E5"> it check anti debugging</font>

841
00:57:22,900 --> 00:57:29,510
<font color="#CCCCCC">correct</font><font color="#E5E5E5"> correctness</font><font color="#CCCCCC"> this it's verify</font><font color="#E5E5E5"> in</font>

842
00:57:26,840 --> 00:57:32,600
the<font color="#E5E5E5"> process of debugging if we have no</font>

843
00:57:29,510 --> 00:57:40,580
no<font color="#E5E5E5"> doesn't now no integrity checking</font>

844
00:57:32,600 --> 00:57:42,920
<font color="#E5E5E5">integrity verification thank you thank</font>

845
00:57:40,580 --> 00:57:51,920
<font color="#E5E5E5">you guys t-shirts for the best questions</font>

846
00:57:42,920 --> 00:57:58,540
<font color="#E5E5E5">yeah your discretion yeah I heard it</font>

847
00:57:51,920 --> 00:57:58,540
<font color="#CCCCCC">yeah</font><font color="#E5E5E5"> you have can I thank you</font><font color="#CCCCCC"> very much</font>

848
00:58:03,340 --> 00:58:09,140
yeah<font color="#E5E5E5"> oh yeah yeah there was this young</font>

849
00:58:06,410 --> 00:58:11,839
<font color="#E5E5E5">guy who offered</font><font color="#CCCCCC"> us going outside yeah</font>

850
00:58:09,140 --> 00:58:15,730
<font color="#E5E5E5">it's yours go yeah I'm going to go</font>

851
00:58:11,840 --> 00:58:15,730
outside<font color="#CCCCCC"> yeah thank you</font>

