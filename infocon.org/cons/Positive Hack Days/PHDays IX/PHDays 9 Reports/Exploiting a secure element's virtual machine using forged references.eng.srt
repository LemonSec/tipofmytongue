1
00:00:05,450 --> 00:00:13,070
the presentation

2
00:00:07,440 --> 00:00:13,070
I want to use a lot of English words

3
00:00:14,360 --> 00:00:23,640
secured on secure element secure element

4
00:00:19,080 --> 00:00:27,689
I will be using the Russian language so

5
00:00:23,640 --> 00:00:30,120
how to use the secure element and how to

6
00:00:27,690 --> 00:00:38,610
go around it so what they're used for

7
00:00:30,120 --> 00:00:41,399
and how the attackers can hack them so

8
00:00:38,610 --> 00:00:46,140
first so how they're used in the

9
00:00:41,399 --> 00:00:49,379
architecture of secure elements and how

10
00:00:46,140 --> 00:00:52,890
can we implement security and then what

11
00:00:49,379 --> 00:00:56,280
attacks we have had so far in the last

12
00:00:52,890 --> 00:00:58,069
10-15 years so that's because we've been

13
00:00:56,280 --> 00:01:01,350
trying just to resolve the issue of

14
00:00:58,069 --> 00:01:05,070
attacks on secure secure elements and

15
00:01:01,350 --> 00:01:08,760
how can we have the best secure elements

16
00:01:05,069 --> 00:01:13,820
so that I can rebuff the attacks but

17
00:01:08,760 --> 00:01:18,600
eventually but eventually yields to the

18
00:01:13,820 --> 00:01:21,570
talk about fault rejection glitching so

19
00:01:18,600 --> 00:01:24,539
we wonder don't have the platform code

20
00:01:21,570 --> 00:01:29,759
but we're trying to break the operation

21
00:01:24,540 --> 00:01:33,350
of the secure element using using

22
00:01:29,760 --> 00:01:37,590
attackers and then for example power

23
00:01:33,350 --> 00:01:41,250
attention or VM so that's what is secure

24
00:01:37,590 --> 00:01:44,970
element so this kind of wallet and it

25
00:01:41,250 --> 00:01:46,530
has micro controller and and then it has

26
00:01:44,970 --> 00:01:49,110
a secure secure element

27
00:01:46,530 --> 00:01:51,690
what is the secure element so hash of a

28
00:01:49,110 --> 00:01:54,390
smart car smart card just like you have

29
00:01:51,690 --> 00:01:56,759
in your pocket but the number of pins

30
00:01:54,390 --> 00:02:00,570
even foreign science with number of pins

31
00:01:56,760 --> 00:02:03,630
on the smart card and the application is

32
00:02:00,570 --> 00:02:06,600
the same this is just a smart card so

33
00:02:03,630 --> 00:02:10,359
which is which is put on this PCB and

34
00:02:06,600 --> 00:02:13,600
device is simple so why we do that

35
00:02:10,360 --> 00:02:16,000
yes Marquardt originally so there were

36
00:02:13,600 --> 00:02:19,359
the gadgets it should protect us the

37
00:02:16,000 --> 00:02:21,430
secrets so even if they are in the hands

38
00:02:19,360 --> 00:02:22,630
of the attacker I said because they

39
00:02:21,430 --> 00:02:24,850
don't know where they can trust you or

40
00:02:22,630 --> 00:02:27,340
not yourself yes so because it's a

41
00:02:24,850 --> 00:02:29,710
banking information key so even if they

42
00:02:27,340 --> 00:02:31,960
give this card to you what you put into

43
00:02:29,710 --> 00:02:35,110
this cell phone and subscribe the

44
00:02:31,960 --> 00:02:38,200
attackers have the entire the entire

45
00:02:35,110 --> 00:02:43,750
array of instruments to to hack this

46
00:02:38,200 --> 00:02:48,609
card and the same the same goal is for

47
00:02:43,750 --> 00:02:53,260
the security and a few words about the

48
00:02:48,610 --> 00:02:56,320
function there is so usually so we have

49
00:02:53,260 --> 00:02:58,480
by bytecode verifier which is the

50
00:02:56,320 --> 00:03:01,750
program which checks the Haunted

51
00:02:58,480 --> 00:03:03,640
bytecode on the compiler applications of

52
00:03:01,750 --> 00:03:10,540
the operating system of the smart card

53
00:03:03,640 --> 00:03:13,450
OS and we need to check the requirements

54
00:03:10,540 --> 00:03:17,260
are not broken so the types of objects

55
00:03:13,450 --> 00:03:21,450
hard checked so they either is done

56
00:03:17,260 --> 00:03:21,450
either on the cart or outside the card

57
00:03:21,810 --> 00:03:28,060
so usually you can do it on this earth

58
00:03:24,330 --> 00:03:33,280
understand about in reality in the cart

59
00:03:28,060 --> 00:03:35,350
no one does these checks and because

60
00:03:33,280 --> 00:03:41,430
it's too expensive because smart cards

61
00:03:35,350 --> 00:03:45,299
they're very small little

62
00:03:41,430 --> 00:03:51,000
microcontrollers very small 16-bit

63
00:03:45,300 --> 00:03:56,800
processor and so 10 16 kilobytes of RAM

64
00:03:51,000 --> 00:03:59,230
and 2 3 kilobytes of flash memory there

65
00:03:56,800 --> 00:04:01,810
are two reasons first they need to make

66
00:03:59,230 --> 00:04:05,859
them small because this so the smaller

67
00:04:01,810 --> 00:04:07,480
the card this more the fewer found the

68
00:04:05,860 --> 00:04:10,720
real test and then they need to be cheap

69
00:04:07,480 --> 00:04:11,500
because because banks the manufacturer

70
00:04:10,720 --> 00:04:14,800
then Llanelli

71
00:04:11,500 --> 00:04:18,430
and every additional element that costs

72
00:04:14,800 --> 00:04:20,859
half a dollar more and eventually took

73
00:04:18,430 --> 00:04:23,350
millions of dollars so that's why

74
00:04:20,858 --> 00:04:27,520
they're small to make them safe and to

75
00:04:23,350 --> 00:04:31,030
make them cheaper so what else do we

76
00:04:27,520 --> 00:04:35,169
have on the card a secure element so

77
00:04:31,030 --> 00:04:37,809
there's the virtual machine or OS Java

78
00:04:35,170 --> 00:04:40,090
and Java Java cards and Gerald virtual

79
00:04:37,810 --> 00:04:42,190
machines it's not the only standard but

80
00:04:40,090 --> 00:04:46,030
is the most popular solution in the

81
00:04:42,190 --> 00:04:49,919
market right now so then a lot of secure

82
00:04:46,030 --> 00:04:52,330
elements or smart cars have BMS Germany

83
00:04:49,919 --> 00:04:55,240
and then it can contain several

84
00:04:52,330 --> 00:04:59,800
applications have--let's applets

85
00:04:55,240 --> 00:05:02,919
installed on the card

86
00:04:59,800 --> 00:05:05,410
it can contain several for this we have

87
00:05:02,919 --> 00:05:08,979
fire world applet firewall which

88
00:05:05,410 --> 00:05:11,919
distributes and protects one application

89
00:05:08,980 --> 00:05:14,560
from another application in other in

90
00:05:11,919 --> 00:05:18,010
other words they have no trust to the

91
00:05:14,560 --> 00:05:20,350
applications that are executed on the

92
00:05:18,010 --> 00:05:23,380
gadget and firewalls

93
00:05:20,350 --> 00:05:26,290
that needs to provide protection of the

94
00:05:23,380 --> 00:05:30,250
OS and other applications from possible

95
00:05:26,290 --> 00:05:32,860
well where malware applications on the

96
00:05:30,250 --> 00:05:36,070
secure element what does the firewall do

97
00:05:32,860 --> 00:05:39,550
the firewall checks that are the many

98
00:05:36,070 --> 00:05:41,890
checks but one of the checks that is so

99
00:05:39,550 --> 00:05:45,870
that the objects are using is is yours

100
00:05:41,890 --> 00:05:50,520
and so this is this is done by the Horus

101
00:05:45,870 --> 00:05:52,830
specifications should be done before

102
00:05:50,520 --> 00:05:55,979
tells us what nice that are done by the

103
00:05:52,830 --> 00:05:58,919
manufacturers do the same design the

104
00:05:55,980 --> 00:06:00,960
same beside themselves what to do and

105
00:05:58,920 --> 00:06:02,970
then there could be optional additional

106
00:06:00,960 --> 00:06:05,370
runtime checks whatever the

107
00:06:02,970 --> 00:06:08,100
manufacturers want to be done so the

108
00:06:05,370 --> 00:06:14,580
more checks the more safe the oils will

109
00:06:08,100 --> 00:06:18,060
be but but since there is little memory

110
00:06:14,580 --> 00:06:21,900
and the weight processor in such cards

111
00:06:18,060 --> 00:06:25,440
so that is why the ways will behind and

112
00:06:21,900 --> 00:06:30,359
so forth secure elements that I used for

113
00:06:25,440 --> 00:06:33,420
payments and payment systems so that's a

114
00:06:30,360 --> 00:06:36,120
big constraint because for their final

115
00:06:33,420 --> 00:06:38,600
transaction is limited and so they

116
00:06:36,120 --> 00:06:42,290
cannot allow for the transaction to last

117
00:06:38,600 --> 00:06:48,000
so it's quite a quick cheap and small

118
00:06:42,290 --> 00:06:51,480
and well protected then logical attacks

119
00:06:48,000 --> 00:06:54,900
so what magical attacks we had in recent

120
00:06:51,480 --> 00:06:58,560
time biological attacks classical

121
00:06:54,900 --> 00:07:02,900
attacks that has been used on VMs for a

122
00:06:58,560 --> 00:07:07,650
long time so if we have an application

123
00:07:02,900 --> 00:07:11,250
which the applet one in this case so

124
00:07:07,650 --> 00:07:13,409
that can do the malware cold so you can

125
00:07:11,250 --> 00:07:17,040
see the functions one expects the object

126
00:07:13,410 --> 00:07:18,840
and returns it it has a shorter so this

127
00:07:17,040 --> 00:07:21,660
is the reference to the subject and it

128
00:07:18,840 --> 00:07:25,440
returns a short so you want to compile

129
00:07:21,660 --> 00:07:27,360
it so we can do it because we forget

130
00:07:25,440 --> 00:07:30,000
that that time is match from the

131
00:07:27,360 --> 00:07:32,010
compiler and the compiler will say that

132
00:07:30,000 --> 00:07:33,930
it's not valid code and it will not go

133
00:07:32,010 --> 00:07:36,870
through the bytecode verifier because it

134
00:07:33,930 --> 00:07:38,970
won't answer but the attacker and they

135
00:07:36,870 --> 00:07:41,970
do it so the attacker the chance to do

136
00:07:38,970 --> 00:07:44,490
their own card code or if you to does

137
00:07:41,970 --> 00:07:47,570
certain libraries that can do have

138
00:07:44,490 --> 00:07:50,220
malware code then implementing this

139
00:07:47,570 --> 00:07:52,530
performing this function that they can

140
00:07:50,220 --> 00:07:56,969
get the link through the object which

141
00:07:52,530 --> 00:08:00,628
has the massive short of elements

142
00:07:56,969 --> 00:08:04,019
but eventually it hit the points to the

143
00:08:00,629 --> 00:08:06,569
memory all see bite yeah it's the

144
00:08:04,019 --> 00:08:11,699
problem that we need to address when

145
00:08:06,569 --> 00:08:13,949
we're trying to get access to that short

146
00:08:11,699 --> 00:08:17,189
type and each element has two bytes

147
00:08:13,949 --> 00:08:19,889
they've married three elements in this

148
00:08:17,189 --> 00:08:22,169
case so they messy buyer to get three

149
00:08:19,889 --> 00:08:25,019
bytes three elements back he buried them

150
00:08:22,169 --> 00:08:30,299
has a massive as element short so then I

151
00:08:25,019 --> 00:08:34,078
get a hundred three times two makes six

152
00:08:30,299 --> 00:08:36,318
so we can get out bouncer II it was used

153
00:08:34,078 --> 00:08:39,328
for a long period of time to have applet

154
00:08:36,318 --> 00:08:41,698
application one and big massive so they

155
00:08:39,328 --> 00:08:43,620
can't even read the next application

156
00:08:41,698 --> 00:08:50,729
that's on the cart and the write the

157
00:08:43,620 --> 00:08:53,819
same way it's the main goal of the OS to

158
00:08:50,730 --> 00:08:57,930
protect one applet from another applet

159
00:08:53,819 --> 00:08:59,610
and that to protect us against happens

160
00:08:57,930 --> 00:09:05,939
this way it doesn't do its main purpose

161
00:08:59,610 --> 00:09:08,129
and there was no protection because you

162
00:09:05,939 --> 00:09:14,009
cannot stop the change of code or

163
00:09:08,129 --> 00:09:16,620
objects of other applications this

164
00:09:14,009 --> 00:09:19,769
attack has been used for about ten years

165
00:09:16,620 --> 00:09:22,250
on many cards besides it's only one

166
00:09:19,769 --> 00:09:26,040
example yes so there may be more

167
00:09:22,250 --> 00:09:29,069
examples of different attacks then then

168
00:09:26,040 --> 00:09:31,410
the indicators were used to modify the

169
00:09:29,069 --> 00:09:36,779
metadata on the objects and many other

170
00:09:31,410 --> 00:09:39,300
attacks why why we don't want to apply

171
00:09:36,779 --> 00:09:41,850
this to use this attack but they don't

172
00:09:39,300 --> 00:09:44,329
very often because they're manufacturers

173
00:09:41,850 --> 00:09:47,610
they were published and so manufactures

174
00:09:44,329 --> 00:09:50,399
changed the the smart and the change

175
00:09:47,610 --> 00:09:54,209
their secure elements and they changed

176
00:09:50,399 --> 00:09:57,089
the objects so they do not point in the

177
00:09:54,209 --> 00:10:01,170
memory if there's an indicator there is

178
00:09:57,089 --> 00:10:05,040
an index of the table of the objects

179
00:10:01,170 --> 00:10:08,128
ever have messy bite and we try and

180
00:10:05,040 --> 00:10:11,040
receive what value of the link has less

181
00:10:08,129 --> 00:10:15,209
that the index that has the real address

182
00:10:11,040 --> 00:10:18,949
of the object that's in the memory

183
00:10:15,209 --> 00:10:22,079
besides the address so the manufacturers

184
00:10:18,949 --> 00:10:23,519
can do any type of table because it's

185
00:10:22,079 --> 00:10:26,189
not the requirement it's not the

186
00:10:23,519 --> 00:10:30,269
specification should be implemented so

187
00:10:26,189 --> 00:10:34,319
what they can do they can had a type of

188
00:10:30,269 --> 00:10:36,419
object we can say that this physical

189
00:10:34,319 --> 00:10:38,939
address will have massive bite and

190
00:10:36,419 --> 00:10:40,859
there's a number of elements and so so

191
00:10:38,939 --> 00:10:46,410
many when we try to get access to it

192
00:10:40,859 --> 00:10:48,769
using it as a link to the short mass and

193
00:10:46,410 --> 00:10:54,230
so then there will be a runtime

194
00:10:48,769 --> 00:10:54,230
exception and that happens very often

195
00:10:54,470 --> 00:11:02,249
modern secure elements now in some some

196
00:10:59,850 --> 00:11:04,679
elements so the manufacturers using

197
00:11:02,249 --> 00:11:09,410
using physical physical protection of

198
00:11:04,679 --> 00:11:12,869
the memory to use MMU and bu to protect

199
00:11:09,410 --> 00:11:16,618
to divide the contacts of different

200
00:11:12,869 --> 00:11:18,720
applications of there's even a way we

201
00:11:16,619 --> 00:11:26,249
find this references to the memory of

202
00:11:18,720 --> 00:11:28,169
other application won't get an access so

203
00:11:26,249 --> 00:11:30,989
what what what else can I do all the

204
00:11:28,169 --> 00:11:32,790
tags will known about the kill of use

205
00:11:30,989 --> 00:11:35,999
them because the manufacturers have

206
00:11:32,790 --> 00:11:38,610
changes have changed them and there but

207
00:11:35,999 --> 00:11:40,919
there are lots of this systemic so that

208
00:11:38,610 --> 00:11:44,819
we have api's which connects more than a

209
00:11:40,919 --> 00:11:47,279
thousand holes and it's in java java

210
00:11:44,819 --> 00:11:48,628
card and the global platform and the

211
00:11:47,279 --> 00:11:51,779
manufacturers who want to manufacture

212
00:11:48,629 --> 00:11:53,530
gemma cards so they need to conform to

213
00:11:51,779 --> 00:12:01,420
the specification

214
00:11:53,530 --> 00:12:04,750
and when an example of encryption using

215
00:12:01,420 --> 00:12:11,170
certain type of crypto algorithm and it

216
00:12:04,750 --> 00:12:14,680
gets the link to to the entry buffer

217
00:12:11,170 --> 00:12:18,310
than the length of the encryption can

218
00:12:14,680 --> 00:12:21,400
returns and returns the decrypted

219
00:12:18,310 --> 00:12:25,810
message into the buffer and and then one

220
00:12:21,400 --> 00:12:29,770
of it can it can hear a script inception

221
00:12:25,810 --> 00:12:33,849
exception and and tell us that so it

222
00:12:29,770 --> 00:12:38,680
performs that the length is protected by

223
00:12:33,850 --> 00:12:41,680
this algorithm and supported by this

224
00:12:38,680 --> 00:12:44,349
algorithm if it even if it doesn't work

225
00:12:41,680 --> 00:12:48,520
that the manufacturers should do the

226
00:12:44,350 --> 00:12:50,290
exception but it's at the file level so

227
00:12:48,520 --> 00:12:54,400
the details don't tell us what kind of

228
00:12:50,290 --> 00:12:59,439
check should be found as as we were

229
00:12:54,400 --> 00:13:00,939
saying modern cards between the by three

230
00:12:59,440 --> 00:13:03,970
shortly

231
00:13:00,940 --> 00:13:09,040
it's not possible this but what we can

232
00:13:03,970 --> 00:13:11,980
do we can create false links to the

233
00:13:09,040 --> 00:13:12,610
object step we don't that don't belong

234
00:13:11,980 --> 00:13:16,120
to us

235
00:13:12,610 --> 00:13:17,980
so using this code so it doesn't compile

236
00:13:16,120 --> 00:13:20,680
but you can change the byte code of the

237
00:13:17,980 --> 00:13:22,870
application after compilation something

238
00:13:20,680 --> 00:13:26,500
if you had an object and then we return

239
00:13:22,870 --> 00:13:31,360
short and then very short short and then

240
00:13:26,500 --> 00:13:33,550
we provide short so the index and link

241
00:13:31,360 --> 00:13:36,430
as to the table and then we can create

242
00:13:33,550 --> 00:13:37,930
the reference to this object you cannot

243
00:13:36,430 --> 00:13:40,209
use it

244
00:13:37,930 --> 00:13:43,180
and because the firewall will check and

245
00:13:40,210 --> 00:13:46,720
if I try to at the daughter index and

246
00:13:43,180 --> 00:13:49,150
the right or int in this memory then the

247
00:13:46,720 --> 00:13:51,340
firewall will check and you will see

248
00:13:49,150 --> 00:13:53,470
that that this object does not belong to

249
00:13:51,340 --> 00:14:00,310
us and then it will there will be

250
00:13:53,470 --> 00:14:05,860
exceptions immediately and and it's it's

251
00:14:00,310 --> 00:14:09,869
an element contains by rate cannot get

252
00:14:05,860 --> 00:14:09,870
its length because it's not our object

253
00:14:10,530 --> 00:14:17,110
this is what he we installed our

254
00:14:13,770 --> 00:14:22,120
application and convert the links that

255
00:14:17,110 --> 00:14:24,580
were here that we have in it which never

256
00:14:22,120 --> 00:14:28,920
said the installed the first application

257
00:14:24,580 --> 00:14:31,920
the whole link starts from 8a exit and

258
00:14:28,920 --> 00:14:34,349
all the way up to certain value

259
00:14:31,920 --> 00:14:37,599
depending on how many objects were have

260
00:14:34,350 --> 00:14:42,720
and then and then they're sequential

261
00:14:37,600 --> 00:14:42,720
dollars so you have to message them s

262
00:14:42,810 --> 00:14:53,170
eries or bytes then so if we install

263
00:14:49,300 --> 00:14:56,170
this then it's it's an industry stable

264
00:14:53,170 --> 00:14:59,610
so there will be new entries and we

265
00:14:56,170 --> 00:15:02,589
create objects so here we try we try to

266
00:14:59,610 --> 00:15:08,140
the firewall does the chat and we get

267
00:15:02,590 --> 00:15:13,120
exception but what's interesting what

268
00:15:08,140 --> 00:15:15,730
was about those elements whether install

269
00:15:13,120 --> 00:15:18,310
application on any of the cards our

270
00:15:15,730 --> 00:15:21,190
object is never number one in the index

271
00:15:18,310 --> 00:15:22,989
table was before it so it's not

272
00:15:21,190 --> 00:15:24,550
specifications because manufacturers

273
00:15:22,990 --> 00:15:26,920
will never tell us what's happening

274
00:15:24,550 --> 00:15:30,760
there and just objects we don't know

275
00:15:26,920 --> 00:15:32,979
which ones can we get access to them so

276
00:15:30,760 --> 00:15:34,600
that was the this was the goal of the of

277
00:15:32,980 --> 00:15:37,570
the research

278
00:15:34,600 --> 00:15:40,150
to do that we can create links or

279
00:15:37,570 --> 00:15:43,120
references to these objects references

280
00:15:40,150 --> 00:15:45,850
to these objects so if you can load it

281
00:15:43,120 --> 00:15:48,340
we do the false reference to object

282
00:15:45,850 --> 00:15:50,950
number zero there's not a good reference

283
00:15:48,340 --> 00:15:55,240
because and we just forget an exception

284
00:15:50,950 --> 00:15:57,730
every time if we ever do the reference

285
00:15:55,240 --> 00:16:00,130
with object won so may we may get an

286
00:15:57,730 --> 00:16:04,260
access to a subject but not directly

287
00:16:00,130 --> 00:16:07,750
because firewall will stop us then what

288
00:16:04,260 --> 00:16:11,770
we'll be using API so like the firewall

289
00:16:07,750 --> 00:16:14,770
does the check when when we get access

290
00:16:11,770 --> 00:16:19,750
directly so whether we call when we use

291
00:16:14,770 --> 00:16:22,689
API the OS should do it this API and

292
00:16:19,750 --> 00:16:25,750
this check so well it belongs to us or

293
00:16:22,690 --> 00:16:29,110
not should be done for every or the

294
00:16:25,750 --> 00:16:31,390
calls or possible API and since there

295
00:16:29,110 --> 00:16:32,890
are also it cares more than a hundred so

296
00:16:31,390 --> 00:16:35,250
there's a chance that we can find

297
00:16:32,890 --> 00:16:39,760
several that don't do it properly and

298
00:16:35,250 --> 00:16:42,720
then so we selected certain API the

299
00:16:39,760 --> 00:16:45,819
first API is

300
00:16:42,720 --> 00:16:49,990
sent by slum standard template that

301
00:16:45,820 --> 00:16:56,350
actually provides reference and not just

302
00:16:49,990 --> 00:16:59,740
returns it back from the card today you

303
00:16:56,350 --> 00:17:04,360
see that specification so tell us that

304
00:16:59,740 --> 00:17:06,069
this API a preview exception or security

305
00:17:04,359 --> 00:17:09,040
exception should generate security

306
00:17:06,069 --> 00:17:11,920
exception in the event that this object

307
00:17:09,040 --> 00:17:15,010
does not belong to our applet so in this

308
00:17:11,920 --> 00:17:18,010
case specification tells directly that

309
00:17:15,010 --> 00:17:21,099
the manufacturers should do this perform

310
00:17:18,010 --> 00:17:23,829
this check but for another API do find

311
00:17:21,099 --> 00:17:26,589
out to find out is just a script

312
00:17:23,829 --> 00:17:28,600
exception and no security exception and

313
00:17:26,589 --> 00:17:30,790
it does describe that they should do

314
00:17:28,600 --> 00:17:33,070
this chair so the specification is not

315
00:17:30,790 --> 00:17:34,840
full and it does not contain all the

316
00:17:33,070 --> 00:17:40,168
requirements and the manufacturers will

317
00:17:34,840 --> 00:17:45,790
do this by a specification and not by

318
00:17:40,169 --> 00:17:48,280
how you need to properly do API so that

319
00:17:45,790 --> 00:17:52,750
it would be safe and so we can just go

320
00:17:48,280 --> 00:17:56,470
around it and in the same case we tested

321
00:17:52,750 --> 00:17:59,020
one of the APIs global cat from safety

322
00:17:56,470 --> 00:18:02,440
historical bytes at 80 are historical

323
00:17:59,020 --> 00:18:07,870
bytes so when the card is owned and and

324
00:18:02,440 --> 00:18:11,559
the read and it's when the power is

325
00:18:07,870 --> 00:18:14,830
connected so it goes to reset and there

326
00:18:11,559 --> 00:18:18,010
so does a device that tell us what what

327
00:18:14,830 --> 00:18:19,990
what settings this Court has and some of

328
00:18:18,010 --> 00:18:21,730
them so can be installed from the

329
00:18:19,990 --> 00:18:25,180
application that's what I do

330
00:18:21,730 --> 00:18:28,900
as received so why not

331
00:18:25,180 --> 00:18:32,020
say that it that it gives us exceptions

332
00:18:28,900 --> 00:18:35,320
tells only this parameter change the

333
00:18:32,020 --> 00:18:38,770
specifications are different and they

334
00:18:35,320 --> 00:18:39,939
they contain similar information and

335
00:18:38,770 --> 00:18:42,129
they were trying just to use them

336
00:18:39,940 --> 00:18:45,040
against the manufacturers as information

337
00:18:42,130 --> 00:18:49,240
is the same so we quoted five different

338
00:18:45,040 --> 00:18:51,370
cards so they are in three problems of

339
00:18:49,240 --> 00:18:53,530
developed of different manufacturers two

340
00:18:51,370 --> 00:18:54,580
of them different models from the same

341
00:18:53,530 --> 00:18:58,270
manufacturer

342
00:18:54,580 --> 00:19:02,889
so the VM will look like so they will

343
00:18:58,270 --> 00:19:06,280
the same and therefore each of API

344
00:19:02,890 --> 00:19:09,130
schools we have a lie so what the

345
00:19:06,280 --> 00:19:13,600
numbers mean so the first number is how

346
00:19:09,130 --> 00:19:16,480
many objects we so we got exception and

347
00:19:13,600 --> 00:19:18,840
not exception and we got something and

348
00:19:16,480 --> 00:19:22,300
the second number how many objects are

349
00:19:18,840 --> 00:19:25,360
are in the index table before of hapless

350
00:19:22,300 --> 00:19:28,149
when we install our test applet so the

351
00:19:25,360 --> 00:19:30,209
first object that we have so we get its

352
00:19:28,150 --> 00:19:33,610
index and then we check all of them

353
00:19:30,210 --> 00:19:37,570
before because we think that they belong

354
00:19:33,610 --> 00:19:40,719
to the to the OS then then for the cards

355
00:19:37,570 --> 00:19:44,590
in average one third of objects so we

356
00:19:40,720 --> 00:19:46,450
can get so then the OS so even if it

357
00:19:44,590 --> 00:19:48,280
tells the specific it's if it's

358
00:19:46,450 --> 00:19:51,100
reflected to the specification like a

359
00:19:48,280 --> 00:19:54,309
sent by Islam that they should perform

360
00:19:51,100 --> 00:19:58,530
this check in in this case the

361
00:19:54,309 --> 00:20:01,330
manufacturers don't do only one

362
00:19:58,530 --> 00:20:03,280
manufacturer does this check on the two

363
00:20:01,330 --> 00:20:04,809
to two checks that are available could

364
00:20:03,280 --> 00:20:07,750
be global buffer which is available to

365
00:20:04,809 --> 00:20:11,428
everyone and other manufacturers don't

366
00:20:07,750 --> 00:20:14,980
do these checks the meaning 3 don't do

367
00:20:11,429 --> 00:20:18,220
these checks no and then we can get

368
00:20:14,980 --> 00:20:20,920
access to many objects and it's you know

369
00:20:18,220 --> 00:20:23,440
the worst for GP a global platform API

370
00:20:20,920 --> 00:20:27,190
because we can get access to many

371
00:20:23,440 --> 00:20:31,320
objects practically all of this car the

372
00:20:27,190 --> 00:20:33,060
origins I used from API Darryl available

373
00:20:31,320 --> 00:20:39,129
what it means

374
00:20:33,060 --> 00:20:41,470
so then historical bytes we can provide

375
00:20:39,130 --> 00:20:45,400
the reference to the object with the

376
00:20:41,470 --> 00:20:47,710
sort of index and and next time when we

377
00:20:45,400 --> 00:20:50,230
disconnect the cars and turn it on again

378
00:20:47,710 --> 00:20:56,310
so the content of this object will be an

379
00:20:50,230 --> 00:21:00,010
HR and the last line is pacification as

380
00:20:56,310 --> 00:21:03,280
SCP keys a secure shell protocol is that

381
00:21:00,010 --> 00:21:06,190
the main car keys that other smart cars

382
00:21:03,280 --> 00:21:09,250
to limit the access to install code

383
00:21:06,190 --> 00:21:13,720
he will have these three keys yeah so we

384
00:21:09,250 --> 00:21:16,900
can we can do can modify applets we can

385
00:21:13,720 --> 00:21:20,830
change privileges we can we can install

386
00:21:16,900 --> 00:21:23,260
new applications after that's in four

387
00:21:20,830 --> 00:21:28,740
out of five cards and using this

388
00:21:23,260 --> 00:21:32,830
historical bytes in the API so we could

389
00:21:28,740 --> 00:21:35,440
retain a chart after we do the reset of

390
00:21:32,830 --> 00:21:37,570
the card so we can get the contents of

391
00:21:35,440 --> 00:21:39,850
those kids how we know that because the

392
00:21:37,570 --> 00:21:42,100
cars were tested so we use the standard

393
00:21:39,850 --> 00:21:50,139
is the standard here's an unfortunate

394
00:21:42,100 --> 00:21:54,219
242 and hex for F those keys was an ATR

395
00:21:50,140 --> 00:21:56,679
and as you see so the API day that

396
00:21:54,220 --> 00:22:00,940
allows to get the reference of certain

397
00:21:56,679 --> 00:22:05,080
length and so since ATR is limited maybe

398
00:22:00,940 --> 00:22:07,720
16 bytes we can put in our data so then

399
00:22:05,080 --> 00:22:10,360
practically we can get the entire the

400
00:22:07,720 --> 00:22:12,940
entire object that we control so it can

401
00:22:10,360 --> 00:22:15,649
get partially partly even all the

402
00:22:12,940 --> 00:22:20,010
objects given if it's more than 16 bytes

403
00:22:15,650 --> 00:22:22,290
this is all very good so we find we

404
00:22:20,010 --> 00:22:25,110
found the cover the keys and then we

405
00:22:22,290 --> 00:22:27,330
always get the answers to the case those

406
00:22:25,110 --> 00:22:30,030
two attacks on our bank card that we

407
00:22:27,330 --> 00:22:33,240
just forget one way for example open

408
00:22:30,030 --> 00:22:36,210
accounts so it can get I can get keys

409
00:22:33,240 --> 00:22:38,460
from many cards if the code is performed

410
00:22:36,210 --> 00:22:41,850
to perform the code on the card when it

411
00:22:38,460 --> 00:22:51,120
the keys to to load it into the cart and

412
00:22:41,850 --> 00:22:53,879
that's a problem a big problem so we

413
00:22:51,120 --> 00:22:56,159
found logical vulnerability so the

414
00:22:53,880 --> 00:22:57,690
logical honorable to have a reference to

415
00:22:56,160 --> 00:23:01,950
the object that belongs to another

416
00:22:57,690 --> 00:23:04,140
applet so it can still can get access so

417
00:23:01,950 --> 00:23:06,300
what can you do it there's no control

418
00:23:04,140 --> 00:23:08,820
over the performance of the code if we

419
00:23:06,300 --> 00:23:10,440
just load whether they check that the

420
00:23:08,820 --> 00:23:12,750
code was checked on my check

421
00:23:10,440 --> 00:23:16,260
because they always say that they do buy

422
00:23:12,750 --> 00:23:18,270
code verified so they don't know load

423
00:23:16,260 --> 00:23:20,850
after compilation the code after the

424
00:23:18,270 --> 00:23:28,560
compilation so not not to be able to be

425
00:23:20,850 --> 00:23:32,699
false reference so that's an interesting

426
00:23:28,560 --> 00:23:36,000
object we found on the card to have the

427
00:23:32,700 --> 00:23:39,900
one of the applets and it has objects

428
00:23:36,000 --> 00:23:43,320
and then the index table exists for each

429
00:23:39,900 --> 00:23:45,690
a platform for each instance of loaded

430
00:23:43,320 --> 00:23:49,139
module so we have an object that

431
00:23:45,690 --> 00:23:50,310
contains code that and and information

432
00:23:49,140 --> 00:23:52,230
about those applets

433
00:23:50,310 --> 00:23:55,020
besides the objects proper we have

434
00:23:52,230 --> 00:23:59,160
access to instances and the length about

435
00:23:55,020 --> 00:24:01,379
100 bytes and we can get and get access

436
00:23:59,160 --> 00:24:04,149
to them it's not important but you can

437
00:24:01,380 --> 00:24:09,580
see that

438
00:24:04,149 --> 00:24:13,399
so there's Musa bite and then 80-82

439
00:24:09,580 --> 00:24:15,678
zero zero zero eight zero zero eight is

440
00:24:13,399 --> 00:24:20,570
the length of the object and eight bytes

441
00:24:15,679 --> 00:24:24,919
and the next starts after hit 80 82 so

442
00:24:20,570 --> 00:24:30,139
then they massive bite this message

443
00:24:24,919 --> 00:24:33,259
short and a zero and Ageing etc so this

444
00:24:30,139 --> 00:24:37,998
is where I can analyze how the OS stores

445
00:24:33,259 --> 00:24:41,239
the objects on the Mystics how they

446
00:24:37,999 --> 00:24:43,970
implement the metadata and we can try to

447
00:24:41,239 --> 00:24:52,059
modify to modify those metadata and

448
00:24:43,970 --> 00:24:55,220
create a hacked object we want to have

449
00:24:52,059 --> 00:24:57,799
loaded applet that went through the

450
00:24:55,220 --> 00:25:03,409
verification or it doesn't contain a

451
00:24:57,799 --> 00:25:07,489
Uniform Code but but which we can use to

452
00:25:03,409 --> 00:25:10,279
do the attack and on smart cards and

453
00:25:07,489 --> 00:25:15,580
secure elements and all solutions that

454
00:25:10,279 --> 00:25:19,970
need to be protected against attack

455
00:25:15,580 --> 00:25:22,189
without the potential Authority so then

456
00:25:19,970 --> 00:25:27,159
we need to do the protection against

457
00:25:22,190 --> 00:25:29,899
glitching so all the other manufacturers

458
00:25:27,159 --> 00:25:32,389
perform this protection in different

459
00:25:29,899 --> 00:25:34,789
ways but they cannot implement it at the

460
00:25:32,389 --> 00:25:37,699
level of a place because applets up in

461
00:25:34,789 --> 00:25:40,729
from implemented they are written not by

462
00:25:37,700 --> 00:25:43,789
the US manufacturers but other companies

463
00:25:40,729 --> 00:25:46,279
serving another OS manufacturer so

464
00:25:43,789 --> 00:25:48,950
that's why glitching can be done at the

465
00:25:46,279 --> 00:25:51,139
level of the applet then so we have the

466
00:25:48,950 --> 00:25:53,899
standard applet and so this code there

467
00:25:51,139 --> 00:25:55,500
often exists on many cards so we have a

468
00:25:53,899 --> 00:25:58,350
reference set

469
00:25:55,500 --> 00:26:00,780
so then API and then returned the data

470
00:25:58,350 --> 00:26:03,209
so that's the whole point of the car

471
00:26:00,780 --> 00:26:06,750
through connects and data do something

472
00:26:03,210 --> 00:26:10,950
with the data and using API sir and then

473
00:26:06,750 --> 00:26:14,100
return something back so what we want to

474
00:26:10,950 --> 00:26:16,200
do we want to damage this reference the

475
00:26:14,100 --> 00:26:18,360
safe reference does not pinpoint the

476
00:26:16,200 --> 00:26:21,270
object an object belonging to this

477
00:26:18,360 --> 00:26:23,189
application but belonging to the race or

478
00:26:21,270 --> 00:26:26,570
another application we can get an access

479
00:26:23,190 --> 00:26:31,200
to it because we found this logical hit

480
00:26:26,570 --> 00:26:34,470
logical vulnerability of the oil so this

481
00:26:31,200 --> 00:26:39,539
is the ideal case in ravage it's more

482
00:26:34,470 --> 00:26:41,130
difficult to simplify our lives so when

483
00:26:39,539 --> 00:26:42,750
it defines time whether we're Dodie

484
00:26:41,130 --> 00:26:46,350
glitching on the car and that's

485
00:26:42,750 --> 00:26:49,130
difficult moment because we do with the

486
00:26:46,350 --> 00:26:51,510
copy as this reference 200 times

487
00:26:49,130 --> 00:26:54,809
but it's already when this attack is

488
00:26:51,510 --> 00:26:56,789
possible or not and we don't copy it 200

489
00:26:54,809 --> 00:26:59,820
times if it's under haplit it does only

490
00:26:56,789 --> 00:27:02,429
one copying of the reference and content

491
00:26:59,820 --> 00:27:04,770
will be the same but more difficult 200

492
00:27:02,429 --> 00:27:06,690
times higher voice instead of spending

493
00:27:04,770 --> 00:27:10,799
one day for an attack you'll have to

494
00:27:06,690 --> 00:27:14,280
spend 200 days yes it is possible but

495
00:27:10,799 --> 00:27:18,299
too difficult and what would we do we'll

496
00:27:14,280 --> 00:27:25,020
copy the link and we send certain that

497
00:27:18,299 --> 00:27:28,020
link the data back if we don't damage it

498
00:27:25,020 --> 00:27:31,100
we shall get the content initial content

499
00:27:28,020 --> 00:27:37,350
if we damaged we get access to other

500
00:27:31,100 --> 00:27:40,370
data but in fact the trouble is that the

501
00:27:37,350 --> 00:27:40,370
vendors add

502
00:27:41,330 --> 00:27:48,359
random delays and latencies and require

503
00:27:45,899 --> 00:28:06,869
different times timing when we send a

504
00:27:48,359 --> 00:28:08,789
command sometimes our measurement of dia

505
00:28:06,869 --> 00:28:14,820
measuring the power I have cut here and

506
00:28:08,789 --> 00:28:17,070
we have one block two blocks and so it's

507
00:28:14,820 --> 00:28:19,799
the same yes the voltage measuring the

508
00:28:17,070 --> 00:28:21,830
voltage or consumption we see that these

509
00:28:19,799 --> 00:28:24,809
are different things if we want to

510
00:28:21,830 --> 00:28:30,349
increase and we want to erase here at a

511
00:28:24,809 --> 00:28:34,678
certain moment we if we don't do any

512
00:28:30,349 --> 00:28:38,908
additional operations we shall just miss

513
00:28:34,679 --> 00:28:40,950
in half of the cases what should be done

514
00:28:38,909 --> 00:28:45,239
there we have a standard solution we

515
00:28:40,950 --> 00:28:48,389
need to do pattern matching

516
00:28:45,239 --> 00:28:52,799
I used special equipment that can be

517
00:28:48,389 --> 00:28:54,840
found in a lab we do such attacks so

518
00:28:52,799 --> 00:29:00,479
it's not a problem for me I come and

519
00:28:54,840 --> 00:29:01,949
take but you don't have it it's more

520
00:29:00,479 --> 00:29:08,070
difficult but then there are standard

521
00:29:01,950 --> 00:29:11,119
solutions for that so we'll find a trace

522
00:29:08,070 --> 00:29:15,509
that looks different and we see three

523
00:29:11,119 --> 00:29:18,269
peaks and nothing near them and then we

524
00:29:15,509 --> 00:29:22,139
shall smooth them even out the trace and

525
00:29:18,269 --> 00:29:26,009
the latency is only a few nanoseconds so

526
00:29:22,139 --> 00:29:29,728
every time we execute no matter how many

527
00:29:26,009 --> 00:29:31,799
operations we have before our we are

528
00:29:29,729 --> 00:29:34,229
getting the signal at the very moment

529
00:29:31,799 --> 00:29:39,119
when we get this type of energy

530
00:29:34,229 --> 00:29:41,230
consumption this is all you should do in

531
00:29:39,119 --> 00:29:43,629
order to start and

532
00:29:41,230 --> 00:29:46,240
and then what work are we getting in

533
00:29:43,630 --> 00:29:51,809
this case I used electromagnetic

534
00:29:46,240 --> 00:29:55,269
glitching so what I could see XY is just

535
00:29:51,809 --> 00:29:57,309
a migration from top button to across

536
00:29:55,269 --> 00:30:01,210
against the ship I didn't open the card

537
00:29:57,309 --> 00:30:03,700
I tested at this card and the same as it

538
00:30:01,210 --> 00:30:08,289
was used in the protected elements and

539
00:30:03,700 --> 00:30:13,990
in plastic casing so we seed with a

540
00:30:08,289 --> 00:30:17,049
green sand sand by swamp in our output

541
00:30:13,990 --> 00:30:20,380
so it will send us some data like 1 to 8

542
00:30:17,049 --> 00:30:22,750
if we get them it means nothing has been

543
00:30:20,380 --> 00:30:26,799
damaged we know it's green it's not what

544
00:30:22,750 --> 00:30:29,230
we wanted to get yellow means that we're

545
00:30:26,799 --> 00:30:32,049
reaching and we're not getting any

546
00:30:29,230 --> 00:30:34,240
answer because we've probably made a

547
00:30:32,049 --> 00:30:36,940
strong glitch or with damaged stuff and

548
00:30:34,240 --> 00:30:38,710
that prevents us from executing the code

549
00:30:36,940 --> 00:30:42,399
and the red is what we want to find

550
00:30:38,710 --> 00:30:45,909
these are the dots that when we send our

551
00:30:42,399 --> 00:30:50,860
command execute the glitching and got

552
00:30:45,909 --> 00:30:54,220
some other response not 1 2 3 5 8 7 what

553
00:30:50,860 --> 00:30:57,129
we expect that we damaged a link to our

554
00:30:54,220 --> 00:31:00,639
object and now it doesn't show to the

555
00:30:57,130 --> 00:31:06,490
object that we had on the buffer but at

556
00:31:00,639 --> 00:31:11,668
some other element and this is a result

557
00:31:06,490 --> 00:31:16,720
initial we linked to our object was 91

558
00:31:11,669 --> 00:31:21,789
dr. with damaged it most so it's not a

559
00:31:16,720 --> 00:31:27,669
good result because it's when we send it

560
00:31:21,789 --> 00:31:29,980
to API code it's it's frequent but it's

561
00:31:27,669 --> 00:31:31,720
not very good so we can repeat this

562
00:31:29,980 --> 00:31:33,730
attack then we send the command with

563
00:31:31,720 --> 00:31:36,519
glitch we observe the result and do it

564
00:31:33,730 --> 00:31:38,799
again and again to get all those results

565
00:31:36,519 --> 00:31:44,500
we performed approximately 2 million

566
00:31:38,799 --> 00:31:48,400
attempts it took 3 days non-stop some 70

567
00:31:44,500 --> 00:31:55,660
hours or so as we can see

568
00:31:48,400 --> 00:31:57,340
it's it's close to 0 1 2 8 and 89 is not

569
00:31:55,660 --> 00:32:02,670
our applet not a test

570
00:31:57,340 --> 00:32:05,470
Appling 94 and a zero is our applet

571
00:32:02,670 --> 00:32:07,780
these damages are not very interesting

572
00:32:05,470 --> 00:32:11,500
because of these objects belong to us

573
00:32:07,780 --> 00:32:13,510
there is no firewall bypass but other

574
00:32:11,500 --> 00:32:17,740
damages are much more interesting

575
00:32:13,510 --> 00:32:19,690
because that's how that's the way we did

576
00:32:17,740 --> 00:32:22,540
it with a logical attacked without our

577
00:32:19,690 --> 00:32:26,320
malicious code at the applet we are

578
00:32:22,540 --> 00:32:30,250
getting data from other objects and in

579
00:32:26,320 --> 00:32:35,409
one case one of the references I guess

580
00:32:30,250 --> 00:32:39,400
it was one a it it's showing at the it's

581
00:32:35,410 --> 00:32:44,140
pointing at the instance and each applet

582
00:32:39,400 --> 00:32:49,690
the instance contains data and for

583
00:32:44,140 --> 00:32:52,330
applet and our ad is every applet has

584
00:32:49,690 --> 00:32:55,660
unique identifier at the first five pipe

585
00:32:52,330 --> 00:33:00,970
it's already and if you Google they

586
00:32:55,660 --> 00:33:03,760
belong to the same to a bank that with a

587
00:33:00,970 --> 00:33:08,980
standard already so we have already

588
00:33:03,760 --> 00:33:11,350
stopped an applet and so we've

589
00:33:08,980 --> 00:33:15,490
discovered that this applet belongs to a

590
00:33:11,350 --> 00:33:18,159
bank our purpose was to check that first

591
00:33:15,490 --> 00:33:20,350
we discovered logical vulnerability and

592
00:33:18,160 --> 00:33:23,760
still they're illogical attacks vendors

593
00:33:20,350 --> 00:33:26,139
try to address those issues add

594
00:33:23,760 --> 00:33:28,030
additional checks as we told the

595
00:33:26,140 --> 00:33:29,730
classical we thought classic attacks

596
00:33:28,030 --> 00:33:34,389
conventional attacks don't work anymore

597
00:33:29,730 --> 00:33:38,530
but many systemic challenges give the

598
00:33:34,390 --> 00:33:41,260
opportunity to the attacker to find an

599
00:33:38,530 --> 00:33:45,639
API that doesn't perform all the checks

600
00:33:41,260 --> 00:33:48,730
a global platform API and

601
00:33:45,640 --> 00:33:51,550
or that we used as we saw it's either

602
00:33:48,730 --> 00:33:57,250
has more privileges and he can get to a

603
00:33:51,550 --> 00:34:00,550
larger number of objects or just the

604
00:33:57,250 --> 00:34:03,580
Kudus has been subject to lesser checks

605
00:34:00,550 --> 00:34:05,080
we had no absolutes to the code so we

606
00:34:03,580 --> 00:34:07,840
cannot who could not say what was

607
00:34:05,080 --> 00:34:12,040
happening there we could also get access

608
00:34:07,840 --> 00:34:14,830
to a CP secure channel protocol that

609
00:34:12,040 --> 00:34:17,350
should be the main secret on the court

610
00:34:14,830 --> 00:34:24,239
and they were kept at the flesh and open

611
00:34:17,350 --> 00:34:24,239
text and not even encrypted or encrypted

612
00:34:27,449 --> 00:34:38,919
invisibly for API and with our test app

613
00:34:31,449 --> 00:34:41,230
that we could use one glitch once in the

614
00:34:38,920 --> 00:34:43,750
application you can damage the link and

615
00:34:41,230 --> 00:34:48,730
use the same logical vulnerability but

616
00:34:43,750 --> 00:34:51,550
without our code on the court and the

617
00:34:48,730 --> 00:34:54,190
last that the logical attacks could be

618
00:34:51,550 --> 00:34:58,510
used as a first step most often we don't

619
00:34:54,190 --> 00:35:00,520
have execution at the Accord but if we

620
00:34:58,510 --> 00:35:03,370
could though find a logical machine find

621
00:35:00,520 --> 00:35:07,150
the logical owner abilities and then use

622
00:35:03,370 --> 00:35:10,509
them and it is one of the possible way

623
00:35:07,150 --> 00:35:13,930
so for the attacker to exploit the

624
00:35:10,510 --> 00:35:16,440
system thank you for your attention if

625
00:35:13,930 --> 00:35:19,658
you have questions I shall be at

626
00:35:16,440 --> 00:35:19,659
[Applause]

627
00:35:27,850 --> 00:35:32,509
thank you for this for use for the

628
00:35:30,950 --> 00:35:35,359
presentation I have several questions

629
00:35:32,510 --> 00:35:41,890
when you were speaking about a use of AI

630
00:35:35,360 --> 00:35:41,890
for firewall restrictions you focused on

631
00:35:42,430 --> 00:35:47,839
access to the object was the indices of

632
00:35:45,860 --> 00:35:49,610
our ever when you glitch new words as

633
00:35:47,840 --> 00:35:53,090
correct me if I'm wrong the logical

634
00:35:49,610 --> 00:35:55,880
vulnerabilities can be used both for the

635
00:35:53,090 --> 00:35:58,550
evident firewall well absolutely

636
00:35:55,880 --> 00:36:02,450
yes there is no difference if the don't

637
00:35:58,550 --> 00:36:05,090
check out the context test so and

638
00:36:02,450 --> 00:36:07,460
belonging of the object you can both get

639
00:36:05,090 --> 00:36:09,710
access to applet of OS and between the

640
00:36:07,460 --> 00:36:11,990
applets so initially you selected those

641
00:36:09,710 --> 00:36:14,930
that are more interesting yes because

642
00:36:11,990 --> 00:36:17,359
they can contain secrets of OS that are

643
00:36:14,930 --> 00:36:21,339
much more interesting for us and the

644
00:36:17,360 --> 00:36:25,370
second question about glitching and so

645
00:36:21,340 --> 00:36:29,000
in order to glitch real applet that you

646
00:36:25,370 --> 00:36:31,400
don't control you have to match the

647
00:36:29,000 --> 00:36:33,980
following conditions first after the

648
00:36:31,400 --> 00:36:37,580
applet changes reference it should use a

649
00:36:33,980 --> 00:36:39,950
vulnerable API because again yes then

650
00:36:37,580 --> 00:36:41,870
file otherwise firewall will protected

651
00:36:39,950 --> 00:36:44,720
and without ever knowing the code you

652
00:36:41,870 --> 00:36:46,810
have to find a glitching place because

653
00:36:44,720 --> 00:36:50,810
it's not clear how do you do it

654
00:36:46,810 --> 00:36:54,140
how do you comment these are the two

655
00:36:50,810 --> 00:36:58,100
conditions yes that is true we need to

656
00:36:54,140 --> 00:37:03,920
know it and it's easy in some cases for

657
00:36:58,100 --> 00:37:06,890
instance when we get a send some command

658
00:37:03,920 --> 00:37:09,740
to our banking application that we have

659
00:37:06,890 --> 00:37:12,440
under a the returns with the data most

660
00:37:09,740 --> 00:37:14,629
probably they used sandbox on its it

661
00:37:12,440 --> 00:37:16,310
cannot be sure because may may use

662
00:37:14,630 --> 00:37:18,440
something else but there are three

663
00:37:16,310 --> 00:37:21,740
opportunities so it's easy to guess what

664
00:37:18,440 --> 00:37:24,140
they use something similar and if we

665
00:37:21,740 --> 00:37:26,660
don't have a code that will have a help

666
00:37:24,140 --> 00:37:30,230
us to glitch easily to dig leach easily

667
00:37:26,660 --> 00:37:32,390
when this link will be copied you can

668
00:37:30,230 --> 00:37:34,250
try to damage at the moment of coping so

669
00:37:32,390 --> 00:37:37,609
we don't need all this it will be more

670
00:37:34,250 --> 00:37:41,980
difficult but it's possible

671
00:37:37,610 --> 00:37:44,510
and the question is to what expand the

672
00:37:41,980 --> 00:37:47,150
following strategies viable you take

673
00:37:44,510 --> 00:37:50,060
them occurred with the known keys and

674
00:37:47,150 --> 00:37:52,280
then you load the applets and somehow

675
00:37:50,060 --> 00:37:56,600
you get the codes from other applets who

676
00:37:52,280 --> 00:38:02,510
it okay is it possible or it won't have

677
00:37:56,600 --> 00:38:05,270
the code it used to be very easy in case

678
00:38:02,510 --> 00:38:07,640
when we have our application and the

679
00:38:05,270 --> 00:38:13,550
data is mixed and very often metadata

680
00:38:07,640 --> 00:38:16,069
used to be all together now much

681
00:38:13,550 --> 00:38:19,460
metadata are brought to the index tables

682
00:38:16,070 --> 00:38:21,350
are not on the flesh anymore somewhere

683
00:38:19,460 --> 00:38:24,170
else probably outside the virtual

684
00:38:21,350 --> 00:38:27,200
machine so method on metadata are

685
00:38:24,170 --> 00:38:31,430
difficult to get at some current but the

686
00:38:27,200 --> 00:38:33,919
code if we have a logical attack we can

687
00:38:31,430 --> 00:38:37,940
use it in this case for instance of what

688
00:38:33,920 --> 00:38:39,890
we are getting using this object

689
00:38:37,940 --> 00:38:42,230
contains part of the code it doesn't

690
00:38:39,890 --> 00:38:44,420
contain the whole because then we are

691
00:38:42,230 --> 00:38:47,210
getting a hundred part and an exception

692
00:38:44,420 --> 00:38:50,150
but at least we can get part of it if we

693
00:38:47,210 --> 00:38:53,660
can modify this metadata we can also try

694
00:38:50,150 --> 00:38:58,490
to read more memory so it is possible

695
00:38:53,660 --> 00:39:01,069
then a couple of questions all the cards

696
00:38:58,490 --> 00:39:05,390
that have protection through hardware

697
00:39:01,070 --> 00:39:09,610
tools will not work just because when

698
00:39:05,390 --> 00:39:14,680
you have logical mistakes in the API

699
00:39:09,610 --> 00:39:18,530
hardware protection should prevent it

700
00:39:14,680 --> 00:39:20,509
usually when we have OSS system it has

701
00:39:18,530 --> 00:39:23,980
all the privileges it should have access

702
00:39:20,510 --> 00:39:27,110
to all the objects so the hardware

703
00:39:23,980 --> 00:39:30,580
security will be switched off

704
00:39:27,110 --> 00:39:30,580
we have MMU

705
00:39:31,260 --> 00:39:38,400
if we get the privileges of OS we can

706
00:39:35,609 --> 00:39:43,950
get access and API will be performed

707
00:39:38,400 --> 00:39:46,890
from lawyers thank you for the

708
00:39:43,950 --> 00:39:50,430
presentations and we have a question you

709
00:39:46,890 --> 00:39:54,540
said that if you upload some applet more

710
00:39:50,430 --> 00:39:57,540
or less you can get access to memory but

711
00:39:54,540 --> 00:39:59,640
if you cannot upload an applet or

712
00:39:57,540 --> 00:40:03,240
download the applet to what extent you

713
00:39:59,640 --> 00:40:06,180
can use Grich or what else maybe somehow

714
00:40:03,240 --> 00:40:08,580
you can dismantle this assembles the

715
00:40:06,180 --> 00:40:14,790
card and look at the data or it's not

716
00:40:08,580 --> 00:40:16,859
very it would it be simple yes we could

717
00:40:14,790 --> 00:40:20,730
but the trouble is that are the smart

718
00:40:16,859 --> 00:40:23,160
cards everything is one one chip it's

719
00:40:20,730 --> 00:40:25,650
not separate flash or processor or

720
00:40:23,160 --> 00:40:29,069
memory in order to get direct access

721
00:40:25,650 --> 00:40:31,859
there are types different types of

722
00:40:29,070 --> 00:40:36,450
attacks for this type of protection like

723
00:40:31,859 --> 00:40:40,490
bank cards when they are certified they

724
00:40:36,450 --> 00:40:46,919
consider attacks with through focused

725
00:40:40,490 --> 00:40:50,819
and when we can just send cut cut the

726
00:40:46,920 --> 00:40:53,040
connection between various parts at the

727
00:40:50,820 --> 00:40:57,000
very cheap and it's possible or for

728
00:40:53,040 --> 00:41:02,640
instance use of micro robbing when you

729
00:40:57,000 --> 00:41:05,340
connect to various parts on some on the

730
00:41:02,640 --> 00:41:10,920
chip but it's difficult because it's

731
00:41:05,340 --> 00:41:12,440
it's measured in nanometers it's it is

732
00:41:10,920 --> 00:41:15,170
difficult

733
00:41:12,440 --> 00:41:18,529
such attacks cost much more than logical

734
00:41:15,170 --> 00:41:22,839
attacks personified thank you

735
00:41:18,529 --> 00:41:26,210
as for the glitching Gigio performance

736
00:41:22,839 --> 00:41:31,369
rfid or a contact interface in this case

737
00:41:26,210 --> 00:41:33,380
the card contained both contact and

738
00:41:31,369 --> 00:41:37,579
contactless and we use content because

739
00:41:33,380 --> 00:41:40,599
it's more stable you can use a complete

740
00:41:37,579 --> 00:41:43,069
list but it's more difficult and I

741
00:41:40,599 --> 00:41:45,500
understand the specification doesn't

742
00:41:43,069 --> 00:41:48,890
give any difficulty is the same when you

743
00:41:45,500 --> 00:41:53,299
send the data no no no no difference we

744
00:41:48,890 --> 00:41:58,629
use MFI and contactless then probably we

745
00:41:53,299 --> 00:41:58,630
shall be in the way of communication I

746
00:42:01,420 --> 00:42:08,000
have a question recommend about

747
00:42:05,829 --> 00:42:10,369
historical bytes and attributes that

748
00:42:08,000 --> 00:42:13,730
this function is a rule isolate is

749
00:42:10,369 --> 00:42:16,509
isolated at the production stage and in

750
00:42:13,730 --> 00:42:20,900
a real card you won't find any IP IP

751
00:42:16,509 --> 00:42:24,079
that you can call by interface to the

752
00:42:20,900 --> 00:42:27,289
interface to do it so it will be used to

753
00:42:24,079 --> 00:42:28,970
get out the access code it will you will

754
00:42:27,289 --> 00:42:31,009
not be able to do it in real life and

755
00:42:28,970 --> 00:42:34,299
the second in the process of glitching

756
00:42:31,009 --> 00:42:39,740
how many cards you spoiled personally

757
00:42:34,299 --> 00:42:44,390
good question historical parts depend on

758
00:42:39,740 --> 00:42:47,899
the producer from the applet producer

759
00:42:44,390 --> 00:42:48,650
yes epic producer yes depends a lot it

760
00:42:47,900 --> 00:42:52,460
yes

761
00:42:48,650 --> 00:42:56,150
as for the card logical attacks well I

762
00:42:52,460 --> 00:42:59,019
probably killed many more cards not in

763
00:42:56,150 --> 00:43:01,609
this case but when I performed

764
00:42:59,019 --> 00:43:05,930
modification of metadata it's easier to

765
00:43:01,609 --> 00:43:08,740
damage the data and OS as well I guess I

766
00:43:05,930 --> 00:43:11,529
killed 20 or 30 cards

767
00:43:08,740 --> 00:43:13,209
as if I worked all the time and they

768
00:43:11,530 --> 00:43:15,760
just left for a couple of weeks

769
00:43:13,210 --> 00:43:18,250
Toto be glitching and at a certain

770
00:43:15,760 --> 00:43:23,670
moment it died but I used only one card

771
00:43:18,250 --> 00:43:26,319
changing nothing one small question

772
00:43:23,670 --> 00:43:38,980
that's where you were showing the

773
00:43:26,319 --> 00:43:41,500
statistics of the pieces of memory it

774
00:43:38,980 --> 00:43:45,990
means that the vendor uses his own

775
00:43:41,500 --> 00:43:49,089
patched machine a machine every vendor

776
00:43:45,990 --> 00:43:51,930
producers their own they write the tests

777
00:43:49,089 --> 00:43:58,930
and depending on what they wanted to

778
00:43:51,930 --> 00:44:02,848
check they these are the results so the

779
00:43:58,930 --> 00:44:06,310
vendors self is cheap with this OS in it

780
00:44:02,849 --> 00:44:10,569
this little trick I mean the chip

781
00:44:06,310 --> 00:44:13,660
producers in many cases they produce OS

782
00:44:10,569 --> 00:44:17,170
and Java machine so the applet producer

783
00:44:13,660 --> 00:44:20,200
has nothing to cannot change the job if

784
00:44:17,170 --> 00:44:22,630
we're not using analogical attacks no

785
00:44:20,200 --> 00:44:25,480
than know if you get access to the

786
00:44:22,630 --> 00:44:27,849
object of all operation rating system

787
00:44:25,480 --> 00:44:32,680
that's what you can do you will be an

788
00:44:27,849 --> 00:44:37,750
attacker for the in Mir card if this

789
00:44:32,680 --> 00:44:42,180
Java machine is certified or not I don't

790
00:44:37,750 --> 00:44:42,180
know nothing about Mir cards

791
00:44:47,690 --> 00:44:51,450
thank you for your presentation I have

792
00:44:50,700 --> 00:44:53,460
two questions

793
00:44:51,450 --> 00:44:57,240
so what model of attacker did you

794
00:44:53,460 --> 00:45:05,930
consider in your research and the second

795
00:44:57,240 --> 00:45:05,930
question is how do you estimate the

796
00:45:06,170 --> 00:45:11,849
probability of which attacks for the

797
00:45:08,670 --> 00:45:16,289
chips where we don't know the key we

798
00:45:11,849 --> 00:45:24,269
cannot bring the other there and there

799
00:45:16,289 --> 00:45:28,859
is this attack applicable the first

800
00:45:24,269 --> 00:45:32,250
model of an attacker is very simple it's

801
00:45:28,859 --> 00:45:34,558
either we have an attacker who has no

802
00:45:32,250 --> 00:45:36,240
access to the code and who can do which

803
00:45:34,559 --> 00:45:41,430
if he knows nothing we shall try to

804
00:45:36,240 --> 00:45:44,368
glitch and some of my colleagues try

805
00:45:41,430 --> 00:45:47,339
attacked with no control at all over the

806
00:45:44,369 --> 00:45:49,109
codes and glitching without knowing

807
00:45:47,339 --> 00:45:54,150
anything there is a chance but the

808
00:45:49,109 --> 00:45:59,848
chance is not high so at the exit we get

809
00:45:54,150 --> 00:46:06,019
some part well we don't know nothing

810
00:45:59,849 --> 00:46:06,019
about those bytes what to do next

811
00:46:07,039 --> 00:46:14,869
even if we know nothing if we reach a

812
00:46:12,210 --> 00:46:21,210
certain API it's just a wild guess

813
00:46:14,869 --> 00:46:23,160
we use this key to 95 if we are not if

814
00:46:21,210 --> 00:46:29,069
we cannot do that we see that it's a low

815
00:46:23,160 --> 00:46:32,129
key and the logical attacks the producer

816
00:46:29,069 --> 00:46:34,288
the OS vendor and applet vendor do not

817
00:46:32,130 --> 00:46:39,930
trust each other applets may be produced

818
00:46:34,289 --> 00:46:42,539
by different people and the the code we

819
00:46:39,930 --> 00:46:43,950
so we cannot you know I'm not talking

820
00:46:42,539 --> 00:46:48,630
about us there are people who produce

821
00:46:43,950 --> 00:46:51,460
applets there are many systems

822
00:46:48,630 --> 00:46:54,190
make a place for payment system that

823
00:46:51,460 --> 00:46:56,290
they don't trust each other and they may

824
00:46:54,190 --> 00:46:58,480
sit on the same card or we have a

825
00:46:56,290 --> 00:47:00,520
protected secured element on our cell

826
00:46:58,480 --> 00:47:02,770
phone that contains several different

827
00:47:00,520 --> 00:47:06,790
applets and in this case logical attacks

828
00:47:02,770 --> 00:47:10,330
make sense because not all applets on

829
00:47:06,790 --> 00:47:12,880
one protected element or from the same

830
00:47:10,330 --> 00:47:14,069
producer and those producers don't trust

831
00:47:12,880 --> 00:47:20,110
each other

832
00:47:14,070 --> 00:47:26,040
the glitch when we cannot bring in the

833
00:47:20,110 --> 00:47:29,050
code so how repeatable this attack is

834
00:47:26,040 --> 00:47:31,060
difficult to say if we know the code but

835
00:47:29,050 --> 00:47:33,940
we don't control it we don't know the

836
00:47:31,060 --> 00:47:38,160
code then we just try and see what

837
00:47:33,940 --> 00:47:38,160
happens just like any attacker would do

838
00:47:47,120 --> 00:47:50,219
[Music]

839
00:47:51,300 --> 00:47:59,500
so there are no more questions please

840
00:47:53,740 --> 00:48:02,578
select two best questions thank you

841
00:47:59,500 --> 00:48:02,579
[Applause]

