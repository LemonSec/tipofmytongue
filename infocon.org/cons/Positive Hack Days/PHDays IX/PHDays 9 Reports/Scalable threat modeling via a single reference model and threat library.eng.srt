1
00:00:00,439 --> 00:00:06,230
Minister Koizumi hell yeah engineer pub

2
00:00:03,810 --> 00:00:11,000
is a person occipital as a company pawn

3
00:00:06,230 --> 00:00:13,590
of the classy hotel visit along with

4
00:00:11,000 --> 00:00:17,369
popular I would like to speak about the

5
00:00:13,590 --> 00:00:20,850
popular topic of services development

6
00:00:17,369 --> 00:00:25,380
cycle of secure software and in

7
00:00:20,850 --> 00:00:32,179
particular I would like to discuss the

8
00:00:25,380 --> 00:00:32,179
design stage and modeling the threats

9
00:00:32,299 --> 00:00:40,530
many people underestimate at this stage

10
00:00:36,590 --> 00:00:44,879
because they believe it's a superfluous

11
00:00:40,530 --> 00:00:51,690
you can just take a checklist and give

12
00:00:44,879 --> 00:00:53,610
it to the developers security that's how

13
00:00:51,690 --> 00:00:55,920
you implement your security in fact it's

14
00:00:53,610 --> 00:00:59,129
not exactly like that so modeling these

15
00:00:55,920 --> 00:01:02,180
threats simulation of threats is a link

16
00:00:59,129 --> 00:01:07,048
between the requirements that we

17
00:01:02,180 --> 00:01:09,390
determined in our first phase where

18
00:01:07,049 --> 00:01:14,900
we'll be to turn the risks for the

19
00:01:09,390 --> 00:01:19,110
application data and the confidentiality

20
00:01:14,900 --> 00:01:27,630
it is done uttanasana Kotaku shield

21
00:01:19,110 --> 00:01:31,619
lepida lasagna and so so director of

22
00:01:27,630 --> 00:01:36,149
attack so modeling of threats it

23
00:01:31,619 --> 00:01:42,090
connects the stage of requirements with

24
00:01:36,150 --> 00:01:43,619
implementation so threat modeling and so

25
00:01:42,090 --> 00:01:46,890
all of you yes

26
00:01:43,619 --> 00:01:51,630
so we started to model threat starting

27
00:01:46,890 --> 00:01:54,860
from this primitive step as using using

28
00:01:51,630 --> 00:01:57,619
free free program

29
00:01:54,860 --> 00:02:01,760
like trance rat modeling tool that can

30
00:01:57,620 --> 00:02:04,970
could be downloaded from Microsoft site

31
00:02:01,760 --> 00:02:07,220
for frames and everything that you do is

32
00:02:04,970 --> 00:02:09,889
you determine the diagram the

33
00:02:07,220 --> 00:02:13,010
architectural application then you

34
00:02:09,889 --> 00:02:17,179
determine how data come in and how they

35
00:02:13,010 --> 00:02:22,579
and then you get this eventually others

36
00:02:17,180 --> 00:02:28,310
huge lots of threads you get and all

37
00:02:22,580 --> 00:02:32,300
threats so they require filtration they

38
00:02:28,310 --> 00:02:35,390
require prioritization to be prioritized

39
00:02:32,300 --> 00:02:37,400
so intended then the clear module

40
00:02:35,390 --> 00:02:39,829
prioritization is very important because

41
00:02:37,400 --> 00:02:43,700
threats lots and that's why we need to

42
00:02:39,830 --> 00:02:47,390
prioritize and and most threats are not

43
00:02:43,700 --> 00:02:50,209
applicable so then excessive database

44
00:02:47,390 --> 00:02:52,970
weak access to database some are not

45
00:02:50,209 --> 00:02:57,950
relevant at all and this way can be

46
00:02:52,970 --> 00:03:01,100
disregarded and so when we deployed it

47
00:02:57,950 --> 00:03:04,459
and we started out with this and we came

48
00:03:01,100 --> 00:03:07,730
to the conclusion that that this process

49
00:03:04,459 --> 00:03:11,030
is very time-consuming because we need

50
00:03:07,730 --> 00:03:16,160
to see each threat classifieds threat

51
00:03:11,030 --> 00:03:20,810
then then study each threat and in

52
00:03:16,160 --> 00:03:25,130
accordance with this model verification

53
00:03:20,810 --> 00:03:27,860
should be done and then eventually to

54
00:03:25,130 --> 00:03:32,690
either accept this threat or reject the

55
00:03:27,860 --> 00:03:36,140
threat the most important problem of

56
00:03:32,690 --> 00:03:40,070
this approach is that so then the study

57
00:03:36,140 --> 00:03:41,140
the study of those threats takes a lot

58
00:03:40,070 --> 00:03:44,680
of time

59
00:03:41,140 --> 00:03:47,980
a lot of time and there's why using this

60
00:03:44,680 --> 00:03:50,020
model of security advises security

61
00:03:47,980 --> 00:03:55,299
champion whether security specialist who

62
00:03:50,020 --> 00:03:59,680
is an expert and sdlc and security

63
00:03:55,300 --> 00:04:02,410
champion software the guy who is has

64
00:03:59,680 --> 00:04:05,410
been seconded so by the team so it is

65
00:04:02,410 --> 00:04:08,859
responsible for the project for specific

66
00:04:05,410 --> 00:04:11,680
project and as and on the basis of this

67
00:04:08,860 --> 00:04:15,250
interaction so they the deployment of

68
00:04:11,680 --> 00:04:17,410
still see is is built to what extent

69
00:04:15,250 --> 00:04:21,640
this interaction will be efficient to

70
00:04:17,410 --> 00:04:24,190
the same extent the modeling of threats

71
00:04:21,640 --> 00:04:28,020
will be efficient so one comes with the

72
00:04:24,190 --> 00:04:31,630
other and much depends on what questions

73
00:04:28,020 --> 00:04:33,310
will set to security champion some what

74
00:04:31,630 --> 00:04:37,120
recommendations will need to give the

75
00:04:33,310 --> 00:04:39,490
security champion and what what is the

76
00:04:37,120 --> 00:04:42,460
framework and then there's the proper

77
00:04:39,490 --> 00:04:45,610
questions put to the security champion

78
00:04:42,460 --> 00:04:50,080
and depends on the on the clarity of

79
00:04:45,610 --> 00:04:53,350
modeling and precision of modeling and

80
00:04:50,080 --> 00:04:57,669
the regional process looks like this so

81
00:04:53,350 --> 00:05:01,660
all the threats that you get we get we

82
00:04:57,669 --> 00:05:06,940
request afire them based on our risks

83
00:05:01,660 --> 00:05:09,640
based on on a factor of attack based on

84
00:05:06,940 --> 00:05:13,990
our profiles of attackers that could be

85
00:05:09,640 --> 00:05:18,070
dodging us exogenous attackers and based

86
00:05:13,990 --> 00:05:23,310
on the data involved and the level of

87
00:05:18,070 --> 00:05:23,310
confidentiality clearance availability

88
00:05:23,580 --> 00:05:36,010
and then we always how this identified

89
00:05:31,600 --> 00:05:36,950
threats who assign to the project team

90
00:05:36,010 --> 00:05:39,560
and

91
00:05:36,950 --> 00:05:43,250
they and then they do the investigation

92
00:05:39,560 --> 00:05:45,950
as a rather destroyed is applicable to

93
00:05:43,250 --> 00:05:48,530
this specific hurtful for them is it

94
00:05:45,950 --> 00:05:51,080
irrelevant for them and if they take it

95
00:05:48,530 --> 00:05:54,619
as a threat than they do the

96
00:05:51,080 --> 00:05:56,930
implementation so the weaknesses of the

97
00:05:54,620 --> 00:06:00,440
model are around this is a

98
00:05:56,930 --> 00:06:03,170
non-transparent process for the security

99
00:06:00,440 --> 00:06:06,290
adviser because we don't know whether

100
00:06:03,170 --> 00:06:09,350
they the team did it right the

101
00:06:06,290 --> 00:06:13,190
mitigation right or wrong and whether

102
00:06:09,350 --> 00:06:17,170
they did the investigation correctly and

103
00:06:13,190 --> 00:06:20,930
there is no feedback with the security

104
00:06:17,170 --> 00:06:24,350
commander then another thing that the

105
00:06:20,930 --> 00:06:29,360
security command is not they're not

106
00:06:24,350 --> 00:06:33,530
working very hard so we did it once this

107
00:06:29,360 --> 00:06:36,680
cycle several cycles and every time we

108
00:06:33,530 --> 00:06:38,989
realized we had a modeling threat

109
00:06:36,680 --> 00:06:41,300
modeling takes too much fun and we

110
00:06:38,990 --> 00:06:47,750
started to think how can you improve it

111
00:06:41,300 --> 00:06:52,760
and we decided that why don't we map

112
00:06:47,750 --> 00:06:55,300
most all threats to beginning and in our

113
00:06:52,760 --> 00:06:58,700
security practices concerning

114
00:06:55,300 --> 00:07:01,250
configuration and input one and put one

115
00:06:58,700 --> 00:07:04,400
set against the other infrastructure

116
00:07:01,250 --> 00:07:08,080
solutions and and and then and put it

117
00:07:04,400 --> 00:07:12,500
into a special model so that we define

118
00:07:08,080 --> 00:07:15,159
they already finished ready model that

119
00:07:12,500 --> 00:07:18,610
we can we give the team to developer and

120
00:07:15,160 --> 00:07:22,250
all they need is to implement the

121
00:07:18,610 --> 00:07:25,370
originated security practices finished

122
00:07:22,250 --> 00:07:28,970
and don't do any investigation and no

123
00:07:25,370 --> 00:07:30,920
need to do that and not to spend time

124
00:07:28,970 --> 00:07:35,710
for the investigation of threats and not

125
00:07:30,920 --> 00:07:38,900
to look how to mitigate this specific

126
00:07:35,710 --> 00:07:42,789
threat on a specific platform and the

127
00:07:38,900 --> 00:07:42,789
specific solution etcetera

128
00:07:43,229 --> 00:07:51,520
so we followed on this process of

129
00:07:47,129 --> 00:07:54,490
storing mapping how security practices

130
00:07:51,520 --> 00:07:57,068
and threats of mapping in reference

131
00:07:54,490 --> 00:08:00,490
model return it into reference model and

132
00:07:57,069 --> 00:08:05,379
regard this process and so when we give

133
00:08:00,490 --> 00:08:08,649
the team our model so safe model where

134
00:08:05,379 --> 00:08:12,909
all the mitigations are observed and all

135
00:08:08,649 --> 00:08:16,240
the threats are identified and mitigated

136
00:08:12,909 --> 00:08:18,639
and all we have to do is is to do the

137
00:08:16,240 --> 00:08:26,289
verification of their architecture and

138
00:08:18,639 --> 00:08:31,689
their code and and to implement this so

139
00:08:26,289 --> 00:08:36,179
this is a this is a model example where

140
00:08:31,689 --> 00:08:39,130
we implemented many security patters gmz

141
00:08:36,179 --> 00:08:43,328
if you have a confidential data and you

142
00:08:39,130 --> 00:08:45,670
need to protect it and you need to

143
00:08:43,328 --> 00:08:49,540
identify data storage and put it in a

144
00:08:45,670 --> 00:08:51,610
different close the network so then we

145
00:08:49,540 --> 00:08:55,959
started to think about the accuracy of

146
00:08:51,610 --> 00:09:00,459
our threat modeling and actually we

147
00:08:55,959 --> 00:09:03,430
always dealt with general threats not

148
00:09:00,459 --> 00:09:06,339
technology specific threats so we have a

149
00:09:03,430 --> 00:09:09,939
threat for example the tempering

150
00:09:06,339 --> 00:09:15,699
information to score for specific data

151
00:09:09,940 --> 00:09:19,209
flows and we understand that there's

152
00:09:15,699 --> 00:09:21,279
this data flow can so they can be

153
00:09:19,209 --> 00:09:26,768
different protocols that they could be

154
00:09:21,279 --> 00:09:31,630
different variety variety of data move

155
00:09:26,769 --> 00:09:35,019
around so the problem had to do the

156
00:09:31,630 --> 00:09:38,050
elevation of privilege evasion of

157
00:09:35,019 --> 00:09:40,990
privilege so could be

158
00:09:38,050 --> 00:09:43,449
exploited differently in different

159
00:09:40,990 --> 00:09:47,269
different service of different servers

160
00:09:43,449 --> 00:09:51,290
on different platforms and jinx for

161
00:09:47,269 --> 00:09:53,300
example and it could be a module which

162
00:09:51,290 --> 00:09:56,540
you forgot to turn off and the attacker

163
00:09:53,300 --> 00:09:59,630
attacked then and do the remote code

164
00:09:56,540 --> 00:10:02,870
execution and in a posh it could be a

165
00:09:59,630 --> 00:10:05,290
different module so that I could there

166
00:10:02,870 --> 00:10:10,190
could actually address the same issue

167
00:10:05,290 --> 00:10:16,040
and had the same problem etc for these

168
00:10:10,190 --> 00:10:18,579
threats technology specific for a

169
00:10:16,040 --> 00:10:22,550
specific application or platform

170
00:10:18,579 --> 00:10:27,620
database and so on so at the next stage

171
00:10:22,550 --> 00:10:30,939
we try to identify such threats with

172
00:10:27,620 --> 00:10:36,730
every technology of our model so and

173
00:10:30,940 --> 00:10:36,730
gradually we accumulated these data a

174
00:10:37,779 --> 00:10:44,360
determined we found so-called a library

175
00:10:41,120 --> 00:10:47,209
of threats where we keep all the

176
00:10:44,360 --> 00:10:50,810
information about all the threats

177
00:10:47,209 --> 00:10:55,479
it may be both general and nature

178
00:10:50,810 --> 00:10:59,630
threats those that use this specific

179
00:10:55,480 --> 00:11:07,699
technology and again as GPS and

180
00:10:59,630 --> 00:11:10,899
processes and something well and then we

181
00:11:07,699 --> 00:11:10,899
saw that when we

182
00:11:12,350 --> 00:11:18,150
kept accumulating threads we saw an

183
00:11:16,110 --> 00:11:22,200
interesting things very often they may

184
00:11:18,150 --> 00:11:27,449
repeat themselves they may reappear it

185
00:11:22,200 --> 00:11:32,190
will take a DB as an information

186
00:11:27,450 --> 00:11:35,300
disclosure from the file system it does

187
00:11:32,190 --> 00:11:43,440
not make sense to waste in every model

188
00:11:35,300 --> 00:11:47,099
for HTTP we can actually group them into

189
00:11:43,440 --> 00:11:50,400
an abstract level and determine some

190
00:11:47,100 --> 00:11:52,290
kind of a model offer inheriting to

191
00:11:50,400 --> 00:11:55,230
simplify the manage to simplify the

192
00:11:52,290 --> 00:11:58,020
management of all threads and we

193
00:11:55,230 --> 00:12:00,960
continued refactoring our model and we

194
00:11:58,020 --> 00:12:07,550
got approximately this model when at the

195
00:12:00,960 --> 00:12:12,720
top level we have general threads then

196
00:12:07,550 --> 00:12:16,140
SQL a dirty piece and then we can

197
00:12:12,720 --> 00:12:23,690
continue specific implementations of

198
00:12:16,140 --> 00:12:30,630
Mongo was Chris and MySQL SQL Server and

199
00:12:23,690 --> 00:12:33,090
so finally - we need to take a high

200
00:12:30,630 --> 00:12:35,790
level thread cells then add the threads

201
00:12:33,090 --> 00:12:39,060
that are specific of no SQL specific

202
00:12:35,790 --> 00:12:43,250
data storage threads and then MongoDB

203
00:12:39,060 --> 00:12:49,770
specifics for instance MongoDB injection

204
00:12:43,250 --> 00:12:55,830
where you allow scripting for your DB so

205
00:12:49,770 --> 00:12:58,439
we made it for the processes for

206
00:12:55,830 --> 00:13:02,340
injector then there will be a similar

207
00:12:58,440 --> 00:13:05,010
situation that we determine a common

208
00:13:02,340 --> 00:13:09,890
threads for front-end server and the

209
00:13:05,010 --> 00:13:14,029
thread specific for engines

210
00:13:09,890 --> 00:13:16,459
and then we noticed one more thing

211
00:13:14,029 --> 00:13:20,810
composition of threats if for instance

212
00:13:16,459 --> 00:13:28,489
your process is at some docker container

213
00:13:20,810 --> 00:13:33,640
or within a server within some

214
00:13:28,490 --> 00:13:38,079
environment it's clear that the threat

215
00:13:33,640 --> 00:13:44,899
for those such processes are amok

216
00:13:38,079 --> 00:13:50,870
accumulative threads within which the

217
00:13:44,899 --> 00:13:57,350
process lies in this case those friends

218
00:13:50,870 --> 00:14:00,170
related to the network server and threat

219
00:13:57,350 --> 00:14:02,890
linked to a specific process if for

220
00:14:00,170 --> 00:14:06,560
instance you have problems somewhere

221
00:14:02,890 --> 00:14:08,420
with a port server order then it makes

222
00:14:06,560 --> 00:14:12,410
sense for the process to describe

223
00:14:08,420 --> 00:14:15,920
complete model comprehensive model and

224
00:14:12,410 --> 00:14:23,240
the last stage that we added to the

225
00:14:15,920 --> 00:14:27,310
library is how specific threads should

226
00:14:23,240 --> 00:14:30,440
be verified if we take this simplest

227
00:14:27,310 --> 00:14:30,439
[Music]

228
00:14:30,680 --> 00:14:37,199
CSRF threat we can verify through

229
00:14:33,990 --> 00:14:39,480
security code review on C there is no

230
00:14:37,200 --> 00:14:42,680
token and the sunnah synchronization i

231
00:14:39,480 --> 00:14:47,520
will look until the configuration of

232
00:14:42,680 --> 00:14:51,270
application and they'll find that CSRF

233
00:14:47,520 --> 00:14:57,240
protection is not included and it's

234
00:14:51,270 --> 00:14:59,819
rather a question of convenience of the

235
00:14:57,240 --> 00:15:02,220
revocation of specific threats it's

236
00:14:59,820 --> 00:15:10,820
clear that there are many ways to do it

237
00:15:02,220 --> 00:15:13,410
but now we were to on convenience to

238
00:15:10,820 --> 00:15:20,820
identify and which is more convenient

239
00:15:13,410 --> 00:15:23,010
for instance it's good to set a rule for

240
00:15:20,820 --> 00:15:25,200
static analysis and it will find all

241
00:15:23,010 --> 00:15:27,270
spots for instance if you have a hundred

242
00:15:25,200 --> 00:15:30,410
it's clear that the manual security

243
00:15:27,270 --> 00:15:37,860
testing is a is difficult to do

244
00:15:30,410 --> 00:15:39,930
considering the time it may take for

245
00:15:37,860 --> 00:15:43,620
penetration testing and the last thing I

246
00:15:39,930 --> 00:15:46,170
wanted to mention is that we certainly

247
00:15:43,620 --> 00:15:49,980
can build the ideal model of threats

248
00:15:46,170 --> 00:15:52,319
cover all risks mitigate virtually

249
00:15:49,980 --> 00:15:56,310
everything but most important don't

250
00:15:52,320 --> 00:15:59,279
forget about our model if we make a

251
00:15:56,310 --> 00:16:01,790
threat model and then left it in the new

252
00:15:59,279 --> 00:16:05,760
release so we may add some functionality

253
00:16:01,790 --> 00:16:08,279
some button that will be accessible to

254
00:16:05,760 --> 00:16:11,880
unauthorized users that can drop all the

255
00:16:08,279 --> 00:16:14,459
tables and although threat model will go

256
00:16:11,880 --> 00:16:17,910
down the drain so the compulsory process

257
00:16:14,459 --> 00:16:21,479
is building a model of threats for the

258
00:16:17,910 --> 00:16:23,579
new functionality that you introduce you

259
00:16:21,480 --> 00:16:28,200
have to upgrade it and continue the

260
00:16:23,579 --> 00:16:33,069
process within the building the threat

261
00:16:28,200 --> 00:16:37,589
model so the library that we have built

262
00:16:33,070 --> 00:16:40,660
can be supported both security experts

263
00:16:37,589 --> 00:16:43,209
they may put all the security practices

264
00:16:40,660 --> 00:16:46,389
in and simple developers who can give

265
00:16:43,209 --> 00:16:54,239
recommendation on technologies Java C

266
00:16:46,389 --> 00:16:58,420
don't net and you may also store their

267
00:16:54,240 --> 00:17:00,670
infrastructural threats and in such a

268
00:16:58,420 --> 00:17:05,409
way we shall get as a general library

269
00:17:00,670 --> 00:17:08,709
which may be reused by other projects if

270
00:17:05,410 --> 00:17:13,929
for instance you use any DP you can just

271
00:17:08,709 --> 00:17:17,790
go to this library and look up what tray

272
00:17:13,929 --> 00:17:22,870
or the threads and at the design stage

273
00:17:17,790 --> 00:17:24,879
account for them and ensure security at

274
00:17:22,869 --> 00:17:27,489
the design stage and he will not need to

275
00:17:24,880 --> 00:17:32,200
do additional verification and so on so

276
00:17:27,490 --> 00:17:43,659
in such a way you can save much time I'm

277
00:17:32,200 --> 00:17:44,740
done thank you thank you yeah hello

278
00:17:43,659 --> 00:17:48,130
thank you for the wonderful presentation

279
00:17:44,740 --> 00:17:50,669
I would like to ask you in more to

280
00:17:48,130 --> 00:17:54,100
describe more in more detail the library

281
00:17:50,669 --> 00:17:56,020
processes do you mean the actualization

282
00:17:54,100 --> 00:18:00,399
from the point of view of new features

283
00:17:56,020 --> 00:18:06,240
no I mean the relevance of the threads

284
00:18:00,400 --> 00:18:09,520
and the 18 new threads and revision yes

285
00:18:06,240 --> 00:18:14,830
this library has to be supported all the

286
00:18:09,520 --> 00:18:17,799
time and there are many tools to support

287
00:18:14,830 --> 00:18:23,049
it and risk and threat modeler and they

288
00:18:17,799 --> 00:18:25,389
provide interface and which if you

289
00:18:23,049 --> 00:18:29,590
create a Moodle there and you get some

290
00:18:25,390 --> 00:18:32,470
new thread you will add it and

291
00:18:29,590 --> 00:18:35,309
automatically it will be sent to all the

292
00:18:32,470 --> 00:18:35,309
project teams

293
00:18:35,550 --> 00:18:41,600
they will know that it needs to be

294
00:18:37,650 --> 00:18:44,940
mitigated and all models will upgrade

295
00:18:41,600 --> 00:18:53,129
correct me if I'm wrong the threat is

296
00:18:44,940 --> 00:18:57,600
like a vulnerability it so a threat is

297
00:18:53,130 --> 00:19:01,110
potential vulnerability which we can get

298
00:18:57,600 --> 00:19:09,120
over so if we get a vulnerability and

299
00:19:01,110 --> 00:19:17,850
attack it's dangerous so this way we

300
00:19:09,120 --> 00:19:22,860
avoid all those vulnerabilities so more

301
00:19:17,850 --> 00:19:28,020
questions thank you Michael thank you

302
00:19:22,860 --> 00:19:31,139
very much and good evening ladies and

303
00:19:28,020 --> 00:19:35,250
gentlemen it was our last presentation

304
00:19:31,140 --> 00:19:38,570
for today's fast track and we are done

305
00:19:35,250 --> 00:19:38,570
for today as here tomorrow

