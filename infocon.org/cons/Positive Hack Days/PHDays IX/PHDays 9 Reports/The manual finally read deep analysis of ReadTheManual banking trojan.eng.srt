1
00:00:02,720 --> 00:00:08,880
hello everyone my name is Nikita protion

2
00:00:06,299 --> 00:00:14,099
and today we're gonna talk about a lot

3
00:00:08,880 --> 00:00:20,010
en banc banking Trojan so I ready to

4
00:00:14,099 --> 00:00:27,140
start some history and a quick overview

5
00:00:20,010 --> 00:00:31,529
so the truck jam was born in 2015-2016

6
00:00:27,140 --> 00:00:36,149
it wasn't so modular it wasn't it wasn't

7
00:00:31,529 --> 00:00:40,350
so sophisticated as now a new version of

8
00:00:36,149 --> 00:00:46,170
this Trojan was released like every 2 or

9
00:00:40,350 --> 00:00:50,760
3 months since the original release it's

10
00:00:46,170 --> 00:00:53,879
modular so you can connect plugins to it

11
00:00:50,760 --> 00:00:54,750
and it will be discussed later in the

12
00:00:53,879 --> 00:00:57,289
presentation

13
00:00:54,750 --> 00:01:01,800
but nevertheless it has a ton of

14
00:00:57,289 --> 00:01:07,799
built-in functionality so let's start

15
00:01:01,800 --> 00:01:09,750
and yes it's written in Delphi sir

16
00:01:07,799 --> 00:01:13,560
every malware starts with a dropper

17
00:01:09,750 --> 00:01:17,430
nearly so let's start with it now first

18
00:01:13,560 --> 00:01:19,470
we open our executable file and see

19
00:01:17,430 --> 00:01:25,380
something like this and of course it's

20
00:01:19,470 --> 00:01:28,439
junk so here we can see a custom Packer

21
00:01:25,380 --> 00:01:33,000
I don't know maybe it's bought maybe

22
00:01:28,439 --> 00:01:36,630
it's like developed by the RTM team but

23
00:01:33,000 --> 00:01:39,720
let's talk about it so uhm the code is

24
00:01:36,630 --> 00:01:43,259
obfuscated with junk wean API call so in

25
00:01:39,720 --> 00:01:47,460
the picture you can see two calls to

26
00:01:43,259 --> 00:01:50,939
delete file W with chunk arguments so

27
00:01:47,460 --> 00:01:56,539
they don't make any sense it splits the

28
00:01:50,939 --> 00:01:58,699
strings inside the binary so it will be

29
00:01:56,540 --> 00:02:03,299
harder to detect

30
00:01:58,700 --> 00:02:07,429
statically by just writing rules for the

31
00:02:03,299 --> 00:02:10,440
strings it splits the constants and

32
00:02:07,429 --> 00:02:13,170
unsuccessful dynamic API resolve leads

33
00:02:10,440 --> 00:02:13,680
to an infinite loop so it just will do

34
00:02:13,170 --> 00:02:17,059
nothing

35
00:02:13,680 --> 00:02:23,340
it won't even unpack it will just be the

36
00:02:17,060 --> 00:02:26,579
eb f e my favorite axis then it passes

37
00:02:23,340 --> 00:02:28,799
get module handle a I mean the resolved

38
00:02:26,579 --> 00:02:31,310
address of a function to the shell code

39
00:02:28,799 --> 00:02:35,459
for some reason I don't know why because

40
00:02:31,310 --> 00:02:39,450
shell code is able to actually resolve

41
00:02:35,459 --> 00:02:43,739
function functions by itself and the

42
00:02:39,450 --> 00:02:45,659
shell code does it's better because you

43
00:02:43,739 --> 00:02:49,409
know the hashes and stuff so let's

44
00:02:45,659 --> 00:02:51,420
proceed with this a couple of examples

45
00:02:49,409 --> 00:02:55,470
of splitting the strings so you see the

46
00:02:51,420 --> 00:02:59,220
strings see STS P create that's hard

47
00:02:55,470 --> 00:03:03,480
coded and it constructs the he prayed

48
00:02:59,220 --> 00:03:07,079
from this hard-coded gibberish and of

49
00:03:03,480 --> 00:03:12,480
course it reconstructs the address you

50
00:03:07,079 --> 00:03:15,269
see in the picture from two constants so

51
00:03:12,480 --> 00:03:18,238
let's go to the shell code on the

52
00:03:15,269 --> 00:03:23,930
picture you can see the algorithm of

53
00:03:18,239 --> 00:03:28,739
hashing the shell code resolves its

54
00:03:23,930 --> 00:03:32,010
function addresses by hashes it's not

55
00:03:28,739 --> 00:03:35,879
the hash from the code but harsh from

56
00:03:32,010 --> 00:03:38,578
the hash from the name so ESI is the

57
00:03:35,879 --> 00:03:41,569
address of API name in the memory of the

58
00:03:38,579 --> 00:03:44,120
process and you see all the fancy are

59
00:03:41,569 --> 00:03:46,768
ORS and are oels

60
00:03:44,120 --> 00:03:51,510
soon api's have been dynamically

61
00:03:46,769 --> 00:03:56,609
resolved by these hash values the shell

62
00:03:51,510 --> 00:03:59,190
code contains some hot probe stuff but

63
00:03:56,609 --> 00:04:05,549
it's still a mystery to me because the

64
00:03:59,190 --> 00:04:10,019
only function that is like checked to be

65
00:04:05,549 --> 00:04:15,329
hooked is read file and it's checked

66
00:04:10,019 --> 00:04:18,180
with a B hex byte to be the first byte

67
00:04:15,329 --> 00:04:22,370
of the function and it's a move

68
00:04:18,180 --> 00:04:24,750
instruction for x64 and this stuff is

69
00:04:22,370 --> 00:04:26,960
x86 so it's still a mystery but

70
00:04:24,750 --> 00:04:29,930
nevertheless

71
00:04:26,960 --> 00:04:35,120
the shellcode utilizes process Halloween

72
00:04:29,930 --> 00:04:37,639
technique means the technique when the

73
00:04:35,120 --> 00:04:40,430
execution is being passed to the

74
00:04:37,639 --> 00:04:46,009
shellcode the shell code allocates space

75
00:04:40,430 --> 00:04:50,800
makes the binary and then it replaces

76
00:04:46,009 --> 00:04:54,500
the original binary in the memory so

77
00:04:50,800 --> 00:04:57,259
then when it's already done

78
00:04:54,500 --> 00:05:02,440
it decrypts the body of the Java yeah we

79
00:04:57,259 --> 00:05:07,190
not even really near the drop on by now

80
00:05:02,440 --> 00:05:10,509
so here's the decryption stuff as you

81
00:05:07,190 --> 00:05:14,840
can see it utilizes a lot of hard-coded

82
00:05:10,509 --> 00:05:18,229
double words which either hard coded or

83
00:05:14,840 --> 00:05:20,750
stored is data in the shellcode so as

84
00:05:18,229 --> 00:05:22,219
you can see in different samples and

85
00:05:20,750 --> 00:05:26,870
different shell codes we can examine

86
00:05:22,220 --> 00:05:30,949
like exclusive or or sub instructions to

87
00:05:26,870 --> 00:05:33,680
make the temp zero then it's always

88
00:05:30,949 --> 00:05:40,460
exert from two like constants to make

89
00:05:33,680 --> 00:05:42,560
the temp one then it just source and we

90
00:05:40,460 --> 00:05:44,359
get the plaintext X and then it's like a

91
00:05:42,560 --> 00:05:48,530
CVC change so the next cypher text

92
00:05:44,360 --> 00:05:51,289
becomes the temp 1 so this towards words

93
00:05:48,530 --> 00:05:58,119
sorry on the right in the right corner

94
00:05:51,289 --> 00:06:02,659
is like cedar on an initial vector so

95
00:05:58,120 --> 00:06:05,690
while we're at the dropper so the

96
00:06:02,659 --> 00:06:07,479
dropper decorates the main Trojan then

97
00:06:05,690 --> 00:06:11,030
decompress is what's being decrypted

98
00:06:07,479 --> 00:06:14,539
drops all the stuff it has decrypted and

99
00:06:11,030 --> 00:06:16,638
decompressed to the temp polar sets up

100
00:06:14,539 --> 00:06:19,840
an environmental variable which looks

101
00:06:16,639 --> 00:06:23,990
like that like current PID current PAB

102
00:06:19,840 --> 00:06:29,299
this will be come in handy later and at

103
00:06:23,990 --> 00:06:31,430
last a load library call and you can

104
00:06:29,300 --> 00:06:37,070
guess that it's a load library called to

105
00:06:31,430 --> 00:06:38,960
the main module and here we go again

106
00:06:37,070 --> 00:06:41,270
it's packed

107
00:06:38,960 --> 00:06:44,719
it's packed in the same way that we've

108
00:06:41,270 --> 00:06:47,448
seen before and we see Delfy under

109
00:06:44,720 --> 00:06:53,319
everything yay thank God not Visual

110
00:06:47,449 --> 00:06:56,150
Basic 6 so before checking out DLL mains

111
00:06:53,319 --> 00:06:59,680
we can check out the global constructors

112
00:06:56,150 --> 00:07:02,508
and let's see what we got

113
00:06:59,680 --> 00:07:07,669
yeah the global constructor is allocated

114
00:07:02,509 --> 00:07:13,130
in the init library start library in it

115
00:07:07,669 --> 00:07:17,240
units function so it's just a loop to

116
00:07:13,130 --> 00:07:19,880
call all the global constructors so

117
00:07:17,240 --> 00:07:22,940
first finding is a pseudo-random number

118
00:07:19,880 --> 00:07:26,419
generator as you can see the seed for it

119
00:07:22,940 --> 00:07:29,380
in the left one is the kernel 32 gets a

120
00:07:26,419 --> 00:07:36,620
count function so it's used as a seed

121
00:07:29,380 --> 00:07:40,699
and of course you can see the 21 cycles

122
00:07:36,620 --> 00:07:45,229
of initializing the state of a generator

123
00:07:40,699 --> 00:07:48,860
on the right you can see that all the

124
00:07:45,229 --> 00:07:53,030
generator double words are located one

125
00:07:48,860 --> 00:07:58,659
after another so it's to see five one

126
00:07:53,030 --> 00:08:02,299
five oh five one five four and etc so

127
00:07:58,659 --> 00:08:06,370
actually this key scheduling function

128
00:08:02,300 --> 00:08:09,199
will be used numerous amounts of times I

129
00:08:06,370 --> 00:08:13,550
mean in the execution of the main module

130
00:08:09,199 --> 00:08:15,889
and actually they could just use the

131
00:08:13,550 --> 00:08:18,710
state of this I mean all that war it's

132
00:08:15,889 --> 00:08:20,120
but they use the last one look at the

133
00:08:18,710 --> 00:08:24,739
return on the right one

134
00:08:20,120 --> 00:08:30,590
so it's return the sum of two of them

135
00:08:24,740 --> 00:08:33,229
right okay the second finding is not so

136
00:08:30,590 --> 00:08:37,699
fantastic but it's an initialization of

137
00:08:33,229 --> 00:08:40,539
an array needed for crc32 algorithm and

138
00:08:37,700 --> 00:08:46,250
you can see the initialization function

139
00:08:40,539 --> 00:08:48,230
there and the last but not least it's a

140
00:08:46,250 --> 00:08:50,700
generation of a machine dependent value

141
00:08:48,230 --> 00:08:52,860
and you can see the formula

142
00:08:50,700 --> 00:09:02,100
I don't know if you can you see the

143
00:08:52,860 --> 00:09:05,940
formula okay so the machine dependent

144
00:09:02,100 --> 00:09:08,880
value is generated from the machine

145
00:09:05,940 --> 00:09:12,330
GUI B from the software Microsoft

146
00:09:08,880 --> 00:09:15,210
ography from the registry and this

147
00:09:12,330 --> 00:09:18,960
machine dependent value will also help

148
00:09:15,210 --> 00:09:21,510
our TM to survive on all the stages of

149
00:09:18,960 --> 00:09:25,140
the execution of the main module of the

150
00:09:21,510 --> 00:09:28,310
of all the instances of the main module

151
00:09:25,140 --> 00:09:32,790
so let's go further

152
00:09:28,310 --> 00:09:36,329
alright so we are at our instance zero

153
00:09:32,790 --> 00:09:39,750
as you remember instance zero is the

154
00:09:36,330 --> 00:09:43,530
instance that is being called via the

155
00:09:39,750 --> 00:09:49,050
load library from the process of the

156
00:09:43,530 --> 00:09:52,170
chopper sir the first thing that it does

157
00:09:49,050 --> 00:09:55,979
is some environment checks so let's

158
00:09:52,170 --> 00:10:00,030
check now it gets the name of the

159
00:09:55,980 --> 00:10:02,580
process container and checks it 40 X Z

160
00:10:00,030 --> 00:10:05,520
my epic Z and other stuff you can see

161
00:10:02,580 --> 00:10:08,760
and I think that is just a bunch of test

162
00:10:05,520 --> 00:10:11,160
configurations because I don't know the

163
00:10:08,760 --> 00:10:15,900
sandbox that actually generates these

164
00:10:11,160 --> 00:10:19,860
file names of any kind of stuff but we

165
00:10:15,900 --> 00:10:23,819
can I think we can say that there are

166
00:10:19,860 --> 00:10:27,780
test configurations here next one it

167
00:10:23,820 --> 00:10:31,560
takes the path to disk C and D and then

168
00:10:27,780 --> 00:10:36,060
concatenate with all the variety of

169
00:10:31,560 --> 00:10:41,239
stuff from the fourth string and it's

170
00:10:36,060 --> 00:10:41,239
what we can consider this as a

171
00:10:41,450 --> 00:10:49,170
environment check we can see the kakou

172
00:10:44,790 --> 00:10:53,699
we can see strawberry Python so clearly

173
00:10:49,170 --> 00:10:55,560
some kind of sandbox and RTM doesn't

174
00:10:53,700 --> 00:11:00,000
want to execute itself in a sandbox

175
00:10:55,560 --> 00:11:02,810
that's for sure and two processes VBox

176
00:11:00,000 --> 00:11:08,770
service dot exe and python direct z

177
00:11:02,810 --> 00:11:08,770
and of course it's VirtualBox and I

178
00:11:08,950 --> 00:11:18,110
think it just don't want itself to be

179
00:11:12,380 --> 00:11:21,380
analyzed so after the checks failing any

180
00:11:18,110 --> 00:11:23,150
of these checks leads to no pointer

181
00:11:21,380 --> 00:11:24,710
dereferencing as you can see in the

182
00:11:23,150 --> 00:11:27,290
picture in the hex race and the

183
00:11:24,710 --> 00:11:35,420
disassembler you can see the fancy sorry

184
00:11:27,290 --> 00:11:39,050
ax ax and move the referenced ax ax

185
00:11:35,420 --> 00:11:42,939
which of course causes the error and the

186
00:11:39,050 --> 00:11:47,089
crash so it won't work

187
00:11:42,940 --> 00:11:51,500
so the next thing the instance number 0

188
00:11:47,089 --> 00:11:53,839
will check is the CMD string that's

189
00:11:51,500 --> 00:11:58,730
being passed to the process in which it

190
00:11:53,839 --> 00:12:04,000
is executing it restore the verdict in

191
00:11:58,730 --> 00:12:07,460
the global variable and use it later to

192
00:12:04,000 --> 00:12:08,510
actually understand where am i being

193
00:12:07,460 --> 00:12:11,060
executed

194
00:12:08,510 --> 00:12:12,860
am I being am I being the instance 0 am

195
00:12:11,060 --> 00:12:17,930
i being the standalone instance do I

196
00:12:12,860 --> 00:12:20,660
need to like innovate so what should I

197
00:12:17,930 --> 00:12:22,750
do and it's stored in the CMD string

198
00:12:20,660 --> 00:12:28,339
that's being passed between the

199
00:12:22,750 --> 00:12:32,240
instances so you remember the current

200
00:12:28,339 --> 00:12:35,660
PID current ID variable it indicates

201
00:12:32,240 --> 00:12:39,200
that indication that execution is before

202
00:12:35,660 --> 00:12:42,170
and inside of the dropper process if the

203
00:12:39,200 --> 00:12:44,720
CD contains like C hex zeroes it's also

204
00:12:42,170 --> 00:12:48,459
indicates the dropper thing as we'll see

205
00:12:44,720 --> 00:12:51,860
later after after the call of the first

206
00:12:48,459 --> 00:12:57,319
like the first and last export that we

207
00:12:51,860 --> 00:12:59,720
need and some others which is like 2 and

208
00:12:57,320 --> 00:13:04,209
as you see the same D string contains

209
00:12:59,720 --> 00:13:06,620
two 12-packs internal identifiers

210
00:13:04,209 --> 00:13:10,550
internal identifiers is a big thing

211
00:13:06,620 --> 00:13:12,470
inside our TM so internal identifiers is

212
00:13:10,550 --> 00:13:13,670
used like nearly for everything it's

213
00:13:12,470 --> 00:13:17,600
machine dependent

214
00:13:13,670 --> 00:13:20,599
we will have a slide for that and zero

215
00:13:17,600 --> 00:13:24,320
is the default verdict and it indicates

216
00:13:20,600 --> 00:13:28,210
that it's an injected instance of our

217
00:13:24,320 --> 00:13:33,730
TMS main module injected instances are

218
00:13:28,210 --> 00:13:33,730
quite like familiar thing

219
00:13:33,800 --> 00:13:41,959
sorry quite like usual thing because we

220
00:13:38,630 --> 00:13:44,780
have a keylogger here we will have we

221
00:13:41,960 --> 00:13:47,750
will have kliebert stealer

222
00:13:44,780 --> 00:13:49,339
stuff so all the hooks and all the main

223
00:13:47,750 --> 00:13:53,090
modules being injected into every

224
00:13:49,340 --> 00:13:55,580
process that utilizes like keyboard

225
00:13:53,090 --> 00:14:00,980
mouse clicks and other stuff so you know

226
00:13:55,580 --> 00:14:04,910
banking Trojans okay some stuff about

227
00:14:00,980 --> 00:14:07,970
internal IDs so they are derived from

228
00:14:04,910 --> 00:14:11,620
that machine dependent value that we

229
00:14:07,970 --> 00:14:14,240
have seen before those are strings like

230
00:14:11,620 --> 00:14:17,650
you can see the example on the screen so

231
00:14:14,240 --> 00:14:21,950
it includes only hex digits and

232
00:14:17,650 --> 00:14:25,430
therefore it's derived from the machine

233
00:14:21,950 --> 00:14:27,800
dependent value the absolute values of

234
00:14:25,430 --> 00:14:32,120
internal IDs are unique for each machine

235
00:14:27,800 --> 00:14:35,329
and RTM uses all this stuff to name

236
00:14:32,120 --> 00:14:38,830
events registry keys seeds you know all

237
00:14:35,330 --> 00:14:43,700
the stuff that needs to be named but

238
00:14:38,830 --> 00:14:49,220
they just didn't want to make the RTM 0

239
00:14:43,700 --> 00:14:52,310
r2 RTM 1 you know and they like utilize

240
00:14:49,220 --> 00:14:55,930
this one the thing is that it perfectly

241
00:14:52,310 --> 00:15:02,180
works out on one machine and for an

242
00:14:55,930 --> 00:15:06,050
investigator from his view this look

243
00:15:02,180 --> 00:15:09,500
like exactly random hacks consequences

244
00:15:06,050 --> 00:15:15,800
so it does it means nothing to them just

245
00:15:09,500 --> 00:15:19,670
you know random stuff but it's perfectly

246
00:15:15,800 --> 00:15:24,469
mean meaningful for the for the main

247
00:15:19,670 --> 00:15:27,170
module of read the manual here you can

248
00:15:24,470 --> 00:15:31,069
see the derivation of an idea you know

249
00:15:27,170 --> 00:15:32,569
it's a simple one bike store and so

250
00:15:31,069 --> 00:15:37,878
finish independent value we have

251
00:15:32,569 --> 00:15:41,420
generated before it's just being sword

252
00:15:37,879 --> 00:15:46,790
well one bite and unhex Allah fight to

253
00:15:41,420 --> 00:15:51,319
make the consequence yes sorry the

254
00:15:46,790 --> 00:15:54,170
sequence of hex digits and after the

255
00:15:51,319 --> 00:15:59,649
load library and the DLL main of the

256
00:15:54,170 --> 00:16:02,868
main module we get to the juicy stuff so

257
00:15:59,649 --> 00:16:05,959
the main module has like for expert

258
00:16:02,869 --> 00:16:08,869
entries but only two of them really do

259
00:16:05,959 --> 00:16:11,529
something because others are stubs and

260
00:16:08,869 --> 00:16:14,329
give you nothing more than a return zero

261
00:16:11,529 --> 00:16:19,009
so DLL entry point we've discussed

262
00:16:14,329 --> 00:16:24,229
already and the DLL get class object we

263
00:16:19,009 --> 00:16:30,019
call with the host and see hex zeroes

264
00:16:24,230 --> 00:16:32,540
argument so the inside of this expert

265
00:16:30,019 --> 00:16:36,040
can know that it's is executed under a

266
00:16:32,540 --> 00:16:41,779
dropper so we are instance number zero

267
00:16:36,040 --> 00:16:46,910
so let's talk about custom crypto inside

268
00:16:41,779 --> 00:16:51,170
our TM r TM relies on custom rc4

269
00:16:46,910 --> 00:16:57,850
algorithm and here's the example so you

270
00:16:51,170 --> 00:17:01,389
see the you I can actually see the well

271
00:16:57,850 --> 00:17:05,659
they're not visible sorry

272
00:17:01,389 --> 00:17:08,630
so in the left of the slide you can see

273
00:17:05,659 --> 00:17:12,169
the classic part of every rc4 algorithm

274
00:17:08,630 --> 00:17:14,029
so it's a key scheduling algorithm and

275
00:17:12,169 --> 00:17:20,569
asuna random generation algorithm but

276
00:17:14,029 --> 00:17:23,809
our TM adds another stage to this we

277
00:17:20,569 --> 00:17:26,359
have two keys the primary one you know

278
00:17:23,809 --> 00:17:28,279
the usual and the secondary one the

279
00:17:26,359 --> 00:17:29,149
second everyone is just a double word

280
00:17:28,279 --> 00:17:32,120
that

281
00:17:29,150 --> 00:17:36,080
being sorry cipher you know with the

282
00:17:32,120 --> 00:17:40,399
resulting as block so there are not too

283
00:17:36,080 --> 00:17:43,010
many of primary keys but there are a

284
00:17:40,400 --> 00:17:47,690
variety of secondaries in here you can

285
00:17:43,010 --> 00:17:53,200
see the function which Saurus the s

286
00:17:47,690 --> 00:17:56,390
block for foreign you know add some

287
00:17:53,200 --> 00:18:00,020
decryption because it works like that so

288
00:17:56,390 --> 00:18:03,110
we have generated the s block with a

289
00:18:00,020 --> 00:18:05,240
primary key and then for every little

290
00:18:03,110 --> 00:18:07,790
piece of decrypted data for every

291
00:18:05,240 --> 00:18:10,670
increase it entry for example a string

292
00:18:07,790 --> 00:18:14,330
and I will demonstrate it later we

293
00:18:10,670 --> 00:18:16,100
generate another as block by Soaring

294
00:18:14,330 --> 00:18:19,220
them with the secondary key so every

295
00:18:16,100 --> 00:18:23,659
encrypted entity has its own secondary

296
00:18:19,220 --> 00:18:26,450
key yeah here's the string here's the

297
00:18:23,660 --> 00:18:30,830
example our TM has two separate

298
00:18:26,450 --> 00:18:33,860
encrypted string balls and here's an

299
00:18:30,830 --> 00:18:36,500
example of the vault entry a first word

300
00:18:33,860 --> 00:18:40,219
you know of's is a separator it's not

301
00:18:36,500 --> 00:18:42,860
used then the second is the length of an

302
00:18:40,220 --> 00:18:48,470
encrypted string the third double word

303
00:18:42,860 --> 00:18:52,909
is a secondary rc4 key so VC before is

304
00:18:48,470 --> 00:18:57,620
the secondary rc4 here and next comes

305
00:18:52,910 --> 00:19:03,410
exactly F encrypted symbols of the

306
00:18:57,620 --> 00:19:06,199
encrypted string and constructing the

307
00:19:03,410 --> 00:19:09,590
primary key is like hell here because

308
00:19:06,200 --> 00:19:12,620
take a look at this so our TM is taking

309
00:19:09,590 --> 00:19:16,040
s crc32 checksum of every encrypted

310
00:19:12,620 --> 00:19:18,520
string so of every part that actually is

311
00:19:16,040 --> 00:19:22,040
an encrypted string not the whole entry

312
00:19:18,520 --> 00:19:25,250
so of every encrypted string of each

313
00:19:22,040 --> 00:19:28,700
vault then XOR is them all together and

314
00:19:25,250 --> 00:19:31,160
get horizonte and get a resulting in

315
00:19:28,700 --> 00:19:33,530
temporary doors then it's storing that

316
00:19:31,160 --> 00:19:36,350
word with a hard-coded constant is just

317
00:19:33,530 --> 00:19:37,800
in the code then it serves it again with

318
00:19:36,350 --> 00:19:40,980
the host value

319
00:19:37,800 --> 00:19:44,040
do you remember the parameter with which

320
00:19:40,980 --> 00:19:46,560
this expert has been called it was

321
00:19:44,040 --> 00:19:50,159
called with host and then Seahawk zeroes

322
00:19:46,560 --> 00:19:53,399
here's is what the host part four by the

323
00:19:50,160 --> 00:19:57,210
way we have observed this value being

324
00:19:53,400 --> 00:20:03,030
not only host but for example root so

325
00:19:57,210 --> 00:20:06,990
it's it's four symbols every time do so

326
00:20:03,030 --> 00:20:11,490
you can make you can clearly make double

327
00:20:06,990 --> 00:20:14,760
word from that so in all the sand boxes

328
00:20:11,490 --> 00:20:17,760
RTM looks like okay well we are

329
00:20:14,760 --> 00:20:23,490
launching this with host and some hex

330
00:20:17,760 --> 00:20:26,220
numbers but actually host is nothing of

331
00:20:23,490 --> 00:20:28,620
an option is just a value so it's source

332
00:20:26,220 --> 00:20:30,450
again with the host value the actual

333
00:20:28,620 --> 00:20:32,969
value is in the brackets on the right

334
00:20:30,450 --> 00:20:37,770
then we unhak safai the result so we get

335
00:20:32,970 --> 00:20:41,190
the symbols sequence from the actual

336
00:20:37,770 --> 00:20:47,480
axis and that and then we concatenate it

337
00:20:41,190 --> 00:20:50,910
with this stuff and hexley fide and I

338
00:20:47,480 --> 00:20:55,440
think that's that's not a simple way to

339
00:20:50,910 --> 00:21:00,540
generate primary key for the first you

340
00:20:55,440 --> 00:21:04,290
know for the strings but spoiler there

341
00:21:00,540 --> 00:21:07,080
won't be you know any any other

342
00:21:04,290 --> 00:21:13,200
generations that are this complicated so

343
00:21:07,080 --> 00:21:15,449
let's continue as I already said to get

344
00:21:13,200 --> 00:21:18,000
those bolts decrypted the finalists

345
00:21:15,450 --> 00:21:19,230
block is generated for each encrypted

346
00:21:18,000 --> 00:21:20,970
entity sir

347
00:21:19,230 --> 00:21:22,440
for each increase it strains separately

348
00:21:20,970 --> 00:21:24,720
using the secondary keys which are

349
00:21:22,440 --> 00:21:30,350
stored in the entries and here's the

350
00:21:24,720 --> 00:21:30,350
example of a part of a decrypted vault

351
00:21:31,610 --> 00:21:40,100
after the decryption of the vaults an

352
00:21:35,900 --> 00:21:44,190
integrity check is being performed I

353
00:21:40,100 --> 00:21:47,070
don't actually know why but the

354
00:21:44,190 --> 00:21:49,920
first ones and the last ones you know

355
00:21:47,070 --> 00:21:51,540
the strings of each vault so the first

356
00:21:49,920 --> 00:21:55,770
one the last one the first one and the

357
00:21:51,540 --> 00:21:58,290
last one you see the end of decrypted

358
00:21:55,770 --> 00:22:01,230
Unicode vault start decrypt Unicode

359
00:21:58,290 --> 00:22:06,570
vault it's all the you know ministries

360
00:22:01,230 --> 00:22:09,900
as you can see it's zk zk RT in this

361
00:22:06,570 --> 00:22:15,149
case and they are always like four

362
00:22:09,900 --> 00:22:18,150
symbols of text and it checks its source

363
00:22:15,150 --> 00:22:20,460
though with each other and checks the

364
00:22:18,150 --> 00:22:23,010
integrity and this concept is of course

365
00:22:20,460 --> 00:22:26,580
hard-coded but i don't actually know why

366
00:22:23,010 --> 00:22:30,600
this integrity check is a must because

367
00:22:26,580 --> 00:22:33,780
to generate the primary value you know

368
00:22:30,600 --> 00:22:37,590
the primary key we needed this crc32 x'

369
00:22:33,780 --> 00:22:40,110
then all this stuff and if it's already

370
00:22:37,590 --> 00:22:42,990
decreed it like okay and everything is

371
00:22:40,110 --> 00:22:48,719
working so why to check it again but

372
00:22:42,990 --> 00:22:53,910
okay let's talk about the elevation

373
00:22:48,720 --> 00:22:58,290
system of RTM because the first thing to

374
00:22:53,910 --> 00:23:01,680
do you know in instance 0 in any

375
00:22:58,290 --> 00:23:04,230
instance by the way is not to launch the

376
00:23:01,680 --> 00:23:07,740
main functionality like the key loggers

377
00:23:04,230 --> 00:23:10,860
the remote banking scanners not all that

378
00:23:07,740 --> 00:23:15,570
stuff but before that we need to

379
00:23:10,860 --> 00:23:17,250
properly elevate and persist so here is

380
00:23:15,570 --> 00:23:21,000
the scheme observed in one of the

381
00:23:17,250 --> 00:23:24,060
samples of RTM and if the system version

382
00:23:21,000 --> 00:23:28,650
is less than vesta it hooks the event

383
00:23:24,060 --> 00:23:31,639
object create event then loops the shell

384
00:23:28,650 --> 00:23:35,190
execute X function with run as verb and

385
00:23:31,640 --> 00:23:37,860
window handle of you know get program

386
00:23:35,190 --> 00:23:41,910
window so the active window for the user

387
00:23:37,860 --> 00:23:42,510
and the clearly tampers with Ronis

388
00:23:41,910 --> 00:23:45,600
window

389
00:23:42,510 --> 00:23:46,620
so remember the-- Windows XP Ranas

390
00:23:45,600 --> 00:23:51,419
window

391
00:23:46,620 --> 00:23:57,120
it had like three buttons so it unchecks

392
00:23:51,420 --> 00:23:57,929
the one that makes you know protect my

393
00:23:57,120 --> 00:24:00,869
computer

394
00:23:57,929 --> 00:24:04,110
from unwanted software it unchecks this

395
00:24:00,869 --> 00:24:06,360
and makes this you know disabled so you

396
00:24:04,110 --> 00:24:11,758
can even click it you can even click the

397
00:24:06,360 --> 00:24:16,379
option like rawness current user so the

398
00:24:11,759 --> 00:24:19,289
only option that is accepted by the

399
00:24:16,379 --> 00:24:23,969
temperate version of Russ and of rawness

400
00:24:19,289 --> 00:24:24,749
window is you know run like run as

401
00:24:23,970 --> 00:24:30,539
administrator'

402
00:24:24,749 --> 00:24:34,230
of course and then so this is the

403
00:24:30,539 --> 00:24:38,460
elevation if it's Windows XP and if it's

404
00:24:34,230 --> 00:24:41,549
not it just loops the shell execute X

405
00:24:38,460 --> 00:24:46,259
function with runners verb and it

406
00:24:41,549 --> 00:24:50,940
actually acts like UAC spam so it will

407
00:24:46,259 --> 00:24:54,450
spam the you see window like and wait

408
00:24:50,940 --> 00:24:58,230
until you just click yes and elevate

409
00:24:54,450 --> 00:25:02,220
itself but I've observed another

410
00:24:58,230 --> 00:25:05,879
technique with this fake Windows

411
00:25:02,220 --> 00:25:09,570
registry error window so it constructs

412
00:25:05,879 --> 00:25:13,918
the window by the way the window text

413
00:25:09,570 --> 00:25:16,200
depends on the system language like it

414
00:25:13,919 --> 00:25:20,190
can be either English or Russian here

415
00:25:16,200 --> 00:25:23,090
you can see the Russian one it's

416
00:25:20,190 --> 00:25:27,149
actually has nothing to do with actual

417
00:25:23,090 --> 00:25:31,168
cool techniques of UAC bypass because

418
00:25:27,149 --> 00:25:33,389
it's just a fraud one a user like pushes

419
00:25:31,169 --> 00:25:38,009
one of the two buttons no matter which

420
00:25:33,389 --> 00:25:42,740
one it just has the same she'll execute

421
00:25:38,009 --> 00:25:48,210
X run as and the USC window pops but

422
00:25:42,740 --> 00:25:52,309
this one is you know it's looks so

423
00:25:48,210 --> 00:25:55,919
legitimate and Windows is asking you

424
00:25:52,309 --> 00:25:58,158
please can I run it can I run it as an

425
00:25:55,919 --> 00:26:02,700
administrator and of course you say yes

426
00:25:58,159 --> 00:26:04,590
so this is just a fraud not an actual

427
00:26:02,700 --> 00:26:07,619
technique but I think that's still

428
00:26:04,590 --> 00:26:10,949
interesting and by the way about the

429
00:26:07,619 --> 00:26:11,970
language you know about the text in this

430
00:26:10,950 --> 00:26:16,110
window

431
00:26:11,970 --> 00:26:20,390
in the decrypted string vaults you can

432
00:26:16,110 --> 00:26:25,080
see both parents for English and Russian

433
00:26:20,390 --> 00:26:29,220
as you can mention like the Russian

434
00:26:25,080 --> 00:26:33,389
texts is rather good it looks good

435
00:26:29,220 --> 00:26:36,630
I mean grammatically and stuff but the

436
00:26:33,390 --> 00:26:41,460
English text is not so good

437
00:26:36,630 --> 00:26:46,500
it has grammar mistakes that are very

438
00:26:41,460 --> 00:26:50,370
logical to be done by Russian men so if

439
00:26:46,500 --> 00:26:54,000
you just translate the English text from

440
00:26:50,370 --> 00:26:57,239
the string balls for this particular

441
00:26:54,000 --> 00:27:00,540
window you just translate it one word by

442
00:26:57,240 --> 00:27:02,670
the other word and then you just realize

443
00:27:00,540 --> 00:27:04,830
you know it's perfect Russian so only a

444
00:27:02,670 --> 00:27:10,790
Russian man can translate to English

445
00:27:04,830 --> 00:27:16,199
like this so attribution hmm dunno

446
00:27:10,790 --> 00:27:18,990
so about persistence persistence is not

447
00:27:16,200 --> 00:27:21,270
so cool in our team I think because it

448
00:27:18,990 --> 00:27:23,760
checks is the scheduler service is

449
00:27:21,270 --> 00:27:25,830
running configure it to launch on

450
00:27:23,760 --> 00:27:29,190
startup like hundred percent and then

451
00:27:25,830 --> 00:27:32,879
start it of course then it enumerates

452
00:27:29,190 --> 00:27:35,690
the users of the system register tusks

453
00:27:32,880 --> 00:27:39,180
and configures them you know the

454
00:27:35,690 --> 00:27:42,750
description one all the stuff and it

455
00:27:39,180 --> 00:27:49,770
mimics the windows update task so a

456
00:27:42,750 --> 00:27:52,560
tasks update winners the only like you

457
00:27:49,770 --> 00:27:54,360
know the difference is that the name is

458
00:27:52,560 --> 00:27:59,129
not just Windows Update it's

459
00:27:54,360 --> 00:28:03,389
concatenated with crc32 from the current

460
00:27:59,130 --> 00:28:06,600
user name and then unhex leaf ID so to

461
00:28:03,390 --> 00:28:10,290
ASCII of course and then concatenate it

462
00:28:06,600 --> 00:28:13,560
so all Windows updates tasks from RT and

463
00:28:10,290 --> 00:28:15,930
for different users look a little bit

464
00:28:13,560 --> 00:28:20,460
different but all the description all

465
00:28:15,930 --> 00:28:24,720
the like all the stuff that you can make

466
00:28:20,460 --> 00:28:25,620
with comm model of Windows like all the

467
00:28:24,720 --> 00:28:28,080
fields they

468
00:28:25,620 --> 00:28:32,699
filled exactly like you know to mimic

469
00:28:28,080 --> 00:28:35,270
the windows update ask and if we are

470
00:28:32,700 --> 00:28:37,770
unsuccessful at this we just do the

471
00:28:35,270 --> 00:28:40,610
classic thing and rely on current

472
00:28:37,770 --> 00:28:45,720
version run so that's the persistence

473
00:28:40,610 --> 00:28:49,229
and at last the main window once all the

474
00:28:45,720 --> 00:28:51,480
persistence is the innovations have

475
00:28:49,230 --> 00:28:55,590
occurred it's time to launch the main

476
00:28:51,480 --> 00:28:57,840
functionality of the Trojan ok the main

477
00:28:55,590 --> 00:29:04,590
window has a specific class name and a

478
00:28:57,840 --> 00:29:08,939
specific window name that is because RT

479
00:29:04,590 --> 00:29:11,189
M wants every other instance of itself

480
00:29:08,940 --> 00:29:14,940
like maybe not only standalone but

481
00:29:11,190 --> 00:29:16,950
injected like to the process where

482
00:29:14,940 --> 00:29:18,980
keyboard have been used where mouse

483
00:29:16,950 --> 00:29:23,850
clicks have been used where like

484
00:29:18,980 --> 00:29:26,580
something was copied to the Clippard RTM

485
00:29:23,850 --> 00:29:28,740
wants you know every instance to know

486
00:29:26,580 --> 00:29:31,139
about the class name and window name and

487
00:29:28,740 --> 00:29:32,970
that's because it's be hex and see hex

488
00:29:31,140 --> 00:29:36,720
internal identifiers that we talked

489
00:29:32,970 --> 00:29:41,490
earlier the main window is able to

490
00:29:36,720 --> 00:29:43,880
handle all the WM commands all the WM

491
00:29:41,490 --> 00:29:48,300
messages that you can see in the slide

492
00:29:43,880 --> 00:29:50,309
with additional one WM copy data can

493
00:29:48,300 --> 00:29:54,240
handle all the custom commands sent to

494
00:29:50,309 --> 00:29:56,520
the window artyom doesn't like the idea

495
00:29:54,240 --> 00:30:02,280
that every instance will do everything

496
00:29:56,520 --> 00:30:05,879
by himself no instead it locates the

497
00:30:02,280 --> 00:30:09,600
window so it finds it and if it exists

498
00:30:05,880 --> 00:30:13,890
it leaves you know it likes to leave all

499
00:30:09,600 --> 00:30:17,250
the work to do in and already you know

500
00:30:13,890 --> 00:30:19,380
good executing like stand-alone instance

501
00:30:17,250 --> 00:30:20,730
which have a window which have the

502
00:30:19,380 --> 00:30:23,340
functionality the handlers the

503
00:30:20,730 --> 00:30:30,300
persistent what everything so leave it

504
00:30:23,340 --> 00:30:32,750
to him let's talk about WM create NICs

505
00:30:30,300 --> 00:30:34,860
actually I think the largest

506
00:30:32,750 --> 00:30:38,460
initialization stuff you can find in RT

507
00:30:34,860 --> 00:30:40,260
M so it decrypts the string roles as

508
00:30:38,460 --> 00:30:43,490
we already mentioned before it

509
00:30:40,260 --> 00:30:45,810
dynamically resolves a ton of api's and

510
00:30:43,490 --> 00:30:50,250
by saying the channel I actually mean

511
00:30:45,810 --> 00:30:53,879
like a tongue it prepares another RC for

512
00:30:50,250 --> 00:30:57,510
as block within another primary key and

513
00:30:53,880 --> 00:30:59,330
that as block will be used in the c2

514
00:30:57,510 --> 00:31:02,160
conversation later

515
00:30:59,330 --> 00:31:03,689
it makes the cleanup what's the cleanup

516
00:31:02,160 --> 00:31:06,780
will be mentioned you know in the next

517
00:31:03,690 --> 00:31:09,690
slide creates an encrypted registry

518
00:31:06,780 --> 00:31:12,960
context yeah all the runtime parameters

519
00:31:09,690 --> 00:31:17,190
of great Emmanuel are stored in Windows

520
00:31:12,960 --> 00:31:20,810
registry but in an encrypted way I will

521
00:31:17,190 --> 00:31:24,990
also discuss this one a little bit later

522
00:31:20,810 --> 00:31:27,179
initializes a war with is it and that's

523
00:31:24,990 --> 00:31:30,750
like the fire the funniest thing about

524
00:31:27,180 --> 00:31:33,270
what Artyom does it launches the

525
00:31:30,750 --> 00:31:35,160
keylogger the remote banking detector

526
00:31:33,270 --> 00:31:38,010
it makes the initial connection

527
00:31:35,160 --> 00:31:40,080
handshake in rates the plugins you know

528
00:31:38,010 --> 00:31:42,810
launches everything you can imagine that

529
00:31:40,080 --> 00:31:45,840
it can do all the threats you want

530
00:31:42,810 --> 00:31:47,750
and finally construct system intro based

531
00:31:45,840 --> 00:31:52,949
on previous stuff and sends it to

532
00:31:47,750 --> 00:32:00,180
control command server and yes WM Cray

533
00:31:52,950 --> 00:32:05,970
does you know way too many things so the

534
00:32:00,180 --> 00:32:08,970
cleanup when RT M is elevating and being

535
00:32:05,970 --> 00:32:11,700
executed you know in the constant in the

536
00:32:08,970 --> 00:32:14,120
context of a dropper then standalone

537
00:32:11,700 --> 00:32:17,550
with low privileges then it gains

538
00:32:14,120 --> 00:32:20,310
privileges and it doesn't even want to

539
00:32:17,550 --> 00:32:22,620
be in temp folder anymore he wants to be

540
00:32:20,310 --> 00:32:26,639
like in the common up data maybe you

541
00:32:22,620 --> 00:32:28,620
know the more legitimate way by gaining

542
00:32:26,640 --> 00:32:31,170
privileges during the execution the

543
00:32:28,620 --> 00:32:33,810
working directory can be moved and not

544
00:32:31,170 --> 00:32:35,970
only working directory of course to

545
00:32:33,810 --> 00:32:37,800
achieve that there are previous instance

546
00:32:35,970 --> 00:32:39,630
you know we will talk about the previous

547
00:32:37,800 --> 00:32:41,970
and the next instance right so this one

548
00:32:39,630 --> 00:32:45,919
is low this one is high and

549
00:32:41,970 --> 00:32:49,409
the high one is like more cool right now

550
00:32:45,919 --> 00:32:52,759
to achieve that the previous instance

551
00:32:49,409 --> 00:32:56,340
creates an encrypted rc4 clean up file

552
00:32:52,759 --> 00:33:00,659
it's encrypted but inside of it it has

553
00:32:56,340 --> 00:33:04,259
all the files that must be cleaned by

554
00:33:00,659 --> 00:33:06,419
the next instance so the next instance

555
00:33:04,259 --> 00:33:09,629
is always the guy who makes all the hard

556
00:33:06,419 --> 00:33:12,919
work you know cleaning up before

557
00:33:09,629 --> 00:33:16,799
sorry cleaning up after he's like a

558
00:33:12,919 --> 00:33:20,730
small brother and the primary key here

559
00:33:16,799 --> 00:33:23,879
is an internal IDing identification

560
00:33:20,730 --> 00:33:26,190
again and secondary one is PRNG

561
00:33:23,879 --> 00:33:28,259
generated and stored inside remember the

562
00:33:26,190 --> 00:33:30,080
pseudo-random number generator we've

563
00:33:28,259 --> 00:33:37,049
discovered in the global constructor

564
00:33:30,080 --> 00:33:41,490
here's the first one all right let's see

565
00:33:37,049 --> 00:33:43,590
what keylogger of Artyom can do by the

566
00:33:41,490 --> 00:33:45,750
way I don't think the key logger is the

567
00:33:43,590 --> 00:33:51,658
best part but it has some interesting

568
00:33:45,750 --> 00:33:54,570
features because first its finest it it

569
00:33:51,659 --> 00:33:58,159
doesn't you know drop anything on the

570
00:33:54,570 --> 00:34:01,139
disk it works in the most dreamy way so

571
00:33:58,159 --> 00:34:06,620
runtime config you know the encrypted

572
00:34:01,139 --> 00:34:11,790
one we've talked about is stored in the

573
00:34:06,620 --> 00:34:15,989
encrypted register config and if a PID

574
00:34:11,790 --> 00:34:19,440
or tid of the process where you know the

575
00:34:15,989 --> 00:34:24,928
user types something on the keyboard or

576
00:34:19,440 --> 00:34:28,440
like you know what is it maybe you maybe

577
00:34:24,929 --> 00:34:32,270
he just ll tap from the browser to you

578
00:34:28,440 --> 00:34:36,510
know word so a logger entry is encrypted

579
00:34:32,270 --> 00:34:38,819
finalized and sent to see - nothing is

580
00:34:36,510 --> 00:34:41,280
stored on the disk the key loggers

581
00:34:38,819 --> 00:34:45,779
present as a hug function the hooks WH

582
00:34:41,280 --> 00:34:48,270
keyboard and the main module DLL is

583
00:34:45,780 --> 00:34:51,060
injected into every process with which a

584
00:34:48,270 --> 00:34:53,790
user works using keyboard injected

585
00:34:51,060 --> 00:34:55,560
instances initialize and connect to the

586
00:34:53,790 --> 00:34:57,750
main window affable

587
00:34:55,560 --> 00:35:01,470
you know for them to do not to do the

588
00:34:57,750 --> 00:35:02,190
hard work next one is the cleaver

589
00:35:01,470 --> 00:35:04,770
stealer

590
00:35:02,190 --> 00:35:09,570
if utilizes the same stream mechanism as

591
00:35:04,770 --> 00:35:12,090
the keylogger but with you know feature

592
00:35:09,570 --> 00:35:14,430
that akin law that a keylogger can't do

593
00:35:12,090 --> 00:35:16,470
it can steal all the data I mean like

594
00:35:14,430 --> 00:35:22,069
pictures everything you have you know

595
00:35:16,470 --> 00:35:22,069
copy and paste it to your cleaver and

596
00:35:22,400 --> 00:35:31,260
yeah key you know keyboard you know key

597
00:35:27,330 --> 00:35:34,319
logger can the copy and paste can

598
00:35:31,260 --> 00:35:36,470
protect you from the key logger but you

599
00:35:34,320 --> 00:35:39,960
know from this I'm sorry

600
00:35:36,470 --> 00:35:46,109
colleague each mini a nibble survival

601
00:35:39,960 --> 00:35:50,310
any of the watches and niki lauda to

602
00:35:46,110 --> 00:35:53,180
present but this presentation is

603
00:35:50,310 --> 00:35:53,180
canceled

604
00:35:54,410 --> 00:36:01,339
most propose it you may continue

605
00:36:01,960 --> 00:36:14,980
so most of you are still here that's

606
00:36:04,329 --> 00:36:17,770
cool no walk anyway alright sir we're

607
00:36:14,980 --> 00:36:22,630
ready to continue anything sir

608
00:36:17,770 --> 00:36:24,640
a Trojan can be called banking Trojan if

609
00:36:22,630 --> 00:36:28,390
it doesn't have the remote banking you

610
00:36:24,640 --> 00:36:32,759
know stuff scatters every type of sealer

611
00:36:28,390 --> 00:36:43,450
of the information that's found oh no

612
00:36:32,760 --> 00:36:45,099
Dave okay anyway so remote banking you

613
00:36:43,450 --> 00:36:49,000
know that all the detectors and scanners

614
00:36:45,099 --> 00:36:51,760
can be like can be split in two parts so

615
00:36:49,000 --> 00:36:53,470
the target window classname you know

616
00:36:51,760 --> 00:36:56,369
object battle object button object

617
00:36:53,470 --> 00:37:01,328
static so it scans the class names and

618
00:36:56,369 --> 00:37:03,220
window names of the windows in system

619
00:37:01,329 --> 00:37:05,140
and there are a couple of you know

620
00:37:03,220 --> 00:37:09,098
variants like object ball and object

621
00:37:05,140 --> 00:37:13,540
static and tea panel TV SDK control

622
00:37:09,099 --> 00:37:15,819
scroller my favorite and by the way here

623
00:37:13,540 --> 00:37:21,790
we have you know one interesting thing

624
00:37:15,819 --> 00:37:25,210
because it also does the WM if the

625
00:37:21,790 --> 00:37:28,210
parent of the window we are examining if

626
00:37:25,210 --> 00:37:29,740
the get text from that window matches

627
00:37:28,210 --> 00:37:34,450
the pattern can you see the pattern

628
00:37:29,740 --> 00:37:37,270
it's the spaces and a comma if the text

629
00:37:34,450 --> 00:37:39,399
matches it connects to make two main

630
00:37:37,270 --> 00:37:41,920
window to make some screenshots you know

631
00:37:39,400 --> 00:37:45,040
it's the main thing that RT M can do

632
00:37:41,920 --> 00:37:48,849
here it can detect stuff screenshot

633
00:37:45,040 --> 00:37:54,819
stuff you know make videos of stuff and

634
00:37:48,849 --> 00:38:01,420
just connect to the CT server so here's

635
00:37:54,819 --> 00:38:05,020
how it looks in symbols and that's still

636
00:38:01,420 --> 00:38:08,589
a mystery to me because with high

637
00:38:05,020 --> 00:38:13,930
confidence me and my colleagues you know

638
00:38:08,589 --> 00:38:15,759
can say about the first words are like

639
00:38:13,930 --> 00:38:19,569
dear client

640
00:38:15,759 --> 00:38:23,949
thank you for in Russian is Drago a

641
00:38:19,569 --> 00:38:25,269
client spicy pasta and we couldn't brute

642
00:38:23,949 --> 00:38:29,459
force the other see if you have any

643
00:38:25,269 --> 00:38:35,019
ideas just come to me and I'll listen

644
00:38:29,459 --> 00:38:37,359
sir also windows class names get window

645
00:38:35,019 --> 00:38:39,758
text and browser address lines asked and

646
00:38:37,359 --> 00:38:43,119
the browser address lines are not so

647
00:38:39,759 --> 00:38:48,009
easy to scan Artyom initializes dde a

648
00:38:43,119 --> 00:38:50,859
DBE server which actually connects to

649
00:38:48,009 --> 00:38:53,229
the browser's and from there you can get

650
00:38:50,859 --> 00:38:55,328
the address lines and here you can see

651
00:38:53,229 --> 00:38:59,019
the address line parts and class names

652
00:38:55,329 --> 00:39:03,299
or window texts that RT M is interested

653
00:38:59,019 --> 00:39:08,129
in so if it detects like something of it

654
00:39:03,299 --> 00:39:12,788
you know the screenshots are coming when

655
00:39:08,130 --> 00:39:16,779
so the list of the banks in which RT M

656
00:39:12,789 --> 00:39:22,539
is interested in is a Holland predefined

657
00:39:16,779 --> 00:39:27,819
because every time our TM connects to

658
00:39:22,539 --> 00:39:30,249
the server to just tell the c2 that he

659
00:39:27,819 --> 00:39:34,869
has found some banking software maybe

660
00:39:30,249 --> 00:39:37,509
payment system you know banks here he

661
00:39:34,869 --> 00:39:40,779
doesn't you know send all the

662
00:39:37,509 --> 00:39:44,259
information the name the stuff here you

663
00:39:40,779 --> 00:39:47,559
know found the window name maybe the

664
00:39:44,259 --> 00:39:51,299
browser one no you just have a bit array

665
00:39:47,559 --> 00:39:56,799
in which every bit is set or not set and

666
00:39:51,299 --> 00:39:58,719
that's why c2 must know which bit

667
00:39:56,799 --> 00:40:04,449
corresponds to which bank

668
00:39:58,719 --> 00:40:09,069
so this one is static and it can change

669
00:40:04,449 --> 00:40:11,619
from version to version so the browser's

670
00:40:09,069 --> 00:40:13,630
history scanner works like this you know

671
00:40:11,619 --> 00:40:15,759
three different browsers three different

672
00:40:13,630 --> 00:40:22,209
techniques because Internet Explorer can

673
00:40:15,759 --> 00:40:25,100
be just you know find first URL cache

674
00:40:22,209 --> 00:40:27,859
entry and you get it

675
00:40:25,100 --> 00:40:31,850
but for Chrome and Firefox you need to

676
00:40:27,860 --> 00:40:35,540
scan the files directly to find you know

677
00:40:31,850 --> 00:40:40,190
the things on the left the address line

678
00:40:35,540 --> 00:40:42,529
parts so for Chrome it's Google Chrome

679
00:40:40,190 --> 00:40:45,070
user data default history and files in

680
00:40:42,530 --> 00:40:51,800
there and for Firefox it's the places

681
00:40:45,070 --> 00:40:54,350
SQLite in the default folder in the

682
00:40:51,800 --> 00:40:59,180
folder of the default profile for the

683
00:40:54,350 --> 00:41:03,470
current user so remember the encrypted

684
00:40:59,180 --> 00:41:06,379
register cultic it's being done like

685
00:41:03,470 --> 00:41:09,020
this all the right tongue parameters are

686
00:41:06,380 --> 00:41:12,260
stored in there like key logging every

687
00:41:09,020 --> 00:41:15,259
kind of stuff like current control

688
00:41:12,260 --> 00:41:21,710
server addresses everything in runtime a

689
00:41:15,260 --> 00:41:26,780
story in there the sub key is software /

690
00:41:21,710 --> 00:41:30,950
I internal identification 1b so it's

691
00:41:26,780 --> 00:41:33,730
already you know looks like some kind of

692
00:41:30,950 --> 00:41:34,939
encrypted stuff maybe like random stuff

693
00:41:33,730 --> 00:41:38,090
okay

694
00:41:34,940 --> 00:41:39,650
to retrieve to retrieve a value the

695
00:41:38,090 --> 00:41:42,710
following is done so it takes the

696
00:41:39,650 --> 00:41:47,150
original value name for example CC dot

697
00:41:42,710 --> 00:41:49,460
address make the secondary key is shown

698
00:41:47,150 --> 00:41:50,540
below so it takes the length of the

699
00:41:49,460 --> 00:41:53,720
original value name

700
00:41:50,540 --> 00:41:56,090
it's only a byte of course because there

701
00:41:53,720 --> 00:41:59,180
aren't you know beak belly names there

702
00:41:56,090 --> 00:42:01,880
it expands it to the toward from a byte

703
00:41:59,180 --> 00:42:06,410
with like shifts and ORS makes the

704
00:42:01,880 --> 00:42:11,150
secondary key and uses the primary key

705
00:42:06,410 --> 00:42:14,210
of the s block that is well that was

706
00:42:11,150 --> 00:42:17,300
originally generated for the C 2

707
00:42:14,210 --> 00:42:21,200
communication and then query by

708
00:42:17,300 --> 00:42:22,880
encrypted value name so no clear clear

709
00:42:21,200 --> 00:42:25,160
text value names are stored there but

710
00:42:22,880 --> 00:42:29,900
the values are pretty clear you know

711
00:42:25,160 --> 00:42:35,140
ip's stuff everything you want and my

712
00:42:29,900 --> 00:42:35,140
favorite part is the war with is it

713
00:42:35,600 --> 00:42:44,759
beyond the a/v check are the MP forms is

714
00:42:39,630 --> 00:42:48,720
the not 32 and I have a couple of

715
00:42:44,760 --> 00:42:51,180
thoughts because you know my first

716
00:42:48,720 --> 00:42:55,290
thought is that is it made the

717
00:42:51,180 --> 00:42:59,540
disclosure paper and a research on

718
00:42:55,290 --> 00:43:02,910
earlier versions of RTM you know the

719
00:42:59,540 --> 00:43:07,259
2015-2016 at early 2017 versions and

720
00:43:02,910 --> 00:43:12,839
they've done a great research and that's

721
00:43:07,260 --> 00:43:16,380
why RT M you know loves it and the

722
00:43:12,840 --> 00:43:18,990
methods of you know fighting with is it

723
00:43:16,380 --> 00:43:22,619
a certainly evolving because in the late

724
00:43:18,990 --> 00:43:25,770
2018 the method was like create the temp

725
00:43:22,619 --> 00:43:29,990
file with the thousand x 0 then exchange

726
00:43:25,770 --> 00:43:39,540
it with the license dot C F G of is it

727
00:43:29,990 --> 00:43:42,390
well okay it evolved into this the 2019

728
00:43:39,540 --> 00:43:45,180
version makes it in a more interesting

729
00:43:42,390 --> 00:43:45,779
way so here you can see the registry

730
00:43:45,180 --> 00:43:48,680
keys

731
00:43:45,780 --> 00:43:52,380
they're responsible for file scanner and

732
00:43:48,680 --> 00:43:56,520
process memory scanner excludes RT M

733
00:43:52,380 --> 00:44:01,830
doesn't want itself to be scanned by is

734
00:43:56,520 --> 00:44:03,810
it and the only problem that RT M even

735
00:44:01,830 --> 00:44:08,509
with administrator rights can write

736
00:44:03,810 --> 00:44:11,900
can't write straight to these keys and

737
00:44:08,510 --> 00:44:15,119
what do you think how did they solve it

738
00:44:11,900 --> 00:44:17,640
if the driver causes me problems than

739
00:44:15,119 --> 00:44:20,790
why loaded so here are the steps

740
00:44:17,640 --> 00:44:24,450
it sets the default boot entry to save

741
00:44:20,790 --> 00:44:26,130
but then it prompts the user with a

742
00:44:24,450 --> 00:44:28,549
proper message by the way you can here

743
00:44:26,130 --> 00:44:33,230
you can see the grammar mistakes in here

744
00:44:28,550 --> 00:44:37,470
Windows restoring for install updates

745
00:44:33,230 --> 00:44:40,740
when it must be Windows is restarting to

746
00:44:37,470 --> 00:44:42,868
installed so the Russian one kill so

747
00:44:40,740 --> 00:44:45,600
prompt user with a proper message pay

748
00:44:42,869 --> 00:44:48,290
gentleman and make proper persistence

749
00:44:45,600 --> 00:44:52,080
that works in st. but

750
00:44:48,290 --> 00:44:55,850
for RTM this persistence is current

751
00:44:52,080 --> 00:44:59,400
version when loggin shell and then

752
00:44:55,850 --> 00:45:00,930
reboot yourself into say but realize is

753
00:44:59,400 --> 00:45:03,600
a drive it doesn't have the power there

754
00:45:00,930 --> 00:45:08,940
it's not loaded and write what you want

755
00:45:03,600 --> 00:45:14,910
to the registry magic it's the hard core

756
00:45:08,940 --> 00:45:18,930
solution I think like solid ok let's go

757
00:45:14,910 --> 00:45:20,940
with the protocol and the to see two

758
00:45:18,930 --> 00:45:23,190
URLs per sample are in the decrypted

759
00:45:20,940 --> 00:45:27,210
vault so it has the addresses embedded

760
00:45:23,190 --> 00:45:31,620
the men names are typically a part of a

761
00:45:27,210 --> 00:45:34,320
doubt beat domain zone the independent

762
00:45:31,620 --> 00:45:38,430
one the ins answered one I piece can be

763
00:45:34,320 --> 00:45:40,820
viewed at nature in and are directly

764
00:45:38,430 --> 00:45:44,730
parsed from there you can see the

765
00:45:40,820 --> 00:45:49,080
screenshot of the name chain side and it

766
00:45:44,730 --> 00:45:51,360
just you know gets the gets all the page

767
00:45:49,080 --> 00:45:54,990
and just parses the address manually

768
00:45:51,360 --> 00:45:56,910
from there next if anything goes wrong

769
00:45:54,990 --> 00:45:59,250
and name chain doesn't you know didn't

770
00:45:56,910 --> 00:46:02,129
work it has five additional DNS server

771
00:45:59,250 --> 00:46:03,930
addresses to do the work and I don't

772
00:46:02,130 --> 00:46:07,050
know why but it they are chosen like

773
00:46:03,930 --> 00:46:11,279
randomly every time and the randomness

774
00:46:07,050 --> 00:46:15,330
is kind of cool because randomizing DNS

775
00:46:11,280 --> 00:46:18,330
server order is like if 50 rounds of

776
00:46:15,330 --> 00:46:21,299
random you can see in the picture can

777
00:46:18,330 --> 00:46:26,190
explain this for DNS resolve attempts

778
00:46:21,300 --> 00:46:29,010
are made for every iteration and for the

779
00:46:26,190 --> 00:46:31,380
next iteration it switches the URL

780
00:46:29,010 --> 00:46:33,150
because it has two addresses if we can

781
00:46:31,380 --> 00:46:38,010
go with one we will try with the second

782
00:46:33,150 --> 00:46:40,470
and you know as the last hope it does a

783
00:46:38,010 --> 00:46:44,730
cat host by name if nothing works

784
00:46:40,470 --> 00:46:47,970
I got host by name seems a little bit

785
00:46:44,730 --> 00:46:54,210
strange but later after telling you

786
00:46:47,970 --> 00:46:57,660
about all the commands are TM can do you

787
00:46:54,210 --> 00:46:58,800
will recognize that this is just a

788
00:46:57,660 --> 00:47:05,029
clever move

789
00:46:58,800 --> 00:47:08,970
- you know bypass blacklists so let's go

790
00:47:05,030 --> 00:47:10,710
the protocol looks like this because

791
00:47:08,970 --> 00:47:11,580
once the AP is resolved it's time to

792
00:47:10,710 --> 00:47:13,950
talk to the server

793
00:47:11,580 --> 00:47:17,759
are they M implements its own custom

794
00:47:13,950 --> 00:47:20,430
protocol over HTTP you can see it in the

795
00:47:17,760 --> 00:47:23,640
picture the interesting parts of which

796
00:47:20,430 --> 00:47:27,000
are the secondary rc4 key which is PRNG

797
00:47:23,640 --> 00:47:30,839
every time you know the s-block for the

798
00:47:27,000 --> 00:47:33,600
conversation and different secondary rc4

799
00:47:30,840 --> 00:47:34,530
key for every packet because it's just

800
00:47:33,600 --> 00:47:37,410
embedded into it

801
00:47:34,530 --> 00:47:40,830
everyone can decrypt it if if you knows

802
00:47:37,410 --> 00:47:46,170
like the primary key right the initial s

803
00:47:40,830 --> 00:47:50,340
block it contains the crc32 of the rest

804
00:47:46,170 --> 00:47:54,350
of the packet and crc32 of packets main

805
00:47:50,340 --> 00:47:58,020
module on the disk anyway

806
00:47:54,350 --> 00:48:01,589
the server can tell it with high

807
00:47:58,020 --> 00:48:03,960
confidence that it's you know the true

808
00:48:01,590 --> 00:48:09,410
packet that it wasn't like tampered with

809
00:48:03,960 --> 00:48:12,300
because it's not easy to do like at all

810
00:48:09,410 --> 00:48:14,220
and also it contains the result of gets

811
00:48:12,300 --> 00:48:17,610
account some some randomness maybe for

812
00:48:14,220 --> 00:48:20,250
the hash so okay and of course the RTM

813
00:48:17,610 --> 00:48:23,030
command outcoming RTM commands are like

814
00:48:20,250 --> 00:48:28,580
bytes and they are not as interesting as

815
00:48:23,030 --> 00:48:31,650
interesting as incoming because it just

816
00:48:28,580 --> 00:48:33,660
indicates what type of information it

817
00:48:31,650 --> 00:48:35,880
sends to the c2 server was it a

818
00:48:33,660 --> 00:48:37,470
keylogger entry maybe a screenshot and

819
00:48:35,880 --> 00:48:44,250
all of them have like different numbers

820
00:48:37,470 --> 00:48:48,390
so offsets 27 hacks Tilian contain

821
00:48:44,250 --> 00:48:50,730
command depending data after form in the

822
00:48:48,390 --> 00:48:52,379
packet its contents I encrypted from 0-6

823
00:48:50,730 --> 00:48:54,980
to the end of the packet so we see only

824
00:48:52,380 --> 00:49:03,750
the secondary our c4 key unencrypted and

825
00:48:54,980 --> 00:49:06,900
a little word okay so once

826
00:49:03,750 --> 00:49:09,570
RTM has the AP and has the first packet

827
00:49:06,900 --> 00:49:12,930
assembled the conversation starts

828
00:49:09,570 --> 00:49:14,670
immediately that's the first received

829
00:49:12,930 --> 00:49:16,319
packet and actually every received

830
00:49:14,670 --> 00:49:18,290
packet looks like this because only our

831
00:49:16,320 --> 00:49:21,180
c4 key is exposed not even the word and

832
00:49:18,290 --> 00:49:24,180
the primary our c4 key is still the one

833
00:49:21,180 --> 00:49:26,040
used for c2 so let's decrypted and we

834
00:49:24,180 --> 00:49:28,350
get something like this the second word

835
00:49:26,040 --> 00:49:30,900
is the CVC authority of the rest of the

836
00:49:28,350 --> 00:49:34,500
packet then a command and then a like

837
00:49:30,900 --> 00:49:37,080
command specific data the client takes

838
00:49:34,500 --> 00:49:38,880
the CRC of the packet by itself to check

839
00:49:37,080 --> 00:49:42,930
that it hasn't been tampered with and

840
00:49:38,880 --> 00:49:45,300
then like if those two don't match the

841
00:49:42,930 --> 00:49:49,080
packet is considered corrupted and is

842
00:49:45,300 --> 00:49:52,440
thrown away all the incoming commands

843
00:49:49,080 --> 00:49:56,040
are many more interesting than outcoming

844
00:49:52,440 --> 00:49:58,980
which are only indicators so if you look

845
00:49:56,040 --> 00:50:02,250
at the table you can see that we can

846
00:49:58,980 --> 00:50:06,000
receive like lots of different data we

847
00:50:02,250 --> 00:50:09,090
can drop it we can you know load it with

848
00:50:06,000 --> 00:50:10,860
load library we can load it reflectively

849
00:50:09,090 --> 00:50:14,130
we can receive and install a new version

850
00:50:10,860 --> 00:50:18,980
of our TM for this command we can like

851
00:50:14,130 --> 00:50:22,290
receive a file and drop it with you know

852
00:50:18,980 --> 00:50:29,720
random sorry pseudo-random on hexley

853
00:50:22,290 --> 00:50:29,720
fight stuff name to some directory and

854
00:50:29,870 --> 00:50:38,210
you know that's already quite a lot

855
00:50:32,940 --> 00:50:42,090
because by decrypting these commands a

856
00:50:38,210 --> 00:50:45,600
Pony stealer that was like distributed

857
00:50:42,090 --> 00:50:50,640
through our TM command and control

858
00:50:45,600 --> 00:50:54,960
server was discovered so let's talk

859
00:50:50,640 --> 00:50:59,190
about other type of our TM commands

860
00:50:54,960 --> 00:51:02,130
because as you can see here if we

861
00:50:59,190 --> 00:51:05,130
receive one hex the internals of

862
00:51:02,130 --> 00:51:07,860
programs execution starts so what our

863
00:51:05,130 --> 00:51:12,480
internal sub programs of our TM they're

864
00:51:07,860 --> 00:51:15,960
called is peas here it can be the the so

865
00:51:12,480 --> 00:51:17,049
called core commands includes the core

866
00:51:15,960 --> 00:51:21,609
part and

867
00:51:17,049 --> 00:51:26,409
the command and then the you know the

868
00:51:21,609 --> 00:51:29,828
command specific data and it can make a

869
00:51:26,409 --> 00:51:32,679
pass to a plugin command so a plugin

870
00:51:29,829 --> 00:51:35,259
that already been loaded that already

871
00:51:32,679 --> 00:51:37,599
been initialized this command and this

872
00:51:35,259 --> 00:51:42,149
traffic can go straight to the plugin

873
00:51:37,599 --> 00:51:46,869
and it's not being parsed like with the

874
00:51:42,149 --> 00:51:48,939
Corps command parser so these are lots

875
00:51:46,869 --> 00:51:52,779
of core commands that are Liam can

876
00:51:48,939 --> 00:51:55,509
receive and execute and most of them are

877
00:51:52,779 --> 00:51:58,869
pretty straightforward but there are a

878
00:51:55,509 --> 00:52:00,659
couple of interesting ones so let's talk

879
00:51:58,869 --> 00:52:06,279
about all of them

880
00:52:00,659 --> 00:52:10,299
so the CFG set STR again STR all that

881
00:52:06,279 --> 00:52:14,799
types get toward is work with the

882
00:52:10,299 --> 00:52:16,959
encrypted config find files find some

883
00:52:14,799 --> 00:52:19,569
arbitrary files download unload

884
00:52:16,959 --> 00:52:22,029
uninstall uninstall lock that will be

885
00:52:19,569 --> 00:52:25,808
discussed later but for me the most

886
00:52:22,029 --> 00:52:30,459
interesting part is video start so let's

887
00:52:25,809 --> 00:52:34,059
talk about this the video command

888
00:52:30,459 --> 00:52:37,899
contains core plus videos charge plus IP

889
00:52:34,059 --> 00:52:40,209
so V address it does not utilize

890
00:52:37,899 --> 00:52:43,719
before-mentioned protocol it uses it

891
00:52:40,209 --> 00:52:46,328
utilizes TCP and video is being made by

892
00:52:43,719 --> 00:52:50,619
sending screenshots in a loop with a

893
00:52:46,329 --> 00:52:53,469
given interval and it implements a

894
00:52:50,619 --> 00:52:57,279
custom protocol over TCP not HTTP like

895
00:52:53,469 --> 00:53:00,489
the general c2 conversation first the

896
00:52:57,279 --> 00:53:02,949
parameters packet is sent you can see

897
00:53:00,489 --> 00:53:08,049
the parameters packet example on the

898
00:53:02,949 --> 00:53:10,299
left so these are actually like width of

899
00:53:08,049 --> 00:53:13,149
a screen shot height of a screen shot

900
00:53:10,299 --> 00:53:19,380
the size all somehow soared with the

901
00:53:13,149 --> 00:53:22,808
secondary key and what can we receive

902
00:53:19,380 --> 00:53:24,099
after sending the screen shot received

903
00:53:22,809 --> 00:53:26,439
packet is not encrypted

904
00:53:24,099 --> 00:53:29,139
it contains the new capture interval as

905
00:53:26,439 --> 00:53:30,899
you see in the received packet example

906
00:53:29,139 --> 00:53:33,960
we can see

907
00:53:30,900 --> 00:53:36,210
the command at the offset zero and then

908
00:53:33,960 --> 00:53:38,730
one

909
00:53:36,210 --> 00:53:40,740
you know about at the offset one is the

910
00:53:38,730 --> 00:53:45,890
new capture interval in seconds so we

911
00:53:40,740 --> 00:53:45,890
receive only two bytes in response and

912
00:53:46,130 --> 00:53:52,560
the command can contain quite an

913
00:53:49,950 --> 00:53:55,560
interesting thing because you know the

914
00:53:52,560 --> 00:53:58,890
CMB is like 0 1 and or anything else

915
00:53:55,560 --> 00:54:01,080
size of a byte we see you know the

916
00:53:58,890 --> 00:54:05,940
second value we receive is just a

917
00:54:01,080 --> 00:54:09,540
multiplier adjustment because so it's

918
00:54:05,940 --> 00:54:12,060
just the adjustment for you know the

919
00:54:09,540 --> 00:54:15,180
intervals of taking screenshots because

920
00:54:12,060 --> 00:54:17,460
remember we make the video by taking the

921
00:54:15,180 --> 00:54:20,930
screenshots until after the intervals

922
00:54:17,460 --> 00:54:26,070
but the second one is a big red button

923
00:54:20,930 --> 00:54:32,370
and let's dive deep into the experience

924
00:54:26,070 --> 00:54:35,820
of the host that's been infected by RT M

925
00:54:32,370 --> 00:54:39,150
so imagine yourself a sysadmin of a

926
00:54:35,820 --> 00:54:40,800
small firm and the accountant comes to

927
00:54:39,150 --> 00:54:42,600
you and says that some you know

928
00:54:40,800 --> 00:54:45,960
suspicious stuff is happening with their

929
00:54:42,600 --> 00:54:48,569
hosts so you just go to the hosts you

930
00:54:45,960 --> 00:54:50,310
know start like process monitor and

931
00:54:48,570 --> 00:54:55,110
start investigating some suspicious

932
00:54:50,310 --> 00:54:57,720
activity meanwhile at the scene C they

933
00:54:55,110 --> 00:55:05,160
look at the process ma are being

934
00:54:57,720 --> 00:55:07,379
launched and here's exactly what the

935
00:55:05,160 --> 00:55:10,250
investigator or the sysadmin will see

936
00:55:07,380 --> 00:55:10,250
after that

937
00:55:12,299 --> 00:55:19,930
yeah black screen sir if someone had

938
00:55:17,230 --> 00:55:22,960
seen see just like pops out their red

939
00:55:19,930 --> 00:55:24,430
button RDM starts a window that is

940
00:55:22,960 --> 00:55:27,160
designed to create a book you know a

941
00:55:24,430 --> 00:55:29,799
black screen windows pros is designed to

942
00:55:27,160 --> 00:55:31,930
hide the cursor and ignore the WM closed

943
00:55:29,799 --> 00:55:35,890
message so it's just a return zero in

944
00:55:31,930 --> 00:55:38,440
the handler meanwhile art am clears the

945
00:55:35,890 --> 00:55:41,618
encrypted registry convict and persist

946
00:55:38,440 --> 00:55:44,700
itself wipes out MBR on accessible

947
00:55:41,619 --> 00:55:47,470
physical drives deletes OS loaders and

948
00:55:44,700 --> 00:55:51,299
sets the current version when logon

949
00:55:47,470 --> 00:55:54,189
registry to shut down s ft0

950
00:55:51,299 --> 00:55:59,170
which causes the computer to shut down

951
00:55:54,190 --> 00:56:03,609
on logon EA that's what I call a red

952
00:55:59,170 --> 00:56:06,099
button that's cool and the last one I

953
00:56:03,609 --> 00:56:12,369
want to tell you about is the plugin

954
00:56:06,099 --> 00:56:16,470
system there's actually very little

955
00:56:12,369 --> 00:56:22,029
information about the plugins because

956
00:56:16,470 --> 00:56:24,399
after analyzing we can say that all the

957
00:56:22,029 --> 00:56:29,019
plugins will have the RTM model EP

958
00:56:24,400 --> 00:56:34,329
export but the plugins are stored in an

959
00:56:29,019 --> 00:56:39,359
encrypted way near the main module so in

960
00:56:34,329 --> 00:56:42,579
the working directory so everyone like

961
00:56:39,359 --> 00:56:46,328
submitting it to virustotal it just says

962
00:56:42,579 --> 00:56:49,059
that it's you know gibberish zero like

963
00:56:46,329 --> 00:56:53,980
it's not infected that's ok so everyone

964
00:56:49,059 --> 00:56:59,470
just leaves them there we found a couple

965
00:56:53,980 --> 00:57:02,710
of old ones and it happens to be like

966
00:56:59,470 --> 00:57:06,339
the browser's history module which I you

967
00:57:02,710 --> 00:57:10,089
know you know told you before some of

968
00:57:06,339 --> 00:57:12,910
the old modules become embedded embedded

969
00:57:10,089 --> 00:57:15,519
to the main module so it grows like

970
00:57:12,910 --> 00:57:18,190
bigger and bigger and bigger and the

971
00:57:15,519 --> 00:57:23,229
latest ones that we have you know found

972
00:57:18,190 --> 00:57:25,230
on the virus total and decrypted contain

973
00:57:23,230 --> 00:57:29,800
the process Locker

974
00:57:25,230 --> 00:57:33,970
which like which like suspends the given

975
00:57:29,800 --> 00:57:40,380
process and the VNC module when

976
00:57:33,970 --> 00:57:44,618
screenshots maybe aren't enough maybe so

977
00:57:40,380 --> 00:57:47,319
the last thing all the plugins can use

978
00:57:44,619 --> 00:57:50,050
nearly all the embedded functionality of

979
00:57:47,319 --> 00:57:52,359
the main module here you can see the

980
00:57:50,050 --> 00:57:58,150
huge API switch that's inside the main

981
00:57:52,359 --> 00:58:01,660
one and actually all the plugins can

982
00:57:58,150 --> 00:58:04,750
call to different switch cases and get

983
00:58:01,660 --> 00:58:10,170
you know all they want maybe Global's

984
00:58:04,750 --> 00:58:12,760
you know custom CNC you addresses so

985
00:58:10,170 --> 00:58:15,970
every piece of functionality that we're

986
00:58:12,760 --> 00:58:24,730
talked about today can be utilized by

987
00:58:15,970 --> 00:58:28,990
plugins I think that it's all for now so

988
00:58:24,730 --> 00:58:32,369
it's quite complex expandable utilizes

989
00:58:28,990 --> 00:58:38,229
unusual techniques you know red buttons

990
00:58:32,369 --> 00:58:41,079
save but cool and requires periodical re

991
00:58:38,230 --> 00:58:42,790
analysis because every two or three

992
00:58:41,079 --> 00:58:45,369
months they are active they make new

993
00:58:42,790 --> 00:58:48,520
releases they in their embedding the

994
00:58:45,369 --> 00:58:52,780
plugins into the main module and you

995
00:58:48,520 --> 00:58:54,940
know making new features and that's all

996
00:58:52,780 --> 00:58:56,450
for today thank you very much for

997
00:58:54,940 --> 00:59:00,690
listening

998
00:58:56,450 --> 00:59:00,689
[Applause]

999
00:59:03,150 --> 00:59:12,060
so who has questions well or

1000
00:59:18,470 --> 00:59:27,140
so hello it was very interesting

1001
00:59:22,190 --> 00:59:29,300
you can speak Russian so it was

1002
00:59:27,140 --> 00:59:31,970
interesting to talk to you and more

1003
00:59:29,300 --> 00:59:38,630
interesting is to ask how do you test

1004
00:59:31,970 --> 00:59:42,830
this malware if Cusco sandbox says that

1005
00:59:38,630 --> 00:59:49,580
it cannot run such malware and in the

1006
00:59:42,830 --> 00:59:52,840
debugger also there is a problem please

1007
00:59:49,580 --> 00:59:57,770
tell me what kind of tools do you run

1008
00:59:52,840 --> 01:00:02,150
and in which environment like local

1009
00:59:57,770 --> 01:00:08,810
sandboxes you know the kakuzu and stuff

1010
01:00:02,150 --> 01:00:12,370
but mostly it's our own like built for

1011
01:00:08,810 --> 01:00:15,950
the particular malware environments so

1012
01:00:12,370 --> 01:00:19,430
when I analyze something and see you

1013
01:00:15,950 --> 01:00:22,580
know strange stuff strange checks I make

1014
01:00:19,430 --> 01:00:26,629
my own virtual machines and check the

1015
01:00:22,580 --> 01:00:29,090
malware in them so I can see how it

1016
01:00:26,630 --> 01:00:34,400
behaves itself in different virtual

1017
01:00:29,090 --> 01:00:38,690
machines I've made like myself this one

1018
01:00:34,400 --> 01:00:41,390
yes all functionality cannot be

1019
01:00:38,690 --> 01:00:44,510
disclosed in one virtual machine you

1020
01:00:41,390 --> 01:00:47,650
should have one actual real physical

1021
01:00:44,510 --> 01:00:52,010
machine just to disclose function I'd

1022
01:00:47,650 --> 01:00:56,960
like a couple of situations when a real

1023
01:00:52,010 --> 01:01:03,470
hardware is required but they aren't

1024
01:00:56,960 --> 01:01:05,660
related to RTM I think it shows no pros

1025
01:01:03,470 --> 01:01:07,640
right and one more question in your

1026
01:01:05,660 --> 01:01:10,970
slides you saw the result of the

1027
01:01:07,640 --> 01:01:13,839
analysis with the help of hydro hydro

1028
01:01:10,970 --> 01:01:19,850
hydro No

1029
01:01:13,840 --> 01:01:24,590
ok EDA and also some scripts in

1030
01:01:19,850 --> 01:01:26,339
PowerShell where you demonstrated all

1031
01:01:24,590 --> 01:01:28,920
strings

1032
01:01:26,339 --> 01:01:34,680
yeah there was a result of a powershell

1033
01:01:28,920 --> 01:01:37,229
script you know the it was just it was

1034
01:01:34,680 --> 01:01:42,859
just launched in like CMD

1035
01:01:37,229 --> 01:01:49,379
so it was like python and the result yes

1036
01:01:42,859 --> 01:01:53,609
I see and what was the tool it's written

1037
01:01:49,380 --> 01:01:55,769
by myself it's not no so it's a custom

1038
01:01:53,609 --> 01:01:58,910
protocol it's custom encryption so he

1039
01:01:55,769 --> 01:02:13,828
liked her find it parse it and decrypted

1040
01:01:58,910 --> 01:02:16,769
by super sir please Virginia hi thank

1041
01:02:13,829 --> 01:02:21,119
you for your presentation very detailed

1042
01:02:16,769 --> 01:02:23,819
I've never seen the realization of such

1043
01:02:21,119 --> 01:02:27,269
protocols two questions the Trojan is

1044
01:02:23,819 --> 01:02:33,109
well known and it has been in existence

1045
01:02:27,269 --> 01:02:33,109
for a long time the question is to you

1046
01:02:33,709 --> 01:02:41,428
how well did it evolve and how well did

1047
01:02:38,549 --> 01:02:47,599
it expand the capabilities of the

1048
01:02:41,429 --> 01:02:51,019
attacker did it get any more new

1049
01:02:47,599 --> 01:02:58,429
functionalities or did all the change

1050
01:02:51,019 --> 01:03:01,618
the changes related to hide it from the

1051
01:02:58,429 --> 01:03:03,630
investigator you saw an interesting we

1052
01:03:01,619 --> 01:03:09,059
saw an interesting slide of the name

1053
01:03:03,630 --> 01:03:13,349
Cohen and between the it was about link

1054
01:03:09,059 --> 01:03:16,859
between steam and Artyom and did you see

1055
01:03:13,349 --> 01:03:22,709
a practice that the Trojan was loaded by

1056
01:03:16,859 --> 01:03:24,839
one person and then used by another can

1057
01:03:22,709 --> 01:03:27,919
you say that these Trojans are

1058
01:03:24,839 --> 01:03:30,779
associated I haven't seen any like

1059
01:03:27,920 --> 01:03:32,360
pieces of code there like one to one

1060
01:03:30,779 --> 01:03:39,410
like matching

1061
01:03:32,360 --> 01:03:44,330
but so this did answer the second

1062
01:03:39,410 --> 01:03:47,180
question I I like didn't see the stuff

1063
01:03:44,330 --> 01:03:50,710
like it's okay it's the usage of the top

1064
01:03:47,180 --> 01:03:53,569
bit like system and that's okay but

1065
01:03:50,710 --> 01:03:55,870
actually quite like easy blockable

1066
01:03:53,570 --> 01:03:59,570
that's why it has like a ton of

1067
01:03:55,870 --> 01:04:04,299
alternative dns servers or like stuff I

1068
01:03:59,570 --> 01:04:06,860
get hosts by name oh by the way I I

1069
01:04:04,300 --> 01:04:10,750
promise you to tell about the get hosts

1070
01:04:06,860 --> 01:04:10,750
by name stuff and forgot it I'm sorry

1071
01:04:11,050 --> 01:04:19,100
one of the core commands was hosts and

1072
01:04:16,090 --> 01:04:22,670
so when the initial connection is made

1073
01:04:19,100 --> 01:04:25,460
the command hosts add under the of

1074
01:04:22,670 --> 01:04:29,660
course under the admin privileges can be

1075
01:04:25,460 --> 01:04:33,940
pushed and you know just there will be a

1076
01:04:29,660 --> 01:04:38,960
passive inclusion to the hosts one and

1077
01:04:33,940 --> 01:04:41,650
the get host by name Cole is you know

1078
01:04:38,960 --> 01:04:46,760
the cat house by name is called like if

1079
01:04:41,650 --> 01:04:49,690
anything else like didn't work so if you

1080
01:04:46,760 --> 01:04:54,790
can act and they give you the host ad

1081
01:04:49,690 --> 01:04:59,600
they can store the alternative like C&C

1082
01:04:54,790 --> 01:05:02,720
address on your machine like for the

1083
01:04:59,600 --> 01:05:06,200
future it may be like not even online

1084
01:05:02,720 --> 01:05:10,640
yet so we get house by name works like

1085
01:05:06,200 --> 01:05:18,350
this I'm saying so answering your first

1086
01:05:10,640 --> 01:05:22,370
question and it was can you please can

1087
01:05:18,350 --> 01:05:26,650
you ask me yeah the first one no you

1088
01:05:22,370 --> 01:05:26,650
listen you really leave was didi

1089
01:05:26,880 --> 01:05:33,010
the clackers capabilities evolved

1090
01:05:30,160 --> 01:05:36,839
compared to this for any additional

1091
01:05:33,010 --> 01:05:36,840
attacks during this four years

1092
01:05:38,110 --> 01:05:50,530
this whole common set is the same since

1093
01:05:44,940 --> 01:05:53,800
like as I already said the some of the

1094
01:05:50,530 --> 01:05:57,250
modules that were found as plugins to

1095
01:05:53,800 --> 01:05:59,320
RTM they became embedded so they have

1096
01:05:57,250 --> 01:06:02,530
written it they've tested it as a plugin

1097
01:05:59,320 --> 01:06:06,430
which can which they can send from C&C

1098
01:06:02,530 --> 01:06:09,520
server and then just plug in to the main

1099
01:06:06,430 --> 01:06:11,740
module on the infected host yes of

1100
01:06:09,520 --> 01:06:16,120
course they like adding like new

1101
01:06:11,740 --> 01:06:20,109
commands and they are you know tinkering

1102
01:06:16,120 --> 01:06:24,700
with old commands more so the set of

1103
01:06:20,110 --> 01:06:28,930
commands is quite static like you know

1104
01:06:24,700 --> 01:06:31,240
plus one like minus one it's you know

1105
01:06:28,930 --> 01:06:34,359
sample dependent so they're just

1106
01:06:31,240 --> 01:06:36,790
improving the you know the internals of

1107
01:06:34,360 --> 01:06:43,090
their commands here so that's the

1108
01:06:36,790 --> 01:06:46,600
question the man here rhasta spicy

1109
01:06:43,090 --> 01:06:52,510
bazaar okay hello thank you for your

1110
01:06:46,600 --> 01:06:56,500
presentation you said that is just the

1111
01:06:52,510 --> 01:07:03,010
translation from Russia and it can be an

1112
01:06:56,500 --> 01:07:07,690
attribution to rush are there any other

1113
01:07:03,010 --> 01:07:12,870
artifacts that can attribute Artyom to

1114
01:07:07,690 --> 01:07:12,870
authors or spreaders or their geography

1115
01:07:13,530 --> 01:07:19,900
so it mainly targets you know the

1116
01:07:16,000 --> 01:07:23,410
Russian banking system and of course the

1117
01:07:19,900 --> 01:07:25,630
you know the banking systems the you

1118
01:07:23,410 --> 01:07:28,899
know the payment systems that are quite

1119
01:07:25,630 --> 01:07:34,170
popular in Russia so yeah I think that's

1120
01:07:28,900 --> 01:07:37,690
maybe the main one but I thought that

1121
01:07:34,170 --> 01:07:39,950
grammar mistakes that that clearly look

1122
01:07:37,690 --> 01:07:44,710
like they're Russian

1123
01:07:39,950 --> 01:07:44,710
is the most like juicy part of

1124
01:07:46,030 --> 01:07:50,570
attribution done right something like

1125
01:07:50,150 --> 01:07:53,660
that

1126
01:07:50,570 --> 01:07:56,390
did I answer cut you nice thing about

1127
01:07:53,660 --> 01:07:58,879
you yes I would like to clarify the

1128
01:07:56,390 --> 01:08:01,700
usage of Russian language does not point

1129
01:07:58,880 --> 01:08:04,460
to Russia because there's many countries

1130
01:08:01,700 --> 01:08:08,060
having many people speaking Russian

1131
01:08:04,460 --> 01:08:11,839
including the X Russian people that can

1132
01:08:08,060 --> 01:08:13,279
even attack Russian banks based on the

1133
01:08:11,839 --> 01:08:16,250
principle they didn't want to break the

1134
01:08:13,280 --> 01:08:20,180
law of the country they're different

1135
01:08:16,250 --> 01:08:23,810
countries and the more countries the

1136
01:08:20,180 --> 01:08:27,440
better of course but I haven't seen any

1137
01:08:23,810 --> 01:08:29,930
more like things that can say that

1138
01:08:27,439 --> 01:08:32,870
they're Russians by the way they are

1139
01:08:29,930 --> 01:08:35,029
russian-speaking not like particularly

1140
01:08:32,870 --> 01:08:38,299
Russians but russian-speaking because a

1141
01:08:35,029 --> 01:08:40,150
Russian man can't ward by word translate

1142
01:08:38,299 --> 01:08:43,729
to English with a mistake like that

1143
01:08:40,149 --> 01:08:46,969
perfectly like logical that's my

1144
01:08:43,729 --> 01:08:49,040
personal thought I said we should show

1145
01:08:46,969 --> 01:08:51,230
that univac rusev sorry I'm the cloud

1146
01:08:49,040 --> 01:08:54,410
you what you are show us one more

1147
01:08:51,229 --> 01:08:57,139
question in your presentation you've

1148
01:08:54,410 --> 01:08:59,358
over viewed the technical aspects very

1149
01:08:57,140 --> 01:09:03,380
deeply and all the malware and this will

1150
01:08:59,359 --> 01:09:04,969
be happy to thank you for this but I

1151
01:09:03,380 --> 01:09:10,420
think there's still one question that

1152
01:09:04,969 --> 01:09:16,660
was not covered how do you try and

1153
01:09:10,420 --> 01:09:20,989
bypass all the filters and ladies don't

1154
01:09:16,660 --> 01:09:24,858
we don't allow you to go to the Internet

1155
01:09:20,988 --> 01:09:31,488
using HTTP at some randomly generated

1156
01:09:24,859 --> 01:09:35,480
site the authors of the TRO and create

1157
01:09:31,488 --> 01:09:40,618
some bypass motion like blue curve

1158
01:09:35,479 --> 01:09:42,718
first it's not random the IPS are not

1159
01:09:40,618 --> 01:09:45,528
like randomly generated and the pages

1160
01:09:42,719 --> 01:09:50,339
are not randomly generated at all like

1161
01:09:45,529 --> 01:09:56,420
mmm all the connections are quite

1162
01:09:50,339 --> 01:10:01,010
logical and they contain like gibberish

1163
01:09:56,420 --> 01:10:04,380
because you know from the way of all the

1164
01:10:01,010 --> 01:10:07,770
software that you mentioned because it's

1165
01:10:04,380 --> 01:10:14,190
like encrypted on the level of like HTTP

1166
01:10:07,770 --> 01:10:21,449
oats or or TCP so whitelisting saves you

1167
01:10:14,190 --> 01:10:24,509
of course but if everyone like used all

1168
01:10:21,449 --> 01:10:28,469
the products and followed all the best

1169
01:10:24,510 --> 01:10:34,079
practices then we wouldn't have you know

1170
01:10:28,469 --> 01:10:36,420
malware doing anything so it's I can say

1171
01:10:34,079 --> 01:10:40,730
that it works only on misconfigured

1172
01:10:36,420 --> 01:10:44,659
systems but I want to say that that

1173
01:10:40,730 --> 01:10:51,500
works in the systems that are not

1174
01:10:44,659 --> 01:10:51,500
protected from 8 particularly nothing

1175
01:10:53,030 --> 01:10:59,190
especially Pacific lot nice thank you

1176
01:10:56,490 --> 01:11:12,660
for your presentation I have full open

1177
01:10:59,190 --> 01:11:16,049
the question so they assume I am follow

1178
01:11:12,660 --> 01:11:20,910
this trial for quite a while and I see

1179
01:11:16,050 --> 01:11:28,590
that the subject the name of the

1180
01:11:20,910 --> 01:11:31,559
attachment the technical stuff all the

1181
01:11:28,590 --> 01:11:36,900
belfie not at least the questioners

1182
01:11:31,560 --> 01:11:42,770
thought thinking is it's like people who

1183
01:11:36,900 --> 01:11:47,309
are sending is like work in the banks

1184
01:11:42,770 --> 01:11:48,090
and true in all cases because I don't

1185
01:11:47,310 --> 01:11:52,440
work in a bank

1186
01:11:48,090 --> 01:11:56,640
and I could like write the letter that's

1187
01:11:52,440 --> 01:12:01,160
similar to this and in like the same so

1188
01:11:56,640 --> 01:12:05,070
I don't think that you like must work

1189
01:12:01,160 --> 01:12:08,910
somewhere to write this social

1190
01:12:05,070 --> 01:12:09,570
engineering it's just you know okay so

1191
01:12:08,910 --> 01:12:12,840
what's the question

1192
01:12:09,570 --> 01:12:17,219
all right Eva perón's submission so the

1193
01:12:12,840 --> 01:12:23,640
question is I see them during their

1194
01:12:17,220 --> 01:12:27,030
mailings repack their modules the

1195
01:12:23,640 --> 01:12:30,750
detects on file level but the CNC

1196
01:12:27,030 --> 01:12:34,920
servers they change quite so the debate

1197
01:12:30,750 --> 01:12:44,520
domains they use these four months many

1198
01:12:34,920 --> 01:12:48,030
mailings it's the same that's why if the

1199
01:12:44,520 --> 01:12:50,850
topic resolve is just blocked you know

1200
01:12:48,030 --> 01:12:53,960
the name chain is blocked is blacklisted

1201
01:12:50,850 --> 01:12:56,730
and stuff it has the mechanism of

1202
01:12:53,960 --> 01:13:00,030
randomizing like five additional DNS

1203
01:12:56,730 --> 01:13:02,759
servers embedded and those are not

1204
01:13:00,030 --> 01:13:05,610
always the same they are like you know

1205
01:13:02,760 --> 01:13:09,420
they are very changing from sin

1206
01:13:05,610 --> 01:13:14,160
sample I think once maybe you like weeks

1207
01:13:09,420 --> 01:13:16,790
and it has the you know last hope

1208
01:13:14,160 --> 01:13:19,530
mechanism when the server pushes

1209
01:13:16,790 --> 01:13:22,350
something to the host file on the

1210
01:13:19,530 --> 01:13:25,860
infected host and then if nothing works

1211
01:13:22,350 --> 01:13:29,070
it's resolved using the host files of

1212
01:13:25,860 --> 01:13:31,920
the get house by name works if so I

1213
01:13:29,070 --> 01:13:33,740
think that's it bypass we can call this

1214
01:13:31,920 --> 01:13:36,540
a bypass no Simon the manner which

1215
01:13:33,740 --> 01:13:42,690
initial seminaries what the domain is

1216
01:13:36,540 --> 01:13:47,450
themselves they don't change frequently

1217
01:13:42,690 --> 01:13:51,480
but not the domains yeah so we have like

1218
01:13:47,450 --> 01:13:56,220
sorry not we are TM of course they have

1219
01:13:51,480 --> 01:14:03,870
like four or five maybe debate domains

1220
01:13:56,220 --> 01:14:06,860
and you know in so recently they started

1221
01:14:03,870 --> 01:14:10,620
using tio they started using tor and

1222
01:14:06,860 --> 01:14:15,480
then just switched back you know so they

1223
01:14:10,620 --> 01:14:20,760
started using tor and these domains are

1224
01:14:15,480 --> 01:14:22,410
even more like easily blocked and then

1225
01:14:20,760 --> 01:14:27,150
they switch to the hybrid system again

1226
01:14:22,410 --> 01:14:30,330
so they are using tor if it doesn't work

1227
01:14:27,150 --> 01:14:32,670
the bit ones if it doesn't work the DNS

1228
01:14:30,330 --> 01:14:35,670
ones if it doesn't work okay

1229
01:14:32,670 --> 01:14:38,160
please local system give me something

1230
01:14:35,670 --> 01:14:40,920
from the host file which c and c push to

1231
01:14:38,160 --> 01:14:45,889
it so that's how it works especially

1232
01:14:40,920 --> 01:14:45,890
well thank you

1233
01:14:51,969 --> 01:14:56,619
whether the what was the question

1234
01:15:02,829 --> 01:15:09,518
thank you very much for the presentation

1235
01:15:06,110 --> 01:15:13,759
the question is how did they try and

1236
01:15:09,519 --> 01:15:20,869
elevate DD to use 0 there are some

1237
01:15:13,760 --> 01:15:24,199
specific techniques you know launching

1238
01:15:20,869 --> 01:15:28,518
from launching with admin privileges and

1239
01:15:24,199 --> 01:15:30,949
it's mostly the fraud one so it just

1240
01:15:28,519 --> 01:15:35,719
spams you with UAC and you've accepted

1241
01:15:30,949 --> 01:15:39,379
and the other one is the registry window

1242
01:15:35,719 --> 01:15:41,979
which is like no zero days no advance

1243
01:15:39,379 --> 01:15:45,050
techniques you just will show you and

1244
01:15:41,979 --> 01:15:48,619
legitimate window please click on it and

1245
01:15:45,050 --> 01:15:52,280
then windows will ask you to click yes

1246
01:15:48,619 --> 01:15:54,768
and you click that's all so the style of

1247
01:15:52,280 --> 01:15:57,800
these guys you know I actually love the

1248
01:15:54,769 --> 01:16:01,429
style of this guys all this great EU a/c

1249
01:15:57,800 --> 01:16:05,979
you know stuff the safe boot stuff with

1250
01:16:01,429 --> 01:16:18,169
the driver of the easy that's very good

1251
01:16:05,979 --> 01:16:20,059
no zero days anyone else maybe ok so I

1252
01:16:18,169 --> 01:16:22,389
think that's all for today thank you

1253
01:16:20,059 --> 01:16:22,389
very much

1254
01:16:25,530 --> 01:16:35,460
I have to ship two t-shirts right hmm

1255
01:16:31,400 --> 01:16:36,719
hmm so the first one goes here yeah

1256
01:16:35,460 --> 01:16:39,210
which one do you want

1257
01:16:36,720 --> 01:16:43,230
you have the priviledge white one okay

1258
01:16:39,210 --> 01:16:53,460
and the second one what goes there yeah

1259
01:16:43,230 --> 01:16:57,230
yeah you go so so I hope we'll meet it

1260
01:16:53,460 --> 01:16:57,230
next page days goodbye

