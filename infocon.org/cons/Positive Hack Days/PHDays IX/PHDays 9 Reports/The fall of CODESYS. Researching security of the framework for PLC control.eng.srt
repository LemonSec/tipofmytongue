1
00:00:00,319 --> 00:00:06,629
seems possible cinema doclet thank you

2
00:00:03,959 --> 00:00:09,389
for coming to my presentation finding

3
00:00:06,629 --> 00:00:12,360
time especially remembering the most

4
00:00:09,389 --> 00:00:19,500
recent events and internet lots of maps

5
00:00:12,360 --> 00:00:23,240
the last season of The Game of Thrones

6
00:00:19,500 --> 00:00:27,269
and everyone wants to watch this game

7
00:00:23,240 --> 00:00:29,490
before I start I want to ask you what

8
00:00:27,269 --> 00:00:33,000
did what is the difference between a

9
00:00:29,490 --> 00:00:35,910
software library and it's very work so

10
00:00:33,000 --> 00:00:39,030
presently we know that the use of

11
00:00:35,910 --> 00:00:43,620
someone else's programming code is a

12
00:00:39,030 --> 00:00:46,680
rule rather than an exception so the

13
00:00:43,620 --> 00:00:50,099
developer needs to use some finished

14
00:00:46,680 --> 00:00:53,960
finished functionality forming packages

15
00:00:50,100 --> 00:00:57,360
for certain protocol images or database

16
00:00:53,960 --> 00:00:59,480
references for this they use software

17
00:00:57,360 --> 00:01:03,500
library and there is another situation

18
00:00:59,480 --> 00:01:08,429
whereby you want your code to be part of

19
00:01:03,500 --> 00:01:11,220
your big system so from a small a small

20
00:01:08,430 --> 00:01:13,530
nut and bolt that you want to add to

21
00:01:11,220 --> 00:01:17,130
this system for this you use the

22
00:01:13,530 --> 00:01:20,610
framework also with a difference where

23
00:01:17,130 --> 00:01:24,149
the difference it's in the control over

24
00:01:20,610 --> 00:01:27,270
the program if you use the library then

25
00:01:24,150 --> 00:01:29,759
your code is is the is the master it

26
00:01:27,270 --> 00:01:32,189
controls everything that's where the

27
00:01:29,759 --> 00:01:34,409
library will be launched and how it will

28
00:01:32,189 --> 00:01:37,589
be used but with framework it's quite

29
00:01:34,409 --> 00:01:41,060
different framework determines when your

30
00:01:37,590 --> 00:01:43,500
code will be launched and framework

31
00:01:41,060 --> 00:01:45,930
dictates you the architecture

32
00:01:43,500 --> 00:01:49,020
constraints and the description of the

33
00:01:45,930 --> 00:01:51,689
code the writing of the code so a

34
00:01:49,020 --> 00:01:56,270
framework is the master and you are a

35
00:01:51,689 --> 00:01:56,270
small nut bolt in this big system

36
00:01:56,910 --> 00:02:04,210
today I'm going to tell you that inside

37
00:02:00,430 --> 00:02:08,590
the framework God sees for industrial a

38
00:02:04,210 --> 00:02:11,829
corporate rant I have different hardware

39
00:02:08,590 --> 00:02:17,170
that we use in in corporate solutions

40
00:02:11,830 --> 00:02:24,610
inside Nutella how it works what kind of

41
00:02:17,170 --> 00:02:27,910
code for communication it uses talk

42
00:02:24,610 --> 00:02:35,850
about the company that developed codices

43
00:02:27,910 --> 00:02:35,850
code then the protocol communication etc

44
00:02:36,090 --> 00:02:45,670
coatsy's company so it was founded in

45
00:02:39,900 --> 00:02:52,360
1994 was known as 3s software smart

46
00:02:45,670 --> 00:02:55,359
solutions now there as this company was

47
00:02:52,360 --> 00:02:59,860
founded in Germany and in Germany as

48
00:02:55,360 --> 00:03:03,310
yellow so they're very functional so

49
00:02:59,860 --> 00:03:05,500
they love to stick to the table and the

50
00:03:03,310 --> 00:03:08,590
timetable so this is a timetable

51
00:03:05,500 --> 00:03:12,459
and that is why this company contains

52
00:03:08,590 --> 00:03:14,550
lots of distributors located around the

53
00:03:12,459 --> 00:03:14,550
world

54
00:03:18,450 --> 00:03:25,510
they developed two main products so

55
00:03:21,850 --> 00:03:29,470
which is the the engineering engineering

56
00:03:25,510 --> 00:03:34,899
environment and and their the and

57
00:03:29,470 --> 00:03:38,170
execution godsey's around time system so

58
00:03:34,900 --> 00:03:40,560
let's talk about these two product so

59
00:03:38,170 --> 00:03:43,309
then the engineering

60
00:03:40,560 --> 00:03:46,860
it's done so that you could add any

61
00:03:43,310 --> 00:03:50,130
application to Belkin so it looks like

62
00:03:46,860 --> 00:03:54,150
ice visual studio very similar it has a

63
00:03:50,130 --> 00:03:57,540
set of compilers supports libraries and

64
00:03:54,150 --> 00:04:00,300
monitors the product and search can help

65
00:03:57,540 --> 00:04:03,540
it but the most important and the most

66
00:04:00,300 --> 00:04:09,270
amazing thing is it has its own version

67
00:04:03,540 --> 00:04:12,060
control of their projects it's

68
00:04:09,270 --> 00:04:16,918
customized so this environment discusses

69
00:04:12,060 --> 00:04:20,310
that many companies they they took

70
00:04:16,918 --> 00:04:22,620
advantage of it and they used code

71
00:04:20,310 --> 00:04:25,710
called sees development system so like

72
00:04:22,620 --> 00:04:28,680
the chakras guys on this company Twinkie

73
00:04:25,710 --> 00:04:31,950
and so they used codices development

74
00:04:28,680 --> 00:04:36,110
system so they created their own

75
00:04:31,950 --> 00:04:41,400
engineering design and many others some

76
00:04:36,110 --> 00:04:45,740
now let's talk about the the codesys

77
00:04:41,400 --> 00:04:50,070
runtime system cause this runtime system

78
00:04:45,740 --> 00:04:53,520
so the execution around its customized

79
00:04:50,070 --> 00:04:57,500
as well and so and the developers

80
00:04:53,520 --> 00:05:02,219
consists so they have already adapted

81
00:04:57,500 --> 00:05:07,530
this system to so since the Beatles

82
00:05:02,220 --> 00:05:10,100
Linux and the different platforms unipi

83
00:05:07,530 --> 00:05:15,580
and other platforms

84
00:05:10,100 --> 00:05:15,580
other developers and the distributors

85
00:05:18,910 --> 00:05:26,390
seasonal time has been adapted to more

86
00:05:22,430 --> 00:05:31,250
than 350 devices and I'd like to stress

87
00:05:26,390 --> 00:05:35,930
that the 315 devices it's only from

88
00:05:31,250 --> 00:05:38,150
official sources six companies from

89
00:05:35,930 --> 00:05:40,700
Russia they're not and they're not

90
00:05:38,150 --> 00:05:46,969
listed here but the user godsey's

91
00:05:40,700 --> 00:05:57,770
runtime as a basis for their Belka the

92
00:05:46,970 --> 00:06:00,620
last 16 40 such adapted devices 350 and

93
00:05:57,770 --> 00:06:05,330
I was the surprise if the number will

94
00:06:00,620 --> 00:06:08,450
grow yeah what's his runtime so the

95
00:06:05,330 --> 00:06:14,810
execution platform so the execution plan

96
00:06:08,450 --> 00:06:18,229
focuses runtime uses the components at

97
00:06:14,810 --> 00:06:20,780
the architectural model so it consists

98
00:06:18,230 --> 00:06:23,570
of a certain set of components

99
00:06:20,780 --> 00:06:27,820
you can't remember just like like like a

100
00:06:23,570 --> 00:06:30,380
building made of Lego blocks so small

101
00:06:27,820 --> 00:06:33,620
components of Lego they're somehow

102
00:06:30,380 --> 00:06:35,510
connected with each other and they

103
00:06:33,620 --> 00:06:39,640
caught several times same way so the

104
00:06:35,510 --> 00:06:39,640
components they interact with each other

105
00:06:44,350 --> 00:06:53,050
their own area responsible again for

106
00:06:49,070 --> 00:06:59,450
example again a memory component and

107
00:06:53,050 --> 00:07:04,340
freeing memory communications so what

108
00:06:59,450 --> 00:07:06,180
are the components of core system so

109
00:07:04,340 --> 00:07:09,198
they are there's

110
00:07:06,180 --> 00:07:13,710
the dynamic libraries so they have a

111
00:07:09,199 --> 00:07:19,620
formalized structure profile and they

112
00:07:13,710 --> 00:07:25,909
have interfaces as components interactor

113
00:07:19,620 --> 00:07:28,440
interfaces so they that's what the

114
00:07:25,910 --> 00:07:30,960
initialization of the component looks

115
00:07:28,440 --> 00:07:33,509
like so this is the most important

116
00:07:30,960 --> 00:07:37,258
component a manager component the master

117
00:07:33,509 --> 00:07:40,530
component it calls every function of

118
00:07:37,259 --> 00:07:43,830
every component and and then the

119
00:07:40,530 --> 00:07:47,359
structure so is filled out with the

120
00:07:43,830 --> 00:07:51,990
component functions and the Sodra does

121
00:07:47,360 --> 00:07:57,120
export/import processing of events and

122
00:07:51,990 --> 00:08:01,020
then creation and an erasure and then

123
00:07:57,120 --> 00:08:03,090
there is a component manager event

124
00:08:01,020 --> 00:08:06,139
processing and they shall initialize

125
00:08:03,090 --> 00:08:09,030
this component it starts stage by stage

126
00:08:06,139 --> 00:08:12,300
by stage to call this function so that

127
00:08:09,030 --> 00:08:17,460
this component should do something then

128
00:08:12,300 --> 00:08:20,370
initialize start communication this

129
00:08:17,460 --> 00:08:26,190
looks like this typical of the oval and

130
00:08:20,370 --> 00:08:29,400
from the windows the dello main the four

131
00:08:26,190 --> 00:08:36,208
different events will attach the

132
00:08:29,400 --> 00:08:39,419
attached attached so what here we have

133
00:08:36,208 --> 00:08:43,609
20 events same way so they mirror each

134
00:08:39,419 --> 00:08:43,610
other so then the function for the event

135
00:08:44,970 --> 00:08:50,939
it has its mirror functionalization for

136
00:08:48,810 --> 00:08:52,279
the beginning of the communications so

137
00:08:50,939 --> 00:09:09,660
there is an event to conclude

138
00:08:52,279 --> 00:09:12,120
communication fall apart this is the

139
00:09:09,660 --> 00:09:14,129
export function about the things that

140
00:09:12,120 --> 00:09:22,829
are at the bottom this is the important

141
00:09:14,129 --> 00:09:24,980
function we give to the world that we

142
00:09:22,829 --> 00:09:27,569
have to go through so for example we

143
00:09:24,980 --> 00:09:35,459
export the component of the unique

144
00:09:27,569 --> 00:09:41,250
component only for this before so it

145
00:09:35,459 --> 00:09:45,529
explores functions as we know we're

146
00:09:41,250 --> 00:09:49,470
taking images and for for taking images

147
00:09:45,529 --> 00:09:51,870
from the camera so this you can export

148
00:09:49,470 --> 00:09:56,009
any campus from a set of components you

149
00:09:51,870 --> 00:09:59,879
can call them and use them yeah another

150
00:09:56,009 --> 00:10:02,850
very important how you system adapts

151
00:09:59,879 --> 00:10:08,819
adapts itself to different hardware so

152
00:10:02,850 --> 00:10:11,610
it exported by those exported functions

153
00:10:08,819 --> 00:10:14,910
so the developers responsibility is to

154
00:10:11,610 --> 00:10:16,980
adapt the systems components from the

155
00:10:14,910 --> 00:10:19,399
systems group so these are the

156
00:10:16,980 --> 00:10:24,329
components that are responsible for the

157
00:10:19,399 --> 00:10:29,100
freeing the memory systems file then

158
00:10:24,329 --> 00:10:33,029
working with threads sockets etc so

159
00:10:29,100 --> 00:10:35,069
after they've done it send an automatic

160
00:10:33,029 --> 00:10:36,329
of the system's components export

161
00:10:35,069 --> 00:10:41,399
functions

162
00:10:36,329 --> 00:10:44,189
other components import functions if

163
00:10:41,399 --> 00:10:49,079
it's adapted well so it starts working

164
00:10:44,189 --> 00:10:57,029
nicely let's see how they implemented

165
00:10:49,079 --> 00:11:03,738
that lets see example developers of the

166
00:10:57,029 --> 00:11:06,600
next soft Linux originally raspberry

167
00:11:03,739 --> 00:11:09,869
palates components to increase security

168
00:11:06,600 --> 00:11:13,139
so there are components which are for

169
00:11:09,869 --> 00:11:16,069
encryption of the protocol components

170
00:11:13,139 --> 00:11:20,339
also for checks of loaded applications

171
00:11:16,069 --> 00:11:23,429
and so they're all disconnected and the

172
00:11:20,339 --> 00:11:25,139
component of user management is

173
00:11:23,429 --> 00:11:30,059
disconnected as well

174
00:11:25,139 --> 00:11:35,579
lots of threads but six not all of them

175
00:11:30,059 --> 00:11:40,019
they are in one process separated this

176
00:11:35,579 --> 00:11:45,809
one thread faults then the entire system

177
00:11:40,019 --> 00:11:52,110
Falls and so that the executable file is

178
00:11:45,809 --> 00:11:54,839
is pass difficult to unpack because when

179
00:11:52,110 --> 00:11:57,059
you execute the file so you're tracing

180
00:11:54,839 --> 00:12:00,989
yourself that's why if you're trying to

181
00:11:57,059 --> 00:12:03,629
attach some external the muggers hit

182
00:12:00,989 --> 00:12:06,660
won't allow you to do that because it

183
00:12:03,629 --> 00:12:08,610
traces by itself and says that I have

184
00:12:06,660 --> 00:12:13,049
one a touch and one debugger and I don't

185
00:12:08,610 --> 00:12:16,319
need another one altogether in coatsy's

186
00:12:13,049 --> 00:12:19,019
runtime so there are hundreds of such

187
00:12:16,319 --> 00:12:21,689
components and the number of services

188
00:12:19,019 --> 00:12:22,770
may be more than six if your prop with

189
00:12:21,689 --> 00:12:27,740
you

190
00:12:22,770 --> 00:12:32,209
and because of the specific adventure

191
00:12:27,740 --> 00:12:36,740
attention related to exporting functions

192
00:12:32,209 --> 00:12:39,810
and registration of exported functions

193
00:12:36,740 --> 00:12:43,920
you know that for the function to be

194
00:12:39,810 --> 00:12:45,569
exported it needs to convey its lane to

195
00:12:43,920 --> 00:12:49,860
register circle

196
00:12:45,570 --> 00:12:52,980
Stratos line and other components can

197
00:12:49,860 --> 00:12:56,370
find this function and that means that

198
00:12:52,980 --> 00:13:00,180
it will take and write in the script we

199
00:12:56,370 --> 00:13:03,270
can always restore all these names of

200
00:13:00,180 --> 00:13:07,800
the exported functions out of 10,000

201
00:13:03,270 --> 00:13:11,850
functions that even all of them can be

202
00:13:07,800 --> 00:13:13,969
recognized and so they can rename more

203
00:13:11,850 --> 00:13:17,640
than 4,000 functions which is very good

204
00:13:13,970 --> 00:13:21,750
for the statistical analysis and in the

205
00:13:17,640 --> 00:13:24,319
internet so there were lots of documents

206
00:13:21,750 --> 00:13:27,660
to documents published on the internet

207
00:13:24,320 --> 00:13:30,540
which a contained description of those

208
00:13:27,660 --> 00:13:34,260
functions unfortunately so they go back

209
00:13:30,540 --> 00:13:36,719
to 2012 so then once in a while so they

210
00:13:34,260 --> 00:13:41,880
they differ from what the function does

211
00:13:36,720 --> 00:13:45,029
and and what is document describes still

212
00:13:41,880 --> 00:13:47,700
it was very useful to study and gave us

213
00:13:45,029 --> 00:13:51,149
an opportunity to do the in-depth

214
00:13:47,700 --> 00:13:54,089
analysis of the protocols policies and

215
00:13:51,149 --> 00:13:56,740
their engineering environment and the

216
00:13:54,089 --> 00:14:00,370
and the PDU

217
00:13:56,740 --> 00:14:04,390
so what is the protocol so this is

218
00:14:00,370 --> 00:14:08,010
called PD you would add that a unit so

219
00:14:04,390 --> 00:14:08,010
we need to remember that this protocol

220
00:14:08,820 --> 00:14:18,100
it's not it can be used for the

221
00:14:13,120 --> 00:14:22,900
interaction on the bus or by ports by

222
00:14:18,100 --> 00:14:27,100
USB ports UDP can bus a serial port USB

223
00:14:22,900 --> 00:14:31,060
port and the same direction as a block

224
00:14:27,100 --> 00:14:34,780
drivers this protocol consists of five

225
00:14:31,060 --> 00:14:38,290
different layers that's the first block

226
00:14:34,780 --> 00:14:45,130
driver layer the Datagram layer channel

227
00:14:38,290 --> 00:14:49,599
layer services layer this product of the

228
00:14:45,130 --> 00:14:53,350
names of these names remind you the

229
00:14:49,600 --> 00:14:55,630
names of the layers in ICOC and it's

230
00:14:53,350 --> 00:14:59,770
true that this protocol is based on this

231
00:14:55,630 --> 00:15:02,220
model so by itself this protocol works I

232
00:14:59,770 --> 00:15:05,410
can't because I can't work as in sync

233
00:15:02,220 --> 00:15:10,360
they can be synchronized and can be I

234
00:15:05,410 --> 00:15:13,150
can operate non synchronizes and to

235
00:15:10,360 --> 00:15:17,620
understand how these components interact

236
00:15:13,150 --> 00:15:23,439
during the processing of one package we

237
00:15:17,620 --> 00:15:25,960
need to consider we need to consider the

238
00:15:23,440 --> 00:15:28,480
entire protocol from the beginning let's

239
00:15:25,960 --> 00:15:30,180
start with block drivers and blone

240
00:15:28,480 --> 00:15:35,829
drivers

241
00:15:30,180 --> 00:15:41,109
protocol block driver they needed to do

242
00:15:35,829 --> 00:15:43,209
this possibility of communication in the

243
00:15:41,110 --> 00:15:46,480
program in terms of physical interface

244
00:15:43,209 --> 00:15:51,779
and that means that there is an entry

245
00:15:46,480 --> 00:15:51,779
point for the data and simultaneously

246
00:15:54,180 --> 00:16:02,500
their fields in the protocol like this

247
00:15:58,360 --> 00:16:05,800
component that does it block driver TCP

248
00:16:02,500 --> 00:16:08,709
does it so it adds to the protocol two

249
00:16:05,800 --> 00:16:13,719
additional fields first field is four

250
00:16:08,709 --> 00:16:18,430
bytes a fixed number the second field is

251
00:16:13,720 --> 00:16:21,220
the length of the package including that

252
00:16:18,430 --> 00:16:24,969
this field tells the size of the

253
00:16:21,220 --> 00:16:30,699
previous caption and the size the

254
00:16:24,970 --> 00:16:46,510
appraisers captured and of itself of the

255
00:16:30,699 --> 00:16:51,609
current current caption and so then and

256
00:16:46,510 --> 00:16:57,670
add their own fields a USB does it log

257
00:16:51,610 --> 00:17:00,430
driver for USB Drive for UDP does not do

258
00:16:57,670 --> 00:17:03,550
anything like that and so then you can

259
00:17:00,430 --> 00:17:06,740
see in in this color so the package was

260
00:17:03,550 --> 00:17:10,099
formed for sis media

261
00:17:06,740 --> 00:17:14,740
v3 protocol and they don't do anything

262
00:17:10,099 --> 00:17:17,780
and then any any blog driver component

263
00:17:14,740 --> 00:17:30,500
so then sense of the leader one level up

264
00:17:17,780 --> 00:17:33,139
one level up is one level up is it so

265
00:17:30,500 --> 00:17:35,620
that's responsible for the for the

266
00:17:33,140 --> 00:17:38,540
routing of the package for the routing

267
00:17:35,620 --> 00:17:42,169
for the routing from one node node to

268
00:17:38,540 --> 00:17:48,590
another node and for definition of the

269
00:17:42,170 --> 00:17:52,670
package parameters so the first part is

270
00:17:48,590 --> 00:17:55,220
it's a c5 magic magic world then the

271
00:17:52,670 --> 00:18:00,100
second byte is byte structure the first

272
00:17:55,220 --> 00:18:07,820
five bytes means the possible number a

273
00:18:00,100 --> 00:18:10,340
number this packet can be sent from one

274
00:18:07,820 --> 00:18:15,800
node to another so that's the protection

275
00:18:10,340 --> 00:18:18,679
does does network is done so every time

276
00:18:15,800 --> 00:18:22,149
when this packet gets one node it needs

277
00:18:18,680 --> 00:18:25,150
just to send this packet and then it

278
00:18:22,150 --> 00:18:25,150
then

279
00:18:25,460 --> 00:18:34,400
so the next big field is this standard

280
00:18:32,000 --> 00:18:37,580
header to the next field with a certain

281
00:18:34,400 --> 00:18:40,400
length so then each structure which is

282
00:18:37,580 --> 00:18:41,899
used simultaneously for fields these are

283
00:18:40,400 --> 00:18:47,120
the parameters for the packet the

284
00:18:41,900 --> 00:18:52,150
priority level signal for the router and

285
00:18:47,120 --> 00:18:52,149
then address type and the length of the

286
00:18:53,560 --> 00:19:02,450
driver determines its address they

287
00:19:00,320 --> 00:19:08,260
interact with other nodes on the network

288
00:19:02,450 --> 00:19:13,070
and they use direct type of address

289
00:19:08,260 --> 00:19:15,560
director and there so then we use this

290
00:19:13,070 --> 00:19:19,550
relative type of Rajesh then the next

291
00:19:15,560 --> 00:19:26,050
byte is the first level the first byte

292
00:19:19,550 --> 00:19:26,050
of the command H tells us what they know

293
00:19:26,770 --> 00:19:39,160
three services are identified for this

294
00:19:29,840 --> 00:19:47,840
command three services for this command

295
00:19:39,160 --> 00:19:50,690
and so the addresses so we use the chain

296
00:19:47,840 --> 00:19:54,379
manager in this case because it means

297
00:19:50,690 --> 00:19:56,930
that the remaining data the data from

298
00:19:54,380 --> 00:20:00,920
not this header should be sent to the

299
00:19:56,930 --> 00:20:03,110
general manager and so the first circle

300
00:20:00,920 --> 00:20:06,370
then the network consists and then the

301
00:20:03,110 --> 00:20:10,159
getting information for the second one

302
00:20:06,370 --> 00:20:11,989
then the I did identify our messages and

303
00:20:10,160 --> 00:20:15,200
the second byte is the ninth

304
00:20:11,990 --> 00:20:21,140
the length of the recipient addresses

305
00:20:15,200 --> 00:20:23,390
and the sender and the receiver and the

306
00:20:21,140 --> 00:20:27,580
receiver it's not the number of my it's

307
00:20:23,390 --> 00:20:27,580
actually but it's a number of words

308
00:20:28,060 --> 00:20:38,330
bytes times so three actually six bytes

309
00:20:32,860 --> 00:20:40,280
that's six six bytes for the sender so

310
00:20:38,330 --> 00:20:43,939
there are two most important fields for

311
00:20:40,280 --> 00:20:47,060
this level so they point to the center

312
00:20:43,940 --> 00:20:54,230
points for whom this packet should go to

313
00:20:47,060 --> 00:20:58,399
an apology you should send an answer to

314
00:20:54,230 --> 00:21:02,360
this query sender appoints the number of

315
00:20:58,400 --> 00:21:05,090
port the port number for which this

316
00:21:02,360 --> 00:21:09,500
packet is is meant and the remaining

317
00:21:05,090 --> 00:21:16,310
four bytes is the address then the

318
00:21:09,500 --> 00:21:20,090
receiver field is the same so here this

319
00:21:16,310 --> 00:21:24,460
level is over the channel the channel

320
00:21:20,090 --> 00:21:27,110
level is required for two things first

321
00:21:24,460 --> 00:21:29,420
they use the so called

322
00:21:27,110 --> 00:21:31,070
channel manager there that checks the

323
00:21:29,420 --> 00:21:34,150
integrity of the data

324
00:21:31,070 --> 00:21:40,700
it checks certainly controlling amounts

325
00:21:34,150 --> 00:21:44,180
asides etc if necessary information is

326
00:21:40,700 --> 00:21:47,150
right it transmits it up if not it's a

327
00:21:44,180 --> 00:21:50,750
transmitted to to consumer components

328
00:21:47,150 --> 00:21:54,800
channel client channel server and the

329
00:21:50,750 --> 00:21:57,580
first byte is a typed package type of

330
00:21:54,800 --> 00:22:00,669
packet so that's a different

331
00:21:57,580 --> 00:22:04,360
whether it's audit by the meaning of

332
00:22:00,670 --> 00:22:09,970
devices is determined whether this this

333
00:22:04,360 --> 00:22:14,679
is a general manager order or this the

334
00:22:09,970 --> 00:22:17,320
client service order and this it's one

335
00:22:14,680 --> 00:22:21,100
of the two chambers so the penultimate

336
00:22:17,320 --> 00:22:29,428
bit determines if it's a query or answer

337
00:22:21,100 --> 00:22:32,919
to the command if it's a query server

338
00:22:29,429 --> 00:22:37,750
and if it's an answer it means that this

339
00:22:32,920 --> 00:22:39,820
packet is mentally client Gemma so then

340
00:22:37,750 --> 00:22:45,130
I just open channel it says here so

341
00:22:39,820 --> 00:22:52,120
there the query to open the channel is

342
00:22:45,130 --> 00:23:00,210
sent to the channel server on the basis

343
00:22:52,120 --> 00:23:01,360
of this request this request I

344
00:23:00,210 --> 00:23:03,940
understand

345
00:23:01,360 --> 00:23:07,000
the remaining remaining bytes for this

346
00:23:03,940 --> 00:23:12,600
problem so the version number the

347
00:23:07,000 --> 00:23:17,550
controlling the identifier of messages

348
00:23:12,600 --> 00:23:22,120
so the buffer size that can accumulate

349
00:23:17,550 --> 00:23:27,240
information and this is for data

350
00:23:22,120 --> 00:23:29,678
transmission of large size server

351
00:23:27,240 --> 00:23:33,280
channel manager component channel

352
00:23:29,679 --> 00:23:35,760
manager that just turns over of the

353
00:23:33,280 --> 00:23:40,500
remaining work today the channel server

354
00:23:35,760 --> 00:23:42,640
processes it and returns the results and

355
00:23:40,500 --> 00:23:44,800
tell you the difference between the

356
00:23:42,640 --> 00:23:50,590
results for the center and pull the

357
00:23:44,800 --> 00:23:53,440
receiver they exchanged places so then

358
00:23:50,590 --> 00:23:56,290
you know that sent the the query is the

359
00:23:53,440 --> 00:23:58,600
recipient and that that received the

360
00:23:56,290 --> 00:24:00,379
note is expecting for an answer from the

361
00:23:58,600 --> 00:24:07,870
first node

362
00:24:00,380 --> 00:24:11,720
and then we removed the penultimate bit

363
00:24:07,870 --> 00:24:12,320
now this request is not a query but an

364
00:24:11,720 --> 00:24:15,500
answer

365
00:24:12,320 --> 00:24:23,350
it's processed by the component of

366
00:24:15,500 --> 00:24:28,220
channel channel client and then the same

367
00:24:23,350 --> 00:24:32,030
approach you can you can recognize what

368
00:24:28,220 --> 00:24:35,450
the other bytes mean what other fields

369
00:24:32,030 --> 00:24:37,340
are used in the packet the most is so

370
00:24:35,450 --> 00:24:39,770
then they decide enta fire in their

371
00:24:37,340 --> 00:24:43,240
interest so this is the most important a

372
00:24:39,770 --> 00:24:46,010
channel ID where channel ID equals 4y

373
00:24:43,240 --> 00:24:55,340
identifier of the channel channel ID and

374
00:24:46,010 --> 00:24:58,879
this is the buffer size buffer size that

375
00:24:55,340 --> 00:25:02,418
can accumulate information by the

376
00:24:58,880 --> 00:25:04,549
receiving party so that's receipt that

377
00:25:02,419 --> 00:25:06,200
is in spite of the fact that there are

378
00:25:04,549 --> 00:25:11,840
only five different levels for this

379
00:25:06,200 --> 00:25:14,510
protocol simultaneously not all of them

380
00:25:11,840 --> 00:25:22,178
can be used depends of the channel

381
00:25:14,510 --> 00:25:27,770
manager then another example this packet

382
00:25:22,179 --> 00:25:30,440
so I went through the ID time sent to

383
00:25:27,770 --> 00:25:34,350
Cox's development system it contains the

384
00:25:30,440 --> 00:25:38,549
following fields so first

385
00:25:34,350 --> 00:25:42,240
at the package not back in time back in

386
00:25:38,549 --> 00:25:47,418
time so this this this request for the

387
00:25:42,240 --> 00:25:51,620
cello manager and then the channel ID

388
00:25:47,419 --> 00:25:57,049
then they then they look like TCP flags

389
00:25:51,620 --> 00:25:59,610
second field flags flags mean that

390
00:25:57,049 --> 00:26:06,000
decide that the sent the packet is the

391
00:25:59,610 --> 00:26:08,100
master and master slave and the points

392
00:26:06,000 --> 00:26:11,429
that this packet is the first of this

393
00:26:08,100 --> 00:26:13,889
sent it was the second third fourth to

394
00:26:11,429 --> 00:26:17,009
sent so this date will not be installed

395
00:26:13,889 --> 00:26:20,399
days they needed that in the event so

396
00:26:17,009 --> 00:26:26,100
big data transmitted then insisted ear

397
00:26:20,399 --> 00:26:29,059
supports only 512 bytes and so that fits

398
00:26:26,100 --> 00:26:31,678
the way how big data can be trusted

399
00:26:29,059 --> 00:26:37,320
transmitted so then they then they

400
00:26:31,679 --> 00:26:39,870
channel ID the channel ID channel ID

401
00:26:37,320 --> 00:26:44,428
that was received during the previous

402
00:26:39,870 --> 00:26:47,850
result and two ideas block and hoc so

403
00:26:44,429 --> 00:26:50,179
they need for synchronization so that

404
00:26:47,850 --> 00:26:54,209
they're saving party would understand

405
00:26:50,179 --> 00:26:56,669
what what what it needs from the sending

406
00:26:54,210 --> 00:26:58,919
for you and they said that this packet

407
00:26:56,669 --> 00:27:02,960
is the next one so the remaining two

408
00:26:58,919 --> 00:27:08,090
fields I needed to control the receive

409
00:27:02,960 --> 00:27:08,090
so that all the data has been received

410
00:27:08,150 --> 00:27:16,370
so this is so the channel level ends

411
00:27:12,440 --> 00:27:26,510
here and then we talk about the service

412
00:27:16,370 --> 00:27:29,570
level set to IDs I use here two ideas to

413
00:27:26,510 --> 00:27:42,129
hit the processes to ideas so first

414
00:27:29,570 --> 00:27:42,129
field means the remaining data encrypted

415
00:27:42,400 --> 00:27:51,050
is encrypted so that then the header

416
00:27:46,580 --> 00:27:54,199
will be 0 0 so then it will take and so

417
00:27:51,050 --> 00:27:55,180
they wanted to decrypt it and then for

418
00:27:54,200 --> 00:27:57,920
the current header

419
00:27:55,180 --> 00:28:01,310
encryption is not provided and so it's

420
00:27:57,920 --> 00:28:07,280
processed away so then the size of

421
00:28:01,310 --> 00:28:13,070
header the size of Heather next to bytes

422
00:28:07,280 --> 00:28:16,490
is a service command ID the remaining

423
00:28:13,070 --> 00:28:19,580
parameters have been sent together so

424
00:28:16,490 --> 00:28:21,680
there are lots of services and maybe

425
00:28:19,580 --> 00:28:24,790
enhanced by the developers that they

426
00:28:21,680 --> 00:28:30,080
adapt the code they want to use it

427
00:28:24,790 --> 00:28:32,780
somebody had bit so we take that bite a

428
00:28:30,080 --> 00:28:36,800
whip identify if it's a query or an

429
00:28:32,780 --> 00:28:42,100
answer so you're using the Decrypter

430
00:28:36,800 --> 00:28:47,750
they had bite and then the service ID

431
00:28:42,100 --> 00:28:51,620
meaning meaning that the query sent to

432
00:28:47,750 --> 00:28:57,200
device component so each of this service

433
00:28:51,620 --> 00:29:00,229
if address recipe number of others the

434
00:28:57,200 --> 00:29:02,720
number of commands and never akamai said

435
00:29:00,230 --> 00:29:07,850
that the current command is leg in leg

436
00:29:02,720 --> 00:29:12,760
in number of commands and in the next

437
00:29:07,850 --> 00:29:15,709
four bytes is a CC ID because

438
00:29:12,760 --> 00:29:19,430
because it's all the services require

439
00:29:15,710 --> 00:29:21,620
the session to to be performed so the

440
00:29:19,430 --> 00:29:23,720
car they connected the session level and

441
00:29:21,620 --> 00:29:28,370
the application level into one level and

442
00:29:23,720 --> 00:29:31,370
they added this field so that's in order

443
00:29:28,370 --> 00:29:33,199
to do the idea not to do it or not to to

444
00:29:31,370 --> 00:29:37,040
verify it every time they will be using

445
00:29:33,200 --> 00:29:39,530
this session ID and obtain test using

446
00:29:37,040 --> 00:29:42,200
this absentia session ID the remaining

447
00:29:39,530 --> 00:29:55,580
four bytes the many four bytes is the

448
00:29:42,200 --> 00:29:58,750
size of all the parameters at this point

449
00:29:55,580 --> 00:30:04,280
the penultimate level the service layer

450
00:29:58,750 --> 00:30:06,350
and so the main task is to to send all

451
00:30:04,280 --> 00:30:09,230
the parameters to a specific service

452
00:30:06,350 --> 00:30:13,419
identify the service and then the

453
00:30:09,230 --> 00:30:21,500
service will perform a certain command

454
00:30:13,420 --> 00:30:23,630
and service yet those commands so when

455
00:30:21,500 --> 00:30:27,080
you reuse text text is another word for

456
00:30:23,630 --> 00:30:30,520
interface to obtain data and to learn

457
00:30:27,080 --> 00:30:35,090
the data and to study the process the

458
00:30:30,520 --> 00:30:39,280
487 so there are two types of tax so the

459
00:30:35,090 --> 00:30:39,280
respected date data tag and

460
00:30:39,350 --> 00:30:45,889
and the parent tag parent parent tag is

461
00:30:42,890 --> 00:30:49,490
a so for different purposes data tag and

462
00:30:45,890 --> 00:30:52,520
parent an illogical grouping and ever

463
00:30:49,490 --> 00:30:55,040
need to send the parameters and for this

464
00:30:52,520 --> 00:30:58,220
parameter so the service should define

465
00:30:55,040 --> 00:31:01,010
the type and another idea to get from it

466
00:30:58,220 --> 00:31:06,770
so that can be grouped into one a parent

467
00:31:01,010 --> 00:31:08,600
i or or just ID data so what they can

468
00:31:06,770 --> 00:31:15,020
put all this information to one parent

469
00:31:08,600 --> 00:31:18,620
ID and thus on the basis of these fields

470
00:31:15,020 --> 00:31:22,760
all the remaining data broken by tags

471
00:31:18,620 --> 00:31:26,840
was broken into tags and ii see that we

472
00:31:22,760 --> 00:31:31,070
have them ID 22 so which side without

473
00:31:26,840 --> 00:31:36,860
the senior biter is and the remaining

474
00:31:31,070 --> 00:31:39,790
data will mean will equal 1 and so

475
00:31:36,860 --> 00:31:44,959
another example is having parent tag

476
00:31:39,790 --> 00:31:50,090
that isn't read and that's his ID one

477
00:31:44,960 --> 00:31:53,960
that's it's it's it's ID 8101

478
00:31:50,090 --> 00:31:56,959
so it contains two more tags so the data

479
00:31:53,960 --> 00:31:59,630
tag that contain two more per user name

480
00:31:56,960 --> 00:32:03,200
parameters and then encrypted password

481
00:31:59,630 --> 00:32:05,390
is there as well and that's so all the

482
00:32:03,200 --> 00:32:09,380
remaining services exchange parameters

483
00:32:05,390 --> 00:32:13,000
with each other and so haven't gotten

484
00:32:09,380 --> 00:32:16,430
the answers here they it's not verified

485
00:32:13,000 --> 00:32:19,370
the service will return is a identifiers

486
00:32:16,430 --> 00:32:21,410
oldest session and in the same way as a

487
00:32:19,370 --> 00:32:25,179
tag over another forest and session

488
00:32:21,410 --> 00:32:29,520
indicator can is contained in the tag

489
00:32:25,180 --> 00:32:34,110
with the number 21

490
00:32:29,520 --> 00:32:40,080
so we have studied all protocol and

491
00:32:34,110 --> 00:32:44,399
started watching that they the the

492
00:32:40,080 --> 00:32:46,799
system sends for execution and the main

493
00:32:44,399 --> 00:32:50,840
question during this study is how many

494
00:32:46,799 --> 00:32:55,710
vulnerabilities we could detect and now

495
00:32:50,840 --> 00:33:03,209
we thought once this protocol is based

496
00:32:55,710 --> 00:33:05,370
on the US yes will it contain something

497
00:33:03,210 --> 00:33:07,919
so we started considering the channel

498
00:33:05,370 --> 00:33:11,489
level we have done the following we've

499
00:33:07,919 --> 00:33:23,640
built a small stand took that caused his

500
00:33:11,490 --> 00:33:25,620
to runtime client so we sent it to the

501
00:33:23,640 --> 00:33:30,809
first node and then since package we

502
00:33:25,620 --> 00:33:33,239
have done the following we have the

503
00:33:30,809 --> 00:33:35,490
point it's not the address of the node

504
00:33:33,240 --> 00:33:39,830
where we sent Apogee but another node as

505
00:33:35,490 --> 00:33:42,450
a sender and receive a recipient with

506
00:33:39,830 --> 00:33:46,168
the idea that it will just take the

507
00:33:42,450 --> 00:33:49,679
package and resent and that's what our

508
00:33:46,169 --> 00:34:02,549
it did so this how you can reduce a

509
00:33:49,679 --> 00:34:04,679
typical 8 ITA spoofing attack and this

510
00:34:02,549 --> 00:34:06,389
package is meant for it I hope I

511
00:34:04,679 --> 00:34:08,700
understand that it made packages meant

512
00:34:06,390 --> 00:34:10,919
for edible process and send to the nodes

513
00:34:08,699 --> 00:34:17,040
in the receiver field and in the

514
00:34:10,918 --> 00:34:20,549
receiver field we have we have pointed

515
00:34:17,040 --> 00:34:22,649
appointed the fourth node and this we

516
00:34:20,550 --> 00:34:26,190
can arrange this IP spoofing and use

517
00:34:22,649 --> 00:34:28,770
some intermediary node in order to send

518
00:34:26,190 --> 00:34:31,290
all our queries and we decided to do

519
00:34:28,770 --> 00:34:34,280
this attacker more interesting and have

520
00:34:31,290 --> 00:34:34,279
done the following as

521
00:34:35,820 --> 00:34:42,600
an attacker may be interested to get the

522
00:34:39,090 --> 00:34:47,490
results of the execution but how can he

523
00:34:42,600 --> 00:34:51,060
do it if he shows broadcast as a

524
00:34:47,489 --> 00:34:55,409
recipient as the component block driver

525
00:34:51,060 --> 00:34:58,700
UDP is sent against the package sends

526
00:34:55,409 --> 00:35:01,259
and gets the packet from broadcast as

527
00:34:58,700 --> 00:35:05,399
recipient he can show the broadcast

528
00:35:01,260 --> 00:35:09,030
address and in this way the attacker can

529
00:35:05,400 --> 00:35:12,030
send this data through an intermediary

530
00:35:09,030 --> 00:35:15,600
and force the second node to operator

531
00:35:12,030 --> 00:35:17,280
and this arrange a link of sending and

532
00:35:15,600 --> 00:35:24,299
receiving and the second node will

533
00:35:17,280 --> 00:35:28,340
believe that this query is the channel

534
00:35:24,300 --> 00:35:28,340
to work with broadcast which is funny

535
00:35:29,360 --> 00:35:36,210
so we discovered that it will execute

536
00:35:33,600 --> 00:35:40,470
and then the package will be executed in

537
00:35:36,210 --> 00:35:44,760
this manner but as we have several

538
00:35:40,470 --> 00:35:48,720
levels in this protocol we need to

539
00:35:44,760 --> 00:35:51,450
capture each level in order to get into

540
00:35:48,720 --> 00:35:57,419
the existing communication channel if we

541
00:35:51,450 --> 00:36:00,180
have this development and execution we

542
00:35:57,420 --> 00:36:02,490
need to exchange something we wanted to

543
00:36:00,180 --> 00:36:05,190
know if we could get into this

544
00:36:02,490 --> 00:36:11,100
communication we knew that in order to

545
00:36:05,190 --> 00:36:15,300
do it we needed to know fourth identify

546
00:36:11,100 --> 00:36:18,060
as a channel identifier then if we need

547
00:36:15,300 --> 00:36:21,000
the command and the bill and the other

548
00:36:18,060 --> 00:36:22,259
values to make sure that we don't lose

549
00:36:21,000 --> 00:36:24,570
the synchronization between

550
00:36:22,260 --> 00:36:27,420
communication we needed to discover two

551
00:36:24,570 --> 00:36:29,970
vulnerabilities so for that if we

552
00:36:27,420 --> 00:36:32,970
discover both vulnerabilities we can

553
00:36:29,970 --> 00:36:44,580
barge in into this communication so the

554
00:36:32,970 --> 00:36:47,759
first the third vulnerability I I was

555
00:36:44,580 --> 00:36:50,069
asking you why say identifier equals

556
00:36:47,760 --> 00:36:53,760
four and then the next is eight and

557
00:36:50,070 --> 00:36:57,450
twelve and sixteen and we saw that it's

558
00:36:53,760 --> 00:36:59,880
actually adding four each time but it

559
00:36:57,450 --> 00:37:02,220
turned out home because the value of

560
00:36:59,880 --> 00:37:05,670
identifier is equal to the previous not

561
00:37:02,220 --> 00:37:08,709
plus four but plus the value of maximum

562
00:37:05,670 --> 00:37:11,240
simultaneous supported

563
00:37:08,710 --> 00:37:16,040
communication channels if for instance

564
00:37:11,240 --> 00:37:20,270
we assigned 123 years then it will be 23

565
00:37:16,040 --> 00:37:23,619
so 46 and and so on and those guys said

566
00:37:20,270 --> 00:37:26,210
it's not a vulnerability that they

567
00:37:23,619 --> 00:37:30,950
somehow they fixed it and without

568
00:37:26,210 --> 00:37:33,500
telling us this this is a feature that

569
00:37:30,950 --> 00:37:36,950
doesn't do anything but you can do those

570
00:37:33,500 --> 00:37:39,260
at the channel level just sending every

571
00:37:36,950 --> 00:37:40,910
time the query with the identifier so

572
00:37:39,260 --> 00:37:44,869
cutting the communication between the

573
00:37:40,910 --> 00:37:47,379
nodes another identifier that we need to

574
00:37:44,869 --> 00:37:51,230
learn is the session identifier and

575
00:37:47,380 --> 00:37:54,430
that's where you have two bottlenecks as

576
00:37:51,230 --> 00:37:57,770
I told you the developer is responsible

577
00:37:54,430 --> 00:38:01,700
to carry out the to deploy system

578
00:37:57,770 --> 00:38:05,259
component and the function of session

579
00:38:01,700 --> 00:38:09,669
generator user system functions function

580
00:38:05,260 --> 00:38:13,760
so that is the security of this

581
00:38:09,670 --> 00:38:18,640
identifier will depend on the system get

582
00:38:13,760 --> 00:38:26,600
a mass function in fact if you take this

583
00:38:18,640 --> 00:38:29,118
and and Point C for random numbers

584
00:38:26,600 --> 00:38:32,810
generator and then some small mass and

585
00:38:29,119 --> 00:38:36,200
we have this modifier yes certainly it's

586
00:38:32,810 --> 00:38:42,520
predictable button we can only automate

587
00:38:36,200 --> 00:38:46,279
the searcher for this attack and block

588
00:38:42,520 --> 00:38:51,430
identifiers and that's how we can that

589
00:38:46,280 --> 00:38:58,119
get into the channel there is another

590
00:38:51,430 --> 00:39:01,129
nice typical spoofing attack we were

591
00:38:58,119 --> 00:39:06,380
trying to find something similar a table

592
00:39:01,130 --> 00:39:13,609
or inquiry indeed we found some and we

593
00:39:06,380 --> 00:39:17,570
have a service that establishes a parent

594
00:39:13,609 --> 00:39:21,710
node for seed for courses and we create

595
00:39:17,570 --> 00:39:24,770
a chain now between a link between nodes

596
00:39:21,710 --> 00:39:26,810
one node will pass the package to the

597
00:39:24,770 --> 00:39:31,480
second and third in order to get to

598
00:39:26,810 --> 00:39:41,080
their node to the destination node and

599
00:39:31,480 --> 00:39:44,690
we discovered this service timing so

600
00:39:41,080 --> 00:39:47,960
first we see that the node will send in

601
00:39:44,690 --> 00:39:52,100
a query to broadcast it's just the

602
00:39:47,960 --> 00:39:57,280
engineering node as a client node with

603
00:39:52,100 --> 00:39:57,279
the IP 92 will respond specifically to

604
00:40:04,660 --> 00:40:13,040
so engineer yeah so we we then searched

605
00:40:09,950 --> 00:40:16,160
their local and the note says I'm a

606
00:40:13,040 --> 00:40:20,240
parent node it means that the whole

607
00:40:16,160 --> 00:40:22,310
traffic under the codesys will go

608
00:40:20,240 --> 00:40:27,979
through it and all the nodes will expect

609
00:40:22,310 --> 00:40:36,500
this parent node will redirect the

610
00:40:27,980 --> 00:40:42,070
packages to the address on the Polish

611
00:40:36,500 --> 00:40:42,070
Center for the sender algorithm and

612
00:40:42,940 --> 00:40:49,869
so when we arrange communication in this

613
00:40:45,740 --> 00:40:53,149
manner we can do huge number of things

614
00:40:49,869 --> 00:40:56,350
so that's how they communication

615
00:40:53,150 --> 00:41:05,030
structure looks after we establish this

616
00:40:56,350 --> 00:41:09,290
parent node for all nodes and as a as a

617
00:41:05,030 --> 00:41:15,040
proof we discovered a vulnerability in

618
00:41:09,290 --> 00:41:17,630
their encryption a password encryption

619
00:41:15,040 --> 00:41:19,750
mechanism actually we found something

620
00:41:17,630 --> 00:41:25,220
like three the first is typical

621
00:41:19,750 --> 00:41:27,980
vulnerability just creating algorithms

622
00:41:25,220 --> 00:41:31,970
they took a fixed key started their

623
00:41:27,980 --> 00:41:34,430
badgering the password and then another

624
00:41:31,970 --> 00:41:41,750
vulnerability mentor that there are

625
00:41:34,430 --> 00:41:47,779
things that like it's a value that used

626
00:41:41,750 --> 00:41:50,150
only once not to send the encrypted

627
00:41:47,780 --> 00:41:53,480
password but to encrypt the password

628
00:41:50,150 --> 00:41:55,970
that the clients know that then get the

629
00:41:53,480 --> 00:42:00,230
encrypted value and then the server will

630
00:41:55,970 --> 00:42:03,919
compare the encrypted value and they get

631
00:42:00,230 --> 00:42:07,180
the password and encrypted and then look

632
00:42:03,920 --> 00:42:11,090
at the match so the password will not be

633
00:42:07,180 --> 00:42:18,529
transmitted in this way and then they

634
00:42:11,090 --> 00:42:22,030
use approximately the same the client

635
00:42:18,530 --> 00:42:27,140
will use what node here you've reused if

636
00:42:22,030 --> 00:42:31,670
the password is intercepted but then it

637
00:42:27,140 --> 00:42:35,319
doesn't need to decrypt if the attacker

638
00:42:31,670 --> 00:42:35,320
can just resent it

639
00:42:36,170 --> 00:42:40,670
from this random value from food bites

640
00:42:38,990 --> 00:42:43,308
he will use only one bite

641
00:42:40,670 --> 00:42:48,140
so if without ever knowing this random

642
00:42:43,309 --> 00:42:52,579
number you can actually take this bite

643
00:42:48,140 --> 00:42:58,879
and decrypt the password and another

644
00:42:52,579 --> 00:43:00,799
very funny thing so when you transmit

645
00:42:58,880 --> 00:43:03,950
all the parameters one of them is the

646
00:43:00,799 --> 00:43:05,059
type of encoding in orange we see in

647
00:43:03,950 --> 00:43:08,839
orange on the slide

648
00:43:05,059 --> 00:43:14,510
it will be transmitted always for

649
00:43:08,839 --> 00:43:16,910
authenticated it's always equal one so

650
00:43:14,510 --> 00:43:20,750
far tipper uses only one type of

651
00:43:16,910 --> 00:43:23,899
encryption and points out that that's

652
00:43:20,750 --> 00:43:33,200
the one and here we have the password

653
00:43:23,900 --> 00:43:35,089
and it will be it says that after

654
00:43:33,200 --> 00:43:40,129
encryption that's the value of the

655
00:43:35,089 --> 00:43:48,230
password by default and the latest

656
00:43:40,130 --> 00:43:53,589
vulnerability we recalled that coats's

657
00:43:48,230 --> 00:43:59,079
development system is in nature is an

658
00:43:53,589 --> 00:44:01,849
engineering methods and it sends as some

659
00:43:59,079 --> 00:44:07,720
compiled application the question is how

660
00:44:01,849 --> 00:44:11,450
does it compile and what does it send we

661
00:44:07,720 --> 00:44:17,089
were interested to find out what exactly

662
00:44:11,450 --> 00:44:24,160
it says we made a little program with -

663
00:44:17,089 --> 00:44:28,220
where we wrote two values strange values

664
00:44:24,160 --> 00:44:30,440
compiled and loaded to be okay and then

665
00:44:28,220 --> 00:44:34,220
started researching the traffic and we

666
00:44:30,440 --> 00:44:36,790
discovered that those values are sent as

667
00:44:34,220 --> 00:44:36,790
they are

668
00:44:38,990 --> 00:44:50,180
in the parameters and calling for

669
00:44:46,160 --> 00:44:55,220
services and we started watching

670
00:44:50,180 --> 00:44:59,180
I was Tara looking at as a data next to

671
00:44:55,220 --> 00:45:02,419
it and discovered that pure assemble

672
00:44:59,180 --> 00:45:05,660
code compiled for specific process was

673
00:45:02,420 --> 00:45:10,040
we loaded the program

674
00:45:05,660 --> 00:45:15,440
it's a typical instruction and we

675
00:45:10,040 --> 00:45:19,120
discovered we started studying this code

676
00:45:15,440 --> 00:45:24,290
and we see that one instruction loads

677
00:45:19,120 --> 00:45:32,960
the constant into a register I mean 17

678
00:45:24,290 --> 00:45:37,779
19 and 17 slime also loads a content

679
00:45:32,960 --> 00:45:41,680
into the register and the next one tool

680
00:45:37,780 --> 00:45:49,730
and then they will write something like

681
00:45:41,680 --> 00:45:53,990
one value so they are 11 register so it

682
00:45:49,730 --> 00:45:58,640
looks like an announcement of global

683
00:45:53,990 --> 00:46:01,759
changes the default change where we saw

684
00:45:58,640 --> 00:46:04,799
some magic D word on the third line and

685
00:46:01,760 --> 00:46:08,190
the second mention

686
00:46:04,800 --> 00:46:13,290
or in the traffic is the use of the beef

687
00:46:08,190 --> 00:46:15,690
value we discovered that so I'm speaking

688
00:46:13,290 --> 00:46:18,900
about 10 11 12

689
00:46:15,690 --> 00:46:22,070
so assemble instruction is also there

690
00:46:18,900 --> 00:46:25,650
the first one loads the constant value

691
00:46:22,070 --> 00:46:32,280
just like the previous one and then it

692
00:46:25,650 --> 00:46:37,770
will take the value under this address

693
00:46:32,280 --> 00:46:40,920
and low to the register r4 then it will

694
00:46:37,770 --> 00:46:44,670
write the constant into r5 then it will

695
00:46:40,920 --> 00:46:53,940
sum up and write those values to they

696
00:46:44,670 --> 00:46:57,390
address 0x 3870 so to the address that

697
00:46:53,940 --> 00:47:02,670
it gets from the 10th line it is all

698
00:46:57,390 --> 00:47:06,420
similar to the application when it adds

699
00:47:02,670 --> 00:47:09,480
up the fixed values if the first

700
00:47:06,420 --> 00:47:13,470
function was the global changes

701
00:47:09,480 --> 00:47:16,710
announcement and the second is the

702
00:47:13,470 --> 00:47:20,220
application we decided that to replace

703
00:47:16,710 --> 00:47:23,420
those two functions by our arbitrary

704
00:47:20,220 --> 00:47:23,419
function and

705
00:47:27,089 --> 00:47:35,670
these are the instructions in the

706
00:47:29,970 --> 00:47:39,959
traffic and what about my presentation

707
00:47:35,670 --> 00:47:44,009
if that's coming to an end and for the

708
00:47:39,960 --> 00:47:51,900
developers who want to use that

709
00:47:44,009 --> 00:47:58,349
framework and it's a complicated thing

710
00:47:51,900 --> 00:48:08,970
and is difficult to study but you can

711
00:47:58,349 --> 00:48:11,309
always find documentation so some some

712
00:48:08,970 --> 00:48:13,410
some guys if you ask them they give you

713
00:48:11,309 --> 00:48:16,650
your three source codes if you cannot

714
00:48:13,410 --> 00:48:18,569
study it on your own then you will have

715
00:48:16,650 --> 00:48:22,640
fine you will have to find someone who

716
00:48:18,569 --> 00:48:26,489
can do it just remember about the best

717
00:48:22,640 --> 00:48:31,319
security methodologies and don't believe

718
00:48:26,489 --> 00:48:35,160
anyone for the security guys if you use

719
00:48:31,319 --> 00:48:37,589
this framework you have a chance always

720
00:48:35,160 --> 00:48:41,578
if you look some vulnerabilities in your

721
00:48:37,589 --> 00:48:45,210
framework you can a chance to patch or

722
00:48:41,579 --> 00:48:49,319
to protect somehow against the network

723
00:48:45,210 --> 00:48:53,190
attacker for instance like we did it we

724
00:48:49,319 --> 00:48:56,700
study the traffic and we found out the

725
00:48:53,190 --> 00:48:58,990
traffic vulnerabilities and where we

726
00:48:56,700 --> 00:49:02,890
need to look

727
00:48:58,990 --> 00:49:10,000
and exactly the way you can ask for the

728
00:49:02,890 --> 00:49:12,069
source code and subscribe to our to our

729
00:49:10,000 --> 00:49:15,640
information and for the framework

730
00:49:12,070 --> 00:49:17,470
developments if your framework uses some

731
00:49:15,640 --> 00:49:20,470
Network communication nothing bad will

732
00:49:17,470 --> 00:49:22,919
happen if you open the documentation to

733
00:49:20,470 --> 00:49:27,790
your network protocol in the internet

734
00:49:22,920 --> 00:49:30,820
there are many guys who can help you

735
00:49:27,790 --> 00:49:34,869
raising your security and give you some

736
00:49:30,820 --> 00:49:41,349
good advice on improvement and you can

737
00:49:34,869 --> 00:49:44,440
always fix your architectural problems

738
00:49:41,349 --> 00:49:49,770
and the vulnerabilities even if those

739
00:49:44,440 --> 00:49:53,290
vulnerabilities are old and if they

740
00:49:49,770 --> 00:49:58,089
present some small risk remember to make

741
00:49:53,290 --> 00:50:00,400
your own to do your own security checks

742
00:49:58,089 --> 00:50:02,410
for your codes and if you cannot do it

743
00:50:00,400 --> 00:50:09,430
on your own find someone who can do it

744
00:50:02,410 --> 00:50:11,649
for you and don't trust anyone so after

745
00:50:09,430 --> 00:50:16,509
everything we have done now we are going

746
00:50:11,650 --> 00:50:20,859
to publish a paper with filled with

747
00:50:16,510 --> 00:50:24,490
information and how we did it inside

748
00:50:20,859 --> 00:50:26,770
this is run time with huge numbers with

749
00:50:24,490 --> 00:50:30,220
a huge amount of codes and descriptions

750
00:50:26,770 --> 00:50:33,310
of fields and services

751
00:50:30,220 --> 00:50:34,779
so I am finished I thank you for your

752
00:50:33,310 --> 00:50:38,619
attention

753
00:50:34,780 --> 00:50:38,619
[Applause]

754
00:50:43,560 --> 00:50:49,330
hello thank you for your presentation I

755
00:50:46,450 --> 00:50:53,640
have a short question probably you said

756
00:50:49,330 --> 00:50:56,500
in the beginning how the vendor actually

757
00:50:53,640 --> 00:51:00,580
took your advice and do they have any

758
00:50:56,500 --> 00:51:03,099
threat model because it it looks like a

759
00:51:00,580 --> 00:51:06,160
system that did not consider any threats

760
00:51:03,099 --> 00:51:08,170
or do they say that you have a walled

761
00:51:06,160 --> 00:51:10,540
garden you should have a Volga and it

762
00:51:08,170 --> 00:51:15,430
should be trusted network and go to hell

763
00:51:10,540 --> 00:51:18,700
with your efforts so they have some

764
00:51:15,430 --> 00:51:22,720
security service that publishes their

765
00:51:18,700 --> 00:51:26,439
advisers you can look into it but when

766
00:51:22,720 --> 00:51:29,339
we send them the report of their

767
00:51:26,440 --> 00:51:31,030
vulnerabilities that said that some

768
00:51:29,340 --> 00:51:33,780
vulnerabilities are actually

769
00:51:31,030 --> 00:51:36,220
architectural like a predictable

770
00:51:33,780 --> 00:51:38,500
generation of channels and they fixed it

771
00:51:36,220 --> 00:51:42,220
because someone else brought some other

772
00:51:38,500 --> 00:51:50,109
arguments to them and they fixed it and

773
00:51:42,220 --> 00:51:52,209
didn't without telling us so yes

774
00:51:50,109 --> 00:51:54,460
something like that they said that this

775
00:51:52,210 --> 00:51:58,140
is architecture and they're not it's

776
00:51:54,460 --> 00:51:58,140
they are not going to fix it

777
00:52:01,430 --> 00:52:11,069
and do they did they have any did they

778
00:52:07,950 --> 00:52:14,370
try to consider security when developing

779
00:52:11,070 --> 00:52:18,990
their architecture or not I don't know

780
00:52:14,370 --> 00:52:28,200
but they give recommendations to use

781
00:52:18,990 --> 00:52:31,319
this runtime something like activate 20

782
00:52:28,200 --> 00:52:35,850
components and the set up this set of

783
00:52:31,320 --> 00:52:41,640
that but we need to look into these

784
00:52:35,850 --> 00:52:44,160
components that protect everything thank

785
00:52:41,640 --> 00:52:50,359
you for your report there are two things

786
00:52:44,160 --> 00:52:54,060
I noticed when and where we can download

787
00:52:50,360 --> 00:52:58,350
something and the second have you looked

788
00:52:54,060 --> 00:53:01,140
at the buffer sizes in parsing is there

789
00:52:58,350 --> 00:53:04,650
any embed code

790
00:53:01,140 --> 00:53:08,519
[Music]

791
00:53:04,650 --> 00:53:11,609
we tried to automate the search of

792
00:53:08,519 --> 00:53:14,078
vulnerabilities smart search for

793
00:53:11,609 --> 00:53:20,979
vulnerabilities just like for the source

794
00:53:14,079 --> 00:53:25,239
code if you use APL and we wanted it to

795
00:53:20,979 --> 00:53:27,669
understand what it generates now it's up

796
00:53:25,239 --> 00:53:31,959
and running and the most probably we

797
00:53:27,670 --> 00:53:32,559
shall publish another paper and that's

798
00:53:31,959 --> 00:53:37,450
all

799
00:53:32,559 --> 00:53:39,749
but for internal use probably it can be

800
00:53:37,450 --> 00:53:39,749
passed

801
00:53:45,329 --> 00:53:52,539
so for developing financial dose it's a

802
00:53:49,859 --> 00:53:55,959
narrow tool and the developer has to

803
00:53:52,539 --> 00:54:01,209
write to consider many mistakes in order

804
00:53:55,959 --> 00:54:04,149
to defend against attacks when they

805
00:54:01,209 --> 00:54:08,198
broadcast a source address would it be

806
00:54:04,150 --> 00:54:16,660
wouldn't it be easier for the developers

807
00:54:08,199 --> 00:54:19,410
just forget about those rules and and

808
00:54:16,660 --> 00:54:23,319
provide for some compensation measures

809
00:54:19,410 --> 00:54:29,379
to use some screens to follow the

810
00:54:23,319 --> 00:54:31,329
packages with broadcast address no you

811
00:54:29,380 --> 00:54:34,059
need a comprehensive solution if you

812
00:54:31,329 --> 00:54:37,410
block broadcasters then some many other

813
00:54:34,059 --> 00:54:41,020
services may drop yes

814
00:54:37,410 --> 00:54:44,379
probably you can but it is unusual

815
00:54:41,020 --> 00:54:48,820
situation when broadcast requires when a

816
00:54:44,380 --> 00:54:52,000
sender uses broadcast demanding an

817
00:54:48,820 --> 00:54:54,840
answer most probably it didn't it was

818
00:54:52,000 --> 00:54:59,380
not supposed to be that way

819
00:54:54,840 --> 00:55:02,260
so you can turn to the speaker person

820
00:54:59,380 --> 00:55:04,770
yeah we have gifts for the two best

821
00:55:02,260 --> 00:55:04,770
questions

822
00:55:19,410 --> 00:55:22,460
[Music]

