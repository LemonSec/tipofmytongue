1
00:00:00,030 --> 00:00:06,899
hello Kilimani guys thanks for your

2
00:00:03,149 --> 00:00:09,300
attention and very so grateful to be

3
00:00:06,899 --> 00:00:13,139
here to do it we are going to talk about

4
00:00:09,300 --> 00:00:17,550
sounds that relate to JavaScript

5
00:00:13,139 --> 00:00:21,029
that's the my friend Kevin under me with

6
00:00:17,550 --> 00:00:24,750
a laser that's most of practical and

7
00:00:21,029 --> 00:00:28,080
abilities each our application are not

8
00:00:24,750 --> 00:00:32,308
so far itself on the contrary a number

9
00:00:28,080 --> 00:00:35,849
of problems from Easterner pads and now

10
00:00:32,308 --> 00:00:39,660
as a java archive so we spend a lot of

11
00:00:35,850 --> 00:00:43,410
time on speech in order to find out the

12
00:00:39,660 --> 00:00:46,949
nature of cosy this is fundamental know

13
00:00:43,410 --> 00:00:50,550
we have one to share with you showing

14
00:00:46,950 --> 00:00:53,760
you our source our research process and

15
00:00:50,550 --> 00:00:57,419
what we found found during this research

16
00:00:53,760 --> 00:01:00,890
in addition we will also is habits that

17
00:00:57,420 --> 00:01:05,369
how did we discover some zero-days

18
00:01:00,890 --> 00:01:10,799
automatically okay first of all let me

19
00:01:05,369 --> 00:01:14,189
introduce our team i'm jung jong is

20
00:01:10,799 --> 00:01:14,540
known as easy a man welcome back to the

21
00:01:14,189 --> 00:01:18,240
arrow

22
00:01:14,540 --> 00:01:20,009
cha ji sang steam a man independence a

23
00:01:18,240 --> 00:01:23,039
great resource

24
00:01:20,009 --> 00:01:26,070
currently i focus on application

25
00:01:23,040 --> 00:01:30,509
security called security and the windows

26
00:01:26,070 --> 00:01:33,658
security hope you enjoy our presentation

27
00:01:30,509 --> 00:01:38,970
nestor key giving it also my friend

28
00:01:33,659 --> 00:01:42,420
Kevin okay hello hi guys thank you all

29
00:01:38,970 --> 00:01:46,020
to be here and my name is Kevin and I'm

30
00:01:42,420 --> 00:01:48,869
from China both mine me and my partner

31
00:01:46,020 --> 00:01:51,750
and I mainly focus on the web security

32
00:01:48,869 --> 00:01:56,130
cloud security in the past decade so

33
00:01:51,750 --> 00:01:59,670
let's just get started so here's the

34
00:01:56,130 --> 00:02:02,399
agenda to start with we were introduced

35
00:01:59,670 --> 00:02:06,119
some fundamental backgrounds of Java

36
00:02:02,399 --> 00:02:08,990
archive such as some basic concepts how

37
00:02:06,119 --> 00:02:11,180
to use it and so on and then we were

38
00:02:08,990 --> 00:02:14,600
about that why so many vulnerabilities

39
00:02:11,180 --> 00:02:15,680
hiding duck area and why do we call it

40
00:02:14,600 --> 00:02:20,570
in a black hole

41
00:02:15,680 --> 00:02:22,910
yep and next in the next based on these

42
00:02:20,570 --> 00:02:24,799
assumptions that mentioned above we will

43
00:02:22,910 --> 00:02:27,500
try to discover what abilities

44
00:02:24,800 --> 00:02:29,780
automatically so in this section we

45
00:02:27,500 --> 00:02:33,080
represent our platform which used to

46
00:02:29,780 --> 00:02:35,630
find vulnerabilities and including the

47
00:02:33,080 --> 00:02:38,450
architecture of our platform what

48
00:02:35,630 --> 00:02:41,570
technologies that were using in some

49
00:02:38,450 --> 00:02:44,239
details of implementation finally we are

50
00:02:41,570 --> 00:02:46,430
gonna demonstrate several zero-days that

51
00:02:44,240 --> 00:02:49,550
founded by our platform in mainstream

52
00:02:46,430 --> 00:02:51,380
libraries which is most important part

53
00:02:49,550 --> 00:02:55,670
to prove that it is a black hole

54
00:02:51,380 --> 00:02:57,560
so plus in the process of our starti we

55
00:02:55,670 --> 00:02:59,420
also find a sound interesting attack

56
00:02:57,560 --> 00:03:02,390
surface in those warned in the bowl

57
00:02:59,420 --> 00:03:06,500
libraries which will also be analyzed in

58
00:03:02,390 --> 00:03:10,760
in our presentation so let's just take a

59
00:03:06,500 --> 00:03:17,750
look the first part is vulnerabilities

60
00:03:10,760 --> 00:03:19,850
hiding talk area and before we unfold

61
00:03:17,750 --> 00:03:22,610
our main point I would like to introduce

62
00:03:19,850 --> 00:03:25,850
some basics of java archive it will help

63
00:03:22,610 --> 00:03:28,040
you to understand the whole topic as we

64
00:03:25,850 --> 00:03:30,470
all know if you want to run a java

65
00:03:28,040 --> 00:03:32,989
application you should definitely

66
00:03:30,470 --> 00:03:35,750
install the java platform right and

67
00:03:32,990 --> 00:03:38,780
there is a significant component called

68
00:03:35,750 --> 00:03:41,870
JVM which is responsible for

69
00:03:38,780 --> 00:03:44,570
interpreting classifiers and so the

70
00:03:41,870 --> 00:03:47,720
thing is how does the JVM know with the

71
00:03:44,570 --> 00:03:50,510
classifier well actually there is a

72
00:03:47,720 --> 00:03:53,720
subclass lo subclass of classloader

73
00:03:50,510 --> 00:03:55,880
named extension class loader it is in

74
00:03:53,720 --> 00:03:58,910
charge of loading external libraries in

75
00:03:55,880 --> 00:04:02,600
the java home path in that path you will

76
00:03:58,910 --> 00:04:05,980
see a lot of files with a TR suffix and

77
00:04:02,600 --> 00:04:08,690
those are Java archive or akh are

78
00:04:05,980 --> 00:04:11,119
typically Java archive is a kind of

79
00:04:08,690 --> 00:04:13,609
package file format which build on the

80
00:04:11,120 --> 00:04:16,700
IP format it allows developers to

81
00:04:13,610 --> 00:04:20,270
establish their project or that their

82
00:04:16,700 --> 00:04:22,580
project to be a library for other one to

83
00:04:20,269 --> 00:04:25,099
reuses so

84
00:04:22,580 --> 00:04:27,849
I have to say it is very convenient for

85
00:04:25,099 --> 00:04:33,800
users however it also brings some

86
00:04:27,849 --> 00:04:36,530
security problems in enterprises as you

87
00:04:33,800 --> 00:04:39,139
can see a variety of prevalent framework

88
00:04:36,530 --> 00:04:42,739
and components are made of Java archive

89
00:04:39,139 --> 00:04:49,009
files such as spring hibernate stress

90
00:04:42,740 --> 00:04:52,009
message queue even container JDK so if a

91
00:04:49,009 --> 00:04:55,400
user want to manage their Java archived

92
00:04:52,009 --> 00:04:58,069
there are many tools on the internet

93
00:04:55,400 --> 00:05:00,650
could be used for instance the maven or

94
00:04:58,069 --> 00:05:03,169
credo which is most common in the Java

95
00:05:00,650 --> 00:05:07,280
project so that's the maven is an

96
00:05:03,169 --> 00:05:09,349
example you just need to put hello you

97
00:05:07,280 --> 00:05:13,969
just need to put the yellow codes below

98
00:05:09,349 --> 00:05:17,930
into your local into your projects from

99
00:05:13,969 --> 00:05:19,789
configuration file and it enables you to

100
00:05:17,930 --> 00:05:23,689
get the job files into your local

101
00:05:19,789 --> 00:05:26,240
repository so obviously these

102
00:05:23,689 --> 00:05:29,479
information can then a group ID or

103
00:05:26,240 --> 00:05:31,279
artifact I do a version item which used

104
00:05:29,479 --> 00:05:35,419
to tell the maven one accurate

105
00:05:31,279 --> 00:05:38,810
coordinates of this jar file so the

106
00:05:35,419 --> 00:05:44,628
crater is also something like this kind

107
00:05:38,810 --> 00:05:47,659
of way so the next section is what we

108
00:05:44,629 --> 00:05:49,629
call Java have a black hole in this part

109
00:05:47,659 --> 00:05:53,389
I would explain it from two perspectives

110
00:05:49,629 --> 00:05:55,940
first of all for developers and second

111
00:05:53,389 --> 00:06:01,879
for security process or security

112
00:05:55,940 --> 00:06:04,400
researches ok let's take a look so for

113
00:06:01,879 --> 00:06:07,190
developers I classified them into two

114
00:06:04,400 --> 00:06:10,789
categories the first one is who want to

115
00:06:07,190 --> 00:06:13,159
use second or third party packages if I

116
00:06:10,789 --> 00:06:15,949
am a developer I just want to assemble

117
00:06:13,159 --> 00:06:19,940
these travels into my project in order

118
00:06:15,949 --> 00:06:21,729
to complete some function right and just

119
00:06:19,940 --> 00:06:24,800
invoke it according to the official

120
00:06:21,729 --> 00:06:27,740
documents so I really don't know what

121
00:06:24,800 --> 00:06:30,199
exactly happens inside of the job but

122
00:06:27,740 --> 00:06:30,860
some people might say you can debug it

123
00:06:30,199 --> 00:06:33,349
yeah

124
00:06:30,860 --> 00:06:35,389
but unfortunately some commercial

125
00:06:33,349 --> 00:06:38,000
software or closed-source two packages

126
00:06:35,389 --> 00:06:40,490
are accessible furthermore as a

127
00:06:38,000 --> 00:06:43,159
developer actually I didn't care what

128
00:06:40,490 --> 00:06:45,860
happened in the Java file not to speak

129
00:06:43,159 --> 00:06:49,699
of the security problems therefore

130
00:06:45,860 --> 00:06:52,340
provided that a packaging exists wrong

131
00:06:49,699 --> 00:06:57,159
abilities it would affect my project and

132
00:06:52,340 --> 00:07:00,289
even I could hardly to perceive it and

133
00:06:57,159 --> 00:07:04,159
second a second kind of user is who

134
00:07:00,289 --> 00:07:06,560
develop this jar files and he is also a

135
00:07:04,159 --> 00:07:08,870
developer all right for them I assume

136
00:07:06,560 --> 00:07:11,539
that they have some security experience

137
00:07:08,870 --> 00:07:14,629
they know how to prevent applications

138
00:07:11,539 --> 00:07:17,389
from being attacked but in their angle

139
00:07:14,629 --> 00:07:20,719
of view the overall situation is choose

140
00:07:17,389 --> 00:07:23,659
more to see it clearly because the

141
00:07:20,719 --> 00:07:26,750
package is just a small part of it and

142
00:07:23,659 --> 00:07:29,688
so sometimes some security attack

143
00:07:26,750 --> 00:07:32,449
service cannot be covered and we will

144
00:07:29,689 --> 00:07:36,169
disclose these attack surface in the

145
00:07:32,449 --> 00:07:39,229
data section so that will enhance our

146
00:07:36,169 --> 00:07:41,839
talking point besides in the process of

147
00:07:39,229 --> 00:07:45,080
the development they also need to use

148
00:07:41,839 --> 00:07:49,789
other GFI also the same circumstance

149
00:07:45,080 --> 00:07:53,060
happen again more importantly when they

150
00:07:49,789 --> 00:07:55,400
try to import other job packages we

151
00:07:53,060 --> 00:07:58,969
found repackaging method is a very

152
00:07:55,400 --> 00:08:01,128
normal in the development and this is

153
00:07:58,969 --> 00:08:06,469
one of the key point to cause the black

154
00:08:01,129 --> 00:08:08,990
hole so what is the repackaging through

155
00:08:06,469 --> 00:08:12,050
our analysis in the amount of Java files

156
00:08:08,990 --> 00:08:14,360
we do consider that repackaging method

157
00:08:12,050 --> 00:08:17,360
would cause troubles due to the fact

158
00:08:14,360 --> 00:08:20,000
that dependency conflict is very common

159
00:08:17,360 --> 00:08:22,029
in the daily work and developers might

160
00:08:20,000 --> 00:08:24,800
use different way to deal with

161
00:08:22,029 --> 00:08:27,050
incompatible problem and this

162
00:08:24,800 --> 00:08:30,650
repackaging method is one of them

163
00:08:27,050 --> 00:08:34,310
so we can expect that similar barcodes

164
00:08:30,650 --> 00:08:37,269
could exist in everywhere and as you can

165
00:08:34,309 --> 00:08:40,130
see the graphical illustration the

166
00:08:37,269 --> 00:08:42,860
chassis is for if the chassis is

167
00:08:40,130 --> 00:08:44,390
vulnerable and am be repacked to see

168
00:08:42,860 --> 00:08:47,600
which means

169
00:08:44,390 --> 00:08:51,199
be honorable finally results in the

170
00:08:47,600 --> 00:08:54,019
outcome that both application 1 & 2 were

171
00:08:51,200 --> 00:08:56,870
exposed to the danger and when the

172
00:08:54,019 --> 00:09:00,730
vulnerability of see Jhansi was fixed

173
00:08:56,870 --> 00:09:04,250
and an B is still inaudible why because

174
00:09:00,730 --> 00:09:06,800
they they'll use the repackaging method

175
00:09:04,250 --> 00:09:09,560
to implement the see these codes are

176
00:09:06,800 --> 00:09:12,829
still out of date so it's useless for

177
00:09:09,560 --> 00:09:15,979
repairing Jesse it's more likely to say

178
00:09:12,829 --> 00:09:19,550
that she didn't know a and B you sleep

179
00:09:15,980 --> 00:09:24,320
in a and B didn't know C has a new

180
00:09:19,550 --> 00:09:28,790
version so as time goes on risks would

181
00:09:24,320 --> 00:09:35,660
spread out just like a cancer so that's

182
00:09:28,790 --> 00:09:37,849
we know nothing okay so is there any way

183
00:09:35,660 --> 00:09:41,329
to find out what abilities that hiding

184
00:09:37,850 --> 00:09:44,000
the job archive files well normally in

185
00:09:41,329 --> 00:09:46,420
security process most of Java archive

186
00:09:44,000 --> 00:09:49,820
files don't have any security check

187
00:09:46,420 --> 00:09:52,209
especially in the second part second

188
00:09:49,820 --> 00:09:56,240
party libraries in their enterprises

189
00:09:52,209 --> 00:09:59,540
except that some Priven forever travel

190
00:09:56,240 --> 00:10:02,449
and components and frameworks would be

191
00:09:59,540 --> 00:10:04,760
analyzed by security researchers but for

192
00:10:02,449 --> 00:10:08,660
small skills Java files they would be

193
00:10:04,760 --> 00:10:11,420
ignored also most of scanners tools have

194
00:10:08,660 --> 00:10:14,540
a strategy to guarantee the safety of

195
00:10:11,420 --> 00:10:17,599
open source java files that is to

196
00:10:14,540 --> 00:10:20,390
compare the version number of jar files

197
00:10:17,600 --> 00:10:23,269
so I don't think this is a good way to

198
00:10:20,390 --> 00:10:25,880
deal with them because it also develops

199
00:10:23,269 --> 00:10:27,860
to modify their job version number to

200
00:10:25,880 --> 00:10:31,339
bypass the security check

201
00:10:27,860 --> 00:10:34,130
I think check the md5 sum way better

202
00:10:31,339 --> 00:10:37,430
than the version under so the internal

203
00:10:34,130 --> 00:10:42,350
Java archive files is Stewart talk area

204
00:10:37,430 --> 00:10:44,779
we want to discover it so in the past

205
00:10:42,350 --> 00:10:47,029
few years an increasing number of

206
00:10:44,779 --> 00:10:49,550
researchers can their attention to Java

207
00:10:47,029 --> 00:10:51,079
this realization attacked some people

208
00:10:49,550 --> 00:10:53,810
attempt to find different kinds of

209
00:10:51,079 --> 00:10:56,390
gadgets and these gadgets are depending

210
00:10:53,810 --> 00:10:57,839
on the part of jar files a majority of

211
00:10:56,390 --> 00:11:01,210
defenses

212
00:10:57,840 --> 00:11:04,270
dissertation that is a top adopt

213
00:11:01,210 --> 00:11:06,700
blacklist so I think is a reliable way

214
00:11:04,270 --> 00:11:09,880
because of the repackaging that

215
00:11:06,700 --> 00:11:12,220
mentioned above in addition except that

216
00:11:09,880 --> 00:11:14,380
gadgets other security problems should

217
00:11:12,220 --> 00:11:17,440
be concerned in the Java archive files

218
00:11:14,380 --> 00:11:20,800
so we will present it in the data

219
00:11:17,440 --> 00:11:26,260
section and discover and show what we

220
00:11:20,800 --> 00:11:29,140
found so in the enterprise's if the

221
00:11:26,260 --> 00:11:32,040
whole process of STL missing security

222
00:11:29,140 --> 00:11:36,189
issue issues or mainly focus on the

223
00:11:32,040 --> 00:11:38,980
application itself that would be become

224
00:11:36,190 --> 00:11:41,740
black holes so we need to build a tool

225
00:11:38,980 --> 00:11:44,500
to discover what abilities automatically

226
00:11:41,740 --> 00:11:46,150
so the next part is discover what

227
00:11:44,500 --> 00:11:50,160
abilities in the Java archive

228
00:11:46,150 --> 00:11:54,130
automatically here we go

229
00:11:50,160 --> 00:11:56,439
so confronted with this talk area that

230
00:11:54,130 --> 00:11:58,480
what are we focusing on the first thing

231
00:11:56,440 --> 00:12:01,090
is that how do these count wrong

232
00:11:58,480 --> 00:12:03,940
abilities automatically and completely

233
00:12:01,090 --> 00:12:05,920
deal with the repackaging issues that

234
00:12:03,940 --> 00:12:08,140
are mentioned above for the sake of

235
00:12:05,920 --> 00:12:11,560
achieving this goal we should get the

236
00:12:08,140 --> 00:12:15,660
data flows in the Java files and then

237
00:12:11,560 --> 00:12:19,270
identify which data flows are culturable

238
00:12:15,660 --> 00:12:22,000
also like I said we shift our focus from

239
00:12:19,270 --> 00:12:25,079
finding gadgets to other attack surface

240
00:12:22,000 --> 00:12:27,760
such as some SSR foreign abilities

241
00:12:25,080 --> 00:12:29,860
because we found out that Network

242
00:12:27,760 --> 00:12:33,100
request is very common in the gel

243
00:12:29,860 --> 00:12:36,130
archive files with a particular scenario

244
00:12:33,100 --> 00:12:39,700
thesis a problem could result in remote

245
00:12:36,130 --> 00:12:44,320
code execution in the JDK issues exist

246
00:12:39,700 --> 00:12:47,170
in many Java file so here is the

247
00:12:44,320 --> 00:12:50,410
workflow of our platform we divided into

248
00:12:47,170 --> 00:12:54,520
four steps the first one is collecting

249
00:12:50,410 --> 00:12:57,040
information and the confine in Java file

250
00:12:54,520 --> 00:12:58,900
automatically loading one abilities

251
00:12:57,040 --> 00:13:01,900
Morrow's and verifying the

252
00:12:58,900 --> 00:13:04,390
vulnerabilities so for the first step we

253
00:13:01,900 --> 00:13:06,339
download the tons of Java files send

254
00:13:04,390 --> 00:13:09,610
them to the

255
00:13:06,339 --> 00:13:12,399
and we become because the compiling task

256
00:13:09,610 --> 00:13:15,279
is very time-consuming so we adopted a

257
00:13:12,399 --> 00:13:21,399
district distributed architecture to

258
00:13:15,279 --> 00:13:23,470
handle his work this is the framework we

259
00:13:21,399 --> 00:13:26,559
have a manager to amend the order of the

260
00:13:23,470 --> 00:13:29,980
results file and including the dashboard

261
00:13:26,559 --> 00:13:32,709
report system and so on for the workers

262
00:13:29,980 --> 00:13:34,959
they are in charge of analyzing source

263
00:13:32,709 --> 00:13:37,930
code in the jaw and the compiling

264
00:13:34,959 --> 00:13:40,420
classifiers so in the following pages

265
00:13:37,930 --> 00:13:47,319
there are some relatively important

266
00:13:40,420 --> 00:13:50,709
components will be detailed and first of

267
00:13:47,319 --> 00:13:53,110
all for the compiler as you can see

268
00:13:50,709 --> 00:13:57,040
collector would download Java files from

269
00:13:53,110 --> 00:14:00,339
the maven repository and this repository

270
00:13:57,040 --> 00:14:03,099
can be private or public it's very

271
00:14:00,339 --> 00:14:04,149
convenient to get this job files via a

272
00:14:03,100 --> 00:14:07,689
maven

273
00:14:04,149 --> 00:14:11,610
common line and then we used Apache ECL

274
00:14:07,689 --> 00:14:14,679
API to analyze these Java bytecode

275
00:14:11,610 --> 00:14:17,910
transfer class transfer the class files

276
00:14:14,679 --> 00:14:21,550
into the source code these actions are

277
00:14:17,910 --> 00:14:25,179
to extract basic information such as the

278
00:14:21,550 --> 00:14:27,729
class names and class types inheritance

279
00:14:25,179 --> 00:14:30,999
relationship and function name and type

280
00:14:27,730 --> 00:14:33,069
so why do we need to these these

281
00:14:30,999 --> 00:14:35,079
information because this information

282
00:14:33,069 --> 00:14:38,469
helped us to build entire data flow

283
00:14:35,079 --> 00:14:42,569
which allows us to locate vulnerable

284
00:14:38,470 --> 00:14:45,579
sinks yeah and the process of locating

285
00:14:42,569 --> 00:14:49,809
risks will be performed in an analyzer

286
00:14:45,579 --> 00:14:51,670
so the next is analyzer so the analyzer

287
00:14:49,809 --> 00:14:55,079
will load the different kinds of rules

288
00:14:51,670 --> 00:14:59,019
which contains a remote code execution

289
00:14:55,079 --> 00:15:03,339
XML its external entity injection as

290
00:14:59,019 --> 00:15:05,410
dissolve or disser ization attack so you

291
00:15:03,339 --> 00:15:09,429
can see the lot of rules in the on

292
00:15:05,410 --> 00:15:12,249
screen it also be a condensed the jndi

293
00:15:09,429 --> 00:15:14,679
injection and so on so you can see that

294
00:15:12,249 --> 00:15:17,209
different models include many dangerous

295
00:15:14,679 --> 00:15:19,519
function and

296
00:15:17,209 --> 00:15:21,829
next tasks into jour de corps graph

297
00:15:19,519 --> 00:15:25,069
automatically when we get the entire

298
00:15:21,829 --> 00:15:27,979
core graph of a job file we can't match

299
00:15:25,069 --> 00:15:30,679
him if there is a vulnerability method

300
00:15:27,980 --> 00:15:32,720
within a job fell through hole rules so

301
00:15:30,679 --> 00:15:35,179
along with the call graph we can also

302
00:15:32,720 --> 00:15:37,730
find there is a topside invoking

303
00:15:35,179 --> 00:15:39,740
function which is to decide whether or

304
00:15:37,730 --> 00:15:42,110
not this vulnerability could be

305
00:15:39,740 --> 00:15:48,649
exploited because not all functions

306
00:15:42,110 --> 00:15:50,449
would be used within the job file so in

307
00:15:48,649 --> 00:15:52,730
the process of drawing call graph

308
00:15:50,449 --> 00:15:55,790
there's a few points should be noticed

309
00:15:52,730 --> 00:15:58,129
the first one is that one Java file

310
00:15:55,790 --> 00:16:01,449
would exist multiple exploitable sink

311
00:15:58,129 --> 00:16:03,920
for example look at the graph

312
00:16:01,449 --> 00:16:07,339
illustration on the right I assume that

313
00:16:03,920 --> 00:16:09,920
there is a call graph in at one job file

314
00:16:07,339 --> 00:16:13,309
and we found a vulnerable point in the

315
00:16:09,920 --> 00:16:15,920
red dot you can see that and so actually

316
00:16:13,309 --> 00:16:21,559
there are three paths could be exploited

317
00:16:15,920 --> 00:16:25,399
there is a from FN to 2 FN 6 F 3 to F 6

318
00:16:21,559 --> 00:16:28,339
and FN 3 to F and 7 maybe FN 3 has been

319
00:16:25,399 --> 00:16:33,589
sanitized or just cannot be exploited

320
00:16:28,339 --> 00:16:35,749
but other might still works and the

321
00:16:33,589 --> 00:16:37,160
second point is that the server public

322
00:16:35,749 --> 00:16:40,399
method would be invoked

323
00:16:37,160 --> 00:16:42,618
directly in a application in java

324
00:16:40,399 --> 00:16:43,999
application so we judge the function

325
00:16:42,619 --> 00:16:47,019
types in our analyzer

326
00:16:43,999 --> 00:16:50,329
in order to avoid some false negatives

327
00:16:47,019 --> 00:16:52,759
so besides there is another situation

328
00:16:50,329 --> 00:16:55,998
that the certain parameters are not

329
00:16:52,759 --> 00:16:58,160
passed by interests that need to be said

330
00:16:55,999 --> 00:17:01,579
it just like a symbol code I'm given

331
00:16:58,160 --> 00:17:03,499
so we also let the scanner to match this

332
00:17:01,579 --> 00:17:08,629
kind of pattern in the process of

333
00:17:03,499 --> 00:17:11,899
scanning and the last step is to verify

334
00:17:08,630 --> 00:17:15,230
the vulnerabilities so we get a lot of

335
00:17:11,898 --> 00:17:17,539
results file rights and or name the dot

336
00:17:15,230 --> 00:17:21,110
files and these thought files could be

337
00:17:17,539 --> 00:17:23,390
string type or image type for image tab

338
00:17:21,109 --> 00:17:25,908
it can confirm the vulnerabilities

339
00:17:23,390 --> 00:17:28,270
easily because the call graph picture

340
00:17:25,909 --> 00:17:32,290
exhibits what is the name of

341
00:17:28,270 --> 00:17:35,290
dangerous function who in broke it or is

342
00:17:32,290 --> 00:17:38,379
it possible to exploit it and so on for

343
00:17:35,290 --> 00:17:41,260
the more if I transfer the dot file

344
00:17:38,380 --> 00:17:44,200
that's confirmed to be exploited as a

345
00:17:41,260 --> 00:17:46,720
stream type it allows us to make the

346
00:17:44,200 --> 00:17:49,720
rules match in other Java files I mean

347
00:17:46,720 --> 00:17:51,970
if I if one herbal call graph exists in

348
00:17:49,720 --> 00:17:54,570
other Java files so I can make sure that

349
00:17:51,970 --> 00:17:58,750
these Jeff has also be exploitable and

350
00:17:54,570 --> 00:18:01,750
be in the process of our and eyes we

351
00:17:58,750 --> 00:18:03,640
usually look at the official documents

352
00:18:01,750 --> 00:18:05,980
to find out what the feature of the

353
00:18:03,640 --> 00:18:06,730
class and what the scenario of using

354
00:18:05,980 --> 00:18:09,550
this feature

355
00:18:06,730 --> 00:18:13,570
so we also find some interesting attack

356
00:18:09,550 --> 00:18:15,760
surface in some basic libraries so in

357
00:18:13,570 --> 00:18:17,678
the next part I were invited my friend

358
00:18:15,760 --> 00:18:19,300
young John to talk about what I was

359
00:18:17,679 --> 00:18:22,030
forming during the research it also

360
00:18:19,300 --> 00:18:33,730
includes on 0 days one abilities thank

361
00:18:22,030 --> 00:18:36,670
you why this year black hole and our

362
00:18:33,730 --> 00:18:39,040
paid for architecture and the hallways

363
00:18:36,670 --> 00:18:42,480
on the some problems seem plaintiff on

364
00:18:39,040 --> 00:18:46,389
developments so many developer and thus

365
00:18:42,480 --> 00:18:48,820
have neglected this error even the

366
00:18:46,390 --> 00:18:51,809
commercial security for that we ignore

367
00:18:48,820 --> 00:18:55,330
them there may be some business for it

368
00:18:51,809 --> 00:18:58,510
cuz there are too many just need to scan

369
00:18:55,330 --> 00:19:01,750
and many just have no source code it

370
00:18:58,510 --> 00:19:04,870
will undoubtedly increase the workload

371
00:19:01,750 --> 00:19:08,710
and videos the efficiency and my way

372
00:19:04,870 --> 00:19:11,790
sync is error that has been nagging that

373
00:19:08,710 --> 00:19:14,950
either pass and there are lots of

374
00:19:11,790 --> 00:19:18,670
securities so we should pay attention to

375
00:19:14,950 --> 00:19:21,070
it and the way have come that's why in

376
00:19:18,670 --> 00:19:25,660
deeps research and found many envelope

377
00:19:21,070 --> 00:19:28,120
images in Java let's talk about some

378
00:19:25,660 --> 00:19:31,360
interesting and the high risk well

379
00:19:28,120 --> 00:19:34,629
apologies first of a we will talk about

380
00:19:31,360 --> 00:19:38,080
some little bits in JDK to the Cape

381
00:19:34,630 --> 00:19:40,060
always some base cultures such as RT

382
00:19:38,080 --> 00:19:43,330
don't jar which provides

383
00:19:40,060 --> 00:19:47,020
many indepent classes to us for

384
00:19:43,330 --> 00:19:49,689
improving development inventions before

385
00:19:47,020 --> 00:19:52,900
there are some creative 11 inches

386
00:19:49,690 --> 00:19:56,770
Angelica it will affect the most of Java

387
00:19:52,900 --> 00:19:58,630
applications so let's take a look let's

388
00:19:56,770 --> 00:20:02,800
take a look at a hallway found a

389
00:19:58,630 --> 00:20:06,430
high-risk when a police in JDK we can

390
00:20:02,800 --> 00:20:10,240
review this research in black addressed

391
00:20:06,430 --> 00:20:14,280
to gas release their research name de

392
00:20:10,240 --> 00:20:16,750
Italia from Chania L depth menu

393
00:20:14,280 --> 00:20:19,870
manipulation to the mode called disco

394
00:20:16,750 --> 00:20:22,990
changing land many security social unit

395
00:20:19,870 --> 00:20:26,110
super phone Java desalinization attack

396
00:20:22,990 --> 00:20:28,900
and came remote command risk ocean it

397
00:20:26,110 --> 00:20:32,100
commanded you having to to attack

398
00:20:28,900 --> 00:20:35,830
message area in Jesse and L depth and

399
00:20:32,100 --> 00:20:38,709
poisoning in Jenna and Jesse if the

400
00:20:35,830 --> 00:20:44,260
attacker can control a parameter in look

401
00:20:38,710 --> 00:20:46,750
up it will need to assay in ltap ensure

402
00:20:44,260 --> 00:20:50,800
poisoning if away can control agenda

403
00:20:46,750 --> 00:20:54,760
address and the under cetera Tony obj

404
00:20:50,800 --> 00:20:57,790
flag it will also can you toss a total

405
00:20:54,760 --> 00:21:01,420
way lead to one more configuration

406
00:20:57,790 --> 00:21:06,450
cetera Tony object layer so in LDAP

407
00:21:01,420 --> 00:21:11,470
entry poisoning the fuel at a casino

408
00:21:06,450 --> 00:21:14,560
1604 LTS entry poisoning this

409
00:21:11,470 --> 00:21:17,050
variability ill many because it will

410
00:21:14,560 --> 00:21:19,780
eventually Cora dangerous function them

411
00:21:17,050 --> 00:21:22,960
that code object which is a high risk

412
00:21:19,780 --> 00:21:25,420
high risk o function if our data and

413
00:21:22,960 --> 00:21:27,520
toss this function then we will have

414
00:21:25,420 --> 00:21:28,660
three methods to use culture actually

415
00:21:27,520 --> 00:21:31,900
Commons

416
00:21:28,660 --> 00:21:35,680
the first one is Java user organization

417
00:21:31,900 --> 00:21:37,770
we can lead some managers that object to

418
00:21:35,680 --> 00:21:40,420
that code object and it will

419
00:21:37,770 --> 00:21:44,110
automatically perform unsafe with

420
00:21:40,420 --> 00:21:47,770
desalinization funny way come from Java

421
00:21:44,110 --> 00:21:52,030
to simulation at test the second huge

422
00:21:47,770 --> 00:21:52,999
gentian deference if Ligeti I can find a

423
00:21:52,030 --> 00:21:55,069
plot

424
00:21:52,999 --> 00:21:57,559
can you find a class in the class pass

425
00:21:55,069 --> 00:22:00,799
if we all try to download the code of

426
00:21:57,559 --> 00:22:03,168
honor code base that provides the either

427
00:22:00,799 --> 00:22:06,709
change the a server when we play our

428
00:22:03,169 --> 00:22:10,069
many chars several a concern any Java

429
00:22:06,709 --> 00:22:13,069
class to the JDI grant and ice-cold

430
00:22:10,069 --> 00:22:16,249
arbitrary arbitrary Java code

431
00:22:13,069 --> 00:22:19,309
the Sun is remote location all of them

432
00:22:16,249 --> 00:22:22,609
can lead to a say well where you are

433
00:22:19,309 --> 00:22:25,609
playful and lazy JDK we can also

434
00:22:22,609 --> 00:22:29,178
accomplish this risk and the way have

435
00:22:25,609 --> 00:22:34,069
fun mobile abilities the code object in

436
00:22:29,179 --> 00:22:37,549
the key of G India injection attack for

437
00:22:34,069 --> 00:22:40,599
the COG worth of jelly injection attack

438
00:22:37,549 --> 00:22:43,219
we can find that family in the

439
00:22:40,599 --> 00:22:46,279
concordant and read function name that

440
00:22:43,219 --> 00:22:49,869
code object let's take a look at the

441
00:22:46,279 --> 00:22:53,479
result of our platform the results

442
00:22:49,869 --> 00:22:56,329
include other graph which will you walk

443
00:22:53,479 --> 00:23:00,229
it's called object for example function

444
00:22:56,329 --> 00:23:03,259
a if way you need to process unsafe date

445
00:23:00,229 --> 00:23:08,749
and we eventually called the code of

446
00:23:03,259 --> 00:23:11,809
object is it means that we can use this

447
00:23:08,749 --> 00:23:16,219
function to King us a each layer of

448
00:23:11,809 --> 00:23:21,559
graph may be a new intent service that's

449
00:23:16,219 --> 00:23:24,789
crucial hours platform not only scans

450
00:23:21,559 --> 00:23:28,069
Fortune dress function but also

451
00:23:24,789 --> 00:23:31,219
analyzing the underlying core graph of

452
00:23:28,069 --> 00:23:34,339
tangent function so we found many men

453
00:23:31,219 --> 00:23:38,419
abilities that can also lead to the most

454
00:23:34,339 --> 00:23:41,658
common is coaching India in the

455
00:23:38,419 --> 00:23:46,849
analyzing result of our platform you to

456
00:23:41,659 --> 00:23:50,149
show us in the contest the manufactures

457
00:23:46,849 --> 00:23:51,468
that are often use the pass will family

458
00:23:50,149 --> 00:23:54,468
older than us

459
00:23:51,469 --> 00:23:57,979
function name the code object such as

460
00:23:54,469 --> 00:24:02,209
the search the cadet reveals and modify

461
00:23:57,979 --> 00:24:04,249
attributes we have an illicit or Cobra

462
00:24:02,209 --> 00:24:05,290
and found that there's a new way to

463
00:24:04,249 --> 00:24:10,510
perform

464
00:24:05,290 --> 00:24:13,860
yeah I attack the composite pattern

465
00:24:10,510 --> 00:24:17,080
describes a group of objects that he

466
00:24:13,860 --> 00:24:20,340
treated the same way as the single

467
00:24:17,080 --> 00:24:23,169
instance of the same type of object

468
00:24:20,340 --> 00:24:25,780
Mostafa gently impression like such

469
00:24:23,170 --> 00:24:28,780
can't attribute will you walk this

470
00:24:25,780 --> 00:24:32,020
function name the piano and I saw the

471
00:24:28,780 --> 00:24:36,730
intermediate a to the song comes that

472
00:24:32,020 --> 00:24:40,420
now and this fashion will in walks a and

473
00:24:36,730 --> 00:24:43,810
logical process to process completeness

474
00:24:40,420 --> 00:24:47,860
if there is a split character in the

475
00:24:43,810 --> 00:24:50,550
camera campus Edna the hundred thousand

476
00:24:47,860 --> 00:24:53,409
called object will be involved

477
00:24:50,550 --> 00:24:58,240
finally in so we all needed to uh say if

478
00:24:53,410 --> 00:25:02,020
I change the a search operation the code

479
00:24:58,240 --> 00:25:03,370
is a pure say of this knowledge if we

480
00:25:02,020 --> 00:25:06,310
can control

481
00:25:03,370 --> 00:25:09,580
LDAP address and the users black

482
00:25:06,310 --> 00:25:12,190
character an agenda operation it will

483
00:25:09,580 --> 00:25:18,090
needle to a say let's talk about the

484
00:25:12,190 --> 00:25:21,250
attack scenarist if I service an agenda

485
00:25:18,090 --> 00:25:23,350
requester to us when we all return the

486
00:25:21,250 --> 00:25:26,980
payload to the server and the server

487
00:25:23,350 --> 00:25:27,790
will use the code objective forces our

488
00:25:26,980 --> 00:25:32,680
payload

489
00:25:27,790 --> 00:25:39,580
finally waken is killed actual comments

490
00:25:32,680 --> 00:25:42,640
on the server since search K can control

491
00:25:39,580 --> 00:25:46,629
which content object will be created and

492
00:25:42,640 --> 00:25:51,040
is supported the magic protocol switch

493
00:25:46,630 --> 00:25:54,580
so we can create unexpected objects

494
00:25:51,040 --> 00:25:58,409
during the search operation by poison

495
00:25:54,580 --> 00:26:02,290
search k jdk sports four types of

496
00:25:58,410 --> 00:26:07,420
contests by default including I am a

497
00:26:02,290 --> 00:26:08,260
trained young robot us if we gets the TS

498
00:26:07,420 --> 00:26:11,860
contest

499
00:26:08,260 --> 00:26:15,970
objet don't waken query or yes the

500
00:26:11,860 --> 00:26:18,479
information in the internet also we can

501
00:26:15,970 --> 00:26:24,070
perform as a severe attack

502
00:26:18,480 --> 00:26:27,130
compromise the Internet servers let's

503
00:26:24,070 --> 00:26:30,929
take a look at their attacker Sonora

504
00:26:27,130 --> 00:26:37,840
when we can control the permian-triassic

505
00:26:30,930 --> 00:26:41,410
social operation if the occupants of Jan

506
00:26:37,840 --> 00:26:46,030
di so chill contrary ball in a chili

507
00:26:41,410 --> 00:26:48,070
pasta and the summer you'll is to use

508
00:26:46,030 --> 00:26:51,490
the joined via a search function to

509
00:26:48,070 --> 00:26:55,179
query some information way cos data

510
00:26:51,490 --> 00:26:58,210
intranet IP address well that answer

511
00:26:55,180 --> 00:27:00,700
seemed with application you wanna change

512
00:26:58,210 --> 00:27:04,960
the a search operation it will send the

513
00:27:00,700 --> 00:27:07,990
requested to the internet service so

514
00:27:04,960 --> 00:27:12,610
week hasn't any payloads to ensure a

515
00:27:07,990 --> 00:27:20,860
service and then compromise them so it's

516
00:27:12,610 --> 00:27:24,340
annual technical to add tag to India we

517
00:27:20,860 --> 00:27:27,310
have a founder that's a lot of gently

518
00:27:24,340 --> 00:27:30,939
operation are affected by this to add

519
00:27:27,310 --> 00:27:35,350
second vector satchel such as assessing

520
00:27:30,940 --> 00:27:39,130
and band is suneo jaian to india attack

521
00:27:35,350 --> 00:27:43,030
technique we can use it you will each to

522
00:27:39,130 --> 00:27:47,140
King hace or use it as as a dissertation

523
00:27:43,030 --> 00:27:48,330
catch it before the parameter in this

524
00:27:47,140 --> 00:27:51,880
operation

525
00:27:48,330 --> 00:27:56,050
controllable by the attacker kill to a

526
00:27:51,880 --> 00:28:01,000
straight 13 our residents is follow this

527
00:27:56,050 --> 00:28:03,370
API to public okay that's the way we'll

528
00:28:01,000 --> 00:28:07,240
discuss client secret

529
00:28:03,370 --> 00:28:10,810
such an HTTP claims database client

530
00:28:07,240 --> 00:28:13,990
initially available is this Melissa will

531
00:28:10,810 --> 00:28:17,080
sort in low-level risk but after

532
00:28:13,990 --> 00:28:19,900
compounds will saw interesting attack

533
00:28:17,080 --> 00:28:23,760
assess Sonora in real world this

534
00:28:19,900 --> 00:28:28,720
variability will have a serious impact

535
00:28:23,760 --> 00:28:31,340
or playful fall that the solvation will

536
00:28:28,720 --> 00:28:34,970
be involved by Marrakesh

537
00:28:31,340 --> 00:28:37,970
we can say for the coat that's there is

538
00:28:34,970 --> 00:28:41,450
a flag in the response that this flag is

539
00:28:37,970 --> 00:28:44,690
used to to make different data types and

540
00:28:41,450 --> 00:28:47,960
the perform different operation if that

541
00:28:44,690 --> 00:28:51,590
flag is essential service agents have

542
00:28:47,960 --> 00:28:55,879
the distillation operation will

543
00:28:51,590 --> 00:29:00,529
eventually be performed automatically so

544
00:28:55,879 --> 00:29:03,678
we can manage shorts ever as long as

545
00:29:00,529 --> 00:29:06,289
someone connects to our server

546
00:29:03,679 --> 00:29:10,669
the militia server will return pillows

547
00:29:06,289 --> 00:29:14,779
back and felony memcached clinton will

548
00:29:10,669 --> 00:29:17,840
perform safer unsafe installations

549
00:29:14,779 --> 00:29:22,279
awakened skilled arbitrary and comment

550
00:29:17,840 --> 00:29:25,220
on the target let's take a look at your

551
00:29:22,279 --> 00:29:29,690
data source in europe such as the

552
00:29:25,220 --> 00:29:33,980
attacker cloud service bypass the SS of

553
00:29:29,690 --> 00:29:38,659
defense and fishing first the way come

554
00:29:33,980 --> 00:29:41,799
perform phishing attack any claims canal

555
00:29:38,659 --> 00:29:44,840
to our militia servers will be attached

556
00:29:41,799 --> 00:29:47,809
way comfort our network connection

557
00:29:44,840 --> 00:29:54,649
string on the github or we can perform

558
00:29:47,809 --> 00:29:57,379
social engineer attack second we can

559
00:29:54,649 --> 00:30:01,039
attack cloud servers many cloud service

560
00:29:57,379 --> 00:30:04,428
provider abilities that customer can

561
00:30:01,039 --> 00:30:07,009
connect to their private database and

562
00:30:04,429 --> 00:30:10,700
the server adjust is controlled by them

563
00:30:07,009 --> 00:30:14,330
if we set the IP adjust to the manager

564
00:30:10,700 --> 00:30:17,990
server's IP that's is a public I'm here

565
00:30:14,330 --> 00:30:22,279
so cloud service will be attacker when

566
00:30:17,990 --> 00:30:25,039
it's killing us to us so one way

567
00:30:22,279 --> 00:30:28,070
provinces of attack most application

568
00:30:25,039 --> 00:30:30,619
will be forbidden to connect to the

569
00:30:28,070 --> 00:30:34,309
internet network instantly God's

570
00:30:30,619 --> 00:30:37,509
offering the public network so well so

571
00:30:34,309 --> 00:30:40,519
when we set up public network address

572
00:30:37,509 --> 00:30:44,660
where we are ignore as a self defense

573
00:30:40,519 --> 00:30:48,080
and the King are say there are

574
00:30:44,660 --> 00:30:50,480
scanner on the internet which scanning

575
00:30:48,080 --> 00:30:53,899
or attempt in order to verify the

576
00:30:50,480 --> 00:30:56,900
voluminous scanner will try to connect

577
00:30:53,900 --> 00:31:00,740
to the target service if there is a

578
00:30:56,900 --> 00:31:03,500
attacker to attack our scanner connect

579
00:31:00,740 --> 00:31:07,550
our server we can exclude optional

580
00:31:03,500 --> 00:31:10,240
comment under a target this time of

581
00:31:07,550 --> 00:31:14,240
Elimelech cannot only be explored

582
00:31:10,240 --> 00:31:18,170
emanuel water at a casino but also can

583
00:31:14,240 --> 00:31:20,570
be used as a gadget we can find a gadget

584
00:31:18,170 --> 00:31:24,130
which you can send them occasionally

585
00:31:20,570 --> 00:31:28,610
requested to us anything

586
00:31:24,130 --> 00:31:32,120
and soon we'll send a memory request to

587
00:31:28,610 --> 00:31:34,850
us will be affected 9 kg is adjustable

588
00:31:32,120 --> 00:31:37,399
for the chocolate there are many claims

589
00:31:34,850 --> 00:31:42,199
will be exploited by this attack

590
00:31:37,400 --> 00:31:44,660
technique okay that's the way we will

591
00:31:42,200 --> 00:31:48,310
discuss the future and the interception

592
00:31:44,660 --> 00:31:51,650
in Java it's a very widely used

593
00:31:48,310 --> 00:31:54,909
technology in java application because

594
00:31:51,650 --> 00:31:58,220
most of the future can be enabling a

595
00:31:54,910 --> 00:32:01,310
application configure file without any

596
00:31:58,220 --> 00:32:04,570
code which makes it difficult to find

597
00:32:01,310 --> 00:32:08,179
security vulnerabilities by code review

598
00:32:04,570 --> 00:32:11,360
if the variability exists in the jar

599
00:32:08,180 --> 00:32:16,300
it's more hard to find sounds crazy

600
00:32:11,360 --> 00:32:20,570
issues for example the Spring Framework

601
00:32:16,300 --> 00:32:23,750
in the development process we just need

602
00:32:20,570 --> 00:32:26,800
to configure found to enable the HTTP

603
00:32:23,750 --> 00:32:30,410
you work due to wake and find any

604
00:32:26,800 --> 00:32:33,310
suspicious operation in the cold area it

605
00:32:30,410 --> 00:32:39,700
will greatly increase the difficult of

606
00:32:33,310 --> 00:32:43,929
Secrets check on this variability can't

607
00:32:39,700 --> 00:32:46,940
escape the creation of our platform wake

608
00:32:43,930 --> 00:32:50,320
can follow that there is a distillation

609
00:32:46,940 --> 00:32:54,680
operation in the job package named

610
00:32:50,320 --> 00:32:56,689
hodgiedot Spring Framework thoughts pure

611
00:32:54,680 --> 00:33:01,190
emoji we have found for the

612
00:32:56,690 --> 00:33:05,810
speakers the top layer is HDTV request

613
00:33:01,190 --> 00:33:09,140
the Honda Delta is interceptor Mustafa

614
00:33:05,810 --> 00:33:12,530
spree MVC or HDV request will be

615
00:33:09,140 --> 00:33:15,350
processed by this interceptor and will

616
00:33:12,530 --> 00:33:20,750
invoke a dangerous fellow she named the

617
00:33:15,350 --> 00:33:23,780
reed objet this is a PSA for spring RC

618
00:33:20,750 --> 00:33:26,690
way can you loosen that HTTP request

619
00:33:23,780 --> 00:33:30,770
with some payload and modify the

620
00:33:26,690 --> 00:33:33,770
continent have to exchange jet which

621
00:33:30,770 --> 00:33:37,879
will be able to exclude actual comments

622
00:33:33,770 --> 00:33:43,639
on the target it will affect the latest

623
00:33:37,880 --> 00:33:47,630
version of spring MVC okay our scanner

624
00:33:43,640 --> 00:33:50,210
also produce a lot of scanning loss that

625
00:33:47,630 --> 00:33:53,480
we are you walk high-risk a function in

626
00:33:50,210 --> 00:33:56,450
the jaw most of the developers will you

627
00:33:53,480 --> 00:34:00,620
walk them to the process unsafe data but

628
00:33:56,450 --> 00:34:03,590
they know now seeing it before there is

629
00:34:00,620 --> 00:34:07,340
a control board data interlaced function

630
00:34:03,590 --> 00:34:12,650
it will lead to many secrets issues such

631
00:34:07,340 --> 00:34:17,029
as remote commands is closing SSL and

632
00:34:12,650 --> 00:34:20,870
exercise many commercial products don't

633
00:34:17,030 --> 00:34:24,440
cover this arrow and have no ability to

634
00:34:20,870 --> 00:34:27,710
analyze a bit called in jar so we can

635
00:34:24,440 --> 00:34:30,710
format this can you lost to commercial

636
00:34:27,710 --> 00:34:33,949
products on security research for

637
00:34:30,710 --> 00:34:37,330
security check which can greatly expand

638
00:34:33,949 --> 00:34:41,569
our security coverage

639
00:34:37,330 --> 00:34:44,770
okay let's Samara Java how is widely

640
00:34:41,570 --> 00:34:47,540
used in java application most of

641
00:34:44,770 --> 00:34:50,360
commercial products and security

642
00:34:47,540 --> 00:34:54,650
research don't cover this arrow for

643
00:34:50,360 --> 00:34:57,590
screeds check but only focus on java

644
00:34:54,650 --> 00:35:01,790
caldera and caricatures chance so we

645
00:34:57,590 --> 00:35:04,070
know nothing in our tips research we

646
00:35:01,790 --> 00:35:07,490
found many high risk availability in

647
00:35:04,070 --> 00:35:11,600
java our cow so we need to pay more

648
00:35:07,490 --> 00:35:14,419
attention to is in the launcher planter

649
00:35:11,600 --> 00:35:17,049
study wave found that there are our soul

650
00:35:14,420 --> 00:35:20,840
some points that we needed to improve

651
00:35:17,050 --> 00:35:24,470
optional way many focus on how to find

652
00:35:20,840 --> 00:35:29,080
more abilities more efficiency but there

653
00:35:24,470 --> 00:35:34,399
are still more many fall spoilage we

654
00:35:29,080 --> 00:35:36,830
will class or high risk and high risk on

655
00:35:34,400 --> 00:35:44,930
a village to public it for security

656
00:35:36,830 --> 00:35:49,490
research and the secret sauce ok kanonji

657
00:35:44,930 --> 00:35:51,950
meant add led to thanks to PhD PhDs for

658
00:35:49,490 --> 00:35:56,299
giving us an opportunity to share our

659
00:35:51,950 --> 00:35:58,250
research sense to Apache kagra fee for

660
00:35:56,300 --> 00:36:07,340
this useful to us

661
00:35:58,250 --> 00:36:10,490
that's all thank you attention so you

662
00:36:07,340 --> 00:36:14,600
guys have any questions so you can raise

663
00:36:10,490 --> 00:36:17,149
your hands up ok thank you hello my name

664
00:36:14,600 --> 00:36:21,680
is Surya thanks for the report that was

665
00:36:17,150 --> 00:36:24,440
quite interesting as far as I know there

666
00:36:21,680 --> 00:36:27,490
is quite a hot moderation before

667
00:36:24,440 --> 00:36:31,550
entering a job for some maven central

668
00:36:27,490 --> 00:36:36,189
repositories isn't security check

669
00:36:31,550 --> 00:36:36,190
included in this kind of moderation

670
00:36:48,490 --> 00:37:01,660
video questions you say if if any

671
00:36:58,450 --> 00:37:09,069
security check in the main repository so

672
00:37:01,660 --> 00:37:11,319
so and then how to decide if the job can

673
00:37:09,070 --> 00:37:15,000
be trusted or not how do you think what

674
00:37:11,320 --> 00:37:17,130
if the job can be trusted or not oh if

675
00:37:15,000 --> 00:37:21,670
for these questions

676
00:37:17,130 --> 00:37:24,280
mmm we are platform mainly focus on the

677
00:37:21,670 --> 00:37:27,670
some high risks vulnerabilities in our

678
00:37:24,280 --> 00:37:32,950
platform if we put these scanners in the

679
00:37:27,670 --> 00:37:36,670
maven repository we decide that we first

680
00:37:32,950 --> 00:37:40,118
we will decode the code up the jar files

681
00:37:36,670 --> 00:37:43,900
and get the source code from the main

682
00:37:40,119 --> 00:37:47,680
repository and then we will scan in the

683
00:37:43,900 --> 00:37:51,580
whole whole source code to find out if

684
00:37:47,680 --> 00:37:56,290
there any has vulnerabilities such as

685
00:37:51,580 --> 00:37:59,950
the wrong time excuse in the in the Java

686
00:37:56,290 --> 00:38:02,970
in the jar jar files or some SSL or some

687
00:37:59,950 --> 00:38:08,200
HTTP requests in the in the jar file and

688
00:38:02,970 --> 00:38:10,839
these these this code could cause the

689
00:38:08,200 --> 00:38:14,680
remote command exclusion and we will

690
00:38:10,840 --> 00:38:18,310
determine if there is a just Java files

691
00:38:14,680 --> 00:38:22,118
in the maven repository but is in the

692
00:38:18,310 --> 00:38:27,390
private repository in the company so so

693
00:38:22,119 --> 00:38:31,840
we will download that yeah okay

694
00:38:27,390 --> 00:38:33,759
Thank You Phil yeah we have a present

695
00:38:31,840 --> 00:38:35,619
for everybody so if you have any

696
00:38:33,760 --> 00:38:38,080
questions and raise our hands out you

697
00:38:35,619 --> 00:38:43,970
can get the t-shirt of the positive half

698
00:38:38,080 --> 00:38:46,640
days so anyone anyone have

699
00:38:43,970 --> 00:38:49,100
questions or just discuss talk about

700
00:38:46,640 --> 00:39:00,319
everything you can talk about it it's

701
00:38:49,100 --> 00:39:03,509
okay it's very okay anyone okay so thank

702
00:39:00,320 --> 00:39:06,219
you thank you for here

703
00:39:03,510 --> 00:39:06,219
[Music]

