1
00:00:00,000 --> 00:00:07,230
for the next presentation is with us to
talk about a web application firewall

2
00:00:07,230 --> 00:00:16,198
bypassing yes

3
00:00:16,199 --> 00:00:19,199
hello and welcome everybody to my talk

4
00:00:20,010 --> 00:00:24,600
web application firewall by passing an
approach for pence

5
00:00:24,600 --> 00:00:29,429
my name is kal-el visual I'm working for
the droid in the cyber risk services

6
00:00:29,429 --> 00:00:33,510
team and to penetration tests

7
00:00:33,510 --> 00:00:36,839
well how did I come to this topic

8
00:00:37,350 --> 00:00:43,350
I was at the end of my studies for my
bachelor studies and had to find a topic

9
00:00:43,350 --> 00:00:51,629
for the bachelor thesis and at the same
time we had to web application projects

10
00:00:51,629 --> 00:00:58,170
web application pet projects which were
secured by a web so it was very

11
00:00:58,170 --> 00:01:03,420
important for us to learn more about by
passing over and as you all know the

12
00:01:03,420 --> 00:01:08,970
goal of penetration test is to assess
web application and find out how

13
00:01:08,970 --> 00:01:15,000
vulnerable letís and by placing left is
a must if he wants to do that

14
00:01:15,000 --> 00:01:24,119
so by placing a lot well why the number
of web application firewall web

15
00:01:24,119 --> 00:01:28,979
application firewall is increasing more
and more companies tend to use them and

16
00:01:28,979 --> 00:01:30,450
crews brother

17
00:01:30,450 --> 00:01:35,939
the problem is that let's make
penetration tests more difficult

18
00:01:35,939 --> 00:01:41,850
so there are our enemy as a penetration
testing and attempting to bypass the

19
00:01:41,850 --> 00:01:49,020
wife is very important as i said to know
to get to know how vulnerable the

20
00:01:49,020 --> 00:01:53,070
application application is so again

21
00:01:53,070 --> 00:01:57,270
summarizing what is the main goal of was
what was

22
00:01:57,270 --> 00:02:00,750
the main goal of my better features of
my research on this park

23
00:02:00,750 --> 00:02:06,119
it is to provide a practical approach
for penetration testers which helps to

24
00:02:06,119 --> 00:02:08,550
ensure accurate results

25
00:02:08,550 --> 00:02:14,220
so let's start to dive into web
application firewalls

26
00:02:15,150 --> 00:02:21,299
first of all why did we need web
application firewalls in the old days

27
00:02:21,900 --> 00:02:26,610
companies just use firewalls and
intrusion detection and prevention

28
00:02:26,610 --> 00:02:27,599
systems

29
00:02:27,599 --> 00:02:33,359
the problem with these is that they use
that they operate on the transport or

30
00:02:33,360 --> 00:02:37,799
the network layer so they were
inspecting packets and inspecting

31
00:02:37,799 --> 00:02:40,799
pickets is not an easy task

32
00:02:41,430 --> 00:02:48,959
so what we needed and and the problem of
them also was that they had many false

33
00:02:48,959 --> 00:02:52,739
positives or they were but we're very
weak

34
00:02:52,739 --> 00:02:58,799
so what we needed is in is a firewall
which operates on the application layer

35
00:02:58,799 --> 00:03:02,280
so that it understands traffic much
better

36
00:03:02,280 --> 00:03:09,000
so what does a web do it protects the
web application by adding a security

37
00:03:09,000 --> 00:03:13,829
layer in front of it and it sends
between the user and the server and

38
00:03:13,829 --> 00:03:17,910
inspects the traffic if it finds
miniatures traffic

39
00:03:17,910 --> 00:03:27,180
it blocks it let's come to the
functionality of the way so at the

40
00:03:27,180 --> 00:03:34,560
beginning we have been incoming requests
and after the request has reached the

41
00:03:34,560 --> 00:03:35,130
web

42
00:03:35,130 --> 00:03:39,900
the first thing that happens is that the
preprocessor around the preprocessor on

43
00:03:39,900 --> 00:03:43,169
decides whether a request will be
processed further

44
00:03:43,680 --> 00:03:50,160
oh all whether it will be directly
forwarded to the web server after that

45
00:03:50,160 --> 00:03:57,510
normalization functions are applied so
there's there are many difference and

46
00:03:57,510 --> 00:04:03,298
forms of input we have X encoding we
have URL encoding and so on and to

47
00:04:03,299 --> 00:04:04,390
normalize it and

48
00:04:04,390 --> 00:04:08,019
analyzes we need the web applies an
organization functions

49
00:04:09,400 --> 00:04:17,380
after that the input is very data so the
input of the user is running against

50
00:04:17,380 --> 00:04:24,460
some rules and if there is a match the
input is either locked or forward to the

51
00:04:24,460 --> 00:04:27,549
web server as seen in this last step

52
00:04:28,090 --> 00:04:36,520
yes let's dive into the normalization
functions to get an idea of them

53
00:04:36,520 --> 00:04:40,090
what is the proposed of normalization
functions

54
00:04:40,090 --> 00:04:45,400
one of them is to simplify the writing
of roots so if we have an administrator

55
00:04:45,400 --> 00:04:49,419
who is administrating a wife as you want
to write some rules

56
00:04:49,419 --> 00:04:53,710
he doesn't have to learn about your l
encoding about about text encoding and

57
00:04:53,710 --> 00:05:00,370
about all the different encoding set
that are available but he just needs to

58
00:05:00,370 --> 00:05:02,260
know about them

59
00:05:02,260 --> 00:05:05,530
the escalators yes

60
00:05:05,530 --> 00:05:11,859
so for example we have here for
different normalization functions they

61
00:05:11,860 --> 00:05:16,540
are used by much security which is a
very famous open sauce

62
00:05:16,540 --> 00:05:22,030
web application firewall for instance we
have the function compressed whitespace

63
00:05:22,030 --> 00:05:26,200
the compressed white space function
converts every white space character

64
00:05:26,200 --> 00:05:31,000
like and offline a new line and so on to
a normal space

65
00:05:31,660 --> 00:05:37,660
we have the hex decode function and as
it states it decodes a hex encoded

66
00:05:37,660 --> 00:05:38,890
string into asking

67
00:05:38,890 --> 00:05:44,020
we have the lowercase function which
converts all characters to lowercase

68
00:05:44,020 --> 00:05:47,289
so if i want to write a rule I don't
have to think about

69
00:05:47,289 --> 00:05:53,500
uppercase and lowercase letters and we
have the URL decode function which

70
00:05:53,500 --> 00:05:56,560
decodes the URL encoded string

71
00:05:56,560 --> 00:06:01,330
ok down a lot more functions but just to
get an idea

72
00:06:01,930 --> 00:06:05,020
I've chosen the most easy

73
00:06:05,020 --> 00:06:07,520
ok

74
00:06:07,520 --> 00:06:13,849
coming to the input validation for the
input validation it is important to know

75
00:06:13,849 --> 00:06:20,509
that left use different security models
and security model defines how the rules

76
00:06:20,509 --> 00:06:28,220
are process or how the rules are used
these rules mostly consists of regular

77
00:06:28,220 --> 00:06:34,819
expressions and there are three common
security models of these other three

78
00:06:34,819 --> 00:06:36,319
that are available

79
00:06:36,319 --> 00:06:41,389
there's a positive security model the
negative security model and a hypocrite

80
00:06:41,389 --> 00:06:42,590
model

81
00:06:42,590 --> 00:06:47,090
maybe

82
00:06:47,090 --> 00:06:50,929
first of all what is a positive security
what is the negative security moment the

83
00:06:50,930 --> 00:06:54,229
positive security model is maybe also
known as white listing

84
00:06:54,229 --> 00:06:57,770
so to summarize what does it do deny all
but not good

85
00:06:57,770 --> 00:07:02,930
so we have a list of good input and
every employee user input that comes to

86
00:07:02,930 --> 00:07:09,590
the web is try to be matched with these
rules if there is a match then the input

87
00:07:09,590 --> 00:07:15,799
is forward and if it is denied then and
if it is if there is no match if there

88
00:07:15,800 --> 00:07:21,500
wasn't a rule that applies on it then it
is denied the advantage of the

89
00:07:21,500 --> 00:07:27,050
advantages of this positive security
model is that it prevents 0 days

90
00:07:27,050 --> 00:07:32,060
zero-day exploits so if there is a new
exploit on the market if there is any

91
00:07:32,060 --> 00:07:37,520
way exploit found by a hacker and
probably it won't be a useful against a

92
00:07:37,520 --> 00:07:42,469
positive security model because we have
to find what is okay and everything that

93
00:07:42,469 --> 00:07:49,400
isn't okay will be denied and it is more
secure than a black this model

94
00:07:49,400 --> 00:07:55,429
ok we will just be a minute talk about
the blacklist part of the problem with

95
00:07:55,430 --> 00:07:59,960
the white listing model or the positive
security model is that if you want to

96
00:07:59,960 --> 00:08:05,448
write rules for the weft you have to
know what an application does how it

97
00:08:05,449 --> 00:08:09,259
works and you have to know every
function at every parameter and write

98
00:08:09,259 --> 00:08:14,240
rules for it so it's very so you need a
very comprehensive understanding of the

99
00:08:14,240 --> 00:08:18,030
application at the second and also big
problem

100
00:08:18,030 --> 00:08:22,890
it is very time consuming so if
someone's rights rules for an

101
00:08:22,890 --> 00:08:27,870
application you will need a lot of time
and you can use these rules only for

102
00:08:27,870 --> 00:08:33,600
this application then we have the
negative security model which is also

103
00:08:33,600 --> 00:08:39,180
known as blacklisting your blacklist to
summarize it allow all but known that

104
00:08:39,179 --> 00:08:46,349
so we have a list of bad payloads of bad
inputs and every user input stride is it

105
00:08:46,350 --> 00:08:49,860
we try to match every user input with
this list if there is a match

106
00:08:49,860 --> 00:08:53,910
it is denied and if we don't have a
match it is forwarded to the back end

107
00:08:56,520 --> 00:09:00,300
what is good about the negative security
model is that it mostly comes shipped

108
00:09:00,300 --> 00:09:01,109
with the web

109
00:09:01,110 --> 00:09:06,150
so if you get a web . since most
security or by Iowa from a vendor you

110
00:09:06,150 --> 00:09:11,100
get a blacklist ultimately with
automatically with it and other things

111
00:09:11,100 --> 00:09:15,330
that you can adopt it very fast so you
just have to deploy it and it will be

112
00:09:15,330 --> 00:09:17,850
you ended it will work

113
00:09:17,850 --> 00:09:23,700
also you don't need to know a lot about
it you don't need to know anything about

114
00:09:23,700 --> 00:09:29,010
writing rules or regular expressions you
can just apply it and use it and a very

115
00:09:29,010 --> 00:09:34,050
big advantage is that it can protect
several applications at once

116
00:09:34,050 --> 00:09:40,199
so let's say you have one you have a web
server with several applications then

117
00:09:40,200 --> 00:09:45,030
you don't have to write rules for every
application and so you save a lot a lot

118
00:09:45,030 --> 00:09:46,110
of time

119
00:09:46,110 --> 00:09:52,650
the problem with the black list is that
it tends to false positives so we might

120
00:09:52,650 --> 00:09:55,920
have a user who is typing in something
very normal

121
00:09:55,920 --> 00:10:00,449
but it gets blocked by the web
application firewall and then use

122
00:10:00,450 --> 00:10:04,350
abilities decrease and as you know
there's always always stare down between

123
00:10:04,350 --> 00:10:08,370
usability and security and we have to
find a good

124
00:10:08,370 --> 00:10:08,740
the

125
00:10:08,740 --> 00:10:15,790
a good middle the other thing is that it
is resource consuming because you have a

126
00:10:15,790 --> 00:10:22,120
very big list of payload you know that
javascript and SQL for instance is very

127
00:10:22,120 --> 00:10:27,339
flexible and you can use a lot a lot of
different forms for this great injection

128
00:10:27,339 --> 00:10:29,290
or JavaScript injection

129
00:10:29,290 --> 00:10:35,050
so you have a very long list and if you
use a web application firewall which is

130
00:10:35,050 --> 00:10:36,459
also on the web server

131
00:10:36,459 --> 00:10:44,439
it might be a problem ok let's come to
the bypassing methods and techniques

132
00:10:44,950 --> 00:10:51,370
so the first thing I did was to
categorize the methods and techniques to

133
00:10:51,370 --> 00:10:53,260
get a better overview

134
00:10:53,260 --> 00:10:56,350
we have three different categories

135
00:10:57,100 --> 00:11:02,740
the first one is the preprocessor
exploitation the preprocessor

136
00:11:02,740 --> 00:11:08,740
exploitation in in this category
category we try to make the web

137
00:11:08,740 --> 00:11:14,950
skip the input validation so we sent our
input and the web doesn't even try to

138
00:11:14,950 --> 00:11:16,420
validate it

139
00:11:16,420 --> 00:11:22,930
but forward to it it's directly to the
web server in the second category we

140
00:11:22,930 --> 00:11:23,680
have

141
00:11:23,680 --> 00:11:29,199
ok it's called impedance mismatch with
which is maybe not directly the easy to

142
00:11:29,200 --> 00:11:35,200
understand but what does it mean it
means that we try to find you an input

143
00:11:35,200 --> 00:11:41,290
that the web interprets different
different than the back at so there is a

144
00:11:41,290 --> 00:11:46,480
into that so there is a mismatch between
the interpretation of the web and the

145
00:11:46,480 --> 00:11:52,839
interpretation of the back end and in
the last category which and it is the

146
00:11:52,839 --> 00:11:54,070
one I think

147
00:11:54,070 --> 00:12:00,190
which is the one with the most success
is the rules set by passing so we try to

148
00:12:00,190 --> 00:12:05,920
find a payload that is not known to the
left and then by passive

149
00:12:07,540 --> 00:12:13,329
so let's get to the examples of some
methods and techniques first of all

150
00:12:13,330 --> 00:12:16,000
three process of exploitation

151
00:12:16,000 --> 00:12:20,050
this technique is called are

152
00:12:20,050 --> 00:12:24,310
I've got it skipping parameter
verification for instance we are we have

153
00:12:24,310 --> 00:12:30,369
PHP and PHP removes whitespace
characters from parameter names

154
00:12:30,880 --> 00:12:40,270
so if we have this request as you can
see we have a person 20 which is a space

155
00:12:40,270 --> 00:12:43,060
URL encoded and then product ID

156
00:12:43,060 --> 00:12:49,750
what happened had happens at the web the
web sees space product ID then it tries

157
00:12:49,750 --> 00:12:55,000
to match it with all the functions in
the white list of the parameters and the

158
00:12:55,000 --> 00:12:56,920
brightest and doesn't find any

159
00:12:56,920 --> 00:13:02,290
and then it forwards it to the back end
and what does the back end - if we have

160
00:13:02,290 --> 00:13:10,390
PHP it just removes the space and sees
product ID and interprets it the same

161
00:13:10,390 --> 00:13:16,510
thing is with asp asp removes person
characters if it is not followed by to

162
00:13:16,510 --> 00:13:23,560
hexadecimal digits so also here we have
a percent and then product ID the back

163
00:13:23,560 --> 00:13:27,160
and sees product ID and the web sees
something else

164
00:13:27,760 --> 00:13:32,710
it sees person product ID so if we have
a wife which does not reject unknown

165
00:13:32,710 --> 00:13:36,160
parameters we might have found a vibrant

166
00:13:36,160 --> 00:13:46,510
another thing is IP address spoofing a
wife may be configured to trust certain

167
00:13:46,510 --> 00:13:51,550
IP addresses and if a request comes from
a trusted IP address

168
00:13:51,550 --> 00:13:56,620
it does not even validate the input but
just four words it's directly to the

169
00:13:56,620 --> 00:13:57,640
back end

170
00:13:57,640 --> 00:14:03,550
so if the web program el del apart

171
00:14:04,089 --> 00:14:11,620
did a mistake and try to retrieve the IP
address from one of these head us then

172
00:14:11,620 --> 00:14:18,009
the web will also be bypassed why
because of these four had us the X

173
00:14:18,009 --> 00:14:23,980
originating IP exploded for its remote
IP and X remote address are all in

174
00:14:23,980 --> 00:14:29,259
control of the user so i can just add
them to my request add an internal IP

175
00:14:29,259 --> 00:14:36,999
address like look lost or won 27 points
your . 0.1 and hope that the web trusts

176
00:14:36,999 --> 00:14:39,249
my regress and directly forward

177
00:14:39,249 --> 00:14:49,089
another thing another technique is the
male form at HTTP method

178
00:14:50,319 --> 00:14:57,339
so if the web server is misconfigured
and accepts malformed HTTP methods as

179
00:14:57,339 --> 00:14:59,019
shown in the example

180
00:14:59,019 --> 00:15:05,620
hello one two three I don't have to get
all posts but hello 123 and there are

181
00:15:05,620 --> 00:15:11,949
and the web server answered me where the
status of 200 so it was ok so if your

182
00:15:11,949 --> 00:15:16,809
wife is configured to only inspect get
or post parametres it can also be

183
00:15:16,809 --> 00:15:25,749
bypassed with this method and the last
example for this category is overloading

184
00:15:25,749 --> 00:15:26,709
the web

185
00:15:26,709 --> 00:15:35,229
so what we try in this step is to just
send so many requests that the web

186
00:15:35,230 --> 00:15:36,910
cannot handle it anymore

187
00:15:36,910 --> 00:15:42,999
and especially embedded web application
firewalls are sometimes configured in

188
00:15:42,999 --> 00:15:49,720
such a way that if the load on the web
server is very heavy that it just skips

189
00:15:49,720 --> 00:15:55,360
input so that it just skips request if
it cannot handle it anymore

190
00:15:55,360 --> 00:15:58,360
why do they do that - not decrease of
the usability

191
00:16:00,089 --> 00:16:06,720
so what we can do is just sent a request
with malicious input very often and hope

192
00:16:06,720 --> 00:16:09,720
that some of it will pass through

193
00:16:10,649 --> 00:16:16,769
ok let's come to the second category
impedance mismatch again the impedance

194
00:16:16,769 --> 00:16:22,889
mismatch is too is the attempt to make
the web interpret our input differently

195
00:16:22,889 --> 00:16:32,519
than the back and one very interesting
method I i find is the HTTP parameter

196
00:16:32,519 --> 00:16:33,449
pollution

197
00:16:33,449 --> 00:16:40,170
HTTP parameter pollution is the sending
a request with the number of parameters

198
00:16:40,170 --> 00:16:42,089
sharing the same name

199
00:16:42,089 --> 00:16:49,199
for instance as we have in this request
we have the first permits our product ID

200
00:16:49,199 --> 00:16:53,550
equals one and product ID equals two

201
00:16:53,550 --> 00:17:00,990
and if we test this on different
technologies we will see that they

202
00:17:00,990 --> 00:17:04,289
interpret this request differently

203
00:17:04,289 --> 00:17:09,299
for instance asp.net concatenates both
with a comma

204
00:17:09,809 --> 00:17:13,799
so what it receives this product ID
equals one , -

205
00:17:13,799 --> 00:17:21,959
JSP uses the first appearance so that so
it receives with the one and PHP uses

206
00:17:21,959 --> 00:17:23,339
the last occurrence

207
00:17:23,339 --> 00:17:27,448
so the values - how does that help us

208
00:17:27,959 --> 00:17:33,299
let's take the following payload select
1 comma 2 comma 3 from table

209
00:17:33,960 --> 00:17:39,210
I think everywhere everywhere that is on
the market will block this input as it

210
00:17:39,210 --> 00:17:44,640
is clearly SQL and it will think there's
an SQL injection a locket

211
00:17:45,149 --> 00:17:52,260
but what happens if we divide this input
with we send product ID equals select

212
00:17:52,260 --> 00:17:57,059
one and product ID equals 2 , 3 from
table

213
00:17:57,059 --> 00:18:02,279
what does the web seen the web sees
product ID select one tries to match

214
00:18:02,279 --> 00:18:08,429
select one with it rules with its rules
and does not find a match and then tries

215
00:18:08,429 --> 00:18:13,440
the s/m two , three from table tries to
match it against

216
00:18:13,440 --> 00:18:17,429
the rules again and does not find a
match but what happened what happens at

217
00:18:17,429 --> 00:18:23,250
the back and if we have a speed net both
values will be concatenated with a comma

218
00:18:23,850 --> 00:18:29,730
so in the end what the backend receives
is this pay . that would have been

219
00:18:29,730 --> 00:18:37,139
otherwise blocked and this was a bypass
of i think in 2009 of the most security

220
00:18:37,139 --> 00:18:40,229
so that might help you

221
00:18:40,799 --> 00:18:50,309
another very similar technique is the
HTTP parameter fragmentation here we try

222
00:18:50,309 --> 00:18:57,809
to split our pay . our injection or our
process scripting between different

223
00:18:57,809 --> 00:19:04,139
parametres first of all let's assume
that we have this SQL query in the back

224
00:19:04,139 --> 00:19:12,000
and we have select from table where you
ID equals and then our input and PID

225
00:19:12,000 --> 00:19:14,370
equals and then again our input

226
00:19:14,370 --> 00:19:23,219
so what we can do is for you ID we send
the payload for the input 1 and then

227
00:19:23,220 --> 00:19:30,269
space which is a plus at which can be
used with a plus can be used for a space

228
00:19:30,269 --> 00:19:36,000
it's from in many browsers so it's a
space one space union and then the

229
00:19:36,000 --> 00:19:42,600
beginning of a , and then PID the end of
a , select one , select two , select

230
00:19:42,600 --> 00:19:43,678
come

231
00:19:43,679 --> 00:19:51,539
sorry select 1 comma 2 comma 3 so what
happens at the back at the back and

232
00:19:51,539 --> 00:19:56,908
receives the following string 1 Union
and then a comma so it does not

233
00:19:56,909 --> 00:20:05,460
interpret this and then one Union select
1 comma 2 comma 3 the wife only sees you

234
00:20:05,460 --> 00:20:12,000
i only sees this pay . 1 plus union and
see our space unit sorry and sees this

235
00:20:12,000 --> 00:20:17,340
payload select 1 comma 2 comma 3 and
tries to match every part of value

236
00:20:17,340 --> 00:20:18,220
against

237
00:20:18,220 --> 00:20:24,039
the ruleset doesn't find any match so it
followed it to the back end and the back

238
00:20:24,039 --> 00:20:27,640
and interprets it like this and we have
our SQL injection

239
00:20:27,640 --> 00:20:40,480
ok and the last example for impedance
mismatch is the wrl encoding as you know

240
00:20:40,480 --> 00:20:45,490
the web has users normalization
functions to standardise of the input

241
00:20:45,490 --> 00:20:52,929
and the web if it's finds a URL encoded
string what it does is that it in

242
00:20:52,929 --> 00:20:55,990
transform it transforms it into a ski

243
00:20:55,990 --> 00:20:59,860
so what we can try and hope for is that
the web

244
00:20:59,860 --> 00:21:03,760
d coats the URL encoded characters only
once

245
00:21:03,760 --> 00:21:14,200
so we UL we WL and code a character for
instance as if we encode s we get person

246
00:21:14,200 --> 00:21:15,460
73

247
00:21:15,460 --> 00:21:22,299
what we don't then do is to convert
person 73 again you are in URL and get

248
00:21:22,299 --> 00:21:25,809
person 25-person thirty-seven percent 33

249
00:21:25,809 --> 00:21:33,520
if we now at this into our payload one
Union select 1 comma 2 comma 3 and

250
00:21:33,520 --> 00:21:40,539
substitute the s with our wrl encoded s
what we can hope for is that the web URL

251
00:21:40,539 --> 00:21:47,740
decodes it once and then gets a person
73 forwards it to the back out and the

252
00:21:47,740 --> 00:21:49,210
back and then

253
00:21:49,210 --> 00:21:53,620
uld coats it again and then we have our
people

254
00:21:53,620 --> 00:22:02,320
ok and the last category which is quite
simple butts and which is either as I

255
00:22:02,320 --> 00:22:09,039
think the most successful one is the
rules set by passing so for the rules

256
00:22:09,039 --> 00:22:14,500
set by pissing we have two main methods
first one which is very primitive but is

257
00:22:14,500 --> 00:22:18,340
the brute forcing by any weight and
humor a ting payloads

258
00:22:18,340 --> 00:22:22,570
so we have a list of excess SP . and the
list of SQL injection payloads and you

259
00:22:22,570 --> 00:22:29,720
just send them and hope that one of them
will work won't be very successful but

260
00:22:29,720 --> 00:22:34,400
the second method is maybe the most
successful one is the reverse

261
00:22:34,400 --> 00:22:39,560
engineering of the ruleset the reverse
engineering of the ruleset so where we

262
00:22:39,560 --> 00:22:42,560
try to find out how is the house

263
00:22:42,560 --> 00:22:46,639
how does the rule set of the weft look
like and if we know how the rules that

264
00:22:46,640 --> 00:22:55,160
looks like we can then attempt to find
and exploit or a payload that isn't so

265
00:22:55,160 --> 00:22:59,360
based on this approach based on these
techniques there

266
00:22:59,360 --> 00:23:05,240
I have developed an approach for
penetration testers so they are very

267
00:23:05,240 --> 00:23:09,230
similar to the faces of the penetration
test starting with the reconnaissance

268
00:23:09,230 --> 00:23:15,500
face and the end to post exploitation
and so on and these faces are divided

269
00:23:15,500 --> 00:23:20,900
into six phases but we have a face 0
which may not always be possible

270
00:23:22,250 --> 00:23:28,850
does any one of you have an idea what
they'd 0 might be what should be the

271
00:23:28,850 --> 00:23:35,419
first thing the penetration test they
should do if he has an application with

272
00:23:35,420 --> 00:23:41,360
a web application firewall before it
please

273
00:23:42,110 --> 00:23:46,639
okay that's very good

274
00:23:46,640 --> 00:23:50,630
but even before that before I
fingerprints and before I gather

275
00:23:50,630 --> 00:23:51,500
information

276
00:23:51,500 --> 00:23:55,880
yes correct but it and after the
agreement

277
00:23:56,630 --> 00:24:01,490
huh I didn't understand

278
00:24:02,470 --> 00:24:10,090
let me just tell you he tries to ask the
customer to disable the web very easy

279
00:24:10,090 --> 00:24:10,870
right

280
00:24:10,870 --> 00:24:16,360
no but seriously what is the main
objective of the penetration test we try

281
00:24:16,360 --> 00:24:21,428
to find out how vulnerable a web
application is and what is the best way

282
00:24:21,429 --> 00:24:26,650
to do that to test what is the best way
to do that to just test the web

283
00:24:26,650 --> 00:24:28,240
application itself

284
00:24:28,240 --> 00:24:33,070
so if we test the web application itself
what can we do we will find security

285
00:24:33,070 --> 00:24:37,689
vulnerabilities in the application and
if we know where where the

286
00:24:37,690 --> 00:24:43,900
vulnerabilities are and we can then
later if the weapons again on if the web

287
00:24:43,900 --> 00:24:45,130
again is enabled

288
00:24:45,130 --> 00:24:49,539
we can then focus of the vulnerabilities
much more

289
00:24:49,539 --> 00:24:53,049
yes yes

290
00:24:53,049 --> 00:24:57,610
as I said it might not be realizable in
every penetration test but we should try

291
00:24:57,610 --> 00:24:58,209
it

292
00:24:58,210 --> 00:25:01,600
so if we have done this

293
00:25:01,600 --> 00:25:06,490
the next phase is the reconnaissance
face where we try together

294
00:25:06,490 --> 00:25:10,450
so am i as much information as possible
about the web and the web server and so

295
00:25:10,450 --> 00:25:11,020
on

296
00:25:11,020 --> 00:25:16,960
it is the basis for the next phases so
it's very important and we try to get

297
00:25:16,960 --> 00:25:21,909
information about the web server about
the technology about the left window

298
00:25:21,909 --> 00:25:26,470
which weapons used about the security
model is it the white listing model is

299
00:25:26,470 --> 00:25:31,539
it the blacklisting model and maybe even
get some internal IP addresses to try to

300
00:25:31,539 --> 00:25:34,539
spoof our own IP address

301
00:25:36,860 --> 00:25:44,000
after that comes the second face which
is attacking the preprocessor so if you

302
00:25:44,000 --> 00:25:44,720
find

303
00:25:44,720 --> 00:25:49,520
ok again the objective is to make the
web skip input validation

304
00:25:49,520 --> 00:25:53,450
if we have found a way to make the weft
skip our input validation then we have

305
00:25:53,450 --> 00:25:57,470
one because of the weapons then use this
we can just type in everything that we

306
00:25:57,470 --> 00:25:59,270
want and the web

307
00:25:59,270 --> 00:26:07,340
just skips it to do that we try to
identify which parts of the HTTP

308
00:26:07,340 --> 00:26:12,199
requests are inspected by a web and
which not for instance i had once a web

309
00:26:12,200 --> 00:26:17,419
where the cookie per meter or the user
agent parameter was not inspected

310
00:26:17,990 --> 00:26:23,210
so I could put in everything that I want
ok that's the first step

311
00:26:23,210 --> 00:26:28,760
if you can find a vulnerability or if
you find an application that uses the

312
00:26:28,760 --> 00:26:31,100
user input or the cookie too

313
00:26:31,100 --> 00:26:36,918
for instance update the database or
something then you might find the bikers

314
00:26:36,919 --> 00:26:43,370
so what we try to do is we Center
requests with the with the with the pay

315
00:26:43,370 --> 00:26:47,989
dirt in it and the point we change the
position of the payload and see what is

316
00:26:47,990 --> 00:26:52,250
blocked and with what is not locked and
then try to attack and exploit

317
00:26:52,760 --> 00:26:56,720
ok the second one is to find an
impedance mismatch

318
00:26:57,440 --> 00:27:04,190
again we want to try to find and exploit
or a payload that is interpreted by the

319
00:27:04,190 --> 00:27:10,549
left differently than the back end and
very important for this face is to know

320
00:27:10,549 --> 00:27:12,500
about the backend technologies

321
00:27:12,500 --> 00:27:17,270
so as I said if we know there's a speed
. net we can try HTTP perimeter portion

322
00:27:17,270 --> 00:27:25,129
sizes and then the fourth face is
bypassing the ruleset we try to find the

323
00:27:25,130 --> 00:27:27,980
payload that is not blocked by the web

324
00:27:27,980 --> 00:27:32,809
so the first attempt as I said this
brute forcing and the second attempt

325
00:27:32,809 --> 00:27:37,790
then is the reverse engineering in a
trial and error approach which we try is

326
00:27:37,790 --> 00:27:41,850
we send different symbols and different
keywords and

327
00:27:41,850 --> 00:27:47,490
look what come what is accepted by the
web and what is not accepted

328
00:27:47,490 --> 00:27:54,120
ok if we know what is accepted by the
West we can then try to find and exploit

329
00:27:54,120 --> 00:28:01,469
phase 5 is finding other vulnerabilities
so i've tested the application itself

330
00:28:01,470 --> 00:28:03,179
without him a wife

331
00:28:03,179 --> 00:28:06,929
then i have tested the application with
the web and tried to access and SQL

332
00:28:06,929 --> 00:28:12,990
injection and at the and what I still
can do is to find vulnerabilities that

333
00:28:12,990 --> 00:28:17,909
cannot be detected by the web for
instance a broken authentication

334
00:28:17,909 --> 00:28:20,669
mechanism or privilege escalation and so
on

335
00:28:20,669 --> 00:28:25,409
so if there is a mistake in the sauce
call in the yes if there is a logic

336
00:28:25,409 --> 00:28:29,400
mistake and face

337
00:28:29,400 --> 00:28:35,970
six is after the dentist what we do now
is we inform the customer about the

338
00:28:35,970 --> 00:28:40,530
vulnerabilities that we have found and
what is very important and what I want

339
00:28:40,530 --> 00:28:45,870
everyone to take with him is that the
best way to fix the vulnerability is to

340
00:28:45,870 --> 00:28:47,549
fix the root cause

341
00:28:47,549 --> 00:28:52,379
so if i have xss vulnerability our SQL
injection vulnerability in my

342
00:28:52,380 --> 00:28:56,700
application then i should change the
application itself and not just add some

343
00:28:56,700 --> 00:29:01,799
rules to the web because SQL and
JavaScript are very very flexible

344
00:29:01,799 --> 00:29:08,220
languages and to cover every possible
bad input is a very hard task

345
00:29:08,789 --> 00:29:16,799
so if we know if yes and for the time
being while the source code is fixed the

346
00:29:16,799 --> 00:29:21,240
there should be rules to virtually patch
the vulnerability

347
00:29:21,240 --> 00:29:28,590
so we add rules to the left to fix this
vulnerability and everyone should still

348
00:29:28,590 --> 00:29:33,000
tell his customer that the left can help
to mitigate vulnerabilities but it

349
00:29:33,000 --> 00:29:34,710
cannot fix it

350
00:29:34,710 --> 00:29:37,710
a hundred percent

351
00:29:38,919 --> 00:29:43,570
coming to weapon job welcome ninja is a
tool i've written

352
00:29:44,200 --> 00:29:48,309
it's a comment line interface to written
in python

353
00:29:48,309 --> 00:29:53,200
it automates parts of the approach so
you don't have to do everything manually

354
00:29:53,739 --> 00:29:58,690
we have you already used in several
penetration test so you might still find

355
00:29:58,690 --> 00:30:04,299
some bucks but i hope that the biggest
box are fixed and it supports https

356
00:30:04,299 --> 00:30:07,269
connections get and post parameters and
cookies

357
00:30:07,269 --> 00:30:14,919
the most important function of weapon
inja is the fuzzing thanks function the

358
00:30:14,919 --> 00:30:19,720
fuzzing function it all the present
invention automates the last of the face

359
00:30:19,720 --> 00:30:25,419
for the approach which is sending dif
different symbols and keywords analyzing

360
00:30:25,419 --> 00:30:29,529
the response and displaying it in a
clear and concise way

361
00:30:29,529 --> 00:30:36,039
so at the end you hopefully have all I
mean no one of us can test her 50

362
00:30:36,039 --> 00:30:39,730
JavaScript functions in the penetration
is and no one wants to do that

363
00:30:39,730 --> 00:30:44,769
so that's why we automate things and the
frosting strings can be easily extended

364
00:30:44,769 --> 00:30:50,169
with a function called insert fuss and
the funding streams can be shared within

365
00:30:50,169 --> 00:30:51,039
a team

366
00:30:51,039 --> 00:30:54,429
yes

367
00:30:54,429 --> 00:30:57,609
so what I want to do is to show you the
two very quickly

368
00:31:03,840 --> 00:31:07,049
okay great

369
00:31:07,049 --> 00:31:12,059
so what you see here is a application
called them vulnerable web application

370
00:31:12,059 --> 00:31:14,879
so some of you might already know it

371
00:31:14,880 --> 00:31:18,779
it's a very it's an application which
contains vulnerabilities for instance we

372
00:31:18,779 --> 00:31:24,299
have here and reflected excess i can
then type in my name

373
00:31:24,840 --> 00:31:29,970
just cal and it says hello Kelly

374
00:31:29,970 --> 00:31:33,929
but if i try to insert something
malicious

375
00:31:34,529 --> 00:31:40,740
I get blocked by the web ok this is the
web night application firewall which is

376
00:31:40,740 --> 00:31:42,929
an open-source firewall

377
00:31:42,929 --> 00:31:48,390
it's an old version i have a talk with
the developer and they fixed the

378
00:31:48,390 --> 00:31:50,399
vulnerabilities i will show you right
now

379
00:31:50,399 --> 00:31:57,059
so and we're good to go so we have our
tool

380
00:31:57,059 --> 00:32:03,120
laughing . see eye to eye so we fire it
up

381
00:32:03,690 --> 00:32:08,250
and as I said it has more functions but
we will use the first function and open

382
00:32:08,250 --> 00:32:15,600
up the help file here we have to

383
00:32:15,600 --> 00:32:22,740
so start from here we have to provide
the URL so we do - you and type in the

384
00:32:22,740 --> 00:32:31,590
URL the position where we want the
payload to be has to be substituted with

385
00:32:31,590 --> 00:32:38,158
the keyword for us in uppercase letters
after that we can use a post parameter

386
00:32:38,159 --> 00:32:42,419
but we have to get parameters we don't
need that here we have to define our

387
00:32:42,419 --> 00:32:43,320
cookie

388
00:32:43,320 --> 00:32:51,600
ok I've already copied it into a text
file so we can save time

389
00:32:51,600 --> 00:32:54,600
oops

390
00:33:02,029 --> 00:33:07,700
now ok then we have the type of input
what do we want to try SQL our success

391
00:33:07,700 --> 00:33:11,749
in this case we have a reflective
existence so we price as make sense

392
00:33:11,749 --> 00:33:18,379
we have the delay option some websites
are configured in such a way that if

393
00:33:18,379 --> 00:33:22,998
there are too many requests in a very
short amount of time then

394
00:33:22,999 --> 00:33:26,809
all requests will be blocked so we can
add a delay of five seconds three

395
00:33:26,809 --> 00:33:34,070
seconds or whatever for the for showing
i'll just use 50 milliseconds and we

396
00:33:34,070 --> 00:33:40,009
have to define an output file so we have
results that HTML

397
00:33:40,009 --> 00:33:44,119
ok I think we're good to go let's start
it

398
00:33:44,119 --> 00:33:53,209
yes and as you can see the program now
sense of the fuzzing strings votes yes

399
00:33:53,210 --> 00:33:56,629
output safe to results that HTML let's
open up the file

400
00:33:57,409 --> 00:34:02,450
ok

401
00:34:02,450 --> 00:34:05,450
yeah

402
00:34:09,379 --> 00:34:13,730
ok the scaling is not too good looking
to trade in crow

403
00:34:24,850 --> 00:34:26,850
yeah

404
00:34:26,850 --> 00:34:29,850
you bet

405
00:34:31,429 --> 00:34:33,200
yeah

406
00:34:33,199 --> 00:34:37,069
ok let me try another five

407
00:34:50,760 --> 00:34:53,760
yeah

408
00:34:56,449 --> 00:34:58,370
yeah

409
00:34:58,370 --> 00:35:03,740
the scaling up ok you see it sorry i was
looking on my screen and it didn't show

410
00:35:03,740 --> 00:35:04,910
the last column

411
00:35:04,910 --> 00:35:10,670
- okay perfect then let me and open up
what I just did

412
00:35:10,670 --> 00:35:17,030
Prison - great

413
00:35:17,030 --> 00:35:22,700
perfect ok so what you can see here is
make it bigger sorry

414
00:35:23,900 --> 00:35:27,350
okay great

415
00:35:27,350 --> 00:35:31,880
I think now everyone can see on the left
we have the string that was sent to the

416
00:35:31,880 --> 00:35:32,960
web server

417
00:35:32,960 --> 00:35:40,190
there we can see what HTTP status come
back came back and as you can see it's

418
00:35:40,190 --> 00:35:41,120
999

419
00:35:41,120 --> 00:35:46,250
that's the response of the web
application firewall so what does the

420
00:35:46,250 --> 00:35:49,190
tool do it says working nope

421
00:35:49,190 --> 00:35:54,860
then we have other feels like
content-length to further analyze it and

422
00:35:54,860 --> 00:36:00,530
two other columns which which are a
little bit complicated to explain so i

423
00:36:00,530 --> 00:36:01,940
will just keep it from here

424
00:36:01,940 --> 00:36:07,490
but what is important to know is this is
our pay . to this is our HD beset us

425
00:36:07,490 --> 00:36:09,140
that we get got back

426
00:36:09,140 --> 00:36:12,140
and the answer did it work or not

427
00:36:13,010 --> 00:36:19,400
um yes and as you can see the script tag
was blocked as we have also manually

428
00:36:19,400 --> 00:36:20,750
verified

429
00:36:20,750 --> 00:36:26,750
so what you first need for an exploit or
far in excess is a tag

430
00:36:26,750 --> 00:36:32,870
so what we do is scroll a little bit
down into a little bit more as you can

431
00:36:32,870 --> 00:36:41,210
is it as you have maybe seen there are
hundred 5757 yes payloads or keywords so

432
00:36:41,210 --> 00:36:42,410
yes

433
00:36:42,410 --> 00:36:48,890
for instance we have the image tech
unfortunately you cannot see it's all

434
00:36:48,890 --> 00:36:52,279
but i'll just copy it here

435
00:36:52,790 --> 00:36:54,170
ok

436
00:36:54,170 --> 00:36:58,790
so the tool says it works we can try it
out

437
00:36:59,930 --> 00:37:06,290
and yes it works because we are not
blocked so what do we need now

438
00:37:06,890 --> 00:37:12,350
any ideas on Arab very good cricket

439
00:37:12,350 --> 00:37:15,350
let's look whether on era was blocked a
lot

440
00:37:16,100 --> 00:37:19,190
ok on error

441
00:37:19,190 --> 00:37:22,190
ok so again very small

442
00:37:23,270 --> 00:37:31,670
ok as you can see on era was locked so
what we normally do we will try other

443
00:37:31,670 --> 00:37:36,320
JavaScript functions there what does the
to do it try some 50 from the beginning

444
00:37:36,320 --> 00:37:40,970
and tells you whether it worked or not
so there are some JavaScript functions

445
00:37:40,970 --> 00:37:43,520
which worked

446
00:37:43,520 --> 00:37:49,850
you can see here but they're very
difficult to execute our the it only

447
00:37:49,850 --> 00:37:55,670
works at some in some but environments
but i have found one and function which

448
00:37:55,670 --> 00:37:57,770
worked which is on weed

449
00:37:57,770 --> 00:38:06,259
yes anhui anh Li is a JavaScript
function which is executed if you turn

450
00:38:06,260 --> 00:38:07,190
the week

451
00:38:07,190 --> 00:38:16,400
so what we can now do or what we should
do is add to our painting notes on we

452
00:38:16,400 --> 00:38:23,240
equals and now we also need a JavaScript
function and also what

453
00:38:23,240 --> 00:38:29,330
and that very good I'm in the right
place

454
00:38:29,840 --> 00:38:33,020
ok and ok we're good to go

455
00:38:33,020 --> 00:38:36,290
image sauce is X so there will

456
00:38:36,290 --> 00:38:48,320
yes x and ennui equals at one so we try
that in there put it in and turn our

457
00:38:48,320 --> 00:38:53,720
mouths weed and as we can see the excess
was executed thank you very much

458
00:38:54,260 --> 00:38:59,750
so what I just wanted to show you what
it's I didn't know in five minutes but

459
00:38:59,750 --> 00:39:04,370
for the if you if you because I know how
the page looks like

460
00:39:04,370 --> 00:39:06,049
but and it will this

461
00:39:06,050 --> 00:39:11,840
the weapons that will help you and find
such people is very easily as it helps

462
00:39:11,840 --> 00:39:14,840
you and ultimate very many steps

463
00:39:15,350 --> 00:39:20,600
yes and I've reported that this
vulnerability and some other SQL

464
00:39:20,600 --> 00:39:25,250
injection vulnerabilities to the when
vendor which is a a cute ronix and they

465
00:39:25,250 --> 00:39:28,070
even rewarded me with some money with
the bounty

466
00:39:28,070 --> 00:39:33,170
so you can go on and try to find some
vulnerabilities and maybe you will also

467
00:39:33,170 --> 00:39:34,550
get somebody

468
00:39:34,550 --> 00:39:37,820
okay great

469
00:39:38,450 --> 00:39:44,060
I think that's it from me

470
00:39:44,060 --> 00:39:51,830
I'm happy to hear your questions if you
have someone special

471
00:39:52,700 --> 00:39:56,640
how

472
00:39:56,640 --> 00:40:03,058
thank you for your interesting
presentation but you didn't say where we

473
00:40:03,059 --> 00:40:07,890
can try your wife major where we can
download it

474
00:40:07,890 --> 00:40:11,759
yes and I was soon uploaded on get up

475
00:40:11,760 --> 00:40:16,799
so hopefully you can use it and even a
country to it and add some functions

476
00:40:16,799 --> 00:40:31,079
okay thank you excuse me under your
nickname on here top of the cup on the

477
00:40:31,079 --> 00:40:32,309
heat get out

478
00:40:32,309 --> 00:40:38,279
I get up I don't have currently one so
let's let's do it the following way

479
00:40:38,279 --> 00:40:41,940
i will upload it and then you can just
google for weapons and hopefully we'll

480
00:40:41,940 --> 00:40:42,630
find it

481
00:40:42,630 --> 00:40:51,329
how am I going to participate in the
bypass context here on peach days I've

482
00:40:51,329 --> 00:40:56,700
seen it online but I didn't participate
until now but I want 3s and you will

483
00:40:56,700 --> 00:40:57,509
will you

484
00:40:57,510 --> 00:41:00,510
I want to do is I ok yes i think so

485
00:41:07,130 --> 00:41:12,020
excuse me to tell me a police do you
have any chance she's about what a

486
00:41:12,020 --> 00:41:16,040
technique that can bypass any of
fireball

487
00:41:16,040 --> 00:41:22,640
for example much security is way past by
that six weeks all something else

488
00:41:23,930 --> 00:41:30,169
I'm what I have is my paypal my bachelor
thesis which you can already dressed

489
00:41:30,170 --> 00:41:35,210
where where where where we can get to
the place I didn't publish my part of

490
00:41:35,210 --> 00:41:39,950
better thesis but you can write me an
email and then I was just write down my

491
00:41:39,950 --> 00:41:44,629
you get the whole ok but there are
sometimes there are paper for instance

492
00:41:44,630 --> 00:41:46,520
there was a success

493
00:41:46,520 --> 00:41:50,840
cheat sheet for the offer pearl of the
guy called Mars in a minute

494
00:41:50,840 --> 00:41:55,670
and he found a lot of bypasses four
different graphs and published it

495
00:41:55,670 --> 00:42:00,380
so that's maybe one thing that you want
to look up

496
00:42:00,380 --> 00:42:03,380
marzina ok things

497
00:42:07,620 --> 00:42:10,319
yeah

498
00:42:10,319 --> 00:42:21,808
yes it just sends the request with HTTP
and what is on the back end is

499
00:42:21,809 --> 00:42:25,650
irrelevant so yes you can use it against
every application

500
00:42:33,640 --> 00:42:37,390
yeah

501
00:42:37,390 --> 00:42:40,390
yeah

502
00:42:41,140 --> 00:42:44,259
so what my tool does thank you for your
question

503
00:42:44,260 --> 00:42:51,640
so what my tool does is to just sent
pausing strings and Palos and so as you

504
00:42:51,640 --> 00:42:56,078
can remember the fourth face which was
bypassing the rule pass the the rules

505
00:42:56,079 --> 00:43:02,200
set of the web that is what my what the
two tries to attack the faces before

506
00:43:02,200 --> 00:43:09,160
it's like exploiting the pre-process are
of one like that the the function

507
00:43:09,160 --> 00:43:14,288
HTTP per meter pollution with asp.net
that are things that aren't covered by 2

508
00:43:14,289 --> 00:43:20,380
which you have to do manually so it's
irrelevant for the to what technologies

509
00:43:20,380 --> 00:43:21,940
i use on the web server

510
00:43:21,940 --> 00:43:27,039
it's just important what what comes back
or is it locked or not

511
00:43:27,039 --> 00:43:30,039
yeah thank you

512
00:43:30,039 --> 00:43:37,779
great guys then thank you very much like
this country and yes

