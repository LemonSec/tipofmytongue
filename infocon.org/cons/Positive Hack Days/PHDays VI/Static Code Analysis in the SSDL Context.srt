1
00:00:00,000 --> 00:00:02,960
so here

2
00:00:02,960 --> 00:00:12,170
hello I'm on the jochen are working key
and the charger of the safe software

3
00:00:12,170 --> 00:00:13,610
solutions

4
00:00:13,610 --> 00:00:16,640
I'm a developer and I participate

5
00:00:16,640 --> 00:00:19,539
you're developing to all the time

6
00:00:19,539 --> 00:00:22,660
all abilities analysis

7
00:00:22,660 --> 00:00:25,900
I say justin bieber's forever

8
00:00:25,900 --> 00:00:31,000
I should explain what's happened in here
for a couple of years ago we had a life

9
00:00:31,000 --> 00:00:35,980
cycle where the developers to doing
something that was testing something

10
00:00:35,980 --> 00:00:42,370
something is suggested someone was not
but ultimately it was all about

11
00:00:42,370 --> 00:00:47,860
production but no one really took care
about safety

12
00:00:47,860 --> 00:00:54,010
ultimately those guys arrived and they
say let's make everything safe serve a

13
00:00:54,010 --> 00:00:57,010
deal

14
00:00:58,510 --> 00:00:59,680
the index

15
00:00:59,680 --> 00:01:05,199
and the life cycle of those applications
and they said that they would be testing

16
00:01:05,199 --> 00:01:11,179
as many releases as possible

17
00:01:11,180 --> 00:01:14,840
try to check out what's going to happen

18
00:01:16,580 --> 00:01:23,210
they had the standard measures they had
to do the pin tests those releases

19
00:01:27,060 --> 00:01:33,180
the chest cold the applications such as
far as you can see

20
00:01:34,260 --> 00:01:39,690
it was a vicious practice because it
does not cover all the applications

21
00:01:42,380 --> 00:01:45,710
we do spend too much time

22
00:01:45,710 --> 00:01:48,770
on this destination

23
00:01:48,770 --> 00:01:51,770
the business is not going to wait

24
00:01:52,400 --> 00:01:54,340
for security

25
00:01:54,340 --> 00:01:56,560
some of the vulnerability

26
00:01:56,560 --> 00:02:00,040
the things that we found at the
perimeter

27
00:02:02,520 --> 00:02:06,119
with the coming and i'm going crazy

28
00:02:07,020 --> 00:02:10,019
the time when we are releasing the body

29
00:02:11,980 --> 00:02:14,980
it was really like my extinguisher

30
00:02:16,610 --> 00:02:19,610
strange bugs would pop up

31
00:02:20,490 --> 00:02:21,560
it turned out that way

32
00:02:21,560 --> 00:02:26,959
such an application so we have to do
something about it we had a school we

33
00:02:26,959 --> 00:02:35,480
had 30 projects we had a certain number
or for programming languages tons of

34
00:02:35,480 --> 00:02:42,950
developers that can do it and you will
need to make it safe and we just need to

35
00:02:42,950 --> 00:02:50,329
keep the business for all intact and we
have just a couple of people in security

36
00:02:50,330 --> 00:02:57,080
so what do we do to protect the internet
and we figured out about this one

37
00:02:57,080 --> 00:03:02,090
one nice finger designed by microsoft
com DNC

38
00:03:02,090 --> 00:03:08,269
a lot of you may want to see this
forward when you have a release cycles

39
00:03:08,269 --> 00:03:10,940
sleepin to chance

40
00:03:10,940 --> 00:03:20,599
first of all we teach our programmers to
create a safe code and initially you

41
00:03:20,599 --> 00:03:27,230
need to take care about safety and then
we'll create a safe and secure cold war

42
00:03:27,230 --> 00:03:31,220
and there are plenty of flows like that

43
00:03:34,300 --> 00:03:35,420
additional reason is

44
00:03:35,420 --> 00:03:38,420
: all we figured out

45
00:03:39,910 --> 00:03:46,930
some of the parts in this seat and we
really wanted to automate the parts we

46
00:03:46,930 --> 00:03:48,100
want to talk to me

47
00:03:48,100 --> 00:04:03,220
so ultimately we ended up having such a
flow we had that first part we should

48
00:04:05,170 --> 00:04:09,910
the I sec part will usually check it out
and see whether it's safe enough

49
00:04:12,600 --> 00:04:16,950
maybe the there was something wrong
about the pins and passwords

50
00:04:18,000 --> 00:04:19,380
the next step

51
00:04:19,380 --> 00:04:26,640
is a safe development and regress
testing and safety releases

52
00:04:29,880 --> 00:04:35,550
we need to monitor or the idea

53
00:04:35,550 --> 00:04:41,670
and yet if necessary its presentation of
some function on the system with tested

54
00:04:41,670 --> 00:04:45,090
immediately

55
00:04:45,090 --> 00:04:48,090
I'll do it manually

56
00:04:49,610 --> 00:04:59,599
then we can do everything safely and
they write a cold late esta code by or

57
00:04:59,599 --> 00:05:01,260
tests

58
00:05:01,260 --> 00:05:05,490
we apply our own auto tests there

59
00:05:06,000 --> 00:05:16,680
we'll check this code for safety and one
of the main cycles there is a before you

60
00:05:16,680 --> 00:05:19,680
release a new function before we start a
new release

61
00:05:20,700 --> 00:05:27,960
we are automatically verify this cold
with static analyzers we automatically

62
00:05:27,960 --> 00:05:36,120
phase this new application we manually
do the tests again the anger we ensure

63
00:05:36,120 --> 00:05:41,610
their release and see what this really
is going to have a very good feedback

64
00:05:41,610 --> 00:05:49,950
whether we're going to have a pretty
good hacker exposure

65
00:05:52,480 --> 00:05:58,930
it's a nice really cycling main question
what food

66
00:05:58,930 --> 00:06:02,860
this blue to do note that's what I
wanted to explain

67
00:06:03,820 --> 00:06:10,240
that's how we in embedded this tactic
called analyzing to the cycle

68
00:06:10,240 --> 00:06:17,830
static code analyzer is a single which
starts with your source files on the

69
00:06:17,830 --> 00:06:27,640
it looks for unsafe files and bad
practices through which some kind of

70
00:06:27,640 --> 00:06:38,169
malicious injection they occur a stack
trace rather so the whole point here is

71
00:06:38,170 --> 00:06:42,910
that it takes the source files and
checks whether they're good or bad

72
00:06:43,570 --> 00:06:51,640
it checks the code for safety and it
also have carries a number of useful

73
00:06:51,640 --> 00:06:59,050
things with the bed coating practice
this search for logical errors

74
00:06:59,650 --> 00:07:05,979
the search for syntax errors but it's
not a perfect solution

75
00:07:06,790 --> 00:07:14,110
like any security through which requires
fine tunings so we started doing it

76
00:07:15,880 --> 00:07:18,110
we wanted to start

77
00:07:18,110 --> 00:07:26,690
this security tool in a way so it works
with the other hopes automatically

78
00:07:26,690 --> 00:07:29,810
applying it to the new releases before

79
00:07:31,440 --> 00:07:36,570
the major aspect of the static called
analyzes that it should be granted all

80
00:07:36,570 --> 00:07:43,830
the code all the clean code without any
artifacts

81
00:07:43,830 --> 00:07:48,750
wyd codes defending so see if you have a
gel based application if this app

82
00:07:48,750 --> 00:07:55,950
requires two cool four different
libraries with the possible

83
00:07:55,950 --> 00:08:04,740
vulnerabilities you attach the source
files on the library's implements is the

84
00:08:04,740 --> 00:08:07,740
dependencies

85
00:08:08,730 --> 00:08:16,740
if you use this CDM you also need to
take care about all of the source files

86
00:08:16,740 --> 00:08:24,870
using them and the code to make sure it
works

87
00:08:24,870 --> 00:08:28,100
we created a stand alone

88
00:08:28,100 --> 00:08:35,900
an application which interacts between
team city and send the code to the

89
00:08:35,900 --> 00:08:38,900
static analyzer for analysis

90
00:08:38,900 --> 00:08:45,290
it was a separate standalone application
which compiles the source files injects

91
00:08:45,290 --> 00:08:53,150
the code does the dependency injection
and uses the customer flow of the

92
00:08:53,150 --> 00:09:00,890
languages for example when you need to
scan and find out how is going to turn

93
00:09:00,890 --> 00:09:06,650
from secret to JavaScript code to you is
looking for something unconventional

94
00:09:06,650 --> 00:09:10,040
features and it's quite right

95
00:09:10,040 --> 00:09:13,230
we need to use clean cold

96
00:09:13,230 --> 00:09:20,310
so all of the cycle of all the codes
push up to is that the one where you can

97
00:09:20,310 --> 00:09:21,910
set something up

98
00:09:21,910 --> 00:09:25,089
has sent to hope 15 city

99
00:09:25,089 --> 00:09:28,089
please check and verify this cold

100
00:09:29,110 --> 00:09:33,610
teamcity sends a request to the

101
00:09:34,529 --> 00:09:42,990
Control Center the control server has
not only relations compile the file

102
00:09:42,990 --> 00:09:45,990
subjects the dependencies

103
00:09:51,710 --> 00:09:54,800
and we do this search static analyzer

104
00:09:54,800 --> 00:09:56,839
yeah

105
00:09:56,840 --> 00:09:59,050
how did with single it out

106
00:09:59,050 --> 00:10:06,550
I wanted to have a complete flow so for
example on a webpage a user inputs data

107
00:10:06,550 --> 00:10:16,839
this data goes to jela cold and want to
ask you can you get those back and it's

108
00:10:16,839 --> 00:10:19,630
reflected to access to the client

109
00:10:19,630 --> 00:10:26,589
we expected that they did not happen
because as the vendor explain each part

110
00:10:26,589 --> 00:10:29,800
of the cold should be separate

111
00:10:29,800 --> 00:10:35,890
it should be synthesized on its own so
for example if you send this data from

112
00:10:35,890 --> 00:10:43,390
client to jello in Java you need to
track down music that nothing can be

113
00:10:43,390 --> 00:10:46,240
injected vice versa

114
00:10:46,240 --> 00:10:47,120
this year

115
00:10:47,120 --> 00:10:51,470
not all the expectations they come true

116
00:10:52,300 --> 00:11:00,040
if you're in favor of dependency
injection and dynamic code it will not

117
00:11:00,040 --> 00:11:00,880
work

118
00:11:00,880 --> 00:11:04,209
straight out of the box

119
00:11:04,209 --> 00:11:10,569
because this is a dynamic solution there
diner dynamic code cannot be statically

120
00:11:10,569 --> 00:11:13,599
analyzed so the vendor is right here

121
00:11:15,640 --> 00:11:17,520
that's what we can

122
00:11:17,520 --> 00:11:23,970
create our own dependency injection flow
will be implemented in generic classes

123
00:11:23,970 --> 00:11:29,250
using implementations of the classes so
it's quite possible

124
00:11:31,400 --> 00:11:34,610
a static code called analyzer

125
00:11:38,310 --> 00:11:40,270
all

126
00:11:40,270 --> 00:11:43,100
yeah

127
00:11:43,100 --> 00:11:45,350
No

128
00:11:45,350 --> 00:11:48,350
my words

129
00:11:50,100 --> 00:11:50,980
work here

130
00:11:50,980 --> 00:11:55,779
the support of the frameworks by one
vendor not possible

131
00:11:57,720 --> 00:11:59,310
go ahead

132
00:11:59,310 --> 00:12:07,650
this analyzer supports approximately
twenty main languages and a bunch of

133
00:12:07,650 --> 00:12:09,420
frameworks

134
00:12:09,420 --> 00:12:11,030
yes

135
00:12:11,030 --> 00:12:15,260
if you decided that your static analyzer
will work straight out of the box

136
00:12:18,100 --> 00:12:21,759
it will find a number of nice features
it's not true

137
00:12:22,329 --> 00:12:26,279
each project his name was on it

138
00:12:26,279 --> 00:12:27,290
last one

139
00:12:27,290 --> 00:12:35,420
it is unique if you're waiting for rule
to apply it and start a remote code

140
00:12:35,420 --> 00:12:37,519
execution

141
00:12:37,519 --> 00:12:43,970
you need to read through a bunch of code
understand that this remote code

142
00:12:43,970 --> 00:12:48,769
execution is possible and it will not be

143
00:12:49,790 --> 00:12:51,750
what

144
00:12:51,750 --> 00:12:59,760
your test classes so please be prepared
to read the three tons of cold before

145
00:12:59,760 --> 00:13:02,569
someone else does it

146
00:13:02,570 --> 00:13:08,900
from beyond because we had some
incidents

147
00:13:10,259 --> 00:13:13,459
- ability is were created

148
00:13:13,459 --> 00:13:16,459
RC vulnerabilities

149
00:13:19,550 --> 00:13:26,240
static analyzer did not find this but we
have made it so in order to start this

150
00:13:26,240 --> 00:13:33,950
static analyzer you need to do your own
City and you need to write twenty

151
00:13:33,950 --> 00:13:45,950
thousand strings of code developed your
compilation system monitoring of the

152
00:13:45,950 --> 00:13:52,250
cold environment and to make sure that
the code is scanned you need to create

153
00:13:52,250 --> 00:13:56,029
your own more rules in the static
analyzer

154
00:13:56,660 --> 00:14:04,130
it sounds sad but despite that it was a
lot of work to be done

155
00:14:05,910 --> 00:14:13,709
actually found a box of the 25 bugs even
an XX e and we still keep on finding

156
00:14:13,710 --> 00:14:18,660
them creating some new rules until now

157
00:14:20,940 --> 00:14:26,400
we have plenty of products and programs
of projects done just by a couple of

158
00:14:26,400 --> 00:14:29,400
people that's all I'm done thank you

159
00:14:32,730 --> 00:14:39,000
salinas new technology in your yard
lager from <year> twenty sixteen </year>

160
00:14:39,000 --> 00:14:42,600
lauralee boy I Gina pros much with marks
along with that

161
00:14:44,790 --> 00:14:47,459
ok stations cool are the words of Korra

