1
00:00:00,000 --> 00:00:04,710
Michael yasha he will be discussing
reverse engineering of binary formats

2
00:00:04,710 --> 00:00:09,960
with the use of Chi struct thank you for
the introduction my name is Michael

3
00:00:09,960 --> 00:00:17,369
reaction and first i would like to
introduce ourselves and why we're

4
00:00:17,369 --> 00:00:24,390
engaged in doing what we are doing my
company a white box labs

5
00:00:25,019 --> 00:00:29,070
max controllers for aquariums

6
00:00:29,609 --> 00:00:38,460
areum's hydroponic dads for a beer
brewers cheesemakers winemakers all

7
00:00:38,460 --> 00:00:42,540
kinds of a closed or equals fears

8
00:00:44,820 --> 00:00:55,199
there is also a aquaponic which is about
having aquariums with fish installed in

9
00:00:55,199 --> 00:01:06,689
Helms which fish eat the grass which are
inside those aquariums

10
00:01:10,650 --> 00:01:18,689
well which fish can be a hidden by a
home residents and forth which may be a

11
00:01:18,689 --> 00:01:21,149
very interesting

12
00:01:21,150 --> 00:01:26,670
a source unlimited source of food for
say developing countries

13
00:01:26,670 --> 00:01:31,530
just a few words about what is
controlled by controllers in such close

14
00:01:31,530 --> 00:01:38,610
systems that a lot of sense and such as
water level a leakage gauges detectors

15
00:01:38,610 --> 00:01:45,630
temperature gauges water control gauges
which is very important for aquariums

16
00:01:45,630 --> 00:01:48,600
for which is crucial

17
00:01:48,600 --> 00:01:55,020
Oh to be able to be in control of the H
dissolved oxygen and so on and so forth

18
00:01:55,829 --> 00:02:00,630
flow sensors in mitigations lighting
sensors

19
00:02:01,220 --> 00:02:05,360
we have to be in control of our light
bulbs

20
00:02:08,240 --> 00:02:16,490
the lighting systems that we use to
leave our aquariums terrariums and so on

21
00:02:16,490 --> 00:02:24,560
and so forth for some aquariums which
are used for decoration purposes

22
00:02:25,820 --> 00:02:33,230
it may be a necessary to install cameras
for owners to be able to enjoy their

23
00:02:33,230 --> 00:02:40,310
Fisher emailed land since all systems
are a really expensive it would be a PT

24
00:02:40,310 --> 00:02:44,750
a-- you for the fish died a while

25
00:02:45,620 --> 00:02:53,120
the owner is on vacation for example
which means that there should be

26
00:02:53,120 --> 00:02:57,020
redundant power supply systems which in
turn i need to be controlled

27
00:02:57,830 --> 00:03:10,730
according to studies such a century's
help to control various actuators such

28
00:03:10,730 --> 00:03:16,549
as pumps dozers source of lighting
heaters

29
00:03:16,550 --> 00:03:29,510
automatic feeders for fish skimmers
reactors at hog chemical devices which

30
00:03:29,510 --> 00:03:39,109
are in charge of us are you taking the
environment and aquariums various

31
00:03:39,110 --> 00:03:48,440
reallys all bars that may be in charge
of supplying Paula to of various devices

32
00:03:49,190 --> 00:03:57,019
there may be a more complex Paul control
systems which is relevant for bigger

33
00:03:57,019 --> 00:03:59,710
aquariums

34
00:03:59,710 --> 00:04:03,970
the size of the ocean areas and so forth

35
00:04:04,960 --> 00:04:18,489
challenge number one that is encountered
by typical user customer who may want to

36
00:04:18,488 --> 00:04:23,560
install in the corium smart aquarium in
helm is vendor lock-in

37
00:04:24,130 --> 00:04:27,580
what is it about

38
00:04:27,580 --> 00:04:35,260
there are about five major vendors
manufacturing the corium systems you

39
00:04:35,260 --> 00:04:42,190
made by a controller natural controller
for example which means that it will

40
00:04:42,190 --> 00:04:50,380
only be a compatible with other nation--
equipment which systems are not cheap

41
00:04:51,820 --> 00:04:59,140
having both several thousand hero or
worth of devices such a customer will be

42
00:04:59,140 --> 00:05:06,159
reluctant to switch to a competitor's
product because they will never be

43
00:05:06,160 --> 00:05:07,390
compatible

44
00:05:07,390 --> 00:05:15,820
we've initially bought systems being the
same sensors or browsers or other

45
00:05:15,820 --> 00:05:27,820
devices because of being based on a
proprietary protocol for example we do

46
00:05:27,820 --> 00:05:30,969
not manufacture our realm of sensors

47
00:05:30,970 --> 00:05:36,970
we're relatively small system however we
manufacture a controller that is

48
00:05:36,970 --> 00:05:44,560
compatible with all the third party
products and we achieve that through

49
00:05:44,560 --> 00:05:52,330
reverse engineering of proprietary
protocols and implementation of those

50
00:05:52,330 --> 00:05:54,190
protocols in our controllers

51
00:05:54,190 --> 00:05:59,710
now to the main point of my presentation

52
00:06:00,500 --> 00:06:11,030
and i'm going to start from a general
overview of the task name let a reverse

53
00:06:11,030 --> 00:06:14,630
engineering of binary data structures

54
00:06:14,630 --> 00:06:21,980
what we start from what we do what we
seek to achieve how it is done

55
00:06:21,980 --> 00:06:24,260
traditional how it is done

56
00:06:24,260 --> 00:06:45,380
now apologize in advance for repeating
myself from time to time problem

57
00:06:45,380 --> 00:06:50,330
some of my points may sound trivial
however to make the picture full i will

58
00:06:50,330 --> 00:06:52,280
make them

59
00:06:52,280 --> 00:06:59,570
what is normal and reverse engineered
for us communication protocols are

60
00:06:59,570 --> 00:07:05,510
particularly interesting for other
reasons above because those protocols

61
00:07:05,510 --> 00:07:09,320
are used in controllers and devices they
control

62
00:07:10,729 --> 00:07:19,820
very often it is very interesting to
explore in better form where the

63
00:07:19,820 --> 00:07:26,659
software embedded in various systems for
which there are no source scouts for

64
00:07:26,660 --> 00:07:36,770
example we uh me need to explore the
algorithms their base them examine their

65
00:07:36,770 --> 00:07:38,210
safety

66
00:07:38,210 --> 00:07:43,969
sometimes it is necessary to attack them
or to protect them to reach them with

67
00:07:43,970 --> 00:07:46,700
additional features and so forth

68
00:07:46,700 --> 00:07:55,190
next the various of container of file
formats interest in land

69
00:07:56,840 --> 00:08:08,179
internal ax the files such as text files
or various or Scout source files are

70
00:08:08,180 --> 00:08:17,570
enclosed in a containers based on a
known formats and it may be interesting

71
00:08:17,570 --> 00:08:25,760
to explore those formats for a
compression for industries now of

72
00:08:25,760 --> 00:08:33,919
various executables executable file that
can be executables or byte codes

73
00:08:33,919 --> 00:08:45,350
normal byte codes are based on formats
which very often are complex enough in

74
00:08:45,350 --> 00:08:52,790
modern executable they normally have
sections we something embedded the are

75
00:08:52,790 --> 00:09:05,390
based on their logical structures in
order to understand what's in the file

76
00:09:05,390 --> 00:09:17,390
in order to extract some resources from
that or notified or engage in doing some

77
00:09:17,390 --> 00:09:22,310
more useful work with the use of
december's it is necessary to understand

78
00:09:22,310 --> 00:09:32,420
the structure of the file to be able to
analyze it for more wear and so on

79
00:09:32,420 --> 00:09:40,459
now working with a content files such as
databases tables playing tax graphic

80
00:09:40,459 --> 00:09:41,420
sectors

81
00:09:41,420 --> 00:09:50,689
well the range of tax may be a really
broad including extraction of content

82
00:09:50,690 --> 00:09:53,690
files from games

83
00:09:54,270 --> 00:09:58,470
or reference catalogs

84
00:09:58,470 --> 00:10:06,600
should such content be in an unknown of
binary of your mouth free to be reused

85
00:10:06,600 --> 00:10:11,280
not just two copies from screen about to
obtain it's very quickly in

86
00:10:11,280 --> 00:10:13,079
machine-readable format

87
00:10:13,080 --> 00:10:23,160
I can distinguish between two main for
our main approaches but today I'm going

88
00:10:23,160 --> 00:10:29,069
to focus on the approach which is on the
right hand side it is about exploring

89
00:10:29,070 --> 00:10:36,180
the code if the code is available

90
00:10:37,380 --> 00:10:44,040
it should be loaded to a disassembler
well the second approach is exploring

91
00:10:44,040 --> 00:10:53,790
the data proper to understand was in
there to identify patterns which

92
00:10:53,790 --> 00:11:01,349
patterns can be analyzed and implemented
in order to be able to read processors

93
00:11:01,350 --> 00:11:04,050
for such formats

94
00:11:04,050 --> 00:11:15,540
based on our experience i can say that
and where the second approach is viable

95
00:11:15,540 --> 00:11:23,459
of for us white first lap there is a
number of Licensing constraints will

96
00:11:23,460 --> 00:11:29,010
hate to find ourselves in court

97
00:11:29,520 --> 00:11:34,590
we don't want lawsuit to be set forth
against us

98
00:11:35,460 --> 00:11:43,080
they're all but sometimes this approach
is the only possible if the number of

99
00:11:43,080 --> 00:11:52,020
devices as big but what we may not have
a board for example of there is just a

100
00:11:52,020 --> 00:11:57,180
spot on the board and we need to extract
the four where some help

101
00:11:57,780 --> 00:12:02,130
how do traditionally for his work

102
00:12:02,130 --> 00:12:03,649
they can work with

103
00:12:03,649 --> 00:12:14,269
of files or five systems or discs or dis
carries for example once i encountered a

104
00:12:14,269 --> 00:12:21,529
situation where what happened some ten
years ago we will give them the broken

105
00:12:21,529 --> 00:12:27,829
just carry for at least some information
to be extracted from it and we have to

106
00:12:27,829 --> 00:12:32,868
deal with its blood system and it
required some kind of reverse

107
00:12:32,869 --> 00:12:38,240
engineering various boards

108
00:12:39,110 --> 00:12:47,990
uh well in order to be able to extract
data from various kinds of memory now

109
00:12:47,990 --> 00:12:53,209
intercept the traffic nine percent of
time is normally found on that

110
00:12:53,209 --> 00:13:00,229
everything will be in the pickup format
only in one percent of cases will you

111
00:13:00,230 --> 00:13:02,149
encounter a different format

112
00:13:02,149 --> 00:13:05,149
what do we want is an output

113
00:13:11,279 --> 00:13:16,740
what to those engaged in reverse
engineering want is an output normal and

114
00:13:16,740 --> 00:13:26,550
it is a format description but while
other is now a standard format

115
00:13:27,120 --> 00:13:30,420
there is no standard for such format
description

116
00:13:30,420 --> 00:13:35,459
normal an a/c like approaches are used

117
00:13:38,730 --> 00:13:50,850
sometimes people try to use videos
tables showing the distribution of bits

118
00:13:50,850 --> 00:13:53,430
and bytes in the memory

119
00:13:53,430 --> 00:14:02,670
you can have a look at the RFC
illustrating the popular of PNG format

120
00:14:02,670 --> 00:14:14,670
that you can also see a here the
signatures described as chunks

121
00:14:16,740 --> 00:14:27,509
you can see this type of bytes here and
there another example of this RFC is

122
00:14:27,509 --> 00:14:33,779
about the UDP protocol of the developers
of RFC decided to present

123
00:14:33,779 --> 00:14:40,050
everything here is a table and we can
see the structure of a UDP datagram is a

124
00:14:40,050 --> 00:14:47,189
table for 32-bit some help

125
00:14:47,189 --> 00:14:54,240
probably ought to fit the page but
anyway it can be used

126
00:14:54,240 --> 00:14:58,949
now this is description

127
00:14:58,949 --> 00:15:09,660
all the popular LF format which is a
popular format for storing the content

128
00:15:09,660 --> 00:15:12,660
of executable files

129
00:15:13,220 --> 00:15:26,480
it is presented as serious of a text
paragraphs with inserts in some eighty

130
00:15:26,480 --> 00:15:37,069
percent of format descriptions that I
have seen people engage in developing a

131
00:15:37,069 --> 00:15:44,959
substandard formats and the standard was
only passed some time ago

132
00:15:49,910 --> 00:15:54,319
- define various lengths of variables

133
00:15:54,319 --> 00:16:05,269
one by two bites the developers of this
decided to use the word l32 a half or

134
00:16:05,269 --> 00:16:13,189
off one should find the section in the
standard describing it

135
00:16:13,189 --> 00:16:16,519
regarding the functionality of this bite

136
00:16:16,519 --> 00:16:22,639
what it is about and so on another very
funny approach

137
00:16:22,639 --> 00:16:31,279
some of you may be familiar with out a
format can be described else of art &

138
00:16:31,279 --> 00:16:40,939
posters are published you can be printed
out and put a wall

139
00:16:46,920 --> 00:16:54,569
the one engagement reverse engineering
is always expected to produce a parser

140
00:16:54,570 --> 00:16:59,850
or a decoder to parse the code

141
00:17:01,589 --> 00:17:10,559
oh well everything is moved to the
memory and distributes between the named

142
00:17:10,559 --> 00:17:21,780
cells on of the slide you can see an
example of such parser a written in the

143
00:17:21,780 --> 00:17:23,160
c language

144
00:17:23,160 --> 00:17:27,660
what can be seen here

145
00:17:29,250 --> 00:17:43,290
individual structure elements are red
here 1 of x 1 and 3 is reading a certain

146
00:17:43,290 --> 00:17:53,010
subprogram is used which either read the
bite or a ward of a certain length we

147
00:17:53,010 --> 00:18:04,559
have all the proper checks with the
return of the correct of program type

148
00:18:06,990 --> 00:18:15,720
well ironically there is not
standardized library in some ninety five

149
00:18:15,720 --> 00:18:24,600
percent of cases people or write their
own libraries for this and what you see

150
00:18:24,600 --> 00:18:36,120
here is an animation loading a project
it is a gaming anjam for which such

151
00:18:36,120 --> 00:18:39,540
library with a Z of preferences was
created

152
00:18:42,150 --> 00:18:46,380
and all the way around people

153
00:18:46,380 --> 00:18:51,960
normal you want to obtain generators or
encounters to assemble everything back

154
00:18:51,960 --> 00:18:59,490
and from all those cells we make up some
file

155
00:19:00,120 --> 00:19:04,350
well everything goes in the opposite
direction in the same way your library

156
00:19:04,350 --> 00:19:10,020
is written in code is written to
complete such a transformation

157
00:19:11,460 --> 00:19:20,700
well these two slides are very much
alike as well as the code there is

158
00:19:20,700 --> 00:19:31,980
traditional approach to such clear room
or engineering their engineer study is a

159
00:19:31,980 --> 00:19:38,640
dump for a long time comes up with a
pose as a saying that leaves cells may

160
00:19:38,640 --> 00:19:45,630
contain this or those cells might
contain that if it is simple hypothesis

161
00:19:45,630 --> 00:19:55,980
it is just checked manually to make sure
the different tiers of those structures

162
00:19:55,980 --> 00:20:07,140
are aligned should formats be slightly
more complex a processing code is

163
00:20:07,140 --> 00:20:11,250
written to do or what you saw on the
previous slides

164
00:20:11,250 --> 00:20:20,880
however it's not uploaded to the memory
instead of that it is uploaded to the

165
00:20:20,880 --> 00:20:26,130
some debugging us set out to check the
hypothesis which is an intermediate

166
00:20:26,130 --> 00:20:33,900
program designed to transform the income
to visualize the incoming file

167
00:20:38,100 --> 00:20:49,230
for the purpose of hypotheses checking
in ninety percent of cases it has found

168
00:20:49,230 --> 00:20:56,370
out that they're reading meals is not
ideal for reading from the flow and a

169
00:20:56,370 --> 00:20:57,809
later

170
00:20:57,809 --> 00:21:01,230
in a minute I will show

171
00:21:01,230 --> 00:21:18,150
why why this project and it's not a
trivial task of putting all those

172
00:21:18,150 --> 00:21:25,620
variables in one line with ending
transformation and so on

173
00:21:26,640 --> 00:21:33,630
well with this we end up with yet
another library we compile we start we

174
00:21:33,630 --> 00:21:40,110
check our hypothesis for of this
particular program and we repeated many

175
00:21:40,110 --> 00:21:51,449
times until we find answers for all
questions or until we find ourselves in

176
00:21:51,450 --> 00:21:58,770
front of an obstacle we cannot eliminate
what kind of means are available to

177
00:21:58,770 --> 00:22:04,350
those who want to do this work 99
percent if not one hundred percent of

178
00:22:04,350 --> 00:22:08,730
those present here have seen

179
00:22:10,200 --> 00:22:13,470
<operand> four </operand> years or
editors at least once

180
00:22:14,100 --> 00:22:17,280
never was i am going to demonstrate it
to you

181
00:22:21,380 --> 00:22:28,220
this is our great Russian few editors
sometimes used

182
00:22:29,240 --> 00:22:39,920
that's what we can see and meditate on
front of prior to proceeding to more

183
00:22:39,920 --> 00:22:46,880
sophisticated tools i will allow myself
to give you another example that i'll be

184
00:22:46,880 --> 00:22:54,800
using in order to illustrate how those
tools work i'm going to use the format

185
00:22:54,800 --> 00:22:56,600
of the game

186
00:22:56,600 --> 00:23:06,800
do what which is one of the simplest
container formats it was used in really

187
00:23:06,800 --> 00:23:09,470
impatient for games

188
00:23:09,470 --> 00:23:15,860
the original development was done
between 1995

189
00:23:16,460 --> 00:23:25,580
92 in 95 you'll find a lot of borough
code here borrowed from earlier projects

190
00:23:25,580 --> 00:23:30,230
the format itself is pretty sample on
the one hand on the other hand it on the

191
00:23:30,230 --> 00:23:38,720
straights all the interesting elements
that can be encountered in our container

192
00:23:38,720 --> 00:23:50,030
format we have magic here which is kind
of a signature the four bytes from the

193
00:23:50,030 --> 00:23:51,980
beginning of the file

194
00:23:51,980 --> 00:23:58,340
they are letters I don't you find our
file you those letters are not the

195
00:23:58,340 --> 00:24:06,050
present their the engine well a sound in
our message that on the header we see a

196
00:24:06,050 --> 00:24:14,540
4-byte filled with our in experiments or
other number of files or in our

197
00:24:14,540 --> 00:24:15,480
container

198
00:24:15,480 --> 00:24:25,980
yeah there is also the shift indicator
index offside the index itself is not

199
00:24:25,980 --> 00:24:33,720
directly linked with the header it does
not follow of the header with this index

200
00:24:33,720 --> 00:24:43,560
underscore how fast we can read our
structures 8 + 8

201
00:24:45,390 --> 00:24:55,050
well 16 16 white land alone or one
structure corresponds to one file one

202
00:24:55,050 --> 00:25:02,820
reading the file the engine first
results complete now which files

203
00:25:02,820 --> 00:25:09,689
it has internal where to look for them
however at this stage the engine does

204
00:25:09,690 --> 00:25:18,300
not read the files themselves with
proper or parser of this format

205
00:25:18,300 --> 00:25:25,230
one should not read the content of the
files all the files that are present in

206
00:25:25,230 --> 00:25:39,480
the container until the are really
needed the files themselves are shifted

207
00:25:39,480 --> 00:25:51,510
uh yes it is mentioned in the field they
get the found with a 16 the sounds the

208
00:25:51,510 --> 00:25:57,210
main platform is us in told us is pretty
simple

209
00:26:00,669 --> 00:26:10,330
another example of more advanced
software which is software of a high

210
00:26:10,330 --> 00:26:18,309
level and here we need something more of
than just taking our hypothesis

211
00:26:19,840 --> 00:26:28,269
there are hex fears and editors with
templates you can see some seven of them

212
00:26:28,269 --> 00:26:44,169
and total the are between 10 and 20
though so highlight a dream of the to

213
00:26:44,169 --> 00:26:49,480
highlight of the green are those
accounting for some eighty percent of

214
00:26:49,480 --> 00:26:54,519
this market they are 0 1 0 editor and a
Texan ear

215
00:26:54,519 --> 00:27:02,019
well the first one

216
00:27:02,529 --> 00:27:07,539
the former is currently passing you
Elvis movie to a hex inator

217
00:27:08,049 --> 00:27:13,149
there are other of yours and editors
with templates to but there is no point

218
00:27:13,149 --> 00:27:15,789
in discussing them now

219
00:27:15,789 --> 00:27:20,080
space Cape

220
00:27:20,630 --> 00:27:24,470
I beg upon the for typos

221
00:27:24,470 --> 00:27:28,130
it's should be 0 1 0 0

222
00:27:29,030 --> 00:27:38,420
it looks like this so the difference
between from a dumb sex editor is that

223
00:27:38,420 --> 00:27:42,590
apart from the has dumped and some
reputation of this hex dump in

224
00:27:42,590 --> 00:27:49,280
symbolical we also have a tree of
structures marked so within this file so

225
00:27:49,280 --> 00:27:51,920
we can move in that tree

226
00:27:51,920 --> 00:27:55,640
we generate this tree using this kind of
code

227
00:27:56,150 --> 00:28:02,840
this is an absolutely imperative type of
codes and please take a pay attention to

228
00:28:02,840 --> 00:28:09,830
that we create two structures in the
header structure and the index entry

229
00:28:09,830 --> 00:28:20,149
structure and then we're saying that
first we have a header and we do it

230
00:28:20,150 --> 00:28:34,970
apparently by calling some function to
move and then sign the final entry array

231
00:28:34,970 --> 00:28:37,700
the X inator looks

232
00:28:37,700 --> 00:28:42,320
similarly that's also a dump

233
00:28:43,880 --> 00:28:47,060
also a tree that

234
00:28:48,490 --> 00:28:55,630
you can take a look at the X inator has
a tree editor that other one hand should

235
00:28:55,630 --> 00:29:01,330
simplify it safe for the task of
describing the format but on the other

236
00:29:01,330 --> 00:29:07,240
hand in my opinion it's sometimes easier
to do it from director of the keyboard

237
00:29:07,240 --> 00:29:12,100
then i've been using this editor the
grammar is the same

238
00:29:13,000 --> 00:29:21,820
looks like this both for the file
template and X inator vaccinator is just

239
00:29:21,820 --> 00:29:31,330
a bit some more declarative more verbose
it has certain elements of the

240
00:29:31,330 --> 00:29:39,280
capability to take some structures out
of these after this format and reproduce

241
00:29:39,280 --> 00:29:49,720
them separately outside this main tree

242
00:29:49,720 --> 00:29:55,150
so what's good about these hex editor
says they show the tree of objects and

243
00:29:55,150 --> 00:30:01,240
their values right in the life file with
examples things like that in some of

244
00:30:01,240 --> 00:30:07,840
these editors has a visual treat editor
and the show which are places in the

245
00:30:07,840 --> 00:30:12,220
binary stream objects take so what's bad
about them

246
00:30:12,760 --> 00:30:20,350
the first and most important thing is
the imperative character for 101 it's

247
00:30:20,350 --> 00:30:22,090
one hundred percent imperative

248
00:30:22,090 --> 00:30:29,860
it says see like language as we've just
seen for most others there are attempts

249
00:30:29,860 --> 00:30:35,770
to implement a declarative language but
once it lacks in functionality

250
00:30:35,770 --> 00:30:38,230
developers

251
00:30:38,230 --> 00:30:43,750
solve the problem in a very simple way
using XML or some other format to the

252
00:30:43,750 --> 00:30:45,730
describes the grandma

253
00:30:45,730 --> 00:30:55,210
they insert a tag where they insert a
script in Python or Java Script that

254
00:30:55,210 --> 00:31:00,910
does the dirty work that the declarative
formats including doing

255
00:31:00,910 --> 00:31:13,960
focus on the representation in the
layout file attention is given to colors

256
00:31:13,960 --> 00:31:19,090
comments and things like that but you
don't actually use it

257
00:31:19,090 --> 00:31:27,610
value itself when it's about the formal
description of the format these editors

258
00:31:27,610 --> 00:31:33,729
don't do a good job of automating for
instance if you want to run some

259
00:31:33,730 --> 00:31:38,919
hypotheses on thousands of several
thousand two packets and get some

260
00:31:38,919 --> 00:31:42,700
statistically valid result is impossible

261
00:31:42,700 --> 00:31:47,950
so loading these packets one by one in
such an editor and trying to learn

262
00:31:47,950 --> 00:31:50,710
something about them

263
00:31:50,710 --> 00:32:00,460
looks quite foolish almost all these
editors read the file and market

264
00:32:00,460 --> 00:32:07,179
I like it out or fully the memory so
you're loaded and the container will be

265
00:32:07,179 --> 00:32:12,130
a red marked up and in the process of
this marking up for instance for what

266
00:32:12,130 --> 00:32:16,360
working with some large image DVD or
blu-ray dias

267
00:32:16,360 --> 00:32:21,639
it will immediately be stored in the
memory boat and nothing good will come

268
00:32:21,640 --> 00:32:25,600
out of it except perhaps the octa it

269
00:32:25,600 --> 00:32:33,250
it's all a proprietary closed software
with all the drawbacks soon drawbacks

270
00:32:33,250 --> 00:32:36,530
so with very limited

271
00:32:36,530 --> 00:32:42,530
ability and to impact the development
going to add some ideas

272
00:32:43,040 --> 00:32:52,610
what else does a person trying to do for
might reverse engineering typically have

273
00:32:52,610 --> 00:33:00,800
you can go towards white shark and other
traffic analyzes i am sure that most of

274
00:33:00,800 --> 00:33:09,050
the energies have seen such a tools at
least ones in fact the it looks like a

275
00:33:09,050 --> 00:33:17,240
dump and then some tree built out of it
and then there are pros and cons for all

276
00:33:17,240 --> 00:33:18,770
socials

277
00:33:18,770 --> 00:33:24,170
there are lots of wash of the sectors
that but they also one hundred percent

278
00:33:24,170 --> 00:33:30,440
imperative and so they are very
difficult to implement even if you want

279
00:33:30,440 --> 00:33:36,320
to start the investigation of a format
with writing at the sector

280
00:33:36,320 --> 00:33:41,570
it's usually a bad idea because it
becomes too difficult to do it

281
00:33:42,590 --> 00:33:52,399
there aren't so called EMS a also known
as maxscript also known as by no

282
00:33:52,400 --> 00:33:55,700
maxscript also known as multi script

283
00:33:55,700 --> 00:34:02,930
it's a family of specialized scripting
languages intended to derive data out of

284
00:34:02,930 --> 00:34:09,380
binary files popular in the community
and doing a reverse engineering of games

285
00:34:09,380 --> 00:34:15,290
so this is an example of a wild file but
again

286
00:34:16,480 --> 00:34:23,168
there are two big problems about that on
the one hand this is indeed that is

287
00:34:23,168 --> 00:34:28,179
indeed a good database of accumulated
former descriptions

288
00:34:29,020 --> 00:34:34,210
there are lots of embedded algorithms
but it's imperative and it's only

289
00:34:34,210 --> 00:34:36,190
intended to solve one problem

290
00:34:36,190 --> 00:34:40,510
for instance in most cases it just to
take some file out of the container and

291
00:34:40,510 --> 00:34:43,510
container and that's it

292
00:34:44,739 --> 00:34:47,739
there are lots of other formats

293
00:34:47,739 --> 00:34:52,209
there are lots of formats and it's not
going to dwell in them in detail

294
00:34:52,929 --> 00:34:58,630
this is the so-called been pack which is
the declarative and compose into a c++

295
00:34:58,630 --> 00:35:03,670
also extendable by c++ inserts

296
00:35:03,670 --> 00:35:09,369
there are lots of academic projects are
written in different years and flashing

297
00:35:09,369 --> 00:35:14,260
once and then gone now forever into the
limbo

298
00:35:14,260 --> 00:35:21,310
now there's how the so-called and dev dl
forward in fact this is the closest

299
00:35:21,310 --> 00:35:26,710
thing to what one with wish to have and
what would wish to work with its at the

300
00:35:26,710 --> 00:35:32,890
clarity of format xml like it's trying
to describe the structure and basically

301
00:35:32,890 --> 00:35:40,540
all the past few years in some tools
appears to you to use it but when I saw

302
00:35:40,540 --> 00:35:42,340
the complexity of this

303
00:35:42,340 --> 00:35:48,100
no formats well this picture here is
perhaps only three percent of the total

304
00:35:48,100 --> 00:35:51,100
description of the file pick up

305
00:35:51,700 --> 00:35:57,669
so when I saw that so it became
absolutely an interesting for me so it's

306
00:35:57,670 --> 00:36:05,290
really a to general and its intended for
assaulting a more generic task have been

307
00:36:05,290 --> 00:36:11,230
a lot of a task of attempts to create
the clarity descriptions of binary

308
00:36:11,230 --> 00:36:15,100
structures as applied to one specific
language

309
00:36:15,100 --> 00:36:19,690
so what do i want to present a day and
to share with him

310
00:36:19,690 --> 00:36:22,520
ok I structure that we made

311
00:36:22,520 --> 00:36:30,440
as follows from all the bomb is a
declarative language of binary data

312
00:36:30,440 --> 00:36:33,440
structure description

313
00:36:34,730 --> 00:36:44,180
we tried not to use imperative things at
the description in the case why former

314
00:36:44,180 --> 00:36:48,980
is compiled into the source code of the
target language so we're initially

315
00:36:48,980 --> 00:36:56,510
trying to get these so-called passes and
now we are supporting about five

316
00:36:56,510 --> 00:37:02,630
languages at the output and basically
there's nothing standing in the way for

317
00:37:02,630 --> 00:37:08,660
us to extend this list we have a
visualizer for now fast-forward

318
00:37:08,660 --> 00:37:16,460
prototyping as a relay development
working with cat I struct does not even

319
00:37:16,460 --> 00:37:23,030
touch the code and doesn't write the
code the script or some or anything else

320
00:37:23,030 --> 00:37:31,130
until it's required until automation is
needed which looks very much like the

321
00:37:31,130 --> 00:37:36,920
original in three base to visualize a
visualizer from other and I guess I

322
00:37:37,760 --> 00:37:44,420
forward is basically the same as yellow
it's easy to write alternative compilers

323
00:37:44,420 --> 00:37:48,290
and tools so you don't need some special
any special

324
00:37:48,290 --> 00:37:55,790
editor's one other reminder how do what
format looked and header files

325
00:37:55,790 --> 00:38:01,610
I'll payload so how can you describe it
and quite I struct first sir william

326
00:38:01,610 --> 00:38:07,850
methods and they top level class is
going to call the doom dada which you

327
00:38:07,850 --> 00:38:12,380
can see from the idea and then we
disassemble the format's reverse

328
00:38:12,380 --> 00:38:19,280
engineer former just arrived from the
internet platform so by default all the

329
00:38:19,280 --> 00:38:27,050
integers will be little indian and also
we write a comment application of

330
00:38:27,050 --> 00:38:31,310
comments indicating a which software is
going to use this for months

331
00:38:31,880 --> 00:38:38,120
then we have the sequence of attribute
descriptions so that go one by one all

332
00:38:38,120 --> 00:38:45,650
these advocates will be read in this
sequence the beginning of the next one

333
00:38:45,650 --> 00:38:52,250
is equal to the end of the previous
adjusted for alignment now let's see how

334
00:38:52,250 --> 00:38:59,570
the attributes look out four of them a
line four bytes ASX coding magic in this

335
00:38:59,570 --> 00:39:05,120
index and the school cutie cutie signed
into the gentle bites and same index

336
00:39:05,120 --> 00:39:15,560
offset we have ID the I the identifier
that will be written in the codes

337
00:39:16,190 --> 00:39:20,480
following the rules of the target
language is not to stand out and

338
00:39:20,480 --> 00:39:25,190
examples are shown here how is going to
be a written in Java C sharp and Ruby

339
00:39:25,190 --> 00:39:27,440
and there's a type

340
00:39:27,440 --> 00:39:32,600
it's a type of indication it can be
primitive that's embedded it can be user

341
00:39:32,600 --> 00:39:38,299
based so you can be absent in this case
it will be considered to be a byte array

342
00:39:38,300 --> 00:39:44,720
without any interpretation the primitive
types integer or strings

343
00:39:45,580 --> 00:39:50,860
integers are presented in the following
way

344
00:39:50,860 --> 00:39:59,860
the first letter is unsigned or science
urs then we indicates specify the number

345
00:39:59,860 --> 00:40:02,800
of bytes of this type and if needed

346
00:40:02,800 --> 00:40:07,600
so we also indicated with signal to be a
little indian or big Indian strings

347
00:40:07,600 --> 00:40:12,940
they're either known length in bytes of
symbols or there are strings a bit that

348
00:40:12,940 --> 00:40:16,300
come before the Terminator in ninety
percent of cases

349
00:40:16,870 --> 00:40:21,520
20 in see these are sea strings
sometimes before the dollar sign

350
00:40:21,520 --> 00:40:27,580
no strings and rarely some other options
or are we are in the string to the ends

351
00:40:27,580 --> 00:40:41,980
of the stream a file or the current sub
structure is valid so only the type s TR

352
00:40:41,980 --> 00:40:49,750
and size 42 for the known length for up
to the Terminator we call type str said

353
00:40:49,750 --> 00:40:56,140
and as a terminated oxa up till the end
of stream a type s TI and size us true

354
00:40:56,140 --> 00:41:03,069
now we can use a kite I struct instances
these are almost the same as attributes

355
00:41:03,070 --> 00:41:06,790
but indicating the patient Israel
position from where to read

356
00:41:07,330 --> 00:41:16,990
they are indicated separately sequence
order is not important for them and

357
00:41:16,990 --> 00:41:24,009
apart from other things apart from pasta
type that have already described their

358
00:41:24,010 --> 00:41:34,060
on repeat and repeat expert we can set
the repeat of an attribute for some

359
00:41:34,060 --> 00:41:41,500
fixed number of times by indicating this
in the expression or we can educate and

360
00:41:41,500 --> 00:41:43,300
one ended

361
00:41:43,300 --> 00:41:49,870
repeat up until the end of the string of
the stream and all we can indicate

362
00:41:49,870 --> 00:41:52,870
specify some condition

363
00:41:53,710 --> 00:42:01,330
I was small discussion to the
expressions that can be used of course

364
00:42:01,330 --> 00:42:06,850
it's a special language that we have
introduced inside it automatically

365
00:42:06,850 --> 00:42:13,420
translates in the target language
keeping the tire the types of the syntax

366
00:42:13,420 --> 00:42:20,350
is similar to a an average see like
language and it can be used together

367
00:42:20,350 --> 00:42:29,259
with such attributes for instance you
can say repeat expert 54 all these

368
00:42:29,260 --> 00:42:34,750
languages it will mean repeat the
attribute five times you can indicate

369
00:42:34,750 --> 00:42:40,150
repeat expert full bar which will need
to repeat the attribute that as many

370
00:42:40,150 --> 00:42:48,700
times as indicated in the integer full
bomb attribute within the current type

371
00:42:48,700 --> 00:42:49,750
of class

372
00:42:49,750 --> 00:42:59,950
you can specify that the bar is the
attribute of the next class

373
00:43:00,790 --> 00:43:07,150
compare it with the tea for a string and
it will correctly fascinating to the

374
00:43:07,150 --> 00:43:16,750
target language you can have create some
more complex sophisticated conditions

375
00:43:16,750 --> 00:43:22,090
related to SA or territory operator and
the right user types that show

376
00:43:22,600 --> 00:43:29,110
that's a specified in the types column
it says the same a declaration or

377
00:43:29,110 --> 00:43:35,230
announcement as in the three routes you
can use a sick into sin types

378
00:43:35,230 --> 00:43:42,490
similar things but they are implemented
and the glasses and you can refer to

379
00:43:42,490 --> 00:43:45,490
them after the task as a separate type

380
00:43:46,860 --> 00:43:57,780
we can also note here and education to
IO root and the sky oh this is done so

381
00:43:57,780 --> 00:44:06,450
that by default within the type
specified reading it should be done from

382
00:44:06,450 --> 00:44:14,220
the string of the same time so we'll be
running about and refer to the beginning

383
00:44:14,220 --> 00:44:18,029
of the index rather than to the
beginning of the file so we are

384
00:44:18,030 --> 00:44:24,600
specifically indicated him that we're
going to take addresses from the start

385
00:44:24,600 --> 00:44:26,069
of the three of 73

386
00:44:26,070 --> 00:44:32,430
it all looks so quite difficult from the
first glance which in fact it isn't so

387
00:44:32,430 --> 00:44:40,379
you can all be compiled it compiles with
a simple compiler a call and the input

388
00:44:40,380 --> 00:44:44,790
we have a case file and the output in
this particular case a module for python

389
00:44:44,790 --> 00:44:57,150
and you can immediately connected use we
import we can we use a the static method

390
00:44:57,150 --> 00:45:02,520
from file in a little of the file and
after that we can address it directly

391
00:45:03,510 --> 00:45:08,460
the fields of this class is not to read
this file we can ask the number of

392
00:45:08,460 --> 00:45:12,420
elements the number of files in the
container getting it

393
00:45:12,420 --> 00:45:19,650
we can ask the name in this particular
case of file 42 we can open up a file

394
00:45:19,650 --> 00:45:29,910
and write the content of the file that
we want into it or we can look at it in

395
00:45:29,910 --> 00:45:37,170
the visualizer in a visualizer and the
view would be very similar to the one in

396
00:45:37,170 --> 00:45:38,610
hex a doors

397
00:45:38,610 --> 00:45:43,590
yeah you can see the three you can see
the dump for the location of the dump

398
00:45:43,590 --> 00:45:45,800
oh you can move

399
00:45:45,800 --> 00:45:51,470
we'll see and move between dependencies
between elements so on so forth

400
00:45:52,100 --> 00:45:55,100
so that's basically it I think thank you

401
00:45:56,690 --> 00:46:02,990
yes this is it does so we have shown the
capabilities that lowers a pass

402
00:46:02,990 --> 00:46:09,649
structures of fixed format with field
length depending on attributes and

403
00:46:09,650 --> 00:46:14,990
computers from expressions with
conditional fields with feel repetitions

404
00:46:15,740 --> 00:46:22,310
whatever from the start of the stream
with the women arbitrary set off set in

405
00:46:22,310 --> 00:46:25,580
your own stream and in the third body
stream thank you

406
00:46:25,580 --> 00:46:32,810
yeah yeah question

407
00:46:32,810 --> 00:46:40,190
questions are welcome to ask a question
do you have the capability to process

408
00:46:40,190 --> 00:46:46,250
the data transformation for instance we
have a data format you need to unpack it

409
00:46:46,250 --> 00:46:47,630
and then

410
00:46:47,630 --> 00:46:58,520
no data is some encrypted format and we
need to a process as a data imagine

411
00:46:58,520 --> 00:47:05,870
their coding base64 so first you need to
decode it and then in code again

412
00:47:05,870 --> 00:47:09,470
excuse me I can translate

413
00:47:09,470 --> 00:47:12,950
so what's being said without a
microphone can you suggest that the

414
00:47:12,950 --> 00:47:15,950
speaker presses the button

415
00:47:19,579 --> 00:47:26,869
yeah

416
00:47:44,740 --> 00:47:47,740
yeah

417
00:47:55,810 --> 00:47:58,810
yeah

418
00:48:06,270 --> 00:48:16,980
well my question is I'm sorry the
question I destruct is is it free

419
00:48:16,980 --> 00:48:19,650
software always paid for it is free

420
00:48:19,650 --> 00:48:23,400
can you please suggest the speaker to
press the microphone button because at

421
00:48:23,400 --> 00:48:26,400
the interpret it doesn't hear what he's
saying

422
00:48:32,850 --> 00:48:44,640
this software is distributed for apache
or met licenses and somewhere in get

423
00:48:44,640 --> 00:48:50,279
love but do you have links where we can
download it here it is

424
00:48:50,280 --> 00:48:58,980
thank you so much the question why did
you give up on TSN one for some reason

425
00:48:58,980 --> 00:49:03,450
it was absent from the correct
comparison list it's also the clarity

426
00:49:03,450 --> 00:49:09,419
and quite non-trivial protocol so use it
for instance to the entire telecom

427
00:49:09,420 --> 00:49:13,590
business is based on an sn1 it's a long
story

428
00:49:14,730 --> 00:49:28,800
to be brief because of high complexity
and less than ideal supportability of BI

429
00:49:28,800 --> 00:49:29,790
tools

430
00:49:29,790 --> 00:49:38,970
so perhaps what you mean is not is n1
about ACN one edr asn.1 itself as far as

431
00:49:38,970 --> 00:49:40,080
I remember

432
00:49:40,080 --> 00:49:44,910
obviously it's a whole family of formats
and for the most part

433
00:49:46,470 --> 00:49:52,230
s & 1 when people refer to as one they
mean

434
00:49:52,230 --> 00:50:00,240
also the RCR that generally speaking i
have almost no relation to this

435
00:50:00,930 --> 00:50:03,960
these are just realization of formats

436
00:50:03,960 --> 00:50:14,250
cumulus that carrying this game came up
with in the format that is so yeah that

437
00:50:14,250 --> 00:50:24,599
would be my brief answer is it possible
to analyze the data compiled for

438
00:50:24,599 --> 00:50:27,630
different platforms so that the
structures would be the same but the

439
00:50:27,630 --> 00:50:31,560
data being represented in different ways
for different platforms for instance

440
00:50:31,560 --> 00:50:37,140
Intel spark so reversing not only the
order of bytes in one attribute but also

441
00:50:37,140 --> 00:50:43,799
the entire structure is there any switch
or a way to indicate there's a

442
00:50:43,800 --> 00:50:50,609
capability to use this conditional
structure so that sour in the middle of

443
00:50:50,609 --> 00:50:54,990
a decision making that for instance
further we're going to have a

444
00:50:54,990 --> 00:51:02,160
substructure specifical intel or spark
so by the platform flag it appears in

445
00:51:02,160 --> 00:51:07,950
so if there's some educated to the
specific platter specific platform the

446
00:51:07,950 --> 00:51:09,629
indication and a file

447
00:51:09,630 --> 00:51:13,890
yes and the data yes if in the day then
yes of course using this leg

448
00:51:14,490 --> 00:51:20,700
you know you can can let's say a switch
passing to one instruction or the other

449
00:51:22,170 --> 00:51:26,160
thank you thank you very much for your
presentation

450
00:51:27,060 --> 00:51:30,450
please pick two questions that you like
most thank you

451
00:51:33,760 --> 00:51:39,700
well in that case perhaps I will

452
00:51:39,700 --> 00:51:44,680
and what its to the guy who asked about
processing

453
00:51:50,930 --> 00:51:58,009
and perhaps the one to the guy who asked
about conditional processing

454
00:51:58,010 --> 00:52:01,400
yeah thank you thank you very much

