1
00:00:00,000 --> 00:00:09,420
gracia HD part of our discussion one
project get yelled at glad that the

2
00:00:09,420 --> 00:00:14,519
automatic lot of the project wrong you
have to the gardens at sea . number of

3
00:00:14,519 --> 00:00:18,150
miles away and of course because i probe
or strategic ingenious the publicity

4
00:00:18,960 --> 00:00:25,980
it's like John gift store type of
questions but they're not only change

5
00:00:25,980 --> 00:00:30,840
the walk are concerned you have kids had
moisture John the parable of the FT that

6
00:00:30,840 --> 00:00:36,480
according your dad Ron the DPR I tell
you later - for experimental important

7
00:00:36,480 --> 00:00:45,569
is not yet drawn deeper at vs mystery
blonde chick quarterly questions from

8
00:00:45,570 --> 00:00:50,309
and now due to power in the past yet or
not sail in no way Islamic coral in the

9
00:00:50,309 --> 00:00:57,690
unique so what community you shun revive
myself options to them suggested by just

10
00:00:57,690 --> 00:01:02,489
go boil it was thought type of question
you are in a piece of religion or sexual

11
00:01:02,489 --> 00:01:03,510
person

12
00:01:03,510 --> 00:01:10,259
contributor kotori made upon returning
to accessory or formal grammar on time

13
00:01:10,259 --> 00:01:10,680
it

14
00:01:10,680 --> 00:01:14,460
you just can't change them monster but
we have to measure about it now

15
00:01:14,460 --> 00:01:20,369
processor with your Carter e doesn't
have forgot no I forgot your car in each

16
00:01:20,369 --> 00:01:26,280
in the talk about clipped problem where
is John them so they're about kijana

17
00:01:26,280 --> 00:01:28,979
yeast is that our stone by sorry

18
00:01:28,979 --> 00:01:38,610
another pathetic Nazi war another do at
boo strike seen our startup yamaha

19
00:01:38,610 --> 00:01:41,610
butter

20
00:01:43,800 --> 00:01:48,240
the problem is this from which is not a
problem because this optimization can be

21
00:01:48,240 --> 00:01:56,190
done by one time very easily but when we
have 200 types of hashes it's pretty

22
00:01:56,190 --> 00:01:59,190
difficult to do

23
00:02:02,370 --> 00:02:05,640
that was used as a solution for the
problem

24
00:02:05,640 --> 00:02:09,600
it was used as a solution for the big
slice code

25
00:02:10,750 --> 00:02:14,140
which is a standalone topic

26
00:02:14,140 --> 00:02:20,140
the most desired feature is to be able
to transfer the code and

27
00:02:21,300 --> 00:02:26,190
the optimization can be considered as
the cold transformations

28
00:02:29,430 --> 00:02:35,640
when we split our realization into base
code and the transformations their

29
00:02:35,640 --> 00:02:37,079
realization cannot

30
00:02:37,080 --> 00:02:38,920
becomes simpler

31
00:02:38,920 --> 00:02:47,980
the you can apply to other organs at the
same time we significantly reduce the

32
00:02:47,980 --> 00:02:54,760
complexity and the size of the code to
simplify it would not work with a simple

33
00:02:54,760 --> 00:03:00,850
code we work with our intermediate
representation

34
00:03:02,750 --> 00:03:05,750
he was a very simple instruction
language

35
00:03:07,300 --> 00:03:10,660
we use but it's a high level

36
00:03:12,970 --> 00:03:18,460
object it's the internal representation
which

37
00:03:19,340 --> 00:03:34,129
is applicable for cryptography and cash
riding a typical solutions for hashing i

38
00:03:34,129 --> 00:03:40,370
applied here because it's simpler
simpler to transfer here we do not read

39
00:03:40,370 --> 00:03:44,150
have to restore the construction from
the cold

40
00:03:45,540 --> 00:03:48,170
but in order to get this and committed

41
00:03:48,170 --> 00:03:53,149
presentation we need to have a language
the description of this algorithm

42
00:03:54,750 --> 00:04:04,710
in John's kids there is no a compiler we
we use a object-oriented dsl nuh

43
00:04:04,710 --> 00:04:07,710
over-tighten

44
00:04:08,950 --> 00:04:15,220
let's take a look at the code examples
for example here and we connect

45
00:04:15,220 --> 00:04:20,620
everything we have and eft yeah and the
week wait

46
00:04:20,620 --> 00:04:26,020
the cold accumulation and then we say to
the dsl wear this color should be put

47
00:04:26,020 --> 00:04:28,630
into we describe

48
00:04:28,630 --> 00:04:37,390
variables and we have the two entries we
combine them and they put in to see

49
00:04:37,390 --> 00:04:43,000
variable in Python but not in the
intermediate representation when then we

50
00:04:43,000 --> 00:04:49,390
put the sea with the outport into
intermediate representation

51
00:04:51,980 --> 00:04:55,460
as a return from functioning

52
00:04:55,460 --> 00:04:58,698
after that we type what we have in the
cold

53
00:04:59,330 --> 00:05:03,169
dsl accumulates these instructions

54
00:05:03,790 --> 00:05:09,160
in the list ultimately we have seen in
the beginning that's the object

55
00:05:12,300 --> 00:05:15,230
all of the dsl's and then python

56
00:05:15,230 --> 00:05:18,380
the other dsl's simply I for instance

57
00:05:20,030 --> 00:05:24,380
so they said

58
00:05:24,380 --> 00:05:25,810
ESO cold

59
00:05:25,810 --> 00:05:34,000
looks like cold in a normal language in
simple

60
00:05:36,040 --> 00:05:39,040
as a result

61
00:05:41,390 --> 00:05:44,390
i will write the instructions to the
list

62
00:05:45,370 --> 00:05:48,729
thus we can see two entries

63
00:05:49,420 --> 00:05:56,410
with the linear result

64
00:06:03,880 --> 00:06:06,880
ya hear it's an object

65
00:06:07,670 --> 00:06:11,249
myself

66
00:06:11,249 --> 00:06:22,169
and it's also important to remember that
we do not work with brighton we do not

67
00:06:22,169 --> 00:06:25,679
affect the Vice code we can

68
00:06:26,240 --> 00:06:32,120
use it and my pie to make it first

69
00:06:33,060 --> 00:06:36,150
dsl is the way to

70
00:06:38,009 --> 00:06:50,610
fulfill the instructions with lists
which allows us to mix dsl another cold

71
00:06:50,610 --> 00:06:53,610
one

72
00:06:56,740 --> 00:06:59,740
and use the optimization codes

73
00:07:01,210 --> 00:07:09,580
for the replacement we don't need to
throw away the synthetics the dsl called

74
00:07:09,580 --> 00:07:20,409
we can use the mixed fashion in terms of
the language used

75
00:07:21,039 --> 00:07:30,520
- is a preprocessor there's nothing out
of Python nothing of the kind

76
00:07:33,720 --> 00:07:37,770
and the python is a very powerful
preprocessor

77
00:07:39,580 --> 00:07:40,510
what

78
00:07:40,510 --> 00:07:45,640
allows us to use to see cold-adapted

79
00:07:47,870 --> 00:07:50,270
and use the simple representation

80
00:07:50,270 --> 00:07:54,530
it can also adopt the library is written

81
00:07:54,530 --> 00:07:57,320
- more

82
00:07:57,320 --> 00:08:04,040
but we have one problem we don't see the
names of the variables from python when

83
00:08:04,040 --> 00:08:08,450
we have a B and C here here was just
have numbered variables

84
00:08:11,750 --> 00:08:16,430
let's consider the first and most
interesting construction edition

85
00:08:20,340 --> 00:08:21,150
yeah

86
00:08:21,150 --> 00:08:28,169
you see here that is just a list of
strength for exact thing without any

87
00:08:28,170 --> 00:08:36,240
obstruction at the same time the natural
natural quite naturally

88
00:08:36,979 --> 00:08:42,979
we have a representation which does not
change the object it returns the object

89
00:08:42,979 --> 00:08:49,190
with the new name and it's applied to it
even if we work with one single variable

90
00:08:49,190 --> 00:08:51,139
inviting

91
00:08:51,139 --> 00:08:56,449
it's a very useful her presentation in
compilers we have static single

92
00:08:56,449 --> 00:09:08,599
assignment on these representations look
very much like when we end up having the

93
00:09:08,600 --> 00:09:13,519
internal representation we start
transferring it and that's the key

94
00:09:13,519 --> 00:09:14,750
advantage

95
00:09:14,750 --> 00:09:20,600
d of t where you might want to transfer
the code

96
00:09:23,300 --> 00:09:27,199
at the same time the programmer they
come up with a new filter

97
00:09:28,460 --> 00:09:31,329
and use many filters here

98
00:09:31,329 --> 00:09:36,309
for inter linger forever sing and it
slice it

99
00:09:38,410 --> 00:09:45,250
there is one interesting final things
how we put this cold

100
00:09:45,250 --> 00:09:48,250
see we're in in plate

101
00:09:49,360 --> 00:09:54,579
well we put in Python

102
00:09:55,710 --> 00:10:05,010
we have a string with a key we use a
standard string template at the same

103
00:10:05,010 --> 00:10:06,850
time it is

104
00:10:06,850 --> 00:10:14,620
puts the variables with a dollar sign
and put put this file into code and we

105
00:10:14,620 --> 00:10:18,009
have the code generated as the output

106
00:10:18,009 --> 00:10:28,720
well the the generated code is combined
them with a intermediate representation

107
00:10:28,720 --> 00:10:34,120
and our template and template is using
the macros to connect with it

108
00:10:34,910 --> 00:10:52,730
it identifies how the generated code is
embedded normally wear the C and we have

109
00:10:52,730 --> 00:10:56,360
a test output into opencl

110
00:10:58,710 --> 00:11:02,370
there's a problem with that

111
00:11:02,370 --> 00:11:05,370
we're not an ordinary called generated

112
00:11:08,220 --> 00:11:19,980
we output the dirty code which matches
our representation on the one hand is

113
00:11:19,980 --> 00:11:22,050
bad on the other hand is good

114
00:11:22,050 --> 00:11:26,130
we have plenty of code on the one hand
on the other hand we can easily map it

115
00:11:26,130 --> 00:11:34,080
into the instruction when do when we do
debugging and then generated code is

116
00:11:34,080 --> 00:11:48,630
using the simple compilation for John
these formats using the workflow

117
00:11:51,170 --> 00:11:54,170
over this year

118
00:11:56,660 --> 00:12:03,740
additionally 274 performance last year
we added more than 100 formats

119
00:12:04,490 --> 00:12:09,139
yeah and the compilation of forwards
from

120
00:12:10,060 --> 00:12:16,300
formalize we do it

121
00:12:16,300 --> 00:12:21,099
offline and potentially we need to
create a colder which is better through

122
00:12:21,100 --> 00:12:25,420
optimization but we do not do we do not
do this

123
00:12:34,250 --> 00:12:43,460
during this process of development it
turned out that the hardest part was to

124
00:12:43,460 --> 00:12:50,150
write that template in see because it
would have to support the features like

125
00:12:50,150 --> 00:12:57,620
the factorization it slicing into living
on the other hand who are forced to

126
00:12:57,620 --> 00:13:06,020
create a new template because we had to
creep hash for example people

127
00:13:07,070 --> 00:13:10,070
for truecrypt breach

128
00:13:10,640 --> 00:13:12,130
we use

129
00:13:12,130 --> 00:13:16,090
is a decryption of data

130
00:13:17,950 --> 00:13:24,850
after that we see some magic true and do
we check in very finest hear see and we

131
00:13:24,850 --> 00:13:28,810
did not put crc into the algorithm it
stayed

132
00:13:30,850 --> 00:13:33,270
inside the template

133
00:13:33,270 --> 00:13:38,400
so if we multiply the templates

134
00:13:39,089 --> 00:13:46,499
we multiply the work and we just need to
put these parts inside the FK it

135
00:13:51,420 --> 00:14:00,240
last year we proved that we can describe
the algorithms make the algorithms

136
00:14:00,240 --> 00:14:02,160
effective

137
00:14:02,160 --> 00:14:09,899
this year we saw that we can create many
algorithms easily but so far we're going

138
00:14:09,899 --> 00:14:16,290
to use many algorithms and applying
optimization of kid was for fine tuning

139
00:14:16,290 --> 00:14:25,589
of the optimization and it proves a
problem because when we need to generate

140
00:14:25,589 --> 00:14:26,699
a lot

141
00:14:26,699 --> 00:14:35,550
we need to develop a strategy for
optimization and automated automate this

142
00:14:35,550 --> 00:14:43,889
process use tests or two may for
automation which will follow

143
00:14:45,100 --> 00:14:51,250
another point here is that DF get back
back and optimization internal

144
00:14:51,250 --> 00:14:59,020
representation so developing with cash
and with the has development we can

145
00:14:59,020 --> 00:15:05,680
create a new instruction added to all of
the optimizations had a new optimization

146
00:15:05,680 --> 00:15:14,560
and make something in back aid and DF
kate is X actively developing and seems

147
00:15:14,560 --> 00:15:20,380
like I'm the only developer who can
develop it and use it

148
00:15:21,160 --> 00:15:24,610
so what are the conclusions

149
00:15:24,610 --> 00:15:31,300
John Day Off kid can create in good
quote it can create lots of caches but

150
00:15:31,300 --> 00:15:35,229
it cannot do many of the good ones

151
00:15:35,230 --> 00:15:39,580
thank you weren't very much and will be
working on it and the code will be in

152
00:15:39,580 --> 00:15:43,030
the repository

153
00:15:43,030 --> 00:15:47,500
do you have questions

154
00:15:50,620 --> 00:16:00,850
no me at the coach email processor bleep
riveting did have benchmarks

155
00:16:01,570 --> 00:16:13,750
we're able to get such accelerations and
last year we had it and the best

156
00:16:13,750 --> 00:16:18,940
performance was some 10 10 percentage
increase through the optimizations that

157
00:16:18,940 --> 00:16:22,210
we did not have in John this year

158
00:16:24,690 --> 00:16:30,480
we did not check all the speed that much
and we are lagging behind many times by

159
00:16:30,480 --> 00:16:35,730
the size of the vector because we do not
back to the code but it will be there

160
00:16:50,470 --> 00:16:56,950
did you check the Russian realizations
of hash for this utility because then

161
00:16:56,950 --> 00:17:04,330
they are published on different websites
and the different conferences mentioned

162
00:17:04,329 --> 00:17:06,220
some achievements

163
00:17:06,220 --> 00:17:14,500
what about your solution somewhere while
in russian in russia we use a ghost with

164
00:17:14,500 --> 00:17:15,940
a strike strike work

165
00:17:15,940 --> 00:17:18,940
codename the hatches there are very
interesting

166
00:17:19,780 --> 00:17:24,310
they are very friendly to be slicing and
they're not too friendly father

167
00:17:24,310 --> 00:17:26,710
optimizations will be working on that

168
00:17:26,710 --> 00:17:30,010
so I'm not tried that he had no not yet

169
00:17:30,010 --> 00:17:36,730
thank you

170
00:17:37,720 --> 00:17:41,320
the words of probability Melissa's the
thank you Alex

