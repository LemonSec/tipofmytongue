1
00:00:04,640 --> 00:00:06,399
and today we are going to talk about

2
00:00:06,399 --> 00:00:08,800
roots kids and this presentation would

3
00:00:08,800 --> 00:00:10,559
not have been here without pavel

4
00:00:10,559 --> 00:00:14,240
maxwelton and he's not presenting today

5
00:00:14,240 --> 00:00:16,880
because he is actually you know

6
00:00:16,880 --> 00:00:18,880
presenting his thesis

7
00:00:18,880 --> 00:00:21,359
although you would say that you know the

8
00:00:21,359 --> 00:00:23,519
presentation that's happening right now

9
00:00:23,519 --> 00:00:25,199
is much more important than what he is

10
00:00:25,199 --> 00:00:27,840
doing and he's actually made a great

11
00:00:27,840 --> 00:00:30,560
contribution to the study i will be

12
00:00:30,560 --> 00:00:31,840
presenting

13
00:00:31,840 --> 00:00:33,920
he has got lots of tools on github he's

14
00:00:33,920 --> 00:00:36,399
got his own blog so if you do not know

15
00:00:36,399 --> 00:00:37,360
bubble

16
00:00:37,360 --> 00:00:38,800
check him out

17
00:00:38,800 --> 00:00:40,879
and he's actually one of the organizers

18
00:00:40,879 --> 00:00:45,040
of yowza's ctf so he's

19
00:00:54,320 --> 00:00:56,960
malware detection development at

20
00:00:56,960 --> 00:00:58,879
positive technologies i'm a virus

21
00:00:58,879 --> 00:01:00,000
analyst

22
00:01:00,000 --> 00:01:02,239
previously

23
00:01:02,239 --> 00:01:06,320
expert and together with the team

24
00:01:06,799 --> 00:01:09,119
you know i'm an expert in charge of uh

25
00:01:09,119 --> 00:01:10,880
developing a bunch of tools lists in the

26
00:01:10,880 --> 00:01:12,080
previous slide but we are going to

27
00:01:12,080 --> 00:01:13,840
discuss those kits so

28
00:01:13,840 --> 00:01:16,560
first we'll go into the subject uh

29
00:01:16,560 --> 00:01:17,840
gently

30
00:01:17,840 --> 00:01:19,280
maybe we'll crack some jokes even and

31
00:01:19,280 --> 00:01:21,439
then we'll talk about various uh ruskit

32
00:01:21,439 --> 00:01:22,880
related techniques

33
00:01:22,880 --> 00:01:24,320
we'll see what's bad about them and how

34
00:01:24,320 --> 00:01:26,798
they do it

35
00:01:30,270 --> 00:01:33,119
[Music]

36
00:01:33,119 --> 00:01:34,560
some of you may have visited our

37
00:01:34,560 --> 00:01:36,560
products webinars and some of this

38
00:01:36,560 --> 00:01:40,960
information therefore will not be

39
00:01:51,280 --> 00:01:52,960
you know this is how things so often

40
00:01:52,960 --> 00:01:55,680
starts you know

41
00:01:55,680 --> 00:01:58,960
we discuss if it ever makes sense and it

42
00:01:58,960 --> 00:02:01,520
does sound attractive and we do have our

43
00:02:01,520 --> 00:02:03,360
doubts and then you know

44
00:02:03,360 --> 00:02:05,920
we're on this project for several years

45
00:02:05,920 --> 00:02:08,080
and it all started with a short exchange

46
00:02:08,080 --> 00:02:10,640
of messages

47
00:02:12,160 --> 00:02:14,720
i love googling definitions it's always

48
00:02:14,720 --> 00:02:16,879
funny enough isn't it so for example

49
00:02:16,879 --> 00:02:19,040
this one says that rootkit

50
00:02:19,040 --> 00:02:22,400
is a malicious software that you know

51
00:02:22,400 --> 00:02:24,319
goes into your computer using different

52
00:02:24,319 --> 00:02:25,760
channels obviously we're not going to

53
00:02:25,760 --> 00:02:27,360
use this definition

54
00:02:27,360 --> 00:02:30,160
actually some people know a lot so there

55
00:02:30,160 --> 00:02:33,599
are computer shamans who

56
00:02:35,519 --> 00:02:37,519
well this knows says uh for example that

57
00:02:37,519 --> 00:02:39,760
you know if if you

58
00:02:39,760 --> 00:02:41,840
delete something incorrectly it becomes

59
00:02:41,840 --> 00:02:43,680
even more aggressive

60
00:02:43,680 --> 00:02:44,959
and you know

61
00:02:44,959 --> 00:02:46,879
these people say that they can do

62
00:02:46,879 --> 00:02:49,120
actually anything you know

63
00:02:49,120 --> 00:02:51,920
they can treat your computer of all

64
00:02:51,920 --> 00:02:53,599
sorts of illnesses so they are in these

65
00:02:53,599 --> 00:02:55,760
computer shamans actually this is not

66
00:02:55,760 --> 00:02:57,200
our case

67
00:02:57,200 --> 00:02:59,920
now root kits as we understand them is a

68
00:02:59,920 --> 00:03:02,640
software that enables the hacker to

69
00:03:02,640 --> 00:03:04,959
escalate privileges to max level on a

70
00:03:04,959 --> 00:03:06,959
given system that's it

71
00:03:06,959 --> 00:03:08,879
you know naturally when you are

72
00:03:08,879 --> 00:03:11,040
omnipotent in a system

73
00:03:11,040 --> 00:03:12,879
you can do anything right

74
00:03:12,879 --> 00:03:14,959
he can launch whatever you like

75
00:03:14,959 --> 00:03:18,480
you can create you can delete and

76
00:03:18,480 --> 00:03:19,519
you can

77
00:03:19,519 --> 00:03:23,440
do so many things and stay unseen

78
00:03:23,440 --> 00:03:26,799
so maximum privilege escalation

79
00:03:26,799 --> 00:03:28,080
is the be all

80
00:03:28,080 --> 00:03:30,400
right so we will be talking

81
00:03:30,400 --> 00:03:33,120
about root kits

82
00:03:33,599 --> 00:03:35,680
let's talk techniques now these are

83
00:03:35,680 --> 00:03:36,879
examples of root kits so they're

84
00:03:36,879 --> 00:03:39,440
numerous naturally this is not an

85
00:03:39,440 --> 00:03:41,440
exhaustive list

86
00:03:41,440 --> 00:03:42,400
and

87
00:03:42,400 --> 00:03:43,840
we've done some

88
00:03:43,840 --> 00:03:46,799
studies and reports on that but what

89
00:03:46,799 --> 00:03:48,159
does this least

90
00:03:48,159 --> 00:03:49,360
suggest

91
00:03:49,360 --> 00:03:51,840
probably you know we don't really need

92
00:03:51,840 --> 00:03:54,159
to consult the full list of 70 root kits

93
00:03:54,159 --> 00:03:56,480
or what have you well these are actually

94
00:03:56,480 --> 00:03:58,560
some of the recent root kits dating back

95
00:03:58,560 --> 00:04:02,400
to 2021 and 2018.

96
00:04:04,959 --> 00:04:07,920
so this is effectively the basis for my

97
00:04:07,920 --> 00:04:10,720
speech today and we are going to

98
00:04:10,720 --> 00:04:14,920
show elements of their codes

99
00:04:25,360 --> 00:04:28,000
so we found one uh funny sample of it

100
00:04:28,000 --> 00:04:31,199
once and uh we actually wanted to you

101
00:04:31,199 --> 00:04:32,960
know learn more about it because once we

102
00:04:32,960 --> 00:04:34,560
help our people who our friends were

103
00:04:34,560 --> 00:04:36,639
doing a network detection

104
00:04:36,639 --> 00:04:39,040
so we we gave this

105
00:04:39,040 --> 00:04:43,080
task to one of our internships

106
00:04:52,030 --> 00:04:54,639
[Music]

107
00:04:54,639 --> 00:04:56,880
i'm not

108
00:04:57,600 --> 00:04:59,440
so finding this stuff is not that

109
00:04:59,440 --> 00:05:00,960
difficult and there is an article in

110
00:05:00,960 --> 00:05:03,039
hubber he actually

111
00:05:03,039 --> 00:05:06,000
published it you know in his own name

112
00:05:06,000 --> 00:05:07,440
and lots of interesting technical

113
00:05:07,440 --> 00:05:08,720
information there

114
00:05:08,720 --> 00:05:10,400
and he does cover lots and lots of

115
00:05:10,400 --> 00:05:12,080
techniques there and he actually

116
00:05:12,080 --> 00:05:14,000
packaged it all very nicely and very

117
00:05:14,000 --> 00:05:16,160
concisely into a single article

118
00:05:16,160 --> 00:05:19,199
so now that's a code

119
00:05:20,320 --> 00:05:21,520
what is it

120
00:05:21,520 --> 00:05:25,039
that we don't really want full privilege

121
00:05:25,039 --> 00:05:26,400
software to do

122
00:05:26,400 --> 00:05:29,280
we certainly don't want them to identify

123
00:05:29,280 --> 00:05:31,360
that a new process is launched and react

124
00:05:31,360 --> 00:05:32,880
to that

125
00:05:32,880 --> 00:05:34,960
so there are you know notifications and

126
00:05:34,960 --> 00:05:37,120
callbacks that do that

127
00:05:37,120 --> 00:05:39,680
so something like this i'm showing here

128
00:05:39,680 --> 00:05:41,600
right now be a set create process notify

129
00:05:41,600 --> 00:05:44,000
routine

130
00:05:45,520 --> 00:05:47,919
for example if uh if we do this for

131
00:05:47,919 --> 00:05:51,919
example we can kill a process right

132
00:05:59,600 --> 00:06:01,919
so this is how it does registration of

133
00:06:01,919 --> 00:06:04,800
uh nebrases notifications

134
00:06:04,800 --> 00:06:06,479
so the same notifications the same

135
00:06:06,479 --> 00:06:08,800
callbacks but in a stream right we will

136
00:06:08,800 --> 00:06:10,479
learn about a new stream and then we

137
00:06:10,479 --> 00:06:12,319
shall be able to react to that for

138
00:06:12,319 --> 00:06:15,120
example we can kill the stream

139
00:06:15,120 --> 00:06:17,280
this one can look like it and

140
00:06:17,280 --> 00:06:19,600
these are fragments of code from the

141
00:06:19,600 --> 00:06:23,039
rootkits i mentioned previously

142
00:06:23,440 --> 00:06:25,680
callbacks and notifications but this

143
00:06:25,680 --> 00:06:27,680
time

144
00:06:27,680 --> 00:06:28,560
on

145
00:06:28,560 --> 00:06:30,720
loading executables

146
00:06:30,720 --> 00:06:33,600
so dlls and libraries are being loaded

147
00:06:33,600 --> 00:06:35,919
and again we'll learn about that

148
00:06:35,919 --> 00:06:38,560
now you may think that just like process

149
00:06:38,560 --> 00:06:40,319
starts you know it can be used for

150
00:06:40,319 --> 00:06:42,560
exfiltration no

151
00:06:42,560 --> 00:06:44,160
it may be useful to some people to know

152
00:06:44,160 --> 00:06:45,680
that

153
00:06:45,680 --> 00:06:48,000
so these were processes but also there

154
00:06:48,000 --> 00:06:50,319
is registry right

155
00:06:50,319 --> 00:06:52,080
so there is a function that will

156
00:06:52,080 --> 00:06:54,960
register callback

157
00:06:55,120 --> 00:06:57,520
callbacks in the register

158
00:06:57,520 --> 00:06:59,840
and there is get cell root c

159
00:06:59,840 --> 00:07:01,840
actually it's not exported as a symbol

160
00:07:01,840 --> 00:07:04,639
on all operating system versions

161
00:07:04,639 --> 00:07:06,400
but you can find it with a signature

162
00:07:06,400 --> 00:07:07,199
search

163
00:07:07,199 --> 00:07:08,639
and then you know with one of the root

164
00:07:08,639 --> 00:07:10,500
kits it can be hijacked

165
00:07:10,500 --> 00:07:13,120
[Music]

166
00:07:13,120 --> 00:07:14,880
so i'm showing here the list of

167
00:07:14,880 --> 00:07:17,280
processes that are being checked so if

168
00:07:17,280 --> 00:07:20,160
we have a system or a services process

169
00:07:20,160 --> 00:07:22,639
then everything will go to it

170
00:07:22,639 --> 00:07:25,759
but if it's a reg edit

171
00:07:25,759 --> 00:07:27,440
then there will be a swap there will be

172
00:07:27,440 --> 00:07:28,960
a substitution

173
00:07:28,960 --> 00:07:31,440
so in the ui the user will not be able

174
00:07:31,440 --> 00:07:35,440
to see certain elements of the registry

175
00:07:35,520 --> 00:07:37,520
so i've mentioned notifications and

176
00:07:37,520 --> 00:07:39,440
callbacks and the list of callbacks is

177
00:07:39,440 --> 00:07:41,599
something that we believe needs to be

178
00:07:41,599 --> 00:07:44,400
very carefully monitored because you

179
00:07:44,400 --> 00:07:47,280
know they are being used a lot by roast

180
00:07:47,280 --> 00:07:48,720
kids

181
00:07:48,720 --> 00:07:50,639
and i'm showing here how list of

182
00:07:50,639 --> 00:07:52,960
callbacks is uh being searched for you

183
00:07:52,960 --> 00:07:54,639
know for further substitution of

184
00:07:54,639 --> 00:07:58,919
addresses so we've registered a callback

185
00:07:59,199 --> 00:08:00,879
and then you know we can find the list

186
00:08:00,879 --> 00:08:04,160
of objects related to it and parse it

187
00:08:04,160 --> 00:08:06,160
and then you know replace and substitute

188
00:08:06,160 --> 00:08:07,039
it

189
00:08:07,039 --> 00:08:08,879
it doesn't have the api here which is

190
00:08:08,879 --> 00:08:11,759
important if there is no api

191
00:08:11,759 --> 00:08:14,720
you know identifying it you know

192
00:08:14,720 --> 00:08:16,720
in an automated way and your system is

193
00:08:16,720 --> 00:08:19,360
very difficult

194
00:08:19,680 --> 00:08:22,000
you know api is often a telltale sign

195
00:08:22,000 --> 00:08:24,879
but you don't need an api for that

196
00:08:24,879 --> 00:08:27,039
so

197
00:08:31,440 --> 00:08:32,799
you know we can do registration of

198
00:08:32,799 --> 00:08:35,039
minifilter driver and this should help

199
00:08:35,039 --> 00:08:35,919
you

200
00:08:35,919 --> 00:08:39,039
hijack operations in the file system

201
00:08:39,039 --> 00:08:41,599
and you know this is the specific syntax

202
00:08:41,599 --> 00:08:44,479
in different rules

203
00:08:46,080 --> 00:08:48,880
this unusual function is not seen as

204
00:08:48,880 --> 00:08:51,519
often i register fs registration change

205
00:08:51,519 --> 00:08:52,240
so

206
00:08:52,240 --> 00:08:56,240
if there is a new file system appearing

207
00:08:56,399 --> 00:08:57,760
or at least

208
00:08:57,760 --> 00:09:01,040
you know a new a new driver being

209
00:09:01,040 --> 00:09:03,920
uploaded for file systems

210
00:09:03,920 --> 00:09:06,720
for the drive not for is basic

211
00:09:06,720 --> 00:09:09,279
it can actually be noticed and then you

212
00:09:09,279 --> 00:09:11,440
can go into the device object stack and

213
00:09:11,440 --> 00:09:13,839
then you can intercept

214
00:09:13,839 --> 00:09:17,440
all the messages going there

215
00:09:17,440 --> 00:09:19,920
so this way

216
00:09:19,920 --> 00:09:22,399
we do not get hooked to a particular

217
00:09:22,399 --> 00:09:24,080
drive you know you can do the same

218
00:09:24,080 --> 00:09:26,800
actually for use basics and you know

219
00:09:26,800 --> 00:09:30,880
manipulate data there or hide data there

220
00:09:33,120 --> 00:09:35,600
now let's talk traffic naturally we can

221
00:09:35,600 --> 00:09:38,160
do data injection in the tcp stream and

222
00:09:38,160 --> 00:09:41,920
there is a special function for that

223
00:09:43,760 --> 00:09:46,959
this is what it will look like

224
00:09:49,200 --> 00:09:52,160
oh there is in fact an sdk microsoft

225
00:09:52,160 --> 00:09:54,880
calls it a windows filtering platform

226
00:09:54,880 --> 00:09:56,640
which enables so many traffic

227
00:09:56,640 --> 00:09:58,320
manipulations which is good and bad at

228
00:09:58,320 --> 00:10:00,640
the same time it is good

229
00:10:00,640 --> 00:10:02,320
because

230
00:10:02,320 --> 00:10:05,120
it is easy to identify you know when

231
00:10:05,120 --> 00:10:07,360
specific functions are recalled

232
00:10:07,360 --> 00:10:10,320
you know these callbacks

233
00:10:11,360 --> 00:10:13,360
they are called not callbacks but colors

234
00:10:13,360 --> 00:10:16,720
in wfv but their d is the same

235
00:10:16,720 --> 00:10:19,440
so if you interest up the function

236
00:10:19,440 --> 00:10:20,640
or if you see a function being

237
00:10:20,640 --> 00:10:22,399
intercepted that shows that somebody is

238
00:10:22,399 --> 00:10:24,000
you know

239
00:10:24,000 --> 00:10:25,600
having fun with your system but again

240
00:10:25,600 --> 00:10:28,560
the problem is that it's legit

241
00:10:28,560 --> 00:10:30,000
which means that you know some good

242
00:10:30,000 --> 00:10:32,160
software designed to protect your

243
00:10:32,160 --> 00:10:34,000
information and defend it

244
00:10:34,000 --> 00:10:37,680
maybe using it so it's not really a 100

245
00:10:37,680 --> 00:10:39,600
percent

246
00:10:39,600 --> 00:10:42,880
kind of alerts timber

247
00:10:44,399 --> 00:10:46,959
we'll come back to

248
00:10:51,920 --> 00:10:54,880
so you can go to those objects in the

249
00:10:54,880 --> 00:10:57,279
call out list and uh

250
00:10:57,279 --> 00:11:00,000
you can actually

251
00:11:12,720 --> 00:11:15,600
actually more advanced cases for root

252
00:11:15,600 --> 00:11:17,760
kits

253
00:11:19,839 --> 00:11:21,440
you can see that a new driver is being

254
00:11:21,440 --> 00:11:23,360
uploaded and now you can find its entry

255
00:11:23,360 --> 00:11:24,320
point

256
00:11:24,320 --> 00:11:26,560
and in the entry point you can write

257
00:11:26,560 --> 00:11:28,880
several bytes i'm

258
00:11:28,880 --> 00:11:32,880
showing this in the green section

259
00:11:32,880 --> 00:11:35,200
so this is effectively an upload of

260
00:11:35,200 --> 00:11:36,720
driver with information that something

261
00:11:36,720 --> 00:11:38,160
is going wrong

262
00:11:38,160 --> 00:11:41,120
i think this is an elegant uh way

263
00:11:41,120 --> 00:11:44,079
of uh pulling down the driver already

264
00:11:44,079 --> 00:11:46,320
being uploaded and then you know it's

265
00:11:46,320 --> 00:11:49,120
automatically being offloaded and then

266
00:11:49,120 --> 00:11:50,959
it tells the system that you know

267
00:11:50,959 --> 00:11:52,720
something has been you know has gone

268
00:11:52,720 --> 00:11:56,399
wrong but you're not you know

269
00:12:00,480 --> 00:12:02,399
more about techniques we've been talking

270
00:12:02,399 --> 00:12:04,320
a lot about functions and these are

271
00:12:04,320 --> 00:12:06,160
symbols you can find and you can hook

272
00:12:06,160 --> 00:12:09,040
them and you can monitor them

273
00:12:09,040 --> 00:12:12,240
malware can actually obtain addresses

274
00:12:12,240 --> 00:12:14,880
from symbols or by symbols

275
00:12:14,880 --> 00:12:16,240
and you can also find them with

276
00:12:16,240 --> 00:12:18,800
signature search and then you can

277
00:12:18,800 --> 00:12:21,440
implement them

278
00:12:21,440 --> 00:12:24,480
you know fragments of function prologues

279
00:12:24,480 --> 00:12:26,320
and you can start execution in the

280
00:12:26,320 --> 00:12:30,160
middle for example for instance

281
00:12:30,320 --> 00:12:32,480
let's take a right virtual memory offset

282
00:12:32,480 --> 00:12:34,079
function you can

283
00:12:34,079 --> 00:12:38,279
skip the beginning

284
00:12:42,720 --> 00:12:45,600
hand it over and this will really deep a

285
00:12:45,600 --> 00:12:47,680
lot of uh defense systems because many

286
00:12:47,680 --> 00:12:49,600
of them will only be monitoring this

287
00:12:49,600 --> 00:12:50,560
start

288
00:12:50,560 --> 00:12:53,800
of functions

289
00:13:03,360 --> 00:13:06,160
it's very popular architecturally they

290
00:13:06,160 --> 00:13:08,959
are very similar to processes

291
00:13:08,959 --> 00:13:11,200
you know in in the core you know the

292
00:13:11,200 --> 00:13:12,880
restructuring process

293
00:13:12,880 --> 00:13:15,760
but for services in user mode

294
00:13:15,760 --> 00:13:17,680
there is a there is an entity called

295
00:13:17,680 --> 00:13:19,760
service records you can also find it in

296
00:13:19,760 --> 00:13:20,880
user mode

297
00:13:20,880 --> 00:13:22,399
from the core

298
00:13:22,399 --> 00:13:24,320
and substitute things there

299
00:13:24,320 --> 00:13:26,320
like remove an entry

300
00:13:26,320 --> 00:13:27,440
and thus

301
00:13:27,440 --> 00:13:29,760
conceal the service

302
00:13:29,760 --> 00:13:32,399
from you know the list of uh

303
00:13:32,399 --> 00:13:35,399
services

304
00:13:37,760 --> 00:13:40,560
well the driver will need to map stuff

305
00:13:40,560 --> 00:13:42,959
and edit stuff in the memory and i'm

306
00:13:42,959 --> 00:13:45,120
showing the signature here show you know

307
00:13:45,120 --> 00:13:46,480
how they will be looking for service

308
00:13:46,480 --> 00:13:50,240
records for different operation systems

309
00:13:50,560 --> 00:13:52,000
the driver itself has lots of

310
00:13:52,000 --> 00:13:53,680
interesting things

311
00:13:53,680 --> 00:13:57,040
for example they will be major functions

312
00:13:57,040 --> 00:13:59,760
and rootkits are trying to abuse them as

313
00:13:59,760 --> 00:14:02,760
well

314
00:14:15,440 --> 00:14:18,240
you know an api handler it will be

315
00:14:18,240 --> 00:14:19,600
substituted

316
00:14:19,600 --> 00:14:21,519
and there is a more elegant way of

317
00:14:21,519 --> 00:14:23,519
making the driver do something it

318
00:14:23,519 --> 00:14:24,959
shouldn't be doing

319
00:14:24,959 --> 00:14:27,360
we can actually look for code sections

320
00:14:27,360 --> 00:14:28,560
in it

321
00:14:28,560 --> 00:14:30,639
that still have some element in that we

322
00:14:30,639 --> 00:14:33,440
all know that executable files have got

323
00:14:33,440 --> 00:14:36,160
this leveling and there will be empty

324
00:14:36,160 --> 00:14:38,240
space there filled with zeros so you can

325
00:14:38,240 --> 00:14:40,160
actually write there

326
00:14:40,160 --> 00:14:42,000
and then

327
00:14:42,000 --> 00:14:44,639
you can do pointer substitution there so

328
00:14:44,639 --> 00:14:46,079
that you know it points to a new

329
00:14:46,079 --> 00:14:47,040
function

330
00:14:47,040 --> 00:14:49,519
it's very neat isn't it

331
00:14:49,519 --> 00:14:52,480
so you know when pageguard will actually

332
00:14:52,480 --> 00:14:54,639
check for integrity

333
00:14:54,639 --> 00:14:57,279
it will see that okay is pointing to

334
00:14:57,279 --> 00:14:59,279
address space of the driver which is

335
00:14:59,279 --> 00:15:03,360
okay there is nothing weird about it

336
00:15:03,760 --> 00:15:07,199
and if we actually install a pointer

337
00:15:07,199 --> 00:15:08,160
to

338
00:15:08,160 --> 00:15:10,240
our own driver in some other address

339
00:15:10,240 --> 00:15:12,560
space you know patch card will probably

340
00:15:12,560 --> 00:15:14,880
see it

341
00:15:16,720 --> 00:15:18,320
in fact you know

342
00:15:18,320 --> 00:15:21,600
your malicious code will be able to be

343
00:15:21,600 --> 00:15:26,880
executed inside the address code

344
00:15:26,880 --> 00:15:29,199
of the driver itself and it's possible

345
00:15:29,199 --> 00:15:31,519
because there are so many vulnerable

346
00:15:31,519 --> 00:15:34,639
drivers which enable us to actually

347
00:15:34,639 --> 00:15:36,959
upload

348
00:15:36,959 --> 00:15:39,600
arbitrary malicious code in the core i'm

349
00:15:39,600 --> 00:15:41,839
listing only three utilities here but

350
00:15:41,839 --> 00:15:44,399
naturally there are so many vulnerable

351
00:15:44,399 --> 00:15:46,399
drivers naturally we are not going to

352
00:15:46,399 --> 00:15:48,240
list them here that would be a stupid

353
00:15:48,240 --> 00:15:50,720
thing to do

354
00:15:52,320 --> 00:15:54,560
and if you haven't seen it

355
00:15:54,560 --> 00:15:57,680
there is there's a grouping called

356
00:15:57,680 --> 00:16:00,638
i'm sorry there is a group

357
00:16:01,440 --> 00:16:03,120
you know and they are talking a lot

358
00:16:03,120 --> 00:16:05,279
about specific techniques which are good

359
00:16:05,279 --> 00:16:09,040
for specific vulnerable

360
00:16:10,160 --> 00:16:12,399
and we will be tracking it you know when

361
00:16:12,399 --> 00:16:16,560
we are fine-tuning our defenses

362
00:16:16,560 --> 00:16:18,000
well because you know we want to test

363
00:16:18,000 --> 00:16:19,759
them for penetration that's why we will

364
00:16:19,759 --> 00:16:21,360
be using the malicious code and this

365
00:16:21,360 --> 00:16:23,199
malicious code is easily available of

366
00:16:23,199 --> 00:16:24,639
github

367
00:16:24,639 --> 00:16:26,399
we've been talking a lot about various

368
00:16:26,399 --> 00:16:28,800
techniques

369
00:16:28,800 --> 00:16:30,639
and it has been fast now let's talk

370
00:16:30,639 --> 00:16:33,680
about detection methods

371
00:16:34,160 --> 00:16:37,600
let's see how they work

372
00:16:37,600 --> 00:16:39,680
for those who have

373
00:16:39,680 --> 00:16:41,519
attended our webinars must have been

374
00:16:41,519 --> 00:16:44,880
expecting this slide

375
00:16:45,519 --> 00:16:48,240
it effectively enables us to do so many

376
00:16:48,240 --> 00:16:50,480
more

377
00:16:54,560 --> 00:16:56,000
system does support lots of things

378
00:16:56,000 --> 00:16:57,600
because a drug wolf enables us to

379
00:16:57,600 --> 00:16:59,600
analyze the state of the operating

380
00:16:59,600 --> 00:17:00,959
system

381
00:17:00,959 --> 00:17:04,000
even when we don't have analyzers inside

382
00:17:04,000 --> 00:17:06,959
the virtual system

383
00:17:07,280 --> 00:17:08,640
you know we've been talking a lot about

384
00:17:08,640 --> 00:17:12,240
when we talked about malware detection

385
00:17:12,240 --> 00:17:14,400
you know for rootkit detection

386
00:17:14,400 --> 00:17:17,919
we certainly wouldn't want

387
00:17:20,160 --> 00:17:22,400
by definition we won't have higher

388
00:17:22,400 --> 00:17:24,240
privileges because you certainly know

389
00:17:24,240 --> 00:17:26,640
that in the core all drivers are created

390
00:17:26,640 --> 00:17:29,280
dedicable it's effectively a race thing

391
00:17:29,280 --> 00:17:33,399
like who is smarter

392
00:17:36,960 --> 00:17:39,200
you know it will win

393
00:17:39,200 --> 00:17:41,760
and yes there is a certain loading

394
00:17:41,760 --> 00:17:44,320
sequence which you can check

395
00:17:44,320 --> 00:17:47,039
on msd

396
00:17:48,480 --> 00:17:50,640
all drivers are created equal

397
00:17:50,640 --> 00:17:52,480
that's why we need precedence we

398
00:17:52,480 --> 00:17:54,320
certainly don't want to be sitting next

399
00:17:54,320 --> 00:17:56,240
to ruskit and therefore

400
00:17:56,240 --> 00:17:59,760
standing a chance of being egypt

401
00:18:06,799 --> 00:18:08,880
and it's open source

402
00:18:08,880 --> 00:18:10,720
it's a technical track we're not really

403
00:18:10,720 --> 00:18:12,559
advertising the product here we are

404
00:18:12,559 --> 00:18:14,720
talking about things that were tools

405
00:18:14,720 --> 00:18:16,880
that can be used by

406
00:18:16,880 --> 00:18:20,160
anybody interested

407
00:18:21,039 --> 00:18:23,440
so why does it work like this why don't

408
00:18:23,440 --> 00:18:26,400
we need an agent

409
00:18:26,480 --> 00:18:28,080
you need to read the bottom part of this

410
00:18:28,080 --> 00:18:29,039
table

411
00:18:29,039 --> 00:18:31,679
now so this is the physical memory of

412
00:18:31,679 --> 00:18:33,600
the guest and this is the physical

413
00:18:33,600 --> 00:18:35,280
memory of the host

414
00:18:35,280 --> 00:18:37,840
so there won't be this direct transfer

415
00:18:37,840 --> 00:18:40,720
here you will have to make the full

416
00:18:40,720 --> 00:18:43,840
circle journey here

417
00:18:44,880 --> 00:18:46,960
so there will be an additional segment

418
00:18:46,960 --> 00:18:49,919
of memory that will be used for address

419
00:18:49,919 --> 00:18:52,559
translation

420
00:18:53,679 --> 00:18:56,400
so if you need to actually detect it you

421
00:18:56,400 --> 00:18:58,640
will be doing it in the intermediary

422
00:18:58,640 --> 00:19:01,039
layer between the physical layer where

423
00:19:01,039 --> 00:19:03,039
the hypervisor is running

424
00:19:03,039 --> 00:19:05,919
and the vm layer where all the bad

425
00:19:05,919 --> 00:19:08,080
things are happening

426
00:19:08,080 --> 00:19:09,919
you don't need to wrap your mind around

427
00:19:09,919 --> 00:19:11,520
it right now maybe you don't even need

428
00:19:11,520 --> 00:19:14,160
it but the general concept is that

429
00:19:14,160 --> 00:19:16,080
between the two physical elements of

430
00:19:16,080 --> 00:19:18,559
memory there is an intermediary layer

431
00:19:18,559 --> 00:19:20,240
which actually sees everything that's

432
00:19:20,240 --> 00:19:21,919
happening in the gas and all the memory

433
00:19:21,919 --> 00:19:25,200
of the virtual machine is therefore

434
00:19:25,200 --> 00:19:27,200
transparent this is why we can do

435
00:19:27,200 --> 00:19:29,679
intercepts this is we can do

436
00:19:29,679 --> 00:19:33,200
some checks and monitoring

437
00:19:34,640 --> 00:19:36,799
so this is the typical environment of

438
00:19:36,799 --> 00:19:40,080
the debugger however it it exists on the

439
00:19:40,080 --> 00:19:42,480
hypervisor level

440
00:19:42,480 --> 00:19:45,120
so the module architecture of drakov and

441
00:19:45,120 --> 00:19:47,200
you see all the plugins here

442
00:19:47,200 --> 00:19:49,200
you know all the network functionalities

443
00:19:49,200 --> 00:19:50,480
there

444
00:19:50,480 --> 00:19:52,320
we will discuss the structure of drug

445
00:19:52,320 --> 00:19:53,840
wolf in more detail tomorrow what's

446
00:19:53,840 --> 00:19:55,840
important to understand now is that if

447
00:19:55,840 --> 00:19:57,440
you want to add more functionality

448
00:19:57,440 --> 00:19:59,600
something that's missing in it

449
00:19:59,600 --> 00:20:02,320
you need to come up with a new plugin

450
00:20:02,320 --> 00:20:04,720
and it's easy to implement them you

451
00:20:04,720 --> 00:20:06,880
don't really need to drill dip into it

452
00:20:06,880 --> 00:20:08,480
or have you know great conceptual

453
00:20:08,480 --> 00:20:11,200
understanding of it

454
00:20:11,760 --> 00:20:14,960
so it's part of this research

455
00:20:16,080 --> 00:20:19,200
we've developed new plugins

456
00:20:19,200 --> 00:20:20,640
i'm referring to callback mon andrews

457
00:20:20,640 --> 00:20:22,159
kitman

458
00:20:22,159 --> 00:20:24,240
and before us uh two other plugins were

459
00:20:24,240 --> 00:20:26,960
there d common sd t mod

460
00:20:26,960 --> 00:20:30,799
and we also edited this uh plugins thus

461
00:20:30,799 --> 00:20:33,200
uh giving ourselves uh this uh set of

462
00:20:33,200 --> 00:20:35,039
plugins that you can call uh roosky

463
00:20:35,039 --> 00:20:38,240
detection technology inside directwork

464
00:20:38,240 --> 00:20:40,240
why not a single plugin we used to have

465
00:20:40,240 --> 00:20:42,480
one

466
00:20:44,240 --> 00:20:46,320
but in the course of development we ran

467
00:20:46,320 --> 00:20:48,799
into all sorts of issues we couldn't

468
00:20:48,799 --> 00:20:51,280
really predict before and thus we have

469
00:20:51,280 --> 00:20:53,679
four plugins not convenient but this is

470
00:20:53,679 --> 00:20:56,240
how it works

471
00:20:56,240 --> 00:20:58,240
we can actually explain why why they're

472
00:20:58,240 --> 00:21:00,000
like this

473
00:21:00,000 --> 00:21:03,000
is

474
00:21:04,960 --> 00:21:06,720
but i guess they are the most important

475
00:21:06,720 --> 00:21:08,799
ones they actually explain why i wanted

476
00:21:08,799 --> 00:21:10,480
to show this stuff to you i actually

477
00:21:10,480 --> 00:21:12,000
want to show

478
00:21:12,000 --> 00:21:14,159
you know the full functionality so to

479
00:21:14,159 --> 00:21:17,159
speak

480
00:21:27,679 --> 00:21:30,480
and this is the stuff that kids are not

481
00:21:30,480 --> 00:21:33,280
really doing anymore because patchguard

482
00:21:33,280 --> 00:21:34,799
is there

483
00:21:34,799 --> 00:21:36,960
but you know to be on the safe side we

484
00:21:36,960 --> 00:21:39,280
had to provide for this as well such as

485
00:21:39,280 --> 00:21:41,039
you know protecting against uh system

486
00:21:41,039 --> 00:21:45,640
call table not a i'm sorry modifications

487
00:21:54,799 --> 00:21:59,200
so this is about you know the pointer of

488
00:21:59,200 --> 00:22:02,799
the processor of cisco's

489
00:22:03,120 --> 00:22:04,880
so it's effectively a part of the core

490
00:22:04,880 --> 00:22:06,720
which decides which uh

491
00:22:06,720 --> 00:22:09,679
sdt to call this is what msr registry

492
00:22:09,679 --> 00:22:11,600
talks about so all these techniques have

493
00:22:11,600 --> 00:22:13,600
been known for a long time

494
00:22:13,600 --> 00:22:15,840
but you know it was hygienic for us to

495
00:22:15,840 --> 00:22:18,240
cover it

496
00:22:19,200 --> 00:22:21,600
we have perfect protection for all this

497
00:22:21,600 --> 00:22:23,200
this is the stuff we promised last

498
00:22:23,200 --> 00:22:25,200
summer and it wasn't available back then

499
00:22:25,200 --> 00:22:27,120
it is available now

500
00:22:27,120 --> 00:22:28,960
i should probably cover every item on

501
00:22:28,960 --> 00:22:30,480
this list because it's interesting so

502
00:22:30,480 --> 00:22:32,080
item 11

503
00:22:32,080 --> 00:22:34,400
is about the pages or rather i'm sorry

504
00:22:34,400 --> 00:22:36,400
sections of drivers

505
00:22:36,400 --> 00:22:38,320
which are

506
00:22:38,320 --> 00:22:41,039
marked as executable

507
00:22:41,039 --> 00:22:43,600
but not patched i mean they cannot be

508
00:22:43,600 --> 00:22:46,880
swapped into page file if you're out of

509
00:22:46,880 --> 00:22:48,400
memory

510
00:22:48,400 --> 00:22:51,039
so these sections are now protected

511
00:22:51,039 --> 00:22:53,360
which means that the technique i

512
00:22:53,360 --> 00:22:55,840
previously discussed

513
00:22:55,840 --> 00:22:57,440
will not be able

514
00:22:57,440 --> 00:23:00,960
to write a segment of code into it

515
00:23:00,960 --> 00:23:05,720
same is actually true for here is

516
00:23:08,320 --> 00:23:10,720
so you know previously there would be

517
00:23:10,720 --> 00:23:13,360
you know a certain

518
00:23:13,360 --> 00:23:15,919
interrupt handler

519
00:23:15,919 --> 00:23:17,200
like this

520
00:23:17,200 --> 00:23:19,919
vector is uh riveted now

521
00:23:19,919 --> 00:23:23,120
next one the stack

522
00:23:24,640 --> 00:23:27,679
so every participant of uh the bros

523
00:23:27,679 --> 00:23:30,320
hassling key can actually attack the

524
00:23:30,320 --> 00:23:32,799
stack and now we are protecting this

525
00:23:32,799 --> 00:23:35,200
we've talked about objects such as major

526
00:23:35,200 --> 00:23:37,120
functions

527
00:23:37,120 --> 00:23:39,600
and also you need unload and start eu

528
00:23:39,600 --> 00:23:42,559
drivers but there is also fast io

529
00:23:42,559 --> 00:23:43,760
handlers

530
00:23:43,760 --> 00:23:44,480
so

531
00:23:44,480 --> 00:23:46,720
all these pointers you know they are

532
00:23:46,720 --> 00:23:48,640
controlled for integrity and also

533
00:23:48,640 --> 00:23:50,400
browsers lists and service lists and

534
00:23:50,400 --> 00:23:52,080
what's the most important list of

535
00:23:52,080 --> 00:23:54,720
drivers so all these lists are now

536
00:23:54,720 --> 00:23:56,350
monitored

537
00:23:56,350 --> 00:23:59,869
[Music]

538
00:24:00,960 --> 00:24:04,640
so we before we go to the callback list

539
00:24:04,640 --> 00:24:07,919
so we also have the wfb subscription

540
00:24:07,919 --> 00:24:09,279
list

541
00:24:09,279 --> 00:24:10,559
and lots

542
00:24:10,559 --> 00:24:13,360
of other callback structures and it can

543
00:24:13,360 --> 00:24:15,840
take us a long time to discuss it

544
00:24:15,840 --> 00:24:17,760
so for example there is there are this

545
00:24:17,760 --> 00:24:18,880
callbacks

546
00:24:18,880 --> 00:24:21,840
win32p call out so you can guess by the

547
00:24:21,840 --> 00:24:24,159
name what they're responsible for

548
00:24:24,159 --> 00:24:26,000
the point is that there are many lists

549
00:24:26,000 --> 00:24:27,279
like this

550
00:24:27,279 --> 00:24:30,880
and a hacker can actually try modifying

551
00:24:30,880 --> 00:24:33,840
any of them

552
00:24:33,919 --> 00:24:35,600
and then something can be a trigger from

553
00:24:35,600 --> 00:24:37,039
user mode

554
00:24:37,039 --> 00:24:38,080
and

555
00:24:38,080 --> 00:24:40,400
he will stay hidden

556
00:24:40,400 --> 00:24:42,320
you know there won't be any apis

557
00:24:42,320 --> 00:24:43,760
triggered for example so we are

558
00:24:43,760 --> 00:24:46,400
protecting

559
00:24:46,880 --> 00:24:49,200
listed on the left and right now uh the

560
00:24:49,200 --> 00:24:50,880
functions that came from the previous

561
00:24:50,880 --> 00:24:52,480
section of the presentation about true

562
00:24:52,480 --> 00:24:53,360
scouts

563
00:24:53,360 --> 00:24:55,760
techniques

564
00:24:56,000 --> 00:24:58,640
such as i know library uploads and so on

565
00:24:58,640 --> 00:25:02,799
and so forth so all these apis

566
00:25:02,880 --> 00:25:05,279
a link to the registry and near file

567
00:25:05,279 --> 00:25:07,520
system registration

568
00:25:07,520 --> 00:25:09,200
you know we are not intercepting that

569
00:25:09,200 --> 00:25:11,600
but we are intercepting the callbacks

570
00:25:11,600 --> 00:25:14,799
and the callouts they're

571
00:25:17,840 --> 00:25:19,360
if you want to make your great

572
00:25:19,360 --> 00:25:22,000
contribution to twitter

573
00:25:22,000 --> 00:25:24,799
you can select any function

574
00:25:24,799 --> 00:25:26,559
it has not been selected before and

575
00:25:26,559 --> 00:25:29,039
deploy it on your own

576
00:25:29,039 --> 00:25:30,960
and you can call it

577
00:25:30,960 --> 00:25:33,919
by bus and the community

578
00:25:33,919 --> 00:25:37,279
will lap it up that's what we did

579
00:25:37,279 --> 00:25:40,320
for example so this function for um you

580
00:25:40,320 --> 00:25:42,000
know creation of a subscription for

581
00:25:42,000 --> 00:25:45,279
registration of new processes

582
00:25:45,679 --> 00:25:47,840
you know we implemented this function

583
00:25:47,840 --> 00:25:49,120
and

584
00:25:49,120 --> 00:25:51,840
effectively

585
00:25:52,159 --> 00:25:54,240
in the core you know we did a separate

586
00:25:54,240 --> 00:25:55,840
implementation of this function so that

587
00:25:55,840 --> 00:25:57,360
you know we could do

588
00:25:57,360 --> 00:25:58,720
callbacks

589
00:25:58,720 --> 00:26:00,960
so modification like this can be done

590
00:26:00,960 --> 00:26:04,320
therefore it needs to be controlled

591
00:26:08,000 --> 00:26:09,200
so this is something that people are

592
00:26:09,200 --> 00:26:11,679
calling badge guard bypass now

593
00:26:11,679 --> 00:26:13,440
but in essence

594
00:26:13,440 --> 00:26:15,840
you can take any function of kernel 32

595
00:26:15,840 --> 00:26:17,840
like add file or whatever you implement

596
00:26:17,840 --> 00:26:20,480
it separately and instead of calling

597
00:26:20,480 --> 00:26:24,320
kernel 32 you know you can do any

598
00:26:24,320 --> 00:26:27,360
arbitrary function

599
00:26:28,159 --> 00:26:30,880
so this is how many bypasses are done

600
00:26:30,880 --> 00:26:34,400
no it's happening at the core level now

601
00:26:34,400 --> 00:26:37,440
so there were this list previously

602
00:26:37,440 --> 00:26:39,200
showing what this still is capable of

603
00:26:39,200 --> 00:26:41,919
let me show some fragments of the code

604
00:26:41,919 --> 00:26:43,520
so that

605
00:26:43,520 --> 00:26:47,879
it's easier for you to wrap your mind

606
00:27:03,679 --> 00:27:05,200
in some cases you will need to do

607
00:27:05,200 --> 00:27:07,360
profiling for dracula

608
00:27:07,360 --> 00:27:10,080
because by default it can find uh

609
00:27:10,080 --> 00:27:14,080
symbols for intellis kernel and win32k

610
00:27:14,080 --> 00:27:16,880
for the native graphics system but for

611
00:27:16,880 --> 00:27:18,399
anything related to traffic there won't

612
00:27:18,399 --> 00:27:20,159
be any symbols there so it will be

613
00:27:20,159 --> 00:27:22,960
difficult for you

614
00:27:23,200 --> 00:27:25,600
to use other elements of the code

615
00:27:25,600 --> 00:27:28,159
so you will need

616
00:27:28,159 --> 00:27:31,520
to substitute your own profiles

617
00:27:31,520 --> 00:27:35,840
so that these symbols are detectable

618
00:27:39,279 --> 00:27:41,520
i'm showing here that how we are

619
00:27:41,520 --> 00:27:44,720
actually saving this list is vectors

620
00:27:44,720 --> 00:27:47,039
so we're writing all these addresses as

621
00:27:47,039 --> 00:27:49,279
vectors

622
00:27:49,279 --> 00:27:51,200
all the addresses we can do and then we

623
00:27:51,200 --> 00:27:54,799
check them and we will compare them

624
00:27:54,799 --> 00:27:56,320
one on one

625
00:27:56,320 --> 00:27:58,559
or alternatively you know we can write

626
00:27:58,559 --> 00:27:59,360
them

627
00:27:59,360 --> 00:28:01,440
one after the other and compare strength

628
00:28:01,440 --> 00:28:04,720
so we can compare any hashes

629
00:28:04,720 --> 00:28:06,559
but this is how we did it

630
00:28:06,559 --> 00:28:08,640
next we are going to discuss triggers

631
00:28:08,640 --> 00:28:10,880
when is it best to do it

632
00:28:10,880 --> 00:28:13,120
because it does you know relate to

633
00:28:13,120 --> 00:28:15,120
everything i've been talking about and

634
00:28:15,120 --> 00:28:17,120
when you would like to make this

635
00:28:17,120 --> 00:28:19,760
comparisons now let's talk about control

636
00:28:19,760 --> 00:28:20,640
of

637
00:28:20,640 --> 00:28:22,799
the drivers he uploaded so you probably

638
00:28:22,799 --> 00:28:25,360
know that she can upload them bypassing

639
00:28:25,360 --> 00:28:26,880
the ledger tools

640
00:28:26,880 --> 00:28:29,200
and this way information on uploaded

641
00:28:29,200 --> 00:28:31,919
drivers will be missing from the log

642
00:28:31,919 --> 00:28:34,000
so there is a function called mi process

643
00:28:34,000 --> 00:28:35,440
holder

644
00:28:35,440 --> 00:28:37,360
entrant which uh will be called every

645
00:28:37,360 --> 00:28:38,640
time

646
00:28:38,640 --> 00:28:42,399
uh drivers are uploaded uh or uploaded

647
00:28:42,399 --> 00:28:46,000
and it's uh seated very deep inside the

648
00:28:46,000 --> 00:28:48,240
corner

649
00:28:50,559 --> 00:28:52,880
so here we're able to see what's coming

650
00:28:52,880 --> 00:28:54,720
and what's going out of the system and

651
00:28:54,720 --> 00:28:58,559
then we can get the full list of drivers

652
00:29:12,240 --> 00:29:14,240
is that this function is going to show

653
00:29:14,240 --> 00:29:15,200
to you

654
00:29:15,200 --> 00:29:18,240
what users should be able to see if they

655
00:29:18,240 --> 00:29:20,559
request those lists

656
00:29:20,559 --> 00:29:22,240
and then we can actually compare what

657
00:29:22,240 --> 00:29:25,039
the system is going to show

658
00:29:25,039 --> 00:29:27,039
to you know what we are seeing and if we

659
00:29:27,039 --> 00:29:28,799
are seeing a difference it means

660
00:29:28,799 --> 00:29:31,120
somebody has uploaded or uploaded a

661
00:29:31,120 --> 00:29:35,360
driver in an illegitimate way

662
00:29:37,520 --> 00:29:39,440
but i had in my first slides

663
00:29:39,440 --> 00:29:42,000
my first slide about this utility you

664
00:29:42,000 --> 00:29:43,679
know this is something that rootkits are

665
00:29:43,679 --> 00:29:46,159
no longer doing

666
00:29:46,159 --> 00:29:48,240
so these are addresses of pointers to

667
00:29:48,240 --> 00:29:50,320
the description and interrupt table

668
00:29:50,320 --> 00:29:52,640
including the values of the registers

669
00:29:52,640 --> 00:29:54,640
all this stuff is collected

670
00:29:54,640 --> 00:29:56,240
and this table so you know they're all

671
00:29:56,240 --> 00:29:58,240
parts they're all hashed

672
00:29:58,240 --> 00:30:00,640
and then after some time

673
00:30:00,640 --> 00:30:02,960
addresses are compared

674
00:30:02,960 --> 00:30:05,279
one-on-one or are they hashes and if

675
00:30:05,279 --> 00:30:06,799
something is you know

676
00:30:06,799 --> 00:30:08,399
mismatched you know we will need to

677
00:30:08,399 --> 00:30:09,520
reverse it

678
00:30:09,520 --> 00:30:12,320
and i'm showing the prince here as well

679
00:30:12,320 --> 00:30:14,320
which is also useful

680
00:30:14,320 --> 00:30:15,039
so

681
00:30:15,039 --> 00:30:17,120
in different situations you will be

682
00:30:17,120 --> 00:30:19,200
given different problems

683
00:30:19,200 --> 00:30:22,679
device stacks

684
00:30:23,520 --> 00:30:25,440
this is effectively a chain as i

685
00:30:25,440 --> 00:30:28,159
previously said

686
00:30:28,159 --> 00:30:29,440
that's you know

687
00:30:29,440 --> 00:30:32,240
lists all the functions that need to be

688
00:30:32,240 --> 00:30:36,960
initiated in order for say a user to

689
00:30:42,000 --> 00:30:43,760
it actually has

690
00:30:43,760 --> 00:30:46,960
its own architecture 37 hash buckets

691
00:30:46,960 --> 00:30:50,760
which can be

692
00:30:56,640 --> 00:30:58,880
microsoft i should remind you starting

693
00:30:58,880 --> 00:31:01,960
from windows 10 decided they could soar

694
00:31:01,960 --> 00:31:03,519
identifiers

695
00:31:03,519 --> 00:31:06,080
from the structure here from the object

696
00:31:06,080 --> 00:31:08,480
structure that will take us the object

697
00:31:08,480 --> 00:31:09,679
name and

698
00:31:09,679 --> 00:31:12,240
the line here

699
00:31:14,080 --> 00:31:15,919
you know they started you know shifting

700
00:31:15,919 --> 00:31:18,080
it by by they started storing it and it

701
00:31:18,080 --> 00:31:19,760
sounded like they

702
00:31:19,760 --> 00:31:21,679
made it less simplistic

703
00:31:21,679 --> 00:31:22,559
and

704
00:31:22,559 --> 00:31:25,600
we are also doing it now in order to get

705
00:31:25,600 --> 00:31:26,880
all this data

706
00:31:26,880 --> 00:31:28,880
to me it sounds like pretty weird way of

707
00:31:28,880 --> 00:31:30,159
defense

708
00:31:30,159 --> 00:31:32,080
it doesn't work in any case but what

709
00:31:32,080 --> 00:31:34,559
matters that he can parse it all right

710
00:31:34,559 --> 00:31:37,360
or traverse at all so what can be done

711
00:31:37,360 --> 00:31:39,440
you can hash the addresses of major

712
00:31:39,440 --> 00:31:41,840
functions

713
00:31:42,559 --> 00:31:44,799
particularly driver in e and driver app

714
00:31:44,799 --> 00:31:45,840
on

715
00:31:45,840 --> 00:31:47,840
and the other handlers can also be

716
00:31:47,840 --> 00:31:49,440
hashed

717
00:31:49,440 --> 00:31:51,360
and then at some point in time you can

718
00:31:51,360 --> 00:31:53,760
check these hashes for discrepancies and

719
00:31:53,760 --> 00:31:56,000
then in the chain of device objects you

720
00:31:56,000 --> 00:31:58,240
can do the same so if something is wrong

721
00:31:58,240 --> 00:32:00,880
if the number of

722
00:32:11,840 --> 00:32:14,799
how they did it is a separate concern

723
00:32:14,799 --> 00:32:17,360
this one is a driver section so we have

724
00:32:17,360 --> 00:32:19,200
this section here with characteristics

725
00:32:19,200 --> 00:32:22,320
like non-pageable and executable and

726
00:32:22,320 --> 00:32:24,720
known right indeed it would be weird to

727
00:32:24,720 --> 00:32:27,039
hash a section whose content changes

728
00:32:27,039 --> 00:32:28,880
often

729
00:32:28,880 --> 00:32:31,120
so hashes are calculated for all the

730
00:32:31,120 --> 00:32:34,799
drivers you know in all the sections

731
00:32:35,519 --> 00:32:36,559
no i'm not

732
00:32:36,559 --> 00:32:39,600
i'm not showing this comparison slides

733
00:32:39,600 --> 00:32:40,799
[Music]

734
00:32:40,799 --> 00:32:43,120
before

735
00:32:49,120 --> 00:32:51,360
naturally we did it all

736
00:32:51,360 --> 00:32:54,240
for a particular product not just we had

737
00:32:54,240 --> 00:32:56,320
not because we had a lot of time to

738
00:32:56,320 --> 00:32:57,600
waste

739
00:32:57,600 --> 00:32:59,679
so we decided the best thing to do was

740
00:32:59,679 --> 00:33:02,000
uh to sort of you know enumerate and

741
00:33:02,000 --> 00:33:04,640
calculate everything i listed

742
00:33:04,640 --> 00:33:06,399
in the beginning of my presentation went

743
00:33:06,399 --> 00:33:08,480
over the sandbox and then you know

744
00:33:08,480 --> 00:33:10,080
make this comparison again make this

745
00:33:10,080 --> 00:33:12,159
calculation at the very end

746
00:33:12,159 --> 00:33:14,399
so if we did only twice it will not

747
00:33:14,399 --> 00:33:16,159
impact the performance

748
00:33:16,159 --> 00:33:18,480
but on the other hand nobody stops the

749
00:33:18,480 --> 00:33:20,799
roads kids from you know substituting

750
00:33:20,799 --> 00:33:22,159
things

751
00:33:22,159 --> 00:33:25,840
you know doing things and then you know

752
00:33:25,840 --> 00:33:28,399
keep it hush and uh bring the system

753
00:33:28,399 --> 00:33:30,240
back to its initial state then we won't

754
00:33:30,240 --> 00:33:32,880
really see it

755
00:33:33,519 --> 00:33:37,039
so how do we add near triggers

756
00:33:37,039 --> 00:33:38,880
i guess we i'm sorry let me put it

757
00:33:38,880 --> 00:33:41,279
differently we probably need to use uh

758
00:33:41,279 --> 00:33:43,039
time-based triggers you know badge guard

759
00:33:43,039 --> 00:33:45,039
actually does it you know at a random

760
00:33:45,039 --> 00:33:47,120
periods of time

761
00:33:47,120 --> 00:33:49,039
i'm not sure this is the best way

762
00:33:49,039 --> 00:33:50,799
performance buys to do it we'll be

763
00:33:50,799 --> 00:33:52,399
thinking about alternatives

764
00:33:52,399 --> 00:33:54,960
but you guys can actually use dracula

765
00:33:54,960 --> 00:33:57,440
and you can run those comparisons much

766
00:33:57,440 --> 00:34:00,080
more often if your conditions provide

767
00:34:00,080 --> 00:34:01,919
for that if your performance is not much

768
00:34:01,919 --> 00:34:03,679
of a concern to you or if you're doing

769
00:34:03,679 --> 00:34:07,080
it in the lab

770
00:34:17,359 --> 00:34:21,359
where you would want to do it often

771
00:34:21,359 --> 00:34:23,440
like uh there is a register which is

772
00:34:23,440 --> 00:34:25,760
very often changed like uh

773
00:34:25,760 --> 00:34:27,760
in a context in this registry will

774
00:34:27,760 --> 00:34:31,040
change every time you enter the kernel

775
00:34:31,040 --> 00:34:32,879
so

776
00:34:32,879 --> 00:34:35,280
yeah

777
00:34:35,280 --> 00:34:38,000
you can establish a trigger for any cr3

778
00:34:38,000 --> 00:34:39,679
change and you can run your checks every

779
00:34:39,679 --> 00:34:41,359
time it happens

780
00:34:41,359 --> 00:34:43,839
and then you will do it like 15 or 20

781
00:34:43,839 --> 00:34:46,879
000 times per minute maybe even more

782
00:34:46,879 --> 00:34:48,000
lots

783
00:34:48,000 --> 00:34:50,560
and as a trigger-based monitoring it

784
00:34:50,560 --> 00:34:51,839
should work

785
00:34:51,839 --> 00:34:54,639
or you can do it with regard to

786
00:34:54,639 --> 00:34:57,680
modifications of memory areas or you can

787
00:34:57,680 --> 00:34:59,920
link it to apis

788
00:34:59,920 --> 00:35:03,040
or you can do like with

789
00:35:04,480 --> 00:35:06,800
there can be so many different triggers

790
00:35:06,800 --> 00:35:09,200
i think it's only your

791
00:35:09,200 --> 00:35:12,560
your imagination that will limit you

792
00:35:12,560 --> 00:35:16,400
and this may easily dumbfound a hacker

793
00:35:16,400 --> 00:35:17,920
and i'm showing here the simplest

794
00:35:17,920 --> 00:35:19,440
example something that we have in the

795
00:35:19,440 --> 00:35:20,800
production version

796
00:35:20,800 --> 00:35:23,599
my takeaways

797
00:35:24,480 --> 00:35:25,280
why

798
00:35:25,280 --> 00:35:27,340
have i told you this

799
00:35:27,340 --> 00:35:29,440
[Music]

800
00:35:29,440 --> 00:35:32,720
i wanted to show that kids are in fact

801
00:35:32,720 --> 00:35:34,720
more complicated

802
00:35:34,720 --> 00:35:38,000
than the internet would suggest

803
00:35:38,000 --> 00:35:40,160
i'm trying to show how complicated it

804
00:35:40,160 --> 00:35:42,560
can be

805
00:35:42,800 --> 00:35:44,800
so rootkit is not just about uh

806
00:35:44,800 --> 00:35:47,119
persisting in the kernel but also about

807
00:35:47,119 --> 00:35:49,280
not being noticed by veg

808
00:35:49,280 --> 00:35:50,720
and

809
00:35:50,720 --> 00:35:53,040
not

810
00:35:54,480 --> 00:35:57,440
attracting any attention if for example

811
00:35:57,440 --> 00:35:59,760
if you're screwing the kernel

812
00:35:59,760 --> 00:36:02,000
yes

813
00:36:02,560 --> 00:36:05,599
which puts me in mind

814
00:36:08,000 --> 00:36:09,920
and i'm got something similar they've

815
00:36:09,920 --> 00:36:13,280
got a shadow table switch enabled

816
00:36:13,280 --> 00:36:15,920
tracking access to the operating system

817
00:36:15,920 --> 00:36:17,920
memory if it is virtual and we have

818
00:36:17,920 --> 00:36:20,800
hypervisor and you can analyze it all

819
00:36:20,800 --> 00:36:22,400
this way

820
00:36:22,400 --> 00:36:24,800
we won't be able in the same environment

821
00:36:24,800 --> 00:36:27,920
with the malware it's important

822
00:36:27,920 --> 00:36:30,160
you know ruskies effectively will be

823
00:36:30,160 --> 00:36:32,079
able to

824
00:36:32,079 --> 00:36:34,240
do anything on the system it will be

825
00:36:34,240 --> 00:36:37,920
able to conceal itself in full unless we

826
00:36:37,920 --> 00:36:41,680
are one level closer

827
00:36:41,680 --> 00:36:43,760
and we are an important contributor to

828
00:36:43,760 --> 00:36:46,240
the drug wolf project please check out

829
00:36:46,240 --> 00:36:48,320
what we've got in github we recently

830
00:36:48,320 --> 00:36:49,839
updated

831
00:36:49,839 --> 00:36:52,240
the master folder so everything i've

832
00:36:52,240 --> 00:36:54,400
been telling you about in this page

833
00:36:54,400 --> 00:36:56,800
is already available there and please

834
00:36:56,800 --> 00:36:58,240
please join us

835
00:36:58,240 --> 00:37:00,560
let's research it together and let's

836
00:37:00,560 --> 00:37:02,240
continue developing drug warfare there

837
00:37:02,240 --> 00:37:04,320
are so many tasks there i know there

838
00:37:04,320 --> 00:37:06,320
will be questions about linux you can

839
00:37:06,320 --> 00:37:10,120
already guess my answer i'm done

840
00:37:10,120 --> 00:37:14,210
[Applause]

841
00:37:20,320 --> 00:37:23,119
you have mentioned the importance of not

842
00:37:23,119 --> 00:37:26,400
being in the same environment

843
00:37:26,480 --> 00:37:29,359
but then for some uruz kids you know

844
00:37:29,359 --> 00:37:31,680
being in a virtualized environment may

845
00:37:31,680 --> 00:37:34,960
scare some rose kids off

846
00:37:46,640 --> 00:37:47,599
to

847
00:37:47,599 --> 00:37:49,680
make their virtual environment server

848
00:37:49,680 --> 00:37:51,920
invisible

849
00:37:51,920 --> 00:37:54,989
[Music]

850
00:37:55,920 --> 00:37:58,160
cpu id instructions

851
00:37:58,160 --> 00:38:00,320
or other ways of establishing whether

852
00:38:00,320 --> 00:38:02,560
it's virtual or not but most importantly

853
00:38:02,560 --> 00:38:04,880
you have

854
00:38:07,280 --> 00:38:09,440
in order to check if it's in a virtual

855
00:38:09,440 --> 00:38:12,880
virtual machine or not

856
00:38:13,359 --> 00:38:15,680
then you can register it

857
00:38:15,680 --> 00:38:16,839
and

858
00:38:16,839 --> 00:38:19,440
respond i think we will have a report on

859
00:38:19,440 --> 00:38:23,359
that later we are going to talk about

860
00:38:23,359 --> 00:38:24,560
bypassing

861
00:38:24,560 --> 00:38:26,160
vm checks

862
00:38:26,160 --> 00:38:30,880
done via requests to vmi

863
00:38:30,880 --> 00:38:33,440
written a bunch of codes on how you can

864
00:38:33,440 --> 00:38:35,839
actually substitute

865
00:38:35,839 --> 00:38:36,880
those

866
00:38:36,880 --> 00:38:38,240
responses

867
00:38:38,240 --> 00:38:41,440
you can do it at the hypervisor level

868
00:38:41,440 --> 00:38:44,079
in fact so many machines are virtualized

869
00:38:44,079 --> 00:38:45,760
and a lot of infrastructure is running

870
00:38:45,760 --> 00:38:48,240
on vms

871
00:38:48,240 --> 00:38:50,400
it's not just uh mail servers you know

872
00:38:50,400 --> 00:38:52,240
very often domain controllers are

873
00:38:52,240 --> 00:38:55,040
running on virtualized infrastructure

874
00:38:55,040 --> 00:38:56,560
which means

875
00:38:56,560 --> 00:39:01,040
that you know vms will not necessarily

876
00:39:01,040 --> 00:39:03,599
scare a hacker off particularly if they

877
00:39:03,599 --> 00:39:04,400
learn

878
00:39:04,400 --> 00:39:06,480
that you know this virtual machine is

879
00:39:06,480 --> 00:39:08,800
juicy is sexy not just you know some cpu

880
00:39:08,800 --> 00:39:11,440
user machine

881
00:39:11,520 --> 00:39:13,200
well done you know you need to provide

882
00:39:13,200 --> 00:39:16,480
proper hardening and production

883
00:39:25,760 --> 00:39:27,599
commercially

884
00:39:27,599 --> 00:39:30,800
how much will this uh system damage

885
00:39:30,800 --> 00:39:32,560
performance of the system if we're

886
00:39:32,560 --> 00:39:36,640
talking about uh root key detection

887
00:39:36,640 --> 00:39:39,040
the impact is negligible because we're

888
00:39:39,040 --> 00:39:40,800
already talking about two actions you

889
00:39:40,800 --> 00:39:44,320
know prior to analysis starts you know

890
00:39:44,320 --> 00:39:46,079
you can you know you can calculate a

891
00:39:46,079 --> 00:39:47,760
couple of bytes and then you do hash it

892
00:39:47,760 --> 00:39:48,800
could be

893
00:39:48,800 --> 00:39:51,839
d or s h a hash uh

894
00:39:51,839 --> 00:39:53,040
i'm sorry

895
00:39:53,040 --> 00:39:54,240
you know

896
00:39:54,240 --> 00:39:55,200
much

897
00:39:55,200 --> 00:39:57,520
much more

898
00:39:57,520 --> 00:39:59,280
will need to be done

899
00:39:59,280 --> 00:40:01,359
differently like if you're if you're

900
00:40:01,359 --> 00:40:03,040
checking cisco

901
00:40:03,040 --> 00:40:04,160
for example

902
00:40:04,160 --> 00:40:07,040
or memory access

903
00:40:08,720 --> 00:40:11,760
so there will be a short delay you know

904
00:40:11,760 --> 00:40:14,319
while darkwoof and hypervisor execute

905
00:40:14,319 --> 00:40:17,200
their code chunks

906
00:40:17,680 --> 00:40:19,760
so that the vm continues working now it

907
00:40:19,760 --> 00:40:21,839
will take some microseconds

908
00:40:21,839 --> 00:40:24,800
that will have more of an impact so if

909
00:40:24,800 --> 00:40:27,440
we're talking about uh you know your

910
00:40:27,440 --> 00:40:30,640
ability to use a dark vo for you know

911
00:40:30,640 --> 00:40:32,800
identifying root kits yes he can do it

912
00:40:32,800 --> 00:40:34,319
without

913
00:40:34,319 --> 00:40:36,240
impacting the performance okay what if

914
00:40:36,240 --> 00:40:38,880
we need to you know sit on on a

915
00:40:38,880 --> 00:40:40,880
permanent traffic or

916
00:40:40,880 --> 00:40:43,760
high low traffic

917
00:40:44,000 --> 00:40:45,680
well you will still have the same

918
00:40:45,680 --> 00:40:47,040
triggers right

919
00:40:47,040 --> 00:40:49,440
it's your call how often i go in to

920
00:40:49,440 --> 00:40:51,920
check for integrity if you do it very

921
00:40:51,920 --> 00:40:53,119
often

922
00:40:53,119 --> 00:40:55,520
like 1000 times a second well naturally

923
00:40:55,520 --> 00:40:58,480
you will feel the performance impact

924
00:40:58,480 --> 00:41:01,119
and if you don't do it as often

925
00:41:01,119 --> 00:41:04,280
you won't

926
00:41:12,079 --> 00:41:14,800
and your ability of uh finding this

927
00:41:14,800 --> 00:41:16,400
sweet spot

928
00:41:16,400 --> 00:41:18,079
will really

929
00:41:18,079 --> 00:41:20,960
thwart the hacker

930
00:41:23,760 --> 00:41:26,079
hackers are also listening to this and

931
00:41:26,079 --> 00:41:28,240
hackers will not really know

932
00:41:28,240 --> 00:41:30,319
what is the frequency that you chose and

933
00:41:30,319 --> 00:41:32,319
how exactly you are defending and

934
00:41:32,319 --> 00:41:34,800
hardening your system to make it more

935
00:41:34,800 --> 00:41:36,480
difficult for them and more interesting

936
00:41:36,480 --> 00:41:38,800
for us

937
00:41:46,480 --> 00:41:48,880
can you think of a particular sample

938
00:41:48,880 --> 00:41:51,440
that you found interesting

939
00:41:51,440 --> 00:41:55,119
maybe you discovered some new technique

940
00:41:55,119 --> 00:41:56,000
that

941
00:41:56,000 --> 00:41:58,720
you hadn't discovered before in a

942
00:41:58,720 --> 00:42:00,839
reverse engineering and what are the

943
00:42:00,839 --> 00:42:04,240
names of the groups to follow if i am

944
00:42:04,240 --> 00:42:07,279
interested in root kids

945
00:42:07,680 --> 00:42:12,040
if i can have my presentation back

946
00:42:27,920 --> 00:42:29,520
so this is what

947
00:42:29,520 --> 00:42:32,319
you are going to find in uh presentation

948
00:42:32,319 --> 00:42:33,760
documents

949
00:42:33,760 --> 00:42:36,640
so this is the top

950
00:42:36,640 --> 00:42:39,359
seven list to check out

951
00:42:39,359 --> 00:42:42,839
and this is the link to the hubbard.com

952
00:42:42,839 --> 00:42:46,160
article which talks about a very fancy

953
00:42:46,160 --> 00:42:49,200
root kit that our intern identified

954
00:42:49,200 --> 00:42:51,760
and i think that this will cover roughly

955
00:42:51,760 --> 00:42:53,040
50

956
00:42:53,040 --> 00:42:56,640
of things that were new to me

957
00:42:57,359 --> 00:42:59,760
you know the techniques that were absent

958
00:42:59,760 --> 00:43:02,160
from uh previously

959
00:43:02,160 --> 00:43:04,480
uh known root kits and i should also

960
00:43:04,480 --> 00:43:08,000
mention the invisible group

961
00:43:08,000 --> 00:43:10,640
two more questions

962
00:43:10,800 --> 00:43:13,800
hello

963
00:43:22,240 --> 00:43:23,040
and

964
00:43:23,040 --> 00:43:26,240
having a hypervisor is like a usual

965
00:43:26,240 --> 00:43:27,359
requirement

966
00:43:27,359 --> 00:43:30,079
so if you're detecting some sample it

967
00:43:30,079 --> 00:43:32,880
could be vbs right

968
00:43:32,880 --> 00:43:35,839
so how do you go about it how do you

969
00:43:35,839 --> 00:43:38,079
support if you do

970
00:43:38,079 --> 00:43:41,720
embedded virtualization

971
00:43:41,920 --> 00:43:45,680
and what do you do about uh os uh

972
00:43:45,680 --> 00:43:47,599
changes would you have like uh snapshots

973
00:43:47,599 --> 00:43:50,000
with shifts

974
00:43:52,640 --> 00:43:55,359
virtualization

975
00:43:55,760 --> 00:43:58,400
now we certainly want to to do more of

976
00:43:58,400 --> 00:44:00,000
that

977
00:44:00,000 --> 00:44:02,560
you know our dark roof analysis shows

978
00:44:02,560 --> 00:44:04,800
that you know virtual machines you know

979
00:44:04,800 --> 00:44:05,520
are

980
00:44:05,520 --> 00:44:07,839
much slower if we do it for endpoints

981
00:44:07,839 --> 00:44:10,720
you know users will be unhappy for sure

982
00:44:10,720 --> 00:44:12,880
if we stick just to root key detection

983
00:44:12,880 --> 00:44:15,599
they won't notice

984
00:44:18,079 --> 00:44:21,119
the second question about vbs we are not

985
00:44:21,119 --> 00:44:23,520
really supposing vbs in any particular

986
00:44:23,520 --> 00:44:24,720
way

987
00:44:24,720 --> 00:44:27,040
but since you are interested we should

988
00:44:27,040 --> 00:44:29,359
work on that

989
00:44:29,359 --> 00:44:31,839
the third question is about uh snapshots

990
00:44:31,839 --> 00:44:32,720
right

991
00:44:32,720 --> 00:44:35,119
so we've got snapshots which are you

992
00:44:35,119 --> 00:44:37,200
know for which we have like total

993
00:44:37,200 --> 00:44:38,960
clarity but if the client wants some

994
00:44:38,960 --> 00:44:42,079
customized snapshot so we can do that

995
00:44:42,079 --> 00:44:44,160
and for that snapshot you know we can do

996
00:44:44,160 --> 00:44:46,240
the same kind of magic so that all

997
00:44:46,240 --> 00:44:48,640
symbols are properly supposed to thank

998
00:44:48,640 --> 00:44:51,640
you

999
00:45:04,560 --> 00:45:06,480
the question is simple you want to tell

1000
00:45:06,480 --> 00:45:08,480
us something about linux systems

1001
00:45:08,480 --> 00:45:13,280
no i didn't but i did want to propose

1002
00:45:13,680 --> 00:45:17,520
naturally we want to develop in

1003
00:45:17,520 --> 00:45:17,839
so this

1004
00:45:17,839 --> 00:45:19,359
next step

1005
00:45:19,359 --> 00:45:21,520
will involve not just some new windows

1006
00:45:21,520 --> 00:45:22,640
techniques

1007
00:45:22,640 --> 00:45:25,359
but also support for linux systems

1008
00:45:25,359 --> 00:45:27,760
i cannot really give you the exact

1009
00:45:27,760 --> 00:45:29,760
product roadmap but

1010
00:45:29,760 --> 00:45:33,280
things like this are there

1011
00:45:33,280 --> 00:45:35,040
we will need support you know if the

1012
00:45:35,040 --> 00:45:37,520
community is doing it it will be faster

1013
00:45:37,520 --> 00:45:39,119
it will be more interesting because this

1014
00:45:39,119 --> 00:45:41,440
way we should be able to discuss

1015
00:45:41,440 --> 00:45:43,839
know the most difficult the most

1016
00:45:43,839 --> 00:45:47,119
contentious elements

1017
00:46:07,599 --> 00:46:08,480
which

1018
00:46:08,480 --> 00:46:12,560
simplifies uh working with the raw data

1019
00:46:12,560 --> 00:46:15,280
can you imagine like no volatility

1020
00:46:15,280 --> 00:46:16,880
something similar

1021
00:46:16,880 --> 00:46:19,920
we have not heard

1022
00:46:21,520 --> 00:46:24,720
of anybody trying to attack sen

1023
00:46:24,720 --> 00:46:28,800
no let alone dark track both however the

1024
00:46:28,800 --> 00:46:30,800
more popular it becomes the higher the

1025
00:46:30,800 --> 00:46:34,400
probability it will be attacked so

1026
00:46:34,400 --> 00:46:37,119
we have plans for that

1027
00:46:37,119 --> 00:46:42,200
i mean we have plans for defending that

1028
00:46:49,599 --> 00:46:52,560
thank you very much for your reports

1029
00:46:52,560 --> 00:46:54,240
i understand it's primarily about

1030
00:46:54,240 --> 00:46:57,240
detection

1031
00:47:06,240 --> 00:47:09,359
techniques surplus linux techniques in

1032
00:47:09,359 --> 00:47:11,839
terms of complexity it's a provocative

1033
00:47:11,839 --> 00:47:14,960
question a holy war

1034
00:47:17,520 --> 00:47:19,440
as many answers as you

1035
00:47:19,440 --> 00:47:21,920
as people

1036
00:47:22,800 --> 00:47:25,680
we started working uh with the linux in

1037
00:47:25,680 --> 00:47:28,640
particular with australia

1038
00:47:29,200 --> 00:47:31,520
and my impression is that linux is uh

1039
00:47:31,520 --> 00:47:35,359
easier i mean easier to detect

1040
00:47:35,359 --> 00:47:36,160
and

1041
00:47:36,160 --> 00:47:40,480
the number of variations is smaller

1042
00:47:42,160 --> 00:47:43,839
techniques are fewer

1043
00:47:43,839 --> 00:47:46,640
therefore defense is easier

1044
00:47:46,640 --> 00:47:48,800
source code is helpful because we don't

1045
00:47:48,800 --> 00:47:50,400
really need to reverse anything you know

1046
00:47:50,400 --> 00:47:52,720
as we're doing uh vmi

1047
00:47:52,720 --> 00:47:55,839
reverse engineering

1048
00:47:56,800 --> 00:48:00,880
we have seen you know a lot of uh say uh

1049
00:48:00,880 --> 00:48:02,800
indian knockoffs

1050
00:48:02,800 --> 00:48:07,000
and we were really scared

1051
00:48:19,920 --> 00:48:21,520
there will be more interesting

1052
00:48:21,520 --> 00:48:25,839
techniques like this because naturally

1053
00:48:27,920 --> 00:48:29,520
they will be more attractive for the

1054
00:48:29,520 --> 00:48:32,079
attackers

1055
00:48:32,720 --> 00:48:34,720
so eventually you know it may be as

1056
00:48:34,720 --> 00:48:36,480
popular as windows

1057
00:48:36,480 --> 00:48:38,559
10

1058
00:48:40,720 --> 00:48:42,000
so the number of techniques at the

1059
00:48:42,000 --> 00:48:45,200
moment is uh more limited because the

1060
00:48:45,200 --> 00:48:47,599
number of systems is not dominant but

1061
00:48:47,599 --> 00:48:50,559
it's changing already

1062
00:48:54,160 --> 00:48:55,839
what do we know about ruth case at the

1063
00:48:55,839 --> 00:48:58,799
hypervisor level

1064
00:48:59,839 --> 00:49:03,119
that's the level of the host

1065
00:49:04,960 --> 00:49:13,119
[Music]

1066
00:49:13,280 --> 00:49:17,240
from what we already know

1067
00:49:17,800 --> 00:49:20,829
[Music]

1068
00:49:20,960 --> 00:49:21,920
you know

1069
00:49:21,920 --> 00:49:24,000
the malware has escaped the virtual

1070
00:49:24,000 --> 00:49:26,480
machine and infected the host machine

1071
00:49:26,480 --> 00:49:28,880
it's a well-known case

1072
00:49:28,880 --> 00:49:31,119
and yes there have been

1073
00:49:31,119 --> 00:49:33,359
studies on uh

1074
00:49:33,359 --> 00:49:36,400
uh how to escape a virtual machine uh vw

1075
00:49:36,400 --> 00:49:38,319
into our own you know

1076
00:49:38,319 --> 00:49:40,800
covers this in a lot of detail

1077
00:49:40,800 --> 00:49:42,800
consultant micro but you don't really

1078
00:49:42,800 --> 00:49:45,359
see it in the wild that often because

1079
00:49:45,359 --> 00:49:47,680
it's complicated

1080
00:49:47,680 --> 00:49:49,440
because in order to do that you need to

1081
00:49:49,440 --> 00:49:51,599
find a particular target then you need

1082
00:49:51,599 --> 00:49:54,480
to collect additional information

1083
00:49:54,480 --> 00:49:57,839
in order to actually find a good poc

1084
00:49:57,839 --> 00:49:59,680
which will be functional when you need

1085
00:49:59,680 --> 00:50:00,400
it

1086
00:50:00,400 --> 00:50:04,800
too much effort really for most cases

1087
00:50:06,720 --> 00:50:08,720
that's you know too sophisticated this

1088
00:50:08,720 --> 00:50:09,760
is a kind of

1089
00:50:09,760 --> 00:50:12,960
rube goldberg way of doing

1090
00:50:23,760 --> 00:50:26,720
so it may want to persist there

1091
00:50:26,720 --> 00:50:28,400
and stay hidden

1092
00:50:28,400 --> 00:50:31,839
you know for such a particular scenario

1093
00:50:31,839 --> 00:50:33,760
you don't really need to escape the

1094
00:50:33,760 --> 00:50:36,480
virtual machine

1095
00:50:38,559 --> 00:50:41,559
question

1096
00:50:49,520 --> 00:50:51,520
many well-known functions that can be

1097
00:50:51,520 --> 00:50:53,680
used by malicious drivers

1098
00:50:53,680 --> 00:50:58,078
how do we avoid false positives

1099
00:51:00,400 --> 00:51:01,680
you must be talking about this slide

1100
00:51:01,680 --> 00:51:03,839
right

1101
00:51:06,839 --> 00:51:10,559
now by default that's complicated

1102
00:51:10,559 --> 00:51:14,240
because if we're assuming it's a regular

1103
00:51:14,240 --> 00:51:17,520
workstation for example you know

1104
00:51:17,520 --> 00:51:19,119
and we will be analyzing what's

1105
00:51:19,119 --> 00:51:20,960
happening there for months there will be

1106
00:51:20,960 --> 00:51:24,079
lots of false positives

1107
00:51:26,000 --> 00:51:28,559
because some of these false positives

1108
00:51:28,559 --> 00:51:31,760
will be related to av for example

1109
00:51:31,760 --> 00:51:33,359
and you know for a system like this and

1110
00:51:33,359 --> 00:51:35,119
a v will

1111
00:51:35,119 --> 00:51:38,880
we're looking like a road kid right

1112
00:51:39,040 --> 00:51:40,400
however

1113
00:51:40,400 --> 00:51:42,640
you know in a sandbox it's different

1114
00:51:42,640 --> 00:51:45,200
because uh time is limited and not

1115
00:51:45,200 --> 00:51:46,559
everything is

1116
00:51:46,559 --> 00:51:47,680
happening

1117
00:51:47,680 --> 00:51:49,040
in the sandbox

1118
00:51:49,040 --> 00:51:51,200
in any case he can sort of take into

1119
00:51:51,200 --> 00:51:54,240
account what's coming into his sandbox

1120
00:51:54,240 --> 00:51:58,078
so with this architectural approach

1121
00:51:58,400 --> 00:52:00,720
he won't really see too many things that

1122
00:52:00,720 --> 00:52:05,399
could become false positives there

1123
00:52:17,599 --> 00:52:20,319
sandbox we're not getting any false

1124
00:52:20,319 --> 00:52:23,119
positives at all

1125
00:52:25,520 --> 00:52:27,040
i'm sorry we did have some false

1126
00:52:27,040 --> 00:52:29,680
positives related to the race condition

1127
00:52:29,680 --> 00:52:33,200
let me tell you about this condition

1128
00:52:33,200 --> 00:52:34,960
it was a funny there was an interesting

1129
00:52:34,960 --> 00:52:37,839
race condition there

1130
00:52:43,599 --> 00:52:46,599
were

1131
00:52:52,640 --> 00:52:55,599
emergence of new drivers we can actually

1132
00:52:55,599 --> 00:52:58,559
intercept numerous functions and

1133
00:52:58,559 --> 00:53:01,119
at top level uh function was intercepted

1134
00:53:01,119 --> 00:53:02,079
and that

1135
00:53:02,079 --> 00:53:04,480
brought us into race conditions

1136
00:53:04,480 --> 00:53:06,000
so in the operating system some

1137
00:53:06,000 --> 00:53:09,119
something was uh loading its driver

1138
00:53:09,119 --> 00:53:10,720
and the first symbol in driver

1139
00:53:10,720 --> 00:53:14,000
registration was called

1140
00:53:14,000 --> 00:53:15,440
in the bottom you know there was this

1141
00:53:15,440 --> 00:53:17,680
function and there was a lot of codes in

1142
00:53:17,680 --> 00:53:19,040
the middle

1143
00:53:19,040 --> 00:53:21,680
and we were in a we were not able

1144
00:53:21,680 --> 00:53:23,520
to do the interest that while the system

1145
00:53:23,520 --> 00:53:25,119
was loading drivers

1146
00:53:25,119 --> 00:53:27,359
and when we checked the state of learned

1147
00:53:27,359 --> 00:53:29,280
at the end of the loading process we saw

1148
00:53:29,280 --> 00:53:31,520
you know there was something new there

1149
00:53:31,520 --> 00:53:34,559
and it was not alleged

1150
00:53:35,520 --> 00:53:39,280
you know we were in this

1151
00:53:39,280 --> 00:53:41,280
code execution window

1152
00:53:41,280 --> 00:53:42,880
when you know

1153
00:53:42,880 --> 00:53:45,280
code was being executed but we still

1154
00:53:45,280 --> 00:53:48,400
hadn't sort of uh registered it

1155
00:53:48,400 --> 00:53:50,640
we found a way around it my

1156
00:53:50,640 --> 00:53:52,960
recommendation

1157
00:53:52,960 --> 00:53:55,960
is

1158
00:53:57,599 --> 00:53:59,359
you know all those who do correlations

1159
00:53:59,359 --> 00:54:02,240
who do acms who do you know event

1160
00:54:02,240 --> 00:54:03,920
monitoring they're all using

1161
00:54:03,920 --> 00:54:06,559
whitelisting

1162
00:54:07,200 --> 00:54:10,640
so that's how we can fix it iteratively

1163
00:54:10,640 --> 00:54:12,640
so on a particular infrastructure it

1164
00:54:12,640 --> 00:54:15,040
will exponentially reduce the number of

1165
00:54:15,040 --> 00:54:16,640
false positives

1166
00:54:16,640 --> 00:54:18,240
but you're absolutely right you know

1167
00:54:18,240 --> 00:54:22,598
some actions will be legitimate

1168
00:54:36,319 --> 00:54:38,640
is that a disadvantage

1169
00:54:38,640 --> 00:54:39,680
so

1170
00:54:39,680 --> 00:54:43,598
if the driver is there for a long time

1171
00:54:44,160 --> 00:54:46,079
maybe you won't see it in your test

1172
00:54:46,079 --> 00:54:47,200
window

1173
00:54:47,200 --> 00:54:49,839
no you're right

1174
00:54:50,960 --> 00:54:53,359
but the only solution

1175
00:54:53,359 --> 00:54:55,359
is to come up with new

1176
00:54:55,359 --> 00:54:57,920
triggers for analysis that is analyzed

1177
00:54:57,920 --> 00:55:00,160
more often

1178
00:55:00,160 --> 00:55:03,799
on the other hand

1179
00:55:18,240 --> 00:55:19,839
for example maybe you know some

1180
00:55:19,839 --> 00:55:22,720
specially signed drivers should not uh

1181
00:55:22,720 --> 00:55:25,440
generate positive events and so on

1182
00:55:25,440 --> 00:55:27,119
but you know it's an endless struggle

1183
00:55:27,119 --> 00:55:29,119
isn't it

1184
00:55:29,119 --> 00:55:32,000
and you won't have an ideal system

1185
00:55:32,000 --> 00:55:34,559
it will always be work in progress

1186
00:55:34,559 --> 00:55:37,040
so in a system you know drivers get so

1187
00:55:37,040 --> 00:55:40,000
loaded and uploaded

1188
00:55:40,000 --> 00:55:44,720
like this action itself is not malicious

1189
00:55:53,200 --> 00:55:54,880
and there won't be any false positive

1190
00:55:54,880 --> 00:55:56,079
there

1191
00:55:56,079 --> 00:55:58,480
nobody should be trying

1192
00:55:58,480 --> 00:56:01,760
to write anything into this section of

1193
00:56:01,760 --> 00:56:04,799
some driver you know some techniques

1194
00:56:04,799 --> 00:56:06,720
by default will not produce false

1195
00:56:06,720 --> 00:56:08,640
positives i hope i've been able to

1196
00:56:08,640 --> 00:56:12,040
answer your questions

1197
00:56:21,839 --> 00:56:24,480
like if a particular driver violates the

1198
00:56:24,480 --> 00:56:29,559
rules will that guarantee more attention

1199
00:56:39,040 --> 00:56:40,880
you know very often the users of our

1200
00:56:40,880 --> 00:56:42,240
products simply do not have the

1201
00:56:42,240 --> 00:56:43,680
resources for that

1202
00:56:43,680 --> 00:56:45,520
but it's technically feasible it can't

1203
00:56:45,520 --> 00:56:47,760
be done quite easily sure you can

1204
00:56:47,760 --> 00:56:50,079
establish alerts in the system

1205
00:56:50,079 --> 00:56:53,119
and dark roof will actually you know

1206
00:56:53,119 --> 00:56:56,480
handle that on the fly

1207
00:56:56,480 --> 00:56:58,799
and then

1208
00:57:05,599 --> 00:57:07,599
because often people have those great

1209
00:57:07,599 --> 00:57:09,599
improvement ideas but when we implement

1210
00:57:09,599 --> 00:57:11,359
a particular product

1211
00:57:11,359 --> 00:57:14,000
most of these things go out the window

1212
00:57:14,000 --> 00:57:15,680
when we realize that

1213
00:57:15,680 --> 00:57:17,440
the client really doesn't have spare

1214
00:57:17,440 --> 00:57:19,200
resources for that

1215
00:57:19,200 --> 00:57:22,319
you can certainly do it in your own lab

1216
00:57:22,319 --> 00:57:25,520
thank you very much

1217
00:57:25,520 --> 00:57:27,920
thank you very much for your attention

1218
00:57:27,920 --> 00:57:31,480
and for your questions

