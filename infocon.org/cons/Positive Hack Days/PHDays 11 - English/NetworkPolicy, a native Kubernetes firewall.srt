1
00:00:09,519 --> 00:00:11,920
hello thank you for joining us at our

2
00:00:11,920 --> 00:00:15,280
presentation i have a poll for you a

3
00:00:15,280 --> 00:00:16,960
show of hands who have worked with

4
00:00:16,960 --> 00:00:19,760
kubernetes great call how about network

5
00:00:19,760 --> 00:00:22,800
policy who worked with network policy

6
00:00:22,800 --> 00:00:24,320
less

7
00:00:24,320 --> 00:00:27,119
hands but hopefully you would want to

8
00:00:27,119 --> 00:00:31,039
use both kubernetes and network policy

9
00:00:31,039 --> 00:00:34,000
it doesn't even matter if you have ever

10
00:00:34,000 --> 00:00:36,399
used kubernetes my name is dmitry jeff

11
00:00:36,399 --> 00:00:37,920
de kima

12
00:00:37,920 --> 00:00:40,879
i'm cto and

13
00:00:40,879 --> 00:00:44,320
establisher of landry startup and we do

14
00:00:44,320 --> 00:00:46,480
everything in security and you probably

15
00:00:46,480 --> 00:00:48,960
know me on ks and security telegram

16
00:00:48,960 --> 00:00:51,199
channel where i publish interesting news

17
00:00:51,199 --> 00:00:53,440
related to kubernetes

18
00:00:53,440 --> 00:00:56,960
and i also have been to various uh

19
00:00:56,960 --> 00:00:58,480
conferences

20
00:00:58,480 --> 00:01:00,320
hi there

21
00:01:00,320 --> 00:01:05,039
i'm sergei kannibor i study

22
00:01:05,119 --> 00:01:07,760
the ib part are they the information

23
00:01:07,760 --> 00:01:09,439
security part of kubernetes and they

24
00:01:09,439 --> 00:01:11,200
also participate in developing the

25
00:01:11,200 --> 00:01:14,240
product so this is what we are

26
00:01:14,240 --> 00:01:16,720
going to do today

27
00:01:16,720 --> 00:01:19,600
we can keep uh going on and on about

28
00:01:19,600 --> 00:01:22,960
kubernetes and our main idea is to

29
00:01:22,960 --> 00:01:24,880
eliminate every

30
00:01:24,880 --> 00:01:27,280
possible every conceivable gap you might

31
00:01:27,280 --> 00:01:32,640
have in a network policy of kubernetes

32
00:01:33,600 --> 00:01:35,840
so your

33
00:01:35,840 --> 00:01:37,439
teams would never

34
00:01:37,439 --> 00:01:39,119
tell you that you can't do it this way

35
00:01:39,119 --> 00:01:41,840
we don't know how

36
00:01:47,040 --> 00:01:50,399
let us start with the very beginning

37
00:01:50,399 --> 00:01:53,040
probably not all of you

38
00:01:53,040 --> 00:01:55,200
i know how it all works

39
00:01:55,200 --> 00:01:58,079
in cabinets

40
00:01:58,240 --> 00:02:00,880
kubernetes has a very

41
00:02:00,880 --> 00:02:02,000
flat

42
00:02:02,000 --> 00:02:05,520
network all pods have ip addresses

43
00:02:05,520 --> 00:02:06,799
and

44
00:02:06,799 --> 00:02:08,639
by default

45
00:02:08,639 --> 00:02:10,479
communication

46
00:02:10,479 --> 00:02:12,400
goes through dns

47
00:02:12,400 --> 00:02:14,319
servers discovery

48
00:02:14,319 --> 00:02:16,879
so they address each other by names and

49
00:02:16,879 --> 00:02:20,080
ips themselves do not really mean it

50
00:02:20,080 --> 00:02:23,120
mean a thing in kubernetes your server

51
00:02:23,120 --> 00:02:25,920
starts then it goes from one node to

52
00:02:25,920 --> 00:02:28,319
another one and this ip

53
00:02:28,319 --> 00:02:31,200
uh wants to a different uh microservice

54
00:02:31,200 --> 00:02:33,280
so at one point of time

55
00:02:33,280 --> 00:02:34,800
um

56
00:02:34,800 --> 00:02:39,599
this ip belongs to one service in next

57
00:02:39,599 --> 00:02:44,079
second it goes to a different service

58
00:02:44,800 --> 00:02:47,680
so ip address is not something that you

59
00:02:47,680 --> 00:02:51,040
wish to follow in kubernetes in terms of

60
00:02:51,040 --> 00:02:53,519
threat hunting in terms of uh

61
00:02:53,519 --> 00:02:55,840
researching incidents because it

62
00:02:55,840 --> 00:02:58,319
it it pretty much goes

63
00:02:58,319 --> 00:03:01,760
uh from one service to others

64
00:03:01,760 --> 00:03:02,959
if you're

65
00:03:02,959 --> 00:03:05,120
um

66
00:03:05,120 --> 00:03:07,040
load increases the number of services

67
00:03:07,040 --> 00:03:10,159
increases and vice versa and so it's it

68
00:03:10,159 --> 00:03:13,599
is great it makes your resource

69
00:03:13,599 --> 00:03:16,560
usage more effective and every pod

70
00:03:16,560 --> 00:03:18,640
by default can communicate with any

71
00:03:18,640 --> 00:03:20,640
other part

72
00:03:20,640 --> 00:03:23,280
which means that by default

73
00:03:23,280 --> 00:03:25,920
irrespects irrespective of whether or

74
00:03:25,920 --> 00:03:28,000
not you're using

75
00:03:28,000 --> 00:03:30,799
one name space or different name spaces

76
00:03:30,799 --> 00:03:33,519
every pod can communicate with every

77
00:03:33,519 --> 00:03:36,000
other part so if an adversary

78
00:03:36,000 --> 00:03:38,879
compromises a particular pod and gets

79
00:03:38,879 --> 00:03:41,200
into this container he can scan

80
00:03:41,200 --> 00:03:43,280
the whole network and get access to the

81
00:03:43,280 --> 00:03:44,799
whole network

82
00:03:44,799 --> 00:03:46,400
in certain cases

83
00:03:46,400 --> 00:03:49,120
in one cluster you may have

84
00:03:49,120 --> 00:03:53,280
several def test stage prod

85
00:03:53,280 --> 00:03:56,080
and in your brand in production you have

86
00:03:56,080 --> 00:03:59,519
card data user data and all that

87
00:03:59,519 --> 00:04:02,080
and then all of a sudden

88
00:04:02,080 --> 00:04:04,000
and say developers don't have access to

89
00:04:04,000 --> 00:04:08,080
it but they do have to scadal namespace

90
00:04:08,080 --> 00:04:10,560
and then he addresses pro database and

91
00:04:10,560 --> 00:04:12,000
gets all the

92
00:04:12,000 --> 00:04:13,519
user data because there are no

93
00:04:13,519 --> 00:04:15,360
constraints in place

94
00:04:15,360 --> 00:04:16,959
so

95
00:04:16,959 --> 00:04:20,000
when kubernetes comes out of the bot the

96
00:04:20,000 --> 00:04:22,000
network is fully fled and everybody

97
00:04:22,000 --> 00:04:24,400
talks to everybody another important

98
00:04:24,400 --> 00:04:25,840
thing is that

99
00:04:25,840 --> 00:04:28,880
kubernetes network is not provided by

100
00:04:28,880 --> 00:04:31,120
default it's provided by a special

101
00:04:31,120 --> 00:04:33,199
interface called container networking

102
00:04:33,199 --> 00:04:36,320
interface and then you need to pick out

103
00:04:36,320 --> 00:04:38,720
of uh

104
00:04:38,720 --> 00:04:40,960
plugging

105
00:04:40,960 --> 00:04:43,520
that cni interface is going to my cues

106
00:04:43,520 --> 00:04:44,479
off

107
00:04:44,479 --> 00:04:47,040
cilium and kalika are

108
00:04:47,040 --> 00:04:48,880
the most popular ones there are some

109
00:04:48,880 --> 00:04:50,160
others

110
00:04:50,160 --> 00:04:55,199
cube rotors etc that cni can use

111
00:04:55,680 --> 00:04:58,160
and this is because kubernetes is not an

112
00:04:58,160 --> 00:04:59,919
out-of-the-box kind of solution it's a

113
00:04:59,919 --> 00:05:01,120
framework

114
00:05:01,120 --> 00:05:03,759
and in our practice

115
00:05:03,759 --> 00:05:05,440
we haven't seen any

116
00:05:05,440 --> 00:05:06,160
uh

117
00:05:06,160 --> 00:05:09,199
every kubernetes are unique you know we

118
00:05:09,199 --> 00:05:10,400
haven't seen any

119
00:05:10,400 --> 00:05:13,840
um totally identical kubernetes

120
00:05:13,840 --> 00:05:15,840
so you can encounter almost anything so

121
00:05:15,840 --> 00:05:17,840
you pick

122
00:05:17,840 --> 00:05:18,720
um

123
00:05:18,720 --> 00:05:20,320
one particular

124
00:05:20,320 --> 00:05:25,600
c9 plugin for the network to work

125
00:05:25,600 --> 00:05:27,680
each of them have their own peculiar

126
00:05:27,680 --> 00:05:29,759
issues

127
00:05:29,759 --> 00:05:32,800
if you use something out of this it may

128
00:05:32,800 --> 00:05:34,639
introdu it may introduce certain

129
00:05:34,639 --> 00:05:37,199
peculiarities so bear this in mind

130
00:05:37,199 --> 00:05:41,199
so what's under the hood so to speak

131
00:05:41,759 --> 00:05:44,639
either they work through ip tables or

132
00:05:44,639 --> 00:05:48,080
through a more advanced technology ebpf

133
00:05:48,080 --> 00:05:49,759
which

134
00:05:49,759 --> 00:05:53,840
which is external berkeley pocket filter

135
00:05:54,960 --> 00:05:57,919
so external berkeley packet filter

136
00:05:57,919 --> 00:05:59,919
is different from the

137
00:05:59,919 --> 00:06:03,039
older version why ebpf

138
00:06:03,039 --> 00:06:04,840
is winning things

139
00:06:04,840 --> 00:06:08,319
over well that's because if

140
00:06:08,319 --> 00:06:11,199
this this long chain is out that

141
00:06:11,199 --> 00:06:13,199
introduces latency and it decreases

142
00:06:13,199 --> 00:06:16,319
performance and

143
00:06:18,080 --> 00:06:20,800
hinders efficiency of

144
00:06:20,800 --> 00:06:22,160
execution

145
00:06:22,160 --> 00:06:25,120
so but ebpf comes with certain

146
00:06:25,120 --> 00:06:26,639
peculiarities

147
00:06:26,639 --> 00:06:29,199
and you want to understand uh

148
00:06:29,199 --> 00:06:33,759
what your plugin works best with

149
00:06:38,400 --> 00:06:42,080
all of us are working towards zero trust

150
00:06:42,080 --> 00:06:43,120
concept

151
00:06:43,120 --> 00:06:46,000
anything could be compromised

152
00:06:46,000 --> 00:06:48,639
in your infrastructure the attacker may

153
00:06:48,639 --> 00:06:51,599
try to develop his attack

154
00:06:51,599 --> 00:06:54,479
and we want to make his life more

155
00:06:54,479 --> 00:06:56,160
difficult

156
00:06:56,160 --> 00:06:59,520
and yet not to create

157
00:06:59,520 --> 00:07:01,440
hindrance to the developers developing

158
00:07:01,440 --> 00:07:03,599
new features you know not to not to

159
00:07:03,599 --> 00:07:05,599
jeopardize not to hinder

160
00:07:05,599 --> 00:07:07,599
not to become a stumbling block for the

161
00:07:07,599 --> 00:07:08,639
business

162
00:07:08,639 --> 00:07:11,680
so zero trust is a way to go

163
00:07:11,680 --> 00:07:13,380
for us

164
00:07:13,380 --> 00:07:15,520
[Music]

165
00:07:15,520 --> 00:07:17,440
to give you an example

166
00:07:17,440 --> 00:07:20,800
somebody compromised the microservice

167
00:07:20,800 --> 00:07:22,479
this may happen

168
00:07:22,479 --> 00:07:26,080
and if we have certain

169
00:07:26,720 --> 00:07:28,080
constraints

170
00:07:28,080 --> 00:07:30,080
the attacker cannot go beyond the

171
00:07:30,080 --> 00:07:32,560
so-called y list if service a talks to

172
00:07:32,560 --> 00:07:34,000
service b

173
00:07:34,000 --> 00:07:36,080
and he gets the service a he wouldn't

174
00:07:36,080 --> 00:07:38,319
talk to anyone but servers b

175
00:07:38,319 --> 00:07:40,720
full stop

176
00:07:42,080 --> 00:07:45,840
so how is it achieved in kubernetes

177
00:07:45,840 --> 00:07:46,879
this is

178
00:07:46,879 --> 00:07:49,840
the classification that we came up with

179
00:07:49,840 --> 00:07:53,680
you can do it on application level on a

180
00:07:53,680 --> 00:07:55,280
service mesh

181
00:07:55,280 --> 00:07:58,960
level eco or linkard or the network

182
00:07:58,960 --> 00:08:00,080
plugins

183
00:08:00,080 --> 00:08:03,360
for cni's that i demonstrated earlier in

184
00:08:03,360 --> 00:08:05,520
application level it is realized through

185
00:08:05,520 --> 00:08:07,440
commercial applications

186
00:08:07,440 --> 00:08:09,599
more often than not and through ordering

187
00:08:09,599 --> 00:08:13,199
your own logic into your code

188
00:08:13,199 --> 00:08:15,280
this might ask

189
00:08:15,280 --> 00:08:17,440
uh

190
00:08:17,759 --> 00:08:21,039
this may be injected

191
00:08:21,919 --> 00:08:25,318
later on

192
00:08:31,199 --> 00:08:33,200
it introduces additional

193
00:08:33,200 --> 00:08:35,679
financial load and additional

194
00:08:35,679 --> 00:08:37,519
uncertainty and i'm going to give you an

195
00:08:37,519 --> 00:08:38,958
example later

196
00:08:38,958 --> 00:08:41,279
on service mesh level

197
00:08:41,279 --> 00:08:42,399
you have

198
00:08:42,399 --> 00:08:46,080
issue and allen kerdin

199
00:08:46,399 --> 00:08:49,600
with the help of sidecar container

200
00:08:49,600 --> 00:08:51,760
so

201
00:08:51,760 --> 00:08:52,839
this is the

202
00:08:52,839 --> 00:08:54,880
instance that can

203
00:08:54,880 --> 00:08:56,800
cipher your whole traffic your

204
00:08:56,800 --> 00:08:58,080
application

205
00:08:58,080 --> 00:09:01,279
is agnostic to this logic and this

206
00:09:01,279 --> 00:09:02,000
uh

207
00:09:02,000 --> 00:09:03,920
logic is only

208
00:09:03,920 --> 00:09:06,080
being handled by the proxy

209
00:09:06,080 --> 00:09:09,120
so this service meshes allow you to do

210
00:09:09,120 --> 00:09:11,360
that

211
00:09:13,920 --> 00:09:17,360
specify it all the way to the iep

212
00:09:17,360 --> 00:09:20,800
it has also relies on user space level

213
00:09:20,800 --> 00:09:25,200
and case three on the cni level

214
00:09:25,200 --> 00:09:28,320
and you obviously cannot

215
00:09:28,320 --> 00:09:29,680
avoid

216
00:09:29,680 --> 00:09:31,040
using

217
00:09:31,040 --> 00:09:33,519
this level

218
00:09:33,760 --> 00:09:36,720
you really have to use cni

219
00:09:36,720 --> 00:09:39,120
so it's realized by

220
00:09:39,120 --> 00:09:42,720
network policy a specialized service

221
00:09:42,720 --> 00:09:45,279
more often do not it works on levels

222
00:09:45,279 --> 00:09:48,080
three and four you can control the ip

223
00:09:48,080 --> 00:09:52,080
address and the ports and more advanced

224
00:09:52,080 --> 00:09:54,560
variants custom variants

225
00:09:54,560 --> 00:09:57,760
allow you to go as deep as l seven level

226
00:09:57,760 --> 00:09:58,800
seven

227
00:09:58,800 --> 00:10:00,560
and importantly

228
00:10:00,560 --> 00:10:02,640
they are realized on kernel space level

229
00:10:02,640 --> 00:10:05,440
that is when attacker gets inside the

230
00:10:05,440 --> 00:10:07,760
microservice

231
00:10:07,760 --> 00:10:10,240
it works

232
00:10:11,360 --> 00:10:14,880
not in a way it works in one level below

233
00:10:14,880 --> 00:10:16,480
so you have to

234
00:10:16,480 --> 00:10:19,680
have container escape and only then on

235
00:10:19,680 --> 00:10:21,519
the node level he can be able to

236
00:10:21,519 --> 00:10:24,160
manipulate but

237
00:10:24,160 --> 00:10:25,600
he cannot

238
00:10:25,600 --> 00:10:29,440
bypass network policy out of container

239
00:10:29,440 --> 00:10:32,399
easter can can be bypassed

240
00:10:32,399 --> 00:10:33,760
provided the attacker is inside the

241
00:10:33,760 --> 00:10:36,240
container

242
00:10:37,040 --> 00:10:38,079
you can

243
00:10:38,079 --> 00:10:39,360
somehow

244
00:10:39,360 --> 00:10:42,160
mute sidecar container and we can bypass

245
00:10:42,160 --> 00:10:42,959
this

246
00:10:42,959 --> 00:10:45,519
constraint in this way

247
00:10:45,519 --> 00:10:47,839
and we're going to discuss network

248
00:10:47,839 --> 00:10:50,480
policy now

249
00:10:51,120 --> 00:10:54,640
network policy can be

250
00:10:54,640 --> 00:10:56,079
realized

251
00:10:56,079 --> 00:10:59,079
natively

252
00:11:04,480 --> 00:11:06,480
and also custom made

253
00:11:06,480 --> 00:11:08,800
so cni

254
00:11:08,800 --> 00:11:11,839
makers can extend on them

255
00:11:11,839 --> 00:11:14,160
advance them improve on them and begin

256
00:11:14,160 --> 00:11:15,360
to see it

257
00:11:15,360 --> 00:11:17,519
network policies are not realized by

258
00:11:17,519 --> 00:11:21,839
kubernetes this is the task for cni

259
00:11:21,839 --> 00:11:23,440
there is a cni

260
00:11:23,440 --> 00:11:25,680
flannel

261
00:11:25,680 --> 00:11:27,519
that is not capable of working with

262
00:11:27,519 --> 00:11:29,760
network policies you just create this

263
00:11:29,760 --> 00:11:31,920
resource and he doesn't do anything

264
00:11:31,920 --> 00:11:34,319
about it

265
00:11:34,880 --> 00:11:36,880
and this network policy just doesn't

266
00:11:36,880 --> 00:11:38,800
know how to limit anything

267
00:11:38,800 --> 00:11:42,480
while the the arrest of the cni's can do

268
00:11:42,480 --> 00:11:44,560
it

269
00:11:44,560 --> 00:11:48,160
pay special attention to cilia

270
00:11:52,250 --> 00:11:54,160
[Music]

271
00:11:54,160 --> 00:11:55,120
we can

272
00:11:55,120 --> 00:11:59,440
uh support ap i group and custom group

273
00:11:59,440 --> 00:12:02,160
clem dot ie and kerdi

274
00:12:02,160 --> 00:12:04,560
project calico.org they have their own

275
00:12:04,560 --> 00:12:06,320
custom variants

276
00:12:06,320 --> 00:12:07,519
but let us

277
00:12:07,519 --> 00:12:11,839
let us begin with native network policy

278
00:12:12,240 --> 00:12:15,519
like everything in kubernetes

279
00:12:15,519 --> 00:12:18,639
network policy is yaml

280
00:12:18,639 --> 00:12:20,720
yaml engineers

281
00:12:20,720 --> 00:12:23,519
that gets 500 000 per

282
00:12:23,519 --> 00:12:25,839
second

283
00:12:26,240 --> 00:12:29,680
so the beauty of it is that you can

284
00:12:29,680 --> 00:12:32,800
approach security as a policy esco you

285
00:12:32,800 --> 00:12:33,680
can

286
00:12:33,680 --> 00:12:35,440
store it in git

287
00:12:35,440 --> 00:12:37,920
you can look at the progress and the

288
00:12:37,920 --> 00:12:41,440
modification of your policies

289
00:12:41,440 --> 00:12:42,240
this

290
00:12:42,240 --> 00:12:44,079
resource is something that you get

291
00:12:44,079 --> 00:12:47,360
starting with version 1.7 now the latest

292
00:12:47,360 --> 00:12:50,240
version is 1.24

293
00:12:50,240 --> 00:12:53,040
if you make use of kubernetes

294
00:12:53,040 --> 00:12:57,600
it is bound to have network uh policy

295
00:12:57,600 --> 00:12:58,800
so network

296
00:12:58,800 --> 00:13:01,120
policy the way it works is

297
00:13:01,120 --> 00:13:03,200
uh using whitelist

298
00:13:03,200 --> 00:13:05,120
the service can only work with what is

299
00:13:05,120 --> 00:13:07,360
whitelisted

300
00:13:07,360 --> 00:13:10,000
so namespace is

301
00:13:10,000 --> 00:13:13,600
initially closed neither ingress or

302
00:13:13,600 --> 00:13:16,399
aggress traffic can go in or out but

303
00:13:16,399 --> 00:13:18,079
then

304
00:13:18,079 --> 00:13:19,200
you

305
00:13:19,200 --> 00:13:21,120
say that front-end can talk to back-end

306
00:13:21,120 --> 00:13:23,519
and back-end to i can address database

307
00:13:23,519 --> 00:13:25,440
but you clearly

308
00:13:25,440 --> 00:13:27,839
explicitly

309
00:13:27,839 --> 00:13:31,920
define who can talk to who

310
00:13:31,920 --> 00:13:34,560
it only the native network policy only

311
00:13:34,560 --> 00:13:36,720
works for code

312
00:13:36,720 --> 00:13:38,160
other instances

313
00:13:38,160 --> 00:13:41,440
like legacy infrastructure

314
00:13:41,440 --> 00:13:43,920
virtual machines that are outside the

315
00:13:43,920 --> 00:13:45,180
cube

316
00:13:45,180 --> 00:13:48,459
[Music]

317
00:13:48,880 --> 00:13:51,199
databases

318
00:13:51,199 --> 00:13:52,880
they don't understand it

319
00:13:52,880 --> 00:13:56,399
it can only be used

320
00:13:56,399 --> 00:14:00,240
at the granularity level

321
00:14:01,199 --> 00:14:02,560
and the policy

322
00:14:02,560 --> 00:14:04,000
describes

323
00:14:04,000 --> 00:14:06,959
what it can address

324
00:14:06,959 --> 00:14:11,479
and then and containers can be used

325
00:14:17,279 --> 00:14:20,399
in one company they have 56 containers

326
00:14:20,399 --> 00:14:23,360
working at the time

327
00:14:26,320 --> 00:14:28,240
so basically

328
00:14:28,240 --> 00:14:31,440
he doesn't know anything about it

329
00:14:31,440 --> 00:14:34,079
and if

330
00:14:34,160 --> 00:14:36,560
any of the processes

331
00:14:36,560 --> 00:14:40,160
abide by the rules then it's okay

332
00:14:43,519 --> 00:14:46,399
if it is done by sheldon it's okay it

333
00:14:46,399 --> 00:14:48,480
doesn't really understand and

334
00:14:48,480 --> 00:14:50,560
tie it to what's going on inside the

335
00:14:50,560 --> 00:14:53,040
container that's what i'm saying

336
00:14:53,040 --> 00:14:54,560
and this is

337
00:14:54,560 --> 00:14:56,639
an example for uh

338
00:14:56,639 --> 00:14:58,399
network policy

339
00:14:58,399 --> 00:15:00,800
uh ipv version

340
00:15:00,800 --> 00:15:03,920
you have a namespace

341
00:15:04,560 --> 00:15:06,399
while this network policy is being used

342
00:15:06,399 --> 00:15:09,839
then you have pod selector

343
00:15:10,720 --> 00:15:12,639
so this way we're saying that this

344
00:15:12,639 --> 00:15:15,920
policy is uh to be used to microservices

345
00:15:15,920 --> 00:15:19,760
with label called roll and it's equal db

346
00:15:19,760 --> 00:15:21,440
database so we want to apply this

347
00:15:21,440 --> 00:15:23,519
network policy to database there are

348
00:15:23,519 --> 00:15:26,399
ingress and aggress inbound and outbound

349
00:15:26,399 --> 00:15:30,160
traffic policies and then blocks

350
00:15:30,160 --> 00:15:32,240
describing what we want to do with our

351
00:15:32,240 --> 00:15:35,759
attention not necessarily

352
00:15:36,160 --> 00:15:36,959
i mean

353
00:15:36,959 --> 00:15:39,519
this is us giving the

354
00:15:39,519 --> 00:15:41,199
general understanding

355
00:15:41,199 --> 00:15:43,040
but they

356
00:15:43,040 --> 00:15:44,720
a grass traffic can come from a

357
00:15:44,720 --> 00:15:49,120
particular ip or ips or particular

358
00:15:49,120 --> 00:15:51,519
namespaces where label project equals

359
00:15:51,519 --> 00:15:54,959
this and that or say a micros

360
00:15:54,959 --> 00:15:56,800
particular microservice should be tied

361
00:15:56,800 --> 00:15:58,480
to a particular front head

362
00:15:58,480 --> 00:16:00,639
policies are tied to

363
00:16:00,639 --> 00:16:03,120
our pods or micro servers using labels

364
00:16:03,120 --> 00:16:05,360
you need to use labels in the right way

365
00:16:05,360 --> 00:16:06,880
so that

366
00:16:06,880 --> 00:16:09,759
microservice label this

367
00:16:09,759 --> 00:16:13,519
interacts with microservices label that

368
00:16:15,279 --> 00:16:19,920
here we have the ports named as well

369
00:16:20,800 --> 00:16:23,600
so a grass goes to particular ip blocks

370
00:16:23,600 --> 00:16:25,279
and particular ports

371
00:16:25,279 --> 00:16:26,320
that's it

372
00:16:26,320 --> 00:16:28,079
that's what native network policy is

373
00:16:28,079 --> 00:16:29,440
capable of

374
00:16:29,440 --> 00:16:31,279
obviously network policy keeps

375
00:16:31,279 --> 00:16:32,880
developing

376
00:16:32,880 --> 00:16:36,000
a kubernetes community releases new

377
00:16:36,000 --> 00:16:40,000
versions and tries to make it better and

378
00:16:40,000 --> 00:16:41,920
here on this slide you can see what has

379
00:16:41,920 --> 00:16:42,959
already

380
00:16:42,959 --> 00:16:44,560
been made what are the changes that

381
00:16:44,560 --> 00:16:46,800
they've introduced and what is in their

382
00:16:46,800 --> 00:16:49,279
plan there is a web group it's called

383
00:16:49,279 --> 00:16:52,079
uh network and policy api she network

384
00:16:52,079 --> 00:16:55,199
group they work specifically to

385
00:16:55,199 --> 00:16:59,120
develop network policy reserves

386
00:16:59,120 --> 00:17:00,959
network policy

387
00:17:00,959 --> 00:17:03,280
service and kubernetes

388
00:17:03,280 --> 00:17:06,399
[Music]

389
00:17:06,480 --> 00:17:09,760
the facts that they can support they

390
00:17:09,760 --> 00:17:12,000
fully qualify the name names is the new

391
00:17:12,000 --> 00:17:14,319
thing and policies for the whole cluster

392
00:17:14,319 --> 00:17:17,199
right now native policies are only used

393
00:17:17,199 --> 00:17:19,520
pertaining to a particular name place if

394
00:17:19,520 --> 00:17:22,640
you want one rule that would act for all

395
00:17:22,640 --> 00:17:24,959
microservices and all namespaces you

396
00:17:24,959 --> 00:17:28,319
have to copy paste it

397
00:17:28,319 --> 00:17:30,000
but you want to have it irrespective of

398
00:17:30,000 --> 00:17:33,520
namespace don't you

399
00:17:33,520 --> 00:17:35,200
you want this microsoft was it this

400
00:17:35,200 --> 00:17:37,360
particular label to go to

401
00:17:37,360 --> 00:17:39,520
this this and that and uh

402
00:17:39,520 --> 00:17:42,160
clusterwide policy applied to any kind

403
00:17:42,160 --> 00:17:43,600
of microspace

404
00:17:43,600 --> 00:17:45,120
microservices irrespective of name

405
00:17:45,120 --> 00:17:49,678
spaces would be a good way for it

406
00:17:50,400 --> 00:17:52,480
the constraints are known

407
00:17:52,480 --> 00:17:53,679
so

408
00:17:53,679 --> 00:17:56,480
sergey is going to tell you what they're

409
00:17:56,480 --> 00:17:58,080
doing about it

410
00:17:58,080 --> 00:17:59,840
yes i'm going to tell you about

411
00:17:59,840 --> 00:18:03,120
overcoming the constraints of native uh

412
00:18:03,120 --> 00:18:04,799
policies indeed

413
00:18:04,799 --> 00:18:08,400
the industry keeps developing

414
00:18:08,400 --> 00:18:11,520
and uh external cni vendors with their

415
00:18:11,520 --> 00:18:13,919
custom policies are there to resolve

416
00:18:13,919 --> 00:18:15,360
this issue

417
00:18:15,360 --> 00:18:19,520
and today we're going to look at two

418
00:18:19,520 --> 00:18:21,280
custom network policy calico and

419
00:18:21,280 --> 00:18:22,400
psyllium

420
00:18:22,400 --> 00:18:24,960
because these are most frequent and most

421
00:18:24,960 --> 00:18:28,440
popular ones

422
00:18:29,200 --> 00:18:31,919
and all slides are going to

423
00:18:31,919 --> 00:18:32,880
uh

424
00:18:32,880 --> 00:18:36,000
contain their their logos on the slides

425
00:18:36,000 --> 00:18:38,400
as you already know by default native

426
00:18:38,400 --> 00:18:41,520
policy can only be applied to ponds in

427
00:18:41,520 --> 00:18:44,160
custom network policies however it's

428
00:18:44,160 --> 00:18:46,960
extended you can also use it to

429
00:18:46,960 --> 00:18:49,280
host interfaces virtual machines and

430
00:18:49,280 --> 00:18:51,760
other instances

431
00:18:51,760 --> 00:18:54,320
these ones and that ones

432
00:18:54,320 --> 00:18:57,320
kalika

433
00:18:58,720 --> 00:19:00,240
calico has

434
00:19:00,240 --> 00:19:02,240
extended information in terms of

435
00:19:02,240 --> 00:19:03,679
selectors

436
00:19:03,679 --> 00:19:06,320
much labels and much expressions calico

437
00:19:06,320 --> 00:19:08,799
made what went further they introduced

438
00:19:08,799 --> 00:19:11,840
their own system

439
00:19:12,160 --> 00:19:14,559
that's uh uh first off

440
00:19:14,559 --> 00:19:16,480
well on the one hand it kind of

441
00:19:16,480 --> 00:19:19,440
constrains but then in extends uh the

442
00:19:19,440 --> 00:19:21,679
functional and you really need to to

443
00:19:21,679 --> 00:19:24,000
bear this in mind when you make use of

444
00:19:24,000 --> 00:19:26,160
calico custom network policies

445
00:19:26,160 --> 00:19:28,480
admittedly already mentioned that by

446
00:19:28,480 --> 00:19:32,080
default native policies

447
00:19:32,400 --> 00:19:37,360
describe only what is explicitly allowed

448
00:19:37,360 --> 00:19:39,760
wireless principle in custom policies we

449
00:19:39,760 --> 00:19:42,799
can act differently in calico there is

450
00:19:42,799 --> 00:19:46,000
this point action

451
00:19:46,000 --> 00:19:46,880
um

452
00:19:46,880 --> 00:19:48,240
we can

453
00:19:48,240 --> 00:19:51,440
not just use allow but also use deny we

454
00:19:51,440 --> 00:19:55,120
also can use a log

455
00:19:55,919 --> 00:19:58,960
and also pass that would pass the

456
00:19:58,960 --> 00:20:01,679
existing rule and go on to the next one

457
00:20:01,679 --> 00:20:04,080
in psyllium

458
00:20:04,080 --> 00:20:07,360
they have similar um

459
00:20:07,360 --> 00:20:10,479
approaches um

460
00:20:11,600 --> 00:20:14,240
and we're going to

461
00:20:14,240 --> 00:20:15,280
look at

462
00:20:15,280 --> 00:20:19,520
certain constraints as well later on

463
00:20:19,760 --> 00:20:20,559
in

464
00:20:20,559 --> 00:20:22,960
the custom network policies they have

465
00:20:22,960 --> 00:20:25,360
everything that native network policies

466
00:20:25,360 --> 00:20:28,559
have we can um use

467
00:20:28,559 --> 00:20:31,360
namespace selector and port

468
00:20:31,360 --> 00:20:34,080
labels but in calico we can also

469
00:20:34,080 --> 00:20:35,360
additionally

470
00:20:35,360 --> 00:20:37,280
use service account selectors which is

471
00:20:37,280 --> 00:20:39,600
useful if you want to write a policy

472
00:20:39,600 --> 00:20:41,360
type to pawns

473
00:20:41,360 --> 00:20:44,400
that are that have other that share a

474
00:20:44,400 --> 00:20:46,720
particular service account

475
00:20:46,720 --> 00:20:49,039
and in order to do that we can

476
00:20:49,039 --> 00:20:50,400
um

477
00:20:50,400 --> 00:20:53,440
tie to that label there is also support

478
00:20:53,440 --> 00:20:54,559
of

479
00:20:54,559 --> 00:20:55,840
say

480
00:20:55,840 --> 00:20:58,159
policies so you can describe it

481
00:20:58,159 --> 00:21:01,200
explicitly in policy and make use of it

482
00:21:01,200 --> 00:21:04,960
and also extended protocol use and ip

483
00:21:04,960 --> 00:21:06,000
use

484
00:21:06,000 --> 00:21:07,919
is something that i'd like to mention

485
00:21:07,919 --> 00:21:11,039
selium is very similar they also are

486
00:21:11,039 --> 00:21:14,400
label based and we can

487
00:21:14,799 --> 00:21:17,760
name labels of the pods service based

488
00:21:17,760 --> 00:21:19,840
especially when you say

489
00:21:19,840 --> 00:21:20,960
needs

490
00:21:20,960 --> 00:21:23,679
where endpoint is not behind

491
00:21:23,679 --> 00:21:24,880
the

492
00:21:24,880 --> 00:21:26,640
a port but behind the service and

493
00:21:26,640 --> 00:21:29,360
kubernetes and you can use this service

494
00:21:29,360 --> 00:21:30,559
label and

495
00:21:30,559 --> 00:21:33,679
service label is very usable in cilium

496
00:21:33,679 --> 00:21:35,919
you only you also have

497
00:21:35,919 --> 00:21:37,679
a predefined

498
00:21:37,679 --> 00:21:38,720
list

499
00:21:38,720 --> 00:21:42,880
like kubapi working nodes and other

500
00:21:42,880 --> 00:21:44,640
cube apis i mean

501
00:21:44,640 --> 00:21:46,400
on working notes and you can just use it

502
00:21:46,400 --> 00:21:48,559
in in your policy and another peculiar

503
00:21:48,559 --> 00:21:51,679
feature of psyllium is that uh

504
00:21:51,679 --> 00:21:53,919
you can have uh

505
00:21:53,919 --> 00:21:54,559
the

506
00:21:54,559 --> 00:21:55,760
policies

507
00:21:55,760 --> 00:21:58,960
which is non-existent in the native

508
00:21:58,960 --> 00:22:00,320
network

509
00:22:00,320 --> 00:22:02,400
organization if you have several dns

510
00:22:02,400 --> 00:22:04,720
names you can just

511
00:22:04,720 --> 00:22:06,720
point to a particular dns

512
00:22:06,720 --> 00:22:09,039
name and turn the policy the way we

513
00:22:09,039 --> 00:22:12,559
want it in in custom

514
00:22:12,559 --> 00:22:15,440
you also have network set and why

515
00:22:15,440 --> 00:22:17,200
would you want to use it

516
00:22:17,200 --> 00:22:20,400
say a part of your infrastructure is

517
00:22:20,400 --> 00:22:22,080
beyond

518
00:22:22,080 --> 00:22:24,640
kubernetes

519
00:22:24,640 --> 00:22:27,840
like virtual machines etc

520
00:22:27,840 --> 00:22:28,880
so

521
00:22:28,880 --> 00:22:31,360
you can limit their

522
00:22:31,360 --> 00:22:33,520
interaction with cooper

523
00:22:33,520 --> 00:22:36,720
we can identify the networks whitelisted

524
00:22:36,720 --> 00:22:38,640
and label it and then in policy in

525
00:22:38,640 --> 00:22:41,200
calico address

526
00:22:41,200 --> 00:22:43,200
referred to that label and it would

527
00:22:43,200 --> 00:22:44,880
interconnect and they could be used in

528
00:22:44,880 --> 00:22:48,000
policies in cilium uh this

529
00:22:48,000 --> 00:22:50,080
can also be done

530
00:22:50,080 --> 00:22:52,640
it can be stated explicitly in their

531
00:22:52,640 --> 00:22:55,039
policy

532
00:22:55,039 --> 00:22:58,720
one peculiar feature of

533
00:22:59,039 --> 00:23:01,840
custom realization

534
00:23:01,840 --> 00:23:03,120
unlike

535
00:23:03,120 --> 00:23:06,960
native realization is classified policy

536
00:23:06,960 --> 00:23:09,120
in native you could you can only

537
00:23:09,120 --> 00:23:11,760
orchestrate pod to port communication

538
00:23:11,760 --> 00:23:14,960
here in cluster-wide uh policies we can

539
00:23:14,960 --> 00:23:17,280
just name one label

540
00:23:17,280 --> 00:23:19,520
and the policy would match

541
00:23:19,520 --> 00:23:21,360
in all men spaces

542
00:23:21,360 --> 00:23:23,440
that is to say we can address

543
00:23:23,440 --> 00:23:24,640
uh it

544
00:23:24,640 --> 00:23:27,200
address it to whichever pods

545
00:23:27,200 --> 00:23:29,760
just by naming it and the policy inside

546
00:23:29,760 --> 00:23:32,159
the cluster

547
00:23:32,159 --> 00:23:34,480
also cluster-wide policy can be used for

548
00:23:34,480 --> 00:23:36,880
enhanced by default network policy the

549
00:23:36,880 --> 00:23:40,080
native network policy can only

550
00:23:40,080 --> 00:23:42,240
um limit pods

551
00:23:42,240 --> 00:23:44,640
across the network but also can

552
00:23:44,640 --> 00:23:46,640
limit the host that is to say the nodes

553
00:23:46,640 --> 00:23:49,520
where they operate on in calico you just

554
00:23:49,520 --> 00:23:51,279
need another

555
00:23:51,279 --> 00:23:53,200
resource

556
00:23:53,200 --> 00:23:55,200
and make use of it

557
00:23:55,200 --> 00:23:58,159
in the lower left corner you can screen

558
00:23:58,159 --> 00:24:00,159
short of all kinds of ports that can be

559
00:24:00,159 --> 00:24:02,000
used for that

560
00:24:02,000 --> 00:24:03,919
for that purpose and you can put it

561
00:24:03,919 --> 00:24:06,080
directly into your policy and that way

562
00:24:06,080 --> 00:24:08,000
limit your traffic

563
00:24:08,000 --> 00:24:08,799
but

564
00:24:08,799 --> 00:24:10,640
only levels else

565
00:24:10,640 --> 00:24:13,120
three and four are supported there

566
00:24:13,120 --> 00:24:16,400
l7 level seven policies

567
00:24:16,400 --> 00:24:18,640
is there in custom network policy unlike

568
00:24:18,640 --> 00:24:21,360
native la and network policy but calico

569
00:24:21,360 --> 00:24:23,760
is a little bit uh constrained only in

570
00:24:23,760 --> 00:24:26,559
grassroots uh uh supported only the

571
00:24:26,559 --> 00:24:28,559
incoming traffic all policies have to

572
00:24:28,559 --> 00:24:32,559
have allow action we cannot say that we

573
00:24:32,559 --> 00:24:35,039
deny something prohibit something

574
00:24:35,039 --> 00:24:35,840
and

575
00:24:35,840 --> 00:24:39,200
uh this is beta stage at this point

576
00:24:39,200 --> 00:24:41,039
so this is calico

577
00:24:41,039 --> 00:24:44,240
in silico they also have support of l7

578
00:24:44,240 --> 00:24:47,600
policies but importantly if we break a

579
00:24:47,600 --> 00:24:51,678
policy if we try to break a policy

580
00:24:51,919 --> 00:24:53,600
nobody knows

581
00:24:53,600 --> 00:24:58,080
if l seven policy is um

582
00:24:58,240 --> 00:24:59,760
abridged

583
00:24:59,760 --> 00:25:02,720
nothing happens to packages

584
00:25:02,720 --> 00:25:05,120
and in our hospices

585
00:25:05,120 --> 00:25:06,559
importantly

586
00:25:06,559 --> 00:25:08,799
l7 is not supported if node selector is

587
00:25:08,799 --> 00:25:11,279
used if we address a particular node

588
00:25:11,279 --> 00:25:14,240
there

589
00:25:14,240 --> 00:25:15,760
mitri

590
00:25:15,760 --> 00:25:18,880
touched upon network activity as limited

591
00:25:18,880 --> 00:25:22,080
by the by with the help of service mesh

592
00:25:22,080 --> 00:25:23,760
calico and uh

593
00:25:23,760 --> 00:25:25,919
cilium allow for integration with

594
00:25:25,919 --> 00:25:27,279
service smash

595
00:25:27,279 --> 00:25:28,640
and you can use it

596
00:25:28,640 --> 00:25:32,320
if in your service mesh you decided

597
00:25:32,320 --> 00:25:34,240
to have uh

598
00:25:34,240 --> 00:25:36,960
less tls in communication we can use it

599
00:25:36,960 --> 00:25:39,360
for l7 policies so that they understand

600
00:25:39,360 --> 00:25:41,120
what the heck is going on there in

601
00:25:41,120 --> 00:25:43,760
psyllium they have their own embedded

602
00:25:43,760 --> 00:25:46,799
service mesh it's it works there

603
00:25:46,799 --> 00:25:49,360
and it's it's it's there to substitute

604
00:25:49,360 --> 00:25:52,799
for the other service meshes

605
00:25:52,799 --> 00:25:56,080
um alerts when policy works say you

606
00:25:56,080 --> 00:25:57,679
wrote a policy

607
00:25:57,679 --> 00:25:59,440
and an adversary

608
00:25:59,440 --> 00:26:01,840
gets into a container

609
00:26:01,840 --> 00:26:03,760
and we don't get to know

610
00:26:03,760 --> 00:26:06,320
whether he tried to use his

611
00:26:06,320 --> 00:26:08,000
attack vector and by default this

612
00:26:08,000 --> 00:26:09,440
information is not given to us and we

613
00:26:09,440 --> 00:26:11,840
don't get this information

614
00:26:11,840 --> 00:26:15,600
in psyllium however you can learn it

615
00:26:15,600 --> 00:26:17,919
they have psyllium monitor

616
00:26:17,919 --> 00:26:19,039
embedded

617
00:26:19,039 --> 00:26:21,120
you can look at the

618
00:26:21,120 --> 00:26:23,679
dropped packet packets and

619
00:26:23,679 --> 00:26:25,760
debug information

620
00:26:25,760 --> 00:26:28,960
and breached policies

621
00:26:28,960 --> 00:26:31,279
and also they have hubble with ui

622
00:26:31,279 --> 00:26:33,440
interface that allows us to look at

623
00:26:33,440 --> 00:26:36,840
which packs packets were drops or

624
00:26:36,840 --> 00:26:39,200
uh mixed

625
00:26:39,200 --> 00:26:40,080
but

626
00:26:40,080 --> 00:26:42,880
not just the ones that's related to

627
00:26:42,880 --> 00:26:45,919
policy breach but also the ones that is

628
00:26:45,919 --> 00:26:47,200
related to

629
00:26:47,200 --> 00:26:49,840
instability network will create similar

630
00:26:49,840 --> 00:26:52,000
alerts so it would be difficult to

631
00:26:52,000 --> 00:26:54,000
differentiate and to understand why

632
00:26:54,000 --> 00:26:57,360
exactly um you have this alert in calico

633
00:26:57,360 --> 00:26:58,320
though

634
00:26:58,320 --> 00:27:01,360
though you can have lac action as log it

635
00:27:01,360 --> 00:27:03,120
doesn't give you any information about

636
00:27:03,120 --> 00:27:06,460
breach and policy it just writes um

637
00:27:06,460 --> 00:27:07,600
[Music]

638
00:27:07,600 --> 00:27:10,159
information in six clock and that's it

639
00:27:10,159 --> 00:27:11,120
so

640
00:27:11,120 --> 00:27:13,279
this is a comparative table for your

641
00:27:13,279 --> 00:27:15,279
convenience and i'd like to point out

642
00:27:15,279 --> 00:27:18,159
that custom policies do extend

643
00:27:18,159 --> 00:27:20,720
functionality unlike

644
00:27:20,720 --> 00:27:23,120
the native network policies but at the

645
00:27:23,120 --> 00:27:24,480
same time they create additional

646
00:27:24,480 --> 00:27:26,159
constraints so you need to have to be

647
00:27:26,159 --> 00:27:30,640
extra attentive not to make a mistake

648
00:27:30,640 --> 00:27:32,640
next i'm going to talk about tips and

649
00:27:32,640 --> 00:27:34,559
tricks

650
00:27:34,559 --> 00:27:36,559
one using

651
00:27:36,559 --> 00:27:39,678
network policy

652
00:27:42,799 --> 00:27:46,640
by default you can go with

653
00:27:46,640 --> 00:27:49,760
ingress rules and egg grass rules

654
00:27:49,760 --> 00:27:52,240
inbound outbound

655
00:27:52,240 --> 00:27:54,640
if you don't do it explicitly then by

656
00:27:54,640 --> 00:27:57,120
default it would be in grass

657
00:27:57,120 --> 00:27:58,960
same goes to

658
00:27:58,960 --> 00:28:02,960
calico in silly in psyllium if you don't

659
00:28:02,960 --> 00:28:05,279
be if you're not explicit about it the

660
00:28:05,279 --> 00:28:07,440
policy wouldn't just work

661
00:28:07,440 --> 00:28:09,360
one other thing

662
00:28:09,360 --> 00:28:12,000
yes policies are used as whitelist but

663
00:28:12,000 --> 00:28:14,000
it can be written in such ways to deny

664
00:28:14,000 --> 00:28:15,520
something

665
00:28:15,520 --> 00:28:16,880
here you can see

666
00:28:16,880 --> 00:28:19,919
default policies that would

667
00:28:19,919 --> 00:28:21,840
deny

668
00:28:21,840 --> 00:28:24,799
outbound and inbound traffic so the

669
00:28:24,799 --> 00:28:27,600
policy in between is the one that you

670
00:28:27,600 --> 00:28:29,200
should

671
00:28:29,200 --> 00:28:33,440
used to create network policy

672
00:28:35,039 --> 00:28:37,200
by default

673
00:28:37,200 --> 00:28:38,720
if say

674
00:28:38,720 --> 00:28:40,960
you have several policies on top of a

675
00:28:40,960 --> 00:28:43,919
micro service then

676
00:28:45,760 --> 00:28:48,720
allow policy in calico you can manage

677
00:28:48,720 --> 00:28:50,080
priorities

678
00:28:50,080 --> 00:28:52,640
they have order filled

679
00:28:52,640 --> 00:28:54,640
the smaller the

680
00:28:54,640 --> 00:28:56,240
value

681
00:28:56,240 --> 00:28:58,080
the earlier the policy is used

682
00:28:58,080 --> 00:28:59,919
irrespective of whether it's prohibitive

683
00:28:59,919 --> 00:29:02,640
or allowing policy is going to go with

684
00:29:02,640 --> 00:29:04,399
this number

685
00:29:04,399 --> 00:29:07,039
order number

686
00:29:07,120 --> 00:29:08,799
in cover uh

687
00:29:08,799 --> 00:29:12,640
dna dns is important so if you prohibit

688
00:29:12,640 --> 00:29:15,760
everything you also need to allow

689
00:29:15,760 --> 00:29:17,200
for dns

690
00:29:17,200 --> 00:29:20,799
traffic from each boat to cube system

691
00:29:20,799 --> 00:29:22,399
so that it works

692
00:29:22,399 --> 00:29:24,320
still works

693
00:29:24,320 --> 00:29:27,200
you can use cluster weight policies that

694
00:29:27,200 --> 00:29:28,880
would be applicable to all pods and

695
00:29:28,880 --> 00:29:30,880
would allow all parts to go

696
00:29:30,880 --> 00:29:32,559
uh using

697
00:29:32,559 --> 00:29:35,200
port 53 to the cube system

698
00:29:35,200 --> 00:29:37,520
oftentimes what you have you have a

699
00:29:37,520 --> 00:29:39,440
micro service

700
00:29:39,440 --> 00:29:40,559
that

701
00:29:40,559 --> 00:29:42,399
talks to cube ipi

702
00:29:42,399 --> 00:29:44,080
and it

703
00:29:44,080 --> 00:29:47,200
introduces certain difficulties

704
00:29:47,200 --> 00:29:48,960
you may have a

705
00:29:48,960 --> 00:29:50,000
managed

706
00:29:50,000 --> 00:29:52,720
managed kubernetes and

707
00:29:52,720 --> 00:29:55,919
a cube api can be

708
00:29:55,919 --> 00:29:57,520
somewhere else and it's it's rather

709
00:29:57,520 --> 00:29:59,120
difficult to write

710
00:29:59,120 --> 00:30:01,600
a walkable policy

711
00:30:01,600 --> 00:30:04,640
so in a native network policy

712
00:30:04,640 --> 00:30:07,600
you need to know for fact where your

713
00:30:07,600 --> 00:30:10,399
cube api is and you should write address

714
00:30:10,399 --> 00:30:13,600
rules uh according to where it is its

715
00:30:13,600 --> 00:30:16,159
address and port in custom

716
00:30:16,159 --> 00:30:18,559
network policies in calico in particular

717
00:30:18,559 --> 00:30:20,840
we can just name a

718
00:30:20,840 --> 00:30:24,080
service and calico would know that it's

719
00:30:24,080 --> 00:30:26,799
a cube ipi and you can talk to it in

720
00:30:26,799 --> 00:30:29,039
psyllium there is a separate instance

721
00:30:29,039 --> 00:30:32,480
cube api instance and we just name it

722
00:30:32,480 --> 00:30:35,440
explicitly and it works

723
00:30:35,440 --> 00:30:39,039
in our team we have an insider joke how

724
00:30:39,039 --> 00:30:40,159
you know

725
00:30:40,159 --> 00:30:42,640
that network policy is not used in a

726
00:30:42,640 --> 00:30:43,600
company

727
00:30:43,600 --> 00:30:45,440
if you have

728
00:30:45,440 --> 00:30:46,720
name space

729
00:30:46,720 --> 00:30:48,960
on labels then

730
00:30:48,960 --> 00:30:50,399
it means

731
00:30:50,399 --> 00:30:52,480
i mean if you want to

732
00:30:52,480 --> 00:30:53,440
control

733
00:30:53,440 --> 00:30:55,919
uh namespace and namespace interaction

734
00:30:55,919 --> 00:30:58,080
you can parse it with a particular

735
00:30:58,080 --> 00:30:59,919
command and um

736
00:30:59,919 --> 00:31:04,320
label them one at a time with version of

737
00:31:04,320 --> 00:31:08,039
kubernetes 1.21

738
00:31:08,720 --> 00:31:12,720
the label is done automatically

739
00:31:12,720 --> 00:31:15,760
and we can just name the label in

740
00:31:15,760 --> 00:31:17,679
in writing our policy and it would work

741
00:31:17,679 --> 00:31:19,600
for all the pods

742
00:31:19,600 --> 00:31:22,159
in this nation in the in the name space

743
00:31:22,159 --> 00:31:24,080
in a given name space

744
00:31:24,080 --> 00:31:25,600
even if you

745
00:31:25,600 --> 00:31:26,720
did

746
00:31:26,720 --> 00:31:29,200
employ a policy it doesn't automatically

747
00:31:29,200 --> 00:31:30,880
mean

748
00:31:30,880 --> 00:31:34,320
that it works how do you know

749
00:31:34,320 --> 00:31:37,519
well here on in this slide

750
00:31:37,519 --> 00:31:39,919
what you have in blue it's poured in the

751
00:31:39,919 --> 00:31:41,120
center

752
00:31:41,120 --> 00:31:44,399
in magenta

753
00:31:44,399 --> 00:31:47,200
it's a custom policy and then a native

754
00:31:47,200 --> 00:31:48,799
organization that is not connected to

755
00:31:48,799 --> 00:31:51,440
the port it's it's in namespace but it

756
00:31:51,440 --> 00:31:53,039
is not

757
00:31:53,039 --> 00:31:55,200
really implemented

758
00:31:55,200 --> 00:31:58,799
you really have to know your labels

759
00:31:58,799 --> 00:32:00,559
even if you make a

760
00:32:00,559 --> 00:32:03,200
mistake in labels the policy is not

761
00:32:03,200 --> 00:32:05,200
going to be used and it's not going to

762
00:32:05,200 --> 00:32:08,159
create any effect

763
00:32:08,240 --> 00:32:11,039
cni vendors that give us an opportunity

764
00:32:11,039 --> 00:32:13,200
to make use of custom

765
00:32:13,200 --> 00:32:15,600
network policies allow us to mix and

766
00:32:15,600 --> 00:32:18,399
match native and custom policies which

767
00:32:18,399 --> 00:32:21,200
is very good and non-constraining if you

768
00:32:21,200 --> 00:32:22,640
want to

769
00:32:22,640 --> 00:32:24,159
use a

770
00:32:24,159 --> 00:32:26,720
calico in one space and the

771
00:32:26,720 --> 00:32:28,880
psyllium in outer space and you have

772
00:32:28,880 --> 00:32:30,080
native

773
00:32:30,080 --> 00:32:31,600
network policy

774
00:32:31,600 --> 00:32:34,240
you can do it

775
00:32:34,960 --> 00:32:36,960
and you can use it

776
00:32:36,960 --> 00:32:39,919
at one at the same time

777
00:32:39,919 --> 00:32:41,600
additionally

778
00:32:41,600 --> 00:32:44,959
there are some other things

779
00:32:46,640 --> 00:32:49,200
you can use policy enzyme

780
00:32:49,200 --> 00:32:51,919
policy engine

781
00:32:53,120 --> 00:32:54,720
but

782
00:32:54,720 --> 00:32:56,399
then you need to

783
00:32:56,399 --> 00:32:58,960
specify which resources

784
00:32:58,960 --> 00:33:00,640
network policy is applicable to and

785
00:33:00,640 --> 00:33:02,720
which not

786
00:33:02,720 --> 00:33:05,519
but it's a whole different topic

787
00:33:05,519 --> 00:33:06,640
specifically

788
00:33:06,640 --> 00:33:11,320
you can use policy engine so

789
00:33:11,440 --> 00:33:14,880
in kubernetes all the pods by default

790
00:33:14,880 --> 00:33:18,640
work in their own isolated network

791
00:33:18,640 --> 00:33:19,679
but

792
00:33:19,679 --> 00:33:22,480
we can do it

793
00:33:22,880 --> 00:33:25,200
in such a way that they work

794
00:33:25,200 --> 00:33:27,039
and interact with all of the host

795
00:33:27,039 --> 00:33:28,960
interfaces

796
00:33:28,960 --> 00:33:30,159
so

797
00:33:30,159 --> 00:33:31,840
in

798
00:33:31,840 --> 00:33:33,840
the manifest you should put host network

799
00:33:33,840 --> 00:33:34,880
through

800
00:33:34,880 --> 00:33:36,480
value and

801
00:33:36,480 --> 00:33:38,799
thus it will work in your host network

802
00:33:38,799 --> 00:33:40,960
and it would bypass the network policy

803
00:33:40,960 --> 00:33:43,840
network policies won't impact it because

804
00:33:43,840 --> 00:33:45,600
they

805
00:33:45,600 --> 00:33:46,480
um

806
00:33:46,480 --> 00:33:48,960
because because of the way it works

807
00:33:48,960 --> 00:33:50,880
another interesting

808
00:33:50,880 --> 00:33:53,039
saying

809
00:33:53,039 --> 00:33:54,559
but let me

810
00:33:54,559 --> 00:33:56,559
provide you with a caveat that it only

811
00:33:56,559 --> 00:33:58,480
works for overlay

812
00:33:58,480 --> 00:34:00,480
networks and if

813
00:34:00,480 --> 00:34:03,600
the necessary capability is there in

814
00:34:03,600 --> 00:34:06,600
um

815
00:34:06,720 --> 00:34:08,719
in psyllium in

816
00:34:08,719 --> 00:34:11,679
the documents for version point eight

817
00:34:11,679 --> 00:34:13,359
it was said that if

818
00:34:13,359 --> 00:34:14,159
the

819
00:34:14,159 --> 00:34:16,719
port-to-pod traffic is controlled with

820
00:34:16,719 --> 00:34:18,239
psyllium

821
00:34:18,239 --> 00:34:20,719
then when a package packages are sent

822
00:34:20,719 --> 00:34:22,560
over

823
00:34:22,560 --> 00:34:24,320
the labels may hold sensitive

824
00:34:24,320 --> 00:34:26,480
information like serum identities

825
00:34:26,480 --> 00:34:29,119
when knowing silly my identities we can

826
00:34:29,119 --> 00:34:30,239
actually

827
00:34:30,239 --> 00:34:34,439
manage part support communication

828
00:34:35,119 --> 00:34:40,000
uh coordinates uh isis the all that

829
00:34:40,000 --> 00:34:43,040
so if you have

830
00:34:43,040 --> 00:34:46,399
have this we can substitute these values

831
00:34:46,399 --> 00:34:47,280
i mean

832
00:34:47,280 --> 00:34:48,800
it doesn't happen

833
00:34:48,800 --> 00:34:50,239
at all times but it could happen

834
00:34:50,239 --> 00:34:52,239
potentially

835
00:34:52,239 --> 00:34:54,320
and psyllium gives us

836
00:34:54,320 --> 00:34:58,560
a prompt how to mitigate it you either

837
00:34:58,560 --> 00:35:00,800
cipher the whole traffic or use

838
00:35:00,800 --> 00:35:02,640
protected networks that's what they say

839
00:35:02,640 --> 00:35:04,079
about it

840
00:35:04,079 --> 00:35:06,240
that would be it thank you

841
00:35:06,240 --> 00:35:08,640
thank you sergey

842
00:35:08,640 --> 00:35:11,759
and we're almost there

843
00:35:14,880 --> 00:35:17,119
so what are our conclusions

844
00:35:17,119 --> 00:35:20,640
initially i forgot to point out

845
00:35:20,640 --> 00:35:23,119
where this presentation comes off

846
00:35:23,119 --> 00:35:24,960
it comes from

847
00:35:24,960 --> 00:35:27,119
often times people approach us and say

848
00:35:27,119 --> 00:35:29,760
could you give us a firewall that

849
00:35:29,760 --> 00:35:32,000
understands kubernetes there are no

850
00:35:32,000 --> 00:35:34,079
hardware and firewalls specific for

851
00:35:34,079 --> 00:35:35,830
kubernetes

852
00:35:35,830 --> 00:35:38,909
[Music]

853
00:35:39,520 --> 00:35:43,000
there are cni's

854
00:35:44,079 --> 00:35:45,520
and you have to go through network

855
00:35:45,520 --> 00:35:47,440
policies rather than

856
00:35:47,440 --> 00:35:50,079
through hardware in your stack

857
00:35:50,079 --> 00:35:52,720
none and no hardware

858
00:35:52,720 --> 00:35:55,119
i can work

859
00:35:55,119 --> 00:35:57,440
in this way

860
00:35:57,440 --> 00:36:01,119
a native and custom network policies

861
00:36:01,119 --> 00:36:03,599
are indeed very different as you already

862
00:36:03,599 --> 00:36:04,720
understand

863
00:36:04,720 --> 00:36:08,160
but in industry people still make use of

864
00:36:08,160 --> 00:36:10,400
native ones because they are supported

865
00:36:10,400 --> 00:36:12,800
by all cni's all

866
00:36:12,800 --> 00:36:15,119
cloud cloud service pronoun

867
00:36:15,119 --> 00:36:17,599
providers

868
00:36:23,119 --> 00:36:24,960
in in certain cases

869
00:36:24,960 --> 00:36:25,920
you know

870
00:36:25,920 --> 00:36:28,720
native policies are understood but not

871
00:36:28,720 --> 00:36:30,240
the custom ones

872
00:36:30,240 --> 00:36:31,440
in certain

873
00:36:31,440 --> 00:36:33,520
instances

874
00:36:33,520 --> 00:36:35,280
and you can go from

875
00:36:35,280 --> 00:36:38,880
vanilla kubernetes to kuberchef

876
00:36:38,880 --> 00:36:40,880
when you use custom

877
00:36:40,880 --> 00:36:43,359
network policies yes you

878
00:36:43,359 --> 00:36:46,160
get extension but you are kind of locked

879
00:36:46,160 --> 00:36:47,359
in

880
00:36:47,359 --> 00:36:50,640
locked into a particular c9

881
00:36:50,640 --> 00:36:52,960
at that

882
00:36:52,960 --> 00:36:56,160
since its policy as code

883
00:36:56,160 --> 00:36:58,480
it's very transparent to all kinds of

884
00:36:58,480 --> 00:37:00,000
departments we are

885
00:37:00,000 --> 00:37:02,720
all living in the era of deaf seacops so

886
00:37:02,720 --> 00:37:05,839
developers security and operations guys

887
00:37:05,839 --> 00:37:08,480
need to have a general big picture and

888
00:37:08,480 --> 00:37:09,280
not

889
00:37:09,280 --> 00:37:12,560
go into each other's way

890
00:37:12,720 --> 00:37:16,399
let me give you a specific case

891
00:37:16,880 --> 00:37:18,800
an injected library

892
00:37:18,800 --> 00:37:20,400
and this is a case from one of our

893
00:37:20,400 --> 00:37:22,320
clients

894
00:37:22,320 --> 00:37:24,320
in depth everything works in tests

895
00:37:24,320 --> 00:37:26,320
everything works

896
00:37:26,320 --> 00:37:28,400
and then it wouldn't work and

897
00:37:28,400 --> 00:37:30,240
they debug and they do back and it

898
00:37:30,240 --> 00:37:31,440
doesn't work

899
00:37:31,440 --> 00:37:33,920
and then they ask the devops team and

900
00:37:33,920 --> 00:37:36,400
error city nobody nobody understands

901
00:37:36,400 --> 00:37:38,079
everything is

902
00:37:38,079 --> 00:37:39,280
same

903
00:37:39,280 --> 00:37:42,400
turns out that the security guys

904
00:37:42,400 --> 00:37:44,720
ticked

905
00:37:45,200 --> 00:37:47,119
denial of

906
00:37:47,119 --> 00:37:48,320
sending

907
00:37:48,320 --> 00:37:51,760
network uh packets

908
00:37:51,760 --> 00:37:53,440
that's it

909
00:37:53,440 --> 00:37:55,040
if you do it right

910
00:37:55,040 --> 00:37:58,320
by way of declaration

911
00:38:02,000 --> 00:38:02,960
it wouldn't

912
00:38:02,960 --> 00:38:06,079
you would just uh give the two files and

913
00:38:06,079 --> 00:38:08,800
you would ask the security guys to

914
00:38:08,800 --> 00:38:11,760
change the network policy they changed

915
00:38:11,760 --> 00:38:14,480
the yaml file and that's it and you

916
00:38:14,480 --> 00:38:16,400
don't have to lose your resources and

917
00:38:16,400 --> 00:38:18,160
your time everything is declarative and

918
00:38:18,160 --> 00:38:19,680
clear

919
00:38:19,680 --> 00:38:20,880
and

920
00:38:20,880 --> 00:38:24,240
this is where we're going to

921
00:38:24,800 --> 00:38:26,960
infrastructure is code documentation is

922
00:38:26,960 --> 00:38:30,240
code and all that right

923
00:38:30,830 --> 00:38:33,909
[Music]

924
00:38:34,000 --> 00:38:36,560
everybody is going in this direction so

925
00:38:36,560 --> 00:38:37,760
that you can

926
00:38:37,760 --> 00:38:39,920
maximize transparency for all the

927
00:38:39,920 --> 00:38:41,200
departments

928
00:38:41,200 --> 00:38:44,839
that are in charge of um

929
00:38:44,839 --> 00:38:46,560
security

930
00:38:46,560 --> 00:38:48,720
and the reliability

931
00:38:48,720 --> 00:38:50,720
and kubernetes since it's all built on

932
00:38:50,720 --> 00:38:53,680
yaml it's it's convenient this way and

933
00:38:53,680 --> 00:38:55,440
you can always go into your gate and

934
00:38:55,440 --> 00:38:57,760
understand the dependencies and who's

935
00:38:57,760 --> 00:39:01,720
isolated and not isolated

936
00:39:03,599 --> 00:39:05,119
these are our

937
00:39:05,119 --> 00:39:08,000
references and useful links

938
00:39:08,000 --> 00:39:10,800
here you can find anything you need to

939
00:39:10,800 --> 00:39:11,680
know

940
00:39:11,680 --> 00:39:14,400
if you are just a beginner how to

941
00:39:14,400 --> 00:39:16,560
approach it how they evolutionize how

942
00:39:16,560 --> 00:39:17,760
they change

943
00:39:17,760 --> 00:39:20,079
there are additional

944
00:39:20,079 --> 00:39:21,760
viewers and all that

945
00:39:21,760 --> 00:39:24,320
i think this would be enough for you

946
00:39:24,320 --> 00:39:26,880
at least initially

947
00:39:26,880 --> 00:39:29,119
to use it in your companies

948
00:39:29,119 --> 00:39:30,640
that would be all thank you very much

949
00:39:30,640 --> 00:39:32,880
for your kind attention hopefully this

950
00:39:32,880 --> 00:39:35,280
was useful and we'll be happy to take

951
00:39:35,280 --> 00:39:37,839
your questions

952
00:39:38,520 --> 00:39:43,259
[Applause]

953
00:39:48,320 --> 00:39:49,200
thank you very much for your

954
00:39:49,200 --> 00:39:51,200
presentation my question is could you

955
00:39:51,200 --> 00:39:53,599
please share with us your personal

956
00:39:53,599 --> 00:39:56,000
uh expertise

957
00:39:56,000 --> 00:39:59,760
how expensive it is to

958
00:39:59,839 --> 00:40:02,640
use calico

959
00:40:02,640 --> 00:40:04,079
plugins

960
00:40:04,079 --> 00:40:06,960
in case you have very detailed network

961
00:40:06,960 --> 00:40:09,440
interaction between the pods

962
00:40:09,440 --> 00:40:11,200
what are the specs what are the

963
00:40:11,200 --> 00:40:13,440
resources you would need

964
00:40:13,440 --> 00:40:16,560
in in case you have this kind of load

965
00:40:16,560 --> 00:40:20,000
and a follow-up question would be

966
00:40:20,000 --> 00:40:23,599
you mentioned the opportunity of

967
00:40:23,599 --> 00:40:26,720
switching the pond

968
00:40:26,720 --> 00:40:30,000
to underlying uh host network so that

969
00:40:30,000 --> 00:40:33,440
pod uses host interface as if it were a

970
00:40:33,440 --> 00:40:34,960
kubernetes

971
00:40:34,960 --> 00:40:36,160
network

972
00:40:36,160 --> 00:40:37,680
have you had in your practice and this

973
00:40:37,680 --> 00:40:41,440
is a good idea to make use of underlying

974
00:40:41,440 --> 00:40:43,280
network

975
00:40:43,280 --> 00:40:46,720
and underlay solution

976
00:40:46,720 --> 00:40:47,599
like

977
00:40:47,599 --> 00:40:50,839
new generation firewalls network

978
00:40:50,839 --> 00:40:52,480
policies

979
00:40:52,480 --> 00:40:55,599
to manage uh traffic inside the cluster

980
00:40:55,599 --> 00:40:58,240
so that you don't have to describe it

981
00:40:58,240 --> 00:41:00,960
explicitly to with calico and other

982
00:41:00,960 --> 00:41:02,640
plugins

983
00:41:02,640 --> 00:41:06,920
and sorry i have a third question

984
00:41:07,280 --> 00:41:10,640
what are the ways you have in mind to

985
00:41:10,640 --> 00:41:13,040
follow

986
00:41:13,119 --> 00:41:16,160
traffic inside your cluster like netflow

987
00:41:16,160 --> 00:41:18,720
everything like telemetry all kinds of

988
00:41:18,720 --> 00:41:21,040
flows how how how how do you think you

989
00:41:21,040 --> 00:41:23,680
could do it thank you

990
00:41:23,680 --> 00:41:25,520
thank you for these questions

991
00:41:25,520 --> 00:41:28,160
uh let me start from the top uh hardware

992
00:41:28,160 --> 00:41:30,560
specification

993
00:41:30,560 --> 00:41:33,680
usually it goes together with kubernetes

994
00:41:33,680 --> 00:41:36,240
it's not done separately nobody

995
00:41:36,240 --> 00:41:38,880
allocates resources

996
00:41:38,880 --> 00:41:41,280
separately for calico it's a network and

997
00:41:41,280 --> 00:41:43,760
since it's a network

998
00:41:43,760 --> 00:41:46,000
and it

999
00:41:46,000 --> 00:41:47,119
um

1000
00:41:47,119 --> 00:41:49,920
works with all packages

1001
00:41:49,920 --> 00:41:53,680
this is the most flexible variant

1002
00:41:54,079 --> 00:41:57,040
so you would have overhead if you

1003
00:41:57,040 --> 00:41:58,960
go through a different network

1004
00:41:58,960 --> 00:42:00,160
right

1005
00:42:00,160 --> 00:42:04,079
is forest only networks are concerned

1006
00:42:04,079 --> 00:42:06,240
usually host network true

1007
00:42:06,240 --> 00:42:09,680
is not used for business micro services

1008
00:42:09,680 --> 00:42:12,079
if you have like a store the business

1009
00:42:12,079 --> 00:42:14,839
micro services like billing

1010
00:42:14,839 --> 00:42:18,160
payments shop window if

1011
00:42:18,160 --> 00:42:20,319
host network is used

1012
00:42:20,319 --> 00:42:23,839
only for agents monitorings

1013
00:42:23,839 --> 00:42:26,319
in infrastructure things that is but

1014
00:42:26,319 --> 00:42:28,319
really

1015
00:42:28,319 --> 00:42:30,960
the idea

1016
00:42:30,960 --> 00:42:33,440
of having next generation firewall is

1017
00:42:33,440 --> 00:42:36,400
not good i think

1018
00:42:36,560 --> 00:42:38,000
we'll have uh

1019
00:42:38,000 --> 00:42:39,520
abstractions on the left and on the

1020
00:42:39,520 --> 00:42:41,200
right it would give you

1021
00:42:41,200 --> 00:42:43,440
quite substantial overhead and when you

1022
00:42:43,440 --> 00:42:46,880
come to companies

1023
00:42:49,119 --> 00:42:51,680
and they say we have 10

1024
00:42:51,680 --> 00:42:53,920
gigabytes of traffic

1025
00:42:53,920 --> 00:42:57,640
how do you go about it

1026
00:43:00,960 --> 00:43:03,440
you have enough of traffic

1027
00:43:03,440 --> 00:43:05,440
and if you the traffic goes somewhere

1028
00:43:05,440 --> 00:43:07,440
else it it creates huge overhead and

1029
00:43:07,440 --> 00:43:09,359
they they hate it

1030
00:43:09,359 --> 00:43:11,040
so like i

1031
00:43:11,040 --> 00:43:12,960
mentioned in my presentation we're all

1032
00:43:12,960 --> 00:43:15,760
for declarative approach you want to

1033
00:43:15,760 --> 00:43:17,760
have everything clear what goes on and

1034
00:43:17,760 --> 00:43:21,920
as far as visualization what goes on

1035
00:43:21,920 --> 00:43:24,640
well usually those are commercial

1036
00:43:24,640 --> 00:43:27,040
solutions

1037
00:43:27,040 --> 00:43:29,359
like i said the ip wouldn't give you

1038
00:43:29,359 --> 00:43:31,759
anything

1039
00:43:35,760 --> 00:43:37,520
because you'll have one api talking to

1040
00:43:37,520 --> 00:43:39,280
every everything

1041
00:43:39,280 --> 00:43:41,520
and that one

1042
00:43:41,520 --> 00:43:44,880
so now we want to understand the context

1043
00:43:44,880 --> 00:43:46,880
irrespective of whether it's a pod or a

1044
00:43:46,880 --> 00:43:48,640
container

1045
00:43:48,640 --> 00:43:52,440
irrespective of namespace

1046
00:43:54,800 --> 00:43:57,119
part of interface in in salem there is

1047
00:43:57,119 --> 00:43:59,359
this hubble tool but it also has its own

1048
00:43:59,359 --> 00:44:00,640
constraints

1049
00:44:00,640 --> 00:44:02,560
in in calico they don't have a free of

1050
00:44:02,560 --> 00:44:05,040
charge tool everything else that you

1051
00:44:05,040 --> 00:44:09,839
have is commercial in lantry we use ebpf

1052
00:44:09,839 --> 00:44:11,440
we

1053
00:44:11,440 --> 00:44:12,640
look at

1054
00:44:12,640 --> 00:44:15,599
who goes where and draw

1055
00:44:15,599 --> 00:44:18,319
arrows server smash some some people

1056
00:44:18,319 --> 00:44:20,720
work with server smash

1057
00:44:20,720 --> 00:44:23,760
in link rd they have it

1058
00:44:23,760 --> 00:44:25,040
and they

1059
00:44:25,040 --> 00:44:26,640
draw

1060
00:44:26,640 --> 00:44:30,000
um these flows

1061
00:44:32,160 --> 00:44:34,640
so they add a proxy on top of each

1062
00:44:34,640 --> 00:44:37,359
microservice service mesh

1063
00:44:37,359 --> 00:44:39,920
um say that it's uh

1064
00:44:39,920 --> 00:44:42,880
plus 500 megabytes per container not

1065
00:44:42,880 --> 00:44:45,520
everybody is ready to use that but it

1066
00:44:45,520 --> 00:44:47,119
really depends on your infrastructure

1067
00:44:47,119 --> 00:44:50,119
obviously

1068
00:44:53,520 --> 00:44:55,520
so you mentioned containers and you

1069
00:44:55,520 --> 00:44:58,640
mentioned namespace

1070
00:44:59,839 --> 00:45:02,400
i'm interested to know whether you have

1071
00:45:02,400 --> 00:45:04,079
additional

1072
00:45:04,079 --> 00:45:07,280
requirements to linux kernel

1073
00:45:07,280 --> 00:45:10,720
if it works in a container

1074
00:45:11,200 --> 00:45:13,200
would you use would you have to have

1075
00:45:13,200 --> 00:45:15,359
usernamespace

1076
00:45:15,359 --> 00:45:16,160
to

1077
00:45:16,160 --> 00:45:18,720
have tuned tab

1078
00:45:18,720 --> 00:45:22,319
or syscontrols

1079
00:45:23,359 --> 00:45:25,440
since username space

1080
00:45:25,440 --> 00:45:26,160
in

1081
00:45:26,160 --> 00:45:28,319
in

1082
00:45:29,599 --> 00:45:30,640
increased

1083
00:45:30,640 --> 00:45:33,119
attack surface um

1084
00:45:33,119 --> 00:45:35,359
probably you should avoid it

1085
00:45:35,359 --> 00:45:37,839
linux kernel have their own kernel uh

1086
00:45:37,839 --> 00:45:40,640
name space and uh uh namespace

1087
00:45:40,640 --> 00:45:42,880
so you you might you mean to say that

1088
00:45:42,880 --> 00:45:46,079
there are kernel name spaces and linux

1089
00:45:46,079 --> 00:45:48,480
this is done by c nice

1090
00:45:48,480 --> 00:45:49,839
the container

1091
00:45:49,839 --> 00:45:51,359
doesn't know about it

1092
00:45:51,359 --> 00:45:52,880
it doesn't have to have additional

1093
00:45:52,880 --> 00:45:55,280
privileges in bags

1094
00:45:55,280 --> 00:45:58,079
they take all privileges uh there is

1095
00:45:58,079 --> 00:46:00,400
this drop capabilities thing

1096
00:46:00,400 --> 00:46:04,000
and they take take it away

1097
00:46:05,040 --> 00:46:09,040
and this is done for isolation purposes

1098
00:46:09,200 --> 00:46:14,000
for network policy it's it's not needed

1099
00:46:14,000 --> 00:46:16,079
if there is a network plug-in on ap

1100
00:46:16,079 --> 00:46:18,319
tables then every time you use a network

1101
00:46:18,319 --> 00:46:21,040
policy your tables

1102
00:46:21,040 --> 00:46:24,279
once again

1103
00:46:36,800 --> 00:46:38,160
and it drops

1104
00:46:38,160 --> 00:46:41,160
packages

1105
00:46:42,240 --> 00:46:44,480
and inside the container

1106
00:46:44,480 --> 00:46:47,440
do you need to introduce roots or it can

1107
00:46:47,440 --> 00:46:49,680
go

1108
00:46:52,319 --> 00:46:54,720
no not necessarily if you're about if

1109
00:46:54,720 --> 00:46:56,720
it's about cni

1110
00:46:56,720 --> 00:47:00,959
in the latest kubernetes

1111
00:47:01,359 --> 00:47:03,440
versions

1112
00:47:03,440 --> 00:47:07,720
are they they are rootless

1113
00:47:08,860 --> 00:47:11,959
[Music]

1114
00:47:18,240 --> 00:47:21,119
if it escapes the container yes it goes

1115
00:47:21,119 --> 00:47:24,680
to the root yeah

1116
00:47:40,890 --> 00:47:44,009
[Music]

1117
00:47:46,880 --> 00:47:50,839
i heard of a variant for hatred uh

1118
00:47:50,839 --> 00:47:52,720
heterogeneous

1119
00:47:52,720 --> 00:47:55,119
environments where you have

1120
00:47:55,119 --> 00:47:58,000
kubernetes and

1121
00:47:58,000 --> 00:48:00,400
a lot of other things so you do it

1122
00:48:00,400 --> 00:48:02,640
through bgp

1123
00:48:02,640 --> 00:48:04,640
and some networks with containers go

1124
00:48:04,640 --> 00:48:07,640
outside

1125
00:48:12,319 --> 00:48:14,160
we haven't encountered anything like

1126
00:48:14,160 --> 00:48:17,160
that

1127
00:48:22,319 --> 00:48:26,400
you can put it as network another system

1128
00:48:28,000 --> 00:48:30,079
and you can then

1129
00:48:30,079 --> 00:48:33,359
go from non-cube to cube and

1130
00:48:33,359 --> 00:48:36,640
explain the interaction

1131
00:48:36,720 --> 00:48:38,480
we haven't encountered

1132
00:48:38,480 --> 00:48:42,079
anything like that

1133
00:48:43,839 --> 00:48:47,040
but i think you should go to alibaba and

1134
00:48:47,040 --> 00:48:49,440
other providers to have anything of this

1135
00:48:49,440 --> 00:48:50,720
kind

1136
00:48:50,720 --> 00:48:53,040
thank you

1137
00:48:57,920 --> 00:49:00,160
thank you for this presentation look

1138
00:49:00,160 --> 00:49:01,359
calico

1139
00:49:01,359 --> 00:49:02,480
gives

1140
00:49:02,480 --> 00:49:05,040
logs that are not very informative do

1141
00:49:05,040 --> 00:49:07,359
you think we can send it somewhere else

1142
00:49:07,359 --> 00:49:10,400
so that logs are taken and analyzed for

1143
00:49:10,400 --> 00:49:12,160
additional information

1144
00:49:12,160 --> 00:49:14,720
that cannot be seen with a naked eye by

1145
00:49:14,720 --> 00:49:17,839
default no

1146
00:49:18,079 --> 00:49:22,200
calico has calico enterprise

1147
00:49:39,200 --> 00:49:42,680
time is out

1148
00:49:50,319 --> 00:49:54,000
hi i do have a question

1149
00:49:57,680 --> 00:50:00,880
how about is it tcp you can use tcp and

1150
00:50:00,880 --> 00:50:01,920
a to b

1151
00:50:01,920 --> 00:50:03,040
yes

1152
00:50:03,040 --> 00:50:06,000
the answer would be but not no

1153
00:50:06,000 --> 00:50:10,280
it's a range right yes

1154
00:50:18,400 --> 00:50:19,200
that

1155
00:50:19,200 --> 00:50:21,359
if you have

1156
00:50:21,359 --> 00:50:25,240
this mode on

1157
00:50:29,119 --> 00:50:32,000
yes that then you can use

1158
00:50:32,000 --> 00:50:34,880
ngfw right

1159
00:50:34,880 --> 00:50:36,720
two two containers

1160
00:50:36,720 --> 00:50:38,400
yes but it goes not through virtual

1161
00:50:38,400 --> 00:50:41,839
interface to host interface

1162
00:50:45,920 --> 00:50:49,570
[Music]

1163
00:50:59,040 --> 00:51:02,359
do you practice

1164
00:51:04,430 --> 00:51:12,259
[Music]

1165
00:51:14,079 --> 00:51:17,200
sometimes it simplifies uh

1166
00:51:17,200 --> 00:51:20,319
attacks and then the container escapes

1167
00:51:20,319 --> 00:51:22,720
so we recommend to use less of what

1168
00:51:22,720 --> 00:51:25,919
you're asking about thank you

1169
00:51:26,240 --> 00:51:28,800
sorry uh time is up and it's time to

1170
00:51:28,800 --> 00:51:30,400
pick your favorite question what would

1171
00:51:30,400 --> 00:51:34,040
be your favorite question

1172
00:51:39,599 --> 00:51:41,839
okay great thank you thank you very much

1173
00:51:41,839 --> 00:51:44,410
thank you for presentation

1174
00:51:44,410 --> 00:51:49,600
[Applause]

1175
00:51:56,240 --> 00:51:58,319
you

