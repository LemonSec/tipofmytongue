1
00:00:02,399 --> 00:00:04,799
one two three hi everyone thanks for

2
00:00:04,799 --> 00:00:08,080
coming and i'd like to discuss

3
00:00:08,080 --> 00:00:10,880
api keys storage

4
00:00:10,880 --> 00:00:13,360
issues and what happens if they are

5
00:00:13,360 --> 00:00:15,280
compromised

6
00:00:15,280 --> 00:00:16,960
my name is ilsaf

7
00:00:16,960 --> 00:00:20,800
and i'm a band tester for innerstage

8
00:00:20,800 --> 00:00:24,880
and i have a hello soc telegram channel

9
00:00:24,880 --> 00:00:27,760
let me start with what api is

10
00:00:27,760 --> 00:00:31,039
it is a set of methods and functions

11
00:00:31,039 --> 00:00:32,800
procedures that

12
00:00:32,800 --> 00:00:34,559
an application provides to other

13
00:00:34,559 --> 00:00:35,760
applications

14
00:00:35,760 --> 00:00:38,480
or to the user

15
00:00:38,719 --> 00:00:41,440
you can see

16
00:00:42,960 --> 00:00:46,160
a request to the time endpoint it's a

17
00:00:46,160 --> 00:00:48,480
useless method for a hacker

18
00:00:48,480 --> 00:00:51,920
but let's imagine you are using the

19
00:00:51,920 --> 00:00:55,520
crypto stocks exchange api that allows

20
00:00:55,520 --> 00:00:57,440
you to buy sell

21
00:00:57,440 --> 00:00:59,840
your bitcoins

22
00:00:59,840 --> 00:01:03,120
so to identify your and authentify your

23
00:01:03,120 --> 00:01:06,799
api requests there are api keys right

24
00:01:06,799 --> 00:01:09,439
they allow you to only

25
00:01:09,439 --> 00:01:13,520
run some actions if it's you

26
00:01:13,520 --> 00:01:15,759
they are usually random generated

27
00:01:15,759 --> 00:01:17,680
but not always

28
00:01:17,680 --> 00:01:21,119
api keys generation is a separate

29
00:01:21,119 --> 00:01:23,520
topic

30
00:01:25,280 --> 00:01:27,040
you should treat them

31
00:01:27,040 --> 00:01:30,240
as carefully and store them as

32
00:01:30,240 --> 00:01:33,839
safely in a safe

33
00:01:34,000 --> 00:01:36,560
storages and of course you should not

34
00:01:36,560 --> 00:01:39,439
share them with anyone

35
00:01:39,439 --> 00:01:42,000
some rules is not to store them when

36
00:01:42,000 --> 00:01:45,119
they open uh

37
00:01:45,119 --> 00:01:47,920
the open forum not to put them in the

38
00:01:47,920 --> 00:01:50,560
source code and of course not publicize

39
00:01:50,560 --> 00:01:51,759
them

40
00:01:51,759 --> 00:01:54,560
some of you would think that you know

41
00:01:54,560 --> 00:01:58,079
i'm i have closed code i can put api

42
00:01:58,079 --> 00:02:00,320
keys anywhere in my

43
00:02:00,320 --> 00:02:01,520
code and

44
00:02:01,520 --> 00:02:03,920
it will not be accessible

45
00:02:03,920 --> 00:02:05,520
this is safe

46
00:02:05,520 --> 00:02:09,119
and the keys access is only

47
00:02:09,119 --> 00:02:12,399
with my developers

48
00:02:12,400 --> 00:02:16,560
but let's discuss the twitch hack

49
00:02:17,120 --> 00:02:19,920
when they took the source code payment

50
00:02:19,920 --> 00:02:23,360
information and api keys

51
00:02:23,360 --> 00:02:26,480
some researchers found that

52
00:02:26,480 --> 00:02:30,080
more than 6 000 keys were stored in an

53
00:02:30,080 --> 00:02:31,280
open

54
00:02:31,280 --> 00:02:34,959
form in the source code

55
00:02:35,440 --> 00:02:38,560
thousands of them were to aws and of

56
00:02:38,560 --> 00:02:40,080
course if you

57
00:02:40,080 --> 00:02:42,400
ask aws

58
00:02:42,400 --> 00:02:44,560
for documentation you find

59
00:02:44,560 --> 00:02:47,280
uh hundreds of methods that allow you to

60
00:02:47,280 --> 00:02:50,400
delete something and aws is not free so

61
00:02:50,400 --> 00:02:52,640
you can find stuff like this

62
00:02:52,640 --> 00:02:54,800
on the left

63
00:02:54,800 --> 00:02:57,120
you see an attempt to

64
00:02:57,120 --> 00:03:00,239
deduct twenty four thousand dollars

65
00:03:00,239 --> 00:03:03,040
for aws services

66
00:03:03,040 --> 00:03:05,920
on the right you see a

67
00:03:05,920 --> 00:03:08,159
screenshot from a research

68
00:03:08,159 --> 00:03:10,640
checking

69
00:03:10,720 --> 00:03:14,080
about what the researchers will do

70
00:03:14,080 --> 00:03:16,239
after your key is compromised

71
00:03:16,239 --> 00:03:19,519
and they found that

72
00:03:19,519 --> 00:03:21,280
in a minute

73
00:03:21,280 --> 00:03:22,319
after

74
00:03:22,319 --> 00:03:23,920
your key is

75
00:03:23,920 --> 00:03:27,360
lost the most expensive instances were

76
00:03:27,360 --> 00:03:28,799
launched to

77
00:03:28,799 --> 00:03:30,840
drain your

78
00:03:30,840 --> 00:03:32,799
wallet

79
00:03:32,799 --> 00:03:36,159
how sure are you that your devops

80
00:03:36,159 --> 00:03:39,599
or your system administrator will not

81
00:03:39,599 --> 00:03:41,680
leave the git

82
00:03:41,680 --> 00:03:46,239
folder open that will enable you to

83
00:03:46,239 --> 00:03:48,400
to find the source code of the previous

84
00:03:48,400 --> 00:03:50,239
commit

85
00:03:50,239 --> 00:03:51,519
and of course it

86
00:03:51,519 --> 00:03:54,640
might have your keys if you use google

87
00:03:54,640 --> 00:03:56,640
docs

88
00:03:56,640 --> 00:03:58,239
you can find

89
00:03:58,239 --> 00:04:01,680
at least 30 000 results

90
00:04:01,680 --> 00:04:05,040
for the size with the git folder open

91
00:04:05,040 --> 00:04:07,439
and of course they are not only just

92
00:04:07,439 --> 00:04:10,239
beginners sides but quite a bit quite

93
00:04:10,239 --> 00:04:11,519
big ones

94
00:04:11,519 --> 00:04:14,560
for big companies foreign companies

95
00:04:14,560 --> 00:04:17,040
i'm not like you know asking you to do

96
00:04:17,040 --> 00:04:19,199
anything just just the fact

97
00:04:19,199 --> 00:04:22,800
so what about open keys on the github

98
00:04:22,800 --> 00:04:24,160
and

99
00:04:24,160 --> 00:04:26,800
let's do it like this api key 5 million

100
00:04:26,800 --> 00:04:28,560
results of course not all of them are

101
00:04:28,560 --> 00:04:31,520
keys there are methods variables

102
00:04:31,520 --> 00:04:32,880
comments

103
00:04:32,880 --> 00:04:34,880
but among the first results you would

104
00:04:34,880 --> 00:04:35,919
see

105
00:04:35,919 --> 00:04:38,320
valid keys

106
00:04:38,320 --> 00:04:41,040
and the first thought is that the hacker

107
00:04:41,040 --> 00:04:44,400
has when he sees it it's like okay let's

108
00:04:44,400 --> 00:04:46,479
you know gather those keys and try to

109
00:04:46,479 --> 00:04:48,880
use them

110
00:04:49,520 --> 00:04:50,720
so

111
00:04:50,720 --> 00:04:53,040
within an hour

112
00:04:53,040 --> 00:04:54,639
i was able

113
00:04:54,639 --> 00:04:57,600
to find more than 500 of those keys of

114
00:04:57,600 --> 00:05:00,000
course i decided not to test their

115
00:05:00,000 --> 00:05:02,639
validity

116
00:05:03,280 --> 00:05:06,919
a minute of humor

117
00:05:11,120 --> 00:05:12,960
and i decided to check

118
00:05:12,960 --> 00:05:16,080
how fast will my keys be compromised if

119
00:05:16,080 --> 00:05:18,080
i put them on github

120
00:05:18,080 --> 00:05:20,960
i used two keys

121
00:05:22,240 --> 00:05:25,280
that i generated using cannery token and

122
00:05:25,280 --> 00:05:28,000
one was left in the commit story history

123
00:05:28,000 --> 00:05:31,199
and removed it

124
00:05:31,680 --> 00:05:34,639
and one was left in config

125
00:05:34,639 --> 00:05:37,520
within two days

126
00:05:37,520 --> 00:05:38,639
i

127
00:05:38,639 --> 00:05:41,120
found more than 50 attempts to try to

128
00:05:41,120 --> 00:05:43,840
use my key

129
00:05:43,840 --> 00:05:46,960
the first one was quite fast and coming

130
00:05:46,960 --> 00:05:48,720
the question to you is

131
00:05:48,720 --> 00:05:51,199
how much time

132
00:05:51,199 --> 00:05:54,400
did it pass after i got my first key

133
00:05:54,400 --> 00:05:56,880
used 15 minutes

134
00:05:56,880 --> 00:06:00,560
five minutes raise your hands

135
00:06:00,800 --> 00:06:04,000
one minute raise your hand

136
00:06:05,440 --> 00:06:08,639
yes it was one minute

137
00:06:09,520 --> 00:06:12,240
so now let's

138
00:06:12,240 --> 00:06:14,000
find out what the

139
00:06:14,000 --> 00:06:16,720
actors do after compromising the kiss

140
00:06:16,720 --> 00:06:18,880
they purchase the most expensive

141
00:06:18,880 --> 00:06:21,840
services

142
00:06:22,639 --> 00:06:24,880
so to compromise also one minute to

143
00:06:24,880 --> 00:06:27,280
compromise your key and purchase the

144
00:06:27,280 --> 00:06:28,800
most expensive service it's like two

145
00:06:28,800 --> 00:06:31,199
minutes

146
00:06:32,000 --> 00:06:34,080
so how do you fight with this how do you

147
00:06:34,080 --> 00:06:36,639
avoid key leakage

148
00:06:36,639 --> 00:06:37,919
three methods

149
00:06:37,919 --> 00:06:40,560
first is programmers level

150
00:06:40,560 --> 00:06:44,000
you should not allow your developers to

151
00:06:44,000 --> 00:06:46,960
put the keys in your ripple

152
00:06:46,960 --> 00:06:49,440
and you should fight this

153
00:06:49,440 --> 00:06:50,800
on the

154
00:06:50,800 --> 00:06:53,840
upload stage

155
00:06:53,840 --> 00:06:55,120
second

156
00:06:55,120 --> 00:06:58,440
code deployment

157
00:07:02,479 --> 00:07:04,720
you can cut it uh find it during the

158
00:07:04,720 --> 00:07:07,520
deployment as part of your

159
00:07:07,520 --> 00:07:08,960
pipeline

160
00:07:08,960 --> 00:07:11,360
and third thing is how you store the

161
00:07:11,360 --> 00:07:13,840
keys you you should never store them in

162
00:07:13,840 --> 00:07:15,199
any open

163
00:07:15,199 --> 00:07:17,520
way and some we should use some

164
00:07:17,520 --> 00:07:20,400
storage methods

165
00:07:20,800 --> 00:07:23,120
and

166
00:07:24,160 --> 00:07:26,319
on the storage methods

167
00:07:26,319 --> 00:07:28,720
you can use hash equip

168
00:07:28,720 --> 00:07:31,039
and of course you need to encrypt them

169
00:07:31,039 --> 00:07:34,160
the cryptography issue is important

170
00:07:34,160 --> 00:07:36,240
you should not create your own

171
00:07:36,240 --> 00:07:38,000
crypto methods

172
00:07:38,000 --> 00:07:41,520
you should not google on how can i do it

173
00:07:41,520 --> 00:07:43,759
on stackoverflow because it will advise

174
00:07:43,759 --> 00:07:45,240
you some

175
00:07:45,240 --> 00:07:47,039
as64

176
00:07:47,039 --> 00:07:48,080
something

177
00:07:48,080 --> 00:07:49,440
not very

178
00:07:49,440 --> 00:07:51,680
good

179
00:07:53,440 --> 00:07:57,360
it could also advise you to use

180
00:07:57,520 --> 00:07:59,919
the environment variable but how would

181
00:07:59,919 --> 00:08:01,680
you

182
00:08:01,680 --> 00:08:03,520
share your keys if you have more than

183
00:08:03,520 --> 00:08:06,240
one developer

184
00:08:07,120 --> 00:08:11,400
you need to do it somehow

185
00:08:13,039 --> 00:08:16,639
should you send them an open text

186
00:08:16,639 --> 00:08:18,319
by email

187
00:08:18,319 --> 00:08:20,879
how sure are you that this pro developer

188
00:08:20,879 --> 00:08:23,199
will store them in the same

189
00:08:23,199 --> 00:08:24,960
safe and secure way

190
00:08:24,960 --> 00:08:26,879
so how do you manage

191
00:08:26,879 --> 00:08:29,440
manually

192
00:08:29,759 --> 00:08:32,080
how do you manage the keys

193
00:08:32,080 --> 00:08:35,120
you will have to somehow

194
00:08:35,120 --> 00:08:37,200
put your keys on a production server

195
00:08:37,200 --> 00:08:38,719
deploy them

196
00:08:38,719 --> 00:08:40,399
how do you protect them if they are

197
00:08:40,399 --> 00:08:42,958
plain text

198
00:08:44,959 --> 00:08:48,560
the file that stores the

199
00:08:48,560 --> 00:08:50,959
environment variables is just a plain

200
00:08:50,959 --> 00:08:52,399
text file

201
00:08:52,399 --> 00:08:54,560
that stores them so if your web server

202
00:08:54,560 --> 00:08:56,160
is compromised

203
00:08:56,160 --> 00:08:58,399
the actor can

204
00:08:58,399 --> 00:09:01,279
read your keys and get access to aws for

205
00:09:01,279 --> 00:09:03,600
example

206
00:09:06,160 --> 00:09:09,680
there are some ways to fight it

207
00:09:09,680 --> 00:09:11,519
to prevent

208
00:09:11,519 --> 00:09:14,399
the leaks on the levels

209
00:09:14,399 --> 00:09:17,279
that i mentioned first and very famous

210
00:09:17,279 --> 00:09:19,839
is good guardian

211
00:09:19,839 --> 00:09:22,720
it helps you fight the leaks both on the

212
00:09:22,720 --> 00:09:25,680
programmer level and on the code level

213
00:09:25,680 --> 00:09:28,720
it searches your commits and

214
00:09:28,720 --> 00:09:31,120
searches them for the keys

215
00:09:31,120 --> 00:09:32,160
then

216
00:09:32,160 --> 00:09:33,519
git secret

217
00:09:33,519 --> 00:09:36,480
is a good thing for small teams if you

218
00:09:36,480 --> 00:09:37,440
have

219
00:09:37,440 --> 00:09:40,480
to upload the keys but you want to do it

220
00:09:40,480 --> 00:09:44,640
in not in the plain text mode but

221
00:09:44,640 --> 00:09:47,200
encoded keys then it allows you to

222
00:09:47,200 --> 00:09:48,800
encode the keys for each and every

223
00:09:48,800 --> 00:09:50,720
developer

224
00:09:50,720 --> 00:09:53,680
and also encrypt the source code

225
00:09:53,680 --> 00:09:55,519
docker secrets

226
00:09:55,519 --> 00:09:57,279
for your

227
00:09:57,279 --> 00:09:58,720
containerized

228
00:09:58,720 --> 00:10:00,560
applications in docker

229
00:10:00,560 --> 00:10:04,320
aws secret manager for aws

230
00:10:04,320 --> 00:10:06,560
quite obvious

231
00:10:06,560 --> 00:10:09,519
and among the best solutions

232
00:10:09,519 --> 00:10:11,839
is

233
00:10:12,000 --> 00:10:15,200
a safe storage hash of work

234
00:10:15,200 --> 00:10:17,600
for your kids with that

235
00:10:17,600 --> 00:10:19,440
i'd like to conclude if you have any

236
00:10:19,440 --> 00:10:23,279
questions please feel free to ask them

237
00:10:25,920 --> 00:10:27,680
who has questions

238
00:10:27,680 --> 00:10:29,360
whom should i give the mic

239
00:10:29,360 --> 00:10:30,720
yep

240
00:10:30,720 --> 00:10:33,360
here you go

241
00:10:33,360 --> 00:10:37,040
so among those two api keys that you put

242
00:10:37,040 --> 00:10:39,680
in github one in the comment history and

243
00:10:39,680 --> 00:10:42,240
one in the code the first one was found

244
00:10:42,240 --> 00:10:44,800
in the code i think and uh the one in

245
00:10:44,800 --> 00:10:46,399
the history

246
00:10:46,399 --> 00:10:49,279
how fast was it fun no no i don't

247
00:10:49,279 --> 00:10:50,720
remember the exact time but it's like

248
00:10:50,720 --> 00:10:52,880
within first 10 minutes so comment

249
00:10:52,880 --> 00:10:55,440
history is pretty much

250
00:10:55,440 --> 00:10:56,800
as unsafe

251
00:10:56,800 --> 00:11:00,199
any other questions

