1
00:00:02,159 --> 00:00:05,440
good day i'm daniel signaloff

2
00:00:05,440 --> 00:00:08,240
and the topic of my presentation

3
00:00:08,240 --> 00:00:09,120
is

4
00:00:09,120 --> 00:00:10,080
um

5
00:00:10,080 --> 00:00:12,160
analysis of the client javascript code

6
00:00:12,160 --> 00:00:13,440
for

7
00:00:13,440 --> 00:00:17,039
detecting htcp endpoints

8
00:00:17,039 --> 00:00:18,400
i work

9
00:00:18,400 --> 00:00:21,359
at moscow state university and i also

10
00:00:21,359 --> 00:00:23,039
play for bushmakers

11
00:00:23,039 --> 00:00:25,680
and you also have my contact details

12
00:00:25,680 --> 00:00:26,880
on this line

13
00:00:26,880 --> 00:00:30,480
so i'm going to tell you about this

14
00:00:30,480 --> 00:00:32,880
analysis of the client javascript code

15
00:00:32,880 --> 00:00:34,399
and we do

16
00:00:34,399 --> 00:00:35,120
a

17
00:00:35,120 --> 00:00:36,320
black box

18
00:00:36,320 --> 00:00:39,040
web scanner to identify vulnerabilities

19
00:00:39,040 --> 00:00:41,040
and this this is also the topic of my

20
00:00:41,040 --> 00:00:43,600
thesis and what i'm going to

21
00:00:43,600 --> 00:00:46,000
tell you is not just me

22
00:00:46,000 --> 00:00:48,719
it's me and a group of really cool

23
00:00:48,719 --> 00:00:49,920
researchers

24
00:00:49,920 --> 00:00:52,160
and i had this group

25
00:00:52,160 --> 00:00:54,879
so what is the task that we're resolving

26
00:00:54,879 --> 00:00:56,480
we would like to

27
00:00:56,480 --> 00:00:58,960
find vulnerabilities in

28
00:00:58,960 --> 00:01:02,239
web applications we know how to

29
00:01:02,239 --> 00:01:05,280
send attack vectors but where to put the

30
00:01:05,280 --> 00:01:07,520
inverted commas

31
00:01:07,520 --> 00:01:09,439
you can see the vectors in red arrows

32
00:01:09,439 --> 00:01:11,680
but we need to to know more we need to

33
00:01:11,680 --> 00:01:12,720
know the

34
00:01:12,720 --> 00:01:15,040
url and other parameters and we want to

35
00:01:15,040 --> 00:01:16,240
do it

36
00:01:16,240 --> 00:01:19,360
in automated mode we want the scanner to

37
00:01:19,360 --> 00:01:20,320
work

38
00:01:20,320 --> 00:01:23,200
in automated mode without the toil and

39
00:01:23,200 --> 00:01:26,240
it also is very helpful for manual pen

40
00:01:26,240 --> 00:01:29,360
testing if the scope is too large or we

41
00:01:29,360 --> 00:01:32,320
don't have enough time

42
00:01:32,320 --> 00:01:33,840
so we're going to

43
00:01:33,840 --> 00:01:35,040
look

44
00:01:35,040 --> 00:01:35,759
uh

45
00:01:35,759 --> 00:01:37,200
we're going to mine this information

46
00:01:37,200 --> 00:01:39,759
from web pages so here we are we have a

47
00:01:39,759 --> 00:01:41,920
web page and we need to understand what

48
00:01:41,920 --> 00:01:44,560
server endpoints it addresses

49
00:01:44,560 --> 00:01:45,280
in

50
00:01:45,280 --> 00:01:47,200
with hmr

51
00:01:47,200 --> 00:01:49,119
html it's

52
00:01:49,119 --> 00:01:53,280
easy we can look at that tag like

53
00:01:53,280 --> 00:01:55,439
all the tags that would allow us to get

54
00:01:55,439 --> 00:01:57,200
the information how about

55
00:01:57,200 --> 00:02:00,079
the ones that uh sent the request that

56
00:02:00,079 --> 00:02:02,079
they sent from javascript

57
00:02:02,079 --> 00:02:03,119
like that

58
00:02:03,119 --> 00:02:05,360
well not like that it's not as simple as

59
00:02:05,360 --> 00:02:07,600
that because we would have to analyze

60
00:02:07,600 --> 00:02:08,639
code

61
00:02:08,639 --> 00:02:10,959
and it's either unresolvable algorithms

62
00:02:10,959 --> 00:02:12,800
mechanical speaking or in

63
00:02:12,800 --> 00:02:14,319
specific cases

64
00:02:14,319 --> 00:02:15,680
it's

65
00:02:15,680 --> 00:02:18,000
in the very least very very challenging

66
00:02:18,000 --> 00:02:20,959
and yet we're going to try and do it so

67
00:02:20,959 --> 00:02:22,720
what are the requests sent by javascript

68
00:02:22,720 --> 00:02:24,879
code onto the web page we have endpoints

69
00:02:24,879 --> 00:02:27,280
and we have uh requests and endpoint is

70
00:02:27,280 --> 00:02:30,160
in the name of my presentation

71
00:02:30,160 --> 00:02:32,160
api endpoints

72
00:02:32,160 --> 00:02:33,840
logic actions

73
00:02:33,840 --> 00:02:36,319
they exist in multiple names but when we

74
00:02:36,319 --> 00:02:38,080
say endpoints

75
00:02:38,080 --> 00:02:40,400
they are sent to various parts of server

76
00:02:40,400 --> 00:02:42,879
code when we send endpoints they trigger

77
00:02:42,879 --> 00:02:45,519
various type parts of uh servers and

78
00:02:45,519 --> 00:02:47,760
there are they can be multiple requests

79
00:02:47,760 --> 00:02:48,879
to

80
00:02:48,879 --> 00:02:51,840
to one end point like here

81
00:02:51,840 --> 00:02:54,239
so in this particular case we're going

82
00:02:54,239 --> 00:02:55,040
to

83
00:02:55,040 --> 00:02:57,519
assume that we just want to find all the

84
00:02:57,519 --> 00:03:00,879
requests to serve endpoints

85
00:03:01,040 --> 00:03:03,200
a separate task is to understand which

86
00:03:03,200 --> 00:03:04,800
endpoints it was

87
00:03:04,800 --> 00:03:05,760
addressed

88
00:03:05,760 --> 00:03:08,159
in particular we're not going to do it

89
00:03:08,159 --> 00:03:10,640
for now

90
00:03:12,000 --> 00:03:14,080
so

91
00:03:14,080 --> 00:03:17,360
how this is being solved the

92
00:03:17,360 --> 00:03:19,920
scanners today use dynamic crawling what

93
00:03:19,920 --> 00:03:22,080
is enemy crawling a headless browser

94
00:03:22,080 --> 00:03:24,040
opens the page and then some

95
00:03:24,040 --> 00:03:27,840
manipulations are made or in simplest

96
00:03:27,840 --> 00:03:28,879
instance

97
00:03:28,879 --> 00:03:30,560
we open the web browser and we look at

98
00:03:30,560 --> 00:03:33,280
the requests that were sent from it and

99
00:03:33,280 --> 00:03:36,080
then we'll look at the tree and we find

100
00:03:36,080 --> 00:03:38,319
the information on the new pages in the

101
00:03:38,319 --> 00:03:42,400
elements like in the links and stuff

102
00:03:42,400 --> 00:03:45,680
and this is what anatoly ivanov was

103
00:03:45,680 --> 00:03:47,280
referring to

104
00:03:47,280 --> 00:03:51,440
in his presentation in last ht days

105
00:03:51,440 --> 00:03:54,400
it's it's rather easy you can just

106
00:03:54,400 --> 00:03:56,720
take a library and write some bits of

107
00:03:56,720 --> 00:03:58,720
code and you can

108
00:03:58,720 --> 00:04:00,799
easily trigger some of the requests with

109
00:04:00,799 --> 00:04:03,920
this kind of dynamic crawling but

110
00:04:03,920 --> 00:04:05,840
how to do it with full coverage this is

111
00:04:05,840 --> 00:04:08,319
an issue

112
00:04:10,159 --> 00:04:12,239
because some request

113
00:04:12,239 --> 00:04:14,159
is not single step but it's multiple

114
00:04:14,159 --> 00:04:16,238
step when you have to open the sidebar

115
00:04:16,238 --> 00:04:18,079
menu and then from there another menu

116
00:04:18,079 --> 00:04:19,199
and then another menu and then the

117
00:04:19,199 --> 00:04:22,160
request is sent so how would you cover

118
00:04:22,160 --> 00:04:24,560
all of that with the dynamic crawling

119
00:04:24,560 --> 00:04:26,880
it's obviously impossible

120
00:04:26,880 --> 00:04:28,400
people are working on that

121
00:04:28,400 --> 00:04:32,560
but it's still an unresolved issue

122
00:04:32,560 --> 00:04:35,440
even if dynamic crawling of that exists

123
00:04:35,440 --> 00:04:38,880
it would take a lot of time

124
00:04:38,880 --> 00:04:40,400
we're going to look through all the

125
00:04:40,400 --> 00:04:43,280
menus and we'll scroll through all the

126
00:04:43,280 --> 00:04:45,600
bars that said

127
00:04:45,600 --> 00:04:48,000
and uh some of them would not detect the

128
00:04:48,000 --> 00:04:49,919
requests that are there in javascript

129
00:04:49,919 --> 00:04:51,199
but

130
00:04:51,199 --> 00:04:54,000
they could not be easily identified was

131
00:04:54,000 --> 00:04:55,680
it

132
00:04:55,680 --> 00:04:58,080
was the thing that i just described and

133
00:04:58,080 --> 00:05:00,560
crawling is usually usually done in the

134
00:05:00,560 --> 00:05:02,000
easiest way

135
00:05:02,000 --> 00:05:04,720
you don't really press any buttons you

136
00:05:04,720 --> 00:05:07,600
don't really scroll or

137
00:05:07,600 --> 00:05:08,880
target your mouse

138
00:05:08,880 --> 00:05:12,479
anything so our idea is this

139
00:05:12,479 --> 00:05:15,199
this is a javascript code part

140
00:05:15,199 --> 00:05:17,039
on a web page

141
00:05:17,039 --> 00:05:19,600
and we don't know how this function is

142
00:05:19,600 --> 00:05:21,919
invoked it may be invoked

143
00:05:21,919 --> 00:05:24,880
after a long chain of actions or not but

144
00:05:24,880 --> 00:05:27,840
we can see it's sending a request we can

145
00:05:27,840 --> 00:05:31,440
understand it with our own eyes right

146
00:05:31,440 --> 00:05:33,039
so probably if we can see it with our

147
00:05:33,039 --> 00:05:36,720
naked eye it could be automated

148
00:05:36,720 --> 00:05:40,400
it could be difficult to trigger

149
00:05:40,479 --> 00:05:41,680
um

150
00:05:41,680 --> 00:05:43,919
with requests but in in

151
00:05:43,919 --> 00:05:45,840
and sometimes a lot of codes are bundled

152
00:05:45,840 --> 00:05:47,520
together

153
00:05:47,520 --> 00:05:48,960
so probably

154
00:05:48,960 --> 00:05:49,680
the

155
00:05:49,680 --> 00:05:51,840
client's javascript code could be seen

156
00:05:51,840 --> 00:05:53,199
could be visible

157
00:05:53,199 --> 00:05:56,240
and this requests that are not related

158
00:05:56,240 --> 00:05:58,240
to the web page

159
00:05:58,240 --> 00:06:00,400
there would be there under code

160
00:06:00,400 --> 00:06:03,280
but it would be impossible to invoke it

161
00:06:03,280 --> 00:06:06,400
from the code so it would be de facto

162
00:06:06,400 --> 00:06:09,600
that it's that code you cannot invoke it

163
00:06:09,600 --> 00:06:10,319
so

164
00:06:10,319 --> 00:06:14,560
for other security tasks when we analyze

165
00:06:14,560 --> 00:06:18,840
uh uh when we are looking for dom

166
00:06:18,840 --> 00:06:21,280
success we cannot trigger it because

167
00:06:21,280 --> 00:06:23,680
it's at that code it you cannot trigger

168
00:06:23,680 --> 00:06:25,120
it at all if we're looking for

169
00:06:25,120 --> 00:06:27,120
information on

170
00:06:27,120 --> 00:06:28,560
um

171
00:06:28,560 --> 00:06:30,560
in a different way then that code is of

172
00:06:30,560 --> 00:06:32,800
interest to us so

173
00:06:32,800 --> 00:06:35,440
okay we are going to analyze code what

174
00:06:35,440 --> 00:06:37,039
are the analyzers

175
00:06:37,039 --> 00:06:39,600
that already exist and can we use it

176
00:06:39,600 --> 00:06:43,039
none of the analyzers as it turned out

177
00:06:43,039 --> 00:06:44,800
comes out of the box and resolves our

178
00:06:44,800 --> 00:06:45,759
issue

179
00:06:45,759 --> 00:06:46,880
mining

180
00:06:46,880 --> 00:06:48,639
server endpoints from the client the

181
00:06:48,639 --> 00:06:52,160
javascript code we also realized that a

182
00:06:52,160 --> 00:06:54,639
static

183
00:06:54,639 --> 00:06:57,919
one the static analysis

184
00:06:57,919 --> 00:07:01,280
would go down or load slowly

185
00:07:01,280 --> 00:07:04,160
yes they're all validated and correct

186
00:07:04,160 --> 00:07:06,560
and all but it's too difficult for them

187
00:07:06,560 --> 00:07:08,880
to analyze contemporary javascript and

188
00:07:08,880 --> 00:07:11,039
this is an unresolved issues a lot

189
00:07:11,039 --> 00:07:12,639
mentioned by a lot of authors of a lot

190
00:07:12,639 --> 00:07:14,720
of

191
00:07:14,840 --> 00:07:17,440
papers partially specific data are too

192
00:07:17,440 --> 00:07:19,599
abstract we don't have enough details to

193
00:07:19,599 --> 00:07:20,880
to work with

194
00:07:20,880 --> 00:07:23,599
we oftentimes see that when an

195
00:07:23,599 --> 00:07:26,720
a code line is formed

196
00:07:26,720 --> 00:07:27,919
with

197
00:07:27,919 --> 00:07:30,880
multiple elements then you

198
00:07:30,880 --> 00:07:33,280
get the return value any string and it's

199
00:07:33,280 --> 00:07:35,280
it's not it's not usable it's not very

200
00:07:35,280 --> 00:07:36,319
helpful

201
00:07:36,319 --> 00:07:38,400
none of the analyzers would analyze that

202
00:07:38,400 --> 00:07:39,360
code

203
00:07:39,360 --> 00:07:42,160
they would go from the

204
00:07:42,160 --> 00:07:43,759
entry point

205
00:07:43,759 --> 00:07:45,759
and if they don't go into that point

206
00:07:45,759 --> 00:07:47,919
they're not going to analyze it

207
00:07:47,919 --> 00:07:48,639
so

208
00:07:48,639 --> 00:07:50,639
do you think

209
00:07:50,639 --> 00:07:51,680
you can

210
00:07:51,680 --> 00:07:54,639
use the existing analyzers well yes you

211
00:07:54,639 --> 00:07:56,960
could but it's not a trivial issue

212
00:07:56,960 --> 00:07:58,639
hence we decided to write our own

213
00:07:58,639 --> 00:08:00,240
analyzer

214
00:08:00,240 --> 00:08:03,440
one of the main

215
00:08:04,560 --> 00:08:08,879
ideas was that it has to be light

216
00:08:08,879 --> 00:08:10,960
so as to work at

217
00:08:10,960 --> 00:08:14,080
javascript coded client-side uh

218
00:08:14,080 --> 00:08:16,560
web pages without eating up all the

219
00:08:16,560 --> 00:08:18,479
memory right

220
00:08:18,479 --> 00:08:22,639
so this is the paramount requirement

221
00:08:23,759 --> 00:08:26,879
is rather naive it's it doesn't use

222
00:08:26,879 --> 00:08:29,520
fixed-point solver

223
00:08:29,520 --> 00:08:31,360
if you know

224
00:08:31,360 --> 00:08:33,360
anything about static analysis you know

225
00:08:33,360 --> 00:08:34,958
what i mean

226
00:08:34,958 --> 00:08:36,958
it only has two abstract

227
00:08:36,958 --> 00:08:41,039
uh meanings unknown and framark right so

228
00:08:41,039 --> 00:08:44,560
on to the analysis algorithm here it is

229
00:08:44,560 --> 00:08:47,120
on one slide

230
00:08:47,120 --> 00:08:49,760
let's zoom in

231
00:08:49,760 --> 00:08:50,880
and

232
00:08:50,880 --> 00:08:53,040
no no you don't have to read it uh so

233
00:08:53,040 --> 00:08:56,480
i'm going to comment on it so analyzers

234
00:08:56,480 --> 00:08:59,680
look for the

235
00:08:59,680 --> 00:09:02,000
function invoke instances and we want to

236
00:09:02,000 --> 00:09:04,080
determine the arguments of the function

237
00:09:04,080 --> 00:09:05,519
if we understand the arguments of the

238
00:09:05,519 --> 00:09:06,959
function we

239
00:09:06,959 --> 00:09:08,480
to understand the request

240
00:09:08,480 --> 00:09:10,000
sent by the function

241
00:09:10,000 --> 00:09:10,800
we

242
00:09:10,800 --> 00:09:11,680
um

243
00:09:11,680 --> 00:09:14,560
look for embedded fetch and

244
00:09:14,560 --> 00:09:15,760
xml

245
00:09:15,760 --> 00:09:19,279
http requests and also we're looking for

246
00:09:19,279 --> 00:09:20,640
requests to

247
00:09:20,640 --> 00:09:23,760
popular libraries like jquery etc we're

248
00:09:23,760 --> 00:09:26,080
not going to analyze inside

249
00:09:26,080 --> 00:09:28,640
we're going to look at the requests sent

250
00:09:28,640 --> 00:09:30,800
towards those libraries and we're going

251
00:09:30,800 --> 00:09:32,640
to use signatures to do that they're

252
00:09:32,640 --> 00:09:34,800
going to be syntactic signatures that

253
00:09:34,800 --> 00:09:38,959
only include names we just use the

254
00:09:38,959 --> 00:09:42,240
abstract syntax trig the st to do that

255
00:09:42,240 --> 00:09:44,240
we know that axios is called

256
00:09:44,240 --> 00:09:48,839
axios and angular is called dollar

257
00:09:48,839 --> 00:09:52,800
hp so how our algorithm works it works

258
00:09:52,800 --> 00:09:54,800
on ist

259
00:09:54,800 --> 00:09:58,720
trees we don't use gf cfg at all

260
00:09:58,720 --> 00:10:00,720
sc

261
00:10:00,720 --> 00:10:04,800
3 is traversed into dapps and we

262
00:10:04,800 --> 00:10:08,480
remember all the variables and the

263
00:10:08,480 --> 00:10:11,279
values bravo analyzer is incapable to

264
00:10:11,279 --> 00:10:13,600
identify the variable

265
00:10:13,600 --> 00:10:16,959
it has a specific value called unknown

266
00:10:16,959 --> 00:10:19,680
when you encounter a special request

267
00:10:19,680 --> 00:10:22,399
like ajax or etc

268
00:10:22,399 --> 00:10:24,560
you try to the analyzer tries to

269
00:10:24,560 --> 00:10:27,120
calculate it and calculate the arguments

270
00:10:27,120 --> 00:10:29,519
of that function

271
00:10:29,519 --> 00:10:31,360
in terms of data

272
00:10:31,360 --> 00:10:33,519
the way we model data the analyzer

273
00:10:33,519 --> 00:10:34,880
supports

274
00:10:34,880 --> 00:10:37,440
specific data

275
00:10:37,440 --> 00:10:40,320
primitive types

276
00:10:41,279 --> 00:10:44,640
numbers null abc etc

277
00:10:44,640 --> 00:10:46,640
and everything that

278
00:10:46,640 --> 00:10:50,319
any system would have like gs

279
00:10:50,560 --> 00:10:53,839
and also unknown and framark

280
00:10:53,839 --> 00:10:56,079
unknown and from arg

281
00:10:56,079 --> 00:10:58,000
mean that this is something that we

282
00:10:58,000 --> 00:10:59,200
don't know

283
00:10:59,200 --> 00:11:01,279
and from arg means that it comes from

284
00:11:01,279 --> 00:11:02,480
formal

285
00:11:02,480 --> 00:11:04,480
arguments of functions when we look at

286
00:11:04,480 --> 00:11:06,800
the function we don't know the values

287
00:11:06,800 --> 00:11:09,120
inside the arguments you can only

288
00:11:09,120 --> 00:11:13,279
tell when it's invoked so for unknown

289
00:11:13,279 --> 00:11:16,800
values of function arguments from arc is

290
00:11:16,800 --> 00:11:19,040
used

291
00:11:19,519 --> 00:11:21,680
and then the analyzer is incapable of

292
00:11:21,680 --> 00:11:23,519
understanding that variable can take

293
00:11:23,519 --> 00:11:26,560
several values

294
00:11:26,560 --> 00:11:28,880
if it were to remember one value it

295
00:11:28,880 --> 00:11:32,320
would have to get rid of the other value

296
00:11:32,320 --> 00:11:34,320
it goes all the way to lexical uh

297
00:11:34,320 --> 00:11:36,079
scoping in its identification the

298
00:11:36,079 --> 00:11:37,600
analyzer

299
00:11:37,600 --> 00:11:38,560
would

300
00:11:38,560 --> 00:11:41,360
differentiate between various variables

301
00:11:41,360 --> 00:11:44,399
like we have globalx

302
00:11:44,399 --> 00:11:47,200
x as local function of f

303
00:11:47,200 --> 00:11:50,320
and one x in block so the analyzer would

304
00:11:50,320 --> 00:11:52,240
differentiate between

305
00:11:52,240 --> 00:11:54,399
these three types of axes this can be

306
00:11:54,399 --> 00:11:57,120
done using babel library and other

307
00:11:57,120 --> 00:11:59,519
elaborates rather than just parsing and

308
00:11:59,519 --> 00:12:02,079
getting the

309
00:12:02,800 --> 00:12:04,000
ast

310
00:12:04,000 --> 00:12:06,240
you can also

311
00:12:06,240 --> 00:12:08,079
pass it in a different way more precise

312
00:12:08,079 --> 00:12:09,600
way

313
00:12:09,600 --> 00:12:12,959
you also have a whole set of embedded uh

314
00:12:12,959 --> 00:12:15,599
operations

315
00:12:17,680 --> 00:12:20,320
not just uh the variables not just the

316
00:12:20,320 --> 00:12:22,320
arguments of functions

317
00:12:22,320 --> 00:12:23,519
but also

318
00:12:23,519 --> 00:12:27,839
the operations like plus etc

319
00:12:27,920 --> 00:12:29,360
as far as

320
00:12:29,360 --> 00:12:33,600
requesting user functions we ignore it

321
00:12:34,079 --> 00:12:36,720
if it's there in the code

322
00:12:36,720 --> 00:12:39,279
we don't even dive into the the

323
00:12:39,279 --> 00:12:41,040
algorithm wouldn't even dive into it

324
00:12:41,040 --> 00:12:42,720
would just uh

325
00:12:42,720 --> 00:12:45,040
assign unknown to it

326
00:12:45,040 --> 00:12:47,519
branching

327
00:12:48,399 --> 00:12:49,120
all

328
00:12:49,120 --> 00:12:51,680
branches are only

329
00:12:51,680 --> 00:12:53,600
crawled once

330
00:12:53,600 --> 00:12:56,000
if you have a cycle we only enter this

331
00:12:56,000 --> 00:12:58,959
branch once if you have an if then we

332
00:12:58,959 --> 00:13:02,320
get into evolves once and

333
00:13:02,320 --> 00:13:03,200
the

334
00:13:03,200 --> 00:13:04,959
factual analysis

335
00:13:04,959 --> 00:13:06,880
is

336
00:13:06,880 --> 00:13:08,320
is

337
00:13:08,320 --> 00:13:10,959
consists in us searching through the ist

338
00:13:10,959 --> 00:13:13,839
so here we have a code in

339
00:13:13,839 --> 00:13:16,639
in as in in seventh line we have dollar

340
00:13:16,639 --> 00:13:18,839
ajax

341
00:13:18,839 --> 00:13:20,800
so

342
00:13:20,800 --> 00:13:23,600
we go from the very top

343
00:13:23,600 --> 00:13:26,560
and we can see api base url which is

344
00:13:26,560 --> 00:13:28,720
calculated using the data that we know

345
00:13:28,720 --> 00:13:30,399
we know location

346
00:13:30,399 --> 00:13:34,600
we know all the data on the web

347
00:13:34,720 --> 00:13:36,880
web page the second component is literal

348
00:13:36,880 --> 00:13:40,639
so we can uh calculate it

349
00:13:40,639 --> 00:13:42,800
plus is supported i already mentioned

350
00:13:42,800 --> 00:13:44,560
that then we go into the body of the

351
00:13:44,560 --> 00:13:46,320
function this function has three

352
00:13:46,320 --> 00:13:47,760
arguments we don't know the values of

353
00:13:47,760 --> 00:13:50,480
those arguments we don't see requests

354
00:13:50,480 --> 00:13:52,079
from this function

355
00:13:52,079 --> 00:13:54,399
they might be non-existent so

356
00:13:54,399 --> 00:13:57,440
we assign from arc

357
00:13:57,440 --> 00:14:00,000
right then if we don't do anything but

358
00:14:00,000 --> 00:14:03,440
if we ignore the ifs we don't go inside

359
00:14:03,440 --> 00:14:05,839
the branches then

360
00:14:05,839 --> 00:14:07,920
uh cash get analyzed it doesn't know

361
00:14:07,920 --> 00:14:10,480
anything about it so we just then unless

362
00:14:10,480 --> 00:14:12,639
it just ignores it and then comes all

363
00:14:12,639 --> 00:14:14,399
the way to us

364
00:14:14,399 --> 00:14:16,480
speaking of ignoring

365
00:14:16,480 --> 00:14:19,040
should we have a dust

366
00:14:19,040 --> 00:14:21,680
it would have had uh it would have

367
00:14:21,680 --> 00:14:24,079
go into ours it would have go into the

368
00:14:24,079 --> 00:14:27,120
right um branch and not fall into

369
00:14:27,120 --> 00:14:28,959
exception so that this

370
00:14:28,959 --> 00:14:32,399
request happens in fast you don't have

371
00:14:32,399 --> 00:14:35,600
to have it you can ignore anything that

372
00:14:35,600 --> 00:14:38,720
bothers it and just go into the

373
00:14:38,720 --> 00:14:40,560
line of the code that it needs so we

374
00:14:40,560 --> 00:14:42,160
have the url

375
00:14:42,160 --> 00:14:44,720
filled it can be calculated all the data

376
00:14:44,720 --> 00:14:47,440
that we need are there and we remember

377
00:14:47,440 --> 00:14:49,760
the values and we we can put them

378
00:14:49,760 --> 00:14:51,199
together

379
00:14:51,199 --> 00:14:52,639
so

380
00:14:52,639 --> 00:14:54,639
the arguments of this

381
00:14:54,639 --> 00:14:58,720
request is known the url the date

382
00:14:58,720 --> 00:15:00,480
record limit and format all the three

383
00:15:00,480 --> 00:15:01,440
fills

384
00:15:01,440 --> 00:15:04,000
are there the record is from arc we

385
00:15:04,000 --> 00:15:05,920
don't know what is there right but it's

386
00:15:05,920 --> 00:15:06,959
okay

387
00:15:06,959 --> 00:15:09,519
so we have

388
00:15:09,519 --> 00:15:12,240
as the uh

389
00:15:15,600 --> 00:15:18,240
and we have the url what it is

390
00:15:18,240 --> 00:15:20,160
calling

391
00:15:20,160 --> 00:15:23,839
so the analyzer in its hardcore

392
00:15:23,839 --> 00:15:24,839
in its

393
00:15:24,839 --> 00:15:26,560
functions

394
00:15:26,560 --> 00:15:29,040
already has it all

395
00:15:29,040 --> 00:15:30,800
what we have highlighted in blue are the

396
00:15:30,800 --> 00:15:32,240
data that come from the arguments

397
00:15:32,240 --> 00:15:36,959
function argument record is now unknown

398
00:15:37,040 --> 00:15:40,800
both unknown values are now unknown

399
00:15:40,800 --> 00:15:42,880
and the rest are transformed into

400
00:15:42,880 --> 00:15:44,560
arguments the way it works in dollar

401
00:15:44,560 --> 00:15:45,920
attracts

402
00:15:45,920 --> 00:15:46,800
so

403
00:15:46,800 --> 00:15:49,440
this was what was the basics of the

404
00:15:49,440 --> 00:15:53,839
algorithm there's also this mechanism

405
00:15:53,839 --> 00:15:56,800
we call looking for

406
00:15:56,800 --> 00:16:00,720
argument values let's say we have a code

407
00:16:00,720 --> 00:16:03,440
and rather than a function having local

408
00:16:03,440 --> 00:16:04,959
variables

409
00:16:04,959 --> 00:16:07,680
known variables and calls the server but

410
00:16:07,680 --> 00:16:09,120
it comes from arguments function

411
00:16:09,120 --> 00:16:11,759
arguments if our call depends on

412
00:16:11,759 --> 00:16:14,079
function arguments we need to

413
00:16:14,079 --> 00:16:16,639
uh go deeper into it how is going to

414
00:16:16,639 --> 00:16:17,519
work

415
00:16:17,519 --> 00:16:19,680
we are using from arg

416
00:16:19,680 --> 00:16:22,000
i mentioned it already if from our

417
00:16:22,000 --> 00:16:23,199
encounters

418
00:16:23,199 --> 00:16:26,959
a dollar a jacks or something

419
00:16:27,680 --> 00:16:28,720
then

420
00:16:28,720 --> 00:16:30,880
it means that this call depended on

421
00:16:30,880 --> 00:16:33,199
arguments and we need to look for these

422
00:16:33,199 --> 00:16:36,560
calls and the types of arguments

423
00:16:36,560 --> 00:16:39,440
how it's done in practice

424
00:16:39,440 --> 00:16:40,480
we have

425
00:16:40,480 --> 00:16:41,759
call f

426
00:16:41,759 --> 00:16:44,399
we need to find the calls how are we

427
00:16:44,399 --> 00:16:45,920
going to do it

428
00:16:45,920 --> 00:16:48,000
again this is another very difficult

429
00:16:48,000 --> 00:16:50,000
task for javascript and other languages

430
00:16:50,000 --> 00:16:53,040
we need to build

431
00:16:54,720 --> 00:16:57,440
graph of calls

432
00:16:57,440 --> 00:16:59,199
we had a variable table we're going to

433
00:16:59,199 --> 00:17:00,560
search for the variable table we're

434
00:17:00,560 --> 00:17:03,279
going to search for the variables that

435
00:17:03,279 --> 00:17:07,199
indicate that point towards a

436
00:17:07,199 --> 00:17:09,119
and it's going to only work for

437
00:17:09,119 --> 00:17:10,240
variables

438
00:17:10,240 --> 00:17:12,160
not for the function arguments but it

439
00:17:12,160 --> 00:17:14,400
would work for variables so this is how

440
00:17:14,400 --> 00:17:17,199
it works so we have function f

441
00:17:17,199 --> 00:17:19,359
where all the way to as

442
00:17:19,359 --> 00:17:22,720
uh the dollar jackson uh from arg is

443
00:17:22,720 --> 00:17:25,839
there so it means that we want to edit

444
00:17:25,839 --> 00:17:27,439
understand the arguments

445
00:17:27,439 --> 00:17:30,960
and we want to identify the cause

446
00:17:30,960 --> 00:17:33,120
function f

447
00:17:33,120 --> 00:17:36,799
creates a a variable in the scope

448
00:17:36,799 --> 00:17:39,679
and this is the variable that is called

449
00:17:39,679 --> 00:17:40,559
back

450
00:17:40,559 --> 00:17:42,720
and that's why it's not

451
00:17:42,720 --> 00:17:45,440
difficult for the analyzer to find j and

452
00:17:45,440 --> 00:17:47,919
k okay what's next

453
00:17:47,919 --> 00:17:51,919
analysis is going to

454
00:17:53,280 --> 00:17:56,960
go from j and from k and the moment we

455
00:17:56,960 --> 00:17:58,720
arrive to the

456
00:17:58,720 --> 00:18:00,640
call of interest we're going to enter it

457
00:18:00,640 --> 00:18:01,919
we're going to

458
00:18:01,919 --> 00:18:04,559
uh repeat our analysis from jn from k

459
00:18:04,559 --> 00:18:07,600
and we're going to kind of model the

460
00:18:07,600 --> 00:18:10,159
function call

461
00:18:11,120 --> 00:18:12,640
at that

462
00:18:12,640 --> 00:18:15,679
we've been to f right we've analyzed it

463
00:18:15,679 --> 00:18:17,679
but now we're going to have

464
00:18:17,679 --> 00:18:18,400
uh

465
00:18:18,400 --> 00:18:20,160
arguments calculated because we've been

466
00:18:20,160 --> 00:18:21,760
to the place where where it's called

467
00:18:21,760 --> 00:18:22,559
from

468
00:18:22,559 --> 00:18:24,320
g chords for f

469
00:18:24,320 --> 00:18:27,600
we know that now we start from g

470
00:18:27,600 --> 00:18:30,160
and we see

471
00:18:30,160 --> 00:18:32,559
variable options and we can see that the

472
00:18:32,559 --> 00:18:34,799
argument is sent there and we go to the

473
00:18:34,799 --> 00:18:36,960
beginning of f

474
00:18:36,960 --> 00:18:39,039
now we have a different situation

475
00:18:39,039 --> 00:18:42,440
because they

476
00:18:42,720 --> 00:18:44,720
some parameters are already known and

477
00:18:44,720 --> 00:18:47,120
when the next call as

478
00:18:47,120 --> 00:18:49,760
the dollar ajax happens we already have

479
00:18:49,760 --> 00:18:51,600
certain arguments

480
00:18:51,600 --> 00:18:56,760
so that way we found one of end points

481
00:18:57,039 --> 00:18:59,520
then there is this read variable

482
00:18:59,520 --> 00:19:02,240
it goes to

483
00:19:02,240 --> 00:19:03,440
f

484
00:19:03,440 --> 00:19:05,760
and then we go once again to f and we

485
00:19:05,760 --> 00:19:08,240
get another set of arguments

486
00:19:08,240 --> 00:19:10,000
sometimes there is a chain of several

487
00:19:10,000 --> 00:19:11,039
calls

488
00:19:11,039 --> 00:19:14,160
function f is called from g and g is

489
00:19:14,160 --> 00:19:17,520
called from k how how do you detect that

490
00:19:17,520 --> 00:19:21,120
well you analyze j and f

491
00:19:21,120 --> 00:19:23,039
uh chain

492
00:19:23,039 --> 00:19:24,400
and you get to

493
00:19:24,400 --> 00:19:28,000
do attracts or fetch if by analyzing two

494
00:19:28,000 --> 00:19:30,960
element chain you see that from arc is

495
00:19:30,960 --> 00:19:33,520
still to the effect it has gone to the

496
00:19:33,520 --> 00:19:35,440
air function it means that we want to

497
00:19:35,440 --> 00:19:37,840
analyze a longer chain it means that

498
00:19:37,840 --> 00:19:40,960
have sent his arguments

499
00:19:40,960 --> 00:19:43,360
or rather

500
00:19:43,360 --> 00:19:45,120
would would take it from somewhere and

501
00:19:45,120 --> 00:19:47,280
would

502
00:19:48,160 --> 00:19:51,280
send it over

503
00:20:02,960 --> 00:20:05,440
it again reads from mark so the analysis

504
00:20:05,440 --> 00:20:07,919
understands okay so now we need to

505
00:20:07,919 --> 00:20:10,159
search for g

506
00:20:10,159 --> 00:20:13,120
to find more precise arguments so how

507
00:20:13,120 --> 00:20:14,400
this is done

508
00:20:14,400 --> 00:20:18,600
we have a line up

509
00:20:20,080 --> 00:20:21,280
if you are

510
00:20:21,280 --> 00:20:22,799
all the way to

511
00:20:22,799 --> 00:20:24,880
dollar jacks of edge and you see for

512
00:20:24,880 --> 00:20:26,000
mine

513
00:20:26,000 --> 00:20:29,039
you add just one element on top so you

514
00:20:29,039 --> 00:20:31,120
just takes one

515
00:20:31,120 --> 00:20:32,080
um

516
00:20:32,080 --> 00:20:33,600
first line

517
00:20:33,600 --> 00:20:35,919
like g in this case

518
00:20:35,919 --> 00:20:37,760
and put it

519
00:20:37,760 --> 00:20:39,919
in the beginning of the line

520
00:20:39,919 --> 00:20:42,720
so now we start from k because we

521
00:20:42,720 --> 00:20:45,360
realize that k calls g

522
00:20:45,360 --> 00:20:49,799
and then we go to g

523
00:20:52,159 --> 00:20:54,400
and we can calculate it and go all the

524
00:20:54,400 --> 00:20:56,159
way to other checks

525
00:20:56,159 --> 00:20:59,039
so so much for the algorithm

526
00:20:59,039 --> 00:21:01,120
very a very high level review of our

527
00:21:01,120 --> 00:21:02,559
algorithm

528
00:21:02,559 --> 00:21:04,480
and obviously it comes with certain

529
00:21:04,480 --> 00:21:06,720
difficulties it's rather simplistic so

530
00:21:06,720 --> 00:21:10,400
it doesn't it is not universal

531
00:21:10,400 --> 00:21:12,159
a static

532
00:21:12,159 --> 00:21:14,320
analysis javascript static analysis

533
00:21:14,320 --> 00:21:16,720
algorithm is a difficult thing

534
00:21:16,720 --> 00:21:18,640
javascript is difficult to bend unless

535
00:21:18,640 --> 00:21:20,080
statically and so here are the

536
00:21:20,080 --> 00:21:22,559
difficulties that we have dynamic

537
00:21:22,559 --> 00:21:23,760
download of

538
00:21:23,760 --> 00:21:26,559
eval code

539
00:21:26,720 --> 00:21:29,280
is one such problem

540
00:21:29,280 --> 00:21:31,919
vendors and

541
00:21:31,919 --> 00:21:33,440
object-oriented

542
00:21:33,440 --> 00:21:36,000
programming

543
00:21:38,640 --> 00:21:40,480
if you have this you need to understand

544
00:21:40,480 --> 00:21:42,159
where this this

545
00:21:42,159 --> 00:21:44,559
points to

546
00:21:44,559 --> 00:21:47,200
we need to also

547
00:21:47,200 --> 00:21:48,400
model the

548
00:21:48,400 --> 00:21:50,640
dom

549
00:21:50,799 --> 00:21:53,760
and it's difficult thing to do

550
00:21:53,760 --> 00:21:54,720
this

551
00:21:54,720 --> 00:21:57,679
dot make request is not something that

552
00:21:57,679 --> 00:22:00,000
our analyzer would find or

553
00:22:00,000 --> 00:22:00,960
a

554
00:22:00,960 --> 00:22:04,559
equal require jquery a dot

555
00:22:04,559 --> 00:22:06,559
get so you find

556
00:22:06,559 --> 00:22:08,000
uh

557
00:22:08,000 --> 00:22:10,240
everything that's related to signatures

558
00:22:10,240 --> 00:22:11,440
but a

559
00:22:11,440 --> 00:22:13,200
was will not be

560
00:22:13,200 --> 00:22:15,120
interpreted as jquery

561
00:22:15,120 --> 00:22:16,320
so one

562
00:22:16,320 --> 00:22:18,720
way out is to complicate static analysis

563
00:22:18,720 --> 00:22:20,960
but it's still difficult for static

564
00:22:20,960 --> 00:22:23,760
analysis to analyze javascript code

565
00:22:23,760 --> 00:22:26,320
so one other solution would would to go

566
00:22:26,320 --> 00:22:28,400
would be to go hybrid to combine the

567
00:22:28,400 --> 00:22:31,440
static and the dynamic analysis

568
00:22:31,440 --> 00:22:34,400
i mentioned already that purely dust is

569
00:22:34,400 --> 00:22:36,159
not something that is good for us

570
00:22:36,159 --> 00:22:39,360
because it cannot analyze that code but

571
00:22:39,360 --> 00:22:41,440
at least it can

572
00:22:41,440 --> 00:22:44,240
hint to the static analysis so we can

573
00:22:44,240 --> 00:22:46,320
take a real browser and download the

574
00:22:46,320 --> 00:22:49,280
page in real

575
00:22:49,280 --> 00:22:51,200
so if some code

576
00:22:51,200 --> 00:22:53,919
works in it we can get it using debugger

577
00:22:53,919 --> 00:22:57,520
and since it's a real uh browser

578
00:22:57,520 --> 00:23:00,159
irrespective of whether it's been

579
00:23:00,159 --> 00:23:03,440
evolved or deciphered going from server

580
00:23:03,440 --> 00:23:07,280
it's it's there in the real

581
00:23:07,280 --> 00:23:08,480
a browser

582
00:23:08,480 --> 00:23:10,880
and this way we can find the whole code

583
00:23:10,880 --> 00:23:12,559
besides

584
00:23:12,559 --> 00:23:14,400
we get all

585
00:23:14,400 --> 00:23:16,960
the calls that you would regularly

586
00:23:16,960 --> 00:23:19,679
get when you download the page

587
00:23:19,679 --> 00:23:21,360
the analyzer would have it and we also

588
00:23:21,360 --> 00:23:22,799
have access to

589
00:23:22,799 --> 00:23:25,679
dom 3 and dom ap

590
00:23:25,679 --> 00:23:27,840
so

591
00:23:28,880 --> 00:23:32,080
if a value is taken from dom we no

592
00:23:32,080 --> 00:23:34,320
longer have a problem

593
00:23:34,320 --> 00:23:37,760
to understand it we have access to

594
00:23:37,760 --> 00:23:38,559
the

595
00:23:38,559 --> 00:23:40,000
trees

596
00:23:40,000 --> 00:23:42,159
we have the exact model of the browser

597
00:23:42,159 --> 00:23:44,559
the browser

598
00:23:44,559 --> 00:23:47,360
so the idea has already been realized in

599
00:23:47,360 --> 00:23:49,279
our analyzer the first bullet has

600
00:23:49,279 --> 00:23:52,640
already been done in the very basic

601
00:23:52,640 --> 00:23:54,400
version of the algorithm there are a

602
00:23:54,400 --> 00:23:56,159
couple of other ideas that we are going

603
00:23:56,159 --> 00:23:59,440
to experiment with

604
00:23:59,520 --> 00:24:00,960
picking into

605
00:24:00,960 --> 00:24:02,880
uh dynamic

606
00:24:02,880 --> 00:24:06,000
we want to know the value but it's uh

607
00:24:06,000 --> 00:24:07,840
difficult to analyze statically

608
00:24:07,840 --> 00:24:10,720
javascript what can be done

609
00:24:10,720 --> 00:24:14,960
we can analyze this code dynamically

610
00:24:14,960 --> 00:24:15,840
if

611
00:24:15,840 --> 00:24:18,240
it has been

612
00:24:18,240 --> 00:24:21,600
executed then in debugger we could check

613
00:24:21,600 --> 00:24:23,679
what was the value in dynamic at that

614
00:24:23,679 --> 00:24:27,360
point of time we would would be able to

615
00:24:27,360 --> 00:24:30,480
look at all the values

616
00:24:30,480 --> 00:24:32,799
so in dynamic we at least can get some

617
00:24:32,799 --> 00:24:34,159
of the values

618
00:24:34,159 --> 00:24:36,880
it can work for uh data for base url or

619
00:24:36,880 --> 00:24:39,760
anything or for functions

620
00:24:39,760 --> 00:24:42,480
where the function points at

621
00:24:42,480 --> 00:24:45,039
where to get the data

622
00:24:45,039 --> 00:24:47,679
another point say function calls dollar

623
00:24:47,679 --> 00:24:48,720
checks

624
00:24:48,720 --> 00:24:50,159
that sends

625
00:24:50,159 --> 00:24:53,679
a request to the server endpoint

626
00:24:53,679 --> 00:24:56,159
analyzer fails to do it

627
00:24:56,159 --> 00:24:58,799
we can try to invoke this function on

628
00:24:58,799 --> 00:25:01,120
the page and probably would be lucky

629
00:25:01,120 --> 00:25:03,200
enough for it to send a real request and

630
00:25:03,200 --> 00:25:04,720
we'll catch it

631
00:25:04,720 --> 00:25:06,960
or

632
00:25:06,960 --> 00:25:08,640
probably

633
00:25:08,640 --> 00:25:10,240
we're not going to trigger that but at

634
00:25:10,240 --> 00:25:11,760
least we'll get some

635
00:25:11,760 --> 00:25:13,520
data the function would require a module

636
00:25:13,520 --> 00:25:16,159
and we'll see the real meaning of this

637
00:25:16,159 --> 00:25:18,080
particular module and this would prompt

638
00:25:18,080 --> 00:25:21,360
us in our analysis

639
00:25:21,360 --> 00:25:22,400
okay

640
00:25:22,400 --> 00:25:24,880
this was so all bits

641
00:25:24,880 --> 00:25:26,840
abstract and theoretical

642
00:25:26,840 --> 00:25:30,480
how it works with real vulnerabilities

643
00:25:30,480 --> 00:25:32,400
what kind of vulnerabilities can be

644
00:25:32,400 --> 00:25:36,240
identified in js in reality and what our

645
00:25:36,240 --> 00:25:38,400
algorithm can work for

646
00:25:38,400 --> 00:25:40,880
so we experimented

647
00:25:40,880 --> 00:25:42,559
generally speaking

648
00:25:42,559 --> 00:25:44,799
the experiments were built in this way

649
00:25:44,799 --> 00:25:48,000
we would take real website page web

650
00:25:48,000 --> 00:25:50,000
pages we would get endpoints and then we

651
00:25:50,000 --> 00:25:51,919
would scan it with web scanner

652
00:25:51,919 --> 00:25:53,200
so

653
00:25:53,200 --> 00:25:55,440
first thing we found

654
00:25:55,440 --> 00:25:57,600
a couple of vulnerabilities

655
00:25:57,600 --> 00:25:59,520
in sevier

656
00:25:59,520 --> 00:26:02,159
one of them is uh fixed has been already

657
00:26:02,159 --> 00:26:04,320
fixed it's it was a nascar

658
00:26:04,320 --> 00:26:05,679
injection

659
00:26:05,679 --> 00:26:06,799
in

660
00:26:06,799 --> 00:26:08,559
wpe discuss

661
00:26:08,559 --> 00:26:12,080
and also another one

662
00:26:13,360 --> 00:26:17,360
and we also identified one zero day

663
00:26:17,360 --> 00:26:19,679
we actually reported it

664
00:26:19,679 --> 00:26:21,520
yesterday

665
00:26:21,520 --> 00:26:24,480
in background bounty

666
00:26:24,480 --> 00:26:28,720
we also identified the php and security

667
00:26:28,720 --> 00:26:30,480
um

668
00:26:30,480 --> 00:26:35,520
sko injection and a couple of access

669
00:26:46,640 --> 00:26:49,440
the analyzer finds the end point

670
00:26:49,440 --> 00:26:53,039
and it's not something that can be just

671
00:26:53,039 --> 00:26:55,360
caught by dynamic crawling

672
00:26:55,360 --> 00:26:58,480
more uh multi-step crawling probably

673
00:26:58,480 --> 00:27:00,640
could have found it and from as far as

674
00:27:00,640 --> 00:27:03,360
back bounty is concerned

675
00:27:03,360 --> 00:27:05,679
we have one sqli

676
00:27:05,679 --> 00:27:09,279
and a6 reflected xss

677
00:27:09,279 --> 00:27:11,840
most of them can be found

678
00:27:11,840 --> 00:27:14,480
by the analyzer but not by the dynamic

679
00:27:14,480 --> 00:27:15,760
crawler so

680
00:27:15,760 --> 00:27:19,120
for the bug bounty

681
00:27:19,120 --> 00:27:21,840
points we used one step

682
00:27:21,840 --> 00:27:24,320
crawler

683
00:27:24,399 --> 00:27:26,559
he tries to just go through all the

684
00:27:26,559 --> 00:27:29,440
interactive uh elements

685
00:27:29,440 --> 00:27:31,200
single stamp ones

686
00:27:31,200 --> 00:27:32,840
so

687
00:27:32,840 --> 00:27:36,000
three three of the end points were not

688
00:27:36,000 --> 00:27:38,640
found with this type of crawling

689
00:27:38,640 --> 00:27:42,240
and now on to the code

690
00:27:45,039 --> 00:27:47,279
this is from back bounty the code has

691
00:27:47,279 --> 00:27:49,279
changed

692
00:27:49,279 --> 00:27:51,919
well first off for you to not define the

693
00:27:51,919 --> 00:27:56,000
website that it's also a bit simplified

694
00:27:56,480 --> 00:27:59,279
you can see here

695
00:28:00,240 --> 00:28:03,679
and it's called from

696
00:28:03,679 --> 00:28:05,039
the thing that's

697
00:28:05,039 --> 00:28:07,760
wrecked in

698
00:28:08,480 --> 00:28:09,840
that option

699
00:28:09,840 --> 00:28:12,000
so where we analyze it we didn't have

700
00:28:12,000 --> 00:28:14,640
that element

701
00:28:15,200 --> 00:28:18,720
there was no uh search car uh id

702
00:28:18,720 --> 00:28:19,679
saying

703
00:28:19,679 --> 00:28:21,279
so you couldn't find it with the nema

704
00:28:21,279 --> 00:28:23,840
crawler probably in some other place in

705
00:28:23,840 --> 00:28:26,240
the site there's there it's there and

706
00:28:26,240 --> 00:28:28,799
you can find it but not in the pages

707
00:28:28,799 --> 00:28:31,760
that we looked at we couldn't trigger

708
00:28:31,760 --> 00:28:34,240
that request at all

709
00:28:34,240 --> 00:28:36,640
a second example

710
00:28:36,640 --> 00:28:38,559
this longish

711
00:28:38,559 --> 00:28:40,799
line of code there is if

712
00:28:40,799 --> 00:28:42,159
and also

713
00:28:42,159 --> 00:28:43,520
a dollar pass

714
00:28:43,520 --> 00:28:45,440
i know it's it's very difficult to see

715
00:28:45,440 --> 00:28:47,120
so i'm going to show you

716
00:28:47,120 --> 00:28:48,159
like that

717
00:28:48,159 --> 00:28:51,039
so please pay attention at what we have

718
00:28:51,039 --> 00:28:53,520
in if

719
00:28:56,320 --> 00:28:59,600
we have 11 we have 20 variables and

720
00:28:59,600 --> 00:29:02,799
there's 20 variables

721
00:29:03,520 --> 00:29:04,799
calls

722
00:29:04,799 --> 00:29:07,600
uh 20 arguments

723
00:29:07,600 --> 00:29:10,840
and 11 validation

724
00:29:10,840 --> 00:29:13,039
conditions and all of them have to be

725
00:29:13,039 --> 00:29:15,360
true for this element to

726
00:29:15,360 --> 00:29:18,240
be executed

727
00:29:18,240 --> 00:29:22,080
so basically it means that unless

728
00:29:22,080 --> 00:29:25,360
we are we entered if unless we turn all

729
00:29:25,360 --> 00:29:27,840
of them to true unless we fill in all

730
00:29:27,840 --> 00:29:29,360
these forms

731
00:29:29,360 --> 00:29:30,880
anything is going and nothing is going

732
00:29:30,880 --> 00:29:32,799
to happen what what's your dynamic

733
00:29:32,799 --> 00:29:35,840
chronology is going to tell you

734
00:29:35,840 --> 00:29:38,480
hard time huh

735
00:29:38,480 --> 00:29:41,840
and just a very brief example

736
00:29:42,320 --> 00:29:45,360
not too unique

737
00:29:46,159 --> 00:29:48,880
a wordpress plugin

738
00:29:48,880 --> 00:29:50,799
the cve thing

739
00:29:50,799 --> 00:29:53,600
so two functions here the second one is

740
00:29:53,600 --> 00:29:55,840
called from the first one

741
00:29:55,840 --> 00:29:57,600
get objects

742
00:29:57,600 --> 00:29:58,559
obj

743
00:29:58,559 --> 00:30:03,039
is called from the previous function

744
00:30:03,120 --> 00:30:05,919
so it downloads the additional comments

745
00:30:05,919 --> 00:30:07,360
onto the page

746
00:30:07,360 --> 00:30:11,039
the analyzer that analyzes chains would

747
00:30:11,039 --> 00:30:12,480
find it and

748
00:30:12,480 --> 00:30:13,600
look for

749
00:30:13,600 --> 00:30:15,360
all the elements in the chain and in

750
00:30:15,360 --> 00:30:18,720
dynamic crawling it's a problem

751
00:30:18,720 --> 00:30:22,399
you have some comments that is not there

752
00:30:22,399 --> 00:30:24,080
on the page

753
00:30:24,080 --> 00:30:26,240
and you'll have to download more

754
00:30:26,240 --> 00:30:29,039
but if you don't have too many comments

755
00:30:29,039 --> 00:30:31,600
you you would be able to call it

756
00:30:31,600 --> 00:30:34,159
and this is an issue for dynamics

757
00:30:34,159 --> 00:30:35,360
so

758
00:30:35,360 --> 00:30:38,240
what the analyzer is going to find

759
00:30:38,240 --> 00:30:41,279
if the code

760
00:30:41,279 --> 00:30:43,440
is

761
00:30:43,600 --> 00:30:45,918
style

762
00:30:47,919 --> 00:30:51,520
if the code is simplistic and it open

763
00:30:51,520 --> 00:30:53,840
happens in wordpress

764
00:30:53,840 --> 00:30:56,399
plugins

765
00:30:59,120 --> 00:31:01,360
and in complicated websites as well when

766
00:31:01,360 --> 00:31:03,919
the code is difficult a lot on the

767
00:31:03,919 --> 00:31:07,120
client but request is simplistic

768
00:31:07,120 --> 00:31:09,279
just faction it's pretty easy to

769
00:31:09,279 --> 00:31:11,039
calculate the arguments

770
00:31:11,039 --> 00:31:14,320
and these could be triggered with

771
00:31:14,320 --> 00:31:16,320
various complicated actions but it's

772
00:31:16,320 --> 00:31:18,640
okay for the analyzer sometimes you

773
00:31:18,640 --> 00:31:20,640
can't really call it on the on the web

774
00:31:20,640 --> 00:31:22,320
page

775
00:31:22,320 --> 00:31:24,320
we call it

776
00:31:24,320 --> 00:31:26,000
hidden functions but in fact it's that

777
00:31:26,000 --> 00:31:26,880
code

778
00:31:26,880 --> 00:31:30,080
so when it happens

779
00:31:30,399 --> 00:31:32,559
when it has to do with an authorized

780
00:31:32,559 --> 00:31:33,760
zone

781
00:31:33,760 --> 00:31:35,200
a lot of

782
00:31:35,200 --> 00:31:37,440
excess code is bundled on the page and

783
00:31:37,440 --> 00:31:38,880
sometimes

784
00:31:38,880 --> 00:31:41,519
this this bit of code has to do with the

785
00:31:41,519 --> 00:31:44,519
admin

786
00:31:46,000 --> 00:31:49,039
because we haven't had it yet right

787
00:31:49,039 --> 00:31:51,919
but probably there is authorization uh

788
00:31:51,919 --> 00:31:54,720
vulnerability and if we find those

789
00:31:54,720 --> 00:31:58,159
if we find those endpoints then we'll be

790
00:31:58,159 --> 00:32:00,880
able to do something about it

791
00:32:00,880 --> 00:32:02,799
in rendering down jira

792
00:32:02,799 --> 00:32:05,279
you also

793
00:32:05,279 --> 00:32:07,279
go through that endpoint and you could

794
00:32:07,279 --> 00:32:09,519
leak

795
00:32:11,200 --> 00:32:15,120
take away user emails

796
00:32:15,120 --> 00:32:17,120
if you don't have login you don't see it

797
00:32:17,120 --> 00:32:18,080
in

798
00:32:18,080 --> 00:32:21,200
the login you see it in javascript

799
00:32:21,200 --> 00:32:23,440
or a function that somebody forgot to

800
00:32:23,440 --> 00:32:24,399
delete

801
00:32:24,399 --> 00:32:26,880
some in some other cases crawling works

802
00:32:26,880 --> 00:32:30,799
better say request is set in a difficult

803
00:32:30,799 --> 00:32:33,519
way and it can easily be triggered by

804
00:32:33,519 --> 00:32:36,720
just pushing one button

805
00:32:37,200 --> 00:32:40,799
and here are some difficulties

806
00:32:40,840 --> 00:32:45,039
enumerated right and now the demo

807
00:32:45,039 --> 00:32:48,240
i'm not having a

808
00:32:48,320 --> 00:32:50,080
uh internet

809
00:32:50,080 --> 00:32:52,640
please use this link on your own

810
00:32:52,640 --> 00:32:53,919
you're going to

811
00:32:53,919 --> 00:32:55,120
use it

812
00:32:55,120 --> 00:32:57,840
and look at the demo

813
00:32:58,000 --> 00:33:00,399
and play with our analyzer

814
00:33:00,399 --> 00:33:02,959
experiment

815
00:33:03,120 --> 00:33:05,919
so hopefully

816
00:33:05,919 --> 00:33:07,200
it keeps working all through the

817
00:33:07,200 --> 00:33:09,519
conference i'll make it work

818
00:33:09,519 --> 00:33:12,240
to conclude

819
00:33:12,559 --> 00:33:14,399
static analysis

820
00:33:14,399 --> 00:33:16,559
uh can be more accurate when you combine

821
00:33:16,559 --> 00:33:19,760
it with dynamic analysis and a lot of

822
00:33:19,760 --> 00:33:22,640
articles mention it as well

823
00:33:22,640 --> 00:33:25,919
another point i mentioned that our

824
00:33:25,919 --> 00:33:29,600
algorithm is not validated it's not

825
00:33:29,600 --> 00:33:31,440
super scientifically correct

826
00:33:31,440 --> 00:33:33,200
but our vision

827
00:33:33,200 --> 00:33:34,799
is this

828
00:33:34,799 --> 00:33:37,440
if you don't have an existing solution

829
00:33:37,440 --> 00:33:39,679
you'd rather do something simple that

830
00:33:39,679 --> 00:33:41,600
does work

831
00:33:41,600 --> 00:33:43,679
and then

832
00:33:43,679 --> 00:33:46,720
complicate it later

833
00:33:47,279 --> 00:33:49,440
as far as endpoints and vulnerabilities

834
00:33:49,440 --> 00:33:51,360
are concerned none of the methods is a

835
00:33:51,360 --> 00:33:52,399
silver bullet

836
00:33:52,399 --> 00:33:54,720
the gs analysis is not better than

837
00:33:54,720 --> 00:33:56,720
dynamic curling it's rather a complement

838
00:33:56,720 --> 00:33:58,000
to

839
00:33:58,000 --> 00:34:00,559
dynamic running is better in some

840
00:34:00,559 --> 00:34:04,320
things in some data entry points and um

841
00:34:04,320 --> 00:34:07,279
static scanner is better in other things

842
00:34:07,279 --> 00:34:09,440
static scanner is good at searching

843
00:34:09,440 --> 00:34:11,040
endpoints

844
00:34:11,040 --> 00:34:13,280
we were surprised not to find any

845
00:34:13,280 --> 00:34:15,040
existing solution out of the box

846
00:34:15,040 --> 00:34:18,639
solution to mine endpoints

847
00:34:18,639 --> 00:34:21,440
while scanners out of the box scanners

848
00:34:21,440 --> 00:34:24,159
do have analysis of javascript code in

849
00:34:24,159 --> 00:34:25,599
web script uh

850
00:34:25,599 --> 00:34:28,159
it's gonna it would uh

851
00:34:28,159 --> 00:34:29,359
look for

852
00:34:29,359 --> 00:34:31,199
uh dom

853
00:34:31,199 --> 00:34:34,399
and and stuff but not the end points

854
00:34:34,399 --> 00:34:36,159
to

855
00:34:36,159 --> 00:34:38,719
in fact you basically want to use both

856
00:34:38,719 --> 00:34:39,918
the

857
00:34:39,918 --> 00:34:42,079
scanner the static scanner and the

858
00:34:42,079 --> 00:34:44,060
crawling

859
00:34:44,060 --> 00:34:45,199
[Music]

860
00:34:45,199 --> 00:34:47,599
with this i would end my talk

861
00:34:47,599 --> 00:34:49,599
and i'd like to use this opportunity to

862
00:34:49,599 --> 00:34:52,560
thank the audience and this is

863
00:34:52,560 --> 00:34:56,000
the link that you had earlier and please

864
00:34:56,000 --> 00:34:57,760
play ctf with us

865
00:34:57,760 --> 00:35:02,040
i'm here representing bushmickers

866
00:35:08,160 --> 00:35:11,359
and i can see you have some questions

867
00:35:11,359 --> 00:35:13,520
please use the mic

868
00:35:13,520 --> 00:35:15,920
thank you danila this is really cool and

869
00:35:15,920 --> 00:35:17,119
interesting

870
00:35:17,119 --> 00:35:19,760
my question is this

871
00:35:19,760 --> 00:35:23,359
how about open sourcing your solution

872
00:35:23,359 --> 00:35:25,599
and use integration of your search

873
00:35:25,599 --> 00:35:27,040
engine

874
00:35:27,040 --> 00:35:29,119
endpoint search engine

875
00:35:29,119 --> 00:35:32,320
into the existing dynamic analysis uh

876
00:35:32,320 --> 00:35:34,960
like a plug-in probe suite or something

877
00:35:34,960 --> 00:35:37,040
or a browse browser extension for that

878
00:35:37,040 --> 00:35:39,760
matter thank you brilliant question

879
00:35:39,760 --> 00:35:42,720
well first off indeed i want to

880
00:35:42,720 --> 00:35:45,599
make it into open source i wanted it but

881
00:35:45,599 --> 00:35:47,599
not yet

882
00:35:47,599 --> 00:35:50,800
i i haven't done it yet but it's my plan

883
00:35:50,800 --> 00:35:52,800
as far as integration is concerned we

884
00:35:52,800 --> 00:35:54,800
experiment integration

885
00:35:54,800 --> 00:35:56,880
uh with

886
00:35:56,880 --> 00:35:58,720
the one you mentioned

887
00:35:58,720 --> 00:35:59,760
but not

888
00:35:59,760 --> 00:36:02,560
uh not duplicate we we had the idea of a

889
00:36:02,560 --> 00:36:05,200
plugin but we haven't realized it yet

890
00:36:05,200 --> 00:36:07,599
we'll already use a managed browser for

891
00:36:07,599 --> 00:36:09,599
dynamic analysis for that but it's not

892
00:36:09,599 --> 00:36:11,990
exactly your plugin

893
00:36:11,990 --> 00:36:13,280
[Music]

894
00:36:13,280 --> 00:36:16,960
say you want i mean what i mean is

895
00:36:16,960 --> 00:36:19,599
it's something like community collecting

896
00:36:19,599 --> 00:36:22,240
the end points rather than you know yes

897
00:36:22,240 --> 00:36:24,480
yeah i i totally i totally agree with

898
00:36:24,480 --> 00:36:27,040
that and as soon as i have it open

899
00:36:27,040 --> 00:36:28,079
source

900
00:36:28,079 --> 00:36:31,119
it would be great thank you thank you

901
00:36:31,119 --> 00:36:33,280
i can see a question from there yeah i

902
00:36:33,280 --> 00:36:36,720
already have a mic where i yeah i'm here

903
00:36:36,720 --> 00:36:37,680
thank you

904
00:36:37,680 --> 00:36:40,160
brilliant presentation

905
00:36:40,160 --> 00:36:43,359
i was trying to solve a similar issue

906
00:36:43,359 --> 00:36:45,440
so i'm going to have

907
00:36:45,440 --> 00:36:48,800
several questions on them

908
00:36:48,800 --> 00:36:51,599
on on things that were difficult for me

909
00:36:51,599 --> 00:36:55,119
so my question number one

910
00:36:55,119 --> 00:36:57,760
what is the capacity

911
00:36:57,760 --> 00:36:59,760
uh number of

912
00:36:59,760 --> 00:37:02,320
websites per minute

913
00:37:02,320 --> 00:37:05,599
great question thank you

914
00:37:05,599 --> 00:37:08,560
usually it would take from

915
00:37:08,560 --> 00:37:10,480
20 25 seconds

916
00:37:10,480 --> 00:37:12,800
all the way to several minutes

917
00:37:12,800 --> 00:37:15,599
some websites would force the analyzer

918
00:37:15,599 --> 00:37:17,520
to go into loop

919
00:37:17,520 --> 00:37:20,079
but we managed to do it in such a way

920
00:37:20,079 --> 00:37:23,680
that it would work for not more than one

921
00:37:23,680 --> 00:37:25,520
minute or minute and a half

922
00:37:25,520 --> 00:37:27,200
per site

923
00:37:27,200 --> 00:37:29,599
one stage we nearly we really want the

924
00:37:29,599 --> 00:37:31,839
page to be downloaded

925
00:37:31,839 --> 00:37:34,160
there's a timeout by default it's trim

926
00:37:34,160 --> 00:37:36,079
on it but usually the web page is

927
00:37:36,079 --> 00:37:38,960
downloaded faster

928
00:37:42,880 --> 00:37:45,520
i'm going to pronounce a swear word a

929
00:37:45,520 --> 00:37:48,079
word websocket how you handle webs uh

930
00:37:48,079 --> 00:37:50,480
websocket

931
00:37:50,480 --> 00:37:53,520
what you do about it

932
00:37:54,400 --> 00:37:56,240
how you go about them

933
00:37:56,240 --> 00:37:58,400
we don't support them

934
00:37:58,400 --> 00:38:00,240
it's actually a very interesting idea

935
00:38:00,240 --> 00:38:02,000
but it's not within our scope at this

936
00:38:02,000 --> 00:38:03,599
point

937
00:38:03,599 --> 00:38:07,200
it's just that websockets can also been

938
00:38:07,200 --> 00:38:10,640
uh data mined all the way to

939
00:38:10,640 --> 00:38:12,480
doing a dos attack absolutely you're

940
00:38:12,480 --> 00:38:14,240
absolutely right

941
00:38:14,240 --> 00:38:16,079
and it's an interesting task

942
00:38:16,079 --> 00:38:17,599
but it's not something that we're

943
00:38:17,599 --> 00:38:19,119
dealing with right now

944
00:38:19,119 --> 00:38:20,480
i'm uh

945
00:38:20,480 --> 00:38:22,640
not say here calling to dos uh

946
00:38:22,640 --> 00:38:23,920
websockets

947
00:38:23,920 --> 00:38:26,079
yeah i i know

948
00:38:26,079 --> 00:38:29,599
and another kind of scary word uh

949
00:38:29,599 --> 00:38:30,839
webassemble

950
00:38:30,839 --> 00:38:34,240
websites no not yet we don't do anything

951
00:38:34,240 --> 00:38:35,200
about it

952
00:38:35,200 --> 00:38:37,200
look uh how about

953
00:38:37,200 --> 00:38:40,400
giving an opportunity to um

954
00:38:40,400 --> 00:38:41,839
because you seem to have a lot of

955
00:38:41,839 --> 00:38:44,800
questions if you don't mind let's take

956
00:38:44,800 --> 00:38:46,880
it to the margins of the events if

957
00:38:46,880 --> 00:38:48,720
you're interested you actually do

958
00:38:48,720 --> 00:38:51,920
approach me i'm i'm an open guy i can

959
00:38:51,920 --> 00:38:54,079
answer all your questions thank you yes

960
00:38:54,079 --> 00:38:56,640
i can see

961
00:38:57,119 --> 00:39:00,680
a hand over there

962
00:39:00,880 --> 00:39:03,920
thank you very interesting presentation

963
00:39:03,920 --> 00:39:06,079
it might sound silly but my question is

964
00:39:06,079 --> 00:39:08,640
this i'm interested to know the logic of

965
00:39:08,640 --> 00:39:11,759
you working with redirect

966
00:39:13,599 --> 00:39:16,240
do you look at it as as a as

967
00:39:16,240 --> 00:39:17,119
a

968
00:39:17,119 --> 00:39:18,420
separate instance

969
00:39:18,420 --> 00:39:19,920
[Music]

970
00:39:19,920 --> 00:39:21,359
okay so

971
00:39:21,359 --> 00:39:24,000
when you download a web page

972
00:39:24,000 --> 00:39:26,960
if analyzer wants to analyze a web page

973
00:39:26,960 --> 00:39:29,440
it opens if it's redirects then it it

974
00:39:29,440 --> 00:39:32,480
would go through the web pages and

975
00:39:32,480 --> 00:39:34,960
as far as endpoints are concerned we

976
00:39:34,960 --> 00:39:37,520
mine the initial request

977
00:39:37,520 --> 00:39:40,160
in static analysis we don't really know

978
00:39:40,160 --> 00:39:41,599
whether or not redirect is going to

979
00:39:41,599 --> 00:39:43,119
happen

980
00:39:43,119 --> 00:39:45,119
actually

981
00:39:45,119 --> 00:39:46,480
whether or not

982
00:39:46,480 --> 00:39:49,839
it's best to be in styles or not

983
00:39:49,839 --> 00:39:51,839
i mean

984
00:39:51,839 --> 00:39:54,160
when we do analysis we don't know

985
00:39:54,160 --> 00:39:56,560
anything about rekt whatsoever and we'll

986
00:39:56,560 --> 00:39:58,560
look just at the initial one but

987
00:39:58,560 --> 00:40:00,800
redirect can be part of endpoints don't

988
00:40:00,800 --> 00:40:01,760
you agree

989
00:40:01,760 --> 00:40:05,280
good one yeah to share

990
00:40:05,280 --> 00:40:07,520
speaking of endpoint definition good

991
00:40:07,520 --> 00:40:10,480
good interesting

992
00:40:10,480 --> 00:40:12,240
and follow up

993
00:40:12,240 --> 00:40:14,319
jspc

994
00:40:14,319 --> 00:40:16,800
jpc

995
00:40:17,520 --> 00:40:21,759
uh can you do cherry pc from browser

996
00:40:22,240 --> 00:40:26,720
yes you can do it now

997
00:40:28,880 --> 00:40:30,880
and it would be similar to websocket

998
00:40:30,880 --> 00:40:33,200
communication same level you know just

999
00:40:33,200 --> 00:40:35,520
as a follow-up

1000
00:40:35,520 --> 00:40:39,680
so jeremy works on top of each

1001
00:40:39,680 --> 00:40:41,359
specie

1002
00:40:41,359 --> 00:40:43,760
right and we don't know anything about

1003
00:40:43,760 --> 00:40:48,079
it yeah okay for laser right

1004
00:40:49,839 --> 00:40:51,520
a comment

1005
00:40:51,520 --> 00:40:54,160
is it g rpc or

1006
00:40:54,160 --> 00:40:55,839
okay anyway

1007
00:40:55,839 --> 00:40:58,400
we haven't looked at it yet

1008
00:40:58,400 --> 00:41:00,640
can't tell you anything

1009
00:41:00,640 --> 00:41:04,040
right right

1010
00:41:06,079 --> 00:41:08,240
okay it's time for you to pick the best

1011
00:41:08,240 --> 00:41:12,240
question oh tough choice

1012
00:41:12,880 --> 00:41:16,160
uh this guy the guy in the green shirt

1013
00:41:16,160 --> 00:41:18,640
great thank you

1014
00:41:18,640 --> 00:41:20,510
thank you thank you very much

1015
00:41:20,510 --> 00:41:25,459
[Applause]

