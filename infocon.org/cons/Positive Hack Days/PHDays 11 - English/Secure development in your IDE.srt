1
00:00:00,060 --> 00:00:03,520
[Applause]

2
00:00:03,520 --> 00:00:05,200
hello everyone

3
00:00:05,200 --> 00:00:08,480
my name is andrei radusoff i'm a lead

4
00:00:08,480 --> 00:00:09,519
developer

5
00:00:09,519 --> 00:00:13,200
in the pt application inspector

6
00:00:13,200 --> 00:00:16,079
we develop plugins for the ide and

7
00:00:16,079 --> 00:00:19,439
that's what i'll be talking about

8
00:00:19,439 --> 00:00:21,760
okay

9
00:00:21,920 --> 00:00:25,439
here is the agenda for my presentation

10
00:00:25,439 --> 00:00:27,920
i'll start with a few words

11
00:00:27,920 --> 00:00:28,880
on

12
00:00:28,880 --> 00:00:32,558
secure development why do we need it

13
00:00:32,558 --> 00:00:34,640
and how plugins help to

14
00:00:34,640 --> 00:00:36,480
make it secure

15
00:00:36,480 --> 00:00:38,719
then we'll talk about some technical

16
00:00:38,719 --> 00:00:40,160
details

17
00:00:40,160 --> 00:00:42,879
i'll share with you

18
00:00:42,879 --> 00:00:46,960
some live hacks on developing plugins

19
00:00:46,960 --> 00:00:48,079
well

20
00:00:48,079 --> 00:00:50,399
you might be quite inspired to develop

21
00:00:50,399 --> 00:00:51,680
your own plugins following my

22
00:00:51,680 --> 00:00:53,120
presentation

23
00:00:53,120 --> 00:00:54,960
and then

24
00:00:54,960 --> 00:00:58,480
i will share with you our results

25
00:00:58,480 --> 00:00:59,440
okay

26
00:00:59,440 --> 00:01:03,359
let's start with the problem definition

27
00:01:03,359 --> 00:01:05,438
i believe that many of you have seen

28
00:01:05,438 --> 00:01:06,640
this

29
00:01:06,640 --> 00:01:09,920
picture so this is the life cycle for

30
00:01:09,920 --> 00:01:13,200
software development

31
00:01:13,200 --> 00:01:14,720
in this case

32
00:01:14,720 --> 00:01:15,840
we

33
00:01:15,840 --> 00:01:17,759
share with you the way we do it in our

34
00:01:17,759 --> 00:01:19,439
company

35
00:01:19,439 --> 00:01:22,320
well the secure development approach

36
00:01:22,320 --> 00:01:24,240
it means that we should validate

37
00:01:24,240 --> 00:01:26,799
vulnerabilities at every development

38
00:01:26,799 --> 00:01:28,720
stage

39
00:01:28,720 --> 00:01:31,759
here we are highlighting two stages

40
00:01:31,759 --> 00:01:34,240
developing

41
00:01:34,240 --> 00:01:37,759
and building and testing

42
00:01:39,200 --> 00:01:42,399
so that's what we are interested in

43
00:01:42,399 --> 00:01:43,920
and

44
00:01:43,920 --> 00:01:46,159
i believe that developing will be even

45
00:01:46,159 --> 00:01:48,159
more exciting

46
00:01:48,159 --> 00:01:49,200
why so

47
00:01:49,200 --> 00:01:50,960
let's have a look at the shift left

48
00:01:50,960 --> 00:01:53,439
concept

49
00:01:53,439 --> 00:01:56,719
the idea is pretty straightforward

50
00:01:56,719 --> 00:01:58,320
the sooner you discover the

51
00:01:58,320 --> 00:02:01,119
vulnerability

52
00:02:01,759 --> 00:02:06,560
the cheaper it will be to rectify

53
00:02:06,560 --> 00:02:09,038
the time to be invested by the

54
00:02:09,038 --> 00:02:10,878
developers and the rest of the team will

55
00:02:10,878 --> 00:02:13,680
be reduced and time is money

56
00:02:13,680 --> 00:02:15,520
so

57
00:02:15,520 --> 00:02:19,120
you can see the dollars here

58
00:02:20,319 --> 00:02:23,839
well recognizing the problem

59
00:02:25,120 --> 00:02:26,800
will not

60
00:02:26,800 --> 00:02:28,239
tell us

61
00:02:28,239 --> 00:02:30,319
what to do

62
00:02:30,319 --> 00:02:31,599
okay

63
00:02:31,599 --> 00:02:33,200
we can say that we want to fix

64
00:02:33,200 --> 00:02:35,519
vulnerabilities at the development stage

65
00:02:35,519 --> 00:02:37,200
that's nice but they are not going to

66
00:02:37,200 --> 00:02:39,519
fix themselves

67
00:02:39,519 --> 00:02:42,160
there are some reasons behind it

68
00:02:42,160 --> 00:02:43,360
number one

69
00:02:43,360 --> 00:02:45,840
the developers

70
00:02:45,840 --> 00:02:48,319
are not generally interested in fixing

71
00:02:48,319 --> 00:02:51,040
vulnerabilities and they believe that

72
00:02:51,040 --> 00:02:53,200
this is something beyond

73
00:02:53,200 --> 00:02:55,680
their area of responsibility and this is

74
00:02:55,680 --> 00:02:57,920
more like administrative load for the

75
00:02:57,920 --> 00:03:00,480
security guys elsewhere

76
00:03:00,480 --> 00:03:04,000
we can tell them quite rightly

77
00:03:04,000 --> 00:03:05,440
that

78
00:03:05,440 --> 00:03:07,440
so when we talk

79
00:03:07,440 --> 00:03:09,200
in this by light way

80
00:03:09,200 --> 00:03:11,599
we can share our personal experience

81
00:03:11,599 --> 00:03:13,280
with them

82
00:03:13,280 --> 00:03:15,280
oh that's my vision at least

83
00:03:15,280 --> 00:03:17,120
before i joined

84
00:03:17,120 --> 00:03:18,640
information security

85
00:03:18,640 --> 00:03:20,400
i wouldn't care

86
00:03:20,400 --> 00:03:22,159
about any

87
00:03:22,159 --> 00:03:23,840
project vulnerabilities but i believe

88
00:03:23,840 --> 00:03:25,680
that i was quite a good developer at

89
00:03:25,680 --> 00:03:26,470
that time

90
00:03:26,470 --> 00:03:28,480
[Music]

91
00:03:28,480 --> 00:03:29,599
okay

92
00:03:29,599 --> 00:03:32,400
thus we decided that making

93
00:03:32,400 --> 00:03:34,720
secure development popular is a good

94
00:03:34,720 --> 00:03:36,000
idea

95
00:03:36,000 --> 00:03:37,519
you wanted to be

96
00:03:37,519 --> 00:03:39,440
instilled into the culture of

97
00:03:39,440 --> 00:03:42,000
development

98
00:03:43,840 --> 00:03:47,440
a good way to do it

99
00:03:47,440 --> 00:03:49,120
would be plugins

100
00:03:49,120 --> 00:03:51,040
why so

101
00:03:51,040 --> 00:03:53,120
number one

102
00:03:53,120 --> 00:03:55,840
plugins are exactly designed to be

103
00:03:55,840 --> 00:03:57,599
integrated into the development

104
00:03:57,599 --> 00:04:00,599
environment

105
00:04:05,439 --> 00:04:07,360
so any tool

106
00:04:07,360 --> 00:04:11,360
any convenient tool is a good thing

107
00:04:12,480 --> 00:04:16,000
if it is somewhere in another tool

108
00:04:16,000 --> 00:04:17,918
we know and we don't need to switch

109
00:04:17,918 --> 00:04:20,560
between context to use it

110
00:04:20,560 --> 00:04:23,440
this makes it even better and reduces

111
00:04:23,440 --> 00:04:26,240
the threshold

112
00:04:26,240 --> 00:04:28,479
another thing is that

113
00:04:28,479 --> 00:04:31,440
this makes vulnerabilities more tangible

114
00:04:31,440 --> 00:04:33,440
if you deal with them

115
00:04:33,440 --> 00:04:35,440
from within the ide

116
00:04:35,440 --> 00:04:37,440
why so

117
00:04:37,440 --> 00:04:38,720
so

118
00:04:38,720 --> 00:04:39,759
you can

119
00:04:39,759 --> 00:04:40,880
see

120
00:04:40,880 --> 00:04:44,320
the place where the vulnerability

121
00:04:44,320 --> 00:04:46,720
is manifest in itself

122
00:04:46,720 --> 00:04:49,040
we can see how it can be exploited how

123
00:04:49,040 --> 00:04:50,639
it can be fixed

124
00:04:50,639 --> 00:04:52,960
and how you can verify

125
00:04:52,960 --> 00:04:55,040
that it has been fixed this makes the

126
00:04:55,040 --> 00:04:56,400
whole process

127
00:04:56,400 --> 00:04:58,720
more exciting

128
00:04:58,720 --> 00:05:00,400
the third

129
00:05:00,400 --> 00:05:02,960
bullet point

130
00:05:02,960 --> 00:05:06,160
well i believe it's quite important

131
00:05:06,160 --> 00:05:07,120
to

132
00:05:07,120 --> 00:05:11,479
make secure development more popular

133
00:05:12,800 --> 00:05:14,560
so we

134
00:05:14,560 --> 00:05:17,039
show vulnerabilities when integrated in

135
00:05:17,039 --> 00:05:20,160
ide just like syntax mistakes the

136
00:05:20,160 --> 00:05:22,160
compiler mistakes

137
00:05:22,160 --> 00:05:25,680
and interpreting mistakes this makes uh

138
00:05:25,680 --> 00:05:30,720
this vulnerabilities uh more prominent

139
00:05:30,800 --> 00:05:32,080
okay

140
00:05:32,080 --> 00:05:34,800
i have talked about the why now

141
00:05:34,800 --> 00:05:38,880
let's talk about the process

142
00:05:38,880 --> 00:05:41,600
how we have developed them

143
00:05:41,600 --> 00:05:43,120
and how

144
00:05:43,120 --> 00:05:44,880
technically speaking

145
00:05:44,880 --> 00:05:48,160
we want them to work

146
00:05:48,160 --> 00:05:50,479
i'm not going to talk about the

147
00:05:50,479 --> 00:05:53,280
stat analysis

148
00:05:53,280 --> 00:05:56,000
but rather we'll be talking about

149
00:05:56,000 --> 00:05:59,600
the plugins development

150
00:06:02,479 --> 00:06:04,080
okay

151
00:06:04,080 --> 00:06:06,400
let's think about what we want from

152
00:06:06,400 --> 00:06:07,840
plugins

153
00:06:07,840 --> 00:06:10,479
so we want to make secure development

154
00:06:10,479 --> 00:06:12,720
popular

155
00:06:12,720 --> 00:06:16,560
we want everyone to fix

156
00:06:16,639 --> 00:06:18,720
the vulnerabilities

157
00:06:18,720 --> 00:06:20,720
so this means that we need to cover as

158
00:06:20,720 --> 00:06:24,160
many developers as we can

159
00:06:27,840 --> 00:06:31,280
this means we need to develop

160
00:06:31,280 --> 00:06:35,840
extensions for various ides

161
00:06:36,400 --> 00:06:38,000
and this should be

162
00:06:38,000 --> 00:06:40,160
as straightforward as possible

163
00:06:40,160 --> 00:06:42,400
we should have a

164
00:06:42,400 --> 00:06:44,240
unified code base and the second

165
00:06:44,240 --> 00:06:47,360
important thing is the

166
00:06:47,360 --> 00:06:50,240
cross cross-platform requirement

167
00:06:50,240 --> 00:06:53,520
i believe it's quite self-explanatory

168
00:06:53,520 --> 00:06:56,000
[Music]

169
00:06:56,000 --> 00:06:57,520
we know that all the developers are

170
00:06:57,520 --> 00:06:59,520
using various

171
00:06:59,520 --> 00:07:03,120
os's so to reduce the threshold we need

172
00:07:03,120 --> 00:07:04,160
to

173
00:07:04,160 --> 00:07:04,880
be

174
00:07:04,880 --> 00:07:06,319
friendly to them

175
00:07:06,319 --> 00:07:08,240
and the third important thing

176
00:07:08,240 --> 00:07:09,919
is

177
00:07:09,919 --> 00:07:12,960
easy installation

178
00:07:13,599 --> 00:07:15,840
if we have somebody who is not well

179
00:07:15,840 --> 00:07:19,280
motivated to fix vulnerabilities and to

180
00:07:19,280 --> 00:07:21,039
do all this stuff

181
00:07:21,039 --> 00:07:23,199
and if these guys

182
00:07:23,199 --> 00:07:26,160
face any challenge when trying to

183
00:07:26,160 --> 00:07:28,479
tune it and start doing it they will

184
00:07:28,479 --> 00:07:30,400
just forget about it

185
00:07:30,400 --> 00:07:33,919
so it should be straightforward

186
00:07:39,919 --> 00:07:41,840
having discussed all that

187
00:07:41,840 --> 00:07:44,879
we came up with this solution for the

188
00:07:44,879 --> 00:07:46,960
plugins so we start

189
00:07:46,960 --> 00:07:49,360
from the right with the client component

190
00:07:49,360 --> 00:07:52,000
to it so we see two blocks here the

191
00:07:52,000 --> 00:07:55,520
visual studio code extension and the

192
00:07:55,520 --> 00:07:59,120
intellij idea plugin we have picked them

193
00:07:59,120 --> 00:08:01,360
for a reason

194
00:08:01,360 --> 00:08:02,479
they

195
00:08:02,479 --> 00:08:04,879
match our requirement

196
00:08:04,879 --> 00:08:06,800
i mean we cover

197
00:08:06,800 --> 00:08:09,840
a lot of developers and environments

198
00:08:09,840 --> 00:08:12,879
why so you can have one extension for

199
00:08:12,879 --> 00:08:17,680
the intellij idea and it will be good

200
00:08:17,840 --> 00:08:19,919
for the whole

201
00:08:19,919 --> 00:08:22,240
id

202
00:08:22,960 --> 00:08:23,759
in the

203
00:08:23,759 --> 00:08:25,199
j family

204
00:08:25,199 --> 00:08:26,560
and

205
00:08:26,560 --> 00:08:29,199
so we can see here the followers of

206
00:08:29,199 --> 00:08:31,120
typescript and java

207
00:08:31,120 --> 00:08:34,320
so it is good for various

208
00:08:34,320 --> 00:08:35,839
tasks

209
00:08:35,839 --> 00:08:38,479
if you look at this extensions you might

210
00:08:38,479 --> 00:08:42,159
think that they don't have a lot of

211
00:08:42,159 --> 00:08:43,839
shared code base

212
00:08:43,839 --> 00:08:45,600
and here we have another thing to help

213
00:08:45,600 --> 00:08:46,800
us and this is

214
00:08:46,800 --> 00:08:47,760
the

215
00:08:47,760 --> 00:08:50,959
multi-platform client library i'll talk

216
00:08:50,959 --> 00:08:52,160
about it

217
00:08:52,160 --> 00:08:55,200
later and the third element here

218
00:08:55,200 --> 00:08:58,000
is the analyzer it has two components

219
00:08:58,000 --> 00:09:01,519
the net app and the analysis

220
00:09:01,519 --> 00:09:04,320
module the net app is

221
00:09:04,320 --> 00:09:07,279
designed to orchestrate the analysis

222
00:09:07,279 --> 00:09:10,000
modules they have some

223
00:09:10,000 --> 00:09:12,800
inbuilt logic and i have a local layer

224
00:09:12,800 --> 00:09:16,480
with the local database

225
00:09:16,480 --> 00:09:19,040
the dotnet app

226
00:09:19,040 --> 00:09:20,560
is launched

227
00:09:20,560 --> 00:09:22,560
as a

228
00:09:22,560 --> 00:09:24,800
sub process and it deals with the

229
00:09:24,800 --> 00:09:28,640
plugins with the socket transfer

230
00:09:28,640 --> 00:09:31,920
let's have a look

231
00:09:32,480 --> 00:09:35,360
at the message

232
00:09:35,680 --> 00:09:38,640
we exchange between the plugins and the

233
00:09:38,640 --> 00:09:40,880
backend the analyzer

234
00:09:40,880 --> 00:09:42,880
there are three components to it

235
00:09:42,880 --> 00:09:45,040
we have the header

236
00:09:45,040 --> 00:09:48,160
the length of the message

237
00:09:48,160 --> 00:09:51,200
and the content of the message

238
00:09:51,200 --> 00:09:53,360
in the header

239
00:09:53,360 --> 00:09:55,120
we have the type

240
00:09:55,120 --> 00:09:56,480
id

241
00:09:56,480 --> 00:09:59,760
and the format

242
00:10:00,880 --> 00:10:02,000
this means

243
00:10:02,000 --> 00:10:04,800
that

244
00:10:04,800 --> 00:10:06,720
running

245
00:10:06,720 --> 00:10:08,959
the interaction protocol

246
00:10:08,959 --> 00:10:10,800
through the sockets and distillation for

247
00:10:10,800 --> 00:10:12,320
every plugin

248
00:10:12,320 --> 00:10:13,600
would be

249
00:10:13,600 --> 00:10:14,959
an uphill job

250
00:10:14,959 --> 00:10:16,000
that's why

251
00:10:16,000 --> 00:10:17,680
we are using

252
00:10:17,680 --> 00:10:19,279
this library

253
00:10:19,279 --> 00:10:21,440
which is developed with the

254
00:10:21,440 --> 00:10:24,959
multi platform code multi-platform what

255
00:10:24,959 --> 00:10:26,399
makes it good

256
00:10:26,399 --> 00:10:28,399
well we can

257
00:10:28,399 --> 00:10:31,360
build it into js describing the types

258
00:10:31,360 --> 00:10:34,160
and packaging to the npm package

259
00:10:34,160 --> 00:10:35,680
and we can also

260
00:10:35,680 --> 00:10:39,279
do it for the dvm jar artifact using

261
00:10:39,279 --> 00:10:41,360
kotlin

262
00:10:41,360 --> 00:10:43,440
this library

263
00:10:43,440 --> 00:10:44,839
we

264
00:10:44,839 --> 00:10:48,480
have models and their contracts

265
00:10:48,480 --> 00:10:52,000
for the protocol interaction we need

266
00:10:52,000 --> 00:10:55,440
the socket usage principles and some

267
00:10:55,440 --> 00:10:56,320
shared

268
00:10:56,320 --> 00:10:59,440
utilities which are used

269
00:10:59,440 --> 00:11:02,079
for both plugins

270
00:11:02,079 --> 00:11:05,839
so this is a kind of a client library

271
00:11:05,839 --> 00:11:06,640
but

272
00:11:06,640 --> 00:11:07,440
you

273
00:11:07,440 --> 00:11:08,560
know that

274
00:11:08,560 --> 00:11:11,360
we will definitely have a fly in the

275
00:11:11,360 --> 00:11:14,399
ointment we cannot avoid it cutler

276
00:11:14,399 --> 00:11:17,519
multiplatform has a lot of issues

277
00:11:17,519 --> 00:11:20,079
and the major one

278
00:11:20,079 --> 00:11:22,640
stranger than it might seem

279
00:11:22,640 --> 00:11:25,360
is the ds

280
00:11:25,360 --> 00:11:29,920
build it doesn't support all we need

281
00:11:29,920 --> 00:11:32,800
for instance catlin offers enams cannot

282
00:11:32,800 --> 00:11:35,040
be built in js

283
00:11:35,040 --> 00:11:37,760
we cannot deal with the asynchronous

284
00:11:37,760 --> 00:11:39,920
functions the suspended ones so we can

285
00:11:39,920 --> 00:11:44,959
build them in js but we cannot use them

286
00:11:44,959 --> 00:11:48,000
in the client app

287
00:11:48,000 --> 00:11:50,960
and sometimes there are cases like that

288
00:11:50,960 --> 00:11:53,600
[Music]

289
00:11:53,600 --> 00:11:57,600
we have a popular library for the

290
00:11:57,600 --> 00:12:00,399
civilization the kotlin library and it

291
00:12:00,399 --> 00:12:02,959
has a generic method with

292
00:12:02,959 --> 00:12:05,120
deserialization

293
00:12:05,120 --> 00:12:05,920
and

294
00:12:05,920 --> 00:12:08,959
so we visualize the line into an object

295
00:12:08,959 --> 00:12:11,760
and the signature is a line and a

296
00:12:11,760 --> 00:12:15,120
refiner type

297
00:12:15,120 --> 00:12:17,440
and this is something we cannot export

298
00:12:17,440 --> 00:12:19,360
into js

299
00:12:19,360 --> 00:12:22,320
and if we use

300
00:12:22,320 --> 00:12:24,480
the dissolation method

301
00:12:24,480 --> 00:12:27,200
somewhere from this library

302
00:12:27,200 --> 00:12:29,440
so the signatures will change and will

303
00:12:29,440 --> 00:12:32,639
not be able to export it to js

304
00:12:32,639 --> 00:12:35,519
and this caused well

305
00:12:35,519 --> 00:12:37,680
some

306
00:12:37,680 --> 00:12:40,800
issues and we had the visualize the

307
00:12:40,800 --> 00:12:43,279
bullying uh to solve the problem so this

308
00:12:43,279 --> 00:12:46,079
was a kind of a makeshift solution

309
00:12:46,079 --> 00:12:48,880
and the third thing

310
00:12:48,880 --> 00:12:51,040
is

311
00:12:51,040 --> 00:12:53,279
easy installation

312
00:12:53,279 --> 00:12:55,680
and spreading well installation and

313
00:12:55,680 --> 00:12:56,880
spreading

314
00:12:56,880 --> 00:13:00,320
this issue can be split into two parts

315
00:13:00,320 --> 00:13:01,680
number one

316
00:13:01,680 --> 00:13:02,480
if

317
00:13:02,480 --> 00:13:04,959
all the functions

318
00:13:04,959 --> 00:13:06,800
you want to share

319
00:13:06,800 --> 00:13:09,200
are there in the client part so that's

320
00:13:09,200 --> 00:13:11,279
scenario one

321
00:13:11,279 --> 00:13:14,240
and in this case is uh pretty easy

322
00:13:14,240 --> 00:13:16,560
and you can just

323
00:13:16,560 --> 00:13:18,959
send the plugins to the market and be

324
00:13:18,959 --> 00:13:22,320
happy and the second scenario

325
00:13:22,320 --> 00:13:25,040
is like that you have an analyzer

326
00:13:25,040 --> 00:13:25,839
or

327
00:13:25,839 --> 00:13:28,160
a utility you need to download

328
00:13:28,160 --> 00:13:29,600
it's pretty

329
00:13:29,600 --> 00:13:31,760
big you cannot package it

330
00:13:31,760 --> 00:13:34,639
into the add-on and there are several

331
00:13:34,639 --> 00:13:39,040
things to cope with this problem

332
00:13:39,120 --> 00:13:41,040
one way to do it

333
00:13:41,040 --> 00:13:44,880
you want the user to be in charge

334
00:13:44,880 --> 00:13:47,360
and the user will have to download the

335
00:13:47,360 --> 00:13:48,800
utility

336
00:13:48,800 --> 00:13:52,399
to install it to position it somewhere

337
00:13:52,399 --> 00:13:53,120
to

338
00:13:53,120 --> 00:13:56,720
set the configs so the user is likely to

339
00:13:56,720 --> 00:13:59,519
behave the way you can see it in the

340
00:13:59,519 --> 00:14:02,839
picture now

341
00:14:03,199 --> 00:14:06,079
because well we know that they are not

342
00:14:06,079 --> 00:14:08,240
well motivated and the second thing is

343
00:14:08,240 --> 00:14:11,920
the installer the installer is a

344
00:14:11,920 --> 00:14:12,720
good

345
00:14:12,720 --> 00:14:14,000
a good option

346
00:14:14,000 --> 00:14:17,199
but there are several issues here

347
00:14:17,199 --> 00:14:18,800
you need to

348
00:14:18,800 --> 00:14:20,639
code the installer

349
00:14:20,639 --> 00:14:21,839
you need to

350
00:14:21,839 --> 00:14:23,920
support it and test it for various

351
00:14:23,920 --> 00:14:26,800
operating systems

352
00:14:26,800 --> 00:14:27,920
and

353
00:14:27,920 --> 00:14:30,560
spreading it is not that easy we cannot

354
00:14:30,560 --> 00:14:32,880
just upload it to the market

355
00:14:32,880 --> 00:14:35,440
we need to get the extension from

356
00:14:35,440 --> 00:14:36,639
somewhere

357
00:14:36,639 --> 00:14:37,760
then the

358
00:14:37,760 --> 00:14:39,920
installer

359
00:14:39,920 --> 00:14:41,199
all we need to

360
00:14:41,199 --> 00:14:43,360
share the installer forgetting about the

361
00:14:43,360 --> 00:14:44,639
market

362
00:14:44,639 --> 00:14:46,800
and the third

363
00:14:46,800 --> 00:14:48,160
option

364
00:14:48,160 --> 00:14:50,399
is to

365
00:14:50,399 --> 00:14:51,199
make

366
00:14:51,199 --> 00:14:53,600
the extension in charge

367
00:14:53,600 --> 00:14:56,480
of spreading and installation

368
00:14:56,480 --> 00:14:57,360
for it

369
00:14:57,360 --> 00:14:59,360
to check whether the utility is

370
00:14:59,360 --> 00:15:02,000
available to check the versions

371
00:15:02,000 --> 00:15:04,639
and if it is there

372
00:15:04,639 --> 00:15:05,839
oh oh

373
00:15:05,839 --> 00:15:08,079
if it is not there i mean it should be

374
00:15:08,079 --> 00:15:12,199
downloaded and installed

375
00:15:14,050 --> 00:15:17,260
[Music]

376
00:15:17,279 --> 00:15:21,600
now let's talk about some general cases

377
00:15:21,600 --> 00:15:24,639
you will inevitably face this

378
00:15:24,639 --> 00:15:25,440
when

379
00:15:25,440 --> 00:15:27,839
you develop some software okay let's

380
00:15:27,839 --> 00:15:31,600
talk about test coverage

381
00:15:33,199 --> 00:15:35,680
well here you can see

382
00:15:35,680 --> 00:15:36,800
two things

383
00:15:36,800 --> 00:15:41,719
the unit tests and the integration tests

384
00:15:42,639 --> 00:15:45,120
well unit tests are here

385
00:15:45,120 --> 00:15:47,600
to say that this is not the best option

386
00:15:47,600 --> 00:15:50,000
for extensions

387
00:15:50,000 --> 00:15:52,320
you can cover some

388
00:15:52,320 --> 00:15:55,600
isolated pieces of the business logic

389
00:15:55,600 --> 00:15:57,279
but if you want to cover

390
00:15:57,279 --> 00:15:59,199
the extension properly with the unit

391
00:15:59,199 --> 00:16:02,639
tests this becomes a kind of a process

392
00:16:02,639 --> 00:16:06,560
to develop the mark of the whole ide

393
00:16:06,560 --> 00:16:09,120
functionality and the second thing here

394
00:16:09,120 --> 00:16:10,000
is

395
00:16:10,000 --> 00:16:11,279
integration

396
00:16:11,279 --> 00:16:14,959
here it's uh much more promising we can

397
00:16:14,959 --> 00:16:18,959
code it just like the ui tests there are

398
00:16:18,959 --> 00:16:21,759
two links here one for the intellij the

399
00:16:21,759 --> 00:16:25,920
other one is for the vs code

400
00:16:26,320 --> 00:16:27,279
well

401
00:16:27,279 --> 00:16:29,759
they work in a more or less uh

402
00:16:29,759 --> 00:16:31,759
the same way using some different

403
00:16:31,759 --> 00:16:34,639
technologies and this is just like code

404
00:16:34,639 --> 00:16:36,800
in the selenium test so you click

405
00:16:36,800 --> 00:16:38,399
through the ui

406
00:16:38,399 --> 00:16:40,000
and um

407
00:16:40,000 --> 00:16:43,240
and you can code assets for this

408
00:16:43,240 --> 00:16:45,360
[Music]

409
00:16:45,360 --> 00:16:48,560
as i promised i'll be talking

410
00:16:48,560 --> 00:16:51,759
about the bumps we've had on the road

411
00:16:51,759 --> 00:16:53,839
so we recently

412
00:16:53,839 --> 00:16:56,320
publicly released the plugin

413
00:16:56,320 --> 00:16:58,079
and uh

414
00:16:58,079 --> 00:17:00,480
we could hope

415
00:17:00,480 --> 00:17:01,440
for

416
00:17:01,440 --> 00:17:03,360
a good

417
00:17:03,360 --> 00:17:05,199
outcome so we

418
00:17:05,199 --> 00:17:07,439
tested everything and we announced this

419
00:17:07,439 --> 00:17:10,160
but on the day of the release somebody

420
00:17:10,160 --> 00:17:14,959
decided to test it but until the id

421
00:17:15,119 --> 00:17:16,799
was

422
00:17:16,799 --> 00:17:18,799
updated just the day before and they

423
00:17:18,799 --> 00:17:21,439
were cracking the java and so on and so

424
00:17:21,439 --> 00:17:23,119
forth and our plugin with the new

425
00:17:23,119 --> 00:17:24,400
version

426
00:17:24,400 --> 00:17:25,599
would uh

427
00:17:25,599 --> 00:17:29,600
destroy their ide operations

428
00:17:29,600 --> 00:17:32,559
so this is my recommendation based on

429
00:17:32,559 --> 00:17:34,080
this

430
00:17:34,080 --> 00:17:37,360
issue so please follow the major

431
00:17:37,360 --> 00:17:40,959
versions of their ides

432
00:17:41,200 --> 00:17:43,360
your support

433
00:17:43,360 --> 00:17:46,640
so that you test

434
00:17:46,640 --> 00:17:49,039
the early build

435
00:17:49,039 --> 00:17:52,799
as soon as you can so this early build

436
00:17:52,799 --> 00:17:55,600
was available a month before it was

437
00:17:55,600 --> 00:17:57,840
actually released

438
00:17:57,840 --> 00:18:01,120
so we learned it the hard way

439
00:18:01,120 --> 00:18:05,199
a couple of general recommendations

440
00:18:05,280 --> 00:18:08,000
when you develop the plugins you can run

441
00:18:08,000 --> 00:18:10,480
into issues like that

442
00:18:10,480 --> 00:18:14,360
you don't have the api

443
00:18:14,559 --> 00:18:17,200
from the ide you're developing this

444
00:18:17,200 --> 00:18:20,000
extension for

445
00:18:20,080 --> 00:18:21,600
well

446
00:18:21,600 --> 00:18:23,679
we've had a case like that

447
00:18:23,679 --> 00:18:25,120
we want to add

448
00:18:25,120 --> 00:18:26,480
filters to the

449
00:18:26,480 --> 00:18:28,559
vs code

450
00:18:28,559 --> 00:18:30,400
and the vulnerability

451
00:18:30,400 --> 00:18:31,919
is shown

452
00:18:31,919 --> 00:18:34,720
there in the problems window

453
00:18:34,720 --> 00:18:36,799
expanding the filters is something you

454
00:18:36,799 --> 00:18:39,520
cannot do in the problems window so we

455
00:18:39,520 --> 00:18:41,840
decided to add another window for the

456
00:18:41,840 --> 00:18:44,000
vulnerabilities

457
00:18:44,000 --> 00:18:45,120
filtering

458
00:18:45,120 --> 00:18:46,799
when we add this

459
00:18:46,799 --> 00:18:49,200
window we can see it on the screen

460
00:18:49,200 --> 00:18:51,760
we had some issues with the ui

461
00:18:51,760 --> 00:18:54,320
like grouping we couldn't group the

462
00:18:54,320 --> 00:18:57,600
elements of the list

463
00:18:57,600 --> 00:19:01,360
well there are so a lot of requests in

464
00:19:01,360 --> 00:19:04,559
github for these features

465
00:19:04,559 --> 00:19:08,080
the api issues but uh

466
00:19:08,080 --> 00:19:10,400
the sure way to do it when i talk about

467
00:19:10,400 --> 00:19:12,960
vs code you should look for this from

468
00:19:12,960 --> 00:19:14,160
the

469
00:19:14,160 --> 00:19:15,360
microsoft

470
00:19:15,360 --> 00:19:19,520
and they will give you their workarounds

471
00:19:19,520 --> 00:19:22,320
for their own api

472
00:19:22,320 --> 00:19:26,480
and uh please don't forget uh about the

473
00:19:26,480 --> 00:19:29,360
resource consumption when you code

474
00:19:29,360 --> 00:19:31,840
the extension if the extension takes up

475
00:19:31,840 --> 00:19:35,600
100 of the cpu no one's going to like it

476
00:19:35,600 --> 00:19:38,400
and it will be even difficult to turn

477
00:19:38,400 --> 00:19:40,559
off

478
00:19:41,039 --> 00:19:43,200
and

479
00:19:43,600 --> 00:19:45,840
another thing

480
00:19:45,840 --> 00:19:47,360
is about

481
00:19:47,360 --> 00:19:50,000
the settings

482
00:19:50,160 --> 00:19:51,039
so

483
00:19:51,039 --> 00:19:52,400
in the settings

484
00:19:52,400 --> 00:19:54,799
menu

485
00:19:55,679 --> 00:19:59,200
the developers uh give you a large list

486
00:19:59,200 --> 00:20:01,840
of these settings and so this is really

487
00:20:01,840 --> 00:20:04,639
difficult to

488
00:20:04,799 --> 00:20:06,480
you know understand

489
00:20:06,480 --> 00:20:07,919
so we believe that

490
00:20:07,919 --> 00:20:09,840
we should split it

491
00:20:09,840 --> 00:20:12,240
a part should be there and another part

492
00:20:12,240 --> 00:20:15,360
should be in the json file with the json

493
00:20:15,360 --> 00:20:17,360
scheme we can

494
00:20:17,360 --> 00:20:19,039
launch so this is quite

495
00:20:19,039 --> 00:20:21,919
convenient and the final thing is about

496
00:20:21,919 --> 00:20:23,440
the readme

497
00:20:23,440 --> 00:20:25,200
don't forget don't forget about the

498
00:20:25,200 --> 00:20:28,000
readme files

499
00:20:28,240 --> 00:20:30,880
for the ides the good thing is that

500
00:20:30,880 --> 00:20:32,960
if you use the

501
00:20:32,960 --> 00:20:34,400
gives there

502
00:20:34,400 --> 00:20:37,200
in the readme they are shown

503
00:20:37,200 --> 00:20:39,919
by the market

504
00:20:39,919 --> 00:20:40,960
that's it

505
00:20:40,960 --> 00:20:43,120
in terms of the general

506
00:20:43,120 --> 00:20:45,919
technical features and i'll talk about

507
00:20:45,919 --> 00:20:48,480
the results of our effort

508
00:20:48,480 --> 00:20:49,919
our extension

509
00:20:49,919 --> 00:20:52,080
to do this i'll need to show you some

510
00:20:52,080 --> 00:20:53,440
video

511
00:20:53,440 --> 00:20:57,000
okay thank you

512
00:21:05,520 --> 00:21:07,760
let's talk about the visual studio code

513
00:21:07,760 --> 00:21:10,159
extension installation is really

514
00:21:10,159 --> 00:21:13,919
straightforward that's what we are doing

515
00:21:14,799 --> 00:21:16,720
where we are installing from

516
00:21:16,720 --> 00:21:20,159
the vcx file because we are not present

517
00:21:20,159 --> 00:21:22,000
on the market yet

518
00:21:22,000 --> 00:21:23,200
okay

519
00:21:23,200 --> 00:21:25,520
a couple of seconds

520
00:21:25,520 --> 00:21:27,520
here it is installed

521
00:21:27,520 --> 00:21:29,600
here is our extension you can see the

522
00:21:29,600 --> 00:21:32,240
readme i have talked about

523
00:21:32,240 --> 00:21:34,880
and if we had the

524
00:21:34,880 --> 00:21:36,559
user

525
00:21:36,559 --> 00:21:38,960
open we would see them

526
00:21:38,960 --> 00:21:40,960
okay the project we want to scan here

527
00:21:40,960 --> 00:21:42,559
you can see the questions whether we

528
00:21:42,559 --> 00:21:44,400
want to enable

529
00:21:44,400 --> 00:21:47,280
the extension

530
00:21:49,520 --> 00:21:50,559
for the

531
00:21:50,559 --> 00:21:53,360
application inspector okay

532
00:21:53,360 --> 00:21:55,840
we activated so we have the

533
00:21:55,840 --> 00:22:00,000
temp folder dot ai so it goes to git

534
00:22:00,000 --> 00:22:01,120
ignore

535
00:22:01,120 --> 00:22:03,360
and we have

536
00:22:03,360 --> 00:22:04,960
a suggestion

537
00:22:04,960 --> 00:22:06,480
to download

538
00:22:06,480 --> 00:22:07,200
the

539
00:22:07,200 --> 00:22:09,840
analyzer so we didn't have it

540
00:22:09,840 --> 00:22:11,679
that's what i've been talking about we

541
00:22:11,679 --> 00:22:12,559
want

542
00:22:12,559 --> 00:22:13,840
the

543
00:22:13,840 --> 00:22:16,320
utilities installation

544
00:22:16,320 --> 00:22:17,520
to be

545
00:22:17,520 --> 00:22:20,960
done by the utility

546
00:22:21,840 --> 00:22:22,960
and

547
00:22:22,960 --> 00:22:27,240
now it will be quickly downloaded

548
00:22:34,720 --> 00:22:37,600
so now it's installing this is the

549
00:22:37,600 --> 00:22:40,400
accounting as a matter of fact and for

550
00:22:40,400 --> 00:22:41,440
mac

551
00:22:41,440 --> 00:22:44,720
we would have the installer launched and

552
00:22:44,720 --> 00:22:46,400
we'll have to

553
00:22:46,400 --> 00:22:47,440
click it

554
00:22:47,440 --> 00:22:50,240
so you can see the enabled

555
00:22:50,240 --> 00:22:52,799
extension so we have the interface and

556
00:22:52,799 --> 00:22:55,360
we have the buttons like

557
00:22:55,360 --> 00:22:57,039
launch scanning

558
00:22:57,039 --> 00:22:58,559
filtration

559
00:22:58,559 --> 00:23:00,880
we can see some other windows to the

560
00:23:00,880 --> 00:23:03,120
left

561
00:23:05,440 --> 00:23:08,480
and we can use ctrl shift

562
00:23:08,480 --> 00:23:11,120
p and have the list of

563
00:23:11,120 --> 00:23:13,600
commands and the button is there

564
00:23:13,600 --> 00:23:15,760
it is quite lucrative so we are pressing

565
00:23:15,760 --> 00:23:17,919
it

566
00:23:18,000 --> 00:23:22,320
okay we see the progress window the

567
00:23:22,320 --> 00:23:24,320
output

568
00:23:24,320 --> 00:23:25,840
and

569
00:23:25,840 --> 00:23:28,240
you can see the status bar as well

570
00:23:28,240 --> 00:23:29,200
following

571
00:23:29,200 --> 00:23:30,640
the scan process we can see the

572
00:23:30,640 --> 00:23:33,280
statistics the number of scanned files

573
00:23:33,280 --> 00:23:36,880
the vulnerabilities discovered

574
00:23:36,880 --> 00:23:37,679
well

575
00:23:37,679 --> 00:23:39,760
this is not a lot of fun

576
00:23:39,760 --> 00:23:42,720
what is a lot of fun is the problems

577
00:23:42,720 --> 00:23:44,400
window we can see the other

578
00:23:44,400 --> 00:23:47,360
vulnerabilities so we have scanned their

579
00:23:47,360 --> 00:23:48,480
project

580
00:23:48,480 --> 00:23:50,480
using php here you can see the

581
00:23:50,480 --> 00:23:52,720
vulnerabilities

582
00:23:52,720 --> 00:23:54,640
they are split by the

583
00:23:54,640 --> 00:23:56,000
severity

584
00:23:56,000 --> 00:23:58,320
level

585
00:23:59,360 --> 00:24:02,000
so you can see it in the vs code so this

586
00:24:02,000 --> 00:24:03,440
is a good match you can use it for

587
00:24:03,440 --> 00:24:04,880
filtering

588
00:24:04,880 --> 00:24:06,559
this is the

589
00:24:06,559 --> 00:24:10,240
workaround window i have talked about

590
00:24:10,240 --> 00:24:12,080
and we can see the description of the

591
00:24:12,080 --> 00:24:15,279
vulnerabilities through the quick fix

592
00:24:15,279 --> 00:24:19,200
session show description

593
00:24:19,200 --> 00:24:21,440
okay i'm pressing it now

594
00:24:21,440 --> 00:24:23,840
here it is it works

595
00:24:23,840 --> 00:24:25,760
well not very representative

596
00:24:25,760 --> 00:24:28,159
in terms of description let's have

597
00:24:28,159 --> 00:24:30,799
another look

598
00:24:31,360 --> 00:24:33,840
here you can see the picture so the

599
00:24:33,840 --> 00:24:35,200
developer

600
00:24:35,200 --> 00:24:38,400
can see what exactly the vulnerability

601
00:24:38,400 --> 00:24:41,279
is about and be scared enough to want to

602
00:24:41,279 --> 00:24:43,679
fix it

603
00:24:43,919 --> 00:24:45,360
okay what kind of

604
00:24:45,360 --> 00:24:46,559
vulnerability

605
00:24:46,559 --> 00:24:49,679
is this one so we see the description

606
00:24:49,679 --> 00:24:51,840
and we'll see the

607
00:24:51,840 --> 00:24:54,400
dvd

608
00:24:54,400 --> 00:24:55,520
path

609
00:24:55,520 --> 00:24:57,600
it is uh clickable

610
00:24:57,600 --> 00:25:03,039
and you can click it to see some details

611
00:25:03,120 --> 00:25:05,840
if the vulnerability has an exploit then

612
00:25:05,840 --> 00:25:07,200
we'll see the

613
00:25:07,200 --> 00:25:10,799
information in the exploit window

614
00:25:10,799 --> 00:25:13,840
and you can even launch it will have the

615
00:25:13,840 --> 00:25:16,400
http file generated and you have the

616
00:25:16,400 --> 00:25:18,960
extension it will be launched

617
00:25:18,960 --> 00:25:21,600
and now let me share with you

618
00:25:21,600 --> 00:25:24,080
the cross-site scripting

619
00:25:24,080 --> 00:25:26,960
vulnerability

620
00:25:26,960 --> 00:25:29,840
with the php

621
00:25:30,640 --> 00:25:33,760
so we can see

622
00:25:33,840 --> 00:25:36,840
here

623
00:25:42,000 --> 00:25:43,679
so we can use

624
00:25:43,679 --> 00:25:46,480
here a variable if we have

625
00:25:46,480 --> 00:25:49,279
decoding it will be fixed so now we

626
00:25:49,279 --> 00:25:50,400
launched

627
00:25:50,400 --> 00:25:52,480
launch scanning again

628
00:25:52,480 --> 00:25:56,559
it's uh incremental it goes faster and

629
00:25:56,559 --> 00:25:58,240
following this scanning process we can

630
00:25:58,240 --> 00:26:03,039
see that the vulnerability is not there

631
00:26:06,080 --> 00:26:09,600
so the developer

632
00:26:09,600 --> 00:26:11,600
can

633
00:26:11,600 --> 00:26:12,480
check

634
00:26:12,480 --> 00:26:13,919
in the live mode

635
00:26:13,919 --> 00:26:16,640
whether the vulnerability has been fixed

636
00:26:16,640 --> 00:26:18,799
we can also have some settings for

637
00:26:18,799 --> 00:26:20,640
scanning

638
00:26:20,640 --> 00:26:22,880
we can use the json scheme i've talked

639
00:26:22,880 --> 00:26:24,480
about

640
00:26:24,480 --> 00:26:25,360
it is

641
00:26:25,360 --> 00:26:28,479
pretty handy

642
00:26:29,919 --> 00:26:31,279
we can add

643
00:26:31,279 --> 00:26:33,200
new lines

644
00:26:33,200 --> 00:26:36,480
you can see some hints and descriptions

645
00:26:36,480 --> 00:26:39,840
you can also add

646
00:26:39,840 --> 00:26:41,440
the ignore

647
00:26:41,440 --> 00:26:43,919
files and folders

648
00:26:43,919 --> 00:26:45,919
this is pretty good

649
00:26:45,919 --> 00:26:48,640
and the syntaxes is just like in

650
00:26:48,640 --> 00:26:50,799
git ignore there are many other

651
00:26:50,799 --> 00:26:53,840
functions here

652
00:26:53,919 --> 00:26:55,919
that's a separate story

653
00:26:55,919 --> 00:26:59,279
this is just an overview

654
00:27:01,360 --> 00:27:03,760
now let's have a look

655
00:27:03,760 --> 00:27:06,720
at the intellij plugin example the

656
00:27:06,720 --> 00:27:09,600
analyzer is already installed so we are

657
00:27:09,600 --> 00:27:12,799
skipping the download and installation

658
00:27:12,799 --> 00:27:15,279
stages

659
00:27:15,679 --> 00:27:19,200
we can see the same interface

660
00:27:19,600 --> 00:27:21,200
well

661
00:27:21,200 --> 00:27:23,679
it's uh

662
00:27:25,200 --> 00:27:27,919
styled to look like the intellij

663
00:27:27,919 --> 00:27:29,200
so you can see

664
00:27:29,200 --> 00:27:31,520
the buttons to launch scanning the

665
00:27:31,520 --> 00:27:33,279
progress window

666
00:27:33,279 --> 00:27:34,960
the vulnerabilities

667
00:27:34,960 --> 00:27:37,679
are shown separately the detected

668
00:27:37,679 --> 00:27:40,720
vulnerabilities tab

669
00:27:41,120 --> 00:27:43,520
here it is

670
00:27:45,520 --> 00:27:49,840
they are split by the severity level

671
00:27:50,480 --> 00:27:54,000
we can filter this

672
00:27:56,640 --> 00:27:57,840
and

673
00:27:57,840 --> 00:28:00,000
you can see this

674
00:28:00,000 --> 00:28:02,720
marked in the code

675
00:28:02,720 --> 00:28:04,720
as problems

676
00:28:04,720 --> 00:28:07,279
like the syntax mistakes

677
00:28:07,279 --> 00:28:09,120
you can also

678
00:28:09,120 --> 00:28:10,960
have a look at the

679
00:28:10,960 --> 00:28:13,279
description of vulnerabilities this is

680
00:28:13,279 --> 00:28:17,159
the bottom right corner

681
00:28:20,880 --> 00:28:22,480
and here you can see

682
00:28:22,480 --> 00:28:25,600
the same windows the vs code you can see

683
00:28:25,600 --> 00:28:27,919
the path for the vulnerability

684
00:28:27,919 --> 00:28:29,440
exploitation

685
00:28:29,440 --> 00:28:32,559
it's clickable there are several

686
00:28:32,559 --> 00:28:34,399
ways to exploit it

687
00:28:34,399 --> 00:28:36,559
and there are

688
00:28:36,559 --> 00:28:38,159
some

689
00:28:38,159 --> 00:28:40,480
extra conditions here or additional

690
00:28:40,480 --> 00:28:41,840
conditions

691
00:28:41,840 --> 00:28:44,960
that's another window and the exploit

692
00:28:44,960 --> 00:28:47,200
window is there as well

693
00:28:47,200 --> 00:28:49,760
you can launch it

694
00:28:49,760 --> 00:28:50,799
you can

695
00:28:50,799 --> 00:28:52,720
generate the

696
00:28:52,720 --> 00:28:56,760
http file this way

697
00:28:58,159 --> 00:28:59,279
it will

698
00:28:59,279 --> 00:29:00,480
launch

699
00:29:00,480 --> 00:29:03,760
only if we have the ultimate version of

700
00:29:03,760 --> 00:29:05,200
intellij

701
00:29:05,200 --> 00:29:08,000
we can confirm vulnerabilities and we

702
00:29:08,000 --> 00:29:10,799
can discard them

703
00:29:10,799 --> 00:29:12,640
if you have a lot of vulnerabilities

704
00:29:12,640 --> 00:29:15,039
generated

705
00:29:15,039 --> 00:29:17,600
and you want to

706
00:29:17,600 --> 00:29:18,799
clean

707
00:29:18,799 --> 00:29:20,799
the

708
00:29:20,799 --> 00:29:23,360
full false positives or you want to set

709
00:29:23,360 --> 00:29:26,240
priorities you can use the tool for this

710
00:29:26,240 --> 00:29:28,559
you can generate the comment through

711
00:29:28,559 --> 00:29:31,760
suppress this is through the quick fix

712
00:29:31,760 --> 00:29:33,840
session this is just like this card but

713
00:29:33,840 --> 00:29:36,240
this way you can share it with the team

714
00:29:36,240 --> 00:29:39,600
saying that this is not to be fixed

715
00:29:39,600 --> 00:29:42,960
you can also have here the settings

716
00:29:42,960 --> 00:29:46,000
files and the ignore files

717
00:29:46,000 --> 00:29:47,600
and this is not done through the

718
00:29:47,600 --> 00:29:50,240
comments in just like this code but

719
00:29:50,240 --> 00:29:54,840
rather through the context menu

720
00:29:59,600 --> 00:30:02,240
the standard way here

721
00:30:02,240 --> 00:30:04,640
okay

722
00:30:04,640 --> 00:30:07,120
that's it for the results and the

723
00:30:07,120 --> 00:30:08,799
functions so let's go back to my

724
00:30:08,799 --> 00:30:11,440
presentation

725
00:30:16,480 --> 00:30:18,960
hopefully you have enjoyed

726
00:30:18,960 --> 00:30:22,559
my presentation on the work or operation

727
00:30:22,559 --> 00:30:24,480
of these plugins hopefully you have

728
00:30:24,480 --> 00:30:27,039
enjoyed the details as well

729
00:30:27,039 --> 00:30:29,440
well we have shared just uh

730
00:30:29,440 --> 00:30:31,360
a small piece

731
00:30:31,360 --> 00:30:33,440
of all the functions

732
00:30:33,440 --> 00:30:35,520
and here you can see the link to the

733
00:30:35,520 --> 00:30:37,440
github repository

734
00:30:37,440 --> 00:30:39,600
for the plugins they don't have the

735
00:30:39,600 --> 00:30:41,600
source code yet

736
00:30:41,600 --> 00:30:44,000
but we are planning to do it

737
00:30:44,000 --> 00:30:46,159
but there you have the

738
00:30:46,159 --> 00:30:47,360
readme

739
00:30:47,360 --> 00:30:50,320
you can create issues there and we have

740
00:30:50,320 --> 00:30:52,000
the artifacts

741
00:30:52,000 --> 00:30:54,000
to download them

742
00:30:54,000 --> 00:30:56,559
so that you can click and try it

743
00:30:56,559 --> 00:30:57,600
and do

744
00:30:57,600 --> 00:30:59,200
some of your own

745
00:30:59,200 --> 00:31:02,320
code research for vulnerabilities

746
00:31:02,320 --> 00:31:04,240
that's it from me thank you very much

747
00:31:04,240 --> 00:31:06,000
for your attention and i'm here to

748
00:31:06,000 --> 00:31:09,399
answer your questions

749
00:31:18,399 --> 00:31:19,760
one more thing i

750
00:31:19,760 --> 00:31:22,320
didn't mention when i spoke

751
00:31:22,320 --> 00:31:25,279
the best question will be awarded with a

752
00:31:25,279 --> 00:31:26,799
small prize

753
00:31:26,799 --> 00:31:29,519
so following the q a session

754
00:31:29,519 --> 00:31:33,200
the speaker will pick someone

755
00:31:33,200 --> 00:31:35,120
the author the best question

756
00:31:35,120 --> 00:31:39,439
and will give the prize to you thank you

757
00:31:42,960 --> 00:31:44,799
thank you i believe they should give you

758
00:31:44,799 --> 00:31:47,440
a mic

759
00:31:47,440 --> 00:31:49,600
i cannot see anyone oh

760
00:31:49,600 --> 00:31:50,880
here it is

761
00:31:50,880 --> 00:31:52,080
thank you

762
00:31:52,080 --> 00:31:53,360
hello

763
00:31:53,360 --> 00:31:54,880
thank you very much for your speech i

764
00:31:54,880 --> 00:31:56,640
really enjoyed it

765
00:31:56,640 --> 00:31:58,880
i have a question

766
00:31:58,880 --> 00:32:01,360
we know that

767
00:32:01,360 --> 00:32:04,960
some developers need speed more

768
00:32:04,960 --> 00:32:07,600
than fixing vulnerabilities

769
00:32:07,600 --> 00:32:10,880
and as far as i understand

770
00:32:10,880 --> 00:32:13,440
we can disable

771
00:32:13,440 --> 00:32:14,640
this uh

772
00:32:14,640 --> 00:32:18,320
using the comments and then when some

773
00:32:18,320 --> 00:32:20,880
other developer or if the upset guy is

774
00:32:20,880 --> 00:32:22,399
going to

775
00:32:22,399 --> 00:32:23,440
check it

776
00:32:23,440 --> 00:32:26,640
uh then it will not work

777
00:32:26,640 --> 00:32:28,960
so what to do to get rid of the warnings

778
00:32:28,960 --> 00:32:31,519
or to categorize them somehow so what

779
00:32:31,519 --> 00:32:34,240
are the ways around it okay

780
00:32:34,240 --> 00:32:37,039
if in your company

781
00:32:37,039 --> 00:32:39,919
security or secure development

782
00:32:39,919 --> 00:32:41,519
is so advanced that you have the

783
00:32:41,519 --> 00:32:42,960
processes built

784
00:32:42,960 --> 00:32:44,720
this proper way

785
00:32:44,720 --> 00:32:48,080
so maybe the enterprise version

786
00:32:48,080 --> 00:32:49,679
will be more interesting

787
00:32:49,679 --> 00:32:53,600
to you and there the team development

788
00:32:53,600 --> 00:32:56,918
is an option

789
00:32:57,519 --> 00:32:59,279
well this is not an investment by the

790
00:32:59,279 --> 00:33:01,440
way

791
00:33:03,760 --> 00:33:07,799
well i i would say trust

792
00:33:11,679 --> 00:33:13,679
well i mean that the

793
00:33:13,679 --> 00:33:15,440
developers team

794
00:33:15,440 --> 00:33:17,840
have the code review process

795
00:33:17,840 --> 00:33:19,039
and

796
00:33:19,039 --> 00:33:20,880
have the stages

797
00:33:20,880 --> 00:33:24,799
and all the process is built on trust so

798
00:33:24,799 --> 00:33:27,200
if you

799
00:33:27,360 --> 00:33:29,150
doubt

800
00:33:29,150 --> 00:33:32,229
[Music]

801
00:33:32,480 --> 00:33:34,399
that

802
00:33:34,399 --> 00:33:36,159
real vulnerabilities are suppressed so

803
00:33:36,159 --> 00:33:38,640
maybe there are some issues

804
00:33:38,640 --> 00:33:40,399
with the process

805
00:33:40,399 --> 00:33:43,360
okay thank you

806
00:33:44,640 --> 00:33:46,960
thank you

807
00:33:47,519 --> 00:33:50,000
the interface

808
00:33:50,000 --> 00:33:52,559
showed the exploit

809
00:33:52,559 --> 00:33:55,039
as an option for the developer

810
00:33:55,039 --> 00:33:56,159
to test

811
00:33:56,159 --> 00:33:59,440
whether it's the real vulnerability

812
00:33:59,440 --> 00:34:00,640
and

813
00:34:00,640 --> 00:34:02,559
do you

814
00:34:02,559 --> 00:34:05,120
offer any code fixing

815
00:34:05,120 --> 00:34:06,960
by clicking the button

816
00:34:06,960 --> 00:34:08,960
to fix the vulnerability

817
00:34:08,960 --> 00:34:11,520
no we don't have this function yet

818
00:34:11,520 --> 00:34:13,520
but we have

819
00:34:13,520 --> 00:34:16,639
had some dreams about it

820
00:34:18,079 --> 00:34:19,359
so we have the

821
00:34:19,359 --> 00:34:21,440
best place to fix so that's all we have

822
00:34:21,440 --> 00:34:23,839
for now

823
00:34:24,639 --> 00:34:27,679
andrei thank you very much

824
00:34:29,199 --> 00:34:31,599
well i have issues with trust

825
00:34:31,599 --> 00:34:33,599
since i come from opsec

826
00:34:33,599 --> 00:34:35,679
does this plugin

827
00:34:35,679 --> 00:34:39,040
have a function to let an authorized guy

828
00:34:39,040 --> 00:34:41,520
with credentials in

829
00:34:41,520 --> 00:34:46,399
ad for instance to switch this thing off

830
00:34:46,639 --> 00:34:48,960
well today

831
00:34:48,960 --> 00:34:53,280
this is for local application only

832
00:34:53,520 --> 00:34:54,719
and uh

833
00:34:54,719 --> 00:34:57,599
we don't synchronize the team work using

834
00:34:57,599 --> 00:35:00,000
this plugins now but in the future with

835
00:35:00,000 --> 00:35:02,320
the app and inspector okay it will be a

836
00:35:02,320 --> 00:35:04,400
friend of the inspector yes indeed thank

837
00:35:04,400 --> 00:35:06,320
you so we know that the developers

838
00:35:06,320 --> 00:35:09,040
computers are overloaded by kaspersky

839
00:35:09,040 --> 00:35:10,400
and other stuff

840
00:35:10,400 --> 00:35:14,000
so how resource intensive is your plugin

841
00:35:14,000 --> 00:35:16,160
as far as understand this is the small

842
00:35:16,160 --> 00:35:19,359
version of the stat analyzer

843
00:35:19,359 --> 00:35:21,759
indeed

844
00:35:22,320 --> 00:35:26,560
we limit the resource consumption

845
00:35:28,160 --> 00:35:31,520
we shouldn't forget

846
00:35:31,520 --> 00:35:34,400
about their resources consumption and in

847
00:35:34,400 --> 00:35:36,640
the settings we have this

848
00:35:36,640 --> 00:35:38,480
uh either you

849
00:35:38,480 --> 00:35:41,119
use all resources or you spare the

850
00:35:41,119 --> 00:35:43,599
resources how does it impact the quality

851
00:35:43,599 --> 00:35:45,839
of analysis the quality is the same the

852
00:35:45,839 --> 00:35:48,640
speed will be lower but the output will

853
00:35:48,640 --> 00:35:50,480
be the same

854
00:35:50,480 --> 00:35:52,560
thank you

855
00:35:52,560 --> 00:35:54,880
hello

856
00:35:54,880 --> 00:35:58,880
a question look right please i'm here

857
00:35:58,880 --> 00:36:01,200
i have two questions

858
00:36:01,200 --> 00:36:02,560
have you

859
00:36:02,560 --> 00:36:03,520
checked

860
00:36:03,520 --> 00:36:05,760
your code with your stat analyzer i mean

861
00:36:05,760 --> 00:36:08,640
the plug-in code

862
00:36:08,640 --> 00:36:11,680
well this doesn't really make any

863
00:36:11,680 --> 00:36:12,400
sense

864
00:36:12,400 --> 00:36:15,520
the stat analyzer

865
00:36:15,520 --> 00:36:16,800
is for web

866
00:36:16,800 --> 00:36:20,240
and the plugin is for the desktop so

867
00:36:20,240 --> 00:36:21,440
what kind of vulnerabilities are you

868
00:36:21,440 --> 00:36:23,839
talking about there thank you

869
00:36:23,839 --> 00:36:25,280
then question two

870
00:36:25,280 --> 00:36:27,359
do you have any

871
00:36:27,359 --> 00:36:28,880
principles

872
00:36:28,880 --> 00:36:29,760
which

873
00:36:29,760 --> 00:36:31,839
are kind of different

874
00:36:31,839 --> 00:36:34,320
i mean in the avast top ten

875
00:36:34,320 --> 00:36:36,480
i mean do you bring your own standards

876
00:36:36,480 --> 00:36:38,240
uh

877
00:36:38,240 --> 00:36:40,400
development can your plugin work

878
00:36:40,400 --> 00:36:41,839
miracles

879
00:36:41,839 --> 00:36:43,839
okay we are talking about the quality of

880
00:36:43,839 --> 00:36:46,400
analysis

881
00:36:48,640 --> 00:36:50,880
we have some experts in the field so

882
00:36:50,880 --> 00:36:54,920
they are there to help you

883
00:36:55,200 --> 00:36:56,880
hello again

884
00:36:56,880 --> 00:36:59,599
please uh repeat the question

885
00:36:59,599 --> 00:37:03,040
the question is on a vesper top 10 and

886
00:37:03,040 --> 00:37:04,240
it's a

887
00:37:04,240 --> 00:37:06,320
difference i mean the difference of your

888
00:37:06,320 --> 00:37:09,280
analysis from the sensed analysis what

889
00:37:09,280 --> 00:37:12,000
do you bring to the table well a best

890
00:37:12,000 --> 00:37:13,520
top 10

891
00:37:13,520 --> 00:37:15,520
is something which shouldn't be

892
00:37:15,520 --> 00:37:17,920
mentioned in a decent society when we

893
00:37:17,920 --> 00:37:20,640
talk about opsec and this ops why so

894
00:37:20,640 --> 00:37:23,760
because it's a kind of uh

895
00:37:23,760 --> 00:37:26,240
charts so this is the top 10

896
00:37:26,240 --> 00:37:28,400
attacks and vulnerabilities

897
00:37:28,400 --> 00:37:31,119
it's a motley collection the

898
00:37:31,119 --> 00:37:33,680
application inspector works like that it

899
00:37:33,680 --> 00:37:35,839
looks for vulnerabilities and it tries

900
00:37:35,839 --> 00:37:38,240
to find the exploits so then the exploit

901
00:37:38,240 --> 00:37:40,880
is verified by sulbury then we show it

902
00:37:40,880 --> 00:37:43,760
that the detect has happened we use our

903
00:37:43,760 --> 00:37:46,800
own classification which is

904
00:37:46,800 --> 00:37:47,839
well

905
00:37:47,839 --> 00:37:49,680
more based on the

906
00:37:49,680 --> 00:37:52,000
web application security consortium

907
00:37:52,000 --> 00:37:55,599
approach so that's where we started

908
00:37:58,400 --> 00:38:00,640
so we follow this ideology we have

909
00:38:00,640 --> 00:38:02,160
vulnerabilities and we have attacks and

910
00:38:02,160 --> 00:38:03,599
these are different things

911
00:38:03,599 --> 00:38:04,720
for us

912
00:38:04,720 --> 00:38:06,880
we deal with them and we have more of

913
00:38:06,880 --> 00:38:08,800
them

914
00:38:08,800 --> 00:38:10,560
and so now

915
00:38:10,560 --> 00:38:12,960
slowly but steadily

916
00:38:12,960 --> 00:38:13,920
we are

917
00:38:13,920 --> 00:38:16,960
reclassifying this so we want our

918
00:38:16,960 --> 00:38:19,280
taxonomy to be more clear and

919
00:38:19,280 --> 00:38:21,520
transparent for developers because now

920
00:38:21,520 --> 00:38:23,760
they're upsets understand it and the

921
00:38:23,760 --> 00:38:25,680
developers don't really understand past

922
00:38:25,680 --> 00:38:26,960
reversal

923
00:38:26,960 --> 00:38:29,440
difference from random reading of the

924
00:38:29,440 --> 00:38:31,200
file and these are different things with

925
00:38:31,200 --> 00:38:32,720
different impact

926
00:38:32,720 --> 00:38:35,599
but uh this is for the future we are

927
00:38:35,599 --> 00:38:38,560
already dealing with it

928
00:38:39,520 --> 00:38:41,119
well to answer a question this is our

929
00:38:41,119 --> 00:38:43,680
own taxonomy we are not happy with that

930
00:38:43,680 --> 00:38:44,800
but it's

931
00:38:44,800 --> 00:38:46,960
better than the standard things

932
00:38:46,960 --> 00:38:48,880
available thank you for the answer

933
00:38:48,880 --> 00:38:51,359
you're welcome

934
00:38:54,560 --> 00:38:56,640
thank you that's really interesting i

935
00:38:56,640 --> 00:38:58,720
have a couple of questions

936
00:38:58,720 --> 00:39:01,280
the first one was do you check the

937
00:39:01,280 --> 00:39:04,000
plugin by your own plugin and the second

938
00:39:04,000 --> 00:39:06,240
was about making it more popular you

939
00:39:06,240 --> 00:39:08,320
said that you want everyone to use the

940
00:39:08,320 --> 00:39:10,720
plugin okay how to make it popular how

941
00:39:10,720 --> 00:39:13,440
to raise awareness with the developers

942
00:39:13,440 --> 00:39:15,920
okay you develop your own tool you can

943
00:39:15,920 --> 00:39:18,400
control how the information will be

944
00:39:18,400 --> 00:39:21,920
communicated so you can make it uh clear

945
00:39:21,920 --> 00:39:22,880
here is the description of the

946
00:39:22,880 --> 00:39:24,240
vulnerability

947
00:39:24,240 --> 00:39:26,160
here is a kind of a picture

948
00:39:26,160 --> 00:39:28,400
some video and so

949
00:39:28,400 --> 00:39:30,079
so people will understand the

950
00:39:30,079 --> 00:39:32,480
availability and how it works but if it

951
00:39:32,480 --> 00:39:35,280
is a plugin to be added to the ide

952
00:39:35,280 --> 00:39:37,920
so this means that you limit

953
00:39:37,920 --> 00:39:39,599
yourself in terms of sharing the

954
00:39:39,599 --> 00:39:41,359
information with the developer you can

955
00:39:41,359 --> 00:39:43,119
only use the windows and other

956
00:39:43,119 --> 00:39:45,760
mechanisms which are

957
00:39:45,760 --> 00:39:47,760
provided by the ide

958
00:39:47,760 --> 00:39:50,640
okay the developer wants

959
00:39:50,640 --> 00:39:51,760
the

960
00:39:51,760 --> 00:39:52,960
code

961
00:39:52,960 --> 00:39:54,000
to be

962
00:39:54,000 --> 00:39:56,000
secure so they use the plug-in and they

963
00:39:56,000 --> 00:39:58,800
use the assessed so they used some kind

964
00:39:58,800 --> 00:40:01,359
of shorter version of cest

965
00:40:01,359 --> 00:40:04,160
but uh they

966
00:40:04,160 --> 00:40:06,560
don't see the whole result so they'll

967
00:40:06,560 --> 00:40:07,760
have to go

968
00:40:07,760 --> 00:40:09,040
to opsec

969
00:40:09,040 --> 00:40:11,359
so those who can explain

970
00:40:11,359 --> 00:40:12,880
what the problem is

971
00:40:12,880 --> 00:40:15,599
but this is nothing if they

972
00:40:15,599 --> 00:40:17,280
okay go to somebody else how to share

973
00:40:17,280 --> 00:40:18,480
the information okay they find the

974
00:40:18,480 --> 00:40:21,440
problem they read the description it is

975
00:40:21,440 --> 00:40:23,680
similarly clear but not completely clear

976
00:40:23,680 --> 00:40:25,359
so they will go to somebody else to

977
00:40:25,359 --> 00:40:27,599
provide some more details so they have

978
00:40:27,599 --> 00:40:29,280
this mechanism to

979
00:40:29,280 --> 00:40:32,240
share this from the local

980
00:40:32,240 --> 00:40:34,319
machine somebody else

981
00:40:34,319 --> 00:40:35,680
okay

982
00:40:35,680 --> 00:40:39,359
this is the third thing application with

983
00:40:39,359 --> 00:40:40,400
the

984
00:40:40,400 --> 00:40:41,440
integration with the application

985
00:40:41,440 --> 00:40:43,119
inspector and the teamwork

986
00:40:43,119 --> 00:40:46,480
well just again unfortunately this

987
00:40:46,480 --> 00:40:49,680
plug-in implementation is for the local

988
00:40:49,680 --> 00:40:52,720
operation with a local

989
00:40:52,720 --> 00:40:54,240
machine

990
00:40:54,240 --> 00:40:56,720
and to share the vulnerability or to

991
00:40:56,720 --> 00:40:58,160
create an issue

992
00:40:58,160 --> 00:41:01,599
well we don't have tools for that

993
00:41:01,599 --> 00:41:06,599
i agree with you this is a good comment

994
00:41:07,839 --> 00:41:09,599
the information

995
00:41:09,599 --> 00:41:12,400
on developers exploitation and uh

996
00:41:12,400 --> 00:41:14,160
description of the vulnerability whether

997
00:41:14,160 --> 00:41:15,040
through the

998
00:41:15,040 --> 00:41:17,280
uh series so you need to share this with

999
00:41:17,280 --> 00:41:18,720
the team this is

1000
00:41:18,720 --> 00:41:21,119
good and a useful thing

1001
00:41:21,119 --> 00:41:24,720
the initial idea was that the developer

1002
00:41:24,720 --> 00:41:26,480
will be happy

1003
00:41:26,480 --> 00:41:27,359
to

1004
00:41:27,359 --> 00:41:29,520
read the description of the ability to

1005
00:41:29,520 --> 00:41:32,160
see the red flag and maybe they'll want

1006
00:41:32,160 --> 00:41:32,880
to

1007
00:41:32,880 --> 00:41:34,400
fix it you will see that it can be

1008
00:41:34,400 --> 00:41:36,880
exploited

1009
00:41:36,880 --> 00:41:38,000
okay

1010
00:41:38,000 --> 00:41:39,680
then

1011
00:41:39,680 --> 00:41:41,760
a follow-up question when i develop a

1012
00:41:41,760 --> 00:41:44,800
code i develop a function

1013
00:41:44,800 --> 00:41:47,119
and through a plugin i see that this

1014
00:41:47,119 --> 00:41:49,920
function in this implementation is not

1015
00:41:49,920 --> 00:41:51,839
safe i believe that these functions will

1016
00:41:51,839 --> 00:41:53,599
be pretty good when you think that you

1017
00:41:53,599 --> 00:41:56,560
need to implement a function it should

1018
00:41:56,560 --> 00:41:59,359
take some actions and if you call the

1019
00:41:59,359 --> 00:42:01,040
function and you can hear this or see

1020
00:42:01,040 --> 00:42:03,359
this information this will be really

1021
00:42:03,359 --> 00:42:06,160
useful and this is not post scan this is

1022
00:42:06,160 --> 00:42:09,040
uh pre awareness so you can share this

1023
00:42:09,040 --> 00:42:10,640
the plugins information on the function

1024
00:42:10,640 --> 00:42:12,480
so please think about it

1025
00:42:12,480 --> 00:42:14,640
it's like a feature request

1026
00:42:14,640 --> 00:42:17,440
thank you very much this is very good in

1027
00:42:17,440 --> 00:42:20,160
github issues we can also send this to

1028
00:42:20,160 --> 00:42:23,440
us okay i can do it

1029
00:42:23,440 --> 00:42:24,560
thank you

1030
00:42:24,560 --> 00:42:28,440
thank you very much for your question

1031
00:42:30,400 --> 00:42:32,240
andrei thank you very much

1032
00:42:32,240 --> 00:42:34,079
a brief question

1033
00:42:34,079 --> 00:42:37,119
if this is developed in a closed loop is

1034
00:42:37,119 --> 00:42:39,040
it an issue for the plugin

1035
00:42:39,040 --> 00:42:41,200
and what will be the quality if you

1036
00:42:41,200 --> 00:42:43,119
don't have access direct access to the

1037
00:42:43,119 --> 00:42:45,520
internet

1038
00:42:45,520 --> 00:42:47,599
the only issue

1039
00:42:47,599 --> 00:42:48,480
will be

1040
00:42:48,480 --> 00:42:49,920
to

1041
00:42:49,920 --> 00:42:52,319
analyze

1042
00:42:52,319 --> 00:42:54,640
the vulnerable components

1043
00:42:54,640 --> 00:42:58,560
we have the dependency checker module

1044
00:42:58,560 --> 00:43:02,560
it uses the wasp

1045
00:43:02,560 --> 00:43:05,759
open database

1046
00:43:05,920 --> 00:43:07,200
if

1047
00:43:07,200 --> 00:43:09,520
you don't have internet connection for a

1048
00:43:09,520 --> 00:43:10,839
long time

1049
00:43:10,839 --> 00:43:13,680
then after a while you will not have

1050
00:43:13,680 --> 00:43:14,880
information

1051
00:43:14,880 --> 00:43:18,000
on the vulnerabilities and dependencies

1052
00:43:18,000 --> 00:43:20,000
in the product source say a library in

1053
00:43:20,000 --> 00:43:21,440
the npm

1054
00:43:21,440 --> 00:43:23,520
package has this

1055
00:43:23,520 --> 00:43:25,680
vulnerability and you don't know this

1056
00:43:25,680 --> 00:43:27,200
and

1057
00:43:27,200 --> 00:43:28,319
all the other features should be

1058
00:43:28,319 --> 00:43:31,359
operational offline

1059
00:43:33,920 --> 00:43:35,680
thank you very much

1060
00:43:35,680 --> 00:43:38,560
i have two questions

1061
00:43:38,560 --> 00:43:42,000
well sometimes vulnerabilities work for

1062
00:43:42,000 --> 00:43:43,520
say one

1063
00:43:43,520 --> 00:43:46,800
language and you should describe

1064
00:43:46,800 --> 00:43:48,640
the version

1065
00:43:48,640 --> 00:43:49,760
used

1066
00:43:49,760 --> 00:43:50,800
for

1067
00:43:50,800 --> 00:43:53,520
the app so you need to pick it

1068
00:43:53,520 --> 00:43:55,200
in the plugin settings we have these

1069
00:43:55,200 --> 00:43:58,640
functions in java you can

1070
00:43:58,640 --> 00:44:00,480
pick between version

1071
00:44:00,480 --> 00:44:02,880
8 and 11 in the scanning sessions and we

1072
00:44:02,880 --> 00:44:04,880
don't have any anything else apart from

1073
00:44:04,880 --> 00:44:07,359
it why so do you have any plans to do

1074
00:44:07,359 --> 00:44:09,839
this

1075
00:44:10,240 --> 00:44:12,480
well this is more about the test

1076
00:44:12,480 --> 00:44:15,359
analysis analysis okay thank you

1077
00:44:15,359 --> 00:44:18,160
and my second question will be more

1078
00:44:18,160 --> 00:44:20,720
technical

1079
00:44:21,280 --> 00:44:23,280
you say that you

1080
00:44:23,280 --> 00:44:25,760
control

1081
00:44:28,960 --> 00:44:29,920
the

1082
00:44:29,920 --> 00:44:33,119
cpu capacity utilization so how do you

1083
00:44:33,119 --> 00:44:34,960
do it

1084
00:44:34,960 --> 00:44:36,400
how do you

1085
00:44:36,400 --> 00:44:38,560
make this comfortable for the user do

1086
00:44:38,560 --> 00:44:42,799
you have an analytical tool to do it

1087
00:44:43,599 --> 00:44:47,440
so this is done in absolute numbers

1088
00:44:48,319 --> 00:44:52,960
in a spamming mode we have uh the cap of

1089
00:44:52,960 --> 00:44:55,359
30 percent

1090
00:44:55,359 --> 00:44:56,560
for

1091
00:44:56,560 --> 00:44:58,560
analyzing the code

1092
00:44:58,560 --> 00:45:01,200
and depending on the operating system we

1093
00:45:01,200 --> 00:45:02,960
have

1094
00:45:02,960 --> 00:45:05,359
done it different layer for windows we

1095
00:45:05,359 --> 00:45:08,960
do it through the job objects

1096
00:45:09,119 --> 00:45:10,960
now for unix

1097
00:45:10,960 --> 00:45:12,000
we

1098
00:45:12,000 --> 00:45:14,640
have this uh in a more tricky way

1099
00:45:14,640 --> 00:45:17,119
through some interruptions and does it

1100
00:45:17,119 --> 00:45:19,520
use only one core so

1101
00:45:19,520 --> 00:45:21,440
how do you control it this is controlled

1102
00:45:21,440 --> 00:45:24,160
by the analyzer

1103
00:45:24,160 --> 00:45:25,359
i mean

1104
00:45:25,359 --> 00:45:26,319
the

1105
00:45:26,319 --> 00:45:27,200
net

1106
00:45:27,200 --> 00:45:28,319
part

1107
00:45:28,319 --> 00:45:31,040
of it and this controls the scanning

1108
00:45:31,040 --> 00:45:33,839
processes

1109
00:45:34,800 --> 00:45:36,480
to see

1110
00:45:36,480 --> 00:45:39,280
how much of the cpu capacity is being

1111
00:45:39,280 --> 00:45:41,839
used and do run this analysis for one

1112
00:45:41,839 --> 00:45:45,119
core or do you control every core to to

1113
00:45:45,119 --> 00:45:48,360
maintain this 30 cap

1114
00:45:48,360 --> 00:45:50,800
[Music]

1115
00:45:50,800 --> 00:45:52,720
when we start scanning we know how many

1116
00:45:52,720 --> 00:45:54,640
cores we have

1117
00:45:54,640 --> 00:45:57,200
and the total shouldn't be more than 30

1118
00:45:57,200 --> 00:46:00,200
percent

1119
00:46:01,440 --> 00:46:04,560
so the total for all the courts

1120
00:46:04,560 --> 00:46:05,359
well

1121
00:46:05,359 --> 00:46:07,760
i believe this is a bug thank you for

1122
00:46:07,760 --> 00:46:10,319
your question

1123
00:46:10,800 --> 00:46:12,000
i got here

1124
00:46:12,000 --> 00:46:15,920
i i see what you are driving at but uh

1125
00:46:15,920 --> 00:46:17,359
i cannot say

1126
00:46:17,359 --> 00:46:19,839
the same here okay

1127
00:46:19,839 --> 00:46:23,440
i believe that for every process so

1128
00:46:23,440 --> 00:46:26,960
we have this cap for every core

1129
00:46:26,960 --> 00:46:29,760
so we have three cores and for

1130
00:46:29,760 --> 00:46:30,880
um

1131
00:46:30,880 --> 00:46:33,359
every core it will be only 10 percent of

1132
00:46:33,359 --> 00:46:35,280
the cpu capacity and then we control it

1133
00:46:35,280 --> 00:46:37,280
throughout the scanning process

1134
00:46:37,280 --> 00:46:40,319
this is uh not dynamically

1135
00:46:40,319 --> 00:46:43,319
recalculated

1136
00:46:47,119 --> 00:46:49,440
hello

1137
00:46:49,920 --> 00:46:52,960
the alerts are split by severity

1138
00:46:52,960 --> 00:46:57,599
i are going to split them by confidence

1139
00:46:57,599 --> 00:47:00,560
any scanner brings about false positives

1140
00:47:00,560 --> 00:47:03,759
so i believe this would be nice

1141
00:47:04,000 --> 00:47:07,440
the extension for the categories

1142
00:47:07,440 --> 00:47:10,480
i mean how we assess the severity of the

1143
00:47:10,480 --> 00:47:12,079
vulnerabilities this is something

1144
00:47:12,079 --> 00:47:14,319
already planned

1145
00:47:14,319 --> 00:47:16,400
and vladimir has already answered this

1146
00:47:16,400 --> 00:47:17,920
question

1147
00:47:17,920 --> 00:47:21,200
but this is not for this year

1148
00:47:21,200 --> 00:47:23,280
and what about confidence how confident

1149
00:47:23,280 --> 00:47:26,960
we are that this is a vulnerability

1150
00:47:29,119 --> 00:47:31,440
okay whether our

1151
00:47:31,440 --> 00:47:34,400
plugin when analyzing the code

1152
00:47:34,400 --> 00:47:36,640
understands whether it's uh faults

1153
00:47:36,640 --> 00:47:39,839
positive or not

1154
00:47:45,680 --> 00:47:47,520
the short answer

1155
00:47:47,520 --> 00:47:50,839
now we have only one flag for

1156
00:47:50,839 --> 00:47:54,640
confidence so we see whether it is

1157
00:47:54,640 --> 00:47:57,920
suspected or verified vulnerability and

1158
00:47:57,920 --> 00:47:59,599
for the verifiable abilities we see

1159
00:47:59,599 --> 00:48:03,920
whether we have some other conditions

1160
00:48:05,520 --> 00:48:08,240
this is something we have started doing

1161
00:48:08,240 --> 00:48:10,640
for every vulnerability we want to have

1162
00:48:10,640 --> 00:48:12,960
the cvss

1163
00:48:12,960 --> 00:48:15,119
and this is not one of the same for all

1164
00:48:15,119 --> 00:48:17,520
the classes we wanted to be calculated

1165
00:48:17,520 --> 00:48:18,960
for every specific vulnerability in a

1166
00:48:18,960 --> 00:48:22,000
specific part of the code based on

1167
00:48:22,000 --> 00:48:24,559
all the criteria of how it was brought

1168
00:48:24,559 --> 00:48:27,359
to the code so the cbss will be

1169
00:48:27,359 --> 00:48:29,280
calculated with a

1170
00:48:29,280 --> 00:48:30,240
score

1171
00:48:30,240 --> 00:48:31,359
from

1172
00:48:31,359 --> 00:48:32,480
say

1173
00:48:32,480 --> 00:48:34,720
something little to 10. and when we do

1174
00:48:34,720 --> 00:48:36,559
it then in the ui

1175
00:48:36,559 --> 00:48:39,760
we will have some grouping slicing

1176
00:48:39,760 --> 00:48:42,160
dicing and filtering based on the cvs

1177
00:48:42,160 --> 00:48:43,280
css code

1178
00:48:43,280 --> 00:48:46,319
and since i have the mic now

1179
00:48:46,319 --> 00:48:49,359
two more things to mention

1180
00:48:49,359 --> 00:48:51,920
some say that in their plugin we have

1181
00:48:51,920 --> 00:48:53,200
some

1182
00:48:53,200 --> 00:48:55,280
small version of stat analysis this is

1183
00:48:55,280 --> 00:48:57,200
not the fact we use the same course

1184
00:48:57,200 --> 00:49:01,078
there we use for enterprise

1185
00:49:04,079 --> 00:49:06,160
technologically speaking

1186
00:49:06,160 --> 00:49:08,720
we don't have any

1187
00:49:08,720 --> 00:49:10,319
you know short versions or small

1188
00:49:10,319 --> 00:49:13,599
versions so if you use ai and if you use

1189
00:49:13,599 --> 00:49:15,520
plugins the results are going to be

1190
00:49:15,520 --> 00:49:17,760
always the same the difference will be

1191
00:49:17,760 --> 00:49:20,319
in time

1192
00:49:21,839 --> 00:49:24,319
okay we have another question

1193
00:49:24,319 --> 00:49:27,040
about your pattern

1194
00:49:27,359 --> 00:49:30,559
does it mean theoretically that we can

1195
00:49:30,559 --> 00:49:34,079
get rid of the inspector

1196
00:49:36,000 --> 00:49:39,359
well i mean if we have some trust in the

1197
00:49:39,359 --> 00:49:41,119
developers

1198
00:49:41,119 --> 00:49:42,880
well we are talking about the security

1199
00:49:42,880 --> 00:49:44,559
champions here so we are cool and

1200
00:49:44,559 --> 00:49:46,480
advanced and we can get rid of the

1201
00:49:46,480 --> 00:49:48,480
inspector and have the plugin

1202
00:49:48,480 --> 00:49:49,680
only

1203
00:49:49,680 --> 00:49:51,520
so

1204
00:49:51,520 --> 00:49:54,160
this is all about money yes now you can

1205
00:49:54,160 --> 00:49:57,359
do it you can take the plugin

1206
00:49:57,359 --> 00:49:58,880
without the enterprise version you can

1207
00:49:58,880 --> 00:50:00,400
use it

1208
00:50:00,400 --> 00:50:02,720
and you can get all this stuff so we are

1209
00:50:02,720 --> 00:50:05,359
doing it on purpose and we are sharing

1210
00:50:05,359 --> 00:50:08,079
these plugins for free on purpose so if

1211
00:50:08,079 --> 00:50:10,160
you don't need teamwork

1212
00:50:10,160 --> 00:50:12,640
go ahead and use it but if you want to

1213
00:50:12,640 --> 00:50:15,200
work as part of the team well in any way

1214
00:50:15,200 --> 00:50:17,359
at the review level

1215
00:50:17,359 --> 00:50:20,720
so to have pull requests and so on then

1216
00:50:20,720 --> 00:50:21,839
you will not

1217
00:50:21,839 --> 00:50:24,720
do without the application inspector

1218
00:50:24,720 --> 00:50:26,800
enterprise but this is not implemented

1219
00:50:26,800 --> 00:50:28,400
yet

1220
00:50:28,400 --> 00:50:29,760
okay

1221
00:50:29,760 --> 00:50:32,079
thank you

1222
00:50:32,079 --> 00:50:34,800
one more comment

1223
00:50:34,800 --> 00:50:36,800
why

1224
00:50:36,800 --> 00:50:39,839
i was silent when you talked about the

1225
00:50:39,839 --> 00:50:40,880
short

1226
00:50:40,880 --> 00:50:42,720
version of the

1227
00:50:42,720 --> 00:50:45,359
zest analyzer so in the current release

1228
00:50:45,359 --> 00:50:48,160
of the plugins we have only three

1229
00:50:48,160 --> 00:50:50,880
modules available

1230
00:50:50,880 --> 00:50:54,640
well abby two languages php and java

1231
00:50:54,640 --> 00:50:57,200
and the rest

1232
00:50:57,200 --> 00:50:59,599
is not released yet

1233
00:50:59,599 --> 00:51:02,480
i mean the plug-in spot

1234
00:51:02,480 --> 00:51:04,000
that's why

1235
00:51:04,000 --> 00:51:06,800
i was okay with the limited or shorter

1236
00:51:06,800 --> 00:51:07,760
version

1237
00:51:07,760 --> 00:51:09,119
of the analysis

1238
00:51:09,119 --> 00:51:10,480
we had some other questions but we don't

1239
00:51:10,480 --> 00:51:13,200
have any more time

1240
00:51:15,280 --> 00:51:18,640
thank you very much for your questions

1241
00:51:18,640 --> 00:51:20,559
i'd like to pick

1242
00:51:20,559 --> 00:51:23,359
do i need to pick one

1243
00:51:23,359 --> 00:51:24,800
this is tough

1244
00:51:24,800 --> 00:51:28,319
we had a very good question

1245
00:51:28,319 --> 00:51:30,559
about uh loading

1246
00:51:30,559 --> 00:51:32,720
i mean the capacity utilization

1247
00:51:32,720 --> 00:51:34,839
and we had a lot of

1248
00:51:34,839 --> 00:51:37,040
questions on

1249
00:51:37,040 --> 00:51:38,640
the analysis

1250
00:51:38,640 --> 00:51:40,559
well since uh

1251
00:51:40,559 --> 00:51:43,440
i was meant to talk about the plugins

1252
00:51:43,440 --> 00:51:45,680
primarily then the best question comes

1253
00:51:45,680 --> 00:51:46,720
from

1254
00:51:46,720 --> 00:51:48,160
this guy

1255
00:51:48,160 --> 00:51:50,400
who managed to

1256
00:51:50,400 --> 00:51:53,280
throw me back

