1
00:00:05,359 --> 00:00:07,440
we are tackling practical information

2
00:00:07,440 --> 00:00:09,040
security

3
00:00:09,040 --> 00:00:11,360
and

4
00:00:11,519 --> 00:00:17,160
i'm going to speak about these bypass of

5
00:00:26,160 --> 00:00:27,199
i can't

6
00:00:27,199 --> 00:00:30,480
seem to figure it out with with the

7
00:00:30,480 --> 00:00:34,719
remote control so talking about

8
00:00:34,800 --> 00:00:37,680
the analysis

9
00:00:37,920 --> 00:00:41,680
in the waf and wef http

10
00:00:41,680 --> 00:00:44,399
f traffic we're talking about signature

11
00:00:44,399 --> 00:00:46,719
analysis as you know and machine

12
00:00:46,719 --> 00:00:48,079
learning has been

13
00:00:48,079 --> 00:00:51,760
used quite heavily uh for a major part

14
00:00:51,760 --> 00:00:54,239
of people machine learning still remains

15
00:00:54,239 --> 00:00:56,640
a kind of a marketing feature

16
00:00:56,640 --> 00:00:58,879
so there has not been much trust

17
00:00:58,879 --> 00:01:00,719
developed to machine learning and i

18
00:01:00,719 --> 00:01:03,680
would like to unveil this myth

19
00:01:03,680 --> 00:01:07,439
uh so this signature analysis uh has two

20
00:01:07,439 --> 00:01:10,320
deficiencies uh so of course it's fast

21
00:01:10,320 --> 00:01:12,240
uh it's very fast but it has two major

22
00:01:12,240 --> 00:01:14,560
deficiencies for lots of false positives

23
00:01:14,560 --> 00:01:15,920
and

24
00:01:15,920 --> 00:01:20,080
skipping attacks so to make sure the wf

25
00:01:20,080 --> 00:01:20,960
works

26
00:01:20,960 --> 00:01:23,280
well they try to balance i mean the

27
00:01:23,280 --> 00:01:24,960
developers

28
00:01:24,960 --> 00:01:28,159
and they make signatures more aggressive

29
00:01:28,159 --> 00:01:30,320
and

30
00:01:32,240 --> 00:01:35,040
they make it less aggressive

31
00:01:35,040 --> 00:01:38,320
and they're skipping attacks

32
00:01:39,520 --> 00:01:43,679
this example i'm going to show is simple

33
00:01:44,320 --> 00:01:48,000
we're talking about php select

34
00:01:48,000 --> 00:01:49,759
two operators

35
00:01:49,759 --> 00:01:51,920
have been used in this

36
00:01:51,920 --> 00:01:55,119
sql injection so if this rule had been

37
00:01:55,119 --> 00:01:56,960
developed poorly

38
00:01:56,960 --> 00:01:58,719
select

39
00:01:58,719 --> 00:02:01,600
or org are used here so what's going to

40
00:02:01,600 --> 00:02:04,000
happen here there'll be the blocking the

41
00:02:04,000 --> 00:02:06,880
blocking and

42
00:02:07,280 --> 00:02:10,160
the false positive will initiate as far

43
00:02:10,160 --> 00:02:11,599
as skipped

44
00:02:11,599 --> 00:02:14,319
attacks are concerned uh i'm going to

45
00:02:14,319 --> 00:02:17,680
talk about this recent vulnerability log

46
00:02:17,680 --> 00:02:19,200
4j

47
00:02:19,200 --> 00:02:20,840
and

48
00:02:20,840 --> 00:02:24,720
initially we're going to take this first

49
00:02:24,720 --> 00:02:28,080
string and this is what it looks like

50
00:02:28,080 --> 00:02:29,520
jndi

51
00:02:29,520 --> 00:02:31,840
etc so some of the developers had

52
00:02:31,840 --> 00:02:33,760
started writing this kind of signature

53
00:02:33,760 --> 00:02:36,959
it would block it and then

54
00:02:36,959 --> 00:02:39,519
it had been known previously that

55
00:02:39,519 --> 00:02:41,280
instead of ldap

56
00:02:41,280 --> 00:02:44,319
some other protocols tns lmi protocols

57
00:02:44,319 --> 00:02:46,160
can be used here but

58
00:02:46,160 --> 00:02:50,239
after those signatures had been created

59
00:02:50,239 --> 00:02:52,560
we have some bypass

60
00:02:52,560 --> 00:02:55,760
methods emerging so the attackers

61
00:02:55,760 --> 00:02:58,720
may dissolve the code somehow so this

62
00:02:58,720 --> 00:03:00,080
payload

63
00:03:00,080 --> 00:03:01,280
actually

64
00:03:01,280 --> 00:03:05,760
initiates at the end instance

65
00:03:05,760 --> 00:03:07,840
but at the same time

66
00:03:07,840 --> 00:03:10,800
it would bypass the signatures

67
00:03:10,800 --> 00:03:12,480
so in red

68
00:03:12,480 --> 00:03:16,760
it's been highlighted like that

69
00:03:20,159 --> 00:03:22,480
so this means that the signatures are

70
00:03:22,480 --> 00:03:24,720
not ideal but we will come back to this

71
00:03:24,720 --> 00:03:25,519
so

72
00:03:25,519 --> 00:03:28,560
let's do it in order

73
00:03:28,560 --> 00:03:32,319
first of all we split the payload

74
00:03:32,319 --> 00:03:36,239
the request we use the command symbols

75
00:03:36,239 --> 00:03:39,599
asterisk slash

76
00:03:39,599 --> 00:03:42,319
the commas

77
00:03:43,280 --> 00:03:44,879
you know the brackets

78
00:03:44,879 --> 00:03:47,519
no byte symbols

79
00:03:47,519 --> 00:03:49,440
plus for most of the applications you

80
00:03:49,440 --> 00:03:51,280
know that

81
00:03:51,280 --> 00:03:54,640
the plus and the space are the same

82
00:03:54,640 --> 00:03:58,559
but if we talk about something more

83
00:03:58,799 --> 00:04:00,879
smart

84
00:04:00,879 --> 00:04:03,760
let me show you

85
00:04:12,480 --> 00:04:14,959
so the construct is like this cell

86
00:04:14,959 --> 00:04:16,079
plus

87
00:04:16,079 --> 00:04:18,320
act

88
00:04:18,320 --> 00:04:21,519
what does this structure brings bring us

89
00:04:21,519 --> 00:04:24,000
if the waf

90
00:04:24,000 --> 00:04:26,720
takes those bad words

91
00:04:26,720 --> 00:04:27,520
from

92
00:04:27,520 --> 00:04:30,000
the request then it will remove this

93
00:04:30,000 --> 00:04:33,040
select but after it cuts off the select

94
00:04:33,040 --> 00:04:34,880
what we will get

95
00:04:34,880 --> 00:04:36,639
we'll get another select

96
00:04:36,639 --> 00:04:40,479
and this is how you might try to bypass

97
00:04:40,479 --> 00:04:43,759
this also url and code is used you know

98
00:04:43,759 --> 00:04:45,360
what it is

99
00:04:45,360 --> 00:04:49,680
but wfs usually normalize this

100
00:04:49,680 --> 00:04:50,479
to

101
00:04:50,479 --> 00:04:52,800
ordinary utf-8

102
00:04:52,800 --> 00:04:54,240
text latin

103
00:04:54,240 --> 00:04:55,759
or whatever

104
00:04:55,759 --> 00:04:58,479
it sees after the decoding but what if

105
00:04:58,479 --> 00:05:01,919
we do a double or triple url in code

106
00:05:01,919 --> 00:05:03,680
this will depend on the amount of

107
00:05:03,680 --> 00:05:05,440
iterations that

108
00:05:05,440 --> 00:05:07,199
waf

109
00:05:07,199 --> 00:05:08,840
has for

110
00:05:08,840 --> 00:05:10,720
encoding

111
00:05:10,720 --> 00:05:13,919
if we do two in codes and the waf

112
00:05:13,919 --> 00:05:17,759
decodes only once then we can bypass it

113
00:05:17,759 --> 00:05:21,759
let's move on we have some time right

114
00:05:22,320 --> 00:05:25,840
couple of words about xss

115
00:05:26,639 --> 00:05:29,440
quite often you see the signatures

116
00:05:29,440 --> 00:05:31,680
written as constructs

117
00:05:31,680 --> 00:05:33,440
so if

118
00:05:33,440 --> 00:05:35,039
you expect

119
00:05:35,039 --> 00:05:37,360
the tag to be closed then some tags

120
00:05:37,360 --> 00:05:40,560
would walk without closing

121
00:05:40,560 --> 00:05:43,199
also the old technique of using

122
00:05:43,199 --> 00:05:46,240
non-registry dependent symbols

123
00:05:46,240 --> 00:05:50,039
symbols in different registers

124
00:05:52,000 --> 00:05:55,039
so besides that

125
00:05:55,120 --> 00:05:58,639
we often see

126
00:05:58,960 --> 00:06:00,400
using

127
00:06:00,400 --> 00:06:02,240
the usage of

128
00:06:02,240 --> 00:06:06,319
other than utf encodings you'd have 8

129
00:06:06,319 --> 00:06:08,319
with x

130
00:06:08,319 --> 00:06:10,479
16 32

131
00:06:10,479 --> 00:06:13,039
half and full white forms

132
00:06:13,039 --> 00:06:15,199
it would look like the ordinary latin

133
00:06:15,199 --> 00:06:16,720
text but

134
00:06:16,720 --> 00:06:18,960
with the spaces in between but this

135
00:06:18,960 --> 00:06:20,960
technique can work

136
00:06:20,960 --> 00:06:23,758
and it works

137
00:06:24,160 --> 00:06:28,160
with the where operator for databases

138
00:06:28,160 --> 00:06:30,000
and another constructs

139
00:06:30,000 --> 00:06:32,560
base64 and your own calls that i

140
00:06:32,560 --> 00:06:34,960
mentioned

141
00:06:34,960 --> 00:06:37,199
to be more visual i have prepared a

142
00:06:37,199 --> 00:06:39,120
number of screenshots to

143
00:06:39,120 --> 00:06:41,440
give you

144
00:06:42,319 --> 00:06:46,280
the alert is split

145
00:06:48,639 --> 00:06:49,759
something

146
00:06:49,759 --> 00:06:53,520
similar happens in the next screenshot

147
00:06:53,520 --> 00:06:56,240
with a prompt

148
00:06:56,400 --> 00:06:59,280
p and r are represented as utf-16

149
00:06:59,280 --> 00:07:01,120
symbols

150
00:07:01,120 --> 00:07:02,560
but the technique

151
00:07:02,560 --> 00:07:06,400
at least based on what the author says

152
00:07:06,400 --> 00:07:07,759
works fine

153
00:07:07,759 --> 00:07:09,759
with this waf

154
00:07:09,759 --> 00:07:12,800
maybe it has a mistake

155
00:07:13,599 --> 00:07:14,840
next with

156
00:07:14,840 --> 00:07:19,039
amazon quite an old screenshot you see

157
00:07:19,039 --> 00:07:22,240
an attempt to add

158
00:07:23,039 --> 00:07:26,719
to an exercise payload

159
00:07:29,759 --> 00:07:32,400
an exclamation mark and then the bypass

160
00:07:32,400 --> 00:07:33,599
is there

161
00:07:33,599 --> 00:07:35,280
who will guess what's happening what

162
00:07:35,280 --> 00:07:38,160
happens here what is lacking here

163
00:07:38,160 --> 00:07:41,759
yeah there's no i letter

164
00:07:42,960 --> 00:07:44,879
so in the payload of script confirm

165
00:07:44,879 --> 00:07:48,240
script there's no i

166
00:07:51,280 --> 00:07:53,599
and we have a pg spell

167
00:07:53,599 --> 00:07:56,639
function you just spell suggest function

168
00:07:56,639 --> 00:08:00,080
that's something like t9 in php it will

169
00:08:00,080 --> 00:08:02,879
complete the construct to script confirm

170
00:08:02,879 --> 00:08:06,160
script so the waff will be bypassed

171
00:08:06,160 --> 00:08:10,080
but the payload will successfully work

172
00:08:10,080 --> 00:08:14,878
in the web application did you get it

173
00:08:16,319 --> 00:08:19,759
rc and osci

174
00:08:22,720 --> 00:08:24,879
this all has to do with bash when the

175
00:08:24,879 --> 00:08:28,080
application sends something to bash and

176
00:08:28,080 --> 00:08:30,720
it works as an end interpreter

177
00:08:30,720 --> 00:08:31,919
and

178
00:08:31,919 --> 00:08:34,719
you can split the request so

179
00:08:34,719 --> 00:08:38,080
a very famous one

180
00:08:38,080 --> 00:08:39,519
is a bean cut

181
00:08:39,519 --> 00:08:41,919
at the same person there

182
00:08:41,919 --> 00:08:43,120
that

183
00:08:43,120 --> 00:08:44,959
with replacements

184
00:08:44,959 --> 00:08:46,800
uh with the question marks but if you

185
00:08:46,800 --> 00:08:49,040
send this construct to

186
00:08:49,040 --> 00:08:51,680
the to bash that it will work

187
00:08:51,680 --> 00:08:53,839
but how would you create a signature

188
00:08:53,839 --> 00:08:57,040
that will work on this class of

189
00:08:57,040 --> 00:08:58,720
of bypasses

190
00:08:58,720 --> 00:09:01,680
can you create one

191
00:09:02,800 --> 00:09:05,120
what will we

192
00:09:05,120 --> 00:09:07,680
put in in the signature too many

193
00:09:07,680 --> 00:09:10,880
question marks or something else

194
00:09:10,880 --> 00:09:13,360
so i'll come back to this example to

195
00:09:13,360 --> 00:09:16,160
give you some ml context

196
00:09:16,160 --> 00:09:17,440
and

197
00:09:17,440 --> 00:09:18,320
with

198
00:09:18,320 --> 00:09:21,040
cut etc

199
00:09:21,040 --> 00:09:22,720
pswd

200
00:09:22,720 --> 00:09:26,959
then we do not initialize a variable

201
00:09:26,959 --> 00:09:28,720
and it's been

202
00:09:28,720 --> 00:09:32,160
cut and then it runs in bash

203
00:09:32,160 --> 00:09:34,959
so machine learning a couple of words

204
00:09:34,959 --> 00:09:38,880
it's a separate presentation and

205
00:09:38,880 --> 00:09:40,000
ml

206
00:09:40,000 --> 00:09:41,519
specifically

207
00:09:41,519 --> 00:09:45,200
works based on not on some specific

208
00:09:45,200 --> 00:09:48,320
static data or

209
00:09:48,320 --> 00:09:52,720
principles but based on the features

210
00:09:52,720 --> 00:09:54,640
if we prepare

211
00:09:54,640 --> 00:09:56,880
and add to the data set

212
00:09:56,880 --> 00:09:59,600
the attacks

213
00:09:59,839 --> 00:10:02,079
that we need then it will understand

214
00:10:02,079 --> 00:10:04,399
that similar attacks that

215
00:10:04,399 --> 00:10:07,120
look like this will work so the it

216
00:10:07,120 --> 00:10:10,000
enables to block the attacks that cannot

217
00:10:10,000 --> 00:10:10,720
be

218
00:10:10,720 --> 00:10:11,839
blocked

219
00:10:11,839 --> 00:10:14,320
with the signature methods so if do you

220
00:10:14,320 --> 00:10:16,560
know

221
00:10:16,880 --> 00:10:18,640
how to how to understand it is machine

222
00:10:18,640 --> 00:10:21,120
learning if it's written on python

223
00:10:21,120 --> 00:10:22,880
uh then it's probably machine learning

224
00:10:22,880 --> 00:10:27,600
if it's in powerpoint then it's ai

225
00:10:27,680 --> 00:10:30,160
so how do you check

226
00:10:30,160 --> 00:10:31,440
how do you

227
00:10:31,440 --> 00:10:32,880
check the

228
00:10:32,880 --> 00:10:34,720
wf bypass

229
00:10:34,720 --> 00:10:37,519
there is a set of python scripts and the

230
00:10:37,519 --> 00:10:39,200
docker image

231
00:10:39,200 --> 00:10:41,680
can be downloaded

232
00:10:41,680 --> 00:10:44,079
there's a lot of payloads

233
00:10:44,079 --> 00:10:45,360
encodings

234
00:10:45,360 --> 00:10:47,839
and tools

235
00:10:48,880 --> 00:10:52,880
and it can let you check your own wf

236
00:10:52,880 --> 00:10:54,240
am i in time

237
00:10:54,240 --> 00:10:55,440
thanks

238
00:10:55,440 --> 00:10:57,120
please feel free to ask your questions

239
00:10:57,120 --> 00:11:00,000
and i'll be here so no worries we can

240
00:11:00,000 --> 00:11:04,600
chat afterwards questions please

