1
00:00:03,840 --> 00:00:07,359
hi there my name is alexey masklin

2
00:00:07,359 --> 00:00:09,920
and this is daniel saderoff saderin my

3
00:00:09,920 --> 00:00:11,200
colleague

4
00:00:11,200 --> 00:00:15,280
and we are going to talk to you today

5
00:00:15,280 --> 00:00:17,279
about and your approach to automated

6
00:00:17,279 --> 00:00:19,199
generation of exploits

7
00:00:19,199 --> 00:00:22,000
uh for major web applications jointly

8
00:00:22,000 --> 00:00:25,359
was alexei uh blackhawk we developed and

9
00:00:25,359 --> 00:00:27,119
implemented first version of application

10
00:00:27,119 --> 00:00:29,279
inspector it's a

11
00:00:29,279 --> 00:00:32,000
uh statistic analyzer that generates

12
00:00:32,000 --> 00:00:34,719
exploits

13
00:00:37,280 --> 00:00:41,600
we talked about it with sergey kardashek

14
00:00:41,600 --> 00:00:42,840
in

15
00:00:42,840 --> 00:00:45,280
2013 and then

16
00:00:45,280 --> 00:00:48,399
in greater details

17
00:00:49,840 --> 00:00:50,760
in

18
00:00:50,760 --> 00:00:53,440
2014 in this conference

19
00:00:53,440 --> 00:00:54,719
since then

20
00:00:54,719 --> 00:00:57,360
a lot of time has passed

21
00:00:57,360 --> 00:01:00,239
we are in ai4 version application

22
00:01:00,239 --> 00:01:02,800
inspector four zero version and here are

23
00:01:02,800 --> 00:01:04,559
the most important steps and the most

24
00:01:04,559 --> 00:01:06,880
important changes introduced into the

25
00:01:06,880 --> 00:01:08,960
system it has become better more

26
00:01:08,960 --> 00:01:12,919
scalable etc

27
00:01:13,200 --> 00:01:14,320
a lot of

28
00:01:14,320 --> 00:01:16,000
improvements

29
00:01:16,000 --> 00:01:17,360
have been

30
00:01:17,360 --> 00:01:19,439
made and

31
00:01:19,439 --> 00:01:22,000
mr kashikov talked about it

32
00:01:22,000 --> 00:01:23,280
yesterday

33
00:01:23,280 --> 00:01:26,159
uh not yesterday i'm sorry last

34
00:01:26,159 --> 00:01:28,560
last phd

35
00:01:28,560 --> 00:01:30,159
conference

36
00:01:30,159 --> 00:01:31,200
so

37
00:01:31,200 --> 00:01:33,119
this is what we are

38
00:01:33,119 --> 00:01:36,320
dealing with and we are now developing a

39
00:01:36,320 --> 00:01:39,280
new kernel that allows to identify

40
00:01:39,280 --> 00:01:42,799
more vulnerabilities that jeopardize

41
00:01:42,799 --> 00:01:45,920
web applications in order to understand

42
00:01:45,920 --> 00:01:47,759
what are the types of vulnerabilities we

43
00:01:47,759 --> 00:01:50,640
are now capable of finding let us start

44
00:01:50,640 --> 00:01:52,560
in the very beginning with the classical

45
00:01:52,560 --> 00:01:54,240
vulnerabilities

46
00:01:54,240 --> 00:01:55,840
in this slide

47
00:01:55,840 --> 00:01:57,759
you can see part of the

48
00:01:57,759 --> 00:01:58,799
code

49
00:01:58,799 --> 00:02:00,479
it's a java code

50
00:02:00,479 --> 00:02:01,600
and

51
00:02:01,600 --> 00:02:04,000
you can see here all the elements of

52
00:02:04,000 --> 00:02:06,479
vulnerable code

53
00:02:06,479 --> 00:02:10,160
that one would need to analyze

54
00:02:10,160 --> 00:02:13,520
right that one would need to analyze

55
00:02:13,520 --> 00:02:16,400
in order to

56
00:02:18,959 --> 00:02:21,599
come up with an exploitable application

57
00:02:21,599 --> 00:02:23,280
and to give information on whether or

58
00:02:23,280 --> 00:02:27,040
not his code is vulnerable so that he

59
00:02:27,040 --> 00:02:28,560
can check

60
00:02:28,560 --> 00:02:31,040
vulnerability by way of using this

61
00:02:31,040 --> 00:02:32,560
exploit

62
00:02:32,560 --> 00:02:34,720
so

63
00:02:35,599 --> 00:02:37,599
we should have a database on potentially

64
00:02:37,599 --> 00:02:38,800
dangerous

65
00:02:38,800 --> 00:02:40,879
functions a general understanding of

66
00:02:40,879 --> 00:02:41,760
what

67
00:02:41,760 --> 00:02:45,040
can be used as a an entry point

68
00:02:45,040 --> 00:02:47,120
here our entry point

69
00:02:47,120 --> 00:02:50,800
is a creation of file object and what

70
00:02:50,800 --> 00:02:52,000
follows

71
00:02:52,000 --> 00:02:54,239
is that we need to analyze

72
00:02:54,239 --> 00:02:57,519
the course of execution

73
00:02:57,519 --> 00:03:00,959
and come up with the

74
00:03:02,080 --> 00:03:05,080
achievability

75
00:03:05,360 --> 00:03:07,120
conditions

76
00:03:07,120 --> 00:03:08,800
these are classical vulnerabilities you

77
00:03:08,800 --> 00:03:11,360
can look at various languages various

78
00:03:11,360 --> 00:03:12,800
entry points

79
00:03:12,800 --> 00:03:14,959
we can analyze

80
00:03:14,959 --> 00:03:16,319
all kinds of

81
00:03:16,319 --> 00:03:19,120
requests and calls

82
00:03:19,120 --> 00:03:20,800
but presently

83
00:03:20,800 --> 00:03:22,879
this is something that is very

84
00:03:22,879 --> 00:03:24,080
simplistic

85
00:03:24,080 --> 00:03:26,480
very straightforward and a lot of

86
00:03:26,480 --> 00:03:28,720
static analyzers

87
00:03:28,720 --> 00:03:30,480
allow us to identify these kind of

88
00:03:30,480 --> 00:03:34,399
vulnerabilities in their own ways

89
00:03:34,640 --> 00:03:37,680
and we are going to

90
00:03:37,680 --> 00:03:39,519
talk to you today and demonstrate to you

91
00:03:39,519 --> 00:03:40,959
today

92
00:03:40,959 --> 00:03:44,640
an approach to find exploit defined

93
00:03:44,640 --> 00:03:47,200
vulnerabilities through exploits

94
00:03:47,200 --> 00:03:48,000
for

95
00:03:48,000 --> 00:03:50,239
more difficult complicated kinds of

96
00:03:50,239 --> 00:03:52,319
vulnerabilities

97
00:03:52,319 --> 00:03:54,080
and let me give you some more

98
00:03:54,080 --> 00:03:55,760
information

99
00:03:55,760 --> 00:03:57,920
what type of vulnerabilities

100
00:03:57,920 --> 00:03:59,760
we're talking about

101
00:03:59,760 --> 00:04:01,360
in this slide

102
00:04:01,360 --> 00:04:04,080
we're giving you

103
00:04:04,080 --> 00:04:10,239
an example on cbe 2020 28 248.

104
00:04:11,760 --> 00:04:13,920
looking at the official information on

105
00:04:13,920 --> 00:04:15,280
this cv

106
00:04:15,280 --> 00:04:17,519
you'll see just three lines

107
00:04:17,519 --> 00:04:19,519
and all you can

108
00:04:19,519 --> 00:04:21,759
uh understand it's

109
00:04:21,759 --> 00:04:23,120
all you can understand is that it's

110
00:04:23,120 --> 00:04:25,600
explodable hub-based buffer flow and

111
00:04:25,600 --> 00:04:27,600
that's it

112
00:04:27,600 --> 00:04:30,479
it's not enough to understand what goes

113
00:04:30,479 --> 00:04:32,000
on there

114
00:04:32,000 --> 00:04:34,450
and to understand

115
00:04:34,450 --> 00:04:37,550
[Music]

116
00:04:38,479 --> 00:04:41,120
whether or not the node.js js

117
00:04:41,120 --> 00:04:42,639
developer needs to

118
00:04:42,639 --> 00:04:44,800
do something about it remediate it in

119
00:04:44,800 --> 00:04:47,360
any way well this is

120
00:04:47,360 --> 00:04:49,440
nothing that can help the developer do

121
00:04:49,440 --> 00:04:51,199
that

122
00:04:51,199 --> 00:04:53,199
you can see a png

123
00:04:53,199 --> 00:04:56,680
image library

124
00:04:57,680 --> 00:04:59,919
it's part of your standard node.js and

125
00:04:59,919 --> 00:05:01,520
so you're interest if you're interested

126
00:05:01,520 --> 00:05:03,680
you can follow the link on github for

127
00:05:03,680 --> 00:05:04,960
this project

128
00:05:04,960 --> 00:05:06,800
anyway

129
00:05:06,800 --> 00:05:08,720
and we're even more lucky

130
00:05:08,720 --> 00:05:10,740
there's a write-up on this topic

131
00:05:10,740 --> 00:05:12,240
[Music]

132
00:05:12,240 --> 00:05:15,520
so if you are interested

133
00:05:16,000 --> 00:05:16,919
a lot

134
00:05:16,919 --> 00:05:20,719
is being said there

135
00:05:21,120 --> 00:05:23,280
but anyway

136
00:05:23,280 --> 00:05:24,960
they're talking about the vulnerability

137
00:05:24,960 --> 00:05:26,880
itself

138
00:05:26,880 --> 00:05:28,320
not the way

139
00:05:28,320 --> 00:05:29,759
it can

140
00:05:29,759 --> 00:05:31,759
come by or not combine in a web

141
00:05:31,759 --> 00:05:33,120
application

142
00:05:33,120 --> 00:05:35,440
so what follows

143
00:05:35,440 --> 00:05:36,840
is that

144
00:05:36,840 --> 00:05:41,919
a your regular competencies and skills

145
00:05:41,919 --> 00:05:44,240
of node.js developer

146
00:05:44,240 --> 00:05:45,919
are not enough

147
00:05:45,919 --> 00:05:48,320
to write a code

148
00:05:48,320 --> 00:05:50,960
that would

149
00:05:51,440 --> 00:05:53,039
be invincible

150
00:05:53,039 --> 00:05:56,479
to this kind of bug

151
00:05:56,800 --> 00:06:00,479
yes the developer would be able to

152
00:06:00,479 --> 00:06:03,520
effectively patch the library but

153
00:06:03,520 --> 00:06:05,840
how about the new non-public

154
00:06:05,840 --> 00:06:07,360
vulnerabilities

155
00:06:07,360 --> 00:06:09,520
and how dangerous they are for his

156
00:06:09,520 --> 00:06:11,360
particular public location probably they

157
00:06:11,360 --> 00:06:13,039
are not dangerous and

158
00:06:13,039 --> 00:06:15,440
he doesn't have to do anything so this

159
00:06:15,440 --> 00:06:18,240
is the point of our research

160
00:06:18,240 --> 00:06:21,360
this is what we learned how to find

161
00:06:21,360 --> 00:06:23,039
we'll learn how to automatically

162
00:06:23,039 --> 00:06:24,960
identify these kind of vulnerabilities

163
00:06:24,960 --> 00:06:26,319
in particular

164
00:06:26,319 --> 00:06:28,479
uh web applications

165
00:06:28,479 --> 00:06:32,160
oh how was this a statistic uh

166
00:06:32,160 --> 00:06:33,199
as a

167
00:06:33,199 --> 00:06:36,560
statistic analytics tool

168
00:06:36,560 --> 00:06:40,560
in one of the previous conferences we

169
00:06:40,560 --> 00:06:42,319
gave information on how it works and

170
00:06:42,319 --> 00:06:44,479
these are the three

171
00:06:44,479 --> 00:06:46,160
main

172
00:06:46,160 --> 00:06:47,759
bullet points

173
00:06:47,759 --> 00:06:50,639
two three things that you need to to do

174
00:06:50,639 --> 00:06:52,960
to analyze the source code

175
00:06:52,960 --> 00:06:55,039
you need to have an intermediate

176
00:06:55,039 --> 00:06:56,720
instance

177
00:06:56,720 --> 00:06:58,800
for subsequent analysis

178
00:06:58,800 --> 00:07:01,120
and then you should use that one

179
00:07:01,120 --> 00:07:02,479
to come up

180
00:07:02,479 --> 00:07:04,720
with a logical formula

181
00:07:04,720 --> 00:07:06,319
like an abstract

182
00:07:06,319 --> 00:07:08,639
program interpretation

183
00:07:08,639 --> 00:07:10,080
and then

184
00:07:10,080 --> 00:07:12,960
we should send it to

185
00:07:12,960 --> 00:07:15,440
symbol solver to understand

186
00:07:15,440 --> 00:07:18,160
what we've got

187
00:07:18,400 --> 00:07:19,360
so

188
00:07:19,360 --> 00:07:20,319
this

189
00:07:20,319 --> 00:07:21,919
this is something that we've worked

190
00:07:21,919 --> 00:07:24,160
additionally upon to find the

191
00:07:24,160 --> 00:07:26,800
vulnerabilities i have in mind when they

192
00:07:26,800 --> 00:07:29,199
are more accurate in

193
00:07:29,199 --> 00:07:30,479
analyzing

194
00:07:30,479 --> 00:07:33,599
uh execution

195
00:07:34,000 --> 00:07:36,960
even taking recur recursive action in

196
00:07:36,960 --> 00:07:38,560
account into account

197
00:07:38,560 --> 00:07:40,639
another important task

198
00:07:40,639 --> 00:07:43,280
was to

199
00:07:43,440 --> 00:07:48,240
pass the data on binary vulnerabilities

200
00:07:48,240 --> 00:07:51,120
and introduce the particular exploits

201
00:07:51,120 --> 00:07:52,800
that are related to binary

202
00:07:52,800 --> 00:07:54,879
vulnerabilities so this is

203
00:07:54,879 --> 00:07:57,520
our algorithm in short

204
00:07:57,520 --> 00:07:59,840
so now

205
00:08:00,160 --> 00:08:01,759
the location in which we're going to

206
00:08:01,759 --> 00:08:03,120
demonstrate it

207
00:08:03,120 --> 00:08:04,720
in order to demonstrate this approach in

208
00:08:04,720 --> 00:08:06,240
this algorithm

209
00:08:06,240 --> 00:08:07,360
we picked

210
00:08:07,360 --> 00:08:09,039
php

211
00:08:09,039 --> 00:08:11,120
object injection

212
00:08:11,120 --> 00:08:13,440
it's fun stuff a lot of vulnerabilities

213
00:08:13,440 --> 00:08:15,280
there a lot of stuff to

214
00:08:15,280 --> 00:08:17,919
you know do our trainings upon and to

215
00:08:17,919 --> 00:08:20,479
search for

216
00:08:20,479 --> 00:08:24,840
in php object injection what you have

217
00:08:24,840 --> 00:08:27,919
is vulnerabilities that look very much

218
00:08:27,919 --> 00:08:31,039
like your classical ones

219
00:08:31,039 --> 00:08:32,559
you can see here

220
00:08:32,559 --> 00:08:36,640
this tract which is our entry point

221
00:08:36,640 --> 00:08:39,919
it's logical uh method call then this

222
00:08:39,919 --> 00:08:43,440
structure starts to execute

223
00:08:43,440 --> 00:08:46,800
and we get a dentures function there so

224
00:08:46,800 --> 00:08:48,959
this is your standard

225
00:08:48,959 --> 00:08:52,518
management flow

226
00:08:54,399 --> 00:08:56,640
and we need to calculate all

227
00:08:56,640 --> 00:08:58,399
everything and then uh make our

228
00:08:58,399 --> 00:09:01,760
conclusions you know uh classical way of

229
00:09:01,760 --> 00:09:04,880
operation with classical

230
00:09:04,880 --> 00:09:08,080
uh vulnerabilities but there are also um

231
00:09:08,080 --> 00:09:11,040
binary vulnerabilities

232
00:09:11,040 --> 00:09:12,959
many of them

233
00:09:12,959 --> 00:09:14,399
stephan acer

234
00:09:14,399 --> 00:09:16,959
mentioned it

235
00:09:17,040 --> 00:09:20,880
back in 2010

236
00:09:21,200 --> 00:09:23,360
a lot of similar presentations were done

237
00:09:23,360 --> 00:09:27,040
at black hat and other conferences

238
00:09:27,440 --> 00:09:29,440
and he was uh

239
00:09:29,440 --> 00:09:30,959
telling us that everything is very

240
00:09:30,959 --> 00:09:33,279
vulnerable everything is really bad and

241
00:09:33,279 --> 00:09:36,560
he was talking to us about the technique

242
00:09:36,560 --> 00:09:38,640
but not about particular exploits and

243
00:09:38,640 --> 00:09:40,080
how to deal

244
00:09:40,080 --> 00:09:43,120
uh with it and how to check

245
00:09:43,120 --> 00:09:44,800
about applications

246
00:09:44,800 --> 00:09:47,279
for vulnerabilities

247
00:09:47,279 --> 00:09:50,279
so

248
00:09:50,399 --> 00:09:51,279
these

249
00:09:51,279 --> 00:09:52,720
um are the

250
00:09:52,720 --> 00:09:56,160
mentionings of his um

251
00:09:56,399 --> 00:09:58,080
of his

252
00:09:58,080 --> 00:09:59,600
presentations

253
00:09:59,600 --> 00:10:01,680
and then avenid

254
00:10:01,680 --> 00:10:04,480
suggested a new way of

255
00:10:04,480 --> 00:10:08,800
exploiting this type of vulnerabilities

256
00:10:08,800 --> 00:10:12,800
well to be quite frank with here

257
00:10:13,600 --> 00:10:15,360
when stefan was making his first

258
00:10:15,360 --> 00:10:17,360
presentation and it's been more than 10

259
00:10:17,360 --> 00:10:18,800
years

260
00:10:18,800 --> 00:10:21,279
a lot of bugs have been found

261
00:10:21,279 --> 00:10:24,320
here which is demonstrating a very

262
00:10:24,320 --> 00:10:25,760
smallish

263
00:10:25,760 --> 00:10:27,600
couple of branches

264
00:10:27,600 --> 00:10:29,519
of uh

265
00:10:29,519 --> 00:10:32,480
our bug tree one ticket is related to

266
00:10:32,480 --> 00:10:33,200
the

267
00:10:33,200 --> 00:10:36,640
next one and that one was the other one

268
00:10:36,640 --> 00:10:38,160
some of them are interdependent some of

269
00:10:38,160 --> 00:10:40,240
them not but this is just a small part

270
00:10:40,240 --> 00:10:41,200
of

271
00:10:41,200 --> 00:10:43,680
the bugs

272
00:10:45,279 --> 00:10:47,600
and this was done by

273
00:10:47,600 --> 00:10:50,240
multiple researchers

274
00:10:50,240 --> 00:10:52,800
now just a couple of words about whether

275
00:10:52,800 --> 00:10:55,279
or not the binary vulnerabilities are

276
00:10:55,279 --> 00:10:57,120
dangerous

277
00:10:57,120 --> 00:10:58,320
well this is

278
00:10:58,320 --> 00:11:00,959
not your regular

279
00:11:00,959 --> 00:11:02,480
uh function

280
00:11:02,480 --> 00:11:04,240
code execution

281
00:11:04,240 --> 00:11:05,519
is done

282
00:11:05,519 --> 00:11:07,519
on the level of

283
00:11:07,519 --> 00:11:10,480
operation system rather than php so

284
00:11:10,480 --> 00:11:12,880
what you get are different sets of

285
00:11:12,880 --> 00:11:15,600
benefits so daniel is going to comment

286
00:11:15,600 --> 00:11:16,399
on

287
00:11:16,399 --> 00:11:18,320
the first video

288
00:11:18,320 --> 00:11:21,279
first video please

289
00:11:22,240 --> 00:11:24,959
please come here

290
00:11:25,279 --> 00:11:27,120
yes we're going to

291
00:11:27,120 --> 00:11:30,240
look at a binary exploit

292
00:11:30,240 --> 00:11:31,920
in my baby

293
00:11:31,920 --> 00:11:34,800
1.8

294
00:11:34,800 --> 00:11:38,079
could we pause a little bit

295
00:11:38,480 --> 00:11:41,200
also we make use of stefan messer's

296
00:11:41,200 --> 00:11:44,959
technique of reading a memory of php

297
00:11:44,959 --> 00:11:47,360
leads to the fact that we can get

298
00:11:47,360 --> 00:11:48,880
addresses of

299
00:11:48,880 --> 00:11:49,920
system

300
00:11:49,920 --> 00:11:52,079
structures and functions from executable

301
00:11:52,079 --> 00:11:53,519
file

302
00:11:53,519 --> 00:11:57,200
next what we can do through recording

303
00:11:57,200 --> 00:12:01,040
into php memory we are rewrite gmp puff

304
00:12:01,040 --> 00:12:02,240
structure

305
00:12:02,240 --> 00:12:05,360
uh after we rewrite gmp buff

306
00:12:05,360 --> 00:12:08,839
and we can continue the video please

307
00:12:08,839 --> 00:12:10,399
right

308
00:12:10,399 --> 00:12:12,480
this is the gmp buff

309
00:12:12,480 --> 00:12:15,360
after rewriting gmp buff we get control

310
00:12:15,360 --> 00:12:17,360
over the registries

311
00:12:17,360 --> 00:12:18,240
and

312
00:12:18,240 --> 00:12:22,240
next we get rc is like a classical

313
00:12:22,240 --> 00:12:24,560
exploits like buffer overload and the

314
00:12:24,560 --> 00:12:26,320
code

315
00:12:26,320 --> 00:12:28,800
is performed with uh

316
00:12:28,800 --> 00:12:32,000
disabled functions and open bay steer

317
00:12:32,000 --> 00:12:34,720
but you have to have a lot of calls to

318
00:12:34,720 --> 00:12:35,600
get

319
00:12:35,600 --> 00:12:39,839
function addresses from the memory

320
00:12:42,320 --> 00:12:44,959
and this is

321
00:12:44,959 --> 00:12:47,839
to illustrate how it all works

322
00:12:47,839 --> 00:12:52,120
and how we bypass slr

323
00:12:54,480 --> 00:12:56,079
by reading

324
00:12:56,079 --> 00:13:00,239
executable php file from the memory

325
00:13:01,120 --> 00:13:03,760
unfreeze it

326
00:13:04,000 --> 00:13:07,839
can we go on watch the video

327
00:13:10,959 --> 00:13:14,439
i think it's paused

328
00:13:20,240 --> 00:13:21,279
right

329
00:13:21,279 --> 00:13:24,160
so here we can see back connect

330
00:13:24,160 --> 00:13:27,160
working

331
00:13:39,519 --> 00:13:41,199
and now we would like to demonstrate the

332
00:13:41,199 --> 00:13:43,839
next video okay

333
00:13:43,839 --> 00:13:47,399
yes this one

334
00:13:48,079 --> 00:13:50,720
so here we can see a different use case

335
00:13:50,720 --> 00:13:53,600
of binary vulnerability

336
00:13:53,600 --> 00:13:56,399
let's assume we have two websites

337
00:13:56,399 --> 00:13:58,560
and on port 80

338
00:13:58,560 --> 00:14:00,839
there's a website with

339
00:14:00,839 --> 00:14:02,399
drupal uh

340
00:14:02,399 --> 00:14:03,760
vulnerable to

341
00:14:03,760 --> 00:14:05,519
cve

342
00:14:05,519 --> 00:14:09,720
2019 6340

343
00:14:09,760 --> 00:14:12,639
and a second

344
00:14:12,639 --> 00:14:15,279
website on port 8080 doesn't have any

345
00:14:15,279 --> 00:14:18,000
bugs at all

346
00:14:18,079 --> 00:14:20,720
https is used is being used on the

347
00:14:20,720 --> 00:14:22,240
website

348
00:14:22,240 --> 00:14:25,040
and by using https we need to generate

349
00:14:25,040 --> 00:14:26,160
private

350
00:14:26,160 --> 00:14:28,959
keys which is usually done by

351
00:14:28,959 --> 00:14:31,120
web server administrator

352
00:14:31,120 --> 00:14:34,079
the keys on the disk would have user and

353
00:14:34,079 --> 00:14:35,680
group route

354
00:14:35,680 --> 00:14:38,639
and when apache would be started

355
00:14:38,639 --> 00:14:40,079
it would have

356
00:14:40,079 --> 00:14:41,760
root privileges

357
00:14:41,760 --> 00:14:43,920
and he would it would read the private

358
00:14:43,920 --> 00:14:46,800
keys and subsequently create processes

359
00:14:46,800 --> 00:14:48,240
with

360
00:14:48,240 --> 00:14:50,399
correspondent privileges

361
00:14:50,399 --> 00:14:53,360
so after reading the private keys they

362
00:14:53,360 --> 00:14:56,000
stay in the memory

363
00:14:56,000 --> 00:14:56,880
and

364
00:14:56,880 --> 00:14:59,360
when we have the

365
00:14:59,360 --> 00:15:01,440
this kind of vulnerability

366
00:15:01,440 --> 00:15:03,839
it allows us to read through all the

367
00:15:03,839 --> 00:15:06,959
layouts apache config and find the

368
00:15:06,959 --> 00:15:09,360
addresses of private keys

369
00:15:09,360 --> 00:15:10,839
so

370
00:15:10,839 --> 00:15:14,880
basically they are stored

371
00:15:15,040 --> 00:15:16,959
in the user group root

372
00:15:16,959 --> 00:15:18,639
in the desk

373
00:15:18,639 --> 00:15:20,880
so through binary exploit

374
00:15:20,880 --> 00:15:22,800
we bypass

375
00:15:22,800 --> 00:15:24,880
access rights to

376
00:15:24,880 --> 00:15:27,839
that particular file

377
00:15:28,160 --> 00:15:30,399
thank you

378
00:15:30,399 --> 00:15:32,639
now you don't have to repeat this video

379
00:15:32,639 --> 00:15:33,600
thank you thank you for the

380
00:15:33,600 --> 00:15:35,279
demonstration

381
00:15:35,279 --> 00:15:38,279
right

382
00:15:41,519 --> 00:15:42,959
one other thing that i would like to

383
00:15:42,959 --> 00:15:45,920
point out is that this kind of exploit

384
00:15:45,920 --> 00:15:47,839
is something that

385
00:15:47,839 --> 00:15:49,519
goes through several calls several

386
00:15:49,519 --> 00:15:51,360
requests you first need to get

387
00:15:51,360 --> 00:15:53,519
information on memory addresses and make

388
00:15:53,519 --> 00:15:55,120
use of it so this kind of

389
00:15:55,120 --> 00:15:56,720
vulnerabilities

390
00:15:56,720 --> 00:16:00,800
depend on how and where php

391
00:16:00,800 --> 00:16:02,000
is

392
00:16:02,000 --> 00:16:04,399
exists

393
00:16:05,199 --> 00:16:08,839
and they are quite dangerous

394
00:16:09,120 --> 00:16:10,720
they can

395
00:16:10,720 --> 00:16:12,320
bypass base their

396
00:16:12,320 --> 00:16:16,000
disable function and

397
00:16:18,560 --> 00:16:20,160
and this is this is pretty pretty

398
00:16:20,160 --> 00:16:21,519
serious

399
00:16:21,519 --> 00:16:24,079
and let's keep going

400
00:16:24,079 --> 00:16:26,800
just a couple of words about

401
00:16:26,800 --> 00:16:28,880
how

402
00:16:28,880 --> 00:16:32,480
lp on php works

403
00:16:32,480 --> 00:16:34,320
this is packages

404
00:16:34,320 --> 00:16:37,600
repository a package repository

405
00:16:37,600 --> 00:16:38,800
packages

406
00:16:38,800 --> 00:16:41,839
is the php package repository

407
00:16:41,839 --> 00:16:44,000
that could be used by various developers

408
00:16:44,000 --> 00:16:45,040
just

409
00:16:45,040 --> 00:16:47,120
by

410
00:16:47,120 --> 00:16:49,600
using this simple

411
00:16:49,600 --> 00:16:51,120
commands

412
00:16:51,120 --> 00:16:53,360
but this simplicity is to a certain

413
00:16:53,360 --> 00:16:55,680
extent

414
00:16:56,720 --> 00:16:59,040
decipher

415
00:16:59,040 --> 00:17:01,279
and when identifying vulnerability in

416
00:17:01,279 --> 00:17:02,639
one package

417
00:17:02,639 --> 00:17:04,880
you can get a whole

418
00:17:04,880 --> 00:17:09,199
pack of other vulnerabilities elsewhere

419
00:17:09,599 --> 00:17:12,559
it's not really very secure here

420
00:17:12,559 --> 00:17:15,599
so one other demonstration

421
00:17:15,599 --> 00:17:17,439
of i was kind of

422
00:17:17,439 --> 00:17:18,400
finding

423
00:17:18,400 --> 00:17:21,360
a vulnerability

424
00:17:25,199 --> 00:17:27,119
here we

425
00:17:27,119 --> 00:17:29,840
installing another reveal

426
00:17:29,840 --> 00:17:32,720
8 8 3 12.

427
00:17:32,720 --> 00:17:34,000
this is for

428
00:17:34,000 --> 00:17:35,840
php version 7.

429
00:17:35,840 --> 00:17:38,320
so what we do next

430
00:17:38,320 --> 00:17:39,840
it's enough to

431
00:17:39,840 --> 00:17:41,520
launch autoload

432
00:17:41,520 --> 00:17:46,280
and free mark is already available

433
00:17:48,559 --> 00:17:50,640
so we execute

434
00:17:50,640 --> 00:17:54,679
the commands

435
00:18:05,919 --> 00:18:08,720
let's have a look what happens next we

436
00:18:08,720 --> 00:18:11,039
um launch the

437
00:18:11,039 --> 00:18:13,600
analyzer

438
00:18:13,600 --> 00:18:17,679
exploit goes through the evangel and

439
00:18:17,679 --> 00:18:21,200
it's going to work in a larabel larabel

440
00:18:21,200 --> 00:18:24,720
is the framework that is most popular

441
00:18:24,720 --> 00:18:26,000
and yet

442
00:18:26,000 --> 00:18:29,200
code execution is what you see here

443
00:18:29,200 --> 00:18:31,200
and here we just check that what we

444
00:18:31,200 --> 00:18:33,840
generated

445
00:18:34,240 --> 00:18:37,200
really does work

446
00:18:37,200 --> 00:18:39,520
a real script that

447
00:18:39,520 --> 00:18:41,200
sends

448
00:18:41,200 --> 00:18:42,960
the call

449
00:18:42,960 --> 00:18:46,160
and this is how we make this script work

450
00:18:46,160 --> 00:18:49,200
and then we check

451
00:18:51,840 --> 00:18:57,159
to make sure that rc is really there

452
00:18:59,039 --> 00:19:00,960
so this is to illustrate that we can

453
00:19:00,960 --> 00:19:02,559
identify not just your regular

454
00:19:02,559 --> 00:19:04,720
vulnerabilities but all kinds of other

455
00:19:04,720 --> 00:19:06,559
vulnerabilities just in one package so

456
00:19:06,559 --> 00:19:09,600
many vulnerabilities we're going to show

457
00:19:09,600 --> 00:19:11,200
you that if we

458
00:19:11,200 --> 00:19:12,480
search

459
00:19:12,480 --> 00:19:15,440
for this office

460
00:19:15,919 --> 00:19:19,520
then you also choose dependencies

461
00:19:19,520 --> 00:19:22,639
and you can see here

462
00:19:23,520 --> 00:19:26,799
millions of downloads

463
00:19:28,559 --> 00:19:31,919
and now on to binary vulnerabilities

464
00:19:31,919 --> 00:19:34,799
starting with the simplest ones

465
00:19:34,799 --> 00:19:37,200
the ones that

466
00:19:37,200 --> 00:19:38,559
are not

467
00:19:38,559 --> 00:19:42,080
very detrimental but quite unpleasant

468
00:19:42,080 --> 00:19:44,720
when we looked at the so-called magic

469
00:19:44,720 --> 00:19:47,600
php methods

470
00:19:48,480 --> 00:19:54,320
we did identify a unfixed dance

471
00:19:55,360 --> 00:19:57,919
we wrote to box page peanut

472
00:19:57,919 --> 00:20:00,400
and they responded that it's known it's

473
00:20:00,400 --> 00:20:02,000
back

474
00:20:02,000 --> 00:20:04,720
number this and this

475
00:20:04,720 --> 00:20:07,120
64 196

476
00:20:07,120 --> 00:20:08,640
submitted

477
00:20:08,640 --> 00:20:11,760
like nine years ago

478
00:20:11,810 --> 00:20:14,909
[Music]

479
00:20:17,039 --> 00:20:18,840
and then

480
00:20:18,840 --> 00:20:21,280
developers said that it's not security

481
00:20:21,280 --> 00:20:22,880
issue

482
00:20:22,880 --> 00:20:24,960
um

483
00:20:24,960 --> 00:20:27,520
we want

484
00:20:27,520 --> 00:20:29,039
we want

485
00:20:29,039 --> 00:20:32,080
the programmers to to do to work at that

486
00:20:32,080 --> 00:20:33,600
so they're saying it's not security

487
00:20:33,600 --> 00:20:35,039
issue

488
00:20:35,039 --> 00:20:37,200
but in fact

489
00:20:37,200 --> 00:20:41,120
bug 64 196 is about clone method

490
00:20:41,120 --> 00:20:44,000
and some other interconnected bugs very

491
00:20:44,000 --> 00:20:45,600
much like the three i demonstrated

492
00:20:45,600 --> 00:20:47,120
earlier

493
00:20:47,120 --> 00:20:49,600
anyhow a lot of

494
00:20:49,600 --> 00:20:52,159
use cases a lot of bugs that

495
00:20:52,159 --> 00:20:55,280
are encountered in multiple places

496
00:20:55,280 --> 00:20:56,080
so

497
00:20:56,080 --> 00:21:00,399
in order to exploit it all you need

498
00:21:00,840 --> 00:21:04,960
is to address a filled

499
00:21:04,960 --> 00:21:08,960
uh a massive element in in this field

500
00:21:08,960 --> 00:21:11,679
object filled as an element of array

501
00:21:11,679 --> 00:21:13,360
and then

502
00:21:13,360 --> 00:21:15,280
what would call offsetget and there you

503
00:21:15,280 --> 00:21:17,840
go

504
00:21:18,400 --> 00:21:21,440
and you have your toss

505
00:21:22,320 --> 00:21:24,559
so when i was talking to you about the

506
00:21:24,559 --> 00:21:28,639
classical vulnerabilities

507
00:21:29,440 --> 00:21:31,440
from what we see in the bag we see a

508
00:21:31,440 --> 00:21:32,880
different pattern

509
00:21:32,880 --> 00:21:35,120
where we address the fields as elements

510
00:21:35,120 --> 00:21:37,760
of array

511
00:21:38,960 --> 00:21:41,679
and and we can search it this way and we

512
00:21:41,679 --> 00:21:42,720
found it

513
00:21:42,720 --> 00:21:46,559
in a sodium compound

514
00:21:48,000 --> 00:21:51,039
it's a smallish exploit

515
00:21:51,039 --> 00:21:53,120
you only have you only have to find two

516
00:21:53,120 --> 00:21:56,719
requests so it's not a big deal

517
00:21:57,360 --> 00:22:01,439
and still this package is used in joomla

518
00:22:06,880 --> 00:22:09,679
and there are multiple ways to

519
00:22:09,679 --> 00:22:11,120
you don't have to

520
00:22:11,120 --> 00:22:14,480
request serialize you can use memcache

521
00:22:14,480 --> 00:22:15,679
etc

522
00:22:15,679 --> 00:22:18,880
so what i'm saying

523
00:22:19,120 --> 00:22:21,360
is

524
00:22:22,320 --> 00:22:24,880
that the idea behind this exploit

525
00:22:24,880 --> 00:22:26,480
is that the developer at the point of

526
00:22:26,480 --> 00:22:28,559
development can be said that look here

527
00:22:28,559 --> 00:22:30,240
is your dance and you can fix it right

528
00:22:30,240 --> 00:22:32,559
away

529
00:22:32,640 --> 00:22:35,120
rather than thinking about how to send

530
00:22:35,120 --> 00:22:36,320
the data

531
00:22:36,320 --> 00:22:38,159
you can fix it or not fix it and

532
00:22:38,159 --> 00:22:40,799
understand you know take everything for

533
00:22:40,799 --> 00:22:42,400
faith earlier

534
00:22:42,400 --> 00:22:44,080
another bug a little bit more

535
00:22:44,080 --> 00:22:44,990
interesting

536
00:22:44,990 --> 00:22:47,280
[Music]

537
00:22:47,280 --> 00:22:50,399
these are um

538
00:22:50,640 --> 00:22:54,679
execution codes unfixed

539
00:22:55,600 --> 00:22:57,600
like i said a lot of bugs have been

540
00:22:57,600 --> 00:22:59,200
found

541
00:22:59,200 --> 00:23:03,200
since stephan aisha made his statements

542
00:23:03,200 --> 00:23:04,960
these are the bugs that we found and

543
00:23:04,960 --> 00:23:07,520
nobody have reported since

544
00:23:07,520 --> 00:23:09,600
earlier we can't report it at this point

545
00:23:09,600 --> 00:23:10,559
because

546
00:23:10,559 --> 00:23:12,799
they're not

547
00:23:12,799 --> 00:23:16,240
um taking it in

548
00:23:16,400 --> 00:23:20,960
look as if hp5 is not being used

549
00:23:21,120 --> 00:23:22,559
although it's not

550
00:23:22,559 --> 00:23:24,799
it's not true obviously

551
00:23:24,799 --> 00:23:26,960
and now danielle is going to

552
00:23:26,960 --> 00:23:29,520
say more about this bug this particular

553
00:23:29,520 --> 00:23:31,039
one

554
00:23:31,039 --> 00:23:33,520
yes the bug is

555
00:23:33,520 --> 00:23:35,360
is

556
00:23:35,360 --> 00:23:36,559
insufficient

557
00:23:36,559 --> 00:23:39,840
uh check of type

558
00:23:39,840 --> 00:23:41,360
so when

559
00:23:41,360 --> 00:23:44,159
a gmp object is unpacked

560
00:23:44,159 --> 00:23:45,840
you need to

561
00:23:45,840 --> 00:23:48,799
rewrite handle filled

562
00:23:48,799 --> 00:23:50,400
to an object

563
00:23:50,400 --> 00:23:53,600
another php object and when you finalize

564
00:23:53,600 --> 00:23:54,799
unpacking

565
00:23:54,799 --> 00:23:56,480
of gmp object

566
00:23:56,480 --> 00:23:59,039
what you get is the opportunity to

567
00:23:59,039 --> 00:24:01,279
rewrite

568
00:24:01,279 --> 00:24:02,480
of

569
00:24:02,480 --> 00:24:04,640
object filled with a particular of a

570
00:24:04,640 --> 00:24:06,240
particular id

571
00:24:06,240 --> 00:24:09,679
that were pre-written into handle field

572
00:24:09,679 --> 00:24:13,520
and in order to rewrite gmp objects

573
00:24:13,520 --> 00:24:17,279
in code field you need to have

574
00:24:17,279 --> 00:24:18,880
the code line

575
00:24:18,880 --> 00:24:22,400
the way it's on the slide right now

576
00:24:22,400 --> 00:24:23,919
like the one you see on the slide right

577
00:24:23,919 --> 00:24:26,960
now and you need to find an object that

578
00:24:26,960 --> 00:24:30,000
would be good enough to rewrite

579
00:24:30,000 --> 00:24:32,960
properties and after doing that

580
00:24:32,960 --> 00:24:36,000
you would realize

581
00:24:37,279 --> 00:24:39,679
that this vulnerability allows to build

582
00:24:39,679 --> 00:24:42,720
a stable exploit

583
00:24:42,720 --> 00:24:45,120
that only asks for

584
00:24:45,120 --> 00:24:48,799
several requests and is not dependent on

585
00:24:48,799 --> 00:24:50,799
uh system structure

586
00:24:50,799 --> 00:24:52,880
you don't have to uh

587
00:24:52,880 --> 00:24:55,679
to search for any uh memory addresses or

588
00:24:55,679 --> 00:24:56,960
anything

589
00:24:56,960 --> 00:24:59,440
right

590
00:24:59,440 --> 00:25:02,799
and we started to think how do you how

591
00:25:02,799 --> 00:25:06,480
is it used in a real code

592
00:25:08,559 --> 00:25:12,520
there is composer there

593
00:25:18,559 --> 00:25:21,600
if composer is used by default

594
00:25:21,600 --> 00:25:24,719
according to the manual

595
00:25:25,279 --> 00:25:28,320
first object created is composed

596
00:25:28,320 --> 00:25:30,799
composer afterward which is great it

597
00:25:30,799 --> 00:25:32,880
allows to include files

598
00:25:32,880 --> 00:25:35,279
but like danielle said

599
00:25:35,279 --> 00:25:38,320
you need to rewrite the handle

600
00:25:38,320 --> 00:25:40,639
field

601
00:25:40,880 --> 00:25:43,840
that would

602
00:25:44,559 --> 00:25:47,679
it would be enough to just put

603
00:25:47,679 --> 00:25:49,279
one

604
00:25:49,279 --> 00:25:52,080
more often it's not one it's true

605
00:25:52,080 --> 00:25:53,440
because in

606
00:25:53,440 --> 00:25:55,039
in php

607
00:25:55,039 --> 00:25:56,880
there is a

608
00:25:56,880 --> 00:25:58,400
type transformation so this is the

609
00:25:58,400 --> 00:25:59,919
pattern

610
00:25:59,919 --> 00:26:01,200
just true

611
00:26:01,200 --> 00:26:05,120
and then composer is our object

612
00:26:05,600 --> 00:26:07,919
and that's it

613
00:26:07,919 --> 00:26:11,120
upper tree includes symphony

614
00:26:11,120 --> 00:26:14,240
for old versions and could we have the

615
00:26:14,240 --> 00:26:16,000
video please

616
00:26:16,000 --> 00:26:18,640
yes so

617
00:26:18,880 --> 00:26:19,600
we

618
00:26:19,600 --> 00:26:21,760
installed symfony by default not all of

619
00:26:21,760 --> 00:26:23,039
it

620
00:26:23,039 --> 00:26:24,400
two packages

621
00:26:24,400 --> 00:26:26,880
from symphony would be enough

622
00:26:26,880 --> 00:26:28,080
into

623
00:26:28,080 --> 00:26:31,520
json a composer

624
00:26:32,240 --> 00:26:35,440
dependence injection and routing

625
00:26:35,440 --> 00:26:39,039
and this is your standards uh

626
00:26:39,039 --> 00:26:42,159
use of these packages

627
00:26:42,159 --> 00:26:46,240
the latest php version five

628
00:26:46,799 --> 00:26:50,400
that you can no longer fix

629
00:26:50,400 --> 00:26:53,529
[Music]

630
00:26:56,080 --> 00:26:57,840
so what happens next we install the

631
00:26:57,840 --> 00:26:59,679
composer

632
00:26:59,679 --> 00:27:00,480
we

633
00:27:00,480 --> 00:27:03,360
launch this packages we download the

634
00:27:03,360 --> 00:27:06,360
stuff

635
00:27:08,640 --> 00:27:10,400
[Music]

636
00:27:10,400 --> 00:27:14,480
we send it over to the scanner

637
00:27:14,480 --> 00:27:17,840
this through is our a pdf

638
00:27:17,840 --> 00:27:21,840
like find us passes and

639
00:27:21,840 --> 00:27:24,480
collect logical formulas

640
00:27:24,480 --> 00:27:26,159
this is what we get

641
00:27:26,159 --> 00:27:28,799
yeah great

642
00:27:30,880 --> 00:27:32,640
60 exploits

643
00:27:32,640 --> 00:27:35,530
from various places

644
00:27:35,530 --> 00:27:36,799
[Music]

645
00:27:36,799 --> 00:27:39,679
what we did next

646
00:27:41,039 --> 00:27:45,600
we saved uh exploits into files

647
00:27:45,679 --> 00:27:49,480
we wanted to be visible

648
00:27:50,480 --> 00:27:52,000
besides it's not very convenient to

649
00:27:52,000 --> 00:27:55,039
demonstrate other ways

650
00:27:55,520 --> 00:27:59,760
so we launch this exploit and we check

651
00:28:01,279 --> 00:28:03,520
and let's see it's it's it's far from

652
00:28:03,520 --> 00:28:05,840
being an easy exploit

653
00:28:05,840 --> 00:28:09,440
and this a simple script does it for us

654
00:28:09,440 --> 00:28:15,080
it sends the call for http server

655
00:28:19,360 --> 00:28:21,120
so we send over the file with this

656
00:28:21,120 --> 00:28:24,120
exploit

657
00:28:32,480 --> 00:28:36,799
and you can scroll it all the way to rc

658
00:28:38,799 --> 00:28:42,190
let's have a look what's in the code

659
00:28:42,190 --> 00:28:45,380
[Music]

660
00:28:46,000 --> 00:28:47,520
this is a custom

661
00:28:47,520 --> 00:28:50,399
and serialized

662
00:28:51,360 --> 00:28:53,440
like danielle said we i'm

663
00:28:53,440 --> 00:28:55,760
um packaged and then

664
00:28:55,760 --> 00:28:59,039
we have to realize

665
00:28:59,039 --> 00:29:00,559
we write the handle

666
00:29:00,559 --> 00:29:02,480
it's not fixed by the way

667
00:29:02,480 --> 00:29:04,480
although there were multiple tickets but

668
00:29:04,480 --> 00:29:06,450
it's still not fixed

669
00:29:06,450 --> 00:29:07,919
[Music]

670
00:29:07,919 --> 00:29:09,039
this is

671
00:29:09,039 --> 00:29:12,240
this structure

672
00:29:14,250 --> 00:29:17,529
[Music]

673
00:29:19,200 --> 00:29:20,799
all the way to the dangerous function

674
00:29:20,799 --> 00:29:24,080
this is our dangerous function

675
00:29:24,080 --> 00:29:27,360
and it only has this value of true and

676
00:29:27,360 --> 00:29:29,919
that would be that alone would be enough

677
00:29:29,919 --> 00:29:30,799
to

678
00:29:30,799 --> 00:29:32,559
include it

679
00:29:32,559 --> 00:29:35,360
just to illustrate

680
00:29:35,360 --> 00:29:37,120
remember i was

681
00:29:37,120 --> 00:29:39,679
talking to you about pbs and pbf's

682
00:29:39,679 --> 00:29:42,320
already known and you can create a list

683
00:29:42,320 --> 00:29:43,200
for

684
00:29:43,200 --> 00:29:47,279
each of them and here pvs are

685
00:29:50,000 --> 00:29:51,600
not really pdfs they're kind of

686
00:29:51,600 --> 00:29:54,600
constructs

687
00:29:55,279 --> 00:29:58,480
as array elements

688
00:30:01,360 --> 00:30:05,039
they come from the binary research

689
00:30:05,039 --> 00:30:07,440
anyhow

690
00:30:07,440 --> 00:30:10,399
you should send this filled to here and

691
00:30:10,399 --> 00:30:13,840
this is a gmp object

692
00:30:14,480 --> 00:30:16,960
and then packaging of the gmp object

693
00:30:16,960 --> 00:30:19,919
would lead to rewriting the field of

694
00:30:19,919 --> 00:30:23,840
composer class map

695
00:30:27,600 --> 00:30:30,080
and you can see it here

696
00:30:30,080 --> 00:30:32,240
what it leads to

697
00:30:32,240 --> 00:30:34,399
so the developer

698
00:30:34,399 --> 00:30:36,399
doesn't have to think it

699
00:30:36,399 --> 00:30:38,720
really hard over it

700
00:30:38,720 --> 00:30:40,960
it's already there for him and the fact

701
00:30:40,960 --> 00:30:43,120
that scanner has calculated it all

702
00:30:43,120 --> 00:30:44,720
allows to send

703
00:30:44,720 --> 00:30:49,000
research information over

704
00:30:50,720 --> 00:30:53,279
and those who are dealing with a

705
00:30:53,279 --> 00:30:55,440
language structure they can get this

706
00:30:55,440 --> 00:30:57,600
information and understand whether or

707
00:30:57,600 --> 00:30:58,559
not

708
00:30:58,559 --> 00:31:01,440
there is a problem

709
00:31:03,039 --> 00:31:05,600
you don't need to have too many experts

710
00:31:05,600 --> 00:31:09,918
you just have to execute the script

711
00:31:14,480 --> 00:31:15,840
and look at what

712
00:31:15,840 --> 00:31:18,159
happens in the code

713
00:31:18,159 --> 00:31:20,480
like i previously

714
00:31:20,480 --> 00:31:22,960
mentioned

715
00:31:24,870 --> 00:31:27,989
[Music]

716
00:31:28,799 --> 00:31:31,279
these patterns straight make make your

717
00:31:31,279 --> 00:31:32,080
work

718
00:31:32,080 --> 00:31:34,320
straight forward

719
00:31:34,320 --> 00:31:36,080
showing you all highlighting all the

720
00:31:36,080 --> 00:31:38,159
functions that you need to

721
00:31:38,159 --> 00:31:40,880
attend to

722
00:31:40,960 --> 00:31:42,720
symbol execution

723
00:31:42,720 --> 00:31:47,240
and what you get is the final result

724
00:31:51,200 --> 00:31:53,360
in the very end you're going to see a

725
00:31:53,360 --> 00:31:56,480
link to the project

726
00:31:56,480 --> 00:31:59,480
website

727
00:32:03,200 --> 00:32:04,159
it's

728
00:32:04,159 --> 00:32:04,960
much

729
00:32:04,960 --> 00:32:06,799
more interesting to study the

730
00:32:06,799 --> 00:32:09,039
information on on your own

731
00:32:09,039 --> 00:32:11,360
please join and

732
00:32:11,360 --> 00:32:14,640
i think it would be of interest to you

733
00:32:14,640 --> 00:32:16,480
right

734
00:32:16,480 --> 00:32:20,039
that is it

735
00:32:31,120 --> 00:32:32,559
and you can see

736
00:32:32,559 --> 00:32:35,840
a class map filled

737
00:32:35,840 --> 00:32:39,320
was rewritten

738
00:32:48,799 --> 00:32:50,480
yes so those were

739
00:32:50,480 --> 00:32:52,159
interesting bugs but we can actually

740
00:32:52,159 --> 00:32:53,120
dive

741
00:32:53,120 --> 00:32:56,360
even deeper

742
00:33:00,240 --> 00:33:01,360
is the first

743
00:33:01,360 --> 00:33:05,120
by default and it's it's true

744
00:33:05,519 --> 00:33:08,080
it's for it's true for drupal

745
00:33:08,080 --> 00:33:10,720
you can actually go ahead and try it for

746
00:33:10,720 --> 00:33:12,720
yourself

747
00:33:12,720 --> 00:33:14,880
composer doesn't have to be the first

748
00:33:14,880 --> 00:33:16,960
one but what's then

749
00:33:16,960 --> 00:33:18,720
well then

750
00:33:18,720 --> 00:33:21,679
you need to keep going and analyze it

751
00:33:21,679 --> 00:33:24,679
and

752
00:33:28,620 --> 00:33:31,760
[Music]

753
00:33:37,360 --> 00:33:39,519
this visualization variants

754
00:33:39,519 --> 00:33:43,120
it actually works for a regular code

755
00:33:43,120 --> 00:33:44,720
it's not that convenient to work with

756
00:33:44,720 --> 00:33:46,960
fields though

757
00:33:46,960 --> 00:33:49,440
anyhow

758
00:33:51,440 --> 00:33:53,200
this is a different exploit that our

759
00:33:53,200 --> 00:33:56,559
analyzer managed to find

760
00:33:56,559 --> 00:33:59,440
what we have here is the explode

761
00:33:59,440 --> 00:34:00,240
that

762
00:34:00,240 --> 00:34:02,399
works with fast destructor

763
00:34:02,399 --> 00:34:04,320
the implicit

764
00:34:04,320 --> 00:34:07,320
vulnerability

765
00:34:07,519 --> 00:34:08,960
so we

766
00:34:08,960 --> 00:34:11,119
found a peculiar saying

767
00:34:11,119 --> 00:34:13,119
that if you have

768
00:34:13,119 --> 00:34:14,560
this

769
00:34:14,560 --> 00:34:16,639
for equal one

770
00:34:16,639 --> 00:34:20,159
this verb equal one then in pitch in in

771
00:34:20,159 --> 00:34:21,199
php

772
00:34:21,199 --> 00:34:23,760
we are not going to have var equal

773
00:34:23,760 --> 00:34:26,399
one if var used to be our object then

774
00:34:26,399 --> 00:34:28,560
var would equal one and then we would

775
00:34:28,560 --> 00:34:30,879
call the structure of the subject so

776
00:34:30,879 --> 00:34:32,480
we're deleting the subject that's why we

777
00:34:32,480 --> 00:34:34,480
count the structure an interesting

778
00:34:34,480 --> 00:34:36,960
analysis

779
00:34:36,960 --> 00:34:39,199
tool

780
00:34:39,839 --> 00:34:41,520
the request may happen or not happen

781
00:34:41,520 --> 00:34:44,879
depending on the initial data

782
00:34:45,119 --> 00:34:46,800
and a lot of this type of

783
00:34:46,800 --> 00:34:50,159
vulnerabilities can be c

784
00:34:50,639 --> 00:34:53,119
and this is what our scanner allows to

785
00:34:53,119 --> 00:34:55,679
identify

786
00:34:55,679 --> 00:34:58,079
it would allow us and then now we added

787
00:34:58,079 --> 00:34:59,200
binary

788
00:34:59,200 --> 00:35:02,320
bugs on top of it so the structure is

789
00:35:02,320 --> 00:35:04,000
var equal 1

790
00:35:04,000 --> 00:35:07,200
and we unpackaged it for object a

791
00:35:07,200 --> 00:35:10,399
and prop is the

792
00:35:11,359 --> 00:35:13,760
yes the reference to

793
00:35:13,760 --> 00:35:15,050
var

794
00:35:15,050 --> 00:35:16,560
[Music]

795
00:35:16,560 --> 00:35:19,359
so we unpacked it with var

796
00:35:19,359 --> 00:35:21,200
the structure was called the structure

797
00:35:21,200 --> 00:35:22,400
worked

798
00:35:22,400 --> 00:35:26,320
and then there is uh this field

799
00:35:26,320 --> 00:35:29,520
but our field is reference to var

800
00:35:29,520 --> 00:35:32,320
got rewritten

801
00:35:33,520 --> 00:35:35,440
so rather than having

802
00:35:35,440 --> 00:35:37,520
one in evil we have something different

803
00:35:37,520 --> 00:35:39,200
in evil

804
00:35:39,200 --> 00:35:40,270
cool right

805
00:35:40,270 --> 00:35:42,640
[Music]

806
00:35:42,640 --> 00:35:45,040
and in symphony in real code it turned

807
00:35:45,040 --> 00:35:49,280
out to be slightly more complicated

808
00:35:49,280 --> 00:35:53,359
but we did manage to calculate it all

809
00:35:56,640 --> 00:35:57,839
in php

810
00:35:57,839 --> 00:36:00,079
the rule is that if we have plus it's

811
00:36:00,079 --> 00:36:02,480
right it's either an array or

812
00:36:02,480 --> 00:36:04,960
integers

813
00:36:07,920 --> 00:36:10,160
so

814
00:36:10,320 --> 00:36:13,119
our pros get status returns process

815
00:36:13,119 --> 00:36:14,560
information

816
00:36:14,560 --> 00:36:16,160
and it asks for resources and it's

817
00:36:16,160 --> 00:36:18,560
unpackaged but

818
00:36:18,560 --> 00:36:20,640
let us go ahead and look for the

819
00:36:20,640 --> 00:36:22,560
structures where we can change

820
00:36:22,560 --> 00:36:24,120
uh type

821
00:36:24,120 --> 00:36:27,200
[Music]

822
00:36:27,200 --> 00:36:29,599
and then we would attach this structure

823
00:36:29,599 --> 00:36:32,400
to our execution code if we manage to do

824
00:36:32,400 --> 00:36:33,280
that

825
00:36:33,280 --> 00:36:38,200
then we can rewrite cross information

826
00:36:46,640 --> 00:36:49,839
so what we do

827
00:36:50,480 --> 00:36:52,480
is we look at all these

828
00:36:52,480 --> 00:36:55,599
things and identify

829
00:36:55,599 --> 00:36:59,280
the problems that we might encounter

830
00:36:59,280 --> 00:37:01,520
destruction the structure is called or

831
00:37:01,520 --> 00:37:04,520
not

832
00:37:08,000 --> 00:37:10,800
so basically

833
00:37:11,440 --> 00:37:13,280
this is it this is the kind of exploit

834
00:37:13,280 --> 00:37:15,839
that we get

835
00:37:18,320 --> 00:37:22,320
so then it either goes through gmp

836
00:37:22,320 --> 00:37:27,040
for php5 in php7 it's even simpler

837
00:37:27,040 --> 00:37:29,440
the gadget is right on the surface you

838
00:37:29,440 --> 00:37:32,079
don't have to bypass git status

839
00:37:32,079 --> 00:37:36,040
you can just use it

840
00:37:36,560 --> 00:37:39,680
full advisory is going to be in our

841
00:37:39,680 --> 00:37:42,240
github and in our telegram channel that

842
00:37:42,240 --> 00:37:46,359
will be all thank you for your attention

843
00:37:54,470 --> 00:37:56,320
[Music]

844
00:37:56,320 --> 00:37:57,680
any questions

845
00:37:57,680 --> 00:38:00,000
yes i can see you

846
00:38:00,000 --> 00:38:00,800
um

847
00:38:00,800 --> 00:38:04,440
please wait for the mic

848
00:38:13,280 --> 00:38:14,160
right

849
00:38:14,160 --> 00:38:17,640
my question

850
00:38:18,079 --> 00:38:20,079
it's defining in

851
00:38:20,079 --> 00:38:22,160
current realities

852
00:38:22,160 --> 00:38:24,400
where bug researchers

853
00:38:24,400 --> 00:38:26,160
not only can get

854
00:38:26,160 --> 00:38:29,040
not always can get cv id

855
00:38:29,040 --> 00:38:32,040
and

856
00:38:32,240 --> 00:38:34,000
they have to use

857
00:38:34,000 --> 00:38:35,839
regulators

858
00:38:35,839 --> 00:38:38,160
to send the vulnerabilities

859
00:38:38,160 --> 00:38:41,359
do you look at where to search for this

860
00:38:41,359 --> 00:38:42,400
additional

861
00:38:42,400 --> 00:38:45,119
bugs that are not in cvs

862
00:38:45,119 --> 00:38:46,960
but they're going to be in some kind of

863
00:38:46,960 --> 00:38:49,440
local repositories

864
00:38:49,440 --> 00:38:54,240
well we search for everything ourselves

865
00:38:55,440 --> 00:38:58,800
what we described is not fixed

866
00:38:58,800 --> 00:39:01,760
for quite a long time

867
00:39:01,760 --> 00:39:06,400
this one has not even been mentioned

868
00:39:08,720 --> 00:39:11,359
so we look for our for the bugs

869
00:39:11,359 --> 00:39:14,000
ourselves

870
00:39:14,000 --> 00:39:17,040
we have a correspondent base

871
00:39:17,040 --> 00:39:20,000
so the way the analyzer works

872
00:39:20,000 --> 00:39:23,280
we get the patterns for binary um

873
00:39:23,280 --> 00:39:25,839
vulnerabilities put it into solver and

874
00:39:25,839 --> 00:39:27,440
it solves and

875
00:39:27,440 --> 00:39:30,079
gets this

876
00:39:31,440 --> 00:39:35,040
and what happens next

877
00:39:35,280 --> 00:39:36,960
is we'll look at how it

878
00:39:36,960 --> 00:39:38,960
how it works for this particular

879
00:39:38,960 --> 00:39:40,480
developer

880
00:39:40,480 --> 00:39:42,000
thank you for this presentation it's

881
00:39:42,000 --> 00:39:44,880
been very interesting

882
00:39:46,000 --> 00:39:48,800
on my part it's not really a question

883
00:39:48,800 --> 00:39:50,880
how about making a virus total or

884
00:39:50,880 --> 00:39:53,280
something so that you can just

885
00:39:53,280 --> 00:39:56,400
send a

886
00:39:56,400 --> 00:40:00,000
a link to an open project as such like

887
00:40:00,000 --> 00:40:02,720
to make sure

888
00:40:02,720 --> 00:40:06,959
on developing stage you can check

889
00:40:08,000 --> 00:40:11,440
whether or not it's secure you know

890
00:40:11,440 --> 00:40:14,800
do you think it's doable

891
00:40:19,200 --> 00:40:21,359
well i gave you very brief information

892
00:40:21,359 --> 00:40:23,440
about the project but it's there it's

893
00:40:23,440 --> 00:40:25,280
working and we're going to promote it

894
00:40:25,280 --> 00:40:27,680
further

895
00:40:28,240 --> 00:40:30,720
and probably what you are referring to

896
00:40:30,720 --> 00:40:33,440
is going to happen in in the short time

897
00:40:33,440 --> 00:40:35,200
frame

898
00:40:35,200 --> 00:40:37,119
i'm not sure yet

899
00:40:37,119 --> 00:40:39,359
i'm not sure what the

900
00:40:39,359 --> 00:40:42,319
way forward but i guess it's going to be

901
00:40:42,319 --> 00:40:44,640
available for every particular user so

902
00:40:44,640 --> 00:40:46,720
that you can use it to check for it for

903
00:40:46,720 --> 00:40:49,118
yourself

904
00:40:50,960 --> 00:40:52,560
thank you thank you for this

905
00:40:52,560 --> 00:40:54,160
presentation

906
00:40:54,160 --> 00:40:57,280
i would like to clarify

907
00:40:57,280 --> 00:41:03,000
why your examples refer to php 5.

908
00:41:06,079 --> 00:41:07,920
what versions your exploits and

909
00:41:07,920 --> 00:41:10,640
vulnerabilities are relevant to

910
00:41:10,640 --> 00:41:13,119
well i we actually did mention the

911
00:41:13,119 --> 00:41:16,119
versions

912
00:41:21,200 --> 00:41:23,280
we told you about uh

913
00:41:23,280 --> 00:41:26,079
two vulnerabilities for php five and

914
00:41:26,079 --> 00:41:27,119
this one

915
00:41:27,119 --> 00:41:32,160
for php seven and eight it's not fixed

916
00:41:33,040 --> 00:41:36,240
not just for five for different ones and

917
00:41:36,240 --> 00:41:38,720
you can see here the numbers

918
00:41:38,720 --> 00:41:41,520
everything is here

919
00:41:44,800 --> 00:41:48,480
so yeah okay right uh probably yeah i i

920
00:41:48,480 --> 00:41:49,839
i

921
00:41:49,839 --> 00:41:51,760
had the wrong impression

922
00:41:51,760 --> 00:41:53,520
like i said

923
00:41:53,520 --> 00:41:55,680
well first of all it's just a conference

924
00:41:55,680 --> 00:41:57,520
right and we are telling you about the

925
00:41:57,520 --> 00:41:58,800
bugs

926
00:41:58,800 --> 00:42:00,560
that

927
00:42:00,560 --> 00:42:02,079
yeah

928
00:42:02,079 --> 00:42:04,560
that is relevant to the context of the

929
00:42:04,560 --> 00:42:06,240
conference thank you for this

930
00:42:06,240 --> 00:42:08,880
presentation

931
00:42:08,880 --> 00:42:11,440
uh protection

932
00:42:11,440 --> 00:42:14,240
by application inspector and the like do

933
00:42:14,240 --> 00:42:17,119
you think it's going to be deployed

934
00:42:17,119 --> 00:42:20,319
yes that's where i started back in 2013

935
00:42:20,319 --> 00:42:22,880
we developed application inspector and

936
00:42:22,880 --> 00:42:25,359
it developed and now the new projects

937
00:42:25,359 --> 00:42:28,480
hopefully will develop further as well

938
00:42:28,480 --> 00:42:30,079
it's going to turn into a product in the

939
00:42:30,079 --> 00:42:32,400
nearest future it's probably going to be

940
00:42:32,400 --> 00:42:33,760
available

941
00:42:33,760 --> 00:42:34,720
uh

942
00:42:34,720 --> 00:42:36,400
universally available to all the

943
00:42:36,400 --> 00:42:39,280
potential users

944
00:42:39,839 --> 00:42:41,680
we don't seem to have any more questions

945
00:42:41,680 --> 00:42:42,560
please

946
00:42:42,560 --> 00:42:46,880
select the most interesting question

947
00:42:48,560 --> 00:42:52,240
uh the guy in the gray t-shirt

948
00:42:52,240 --> 00:42:55,479
thank you

949
00:43:05,920 --> 00:43:08,000
you

