1
00:00:02,730 --> 00:00:05,880
[Music]

2
00:00:08,480 --> 00:00:11,040
hello everyone my name is evgeny

3
00:00:11,040 --> 00:00:13,759
polonsky i secure

4
00:00:13,759 --> 00:00:15,759
unix systems in positive technologies

5
00:00:15,759 --> 00:00:18,560
and my co-speaker is over there he is

6
00:00:18,560 --> 00:00:22,240
going to come soon vasily brit python

7
00:00:22,240 --> 00:00:24,560
developer in positive technologies

8
00:00:24,560 --> 00:00:25,680
today

9
00:00:25,680 --> 00:00:28,080
we'll be talking about supply chain

10
00:00:28,080 --> 00:00:29,599
attacks

11
00:00:29,599 --> 00:00:31,359
and how to

12
00:00:31,359 --> 00:00:33,040
arrange

13
00:00:33,040 --> 00:00:35,440
the supply chain

14
00:00:35,440 --> 00:00:38,079
of your software in a way that

15
00:00:38,079 --> 00:00:40,480
your customer is not the target

16
00:00:40,480 --> 00:00:43,360
of a hacker attack so i believe that you

17
00:00:43,360 --> 00:00:46,960
all know what supply chain stands for

18
00:00:46,960 --> 00:00:50,399
this is a process

19
00:00:50,559 --> 00:00:51,840
whereby

20
00:00:51,840 --> 00:00:53,360
the products

21
00:00:53,360 --> 00:00:54,879
find their way

22
00:00:54,879 --> 00:00:57,440
from the producer to the end user and

23
00:00:57,440 --> 00:00:59,840
this goes through transportation

24
00:00:59,840 --> 00:01:00,879
storage

25
00:01:00,879 --> 00:01:03,358
sorting

26
00:01:05,119 --> 00:01:08,479
and this can be in several cycles

27
00:01:08,479 --> 00:01:10,159
depending

28
00:01:10,159 --> 00:01:12,720
on the distance this product is going to

29
00:01:12,720 --> 00:01:13,680
cover

30
00:01:13,680 --> 00:01:17,119
more or less the same holds for software

31
00:01:17,119 --> 00:01:18,080
and

32
00:01:18,080 --> 00:01:20,720
but from delivery initial delivery you

33
00:01:20,720 --> 00:01:23,360
need to build a supply chain for the

34
00:01:23,360 --> 00:01:25,520
software upgrades so that you can

35
00:01:25,520 --> 00:01:27,520
further support it

36
00:01:27,520 --> 00:01:30,320
and the supply chain attack happens when

37
00:01:30,320 --> 00:01:33,040
the threat actor

38
00:01:33,040 --> 00:01:36,400
well anyone can penetrate

39
00:01:36,400 --> 00:01:37,840
any chain

40
00:01:37,840 --> 00:01:41,920
or any part of this chain and modify

41
00:01:41,920 --> 00:01:43,119
the code

42
00:01:43,119 --> 00:01:44,799
or another fact

43
00:01:44,799 --> 00:01:48,000
or the end product

44
00:01:48,000 --> 00:01:49,360
this way

45
00:01:49,360 --> 00:01:51,439
they will get access

46
00:01:51,439 --> 00:01:53,920
to the partner systems or the customer

47
00:01:53,920 --> 00:01:55,680
systems

48
00:01:55,680 --> 00:02:00,399
and these attacks are especially

49
00:02:01,600 --> 00:02:04,159
big as a threat because

50
00:02:04,159 --> 00:02:06,399
one attack

51
00:02:06,399 --> 00:02:07,680
will

52
00:02:07,680 --> 00:02:09,038
develop

53
00:02:09,038 --> 00:02:10,878
into a hundred or even

54
00:02:10,878 --> 00:02:13,840
more attacks of those who

55
00:02:13,840 --> 00:02:14,959
buy

56
00:02:14,959 --> 00:02:17,840
the suppliers uh software and the first

57
00:02:17,840 --> 00:02:19,760
target company will have a lot of

58
00:02:19,760 --> 00:02:22,239
financial and reputational

59
00:02:22,239 --> 00:02:24,239
risks because people are not happy to

60
00:02:24,239 --> 00:02:26,720
pay for a product which is going to

61
00:02:26,720 --> 00:02:29,200
encrypt the whole of your infrastructure

62
00:02:29,200 --> 00:02:32,799
demanding ransom

63
00:02:32,879 --> 00:02:35,879
here

64
00:02:37,200 --> 00:02:38,959
one of the

65
00:02:38,959 --> 00:02:42,879
highest profile attacks happened in 2020

66
00:02:42,879 --> 00:02:44,239
it all started

67
00:02:44,239 --> 00:02:46,319
in spring

68
00:02:46,319 --> 00:02:50,720
and it was discovered only in december

69
00:02:50,720 --> 00:02:52,640
and

70
00:02:52,640 --> 00:02:55,519
the result of the attack on solar winds

71
00:02:55,519 --> 00:02:56,879
resulted

72
00:02:56,879 --> 00:02:58,879
this attack resulted in modifying

73
00:02:58,879 --> 00:03:00,560
software

74
00:03:00,560 --> 00:03:04,720
helping the company manage the networks

75
00:03:04,720 --> 00:03:07,599
there they had the malicious code

76
00:03:07,599 --> 00:03:09,760
which was

77
00:03:09,760 --> 00:03:12,879
further spread through updates to the

78
00:03:12,879 --> 00:03:14,560
partner companies

79
00:03:14,560 --> 00:03:19,040
this bomb exploded in december affecting

80
00:03:19,040 --> 00:03:22,319
up to 250 companies in the united states

81
00:03:22,319 --> 00:03:25,440
including the government agencies

82
00:03:25,440 --> 00:03:28,400
like the ministry of national defense of

83
00:03:28,400 --> 00:03:30,560
the united states and large corporations

84
00:03:30,560 --> 00:03:35,040
like microsoft intel and cisco

85
00:03:38,080 --> 00:03:41,360
this slide gives you

86
00:03:41,360 --> 00:03:44,000
a simplified supply chain

87
00:03:44,000 --> 00:03:45,680
scheme

88
00:03:45,680 --> 00:03:49,840
and how it interacts with ci cd

89
00:03:49,840 --> 00:03:52,080
we start with the code

90
00:03:52,080 --> 00:03:53,599
the code

91
00:03:53,599 --> 00:03:55,760
repositories then the versions control

92
00:03:55,760 --> 00:03:57,120
systems

93
00:03:57,120 --> 00:03:59,760
then all of that is built

94
00:03:59,760 --> 00:04:01,120
on the

95
00:04:01,120 --> 00:04:04,080
automated uh builders like team city

96
00:04:04,080 --> 00:04:06,560
jenkins

97
00:04:06,560 --> 00:04:10,720
then it goes to the repository

98
00:04:10,720 --> 00:04:11,920
all this

99
00:04:11,920 --> 00:04:15,480
built artifacts

100
00:04:16,320 --> 00:04:18,399
so we go to the

101
00:04:18,399 --> 00:04:20,798
factories like uh tfrog

102
00:04:20,798 --> 00:04:23,759
from the repositories we can have a

103
00:04:23,759 --> 00:04:24,560
link

104
00:04:24,560 --> 00:04:25,759
to the

105
00:04:25,759 --> 00:04:26,880
build

106
00:04:26,880 --> 00:04:30,240
automation system

107
00:04:30,320 --> 00:04:31,280
since

108
00:04:31,280 --> 00:04:34,240
in the building process you need to

109
00:04:34,240 --> 00:04:36,000
load

110
00:04:36,000 --> 00:04:37,360
dependencies

111
00:04:37,360 --> 00:04:39,759
and these dependencies will be there in

112
00:04:39,759 --> 00:04:41,360
the repositories

113
00:04:41,360 --> 00:04:44,080
then the product is forwarded to the

114
00:04:44,080 --> 00:04:46,560
update servers and further delivered to

115
00:04:46,560 --> 00:04:48,639
the clients

116
00:04:48,639 --> 00:04:51,840
here you can see the popular tools

117
00:04:51,840 --> 00:04:55,360
the ones used to store

118
00:04:55,360 --> 00:04:57,440
the code

119
00:04:57,440 --> 00:05:00,240
github gitlab for the build

120
00:05:00,240 --> 00:05:00,960
well

121
00:05:00,960 --> 00:05:03,039
a good lab ci

122
00:05:03,039 --> 00:05:04,960
well

123
00:05:04,960 --> 00:05:07,440
it is integrated into gitlab

124
00:05:07,440 --> 00:05:10,240
and this way you can easily

125
00:05:10,240 --> 00:05:11,840
tune your

126
00:05:11,840 --> 00:05:16,239
build process you edit one file

127
00:05:16,800 --> 00:05:20,080
in the repository

128
00:05:20,400 --> 00:05:22,400
and today you just

129
00:05:22,400 --> 00:05:24,880
describe the build steps

130
00:05:24,880 --> 00:05:26,800
this is easily done

131
00:05:26,800 --> 00:05:29,759
and it has a thread hidden inside since

132
00:05:29,759 --> 00:05:32,240
anyone who has the developed rights

133
00:05:32,240 --> 00:05:34,960
to edit and modify the code in the

134
00:05:34,960 --> 00:05:39,039
repository can edit this file

135
00:05:39,039 --> 00:05:40,880
add their anything

136
00:05:40,880 --> 00:05:42,400
and this way

137
00:05:42,400 --> 00:05:43,840
they will get

138
00:05:43,840 --> 00:05:44,880
access

139
00:05:44,880 --> 00:05:48,080
to the build agents

140
00:05:48,080 --> 00:05:49,600
and there

141
00:05:49,600 --> 00:05:54,320
we have the code from the repositories

142
00:05:57,280 --> 00:05:59,919
provided by a developer

143
00:05:59,919 --> 00:06:02,080
or any school guy

144
00:06:02,080 --> 00:06:04,880
in asia who is using the credential of

145
00:06:04,880 --> 00:06:06,720
the developer

146
00:06:06,720 --> 00:06:10,319
so this can be tempered and this way

147
00:06:10,319 --> 00:06:11,039
we

148
00:06:11,039 --> 00:06:13,520
can affect other

149
00:06:13,520 --> 00:06:16,639
repositories branches and even releases

150
00:06:16,639 --> 00:06:18,560
to store the code

151
00:06:18,560 --> 00:06:22,960
we can okay let's store the artifacts

152
00:06:22,960 --> 00:06:25,199
we can

153
00:06:25,199 --> 00:06:27,759
use uh

154
00:06:27,919 --> 00:06:32,680
syntax nexus and add factories

155
00:06:37,600 --> 00:06:39,600
and we have one of important attacks

156
00:06:39,600 --> 00:06:41,520
dependency confusion

157
00:06:41,520 --> 00:06:44,799
it is pretty straightforward

158
00:06:45,039 --> 00:06:46,800
to build the

159
00:06:46,800 --> 00:06:49,800
projects

160
00:06:49,840 --> 00:06:51,759
we use

161
00:06:51,759 --> 00:06:53,599
libraries

162
00:06:53,599 --> 00:06:55,919
they can be third-party ones

163
00:06:55,919 --> 00:06:57,039
they can be

164
00:06:57,039 --> 00:06:59,120
available from the public reporters and

165
00:06:59,120 --> 00:07:01,520
they can be private they can be stored

166
00:07:01,520 --> 00:07:03,599
in their repositories inside

167
00:07:03,599 --> 00:07:06,240
the company

168
00:07:06,800 --> 00:07:08,560
to

169
00:07:08,560 --> 00:07:11,680
upload the dependencies they use

170
00:07:11,680 --> 00:07:14,080
so-called package managers

171
00:07:14,080 --> 00:07:16,000
the loading process is pretty

172
00:07:16,000 --> 00:07:17,759
straightforward you just say packet

173
00:07:17,759 --> 00:07:19,360
manager install

174
00:07:19,360 --> 00:07:20,880
and give the name

175
00:07:20,880 --> 00:07:24,080
of the package and the version in the

176
00:07:24,080 --> 00:07:25,599
python you can say

177
00:07:25,599 --> 00:07:27,039
uh

178
00:07:27,039 --> 00:07:28,880
pip install and

179
00:07:28,880 --> 00:07:30,800
the version title

180
00:07:30,800 --> 00:07:32,000
and

181
00:07:32,000 --> 00:07:33,759
this package will be

182
00:07:33,759 --> 00:07:36,960
loaded from the report you mentioned and

183
00:07:36,960 --> 00:07:38,880
there can be several repositories

184
00:07:38,880 --> 00:07:40,720
available and

185
00:07:40,720 --> 00:07:43,840
in the conflict of the package messenger

186
00:07:43,840 --> 00:07:45,360
you can see several

187
00:07:45,360 --> 00:07:48,160
repositories and you can have both

188
00:07:48,160 --> 00:07:49,199
private

189
00:07:49,199 --> 00:07:50,800
reps and

190
00:07:50,800 --> 00:07:53,919
public wraps and what's going to happen

191
00:07:53,919 --> 00:07:55,280
if

192
00:07:55,280 --> 00:07:57,360
in the private or public wrap you can

193
00:07:57,360 --> 00:07:58,879
see an artifact

194
00:07:58,879 --> 00:08:01,440
with the same title

195
00:08:01,440 --> 00:08:04,560
but different content

196
00:08:05,520 --> 00:08:08,080
the package manager will look at both of

197
00:08:08,080 --> 00:08:09,199
them

198
00:08:09,199 --> 00:08:13,039
to download the version of the artifact

199
00:08:13,039 --> 00:08:16,159
with a later version

200
00:08:20,160 --> 00:08:22,240
if you don't mention the specific

201
00:08:22,240 --> 00:08:24,800
version in the install config

202
00:08:24,800 --> 00:08:27,039
this

203
00:08:39,760 --> 00:08:42,640
maybe they get it from the manifests

204
00:08:42,640 --> 00:08:44,399
or

205
00:08:44,399 --> 00:08:47,200
maybe from the code so if they know the

206
00:08:47,200 --> 00:08:49,680
title or the name of the package

207
00:08:49,680 --> 00:08:51,200
understanding that this package is not

208
00:08:51,200 --> 00:08:54,320
available from the public repository you

209
00:08:54,320 --> 00:08:56,240
can try to load

210
00:08:56,240 --> 00:08:59,360
a changed version

211
00:08:59,440 --> 00:09:01,920
with some payload

212
00:09:01,920 --> 00:09:04,880
to the public wrap

213
00:09:05,519 --> 00:09:07,040
another

214
00:09:07,040 --> 00:09:09,519
package manager in the company

215
00:09:09,519 --> 00:09:11,519
is set

216
00:09:11,519 --> 00:09:12,399
to

217
00:09:12,399 --> 00:09:13,839
pick

218
00:09:13,839 --> 00:09:16,080
their packages from the public and

219
00:09:16,080 --> 00:09:17,360
private traps

220
00:09:17,360 --> 00:09:19,519
then they will take the later version

221
00:09:19,519 --> 00:09:22,320
from the public wrap

222
00:09:22,320 --> 00:09:24,880
and this will bring you

223
00:09:24,880 --> 00:09:28,399
the adversaries code

224
00:09:30,160 --> 00:09:33,120
an attack like that

225
00:09:33,120 --> 00:09:37,360
can happen through the package managers

226
00:09:37,360 --> 00:09:40,880
and we also have the atta factory

227
00:09:40,880 --> 00:09:42,959
and there you can bring several reps

228
00:09:42,959 --> 00:09:47,040
together into one virtual wrap

229
00:09:47,920 --> 00:09:48,839
and this

230
00:09:48,839 --> 00:09:51,440
way you can

231
00:09:51,440 --> 00:09:55,120
merge a private and a public wrap

232
00:09:55,120 --> 00:09:56,880
and

233
00:09:56,880 --> 00:09:57,680
this

234
00:09:57,680 --> 00:10:00,000
way

235
00:10:00,640 --> 00:10:02,640
you can ask

236
00:10:02,640 --> 00:10:05,839
for a package with the title

237
00:10:05,839 --> 00:10:06,800
which is

238
00:10:06,800 --> 00:10:08,800
supposed to be in the private trap only

239
00:10:08,800 --> 00:10:10,160
but if the

240
00:10:10,160 --> 00:10:11,440
later version

241
00:10:11,440 --> 00:10:14,399
is available from the public wrap then

242
00:10:14,399 --> 00:10:15,760
the public wrapped version will be

243
00:10:15,760 --> 00:10:18,760
downloaded

244
00:10:25,440 --> 00:10:27,680
another kind of risk

245
00:10:27,680 --> 00:10:28,560
is

246
00:10:28,560 --> 00:10:32,079
the use of free software

247
00:10:32,079 --> 00:10:35,199
we cannot be sure

248
00:10:35,600 --> 00:10:37,360
that uh the person developing the

249
00:10:37,360 --> 00:10:38,560
software

250
00:10:38,560 --> 00:10:40,800
isn't mad

251
00:10:40,800 --> 00:10:43,360
is not adding malware to the product you

252
00:10:43,360 --> 00:10:47,519
know this happened in march this year

253
00:10:47,519 --> 00:10:51,040
the developer of a popular package

254
00:10:51,040 --> 00:10:53,839
not a pc

255
00:10:54,240 --> 00:10:56,959
for testing

256
00:10:57,839 --> 00:10:58,720
just

257
00:10:58,720 --> 00:11:02,399
added to the code some malware

258
00:11:02,399 --> 00:11:03,920
which checks

259
00:11:03,920 --> 00:11:05,920
the apis

260
00:11:05,920 --> 00:11:08,160
of the company where it's launched and

261
00:11:08,160 --> 00:11:11,040
if it belongs to russia or belarus

262
00:11:11,040 --> 00:11:12,000
then

263
00:11:12,000 --> 00:11:15,760
the files are re-recorded

264
00:11:15,760 --> 00:11:18,240
so you can only have the files with

265
00:11:18,240 --> 00:11:19,200
hearts

266
00:11:19,200 --> 00:11:21,200
instead of your

267
00:11:21,200 --> 00:11:23,519
proper files

268
00:11:23,519 --> 00:11:25,360
some other issues excessive access

269
00:11:25,360 --> 00:11:27,279
rights to the wrap

270
00:11:27,279 --> 00:11:29,839
to build

271
00:11:31,040 --> 00:11:32,240
and

272
00:11:32,240 --> 00:11:34,959
build agents

273
00:11:35,360 --> 00:11:36,560
here we have

274
00:11:36,560 --> 00:11:40,518
a new staff member

275
00:11:43,120 --> 00:11:44,880
there are many

276
00:11:44,880 --> 00:11:46,880
projects with codes

277
00:11:46,880 --> 00:11:48,880
so the person is usually added to a

278
00:11:48,880 --> 00:11:50,720
group having access

279
00:11:50,720 --> 00:11:52,320
to a lot of

280
00:11:52,320 --> 00:11:53,839
repositories

281
00:11:53,839 --> 00:11:57,040
and this stuff

282
00:11:57,040 --> 00:11:58,160
will not

283
00:11:58,160 --> 00:12:00,160
necessarily

284
00:12:00,160 --> 00:12:02,399
use

285
00:12:02,959 --> 00:12:04,320
or commit

286
00:12:04,320 --> 00:12:09,079
code to all of them

287
00:12:10,000 --> 00:12:10,800
if

288
00:12:10,800 --> 00:12:13,680
an account like that is cracked

289
00:12:13,680 --> 00:12:15,839
the threat agent can get access to all

290
00:12:15,839 --> 00:12:18,240
the reps

291
00:12:18,240 --> 00:12:19,279
the code

292
00:12:19,279 --> 00:12:20,880
and the script

293
00:12:20,880 --> 00:12:24,720
in the build are usually in one rep

294
00:12:24,720 --> 00:12:25,920
and

295
00:12:25,920 --> 00:12:28,240
this means that the

296
00:12:28,240 --> 00:12:31,519
code from the rep can be modified and

297
00:12:31,519 --> 00:12:32,959
this way you can get access to the

298
00:12:32,959 --> 00:12:35,959
agents

299
00:12:39,279 --> 00:12:41,440
if these agents

300
00:12:41,440 --> 00:12:43,839
have built coming from different

301
00:12:43,839 --> 00:12:46,079
branches including from developing a

302
00:12:46,079 --> 00:12:47,040
visa

303
00:12:47,040 --> 00:12:48,320
and then

304
00:12:48,320 --> 00:12:50,560
the code modified in their release

305
00:12:50,560 --> 00:12:53,760
branches and the artifacts which are

306
00:12:53,760 --> 00:12:54,720
built

307
00:12:54,720 --> 00:12:56,480
there in the

308
00:12:56,480 --> 00:12:58,399
develop branches so apart from that you

309
00:12:58,399 --> 00:13:00,000
will be able to

310
00:13:00,000 --> 00:13:02,240
modify the artifacts from the release

311
00:13:02,240 --> 00:13:05,240
branches

312
00:13:08,880 --> 00:13:10,160
solutions

313
00:13:10,160 --> 00:13:11,360
use

314
00:13:11,360 --> 00:13:12,560
different

315
00:13:12,560 --> 00:13:14,880
build agents

316
00:13:14,880 --> 00:13:18,920
use container technologies

317
00:13:21,279 --> 00:13:23,600
so that when the scripts are modified

318
00:13:23,600 --> 00:13:25,920
you don't grant access to the whole

319
00:13:25,920 --> 00:13:30,000
agent system but rather to the container

320
00:13:30,000 --> 00:13:31,839
then

321
00:13:31,839 --> 00:13:34,959
when you get access

322
00:13:34,959 --> 00:13:37,440
to the container you won't be able to

323
00:13:37,440 --> 00:13:39,199
modify

324
00:13:39,199 --> 00:13:41,839
other builds

325
00:13:42,160 --> 00:13:45,120
on the same agent

326
00:13:45,680 --> 00:13:47,199
now basically

327
00:13:47,199 --> 00:13:49,839
my colleague

328
00:13:50,720 --> 00:13:53,120
will share with you the issues you might

329
00:13:53,120 --> 00:13:55,440
face

330
00:13:56,399 --> 00:13:59,839
using a team city extension

331
00:13:59,839 --> 00:14:03,839
which looks quite benign

332
00:14:05,760 --> 00:14:09,360
hello everyone my name is vaisa

333
00:14:09,360 --> 00:14:11,199
i'm a developer from the positive

334
00:14:11,199 --> 00:14:13,199
technologies company

335
00:14:13,199 --> 00:14:16,320
i deal with data pipelines and i also

336
00:14:16,320 --> 00:14:19,279
developed petrol eight mike petrol vm

337
00:14:19,279 --> 00:14:21,680
and i also

338
00:14:21,680 --> 00:14:22,720
develop

339
00:14:22,720 --> 00:14:25,040
services for standoff so you've had

340
00:14:25,040 --> 00:14:27,600
theory before and now i'll give you

341
00:14:27,600 --> 00:14:30,639
the dirt effect so this is uh

342
00:14:30,639 --> 00:14:32,880
an example built on the abstract

343
00:14:32,880 --> 00:14:34,560
infrastructure

344
00:14:34,560 --> 00:14:36,480
you can find from any company any

345
00:14:36,480 --> 00:14:39,360
startup and so you'll see how it can be

346
00:14:39,360 --> 00:14:42,560
exploited let's go back to jaina's slide

347
00:14:42,560 --> 00:14:45,360
here is how it works let's imagine that

348
00:14:45,360 --> 00:14:47,680
we have an i.t company so we want to

349
00:14:47,680 --> 00:14:50,160
develop our product which will make

350
00:14:50,160 --> 00:14:52,000
money for us

351
00:14:52,000 --> 00:14:54,399
okay what do we need for that so we need

352
00:14:54,399 --> 00:14:56,720
to store the code somewhere

353
00:14:56,720 --> 00:14:58,399
now we have two

354
00:14:58,399 --> 00:14:59,519
versions

355
00:14:59,519 --> 00:15:02,560
uh get lab and github but i haven't

356
00:15:02,560 --> 00:15:04,639
heard a single example where a github

357
00:15:04,639 --> 00:15:07,199
would be used i guess it has a lot of

358
00:15:07,199 --> 00:15:08,240
cons

359
00:15:08,240 --> 00:15:11,199
it doesn't doesn't have the cicd and

360
00:15:11,199 --> 00:15:12,959
well i believe that github is a

361
00:15:12,959 --> 00:15:15,120
must-have almost everywhere

362
00:15:15,120 --> 00:15:17,600
okay we store the code somewhere

363
00:15:17,600 --> 00:15:21,040
then we need to have builds

364
00:15:21,040 --> 00:15:22,720
to deliver the file to the client we

365
00:15:22,720 --> 00:15:25,040
want the code to become an artifact we

366
00:15:25,040 --> 00:15:27,279
are not going to send the code and we

367
00:15:27,279 --> 00:15:30,000
need it to be deployed to the production

368
00:15:30,000 --> 00:15:32,399
server or the update server the client

369
00:15:32,399 --> 00:15:36,079
will get the ad effect from

370
00:15:37,360 --> 00:15:39,519
the solutions we can apply here team

371
00:15:39,519 --> 00:15:41,839
city

372
00:15:43,040 --> 00:15:45,360
and other examples

373
00:15:45,360 --> 00:15:46,399
usually

374
00:15:46,399 --> 00:15:49,680
the corporate standard now is steam city

375
00:15:49,680 --> 00:15:51,920
it's convenient it has a clear quality

376
00:15:51,920 --> 00:15:53,360
of the code it has

377
00:15:53,360 --> 00:15:55,759
good technical support no advertising by

378
00:15:55,759 --> 00:15:58,320
the way what is tim city it's not a

379
00:15:58,320 --> 00:15:59,360
black

380
00:15:59,360 --> 00:16:02,639
box so we have some runners there so tim

381
00:16:02,639 --> 00:16:04,399
city is a kind of a manager

382
00:16:04,399 --> 00:16:08,480
and the code is built by the unix and

383
00:16:08,480 --> 00:16:09,680
windows

384
00:16:09,680 --> 00:16:11,920
machines which are called agents how

385
00:16:11,920 --> 00:16:13,360
does carbon happen

386
00:16:13,360 --> 00:16:14,720
there is a command coming to the team

387
00:16:14,720 --> 00:16:16,399
city so

388
00:16:16,399 --> 00:16:18,160
build the side effects we have the code

389
00:16:18,160 --> 00:16:20,320
from the github to the runner the runner

390
00:16:20,320 --> 00:16:23,279
performs the operations from the script

391
00:16:23,279 --> 00:16:26,240
and then we have the output the artifact

392
00:16:26,240 --> 00:16:28,560
then the artifact is either stored in

393
00:16:28,560 --> 00:16:31,519
gitlab or at factory or any other

394
00:16:31,519 --> 00:16:34,399
warehouse related to the update server

395
00:16:34,399 --> 00:16:35,519
then we

396
00:16:35,519 --> 00:16:38,079
can launch deploy with teamcity and the

397
00:16:38,079 --> 00:16:39,519
artifact we have

398
00:16:39,519 --> 00:16:41,440
will fly

399
00:16:41,440 --> 00:16:43,279
to the update server

400
00:16:43,279 --> 00:16:46,720
where the client can get it

401
00:16:48,160 --> 00:16:50,399
okay we're a threat agent

402
00:16:50,399 --> 00:16:52,720
just imagine that we need to crack the

403
00:16:52,720 --> 00:16:54,399
system

404
00:16:54,399 --> 00:16:55,920
what can we do

405
00:16:55,920 --> 00:16:58,399
this is a real case

406
00:16:58,399 --> 00:17:01,279
a guy a staff member

407
00:17:01,279 --> 00:17:03,360
just

408
00:17:03,360 --> 00:17:05,599
shares their credentials so maybe it's

409
00:17:05,599 --> 00:17:08,480
phishing maybe he did it for fun so the

410
00:17:08,480 --> 00:17:12,079
hacker gets hacker gets into the system

411
00:17:12,079 --> 00:17:13,439
so we can see what we have with the

412
00:17:13,439 --> 00:17:15,280
input okay they scan

413
00:17:15,280 --> 00:17:16,959
the network they see the services so

414
00:17:16,959 --> 00:17:19,199
what do they have they have access to

415
00:17:19,199 --> 00:17:21,599
gitlab

416
00:17:21,599 --> 00:17:23,520
okay we have one project here and we can

417
00:17:23,520 --> 00:17:24,640
have many

418
00:17:24,640 --> 00:17:26,319
okay we take one

419
00:17:26,319 --> 00:17:28,559
that's called package scanner

420
00:17:28,559 --> 00:17:31,679
good we don't have any credentials here

421
00:17:31,679 --> 00:17:34,320
so we can only read it we cannot commit

422
00:17:34,320 --> 00:17:36,880
any changes we just have a look at what

423
00:17:36,880 --> 00:17:38,559
we have there

424
00:17:38,559 --> 00:17:41,760
okay they can see the code

425
00:17:41,760 --> 00:17:45,039
nothing unexpected here

426
00:17:45,039 --> 00:17:47,360
and this tick this green tick should be

427
00:17:47,360 --> 00:17:48,880
mentioned what does it mean it means

428
00:17:48,880 --> 00:17:51,280
that we have ci cd voltage on this

429
00:17:51,280 --> 00:17:52,320
project

430
00:17:52,320 --> 00:17:55,200
okay we click it we get to team city

431
00:17:55,200 --> 00:17:57,760
okay we have the first connection

432
00:17:57,760 --> 00:18:01,240
the code storage

433
00:18:05,919 --> 00:18:06,799
okay

434
00:18:06,799 --> 00:18:09,679
we have the connection between storage

435
00:18:09,679 --> 00:18:11,600
and building

436
00:18:11,600 --> 00:18:12,640
we have

437
00:18:12,640 --> 00:18:13,600
two

438
00:18:13,600 --> 00:18:15,039
stages here

439
00:18:15,039 --> 00:18:17,280
the idea is that the first stage is

440
00:18:17,280 --> 00:18:19,440
building the artifact and the second one

441
00:18:19,440 --> 00:18:21,280
is deploying it

442
00:18:21,280 --> 00:18:24,080
watch how we pay attention to

443
00:18:24,080 --> 00:18:25,919
number one

444
00:18:25,919 --> 00:18:27,600
raise your hands if you have dealt with

445
00:18:27,600 --> 00:18:29,440
team city or going to do it we have

446
00:18:29,440 --> 00:18:31,520
introduced it

447
00:18:31,520 --> 00:18:34,879
okay we have people like that good

448
00:18:36,880 --> 00:18:39,200
we cannot see anything here

449
00:18:39,200 --> 00:18:42,080
so we can see this sandwich to the right

450
00:18:42,080 --> 00:18:44,480
in blue it means that the output will be

451
00:18:44,480 --> 00:18:47,120
an artifact an unloadable one and we

452
00:18:47,120 --> 00:18:49,200
have the run button at the build stage

453
00:18:49,200 --> 00:18:52,000
so we can run the build and we can add

454
00:18:52,000 --> 00:18:53,520
something

455
00:18:53,520 --> 00:18:55,600
okay at the deploy stage we cannot do

456
00:18:55,600 --> 00:18:58,160
anything we have no rights we cannot

457
00:18:58,160 --> 00:18:59,520
influence where it will be deployed or

458
00:18:59,520 --> 00:19:02,160
introduce any changes so we get to a

459
00:19:02,160 --> 00:19:05,760
case where we have minimal rights

460
00:19:05,760 --> 00:19:07,520
what's our role

461
00:19:07,520 --> 00:19:09,760
with team city let's have a look at the

462
00:19:09,760 --> 00:19:10,960
settings

463
00:19:10,960 --> 00:19:13,360
we have asked our friends

464
00:19:13,360 --> 00:19:15,039
about the rights

465
00:19:15,039 --> 00:19:16,240
they

466
00:19:16,240 --> 00:19:18,960
give to the staff working in team city

467
00:19:18,960 --> 00:19:21,039
here are the three major rules number

468
00:19:21,039 --> 00:19:23,039
one run build

469
00:19:23,039 --> 00:19:26,000
so the people can run built

470
00:19:26,000 --> 00:19:28,160
so this can be developed branches so

471
00:19:28,160 --> 00:19:30,160
they need to test what they have coded

472
00:19:30,160 --> 00:19:31,760
to see whether it works before the

473
00:19:31,760 --> 00:19:34,240
testing stage

474
00:19:34,240 --> 00:19:36,400
okay then we have the project reviewer

475
00:19:36,400 --> 00:19:37,679
this is the back

476
00:19:37,679 --> 00:19:39,760
basic right to see the project

477
00:19:39,760 --> 00:19:42,480
now we have the customized build

478
00:19:42,480 --> 00:19:44,720
parameters going back to the previous

479
00:19:44,720 --> 00:19:45,600
slide

480
00:19:45,600 --> 00:19:47,760
we have the run and we have the three

481
00:19:47,760 --> 00:19:50,320
dots there okay what does it mean

482
00:19:50,320 --> 00:19:52,799
we can add parameters to the build and

483
00:19:52,799 --> 00:19:54,960
to deploy

484
00:19:54,960 --> 00:19:57,679
why do we need it

485
00:19:58,000 --> 00:20:01,280
when you have deploy and build you have

486
00:20:01,280 --> 00:20:03,039
some meta parameters like flags for

487
00:20:03,039 --> 00:20:05,120
build some meta information all the

488
00:20:05,120 --> 00:20:06,960
artifact to be built and at the deploy

489
00:20:06,960 --> 00:20:08,799
stage we need to

490
00:20:08,799 --> 00:20:11,679
mention the ip so without the customized

491
00:20:11,679 --> 00:20:13,440
build parameter role

492
00:20:13,440 --> 00:20:16,720
we cannot just press run button

493
00:20:16,720 --> 00:20:18,400
so we can be

494
00:20:18,400 --> 00:20:20,799
very good uh programmers who can

495
00:20:20,799 --> 00:20:23,039
generate things in automated way which

496
00:20:23,039 --> 00:20:25,919
is not very reliable

497
00:20:26,400 --> 00:20:28,880
okay we have two points of ingress what

498
00:20:28,880 --> 00:20:31,440
can we do

499
00:20:31,679 --> 00:20:35,000
number one

500
00:20:35,120 --> 00:20:37,280
the previous standoffs uh show that

501
00:20:37,280 --> 00:20:39,200
people did it this way they try to find

502
00:20:39,200 --> 00:20:42,720
their ie vulnerability for gitlab and to

503
00:20:42,720 --> 00:20:45,039
launch their some scripts which will try

504
00:20:45,039 --> 00:20:48,880
to exploit this ic well

505
00:20:48,880 --> 00:20:50,799
you will be

506
00:20:50,799 --> 00:20:53,360
discovered and quite quickly

507
00:20:53,360 --> 00:20:55,919
and chances are low that anyone is going

508
00:20:55,919 --> 00:20:56,960
to

509
00:20:56,960 --> 00:20:59,360
pull it off people are trying to keep

510
00:20:59,360 --> 00:21:02,159
track of the versions of the software

511
00:21:02,159 --> 00:21:05,679
and this is a so-so option another

512
00:21:05,679 --> 00:21:07,840
approach is looking for

513
00:21:07,840 --> 00:21:09,440
vulnerabilities

514
00:21:09,440 --> 00:21:12,240
the production server so after team city

515
00:21:12,240 --> 00:21:14,559
we see deploy so we know where it is

516
00:21:14,559 --> 00:21:15,600
deployed

517
00:21:15,600 --> 00:21:18,400
so we have the unix or windows host

518
00:21:18,400 --> 00:21:19,440
there

519
00:21:19,440 --> 00:21:21,600
so we can try to

520
00:21:21,600 --> 00:21:24,240
find some

521
00:21:25,120 --> 00:21:27,200
zero day vulnerabilities which are

522
00:21:27,200 --> 00:21:29,200
published say yesterday today or

523
00:21:29,200 --> 00:21:32,880
tomorrow and we can hope to get access

524
00:21:32,880 --> 00:21:36,000
well this is quite questionable

525
00:21:36,000 --> 00:21:38,240
i don't know any statistics i believe

526
00:21:38,240 --> 00:21:41,520
that it scarcely happens and the third

527
00:21:41,520 --> 00:21:43,840
option is to use social engineer to

528
00:21:43,840 --> 00:21:47,039
obtain the credentials of those who have

529
00:21:47,039 --> 00:21:49,840
the right to impact the code or the

530
00:21:49,840 --> 00:21:52,159
update server

531
00:21:52,159 --> 00:21:56,919
so we can say this case quite often

532
00:21:58,960 --> 00:22:01,360
and here we rely on other people we need

533
00:22:01,360 --> 00:22:04,000
a 100 option it should work every time

534
00:22:04,000 --> 00:22:06,240
we just press the button and hack

535
00:22:06,240 --> 00:22:08,640
everything

536
00:22:09,200 --> 00:22:10,159
and the

537
00:22:10,159 --> 00:22:11,440
final

538
00:22:11,440 --> 00:22:14,400
solution is to try to

539
00:22:14,400 --> 00:22:17,679
impact uh the code at the build stage

540
00:22:17,679 --> 00:22:20,000
uh with the teamcity agent this credence

541
00:22:20,000 --> 00:22:22,320
when the code is delivered to the build

542
00:22:22,320 --> 00:22:24,799
agent if we can connect to the agent and

543
00:22:24,799 --> 00:22:27,120
we can impact it then the process when

544
00:22:27,120 --> 00:22:29,360
the artifact is being built can be

545
00:22:29,360 --> 00:22:30,559
altered

546
00:22:30,559 --> 00:22:31,280
so

547
00:22:31,280 --> 00:22:32,400
this

548
00:22:32,400 --> 00:22:34,080
sounds nice but the question is how we

549
00:22:34,080 --> 00:22:35,360
can do it

550
00:22:35,360 --> 00:22:37,760
okay here's the scheme

551
00:22:37,760 --> 00:22:39,679
we have team center in the center and we

552
00:22:39,679 --> 00:22:42,400
have the build step

553
00:22:42,400 --> 00:22:44,960
okay it goes to agent one

554
00:22:44,960 --> 00:22:48,000
so we can have a lot of agents if one is

555
00:22:48,000 --> 00:22:50,960
busy we can take that one we we can

556
00:22:50,960 --> 00:22:53,120
also see intensity which agent is doing

557
00:22:53,120 --> 00:22:55,360
what and this is an issue so we press

558
00:22:55,360 --> 00:22:57,600
the build button

559
00:22:57,600 --> 00:23:00,240
and uh so the command goes to the agent

560
00:23:00,240 --> 00:23:02,559
the agent starts uh assembling the code

561
00:23:02,559 --> 00:23:04,640
so if we are attackers there are three

562
00:23:04,640 --> 00:23:06,799
ways we can impact this

563
00:23:06,799 --> 00:23:10,400
so the first way is brute force

564
00:23:10,400 --> 00:23:11,200
so

565
00:23:11,200 --> 00:23:12,799
you can try to crack for their

566
00:23:12,799 --> 00:23:14,159
credentials

567
00:23:14,159 --> 00:23:16,559
and to get to the agent

568
00:23:16,559 --> 00:23:18,559
this is difficult to do because

569
00:23:18,559 --> 00:23:21,520
there are some tools used now to protect

570
00:23:21,520 --> 00:23:23,200
the passwords

571
00:23:23,200 --> 00:23:25,840
the second way

572
00:23:25,840 --> 00:23:27,919
is

573
00:23:27,919 --> 00:23:30,600
to change the

574
00:23:30,600 --> 00:23:32,720
outgoing data

575
00:23:32,720 --> 00:23:35,360
well some say that http is used for this

576
00:23:35,360 --> 00:23:37,280
process they say why to deal with

577
00:23:37,280 --> 00:23:39,360
certificates and valve and so on so they

578
00:23:39,360 --> 00:23:42,960
send this traffic in a non-encrypted way

579
00:23:42,960 --> 00:23:45,440
and if the threat agent has access here

580
00:23:45,440 --> 00:23:46,799
so they can

581
00:23:46,799 --> 00:23:50,480
change the artifact or the code

582
00:23:50,480 --> 00:23:53,360
the output code okay it sounds nice okay

583
00:23:53,360 --> 00:23:55,440
say our company is very well protected

584
00:23:55,440 --> 00:23:57,760
they add https

585
00:23:57,760 --> 00:24:00,080
okay then this will not work and the

586
00:24:00,080 --> 00:24:02,320
third option is to impact the data in

587
00:24:02,320 --> 00:24:04,640
the build process so we don't know how

588
00:24:04,640 --> 00:24:07,679
to do it but this would be great

589
00:24:07,679 --> 00:24:10,880
okay let's dig further

590
00:24:14,000 --> 00:24:16,159
if you have the project viewer right you

591
00:24:16,159 --> 00:24:18,799
can have the logs of some stages

592
00:24:18,799 --> 00:24:22,080
the build stage locks and the deployable

593
00:24:22,080 --> 00:24:24,720
stage blocks so you can launch

594
00:24:24,720 --> 00:24:26,000
build

595
00:24:26,000 --> 00:24:28,080
so this gives you a kind of selection

596
00:24:28,080 --> 00:24:30,240
you can see the final build you can run

597
00:24:30,240 --> 00:24:33,200
it many times and save logs and find

598
00:24:33,200 --> 00:24:35,440
some

599
00:24:35,520 --> 00:24:38,159
trends okay we have done it this is a

600
00:24:38,159 --> 00:24:40,640
great company they hard code the agents

601
00:24:40,640 --> 00:24:41,520
so

602
00:24:41,520 --> 00:24:43,520
we have one build for one legend and

603
00:24:43,520 --> 00:24:46,159
deployed deploy for the other agent so

604
00:24:46,159 --> 00:24:48,640
the hacker cracking one agent cannot

605
00:24:48,640 --> 00:24:50,799
impact the other step this is great okay

606
00:24:50,799 --> 00:24:53,039
we have seen it

607
00:24:53,039 --> 00:24:55,840
another important parameter

608
00:24:55,840 --> 00:24:57,120
is

609
00:24:57,120 --> 00:24:59,600
the checkout directory

610
00:24:59,600 --> 00:25:01,279
what does it mean okay everything will

611
00:25:01,279 --> 00:25:02,880
be around this parameter this is really

612
00:25:02,880 --> 00:25:05,039
important if we have one of the same

613
00:25:05,039 --> 00:25:06,880
step launched from the same agent i

614
00:25:06,880 --> 00:25:08,960
don't know why they did it in team city

615
00:25:08,960 --> 00:25:10,880
then it will be built the output

616
00:25:10,880 --> 00:25:12,840
artifact will be built in one

617
00:25:12,840 --> 00:25:14,799
directory

618
00:25:14,799 --> 00:25:18,000
so we can see otp temp city agent work

619
00:25:18,000 --> 00:25:19,360
and then the hash

620
00:25:19,360 --> 00:25:21,039
for some reason they decided that

621
00:25:21,039 --> 00:25:23,840
building a new folder every time is too

622
00:25:23,840 --> 00:25:25,600
difficult so

623
00:25:25,600 --> 00:25:27,840
they store it everywhere so the hacker

624
00:25:27,840 --> 00:25:30,159
doesn't need to

625
00:25:30,159 --> 00:25:31,919
look for the directory so they know

626
00:25:31,919 --> 00:25:32,960
where it is

627
00:25:32,960 --> 00:25:36,480
so okay we have this box ticked we know

628
00:25:36,480 --> 00:25:39,520
where the artifact is built and in which

629
00:25:39,520 --> 00:25:42,559
folder the output will be stored

630
00:25:42,559 --> 00:25:46,080
let's move further

631
00:25:46,559 --> 00:25:48,240
the second rule

632
00:25:48,240 --> 00:25:52,080
we can have meta flags for the builds

633
00:25:52,080 --> 00:25:54,880
we click this three dots

634
00:25:54,880 --> 00:25:55,760
and

635
00:25:55,760 --> 00:25:58,960
go to the parameters okay there we can

636
00:25:58,960 --> 00:26:01,520
check anything so in teamcity

637
00:26:01,520 --> 00:26:02,960
they decided that they will not

638
00:26:02,960 --> 00:26:06,400
segregate the flags you can say you just

639
00:26:06,400 --> 00:26:07,520
pick

640
00:26:07,520 --> 00:26:08,880
what you like

641
00:26:08,880 --> 00:26:10,559
and how they can exploit this

642
00:26:10,559 --> 00:26:13,200
vulnerability

643
00:26:13,200 --> 00:26:14,159
we can

644
00:26:14,159 --> 00:26:15,279
interact

645
00:26:15,279 --> 00:26:17,840
and impact the environmental

646
00:26:17,840 --> 00:26:21,360
variables so we can

647
00:26:21,360 --> 00:26:23,600
say what should be added to the

648
00:26:23,600 --> 00:26:24,960
environment uh

649
00:26:24,960 --> 00:26:27,760
at the agent level and zhenya said a

650
00:26:27,760 --> 00:26:31,279
good thing he said okay we can change

651
00:26:31,279 --> 00:26:33,120
the variable

652
00:26:33,120 --> 00:26:36,000
so this is the unix agent so we can scan

653
00:26:36,000 --> 00:26:37,600
it we can see it

654
00:26:37,600 --> 00:26:39,360
okay

655
00:26:39,360 --> 00:26:41,440
if we change the

656
00:26:41,440 --> 00:26:44,080
uh press

657
00:26:44,240 --> 00:26:47,360
variable we can add tmp okay we can see

658
00:26:47,360 --> 00:26:49,039
the builds so we can see what is run

659
00:26:49,039 --> 00:26:51,440
when the builds happen so at the build

660
00:26:51,440 --> 00:26:53,840
stage we can see that they start with a

661
00:26:53,840 --> 00:26:55,440
pi

662
00:26:55,440 --> 00:26:58,880
installer okay this project is on python

663
00:26:58,880 --> 00:27:00,159
so we use the pi

664
00:27:00,159 --> 00:27:04,080
installer so we compile the python okay

665
00:27:04,080 --> 00:27:06,559
this is the pi installer okay what can

666
00:27:06,559 --> 00:27:08,320
we do

667
00:27:08,320 --> 00:27:10,320
if we

668
00:27:10,320 --> 00:27:12,480
have access to the agent

669
00:27:12,480 --> 00:27:14,880
to break their credential for instance

670
00:27:14,880 --> 00:27:17,039
then in teamcity we can

671
00:27:17,039 --> 00:27:17,840
send

672
00:27:17,840 --> 00:27:20,240
their priority directory tnp what will

673
00:27:20,240 --> 00:27:22,480
happen if we connect to the tmp

674
00:27:22,480 --> 00:27:25,120
directory if we install if we have that

675
00:27:25,120 --> 00:27:28,559
by installer file so tmp will be

676
00:27:28,559 --> 00:27:29,840
ranked first

677
00:27:29,840 --> 00:27:30,799
so

678
00:27:30,799 --> 00:27:33,520
when we have the command to build the

679
00:27:33,520 --> 00:27:35,520
binary in the power store they'll go to

680
00:27:35,520 --> 00:27:38,159
the tmp directory and they will find the

681
00:27:38,159 --> 00:27:41,039
file pi installer we can record anything

682
00:27:41,039 --> 00:27:43,520
like pusher's script in the checkout

683
00:27:43,520 --> 00:27:46,960
directory it will

684
00:27:46,960 --> 00:27:49,279
record our artifact

685
00:27:49,279 --> 00:27:52,000
so this is a great option i don't know

686
00:27:52,000 --> 00:27:54,000
how to connect

687
00:27:54,000 --> 00:27:56,960
we haven't briefed it

688
00:27:56,960 --> 00:27:59,360
okay

689
00:27:59,360 --> 00:28:01,520
we

690
00:28:01,520 --> 00:28:04,000
put it in our folder so we need a 100

691
00:28:04,000 --> 00:28:06,880
percent option

692
00:28:06,880 --> 00:28:10,799
so we don't want to brute force anything

693
00:28:11,360 --> 00:28:12,320
so

694
00:28:12,320 --> 00:28:15,600
this is quite interesting 2008 and 2016.

695
00:28:15,600 --> 00:28:18,320
in 2016 a guy

696
00:28:18,320 --> 00:28:21,200
was well invented maybe he was the one

697
00:28:21,200 --> 00:28:23,120
of the first but we don't know he

698
00:28:23,120 --> 00:28:25,039
published the exploit

699
00:28:25,039 --> 00:28:26,960
where they used the environment

700
00:28:26,960 --> 00:28:28,080
variables

701
00:28:28,080 --> 00:28:31,520
so we can use the wearable for pearl and

702
00:28:31,520 --> 00:28:34,559
receive the rce exploits nobody paid

703
00:28:34,559 --> 00:28:36,320
attention they said it's not a bug it's

704
00:28:36,320 --> 00:28:40,399
a feature and they kind of forgot it

705
00:28:40,399 --> 00:28:42,480
we don't have probably have python so

706
00:28:42,480 --> 00:28:46,640
how can we connect it okay 2008

707
00:28:46,640 --> 00:28:49,760
and 28 many good things happened

708
00:28:49,760 --> 00:28:52,559
okay i was at my second grade and the

709
00:28:52,559 --> 00:28:54,799
python they

710
00:28:54,799 --> 00:28:57,600
had their modern and anterior gravity

711
00:28:57,600 --> 00:28:58,399
module

712
00:28:58,399 --> 00:29:02,000
is there since 2008 it's in the basic

713
00:29:02,000 --> 00:29:03,360
images of python do you know what it is

714
00:29:03,360 --> 00:29:06,399
well i didn't know what it was

715
00:29:06,399 --> 00:29:08,799
indeed

716
00:29:10,159 --> 00:29:12,880
if we import the anti-gravity um

717
00:29:12,880 --> 00:29:14,799
module it goes to the browser

718
00:29:14,799 --> 00:29:16,640
environment finds your standard browser

719
00:29:16,640 --> 00:29:18,320
in the

720
00:29:18,320 --> 00:29:20,799
browser it opens their comic book the

721
00:29:20,799 --> 00:29:23,279
developers tell us that anti-gravity

722
00:29:23,279 --> 00:29:24,720
model will

723
00:29:24,720 --> 00:29:27,520
mark your code

724
00:29:27,520 --> 00:29:30,480
fly but actually it can make it drop

725
00:29:30,480 --> 00:29:32,960
we have the python warnings variable

726
00:29:32,960 --> 00:29:35,919
there do you know what it is

727
00:29:37,440 --> 00:29:39,600
well the python warning is

728
00:29:39,600 --> 00:29:40,720
variable

729
00:29:40,720 --> 00:29:43,679
is responsible for errors

730
00:29:43,679 --> 00:29:45,840
so visualizing these messages

731
00:29:45,840 --> 00:29:48,399
here is the structure

732
00:29:48,399 --> 00:29:49,840
so we mentioned the action at the

733
00:29:49,840 --> 00:29:52,880
beginning then the message the regular

734
00:29:52,880 --> 00:29:54,640
message

735
00:29:54,640 --> 00:29:56,880
to process the

736
00:29:56,880 --> 00:29:58,159
mistake

737
00:29:58,159 --> 00:30:00,720
or error and then line

738
00:30:00,720 --> 00:30:02,799
well if you go deeper into the code this

739
00:30:02,799 --> 00:30:05,520
is a c python screenshot latest version

740
00:30:05,520 --> 00:30:07,279
two days ago

741
00:30:07,279 --> 00:30:09,679
and here you can see the category

742
00:30:09,679 --> 00:30:11,760
processing function what does it do

743
00:30:11,760 --> 00:30:14,320
it checks okay if in the category we

744
00:30:14,320 --> 00:30:15,600
have a dot

745
00:30:15,600 --> 00:30:19,520
then it will import the

746
00:30:20,840 --> 00:30:23,360
built-ins well if it doesn't have the

747
00:30:23,360 --> 00:30:25,279
dot if you have the dot then it will

748
00:30:25,279 --> 00:30:27,279
import the module

749
00:30:27,279 --> 00:30:28,320
well

750
00:30:28,320 --> 00:30:30,240
it sounds scary

751
00:30:30,240 --> 00:30:33,039
if we have the dot in the category

752
00:30:33,039 --> 00:30:34,559
and if we

753
00:30:34,559 --> 00:30:37,840
set the the malware module it will be

754
00:30:37,840 --> 00:30:39,200
imported

755
00:30:39,200 --> 00:30:40,960
okay

756
00:30:40,960 --> 00:30:44,640
in theory we can import anything

757
00:30:45,919 --> 00:30:47,600
okay we decide to import the

758
00:30:47,600 --> 00:30:50,480
anti-gravity module what's good about it

759
00:30:50,480 --> 00:30:52,640
well it will launch the browser an

760
00:30:52,640 --> 00:30:55,360
automated way it goes to the

761
00:30:55,360 --> 00:30:58,640
environment variables so we can say this

762
00:30:58,640 --> 00:31:01,120
in the browser you can say purl thanks

763
00:31:01,120 --> 00:31:03,600
variable and then we kind of connect the

764
00:31:03,600 --> 00:31:04,640
pearl

765
00:31:04,640 --> 00:31:07,919
feature of liability with python

766
00:31:07,919 --> 00:31:11,360
do you know what pearl thinks is

767
00:31:11,840 --> 00:31:13,519
okay

768
00:31:13,519 --> 00:31:15,600
in almost all the unix systems we have

769
00:31:15,600 --> 00:31:18,918
pearl installed

770
00:31:19,039 --> 00:31:21,600
it's a it is there in the virgin

771
00:31:21,600 --> 00:31:25,360
fines and so on so in pearl they add pro

772
00:31:25,360 --> 00:31:27,679
thanks this is a tool to

773
00:31:27,679 --> 00:31:31,039
open feedback like guys it's good or

774
00:31:31,039 --> 00:31:33,120
otherwise and

775
00:31:33,120 --> 00:31:34,559
some proposals

776
00:31:34,559 --> 00:31:36,000
and

777
00:31:36,000 --> 00:31:37,200
feedback

778
00:31:37,200 --> 00:31:39,440
okay so in the browser we say pros

779
00:31:39,440 --> 00:31:43,200
thanks and pro 5a atp this was taken

780
00:31:43,200 --> 00:31:46,480
from the exploit of 2016 and there we

781
00:31:46,480 --> 00:31:49,919
show the directive mbase sprint

782
00:31:49,919 --> 00:31:52,799
then we can have some sh command and

783
00:31:52,799 --> 00:31:55,760
exit so this is the payload

784
00:31:55,760 --> 00:31:58,880
the sh command can be anything like id

785
00:31:58,880 --> 00:32:02,080
what will happen as soon as we try to

786
00:32:02,080 --> 00:32:04,720
import or launch python

787
00:32:04,720 --> 00:32:08,000
it will go to the python warnings

788
00:32:08,000 --> 00:32:10,159
variable it will try to import the

789
00:32:10,159 --> 00:32:12,240
module anti-gravity

790
00:32:12,240 --> 00:32:13,039
and

791
00:32:13,039 --> 00:32:15,200
the x model from it this will generate

792
00:32:15,200 --> 00:32:16,960
an error as soon as an error is

793
00:32:16,960 --> 00:32:18,720
generated i will try to import the

794
00:32:18,720 --> 00:32:21,120
anti-gravity module integrator will go

795
00:32:21,120 --> 00:32:23,440
to the browser variable the browser will

796
00:32:23,440 --> 00:32:27,360
go to perl probable gopro 5 opt variable

797
00:32:27,360 --> 00:32:31,440
pro 5 otp has the payload the payload is

798
00:32:31,440 --> 00:32:32,240
a

799
00:32:32,240 --> 00:32:35,200
run and whatever we launch in python

800
00:32:35,200 --> 00:32:36,240
we can

801
00:32:36,240 --> 00:32:39,519
say python 3 or python or python 3 and a

802
00:32:39,519 --> 00:32:42,159
script anyway we'll have an error and

803
00:32:42,159 --> 00:32:43,519
this will

804
00:32:43,519 --> 00:32:45,519
run the payload

805
00:32:45,519 --> 00:32:47,360
when we googled it for the first time we

806
00:32:47,360 --> 00:32:48,960
were surprised to see that it hasn't

807
00:32:48,960 --> 00:32:51,600
been fixed now we will tell you how to

808
00:32:51,600 --> 00:32:53,760
exploit it

809
00:32:53,760 --> 00:32:55,039
okay

810
00:32:55,039 --> 00:32:56,960
we are a guy without

811
00:32:56,960 --> 00:32:58,240
any

812
00:32:58,240 --> 00:33:00,240
important authority here so the

813
00:33:00,240 --> 00:33:02,159
customized build parameters we say that

814
00:33:02,159 --> 00:33:04,080
we want to change the virtual

815
00:33:04,080 --> 00:33:05,679
variables

816
00:33:05,679 --> 00:33:06,880
and here we

817
00:33:06,880 --> 00:33:11,760
pick the browser problem 5 opt and

818
00:33:11,760 --> 00:33:14,799
warnings and we run it the script of the

819
00:33:14,799 --> 00:33:18,159
payload has the id command

820
00:33:18,159 --> 00:33:19,360
okay

821
00:33:19,360 --> 00:33:22,000
we have built

822
00:33:22,000 --> 00:33:24,880
then we look at the logs

823
00:33:24,880 --> 00:33:26,000
when uh

824
00:33:26,000 --> 00:33:28,080
the code is loaded the

825
00:33:28,080 --> 00:33:30,640
pi installer is load loaded then they

826
00:33:30,640 --> 00:33:31,919
use python

827
00:33:31,919 --> 00:33:33,760
and okay we import the anti-gravity

828
00:33:33,760 --> 00:33:35,919
model it loads the payload

829
00:33:35,919 --> 00:33:37,039
and

830
00:33:37,039 --> 00:33:38,799
it's not python running anymore it's our

831
00:33:38,799 --> 00:33:40,880
payloads running now so we have the

832
00:33:40,880 --> 00:33:42,880
route at the agent

833
00:33:42,880 --> 00:33:44,559
that's nice

834
00:33:44,559 --> 00:33:47,279
what can be done here okay people can

835
00:33:47,279 --> 00:33:49,840
say this is python so this is uh not

836
00:33:49,840 --> 00:33:52,320
interesting you just invent it it's not

837
00:33:52,320 --> 00:33:53,919
used in real life

838
00:33:53,919 --> 00:33:57,200
harbor has a good article on this we use

839
00:33:57,200 --> 00:33:59,919
it for this research and then we have

840
00:33:59,919 --> 00:34:02,240
examples for python

841
00:34:02,240 --> 00:34:03,600
for pearl

842
00:34:03,600 --> 00:34:05,120
and

843
00:34:05,120 --> 00:34:06,480
so

844
00:34:06,480 --> 00:34:08,399
so php and node

845
00:34:08,399 --> 00:34:10,960
js and pearls the three languages which

846
00:34:10,960 --> 00:34:12,560
have this vulnerability if you have a

847
00:34:12,560 --> 00:34:14,159
project to use

848
00:34:14,159 --> 00:34:15,679
with a

849
00:34:15,679 --> 00:34:17,599
teamcity or any other

850
00:34:17,599 --> 00:34:20,159
automated so if we use this data this

851
00:34:20,159 --> 00:34:22,399
vulnerability is important to you

852
00:34:22,399 --> 00:34:23,839
people can say

853
00:34:23,839 --> 00:34:25,918
okay you just launch the

854
00:34:25,918 --> 00:34:27,918
pattern with the code but we don't do

855
00:34:27,918 --> 00:34:30,239
this so we have the docker okay if you

856
00:34:30,239 --> 00:34:31,520
change their

857
00:34:31,520 --> 00:34:34,399
virtual with the host uh it will not go

858
00:34:34,399 --> 00:34:36,560
to the docker okay

859
00:34:36,560 --> 00:34:38,399
okay we didn't find a way how it can be

860
00:34:38,399 --> 00:34:39,520
exploited

861
00:34:39,520 --> 00:34:42,800
but here we have uh a small trick people

862
00:34:42,800 --> 00:34:44,239
don't like uh

863
00:34:44,239 --> 00:34:46,639
launching dockers like uh dokkan

864
00:34:46,639 --> 00:34:48,480
container they just send instructions

865
00:34:48,480 --> 00:34:50,399
and everything is built there

866
00:34:50,399 --> 00:34:53,679
and here is another click i mean the

867
00:34:53,679 --> 00:34:56,159
docker compose uses python as soon as

868
00:34:56,159 --> 00:34:57,359
you launch it

869
00:34:57,359 --> 00:35:00,160
it calls python the python calls python

870
00:35:00,160 --> 00:35:02,720
warnings variable then it calls the

871
00:35:02,720 --> 00:35:05,280
payload and

872
00:35:05,280 --> 00:35:07,839
it is run

873
00:35:08,000 --> 00:35:10,720
and with the build agent we can see the

874
00:35:10,720 --> 00:35:12,960
docker component command we wanted to

875
00:35:12,960 --> 00:35:15,520
see the version so we have

876
00:35:15,520 --> 00:35:17,440
the pinto run

877
00:35:17,440 --> 00:35:18,240
and

878
00:35:18,240 --> 00:35:21,520
we get the root issue this is dangerous

879
00:35:21,520 --> 00:35:22,720
we

880
00:35:22,720 --> 00:35:26,160
send it to the developers of team city

881
00:35:26,160 --> 00:35:27,440
so

882
00:35:27,440 --> 00:35:30,000
they told us that it was this was a

883
00:35:30,000 --> 00:35:32,079
feature that they would add a comment to

884
00:35:32,079 --> 00:35:34,480
the documents that it has to be fixed

885
00:35:34,480 --> 00:35:36,160
but this is a feature

886
00:35:36,160 --> 00:35:37,599
okay

887
00:35:37,599 --> 00:35:40,079
how to protect yourself

888
00:35:40,079 --> 00:35:41,760
the instructions uh

889
00:35:41,760 --> 00:35:44,079
have been mentioned by zhenya let me

890
00:35:44,079 --> 00:35:46,560
reiterate it use different agents for

891
00:35:46,560 --> 00:35:48,079
different branches

892
00:35:48,079 --> 00:35:50,400
here you see an example where the steps

893
00:35:50,400 --> 00:35:52,880
were split by the agents so we had

894
00:35:52,880 --> 00:35:57,040
python we had build and deploy ideally

895
00:35:57,040 --> 00:35:59,680
the production branches should give

896
00:35:59,680 --> 00:36:02,000
access to no one that's the top

897
00:36:02,000 --> 00:36:03,599
management and we have the developed

898
00:36:03,599 --> 00:36:05,680
branches run by different agents so if

899
00:36:05,680 --> 00:36:06,560
they

900
00:36:06,560 --> 00:36:09,040
hack your agent it will not impact the

901
00:36:09,040 --> 00:36:11,440
production branch so in this case the

902
00:36:11,440 --> 00:36:13,680
worst language could happen

903
00:36:13,680 --> 00:36:15,280
we have the development production

904
00:36:15,280 --> 00:36:18,160
branches built by this agent so if the

905
00:36:18,160 --> 00:36:20,720
threat agent

906
00:36:20,720 --> 00:36:22,960
gets to the agent

907
00:36:22,960 --> 00:36:23,839
then

908
00:36:23,839 --> 00:36:25,920
you can try to have the production

909
00:36:25,920 --> 00:36:27,440
branch send it

910
00:36:27,440 --> 00:36:28,640
to

911
00:36:28,640 --> 00:36:31,119
the client it will go to the agent with

912
00:36:31,119 --> 00:36:32,800
this branch

913
00:36:32,800 --> 00:36:35,040
then the payload will be

914
00:36:35,040 --> 00:36:37,359
run and the update will come with a

915
00:36:37,359 --> 00:36:40,359
payload

916
00:36:40,720 --> 00:36:43,440
and everything was shared through

917
00:36:43,440 --> 00:36:44,720
so everything should be

918
00:36:44,720 --> 00:36:45,760
shared

919
00:36:45,760 --> 00:36:49,680
by https and please segregate rights

920
00:36:49,680 --> 00:36:51,760
and stay healthy

921
00:36:51,760 --> 00:36:54,920
thank you

922
00:37:00,480 --> 00:37:02,000
thank you very much

923
00:37:02,000 --> 00:37:04,880
i have a question to evgeny

924
00:37:04,880 --> 00:37:07,359
what is the most frequent attack on the

925
00:37:07,359 --> 00:37:10,320
supply chains

926
00:37:10,320 --> 00:37:11,520
usually it's

927
00:37:11,520 --> 00:37:12,640
independence

928
00:37:12,640 --> 00:37:14,320
confusion

929
00:37:14,320 --> 00:37:15,119
it's

930
00:37:15,119 --> 00:37:18,400
easily pulled off

931
00:37:19,839 --> 00:37:21,200
and you just

932
00:37:21,200 --> 00:37:22,800
know

933
00:37:22,800 --> 00:37:27,520
the title of the dependency you load it

934
00:37:30,320 --> 00:37:32,880
to the public repository

935
00:37:32,880 --> 00:37:34,079
and that's it

936
00:37:34,079 --> 00:37:37,400
you're done

937
00:37:38,560 --> 00:37:40,079
if

938
00:37:40,079 --> 00:37:43,280
this vulnerability

939
00:37:44,560 --> 00:37:47,119
is there

940
00:37:48,240 --> 00:37:50,800
then this payload will run

941
00:37:50,800 --> 00:37:54,720
have you seen it in practice yes we have

942
00:38:02,800 --> 00:38:04,640
hello my name is victor thank you very

943
00:38:04,640 --> 00:38:06,240
much

944
00:38:06,240 --> 00:38:08,960
a recommendation

945
00:38:08,960 --> 00:38:11,760
to protect from this issue

946
00:38:11,760 --> 00:38:14,720
is not to use some shared runners this

947
00:38:14,720 --> 00:38:17,040
is a good recommendation in general but

948
00:38:17,040 --> 00:38:20,240
we have some subtleties here okay say we

949
00:38:20,240 --> 00:38:22,560
have a big company 100

950
00:38:22,560 --> 00:38:24,400
developer teams

951
00:38:24,400 --> 00:38:27,680
the teams don't want to support their

952
00:38:27,680 --> 00:38:29,359
own runners

953
00:38:29,359 --> 00:38:31,520
and the infrastructure

954
00:38:31,520 --> 00:38:32,400
today

955
00:38:32,400 --> 00:38:33,440
is

956
00:38:33,440 --> 00:38:34,800
well

957
00:38:34,800 --> 00:38:37,119
the less you use it the better

958
00:38:37,119 --> 00:38:39,599
and in companies like that they

959
00:38:39,599 --> 00:38:41,520
merely use shared

960
00:38:41,520 --> 00:38:43,280
runners for

961
00:38:43,280 --> 00:38:46,240
all the teams

962
00:38:46,240 --> 00:38:48,480
and we have the test environment and the

963
00:38:48,480 --> 00:38:50,800
probe environment so the question is how

964
00:38:50,800 --> 00:38:52,880
to deal with it

965
00:38:52,880 --> 00:38:54,880
how

966
00:38:54,880 --> 00:38:55,760
to

967
00:38:55,760 --> 00:38:58,400
do with it if you use shared trainers so

968
00:38:58,400 --> 00:39:01,760
number one you can provide the git

969
00:39:01,760 --> 00:39:03,760
lab runner as a service to the teams

970
00:39:03,760 --> 00:39:05,760
another option is to segregate the two

971
00:39:05,760 --> 00:39:08,240
segments what would you do here

972
00:39:08,240 --> 00:39:10,640
the recommendations we sent to jetbrains

973
00:39:10,640 --> 00:39:13,680
we told them guys you can impact the

974
00:39:13,680 --> 00:39:15,359
customized build parameters there are

975
00:39:15,359 --> 00:39:16,960
too many things there

976
00:39:16,960 --> 00:39:18,720
you can

977
00:39:18,720 --> 00:39:21,599
let the devops say that okay we can use

978
00:39:21,599 --> 00:39:24,880
these flags and they can be hard coded

979
00:39:24,880 --> 00:39:26,960
so that you don't

980
00:39:26,960 --> 00:39:29,119
change the environment variables or

981
00:39:29,119 --> 00:39:31,760
anything and they said that this was a

982
00:39:31,760 --> 00:39:32,880
feature

983
00:39:32,880 --> 00:39:35,440
so this is the easiest way

984
00:39:35,440 --> 00:39:37,839
well what can we invent now

985
00:39:37,839 --> 00:39:38,720
so

986
00:39:38,720 --> 00:39:40,480
we can just

987
00:39:40,480 --> 00:39:42,400
strip every one of the customized build

988
00:39:42,400 --> 00:39:44,480
parameters you can have an under the

989
00:39:44,480 --> 00:39:47,119
hood script for team city to hard code

990
00:39:47,119 --> 00:39:48,160
everything

991
00:39:48,160 --> 00:39:50,720
and this is not very optimal but maybe

992
00:39:50,720 --> 00:39:53,680
you'll be protected that so this is

993
00:39:53,680 --> 00:39:54,839
what i would

994
00:39:54,839 --> 00:39:57,200
recommend well this could cause problems

995
00:39:57,200 --> 00:40:01,040
but it will make you more secure

996
00:40:05,760 --> 00:40:10,079
okay controlization is an option

997
00:40:10,079 --> 00:40:12,160
if you use a container

998
00:40:12,160 --> 00:40:13,440
if the

999
00:40:13,440 --> 00:40:14,480
build

1000
00:40:14,480 --> 00:40:15,520
is

1001
00:40:15,520 --> 00:40:18,560
done by one runner

1002
00:40:18,720 --> 00:40:20,960
the address array will not be able to

1003
00:40:20,960 --> 00:40:23,040
get out of the container

1004
00:40:23,040 --> 00:40:25,839
to further modify

1005
00:40:25,920 --> 00:40:27,200
other builds

1006
00:40:27,200 --> 00:40:29,599
of the same runner but you can clean the

1007
00:40:29,599 --> 00:40:33,760
runner following the build

1008
00:40:33,960 --> 00:40:36,720
[Music]

1009
00:40:36,720 --> 00:40:38,480
if the package

1010
00:40:38,480 --> 00:40:39,520
is uh

1011
00:40:39,520 --> 00:40:40,800
built uh

1012
00:40:40,800 --> 00:40:43,599
well on the naive system so well you

1013
00:40:43,599 --> 00:40:46,480
just build the command then you

1014
00:40:46,480 --> 00:40:49,040
clean approach this run

1015
00:40:49,040 --> 00:40:51,040
and when you build the other one it's

1016
00:40:51,040 --> 00:40:52,640
used for it so you don't have any

1017
00:40:52,640 --> 00:40:54,800
credentials or everything

1018
00:40:54,800 --> 00:40:56,480
well okay you don't have the credentials

1019
00:40:56,480 --> 00:40:58,720
there

1020
00:41:00,000 --> 00:41:03,599
but if you have the lpe

1021
00:41:04,839 --> 00:41:07,599
there or if you have a

1022
00:41:07,599 --> 00:41:10,800
privileged account used here

1023
00:41:10,800 --> 00:41:12,480
then they

1024
00:41:12,480 --> 00:41:14,720
can

1025
00:41:15,599 --> 00:41:17,920
provide

1026
00:41:17,920 --> 00:41:21,359
another library or binary and it will be

1027
00:41:21,359 --> 00:41:25,598
difficult to get rid of it by cleaning

1028
00:41:32,720 --> 00:41:36,000
thank you colleagues my name is liam

1029
00:41:36,000 --> 00:41:37,599
so

1030
00:41:37,599 --> 00:41:40,000
you have said that the undefects

1031
00:41:40,000 --> 00:41:42,400
can be brought to one place and you said

1032
00:41:42,400 --> 00:41:45,359
that it's not good okay

1033
00:41:45,359 --> 00:41:47,920
how can you do it in any other way so we

1034
00:41:47,920 --> 00:41:49,280
have some

1035
00:41:49,280 --> 00:41:51,520
standard

1036
00:41:51,520 --> 00:41:53,920
access

1037
00:41:54,880 --> 00:41:57,839
segregation and we have the standardized

1038
00:41:57,839 --> 00:42:00,240
agents so they are recorded to one place

1039
00:42:00,240 --> 00:42:02,560
and then they are further distributed

1040
00:42:02,560 --> 00:42:04,480
so the question is

1041
00:42:04,480 --> 00:42:06,640
what's wrong with this approach and how

1042
00:42:06,640 --> 00:42:07,680
we can

1043
00:42:07,680 --> 00:42:10,160
improve it

1044
00:42:10,960 --> 00:42:11,920
okay

1045
00:42:11,920 --> 00:42:13,760
the build is happening

1046
00:42:13,760 --> 00:42:16,880
in one place then the artifacts is are

1047
00:42:16,880 --> 00:42:18,319
sent somewhere

1048
00:42:18,319 --> 00:42:21,440
either to the other factory or

1049
00:42:21,440 --> 00:42:23,440
to

1050
00:42:23,440 --> 00:42:24,400
some

1051
00:42:24,400 --> 00:42:27,520
other storage facilities

1052
00:42:27,520 --> 00:42:31,760
or warehouses so we know the directory

1053
00:42:31,760 --> 00:42:35,440
where the build is going to happen

1054
00:42:35,440 --> 00:42:38,079
this is not very good

1055
00:42:38,079 --> 00:42:41,119
we can randomize it

1056
00:42:42,160 --> 00:42:45,319
thank you

1057
00:42:46,960 --> 00:42:49,680
thank you very much

1058
00:42:53,119 --> 00:42:55,839
usually we don't have three or five

1059
00:42:55,839 --> 00:42:57,760
agents how do you manage agents in

1060
00:42:57,760 --> 00:42:58,880
positive

1061
00:42:58,880 --> 00:43:00,480
and

1062
00:43:00,480 --> 00:43:02,720
how did you cover up

1063
00:43:02,720 --> 00:43:05,200
positive

1064
00:43:06,880 --> 00:43:09,520
okay this is not from positive

1065
00:43:09,520 --> 00:43:12,839
not exactly

1066
00:43:15,200 --> 00:43:17,040
we're not going to share how we're doing

1067
00:43:17,040 --> 00:43:18,319
it in positive

1068
00:43:18,319 --> 00:43:22,160
this example is kind of abstract

1069
00:43:25,680 --> 00:43:29,520
well it is not exactly abstract

1070
00:43:29,839 --> 00:43:33,359
well cases like that are happening

1071
00:43:33,359 --> 00:43:35,440
well the example with the three agents

1072
00:43:35,440 --> 00:43:38,599
is abstract

1073
00:43:40,640 --> 00:43:43,359
if you have more agents

1074
00:43:43,359 --> 00:43:46,880
it will be more difficult to manage them

1075
00:43:46,880 --> 00:43:48,079
okay

1076
00:43:48,079 --> 00:43:49,680
then

1077
00:43:49,680 --> 00:43:52,079
the question is how to manage the agents

1078
00:43:52,079 --> 00:43:55,839
to avoid a scenario like that

1079
00:43:57,359 --> 00:43:59,359
one of the recommendations was to hard

1080
00:43:59,359 --> 00:44:02,240
code or to segregate the stance but if

1081
00:44:02,240 --> 00:44:04,240
we have more than 1000 agents for

1082
00:44:04,240 --> 00:44:07,599
instance we cannot hard code the agents

1083
00:44:07,599 --> 00:44:12,000
for build of death stance or protestants

1084
00:44:20,319 --> 00:44:23,839
okay i messed up that

1085
00:44:34,640 --> 00:44:36,160
okay going back to the previous question

1086
00:44:36,160 --> 00:44:38,319
if we know the directory so maybe we can

1087
00:44:38,319 --> 00:44:41,040
segregate access so that

1088
00:44:41,040 --> 00:44:42,720
those who need it should have access to

1089
00:44:42,720 --> 00:44:45,920
this folder and we should ban any change

1090
00:44:45,920 --> 00:44:47,680
to this folder

1091
00:44:47,680 --> 00:44:49,280
well it's not about

1092
00:44:49,280 --> 00:44:50,400
having access

1093
00:44:50,400 --> 00:44:51,839
to this folder

1094
00:44:51,839 --> 00:44:54,480
i mean access to this folder

1095
00:44:54,480 --> 00:44:56,319
is connected to the

1096
00:44:56,319 --> 00:44:59,680
account which makes the build

1097
00:44:59,680 --> 00:45:01,200
i mean

1098
00:45:01,200 --> 00:45:05,839
humans shouldn't get there

1099
00:45:06,960 --> 00:45:10,160
okay segregate access if we

1100
00:45:10,160 --> 00:45:12,400
remove the builder

1101
00:45:12,400 --> 00:45:14,720
from this access list so we only have

1102
00:45:14,720 --> 00:45:17,359
the root and the build agent

1103
00:45:17,359 --> 00:45:19,280
so only them have this rights and we

1104
00:45:19,280 --> 00:45:21,280
cannot further segregate it and what

1105
00:45:21,280 --> 00:45:23,440
about banning changes

1106
00:45:23,440 --> 00:45:25,280
and how will we

1107
00:45:25,280 --> 00:45:28,480
build in this folder okay there we send

1108
00:45:28,480 --> 00:45:29,599
the code

1109
00:45:29,599 --> 00:45:32,560
and the output artifact is also there

1110
00:45:32,560 --> 00:45:34,400
and if we

1111
00:45:34,400 --> 00:45:35,599
remove

1112
00:45:35,599 --> 00:45:38,079
the change rights from the

1113
00:45:38,079 --> 00:45:39,920
built agent then we'll have issues with

1114
00:45:39,920 --> 00:45:43,680
the build so we'll not have any artifact

1115
00:45:43,680 --> 00:45:46,880
and there we have uh the code

1116
00:45:46,880 --> 00:45:48,240
which goes there

1117
00:45:48,240 --> 00:45:50,480
okay thank you for his pitch

1118
00:45:50,480 --> 00:45:51,920
this gives us

1119
00:45:51,920 --> 00:45:53,680
food for thought

1120
00:45:53,680 --> 00:45:55,680
okay

1121
00:45:55,680 --> 00:45:58,480
you said the dependency confusion is the

1122
00:45:58,480 --> 00:45:59,680
easiest way

1123
00:45:59,680 --> 00:46:01,839
okay

1124
00:46:02,319 --> 00:46:04,240
we have calculated

1125
00:46:04,240 --> 00:46:06,400
the sh

1126
00:46:06,400 --> 00:46:08,880
256 and so we check all that

1127
00:46:08,880 --> 00:46:10,640
can you go around it

1128
00:46:10,640 --> 00:46:13,040
i mean so we have downloaded this we

1129
00:46:13,040 --> 00:46:15,599
have checked the sh okay then we'll do

1130
00:46:15,599 --> 00:46:17,839
it if it if we match it otherwise we

1131
00:46:17,839 --> 00:46:20,880
just destroy the build

1132
00:46:21,920 --> 00:46:24,960
okay and then you will

1133
00:46:24,960 --> 00:46:28,760
modify the libraries

1134
00:46:31,119 --> 00:46:35,440
then in any way you will need to

1135
00:46:36,079 --> 00:46:39,800
enumerate sh

1136
00:46:42,160 --> 00:46:45,520
okay this sh should be uh

1137
00:46:45,520 --> 00:46:48,160
stored somewhere

1138
00:46:48,160 --> 00:46:50,399
well

1139
00:46:50,800 --> 00:46:52,960
well the hot code version

1140
00:46:52,960 --> 00:46:55,599
is something you cannot do

1141
00:46:55,599 --> 00:46:57,920
since we'll have this continuous updates

1142
00:46:57,920 --> 00:47:00,640
so you need to store it somewhere

1143
00:47:00,640 --> 00:47:02,560
and this uh

1144
00:47:02,560 --> 00:47:05,280
brings more costs so this is half the

1145
00:47:05,280 --> 00:47:07,440
paranoia anyway

1146
00:47:07,440 --> 00:47:09,119
yeah you can

1147
00:47:09,119 --> 00:47:11,839
just make sure

1148
00:47:11,839 --> 00:47:13,599
that the build

1149
00:47:13,599 --> 00:47:16,000
agents

1150
00:47:16,000 --> 00:47:19,440
don't take the packages from the public

1151
00:47:19,440 --> 00:47:21,839
reps

1152
00:47:23,200 --> 00:47:25,440
and in the private

1153
00:47:25,440 --> 00:47:29,839
rep you can have a caching repository

1154
00:47:29,839 --> 00:47:33,000
thank you

1155
00:47:40,319 --> 00:47:42,640
thank you then you need to pick the most

1156
00:47:42,640 --> 00:47:45,520
interesting question

1157
00:47:46,640 --> 00:47:49,879
thank you

