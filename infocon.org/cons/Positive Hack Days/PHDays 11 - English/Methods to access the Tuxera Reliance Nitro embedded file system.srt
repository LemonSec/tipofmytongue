1
00:00:01,520 --> 00:00:04,480
hi my name is sergey velaso i'm from

2
00:00:04,480 --> 00:00:05,920
kryptonite

3
00:00:05,920 --> 00:00:08,559
company and

4
00:00:08,559 --> 00:00:11,360
i will talk about the reliance nitro

5
00:00:11,360 --> 00:00:12,639
file system

6
00:00:12,639 --> 00:00:14,559
working with the

7
00:00:14,559 --> 00:00:17,919
flash fixed stereo memory manager

8
00:00:20,240 --> 00:00:22,720
high performance

9
00:00:22,720 --> 00:00:26,880
managers for working with flash memory

10
00:00:29,760 --> 00:00:33,760
with the reliant file systems

11
00:00:33,760 --> 00:00:35,360
are used widely

12
00:00:35,360 --> 00:00:37,280
in the current

13
00:00:37,280 --> 00:00:40,320
industry products they ensure

14
00:00:40,320 --> 00:00:41,920
the reliability

15
00:00:41,920 --> 00:00:44,640
and security of your data of critical

16
00:00:44,640 --> 00:00:47,039
data

17
00:00:48,320 --> 00:00:51,360
flashfx reliance nature

18
00:00:51,360 --> 00:00:54,559
that works with the

19
00:00:54,800 --> 00:00:57,199
non-processed memory manager

20
00:00:57,199 --> 00:01:00,320
was introduced by a private company data

21
00:01:00,320 --> 00:01:03,440
like light inc

22
00:01:04,799 --> 00:01:07,040
the developer of the system and the

23
00:01:07,040 --> 00:01:08,159
owner

24
00:01:08,159 --> 00:01:10,320
of the company

25
00:01:10,320 --> 00:01:11,760
was

26
00:01:11,760 --> 00:01:12,720
the lead

27
00:01:12,720 --> 00:01:16,000
engineer for boeing

28
00:01:16,479 --> 00:01:20,000
in 2019 this company

29
00:01:20,000 --> 00:01:23,040
has become a daughter of

30
00:01:23,040 --> 00:01:26,280
a finnish

31
00:01:26,479 --> 00:01:28,320
developer

32
00:01:28,320 --> 00:01:31,639
tax area

33
00:01:41,360 --> 00:01:45,040
features of reliance nitro

34
00:01:45,200 --> 00:01:48,000
come from the idea that it has to work

35
00:01:48,000 --> 00:01:49,680
in a situation

36
00:01:49,680 --> 00:01:52,320
when you have

37
00:01:52,320 --> 00:01:54,640
high resilience

38
00:01:54,640 --> 00:01:57,520
system working

39
00:01:57,600 --> 00:02:01,280
with potential power losses

40
00:02:02,079 --> 00:02:03,200
the

41
00:02:03,200 --> 00:02:04,799
unprocessed

42
00:02:04,799 --> 00:02:07,680
flash memory dispatcher was developed

43
00:02:07,680 --> 00:02:09,840
to

44
00:02:11,330 --> 00:02:12,640
[Music]

45
00:02:12,640 --> 00:02:15,280
to integrate

46
00:02:15,280 --> 00:02:18,319
with a lot of different

47
00:02:18,319 --> 00:02:20,239
integral memory

48
00:02:20,239 --> 00:02:21,520
chips

49
00:02:21,520 --> 00:02:24,400
including both

50
00:02:24,959 --> 00:02:29,040
sequential and parallel memory

51
00:02:29,840 --> 00:02:33,360
nand and others reliance nitro can work

52
00:02:33,360 --> 00:02:34,840
with

53
00:02:34,840 --> 00:02:39,760
any uh 32 or 64-bit systems with any

54
00:02:39,760 --> 00:02:42,480
file systems

55
00:02:43,599 --> 00:02:46,000
there are ported versions

56
00:02:46,000 --> 00:02:48,560
for linux

57
00:02:48,560 --> 00:02:53,440
x works android and windows c

58
00:02:56,640 --> 00:02:59,599
usually the developers

59
00:02:59,599 --> 00:03:00,879
choose

60
00:03:00,879 --> 00:03:04,599
flashfx terra

61
00:03:04,879 --> 00:03:07,440
management dispatcher together with

62
00:03:07,440 --> 00:03:10,319
reliance nitro

63
00:03:14,720 --> 00:03:18,480
the reliance nitro file system with

64
00:03:18,480 --> 00:03:19,840
the manager

65
00:03:19,840 --> 00:03:22,800
is used in space

66
00:03:23,280 --> 00:03:24,480
in

67
00:03:24,480 --> 00:03:27,440
video modules

68
00:03:28,640 --> 00:03:30,400
including the international space

69
00:03:30,400 --> 00:03:32,799
station

70
00:03:32,799 --> 00:03:34,000
and some

71
00:03:34,000 --> 00:03:36,959
mazda automobiles

72
00:03:36,959 --> 00:03:40,159
inventory video registers

73
00:03:40,159 --> 00:03:42,798
navigation

74
00:03:43,840 --> 00:03:47,280
and other multifunctional devices

75
00:03:47,280 --> 00:03:49,519
like printers

76
00:03:49,519 --> 00:03:51,120
and high performance data storage

77
00:03:51,120 --> 00:03:53,519
systems

78
00:03:57,200 --> 00:04:00,159
there's another number of ways you can

79
00:04:00,159 --> 00:04:04,080
use to access data in reliance nitro

80
00:04:04,080 --> 00:04:05,840
format

81
00:04:05,840 --> 00:04:08,959
using flashfx terra

82
00:04:08,959 --> 00:04:11,120
those methods

83
00:04:11,120 --> 00:04:12,480
are

84
00:04:12,480 --> 00:04:15,280
software based and hardware-based

85
00:04:15,280 --> 00:04:18,320
software-based methods

86
00:04:18,399 --> 00:04:20,079
gives you give you access to the

87
00:04:20,079 --> 00:04:22,560
interface

88
00:04:23,759 --> 00:04:26,639
find the commands

89
00:04:26,880 --> 00:04:27,919
maybe

90
00:04:27,919 --> 00:04:31,039
enter debugging mode

91
00:04:33,600 --> 00:04:37,199
passing some special commands

92
00:04:39,360 --> 00:04:41,360
switching jumpers

93
00:04:41,360 --> 00:04:44,240
on the motherboard

94
00:04:48,240 --> 00:04:49,919
also you need to

95
00:04:49,919 --> 00:04:52,560
intercept the interface whether from

96
00:04:52,560 --> 00:04:53,520
software

97
00:04:53,520 --> 00:04:57,080
wise or hardware-wise

98
00:05:00,160 --> 00:05:03,440
together with all the timings

99
00:05:03,600 --> 00:05:07,560
let us hand through the protocol

100
00:05:11,840 --> 00:05:15,599
so that you could simultaneously

101
00:05:18,320 --> 00:05:22,000
analyze the exchange protocol

102
00:05:23,280 --> 00:05:26,320
disassembling the software

103
00:05:26,320 --> 00:05:27,840
managing the

104
00:05:27,840 --> 00:05:31,599
device or the device driver

105
00:05:35,840 --> 00:05:38,639
to ensure the

106
00:05:38,639 --> 00:05:40,720
exchange protocol

107
00:05:40,720 --> 00:05:41,440
is

108
00:05:41,440 --> 00:05:43,840
valid and you can read the dump from the

109
00:05:43,840 --> 00:05:45,440
device

110
00:05:45,440 --> 00:05:48,560
the software method

111
00:05:49,039 --> 00:05:52,560
is only viable when the controller the

112
00:05:52,560 --> 00:05:53,919
device

113
00:05:53,919 --> 00:05:56,800
soc or

114
00:05:56,800 --> 00:05:59,520
the processor

115
00:05:59,520 --> 00:06:03,199
encrypts the data before writing it

116
00:06:03,199 --> 00:06:05,199
in memory

117
00:06:05,199 --> 00:06:07,199
then the software

118
00:06:07,199 --> 00:06:09,199
method will not work

119
00:06:09,199 --> 00:06:12,560
because the data will be encrypted

120
00:06:14,720 --> 00:06:16,720
but if the device has uh

121
00:06:16,720 --> 00:06:19,120
unauthorized excess protection

122
00:06:19,120 --> 00:06:22,240
but software and

123
00:06:22,479 --> 00:06:26,400
you know power loss monitors

124
00:06:27,440 --> 00:06:29,520
that allowed to

125
00:06:29,520 --> 00:06:30,880
find

126
00:06:30,880 --> 00:06:35,080
logical analyzers being

127
00:06:35,120 --> 00:06:37,680
connected

128
00:06:37,840 --> 00:06:40,639
so it's easier

129
00:06:40,639 --> 00:06:42,319
on the one hand

130
00:06:42,319 --> 00:06:45,880
because you don't need

131
00:06:53,039 --> 00:06:55,120
to do it based on software but the

132
00:06:55,120 --> 00:06:57,360
software method is

133
00:06:57,360 --> 00:06:59,199
easier thus if we understand that the

134
00:06:59,199 --> 00:07:02,880
controller does not encrypt the data

135
00:07:02,880 --> 00:07:06,240
then you can remove it

136
00:07:06,240 --> 00:07:07,759
from the hardware

137
00:07:07,759 --> 00:07:09,360
and you can analyze it

138
00:07:09,360 --> 00:07:11,840
further on

139
00:07:12,080 --> 00:07:15,880
the hardware methods

140
00:07:24,560 --> 00:07:26,960
depending on

141
00:07:26,960 --> 00:07:30,919
the current state of the device

142
00:07:33,199 --> 00:07:36,479
now you do the research

143
00:07:40,240 --> 00:07:45,280
you can use popular readers programmers

144
00:07:45,280 --> 00:07:47,599
and especially i'd like to highlight

145
00:07:47,599 --> 00:07:51,759
the pc 3000 mobile

146
00:07:54,560 --> 00:07:57,840
which allows you to work with different

147
00:07:57,840 --> 00:08:00,479
memory modes

148
00:08:02,240 --> 00:08:04,400
including phones and

149
00:08:04,400 --> 00:08:06,000
industry

150
00:08:06,000 --> 00:08:08,479
solutions

151
00:08:10,479 --> 00:08:13,479
moreover

152
00:08:13,840 --> 00:08:16,160
this product has a very powerful data

153
00:08:16,160 --> 00:08:18,720
extractor

154
00:08:21,680 --> 00:08:24,479
enables you to restore the data streams

155
00:08:24,479 --> 00:08:27,479
that

156
00:08:28,160 --> 00:08:30,560
that would not be

157
00:08:30,560 --> 00:08:32,640
otherwise available

158
00:08:32,640 --> 00:08:35,599
especially by forensic criminalists

159
00:08:35,599 --> 00:08:37,519
forensic experts

160
00:08:37,519 --> 00:08:39,919
they usually spend weeks on doing such

161
00:08:39,919 --> 00:08:42,240
things

162
00:08:45,390 --> 00:08:49,370
[Music]

163
00:08:49,760 --> 00:08:51,360
if the memory

164
00:08:51,360 --> 00:08:54,640
has a non-standard

165
00:08:54,640 --> 00:08:57,680
technical connections

166
00:08:58,160 --> 00:09:02,160
and we have specific adapters

167
00:09:05,519 --> 00:09:08,800
and it's important that pc3000 flash has

168
00:09:08,800 --> 00:09:11,680
a spider board

169
00:09:13,440 --> 00:09:17,720
it helps you use the niggles

170
00:09:22,320 --> 00:09:24,160
to connect to

171
00:09:24,160 --> 00:09:26,240
the memory

172
00:09:26,240 --> 00:09:28,240
chip

173
00:09:28,240 --> 00:09:30,560
define the

174
00:09:30,560 --> 00:09:32,240
voltage

175
00:09:32,240 --> 00:09:35,120
the core voltage

176
00:09:35,120 --> 00:09:36,399
and

177
00:09:36,399 --> 00:09:38,399
automatically

178
00:09:38,399 --> 00:09:39,839
define the

179
00:09:39,839 --> 00:09:42,240
interface so the program itself

180
00:09:42,240 --> 00:09:44,880
defines which interface is being used

181
00:09:44,880 --> 00:09:48,920
in most of the cases it works

182
00:09:52,560 --> 00:09:53,600
after you

183
00:09:53,600 --> 00:09:56,640
read the memory dump from

184
00:09:56,640 --> 00:09:58,959
the device you need to

185
00:09:58,959 --> 00:10:00,560
check the

186
00:10:00,560 --> 00:10:01,839
to correct the

187
00:10:01,839 --> 00:10:02,640
uh

188
00:10:02,640 --> 00:10:03,920
bit mistakes and there's the

189
00:10:03,920 --> 00:10:05,600
technologies memory technologies

190
00:10:05,600 --> 00:10:07,040
different there are

191
00:10:07,040 --> 00:10:10,959
different types slc mlc

192
00:10:10,959 --> 00:10:13,920
corrections when the cell can store more

193
00:10:13,920 --> 00:10:16,800
than one state

194
00:10:16,839 --> 00:10:22,640
klc stores four bits in one cell

195
00:10:28,240 --> 00:10:30,480
and this leads to increased probability

196
00:10:30,480 --> 00:10:34,079
of big mistakes

197
00:10:35,360 --> 00:10:38,160
so the developers

198
00:10:38,160 --> 00:10:41,519
of the translators or dispatchers

199
00:10:41,519 --> 00:10:45,640
use the correction codes

200
00:10:47,120 --> 00:10:52,240
flash fx terra has a number of types

201
00:10:52,240 --> 00:10:55,120
for code correction

202
00:10:55,200 --> 00:10:58,600
hemming codes

203
00:11:01,040 --> 00:11:02,160
that can

204
00:11:02,160 --> 00:11:04,640
help solve one bit four

205
00:11:04,640 --> 00:11:06,399
five one two

206
00:11:06,399 --> 00:11:10,399
five hundred twelve bytes of data

207
00:11:10,480 --> 00:11:12,839
and there's different devices

208
00:11:12,839 --> 00:11:15,440
used error correction

209
00:11:15,440 --> 00:11:18,079
differently

210
00:11:21,200 --> 00:11:26,200
sometimes it's just the processor itself

211
00:11:30,079 --> 00:11:32,959
and in some cases the

212
00:11:32,959 --> 00:11:34,800
loader

213
00:11:34,800 --> 00:11:37,519
is placed in a number of

214
00:11:37,519 --> 00:11:39,279
places

215
00:11:39,279 --> 00:11:42,800
and you can read it from different

216
00:11:42,800 --> 00:11:44,320
places

217
00:11:44,320 --> 00:11:45,279
checking

218
00:11:45,279 --> 00:11:48,640
whether the checksum is okay

219
00:11:49,839 --> 00:11:52,160
thus the error correction is

220
00:11:52,160 --> 00:11:56,680
delegated to flash effects

221
00:11:56,959 --> 00:12:01,040
the second type is the ability to fix

222
00:12:01,040 --> 00:12:02,240
four beats

223
00:12:02,240 --> 00:12:03,880
for

224
00:12:03,880 --> 00:12:07,279
512 bytes

225
00:12:11,200 --> 00:12:15,440
is used for all types of memory

226
00:12:17,200 --> 00:12:20,560
the core and the file system

227
00:12:22,720 --> 00:12:25,839
uses the

228
00:12:26,160 --> 00:12:29,680
code to correct the mistake so

229
00:12:31,360 --> 00:12:32,639
we can

230
00:12:32,639 --> 00:12:35,519
read from the memory damp and calculate

231
00:12:35,519 --> 00:12:39,720
the ecc correction codes

232
00:12:47,279 --> 00:12:50,839
it differs slightly from popular

233
00:12:50,839 --> 00:12:54,800
standards that are well known to

234
00:12:54,800 --> 00:12:57,440
data labs and data restoration labs

235
00:12:57,440 --> 00:13:00,639
each of them have four blocks of

236
00:13:00,639 --> 00:13:04,519
512 bytes

237
00:13:06,480 --> 00:13:09,040
the correction code is calculated

238
00:13:09,040 --> 00:13:13,519
and is put into the last page of memory

239
00:13:15,440 --> 00:13:20,360
and while the first tcc block

240
00:13:30,000 --> 00:13:32,240
is

241
00:13:32,800 --> 00:13:36,320
the code itself and then within

242
00:13:36,320 --> 00:13:37,760
six bytes

243
00:13:37,760 --> 00:13:40,000
it's

244
00:13:43,519 --> 00:13:46,480
is an address that points to the logical

245
00:13:46,480 --> 00:13:47,760
memory

246
00:13:47,760 --> 00:13:48,720
so

247
00:13:48,720 --> 00:13:53,040
the counter is highlighted red and red

248
00:13:54,800 --> 00:13:55,760
yellow

249
00:13:55,760 --> 00:13:59,959
are the ecc codes

250
00:14:02,639 --> 00:14:05,600
to analyze the damn dumbbell after the

251
00:14:05,600 --> 00:14:07,760
bit correction you create

252
00:14:07,760 --> 00:14:09,600
a copy

253
00:14:09,600 --> 00:14:12,959
without the ecc blocks

254
00:14:14,240 --> 00:14:18,240
and use data extractors either from

255
00:14:18,240 --> 00:14:20,399
you know software packs or you know

256
00:14:20,399 --> 00:14:23,600
ordinary hexad editors

257
00:14:23,600 --> 00:14:25,199
where you look

258
00:14:25,199 --> 00:14:28,199
for

259
00:14:31,839 --> 00:14:35,519
original addresses of

260
00:14:35,839 --> 00:14:38,880
segments to

261
00:14:38,959 --> 00:14:41,279
then

262
00:14:41,279 --> 00:14:43,440
open it using just an ordinary file

263
00:14:43,440 --> 00:14:45,839
manager

264
00:14:50,240 --> 00:14:56,040
i can even use 7z archive for this

265
00:14:58,000 --> 00:14:59,360
7-zip can

266
00:14:59,360 --> 00:15:02,000
usually open even a squash

267
00:15:02,000 --> 00:15:04,639
device bit by bit and so that you could

268
00:15:04,639 --> 00:15:06,800
get the driver from there for flash

269
00:15:06,800 --> 00:15:09,199
effects

270
00:15:09,600 --> 00:15:11,120
and the driver would contain all the

271
00:15:11,120 --> 00:15:13,839
algorithms

272
00:15:16,880 --> 00:15:21,279
you also have linux bin walk utility

273
00:15:22,079 --> 00:15:25,199
that help you find the

274
00:15:25,199 --> 00:15:27,680
addresses for all the signatures and

275
00:15:27,680 --> 00:15:29,920
files and recursive

276
00:15:29,920 --> 00:15:32,719
file extraction

277
00:15:34,480 --> 00:15:36,160
if

278
00:15:36,160 --> 00:15:38,480
the data is intact

279
00:15:38,480 --> 00:15:41,120
so flash effects bin walk did not work

280
00:15:41,120 --> 00:15:44,880
it showed us the addresses but

281
00:15:48,880 --> 00:15:52,639
i had to cut manually the

282
00:15:53,279 --> 00:15:55,279
data

283
00:15:55,279 --> 00:15:57,920
for set bisectors and then all work with

284
00:15:57,920 --> 00:15:59,360
7-zip

285
00:15:59,360 --> 00:16:02,959
you also have entropy analysis

286
00:16:02,959 --> 00:16:05,279
it helps you get the

287
00:16:05,279 --> 00:16:07,519
spread of bytes in the image to

288
00:16:07,519 --> 00:16:10,160
understand whether there's an encryption

289
00:16:10,160 --> 00:16:14,240
or compression or obfuscation

290
00:16:15,839 --> 00:16:18,959
they look quite similar

291
00:16:19,680 --> 00:16:21,199
the graph shows

292
00:16:21,199 --> 00:16:25,040
that zeros are ffs

293
00:16:25,920 --> 00:16:26,720
and

294
00:16:26,720 --> 00:16:29,959
at max

295
00:16:36,959 --> 00:16:38,800
this high these high levels in the

296
00:16:38,800 --> 00:16:39,759
middle

297
00:16:39,759 --> 00:16:42,959
are squash file system

298
00:16:48,959 --> 00:16:50,720
so this is an archived file system

299
00:16:50,720 --> 00:16:54,240
that's why the entropy is so high

300
00:16:57,600 --> 00:17:00,560
so after we know the addresses we use

301
00:17:00,560 --> 00:17:05,480
7zip to get the drivers out and

302
00:17:09,280 --> 00:17:12,079
of course the files and drivers can

303
00:17:12,079 --> 00:17:14,880
be on different

304
00:17:14,880 --> 00:17:17,280
places

305
00:17:17,280 --> 00:17:19,199
then you can disassemble the flashfx

306
00:17:19,199 --> 00:17:20,880
driver

307
00:17:20,880 --> 00:17:24,720
define hands and how it works

308
00:17:24,720 --> 00:17:26,079
called for the

309
00:17:26,079 --> 00:17:29,559
functions mentioned

310
00:17:33,120 --> 00:17:35,679
and then it passes the

311
00:17:35,679 --> 00:17:39,039
control to the translator itself

312
00:17:39,039 --> 00:17:40,799
you then need to

313
00:17:40,799 --> 00:17:43,280
project from physical memory into

314
00:17:43,280 --> 00:17:46,160
logical memory you take 64 pages of

315
00:17:46,160 --> 00:17:47,600
memory

316
00:17:47,600 --> 00:17:50,399
call it a unit

317
00:17:53,200 --> 00:17:54,320
add

318
00:17:54,320 --> 00:17:56,080
a header

319
00:17:56,080 --> 00:17:57,840
with all the params

320
00:17:57,840 --> 00:18:01,360
for the logical page

321
00:18:01,360 --> 00:18:04,959
and the structure of the file system

322
00:18:07,120 --> 00:18:10,799
you can define the header

323
00:18:13,360 --> 00:18:16,400
for flash effects there's a unique

324
00:18:16,400 --> 00:18:18,880
sequence of bytes

325
00:18:18,880 --> 00:18:21,120
and the parameters that

326
00:18:21,120 --> 00:18:24,159
carry the logical

327
00:18:24,480 --> 00:18:26,799
sense

328
00:18:27,120 --> 00:18:29,600
so we passed the check and

329
00:18:29,600 --> 00:18:33,199
this is idea to the code

330
00:18:34,400 --> 00:18:37,760
you see that the header is being checked

331
00:18:37,760 --> 00:18:39,760
and it's great that the developers did

332
00:18:39,760 --> 00:18:43,440
not obfuscate the header so we see all

333
00:18:43,440 --> 00:18:46,000
the functions

334
00:18:46,960 --> 00:18:50,559
there's also a manager for bed blocks

335
00:18:50,559 --> 00:18:51,440
that

336
00:18:51,440 --> 00:18:54,080
redefines the memory pages in case of

337
00:18:54,080 --> 00:18:56,480
malfunction

338
00:18:56,480 --> 00:18:58,320
then after we

339
00:18:58,320 --> 00:19:01,039
build the logical

340
00:19:01,039 --> 00:19:03,360
image we can just download from

341
00:19:03,360 --> 00:19:04,640
honeywell

342
00:19:04,640 --> 00:19:06,799
the driver to run it

343
00:19:06,799 --> 00:19:08,640
and as we analyze the dump

344
00:19:08,640 --> 00:19:10,480
we find the

345
00:19:10,480 --> 00:19:12,640
containers flashback containers

346
00:19:12,640 --> 00:19:14,480
including the encrypted ones protected

347
00:19:14,480 --> 00:19:16,160
ones

348
00:19:16,160 --> 00:19:18,240
flashback does not

349
00:19:18,240 --> 00:19:20,400
have a lot about it

350
00:19:20,400 --> 00:19:21,760
on the internet

351
00:19:21,760 --> 00:19:24,559
but we found out how it works

352
00:19:24,559 --> 00:19:27,600
there's none memory

353
00:19:28,640 --> 00:19:30,400
there's a controller carrying the master

354
00:19:30,400 --> 00:19:32,480
key let's upload it

355
00:19:32,480 --> 00:19:34,480
to ram

356
00:19:34,480 --> 00:19:37,280
and can be

357
00:19:37,280 --> 00:19:41,039
extracted by the logical analyser

358
00:19:41,039 --> 00:19:44,080
to open the container

359
00:19:44,320 --> 00:19:46,960
there's also

360
00:19:46,960 --> 00:19:49,280
logical analyzers that we connect with

361
00:19:49,280 --> 00:19:51,360
the

362
00:19:51,360 --> 00:19:52,480
polymer

363
00:19:52,480 --> 00:19:55,039
contacts

364
00:19:55,440 --> 00:19:57,200
and we can also

365
00:19:57,200 --> 00:19:59,520
remove the case from

366
00:19:59,520 --> 00:20:01,360
the chip

367
00:20:01,360 --> 00:20:04,799
using plasma chemical

368
00:20:04,799 --> 00:20:06,400
methods then we

369
00:20:06,400 --> 00:20:08,080
actually

370
00:20:08,080 --> 00:20:10,720
solder the contacts to

371
00:20:10,720 --> 00:20:13,039
the chip even if the controller did not

372
00:20:13,039 --> 00:20:14,960
allow us to

373
00:20:14,960 --> 00:20:18,679
access those areas

374
00:20:20,799 --> 00:20:22,400
so we've defined

375
00:20:22,400 --> 00:20:26,720
both software and hardware methods to

376
00:20:29,919 --> 00:20:31,280
access

377
00:20:31,280 --> 00:20:35,039
they all have their pros and cons

378
00:20:35,039 --> 00:20:37,520
for security analysis of

379
00:20:37,520 --> 00:20:39,520
specific hardware

380
00:20:39,520 --> 00:20:41,760
thank you for your attention and will be

381
00:20:41,760 --> 00:20:45,520
happy to answer questions

