1
00:00:03,199 --> 00:00:05,279
my colleague anton was expected to

2
00:00:05,279 --> 00:00:08,080
present but you see

3
00:00:08,080 --> 00:00:09,920
you're not lucky you have me again

4
00:00:09,920 --> 00:00:12,000
however i'll try to convey everything

5
00:00:12,000 --> 00:00:14,880
that anton wanted to say this is anton

6
00:00:14,880 --> 00:00:17,920
and he is the author

7
00:00:19,760 --> 00:00:21,439
in fact you know the most important

8
00:00:21,439 --> 00:00:23,840
person behind this research

9
00:00:23,840 --> 00:00:27,199
you know is his work his ideas

10
00:00:27,199 --> 00:00:28,640
that were implemented in everything i'm

11
00:00:28,640 --> 00:00:32,479
going to talk about he's a virus analyst

12
00:00:32,479 --> 00:00:34,880
he's an experienced hand in cyber

13
00:00:34,880 --> 00:00:37,280
threats

14
00:00:40,239 --> 00:00:44,839
now he's working very hard

15
00:00:45,039 --> 00:00:47,840
on actually making his knowledge

16
00:00:47,840 --> 00:00:51,039
available to more people

17
00:00:51,039 --> 00:00:53,039
now i'm the head of

18
00:00:53,039 --> 00:00:56,800
the development fighting malware

19
00:00:56,960 --> 00:00:59,520
my department is actually responsible

20
00:00:59,520 --> 00:01:01,120
for malware fighting elements of

21
00:01:01,120 --> 00:01:03,760
positive technologies solutions too

22
00:01:03,760 --> 00:01:05,600
we talked about rose kids yesterday both

23
00:01:05,600 --> 00:01:07,119
kids today

24
00:01:07,119 --> 00:01:08,720
so this is the plan

25
00:01:08,720 --> 00:01:11,280
and we are going to you know

26
00:01:11,280 --> 00:01:13,119
have some respect so to speak up to the

27
00:01:13,119 --> 00:01:15,119
previous presentation

28
00:01:15,119 --> 00:01:16,640
there will be an introduction next we'll

29
00:01:16,640 --> 00:01:19,040
talk about uh detecting

30
00:01:19,040 --> 00:01:21,920
old boot kits legacy boot kits

31
00:01:21,920 --> 00:01:24,080
as well as deduction of uh

32
00:01:24,080 --> 00:01:27,119
modern but kids here

33
00:01:36,880 --> 00:01:39,600
sequence actually we can spend a whole

34
00:01:39,600 --> 00:01:41,759
hour talking about the individual stages

35
00:01:41,759 --> 00:01:43,280
but

36
00:01:43,280 --> 00:01:45,280
let's talk very generally there is some

37
00:01:45,280 --> 00:01:47,040
preparation

38
00:01:47,040 --> 00:01:48,479
then there is the

39
00:01:48,479 --> 00:01:51,040
kernel loading and finally everything

40
00:01:51,040 --> 00:01:53,520
else gets loaded in the operating system

41
00:01:53,520 --> 00:01:55,439
this is like the simplest way of

42
00:01:55,439 --> 00:01:58,159
explaining it and the boots kit sits in

43
00:01:58,159 --> 00:02:00,240
the first stage so to speak

44
00:02:00,240 --> 00:02:02,399
and it's there to actually impact the

45
00:02:02,399 --> 00:02:04,240
way that the operating system

46
00:02:04,240 --> 00:02:07,039
is loaded

47
00:02:14,400 --> 00:02:15,440
is

48
00:02:15,440 --> 00:02:17,680
to screw up the legitimate loading

49
00:02:17,680 --> 00:02:20,080
process

50
00:02:21,440 --> 00:02:23,200
so the objective or the purpose of the

51
00:02:23,200 --> 00:02:25,040
buskit is to start up as soon as

52
00:02:25,040 --> 00:02:26,319
possible

53
00:02:26,319 --> 00:02:28,080
because the sooner it starts the more

54
00:02:28,080 --> 00:02:31,040
difficult it will be to detect

55
00:02:31,040 --> 00:02:33,519
moreover this way it maximizes the

56
00:02:33,519 --> 00:02:35,040
privileges it gets

57
00:02:35,040 --> 00:02:37,120
and the opportunities it has for a

58
00:02:37,120 --> 00:02:39,280
compromisation and installation of its

59
00:02:39,280 --> 00:02:41,420
own malicious code

60
00:02:41,420 --> 00:02:44,660
[Music]

61
00:02:57,760 --> 00:03:00,959
like the sooner a boot kit is started

62
00:03:00,959 --> 00:03:04,560
the more we should doubt

63
00:03:12,080 --> 00:03:14,959
you never know you know which computer

64
00:03:14,959 --> 00:03:19,040
will be secure and safer which will

65
00:03:30,720 --> 00:03:34,480
and others are designed for you advice

66
00:03:37,519 --> 00:03:40,400
so how we go into research and identify

67
00:03:40,400 --> 00:03:42,080
boot camps we'll need hypervisors and

68
00:03:42,080 --> 00:03:43,760
virtual machines for that

69
00:03:43,760 --> 00:03:46,080
so when we're dealing with a computer

70
00:03:46,080 --> 00:03:48,239
that you know is restarted we'll you

71
00:03:48,239 --> 00:03:50,159
know kick into action again we will not

72
00:03:50,159 --> 00:03:53,200
really have a reliable tool for tracking

73
00:03:53,200 --> 00:03:55,360
the whole startup chain

74
00:03:55,360 --> 00:03:58,239
so naturally we need an observer so to

75
00:03:58,239 --> 00:04:00,239
speak who will actually be able to

76
00:04:00,239 --> 00:04:04,319
monitor this complicated process

77
00:04:04,400 --> 00:04:06,560
which means we need a hypervisor we need

78
00:04:06,560 --> 00:04:08,799
virtual machines that will well

79
00:04:08,799 --> 00:04:11,280
effectively reduce

80
00:04:11,280 --> 00:04:13,040
what a regular machine does so when i

81
00:04:13,040 --> 00:04:15,360
say hypervisor

82
00:04:15,360 --> 00:04:16,399
i mean

83
00:04:16,399 --> 00:04:18,798
you know our favorite tool that we

84
00:04:18,798 --> 00:04:20,320
always talk about

85
00:04:20,320 --> 00:04:22,479
naturally it's not the only tool like

86
00:04:22,479 --> 00:04:24,320
that

87
00:04:24,320 --> 00:04:27,320
um

88
00:04:27,680 --> 00:04:31,840
so we can be using xn or a kvm though

89
00:04:31,840 --> 00:04:34,720
the best combination is kvm

90
00:04:34,720 --> 00:04:35,840
and uh

91
00:04:35,840 --> 00:04:41,000
like additionally you would want to have

92
00:04:42,080 --> 00:04:43,759
more things attached to it let's put it

93
00:04:43,759 --> 00:04:46,000
like this and if various hypervisors

94
00:04:46,000 --> 00:04:48,400
will use various apis but in any case we

95
00:04:48,400 --> 00:04:49,520
will want

96
00:04:49,520 --> 00:04:51,680
to

97
00:04:53,919 --> 00:04:56,160
standardize many operations and that's

98
00:04:56,160 --> 00:04:58,400
why i leave vmi library has been

99
00:04:58,400 --> 00:05:00,240
developed which is like an intermediary

100
00:05:00,240 --> 00:05:02,800
between hypervisor and the abstraction

101
00:05:02,800 --> 00:05:06,639
which will be human readable so to speak

102
00:05:22,320 --> 00:05:24,400
a chain of events

103
00:05:24,400 --> 00:05:28,000
happening and for every event

104
00:05:29,360 --> 00:05:31,199
you will be able to do things and you

105
00:05:31,199 --> 00:05:34,720
will therefore be able to impact

106
00:05:34,720 --> 00:05:37,120
the work of this system you know without

107
00:05:37,120 --> 00:05:40,320
uh leave them it would be very difficult

108
00:05:40,320 --> 00:05:43,199
on top of live vmi we have a dragon and

109
00:05:43,199 --> 00:05:44,320
dragon booth

110
00:05:44,320 --> 00:05:46,240
actually provides the right level of

111
00:05:46,240 --> 00:05:48,720
obstruction for a programmer

112
00:05:48,720 --> 00:05:52,520
or a security analyst

113
00:06:04,240 --> 00:06:06,400
a symbol into an address and obtaining

114
00:06:06,400 --> 00:06:08,160
objects from the system and process

115
00:06:08,160 --> 00:06:10,240
lease and what-have-you

116
00:06:10,240 --> 00:06:12,080
and then you know go from these objects

117
00:06:12,080 --> 00:06:13,840
to additional information

118
00:06:13,840 --> 00:06:15,600
on processes

119
00:06:15,600 --> 00:06:17,919
identifiers what have you

120
00:06:17,919 --> 00:06:20,919
stopped

121
00:06:27,759 --> 00:06:30,000
and again let me stress we are talking

122
00:06:30,000 --> 00:06:33,039
about some fundamentals of how boot kits

123
00:06:33,039 --> 00:06:36,880
work we can go into details

124
00:06:37,280 --> 00:06:39,120
but that will take too much time and

125
00:06:39,120 --> 00:06:41,520
they do have some common denominators

126
00:06:41,520 --> 00:06:42,720
that are

127
00:06:42,720 --> 00:06:44,000
interested in exploring for this

128
00:06:44,000 --> 00:06:45,600
presentation

129
00:06:45,600 --> 00:06:46,720
so

130
00:06:46,720 --> 00:06:48,800
why do we care about legacy buyers boot

131
00:06:48,800 --> 00:06:52,720
kits well it's 2022.

132
00:06:53,360 --> 00:06:56,560
inventors are actually producing reports

133
00:06:56,560 --> 00:06:58,400
on

134
00:06:58,400 --> 00:06:59,680
finnsby

135
00:06:59,680 --> 00:07:01,520
and other

136
00:07:01,520 --> 00:07:02,639
you know

137
00:07:02,639 --> 00:07:05,360
legacy buzzkits really so

138
00:07:05,360 --> 00:07:10,400
it's using both ufi and legacy

139
00:07:10,400 --> 00:07:12,639
version so to speak about kids

140
00:07:12,639 --> 00:07:14,639
so this is one of the explanations for

141
00:07:14,639 --> 00:07:16,639
why we shouldn't turn a blind eye to it

142
00:07:16,639 --> 00:07:18,560
you know it's still

143
00:07:18,560 --> 00:07:20,400
sensible to use because virtual

144
00:07:20,400 --> 00:07:21,840
infrastructure

145
00:07:21,840 --> 00:07:23,440
in many cases

146
00:07:23,440 --> 00:07:25,919
is actually legacy based

147
00:07:25,919 --> 00:07:27,919
and also we need to remember the country

148
00:07:27,919 --> 00:07:29,680
we live in right

149
00:07:29,680 --> 00:07:32,880
in this country indeed

150
00:07:33,120 --> 00:07:36,160
many machines are still bios based not

151
00:07:36,160 --> 00:07:38,800
ufi based and absolutely we need to take

152
00:07:38,800 --> 00:07:41,759
this into account

153
00:07:41,919 --> 00:07:43,599
so this is the

154
00:07:43,599 --> 00:07:46,240
operating system startup process for

155
00:07:46,240 --> 00:07:48,639
bias

156
00:07:51,120 --> 00:07:52,639
the codes

157
00:07:52,639 --> 00:07:55,520
i guess it's a bias code kicks in

158
00:07:55,520 --> 00:07:57,039
which actually

159
00:07:57,039 --> 00:07:58,879
prepares

160
00:07:58,879 --> 00:08:00,720
the computer for some primitive

161
00:08:00,720 --> 00:08:04,479
operations with memory and hard drive

162
00:08:04,479 --> 00:08:06,720
and then you know mbr

163
00:08:06,720 --> 00:08:08,400
takes over

164
00:08:08,400 --> 00:08:11,440
a boat record finds uh the active uh

165
00:08:11,440 --> 00:08:15,120
portion and uh produces a vbr from it

166
00:08:15,120 --> 00:08:16,879
volume boot record and volume boot

167
00:08:16,879 --> 00:08:19,440
records will contain a pointer

168
00:08:19,440 --> 00:08:20,960
to a larger

169
00:08:20,960 --> 00:08:24,960
chunk of code than say mbr

170
00:08:24,960 --> 00:08:27,680
which will parse the ntfs structure and

171
00:08:27,680 --> 00:08:29,840
will extract the code from it and it's

172
00:08:29,840 --> 00:08:31,599
called ipl

173
00:08:31,599 --> 00:08:34,320
it doesn't take too much space

174
00:08:34,320 --> 00:08:36,559
but it actually requires more space and

175
00:08:36,559 --> 00:08:39,200
vbr to enhance this transition

176
00:08:39,200 --> 00:08:41,279
next we have the boot manager and boot

177
00:08:41,279 --> 00:08:42,479
manager

178
00:08:42,479 --> 00:08:44,560
extracts uh both configuration

179
00:08:44,560 --> 00:08:46,320
parameters

180
00:08:46,320 --> 00:08:49,120
and it prepares the next stage

181
00:08:49,120 --> 00:08:53,160
which is a kernel launcher

182
00:08:55,920 --> 00:08:57,920
not that important finally and loads

183
00:08:57,920 --> 00:09:00,320
will start loading the

184
00:09:00,320 --> 00:09:02,320
core the kernel of the operating system

185
00:09:02,320 --> 00:09:04,640
and the rest of the runtime will be

186
00:09:04,640 --> 00:09:06,800
started after that but we don't really

187
00:09:06,800 --> 00:09:08,800
care about it for this presentation so

188
00:09:08,800 --> 00:09:12,160
this is the startup chain

189
00:09:12,320 --> 00:09:15,360
now it's very important for the kids

190
00:09:15,360 --> 00:09:18,399
to be started as soon as possible

191
00:09:18,399 --> 00:09:20,480
now can we actually start at the buyer

192
00:09:20,480 --> 00:09:23,839
stage wouldn't that be great

193
00:09:26,160 --> 00:09:27,440
the thing is that's in different

194
00:09:27,440 --> 00:09:29,760
computers it may be dramatically

195
00:09:29,760 --> 00:09:31,600
different particularly if they're coming

196
00:09:31,600 --> 00:09:34,839
from different vendors and a mistake in

197
00:09:34,839 --> 00:09:36,480
code

198
00:09:36,480 --> 00:09:38,560
if it's at the bias level you know it

199
00:09:38,560 --> 00:09:40,720
will probably break the computer so it's

200
00:09:40,720 --> 00:09:42,080
now feasible

201
00:09:42,080 --> 00:09:43,440
you know some uh

202
00:09:43,440 --> 00:09:45,839
virus

203
00:09:46,240 --> 00:09:48,880
chose to attack mbr

204
00:09:48,880 --> 00:09:52,640
so with mbr naturally you will you know

205
00:09:52,640 --> 00:09:55,519
manipulate the master blue trackers

206
00:09:55,519 --> 00:09:58,720
and it's important to remember

207
00:10:01,040 --> 00:10:04,719
so the first thing a boots kit will do

208
00:10:08,320 --> 00:10:10,640
and here we can either create a new

209
00:10:10,640 --> 00:10:13,519
active section

210
00:10:16,079 --> 00:10:18,320
which will point to its own malicious

211
00:10:18,320 --> 00:10:20,560
code

212
00:10:21,839 --> 00:10:24,240
or alternatively we can

213
00:10:24,240 --> 00:10:27,600
take the current vbr and

214
00:10:27,600 --> 00:10:30,959
change the code in it or we can

215
00:10:30,959 --> 00:10:31,839
manipulate actually

216
00:10:31,839 --> 00:10:34,320
pointer to ipl you know so that it

217
00:10:34,320 --> 00:10:37,839
points to our own payload

218
00:10:40,320 --> 00:10:42,399
and both kids should really choose one

219
00:10:42,399 --> 00:10:44,480
of these options they need to attack

220
00:10:44,480 --> 00:10:46,880
either mbr or vbr

221
00:10:46,880 --> 00:10:50,640
so the infection itself is pretty simple

222
00:10:50,640 --> 00:10:52,720
you know in the user run time

223
00:10:52,720 --> 00:10:54,880
so in the user mode there will be an api

224
00:10:54,880 --> 00:10:57,680
that will get access to the hard drive

225
00:10:57,680 --> 00:10:59,600
it's like raw xs and then

226
00:10:59,600 --> 00:11:02,560
an entry is made in a certain sectors of

227
00:11:02,560 --> 00:11:04,000
the disk

228
00:11:04,000 --> 00:11:05,760
there will be shifts there but probably

229
00:11:05,760 --> 00:11:08,160
we shouldn't be talking about it today

230
00:11:08,160 --> 00:11:09,920
so there is an api

231
00:11:09,920 --> 00:11:12,880
and infections with such a boot kit

232
00:11:12,880 --> 00:11:15,120
can actually be registered in an

233
00:11:15,120 --> 00:11:18,240
analytical environment

234
00:11:20,000 --> 00:11:23,760
the same will be true for a vbr and ipl

235
00:11:23,760 --> 00:11:24,959
infection

236
00:11:24,959 --> 00:11:26,959
because you know it's a similar type

237
00:11:26,959 --> 00:11:29,040
effectively of access to just different

238
00:11:29,040 --> 00:11:31,599
partitions

239
00:11:33,839 --> 00:11:37,040
this would be like another

240
00:11:37,040 --> 00:11:39,040
implementation of the same

241
00:11:39,040 --> 00:11:41,760
so what do we have here with the legacy

242
00:11:41,760 --> 00:11:44,160
bootskins

243
00:11:44,320 --> 00:11:48,320
now we can actually check mbr vbr at ipl

244
00:11:48,320 --> 00:11:51,680
no potential spots for a boot kit so the

245
00:11:51,680 --> 00:11:53,680
start of our analysis we can calculate

246
00:11:53,680 --> 00:11:56,240
hash sums of these sections at the end

247
00:11:56,240 --> 00:11:58,320
of our analysis we can get hash sums

248
00:11:58,320 --> 00:12:00,800
again and if there is any mismatch there

249
00:12:00,800 --> 00:12:03,680
must have been infection

250
00:12:03,680 --> 00:12:06,160
and the methods previously described

251
00:12:06,160 --> 00:12:07,920
must have been used for that

252
00:12:07,920 --> 00:12:09,200
well naturally

253
00:12:09,200 --> 00:12:10,480
whatever the methods you know we should

254
00:12:10,480 --> 00:12:12,000
make sure we should make sure it doesn't

255
00:12:12,000 --> 00:12:14,160
happen

256
00:12:15,120 --> 00:12:16,480
so on drug

257
00:12:16,480 --> 00:12:18,639
we did not really have functions that

258
00:12:18,639 --> 00:12:21,040
would enable drug wolf to read the drive

259
00:12:21,040 --> 00:12:22,800
of a vm

260
00:12:22,800 --> 00:12:25,519
in order to perform this uh comparison

261
00:12:25,519 --> 00:12:28,399
i've just described

262
00:12:29,760 --> 00:12:33,760
so we had to do this extra coding

263
00:12:34,959 --> 00:12:38,320
we updatedly the vmi library and you

264
00:12:38,320 --> 00:12:41,519
know it's uh now able to

265
00:12:41,519 --> 00:12:42,880
read

266
00:12:42,880 --> 00:12:45,680
different formats

267
00:12:47,920 --> 00:12:49,839
these are fragments of the codes there

268
00:12:49,839 --> 00:12:52,639
is nothing difficult really this is the

269
00:12:52,639 --> 00:12:56,079
usual sum calculation

270
00:12:59,040 --> 00:13:01,120
and comparison

271
00:13:01,120 --> 00:13:03,920
it's really a very easy way of

272
00:13:03,920 --> 00:13:06,720
identifying lots of boot kits in legacy

273
00:13:06,720 --> 00:13:07,760
systems

274
00:13:07,760 --> 00:13:09,200
okay

275
00:13:09,200 --> 00:13:12,560
alas this year we do have this infection

276
00:13:12,560 --> 00:13:14,720
now let's analyze the process of

277
00:13:14,720 --> 00:13:17,040
operating systems startup after

278
00:13:17,040 --> 00:13:20,760
the business infection

279
00:13:32,800 --> 00:13:36,000
it is actually going to rewrite

280
00:13:36,000 --> 00:13:38,480
the processor for drive operations

281
00:13:38,480 --> 00:13:41,040
because every boot kit will need to

282
00:13:41,040 --> 00:13:44,399
intercept this particular interrupt

283
00:13:44,399 --> 00:13:47,680
so all the known legacy

284
00:13:47,680 --> 00:13:50,480
yes this particular method so we decided

285
00:13:50,480 --> 00:13:52,720
that we should also check that

286
00:13:52,720 --> 00:13:55,680
so we need to see if there is any

287
00:13:55,680 --> 00:13:58,560
interception of this particular handler

288
00:13:58,560 --> 00:14:02,560
which means that the pre-boot stage

289
00:14:02,560 --> 00:14:05,760
we need to actually get the control

290
00:14:05,760 --> 00:14:06,639
because

291
00:14:06,639 --> 00:14:08,560
hijack it

292
00:14:08,560 --> 00:14:11,279
so that we can actually see if such

293
00:14:11,279 --> 00:14:13,680
connection is performed later

294
00:14:13,680 --> 00:14:14,959
this stuff i'm not going to show in a

295
00:14:14,959 --> 00:14:16,720
slide

296
00:14:16,720 --> 00:14:17,760
if you ever

297
00:14:17,760 --> 00:14:20,079
analyzed uh libraries in user melody

298
00:14:20,079 --> 00:14:22,639
must have seen that is uh often very

299
00:14:22,639 --> 00:14:24,720
convenient to

300
00:14:24,720 --> 00:14:27,040
set a breakpoint for jump minus one

301
00:14:27,040 --> 00:14:28,399
instruction

302
00:14:28,399 --> 00:14:29,920
well that's why you know the instruction

303
00:14:29,920 --> 00:14:32,079
will jump back to itself in assembly

304
00:14:32,079 --> 00:14:32,959
code

305
00:14:32,959 --> 00:14:36,399
it will look like eb

306
00:14:38,800 --> 00:14:40,959
so we did it's pretty much the same so

307
00:14:40,959 --> 00:14:42,880
we took mbr

308
00:14:42,880 --> 00:14:45,760
and the first date we would actually

309
00:14:45,760 --> 00:14:47,440
rewrite with

310
00:14:47,440 --> 00:14:49,600
eb

311
00:14:50,000 --> 00:14:51,110
this way

312
00:14:51,110 --> 00:14:54,299
[Music]

313
00:14:55,199 --> 00:14:57,839
to reboot a virtual machine wait some

314
00:14:57,839 --> 00:15:01,279
time then connect jack wolf

315
00:15:01,360 --> 00:15:03,120
and then you know we would know right

316
00:15:03,120 --> 00:15:05,120
away where we are we could stop the

317
00:15:05,120 --> 00:15:08,079
machine anytime and you know substitute

318
00:15:08,079 --> 00:15:11,880
the bites and so on

319
00:15:12,800 --> 00:15:14,560
when we get to the products uh products

320
00:15:14,560 --> 00:15:17,040
part of this process we realized that

321
00:15:17,040 --> 00:15:20,240
it's taking too much time

322
00:15:21,040 --> 00:15:23,279
so we found a special call

323
00:15:23,279 --> 00:15:24,079
which

324
00:15:24,079 --> 00:15:25,680
will take us to hypervisor it's

325
00:15:25,680 --> 00:15:29,440
so-called uh vm call

326
00:15:29,440 --> 00:15:30,240
and

327
00:15:30,240 --> 00:15:32,160
it results in the same thing as you know

328
00:15:32,160 --> 00:15:35,279
the knob instruction and assembler

329
00:15:35,279 --> 00:15:38,480
so it does take a bit of time

330
00:15:38,480 --> 00:15:40,800
while requiring very little capacity on

331
00:15:40,800 --> 00:15:43,279
the cpu side

332
00:15:43,279 --> 00:15:46,160
so we put it in a cycle

333
00:15:46,160 --> 00:15:48,399
for extend hypervisors

334
00:15:48,399 --> 00:15:51,199
and then you know a drug booth

335
00:15:51,199 --> 00:15:53,040
would kick into action

336
00:15:53,040 --> 00:15:56,000
it would restore the bite sequence

337
00:15:56,000 --> 00:15:58,560
and then we do the interception of the

338
00:15:58,560 --> 00:16:02,880
ivt table this is what it looks like

339
00:16:03,440 --> 00:16:04,800
so we do

340
00:16:04,800 --> 00:16:08,000
this hooking trap in the ivt table and

341
00:16:08,000 --> 00:16:09,519
you know once the break point is

342
00:16:09,519 --> 00:16:10,560
triggered

343
00:16:10,560 --> 00:16:12,800
we'll actually see which particular

344
00:16:12,800 --> 00:16:14,720
handler was overwritten so this is

345
00:16:14,720 --> 00:16:17,759
effectively additional information on

346
00:16:17,759 --> 00:16:20,240
how a particular boot kit prefers to

347
00:16:20,240 --> 00:16:23,240
work

348
00:16:34,880 --> 00:16:37,839
quite successful

349
00:16:39,920 --> 00:16:41,600
next element of malicious code in the

350
00:16:41,600 --> 00:16:46,320
idt table which is analogous to ivt

351
00:16:46,480 --> 00:16:49,360
so idc

352
00:16:49,360 --> 00:16:51,440
you know it has interrupts in the first

353
00:16:51,440 --> 00:16:53,040
half of the table but not the second one

354
00:16:53,040 --> 00:16:55,360
so the zeros in the second one were

355
00:16:55,360 --> 00:16:57,759
rewritten by robnix with malicious code

356
00:16:57,759 --> 00:17:00,720
and then it's a handover control there

357
00:17:00,720 --> 00:17:01,759
so we

358
00:17:01,759 --> 00:17:04,640
tried funny where this handover is

359
00:17:04,640 --> 00:17:06,000
happening you know

360
00:17:06,000 --> 00:17:08,160
to secure mode and this function is

361
00:17:08,160 --> 00:17:09,199
called

362
00:17:09,199 --> 00:17:11,039
bm

363
00:17:11,039 --> 00:17:14,039
maintenance

364
00:17:20,000 --> 00:17:21,919
is the part that works in real mode

365
00:17:21,919 --> 00:17:24,799
while boot monitor dot xz works in the

366
00:17:24,799 --> 00:17:27,679
secure mode for the cpu so in the first

367
00:17:27,679 --> 00:17:31,760
part idt gets initialized

368
00:17:33,050 --> 00:17:36,290
[Music]

369
00:17:39,520 --> 00:17:41,679
kicking into the action and once we are

370
00:17:41,679 --> 00:17:44,320
in bml we can actually check the state

371
00:17:44,320 --> 00:17:46,880
of the idet table and if in the second

372
00:17:46,880 --> 00:17:49,280
half of this table there is uh something

373
00:17:49,280 --> 00:17:51,840
bit besides the zeros we realize that

374
00:17:51,840 --> 00:17:55,120
something must have been written there

375
00:17:55,440 --> 00:17:58,080
malicious possibly so

376
00:17:58,080 --> 00:17:59,520
it could be

377
00:17:59,520 --> 00:18:02,720
or some other busquets

378
00:18:02,720 --> 00:18:05,200
we can actually see that there are some

379
00:18:05,200 --> 00:18:08,480
simple operations here

380
00:18:08,559 --> 00:18:11,520
so we are comparing bytes to zeros and

381
00:18:11,520 --> 00:18:14,160
once we see that there is something

382
00:18:14,160 --> 00:18:16,080
rather than zero

383
00:18:16,080 --> 00:18:18,320
there will be a message that you know

384
00:18:18,320 --> 00:18:20,240
we've got somewhere in identity

385
00:18:20,240 --> 00:18:22,720
that shouldn't be there

386
00:18:22,720 --> 00:18:24,240
so this has been an interesting

387
00:18:24,240 --> 00:18:27,240
challenge

388
00:18:31,600 --> 00:18:33,440
stage you know because previously we use

389
00:18:33,440 --> 00:18:35,840
it for user mode and kernel modes we

390
00:18:35,840 --> 00:18:40,160
called it a drug wolf 16 like arsenal 16

391
00:18:40,160 --> 00:18:42,559
which is uh you know a

392
00:18:42,559 --> 00:18:45,360
nuclear research uh city in uh former

393
00:18:45,360 --> 00:18:47,840
soviet union

394
00:18:47,840 --> 00:18:51,280
so once a dracula 16 has done its stuff

395
00:18:51,280 --> 00:18:52,799
you know it hands

396
00:18:52,799 --> 00:18:56,720
the operations over to drug roof

397
00:19:03,760 --> 00:19:05,679
i mean i could have given you a more

398
00:19:05,679 --> 00:19:08,000
convoluted picture had i you know drill

399
00:19:08,000 --> 00:19:09,760
deeper into the ufi

400
00:19:09,760 --> 00:19:11,919
element in this flowchart we won't

401
00:19:11,919 --> 00:19:14,960
really be talking about the uefi

402
00:19:14,960 --> 00:19:17,840
initialization about the initial the

403
00:19:17,840 --> 00:19:20,400
individual driver is firing up there

404
00:19:20,400 --> 00:19:22,640
what we care about is that there are no

405
00:19:22,640 --> 00:19:25,039
state

406
00:19:27,360 --> 00:19:29,039
and then

407
00:19:29,039 --> 00:19:31,520
it's sort of handed over to the program

408
00:19:31,520 --> 00:19:34,400
blocks which are sitting in ufo system

409
00:19:34,400 --> 00:19:35,520
partition

410
00:19:35,520 --> 00:19:38,400
and all the other elements of uefi boot

411
00:19:38,400 --> 00:19:39,760
managers

412
00:19:39,760 --> 00:19:41,679
and as well as nts kernel which is

413
00:19:41,679 --> 00:19:43,120
obviously sitting elsewhere but all the

414
00:19:43,120 --> 00:19:44,559
other stages

415
00:19:44,559 --> 00:19:46,799
they're actually very similar to what we

416
00:19:46,799 --> 00:19:48,640
had in legacy

417
00:19:48,640 --> 00:19:50,480
which means that the objective here is

418
00:19:50,480 --> 00:19:52,960
the same uf5

419
00:19:52,960 --> 00:19:54,960
boot manager is doing the preparation

420
00:19:54,960 --> 00:19:58,720
and now done it loads the kernel

421
00:20:00,240 --> 00:20:02,000
so all the interesting things happen at

422
00:20:02,000 --> 00:20:03,679
the ufi stage

423
00:20:03,679 --> 00:20:07,039
so what do the modern boot kits do

424
00:20:07,039 --> 00:20:10,799
those that are targeting systems

425
00:20:11,120 --> 00:20:13,360
so we have ufi system partition which

426
00:20:13,360 --> 00:20:15,200
stores some of the critical components

427
00:20:15,200 --> 00:20:18,320
such as the boot manager

428
00:20:21,600 --> 00:20:24,720
or substituted for example if you

429
00:20:24,720 --> 00:20:27,200
you know remove it and so you put

430
00:20:27,200 --> 00:20:29,760
boot manager another one maybe even in a

431
00:20:29,760 --> 00:20:33,240
different folder

432
00:20:34,960 --> 00:20:38,000
you know you re-initialize the bcd

433
00:20:38,000 --> 00:20:39,440
so that it's pointing at a different

434
00:20:39,440 --> 00:20:41,600
file

435
00:20:41,600 --> 00:20:43,360
well then you will be using a little

436
00:20:43,360 --> 00:20:45,039
different file for

437
00:20:45,039 --> 00:20:46,559
starting up the whole system you know

438
00:20:46,559 --> 00:20:48,960
it's a primitive way of doing it but it

439
00:20:48,960 --> 00:20:51,200
works

440
00:20:53,280 --> 00:20:56,240
so fiend spy recently rediscovered you

441
00:20:56,240 --> 00:20:56,960
know

442
00:20:56,960 --> 00:20:59,039
had the same kind of vector the same

443
00:20:59,039 --> 00:21:02,360
kind of peculiarity

444
00:21:03,919 --> 00:21:06,080
so how do we quantify all these

445
00:21:06,080 --> 00:21:08,639
components

446
00:21:09,520 --> 00:21:11,840
we have to find this a ufi system

447
00:21:11,840 --> 00:21:14,880
partition and this is gdt markup right

448
00:21:14,880 --> 00:21:17,840
which means that we're using gui guides

449
00:21:17,840 --> 00:21:20,720
here and we're looking here for type uh

450
00:21:20,720 --> 00:21:25,200
guid and then we do fat32 bursting

451
00:21:25,200 --> 00:21:27,120
which we actually did in drag with

452
00:21:27,120 --> 00:21:29,280
itself and then we would take the files

453
00:21:29,280 --> 00:21:31,840
and folder lists

454
00:21:31,840 --> 00:21:34,320
and now we would you know check the

455
00:21:34,320 --> 00:21:36,080
checksums

456
00:21:36,080 --> 00:21:39,120
i mean it would take the hashes

457
00:21:39,120 --> 00:21:42,080
but x 64. it's actually backup of the

458
00:21:42,080 --> 00:21:44,159
regular uefi so if the first one doesn't

459
00:21:44,159 --> 00:21:46,159
work you can actually leverage the the

460
00:21:46,159 --> 00:21:48,720
backup and bcd

461
00:21:48,720 --> 00:21:51,679
is a host of uh bcd predators which

462
00:21:51,679 --> 00:21:53,440
impacts the way that the operating

463
00:21:53,440 --> 00:21:55,520
system is booted

464
00:21:55,520 --> 00:21:57,360
then you know all this content we would

465
00:21:57,360 --> 00:21:58,960
hash

466
00:21:58,960 --> 00:22:01,360
just like the list of photos and then if

467
00:22:01,360 --> 00:22:02,960
we discovered that you know something

468
00:22:02,960 --> 00:22:04,720
got changed then obviously we were

469
00:22:04,720 --> 00:22:06,720
dealing with the boot kit in the system

470
00:22:06,720 --> 00:22:09,200
partition

471
00:22:09,360 --> 00:22:10,720
i guess it's a pretty

472
00:22:10,720 --> 00:22:12,400
pretty obvious stage

473
00:22:12,400 --> 00:22:14,320
not all this will follow

474
00:22:14,320 --> 00:22:16,480
this is something that happened in 2018

475
00:22:16,480 --> 00:22:18,720
when low jack's boot kit was discovered

476
00:22:18,720 --> 00:22:21,839
[Music]

477
00:22:22,480 --> 00:22:24,640
some post kits were discovered for which

478
00:22:24,640 --> 00:22:27,280
the initial

479
00:22:27,280 --> 00:22:30,400
infection vector was uh discovered for

480
00:22:30,400 --> 00:22:32,799
most it wasn't

481
00:22:32,799 --> 00:22:36,320
now lojacks would actually infect sbi

482
00:22:36,320 --> 00:22:38,840
and they would rewrite the

483
00:22:38,840 --> 00:22:41,520
firmware so when we're talking about ufi

484
00:22:41,520 --> 00:22:43,039
boot kits you know the big question is

485
00:22:43,039 --> 00:22:45,760
how do we infect sbi

486
00:22:45,760 --> 00:22:48,080
so there's a vulnerability issues in smm

487
00:22:48,080 --> 00:22:49,600
what have you you know they're all

488
00:22:49,600 --> 00:22:52,880
designed to actually infect the sbi

489
00:22:52,880 --> 00:22:54,880
and we are going to discuss the most

490
00:22:54,880 --> 00:22:57,039
interesting elements of this particular

491
00:22:57,039 --> 00:22:59,440
infection

492
00:22:59,440 --> 00:23:00,720
trajectory

493
00:23:00,720 --> 00:23:03,039
so i'm showing here an excerpt from

494
00:23:03,039 --> 00:23:04,240
study

495
00:23:04,240 --> 00:23:08,120
on how lojax works

496
00:23:14,480 --> 00:23:16,320
they both used

497
00:23:16,320 --> 00:23:18,799
a driver called rv everything

498
00:23:18,799 --> 00:23:20,960
which is a legitimate driver in order to

499
00:23:20,960 --> 00:23:24,080
interact with the firmware

500
00:23:24,880 --> 00:23:28,159
neat isn't it rather than redo

501
00:23:28,159 --> 00:23:29,360
pile of code

502
00:23:29,360 --> 00:23:31,280
so if you want to if you want to detect

503
00:23:31,280 --> 00:23:32,799
at least some infections you can

504
00:23:32,799 --> 00:23:34,080
actually

505
00:23:34,080 --> 00:23:36,320
search for a driver like this you know

506
00:23:36,320 --> 00:23:38,400
if it's emerges on your system there

507
00:23:38,400 --> 00:23:40,000
must be a reason for that both trick

508
00:23:40,000 --> 00:23:41,919
boats and low jacks

509
00:23:41,919 --> 00:23:45,520
later on use the same approach

510
00:23:47,440 --> 00:23:49,919
we need to write information to your sbi

511
00:23:49,919 --> 00:23:53,440
we need to get access to the sp

512
00:23:53,840 --> 00:23:55,919
before that and

513
00:23:55,919 --> 00:23:58,799
every pci device spi included has the

514
00:23:58,799 --> 00:24:01,919
so-called pci configuration space 256

515
00:24:01,919 --> 00:24:04,320
bytes long and here in the center you

516
00:24:04,320 --> 00:24:06,000
see this large

517
00:24:06,000 --> 00:24:07,200
white

518
00:24:07,200 --> 00:24:09,520
quadrangle called base address registers

519
00:24:09,520 --> 00:24:10,240
so

520
00:24:10,240 --> 00:24:13,600
this is the place we need to get

521
00:24:13,600 --> 00:24:15,840
so with a certain shift you will be able

522
00:24:15,840 --> 00:24:20,880
to find there rcba

523
00:24:20,880 --> 00:24:23,200
rules complex base address register so

524
00:24:23,200 --> 00:24:25,440
this name suggests it's a register and

525
00:24:25,440 --> 00:24:28,400
it's a contains a particular value

526
00:24:28,400 --> 00:24:29,760
which shows

527
00:24:29,760 --> 00:24:31,840
the place in the physical memory of the

528
00:24:31,840 --> 00:24:34,240
computer

529
00:24:34,320 --> 00:24:36,159
which will contain

530
00:24:36,159 --> 00:24:38,640
rcrb

531
00:24:38,640 --> 00:24:40,640
complicated isn't it

532
00:24:40,640 --> 00:24:43,200
i can go again through that

533
00:24:43,200 --> 00:24:44,640
you're losing me

534
00:24:44,640 --> 00:24:46,799
so there is a register that contains

535
00:24:46,799 --> 00:24:49,760
values which uh point to the physical

536
00:24:49,760 --> 00:24:52,960
memory where other registers are listed

537
00:24:52,960 --> 00:24:54,720
so it's important for the driver to

538
00:24:54,720 --> 00:24:56,480
obtain the information about where in

539
00:24:56,480 --> 00:24:58,159
the physical memory of the computer this

540
00:24:58,159 --> 00:25:00,400
list of registers can be found so these

541
00:25:00,400 --> 00:25:02,720
are managing registers for dealing or

542
00:25:02,720 --> 00:25:06,000
for managing spi

543
00:25:06,400 --> 00:25:07,919
so low jax

544
00:25:07,919 --> 00:25:10,000
will actually work with this registers

545
00:25:10,000 --> 00:25:12,159
and you will see lots of uh

546
00:25:12,159 --> 00:25:13,120
you know

547
00:25:13,120 --> 00:25:17,440
weird abbreviations alphabet soup there

548
00:25:17,440 --> 00:25:18,960
and you know there is a sequence of

549
00:25:18,960 --> 00:25:21,520
comments on uh how to read

550
00:25:21,520 --> 00:25:26,639
them and how to write back into sbi

551
00:25:26,799 --> 00:25:29,679
governance

552
00:25:29,679 --> 00:25:33,039
so the question is how do we

553
00:25:33,039 --> 00:25:34,880
say configuration space how do we

554
00:25:34,880 --> 00:25:37,039
actually get access to it

555
00:25:37,039 --> 00:25:39,039
particularly given the offsets

556
00:25:39,039 --> 00:25:40,840
well there are two ways of doing

557
00:25:40,840 --> 00:25:43,840
that the first one is shown here

558
00:25:43,840 --> 00:25:45,760
and it's actually the one that was used

559
00:25:45,760 --> 00:25:49,200
both by the trigger and lojex

560
00:25:50,559 --> 00:25:52,640
so we are using here

561
00:25:52,640 --> 00:25:56,640
in and out assembly commands with config

562
00:25:56,640 --> 00:25:59,919
address and config data ports

563
00:25:59,919 --> 00:26:04,720
so this way we can write or read

564
00:26:04,720 --> 00:26:08,559
into the address space of a pci

565
00:26:09,039 --> 00:26:12,320
and as device there we will be using say

566
00:26:12,320 --> 00:26:13,919
the address shown in green here and this

567
00:26:13,919 --> 00:26:15,520
address is coded

568
00:26:15,520 --> 00:26:17,760
from initial information on the bus and

569
00:26:17,760 --> 00:26:18,960
the device

570
00:26:18,960 --> 00:26:21,440
and the number of the function

571
00:26:21,440 --> 00:26:23,760
yeah and the fourth parameter is the

572
00:26:23,760 --> 00:26:25,919
actual register offset

573
00:26:25,919 --> 00:26:28,159
well we actually need to do the writing

574
00:26:28,159 --> 00:26:29,360
of the reading

575
00:26:29,360 --> 00:26:31,440
so there is a formula that actually

576
00:26:31,440 --> 00:26:34,640
encodes all these four values into a

577
00:26:34,640 --> 00:26:37,440
single figure

578
00:26:37,760 --> 00:26:39,919
so this slide at least all the actions

579
00:26:39,919 --> 00:26:42,159
you need to perform in order to detect

580
00:26:42,159 --> 00:26:43,919
uefi butt kits

581
00:26:43,919 --> 00:26:45,760
now let me walk you through this logic

582
00:26:45,760 --> 00:26:47,760
again because i understand that you know

583
00:26:47,760 --> 00:26:50,480
just listening to this probably

584
00:26:50,480 --> 00:26:53,279
helps little so first you need to use

585
00:26:53,279 --> 00:26:56,320
emails instructions

586
00:26:56,559 --> 00:26:59,200
for specific words in order to get

587
00:26:59,200 --> 00:27:03,440
information on bci address space

588
00:27:04,159 --> 00:27:06,159
when you have the ability to read data

589
00:27:06,159 --> 00:27:07,679
from this space

590
00:27:07,679 --> 00:27:11,760
you will be able to read uh rcb registry

591
00:27:11,760 --> 00:27:14,799
value register value whether you know

592
00:27:14,799 --> 00:27:17,120
references to physical memory space and

593
00:27:17,120 --> 00:27:18,559
there you will be able to find

594
00:27:18,559 --> 00:27:21,760
information on

595
00:27:21,919 --> 00:27:24,320
specific registers and you can use their

596
00:27:24,320 --> 00:27:26,159
address value

597
00:27:26,159 --> 00:27:31,279
to read and write data from or in spi

598
00:27:31,919 --> 00:27:35,600
there is also a way of uh getting access

599
00:27:35,600 --> 00:27:38,399
to sbi address space different way you

600
00:27:38,399 --> 00:27:41,840
know in modern chipsets

601
00:27:44,320 --> 00:27:46,320
let's say you know managing register

602
00:27:46,320 --> 00:27:48,799
register

603
00:28:05,840 --> 00:28:07,520
but we decided to do exactly that

604
00:28:07,520 --> 00:28:09,440
because this is considered a more

605
00:28:09,440 --> 00:28:11,520
reliable method and this is how budkies

606
00:28:11,520 --> 00:28:14,080
do it now some people say that mapping

607
00:28:14,080 --> 00:28:17,279
of physical memory when it's you know

608
00:28:17,279 --> 00:28:19,600
virtually represented may result in a

609
00:28:19,600 --> 00:28:20,960
race condition

610
00:28:20,960 --> 00:28:22,320
i'm not sure this is the case we haven't

611
00:28:22,320 --> 00:28:24,480
tested it

612
00:28:24,480 --> 00:28:25,440
but

613
00:28:25,440 --> 00:28:28,000
what was a decisive factor for us was

614
00:28:28,000 --> 00:28:31,720
that you know

615
00:28:39,360 --> 00:28:43,799
you know it's on our to-do list

616
00:28:51,120 --> 00:28:53,039
and we wanted to

617
00:28:53,039 --> 00:28:57,320
develop a detection routine

618
00:28:59,919 --> 00:29:02,559
so we are looking now for in and out

619
00:29:02,559 --> 00:29:04,399
instructions because the effectively

620
00:29:04,399 --> 00:29:07,279
about escaping from a virtual machine to

621
00:29:07,279 --> 00:29:09,120
the hypervisor

622
00:29:09,120 --> 00:29:10,320
well without them you know the

623
00:29:10,320 --> 00:29:12,559
hypervisor will not be able to analyze

624
00:29:12,559 --> 00:29:16,000
the state of the virtual machine

625
00:29:16,799 --> 00:29:19,840
there are many assembler instructions

626
00:29:19,840 --> 00:29:21,760
that would result in something like this

627
00:29:21,760 --> 00:29:25,559
for example hey

628
00:29:26,080 --> 00:29:28,960
there is also rdt sc instruction which

629
00:29:28,960 --> 00:29:30,640
enables you to

630
00:29:30,640 --> 00:29:34,640
check processor time intact

631
00:29:36,399 --> 00:29:38,720
we didn't really know how to leverage it

632
00:29:38,720 --> 00:29:41,039
you know it was not available only bmi

633
00:29:41,039 --> 00:29:42,559
or jackroof

634
00:29:42,559 --> 00:29:46,320
or in accent api

635
00:29:48,960 --> 00:29:52,640
so we actually had to update

636
00:29:52,720 --> 00:29:54,960
and

637
00:29:56,440 --> 00:29:59,599
[Music]

638
00:30:01,360 --> 00:30:03,360
the instructions for handling those

639
00:30:03,360 --> 00:30:05,279
situations when you know there is a vm

640
00:30:05,279 --> 00:30:09,480
exit for an in out

641
00:30:10,240 --> 00:30:12,159
and this way we can actually process it

642
00:30:12,159 --> 00:30:14,640
in direct move so we set intercepts for

643
00:30:14,640 --> 00:30:16,960
every case of

644
00:30:16,960 --> 00:30:19,039
escape from a vm for any email

645
00:30:19,039 --> 00:30:20,640
construction and then we check which

646
00:30:20,640 --> 00:30:22,399
port is being addressed so

647
00:30:22,399 --> 00:30:24,880
if it's a particular sap say config

648
00:30:24,880 --> 00:30:27,440
address board

649
00:30:27,760 --> 00:30:29,600
configuration space we will be guessing

650
00:30:29,600 --> 00:30:32,240
that somebody is trying to read pcie

651
00:30:32,240 --> 00:30:33,919
configuration space which is a good

652
00:30:33,919 --> 00:30:37,840
marker that something can be going wrong

653
00:30:38,000 --> 00:30:41,840
responses naturally may differ

654
00:30:43,440 --> 00:30:45,840
so for example

655
00:30:45,840 --> 00:30:49,440
we can talk about like secure votes

656
00:30:49,440 --> 00:30:52,960
writing to sbi without any issues

657
00:30:52,960 --> 00:30:55,440
were like smm modes which was leveraged

658
00:30:55,440 --> 00:30:58,240
by lojex

659
00:31:01,279 --> 00:31:04,240
responsible for two other bits enabled

660
00:31:04,240 --> 00:31:07,519
one of the bits to be put to zero or one

661
00:31:07,519 --> 00:31:10,399
of the streams could be put into azimut

662
00:31:10,399 --> 00:31:12,960
mode or race condition could be

663
00:31:12,960 --> 00:31:15,519
leveraged in order to

664
00:31:15,519 --> 00:31:18,799
switch off the other protective bits so

665
00:31:18,799 --> 00:31:21,440
these different manipulations

666
00:31:21,440 --> 00:31:25,480
are available for sure

667
00:31:32,799 --> 00:31:35,039
but you know if you see that you know

668
00:31:35,039 --> 00:31:36,080
there is

669
00:31:36,080 --> 00:31:38,720
a request to the firmware

670
00:31:38,720 --> 00:31:41,039
somebody is trying to record obviously

671
00:31:41,039 --> 00:31:42,720
you have enough time

672
00:31:42,720 --> 00:31:45,200
to sport it

673
00:31:45,200 --> 00:31:47,120
naturally this is not the end of this

674
00:31:47,120 --> 00:31:51,360
research we obviously realize that

675
00:31:54,799 --> 00:31:56,720
just to be on the safe side we also need

676
00:31:56,720 --> 00:31:59,360
to consider other vectors such as smm

677
00:31:59,360 --> 00:32:01,600
mode code execution

678
00:32:01,600 --> 00:32:04,640
and we're even thinking of uh developing

679
00:32:04,640 --> 00:32:09,600
an event tracing system in uefi

680
00:32:09,840 --> 00:32:11,919
so that you know we can actually see you

681
00:32:11,919 --> 00:32:16,799
know how modules are invoking ufi apis

682
00:32:16,799 --> 00:32:18,399
the most important problem right now is

683
00:32:18,399 --> 00:32:21,840
that in the current version of xsen

684
00:32:21,919 --> 00:32:24,240
there is no information on sbi there is

685
00:32:24,240 --> 00:32:27,440
in fact no opportunity to properly

686
00:32:27,440 --> 00:32:29,919
analyze the smm modes which means that

687
00:32:29,919 --> 00:32:31,440
you know additional code development

688
00:32:31,440 --> 00:32:33,760
will be required so i've got more time i

689
00:32:33,760 --> 00:32:36,720
should say that actually updating send

690
00:32:36,720 --> 00:32:39,440
is a headache

691
00:32:41,279 --> 00:32:44,000
because they will accept patches to

692
00:32:44,000 --> 00:32:45,440
their projects

693
00:32:45,440 --> 00:32:49,519
you know the old way through email

694
00:32:49,519 --> 00:32:50,399
so

695
00:32:50,399 --> 00:32:52,880
several times we tried doing that and

696
00:32:52,880 --> 00:32:55,519
they blocked our email account

697
00:32:55,519 --> 00:32:58,960
because we're sending div files

698
00:32:59,200 --> 00:33:00,960
you know when we were able to get in

699
00:33:00,960 --> 00:33:03,840
touch with the key people at xsen

700
00:33:03,840 --> 00:33:07,360
you know they kept giving us feedback

701
00:33:07,360 --> 00:33:09,440
on what else they would like to change

702
00:33:09,440 --> 00:33:11,039
but you know what we're not mobile

703
00:33:11,039 --> 00:33:12,720
developers we weren't really in the

704
00:33:12,720 --> 00:33:14,480
business for a code review and

705
00:33:14,480 --> 00:33:16,559
refactoring

706
00:33:16,559 --> 00:33:18,399
so we're hoping the community will step

707
00:33:18,399 --> 00:33:20,159
in

708
00:33:20,159 --> 00:33:24,519
but we also have it in our pipeline

709
00:33:25,120 --> 00:33:28,000
the stage or the state right now is that

710
00:33:28,000 --> 00:33:31,360
we are going to make it public on github

711
00:33:31,360 --> 00:33:32,799
obviously

712
00:33:32,799 --> 00:33:34,880
there will be a new blog in there called

713
00:33:34,880 --> 00:33:36,640
bootkitman

714
00:33:36,640 --> 00:33:38,399
where we are going to deploy everything

715
00:33:38,399 --> 00:33:40,720
i've already described

716
00:33:40,720 --> 00:33:43,279
uh national dependencies for xn and

717
00:33:43,279 --> 00:33:45,919
leave vmi

718
00:33:46,880 --> 00:33:47,679
so

719
00:33:47,679 --> 00:33:49,519
the current state is that you know we

720
00:33:49,519 --> 00:33:51,440
are polishing it we are finalizing

721
00:33:51,440 --> 00:33:52,880
development

722
00:33:52,880 --> 00:33:55,039
right final thoughts and conclusions so

723
00:33:55,039 --> 00:33:57,120
there are boot kits and they differ

724
00:33:57,120 --> 00:33:58,720
however

725
00:33:58,720 --> 00:34:02,480
they do have some common denominators

726
00:34:09,119 --> 00:34:11,119
we may not care that much about a

727
00:34:11,119 --> 00:34:13,599
particular family given

728
00:34:13,599 --> 00:34:15,280
belongs to

729
00:34:15,280 --> 00:34:17,440
because there are ways of you know

730
00:34:17,440 --> 00:34:20,480
identifying them very early

731
00:34:20,480 --> 00:34:22,159
where they don't differ

732
00:34:22,159 --> 00:34:24,960
but we need to be able to register the

733
00:34:24,960 --> 00:34:26,239
bad events

734
00:34:26,239 --> 00:34:28,480
you know if we do that ahead of time so

735
00:34:28,480 --> 00:34:30,719
to speak or if we do in time

736
00:34:30,719 --> 00:34:34,520
we won't even care

737
00:34:42,079 --> 00:34:44,399
if we don't really know how we can do it

738
00:34:44,399 --> 00:34:46,399
outside a virtual machine outside a

739
00:34:46,399 --> 00:34:49,399
sandbox

740
00:34:52,159 --> 00:34:54,079
the biggest problem we have is uh

741
00:34:54,079 --> 00:34:56,879
cheering the pre-built process

742
00:34:56,879 --> 00:34:58,800
lots of interesting things are happening

743
00:34:58,800 --> 00:35:01,119
and we would love to be able to get some

744
00:35:01,119 --> 00:35:03,040
visibility there so that we can actually

745
00:35:03,040 --> 00:35:05,280
identify something

746
00:35:05,280 --> 00:35:09,359
something weird something suspicious

747
00:35:09,599 --> 00:35:11,520
and the solution we have developed i

748
00:35:11,520 --> 00:35:13,280
think is an interesting architectural

749
00:35:13,280 --> 00:35:16,400
find so please help us save the world

750
00:35:16,400 --> 00:35:18,240
from malicious good kids thank you very

751
00:35:18,240 --> 00:35:21,660
much and look forward to our plugin

752
00:35:21,660 --> 00:35:24,400
[Applause]

753
00:35:24,400 --> 00:35:29,400
with over 15 minutes for questions

754
00:35:42,800 --> 00:35:45,800
uh

755
00:35:56,960 --> 00:35:58,240
i won't give you any fancy

756
00:35:58,240 --> 00:36:01,280
recommendations really

757
00:36:01,280 --> 00:36:02,480
because if we're talking about the

758
00:36:02,480 --> 00:36:04,960
firmware and if the firmware has been

759
00:36:04,960 --> 00:36:07,599
infected

760
00:36:08,079 --> 00:36:11,200
it's not a typical

761
00:36:11,440 --> 00:36:13,599
you know case like one thing when you

762
00:36:13,599 --> 00:36:16,079
can deploy you know snapshots of an

763
00:36:16,079 --> 00:36:17,520
operating system

764
00:36:17,520 --> 00:36:19,200
like the same operating system everybody

765
00:36:19,200 --> 00:36:20,320
knows

766
00:36:20,320 --> 00:36:22,560
but you know firmwares they're all so

767
00:36:22,560 --> 00:36:25,200
different and some users don't update

768
00:36:25,200 --> 00:36:27,839
their firmware

769
00:36:28,000 --> 00:36:30,079
i'm not sure there is a you know a

770
00:36:30,079 --> 00:36:33,839
reliable automated solution

771
00:36:35,520 --> 00:36:37,680
i think you can

772
00:36:37,680 --> 00:36:39,280
do for example

773
00:36:39,280 --> 00:36:42,320
dumps memory dumps of chipsets and boot

774
00:36:42,320 --> 00:36:44,240
records if we're talking about the

775
00:36:44,240 --> 00:36:46,000
legacy systems

776
00:36:46,000 --> 00:36:49,200
and then restore from that

777
00:36:51,920 --> 00:36:52,960
site

778
00:36:52,960 --> 00:36:57,359
or potentially you may want to do edr

779
00:37:02,160 --> 00:37:04,240
i'm not sure there is

780
00:37:04,240 --> 00:37:06,160
even you know a centralized solution if

781
00:37:06,160 --> 00:37:08,640
possible

782
00:37:19,760 --> 00:37:21,359
and how can

783
00:37:21,359 --> 00:37:22,800
i actually participate in the

784
00:37:22,800 --> 00:37:26,240
development given that should get loved

785
00:37:30,000 --> 00:37:32,400
further evolution will be available in

786
00:37:32,400 --> 00:37:34,160
uh drug booth

787
00:37:34,160 --> 00:37:36,320
so what i've been talking about is an

788
00:37:36,320 --> 00:37:38,880
announcement um just like that we're

789
00:37:38,880 --> 00:37:41,280
almost ready to make it available to the

790
00:37:41,280 --> 00:37:42,800
public you know making sure there are no

791
00:37:42,800 --> 00:37:45,599
stupid bugs left

792
00:37:46,720 --> 00:37:49,439
to open the doors

793
00:37:49,520 --> 00:37:51,520
going forward we'll need to teach a

794
00:37:51,520 --> 00:37:54,480
hypervisor to support

795
00:37:54,480 --> 00:37:57,359
more modern chipsets and just like i

796
00:37:57,359 --> 00:38:00,640
said uei tracing is another element in

797
00:38:00,640 --> 00:38:03,799
our roadmap

798
00:38:09,200 --> 00:38:10,560
now we've been talking about this you

799
00:38:10,560 --> 00:38:13,520
know forensics case really analysis post

800
00:38:13,520 --> 00:38:15,920
facto so to speak

801
00:38:15,920 --> 00:38:19,320
what about prevention

802
00:38:29,760 --> 00:38:32,839
[Music]

803
00:38:33,119 --> 00:38:34,880
what you need to prevent is not the

804
00:38:34,880 --> 00:38:37,119
buskit but rather installation of buskit

805
00:38:37,119 --> 00:38:39,839
because uh any malware before it drops

806
00:38:39,839 --> 00:38:41,599
the boat kit you know will do lots and

807
00:38:41,599 --> 00:38:44,000
lots of things like recon

808
00:38:44,000 --> 00:38:46,480
and persistence and what have you so

809
00:38:46,480 --> 00:38:48,560
this is the stage where you would want

810
00:38:48,560 --> 00:38:51,680
to intercept it

811
00:38:52,240 --> 00:38:55,280
in order to install a legacy bootkit

812
00:38:55,280 --> 00:38:57,760
obviously you will need rights to write

813
00:38:57,760 --> 00:39:01,240
into the boot records

814
00:39:09,839 --> 00:39:11,599
you know the raw data in the bush record

815
00:39:11,599 --> 00:39:13,640
in real time that's what you need

816
00:39:13,640 --> 00:39:16,730
[Music]

817
00:39:16,800 --> 00:39:19,119
well you may also want to track the

818
00:39:19,119 --> 00:39:21,920
access to mv ram variables and vram

819
00:39:21,920 --> 00:39:24,320
variables

820
00:39:24,320 --> 00:39:27,720
some of the risks

821
00:39:33,680 --> 00:39:35,520
you know there is so this close

822
00:39:35,520 --> 00:39:37,280
functionality for some commercially

823
00:39:37,280 --> 00:39:39,920
available laptops like this

824
00:39:39,920 --> 00:39:41,280
so this is something that you should be

825
00:39:41,280 --> 00:39:44,320
able to do in real time

826
00:39:53,040 --> 00:39:54,839
which are the things you've

827
00:39:54,839 --> 00:39:58,079
listed will be required if we have a

828
00:39:58,079 --> 00:40:00,480
trusted execution pass if we have a

829
00:40:00,480 --> 00:40:02,400
proper boot guard

830
00:40:02,400 --> 00:40:04,400
if we have secure boots

831
00:40:04,400 --> 00:40:06,640
well they do have their problems for

832
00:40:06,640 --> 00:40:07,599
sure

833
00:40:07,599 --> 00:40:10,960
but all the known cases of say implants

834
00:40:10,960 --> 00:40:13,119
in the firmware at least in

835
00:40:13,119 --> 00:40:15,040
public knowledge you know they will all

836
00:40:15,040 --> 00:40:17,040
be abusing misconfiguration of the

837
00:40:17,040 --> 00:40:20,480
platform or bugs in the firmware

838
00:40:20,480 --> 00:40:25,480
do we really need something like this

839
00:40:25,760 --> 00:40:27,680
you know on the preventative side if

840
00:40:27,680 --> 00:40:30,960
we've got everything i've mentioned

841
00:40:31,839 --> 00:40:34,078
questions

842
00:40:36,160 --> 00:40:39,160
to

843
00:40:40,720 --> 00:40:43,119
well we've mentioned two ways of uh

844
00:40:43,119 --> 00:40:45,920
gaining access to registry mapping so if

845
00:40:45,920 --> 00:40:48,079
we don't know how to take the address

846
00:40:48,079 --> 00:40:50,560
out of a cpi well you can completely

847
00:40:50,560 --> 00:40:54,799
skip the stage for detection

848
00:40:55,920 --> 00:40:59,040
will not allow anything right

849
00:40:59,040 --> 00:41:00,000
because

850
00:41:00,000 --> 00:41:01,920
aspi is only available from system

851
00:41:01,920 --> 00:41:03,200
management mode

852
00:41:03,200 --> 00:41:05,520
yes absolutely but there are bugs in

853
00:41:05,520 --> 00:41:07,440
system management modes which can also

854
00:41:07,440 --> 00:41:09,040
be abused

855
00:41:09,040 --> 00:41:10,720
so when you've got boot guard and secure

856
00:41:10,720 --> 00:41:12,000
boat and the whole

857
00:41:12,000 --> 00:41:13,599
route of trust

858
00:41:13,599 --> 00:41:15,359
you know the only

859
00:41:15,359 --> 00:41:16,720
vulnerability

860
00:41:16,720 --> 00:41:19,520
remains in the smm and research done by

861
00:41:19,520 --> 00:41:22,000
various inventors including boy uh bono

862
00:41:22,000 --> 00:41:24,800
and alexander mitchell

863
00:41:24,800 --> 00:41:28,640
many vendors make this mistake

864
00:41:30,319 --> 00:41:32,000
you know so many products in the iot

865
00:41:32,000 --> 00:41:34,079
world now they get released with bugs

866
00:41:34,079 --> 00:41:36,720
and errors

867
00:41:37,599 --> 00:41:40,160
so indeed you know you can disconnect

868
00:41:40,160 --> 00:41:42,319
some of the productions from smm and

869
00:41:42,319 --> 00:41:43,119
then

870
00:41:43,119 --> 00:41:46,000
drop your boot kit

871
00:41:46,079 --> 00:41:48,560
effectively we need to analyze the

872
00:41:48,560 --> 00:41:50,960
firmware in order to you know find

873
00:41:50,960 --> 00:41:54,400
obvious box in the smm

874
00:41:54,640 --> 00:41:56,319
our approach so far has been different

875
00:41:56,319 --> 00:41:57,440
you know we've been looking at how we

876
00:41:57,440 --> 00:42:00,160
can identify a boot kit which is already

877
00:42:00,160 --> 00:42:02,240
there which is a forensic kind of

878
00:42:02,240 --> 00:42:03,920
exercise

879
00:42:03,920 --> 00:42:05,440
absolutely

880
00:42:05,440 --> 00:42:07,599
it's a forensic exercise on a test

881
00:42:07,599 --> 00:42:10,800
system thank you

882
00:42:12,800 --> 00:42:14,000
question

883
00:42:14,000 --> 00:42:17,839
my question has already been answered

884
00:42:18,079 --> 00:42:20,720
yes yes

885
00:42:21,839 --> 00:42:24,960
thank you for your presentation

886
00:42:24,960 --> 00:42:29,000
i've got several questions

887
00:43:20,079 --> 00:43:22,480
and there will be like an automated dump

888
00:43:22,480 --> 00:43:25,680
of the original hash and the modified

889
00:43:25,680 --> 00:43:27,359
one

890
00:43:27,359 --> 00:43:29,680
it's an open source solution i guess it

891
00:43:29,680 --> 00:43:31,760
can be integrated into other systems as

892
00:43:31,760 --> 00:43:32,560
well

893
00:43:32,560 --> 00:43:34,640
so the way we've done it is that for a

894
00:43:34,640 --> 00:43:37,680
legacy boot kits or a legacy system so

895
00:43:37,680 --> 00:43:39,440
rather you know

896
00:43:39,440 --> 00:43:41,520
we can provide you with an option to you

897
00:43:41,520 --> 00:43:43,680
know first restart the system we haven't

898
00:43:43,680 --> 00:43:47,040
done that for ufi yet

899
00:43:48,400 --> 00:43:49,839
this option will not be available there

900
00:43:49,839 --> 00:43:51,760
for the moment

901
00:43:51,760 --> 00:43:54,640
if we get to the stage where we will be

902
00:43:54,640 --> 00:43:57,440
able to register the facts of uh right

903
00:43:57,440 --> 00:43:59,839
operation into spi we should be able to

904
00:43:59,839 --> 00:44:02,319
do the dump you know firmware before and

905
00:44:02,319 --> 00:44:05,839
after and to run our comparison

906
00:44:07,440 --> 00:44:09,359
when you talked about this interaction

907
00:44:09,359 --> 00:44:11,119
with sbi

908
00:44:11,119 --> 00:44:14,000
interception and analysis

909
00:44:14,000 --> 00:44:16,000
i was wondering

910
00:44:16,000 --> 00:44:19,119
about the other tools such as chipset

911
00:44:19,119 --> 00:44:22,800
for dealing with sbi

912
00:44:22,800 --> 00:44:24,319
so how did you choose effectively a

913
00:44:24,319 --> 00:44:27,359
customized solution

914
00:44:32,319 --> 00:44:34,000
they're all designed for

915
00:44:34,000 --> 00:44:36,319
the operating system interface so to

916
00:44:36,319 --> 00:44:38,319
speak

917
00:44:38,319 --> 00:44:40,560
but here we're showing you an example in

918
00:44:40,560 --> 00:44:42,319
the wild so to speak

919
00:44:42,319 --> 00:44:43,440
you know where with you know it's

920
00:44:43,440 --> 00:44:47,200
constructions you can get access to

921
00:44:47,200 --> 00:44:51,560
you know physical memory map

922
00:44:53,280 --> 00:44:55,440
otherwise interacting with the firmware

923
00:44:55,440 --> 00:44:57,359
itself we haven't found if you know them

924
00:44:57,359 --> 00:45:00,480
please talk to me later

925
00:45:02,000 --> 00:45:03,280
i actually believe that you know if

926
00:45:03,280 --> 00:45:05,280
there are other solutions available you

927
00:45:05,280 --> 00:45:09,040
know we should integrate them as well

928
00:45:16,560 --> 00:45:19,560
uh

929
00:45:20,160 --> 00:45:22,160
[Music]

930
00:45:22,160 --> 00:45:25,280
it's going to effectively detect issues

931
00:45:25,280 --> 00:45:28,400
uh based on checksum division or will it

932
00:45:28,400 --> 00:45:31,359
also be tracking for some

933
00:45:31,359 --> 00:45:32,880
because activities know some companies

934
00:45:32,880 --> 00:45:35,359
have for example do

935
00:45:35,359 --> 00:45:37,920
you know they have lots of hardware

936
00:45:37,920 --> 00:45:39,200
they need to

937
00:45:39,200 --> 00:45:41,839
install new firmware on a regular basis

938
00:45:41,839 --> 00:45:45,720
how they're going to use it

939
00:45:55,599 --> 00:45:58,000
then such research could be easier to

940
00:45:58,000 --> 00:46:01,000
perform

941
00:46:03,980 --> 00:46:07,039
[Applause]

942
00:46:09,040 --> 00:46:12,079
is effectively a small operating system

943
00:46:12,079 --> 00:46:14,560
because there is an sdk

944
00:46:14,560 --> 00:46:16,640
for it

945
00:46:16,640 --> 00:46:18,960
like it's it's in our roadmap

946
00:46:18,960 --> 00:46:22,400
but we also want to strike some balance

947
00:46:22,400 --> 00:46:24,240
between the amount of resources it

948
00:46:24,240 --> 00:46:27,520
requires and the demand for it really

949
00:46:27,520 --> 00:46:29,200
because you would really hate to spend

950
00:46:29,200 --> 00:46:31,920
too much time doing it and then saying

951
00:46:31,920 --> 00:46:34,480
it's not used by anybody well hence i'm

952
00:46:34,480 --> 00:46:36,800
actually talking about here

953
00:46:36,800 --> 00:46:38,640
this is how we are gauging potential

954
00:46:38,640 --> 00:46:41,359
interest in it

955
00:46:55,560 --> 00:46:58,000
anti-semitic things technologies used in

956
00:46:58,000 --> 00:46:59,440
ufi

957
00:46:59,440 --> 00:47:03,200
also targeting budgets

958
00:47:08,880 --> 00:47:12,720
products can be activated illegally

959
00:47:12,720 --> 00:47:16,240
or by actually

960
00:47:17,839 --> 00:47:21,200
touching the sbi

961
00:47:26,090 --> 00:47:29,209
[Music]

962
00:47:33,839 --> 00:47:37,319
will not change

963
00:47:50,800 --> 00:47:52,960
now

964
00:47:57,520 --> 00:48:00,000
for a solution that would be deployed on

965
00:48:00,000 --> 00:48:01,920
numerous user machines so then

966
00:48:01,920 --> 00:48:04,800
everything would be locked

967
00:48:15,760 --> 00:48:17,599
you can actually redesign the image of

968
00:48:17,599 --> 00:48:19,440
the virtual machine you can actually

969
00:48:19,440 --> 00:48:20,720
build it there

970
00:48:20,720 --> 00:48:22,400
then it will be considered a legit part

971
00:48:22,400 --> 00:48:24,880
of it and this environment will be

972
00:48:24,880 --> 00:48:26,559
no different from whatever is used in

973
00:48:26,559 --> 00:48:28,319
the organization will not be considered

974
00:48:28,319 --> 00:48:31,119
you know malicious

975
00:48:31,119 --> 00:48:33,280
but you know the sheer effect of

976
00:48:33,280 --> 00:48:35,280
automated installation of it well you

977
00:48:35,280 --> 00:48:36,800
know it goes into the product once you

978
00:48:36,800 --> 00:48:40,559
know you will discover the buzzkid once

979
00:48:40,559 --> 00:48:42,880
because you know it does act as a boost

980
00:48:42,880 --> 00:48:44,960
kit but it will be just you know a

981
00:48:44,960 --> 00:48:47,570
single false positive right

982
00:48:47,570 --> 00:48:50,659
[Music]

983
00:48:53,520 --> 00:48:55,520
so you should be able to avoid further

984
00:48:55,520 --> 00:48:58,720
fast positives like this

985
00:49:00,240 --> 00:49:02,559
double-edged sword

986
00:49:02,559 --> 00:49:04,480
because you know you can do it because

987
00:49:04,480 --> 00:49:06,240
you know

988
00:49:06,240 --> 00:49:08,319
this is how you do your cyber security

989
00:49:08,319 --> 00:49:10,240
or alternatively you know it can be done

990
00:49:10,240 --> 00:49:12,559
with malicious purposes you know to spy

991
00:49:12,559 --> 00:49:14,800
say on a bunch of users

992
00:49:14,800 --> 00:49:18,960
so it's a security strategic decision

993
00:49:18,960 --> 00:49:21,440
i think we actually need you know to see

994
00:49:21,440 --> 00:49:25,359
you know one signal like this

995
00:49:25,599 --> 00:49:27,200
and then you know you can whitelist it

996
00:49:27,200 --> 00:49:28,720
you know you can respond it and then you

997
00:49:28,720 --> 00:49:30,480
can wait list if it is

998
00:49:30,480 --> 00:49:33,119
not malicious

999
00:49:33,280 --> 00:49:34,720
we still have like three minutes

1000
00:49:34,720 --> 00:49:36,960
questions

1001
00:49:36,960 --> 00:49:40,240
maybe we have time for one question

1002
00:49:46,480 --> 00:49:48,240
thank you very much

1003
00:49:48,240 --> 00:49:52,160
i hope you're going to use it

