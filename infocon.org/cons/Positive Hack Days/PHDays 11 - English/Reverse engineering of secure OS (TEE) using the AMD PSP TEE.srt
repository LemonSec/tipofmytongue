1
00:00:04,480 --> 00:00:06,480
thanks very much for joining me here

2
00:00:06,480 --> 00:00:09,440
i'll talk about

3
00:00:10,960 --> 00:00:13,040
reversing

4
00:00:13,040 --> 00:00:14,920
operating systems

5
00:00:14,920 --> 00:00:16,800
safely

6
00:00:16,800 --> 00:00:19,199
do this reverse engineering with this

7
00:00:19,199 --> 00:00:21,439
particular example

8
00:00:21,439 --> 00:00:23,439
i may be referring to this one

9
00:00:23,439 --> 00:00:24,560
particular

10
00:00:24,560 --> 00:00:28,320
operating system i'm bullet gardener

11
00:00:28,320 --> 00:00:30,880
i'm in for research

12
00:00:30,880 --> 00:00:32,159
of these

13
00:00:32,159 --> 00:00:35,920
prospects of red teams and tackle the

14
00:00:35,920 --> 00:00:39,600
safety of industrial

15
00:00:39,920 --> 00:00:43,200
solutions industrial devices

16
00:00:43,200 --> 00:00:44,399
i start with this

17
00:00:44,399 --> 00:00:46,719
global platform specification which

18
00:00:46,719 --> 00:00:50,079
allows to understand the intention of

19
00:00:50,079 --> 00:00:53,680
the safe operating systems it's trusted

20
00:00:53,680 --> 00:00:55,120
execution

21
00:00:55,120 --> 00:00:57,039
environment where we

22
00:00:57,039 --> 00:01:00,160
launch trusted code

23
00:01:00,160 --> 00:01:02,960
one of the specifications of a global

24
00:01:02,960 --> 00:01:04,799
platform

25
00:01:04,799 --> 00:01:09,520
that is system architecture stipulates

26
00:01:10,560 --> 00:01:12,400
an interaction

27
00:01:12,400 --> 00:01:14,159
of rich

28
00:01:14,159 --> 00:01:16,960
in execution environment

29
00:01:16,960 --> 00:01:18,240
and

30
00:01:18,240 --> 00:01:21,360
safe execution environment it's one of

31
00:01:21,360 --> 00:01:23,439
the specifications that describes the

32
00:01:23,439 --> 00:01:26,560
interaction between different components

33
00:01:26,560 --> 00:01:28,880
that is sending commands

34
00:01:28,880 --> 00:01:32,400
how exactly these commands

35
00:01:32,400 --> 00:01:36,720
are sent how we send blobs etc

36
00:01:36,720 --> 00:01:39,040
this is approximately what

37
00:01:39,040 --> 00:01:42,159
this specification looks like

38
00:01:42,159 --> 00:01:46,560
with the main functionality of a safe

39
00:01:46,560 --> 00:01:48,479
operating system

40
00:01:48,479 --> 00:01:51,119
and the safe operating system just like

41
00:01:51,119 --> 00:01:52,079
in the

42
00:01:52,079 --> 00:01:53,759
normal world

43
00:01:53,759 --> 00:01:55,840
its own kernel

44
00:01:55,840 --> 00:01:59,520
runs with its own applications running

45
00:01:59,520 --> 00:02:02,640
on this kernel for example in

46
00:02:02,640 --> 00:02:05,040
the reach execution environment we may

47
00:02:05,040 --> 00:02:06,719
have linux running

48
00:02:06,719 --> 00:02:10,000
with some applications running on it in

49
00:02:10,000 --> 00:02:14,080
a safe application system we have

50
00:02:14,080 --> 00:02:14,959
track

51
00:02:14,959 --> 00:02:18,000
trustlets trustlets also have

52
00:02:18,000 --> 00:02:20,080
apis

53
00:02:20,080 --> 00:02:21,040
used

54
00:02:21,040 --> 00:02:23,760
to complete and realize their

55
00:02:23,760 --> 00:02:26,319
functionality

56
00:02:26,319 --> 00:02:30,000
api is described by global platform

57
00:02:30,000 --> 00:02:32,160
specification it's

58
00:02:32,160 --> 00:02:34,879
recommended to use in reverse

59
00:02:34,879 --> 00:02:37,040
engineering because this is the standard

60
00:02:37,040 --> 00:02:39,599
they stick to so it would be very

61
00:02:39,599 --> 00:02:40,879
convenient

62
00:02:40,879 --> 00:02:41,680
to

63
00:02:41,680 --> 00:02:44,160
move these translates there

64
00:02:44,160 --> 00:02:45,200
core

65
00:02:45,200 --> 00:02:47,519
api looks like this like you can see

66
00:02:47,519 --> 00:02:48,879
right now

67
00:02:48,879 --> 00:02:52,239
it's used together with translates

68
00:02:52,239 --> 00:02:55,280
and you can read in the description what

69
00:02:55,280 --> 00:02:56,239
the

70
00:02:56,239 --> 00:02:58,159
arguments there are what's

71
00:02:58,159 --> 00:03:01,040
pros what's the cons etc there are a few

72
00:03:01,040 --> 00:03:03,519
standards like that so they describe

73
00:03:03,519 --> 00:03:05,120
their

74
00:03:05,120 --> 00:03:08,400
customer side client side on the reach

75
00:03:08,400 --> 00:03:11,599
execution environment and the interface

76
00:03:11,599 --> 00:03:13,920
of the safe operating system it's very

77
00:03:13,920 --> 00:03:16,959
recommended to use in the reverse

78
00:03:16,959 --> 00:03:19,040
engineering and restoring

79
00:03:19,040 --> 00:03:20,560
the logic of

80
00:03:20,560 --> 00:03:22,879
everything in order not to start

81
00:03:22,879 --> 00:03:25,519
reversing some proprietary solutions in

82
00:03:25,519 --> 00:03:27,599
order just to understand how it works

83
00:03:27,599 --> 00:03:30,799
you may want just to check out this good

84
00:03:30,799 --> 00:03:34,640
open source examples opte

85
00:03:34,640 --> 00:03:37,599
it has its source code

86
00:03:37,599 --> 00:03:39,599
some proprietary

87
00:03:39,599 --> 00:03:41,920
resolutions and trusted environment for

88
00:03:41,920 --> 00:03:43,120
android

89
00:03:43,120 --> 00:03:47,040
devices they very often take opt they

90
00:03:47,040 --> 00:03:48,159
modified

91
00:03:48,159 --> 00:03:49,840
it a little bit and sell it it's not

92
00:03:49,840 --> 00:03:53,920
quite legal but that's what it works

93
00:03:53,920 --> 00:03:55,840
if you're already familiar with this

94
00:03:55,840 --> 00:03:59,519
particular realization uh some of the te

95
00:03:59,519 --> 00:04:02,000
realizations can be reversed in a much

96
00:04:02,000 --> 00:04:05,439
easier fashion in a much simpler way

97
00:04:05,439 --> 00:04:08,159
t is used here

98
00:04:08,159 --> 00:04:11,760
in the devices uh based upon android in

99
00:04:11,760 --> 00:04:14,080
the internet of things where trusted

100
00:04:14,080 --> 00:04:15,360
computing

101
00:04:15,360 --> 00:04:18,560
is required it's also used

102
00:04:18,560 --> 00:04:20,399
for tpm

103
00:04:20,399 --> 00:04:22,800
implementation according to tpm

104
00:04:22,800 --> 00:04:24,720
implementation

105
00:04:24,720 --> 00:04:26,840
the

106
00:04:26,840 --> 00:04:29,600
trusted component should be implemented

107
00:04:29,600 --> 00:04:32,560
for pc

108
00:04:32,560 --> 00:04:35,759
devices but trusted technology which

109
00:04:35,759 --> 00:04:38,560
develops the tpm standard agreed with

110
00:04:38,560 --> 00:04:43,680
global platform to make sure that they

111
00:04:43,680 --> 00:04:47,040
facilitate the development of

112
00:04:47,040 --> 00:04:49,600
such versions in t

113
00:04:49,600 --> 00:04:50,720
e e

114
00:04:50,720 --> 00:04:51,520
and

115
00:04:51,520 --> 00:04:54,880
m d and intel

116
00:04:54,960 --> 00:04:58,240
realize ftpm these days if i'm not

117
00:04:58,240 --> 00:05:01,360
mistaken uh speaking in terms of amd i

118
00:05:01,360 --> 00:05:02,960
know how they do it and i'm going to

119
00:05:02,960 --> 00:05:05,840
tell you this story

120
00:05:07,360 --> 00:05:10,400
in 2015 amd

121
00:05:10,400 --> 00:05:13,600
introduced platform security processor

122
00:05:13,600 --> 00:05:17,360
which is standalone core

123
00:05:17,919 --> 00:05:20,960
running on the main cpu chip

124
00:05:20,960 --> 00:05:22,840
from which all

125
00:05:22,840 --> 00:05:26,560
the upload starts before this code

126
00:05:26,560 --> 00:05:30,880
starts and in n86 kernels

127
00:05:30,880 --> 00:05:31,919
arm

128
00:05:31,919 --> 00:05:34,799
kernel starts

129
00:05:35,520 --> 00:05:38,720
which verifies a secure input

130
00:05:38,720 --> 00:05:40,639
for the main system

131
00:05:40,639 --> 00:05:42,479
and also enables some additional

132
00:05:42,479 --> 00:05:44,080
mechanisms

133
00:05:44,080 --> 00:05:46,479
including ftpm

134
00:05:46,479 --> 00:05:49,680
in psp at the initial phase

135
00:05:49,680 --> 00:05:51,280
pspos

136
00:05:51,280 --> 00:05:52,720
initiates

137
00:05:52,720 --> 00:05:55,520
this operating system has been studied

138
00:05:55,520 --> 00:05:59,440
properly by the colleagues of mine

139
00:06:00,400 --> 00:06:02,960
in the british university

140
00:06:02,960 --> 00:06:06,240
they developed an open source to

141
00:06:06,240 --> 00:06:09,360
a psp tool which parses

142
00:06:09,360 --> 00:06:11,840
the file system for that particular

143
00:06:11,840 --> 00:06:13,520
operating system

144
00:06:13,520 --> 00:06:16,080
in an initial stage

145
00:06:16,080 --> 00:06:18,400
on an

146
00:06:18,840 --> 00:06:20,960
allocated core

147
00:06:20,960 --> 00:06:23,919
this proprietary operating system starts

148
00:06:23,919 --> 00:06:27,440
initialization occurs and they created

149
00:06:27,440 --> 00:06:29,440
and they considered all the

150
00:06:29,440 --> 00:06:31,280
architecture for

151
00:06:31,280 --> 00:06:34,400
server processors but they

152
00:06:34,400 --> 00:06:35,520
left

153
00:06:35,520 --> 00:06:39,919
the part with the ryzen cpus unexplored

154
00:06:39,919 --> 00:06:40,800
i mean

155
00:06:40,800 --> 00:06:44,319
how the safe operating system works

156
00:06:44,319 --> 00:06:46,800
how this

157
00:06:47,600 --> 00:06:52,160
firmware tpm is realized

158
00:06:52,639 --> 00:06:54,800
this is an

159
00:06:54,800 --> 00:06:58,639
integral part of the contemporary

160
00:06:58,639 --> 00:07:00,400
operating system

161
00:07:00,400 --> 00:07:03,440
windows starting from windows 10 the use

162
00:07:03,440 --> 00:07:07,680
of tpm is very relevant

163
00:07:08,720 --> 00:07:11,360
they also made a little bit of

164
00:07:11,360 --> 00:07:13,039
a mistake

165
00:07:13,039 --> 00:07:14,880
saying that the operating system running

166
00:07:14,880 --> 00:07:17,840
psp is

167
00:07:19,840 --> 00:07:23,360
kinney b-t-e-e it's not true amd

168
00:07:23,360 --> 00:07:25,520
realized their own

169
00:07:25,520 --> 00:07:28,160
solution their own version of a safe

170
00:07:28,160 --> 00:07:30,319
operating system because one of the

171
00:07:30,319 --> 00:07:33,199
drivers which is responsible for psp

172
00:07:33,199 --> 00:07:36,720
interaction with ryzen cpus has

173
00:07:36,720 --> 00:07:40,479
trustlets for kennebe

174
00:07:40,479 --> 00:07:41,840
it's a

175
00:07:41,840 --> 00:07:44,479
trick from amd maybe or maybe they

176
00:07:44,479 --> 00:07:47,680
wanted to make it compatible with comedy

177
00:07:47,680 --> 00:07:51,680
canaby i'm sorry but i don't know but

178
00:07:51,680 --> 00:07:54,400
that's what it is

179
00:07:54,400 --> 00:07:56,879
in order to start this analysis first of

180
00:07:56,879 --> 00:07:59,919
all we just need to get the firmware

181
00:07:59,919 --> 00:08:02,719
get the code

182
00:08:03,120 --> 00:08:06,000
which runs in psp

183
00:08:06,000 --> 00:08:09,520
which is a part of

184
00:08:09,840 --> 00:08:15,599
u efi image and we can get this

185
00:08:16,560 --> 00:08:18,319
operating system from there we can

186
00:08:18,319 --> 00:08:20,240
extract it from there

187
00:08:20,240 --> 00:08:22,240
like we can see it on the other

188
00:08:22,240 --> 00:08:23,520
slide

189
00:08:23,520 --> 00:08:28,719
they developed the psp tool which parses

190
00:08:28,800 --> 00:08:30,160
uefi

191
00:08:30,160 --> 00:08:32,958
image and extracts

192
00:08:32,958 --> 00:08:38,080
the file system psp file system

193
00:08:38,080 --> 00:08:40,000
it's just one of the blobs that needs to

194
00:08:40,000 --> 00:08:41,360
be parsed

195
00:08:41,360 --> 00:08:43,599
and they developed a utility which

196
00:08:43,599 --> 00:08:46,720
parses it pulls out all the

197
00:08:46,720 --> 00:08:48,320
contents

198
00:08:48,320 --> 00:08:50,480
which you can study later on and also it

199
00:08:50,480 --> 00:08:53,279
has an image of a safe operating system

200
00:08:53,279 --> 00:08:55,839
in there

201
00:08:56,959 --> 00:09:00,160
it's entitled amd t-e-e that's the name

202
00:09:00,160 --> 00:09:03,279
of the operating system

203
00:09:05,440 --> 00:09:08,800
there'll be nothing but strings like it

204
00:09:08,800 --> 00:09:11,120
always happens for proprietary

205
00:09:11,120 --> 00:09:12,160
the

206
00:09:12,160 --> 00:09:14,800
proprietary operating system it has a

207
00:09:14,800 --> 00:09:17,760
minimal functionality no debugging is

208
00:09:17,760 --> 00:09:20,800
required there no information is

209
00:09:20,800 --> 00:09:24,320
contained in the strings

210
00:09:24,320 --> 00:09:26,800
we just need to

211
00:09:26,800 --> 00:09:30,959
analyze the naked binary so to speak

212
00:09:30,959 --> 00:09:32,800
we know that it starts

213
00:09:32,800 --> 00:09:36,399
with the header psp file system header

214
00:09:36,399 --> 00:09:37,200
and

215
00:09:37,200 --> 00:09:38,959
the next part

216
00:09:38,959 --> 00:09:41,279
well you you can give it a guess here

217
00:09:41,279 --> 00:09:43,440
who's already been

218
00:09:43,440 --> 00:09:46,800
studying binaries it's the arm

219
00:09:46,800 --> 00:09:48,880
code

220
00:09:48,880 --> 00:09:52,160
you can tell it by this uh symbols

221
00:09:52,160 --> 00:09:56,160
little id etc

222
00:09:56,399 --> 00:09:58,399
just by looking at this code

223
00:09:58,399 --> 00:10:00,320
before analyzing this code you just need

224
00:10:00,320 --> 00:10:03,440
to take a look how previous stages work

225
00:10:03,440 --> 00:10:07,040
pspos runs at the previous phase

226
00:10:07,040 --> 00:10:10,320
from this study we understand that t-e-e

227
00:10:10,320 --> 00:10:14,480
overrides psp os

228
00:10:14,640 --> 00:10:17,279
it sets it to zero

229
00:10:17,279 --> 00:10:20,480
how does this happen if we open the tee

230
00:10:20,480 --> 00:10:24,880
lower loader in psp os we will see

231
00:10:24,880 --> 00:10:27,839
that here in the destination address we

232
00:10:27,839 --> 00:10:29,920
have a

233
00:10:29,920 --> 00:10:32,800
symbol which is defined here it's a

234
00:10:32,800 --> 00:10:33,920
place

235
00:10:33,920 --> 00:10:35,760
in memory

236
00:10:35,760 --> 00:10:36,959
where this

237
00:10:36,959 --> 00:10:40,240
tee image is written

238
00:10:40,240 --> 00:10:42,959
28 entry type

239
00:10:42,959 --> 00:10:45,120
is a driver which maintains

240
00:10:45,120 --> 00:10:49,600
compatibility with platform i api

241
00:10:49,600 --> 00:10:50,640
it

242
00:10:50,640 --> 00:10:51,600
writes

243
00:10:51,600 --> 00:10:55,760
to address and the code starts executing

244
00:10:55,760 --> 00:10:59,120
not from the horizontal offset

245
00:10:59,120 --> 00:11:00,560
you can see

246
00:11:00,560 --> 00:11:01,600
the

247
00:11:01,600 --> 00:11:02,480
first

248
00:11:02,480 --> 00:11:05,519
argument zero operating system has not

249
00:11:05,519 --> 00:11:07,920
been initialized yet

250
00:11:07,920 --> 00:11:11,279
but it's trusted to start and run the

251
00:11:11,279 --> 00:11:13,279
trustlets

252
00:11:13,279 --> 00:11:15,920
while disassembling the beginning of the

253
00:11:15,920 --> 00:11:18,399
code the start of the code

254
00:11:18,399 --> 00:11:20,320
and comparing it with the information

255
00:11:20,320 --> 00:11:23,279
from previous studies we can see this

256
00:11:23,279 --> 00:11:24,800
exception

257
00:11:24,800 --> 00:11:25,680
chart

258
00:11:25,680 --> 00:11:28,800
exception offset can be addressed here

259
00:11:28,800 --> 00:11:30,560
and

260
00:11:30,560 --> 00:11:33,359
system calls

261
00:11:34,959 --> 00:11:37,680
and we can also see after it's been

262
00:11:37,680 --> 00:11:41,440
passed to t double e

263
00:11:41,440 --> 00:11:44,399
execution flow deploys

264
00:11:44,399 --> 00:11:49,760
which registers are initiated etc

265
00:11:52,880 --> 00:11:56,480
before amd tee starts

266
00:11:56,480 --> 00:11:58,639
its main logic that i'm showing here at

267
00:11:58,639 --> 00:12:00,959
this particular slide it checks and

268
00:12:00,959 --> 00:12:02,560
verifies

269
00:12:02,560 --> 00:12:04,880
whether

270
00:12:05,279 --> 00:12:07,519
mmu is a

271
00:12:07,519 --> 00:12:11,760
functional memory managed unit whether

272
00:12:11,760 --> 00:12:15,040
it is functional it shuts it down

273
00:12:15,040 --> 00:12:17,279
copies it to the zero

274
00:12:17,279 --> 00:12:20,720
address it copies psp

275
00:12:20,720 --> 00:12:24,480
os and te seems like it's the only thing

276
00:12:24,480 --> 00:12:26,800
running on that

277
00:12:26,800 --> 00:12:30,560
cpu i'm talking about ryzen cpus after

278
00:12:30,560 --> 00:12:33,600
this initialization we can only

279
00:12:33,600 --> 00:12:36,959
interact with te and there is nothing

280
00:12:36,959 --> 00:12:39,920
relevant for epic if we're talking about

281
00:12:39,920 --> 00:12:42,160
ryzen cpu

282
00:12:42,160 --> 00:12:44,720
what i'm showing here on the slide

283
00:12:44,720 --> 00:12:47,040
uh it's colored

284
00:12:47,040 --> 00:12:48,800
by light green

285
00:12:48,800 --> 00:12:49,760
by

286
00:12:49,760 --> 00:12:52,160
a special plugin i would like to thank

287
00:12:52,160 --> 00:12:55,760
its creator for doing so it highlights

288
00:12:55,760 --> 00:12:57,120
the names

289
00:12:57,120 --> 00:13:00,639
of the system registries

290
00:13:00,639 --> 00:13:01,680
by

291
00:13:01,680 --> 00:13:04,800
arm that are used

292
00:13:04,800 --> 00:13:08,320
for hardware setup all these registries

293
00:13:08,320 --> 00:13:13,040
are set to default zeros

294
00:13:13,040 --> 00:13:14,800
and here we can see

295
00:13:14,800 --> 00:13:17,600
the vector chart

296
00:13:17,600 --> 00:13:19,760
this table contains

297
00:13:19,760 --> 00:13:21,600
the exception

298
00:13:21,600 --> 00:13:23,519
of such rules

299
00:13:23,519 --> 00:13:26,240
this is in the registry bar

300
00:13:26,240 --> 00:13:27,040
so

301
00:13:27,040 --> 00:13:29,360
the basic zero

302
00:13:29,360 --> 00:13:31,120
address

303
00:13:31,120 --> 00:13:32,480
has been

304
00:13:32,480 --> 00:13:33,440
given

305
00:13:33,440 --> 00:13:36,000
properly that's what we need to verify

306
00:13:36,000 --> 00:13:42,000
then mmu shuts down so that amd ts can

307
00:13:42,000 --> 00:13:45,360
handle the virtualized memory

308
00:13:45,360 --> 00:13:48,000
cache is validated and in a special

309
00:13:48,000 --> 00:13:49,360
registry

310
00:13:49,360 --> 00:13:50,959
where we can

311
00:13:50,959 --> 00:13:52,079
see

312
00:13:52,079 --> 00:13:54,959
the main translation table

313
00:13:54,959 --> 00:13:57,680
we see some addresses written down in

314
00:13:57,680 --> 00:13:59,920
the memory where we can track down the

315
00:13:59,920 --> 00:14:02,480
initialization of memory

316
00:14:02,480 --> 00:14:05,440
the initialization of the initial memory

317
00:14:05,440 --> 00:14:07,120
is done by this

318
00:14:07,120 --> 00:14:11,360
init memory it is done like this

319
00:14:11,360 --> 00:14:14,240
mainly it translates whether there is

320
00:14:14,240 --> 00:14:16,800
physical space there

321
00:14:16,800 --> 00:14:20,480
physical address space rather

322
00:14:20,480 --> 00:14:23,279
but we can also see that

323
00:14:23,279 --> 00:14:25,600
some parts of

324
00:14:25,600 --> 00:14:28,800
memory from 0x

325
00:14:28,800 --> 00:14:31,680
0 zero to fifteen thousand

326
00:14:31,680 --> 00:14:34,639
is depicted uh for

327
00:14:34,639 --> 00:14:38,320
read write and execution this code

328
00:14:38,320 --> 00:14:41,600
is contained in the mdte

329
00:14:41,600 --> 00:14:46,399
that's the initial process in it process

330
00:14:46,399 --> 00:14:49,120
with the bootloader arguments addresses

331
00:14:49,120 --> 00:14:51,519
we used to have

332
00:14:51,519 --> 00:14:52,560
boot

333
00:14:52,560 --> 00:14:56,160
rom and now they are re-written by such

334
00:14:56,160 --> 00:14:59,360
ones for mdte

335
00:14:59,360 --> 00:15:04,079
then we launched the main init process

336
00:15:04,079 --> 00:15:06,079
additional virtual

337
00:15:06,079 --> 00:15:09,680
memories used randomization is used here

338
00:15:09,680 --> 00:15:15,519
and in it process is added to the queue

339
00:15:15,920 --> 00:15:18,639
this what it looks like approximately

340
00:15:18,639 --> 00:15:21,920
what's interesting here

341
00:15:23,040 --> 00:15:24,560
is that the first

342
00:15:24,560 --> 00:15:29,760
argument is entry the entry of our task

343
00:15:30,720 --> 00:15:33,199
so the unit

344
00:15:33,199 --> 00:15:35,839
here is

345
00:15:35,839 --> 00:15:38,880
a flow a flow in the operating system

346
00:15:38,880 --> 00:15:41,600
every task may have a few flows

347
00:15:41,600 --> 00:15:44,800
and the time is distributed

348
00:15:44,800 --> 00:15:46,480
correspondently

349
00:15:46,480 --> 00:15:48,959
by flows

350
00:15:48,959 --> 00:15:51,279
why is it important to know how this

351
00:15:51,279 --> 00:15:53,519
function operates

352
00:15:53,519 --> 00:15:56,720
because it's used through a system call

353
00:15:56,720 --> 00:16:00,720
to create additional tasks

354
00:16:00,880 --> 00:16:01,600
so

355
00:16:01,600 --> 00:16:02,560
here

356
00:16:02,560 --> 00:16:05,759
special registry is set which

357
00:16:05,759 --> 00:16:08,959
stipulates how this code is running

358
00:16:08,959 --> 00:16:11,040
security id

359
00:16:11,040 --> 00:16:14,959
is set here and we also set the priority

360
00:16:14,959 --> 00:16:18,320
of the process we can also see the

361
00:16:18,320 --> 00:16:23,320
size of this structure here

362
00:16:24,320 --> 00:16:27,360
after this init process is launched

363
00:16:27,360 --> 00:16:28,880
it

364
00:16:28,880 --> 00:16:31,519
carries out stage one

365
00:16:31,519 --> 00:16:33,839
where i would like to omit the details

366
00:16:33,839 --> 00:16:34,959
but

367
00:16:34,959 --> 00:16:38,880
we need to consider some system calls it

368
00:16:38,880 --> 00:16:40,240
revokes

369
00:16:40,240 --> 00:16:43,120
a part of the memory

370
00:16:43,120 --> 00:16:46,079
some point some part of ram

371
00:16:46,079 --> 00:16:48,800
64

372
00:16:48,800 --> 00:16:51,800
63

373
00:16:52,000 --> 00:16:54,079
73 calls

374
00:16:54,079 --> 00:16:56,079
78 and

375
00:16:56,079 --> 00:16:57,279
80

376
00:16:57,279 --> 00:16:59,279
return this physical

377
00:16:59,279 --> 00:17:01,120
address when necessary for some

378
00:17:01,120 --> 00:17:04,559
registries as for task management there

379
00:17:04,559 --> 00:17:07,359
are some tasks for creating tasks

380
00:17:07,359 --> 00:17:08,720
we can share

381
00:17:08,720 --> 00:17:10,160
ipc

382
00:17:10,160 --> 00:17:12,720
of which i will speak a little later

383
00:17:12,720 --> 00:17:16,400
the most frequent calling ftpn

384
00:17:16,400 --> 00:17:19,760
is f2 ipc

385
00:17:19,760 --> 00:17:22,720
to the driver which realizes global

386
00:17:22,720 --> 00:17:25,760
platform we can put this task

387
00:17:25,760 --> 00:17:29,600
on hold and we can

388
00:17:29,600 --> 00:17:31,360
check out some other options which i

389
00:17:31,360 --> 00:17:33,039
haven't checked

390
00:17:33,039 --> 00:17:34,799
yet myself

391
00:17:34,799 --> 00:17:38,320
then it goes to init stage one where the

392
00:17:38,320 --> 00:17:41,120
main translates are loaded there

393
00:17:41,120 --> 00:17:43,200
and the

394
00:17:43,200 --> 00:17:44,960
external commands

395
00:17:44,960 --> 00:17:46,880
processor for example one of the

396
00:17:46,880 --> 00:17:49,039
interesting commands is the upload of

397
00:17:49,039 --> 00:17:50,160
their own

398
00:17:50,160 --> 00:17:51,440
translate

399
00:17:51,440 --> 00:17:53,840
we'll talk about it more in detail

400
00:17:53,840 --> 00:17:56,400
further on uh here is the structure

401
00:17:56,400 --> 00:17:57,760
that's what it's

402
00:17:57,760 --> 00:17:59,760
shown

403
00:17:59,760 --> 00:18:01,360
here is

404
00:18:01,360 --> 00:18:05,120
the signature part which is not utilized

405
00:18:05,120 --> 00:18:07,360
here

406
00:18:07,360 --> 00:18:09,760
and there is a version of a header and

407
00:18:09,760 --> 00:18:11,440
some of the version

408
00:18:11,440 --> 00:18:14,720
we have an additional code

409
00:18:14,720 --> 00:18:16,960
which is split in two parts and there is

410
00:18:16,960 --> 00:18:21,600
nothing else to comment on and also this

411
00:18:21,600 --> 00:18:22,880
canary

412
00:18:22,880 --> 00:18:25,039
which is not stay

413
00:18:25,039 --> 00:18:29,919
static so cannery canary is used which

414
00:18:29,919 --> 00:18:34,000
randomizes at the launch of the trustlet

415
00:18:34,000 --> 00:18:37,280
in order to call all these

416
00:18:37,280 --> 00:18:40,000
functions in order to reach the api

417
00:18:40,000 --> 00:18:40,720
from

418
00:18:40,720 --> 00:18:43,840
stage two init process which realizes

419
00:18:43,840 --> 00:18:45,600
some of the commands

420
00:18:45,600 --> 00:18:47,600
in the windows

421
00:18:47,600 --> 00:18:51,600
there is an amd ee library where you can

422
00:18:51,600 --> 00:18:53,200
pull out

423
00:18:53,200 --> 00:18:55,280
such functions

424
00:18:55,280 --> 00:18:58,160
so each of the commands

425
00:18:58,160 --> 00:19:01,200
corresponds to a certain function

426
00:19:01,200 --> 00:19:03,840
all of them

427
00:19:04,320 --> 00:19:07,039
stand for global platform and that's

428
00:19:07,039 --> 00:19:09,200
what we need to know

429
00:19:09,200 --> 00:19:12,240
uh what else can we do with it

430
00:19:12,240 --> 00:19:14,640
like i was saying there is

431
00:19:14,640 --> 00:19:15,440
no

432
00:19:15,440 --> 00:19:18,559
verification of the signature so you can

433
00:19:18,559 --> 00:19:20,960
upload your own translate and see what

434
00:19:20,960 --> 00:19:23,440
happens restore logic

435
00:19:23,440 --> 00:19:25,919
develop an emulator and

436
00:19:25,919 --> 00:19:27,760
to fuss the

437
00:19:27,760 --> 00:19:32,160
the interface to upload the trustlets

438
00:19:32,160 --> 00:19:34,880
instead of verifying the signature they

439
00:19:34,880 --> 00:19:38,480
verify the props according to

440
00:19:38,480 --> 00:19:40,799
their specifications trustlets should

441
00:19:40,799 --> 00:19:44,720
have props and one of these props is the

442
00:19:44,720 --> 00:19:47,440
application id i'm done thank you very

443
00:19:47,440 --> 00:19:51,559
much do you have questions

