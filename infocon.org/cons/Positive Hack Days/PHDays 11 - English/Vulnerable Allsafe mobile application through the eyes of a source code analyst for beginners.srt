1
00:00:04,160 --> 00:00:06,160
good day ladies and gentlemen my name is

2
00:00:06,160 --> 00:00:08,000
tatiana

3
00:00:08,000 --> 00:00:10,800
and i'm here today to talk to you about

4
00:00:10,800 --> 00:00:14,240
mobile applications security and this is

5
00:00:14,240 --> 00:00:17,119
my course speaker yfme and also marina

6
00:00:17,119 --> 00:00:19,840
and some other people out there in the

7
00:00:19,840 --> 00:00:22,720
room we work for upscreen it's a

8
00:00:22,720 --> 00:00:24,160
sass

9
00:00:24,160 --> 00:00:26,560
and the reason we decided to talk to you

10
00:00:26,560 --> 00:00:28,560
today about mobile application is pretty

11
00:00:28,560 --> 00:00:30,080
straightforward

12
00:00:30,080 --> 00:00:32,719
it's just our task for the quarter

13
00:00:32,719 --> 00:00:35,120
the increase coverage

14
00:00:35,120 --> 00:00:37,200
of

15
00:00:37,200 --> 00:00:39,280
mobile applications and rate of

16
00:00:39,280 --> 00:00:41,040
detection and vulnerabilities in mobile

17
00:00:41,040 --> 00:00:42,399
applications

18
00:00:42,399 --> 00:00:45,120
but realize that the beginners do start

19
00:00:45,120 --> 00:00:48,800
with web and know little about security

20
00:00:48,800 --> 00:00:51,280
in mobile applications

21
00:00:51,280 --> 00:00:52,320
hence

22
00:00:52,320 --> 00:00:53,520
this

23
00:00:53,520 --> 00:00:56,160
beginners

24
00:00:56,559 --> 00:01:00,718
101 kind of presentation

25
00:01:03,120 --> 00:01:04,720
and

26
00:01:04,720 --> 00:01:07,280
yfme is going to give you proper concept

27
00:01:07,280 --> 00:01:08,720
of each of the vulnerabilities in the

28
00:01:08,720 --> 00:01:11,600
context of mobile applications so let us

29
00:01:11,600 --> 00:01:13,839
begin

30
00:01:18,400 --> 00:01:20,479
some information about us

31
00:01:20,479 --> 00:01:22,880
our contact details and this is the

32
00:01:22,880 --> 00:01:24,560
plan for today

33
00:01:24,560 --> 00:01:27,200
so first off i'm going to tell you a few

34
00:01:27,200 --> 00:01:30,320
words about the general approach to

35
00:01:30,320 --> 00:01:31,439
um

36
00:01:31,439 --> 00:01:34,240
application mobile application security

37
00:01:34,240 --> 00:01:35,600
and what were

38
00:01:35,600 --> 00:01:38,400
the books and

39
00:01:38,400 --> 00:01:40,720
you know things that you should read as

40
00:01:40,720 --> 00:01:42,880
a beginner

41
00:01:42,880 --> 00:01:45,439
and i'm going to introduce you to sas

42
00:01:45,439 --> 00:01:47,280
dust and and then

43
00:01:47,280 --> 00:01:49,920
we'll go on with the practical

44
00:01:49,920 --> 00:01:52,240
part of it we're going to look at all

45
00:01:52,240 --> 00:01:54,079
safe mobile application

46
00:01:54,079 --> 00:01:55,680
that serves

47
00:01:55,680 --> 00:01:57,920
as a way to illustrate three

48
00:01:57,920 --> 00:02:01,040
vulnerabilities we'll look at sq

49
00:02:01,040 --> 00:02:02,960
sql injection

50
00:02:02,960 --> 00:02:05,200
and how to find it in

51
00:02:05,200 --> 00:02:08,080
by sas and how static analyzer is

52
00:02:08,080 --> 00:02:09,679
capable of doing it

53
00:02:09,679 --> 00:02:11,200
um

54
00:02:11,200 --> 00:02:14,239
automatically and we're going to look at

55
00:02:14,239 --> 00:02:15,840
uh arbitrary

56
00:02:15,840 --> 00:02:18,319
code execution and

57
00:02:18,319 --> 00:02:21,360
we'll have proof of concept from ufc

58
00:02:21,360 --> 00:02:23,840
so let us start by

59
00:02:23,840 --> 00:02:26,400
looking at what we already have in terms

60
00:02:26,400 --> 00:02:28,560
of

61
00:02:28,800 --> 00:02:31,200
mobile application safety of us we have

62
00:02:31,200 --> 00:02:33,519
web our top 10

63
00:02:33,519 --> 00:02:35,360
and there is also top 10 for mobile

64
00:02:35,360 --> 00:02:36,720
applications

65
00:02:36,720 --> 00:02:39,760
so basically these are the insecurities

66
00:02:39,760 --> 00:02:41,760
that can often happen with mobile

67
00:02:41,760 --> 00:02:42,959
applications

68
00:02:42,959 --> 00:02:44,480
most interestingly

69
00:02:44,480 --> 00:02:46,879
the latest updated version is as of

70
00:02:46,879 --> 00:02:49,680
2016.

71
00:02:49,680 --> 00:02:53,599
so security people still work with the

72
00:02:53,599 --> 00:02:56,239
thing that was released quite long ago

73
00:02:56,239 --> 00:02:59,760
2016 is long ago

74
00:03:00,159 --> 00:03:02,239
i think it's not a good thing but

75
00:03:02,239 --> 00:03:05,840
hopefully they'll update it soon

76
00:03:07,519 --> 00:03:10,319
obasp also has mobile application

77
00:03:10,319 --> 00:03:13,440
security verification standard

78
00:03:13,440 --> 00:03:16,239
which includes eight chapters and each

79
00:03:16,239 --> 00:03:17,680
chapters

80
00:03:17,680 --> 00:03:20,239
has requirements which are kind of sub

81
00:03:20,239 --> 00:03:22,560
points

82
00:03:23,599 --> 00:03:25,840
so these are the requirements that you

83
00:03:25,840 --> 00:03:27,840
need to comply

84
00:03:27,840 --> 00:03:31,280
to be a safe mobile application

85
00:03:31,280 --> 00:03:34,560
so it's good for your own uh awareness

86
00:03:34,560 --> 00:03:37,760
and it works great with mstg mobile

87
00:03:37,760 --> 00:03:40,480
security testing guide from our wasp

88
00:03:40,480 --> 00:03:44,840
that gives you greater details

89
00:03:48,330 --> 00:03:51,529
[Music]

90
00:03:53,120 --> 00:03:55,439
and um i think

91
00:03:55,439 --> 00:03:57,840
it's a good reading to you know dive

92
00:03:57,840 --> 00:03:59,599
into the topic

93
00:03:59,599 --> 00:04:02,080
so how does it work

94
00:04:02,080 --> 00:04:03,439
for example

95
00:04:03,439 --> 00:04:05,200
we have a

96
00:04:05,200 --> 00:04:06,480
point in

97
00:04:06,480 --> 00:04:08,560
my s v s

98
00:04:08,560 --> 00:04:09,920
that says that you shouldn't have

99
00:04:09,920 --> 00:04:11,920
sensitive information in application

100
00:04:11,920 --> 00:04:13,040
logs

101
00:04:13,040 --> 00:04:17,519
and there is a link to ms g

102
00:04:18,560 --> 00:04:20,238
storage 3

103
00:04:20,238 --> 00:04:22,800
and you can see here a more detailed

104
00:04:22,800 --> 00:04:25,199
description and how to

105
00:04:25,199 --> 00:04:29,680
search for it using static analysis

106
00:04:29,680 --> 00:04:32,080
the points to look at are highlighted

107
00:04:32,080 --> 00:04:35,360
here and also a separate chapter for

108
00:04:35,360 --> 00:04:37,280
dynamic analysis

109
00:04:37,280 --> 00:04:39,440
how to confirm it and how to see it

110
00:04:39,440 --> 00:04:41,360
and an interesting excel spreadsheet

111
00:04:41,360 --> 00:04:43,600
with all these requirements enumerated

112
00:04:43,600 --> 00:04:46,160
and nice links on how to

113
00:04:46,160 --> 00:04:47,680
interconnect

114
00:04:47,680 --> 00:04:48,800
myself

115
00:04:48,800 --> 00:04:51,520
sv and um

116
00:04:51,520 --> 00:04:54,080
msdg

117
00:04:54,479 --> 00:04:56,240
and then

118
00:04:56,240 --> 00:04:57,680
you just

119
00:04:57,680 --> 00:05:00,479
use the coding pass no pass

120
00:05:00,479 --> 00:05:01,759
this is what we

121
00:05:01,759 --> 00:05:03,039
use

122
00:05:03,039 --> 00:05:06,240
when we increase coverage for our fast

123
00:05:06,240 --> 00:05:08,400
we were

124
00:05:08,400 --> 00:05:11,840
using these requirements

125
00:05:12,160 --> 00:05:14,240
when i

126
00:05:14,240 --> 00:05:16,960
say i mean we have source cost when they

127
00:05:16,960 --> 00:05:19,520
say that's it means we don't have a

128
00:05:19,520 --> 00:05:22,000
source course and we need to

129
00:05:22,000 --> 00:05:23,759
interact with it

130
00:05:23,759 --> 00:05:25,520
introduce payload and look at the

131
00:05:25,520 --> 00:05:27,919
reactions kind of trigger it

132
00:05:27,919 --> 00:05:30,720
and this is what we're going to use on

133
00:05:30,720 --> 00:05:31,919
all safe

134
00:05:31,919 --> 00:05:36,359
to train to do the training

135
00:05:46,600 --> 00:05:47,759
[Music]

136
00:05:47,759 --> 00:05:49,759
all kind of injection

137
00:05:49,759 --> 00:05:52,080
search

138
00:05:52,080 --> 00:05:53,120
is

139
00:05:53,120 --> 00:05:55,280
started by looking for

140
00:05:55,280 --> 00:05:57,199
the entry points

141
00:05:57,199 --> 00:05:59,759
and then you look at when it comes all

142
00:05:59,759 --> 00:06:01,440
the way to

143
00:06:01,440 --> 00:06:03,039
the interested with the context of

144
00:06:03,039 --> 00:06:05,520
interest we wait for the data say get to

145
00:06:05,520 --> 00:06:07,759
the request to the database in case of

146
00:06:07,759 --> 00:06:10,080
sql injection talking of mobile

147
00:06:10,080 --> 00:06:12,560
application

148
00:06:12,560 --> 00:06:15,199
safety we split it into two three parts

149
00:06:15,199 --> 00:06:18,000
we'll look at

150
00:06:18,479 --> 00:06:21,600
the server part and when we speak of sql

151
00:06:21,600 --> 00:06:23,680
injections

152
00:06:23,680 --> 00:06:27,680
uh we associate it with server parts

153
00:06:27,680 --> 00:06:30,240
so on to

154
00:06:30,240 --> 00:06:31,360
what's

155
00:06:31,360 --> 00:06:35,639
of interest to mobile applications

156
00:06:37,360 --> 00:06:40,560
bad practice is to store

157
00:06:40,560 --> 00:06:42,960
sensitive data in the database of a

158
00:06:42,960 --> 00:06:44,160
local

159
00:06:44,160 --> 00:06:47,160
device

160
00:07:01,759 --> 00:07:03,599
and this is kind of

161
00:07:03,599 --> 00:07:05,840
an additional information that could be

162
00:07:05,840 --> 00:07:07,919
used for a different

163
00:07:07,919 --> 00:07:10,880
attack so this is part of code

164
00:07:10,880 --> 00:07:12,880
i'll say if everything is easy

165
00:07:12,880 --> 00:07:15,440
we're only interested in entry point and

166
00:07:15,440 --> 00:07:17,199
execution point

167
00:07:17,199 --> 00:07:19,919
entry point is

168
00:07:19,919 --> 00:07:24,319
the ui of the mobile application

169
00:07:24,319 --> 00:07:26,319
and also data from

170
00:07:26,319 --> 00:07:28,319
the file system

171
00:07:28,319 --> 00:07:30,560
sent through deep links etc

172
00:07:30,560 --> 00:07:33,919
specific for ui

173
00:07:34,800 --> 00:07:36,400
and then

174
00:07:36,400 --> 00:07:39,360
username gets into the request and is

175
00:07:39,360 --> 00:07:43,000
sent to the database

176
00:07:45,120 --> 00:07:48,319
all this process is automated

177
00:07:48,319 --> 00:07:51,599
by taint analysis it's done manually

178
00:07:51,599 --> 00:07:53,280
it's rather difficult

179
00:07:53,280 --> 00:07:56,560
especially if it's obfuscated a code and

180
00:07:56,560 --> 00:08:00,560
if methods and classes are single letter

181
00:08:00,560 --> 00:08:01,520
ones

182
00:08:01,520 --> 00:08:04,479
so taint analysis

183
00:08:05,520 --> 00:08:09,599
taint analysis is what helps here

184
00:08:09,599 --> 00:08:10,840
this is how it

185
00:08:10,840 --> 00:08:14,960
looks in reality

186
00:08:19,520 --> 00:08:23,199
so we have various challenges

187
00:08:23,199 --> 00:08:23,919
a

188
00:08:23,919 --> 00:08:26,080
data entry point is pretty obvious

189
00:08:26,080 --> 00:08:27,919
because you can see it here sql

190
00:08:27,919 --> 00:08:29,120
injection

191
00:08:29,120 --> 00:08:31,520
so we'll look

192
00:08:31,520 --> 00:08:34,000
using various test data nothing

193
00:08:34,000 --> 00:08:38,919
interesting nothing exciting here

194
00:08:42,880 --> 00:08:44,480
there are entry

195
00:08:44,480 --> 00:08:46,880
fields here

196
00:08:46,880 --> 00:08:48,399
we introduce

197
00:08:48,399 --> 00:08:51,120
an inverted corner and the application

198
00:08:51,120 --> 00:08:53,440
crashes which means that there is a

199
00:08:53,440 --> 00:08:55,040
problem here

200
00:08:55,040 --> 00:08:57,839
after just

201
00:08:58,000 --> 00:09:00,720
googling what sql injection is and

202
00:09:00,720 --> 00:09:02,959
copying what it is

203
00:09:02,959 --> 00:09:05,120
into here we can see that

204
00:09:05,120 --> 00:09:07,519
our exploit does work

205
00:09:07,519 --> 00:09:09,519
and

206
00:09:09,519 --> 00:09:13,600
we can still what we can see

207
00:09:16,640 --> 00:09:21,399
that the challenge has been passed

208
00:09:22,560 --> 00:09:24,640
and actually this is

209
00:09:24,640 --> 00:09:27,360
made obvious that critical

210
00:09:27,360 --> 00:09:29,360
critical data should not be

211
00:09:29,360 --> 00:09:30,959
stored in a database there are other

212
00:09:30,959 --> 00:09:34,920
mechanisms to do that

213
00:09:35,870 --> 00:09:38,999
[Music]

214
00:09:45,279 --> 00:09:48,640
and in 6.2

215
00:09:48,640 --> 00:09:50,959
it says that all data should be

216
00:09:50,959 --> 00:09:52,880
validated and it's not

217
00:09:52,880 --> 00:09:53,920
um

218
00:09:53,920 --> 00:09:55,200
it's not

219
00:09:55,200 --> 00:09:56,720
true

220
00:09:56,720 --> 00:09:59,040
then arbitrary code execution we're

221
00:09:59,040 --> 00:10:01,360
going to talk to about it in the context

222
00:10:01,360 --> 00:10:04,880
of mobile applications so it's

223
00:10:04,880 --> 00:10:07,040
something that we sometimes see in

224
00:10:07,040 --> 00:10:09,360
mobile applications because

225
00:10:09,360 --> 00:10:13,040
in mobile applications developers

226
00:10:13,040 --> 00:10:15,279
extend through plugins if we have a

227
00:10:15,279 --> 00:10:18,480
plug-in modular architecture and if it's

228
00:10:18,480 --> 00:10:21,760
an ecosystem of applications from one

229
00:10:21,760 --> 00:10:23,200
trusted

230
00:10:23,200 --> 00:10:25,279
vendor you don't have to realize all the

231
00:10:25,279 --> 00:10:28,399
functions in one application and realize

232
00:10:28,399 --> 00:10:33,000
it in various applications and

233
00:10:34,000 --> 00:10:36,959
this can be used in android and it could

234
00:10:36,959 --> 00:10:40,320
lead to vulnerability if you don't check

235
00:10:40,320 --> 00:10:43,120
everything right

236
00:10:45,200 --> 00:10:48,240
so this is how it looks in code and

237
00:10:48,240 --> 00:10:50,720
we're interested in this very part

238
00:10:50,720 --> 00:10:53,519
just to give you brief information first

239
00:10:53,519 --> 00:10:56,480
we use package manager to check what

240
00:10:56,480 --> 00:10:59,600
other applications

241
00:11:01,440 --> 00:11:02,959
on the user side

242
00:11:02,959 --> 00:11:05,600
we check all the packages and then a

243
00:11:05,600 --> 00:11:09,120
load class and get method

244
00:11:09,120 --> 00:11:10,959
that expects that in the second

245
00:11:10,959 --> 00:11:14,640
application there is a class loader of

246
00:11:14,640 --> 00:11:17,200
realized infosec advantages

247
00:11:17,200 --> 00:11:20,079
and load plugin in it so if you realize

248
00:11:20,079 --> 00:11:22,320
that

249
00:11:22,320 --> 00:11:24,800
if the adversary realizes that then the

250
00:11:24,800 --> 00:11:25,920
check for

251
00:11:25,920 --> 00:11:27,040
the

252
00:11:27,040 --> 00:11:31,120
prefix beginning you can see here right

253
00:11:31,120 --> 00:11:34,480
then all the trusted applications should

254
00:11:34,480 --> 00:11:36,480
start with this prefix and the developer

255
00:11:36,480 --> 00:11:37,839
thinks it's enough

256
00:11:37,839 --> 00:11:39,440
well it's not

257
00:11:39,440 --> 00:11:42,399
the secure version is this

258
00:11:42,399 --> 00:11:45,360
you can see this if on the screen

259
00:11:45,360 --> 00:11:47,040
but you really have to have an

260
00:11:47,040 --> 00:11:48,160
additional

261
00:11:48,160 --> 00:11:53,240
step of checking for signature

262
00:11:58,050 --> 00:12:01,120
[Music]

263
00:12:01,760 --> 00:12:04,160
so we can see here actions with class

264
00:12:04,160 --> 00:12:06,639
loader that expects us to see the

265
00:12:06,639 --> 00:12:11,320
application and load plugin method

266
00:12:11,519 --> 00:12:13,680
so now we

267
00:12:13,680 --> 00:12:16,959
have uid of our main application and the

268
00:12:16,959 --> 00:12:20,160
adversaries application

269
00:12:21,600 --> 00:12:25,839
and this is how this exploit works

270
00:12:30,240 --> 00:12:32,160
let's suppose we haven't seen anything

271
00:12:32,160 --> 00:12:36,160
that tatiana demonstrated we only have a

272
00:12:36,160 --> 00:12:39,839
um the apk file

273
00:12:39,839 --> 00:12:41,760
which has to use the

274
00:12:41,760 --> 00:12:44,880
utility to unpack

275
00:12:45,920 --> 00:12:48,880
the binary compressed applications

276
00:12:48,880 --> 00:12:50,959
and disassemble the code

277
00:12:50,959 --> 00:12:53,839
next thing would we do is look at the

278
00:12:53,839 --> 00:12:55,839
files

279
00:12:55,839 --> 00:12:58,639
we would look for certain

280
00:12:58,639 --> 00:13:01,360
uh constructs and we'll see a smiley

281
00:13:01,360 --> 00:13:03,839
instance

282
00:13:04,959 --> 00:13:06,959
it's for virtual for double virtual

283
00:13:06,959 --> 00:13:08,079
machine

284
00:13:08,079 --> 00:13:10,880
then we reconvert it into the view that

285
00:13:10,880 --> 00:13:12,800
is more understandable to

286
00:13:12,800 --> 00:13:13,839
those who

287
00:13:13,839 --> 00:13:15,920
work with this format for the first time

288
00:13:15,920 --> 00:13:17,120
and then

289
00:13:17,120 --> 00:13:18,800
we uh

290
00:13:18,800 --> 00:13:20,800
launch proof of concept and now we can

291
00:13:20,800 --> 00:13:23,599
launch the video

292
00:13:26,560 --> 00:13:27,839
right

293
00:13:27,839 --> 00:13:28,880
so

294
00:13:28,880 --> 00:13:30,959
apk2d

295
00:13:30,959 --> 00:13:34,000
parameter allows us to unpack our all

296
00:13:34,000 --> 00:13:36,880
safe application

297
00:13:36,880 --> 00:13:39,200
then

298
00:13:43,040 --> 00:13:44,000
we

299
00:13:44,000 --> 00:13:46,639
open the file

300
00:13:46,639 --> 00:13:49,360
in this environment here

301
00:13:49,360 --> 00:13:51,680
then

302
00:13:52,000 --> 00:13:53,839
we look at various files like android

303
00:13:53,839 --> 00:13:56,240
manifest we'll look at android manifest

304
00:13:56,240 --> 00:13:58,800
we'll look at the

305
00:13:58,800 --> 00:14:00,079
folders

306
00:14:00,079 --> 00:14:03,479
folder three

307
00:14:05,760 --> 00:14:08,320
low classes of interest for us for this

308
00:14:08,320 --> 00:14:11,920
kind of vulnerability

309
00:14:12,639 --> 00:14:17,839
and in arbitrary code execution file

310
00:14:18,000 --> 00:14:19,920
and it's very straightforward because

311
00:14:19,920 --> 00:14:22,160
it's a training environment

312
00:14:22,160 --> 00:14:26,399
we can see a smiley format

313
00:14:27,440 --> 00:14:29,360
which is not very clear for those who

314
00:14:29,360 --> 00:14:32,880
see it for the first time so using javax

315
00:14:32,880 --> 00:14:34,959
utility we um

316
00:14:34,959 --> 00:14:36,880
transform it into java format which is

317
00:14:36,880 --> 00:14:38,079
more readable

318
00:14:38,079 --> 00:14:39,600
it's going to be a little bit different

319
00:14:39,600 --> 00:14:42,839
from the initial from from the source

320
00:14:42,839 --> 00:14:46,240
code but

321
00:14:55,440 --> 00:14:59,279
so we open arbitrary code execution and

322
00:14:59,279 --> 00:15:01,440
then through d parameter

323
00:15:01,440 --> 00:15:03,920
we look at where the

324
00:15:03,920 --> 00:15:05,360
file should be

325
00:15:05,360 --> 00:15:08,560
and here we can see

326
00:15:10,839 --> 00:15:12,399
that

327
00:15:12,399 --> 00:15:13,440
we have

328
00:15:13,440 --> 00:15:17,120
check start with the code

329
00:15:17,120 --> 00:15:21,320
the package name has been checked

330
00:15:29,839 --> 00:15:32,639
and then we call the correct

331
00:15:32,639 --> 00:15:35,920
login and that makes it clear which

332
00:15:35,920 --> 00:15:39,040
exploits to write

333
00:15:39,600 --> 00:15:42,399
what we do next

334
00:15:44,079 --> 00:15:46,399
we use this exploit

335
00:15:46,399 --> 00:15:49,040
we didn't we didn't record the process

336
00:15:49,040 --> 00:15:50,800
of writing the explode but now we put

337
00:15:50,800 --> 00:15:52,480
the exploit on the

338
00:15:52,480 --> 00:15:55,040
mobile application using

339
00:15:55,040 --> 00:15:57,759
android debugging bridge utility

340
00:15:57,759 --> 00:15:58,720
um

341
00:15:58,720 --> 00:16:00,240
that allows to interact with the

342
00:16:00,240 --> 00:16:03,440
application and the device

343
00:16:04,000 --> 00:16:07,800
so we put it here

344
00:16:09,440 --> 00:16:12,639
it's called up debug

345
00:16:13,519 --> 00:16:14,480
pc

346
00:16:14,480 --> 00:16:18,680
and this is how it looks on the screen

347
00:16:30,639 --> 00:16:33,519
and this is how it looks and

348
00:16:33,519 --> 00:16:36,519
uh

349
00:16:39,120 --> 00:16:40,399
this is

350
00:16:40,399 --> 00:16:43,680
this is how we can uh we can make sure

351
00:16:43,680 --> 00:16:44,959
that it's done

352
00:16:44,959 --> 00:16:48,480
it's done through adb shell

353
00:16:48,480 --> 00:16:50,880
command this is user id for all safe

354
00:16:50,880 --> 00:16:52,320
which is

355
00:16:52,320 --> 00:16:54,480
1080

356
00:16:54,480 --> 00:16:56,720
is ready for

357
00:16:56,720 --> 00:16:59,759
our application

358
00:17:01,040 --> 00:17:02,880
as this one

359
00:17:02,880 --> 00:17:06,160
then we'll launch all safe

360
00:17:06,160 --> 00:17:09,360
and the code

361
00:17:12,640 --> 00:17:16,039
should be executed

362
00:17:21,839 --> 00:17:24,640
and you can see it highlighted and this

363
00:17:24,640 --> 00:17:26,319
function

364
00:17:26,319 --> 00:17:30,160
was realized in our application apk

365
00:17:30,160 --> 00:17:31,679
debug

366
00:17:31,679 --> 00:17:34,080
that will be all right and we can keep

367
00:17:34,080 --> 00:17:35,760
going

368
00:17:35,760 --> 00:17:36,640
right

369
00:17:36,640 --> 00:17:39,360
on to the next stage

370
00:17:39,360 --> 00:17:42,640
so how to automate search for this

371
00:17:42,640 --> 00:17:44,400
vulnerabilities

372
00:17:44,400 --> 00:17:47,679
look for the methods that are being used

373
00:17:47,679 --> 00:17:49,840
to

374
00:17:51,919 --> 00:17:55,600
invoke external functions

375
00:17:55,600 --> 00:17:58,160
search for correspondent

376
00:17:58,160 --> 00:18:01,039
vulnerable methods

377
00:18:01,039 --> 00:18:03,280
and check

378
00:18:03,280 --> 00:18:05,679
if it is uh just

379
00:18:05,679 --> 00:18:07,840
if the developer just resorts to prefix

380
00:18:07,840 --> 00:18:10,640
checks rather than a more comprehensive

381
00:18:10,640 --> 00:18:12,880
check

382
00:18:13,520 --> 00:18:16,000
taint analysis is something that allows

383
00:18:16,000 --> 00:18:20,080
us here to avoid false positives here we

384
00:18:20,080 --> 00:18:21,120
flag

385
00:18:21,120 --> 00:18:24,480
signature check and rather than

386
00:18:24,480 --> 00:18:25,760
checking

387
00:18:25,760 --> 00:18:28,400
method in invocation

388
00:18:28,400 --> 00:18:29,760
we check

389
00:18:29,760 --> 00:18:32,960
mass identification plus

390
00:18:32,960 --> 00:18:35,280
the absence of signature check

391
00:18:35,280 --> 00:18:37,280
this way we decrease the number of false

392
00:18:37,280 --> 00:18:38,960
positives

393
00:18:38,960 --> 00:18:41,760
and now a classical vulnerability for

394
00:18:41,760 --> 00:18:43,039
android

395
00:18:43,039 --> 00:18:46,160
insecure webcast receive

396
00:18:46,160 --> 00:18:48,000
for those of you who don't know what it

397
00:18:48,000 --> 00:18:49,440
is

398
00:18:49,440 --> 00:18:51,840
let me try and explain say we have a

399
00:18:51,840 --> 00:18:53,440
mobile application

400
00:18:53,440 --> 00:18:55,520
and we need to interact

401
00:18:55,520 --> 00:18:56,799
with

402
00:18:56,799 --> 00:18:58,320
other applications that are already

403
00:18:58,320 --> 00:19:00,320
there in uh

404
00:19:00,320 --> 00:19:02,160
in the

405
00:19:02,160 --> 00:19:05,760
gadget say we need to

406
00:19:05,760 --> 00:19:07,760
follow the charge of the smartphone or

407
00:19:07,760 --> 00:19:10,000
we need to interact within

408
00:19:10,000 --> 00:19:12,320
i mean several applications within

409
00:19:12,320 --> 00:19:14,880
ecosystem need to interact

410
00:19:14,880 --> 00:19:18,960
it's done by broadcast receivers

411
00:19:19,679 --> 00:19:23,679
it has to be realized on the device

412
00:19:30,400 --> 00:19:31,679
it's a

413
00:19:31,679 --> 00:19:36,000
data layout is an intent and it's also

414
00:19:36,000 --> 00:19:37,440
some kind of

415
00:19:37,440 --> 00:19:39,679
important information

416
00:19:39,679 --> 00:19:42,400
intent is action view that forces you to

417
00:19:42,400 --> 00:19:45,280
open the browser and the data

418
00:19:45,280 --> 00:19:47,919
the available information is a link

419
00:19:47,919 --> 00:19:51,679
say if a browser processes action view

420
00:19:51,679 --> 00:19:52,640
was

421
00:19:52,640 --> 00:19:55,200
data which is link it would open it in a

422
00:19:55,200 --> 00:19:56,400
browser

423
00:19:56,400 --> 00:19:59,520
so this is the way

424
00:20:00,080 --> 00:20:02,960
to have interaction so how this is done

425
00:20:02,960 --> 00:20:05,039
in code

426
00:20:05,039 --> 00:20:06,640
it can be done

427
00:20:06,640 --> 00:20:08,880
through android manifest

428
00:20:08,880 --> 00:20:11,520
statically

429
00:20:11,760 --> 00:20:13,919
there you have all the settings there

430
00:20:13,919 --> 00:20:16,240
you identify all the receivers

431
00:20:16,240 --> 00:20:18,240
and here you can just identify attack

432
00:20:18,240 --> 00:20:20,080
receiver

433
00:20:20,080 --> 00:20:23,760
and the information coming from intent

434
00:20:23,760 --> 00:20:26,240
will be

435
00:20:28,960 --> 00:20:30,080
will be

436
00:20:30,080 --> 00:20:32,480
processed by your broadcast receiver

437
00:20:32,480 --> 00:20:35,280
class and we expect to see boot

438
00:20:35,280 --> 00:20:38,720
completed what is insecure here

439
00:20:38,720 --> 00:20:40,400
you have

440
00:20:40,400 --> 00:20:44,000
this attribute exported true

441
00:20:44,000 --> 00:20:47,280
which means that the adversary may also

442
00:20:47,280 --> 00:20:49,360
go ahead and use this function if even

443
00:20:49,360 --> 00:20:50,799
if we get

444
00:20:50,799 --> 00:20:53,520
an intent we need to process it and this

445
00:20:53,520 --> 00:20:55,840
is done by on receive

446
00:20:55,840 --> 00:20:59,360
you have intent on

447
00:21:00,000 --> 00:21:02,640
you have entered here

448
00:21:02,640 --> 00:21:04,960
and this is how it works so let's have a

449
00:21:04,960 --> 00:21:08,880
look how it works in all safe

450
00:21:10,320 --> 00:21:12,480
in android manifest we have tech

451
00:21:12,480 --> 00:21:15,440
receiver installed and this is the class

452
00:21:15,440 --> 00:21:18,960
to process it it's called node receiver

453
00:21:18,960 --> 00:21:21,760
the action that we expect is process

454
00:21:21,760 --> 00:21:22,640
node

455
00:21:22,640 --> 00:21:23,760
and

456
00:21:23,760 --> 00:21:26,159
it's exported through

457
00:21:26,159 --> 00:21:28,480
but that is to say we can send

458
00:21:28,480 --> 00:21:30,000
something over to it and it would

459
00:21:30,000 --> 00:21:33,039
process so how it works in source code

460
00:21:33,039 --> 00:21:36,320
on receive method

461
00:21:38,640 --> 00:21:41,520
text takes in the intent and takes out

462
00:21:41,520 --> 00:21:43,520
the data

463
00:21:43,520 --> 00:21:45,840
so

464
00:21:46,240 --> 00:21:47,919
we're expected to get

465
00:21:47,919 --> 00:21:49,440
a server name

466
00:21:49,440 --> 00:21:53,080
note et cetera

467
00:22:04,720 --> 00:22:06,799
if it's an exportable

468
00:22:06,799 --> 00:22:09,280
receiver then not just the trusted

469
00:22:09,280 --> 00:22:11,440
application but also the adversaries

470
00:22:11,440 --> 00:22:12,799
application would send to us the

471
00:22:12,799 --> 00:22:14,720
broadcast that we're going to

472
00:22:14,720 --> 00:22:17,280
interact with if we don't want to

473
00:22:17,280 --> 00:22:19,200
interact with somebody external when we

474
00:22:19,200 --> 00:22:21,840
want to just limit ourselves to

475
00:22:21,840 --> 00:22:24,000
a particular application then we'll put

476
00:22:24,000 --> 00:22:27,360
export it into false and nobody would

477
00:22:27,360 --> 00:22:29,360
interact with us externally but if it is

478
00:22:29,360 --> 00:22:31,120
an ecosystem

479
00:22:31,120 --> 00:22:33,360
then we have to have exported true and

480
00:22:33,360 --> 00:22:36,960
then we add a permission that says that

481
00:22:36,960 --> 00:22:40,159
it has to be signed with our key that is

482
00:22:40,159 --> 00:22:41,200
that it is

483
00:22:41,200 --> 00:22:43,360
trusted so we're going to demonstrate

484
00:22:43,360 --> 00:22:46,000
how it works

485
00:22:46,640 --> 00:22:48,240
so

486
00:22:48,240 --> 00:22:51,200
we are going to

487
00:22:51,200 --> 00:22:54,240
act similarly to what you saw earlier we

488
00:22:54,240 --> 00:22:56,240
are going to unpack

489
00:22:56,240 --> 00:22:57,360
and then

490
00:22:57,360 --> 00:22:59,520
look inside

491
00:22:59,520 --> 00:23:00,559
and we'll

492
00:23:00,559 --> 00:23:02,960
look for certain

493
00:23:02,960 --> 00:23:05,600
constructs

494
00:23:06,320 --> 00:23:10,480
i'd like to mention in advance that

495
00:23:10,480 --> 00:23:14,000
you could have used jdx uh gui utility

496
00:23:14,000 --> 00:23:16,159
that allows you

497
00:23:16,159 --> 00:23:16,880
uh

498
00:23:16,880 --> 00:23:20,240
to open uh pks through java but

499
00:23:20,240 --> 00:23:22,880
sometimes

500
00:23:22,880 --> 00:23:25,520
it glitches

501
00:23:28,640 --> 00:23:30,559
and sometimes in smiley it's it's more

502
00:23:30,559 --> 00:23:34,200
convenient to work

503
00:23:44,159 --> 00:23:45,200
so

504
00:23:45,200 --> 00:23:47,440
using apk tool d

505
00:23:47,440 --> 00:23:50,799
we unpack it and we open it here in the

506
00:23:50,799 --> 00:23:53,679
developers environment we look inside we

507
00:23:53,679 --> 00:23:56,320
look at android manifest file that is of

508
00:23:56,320 --> 00:23:58,240
interest to us right now and we do the

509
00:23:58,240 --> 00:24:00,960
search we see the line

510
00:24:00,960 --> 00:24:03,279
receive android exported through

511
00:24:03,279 --> 00:24:05,600
no signature

512
00:24:05,600 --> 00:24:06,720
and

513
00:24:06,720 --> 00:24:09,600
now we're interested

514
00:24:09,600 --> 00:24:13,360
to see the implementation node receiver

515
00:24:13,360 --> 00:24:16,159
here it is node receiver

516
00:24:16,159 --> 00:24:19,799
yes this one

517
00:24:21,679 --> 00:24:22,960
this is how it

518
00:24:22,960 --> 00:24:25,360
looks in this smiley

519
00:24:25,360 --> 00:24:28,320
now we open

520
00:24:29,279 --> 00:24:30,799
uh convert it

521
00:24:30,799 --> 00:24:34,639
into java using jdx

522
00:24:35,919 --> 00:24:37,360
all you need is

523
00:24:37,360 --> 00:24:38,799
put in

524
00:24:38,799 --> 00:24:40,000
the

525
00:24:40,000 --> 00:24:41,600
file name

526
00:24:41,600 --> 00:24:44,000
minus

527
00:24:44,240 --> 00:24:46,880
t and the place where we want to

528
00:24:46,880 --> 00:24:49,440
unpack it

529
00:24:57,600 --> 00:25:00,559
no not minus t minus d

530
00:25:00,559 --> 00:25:02,000
now it's working

531
00:25:02,000 --> 00:25:05,000
right

532
00:25:14,640 --> 00:25:17,279
um so here you can see note receiver

533
00:25:17,279 --> 00:25:19,600
realized

534
00:25:19,600 --> 00:25:22,480
uh we can see that we get intent

535
00:25:22,480 --> 00:25:26,080
and we get a string objects with uh

536
00:25:26,080 --> 00:25:28,559
several node identification message out

537
00:25:28,559 --> 00:25:33,520
of it then we generate a http uh

538
00:25:33,520 --> 00:25:34,480
call

539
00:25:34,480 --> 00:25:36,720
and then to exploit it

540
00:25:36,720 --> 00:25:39,679
we open webcam

541
00:25:39,679 --> 00:25:40,880
and

542
00:25:40,880 --> 00:25:43,840
we also open

543
00:25:44,640 --> 00:25:47,200
a debugging bridge

544
00:25:47,200 --> 00:25:51,200
and we'll send the intent

545
00:25:54,880 --> 00:25:58,000
with server and notification message

546
00:25:58,000 --> 00:26:01,120
so that we have

547
00:26:01,440 --> 00:26:04,000
so that note receiver

548
00:26:04,000 --> 00:26:07,799
processes it right

549
00:26:13,600 --> 00:26:18,000
and this is the apk data that we get

550
00:26:18,480 --> 00:26:20,880
yeah i think that would that would be it

551
00:26:20,880 --> 00:26:23,880
right

552
00:26:27,520 --> 00:26:29,840
right let me

553
00:26:29,840 --> 00:26:32,559
conclude on how to automate the search

554
00:26:32,559 --> 00:26:33,800
for this kind of

555
00:26:33,800 --> 00:26:35,600
[Music]

556
00:26:35,600 --> 00:26:38,600
vulnerabilities

557
00:26:40,320 --> 00:26:41,279
i think

558
00:26:41,279 --> 00:26:45,279
the misv and all that is a good thing to

559
00:26:45,279 --> 00:26:48,880
get into the issue and

560
00:26:49,200 --> 00:26:50,840
the descriptions are

561
00:26:50,840 --> 00:26:53,760
nice but it's not enough

562
00:26:53,760 --> 00:26:55,520
and then like

563
00:26:55,520 --> 00:26:59,760
mobile they are updated more regularly

564
00:27:05,120 --> 00:27:07,279
these are the links on how a taint

565
00:27:07,279 --> 00:27:09,840
analysis done by us and how we analyze

566
00:27:09,840 --> 00:27:13,440
apk and bytecode

567
00:27:13,440 --> 00:27:15,760
so feel free and i'd like to conclude by

568
00:27:15,760 --> 00:27:17,840
saying that

569
00:27:17,840 --> 00:27:20,960
any manual analysis can be automated if

570
00:27:20,960 --> 00:27:25,120
it has to do with some basics

571
00:27:25,120 --> 00:27:26,960
if it has to do with basics you don't

572
00:27:26,960 --> 00:27:29,440
want to do it manually every time you

573
00:27:29,440 --> 00:27:31,840
probably want to create your own

574
00:27:31,840 --> 00:27:33,279
knowledge base

575
00:27:33,279 --> 00:27:35,600
in fact you need to parse android

576
00:27:35,600 --> 00:27:39,840
manifest xml and xfast will be

577
00:27:39,840 --> 00:27:41,679
helpful here if you want a taint

578
00:27:41,679 --> 00:27:43,679
analysis of your own

579
00:27:43,679 --> 00:27:45,760
then

580
00:27:45,760 --> 00:27:47,279
we are going to cover all this

581
00:27:47,279 --> 00:27:49,120
vulnerabilities and injections reality

582
00:27:49,120 --> 00:27:51,600
vulnerabilities but taint analysis is

583
00:27:51,600 --> 00:27:53,279
not limited to

584
00:27:53,279 --> 00:27:55,919
injection vulnerabilities it can we can

585
00:27:55,919 --> 00:27:58,240
use fuzzers to identify other kinds of

586
00:27:58,240 --> 00:28:00,799
vulnerabilities hopefully we were at

587
00:28:00,799 --> 00:28:03,919
least somewhat um

588
00:28:03,919 --> 00:28:04,960
useful

589
00:28:04,960 --> 00:28:06,720
our presentation was at least somewhat

590
00:28:06,720 --> 00:28:08,559
useful to you and we're happy to take

591
00:28:08,559 --> 00:28:11,279
your questions we actually have

592
00:28:11,279 --> 00:28:14,640
a couple of presents from ross telecom

593
00:28:14,640 --> 00:28:17,679
uh that we're going to give you

594
00:28:17,679 --> 00:28:18,399
for

595
00:28:18,399 --> 00:28:21,360
really good questions

596
00:28:27,039 --> 00:28:30,159
thank you very much

597
00:28:30,159 --> 00:28:31,440
why

598
00:28:31,440 --> 00:28:33,760
uh why depict the vulnerabilities that

599
00:28:33,760 --> 00:28:35,919
you discussed in your presentation and

600
00:28:35,919 --> 00:28:37,679
then i'll follow up it with the other

601
00:28:37,679 --> 00:28:41,600
question so why these vulnerabilities

602
00:28:41,600 --> 00:28:43,760
we couldn't cover all vulnerabilities we

603
00:28:43,760 --> 00:28:47,760
decided to to look at the client side

604
00:28:47,760 --> 00:28:50,240
the approach to a mobile application

605
00:28:50,240 --> 00:28:52,320
should be split into three parts

606
00:28:52,320 --> 00:28:55,679
and client side is one part

607
00:28:55,679 --> 00:28:57,039
and the rest

608
00:28:57,039 --> 00:29:00,399
have to do with a server server side

609
00:29:00,399 --> 00:29:03,279
which is difficult to find by static

610
00:29:03,279 --> 00:29:04,559
by sas

611
00:29:04,559 --> 00:29:06,720
so

612
00:29:07,120 --> 00:29:09,919
that's why we looked at

613
00:29:09,919 --> 00:29:12,399
something that can be found and the

614
00:29:12,399 --> 00:29:14,799
demos with park are self written right

615
00:29:14,799 --> 00:29:17,600
they're just examples

616
00:29:17,600 --> 00:29:20,840
if so

617
00:29:28,240 --> 00:29:30,799
do you think it's applicable to real

618
00:29:30,799 --> 00:29:33,679
life situation

619
00:29:35,279 --> 00:29:39,399
well generally speaking

620
00:29:42,080 --> 00:29:43,679
um

621
00:29:43,679 --> 00:29:46,720
our task was to demonstrate

622
00:29:46,720 --> 00:29:49,919
that yes indeed this is a vulnerability

623
00:29:49,919 --> 00:29:51,120
without

624
00:29:51,120 --> 00:29:55,158
going in depth

625
00:30:07,039 --> 00:30:09,840
so we

626
00:30:10,000 --> 00:30:13,039
did it on our own

627
00:30:13,440 --> 00:30:15,520
for the second kind of vulnerability

628
00:30:15,520 --> 00:30:17,679
arbitrary code execution

629
00:30:17,679 --> 00:30:20,559
this can be realized

630
00:30:20,559 --> 00:30:23,840
it's pretty universal

631
00:30:26,960 --> 00:30:30,320
importantly when all safe

632
00:30:30,960 --> 00:30:33,120
downloads model it's important to have

633
00:30:33,120 --> 00:30:36,279
it errorless

634
00:30:38,880 --> 00:30:43,039
why not um already made exploits

635
00:30:43,039 --> 00:30:46,559
because all these exploits

636
00:30:47,919 --> 00:30:49,840
i have to

637
00:30:49,840 --> 00:30:51,760
follow all safe logic

638
00:30:51,760 --> 00:30:56,080
not to have additional exceptions

639
00:30:57,919 --> 00:30:59,679
thank you for this presentation very

640
00:30:59,679 --> 00:31:03,039
interesting i have

641
00:31:03,360 --> 00:31:05,440
several questions first has to do with

642
00:31:05,440 --> 00:31:07,679
uh code obfuscation

643
00:31:07,679 --> 00:31:09,679
do you think it is helpful to the code

644
00:31:09,679 --> 00:31:11,760
obfuscation

645
00:31:11,760 --> 00:31:14,080
those who are interested in application

646
00:31:14,080 --> 00:31:16,640
and smallie uh could be thus prevented

647
00:31:16,640 --> 00:31:19,279
from going around the application yes

648
00:31:19,279 --> 00:31:22,640
obfuscation is a good thing

649
00:31:22,799 --> 00:31:26,320
it's just that obfuscators keep

650
00:31:26,320 --> 00:31:29,360
developing and so do reverse engineers

651
00:31:29,360 --> 00:31:31,039
so obfuscation

652
00:31:31,039 --> 00:31:32,960
is just

653
00:31:32,960 --> 00:31:34,320
something that

654
00:31:34,320 --> 00:31:36,480
creates an additional hurdle entry

655
00:31:36,480 --> 00:31:38,640
hurdle

656
00:31:38,640 --> 00:31:41,360
there are certain uh sas that

657
00:31:41,360 --> 00:31:42,640
also

658
00:31:42,640 --> 00:31:45,679
help you to analyze byte codes and do

659
00:31:45,679 --> 00:31:47,840
binary analysis and

660
00:31:47,840 --> 00:31:50,080
analyze the

661
00:31:50,080 --> 00:31:54,480
the taint analysis and analyze the

662
00:31:55,600 --> 00:31:58,960
flow graph and it helps but it doesn't

663
00:31:58,960 --> 00:32:02,080
really safeguard you from

664
00:32:02,080 --> 00:32:05,200
the vulnerability

665
00:32:05,200 --> 00:32:07,440
and so there are ways to combat

666
00:32:07,440 --> 00:32:10,240
obfuscation anyway right okay thank you

667
00:32:10,240 --> 00:32:12,840
and uh how

668
00:32:12,840 --> 00:32:15,440
often do you have vulnerabilities in

669
00:32:15,440 --> 00:32:18,399
this text files i think it's the com the

670
00:32:18,399 --> 00:32:20,960
the composer java so some critical

671
00:32:20,960 --> 00:32:23,360
information can be contained there yes

672
00:32:23,360 --> 00:32:27,360
we have it and also load class

673
00:32:27,360 --> 00:32:30,640
and also dex loaded class same same

674
00:32:30,640 --> 00:32:32,080
um

675
00:32:32,080 --> 00:32:34,399
specific uh

676
00:32:34,399 --> 00:32:36,399
checking has to be in place

677
00:32:36,399 --> 00:32:39,600
if we get this code from

678
00:32:39,600 --> 00:32:41,679
the open environment we really need to

679
00:32:41,679 --> 00:32:44,320
think twice if we need to take functions

680
00:32:44,320 --> 00:32:46,880
from it in the latest android versions

681
00:32:46,880 --> 00:32:49,600
there is something

682
00:32:52,399 --> 00:32:55,440
so if you don't want to extend

683
00:32:55,440 --> 00:32:58,000
the application by ways of plugins you

684
00:32:58,000 --> 00:32:59,600
just download

685
00:32:59,600 --> 00:33:02,799
apk depending on the particular model

686
00:33:02,799 --> 00:33:07,080
that you're using thank you

687
00:33:20,880 --> 00:33:22,399
thank you for this presentation in the

688
00:33:22,399 --> 00:33:24,880
very beginning you mentioned

689
00:33:24,880 --> 00:33:25,840
that

690
00:33:25,840 --> 00:33:29,200
it is not wise to store

691
00:33:29,200 --> 00:33:31,519
uh sensitive data in the client side but

692
00:33:31,519 --> 00:33:34,480
what if you have to

693
00:33:36,880 --> 00:33:39,760
how to store it safely

694
00:33:39,760 --> 00:33:41,630
you have to cipher it then

695
00:33:41,630 --> 00:33:44,709
[Music]

696
00:33:44,720 --> 00:33:46,480
you have k-store

697
00:33:46,480 --> 00:33:49,720
for android

698
00:33:55,919 --> 00:33:56,720
so

699
00:33:56,720 --> 00:34:00,640
it's best for critical information to

700
00:34:00,640 --> 00:34:02,720
not be stored in client section but the

701
00:34:02,720 --> 00:34:05,679
client side but it is that if it has to

702
00:34:05,679 --> 00:34:07,440
then it has to be

703
00:34:07,440 --> 00:34:10,000
encrypted

704
00:34:16,170 --> 00:34:19,280
[Music]

705
00:34:19,280 --> 00:34:21,040
thank you for this presentation i have

706
00:34:21,040 --> 00:34:22,800
two questions

707
00:34:22,800 --> 00:34:24,000
have you

708
00:34:24,000 --> 00:34:26,480
tried at looking at fuzzing

709
00:34:26,480 --> 00:34:28,320
because in

710
00:34:28,320 --> 00:34:30,719
we have static applications that is easy

711
00:34:30,719 --> 00:34:32,320
to look

712
00:34:32,320 --> 00:34:33,440
um

713
00:34:33,440 --> 00:34:35,679
at and to analyze code

714
00:34:35,679 --> 00:34:37,760
it seems to be easy to find

715
00:34:37,760 --> 00:34:40,159
vulnerabilities in this way

716
00:34:40,159 --> 00:34:41,599
and you looked

717
00:34:41,599 --> 00:34:44,480
at offline applications right

718
00:34:44,480 --> 00:34:48,000
what if you have

719
00:34:48,000 --> 00:34:51,119
uh you have to go to web to the back end

720
00:34:51,119 --> 00:34:54,079
how to analyze

721
00:34:55,918 --> 00:34:58,400
how to how to analyze in this case thank

722
00:34:58,400 --> 00:35:00,400
you for this question so the first

723
00:35:00,400 --> 00:35:03,040
question is why not fuzzing right

724
00:35:03,040 --> 00:35:06,480
or rather do you think it's usable it is

725
00:35:06,480 --> 00:35:08,800
by all means if you have fails if you

726
00:35:08,800 --> 00:35:10,160
have forms

727
00:35:10,160 --> 00:35:13,680
there is a drowser utility

728
00:35:13,680 --> 00:35:15,680
uh that allows to substitute for

729
00:35:15,680 --> 00:35:17,599
broadcast receiver

730
00:35:17,599 --> 00:35:20,240
the one that i give him demonstrated

731
00:35:20,240 --> 00:35:21,440
manually

732
00:35:21,440 --> 00:35:22,880
it was out of context of our

733
00:35:22,880 --> 00:35:24,880
presentation though

734
00:35:24,880 --> 00:35:27,119
but anyway it can be used and the second

735
00:35:27,119 --> 00:35:29,839
question has to do with

736
00:35:29,839 --> 00:35:32,320
was about web interaction if there is a

737
00:35:32,320 --> 00:35:34,640
server

738
00:35:35,040 --> 00:35:36,640
well again you have to split it into

739
00:35:36,640 --> 00:35:38,320
several parts and we were looking at the

740
00:35:38,320 --> 00:35:40,000
client-side part without the interaction

741
00:35:40,000 --> 00:35:41,440
with the server but

742
00:35:41,440 --> 00:35:43,520
if you have to look at server

743
00:35:43,520 --> 00:35:44,400
interaction

744
00:35:44,400 --> 00:35:47,200
then in this case we have to look at the

745
00:35:47,200 --> 00:35:49,599
this code and what happens on that side

746
00:35:49,599 --> 00:35:52,320
and how uh requests and the

747
00:35:52,320 --> 00:35:54,160
requests are processed there and it's a

748
00:35:54,160 --> 00:35:56,960
totally different task right

749
00:35:56,960 --> 00:35:59,839
but it's

750
00:36:01,520 --> 00:36:02,880
but then

751
00:36:02,880 --> 00:36:06,720
uh isn't your server a black box for you

752
00:36:06,720 --> 00:36:09,720
well

753
00:36:12,000 --> 00:36:13,040
uh

754
00:36:13,040 --> 00:36:15,280
in mobile application

755
00:36:15,280 --> 00:36:17,280
it's uh white box because it can be

756
00:36:17,280 --> 00:36:19,839
decompiled

757
00:36:19,839 --> 00:36:21,839
if we are allowed to carry out this

758
00:36:21,839 --> 00:36:23,760
analysis then it's not a problem at all

759
00:36:23,760 --> 00:36:25,280
then it's not black box and it's not a

760
00:36:25,280 --> 00:36:27,839
problem at all

761
00:36:31,040 --> 00:36:34,160
i also have two questions first off you

762
00:36:34,160 --> 00:36:36,960
just looked at application and we you

763
00:36:36,960 --> 00:36:41,359
were using an emulator right to test it

764
00:36:41,359 --> 00:36:42,720
have you had any

765
00:36:42,720 --> 00:36:45,280
situations when you would miss something

766
00:36:45,280 --> 00:36:46,960
because of using the simulators and

767
00:36:46,960 --> 00:36:49,280
there are probably some emulators that

768
00:36:49,280 --> 00:36:50,960
are targeted

769
00:36:50,960 --> 00:36:53,440
to attack the security guys

770
00:36:53,440 --> 00:36:55,119
and you also mentioned that there are

771
00:36:55,119 --> 00:36:56,960
case stores

772
00:36:56,960 --> 00:36:59,680
for android

773
00:37:01,760 --> 00:37:04,640
are there any embedded crypto provided

774
00:37:04,640 --> 00:37:06,800
for androids and for ios

775
00:37:06,800 --> 00:37:08,480
right and what was the first question

776
00:37:08,480 --> 00:37:10,079
again

777
00:37:10,079 --> 00:37:13,200
sorry the first question

778
00:37:14,480 --> 00:37:16,240
yeah you mentioned that you launched

779
00:37:16,240 --> 00:37:18,320
yeah right okay so

780
00:37:18,320 --> 00:37:21,440
thank you um so in the context of this

781
00:37:21,440 --> 00:37:23,680
application we had to use android 8

782
00:37:23,680 --> 00:37:27,520
because we had http function

783
00:37:27,520 --> 00:37:28,480
that

784
00:37:28,480 --> 00:37:30,320
is not supported by default since

785
00:37:30,320 --> 00:37:32,400
version 8. there are some subtleties and

786
00:37:32,400 --> 00:37:34,160
you have to go with the application and

787
00:37:34,160 --> 00:37:36,079
what we want to test it on it really

788
00:37:36,079 --> 00:37:40,480
depends on situation and no no let me um

789
00:37:40,480 --> 00:37:42,640
let me clarify

790
00:37:42,640 --> 00:37:44,640
by default it's

791
00:37:44,640 --> 00:37:48,319
prohibition of sending

792
00:37:49,680 --> 00:37:53,040
right and the the second question was on

793
00:37:53,040 --> 00:37:55,200
caso right

794
00:37:55,200 --> 00:37:58,200
right

795
00:38:04,480 --> 00:38:08,640
you mean the encryption algorithms

796
00:38:09,359 --> 00:38:13,119
yes yes uh it's also one of the android

797
00:38:13,119 --> 00:38:14,640
components

798
00:38:14,640 --> 00:38:16,320
it allows us to interact with the data

799
00:38:16,320 --> 00:38:18,800
that is already stored here

800
00:38:18,800 --> 00:38:21,040
and if you need to store something

801
00:38:21,040 --> 00:38:24,160
locally on the device this is the

802
00:38:24,160 --> 00:38:26,240
approach that we need to use but

803
00:38:26,240 --> 00:38:27,839
otherwise you should

804
00:38:27,839 --> 00:38:31,400
send it to server

805
00:38:40,240 --> 00:38:41,839
unfortunately the question is out of

806
00:38:41,839 --> 00:38:44,839
mike

807
00:38:52,160 --> 00:38:54,640
i mean grasshopper i don't think it's

808
00:38:54,640 --> 00:38:56,320
realized in

809
00:38:56,320 --> 00:38:59,320
android

810
00:39:06,800 --> 00:39:08,560
no we

811
00:39:08,560 --> 00:39:10,880
haven't checked it for cryptography

812
00:39:10,880 --> 00:39:13,200
good day thank you for this presentation

813
00:39:13,200 --> 00:39:15,680
and i also have two questions

814
00:39:15,680 --> 00:39:18,240
we seem to all of us have two questions

815
00:39:18,240 --> 00:39:23,280
uh first one has to do with ubas and

816
00:39:23,280 --> 00:39:26,800
all the obs and all that

817
00:39:26,800 --> 00:39:30,320
does your top um

818
00:39:30,320 --> 00:39:33,119
coincide with our vast stop

819
00:39:33,119 --> 00:39:37,440
well ours is more relevant

820
00:39:39,680 --> 00:39:41,200
i think it's still relevant there are

821
00:39:41,200 --> 00:39:44,319
some new things that

822
00:39:44,480 --> 00:39:46,800
are there in my s

823
00:39:46,800 --> 00:39:49,200
v mass

824
00:39:49,200 --> 00:39:51,680
so you want to check it

825
00:39:51,680 --> 00:39:53,040
if you are talking about scanning

826
00:39:53,040 --> 00:39:54,320
results

827
00:39:54,320 --> 00:39:56,480
is is this question

828
00:39:56,480 --> 00:39:58,160
yes the top

829
00:39:58,160 --> 00:40:00,400
is the entry points and the number of

830
00:40:00,400 --> 00:40:03,359
projects right and top one is the most

831
00:40:03,359 --> 00:40:05,839
frequent vulnerability right

832
00:40:05,839 --> 00:40:10,200
you mean the correlation yes

833
00:40:16,000 --> 00:40:19,200
we get similar results

834
00:40:20,880 --> 00:40:24,319
right and our second question has to do

835
00:40:24,319 --> 00:40:26,800
is a follow-up to what somebody else

836
00:40:26,800 --> 00:40:28,400
uh asked

837
00:40:28,400 --> 00:40:33,280
when a token is safely stored

838
00:40:33,440 --> 00:40:34,800
why you think

839
00:40:34,800 --> 00:40:39,640
it saves us if you store it in k-store

840
00:40:40,000 --> 00:40:42,480
because if you can root it

841
00:40:42,480 --> 00:40:43,920
then

842
00:40:43,920 --> 00:40:47,040
storing the unciphed stocking in this

843
00:40:47,040 --> 00:40:51,880
place won't help you well full proof

844
00:40:52,240 --> 00:40:54,480
you you just have to obfuscate in any

845
00:40:54,480 --> 00:40:55,760
possible

846
00:40:55,760 --> 00:40:57,359
way and obviously yes you shouldn't

847
00:40:57,359 --> 00:41:00,960
store it in the open but if you have to

848
00:41:00,960 --> 00:41:03,920
then you could

849
00:41:03,920 --> 00:41:06,319
but do you have the right

850
00:41:06,319 --> 00:41:09,119
recommendations that we need to give to

851
00:41:09,119 --> 00:41:12,079
um to the

852
00:41:12,880 --> 00:41:16,070
well you have to check for roots

853
00:41:16,070 --> 00:41:19,320
[Music]

854
00:41:20,079 --> 00:41:22,640
many of these vulnerabilities

855
00:41:22,640 --> 00:41:26,319
that were exploited through debugger

856
00:41:26,319 --> 00:41:29,290
are exploited without debugging as well

857
00:41:29,290 --> 00:41:32,449
[Music]

858
00:41:32,480 --> 00:41:35,839
so you need to cover that as well

859
00:41:43,920 --> 00:41:45,839
and the version should be not debug

860
00:41:45,839 --> 00:41:48,000
release

861
00:41:48,000 --> 00:41:50,160
do you mean storage though

862
00:41:50,160 --> 00:41:52,800
actually it's a rather relevant question

863
00:41:52,800 --> 00:41:55,520
because in most of applications token is

864
00:41:55,520 --> 00:42:01,000
is indeed stored in the client side and

865
00:42:08,079 --> 00:42:10,560
and it may be still a vulnerability but

866
00:42:10,560 --> 00:42:12,720
it was a different risk if it's an ip

867
00:42:12,720 --> 00:42:16,000
it's about ip keys

868
00:42:22,480 --> 00:42:24,160
that means that you shouldn't store it

869
00:42:24,160 --> 00:42:27,720
in the gadgets

870
00:42:32,800 --> 00:42:35,040
well it really depends on how you

871
00:42:35,040 --> 00:42:36,400
approach it

872
00:42:36,400 --> 00:42:40,280
i would put it this way

873
00:42:47,200 --> 00:42:48,880
thank you this was a very interesting

874
00:42:48,880 --> 00:42:51,599
presentation

875
00:42:55,520 --> 00:43:00,000
are there any plugins that would

876
00:43:01,520 --> 00:43:03,839
help the developer who is not in the

877
00:43:03,839 --> 00:43:06,240
known of or doesn't know our

878
00:43:06,240 --> 00:43:08,560
vulnerabilities to check for them

879
00:43:08,560 --> 00:43:12,520
like alerts or something

880
00:43:18,160 --> 00:43:18,880
to

881
00:43:18,880 --> 00:43:20,880
kind of introduce the uh safe

882
00:43:20,880 --> 00:43:23,119
constructions

883
00:43:23,119 --> 00:43:25,280
and you mean open source sas so what

884
00:43:25,280 --> 00:43:26,400
what do you mean

885
00:43:26,400 --> 00:43:29,839
not necessarily open source though

886
00:43:29,839 --> 00:43:33,280
maybe paid well i can speak of

887
00:43:33,280 --> 00:43:35,760
our own

888
00:43:37,440 --> 00:43:39,040
as far as open source is concerned that

889
00:43:39,040 --> 00:43:41,599
there is mobile stuff

890
00:43:41,599 --> 00:43:42,800
and it's good enough you know to

891
00:43:42,800 --> 00:43:45,760
understand how it all works

892
00:43:45,760 --> 00:43:48,640
and we used it for all safe as well not

893
00:43:48,640 --> 00:43:50,720
on the stage when the application is is

894
00:43:50,720 --> 00:43:52,560
ready and we want to check it but rather

895
00:43:52,560 --> 00:43:55,760
on the development stage so

896
00:43:55,760 --> 00:43:57,440
in id yes

897
00:43:57,440 --> 00:43:59,520
so that idea alerts us that we are now

898
00:43:59,520 --> 00:44:02,079
using an insecure

899
00:44:02,079 --> 00:44:03,359
construct

900
00:44:03,359 --> 00:44:04,800
remember the

901
00:44:04,800 --> 00:44:08,520
presentation yesterday

902
00:44:12,240 --> 00:44:13,440
well we have

903
00:44:13,440 --> 00:44:16,400
uh some integration with id so yes the

904
00:44:16,400 --> 00:44:18,319
opportunities are there we can you can

905
00:44:18,319 --> 00:44:21,720
you can do it

906
00:44:29,920 --> 00:44:31,040
i i

907
00:44:31,040 --> 00:44:33,280
don't know if there are linters that can

908
00:44:33,280 --> 00:44:35,040
do that for you but

909
00:44:35,040 --> 00:44:37,839
probably there are

910
00:44:40,960 --> 00:44:42,960
thank you for this presentation and i

911
00:44:42,960 --> 00:44:44,640
have the following question do you think

912
00:44:44,640 --> 00:44:47,440
confiscation impacts the quality of your

913
00:44:47,440 --> 00:44:49,680
sas analysis

914
00:44:49,680 --> 00:44:52,160
thank you for this question yes it does

915
00:44:52,160 --> 00:44:53,839
impact

916
00:44:53,839 --> 00:44:57,040
for taint analysis

917
00:44:57,599 --> 00:44:59,599
it's not a matter of the name of the

918
00:44:59,599 --> 00:45:00,560
method

919
00:45:00,560 --> 00:45:02,560
name of the class

920
00:45:02,560 --> 00:45:05,440
for taint analysis uh it doesn't really

921
00:45:05,440 --> 00:45:07,839
it it it is not a hurdle at all the

922
00:45:07,839 --> 00:45:09,920
trace will still

923
00:45:09,920 --> 00:45:11,920
be built and we'll see the entry point

924
00:45:11,920 --> 00:45:15,160
thank you

925
00:45:16,380 --> 00:45:19,489
[Music]

926
00:45:25,680 --> 00:45:28,880
thank you for this presentation

927
00:45:28,880 --> 00:45:30,880
you

928
00:45:30,880 --> 00:45:33,440
haven't mentioned vulnerability in a

929
00:45:33,440 --> 00:45:35,359
binary code

930
00:45:35,359 --> 00:45:37,200
are there any

931
00:45:37,200 --> 00:45:41,040
any typical vulnerabilities of this kind

932
00:45:41,040 --> 00:45:42,160
of

933
00:45:42,160 --> 00:45:43,119
modem

934
00:45:43,119 --> 00:45:46,480
well binary code analysis and statistic

935
00:45:46,480 --> 00:45:49,920
and analysis this is that what you mean

936
00:45:49,920 --> 00:45:53,119
external libraries you mean

937
00:45:53,359 --> 00:45:58,839
yes like sea libraries ah right okay

938
00:46:05,040 --> 00:46:07,280
so how to analyze it this is done by

939
00:46:07,280 --> 00:46:09,680
revis engineers

940
00:46:09,680 --> 00:46:13,119
uh reverse engineers can check this

941
00:46:13,119 --> 00:46:16,480
library what i mean is are there any

942
00:46:16,480 --> 00:46:17,599
any

943
00:46:17,599 --> 00:46:19,839
typical classical vulnerabilities that

944
00:46:19,839 --> 00:46:21,760
could be used

945
00:46:21,760 --> 00:46:25,680
and exploited for mobile applications

946
00:46:25,680 --> 00:46:27,520
typical binary vulnerabilities for

947
00:46:27,520 --> 00:46:30,640
mobile applications

948
00:46:32,880 --> 00:46:35,680
if you have access to file system and

949
00:46:35,680 --> 00:46:38,079
all those files are stored locally in

950
00:46:38,079 --> 00:46:40,839
the sandbox of our application and

951
00:46:40,839 --> 00:46:43,359
they we get

952
00:46:43,359 --> 00:46:45,680
access to it with the help of our attack

953
00:46:45,680 --> 00:46:48,880
then we'll be able to um

954
00:46:48,880 --> 00:46:52,480
call a different code not the one that

955
00:46:52,480 --> 00:46:54,000
was initially

956
00:46:54,000 --> 00:46:56,000
you know supposed to be there and it's

957
00:46:56,000 --> 00:46:58,480
quite a legitimate

958
00:46:58,480 --> 00:47:02,000
attack vector in this case

959
00:47:06,160 --> 00:47:07,440
thank you thank you for this

960
00:47:07,440 --> 00:47:09,280
presentation and

961
00:47:09,280 --> 00:47:11,200
let me start

962
00:47:11,200 --> 00:47:14,480
let me digress first so

963
00:47:14,480 --> 00:47:16,720
you you work with compile yes our

964
00:47:16,720 --> 00:47:18,319
screener

965
00:47:18,319 --> 00:47:20,720
analyzer analyzes

966
00:47:20,720 --> 00:47:22,079
bit code

967
00:47:22,079 --> 00:47:25,599
we use in pipe code and the

968
00:47:25,599 --> 00:47:27,440
and then part of attacks

969
00:47:27,440 --> 00:47:29,200
what i mean

970
00:47:29,200 --> 00:47:30,880
it's not necessarily

971
00:47:30,880 --> 00:47:33,920
relevant for android or ios it's also

972
00:47:33,920 --> 00:47:36,240
relevant for a web

973
00:47:36,240 --> 00:47:38,480
if you look at java code then some of

974
00:47:38,480 --> 00:47:40,480
attacks would be relevant both for

975
00:47:40,480 --> 00:47:42,160
android and for regular java

976
00:47:42,160 --> 00:47:45,599
applications is that right absolutely

977
00:47:45,599 --> 00:47:48,160
and if we look at the java code per se

978
00:47:48,160 --> 00:47:50,800
uh do you think it is possible to

979
00:47:50,800 --> 00:47:51,520
to

980
00:47:51,520 --> 00:47:53,200
to to differentiate between a big care

981
00:47:53,200 --> 00:47:56,160
or an application yes

982
00:47:58,160 --> 00:48:00,720
well after the compilation uh if you can

983
00:48:00,720 --> 00:48:04,720
see at my drive manifest no no no

984
00:48:04,720 --> 00:48:07,359
let's say java file arrive is too fast

985
00:48:07,359 --> 00:48:08,960
how do you understand whether it's a

986
00:48:08,960 --> 00:48:11,119
java application or it comes from

987
00:48:11,119 --> 00:48:13,280
android is it possible

988
00:48:13,280 --> 00:48:16,800
to automate this process you main

989
00:48:16,800 --> 00:48:19,599
you can call particular you can detect

990
00:48:19,599 --> 00:48:22,400
calls of particular methods

991
00:48:22,400 --> 00:48:24,079
from libraries or

992
00:48:24,079 --> 00:48:27,040
anything like that

993
00:48:27,920 --> 00:48:28,800
that

994
00:48:28,800 --> 00:48:31,520
deal with android applications

995
00:48:31,520 --> 00:48:34,640
we need say android sdk

996
00:48:34,640 --> 00:48:36,960
for this file to be launched in a good

997
00:48:36,960 --> 00:48:39,119
way and then

998
00:48:39,119 --> 00:48:40,480
there is a

999
00:48:40,480 --> 00:48:43,040
rather high probability that okay so you

1000
00:48:43,040 --> 00:48:44,880
you judge by import yes we charge for

1001
00:48:44,880 --> 00:48:47,920
input important message message invoked

1002
00:48:47,920 --> 00:48:49,520
yeah

1003
00:48:49,520 --> 00:48:52,319
okay thank you

1004
00:49:00,240 --> 00:49:03,280
i already saw forgetting and uh you know

1005
00:49:03,280 --> 00:49:05,599
how asked the questions and how do i

1006
00:49:05,599 --> 00:49:08,160
pick the best one

1007
00:49:08,160 --> 00:49:09,839
i actually have another question you

1008
00:49:09,839 --> 00:49:11,359
mentioned that

1009
00:49:11,359 --> 00:49:13,920
uh you

1010
00:49:14,240 --> 00:49:17,200
uh downloaded uh all saves to mobile

1011
00:49:17,200 --> 00:49:19,760
safe so what uh how you compare against

1012
00:49:19,760 --> 00:49:20,490
upscreener

1013
00:49:20,490 --> 00:49:23,359
[Music]

1014
00:49:23,359 --> 00:49:25,599
a two out of three were found by mobile

1015
00:49:25,599 --> 00:49:27,839
seth

1016
00:49:28,000 --> 00:49:28,839
i

1017
00:49:28,839 --> 00:49:31,920
think not not three out of three and our

1018
00:49:31,920 --> 00:49:33,599
analyzer

1019
00:49:33,599 --> 00:49:36,880
covered all the cases

1020
00:49:38,160 --> 00:49:40,640
and our task was to increase coverage so

1021
00:49:40,640 --> 00:49:45,200
yes it it it coped with it

1022
00:49:45,200 --> 00:49:46,000
so

1023
00:49:46,000 --> 00:49:48,800
probably the uncovered one was the sql

1024
00:49:48,800 --> 00:49:51,520
injection right

1025
00:49:53,359 --> 00:49:55,440
i don't remember exactly but yeah i

1026
00:49:55,440 --> 00:49:58,720
think you're right

1027
00:49:58,720 --> 00:50:00,240
and also if contains a lot of

1028
00:50:00,240 --> 00:50:01,839
vulnerabilities but you only checked for

1029
00:50:01,839 --> 00:50:02,720
three

1030
00:50:02,720 --> 00:50:04,960
yes yes because it's uh the rest is just

1031
00:50:04,960 --> 00:50:06,079
out of this

1032
00:50:06,079 --> 00:50:08,319
scope of my presentation today

1033
00:50:08,319 --> 00:50:10,079
thank you

1034
00:50:10,079 --> 00:50:13,839
and now you need to pick best question

1035
00:50:15,040 --> 00:50:19,119
i loved the question about encryption

1036
00:50:20,400 --> 00:50:21,440
the girl

1037
00:50:21,440 --> 00:50:23,119
yes okay

1038
00:50:23,119 --> 00:50:24,240
and

1039
00:50:24,240 --> 00:50:28,640
we are giving her the speakers and we

1040
00:50:28,640 --> 00:50:31,040
i we also loved the one about

1041
00:50:31,040 --> 00:50:33,680
obfuscation

1042
00:50:33,680 --> 00:50:36,160
the guy in the green

1043
00:50:36,160 --> 00:50:37,520
t-shirt

1044
00:50:37,520 --> 00:50:41,839
yes we have a present for you as well

1045
00:50:42,079 --> 00:50:46,640
and the very best question it would be

1046
00:50:46,640 --> 00:50:50,079
in the car the umpq

1047
00:50:50,079 --> 00:50:51,920
thank you

1048
00:50:51,920 --> 00:50:54,400
yeah that would be the best question

1049
00:50:54,400 --> 00:50:56,160
thank you for your attention

1050
00:50:56,160 --> 00:50:58,160
thank you for

1051
00:50:58,160 --> 00:51:01,799
listening so thankfully

