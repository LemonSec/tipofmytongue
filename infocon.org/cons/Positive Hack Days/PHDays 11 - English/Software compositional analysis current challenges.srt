1
00:00:04,319 --> 00:00:07,120
hi there my name is alex hesmernov and

2
00:00:07,120 --> 00:00:09,679
i'm going to talk to you today

3
00:00:09,679 --> 00:00:12,320
about sca

4
00:00:12,320 --> 00:00:13,840
challenges

5
00:00:13,840 --> 00:00:15,920
what it is and what are the challenges

6
00:00:15,920 --> 00:00:18,400
and how it all works

7
00:00:18,400 --> 00:00:20,480
i'm here to

8
00:00:20,480 --> 00:00:24,320
present profiscope and we do automated

9
00:00:24,320 --> 00:00:26,240
audits and we develop automatic

10
00:00:26,240 --> 00:00:27,920
auditments and

11
00:00:27,920 --> 00:00:29,920
now we have a system for compositional

12
00:00:29,920 --> 00:00:31,279
analysis

13
00:00:31,279 --> 00:00:34,559
that is called code scoring

14
00:00:34,559 --> 00:00:36,160
it's been a while since we started

15
00:00:36,160 --> 00:00:38,480
analyzing source codes and we have our

16
00:00:38,480 --> 00:00:40,719
own conference for source code and

17
00:00:40,719 --> 00:00:44,160
open data science community we also make

18
00:00:44,160 --> 00:00:47,200
free of charge open courses about

19
00:00:47,200 --> 00:00:49,360
in particular about licensing of open

20
00:00:49,360 --> 00:00:50,559
source

21
00:00:50,559 --> 00:00:51,920
software

22
00:00:51,920 --> 00:00:54,320
which is also relevant to sca but it's

23
00:00:54,320 --> 00:00:56,320
not the topic of my today's presentation

24
00:00:56,320 --> 00:00:59,600
and we're always happy to

25
00:00:59,600 --> 00:01:03,199
raise the awareness in this matters

26
00:01:03,199 --> 00:01:05,040
just to give you some context and some

27
00:01:05,040 --> 00:01:08,320
numbers you all know the numbers that we

28
00:01:08,320 --> 00:01:12,560
have a lot of open source code out there

29
00:01:12,560 --> 00:01:15,520
more than 200 million unique projects as

30
00:01:15,520 --> 00:01:17,040
they say

31
00:01:17,040 --> 00:01:19,439
it does not necessarily add value

32
00:01:19,439 --> 00:01:21,840
because the valuable projects are less

33
00:01:21,840 --> 00:01:24,320
than 200 million but

34
00:01:24,320 --> 00:01:28,159
at least one uh command was done by

35
00:01:28,159 --> 00:01:29,920
around 70 million people and the number

36
00:01:29,920 --> 00:01:32,720
of people doing open source comments is

37
00:01:32,720 --> 00:01:36,479
going up and the usability

38
00:01:36,479 --> 00:01:42,799
has gone up by 72 percent in 2020-21

39
00:01:42,799 --> 00:01:45,920
we also know that the numbers of supply

40
00:01:45,920 --> 00:01:47,520
chain attacks

41
00:01:47,520 --> 00:01:49,680
increases

42
00:01:49,680 --> 00:01:52,159
we are not going deep into the topic of

43
00:01:52,159 --> 00:01:54,000
supply chain attacks in this

44
00:01:54,000 --> 00:01:55,840
presentation but we bear this in mind

45
00:01:55,840 --> 00:01:58,640
and this grows and the number of

46
00:01:58,640 --> 00:02:00,560
supply chain attacks is something that

47
00:02:00,560 --> 00:02:01,840
can't

48
00:02:01,840 --> 00:02:04,560
be bothered you

49
00:02:04,880 --> 00:02:08,560
and these are the data on packages

50
00:02:08,560 --> 00:02:11,920
growing in package indexes the new uh

51
00:02:11,920 --> 00:02:14,559
versions

52
00:02:15,280 --> 00:02:17,840
emerging in the market and in the year

53
00:02:17,840 --> 00:02:20,959
2021 alone at least one third of new

54
00:02:20,959 --> 00:02:22,879
pocket packages arrived

55
00:02:22,879 --> 00:02:24,720
cool right

56
00:02:24,720 --> 00:02:28,319
and also so very many new versions and

57
00:02:28,319 --> 00:02:30,239
you have to follow all of them you have

58
00:02:30,239 --> 00:02:33,599
to update information on them you have

59
00:02:33,599 --> 00:02:35,280
to identify

60
00:02:35,280 --> 00:02:37,280
the necessary

61
00:02:37,280 --> 00:02:38,879
resolve the necessary

62
00:02:38,879 --> 00:02:40,800
issues find vulnerabilities for all

63
00:02:40,800 --> 00:02:43,519
these new components identify licenses

64
00:02:43,519 --> 00:02:47,040
build compliance etc

65
00:02:48,319 --> 00:02:51,040
and here we don't even have space

66
00:02:51,040 --> 00:02:51,920
for

67
00:02:51,920 --> 00:02:53,200
javascript

68
00:02:53,200 --> 00:02:56,000
in this slide

69
00:02:56,050 --> 00:02:58,879
[Music]

70
00:02:58,879 --> 00:03:02,319
the number of components in javascript

71
00:03:02,319 --> 00:03:04,640
is growing and quite

72
00:03:04,640 --> 00:03:07,440
significantly

73
00:03:09,680 --> 00:03:11,680
those who really know

74
00:03:11,680 --> 00:03:13,760
everything about devops and they know

75
00:03:13,760 --> 00:03:17,280
how to release 10 times a day huh

76
00:03:17,280 --> 00:03:18,959
a python

77
00:03:18,959 --> 00:03:21,519
very similar to java

78
00:03:21,519 --> 00:03:23,760
slightly less pronounced though and we

79
00:03:23,760 --> 00:03:24,879
can see

80
00:03:24,879 --> 00:03:28,159
around 300 000 packages in python and we

81
00:03:28,159 --> 00:03:32,920
can see that in the year 2021

82
00:03:33,120 --> 00:03:34,480
we have

83
00:03:34,480 --> 00:03:39,440
around one third of new projects arrived

84
00:03:39,519 --> 00:03:40,879
so it all

85
00:03:40,879 --> 00:03:45,040
gets released and the new versions

86
00:03:45,120 --> 00:03:47,760
uh appear in the market open source is

87
00:03:47,760 --> 00:03:50,400
popular and this popularity

88
00:03:50,400 --> 00:03:52,640
obviously spurs the industry the

89
00:03:52,640 --> 00:03:54,000
development industry and development

90
00:03:54,000 --> 00:03:56,640
becomes faster and also it was

91
00:03:56,640 --> 00:03:58,799
mentioning that open source

92
00:03:58,799 --> 00:04:02,640
contribution to the code base is

93
00:04:02,640 --> 00:04:05,200
larger and more substantial

94
00:04:05,200 --> 00:04:08,080
i'm not insisting but as a rule open

95
00:04:08,080 --> 00:04:11,280
open source is the majority

96
00:04:11,280 --> 00:04:14,560
according to title of 92 percent of your

97
00:04:14,560 --> 00:04:17,279
codes 92 percent of proprietary uh

98
00:04:17,279 --> 00:04:20,560
projects make use of open open source

99
00:04:20,560 --> 00:04:23,120
code which is a big number

100
00:04:23,120 --> 00:04:24,080
so

101
00:04:24,080 --> 00:04:25,680
this is how we come

102
00:04:25,680 --> 00:04:28,800
up with this pyramid was open sourcing

103
00:04:28,800 --> 00:04:30,400
the basis of this pyramid like a

104
00:04:30,400 --> 00:04:32,560
platform really

105
00:04:32,560 --> 00:04:36,080
a foundation i would call it and we have

106
00:04:36,080 --> 00:04:38,080
close code on top of it

107
00:04:38,080 --> 00:04:40,160
the close code is the unknown it's

108
00:04:40,160 --> 00:04:42,560
something that needs to be researched

109
00:04:42,560 --> 00:04:45,440
in order to find anything something or

110
00:04:45,440 --> 00:04:49,120
anything interested in it

111
00:04:49,680 --> 00:04:52,160
and obviously it could be open or closed

112
00:04:52,160 --> 00:04:54,560
to different extents and there is also

113
00:04:54,560 --> 00:04:56,479
also open source code

114
00:04:56,479 --> 00:05:00,080
which is known which is scannable

115
00:05:00,080 --> 00:05:02,160
and a lot of researchers

116
00:05:02,160 --> 00:05:04,880
dig into it and publish

117
00:05:04,880 --> 00:05:08,080
correspondent information

118
00:05:08,080 --> 00:05:11,280
on the kind of vulnerabilities

119
00:05:11,280 --> 00:05:15,199
there are and how they they got fixed

120
00:05:15,199 --> 00:05:17,759
and it's popular not just among the

121
00:05:17,759 --> 00:05:19,199
developers but also among the

122
00:05:19,199 --> 00:05:20,639
researchers

123
00:05:20,639 --> 00:05:23,440
it's pretty obvious that you really want

124
00:05:23,440 --> 00:05:26,400
to account

125
00:05:26,800 --> 00:05:29,759
for the index of package used in the

126
00:05:29,759 --> 00:05:31,840
community and in the code base and we

127
00:05:31,840 --> 00:05:35,120
can see the popularity of packages

128
00:05:35,120 --> 00:05:39,120
if you just take top 10

129
00:05:39,120 --> 00:05:40,240
is

130
00:05:40,240 --> 00:05:42,720
more researched and then 36 percent of

131
00:05:42,720 --> 00:05:43,919
projects

132
00:05:43,919 --> 00:05:46,080
we can find vulnerabilities and it's

133
00:05:46,080 --> 00:05:47,199
interesting to follow these

134
00:05:47,199 --> 00:05:48,720
vulnerabilities it's interesting to

135
00:05:48,720 --> 00:05:50,840
follow this

136
00:05:50,840 --> 00:05:52,639
progress

137
00:05:52,639 --> 00:05:55,199
in the rest of the package base only

138
00:05:55,199 --> 00:05:59,360
eight percent contain vulnerability

139
00:06:00,960 --> 00:06:04,160
and popular packages are the ones better

140
00:06:04,160 --> 00:06:05,680
studied right

141
00:06:05,680 --> 00:06:09,120
and you know the vulnerabilities there

142
00:06:09,120 --> 00:06:11,280
and people then shy

143
00:06:11,280 --> 00:06:12,400
uh

144
00:06:12,400 --> 00:06:13,759
away from

145
00:06:13,759 --> 00:06:16,400
demonstrating and

146
00:06:16,400 --> 00:06:18,319
actually

147
00:06:18,319 --> 00:06:20,400
making public the exploits that can be

148
00:06:20,400 --> 00:06:23,039
well exploitable

149
00:06:23,039 --> 00:06:26,639
speaking of the growing open source

150
00:06:26,639 --> 00:06:27,840
i would say that number of

151
00:06:27,840 --> 00:06:29,680
vulnerabilities discovered year in year

152
00:06:29,680 --> 00:06:33,400
is growing as well

153
00:06:35,600 --> 00:06:37,600
if you look at the number of

154
00:06:37,600 --> 00:06:39,120
vulnerabilities while open source

155
00:06:39,120 --> 00:06:40,639
mobility

156
00:06:40,639 --> 00:06:42,479
grows

157
00:06:42,479 --> 00:06:44,400
in 2021

158
00:06:44,400 --> 00:06:47,120
it actually breaks through the roof

159
00:06:47,120 --> 00:06:49,919
but at the same time if you look at

160
00:06:49,919 --> 00:06:52,400
separate feeds separate packages and

161
00:06:52,400 --> 00:06:56,239
analyze github security advisory

162
00:06:58,319 --> 00:07:00,800
these columns shows that discovery is

163
00:07:00,800 --> 00:07:02,720
not even

164
00:07:02,720 --> 00:07:05,199
it does depend on the

165
00:07:05,199 --> 00:07:07,039
feed holder focus

166
00:07:07,039 --> 00:07:10,639
the ones who process it if we look at

167
00:07:10,639 --> 00:07:14,880
primaven for example in 2020 it was

168
00:07:14,880 --> 00:07:16,960
very high

169
00:07:16,960 --> 00:07:18,000
in

170
00:07:18,000 --> 00:07:20,560
npm

171
00:07:20,560 --> 00:07:22,160
they started to

172
00:07:22,160 --> 00:07:24,319
um do something about vulnerabilities

173
00:07:24,319 --> 00:07:26,800
around what two three years ago

174
00:07:26,800 --> 00:07:28,880
the black are the critical ones as you

175
00:07:28,880 --> 00:07:30,639
can understand

176
00:07:30,639 --> 00:07:32,880
and then

177
00:07:32,880 --> 00:07:34,479
pip

178
00:07:34,479 --> 00:07:38,160
was of great interest in 2021 in 22 it's

179
00:07:38,160 --> 00:07:40,319
also of interest but not

180
00:07:40,319 --> 00:07:41,520
yet

181
00:07:41,520 --> 00:07:43,280
we don't yet have too many

182
00:07:43,280 --> 00:07:46,719
vulnerabilities identified

183
00:07:46,879 --> 00:07:49,759
an open source much as we love it

184
00:07:49,759 --> 00:07:52,240
is not secure yes we love it yes we make

185
00:07:52,240 --> 00:07:54,240
use of it everybody loves it everybody

186
00:07:54,240 --> 00:07:56,560
makes use of it but you have to

187
00:07:56,560 --> 00:07:58,720
check it for vulnerabilities everybody

188
00:07:58,720 --> 00:08:00,639
knows that it contains vulnerabilities

189
00:08:00,639 --> 00:08:02,400
and you have to do something about it

190
00:08:02,400 --> 00:08:05,039
you either scan it the whole of it

191
00:08:05,039 --> 00:08:06,479
or read

192
00:08:06,479 --> 00:08:09,840
some other people read the code

193
00:08:09,840 --> 00:08:12,639
within the framework of sagdav

194
00:08:12,639 --> 00:08:15,120
there is this whole concept of handling

195
00:08:15,120 --> 00:08:18,080
the licenses because licenses may be

196
00:08:18,080 --> 00:08:20,720
incompatible or non-existent

197
00:08:20,720 --> 00:08:21,599
and

198
00:08:21,599 --> 00:08:25,199
there are all kinds of risks like expert

199
00:08:25,199 --> 00:08:27,840
limitations that may impact

200
00:08:27,840 --> 00:08:29,599
licenses

201
00:08:29,599 --> 00:08:30,800
that are not

202
00:08:30,800 --> 00:08:33,279
exactly

203
00:08:33,279 --> 00:08:35,599
approved

204
00:08:35,599 --> 00:08:38,240
self-approved for example

205
00:08:38,240 --> 00:08:41,240
licenses

206
00:08:41,519 --> 00:08:44,480
and backdoors is a separate

207
00:08:44,480 --> 00:08:45,710
saying

208
00:08:45,710 --> 00:08:48,839
[Music]

209
00:08:49,839 --> 00:08:53,200
they could be embedded into any kind of

210
00:08:53,200 --> 00:08:55,920
software and then can be triggered

211
00:08:55,920 --> 00:08:58,160
by various things and they are

212
00:08:58,160 --> 00:09:02,000
detectable they are being studied and by

213
00:09:02,000 --> 00:09:04,560
stat analysis in particular

214
00:09:04,560 --> 00:09:07,959
and backdoors

215
00:09:08,640 --> 00:09:11,440
when identified also gets their

216
00:09:11,440 --> 00:09:13,279
correspondent code of vulnerabilities

217
00:09:13,279 --> 00:09:15,120
and are published

218
00:09:15,120 --> 00:09:18,320
so de facto they're also

219
00:09:18,320 --> 00:09:20,480
vulnerabilities so in order to work with

220
00:09:20,480 --> 00:09:22,800
that not just with the vulnerabilities

221
00:09:22,800 --> 00:09:25,600
backdoors and licenses

222
00:09:25,600 --> 00:09:27,440
you would use software composition

223
00:09:27,440 --> 00:09:29,120
analysis and let me

224
00:09:29,120 --> 00:09:30,720
give you some background information

225
00:09:30,720 --> 00:09:33,279
about it just in case you don't

226
00:09:33,279 --> 00:09:36,000
really know

227
00:09:36,800 --> 00:09:38,640
what it is all about

228
00:09:38,640 --> 00:09:41,200
so sca

229
00:09:41,200 --> 00:09:44,800
is about studying components

230
00:09:44,800 --> 00:09:47,680
of a software

231
00:09:47,680 --> 00:09:49,519
and identifying this component so you

232
00:09:49,519 --> 00:09:51,360
basically disintegrate

233
00:09:51,360 --> 00:09:53,600
the packages and you

234
00:09:53,600 --> 00:09:56,240
come up up with the list of packages

235
00:09:56,240 --> 00:09:58,480
with all the material information

236
00:09:58,480 --> 00:10:00,399
contained and representing this

237
00:10:00,399 --> 00:10:02,399
information with all its risks to the

238
00:10:02,399 --> 00:10:06,079
user so that the user can take action

239
00:10:06,079 --> 00:10:07,360
more often than not it's pretty

240
00:10:07,360 --> 00:10:09,440
straightforward and it consists of three

241
00:10:09,440 --> 00:10:12,399
steps first one is inventorization when

242
00:10:12,399 --> 00:10:15,200
we scan our code base and we identify

243
00:10:15,200 --> 00:10:18,000
the dependencies we identify where we

244
00:10:18,000 --> 00:10:20,880
have directive or direct dependence

245
00:10:20,880 --> 00:10:22,800
dependencies where we have transitive

246
00:10:22,800 --> 00:10:24,160
dependencies dependencies of

247
00:10:24,160 --> 00:10:26,240
dependencies you know all these trees

248
00:10:26,240 --> 00:10:27,760
and then all these

249
00:10:27,760 --> 00:10:30,399
things we identify are checked against

250
00:10:30,399 --> 00:10:31,600
vendor base

251
00:10:31,600 --> 00:10:33,440
open base then we detect it and we

252
00:10:33,440 --> 00:10:35,440
identify the licenses we identify all

253
00:10:35,440 --> 00:10:37,760
the vulnerabilities that are there in

254
00:10:37,760 --> 00:10:41,920
the database and so we take it

255
00:10:41,920 --> 00:10:44,160
and

256
00:10:44,480 --> 00:10:47,200
stay informed and formulate our policies

257
00:10:47,200 --> 00:10:48,800
and take actions

258
00:10:48,800 --> 00:10:52,000
speaking of actions this may start

259
00:10:52,000 --> 00:10:55,920
was like a notification

260
00:10:56,560 --> 00:10:58,880
you got a

261
00:10:58,880 --> 00:11:02,399
dashboard a notification or a jira

262
00:11:02,399 --> 00:11:05,519
identification or even blockage

263
00:11:05,519 --> 00:11:08,399
but it all begins with inventorization i

264
00:11:08,399 --> 00:11:10,000
think you would agree

265
00:11:10,000 --> 00:11:11,680
so in order to carry out this

266
00:11:11,680 --> 00:11:14,160
inventorization you don't have to go to

267
00:11:14,160 --> 00:11:17,120
a warehouse and count your software

268
00:11:17,120 --> 00:11:18,160
manually

269
00:11:18,160 --> 00:11:20,880
there is a

270
00:11:21,279 --> 00:11:23,839
possibility for using automation

271
00:11:23,839 --> 00:11:26,320
and it consists of three steps first you

272
00:11:26,320 --> 00:11:29,279
study the manifests

273
00:11:29,279 --> 00:11:32,000
so basically it's static parsing static

274
00:11:32,000 --> 00:11:33,920
analysis

275
00:11:33,920 --> 00:11:35,920
which consists in parsing

276
00:11:35,920 --> 00:11:37,760
of the correspondent notations in the

277
00:11:37,760 --> 00:11:40,880
manifest that tells us of which packages

278
00:11:40,880 --> 00:11:43,279
are used which versions are used

279
00:11:43,279 --> 00:11:45,839
it it not that it comes without a

280
00:11:45,839 --> 00:11:47,760
problem

281
00:11:47,760 --> 00:11:51,760
i guess many of you have encountered

282
00:11:51,760 --> 00:11:53,760
with data science and i love this

283
00:11:53,760 --> 00:11:56,480
example

284
00:11:56,480 --> 00:11:59,920
of data scientists in this context

285
00:11:59,920 --> 00:12:01,920
independent says data scientists would

286
00:12:01,920 --> 00:12:04,079
only give you the the title of the

287
00:12:04,079 --> 00:12:07,959
package and that's it

288
00:12:10,160 --> 00:12:11,440
and that's all

289
00:12:11,440 --> 00:12:13,200
very understandable it's not their

290
00:12:13,200 --> 00:12:15,760
responsibility but anyway dependencies

291
00:12:15,760 --> 00:12:18,720
can be there they can be with or without

292
00:12:18,720 --> 00:12:20,240
taking the

293
00:12:20,240 --> 00:12:22,639
transitive dependencies into account

294
00:12:22,639 --> 00:12:24,880
and it all depends on whether you build

295
00:12:24,880 --> 00:12:26,160
a log

296
00:12:26,160 --> 00:12:29,040
files credit log point a log or anything

297
00:12:29,040 --> 00:12:31,200
do you do do you build your transitive

298
00:12:31,200 --> 00:12:32,959
dependencies on your own

299
00:12:32,959 --> 00:12:34,880
it's it's basically a cult your

300
00:12:34,880 --> 00:12:36,959
development culture if you don't do it

301
00:12:36,959 --> 00:12:40,079
then sca a compositional system

302
00:12:40,079 --> 00:12:42,240
it wouldn't find transitive dependencies

303
00:12:42,240 --> 00:12:44,800
and it would try to build it on its own

304
00:12:44,800 --> 00:12:47,120
using the environment and using its own

305
00:12:47,120 --> 00:12:48,639
discretion

306
00:12:48,639 --> 00:12:51,040
so these are the two basic things

307
00:12:51,040 --> 00:12:53,839
that

308
00:12:56,079 --> 00:12:57,600
that

309
00:12:57,600 --> 00:12:59,920
that you have in

310
00:12:59,920 --> 00:13:01,920
sas scanners

311
00:13:01,920 --> 00:13:05,519
and there is an additional functionality

312
00:13:05,519 --> 00:13:07,200
i identification of

313
00:13:07,200 --> 00:13:09,200
open source inclusion you all know

314
00:13:09,200 --> 00:13:11,279
shazam application right

315
00:13:11,279 --> 00:13:14,160
when you listen to a piece of music and

316
00:13:14,160 --> 00:13:16,560
you id you you manage to get information

317
00:13:16,560 --> 00:13:18,880
on everything from the title of the

318
00:13:18,880 --> 00:13:20,800
album all the way to the right well

319
00:13:20,800 --> 00:13:22,320
you're not very interesting in the

320
00:13:22,320 --> 00:13:23,920
rights but anyway

321
00:13:23,920 --> 00:13:26,320
same with the code sca

322
00:13:26,320 --> 00:13:29,440
we will listen to the software software

323
00:13:29,440 --> 00:13:30,480
uh we

324
00:13:30,480 --> 00:13:32,480
get information on hashes and those can

325
00:13:32,480 --> 00:13:36,000
be um crypto resistant or non-crypto

326
00:13:36,000 --> 00:13:38,639
resistant and you have a shazam of code

327
00:13:38,639 --> 00:13:41,600
and you have an open source inclusion

328
00:13:41,600 --> 00:13:43,519
identification open source inclusion is

329
00:13:43,519 --> 00:13:45,360
when you take an external

330
00:13:45,360 --> 00:13:48,160
uh library and and then put it right

331
00:13:48,160 --> 00:13:49,920
there in your code base and make use of

332
00:13:49,920 --> 00:13:50,959
it because it's fast it's

333
00:13:50,959 --> 00:13:52,320
straightforward

334
00:13:52,320 --> 00:13:54,160
and you may

335
00:13:54,160 --> 00:13:55,600
find it

336
00:13:55,600 --> 00:13:57,279
alarmingly

337
00:13:57,279 --> 00:13:59,920
wild but this is something that happens

338
00:13:59,920 --> 00:14:02,079
and happens all the time and the problem

339
00:14:02,079 --> 00:14:04,639
is that in this open with this open

340
00:14:04,639 --> 00:14:06,720
source inclusions well they are included

341
00:14:06,720 --> 00:14:09,360
in it and then they lie there idly

342
00:14:09,360 --> 00:14:11,760
or not i believe they're being used

343
00:14:11,760 --> 00:14:13,760
while the

344
00:14:13,760 --> 00:14:17,160
uh sources

345
00:14:17,360 --> 00:14:20,160
and and your own uh your own source code

346
00:14:20,160 --> 00:14:21,440
starts to get

347
00:14:21,440 --> 00:14:24,639
entangled with those inclusions and

348
00:14:24,639 --> 00:14:27,040
these inclusions they get updated they

349
00:14:27,040 --> 00:14:28,720
get new functions they contain

350
00:14:28,720 --> 00:14:30,639
vulnerabilities

351
00:14:30,639 --> 00:14:33,279
oftentimes

352
00:14:33,440 --> 00:14:35,440
say

353
00:14:35,440 --> 00:14:37,360
you get this inclusion and it works and

354
00:14:37,360 --> 00:14:38,720
everything it works and everything is

355
00:14:38,720 --> 00:14:42,399
fine and it's it's there for 10 years

356
00:14:42,399 --> 00:14:44,320
and we have a lot of vulnerabilities

357
00:14:44,320 --> 00:14:45,680
there

358
00:14:45,680 --> 00:14:48,240
and it happens i mean it happens quite

359
00:14:48,240 --> 00:14:50,000
regularly

360
00:14:50,000 --> 00:14:52,000
so after

361
00:14:52,000 --> 00:14:53,360
you study

362
00:14:53,360 --> 00:14:56,160
the manifest the transitive

363
00:14:56,160 --> 00:14:58,320
depends it is not just parsing a files

364
00:14:58,320 --> 00:15:00,720
but resolving

365
00:15:00,720 --> 00:15:02,720
uh the transitive dependencies and

366
00:15:02,720 --> 00:15:04,880
identifying the open source inclusions

367
00:15:04,880 --> 00:15:07,519
you get the so-called software bill of

368
00:15:07,519 --> 00:15:11,440
materials or spom

369
00:15:11,440 --> 00:15:14,959
um software bill of materials so

370
00:15:14,959 --> 00:15:16,480
it contains

371
00:15:16,480 --> 00:15:18,480
all information on all dependencies and

372
00:15:18,480 --> 00:15:21,120
control sums that can be enriched

373
00:15:21,120 --> 00:15:22,959
according to particular standards with

374
00:15:22,959 --> 00:15:24,639
information and vulnerabilities on

375
00:15:24,639 --> 00:15:28,959
licenses all that it it may contain

376
00:15:28,959 --> 00:15:30,480
a lot of data

377
00:15:30,480 --> 00:15:31,839
then um

378
00:15:31,839 --> 00:15:32,720
how

379
00:15:32,720 --> 00:15:35,199
sca system is used

380
00:15:35,199 --> 00:15:37,440
it's

381
00:15:37,440 --> 00:15:40,240
either done in the mode of firewalling

382
00:15:40,240 --> 00:15:42,639
components we want to prohibit things

383
00:15:42,639 --> 00:15:44,079
and we want to prohibit our own

384
00:15:44,079 --> 00:15:46,720
discretion we have this open source with

385
00:15:46,720 --> 00:15:48,880
all the components that flies in and

386
00:15:48,880 --> 00:15:51,360
gets stored and we accuse of it

387
00:15:51,360 --> 00:15:53,360
and on the other hand we have the users

388
00:15:53,360 --> 00:15:55,360
who want to get something new at all

389
00:15:55,360 --> 00:15:57,680
times and this is an issue and we need

390
00:15:57,680 --> 00:16:00,000
to follow it and we need to understand

391
00:16:00,000 --> 00:16:01,440
what they do and how they do it and when

392
00:16:01,440 --> 00:16:03,839
they do it

393
00:16:05,279 --> 00:16:09,120
then cicd security gates is another

394
00:16:09,120 --> 00:16:10,560
option

395
00:16:10,560 --> 00:16:12,560
when for each build we

396
00:16:12,560 --> 00:16:15,199
look at and we analyze and we identify

397
00:16:15,199 --> 00:16:17,519
what's wrong and also there is this mode

398
00:16:17,519 --> 00:16:19,519
of continuous mod monitoring you know

399
00:16:19,519 --> 00:16:21,360
that you have already released

400
00:16:21,360 --> 00:16:23,600
if you are related to software

401
00:16:23,600 --> 00:16:25,920
development you know that you released

402
00:16:25,920 --> 00:16:27,440
the version is out

403
00:16:27,440 --> 00:16:29,040
people keep using

404
00:16:29,040 --> 00:16:32,160
using it and old versions are also still

405
00:16:32,160 --> 00:16:34,720
out there and you need to know

406
00:16:34,720 --> 00:16:37,839
how vulnerable they are

407
00:16:37,920 --> 00:16:40,000
same goes to premise products and all

408
00:16:40,000 --> 00:16:42,720
that everybody tries to update regularly

409
00:16:42,720 --> 00:16:43,519
but

410
00:16:43,519 --> 00:16:46,000
the issue with vulnerability of the

411
00:16:46,000 --> 00:16:48,639
previous versions of your software does

412
00:16:48,639 --> 00:16:51,040
exist and you need to follow it

413
00:16:51,040 --> 00:16:55,759
the so-called shift left approach

414
00:16:56,720 --> 00:16:59,279
is oftentimes mentioned by partners

415
00:16:59,279 --> 00:17:01,279
rather than vendors but this is indeed

416
00:17:01,279 --> 00:17:02,160
very

417
00:17:02,160 --> 00:17:05,119
relevant and not just

418
00:17:05,119 --> 00:17:08,799
it it just does not only concern the

419
00:17:08,799 --> 00:17:11,839
the old versions

420
00:17:14,160 --> 00:17:17,760
you also want to monitor the code that

421
00:17:17,760 --> 00:17:19,359
you get here and now

422
00:17:19,359 --> 00:17:24,159
you know out of uh deaf fingers

423
00:17:24,400 --> 00:17:26,720
and you can actually monitor even some

424
00:17:26,720 --> 00:17:30,080
branches when we develop separate things

425
00:17:30,080 --> 00:17:33,679
there is this whole other thing of

426
00:17:33,679 --> 00:17:36,080
integration into

427
00:17:36,080 --> 00:17:38,559
idea

428
00:17:41,440 --> 00:17:44,160
and according to our

429
00:17:44,160 --> 00:17:45,360
polls

430
00:17:45,360 --> 00:17:48,559
looks like this uh functionality is just

431
00:17:48,559 --> 00:17:49,360
seen

432
00:17:49,360 --> 00:17:51,200
as convenient

433
00:17:51,200 --> 00:17:53,440
but it's only convenient for those who

434
00:17:53,440 --> 00:17:55,919
know what they want and how they want it

435
00:17:55,919 --> 00:17:58,799
for the rest of the

436
00:17:58,799 --> 00:18:01,679
people out there idea function is not

437
00:18:01,679 --> 00:18:03,200
being used

438
00:18:03,200 --> 00:18:04,640
and this is something that needs to be

439
00:18:04,640 --> 00:18:06,400
changed because

440
00:18:06,400 --> 00:18:08,400
everything comes out of minds and

441
00:18:08,400 --> 00:18:10,720
fingers of our developers so how it

442
00:18:10,720 --> 00:18:11,679
works

443
00:18:11,679 --> 00:18:15,840
this is sca firewall

444
00:18:15,840 --> 00:18:18,400
when you have open source on one hand

445
00:18:18,400 --> 00:18:21,200
with all kinds of npms and mavens and

446
00:18:21,200 --> 00:18:23,039
python and all that

447
00:18:23,039 --> 00:18:26,960
and we do understand that

448
00:18:27,679 --> 00:18:29,840
one thing is to

449
00:18:29,840 --> 00:18:33,280
put a link to github and on the other on

450
00:18:33,280 --> 00:18:36,080
and the other thing when you have

451
00:18:36,080 --> 00:18:36,960
um

452
00:18:36,960 --> 00:18:38,559
maven um

453
00:18:38,559 --> 00:18:41,960
central hub

454
00:18:43,440 --> 00:18:46,400
there are more than 200 of these indexes

455
00:18:46,400 --> 00:18:47,520
and you need

456
00:18:47,520 --> 00:18:49,919
you need to gather this information and

457
00:18:49,919 --> 00:18:51,919
provide it to the users and you need to

458
00:18:51,919 --> 00:18:53,919
deduplify it and

459
00:18:53,919 --> 00:18:55,840
find gaps and

460
00:18:55,840 --> 00:18:57,280
remediate

461
00:18:57,280 --> 00:18:59,840
typos and work with this information

462
00:18:59,840 --> 00:19:00,720
so

463
00:19:00,720 --> 00:19:03,360
when you look at your component base

464
00:19:03,360 --> 00:19:05,520
and you monitor your component base

465
00:19:05,520 --> 00:19:07,280
you begin by

466
00:19:07,280 --> 00:19:10,400
creating a warehouse of artifacts there

467
00:19:10,400 --> 00:19:11,280
are

468
00:19:11,280 --> 00:19:13,120
various

469
00:19:13,120 --> 00:19:14,559
types

470
00:19:14,559 --> 00:19:16,960
of solutions you can use here

471
00:19:16,960 --> 00:19:19,520
you can use git club

472
00:19:19,520 --> 00:19:21,840
or anything else some of it is on the

473
00:19:21,840 --> 00:19:24,720
slide then you have either a plugging

474
00:19:24,720 --> 00:19:27,360
with sca or you use some programmatic

475
00:19:27,360 --> 00:19:29,760
interfaces

476
00:19:29,760 --> 00:19:32,480
and you get information

477
00:19:32,480 --> 00:19:35,919
on whether or not this goes through the

478
00:19:35,919 --> 00:19:38,799
quality gates or security gates

479
00:19:38,799 --> 00:19:39,600
that

480
00:19:39,600 --> 00:19:43,200
is identified in your sca policy

481
00:19:43,200 --> 00:19:45,280
and after that it's either guaranteed or

482
00:19:45,280 --> 00:19:47,760
goes on for development if it goes in

483
00:19:47,760 --> 00:19:50,080
guaranteeing you get notification and

484
00:19:50,080 --> 00:19:52,240
you keep working you keep checking the

485
00:19:52,240 --> 00:19:54,720
package

486
00:19:54,799 --> 00:19:57,360
for example if it's a lunch after a

487
00:19:57,360 --> 00:19:58,480
particular

488
00:19:58,480 --> 00:20:00,799
date you put it on test analysis or you

489
00:20:00,799 --> 00:20:05,400
try to understand what goes on with it

490
00:20:06,240 --> 00:20:08,480
same mode as

491
00:20:08,480 --> 00:20:13,360
the second mode as a sca used for ci cd

492
00:20:14,000 --> 00:20:16,559
so what we have is gitlab team city

493
00:20:16,559 --> 00:20:19,919
jenkins on the one hand on one side and

494
00:20:19,919 --> 00:20:22,799
sca system that checks our policies and

495
00:20:22,799 --> 00:20:24,480
what it does

496
00:20:24,480 --> 00:20:26,960
it fills our software bill of materials

497
00:20:26,960 --> 00:20:28,880
and we can play with it

498
00:20:28,880 --> 00:20:31,679
and it form forms particular logs that

499
00:20:31,679 --> 00:20:33,679
you can look at and

500
00:20:33,679 --> 00:20:36,880
importantly it also blocks build

501
00:20:36,880 --> 00:20:39,120
so

502
00:20:39,760 --> 00:20:43,039
if we see something

503
00:20:43,280 --> 00:20:45,120
and we didn't have a

504
00:20:45,120 --> 00:20:47,200
firewall we can catch it

505
00:20:47,200 --> 00:20:49,520
before it goes to the build phase and

506
00:20:49,520 --> 00:20:52,559
sca continuous monitoring

507
00:20:52,559 --> 00:20:54,960
is when you

508
00:20:54,960 --> 00:20:57,200
obviously continuously

509
00:20:57,200 --> 00:20:59,440
look at vulnerabilities

510
00:20:59,440 --> 00:21:00,799
emerging

511
00:21:00,799 --> 00:21:02,640
and we understand

512
00:21:02,640 --> 00:21:04,720
that the older things are more

513
00:21:04,720 --> 00:21:06,320
vulnerable

514
00:21:06,320 --> 00:21:08,480
well vulnerability doesn't really change

515
00:21:08,480 --> 00:21:11,280
in time if packages do not get changed

516
00:21:11,280 --> 00:21:12,880
but

517
00:21:12,880 --> 00:21:15,520
vulnerabilities tend to get identified

518
00:21:15,520 --> 00:21:17,600
publicly identified

519
00:21:17,600 --> 00:21:20,240
and if they're public then they are

520
00:21:20,240 --> 00:21:23,200
scannable and exploitable

521
00:21:23,200 --> 00:21:25,440
policies differ

522
00:21:25,440 --> 00:21:26,880
in this case

523
00:21:26,880 --> 00:21:30,559
we are talking about sca policy

524
00:21:30,559 --> 00:21:33,120
policies

525
00:21:34,640 --> 00:21:37,039
so it's ifttt

526
00:21:37,039 --> 00:21:40,158
if this then that

527
00:21:41,520 --> 00:21:46,000
you may find a critical vulnerability

528
00:21:46,000 --> 00:21:48,159
that

529
00:21:48,159 --> 00:21:50,640
is not good enough

530
00:21:50,640 --> 00:21:52,799
you get

531
00:21:52,799 --> 00:21:57,400
a package in the top list

532
00:21:58,559 --> 00:22:02,480
or you have problem with the license

533
00:22:04,480 --> 00:22:07,200
sca is something that does it it's just

534
00:22:07,200 --> 00:22:09,840
part of security development if you make

535
00:22:09,840 --> 00:22:12,159
use of component that is not legitimate

536
00:22:12,159 --> 00:22:14,559
to be used then at some point of time

537
00:22:14,559 --> 00:22:16,720
someone would come to you and say

538
00:22:16,720 --> 00:22:18,960
uh that's

539
00:22:18,960 --> 00:22:21,520
that's not that's not

540
00:22:21,520 --> 00:22:23,919
acceptable not necessarily your legal

541
00:22:23,919 --> 00:22:26,919
specialist

542
00:22:27,120 --> 00:22:29,440
and at some point of time you have so

543
00:22:29,440 --> 00:22:31,360
many things attached to this

544
00:22:31,360 --> 00:22:34,158
non-legitimate

545
00:22:34,559 --> 00:22:35,360
part

546
00:22:35,360 --> 00:22:37,840
that it's very difficult to take it out

547
00:22:37,840 --> 00:22:39,360
so what

548
00:22:39,360 --> 00:22:40,799
you need to pay attention to when

549
00:22:40,799 --> 00:22:42,960
working with sca identifying

550
00:22:42,960 --> 00:22:45,280
vulnerabilities would be the first one

551
00:22:45,280 --> 00:22:47,120
you need to understand what are the

552
00:22:47,120 --> 00:22:48,880
databases used

553
00:22:48,880 --> 00:22:51,280
what are the feeds

554
00:22:51,280 --> 00:22:52,960
used to get information on

555
00:22:52,960 --> 00:22:55,360
vulnerabilities because this is the most

556
00:22:55,360 --> 00:22:56,960
important field it's very important to

557
00:22:56,960 --> 00:22:58,240
understand

558
00:22:58,240 --> 00:23:00,880
uh how

559
00:23:01,760 --> 00:23:05,200
deep the database is and

560
00:23:05,200 --> 00:23:06,720
i'm going to

561
00:23:06,720 --> 00:23:10,720
discuss it and we find

562
00:23:10,720 --> 00:23:14,159
vulnerabilities in two public uh hubs in

563
00:23:14,159 --> 00:23:17,120
cva database and

564
00:23:17,120 --> 00:23:20,320
ghc ghca and also some commercial

565
00:23:20,320 --> 00:23:23,320
databases

566
00:23:23,919 --> 00:23:27,120
it's being updated analysts

567
00:23:27,120 --> 00:23:29,840
work with it

568
00:23:33,039 --> 00:23:37,799
well not necessarily in a good way

569
00:23:41,520 --> 00:23:44,080
and sometimes it's rather difficult to

570
00:23:44,080 --> 00:23:45,600
make you that you you really need to

571
00:23:45,600 --> 00:23:48,640
connect correct the databases and

572
00:23:48,640 --> 00:23:51,840
do it iteratively

573
00:23:52,640 --> 00:23:54,320
and then i address this to others in

574
00:23:54,320 --> 00:23:56,400
order to work with this databases you

575
00:23:56,400 --> 00:23:57,760
have to

576
00:23:57,760 --> 00:24:00,480
make use of various identifiers

577
00:24:00,480 --> 00:24:02,640
more than 50 with more than 50 versions

578
00:24:02,640 --> 00:24:05,200
of packages and the vendor names changed

579
00:24:05,200 --> 00:24:08,880
and number names of packages changed

580
00:24:08,880 --> 00:24:10,000
you

581
00:24:10,000 --> 00:24:13,760
really need to understand how to

582
00:24:13,760 --> 00:24:15,120
go about it

583
00:24:15,120 --> 00:24:18,880
so in order to identify the package you

584
00:24:18,880 --> 00:24:21,840
may have several practices

585
00:24:21,840 --> 00:24:23,600
common platform enumeration the so

586
00:24:23,600 --> 00:24:25,279
called cpe and

587
00:24:25,279 --> 00:24:28,960
package url or perl

588
00:24:28,960 --> 00:24:31,520
the second one is less

589
00:24:31,520 --> 00:24:33,039
used

590
00:24:33,039 --> 00:24:36,240
but not yet

591
00:24:36,240 --> 00:24:39,880
deeply implemented so cpe is a special

592
00:24:39,880 --> 00:24:43,039
identifier that allows you to

593
00:24:43,039 --> 00:24:45,520
come up with a special factor that would

594
00:24:45,520 --> 00:24:47,120
tell you everything about what kind of

595
00:24:47,120 --> 00:24:49,840
software it is it also describes some

596
00:24:49,840 --> 00:24:52,240
hardware issues

597
00:24:52,240 --> 00:24:55,760
and a vulnerability match is done using

598
00:24:55,760 --> 00:24:58,159
cpe dictionary and i'm going to have a

599
00:24:58,159 --> 00:25:00,480
separate state

600
00:25:00,480 --> 00:25:01,840
slide on it

601
00:25:01,840 --> 00:25:03,760
so you see the vector

602
00:25:03,760 --> 00:25:07,120
but it's kind of not native

603
00:25:07,360 --> 00:25:12,760
uh we also have package url or pearl

604
00:25:14,720 --> 00:25:17,120
a lot of developers sca system

605
00:25:17,120 --> 00:25:19,678
developers

606
00:25:23,039 --> 00:25:24,240
take it

607
00:25:24,240 --> 00:25:27,120
seriously it's more native and it's

608
00:25:27,120 --> 00:25:28,400
readable

609
00:25:28,400 --> 00:25:29,440
it has

610
00:25:29,440 --> 00:25:31,679
the attributes it doesn't have

611
00:25:31,679 --> 00:25:32,960
the hardware

612
00:25:32,960 --> 00:25:36,000
and there is a prop identification

613
00:25:36,000 --> 00:25:38,720
problem if you use it in cpe

614
00:25:38,720 --> 00:25:41,440
mode there is a human factor

615
00:25:41,440 --> 00:25:43,520
that may be a problem the problem with

616
00:25:43,520 --> 00:25:46,799
cpe dictionary is that dictionary are

617
00:25:46,799 --> 00:25:48,000
not

618
00:25:48,000 --> 00:25:50,400
are sometimes not

619
00:25:50,400 --> 00:25:52,960
not really full people make mistakes

620
00:25:52,960 --> 00:25:55,200
people make typos

621
00:25:55,200 --> 00:25:57,039
some

622
00:25:57,039 --> 00:25:59,520
sometimes the programming language is

623
00:25:59,520 --> 00:26:02,480
not mentioned or some other important

624
00:26:02,480 --> 00:26:04,960
attributes are not mentioned

625
00:26:04,960 --> 00:26:07,360
or vendor name may have changed

626
00:26:07,360 --> 00:26:09,600
products name may have changed open

627
00:26:09,600 --> 00:26:11,440
source as it is right

628
00:26:11,440 --> 00:26:13,120
uh everything

629
00:26:13,120 --> 00:26:16,719
keeps changing at all times

630
00:26:19,679 --> 00:26:21,440
and obviously

631
00:26:21,440 --> 00:26:25,440
you can do something about it

632
00:26:25,440 --> 00:26:29,840
but it's it's it's still important to

633
00:26:29,840 --> 00:26:32,320
it's still important to do something

634
00:26:32,320 --> 00:26:34,960
and you have to make use

635
00:26:34,960 --> 00:26:38,240
of particular algorithms of natural

636
00:26:38,240 --> 00:26:40,960
language processing

637
00:26:40,960 --> 00:26:41,919
doing

638
00:26:41,919 --> 00:26:43,120
very minimum

639
00:26:43,120 --> 00:26:45,440
machine learning to find and test

640
00:26:45,440 --> 00:26:47,120
correspondent

641
00:26:47,120 --> 00:26:49,440
aspects

642
00:26:49,440 --> 00:26:53,320
and it all gets

643
00:26:55,600 --> 00:26:58,559
got gets added by manual

644
00:26:58,559 --> 00:27:00,320
rule-based

645
00:27:00,320 --> 00:27:03,279
rule-based search

646
00:27:03,440 --> 00:27:06,000
it's a necessity another problem that i

647
00:27:06,000 --> 00:27:07,440
would like to

648
00:27:07,440 --> 00:27:09,760
talk to you about is transitivity of

649
00:27:09,760 --> 00:27:11,279
dependencies okay we have five

650
00:27:11,279 --> 00:27:12,400
components

651
00:27:12,400 --> 00:27:14,559
ten components

652
00:27:14,559 --> 00:27:17,679
and it's okay we can check it manually

653
00:27:17,679 --> 00:27:20,799
well cool but these components are

654
00:27:20,799 --> 00:27:24,480
dependent and these dependencies

655
00:27:24,480 --> 00:27:25,279
can

656
00:27:25,279 --> 00:27:28,960
mutually impact each other

657
00:27:28,960 --> 00:27:31,039
have you um

658
00:27:31,039 --> 00:27:33,279
have you do you know about

659
00:27:33,279 --> 00:27:36,240
log for xiao okay you have great

660
00:27:36,240 --> 00:27:37,840
how about search

661
00:27:37,840 --> 00:27:40,159
in your component days

662
00:27:40,159 --> 00:27:43,279
right you searched for it

663
00:27:43,279 --> 00:27:45,760
so this is a well-known topic and those

664
00:27:45,760 --> 00:27:47,919
of you who search for this kind of

665
00:27:47,919 --> 00:27:49,520
vulnerabilities would confirm me and

666
00:27:49,520 --> 00:27:51,760
saying that it's not

667
00:27:51,760 --> 00:27:54,640
always that you can directly find it

668
00:27:54,640 --> 00:27:56,399
through i mean through direct

669
00:27:56,399 --> 00:27:57,760
dependencies

670
00:27:57,760 --> 00:28:00,480
so let's do problem setting first it's

671
00:28:00,480 --> 00:28:01,679
pretty easy

672
00:28:01,679 --> 00:28:03,520
we have this

673
00:28:03,520 --> 00:28:06,240
uh well-known group of vulnerabilities

674
00:28:06,240 --> 00:28:09,440
that we started to identify uh

675
00:28:09,440 --> 00:28:13,840
on the 10th of um december 2021

676
00:28:13,840 --> 00:28:14,960
and we

677
00:28:14,960 --> 00:28:17,279
started to remediate it it was very

678
00:28:17,279 --> 00:28:19,360
unpleasant thing

679
00:28:19,360 --> 00:28:20,960
and

680
00:28:20,960 --> 00:28:24,399
it was all over the news

681
00:28:25,679 --> 00:28:27,600
so a lot of devops

682
00:28:27,600 --> 00:28:31,840
devsecops a lot of developers

683
00:28:32,720 --> 00:28:34,880
they started to search for these kind of

684
00:28:34,880 --> 00:28:37,760
vulnerabilities

685
00:28:38,880 --> 00:28:40,960
all

686
00:28:40,960 --> 00:28:45,559
all the way till it got remediated

687
00:28:48,960 --> 00:28:50,559
and actually

688
00:28:50,559 --> 00:28:53,200
they thought was it to go further or to

689
00:28:53,200 --> 00:28:55,679
get back to the previous version of 10

690
00:28:55,679 --> 00:28:58,919
years ago

691
00:28:59,919 --> 00:29:01,919
so here you see

692
00:29:01,919 --> 00:29:04,080
a google security

693
00:29:04,080 --> 00:29:05,919
graphic representation

694
00:29:05,919 --> 00:29:09,520
as of december 2021

695
00:29:09,520 --> 00:29:11,840
after the first vulnerability was

696
00:29:11,840 --> 00:29:14,880
identified we have all maven packages in

697
00:29:14,880 --> 00:29:16,480
uh

698
00:29:16,480 --> 00:29:19,360
maven central artifacts

699
00:29:19,360 --> 00:29:22,240
and we have

700
00:29:22,240 --> 00:29:23,840
the numbers that are vulnerable and in

701
00:29:23,840 --> 00:29:25,840
the first

702
00:29:25,840 --> 00:29:28,799
days around 10 000 were fixed

703
00:29:28,799 --> 00:29:31,520
and i i think it's a nice rate for open

704
00:29:31,520 --> 00:29:34,240
source you know everybody going ahead

705
00:29:34,240 --> 00:29:35,679
and trying to fix it and i'm going to

706
00:29:35,679 --> 00:29:37,760
explain why it's cool but then there are

707
00:29:37,760 --> 00:29:40,399
30 000 packages that haven't been

708
00:29:40,399 --> 00:29:42,559
repeated six days everybody's shouting

709
00:29:42,559 --> 00:29:45,840
out it was like almost like a pandemic

710
00:29:45,840 --> 00:29:48,240
everybody were going ahead and searching

711
00:29:48,240 --> 00:29:51,919
for it i probably am exaggerating a bit

712
00:29:51,919 --> 00:29:56,159
so why it's not that simple to

713
00:29:56,159 --> 00:29:58,240
remediate log for shell problem because

714
00:29:58,240 --> 00:30:00,320
it's deeper

715
00:30:00,320 --> 00:30:03,279
if you use log for uh gene directively

716
00:30:03,279 --> 00:30:05,279
and you work with direct dependencies

717
00:30:05,279 --> 00:30:07,200
but if it comes to you through

718
00:30:07,200 --> 00:30:09,440
transitive dependencies it's very dif

719
00:30:09,440 --> 00:30:12,080
difficult it's it's much more difficult

720
00:30:12,080 --> 00:30:14,960
in this picture you already have

721
00:30:14,960 --> 00:30:18,320
certain transitive dependencies

722
00:30:18,320 --> 00:30:20,240
if you have direct dependencies then you

723
00:30:20,240 --> 00:30:22,480
remediate it and that's it

724
00:30:22,480 --> 00:30:23,760
but

725
00:30:23,760 --> 00:30:26,320
you also may have transitive

726
00:30:26,320 --> 00:30:29,039
dependencies the dependencies who is

727
00:30:29,039 --> 00:30:32,320
going to remediate that

728
00:30:33,600 --> 00:30:37,440
we remediated the

729
00:30:37,440 --> 00:30:39,600
vulnerability identified but how about

730
00:30:39,600 --> 00:30:41,919
the maintainer of your

731
00:30:41,919 --> 00:30:45,440
transit dependency source

732
00:30:45,440 --> 00:30:47,279
how to go about that shall you do it

733
00:30:47,279 --> 00:30:48,559
manually

734
00:30:48,559 --> 00:30:51,600
and then update if you find it important

735
00:30:51,600 --> 00:30:54,000
or shall you maintain it in

736
00:30:54,000 --> 00:30:56,720
in any way

737
00:30:58,240 --> 00:30:59,679
you need to do it

738
00:30:59,679 --> 00:31:04,519
and it takes time it takes a lot of time

739
00:31:07,440 --> 00:31:10,640
and speaking of uh depth of penetration

740
00:31:10,640 --> 00:31:12,720
same graph i think it's it's rather

741
00:31:12,720 --> 00:31:15,200
interesting if you look at those 40 000

742
00:31:15,200 --> 00:31:16,840
packages

743
00:31:16,840 --> 00:31:19,919
that had in it log for g look for

744
00:31:19,919 --> 00:31:21,360
channel um

745
00:31:21,360 --> 00:31:23,678
issue

746
00:31:23,919 --> 00:31:26,559
not log for g log for shell

747
00:31:26,559 --> 00:31:28,080
you would see that

748
00:31:28,080 --> 00:31:30,640
in terms of direct dependencies

749
00:31:30,640 --> 00:31:33,120
we only have what around fifteen percent

750
00:31:33,120 --> 00:31:34,559
of them

751
00:31:34,559 --> 00:31:38,720
only fifteen percent with touch were um

752
00:31:38,720 --> 00:31:40,799
was uh direct

753
00:31:40,799 --> 00:31:43,600
while the peak of melbourne is is in the

754
00:31:43,600 --> 00:31:46,159
sixth level of dependencies if you

755
00:31:46,159 --> 00:31:49,360
analyze all log for shells we see

756
00:31:49,360 --> 00:31:52,559
that it's a big big tree a branchy tree

757
00:31:52,559 --> 00:31:54,080
and you need to be

758
00:31:54,080 --> 00:31:56,559
uh knowledgeable about the fact that you

759
00:31:56,559 --> 00:31:58,640
have a branchy trees and

760
00:31:58,640 --> 00:32:03,279
you have them nested in one another

761
00:32:04,640 --> 00:32:07,120
and you necessarily have to use

762
00:32:07,120 --> 00:32:08,799
automation

763
00:32:08,799 --> 00:32:10,960
if you're a data scientist

764
00:32:10,960 --> 00:32:12,480
or researcher and you have three

765
00:32:12,480 --> 00:32:14,080
dependencies

766
00:32:14,080 --> 00:32:14,960
then

767
00:32:14,960 --> 00:32:16,640
yes you can just

768
00:32:16,640 --> 00:32:20,480
put the last version center to that

769
00:32:20,480 --> 00:32:23,120
but it's not really

770
00:32:23,120 --> 00:32:25,679
a good approach you really want to use

771
00:32:25,679 --> 00:32:28,159
right package managers and managing for

772
00:32:28,159 --> 00:32:32,000
the security information around you

773
00:32:34,399 --> 00:32:37,440
i could see you with nodding your hands

774
00:32:37,440 --> 00:32:40,399
when i said that 10 000 packages in six

775
00:32:40,399 --> 00:32:44,159
days is fast well indeed it is fast and

776
00:32:44,159 --> 00:32:47,120
this is something that is changing

777
00:32:47,120 --> 00:32:48,880
considerably in the market eight years

778
00:32:48,880 --> 00:32:50,240
ago

779
00:32:50,240 --> 00:32:51,760
an update

780
00:32:51,760 --> 00:32:52,480
uh

781
00:32:52,480 --> 00:32:54,000
i mean time to respond to a

782
00:32:54,000 --> 00:32:57,000
vulnerability

783
00:32:57,600 --> 00:32:59,600
would be

784
00:32:59,600 --> 00:33:03,439
slightly more than 12 months

785
00:33:03,840 --> 00:33:05,279
and that was

786
00:33:05,279 --> 00:33:07,760
when we already had devops that allows

787
00:33:07,760 --> 00:33:09,679
us to make thousands to release releases

788
00:33:09,679 --> 00:33:11,120
per day

789
00:33:11,120 --> 00:33:13,840
when defcecops manifesto and all that

790
00:33:13,840 --> 00:33:16,159
since the 2012 we all know that it's

791
00:33:16,159 --> 00:33:20,559
cool and great but in 2014 as of 2014 it

792
00:33:20,559 --> 00:33:22,960
takes around 300 days

793
00:33:22,960 --> 00:33:25,679
to respond and remediate a vulnerability

794
00:33:25,679 --> 00:33:29,200
in 2018 it's

795
00:33:29,399 --> 00:33:33,519
158 days and in the year 2021 it's 30

796
00:33:33,519 --> 00:33:35,279
days

797
00:33:35,279 --> 00:33:38,960
and it's fast 30 days is already fast

798
00:33:38,960 --> 00:33:40,880
if you do it if you're specialized on

799
00:33:40,880 --> 00:33:42,240
that

800
00:33:42,240 --> 00:33:44,159
you can do it even faster or at least

801
00:33:44,159 --> 00:33:46,000
they think they can do it faster but

802
00:33:46,000 --> 00:33:50,640
anyway if in order to do it fast and uh

803
00:33:50,640 --> 00:33:53,440
effective and efficient you really need

804
00:33:53,440 --> 00:33:57,919
to make use of automation

805
00:33:58,799 --> 00:34:00,559
so next thing i want to mention in this

806
00:34:00,559 --> 00:34:01,600
context

807
00:34:01,600 --> 00:34:03,200
speaking of

808
00:34:03,200 --> 00:34:04,720
trends and

809
00:34:04,720 --> 00:34:07,679
challenges

810
00:34:07,679 --> 00:34:10,000
well i'm

811
00:34:10,000 --> 00:34:11,760
talking to you about all kinds of

812
00:34:11,760 --> 00:34:14,239
problems like and

813
00:34:14,239 --> 00:34:16,719
dictionaries that lack some data

814
00:34:16,719 --> 00:34:18,480
but well fast

815
00:34:18,480 --> 00:34:20,399
is another issue

816
00:34:20,399 --> 00:34:23,359
to know the known is not enough

817
00:34:23,359 --> 00:34:25,359
to know the known vulnerability and work

818
00:34:25,359 --> 00:34:28,239
with them is not enough

819
00:34:28,239 --> 00:34:31,918
we scan it and we find all the packages

820
00:34:31,918 --> 00:34:34,079
with all the known vulnerabilities we

821
00:34:34,079 --> 00:34:35,760
don't have any up to date we found all

822
00:34:35,760 --> 00:34:37,359
the vulnerabilities remediated it

823
00:34:37,359 --> 00:34:40,719
everything is cool but

824
00:34:42,560 --> 00:34:44,800
it doesn't work this way does it

825
00:34:44,800 --> 00:34:49,040
i think you all understand that

826
00:34:49,040 --> 00:34:52,159
that's why there is this

827
00:34:52,159 --> 00:34:53,119
motto

828
00:34:53,119 --> 00:34:56,399
sas dust and sca it has to work

829
00:34:56,399 --> 00:34:57,520
as a group

830
00:34:57,520 --> 00:35:00,320
and it works depending on tasks

831
00:35:00,320 --> 00:35:03,839
but again sca system

832
00:35:04,240 --> 00:35:06,320
looks through open source components and

833
00:35:06,320 --> 00:35:08,480
identifies the vulnerabilities

834
00:35:08,480 --> 00:35:09,520
but

835
00:35:09,520 --> 00:35:12,480
sca wouldn't analyze the code right

836
00:35:12,480 --> 00:35:15,760
as real at least the trend today

837
00:35:15,760 --> 00:35:16,880
is that

838
00:35:16,880 --> 00:35:20,720
major vendors now try to add sas on top

839
00:35:20,720 --> 00:35:22,800
of the sca

840
00:35:22,800 --> 00:35:25,200
a white source a cenotep

841
00:35:25,200 --> 00:35:26,960
all of them

842
00:35:26,960 --> 00:35:28,880
trying to do something about it

843
00:35:28,880 --> 00:35:32,160
but the reverse

844
00:35:32,160 --> 00:35:33,920
is true as well

845
00:35:33,920 --> 00:35:36,640
i want to draw attention to the fact

846
00:35:36,640 --> 00:35:38,720
that if you scan

847
00:35:38,720 --> 00:35:41,119
all of your open source

848
00:35:41,119 --> 00:35:43,680
which is a big chunk of your database

849
00:35:43,680 --> 00:35:45,760
who's going to go and then go ahead and

850
00:35:45,760 --> 00:35:47,040
analyze it

851
00:35:47,040 --> 00:35:49,280
in the year 2021

852
00:35:49,280 --> 00:35:51,520
they took all the pipey

853
00:35:51,520 --> 00:35:54,000
and they

854
00:35:56,000 --> 00:35:59,839
put zest on top of it

855
00:36:01,760 --> 00:36:03,040
and 50

856
00:36:03,040 --> 00:36:06,160
of packages are vulnerable

857
00:36:06,160 --> 00:36:08,079
if you now look deeper or you read the

858
00:36:08,079 --> 00:36:11,119
article you'll see that

859
00:36:11,119 --> 00:36:12,960
uh

860
00:36:12,960 --> 00:36:15,760
there are vulnerabilities uh

861
00:36:15,760 --> 00:36:16,720
that have

862
00:36:16,720 --> 00:36:19,440
rather you know sizable substantial

863
00:36:19,440 --> 00:36:23,520
like um injections and all that

864
00:36:23,520 --> 00:36:25,839
and you you you want to do something

865
00:36:25,839 --> 00:36:28,320
about it right you want to work with it

866
00:36:28,320 --> 00:36:31,760
and you can't work with it

867
00:36:34,640 --> 00:36:37,440
i just buy sass without component-based

868
00:36:37,440 --> 00:36:41,480
analysis without sca

869
00:36:42,480 --> 00:36:45,520
you may believe that sas is really cool

870
00:36:45,520 --> 00:36:46,560
but

871
00:36:46,560 --> 00:36:48,480
we do understand that open source

872
00:36:48,480 --> 00:36:51,880
project code

873
00:36:54,400 --> 00:36:57,200
we have so we have so so much of this

874
00:36:57,200 --> 00:36:59,760
open source code that you have to you

875
00:36:59,760 --> 00:37:00,560
know

876
00:37:00,560 --> 00:37:02,960
do something about it and you can't go

877
00:37:02,960 --> 00:37:04,400
um with

878
00:37:04,400 --> 00:37:07,440
sas so a ca adds sass

879
00:37:07,440 --> 00:37:08,960
and sass

880
00:37:08,960 --> 00:37:11,280
start to work in

881
00:37:11,280 --> 00:37:13,599
sca mode so they kind of try to

882
00:37:13,599 --> 00:37:16,160
integrate

883
00:37:16,560 --> 00:37:18,880
and probably even mutually displace each

884
00:37:18,880 --> 00:37:21,359
other at one point

885
00:37:21,359 --> 00:37:22,960
another

886
00:37:22,960 --> 00:37:24,240
aspect

887
00:37:24,240 --> 00:37:26,240
that now lips to the eye while we've

888
00:37:26,240 --> 00:37:30,320
been thinking about it for uh ten years

889
00:37:30,320 --> 00:37:33,359
i would say it's karma

890
00:37:33,359 --> 00:37:35,040
when i was getting ready for this

891
00:37:35,040 --> 00:37:37,760
presentation i thought of telling you a

892
00:37:37,760 --> 00:37:40,640
few words about what happened

893
00:37:40,640 --> 00:37:42,079
lately

894
00:37:42,079 --> 00:37:45,280
that in the last two years we have a lot

895
00:37:45,280 --> 00:37:47,119
of deletion of packages from package

896
00:37:47,119 --> 00:37:50,560
indexes just because the developer

897
00:37:50,560 --> 00:37:53,440
wanted to do it

898
00:37:56,320 --> 00:37:58,079
and i'm going to

899
00:37:58,079 --> 00:38:01,040
tell you about it but one year ago

900
00:38:01,040 --> 00:38:03,440
i was making a presentation

901
00:38:03,440 --> 00:38:06,320
on sca

902
00:38:09,839 --> 00:38:12,640
and i was told that yeah it's all right

903
00:38:12,640 --> 00:38:14,720
but open source is such a good thing it

904
00:38:14,720 --> 00:38:16,400
can't be vulnerable it's all in your

905
00:38:16,400 --> 00:38:17,760
head

906
00:38:17,760 --> 00:38:20,000
all the vulnerabilities are in your head

907
00:38:20,000 --> 00:38:22,400
yes i laughed at them

908
00:38:22,400 --> 00:38:23,280
really

909
00:38:23,280 --> 00:38:25,920
out loud

910
00:38:27,040 --> 00:38:29,040
i mean

911
00:38:29,040 --> 00:38:30,400
you are

912
00:38:30,400 --> 00:38:34,240
deep into the process and you know how

913
00:38:34,240 --> 00:38:36,160
how it works and how it is being studied

914
00:38:36,160 --> 00:38:38,960
and you understand that

915
00:38:38,960 --> 00:38:42,000
no this is the code and it's vulnerable

916
00:38:42,000 --> 00:38:43,839
go ahead and try to do something about

917
00:38:43,839 --> 00:38:46,000
it

918
00:38:46,000 --> 00:38:48,079
right

919
00:38:48,079 --> 00:38:51,760
well i explained myself i was very

920
00:38:51,760 --> 00:38:52,720
nice

921
00:38:52,720 --> 00:38:54,800
in doing it

922
00:38:54,800 --> 00:38:56,720
but the person who was posing the

923
00:38:56,720 --> 00:38:59,359
question didn't agree with me

924
00:38:59,359 --> 00:39:01,440
time has passed

925
00:39:01,440 --> 00:39:05,280
and i think i now understand this guy

926
00:39:05,280 --> 00:39:06,880
and yes you can be

927
00:39:06,880 --> 00:39:07,920
um

928
00:39:07,920 --> 00:39:08,800
you can

929
00:39:08,800 --> 00:39:10,640
be very

930
00:39:10,640 --> 00:39:14,598
verbose about it

931
00:39:25,040 --> 00:39:27,359
the developers

932
00:39:27,359 --> 00:39:29,520
started to behave

933
00:39:29,520 --> 00:39:34,560
misbehave deleting versions of packages

934
00:39:38,000 --> 00:39:39,839
while the packages are very actively

935
00:39:39,839 --> 00:39:43,839
used and it's an issue

936
00:39:44,000 --> 00:39:47,680
and package in this owners are not just

937
00:39:47,680 --> 00:39:50,320
like microsoft

938
00:39:50,320 --> 00:39:51,200
but

939
00:39:51,200 --> 00:39:54,880
npm and pipey

940
00:39:54,880 --> 00:39:56,880
and others

941
00:39:56,880 --> 00:39:58,079
and people

942
00:39:58,079 --> 00:40:00,880
people's attitude dif attitudes differ

943
00:40:00,880 --> 00:40:04,079
let me give you some food for thought

944
00:40:04,079 --> 00:40:05,520
we

945
00:40:05,520 --> 00:40:07,920
let's say we have we had

946
00:40:07,920 --> 00:40:09,920
google play and

947
00:40:09,920 --> 00:40:13,359
app store what happened to these apps

948
00:40:13,359 --> 00:40:15,440
they're being checked

949
00:40:15,440 --> 00:40:18,560
and sometimes they checked for security

950
00:40:18,560 --> 00:40:20,960
in open source

951
00:40:20,960 --> 00:40:23,760
and again it's just by way of analogy

952
00:40:23,760 --> 00:40:26,000
can you imagine in open source someone

953
00:40:26,000 --> 00:40:27,520
to

954
00:40:27,520 --> 00:40:30,800
find resource and stamina

955
00:40:30,800 --> 00:40:33,359
to check all the packages that come into

956
00:40:33,359 --> 00:40:34,960
the open source

957
00:40:34,960 --> 00:40:39,839
i think it would just freeze the build

958
00:40:40,480 --> 00:40:41,680
well

959
00:40:41,680 --> 00:40:44,480
probably people would start to actually

960
00:40:44,480 --> 00:40:46,319
look for vulnerabilities and the market

961
00:40:46,319 --> 00:40:48,480
would grow

962
00:40:48,480 --> 00:40:49,760
and

963
00:40:49,760 --> 00:40:52,720
it would be a positive thing

964
00:40:52,720 --> 00:40:55,599
but again if you limit the packages

965
00:40:55,599 --> 00:40:57,200
coming

966
00:40:57,200 --> 00:40:58,960
it's not going to

967
00:40:58,960 --> 00:41:00,800
work to the benefit of the

968
00:41:00,800 --> 00:41:02,000
community

969
00:41:02,000 --> 00:41:04,400
because open source is open and this is

970
00:41:04,400 --> 00:41:06,640
the way you have to work with it

971
00:41:06,640 --> 00:41:08,720
and yes you can

972
00:41:08,720 --> 00:41:10,319
take measures

973
00:41:10,319 --> 00:41:12,240
say a popular

974
00:41:12,240 --> 00:41:16,079
packet cannot be deleted or if it is

975
00:41:16,079 --> 00:41:18,720
deleted then it has to give

976
00:41:18,720 --> 00:41:21,839
some certain time

977
00:41:23,520 --> 00:41:25,040
for people to catch something if they

978
00:41:25,040 --> 00:41:26,079
want to

979
00:41:26,079 --> 00:41:28,160
so this is one thing

980
00:41:28,160 --> 00:41:29,359
and this is

981
00:41:29,359 --> 00:41:31,119
related to

982
00:41:31,119 --> 00:41:34,119
um

983
00:41:35,599 --> 00:41:38,000
us to the security and to

984
00:41:38,000 --> 00:41:40,240
the uh you know mental image of

985
00:41:40,240 --> 00:41:43,118
vulnerabilities

986
00:41:43,920 --> 00:41:48,680
sometimes people introduce malware

987
00:41:51,520 --> 00:41:54,400
and they kind of

988
00:41:54,960 --> 00:41:56,640
turn

989
00:41:56,640 --> 00:42:00,560
turn the arms on open source community

990
00:42:00,560 --> 00:42:02,319
and create vulnerabilities and it's a

991
00:42:02,319 --> 00:42:04,000
fact and everybody knows that and it

992
00:42:04,000 --> 00:42:05,359
exists

993
00:42:05,359 --> 00:42:06,319
and

994
00:42:06,319 --> 00:42:10,960
if we're talking about injecting malware

995
00:42:12,960 --> 00:42:14,720
it gets vulnerability code and it's

996
00:42:14,720 --> 00:42:16,400
identifiable

997
00:42:16,400 --> 00:42:19,599
it's identifiable by sca

998
00:42:19,599 --> 00:42:21,760
or

999
00:42:21,760 --> 00:42:24,640
sometimes even by fast

1000
00:42:24,640 --> 00:42:26,079
if you wish to

1001
00:42:26,079 --> 00:42:27,359
read all the

1002
00:42:27,359 --> 00:42:28,839
updates of

1003
00:42:28,839 --> 00:42:31,599
all the new versions

1004
00:42:31,599 --> 00:42:33,440
which is

1005
00:42:33,440 --> 00:42:36,160
quite a task

1006
00:42:36,319 --> 00:42:38,480
you also need to follow popularity of

1007
00:42:38,480 --> 00:42:40,560
authors and how it all works

1008
00:42:40,560 --> 00:42:42,880
and if the person has compromised his

1009
00:42:42,880 --> 00:42:45,599
and his reputation

1010
00:42:45,599 --> 00:42:48,000
will should

1011
00:42:48,000 --> 00:42:49,359
check whether he is still in the

1012
00:42:49,359 --> 00:42:52,000
community

1013
00:42:53,680 --> 00:42:55,839
or probably a similar package right from

1014
00:42:55,839 --> 00:42:58,000
aside

1015
00:42:58,000 --> 00:43:00,319
you need to follow it

1016
00:43:00,319 --> 00:43:02,000
and this is an aspect that is not

1017
00:43:02,000 --> 00:43:06,160
related to a codeless it's

1018
00:43:06,160 --> 00:43:08,720
snl

1019
00:43:08,960 --> 00:43:11,200
you need to analyze authors you need to

1020
00:43:11,200 --> 00:43:14,160
analyze package popularity and sca's

1021
00:43:14,160 --> 00:43:18,640
today they analyze package popularity to

1022
00:43:18,640 --> 00:43:21,040
uh to underscore the vulnerabilities

1023
00:43:21,040 --> 00:43:22,720
that might be

1024
00:43:22,720 --> 00:43:24,640
of interest to you

1025
00:43:24,640 --> 00:43:26,720
in conclusion i'd like to say that sca

1026
00:43:26,720 --> 00:43:28,480
is a foundation

1027
00:43:28,480 --> 00:43:30,240
and a way

1028
00:43:30,240 --> 00:43:33,040
and and the preventive means

1029
00:43:33,040 --> 00:43:35,440
and it's not final

1030
00:43:35,440 --> 00:43:37,359
by all means we know that

1031
00:43:37,359 --> 00:43:40,000
after sca not all vulnerabilities are

1032
00:43:40,000 --> 00:43:42,480
found and you really want to get

1033
00:43:42,480 --> 00:43:43,920
integrated with

1034
00:43:43,920 --> 00:43:46,640
the neighboring systems

1035
00:43:46,640 --> 00:43:51,839
and it's a task for sca and sas alike

1036
00:43:52,160 --> 00:43:55,280
but anyhow sca is a way to control the

1037
00:43:55,280 --> 00:43:56,720
situation

1038
00:43:56,720 --> 00:43:59,040
and you get automation

1039
00:43:59,040 --> 00:44:00,720
that is rather straightforward and you

1040
00:44:00,720 --> 00:44:03,119
understand what to do next

1041
00:44:03,119 --> 00:44:04,480
yesterday we

1042
00:44:04,480 --> 00:44:06,839
had a great presentation on security

1043
00:44:06,839 --> 00:44:10,319
champions and i remember a question from

1044
00:44:10,319 --> 00:44:12,400
the audience where to start

1045
00:44:12,400 --> 00:44:14,640
it really depends on

1046
00:44:14,640 --> 00:44:18,240
the security champion person you picked

1047
00:44:18,240 --> 00:44:21,119
but sca is an interesting and

1048
00:44:21,119 --> 00:44:24,240
straightforward thing you just

1049
00:44:24,240 --> 00:44:25,200
use it

1050
00:44:25,200 --> 00:44:28,480
and this is a very interesting way to

1051
00:44:28,480 --> 00:44:30,000
start with

1052
00:44:30,000 --> 00:44:33,119
if you're a newcomer to a security this

1053
00:44:33,119 --> 00:44:35,280
is where you start this is how you start

1054
00:44:35,280 --> 00:44:37,280
to understand that okay this is

1055
00:44:37,280 --> 00:44:39,760
a software and you get the links to

1056
00:44:39,760 --> 00:44:42,000
exploits and then you get smarter and

1057
00:44:42,000 --> 00:44:44,800
you go deeper and work with those deeper

1058
00:44:44,800 --> 00:44:47,200
areas

1059
00:44:48,960 --> 00:44:51,760
it all may be uh fun and you probably

1060
00:44:51,760 --> 00:44:55,040
expected me as a representative of sca

1061
00:44:55,040 --> 00:44:57,119
provided to say something like that sea

1062
00:44:57,119 --> 00:44:59,839
needs to evolutionize

1063
00:44:59,839 --> 00:45:02,480
we still have issues and we know of the

1064
00:45:02,480 --> 00:45:05,480
issues

1065
00:45:06,319 --> 00:45:09,119
like ranking

1066
00:45:10,560 --> 00:45:14,240
like false positives

1067
00:45:16,640 --> 00:45:18,240
like dictionaries dependency

1068
00:45:18,240 --> 00:45:21,520
dictionaries component identification

1069
00:45:21,520 --> 00:45:23,200
looking vulnerabilities

1070
00:45:23,200 --> 00:45:26,079
rca has to be

1071
00:45:26,079 --> 00:45:29,119
more proactive and more integrated with

1072
00:45:29,119 --> 00:45:31,680
sas and identify

1073
00:45:31,680 --> 00:45:33,119
vulnerabilities

1074
00:45:33,119 --> 00:45:34,800
in new packages

1075
00:45:34,800 --> 00:45:37,200
before it arrives to assass

1076
00:45:37,200 --> 00:45:38,720
because before you arrive to sustain

1077
00:45:38,720 --> 00:45:40,160
already start to make use of this

1078
00:45:40,160 --> 00:45:41,920
package right

1079
00:45:41,920 --> 00:45:43,920
and you also need to bear in mind that

1080
00:45:43,920 --> 00:45:45,599
some of the vulnerabilities are only

1081
00:45:45,599 --> 00:45:48,480
there in your hand

1082
00:45:48,480 --> 00:45:51,040
we still want open source and we still

1083
00:45:51,040 --> 00:45:54,000
want to stay secure so let's do that

1084
00:45:54,000 --> 00:45:55,520
bearing all these aspects in mind thank

1085
00:45:55,520 --> 00:45:58,520
you

1086
00:46:04,880 --> 00:46:07,680
thank you very much

1087
00:46:07,760 --> 00:46:08,480
i

1088
00:46:08,480 --> 00:46:11,520
believe that the earlier you find

1089
00:46:11,520 --> 00:46:12,720
an issue

1090
00:46:12,720 --> 00:46:14,640
a security issue in particular the

1091
00:46:14,640 --> 00:46:17,280
cheaper it is to remediate it

1092
00:46:17,280 --> 00:46:19,520
say in

1093
00:46:19,520 --> 00:46:21,839
modern versions of

1094
00:46:21,839 --> 00:46:24,079
programming language compilators

1095
00:46:24,079 --> 00:46:28,119
their warnings and errors

1096
00:46:30,640 --> 00:46:32,720
they get

1097
00:46:32,720 --> 00:46:34,000
more and more to the beginning and

1098
00:46:34,000 --> 00:46:35,280
people understand that you need to

1099
00:46:35,280 --> 00:46:39,520
remediate it even in the stage of

1100
00:46:39,680 --> 00:46:41,359
studying or learning

1101
00:46:41,359 --> 00:46:43,280
programming languages but it's not there

1102
00:46:43,280 --> 00:46:44,800
in programming

1103
00:46:44,800 --> 00:46:48,720
managers there are some plugins in uh

1104
00:46:48,720 --> 00:46:51,520
i made it but they are external they're

1105
00:46:51,520 --> 00:46:54,880
not embedded i don't

1106
00:46:54,880 --> 00:46:57,680
have any i can't think of any that comes

1107
00:46:57,680 --> 00:46:59,119
out of the box

1108
00:46:59,119 --> 00:47:01,200
why is that

1109
00:47:01,200 --> 00:47:03,760
is it done on purpose

1110
00:47:03,760 --> 00:47:06,319
or probably uh we are going to

1111
00:47:06,319 --> 00:47:08,880
have package managers that would by

1112
00:47:08,880 --> 00:47:11,599
default one being installed carry out

1113
00:47:11,599 --> 00:47:13,839
this basic well at least basic

1114
00:47:13,839 --> 00:47:16,240
comparison against cvs

1115
00:47:16,240 --> 00:47:18,640
you know just to notify to get no

1116
00:47:18,640 --> 00:47:21,200
warning you you you you write the input

1117
00:47:21,200 --> 00:47:23,680
why why not notify him there and now but

1118
00:47:23,680 --> 00:47:25,839
it's not there now

1119
00:47:25,839 --> 00:47:28,160
well i think people are afraid they're

1120
00:47:28,160 --> 00:47:29,680
afraid to

1121
00:47:29,680 --> 00:47:32,319
expand too much of resource and to

1122
00:47:32,319 --> 00:47:34,000
send um

1123
00:47:34,000 --> 00:47:36,640
domino effect across the community these

1124
00:47:36,640 --> 00:47:40,400
data are not clean

1125
00:47:40,660 --> 00:47:41,920
[Music]

1126
00:47:41,920 --> 00:47:45,359
and npm let's take npm for example

1127
00:47:45,359 --> 00:47:47,760
you really have to have resource to do

1128
00:47:47,760 --> 00:47:51,319
something about it

1129
00:47:52,720 --> 00:47:53,680
if you

1130
00:47:53,680 --> 00:47:56,240
moderate all of open source i think it

1131
00:47:56,240 --> 00:47:57,599
would take

1132
00:47:57,599 --> 00:48:00,000
you know it would take more

1133
00:48:00,000 --> 00:48:01,119
effort than

1134
00:48:01,119 --> 00:48:04,079
uh app store and you can introduce

1135
00:48:04,079 --> 00:48:07,280
simple scanners

1136
00:48:07,280 --> 00:48:10,720
say should we have a package index we

1137
00:48:10,720 --> 00:48:13,200
would do it

1138
00:48:18,079 --> 00:48:21,280
so my my answer is because people don't

1139
00:48:21,280 --> 00:48:25,040
want to expand too much resources

1140
00:48:30,960 --> 00:48:32,000
and

1141
00:48:32,000 --> 00:48:34,960
despite the increase in popularity you

1142
00:48:34,960 --> 00:48:37,119
really have to live with what's there

1143
00:48:37,119 --> 00:48:39,520
thank you

1144
00:48:40,800 --> 00:48:42,880
thank you for this presentation

1145
00:48:42,880 --> 00:48:45,760
my question is

1146
00:48:46,000 --> 00:48:49,280
about check marks check marks is new

1147
00:48:49,280 --> 00:48:53,520
type of solution which analyzes

1148
00:48:53,520 --> 00:48:57,599
if commits are there in github and then

1149
00:48:57,599 --> 00:49:00,640
you look at the npm package and if there

1150
00:49:00,640 --> 00:49:03,440
is a supply chain attack and new version

1151
00:49:03,440 --> 00:49:05,599
of npm package is there without the

1152
00:49:05,599 --> 00:49:07,359
correspondent source codes these

1153
00:49:07,359 --> 00:49:09,119
packages are taken away do you plan

1154
00:49:09,119 --> 00:49:13,359
anything like that yes by all means

1155
00:49:13,839 --> 00:49:17,200
and this is how it's done

1156
00:49:17,200 --> 00:49:18,480
currently we're

1157
00:49:18,480 --> 00:49:21,200
working on it

1158
00:49:21,280 --> 00:49:22,800
it may seem to you

1159
00:49:22,800 --> 00:49:25,440
that i'm right straight

1160
00:49:25,440 --> 00:49:29,000
right from gartner

1161
00:49:30,480 --> 00:49:32,960
in our laboratory we have a lot of

1162
00:49:32,960 --> 00:49:34,480
things going on

1163
00:49:34,480 --> 00:49:36,079
and we are planning to

1164
00:49:36,079 --> 00:49:39,119
launch it into the market

1165
00:49:40,559 --> 00:49:43,520
when we are going to apply more of

1166
00:49:43,520 --> 00:49:45,520
a cloud approach than

1167
00:49:45,520 --> 00:49:48,480
premise approach on-premise approach

1168
00:49:48,480 --> 00:49:49,680
another

1169
00:49:49,680 --> 00:49:52,079
question also related to tech check what

1170
00:49:52,079 --> 00:49:54,400
works

1171
00:49:54,400 --> 00:49:56,240
they have an interesting feature

1172
00:49:56,240 --> 00:49:58,319
identifies in the library is a quote

1173
00:49:58,319 --> 00:50:00,000
that is not being used and if the

1174
00:50:00,000 --> 00:50:03,440
vulnerability is in the unused code then

1175
00:50:03,440 --> 00:50:06,240
it's alerted but not remediated are you

1176
00:50:06,240 --> 00:50:07,839
planning an integration

1177
00:50:07,839 --> 00:50:09,200
yeah or

1178
00:50:09,200 --> 00:50:11,280
two three years ago were telling you how

1179
00:50:11,280 --> 00:50:13,680
it's been done in our presentations but

1180
00:50:13,680 --> 00:50:16,319
you know what

1181
00:50:17,760 --> 00:50:20,319
log4j is used but there

1182
00:50:20,319 --> 00:50:23,040
is this open source code that you are

1183
00:50:23,040 --> 00:50:24,960
not used but vulnerability is still

1184
00:50:24,960 --> 00:50:29,599
there and i think it's a big issue

1185
00:50:29,599 --> 00:50:32,800
entering you know into the zest field i

1186
00:50:32,800 --> 00:50:35,280
cannot

1187
00:50:35,280 --> 00:50:39,559
guarantee that i create

1188
00:50:40,000 --> 00:50:42,400
guarantee uh that i do not create false

1189
00:50:42,400 --> 00:50:44,880
positives

1190
00:50:49,599 --> 00:50:52,160
what if yes the code is not used but

1191
00:50:52,160 --> 00:50:54,720
it's vulnerability still relevant

1192
00:50:54,720 --> 00:50:56,800
because of architecture you know

1193
00:50:56,800 --> 00:51:01,040
i i don't see the point

1194
00:51:02,319 --> 00:51:04,319
and i don't know

1195
00:51:04,319 --> 00:51:07,880
how check marks

1196
00:51:15,680 --> 00:51:17,359
and sometimes they would say that this

1197
00:51:17,359 --> 00:51:19,520
is used and this creates false positive

1198
00:51:19,520 --> 00:51:20,839
yeah thank

1199
00:51:20,839 --> 00:51:24,640
you and one more question

1200
00:51:24,640 --> 00:51:26,880
yes please

1201
00:51:26,880 --> 00:51:28,960
thank you for this presentation very

1202
00:51:28,960 --> 00:51:31,040
very interesting

1203
00:51:31,040 --> 00:51:32,960
to add on

1204
00:51:32,960 --> 00:51:34,160
to what

1205
00:51:34,160 --> 00:51:36,559
the gentleman said that it's very

1206
00:51:36,559 --> 00:51:38,480
resource intensive

1207
00:51:38,480 --> 00:51:41,839
to cover with sust anaconda

1208
00:51:41,839 --> 00:51:43,280
has its own

1209
00:51:43,280 --> 00:51:45,200
package manager

1210
00:51:45,200 --> 00:51:46,880
and tries to

1211
00:51:46,880 --> 00:51:49,040
moderate packages

1212
00:51:49,040 --> 00:51:51,839
but

1213
00:51:52,079 --> 00:51:53,680
they have less packages compared to

1214
00:51:53,680 --> 00:51:55,200
pipey

1215
00:51:55,200 --> 00:51:56,880
indeed uh

1216
00:51:56,880 --> 00:51:59,280
anaconda great are great there's a

1217
00:51:59,280 --> 00:52:01,200
commercial company behind them and it's

1218
00:52:01,200 --> 00:52:02,880
a specialized

1219
00:52:02,880 --> 00:52:05,440
area it's for science rather than for

1220
00:52:05,440 --> 00:52:08,720
everyone i think

1221
00:52:09,599 --> 00:52:10,280
this is what

1222
00:52:10,280 --> 00:52:11,440
[Music]

1223
00:52:11,440 --> 00:52:14,319
anaconda does

1224
00:52:15,280 --> 00:52:16,720
and

1225
00:52:16,720 --> 00:52:18,480
people who work there they don't think

1226
00:52:18,480 --> 00:52:20,960
of security

1227
00:52:20,960 --> 00:52:25,359
right okay but the problem is there

1228
00:52:27,760 --> 00:52:30,720
and those who work with anaconda they

1229
00:52:30,720 --> 00:52:32,480
are very happy about it

1230
00:52:32,480 --> 00:52:35,119
and just

1231
00:52:35,599 --> 00:52:38,000
i i also want to

1232
00:52:38,000 --> 00:52:40,960
tell you i scan pipi and i

1233
00:52:40,960 --> 00:52:43,200
um identify

1234
00:52:43,200 --> 00:52:45,359
malware and i report

1235
00:52:45,359 --> 00:52:48,079
this malware and the backdoors and the

1236
00:52:48,079 --> 00:52:50,559
report on it and i get feedback but my

1237
00:52:50,559 --> 00:52:52,319
question is this

1238
00:52:52,319 --> 00:52:54,880
if i have a

1239
00:52:54,880 --> 00:52:56,960
one day account

1240
00:52:56,960 --> 00:53:00,720
that was created for the sole purpose of

1241
00:53:00,720 --> 00:53:02,400
using

1242
00:53:02,400 --> 00:53:06,640
like skill like squatting right yes

1243
00:53:08,480 --> 00:53:10,480
and in the very beginning at the very

1244
00:53:10,480 --> 00:53:14,359
end you mentioned karma

1245
00:53:15,359 --> 00:53:19,440
and compromising the developers

1246
00:53:19,920 --> 00:53:22,480
who do bad things

1247
00:53:22,480 --> 00:53:24,720
are there any systems and communities

1248
00:53:24,720 --> 00:53:26,880
where you can address and

1249
00:53:26,880 --> 00:53:29,200
uh tell that look this package over

1250
00:53:29,200 --> 00:53:30,800
there

1251
00:53:30,800 --> 00:53:33,119
this developer did did wrong so you know

1252
00:53:33,119 --> 00:53:35,920
to create a database there is no public

1253
00:53:35,920 --> 00:53:37,920
database of

1254
00:53:37,920 --> 00:53:42,040
quote unquote bad developers

1255
00:53:42,319 --> 00:53:44,559
you can just report it and that's it

1256
00:53:44,559 --> 00:53:48,079
unfortunately at this point

1257
00:53:48,319 --> 00:53:50,559
no international communities like that

1258
00:53:50,559 --> 00:53:53,119
at this point we're open for dialects

1259
00:53:53,119 --> 00:53:56,880
all because we're very much

1260
00:53:57,599 --> 00:54:00,400
we think that it's an important thing

1261
00:54:00,400 --> 00:54:02,960
oh i'm sorry out of time sorry sorry

1262
00:54:02,960 --> 00:54:03,920
about that

1263
00:54:03,920 --> 00:54:05,280
thank you thank you for your attention

1264
00:54:05,280 --> 00:54:08,800
thank you for your questions

