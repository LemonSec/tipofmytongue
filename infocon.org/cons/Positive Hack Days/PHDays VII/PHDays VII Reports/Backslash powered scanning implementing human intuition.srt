1
00:00:00,030 --> 00:00:05,819
good morning and<font color="#E5E5E5"> welcome to backslash</font>

2
00:00:03,330 --> 00:00:07,250
powered scanning automating human

3
00:00:05,819 --> 00:00:10,590
intuition

4
00:00:07,250 --> 00:00:13,950
imagine if you could conduct a pen test

5
00:00:10,590 --> 00:00:16,109
<font color="#CCCCCC">and skip out all of the boring</font><font color="#E5E5E5"> bits skip</font>

6
00:00:13,950 --> 00:00:18,600
<font color="#CCCCCC">over</font><font color="#E5E5E5"> there hours of repetitive fuzzing</font>

7
00:00:16,109 --> 00:00:22,529
<font color="#E5E5E5">and trolling through meaningless results</font>

8
00:00:18,600 --> 00:00:24,570
and jump straight<font color="#E5E5E5"> to that one input the</font>

9
00:00:22,529 --> 00:00:27,060
reacts in a mysterious<font color="#CCCCCC"> way to your every</font>

10
00:00:24,570 --> 00:00:28,529
payload the one that turns out<font color="#CCCCCC"> to be</font>

11
00:00:27,060 --> 00:00:31,229
<font color="#E5E5E5">vulnerable to code</font><font color="#CCCCCC"> injection in a</font>

12
00:00:28,529 --> 00:00:33,360
language you've never heard of<font color="#E5E5E5"> or sequel</font>

13
00:00:31,230 --> 00:00:35,820
injection<font color="#E5E5E5"> behind the heavyweight filter</font>

14
00:00:33,360 --> 00:00:39,210
that almost<font color="#CCCCCC"> stops you from cracking open</font>

15
00:00:35,820 --> 00:00:41,489
<font color="#CCCCCC">the database</font><font color="#E5E5E5"> the kind of page the no</font>

16
00:00:39,210 --> 00:00:44,969
<font color="#CCCCCC">blackbox vulnerability scanner could</font>

17
00:00:41,489 --> 00:00:46,349
ever detect in this session<font color="#E5E5E5"> I will share</font>

18
00:00:44,969 --> 00:00:49,170
with<font color="#E5E5E5"> you</font><font color="#CCCCCC"> the conception</font><font color="#E5E5E5"> and development</font>

19
00:00:46,350 --> 00:00:54,120
<font color="#E5E5E5">of a new type of scanner that can find</font>

20
00:00:49,170 --> 00:00:57,059
<font color="#CCCCCC">research-grade fallibility this all</font><font color="#E5E5E5"> got</font>

21
00:00:54,120 --> 00:00:59,730
<font color="#CCCCCC">started around three</font><font color="#E5E5E5"> years ago</font><font color="#CCCCCC"> I just</font>

22
00:00:57,059 --> 00:01:01,910
<font color="#CCCCCC">began a</font><font color="#E5E5E5"> pen test and I had a problem</font>

23
00:00:59,730 --> 00:01:04,530
that's probably familiar<font color="#E5E5E5"> to many of you</font>

24
00:01:01,910 --> 00:01:06,960
<font color="#E5E5E5">although I had started the test the</font>

25
00:01:04,530 --> 00:01:09,540
clients<font color="#E5E5E5"> hadn't gotten around to given me</font>

26
00:01:06,960 --> 00:01:13,889
<font color="#E5E5E5">any login credentials so I was just</font>

27
00:01:09,540 --> 00:01:16,290
<font color="#CCCCCC">staring at the login page and this time</font>

28
00:01:13,890 --> 00:01:18,840
this was<font color="#E5E5E5"> particularly upsetting because</font>

29
00:01:16,290 --> 00:01:20,580
<font color="#CCCCCC">from the 90s visual design of the login</font>

30
00:01:18,840 --> 00:01:23,369
page<font color="#CCCCCC"> I</font><font color="#E5E5E5"> could hear the vulnerability</font>

31
00:01:20,580 --> 00:01:25,770
screaming out at me but I couldn't<font color="#CCCCCC"> log</font>

32
00:01:23,369 --> 00:01:29,700
in to get access<font color="#CCCCCC"> to any of</font><font color="#E5E5E5"> that attack</font>

33
00:01:25,770 --> 00:01:31,560
surface eventually<font color="#E5E5E5"> when I did get some</font>

34
00:01:29,700 --> 00:01:33,360
credentials<font color="#CCCCCC"> I logged in found some</font>

35
00:01:31,560 --> 00:01:35,040
sequel injection<font color="#CCCCCC"> dumped out the</font><font color="#E5E5E5"> database</font>

36
00:01:33,360 --> 00:01:37,110
<font color="#CCCCCC">including the all</font><font color="#E5E5E5"> the user passwords</font>

37
00:01:35,040 --> 00:01:40,560
which were naturally stored in plain

38
00:01:37,110 --> 00:01:43,439
text<font color="#CCCCCC"> and found that the password of the</font>

39
00:01:40,560 --> 00:01:47,250
director of this<font color="#CCCCCC"> company was market</font>

40
00:01:43,439 --> 00:01:51,240
either<font color="#E5E5E5"> one so his password was actually</font>

41
00:01:47,250 --> 00:01:53,100
less hard to guess that his<font color="#CCCCCC"> username</font><font color="#E5E5E5"> but</font>

42
00:01:51,240 --> 00:01:56,548
I nearly missed<font color="#E5E5E5"> this critical</font>

43
00:01:53,100 --> 00:01:58,439
vulnerability<font color="#CCCCCC"> I so I thought next time</font>

44
00:01:56,549 --> 00:02:01,280
I'm not<font color="#E5E5E5"> going to let this happen</font>

45
00:01:58,439 --> 00:02:03,898
and<font color="#CCCCCC"> I wrote a tool called</font><font color="#E5E5E5"> Let</font><font color="#CCCCCC"> Me In</font>

46
00:02:01,280 --> 00:02:06,570
<font color="#E5E5E5">which will try a large number of</font>

47
00:02:03,899 --> 00:02:08,788
<font color="#CCCCCC">usernames and it will do statistical</font>

48
00:02:06,570 --> 00:02:11,549
analysis<font color="#E5E5E5"> on the timing of the responses</font>

49
00:02:08,788 --> 00:02:13,670
<font color="#E5E5E5">and on the content of the responses</font><font color="#CCCCCC"> to</font>

50
00:02:11,550 --> 00:02:16,209
try and see if there are<font color="#CCCCCC"> any clues</font>

51
00:02:13,670 --> 00:02:18,500
that show which<font color="#CCCCCC"> usernames of valid and</font>

52
00:02:16,209 --> 00:02:20,900
sometimes<font color="#E5E5E5"> this tool works really well</font>

53
00:02:18,500 --> 00:02:24,110
but most of the time it fails<font color="#CCCCCC"> hold me</font>

54
00:02:20,900 --> 00:02:27,319
<font color="#E5E5E5">and one</font><font color="#CCCCCC"> day while trying</font><font color="#E5E5E5"> to fix this</font>

55
00:02:24,110 --> 00:02:29,690
<font color="#E5E5E5">tool</font><font color="#CCCCCC"> I realize that I could</font><font color="#E5E5E5"> actually use</font>

56
00:02:27,319 --> 00:02:31,399
<font color="#E5E5E5">this technique to something far cooler</font>

57
00:02:29,690 --> 00:02:36,140
<font color="#E5E5E5">and that's what I'm here to share</font><font color="#CCCCCC"> with</font>

58
00:02:31,400 --> 00:02:38,420
you today so first I'm going<font color="#E5E5E5"> to talk</font>

59
00:02:36,140 --> 00:02:40,429
about<font color="#E5E5E5"> the three failures of scanners</font>

60
00:02:38,420 --> 00:02:42,950
<font color="#E5E5E5">three huge blind spots</font>

61
00:02:40,430 --> 00:02:44,360
so all vulnerability scanners have when

62
00:02:42,950 --> 00:02:46,910
it<font color="#E5E5E5"> comes to finding server-side</font>

63
00:02:44,360 --> 00:02:49,519
<font color="#CCCCCC">injection</font><font color="#E5E5E5"> issues and I'll show how</font>

64
00:02:46,910 --> 00:02:52,730
combines these form<font color="#E5E5E5"> the million payload</font>

65
00:02:49,519 --> 00:02:55,700
problem and then I'll describe a new

66
00:02:52,730 --> 00:02:57,350
approach to scanning which handles<font color="#E5E5E5"> all</font>

67
00:02:55,700 --> 00:02:59,988
of<font color="#E5E5E5"> these issues</font><font color="#CCCCCC"> and can</font><font color="#E5E5E5"> find research</font>

68
00:02:57,350 --> 00:03:01,670
<font color="#CCCCCC">played vulnerabilities and I'll look at</font>

69
00:02:59,989 --> 00:03:04,120
what happens when I<font color="#CCCCCC"> run that</font><font color="#E5E5E5"> scanner</font><font color="#CCCCCC"> on</font>

70
00:03:01,670 --> 00:03:06,920
a bunch of real<font color="#CCCCCC"> websites</font>

71
00:03:04,120 --> 00:03:08,720
<font color="#E5E5E5">after that I'll</font><font color="#CCCCCC"> talk</font><font color="#E5E5E5"> about ideas</font><font color="#CCCCCC"> for</font>

72
00:03:06,920 --> 00:03:12,798
further research where else we<font color="#E5E5E5"> could</font>

73
00:03:08,720 --> 00:03:15,830
apply these ideas<font color="#CCCCCC"> and are</font><font color="#E5E5E5"> finally I'll</font>

74
00:03:12,799 --> 00:03:18,200
take five<font color="#CCCCCC"> minutes of questions</font><font color="#E5E5E5"> so by the</font>

75
00:03:15,830 --> 00:03:20,359
end<font color="#E5E5E5"> of this presentation you'll know why</font>

76
00:03:18,200 --> 00:03:23,690
scanner<font color="#CCCCCC"> stopped</font><font color="#E5E5E5"> how to build a better</font>

77
00:03:20,359 --> 00:03:27,290
scanner<font color="#CCCCCC"> and how to use that scanner</font><font color="#E5E5E5"> for</font>

78
00:03:23,690 --> 00:03:29,630
<font color="#E5E5E5">maximum effectiveness so I stopped a</font>

79
00:03:27,290 --> 00:03:32,120
little bit about me<font color="#CCCCCC"> I work at a company</font>

80
00:03:29,630 --> 00:03:34,100
<font color="#E5E5E5">called port</font><font color="#CCCCCC"> Swigert where we make a tool</font>

81
00:03:32,120 --> 00:03:37,640
you may have<font color="#E5E5E5"> heard of called burp suite</font>

82
00:03:34,100 --> 00:03:40,160
<font color="#CCCCCC">and my role here</font><font color="#E5E5E5"> is to design scanner</font>

83
00:03:37,640 --> 00:03:41,988
<font color="#E5E5E5">checks so now I'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> spend the</font>

84
00:03:40,160 --> 00:03:43,820
<font color="#E5E5E5">next few slides sliding off</font>

85
00:03:41,989 --> 00:03:45,980
vulnerability<font color="#CCCCCC"> scanners it's</font><font color="#E5E5E5"> coming from</font>

86
00:03:43,820 --> 00:03:48,140
a position<font color="#E5E5E5"> of respect I think</font>

87
00:03:45,980 --> 00:03:50,600
vulnerability scanners are great I

88
00:03:48,140 --> 00:03:54,529
didn't know<font color="#E5E5E5"> that they are and their full</font>

89
00:03:50,600 --> 00:03:56,870
potential at the moment something<font color="#CCCCCC"> else I</font>

90
00:03:54,530 --> 00:03:59,150
<font color="#CCCCCC">do</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> time to time is research</font><font color="#E5E5E5"> new</font>

91
00:03:56,870 --> 00:04:01,040
types of<font color="#E5E5E5"> vulnerability so for example I</font>

92
00:03:59,150 --> 00:04:04,579
spoke a while ago at blackhat USA on

93
00:04:01,040 --> 00:04:06,500
<font color="#E5E5E5">server-side template injection and one</font>

94
00:04:04,579 --> 00:04:09,530
of the personal objectives of this

95
00:04:06,500 --> 00:04:12,410
<font color="#E5E5E5">scanner was to help find unknown types</font>

96
00:04:09,530 --> 00:04:17,779
of vulnerability for<font color="#CCCCCC"> me just</font><font color="#E5E5E5"> to make my</font>

97
00:04:12,410 --> 00:04:20,389
<font color="#E5E5E5">life easier so the first flying spot is</font>

98
00:04:17,779 --> 00:04:22,820
the<font color="#CCCCCC"> scanners are really bad a dealing</font>

99
00:04:20,389 --> 00:04:25,970
<font color="#E5E5E5">with obscure technology security through</font>

100
00:04:22,820 --> 00:04:27,050
obscurity<font color="#E5E5E5"> works against scanners for</font>

101
00:04:25,970 --> 00:04:28,970
example

102
00:04:27,050 --> 00:04:32,020
how many types<font color="#E5E5E5"> of service I attend</font><font color="#CCCCCC"> play</font>

103
00:04:28,970 --> 00:04:34,520
<font color="#CCCCCC">injection</font><font color="#E5E5E5"> is your scanner support</font>

104
00:04:32,020 --> 00:04:36,948
<font color="#E5E5E5">probably not all of those and that's</font>

105
00:04:34,520 --> 00:04:39,590
<font color="#E5E5E5">just a list of the most</font><font color="#CCCCCC"> popular template</font>

106
00:04:36,949 --> 00:04:41,509
engines out<font color="#CCCCCC"> there</font><font color="#E5E5E5"> for example</font><font color="#CCCCCC"> were arts</font>

107
00:04:39,590 --> 00:04:45,349
<font color="#CCCCCC">quite recently got code</font><font color="#E5E5E5"> executions on</font>

108
00:04:41,509 --> 00:04:47,750
<font color="#CCCCCC">paypal using dos</font><font color="#E5E5E5"> jeaious which is a</font>

109
00:04:45,349 --> 00:04:51,378
template engine not popular<font color="#CCCCCC"> enough to</font><font color="#E5E5E5"> be</font>

110
00:04:47,750 --> 00:04:53,360
in<font color="#E5E5E5"> that elect list and in 2014</font>

111
00:04:51,379 --> 00:04:54,949
well your scanner didn't detect any kind

112
00:04:53,360 --> 00:04:57,229
<font color="#CCCCCC">of</font><font color="#E5E5E5"> server-side templating section</font>

113
00:04:54,949 --> 00:04:58,430
because nobody knew that<font color="#E5E5E5"> it existed</font><font color="#CCCCCC"> but</font>

114
00:04:57,229 --> 00:05:01,460
<font color="#CCCCCC">I know</font><font color="#E5E5E5"> for a fact they're vulnerable</font>

115
00:04:58,430 --> 00:05:03,889
servers were being<font color="#E5E5E5"> scanned so how many</font>

116
00:05:01,460 --> 00:05:05,750
other unknown vulnerabilities are out

117
00:05:03,889 --> 00:05:08,180
there<font color="#E5E5E5"> present in servers that are being</font>

118
00:05:05,750 --> 00:05:12,710
scanned<font color="#E5E5E5"> regularly that the scanners has</font>

119
00:05:08,180 --> 00:05:14,750
failed to fight also using obscure

120
00:05:12,710 --> 00:05:18,099
technology can<font color="#CCCCCC"> lead to scan as missing</font>

121
00:05:14,750 --> 00:05:21,710
vulnerabilities in quite unexpected ways

122
00:05:18,099 --> 00:05:23,780
for<font color="#E5E5E5"> example scanners typically detect</font>

123
00:05:21,710 --> 00:05:25,969
local file include vulnerabilities by

124
00:05:23,780 --> 00:05:29,210
reading in the contents of the<font color="#CCCCCC"> et Cie</font>

125
00:05:25,969 --> 00:05:30,409
password file<font color="#E5E5E5"> and if you happen</font><font color="#CCCCCC"> to be</font>

126
00:05:29,210 --> 00:05:32,989
using<font color="#CCCCCC"> selinux</font>

127
00:05:30,409 --> 00:05:35,029
on your server<font color="#E5E5E5"> the web server may well</font>

128
00:05:32,990 --> 00:05:38,180
<font color="#E5E5E5">not have permission to read the contents</font>

129
00:05:35,029 --> 00:05:39,710
<font color="#E5E5E5">of the</font><font color="#CCCCCC"> ATC password file</font><font color="#E5E5E5"> and so scanners</font>

130
00:05:38,180 --> 00:05:41,620
will fail<font color="#CCCCCC"> to find</font><font color="#E5E5E5"> any local file</font>

131
00:05:39,710 --> 00:05:43,789
<font color="#CCCCCC">includes vulnerabilities on your</font><font color="#E5E5E5"> system</font>

132
00:05:41,620 --> 00:05:46,340
basically as soon<font color="#E5E5E5"> as you use anything</font>

133
00:05:43,789 --> 00:05:50,020
slightly non-standard scanners just

134
00:05:46,340 --> 00:05:53,568
start to miss issues<font color="#E5E5E5"> all over</font><font color="#CCCCCC"> the place</font>

135
00:05:50,020 --> 00:05:56,029
<font color="#E5E5E5">so we're limited to languages that our</font>

136
00:05:53,569 --> 00:05:58,210
scanner<font color="#E5E5E5"> explicitly supports so let's</font>

137
00:05:56,029 --> 00:06:01,039
take a really<font color="#E5E5E5"> easy one let's take PHP</font>

138
00:05:58,210 --> 00:06:03,948
how well can<font color="#E5E5E5"> a scandal scanner handle</font>

139
00:06:01,039 --> 00:06:05,870
<font color="#CCCCCC">that well it can handle the basic case</font>

140
00:06:03,949 --> 00:06:08,060
quite<font color="#E5E5E5"> well</font><font color="#CCCCCC"> so the payloads you see here</font>

141
00:06:05,870 --> 00:06:10,069
will<font color="#E5E5E5"> fly and blind PHP injection by</font>

142
00:06:08,060 --> 00:06:12,379
making the server sleep for<font color="#E5E5E5"> 10 seconds</font>

143
00:06:10,069 --> 00:06:14,419
if it's vulnerable<font color="#E5E5E5"> but what if the</font>

144
00:06:12,379 --> 00:06:16,550
application is filtering out for

145
00:06:14,419 --> 00:06:18,080
instance<font color="#E5E5E5"> the scanners get a false</font>

146
00:06:16,550 --> 00:06:20,539
<font color="#CCCCCC">negative it won't find the issue the</font>

147
00:06:18,080 --> 00:06:22,389
issue<font color="#CCCCCC"> is</font><font color="#E5E5E5"> still exploitable but the</font>

148
00:06:20,539 --> 00:06:24,620
payload the scanner sends won't work and

149
00:06:22,389 --> 00:06:27,409
if there's a<font color="#CCCCCC"> web application file</font>

150
00:06:24,620 --> 00:06:29,419
<font color="#CCCCCC">looking</font><font color="#E5E5E5"> for the sleep keyword it's</font>

151
00:06:27,409 --> 00:06:33,199
probably still exploitable somehow but

152
00:06:29,419 --> 00:06:35,180
the scanner<font color="#E5E5E5"> won't realize it and even if</font>

153
00:06:33,199 --> 00:06:37,040
the application<font color="#CCCCCC"> is</font><font color="#E5E5E5"> just filtered out</font>

154
00:06:35,180 --> 00:06:39,470
quotes<font color="#E5E5E5"> it's still exploitable</font>

155
00:06:37,040 --> 00:06:42,770
but the scanner is not going to find it

156
00:06:39,470 --> 00:06:45,470
and of those<font color="#E5E5E5"> three examples</font><font color="#CCCCCC"> to us um pen</font>

157
00:06:42,770 --> 00:06:49,849
<font color="#CCCCCC">test</font><font color="#E5E5E5"> that I've done personally so</font>

158
00:06:45,470 --> 00:06:53,060
they're not uncommon things things as

159
00:06:49,850 --> 00:06:55,400
basic<font color="#CCCCCC"> as putting sequel statements</font>

160
00:06:53,060 --> 00:06:57,470
inside double quotes for Strings instead

161
00:06:55,400 --> 00:06:58,729
of single quotes<font color="#CCCCCC"> two-liter scanners</font>

162
00:06:57,470 --> 00:07:00,020
<font color="#E5E5E5">missing vulnerabilities just because</font>

163
00:06:58,730 --> 00:07:02,210
<font color="#E5E5E5">that behavior is a little bit</font>

164
00:07:00,020 --> 00:07:10,039
non-standard it's just not what stan<font color="#E5E5E5"> is</font>

165
00:07:02,210 --> 00:07:11,479
expect<font color="#E5E5E5"> okay so now we're going to assume</font>

166
00:07:10,040 --> 00:07:14,180
the vulnerability<font color="#E5E5E5"> is in a known language</font>

167
00:07:11,480 --> 00:07:17,630
<font color="#E5E5E5">it's in PHP and there in those filters</font>

168
00:07:14,180 --> 00:07:21,350
so here all the<font color="#E5E5E5"> scanner has</font><font color="#CCCCCC"> to do is</font>

169
00:07:17,630 --> 00:07:23,450
figure out where to<font color="#E5E5E5"> put the payload this</font>

170
00:07:21,350 --> 00:07:24,620
is an<font color="#CCCCCC"> endpoint on the eBay that</font><font color="#E5E5E5"> used to</font>

171
00:07:23,450 --> 00:07:29,180
be vulnerable to<font color="#E5E5E5"> remote code execution</font>

172
00:07:24,620 --> 00:07:31,850
<font color="#CCCCCC">via PHP and the obvious place to put the</font>

173
00:07:29,180 --> 00:07:32,570
payload is in the Q<font color="#E5E5E5"> parameter but that</font>

174
00:07:31,850 --> 00:07:35,570
doesn't<font color="#E5E5E5"> work</font>

175
00:07:32,570 --> 00:07:40,310
and neither does putting it in the

176
00:07:35,570 --> 00:07:44,810
cookie<font color="#E5E5E5"> or the referrer or the user</font>

177
00:07:40,310 --> 00:07:46,190
<font color="#E5E5E5">agents or the past or even</font><font color="#CCCCCC"> various</font>

178
00:07:44,810 --> 00:07:49,640
additional headers that<font color="#E5E5E5"> you might think</font>

179
00:07:46,190 --> 00:07:52,400
of<font color="#E5E5E5"> try in order</font><font color="#CCCCCC"> to successfully exploit</font>

180
00:07:49,640 --> 00:07:56,090
the server<font color="#E5E5E5"> he has to specify</font><font color="#CCCCCC"> a second Q</font>

181
00:07:52,400 --> 00:07:58,010
parameter<font color="#E5E5E5"> and put the payload there what</font>

182
00:07:56,090 --> 00:08:01,070
chances the<font color="#E5E5E5"> scanner got of finding</font><font color="#CCCCCC"> that</font>

183
00:07:58,010 --> 00:08:03,680
issue this issue was found by<font color="#CCCCCC"> a manual</font>

184
00:08:01,070 --> 00:08:05,510
tester and<font color="#E5E5E5"> he said he found it because</font>

185
00:08:03,680 --> 00:08:08,390
<font color="#CCCCCC">he</font><font color="#E5E5E5"> noticed that the first Q parameter</font>

186
00:08:05,510 --> 00:08:10,370
<font color="#E5E5E5">was being spell checked</font><font color="#CCCCCC"> and in his</font>

187
00:08:08,390 --> 00:08:12,469
experience<font color="#CCCCCC"> he'd seen a lot of spellcheck</font>

188
00:08:10,370 --> 00:08:13,250
<font color="#E5E5E5">as being implemented in securely using</font>

189
00:08:12,470 --> 00:08:15,350
<font color="#CCCCCC">eval</font>

190
00:08:13,250 --> 00:08:17,810
so that's why he tried specifying a

191
00:08:15,350 --> 00:08:23,060
second Q parameter<font color="#E5E5E5"> just to see what</font>

192
00:08:17,810 --> 00:08:25,280
happened<font color="#E5E5E5"> so the million payload problem</font>

193
00:08:23,060 --> 00:08:27,350
is simply put a scanner could

194
00:08:25,280 --> 00:08:29,320
technically send every payload<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I've</font>

195
00:08:27,350 --> 00:08:31,490
<font color="#CCCCCC">showed you</font><font color="#E5E5E5"> and find all</font><font color="#CCCCCC"> of those issues</font>

196
00:08:29,320 --> 00:08:34,610
<font color="#CCCCCC">but in order to</font><font color="#E5E5E5"> find every possible</font>

197
00:08:31,490 --> 00:08:35,960
<font color="#CCCCCC">issue it</font><font color="#E5E5E5"> would have to send a payload</font>

198
00:08:34,610 --> 00:08:37,849
for every request<font color="#E5E5E5"> every input</font>

199
00:08:35,960 --> 00:08:39,680
vulnerability class technology variant

200
00:08:37,849 --> 00:08:41,360
<font color="#CCCCCC">assaulter</font><font color="#E5E5E5"> and that would mean sending</font>

201
00:08:39,679 --> 00:08:43,669
<font color="#E5E5E5">over a million payloads for</font><font color="#CCCCCC"> a base</font>

202
00:08:41,360 --> 00:08:47,120
request<font color="#CCCCCC"> these</font><font color="#E5E5E5"> scanners simply don't have</font>

203
00:08:43,669 --> 00:08:50,310
<font color="#E5E5E5">time</font><font color="#CCCCCC"> to do that</font><font color="#E5E5E5"> so they're reduced to</font>

204
00:08:47,120 --> 00:08:54,120
sending<font color="#CCCCCC"> best-effort</font><font color="#E5E5E5"> payloads that work</font>

205
00:08:50,310 --> 00:08:55,589
<font color="#E5E5E5">reasonably well most of the time and</font>

206
00:08:54,120 --> 00:08:57,300
that's what leads<font color="#E5E5E5"> to people</font><font color="#CCCCCC"> saying</font>

207
00:08:55,590 --> 00:08:59,460
scanners are good for<font color="#CCCCCC"> finding</font>

208
00:08:57,300 --> 00:09:02,099
low-hanging fruit which<font color="#CCCCCC"> is a statement</font>

209
00:08:59,460 --> 00:09:03,990
that breaks my<font color="#E5E5E5"> heart what we deserve is</font>

210
00:09:02,100 --> 00:09:09,870
the scanner that<font color="#E5E5E5"> finds high hanging</font>

211
00:09:03,990 --> 00:09:11,460
fruit so if we want to find<font color="#CCCCCC"> a make a</font>

212
00:09:09,870 --> 00:09:14,070
scanner that<font color="#E5E5E5"> doesn't have these blind</font>

213
00:09:11,460 --> 00:09:16,710
<font color="#E5E5E5">spots we need to harness the intuition</font>

214
00:09:14,070 --> 00:09:18,450
<font color="#CCCCCC">that human testers have</font><font color="#E5E5E5"> rather</font><font color="#CCCCCC"> than</font>

215
00:09:16,710 --> 00:09:20,850
sending a highly specific payload that

216
00:09:18,450 --> 00:09:22,800
<font color="#E5E5E5">says finally injection into a double</font>

217
00:09:20,850 --> 00:09:25,410
<font color="#E5E5E5">quoted string being evaluated in PHP</font>

218
00:09:22,800 --> 00:09:28,199
with no filters when you descend<font color="#E5E5E5"> a</font>

219
00:09:25,410 --> 00:09:31,140
generic payload<font color="#CCCCCC"> it says finally</font>

220
00:09:28,200 --> 00:09:33,779
something suspicious<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> if we do</font>

221
00:09:31,140 --> 00:09:36,180
<font color="#E5E5E5">find something suspicious</font><font color="#CCCCCC"> just like a</font>

222
00:09:33,779 --> 00:09:37,620
skilled<font color="#CCCCCC"> Emanuel</font><font color="#E5E5E5"> gesture we need to</font>

223
00:09:36,180 --> 00:09:39,180
investigate and<font color="#CCCCCC"> try</font><font color="#E5E5E5"> and figure out</font>

224
00:09:37,620 --> 00:09:43,770
exactly<font color="#E5E5E5"> what's going</font><font color="#CCCCCC"> on by gathering</font>

225
00:09:39,180 --> 00:09:46,620
further information so we're going to

226
00:09:43,770 --> 00:09:49,860
<font color="#CCCCCC">dig begin with the payload that's about</font>

227
00:09:46,620 --> 00:09:51,570
as simple<font color="#CCCCCC"> as possible we're going to</font>

228
00:09:49,860 --> 00:09:53,760
take the<font color="#CCCCCC"> input</font><font color="#E5E5E5"> and we're going to put a</font>

229
00:09:51,570 --> 00:09:55,740
single<font color="#E5E5E5"> quote on it and as we can</font><font color="#CCCCCC"> see</font>

230
00:09:53,760 --> 00:09:58,200
here this<font color="#CCCCCC"> is called</font><font color="#E5E5E5"> the server error so</font>

231
00:09:55,740 --> 00:09:59,880
the server might be vulnerable<font color="#E5E5E5"> but we</font>

232
00:09:58,200 --> 00:10:01,800
can't be<font color="#CCCCCC"> sure it might</font><font color="#E5E5E5"> be saying you've</font>

233
00:09:59,880 --> 00:10:04,410
got<font color="#CCCCCC"> an error in your sequel syntax or</font>

234
00:10:01,800 --> 00:10:08,010
might<font color="#CCCCCC"> just be saying invalid input</font>

235
00:10:04,410 --> 00:10:11,490
<font color="#E5E5E5">please try again now as a human we can</font>

236
00:10:08,010 --> 00:10:13,410
read the response and decide whether the

237
00:10:11,490 --> 00:10:16,589
<font color="#CCCCCC">behavior is suspicious but</font><font color="#E5E5E5"> scanners</font>

238
00:10:13,410 --> 00:10:19,620
can't do that and what normal standards

239
00:10:16,589 --> 00:10:22,110
do is they grep the response for certain

240
00:10:19,620 --> 00:10:25,380
error messages<font color="#E5E5E5"> like</font><font color="#CCCCCC"> that one there but</font>

241
00:10:22,110 --> 00:10:27,030
that has two massive<font color="#E5E5E5"> flaws</font><font color="#CCCCCC"> if the server</font>

242
00:10:25,380 --> 00:10:29,160
<font color="#E5E5E5">is using some</font><font color="#CCCCCC"> kind of</font><font color="#E5E5E5"> unknown technology</font>

243
00:10:27,030 --> 00:10:31,980
<font color="#CCCCCC">the scanner won't recognize the</font><font color="#E5E5E5"> error</font>

244
00:10:29,160 --> 00:10:34,670
message and also if application is

245
00:10:31,980 --> 00:10:39,020
handling errors properly it<font color="#E5E5E5"> won't work</font>

246
00:10:34,670 --> 00:10:39,020
<font color="#CCCCCC">so we</font><font color="#E5E5E5"> need something better</font>

247
00:10:41,300 --> 00:10:46,890
<font color="#E5E5E5">well we're going to do what our scanner</font>

248
00:10:44,070 --> 00:10:51,090
is going to do is send a second payload

249
00:10:46,890 --> 00:10:53,640
<font color="#E5E5E5">that is syntactically almost identical</font>

250
00:10:51,090 --> 00:10:56,520
to<font color="#E5E5E5"> the first payload but it uses an</font>

251
00:10:53,640 --> 00:10:59,730
escape sequence to stop to<font color="#E5E5E5"> avoid causing</font>

252
00:10:56,520 --> 00:11:01,829
<font color="#E5E5E5">an error on the server and if the</font>

253
00:10:59,730 --> 00:11:03,360
<font color="#E5E5E5">response from the application revert to</font>

254
00:11:01,830 --> 00:11:05,490
the original<font color="#E5E5E5"> response that tells us</font>

255
00:11:03,360 --> 00:11:08,130
there's something<font color="#E5E5E5"> interesting happening</font>

256
00:11:05,490 --> 00:11:11,790
here so just<font color="#CCCCCC"> to give you</font><font color="#E5E5E5"> a visual</font>

257
00:11:08,130 --> 00:11:14,100
<font color="#CCCCCC">overview of that last slide</font><font color="#E5E5E5"> we're going</font>

258
00:11:11,790 --> 00:11:15,810
<font color="#CCCCCC">to start out by appending a single</font><font color="#E5E5E5"> quote</font>

259
00:11:14,100 --> 00:11:18,240
to<font color="#E5E5E5"> the input and if that response</font>

260
00:11:15,810 --> 00:11:19,560
matches the original<font color="#CCCCCC"> untampered response</font>

261
00:11:18,240 --> 00:11:21,750
we're just going to<font color="#E5E5E5"> give up there's</font>

262
00:11:19,560 --> 00:11:23,130
nothing interesting there<font color="#CCCCCC"> but if it</font>

263
00:11:21,750 --> 00:11:24,840
<font color="#E5E5E5">doesn't match the original response</font>

264
00:11:23,130 --> 00:11:26,939
we're going to<font color="#E5E5E5"> follow up</font><font color="#CCCCCC"> with an</font><font color="#E5E5E5"> escaped</font>

265
00:11:24,840 --> 00:11:30,090
quote and depending<font color="#E5E5E5"> on whether that</font>

266
00:11:26,940 --> 00:11:32,520
match of the original response<font color="#E5E5E5"> or not we</font>

267
00:11:30,090 --> 00:11:35,280
can tell what's happening<font color="#E5E5E5"> and this</font>

268
00:11:32,520 --> 00:11:37,170
simple decision tree here is at<font color="#E5E5E5"> the</font>

269
00:11:35,280 --> 00:11:39,060
heart<font color="#E5E5E5"> of the strategy that</font><font color="#CCCCCC"> I'll be using</font>

270
00:11:37,170 --> 00:11:44,160
<font color="#CCCCCC">for</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> rest of</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> presentation</font><font color="#E5E5E5"> it's</font>

271
00:11:39,060 --> 00:11:47,130
really simple<font color="#CCCCCC"> just bear in mind</font><font color="#E5E5E5"> so using</font>

272
00:11:44,160 --> 00:11:49,620
this concept<font color="#E5E5E5"> of probe pairs we can</font><font color="#CCCCCC"> ask</font>

273
00:11:47,130 --> 00:11:52,470
questions<font color="#CCCCCC"> of the application as you've</font>

274
00:11:49,620 --> 00:11:54,900
<font color="#E5E5E5">seen we can</font><font color="#CCCCCC"> easily ask am i in a single</font>

275
00:11:52,470 --> 00:11:56,340
<font color="#E5E5E5">quoted string</font><font color="#CCCCCC"> and you can do the</font><font color="#E5E5E5"> same</font>

276
00:11:54,900 --> 00:11:58,530
<font color="#CCCCCC">with a double quoted</font><font color="#E5E5E5"> string obviously</font>

277
00:11:56,340 --> 00:12:00,870
<font color="#E5E5E5">you can also ask am I in a numeric</font>

278
00:11:58,530 --> 00:12:02,850
context by taking the input divided by

279
00:12:00,870 --> 00:12:05,430
<font color="#E5E5E5">one and doing the input divided by zero</font>

280
00:12:02,850 --> 00:12:07,200
<font color="#E5E5E5">if the input is</font><font color="#CCCCCC"> really in a numeric</font>

281
00:12:05,430 --> 00:12:09,120
context<font color="#CCCCCC"> there divided by</font><font color="#E5E5E5"> zero will cause</font>

282
00:12:07,200 --> 00:12:10,860
some kind of error<font color="#CCCCCC"> and cause a different</font>

283
00:12:09,120 --> 00:12:13,680
<font color="#E5E5E5">closed path which will be visible in the</font>

284
00:12:10,860 --> 00:12:16,140
response from the application we can

285
00:12:13,680 --> 00:12:18,359
<font color="#E5E5E5">also ask if we're in a</font><font color="#CCCCCC"> file path by</font>

286
00:12:16,140 --> 00:12:20,250
seeing if the<font color="#CCCCCC"> influent</font><font color="#E5E5E5"> normalizes by</font>

287
00:12:18,360 --> 00:12:22,110
supplying<font color="#CCCCCC"> two inputs one</font><font color="#E5E5E5"> that normalizes</font>

288
00:12:20,250 --> 00:12:24,390
to the original value<font color="#E5E5E5"> and one that</font>

289
00:12:22,110 --> 00:12:26,760
<font color="#E5E5E5">doesn't and we can find some more</font>

290
00:12:24,390 --> 00:12:28,500
esoteric<font color="#E5E5E5"> stuff</font><font color="#CCCCCC"> to that manual test this</font>

291
00:12:26,760 --> 00:12:32,460
might<font color="#E5E5E5"> even miss out on just because it's</font>

292
00:12:28,500 --> 00:12:34,470
quite<font color="#CCCCCC"> rare</font><font color="#E5E5E5"> for example maybe our input</font>

293
00:12:32,460 --> 00:12:37,410
<font color="#E5E5E5">is specifying the name of a function</font>

294
00:12:34,470 --> 00:12:40,290
<font color="#CCCCCC">that gets called on the server so by</font>

295
00:12:37,410 --> 00:12:42,060
trying a valid<font color="#CCCCCC"> function name and an</font>

296
00:12:40,290 --> 00:12:44,130
invalid function name we could maybe

297
00:12:42,060 --> 00:12:45,930
<font color="#E5E5E5">find out if</font><font color="#CCCCCC"> our if this is happening</font><font color="#E5E5E5"> and</font>

298
00:12:44,130 --> 00:12:49,170
if<font color="#E5E5E5"> our works well we probably got remote</font>

299
00:12:45,930 --> 00:12:51,329
code execution<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we can also ask maybe</font>

300
00:12:49,170 --> 00:12:53,400
I'm in a JSON value and supplies some

301
00:12:51,330 --> 00:12:54,210
value that breaks<font color="#E5E5E5"> to date on JSON data</font>

302
00:12:53,400 --> 00:12:57,060
structure

303
00:12:54,210 --> 00:13:01,440
and something<font color="#CCCCCC"> doesn't and just see what</font>

304
00:12:57,060 --> 00:13:03,750
<font color="#E5E5E5">happens</font><font color="#CCCCCC"> so what</font><font color="#E5E5E5"> we've</font><font color="#CCCCCC"> got here is just a</font>

305
00:13:01,440 --> 00:13:06,779
<font color="#E5E5E5">tiny sample of the number of questions</font>

306
00:13:03,750 --> 00:13:08,730
that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can ask if you can think</font><font color="#E5E5E5"> of any</font>

307
00:13:06,779 --> 00:13:11,130
vulnerability that<font color="#E5E5E5"> you can express using</font>

308
00:13:08,730 --> 00:13:13,020
<font color="#CCCCCC">a probe pair like this because the</font>

309
00:13:11,130 --> 00:13:15,540
<font color="#CCCCCC">scanners open source you can</font><font color="#E5E5E5"> add this to</font>

310
00:13:13,020 --> 00:13:18,540
<font color="#E5E5E5">the scanner yourself in about five lines</font>

311
00:13:15,540 --> 00:13:23,040
of<font color="#E5E5E5"> code</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> really easy and I recommend</font>

312
00:13:18,540 --> 00:13:25,860
giving it<font color="#CCCCCC"> a go so that's</font><font color="#E5E5E5"> cool but the</font>

313
00:13:23,040 --> 00:13:28,260
true power of the<font color="#E5E5E5"> scanner is that we can</font>

314
00:13:25,860 --> 00:13:31,980
use the answer from<font color="#E5E5E5"> these</font><font color="#CCCCCC"> questions to</font>

315
00:13:28,260 --> 00:13:33,569
decide what to do<font color="#CCCCCC"> next so while asking</font>

316
00:13:31,980 --> 00:13:36,510
those questions we can see what<font color="#E5E5E5"> kind of</font>

317
00:13:33,570 --> 00:13:38,790
<font color="#CCCCCC">quotes women and now we know we're in</font><font color="#E5E5E5"> a</font>

318
00:13:36,510 --> 00:13:40,500
<font color="#CCCCCC">double-quoted</font><font color="#E5E5E5"> string so we can</font>

319
00:13:38,790 --> 00:13:42,480
efficiently<font color="#CCCCCC"> try and</font><font color="#E5E5E5"> find out what</font>

320
00:13:40,500 --> 00:13:45,510
character<font color="#E5E5E5"> sequence the server uses for</font>

321
00:13:42,480 --> 00:13:47,310
string concatenation<font color="#CCCCCC"> and once we</font><font color="#E5E5E5"> know</font>

322
00:13:45,510 --> 00:13:50,220
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we can follow up</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> say well maybe</font>

323
00:13:47,310 --> 00:13:51,839
<font color="#E5E5E5">I can inject a function here I'm using</font>

324
00:13:50,220 --> 00:13:54,120
that<font color="#E5E5E5"> a dysfunction because that's a</font>

325
00:13:51,839 --> 00:13:55,529
function<font color="#CCCCCC"> that exists in almost every</font>

326
00:13:54,120 --> 00:13:57,209
programming language out there<font color="#CCCCCC"> so I</font>

327
00:13:55,529 --> 00:13:59,760
<font color="#E5E5E5">don't need to know what the programming</font>

328
00:13:57,209 --> 00:14:02,819
languages<font color="#E5E5E5"> for</font><font color="#CCCCCC"> this follow-up payloads to</font>

329
00:13:59,760 --> 00:14:04,620
work and if that works well we know

330
00:14:02,820 --> 00:14:07,470
we've got remote code execution<font color="#CCCCCC"> more or</font>

331
00:14:04,620 --> 00:14:09,360
<font color="#E5E5E5">less but it</font><font color="#CCCCCC"> would be nice to know</font>

332
00:14:07,470 --> 00:14:11,640
exactly what language of the<font color="#CCCCCC"> server's</font>

333
00:14:09,360 --> 00:14:13,620
using and we can just follow up by

334
00:14:11,640 --> 00:14:16,890
trying<font color="#E5E5E5"> a bunch of specific functions</font>

335
00:14:13,620 --> 00:14:18,660
<font color="#E5E5E5">that only</font><font color="#CCCCCC"> exist in</font><font color="#E5E5E5"> one language so here</font>

336
00:14:16,890 --> 00:14:21,089
<font color="#E5E5E5">that is finalized function</font><font color="#CCCCCC"> Corner's</font>

337
00:14:18,660 --> 00:14:23,279
works so<font color="#E5E5E5"> that tells us</font><font color="#CCCCCC"> that we've got</font>

338
00:14:21,089 --> 00:14:25,560
server-side JavaScript injection<font color="#E5E5E5"> inside</font>

339
00:14:23,279 --> 00:14:30,180
a double<font color="#E5E5E5"> quotes drink cool</font>

340
00:14:25,560 --> 00:14:31,560
and that's clinical but<font color="#E5E5E5"> a normal stand I</font>

341
00:14:30,180 --> 00:14:35,160
could find that just<font color="#E5E5E5"> by</font><font color="#CCCCCC"> sending</font><font color="#E5E5E5"> that</font>

342
00:14:31,560 --> 00:14:37,410
last payload<font color="#E5E5E5"> straight away the power of</font>

343
00:14:35,160 --> 00:14:39,439
this technique is<font color="#E5E5E5"> because of the</font><font color="#CCCCCC"> way</font>

344
00:14:37,410 --> 00:14:43,469
that I've come<font color="#CCCCCC"> to that conclusion I've</font>

345
00:14:39,440 --> 00:14:45,839
dealt with all<font color="#E5E5E5"> three blind spots for</font>

346
00:14:43,470 --> 00:14:48,060
<font color="#E5E5E5">example if the server is actually</font>

347
00:14:45,839 --> 00:14:51,089
<font color="#E5E5E5">running an unknown language and not</font>

348
00:14:48,060 --> 00:14:52,739
<font color="#E5E5E5">JavaScript I'll probably still get to</font>

349
00:14:51,089 --> 00:14:55,079
this point<font color="#E5E5E5"> and the scanner will still</font>

350
00:14:52,740 --> 00:14:56,430
<font color="#CCCCCC">report this to</font><font color="#E5E5E5"> the human to the user who</font>

351
00:14:55,079 --> 00:14:59,219
can<font color="#E5E5E5"> then investigate and figure</font><font color="#CCCCCC"> out</font>

352
00:14:56,430 --> 00:15:02,300
what's going<font color="#CCCCCC"> on</font><font color="#E5E5E5"> and if the scanner</font>

353
00:14:59,220 --> 00:15:04,980
happens to be filtering out<font color="#CCCCCC"> parentheses</font>

354
00:15:02,300 --> 00:15:07,430
<font color="#E5E5E5">to serve the scanner</font><font color="#CCCCCC"> we'll still get</font><font color="#E5E5E5"> to</font>

355
00:15:04,980 --> 00:15:08,600
this point<font color="#E5E5E5"> it won't reject the</font><font color="#CCCCCC"> functions</font>

356
00:15:07,430 --> 00:15:11,029
but it will<font color="#E5E5E5"> find that it</font><font color="#CCCCCC"> concatenates</font>

357
00:15:08,600 --> 00:15:12,260
<font color="#CCCCCC">dreams</font><font color="#E5E5E5"> and it will tell the</font><font color="#CCCCCC"> user who can</font>

358
00:15:11,029 --> 00:15:16,939
<font color="#E5E5E5">figure out what's going on</font>

359
00:15:12,260 --> 00:15:19,220
and finally if the application<font color="#CCCCCC"> isn't</font>

360
00:15:16,940 --> 00:15:21,350
actually vulnerable<font color="#E5E5E5"> to anything the</font>

361
00:15:19,220 --> 00:15:24,560
scanner<font color="#E5E5E5"> only sends a tiny number</font><font color="#CCCCCC"> of</font>

362
00:15:21,350 --> 00:15:26,300
payloads<font color="#E5E5E5"> so it's extremely efficient and</font>

363
00:15:24,560 --> 00:15:28,219
<font color="#E5E5E5">that means that it can afford to do</font>

364
00:15:26,300 --> 00:15:30,680
things<font color="#E5E5E5"> like put payloads everywhere</font>

365
00:15:28,220 --> 00:15:33,140
within<font color="#CCCCCC"> a request</font><font color="#E5E5E5"> even specifying</font>

366
00:15:30,680 --> 00:15:42,439
parameters multiple times to trigger

367
00:15:33,140 --> 00:15:44,720
<font color="#E5E5E5">different code parts unfortunately I've</font>

368
00:15:42,440 --> 00:15:47,510
got ahead of myself slowly<font color="#E5E5E5"> because I</font>

369
00:15:44,720 --> 00:15:49,520
haven't<font color="#CCCCCC"> defined</font><font color="#E5E5E5"> how to know when</font><font color="#CCCCCC"> to</font>

370
00:15:47,510 --> 00:15:52,939
responses from<font color="#E5E5E5"> the applications are</font>

371
00:15:49,520 --> 00:15:55,520
<font color="#E5E5E5">really different the obvious</font><font color="#CCCCCC"> approach of</font>

372
00:15:52,940 --> 00:15:57,860
simply<font color="#E5E5E5"> comparing the strings fail with</font>

373
00:15:55,520 --> 00:15:59,420
horribly<font color="#CCCCCC"> in real</font><font color="#E5E5E5"> life because many</font>

374
00:15:57,860 --> 00:16:02,930
applications like<font color="#E5E5E5"> fulfill their</font>

375
00:15:59,420 --> 00:16:04,849
responses with meaningless<font color="#E5E5E5"> junk content</font>

376
00:16:02,930 --> 00:16:08,599
that changes<font color="#CCCCCC"> randomly</font><font color="#E5E5E5"> on every page load</font>

377
00:16:04,850 --> 00:16:11,810
<font color="#CCCCCC">I originally try to solve this</font><font color="#E5E5E5"> problem</font>

378
00:16:08,600 --> 00:16:14,540
<font color="#E5E5E5">and let me in by fetching the response</font>

379
00:16:11,810 --> 00:16:16,550
several times<font color="#E5E5E5"> and using the longest</font>

380
00:16:14,540 --> 00:16:18,529
common common subsequence<font color="#E5E5E5"> algorithm to</font>

381
00:16:16,550 --> 00:16:20,599
<font color="#CCCCCC">identify the static</font><font color="#E5E5E5"> parts of response</font>

382
00:16:18,529 --> 00:16:22,990
and then stitching<font color="#E5E5E5"> these together who</font>

383
00:16:20,600 --> 00:16:26,240
would<font color="#E5E5E5"> a gigantic regular</font><font color="#CCCCCC"> expression</font>

384
00:16:22,990 --> 00:16:27,920
<font color="#E5E5E5">however a lot of things went wrong with</font>

385
00:16:26,240 --> 00:16:29,690
this<font color="#E5E5E5"> approach</font><font color="#CCCCCC"> too many for me</font><font color="#E5E5E5"> to</font>

386
00:16:27,920 --> 00:16:32,750
actually<font color="#CCCCCC"> listen here but I've</font><font color="#E5E5E5"> lived them</font>

387
00:16:29,690 --> 00:16:34,910
up in the white paper<font color="#CCCCCC"> online what I</font>

388
00:16:32,750 --> 00:16:36,560
<font color="#E5E5E5">found actually works when I gave up</font>

389
00:16:34,910 --> 00:16:39,500
after<font color="#CCCCCC"> a</font><font color="#E5E5E5"> couple of years of trying to</font>

390
00:16:36,560 --> 00:16:42,529
<font color="#E5E5E5">make that work</font><font color="#CCCCCC"> is viewing each response</font>

391
00:16:39,500 --> 00:16:44,120
<font color="#E5E5E5">as a collection</font><font color="#CCCCCC"> of attributes actually</font>

392
00:16:42,529 --> 00:16:46,700
attributes meaning something<font color="#E5E5E5"> like the</font>

393
00:16:44,120 --> 00:16:49,430
status code<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Lion count</font><font color="#E5E5E5"> the word</font>

394
00:16:46,700 --> 00:16:53,029
count<font color="#E5E5E5"> the count of certain interesting</font>

395
00:16:49,430 --> 00:16:55,430
<font color="#CCCCCC">key words</font><font color="#E5E5E5"> and so on</font><font color="#CCCCCC"> and I'll let you</font>

396
00:16:53,029 --> 00:16:59,000
respond several times<font color="#E5E5E5"> with each item in</font>

397
00:16:55,430 --> 00:17:00,650
a<font color="#CCCCCC"> paper and I'll say</font><font color="#E5E5E5"> I need at least one</font>

398
00:16:59,000 --> 00:17:03,260
<font color="#CCCCCC">attribute</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> has the following</font><font color="#E5E5E5"> two</font>

399
00:17:00,650 --> 00:17:05,179
<font color="#E5E5E5">properties</font><font color="#CCCCCC"> it needs to be consistently</font>

400
00:17:03,260 --> 00:17:08,839
different<font color="#E5E5E5"> in the responses to the two</font>

401
00:17:05,179 --> 00:17:12,170
<font color="#CCCCCC">programs but</font><font color="#E5E5E5"> if I send a single prepare</font>

402
00:17:08,839 --> 00:17:15,319
a<font color="#CCCCCC"> single probe over and over it should</font>

403
00:17:12,170 --> 00:17:17,540
<font color="#E5E5E5">never change</font><font color="#CCCCCC"> and if there's something</font>

404
00:17:15,319 --> 00:17:20,928
like<font color="#E5E5E5"> that that tells us these profiles</font>

405
00:17:17,540 --> 00:17:24,039
are definitely triggering code<font color="#E5E5E5"> pods that</font>

406
00:17:20,929 --> 00:17:26,389
meaning<font color="#CCCCCC"> Italy different and that Singley</font>

407
00:17:24,039 --> 00:17:29,389
simple<font color="#CCCCCC"> Reuters is</font><font color="#E5E5E5"> actually really quite</font>

408
00:17:26,388 --> 00:17:32,090
<font color="#E5E5E5">effective</font><font color="#CCCCCC"> and as such</font><font color="#E5E5E5"> we've added an API</font>

409
00:17:29,389 --> 00:17:35,779
<font color="#CCCCCC">- burp suite so any extension can use</font>

410
00:17:32,090 --> 00:17:38,418
this technique<font color="#E5E5E5"> the most important thing</font>

411
00:17:35,779 --> 00:17:41,330
to note<font color="#E5E5E5"> from what I'm doing</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> is that</font>

412
00:17:38,419 --> 00:17:44,059
<font color="#CCCCCC">a no point am I trying to predict what</font>

413
00:17:41,330 --> 00:17:46,279
effect a specific payload will have on

414
00:17:44,059 --> 00:17:49,100
the application<font color="#E5E5E5"> I'm just looking out for</font>

415
00:17:46,279 --> 00:17:52,450
<font color="#E5E5E5">any clue</font><font color="#CCCCCC"> that something is</font><font color="#E5E5E5"> making the</font>

416
00:17:49,100 --> 00:17:55,519
application behave differently

417
00:17:52,450 --> 00:17:57,919
so here's a simple<font color="#CCCCCC"> example here we've</font>

418
00:17:55,519 --> 00:18:01,100
got one valid attribute the status code

419
00:17:57,919 --> 00:18:04,789
never changes<font color="#E5E5E5"> so that's no use and the</font>

420
00:18:01,100 --> 00:18:07,248
lion count changes on every page load<font color="#E5E5E5"> so</font>

421
00:18:04,789 --> 00:18:10,730
that's<font color="#E5E5E5"> not much you see there but the</font>

422
00:18:07,249 --> 00:18:14,179
word count<font color="#E5E5E5"> always drops by</font><font color="#CCCCCC"> one when we</font>

423
00:18:10,730 --> 00:18:15,799
send a<font color="#E5E5E5"> none escaped single quote and so</font>

424
00:18:14,179 --> 00:18:19,159
the scale<font color="#CCCCCC"> in the world will present this</font>

425
00:18:15,799 --> 00:18:21,499
evidence<font color="#E5E5E5"> in a table as you see and this</font>

426
00:18:19,159 --> 00:18:23,960
<font color="#E5E5E5">scanner has found real live sequel</font>

427
00:18:21,499 --> 00:18:31,279
injection issues where the only<font color="#E5E5E5"> evidence</font>

428
00:18:23,960 --> 00:18:34,100
<font color="#E5E5E5">is a single word vanishing</font><font color="#CCCCCC"> here things a</font>

429
00:18:31,279 --> 00:18:35,960
slightly more complex so<font color="#E5E5E5"> the code is a</font>

430
00:18:34,100 --> 00:18:37,340
reasonable attribute it just does what

431
00:18:35,960 --> 00:18:40,789
we expect whenever he calls<font color="#E5E5E5"> an error</font>

432
00:18:37,340 --> 00:18:43,699
it's 500 that's<font color="#E5E5E5"> great but with the word</font>

433
00:18:40,789 --> 00:18:45,320
count it's a bit more complex<font color="#CCCCCC"> so here</font>

434
00:18:43,700 --> 00:18:48,679
when we<font color="#E5E5E5"> called an arrow the word count</font>

435
00:18:45,320 --> 00:18:52,580
is always 27 but the rest of<font color="#E5E5E5"> the time it</font>

436
00:18:48,679 --> 00:18:54,139
changes randomly<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that might be</font>

437
00:18:52,580 --> 00:18:56,840
<font color="#E5E5E5">because</font><font color="#CCCCCC"> of some interaction between</font><font color="#E5E5E5"> our</font>

438
00:18:54,139 --> 00:18:59,209
payloads<font color="#E5E5E5"> and the system or it could be</font>

439
00:18:56,840 --> 00:19:01,668
just<font color="#CCCCCC"> because</font><font color="#E5E5E5"> someone's gone wrong</font><font color="#CCCCCC"> so</font>

440
00:18:59,210 --> 00:19:03,289
prior to<font color="#E5E5E5"> the update that I'm releasing</font>

441
00:19:01,669 --> 00:19:06,619
<font color="#E5E5E5">today this would not have been counted</font>

442
00:19:03,289 --> 00:19:08,809
as valid evidence<font color="#E5E5E5"> but as of today this</font>

443
00:19:06,619 --> 00:19:11,209
is<font color="#E5E5E5"> considered valid evidence but it's</font>

444
00:19:08,809 --> 00:19:13,759
listed in<font color="#E5E5E5"> the table</font><font color="#CCCCCC"> in italics with</font>

445
00:19:11,210 --> 00:19:16,490
stars around the variable attributes so

446
00:19:13,759 --> 00:19:17,779
<font color="#E5E5E5">you know that this evidence is a bit</font>

447
00:19:16,490 --> 00:19:19,100
less strong it's more like

448
00:19:17,779 --> 00:19:21,649
circumstantial evidence

449
00:19:19,100 --> 00:19:24,439
this technique is still<font color="#E5E5E5"> found real</font>

450
00:19:21,649 --> 00:19:27,129
vulnerabilities but just read more

451
00:19:24,440 --> 00:19:30,200
<font color="#CCCCCC">carefully with that</font>

452
00:19:27,129 --> 00:19:33,168
okay so this different strategy is good

453
00:19:30,200 --> 00:19:36,649
<font color="#E5E5E5">but regardless of what dissing strategy</font>

454
00:19:33,169 --> 00:19:38,960
we use we<font color="#CCCCCC"> have to it will only work if</font>

455
00:19:36,649 --> 00:19:44,689
we back<font color="#CCCCCC"> up the very carefully crafted</font>

456
00:19:38,960 --> 00:19:46,580
<font color="#E5E5E5">payload pairs so as I've shown if it was</font>

457
00:19:44,690 --> 00:19:48,440
response<font color="#E5E5E5"> to</font><font color="#CCCCCC"> size</font><font color="#E5E5E5"> random content</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> can</font>

458
00:19:46,580 --> 00:19:52,309
just repeat folks<font color="#E5E5E5"> and filter that stuff</font>

459
00:19:48,440 --> 00:19:54,080
out very easily<font color="#E5E5E5"> some applications like</font>

460
00:19:52,309 --> 00:19:57,110
to alternate between two different

461
00:19:54,080 --> 00:20:00,109
<font color="#E5E5E5">responses</font><font color="#CCCCCC"> so if we alternate between</font><font color="#E5E5E5"> the</font>

462
00:19:57,110 --> 00:20:02,658
<font color="#CCCCCC">two</font><font color="#E5E5E5"> items in our</font><font color="#CCCCCC"> post pair we might sync</font>

463
00:20:00,109 --> 00:20:03,980
up<font color="#E5E5E5"> with the application and falsely</font>

464
00:20:02,659 --> 00:20:07,789
conclude that the different payloads

465
00:20:03,980 --> 00:20:09,049
we're sending are caused are causing the

466
00:20:07,789 --> 00:20:11,658
alternation<font color="#E5E5E5"> of the response when</font>

467
00:20:09,049 --> 00:20:13,700
actually it's<font color="#E5E5E5"> just bad luck so in order</font>

468
00:20:11,659 --> 00:20:15,889
<font color="#E5E5E5">to address that it's important to</font>

469
00:20:13,700 --> 00:20:18,379
<font color="#CCCCCC">shuttle the probe order instead</font><font color="#E5E5E5"> of just</font>

470
00:20:15,889 --> 00:20:22,539
alternating<font color="#E5E5E5"> between the two probes send</font>

471
00:20:18,379 --> 00:20:24,769
one twice in a row<font color="#CCCCCC"> some of the time also</font>

472
00:20:22,539 --> 00:20:27,440
some<font color="#E5E5E5"> applications that are particularly</font>

473
00:20:24,769 --> 00:20:31,460
<font color="#E5E5E5">nasty have deterministic random content</font>

474
00:20:27,440 --> 00:20:33,350
for example<font color="#CCCCCC"> one</font><font color="#E5E5E5"> side I tested likes to</font>

475
00:20:31,460 --> 00:20:35,499
<font color="#E5E5E5">list quotes about why you should buy</font>

476
00:20:33,350 --> 00:20:38,389
their products on their<font color="#CCCCCC"> homepage and</font>

477
00:20:35,499 --> 00:20:41,230
this quote<font color="#E5E5E5"> was randomly selected to fill</font>

478
00:20:38,389 --> 00:20:44,748
a pool<font color="#E5E5E5"> of maybe five different quotes</font>

479
00:20:41,230 --> 00:20:48,919
but this selection<font color="#E5E5E5"> was seeded with the</font>

480
00:20:44,749 --> 00:20:51,529
current URL so for a given URL the quote

481
00:20:48,919 --> 00:20:53,570
you<font color="#E5E5E5"> would see was always the same but as</font>

482
00:20:51,529 --> 00:20:56,029
soon as you changed your payload which

483
00:20:53,570 --> 00:20:57,710
was in the URL you<font color="#CCCCCC"> get a different</font><font color="#E5E5E5"> quote</font>

484
00:20:56,029 --> 00:20:59,359
so my scanner<font color="#E5E5E5"> originally falsely</font>

485
00:20:57,710 --> 00:21:01,429
concluded that this was<font color="#E5E5E5"> vulnerable</font><font color="#CCCCCC"> to</font>

486
00:20:59,359 --> 00:21:05,019
everything<font color="#CCCCCC"> everyone ability</font><font color="#E5E5E5"> out there</font>

487
00:21:01,429 --> 00:21:09,830
pretty<font color="#E5E5E5"> much</font><font color="#CCCCCC"> the way to</font><font color="#E5E5E5"> address that is</font>

488
00:21:05,019 --> 00:21:11,899
to<font color="#E5E5E5"> use probe batches take each item in</font>

489
00:21:09,830 --> 00:21:14,570
your prepare and make cosmetic

490
00:21:11,899 --> 00:21:17,570
alterations to it and send those as well

491
00:21:14,570 --> 00:21:21,470
so rather<font color="#E5E5E5"> than just sending 7/0</font><font color="#CCCCCC"> also</font>

492
00:21:17,570 --> 00:21:23,480
send<font color="#CCCCCC"> 7/0 zero if the</font><font color="#E5E5E5"> application is</font>

493
00:21:21,470 --> 00:21:26,029
vulnerable<font color="#E5E5E5"> this will have exactly the</font>

494
00:21:23,480 --> 00:21:27,309
<font color="#CCCCCC">same effect</font><font color="#E5E5E5"> because the semantic meaning</font>

495
00:21:26,029 --> 00:21:30,679
is the same

496
00:21:27,309 --> 00:21:32,389
but if your input has just<font color="#E5E5E5"> been thrown</font>

497
00:21:30,679 --> 00:21:35,240
as a seed<font color="#E5E5E5"> into a random number</font><font color="#CCCCCC"> generator</font>

498
00:21:32,389 --> 00:21:36,859
<font color="#CCCCCC">or</font><font color="#E5E5E5"> suchlike</font><font color="#CCCCCC"> then this will cause</font><font color="#E5E5E5"> a</font>

499
00:21:35,240 --> 00:21:41,320
different response<font color="#E5E5E5"> for the application</font>

500
00:21:36,859 --> 00:21:41,320
<font color="#E5E5E5">and you won't get</font><font color="#CCCCCC"> the false positive</font>

501
00:21:43,429 --> 00:21:48,629
<font color="#E5E5E5">okay that's pretty much</font><font color="#CCCCCC"> all the</font><font color="#E5E5E5"> theory</font>

502
00:21:46,259 --> 00:21:51,029
<font color="#CCCCCC">just to consolidate that</font><font color="#E5E5E5"> I'll just show</font>

503
00:21:48,629 --> 00:21:53,908
a quick<font color="#CCCCCC"> example of</font><font color="#E5E5E5"> the scanner searching</font>

504
00:21:51,029 --> 00:21:57,329
for and finding<font color="#CCCCCC"> a vulnerability</font><font color="#E5E5E5"> so here</font>

505
00:21:53,909 --> 00:21:59,669
<font color="#CCCCCC">Shannon has sent an input of 221</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> the</font>

506
00:21:57,329 --> 00:22:03,149
server has responded<font color="#E5E5E5"> and there's a word</font>

507
00:21:59,669 --> 00:22:04,679
count<font color="#CCCCCC"> of 965</font><font color="#E5E5E5"> so the</font><font color="#CCCCCC"> standards</font><font color="#E5E5E5"> going to</font>

508
00:22:03,149 --> 00:22:06,299
start out<font color="#E5E5E5"> by</font><font color="#CCCCCC"> saying a single</font><font color="#E5E5E5"> quote and</font>

509
00:22:04,679 --> 00:22:08,009
<font color="#CCCCCC">that hasn't caused any change in the</font>

510
00:22:06,299 --> 00:22:10,529
word count<font color="#E5E5E5"> so it's just going to give up</font>

511
00:22:08,009 --> 00:22:13,919
the bat and<font color="#E5E5E5"> move on and try doing divide</font>

512
00:22:10,529 --> 00:22:16,289
by<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> that does change the word count</font>

513
00:22:13,919 --> 00:22:19,139
to 327<font color="#CCCCCC"> so it's going</font><font color="#E5E5E5"> to follow up and</font>

514
00:22:16,289 --> 00:22:21,089
try divided by one but<font color="#E5E5E5"> that doesn't</font>

515
00:22:19,139 --> 00:22:25,019
revert to work out<font color="#E5E5E5"> so it's going to give</font>

516
00:22:21,089 --> 00:22:26,999
up with that approach as well<font color="#E5E5E5"> now it's</font>

517
00:22:25,019 --> 00:22:28,700
going<font color="#E5E5E5"> to try injecting a function called</font>

518
00:22:26,999 --> 00:22:31,559
with a comma<font color="#CCCCCC"> which is</font><font color="#E5E5E5"> a technique that</font>

519
00:22:28,700 --> 00:22:35,399
typically works in sequel statements<font color="#E5E5E5"> in</font>

520
00:22:31,559 --> 00:22:37,619
particularly<font color="#E5E5E5"> in order by</font><font color="#CCCCCC"> causes and here</font>

521
00:22:35,399 --> 00:22:39,689
injecting an<font color="#E5E5E5"> invalid function tool has</font>

522
00:22:37,619 --> 00:22:41,339
changed the word count to zero so it's

523
00:22:39,690 --> 00:22:43,799
going to<font color="#E5E5E5"> follow up and try a valid</font>

524
00:22:41,339 --> 00:22:45,329
function call<font color="#E5E5E5"> now the</font><font color="#CCCCCC"> work out</font><font color="#E5E5E5"> has</font>

525
00:22:43,799 --> 00:22:48,629
returned<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> original value</font><font color="#E5E5E5"> that</font>

526
00:22:45,329 --> 00:22:50,369
looks<font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> but the scanner needs</font>

527
00:22:48,629 --> 00:22:53,070
to make<font color="#E5E5E5"> sure this isn't is some kind of</font>

528
00:22:50,369 --> 00:22:55,738
deterministic<font color="#E5E5E5"> random crap so it's going</font>

529
00:22:53,070 --> 00:22:57,928
<font color="#E5E5E5">to follow up and try another cosmetic</font>

530
00:22:55,739 --> 00:23:00,029
<font color="#CCCCCC">variation so here rather</font><font color="#E5E5E5"> than calling</font>

531
00:22:57,929 --> 00:23:01,469
<font color="#E5E5E5">the</font><font color="#CCCCCC"> function that</font><font color="#E5E5E5"> doesn't exist it's</font>

532
00:23:00,029 --> 00:23:03,599
called in<font color="#CCCCCC"> a real function but the number</font>

533
00:23:01,469 --> 00:23:04,919
<font color="#E5E5E5">of arguments is not valid so it will</font>

534
00:23:03,599 --> 00:23:08,519
still throw a<font color="#CCCCCC"> syntaxerror</font>

535
00:23:04,919 --> 00:23:10,619
and now<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> confirm the behavior so we</font>

536
00:23:08,519 --> 00:23:13,049
know we've got<font color="#E5E5E5"> some kind of</font><font color="#CCCCCC"> server-side</font>

537
00:23:10,619 --> 00:23:14,519
<font color="#E5E5E5">functional injection but it would be</font>

538
00:23:13,049 --> 00:23:16,259
<font color="#E5E5E5">nice</font><font color="#CCCCCC"> to know what the server's</font><font color="#E5E5E5"> running</font>

539
00:23:14,519 --> 00:23:17,700
<font color="#E5E5E5">in so it follows up and try the mode</font><font color="#CCCCCC"> of</font>

540
00:23:16,259 --> 00:23:20,070
<font color="#E5E5E5">language specific functions and</font>

541
00:23:17,700 --> 00:23:24,059
eventually finds<font color="#CCCCCC"> the current request ID</font>

542
00:23:20,070 --> 00:23:25,499
works which tells us this is running my

543
00:23:24,059 --> 00:23:30,599
<font color="#E5E5E5">sequel server we've got sequel server</font>

544
00:23:25,499 --> 00:23:32,969
injection cool<font color="#E5E5E5"> okay that's enough of the</font>

545
00:23:30,599 --> 00:23:37,049
theory<font color="#E5E5E5"> let's see how</font><font color="#CCCCCC"> a scanner works in</font>

546
00:23:32,969 --> 00:23:40,049
practice<font color="#E5E5E5"> in order</font><font color="#CCCCCC"> to find</font><font color="#E5E5E5"> this out</font><font color="#CCCCCC"> I</font>

547
00:23:37,049 --> 00:23:43,139
decided<font color="#CCCCCC"> to run a scan on every server</font>

548
00:23:40,049 --> 00:23:45,329
<font color="#CCCCCC">that I could legally scan and that</font>

549
00:23:43,139 --> 00:23:48,029
effectively<font color="#E5E5E5"> means every site that</font><font color="#CCCCCC"> has a</font>

550
00:23:45,329 --> 00:23:50,969
bug bounty<font color="#E5E5E5"> program that doesn't forbid</font>

551
00:23:48,029 --> 00:23:51,800
<font color="#E5E5E5">automated scanning and in order to help</font>

552
00:23:50,969 --> 00:23:54,710
out with<font color="#E5E5E5"> that</font>

553
00:23:51,800 --> 00:23:57,290
<font color="#CCCCCC">I will at all called distribute damage</font>

554
00:23:54,710 --> 00:23:59,600
<font color="#E5E5E5">which implements a per host</font><font color="#CCCCCC"> rate limit</font>

555
00:23:57,290 --> 00:24:01,490
so you can<font color="#E5E5E5"> scale 30 hosts at the same</font>

556
00:23:59,600 --> 00:24:04,340
time easily using<font color="#E5E5E5"> but but with this</font>

557
00:24:01,490 --> 00:24:06,950
<font color="#E5E5E5">extension that will ensure that each</font>

558
00:24:04,340 --> 00:24:08,780
host<font color="#CCCCCC"> only thing only</font><font color="#E5E5E5"> sees requests</font>

559
00:24:06,950 --> 00:24:10,810
coming in<font color="#E5E5E5"> that may</font><font color="#CCCCCC"> be one per second or</font>

560
00:24:08,780 --> 00:24:13,250
1 for 3 seconds

561
00:24:10,810 --> 00:24:16,850
now the point of<font color="#E5E5E5"> that is to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> polite</font>

562
00:24:13,250 --> 00:24:19,760
<font color="#E5E5E5">but</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> quite a cool side effect if</font>

563
00:24:16,850 --> 00:24:22,730
you<font color="#E5E5E5"> disable</font><font color="#CCCCCC"> over</font><font color="#E5E5E5"> to normal Stan checks</font>

564
00:24:19,760 --> 00:24:25,580
<font color="#E5E5E5">and just on</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> run back slash powered</font>

565
00:24:22,730 --> 00:24:27,680
scanner<font color="#CCCCCC"> and</font><font color="#E5E5E5"> with this extension see the</font>

566
00:24:25,580 --> 00:24:30,320
service point of view you're sending a

567
00:24:27,680 --> 00:24:33,050
<font color="#E5E5E5">tiny number</font><font color="#CCCCCC"> of quite</font><font color="#E5E5E5"> noxious payloads</font>

568
00:24:30,320 --> 00:24:34,879
very slowly<font color="#E5E5E5"> and that means it's quite</font>

569
00:24:33,050 --> 00:24:36,680
likely to<font color="#E5E5E5"> slip</font><font color="#CCCCCC"> under the radar so if</font>

570
00:24:34,880 --> 00:24:39,470
you're on a<font color="#CCCCCC"> red</font><font color="#E5E5E5"> scene</font><font color="#CCCCCC"> or you're trying</font>

571
00:24:36,680 --> 00:24:44,810
<font color="#CCCCCC">not to make a wast too angry this can be</font>

572
00:24:39,470 --> 00:24:47,210
quite useful<font color="#E5E5E5"> the scanner is a little bit</font>

573
00:24:44,810 --> 00:24:48,770
like highly enthusiastic rookie security

574
00:24:47,210 --> 00:24:52,250
desperate<font color="#E5E5E5"> if you point it at something</font>

575
00:24:48,770 --> 00:24:54,470
<font color="#E5E5E5">that's really easy</font><font color="#CCCCCC"> it will just tell you</font>

576
00:24:52,250 --> 00:24:58,010
exactly what's going<font color="#E5E5E5"> on</font><font color="#CCCCCC"> so here is</font><font color="#E5E5E5"> to</font>

577
00:24:54,470 --> 00:25:00,410
<font color="#CCCCCC">found some my sequel</font><font color="#E5E5E5"> objection I this</font>

578
00:24:58,010 --> 00:25:02,270
<font color="#E5E5E5">was in the</font><font color="#CCCCCC"> use of</font><font color="#E5E5E5"> agent on a server</font><font color="#CCCCCC"> that</font>

579
00:25:00,410 --> 00:25:05,060
was running<font color="#E5E5E5"> WordPress so</font><font color="#CCCCCC"> presumably had</font>

580
00:25:02,270 --> 00:25:06,770
some terrible<font color="#CCCCCC"> plugins and</font><font color="#E5E5E5"> a school but</font>

581
00:25:05,060 --> 00:25:12,710
<font color="#CCCCCC">know better than</font><font color="#E5E5E5"> any</font><font color="#CCCCCC"> other scanner</font>

582
00:25:06,770 --> 00:25:14,060
<font color="#E5E5E5">really this gentle the scanner is that</font>

583
00:25:12,710 --> 00:25:16,370
it will tell<font color="#E5E5E5"> you when it's out on</font><font color="#CCCCCC"> an</font>

584
00:25:14,060 --> 00:25:18,230
<font color="#E5E5E5">interesting just like this rookie tester</font>

585
00:25:16,370 --> 00:25:19,850
they will try something<font color="#E5E5E5"> they'll make a</font>

586
00:25:18,230 --> 00:25:23,120
bit<font color="#E5E5E5"> of progress and then they'll get</font><font color="#CCCCCC"> a</font>

587
00:25:19,850 --> 00:25:26,179
<font color="#CCCCCC">stock but</font><font color="#E5E5E5"> they'll let you</font><font color="#CCCCCC"> know so what</font>

588
00:25:23,120 --> 00:25:27,770
we've got<font color="#CCCCCC"> here is the first</font><font color="#E5E5E5"> critical</font>

589
00:25:26,180 --> 00:25:30,920
vulnerability the<font color="#CCCCCC"> back slash</font><font color="#E5E5E5"> powered</font>

590
00:25:27,770 --> 00:25:33,770
scanner<font color="#CCCCCC"> ever found it was on a pen test</font>

591
00:25:30,920 --> 00:25:36,050
and I<font color="#E5E5E5"> haven't found</font><font color="#CCCCCC"> this issue while</font>

592
00:25:33,770 --> 00:25:39,379
manual manually testing<font color="#E5E5E5"> so this</font><font color="#CCCCCC"> is all a</font>

593
00:25:36,050 --> 00:25:41,570
extremely happy<font color="#E5E5E5"> would anyone like to</font>

594
00:25:39,380 --> 00:25:47,240
take<font color="#CCCCCC"> a guess as to what the server was</font>

595
00:25:41,570 --> 00:25:49,550
vulnerable to now<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> it's vulnerable to</font>

596
00:25:47,240 --> 00:25:52,490
<font color="#E5E5E5">PHP code injection but the server is</font>

597
00:25:49,550 --> 00:25:56,389
filtering out<font color="#CCCCCC"> parentheses so the</font>

598
00:25:52,490 --> 00:25:57,950
function call has failed<font color="#E5E5E5"> and yeah I</font>

599
00:25:56,390 --> 00:25:59,420
didn't even find this<font color="#E5E5E5"> issue in</font><font color="#CCCCCC"> manual</font>

600
00:25:57,950 --> 00:26:01,280
testing and<font color="#E5E5E5"> this application had</font><font color="#CCCCCC"> been</font>

601
00:25:59,420 --> 00:26:03,680
tested<font color="#E5E5E5"> by several other companies prior</font>

602
00:26:01,280 --> 00:26:04,830
to me testing it so it was a<font color="#CCCCCC"> pretty hard</font>

603
00:26:03,680 --> 00:26:06,900
to<font color="#E5E5E5"> find issue</font>

604
00:26:04,830 --> 00:26:09,689
the reason<font color="#E5E5E5"> that I didn't find it is</font>

605
00:26:06,900 --> 00:26:13,710
because the input had to be placed in

606
00:26:09,690 --> 00:26:16,500
<font color="#E5E5E5">the past and this was this was on a</font>

607
00:26:13,710 --> 00:26:18,180
household<font color="#E5E5E5"> name website calling</font><font color="#CCCCCC"> a PHP Evo</font>

608
00:26:16,500 --> 00:26:19,530
on the path is the kind of nonsense that

609
00:26:18,180 --> 00:26:23,550
you expect an Internet of Things device

610
00:26:19,530 --> 00:26:24,750
<font color="#E5E5E5">to do</font><font color="#CCCCCC"> and not</font><font color="#E5E5E5"> a real website anyway the</font>

611
00:26:23,550 --> 00:26:27,830
<font color="#E5E5E5">scanner found it because it's</font><font color="#CCCCCC"> very</font>

612
00:26:24,750 --> 00:26:31,140
patient and try payloads everywhere

613
00:26:27,830 --> 00:26:33,330
whenever<font color="#CCCCCC"> you see a partial issue you can</font>

614
00:26:31,140 --> 00:26:37,320
be sure<font color="#CCCCCC"> that things won't be entirely</font>

615
00:26:33,330 --> 00:26:39,659
<font color="#E5E5E5">straightforward</font><font color="#CCCCCC"> so here</font><font color="#E5E5E5"> the scanner said</font>

616
00:26:37,320 --> 00:26:40,980
it managed<font color="#CCCCCC"> to inject a function call but</font>

617
00:26:39,660 --> 00:26:44,730
it couldn't figure out<font color="#E5E5E5"> what</font><font color="#CCCCCC"> the database</font>

618
00:26:40,980 --> 00:26:46,620
language<font color="#E5E5E5"> was which is a bit odd because</font>

619
00:26:44,730 --> 00:26:50,400
it has<font color="#E5E5E5"> support for all major database</font>

620
00:26:46,620 --> 00:26:53,070
languages so I took this<font color="#E5E5E5"> issue to the</font>

621
00:26:50,400 --> 00:26:54,750
<font color="#E5E5E5">repeater and I investigated manually and</font>

622
00:26:53,070 --> 00:26:56,030
it<font color="#E5E5E5"> became</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> obvious</font><font color="#CCCCCC"> what the problem</font>

623
00:26:54,750 --> 00:26:59,160
<font color="#CCCCCC">was</font>

624
00:26:56,030 --> 00:27:01,020
<font color="#CCCCCC">regardless</font><font color="#E5E5E5"> of what</font><font color="#CCCCCC"> request I sent to</font><font color="#E5E5E5"> the</font>

625
00:26:59,160 --> 00:27:04,050
application<font color="#CCCCCC"> I go up for</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> three</font>

626
00:27:01,020 --> 00:27:05,340
forbidden back<font color="#E5E5E5"> in other words I've been</font>

627
00:27:04,050 --> 00:27:09,810
IP<font color="#E5E5E5"> banned quite a web application</font>

628
00:27:05,340 --> 00:27:12,240
violence and so I changed my<font color="#E5E5E5"> IP and I</font>

629
00:27:09,810 --> 00:27:13,290
leave<font color="#E5E5E5"> on the stand on that target and I</font>

630
00:27:12,240 --> 00:27:15,810
found my<font color="#E5E5E5"> simple injection</font>

631
00:27:13,290 --> 00:27:19,110
it might soft signal injection so that

632
00:27:15,810 --> 00:27:23,010
was nice<font color="#CCCCCC"> that was</font><font color="#E5E5E5"> really easy and that</font>

633
00:27:19,110 --> 00:27:26,550
was on a US Department of Defense<font color="#CCCCCC"> server</font>

634
00:27:23,010 --> 00:27:29,700
and actually affected<font color="#E5E5E5"> over 100 different</font>

635
00:27:26,550 --> 00:27:31,560
US military service I guess they were

636
00:27:29,700 --> 00:27:35,310
all<font color="#E5E5E5"> using the same lively or that had</font>

637
00:27:31,560 --> 00:27:37,290
some<font color="#E5E5E5"> kind of shared code it raises the</font>

638
00:27:35,310 --> 00:27:40,350
question<font color="#E5E5E5"> why did no other scanners</font>

639
00:27:37,290 --> 00:27:42,810
<font color="#E5E5E5">finest given that</font><font color="#CCCCCC"> this vulnerability was</font>

640
00:27:40,350 --> 00:27:46,320
<font color="#CCCCCC">displayed on tons of publicly accessible</font>

641
00:27:42,810 --> 00:27:47,790
websites<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> that's probably because</font>

642
00:27:46,320 --> 00:27:51,409
<font color="#CCCCCC">all the other</font><font color="#E5E5E5"> scanners just got IP</font>

643
00:27:47,790 --> 00:27:51,409
banned before<font color="#CCCCCC"> they go</font><font color="#E5E5E5"> anywhere at all</font>

644
00:27:55,140 --> 00:28:00,360
if the scanner finds<font color="#E5E5E5"> a partial result</font>

645
00:27:58,110 --> 00:28:02,699
<font color="#E5E5E5">like the last one and you spend hours</font>

646
00:28:00,360 --> 00:28:05,580
<font color="#E5E5E5">investigating probably the most</font>

647
00:28:02,700 --> 00:28:07,850
disappointing outcome<font color="#CCCCCC"> its defined that</font>

648
00:28:05,580 --> 00:28:10,830
you've got regular expression injection

649
00:28:07,850 --> 00:28:12,449
because typically this vulnerability<font color="#E5E5E5"> has</font>

650
00:28:10,830 --> 00:28:14,100
pretty much most developed<font color="#CCCCCC"> it like the</font>

651
00:28:12,450 --> 00:28:16,020
best<font color="#E5E5E5"> it can be used for is normally a</font>

652
00:28:14,100 --> 00:28:19,139
denial of service<font color="#E5E5E5"> and who cares about</font>

653
00:28:16,020 --> 00:28:21,270
<font color="#E5E5E5">that so it's important to try</font><font color="#CCCCCC"> and</font>

654
00:28:19,140 --> 00:28:23,870
identify<font color="#CCCCCC"> this one of anything as early</font>

655
00:28:21,270 --> 00:28:26,160
as possible<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you don't waste time</font>

656
00:28:23,870 --> 00:28:29,100
<font color="#E5E5E5">one of</font><font color="#CCCCCC"> the ways that you</font><font color="#E5E5E5"> can find that</font>

657
00:28:26,160 --> 00:28:31,049
is by trying<font color="#CCCCCC"> to</font><font color="#E5E5E5"> inject a bad</font><font color="#CCCCCC"> Crescent</font><font color="#E5E5E5"> if</font>

658
00:28:29,100 --> 00:28:33,178
you inject something<font color="#CCCCCC"> like backslash 0</font>

659
00:28:31,049 --> 00:28:34,830
and it gets converted<font color="#E5E5E5"> into another</font>

660
00:28:33,179 --> 00:28:37,980
<font color="#E5E5E5">string that tells you okay that's just</font>

661
00:28:34,830 --> 00:28:39,629
<font color="#CCCCCC">reg X injection and also if you notice</font>

662
00:28:37,980 --> 00:28:42,480
<font color="#CCCCCC">to come a different response</font><font color="#E5E5E5"> from the</font>

663
00:28:39,630 --> 00:28:46,049
application when<font color="#CCCCCC"> you inject slash 1</font><font color="#E5E5E5"> and</font>

664
00:28:42,480 --> 00:28:47,820
something<font color="#CCCCCC"> like</font><font color="#E5E5E5"> slash 1 1 1 once</font><font color="#CCCCCC"> again</font>

665
00:28:46,049 --> 00:28:49,860
that<font color="#CCCCCC"> could</font><font color="#E5E5E5"> indicate regex injection</font>

666
00:28:47,820 --> 00:28:51,840
because<font color="#CCCCCC"> slash 1 1 1 is too high</font><font color="#E5E5E5"> to be a</font>

667
00:28:49,860 --> 00:28:53,100
valid regular expression group and it

668
00:28:51,840 --> 00:28:56,399
will typically<font color="#CCCCCC"> throw some kind of</font>

669
00:28:53,100 --> 00:28:59,219
exception<font color="#E5E5E5"> where it slash</font><font color="#CCCCCC"> one point also</font>

670
00:28:56,400 --> 00:29:01,320
<font color="#E5E5E5">is when using that</font><font color="#CCCCCC"> slash power scalar</font>

671
00:28:59,220 --> 00:29:03,900
it's very easy<font color="#E5E5E5"> to forget that actually</font>

672
00:29:01,320 --> 00:29:05,850
<font color="#CCCCCC">you are</font><font color="#E5E5E5"> human and you</font><font color="#CCCCCC"> could</font><font color="#E5E5E5"> just read</font>

673
00:29:03,900 --> 00:29:07,940
the result and see that there's an error

674
00:29:05,850 --> 00:29:11,280
that<font color="#E5E5E5"> tells you exactly</font><font color="#CCCCCC"> what's going on I</font>

675
00:29:07,940 --> 00:29:13,230
generally think of that some<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> time</font>

676
00:29:11,280 --> 00:29:15,990
<font color="#CCCCCC">wedge X injection is quite possible</font>

677
00:29:13,230 --> 00:29:18,390
because<font color="#E5E5E5"> on certain PHP systems for</font>

678
00:29:15,990 --> 00:29:21,030
example PHP<font color="#CCCCCC"> myadmin</font>

679
00:29:18,390 --> 00:29:24,299
had this vulnerability<font color="#CCCCCC"> you can specify</font>

680
00:29:21,030 --> 00:29:26,760
additional<font color="#CCCCCC"> veget regex</font><font color="#E5E5E5"> flags including</font>

681
00:29:24,299 --> 00:29:30,450
<font color="#CCCCCC">the e flag for eval and thus</font><font color="#E5E5E5"> get code</font>

682
00:29:26,760 --> 00:29:33,150
execution<font color="#E5E5E5"> so that's nice most of the</font>

683
00:29:30,450 --> 00:29:34,679
time that<font color="#E5E5E5"> won't work and so to save you</font>

684
00:29:33,150 --> 00:29:36,360
from the effort of<font color="#CCCCCC"> trying</font><font color="#E5E5E5"> this backslash</font>

685
00:29:34,679 --> 00:29:40,160
<font color="#E5E5E5">powered</font><font color="#CCCCCC"> scan</font><font color="#E5E5E5"> I will try</font><font color="#CCCCCC"> that follow-up</font>

686
00:29:36,360 --> 00:29:40,159
<font color="#CCCCCC">Talos for you automatically</font>

687
00:29:40,220 --> 00:29:46,169
<font color="#E5E5E5">other times the scanner will get false</font>

688
00:29:43,260 --> 00:29:50,040
positives<font color="#CCCCCC"> now these are generally caused</font>

689
00:29:46,169 --> 00:29:52,350
by flaws in the probe pairs and the

690
00:29:50,040 --> 00:29:54,990
copay is used in<font color="#E5E5E5"> backslash powered</font>

691
00:29:52,350 --> 00:29:57,600
scanner by default have been refined

692
00:29:54,990 --> 00:29:59,040
over the<font color="#E5E5E5"> last year</font><font color="#CCCCCC"> or so and so false</font>

693
00:29:57,600 --> 00:30:02,459
positives<font color="#E5E5E5"> are going to be really quite</font>

694
00:29:59,040 --> 00:30:04,590
rare<font color="#E5E5E5"> but if you add your</font><font color="#CCCCCC"> own your own</font>

695
00:30:02,460 --> 00:30:06,120
experimental<font color="#E5E5E5"> prophase you'll probably</font>

696
00:30:04,590 --> 00:30:06,730
find that<font color="#E5E5E5"> you need to refine them to</font>

697
00:30:06,120 --> 00:30:09,879
avoid

698
00:30:06,730 --> 00:30:11,050
<font color="#E5E5E5">certain false positives here we can</font>

699
00:30:09,880 --> 00:30:13,780
immediately tell<font color="#CCCCCC"> there's something a</font>

700
00:30:11,050 --> 00:30:15,430
<font color="#CCCCCC">little</font><font color="#E5E5E5"> bit weird because we're</font><font color="#CCCCCC"> getting a</font>

701
00:30:13,780 --> 00:30:18,360
<font color="#CCCCCC">four</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> when we call a valid</font>

702
00:30:15,430 --> 00:30:21,160
function<font color="#E5E5E5"> it doesn't</font><font color="#CCCCCC"> make much sense and</font>

703
00:30:18,360 --> 00:30:22,449
the root cause is actually that there's

704
00:30:21,160 --> 00:30:27,130
a<font color="#CCCCCC"> Web Application Firewall</font>

705
00:30:22,450 --> 00:30:28,600
<font color="#CCCCCC">grepping</font><font color="#E5E5E5"> for the text</font><font color="#CCCCCC"> substr so that's</font>

706
00:30:27,130 --> 00:30:31,120
<font color="#CCCCCC">all cause is that</font><font color="#E5E5E5"> false positive and</font>

707
00:30:28,600 --> 00:30:33,550
<font color="#CCCCCC">that was easy to fix I just</font><font color="#E5E5E5"> added a</font>

708
00:30:31,120 --> 00:30:35,439
variation<font color="#CCCCCC"> that still called</font><font color="#E5E5E5"> the</font>

709
00:30:33,550 --> 00:30:37,480
substrate function but used invalid

710
00:30:35,440 --> 00:30:40,720
parameters to it<font color="#E5E5E5"> so the Web Application</font>

711
00:30:37,480 --> 00:30:42,430
Firewall<font color="#CCCCCC"> isn't smart enough</font><font color="#E5E5E5"> to parse the</font>

712
00:30:40,720 --> 00:30:45,130
input and work out whether the arguments

713
00:30:42,430 --> 00:30:49,240
are valid and<font color="#CCCCCC"> so</font><font color="#E5E5E5"> that resolve</font><font color="#CCCCCC"> is false</font>

714
00:30:45,130 --> 00:30:51,400
positive in general<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is why you want</font>

715
00:30:49,240 --> 00:30:54,930
your players to<font color="#E5E5E5"> be as syntactically</font>

716
00:30:51,400 --> 00:30:54,930
close to each other<font color="#E5E5E5"> as</font><font color="#CCCCCC"> possible</font>

717
00:30:55,860 --> 00:30:59,490
other times the scanner will<font color="#CCCCCC"> finds</font>

718
00:30:58,720 --> 00:31:01,780
<font color="#E5E5E5">things that aren't exactly</font>

719
00:30:59,490 --> 00:31:05,770
<font color="#E5E5E5">vulnerabilities but they're</font><font color="#CCCCCC"> useful</font>

720
00:31:01,780 --> 00:31:08,320
pieces<font color="#CCCCCC"> of intelligence so here it</font>

721
00:31:05,770 --> 00:31:10,720
initially looks as though we've got some

722
00:31:08,320 --> 00:31:14,710
kind<font color="#E5E5E5"> of code injection</font><font color="#CCCCCC"> in a numeric</font>

723
00:31:10,720 --> 00:31:16,240
context but the scanner will now send

724
00:31:14,710 --> 00:31:20,830
the follow-up payload and find that the

725
00:31:16,240 --> 00:31:22,720
<font color="#E5E5E5">same thing works with HTML tags so now</font>

726
00:31:20,830 --> 00:31:24,610
it<font color="#CCCCCC"> looks quite different the root cause</font>

727
00:31:22,720 --> 00:31:26,530
is<font color="#E5E5E5"> actually that there's a web</font>

728
00:31:24,610 --> 00:31:29,310
<font color="#CCCCCC">applications rival again a</font><font color="#E5E5E5"> different one</font>

729
00:31:26,530 --> 00:31:34,030
and<font color="#CCCCCC"> it's rewriting requests</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> slights</font>

730
00:31:29,310 --> 00:31:35,560
to remove comments<font color="#E5E5E5"> so the backend for</font>

731
00:31:34,030 --> 00:31:37,120
the first in the first case<font color="#CCCCCC"> just be a</font>

732
00:31:35,560 --> 00:31:38,950
<font color="#E5E5E5">zero whereas in the second case</font><font color="#CCCCCC"> that</font>

733
00:31:37,120 --> 00:31:41,639
<font color="#E5E5E5">seems a bunch of junk</font><font color="#CCCCCC"> so that's why it</font>

734
00:31:38,950 --> 00:31:45,460
<font color="#CCCCCC">causes an error only in the second case</font>

735
00:31:41,640 --> 00:31:47,500
now<font color="#E5E5E5"> that</font><font color="#CCCCCC"> isn't a vulnerability by itself</font>

736
00:31:45,460 --> 00:31:51,070
<font color="#E5E5E5">but that is actually</font><font color="#CCCCCC"> quite useful</font><font color="#E5E5E5"> in</font>

737
00:31:47,500 --> 00:31:53,290
some<font color="#CCCCCC"> situations because you can use this</font>

738
00:31:51,070 --> 00:31:55,149
behavior to<font color="#E5E5E5"> bypass browsers cross-site</font>

739
00:31:53,290 --> 00:31:56,770
scripting filters<font color="#CCCCCC"> their filters use</font>

740
00:31:55,150 --> 00:31:59,050
regular expressions and<font color="#E5E5E5"> they can't</font>

741
00:31:56,770 --> 00:32:02,050
possibly<font color="#E5E5E5"> account for requests being</font>

742
00:31:59,050 --> 00:32:05,620
rewritten<font color="#E5E5E5"> in flight by intermediate</font>

743
00:32:02,050 --> 00:32:06,940
servers so if you just<font color="#E5E5E5"> inject a comment</font>

744
00:32:05,620 --> 00:32:09,040
into your payload that<font color="#CCCCCC"> will break</font><font color="#E5E5E5"> the</font>

745
00:32:06,940 --> 00:32:12,670
regex<font color="#CCCCCC"> and the browser</font><font color="#E5E5E5"> won't catch the</font>

746
00:32:09,040 --> 00:32:15,820
cross-site scripting vulnerability other

747
00:32:12,670 --> 00:32:19,390
times you'll find issues that are

748
00:32:15,820 --> 00:32:20,409
destined<font color="#E5E5E5"> to remain a mystery the scanner</font>

749
00:32:19,390 --> 00:32:23,650
found this one

750
00:32:20,410 --> 00:32:25,450
couple of months<font color="#CCCCCC"> ago and I spent about a</font>

751
00:32:23,650 --> 00:32:28,840
day<font color="#CCCCCC"> trying to</font><font color="#E5E5E5"> figure out what was</font><font color="#CCCCCC"> going</font>

752
00:32:25,450 --> 00:32:30,250
on here<font color="#E5E5E5"> and Gareth Hayes also spent</font>

753
00:32:28,840 --> 00:32:31,720
about<font color="#CCCCCC"> a day</font><font color="#E5E5E5"> trying to figure</font><font color="#CCCCCC"> out what</font>

754
00:32:30,250 --> 00:32:33,700
was<font color="#CCCCCC"> going on and there's some other</font>

755
00:32:31,720 --> 00:32:35,500
<font color="#E5E5E5">people</font><font color="#CCCCCC"> in the office also he</font><font color="#E5E5E5"> tried to</font>

756
00:32:33,700 --> 00:32:38,080
figure<font color="#CCCCCC"> out what was going on</font>

757
00:32:35,500 --> 00:32:40,570
and none of us could<font color="#E5E5E5"> could could do it</font>

758
00:32:38,080 --> 00:32:42,550
<font color="#E5E5E5">the behavior from the server here it</font>

759
00:32:40,570 --> 00:32:45,250
<font color="#E5E5E5">almost matches what you would expect</font>

760
00:32:42,550 --> 00:32:49,149
from a<font color="#CCCCCC"> Jarvis</font><font color="#E5E5E5"> from a Java eval on a</font>

761
00:32:45,250 --> 00:32:50,890
single closer to regular expression but

762
00:32:49,150 --> 00:32:53,620
<font color="#E5E5E5">it doesn't quite match it so none</font><font color="#CCCCCC"> of us</font>

763
00:32:50,890 --> 00:32:55,840
could escalate this and this is just

764
00:32:53,620 --> 00:32:58,360
<font color="#CCCCCC">going to happen sometimes</font><font color="#E5E5E5"> if you find</font>

765
00:32:55,840 --> 00:33:00,610
something<font color="#CCCCCC"> like this</font><font color="#E5E5E5"> and you're on a on a</font>

766
00:32:58,360 --> 00:33:02,860
client job<font color="#E5E5E5"> please consider</font><font color="#CCCCCC"> asking the</font>

767
00:33:00,610 --> 00:33:04,479
client what the hell is going on maybe

768
00:33:02,860 --> 00:33:07,899
they can show you the source code<font color="#E5E5E5"> even</font>

769
00:33:04,480 --> 00:33:09,880
and<font color="#E5E5E5"> if you let if you let me</font><font color="#CCCCCC"> know what</font>

770
00:33:07,900 --> 00:33:11,890
the behavior is I can<font color="#E5E5E5"> potentially add a</font>

771
00:33:09,880 --> 00:33:13,480
<font color="#E5E5E5">follow-up test</font><font color="#CCCCCC"> the back slash powered</font>

772
00:33:11,890 --> 00:33:18,040
scanner<font color="#E5E5E5"> to try and classify it more</font>

773
00:33:13,480 --> 00:33:19,750
accurately as<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the update that I'm</font>

774
00:33:18,040 --> 00:33:21,670
releasing after this presentation

775
00:33:19,750 --> 00:33:24,990
backslash power planner will also find

776
00:33:21,670 --> 00:33:27,040
<font color="#E5E5E5">server-side HTTP parameter pollution</font>

777
00:33:24,990 --> 00:33:28,390
<font color="#CCCCCC">just in</font><font color="#E5E5E5"> case you're not familiar with</font>

778
00:33:27,040 --> 00:33:31,330
<font color="#E5E5E5">this vulnerability I'll just briefly</font>

779
00:33:28,390 --> 00:33:33,400
describe it<font color="#CCCCCC"> so applications sometimes</font>

780
00:33:31,330 --> 00:33:35,590
take user input<font color="#E5E5E5"> and embed this in a</font>

781
00:33:33,400 --> 00:33:39,250
query to<font color="#CCCCCC"> a back-end server</font><font color="#E5E5E5"> that isn't</font>

782
00:33:35,590 --> 00:33:41,980
publicly accessible and that's<font color="#E5E5E5"> fine but</font>

783
00:33:39,250 --> 00:33:43,810
<font color="#E5E5E5">they may forget to URL encode this user</font>

784
00:33:41,980 --> 00:33:46,240
input and<font color="#E5E5E5"> that means that the user can</font>

785
00:33:43,810 --> 00:33:48,520
specify<font color="#E5E5E5"> additional parameters that will</font>

786
00:33:46,240 --> 00:33:50,530
get<font color="#E5E5E5"> passed on to the</font><font color="#CCCCCC"> backend or they may</font>

787
00:33:48,520 --> 00:33:53,830
<font color="#E5E5E5">be able to overwrite existing parameters</font>

788
00:33:50,530 --> 00:33:55,810
and that make time for some really

789
00:33:53,830 --> 00:33:57,760
really<font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> results because the</font>

790
00:33:55,810 --> 00:33:59,290
<font color="#CCCCCC">backend</font><font color="#E5E5E5"> probably doesn't view the</font>

791
00:33:57,760 --> 00:34:01,300
additional<font color="#E5E5E5"> parameters as being user</font>

792
00:33:59,290 --> 00:34:05,830
input<font color="#CCCCCC"> and so it may trust those values</font>

793
00:34:01,300 --> 00:34:08,050
<font color="#E5E5E5">and yet as of today's update</font><font color="#CCCCCC"> backlash</font>

794
00:34:05,830 --> 00:34:11,139
card scanner will find<font color="#E5E5E5"> that issue so</font>

795
00:34:08,050 --> 00:34:13,720
this<font color="#E5E5E5"> flow pair that it's using now this</font>

796
00:34:11,139 --> 00:34:15,250
is more of an experimental<font color="#CCCCCC"> one so it may</font>

797
00:34:13,719 --> 00:34:17,049
<font color="#E5E5E5">get some false</font><font color="#CCCCCC"> positives</font><font color="#E5E5E5"> but I have</font>

798
00:34:15,250 --> 00:34:19,570
tested<font color="#E5E5E5"> it on a digital</font><font color="#CCCCCC"> language website</font>

799
00:34:17,050 --> 00:34:23,800
and it has found<font color="#E5E5E5"> a large number</font><font color="#CCCCCC"> of</font>

800
00:34:19,570 --> 00:34:25,419
<font color="#CCCCCC">legitimate issues in fact</font><font color="#E5E5E5"> you found so</font>

801
00:34:23,800 --> 00:34:27,880
many<font color="#CCCCCC"> legitimate issues that I got really</font>

802
00:34:25,418 --> 00:34:30,699
<font color="#E5E5E5">bored while manually trying to exploit</font>

803
00:34:27,880 --> 00:34:33,399
them all<font color="#E5E5E5"> and so I've</font><font color="#CCCCCC"> made that</font><font color="#E5E5E5"> cash</font><font color="#CCCCCC"> card</font>

804
00:34:30,699 --> 00:34:34,210
<font color="#CCCCCC">scanner help you out</font><font color="#E5E5E5"> with that so when</font>

805
00:34:33,399 --> 00:34:35,949
it finds this

806
00:34:34,210 --> 00:34:38,619
if you right-click on the response

807
00:34:35,949 --> 00:34:41,918
you'll see an additional<font color="#E5E5E5"> option in the</font>

808
00:34:38,619 --> 00:34:45,609
menu which says identify<font color="#CCCCCC"> back-end</font>

809
00:34:41,918 --> 00:34:48,929
parameters<font color="#E5E5E5"> and if you click that it</font><font color="#CCCCCC"> will</font>

810
00:34:45,609 --> 00:34:51,580
<font color="#E5E5E5">send</font><font color="#CCCCCC"> the top 2,000 most common</font>

811
00:34:48,929 --> 00:34:53,050
server-side parameter names to the

812
00:34:51,580 --> 00:34:55,359
<font color="#CCCCCC">back-end server and use the different</font>

813
00:34:53,050 --> 00:34:56,859
<font color="#CCCCCC">technique to see if there are</font><font color="#E5E5E5"> any valid</font>

814
00:34:55,359 --> 00:35:00,040
ones that cause a different response

815
00:34:56,859 --> 00:35:02,470
from<font color="#E5E5E5"> the application so here for example</font>

816
00:35:00,040 --> 00:35:04,599
<font color="#E5E5E5">I</font><font color="#CCCCCC"> found</font><font color="#E5E5E5"> there's a valid parameter called</font>

817
00:35:02,470 --> 00:35:05,919
<font color="#CCCCCC">City</font><font color="#E5E5E5"> on the backend</font><font color="#CCCCCC"> and it has the</font>

818
00:35:04,599 --> 00:35:08,619
<font color="#CCCCCC">evidence showing</font><font color="#E5E5E5"> that this</font><font color="#CCCCCC"> is causing</font>

819
00:35:05,920 --> 00:35:10,839
some kind<font color="#E5E5E5"> of different behavior so that</font>

820
00:35:08,619 --> 00:35:12,849
<font color="#CCCCCC">sells you</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> city parameter is being</font>

821
00:35:10,839 --> 00:35:14,589
used by the backend and<font color="#E5E5E5"> then you can try</font>

822
00:35:12,849 --> 00:35:21,460
and exploit that<font color="#E5E5E5"> by scaling it</font><font color="#CCCCCC"> we'll</font>

823
00:35:14,589 --> 00:35:23,619
just using the logic so what can we

824
00:35:21,460 --> 00:35:26,530
<font color="#E5E5E5">maybe do in the future</font><font color="#CCCCCC"> using these</font>

825
00:35:23,619 --> 00:35:28,770
<font color="#E5E5E5">techniques well one thing that backslash</font>

826
00:35:26,530 --> 00:35:32,680
<font color="#E5E5E5">card scanner is undeniably great for is</font>

827
00:35:28,770 --> 00:35:34,630
<font color="#CCCCCC">cold-start</font><font color="#E5E5E5"> blue forces the tax attempts</font>

828
00:35:32,680 --> 00:35:36,970
to enumerate valid inputs when you've

829
00:35:34,630 --> 00:35:39,400
got<font color="#CCCCCC"> no prior knowledge for example the</font>

830
00:35:36,970 --> 00:35:41,859
original<font color="#CCCCCC"> place that I've had was let me</font>

831
00:35:39,400 --> 00:35:44,530
in where I didn't<font color="#E5E5E5"> have a single valid</font>

832
00:35:41,859 --> 00:35:46,299
<font color="#CCCCCC">user name so I</font><font color="#E5E5E5"> couldn't identify the</font>

833
00:35:44,530 --> 00:35:48,339
response to a valid<font color="#E5E5E5"> user name when I</font>

834
00:35:46,300 --> 00:35:52,480
started I was<font color="#CCCCCC"> just looking for</font><font color="#E5E5E5"> anything</font>

835
00:35:48,339 --> 00:35:53,740
changing and<font color="#CCCCCC"> letmein hasn't</font><font color="#E5E5E5"> be imported</font>

836
00:35:52,480 --> 00:35:55,570
<font color="#E5E5E5">to use this new technique that's</font>

837
00:35:53,740 --> 00:35:57,009
actually reliable<font color="#E5E5E5"> yet so that's</font>

838
00:35:55,570 --> 00:35:58,839
<font color="#CCCCCC">something that I'm planning</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> doing in</font>

839
00:35:57,010 --> 00:36:01,390
the<font color="#E5E5E5"> future and also you can use this</font>

840
00:35:58,839 --> 00:36:04,170
<font color="#E5E5E5">technique</font><font color="#CCCCCC"> to brute force</font><font color="#E5E5E5"> parameter names</font>

841
00:36:01,390 --> 00:36:07,540
<font color="#E5E5E5">as I do on the back end at the moment</font>

842
00:36:04,170 --> 00:36:09,880
also<font color="#CCCCCC"> you can essentially try some really</font>

843
00:36:07,540 --> 00:36:11,830
quite advanced stuff with this for

844
00:36:09,880 --> 00:36:15,430
<font color="#E5E5E5">example maybe you're doing a black box</font>

845
00:36:11,830 --> 00:36:17,790
test on an<font color="#E5E5E5"> application and you find an</font>

846
00:36:15,430 --> 00:36:20,680
<font color="#CCCCCC">arbitral</font><font color="#E5E5E5"> and object deserialization</font>

847
00:36:17,790 --> 00:36:23,170
vulnerability<font color="#CCCCCC"> but because</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> the black</font>

848
00:36:20,680 --> 00:36:25,839
<font color="#E5E5E5">box you</font><font color="#CCCCCC"> don't know what gadgets there</font>

849
00:36:23,170 --> 00:36:27,670
are<font color="#E5E5E5"> available on the server well you</font>

850
00:36:25,839 --> 00:36:29,830
could use this<font color="#CCCCCC"> different technique to</font>

851
00:36:27,670 --> 00:36:32,710
<font color="#CCCCCC">try to avoid</font><font color="#E5E5E5"> force to automatically</font>

852
00:36:29,830 --> 00:36:36,819
identify valid<font color="#E5E5E5"> ladders on</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> server that</font>

853
00:36:32,710 --> 00:36:39,670
<font color="#CCCCCC">would</font><font color="#E5E5E5"> be nice and with the bit of</font>

854
00:36:36,820 --> 00:36:42,250
creativity<font color="#E5E5E5"> we can go far beyond</font>

855
00:36:39,670 --> 00:36:44,890
injection vulnerabilities<font color="#E5E5E5"> for example</font>

856
00:36:42,250 --> 00:36:46,210
take the simple here as a human you<font color="#CCCCCC"> can</font>

857
00:36:44,890 --> 00:36:48,759
just read that and<font color="#CCCCCC"> tell what it</font>

858
00:36:46,210 --> 00:36:50,560
and you know if you<font color="#E5E5E5"> change the</font><font color="#CCCCCC"> IV and</font>

859
00:36:48,760 --> 00:36:53,830
you can edit someone else's profile

860
00:36:50,560 --> 00:36:56,799
you've got a<font color="#E5E5E5"> critical vulnerability but</font>

861
00:36:53,830 --> 00:36:59,610
all the scanner sees is an application

862
00:36:56,800 --> 00:37:03,150
<font color="#CCCCCC">that takes</font><font color="#E5E5E5"> an input which is a number</font>

863
00:36:59,610 --> 00:37:05,830
<font color="#E5E5E5">that's about as much</font><font color="#CCCCCC"> as it understands</font>

864
00:37:03,150 --> 00:37:09,370
but<font color="#E5E5E5"> it can actually</font><font color="#CCCCCC"> answer the question</font>

865
00:37:05,830 --> 00:37:11,380
is there's this number correspond to

866
00:37:09,370 --> 00:37:13,690
something<font color="#CCCCCC"> that we can enumerate</font><font color="#E5E5E5"> on the</font>

867
00:37:11,380 --> 00:37:15,550
server<font color="#CCCCCC"> site and it can do</font><font color="#E5E5E5"> that by</font>

868
00:37:13,690 --> 00:37:18,010
<font color="#E5E5E5">incrementing the number one incrementing</font>

869
00:37:15,550 --> 00:37:20,530
<font color="#E5E5E5">it twice and confirming there we get</font>

870
00:37:18,010 --> 00:37:24,610
three unique responses from the

871
00:37:20,530 --> 00:37:26,590
application<font color="#E5E5E5"> if you only get to two</font>

872
00:37:24,610 --> 00:37:28,000
unique responses then<font color="#E5E5E5"> that might just be</font>

873
00:37:26,590 --> 00:37:30,490
the application<font color="#E5E5E5"> saying here's your</font>

874
00:37:28,000 --> 00:37:32,170
profile<font color="#CCCCCC"> and</font><font color="#E5E5E5"> saying you don't have</font>

875
00:37:30,490 --> 00:37:34,629
permission<font color="#CCCCCC"> to view this profile which is</font>

876
00:37:32,170 --> 00:37:38,470
not<font color="#E5E5E5"> much but if</font><font color="#CCCCCC"> you get three that shows</font>

877
00:37:34,630 --> 00:37:40,030
you can enumerate this and that<font color="#E5E5E5"> just by</font>

878
00:37:38,470 --> 00:37:43,120
<font color="#CCCCCC">ourselves we'll find some interesting</font>

879
00:37:40,030 --> 00:37:45,640
things but it will<font color="#E5E5E5"> also find some quite</font>

880
00:37:43,120 --> 00:37:48,609
boring things like calculators<font color="#E5E5E5"> in</font>

881
00:37:45,640 --> 00:37:50,859
calendars where your input<font color="#E5E5E5"> isn't really</font>

882
00:37:48,610 --> 00:37:55,540
a numerating of fixed results it's just

883
00:37:50,860 --> 00:37:57,130
doing some kind of calculation<font color="#E5E5E5"> so we can</font>

884
00:37:55,540 --> 00:37:59,290
get rid of those boring outcomes by

885
00:37:57,130 --> 00:38:01,210
doing<font color="#CCCCCC"> the following up</font><font color="#E5E5E5"> test which is to</font>

886
00:37:59,290 --> 00:38:03,220
see if there's a<font color="#E5E5E5"> finite number</font><font color="#CCCCCC"> of</font>

887
00:38:01,210 --> 00:38:07,960
entries we can do that by adding<font color="#CCCCCC"> a</font><font color="#E5E5E5"> huge</font>

888
00:38:03,220 --> 00:38:10,060
fixed value to the input<font color="#CCCCCC"> so if you had a</font>

889
00:38:07,960 --> 00:38:11,620
<font color="#E5E5E5">hundred thousand to both of them we</font>

890
00:38:10,060 --> 00:38:13,330
should get the same<font color="#E5E5E5"> response in this</font>

891
00:38:11,620 --> 00:38:17,700
<font color="#E5E5E5">example they should</font><font color="#CCCCCC"> both</font><font color="#E5E5E5"> say something</font>

892
00:38:13,330 --> 00:38:19,660
like<font color="#E5E5E5"> this profile does not exist</font><font color="#CCCCCC"> so</font>

893
00:38:17,700 --> 00:38:21,430
<font color="#CCCCCC">that's something that I'm planning on</font>

894
00:38:19,660 --> 00:38:23,920
adding<font color="#E5E5E5"> recently sooner I've got a</font>

895
00:38:21,430 --> 00:38:28,750
<font color="#E5E5E5">working prototype of this it just needs</font>

896
00:38:23,920 --> 00:38:31,330
a bit<font color="#E5E5E5"> of Justin okay you can grab the</font>

897
00:38:28,750 --> 00:38:36,160
source<font color="#CCCCCC"> code for</font><font color="#E5E5E5"> service online so it's</font>

898
00:38:31,330 --> 00:38:37,990
implemented as advert extension so<font color="#E5E5E5"> you</font>

899
00:38:36,160 --> 00:38:40,180
need<font color="#CCCCCC"> burbs to run it</font><font color="#E5E5E5"> but the source code</font>

900
00:38:37,990 --> 00:38:41,470
is all<font color="#CCCCCC"> available</font><font color="#E5E5E5"> it's in Java if you</font>

901
00:38:40,180 --> 00:38:44,169
wanted to you<font color="#CCCCCC"> could cause it to</font><font color="#E5E5E5"> run on</font>

902
00:38:41,470 --> 00:38:46,089
<font color="#CCCCCC">SAP very very easily</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can also</font>

903
00:38:44,170 --> 00:38:49,360
<font color="#E5E5E5">grab the white paper</font><font color="#CCCCCC"> online which has a</font>

904
00:38:46,090 --> 00:38:52,090
bit<font color="#E5E5E5"> more details if you just want to run</font>

905
00:38:49,360 --> 00:38:53,410
this tool then this update will<font color="#CCCCCC"> be will</font>

906
00:38:52,090 --> 00:38:54,910
<font color="#E5E5E5">be available in the back</font><font color="#CCCCCC"> store so you</font>

907
00:38:53,410 --> 00:38:55,470
<font color="#E5E5E5">don't really need to look at the code</font>

908
00:38:54,910 --> 00:38:58,799
if you

909
00:38:55,470 --> 00:39:00,779
<font color="#CCCCCC">wanting this</font><font color="#E5E5E5"> is not one of those</font>

910
00:38:58,800 --> 00:39:03,420
security tools but gets released<font color="#CCCCCC"> into</font>

911
00:39:00,780 --> 00:39:05,430
presentation and then never<font color="#CCCCCC"> updated</font><font color="#E5E5E5"> this</font>

912
00:39:03,420 --> 00:39:07,560
has huge<font color="#E5E5E5"> potential and I'm planning on</font>

913
00:39:05,430 --> 00:39:10,859
continuing<font color="#E5E5E5"> working on it for the</font><font color="#CCCCCC"> next</font>

914
00:39:07,560 --> 00:39:14,400
<font color="#E5E5E5">few years on and off and as techniques</font>

915
00:39:10,859 --> 00:39:15,270
<font color="#E5E5E5">become stable and reliable stable stable</font>

916
00:39:14,400 --> 00:39:19,910
<font color="#E5E5E5">and reliable</font>

917
00:39:15,270 --> 00:39:23,190
I'll also port them to<font color="#CCCCCC"> Burke core so</font>

918
00:39:19,910 --> 00:39:25,020
<font color="#E5E5E5">three key things to</font><font color="#CCCCCC"> remember their</font>

919
00:39:23,190 --> 00:39:28,020
<font color="#E5E5E5">scanners can find</font><font color="#CCCCCC"> research-grade</font>

920
00:39:25,020 --> 00:39:30,930
<font color="#E5E5E5">vulnerabilities provided they focus on</font>

921
00:39:28,020 --> 00:39:33,960
<font color="#CCCCCC">enhancing rather than replacing the pen</font>

922
00:39:30,930 --> 00:39:36,509
tester<font color="#E5E5E5"> and this is still just</font><font color="#CCCCCC"> the</font>

923
00:39:33,960 --> 00:39:38,520
beginning<font color="#E5E5E5"> okay so I'll take five minutes</font>

924
00:39:36,510 --> 00:39:40,050
<font color="#E5E5E5">of questions</font><font color="#CCCCCC"> now and</font><font color="#E5E5E5"> then if you've got</font>

925
00:39:38,520 --> 00:39:42,060
<font color="#CCCCCC">any more</font><font color="#E5E5E5"> questions</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> send me an email</font>

926
00:39:40,050 --> 00:39:44,970
or<font color="#E5E5E5"> come up and talk to me at the back</font>

927
00:39:42,060 --> 00:39:47,359
<font color="#E5E5E5">toe forget to follow me</font><font color="#CCCCCC"> on Twitter</font><font color="#E5E5E5"> thank</font>

928
00:39:44,970 --> 00:39:47,359
you for listening

929
00:39:47,500 --> 00:39:55,409
[Applause]

930
00:39:56,450 --> 00:40:00,259
so any questions

931
00:40:03,770 --> 00:40:09,770
what thank you oh wait no one<font color="#CCCCCC"> bitching</font>

932
00:40:19,490 --> 00:40:34,709
the does<font color="#E5E5E5"> you're gonna support automatic</font>

933
00:40:25,349 --> 00:40:38,849
change IP address<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> if you</font>

934
00:40:34,710 --> 00:40:42,030
make<font color="#CCCCCC"> some</font><font color="#E5E5E5"> tries you look at a kind of a</font>

935
00:40:38,849 --> 00:40:44,309
locket and<font color="#E5E5E5"> okay it doesn't currently</font>

936
00:40:42,030 --> 00:40:47,910
support that but that is<font color="#E5E5E5"> a features but</font>

937
00:40:44,309 --> 00:40:51,839
I'm<font color="#E5E5E5"> considering implementing in fact we</font>

938
00:40:47,910 --> 00:40:53,339
might even put that in<font color="#CCCCCC"> core but</font><font color="#E5E5E5"> just</font>

939
00:40:51,839 --> 00:40:56,099
some kind of<font color="#E5E5E5"> something</font><font color="#CCCCCC"> that identifies</font>

940
00:40:53,339 --> 00:40:58,740
<font color="#E5E5E5">when when you've been blocked by</font><font color="#CCCCCC"> a by a</font>

941
00:40:56,099 --> 00:41:00,920
<font color="#CCCCCC">Web Application Firewall yelling thank</font>

942
00:40:58,740 --> 00:41:00,919
you

943
00:41:09,299 --> 00:41:14,589
hi James thank you for call<font color="#E5E5E5"> - I have a</font>

944
00:41:13,959 --> 00:41:17,890
question

945
00:41:14,589 --> 00:41:21,759
what kind<font color="#E5E5E5"> of injection vulnerabilities</font>

946
00:41:17,890 --> 00:41:25,660
<font color="#CCCCCC">you can find with your scanner is it a</font>

947
00:41:21,759 --> 00:41:29,200
sequel injection<font color="#CCCCCC"> I you can find almost</font>

948
00:41:25,660 --> 00:41:32,828
any<font color="#CCCCCC"> kinds of</font><font color="#E5E5E5"> server-side</font><font color="#CCCCCC"> injections so</font>

949
00:41:29,200 --> 00:41:36,269
you<font color="#E5E5E5"> can find a lot like though it has</font>

950
00:41:32,829 --> 00:41:41,109
explicit support<font color="#E5E5E5"> for sequel injection</font>

951
00:41:36,269 --> 00:41:46,328
code injection of pretty<font color="#CCCCCC"> much any kind</font>

952
00:41:41,109 --> 00:41:49,150
<font color="#E5E5E5">really</font><font color="#CCCCCC"> like I've added support for four</font>

953
00:41:46,329 --> 00:41:53,859
specific<font color="#E5E5E5"> languages like PHP Java Python</font>

954
00:41:49,150 --> 00:41:56,109
Ruby pearl<font color="#E5E5E5"> JavaScript etc but because of</font>

955
00:41:53,859 --> 00:41:57,848
<font color="#E5E5E5">the design of it</font><font color="#CCCCCC"> if you want it on any</font>

956
00:41:56,109 --> 00:42:01,239
kind of<font color="#CCCCCC"> language that</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> vulnerable to</font>

957
00:41:57,849 --> 00:42:04,989
some kind of<font color="#E5E5E5"> eval then it will find it</font>

958
00:42:01,239 --> 00:42:07,660
like it's also for<font color="#CCCCCC"> example</font><font color="#E5E5E5"> I think</font><font color="#CCCCCC"> it's</font>

959
00:42:04,989 --> 00:42:12,819
found solar injection it's fine it's

960
00:42:07,660 --> 00:42:14,440
found<font color="#E5E5E5"> a later injection I think so it is</font>

961
00:42:12,819 --> 00:42:18,420
capable<font color="#E5E5E5"> of finding some pretty weird</font>

962
00:42:14,440 --> 00:42:18,420
stuff<font color="#CCCCCC"> okay thank you very much</font>

963
00:42:24,599 --> 00:42:32,950
<font color="#E5E5E5">the</font><font color="#CCCCCC"> distributor's colour is publicly</font>

964
00:42:27,400 --> 00:42:36,849
available<font color="#E5E5E5"> yes</font><font color="#CCCCCC"> or on don't shoot it's a</font>

965
00:42:32,950 --> 00:42:40,419
plugin<font color="#E5E5E5"> yeah yeah it's a</font><font color="#CCCCCC"> plugin</font><font color="#E5E5E5"> you can</font>

966
00:42:36,849 --> 00:42:45,599
install it by<font color="#CCCCCC"> the BAP store and the</font>

967
00:42:40,420 --> 00:42:45,599
source<font color="#E5E5E5"> code is online - thank you</font>

968
00:42:52,680 --> 00:42:59,098
<font color="#CCCCCC">right</font><font color="#E5E5E5"> Copland ation</font><font color="#CCCCCC"> Thanks what did you</font>

969
00:42:56,190 --> 00:43:04,250
do what do<font color="#E5E5E5"> you do with too many requests</font>

970
00:42:59,099 --> 00:43:06,839
problem how<font color="#E5E5E5"> to detect it and my part is</font>

971
00:43:04,250 --> 00:43:07,619
the too many<font color="#E5E5E5"> requests</font><font color="#CCCCCC"> saying yes</font><font color="#E5E5E5"> the</font>

972
00:43:06,839 --> 00:43:10,619
<font color="#CCCCCC">manna-fest problem</font>

973
00:43:07,619 --> 00:43:15,450
so because<font color="#E5E5E5"> backslash powered scanner</font>

974
00:43:10,619 --> 00:43:18,119
uses at users a<font color="#CCCCCC"> tree</font><font color="#E5E5E5"> if an input is not</font>

975
00:43:15,450 --> 00:43:21,808
vulnerable to anything then it will

976
00:43:18,119 --> 00:43:25,680
typically send maybe six requests like<font color="#E5E5E5"> a</font>

977
00:43:21,809 --> 00:43:27,720
tiny number because for example<font color="#CCCCCC"> although</font>

978
00:43:25,680 --> 00:43:31,288
it can find and classify maybe 30

979
00:43:27,720 --> 00:43:33,240
different types<font color="#E5E5E5"> of code</font><font color="#CCCCCC"> injections they</font>

980
00:43:31,289 --> 00:43:37,650
all<font color="#E5E5E5"> begin</font><font color="#CCCCCC"> with a single quote</font><font color="#E5E5E5"> or a</font>

981
00:43:33,240 --> 00:43:40,229
double quote or with a number and so it

982
00:43:37,650 --> 00:43:42,329
will try each<font color="#CCCCCC"> of those and so the three</font>

983
00:43:40,230 --> 00:43:44,880
requests<font color="#E5E5E5"> it can vol out 30 different</font>

984
00:43:42,329 --> 00:43:48,470
<font color="#E5E5E5">kinds of injection vulnerability so as a</font>

985
00:43:44,880 --> 00:43:48,470
<font color="#E5E5E5">resolve that it's extremely efficient</font>

986
00:43:55,290 --> 00:44:04,450
well thank<font color="#E5E5E5"> you</font><font color="#CCCCCC"> how do you</font><font color="#E5E5E5"> add a new</font>

987
00:43:58,690 --> 00:44:09,250
signatures<font color="#CCCCCC"> to scanner so</font><font color="#E5E5E5"> I you need to</font>

988
00:44:04,450 --> 00:44:13,750
edit the source<font color="#E5E5E5"> code</font><font color="#CCCCCC"> of theirs and if</font>

989
00:44:09,250 --> 00:44:16,420
you look in the<font color="#E5E5E5"> wall do is</font><font color="#CCCCCC"> are only</font><font color="#E5E5E5"> a</font>

990
00:44:13,750 --> 00:44:19,000
link to an<font color="#E5E5E5"> example signatures that's</font>

991
00:44:16,420 --> 00:44:21,930
very simple<font color="#CCCCCC"> and then you</font><font color="#E5E5E5"> can base it on</font>

992
00:44:19,000 --> 00:44:26,350
that<font color="#E5E5E5"> is it is very very easy</font>

993
00:44:21,930 --> 00:44:28,589
<font color="#CCCCCC">thanks compiling the code is the hardest</font>

994
00:44:26,350 --> 00:44:28,589
part

995
00:44:35,280 --> 00:44:44,610
<font color="#CCCCCC">okay thank you very</font><font color="#E5E5E5"> much</font>

996
00:44:37,870 --> 00:44:44,609
[Applause]

