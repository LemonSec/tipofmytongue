1
00:00:01,700 --> 00:00:10,280
well in fact my presentation is a

2
00:00:07,189 --> 00:00:13,500
logical continuation of the previous one

3
00:00:10,280 --> 00:00:20,580
<font color="#E5E5E5">we are going to discuss dynamic binary</font>

4
00:00:13,500 --> 00:00:26,900
tooling I represent IBM<font color="#CCCCCC"> Research Israel</font>

5
00:00:20,580 --> 00:00:32,238
where I'm responsible<font color="#CCCCCC"> or for</font><font color="#E5E5E5"> security</font>

6
00:00:26,900 --> 00:00:39,000
last year I defended my dissertation

7
00:00:32,238 --> 00:00:41,459
paper<font color="#CCCCCC"> in Tomsk University</font><font color="#E5E5E5"> my</font>

8
00:00:39,000 --> 00:00:47,789
presentation<font color="#CCCCCC"> allowed to</font><font color="#E5E5E5"> discuss it</font><font color="#CCCCCC"> in</font>

9
00:00:41,460 --> 00:00:52,640
binary tooling<font color="#E5E5E5"> very generically</font><font color="#CCCCCC"> you know</font>

10
00:00:47,789 --> 00:00:55,559
otherwise<font color="#E5E5E5"> to well-known frameworks then</font>

11
00:00:52,640 --> 00:00:58,770
<font color="#CCCCCC">we'll</font><font color="#E5E5E5"> proceed to</font><font color="#CCCCCC"> the potential</font>

12
00:00:55,559 --> 00:01:01,500
applications of this technology<font color="#CCCCCC"> exam by</font>

13
00:00:58,770 --> 00:01:06,119
using two examples<font color="#E5E5E5"> ourselves how by</font>

14
00:01:01,500 --> 00:01:09,810
<font color="#CCCCCC">using dynamic</font><font color="#E5E5E5"> binary tools one can look</font>

15
00:01:06,119 --> 00:01:13,200
<font color="#E5E5E5">for errors and complete dynamic analysis</font>

16
00:01:09,810 --> 00:01:17,400
<font color="#CCCCCC">of</font><font color="#E5E5E5"> binary codes and I will summarize but</font>

17
00:01:13,200 --> 00:01:21,600
first what is the<font color="#E5E5E5"> VI</font><font color="#CCCCCC"> for a dynamic</font>

18
00:01:17,400 --> 00:01:24,509
binary instrumentation<font color="#E5E5E5"> self</font><font color="#CCCCCC"> DVR is a</font>

19
00:01:21,600 --> 00:01:27,360
<font color="#E5E5E5">methodology to</font><font color="#CCCCCC"> analyze software behavior</font>

20
00:01:24,509 --> 00:01:37,100
by inserting procedures in the process

21
00:01:27,360 --> 00:01:42,320
of execution<font color="#CCCCCC"> how does it work initially</font>

22
00:01:37,100 --> 00:01:48,630
<font color="#CCCCCC">Adi framework</font><font color="#E5E5E5"> launches the post process</font>

23
00:01:42,320 --> 00:01:53,449
<font color="#E5E5E5">then I think that's a core a DLL or the</font>

24
00:01:48,630 --> 00:01:57,298
main framework library exam this library

25
00:01:53,450 --> 00:02:01,200
<font color="#CCCCCC">downloads all the user dll's</font><font color="#E5E5E5"> after which</font>

26
00:01:57,299 --> 00:02:05,969
this instructions are loaded<font color="#CCCCCC"> to the</font>

27
00:02:01,200 --> 00:02:07,270
entry point after which well<font color="#E5E5E5"> this entry</font>

28
00:02:05,969 --> 00:02:10,899
<font color="#CCCCCC">point</font>

29
00:02:07,270 --> 00:02:18,250
they<font color="#E5E5E5"> jumped to the first basic block of</font>

30
00:02:10,899 --> 00:02:20,800
our<font color="#CCCCCC"> DLL after which the executable is</font>

31
00:02:18,250 --> 00:02:22,540
executed in the application dynamic

32
00:02:20,800 --> 00:02:26,680
translation of the basic block is

33
00:02:22,540 --> 00:02:32,530
performed in instrumentation<font color="#E5E5E5"> is carried</font>

34
00:02:26,680 --> 00:02:40,200
out<font color="#E5E5E5"> dependent on the way the user may</font>

35
00:02:32,530 --> 00:02:43,390
<font color="#CCCCCC">have written</font><font color="#E5E5E5"> the functions which</font>

36
00:02:40,200 --> 00:02:46,510
requires a<font color="#E5E5E5"> lot of</font><font color="#CCCCCC"> Delft</font><font color="#E5E5E5"> engineering</font>

37
00:02:43,390 --> 00:02:49,380
<font color="#E5E5E5">scientific work</font><font color="#CCCCCC"> they'll</font><font color="#E5E5E5"> take the next</font>

38
00:02:46,510 --> 00:02:51,760
<font color="#E5E5E5">basic block translated</font><font color="#CCCCCC"> yep</font>

39
00:02:49,380 --> 00:02:54,099
<font color="#E5E5E5">instrumentation functions and</font>

40
00:02:51,760 --> 00:02:58,090
instructions<font color="#E5E5E5"> and proceed to the next</font>

41
00:02:54,099 --> 00:03:01,510
<font color="#E5E5E5">month and so on and so forth until we</font>

42
00:02:58,090 --> 00:03:07,950
have completed<font color="#CCCCCC"> our executed our program</font>

43
00:03:01,510 --> 00:03:07,950
<font color="#E5E5E5">it may look as simple that however are</font>

44
00:03:08,819 --> 00:03:20,910
some details<font color="#CCCCCC"> here DeMarre</font><font color="#E5E5E5"> um in told in</font>

45
00:03:13,930 --> 00:03:27,670
which is being<font color="#E5E5E5"> developed by Intel my own</font>

46
00:03:20,910 --> 00:03:30,420
experience<font color="#CCCCCC"> I prefer venom are you it is</font>

47
00:03:27,670 --> 00:03:34,958
open source<font color="#E5E5E5"> supporting more</font>

48
00:03:30,420 --> 00:03:38,260
architectures and introducing<font color="#CCCCCC"> left over</font>

49
00:03:34,959 --> 00:03:42,549
hands and it's based on different

50
00:03:38,260 --> 00:03:45,480
<font color="#CCCCCC">technologies binary</font><font color="#E5E5E5"> code is transformed</font>

51
00:03:42,549 --> 00:03:47,700
<font color="#CCCCCC">all while in the previous case their</font>

52
00:03:45,480 --> 00:03:52,540
color change legs

53
00:03:47,700 --> 00:03:56,709
at<font color="#E5E5E5"> the same time in Tokyo has much lower</font>

54
00:03:52,540 --> 00:04:01,120
energy barrier<font color="#E5E5E5"> it's much easier to</font>

55
00:03:56,709 --> 00:04:01,690
<font color="#CCCCCC">engage in writing your own GBI tools for</font>

56
00:04:01,120 --> 00:04:04,480
this product

57
00:04:01,690 --> 00:04:07,419
however the source code is closed<font color="#E5E5E5"> and if</font>

58
00:04:04,480 --> 00:04:09,679
you don't like something you<font color="#E5E5E5"> cannot</font>

59
00:04:07,419 --> 00:04:13,349
change<font color="#E5E5E5"> anything</font>

60
00:04:09,680 --> 00:04:15,000
the instrumentation<font color="#E5E5E5"> is done as simple as</font>

61
00:04:13,349 --> 00:04:18,539
<font color="#E5E5E5">that is based on</font><font color="#CCCCCC"> callbacks</font>

62
00:04:15,000 --> 00:04:22,380
you describe your callback<font color="#E5E5E5"> on this slide</font>

63
00:04:18,540 --> 00:04:26,370
you<font color="#CCCCCC"> can see an example of how bass</font>

64
00:04:22,380 --> 00:04:29,940
blocks<font color="#E5E5E5"> are counter for each executable</font>

65
00:04:26,370 --> 00:04:35,430
<font color="#CCCCCC">based</font><font color="#E5E5E5"> block in the process of program</font>

66
00:04:29,940 --> 00:04:40,040
execution<font color="#CCCCCC"> we describe our callback</font><font color="#E5E5E5"> drill</font>

67
00:04:35,430 --> 00:04:44,460
cantillation<font color="#E5E5E5"> and then our VBA framework</font>

68
00:04:40,040 --> 00:04:46,010
both<font color="#CCCCCC"> allow this role to</font><font color="#E5E5E5"> the application</font>

69
00:04:44,460 --> 00:04:50,669
to<font color="#CCCCCC"> the question</font>

70
00:04:46,010 --> 00:04:56,099
speaking about<font color="#CCCCCC"> DBI one needs to discuss</font>

71
00:04:50,669 --> 00:04:58,229
the granularity level we we<font color="#E5E5E5"> only can</font>

72
00:04:56,100 --> 00:05:03,090
insert our<font color="#E5E5E5"> code that procedures</font><font color="#CCCCCC"> a</font>

73
00:04:58,229 --> 00:05:05,520
different granularity level in doing<font color="#CCCCCC"> so</font>

74
00:05:03,090 --> 00:05:09,060
<font color="#E5E5E5">we can instrument each and every</font>

75
00:05:05,520 --> 00:05:12,810
instruction<font color="#E5E5E5"> we can do that after each</font>

76
00:05:09,060 --> 00:05:16,880
base block or after each function called

77
00:05:12,810 --> 00:05:20,810
out for each<font color="#CCCCCC"> module or</font><font color="#E5E5E5"> some trigger</font>

78
00:05:16,880 --> 00:05:25,050
example if our<font color="#CCCCCC"> program launches</font>

79
00:05:20,810 --> 00:05:29,460
subsidiary closes water with<font color="#E5E5E5"> succession</font>

80
00:05:25,050 --> 00:05:33,090
for there comes new flow<font color="#CCCCCC"> a thread where</font>

81
00:05:29,460 --> 00:05:38,430
<font color="#CCCCCC">can be used of course in software</font>

82
00:05:33,090 --> 00:05:41,159
<font color="#E5E5E5">security or for fuzzing support it was</font>

83
00:05:38,430 --> 00:05:45,840
mentioned by the previous speakers<font color="#CCCCCC"> we</font>

84
00:05:41,160 --> 00:05:51,150
<font color="#CCCCCC">can also analyze earmark</font><font color="#E5E5E5"> data like we</font>

85
00:05:45,840 --> 00:05:54,510
can look for bugs overflows we can even

86
00:05:51,150 --> 00:05:57,979
do some<font color="#CCCCCC"> belief executions we can</font>

87
00:05:54,510 --> 00:06:01,110
evaluate about exploitation

88
00:05:57,979 --> 00:06:05,000
opportunities we can<font color="#E5E5E5"> preform</font><font color="#CCCCCC"> aware</font>

89
00:06:01,110 --> 00:06:08,370
<font color="#E5E5E5">analysis use it for reverse engineering</font>

90
00:06:05,000 --> 00:06:10,940
<font color="#CCCCCC">dope control flow graph innovation do</font>

91
00:06:08,370 --> 00:06:10,940
<font color="#CCCCCC">debugging</font>

92
00:06:12,539 --> 00:06:20,110
as well as many other<font color="#E5E5E5"> things we</font><font color="#CCCCCC"> say</font><font color="#E5E5E5"> not</font>

93
00:06:17,169 --> 00:06:22,539
<font color="#E5E5E5">after</font><font color="#CCCCCC"> the cybersecurity</font><font color="#E5E5E5"> for example we</font>

94
00:06:20,110 --> 00:06:29,110
can evaluate application<font color="#E5E5E5"> and performance</font>

95
00:06:22,539 --> 00:06:31,389
quality and<font color="#E5E5E5"> so forth that's Jeff we</font>

96
00:06:29,110 --> 00:06:35,500
<font color="#CCCCCC">discuss</font><font color="#E5E5E5"> the utilities</font><font color="#CCCCCC"> are developed</font>

97
00:06:31,389 --> 00:06:41,680
based<font color="#E5E5E5"> on</font><font color="#CCCCCC"> GBI framework toolkit</font><font color="#E5E5E5"> it's</font>

98
00:06:35,500 --> 00:06:48,340
called when he<font color="#CCCCCC"> Explorer and designed</font><font color="#E5E5E5"> to</font>

99
00:06:41,680 --> 00:06:54,069
discover overflow errors<font color="#E5E5E5"> we'll leave our</font>

100
00:06:48,340 --> 00:06:58,599
flow<font color="#CCCCCC"> its advantages include low</font><font color="#E5E5E5"> rank I'm</font>

101
00:06:54,069 --> 00:07:01,380
over here<font color="#CCCCCC"> licensing is available at hip</font>

102
00:06:58,599 --> 00:07:03,669
<font color="#CCCCCC">hop</font><font color="#E5E5E5"> you know there is lightweight</font>

103
00:07:01,380 --> 00:07:05,940
instrumentation<font color="#E5E5E5"> a pilot which is</font><font color="#CCCCCC"> also</font>

104
00:07:03,669 --> 00:07:11,580
<font color="#E5E5E5">available there welcome back</font><font color="#CCCCCC"> to it later</font>

105
00:07:05,940 --> 00:07:17,919
<font color="#E5E5E5">I'm</font><font color="#CCCCCC"> sure there is no point in</font><font color="#E5E5E5"> explaining</font>

106
00:07:11,580 --> 00:07:23,289
all the dangers<font color="#E5E5E5"> of</font><font color="#CCCCCC"> hip our plow I really</font>

107
00:07:17,919 --> 00:07:26,680
<font color="#E5E5E5">parallel anyway we specify a memory</font>

108
00:07:23,289 --> 00:07:32,289
select<font color="#E5E5E5"> memory in the heap when we create</font>

109
00:07:26,680 --> 00:07:37,570
calm interface<font color="#E5E5E5"> and in 2012 we have heap</font>

110
00:07:32,289 --> 00:07:42,490
<font color="#CCCCCC">wealth now</font><font color="#E5E5E5"> the user control the</font><font color="#CCCCCC"> input</font>

111
00:07:37,570 --> 00:07:45,940
and can also control<font color="#CCCCCC"> the size of memory</font>

112
00:07:42,490 --> 00:07:49,240
entries typical of a flower or<font color="#CCCCCC"> the hip</font>

113
00:07:45,940 --> 00:07:52,539
layout will<font color="#CCCCCC"> be as</font><font color="#E5E5E5"> follows it won't ask</font>

114
00:07:49,240 --> 00:07:56,770
you somehow<font color="#CCCCCC"> but it's understandable on</font>

115
00:07:52,539 --> 00:08:02,349
<font color="#E5E5E5">the Left we see a hip area and then a</font>

116
00:07:56,770 --> 00:08:04,740
virtual table was<font color="#E5E5E5"> created we carried</font>

117
00:08:02,349 --> 00:08:04,740
<font color="#E5E5E5">interest</font>

118
00:08:05,850 --> 00:08:12,850
if this to<font color="#E5E5E5"> memory blocks are selected</font>

119
00:08:09,880 --> 00:08:15,100
one<font color="#E5E5E5"> after that a</font><font color="#CCCCCC"> probability hi I</font>

120
00:08:12,850 --> 00:08:18,640
thought we<font color="#E5E5E5"> can rewrite one of the</font>

121
00:08:15,100 --> 00:08:21,880
methods in this linear<font color="#E5E5E5"> this table which</font>

122
00:08:18,640 --> 00:08:24,460
<font color="#CCCCCC">is a well-known corruption vulnerability</font>

123
00:08:21,880 --> 00:08:27,280
in other words we can execute any other

124
00:08:24,460 --> 00:08:29,169
ones we felt in<font color="#E5E5E5"> our application</font><font color="#CCCCCC"> what</font>

125
00:08:27,280 --> 00:08:35,010
should<font color="#E5E5E5"> be taken</font><font color="#CCCCCC"> into account when shall</font>

126
00:08:29,170 --> 00:08:35,010
I think<font color="#E5E5E5"> memory other spaces we can</font>

127
00:08:35,580 --> 00:08:42,160
<font color="#CCCCCC">recoilless can</font><font color="#E5E5E5"> reach has been selected</font>

128
00:08:40,000 --> 00:08:44,460
for instance we may<font color="#E5E5E5"> have two parts of</font>

129
00:08:42,159 --> 00:08:44,459
the heap

130
00:08:45,750 --> 00:08:51,970
one of them being available for writing

131
00:08:48,960 --> 00:08:53,410
the other one of the invasion<font color="#E5E5E5"> and we</font>

132
00:08:51,970 --> 00:08:56,770
have a set of instructions instructions

133
00:08:53,410 --> 00:08:59,500
one and two are correct<font color="#CCCCCC"> they're written</font>

134
00:08:56,770 --> 00:09:01,949
to our<font color="#E5E5E5"> heat in</font><font color="#CCCCCC"> threat</font><font color="#E5E5E5"> for three is</font>

135
00:08:59,500 --> 00:09:07,990
responsible for<font color="#E5E5E5"> its overflow writing</font>

136
00:09:01,950 --> 00:09:10,840
execution instruction for and then

137
00:09:07,990 --> 00:09:14,770
instruction<font color="#E5E5E5"> five which addresses the</font>

138
00:09:10,840 --> 00:09:19,150
memory therefore we see three bucks

139
00:09:14,770 --> 00:09:21,970
let's assume that<font color="#CCCCCC"> we can earmark</font><font color="#E5E5E5"> of the</font>

140
00:09:19,150 --> 00:09:28,300
areas<font color="#E5E5E5"> before</font><font color="#CCCCCC"> and after the selected heat</font>

141
00:09:21,970 --> 00:09:35,220
<font color="#CCCCCC">five</font><font color="#E5E5E5"> them as resolution we can also mark</font>

142
00:09:28,300 --> 00:09:40,209
the<font color="#CCCCCC"> free memory we can flag it as free</font>

143
00:09:35,220 --> 00:09:46,810
<font color="#E5E5E5">now in the software accidents performs</font>

144
00:09:40,210 --> 00:09:50,680
access to these red<font color="#E5E5E5"> zones or if it is a</font>

145
00:09:46,810 --> 00:09:50,920
<font color="#E5E5E5">free area we see it but as simple as</font>

146
00:09:50,680 --> 00:09:56,469
that

147
00:09:50,920 --> 00:10:00,300
<font color="#CCCCCC">in DBM can help us perform this analysis</font>

148
00:09:56,470 --> 00:10:04,630
we need to the association<font color="#CCCCCC"> of each</font>

149
00:10:00,300 --> 00:10:06,849
<font color="#E5E5E5">future election each library cool we</font>

150
00:10:04,630 --> 00:10:11,650
should also keep<font color="#CCCCCC"> information</font><font color="#E5E5E5"> about those</font>

151
00:10:06,850 --> 00:10:16,780
black areas<font color="#CCCCCC"> m-mary blocks</font><font color="#E5E5E5"> other than</font>

152
00:10:11,650 --> 00:10:18,640
speed is<font color="#E5E5E5"> a hash table</font><font color="#CCCCCC"> and we</font><font color="#E5E5E5"> need to do</font>

153
00:10:16,780 --> 00:10:22,750
instrumentation<font color="#E5E5E5"> of each or the</font>

154
00:10:18,640 --> 00:10:24,910
instructions that's<font color="#E5E5E5"> all the memory it</font>

155
00:10:22,750 --> 00:10:28,210
<font color="#CCCCCC">has been</font><font color="#E5E5E5"> implemented in at work but</font>

156
00:10:24,910 --> 00:10:31,930
<font color="#E5E5E5">there is a slight problem is really slow</font>

157
00:10:28,210 --> 00:10:34,420
<font color="#CCCCCC">it may require 12 minutes to launch</font>

158
00:10:31,930 --> 00:10:43,780
PowerPoint for example which is

159
00:10:34,420 --> 00:10:46,780
acceptable we cannot run our Father for

160
00:10:43,780 --> 00:10:50,110
tuefel<font color="#E5E5E5"> analysis with them acceptable</font>

161
00:10:46,780 --> 00:10:53,199
times well what can<font color="#E5E5E5"> we do to optimize a</font>

162
00:10:50,110 --> 00:10:57,550
<font color="#CCCCCC">link and your shadow memory</font><font color="#E5E5E5"> which</font>

163
00:10:53,200 --> 00:11:00,970
requires<font color="#CCCCCC"> 8 bytes every eight bytes we</font>

164
00:10:57,550 --> 00:11:04,890
can<font color="#E5E5E5"> use one byte or our shadow memory to</font>

165
00:11:00,970 --> 00:11:09,760
store<font color="#E5E5E5"> information adult</font><font color="#CCCCCC"> marked blocks</font>

166
00:11:04,890 --> 00:11:15,790
the same information<font color="#CCCCCC"> can be stored in</font>

167
00:11:09,760 --> 00:11:20,230
the shadow memory<font color="#CCCCCC"> Windows dedicates</font>

168
00:11:15,790 --> 00:11:23,170
memory by using the various I guess all

169
00:11:20,230 --> 00:11:25,840
<font color="#CCCCCC">of them leading</font><font color="#E5E5E5"> to exceed zero we don't</font>

170
00:11:23,170 --> 00:11:29,260
<font color="#E5E5E5">fit instrumentation of each of the</font><font color="#CCCCCC"> holes</font>

171
00:11:25,840 --> 00:11:35,920
in the kernel<font color="#E5E5E5"> it's enough to do API</font>

172
00:11:29,260 --> 00:11:38,260
cooking<font color="#CCCCCC"> or instrumentation</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> MT DLL we</font>

173
00:11:35,920 --> 00:11:42,849
don't you have to do instrumentation of

174
00:11:38,260 --> 00:11:47,170
<font color="#CCCCCC">the lab Raquel of course we can not rule</font>

175
00:11:42,850 --> 00:11:51,050
<font color="#CCCCCC">that out</font><font color="#E5E5E5"> however</font><font color="#CCCCCC"> I have introduced a</font>

176
00:11:47,170 --> 00:11:55,790
number of Python days utilities

177
00:11:51,050 --> 00:12:00,229
which allows<font color="#CCCCCC"> instrument Gabriele's in</font>

178
00:11:55,790 --> 00:12:05,300
libraries<font color="#E5E5E5"> in order</font><font color="#CCCCCC"> to analyze buffer</font>

179
00:12:00,230 --> 00:12:09,350
overflow errors<font color="#E5E5E5"> how did we manage to</font>

180
00:12:05,300 --> 00:12:12,800
achieve the performance<font color="#E5E5E5"> wishes 70</font>

181
00:12:09,350 --> 00:12:15,170
<font color="#E5E5E5">appreciate better than all the other</font>

182
00:12:12,800 --> 00:12:18,620
utilities used for this application such

183
00:12:15,170 --> 00:12:21,979
as<font color="#CCCCCC"> their memory</font><font color="#E5E5E5"> let's proceed to my next</font>

184
00:12:18,620 --> 00:12:27,380
slide<font color="#E5E5E5"> here I want to show how TBI</font><font color="#CCCCCC"> can be</font>

185
00:12:21,980 --> 00:12:30,550
used to analyze malware that's assume we

186
00:12:27,380 --> 00:12:36,020
have a virus which<font color="#CCCCCC"> has been associated</font>

187
00:12:30,550 --> 00:12:39,459
that we have debugging protection<font color="#E5E5E5"> we do</font>

188
00:12:36,020 --> 00:12:43,250
not use all<font color="#CCCCCC"> the either</font><font color="#E5E5E5"> or any other</font>

189
00:12:39,460 --> 00:12:45,650
reverse engineering software<font color="#E5E5E5"> in Linux we</font>

190
00:12:43,250 --> 00:12:50,060
have<font color="#E5E5E5"> grades of</font><font color="#CCCCCC"> 3 utility which we can</font>

191
00:12:45,650 --> 00:12:54,069
use in<font color="#CCCCCC"> order to</font><font color="#E5E5E5"> get trust API call for</font>

192
00:12:50,060 --> 00:12:57,739
us<font color="#E5E5E5"> to identify was what in the software</font>

193
00:12:54,070 --> 00:13:01,940
<font color="#CCCCCC">and to overcome the canal semantic gap</font>

194
00:12:57,740 --> 00:13:06,940
<font color="#E5E5E5">problem in windows we can music 8 hoping</font>

195
00:13:01,940 --> 00:13:11,620
this technology be<font color="#E5E5E5"> well known lots of</font>

196
00:13:06,940 --> 00:13:14,660
alternative of options to<font color="#CCCCCC"> bypass it</font>

197
00:13:11,620 --> 00:13:18,950
right now from experience<font color="#CCCCCC"> that it's not</font>

198
00:13:14,660 --> 00:13:23,530
really<font color="#E5E5E5"> good</font><font color="#CCCCCC"> but we</font><font color="#E5E5E5"> can use dynamic</font>

199
00:13:18,950 --> 00:13:23,530
binary instrumentation here<font color="#CCCCCC"> at</font><font color="#E5E5E5"> VB our</font>

200
00:13:23,830 --> 00:13:34,010
objective is pretty transparent<font color="#CCCCCC"> for the</font>

201
00:13:27,260 --> 00:13:35,780
mall where it is analyzing the calls it

202
00:13:34,010 --> 00:13:38,750
should not only<font color="#E5E5E5"> be done transplant</font><font color="#CCCCCC"> line</font>

203
00:13:35,780 --> 00:13:42,920
<font color="#E5E5E5">but also</font><font color="#CCCCCC"> efficiently we should not</font>

204
00:13:38,750 --> 00:13:45,370
introduce significant<font color="#E5E5E5"> elder Hales to our</font>

205
00:13:42,920 --> 00:13:51,610
malware

206
00:13:45,370 --> 00:13:54,790
in order for<font color="#E5E5E5"> execution to</font><font color="#CCCCCC"> be acceptable</font>

207
00:13:51,610 --> 00:13:57,310
in terms of time we do instrumentation

208
00:13:54,790 --> 00:14:01,630
for each and every hole from the

209
00:13:57,310 --> 00:14:06,520
exported<font color="#E5E5E5"> Windows system binary we post</font>

210
00:14:01,630 --> 00:14:09,790
information about<font color="#E5E5E5"> such library calls to</font>

211
00:14:06,520 --> 00:14:11,770
the trust we<font color="#CCCCCC"> have information</font><font color="#E5E5E5"> about</font>

212
00:14:09,790 --> 00:14:15,610
arguments<font color="#CCCCCC"> ourselves DBI</font>

213
00:14:11,770 --> 00:14:21,939
<font color="#CCCCCC">calls we also post</font><font color="#E5E5E5"> his racing</font>

214
00:14:15,610 --> 00:14:26,290
information<font color="#E5E5E5"> tradition where</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> library</font>

215
00:14:21,940 --> 00:14:29,260
<font color="#E5E5E5">hole was</font><font color="#CCCCCC"> the phone</font><font color="#E5E5E5"> from was it a</font><font color="#CCCCCC"> hit or</font>

216
00:14:26,290 --> 00:14:34,949
was<font color="#E5E5E5"> it an intact</font><font color="#CCCCCC"> code or the software</font>

217
00:14:29,260 --> 00:14:34,950
itself<font color="#E5E5E5"> and so forth with</font><font color="#CCCCCC"> this online I</font>

218
00:14:35,100 --> 00:14:45,850
implemented zero<font color="#CCCCCC"> trace which is</font><font color="#E5E5E5"> based on</font>

219
00:14:42,300 --> 00:14:49,870
dynamic<font color="#E5E5E5"> real or framework there is no</font>

220
00:14:45,850 --> 00:14:53,650
debugging it does instrumentation of

221
00:14:49,870 --> 00:14:56,920
each and every API call it's open source

222
00:14:53,650 --> 00:15:00,910
based<font color="#CCCCCC"> Windows supportively and Android</font>

223
00:14:56,920 --> 00:15:04,420
supportive and<font color="#E5E5E5"> you do not need to be an</font>

224
00:15:00,910 --> 00:15:06,650
aspir you have any special<font color="#CCCCCC"> training</font><font color="#E5E5E5"> this</font>

225
00:15:04,420 --> 00:15:10,800
command enough

226
00:15:06,650 --> 00:15:18,300
so<font color="#E5E5E5"> generate trust it will be like trust</font>

227
00:15:10,800 --> 00:15:22,050
<font color="#CCCCCC">tracing lamps until</font><font color="#E5E5E5"> your example</font><font color="#CCCCCC"> of such</font>

228
00:15:18,300 --> 00:15:26,569
<font color="#E5E5E5">trades you can see the file in Valley</font>

229
00:15:22,050 --> 00:15:30,780
Center<font color="#E5E5E5"> our mall where he is</font><font color="#CCCCCC"> going to</font>

230
00:15:26,570 --> 00:15:34,610
some files<font color="#CCCCCC"> to certain directory you can</font>

231
00:15:30,780 --> 00:15:40,410
<font color="#CCCCCC">get more information again</font><font color="#E5E5E5"> arguments</font>

232
00:15:34,610 --> 00:15:45,090
employed in<font color="#CCCCCC"> affirmative lock SEL our</font>

233
00:15:40,410 --> 00:15:48,600
software<font color="#E5E5E5"> worked via virtual machine we</font>

234
00:15:45,090 --> 00:15:51,210
<font color="#E5E5E5">can also use machine learning and the</font>

235
00:15:48,600 --> 00:15:54,980
parameters of the<font color="#CCCCCC"> fusion learning will</font>

236
00:15:51,210 --> 00:15:59,160
be the parameters<font color="#E5E5E5"> of these API</font><font color="#CCCCCC"> poles or</font>

237
00:15:54,980 --> 00:16:01,290
the<font color="#E5E5E5"> APA calls proper therefore it's very</font>

238
00:15:59,160 --> 00:16:06,060
<font color="#CCCCCC">powerful tool to n</font><font color="#E5E5E5"> align the machine</font>

239
00:16:01,290 --> 00:16:08,910
code<font color="#E5E5E5"> and there are plenty of ways to use</font>

240
00:16:06,060 --> 00:16:12,060
<font color="#CCCCCC">it for cybersecurity purposes you can</font>

241
00:16:08,910 --> 00:16:15,630
download it from github<font color="#CCCCCC"> and</font><font color="#E5E5E5"> now it's</font>

242
00:16:12,060 --> 00:16:18,349
time<font color="#CCCCCC"> for</font><font color="#E5E5E5"> questions</font><font color="#CCCCCC"> answers</font><font color="#E5E5E5"> either any</font>

243
00:16:15,630 --> 00:16:18,350
questions of<font color="#E5E5E5"> course</font>

244
00:16:25,870 --> 00:16:29,440
thank you very<font color="#CCCCCC"> much</font>

245
00:16:30,580 --> 00:16:38,570
<font color="#CCCCCC">have you tested that we dig</font><font color="#E5E5E5"> application</font>

246
00:16:35,630 --> 00:16:44,300
such as<font color="#CCCCCC"> artists and</font><font color="#E5E5E5"> so forth</font><font color="#CCCCCC"> yes oh hi</font>

247
00:16:38,570 --> 00:16:48,650
<font color="#E5E5E5">over the performance to launch word the</font>

248
00:16:44,300 --> 00:16:52,000
<font color="#CCCCCC">L</font><font color="#E5E5E5"> right here will be say X 3 it will be</font>

249
00:16:48,650 --> 00:17:06,020
3 times slower<font color="#CCCCCC"> okay that seems to be</font>

250
00:16:52,000 --> 00:17:07,730
admissible<font color="#CCCCCC"> thank you very</font><font color="#E5E5E5"> much thank</font><font color="#CCCCCC"> you</font>

251
00:17:06,020 --> 00:17:11,629
<font color="#E5E5E5">for your presentation</font>

252
00:17:07,730 --> 00:17:15,440
<font color="#E5E5E5">yeah I don't</font><font color="#CCCCCC"> fully understand the basic</font>

253
00:17:11,630 --> 00:17:19,100
ideas underlying<font color="#CCCCCC"> idea if you're using</font>

254
00:17:15,440 --> 00:17:22,820
this for<font color="#CCCCCC"> a</font><font color="#E5E5E5"> dozen why dynamic and</font>

255
00:17:19,099 --> 00:17:27,198
cementation like everywhere why don't

256
00:17:22,819 --> 00:17:30,800
you just here<font color="#E5E5E5"> Saturday during and what</font>

257
00:17:27,199 --> 00:17:37,610
instrumentation<font color="#CCCCCC"> jet for each base class</font>

258
00:17:30,800 --> 00:17:41,840
but watch to sell that<font color="#CCCCCC"> buzzing has been</font>

259
00:17:37,610 --> 00:17:45,679
performed for this block firstly<font color="#E5E5E5"> for</font>

260
00:17:41,840 --> 00:17:49,970
this one is source code and we<font color="#E5E5E5"> don't</font>

261
00:17:45,680 --> 00:17:53,780
have<font color="#E5E5E5"> it at all</font><font color="#CCCCCC"> morover</font>

262
00:17:49,970 --> 00:17:56,540
if<font color="#CCCCCC"> the hitch overflow</font><font color="#E5E5E5"> the probability is</font>

263
00:17:53,780 --> 00:18:01,610
high<font color="#CCCCCC"> on the program no</font><font color="#E5E5E5"> exception</font><font color="#CCCCCC"> it will</font>

264
00:17:56,540 --> 00:18:07,030
just tell point<font color="#E5E5E5"> and we will not see such</font>

265
00:18:01,610 --> 00:18:07,030
overflow<font color="#E5E5E5"> the air will not</font><font color="#CCCCCC"> be identified</font>

266
00:18:07,750 --> 00:18:18,280
with my approach we will see that

267
00:18:12,920 --> 00:18:23,150
in<font color="#E5E5E5"> this address Lisa laughs</font><font color="#CCCCCC"> it memory</font>

268
00:18:18,280 --> 00:18:26,720
<font color="#E5E5E5">has been exceeded</font><font color="#CCCCCC"> and proper analytics</font>

269
00:18:23,150 --> 00:18:28,460
will be employed it all looks great<font color="#CCCCCC"> I</font>

270
00:18:26,720 --> 00:18:31,550
just<font color="#E5E5E5"> don't understand the underlying</font>

271
00:18:28,460 --> 00:18:37,160
idea<font color="#CCCCCC"> Oh a white</font><font color="#E5E5E5"> dynamic instrumentation</font>

272
00:18:31,550 --> 00:18:40,550
for buzzing well exactly what I<font color="#CCCCCC"> imagined</font>

273
00:18:37,160 --> 00:18:44,380
<font color="#E5E5E5">a lot is we have a Windows applications</font>

274
00:18:40,550 --> 00:18:48,230
<font color="#CCCCCC">with net for scalp if you use</font><font color="#E5E5E5"> a father</font>

275
00:18:44,380 --> 00:18:50,600
<font color="#E5E5E5">theory of housing and you see keep our</font>

276
00:18:48,230 --> 00:18:55,490
<font color="#E5E5E5">flow in your application there will</font><font color="#CCCCCC"> be</font>

277
00:18:50,600 --> 00:18:58,810
no exception at all but without<font color="#E5E5E5"> fuzzing</font>

278
00:18:55,490 --> 00:19:00,310
you will not have any<font color="#E5E5E5"> information with</font>

279
00:18:58,810 --> 00:19:03,470
<font color="#CCCCCC">CBI</font>

280
00:19:00,310 --> 00:19:08,389
you'll get your trust that's<font color="#E5E5E5"> my first</font>

281
00:19:03,470 --> 00:19:11,870
point second blast<font color="#E5E5E5"> the purpose of this</font>

282
00:19:08,390 --> 00:19:16,700
presentation<font color="#E5E5E5"> was to discuss</font><font color="#CCCCCC"> DBA in</font>

283
00:19:11,870 --> 00:19:20,510
general if<font color="#CCCCCC"> we do the name aquel</font>

284
00:19:16,700 --> 00:19:26,480
generation we<font color="#E5E5E5"> will not see it</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> steady</font>

285
00:19:20,510 --> 00:19:31,940
conveyor for<font color="#E5E5E5"> over executable static</font>

286
00:19:26,480 --> 00:19:35,330
analysis is pretty complex<font color="#CCCCCC"> task</font><font color="#E5E5E5"> and it's</font>

287
00:19:31,940 --> 00:19:38,660
not<font color="#CCCCCC"> feasible you will</font><font color="#E5E5E5"> not see the data</font>

288
00:19:35,330 --> 00:19:50,510
<font color="#CCCCCC">tell</font><font color="#E5E5E5"> well ok you have answered my</font>

289
00:19:38,660 --> 00:19:53,150
question hi have<font color="#CCCCCC"> you</font><font color="#E5E5E5"> ever seen a</font>

290
00:19:50,510 --> 00:19:55,250
notification of base block and process

291
00:19:53,150 --> 00:19:58,010
of instrumentation<font color="#CCCCCC"> yes of</font><font color="#E5E5E5"> course what</font>

292
00:19:55,250 --> 00:20:01,490
<font color="#CCCCCC">did</font><font color="#E5E5E5"> you do about</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> I use the enamel</font>

293
00:19:58,010 --> 00:20:04,430
<font color="#E5E5E5">reel which supports a situation as far</font>

294
00:20:01,490 --> 00:20:08,380
as the<font color="#CCCCCC"> implementation is concerned I</font><font color="#E5E5E5"> am</font>

295
00:20:04,430 --> 00:20:08,380
not the<font color="#E5E5E5"> right person to ask</font><font color="#CCCCCC"> about it</font>

