1
00:00:00,469 --> 00:00:06,839
hello<font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> coming this stop</font><font color="#CCCCCC"> is</font>

2
00:00:04,230 --> 00:00:10,019
going to<font color="#CCCCCC"> be an English translation</font>

3
00:00:06,839 --> 00:00:13,410
<font color="#E5E5E5">interesting somewhere there</font><font color="#CCCCCC"> so my name</font>

4
00:00:10,019 --> 00:00:16,289
is<font color="#CCCCCC"> Sergey Vulcan</font><font color="#E5E5E5"> and I'm going to</font>

5
00:00:13,410 --> 00:00:18,810
<font color="#CCCCCC">present the talk on</font><font color="#E5E5E5"> Java card platform</font>

6
00:00:16,289 --> 00:00:21,090
attacks<font color="#E5E5E5"> so their main goal of these</font>

7
00:00:18,810 --> 00:00:25,849
attacks is<font color="#E5E5E5"> to attack the secure</font>

8
00:00:21,090 --> 00:00:25,850
containers<font color="#CCCCCC"> but also</font><font color="#E5E5E5"> talk a bit about</font>

9
00:00:26,779 --> 00:00:32,700
illegal<font color="#CCCCCC"> op codes</font><font color="#E5E5E5"> and how</font><font color="#CCCCCC"> could</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> use to</font>

10
00:00:29,960 --> 00:00:35,130
<font color="#E5E5E5">attack the platform as well so first</font>

11
00:00:32,700 --> 00:00:38,550
<font color="#CCCCCC">we'll</font><font color="#E5E5E5"> start</font><font color="#CCCCCC"> with a</font><font color="#E5E5E5"> it's our card</font><font color="#CCCCCC"> what it</font>

12
00:00:35,130 --> 00:00:40,649
is and when<font color="#CCCCCC"> it is</font><font color="#E5E5E5"> used and then we'll</font>

13
00:00:38,550 --> 00:00:43,890
talk<font color="#E5E5E5"> about security features Java card</font>

14
00:00:40,649 --> 00:00:46,649
<font color="#E5E5E5">have then</font><font color="#CCCCCC"> talk about logical attacks</font>

15
00:00:43,890 --> 00:00:51,000
<font color="#E5E5E5">what</font><font color="#CCCCCC"> illogical attacks and how we</font><font color="#E5E5E5"> can</font>

16
00:00:46,649 --> 00:00:53,460
use them<font color="#CCCCCC"> to</font><font color="#E5E5E5"> attack the platform</font><font color="#CCCCCC"> then</font>

17
00:00:51,000 --> 00:00:56,280
it's<font color="#E5E5E5"> talk about secure containers so</font>

18
00:00:53,460 --> 00:00:59,550
talk<font color="#CCCCCC"> about how to get</font><font color="#E5E5E5"> a pin how to get a</font>

19
00:00:56,280 --> 00:01:02,609
<font color="#E5E5E5">desk is out of the</font><font color="#CCCCCC"> eppela to start on</font>

20
00:00:59,550 --> 00:01:05,158
the card<font color="#E5E5E5"> and talk about some content</font>

21
00:01:02,609 --> 00:01:06,900
matters which<font color="#CCCCCC"> I'm to amend</font><font color="#E5E5E5"> it on some of</font>

22
00:01:05,159 --> 00:01:11,369
the cards<font color="#E5E5E5"> and why they don't work</font>

23
00:01:06,900 --> 00:01:14,490
sometimes so we<font color="#E5E5E5"> can start with a Java</font>

24
00:01:11,369 --> 00:01:16,560
card so if you have real<font color="#E5E5E5"> wallet and you</font>

25
00:01:14,490 --> 00:01:18,658
have your<font color="#E5E5E5"> bank cards or if you have your</font>

26
00:01:16,560 --> 00:01:20,700
international<font color="#E5E5E5"> passport or some of their</font>

27
00:01:18,659 --> 00:01:23,790
SIM cards<font color="#E5E5E5"> you'll probably have a Java</font>

28
00:01:20,700 --> 00:01:26,490
card so if you have a passport with this

29
00:01:23,790 --> 00:01:31,500
symbol<font color="#E5E5E5"> which</font><font color="#CCCCCC"> means it has a chip inside</font>

30
00:01:26,490 --> 00:01:35,100
it has a Java card or most of the bank

31
00:01:31,500 --> 00:01:38,310
cards they also<font color="#CCCCCC"> Oracle says that there</font>

32
00:01:35,100 --> 00:01:42,149
are<font color="#CCCCCC"> about two billion</font><font color="#E5E5E5"> cards issued every</font>

33
00:01:38,310 --> 00:01:44,820
<font color="#E5E5E5">year to be</font><font color="#CCCCCC"> learn Java cards and</font>

34
00:01:42,150 --> 00:01:47,670
something about<font color="#CCCCCC"> platforms so any smart</font>

35
00:01:44,820 --> 00:01:50,729
card<font color="#E5E5E5"> we transfer</font><font color="#CCCCCC"> commas in Java card</font>

36
00:01:47,670 --> 00:01:53,040
with<font color="#E5E5E5"> no machine is a Java card there are</font>

37
00:01:50,729 --> 00:01:54,539
<font color="#E5E5E5">also smart cards which do not and we're</font>

38
00:01:53,040 --> 00:01:59,520
<font color="#CCCCCC">not going to talk about</font><font color="#E5E5E5"> attacks on that</font>

39
00:01:54,540 --> 00:02:01,590
cards<font color="#CCCCCC"> sour card and smart cards</font><font color="#E5E5E5"> in</font>

40
00:01:59,520 --> 00:02:05,670
<font color="#E5E5E5">general</font><font color="#CCCCCC"> have very limited resources so</font>

41
00:02:01,590 --> 00:02:07,979
<font color="#CCCCCC">they like 25 30 years</font><font color="#E5E5E5"> ago desktops</font>

42
00:02:05,670 --> 00:02:11,310
<font color="#E5E5E5">that's what you have nowadays on their</font>

43
00:02:07,979 --> 00:02:12,350
smart cards<font color="#E5E5E5"> you have if you kilobyte of</font>

44
00:02:11,310 --> 00:02:14,780
<font color="#CCCCCC">RAM</font>

45
00:02:12,350 --> 00:02:19,160
<font color="#E5E5E5">you have maybe 100 kilobyte of flesh</font>

46
00:02:14,780 --> 00:02:21,620
<font color="#E5E5E5">they can install your applets and you</font>

47
00:02:19,160 --> 00:02:24,770
have very small processor<font color="#E5E5E5"> maybe it has</font>

48
00:02:21,620 --> 00:02:26,780
quite often<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> 88 51</font><font color="#E5E5E5"> analog or</font>

49
00:02:24,770 --> 00:02:28,460
something like this<font color="#E5E5E5"> not all the time</font>

50
00:02:26,780 --> 00:02:30,070
sometimes<font color="#E5E5E5"> you also can see</font><font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit</font>

51
00:02:28,460 --> 00:02:32,600
processor but it's not<font color="#E5E5E5"> very</font><font color="#CCCCCC"> common</font>

52
00:02:30,070 --> 00:02:34,010
because<font color="#E5E5E5"> normally also don't need that</font>

53
00:02:32,600 --> 00:02:35,420
much resources<font color="#E5E5E5"> and it's much cheaper</font>

54
00:02:34,010 --> 00:02:37,640
<font color="#E5E5E5">because you have to produce a lot</font><font color="#CCCCCC"> of</font>

55
00:02:35,420 --> 00:02:43,070
cards you don't<font color="#CCCCCC"> want to go for expensive</font>

56
00:02:37,640 --> 00:02:45,410
processor telecard has a bunch of

57
00:02:43,070 --> 00:02:48,079
features which have lamented to<font color="#E5E5E5"> provide</font>

58
00:02:45,410 --> 00:02:52,460
security<font color="#E5E5E5"> of your code running</font><font color="#CCCCCC"> on the</font>

59
00:02:48,080 --> 00:02:54,560
card so first of all the nice feature of

60
00:02:52,460 --> 00:02:57,500
<font color="#E5E5E5">a Java card is that first it could</font><font color="#CCCCCC"> be</font>

61
00:02:54,560 --> 00:02:59,840
issued by<font color="#CCCCCC"> manufacture and then after</font>

62
00:02:57,500 --> 00:03:01,580
issuance you can install your applets so

63
00:02:59,840 --> 00:03:03,620
you don't have to have<font color="#E5E5E5"> your code in the</font>

64
00:03:01,580 --> 00:03:05,930
<font color="#E5E5E5">beginning you can just</font><font color="#CCCCCC"> by blend cards</font>

65
00:03:03,620 --> 00:03:09,440
install<font color="#E5E5E5"> your applets and then run the</font>

66
00:03:05,930 --> 00:03:13,090
code<font color="#E5E5E5"> and since it's a Java code you can</font>

67
00:03:09,440 --> 00:03:18,859
run it on any<font color="#CCCCCC"> Java card</font><font color="#E5E5E5"> which supports</font>

68
00:03:13,090 --> 00:03:20,330
Java which has<font color="#CCCCCC"> root on machine but there</font>

69
00:03:18,860 --> 00:03:23,840
is<font color="#CCCCCC"> also</font><font color="#E5E5E5"> on feature its bytecode verifier</font>

70
00:03:20,330 --> 00:03:26,030
<font color="#CCCCCC">it could be on the card</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> of card</font><font color="#E5E5E5"> and</font>

71
00:03:23,840 --> 00:03:28,400
on most<font color="#E5E5E5"> of the cards there is no</font>

72
00:03:26,030 --> 00:03:31,610
bytecode verifier on<font color="#CCCCCC"> the card</font><font color="#E5E5E5"> because it</font>

73
00:03:28,400 --> 00:03:32,990
takes<font color="#CCCCCC"> resources and to verify</font><font color="#E5E5E5"> code it's</font>

74
00:03:31,610 --> 00:03:35,870
quite<font color="#E5E5E5"> expensive that's why they</font>

75
00:03:32,990 --> 00:03:38,120
implement<font color="#E5E5E5"> it</font><font color="#CCCCCC"> off of the card</font><font color="#E5E5E5"> and that</font>

76
00:03:35,870 --> 00:03:41,420
means when you compile<font color="#CCCCCC"> the code you get</font>

77
00:03:38,120 --> 00:03:42,860
a<font color="#E5E5E5"> bytecode and then to</font><font color="#CCCCCC"> install it to get</font>

78
00:03:41,420 --> 00:03:45,200
a cup<font color="#CCCCCC"> file which could be</font><font color="#E5E5E5"> installed in a</font>

79
00:03:42,860 --> 00:03:47,480
card you have to<font color="#CCCCCC"> do verification first</font>

80
00:03:45,200 --> 00:03:51,380
<font color="#E5E5E5">and it makes sure</font><font color="#CCCCCC"> that there is no type</font>

81
00:03:47,480 --> 00:03:54,170
confusion or something like this<font color="#E5E5E5"> but</font><font color="#CCCCCC"> of</font>

82
00:03:51,380 --> 00:03:57,260
<font color="#CCCCCC">course</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> you are</font><font color="#E5E5E5"> an attacker</font><font color="#CCCCCC"> you can</font>

83
00:03:54,170 --> 00:04:00,559
just do verification first then modify

84
00:03:57,260 --> 00:04:03,079
<font color="#E5E5E5">cup file like text editor or something</font>

85
00:04:00,560 --> 00:04:06,620
and then<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can install malicious</font>

86
00:04:03,080 --> 00:04:08,890
applet<font color="#E5E5E5"> so applets which are modified up</font>

87
00:04:06,620 --> 00:04:11,510
to verification<font color="#CCCCCC"> and which cannot be</font>

88
00:04:08,890 --> 00:04:13,369
verified<font color="#E5E5E5"> by</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> verifier which will not</font>

89
00:04:11,510 --> 00:04:14,840
<font color="#CCCCCC">pass they are malicious applets</font><font color="#E5E5E5"> and</font>

90
00:04:13,370 --> 00:04:18,440
we'll talk about malicious tablets

91
00:04:14,840 --> 00:04:22,220
mostly during<font color="#E5E5E5"> this talk</font><font color="#CCCCCC"> then there's</font>

92
00:04:18,440 --> 00:04:23,870
also transaction mechanism<font color="#E5E5E5"> and it is</font>

93
00:04:22,220 --> 00:04:25,510
used<font color="#E5E5E5"> in a card because it has no power</font>

94
00:04:23,870 --> 00:04:27,580
<font color="#CCCCCC">supply</font>

95
00:04:25,510 --> 00:04:30,730
when you plug in<font color="#CCCCCC"> your car and you start</font>

96
00:04:27,580 --> 00:04:32,950
execution<font color="#CCCCCC"> if you tear the card</font><font color="#E5E5E5"> it can</font>

97
00:04:30,730 --> 00:04:35,530
stop at any moment<font color="#CCCCCC"> and quite often you</font>

98
00:04:32,950 --> 00:04:36,490
don't<font color="#E5E5E5"> want it if you change balance or</font>

99
00:04:35,530 --> 00:04:38,919
do something<font color="#CCCCCC"> like this</font>

100
00:04:36,490 --> 00:04:41,350
so there is a transaction mechanism

101
00:04:38,920 --> 00:04:43,360
which<font color="#CCCCCC"> allows you to</font><font color="#E5E5E5"> make</font><font color="#CCCCCC"> a transaction</font>

102
00:04:41,350 --> 00:04:45,280
so you define begin transaction<font color="#CCCCCC"> end</font>

103
00:04:43,360 --> 00:04:47,260
transaction<font color="#CCCCCC"> and all the code in them</font>

104
00:04:45,280 --> 00:04:49,989
<font color="#E5E5E5">between these two instructions will be</font>

105
00:04:47,260 --> 00:04:55,320
<font color="#E5E5E5">either executed or</font><font color="#CCCCCC"> old back if it's</font><font color="#E5E5E5"> not</font>

106
00:04:49,990 --> 00:04:58,900
finished<font color="#CCCCCC"> and finally</font><font color="#E5E5E5"> secure containers</font>

107
00:04:55,320 --> 00:05:02,380
<font color="#E5E5E5">so for cryptographic keys and for pins</font>

108
00:04:58,900 --> 00:05:06,630
on a card<font color="#E5E5E5"> and yeah we'll see how to</font>

109
00:05:02,380 --> 00:05:06,630
attack<font color="#CCCCCC"> these containers for</font><font color="#E5E5E5"> their own</font>

110
00:05:07,620 --> 00:05:12,520
<font color="#E5E5E5">going back just one second</font>

111
00:05:10,450 --> 00:05:15,010
so there is firewall and another nice

112
00:05:12,520 --> 00:05:17,280
feature<font color="#CCCCCC"> of a Java card is that you can</font>

113
00:05:15,010 --> 00:05:19,930
install multiple applets on the card<font color="#E5E5E5"> and</font>

114
00:05:17,280 --> 00:05:21,400
it sounds<font color="#E5E5E5"> very nice because you have</font>

115
00:05:19,930 --> 00:05:24,220
just<font color="#E5E5E5"> one card you</font><font color="#CCCCCC"> don't have to have a</font>

116
00:05:21,400 --> 00:05:27,250
huge wallet<font color="#E5E5E5"> and</font><font color="#CCCCCC"> to carry with you 20</font>

117
00:05:24,220 --> 00:05:31,900
cards from different banks<font color="#CCCCCC"> and from all</font>

118
00:05:27,250 --> 00:05:33,310
possible<font color="#E5E5E5"> like</font><font color="#CCCCCC"> channel cards or discount</font>

119
00:05:31,900 --> 00:05:34,870
cards and so on<font color="#CCCCCC"> so you can just have one</font>

120
00:05:33,310 --> 00:05:37,180
card install all the applets on it in

121
00:05:34,870 --> 00:05:38,710
<font color="#E5E5E5">fact no one</font><font color="#CCCCCC"> actually want to do this</font>

122
00:05:37,180 --> 00:05:41,650
because you don't<font color="#CCCCCC"> want someone to run</font>

123
00:05:38,710 --> 00:05:44,890
their code on<font color="#CCCCCC"> your card it is not very</font>

124
00:05:41,650 --> 00:05:46,030
common<font color="#CCCCCC"> but if it is</font><font color="#E5E5E5"> possible there is</font>

125
00:05:44,890 --> 00:05:48,550
<font color="#CCCCCC">firewall on the card</font>

126
00:05:46,030 --> 00:05:50,650
if you install multiple applets<font color="#E5E5E5"> and it</font>

127
00:05:48,550 --> 00:05:53,080
ensures<font color="#CCCCCC"> that you cannot get access to</font>

128
00:05:50,650 --> 00:05:55,659
objects<font color="#E5E5E5"> of other applets so</font>

129
00:05:53,080 --> 00:05:57,609
specification says that if you<font color="#E5E5E5"> have your</font>

130
00:05:55,660 --> 00:05:59,140
applet on<font color="#E5E5E5"> the card it shouldn't be</font>

131
00:05:57,610 --> 00:06:01,920
possible for other updates to get access

132
00:05:59,140 --> 00:06:05,710
<font color="#CCCCCC">to memory</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> the code of your</font><font color="#E5E5E5"> applet and</font>

133
00:06:01,920 --> 00:06:08,410
in this study also showed that<font color="#E5E5E5"> this</font>

134
00:06:05,710 --> 00:06:13,450
firewall<font color="#E5E5E5"> doesn't actually provide any</font>

135
00:06:08,410 --> 00:06:15,190
security against malicious applets<font color="#CCCCCC"> you</font>

136
00:06:13,450 --> 00:06:17,260
can also see on this diagram<font color="#CCCCCC"> that</font><font color="#E5E5E5"> there</font>

137
00:06:15,190 --> 00:06:20,350
<font color="#E5E5E5">is a Java card on time environment which</font>

138
00:06:17,260 --> 00:06:22,300
ants above all the applets<font color="#E5E5E5"> and it can</font>

139
00:06:20,350 --> 00:06:23,800
get access<font color="#E5E5E5"> to all the memory</font><font color="#CCCCCC"> of</font>

140
00:06:22,300 --> 00:06:27,190
different tablets and their different

141
00:06:23,800 --> 00:06:28,780
context for packages so you can have

142
00:06:27,190 --> 00:06:31,000
multiple applets<font color="#E5E5E5"> in your package and</font>

143
00:06:28,780 --> 00:06:34,030
they can have shared access<font color="#E5E5E5"> to some data</font>

144
00:06:31,000 --> 00:06:36,400
but<font color="#CCCCCC"> from</font><font color="#E5E5E5"> different contexts</font><font color="#CCCCCC"> you cannot</font>

145
00:06:34,030 --> 00:06:39,299
get<font color="#E5E5E5"> access to them to</font><font color="#CCCCCC"> make to the memory</font>

146
00:06:36,400 --> 00:06:39,299
or<font color="#CCCCCC"> to objects</font>

147
00:06:41,400 --> 00:06:46,200
some attack prerequisite<font color="#E5E5E5"> of course would</font>

148
00:06:44,220 --> 00:06:49,680
<font color="#CCCCCC">be nice to be able</font><font color="#E5E5E5"> to install that</font><font color="#CCCCCC"> let's</font>

149
00:06:46,200 --> 00:06:52,469
on<font color="#E5E5E5"> your passport and get the keys or get</font>

150
00:06:49,680 --> 00:06:56,220
data<font color="#E5E5E5"> although</font><font color="#CCCCCC"> it's not</font><font color="#E5E5E5"> very</font><font color="#CCCCCC"> easy to get</font>

151
00:06:52,470 --> 00:06:58,380
this<font color="#E5E5E5"> kind of access because to install</font>

152
00:06:56,220 --> 00:07:01,350
<font color="#E5E5E5">applet</font><font color="#CCCCCC"> on a card in</font><font color="#E5E5E5"> real life you have</font>

153
00:06:58,380 --> 00:07:05,010
<font color="#CCCCCC">to</font><font color="#E5E5E5"> have card management keys and it's</font>

154
00:07:01,350 --> 00:07:06,720
<font color="#CCCCCC">two days</font><font color="#E5E5E5"> key so it's 16 a bit for</font>

155
00:07:05,010 --> 00:07:11,039
encryption<font color="#E5E5E5"> and you have to have three</font><font color="#CCCCCC"> of</font>

156
00:07:06,720 --> 00:07:13,710
these keys<font color="#CCCCCC"> and normally</font><font color="#E5E5E5"> you don't</font><font color="#CCCCCC"> have</font>

157
00:07:11,040 --> 00:07:17,780
<font color="#E5E5E5">these keys so in the study we done we</font>

158
00:07:13,710 --> 00:07:21,810
<font color="#E5E5E5">just got blank cards you can buy them</font>

159
00:07:17,780 --> 00:07:24,090
online<font color="#E5E5E5"> like this one and you</font><font color="#CCCCCC"> have</font>

160
00:07:21,810 --> 00:07:26,730
default<font color="#E5E5E5"> keys on these</font><font color="#CCCCCC"> cards they even</font>

161
00:07:24,090 --> 00:07:28,679
say it's online<font color="#E5E5E5"> shop</font><font color="#CCCCCC"> it won't</font><font color="#E5E5E5"> say that</font>

162
00:07:26,730 --> 00:07:31,310
they have some certification so<font color="#E5E5E5"> these</font>

163
00:07:28,680 --> 00:07:35,480
cars could be<font color="#E5E5E5"> used in their life by</font><font color="#CCCCCC"> some</font>

164
00:07:31,310 --> 00:07:37,890
banks or<font color="#E5E5E5"> whatever some of them even have</font>

165
00:07:35,480 --> 00:07:43,020
<font color="#CCCCCC">MasterCard application pre-installed in</font>

166
00:07:37,890 --> 00:07:44,310
<font color="#E5E5E5">the room but not all</font><font color="#CCCCCC"> of them and when</font>

167
00:07:43,020 --> 00:07:45,719
you have default keys of course you can

168
00:07:44,310 --> 00:07:47,310
<font color="#E5E5E5">just install if you don't have default</font>

169
00:07:45,720 --> 00:07:50,400
keys you<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to find a way how to do</font>

170
00:07:47,310 --> 00:07:53,910
this<font color="#E5E5E5"> and there's been research on how to</font>

171
00:07:50,400 --> 00:07:55,859
use<font color="#CCCCCC"> single fault injection so fault</font>

172
00:07:53,910 --> 00:07:58,200
injection is when you run the card you

173
00:07:55,860 --> 00:08:00,120
can do some voltage glitch or<font color="#CCCCCC"> something</font>

174
00:07:58,200 --> 00:08:01,909
like this<font color="#CCCCCC"> to modify behavior of a car</font>

175
00:08:00,120 --> 00:08:06,180
and<font color="#E5E5E5"> they show how they can transform</font>

176
00:08:01,910 --> 00:08:09,600
<font color="#CCCCCC">just</font><font color="#E5E5E5"> verifiable code into malicious code</font>

177
00:08:06,180 --> 00:08:13,380
<font color="#E5E5E5">isn't</font><font color="#CCCCCC"> just a single fault injection or</font>

178
00:08:09,600 --> 00:08:15,330
you can somehow find<font color="#E5E5E5"> a way that third</font>

179
00:08:13,380 --> 00:08:17,430
party will install your<font color="#E5E5E5"> library or</font>

180
00:08:15,330 --> 00:08:19,950
<font color="#CCCCCC">something</font><font color="#E5E5E5"> on a card and then</font><font color="#CCCCCC"> you can get</font>

181
00:08:17,430 --> 00:08:25,530
access<font color="#E5E5E5"> to then you can execute the code</font>

182
00:08:19,950 --> 00:08:29,099
<font color="#E5E5E5">in a card</font><font color="#CCCCCC"> once you have found</font><font color="#E5E5E5"> a way how</font>

183
00:08:25,530 --> 00:08:31,409
<font color="#E5E5E5">to install your applets then you have to</font>

184
00:08:29,100 --> 00:08:33,479
make sure<font color="#CCCCCC"> that you can execute your</font>

185
00:08:31,410 --> 00:08:38,460
<font color="#E5E5E5">malicious applets and for this you have</font>

186
00:08:33,479 --> 00:08:40,590
<font color="#CCCCCC">to buy pass bytecode verifier and to do</font>

187
00:08:38,460 --> 00:08:42,450
this<font color="#E5E5E5"> either there is</font><font color="#CCCCCC"> no</font><font color="#E5E5E5"> one card by</font>

188
00:08:40,590 --> 00:08:44,640
<font color="#E5E5E5">Quadra fire and it's quite simple</font><font color="#CCCCCC"> so you</font>

189
00:08:42,450 --> 00:08:46,200
can just<font color="#E5E5E5"> modify the code and then you</font>

190
00:08:44,640 --> 00:08:48,930
install it<font color="#CCCCCC"> and there is no problem for</font>

191
00:08:46,200 --> 00:08:51,120
you<font color="#E5E5E5"> if there is there's also been</font>

192
00:08:48,930 --> 00:08:51,810
another study that<font color="#E5E5E5"> using fault injection</font>

193
00:08:51,120 --> 00:08:55,170
you can

194
00:08:51,810 --> 00:08:57,000
the<font color="#CCCCCC"> Vipers verifier as well so either</font>

195
00:08:55,170 --> 00:08:59,370
have to do some physical<font color="#CCCCCC"> attacks as well</font>

196
00:08:57,000 --> 00:09:02,279
<font color="#CCCCCC">in</font><font color="#E5E5E5"> combination with logical attacks to</font>

197
00:08:59,370 --> 00:09:04,380
go further<font color="#CCCCCC"> or</font><font color="#E5E5E5"> you have to have</font><font color="#CCCCCC"> card</font>

198
00:09:02,279 --> 00:09:06,840
without bytecode verifier<font color="#CCCCCC"> and then be</font>

199
00:09:04,380 --> 00:09:14,460
able<font color="#CCCCCC"> to install the</font><font color="#E5E5E5"> car applets knowing</font>

200
00:09:06,840 --> 00:09:16,770
the keys or using any<font color="#CCCCCC"> other way</font><font color="#E5E5E5"> and now</font>

201
00:09:14,460 --> 00:09:19,830
we'll talk about logical attacks<font color="#E5E5E5"> so once</font>

202
00:09:16,770 --> 00:09:22,470
you<font color="#E5E5E5"> can install your applets we can see</font>

203
00:09:19,830 --> 00:09:24,300
how secure the platform in depth<font color="#E5E5E5"> and if</font>

204
00:09:22,470 --> 00:09:28,770
we can install can we do something<font color="#E5E5E5"> from</font>

205
00:09:24,300 --> 00:09:31,979
there so logical<font color="#CCCCCC"> attack is</font><font color="#E5E5E5"> very cheap</font>

206
00:09:28,770 --> 00:09:34,650
<font color="#E5E5E5">all we need is just</font><font color="#CCCCCC"> your laptop and your</font>

207
00:09:31,980 --> 00:09:37,860
reader or NFC<font color="#E5E5E5"> reader or physical one if</font>

208
00:09:34,650 --> 00:09:40,860
you have contact card<font color="#E5E5E5"> and then a card</font>

209
00:09:37,860 --> 00:09:43,050
and and that's it<font color="#CCCCCC"> it don't</font><font color="#E5E5E5"> need much</font><font color="#CCCCCC"> of</font>

210
00:09:40,860 --> 00:09:45,060
software<font color="#E5E5E5"> or something and then you</font><font color="#CCCCCC"> can</font>

211
00:09:43,050 --> 00:09:50,880
install applets<font color="#E5E5E5"> and can modify them in</font>

212
00:09:45,060 --> 00:09:52,829
hex editor or whatever prefer<font color="#E5E5E5"> so</font>

213
00:09:50,880 --> 00:09:55,230
malicious applets<font color="#E5E5E5"> are the applets which</font>

214
00:09:52,830 --> 00:09:56,880
cannot pass verifier and here you see

215
00:09:55,230 --> 00:10:00,660
<font color="#E5E5E5">one piece of code which cannot be</font>

216
00:09:56,880 --> 00:10:03,150
compiled<font color="#E5E5E5"> because you have here byte</font>

217
00:10:00,660 --> 00:10:05,459
array which has<font color="#E5E5E5"> three</font><font color="#CCCCCC"> elements and have</font>

218
00:10:03,150 --> 00:10:10,350
short<font color="#E5E5E5"> array which is caused from this</font>

219
00:10:05,460 --> 00:10:14,370
object<font color="#CCCCCC"> and it</font><font color="#E5E5E5"> actually has an address of</font>

220
00:10:10,350 --> 00:10:17,040
the array<font color="#CCCCCC"> be</font><font color="#E5E5E5"> a so if you try to compile</font>

221
00:10:14,370 --> 00:10:19,650
this you'll get<font color="#E5E5E5"> type</font><font color="#CCCCCC"> mismatch or</font>

222
00:10:17,040 --> 00:10:21,719
something like<font color="#E5E5E5"> this but</font><font color="#CCCCCC"> if you compile</font>

223
00:10:19,650 --> 00:10:23,459
the proper code and then modify byte

224
00:10:21,720 --> 00:10:25,470
codes you can<font color="#CCCCCC"> try to install it</font><font color="#E5E5E5"> and see</font>

225
00:10:23,460 --> 00:10:27,510
<font color="#E5E5E5">what it does will their card execute it</font>

226
00:10:25,470 --> 00:10:29,160
or not and on most<font color="#E5E5E5"> of the cards it's</font>

227
00:10:27,510 --> 00:10:31,680
actually executed and they keep going

228
00:10:29,160 --> 00:10:34,319
<font color="#CCCCCC">like nothing</font><font color="#E5E5E5"> happened</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the case why it</font>

229
00:10:31,680 --> 00:10:38,219
<font color="#E5E5E5">happens is</font><font color="#CCCCCC"> because they have a stack</font><font color="#E5E5E5"> and</font>

230
00:10:34,320 --> 00:10:39,780
it's<font color="#E5E5E5"> untyped so they put a pointer on</font><font color="#CCCCCC"> a</font>

231
00:10:38,220 --> 00:10:45,330
stack and<font color="#CCCCCC"> they get a short and they</font>

232
00:10:39,780 --> 00:10:47,040
cannot check what<font color="#CCCCCC"> kind of</font><font color="#E5E5E5"> values it</font><font color="#CCCCCC"> so</font>

233
00:10:45,330 --> 00:10:50,100
once you can execute this kind<font color="#E5E5E5"> of code</font>

234
00:10:47,040 --> 00:10:53,699
you can see here so in the beginning<font color="#E5E5E5"> you</font>

235
00:10:50,100 --> 00:10:55,709
<font color="#CCCCCC">had the pointer</font><font color="#E5E5E5"> be a reference</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> in</font>

236
00:10:53,700 --> 00:10:59,880
the beginning and it has some metadata

237
00:10:55,709 --> 00:11:04,770
and data<font color="#E5E5E5"> later so have three elements</font>

238
00:10:59,880 --> 00:11:05,670
here<font color="#CCCCCC"> but now using this code</font><font color="#E5E5E5"> we managed</font>

239
00:11:04,770 --> 00:11:09,510
to set

240
00:11:05,670 --> 00:11:11,370
<font color="#E5E5E5">sorta right to this to the same</font><font color="#CCCCCC"> pointer</font>

241
00:11:09,510 --> 00:11:15,180
so to make the<font color="#CCCCCC"> reference point</font><font color="#E5E5E5"> to the</font>

242
00:11:11,370 --> 00:11:18,120
same memory address<font color="#E5E5E5"> and when it happens</font>

243
00:11:15,180 --> 00:11:21,149
it<font color="#CCCCCC"> will point here and try to</font><font color="#E5E5E5"> process</font>

244
00:11:18,120 --> 00:11:23,160
<font color="#CCCCCC">try to</font><font color="#E5E5E5"> treat this as</font><font color="#CCCCCC"> short array and</font>

245
00:11:21,149 --> 00:11:25,890
when you do this it will<font color="#E5E5E5"> go to the</font>

246
00:11:23,160 --> 00:11:27,839
length of the array and check how many

247
00:11:25,890 --> 00:11:30,149
<font color="#E5E5E5">elements you can read and so if you ask</font>

248
00:11:27,839 --> 00:11:31,800
for<font color="#E5E5E5"> element</font><font color="#CCCCCC"> one one short short element</font>

249
00:11:30,149 --> 00:11:34,260
it will read this<font color="#E5E5E5"> one</font><font color="#CCCCCC"> zero one zero two</font>

250
00:11:31,800 --> 00:11:37,140
if you<font color="#E5E5E5"> ask for the second one it will</font>

251
00:11:34,260 --> 00:11:38,939
read<font color="#E5E5E5"> zero three zero eight eight</font><font color="#CCCCCC"> zero so</font>

252
00:11:37,140 --> 00:11:41,220
you read one extra byte which should

253
00:11:38,940 --> 00:11:42,959
make should not be read it's outside<font color="#CCCCCC"> of</font>

254
00:11:41,220 --> 00:11:44,820
bounds<font color="#E5E5E5"> so if you do it on a byte array</font>

255
00:11:42,959 --> 00:11:46,829
<font color="#CCCCCC">it will say that</font><font color="#E5E5E5"> this element is number</font>

256
00:11:44,820 --> 00:11:49,260
four<font color="#E5E5E5"> number three actually</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> zero and</font>

257
00:11:46,829 --> 00:11:51,239
you cannot read this one if you do short

258
00:11:49,260 --> 00:11:53,700
array you can<font color="#CCCCCC"> read this one in</font><font color="#E5E5E5"> you can</font>

259
00:11:51,240 --> 00:11:56,100
read these two because<font color="#E5E5E5"> this one is short</font>

260
00:11:53,700 --> 00:11:58,980
number<font color="#E5E5E5"> three and then when you can do</font>

261
00:11:56,100 --> 00:12:00,180
this you can<font color="#CCCCCC"> read out of bounds and in</font>

262
00:11:58,980 --> 00:12:02,670
<font color="#E5E5E5">this case you can see it's</font><font color="#CCCCCC"> quite often</font>

263
00:12:00,180 --> 00:12:04,709
like this<font color="#CCCCCC"> so you</font><font color="#E5E5E5"> have first array stored</font>

264
00:12:02,670 --> 00:12:07,620
in memory<font color="#E5E5E5"> and following this you can see</font>

265
00:12:04,709 --> 00:12:09,390
it looks like metadata of this one<font color="#E5E5E5"> so</font>

266
00:12:07,620 --> 00:12:11,700
probably next one you have<font color="#E5E5E5"> another array</font>

267
00:12:09,390 --> 00:12:13,860
and you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> modify metadata of the</font><font color="#CCCCCC"> array</font>

268
00:12:11,700 --> 00:12:15,500
<font color="#CCCCCC">the you can change for instance if you</font>

269
00:12:13,860 --> 00:12:18,360
change this by it you can<font color="#E5E5E5"> change the</font>

270
00:12:15,500 --> 00:12:21,270
length of the next array in memory and

271
00:12:18,360 --> 00:12:23,100
then<font color="#E5E5E5"> you can get access to all the</font>

272
00:12:21,270 --> 00:12:26,579
memory on<font color="#E5E5E5"> the card so</font><font color="#CCCCCC"> told to the old</font>

273
00:12:23,100 --> 00:12:29,190
flash and it<font color="#CCCCCC"> is also nice</font><font color="#E5E5E5"> to know</font><font color="#CCCCCC"> that</font>

274
00:12:26,579 --> 00:12:32,640
all the applets<font color="#E5E5E5"> actually store them in</font>

275
00:12:29,190 --> 00:12:34,620
flash<font color="#E5E5E5"> in the same memory so one applet</font>

276
00:12:32,640 --> 00:12:36,630
just follows another<font color="#E5E5E5"> one so if you have</font>

277
00:12:34,620 --> 00:12:39,440
first<font color="#E5E5E5"> tablet than doing this you can</font>

278
00:12:36,630 --> 00:12:44,160
read out memory of other<font color="#E5E5E5"> efforts</font><font color="#CCCCCC"> and</font>

279
00:12:39,440 --> 00:12:47,550
doing so<font color="#E5E5E5"> they've been a bunch of attacks</font>

280
00:12:44,160 --> 00:12:49,260
published so far<font color="#E5E5E5"> so people studied how</font>

281
00:12:47,550 --> 00:12:51,300
<font color="#CCCCCC">to do illegal</font><font color="#E5E5E5"> costing how to do</font><font color="#CCCCCC"> that</font>

282
00:12:49,260 --> 00:12:54,060
confusion<font color="#E5E5E5"> on a card</font><font color="#CCCCCC"> how to abuse</font>

283
00:12:51,300 --> 00:12:56,069
<font color="#E5E5E5">transaction mechanism because it is also</font>

284
00:12:54,060 --> 00:12:58,319
very tricky to implement transaction

285
00:12:56,070 --> 00:13:00,089
mechanism<font color="#E5E5E5"> if you can allocate memory in</font>

286
00:12:58,320 --> 00:13:03,149
the transaction<font color="#E5E5E5"> then when you roll back</font>

287
00:13:00,089 --> 00:13:04,920
<font color="#E5E5E5">it's it's difficult</font><font color="#CCCCCC"> to you have to clear</font>

288
00:13:03,149 --> 00:13:07,019
the memory<font color="#E5E5E5"> you have to check</font><font color="#CCCCCC"> that all</font>

289
00:13:04,920 --> 00:13:09,719
<font color="#CCCCCC">their references</font><font color="#E5E5E5"> to this are cleared as</font>

290
00:13:07,019 --> 00:13:11,490
well<font color="#E5E5E5"> and they've been a bunch of bugs in</font>

291
00:13:09,720 --> 00:13:14,310
the transaction<font color="#E5E5E5"> mechanism back then</font>

292
00:13:11,490 --> 00:13:16,680
<font color="#E5E5E5">although our study showed that modern</font>

293
00:13:14,310 --> 00:13:18,540
cards<font color="#E5E5E5"> don't actually have this kind of</font>

294
00:13:16,680 --> 00:13:21,089
<font color="#E5E5E5">bug</font>

295
00:13:18,540 --> 00:13:24,030
been published metadata manipulation<font color="#CCCCCC"> a</font>

296
00:13:21,090 --> 00:13:27,300
binary<font color="#E5E5E5"> incompatibility</font><font color="#CCCCCC"> so when you have</font>

297
00:13:24,030 --> 00:13:29,100
a library<font color="#E5E5E5"> and it takes a particular type</font>

298
00:13:27,300 --> 00:13:31,620
but when your applet provides a

299
00:13:29,100 --> 00:13:34,700
different<font color="#CCCCCC"> kind of type and it's also</font>

300
00:13:31,620 --> 00:13:37,620
difficult to<font color="#E5E5E5"> check even if you have some</font>

301
00:13:34,700 --> 00:13:39,840
checks during<font color="#E5E5E5"> installation</font><font color="#CCCCCC"> it is</font><font color="#E5E5E5"> quite</font>

302
00:13:37,620 --> 00:13:41,940
tricky to<font color="#E5E5E5"> figure out if all the calls to</font>

303
00:13:39,840 --> 00:13:47,280
<font color="#E5E5E5">other libraries they have the same kind</font>

304
00:13:41,940 --> 00:13:49,200
<font color="#CCCCCC">of types in the course there's there has</font>

305
00:13:47,280 --> 00:13:51,540
been a<font color="#E5E5E5"> study on stack</font><font color="#CCCCCC"> underflow attack</font>

306
00:13:49,200 --> 00:13:54,120
sometimes<font color="#CCCCCC"> some of the cards don't</font>

307
00:13:51,540 --> 00:13:56,550
<font color="#E5E5E5">actually check if you try to get</font><font color="#CCCCCC"> access</font>

308
00:13:54,120 --> 00:13:58,470
to the data on<font color="#CCCCCC"> the stack which is slower</font>

309
00:13:56,550 --> 00:14:02,790
than<font color="#CCCCCC"> the bottom of the stack and</font><font color="#E5E5E5"> they've</font>

310
00:13:58,470 --> 00:14:05,190
got some<font color="#E5E5E5"> results from there and ad</font>

311
00:14:02,790 --> 00:14:07,439
modification so it is<font color="#E5E5E5"> applet</font><font color="#CCCCCC"> easy it</font>

312
00:14:05,190 --> 00:14:11,820
should<font color="#CCCCCC"> be unique</font><font color="#E5E5E5"> but some studies show</font>

313
00:14:07,440 --> 00:14:17,790
<font color="#CCCCCC">that they</font><font color="#E5E5E5"> can just modify it and bypass</font>

314
00:14:11,820 --> 00:14:21,630
some security mechanism<font color="#CCCCCC"> term so you can</font>

315
00:14:17,790 --> 00:14:23,550
go to the<font color="#E5E5E5"> first very simple attack all</font>

316
00:14:21,630 --> 00:14:25,800
we have<font color="#E5E5E5"> now</font><font color="#CCCCCC"> is just a number down like</font>

317
00:14:23,550 --> 00:14:28,829
been shown before<font color="#E5E5E5"> you can do type</font>

318
00:14:25,800 --> 00:14:30,420
<font color="#E5E5E5">infusion</font><font color="#CCCCCC"> you can get</font><font color="#E5E5E5"> access to out of</font>

319
00:14:28,830 --> 00:14:33,060
bounds and<font color="#E5E5E5"> you could read memory of</font>

320
00:14:30,420 --> 00:14:35,209
other applets but you don't actually

321
00:14:33,060 --> 00:14:38,189
know<font color="#CCCCCC"> anything about implementation</font>

322
00:14:35,210 --> 00:14:41,370
because Java code specification<font color="#CCCCCC"> only</font>

323
00:14:38,190 --> 00:14:43,470
says<font color="#E5E5E5"> about interfaces it doesn't say</font>

324
00:14:41,370 --> 00:14:46,620
about an API but it doesn't say about

325
00:14:43,470 --> 00:14:48,810
internal implementation<font color="#E5E5E5"> of the Java code</font>

326
00:14:46,620 --> 00:14:52,380
runtime environment<font color="#CCCCCC"> and it</font><font color="#E5E5E5"> can actually</font>

327
00:14:48,810 --> 00:14:54,689
<font color="#E5E5E5">do</font><font color="#CCCCCC"> anything</font><font color="#E5E5E5"> there and so what you can do</font>

328
00:14:52,380 --> 00:14:56,730
here at this point<font color="#E5E5E5"> I want to to demo</font>

329
00:14:54,690 --> 00:14:58,110
here but then I thought<font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> it's not</font>

330
00:14:56,730 --> 00:15:01,380
<font color="#E5E5E5">going to work although it works all the</font>

331
00:14:58,110 --> 00:15:04,560
time<font color="#E5E5E5"> yeah but so you can just see how it</font>

332
00:15:01,380 --> 00:15:06,450
works here<font color="#CCCCCC"> you have card and have</font>

333
00:15:04,560 --> 00:15:08,369
malicious tablet you have<font color="#E5E5E5"> been able in</font>

334
00:15:06,450 --> 00:15:12,090
<font color="#E5E5E5">tablet and you have</font><font color="#CCCCCC"> deskey and</font>

335
00:15:08,370 --> 00:15:15,690
encryption data and you can<font color="#E5E5E5"> make a</font>

336
00:15:12,090 --> 00:15:17,760
<font color="#E5E5E5">simple script so malicious applet can</font>

337
00:15:15,690 --> 00:15:20,930
read<font color="#E5E5E5"> memory on the offset you provide</font>

338
00:15:17,760 --> 00:15:24,660
with an offset<font color="#E5E5E5"> it returns you 256 bytes</font>

339
00:15:20,930 --> 00:15:26,760
and benevolent<font color="#CCCCCC"> applet is just your Bank</font>

340
00:15:24,660 --> 00:15:30,740
applet or any other plate which has a

341
00:15:26,760 --> 00:15:32,569
<font color="#CCCCCC">DES key</font><font color="#E5E5E5"> and it can encrypt data</font>

342
00:15:30,740 --> 00:15:34,880
although it looks somewhat artificial

343
00:15:32,570 --> 00:15:37,580
<font color="#CCCCCC">it's quite</font><font color="#E5E5E5"> common in real life when you</font>

344
00:15:34,880 --> 00:15:39,920
have<font color="#E5E5E5"> kind of mutual authentication or</font>

345
00:15:37,580 --> 00:15:42,620
something<font color="#E5E5E5"> like this then</font><font color="#CCCCCC"> you have a</font>

346
00:15:39,920 --> 00:15:44,060
benevolent<font color="#CCCCCC"> applet</font><font color="#E5E5E5"> it takes your</font>

347
00:15:42,620 --> 00:15:47,029
challenge or it<font color="#CCCCCC"> takes your knowns</font><font color="#E5E5E5"> and</font>

348
00:15:44,060 --> 00:15:50,959
then<font color="#CCCCCC"> you're done see result so all it</font>

349
00:15:47,029 --> 00:15:53,510
does<font color="#E5E5E5"> it</font><font color="#CCCCCC"> just includes</font><font color="#E5E5E5"> data and malicious</font>

350
00:15:50,959 --> 00:15:57,229
applet can just read out the memory<font color="#E5E5E5"> so</font>

351
00:15:53,510 --> 00:16:00,230
what it does<font color="#CCCCCC"> so this is malicious tablet</font>

352
00:15:57,230 --> 00:16:05,990
I hope you can see here<font color="#E5E5E5"> it can select an</font>

353
00:16:00,230 --> 00:16:07,940
applet and<font color="#CCCCCC"> then read out memory and for</font>

354
00:16:05,990 --> 00:16:10,310
malicious<font color="#E5E5E5"> for benevolent</font><font color="#CCCCCC"> applet you can</font>

355
00:16:07,940 --> 00:16:13,390
just<font color="#E5E5E5"> also select this one</font><font color="#CCCCCC"> send the data</font>

356
00:16:10,310 --> 00:16:15,619
<font color="#CCCCCC">eight bytes</font><font color="#E5E5E5"> and get a</font><font color="#CCCCCC"> cipher text and</font>

357
00:16:13,390 --> 00:16:17,360
this attack<font color="#E5E5E5"> is quite nice because you</font>

358
00:16:15,620 --> 00:16:19,550
don't<font color="#E5E5E5"> have to have any knowledge about</font>

359
00:16:17,360 --> 00:16:21,860
internal structure of<font color="#CCCCCC"> the data you can</font>

360
00:16:19,550 --> 00:16:24,439
<font color="#CCCCCC">just get the cipher text of the</font>

361
00:16:21,860 --> 00:16:27,320
encryption<font color="#E5E5E5"> and then try all possible get</font>

362
00:16:24,440 --> 00:16:29,630
member down try all possible<font color="#E5E5E5"> eight bytes</font>

363
00:16:27,320 --> 00:16:31,760
<font color="#CCCCCC">in</font><font color="#E5E5E5"> the memory and hope that they store</font>

364
00:16:29,630 --> 00:16:35,660
key in the plaintext<font color="#CCCCCC"> and maybe you can</font>

365
00:16:31,760 --> 00:16:39,709
see<font color="#E5E5E5"> this and so this dump I got from</font>

366
00:16:35,660 --> 00:16:41,240
this card and you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> here see</font><font color="#CCCCCC"> that just</font>

367
00:16:39,709 --> 00:16:43,010
joining<font color="#E5E5E5"> the old possible combination</font>

368
00:16:41,240 --> 00:16:47,930
just<font color="#E5E5E5"> doing boot force on the keys on the</font>

369
00:16:43,010 --> 00:16:50,420
<font color="#CCCCCC">memory</font><font color="#E5E5E5"> dump it found the key here</font><font color="#CCCCCC"> and</font>

370
00:16:47,930 --> 00:16:55,370
<font color="#E5E5E5">also so benevolent applet also has a</font>

371
00:16:50,420 --> 00:16:57,709
<font color="#E5E5E5">eight byte 0</font><font color="#CCCCCC"> 7 7</font><font color="#E5E5E5"> byte array and you</font><font color="#CCCCCC"> can</font>

372
00:16:55,370 --> 00:17:00,970
see<font color="#E5E5E5"> it start the same way</font><font color="#CCCCCC"> and if you</font>

373
00:16:57,709 --> 00:17:03,619
<font color="#E5E5E5">compare metadata of the key object and</font>

374
00:17:00,970 --> 00:17:06,199
byte array they<font color="#E5E5E5"> actually have the same</font>

375
00:17:03,620 --> 00:17:08,839
metadata so essentially on this card

376
00:17:06,199 --> 00:17:12,160
what they do<font color="#E5E5E5"> this secure key container</font>

377
00:17:08,839 --> 00:17:15,470
is just<font color="#CCCCCC"> the byte</font><font color="#E5E5E5"> array and nothing else</font>

378
00:17:12,160 --> 00:17:16,699
<font color="#E5E5E5">so as a</font><font color="#CCCCCC"> developer you never know how its</font>

379
00:17:15,470 --> 00:17:18,620
implemented on the<font color="#E5E5E5"> card</font><font color="#CCCCCC"> because you</font>

380
00:17:16,699 --> 00:17:21,230
don't get source code or something<font color="#E5E5E5"> of</font>

381
00:17:18,619 --> 00:17:24,800
what's happening<font color="#E5E5E5"> there</font><font color="#CCCCCC"> but on this card</font>

382
00:17:21,230 --> 00:17:26,420
<font color="#E5E5E5">when you use this container when you put</font>

383
00:17:24,800 --> 00:17:29,030
your key there any hope that<font color="#E5E5E5"> is stored</font>

384
00:17:26,420 --> 00:17:33,440
securely<font color="#E5E5E5"> it's actually just a byte array</font>

385
00:17:29,030 --> 00:17:35,420
<font color="#CCCCCC">which sort your key in a plaintext</font><font color="#E5E5E5"> so</font>

386
00:17:33,440 --> 00:17:39,429
this is quite simple<font color="#E5E5E5"> because you can</font>

387
00:17:35,420 --> 00:17:41,510
<font color="#E5E5E5">just try this and see</font><font color="#CCCCCC"> how the</font><font color="#E5E5E5"> it isn't</font>

388
00:17:39,429 --> 00:17:43,669
represented in memory<font color="#CCCCCC"> you don't have to</font>

389
00:17:41,510 --> 00:17:44,210
have any knowledge about how<font color="#CCCCCC"> to working</font>

390
00:17:43,669 --> 00:17:47,120
on<font color="#CCCCCC"> the car</font>

391
00:17:44,210 --> 00:17:48,830
you just drawn<font color="#CCCCCC"> it</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> you see the key of</font>

392
00:17:47,120 --> 00:17:51,020
course<font color="#CCCCCC"> if the key</font><font color="#E5E5E5"> is encrypted you try</font>

393
00:17:48,830 --> 00:17:55,309
this and<font color="#CCCCCC"> you</font><font color="#E5E5E5"> get nothing</font><font color="#CCCCCC"> and you don't</font>

394
00:17:51,020 --> 00:17:57,889
know anything<font color="#E5E5E5"> about this</font><font color="#CCCCCC"> so from now</font>

395
00:17:55,309 --> 00:17:59,899
we'll talk<font color="#E5E5E5"> about what is happening</font><font color="#CCCCCC"> on</font>

396
00:17:57,890 --> 00:18:02,149
more protected cars<font color="#CCCCCC"> so there are also</font>

397
00:17:59,899 --> 00:18:07,699
<font color="#CCCCCC">cards</font><font color="#E5E5E5"> which actually encrypt data so</font>

398
00:18:02,149 --> 00:18:10,729
they have this<font color="#CCCCCC"> des</font><font color="#E5E5E5"> key +</font><font color="#CCCCCC"> F is</font><font color="#E5E5E5"> key</font><font color="#CCCCCC"> they</font>

399
00:18:07,700 --> 00:18:13,070
have our psyche they have owner pin<font color="#CCCCCC"> so</font>

400
00:18:10,730 --> 00:18:15,169
<font color="#E5E5E5">keys they just used to put a key there</font>

401
00:18:13,070 --> 00:18:18,289
<font color="#E5E5E5">you can use set key and you provide it</font>

402
00:18:15,169 --> 00:18:22,010
with a byte array<font color="#E5E5E5"> and it stores the key</font>

403
00:18:18,289 --> 00:18:25,129
and<font color="#CCCCCC"> you can use gate key and get key</font>

404
00:18:22,010 --> 00:18:26,779
your chance to plaintext of your key<font color="#E5E5E5"> so</font>

405
00:18:25,130 --> 00:18:28,640
you can put<font color="#CCCCCC"> Italy there you can get a</font>

406
00:18:26,779 --> 00:18:31,610
<font color="#E5E5E5">plaintext back and you can use</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> to</font>

407
00:18:28,640 --> 00:18:34,370
encrypt it just to pass it<font color="#CCCCCC"> to encrypt</font>

408
00:18:31,610 --> 00:18:39,549
function to do<font color="#E5E5E5"> final and then you get</font>

409
00:18:34,370 --> 00:18:42,500
the result<font color="#CCCCCC"> and</font><font color="#E5E5E5"> there's also on a pin</font>

410
00:18:39,549 --> 00:18:44,539
<font color="#CCCCCC">class it has</font><font color="#E5E5E5"> update method so you can</font>

411
00:18:42,500 --> 00:18:46,789
put your<font color="#E5E5E5"> key you can set a number of</font>

412
00:18:44,539 --> 00:18:49,669
tries you can do<font color="#CCCCCC"> check so</font><font color="#E5E5E5"> you provide it</font>

413
00:18:46,789 --> 00:18:55,820
with a byte array<font color="#CCCCCC"> and you</font><font color="#E5E5E5"> get a result</font>

414
00:18:49,669 --> 00:18:58,510
<font color="#CCCCCC">and some other interfaces as well so all</font>

415
00:18:55,820 --> 00:19:01,370
<font color="#E5E5E5">of these defined in the Java card API</font>

416
00:18:58,510 --> 00:19:04,700
although there<font color="#E5E5E5"> is no specification</font><font color="#CCCCCC"> on</font>

417
00:19:01,370 --> 00:19:06,439
internet with<font color="#E5E5E5"> implementation of the of</font>

418
00:19:04,700 --> 00:19:09,080
these<font color="#E5E5E5"> containers so you don't know how</font>

419
00:19:06,440 --> 00:19:12,860
it's happening<font color="#CCCCCC"> and there was no studies</font>

420
00:19:09,080 --> 00:19:15,439
when we started in<font color="#E5E5E5"> my 2016</font><font color="#CCCCCC"> there were no</font>

421
00:19:12,860 --> 00:19:17,059
published<font color="#E5E5E5"> studied on studies published</font>

422
00:19:15,440 --> 00:19:19,220
on this<font color="#E5E5E5"> one</font><font color="#CCCCCC"> in search of the secret</font>

423
00:19:17,059 --> 00:19:21,440
containers only one card<font color="#E5E5E5"> mentioned</font><font color="#CCCCCC"> that</font>

424
00:19:19,220 --> 00:19:23,120
on<font color="#E5E5E5"> the card they studied it wasn't in</font>

425
00:19:21,440 --> 00:19:25,039
plain text<font color="#CCCCCC"> so they thought maybe it's</font>

426
00:19:23,120 --> 00:19:27,799
nice to encrypt the keys or do<font color="#E5E5E5"> something</font>

427
00:19:25,039 --> 00:19:31,279
about<font color="#E5E5E5"> it but here also that even</font>

428
00:19:27,799 --> 00:19:35,960
encryption sometimes doesn't help<font color="#E5E5E5"> not</font>

429
00:19:31,279 --> 00:19:38,630
all the<font color="#E5E5E5"> time</font><font color="#CCCCCC"> we can start with</font><font color="#E5E5E5"> the owner</font>

430
00:19:35,960 --> 00:19:41,299
<font color="#E5E5E5">pin attack so owner pin is a class which</font>

431
00:19:38,630 --> 00:19:44,809
provides you with<font color="#CCCCCC"> a</font><font color="#E5E5E5"> implementation and</font>

432
00:19:41,299 --> 00:19:46,789
you can store<font color="#CCCCCC"> it in there and it's</font>

433
00:19:44,809 --> 00:19:49,668
supposed to<font color="#E5E5E5"> be safe and on one of the</font>

434
00:19:46,789 --> 00:19:52,039
cards<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can see the memory</font>

435
00:19:49,669 --> 00:19:53,750
representation<font color="#E5E5E5"> of this object when we've</font>

436
00:19:52,039 --> 00:19:57,650
got<font color="#E5E5E5"> the dump who can just see how it's</font>

437
00:19:53,750 --> 00:20:02,390
implemented<font color="#E5E5E5"> that one was for this</font>

438
00:19:57,650 --> 00:20:04,070
<font color="#E5E5E5">a bite for a digit pin and we don't</font>

439
00:20:02,390 --> 00:20:05,510
actually<font color="#E5E5E5"> know</font><font color="#CCCCCC"> what this metadata is it's</font>

440
00:20:04,070 --> 00:20:08,840
hard to figure<font color="#E5E5E5"> out because you don't</font>

441
00:20:05,510 --> 00:20:11,930
<font color="#E5E5E5">know the source code but</font><font color="#CCCCCC"> what we can see</font>

442
00:20:08,840 --> 00:20:13,970
<font color="#CCCCCC">here that</font><font color="#E5E5E5"> we've said that our maximum</font>

443
00:20:11,930 --> 00:20:17,570
<font color="#CCCCCC">number of tries is three</font><font color="#E5E5E5"> and it says</font>

444
00:20:13,970 --> 00:20:20,120
<font color="#E5E5E5">three and we said we tried one false</font>

445
00:20:17,570 --> 00:20:22,520
attempt and we have<font color="#CCCCCC"> number of tries left</font>

446
00:20:20,120 --> 00:20:26,030
<font color="#CCCCCC">too</font><font color="#E5E5E5"> and if you try one more the wrong</font>

447
00:20:22,520 --> 00:20:27,800
pin will get one here and so<font color="#CCCCCC"> we can just</font>

448
00:20:26,030 --> 00:20:31,340
modify<font color="#E5E5E5"> this value and hope that we can</font>

449
00:20:27,800 --> 00:20:32,990
try more times<font color="#CCCCCC"> to enter the</font><font color="#E5E5E5"> pin so</font>

450
00:20:31,340 --> 00:20:34,280
that's what I've done<font color="#E5E5E5"> first I thought I</font>

451
00:20:32,990 --> 00:20:37,130
can just<font color="#E5E5E5"> change this value to other</font>

452
00:20:34,280 --> 00:20:39,950
value but the card<font color="#E5E5E5"> stopped</font><font color="#CCCCCC"> responding</font>

453
00:20:37,130 --> 00:20:43,580
<font color="#E5E5E5">and it just breaks and the point is you</font>

454
00:20:39,950 --> 00:20:45,680
can<font color="#CCCCCC"> see here we have</font><font color="#E5E5E5"> FC</font><font color="#CCCCCC"> + 0 3 FD + 0</font><font color="#E5E5E5"> 2</font>

455
00:20:43,580 --> 00:20:48,050
so<font color="#E5E5E5"> these values are just</font><font color="#CCCCCC"> complementary</font>

456
00:20:45,680 --> 00:20:52,040
<font color="#E5E5E5">you have</font><font color="#CCCCCC"> two values if you solve them</font>

457
00:20:48,050 --> 00:20:53,960
you get<font color="#E5E5E5"> F</font><font color="#CCCCCC"> yeah it's hard</font><font color="#E5E5E5"> to tell why it</font>

458
00:20:52,040 --> 00:20:56,139
is<font color="#CCCCCC"> like this but it looks like they try</font>

459
00:20:53,960 --> 00:20:58,430
to protect against fault injection

460
00:20:56,140 --> 00:21:01,210
<font color="#E5E5E5">because</font><font color="#CCCCCC"> if you do fault injection when</font>

461
00:20:58,430 --> 00:21:03,620
you<font color="#E5E5E5"> process it being here</font><font color="#CCCCCC"> you would get</font>

462
00:21:01,210 --> 00:21:07,790
<font color="#CCCCCC">random value if you</font><font color="#E5E5E5"> manage to do fault</font>

463
00:21:03,620 --> 00:21:10,219
injection properly<font color="#E5E5E5"> and if this value is</font>

464
00:21:07,790 --> 00:21:13,820
random then<font color="#E5E5E5"> you can try more times on</font>

465
00:21:10,220 --> 00:21:18,710
average maybe get like 56 or<font color="#E5E5E5"> 77 half</font>

466
00:21:13,820 --> 00:21:20,960
tries so to prevent<font color="#E5E5E5"> this they use this</font>

467
00:21:18,710 --> 00:21:23,090
extra value and they store<font color="#E5E5E5"> complementary</font>

468
00:21:20,960 --> 00:21:25,670
values and it is very<font color="#CCCCCC"> difficult</font><font color="#E5E5E5"> to get</font>

469
00:21:23,090 --> 00:21:29,209
random<font color="#CCCCCC"> two values be correct and be</font>

470
00:21:25,670 --> 00:21:30,260
<font color="#CCCCCC">complementary and that's why it could</font><font color="#E5E5E5"> be</font>

471
00:21:29,210 --> 00:21:32,870
a good<font color="#CCCCCC"> protection against fault</font>

472
00:21:30,260 --> 00:21:34,670
injection<font color="#E5E5E5"> but once you figure it out it</font>

473
00:21:32,870 --> 00:21:36,979
doesn't help against logical attacks

474
00:21:34,670 --> 00:21:39,170
because for us<font color="#E5E5E5"> we can modify memory you</font>

475
00:21:36,980 --> 00:21:42,740
can change this one<font color="#E5E5E5"> to whatever want and</font>

476
00:21:39,170 --> 00:21:46,280
<font color="#E5E5E5">this one to whatever one so what have</font>

477
00:21:42,740 --> 00:21:50,570
done<font color="#E5E5E5"> we change this</font><font color="#CCCCCC"> to bigger values and</font>

478
00:21:46,280 --> 00:21:52,970
we try<font color="#E5E5E5"> to get the pin that's how it</font>

479
00:21:50,570 --> 00:21:55,730
looks you<font color="#E5E5E5"> have malicious applet</font><font color="#CCCCCC"> and you</font>

480
00:21:52,970 --> 00:21:57,950
have a benevolent applet here and when I

481
00:21:55,730 --> 00:22:01,040
want applet has an<font color="#E5E5E5"> owner pin and you can</font>

482
00:21:57,950 --> 00:22:03,440
<font color="#CCCCCC">do check it's like your bank applet you</font>

483
00:22:01,040 --> 00:22:05,330
and you put your card in the<font color="#CCCCCC"> Machine and</font>

484
00:22:03,440 --> 00:22:09,710
<font color="#CCCCCC">you</font><font color="#E5E5E5"> enter a pin and get</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> result if it's</font>

485
00:22:05,330 --> 00:22:11,549
correct Iran but malicious app malicious

486
00:22:09,710 --> 00:22:14,369
applet allows you to modify

487
00:22:11,549 --> 00:22:16,350
memory<font color="#E5E5E5"> and change the number</font><font color="#CCCCCC"> of tries</font><font color="#E5E5E5"> so</font>

488
00:22:14,369 --> 00:22:18,539
what you do here<font color="#E5E5E5"> you corrupt memory you</font>

489
00:22:16,350 --> 00:22:20,610
send a certain number<font color="#E5E5E5"> of tries to higher</font>

490
00:22:18,539 --> 00:22:25,019
value and then<font color="#E5E5E5"> you can just put force</font>

491
00:22:20,610 --> 00:22:26,729
all 10,000 possible pins<font color="#CCCCCC"> and we managed</font>

492
00:22:25,019 --> 00:22:28,019
<font color="#CCCCCC">to put force between and get</font><font color="#E5E5E5"> four-digit</font>

493
00:22:26,730 --> 00:22:30,989
<font color="#E5E5E5">pin in 15 minutes</font>

494
00:22:28,019 --> 00:22:38,129
so it is quite<font color="#E5E5E5"> simple and doesn't take</font>

495
00:22:30,989 --> 00:22:42,539
much time so now<font color="#E5E5E5"> we got pin from</font><font color="#CCCCCC"> the</font>

496
00:22:38,129 --> 00:22:44,100
<font color="#E5E5E5">protected card it could be could make</font>

497
00:22:42,539 --> 00:22:47,399
sense to mention that on this<font color="#E5E5E5"> card on</font>

498
00:22:44,100 --> 00:22:51,149
the less protected card<font color="#E5E5E5"> they don't</font>

499
00:22:47,399 --> 00:22:52,949
encrypt<font color="#CCCCCC"> the keys</font><font color="#E5E5E5"> they store</font><font color="#CCCCCC"> pins also in</font>

500
00:22:51,149 --> 00:22:55,379
<font color="#CCCCCC">a plain</font><font color="#E5E5E5"> text in the by</font><font color="#CCCCCC"> dre</font><font color="#E5E5E5"> and they</font>

501
00:22:52,950 --> 00:22:57,299
<font color="#E5E5E5">store next</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> it some values also invite</font>

502
00:22:55,379 --> 00:22:59,369
erase number of tries and<font color="#CCCCCC"> max and</font><font color="#E5E5E5"> number</font>

503
00:22:57,299 --> 00:23:02,070
<font color="#E5E5E5">of tries so for this card it doesn't</font>

504
00:22:59,369 --> 00:23:04,139
<font color="#E5E5E5">make any sense to do any kind of</font><font color="#CCCCCC"> list</font>

505
00:23:02,070 --> 00:23:06,269
attacks<font color="#E5E5E5"> just get a dump and you get the</font>

506
00:23:04,139 --> 00:23:07,859
you<font color="#E5E5E5"> know anything but even if it's</font>

507
00:23:06,269 --> 00:23:12,960
protected you can see that it could<font color="#E5E5E5"> be</font>

508
00:23:07,859 --> 00:23:16,019
bypassed<font color="#E5E5E5"> anyway so further</font><font color="#CCCCCC"> des key we</font>

509
00:23:12,960 --> 00:23:20,820
have<font color="#CCCCCC"> des</font><font color="#E5E5E5"> key object and you can see here</font>

510
00:23:16,019 --> 00:23:23,129
you have<font color="#E5E5E5"> get key method and you have set</font>

511
00:23:20,820 --> 00:23:25,200
key method and it says here<font color="#E5E5E5"> in the</font>

512
00:23:23,129 --> 00:23:28,139
specification<font color="#CCCCCC"> that you get</font><font color="#E5E5E5"> plaintext</font>

513
00:23:25,200 --> 00:23:32,369
back<font color="#E5E5E5"> if you have a</font><font color="#CCCCCC"> get key if you call</font>

514
00:23:28,139 --> 00:23:35,639
the get key method<font color="#E5E5E5"> on the card we've</font>

515
00:23:32,369 --> 00:23:38,668
studied<font color="#E5E5E5"> on the protected card the key</font>

516
00:23:35,639 --> 00:23:40,769
start it has similar data structure not

517
00:23:38,669 --> 00:23:43,320
<font color="#E5E5E5">exactly the same like this it's a bit</font>

518
00:23:40,769 --> 00:23:45,149
shorter but<font color="#E5E5E5"> it</font><font color="#CCCCCC"> you couldn't</font><font color="#E5E5E5"> see the key</font>

519
00:23:43,320 --> 00:23:49,739
so we assume that<font color="#E5E5E5"> it</font><font color="#CCCCCC"> is encrypted</font>

520
00:23:45,149 --> 00:23:51,719
<font color="#E5E5E5">somehow and we try to get it out of the</font>

521
00:23:49,739 --> 00:23:54,029
card so what have done<font color="#CCCCCC"> we have a</font>

522
00:23:51,720 --> 00:23:58,559
malicious<font color="#E5E5E5"> applet and we create some</font>

523
00:23:54,029 --> 00:24:00,869
dummy object<font color="#E5E5E5"> with the key</font><font color="#CCCCCC"> des key</font><font color="#E5E5E5"> and so</font>

524
00:23:58,559 --> 00:24:03,450
it is stored encrypted there if we

525
00:24:00,869 --> 00:24:05,459
change our key we<font color="#CCCCCC"> can see that some part</font>

526
00:24:03,450 --> 00:24:10,019
<font color="#E5E5E5">of the data structure also changes 10</font>

527
00:24:05,460 --> 00:24:11,970
bytes actually and then we have

528
00:24:10,019 --> 00:24:14,159
benevolent applet<font color="#E5E5E5"> and they have their</font>

529
00:24:11,970 --> 00:24:15,989
<font color="#CCCCCC">own secret key we cannot we can get</font>

530
00:24:14,159 --> 00:24:19,080
<font color="#E5E5E5">ciphertext off but we cannot get the key</font>

531
00:24:15,989 --> 00:24:23,419
itself so what we tried we took<font color="#E5E5E5"> this</font>

532
00:24:19,080 --> 00:24:25,260
ciphertext<font color="#CCCCCC"> and we copied</font><font color="#E5E5E5"> it to our own</font>

533
00:24:23,419 --> 00:24:27,809
domain object

534
00:24:25,260 --> 00:24:30,120
and what<font color="#CCCCCC"> we hope here when I call</font><font color="#E5E5E5"> get</font>

535
00:24:27,809 --> 00:24:34,350
<font color="#E5E5E5">key method we get the plain text</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

536
00:24:30,120 --> 00:24:36,000
key<font color="#E5E5E5"> and of course it is quite a bold</font>

537
00:24:34,350 --> 00:24:38,790
assumption that they use the<font color="#E5E5E5"> same key</font>

538
00:24:36,000 --> 00:24:40,350
for<font color="#CCCCCC"> all the applets on the</font><font color="#E5E5E5"> card but it</font>

539
00:24:38,790 --> 00:24:43,309
happened<font color="#E5E5E5"> to be on</font><font color="#CCCCCC"> this card that they</font>

540
00:24:40,350 --> 00:24:45,709
have exactly this so all the keys

541
00:24:43,309 --> 00:24:47,910
encrypted with<font color="#E5E5E5"> the same master key and</font>

542
00:24:45,710 --> 00:24:51,210
although this is key this key is

543
00:24:47,910 --> 00:24:53,970
different for different cards you can

544
00:24:51,210 --> 00:24:55,950
just decrypt<font color="#E5E5E5"> any data we didn't manage</font>

545
00:24:53,970 --> 00:24:57,780
<font color="#CCCCCC">to</font><font color="#E5E5E5"> find the key though but we</font><font color="#CCCCCC"> can</font>

546
00:24:55,950 --> 00:24:59,940
decrypt any encrypted data using the

547
00:24:57,780 --> 00:25:03,210
master<font color="#E5E5E5"> key just calling the gate key</font>

548
00:24:59,940 --> 00:25:05,220
method<font color="#E5E5E5"> and it doesn't take any time it</font>

549
00:25:03,210 --> 00:25:10,410
takes seconds in you can decrypt data

550
00:25:05,220 --> 00:25:12,990
and then you can just go on with this<font color="#CCCCCC"> so</font>

551
00:25:10,410 --> 00:25:14,730
it happened to be<font color="#CCCCCC"> even simpler than pin</font>

552
00:25:12,990 --> 00:25:17,640
<font color="#E5E5E5">try because there you have</font><font color="#CCCCCC"> to</font>

553
00:25:14,730 --> 00:25:20,400
<font color="#CCCCCC">brute-force for 15 minutes and hope that</font>

554
00:25:17,640 --> 00:25:23,270
the<font color="#CCCCCC"> penis four-digit long if it's added</font>

555
00:25:20,400 --> 00:25:26,610
as<font color="#E5E5E5"> long it's just</font><font color="#CCCCCC"> a too much time</font><font color="#E5E5E5"> but</font>

556
00:25:23,270 --> 00:25:28,559
here you can get<font color="#E5E5E5"> the key easily it would</font>

557
00:25:26,610 --> 00:25:31,709
<font color="#E5E5E5">be nice</font><font color="#CCCCCC"> to do the same with the pin</font>

558
00:25:28,559 --> 00:25:33,629
though<font color="#E5E5E5"> but it is not not</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> easy</font>

559
00:25:31,710 --> 00:25:36,510
because you<font color="#CCCCCC"> don't have this gate key for</font>

560
00:25:33,630 --> 00:25:38,929
<font color="#CCCCCC">bin because pin doesn't have this method</font>

561
00:25:36,510 --> 00:25:45,390
and you cannot call get pin and get the

562
00:25:38,929 --> 00:25:49,049
decrypted pin but we can try something

563
00:25:45,390 --> 00:25:52,230
<font color="#E5E5E5">so what we saw if I have a pin let's say</font>

564
00:25:49,049 --> 00:25:53,790
four-digit pin we also have<font color="#E5E5E5"> 10 digit 10</font>

565
00:25:52,230 --> 00:25:56,490
bytes<font color="#E5E5E5"> which the changing in the</font><font color="#CCCCCC"> data</font>

566
00:25:53,790 --> 00:25:58,350
structure<font color="#E5E5E5"> so when we</font><font color="#CCCCCC"> change our opinion</font>

567
00:25:56,490 --> 00:26:00,990
we store it there you<font color="#E5E5E5"> can see that it</font>

568
00:25:58,350 --> 00:26:03,928
stored someone created and<font color="#E5E5E5"> 10 bytes</font>

569
00:26:00,990 --> 00:26:05,970
change when we change the<font color="#E5E5E5"> pin so maybe</font>

570
00:26:03,929 --> 00:26:09,360
they use the same kind of<font color="#CCCCCC"> encryption for</font>

571
00:26:05,970 --> 00:26:13,410
the pin<font color="#E5E5E5"> and for the key for the DES key</font>

572
00:26:09,360 --> 00:26:15,120
<font color="#CCCCCC">and so we</font><font color="#E5E5E5"> do this 10 bytes which are</font>

573
00:26:13,410 --> 00:26:17,760
<font color="#CCCCCC">changing the ciphertext of the pin from</font>

574
00:26:15,120 --> 00:26:21,299
<font color="#CCCCCC">the pin data structure and we copied it</font>

575
00:26:17,760 --> 00:26:23,309
to the desk key object to the place

576
00:26:21,299 --> 00:26:26,668
where they<font color="#E5E5E5"> store key and then we call</font>

577
00:26:23,309 --> 00:26:28,770
gate key and<font color="#E5E5E5"> well yeah we just got the</font>

578
00:26:26,669 --> 00:26:30,809
pin back would I have to<font color="#E5E5E5"> brute-force it</font>

579
00:26:28,770 --> 00:26:33,870
now<font color="#CCCCCC"> which does can get the decryption of</font>

580
00:26:30,809 --> 00:26:35,070
our pin start on the<font color="#E5E5E5"> card and it is the</font>

581
00:26:33,870 --> 00:26:37,168
most protected card<font color="#CCCCCC"> wing card</font>

582
00:26:35,070 --> 00:26:38,820
<font color="#E5E5E5">encountered because</font><font color="#CCCCCC"> most of the</font><font color="#E5E5E5"> cards</font>

583
00:26:37,169 --> 00:26:41,010
will have they<font color="#CCCCCC"> just</font>

584
00:26:38,820 --> 00:26:42,419
have it in a plain text<font color="#CCCCCC"> but you can see</font>

585
00:26:41,010 --> 00:26:44,340
when I have<font color="#E5E5E5"> encryption</font>

586
00:26:42,420 --> 00:26:47,580
it doesn't<font color="#E5E5E5"> actually help my chain ring</font>

587
00:26:44,340 --> 00:26:49,560
<font color="#CCCCCC">and it is</font><font color="#E5E5E5"> very</font><font color="#CCCCCC"> difficult</font><font color="#E5E5E5"> to prevent this</font>

588
00:26:47,580 --> 00:26:53,699
kind<font color="#E5E5E5"> of attacks</font><font color="#CCCCCC"> although you can somehow</font>

589
00:26:49,560 --> 00:26:55,770
prevent this kind of bypass so you

590
00:26:53,700 --> 00:26:58,320
cannot decrypt it you can use some key

591
00:26:55,770 --> 00:26:59,580
different device reputation<font color="#E5E5E5"> and</font><font color="#CCCCCC"> kin you</font>

592
00:26:58,320 --> 00:27:01,980
can use<font color="#CCCCCC"> different keys for different</font>

593
00:26:59,580 --> 00:27:03,570
applets so this one uses master key one

594
00:27:01,980 --> 00:27:06,240
<font color="#CCCCCC">and</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> my sake - or something like</font>

595
00:27:03,570 --> 00:27:08,429
this<font color="#E5E5E5"> but it is difficult to do if you</font>

596
00:27:06,240 --> 00:27:11,610
have the full access<font color="#E5E5E5"> to the memory to</font>

597
00:27:08,430 --> 00:27:14,700
prevent replay attacks<font color="#E5E5E5"> because if you</font>

598
00:27:11,610 --> 00:27:18,990
have pin counter tries even if you have

599
00:27:14,700 --> 00:27:21,090
some kind of<font color="#E5E5E5"> Mac on this data or some</font>

600
00:27:18,990 --> 00:27:23,070
integrity<font color="#E5E5E5"> checks these two can do replay</font>

601
00:27:21,090 --> 00:27:26,389
because<font color="#E5E5E5"> you can just copy data structure</font>

602
00:27:23,070 --> 00:27:26,389
and then put it back<font color="#E5E5E5"> later</font>

603
00:27:27,980 --> 00:27:35,520
<font color="#E5E5E5">so this is about secret secure</font>

604
00:27:32,310 --> 00:27:37,350
containers<font color="#E5E5E5"> and now talk about different</font>

605
00:27:35,520 --> 00:27:39,870
stuff<font color="#E5E5E5"> because we</font><font color="#CCCCCC"> continued with our</font>

606
00:27:37,350 --> 00:27:43,469
<font color="#E5E5E5">study and we wanted to see what's</font>

607
00:27:39,870 --> 00:27:45,929
happening<font color="#E5E5E5"> with the illegal</font><font color="#CCCCCC"> op</font><font color="#E5E5E5"> codes so</font>

608
00:27:43,470 --> 00:27:49,080
<font color="#CCCCCC">Java card virtual machine specification</font>

609
00:27:45,930 --> 00:27:51,660
says that<font color="#CCCCCC"> by legal legal</font><font color="#E5E5E5"> bytecode they</font>

610
00:27:49,080 --> 00:27:54,990
go from<font color="#CCCCCC"> zero to b8 and</font><font color="#E5E5E5"> also to resolved</font>

611
00:27:51,660 --> 00:27:57,510
<font color="#CCCCCC">Fe nff but all the rest is unspecified</font>

612
00:27:54,990 --> 00:28:00,870
<font color="#E5E5E5">and probably our cards shouldn't do</font>

613
00:27:57,510 --> 00:28:03,120
anything but in real<font color="#CCCCCC"> life some</font><font color="#E5E5E5"> of the</font>

614
00:28:00,870 --> 00:28:05,750
cards they actually do something<font color="#E5E5E5"> when</font>

615
00:28:03,120 --> 00:28:09,870
you<font color="#CCCCCC"> provide with the different values</font>

616
00:28:05,750 --> 00:28:12,360
<font color="#E5E5E5">and also so when I have an instruction</font>

617
00:28:09,870 --> 00:28:17,219
<font color="#CCCCCC">like DF it</font><font color="#E5E5E5"> is unspecified because it's</font>

618
00:28:12,360 --> 00:28:19,500
bigger than<font color="#E5E5E5"> b8 and it can take a number</font>

619
00:28:17,220 --> 00:28:21,720
<font color="#E5E5E5">of bytes from the code so when you start</font>

620
00:28:19,500 --> 00:28:25,290
on<font color="#E5E5E5"> the memory it has a number</font><font color="#CCCCCC"> of bytes</font>

621
00:28:21,720 --> 00:28:27,030
following it and normal instructions you

622
00:28:25,290 --> 00:28:30,210
<font color="#CCCCCC">can see in specification that it let's</font>

623
00:28:27,030 --> 00:28:32,850
say it takes<font color="#CCCCCC"> two following</font><font color="#E5E5E5"> bytes as a</font>

624
00:28:30,210 --> 00:28:35,940
parameter<font color="#E5E5E5"> can also take some data from</font>

625
00:28:32,850 --> 00:28:37,469
stack and then do some do something and

626
00:28:35,940 --> 00:28:41,970
then<font color="#CCCCCC"> put</font><font color="#E5E5E5"> something</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> stack and finish</font>

627
00:28:37,470 --> 00:28:43,710
or put nothing mistake<font color="#CCCCCC"> so in this case</font>

628
00:28:41,970 --> 00:28:45,810
we have the<font color="#CCCCCC"> construction you don't</font>

629
00:28:43,710 --> 00:28:48,290
really<font color="#E5E5E5"> know what how many parameters it</font>

630
00:28:45,810 --> 00:28:51,270
takes so had to<font color="#CCCCCC"> do some tricky stuff</font>

631
00:28:48,290 --> 00:28:52,590
<font color="#E5E5E5">here you see</font><font color="#CCCCCC"> zero-two</font><font color="#E5E5E5"> instruction it</font>

632
00:28:51,270 --> 00:28:56,250
actually puts

633
00:28:52,590 --> 00:28:57,809
them zero on the stack<font color="#E5E5E5"> and when you put</font>

634
00:28:56,250 --> 00:28:59,700
<font color="#E5E5E5">zero on the stack and</font><font color="#CCCCCC"> you have</font><font color="#E5E5E5"> a legal</font>

635
00:28:57,809 --> 00:29:02,010
<font color="#E5E5E5">instruction we see how many zeros on the</font>

636
00:28:59,700 --> 00:29:04,590
<font color="#E5E5E5">stack and there is out and we can figure</font>

637
00:29:02,010 --> 00:29:06,658
<font color="#E5E5E5">out how</font><font color="#CCCCCC"> many parameters it took so if we</font>

638
00:29:04,590 --> 00:29:09,000
got just<font color="#CCCCCC"> two zeros on the stack</font><font color="#E5E5E5"> then</font>

639
00:29:06,659 --> 00:29:12,179
<font color="#E5E5E5">probably this</font><font color="#CCCCCC"> bf instruction takes</font><font color="#E5E5E5"> two</font>

640
00:29:09,000 --> 00:29:14,070
by<font color="#CCCCCC"> its falling</font><font color="#E5E5E5"> if I have four zeros on</font>

641
00:29:12,179 --> 00:29:17,610
<font color="#CCCCCC">the stack then we have it takes no</font>

642
00:29:14,070 --> 00:29:19,860
parameters and so on<font color="#CCCCCC"> it took very long</font>

643
00:29:17,610 --> 00:29:21,360
time to do something<font color="#E5E5E5"> about this</font><font color="#CCCCCC"> you</font>

644
00:29:19,860 --> 00:29:24,719
<font color="#E5E5E5">could get the table so you could get</font>

645
00:29:21,360 --> 00:29:25,830
inputs and outputs<font color="#E5E5E5"> and yeah we've got no</font>

646
00:29:24,720 --> 00:29:27,840
clue what it does anyway

647
00:29:25,830 --> 00:29:31,049
<font color="#E5E5E5">because you just see input and output</font>

648
00:29:27,840 --> 00:29:33,270
<font color="#E5E5E5">sometimes</font><font color="#CCCCCC"> instruction takes nothing</font><font color="#E5E5E5"> from</font>

649
00:29:31,049 --> 00:29:36,000
this<font color="#E5E5E5"> tag just takes two parameters and</font>

650
00:29:33,270 --> 00:29:38,779
returns nothing<font color="#E5E5E5"> on stack and</font><font color="#CCCCCC"> you don't</font>

651
00:29:36,000 --> 00:29:38,779
really know what it does

652
00:29:39,059 --> 00:29:45,270
but<font color="#E5E5E5"> we got a bit lucky we had a</font>

653
00:29:42,380 --> 00:29:47,130
simulator of<font color="#CCCCCC"> the same card</font>

654
00:29:45,270 --> 00:29:49,500
quite often<font color="#CCCCCC"> manufacturers provided with</font>

655
00:29:47,130 --> 00:29:51,450
a simulator<font color="#E5E5E5"> which hopefully does exactly</font>

656
00:29:49,500 --> 00:29:55,890
the<font color="#CCCCCC"> same what does it what a guard does</font>

657
00:29:51,450 --> 00:29:58,020
so it just desktop application and of

658
00:29:55,890 --> 00:30:02,490
course you can reverse<font color="#CCCCCC"> it</font><font color="#E5E5E5"> and try to do</font>

659
00:29:58,020 --> 00:30:05,250
something<font color="#E5E5E5"> about it</font><font color="#CCCCCC"> we studied it a bit</font>

660
00:30:02,490 --> 00:30:07,260
and what<font color="#E5E5E5"> we found is that</font><font color="#CCCCCC"> for that</font>

661
00:30:05,250 --> 00:30:10,370
<font color="#E5E5E5">particular card we had it's not really</font>

662
00:30:07,260 --> 00:30:13,470
impressive so essentially what they have

663
00:30:10,370 --> 00:30:19,620
they have extra byte codes like this one

664
00:30:13,470 --> 00:30:22,799
<font color="#CCCCCC">BD b</font><font color="#E5E5E5"> BF c</font><font color="#CCCCCC"> 0 and they implement extension</font>

665
00:30:19,620 --> 00:30:25,908
for the<font color="#CCCCCC"> api</font><font color="#E5E5E5"> so it guy says</font><font color="#CCCCCC"> that there is</font>

666
00:30:22,799 --> 00:30:28,860
<font color="#E5E5E5">a</font><font color="#CCCCCC"> byte code s load</font><font color="#E5E5E5"> 3 and you can load</font>

667
00:30:25,909 --> 00:30:31,799
<font color="#CCCCCC">constant</font><font color="#E5E5E5"> 3 on</font><font color="#CCCCCC"> stack</font><font color="#E5E5E5"> you can load short</font>

668
00:30:28,860 --> 00:30:34,740
but they also have extra instructions

669
00:30:31,799 --> 00:30:36,270
<font color="#E5E5E5">you can load 4 5 6 & 7 in one byte code</font>

670
00:30:34,740 --> 00:30:38,880
otherwise<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> to use two byte codes</font>

671
00:30:36,270 --> 00:30:41,190
and such a way they can save a bit on

672
00:30:38,880 --> 00:30:43,549
the memory but of course you cannot use

673
00:30:41,190 --> 00:30:46,200
it<font color="#CCCCCC"> to attack it</font><font color="#E5E5E5"> in any way so it's not</font>

674
00:30:43,549 --> 00:30:48,000
<font color="#E5E5E5">something we were</font><font color="#CCCCCC"> looking for</font><font color="#E5E5E5"> found</font>

675
00:30:46,200 --> 00:30:54,149
<font color="#E5E5E5">something interesting for instance this</font>

676
00:30:48,000 --> 00:30:57,120
one<font color="#E5E5E5"> C 5</font><font color="#CCCCCC"> byte code</font><font color="#E5E5E5"> there is a</font><font color="#CCCCCC"> gasps</font>

677
00:30:54,149 --> 00:30:58,949
static B instruction and C 5<font color="#CCCCCC"> they're</font>

678
00:30:57,120 --> 00:31:02,280
very<font color="#CCCCCC"> similar they follow the same</font>

679
00:30:58,950 --> 00:31:05,530
routine when you get a trace<font color="#E5E5E5"> but there's</font>

680
00:31:02,280 --> 00:31:07,930
one missing subroutine in 0<font color="#E5E5E5"> C 5</font>

681
00:31:05,530 --> 00:31:10,149
could be some<font color="#E5E5E5"> jerk or something</font><font color="#CCCCCC"> we</font>

682
00:31:07,930 --> 00:31:11,500
didn't<font color="#CCCCCC"> really go further into</font><font color="#E5E5E5"> this it</font>

683
00:31:10,150 --> 00:31:13,540
could<font color="#E5E5E5"> be interesting to study further</font>

684
00:31:11,500 --> 00:31:14,770
but we<font color="#CCCCCC"> didn't have diamond resources for</font>

685
00:31:13,540 --> 00:31:21,040
<font color="#E5E5E5">this we had to stop at some point</font>

686
00:31:14,770 --> 00:31:22,960
<font color="#CCCCCC">they're so illegal</font><font color="#E5E5E5"> opcodes in our view</font>

687
00:31:21,040 --> 00:31:25,330
it's not<font color="#E5E5E5"> really something which can help</font>

688
00:31:22,960 --> 00:31:28,060
you to<font color="#E5E5E5"> hack a</font><font color="#CCCCCC"> card or to break it or to</font>

689
00:31:25,330 --> 00:31:30,159
do something<font color="#CCCCCC"> about security but in some</font>

690
00:31:28,060 --> 00:31:32,110
cases<font color="#CCCCCC"> maybe there</font><font color="#E5E5E5"> is something but it's</font>

691
00:31:30,160 --> 00:31:35,890
also it takes<font color="#E5E5E5"> time</font><font color="#CCCCCC"> to reverse and figure</font>

692
00:31:32,110 --> 00:31:37,929
<font color="#CCCCCC">out what it is and</font><font color="#E5E5E5"> also you have</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> have</font>

693
00:31:35,890 --> 00:31:42,900
a simulator have to be<font color="#E5E5E5"> lucky not all the</font>

694
00:31:37,930 --> 00:31:46,690
<font color="#E5E5E5">cards actually do we can talk about</font>

695
00:31:42,900 --> 00:31:49,630
content measures<font color="#E5E5E5"> so what we saw now some</font>

696
00:31:46,690 --> 00:31:51,040
cards almost<font color="#E5E5E5"> do nothing some other cards</font>

697
00:31:49,630 --> 00:31:53,740
they try to implement some

698
00:31:51,040 --> 00:31:56,290
<font color="#E5E5E5">countermeasures to prevent attacks but</font>

699
00:31:53,740 --> 00:32:00,070
it doesn't<font color="#E5E5E5"> work and sometimes it work</font>

700
00:31:56,290 --> 00:32:03,000
quite<font color="#E5E5E5"> good so the best content measure</font>

701
00:32:00,070 --> 00:32:05,500
<font color="#CCCCCC">so the ones which present allow us to</font>

702
00:32:03,000 --> 00:32:08,590
prevent<font color="#E5E5E5"> most of the attacks is in</font><font color="#CCCCCC"> direct</font>

703
00:32:05,500 --> 00:32:10,780
memory referencing all the cars they

704
00:32:08,590 --> 00:32:13,720
just have reference which actually

705
00:32:10,780 --> 00:32:16,090
pointer<font color="#E5E5E5"> so you get direct pointer to</font>

706
00:32:13,720 --> 00:32:19,210
memory<font color="#E5E5E5"> to physical</font><font color="#CCCCCC"> memory and then you</font>

707
00:32:16,090 --> 00:32:21,370
can just do<font color="#E5E5E5"> some using type confusion</font>

708
00:32:19,210 --> 00:32:23,230
you can do pointer arithmetic and then

709
00:32:21,370 --> 00:32:27,250
you can just get<font color="#E5E5E5"> random access to memory</font>

710
00:32:23,230 --> 00:32:32,050
in modify<font color="#E5E5E5"> metadata and so on but most of</font>

711
00:32:27,250 --> 00:32:34,270
<font color="#E5E5E5">the modern cars cards they have some</font>

712
00:32:32,050 --> 00:32:36,159
<font color="#E5E5E5">kind of referencing table in your</font>

713
00:32:34,270 --> 00:32:38,740
reference is just an index<font color="#E5E5E5"> to this table</font>

714
00:32:36,160 --> 00:32:42,130
<font color="#CCCCCC">and if you do arithmetic you just can go</font>

715
00:32:38,740 --> 00:32:44,050
through the records in the table<font color="#E5E5E5"> but you</font>

716
00:32:42,130 --> 00:32:45,640
cannot get<font color="#E5E5E5"> random access to memory</font><font color="#CCCCCC"> to</font>

717
00:32:44,050 --> 00:32:48,340
somewhere<font color="#CCCCCC"> in the middle of metadata</font><font color="#E5E5E5"> or</font>

718
00:32:45,640 --> 00:32:51,040
something like this<font color="#E5E5E5"> and if it's</font>

719
00:32:48,340 --> 00:32:54,070
<font color="#E5E5E5">implemented properly then it is very</font>

720
00:32:51,040 --> 00:32:56,080
<font color="#CCCCCC">difficult</font><font color="#E5E5E5"> to bypass although on some of</font>

721
00:32:54,070 --> 00:33:00,010
the cards<font color="#CCCCCC"> you can see we had one card we</font>

722
00:32:56,080 --> 00:33:04,240
couldn't break it but they had also<font color="#CCCCCC"> a</font>

723
00:33:00,010 --> 00:33:05,860
reference<font color="#E5E5E5"> table but when you have a big</font>

724
00:33:04,240 --> 00:33:08,170
applet for some reasons they get a

725
00:33:05,860 --> 00:33:13,149
reference<font color="#CCCCCC"> in the table and then this</font>

726
00:33:08,170 --> 00:33:16,360
reference<font color="#E5E5E5"> show points to the data in</font>

727
00:33:13,150 --> 00:33:18,130
there<font color="#CCCCCC"> and some code on the card so we</font>

728
00:33:16,360 --> 00:33:18,840
install a big applet and we get a

729
00:33:18,130 --> 00:33:21,120
<font color="#E5E5E5">reference</font>

730
00:33:18,840 --> 00:33:23,220
and we can modify data<font color="#E5E5E5"> and modify code</font>

731
00:33:21,120 --> 00:33:30,449
and we got our basic code execution the

732
00:33:23,220 --> 00:33:33,960
card<font color="#CCCCCC"> so another one run time type</font><font color="#E5E5E5"> checks</font>

733
00:33:30,450 --> 00:33:35,879
some cards do some kind of type checks

734
00:33:33,960 --> 00:33:38,100
on the card it is difficult to<font color="#E5E5E5"> say how</font>

735
00:33:35,879 --> 00:33:41,219
they do it or if they do full type<font color="#CCCCCC"> check</font>

736
00:33:38,100 --> 00:33:43,769
<font color="#CCCCCC">so</font><font color="#E5E5E5"> only check some of</font><font color="#CCCCCC"> their types or if</font>

737
00:33:41,220 --> 00:33:44,999
they have I<font color="#E5E5E5"> don't know could</font><font color="#CCCCCC"> be anything</font>

738
00:33:43,769 --> 00:33:46,740
<font color="#E5E5E5">because if you don't know the source</font>

739
00:33:44,999 --> 00:33:48,600
code it's hard to tell<font color="#E5E5E5"> but you</font><font color="#CCCCCC"> can see</font>

740
00:33:46,740 --> 00:33:50,249
that you could it's very difficult to do

741
00:33:48,600 --> 00:33:52,549
<font color="#E5E5E5">type</font><font color="#CCCCCC"> confusion discards or it never</font>

742
00:33:50,249 --> 00:33:52,549
<font color="#E5E5E5">works</font>

743
00:33:52,710 --> 00:33:56,940
additional runtime checks<font color="#CCCCCC"> runs us on</font>

744
00:33:54,960 --> 00:33:58,980
some<font color="#E5E5E5"> of the cards they not</font><font color="#CCCCCC"> only check</font>

745
00:33:56,940 --> 00:34:00,809
<font color="#E5E5E5">the number of elements you have but also</font>

746
00:33:58,980 --> 00:34:04,139
they check number of bytes you<font color="#E5E5E5"> access</font>

747
00:34:00,809 --> 00:34:05,629
and you cannot get<font color="#CCCCCC"> out</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> bounds access</font>

748
00:34:04,139 --> 00:34:08,940
because they check number of bytes

749
00:34:05,629 --> 00:34:11,040
<font color="#E5E5E5">physical memory</font><font color="#CCCCCC"> bytes</font>

750
00:34:08,940 --> 00:34:12,750
they've been some publication<font color="#CCCCCC"> that some</font>

751
00:34:11,040 --> 00:34:15,869
of the cards have shadow stack although

752
00:34:12,750 --> 00:34:21,000
I<font color="#E5E5E5"> never encountered all sort in real</font>

753
00:34:15,869 --> 00:34:22,919
life there is a offset which is<font color="#E5E5E5"> also</font>

754
00:34:21,000 --> 00:34:25,710
could<font color="#CCCCCC"> be</font><font color="#E5E5E5"> used to</font><font color="#CCCCCC"> attack I didn't talk</font>

755
00:34:22,918 --> 00:34:28,319
<font color="#E5E5E5">about this before but if</font><font color="#CCCCCC"> you do go to</font>

756
00:34:25,710 --> 00:34:30,510
instruction<font color="#E5E5E5"> in the code you</font><font color="#CCCCCC"> can just</font>

757
00:34:28,319 --> 00:34:33,810
jump to somewhere<font color="#E5E5E5"> you need</font><font color="#CCCCCC"> to you know</font>

758
00:34:30,510 --> 00:34:35,429
give relative offset and specification

759
00:34:33,810 --> 00:34:38,339
says that you should never be able<font color="#CCCCCC"> to</font>

760
00:34:35,429 --> 00:34:41,569
<font color="#E5E5E5">jump</font><font color="#CCCCCC"> outside of the method</font><font color="#E5E5E5"> you executing</font>

761
00:34:38,339 --> 00:34:44,429
but in your<font color="#E5E5E5"> life is quite often you can</font>

762
00:34:41,569 --> 00:34:47,849
jump outside<font color="#E5E5E5"> the method but</font><font color="#CCCCCC"> you cannot</font>

763
00:34:44,429 --> 00:34:50,280
jump<font color="#E5E5E5"> outside</font><font color="#CCCCCC"> the to data or outside the</font>

764
00:34:47,849 --> 00:34:51,540
applet so they do some checks but<font color="#CCCCCC"> it's</font>

765
00:34:50,280 --> 00:34:53,970
still<font color="#E5E5E5"> quite dangerous if you can jump</font>

766
00:34:51,540 --> 00:34:55,829
<font color="#E5E5E5">within your applied you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> jump in the</font>

767
00:34:53,969 --> 00:34:57,509
middle<font color="#E5E5E5"> of their instruction go to</font>

768
00:34:55,829 --> 00:35:01,109
parameters of the instruction it could

769
00:34:57,510 --> 00:35:03,030
execute<font color="#E5E5E5"> anything there although it gets</font>

770
00:35:01,109 --> 00:35:05,339
more<font color="#E5E5E5"> difficult to do this kind of</font>

771
00:35:03,030 --> 00:35:08,579
attacks as<font color="#CCCCCC"> well and there's a very</font>

772
00:35:05,339 --> 00:35:13,859
<font color="#E5E5E5">powerful attack to use get static so get</font>

773
00:35:08,579 --> 00:35:17,010
static<font color="#E5E5E5"> gives you constant constants from</font>

774
00:35:13,859 --> 00:35:18,690
a constant<font color="#E5E5E5"> pool by the given offset but</font>

775
00:35:17,010 --> 00:35:21,660
they don't really<font color="#E5E5E5"> check the offset quite</font>

776
00:35:18,690 --> 00:35:24,240
often so you<font color="#CCCCCC"> have the constant</font><font color="#E5E5E5"> pool and</font>

777
00:35:21,660 --> 00:35:26,670
<font color="#CCCCCC">itself limited size but you can</font><font color="#E5E5E5"> provide</font>

778
00:35:24,240 --> 00:35:29,939
<font color="#CCCCCC">with any short value here and you can</font>

779
00:35:26,670 --> 00:35:32,280
get the shorter bite back so there's get

780
00:35:29,940 --> 00:35:32,940
static<font color="#CCCCCC"> biting get static sort and if you</font>

781
00:35:32,280 --> 00:35:35,339
do this you<font color="#E5E5E5"> can</font>

782
00:35:32,940 --> 00:35:37,200
<font color="#E5E5E5">without the whole memory do the whole</font>

783
00:35:35,339 --> 00:35:40,710
memory<font color="#E5E5E5"> dump and quite a lot of cars</font>

784
00:35:37,200 --> 00:35:42,930
<font color="#E5E5E5">cards allowed to do this so as a</font><font color="#CCCCCC"> result</font>

785
00:35:40,710 --> 00:35:44,790
I had<font color="#E5E5E5"> five different cards from</font>

786
00:35:42,930 --> 00:35:48,118
different manufacturers<font color="#E5E5E5"> who had no cards</font>

787
00:35:44,790 --> 00:35:51,329
<font color="#E5E5E5">but five different two kinds and</font><font color="#CCCCCC"> taught</font>

788
00:35:48,119 --> 00:35:53,940
them<font color="#E5E5E5"> that quite well-protected</font><font color="#CCCCCC"> it is</font>

789
00:35:51,329 --> 00:35:57,000
hard to<font color="#E5E5E5"> tell if they have protected the</font>

790
00:35:53,940 --> 00:35:59,910
implementation or if they encrypt the

791
00:35:57,000 --> 00:36:02,040
key<font color="#CCCCCC"> source and so on but it is</font><font color="#E5E5E5"> difficult</font>

792
00:35:59,910 --> 00:36:03,960
<font color="#E5E5E5">to get</font><font color="#CCCCCC"> to memory</font><font color="#E5E5E5"> access and if you</font>

793
00:36:02,040 --> 00:36:06,630
cannot get a dump you cannot say how

794
00:36:03,960 --> 00:36:08,730
it's blended further<font color="#E5E5E5"> so for three other</font>

795
00:36:06,630 --> 00:36:11,250
types<font color="#E5E5E5"> of cards we managed to get the</font>

796
00:36:08,730 --> 00:36:13,740
dump<font color="#E5E5E5"> and we managed to get the pins and</font>

797
00:36:11,250 --> 00:36:21,240
keys and<font color="#CCCCCC"> so on from all</font><font color="#E5E5E5"> of the cards we</font>

798
00:36:13,740 --> 00:36:24,328
<font color="#CCCCCC">got access to some conclusions so</font>

799
00:36:21,240 --> 00:36:26,970
logical attacks<font color="#E5E5E5"> it should be so simple</font>

800
00:36:24,329 --> 00:36:28,740
<font color="#CCCCCC">and scalable when you can do I'm gonna</font>

801
00:36:26,970 --> 00:36:30,868
<font color="#CCCCCC">have explored you can just be able to</font>

802
00:36:28,740 --> 00:36:32,490
implement to apply it<font color="#E5E5E5"> to any of them but</font>

803
00:36:30,869 --> 00:36:34,109
<font color="#CCCCCC">you can see that</font><font color="#E5E5E5"> most of the attacks</font>

804
00:36:32,490 --> 00:36:37,500
they really<font color="#CCCCCC"> depend on the manufacturer</font>

805
00:36:34,109 --> 00:36:40,200
and on the elimination<font color="#E5E5E5"> if you have an</font>

806
00:36:37,500 --> 00:36:41,819
attack which applies<font color="#E5E5E5"> to one card it will</font>

807
00:36:40,200 --> 00:36:44,399
<font color="#E5E5E5">not probably apply to another one unless</font>

808
00:36:41,819 --> 00:36:46,770
<font color="#CCCCCC">they have similar implementations</font><font color="#E5E5E5"> and it</font>

809
00:36:44,400 --> 00:36:49,970
takes<font color="#E5E5E5"> quite a lot of time to make it</font>

810
00:36:46,770 --> 00:36:52,530
<font color="#E5E5E5">work</font><font color="#CCCCCC"> on other cards or doesn't work ever</font>

811
00:36:49,970 --> 00:36:53,910
<font color="#CCCCCC">sometimes you can see there are cutter</font>

812
00:36:52,530 --> 00:36:58,079
<font color="#E5E5E5">measures like the card we're talking</font>

813
00:36:53,910 --> 00:36:59,879
about<font color="#CCCCCC"> before with a index table they</font>

814
00:36:58,079 --> 00:37:01,589
implemented this table they try to

815
00:36:59,880 --> 00:37:03,240
protect memory but then they have some

816
00:37:01,589 --> 00:37:05,460
<font color="#E5E5E5">kind of bug or it's harder than what</font>

817
00:37:03,240 --> 00:37:07,680
<font color="#E5E5E5">they have but you still get random code</font>

818
00:37:05,460 --> 00:37:11,670
execution<font color="#CCCCCC"> and all the controllers don't</font>

819
00:37:07,680 --> 00:37:14,190
<font color="#E5E5E5">actually matter they're secured</font>

820
00:37:11,670 --> 00:37:15,990
containers<font color="#CCCCCC"> most of the cards</font><font color="#E5E5E5"> they don't</font>

821
00:37:14,190 --> 00:37:17,550
<font color="#CCCCCC">actually bother to encrypt to do</font>

822
00:37:15,990 --> 00:37:19,410
something about<font color="#E5E5E5"> it they</font><font color="#CCCCCC"> just are</font>

823
00:37:17,550 --> 00:37:22,500
<font color="#CCCCCC">plaintext they use byte arrays like</font><font color="#E5E5E5"> you</font>

824
00:37:19,410 --> 00:37:24,779
can the same<font color="#CCCCCC"> way and you</font><font color="#E5E5E5"> never know as a</font>

825
00:37:22,500 --> 00:37:30,540
developer<font color="#CCCCCC"> how it's actually</font><font color="#E5E5E5"> working on</font>

826
00:37:24,780 --> 00:37:33,000
<font color="#E5E5E5">your card if you have encryption of the</font>

827
00:37:30,540 --> 00:37:35,279
<font color="#E5E5E5">keys when it's encrypted what we saw is</font>

828
00:37:33,000 --> 00:37:37,079
that<font color="#E5E5E5"> it's quite</font><font color="#CCCCCC"> easy to get to decrypt</font>

829
00:37:35,280 --> 00:37:38,730
<font color="#CCCCCC">it because when I have full memory</font>

830
00:37:37,079 --> 00:37:39,869
<font color="#CCCCCC">dumped</font><font color="#E5E5E5"> when you can get</font><font color="#CCCCCC"> access to the</font>

831
00:37:38,730 --> 00:37:41,400
memory<font color="#E5E5E5"> although it's not</font><font color="#CCCCCC"> the whole</font>

832
00:37:39,869 --> 00:37:43,890
memory<font color="#E5E5E5"> of the card it</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> have from</font>

833
00:37:41,400 --> 00:37:46,510
memory and<font color="#CCCCCC"> its source virtual machine in</font>

834
00:37:43,890 --> 00:37:52,359
the room but you<font color="#E5E5E5"> quite often can get</font>

835
00:37:46,510 --> 00:37:55,000
<font color="#E5E5E5">kiss and do a lot</font><font color="#CCCCCC"> of cheek attacks this</font>

836
00:37:52,360 --> 00:37:58,870
<font color="#E5E5E5">is quite</font><font color="#CCCCCC"> interesting so</font><font color="#E5E5E5"> we found one</font>

837
00:37:55,000 --> 00:38:00,880
card and it has<font color="#E5E5E5"> physical contaminator so</font>

838
00:37:58,870 --> 00:38:03,490
we try<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> illegal op</font><font color="#E5E5E5"> codes on that</font>

839
00:38:00,880 --> 00:38:05,620
<font color="#CCCCCC">card and when</font><font color="#E5E5E5"> you do something</font><font color="#CCCCCC"> you</font>

840
00:38:03,490 --> 00:38:08,410
<font color="#E5E5E5">shouldn't do they have some kind of</font>

841
00:38:05,620 --> 00:38:11,140
trigger or something and if you<font color="#E5E5E5"> agree</font>

842
00:38:08,410 --> 00:38:12,609
cute illegal<font color="#CCCCCC"> opcode something you</font>

843
00:38:11,140 --> 00:38:15,850
shouldn't execute<font color="#E5E5E5"> or get</font><font color="#CCCCCC"> access to</font>

844
00:38:12,610 --> 00:38:18,520
<font color="#E5E5E5">memory student</font><font color="#CCCCCC"> then it just breaks</font><font color="#E5E5E5"> so</font>

845
00:38:15,850 --> 00:38:20,049
first<font color="#E5E5E5"> I've tried</font><font color="#CCCCCC"> I executed something</font>

846
00:38:18,520 --> 00:38:23,590
<font color="#E5E5E5">and this</font><font color="#CCCCCC"> card doesn't</font><font color="#E5E5E5"> respond anymore</font>

847
00:38:20,050 --> 00:38:25,240
<font color="#CCCCCC">and I thought it's broken</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> I put it</font>

848
00:38:23,590 --> 00:38:27,250
<font color="#CCCCCC">aside</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> then I took in a few days I</font>

849
00:38:25,240 --> 00:38:29,560
plug it in and I try to install it<font color="#E5E5E5"> works</font>

850
00:38:27,250 --> 00:38:31,810
again and I try and<font color="#CCCCCC"> get</font><font color="#E5E5E5"> it again</font><font color="#CCCCCC"> and I</font>

851
00:38:29,560 --> 00:38:33,820
<font color="#E5E5E5">saw</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> it takes about 40 minutes for a</font>

852
00:38:31,810 --> 00:38:36,580
card<font color="#E5E5E5"> to reset and then it works again</font>

853
00:38:33,820 --> 00:38:38,140
<font color="#E5E5E5">although</font><font color="#CCCCCC"> it is interesting</font><font color="#E5E5E5"> because these</font>

854
00:38:36,580 --> 00:38:40,480
cards don't<font color="#E5E5E5"> actually have a clock</font><font color="#CCCCCC"> they</font>

855
00:38:38,140 --> 00:38:43,000
don't have power<font color="#E5E5E5"> and they don't have</font>

856
00:38:40,480 --> 00:38:45,420
they<font color="#CCCCCC"> have external</font><font color="#E5E5E5"> clock so they cannot</font>

857
00:38:43,000 --> 00:38:47,650
actually do this kind<font color="#E5E5E5"> of thing but</font>

858
00:38:45,420 --> 00:38:49,930
<font color="#E5E5E5">probably they have some capacitor</font>

859
00:38:47,650 --> 00:38:53,070
leaking<font color="#E5E5E5"> or some decay in process which</font>

860
00:38:49,930 --> 00:38:56,129
allows<font color="#E5E5E5"> card to reset after some time and</font>

861
00:38:53,070 --> 00:38:58,810
it slows down quite a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> we try</font><font color="#E5E5E5"> to do</font>

862
00:38:56,130 --> 00:39:00,670
illegal<font color="#E5E5E5"> op codes on this card but if you</font>

863
00:38:58,810 --> 00:39:02,850
try something<font color="#E5E5E5"> wrong you have</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> reach</font><font color="#CCCCCC"> I</font>

864
00:39:00,670 --> 00:39:05,370
<font color="#E5E5E5">again it takes weeks to do something and</font>

865
00:39:02,850 --> 00:39:09,520
you<font color="#E5E5E5"> probably have to</font><font color="#CCCCCC"> quit</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> something</font>

866
00:39:05,370 --> 00:39:13,900
and as I said<font color="#CCCCCC"> before</font><font color="#E5E5E5"> logical attacks</font>

867
00:39:09,520 --> 00:39:17,259
<font color="#CCCCCC">should</font><font color="#E5E5E5"> be very cheap</font><font color="#CCCCCC"> - who put on</font><font color="#E5E5E5"> but</font>

868
00:39:13,900 --> 00:39:19,840
you can<font color="#E5E5E5"> see here that that's all the</font>

869
00:39:17,260 --> 00:39:22,570
cards<font color="#CCCCCC"> I</font><font color="#E5E5E5"> killed during my study it's</font>

870
00:39:19,840 --> 00:39:24,100
quite a lot of<font color="#E5E5E5"> them so it is cheap but</font>

871
00:39:22,570 --> 00:39:37,270
if you do<font color="#CCCCCC"> something</font><font color="#E5E5E5"> wrong it will cost</font>

872
00:39:24,100 --> 00:39:39,460
you thank you<font color="#E5E5E5"> for attention do have</font>

873
00:39:37,270 --> 00:39:42,550
questions

874
00:39:39,460 --> 00:39:46,300
where did you get all<font color="#CCCCCC"> that</font><font color="#E5E5E5"> cards</font><font color="#CCCCCC"> looking</font>

875
00:39:42,550 --> 00:39:47,559
<font color="#CCCCCC">wrong</font><font color="#E5E5E5"> so you can just of course I got it</font>

876
00:39:46,300 --> 00:39:49,809
from my<font color="#E5E5E5"> boss or something like this</font>

877
00:39:47,559 --> 00:39:52,270
<font color="#E5E5E5">because I work at a company but you can</font>

878
00:39:49,809 --> 00:39:54,700
just buy it online<font color="#CCCCCC"> so most</font><font color="#E5E5E5"> of the cards</font>

879
00:39:52,270 --> 00:40:02,559
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> especially all the</font><font color="#CCCCCC"> cards</font><font color="#E5E5E5"> but you</font>

880
00:39:54,700 --> 00:40:07,058
<font color="#E5E5E5">can also buy new cards online hello</font>

881
00:40:02,559 --> 00:40:08,980
which card<font color="#E5E5E5"> winters have you tested that</font>

882
00:40:07,059 --> 00:40:12,579
is a<font color="#E5E5E5"> good question it's not</font><font color="#CCCCCC"> secret</font>

883
00:40:08,980 --> 00:40:14,500
information<font color="#CCCCCC"> no one wants to hear their</font>

884
00:40:12,579 --> 00:40:17,020
name next<font color="#E5E5E5"> to the attack so of course we</font>

885
00:40:14,500 --> 00:40:19,900
cannot tell you about<font color="#E5E5E5"> the vendor so and</font>

886
00:40:17,020 --> 00:40:21,520
if we go to<font color="#E5E5E5"> vendor and tell we can study</font>

887
00:40:19,900 --> 00:40:23,530
<font color="#E5E5E5">your card and say if you secure or</font><font color="#CCCCCC"> not</font>

888
00:40:21,520 --> 00:40:25,329
just for<font color="#CCCCCC"> research for free</font><font color="#E5E5E5"> no one wants</font>

889
00:40:23,530 --> 00:40:27,790
it<font color="#E5E5E5"> so you can buy it online you can try</font>

890
00:40:25,329 --> 00:40:30,599
to do<font color="#E5E5E5"> something but</font><font color="#CCCCCC"> no vendor will agree</font>

891
00:40:27,790 --> 00:40:33,480
on<font color="#CCCCCC"> this normally ok maybe</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can answer</font>

892
00:40:30,599 --> 00:40:43,180
which we under is more secure

893
00:40:33,480 --> 00:40:46,630
yeah I cannot tell<font color="#E5E5E5"> and SSL thank you and</font>

894
00:40:43,180 --> 00:40:50,529
another question the<font color="#CCCCCC"> Java card runtime</font>

895
00:40:46,630 --> 00:40:53,230
environment<font color="#CCCCCC"> it works on some operation</font>

896
00:40:50,530 --> 00:40:56,609
system of the card<font color="#E5E5E5"> on or directly</font><font color="#CCCCCC"> on the</font>

897
00:40:53,230 --> 00:40:59,500
card so if there's some other layer

898
00:40:56,609 --> 00:41:03,569
under<font color="#CCCCCC"> the well it just</font><font color="#E5E5E5"> sounds on the</font>

899
00:40:59,500 --> 00:41:07,119
card<font color="#E5E5E5"> it's good and each vendor</font>

900
00:41:03,569 --> 00:41:08,740
makes its own Java card runtime

901
00:41:07,119 --> 00:41:10,420
environment<font color="#E5E5E5"> yes they implemented</font>

902
00:41:08,740 --> 00:41:12,640
themselves or they buy from someone

903
00:41:10,420 --> 00:41:14,170
although I don't<font color="#CCCCCC"> know</font><font color="#E5E5E5"> if it</font><font color="#CCCCCC"> actually the</font>

904
00:41:12,640 --> 00:41:18,098
case<font color="#CCCCCC"> if they can write there are no</font>

905
00:41:14,170 --> 00:41:22,059
cards<font color="#E5E5E5"> with a separate operation system</font>

906
00:41:18,099 --> 00:41:23,049
and Java card environment<font color="#CCCCCC"> may only</font>

907
00:41:22,059 --> 00:41:25,089
<font color="#E5E5E5">different lives</font>

908
00:41:23,049 --> 00:41:27,220
you didn't found it they call it

909
00:41:25,089 --> 00:41:29,109
javacard<font color="#CCCCCC"> OS so that's why</font><font color="#E5E5E5"> they have</font>

910
00:41:27,220 --> 00:41:30,490
their implementation<font color="#E5E5E5"> including virtual</font>

911
00:41:29,109 --> 00:41:32,348
<font color="#E5E5E5">machine and it's very limited because</font>

912
00:41:30,490 --> 00:41:34,569
<font color="#E5E5E5">you have such limited resources you</font>

913
00:41:32,349 --> 00:41:36,460
<font color="#E5E5E5">cannot have a separate operating system</font>

914
00:41:34,569 --> 00:41:40,619
and then run Android and<font color="#E5E5E5"> then run</font>

915
00:41:36,460 --> 00:41:40,619
something<font color="#E5E5E5"> else on it ok thanks</font>

916
00:41:44,839 --> 00:41:50,490
how did you kill<font color="#E5E5E5"> all that card actually</font>

917
00:41:48,170 --> 00:41:53,910
<font color="#CCCCCC">that's the same question my boss had</font>

918
00:41:50,490 --> 00:41:55,649
like how<font color="#E5E5E5"> did</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> - to kill them</font><font color="#CCCCCC"> when it</font>

919
00:41:53,910 --> 00:41:58,230
happens when you get access<font color="#CCCCCC"> to memory</font>

920
00:41:55,650 --> 00:41:59,849
when<font color="#E5E5E5"> you write somewhere like when you</font>

921
00:41:58,230 --> 00:42:02,010
have<font color="#E5E5E5"> to modify meta data when you do the</font>

922
00:41:59,849 --> 00:42:04,170
attack<font color="#CCCCCC"> and if I modify</font><font color="#E5E5E5"> something wrong I</font>

923
00:42:02,010 --> 00:42:06,240
can corrupt memory<font color="#CCCCCC"> off for some internal</font>

924
00:42:04,170 --> 00:42:08,580
structures of the<font color="#E5E5E5"> operating system on</font>

925
00:42:06,240 --> 00:42:11,479
<font color="#CCCCCC">the card</font><font color="#E5E5E5"> and then I can trigger some</font>

926
00:42:08,580 --> 00:42:18,980
secure<font color="#E5E5E5"> mechanism like security mechanism</font>

927
00:42:11,480 --> 00:42:21,300
and cards<font color="#E5E5E5"> don't give you some way to</font>

928
00:42:18,980 --> 00:42:24,510
<font color="#CCCCCC">reflash them fully</font>

929
00:42:21,300 --> 00:42:27,960
so<font color="#E5E5E5"> now normally card goes to locked</font>

930
00:42:24,510 --> 00:42:30,119
state so they clear the boot or some

931
00:42:27,960 --> 00:42:32,720
tables and<font color="#E5E5E5"> then you cannot just boot</font>

932
00:42:30,119 --> 00:42:36,240
<font color="#E5E5E5">anymore thank you</font>

933
00:42:32,720 --> 00:42:38,399
<font color="#E5E5E5">you say what about</font><font color="#CCCCCC"> card is a field</font>

934
00:42:36,240 --> 00:42:42,598
<font color="#E5E5E5">interface can you clone its using this</font>

935
00:42:38,400 --> 00:42:45,020
<font color="#CCCCCC">interface Jerrica</font><font color="#E5E5E5"> what I mean</font><font color="#CCCCCC"> LCD</font><font color="#E5E5E5"> until</font>

936
00:42:42,599 --> 00:42:48,780
<font color="#E5E5E5">his cut</font>

937
00:42:45,020 --> 00:42:51,480
without contact cards<font color="#E5E5E5"> can you clone it</font>

938
00:42:48,780 --> 00:42:54,180
using these entities it doesn't actually

939
00:42:51,480 --> 00:42:55,770
matter what kind of interface you use<font color="#E5E5E5"> so</font>

940
00:42:54,180 --> 00:42:58,319
all<font color="#E5E5E5"> these attacks</font><font color="#CCCCCC"> they're your godless</font>

941
00:42:55,770 --> 00:43:01,740
<font color="#E5E5E5">interface is</font><font color="#CCCCCC"> just on the platform</font><font color="#E5E5E5"> so if</font>

942
00:42:58,320 --> 00:43:04,500
you guys sit here and here<font color="#CCCCCC"> or cut</font><font color="#E5E5E5"> it</font>

943
00:43:01,740 --> 00:43:06,419
<font color="#E5E5E5">into this my member if I can install</font>

944
00:43:04,500 --> 00:43:10,440
<font color="#E5E5E5">applets on the card yes so I have this</font>

945
00:43:06,420 --> 00:43:12,150
card so this car doesn't<font color="#CCCCCC"> its contactless</font>

946
00:43:10,440 --> 00:43:16,320
it doesn't have contacts here and you

947
00:43:12,150 --> 00:43:17,880
can<font color="#E5E5E5"> use NFC to install applets and if</font>

948
00:43:16,320 --> 00:43:22,040
you can get huge antenna maybe can

949
00:43:17,880 --> 00:43:22,040
install it from<font color="#E5E5E5"> further distance</font>

950
00:43:34,560 --> 00:43:48,910
<font color="#CCCCCC">so who works on bypass technology</font><font color="#E5E5E5"> new</font>

951
00:43:40,450 --> 00:43:52,029
mobile<font color="#CCCCCC"> tools or it not working on the</font>

952
00:43:48,910 --> 00:43:56,910
past<font color="#E5E5E5"> close</font><font color="#CCCCCC"> I don't actually understand</font>

953
00:43:52,030 --> 00:44:00,720
<font color="#E5E5E5">the question where's the</font><font color="#CCCCCC"> Perot skeleton</font>

954
00:43:56,910 --> 00:44:04,029
<font color="#E5E5E5">robotically Allegra's nog in a</font><font color="#CCCCCC"> nurbs</font>

955
00:44:00,720 --> 00:44:06,819
<font color="#E5E5E5">proposal</font><font color="#CCCCCC"> Miho</font><font color="#E5E5E5"> -</font><font color="#CCCCCC"> nah no my business the</font>

956
00:44:04,030 --> 00:44:09,460
new<font color="#E5E5E5"> mobile technologies like</font><font color="#CCCCCC"> betas</font>

957
00:44:06,820 --> 00:44:13,440
payWave<font color="#E5E5E5"> when you pay</font><font color="#CCCCCC"> from the</font><font color="#E5E5E5"> mobile</font>

958
00:44:09,460 --> 00:44:13,440
phone<font color="#CCCCCC"> in the terminal</font><font color="#E5E5E5"> how does it work</font>

959
00:44:13,680 --> 00:44:17,470
<font color="#E5E5E5">so I'll continue</font><font color="#CCCCCC"> English now because</font>

960
00:44:16,000 --> 00:44:19,150
maybe someone<font color="#E5E5E5"> listened in English but</font>

961
00:44:17,470 --> 00:44:21,399
<font color="#E5E5E5">thanks</font>

962
00:44:19,150 --> 00:44:23,650
it doesn't<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> matter what so if</font>

963
00:44:21,400 --> 00:44:25,570
you have NFC<font color="#E5E5E5"> and you have</font><font color="#CCCCCC"> installer in</font>

964
00:44:23,650 --> 00:44:29,640
the<font color="#CCCCCC"> cart</font><font color="#E5E5E5"> it will just install</font><font color="#CCCCCC"> it and it</font>

965
00:44:25,570 --> 00:44:31,660
doesn't<font color="#CCCCCC"> matter but so it's not about any</font>

966
00:44:29,640 --> 00:44:33,370
applications have installed so if you

967
00:44:31,660 --> 00:44:37,270
have a<font color="#CCCCCC"> pass or whatever it doesn't</font>

968
00:44:33,370 --> 00:44:38,980
<font color="#CCCCCC">actually matter if you have NFC</font><font color="#E5E5E5"> and if</font>

969
00:44:37,270 --> 00:44:42,190
you have installer<font color="#E5E5E5"> and if you have keys</font>

970
00:44:38,980 --> 00:44:43,930
you<font color="#E5E5E5"> can do this kind</font><font color="#CCCCCC"> of attacks but yeah</font>

971
00:44:42,190 --> 00:44:47,170
it<font color="#E5E5E5"> is not easy</font><font color="#CCCCCC"> to get keys which is the</font>

972
00:44:43,930 --> 00:44:49,089
most<font color="#E5E5E5"> difficult part</font><font color="#CCCCCC"> the rest</font><font color="#E5E5E5"> which is</font>

973
00:44:47,170 --> 00:44:50,880
<font color="#E5E5E5">possible but rest of the code if those</font>

974
00:44:49,090 --> 00:44:53,500
procedures can create micarta

975
00:44:50,880 --> 00:44:55,690
<font color="#E5E5E5">newsmagazine annoy a national it's</font>

976
00:44:53,500 --> 00:44:58,300
<font color="#E5E5E5">almost nightly boy up</font><font color="#CCCCCC"> Latinos</font>

977
00:44:55,690 --> 00:45:00,430
<font color="#CCCCCC">discipleship odd for me ye-es language</font>

978
00:44:58,300 --> 00:45:02,110
<font color="#E5E5E5">nibs imagistic became is now Christendom</font>

979
00:45:00,430 --> 00:45:06,720
<font color="#E5E5E5">smoking shoes - no it used to</font>

980
00:45:02,110 --> 00:45:09,340
temperature<font color="#E5E5E5"> so yes if you have any card</font>

981
00:45:06,720 --> 00:45:12,279
<font color="#E5E5E5">from your bank or something then you</font>

982
00:45:09,340 --> 00:45:15,340
<font color="#CCCCCC">cannot just</font><font color="#E5E5E5"> you cannot just you have to</font>

983
00:45:12,280 --> 00:45:17,260
<font color="#CCCCCC">get keys first and there are some ways</font>

984
00:45:15,340 --> 00:45:18,970
on this and we do the study now with the

985
00:45:17,260 --> 00:45:23,520
research<font color="#E5E5E5"> and maybe</font><font color="#CCCCCC"> we'll publish</font><font color="#E5E5E5"> some</font>

986
00:45:18,970 --> 00:45:23,520
but it is tricky to<font color="#E5E5E5"> do something</font>

987
00:45:40,280 --> 00:45:44,130
<font color="#CCCCCC">more center owner escanso de moivre's</font>

988
00:45:42,630 --> 00:45:47,970
possible<font color="#E5E5E5"> Shahzada club</font>

989
00:45:44,130 --> 00:45:51,420
<font color="#CCCCCC">I still turn 18 Nikita definitely</font><font color="#E5E5E5"> carte</font>

990
00:45:47,970 --> 00:45:54,480
non<font color="#CCCCCC"> Cromie</font><font color="#E5E5E5"> javacard todo esto de mucho</font>

991
00:45:51,420 --> 00:45:59,400
<font color="#E5E5E5">mas</font><font color="#CCCCCC"> de yet</font><font color="#E5E5E5"> estamos fissure exposes the</font>

992
00:45:54,480 --> 00:46:01,380
<font color="#E5E5E5">druggie much name is</font><font color="#CCCCCC"> nice so there is</font>

993
00:45:59,400 --> 00:46:03,510
not<font color="#CCCCCC"> only Java</font><font color="#E5E5E5"> card</font><font color="#CCCCCC"> there are</font><font color="#E5E5E5"> also other</font>

994
00:46:01,380 --> 00:46:06,450
<font color="#CCCCCC">manufactures and other kind</font><font color="#E5E5E5"> of solutions</font>

995
00:46:03,510 --> 00:46:08,550
<font color="#CCCCCC">but Java card is the most popular</font>

996
00:46:06,450 --> 00:46:10,950
because it is<font color="#E5E5E5"> easy to go from vendor to</font>

997
00:46:08,550 --> 00:46:12,570
vendor you have Java card with virtual

998
00:46:10,950 --> 00:46:14,700
machine and<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> execute your applets</font>

999
00:46:12,570 --> 00:46:18,870
on different cards<font color="#E5E5E5"> this</font><font color="#CCCCCC"> rights became so</font>

1000
00:46:14,700 --> 00:46:21,240
popular like the slogan of<font color="#E5E5E5"> Java but yes</font>

1001
00:46:18,870 --> 00:46:24,660
there<font color="#E5E5E5"> are also others but since it's not</font>

1002
00:46:21,240 --> 00:46:26,939
so popular yeah we didn't pay too much

1003
00:46:24,660 --> 00:46:29,750
<font color="#CCCCCC">we didn't spend</font><font color="#E5E5E5"> too much time to run the</font>

1004
00:46:26,940 --> 00:46:29,750
text on<font color="#E5E5E5"> this and try</font>

1005
00:46:38,520 --> 00:46:50,830
Oh chip<font color="#CCCCCC"> what process</font>

1006
00:46:46,810 --> 00:46:54,640
Oh Chet football key speci weather

1007
00:46:50,830 --> 00:46:59,610
across tommcatt more<font color="#CCCCCC"> zestimate karta a</font>

1008
00:46:54,640 --> 00:46:59,609
<font color="#E5E5E5">pop Rosa Tom Kirk what would she preachy</font>

1009
00:46:59,850 --> 00:47:04,500
<font color="#E5E5E5">bashira</font><font color="#CCCCCC"> ice about</font><font color="#E5E5E5"> the class</font>

