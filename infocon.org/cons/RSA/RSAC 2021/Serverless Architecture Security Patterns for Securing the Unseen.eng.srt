1
00:00:01,380 --> 00:00:03,810
- Hey, thanks for joining my session

2
00:00:03,810 --> 00:00:05,689
on Serverless Architecture Patterns

3
00:00:05,690 --> 00:00:07,440
for Securing the Unseen.

4
00:00:07,440 --> 00:00:11,770
I'm really excited to speak
about this topic today

5
00:00:11,770 --> 00:00:15,280
at this conference and a such
a crucial topic I believe,

6
00:00:15,280 --> 00:00:17,259
on our day and time where Serverless

7
00:00:17,260 --> 00:00:20,170
has really taken off
from a cloud perspective.

8
00:00:20,170 --> 00:00:22,620
And I'm really excited to share
about some of the patterns

9
00:00:22,620 --> 00:00:24,230
and things that we can do to secure it.

10
00:00:24,230 --> 00:00:25,260
My name is Jabez Abraham

11
00:00:25,260 --> 00:00:28,980
and I work as a Cloud
Security Architect at Osurion.

12
00:00:28,980 --> 00:00:32,299
I would like to start off
with this one picture.

13
00:00:32,299 --> 00:00:34,852
A lot of times when you look at a picture,

14
00:00:34,852 --> 00:00:37,809
you know, you kinda think
about, what does it represent?

15
00:00:37,810 --> 00:00:39,670
When you think about this,
you think about a house,

16
00:00:39,670 --> 00:00:42,420
you think about dreams, visions, goals,

17
00:00:42,420 --> 00:00:47,280
maybe aspirations for someone
who wants to build something

18
00:00:47,280 --> 00:00:49,920
or plan for something for their future.

19
00:00:49,920 --> 00:00:52,360
But most importantly, we
think about this picture,

20
00:00:52,360 --> 00:00:55,620
we see the importance
of it is in that person.

21
00:00:55,620 --> 00:00:56,452
And of course, you know,

22
00:00:56,453 --> 00:00:59,000
as much as we would like to
look at this picture and say,

23
00:00:59,000 --> 00:01:00,640
man, that's a beautiful house or whatnot,

24
00:01:00,640 --> 00:01:03,630
the ultimate thing that we
look at security perspective

25
00:01:03,630 --> 00:01:06,000
is the person that
we're trying to protect.

26
00:01:06,000 --> 00:01:07,970
And when we think about Serverless,

27
00:01:07,970 --> 00:01:11,080
a lot of times people
start jump right into

28
00:01:11,080 --> 00:01:13,200
and say, hey, I wanna start securing it,

29
00:01:13,200 --> 00:01:14,610
what architectures do I implement?

30
00:01:14,610 --> 00:01:15,920
How do I protect it?

31
00:01:15,920 --> 00:01:17,790
What are some controls I need to have?

32
00:01:17,790 --> 00:01:19,440
What are some areas
that I need to look at?

33
00:01:19,440 --> 00:01:21,230
But a lot of times they miss out,

34
00:01:21,230 --> 00:01:23,621
what are they really trying to protect?

35
00:01:23,621 --> 00:01:25,199
You know, what are we really trying to do?

36
00:01:25,200 --> 00:01:28,160
So that question I believe is very central

37
00:01:28,160 --> 00:01:30,729
to this topic of securing the unseen.

38
00:01:30,730 --> 00:01:32,270
Because a lot of times what happens is

39
00:01:32,270 --> 00:01:34,649
we get caught up into our day to day

40
00:01:34,650 --> 00:01:37,950
and doing the operational
aspects of securing something,

41
00:01:37,950 --> 00:01:41,020
but forget about plumbing
work, the deep dives,

42
00:01:41,020 --> 00:01:43,460
the understanding of what am
I really trying to protect.

43
00:01:43,460 --> 00:01:46,339
So this picture just serves as an image

44
00:01:46,340 --> 00:01:48,000
of what we wanna think about

45
00:01:48,000 --> 00:01:50,120
when you're thinking
about securing Serverless

46
00:01:50,120 --> 00:01:52,210
as what is the crucial nature

47
00:01:52,210 --> 00:01:53,542
of what we're trying to protect, the data,

48
00:01:53,543 --> 00:01:56,490
that the data is what is crucial

49
00:01:56,490 --> 00:01:58,929
that we're trying to
protect in this scenario.

50
00:01:58,930 --> 00:02:01,480
So I want us to go through these agenda

51
00:02:01,480 --> 00:02:03,440
quickly on some of these topics

52
00:02:03,440 --> 00:02:05,440
that are gonna be covered here.

53
00:02:05,440 --> 00:02:06,640
The Lifecycle of the Data.

54
00:02:06,640 --> 00:02:08,949
Obviously we've talked
about the importance

55
00:02:08,949 --> 00:02:10,935
of what we're trying to protect.

56
00:02:10,936 --> 00:02:12,700
And Accessing the Data.

57
00:02:12,700 --> 00:02:16,207
You know, how does somebody get
into the Accessing the Data?

58
00:02:16,207 --> 00:02:19,239
And we're gonna talk about
certain Threat Vectors

59
00:02:19,240 --> 00:02:20,830
when we're talking about Serverless.

60
00:02:20,830 --> 00:02:24,970
Again, Serverless has changed
the dynamics of security

61
00:02:24,970 --> 00:02:27,609
where traditional security mindset

62
00:02:27,610 --> 00:02:30,410
is it gets really hard to justify

63
00:02:30,410 --> 00:02:34,150
in applying the same mindset
to a Serverless Architecture.

64
00:02:34,150 --> 00:02:35,670
And so, what we would like to do

65
00:02:35,670 --> 00:02:39,519
is I'd like to talk about is
how do you change your mindset

66
00:02:39,520 --> 00:02:42,450
when you're dealing with
Serverless Technologies?

67
00:02:42,450 --> 00:02:44,399
And then we'll talk about
some Design Principles,

68
00:02:44,400 --> 00:02:46,400
what are some things to be considering

69
00:02:46,400 --> 00:02:49,950
when you are starting to architect
Serverless Architectures.

70
00:02:49,950 --> 00:02:51,260
And then some applications, you know,

71
00:02:51,260 --> 00:02:53,739
some practical, real world applications.

72
00:02:53,740 --> 00:02:56,390
And we'll use a certain specific areas

73
00:02:56,390 --> 00:02:58,220
that we'll be talking about.

74
00:02:58,220 --> 00:02:59,920
And so jumping into it,

75
00:02:59,920 --> 00:03:02,388
when you think about
the Lifecycle, you know,

76
00:03:02,389 --> 00:03:03,870
when you think about a data,

77
00:03:03,870 --> 00:03:06,330
you think about the aspects
of creation, you know,

78
00:03:06,330 --> 00:03:07,840
somebody creates data,

79
00:03:07,840 --> 00:03:10,160
whether it could be time-sensitive data

80
00:03:10,160 --> 00:03:13,340
like a news cast or tweet
or whatever it may be.

81
00:03:13,340 --> 00:03:15,440
It's a very time sensitive information.

82
00:03:15,440 --> 00:03:17,630
And then you also think
about like the Data types.

83
00:03:17,630 --> 00:03:19,320
The Data types could be,

84
00:03:19,320 --> 00:03:22,030
again, something that's publicly available

85
00:03:22,030 --> 00:03:23,220
or something that's private,

86
00:03:23,220 --> 00:03:26,040
like maybe there's, you
know, stock markets.

87
00:03:26,040 --> 00:03:27,660
And again, things that are happening

88
00:03:27,660 --> 00:03:29,650
in millisecond timeframe.

89
00:03:29,650 --> 00:03:32,080
And then of course the
damage it can produce,

90
00:03:32,080 --> 00:03:34,960
and that is crucial as well,
is when you think about data

91
00:03:34,960 --> 00:03:36,920
not only it could be time-sensitive,

92
00:03:36,920 --> 00:03:39,230
it could also be classified a certain type

93
00:03:39,230 --> 00:03:40,660
of data classification,

94
00:03:40,660 --> 00:03:43,520
but also what type of
damage can it produce?

95
00:03:43,520 --> 00:03:47,250
So you have in this slide
the creation of the data

96
00:03:47,250 --> 00:03:48,530
by various entities,

97
00:03:48,530 --> 00:03:51,010
and then you have the storage of the data.

98
00:03:51,010 --> 00:03:52,810
It could be in a cloud environment,

99
00:03:52,810 --> 00:03:54,160
it could be in your Data Center.

100
00:03:54,160 --> 00:03:55,730
It could be anywhere for that matter.

101
00:03:55,730 --> 00:03:57,868
And then the consumption of the data,

102
00:03:57,868 --> 00:04:00,769
whether it's the users,
whether it's some artifact

103
00:04:00,770 --> 00:04:02,570
or archival, whatever it may be.

104
00:04:02,570 --> 00:04:05,959
How do you consume that
data and make it available?

105
00:04:05,960 --> 00:04:08,690
And when we follow along

106
00:04:08,690 --> 00:04:11,170
and from the perspective of the Lifecycle

107
00:04:11,170 --> 00:04:14,350
we have to kind of switch gears
a little bit and talk about,

108
00:04:14,350 --> 00:04:16,300
so how do I access data?

109
00:04:16,300 --> 00:04:18,600
Not only does my Lifecycle matter

110
00:04:18,600 --> 00:04:21,940
meaning that how does the
data flow through my system,

111
00:04:21,940 --> 00:04:23,440
but how do I make it available?

112
00:04:23,440 --> 00:04:25,630
You know that consumption
that we talked about.

113
00:04:25,630 --> 00:04:28,210
So you have these various different people

114
00:04:28,210 --> 00:04:30,039
that we're talking about,
already you got producers,

115
00:04:30,040 --> 00:04:32,720
you got protection
boundaries, you got consumers

116
00:04:32,720 --> 00:04:35,110
and then you've got of
course perpetrators.

117
00:04:35,110 --> 00:04:38,770
And when you think about
in that perspective,

118
00:04:38,770 --> 00:04:41,870
the producers could be anyone
from the internet of things

119
00:04:41,870 --> 00:04:44,340
where data are accessible to the end user.

120
00:04:44,340 --> 00:04:46,479
And of course, well what are
some protection boundaries

121
00:04:46,480 --> 00:04:48,010
that we can think about, like privileges

122
00:04:48,010 --> 00:04:51,599
and authentication,
authorization, logging?

123
00:04:51,600 --> 00:04:52,860
You know, what about Technical Debt?

124
00:04:52,860 --> 00:04:54,830
A lot of times people
think about Technical Debt

125
00:04:54,830 --> 00:04:56,740
as something that's behind the scenes,

126
00:04:56,740 --> 00:04:59,680
but it's real challenge sometimes

127
00:04:59,680 --> 00:05:01,560
if you don't think about it of time.

128
00:05:01,560 --> 00:05:03,320
And then the consumers, people we love,

129
00:05:03,320 --> 00:05:04,724
people you wanna share it with,

130
00:05:04,724 --> 00:05:07,421
people that we wanna share the data with.

131
00:05:07,422 --> 00:05:10,430
And of course the perpetraitors,
and that's always there.

132
00:05:10,430 --> 00:05:13,180
You know, you saw the
slide when it came up,

133
00:05:13,180 --> 00:05:14,080
it was already there

134
00:05:14,080 --> 00:05:16,310
because the perpetrators are always there.

135
00:05:16,310 --> 00:05:17,660
Whether you have data or not,

136
00:05:17,660 --> 00:05:20,520
they're gonna constantly
be looking to infiltrate

137
00:05:20,520 --> 00:05:24,870
and try to access data that
is not allowed for them.

138
00:05:24,870 --> 00:05:27,324
And when we think about that perspective,

139
00:05:27,324 --> 00:05:30,760
and we think about the
context of Serverless,

140
00:05:30,760 --> 00:05:33,430
how do you think about Serverless

141
00:05:33,430 --> 00:05:35,150
and the threat it produces?

142
00:05:35,150 --> 00:05:37,020
I mean, this picture, if you look at it

143
00:05:37,020 --> 00:05:38,950
is an interesting representation

144
00:05:38,950 --> 00:05:40,840
and many of you may have seen it.

145
00:05:40,840 --> 00:05:42,940
The picture talks about,
you know, iceberg.

146
00:05:42,940 --> 00:05:44,110
You know, you think about an iceberg

147
00:05:44,110 --> 00:05:45,210
as something that's visible,

148
00:05:45,210 --> 00:05:47,330
something that's from the Titanic

149
00:05:47,330 --> 00:05:50,450
or something that you know exists.

150
00:05:50,450 --> 00:05:52,420
But a lot of times what
people don't realize

151
00:05:52,420 --> 00:05:55,140
is that there's a massive amount of eyes

152
00:05:55,140 --> 00:05:58,130
that's underneath, that's invisible.

153
00:05:58,130 --> 00:05:59,690
And when we talk about Serverless,

154
00:05:59,690 --> 00:06:03,690
the data is a lot of times,
the threat is invisible

155
00:06:03,690 --> 00:06:04,950
to the user.

156
00:06:04,950 --> 00:06:06,870
When you take data and pass it on

157
00:06:06,870 --> 00:06:08,620
to a Public Cloud Provider,

158
00:06:08,620 --> 00:06:10,760
a lot of times they are accountable

159
00:06:10,760 --> 00:06:12,877
for how they manage your
protection of your data

160
00:06:12,877 --> 00:06:14,480
and how they store it.

161
00:06:14,480 --> 00:06:16,517
But ultimately it's invisible to you

162
00:06:16,517 --> 00:06:18,380
for a lot of the aspects, you know,

163
00:06:18,380 --> 00:06:19,860
how does the data get transferred?

164
00:06:19,860 --> 00:06:21,280
You know, how does the data gets stored?

165
00:06:21,280 --> 00:06:23,369
How does the data in this physically,

166
00:06:23,370 --> 00:06:26,460
how does the data get moved
from one region to another.

167
00:06:26,460 --> 00:06:28,789
Lot of these different
constructs that we talked about

168
00:06:28,790 --> 00:06:31,110
from a Public Provider perspective

169
00:06:31,110 --> 00:06:32,770
are invisible to the user.

170
00:06:32,770 --> 00:06:34,909
In a Data center I could
walk in and look at it

171
00:06:34,909 --> 00:06:37,800
and say here are my hard disks,
here are my E.M.C drives.

172
00:06:37,800 --> 00:06:40,400
But in a Cloud System,
you don't have guarantee

173
00:06:40,400 --> 00:06:45,400
of which Data recides where
from a regional perspective,

174
00:06:45,610 --> 00:06:48,000
you know, so it could be one
Data Center versus the other.

175
00:06:48,000 --> 00:06:50,970
So when you think about
that type of a Threat Vector

176
00:06:50,970 --> 00:06:53,770
we've seen really the revolution of cloud

177
00:06:53,770 --> 00:06:57,490
from an infrastructure as a
service to function as a service

178
00:06:57,490 --> 00:07:00,300
from monolith applications
to microservices

179
00:07:00,300 --> 00:07:02,160
and now again, to Serverless.

180
00:07:02,160 --> 00:07:03,760
And we really seen the evolution

181
00:07:03,760 --> 00:07:07,890
of Cloud Technologies in that level.

182
00:07:07,890 --> 00:07:08,723
And people may think that

183
00:07:08,723 --> 00:07:10,040
why do people really go into Serverless?

184
00:07:10,040 --> 00:07:11,900
You know when we talk about protection,

185
00:07:11,900 --> 00:07:14,789
but why is the real demand for Serveless?

186
00:07:14,790 --> 00:07:18,020
There's obviously there's
many we can talk about

187
00:07:18,020 --> 00:07:19,650
you know, today, just
touch point on a few,

188
00:07:19,650 --> 00:07:22,030
there's no infrastructure to manage.

189
00:07:22,030 --> 00:07:23,760
You don't have to patch, you
don't have to worry about

190
00:07:23,760 --> 00:07:25,750
maintaining your infrastructure,

191
00:07:25,750 --> 00:07:27,910
making sure that you're
networking and cabling

192
00:07:27,910 --> 00:07:30,240
and all of those things, and
there's nothing to manage.

193
00:07:30,240 --> 00:07:32,636
And you don't have to do a lot of the work

194
00:07:32,636 --> 00:07:36,250
that is done, to get the
server ready for you.

195
00:07:36,250 --> 00:07:37,310
And then of course,

196
00:07:37,310 --> 00:07:39,840
to be able to quickly spin up a function,

197
00:07:39,840 --> 00:07:41,810
to be able to do certain type of work,

198
00:07:41,810 --> 00:07:45,040
a small volume of work,
and being able to execute

199
00:07:45,040 --> 00:07:47,170
based on some of the
requirements that you give it.

200
00:07:47,170 --> 00:07:49,540
Again Serverless gives a lot of benefits

201
00:07:49,540 --> 00:07:52,050
for a lot of the users at a cost.

202
00:07:52,050 --> 00:07:53,970
You know, you use, you
pay for what you use

203
00:07:53,970 --> 00:07:57,190
and a very, very small millisecond way.

204
00:07:57,190 --> 00:08:00,010
And so again, cost is a
big driver for Serverless

205
00:08:00,010 --> 00:08:01,420
and the ease of deployment, you know,

206
00:08:01,420 --> 00:08:05,000
where you can deploy in
multiple decentralized methods

207
00:08:05,000 --> 00:08:07,300
and you're not having this
massive monolithic application.

208
00:08:07,300 --> 00:08:11,900
So Serverless definitely is
a big driver in that sense

209
00:08:11,900 --> 00:08:15,479
but then you think about
the security aspects of it.

210
00:08:15,480 --> 00:08:20,430
The attack landscape really
has changed with Serverless,

211
00:08:20,430 --> 00:08:22,180
thinking about application weakness.

212
00:08:22,180 --> 00:08:23,500
You know, you think about an application

213
00:08:23,500 --> 00:08:26,110
that somebody writes and
somebody puts it in the cloud.

214
00:08:26,110 --> 00:08:29,230
They can have the illusion that
since I put it in the cloud

215
00:08:29,230 --> 00:08:31,800
it's secure or because it's serverless

216
00:08:31,800 --> 00:08:36,320
and it gets very small
ephemeral time instances,

217
00:08:36,320 --> 00:08:37,559
that it could be secure.

218
00:08:37,559 --> 00:08:40,449
And we're gonna see in a demo briefly on

219
00:08:41,340 --> 00:08:43,270
Serverless is not inherently secure.

220
00:08:43,270 --> 00:08:46,329
It's how you secure it, is what matters.

221
00:08:46,330 --> 00:08:49,660
And then of course, I.O.T brings
the data to the end users.

222
00:08:49,660 --> 00:08:52,240
Again, there's a different Threat Vector

223
00:08:52,240 --> 00:08:53,403
that we can talk about.

224
00:08:55,040 --> 00:08:58,949
And then when we think about
Serverless and security,

225
00:08:58,950 --> 00:09:02,040
just because it's ephemeral system

226
00:09:02,040 --> 00:09:05,219
that it only lives for
milliseconds or a minute

227
00:09:05,220 --> 00:09:09,810
or five minutes, doesn't mean
that it's inherently secure.

228
00:09:09,810 --> 00:09:12,109
And we're gonna look at a simple example.

229
00:09:12,110 --> 00:09:16,880
In this example, if you
see there's lambdashell.com

230
00:09:16,880 --> 00:09:19,810
is just open website
that anybody can go in,

231
00:09:19,810 --> 00:09:23,119
and they give you a shell
into a Lambda function.

232
00:09:23,120 --> 00:09:25,560
There's a real Lambda function in Amazon.

233
00:09:25,560 --> 00:09:27,782
And in this example, as you're watching,

234
00:09:29,170 --> 00:09:31,420
it's a regular Unix kernel.

235
00:09:31,420 --> 00:09:34,910
If you see that it's got a
shell, it's got DF minus K,

236
00:09:34,910 --> 00:09:38,240
it's got different values,
it's got the index.jsfile

237
00:09:38,240 --> 00:09:39,710
that's got the root file system.

238
00:09:39,710 --> 00:09:41,840
It has all of these regular entities

239
00:09:41,840 --> 00:09:44,130
that you would expect in any Unix machine.

240
00:09:44,130 --> 00:09:47,830
Now, in this example, this
person has given a shell access

241
00:09:47,830 --> 00:09:49,900
into a Lambda function.

242
00:09:49,900 --> 00:09:53,770
Now, when I do an environment
variable in that server,

243
00:09:53,770 --> 00:09:55,990
I see a bunch of different
environment variables

244
00:09:55,990 --> 00:09:58,650
just as you would expect in any system.

245
00:09:58,650 --> 00:10:00,660
In this case, I'm interested
in certain things,

246
00:10:00,660 --> 00:10:02,459
I mean, which region I'm running in,

247
00:10:02,460 --> 00:10:05,470
I'm running in U.S West one in California.

248
00:10:05,470 --> 00:10:08,390
What is the that I'm
gonna be interested in?

249
00:10:08,390 --> 00:10:12,000
There's access secret key
and multiple other things.

250
00:10:12,000 --> 00:10:15,120
And here, all I'm doing is
I'm constructing basically

251
00:10:15,120 --> 00:10:17,980
a method to access this infrastructure

252
00:10:17,980 --> 00:10:21,260
or this cloud environment from my laptop,

253
00:10:21,260 --> 00:10:22,850
from my personal laptop.

254
00:10:22,850 --> 00:10:26,470
So all I'm doing here is
capturing the access key,

255
00:10:26,470 --> 00:10:29,050
the secret key and the token.

256
00:10:29,050 --> 00:10:31,479
And so basically what
I'm gonna be doing here

257
00:10:31,480 --> 00:10:33,960
is that constructing these three elements

258
00:10:33,960 --> 00:10:37,940
that Amazon requires for
me to be able to connect

259
00:10:37,940 --> 00:10:40,440
to my cloud environment from my laptop,

260
00:10:40,440 --> 00:10:45,440
that's outside of a console or
an a company's cloud account

261
00:10:46,580 --> 00:10:48,860
So here I'm just exported the access key,

262
00:10:48,860 --> 00:10:50,560
I would support the secret key

263
00:10:50,560 --> 00:10:55,550
and the token that is
required for this attack.

264
00:10:55,550 --> 00:11:00,359
And once I do these three
different entities at this point

265
00:11:00,360 --> 00:11:03,580
I have access to that
person's cloud environment.

266
00:11:03,580 --> 00:11:05,860
So here I'm doing a simple,
we get color identity,

267
00:11:05,860 --> 00:11:09,090
it tells me that I'm in the
Lambda basic execution role.

268
00:11:09,090 --> 00:11:11,180
Now roles are super
important in the cloud.

269
00:11:11,180 --> 00:11:13,650
And depending on the size of the role,

270
00:11:13,650 --> 00:11:14,890
I can get lateral movement

271
00:11:14,890 --> 00:11:16,430
and I'll be able to do lateral movement.

272
00:11:16,430 --> 00:11:17,890
In this case, I have access to do

273
00:11:17,890 --> 00:11:20,390
a very few amount of things,

274
00:11:20,390 --> 00:11:23,280
creating a log group,
log events, log stream.

275
00:11:23,280 --> 00:11:27,339
Again, very, very minimalistic
type role, which is good.

276
00:11:27,340 --> 00:11:30,500
But even with this, there
are certain things I can do.

277
00:11:30,500 --> 00:11:31,820
So I can try to list roles.

278
00:11:31,820 --> 00:11:34,520
Of course, that's denied
because it's a very restricted

279
00:11:34,520 --> 00:11:35,630
type of role.

280
00:11:35,630 --> 00:11:39,140
And then also I'm gonna try to
do a certain other functions

281
00:11:39,140 --> 00:11:41,030
like creating a log group.

282
00:11:41,030 --> 00:11:42,980
And now someone may say that

283
00:11:42,980 --> 00:11:46,530
while those are very restrictive
functions or controls

284
00:11:46,530 --> 00:11:49,230
or roles that are given permissions to,

285
00:11:49,230 --> 00:11:51,670
but ultimately what I can potentially do

286
00:11:51,670 --> 00:11:54,000
with just this minimalistic permission,

287
00:11:54,000 --> 00:11:58,140
is I can still create a log
group, I can create a log stream

288
00:11:58,140 --> 00:12:01,414
and then I can start publishing
events to that stream.

289
00:12:01,414 --> 00:12:02,420
You know, if you think about it,

290
00:12:02,420 --> 00:12:04,479
even in the sense in this example

291
00:12:04,480 --> 00:12:09,480
where this was to shell that I have access

292
00:12:10,900 --> 00:12:12,250
from this website,

293
00:12:12,250 --> 00:12:14,550
I'm able to get into
that person's account,

294
00:12:14,550 --> 00:12:18,609
I'm able to generate log events,

295
00:12:18,610 --> 00:12:21,170
and then I'm able to potentially

296
00:12:21,170 --> 00:12:23,319
kind of spike up their
bill, you know, in a sense

297
00:12:23,320 --> 00:12:26,500
where I can start sending
multiple log events,

298
00:12:26,500 --> 00:12:27,400
I can automate it.

299
00:12:27,400 --> 00:12:29,900
Again I I get the token for an hour,

300
00:12:29,900 --> 00:12:32,600
which means that I can
all around their system

301
00:12:32,600 --> 00:12:34,360
with logs that are meaningless, you know,

302
00:12:34,360 --> 00:12:37,540
which are just going to
just spike up their bill.

303
00:12:37,540 --> 00:12:38,973
Again, this is a very simple example

304
00:12:38,973 --> 00:12:41,839
like this person has
given access for people

305
00:12:41,840 --> 00:12:44,090
to be able to do that in the sense that

306
00:12:44,090 --> 00:12:45,720
he's opened it up for the world

307
00:12:45,720 --> 00:12:48,360
so that people can get a
feel for how securities

308
00:12:48,360 --> 00:12:52,810
and different areas, and
even has a bug bounty program

309
00:12:52,810 --> 00:12:53,959
in that website.

310
00:12:53,960 --> 00:12:58,270
But the important aspect
here to capture is that

311
00:12:58,270 --> 00:13:01,470
Serverless by the term,
just because it's ephemeral,

312
00:13:01,470 --> 00:13:04,670
doesn't mean that you cannot, you know,

313
00:13:04,670 --> 00:13:06,560
that it doesn't need
to be secure, you know.

314
00:13:06,560 --> 00:13:09,790
So that is the important
aspect of this demo.

315
00:13:09,790 --> 00:13:12,660
And when jumping into the next slide,

316
00:13:12,660 --> 00:13:15,732
we're gonna look at
some Design Principles.

317
00:13:15,732 --> 00:13:18,040
You know, when you think
about Threat modeling,

318
00:13:18,040 --> 00:13:21,469
you wanna think about from
Low to High-Risk data.

319
00:13:21,470 --> 00:13:23,933
What is my data movement
in my architecture,

320
00:13:24,810 --> 00:13:27,709
and how does that movement affect,

321
00:13:27,710 --> 00:13:29,680
well how I need to secure it.

322
00:13:29,680 --> 00:13:31,310
And we're gonna look at
a couple of Data maps

323
00:13:31,310 --> 00:13:34,709
and it'll hopefully tie all this together.

324
00:13:34,710 --> 00:13:37,450
And that is crucial because
lot of times what people do

325
00:13:37,450 --> 00:13:40,660
is that they say, hey, I
wanna secure the entry point,

326
00:13:40,660 --> 00:13:42,610
I wanna secure the Back-End Storage,

327
00:13:42,610 --> 00:13:43,930
but then the data can move inside

328
00:13:43,930 --> 00:13:46,150
because it's inside my network.

329
00:13:46,150 --> 00:13:48,900
And they don't account for
things like insider attacks

330
00:13:48,900 --> 00:13:52,340
or data leakage or
accidental data exposure,

331
00:13:52,340 --> 00:13:53,173
things like that.

332
00:13:53,173 --> 00:13:56,262
So, and there are some
very core principles

333
00:13:56,262 --> 00:13:57,094
that we have to think about

334
00:13:57,095 --> 00:13:59,170
when we're dealing with Serverless,

335
00:13:59,170 --> 00:14:02,620
that you have to think about
in the sense of access sharing,

336
00:14:02,620 --> 00:14:05,650
making sure that you don't
have much broader access

337
00:14:05,650 --> 00:14:06,920
than what is needed.

338
00:14:06,920 --> 00:14:08,130
In the previous example, we saw,

339
00:14:08,130 --> 00:14:09,730
it was just a Lambda execution role,

340
00:14:09,730 --> 00:14:11,950
which is a very minimalistic access.

341
00:14:11,950 --> 00:14:13,680
And if somebody gives admin role,

342
00:14:13,680 --> 00:14:15,449
now that is a real risk, why?

343
00:14:15,450 --> 00:14:17,860
Because somebody can get
in, they can get access

344
00:14:17,860 --> 00:14:20,270
to that environment
and they would be admin

345
00:14:20,270 --> 00:14:22,210
from their laptop and
now they can pretty much

346
00:14:22,210 --> 00:14:24,780
do what they wanna do in
the other person's account,

347
00:14:24,780 --> 00:14:26,089
including takeover.

348
00:14:26,090 --> 00:14:29,870
So that is a very challenging
thing that can happen.

349
00:14:29,870 --> 00:14:33,420
And so, as we look into
some of these areas

350
00:14:33,420 --> 00:14:36,420
you think about things
like Anomaly Detection

351
00:14:36,420 --> 00:14:38,360
in the sense of what is normal, you know,

352
00:14:38,360 --> 00:14:41,350
what is a normal flow of my data.

353
00:14:41,350 --> 00:14:42,770
The data that I'm trying to secure

354
00:14:42,770 --> 00:14:46,110
what we looked at earlier,
the sensitivity of the data

355
00:14:46,110 --> 00:14:49,200
and what is normal from that perspective.

356
00:14:49,200 --> 00:14:52,770
And if I can protect it and I
can understand what is normal,

357
00:14:52,770 --> 00:14:56,970
now I can, you know, on top
of it, apply principles to say

358
00:14:56,970 --> 00:15:00,000
if this changes this
threshold, then start alerting

359
00:15:00,000 --> 00:15:02,000
or start blocking, or put
that person in quarantine

360
00:15:02,000 --> 00:15:04,310
and let's figure out what
they're trying to do.

361
00:15:04,310 --> 00:15:08,349
And so again, Zero Trust is a
term that's used quite often

362
00:15:08,350 --> 00:15:12,380
but it's more like a freeway,
where you trust the people

363
00:15:12,380 --> 00:15:14,380
who are on the freeway
following the rules.

364
00:15:14,380 --> 00:15:17,303
And you could do spot checks
once in a while here and there

365
00:15:17,303 --> 00:15:19,130
from an insider perspective.

366
00:15:19,130 --> 00:15:21,610
But ultimately you would say,
if you're on the freeway,

367
00:15:21,610 --> 00:15:23,610
we trust you, you're
following the speed limit,

368
00:15:23,610 --> 00:15:25,240
you're going the right direction

369
00:15:25,240 --> 00:15:27,130
and you're not having erratic behavior.

370
00:15:27,130 --> 00:15:28,700
But if you're outside the freeway

371
00:15:28,700 --> 00:15:30,170
and you're not supposed to be outside

372
00:15:30,170 --> 00:15:33,300
then obviously that trust
boundary has been broken, right?

373
00:15:33,300 --> 00:15:35,329
So the Zero Trust really
comes from the perspective

374
00:15:35,330 --> 00:15:39,150
of being able to isolate actors

375
00:15:39,150 --> 00:15:41,400
that are not following the norm.

376
00:15:41,400 --> 00:15:43,069
And so is it possible?

377
00:15:43,070 --> 00:15:45,600
Yes, it is definitely
possible from the perspective

378
00:15:45,600 --> 00:15:49,000
of being able to control what you can see

379
00:15:49,000 --> 00:15:52,570
or what you can give that guardrails,

380
00:15:52,570 --> 00:15:54,320
you know, view of things.

381
00:15:54,320 --> 00:15:57,530
And then now Zero Trust
again, is a very fluid topic

382
00:15:57,530 --> 00:15:59,689
and different people have
different perspectives of it.

383
00:15:59,690 --> 00:16:01,860
But just from the perspective
of being able to control

384
00:16:01,860 --> 00:16:04,670
of what you authorize somebody to do it,

385
00:16:04,670 --> 00:16:07,099
in Zero Trust is possible.

386
00:16:07,100 --> 00:16:09,770
And then thinking about Visualizing Data.

387
00:16:09,770 --> 00:16:10,890
Again, we've talked about

388
00:16:10,890 --> 00:16:13,490
how do you look at your Data structure

389
00:16:13,490 --> 00:16:16,120
and different aspects of it,
and how do you visualize it?

390
00:16:16,120 --> 00:16:17,970
So we're gonna have a
little slide in the next one

391
00:16:17,970 --> 00:16:19,820
which is gonna be a busy slide,

392
00:16:19,820 --> 00:16:24,610
but I want you to take a
few items from this slide.

393
00:16:24,610 --> 00:16:27,520
You think about in the
cloud computing business,

394
00:16:27,520 --> 00:16:29,579
you have the EDGE layer,
you've got the cloud France,

395
00:16:29,580 --> 00:16:32,910
you've got the C.D.Ns
from different providers.

396
00:16:32,910 --> 00:16:36,430
You've got the different areas on the EDGE

397
00:16:36,430 --> 00:16:38,069
that the data comes in.

398
00:16:38,070 --> 00:16:39,220
Then you have the compute, you know,

399
00:16:39,220 --> 00:16:42,440
where you're having a lot of
processing that is happening.

400
00:16:42,440 --> 00:16:43,730
And of course the data itself,

401
00:16:43,730 --> 00:16:45,200
the data integrity and the confidence

402
00:16:45,200 --> 00:16:48,527
the CIA triad that we commonly talk about.

403
00:16:48,527 --> 00:16:49,990
And of course, messaging and streaming

404
00:16:49,990 --> 00:16:52,510
are very, very a hot topic right now

405
00:16:52,510 --> 00:16:53,430
with the amount of data

406
00:16:53,430 --> 00:16:55,469
that can be passed through an environment.

407
00:16:55,470 --> 00:16:57,720
And access controls
monitoring development,

408
00:16:57,720 --> 00:16:59,870
but here there're few key areas

409
00:16:59,870 --> 00:17:02,450
that you wanna break your basically

410
00:17:02,450 --> 00:17:03,920
your infrastructure into,

411
00:17:03,920 --> 00:17:06,599
to think about how does
my EDGE layer look like?

412
00:17:06,599 --> 00:17:07,959
Am I using a C.D.N?

413
00:17:07,960 --> 00:17:09,010
Do I have A.P.Is?

414
00:17:09,010 --> 00:17:10,780
Do I have user authentication?

415
00:17:10,780 --> 00:17:12,889
Do I need a geo location blocking

416
00:17:12,890 --> 00:17:15,099
because I have some data sovereignty rules

417
00:17:15,099 --> 00:17:16,399
that I have to manage.

418
00:17:16,400 --> 00:17:17,810
And then in the similar way,

419
00:17:17,810 --> 00:17:22,440
you can map out your entire
data flow based on this view.

420
00:17:22,440 --> 00:17:23,780
You can say for messaging,

421
00:17:23,780 --> 00:17:25,589
what is the validity of the message?

422
00:17:25,589 --> 00:17:27,709
How much amount of message do I take it

423
00:17:27,710 --> 00:17:28,760
to my Back-End Systems?

424
00:17:28,760 --> 00:17:30,650
Do I filter some out?

425
00:17:30,650 --> 00:17:33,988
Session management and
access, that's a big topic.

426
00:17:33,988 --> 00:17:38,150
Or, you know, finding
actionable events in monitoring.

427
00:17:38,150 --> 00:17:39,760
And it's like finding a
needle in the haystack

428
00:17:39,760 --> 00:17:41,710
if you just log all the events.

429
00:17:41,710 --> 00:17:44,820
But if I'm smart about what type of events

430
00:17:44,820 --> 00:17:46,870
that do I really wanna monitor

431
00:17:46,870 --> 00:17:50,270
and take action on top
of it or handling errors.

432
00:17:50,270 --> 00:17:53,720
And also like some of
them are outside the scope

433
00:17:53,720 --> 00:17:56,620
of just the technology where open source,

434
00:17:56,620 --> 00:17:58,250
how do I handle open source?

435
00:17:58,250 --> 00:18:01,200
How do I do security awareness programs?

436
00:18:01,200 --> 00:18:02,380
And how do I let people know

437
00:18:02,380 --> 00:18:04,100
how do they need to do Serverless?

438
00:18:04,100 --> 00:18:08,889
Not to give bad actors
access into our environment.

439
00:18:08,890 --> 00:18:10,930
And again, this is a busy slide,

440
00:18:10,930 --> 00:18:14,160
but just to think about
the data in a Serverless,

441
00:18:14,160 --> 00:18:15,287
broken down by layers.

442
00:18:15,287 --> 00:18:19,130
You know, that is crucial when
you are being able to map out

443
00:18:19,130 --> 00:18:19,963
your infrastructure

444
00:18:19,963 --> 00:18:22,800
and how do you wanna
manage Serverless security

445
00:18:22,800 --> 00:18:24,133
in securing the unseen.

446
00:18:25,790 --> 00:18:28,310
Just a group, a couple
of key design principles,

447
00:18:28,310 --> 00:18:29,820
I wanna switch gears a little bit

448
00:18:29,820 --> 00:18:32,780
because we're gonna be talking
about certain application

449
00:18:32,780 --> 00:18:35,950
of designs in these three contexts, right?

450
00:18:35,950 --> 00:18:37,690
You think about the I.A.M context,

451
00:18:37,690 --> 00:18:39,620
the Identity and Access Management.

452
00:18:39,620 --> 00:18:41,239
And how do you manage identity?

453
00:18:41,240 --> 00:18:43,520
How do you manage access
and least privilege,

454
00:18:43,520 --> 00:18:45,300
how do you manage defense in depth

455
00:18:45,300 --> 00:18:47,550
allowing multiple layers of controls

456
00:18:47,550 --> 00:18:49,760
before people can into your network.

457
00:18:49,760 --> 00:18:53,070
And we're gonna be talking
about this in this context,

458
00:18:53,070 --> 00:18:56,040
in the slides you're gonna
be seeing after this.

459
00:18:56,040 --> 00:18:57,700
So I just wanted to kind of call that out

460
00:18:57,700 --> 00:19:00,880
and we're gonna jump into
some sample architecture

461
00:19:00,880 --> 00:19:04,170
in Amazon, and talk
about how that applies.

462
00:19:04,170 --> 00:19:06,170
So here's a very typical architecture

463
00:19:06,170 --> 00:19:08,410
that we're gonna be looking at in Amazon.

464
00:19:08,410 --> 00:19:10,350
You've got the content
delivery, you've got messaging

465
00:19:10,350 --> 00:19:12,657
and some sense of authentication,

466
00:19:12,657 --> 00:19:14,879
and an authorization A.P.Is.

467
00:19:14,880 --> 00:19:17,810
Again even based modeling in your events

468
00:19:17,810 --> 00:19:19,330
that are going to the Data store.

469
00:19:19,330 --> 00:19:21,659
And you potentially could
have a separate account

470
00:19:21,660 --> 00:19:24,790
that manages lot of
your DevSecOps pipeline,

471
00:19:24,790 --> 00:19:26,490
manages a lot of your forensics,

472
00:19:26,490 --> 00:19:28,280
if there's a breach being
able to take the data

473
00:19:28,280 --> 00:19:29,530
and move it into this other account

474
00:19:29,530 --> 00:19:31,889
so that you can do forensics on it,

475
00:19:31,890 --> 00:19:33,410
an external logging interface

476
00:19:33,410 --> 00:19:35,430
so that it's not tampered with.

477
00:19:35,430 --> 00:19:37,190
And then of course, your
security and governance

478
00:19:37,190 --> 00:19:39,640
are very common, your keys,

479
00:19:39,640 --> 00:19:41,050
what keys do you use to manage

480
00:19:41,050 --> 00:19:44,980
and what is the rough
strategy, logging access?

481
00:19:44,980 --> 00:19:46,730
And if we can talk about a lot these,

482
00:19:46,730 --> 00:19:50,180
but I want to take few scenarios
in the subsequent slides

483
00:19:50,180 --> 00:19:52,540
and talk about how does it apply

484
00:19:52,540 --> 00:19:56,010
from the groupings that we
saw in the previous slide.

485
00:19:56,010 --> 00:19:58,920
So here is the Front-End Layer.

486
00:19:58,920 --> 00:20:02,340
When you talk about data coming
into my environment, right?

487
00:20:02,340 --> 00:20:05,300
Where I have users hitting my end point

488
00:20:05,300 --> 00:20:08,830
and trying to access some
services that I'm providing.

489
00:20:08,830 --> 00:20:10,720
Maybe it's a lookup service,

490
00:20:10,720 --> 00:20:14,070
maybe it's something to submit claims

491
00:20:14,070 --> 00:20:16,189
or do certain sensitive information

492
00:20:16,190 --> 00:20:19,320
or entering the social security number.

493
00:20:19,320 --> 00:20:23,200
So you have the,
different defense in depth

494
00:20:23,200 --> 00:20:26,120
type of applications that you can do

495
00:20:26,120 --> 00:20:27,939
or protections that you can do,

496
00:20:27,940 --> 00:20:29,390
like geo and I.P restrictions

497
00:20:29,390 --> 00:20:32,670
or using a web application firewall

498
00:20:32,670 --> 00:20:35,860
or using a single sign-on
if it's an internal user.

499
00:20:35,860 --> 00:20:38,580
Again, these are all different, you know,

500
00:20:38,580 --> 00:20:40,830
defense in depth that can be applied

501
00:20:40,830 --> 00:20:42,720
when you're looking at a Front-End Layer.

502
00:20:42,720 --> 00:20:45,530
Now again, we're still in the
context of Serverless, right?

503
00:20:45,530 --> 00:20:47,155
And we're still seeing a lot of things

504
00:20:47,155 --> 00:20:49,450
which we're still doing a lot of things

505
00:20:49,450 --> 00:20:51,680
to things that we don't see necessarily

506
00:20:51,680 --> 00:20:52,960
of how maybe in this case,

507
00:20:52,960 --> 00:20:54,980
Amazon manages their infrastructure.

508
00:20:54,980 --> 00:20:56,510
But what we can do is that

509
00:20:56,510 --> 00:20:58,870
we can have these type of patterns

510
00:20:58,870 --> 00:21:00,370
that will allow our developers,

511
00:21:00,370 --> 00:21:03,479
allow our security professionals
to be able to take it

512
00:21:03,480 --> 00:21:08,380
and apply it in their company
so that they can be secure

513
00:21:08,380 --> 00:21:09,213
in that sense.

514
00:21:09,213 --> 00:21:11,440
I know you think about a
sample S3 Bucket Policy

515
00:21:11,440 --> 00:21:13,060
to be very, very specific

516
00:21:13,060 --> 00:21:15,409
from a least privilege
principle perspective

517
00:21:15,410 --> 00:21:17,830
of saying only allow get object

518
00:21:17,830 --> 00:21:21,620
or only allow these source
I.Ps to reach my bucket.

519
00:21:21,620 --> 00:21:23,870
Again, the reason why is
you wanna be thinking about,

520
00:21:23,870 --> 00:21:25,090
even though it's serverless,

521
00:21:25,090 --> 00:21:27,225
even though there are
things that you don't see,

522
00:21:27,225 --> 00:21:30,820
you don't know how Amazon
manages it or Azure or Google,

523
00:21:30,820 --> 00:21:33,210
you're still being able to doing your part

524
00:21:33,210 --> 00:21:35,910
in making sure that you're
following this Publix Principle,

525
00:21:35,910 --> 00:21:37,970
you're doing these kinds of protections

526
00:21:37,970 --> 00:21:39,680
in the Front-End Layer.

527
00:21:39,680 --> 00:21:42,930
And similarly from a content
distribution perspective

528
00:21:42,930 --> 00:21:45,760
you can have things like security headers,

529
00:21:45,760 --> 00:21:49,650
enforcing T.L.S, you know
H.T.T.P.S to H.T.T.P.S redirects,

530
00:21:49,650 --> 00:21:52,900
and just many, many areas and
these are just some examples

531
00:21:52,900 --> 00:21:53,733
that are there.

532
00:21:53,733 --> 00:21:56,760
Rate Based Rules are
very important, you know,

533
00:21:56,760 --> 00:21:59,000
log parsing, being able to take the logs

534
00:21:59,000 --> 00:22:00,910
and applying, maybe enriching the logs

535
00:22:00,910 --> 00:22:03,550
with certain other information
that you want to add onto it

536
00:22:03,550 --> 00:22:06,570
and then storing into a
centralized search engine.

537
00:22:06,570 --> 00:22:08,760
And that can be very, very important

538
00:22:08,760 --> 00:22:11,670
when people are trying
to search for things

539
00:22:11,670 --> 00:22:13,343
that they feel like are an issue.

540
00:22:14,410 --> 00:22:17,430
And jumping into the next
area of the middleware.

541
00:22:17,430 --> 00:22:19,370
In the middle layer you think about areas

542
00:22:19,370 --> 00:22:22,620
such as Token Validation,
sanitizing inputs.

543
00:22:22,620 --> 00:22:24,020
You know, we have the struts vulnerability

544
00:22:24,020 --> 00:22:24,900
in many other areas.

545
00:22:24,900 --> 00:22:26,960
Again, application being able to take

546
00:22:26,960 --> 00:22:28,380
to standardize the inputs.

547
00:22:28,380 --> 00:22:32,030
Now we saw a demo earlier
where the user allowed somebody

548
00:22:32,030 --> 00:22:35,470
to be able to get into
a shell, a Lambda shell

549
00:22:35,470 --> 00:22:36,860
that they were hosting.

550
00:22:36,860 --> 00:22:38,699
Now, obviously in that case

551
00:22:38,700 --> 00:22:41,500
they were just doing a
direct exec into that shell.

552
00:22:41,500 --> 00:22:44,470
But if you think about it,
that really would be something

553
00:22:44,470 --> 00:22:46,110
like an input validation to say,

554
00:22:46,110 --> 00:22:48,889
what is someone trying to
pass into my A.P.I gateway

555
00:22:48,890 --> 00:22:50,910
or hardware that is being involved.

556
00:22:50,910 --> 00:22:55,270
And do I need to take that
data, standardize the input,

557
00:22:55,270 --> 00:22:59,270
make sure that the input
is what I expect it to be

558
00:22:59,270 --> 00:23:02,870
and then pass it on to
the next step in the flow

559
00:23:02,870 --> 00:23:04,020
of the application.

560
00:23:04,020 --> 00:23:05,590
So though that is very, very crucial

561
00:23:05,590 --> 00:23:06,870
a lot of times people
don't think about it,

562
00:23:06,870 --> 00:23:10,699
but that is very crucial from
a protecting, from an access

563
00:23:10,700 --> 00:23:12,400
and managing that access.

564
00:23:12,400 --> 00:23:15,770
And again, here's a sample J.W.T token.

565
00:23:15,770 --> 00:23:18,340
It's a simple or worth implementation

566
00:23:18,340 --> 00:23:20,870
where you've got specific
group names that I belong to

567
00:23:20,870 --> 00:23:22,500
or what is the audience?

568
00:23:22,500 --> 00:23:23,730
Who's the issuer?

569
00:23:23,730 --> 00:23:25,060
What is the expiry?

570
00:23:25,060 --> 00:23:27,120
And again, validating
those things, you know,

571
00:23:27,120 --> 00:23:30,780
and kinda along those lines,
some of the best practices

572
00:23:30,780 --> 00:23:33,211
when dealing with J.W.T tokens,

573
00:23:33,211 --> 00:23:36,750
they are used across the
board for making sure

574
00:23:36,750 --> 00:23:39,980
that when somebody signs
in like your Facebooks

575
00:23:39,980 --> 00:23:41,640
or you're signing with Google,

576
00:23:41,640 --> 00:23:43,970
lot of times you'll
have to deal with a lot.

577
00:23:43,970 --> 00:23:47,280
And J.W.T is just a way that
they make sure that the user

578
00:23:47,280 --> 00:23:50,080
or who they say they are is
who they are and who it is.

579
00:23:50,080 --> 00:23:52,610
And then when they pass it
on to the Back-End Systems

580
00:23:52,610 --> 00:23:53,479
they can validate it.

581
00:23:53,480 --> 00:23:55,390
Like they're making
sure that they are using

582
00:23:55,390 --> 00:23:57,650
strong little gardens and validating,

583
00:23:57,650 --> 00:23:59,040
making sure that it's not expired

584
00:23:59,040 --> 00:24:01,210
and making sure it's
still the right issuer

585
00:24:01,210 --> 00:24:02,640
and the right audience.

586
00:24:02,640 --> 00:24:04,250
Reducing the scope of the tokens.

587
00:24:04,250 --> 00:24:06,780
Don't allow more than
it's supposed to have.

588
00:24:06,780 --> 00:24:08,530
Again this is just a simple example

589
00:24:09,693 --> 00:24:12,143
of how the J.W.T can
potentially would look like.

590
00:24:13,900 --> 00:24:16,010
And jumping back into the architecture

591
00:24:16,010 --> 00:24:18,710
onto our Back-End Layer perspective,

592
00:24:18,710 --> 00:24:22,160
being able to look at
it on a Database level,

593
00:24:22,160 --> 00:24:24,380
being able to keep the
Database within the V.P.C.

594
00:24:24,380 --> 00:24:26,250
In this example from an Amazon,

595
00:24:26,250 --> 00:24:28,160
obviously different cloud providers

596
00:24:28,160 --> 00:24:30,510
would have their own way of securing it.

597
00:24:30,510 --> 00:24:31,383
Again this is a general principle

598
00:24:31,383 --> 00:24:34,800
you can apply to any cloud vendor.

599
00:24:34,800 --> 00:24:37,590
Encryption at REST, which is very common.

600
00:24:37,590 --> 00:24:40,493
And more than that, they'll
have an encryption, you know,

601
00:24:40,493 --> 00:24:42,770
encryption at REST is
I know a lot of times

602
00:24:42,770 --> 00:24:44,730
traditionally people have done that

603
00:24:44,730 --> 00:24:46,200
when they are thinking of Data center

604
00:24:46,200 --> 00:24:49,240
and so admins having
access to the Data center

605
00:24:49,240 --> 00:24:50,830
to be able to protect the data,

606
00:24:50,830 --> 00:24:52,669
or your laptops getting stolen.

607
00:24:52,670 --> 00:24:56,210
But really Data Level Encryption
is much more important

608
00:24:56,210 --> 00:24:58,750
when you think about from a
cloud provider perspective

609
00:24:58,750 --> 00:25:02,980
is because the Data centers
are pretty well guarded

610
00:25:02,980 --> 00:25:04,670
whether that's Google or Amazon,

611
00:25:04,670 --> 00:25:05,740
being able to get in.

612
00:25:05,740 --> 00:25:06,990
Somebody trying to steal a desk

613
00:25:06,990 --> 00:25:09,170
and knowing which customer that is,

614
00:25:09,170 --> 00:25:12,190
that is huge, that is super extremely hard

615
00:25:12,190 --> 00:25:13,960
for somebody to be able to do that.

616
00:25:13,960 --> 00:25:16,750
But Data Level Protection in a way

617
00:25:16,750 --> 00:25:19,410
even if they get into your system

618
00:25:19,410 --> 00:25:21,330
and they try to explode trait your data,

619
00:25:21,330 --> 00:25:24,500
how do you protect that data
from leaving your system?

620
00:25:24,500 --> 00:25:27,200
Being able to do something
like least privileged roles

621
00:25:27,200 --> 00:25:30,233
meaning that somebody
cannot log in as one user

622
00:25:30,233 --> 00:25:32,120
and try to do a lateral movement

623
00:25:32,120 --> 00:25:34,090
and see how much access
does that user have

624
00:25:34,090 --> 00:25:37,230
within the cloud from an
I.A.M role perspective,

625
00:25:37,230 --> 00:25:38,680
and then being able to do lateral movement

626
00:25:38,680 --> 00:25:40,830
into another application that
they're not allowed to do.

627
00:25:40,830 --> 00:25:42,179
So being able to lock that down

628
00:25:42,180 --> 00:25:44,860
using least privileged
roles, the minimalize roles

629
00:25:44,860 --> 00:25:46,300
that even what we saw in the demo

630
00:25:46,300 --> 00:25:48,940
it was a very, very least privileged role

631
00:25:48,940 --> 00:25:51,443
that had access to that Lambda function.

632
00:25:53,200 --> 00:25:55,670
And, then again, automated
containment is something

633
00:25:55,670 --> 00:25:58,160
that we may wanna think
about if there's a breach,

634
00:25:58,160 --> 00:26:01,220
if there is something
in my, in an instance

635
00:26:01,220 --> 00:26:06,020
that is acting in a way
that I don't expect it to,

636
00:26:06,020 --> 00:26:08,860
what is a quick way of
being able to isolate that

637
00:26:08,860 --> 00:26:10,699
out of the pool of other instances.

638
00:26:10,700 --> 00:26:14,750
Maybe to tag you apply to it,
it has an event based Lambda

639
00:26:14,750 --> 00:26:16,580
that goes in and isolates that instance

640
00:26:16,580 --> 00:26:17,929
takes into Snapchat,

641
00:26:17,930 --> 00:26:19,810
moves it into this external account

642
00:26:19,810 --> 00:26:21,639
and then takes it out of the pool.

643
00:26:21,640 --> 00:26:23,840
And then another server
is added to the pool

644
00:26:23,840 --> 00:26:26,520
so that the business can continue to run,

645
00:26:26,520 --> 00:26:29,470
but now you automatically
contained that one instance

646
00:26:29,470 --> 00:26:30,840
which you're not sure what's going on.

647
00:26:30,840 --> 00:26:33,300
And then you can quarantine
it at that point of time.

648
00:26:33,300 --> 00:26:35,690
You can take it and then you can apply it

649
00:26:35,690 --> 00:26:38,450
to the point where you can
start doing some forensics

650
00:26:38,450 --> 00:26:39,570
on top of that.

651
00:26:39,570 --> 00:26:41,669
Again, there's many ways
to do these kinds of things

652
00:26:41,670 --> 00:26:43,440
but what you should have a plan of action.

653
00:26:43,440 --> 00:26:46,120
How do I secure my Back-End Layer?

654
00:26:46,120 --> 00:26:48,169
You know, where am I
really, my data's protected

655
00:26:48,170 --> 00:26:49,300
in a more than processing.

656
00:26:49,300 --> 00:26:52,300
At some point, it's gonna
rest in my Back-End Layer.

657
00:26:52,300 --> 00:26:55,000
Here's a sample Database Policy.

658
00:26:55,000 --> 00:26:57,630
It gives very specifics about in DynamoDB

659
00:26:57,630 --> 00:27:01,240
I can get item and it's going
to come from the source V.P.C.

660
00:27:01,240 --> 00:27:04,520
Maybe it's a two accounts
you have, two V.P.Cs you have

661
00:27:04,520 --> 00:27:07,180
and you're sharing data
from this DynamoDB instance

662
00:27:07,180 --> 00:27:10,300
to this other Lambda
that wants to query it.

663
00:27:10,300 --> 00:27:13,723
Again, you're isolating it
in a very, very specific way.

664
00:27:15,190 --> 00:27:18,730
And we're talking about
a couple of applications.

665
00:27:18,730 --> 00:27:20,000
You know, one critical thing, you know,

666
00:27:20,000 --> 00:27:23,440
from a practical application
perspective is, you know,

667
00:27:23,440 --> 00:27:24,850
don't boil the ocean, right?

668
00:27:24,850 --> 00:27:27,620
I mean, Serverless is a massive field.

669
00:27:27,620 --> 00:27:29,510
I mean, it's a massive
field because it's got

670
00:27:29,510 --> 00:27:30,830
so many entry points.

671
00:27:30,830 --> 00:27:32,429
You think about Kinesis for streams,

672
00:27:32,430 --> 00:27:34,250
you think about C.D.Ns,

673
00:27:34,250 --> 00:27:37,090
you think about event-based processing.

674
00:27:37,090 --> 00:27:38,040
You think about data lakes

675
00:27:38,040 --> 00:27:40,490
that are even built on top
of Serverless technologies

676
00:27:40,490 --> 00:27:41,920
or managed services.

677
00:27:41,920 --> 00:27:43,900
If you think about that,
it can be overwhelming.

678
00:27:43,900 --> 00:27:45,010
You know, it can be overwhelming

679
00:27:45,010 --> 00:27:48,660
to look at the gamut of
servers or the server

680
00:27:48,660 --> 00:27:52,270
or the opportunities that
cloud providers give us

681
00:27:52,270 --> 00:27:54,379
and say man, how do I secure this?

682
00:27:54,380 --> 00:27:56,680
Because it's such a big footprint.

683
00:27:56,680 --> 00:27:59,230
So I would say don't boil
the ocean in the sense that

684
00:27:59,230 --> 00:28:02,530
make sure you understand there
are some immediate things

685
00:28:02,530 --> 00:28:03,870
that you can fix in your environment.

686
00:28:03,870 --> 00:28:05,530
There are some short-term,

687
00:28:05,530 --> 00:28:06,770
and there are some long-term, right?

688
00:28:06,770 --> 00:28:10,280
Have a strategy around
your security planning

689
00:28:10,280 --> 00:28:13,430
when you are looking at Serverless
and securing the unseen.

690
00:28:13,430 --> 00:28:16,530
I somehow, you know, from
a time-based perspective

691
00:28:16,530 --> 00:28:18,980
you may say it's gonna
be six to eight months.

692
00:28:18,980 --> 00:28:20,440
And that may be a long-term plan.

693
00:28:20,440 --> 00:28:24,640
Again, from a cloud perspective,
that is a long time,

694
00:28:24,640 --> 00:28:27,430
because they keep
changing in their features

695
00:28:27,430 --> 00:28:30,080
and advances in months or weeks,

696
00:28:30,080 --> 00:28:34,000
and even Amazon in many,
many iterations per month.

697
00:28:34,000 --> 00:28:36,720
And so, or even other
providers for that matter.

698
00:28:36,720 --> 00:28:38,360
But you wanna have a plan of saying

699
00:28:38,360 --> 00:28:39,899
my short term is gonna be, you know,

700
00:28:39,900 --> 00:28:41,920
one to two weeks or three weeks.

701
00:28:41,920 --> 00:28:45,470
And then or my immediate
maybe, and then the short-term

702
00:28:45,470 --> 00:28:47,350
maybe three to four
months, and the long-term

703
00:28:47,350 --> 00:28:48,379
maybe four to six months.

704
00:28:48,380 --> 00:28:50,700
Again, you may have a plan
based on your company.

705
00:28:50,700 --> 00:28:52,080
And then the Hybrid Deployments,

706
00:28:52,080 --> 00:28:54,649
again also have its own understanding.

707
00:28:54,650 --> 00:28:56,720
How do I secure the integration points

708
00:28:56,720 --> 00:29:00,070
between my cloud and my Data center.

709
00:29:00,070 --> 00:29:02,230
Things like direct connect or other areas

710
00:29:02,230 --> 00:29:06,220
that you can think about from
that protection perspective.

711
00:29:06,220 --> 00:29:08,820
How does data move from one
environment to the other?

712
00:29:08,820 --> 00:29:12,530
Can my production, a cloud account,

713
00:29:12,530 --> 00:29:16,320
talk to my development
machines in my Data center.

714
00:29:16,320 --> 00:29:17,530
Again, all of those things

715
00:29:17,530 --> 00:29:19,149
have to be taken into consideration.

716
00:29:19,150 --> 00:29:22,280
So along those lines, I wanna
again come back to this side

717
00:29:22,280 --> 00:29:25,410
that we looked at prior,
when we talked about data

718
00:29:25,410 --> 00:29:28,710
and how does data apply
in all of these layers.

719
00:29:28,710 --> 00:29:32,160
And now I wanna think
about how does security

720
00:29:32,160 --> 00:29:34,550
apply in all of these layers.

721
00:29:34,550 --> 00:29:37,210
You think about again, we
looked at EDGE, computing

722
00:29:37,210 --> 00:29:39,010
and data and all of these different layers

723
00:29:39,010 --> 00:29:40,310
in the previous slide,

724
00:29:40,310 --> 00:29:42,399
but we look more from
a perspective of the,

725
00:29:42,400 --> 00:29:44,010
from the lens of a data.

726
00:29:44,010 --> 00:29:46,920
But now we're looking at it
from the lens of security.

727
00:29:46,920 --> 00:29:49,140
And so again, we talked
about intermediate short-term

728
00:29:49,140 --> 00:29:52,570
long-term, and taking things
like the EDGE, you know,

729
00:29:52,570 --> 00:29:55,242
it's like rate limiting
or managing your tush

730
00:29:55,242 --> 00:29:57,149
or doing something like rough

731
00:29:57,150 --> 00:29:59,210
or what is the key
policy that I wanna apply

732
00:29:59,210 --> 00:30:01,050
for A.P.I gateways.

733
00:30:01,050 --> 00:30:03,723
And then similar concepts with compute,

734
00:30:04,710 --> 00:30:06,800
making sure that there's key management,

735
00:30:06,800 --> 00:30:08,770
when I'm dealing with moving of data

736
00:30:08,770 --> 00:30:11,680
that is sensitive or processing
of data that is sensitive.

737
00:30:11,680 --> 00:30:16,680
And similarly areas such
as data itself about

738
00:30:16,770 --> 00:30:18,290
how do I do input standardization

739
00:30:18,290 --> 00:30:20,020
when data is coming into my environment,

740
00:30:20,020 --> 00:30:21,840
do I sanitize the inputs, do I look at it

741
00:30:21,840 --> 00:30:23,879
make sure this is something that I expect

742
00:30:23,880 --> 00:30:25,580
and or discarded, right?

743
00:30:25,580 --> 00:30:28,730
Or pull it for forensics or try to capture

744
00:30:28,730 --> 00:30:30,900
this I.P is sending me a lot of bad data,

745
00:30:30,900 --> 00:30:32,590
I'm gonna put that I.P in quarantine.

746
00:30:32,590 --> 00:30:35,568
I'm gonna talk to my EDGE
Layer and tell CloudFront

747
00:30:35,568 --> 00:30:38,100
to quarantine that I.P for,
you know, for 15 minutes

748
00:30:38,100 --> 00:30:39,169
and then I'm going to allow it

749
00:30:39,170 --> 00:30:41,010
and if it happens again,
I'm going to put it away

750
00:30:41,010 --> 00:30:43,860
for, you know, six hours
or a lot it may be.

751
00:30:43,860 --> 00:30:46,389
So you wanna have that kind
of strategies planned out,

752
00:30:46,390 --> 00:30:49,030
you know, for your environment.

753
00:30:49,030 --> 00:30:50,730
Things like Token Management are back

754
00:30:50,730 --> 00:30:52,050
in a role based access controls.

755
00:30:52,050 --> 00:30:55,629
That's so crucial when you're
dealing with Serverless

756
00:30:55,630 --> 00:30:59,020
because what access you
give that one small entity

757
00:30:59,020 --> 00:31:02,770
it's gonna carry on for
subsequent calls by that entity.

758
00:31:02,770 --> 00:31:04,660
So you have a Lambda
function that fires an event,

759
00:31:04,660 --> 00:31:07,330
and you may have a thousand
Lambda functions that fires

760
00:31:07,330 --> 00:31:09,540
because there's files
coming in all the time.

761
00:31:09,540 --> 00:31:12,350
And that one Lambda or the
permission that's assigned

762
00:31:12,350 --> 00:31:14,810
to that Lambda function
is going to inherit

763
00:31:14,810 --> 00:31:17,610
for any other Lambda
that gets fired as well.

764
00:31:17,610 --> 00:31:19,479
And then of course, you
got a global context,

765
00:31:19,480 --> 00:31:23,230
meaning that anytime I declare
a variable in the Lambda,

766
00:31:23,230 --> 00:31:26,320
if it's global, the next Lambda
can pick up on the variable

767
00:31:26,320 --> 00:31:27,330
and use it as well.

768
00:31:27,330 --> 00:31:30,840
So again, there's a lot of
things that goes in those areas,

769
00:31:30,840 --> 00:31:33,290
or even from a development perspective,

770
00:31:33,290 --> 00:31:35,511
being able to do C.I.C.T automation

771
00:31:35,511 --> 00:31:38,027
and some of the tools that are available

772
00:31:38,027 --> 00:31:42,060
for securing this type
of, or applying security

773
00:31:42,060 --> 00:31:44,129
in Serverless areas as well.

774
00:31:44,130 --> 00:31:46,300
Again, this is just a very busy slide,

775
00:31:46,300 --> 00:31:50,600
but I'm hoping it will be a
help so that you can look at it

776
00:31:50,600 --> 00:31:52,840
more from applying security

777
00:31:52,840 --> 00:31:54,270
in the sense of different layers,

778
00:31:54,270 --> 00:31:56,810
rather than thinking of
security as this one solution

779
00:31:56,810 --> 00:31:59,120
or one-stop shop for anywhere

780
00:31:59,120 --> 00:32:01,139
you wanna put it in the
cloud saying, you know what?

781
00:32:01,140 --> 00:32:04,140
I really wanna think of
security as breaking it down

782
00:32:04,140 --> 00:32:05,810
by these different towers.

783
00:32:05,810 --> 00:32:09,200
And each tower has a different
way I approach security

784
00:32:09,200 --> 00:32:10,290
in the Serverless space.

785
00:32:10,290 --> 00:32:13,840
And that is crucial mindset
that as security professionals

786
00:32:13,840 --> 00:32:16,709
that we have to have
or even as developers,

787
00:32:16,710 --> 00:32:19,740
we have to have to say,
well, I'm a developer,

788
00:32:19,740 --> 00:32:22,690
I'm gonna be writing
code for processing data.

789
00:32:22,690 --> 00:32:24,040
Well, you have to think about

790
00:32:24,040 --> 00:32:25,409
how do I standardize my inputs?

791
00:32:25,410 --> 00:32:26,780
How's my data coming in, you know,

792
00:32:26,780 --> 00:32:28,270
who's checking it at the door?

793
00:32:28,270 --> 00:32:30,020
And you should ask
those questions as well.

794
00:32:30,020 --> 00:32:34,290
Again, we definitely have to
see this as a joint effort.

795
00:32:34,290 --> 00:32:37,350
That ties me into some
of these final thoughts.

796
00:32:37,350 --> 00:32:39,590
When you think about Serverless,

797
00:32:40,460 --> 00:32:42,120
what are you really trying to solve?

798
00:32:42,120 --> 00:32:45,649
You know, we saw the first
picture of that house

799
00:32:47,126 --> 00:32:50,870
with the most important
entity in that picture

800
00:32:50,870 --> 00:32:53,260
was that person, that is the
person we're trying to protect,

801
00:32:53,260 --> 00:32:54,870
that's what we're trying to solve.

802
00:32:54,870 --> 00:32:57,399
And Serverless is a great, you know,

803
00:32:57,400 --> 00:33:00,630
great paradigm that the
cloud has brought for us.

804
00:33:00,630 --> 00:33:02,930
And it gives us so much opportunities

805
00:33:02,930 --> 00:33:05,580
to be able to secure data,

806
00:33:05,580 --> 00:33:08,540
to be able to do a lot
of interesting things

807
00:33:08,540 --> 00:33:10,290
from an architecture perspective,

808
00:33:10,290 --> 00:33:12,550
being able to bring in a streaming data,

809
00:33:12,550 --> 00:33:13,950
bring in a mashups.

810
00:33:13,950 --> 00:33:16,890
And again, there's the
potential is massive.

811
00:33:16,890 --> 00:33:18,490
But you really wanna take a step back

812
00:33:18,490 --> 00:33:19,770
as a security professional

813
00:33:19,770 --> 00:33:22,090
or trying to understand
from a security perspective

814
00:33:22,090 --> 00:33:26,139
our mindset to say, what am
I really trying to solve?

815
00:33:26,140 --> 00:33:27,740
You know, am I really trying to solve

816
00:33:27,740 --> 00:33:29,083
where I'm trying to protect the data

817
00:33:29,083 --> 00:33:30,740
when it comes into the door

818
00:33:30,740 --> 00:33:31,963
or I'm trying to solve
and I protect the data

819
00:33:31,963 --> 00:33:33,360
towards the end.

820
00:33:33,360 --> 00:33:36,639
Now business wants to do
something very different

821
00:33:36,640 --> 00:33:38,660
than what a person who's developing

822
00:33:38,660 --> 00:33:40,500
or personal security wants to do.

823
00:33:40,500 --> 00:33:42,160
The business may say that, hey,

824
00:33:42,160 --> 00:33:44,950
I want them to have the
most easy experience

825
00:33:44,950 --> 00:33:46,670
from a user experience perspective.

826
00:33:46,670 --> 00:33:48,730
They get in, they click
it, they get a magic link.

827
00:33:48,730 --> 00:33:50,350
They go and do their stuff.

828
00:33:50,350 --> 00:33:52,110
But the security
professional would be like,

829
00:33:52,110 --> 00:33:53,025
well, that is risky and
that's not something

830
00:33:53,026 --> 00:33:56,530
what we wanna do, so again,

831
00:33:56,530 --> 00:33:58,639
you wanna have a middle
ground where you say

832
00:33:58,640 --> 00:34:00,830
what compensating controls do I have

833
00:34:00,830 --> 00:34:02,970
if the business wants to go this route?

834
00:34:02,970 --> 00:34:04,900
And again, I'm here to
support the business,

835
00:34:04,900 --> 00:34:07,010
but also making sure that I can give them

836
00:34:07,010 --> 00:34:08,710
and align them to certain controls

837
00:34:08,710 --> 00:34:11,469
that'll protect us as a company.

838
00:34:11,469 --> 00:34:12,919
And so that is very crucial.

839
00:34:12,920 --> 00:34:14,367
What are you trying to solve?

840
00:34:14,367 --> 00:34:17,850
And again, here, this
is a very familiar topic

841
00:34:17,850 --> 00:34:19,159
about the shared security model

842
00:34:19,159 --> 00:34:21,500
where the public providers say, hey,

843
00:34:21,500 --> 00:34:24,510
we will manage the infrastructure
that your stuff sits on,

844
00:34:24,510 --> 00:34:27,370
that your data sits on, or
your processing happens.

845
00:34:27,370 --> 00:34:28,489
That is our responsibility,

846
00:34:28,489 --> 00:34:29,520
we'll protect the Data center,

847
00:34:29,520 --> 00:34:31,960
we'll make sure there's
cooling, there's backup systems,

848
00:34:31,960 --> 00:34:34,739
there's U.P.S and making
sure that it's secure,

849
00:34:34,739 --> 00:34:37,429
your data is not gonna bleed
into another customer's data.

850
00:34:37,429 --> 00:34:39,779
We're gonna make sure that
all of the bottom line

851
00:34:39,780 --> 00:34:40,612
is protected.

852
00:34:40,612 --> 00:34:43,399
But anything is secured
and on top of that,

853
00:34:43,400 --> 00:34:45,139
everything is on us, right?

854
00:34:45,139 --> 00:34:47,770
So if you put in data and
somebody puts an S3 Bucket

855
00:34:47,770 --> 00:34:51,630
and they click it as public,
and there's a breach, you know,

856
00:34:51,630 --> 00:34:53,020
Amazon is not gonna come and saying,

857
00:34:53,020 --> 00:34:55,040
well, ops, sorry, we
shouldn't have done that.

858
00:34:55,040 --> 00:34:56,860
But that's really a customer engagement,

859
00:34:56,860 --> 00:34:59,070
that's really how the customer's engage

860
00:34:59,070 --> 00:35:03,110
by using that cloud provider
and made it publicly exposed.

861
00:35:03,110 --> 00:35:06,840
And that really comes under
our responsibility, right?

862
00:35:06,840 --> 00:35:09,180
That's not the responsibility
of the provider,

863
00:35:09,180 --> 00:35:10,750
it's the responsibility of the user

864
00:35:10,750 --> 00:35:14,070
or the other company
that's using that service.

865
00:35:14,070 --> 00:35:16,680
And DevOps engagement is crucial.

866
00:35:16,680 --> 00:35:18,370
You know, it's not a matter of like, okay

867
00:35:18,370 --> 00:35:21,040
we're a gate as a security, professional.

868
00:35:21,040 --> 00:35:22,750
Let developers come after they're done.

869
00:35:22,750 --> 00:35:25,840
No, we have to get from the ground up.

870
00:35:25,840 --> 00:35:27,810
We have to look at the
data in those layers.

871
00:35:27,810 --> 00:35:29,390
You have to look at it
from the perspective

872
00:35:29,390 --> 00:35:31,810
of how do I help the
developers, educate them

873
00:35:31,810 --> 00:35:33,560
and help them be security aware.

874
00:35:33,560 --> 00:35:35,620
And be part of their sprint cycle.

875
00:35:35,620 --> 00:35:37,170
I mean, that's something that it's,

876
00:35:37,170 --> 00:35:40,940
we're seeing the revolution
of the security mindset

877
00:35:40,940 --> 00:35:43,520
delve into DevSecOps and
multiple other initiatives

878
00:35:43,520 --> 00:35:45,420
where we really need to plug ourselves

879
00:35:45,420 --> 00:35:47,560
into a sprint cycle to say, hey,

880
00:35:47,560 --> 00:35:48,850
what are you working on?

881
00:35:48,850 --> 00:35:50,690
What are some things that
can have an implication

882
00:35:50,690 --> 00:35:51,523
on security?

883
00:35:51,523 --> 00:35:53,170
And what are some things that I can do

884
00:35:53,170 --> 00:35:55,750
to help you be successful so that

885
00:35:55,750 --> 00:35:57,560
you're not trying to go out the door

886
00:35:57,560 --> 00:35:59,390
and then security comes and says, oh,

887
00:35:59,390 --> 00:36:00,790
you shouldn't have done this, right?

888
00:36:00,790 --> 00:36:03,490
So that is a very bad taste people get

889
00:36:03,490 --> 00:36:06,100
when that kind of engagement
is there, a lot of friction,

890
00:36:06,100 --> 00:36:07,350
a lot of challenges,

891
00:36:07,350 --> 00:36:09,150
but really need to have DevOps engagement

892
00:36:09,150 --> 00:36:12,090
that is very, very
crucial in this scenario.

893
00:36:12,090 --> 00:36:14,930
Not only for securing
it, but also education

894
00:36:14,930 --> 00:36:17,850
and making people aware
of those type of layers

895
00:36:17,850 --> 00:36:19,839
and different ways of addressing it.

896
00:36:19,840 --> 00:36:22,940
Again, we looked at the
security in Serverless

897
00:36:22,940 --> 00:36:24,933
based on the threat, what is the threat?

898
00:36:24,933 --> 00:36:27,640
Am I on the EDGE layer,
the threat is higher.

899
00:36:27,640 --> 00:36:28,569
Am I in the Back-end?

900
00:36:28,570 --> 00:36:29,590
The threat is there,

901
00:36:29,590 --> 00:36:31,600
but it's a different
type of threat, right?

902
00:36:31,600 --> 00:36:34,140
It's not necessarily lower
because you're protecting data

903
00:36:34,140 --> 00:36:36,359
and those can be very sensitive data,

904
00:36:36,360 --> 00:36:37,860
but the threat is there,

905
00:36:37,860 --> 00:36:39,010
but it's a different type of threat,

906
00:36:39,010 --> 00:36:40,530
maybe more of an insider threat,

907
00:36:40,530 --> 00:36:43,210
more of an accidental exfiltration

908
00:36:43,210 --> 00:36:46,340
or other methods where if
somebody gets into the door

909
00:36:46,340 --> 00:36:47,890
if they get there, then obviously

910
00:36:47,890 --> 00:36:50,720
it's a much more critical
risk at that point of time.

911
00:36:50,720 --> 00:36:53,810
So it's based on a Threat Vector.

912
00:36:53,810 --> 00:36:56,460
And finally, you know, I
just want to leave you all

913
00:36:56,460 --> 00:36:59,310
with this quote, you
know, Serveless security

914
00:36:59,310 --> 00:37:03,400
is about anticipating the journey
more than reaching a goal.

915
00:37:03,400 --> 00:37:04,903
You know, we're not trying
to get to a goal, right?

916
00:37:04,903 --> 00:37:07,080
You can say, hey, I'm secure.

917
00:37:07,080 --> 00:37:09,000
Well, Amazon just released a new product

918
00:37:09,000 --> 00:37:11,070
or a Google just released a new feature

919
00:37:11,070 --> 00:37:13,420
or Azure released a new service.

920
00:37:13,420 --> 00:37:15,060
And we're back to square one.

921
00:37:15,060 --> 00:37:16,370
No, you know, you have to really think

922
00:37:16,370 --> 00:37:19,319
about Serverless security
is anticipating the journey.

923
00:37:19,320 --> 00:37:21,700
You're looking at and saying,
hey, here's where I am,

924
00:37:21,700 --> 00:37:25,080
and here's where I can improve
and I'm constantly iterating

925
00:37:25,080 --> 00:37:26,580
on that thought process, right?

926
00:37:26,580 --> 00:37:28,220
You're anticipating the journey

927
00:37:28,220 --> 00:37:30,319
more than trying to reach a goal, right?

928
00:37:30,320 --> 00:37:33,660
It's a process and it's a
strategy that you want to have

929
00:37:33,660 --> 00:37:35,890
in all of the stuff
that we've talked about

930
00:37:35,890 --> 00:37:38,640
that can help you get to that end state

931
00:37:38,640 --> 00:37:42,850
of being able to have
a plan of being secure

932
00:37:42,850 --> 00:37:45,553
in securing gangs or in
the serverless world.

933
00:37:46,682 --> 00:37:48,439
And with that I would really love to,

934
00:37:48,440 --> 00:37:49,930
again have the conversation

935
00:37:49,930 --> 00:37:53,230
and really thank you for
listening in this topic

936
00:37:53,230 --> 00:37:54,670
about Serverless Security

937
00:37:54,670 --> 00:37:56,650
and looking forward to
hearing some questions.

938
00:37:56,650 --> 00:37:57,660
And if you have any questions,

939
00:37:57,660 --> 00:37:59,089
I'll be glad to answer that as well.

940
00:37:59,090 --> 00:37:59,923
Thank you.

