1
00:00:01,080 --> 00:00:02,009
- Hello everybody.

2
00:00:02,009 --> 00:00:03,699
My name is Lenny Zeltser,

3
00:00:03,700 --> 00:00:05,360
I'm the CISO at Axonius

4
00:00:05,360 --> 00:00:08,000
and I'm the faculty
fellow at SANS Institute.

5
00:00:08,000 --> 00:00:10,750
I've been analyzing
malware for a long time.

6
00:00:10,750 --> 00:00:13,129
And for me, the challenge often times

7
00:00:13,130 --> 00:00:17,090
involves knowing the best way
to start my investigation.

8
00:00:17,090 --> 00:00:20,300
And so this is the topic
I'd like to cover with you.

9
00:00:20,300 --> 00:00:23,270
How you can start analyzing malware,

10
00:00:23,270 --> 00:00:27,360
that might be designed to
pursue your Windows systems

11
00:00:27,360 --> 00:00:32,299
but you will perform your
analysis using Linux-based tools

12
00:00:32,299 --> 00:00:35,029
which I think are
designed particularly well

13
00:00:35,030 --> 00:00:36,040
for this kind of work.

14
00:00:36,040 --> 00:00:39,440
So that's what we will
explore in this presentation.

15
00:00:39,440 --> 00:00:41,470
You come across a suspicious file,

16
00:00:41,470 --> 00:00:45,489
it perhaps exists on a Windows
computer in your enterprise.

17
00:00:45,490 --> 00:00:47,250
And you're wondering,
what is this file about?

18
00:00:47,250 --> 00:00:48,500
Is it malicious?

19
00:00:48,500 --> 00:00:51,010
And if it is malicious, what
might be it's capabilities?

20
00:00:51,010 --> 00:00:53,440
How could I detect it elsewhere

21
00:00:53,440 --> 00:00:54,890
in my enterprise environment?

22
00:00:54,890 --> 00:00:57,970
And how could I analyze it more deeply,

23
00:00:57,970 --> 00:01:01,170
if I decide to do that?

24
00:01:01,170 --> 00:01:06,170
Well, Linux can accommodate
a wide range of tools

25
00:01:06,800 --> 00:01:08,910
and techniques that you will find useful

26
00:01:08,910 --> 00:01:11,740
for analyzing all sorts of malware

27
00:01:11,740 --> 00:01:15,640
including malicious Windows executables.

28
00:01:15,640 --> 00:01:19,210
Now, true to Linux or Unix philosophy,

29
00:01:19,210 --> 00:01:23,330
a lot of these tools are really
good at one particular task

30
00:01:23,330 --> 00:01:26,010
and are not good at another type of task.

31
00:01:26,010 --> 00:01:28,170
Which is why when you're trying to use

32
00:01:28,170 --> 00:01:30,910
a Unix or Linux-based toolkit,

33
00:01:30,910 --> 00:01:34,679
it is very helpful to know
what tools are available?

34
00:01:34,680 --> 00:01:36,070
How will we use them?

35
00:01:36,070 --> 00:01:39,710
And under what circumstances
will one tool work better

36
00:01:39,710 --> 00:01:40,949
than the other?

37
00:01:40,950 --> 00:01:43,970
And that's what I'd like to
share with you in this session.

38
00:01:43,970 --> 00:01:45,470
My hope is that I will show you

39
00:01:45,470 --> 00:01:49,950
how to get started analyzing
Windows-based malware

40
00:01:49,950 --> 00:01:52,660
in a Linux environment.

41
00:01:52,660 --> 00:01:56,890
My hope is to show you just
some of the tools and techniques

42
00:01:56,890 --> 00:01:59,540
that will get you started learning

43
00:01:59,540 --> 00:02:03,890
about this kind of work,
in your own environment.

44
00:02:03,890 --> 00:02:06,910
And for my demos, for my discussion,

45
00:02:06,910 --> 00:02:10,859
I will use a Linux-based
toolkit called REMnux

46
00:02:10,860 --> 00:02:13,960
that I created and continue to maintain.

47
00:02:13,960 --> 00:02:16,440
This is available as
an open source project.

48
00:02:16,440 --> 00:02:17,380
And you can just go

49
00:02:17,380 --> 00:02:20,640
to REMnux.org to download
a copy of REMnux.

50
00:02:20,640 --> 00:02:21,880
And this way, you will have

51
00:02:21,880 --> 00:02:24,326
hundreds of malware analysis tools,

52
00:02:24,326 --> 00:02:26,660
pre-installed, pre-configured,

53
00:02:26,660 --> 00:02:28,960
and we're going to use just a few of them

54
00:02:28,960 --> 00:02:30,403
in this particular session.

55
00:02:32,360 --> 00:02:36,420
If you have not had a chance
to install a copy of REMnux,

56
00:02:36,420 --> 00:02:38,790
know that there are several
ways in which you can do it.

57
00:02:38,790 --> 00:02:41,269
It's available as a
prebuilt virtual appliance

58
00:02:41,270 --> 00:02:43,400
that you can run in
your favorite hypervisor

59
00:02:43,400 --> 00:02:45,700
such as VMware or VirtualBox.

60
00:02:45,700 --> 00:02:46,980
You can add REMnux

61
00:02:46,980 --> 00:02:49,920
to an existing Ubuntu-based
compatible system.

62
00:02:49,920 --> 00:02:53,910
You can install REMnux in a
headless cloud environment.

63
00:02:53,910 --> 00:02:57,020
You can even run REMnux
as a Docker container.

64
00:02:57,020 --> 00:03:00,010
So my point is you have
these tools available to you,

65
00:03:00,010 --> 00:03:02,712
pre-installed, pre-configured
get a copy of them,

66
00:03:02,712 --> 00:03:05,970
listen to this session.

67
00:03:05,970 --> 00:03:08,250
And if you feel so inclined,

68
00:03:08,250 --> 00:03:09,930
try to repeat some of the steps

69
00:03:09,930 --> 00:03:12,480
I'm about to show you
in your own environment.

70
00:03:12,480 --> 00:03:15,350
Now I will show you a bunch of slides,

71
00:03:15,350 --> 00:03:17,630
but more importantly I want to show you

72
00:03:17,630 --> 00:03:20,090
some of these tools and
techniques in action.

73
00:03:20,090 --> 00:03:24,060
And we will do this using
a real world malware sample

74
00:03:24,060 --> 00:03:28,760
that perhaps a bit
unimaginatively is called Sample.

75
00:03:28,760 --> 00:03:31,829
Now I have a copy of this sample

76
00:03:31,830 --> 00:03:34,640
available in my environment.

77
00:03:34,640 --> 00:03:36,410
It is in my environment,

78
00:03:36,410 --> 00:03:39,780
set up as a password protected 7-Zip file.

79
00:03:39,780 --> 00:03:42,450
And I'm going to extract
it from its captivity,

80
00:03:42,450 --> 00:03:44,880
so that it's available to me.

81
00:03:44,880 --> 00:03:47,549
You will be able to get a
copy of this malware sample

82
00:03:47,550 --> 00:03:49,060
at the end of this session.

83
00:03:49,060 --> 00:03:51,639
And if you decide to
experiment with these tools,

84
00:03:51,639 --> 00:03:55,470
you will need to extract
the sample yourselves

85
00:03:55,470 --> 00:03:57,020
in your environment.

86
00:03:57,020 --> 00:03:59,400
And the password for the 7-Zip archive

87
00:03:59,400 --> 00:04:01,670
would be the word, malware.

88
00:04:01,670 --> 00:04:04,660
So here I extracted a copy
of this malware sample

89
00:04:04,660 --> 00:04:06,799
it's called sample.exe.

90
00:04:06,800 --> 00:04:11,800
And in case you're curious,
we can use this SHA-256 hash

91
00:04:11,810 --> 00:04:14,663
as the digital fingerprint of this file.

92
00:04:15,800 --> 00:04:17,839
Now, what kind of a file is it?

93
00:04:17,839 --> 00:04:21,349
It's extension implies that
it's a Windows executable.

94
00:04:21,350 --> 00:04:24,330
And one of the many tools
you can use to examine

95
00:04:24,330 --> 00:04:26,580
the nature of the file that
you're about to analyze

96
00:04:26,580 --> 00:04:28,349
is called TrID.

97
00:04:28,350 --> 00:04:33,350
TrID comes with a database
of file identifiers

98
00:04:33,510 --> 00:04:37,730
and it is quite good at
determining a variety of file types

99
00:04:37,730 --> 00:04:39,540
using several different techniques.

100
00:04:39,540 --> 00:04:44,033
And so according to TrID,
this is a Windows executable.

101
00:04:44,033 --> 00:04:47,220
That is to a very high
degree of likelihood.

102
00:04:47,220 --> 00:04:52,080
And indeed, this is indeed a
real world Windows executable

103
00:04:52,080 --> 00:04:55,020
that we will be analyzing to some extent.

104
00:04:55,020 --> 00:04:58,570
My goal is to not analyze this
particular malware sample,

105
00:04:58,570 --> 00:05:01,632
but rather to use this malware
sample as an opportunity

106
00:05:01,632 --> 00:05:04,670
to tell you about a variety of techniques

107
00:05:04,670 --> 00:05:07,540
and tools to get you started
doing this kind of work,

108
00:05:07,540 --> 00:05:08,900
in your own environment.

109
00:05:08,900 --> 00:05:13,479
And so, here are the steps
that I want you to consider

110
00:05:13,480 --> 00:05:17,277
when you encounter a suspicious
file like sample.exe.

111
00:05:18,300 --> 00:05:20,450
What I'd like to begin with is

112
00:05:20,450 --> 00:05:23,780
examining starting static
properties of this file

113
00:05:23,780 --> 00:05:26,260
in my environment to assess its nature,

114
00:05:26,260 --> 00:05:27,870
to determine what are the chances

115
00:05:27,870 --> 00:05:29,380
that it's actually malicious.

116
00:05:29,380 --> 00:05:33,190
And if it is malicious, to understand what

117
00:05:33,190 --> 00:05:36,969
threat might it pose to my end users.

118
00:05:36,970 --> 00:05:40,790
What ways are available to me to detect

119
00:05:40,790 --> 00:05:43,780
the presence of this malicious
program in my environment?

120
00:05:43,780 --> 00:05:46,859
And to understand a bit about
the nature of the program

121
00:05:46,860 --> 00:05:49,110
and how I might analyze it further.

122
00:05:49,110 --> 00:05:53,430
Next, I might look at
certain aspects of the code

123
00:05:53,430 --> 00:05:54,800
of this malicious executable.

124
00:05:54,800 --> 00:05:57,260
At least to try to get a general sense

125
00:05:57,260 --> 00:05:59,820
for its malicious
capabilities going beyond

126
00:05:59,820 --> 00:06:03,099
looking at purely static
properties or metadata

127
00:06:03,100 --> 00:06:03,970
about this file.

128
00:06:03,970 --> 00:06:07,030
And then, I like to examine

129
00:06:07,030 --> 00:06:10,330
how this program runs specifically,

130
00:06:10,330 --> 00:06:11,490
how it interacts with the network.

131
00:06:11,490 --> 00:06:12,950
Now to do that final step,

132
00:06:12,950 --> 00:06:16,300
I will need to add a
Window system into my lab,

133
00:06:16,300 --> 00:06:19,070
if I'm going to actually run this malware

134
00:06:19,070 --> 00:06:20,830
in a controlled isolated environment

135
00:06:20,830 --> 00:06:23,750
and observe it's network interactions.

136
00:06:23,750 --> 00:06:26,230
These steps are just the beginning,

137
00:06:26,230 --> 00:06:29,390
they formed the foundation
for you deciding

138
00:06:29,390 --> 00:06:32,979
whether to analyze this
malicious program further.

139
00:06:32,980 --> 00:06:34,210
And if you decide to do it,

140
00:06:34,210 --> 00:06:36,409
what you learn through these steps

141
00:06:36,410 --> 00:06:38,540
that I'm going to discuss
with you in this session,

142
00:06:38,540 --> 00:06:41,500
then you will know or formulate some ideas

143
00:06:41,500 --> 00:06:43,800
for how to examine them
using other techniques

144
00:06:43,800 --> 00:06:46,270
perhaps on a Windows-based computer,

145
00:06:46,270 --> 00:06:48,229
if you decide to debug this malware

146
00:06:48,230 --> 00:06:49,420
or otherwise examined it,

147
00:06:49,420 --> 00:06:50,660
but those types of steps

148
00:06:50,660 --> 00:06:53,440
are outside the scope of
this particular session.

149
00:06:53,440 --> 00:06:56,120
So the approach in this session is,

150
00:06:56,120 --> 00:07:01,120
for me to show you techniques,
tools, ideas as live demos,

151
00:07:01,420 --> 00:07:03,240
whenever possible.

152
00:07:03,240 --> 00:07:08,240
I have captured all of these
demos in screenshot forms

153
00:07:08,270 --> 00:07:11,609
so that if you decide to
review the session later on,

154
00:07:11,610 --> 00:07:14,320
you can download the slides that I'm using

155
00:07:14,320 --> 00:07:16,920
and go through them at your own time,

156
00:07:16,920 --> 00:07:19,270
at your own pace, in your own environment.

157
00:07:19,270 --> 00:07:21,590
And there will be some additional details

158
00:07:21,590 --> 00:07:24,760
in the slides that I won't
have time to get into

159
00:07:24,760 --> 00:07:25,781
during this live session.

160
00:07:25,781 --> 00:07:29,210
But I designed the
slides to be the takeaway

161
00:07:29,210 --> 00:07:32,830
that you can use for
further study of this topic.

162
00:07:32,830 --> 00:07:33,940
So let's get going

163
00:07:33,940 --> 00:07:38,160
and we will start by
examining static properties

164
00:07:38,160 --> 00:07:39,650
of a suspicious file.

165
00:07:39,650 --> 00:07:43,090
Now I'm going to use
sample.exe for my examples

166
00:07:43,090 --> 00:07:45,820
but this is the kind of thing
that you would want to do

167
00:07:45,820 --> 00:07:47,860
with any suspicious Windows executable

168
00:07:47,860 --> 00:07:50,300
that you bring into your Linux-based lab,

169
00:07:50,300 --> 00:07:53,570
such as the one that
I'm using in my demos,

170
00:07:53,570 --> 00:07:54,962
it's based on REMnux.

171
00:07:56,620 --> 00:08:00,240
We used already one tool
to get the general sense

172
00:08:00,240 --> 00:08:03,260
for what kind of a file this is,

173
00:08:03,260 --> 00:08:04,890
that tool was TrID,

174
00:08:04,890 --> 00:08:06,830
another similar tool is file,

175
00:08:06,830 --> 00:08:09,240
we'll use yara-rules to identify

176
00:08:09,240 --> 00:08:10,820
some of the riskier operations

177
00:08:10,820 --> 00:08:13,270
that the program might
be capable of performing.

178
00:08:13,270 --> 00:08:16,599
And I'll show you clamscan
and signsrch as well.

179
00:08:16,600 --> 00:08:18,740
So let me show this to you live,

180
00:08:18,740 --> 00:08:21,850
as a starting point, just use file.

181
00:08:21,850 --> 00:08:25,100
File, just look at file,

182
00:08:25,100 --> 00:08:28,173
let's do it like this file sample.exe

183
00:08:31,290 --> 00:08:32,679
and just like TrID,

184
00:08:32,679 --> 00:08:36,479
file gets a general sense for
the kind of program this is,

185
00:08:36,480 --> 00:08:38,409
as we expected it's a Windows executable.

186
00:08:38,409 --> 00:08:40,809
Apparently compiled as a 32-bit program.

187
00:08:40,809 --> 00:08:44,089
And file also tells us that this file,

188
00:08:44,090 --> 00:08:47,230
appears to be compressed with
something called PECompact2.

189
00:08:47,230 --> 00:08:48,520
If you've never heard of such a thing,

190
00:08:48,520 --> 00:08:50,170
you would probably look it up online

191
00:08:50,170 --> 00:08:52,439
and you would learn that PECompact2

192
00:08:52,440 --> 00:08:55,490
is a packer that sometimes malware authors

193
00:08:55,490 --> 00:08:58,880
might use to conceal the
nature of the original code

194
00:08:58,880 --> 00:09:01,500
that they're trying to
conceal from malware analysts

195
00:09:01,500 --> 00:09:02,880
and our tools.

196
00:09:02,880 --> 00:09:05,410
That's something to
file for later perhaps,

197
00:09:05,410 --> 00:09:07,939
if you decide to debug this program

198
00:09:07,940 --> 00:09:10,280
on a Windows system, you
might need to determine

199
00:09:10,280 --> 00:09:12,880
how to bypass the
protection of this packer.

200
00:09:12,880 --> 00:09:16,520
Now something else, that
I wanted to mention to you

201
00:09:16,520 --> 00:09:19,560
is that it is useful to
begin your investigation

202
00:09:19,560 --> 00:09:23,680
by scanning your file,
using some antivirus tool.

203
00:09:23,680 --> 00:09:27,510
And on REMnux, I have a ClamAV installed.

204
00:09:27,510 --> 00:09:30,600
It's a free open-source
based antivirus tool

205
00:09:30,600 --> 00:09:33,570
that focuses its detection on signatures.

206
00:09:33,570 --> 00:09:34,630
But you know what?

207
00:09:34,630 --> 00:09:37,090
I like signatures as the starting point

208
00:09:37,090 --> 00:09:41,022
for my investigation because if ClamAV,

209
00:09:41,022 --> 00:09:43,230
identifies that this is malware,

210
00:09:43,230 --> 00:09:44,630
now I know that I'm probably

211
00:09:44,630 --> 00:09:47,300
not gonna be wasting my time examining it.

212
00:09:47,300 --> 00:09:52,300
And if ClamAV gives me the
name of the malware family,

213
00:09:53,820 --> 00:09:55,890
that gives me a starting point

214
00:09:55,890 --> 00:09:57,430
for gathering additional data,

215
00:09:57,430 --> 00:09:59,010
additional data perhaps using

216
00:09:59,010 --> 00:10:00,939
open source intelligence gathering data,

217
00:10:00,940 --> 00:10:03,720
gathering techniques,
like Googling things.

218
00:10:03,720 --> 00:10:04,710
So ClamAV says,

219
00:10:04,710 --> 00:10:08,703
hey this matches a signature
of some malware called Shyape.

220
00:10:09,970 --> 00:10:12,970
And now, I have something
that I could examine

221
00:10:14,710 --> 00:10:15,960
by doing some Googling to see,

222
00:10:15,960 --> 00:10:18,590
what is this Shyape thing about.

223
00:10:18,590 --> 00:10:19,910
Now, another tool that I thought

224
00:10:19,910 --> 00:10:23,083
I'd mentioned to you briefly
is a tool called signsrch,

225
00:10:24,170 --> 00:10:26,632
which looks for patterns related to,

226
00:10:28,120 --> 00:10:32,590
cryptographic operations
or compression or encoding.

227
00:10:32,590 --> 00:10:35,500
And sometimes it's useful to
know if you will be dealing

228
00:10:35,500 --> 00:10:37,400
with specific cryptographic techniques

229
00:10:38,500 --> 00:10:41,860
for later aspects of your
malware analysis process.

230
00:10:41,860 --> 00:10:44,000
And in this case signsrch tells us

231
00:10:44,000 --> 00:10:48,900
that it identifies some SSH RSA key

232
00:10:48,900 --> 00:10:51,810
or algorithm within this program.

233
00:10:51,810 --> 00:10:54,319
Again, not something that
we'll act upon right now

234
00:10:54,320 --> 00:10:57,940
but if in the future I
was planning to do some

235
00:10:57,940 --> 00:10:59,090
debugging of this malware,

236
00:10:59,090 --> 00:11:01,330
then this might give you some
ideas for what to look for

237
00:11:01,330 --> 00:11:02,292
if I'm trying to understand

238
00:11:02,292 --> 00:11:06,430
how does this program use cryptography

239
00:11:06,430 --> 00:11:10,160
to protect itself or perhaps
to encrypt end user's files.

240
00:11:10,160 --> 00:11:11,520
There are a lot of ways in which malware

241
00:11:11,520 --> 00:11:14,150
could use cryptography
and signsrch gives me

242
00:11:14,150 --> 00:11:17,660
signatures of such algorithms
present within the file

243
00:11:17,660 --> 00:11:18,969
that I'm examining.

244
00:11:18,970 --> 00:11:20,670
So those are a way

245
00:11:20,670 --> 00:11:23,610
to gather some background
static properties,

246
00:11:23,610 --> 00:11:25,550
information about this file.

247
00:11:25,550 --> 00:11:27,900
Now, other tools that I wanted to share

248
00:11:27,900 --> 00:11:30,280
with you examine static
properties of files

249
00:11:30,280 --> 00:11:32,670
that are specifically Windows executable

250
00:11:32,670 --> 00:11:35,400
or as they're formerly known PE files.

251
00:11:35,400 --> 00:11:37,660
Let me show you some of these techniques,

252
00:11:37,660 --> 00:11:38,900
some of these tools in action.

253
00:11:38,900 --> 00:11:40,250
The first tool was peframe.

254
00:11:42,172 --> 00:11:45,730
Peframe is designed to
extract lots of useful details

255
00:11:45,730 --> 00:11:49,050
about a Windows program statically.

256
00:11:49,050 --> 00:11:50,729
It's not running the program,

257
00:11:50,730 --> 00:11:53,740
it is just looking at certain
aspects of this program

258
00:11:53,740 --> 00:11:56,370
including giving you a bit
hash that represents that file.

259
00:11:56,370 --> 00:11:59,380
Sure, but beyond this,

260
00:11:59,380 --> 00:12:02,610
peframe also scans this file

261
00:12:02,610 --> 00:12:06,160
for several yara-based signatures

262
00:12:06,160 --> 00:12:09,546
that sometimes flag potentially
malicious capabilities

263
00:12:09,547 --> 00:12:11,950
that maybe you want to know about.

264
00:12:11,950 --> 00:12:14,130
The one that's drawing my
attention at the moment

265
00:12:14,130 --> 00:12:19,130
is a yara plugin that was
triggered here called HasOverlay.

266
00:12:19,500 --> 00:12:24,030
An overlay is an addition to a
file that shouldn't be there.

267
00:12:24,030 --> 00:12:26,860
There is a way to add
objects or contents to files

268
00:12:26,860 --> 00:12:29,290
beyond where the files should have ended.

269
00:12:29,290 --> 00:12:31,420
That's anomalous and oftentimes this is

270
00:12:31,420 --> 00:12:35,530
where attackers try to hide
certain malicious artifacts.

271
00:12:35,530 --> 00:12:38,170
And now I know to watch out for overlays

272
00:12:38,170 --> 00:12:39,969
within this particular file.

273
00:12:39,970 --> 00:12:44,270
Also peframe tells me that
it found signatures of

274
00:12:44,270 --> 00:12:47,159
behavior related to network
HTTP-based interactions.

275
00:12:47,159 --> 00:12:50,040
Apparently also this malware
might have the ability

276
00:12:50,040 --> 00:12:52,449
to interact with files
and with the registry.

277
00:12:52,450 --> 00:12:54,410
So those are all useful details

278
00:12:54,410 --> 00:12:56,589
to give me a general sense
for what this program

279
00:12:56,590 --> 00:13:01,130
might try to do when a victim
runs it on his or her system

280
00:13:01,130 --> 00:13:03,000
and what I might need to look for,

281
00:13:03,000 --> 00:13:05,450
if I perform behavioral analysis

282
00:13:05,450 --> 00:13:08,170
in a Windows laboratory system.

283
00:13:08,170 --> 00:13:10,152
There are also some risky API calls

284
00:13:10,153 --> 00:13:12,150
that peframe calls out for me.

285
00:13:12,150 --> 00:13:14,550
These are functions that this malware

286
00:13:14,550 --> 00:13:17,410
might be able to call when
it runs on a Windows system

287
00:13:17,410 --> 00:13:18,850
to interact with its environment,

288
00:13:18,850 --> 00:13:20,940
such as apparently perform

289
00:13:20,940 --> 00:13:23,667
HTTP-based interactions with websites.

290
00:13:23,667 --> 00:13:25,740
And that might be used to

291
00:13:25,740 --> 00:13:28,980
download additional artifacts
or to exfiltrate data.

292
00:13:28,980 --> 00:13:31,480
Here's the API call that
tells me that this malware

293
00:13:31,480 --> 00:13:34,580
might be capable of
reading files, for example.

294
00:13:34,580 --> 00:13:36,200
So those are the kinds of details

295
00:13:36,200 --> 00:13:39,860
you can gather statically using peframe.

296
00:13:39,860 --> 00:13:42,810
So that you start thinking about

297
00:13:42,810 --> 00:13:44,930
what are the capabilities of this program.

298
00:13:44,930 --> 00:13:47,520
Now it's always good to
have more than one tool

299
00:13:47,520 --> 00:13:49,030
that does the same type of thing.

300
00:13:49,030 --> 00:13:51,860
And so an alternative to
peframe I like to use,

301
00:13:51,860 --> 00:13:53,730
is called pecheck.

302
00:13:53,730 --> 00:13:56,400
Pecheck, also just like peframe,

303
00:13:56,400 --> 00:13:58,990
gives me some general
information about the file.

304
00:13:58,990 --> 00:14:01,030
Some of that information though presented

305
00:14:01,030 --> 00:14:03,053
differently from peframe

306
00:14:03,053 --> 00:14:06,757
is similar to what we
already saw in peframe,

307
00:14:06,757 --> 00:14:10,920
such as references to risky API calls

308
00:14:10,920 --> 00:14:12,630
that might tell us what this program

309
00:14:12,630 --> 00:14:14,710
is capable of doing
when it eventually runs

310
00:14:14,710 --> 00:14:16,530
on a victim's computer.

311
00:14:16,530 --> 00:14:18,740
But what I wanted to show you specifically

312
00:14:18,740 --> 00:14:21,610
within pecheck here is that,

313
00:14:21,610 --> 00:14:25,290
it gives me more details
about this overlay

314
00:14:25,290 --> 00:14:28,920
that is added to our
malware file apparently.

315
00:14:28,920 --> 00:14:33,160
It gives me the hash of the
PE file without the overlay.

316
00:14:33,160 --> 00:14:36,610
And now if I'm doing some open
source intelligence gathering

317
00:14:36,610 --> 00:14:38,570
then maybe this is the file hash

318
00:14:38,570 --> 00:14:39,810
that I would research online,

319
00:14:39,810 --> 00:14:42,400
using Google and various
other tools to see,

320
00:14:42,400 --> 00:14:44,468
does anyone know anything about a file

321
00:14:44,469 --> 00:14:47,440
that is represented by
this particular hash,

322
00:14:47,440 --> 00:14:50,420
which is this malware
file without its overlay.

323
00:14:50,420 --> 00:14:53,110
Sometimes attacker said overlay to a file

324
00:14:53,110 --> 00:14:55,460
just to change it's signature.

325
00:14:55,460 --> 00:14:58,730
And now, we know how this file might look

326
00:14:58,730 --> 00:14:59,870
without its overlay,

327
00:14:59,870 --> 00:15:02,210
but perhaps even more usefully,

328
00:15:02,210 --> 00:15:06,750
pecheck allows me to extract that overlay.

329
00:15:06,750 --> 00:15:08,710
Let me show you how to do that.

330
00:15:08,710 --> 00:15:12,570
pecheck here are the
command line parameters,

331
00:15:12,570 --> 00:15:14,350
this is gonna be documented in your slides

332
00:15:14,350 --> 00:15:16,070
in case you want to do this later on

333
00:15:16,070 --> 00:15:18,670
but pecheck we'll extract that overlay.

334
00:15:18,670 --> 00:15:22,010
And in my case, save it
into the separate file

335
00:15:22,010 --> 00:15:26,170
called sample.exe.overlay.

336
00:15:26,170 --> 00:15:28,689
Now I can examine the overlay.

337
00:15:28,690 --> 00:15:32,160
For example, I might
extract strings from it.

338
00:15:32,160 --> 00:15:36,000
I could extract Unicode
strings from the overlay file

339
00:15:36,000 --> 00:15:40,230
and I give the string called
Citrix Secure Input Active.

340
00:15:40,230 --> 00:15:42,570
Now you can use that string

341
00:15:42,570 --> 00:15:44,760
as a starting point
for your investigation.

342
00:15:44,760 --> 00:15:46,620
Look it up at your favorite search engine,

343
00:15:46,620 --> 00:15:49,380
to see what does the string represent.

344
00:15:49,380 --> 00:15:52,240
You will see that it represents some code

345
00:15:52,240 --> 00:15:54,360
that is oftentimes used by Citrix.

346
00:15:54,360 --> 00:15:55,830
And maybe that's the way

347
00:15:55,830 --> 00:15:59,610
that you end up investigating
this malware further.

348
00:15:59,610 --> 00:16:03,604
Now, this is a way to extract
strings from the overlay file.

349
00:16:03,604 --> 00:16:06,120
If you're looking at Unicode strings,

350
00:16:06,120 --> 00:16:10,050
what about ASCII strings
included in this file?

351
00:16:10,050 --> 00:16:12,760
Well, let's look at those as well.

352
00:16:12,760 --> 00:16:16,490
If you look at ASCII strings
included in this overlay file

353
00:16:16,490 --> 00:16:18,900
that we've just extracted using pecheck,

354
00:16:18,900 --> 00:16:22,280
you see more information
that you could use

355
00:16:22,280 --> 00:16:25,600
for additional open source
intelligence gathering efforts.

356
00:16:25,600 --> 00:16:27,870
So for example, there is some information

357
00:16:27,870 --> 00:16:32,070
about the Verisign
Certification Authority.

358
00:16:32,070 --> 00:16:34,420
There are some details here suggesting

359
00:16:34,420 --> 00:16:38,180
that we might be looking
at a digital certificate,

360
00:16:38,180 --> 00:16:40,770
maybe that is what's in this overlay file.

361
00:16:40,770 --> 00:16:44,280
In fact, there's also a
very specific string here

362
00:16:44,280 --> 00:16:48,339
DTOPTOOLZ Co. Limited.

363
00:16:48,340 --> 00:16:51,830
That seems to be the name of a company.

364
00:16:51,830 --> 00:16:54,200
Now you have something very specific

365
00:16:54,200 --> 00:16:57,730
to look up in your favorite
search engine to see

366
00:16:57,730 --> 00:17:00,470
are there are any known
malware samples associated

367
00:17:00,470 --> 00:17:04,339
with that particular
company name for a string.

368
00:17:04,339 --> 00:17:08,139
And this is what I would do
at this point in my analysis,

369
00:17:08,140 --> 00:17:11,060
In fact I have this
captured in a screenshot

370
00:17:11,060 --> 00:17:13,419
and I'm scrolling past
some of these slides

371
00:17:13,420 --> 00:17:14,579
because I've demonstrated this

372
00:17:14,579 --> 00:17:16,409
to you live in my environment.

373
00:17:16,410 --> 00:17:18,010
I don't need to go
through the slides again,

374
00:17:18,010 --> 00:17:20,150
they're available for you to pursue later

375
00:17:20,150 --> 00:17:21,910
as a review of what I've shown you.

376
00:17:21,910 --> 00:17:23,079
But I wanted to show you

377
00:17:23,079 --> 00:17:26,379
that if you take some of
those specific strings

378
00:17:26,380 --> 00:17:31,110
that you discovered using static
properties analysis so far

379
00:17:31,110 --> 00:17:33,790
and you plug them into
Google, for example.

380
00:17:33,790 --> 00:17:36,129
So I plugged in the name

381
00:17:36,130 --> 00:17:40,930
of the malware sample
that ClamAV identified.

382
00:17:40,930 --> 00:17:42,280
Then I took that string

383
00:17:42,280 --> 00:17:45,139
that I've just extracted
from my overlay file,

384
00:17:45,140 --> 00:17:46,280
plugged it into Google.

385
00:17:46,280 --> 00:17:49,379
And now I have some contextual information

386
00:17:49,380 --> 00:17:50,710
about this malware sample,

387
00:17:50,710 --> 00:17:53,750
some threat intelligence details perhaps.

388
00:17:53,750 --> 00:17:56,840
Here's a blog post that
talks about Deep Panda

389
00:17:56,840 --> 00:17:59,030
using Sakula malware.

390
00:17:59,030 --> 00:18:01,099
And apparently that malware,

391
00:18:01,099 --> 00:18:04,860
Sakula malware apparently was using

392
00:18:04,860 --> 00:18:09,399
a stolen code signing certificate,

393
00:18:09,400 --> 00:18:13,140
that used to be assigned
to this particular company.

394
00:18:13,140 --> 00:18:15,060
So now we're thinking,

395
00:18:15,060 --> 00:18:18,310
maybe we're looking at malware signed

396
00:18:18,310 --> 00:18:20,560
by the stolen digital certificate.

397
00:18:20,560 --> 00:18:23,310
Maybe it is somehow
related to the threat actor

398
00:18:23,310 --> 00:18:25,700
that CrowdStrike called Deep Panda

399
00:18:25,700 --> 00:18:29,260
and the malware family called Sakula.

400
00:18:29,260 --> 00:18:31,160
Although in this particular case,

401
00:18:31,160 --> 00:18:33,800
this executable, if
you examined it further

402
00:18:33,800 --> 00:18:37,440
you will notice that it is
not actually digitally signed

403
00:18:37,440 --> 00:18:38,470
by this certificate.

404
00:18:38,470 --> 00:18:39,673
As far as I can tell.

405
00:18:40,560 --> 00:18:42,020
What it looks like to me is

406
00:18:42,020 --> 00:18:44,960
that this, probably
stolen digital certificate

407
00:18:44,960 --> 00:18:46,490
or some information about it

408
00:18:46,490 --> 00:18:50,260
was just attached to
the file as an overlay.

409
00:18:50,260 --> 00:18:54,470
So maybe it was designed to
mislead the investigator.

410
00:18:54,470 --> 00:18:58,170
Maybe this file is designed
to associate itself

411
00:18:58,170 --> 00:19:00,490
with a particular threat
actor and malware family

412
00:19:00,490 --> 00:19:02,350
but maybe it's different perhaps

413
00:19:02,350 --> 00:19:05,129
unrelated form of malware.

414
00:19:05,130 --> 00:19:06,730
We don't have time in this session

415
00:19:06,730 --> 00:19:08,320
to answer these questions.

416
00:19:08,320 --> 00:19:11,770
But my point is that when
you begin your investigation,

417
00:19:11,770 --> 00:19:13,370
when you're in triage mode,

418
00:19:13,370 --> 00:19:15,739
when you're performing
static properties analysis

419
00:19:15,740 --> 00:19:18,370
like what I'm walking
you through right now,

420
00:19:18,370 --> 00:19:22,429
my goal is to get you to
ask interesting questions.

421
00:19:22,430 --> 00:19:24,500
And sometimes you will
answer these questions

422
00:19:24,500 --> 00:19:27,870
using Linux-based tools or
using Windows-based tools

423
00:19:27,870 --> 00:19:30,159
or using other commercial
or free utilities.

424
00:19:30,160 --> 00:19:32,280
My point is that early investigation,

425
00:19:32,280 --> 00:19:33,760
you look for little tidbits

426
00:19:33,760 --> 00:19:36,360
of interesting information
that you discover.

427
00:19:36,360 --> 00:19:38,370
Then you expand your search

428
00:19:38,370 --> 00:19:40,649
with some open-source
intelligence gathering

429
00:19:40,650 --> 00:19:43,500
and then you post questions that guide you

430
00:19:43,500 --> 00:19:45,580
through the rest of your investigation.

431
00:19:45,580 --> 00:19:48,300
Further searches for
example might allow you

432
00:19:48,300 --> 00:19:50,990
to take this newly discovered
name of a malware family

433
00:19:50,990 --> 00:19:54,290
called Sakula plugged in the name Shyape

434
00:19:54,290 --> 00:19:56,110
that we discovered earlier

435
00:19:56,110 --> 00:20:00,129
and start looking for
any kind of relationships

436
00:20:00,130 --> 00:20:01,720
between the two malware families

437
00:20:01,720 --> 00:20:04,100
that maybe we're supposed to be unrelated

438
00:20:04,100 --> 00:20:07,062
but sometimes are discovered
as part of the same incident.

439
00:20:08,230 --> 00:20:12,590
So we're continuing to look at information

440
00:20:12,590 --> 00:20:16,590
embedded into this suspicious,
or I would say malicious file

441
00:20:16,590 --> 00:20:19,480
and we're using static properties tools.

442
00:20:19,480 --> 00:20:21,270
And I wanted to show you a few more,

443
00:20:21,270 --> 00:20:23,230
a few more tools that
I think will allow you

444
00:20:23,230 --> 00:20:26,220
to look even more deeply
into this malicious program.

445
00:20:26,220 --> 00:20:30,610
So for example, how
about extracting strings

446
00:20:30,610 --> 00:20:33,419
that might be stored in
this malicious program,

447
00:20:33,420 --> 00:20:37,380
but what if they're stored
in an obfuscated way?

448
00:20:37,380 --> 00:20:40,490
Well, attackers oftentimes

449
00:20:40,490 --> 00:20:42,800
conceal sensitive strings from us

450
00:20:42,800 --> 00:20:44,639
and oftentimes they use rather

451
00:20:44,640 --> 00:20:47,530
straightforward obfuscation methods.

452
00:20:47,530 --> 00:20:50,340
One tool for finding

453
00:20:51,180 --> 00:20:54,820
commonly obfuscated string patterns

454
00:20:54,820 --> 00:20:56,439
is XORSearch.

455
00:20:56,440 --> 00:20:59,540
Now XORSearch, we'll look
for strings concealed

456
00:20:59,540 --> 00:21:01,250
using very common techniques,

457
00:21:01,250 --> 00:21:04,830
like a technique that
uses the XOR operator,

458
00:21:04,830 --> 00:21:07,540
where the attacker XORs
every character of a string

459
00:21:07,540 --> 00:21:09,280
with a key that is only one byte long.

460
00:21:09,280 --> 00:21:11,950
XORSearch can brute
force all possible keys,

461
00:21:11,950 --> 00:21:14,470
but you need to tell it what
it is you're looking for.

462
00:21:14,470 --> 00:21:18,680
So what I often look for
is the substring http,

463
00:21:18,680 --> 00:21:23,060
because I know that attackers
often conceal URLs inside

464
00:21:23,060 --> 00:21:24,139
of their executables,

465
00:21:24,140 --> 00:21:27,160
and oftentimes a simple
XOR-based algorithm

466
00:21:27,160 --> 00:21:29,560
is just good enough for the adversaries

467
00:21:29,560 --> 00:21:31,860
to hide the string for us, from us.

468
00:21:31,860 --> 00:21:33,709
And so in this case,

469
00:21:33,710 --> 00:21:36,151
we can tell XORSearch to tell us

470
00:21:36,151 --> 00:21:39,360
whether the string http is present

471
00:21:39,360 --> 00:21:41,719
using this simple obfuscation technique.

472
00:21:41,720 --> 00:21:45,430
And look at this, it finds
several mentions of http.

473
00:21:45,430 --> 00:21:47,640
Some of them are not obfuscated

474
00:21:47,640 --> 00:21:49,650
and are related to the digital certificate

475
00:21:49,650 --> 00:21:50,790
we covered earlier.

476
00:21:50,790 --> 00:21:53,180
But what I wanted to
draw your attention to

477
00:21:53,180 --> 00:21:56,910
is that apparently within two locations

478
00:21:56,910 --> 00:21:59,530
in our malicious file,

479
00:21:59,530 --> 00:22:04,530
XORed with key 56, we see some URLs

480
00:22:04,550 --> 00:22:07,970
that look like they might be malicious.

481
00:22:07,970 --> 00:22:09,600
Why do I think they might be malicious?

482
00:22:09,600 --> 00:22:12,719
Because it might be a
bit hard for you to tell

483
00:22:12,720 --> 00:22:17,720
but this URL reads like the
domain name, wellpoint.com.

484
00:22:19,220 --> 00:22:23,740
But actually these are numbers
one rather than letters L.

485
00:22:23,740 --> 00:22:25,700
So whenever I see a domain name

486
00:22:25,700 --> 00:22:29,040
that's designed to look
like some other domain name,

487
00:22:29,040 --> 00:22:31,590
I'm thinking maybe this is a malicious URL

488
00:22:31,590 --> 00:22:35,490
and it's something that perhaps
I would need to investigate.

489
00:22:35,490 --> 00:22:38,060
So these are the kinds
of strings that you find,

490
00:22:38,060 --> 00:22:40,129
if you know how to look
for obfuscated strings,

491
00:22:40,130 --> 00:22:42,420
XORSearch is one of the
ways in which you can do it.

492
00:22:42,420 --> 00:22:44,480
Another tool that is useful

493
00:22:44,480 --> 00:22:48,040
for this kind of work is called brxor.py.

494
00:22:48,040 --> 00:22:49,720
and what's nice about brxor is

495
00:22:49,720 --> 00:22:52,360
that you don't need to
tell it what to look for.

496
00:22:52,360 --> 00:22:53,193
What it does is,

497
00:22:53,193 --> 00:22:56,650
that it tries all possible
one byte long keys

498
00:22:56,650 --> 00:22:59,280
for the XOR algorithm,

499
00:22:59,280 --> 00:23:01,480
and it looks up every word

500
00:23:01,480 --> 00:23:05,480
that it derives in a English dictionary.

501
00:23:05,480 --> 00:23:09,340
If it finds that it
deobfuscated the string

502
00:23:09,340 --> 00:23:12,010
that is present in an English dictionary,

503
00:23:12,010 --> 00:23:14,390
then that tells the tool that perhaps

504
00:23:14,390 --> 00:23:16,830
it found the proper deobfuscation key,

505
00:23:16,830 --> 00:23:18,590
and it shows you the full string.

506
00:23:18,590 --> 00:23:21,600
And so this tells us that indeed,

507
00:23:21,600 --> 00:23:24,629
we have the XOR key 56 being used

508
00:23:24,630 --> 00:23:28,330
to conceal the URLs
that we just discussed.

509
00:23:28,330 --> 00:23:31,260
But there's also another part of the URL

510
00:23:31,260 --> 00:23:33,440
that XORSearch did not tell us.

511
00:23:33,440 --> 00:23:37,260
And we also see a few other strings,

512
00:23:37,260 --> 00:23:41,200
that are apparently obfuscated
using the XOR key A.

513
00:23:41,200 --> 00:23:43,290
We did not know to search
for these substrings,

514
00:23:43,290 --> 00:23:46,490
So XORSearch didn't tell us about these.

515
00:23:46,490 --> 00:23:49,330
But now we've identified
some other commands

516
00:23:49,330 --> 00:23:51,470
that maybe we now know to look for

517
00:23:51,470 --> 00:23:54,500
on potentially compromised systems.

518
00:23:54,500 --> 00:23:56,860
My point is that sometimes one tool

519
00:23:56,860 --> 00:23:58,270
will work better than another.

520
00:23:58,270 --> 00:24:00,840
That is why when you look at what tools

521
00:24:00,840 --> 00:24:01,990
are installed on REMnux,

522
00:24:01,990 --> 00:24:04,160
you'll find that there are many tools

523
00:24:04,160 --> 00:24:05,930
that seem to do the same thing,

524
00:24:05,930 --> 00:24:07,990
but they each do it a bit differently

525
00:24:07,990 --> 00:24:10,610
and it's useful to
examine a given executable

526
00:24:10,610 --> 00:24:13,010
using several similar tools.

527
00:24:13,010 --> 00:24:15,740
For example, another
tool that I like to use

528
00:24:16,630 --> 00:24:18,130
is called bbcrack.

529
00:24:18,130 --> 00:24:21,370
Bbcrack can also deobfuscate strings

530
00:24:21,370 --> 00:24:25,060
that are concealed using several
commonly used algorithms.

531
00:24:25,060 --> 00:24:27,210
It's approach is go a little bit beyond

532
00:24:27,210 --> 00:24:29,850
what brxor and XORSearch can handle.

533
00:24:29,850 --> 00:24:32,649
It takes longer to run, but
I just wanted to mention

534
00:24:32,650 --> 00:24:34,270
that this tool is available to you.

535
00:24:34,270 --> 00:24:36,870
I'm gonna pause it and
not allow it to complete,

536
00:24:36,870 --> 00:24:38,879
in the interest of saving some time.

537
00:24:38,880 --> 00:24:41,660
And one other tool that
I thought I'd mentioned

538
00:24:42,840 --> 00:24:47,159
in the context of deobfuscating
strings is called FLOSS.

539
00:24:47,160 --> 00:24:49,724
Now FLOSS is perhaps
the most powerful string

540
00:24:49,724 --> 00:24:51,710
deobfuscation tool of them all.

541
00:24:51,710 --> 00:24:55,493
Because FLOSS can even deobfuscate strings

542
00:24:55,493 --> 00:24:57,629
that are concealed using algorithms

543
00:24:57,630 --> 00:25:00,390
that we perhaps have never heard of.

544
00:25:00,390 --> 00:25:03,150
Because FLOSS emulates the
execution of the program

545
00:25:03,150 --> 00:25:07,783
and it observes functions that
change contents of memory.

546
00:25:08,730 --> 00:25:13,730
So that if a buffer in
memory did not have a string

547
00:25:13,920 --> 00:25:15,420
before the function was called

548
00:25:15,420 --> 00:25:16,880
and after the function is called

549
00:25:16,880 --> 00:25:19,200
that buffer changes to
what looks like a string.

550
00:25:19,200 --> 00:25:21,640
That's one of the
heuristics that FLOSS uses

551
00:25:21,640 --> 00:25:25,820
to realize that it just
arrived a deobfuscated strings,

552
00:25:25,820 --> 00:25:27,129
a deobfuscated string.

553
00:25:27,130 --> 00:25:30,060
And so look, now when I run FLOSS,

554
00:25:30,060 --> 00:25:33,690
it is able to decode 31 strings for me.

555
00:25:33,690 --> 00:25:36,450
These strings are a lot more extensive

556
00:25:36,450 --> 00:25:38,780
than what I recovered beforehand.

557
00:25:38,780 --> 00:25:40,570
I see the full command

558
00:25:40,570 --> 00:25:43,870
that apparently will
add a run registry key

559
00:25:43,870 --> 00:25:47,419
which is a form of persistence
of an infected system.

560
00:25:47,420 --> 00:25:49,000
I see a reference to what looks like

561
00:25:49,000 --> 00:25:52,950
a hard-coded user agent
that perhaps we could use

562
00:25:52,950 --> 00:25:56,310
as a network-based intrusion detection,

563
00:25:56,310 --> 00:25:59,510
a signature or a network-based
indicator of compromise.

564
00:25:59,510 --> 00:26:02,610
So there are amazing things
that you can discover

565
00:26:02,610 --> 00:26:06,879
about malware by looking
for a obfuscated strings.

566
00:26:06,880 --> 00:26:10,470
And now, you know, about
several very powerful tools

567
00:26:10,470 --> 00:26:12,370
for doing this kind of work.

568
00:26:12,370 --> 00:26:15,360
And so let me summarize
what we have just learned

569
00:26:15,360 --> 00:26:19,620
in the context of
examining static properties

570
00:26:19,620 --> 00:26:20,889
of a suspicious program.

571
00:26:20,890 --> 00:26:23,580
We didn't look at code, not at all,

572
00:26:23,580 --> 00:26:26,080
but we did look for indicators

573
00:26:26,080 --> 00:26:27,490
that this is malicious

574
00:26:27,490 --> 00:26:30,416
and we've identified some potential ways

575
00:26:30,416 --> 00:26:32,770
in which this malware might interact

576
00:26:32,770 --> 00:26:34,460
with this environment, when it runs.

577
00:26:34,460 --> 00:26:37,510
So for this particular
sample, you saw API,

578
00:26:37,510 --> 00:26:40,500
Windows API references
that indicate that it can

579
00:26:40,500 --> 00:26:43,740
interact with disk file
system and the network.

580
00:26:43,740 --> 00:26:47,060
You saw some deobfuscated
strings that revealed URLs

581
00:26:47,060 --> 00:26:48,980
that you might need to
investigate further.

582
00:26:48,980 --> 00:26:52,150
And some other risky API names

583
00:26:52,150 --> 00:26:54,500
that would not have been
visible in clear text.

584
00:26:55,350 --> 00:26:58,870
The tools that I had
mentioned also indicated

585
00:26:58,870 --> 00:27:01,040
that this file might be protected

586
00:27:01,040 --> 00:27:03,423
with a packer called PECompact2.

587
00:27:04,510 --> 00:27:07,590
And when you look at the
output of peframe and pecheck,

588
00:27:07,590 --> 00:27:09,750
one of the details that it reports to you

589
00:27:09,750 --> 00:27:13,470
is how high is the entropy
of this file's contents.

590
00:27:13,470 --> 00:27:15,720
The entropy is the degree of randomness

591
00:27:15,720 --> 00:27:17,310
and the higher the entropy,

592
00:27:17,310 --> 00:27:19,290
the more likely is it

593
00:27:19,290 --> 00:27:23,450
that this file is packed
or compressed or protected.

594
00:27:23,450 --> 00:27:26,500
We saw this overlay embedded into the file

595
00:27:26,500 --> 00:27:28,050
that appeared to contain

596
00:27:28,050 --> 00:27:30,730
a potentially stolen digital certificate

597
00:27:30,730 --> 00:27:33,260
that is related to a threat group

598
00:27:33,260 --> 00:27:35,060
that we've identified by name.

599
00:27:35,060 --> 00:27:38,360
And it's unclear why
this overlay is present.

600
00:27:38,360 --> 00:27:41,219
Maybe this malware is
related to the threat actor

601
00:27:41,220 --> 00:27:44,310
or maybe this is just an
attempt to misdirect us.

602
00:27:44,310 --> 00:27:46,330
That's something that
you would need to explore

603
00:27:46,330 --> 00:27:49,439
to see what is this link between our file

604
00:27:49,440 --> 00:27:52,750
and that threat actor
and the malware families

605
00:27:52,750 --> 00:27:54,253
named Shyape and Sakula.

606
00:27:55,750 --> 00:27:58,400
So we've asked a bunch of questions.

607
00:27:58,400 --> 00:28:00,140
We've answered a bunch of questions,

608
00:28:00,140 --> 00:28:04,510
and more generally beyond this
particular malware sample,

609
00:28:04,510 --> 00:28:05,890
what have we learned?

610
00:28:05,890 --> 00:28:09,855
We've learned that you can
examine a file statically,

611
00:28:09,855 --> 00:28:13,100
to extract clear text
and obfuscated strings,

612
00:28:13,100 --> 00:28:16,290
to determine hash values
and find other properties

613
00:28:16,290 --> 00:28:19,450
that are useful as
indicators of compromise.

614
00:28:19,450 --> 00:28:22,180
As things you can look for in
systems in your environment

615
00:28:22,180 --> 00:28:25,110
to see if your endpoints are infected

616
00:28:25,110 --> 00:28:27,000
with this malware family.

617
00:28:27,000 --> 00:28:32,000
We also learned that you
can look at API names

618
00:28:32,020 --> 00:28:34,639
to get a general sense
for what this program

619
00:28:34,640 --> 00:28:38,110
might be capable of doing when
it runs on a Windows system.

620
00:28:38,110 --> 00:28:40,520
We learned how to use these details

621
00:28:40,520 --> 00:28:43,100
and plug them into a search engine,

622
00:28:43,100 --> 00:28:45,379
to perform open source
intelligence gathering,

623
00:28:45,380 --> 00:28:47,040
to learn more about this malware sample

624
00:28:47,040 --> 00:28:49,770
and the context within which others

625
00:28:49,770 --> 00:28:51,379
have seen it in the wild.

626
00:28:51,380 --> 00:28:54,920
And we've formed some
ideas, ask some questions

627
00:28:54,920 --> 00:28:59,033
that will guide your further
malware analysis steps.

628
00:29:00,440 --> 00:29:02,020
So let's keep going.

629
00:29:02,020 --> 00:29:06,040
Now we can look at certain
aspects of the code

630
00:29:06,040 --> 00:29:08,909
that comprises this Windows executable.

631
00:29:08,910 --> 00:29:12,370
Now, if we wanted to actually
run this program then

632
00:29:12,370 --> 00:29:15,300
it would be most beneficial
to do it on a Windows system,

633
00:29:15,300 --> 00:29:18,169
but what can you do on a Linux box?

634
00:29:18,170 --> 00:29:21,110
Well, we cannot directly run this malware

635
00:29:21,110 --> 00:29:22,820
on our Linux system,

636
00:29:22,820 --> 00:29:27,700
but what we can do is use code emulators.

637
00:29:27,700 --> 00:29:29,620
These are tools that are designed to

638
00:29:29,620 --> 00:29:32,010
pretend to run the program

639
00:29:32,010 --> 00:29:34,910
and look for certain ways
in which it would try

640
00:29:34,910 --> 00:29:36,130
to interact with its environment.

641
00:29:36,130 --> 00:29:37,560
And the first tool,

642
00:29:37,560 --> 00:29:39,510
that I thought I'd
mentioned in this context

643
00:29:39,510 --> 00:29:41,629
is a tool called binee.

644
00:29:41,630 --> 00:29:46,030
So let me show you how it
looks when you run binee here.

645
00:29:46,030 --> 00:29:49,430
Now, binee is designed to emulate

646
00:29:49,430 --> 00:29:50,500
the execution of the program

647
00:29:50,500 --> 00:29:53,470
and it looks specifically for activities

648
00:29:53,470 --> 00:29:56,370
that this program might use to interact

649
00:29:56,370 --> 00:29:58,610
with its environment.

650
00:29:58,610 --> 00:30:00,969
So it'll tell you about it's attempts

651
00:30:00,970 --> 00:30:04,890
to interact with files and
registry keys oftentimes

652
00:30:04,890 --> 00:30:06,170
and other programs.

653
00:30:06,170 --> 00:30:09,110
But in this case, that's
not what it tells us.

654
00:30:09,110 --> 00:30:11,280
In this case, it tells
us that this malware

655
00:30:11,280 --> 00:30:13,956
will call a Windows function GetTickcount.

656
00:30:14,880 --> 00:30:16,170
You might need to research to see

657
00:30:16,170 --> 00:30:17,870
what's the big deal about GetTickCount,

658
00:30:17,870 --> 00:30:20,649
and you would learn that GetTickCount

659
00:30:20,650 --> 00:30:24,640
is oftentimes used to time
the execution of the program.

660
00:30:24,640 --> 00:30:27,243
This is one of the ways in
which malware can detect

661
00:30:27,243 --> 00:30:28,889
that it's being analyzed,

662
00:30:28,890 --> 00:30:30,520
that it's being debugged.

663
00:30:30,520 --> 00:30:32,480
Because when you debug
malware, you slow it down

664
00:30:32,480 --> 00:30:34,640
and that's one of the ways
in which a malicious program

665
00:30:34,640 --> 00:30:37,360
can detect that it is
running in an environment

666
00:30:37,360 --> 00:30:39,740
that maybe it does not want to run in.

667
00:30:39,740 --> 00:30:42,450
Something else that we see here is an

668
00:30:43,610 --> 00:30:47,240
attempt to call GetForegroundWindow

669
00:30:47,240 --> 00:30:50,543
and something about
foreground window, yet again.

670
00:30:51,490 --> 00:30:55,450
Why would malware care to
look at the foreground window

671
00:30:55,450 --> 00:30:57,100
on the infected system?

672
00:30:57,100 --> 00:31:00,629
Well, in some cases that
is also used to detect

673
00:31:00,630 --> 00:31:02,710
whether the system that it's infecting is

674
00:31:02,710 --> 00:31:04,870
actually being used by anyone.

675
00:31:04,870 --> 00:31:07,129
If there are no Windows
popping up once in a while,

676
00:31:07,130 --> 00:31:09,250
that indicates that the
system is not being used

677
00:31:09,250 --> 00:31:11,170
and sometimes that's the way to detect

678
00:31:11,170 --> 00:31:13,970
when malware is running
in a sandbox environment.

679
00:31:13,970 --> 00:31:16,070
And a lot of malicious
programs are designed

680
00:31:16,070 --> 00:31:17,932
to avoid running in a sandbox

681
00:31:17,932 --> 00:31:20,660
because they don't want to be analyzed.

682
00:31:20,660 --> 00:31:23,150
So those are the kinds of
details that we can gather

683
00:31:23,150 --> 00:31:25,550
even without actually running the program,

684
00:31:25,550 --> 00:31:28,050
we're just emulating it's execution.

685
00:31:28,050 --> 00:31:30,919
And another tool that can emulate

686
00:31:30,920 --> 00:31:34,210
the execution of this
program is called qltool.

687
00:31:34,210 --> 00:31:37,083
And let me show you the
best way to invoke it.

688
00:31:38,360 --> 00:31:39,372
Like this,

689
00:31:39,373 --> 00:31:40,206
qltool

690
00:31:42,180 --> 00:31:44,990
also emulates the execution of the program

691
00:31:44,990 --> 00:31:49,230
and it creates a very, very
detailed log of what the program

692
00:31:49,230 --> 00:31:50,980
would be trying to do in a trance.

693
00:31:50,980 --> 00:31:53,380
I redirected that log into this file

694
00:31:53,380 --> 00:31:55,310
and I'm going to press Control + C

695
00:31:55,310 --> 00:31:57,200
to stop running the emulator,

696
00:31:57,200 --> 00:32:00,970
and then quickly look at the
log file that it produced.

697
00:32:00,970 --> 00:32:04,850
And what I will see is that
just like I learned earlier,

698
00:32:04,850 --> 00:32:07,907
this malware keeps calling GetTickCount,

699
00:32:09,040 --> 00:32:10,340
then it waits a little bit,

700
00:32:10,340 --> 00:32:12,199
then checks the foreground window,

701
00:32:12,200 --> 00:32:13,033
another GetTickCount,

702
00:32:13,033 --> 00:32:14,417
another GetTickCount then wait,

703
00:32:14,417 --> 00:32:17,040
then also checks for
its foreground window.

704
00:32:17,040 --> 00:32:20,720
This seems to me like this is
code that is running in a loop

705
00:32:20,720 --> 00:32:23,360
to time the execution of the program

706
00:32:23,360 --> 00:32:26,949
and to see if new foreground
Windows keep appearing.

707
00:32:26,950 --> 00:32:29,470
This might be an attempt to just wait

708
00:32:29,470 --> 00:32:32,820
and do nothing until the program confirms,

709
00:32:32,820 --> 00:32:35,030
that it's not in a sandbox.

710
00:32:35,030 --> 00:32:36,610
Until the problem confirms,

711
00:32:36,610 --> 00:32:39,429
that it's running in an actual environment

712
00:32:39,430 --> 00:32:40,520
that's worth infecting,

713
00:32:40,520 --> 00:32:44,310
it might choose not to
continue infecting the system.

714
00:32:44,310 --> 00:32:46,659
It's a innovation tactic designed

715
00:32:46,660 --> 00:32:50,180
to avoid making it easier for
us to analyze the program.

716
00:32:50,180 --> 00:32:53,326
And one other tool that
I wanted to mention,

717
00:32:53,326 --> 00:32:56,820
is a way of emulating the
execution of the program,

718
00:32:56,820 --> 00:32:58,570
is called capa.

719
00:32:58,570 --> 00:33:02,740
Now capa also will pretend
to run the program.

720
00:33:02,740 --> 00:33:04,500
But what's special about capa,

721
00:33:04,500 --> 00:33:08,070
is that it comes with
signatures of behaviors

722
00:33:09,440 --> 00:33:12,790
that will allow you to
identify malicious capabilities

723
00:33:12,790 --> 00:33:17,230
of a program even without being
an expert in Windows APIs.

724
00:33:17,230 --> 00:33:19,260
Some of the things that I just mentioned

725
00:33:19,260 --> 00:33:22,629
about evasion, about
the use of GetTickCount,

726
00:33:22,630 --> 00:33:25,590
require you to know about these API calls.

727
00:33:25,590 --> 00:33:29,040
Capa provides you with an
easier way to get started

728
00:33:29,040 --> 00:33:33,510
because it will look automatically
for the risky activities.

729
00:33:33,510 --> 00:33:34,930
And if it finds them,

730
00:33:34,930 --> 00:33:37,130
it will flag them and explain to you,

731
00:33:37,130 --> 00:33:39,030
what the program is trying to do.

732
00:33:39,030 --> 00:33:42,260
For example, remember I
said that GetTickCount

733
00:33:42,260 --> 00:33:45,570
could be used to time the
execution of the program

734
00:33:45,570 --> 00:33:48,090
as an anti-debugging technique.

735
00:33:48,090 --> 00:33:51,439
Well, capa detected GetTickCount

736
00:33:51,440 --> 00:33:55,320
and explained it to us, this
is an anti debugging technique.

737
00:33:55,320 --> 00:33:56,300
So now you see,

738
00:33:56,300 --> 00:33:58,440
even if you didn't know
about GetTickCount before,

739
00:33:58,440 --> 00:34:00,880
capa educated you about this

740
00:34:00,880 --> 00:34:04,600
and now you know what the
program might be trying to do.

741
00:34:04,600 --> 00:34:09,600
Also very usefully, capa
tells you at which address

742
00:34:09,900 --> 00:34:11,520
within this malicious program,

743
00:34:11,520 --> 00:34:14,570
is it trying to call GetTickCount.

744
00:34:14,570 --> 00:34:17,560
So that if you decide to
perform code level analysis,

745
00:34:17,560 --> 00:34:20,670
you know where to look to
detect that kind of activity

746
00:34:20,670 --> 00:34:22,560
and examine it more closely.

747
00:34:22,560 --> 00:34:24,690
Capa also tells us that apparently,

748
00:34:24,690 --> 00:34:27,183
it told us that apparently
there's a way to detect

749
00:34:27,183 --> 00:34:29,699
whether the mouse cursor is moving,

750
00:34:29,699 --> 00:34:33,600
another anti-analysis or evasion tactic.

751
00:34:33,600 --> 00:34:34,980
If the mouse cursor is not moving

752
00:34:34,980 --> 00:34:36,440
maybe this is not a real system

753
00:34:36,440 --> 00:34:38,710
and the malware will not infect it.

754
00:34:38,710 --> 00:34:41,960
There's also another
indicator that perhaps

755
00:34:41,960 --> 00:34:44,850
this malware will allocate memory,

756
00:34:44,850 --> 00:34:48,069
as a way of injecting
itself into another process

757
00:34:48,070 --> 00:34:50,239
or in this case, perhaps
into its own process,

758
00:34:50,239 --> 00:34:52,549
that is an unpacking technique.

759
00:34:52,550 --> 00:34:54,659
And if you decide to go deeper into

760
00:34:54,659 --> 00:34:56,069
the analysis of this program,

761
00:34:56,070 --> 00:34:58,410
now you know where to
look in your attempts

762
00:34:58,410 --> 00:35:01,920
to perhaps unpack, unpack
this malicious program.

763
00:35:01,920 --> 00:35:05,150
So those are the indicators
that capa gives you

764
00:35:05,150 --> 00:35:07,750
and something else I
wanted to mention to you.

765
00:35:07,750 --> 00:35:12,750
You can also run a decompiler on REMnux,

766
00:35:13,360 --> 00:35:15,800
but it's a decompiler called RetDec,

767
00:35:15,800 --> 00:35:18,740
that's available as a
standalone docker image.

768
00:35:18,740 --> 00:35:20,649
You can even run it outside of REMnux.

769
00:35:20,650 --> 00:35:23,540
But I thought I'd mentioned
this decompiler briefly to you,

770
00:35:23,540 --> 00:35:25,077
You just run retdec,

771
00:35:33,182 --> 00:35:34,098
decompiler,

772
00:35:37,004 --> 00:35:39,480
pointed to my malware sample

773
00:35:39,480 --> 00:35:43,350
and now it will decompile this executable.

774
00:35:43,350 --> 00:35:46,200
It will show me what
the original source code

775
00:35:46,200 --> 00:35:47,689
may have looked like.

776
00:35:47,690 --> 00:35:51,080
And now if you feel comfortable
examining source code,

777
00:35:51,080 --> 00:35:54,624
now you can examine
the output of this tool

778
00:35:54,624 --> 00:35:59,149
and understand what is the
attacker actually trying to do

779
00:35:59,150 --> 00:36:00,720
at the source code level.

780
00:36:00,720 --> 00:36:03,270
I'll scroll past some of
the stuff that perhaps

781
00:36:03,270 --> 00:36:04,350
is not very useful to you,

782
00:36:04,350 --> 00:36:07,950
and show you that eventually
you will get to code

783
00:36:07,950 --> 00:36:10,839
that uses the very API calls

784
00:36:10,840 --> 00:36:14,420
that capa and some other
tools already told us about.

785
00:36:14,420 --> 00:36:17,040
So now you have even more context

786
00:36:17,040 --> 00:36:19,020
to analyze this malicious program.

787
00:36:19,020 --> 00:36:21,160
And REMnux also provides you,

788
00:36:21,160 --> 00:36:25,962
with another useful code
analysis tool called Ghidra.

789
00:36:25,962 --> 00:36:27,520
Ghidra is a more interactive tool

790
00:36:27,520 --> 00:36:30,090
that has a built-in
disassembler and decompiler.

791
00:36:30,090 --> 00:36:34,960
And you can look at the very
addresses that capa reported,

792
00:36:34,960 --> 00:36:38,160
to find the code that capa told you about.

793
00:36:38,160 --> 00:36:41,450
And if you are gonna be doing
that kind of a deep dive,

794
00:36:41,450 --> 00:36:44,799
you can perform some code
analysis using Ghidra

795
00:36:44,800 --> 00:36:46,570
on REMnux if you want.

796
00:36:46,570 --> 00:36:49,190
Now, so the takeaways from this section

797
00:36:49,190 --> 00:36:52,070
is that for this particular
sample we confirmed,

798
00:36:52,070 --> 00:36:55,310
that there are specific
anti-analysis measures

799
00:36:55,310 --> 00:36:56,890
that are available to this malware,

800
00:36:56,890 --> 00:36:59,980
which means that automated
sandbox based analysis

801
00:36:59,980 --> 00:37:03,450
might not be very useful
against this malicious program.

802
00:37:03,450 --> 00:37:05,339
You might need to examine it more closely

803
00:37:05,340 --> 00:37:08,090
using the very techniques
that we're discussing here.

804
00:37:08,090 --> 00:37:10,410
And more generally,

805
00:37:10,410 --> 00:37:12,640
you now know that you can emulate

806
00:37:12,640 --> 00:37:14,453
the execution of the
environment and you have some,

807
00:37:14,453 --> 00:37:17,550
that you can emulate the
execution of the malware

808
00:37:17,550 --> 00:37:19,420
to examine how it interacts
with its environment,

809
00:37:19,420 --> 00:37:21,887
even without actually running this program

810
00:37:21,887 --> 00:37:23,420
on a Windows system.

811
00:37:23,420 --> 00:37:26,060
This gives you visibility
into the malicious techniques

812
00:37:26,060 --> 00:37:27,690
that the malware tries to implement.

813
00:37:27,690 --> 00:37:32,690
And it allows you to more
closely examine this program

814
00:37:33,590 --> 00:37:37,650
using a disassembler, a
decompiler, even a debugger,

815
00:37:37,650 --> 00:37:41,630
if that is something that you
decide to do in the future.

816
00:37:41,630 --> 00:37:45,900
Now another set of tools
that are available on REMnux

817
00:37:45,900 --> 00:37:48,630
allow you to explore network interactions

818
00:37:48,630 --> 00:37:50,010
of a given malicious program.

819
00:37:50,010 --> 00:37:54,170
And here it's very useful
to know that on Linux,

820
00:37:54,170 --> 00:37:55,390
on REMnux specifically,

821
00:37:55,390 --> 00:38:00,390
you can run services that
pretend to be a web server,

822
00:38:00,800 --> 00:38:04,750
a DNS server, or any other
kind of network resource

823
00:38:04,750 --> 00:38:06,560
that malware might be looking for.

824
00:38:06,560 --> 00:38:10,100
Now looking at how you
can do that in a lab

825
00:38:10,100 --> 00:38:12,700
is outside the scope of this session

826
00:38:12,700 --> 00:38:14,180
because I just don't have time

827
00:38:14,180 --> 00:38:16,330
to dig into that level of detail.

828
00:38:16,330 --> 00:38:19,069
But I wanted to mention that
I do have this information

829
00:38:19,070 --> 00:38:21,020
in the slides available to you.

830
00:38:21,020 --> 00:38:24,005
So that if you decide to go
through these steps in your lab

831
00:38:24,005 --> 00:38:27,040
you can infect a system,

832
00:38:27,040 --> 00:38:28,509
with this malware sample,

833
00:38:28,510 --> 00:38:30,377
you can use a fake DNS server,

834
00:38:30,377 --> 00:38:32,610
and fake web server on REMnux

835
00:38:32,610 --> 00:38:36,370
and examine how this
malware will try to interact

836
00:38:36,370 --> 00:38:39,520
with its environment,
when it actually runs.

837
00:38:39,520 --> 00:38:41,430
Now to wrap things up,

838
00:38:41,430 --> 00:38:45,870
I wanted to suggest to
you a few follow-up steps.

839
00:38:45,870 --> 00:38:49,480
If this is interesting to you,
then get a copy of REMnux,

840
00:38:49,480 --> 00:38:51,600
start experimenting with its tools.

841
00:38:51,600 --> 00:38:54,810
Definitely look at docs.remnux.org,

842
00:38:54,810 --> 00:38:57,110
you will find their very
detailed documentation

843
00:38:57,110 --> 00:39:01,230
about every single tool
installed on REMnux.

844
00:39:01,230 --> 00:39:03,620
If you want to get a copy
of the malware sample

845
00:39:03,620 --> 00:39:04,453
that I shared,

846
00:39:04,453 --> 00:39:06,000
that I showed you right now,

847
00:39:06,000 --> 00:39:07,690
I'm happy to share it with you.

848
00:39:07,690 --> 00:39:11,880
Email me at rsac@zeltser.com.

849
00:39:11,880 --> 00:39:13,550
Tell me that you're not gonna blame me

850
00:39:13,550 --> 00:39:14,870
if you infect yourself,

851
00:39:14,870 --> 00:39:17,180
'cause you gotta be careful,
this is real-world malware.

852
00:39:17,180 --> 00:39:18,529
I'll share the sample with you,

853
00:39:18,530 --> 00:39:21,400
as a password-protected archive.

854
00:39:21,400 --> 00:39:23,980
You might want to see some
other videos that are recorded

855
00:39:23,980 --> 00:39:26,850
during an earlier RSA
conference for example,

856
00:39:26,850 --> 00:39:28,650
that show you how to examine malware

857
00:39:28,650 --> 00:39:30,240
on a Windows-based system.

858
00:39:30,240 --> 00:39:33,310
I published a bunch of cheat
sheets on this topic as well.

859
00:39:33,310 --> 00:39:35,710
And so those are some of
the takeaways for you.

860
00:39:35,710 --> 00:39:38,780
My hope is that you will keep
learning and use this session

861
00:39:38,780 --> 00:39:40,170
as a starting point for your

862
00:39:40,170 --> 00:39:42,363
exploration of malware
analysis techniques.

