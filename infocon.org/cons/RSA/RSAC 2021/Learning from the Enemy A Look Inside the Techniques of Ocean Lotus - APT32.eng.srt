1
00:00:01,240 --> 00:00:02,610
- [Brian] Hello, I'm Brian Robison,

2
00:00:02,610 --> 00:00:05,040
chief evangelist at Blackberry.

3
00:00:05,040 --> 00:00:06,670
Over the past few months we've seen

4
00:00:06,670 --> 00:00:10,820
the literal explosion in cyber
attacks focused at us at home

5
00:00:10,820 --> 00:00:13,170
rather than at our offices.

6
00:00:13,170 --> 00:00:16,600
The predominant methods being
used right now are phishing

7
00:00:16,600 --> 00:00:19,420
and weaponized email attachments.

8
00:00:19,420 --> 00:00:21,970
I plan on giving you a
glimpse into the mind of

9
00:00:21,970 --> 00:00:25,400
the adversary in today's
learning from the adversary,

10
00:00:25,400 --> 00:00:28,340
a look inside the techniques of OceanLotus

11
00:00:28,340 --> 00:00:30,573
also known as APT32 32.

12
00:00:31,610 --> 00:00:33,470
In today's talk we're gonna break down

13
00:00:33,470 --> 00:00:37,210
two different examples of APT32's work

14
00:00:37,210 --> 00:00:39,420
and look at how they
weaponized attachments

15
00:00:39,420 --> 00:00:43,960
and how in some cases they
evaded detection by network

16
00:00:43,960 --> 00:00:45,843
and endpoint security products.

17
00:00:47,020 --> 00:00:49,150
The attacks I'm going to talk about today

18
00:00:49,150 --> 00:00:51,863
are considered fileless attacks.

19
00:00:52,880 --> 00:00:56,570
Let's begin by exploring
why fileless attacks matter.

20
00:00:56,570 --> 00:00:59,180
A Ponemon Institute study found

21
00:00:59,180 --> 00:01:02,750
of the respondents 54%
of them have experienced

22
00:01:02,750 --> 00:01:04,670
some kind of breach.

23
00:01:04,670 --> 00:01:09,640
Of those, 77% were found
to use fileless techniques.

24
00:01:09,640 --> 00:01:12,220
This study was done back in 2017

25
00:01:12,220 --> 00:01:15,130
and these numbers have risen
significantly since then.

26
00:01:15,130 --> 00:01:17,800
We are seeing a huge
increase in the quantity

27
00:01:17,800 --> 00:01:20,119
and effectiveness of fileless attacks

28
00:01:20,120 --> 00:01:21,900
over the past few years.

29
00:01:21,900 --> 00:01:24,140
And thusly we've seen a decrease in

30
00:01:24,140 --> 00:01:28,520
the use of executable malware
being the cause of a breach.

31
00:01:28,520 --> 00:01:30,009
Let's define and examine

32
00:01:30,010 --> 00:01:32,500
the attributes of a fileless attack.

33
00:01:32,500 --> 00:01:34,830
Fileless attacks are defined by attacking,

34
00:01:34,830 --> 00:01:37,810
but not generating files on disk,

35
00:01:37,810 --> 00:01:41,400
thusly triggering traditional AV scans.

36
00:01:41,400 --> 00:01:44,350
However, a fileless attack is not usually

37
00:01:44,350 --> 00:01:45,880
a file-free attack.

38
00:01:45,880 --> 00:01:50,179
Fileless attack is art of a
misnomer in this situation

39
00:01:50,180 --> 00:01:54,360
as most of these attacks begin
with a weaponized document,

40
00:01:54,360 --> 00:01:55,330
which is a file.

41
00:01:55,330 --> 00:01:56,520
But the files are not

42
00:01:56,520 --> 00:01:58,789
the traditional executable type of code

43
00:01:58,790 --> 00:02:01,910
like an exe or dll file,

44
00:02:01,910 --> 00:02:05,103
at least not in the first
few phases of the attack.

45
00:02:06,150 --> 00:02:08,440
They don't write new files to disk.

46
00:02:08,440 --> 00:02:12,070
And this is the best way
to avoid AV detection,

47
00:02:12,070 --> 00:02:13,793
is to not trigger a scan.

48
00:02:14,640 --> 00:02:16,869
These methods are most commonly found in

49
00:02:16,870 --> 00:02:19,620
the initial phases of an attack.

50
00:02:19,620 --> 00:02:21,730
Usually the fileless
portion of the attack is at

51
00:02:21,730 --> 00:02:23,540
the vanguard of the breach.

52
00:02:23,540 --> 00:02:25,760
Once in and connectivity is established

53
00:02:25,760 --> 00:02:29,010
the attacker will usually
utilize already existing

54
00:02:29,010 --> 00:02:31,929
and trusted tools to continue the attack

55
00:02:31,930 --> 00:02:34,303
in a method known as living off the land.

56
00:02:35,150 --> 00:02:38,780
Again, using tools that are
already installed and trusted

57
00:02:38,780 --> 00:02:42,160
is a great method to bypass
traditional security.

58
00:02:42,160 --> 00:02:45,680
No new exes are needed
to further the attack.

59
00:02:45,680 --> 00:02:48,510
Sometimes, but less often
than one would think,

60
00:02:48,510 --> 00:02:51,130
a true zero day vulnerability is found

61
00:02:51,130 --> 00:02:54,010
that the attacker exploits
to their advantage.

62
00:02:54,010 --> 00:02:57,120
Again, it is far easier
to attack the human

63
00:02:57,120 --> 00:02:59,730
and get them to run your code you

64
00:02:59,730 --> 00:03:01,563
than it is to exploit software.

65
00:03:02,540 --> 00:03:04,790
So how do these attacks happen?

66
00:03:04,790 --> 00:03:06,560
In general, these attacks begin

67
00:03:06,560 --> 00:03:08,510
with a weaponized email attachment.

68
00:03:08,510 --> 00:03:10,190
The attackers are getting better

69
00:03:10,190 --> 00:03:12,260
and better at social engineering

70
00:03:12,260 --> 00:03:14,700
and at several points during
this demonstration, you'll see

71
00:03:14,700 --> 00:03:18,660
where hacking the human is
a key part of these attacks.

72
00:03:18,660 --> 00:03:22,299
The attack usually begins when
the user receives an email

73
00:03:22,300 --> 00:03:24,440
with some great social engineering,

74
00:03:24,440 --> 00:03:27,550
convincing them that the
attachment is important

75
00:03:27,550 --> 00:03:28,970
and is safe to open.

76
00:03:28,970 --> 00:03:30,210
They open the attachment.

77
00:03:30,210 --> 00:03:32,820
This is the critical pivot point,

78
00:03:32,820 --> 00:03:34,700
the application warning.

79
00:03:34,700 --> 00:03:37,440
Most applications have
decided to pass the buck

80
00:03:37,440 --> 00:03:40,653
to the end user when an
action could cause harm.

81
00:03:42,520 --> 00:03:44,700
The user ignores the software warning

82
00:03:44,700 --> 00:03:47,643
and clicks on the okay,
or continue button.

83
00:03:48,500 --> 00:03:51,530
Game over, now, the embedded script runs,

84
00:03:51,530 --> 00:03:55,080
which may not even be
malicious yet at this point,

85
00:03:55,080 --> 00:03:57,410
but usually the goal
is to establish command

86
00:03:57,410 --> 00:03:59,180
and control over the endpoint.

87
00:03:59,180 --> 00:04:01,223
This is also known as C2.

88
00:04:02,240 --> 00:04:05,830
Once this is up and running,
the system is now compromised

89
00:04:05,830 --> 00:04:08,540
and can be used to move laterally

90
00:04:08,540 --> 00:04:10,720
or even deploy some nasty ransomware

91
00:04:10,720 --> 00:04:12,230
that will take out the system

92
00:04:12,230 --> 00:04:14,739
and everything else in the network.

93
00:04:14,740 --> 00:04:17,470
Okay, enough theory and presentation.

94
00:04:17,470 --> 00:04:18,920
It's time to head into the lab

95
00:04:18,920 --> 00:04:22,453
and demonstrate how these
attacks are built and operate.

96
00:04:23,410 --> 00:04:26,170
Let's begin our demonstration.

97
00:04:26,170 --> 00:04:27,910
Now in today's demonstration we're going

98
00:04:27,910 --> 00:04:31,140
to use two different
styles of fileless attack

99
00:04:31,140 --> 00:04:35,930
both employing social
engineering to get the end user

100
00:04:35,930 --> 00:04:38,370
to run the attack for us.

101
00:04:38,370 --> 00:04:41,970
Now let's begin by explaining
what we're looking at here.

102
00:04:41,970 --> 00:04:45,290
So on the right hand side of
the screen, this windows box,

103
00:04:45,290 --> 00:04:47,390
and we also have a Mac box that's running,

104
00:04:48,700 --> 00:04:50,110
these are our victims.

105
00:04:50,110 --> 00:04:54,190
These are the machines
that we're going to attack.

106
00:04:54,190 --> 00:04:56,160
Now on the left-hand side of the screen

107
00:04:56,160 --> 00:04:58,790
we're going to see our Kali Linux box,

108
00:04:58,790 --> 00:05:00,940
which is our attacker.

109
00:05:00,940 --> 00:05:04,569
And we're going to use a
tool today called TrevorC2,

110
00:05:04,569 --> 00:05:06,570
Trevor command and control.

111
00:05:06,570 --> 00:05:08,770
The Trevor server is essentially set up

112
00:05:08,770 --> 00:05:10,923
and we're gonna go ahead and start it.

113
00:05:11,930 --> 00:05:15,770
And get it ready to listen to clients.

114
00:05:15,770 --> 00:05:19,479
Now, the clients are sitting
basically in the same directory

115
00:05:19,480 --> 00:05:22,860
and there's a PowerShell client
and there's a Python client

116
00:05:22,860 --> 00:05:26,810
and it just simply needs a
very simple web server to run

117
00:05:26,810 --> 00:05:31,700
that we can use to download that client,

118
00:05:31,700 --> 00:05:33,810
execute it in the in memory.

119
00:05:33,810 --> 00:05:35,770
And then when the client is executed

120
00:05:35,770 --> 00:05:37,570
it will then connect back up here

121
00:05:38,410 --> 00:05:39,990
to the command and control environment.

122
00:05:39,990 --> 00:05:43,890
So a very common scenario,
but a very successful

123
00:05:43,890 --> 00:05:46,500
and very cool tool for
you guys to use out there

124
00:05:46,500 --> 00:05:49,770
when you're trying to
reproduce, you know, this attack

125
00:05:49,770 --> 00:05:53,409
or these types of attacks
in your own environment.

126
00:05:53,410 --> 00:05:57,160
So let's move on to creating the attack.

127
00:05:57,160 --> 00:06:00,340
Now, as I said before, and in the opening

128
00:06:00,340 --> 00:06:02,219
we're going to attack the human.

129
00:06:02,220 --> 00:06:03,640
And what that means is that we're going

130
00:06:03,640 --> 00:06:07,430
to be an expert today
in social engineering.

131
00:06:07,430 --> 00:06:11,200
We're going to trick the
user into executing our code

132
00:06:11,200 --> 00:06:13,830
on our behalf.

133
00:06:13,830 --> 00:06:16,270
Now, the first thing
that we're gonna look at

134
00:06:16,270 --> 00:06:18,787
is an attack called DDE.

135
00:06:19,668 --> 00:06:21,490
And this is a very old feature

136
00:06:21,490 --> 00:06:23,650
that's built into Microsoft Office,

137
00:06:23,650 --> 00:06:27,847
and it allows you to pull
data in from other sources

138
00:06:27,847 --> 00:06:29,409
and use it in your document.

139
00:06:29,410 --> 00:06:31,630
So building a smart document.

140
00:06:31,630 --> 00:06:34,990
So similar to macros,
but actually allowing you

141
00:06:34,990 --> 00:06:39,170
to like execute SQL queries
and other things and pull

142
00:06:39,170 --> 00:06:42,923
that data in into different
fields in your document.

143
00:06:44,020 --> 00:06:46,353
We're going to use this resume.

144
00:06:47,260 --> 00:06:51,570
This resume document
actually contains a macro.

145
00:06:51,570 --> 00:06:56,200
In most cases, macros are
actually good for business.

146
00:06:56,200 --> 00:06:59,020
We use macros all the time to do things

147
00:06:59,020 --> 00:07:01,750
like automatically update
fields in the document

148
00:07:01,750 --> 00:07:04,559
with other information like addresses

149
00:07:04,559 --> 00:07:06,900
and other things like that.

150
00:07:06,900 --> 00:07:10,030
So the end user is warned, of course,

151
00:07:10,030 --> 00:07:13,559
that this is potentially
dangerous to their organization.

152
00:07:13,560 --> 00:07:16,720
Now, in this case, this is a good macro

153
00:07:16,720 --> 00:07:18,660
that is actually embedded in the document.

154
00:07:18,660 --> 00:07:20,800
And all it's gonna do is update my name

155
00:07:20,800 --> 00:07:23,510
and initials here in the header graphic.

156
00:07:23,510 --> 00:07:25,820
So we're gonna click enable the content.

157
00:07:25,820 --> 00:07:28,270
And you'll see, yep, it updated my name

158
00:07:28,270 --> 00:07:30,620
and initials into the header.

159
00:07:30,620 --> 00:07:33,070
We're gonna put macro discussions off

160
00:07:33,070 --> 00:07:35,020
for a little bit longer
and we're gonna go back

161
00:07:35,020 --> 00:07:38,159
we're gonna focus on the DDE

162
00:07:38,160 --> 00:07:40,690
exploit that we're gonna
put in this document

163
00:07:40,690 --> 00:07:42,620
To do DDE what we're gonna do

164
00:07:42,620 --> 00:07:44,810
is we're gonna put a new
field in the document.

165
00:07:44,810 --> 00:07:47,300
And the easiest thing to do
here is to put it in line,

166
00:07:47,300 --> 00:07:51,090
let's say, but the end
of this first paragraph.

167
00:07:51,090 --> 00:07:54,373
And we're going to insert a field.

168
00:07:57,120 --> 00:08:00,890
Now the field can pretty
much be anything you want

169
00:08:00,890 --> 00:08:01,950
because it doesn't really matter.

170
00:08:01,950 --> 00:08:04,000
We're gonna replace the text anyway.

171
00:08:04,000 --> 00:08:06,520
You'll see here it says
unexpected end of formula.

172
00:08:06,520 --> 00:08:08,409
So we're gonna do is we're
actually gonna delete

173
00:08:08,410 --> 00:08:12,850
all of the text except
for the exclamation point

174
00:08:12,850 --> 00:08:16,310
and that makes it visually
grammatically correct.

175
00:08:16,310 --> 00:08:18,710
However, if we click over
to the exclamation point

176
00:08:18,710 --> 00:08:21,239
you'll see a light gray around that.

177
00:08:21,240 --> 00:08:23,700
And that actually means
that it is a field.

178
00:08:23,700 --> 00:08:26,210
We're going to look at
the code of the field

179
00:08:26,210 --> 00:08:28,430
by toggling the field code.

180
00:08:28,430 --> 00:08:31,720
We want this, instead of
running something directly

181
00:08:31,720 --> 00:08:34,440
we want this to be a DDE.

182
00:08:34,440 --> 00:08:38,169
So we're gonna make this a DDE
script that we're gonna run.

183
00:08:38,169 --> 00:08:40,179
And we want it to of course, auto run

184
00:08:40,179 --> 00:08:42,459
when the document is open.

185
00:08:42,460 --> 00:08:47,270
Now to save time in typing
I've already got this written.

186
00:08:47,270 --> 00:08:50,579
So we're gonna just copy this text

187
00:08:52,550 --> 00:08:54,439
and we're gonna paste it in.

188
00:08:54,440 --> 00:08:56,570
This command, you'll see a little bit more

189
00:08:56,570 --> 00:08:58,210
about it here in a few minutes.

190
00:08:58,210 --> 00:09:01,010
But what it looks like
is we've got something

191
00:09:01,010 --> 00:09:02,530
that looks like a path.

192
00:09:02,530 --> 00:09:04,720
We've can see PowerShell.

193
00:09:04,720 --> 00:09:07,020
We can see the command to execute

194
00:09:07,020 --> 00:09:08,980
the PowerShell script directly into memory

195
00:09:08,980 --> 00:09:10,900
versus storing it onto disc.

196
00:09:10,900 --> 00:09:13,760
Then what it's gonna do is it's
gonna open a web connection

197
00:09:13,760 --> 00:09:18,020
and download from our
little web server over here.

198
00:09:18,020 --> 00:09:21,030
It's going to download
the Trevor client ps 1

199
00:09:21,030 --> 00:09:22,750
and execute it in memory.

200
00:09:22,750 --> 00:09:24,530
There's this text here called blah.

201
00:09:24,530 --> 00:09:25,640
And what the heck is blah?

202
00:09:25,640 --> 00:09:28,470
Well, this was just a
visual reminder for me

203
00:09:28,470 --> 00:09:30,660
to actually change this text.

204
00:09:30,660 --> 00:09:32,620
And we could change this

205
00:09:32,620 --> 00:09:35,633
to really anything we
want to change it to.

206
00:09:36,640 --> 00:09:39,760
So maybe we wanna, you know,
use our social engineering

207
00:09:39,760 --> 00:09:44,760
to say that this is, you
know, okay, by security

208
00:09:45,050 --> 00:09:46,359
as an example.

209
00:09:46,360 --> 00:09:47,760
Now it doesn't make a whole lot of sense

210
00:09:47,760 --> 00:09:49,850
why you would do that here.

211
00:09:49,850 --> 00:09:54,220
But what this actually
does is actually modifies

212
00:09:54,220 --> 00:09:58,690
a built-in Microsoft Word error dialogue.

213
00:09:58,690 --> 00:10:00,330
And we're gonna see that
here in a few seconds

214
00:10:00,330 --> 00:10:01,490
when we run this attack.

215
00:10:01,490 --> 00:10:04,230
So we're actually done weaponizing this.

216
00:10:04,230 --> 00:10:07,510
So we're gonna toggle our field
code back to hide our text

217
00:10:07,510 --> 00:10:09,280
and we'll make it grammatically correct.

218
00:10:09,280 --> 00:10:10,113
We just know that

219
00:10:10,113 --> 00:10:13,260
that little exclamation
point there is a field.

220
00:10:13,260 --> 00:10:16,270
And we're just gonna close
and save the document.

221
00:10:16,270 --> 00:10:17,600
Now, the interesting thing is

222
00:10:17,600 --> 00:10:19,690
is when we reopen this document

223
00:10:21,520 --> 00:10:24,240
the macro is actually still going to run

224
00:10:24,240 --> 00:10:27,951
because we saved the decision whether

225
00:10:27,951 --> 00:10:31,950
to run that macro or
not with the document.

226
00:10:31,950 --> 00:10:34,420
But again, we know that
that macro is innocent.

227
00:10:34,420 --> 00:10:36,142
It's just gonna update the name.

228
00:10:37,030 --> 00:10:39,526
And then when the Trevor client executes

229
00:10:39,526 --> 00:10:41,900
that's gonna be a different thing.

230
00:10:41,900 --> 00:10:43,770
And so now we're gonna go ahead

231
00:10:43,770 --> 00:10:46,663
and run our weaponized document.

232
00:10:48,820 --> 00:10:51,410
Now notice we didn't get the macro dialog

233
00:10:51,410 --> 00:10:53,910
because we've already told this file

234
00:10:53,910 --> 00:10:57,290
that it's okay to run
that macro and so it did.

235
00:10:57,290 --> 00:11:00,140
Now we get a different type of message.

236
00:11:00,140 --> 00:11:03,260
Now this is a DDE message
that you're going to get.

237
00:11:03,260 --> 00:11:07,490
So training the user on,
you know, only click on,

238
00:11:07,490 --> 00:11:10,850
don't click on the yellow
bar, doesn't pertain to this

239
00:11:10,850 --> 00:11:13,950
cause this is a different error dialogue.

240
00:11:13,950 --> 00:11:16,880
And again, through social
engineering we can tell the user

241
00:11:16,880 --> 00:11:18,340
that they should click yes on this.

242
00:11:18,340 --> 00:11:21,770
They need to download that
data so that they can get

243
00:11:21,770 --> 00:11:23,829
that discount code or that they can get

244
00:11:23,830 --> 00:11:26,750
that inventory update or whatever it is.

245
00:11:26,750 --> 00:11:29,490
We trick them into clicking yes.

246
00:11:29,490 --> 00:11:32,340
Now no code is actually
running at this point.

247
00:11:32,340 --> 00:11:35,290
It actually hasn't executed
or downloaded the PowerShell

248
00:11:35,290 --> 00:11:36,870
and attacked or anything.

249
00:11:36,870 --> 00:11:40,180
So they can get in here,
they can click Yes.

250
00:11:40,180 --> 00:11:43,150
And now we get this new dialogue.

251
00:11:43,150 --> 00:11:46,910
Now this error dialogue is
the one that we can modify.

252
00:11:46,910 --> 00:11:48,870
So in parenthesis here

253
00:11:48,870 --> 00:11:53,180
we can see that text that we
typed in, okay, by security.

254
00:11:53,180 --> 00:11:54,420
Now that's sort of crazy

255
00:11:54,420 --> 00:11:58,400
because this is a Microsoft
Word error message,

256
00:11:58,400 --> 00:12:00,959
not something that's
generated by the attack

257
00:12:00,960 --> 00:12:01,793
or anything else,

258
00:12:01,793 --> 00:12:05,920
but we can actually inject
text in here and use.

259
00:12:05,920 --> 00:12:09,209
So you can see here again,
further social engineering,

260
00:12:09,210 --> 00:12:11,950
you know, the remote
data, okay, by security,

261
00:12:11,950 --> 00:12:15,030
is not accessible, do you
wanna start the application?

262
00:12:15,030 --> 00:12:17,850
And then there is actually that fake path.

263
00:12:17,850 --> 00:12:20,250
And again, the goal here is not

264
00:12:20,250 --> 00:12:23,030
to be necessarily 100% perfect.

265
00:12:23,030 --> 00:12:27,350
The goal here is to get just
enough to bypass that human

266
00:12:27,350 --> 00:12:29,820
who's gonna say, yeah, that
looks pretty legitimate.

267
00:12:29,820 --> 00:12:32,260
I'm gonna go ahead and click OK.

268
00:12:32,260 --> 00:12:34,240
And then you're gonna get another string,

269
00:12:34,240 --> 00:12:37,550
another error dialogue, but
it really doesn't matter

270
00:12:37,550 --> 00:12:39,900
because the attack has
actually been running

271
00:12:39,900 --> 00:12:43,720
in the background and we should
see here in a few seconds,

272
00:12:43,720 --> 00:12:44,750
there it is.

273
00:12:44,750 --> 00:12:47,700
We see the website get hit
and download the client.

274
00:12:47,700 --> 00:12:49,250
And then the client executes

275
00:12:49,250 --> 00:12:52,360
and is now connected to
the command and control.

276
00:12:52,360 --> 00:12:54,860
So, and there's only,
there's no way out of this.

277
00:12:54,860 --> 00:12:56,980
Essentially you can click OK or hit X,

278
00:12:56,980 --> 00:12:58,860
but it gets into this loop.

279
00:12:58,860 --> 00:13:01,050
So it doesn't really matter.

280
00:13:01,050 --> 00:13:03,219
We can click NO here.

281
00:13:03,220 --> 00:13:04,510
It doesn't really matter.

282
00:13:04,510 --> 00:13:05,923
But the great thing here is

283
00:13:05,923 --> 00:13:09,480
that the end user doesn't
see anything running.

284
00:13:09,480 --> 00:13:11,930
And even if you were looking
at this with Wireshark

285
00:13:11,930 --> 00:13:14,020
and looking at the network communication

286
00:13:14,020 --> 00:13:18,930
all you would see is this
machine hitting those URLs

287
00:13:18,930 --> 00:13:21,469
with those encrypted GUID strings.

288
00:13:21,470 --> 00:13:23,900
And so it's a really
cool command and control

289
00:13:23,900 --> 00:13:25,350
to use for that.

290
00:13:25,350 --> 00:13:27,940
So on our command and control we can see

291
00:13:27,940 --> 00:13:30,670
the different systems that
we have actually connected

292
00:13:30,670 --> 00:13:32,780
to our command and control.

293
00:13:32,780 --> 00:13:36,810
And we can go ahead and
begin interacting with them.

294
00:13:36,810 --> 00:13:40,359
Now what we're gonna be
doing is, like I said before,

295
00:13:40,360 --> 00:13:43,090
we're going to be putting commands

296
00:13:43,090 --> 00:13:44,780
that the client is going to execute.

297
00:13:44,780 --> 00:13:47,410
We're gonna be putting those
commands up on a website

298
00:13:47,410 --> 00:13:50,600
and the client is looking for
those commands to be there.

299
00:13:50,600 --> 00:13:54,660
So there's going to be a delay
between when I type a command

300
00:13:54,660 --> 00:13:58,363
and the action that actually
appears on the end point.

301
00:13:59,530 --> 00:14:02,990
So we can do something,
you know, very simple.

302
00:14:02,990 --> 00:14:05,540
Like let's go ahead and start a program

303
00:14:08,530 --> 00:14:09,762
like calc.

304
00:14:11,090 --> 00:14:13,870
And you'll see that the command
will be put on the website.

305
00:14:13,870 --> 00:14:15,440
The client will check into it.

306
00:14:15,440 --> 00:14:17,610
And all of a sudden, within a few seconds

307
00:14:17,610 --> 00:14:21,580
we have the calculator pop
up on our victim's system.

308
00:14:21,580 --> 00:14:24,850
So we know that we actually
have a command and control

309
00:14:24,850 --> 00:14:25,790
over that environment.

310
00:14:25,790 --> 00:14:28,530
In fact, we can do something
like get a directory of

311
00:14:28,530 --> 00:14:30,520
the current path that we're in.

312
00:14:30,520 --> 00:14:32,160
Again, the command is posted

313
00:14:32,160 --> 00:14:34,060
and it waits for the command to come back.

314
00:14:34,060 --> 00:14:37,449
And then the response
back into the shell here

315
00:14:37,450 --> 00:14:41,370
and you can see we're sitting
on the desktop of that user.

316
00:14:41,370 --> 00:14:43,760
And then we can do
something even more fun.

317
00:14:43,760 --> 00:14:48,220
Like we can actually begin to
kill processes, for example.

318
00:14:48,220 --> 00:14:53,203
Like we can kill the calculator
that we just started.

319
00:14:55,860 --> 00:15:00,860
And again, that lag between when the post,

320
00:15:00,860 --> 00:15:03,060
when it's posted and when it comes up

321
00:15:03,060 --> 00:15:05,473
and I must have typed something incorrect.

322
00:15:22,330 --> 00:15:23,400
There we go.

323
00:15:23,400 --> 00:15:24,233
So that's what I did.

324
00:15:24,233 --> 00:15:26,689
I just put the command goes,

325
00:15:26,690 --> 00:15:28,240
the command name goes in between.

326
00:15:28,240 --> 00:15:31,740
So we can continue to kill other programs

327
00:15:31,740 --> 00:15:34,463
like winword.exe

328
00:15:37,539 --> 00:15:40,500
and you'll see Word
disappear on the console.

329
00:15:40,500 --> 00:15:43,140
So that's essentially what it takes

330
00:15:43,140 --> 00:15:45,569
to get command and control.

331
00:15:45,570 --> 00:15:48,540
And we'll go ahead and exit out of that.

332
00:15:48,540 --> 00:15:50,860
And let's go ahead and
kill our Trevor client

333
00:15:50,860 --> 00:15:55,520
and we'll get it set
up for our next attack.

334
00:15:55,520 --> 00:15:58,600
Now over here again, the user
didn't see anything running,

335
00:15:58,600 --> 00:16:01,710
but there is actually a
PowerShell exe running

336
00:16:01,710 --> 00:16:02,543
in the background.

337
00:16:02,543 --> 00:16:06,030
And this is the actual Trevor
client that is running.

338
00:16:06,030 --> 00:16:08,610
So we're gonna go ahead and kill that

339
00:16:08,610 --> 00:16:11,670
so that we don't have
multiple connections going

340
00:16:11,670 --> 00:16:13,410
to our Trevor server.

341
00:16:13,410 --> 00:16:15,610
And we'll reset our web server over here

342
00:16:15,610 --> 00:16:18,470
by clicking down a couple of lines.

343
00:16:18,470 --> 00:16:23,470
Okay, so we're gonna re
open our document this time.

344
00:16:24,220 --> 00:16:27,040
And this time we're gonna hit No,

345
00:16:27,040 --> 00:16:28,719
and we're gonna hit No,

346
00:16:28,720 --> 00:16:29,740
and we're gonna hit No.

347
00:16:29,740 --> 00:16:32,020
And hopefully it doesn't

348
00:16:33,600 --> 00:16:34,433
run.

349
00:16:34,433 --> 00:16:35,740
I've seen it actually runs sometimes.

350
00:16:35,740 --> 00:16:37,790
So sometimes you get a surprise here.

351
00:16:37,790 --> 00:16:41,480
Now we're gonna delete our DDE attack,

352
00:16:41,480 --> 00:16:43,470
replace that field with the period.

353
00:16:43,470 --> 00:16:45,350
And now we're gonna actually go in

354
00:16:45,350 --> 00:16:48,550
and talk about macros for a minute.

355
00:16:48,550 --> 00:16:49,729
So

356
00:16:49,730 --> 00:16:53,720
let's go into our macro.

357
00:16:53,720 --> 00:16:58,720
And what you're going to see
here is that this macro is,

358
00:16:58,920 --> 00:17:00,939
this is a very innocent macro.

359
00:17:00,940 --> 00:17:03,200
Again, all it's going to
do is it's gonna update

360
00:17:03,200 --> 00:17:05,640
the fields that are in the document.

361
00:17:05,640 --> 00:17:07,589
Now this next attack we're actually going

362
00:17:07,589 --> 00:17:09,689
to create a macro based attack.

363
00:17:09,690 --> 00:17:12,593
So we're gonna want to
delete this innocent macro.

364
00:17:13,640 --> 00:17:16,869
And strangely enough, we're
going to replace it with a macro

365
00:17:16,869 --> 00:17:19,223
that is just as innocent.

366
00:17:25,210 --> 00:17:30,210
Okay, so this macro is
technically just as innocent.

367
00:17:30,410 --> 00:17:33,740
There really isn't anything in this macro

368
00:17:33,740 --> 00:17:37,610
that is going to trigger
any sort of security product

369
00:17:37,610 --> 00:17:40,520
if this is something really, really bad.

370
00:17:40,520 --> 00:17:42,020
But it is actually bad,

371
00:17:42,020 --> 00:17:45,680
but it's only bad when
it actually runs the,

372
00:17:45,680 --> 00:17:48,870
you know, the Trevor
client code, for example.

373
00:17:48,870 --> 00:17:53,409
Now this document is
cross-platform weaponized,

374
00:17:53,410 --> 00:17:55,480
meaning I can attack a Windows box

375
00:17:55,480 --> 00:17:58,080
or I can attack a Mac OS box.

376
00:17:58,080 --> 00:18:01,639
And when I originally
recreated this attack from

377
00:18:01,640 --> 00:18:06,640
the original findings that
we'd had on this attack

378
00:18:07,540 --> 00:18:10,110
I was curious about why they attacked

379
00:18:10,110 --> 00:18:13,459
a specific version of Office on the Mac.

380
00:18:13,460 --> 00:18:18,090
They specifically targeted
Office 2011 on the Mac

381
00:18:18,090 --> 00:18:21,439
and I really wondered why they did that.

382
00:18:21,440 --> 00:18:23,520
And it took me a while
to figure out, you know,

383
00:18:23,520 --> 00:18:24,930
I did some research to see

384
00:18:24,930 --> 00:18:26,680
if there were different vulnerabilities

385
00:18:26,680 --> 00:18:28,740
or if there were different commands

386
00:18:28,740 --> 00:18:30,540
or something that could be issued.

387
00:18:30,540 --> 00:18:34,332
And actually what I found was that they,

388
00:18:35,759 --> 00:18:40,140
as you may know, APT 32 or
OceanLotus is essentially

389
00:18:40,140 --> 00:18:44,160
predominantly a
Vietnamese-based attack group.

390
00:18:44,160 --> 00:18:48,540
And they, at least, at this
phase they were attacking

391
00:18:48,540 --> 00:18:50,970
predominantly other Asian entities,

392
00:18:50,970 --> 00:18:54,850
governments, and businesses
and institutions.

393
00:18:54,850 --> 00:18:56,649
And so I had to think about

394
00:18:56,650 --> 00:18:58,760
the motivation behind the attack.

395
00:18:58,760 --> 00:19:01,500
Why would they, you know,
what is the correlation

396
00:19:01,500 --> 00:19:05,410
between something like
Office 2011 for the Mac

397
00:19:05,410 --> 00:19:07,580
and other Asian entities?

398
00:19:07,580 --> 00:19:09,350
And then it came to me

399
00:19:09,350 --> 00:19:14,350
what a potential reason for that might be.

400
00:19:14,400 --> 00:19:19,400
And the reason I figured
that it might be is that

401
00:19:22,350 --> 00:19:27,350
they attacked Office
2011 because Office 2011

402
00:19:27,860 --> 00:19:32,070
was the last version that
you could perpetually license

403
00:19:32,070 --> 00:19:36,790
with a license key and it
would never call into Microsoft

404
00:19:36,790 --> 00:19:41,260
ever again for a license check.

405
00:19:41,260 --> 00:19:44,870
So if you had a large group of people

406
00:19:44,870 --> 00:19:48,459
let's say that were running
pirated versions of Office

407
00:19:48,460 --> 00:19:51,090
you could actually attack that.

408
00:19:51,090 --> 00:19:54,750
So they originally attacked that.

409
00:19:54,750 --> 00:19:59,750
And this is really very close
to their original attack code.

410
00:20:00,480 --> 00:20:02,160
I did modify it slightly.

411
00:20:02,160 --> 00:20:04,720
I fixed it so that we could, if we choose,

412
00:20:04,720 --> 00:20:06,740
if we chose to we could actually attack

413
00:20:06,740 --> 00:20:08,890
a newer version of Office.

414
00:20:08,890 --> 00:20:10,700
And then of course, I fixed this

415
00:20:10,700 --> 00:20:13,930
to make it a heck of a lot more legible

416
00:20:13,930 --> 00:20:15,890
and follow it a little bit easier.

417
00:20:15,890 --> 00:20:19,750
But this is a pretty easy macro to follow.

418
00:20:19,750 --> 00:20:22,820
Basically what they're doing is they built

419
00:20:22,820 --> 00:20:25,800
a very innocent looking macro,

420
00:20:25,800 --> 00:20:29,570
essentially to bypass
anything looking for strings

421
00:20:29,570 --> 00:20:32,490
or patterns that would
potentially be malicious.

422
00:20:32,490 --> 00:20:36,890
There's no URLs or anything
else in this document,

423
00:20:36,890 --> 00:20:39,690
that's not in a comment code anyway,

424
00:20:39,690 --> 00:20:41,900
that could be picked up on.

425
00:20:41,900 --> 00:20:45,340
The reason that they did that
and how they bypassed a lot of

426
00:20:45,340 --> 00:20:47,909
the security that was out there today

427
00:20:47,910 --> 00:20:49,531
is that they

428
00:20:49,531 --> 00:20:52,280
base64 encoded

429
00:20:52,280 --> 00:20:56,093
the strings that have actually
the bad commands in them.

430
00:20:58,520 --> 00:21:02,400
And they actually built
in a base64 decoder.

431
00:21:02,400 --> 00:21:04,510
In fact, this is an open source decoder.

432
00:21:04,510 --> 00:21:06,600
It's been around for a very long time

433
00:21:06,600 --> 00:21:11,139
and they just cut and pasted
it directly into this document.

434
00:21:11,140 --> 00:21:14,570
And I've made no changes
to this part of the code.

435
00:21:14,570 --> 00:21:16,270
So it's just as it is.

436
00:21:16,270 --> 00:21:19,170
And again, like I said, it's
completely cross platform.

437
00:21:19,170 --> 00:21:22,560
Meaning if it's a Mac it's
gonna execute a Mac command.

438
00:21:22,560 --> 00:21:26,220
If it's a PC it's gonna
execute a PC command.

439
00:21:26,220 --> 00:21:30,050
Now, where does it get these commands?

440
00:21:30,050 --> 00:21:34,430
Well, it gets these commands
from the comments field

441
00:21:34,430 --> 00:21:37,970
and the company field
in the document itself.

442
00:21:37,970 --> 00:21:39,090
That'll make a little bit more sense

443
00:21:39,090 --> 00:21:42,230
when I show you how those
are actually edited.

444
00:21:42,230 --> 00:21:45,370
The great thing is that we're
actually completely done

445
00:21:45,370 --> 00:21:48,229
weaponizing this document at this point.

446
00:21:48,230 --> 00:21:52,303
So we're going to go ahead
and close our macros.

447
00:21:55,434 --> 00:21:58,710
And then we're going to save our document

448
00:21:58,710 --> 00:22:00,760
as a different document.

449
00:22:00,760 --> 00:22:05,200
And the reason we're gonna
do that is so that we can get

450
00:22:05,200 --> 00:22:10,200
the yellow box back again
to control whether or not

451
00:22:10,710 --> 00:22:13,750
we wanna actually execute those macros.

452
00:22:13,750 --> 00:22:17,040
Okay, so, we've got our new document,

453
00:22:17,040 --> 00:22:18,770
but it's not weaponized yet.

454
00:22:18,770 --> 00:22:22,310
It just has the macro VB script in it,

455
00:22:22,310 --> 00:22:26,060
but it does not actually
contain any weaponization.

456
00:22:26,060 --> 00:22:28,300
We haven't told it where
to get the Trevor client.

457
00:22:28,300 --> 00:22:31,760
We haven't told it what
to execute, et cetera.

458
00:22:31,760 --> 00:22:34,040
So we're gonna do that now.

459
00:22:34,040 --> 00:22:36,409
And as you remember from the macro

460
00:22:36,410 --> 00:22:40,720
we need to do this in a
base64 encoded format.

461
00:22:40,720 --> 00:22:43,943
So what I've got here is I've got some,

462
00:22:45,050 --> 00:22:47,260
again to pre-create these

463
00:22:47,260 --> 00:22:49,500
to make it a little bit easier to use,

464
00:22:49,500 --> 00:22:51,580
we're gonna take this
PowerShell command here,

465
00:22:51,580 --> 00:22:56,580
which is basically the same
as we had before in the DDE.

466
00:22:57,040 --> 00:23:01,010
And we're going to put this
into a tool called CyberChef.

467
00:23:01,010 --> 00:23:03,180
And for you in your environments

468
00:23:03,180 --> 00:23:05,870
you really should be using CyberChef

469
00:23:05,870 --> 00:23:09,199
if you're doing any sort
of encoding or decoding.

470
00:23:09,200 --> 00:23:12,260
It's a really cool and easy tool to use.

471
00:23:12,260 --> 00:23:15,750
So we're gonna simply
paste in our command.

472
00:23:15,750 --> 00:23:17,940
And remember, we have to put in,

473
00:23:17,940 --> 00:23:19,650
we have to point it to the URL

474
00:23:19,650 --> 00:23:21,680
of this little simple web
server running here in

475
00:23:21,680 --> 00:23:23,360
the bottom left-hand corner.

476
00:23:23,360 --> 00:23:24,250
So that's pretty easy.

477
00:23:24,250 --> 00:23:25,743
If we just type this in,

478
00:23:26,930 --> 00:23:29,230
put in the IP address,

479
00:23:29,230 --> 00:23:31,030
the port number

480
00:23:31,030 --> 00:23:33,013
and TrevorC2.

481
00:23:35,422 --> 00:23:36,413
Or sorry,

482
00:23:38,472 --> 00:23:41,950
TrevorC2 client PS 1.

483
00:23:41,950 --> 00:23:45,130
And again, we're going
to download the ps 1

484
00:23:45,130 --> 00:23:48,390
and execute it directly into memory.

485
00:23:48,390 --> 00:23:49,810
And that's very important.

486
00:23:49,810 --> 00:23:51,990
Again, we're not gonna
store the file on disc.

487
00:23:51,990 --> 00:23:53,590
The only file that's gonna be on disc

488
00:23:53,590 --> 00:23:56,520
is gonna be the Word doc.

489
00:23:56,520 --> 00:23:58,200
Now it's really easy with CyberChef

490
00:23:58,200 --> 00:24:01,820
to create a base64 encoded format.

491
00:24:01,820 --> 00:24:04,060
You basically just paste your text in.

492
00:24:04,060 --> 00:24:08,669
You go over here and
you grab the to base64

493
00:24:08,670 --> 00:24:10,410
and you drag and drop it here.

494
00:24:10,410 --> 00:24:12,750
And all of a sudden your text is now

495
00:24:12,750 --> 00:24:16,790
in a base64 encoded format.

496
00:24:16,790 --> 00:24:19,800
So we grabbed this text down here,

497
00:24:19,800 --> 00:24:22,870
we copy it into our memory,

498
00:24:22,870 --> 00:24:26,629
and we're going to place
it into the document.

499
00:24:26,630 --> 00:24:29,150
Now, remember from the VB code

500
00:24:29,150 --> 00:24:31,780
these are placed into different fields

501
00:24:31,780 --> 00:24:33,980
and where those fields are

502
00:24:33,980 --> 00:24:36,650
is in the metadata of the document.

503
00:24:36,650 --> 00:24:39,370
So we come in here to
the document properties

504
00:24:39,370 --> 00:24:42,510
and go to the details.

505
00:24:42,510 --> 00:24:44,560
Now the PC code is placed

506
00:24:44,560 --> 00:24:47,129
in the company field of the documents.

507
00:24:47,130 --> 00:24:52,050
So you just paste that
base64 encoded blob of text

508
00:24:52,050 --> 00:24:55,860
directly into that field and hit OK.

509
00:24:55,860 --> 00:24:57,229
So this is really cool

510
00:24:57,230 --> 00:24:59,810
because you never have to
open the document again.

511
00:24:59,810 --> 00:25:02,169
You actually can change the URL,

512
00:25:02,170 --> 00:25:05,280
change the weaponization
by simply modifying

513
00:25:05,280 --> 00:25:07,373
the properties of the document.

514
00:25:12,530 --> 00:25:14,629
So on the Mac side, it's
a little bit different.

515
00:25:14,630 --> 00:25:19,630
We've actually got to create
a Python browser essentially,

516
00:25:19,670 --> 00:25:21,250
to do our connection.

517
00:25:21,250 --> 00:25:23,290
So that's what this code is for.

518
00:25:23,290 --> 00:25:26,960
Essentially, it's going to
create a Python browser.

519
00:25:26,960 --> 00:25:30,290
And again, just like we did
on the PowerShell script,

520
00:25:30,290 --> 00:25:32,320
we have to put in our URL

521
00:25:32,320 --> 00:25:34,233
and we're just gonna enter that in.

522
00:25:36,910 --> 00:25:39,000
Oops, don't forget the port number

523
00:25:43,510 --> 00:25:47,280
And on the Mac we're gonna
execute the Python client, okay?

524
00:25:47,280 --> 00:25:51,110
So now that we have the weaponized URL in

525
00:25:51,110 --> 00:25:53,760
we're gonna convert that to base64,

526
00:25:53,760 --> 00:25:56,620
so we get this big blob of text.

527
00:25:56,620 --> 00:26:00,969
Now we have to use on the
Mac side we actually have

528
00:26:00,970 --> 00:26:05,970
to use a second piece of
Python that I call a wrapper.

529
00:26:06,230 --> 00:26:08,200
And this wrapper essentially

530
00:26:08,200 --> 00:26:12,690
is its own base64 decoder again,

531
00:26:12,690 --> 00:26:13,523
but

532
00:26:15,530 --> 00:26:20,040
this time where we have our
blah text we actually have

533
00:26:20,040 --> 00:26:23,510
to take our URL, or
our browser essentially

534
00:26:23,510 --> 00:26:25,440
that we built in Python,

535
00:26:25,440 --> 00:26:27,640
and we put that

536
00:26:27,640 --> 00:26:31,170
into the blah text there.

537
00:26:31,170 --> 00:26:33,430
So now we've got a command
that's basically going

538
00:26:33,430 --> 00:26:37,510
to base64 decode and execute

539
00:26:37,510 --> 00:26:42,510
that base64 encoded Python
browser and go to that URL.

540
00:26:43,360 --> 00:26:47,459
Now because we have another base64 decoder

541
00:26:47,460 --> 00:26:49,940
in the document itself

542
00:26:49,940 --> 00:26:54,440
we need this entire command
in coded into base64

543
00:26:54,440 --> 00:26:57,483
giving us this great
big block of text here.

544
00:26:58,330 --> 00:27:00,330
Now, just like we did with
the PowerShell command

545
00:27:00,330 --> 00:27:02,570
we're gonna take this block of text

546
00:27:03,530 --> 00:27:04,960
and we're gonna paste it

547
00:27:04,960 --> 00:27:08,670
and put it into our document properties,

548
00:27:08,670 --> 00:27:11,710
into the comments field.

549
00:27:11,710 --> 00:27:14,550
And now the document has been weaponized

550
00:27:14,550 --> 00:27:17,940
for both PC and Mac.

551
00:27:17,940 --> 00:27:19,163
Makes it a lot of fun.

552
00:27:20,010 --> 00:27:23,910
Okay, so while we're going to run this

553
00:27:23,910 --> 00:27:26,690
we're just gonna go ahead and copy

554
00:27:26,690 --> 00:27:29,270
the document over to a shared drive

555
00:27:29,270 --> 00:27:32,000
so we can transfer it over to our Mac.

556
00:27:32,000 --> 00:27:32,920
Okay,

557
00:27:32,920 --> 00:27:36,520
so time to run this again.

558
00:27:36,520 --> 00:27:38,920
So let's open our document.

559
00:27:38,920 --> 00:27:43,280
Now again remember that we
saved that as a new document,

560
00:27:43,280 --> 00:27:45,970
so therefore we're now asked again

561
00:27:47,130 --> 00:27:50,620
whether or not we wanna run our macros.

562
00:27:50,620 --> 00:27:53,820
Now the cool thing here is
that if you get somebody

563
00:27:53,820 --> 00:27:56,909
used to opening a document with macros

564
00:27:56,910 --> 00:28:00,060
and used to clicking the yellow bar,

565
00:28:00,060 --> 00:28:02,260
maybe you send them a
few legitimate documents

566
00:28:02,260 --> 00:28:04,510
before you send them
one that is weaponized.

567
00:28:04,510 --> 00:28:07,950
Again, you're trying to exploit
the trust of the end user.

568
00:28:07,950 --> 00:28:09,870
So they would have seen this.

569
00:28:09,870 --> 00:28:12,149
They would have known that
the macro is only going

570
00:28:12,150 --> 00:28:15,160
to update the name or the
other fields or whatever.

571
00:28:15,160 --> 00:28:19,270
And so they innocently
click enable content.

572
00:28:19,270 --> 00:28:22,850
And when this runs, hopefully,
here within a few seconds

573
00:28:22,850 --> 00:28:25,429
if we didn't do any typos or anything

574
00:28:25,430 --> 00:28:28,000
we will see the traditional connection

575
00:28:28,000 --> 00:28:30,030
over here on the left.

576
00:28:30,030 --> 00:28:34,203
And sure enough, we do see
that we have a new connection.

577
00:28:35,320 --> 00:28:38,710
We can now interact with that session

578
00:28:38,710 --> 00:28:42,310
and we can do the same
things like we did before

579
00:28:46,800 --> 00:28:51,120
We can kill Microsoft Word
on the right, just like that.

580
00:28:51,120 --> 00:28:52,739
So just like we had before

581
00:28:52,740 --> 00:28:57,130
we now have a macro weaponized
document that allows us

582
00:28:57,130 --> 00:28:59,060
to terminate and kill

583
00:29:01,160 --> 00:29:03,820
or command and control or
do whatever we wanna do

584
00:29:03,820 --> 00:29:05,620
with that remote system.

585
00:29:05,620 --> 00:29:06,840
And we'll go in here and

586
00:29:06,840 --> 00:29:11,260
we'll end the PowerShell task.

587
00:29:11,260 --> 00:29:15,320
So that's how easy it is
to create an obfuscated

588
00:29:16,160 --> 00:29:21,160
command and control into a
word document using macros.

589
00:29:21,820 --> 00:29:26,780
Now again, because the
text is base64 encoded

590
00:29:26,780 --> 00:29:30,510
there's nothing that a security
tool is going to pick up on.

591
00:29:30,510 --> 00:29:33,010
And there's nothing
that it's gonna be able

592
00:29:33,010 --> 00:29:36,990
to essentially see to defend or detect

593
00:29:36,990 --> 00:29:41,410
that that is actually a
malicious use of a macro.

594
00:29:41,410 --> 00:29:43,270
Now, as I promised earlier, we're going

595
00:29:43,270 --> 00:29:45,650
to take a look at this on
a cross platform system.

596
00:29:45,650 --> 00:29:48,620
So I actually happen to have a Mac box

597
00:29:48,620 --> 00:29:52,250
and here's my resume that
I had on that file share.

598
00:29:52,250 --> 00:29:56,020
And to recreate this
attack in its entirety

599
00:29:56,020 --> 00:29:59,590
this machine is running Office 2011,

600
00:29:59,590 --> 00:30:01,620
just like the original attack.

601
00:30:01,620 --> 00:30:04,709
So we're going to open up our resume.

602
00:30:04,710 --> 00:30:08,460
And very similar to
Windows, we get a pop-up.

603
00:30:08,460 --> 00:30:10,450
We don't get to see the
document on the Mac,

604
00:30:10,450 --> 00:30:11,830
but you have to make the decision

605
00:30:11,830 --> 00:30:14,570
before you can actually see
the text of the document

606
00:30:14,570 --> 00:30:15,439
or anything there.

607
00:30:15,440 --> 00:30:18,860
So the social engineering
for this really needs

608
00:30:18,860 --> 00:30:22,629
to be in the email or the phone call

609
00:30:22,630 --> 00:30:25,360
or whatever it is to trick
the user into going ahead

610
00:30:25,360 --> 00:30:27,620
and saying enable macros.

611
00:30:27,620 --> 00:30:30,530
And hopefully if everything went well

612
00:30:30,530 --> 00:30:33,290
we're going to see the
hit of the web server

613
00:30:33,290 --> 00:30:35,770
as well as the connection of

614
00:30:35,770 --> 00:30:40,110
the command and control client
on the attackers over here.

615
00:30:40,110 --> 00:30:43,600
And yep, sure enough, you
can see we did actually get

616
00:30:45,764 --> 00:30:48,510
the download of the
Python client this time

617
00:30:48,510 --> 00:30:52,120
and we have interaction with the server.

618
00:30:52,120 --> 00:30:54,270
So we can actually take a look.

619
00:30:54,270 --> 00:30:56,700
We can now interact with session one

620
00:30:56,700 --> 00:31:00,733
and we can now issue a
Windows commands or, sorry,

621
00:31:02,060 --> 00:31:04,950
and we can now issue Linux commands

622
00:31:04,950 --> 00:31:07,583
or BSD commands for the Mac system.

623
00:31:09,240 --> 00:31:12,190
Okay, so now that we can
actually issue commands

624
00:31:12,190 --> 00:31:14,220
one of the interesting
things I wanna try to do

625
00:31:14,220 --> 00:31:16,380
is I wanna try to extract the iTunes

626
00:31:16,380 --> 00:31:20,330
or iCloud password from
the user on the Mac.

627
00:31:20,330 --> 00:31:22,024
So let's bounce back over here

628
00:31:22,025 --> 00:31:27,025
and I have this command
already written, let's grab it.

629
00:31:27,050 --> 00:31:29,430
And this is basically
going to prompt the user

630
00:31:29,430 --> 00:31:32,270
to enter their iTunes password,

631
00:31:32,270 --> 00:31:35,129
which for Mac users happens a lot.

632
00:31:35,130 --> 00:31:36,690
And we're actually going to tell

633
00:31:36,690 --> 00:31:39,920
the application iTunes to do this.

634
00:31:39,920 --> 00:31:42,500
So what we're gonna see is
we're actually going to see

635
00:31:42,500 --> 00:31:47,500
the iTunes application
launch on the Mac over here

636
00:31:47,530 --> 00:31:48,980
when we enter this command.

637
00:31:48,980 --> 00:31:50,833
So let's go ahead and send it.

638
00:31:52,120 --> 00:31:55,580
And you'll see over here,
just like every day on a Mac,

639
00:31:55,580 --> 00:31:57,120
you get asked for your password.

640
00:31:57,120 --> 00:32:00,399
So the iTunes application starts bouncing.

641
00:32:00,400 --> 00:32:01,370
We click on it

642
00:32:02,240 --> 00:32:05,450
and it asks us to verify
your iTunes password.

643
00:32:05,450 --> 00:32:07,760
And it's got the right icon

644
00:32:07,760 --> 00:32:09,129
and error message and everything.

645
00:32:09,130 --> 00:32:11,303
So you go ahead and
enter your password in.

646
00:32:15,730 --> 00:32:17,730
And you click Sign In.

647
00:32:17,730 --> 00:32:19,790
And over here on the command and control

648
00:32:19,790 --> 00:32:22,930
the command that gets entered,
the returns comes back

649
00:32:22,930 --> 00:32:26,370
and it actually says this is my password.

650
00:32:26,370 --> 00:32:27,469
So there you go.

651
00:32:27,470 --> 00:32:30,340
This is a weaponized
document that you can use

652
00:32:30,340 --> 00:32:33,120
to extract somebody's iCloud password

653
00:32:33,120 --> 00:32:35,409
or whatever from a Mac.

654
00:32:35,410 --> 00:32:39,330
And in this demonstration
we showed how easy it was

655
00:32:39,330 --> 00:32:42,800
to essentially attack both a PC and a Mac

656
00:32:42,800 --> 00:32:45,560
with the exact same document.

657
00:32:45,560 --> 00:32:47,149
And that concludes our demonstration.

658
00:32:47,150 --> 00:32:50,990
Let's go back to our presentation
and talk about how we can

659
00:32:50,990 --> 00:32:55,740
as an IT industry combat these
fileless type of attacks.

660
00:32:55,740 --> 00:32:56,800
One of the things we can do

661
00:32:56,800 --> 00:33:00,860
is continually look at our
tools, technology, and people

662
00:33:00,860 --> 00:33:03,729
and gauge the effectiveness
of our existing solutions.

663
00:33:03,730 --> 00:33:06,380
So adding fileless attack simulations

664
00:33:06,380 --> 00:33:08,710
to our existing exercises.

665
00:33:08,710 --> 00:33:12,363
Test your users, make sure they
understand what's going on.

666
00:33:13,490 --> 00:33:15,900
We could utilize GPOs and registry entries

667
00:33:15,900 --> 00:33:19,000
to enforce policies around macros and DDE.

668
00:33:19,000 --> 00:33:20,820
But again, this is a very draconian

669
00:33:20,820 --> 00:33:22,760
lockdown type of approach

670
00:33:22,760 --> 00:33:25,670
and doesn't really help
us get our job done.

671
00:33:25,670 --> 00:33:28,630
We also can look for solutions
that go beyond the basics,

672
00:33:28,630 --> 00:33:29,960
that go beyond, you know,

673
00:33:29,960 --> 00:33:32,400
standard on disc malware
detection, et cetera.

674
00:33:32,400 --> 00:33:35,727
But actually begin to look at
things like PowerShell usage

675
00:33:35,727 --> 00:33:38,730
and script usage and things like that.

676
00:33:38,730 --> 00:33:41,010
And we can always implement new tools

677
00:33:41,010 --> 00:33:43,080
and continually reverify.

678
00:33:43,080 --> 00:33:47,020
Continual education with our
employees and our partners

679
00:33:47,020 --> 00:33:48,773
and always testing improvements.

680
00:33:49,730 --> 00:33:51,630
I really appreciate your time today.

681
00:33:51,630 --> 00:33:54,070
And I thank you very much
for hanging out with me

682
00:33:54,070 --> 00:33:58,350
and learning how easy it
is to attack both a PC

683
00:33:58,350 --> 00:34:02,439
and a Mac using the methods
and techniques of OceanLotus.

684
00:34:02,440 --> 00:34:03,273
Thank you.

