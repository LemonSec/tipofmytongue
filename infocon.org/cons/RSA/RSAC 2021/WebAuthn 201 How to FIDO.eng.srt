1
00:00:01,300 --> 00:00:02,160
- Good afternoon, folks,

2
00:00:02,160 --> 00:00:04,120
and welcome to my presentation titled,

3
00:00:04,120 --> 00:00:06,740
WebAuthn 201: How to FIDO,

4
00:00:06,740 --> 00:00:09,883
I'm Christiaan and I'm a
Product Manager here at Google.

5
00:00:11,280 --> 00:00:13,950
So before starting, let's
look at a quick recap

6
00:00:13,950 --> 00:00:17,300
of the state of internet security.

7
00:00:17,300 --> 00:00:20,120
So in 2015, we saw something
peculiar happening,

8
00:00:20,120 --> 00:00:21,580
for the first time phishing

9
00:00:21,580 --> 00:00:23,360
became the dominant exploit vector

10
00:00:23,360 --> 00:00:24,620
over malware on the internet,

11
00:00:24,620 --> 00:00:27,230
and it's really been the case ever since.

12
00:00:27,230 --> 00:00:28,063
Now, you might say,

13
00:00:28,063 --> 00:00:28,895
"That's all good and well,

14
00:00:28,896 --> 00:00:30,507
"but that data's back from 2018,

15
00:00:30,507 --> 00:00:32,159
"let's look at something
a bit more up-to-date."

16
00:00:32,159 --> 00:00:34,589
Well, this one is a
little bit more up-to-date

17
00:00:34,590 --> 00:00:37,310
and there's also this really
strange spike happening

18
00:00:37,310 --> 00:00:39,023
around the start of the pandemic,

19
00:00:40,300 --> 00:00:41,510
and really at Google,

20
00:00:41,510 --> 00:00:43,220
we saw this trend back in 2013

21
00:00:43,220 --> 00:00:45,680
and at that point Google
joined the FIDO Alliance

22
00:00:45,680 --> 00:00:48,360
to double down on phishing
resistant authentication,

23
00:00:48,360 --> 00:00:50,589
and at first the focus for us was really

24
00:00:50,590 --> 00:00:52,180
on augmenting the password

25
00:00:52,180 --> 00:00:55,260
with some strong, phishing
resistant second factor,

26
00:00:55,260 --> 00:00:56,150
but in recent years,

27
00:00:56,150 --> 00:00:59,580
our focus has shifted towards
even replacing the password

28
00:00:59,580 --> 00:01:02,992
and even the username with
a brand new web standard.

29
00:01:04,260 --> 00:01:06,810
So let's talk a little bit
about that web standard

30
00:01:06,810 --> 00:01:08,740
before we get started,

31
00:01:08,740 --> 00:01:10,229
there's really actually two web standards

32
00:01:10,230 --> 00:01:11,320
that we're interested in here,

33
00:01:11,320 --> 00:01:13,630
and that we're gonna discuss
a little bit more today,

34
00:01:13,630 --> 00:01:15,670
the first one being the W3C,

35
00:01:15,670 --> 00:01:18,380
or the World Wide Web
Consortium WebAuthn standard

36
00:01:18,380 --> 00:01:19,213
on the web,

37
00:01:19,213 --> 00:01:22,800
and the second one being
the FIDO CTAP standard,

38
00:01:22,800 --> 00:01:24,240
which has a little bit more to do

39
00:01:24,240 --> 00:01:26,960
with lower level protocol information

40
00:01:26,960 --> 00:01:30,039
between what we call
authenticators and devices,

41
00:01:30,040 --> 00:01:31,390
so if we look into this,

42
00:01:31,390 --> 00:01:32,410
we'll see, firstly,

43
00:01:32,410 --> 00:01:36,039
that there is a web layer
API between a server,

44
00:01:36,040 --> 00:01:37,160
typically a web server,

45
00:01:37,160 --> 00:01:40,770
and a user or a browser or a
user agent here on the left,

46
00:01:40,770 --> 00:01:42,970
and then we have the second specification,

47
00:01:42,970 --> 00:01:45,530
the FIDO CTAP specification,

48
00:01:45,530 --> 00:01:47,940
client to authenticator protocol,

49
00:01:47,940 --> 00:01:50,270
which governs how data flows

50
00:01:50,270 --> 00:01:53,550
between a particular user agent,

51
00:01:53,550 --> 00:01:55,500
the browser or a machine, platform,

52
00:01:55,500 --> 00:01:58,060
and then physical authenticators,

53
00:01:58,060 --> 00:02:00,620
and in this particular presentation,

54
00:02:00,620 --> 00:02:02,280
we're gonna be focusing a little bit more

55
00:02:02,280 --> 00:02:04,300
on the former than the latter,

56
00:02:04,300 --> 00:02:06,140
the former is more for web developers,

57
00:02:06,140 --> 00:02:08,020
and then latter is more
if you're interested

58
00:02:08,020 --> 00:02:11,030
in making or producing
your own authenticators

59
00:02:11,030 --> 00:02:13,533
that'll work with the FIDO specification.

60
00:02:14,380 --> 00:02:15,880
Another way of kind of putting this,

61
00:02:15,880 --> 00:02:17,700
how does FIDO and WebAuthn
relate to one another?

62
00:02:17,700 --> 00:02:20,239
Well, we have this
umbrella term called FIDO2,

63
00:02:20,240 --> 00:02:23,230
and under that, we then
have things like the client,

64
00:02:23,230 --> 00:02:24,760
that's the computer or the phone,

65
00:02:24,760 --> 00:02:26,470
we have the W3C WebAuthn standard

66
00:02:26,470 --> 00:02:28,010
to the remote web server,

67
00:02:28,010 --> 00:02:30,440
and then we have different
types of authenticators,

68
00:02:30,440 --> 00:02:33,030
authenticators can be connected locally,

69
00:02:33,030 --> 00:02:34,790
as in, like, maybe built-in
fingerprint sensors

70
00:02:34,790 --> 00:02:38,140
or Windows Hello and other
types of authenticators,

71
00:02:38,140 --> 00:02:40,899
and then, as soon as
authenticators are remote,

72
00:02:40,900 --> 00:02:43,230
you have this CTAP protocol that kind

73
00:02:43,230 --> 00:02:47,250
of governs the communication
on that particular level.

74
00:02:47,250 --> 00:02:48,104
Now, before we go further,

75
00:02:48,104 --> 00:02:51,660
let's kind of look at the
basics of FIDO and WebAuthn

76
00:02:51,660 --> 00:02:54,900
and kind of how this
protocol hangs together.

77
00:02:54,900 --> 00:02:56,390
So first and foremost,

78
00:02:56,390 --> 00:02:58,450
everything here is around
user authentication,

79
00:02:58,450 --> 00:03:01,100
so when a user wants to sign
into some remote server,

80
00:03:01,100 --> 00:03:03,890
typically they provide
some seeding information

81
00:03:03,890 --> 00:03:06,760
like a username and maybe
even a password in some cases,

82
00:03:06,760 --> 00:03:08,057
and at that point, the server says,

83
00:03:08,057 --> 00:03:09,906
"Well, okay, I think I know who you are,

84
00:03:09,907 --> 00:03:12,030
"but let's make absolutely sure."

85
00:03:12,030 --> 00:03:14,280
And the way that the server
would make absolutely sure,

86
00:03:14,280 --> 00:03:17,630
would be to generate a unique
cryptographic challenge,

87
00:03:17,630 --> 00:03:19,410
and the challenge will
then be sent all the way

88
00:03:19,410 --> 00:03:22,600
to the user's device on which
they're trying to login,

89
00:03:22,600 --> 00:03:24,960
so once the user device
gets that challenge,

90
00:03:24,960 --> 00:03:27,600
passes it through the browser,

91
00:03:27,600 --> 00:03:29,027
the browser looks at
that challenge and says,

92
00:03:29,027 --> 00:03:32,040
"Okay, I'm gonna send it on
to some FIDO authenticator."

93
00:03:32,040 --> 00:03:34,299
In this case, we're
talking about an external,

94
00:03:34,300 --> 00:03:37,330
little USB fob that's attached
to the user's machine,

95
00:03:37,330 --> 00:03:38,750
this could very well also have been

96
00:03:38,750 --> 00:03:40,038
an internal platform authenticator,

97
00:03:40,038 --> 00:03:41,020
doesn't really matter

98
00:03:41,020 --> 00:03:42,770
for the purposes of this illustration,

99
00:03:42,770 --> 00:03:43,920
but essentially what happens here

100
00:03:43,920 --> 00:03:45,359
is the browser or the platform,

101
00:03:45,360 --> 00:03:47,200
then sends this challenge together

102
00:03:47,200 --> 00:03:49,049
with the calling party's ID,

103
00:03:49,050 --> 00:03:50,271
the relying party's,

104
00:03:50,271 --> 00:03:51,410
essentially web domain,

105
00:03:51,410 --> 00:03:54,273
the RPID gets sent on
to that authenticator,

106
00:03:54,273 --> 00:03:55,530
and the authenticator gets both

107
00:03:55,530 --> 00:03:56,970
of these pieces of information,

108
00:03:56,970 --> 00:03:58,507
the authenticator then
looks at this and says,

109
00:03:58,507 --> 00:04:01,597
"Okay, I'm happy to
now sign this challenge

110
00:04:01,597 --> 00:04:03,890
"with a unique private key."

111
00:04:03,890 --> 00:04:05,940
That was generated during some enrollment

112
00:04:05,940 --> 00:04:08,000
or registration ceremony at some point,

113
00:04:08,000 --> 00:04:09,410
and once this is signed,

114
00:04:09,410 --> 00:04:11,570
the signed challenge then
gets sent all the way back

115
00:04:11,570 --> 00:04:13,000
to the client,

116
00:04:13,000 --> 00:04:15,790
and the client will relay that
all the way to the server,

117
00:04:15,790 --> 00:04:17,490
and once the server validates this,

118
00:04:17,490 --> 00:04:20,269
the server can now basically
say two things, right?

119
00:04:20,269 --> 00:04:21,546
The first thing that the
server can say is this,

120
00:04:21,547 --> 00:04:24,177
it can say, "Hey, this user had

121
00:04:24,177 --> 00:04:26,047
"in their possession a private key

122
00:04:26,047 --> 00:04:28,780
"that I tied to the user
at some point in time."

123
00:04:28,780 --> 00:04:30,070
So, you know, we're sure it's the user

124
00:04:30,070 --> 00:04:32,170
'cause they presented their authenticator,

125
00:04:32,170 --> 00:04:36,070
but secondly, we're also
signing over the web origin,

126
00:04:36,070 --> 00:04:37,849
and that's the really
important piece for phishing,

127
00:04:37,850 --> 00:04:39,530
essentially what that means is,

128
00:04:39,530 --> 00:04:42,299
when the user is on google.com,

129
00:04:42,300 --> 00:04:44,180
the browser is attesting to the fact

130
00:04:44,180 --> 00:04:46,260
that the user is on real google.com,

131
00:04:46,260 --> 00:04:48,690
and not, for example, on fake google.com,

132
00:04:48,690 --> 00:04:50,020
which might look like Google,

133
00:04:50,020 --> 00:04:51,580
some, you know, person,

134
00:04:51,580 --> 00:04:53,650
maybe some nefarious
party sent me to a URL

135
00:04:53,650 --> 00:04:54,760
that looks just like Google,

136
00:04:54,760 --> 00:04:56,730
I typed my username, I typed my password,

137
00:04:56,730 --> 00:04:59,370
but because we're signing
over the web origin

138
00:04:59,370 --> 00:05:01,380
that the client browser saw,

139
00:05:01,380 --> 00:05:02,702
the server can now validate

140
00:05:02,702 --> 00:05:04,620
and be absolutely sure that the user

141
00:05:04,620 --> 00:05:07,080
is not giving their
information to some false site,

142
00:05:07,080 --> 00:05:08,690
so we're kind of, like,

143
00:05:08,690 --> 00:05:10,060
doing away with with, like,

144
00:05:10,060 --> 00:05:11,460
man in the middle attacks here,

145
00:05:11,460 --> 00:05:15,489
by knowing whether a user
is on a legitimate site,

146
00:05:15,490 --> 00:05:16,720
versus a non-legitimate site,

147
00:05:16,720 --> 00:05:18,180
you can always think about security keys

148
00:05:18,180 --> 00:05:19,230
or FIDO in general

149
00:05:19,230 --> 00:05:22,110
as the user authenticating
to the remote server,

150
00:05:22,110 --> 00:05:24,387
but the remote server also
kind of authenticating

151
00:05:24,387 --> 00:05:27,110
to the security key or
to the authenticator,

152
00:05:27,110 --> 00:05:29,920
because that information is
embedded in the web signature,

153
00:05:29,920 --> 00:05:33,090
and that's really the
crux of how FIDO protects

154
00:05:33,090 --> 00:05:34,890
against phishing attacks,

155
00:05:34,890 --> 00:05:37,131
whereby users go to look-alike URLs

156
00:05:37,131 --> 00:05:39,890
without really being on the exact URL

157
00:05:39,890 --> 00:05:41,270
that they expect to be on,

158
00:05:41,270 --> 00:05:43,070
so that's kind of just
a little quick primer

159
00:05:43,070 --> 00:05:45,830
before we get into the
real meat of the day.

160
00:05:45,830 --> 00:05:47,190
So now let's move on a little bit

161
00:05:47,190 --> 00:05:50,310
to this document that we
created and we put on GitHub,

162
00:05:50,310 --> 00:05:52,450
and again, a lot of the
information here will be,

163
00:05:52,450 --> 00:05:53,880
you know, cursory,

164
00:05:53,880 --> 00:05:56,320
if you need any deeper
understanding or deeper knowledge

165
00:05:56,320 --> 00:05:57,996
or you wanna try this
out on your own website,

166
00:05:57,996 --> 00:06:02,289
please do look at this particular document

167
00:06:02,290 --> 00:06:05,640
with the link shown here at the bottom,

168
00:06:05,640 --> 00:06:07,530
that kind of goes through all
of these use cases in detail,

169
00:06:07,530 --> 00:06:09,400
but essentially we saw
that there was a gap

170
00:06:09,400 --> 00:06:11,799
between the actual WebAuthn specification

171
00:06:11,800 --> 00:06:14,830
and being able to implement
WebAuthn by relying parties

172
00:06:14,830 --> 00:06:15,820
or web developers,

173
00:06:15,820 --> 00:06:18,090
and that's why we created
this How to FIDO guide,

174
00:06:18,090 --> 00:06:20,060
and today we're gonna
be talking a little bit

175
00:06:20,060 --> 00:06:21,340
about the How to FIDO guide,

176
00:06:21,340 --> 00:06:23,628
and kind of taking pieces
and use cases out of this,

177
00:06:23,629 --> 00:06:26,029
and discussing them in a
little bit more detail.

178
00:06:26,930 --> 00:06:28,230
So before we get to that,

179
00:06:28,230 --> 00:06:29,320
a couple of, like,

180
00:06:29,320 --> 00:06:31,770
pieces of background here
that we need to understand,

181
00:06:31,770 --> 00:06:33,140
the first one is let's talk a little bit

182
00:06:33,140 --> 00:06:34,440
about these authenticators, right?

183
00:06:34,440 --> 00:06:36,240
We've already, in the earlier example,

184
00:06:36,240 --> 00:06:37,930
we've seen physical security keys there,

185
00:06:37,930 --> 00:06:39,830
that was in my example two,

186
00:06:39,830 --> 00:06:42,890
the little USB fob that you
can plug into your device

187
00:06:42,890 --> 00:06:46,090
that contains the user's private keys,

188
00:06:46,090 --> 00:06:49,628
that certainly is one
type of authenticator,

189
00:06:49,629 --> 00:06:52,150
that's available in FIDO,

190
00:06:52,150 --> 00:06:54,289
you know, nomenclature today,

191
00:06:54,290 --> 00:06:57,700
that would be a device that
typically works very well,

192
00:06:57,700 --> 00:07:00,450
it's on the lower right-hand
side of my quadrant,

193
00:07:00,450 --> 00:07:02,110
that's a device that works very well

194
00:07:02,110 --> 00:07:04,710
for second factor authentication,

195
00:07:04,710 --> 00:07:06,609
and we'll talk a little bit
more about that later, right?

196
00:07:06,610 --> 00:07:08,620
That's a little removable USB device,

197
00:07:08,620 --> 00:07:10,220
whenever a user goes to a new machine

198
00:07:10,220 --> 00:07:11,620
and wants to prove their identity,

199
00:07:11,620 --> 00:07:13,160
type username, type password,

200
00:07:13,160 --> 00:07:14,730
also plug in their security key,

201
00:07:14,730 --> 00:07:16,070
and, you know, at the same time,

202
00:07:16,070 --> 00:07:16,969
they're defeating phishing,

203
00:07:16,970 --> 00:07:18,460
but also proving through the remote party

204
00:07:18,460 --> 00:07:20,340
that they are who they
say they are, right?

205
00:07:20,340 --> 00:07:22,703
So a very standard second
factor authenticator,

206
00:07:24,230 --> 00:07:27,990
that's one implementation
that we've seen a lot in FIDO,

207
00:07:27,990 --> 00:07:29,780
the other implementation
that we've seen a lot,

208
00:07:29,780 --> 00:07:31,010
and one that's very interesting

209
00:07:31,010 --> 00:07:32,550
and I wanna talk more about today,

210
00:07:32,550 --> 00:07:35,280
is the one on the left upper side,

211
00:07:35,280 --> 00:07:38,400
the platform user verifying authenticator,

212
00:07:38,400 --> 00:07:40,609
those are typically
things like Windows Hello,

213
00:07:40,610 --> 00:07:43,500
Touch ID, Face ID, the
fingerprint on Android,

214
00:07:43,500 --> 00:07:46,840
those are the types of biometric
authentication modalities

215
00:07:46,840 --> 00:07:48,890
that's also coupled to key stores

216
00:07:48,890 --> 00:07:50,419
on these various platforms,

217
00:07:50,420 --> 00:07:54,020
which web properties can
use pretty much today

218
00:07:54,020 --> 00:07:57,450
as a way to conveniently
reauthenticate users

219
00:07:57,450 --> 00:08:00,080
into their web properties,

220
00:08:00,080 --> 00:08:01,849
this use case is old, right?

221
00:08:01,850 --> 00:08:04,350
We all understand the use
case of I have a phone,

222
00:08:04,350 --> 00:08:06,580
I download my favorite
banking application onto it,

223
00:08:06,580 --> 00:08:08,620
I sign in with my username
and my password today,

224
00:08:08,620 --> 00:08:09,750
and tomorrow when I come back,

225
00:08:09,750 --> 00:08:11,270
I can just put my fingerprint on a sensor

226
00:08:11,270 --> 00:08:12,690
and I'm logged back in, right?

227
00:08:12,690 --> 00:08:14,010
I'm kind of re-logging in,

228
00:08:14,010 --> 00:08:15,170
I've already bootstrapped,

229
00:08:15,170 --> 00:08:16,835
now I'm logging in,

230
00:08:16,835 --> 00:08:19,070
and that experience is something

231
00:08:19,070 --> 00:08:20,870
that the WebAuthn API brings to the web,

232
00:08:20,870 --> 00:08:22,830
so now it's not only prerogative

233
00:08:22,830 --> 00:08:27,169
of applications running on
phones to use local biometrics,

234
00:08:27,170 --> 00:08:29,800
we can now also see
the WebAuthn APIs offer

235
00:08:29,800 --> 00:08:33,669
that same experience to websites, right?

236
00:08:33,669 --> 00:08:35,709
To web properties, both on mobile devices

237
00:08:35,710 --> 00:08:38,220
as well as on desktop and laptop devices,

238
00:08:38,220 --> 00:08:40,520
that has local biometric modalities,

239
00:08:40,520 --> 00:08:42,829
and we're gonna talk a
little bit more about that,

240
00:08:42,830 --> 00:08:46,160
I'm gonna briefly mention
the other two types

241
00:08:46,160 --> 00:08:47,920
of authenticators that we
haven't discussed here,

242
00:08:47,920 --> 00:08:49,449
the roaming user verifying,

243
00:08:49,450 --> 00:08:50,463
that's a brand new type

244
00:08:50,463 --> 00:08:53,766
of physical security key manifestation,

245
00:08:53,767 --> 00:08:56,630
which can also identify a user,

246
00:08:56,630 --> 00:08:57,950
how does it identify a user?

247
00:08:57,950 --> 00:08:59,470
Well, either you have to, you know,

248
00:08:59,470 --> 00:09:02,630
authenticate to the local
security key by using a pin code,

249
00:09:02,630 --> 00:09:04,810
or the security key might
have a fingerprint sensor

250
00:09:04,810 --> 00:09:06,969
that you can tap to actually activate it,

251
00:09:06,970 --> 00:09:09,270
so that means that we can actually get rid

252
00:09:09,270 --> 00:09:11,970
of usernames and passwords
using this type of security key,

253
00:09:11,970 --> 00:09:14,050
because the security key has knowledge

254
00:09:14,050 --> 00:09:15,103
about the user's account

255
00:09:15,103 --> 00:09:17,382
and can identify the individual user

256
00:09:17,383 --> 00:09:19,320
in addition to being able

257
00:09:19,320 --> 00:09:21,360
to being a physical instantiation of,

258
00:09:21,360 --> 00:09:22,400
like, a second factor,

259
00:09:22,400 --> 00:09:25,090
so the something I have is
my physical security key,

260
00:09:25,090 --> 00:09:26,487
and then the something I know is the pin

261
00:09:26,487 --> 00:09:28,520
or the something I am is my fingerprint

262
00:09:28,520 --> 00:09:29,970
that I have to unlock the device with,

263
00:09:29,970 --> 00:09:31,330
so that's another interesting type

264
00:09:31,330 --> 00:09:32,600
of authenticator that we'll discuss,

265
00:09:32,600 --> 00:09:34,770
and then the last one I didn't mention yet

266
00:09:34,770 --> 00:09:37,199
on the left-hand lower side there,

267
00:09:37,200 --> 00:09:40,870
is these smaller types of security keys

268
00:09:40,870 --> 00:09:43,767
that kind of fits almost
permanently into our, you know,

269
00:09:43,767 --> 00:09:48,670
USB ports on our laptops
or desktop devices,

270
00:09:48,670 --> 00:09:50,729
not gonna talk a whole
lot about them today,

271
00:09:50,730 --> 00:09:51,680
if you are interested,

272
00:09:51,680 --> 00:09:54,479
feel free to, throughout
the conversation here,

273
00:09:54,480 --> 00:09:56,350
to put that in the chat box

274
00:09:56,350 --> 00:09:58,010
and I'll try to answer some questions

275
00:09:58,010 --> 00:09:59,010
on that if you're interested,

276
00:09:59,010 --> 00:10:02,310
but that's more or less an
enterprise-type implementation,

277
00:10:02,310 --> 00:10:04,760
where we use the security key

278
00:10:04,760 --> 00:10:07,180
as a kind of a defense-in-depth mechanism,

279
00:10:07,180 --> 00:10:08,520
so think about, like,

280
00:10:08,520 --> 00:10:09,850
I login to a service today,

281
00:10:09,850 --> 00:10:11,217
typing in my username,
type in my password,

282
00:10:11,217 --> 00:10:12,240
and then, you know,

283
00:10:12,240 --> 00:10:13,760
exercising my second factor,

284
00:10:13,760 --> 00:10:15,890
at that point a cookie
or a token gets sent down

285
00:10:15,890 --> 00:10:17,120
to my local machine,

286
00:10:17,120 --> 00:10:19,840
how can the remote web
server be certain a day

287
00:10:19,840 --> 00:10:21,773
or two later that the
token that's being sent

288
00:10:21,773 --> 00:10:24,880
from my machine is still
being sent from my machine

289
00:10:24,880 --> 00:10:26,410
and not from some other machine

290
00:10:26,410 --> 00:10:27,300
that was able to, like,

291
00:10:27,300 --> 00:10:29,109
exfiltrate it off my device?

292
00:10:29,110 --> 00:10:31,260
That's where the little
small security key comes in,

293
00:10:31,260 --> 00:10:33,300
where, on a regular basis,

294
00:10:33,300 --> 00:10:34,370
like maybe every hour

295
00:10:34,370 --> 00:10:36,930
or maybe every eight hours or 24 hours,

296
00:10:36,930 --> 00:10:38,314
the remote web server can ask

297
00:10:38,315 --> 00:10:41,280
for a signature of this
local authenticator

298
00:10:41,280 --> 00:10:42,560
I have in my device,

299
00:10:42,560 --> 00:10:45,390
to still, in addition to
the token that's being sent,

300
00:10:45,390 --> 00:10:47,300
in addition to the
cookie or the, let's say,

301
00:10:47,300 --> 00:10:48,990
OAuth token being sent,

302
00:10:48,990 --> 00:10:51,680
for also double-checking that
the user still has access

303
00:10:51,680 --> 00:10:53,270
to this physical piece of hardware

304
00:10:53,270 --> 00:10:55,530
that's tied to that
particular user account,

305
00:10:55,530 --> 00:10:56,939
so more or less an enterprise use case,

306
00:10:56,940 --> 00:10:58,070
not gonna talk about that too much,

307
00:10:58,070 --> 00:10:59,730
but I just wanted to kind of, like,

308
00:10:59,730 --> 00:11:01,470
explain all the four different types

309
00:11:01,470 --> 00:11:04,000
of authenticators that
we typically address

310
00:11:04,000 --> 00:11:06,713
or try to address with
WebAuthn and with FIDO.

311
00:11:07,860 --> 00:11:10,074
So some more high-level
observation before we start,

312
00:11:10,074 --> 00:11:11,630
the first one is, like,

313
00:11:11,630 --> 00:11:13,710
if you have a website or a web property

314
00:11:13,710 --> 00:11:15,470
or any kind of application
with authentication,

315
00:11:15,470 --> 00:11:17,060
unless you really have a good reason

316
00:11:17,060 --> 00:11:20,670
for re-authenticating your
users on a very frequent basis,

317
00:11:20,670 --> 00:11:21,502
try not to do that,

318
00:11:21,503 --> 00:11:22,740
like at Google, for example,

319
00:11:22,740 --> 00:11:24,690
if you're a consumer and
you're logging into Gmail,

320
00:11:24,690 --> 00:11:25,920
typically your session will live

321
00:11:25,920 --> 00:11:27,520
for a very, very, very long time,

322
00:11:27,520 --> 00:11:28,937
we won't really ever ask
you for your password,

323
00:11:28,937 --> 00:11:29,800
unless we're, like,

324
00:11:29,800 --> 00:11:31,500
uncertain about something,

325
00:11:31,500 --> 00:11:33,600
and even if a user authenticated

326
00:11:33,600 --> 00:11:35,680
into a particular web property,

327
00:11:35,680 --> 00:11:38,579
if they've proven their
multifactor status,

328
00:11:38,580 --> 00:11:40,390
like let's say I'm trying
to sign into my bank,

329
00:11:40,390 --> 00:11:41,480
and I'm typing in my username,

330
00:11:41,480 --> 00:11:44,072
my password and they
sent me an OTP via text,

331
00:11:44,072 --> 00:11:46,080
and I type that OTP in,

332
00:11:46,080 --> 00:11:48,320
there's really no reason
when the same user comes back

333
00:11:48,320 --> 00:11:49,990
on the same machine a day later

334
00:11:49,990 --> 00:11:51,930
to keep asking them for their, you know,

335
00:11:51,930 --> 00:11:52,890
second factor again,

336
00:11:52,890 --> 00:11:53,750
we've kind of already,

337
00:11:53,750 --> 00:11:54,950
with second factor we're trying

338
00:11:54,950 --> 00:11:56,640
to prove possession of something,

339
00:11:56,640 --> 00:11:58,357
we've already proven
possession of a mobile phone

340
00:11:58,357 --> 00:12:01,270
by typing in the message
that came to the device,

341
00:12:01,270 --> 00:12:03,210
once I type that into my laptop,

342
00:12:03,210 --> 00:12:05,167
my laptop now becomes that thing, right?

343
00:12:05,167 --> 00:12:07,380
And that same thing is gonna
be present the next day

344
00:12:07,380 --> 00:12:08,530
when I come back to the session,

345
00:12:08,530 --> 00:12:11,300
so basically two things I wanna say here,

346
00:12:11,300 --> 00:12:12,780
the first one is unless
you have a good reason,

347
00:12:12,780 --> 00:12:14,470
maybe financial or other, you know,

348
00:12:14,470 --> 00:12:15,550
regulatory reason,

349
00:12:15,550 --> 00:12:18,120
keep your users logged
in for longer times,

350
00:12:18,120 --> 00:12:19,430
that kind of, you know,

351
00:12:19,430 --> 00:12:22,276
takes away that common retyping,

352
00:12:22,277 --> 00:12:25,120
the users kind of being trained
into typing their passwords,

353
00:12:25,120 --> 00:12:26,070
you know, almost, like,

354
00:12:26,070 --> 00:12:26,930
hundreds of times a day,

355
00:12:26,930 --> 00:12:29,800
and then when the user
gets fielded with, like,

356
00:12:29,800 --> 00:12:31,270
a phishing website,

357
00:12:31,270 --> 00:12:32,220
chances are higher that they

358
00:12:32,220 --> 00:12:33,920
just indiscriminately
give away their password,

359
00:12:33,920 --> 00:12:36,189
so challenging users
for password fewer times

360
00:12:36,190 --> 00:12:37,060
is actually good,

361
00:12:37,060 --> 00:12:38,449
and secondly, also,

362
00:12:38,450 --> 00:12:39,820
even if you have to challenge users

363
00:12:39,820 --> 00:12:41,590
for passwords all the time,

364
00:12:41,590 --> 00:12:43,710
trying not to keep challenging
them for their MFA,

365
00:12:43,710 --> 00:12:46,270
I think one of the key problems
we're seeing with MFA today

366
00:12:46,270 --> 00:12:48,800
is that users see this
as a big inconvenience,

367
00:12:48,800 --> 00:12:51,459
because in some cases we're asking for MFA

368
00:12:51,460 --> 00:12:52,910
even though we don't really need it,

369
00:12:52,910 --> 00:12:54,709
even though there might be
other passive signals we

370
00:12:54,710 --> 00:12:55,543
could be using,

371
00:12:55,543 --> 00:12:56,500
so those are kind of, like,

372
00:12:56,500 --> 00:12:58,273
the two things I just wanna
call out before we start,

373
00:12:58,273 --> 00:12:59,887
and just kind of embed it

374
00:12:59,887 --> 00:13:03,439
in the rest of the assumptions
throughout the deck.

375
00:13:03,440 --> 00:13:05,070
One piece of terminology,

376
00:13:05,070 --> 00:13:06,750
before we get into the use cases here,

377
00:13:06,750 --> 00:13:09,320
is something that I like to
call account bootstrapping,

378
00:13:09,320 --> 00:13:11,320
I've referred to this
already a little bit earlier

379
00:13:11,320 --> 00:13:12,380
in the deck here,

380
00:13:12,380 --> 00:13:14,080
account bootstrapping is when we talk

381
00:13:14,080 --> 00:13:16,400
about a user signing into an account

382
00:13:16,400 --> 00:13:18,430
on a device for the very first time,

383
00:13:18,430 --> 00:13:20,750
like I buy a new laptop,
I get a new phone,

384
00:13:20,750 --> 00:13:22,360
I'm trying to sign into that device,

385
00:13:22,360 --> 00:13:23,970
I've never signed into it before,

386
00:13:23,970 --> 00:13:27,570
so the remote party has
no idea who the user is,

387
00:13:27,570 --> 00:13:28,570
they have no inkling, right?

388
00:13:28,570 --> 00:13:31,400
There's no other identifying
information from that device

389
00:13:31,400 --> 00:13:33,420
that kind of tells them
that I'm the person

390
00:13:33,420 --> 00:13:34,990
that's gonna login on this device,

391
00:13:34,990 --> 00:13:35,823
that's typically

392
00:13:35,823 --> 00:13:37,910
where accounts are the
most vulnerable, right?

393
00:13:37,910 --> 00:13:40,069
The web property has no idea

394
00:13:40,070 --> 00:13:41,850
and no way to discriminate, like,

395
00:13:41,850 --> 00:13:43,080
a good user from a bad one,

396
00:13:43,080 --> 00:13:45,570
they just have to trust
what the user is presenting,

397
00:13:45,570 --> 00:13:46,403
so bootstrapping is when, you know,

398
00:13:46,403 --> 00:13:48,540
we don't have cookies, we
don't have OAuth tokens,

399
00:13:48,540 --> 00:13:50,730
we have no idea who the user is,

400
00:13:50,730 --> 00:13:53,010
and, you know, typical account
bootstrapping might also

401
00:13:53,010 --> 00:13:54,560
contain account recovery steps,

402
00:13:54,560 --> 00:13:56,459
like maybe the user is trying to sign in,

403
00:13:56,460 --> 00:13:58,170
but they can't remember their password,

404
00:13:58,170 --> 00:13:59,890
maybe we have to send them
through account recovery

405
00:13:59,890 --> 00:14:00,960
so that, you know,

406
00:14:00,960 --> 00:14:03,510
is all part of the account
bootstrapping process

407
00:14:03,510 --> 00:14:05,322
for letting a remote party know that, hey,

408
00:14:05,322 --> 00:14:06,830
it's a brand new user

409
00:14:06,830 --> 00:14:11,610
or a new user on a machine
that's trying to sign in,

410
00:14:11,610 --> 00:14:13,440
and I think that's really where a lot

411
00:14:13,440 --> 00:14:15,280
of the phishing protection's focused,

412
00:14:15,280 --> 00:14:17,770
because that's typically what
an attacker would look like,

413
00:14:17,770 --> 00:14:20,060
an attacker that's trying to, you know,

414
00:14:20,060 --> 00:14:22,550
sign in as you on one of their devices

415
00:14:22,550 --> 00:14:25,240
will typically look like
an account bootstrapping

416
00:14:25,240 --> 00:14:26,203
to a relying party.

417
00:14:27,190 --> 00:14:30,590
So let us now start with
a couple of use cases here

418
00:14:30,590 --> 00:14:33,740
that's taken directly out
of the How to FIDO guide,

419
00:14:33,740 --> 00:14:35,740
for web properties that's interested

420
00:14:35,740 --> 00:14:38,060
in starting to use FIDO and WebAuthn

421
00:14:38,060 --> 00:14:40,339
in their own implementations,

422
00:14:40,340 --> 00:14:42,450
and our first foray into the
land of password-less really

423
00:14:42,450 --> 00:14:45,200
is with what we call
user re-authentication,

424
00:14:45,200 --> 00:14:47,330
so that is when a user
is already signed in,

425
00:14:47,330 --> 00:14:49,740
like let's say on day zero
they get a new device,

426
00:14:49,740 --> 00:14:51,198
they sign in, they type their username,

427
00:14:51,198 --> 00:14:52,470
they type their password,

428
00:14:52,470 --> 00:14:53,750
they're fully signed
into your web property,

429
00:14:53,750 --> 00:14:55,414
at that point in time,

430
00:14:55,414 --> 00:15:00,050
you can actually issue a
particular WebAuthn JavaScript call

431
00:15:00,050 --> 00:15:00,882
on the browser called

432
00:15:00,883 --> 00:15:02,840
PublicKeyCredential.isUserVerifyingPlatformAuthenticator

433
00:15:04,892 --> 00:15:05,820
Available

434
00:15:05,820 --> 00:15:06,741
that's, like, a mouthful,

435
00:15:06,741 --> 00:15:09,160
short hand for that, isUVPAA,

436
00:15:09,160 --> 00:15:10,780
basically that returns a Boolean

437
00:15:10,780 --> 00:15:12,530
that'll tell you whether the platform

438
00:15:12,530 --> 00:15:13,870
that the user is currently on

439
00:15:13,870 --> 00:15:18,870
supports FIDO features as
a way to log that user in

440
00:15:18,990 --> 00:15:21,250
in the future without
typing a password, right?

441
00:15:21,250 --> 00:15:23,180
It tells you whether there's
a platform authenticator,

442
00:15:23,180 --> 00:15:24,729
some built-in modality,

443
00:15:24,730 --> 00:15:26,660
some built-in biometric or other modality

444
00:15:26,660 --> 00:15:29,089
in that platform that you can utilize,

445
00:15:29,090 --> 00:15:30,070
that's a silent call,

446
00:15:30,070 --> 00:15:31,490
the user doesn't see anything,

447
00:15:31,490 --> 00:15:34,940
but once you get a true back
from that particular call,

448
00:15:34,940 --> 00:15:37,250
you're then free to actually
engage with the user

449
00:15:37,250 --> 00:15:39,260
and tell them, "Hey, do you wanna..."

450
00:15:39,260 --> 00:15:40,093
You know, upsell them essentially,

451
00:15:40,093 --> 00:15:40,925
"Do you wanna,

452
00:15:40,926 --> 00:15:41,767
"next time you come to this property,

453
00:15:41,767 --> 00:15:43,667
"just swipe your fingerprint or, you know,

454
00:15:43,667 --> 00:15:47,770
"show your face to sign in to
this particular web property?"

455
00:15:47,770 --> 00:15:48,770
So essentially, like,

456
00:15:48,770 --> 00:15:50,819
you can serve the user some
kind of like an opt-in,

457
00:15:50,820 --> 00:15:53,445
like that skip the password, you know,

458
00:15:53,445 --> 00:15:55,867
a demonstration or a little
example I have there,

459
00:15:55,867 --> 00:15:57,209
and at that point in time

460
00:15:57,210 --> 00:15:59,540
after the user has, you know,

461
00:15:59,540 --> 00:16:00,727
said, "Yes, I want to sign

462
00:16:00,727 --> 00:16:03,199
"in next time coming to this
website without a password."

463
00:16:03,200 --> 00:16:06,620
You can call navigator.credentials.create,

464
00:16:06,620 --> 00:16:08,930
and basically it'll look
something like this,

465
00:16:08,930 --> 00:16:11,520
and again, all these are
in the How to FIDO guide,

466
00:16:11,520 --> 00:16:12,900
so you can copy and paste from there,

467
00:16:12,900 --> 00:16:14,165
but essentially you call the create call

468
00:16:14,166 --> 00:16:17,030
with a couple of parameters, you know,

469
00:16:17,030 --> 00:16:19,120
what RP you are, you know,

470
00:16:19,120 --> 00:16:20,672
some information about the user,

471
00:16:20,672 --> 00:16:21,940
cryptographic challenge,

472
00:16:21,940 --> 00:16:22,780
a bunch of, like,

473
00:16:22,780 --> 00:16:24,860
standard parameters there,

474
00:16:24,860 --> 00:16:27,300
and then you'll tell the
system that you're looking

475
00:16:27,300 --> 00:16:30,770
for an authenticator that's
built into the platform,

476
00:16:30,770 --> 00:16:31,603
you're not looking

477
00:16:31,603 --> 00:16:32,839
for a physical removable security key,

478
00:16:32,840 --> 00:16:34,310
back to my quadrant earlier,

479
00:16:34,310 --> 00:16:35,439
we're looking for something

480
00:16:35,440 --> 00:16:37,250
of the type top left,

481
00:16:37,250 --> 00:16:38,535
we're looking for a platform authenticator

482
00:16:38,535 --> 00:16:39,910
that's built into the platform,

483
00:16:39,910 --> 00:16:40,742
remember we already know it's here

484
00:16:40,743 --> 00:16:43,520
because we issued the isUVPAA,

485
00:16:43,520 --> 00:16:44,840
and we want this thing to be able

486
00:16:44,840 --> 00:16:46,980
to identify the user individually,

487
00:16:46,980 --> 00:16:47,950
what does that mean?

488
00:16:47,950 --> 00:16:49,467
That means that it's not
something that'll just, like,

489
00:16:49,467 --> 00:16:51,140
you know, like a security key,

490
00:16:51,140 --> 00:16:52,949
where you just tap it and it logs you in,

491
00:16:52,950 --> 00:16:54,960
in this case, it actually has the ability

492
00:16:54,960 --> 00:16:56,600
to identify an individual user,

493
00:16:56,600 --> 00:16:58,740
so it has like maybe biometrics

494
00:16:58,740 --> 00:17:00,300
or it has like a knowledge factor

495
00:17:00,300 --> 00:17:01,880
that you have to enter
before unlocking it,

496
00:17:01,880 --> 00:17:02,980
so that's essentially the type

497
00:17:02,980 --> 00:17:04,180
of authenticator we're looking for

498
00:17:04,180 --> 00:17:05,829
for this particular use case,

499
00:17:05,829 --> 00:17:06,849
once you've registered it,

500
00:17:06,849 --> 00:17:08,250
you'll get back some information,

501
00:17:08,250 --> 00:17:09,750
including a public key,

502
00:17:09,750 --> 00:17:10,750
and then later on,

503
00:17:10,750 --> 00:17:12,530
when this user comes back to your website,

504
00:17:12,530 --> 00:17:13,579
let's say you're back, right?

505
00:17:13,579 --> 00:17:15,599
And the user logged in on the first day,

506
00:17:15,599 --> 00:17:17,429
typed their username,
typed their password,

507
00:17:17,430 --> 00:17:18,380
typed their second factor

508
00:17:18,380 --> 00:17:20,230
or whatever way you authenticate them,

509
00:17:20,230 --> 00:17:21,670
you registered their public key,

510
00:17:21,670 --> 00:17:24,150
now they come back a week
later on the same machine,

511
00:17:24,150 --> 00:17:25,000
when they come back,

512
00:17:25,000 --> 00:17:26,377
you now know, "Oh, yeah this user was

513
00:17:26,377 --> 00:17:27,510
"on this machine before."

514
00:17:27,510 --> 00:17:29,080
Because maybe you put down a cookie,

515
00:17:29,080 --> 00:17:32,580
and all you now have to do
to authenticate the user is,

516
00:17:32,580 --> 00:17:34,500
you can make another WebAuthn call,

517
00:17:34,500 --> 00:17:36,206
this time using the get property,

518
00:17:36,206 --> 00:17:39,969
to actually authenticate
and make sure that, yes,

519
00:17:39,970 --> 00:17:43,130
the same private key is
still present on the system

520
00:17:43,130 --> 00:17:46,680
and that the user did
their local unlock gesture,

521
00:17:46,680 --> 00:17:48,130
like they touched their fingerprint,

522
00:17:48,130 --> 00:17:49,090
they showed their face,

523
00:17:49,090 --> 00:17:50,139
they typed in their pin code,

524
00:17:50,140 --> 00:17:51,233
whatever the case might be,

525
00:17:51,233 --> 00:17:53,629
so both of these things are validated

526
00:17:53,630 --> 00:17:54,630
at the point in time

527
00:17:54,630 --> 00:17:56,740
when you do the special WebAuthn get call,

528
00:17:56,740 --> 00:17:59,730
here's a quick example of how
we implemented it at Google,

529
00:17:59,730 --> 00:18:01,230
when you go to your passwords.google.com

530
00:18:01,230 --> 00:18:02,750
on an Android phone on the web,

531
00:18:02,750 --> 00:18:04,210
we'll do this whole sequence,

532
00:18:04,210 --> 00:18:05,043
we'll do a get call,

533
00:18:05,043 --> 00:18:07,250
and you have to set
some special parameters,

534
00:18:07,250 --> 00:18:08,720
which I'll show here,

535
00:18:08,720 --> 00:18:10,050
you'll do the get call,

536
00:18:10,050 --> 00:18:11,980
you send in the credential ID,

537
00:18:11,980 --> 00:18:13,840
so earlier on when you
made your credential,

538
00:18:13,840 --> 00:18:14,673
you get an ID back,

539
00:18:14,673 --> 00:18:15,720
you need to remember it,

540
00:18:15,720 --> 00:18:17,510
you need to say what type of transports,

541
00:18:17,510 --> 00:18:20,080
so basically you wanna deal
with a platform authenticator

542
00:18:20,080 --> 00:18:21,280
or something that's built-in,

543
00:18:21,280 --> 00:18:23,379
so you specify that in the call,

544
00:18:23,380 --> 00:18:24,460
and again, you also, again,

545
00:18:24,460 --> 00:18:26,470
say that you want user verification,

546
00:18:26,470 --> 00:18:28,840
you don't wanna have anyone that's working

547
00:18:28,840 --> 00:18:30,310
on that machine to be able to get in,

548
00:18:30,310 --> 00:18:32,342
you want the user that
actually owns that device,

549
00:18:32,343 --> 00:18:33,437
that have their fingerprint registered,

550
00:18:33,437 --> 00:18:35,860
that have their face
registered on that device,

551
00:18:35,860 --> 00:18:37,300
to be able to get into your property,

552
00:18:37,300 --> 00:18:40,590
so that's all the parameters
that you need to set

553
00:18:40,590 --> 00:18:42,800
in order to do this properly.

554
00:18:42,800 --> 00:18:44,260
So that's a very easy use case,

555
00:18:44,260 --> 00:18:45,670
that can be done today,

556
00:18:45,670 --> 00:18:47,850
we have many examples of web properties

557
00:18:47,850 --> 00:18:48,750
that have done this before,

558
00:18:48,750 --> 00:18:52,370
I know a nice one that you
can certainly Google is eBay,

559
00:18:52,370 --> 00:18:54,729
eBay did an implementation of
this that works really well,

560
00:18:54,730 --> 00:18:55,717
and essentially, if you returned

561
00:18:55,717 --> 00:18:58,550
on the same device to that website,

562
00:18:58,550 --> 00:19:00,290
you can just sign in using the biometrics,

563
00:19:00,290 --> 00:19:02,290
a very standard use case

564
00:19:02,290 --> 00:19:04,510
and very similar to
the one that we've seen

565
00:19:04,510 --> 00:19:07,390
on mobile phones with apps
for a really long time,

566
00:19:07,390 --> 00:19:09,870
so really nice use case
that you can enable,

567
00:19:09,870 --> 00:19:10,770
then I wanna talk a little bit

568
00:19:10,770 --> 00:19:12,639
about phishing resistant second factors

569
00:19:12,640 --> 00:19:15,040
as my second user journey, right?

570
00:19:15,040 --> 00:19:18,100
That is the, remember in my quadrant,

571
00:19:18,100 --> 00:19:19,610
lower right-hand quadrant,

572
00:19:19,610 --> 00:19:21,120
the one that we spoke about first,

573
00:19:21,120 --> 00:19:23,300
that is when I have a very,

574
00:19:23,300 --> 00:19:26,020
very high profile web
service like, or website,

575
00:19:26,020 --> 00:19:27,330
maybe I'm a bank, you know,

576
00:19:27,330 --> 00:19:29,179
maybe we're Google, you know,

577
00:19:29,180 --> 00:19:30,980
maybe Facebook or Twitter,

578
00:19:30,980 --> 00:19:34,760
and you want to protect your
users against getting phished,

579
00:19:34,760 --> 00:19:36,390
maybe it's some high-profile accounts,

580
00:19:36,390 --> 00:19:37,800
and the way in which you can do that

581
00:19:37,800 --> 00:19:40,230
is by issuing your users
or asking them to get hold

582
00:19:40,230 --> 00:19:41,853
of a FIDO compatible security key,

583
00:19:41,853 --> 00:19:44,500
this is a physical thing
that the user can buy,

584
00:19:44,500 --> 00:19:46,520
as long as it's FIDO
compatible, it'll work,

585
00:19:46,520 --> 00:19:49,020
and essentially, what we're doing

586
00:19:49,020 --> 00:19:52,430
is we're upgrading the user's
security for their account,

587
00:19:52,430 --> 00:19:54,810
by not only requiring a
username and password,

588
00:19:54,810 --> 00:19:57,169
or maybe some phishable
form of multi-factor

589
00:19:57,170 --> 00:19:59,330
like OTP codes or push or something,

590
00:19:59,330 --> 00:20:00,832
we're actually going one step further

591
00:20:00,833 --> 00:20:03,340
and we're upgrading their security

592
00:20:04,409 --> 00:20:05,910
to phishing resistant security

593
00:20:05,910 --> 00:20:07,930
by giving them the security key

594
00:20:07,930 --> 00:20:09,370
and asking them to register this

595
00:20:09,370 --> 00:20:13,370
on their particular account
for this web property,

596
00:20:13,370 --> 00:20:15,179
yes, you can still have
other fallback methods

597
00:20:15,180 --> 00:20:16,013
on the account,

598
00:20:16,013 --> 00:20:17,129
but of course, you know,

599
00:20:17,130 --> 00:20:17,963
if you're an attacker,

600
00:20:17,963 --> 00:20:18,824
you're probably gonna be looking for those

601
00:20:18,824 --> 00:20:21,990
and kind of downgrading the
security of the user to those,

602
00:20:21,990 --> 00:20:23,210
and at Google we have this thing

603
00:20:23,210 --> 00:20:24,880
called the Advanced Protection Program,

604
00:20:24,880 --> 00:20:27,040
where the only way you
can login to that account

605
00:20:27,040 --> 00:20:29,750
is by having your security key ready,

606
00:20:29,750 --> 00:20:31,690
and the way you'd opt into this

607
00:20:31,690 --> 00:20:33,440
would be kind of very similar,

608
00:20:33,440 --> 00:20:36,070
you'd call navigator.credentials.create,

609
00:20:36,070 --> 00:20:37,810
just as in the earlier example here,

610
00:20:37,810 --> 00:20:39,350
but this time, your parameters

611
00:20:39,350 --> 00:20:40,413
that you issue this call with

612
00:20:40,413 --> 00:20:41,947
will look slightly different,

613
00:20:41,947 --> 00:20:43,110
and on the right-hand side,

614
00:20:43,110 --> 00:20:44,120
you can kind of see there the way

615
00:20:44,120 --> 00:20:46,879
that we are illustrating this to the user,

616
00:20:46,880 --> 00:20:47,900
on Google accounts,

617
00:20:47,900 --> 00:20:48,950
you'll have, like, you know,

618
00:20:48,950 --> 00:20:50,500
a list of different security keys

619
00:20:50,500 --> 00:20:51,800
that you can add to your account,

620
00:20:51,800 --> 00:20:53,970
and the user can typically
have as many as they want,

621
00:20:53,970 --> 00:20:54,860
and they just have to have one

622
00:20:54,860 --> 00:20:57,469
of these present during bootstrapping,

623
00:20:57,470 --> 00:20:58,970
and the way that this would work is,

624
00:20:58,970 --> 00:21:00,170
we issue create,

625
00:21:00,170 --> 00:21:01,990
a couple of additional calls here,

626
00:21:01,990 --> 00:21:03,750
when we issue the call,

627
00:21:03,750 --> 00:21:04,920
we'll be saying that we actually,

628
00:21:04,920 --> 00:21:08,640
we're looking for a cross-platform type

629
00:21:08,640 --> 00:21:10,830
of authenticator there
on the right-hand side,

630
00:21:10,830 --> 00:21:12,360
under authenticator selection,

631
00:21:12,360 --> 00:21:13,419
we're saying we want something

632
00:21:13,420 --> 00:21:14,840
that's not built-in to the platform,

633
00:21:14,840 --> 00:21:16,330
because remember, if it was built-in,

634
00:21:16,330 --> 00:21:18,530
when the user goes to a
new device to bootstrap,

635
00:21:18,530 --> 00:21:19,560
they'd be out of luck, right?

636
00:21:19,560 --> 00:21:21,250
Because they can't take their old device

637
00:21:21,250 --> 00:21:24,600
to their new device to show
it's platform authenticator,

638
00:21:24,600 --> 00:21:26,770
you're really looking for
something that the user can carry

639
00:21:26,770 --> 00:21:28,410
around between different devices,

640
00:21:28,410 --> 00:21:30,980
so looking for a cross-platform
implementation here,

641
00:21:30,980 --> 00:21:33,010
and then on the left-hand side,

642
00:21:33,010 --> 00:21:34,330
those are a little bit more unimportant,

643
00:21:34,330 --> 00:21:35,552
but essentially we'd be coming in

644
00:21:35,552 --> 00:21:37,959
and we'd be telling the system not

645
00:21:37,960 --> 00:21:41,020
to register any credentials
that already exist,

646
00:21:41,020 --> 00:21:42,139
the only reason we're doing that

647
00:21:42,140 --> 00:21:43,210
is we don't want you

648
00:21:43,210 --> 00:21:45,410
to accidentally register
your same security key twice

649
00:21:45,410 --> 00:21:46,243
on the same property,

650
00:21:46,243 --> 00:21:47,909
so that's what the exclude list is about,

651
00:21:47,910 --> 00:21:48,743
you can read more about that

652
00:21:48,743 --> 00:21:49,960
in the How to FIDO document,

653
00:21:49,960 --> 00:21:51,114
but essentially, the important piece here

654
00:21:51,114 --> 00:21:52,890
is you're making a credential

655
00:21:52,890 --> 00:21:55,860
and you're explicitly
making it cross-platform,

656
00:21:55,860 --> 00:21:56,979
you're not giving the user the choice

657
00:21:56,980 --> 00:21:58,260
to register something internal,

658
00:21:58,260 --> 00:21:59,100
because at that point,

659
00:21:59,100 --> 00:22:00,230
when they bootstrap a new device,

660
00:22:00,230 --> 00:22:01,300
it's not gonna be available,

661
00:22:01,300 --> 00:22:04,110
so cross-platform is
really the important part

662
00:22:04,110 --> 00:22:05,659
in this particular example,

663
00:22:05,660 --> 00:22:06,493
and then, of course,

664
00:22:06,493 --> 00:22:07,610
when the user needs to sign in,

665
00:22:07,610 --> 00:22:08,929
when it comes to sign in time,

666
00:22:08,930 --> 00:22:11,427
you'll be issuing a get
call at this point in time,

667
00:22:11,427 --> 00:22:14,620
and the get call will have some system UI

668
00:22:15,506 --> 00:22:17,190
that'll kind of come up automatically,

669
00:22:17,190 --> 00:22:18,300
that'll tell the user how

670
00:22:18,300 --> 00:22:21,240
to activate their different
types of security keys,

671
00:22:21,240 --> 00:22:22,160
if it's Bluetooth,

672
00:22:22,160 --> 00:22:23,660
there'll be some instructions to pair,

673
00:22:23,660 --> 00:22:24,493
if it's NFC,

674
00:22:24,493 --> 00:22:25,370
it'll kind of tell you to tap it

675
00:22:25,370 --> 00:22:26,520
to the back of your device,

676
00:22:26,520 --> 00:22:27,620
if it supports NFC,

677
00:22:27,620 --> 00:22:29,429
and USB, you'll have this kind of, like,

678
00:22:29,430 --> 00:22:32,040
standard dialogue coming
up from the browser

679
00:22:32,040 --> 00:22:33,740
or the system that'll prompt the user

680
00:22:33,740 --> 00:22:35,800
to activate their particular key,

681
00:22:35,800 --> 00:22:37,860
and the way that you'd, you know,

682
00:22:37,860 --> 00:22:39,780
utilize that is instead of doing a create,

683
00:22:39,780 --> 00:22:41,610
of course now you'll be doing a get call,

684
00:22:41,610 --> 00:22:43,490
navigator.credentials.get,

685
00:22:43,490 --> 00:22:46,760
you'll pass in all the
credentials you know about,

686
00:22:46,760 --> 00:22:48,290
and essentially you'll be waiting

687
00:22:48,290 --> 00:22:49,620
for a signature to come back,

688
00:22:49,620 --> 00:22:51,550
and once the signature
come back to be validated,

689
00:22:51,550 --> 00:22:53,899
as we saw in my earlier
kind of flow diagram,

690
00:22:53,900 --> 00:22:55,100
you'll be checking things like,

691
00:22:55,100 --> 00:22:56,850
is the signature correct, you know,

692
00:22:56,850 --> 00:22:59,730
is it over the right, you know, challenge,

693
00:22:59,730 --> 00:23:01,560
is done with the right private key,

694
00:23:01,560 --> 00:23:02,730
and also, like,

695
00:23:02,730 --> 00:23:04,710
is everything else in the signature right,

696
00:23:04,710 --> 00:23:06,110
like, does it come from the right origin

697
00:23:06,110 --> 00:23:06,943
and all the other stuff?

698
00:23:06,943 --> 00:23:07,840
And at that point in time,

699
00:23:07,840 --> 00:23:09,850
you're pretty sure it's the right user,

700
00:23:09,850 --> 00:23:11,870
and the user was not on a phishing website

701
00:23:11,870 --> 00:23:14,530
at the point in time when
they were trying to sign in,

702
00:23:14,530 --> 00:23:15,730
so that's kind of like, you know,

703
00:23:15,730 --> 00:23:17,910
covering the left upper

704
00:23:17,910 --> 00:23:21,010
and the bottom right-hand
corner of my quadrant.

705
00:23:21,010 --> 00:23:23,210
Now let's look at one more quadrant

706
00:23:23,210 --> 00:23:26,500
before we go to the next section here,

707
00:23:26,500 --> 00:23:28,240
and that quadrant is

708
00:23:28,240 --> 00:23:30,700
about the user verifying
roaming authenticators,

709
00:23:30,700 --> 00:23:32,620
now these are brand new,

710
00:23:32,620 --> 00:23:33,989
this is something that, you know,

711
00:23:33,990 --> 00:23:35,110
we're seeing more

712
00:23:35,110 --> 00:23:36,851
and more authenticator
vendors kind of investing

713
00:23:36,852 --> 00:23:38,690
in these types of devices,

714
00:23:38,690 --> 00:23:40,910
these devices have storage,

715
00:23:40,910 --> 00:23:42,560
they can keep your accounts on them,

716
00:23:42,560 --> 00:23:44,470
so they'll know, for example,

717
00:23:44,470 --> 00:23:45,400
not only about, like,

718
00:23:45,400 --> 00:23:46,340
a private key you have,

719
00:23:46,340 --> 00:23:47,173
but they'll also know

720
00:23:47,173 --> 00:23:49,240
that this private key belongs to Google,

721
00:23:49,240 --> 00:23:50,700
and it's my, you know,

722
00:23:50,700 --> 00:23:53,430
christiaan@google.com
account that's linked

723
00:23:53,430 --> 00:23:54,560
to this particular key,

724
00:23:54,560 --> 00:23:56,480
all that information is stored on the key,

725
00:23:56,480 --> 00:23:59,080
and the key can also
uniquely identify the user,

726
00:23:59,080 --> 00:24:00,149
what does this mean?

727
00:24:00,150 --> 00:24:00,983
It really means

728
00:24:00,983 --> 00:24:03,290
that we can stop asking
the user for usernames,

729
00:24:03,290 --> 00:24:04,627
because the key can
provide that information

730
00:24:04,627 --> 00:24:06,370
to the browser before then, you know,

731
00:24:06,370 --> 00:24:07,969
sending it onto the relying party,

732
00:24:07,970 --> 00:24:10,350
and we also don't need to
ask user for a password

733
00:24:10,350 --> 00:24:12,679
because the key can identify
the user individually

734
00:24:12,680 --> 00:24:13,540
or uniquely,

735
00:24:13,540 --> 00:24:15,010
I have to touch my fingerprint on the key

736
00:24:15,010 --> 00:24:16,500
or after I have to type in my pin code,

737
00:24:16,500 --> 00:24:17,587
now, you know, you might ask,

738
00:24:17,587 --> 00:24:19,017
"Well, if the user's
just typing a pin code,

739
00:24:19,017 --> 00:24:20,430
"how's that any better than a password?"

740
00:24:20,430 --> 00:24:21,720
Well, the thing here is

741
00:24:21,720 --> 00:24:23,650
that pin code is a single pin code

742
00:24:23,650 --> 00:24:24,880
that unlocks the whole key,

743
00:24:24,880 --> 00:24:26,140
so even if I have one key

744
00:24:26,140 --> 00:24:28,030
and I use it with 50 different accounts,

745
00:24:28,030 --> 00:24:30,370
I'll be using the same pin
code for all the accounts,

746
00:24:30,370 --> 00:24:31,780
and it's not password reuse

747
00:24:31,780 --> 00:24:33,570
because the pin code is used locally

748
00:24:33,570 --> 00:24:35,070
to unlock the authenticator,

749
00:24:35,070 --> 00:24:37,090
it's never sent to the remote party,

750
00:24:37,090 --> 00:24:40,560
and unless some attacker
physically gets hold of my key

751
00:24:40,560 --> 00:24:41,669
and has my pin code,

752
00:24:41,670 --> 00:24:42,950
or can touch my fingerprint,

753
00:24:42,950 --> 00:24:44,170
they cannot, you know,

754
00:24:44,170 --> 00:24:45,410
log into my account

755
00:24:45,410 --> 00:24:47,580
because they don't have
the private key material

756
00:24:47,580 --> 00:24:50,010
that's needed for signing the user end,

757
00:24:50,010 --> 00:24:50,943
so these are kind of

758
00:24:50,943 --> 00:24:53,550
like the next generation authenticators

759
00:24:53,550 --> 00:24:56,060
that we're starting to see pop up,

760
00:24:56,060 --> 00:24:58,909
and these really start to, you know,

761
00:24:58,910 --> 00:25:01,730
open the world to true
password-less experiences,

762
00:25:01,730 --> 00:25:03,950
in that first example
we were just up-stepping

763
00:25:03,950 --> 00:25:06,094
and using our biometric to re-login,

764
00:25:06,094 --> 00:25:08,170
remember, if the user goes
to a brand new machine,

765
00:25:08,170 --> 00:25:09,530
they're still gonna
fall back to a password,

766
00:25:09,530 --> 00:25:11,430
so it doesn't really change
the security model much,

767
00:25:11,430 --> 00:25:13,870
here we're really talking about devices

768
00:25:13,870 --> 00:25:14,969
that can allow the user

769
00:25:14,970 --> 00:25:17,540
to login completely without
usernames and passwords

770
00:25:17,540 --> 00:25:19,889
when they go even to a brand new machine,

771
00:25:19,890 --> 00:25:21,160
but, of course, the drawback there

772
00:25:21,160 --> 00:25:22,590
is you're gonna have to get your users

773
00:25:22,590 --> 00:25:25,459
to physically buy and use
and carry these devices,

774
00:25:25,460 --> 00:25:28,400
so we're still looking at
one more use case coming up,

775
00:25:28,400 --> 00:25:30,620
where that would not be a requirement,

776
00:25:30,620 --> 00:25:33,770
but certainly for high
security and high risk users,

777
00:25:33,770 --> 00:25:34,830
especially in the enterprise,

778
00:25:34,830 --> 00:25:36,949
this might be a very, very good example,

779
00:25:36,950 --> 00:25:38,570
and folks that's familiar with, like,

780
00:25:38,570 --> 00:25:39,740
smart card technologies,

781
00:25:39,740 --> 00:25:42,410
this is much more similar
to the traditional, like,

782
00:25:42,410 --> 00:25:44,100
smart card model that we used to have,

783
00:25:44,100 --> 00:25:45,290
where you unlock the card,

784
00:25:45,290 --> 00:25:48,830
and then present your
information to the remote server,

785
00:25:48,830 --> 00:25:50,449
and, you know, the only,

786
00:25:50,450 --> 00:25:51,839
I guess, big benefit here is, of course,

787
00:25:51,839 --> 00:25:53,919
this is now built straight
into the platform,

788
00:25:53,920 --> 00:25:55,080
so no weird, like,

789
00:25:55,080 --> 00:25:57,310
smart card drivers or
things you have to install,

790
00:25:57,310 --> 00:25:58,791
and of course this works across the board

791
00:25:58,791 --> 00:26:01,960
on pretty much all
popular competing devices,

792
00:26:01,960 --> 00:26:04,880
so whether it's iPhone or
Mac or Android or Chrome OS,

793
00:26:04,880 --> 00:26:07,840
like, all these technologies
are pretty much supported,

794
00:26:07,840 --> 00:26:09,949
although there's a little
asterisk with Android here,

795
00:26:09,950 --> 00:26:13,340
some of these technologies
are still rolling out there.

796
00:26:13,340 --> 00:26:15,260
So then we'll briefly look

797
00:26:15,260 --> 00:26:18,450
at how to register such
a type of authenticator,

798
00:26:18,450 --> 00:26:19,300
remember, it's gonna be very,

799
00:26:19,300 --> 00:26:23,573
very similar to the second
factor external device,

800
00:26:23,574 --> 00:26:24,502
there's gonna be one little difference,

801
00:26:24,502 --> 00:26:26,379
but we'll look at that in a second,

802
00:26:26,380 --> 00:26:27,420
here's kind of an example

803
00:26:27,420 --> 00:26:28,960
of how could you present this to a user,

804
00:26:28,960 --> 00:26:30,007
you kind of upsell them and say,

805
00:26:30,007 --> 00:26:32,540
"Hey, do you wanna set up
signing in without a password?"

806
00:26:32,540 --> 00:26:33,960
And if the user says, "Yes."

807
00:26:33,960 --> 00:26:37,140
Then, of course, you'll
initiate this type of flow,

808
00:26:37,140 --> 00:26:39,600
you'll, again, do a
navigator.credentials.create,

809
00:26:39,600 --> 00:26:41,949
but this time you will set the parameters

810
00:26:41,950 --> 00:26:43,990
just a teeny bit differently,

811
00:26:43,990 --> 00:26:44,900
and you'll recall,

812
00:26:44,900 --> 00:26:47,090
earlier when you registered
the second factor key,

813
00:26:47,090 --> 00:26:48,689
everything looked pretty similar,

814
00:26:48,690 --> 00:26:50,610
the really only big difference here

815
00:26:50,610 --> 00:26:53,699
is this requireResidentKey

816
00:26:53,700 --> 00:26:56,000
and also the userVerification fields,

817
00:26:56,000 --> 00:26:58,417
here we're saying, "We
really need user verification

818
00:26:58,417 --> 00:27:00,290
"because we want to do
away with the password."

819
00:27:00,290 --> 00:27:01,680
The password was the previous way

820
00:27:01,680 --> 00:27:03,260
that you did user verification,

821
00:27:03,260 --> 00:27:04,640
now you wanna offload that to the key,

822
00:27:04,640 --> 00:27:06,490
so you want to key to be
able to verify the user

823
00:27:06,490 --> 00:27:08,140
through a pin or a biometric or whatever,

824
00:27:08,140 --> 00:27:09,790
and also the requireResidentKey,

825
00:27:09,790 --> 00:27:11,050
we set that to true

826
00:27:11,050 --> 00:27:14,200
because we want the key to
be able to identify the user

827
00:27:14,200 --> 00:27:15,710
and have the account information,

828
00:27:15,710 --> 00:27:17,820
so the browser can present
it to them next time,

829
00:27:17,820 --> 00:27:19,189
and we'll see that in a second,

830
00:27:19,190 --> 00:27:21,007
so both of these
properties we set to true,

831
00:27:21,007 --> 00:27:23,210
and of course we still set cross-platform

832
00:27:23,210 --> 00:27:24,609
because we want an external device

833
00:27:24,609 --> 00:27:26,513
that the user can then
go and use, you know,

834
00:27:26,513 --> 00:27:27,939
as they, you know,

835
00:27:27,940 --> 00:27:31,183
transition to new computing
devices in their life cycle.

836
00:27:32,530 --> 00:27:33,363
Now, the problem is, like,

837
00:27:33,363 --> 00:27:34,880
how do you choose between UVRA,

838
00:27:34,880 --> 00:27:36,940
which is the user verifying
roaming authenticator,

839
00:27:36,940 --> 00:27:38,150
the one we just looked at,

840
00:27:38,150 --> 00:27:40,380
and the second factor use case,

841
00:27:40,380 --> 00:27:43,140
so my best answer to this
is you don't have to, right?

842
00:27:43,140 --> 00:27:44,720
If you're a website

843
00:27:44,720 --> 00:27:47,230
and you just wanna offer your
user the best experience,

844
00:27:47,230 --> 00:27:49,520
what you can do is you can actually just,

845
00:27:49,520 --> 00:27:50,639
during the registration,

846
00:27:50,640 --> 00:27:51,473
when the user says,

847
00:27:51,473 --> 00:27:53,399
"I wanna register a new security key."

848
00:27:53,400 --> 00:27:54,920
You can tell the system

849
00:27:54,920 --> 00:27:57,030
to give you back whatever the best thing

850
00:27:57,030 --> 00:27:58,190
is the user has available,

851
00:27:58,190 --> 00:27:59,250
so you can tell it

852
00:27:59,250 --> 00:28:02,520
that you'd prefer a user
verifying roaming authenticator,

853
00:28:02,520 --> 00:28:04,110
something that can store the user ID

854
00:28:04,110 --> 00:28:06,300
and something that can
verify the user individually,

855
00:28:06,300 --> 00:28:09,100
but if the user doesn't
have one of those devices,

856
00:28:09,100 --> 00:28:10,419
you'll take whatever you can get,

857
00:28:10,420 --> 00:28:11,720
you'll even take the second factor

858
00:28:11,720 --> 00:28:14,160
or old-school security key credentials,

859
00:28:14,160 --> 00:28:16,750
and when you get information
back after the register call,

860
00:28:16,750 --> 00:28:18,470
you can decide what you wanna do,

861
00:28:18,470 --> 00:28:20,410
like, you'll know which
one of these you got back,

862
00:28:20,410 --> 00:28:21,620
so you can decide that,

863
00:28:21,620 --> 00:28:24,229
oh yeah, if the user just
registered using a second factor,

864
00:28:24,230 --> 00:28:25,480
you know, you're still gonna need

865
00:28:25,480 --> 00:28:26,313
to prompt them for a username

866
00:28:26,313 --> 00:28:27,660
and a password when they sign in,

867
00:28:27,660 --> 00:28:30,970
or if you gave back a UVRA response,

868
00:28:30,970 --> 00:28:33,010
you'll know that next time the user comes

869
00:28:33,010 --> 00:28:34,820
to sign in on a new device,

870
00:28:34,820 --> 00:28:36,419
you actually don't even have to ask them

871
00:28:36,420 --> 00:28:37,850
for a username or a password

872
00:28:37,850 --> 00:28:39,669
because all this information
would be available,

873
00:28:39,670 --> 00:28:41,860
and you can also discriminate
based on these, right?

874
00:28:41,860 --> 00:28:43,850
Also earlier on, when
you do the registration,

875
00:28:43,850 --> 00:28:45,459
if you require a resident key

876
00:28:45,460 --> 00:28:46,750
but the key can't give it to you,

877
00:28:46,750 --> 00:28:48,240
the user will see an error,

878
00:28:48,240 --> 00:28:49,970
in this particular case,

879
00:28:49,970 --> 00:28:51,510
what we'll see here in a couple of seconds

880
00:28:51,510 --> 00:28:53,890
is you can decide, you know,

881
00:28:53,890 --> 00:28:55,570
whether you wanna be that descriptive

882
00:28:55,570 --> 00:28:56,840
or whether you just want the device

883
00:28:56,840 --> 00:28:58,879
or the service to give
you back whatever it can,

884
00:28:58,880 --> 00:28:59,713
and that's kind of, like,

885
00:28:59,713 --> 00:29:00,750
the recommendation we're making,

886
00:29:00,750 --> 00:29:02,840
unless you want to really live in a world

887
00:29:02,840 --> 00:29:04,280
where your users don't ever have

888
00:29:04,280 --> 00:29:05,550
to deal with passwords again,

889
00:29:05,550 --> 00:29:07,050
in which case you'll wanna force,

890
00:29:07,050 --> 00:29:09,240
as we saw in the earlier
example, the UVRA,

891
00:29:10,440 --> 00:29:11,980
so essentially, if we look here,

892
00:29:11,980 --> 00:29:14,350
as I say there in the last
bullet point, you know,

893
00:29:14,350 --> 00:29:15,909
we'll do a resident, discoverable key,

894
00:29:15,910 --> 00:29:17,300
and we'll do like a best effort mode,

895
00:29:17,300 --> 00:29:20,419
a preferred mode here in the code sample,

896
00:29:20,420 --> 00:29:22,780
everything looks very
much the same as earlier,

897
00:29:22,780 --> 00:29:24,190
but here you'll see two different things,

898
00:29:24,190 --> 00:29:26,110
you'll see you
residentKeyRequirement is preferred

899
00:29:26,110 --> 00:29:27,570
and the userVerification's preferred,

900
00:29:27,570 --> 00:29:29,240
and then whatever the key can give you,

901
00:29:29,240 --> 00:29:30,200
it'll give you back,

902
00:29:30,200 --> 00:29:33,100
and we also asked for a
specific extension this time,

903
00:29:33,100 --> 00:29:34,360
and that extension is necessary

904
00:29:34,360 --> 00:29:36,159
because we want the key to be able

905
00:29:36,160 --> 00:29:37,190
to tell you what it gave you,

906
00:29:37,190 --> 00:29:38,650
otherwise, you're just
gonna get some response

907
00:29:38,650 --> 00:29:39,483
and you won't really know,

908
00:29:39,483 --> 00:29:41,090
did the key do user verification?

909
00:29:41,090 --> 00:29:42,730
Can the key store resident keys?

910
00:29:42,730 --> 00:29:43,563
We don't know,

911
00:29:43,563 --> 00:29:45,550
creditProps or credential
properties gives you

912
00:29:45,550 --> 00:29:46,576
some additional information back

913
00:29:46,576 --> 00:29:49,100
that tells you what was actually achieved

914
00:29:49,100 --> 00:29:50,240
when you spoke to the key,

915
00:29:50,240 --> 00:29:51,650
so that's kind of pretty important,

916
00:29:51,650 --> 00:29:53,760
and again, this is
called out in more detail

917
00:29:53,760 --> 00:29:55,893
in the How to FIDO document as well,

918
00:29:56,972 --> 00:29:57,820
and then the last one,

919
00:29:57,820 --> 00:29:58,947
which I think is really interesting,

920
00:29:58,948 --> 00:30:02,164
is, well, we really wanna live
in a world without passwords,

921
00:30:02,164 --> 00:30:03,650
maybe even without usernames,

922
00:30:03,650 --> 00:30:06,240
but the challenge is we're
never gonna get all the users

923
00:30:06,240 --> 00:30:07,770
in the world to carry keys, right?

924
00:30:07,770 --> 00:30:08,680
That's just not gonna happen,

925
00:30:08,680 --> 00:30:11,360
but users already carry
computing devices with them

926
00:30:11,360 --> 00:30:12,193
wherever they go,

927
00:30:12,193 --> 00:30:13,580
they have phones,

928
00:30:13,580 --> 00:30:14,889
and what if the mobile phone

929
00:30:14,890 --> 00:30:16,130
that the user already carries

930
00:30:16,130 --> 00:30:18,050
can start to act as a UVRA?

931
00:30:18,050 --> 00:30:18,909
Now one of the key problems

932
00:30:18,910 --> 00:30:22,170
is how do you attach your
phone to a laptop or a desktop?

933
00:30:22,170 --> 00:30:24,300
And for FIDO, it's pretty important

934
00:30:24,300 --> 00:30:26,290
that you have some
local attachment, right?

935
00:30:26,290 --> 00:30:29,580
FIDO is based on local
connectivity and proximity,

936
00:30:29,580 --> 00:30:31,938
that's the thing that gives
you the phishing resistance,

937
00:30:31,939 --> 00:30:34,340
so we can't really just
talk via the Cloud,

938
00:30:34,340 --> 00:30:36,209
we really need some local connectivity,

939
00:30:36,210 --> 00:30:37,043
and there is a couple

940
00:30:37,043 --> 00:30:38,570
of ways in which one can do that, right?

941
00:30:38,570 --> 00:30:41,020
We have, like, physical
cables to a device,

942
00:30:41,020 --> 00:30:42,680
not so user friendly,

943
00:30:42,680 --> 00:30:44,710
another option might be using Bluetooth,

944
00:30:44,710 --> 00:30:46,760
something that we've been actively looking

945
00:30:46,760 --> 00:30:48,360
in lately in FIDO,

946
00:30:48,360 --> 00:30:50,370
so we're kind of thinking
that in the future,

947
00:30:50,370 --> 00:30:52,511
the mechanism of attachment
will probably be some kind

948
00:30:52,511 --> 00:30:53,920
of like a Bluetooth link

949
00:30:53,920 --> 00:30:57,750
between the computing
device and the mobile phone,

950
00:30:57,750 --> 00:30:59,550
where you can then register the phone

951
00:30:59,550 --> 00:31:02,103
as a user verifying roaming authenticator,

952
00:31:03,300 --> 00:31:05,517
and there's a couple of different
ways in which, you know,

953
00:31:05,517 --> 00:31:07,630
in the specification
that's being described,

954
00:31:07,630 --> 00:31:08,740
the way that you're gonna do it,

955
00:31:08,740 --> 00:31:10,360
of course, one of the
easiest ways would be,

956
00:31:10,360 --> 00:31:11,979
let's say I'm on my phone

957
00:31:11,980 --> 00:31:14,280
and I download my bank's application

958
00:31:14,280 --> 00:31:17,870
or I go to my banking
website, www.mybank.com,

959
00:31:17,870 --> 00:31:19,816
on my phone I get a prompt that says,

960
00:31:19,817 --> 00:31:21,470
"Hey, do you wanna skip
the password next time?"

961
00:31:21,470 --> 00:31:22,340
I say, "Yes."

962
00:31:22,340 --> 00:31:24,899
At that point in time I
register a local FIDO credential

963
00:31:24,900 --> 00:31:25,733
on my phone,

964
00:31:25,733 --> 00:31:27,550
so next time I come back on the same phone

965
00:31:27,550 --> 00:31:28,570
to that banking website,

966
00:31:28,570 --> 00:31:30,010
I can just touch my fingerprint,

967
00:31:30,010 --> 00:31:31,680
but imagine if that credential

968
00:31:31,680 --> 00:31:34,310
is now actually made
available over Bluetooth

969
00:31:34,310 --> 00:31:36,340
so that in the future any device

970
00:31:36,340 --> 00:31:38,574
that's in range and paired with my phone

971
00:31:38,575 --> 00:31:40,730
can actually utilize that same credential,

972
00:31:40,730 --> 00:31:43,850
so tomorrow I might be going
to mybank.com on my laptop,

973
00:31:43,850 --> 00:31:45,899
and my laptop can reach out to my phone,

974
00:31:45,900 --> 00:31:48,950
figure out there's already
credentials for my bank here,

975
00:31:48,950 --> 00:31:50,820
and then instead of having to, like,

976
00:31:50,820 --> 00:31:52,120
type usernames and passwords,

977
00:31:52,120 --> 00:31:53,500
I can just approve that login

978
00:31:53,500 --> 00:31:54,970
with my fingerprint on my phone,

979
00:31:54,970 --> 00:31:57,090
in an un-phishable or
a phishing resistant,

980
00:31:57,090 --> 00:31:58,590
called phishing resistant way,

981
00:31:59,600 --> 00:32:01,456
and that's kind of the future
of this protocol, right?

982
00:32:01,457 --> 00:32:04,160
And we already have built all
these hooks into the protocol,

983
00:32:04,160 --> 00:32:05,650
or most of them,

984
00:32:05,650 --> 00:32:07,840
the way that this registration
would work of course,

985
00:32:07,840 --> 00:32:08,673
the first thing we do

986
00:32:08,673 --> 00:32:11,990
is we issue a
isUserVerifyingPlatformAuthenticator call

987
00:32:11,990 --> 00:32:13,330
on the local phone,

988
00:32:13,330 --> 00:32:14,840
because we wanna register the key,

989
00:32:14,840 --> 00:32:16,956
and, you know, folks can maybe say that,

990
00:32:16,957 --> 00:32:17,790
"Well, if it's an app on the phone,

991
00:32:17,790 --> 00:32:19,397
"you can already do all of this stuff,

992
00:32:19,397 --> 00:32:20,409
"why do FIDO?"

993
00:32:20,410 --> 00:32:21,700
Well, the nice thing about, like,

994
00:32:21,700 --> 00:32:25,200
moving to FIDO over just
using the local biometric APIs

995
00:32:25,200 --> 00:32:27,270
on the phone is if you use FIDO

996
00:32:27,270 --> 00:32:28,790
to handle all of this for you,

997
00:32:28,790 --> 00:32:30,879
in the future when these credentials do

998
00:32:30,880 --> 00:32:32,500
become available over Bluetooth,

999
00:32:32,500 --> 00:32:35,640
you'll be able to use them
immediately on, you know,

1000
00:32:35,640 --> 00:32:37,420
any other computing device the user has

1001
00:32:37,420 --> 00:32:39,220
that's trying to access
that same web property,

1002
00:32:39,220 --> 00:32:40,879
so kind of really truly
up-stepping the user

1003
00:32:40,879 --> 00:32:42,551
into a password-less world,

1004
00:32:42,551 --> 00:32:45,264
without the need for any
other discreet authenticators,

1005
00:32:45,264 --> 00:32:46,919
and typically the way then we'll do this

1006
00:32:46,920 --> 00:32:50,020
is we'll call it
navigator.credentials.create, you know,

1007
00:32:50,020 --> 00:32:51,889
on that device, on the phone itself,

1008
00:32:51,890 --> 00:32:52,723
again, we'll set, you know,

1009
00:32:52,723 --> 00:32:54,840
the authenticatorAttachment to platform,

1010
00:32:54,840 --> 00:32:56,209
because we're creating it on the phone,

1011
00:32:56,210 --> 00:32:57,870
we'll set requireResidentKey,

1012
00:32:57,870 --> 00:32:59,219
because we wanna identify the user

1013
00:32:59,220 --> 00:33:01,416
without the need for a password,

1014
00:33:01,416 --> 00:33:03,700
in userVerification for
requireResidentKey of course,

1015
00:33:03,700 --> 00:33:04,980
we wanna do, you know,

1016
00:33:04,980 --> 00:33:06,450
username-less-type setups,

1017
00:33:06,450 --> 00:33:08,486
where the phone or the
authenticator can tell you

1018
00:33:08,486 --> 00:33:11,210
about all the accounts
that it has available,

1019
00:33:11,210 --> 00:33:12,690
and once you do this,

1020
00:33:12,690 --> 00:33:14,502
you're gonna get back some information,

1021
00:33:14,502 --> 00:33:15,550
and the information that
you're gonna get back

1022
00:33:15,550 --> 00:33:18,330
after registration will
contain the transports,

1023
00:33:18,330 --> 00:33:20,260
basically, it'll tell
you how this credential

1024
00:33:20,260 --> 00:33:21,879
can be exercised in the future,

1025
00:33:21,880 --> 00:33:23,332
now, if you register a
platform authenticator,

1026
00:33:23,332 --> 00:33:26,820
you're always gonna get
back an internal transport,

1027
00:33:26,820 --> 00:33:28,260
that tells you the key,

1028
00:33:28,260 --> 00:33:31,230
or the authenticator can
be exercised internally,

1029
00:33:31,230 --> 00:33:32,063
but what you should be looking out for,

1030
00:33:32,063 --> 00:33:34,850
you should also be looking
out for additional transports,

1031
00:33:34,850 --> 00:33:37,149
BLE, which is Bluetooth Low Energy,

1032
00:33:37,150 --> 00:33:38,170
or maybe even CaBLE,

1033
00:33:38,170 --> 00:33:41,320
which is a new protocol that
we're working in FIDO on,

1034
00:33:41,320 --> 00:33:42,419
and CaBLE is kind of, like,

1035
00:33:42,420 --> 00:33:44,730
stands for Cloud-assisted
Bluetooth pairing,

1036
00:33:44,730 --> 00:33:46,080
so the idea would be that, you know,

1037
00:33:46,080 --> 00:33:47,960
you kind of have some
information going to the Cloud,

1038
00:33:47,960 --> 00:33:49,200
but some information going locally,

1039
00:33:49,200 --> 00:33:50,800
so you have that presence detection,

1040
00:33:50,800 --> 00:33:51,750
but you don't have to go

1041
00:33:51,750 --> 00:33:52,610
through the traditional, like,

1042
00:33:52,610 --> 00:33:54,024
Bluetooth pairing steps,

1043
00:33:54,025 --> 00:33:56,010
because we know a lot
of users drop off there,

1044
00:33:56,010 --> 00:33:58,250
so these are newer things
we're working on in FIDO,

1045
00:33:58,250 --> 00:33:59,603
and essentially what that will enable you,

1046
00:33:59,603 --> 00:34:01,520
it will enable other devices

1047
00:34:01,520 --> 00:34:03,800
that's not physically the phone itself,

1048
00:34:03,800 --> 00:34:05,860
to wirelessly reach out to the phone

1049
00:34:05,860 --> 00:34:07,904
and exercise some of
the credentials you have

1050
00:34:07,904 --> 00:34:10,750
for password-less type of bootstraps,

1051
00:34:10,750 --> 00:34:11,583
and the question then is,

1052
00:34:11,583 --> 00:34:12,840
well, how will you sign

1053
00:34:12,840 --> 00:34:15,010
in once you've registered
these credentials?

1054
00:34:15,010 --> 00:34:16,659
Well, typically the way
that you would do this,

1055
00:34:16,659 --> 00:34:18,100
is you'll, you know,

1056
00:34:18,100 --> 00:34:18,933
tell the user,

1057
00:34:18,933 --> 00:34:20,340
"Hey, do you wanna type a username?"

1058
00:34:20,340 --> 00:34:22,297
In one option or in another option,

1059
00:34:22,297 --> 00:34:23,157
"Why don't you just, like,

1060
00:34:23,157 --> 00:34:23,989
"skip the password

1061
00:34:23,989 --> 00:34:25,889
"and sign in without a
username or a password?"

1062
00:34:25,889 --> 00:34:27,569
And if you click on
that particular button,

1063
00:34:27,570 --> 00:34:30,739
the system will issue a
get call with no allowance,

1064
00:34:30,739 --> 00:34:32,709
you just won't say anything to the system,

1065
00:34:32,710 --> 00:34:33,543
you'll just say,

1066
00:34:33,543 --> 00:34:34,777
"Hey, I want a credential,

1067
00:34:34,777 --> 00:34:35,817
"I don't care which one,

1068
00:34:35,817 --> 00:34:36,956
"you figure it out,

1069
00:34:36,956 --> 00:34:39,049
"and I want user verification
on that credential."

1070
00:34:39,050 --> 00:34:39,882
And what'll then happen

1071
00:34:39,882 --> 00:34:41,819
is your browser or your user engine

1072
00:34:41,820 --> 00:34:42,714
will actually step in,

1073
00:34:42,714 --> 00:34:46,179
it'll present you a list of
all the available credentials,

1074
00:34:46,179 --> 00:34:47,850
either locally or, you know,

1075
00:34:47,850 --> 00:34:49,960
on devices in proximity that, you know,

1076
00:34:49,960 --> 00:34:51,239
you have a relationship with,

1077
00:34:51,239 --> 00:34:52,109
and at that point in time,

1078
00:34:52,110 --> 00:34:53,850
the user can pick any of those accounts,

1079
00:34:53,850 --> 00:34:55,310
just touch their fingerprint

1080
00:34:55,310 --> 00:34:57,210
and they'd be magically signed in,

1081
00:34:57,210 --> 00:34:58,043
so that's kind of, like,

1082
00:34:58,043 --> 00:35:01,400
the experience in the future
that we're aiming for,

1083
00:35:01,400 --> 00:35:04,730
we looked at four separate
use cases if you remember,

1084
00:35:04,730 --> 00:35:05,980
the re-authentication step,

1085
00:35:05,980 --> 00:35:09,170
the second factor step,
the UVRA physical keys,

1086
00:35:09,170 --> 00:35:10,320
and then the phone one,

1087
00:35:10,320 --> 00:35:12,225
of these four, the phone
one is the only one

1088
00:35:12,225 --> 00:35:13,279
that's kind of, like,

1089
00:35:13,280 --> 00:35:14,520
still in progress,

1090
00:35:14,520 --> 00:35:16,860
but I did wanna kind of
give a quick indication

1091
00:35:16,860 --> 00:35:18,110
of how that would work,

1092
00:35:18,110 --> 00:35:20,490
all three of the others are
readily available today,

1093
00:35:20,490 --> 00:35:21,870
and you can actually start, you know,

1094
00:35:21,870 --> 00:35:24,380
working with those on your web properties,

1095
00:35:24,380 --> 00:35:26,870
I did wanna kind of
allude to that fourth one,

1096
00:35:26,870 --> 00:35:29,163
because if you adopt
WebAuthn and FIDO today,

1097
00:35:29,163 --> 00:35:31,470
that experience will
basically become available

1098
00:35:31,470 --> 00:35:34,410
to you as soon as the relevant, you know,

1099
00:35:34,410 --> 00:35:35,609
kind of foundational elements

1100
00:35:35,610 --> 00:35:37,910
in the infrastructure has been setup,

1101
00:35:37,910 --> 00:35:40,410
and we're continuously
working on that in WebAuthn,

1102
00:35:40,410 --> 00:35:41,359
which you can follow on GitHub

1103
00:35:41,360 --> 00:35:44,450
as well as in the FIDO Alliance.

1104
00:35:44,450 --> 00:35:46,602
So with that, I hope that
gives you a good overview

1105
00:35:46,603 --> 00:35:47,780
of, you know,

1106
00:35:47,780 --> 00:35:50,220
how all these different
things hang together,

1107
00:35:50,220 --> 00:35:52,069
and I wanted to have an apply slide here

1108
00:35:52,070 --> 00:35:52,903
and kind of just, you know,

1109
00:35:52,903 --> 00:35:54,209
give some quick next steps

1110
00:35:54,210 --> 00:35:55,910
on what you can do in the meantime,

1111
00:35:55,910 --> 00:35:57,580
IBM has a pretty nice FIDO server,

1112
00:35:57,580 --> 00:35:58,880
implementing most of these use cases,

1113
00:35:58,880 --> 00:36:00,560
in the How to FIDO document

1114
00:36:00,560 --> 00:36:03,370
at that particular URL there, you know,

1115
00:36:03,370 --> 00:36:05,100
you can come peruse the document

1116
00:36:05,100 --> 00:36:07,549
that I've discussed and even contribute,

1117
00:36:07,550 --> 00:36:10,260
if you have some additional
ideas or some questions,

1118
00:36:10,260 --> 00:36:13,316
feel free to ask them directly on GitHub,

1119
00:36:13,316 --> 00:36:16,049
you can play with a FIDO
server that Google has set up,

1120
00:36:16,050 --> 00:36:17,660
an open-source one on GitHub,

1121
00:36:17,660 --> 00:36:20,317
and finally, we have some Codelabs also,

1122
00:36:20,318 --> 00:36:22,357
where you can play around with some

1123
00:36:22,357 --> 00:36:24,942
of these APIs on Android,

1124
00:36:24,942 --> 00:36:25,919
another thing that I
didn't mention earlier

1125
00:36:25,919 --> 00:36:28,973
is remember that all of these web APIs

1126
00:36:28,973 --> 00:36:30,340
that we have on Android

1127
00:36:30,340 --> 00:36:31,790
that you can call via the browser,

1128
00:36:31,790 --> 00:36:34,790
they have parallels on the
Android system as well,

1129
00:36:34,790 --> 00:36:36,360
so if you have an Android app,

1130
00:36:36,360 --> 00:36:38,500
you don't have to keep
integrating with the key store

1131
00:36:38,500 --> 00:36:40,550
and with biometric prompt
and things directly,

1132
00:36:40,550 --> 00:36:42,190
you can actually be using the FIDO APIs

1133
00:36:42,190 --> 00:36:44,680
in your own applications as well,

1134
00:36:44,680 --> 00:36:47,279
and then you'll get keys
that's essentially shared

1135
00:36:47,280 --> 00:36:48,630
between your app,

1136
00:36:48,630 --> 00:36:51,330
between your website on the browser,

1137
00:36:51,330 --> 00:36:53,830
and into the future even on other devices,

1138
00:36:53,830 --> 00:36:56,799
which can then kind of be
accessed over this Bluetooth

1139
00:36:56,800 --> 00:36:59,680
or wireless links that we're working on.

1140
00:36:59,680 --> 00:37:02,089
So with that, I hope that was interesting,

1141
00:37:02,090 --> 00:37:03,120
if you folks have any questions,

1142
00:37:03,120 --> 00:37:05,000
please feel free to ask them

1143
00:37:05,000 --> 00:37:07,296
and I'll try my best to try and answer.

1144
00:37:07,296 --> 00:37:08,129
Thank you.

