1
00:00:01,050 --> 00:00:05,260
- Did you know that 60% of cloud storage

2
00:00:05,260 --> 00:00:07,420
has logging disabled?

3
00:00:07,420 --> 00:00:08,253
You heard me right,

4
00:00:08,253 --> 00:00:13,253
60% of cloud storage has logging disabled.

5
00:00:13,460 --> 00:00:15,910
It's these types of blind spots

6
00:00:15,910 --> 00:00:18,500
that we're gonna talk about
over the next couple of minutes

7
00:00:18,500 --> 00:00:21,390
as we go through this presentation.

8
00:00:21,390 --> 00:00:23,280
My name is Matt Chiodi,

9
00:00:23,280 --> 00:00:26,070
and I'm the chief security
officer of public cloud

10
00:00:26,070 --> 00:00:27,740
at Palo Alto Networks.

11
00:00:27,740 --> 00:00:31,459
So when you think about a blind spot,

12
00:00:31,460 --> 00:00:34,010
what is it that comes to your mind?

13
00:00:34,010 --> 00:00:35,339
I know for me that this picture

14
00:00:35,340 --> 00:00:36,790
that you're looking at
here on your screen,

15
00:00:36,790 --> 00:00:39,240
this is exactly what I think about, right?

16
00:00:39,240 --> 00:00:41,530
Usually it says objects in this mirror

17
00:00:41,530 --> 00:00:44,100
are closer than they may appear.

18
00:00:44,100 --> 00:00:46,820
But a blind spot is usually something

19
00:00:46,820 --> 00:00:51,030
that you think you know
what the reality is,

20
00:00:51,030 --> 00:00:54,620
but in actuality, it's quite different.

21
00:00:54,620 --> 00:00:57,809
That is how at least
I define a blind spot.

22
00:00:57,810 --> 00:01:00,850
And when it comes to cyber
security and cloud security,

23
00:01:00,850 --> 00:01:04,660
it's when you think you understand
what the cloud threat is

24
00:01:04,660 --> 00:01:06,850
but in actuality, it's
something quite different.

25
00:01:06,850 --> 00:01:08,830
So that's what we're
gonna talk about today

26
00:01:08,830 --> 00:01:11,330
over the next 30 or so minutes.

27
00:01:11,330 --> 00:01:13,270
Now let's talk about some areas

28
00:01:13,270 --> 00:01:16,770
that I'm not gonna go into
detail on in this report.

29
00:01:16,770 --> 00:01:19,470
These are the areas of
what I call cloud clarity.

30
00:01:19,470 --> 00:01:21,929
These are areas we've
talked about so many times,

31
00:01:21,930 --> 00:01:24,270
I'm not gonna spend any time
going into these, right?

32
00:01:24,270 --> 00:01:26,089
Shared responsibility.

33
00:01:26,090 --> 00:01:29,030
I think most organizations at this point,

34
00:01:29,030 --> 00:01:31,520
cloud's been out for well over a decade,

35
00:01:31,520 --> 00:01:33,979
most organizations understand

36
00:01:33,980 --> 00:01:36,160
that there is a shared responsibility

37
00:01:36,160 --> 00:01:39,340
between them as the cloud consumer

38
00:01:39,340 --> 00:01:40,970
and then as the cloud provider.

39
00:01:40,970 --> 00:01:43,120
They understand there's
a difference there.

40
00:01:44,010 --> 00:01:46,660
The next area has to do
with storage buckets,

41
00:01:46,660 --> 00:01:49,750
or should I say leaky storage buckets.

42
00:01:49,750 --> 00:01:54,000
This is an area that if you go
back probably 18 to 24 months

43
00:01:54,000 --> 00:01:55,630
this was something that was in the news

44
00:01:55,630 --> 00:01:59,410
probably on a weekly or a
bi-weekly basis if you remember.

45
00:01:59,410 --> 00:02:02,030
Somebody uploaded data to a storage bucket

46
00:02:02,030 --> 00:02:04,300
and then inadvertently,
it got set to public

47
00:02:04,300 --> 00:02:06,530
and now someone had a massive breach

48
00:02:06,530 --> 00:02:07,830
that they were gonna need to deal with.

49
00:02:07,830 --> 00:02:11,343
So leaky storage buckets,
that's an area of cloud clarity.

50
00:02:12,250 --> 00:02:14,900
The last area that I
think most organizations

51
00:02:14,900 --> 00:02:17,620
probably understand
pretty well at this point

52
00:02:17,620 --> 00:02:20,060
is that when they move
from their traditional

53
00:02:20,060 --> 00:02:23,390
on-premises data center to the cloud,

54
00:02:23,390 --> 00:02:25,809
they have reduced the visibility, right?

55
00:02:25,810 --> 00:02:26,700
You can't get in there

56
00:02:26,700 --> 00:02:28,339
and wrap your arms around that server

57
00:02:28,340 --> 00:02:30,250
like you used to do in the past,

58
00:02:30,250 --> 00:02:32,030
you just don't have that option anymore.

59
00:02:32,030 --> 00:02:34,510
And therefore, when you move to the cloud,

60
00:02:34,510 --> 00:02:39,510
there is at least by default,
a reduced level of visibility.

61
00:02:40,520 --> 00:02:43,060
So let's talk about the two blind spots

62
00:02:43,060 --> 00:02:47,110
that I think are most
prevalent in the industry.

63
00:02:47,110 --> 00:02:49,770
And one of the advantages,

64
00:02:49,770 --> 00:02:51,440
one of the blessings
that I have in my role

65
00:02:51,440 --> 00:02:54,670
is I get to speak with
literally thousands of customers

66
00:02:54,670 --> 00:02:55,959
across the globe,

67
00:02:55,960 --> 00:02:59,740
and I rarely get asked
about these two areas

68
00:02:59,740 --> 00:03:00,573
that I'm gonna show you.

69
00:03:00,573 --> 00:03:04,810
So let's dive into identity
and access management.

70
00:03:04,810 --> 00:03:06,240
Now to just illustrate

71
00:03:06,240 --> 00:03:10,050
why cloud identity and access management

72
00:03:10,050 --> 00:03:12,370
is so very complex,

73
00:03:12,370 --> 00:03:16,970
I've created probably an
overly simplified diagram,

74
00:03:16,970 --> 00:03:20,010
but I want you to get
the point here, right?

75
00:03:20,010 --> 00:03:21,730
And that is here, we're just looking

76
00:03:21,730 --> 00:03:23,530
at a generic cloud account,

77
00:03:23,530 --> 00:03:26,880
the cloud provider doesn't
matter, cloud provider X, right?

78
00:03:26,880 --> 00:03:31,290
And it's a single cloud
instance or subscription,

79
00:03:31,290 --> 00:03:33,799
depends upon which provider
you're more familiar with.

80
00:03:33,800 --> 00:03:36,360
In this case here, I've created two roles,

81
00:03:36,360 --> 00:03:38,700
dev ops admin, staging builder,

82
00:03:38,700 --> 00:03:41,940
and I've also created a number of policies

83
00:03:41,940 --> 00:03:46,320
that can be assigned to
each one of those roles.

84
00:03:46,320 --> 00:03:49,630
Now, typically roles are
then assigned to a user.

85
00:03:49,630 --> 00:03:52,690
It could be a user that's
right in your cloud account,

86
00:03:52,690 --> 00:03:54,670
or it could be a single sign on user

87
00:03:54,670 --> 00:03:57,130
from a third party IDP.

88
00:03:57,130 --> 00:03:59,079
Any case, this is what
we're looking at here.

89
00:03:59,080 --> 00:04:01,270
Now, in this case,

90
00:04:01,270 --> 00:04:04,700
we're only looking at two
roles and six policies.

91
00:04:04,700 --> 00:04:07,280
Those policies they're typically defined

92
00:04:07,280 --> 00:04:09,430
in JSON or something like that.

93
00:04:09,430 --> 00:04:14,430
What they do is they allow
or deny access to a service

94
00:04:14,510 --> 00:04:15,649
or something like that.

95
00:04:15,650 --> 00:04:19,070
And you can get extremely granular.

96
00:04:19,070 --> 00:04:21,860
There's only three here for each role.

97
00:04:21,860 --> 00:04:25,070
In most production
accounts that I've seen,

98
00:04:25,070 --> 00:04:28,460
there's not two roles
and just six policies

99
00:04:28,460 --> 00:04:30,820
it's usually hundreds of roles,

100
00:04:30,820 --> 00:04:33,210
and maybe even thousands of policies.

101
00:04:33,210 --> 00:04:35,479
It becomes really difficult

102
00:04:35,480 --> 00:04:40,180
to understand what we call
net effective permissions,

103
00:04:40,180 --> 00:04:41,480
net effective permissions.

104
00:04:41,480 --> 00:04:44,000
And all that is is if you've given Jane,

105
00:04:44,000 --> 00:04:45,070
maybe Jane's your user,

106
00:04:45,070 --> 00:04:48,580
and you've given her access
to both of these roles

107
00:04:48,580 --> 00:04:51,710
and we're just looking at a
single cloud subscription,

108
00:04:51,710 --> 00:04:55,770
it's really difficult to know
what she can and can't do.

109
00:04:55,770 --> 00:04:58,890
And then that problem is further magnified

110
00:04:58,890 --> 00:05:01,960
when you add in the fact
that most organizations,

111
00:05:01,960 --> 00:05:04,299
they don't have just one cloud account,

112
00:05:04,300 --> 00:05:07,210
they usually have multiple.

113
00:05:07,210 --> 00:05:08,830
Right now, we're looking at three accounts

114
00:05:08,830 --> 00:05:13,310
and now let's say Jane has
access to all six of these roles.

115
00:05:13,310 --> 00:05:15,180
And now we're not looking at six policies,

116
00:05:15,180 --> 00:05:17,400
but we're looking at 18 policies.

117
00:05:17,400 --> 00:05:20,570
Again, this is a very
over-simplified scenario

118
00:05:20,570 --> 00:05:21,870
and what I wanna point out

119
00:05:21,870 --> 00:05:23,450
is how would you actually know

120
00:05:23,450 --> 00:05:26,860
what her net effective permissions are?

121
00:05:26,860 --> 00:05:28,950
This is one of the challenges,

122
00:05:28,950 --> 00:05:33,950
and a reason that I believe
cloud IAM is a blind spot

123
00:05:34,640 --> 00:05:37,110
for most organizations.

124
00:05:37,110 --> 00:05:40,560
Let's look at a red team exercise

125
00:05:40,560 --> 00:05:44,080
that my team at Palo Alto
Networks under unit 42

126
00:05:44,080 --> 00:05:47,099
carried out earlier in 2020.

127
00:05:47,100 --> 00:05:49,810
And what they did was
is we were approached

128
00:05:49,810 --> 00:05:53,710
by a large SaaS provider, and
they were a customer of us.

129
00:05:53,710 --> 00:05:55,498
And they basically said,

130
00:05:55,499 --> 00:05:58,760
"Would you red team our
cloud infrastructure?"

131
00:05:58,760 --> 00:05:59,593
Now I will tell you

132
00:05:59,593 --> 00:06:02,950
that we normally do not
do penetration tests,

133
00:06:02,950 --> 00:06:05,409
we don't normally do those,
but in this case here,

134
00:06:05,410 --> 00:06:08,770
we were just enamored by the sheer scope

135
00:06:08,770 --> 00:06:11,580
and scale of their cloud environment.

136
00:06:11,580 --> 00:06:15,460
We're talking massively
scaled, thousands of instances,

137
00:06:15,460 --> 00:06:17,370
hundreds of thousands of users,

138
00:06:17,370 --> 00:06:19,210
and the bottom line

139
00:06:19,210 --> 00:06:23,650
was that we were able to
quickly own their environment.

140
00:06:23,650 --> 00:06:26,770
Now let me tell you
exactly how we did this

141
00:06:26,770 --> 00:06:27,849
and maybe you can then go ahead

142
00:06:27,850 --> 00:06:31,120
and try to carry this out
in your own environment.

143
00:06:31,120 --> 00:06:33,690
Number one, what we did was we brought up

144
00:06:33,690 --> 00:06:36,670
a completely separate cloud account.

145
00:06:36,670 --> 00:06:39,370
Just as if you would go out
and you would get a credit card

146
00:06:39,370 --> 00:06:41,850
and bring up your own
cloud account, we did that.

147
00:06:41,850 --> 00:06:43,530
And then we started to do some recon.

148
00:06:43,530 --> 00:06:48,530
Now this customer, they provided
us very limited information

149
00:06:48,850 --> 00:06:50,420
on their cloud account.

150
00:06:50,420 --> 00:06:51,930
We knew just a few things,

151
00:06:51,930 --> 00:06:53,570
we didn't have remote access,

152
00:06:53,570 --> 00:06:56,270
we didn't have a login,
username, and password.

153
00:06:56,270 --> 00:07:00,680
And so what we did was we
acted just like an attacker.

154
00:07:00,680 --> 00:07:03,290
We went out and we started
to do reconnaissance.

155
00:07:03,290 --> 00:07:04,760
We searched on Google,

156
00:07:04,760 --> 00:07:08,039
we went to amazing places like GitHub

157
00:07:08,040 --> 00:07:10,840
where developers
unfortunately, like to give out

158
00:07:10,840 --> 00:07:13,630
some times more information
than they should.

159
00:07:13,630 --> 00:07:15,930
And so we were able to
mine through all of that

160
00:07:15,930 --> 00:07:17,550
through our reconnaissance operation.

161
00:07:17,550 --> 00:07:19,943
And again, all publicly
available information,

162
00:07:19,943 --> 00:07:21,750
we were able to concatenate that

163
00:07:21,750 --> 00:07:24,390
and then to start an enumeration exercise

164
00:07:24,390 --> 00:07:27,310
where we're basically testing
different configurations,

165
00:07:27,310 --> 00:07:28,320
different role names.

166
00:07:28,320 --> 00:07:32,270
And after doing this
process for several days,

167
00:07:32,270 --> 00:07:36,580
we were able to procure
a temporary access token

168
00:07:36,580 --> 00:07:40,060
into the customer's environment.

169
00:07:40,060 --> 00:07:41,150
I wanted you to note here,

170
00:07:41,150 --> 00:07:42,210
this is one thing that I think

171
00:07:42,210 --> 00:07:44,049
most organizations don't realize

172
00:07:44,050 --> 00:07:47,550
is that when you're carrying
out that enumeration exercise,

173
00:07:47,550 --> 00:07:51,010
you typically have zero
visibility into that.

174
00:07:51,010 --> 00:07:53,830
Now, if I was carrying out
an enumeration exercise

175
00:07:53,830 --> 00:07:55,469
against your on-prem environment

176
00:07:55,470 --> 00:07:57,630
or your on-prem, that's
maybe you're using something

177
00:07:57,630 --> 00:07:59,300
like Active Directory,

178
00:07:59,300 --> 00:08:02,250
you would see all of those failures

179
00:08:02,250 --> 00:08:04,600
in your audit logs, most likely.

180
00:08:04,600 --> 00:08:06,510
But in the cloud, when I carry out

181
00:08:06,510 --> 00:08:09,070
a similar enumeration exercise,

182
00:08:09,070 --> 00:08:11,730
you have usually zero visibility into that

183
00:08:11,730 --> 00:08:15,100
because I'm not actually
attacking your cloud account,

184
00:08:15,100 --> 00:08:19,750
I'm attacking the cloud
service providers, IAM service.

185
00:08:19,750 --> 00:08:22,330
So as in the case of this customer here,

186
00:08:22,330 --> 00:08:24,990
they had zero visibility
that we were doing this

187
00:08:24,990 --> 00:08:29,200
until we procured that
temporary access token

188
00:08:29,200 --> 00:08:30,490
in their environment.

189
00:08:30,490 --> 00:08:31,820
And the way we were able to get that

190
00:08:31,820 --> 00:08:34,850
was they had a misconfigured IAM role

191
00:08:34,850 --> 00:08:37,750
via a role trust policy.

192
00:08:37,750 --> 00:08:40,638
So this was a complete misconfiguration

193
00:08:40,638 --> 00:08:43,530
on behalf of the cloud customer,

194
00:08:43,530 --> 00:08:46,319
not the cloud service provider.

195
00:08:46,320 --> 00:08:50,040
Now, once we had that
temporary access token,

196
00:08:50,040 --> 00:08:53,310
we were able to see their
entire fleet of EC2 instances,

197
00:08:53,310 --> 00:08:54,989
we could read from the metadata

198
00:08:54,990 --> 00:08:56,710
that was attached to those instances.

199
00:08:56,710 --> 00:08:58,810
And if you're familiar with metadata,

200
00:08:58,810 --> 00:09:02,250
there's a lot of juicy
information that's in there.

201
00:09:02,250 --> 00:09:03,400
One thing that we noticed

202
00:09:03,400 --> 00:09:05,930
was that there were some S3 buckets

203
00:09:05,930 --> 00:09:08,900
that were meant to be readable internally

204
00:09:08,900 --> 00:09:12,180
by these EC2 instances only.

205
00:09:12,180 --> 00:09:15,699
But because of this
misconfigured IAM role,

206
00:09:15,700 --> 00:09:19,840
we were able to read from
those internal buckets only

207
00:09:19,840 --> 00:09:21,640
from an external account.

208
00:09:21,640 --> 00:09:24,069
And we noticed there was
all types of information

209
00:09:24,070 --> 00:09:27,810
that was stored in those files.

210
00:09:27,810 --> 00:09:29,369
And one thing that caught our attention

211
00:09:29,370 --> 00:09:32,700
was a set of encrypted credentials.

212
00:09:32,700 --> 00:09:36,550
Now, typically when you find
an encrypted set of credentials

213
00:09:36,550 --> 00:09:38,020
it's game over, right?

214
00:09:38,020 --> 00:09:39,939
If the encryption is done correctly,

215
00:09:39,940 --> 00:09:42,230
if the private key is maintained properly,

216
00:09:42,230 --> 00:09:43,200
it's usually game over

217
00:09:43,200 --> 00:09:45,700
unless you wanna spend
a massive amount of GPUs

218
00:09:45,700 --> 00:09:49,440
and processing time to attack
and brute force that file.

219
00:09:49,440 --> 00:09:52,610
Well, it turns out we
didn't have to do that.

220
00:09:52,610 --> 00:09:56,930
We didn't have to do it because
this misconfigured IAM role,

221
00:09:56,930 --> 00:10:00,579
it gave us access to call
the key management service,

222
00:10:00,580 --> 00:10:03,560
which then allowed us to decrypt

223
00:10:03,560 --> 00:10:06,780
and get a set of plain text credentials.

224
00:10:06,780 --> 00:10:09,270
Now, once we had those plain
text set of credentials,

225
00:10:09,270 --> 00:10:11,250
we were able to log in interactively

226
00:10:11,250 --> 00:10:14,840
and access all types
of additional services.

227
00:10:14,840 --> 00:10:18,840
And as you can imagine, this
would have been a great way

228
00:10:18,840 --> 00:10:21,800
to do a supply chain style of attack

229
00:10:21,800 --> 00:10:25,040
because I mentioned that we
had access to their S3 buckets

230
00:10:25,040 --> 00:10:28,770
well, you can store all types
of things in S3 buckets.

231
00:10:28,770 --> 00:10:30,920
And one of those things that we found

232
00:10:30,920 --> 00:10:32,819
was a source code repository,

233
00:10:32,820 --> 00:10:34,870
and we could have
infected that potentially

234
00:10:34,870 --> 00:10:37,138
which would have then impacted
not only the customer,

235
00:10:37,138 --> 00:10:40,313
but then also all of
their other customers.

236
00:10:41,280 --> 00:10:42,319
Now I wanna call out.

237
00:10:42,320 --> 00:10:45,950
In this case here, and here's
a kind of an extracted view

238
00:10:45,950 --> 00:10:47,860
of what we started with originally

239
00:10:47,860 --> 00:10:52,373
around talking about just
the complexity of cloud IAM.

240
00:10:53,452 --> 00:10:55,890
In this one case here, I've
got dev, test, and prod

241
00:10:55,890 --> 00:10:59,540
and while this is genericized
as to protect the customer,

242
00:10:59,540 --> 00:11:01,370
we were able to penetrate

243
00:11:01,370 --> 00:11:03,670
through not just their dev environment

244
00:11:03,670 --> 00:11:04,870
or just the test environment,

245
00:11:04,870 --> 00:11:07,690
but rather through all
of their environments

246
00:11:07,690 --> 00:11:11,550
because they actually
followed a best practice.

247
00:11:11,550 --> 00:11:12,750
Now you're thinking, wait a second,

248
00:11:12,750 --> 00:11:16,290
a best practice got the
customer in trouble?

249
00:11:16,290 --> 00:11:17,300
And the answer is yes.

250
00:11:17,300 --> 00:11:21,069
They used infrastructure
as code templates.

251
00:11:21,070 --> 00:11:22,760
And because they had a misconfiguration

252
00:11:23,610 --> 00:11:26,390
in those infrastructure as code templates,

253
00:11:26,390 --> 00:11:31,100
it replicated across all
of their environments

254
00:11:31,100 --> 00:11:33,590
which mean that we were able

255
00:11:33,590 --> 00:11:38,590
to get across all of the
environments and own all of those.

256
00:11:38,590 --> 00:11:39,423
So this is something

257
00:11:39,423 --> 00:11:41,940
that you need to be extremely mindful of

258
00:11:41,940 --> 00:11:45,663
as you build and as you
mature in the cloud.

259
00:11:46,720 --> 00:11:48,017
Now you might just be thinking,

260
00:11:48,017 --> 00:11:50,610
"Well, hmm, that sounds
like you just found

261
00:11:50,610 --> 00:11:52,030
kind of like an ace in the hole,

262
00:11:52,030 --> 00:11:53,160
and maybe this is something

263
00:11:53,160 --> 00:11:56,650
that was just extremely
unique to this customer."

264
00:11:56,650 --> 00:11:57,959
Well, we thought the same thing,

265
00:11:57,960 --> 00:11:59,900
maybe they're just having a bad day,

266
00:11:59,900 --> 00:12:03,420
maybe someone just made a
mistake, right, mistakes happen.

267
00:12:03,420 --> 00:12:04,420
So what we wanted to do

268
00:12:04,420 --> 00:12:06,900
is just to see how prevalent

269
00:12:06,900 --> 00:12:10,520
these types of misconfigurations
are out in the wild.

270
00:12:10,520 --> 00:12:13,250
And so we started with a massive dataset,

271
00:12:13,250 --> 00:12:14,990
and we really wanted to look globally

272
00:12:14,990 --> 00:12:18,060
to just to understand how difficult

273
00:12:18,060 --> 00:12:20,339
and how widespread this problem is.

274
00:12:20,340 --> 00:12:22,100
And so what we did is we went out

275
00:12:22,100 --> 00:12:25,470
and we got a massive, massive data set.

276
00:12:25,470 --> 00:12:27,410
As you can see here, we love,

277
00:12:27,410 --> 00:12:28,829
and you'll see this over and over again

278
00:12:28,830 --> 00:12:32,330
if you look at unit 42
cloud threat research

279
00:12:32,330 --> 00:12:33,870
you will see that we love GitHub

280
00:12:33,870 --> 00:12:37,310
and we go back to the
source over and over again.

281
00:12:37,310 --> 00:12:39,069
And so we essentially scraped, again,

282
00:12:39,070 --> 00:12:41,600
all publicly available information,

283
00:12:41,600 --> 00:12:44,460
we scraped almost 300,000 files

284
00:12:44,460 --> 00:12:48,790
and nearly 150,000
source code repositories.

285
00:12:48,790 --> 00:12:50,170
And then from those,

286
00:12:50,170 --> 00:12:53,800
this is essentially a huge
data science operation,

287
00:12:53,800 --> 00:12:58,109
we were able to extract
nearly 70,000 role names,

288
00:12:58,110 --> 00:13:02,960
and nearly 33,000
potential cloud accounts.

289
00:13:02,960 --> 00:13:04,670
You can see we kind of windowed this down.

290
00:13:04,670 --> 00:13:07,360
And then we had to do a
little bit more refinement,

291
00:13:07,360 --> 00:13:09,360
you can't always believe

292
00:13:09,360 --> 00:13:12,670
just because you found 33,000 accounts

293
00:13:12,670 --> 00:13:13,610
that those are all valid.

294
00:13:13,610 --> 00:13:14,920
So we had to do a process,

295
00:13:14,920 --> 00:13:17,880
call the cloud server
first provider via an API,

296
00:13:17,880 --> 00:13:19,880
test that those counts are still valid,

297
00:13:19,880 --> 00:13:23,660
and then of course we couldn't
do this iteration process

298
00:13:23,660 --> 00:13:26,280
through with 70,000 roll names,

299
00:13:26,280 --> 00:13:28,130
it would've just taken probably months

300
00:13:28,130 --> 00:13:29,450
and we didn't have that time.

301
00:13:29,450 --> 00:13:32,008
So what we did was we went through

302
00:13:32,008 --> 00:13:37,008
and we found the 500
most common role names.

303
00:13:37,730 --> 00:13:38,940
And those are the ones we started with.

304
00:13:38,940 --> 00:13:40,220
So we basically took,

305
00:13:40,220 --> 00:13:42,488
here's 500 of the most common role names

306
00:13:42,488 --> 00:13:46,000
along with those validated
cloud account lists.

307
00:13:46,000 --> 00:13:48,200
And then we just tried
different combinations

308
00:13:48,200 --> 00:13:49,920
enumerating through them,

309
00:13:49,920 --> 00:13:54,270
looking for what are, again,
some of those combinations

310
00:13:54,270 --> 00:13:57,620
that might cause misconfigurations.

311
00:13:57,620 --> 00:13:59,790
And well, let me just
show you real quickly

312
00:13:59,790 --> 00:14:02,430
what our research revealed.

313
00:14:02,430 --> 00:14:05,160
Again, this is all from
publicly available information,

314
00:14:05,160 --> 00:14:08,550
essentially a very large
dataset science's operation.

315
00:14:08,550 --> 00:14:12,240
What we found again with
these misconfigurations

316
00:14:12,240 --> 00:14:14,008
is that we could have had access

317
00:14:14,008 --> 00:14:18,110
to literally thousands of EC2 snapshots,

318
00:14:18,110 --> 00:14:20,650
hundreds of S3 buckets,

319
00:14:20,650 --> 00:14:25,280
and a whole lot of KMS
keys, and RDS snapshots.

320
00:14:25,280 --> 00:14:27,640
Now the level of that access
that we could have had

321
00:14:27,640 --> 00:14:30,819
to these different types
of information, it varied

322
00:14:30,820 --> 00:14:31,940
in fact, it varied greatly,

323
00:14:31,940 --> 00:14:35,210
in certain cases, it was
just read only access.

324
00:14:35,210 --> 00:14:36,970
And then perhaps at the worst,

325
00:14:36,970 --> 00:14:40,450
we could have executed lambda functions

326
00:14:40,450 --> 00:14:44,200
on behalf of various
different accounts worldwide.

327
00:14:44,200 --> 00:14:47,330
And so you can imagine in
the hands of an attacker,

328
00:14:47,330 --> 00:14:51,580
what they might do with
this type of access

329
00:14:51,580 --> 00:14:56,330
that is so widespread and so
prevalent in the industry.

330
00:14:56,330 --> 00:14:58,080
Here's what I want you to take away

331
00:14:58,080 --> 00:15:01,290
from this first blind spot.

332
00:15:01,290 --> 00:15:04,410
It's that when you have a
compromised cloud account

333
00:15:04,410 --> 00:15:07,160
due to one of these types
of misconfigurations,

334
00:15:07,160 --> 00:15:10,310
it is almost always much worse

335
00:15:10,310 --> 00:15:13,000
than a compromised cloud host.

336
00:15:13,000 --> 00:15:13,840
Now think about it.

337
00:15:13,840 --> 00:15:17,680
If I am able to compromise a single host

338
00:15:17,680 --> 00:15:20,810
in your cloud account, maybe
you're running a window server

339
00:15:20,810 --> 00:15:22,359
and it's missing a patch.

340
00:15:22,360 --> 00:15:26,880
I execute a vulnerability
or an exploit on that,

341
00:15:26,880 --> 00:15:29,870
I get a shell, I can get to
the data that's on that host,

342
00:15:29,870 --> 00:15:31,790
maybe the data that's on that segment

343
00:15:31,790 --> 00:15:34,360
if I find other hosts that
have that vulnerability

344
00:15:34,360 --> 00:15:36,350
but I'm generally limited

345
00:15:36,350 --> 00:15:39,370
if you've done your network
segmentation correctly.

346
00:15:39,370 --> 00:15:42,140
Now in the case of what we found,

347
00:15:42,140 --> 00:15:44,960
it didn't matter if you
had every single host,

348
00:15:44,960 --> 00:15:48,670
every app patched, MFA turned
on, it wouldn't have mattered

349
00:15:48,670 --> 00:15:50,817
because I can weave
around all of those things

350
00:15:50,817 --> 00:15:53,217
when you have an
identity-based misconfiguration

351
00:15:54,080 --> 00:15:56,400
at the cloud service provider level.

352
00:15:56,400 --> 00:15:59,890
So this is an area that I
believe is the first blind spot

353
00:15:59,890 --> 00:16:02,090
that most organizations struggle with

354
00:16:02,090 --> 00:16:03,490
when they move to the cloud.

355
00:16:04,770 --> 00:16:07,620
Now a few minutes ago
we touched a little bit

356
00:16:07,620 --> 00:16:09,610
on infrastructure as code.

357
00:16:09,610 --> 00:16:11,760
And I think that this is really an area

358
00:16:11,760 --> 00:16:15,250
that is really blossoming
for most organizations.

359
00:16:15,250 --> 00:16:18,040
And for maybe some of
you who are uninformed,

360
00:16:18,040 --> 00:16:20,660
or maybe just haven't used it a whole lot,

361
00:16:20,660 --> 00:16:24,110
infrastructure as code
is certainly the norm

362
00:16:24,110 --> 00:16:29,110
for most dev ops and most
developer led organizations.

363
00:16:29,440 --> 00:16:31,630
Now, when it comes to security teams,

364
00:16:31,630 --> 00:16:33,463
that is different story

365
00:16:33,463 --> 00:16:36,170
and they're all over the map
in terms of if they're using it

366
00:16:36,170 --> 00:16:37,916
and how much they're using it,

367
00:16:37,917 --> 00:16:40,620
but the bottom line is
that infrastructure as code

368
00:16:40,620 --> 00:16:42,840
is a way that you no longer have to go

369
00:16:42,840 --> 00:16:46,040
and manually provision
your cloud infrastructure.

370
00:16:46,040 --> 00:16:47,870
You don't have to go to
the cloud service provider

371
00:16:47,870 --> 00:16:50,430
and log into the console,
click here, click there,

372
00:16:50,430 --> 00:16:52,069
you can instantiate

373
00:16:52,070 --> 00:16:55,530
your entire cloud infrastructure in code.

374
00:16:55,530 --> 00:16:57,510
There aren't many, many benefits,

375
00:16:57,510 --> 00:17:00,939
but as a security team or
as a security practitioner,

376
00:17:00,940 --> 00:17:03,680
this should be something
that you are championing

377
00:17:03,680 --> 00:17:08,190
because it aids in
standardization of the system.

378
00:17:08,190 --> 00:17:11,510
And as we all know, the more
that you can follow a standard,

379
00:17:11,510 --> 00:17:15,210
the easier it is to
keep that system secure.

380
00:17:15,210 --> 00:17:17,319
And there's many ways to do that.

381
00:17:17,319 --> 00:17:22,060
Now let me share with you
perhaps the negative side of it,

382
00:17:22,060 --> 00:17:23,230
about how doing a best practice

383
00:17:23,230 --> 00:17:25,473
can lead to misconfigurations.

384
00:17:26,640 --> 00:17:27,660
What I'm sharing with you here,

385
00:17:27,660 --> 00:17:30,260
this is from a previous
cloud threat report.

386
00:17:30,260 --> 00:17:32,220
If you wanna see this specific report,

387
00:17:32,220 --> 00:17:36,913
you can just go to
cloudthreat.report/spring2020

388
00:17:37,920 --> 00:17:40,600
and it will take you
directly to this report

389
00:17:40,600 --> 00:17:42,429
where you can go into all the details.

390
00:17:42,430 --> 00:17:44,830
But I wanted to just share
with you a couple areas

391
00:17:44,830 --> 00:17:46,220
that really stood out to me.

392
00:17:46,220 --> 00:17:49,150
The first is that, you
know, the methodology

393
00:17:49,150 --> 00:17:52,890
behind this specific research,
we literally surveyed

394
00:17:52,890 --> 00:17:56,650
almost a million infrastructure
as code templates.

395
00:17:56,650 --> 00:17:59,399
And again, you probably can
guess where we found these,

396
00:17:59,399 --> 00:18:01,127
that's right, GitHub.

397
00:18:01,127 --> 00:18:03,710
GitHub through the GitHub searching API

398
00:18:03,710 --> 00:18:04,710
we were able to download

399
00:18:04,710 --> 00:18:07,110
and essentially scrape from their site

400
00:18:07,110 --> 00:18:08,240
all of the templates

401
00:18:08,240 --> 00:18:10,930
that were available publicly at the time.

402
00:18:10,930 --> 00:18:14,720
And what we found was that about 42%

403
00:18:14,720 --> 00:18:16,721
of cloud formation templates

404
00:18:16,721 --> 00:18:19,000
had at least one or more

405
00:18:19,000 --> 00:18:22,040
insecure configuration to them, 42%.

406
00:18:22,040 --> 00:18:24,430
Now cloud formation templates,

407
00:18:24,430 --> 00:18:26,130
they tend to be the most prevalent

408
00:18:26,130 --> 00:18:28,887
simply because, and
they're specific to AWS,

409
00:18:29,750 --> 00:18:32,230
AWS was the leader in
infrastructure as code

410
00:18:32,230 --> 00:18:35,960
so they tend to be what is the
most out there in the wild,

411
00:18:35,960 --> 00:18:39,200
but 42% of the ones that we surveyed

412
00:18:39,200 --> 00:18:41,590
had at least one insecure configuration,

413
00:18:41,590 --> 00:18:44,139
perhaps it was identity,
perhaps it was something else,

414
00:18:44,140 --> 00:18:46,160
I'll share with you in
just a couple of minutes

415
00:18:46,160 --> 00:18:47,820
what exactly those issues were.

416
00:18:47,820 --> 00:18:50,429
But 42%, that's a high number.

417
00:18:50,430 --> 00:18:52,650
The next comes to permissive access.

418
00:18:52,650 --> 00:18:54,300
We found that when organizations

419
00:18:54,300 --> 00:18:56,960
rely upon infrastructure as code

420
00:18:56,960 --> 00:18:59,500
to create their external

421
00:18:59,500 --> 00:19:01,980
and even internal security boundaries,

422
00:19:01,980 --> 00:19:06,980
76% of the time, they're
exposing sensitive ports like SSH

423
00:19:07,620 --> 00:19:09,570
directly to the internet.

424
00:19:09,570 --> 00:19:11,629
That is a very poor practice

425
00:19:11,630 --> 00:19:13,570
unless of course it's intentional,

426
00:19:13,570 --> 00:19:15,950
maybe it's a bastion host
or something like that.

427
00:19:15,950 --> 00:19:18,150
But we've seen this behavior
over, over and again.

428
00:19:18,150 --> 00:19:23,150
So 76% allow that very sensitive access.

429
00:19:23,660 --> 00:19:27,820
Now this next one is somewhat
befuddling and questionable,

430
00:19:27,820 --> 00:19:31,240
but 60% of cloud storage,

431
00:19:31,240 --> 00:19:32,920
again, this is all surveyed

432
00:19:32,920 --> 00:19:35,560
through these infrastructure
as code templates,

433
00:19:35,560 --> 00:19:38,820
60% have their logging disabled.

434
00:19:38,820 --> 00:19:41,350
Now this is where we started
out in the presentation.

435
00:19:41,350 --> 00:19:44,659
But can you imagine if you're
configuring your cloud account

436
00:19:44,660 --> 00:19:46,881
through one of these templates,

437
00:19:46,881 --> 00:19:49,940
that means that if you
had some type of issue

438
00:19:49,940 --> 00:19:53,540
where you had exposed some
sensitive files to the internet,

439
00:19:53,540 --> 00:19:56,520
if your logging's disabled
and an auditor asks you for it

440
00:19:56,520 --> 00:20:00,010
or someone in law enforcement
asks you for those logs,

441
00:20:00,010 --> 00:20:02,320
you're gonna have no way to provide those.

442
00:20:02,320 --> 00:20:04,780
Now, one of the reasons that we suspect

443
00:20:04,780 --> 00:20:06,889
this number might be so high

444
00:20:06,890 --> 00:20:07,940
is that a lot of times,

445
00:20:07,940 --> 00:20:10,200
these infrastructure as code templates

446
00:20:10,200 --> 00:20:13,520
are actually created in
development environments.

447
00:20:13,520 --> 00:20:14,910
And then they get migrated

448
00:20:14,910 --> 00:20:18,130
to those higher level
environments UAT, prod,

449
00:20:18,130 --> 00:20:21,000
a lot of times they're not upgraded

450
00:20:21,000 --> 00:20:23,110
for those higher level environments.

451
00:20:23,110 --> 00:20:25,100
So that's one way we suspect

452
00:20:25,100 --> 00:20:29,719
that this number might be so
high around cloud logging.

453
00:20:29,720 --> 00:20:31,760
Now, the last area here
that I wanna call out

454
00:20:31,760 --> 00:20:33,700
has to do with encryption,

455
00:20:33,700 --> 00:20:38,100
which is very closely related
to privacy and compliance.

456
00:20:38,100 --> 00:20:40,320
We found that 43% of the time,

457
00:20:40,320 --> 00:20:43,159
when organizations are configuring

458
00:20:43,160 --> 00:20:47,470
their cloud native databases
via infrastructure as code,

459
00:20:47,470 --> 00:20:49,060
they actually have encryption

460
00:20:49,060 --> 00:20:52,149
at the database layer completely disabled.

461
00:20:52,150 --> 00:20:53,980
Now, if you're like most organizations,

462
00:20:53,980 --> 00:20:57,290
you fall under multiple
different compliance mandates

463
00:20:57,290 --> 00:21:02,250
from GDPR, to CCPA, to HIPAA, to PCI

464
00:21:02,250 --> 00:21:07,180
all of those have some type
of encryption requirement.

465
00:21:07,180 --> 00:21:09,440
So these are just some of
the high level findings.

466
00:21:09,440 --> 00:21:11,040
Let's zoom in a little bit,

467
00:21:11,040 --> 00:21:14,399
and look at specifically what we found

468
00:21:14,400 --> 00:21:16,220
around cloud formation.

469
00:21:16,220 --> 00:21:17,690
Now cloud formation templates

470
00:21:17,690 --> 00:21:20,200
again, they're specific to AWS

471
00:21:20,200 --> 00:21:22,776
and I mentioned that we found 42% of them

472
00:21:22,776 --> 00:21:26,270
had at least one insecure configuration.

473
00:21:26,270 --> 00:21:28,980
In this case here, you're
looking at the top 10

474
00:21:28,980 --> 00:21:32,253
but I wanna call out
just a few specific areas

475
00:21:32,253 --> 00:21:34,409
that I think are interesting.

476
00:21:34,410 --> 00:21:37,960
Number one, we talked a little
bit about encryption already

477
00:21:37,960 --> 00:21:40,750
but you can see here that
when it comes to S3 buckets

478
00:21:40,750 --> 00:21:43,920
which are extremely useful
and extremely prevalent,

479
00:21:43,920 --> 00:21:47,510
that almost half of the
time, 48% of the time,

480
00:21:47,510 --> 00:21:50,040
organizations have server-side encryption

481
00:21:50,040 --> 00:21:51,570
completely disabled.

482
00:21:51,570 --> 00:21:56,210
And this is literally a
flip of a configuration

483
00:21:56,210 --> 00:21:57,340
where you can turn this on.

484
00:21:57,340 --> 00:21:58,870
This is not bring your own key,

485
00:21:58,870 --> 00:22:03,469
this is where AWS manages the
encryption key on your behalf.

486
00:22:03,470 --> 00:22:05,980
So this is a very easy setting to turn on

487
00:22:05,980 --> 00:22:08,637
but unfortunately, almost half of the time

488
00:22:08,637 --> 00:22:11,659
we found it to be disabled.

489
00:22:11,660 --> 00:22:14,690
The other one, and maybe
even perhaps more troubling,

490
00:22:14,690 --> 00:22:17,970
we found that AWS-RDS instances,

491
00:22:17,970 --> 00:22:20,440
that's the relational database service,

492
00:22:20,440 --> 00:22:25,440
almost 42% at the time, those
instances are not encrypted.

493
00:22:26,120 --> 00:22:27,370
So that's a challenge.

494
00:22:27,370 --> 00:22:30,340
Number two has to do with eventing.

495
00:22:30,340 --> 00:22:33,120
So when an event happens
in your cloud environment,

496
00:22:33,120 --> 00:22:35,360
that could be a start
and stop of a service

497
00:22:36,215 --> 00:22:37,760
maybe a delete of a
service, things like that,

498
00:22:37,760 --> 00:22:41,555
well, we're seeing that
almost 100% of the time

499
00:22:41,555 --> 00:22:45,160
specific to the relational
database service,

500
00:22:45,160 --> 00:22:48,020
that the event subscription is disabled.

501
00:22:48,020 --> 00:22:49,700
That means that if you
had a security issue

502
00:22:49,700 --> 00:22:53,290
in your environment and
related to an RDS instance,

503
00:22:53,290 --> 00:22:55,740
which is an extremely popular service,

504
00:22:55,740 --> 00:22:58,550
that you would not be
able to tell forensically

505
00:22:58,550 --> 00:23:02,210
what actually happened leading
up to a security event.

506
00:23:02,210 --> 00:23:03,480
So these should be on.

507
00:23:03,480 --> 00:23:05,830
There's very few good reasons

508
00:23:05,830 --> 00:23:09,020
to have these services disabled.

509
00:23:09,020 --> 00:23:11,500
Now, the next area has to do with logging.

510
00:23:11,500 --> 00:23:14,120
Logging is generally what we think about

511
00:23:14,120 --> 00:23:15,300
when it comes to security,

512
00:23:15,300 --> 00:23:17,440
but there's a separate area with eventing.

513
00:23:17,440 --> 00:23:21,530
So as you can see here, we
found that about 55% of the time

514
00:23:21,530 --> 00:23:25,500
that organizations are
configuring access logging

515
00:23:25,500 --> 00:23:27,810
via infrastructure as code templates,

516
00:23:27,810 --> 00:23:29,399
specifically for S3 buckets,

517
00:23:29,400 --> 00:23:34,400
35% of the time they have
the logging disabled.

518
00:23:34,510 --> 00:23:35,860
This gives you a little bit more

519
00:23:35,860 --> 00:23:39,360
of a lower level view
into what we're seeing.

520
00:23:39,360 --> 00:23:40,870
Now, I can almost read your minds here.

521
00:23:40,870 --> 00:23:42,515
Some of you are thinking,

522
00:23:42,516 --> 00:23:44,410
"Well, I don't use cloud
formation templates,

523
00:23:44,410 --> 00:23:47,450
I use something that's
more multi-cloud friendly."

524
00:23:47,450 --> 00:23:49,931
Well, you're probably
then using Terraform.

525
00:23:49,931 --> 00:23:52,320
Terraform is extremely popular

526
00:23:52,320 --> 00:23:55,429
because it allows you
to do these multi-cloud

527
00:23:55,430 --> 00:23:57,370
infrastructure as code templates

528
00:23:57,370 --> 00:24:00,916
across all of the major
cloud service providers.

529
00:24:00,916 --> 00:24:03,100
But those that are using Terraform

530
00:24:03,100 --> 00:24:04,639
while the numbers are a little bit lower,

531
00:24:04,640 --> 00:24:07,900
they still had some fairly serious issues.

532
00:24:07,900 --> 00:24:10,340
So we found that 22%

533
00:24:10,340 --> 00:24:13,970
of all Terraform configuration
files that we surveyed

534
00:24:13,970 --> 00:24:17,670
had at least one insecure configuration.

535
00:24:17,670 --> 00:24:18,830
Now here's the top 10, right?

536
00:24:18,830 --> 00:24:20,889
You can see the numbers
are a little bit different

537
00:24:20,890 --> 00:24:22,000
but I think you'll see

538
00:24:22,000 --> 00:24:25,380
that there are some
consistent inconsistencies

539
00:24:25,380 --> 00:24:27,580
when it comes to security
misconfigurations.

540
00:24:28,580 --> 00:24:30,780
Number one, and I lumped
all these together here

541
00:24:30,780 --> 00:24:32,780
in logging, eventing, and versioning

542
00:24:32,780 --> 00:24:35,680
you'll see again that while
the number's a little bit lower

543
00:24:35,680 --> 00:24:36,820
when it comes to Terraform,

544
00:24:36,820 --> 00:24:39,750
we found that about 67% of the time

545
00:24:39,750 --> 00:24:42,856
access logging on S3 buckets is disabled.

546
00:24:42,856 --> 00:24:45,180
The other one, I call, and this
is a little bit differently,

547
00:24:45,180 --> 00:24:47,340
I don't think this came
up on the other one,

548
00:24:47,340 --> 00:24:51,330
but we found that about 52% of the time

549
00:24:51,330 --> 00:24:54,760
when it comes to objects
versioning, that it was disabled.

550
00:24:54,760 --> 00:24:56,740
Now you're thinking, "Object versioning,

551
00:24:56,740 --> 00:24:57,880
like, why is that important?"

552
00:24:57,880 --> 00:25:01,760
Well, it's really important
in the case of ransomware.

553
00:25:01,760 --> 00:25:03,180
So if you have a ransomware attack

554
00:25:03,180 --> 00:25:05,540
and it's able to encrypt
your cloud storage,

555
00:25:05,540 --> 00:25:07,629
if you have versioning disabled,

556
00:25:07,630 --> 00:25:11,550
you have no way to roll
back to previous versions.

557
00:25:11,550 --> 00:25:13,300
You might have a backup of that file,

558
00:25:13,300 --> 00:25:16,930
but that backup is likely
going to be encrypted itself.

559
00:25:16,930 --> 00:25:20,453
That's why the versioning is so important.

560
00:25:21,610 --> 00:25:23,870
Now the next one, this
one I kinda chalk up

561
00:25:23,870 --> 00:25:26,300
what I call to public exposure.

562
00:25:26,300 --> 00:25:28,050
And this one's a little bit scary.

563
00:25:28,050 --> 00:25:32,020
We're talking now about AWS-RDS instances

564
00:25:32,020 --> 00:25:35,080
that are completely accessible
to the public, right?

565
00:25:35,080 --> 00:25:38,760
RDS snapshot, so a snapshot,
it's not a full backup

566
00:25:38,760 --> 00:25:41,080
but it is a aversioned backup

567
00:25:41,080 --> 00:25:43,379
of a smaller section of the database.

568
00:25:43,380 --> 00:25:44,820
In this case here, we found that, again,

569
00:25:44,820 --> 00:25:47,939
this is all all through
infrastructure as code

570
00:25:47,940 --> 00:25:49,400
delivered environments,

571
00:25:49,400 --> 00:25:53,360
we found that those
snapshots, 79% of the time

572
00:25:53,360 --> 00:25:55,750
are available to the public.

573
00:25:55,750 --> 00:25:57,130
There's all types of sensitive data

574
00:25:57,130 --> 00:25:59,900
that is usually kept in
a relational database.

575
00:25:59,900 --> 00:26:00,863
This is scary.

576
00:26:01,800 --> 00:26:06,139
The last area is what I would
call allowed ingress traffic.

577
00:26:06,140 --> 00:26:08,470
In this case here, you
can see there's a number

578
00:26:08,470 --> 00:26:10,830
of overly permissive access

579
00:26:10,830 --> 00:26:13,312
that is being allowed in the environments

580
00:26:13,313 --> 00:26:16,290
from SSH to just security groups

581
00:26:16,290 --> 00:26:19,940
which are sort of AWS's
cloud native firewalls

582
00:26:19,940 --> 00:26:22,620
that they're allowing all
types of permissive access

583
00:26:22,620 --> 00:26:24,229
into the environments.

584
00:26:24,230 --> 00:26:26,920
So these are really two different areas

585
00:26:26,920 --> 00:26:28,790
that I think are really important.

586
00:26:28,790 --> 00:26:31,100
I think from cloud identity,

587
00:26:31,100 --> 00:26:33,840
all the way to infrastructure
as code templates,

588
00:26:33,840 --> 00:26:35,480
I'd say that many security teams

589
00:26:35,480 --> 00:26:38,550
especially when it comes
to infrastructure as code,

590
00:26:38,550 --> 00:26:41,010
they don't realize the threats

591
00:26:41,010 --> 00:26:43,683
that they might be allowing
in their environment.

592
00:26:44,560 --> 00:26:47,260
So you're probably thinking,
"Okay, you got my attention.

593
00:26:47,260 --> 00:26:48,550
I'm a little bit scared.

594
00:26:48,550 --> 00:26:52,530
What can I actually do, to
make the situation better?

595
00:26:52,530 --> 00:26:55,280
How do I better manage these risks?"

596
00:26:55,280 --> 00:26:57,410
Well, there's a couple ways

597
00:26:57,410 --> 00:26:58,910
that I think you should look at it.

598
00:26:58,910 --> 00:27:01,340
And number one, that's by making sure

599
00:27:01,340 --> 00:27:06,340
that you have a holistic view
of your cloud infrastructure,

600
00:27:06,600 --> 00:27:10,570
and also the entire software
development lifecycle.

601
00:27:10,570 --> 00:27:13,870
Now we've talked about
Shift Left, secure CICB

602
00:27:13,870 --> 00:27:15,620
for many years in the industry

603
00:27:15,620 --> 00:27:19,709
but many organizations have
not yet gotten to the part

604
00:27:19,710 --> 00:27:22,310
where they actually are integrated

605
00:27:22,310 --> 00:27:25,010
when it comes from people,
process, and technology

606
00:27:25,010 --> 00:27:28,340
into all three of these high level areas

607
00:27:28,340 --> 00:27:29,320
that you're looking at here.

608
00:27:29,320 --> 00:27:32,210
So the build phase for most organizations

609
00:27:32,210 --> 00:27:34,880
what this it looks like is if
you have your own developers,

610
00:27:34,880 --> 00:27:36,830
they might be writing a new application,

611
00:27:36,830 --> 00:27:38,790
maybe they're creating a new container,

612
00:27:38,790 --> 00:27:39,623
maybe they're creating

613
00:27:39,623 --> 00:27:41,600
a new infrastructure as code template.

614
00:27:41,600 --> 00:27:46,600
This is where you can really
enable your development teams

615
00:27:46,680 --> 00:27:49,180
to create secure code from the beginning

616
00:27:49,180 --> 00:27:52,800
by enabling them with
plugins, security plugins

617
00:27:52,800 --> 00:27:55,450
right in their integrated
development environments

618
00:27:55,450 --> 00:27:57,350
so they can create secure templates

619
00:27:57,350 --> 00:27:59,730
and secure containers to start.

620
00:27:59,730 --> 00:28:00,770
You're trying to do this,

621
00:28:00,770 --> 00:28:04,570
and trying to push security
to the earliest possible point

622
00:28:04,570 --> 00:28:07,070
in the software development lifecycle.

623
00:28:07,070 --> 00:28:09,540
Now, if we move to the next
phase, the deploy phase,

624
00:28:09,540 --> 00:28:11,129
this is really where you're looking

625
00:28:11,130 --> 00:28:13,170
at repositories and registries.

626
00:28:13,170 --> 00:28:14,490
So in the case of containers,

627
00:28:14,490 --> 00:28:16,860
if you're using things
like Docker and Kubernetes,

628
00:28:16,860 --> 00:28:18,149
you might have a centralized

629
00:28:18,150 --> 00:28:20,870
or maybe you have a handful of registries.

630
00:28:20,870 --> 00:28:24,310
This is where you can begin
to scan those registries

631
00:28:24,310 --> 00:28:26,929
for those common misconfigurations.

632
00:28:26,930 --> 00:28:28,670
Again, maybe you have a developer

633
00:28:28,670 --> 00:28:31,760
who just created a new
infrastructure as code template

634
00:28:31,760 --> 00:28:33,740
and they've uploaded it to a build server,

635
00:28:33,740 --> 00:28:37,360
maybe using something like
Jenkins or circle CEI,

636
00:28:37,360 --> 00:28:39,240
you should have the ability

637
00:28:39,240 --> 00:28:42,540
to be able to scan those
infrastructure as code templates

638
00:28:42,540 --> 00:28:44,599
at the time they are checked in

639
00:28:44,599 --> 00:28:49,030
to make sure that there are
none of those misconfigurations

640
00:28:49,030 --> 00:28:51,170
like we talked about previously.

641
00:28:51,170 --> 00:28:53,060
And then the last phase,
this is the run phase.

642
00:28:53,060 --> 00:28:55,716
This is where most organizations

643
00:28:55,716 --> 00:28:57,729
typically focus their security.

644
00:28:57,730 --> 00:29:00,830
In fact, if I had to break it
down into rough percentages,

645
00:29:00,830 --> 00:29:05,620
probably 80% of most
security teams resources

646
00:29:05,620 --> 00:29:07,020
are focused on runtime,

647
00:29:07,020 --> 00:29:10,330
and a scant 20% on the other,
and maybe it's even less.

648
00:29:10,330 --> 00:29:12,490
But the runtime is equally important.

649
00:29:12,490 --> 00:29:13,870
This is where you are leveraging

650
00:29:13,870 --> 00:29:15,860
cloud service provider APIs

651
00:29:15,860 --> 00:29:19,449
to get that visibility into
your cloud infrastructure,

652
00:29:19,450 --> 00:29:20,700
but at the same time

653
00:29:20,700 --> 00:29:23,280
when it comes to securing
the actual workloads,

654
00:29:23,280 --> 00:29:27,600
be it a VM, or a container,
or a serverless function,

655
00:29:27,600 --> 00:29:30,439
this is where you need
that runtime security

656
00:29:30,440 --> 00:29:32,390
to make sure that a container

657
00:29:32,390 --> 00:29:35,600
is behaving as it's expected to behave.

658
00:29:35,600 --> 00:29:37,419
And then if it works outside of that,

659
00:29:37,420 --> 00:29:38,680
you should be able to immediately

660
00:29:38,680 --> 00:29:40,720
put a corrective control in place.

661
00:29:40,720 --> 00:29:43,640
You only get that with runtime security.

662
00:29:43,640 --> 00:29:46,490
So it's gonna usually be a
combination of some kind of agent

663
00:29:46,490 --> 00:29:48,900
that's running at the workload level,

664
00:29:48,900 --> 00:29:52,610
as well as API-based
security leveraging those.

665
00:29:52,610 --> 00:29:53,850
That's really the only way

666
00:29:53,850 --> 00:29:55,820
that you can really try to address

667
00:29:55,820 --> 00:30:00,143
all of these and other blind
spots in your environments.

668
00:30:01,150 --> 00:30:02,370
So in terms of maturity,

669
00:30:02,370 --> 00:30:04,149
this is a question that I often get asked

670
00:30:04,150 --> 00:30:07,740
is where should I be aiming
to go the next few years?

671
00:30:07,740 --> 00:30:10,090
Well, number one, I always recommend

672
00:30:10,090 --> 00:30:13,709
that organizations start
with deep cloud visibility.

673
00:30:13,710 --> 00:30:15,870
And this again, goes to making sure

674
00:30:15,870 --> 00:30:19,939
that you are using people,
process, and technology

675
00:30:19,940 --> 00:30:23,610
that know how to leverage the
cloud services providers APIs.

676
00:30:23,610 --> 00:30:25,709
You should be able to
understand all of your assets

677
00:30:25,710 --> 00:30:27,780
across all of your cloud accounts

678
00:30:27,780 --> 00:30:31,240
and all of your cloud service
providers in a single place.

679
00:30:31,240 --> 00:30:33,370
You shouldn't have to go
to multiple different tools

680
00:30:33,370 --> 00:30:35,649
to be able to get that
multi-cloud visibility.

681
00:30:35,650 --> 00:30:37,810
So let's start with
that, that's number one.

682
00:30:37,810 --> 00:30:40,870
After you have some
semblance of visibility

683
00:30:40,870 --> 00:30:42,790
and situational awareness,

684
00:30:42,790 --> 00:30:44,530
you then wanna move to looking at,

685
00:30:44,530 --> 00:30:47,180
how can I put automated
guardrails in place?

686
00:30:47,180 --> 00:30:48,620
And that may sound fancy

687
00:30:48,620 --> 00:30:50,739
but automated guardrail basically means

688
00:30:50,740 --> 00:30:54,210
I want you to think in
terms of anti-patterns.

689
00:30:54,210 --> 00:30:55,790
What are the as configurations

690
00:30:55,790 --> 00:30:59,810
that should likely never
exist in your cloud accounts,

691
00:30:59,810 --> 00:31:00,899
and then I want you to go out

692
00:31:00,900 --> 00:31:02,920
and look for those proactively,

693
00:31:02,920 --> 00:31:04,600
and then if you find them,

694
00:31:04,600 --> 00:31:06,959
to automatically take a corrective action.

695
00:31:06,960 --> 00:31:09,890
Don't wait for a ticket
to be filed in the SOC

696
00:31:09,890 --> 00:31:11,430
'cause sometimes that can take weeks.

697
00:31:11,430 --> 00:31:13,680
Look for how when you see condition X,

698
00:31:13,680 --> 00:31:15,863
you can take action Y immediately.

699
00:31:16,940 --> 00:31:19,070
The third part of this
in terms of maturities

700
00:31:19,070 --> 00:31:22,159
is what I call code movement transparency.

701
00:31:22,160 --> 00:31:23,730
And this is really about mapping out

702
00:31:23,730 --> 00:31:26,360
your entire software
development lifecycle.

703
00:31:26,360 --> 00:31:28,959
It could be understanding
who, what, when, where,

704
00:31:28,960 --> 00:31:31,870
who does what, what teams,
really mapping this out.

705
00:31:31,870 --> 00:31:34,320
I've seen many teams do this successfully

706
00:31:34,320 --> 00:31:36,480
and oftentimes it takes months,

707
00:31:36,480 --> 00:31:37,690
but they've created videos

708
00:31:37,690 --> 00:31:40,070
that really show this is the workflow

709
00:31:40,070 --> 00:31:42,780
of starting all the way
back at the developer's IDE,

710
00:31:42,780 --> 00:31:45,420
and this is how it moves
through in a workflow.

711
00:31:45,420 --> 00:31:47,240
Once you've done that,

712
00:31:47,240 --> 00:31:49,510
that's when you can really
start to understand,

713
00:31:49,510 --> 00:31:51,580
okay, how do I take my security tools

714
00:31:51,580 --> 00:31:53,110
and my security processes,

715
00:31:53,110 --> 00:31:56,520
and how do I embed them into that?

716
00:31:56,520 --> 00:31:58,530
That then leads us to the fourth step

717
00:31:58,530 --> 00:32:01,410
which is about setting quality standards.

718
00:32:01,410 --> 00:32:03,960
And quality standards is just another way

719
00:32:03,960 --> 00:32:06,560
of saying that security becomes

720
00:32:06,560 --> 00:32:09,220
another component of quality.

721
00:32:09,220 --> 00:32:11,380
And so this is where you
set your security standards,

722
00:32:11,380 --> 00:32:14,320
and security standards
are really important,

723
00:32:14,320 --> 00:32:16,740
they're always important
but especially in the cloud,

724
00:32:16,740 --> 00:32:19,024
because you cannot automate

725
00:32:19,024 --> 00:32:21,850
what you haven't standardized upon.

726
00:32:21,850 --> 00:32:23,300
This is where you should be looking

727
00:32:23,300 --> 00:32:27,560
to heavily leverage
infrastructure as code templates.

728
00:32:27,560 --> 00:32:28,440
Now the fifth step,

729
00:32:28,440 --> 00:32:32,560
this is what I call you at
cloud optimized security.

730
00:32:32,560 --> 00:32:35,100
This is where you've got
security people, process,

731
00:32:35,100 --> 00:32:40,100
and technology fully embedded
into your CICD pipeline,

732
00:32:40,170 --> 00:32:43,430
you're looking at all things
in terms of cost controls,

733
00:32:43,430 --> 00:32:45,180
compliance, security,

734
00:32:45,180 --> 00:32:47,727
you're leveraging things like cloud DLP,

735
00:32:47,727 --> 00:32:50,130
you have strong IAM governance,

736
00:32:50,130 --> 00:32:54,310
and you're doing that across
all workload form factors.

737
00:32:54,310 --> 00:32:56,720
Don't just focus on traditional VMs

738
00:32:56,720 --> 00:32:58,360
because you're using those today,

739
00:32:58,360 --> 00:33:00,780
because I can tell you
that in your future,

740
00:33:00,780 --> 00:33:04,030
no matter the industry,
containers will be in your future

741
00:33:04,030 --> 00:33:05,730
even if they're not there today.

742
00:33:05,730 --> 00:33:07,350
And then even further they're out,

743
00:33:07,350 --> 00:33:09,520
and again, this is still
a little bit further out

744
00:33:09,520 --> 00:33:11,190
organizations, many of them I've work with

745
00:33:11,190 --> 00:33:12,600
are starting to experiment

746
00:33:12,600 --> 00:33:14,750
and leverage serverless functions.

747
00:33:14,750 --> 00:33:17,160
So make sure that you've
got that full visibility

748
00:33:17,160 --> 00:33:20,243
across all of those workloads.

749
00:33:21,590 --> 00:33:23,389
Now, how do you apply
some of these things?

750
00:33:23,390 --> 00:33:26,700
Well, I tried to stay
away from the 30, 60, 90

751
00:33:26,700 --> 00:33:30,120
simply because depending upon
the size of your organization,

752
00:33:30,120 --> 00:33:32,540
if you're in a 500 person organization

753
00:33:32,540 --> 00:33:35,620
or a 300,000 person organization,

754
00:33:35,620 --> 00:33:38,860
the timing is going to
be wildly divergent.

755
00:33:38,860 --> 00:33:41,959
So these are the kind
of the three next steps

756
00:33:41,960 --> 00:33:43,410
I would encourage you to take.

757
00:33:43,410 --> 00:33:46,650
Number one is make sure
that you are gaining

758
00:33:46,650 --> 00:33:50,420
and maintaining that
multi-cloud visibility

759
00:33:50,420 --> 00:33:52,150
with threat detection.

760
00:33:52,150 --> 00:33:52,983
This is important.

761
00:33:52,983 --> 00:33:55,200
If you remember the pyramid
on the previous slide,

762
00:33:55,200 --> 00:33:56,580
this is that first step.

763
00:33:56,580 --> 00:33:58,370
You always wanna start there

764
00:33:58,370 --> 00:34:00,300
because it becomes really critical

765
00:34:00,300 --> 00:34:03,980
and almost impossible to do
the rest without visibility.

766
00:34:03,980 --> 00:34:04,813
So that's number one,

767
00:34:04,813 --> 00:34:07,250
and you can typically get that capability

768
00:34:07,250 --> 00:34:10,409
from a cloud native security platform.

769
00:34:10,409 --> 00:34:13,460
I encourage you to start
there and then move up.

770
00:34:13,460 --> 00:34:15,690
The second piece, and this goes directly

771
00:34:15,690 --> 00:34:18,260
to the IAM security pieces

772
00:34:18,260 --> 00:34:20,840
that we talked about
earlier in the presentation,

773
00:34:20,840 --> 00:34:23,500
I want you to go out and look
at how you can auto remediate

774
00:34:23,500 --> 00:34:28,179
some of those really common,
excessive IAM privileges

775
00:34:28,179 --> 00:34:29,779
and misconfigurations.

776
00:34:29,780 --> 00:34:31,659
As part one of our previous report,

777
00:34:31,659 --> 00:34:34,290
we actually developed a open source tool

778
00:34:34,290 --> 00:34:36,483
free to use called IAMFinder.

779
00:34:37,320 --> 00:34:40,969
You can either go to the link
or you can just go to GitHub

780
00:34:40,969 --> 00:34:43,783
and search all one word, IAMFinder,

781
00:34:44,679 --> 00:34:48,339
and you can run that against
your AWS environments.

782
00:34:48,340 --> 00:34:51,710
The next piece, and this is
easy to say but difficult to do

783
00:34:51,710 --> 00:34:54,820
but to make sure that you
have a program in place

784
00:34:54,820 --> 00:34:58,080
that will allow you to
shift security left.

785
00:34:58,080 --> 00:35:00,697
And there's really kinda two
high-level pieces to this

786
00:35:00,697 --> 00:35:01,950
that I wanna call out,

787
00:35:01,950 --> 00:35:04,890
the first is I wanna make
sure that you are scanning

788
00:35:04,890 --> 00:35:07,850
all of your infrastructure
as code templates,

789
00:35:07,850 --> 00:35:10,910
containers, et cetera,
functions, whatever it might be

790
00:35:10,910 --> 00:35:12,700
prior to deployment.

791
00:35:12,700 --> 00:35:13,859
I wanna make sure you're doing that,

792
00:35:13,860 --> 00:35:16,020
and then I want you to also be willing

793
00:35:16,020 --> 00:35:18,070
to not just report on issues,

794
00:35:18,070 --> 00:35:21,030
and they might end up Jira,
some kind of bug tracking

795
00:35:21,030 --> 00:35:23,358
but if you find something that's
critical or high severity,

796
00:35:23,358 --> 00:35:26,840
be willing and have a process in place

797
00:35:26,840 --> 00:35:29,160
where you will actually break the build,

798
00:35:29,160 --> 00:35:31,214
don't push misconfigurations

799
00:35:31,214 --> 00:35:34,820
to production or UAT environments.

800
00:35:34,820 --> 00:35:38,430
Well, I hope you enjoyed a lot
of what talked about today,

801
00:35:38,430 --> 00:35:39,730
and I would encourage you

802
00:35:39,730 --> 00:35:42,740
to download our latest cloud threat report

803
00:35:42,740 --> 00:35:45,720
where we spent a lot of
time looking at security

804
00:35:45,720 --> 00:35:49,129
pre and post-COVID-19 discovery.

805
00:35:49,130 --> 00:35:54,130
You can see that report by going
to cloudthreat.report/1h21.

806
00:35:56,500 --> 00:35:59,273
Thank you so much, I hope
you enjoyed the talk today.

