1
00:00:01,040 --> 00:00:03,030
- Hello everyone, and
welcome to our session

2
00:00:03,030 --> 00:00:06,930
on Beyond endpoint security
using osquery at scale.

3
00:00:06,930 --> 00:00:08,660
This session which will
be jointly presented

4
00:00:08,660 --> 00:00:12,719
by my colleague Prateek Nischal
and myself Prasoon Dwivedi.

5
00:00:12,720 --> 00:00:15,008
We both have been working in
the field of endpoint security

6
00:00:15,008 --> 00:00:16,730
for a couple of years now.

7
00:00:16,730 --> 00:00:18,190
And before we get started

8
00:00:18,190 --> 00:00:19,940
let us quickly introduce ourselves.

9
00:00:20,789 --> 00:00:22,706
So over to you Prateek.

10
00:00:24,360 --> 00:00:25,530
- Thank you Prasoon.

11
00:00:25,530 --> 00:00:26,630
Hello everyone.

12
00:00:26,630 --> 00:00:29,380
I'm Prateek and I work as
a senior software engineer

13
00:00:29,380 --> 00:00:31,369
at WM Global Tech India.

14
00:00:31,370 --> 00:00:34,097
And I've been working in the
field of information security

15
00:00:34,097 --> 00:00:36,579
for close to five years now.

16
00:00:36,579 --> 00:00:37,613
Yeah thank you, back to Prasoon.

17
00:00:40,760 --> 00:00:41,690
- Thank you Prateek.

18
00:00:41,690 --> 00:00:43,620
Hello everyone, my name
is Prasoon Dwivedi.

19
00:00:43,620 --> 00:00:47,160
I work as a staff software
engineer at WM Global Tech.

20
00:00:47,160 --> 00:00:49,492
I've been working in the
field of information security

21
00:00:49,493 --> 00:00:51,730
for almost a decade now.

22
00:00:51,730 --> 00:00:55,327
Software development and open
source software development

23
00:00:55,327 --> 00:00:57,593
are a few of my areas of interest.

24
00:01:00,090 --> 00:01:02,010
During this session we request you all

25
00:01:02,010 --> 00:01:03,680
to keep posting your questions.

26
00:01:03,680 --> 00:01:06,393
We will be taking them towards
the end of the session.

27
00:01:08,310 --> 00:01:10,980
Now coming to the main
agenda of this session

28
00:01:10,980 --> 00:01:12,610
we'll see what endpoint devices are

29
00:01:12,610 --> 00:01:14,910
and why they're important
for an organization.

30
00:01:16,090 --> 00:01:18,850
So in a typical enterprise setup

31
00:01:18,850 --> 00:01:21,619
there can be hundreds
and thousands of devices

32
00:01:21,620 --> 00:01:24,390
ranging from virtual machines, servers,

33
00:01:24,390 --> 00:01:27,720
PCs, and associate laptops.

34
00:01:27,720 --> 00:01:30,500
So all such device act as a gateway

35
00:01:30,500 --> 00:01:32,250
to the enterprise network.

36
00:01:32,250 --> 00:01:35,330
And adversity may
exploit the vulnerability

37
00:01:35,330 --> 00:01:38,940
or a security misconfiguration
in one of these devices

38
00:01:38,940 --> 00:01:41,219
to get into the enterprise network.

39
00:01:41,219 --> 00:01:44,220
Where he may set up a
command and control center

40
00:01:44,220 --> 00:01:46,590
or may literally move to
different other devices

41
00:01:46,590 --> 00:01:48,290
within the network.

42
00:01:48,290 --> 00:01:50,430
Finally, he will carry out his intent.

43
00:01:50,430 --> 00:01:53,160
His intent can be to
compromise the integrity

44
00:01:53,160 --> 00:01:55,950
of vice-president on-set systems,

45
00:01:55,950 --> 00:01:58,540
bring down a business critical service

46
00:01:58,540 --> 00:02:02,940
or to exfiltrate data outside the network.

47
00:02:02,940 --> 00:02:05,399
But endpoint security doesn't just end

48
00:02:05,400 --> 00:02:07,110
at preventing a malicious actor

49
00:02:07,110 --> 00:02:09,860
from getting into the interface network.

50
00:02:09,860 --> 00:02:11,770
It's much, much, much beyond that.

51
00:02:12,620 --> 00:02:15,930
It is also required for
a continuous compliance.

52
00:02:15,930 --> 00:02:18,260
So your business may be required to comply

53
00:02:18,260 --> 00:02:20,980
to one of the many industry standards

54
00:02:20,980 --> 00:02:23,000
and regulatory framework

55
00:02:23,000 --> 00:02:27,793
such as from NIST, PCI
DSS, HIPAA, SOX, et cetera.

56
00:02:28,660 --> 00:02:31,200
So these frameworks and
guidelines may dictate

57
00:02:31,200 --> 00:02:33,799
that you have some kinds
of processes and protocols

58
00:02:33,800 --> 00:02:36,530
established within the organization

59
00:02:36,530 --> 00:02:40,350
in order to secure your endpoint devices.

60
00:02:40,350 --> 00:02:42,541
These frameworks and
guidelines may dictate

61
00:02:42,541 --> 00:02:47,250
that you patch your
endpoint devices frequently

62
00:02:47,250 --> 00:02:49,050
at a fixed cadence,

63
00:02:49,050 --> 00:02:51,360
you preserve the integrity
of all the sensitive files

64
00:02:51,360 --> 00:02:52,690
present on these systems

65
00:02:53,702 --> 00:02:57,070
and you account for all the activities

66
00:02:57,070 --> 00:02:58,670
which happened on these devices.

67
00:03:01,900 --> 00:03:04,940
Now, moving on we will see
a few of the challenges

68
00:03:04,940 --> 00:03:08,760
in maintenance and security
of these endpoint devices

69
00:03:08,760 --> 00:03:10,310
within an organizational setup.

70
00:03:12,480 --> 00:03:14,783
So the first challenge
is with the visibility.

71
00:03:15,820 --> 00:03:18,769
It is already a challenging
task to maintain an inventory

72
00:03:18,770 --> 00:03:23,560
of all the devices which may
be present in an organization.

73
00:03:23,560 --> 00:03:28,560
But it becomes more a daunting
task for an administrator

74
00:03:29,620 --> 00:03:33,980
if he has to find out list
of all softwares or packages

75
00:03:33,980 --> 00:03:37,250
or running processes on all devices

76
00:03:38,490 --> 00:03:42,468
within the enterprise network.

77
00:03:42,468 --> 00:03:46,410
The next challenge with the face

78
00:03:46,410 --> 00:03:49,523
is which cybersecurity
landscape is changing.

79
00:03:50,700 --> 00:03:53,070
So endpoint security solution

80
00:03:53,070 --> 00:03:56,230
which is perfect today may
become outdated tomorrow

81
00:03:56,230 --> 00:03:57,850
if it's not kept updated

82
00:03:57,850 --> 00:04:00,700
in response to the latest
trends in cybersecurity.

83
00:04:02,970 --> 00:04:05,833
We also tend to overcomplicate
endpoint security.

84
00:04:07,530 --> 00:04:09,310
Let me ask you a question.

85
00:04:09,310 --> 00:04:13,410
How many of you have complained
about anti-malware virus

86
00:04:13,410 --> 00:04:14,750
or anti-malware software

87
00:04:14,750 --> 00:04:18,220
installed on your devices
consuming a lot of resources?

88
00:04:18,220 --> 00:04:20,420
I assume almost all of you must have

89
00:04:20,420 --> 00:04:21,770
at some point or the other.

90
00:04:23,100 --> 00:04:26,870
So gap in one security
solution is often compensated

91
00:04:26,870 --> 00:04:29,820
by bringing in another security solution.

92
00:04:29,820 --> 00:04:32,599
Security just like any
other thing comes at a cost.

93
00:04:32,600 --> 00:04:34,940
This cost is measured
both in terms of money,

94
00:04:34,940 --> 00:04:37,310
as well as resource consumption.

95
00:04:37,310 --> 00:04:42,010
So if we installed a number
of endpoint security agents

96
00:04:42,010 --> 00:04:43,280
on a device,

97
00:04:43,280 --> 00:04:45,700
it's going to hog a lot of resources.

98
00:04:45,700 --> 00:04:47,510
So much so that it's going to impact

99
00:04:47,510 --> 00:04:50,700
the correct functioning
of legitimate business,

100
00:04:50,700 --> 00:04:51,902
critical applications.

101
00:04:54,670 --> 00:04:57,950
Accountability, and
ownership is also an issue

102
00:04:57,950 --> 00:05:00,823
while dealing with endpoint
and endpoint security.

103
00:05:01,984 --> 00:05:05,810
Endpoint security devices
in a enterprise network

104
00:05:05,810 --> 00:05:10,810
may be spread across
different business functions,

105
00:05:10,910 --> 00:05:12,670
roles and responsibilities.

106
00:05:12,670 --> 00:05:15,130
And this ownership and
identity information

107
00:05:15,130 --> 00:05:17,360
is generally kept in a system

108
00:05:17,360 --> 00:05:20,730
which is outside endpoint
point security devices.

109
00:05:20,730 --> 00:05:22,840
But at the time of a security incident

110
00:05:22,840 --> 00:05:25,640
it becomes a challenging
task to correlate and filter

111
00:05:25,640 --> 00:05:29,750
all this data in order to find
the right team or the person

112
00:05:29,750 --> 00:05:30,640
who will be ultimately responsible

113
00:05:30,640 --> 00:05:32,402
for mitigating that issue.

114
00:05:35,240 --> 00:05:37,430
We also tend to over
prioritize anti-malware

115
00:05:37,430 --> 00:05:40,420
and anti-virus softwares a lot.

116
00:05:40,420 --> 00:05:44,840
A virus or a malware is not
the only thing we look out for

117
00:05:46,860 --> 00:05:50,700
There are things which fall outside

118
00:05:50,700 --> 00:05:52,003
the general threat window.

119
00:05:53,200 --> 00:05:55,789
And we need to consider
those things as well.

120
00:05:55,790 --> 00:05:58,800
Such as regulatory and
compliance requirements

121
00:05:58,800 --> 00:06:00,510
and policy enforcement.

122
00:06:00,510 --> 00:06:03,620
Both these things are very critical

123
00:06:03,620 --> 00:06:06,410
when we choose an
endpoint security solution

124
00:06:06,410 --> 00:06:08,493
for our endpoint devices.

125
00:06:10,910 --> 00:06:13,550
Now moving on let's see
what are the requirements

126
00:06:13,550 --> 00:06:15,350
from our endpoint security solution?

127
00:06:17,010 --> 00:06:19,440
So endpoint security generally starts

128
00:06:19,440 --> 00:06:21,823
with installation of agents on devices.

129
00:06:22,890 --> 00:06:26,426
So as we have already
discussed in a enterprise setup

130
00:06:26,426 --> 00:06:28,270
there can be a large number of devices.

131
00:06:28,270 --> 00:06:31,520
And probably they are going
to be heterogeneous in nature

132
00:06:31,520 --> 00:06:35,210
and may require a different kind of agent

133
00:06:35,210 --> 00:06:37,053
for all such devices.

134
00:06:38,120 --> 00:06:40,200
What endpoint security does

135
00:06:40,200 --> 00:06:43,163
it doesn't just end at
installation of endpoint devices.

136
00:06:46,610 --> 00:06:50,180
You also need to set up an
immutable event pipeline.

137
00:06:50,180 --> 00:06:53,750
So through this pipeline,
we can detect any changes

138
00:06:53,750 --> 00:06:56,750
to the state of endpoint devices.

139
00:06:56,750 --> 00:06:58,780
We can collect them and rotate them

140
00:06:58,780 --> 00:07:01,650
with metadata and contextual data.

141
00:07:01,650 --> 00:07:03,669
And finally you transport them to a place

142
00:07:03,670 --> 00:07:06,773
where they can be used
for further analytics.

143
00:07:09,460 --> 00:07:11,729
You also need a triaging
and alerting setup.

144
00:07:11,730 --> 00:07:14,620
An alerting setup is needed,

145
00:07:14,620 --> 00:07:17,070
and it needs to be smart enough

146
00:07:17,070 --> 00:07:20,180
so that it can detect
any abnormal behavior

147
00:07:20,180 --> 00:07:22,200
throughout the enterprise network

148
00:07:22,200 --> 00:07:26,460
and send out an alert to all
the required stakeholders.

149
00:07:26,460 --> 00:07:29,246
This alert also needs to
be actionable in nature.

150
00:07:31,735 --> 00:07:34,650
A fast, reliable and easy
to use triaging setup

151
00:07:34,650 --> 00:07:36,010
is also needed.

152
00:07:36,010 --> 00:07:39,620
The setup will be used by
auditors and administrator

153
00:07:39,620 --> 00:07:43,650
to derive meaningful information

154
00:07:43,650 --> 00:07:46,060
from all the collected logs and events.

155
00:07:50,080 --> 00:07:53,507
Finally all the data logs
and events we collect

156
00:07:53,507 --> 00:07:56,710
from all the devices present in a network

157
00:07:57,890 --> 00:07:59,890
should be open to stakeholders.

158
00:07:59,890 --> 00:08:03,393
It's not exciting at all if
it just sits in a data store.

159
00:08:05,400 --> 00:08:07,489
If it's made available to stakeholders,

160
00:08:07,490 --> 00:08:08,790
probably they're going to use this

161
00:08:08,790 --> 00:08:12,500
for their further analytics
and use it for purposes,

162
00:08:12,500 --> 00:08:15,423
such as threat detection
and inventory management.

163
00:08:18,030 --> 00:08:19,630
Now let's see what are the requirements

164
00:08:19,630 --> 00:08:21,230
from a compliance point of view?

165
00:08:24,150 --> 00:08:27,020
So an endpoint security solution

166
00:08:27,020 --> 00:08:28,186
must be able to detect

167
00:08:28,187 --> 00:08:30,623
a vulnerable enterprise infrastructure.

168
00:08:31,740 --> 00:08:33,250
In order to do so

169
00:08:33,250 --> 00:08:36,460
it needs to track all the
installed software and packages

170
00:08:36,460 --> 00:08:39,380
along with running processes

171
00:08:39,380 --> 00:08:41,793
on all devices throughout the network.

172
00:08:43,696 --> 00:08:48,696
Then finding a vulnerable
infrastructure becomes a easy task

173
00:08:49,280 --> 00:08:51,689
and in order to do so, all we need to do

174
00:08:51,690 --> 00:08:55,440
is to look out for vulnerable packages

175
00:08:55,440 --> 00:08:57,323
and compromised processes.

176
00:09:00,530 --> 00:09:03,980
We also need visibility
on what all is running

177
00:09:03,980 --> 00:09:07,180
on an endpoint device all the time.

178
00:09:07,180 --> 00:09:12,160
We also need to attach and
associate all these activities

179
00:09:12,160 --> 00:09:14,573
to a user or a service account.

180
00:09:17,090 --> 00:09:21,130
An endpoint solution should
also provide strong proof

181
00:09:21,130 --> 00:09:23,406
of its own integrity.

182
00:09:23,406 --> 00:09:26,810
In order to do so it must
run in a self-aware mode

183
00:09:26,810 --> 00:09:28,760
and should be able to detect any changes

184
00:09:28,760 --> 00:09:30,635
to its sub-components.

185
00:09:30,635 --> 00:09:33,310
By doing so it can easily detect

186
00:09:33,310 --> 00:09:35,613
if it has been compromised
or tampered with.

187
00:09:37,900 --> 00:09:42,130
Finally for all the auditors
it's important to know

188
00:09:42,130 --> 00:09:43,490
what are the different components

189
00:09:43,490 --> 00:09:45,200
of an endpoint security solution

190
00:09:46,260 --> 00:09:48,763
is running on a given
device at a given time.

191
00:09:50,070 --> 00:09:53,310
So all this information
should be made available

192
00:09:53,310 --> 00:09:55,453
to the auditor and administrators.

193
00:09:56,590 --> 00:09:57,423
All right.

194
00:09:57,423 --> 00:10:00,170
Once we have selected an
endpoint security solution

195
00:10:00,170 --> 00:10:01,599
for our enterprise,

196
00:10:01,600 --> 00:10:03,800
we'll run into the
problem of bootstrapping.

197
00:10:05,310 --> 00:10:06,709
In the bootstrapping phase

198
00:10:06,710 --> 00:10:09,350
we need to find an efficient and fast way

199
00:10:09,350 --> 00:10:12,360
to deploy the solution across the network.

200
00:10:12,360 --> 00:10:15,490
There are a couple of broad
steps involved in this process.

201
00:10:15,490 --> 00:10:18,083
So let's quickly take
a look at all of them.

202
00:10:18,950 --> 00:10:22,470
The bootstrap process will
start with installation

203
00:10:22,470 --> 00:10:26,253
of event collectors or
agents on all their devices.

204
00:10:27,100 --> 00:10:29,470
Then we need to finalize a way

205
00:10:29,470 --> 00:10:32,610
through which all these collected
events can be standardized

206
00:10:32,610 --> 00:10:35,123
and converted into a standard format.

207
00:10:36,360 --> 00:10:41,360
We also need to set up a
trusted and reliable pipeline

208
00:10:41,950 --> 00:10:45,160
to transport logs and
events from endpoint devices

209
00:10:45,160 --> 00:10:47,170
to the centralized collection framework

210
00:10:48,550 --> 00:10:51,550
where they can be useful
for the analytics.

211
00:10:51,550 --> 00:10:54,189
Finally, we need to set up
a command and control center

212
00:10:54,190 --> 00:10:56,710
through which configuration
can be distributed

213
00:10:56,710 --> 00:10:59,540
and behavior of agents can be controlled

214
00:10:59,540 --> 00:11:02,242
by making micro changes to
the agent configuration.

215
00:11:04,070 --> 00:11:04,903
Sorry.

216
00:11:04,903 --> 00:11:07,440
Now that we have discussed the challenges

217
00:11:07,440 --> 00:11:10,170
in dealing with endpoint
devices and requirements

218
00:11:10,170 --> 00:11:13,550
for a endpoint security solution.

219
00:11:13,550 --> 00:11:16,910
We have prepared a wishlist of items

220
00:11:16,910 --> 00:11:21,283
which we would like to see in
an endpoint security solution.

221
00:11:22,190 --> 00:11:24,410
So again, it's not an exhaustive list,

222
00:11:24,410 --> 00:11:28,579
but here are a few of the items
we have on top of our heads.

223
00:11:28,580 --> 00:11:30,410
So this security solution

224
00:11:30,410 --> 00:11:34,353
should have no or minimal
custom or complex deployment.

225
00:11:35,300 --> 00:11:38,319
It should ensure its own integrity.

226
00:11:38,320 --> 00:11:41,340
The ownership and identity information

227
00:11:41,340 --> 00:11:44,900
should be made a integral
part of the solution.

228
00:11:44,900 --> 00:11:46,949
There should be a single point of control

229
00:11:48,270 --> 00:11:49,760
through which behavior of agents

230
00:11:49,760 --> 00:11:53,930
can be controlled and monitored.

231
00:11:53,930 --> 00:11:57,709
And finally, it should
not require establishment

232
00:11:57,710 --> 00:12:02,320
of a new logging framework
or logging pipeline.

233
00:12:02,320 --> 00:12:07,320
It should use the existing
audinative logging framework

234
00:12:07,820 --> 00:12:10,870
for building the inventing
pipeline and transporting logs

235
00:12:10,870 --> 00:12:15,103
from endpoint devices
to the collection point.

236
00:12:16,980 --> 00:12:20,030
So keeping all the items
in the wishlist in mind

237
00:12:20,030 --> 00:12:24,400
and with the intent of
solving the challenges we face

238
00:12:24,400 --> 00:12:26,699
while dealing with endpoint devices

239
00:12:26,700 --> 00:12:30,523
we have worked on a audit
framework for endpoint security.

240
00:12:32,000 --> 00:12:35,902
So this audit framework of
ours is based on osquery.

241
00:12:35,902 --> 00:12:39,439
Osquery is an open source
endpoint visibility tool.

242
00:12:39,439 --> 00:12:41,622
It was created at Facebook.

243
00:12:42,518 --> 00:12:44,560
Osquery exposes operating system events

244
00:12:44,560 --> 00:12:47,290
and information via sequel interface.

245
00:12:47,290 --> 00:12:50,000
It also has strong capabilities

246
00:12:50,000 --> 00:12:53,593
for filtering and correlation
already built into it.

247
00:12:56,850 --> 00:12:59,182
So one may ask why we choose osquery

248
00:12:59,182 --> 00:13:01,340
for our auditing framework.

249
00:13:01,340 --> 00:13:02,800
So there are a couple of reasons for it.

250
00:13:02,800 --> 00:13:06,183
The first reason is osquery
is extremely flexible.

251
00:13:07,290 --> 00:13:10,360
Osquery follows a plugin based framework.

252
00:13:10,360 --> 00:13:12,340
And there are a couple of plugins

253
00:13:13,210 --> 00:13:15,460
which are shipped off
the shelf with osquery.

254
00:13:16,930 --> 00:13:20,150
There are two such plugins
which are of a special interest.

255
00:13:20,150 --> 00:13:23,983
The first plugin is the TLS config plugin.

256
00:13:24,880 --> 00:13:27,920
And through this plugin
we can read configuration

257
00:13:27,920 --> 00:13:29,793
from a remote host.

258
00:13:31,230 --> 00:13:33,141
The second plugin,
which is of our interest

259
00:13:33,141 --> 00:13:34,920
is the TLS logger plugin.

260
00:13:34,920 --> 00:13:38,130
And as the name suggests this login

261
00:13:38,130 --> 00:13:42,490
can send logs and events
to a remote destination

262
00:13:44,690 --> 00:13:47,193
which implements the TLS plugin of course.

263
00:13:48,410 --> 00:13:49,980
Both these plugins can be extended

264
00:13:49,980 --> 00:13:53,133
to support custom
functionality and features.

265
00:13:56,680 --> 00:13:59,250
On moving on let's see
what our audit framework is

266
00:13:59,250 --> 00:14:01,480
and what it does.

267
00:14:01,480 --> 00:14:06,480
So the audit framework is
nothing but a set of guidelines

268
00:14:06,582 --> 00:14:09,990
which tells how different components

269
00:14:09,990 --> 00:14:14,593
of an endpoint security
solution must act and behave.

270
00:14:16,140 --> 00:14:20,470
It aims to standardize
the way agents behave,

271
00:14:20,470 --> 00:14:22,843
how they act, how they collect events,

272
00:14:23,690 --> 00:14:25,490
how they process it, standardize it.

273
00:14:27,540 --> 00:14:32,540
It also tells one how
configuration should be distributed

274
00:14:32,720 --> 00:14:34,540
and how integrity of configuration

275
00:14:34,540 --> 00:14:37,272
can be maintained throughout.

276
00:14:38,820 --> 00:14:41,970
It also tells how logs can be transported

277
00:14:41,970 --> 00:14:44,330
from endpoint devices

278
00:14:44,330 --> 00:14:48,963
to the centralized log management system.

279
00:14:50,350 --> 00:14:52,380
So we have a full-fledged implementation

280
00:14:52,380 --> 00:14:54,503
of the framework for Linux systems.

281
00:14:55,560 --> 00:15:00,180
This project is built on top of osquery

282
00:15:00,180 --> 00:15:03,209
and it's tightly coupled to
the Linux audit framework.

283
00:15:03,210 --> 00:15:05,060
We'll be sharing a link to this project

284
00:15:05,060 --> 00:15:06,609
towards the end of our session.

285
00:15:11,240 --> 00:15:14,370
Now let's see how the audit
framework we have proposed

286
00:15:15,760 --> 00:15:18,713
insures its own integrity
for compliance purposes.

287
00:15:20,700 --> 00:15:24,120
So in order to do so the audit framework

288
00:15:24,120 --> 00:15:27,610
keeps on monitoring its own sub-components

289
00:15:29,580 --> 00:15:34,580
such as version of the agents
deployed on endpoint devices

290
00:15:35,505 --> 00:15:36,983
and their integrity.

291
00:15:38,320 --> 00:15:40,760
The framework also detects any changes

292
00:15:40,760 --> 00:15:44,660
to the permission of an agent
with which it's running.

293
00:15:44,660 --> 00:15:47,670
It is important to monitor any change

294
00:15:47,670 --> 00:15:48,680
to the agent permission

295
00:15:48,680 --> 00:15:52,742
because it may hamper an agent's ability

296
00:15:54,280 --> 00:15:55,783
to look into os events.

297
00:15:57,240 --> 00:15:59,747
It also keeps track of the time

298
00:15:59,747 --> 00:16:02,010
for which an agent has been running.

299
00:16:02,010 --> 00:16:04,551
It also detects agent restarts.

300
00:16:04,551 --> 00:16:06,770
Agent restarts are of a special interest

301
00:16:06,770 --> 00:16:09,000
because those are the dark period

302
00:16:09,000 --> 00:16:11,433
when we lose our ability
to an endpoint to us.

303
00:16:13,370 --> 00:16:16,560
And finally, it also keeps
track of any configuration

304
00:16:16,560 --> 00:16:19,319
which is loaded onto an endpoint device

305
00:16:21,320 --> 00:16:24,980
which is outside the
distributed configuration

306
00:16:24,980 --> 00:16:26,170
and loaded through side channels

307
00:16:26,170 --> 00:16:27,719
such as command-line interface.

308
00:16:30,890 --> 00:16:34,520
Now coming to identity and accountability.

309
00:16:34,520 --> 00:16:37,140
In order to correlate and
process data collected

310
00:16:37,140 --> 00:16:41,280
from different endpoint
devices in an enterprise

311
00:16:41,280 --> 00:16:44,319
we need some more contextual data

312
00:16:44,320 --> 00:16:46,743
such as where the event originated,

313
00:16:47,657 --> 00:16:52,010
what agent and what config
was used to detect any change

314
00:16:52,010 --> 00:16:54,220
and emit of the event

315
00:16:54,220 --> 00:16:58,540
and who the owner of
that endpoint device is?

316
00:16:58,540 --> 00:17:03,540
And in order to do so we can
annotate the event reports

317
00:17:04,480 --> 00:17:06,810
with a lot of meta-information.

318
00:17:06,810 --> 00:17:11,800
Such as we can use host name and IP

319
00:17:11,800 --> 00:17:15,017
to uniquely identify the endpoint device.

320
00:17:15,017 --> 00:17:18,230
We can use agent version and
the version of the config

321
00:17:18,230 --> 00:17:19,790
the agent is running with

322
00:17:19,790 --> 00:17:23,280
to identify which agent
was used to collect

323
00:17:23,280 --> 00:17:25,319
and emit this event.

324
00:17:25,319 --> 00:17:28,817
And for ownership
information we can use data

325
00:17:31,280 --> 00:17:35,300
such as organizational segment, pillar

326
00:17:35,300 --> 00:17:37,100
or the geographical location,

327
00:17:37,100 --> 00:17:39,169
along with the name and email address

328
00:17:39,170 --> 00:17:42,373
of the team or the individual
who owns that device.

329
00:17:43,470 --> 00:17:46,199
All this information, all this metadata

330
00:17:46,199 --> 00:17:50,240
can be fed to the audit framework
at the time of bootstrap

331
00:17:50,240 --> 00:17:53,120
by the orchestration engine.

332
00:17:53,120 --> 00:17:56,716
So all this process can
then be made automated

333
00:17:56,717 --> 00:17:58,460
and self-serviced.

334
00:17:58,460 --> 00:18:01,710
So I'll stop here and pass
on the control to Prateek

335
00:18:01,710 --> 00:18:04,700
who will take us through the
next segment of this session.

336
00:18:04,700 --> 00:18:07,190
So over to you Prateek.

337
00:18:07,190 --> 00:18:09,003
- Thank you Prasoon.

338
00:18:09,003 --> 00:18:10,990
Configuration is another area

339
00:18:10,990 --> 00:18:13,620
that the audit framework deals with.

340
00:18:13,620 --> 00:18:15,628
Configuration is one of the
most important components

341
00:18:15,628 --> 00:18:17,550
because of its dynamic nature.

342
00:18:17,550 --> 00:18:20,280
And it defines how the
agents should behave.

343
00:18:20,280 --> 00:18:23,720
Agents may be extremely capable
of collecting information

344
00:18:23,720 --> 00:18:27,038
but they're only as good as
they're configured, right?

345
00:18:27,038 --> 00:18:30,270
The updates of configuration could be

346
00:18:30,270 --> 00:18:32,103
for something like updated
malware definitions,

347
00:18:32,103 --> 00:18:34,753
additional information that
you might need to collect

348
00:18:35,670 --> 00:18:38,443
updated frequency data
collection timelines, et cetera.

349
00:18:40,729 --> 00:18:43,100
For our implementation the
configuration is managed

350
00:18:43,100 --> 00:18:45,669
by a custom osquery config plugin

351
00:18:45,670 --> 00:18:46,920
that can handle configurations.

352
00:18:46,920 --> 00:18:49,570
Not only osquery but all of the agents

353
00:18:49,570 --> 00:18:51,370
that may be running on the endpoint.

354
00:18:52,390 --> 00:18:54,480
The audit framework
describes multiple ways

355
00:18:54,480 --> 00:18:55,670
to serve the configuration

356
00:18:55,670 --> 00:18:58,300
in order to make it
performed as well as secure.

357
00:18:58,300 --> 00:19:00,919
For example, the configuration
could be served out

358
00:19:00,920 --> 00:19:04,100
of a out of the box file
server or a full-fat API server

359
00:19:04,100 --> 00:19:06,459
depending upon how complex is your setup

360
00:19:06,460 --> 00:19:10,070
and what is the level of
flexibility that you might require.

361
00:19:10,070 --> 00:19:13,172
For instance, if the configuration
required by an endpoint

362
00:19:13,172 --> 00:19:15,330
depends on its runtime state

363
00:19:15,330 --> 00:19:17,460
you might want to go the API route.

364
00:19:17,460 --> 00:19:19,090
If the resources are static enough

365
00:19:19,090 --> 00:19:21,240
you can serve it from
a simple file server.

366
00:19:24,550 --> 00:19:27,540
Now, another thing is confidentiality,

367
00:19:27,540 --> 00:19:29,340
integrity and accountability.

368
00:19:29,340 --> 00:19:30,439
How do we ensure that?

369
00:19:32,020 --> 00:19:34,270
So the configuration is our exit security

370
00:19:34,270 --> 00:19:37,480
from an already established
and available technology

371
00:19:37,480 --> 00:19:39,090
amongst organizations

372
00:19:39,090 --> 00:19:41,240
which is public interest action.

373
00:19:41,240 --> 00:19:44,890
Which is usually present for
signing x509 certificates

374
00:19:44,890 --> 00:19:45,970
within an organization

375
00:19:45,970 --> 00:19:47,120
which may be used for service certificate,

376
00:19:47,120 --> 00:19:51,162
signed certificates,
artifact signings, et cetera.

377
00:19:52,310 --> 00:19:54,870
The configuration, all of
its versions and metadata

378
00:19:54,870 --> 00:19:57,530
are blended and protected
in a security envelope

379
00:19:58,840 --> 00:20:01,560
which is protected by a digital signature.

380
00:20:01,560 --> 00:20:03,409
The trust anchor for the digital signature

381
00:20:03,410 --> 00:20:04,823
is the organization seal.

382
00:20:06,400 --> 00:20:07,660
The certificate that is used

383
00:20:07,660 --> 00:20:09,350
to create the digital signature

384
00:20:09,350 --> 00:20:11,469
can be accessed controlled logically

385
00:20:11,470 --> 00:20:14,580
as well as using x509
extensions and attributes

386
00:20:14,580 --> 00:20:16,310
so that the certificate is only used

387
00:20:16,310 --> 00:20:18,450
for the actual purpose
and not for anything else.

388
00:20:18,450 --> 00:20:21,170
It should be very difficult
to forge the signature

389
00:20:21,170 --> 00:20:22,243
for the certificate.

390
00:20:24,480 --> 00:20:27,660
Now, why do we want to secure
the configuration explicitly?

391
00:20:27,660 --> 00:20:31,980
Why not just rely on DLS or
some other standard mechanism?

392
00:20:31,980 --> 00:20:34,460
So there are some benefits
that we get from it.

393
00:20:34,460 --> 00:20:37,660
For example, the
configuration can be served

394
00:20:37,660 --> 00:20:38,920
from an insecure file server.

395
00:20:38,920 --> 00:20:41,330
You do not have to spend effort or time

396
00:20:41,330 --> 00:20:43,649
on securing the location

397
00:20:43,650 --> 00:20:45,050
from where the configuration is served

398
00:20:45,050 --> 00:20:48,020
because the configuration
has builtin security.

399
00:20:48,020 --> 00:20:50,830
Also it allows us to
verify the configuration

400
00:20:50,830 --> 00:20:52,590
irrespective of its source.

401
00:20:52,590 --> 00:20:54,639
Say, if you happen to find a configuration

402
00:20:54,640 --> 00:20:56,660
when they're just lying
around in someplace.

403
00:20:56,660 --> 00:20:58,920
And it has the signature attached to it.

404
00:20:58,920 --> 00:21:01,770
It will be very easy to
verify the configuration

405
00:21:01,770 --> 00:21:03,320
to make sure it's valid or not.

406
00:21:06,530 --> 00:21:08,828
The audit framework
also defines a mechanism

407
00:21:08,828 --> 00:21:09,667
to get the configuration

408
00:21:09,667 --> 00:21:12,760
via a simple, anonymous HTTP GET request

409
00:21:12,760 --> 00:21:16,103
which makes it very painless
for orchestrators to integrate.

410
00:21:17,010 --> 00:21:18,580
This also allows for higher performance,

411
00:21:18,580 --> 00:21:21,590
because if you stick in a
cashing proxy in front of it

412
00:21:21,590 --> 00:21:23,590
you might get a very linear scalability.

413
00:21:27,090 --> 00:21:29,649
The configuration and its security

414
00:21:29,650 --> 00:21:33,280
is tied to the PKI and not a shared secret

415
00:21:33,280 --> 00:21:36,379
which makes it completely
self-service and automated.

416
00:21:36,380 --> 00:21:38,550
Anyone who wants to onboard the service

417
00:21:38,550 --> 00:21:41,080
may not require to communicate

418
00:21:41,080 --> 00:21:43,370
or have any interactions
with the solution providers

419
00:21:43,370 --> 00:21:45,360
which makes it a bit more streamlined

420
00:21:45,360 --> 00:21:48,053
in terms of automation and onboarding.

421
00:21:52,540 --> 00:21:56,300
Another area with which the
audit framework deals with

422
00:21:56,300 --> 00:21:59,180
is integration with the
native auditing component

423
00:21:59,180 --> 00:22:00,660
of the platform.

424
00:22:00,660 --> 00:22:05,040
For our implementation, since
we are focusing on Linux

425
00:22:05,900 --> 00:22:08,100
we would be using the
Linux audit framework.

426
00:22:09,400 --> 00:22:12,310
The Linux audit subsystem or kauditd

427
00:22:12,310 --> 00:22:13,690
is a very powerful internal feature

428
00:22:13,690 --> 00:22:16,560
that lets us extract a lot of information

429
00:22:16,560 --> 00:22:19,407
regarding the state of the
platform and what's running on it

430
00:22:19,407 --> 00:22:21,543
but it has a cost as all good things have.

431
00:22:25,010 --> 00:22:27,129
So what are the capabilities of kauditd

432
00:22:27,130 --> 00:22:29,160
or the Linux audit service?

433
00:22:29,160 --> 00:22:32,200
It can help us gather information
about process execution.

434
00:22:32,200 --> 00:22:35,520
It can help us to detect
malware and its footprints.

435
00:22:35,520 --> 00:22:37,710
Syscall auditing process.

436
00:22:37,710 --> 00:22:40,820
File integrity and access
monitoring for sensitive files.

437
00:22:40,820 --> 00:22:43,899
The ability to monitor
user and network activity

438
00:22:43,900 --> 00:22:44,793
on the endpoint.

439
00:22:48,990 --> 00:22:52,380
The Linux audit system or
kauditd is very comprehensive

440
00:22:52,380 --> 00:22:56,290
but it's not very flexible
in terms of configurability.

441
00:22:56,290 --> 00:23:00,350
The usual way to configure
kauditd is using auditctl.

442
00:23:00,350 --> 00:23:03,510
It does not support
globbing or patten matching.

443
00:23:03,510 --> 00:23:06,840
You might not want to monitor
everything under the sun

444
00:23:06,840 --> 00:23:08,760
but the very specific file patterns,

445
00:23:08,760 --> 00:23:12,070
it is kind of difficult using
the Linux audit framework,

446
00:23:12,070 --> 00:23:13,713
at least in the vanilla version.

447
00:23:15,240 --> 00:23:17,207
The logs that are emitted by kauditd

448
00:23:17,207 --> 00:23:19,100
are not very processing friendly.

449
00:23:19,100 --> 00:23:22,379
It's hard to make sense
of the logs immediately.

450
00:23:22,380 --> 00:23:23,720
It's optimized for performance

451
00:23:23,720 --> 00:23:25,940
and not for immediate visibility.

452
00:23:25,940 --> 00:23:27,710
Although there are some certain tools

453
00:23:27,710 --> 00:23:31,060
such as Auditbeat by
Elasticsearch or go-audit by Slack

454
00:23:31,060 --> 00:23:33,679
try to make sense and
extract relevant information

455
00:23:33,680 --> 00:23:35,680
from the logs and make it accessible

456
00:23:35,680 --> 00:23:38,690
for a standard log, aggregation
and correlation tools.

457
00:23:38,690 --> 00:23:40,110
But they're built on their own ecosystem

458
00:23:40,110 --> 00:23:42,959
and it may not play very
well with the components

459
00:23:42,960 --> 00:23:44,300
that are already running on an endpoint

460
00:23:44,300 --> 00:23:46,713
or an organization supports.

461
00:23:49,780 --> 00:23:54,780
Now for a two minute primer
on kauditd as to how it works.

462
00:23:55,001 --> 00:23:58,300
It's like a silent watcher
sitting at the cardinal gateway

463
00:23:58,300 --> 00:24:00,950
and looking at the systems as they come in

464
00:24:00,950 --> 00:24:02,343
and their responses go out.

465
00:24:03,810 --> 00:24:06,520
And for the routes that
it's configured with

466
00:24:06,520 --> 00:24:08,800
it can create events.

467
00:24:08,800 --> 00:24:11,409
And pass it to user space for consumption

468
00:24:11,410 --> 00:24:13,440
over the Audit Netlink Socket.

469
00:24:13,440 --> 00:24:16,630
So auditd and osquery both are clients

470
00:24:16,630 --> 00:24:18,930
to these Audit Netlink Socket

471
00:24:18,930 --> 00:24:20,953
which can consume and post process logs.

472
00:24:23,679 --> 00:24:25,870
Auditd does not do any post processing

473
00:24:25,870 --> 00:24:28,090
that makes the event stream fairly noisy

474
00:24:28,090 --> 00:24:30,480
and hard to gain insights from.

475
00:24:30,480 --> 00:24:33,400
Osquery on the other hand
uses user land filtering

476
00:24:33,400 --> 00:24:37,453
to make sense of the logs,
annotate it and enrich the data.

477
00:24:38,460 --> 00:24:40,060
But the way it configures kauditd

478
00:24:40,060 --> 00:24:43,159
can lead to a lot of uninteresting
events getting osquery

479
00:24:43,160 --> 00:24:46,530
which can aggravate the already
potentially nasty behavior

480
00:24:46,530 --> 00:24:50,430
of kauditd and add to the
unnecessary resource consumption

481
00:24:50,430 --> 00:24:52,803
which is always a problem
with endpoint agents.

482
00:24:54,180 --> 00:24:56,750
Now because of all of
these uninteresting events

483
00:24:56,750 --> 00:24:58,840
this would lead to buffer overruns

484
00:24:58,840 --> 00:25:01,459
which can lead to the
interesting events getting lost

485
00:25:01,460 --> 00:25:03,280
because osquery will be too busy dealing

486
00:25:03,280 --> 00:25:06,466
with the existing events
that are coming in.

487
00:25:06,467 --> 00:25:09,140
And it might as well
drop it on those events

488
00:25:09,140 --> 00:25:11,563
because most of them are
not very interesting.

489
00:25:12,600 --> 00:25:15,820
Now to back that claim,
we have a benchmark.

490
00:25:15,820 --> 00:25:20,820
So this is a benchmark of osquery
running on a Linux machine

491
00:25:22,000 --> 00:25:24,500
with all the vanilla configuration.

492
00:25:24,500 --> 00:25:29,360
And you can see that the CPU
overhead is quite noticeable.

493
00:25:29,360 --> 00:25:32,300
This can lead to instability
in terms of processing logs

494
00:25:32,300 --> 00:25:34,840
which means you can drop certain events,

495
00:25:34,840 --> 00:25:38,310
osquery could get unstable,
the resource limit for osquery

496
00:25:38,310 --> 00:25:41,483
might get in and you might
get into a dark area.

497
00:25:45,240 --> 00:25:49,000
Now on the other hand, this is a benchmark

498
00:25:49,000 --> 00:25:51,350
with osquery running on the same machine

499
00:25:51,350 --> 00:25:54,669
but with the manually
configured kauditd system.

500
00:25:54,670 --> 00:25:56,280
Notice the CPU consumption.

501
00:25:56,280 --> 00:25:58,250
It's virtually non-existent right?

502
00:25:58,250 --> 00:26:00,640
Now this is because osquery
is no longer processing

503
00:26:00,640 --> 00:26:02,290
all of those irrelevant logs

504
00:26:02,290 --> 00:26:05,360
but only the logs that
it needs to process.

505
00:26:05,360 --> 00:26:06,790
This shows that osquery can offload

506
00:26:06,790 --> 00:26:10,100
a lot of the audit configuration
and processing part

507
00:26:10,100 --> 00:26:11,449
to an osquery extension

508
00:26:11,450 --> 00:26:13,600
that understands and
configures the audit system

509
00:26:13,600 --> 00:26:15,090
in a much better way.

510
00:26:15,090 --> 00:26:17,250
That can lead to much better performance

511
00:26:17,250 --> 00:26:20,070
and virtually no user
land filtering overhead

512
00:26:20,070 --> 00:26:24,710
since the number of irrelevant
events would be reduced

513
00:26:24,710 --> 00:26:26,163
by orders of magnitude.

514
00:26:28,890 --> 00:26:31,930
Now, this brings us to osquery extensions.

515
00:26:31,930 --> 00:26:33,760
Osquery being flexible allows us

516
00:26:33,760 --> 00:26:37,440
to implement event
consumers and configurators

517
00:26:37,440 --> 00:26:39,610
which can also utilize the full suit

518
00:26:39,610 --> 00:26:42,040
of osquery SQL filtering capabilities

519
00:26:42,040 --> 00:26:43,620
and also annotate the data

520
00:26:43,620 --> 00:26:44,989
with all of the relevant tax

521
00:26:44,990 --> 00:26:46,990
that it might have been configured with.

522
00:26:48,060 --> 00:26:50,223
This can help us get
the best of both worlds.

523
00:26:54,060 --> 00:26:56,973
Now once we have the logs,
we need to act upon it.

524
00:27:00,040 --> 00:27:03,168
Every organization who deals with IT

525
00:27:03,169 --> 00:27:04,700
has a log shipping mechanism

526
00:27:04,700 --> 00:27:07,150
with a dedicated process surrounding it.

527
00:27:07,150 --> 00:27:09,500
It's much more efficient
to just reuse that pipeline

528
00:27:09,500 --> 00:27:11,600
instead of building a
custom event pipeline

529
00:27:11,600 --> 00:27:14,949
because it's something that
is core to the infrastructure

530
00:27:14,950 --> 00:27:18,853
and the organization you
might want to just reuse that.

531
00:27:24,000 --> 00:27:26,990
Once the events are under a
query or a correlation engine

532
00:27:26,990 --> 00:27:29,420
the events can be checked for dead agents,

533
00:27:29,420 --> 00:27:32,100
configuration changes, integrity changes

534
00:27:32,100 --> 00:27:35,673
and any other relevant events.

535
00:27:36,530 --> 00:27:38,270
The events could also be passed

536
00:27:38,270 --> 00:27:40,310
through live deterministic classifiers,

537
00:27:40,310 --> 00:27:41,899
to detect suspicious events

538
00:27:41,900 --> 00:27:44,970
like unauthorized use and
modification of resources.

539
00:27:44,970 --> 00:27:47,970
For example, not all users
are allowed to run processes

540
00:27:49,387 --> 00:27:52,765
on a machine or login to a
particular resource, et cetera.

541
00:27:52,766 --> 00:27:56,610
They may not be allowed to view
or modify a particular site.

542
00:27:56,610 --> 00:28:00,409
It may sound like there
is an underprivileged

543
00:28:00,410 --> 00:28:01,940
or a non-privileged user

544
00:28:01,940 --> 00:28:04,630
was trying to modify a
certain system configuration.

545
00:28:04,630 --> 00:28:07,890
That might be something suspicious, right?

546
00:28:07,890 --> 00:28:11,020
All of these rules can be
imported into a rules engine

547
00:28:11,020 --> 00:28:13,533
which can provide near real-time alerts.

548
00:28:15,500 --> 00:28:17,170
The data is also semi-classified

549
00:28:17,170 --> 00:28:20,720
because of the native data
methods already integrated with.

550
00:28:20,720 --> 00:28:23,010
It has a lot of context within the data.

551
00:28:23,010 --> 00:28:24,750
For example, what was its source?

552
00:28:24,750 --> 00:28:26,050
What kind of event was it?

553
00:28:26,050 --> 00:28:27,310
Was it a user event?

554
00:28:27,310 --> 00:28:28,730
Was it a process event?

555
00:28:28,730 --> 00:28:30,270
Was it a network event?

556
00:28:30,270 --> 00:28:31,730
What time did it happen?

557
00:28:31,730 --> 00:28:33,380
What was the reason that it came from?

558
00:28:33,380 --> 00:28:34,520
Et cetera.

559
00:28:34,520 --> 00:28:37,080
All of this data can be fed
into a machine learning model

560
00:28:37,080 --> 00:28:40,270
which we can use to
calculate the threat score

561
00:28:40,270 --> 00:28:42,389
for that particular resource.

562
00:28:42,390 --> 00:28:46,330
And if you map out this threat
score throughout your network

563
00:28:46,330 --> 00:28:49,481
you might be able to identify
hotspots on your network.

564
00:28:49,481 --> 00:28:52,290
That is an indication that
you might want to have

565
00:28:52,290 --> 00:28:54,340
some additional controls
over those resources

566
00:28:54,340 --> 00:28:57,159
because they seem to be
most active all the time.

567
00:29:00,680 --> 00:29:02,900
Now since we have all of the data and

568
00:29:02,900 --> 00:29:05,030
it's historic in nature
like we have aggregated data

569
00:29:05,030 --> 00:29:06,750
over a certain period of time.

570
00:29:06,750 --> 00:29:10,280
All of that data could be
used to generate reports

571
00:29:10,280 --> 00:29:11,580
for regulatory bodies,

572
00:29:11,580 --> 00:29:15,082
then start an audit trail
and a database for driving.

573
00:29:17,180 --> 00:29:19,370
The resource owner have an idea about

574
00:29:19,370 --> 00:29:21,469
what is running on their endpoints.

575
00:29:21,470 --> 00:29:22,870
And if we give them the information

576
00:29:22,870 --> 00:29:25,320
about what was actually
running on their endpoints

577
00:29:25,320 --> 00:29:27,629
they might be able to
make more sense out of it

578
00:29:27,630 --> 00:29:29,460
and be able to fix it preemptively

579
00:29:29,460 --> 00:29:31,543
before even it causes any problem.

580
00:29:34,010 --> 00:29:37,390
It can also serve as a tracking
mechanism for ownership

581
00:29:37,390 --> 00:29:40,380
which may be difficult
for some organizations.

582
00:29:40,380 --> 00:29:43,243
It just kind of covers
all of the resources.

583
00:29:46,690 --> 00:29:49,750
So far we've talked about
only the Linux platform

584
00:29:49,750 --> 00:29:51,620
which is part of our implementation,

585
00:29:51,620 --> 00:29:55,159
but can the audit framework
be applied to other platforms?

586
00:29:55,160 --> 00:29:56,393
The answer is yes.

587
00:29:58,540 --> 00:30:02,340
So if you look into the
Mac and Windows ecosystem

588
00:30:02,340 --> 00:30:04,360
Windows has Windows event logs

589
00:30:04,360 --> 00:30:06,830
and MacOS has EndpointSecurity Framework

590
00:30:06,830 --> 00:30:10,030
that can be swapped out for
the Linux audit framework

591
00:30:10,030 --> 00:30:11,810
in the whole pipeline.

592
00:30:11,810 --> 00:30:14,080
And you can get similar properties

593
00:30:14,080 --> 00:30:17,500
and similar eventing behavior
throughout the pipeline.

594
00:30:17,500 --> 00:30:21,573
So it kind of makes it native
to all of the platforms.

595
00:30:26,750 --> 00:30:30,000
Now as part of the project,
we would want to enhance it.

596
00:30:30,000 --> 00:30:32,160
We'd want to make it
available for everyone.

597
00:30:32,160 --> 00:30:34,090
For example we would want to support

598
00:30:34,090 --> 00:30:38,389
distributed query mechanism
for a live view of resources

599
00:30:38,390 --> 00:30:42,033
and not just using osquery
but through all of the agents.

600
00:30:42,920 --> 00:30:45,990
We would want to make the audit rules

601
00:30:45,990 --> 00:30:47,580
flexible and expressive

602
00:30:47,580 --> 00:30:51,429
that would lead us to
generate even leaner events

603
00:30:51,430 --> 00:30:53,323
and efficient resource utilization.

604
00:30:54,840 --> 00:30:57,379
Osquery today does not pass
us all of the information

605
00:30:57,380 --> 00:30:59,440
that is emitted by kauditd.

606
00:30:59,440 --> 00:31:01,970
We would want to add a bunch more tables

607
00:31:01,970 --> 00:31:04,680
so that we can make use and
leverage that information

608
00:31:04,680 --> 00:31:05,763
from the audit logs.

609
00:31:06,800 --> 00:31:10,310
Lastly, we would want to
publish all of the configuration

610
00:31:10,310 --> 00:31:12,980
for the agents and eventing pipelines

611
00:31:12,980 --> 00:31:14,570
which may serve as a starting point

612
00:31:14,570 --> 00:31:17,080
for anyone who is trying to play around

613
00:31:17,080 --> 00:31:19,740
or want to try this framework out

614
00:31:19,740 --> 00:31:21,160
instead of scrambling to figure out

615
00:31:21,160 --> 00:31:22,910
how do I configure this agent,

616
00:31:22,910 --> 00:31:25,370
how do I install this agent, et cetera.

617
00:31:25,370 --> 00:31:27,943
It should be accessible to everyone.

618
00:31:31,760 --> 00:31:33,480
Now, how do you apply this information

619
00:31:33,480 --> 00:31:35,500
that we have gathered today?

620
00:31:35,500 --> 00:31:36,962
Now hold that thought.

621
00:31:36,962 --> 00:31:38,160
Let me put up a question

622
00:31:38,160 --> 00:31:41,060
or a set of questions
actually in front of you.

623
00:31:41,060 --> 00:31:44,820
For example how long does it
take for you to track an event

624
00:31:44,820 --> 00:31:46,263
to a particular resource?

625
00:31:47,280 --> 00:31:50,139
What controls does your
compliance require?

626
00:31:50,140 --> 00:31:52,050
What are the data points that you need?

627
00:31:52,050 --> 00:31:54,393
How complex is an infrastructure?

628
00:31:56,510 --> 00:31:59,210
Let me put up another set of questions.

629
00:31:59,210 --> 00:32:02,410
Do you already have an
alerting logging mechanism

630
00:32:02,410 --> 00:32:05,530
and an artifactory as first-class citizens

631
00:32:05,530 --> 00:32:06,680
in your infrastructure?

632
00:32:07,990 --> 00:32:09,770
How many endpoint controls do you have

633
00:32:09,770 --> 00:32:12,280
and how many of them are redundant?

634
00:32:12,280 --> 00:32:14,129
And how visible are your servers?

635
00:32:14,130 --> 00:32:18,840
Which means do you know what
is running on your endpoints

636
00:32:18,840 --> 00:32:20,689
and who is running them?

637
00:32:20,690 --> 00:32:23,050
If you're familiar with
the first set of questions

638
00:32:23,050 --> 00:32:25,360
and have answers to the
second set of questions

639
00:32:25,360 --> 00:32:27,719
you can apply, or even build
upon the audit framework

640
00:32:27,720 --> 00:32:28,993
for your infrastructure.

641
00:32:32,990 --> 00:32:34,860
Details about the projects can be found

642
00:32:34,860 --> 00:32:37,659
in the open osquery
organization or at github.

643
00:32:37,660 --> 00:32:38,770
It has a bunch of repository

644
00:32:38,770 --> 00:32:40,060
and it has all of the information

645
00:32:40,060 --> 00:32:42,020
that we have presented today.

646
00:32:42,020 --> 00:32:44,690
And feel free to check it out.

647
00:32:44,690 --> 00:32:47,320
Also, it's a work in progress repository.

648
00:32:47,320 --> 00:32:50,419
So keep an eye for updates.

649
00:32:50,420 --> 00:32:53,510
And we're always happy to have you onboard

650
00:32:53,510 --> 00:32:55,840
and with your contributions.

651
00:32:55,840 --> 00:32:56,673
Thank you.

