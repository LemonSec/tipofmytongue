1
00:00:01,290 --> 00:00:03,510
- Thank you very much
for attending my talk,

2
00:00:03,510 --> 00:00:04,343
WAF Made Easy.

3
00:00:04,343 --> 00:00:05,720
My name is Micah K. Brown.

4
00:00:05,720 --> 00:00:09,450
Today I'm representing the
greater Cincinnati ISSA chapter,

5
00:00:09,450 --> 00:00:13,152
in my own experiences as an
IT Security Practitioner.

6
00:00:14,630 --> 00:00:17,367
With that being said, I
encourage you to go through

7
00:00:17,367 --> 00:00:20,040
and to ask any questions in chat.

8
00:00:20,040 --> 00:00:23,830
I will be in chat and would
love to respond to you.

9
00:00:23,830 --> 00:00:26,360
Today, we're going to
talk about what is a WAF?

10
00:00:26,360 --> 00:00:27,192
We're going to talk

11
00:00:27,193 --> 00:00:30,140
about the build, tune,
support methodology.

12
00:00:30,140 --> 00:00:31,063
We're going to talk about the team

13
00:00:31,063 --> 00:00:32,780
that you're going to need to go through

14
00:00:32,780 --> 00:00:34,680
and assemble to successfully
deploy your WAFs,

15
00:00:34,680 --> 00:00:38,147
we're going to go in depth
on the build, the tune,

16
00:00:38,147 --> 00:00:40,540
and the support phases of this model.

17
00:00:40,540 --> 00:00:42,810
And then we're going to talk
about architectural decisions

18
00:00:42,810 --> 00:00:44,270
that you are going to need to make

19
00:00:44,270 --> 00:00:45,570
based on your environment.

20
00:00:46,910 --> 00:00:50,849
So, what is a Web Application Firewall?

21
00:00:50,850 --> 00:00:53,540
I'm not going to read to
you the Wikipedia definition

22
00:00:53,540 --> 00:00:55,330
of a Web Application Firewall.

23
00:00:55,330 --> 00:00:58,650
To me, a Web Application
Firewall is quite simply

24
00:00:58,650 --> 00:01:02,760
a compute device that sits
between your end-users

25
00:01:02,760 --> 00:01:05,269
as well as your web applications.

26
00:01:05,269 --> 00:01:06,539
The Web Application Firewall

27
00:01:06,540 --> 00:01:09,000
is going to examine traffic, decrypt it,

28
00:01:09,000 --> 00:01:11,640
compare it against
policies and make permit,

29
00:01:11,640 --> 00:01:15,680
deny, alert decisions, on
that web traffic for you.

30
00:01:15,680 --> 00:01:17,700
So right here is a quick visualization,

31
00:01:17,700 --> 00:01:20,730
in this case, I'm showing
a production environment

32
00:01:20,730 --> 00:01:22,560
that has high availability,

33
00:01:22,560 --> 00:01:24,020
you'll notice that the load balancer,

34
00:01:24,020 --> 00:01:28,460
is logically holding the
IP address, ADA, ADA, ADA.

35
00:01:28,460 --> 00:01:30,699
So when our user builds through

36
00:01:30,700 --> 00:01:34,960
and does a DNS lookup
on our web application,

37
00:01:34,960 --> 00:01:36,440
they're going to be returned

38
00:01:36,440 --> 00:01:38,730
the IP address of our load balance

39
00:01:38,730 --> 00:01:41,920
and the load balance also is
going to receive that request,

40
00:01:41,920 --> 00:01:43,750
and they're going to choose which WAF

41
00:01:43,750 --> 00:01:44,670
they're going to go through

42
00:01:44,670 --> 00:01:47,410
and they're going to send that traffic to.

43
00:01:47,410 --> 00:01:51,210
At that point, a TLS connection
is going to go through

44
00:01:51,210 --> 00:01:54,640
and be created between the user's browser

45
00:01:54,640 --> 00:01:56,740
and our Web Application Firewall.

46
00:01:56,740 --> 00:02:00,640
Once web traffic hits our
Web Application Firewall,

47
00:02:00,640 --> 00:02:03,520
the WAF is going to go through
and it's going to decrypt it.

48
00:02:03,520 --> 00:02:07,140
It's going to go through
and look at that traffic.

49
00:02:07,140 --> 00:02:09,850
It's going to process
it against the policy

50
00:02:09,850 --> 00:02:12,640
make a permit, deny alert decision.

51
00:02:12,640 --> 00:02:15,320
And if it's allowed, it's
going to re encrypt it

52
00:02:15,320 --> 00:02:18,602
the TLS connection to our
front end web servers.

53
00:02:19,760 --> 00:02:21,290
So, let's talk a bit

54
00:02:21,290 --> 00:02:23,722
about the build, tune,
support methodology.

55
00:02:24,670 --> 00:02:27,769
So when I started the Web
Application Firewall project,

56
00:02:27,770 --> 00:02:32,270
this was one of the hardest
projects that I ever worked on.

57
00:02:32,270 --> 00:02:34,860
You see my path into IT
security was very standard

58
00:02:34,860 --> 00:02:36,360
for someone of my age.

59
00:02:36,360 --> 00:02:37,760
I started out as a help desk

60
00:02:37,760 --> 00:02:40,109
then moved into a server admin role,

61
00:02:40,110 --> 00:02:42,580
then moved into a networking admin role

62
00:02:42,580 --> 00:02:43,760
before formally becoming

63
00:02:43,760 --> 00:02:47,140
part of an IT security
architecture and engineering team.

64
00:02:47,140 --> 00:02:50,200
And when I got brought
on to the WAF project,

65
00:02:50,200 --> 00:02:52,459
I acknowledged that I was really strong

66
00:02:52,460 --> 00:02:57,060
in traditional IT security,
traditional networking

67
00:02:57,060 --> 00:02:59,180
traditional IT architecture,

68
00:02:59,180 --> 00:03:04,180
but where I was weakest, was
in application development.

69
00:03:04,420 --> 00:03:06,609
Likewise, I had another member

70
00:03:06,610 --> 00:03:08,660
of my architecture and engineering team

71
00:03:08,660 --> 00:03:11,299
where he came to IT security

72
00:03:11,300 --> 00:03:13,430
through application development.

73
00:03:13,430 --> 00:03:17,410
And that meant that he
really understood DevSecOps,

74
00:03:17,410 --> 00:03:20,650
application security and
where he struggled the most,

75
00:03:20,650 --> 00:03:23,970
was in traditional IT
architecture networking

76
00:03:23,970 --> 00:03:26,030
the things it was strongest then.

77
00:03:26,030 --> 00:03:29,760
So, I started to reevaluate
instead of going through

78
00:03:29,760 --> 00:03:33,980
and having Micah be responsible
for applications A, B and C,

79
00:03:33,980 --> 00:03:38,010
and my colleague being
responsible for D, E and F,

80
00:03:38,010 --> 00:03:39,720
I started to reimagine

81
00:03:39,720 --> 00:03:42,520
what if we played to our strong suits?

82
00:03:42,520 --> 00:03:44,480
So I went through and I came up

83
00:03:44,480 --> 00:03:47,380
with the build, tune, support model

84
00:03:47,380 --> 00:03:49,210
that I sold to our management.

85
00:03:49,210 --> 00:03:51,460
And the goal of this model was to set

86
00:03:51,460 --> 00:03:52,960
both of us up to success,

87
00:03:52,960 --> 00:03:54,440
to make sure that we were going through

88
00:03:54,440 --> 00:03:56,500
and working on the part of the project

89
00:03:56,500 --> 00:04:00,120
where we could give the most
value back to the business.

90
00:04:00,120 --> 00:04:02,080
Now, I know this height is really cramped

91
00:04:02,080 --> 00:04:03,560
and if you are interested

92
00:04:03,560 --> 00:04:06,020
in this build tune support methodology,

93
00:04:06,020 --> 00:04:09,120
I suggest that you go through
simply download the slides

94
00:04:09,120 --> 00:04:12,210
and please feel free to
reach out with any questions.

95
00:04:12,210 --> 00:04:15,600
But the idea is, is that
you assign a resource

96
00:04:15,600 --> 00:04:19,529
to either build, the
tune or the support team

97
00:04:19,529 --> 00:04:23,429
and you start at the bottom
and you build your way up.

98
00:04:23,430 --> 00:04:26,520
And once you reach the
top of a certain phase

99
00:04:26,520 --> 00:04:30,010
that WAF is going to
transition to the next phase.

100
00:04:30,010 --> 00:04:32,580
And so we're are going to go through

101
00:04:32,580 --> 00:04:36,260
and talk about some of the
biggest challenges in my mind.

102
00:04:36,260 --> 00:04:40,159
One of the biggest challenges
of a WAF infrastructure,

103
00:04:40,160 --> 00:04:43,820
is that they have a very
high total cost of ownership.

104
00:04:43,820 --> 00:04:44,790
We're going to have to go through it

105
00:04:44,790 --> 00:04:47,540
and overcome fear, uncertainty, and doubt.

106
00:04:47,540 --> 00:04:50,770
Remember, many of our
organizations go through

107
00:04:50,770 --> 00:04:54,539
and monetize our App Dev folks,

108
00:04:54,540 --> 00:04:57,500
by measurements of things
like system uptime,

109
00:04:57,500 --> 00:04:59,150
like availability.

110
00:04:59,150 --> 00:05:01,810
So, when we as IT security say that,

111
00:05:01,810 --> 00:05:05,380
we're going to put a
device that is explicitly

112
00:05:05,380 --> 00:05:09,330
designed to go through
in to block your traffic,

113
00:05:09,330 --> 00:05:12,010
if it is thought to be malicious

114
00:05:12,010 --> 00:05:15,150
the thought is what if it
accidentally goes through

115
00:05:15,150 --> 00:05:17,219
and marks legitimate traffic as malicious

116
00:05:17,220 --> 00:05:19,020
and trust me, it will at some time.

117
00:05:19,020 --> 00:05:23,469
It's just an unfortunate
consequence of the technology.

118
00:05:23,470 --> 00:05:27,160
We need to clearly define what a post SDLC

119
00:05:27,160 --> 00:05:28,720
of a web application is,

120
00:05:28,720 --> 00:05:31,460
once it is being protected by a WAF.

121
00:05:31,460 --> 00:05:32,500
Of course we could go through

122
00:05:32,500 --> 00:05:34,970
and we could have potential overlaps

123
00:05:34,970 --> 00:05:38,680
with work already done
in the App Dev pipeline.

124
00:05:38,680 --> 00:05:41,740
We're going to ensure that
we have support interest

125
00:05:41,740 --> 00:05:43,900
from the application dev team.

126
00:05:43,900 --> 00:05:45,690
One thing that really went through

127
00:05:45,690 --> 00:05:47,140
and caught me off guard,

128
00:05:47,140 --> 00:05:52,140
is that I've not all environments
were feature identical.

129
00:05:52,150 --> 00:05:55,349
And so that caused us to reevaluate

130
00:05:55,350 --> 00:05:56,580
some of the decisions around

131
00:05:56,580 --> 00:05:58,667
where do we WAFs and how do we go through

132
00:05:58,667 --> 00:06:00,700
and support a specific web application.

133
00:06:00,700 --> 00:06:02,099
We'll talk about that.

134
00:06:02,100 --> 00:06:04,780
And then we went through and had to decide

135
00:06:04,780 --> 00:06:06,299
how are we going to intercept traffic?

136
00:06:06,300 --> 00:06:09,980
Now, generally you can
intercept web traffic via DNS

137
00:06:09,980 --> 00:06:13,470
or going through and inspecting
a certain network segment

138
00:06:13,470 --> 00:06:16,370
of traffic much like you
would do with an IPS.

139
00:06:16,370 --> 00:06:20,940
Personally, I prefer DNS and
every WAF that I rolled out,

140
00:06:20,940 --> 00:06:23,203
was done during or via DNS.

141
00:06:24,150 --> 00:06:26,539
So now let's go through
and let's talk about

142
00:06:26,540 --> 00:06:29,070
the team you're going to need to assemble

143
00:06:29,070 --> 00:06:31,610
in order to go through and to successfully

144
00:06:31,610 --> 00:06:32,773
deploy your WAFs.

145
00:06:33,890 --> 00:06:37,610
So, ironically on team WAF,
as I jokingly called it

146
00:06:37,610 --> 00:06:39,040
we're going to need a bit of resources.

147
00:06:39,040 --> 00:06:40,170
That's going to be someone like me

148
00:06:40,170 --> 00:06:42,965
someone that really understands
traditional networking

149
00:06:42,965 --> 00:06:45,369
IT architecture, cloud architecture.

150
00:06:45,370 --> 00:06:48,030
And what's really important
is how do you go through

151
00:06:48,030 --> 00:06:51,090
and how do you bring in new technology

152
00:06:51,090 --> 00:06:55,070
new compute devices into your environment?

153
00:06:55,070 --> 00:06:57,159
Then you're going to need tune resources.

154
00:06:57,160 --> 00:07:00,640
Now these need to be people
that have a strong understanding

155
00:07:00,640 --> 00:07:03,849
of application development,
application security

156
00:07:03,850 --> 00:07:06,870
and common App Dev vulnerabilities.

157
00:07:06,870 --> 00:07:09,250
And then you're going to
need some support resources.

158
00:07:09,250 --> 00:07:10,600
The people that are going to go through

159
00:07:10,600 --> 00:07:12,510
and make sure that these devices run

160
00:07:12,510 --> 00:07:14,880
as they were designed,
as they were implemented.

161
00:07:14,880 --> 00:07:16,100
And they're really going to go through

162
00:07:16,100 --> 00:07:19,820
and need to have a mix of both the build,

163
00:07:19,820 --> 00:07:21,783
and the tune support system.

164
00:07:22,700 --> 00:07:23,533
On team application,

165
00:07:23,533 --> 00:07:25,710
we're going to need to
define an application owner.

166
00:07:25,710 --> 00:07:29,739
Generally the application
owner is going to be a manager

167
00:07:29,740 --> 00:07:31,700
or an architect of the application.

168
00:07:31,700 --> 00:07:34,099
This is traditionally
going to be the person

169
00:07:34,100 --> 00:07:36,870
that the business is
going to hold accountable

170
00:07:36,870 --> 00:07:39,740
for the uptime of that web environment.

171
00:07:39,740 --> 00:07:40,950
They're also going to go through

172
00:07:40,950 --> 00:07:43,170
and play a critical role of approving

173
00:07:43,170 --> 00:07:46,460
every time we move from
phase to phase to phase

174
00:07:46,460 --> 00:07:48,890
within the build tune support model.

175
00:07:48,890 --> 00:07:52,060
Next, we're going to need
our web app developers.

176
00:07:52,060 --> 00:07:53,060
Now, generally you're going to wanna

177
00:07:53,060 --> 00:07:56,380
to have more senior developers
that fully understand

178
00:07:56,380 --> 00:07:59,520
the web application that
you're deploying to,

179
00:07:59,520 --> 00:08:01,020
that they understand the architecture,

180
00:08:01,020 --> 00:08:03,549
the intentions and the future roadmap.

181
00:08:03,550 --> 00:08:05,370
We went through and were able to build

182
00:08:05,370 --> 00:08:07,180
a lot of trust with them

183
00:08:07,180 --> 00:08:10,300
by creating a custom role within each WAF

184
00:08:10,300 --> 00:08:11,550
where they could log in

185
00:08:11,550 --> 00:08:13,550
and they could see the customized alerts

186
00:08:13,550 --> 00:08:16,040
the learning suggestions,
as well as the performance.

187
00:08:16,040 --> 00:08:17,640
That way, if they're seeing something

188
00:08:17,640 --> 00:08:21,320
within the web application
that is very weird,

189
00:08:21,320 --> 00:08:24,050
they can simply log in
and they can quickly tell

190
00:08:24,050 --> 00:08:26,310
does this look to be something

191
00:08:26,310 --> 00:08:28,270
that the WAF is involved with?

192
00:08:28,270 --> 00:08:29,799
And if so, they can reach right out to.

193
00:08:29,800 --> 00:08:34,090
They can quickly pivot to
another troubleshooting strategy.

194
00:08:34,090 --> 00:08:36,380
Next, we need testers.

195
00:08:36,380 --> 00:08:39,610
And we need a combination of automatic

196
00:08:39,610 --> 00:08:42,510
as well as human testing.

197
00:08:42,510 --> 00:08:43,990
When it comes to testing

198
00:08:43,990 --> 00:08:48,620
you need both volume of traffic
and diversity of traffic.

199
00:08:48,620 --> 00:08:50,400
So with that, let's go through

200
00:08:50,400 --> 00:08:52,263
and let's dive into the build phase.

201
00:08:54,100 --> 00:08:55,920
So, the first in the build phase,

202
00:08:55,920 --> 00:08:57,217
is establishing our architecture.

203
00:08:57,217 --> 00:09:01,020
So we need to clearly and definitively

204
00:09:01,020 --> 00:09:04,329
define roles and responsibilities
both for IT security,

205
00:09:04,330 --> 00:09:06,850
as well as our application developers.

206
00:09:06,850 --> 00:09:09,460
We need to learn how
Web Apps are developed,

207
00:09:09,460 --> 00:09:12,440
and maintained within our environment.

208
00:09:12,440 --> 00:09:13,560
Then we can go through

209
00:09:13,560 --> 00:09:16,880
and we can define our
individual WAF architecture.

210
00:09:16,880 --> 00:09:19,130
We can include things

211
00:09:19,130 --> 00:09:22,640
like centralized management,
logging, and licensing.

212
00:09:22,640 --> 00:09:25,160
And one of the biggest
successes that we had

213
00:09:25,160 --> 00:09:29,160
is for every environment that
we've deployed a WAF into,

214
00:09:29,160 --> 00:09:31,949
we created a WAF implementation guide

215
00:09:31,950 --> 00:09:34,987
and we included all of the findings

216
00:09:34,987 --> 00:09:38,100
from the architecture phase
into the implementation guide.

217
00:09:38,100 --> 00:09:40,320
Quite frankly the implementation guide

218
00:09:40,320 --> 00:09:43,430
was a customized blueprint per environment

219
00:09:43,430 --> 00:09:45,709
that clearly and concisely went through

220
00:09:45,710 --> 00:09:49,237
and defined exactly how we
were going to go through

221
00:09:49,237 --> 00:09:50,760
and to deploy a WAF

222
00:09:50,760 --> 00:09:53,050
and it was meant to be used as part

223
00:09:53,050 --> 00:09:56,250
of the build process
where I played a big role,

224
00:09:56,250 --> 00:09:59,250
as well as to help the
tune resources go through

225
00:09:59,250 --> 00:10:00,300
and understand how

226
00:10:00,300 --> 00:10:03,040
the Web Application Firewall was deployed.

227
00:10:03,040 --> 00:10:06,020
And even how the support
team can go through

228
00:10:06,020 --> 00:10:07,668
and quickly bring a resource

229
00:10:07,668 --> 00:10:10,620
up to speed on a particular environment.

230
00:10:10,620 --> 00:10:12,950
It also had a great benefit in that

231
00:10:12,950 --> 00:10:15,790
if an auditor work to a question,

232
00:10:15,790 --> 00:10:17,230
how are you WAF set up?

233
00:10:17,230 --> 00:10:19,300
We can just hand them
the implementation guide

234
00:10:19,300 --> 00:10:21,603
and they could understand
in great lengths.

235
00:10:23,020 --> 00:10:25,579
Then we move into the
plan and design phase.

236
00:10:25,580 --> 00:10:26,920
So this is where we start to work

237
00:10:26,920 --> 00:10:29,089
with the App Devs and the App Owner

238
00:10:29,090 --> 00:10:33,070
to understand how that
particular application worked.

239
00:10:33,070 --> 00:10:36,180
We would start out with asking for a quick

240
00:10:36,180 --> 00:10:39,079
two-pager just the basic
who, what, where, when, why,

241
00:10:39,080 --> 00:10:41,850
how of their web application?

242
00:10:41,850 --> 00:10:43,480
What type of data they store?

243
00:10:43,480 --> 00:10:45,010
Where they store it?

244
00:10:45,010 --> 00:10:48,840
And we'd also ask for things
like a network diagram

245
00:10:48,840 --> 00:10:50,810
and a data flow diagram.

246
00:10:50,810 --> 00:10:52,410
Then, we'd get on a call with them

247
00:10:52,410 --> 00:10:55,610
and we'd flush out any questions
that we had based on that.

248
00:10:55,610 --> 00:10:58,550
And collaboratively, we
would start to work out

249
00:10:58,550 --> 00:11:01,120
that customized implementation guide.

250
00:11:01,120 --> 00:11:03,670
We went through and these
quickly spelled out.

251
00:11:03,670 --> 00:11:05,959
Here's we also understand
your current status.

252
00:11:05,960 --> 00:11:08,930
Here's what we believe a
WAF in your environment

253
00:11:08,930 --> 00:11:11,020
would look like from a high level included

254
00:11:11,020 --> 00:11:15,500
updated network diagram,
updated data flow diagram.

255
00:11:15,500 --> 00:11:17,630
Then we went through and we built up

256
00:11:17,630 --> 00:11:20,160
a very detailed section for the build,

257
00:11:20,160 --> 00:11:21,670
the tune and the support phase.

258
00:11:21,670 --> 00:11:24,920
And this had a great amount of detail,

259
00:11:24,920 --> 00:11:28,079
what to expect that every step of the way

260
00:11:28,080 --> 00:11:29,570
we would go through and we'd have places

261
00:11:29,570 --> 00:11:32,380
where customized configuration on the WAF,

262
00:11:32,380 --> 00:11:35,910
we've clearly spell out
roles and responsibilities

263
00:11:35,910 --> 00:11:38,089
for parties at each step of the way.

264
00:11:38,090 --> 00:11:41,810
We'd highlight processes, procedures, SLAs

265
00:11:41,810 --> 00:11:43,439
and where we could,

266
00:11:43,440 --> 00:11:46,270
we would go through on
heavily document with visuals

267
00:11:46,270 --> 00:11:50,550
because that really helps go
through and explain things.

268
00:11:50,550 --> 00:11:53,740
Then, we would eventually get the approval

269
00:11:53,740 --> 00:11:55,720
of the App Owner and the App Devs

270
00:11:55,720 --> 00:11:58,130
Yes, we feel comfortable with this plan,

271
00:11:58,130 --> 00:12:00,230
let's go execute.

272
00:12:00,230 --> 00:12:01,940
Next we get to the fun part.

273
00:12:01,940 --> 00:12:02,773
The cold build.

274
00:12:02,773 --> 00:12:06,640
The cold build goes through
and encompasses everything

275
00:12:06,640 --> 00:12:08,660
from initially turning on a WAF,

276
00:12:08,660 --> 00:12:11,030
building out the initial security policy

277
00:12:11,030 --> 00:12:13,380
and then any customizations needed

278
00:12:13,380 --> 00:12:16,003
for the specific web application firewall.

279
00:12:17,280 --> 00:12:21,230
Then, once we finished that process,

280
00:12:21,230 --> 00:12:22,840
I'd go through and reach out to the tune,

281
00:12:22,840 --> 00:12:23,730
the App Dev and testing

282
00:12:23,730 --> 00:12:27,210
and ask them to leverage
host file redirection

283
00:12:27,210 --> 00:12:29,880
so that all the web traffic to our app

284
00:12:29,880 --> 00:12:33,430
would naturally flow through
the Web Application Firewall.

285
00:12:33,430 --> 00:12:35,410
At that point,

286
00:12:35,410 --> 00:12:38,060
the tuning resource would look
at the learning suggestions,

287
00:12:38,060 --> 00:12:41,670
the alerts and escalate
any decisions to App Dev

288
00:12:41,670 --> 00:12:44,099
if we needed a little
bit of help to understand

289
00:12:44,100 --> 00:12:45,080
was this normal,

290
00:12:45,080 --> 00:12:48,113
was this abnormal and make
permit denied decisions.

291
00:12:49,520 --> 00:12:52,480
At some point, your App Devs

292
00:12:52,480 --> 00:12:54,510
your tuning resource are
going to feel comfortable.

293
00:12:54,510 --> 00:12:58,180
Yes, we are safe to put the actual WAF

294
00:12:58,180 --> 00:13:00,479
inline of live traffic.

295
00:13:00,480 --> 00:13:02,480
Once we feel competent, we go through

296
00:13:02,480 --> 00:13:05,030
we get the approval of the App Owner,

297
00:13:05,030 --> 00:13:06,370
we get the needed dates

298
00:13:06,370 --> 00:13:07,990
we procure the needed resources

299
00:13:07,990 --> 00:13:10,360
we submit the need of change controls

300
00:13:10,360 --> 00:13:13,700
and follow our normal processes.

301
00:13:13,700 --> 00:13:17,850
Now, in my setting, I do not
have ownership of the DNS.

302
00:13:17,850 --> 00:13:22,030
And we use DNS to go through
and to push out every one

303
00:13:22,030 --> 00:13:26,459
of our WAFs in terms of how
do we capture the traffic.

304
00:13:26,460 --> 00:13:28,250
So, when I joined a bridge call,

305
00:13:28,250 --> 00:13:29,083
it was kind of simple

306
00:13:29,083 --> 00:13:30,060
I was kind of the coach.

307
00:13:30,060 --> 00:13:33,180
I'd start the bridge call,

308
00:13:33,180 --> 00:13:36,170
I'd ask for a go, no go decision.

309
00:13:36,170 --> 00:13:38,233
If we were go, I'd asked the DNS team

310
00:13:38,233 --> 00:13:40,560
can you please change the DNS resources?

311
00:13:40,560 --> 00:13:42,189
We'd wait until that replicate,

312
00:13:42,190 --> 00:13:45,000
I'd validate that both
on a corporate machine

313
00:13:45,000 --> 00:13:46,930
as well as a personal device

314
00:13:46,930 --> 00:13:51,540
I then asked the person that
owned the access control list

315
00:13:51,540 --> 00:13:54,910
for the web servers to
restrict the actual access

316
00:13:54,910 --> 00:13:59,550
so that the web servers of the
application could only accept

317
00:13:59,550 --> 00:14:03,630
HTTPS from our Web Application Firewalls.

318
00:14:03,630 --> 00:14:06,260
Once that had been done,
I'd do a simple test.

319
00:14:06,260 --> 00:14:08,330
Can I hit the log on page?

320
00:14:08,330 --> 00:14:11,210
And if I was, I would then go through

321
00:14:11,210 --> 00:14:12,800
and I would ask our testers

322
00:14:12,800 --> 00:14:15,640
and our App Dev to
please start their tests.

323
00:14:15,640 --> 00:14:19,020
And usually they would
spend about an hour testing

324
00:14:19,020 --> 00:14:23,569
both normal as well as
niche functionality.

325
00:14:23,570 --> 00:14:25,970
Once this call was over,

326
00:14:25,970 --> 00:14:27,650
assuming that we were successful,

327
00:14:27,650 --> 00:14:28,930
two magical things happen.

328
00:14:28,930 --> 00:14:31,560
The first thing I handed the ownership

329
00:14:31,560 --> 00:14:35,410
of that WAF off to my tuning resource,

330
00:14:35,410 --> 00:14:38,860
as well as since we are
now inline of live traffic,

331
00:14:38,860 --> 00:14:42,341
we started our 24 seven
support of that environment.

332
00:14:42,341 --> 00:14:44,433
So let's dig into the tune phase.

333
00:14:45,780 --> 00:14:48,620
So, when we enter the tuning phase

334
00:14:48,620 --> 00:14:50,950
we are in transparent slash learning mode

335
00:14:50,950 --> 00:14:53,350
that means that as traffic
goes through the WAF

336
00:14:53,350 --> 00:14:57,590
it's being inspected via
policy and we don't block it.

337
00:14:57,590 --> 00:15:00,560
We alert if there's a violation of policy.

338
00:15:00,560 --> 00:15:03,640
So, it is critical to at least once a day

339
00:15:03,640 --> 00:15:05,140
have your tuning resource meet

340
00:15:05,140 --> 00:15:07,030
with the application developers

341
00:15:07,030 --> 00:15:08,270
so that you can go through

342
00:15:08,270 --> 00:15:12,480
and you can review the
learning suggestions or alerts

343
00:15:12,480 --> 00:15:17,480
and you can make finalized
permit, deny tuning decision.

344
00:15:17,490 --> 00:15:20,380
It is critical that you have both volume

345
00:15:20,380 --> 00:15:22,640
and diversity of traffic.

346
00:15:22,640 --> 00:15:26,069
Each block and alert needs to be reviewed.

347
00:15:26,070 --> 00:15:28,260
We fell into a trap in one environment

348
00:15:28,260 --> 00:15:31,439
where we prioritized
reviewing alerts based

349
00:15:31,440 --> 00:15:33,460
on the frequency that they happen.

350
00:15:33,460 --> 00:15:36,130
And so once we went into blocking mode

351
00:15:36,130 --> 00:15:39,990
even though 99.998 percent
of the traffic flowed clear,

352
00:15:39,990 --> 00:15:43,200
there were certain
functionalities of the website

353
00:15:43,200 --> 00:15:47,340
that only happened, once a
month, once every three months

354
00:15:47,340 --> 00:15:49,690
and we started to block a few of those

355
00:15:49,690 --> 00:15:53,390
and that gave us a
couple of bad impressions

356
00:15:53,390 --> 00:15:55,490
with our App Dev folks.

357
00:15:55,490 --> 00:15:57,370
And so we need to make sure

358
00:15:57,370 --> 00:16:00,250
that we're reviewing all traffic.

359
00:16:00,250 --> 00:16:02,760
We need to make sure that our testers

360
00:16:02,760 --> 00:16:04,760
are really going through and testing

361
00:16:04,760 --> 00:16:07,439
both core as well as niche functionality

362
00:16:07,440 --> 00:16:09,630
that is so critical.

363
00:16:09,630 --> 00:16:13,180
Now, as you go through the initial tuning,

364
00:16:13,180 --> 00:16:15,079
you're going to get a
lot of alerts at start,

365
00:16:15,080 --> 00:16:16,470
but very rapidly,

366
00:16:16,470 --> 00:16:17,890
you're going to go
through and you're going

367
00:16:17,890 --> 00:16:20,760
to see them descend until
where the tuning resource

368
00:16:20,760 --> 00:16:23,750
and the application developers
have high confidence

369
00:16:23,750 --> 00:16:25,550
that the application has been tuned.

370
00:16:26,390 --> 00:16:29,569
So in preparation for
entering the block mode,

371
00:16:29,570 --> 00:16:32,460
we would get the applications
owner to move forward

372
00:16:32,460 --> 00:16:35,250
We'd attain a date book
of the needed resources

373
00:16:35,250 --> 00:16:37,120
and submit the change control.

374
00:16:37,120 --> 00:16:38,800
Once again, we used a bridge call

375
00:16:38,800 --> 00:16:40,560
to go through and to define this.

376
00:16:40,560 --> 00:16:42,359
And it was a very simple bridge call.

377
00:16:42,360 --> 00:16:44,800
The tuning resource
would simply go through,

378
00:16:44,800 --> 00:16:46,010
open with a go no-go.

379
00:16:46,010 --> 00:16:48,740
If go, you would log into the WAF,

380
00:16:48,740 --> 00:16:50,880
you take one to two minutes,
you'd set it the blocking.

381
00:16:50,880 --> 00:16:52,750
And then once we set the blocking

382
00:16:52,750 --> 00:16:55,750
you'd throw a specially
crafted benign URL.

383
00:16:55,750 --> 00:16:57,490
And if we got the black screen,

384
00:16:57,490 --> 00:16:59,770
you would turn over the environment

385
00:16:59,770 --> 00:17:02,646
to the application developers
and testers to go through

386
00:17:02,647 --> 00:17:05,140
and to test and see if
there were any issues

387
00:17:05,140 --> 00:17:06,500
that they could find.

388
00:17:06,500 --> 00:17:08,220
This went very well

389
00:17:08,220 --> 00:17:10,480
once again, about an
hour's worth of testing

390
00:17:10,480 --> 00:17:12,510
and we closed the meeting.

391
00:17:12,510 --> 00:17:14,170
Once the meeting was closed,

392
00:17:14,170 --> 00:17:17,050
we wanted to make sure that
we were handed over WAFs

393
00:17:17,050 --> 00:17:19,970
to our support team that
were of high integrity.

394
00:17:19,970 --> 00:17:21,480
So what we would do,

395
00:17:21,480 --> 00:17:25,640
is we had quite simply go
through and hold the WAFs

396
00:17:25,640 --> 00:17:28,850
in the tune phase for
a period of hypercare.

397
00:17:28,850 --> 00:17:33,139
We defined that as one
week with no escalations

398
00:17:33,140 --> 00:17:35,610
no changes to policy that were made

399
00:17:35,610 --> 00:17:39,919
outside of standard
change control process.

400
00:17:39,920 --> 00:17:42,080
With that being said, let's
move to the support team.

401
00:17:42,080 --> 00:17:44,159
So as we were building these WAFs,

402
00:17:44,160 --> 00:17:45,980
as we were tuning these WAFs,

403
00:17:45,980 --> 00:17:47,320
our support team was going through

404
00:17:47,320 --> 00:17:49,270
and defining here's how we are going

405
00:17:49,270 --> 00:17:51,040
to support these WAFs.

406
00:17:51,040 --> 00:17:52,159
So of course, we need to be able

407
00:17:52,160 --> 00:17:54,340
to support day in, day out support.

408
00:17:54,340 --> 00:17:55,750
I'm a huge fan of start a day,

409
00:17:55,750 --> 00:17:58,740
start a week, start a month procedures.

410
00:17:58,740 --> 00:18:01,870
We need to make sure that
we are regularly reviewing

411
00:18:01,870 --> 00:18:04,590
the learning suggestions,
the alerts, and escalating

412
00:18:04,590 --> 00:18:07,310
to App Dev anything that
we have a question about.

413
00:18:07,310 --> 00:18:10,510
Of course, we need to
support any move and changes.

414
00:18:10,510 --> 00:18:12,550
We need to be available
for troubleshooting

415
00:18:12,550 --> 00:18:14,180
and performance testing.

416
00:18:14,180 --> 00:18:17,810
Of course, patching is critical
on these types of devices

417
00:18:17,810 --> 00:18:20,320
and documentation is ongoing.

418
00:18:20,320 --> 00:18:22,179
Likewise, we need to make sure

419
00:18:22,180 --> 00:18:24,640
that we are training
our team appropriately

420
00:18:24,640 --> 00:18:27,573
and setting our support
resources up for success.

421
00:18:28,470 --> 00:18:30,603
Now, let's talk about the architecture.

422
00:18:31,470 --> 00:18:33,570
For on premise considerations,

423
00:18:33,570 --> 00:18:36,080
are we going to use physical
or are we going to use virtual?

424
00:18:36,080 --> 00:18:37,860
All of the 30 WAFs that I deployed

425
00:18:37,860 --> 00:18:40,919
within 90 days were virtual machines.

426
00:18:40,920 --> 00:18:42,850
And they had a lot of benefits

427
00:18:42,850 --> 00:18:44,760
for them being virtual easy to spin up,

428
00:18:44,760 --> 00:18:47,840
but probably the best one
in my personal opinion,

429
00:18:47,840 --> 00:18:50,129
is the ability to snapshot them

430
00:18:50,130 --> 00:18:53,650
before a major change
before a system patch.

431
00:18:53,650 --> 00:18:56,260
Next, how are we going
to intercept traffic?

432
00:18:56,260 --> 00:18:58,840
Well, I'm a big fan of DNS

433
00:18:58,840 --> 00:19:01,840
and we use DNS for all of our WAFs.

434
00:19:01,840 --> 00:19:03,610
Of course the management port should be

435
00:19:03,610 --> 00:19:06,179
on an internal protected VLAN.

436
00:19:06,180 --> 00:19:08,640
And once an application is protected

437
00:19:08,640 --> 00:19:10,420
by a Web Application Firewall,

438
00:19:10,420 --> 00:19:13,140
we need to make sure that
our front end web servers

439
00:19:13,140 --> 00:19:16,660
that they can only receive web requests

440
00:19:16,660 --> 00:19:19,480
from our Web Application Firewalls.

441
00:19:19,480 --> 00:19:23,110
And if one of your Web
Application Firewalls

442
00:19:23,110 --> 00:19:27,110
is going through and
exceeding excessive CPU

443
00:19:27,110 --> 00:19:29,490
memory compute utilization,

444
00:19:29,490 --> 00:19:30,647
there is an option to go through

445
00:19:30,647 --> 00:19:35,310
and to offload the
actual decryption of TLS

446
00:19:35,310 --> 00:19:38,409
to another type of product
such as a packet aggregator.

447
00:19:38,410 --> 00:19:41,963
So that is an option for
you especially on premise.

448
00:19:43,900 --> 00:19:46,080
And this is a general architecture drawing

449
00:19:46,080 --> 00:19:49,220
of what our on premises
looked at from a high level.

450
00:19:49,220 --> 00:19:52,070
As you can see, once again,
we've had a load balancer

451
00:19:52,070 --> 00:19:55,020
in front of the first two production WAFs.

452
00:19:55,020 --> 00:19:58,040
So logically, if we were to do a lookup

453
00:19:58,040 --> 00:20:00,460
we will be returned the IP address

454
00:20:00,460 --> 00:20:02,110
that is on the load balancer,

455
00:20:02,110 --> 00:20:04,169
ADA, ADA ADA ADA

456
00:20:04,170 --> 00:20:05,980
for the lower level environments,

457
00:20:05,980 --> 00:20:08,780
the public IP address
that would be returned

458
00:20:08,780 --> 00:20:11,379
is actually logically located

459
00:20:11,380 --> 00:20:13,753
on each of the WAFs themselves.

460
00:20:14,940 --> 00:20:16,759
So let's talk about cloud considerations.

461
00:20:16,759 --> 00:20:19,310
First, how are you going
to build these WAFs?

462
00:20:19,310 --> 00:20:20,250
Are you going to go through

463
00:20:20,250 --> 00:20:23,230
and build out your standard
cloud virtual image

464
00:20:23,230 --> 00:20:25,920
and then add the WAF
software on top of that?

465
00:20:25,920 --> 00:20:26,877
Or are you going to go through

466
00:20:26,877 --> 00:20:30,560
and use the custom application templates

467
00:20:30,560 --> 00:20:32,460
that are part of the cloud store?

468
00:20:32,460 --> 00:20:35,520
Of course you need to worry
about rules, laws, regulations

469
00:20:35,520 --> 00:20:38,030
especially data residency.

470
00:20:38,030 --> 00:20:41,740
I cannot support or
emphasize that, that much.

471
00:20:41,740 --> 00:20:44,010
Next, how are you going
to support multi-cloud?

472
00:20:44,010 --> 00:20:45,400
Are you going to do a hub and spoke

473
00:20:45,400 --> 00:20:48,360
where you go through and
deploy all of your asking

474
00:20:48,360 --> 00:20:50,419
to your preferred cloud container?

475
00:20:50,420 --> 00:20:53,030
And then you enable connections

476
00:20:53,030 --> 00:20:55,899
between other cloud environments?

477
00:20:55,900 --> 00:20:58,580
Now that could be done via
just rounding over the internet

478
00:20:58,580 --> 00:21:00,129
or that could be done through something

479
00:21:00,130 --> 00:21:02,616
like an IPsec tunnel,

480
00:21:02,616 --> 00:21:04,310
but how are you going to do that?

481
00:21:04,310 --> 00:21:07,190
Or do you simply go
through and do you deploy

482
00:21:07,190 --> 00:21:10,800
in the same cloud environment
as your web applications are

483
00:21:10,800 --> 00:21:14,379
which technically should be
a little bit less latency

484
00:21:14,380 --> 00:21:17,440
on your web connections and
that's what we chose to do.

485
00:21:17,440 --> 00:21:19,460
Once again, you have
the same consideration

486
00:21:19,460 --> 00:21:20,720
of how you're going to go through

487
00:21:20,720 --> 00:21:22,530
and how you're going to deploy?

488
00:21:22,530 --> 00:21:25,000
Personally, I like DNS.

489
00:21:25,000 --> 00:21:27,520
Of course, just like our on-prem,

490
00:21:27,520 --> 00:21:29,340
we need to protect our management ports

491
00:21:29,340 --> 00:21:32,100
we need to make sure that
we close the HCLs App

492
00:21:32,100 --> 00:21:36,629
for our web servers so that
after we put the WAF inline,

493
00:21:36,630 --> 00:21:39,330
you cannot bypass the actual WAF

494
00:21:39,330 --> 00:21:41,550
in order to reach the web application.

495
00:21:41,550 --> 00:21:44,720
And then once again, there
might be a valid reason

496
00:21:44,720 --> 00:21:48,060
for you to offload the
actual TLS decryption

497
00:21:48,060 --> 00:21:50,773
onto another device, such
as a packet aggregator.

498
00:21:52,410 --> 00:21:55,040
So, at first we went
through and we thought,

499
00:21:55,040 --> 00:21:57,240
why don't we just go through and replicate

500
00:21:57,240 --> 00:22:00,850
what we were doing in our
on-premise environment?

501
00:22:00,850 --> 00:22:03,129
And after thinking about
it for just a little bit

502
00:22:03,130 --> 00:22:06,144
we realized that in
the cloud environments,

503
00:22:06,144 --> 00:22:08,880
we are giving our application developers

504
00:22:08,880 --> 00:22:11,330
a whole lot more power,

505
00:22:11,330 --> 00:22:12,449
a whole lot more privilege

506
00:22:12,450 --> 00:22:15,830
in terms of what they can
and what they cannot do.

507
00:22:15,830 --> 00:22:18,990
And so we quickly discovered they could do

508
00:22:18,990 --> 00:22:21,850
things like juggle, which IPs are assigned

509
00:22:21,850 --> 00:22:24,639
to which devices, they
could build special maps,

510
00:22:24,640 --> 00:22:28,550
they could go through power
on and power off devices.

511
00:22:28,550 --> 00:22:30,360
And this was just something that

512
00:22:30,360 --> 00:22:33,419
from a risk perspective
we wanted to avoid.

513
00:22:33,420 --> 00:22:35,180
So instead what we did,

514
00:22:35,180 --> 00:22:38,450
is within the same cloud infrastructure,

515
00:22:38,450 --> 00:22:43,260
we set up a second container
right alongside next to them.

516
00:22:43,260 --> 00:22:46,590
And we retained full authority
over that cloud container.

517
00:22:46,590 --> 00:22:51,260
And they controlled their
entire cloud container.

518
00:22:51,260 --> 00:22:53,300
Now to move traffic between them,

519
00:22:53,300 --> 00:22:55,409
if you're in the same
cloud, that same environment

520
00:22:55,410 --> 00:22:58,220
you could just let local
cloud routing take care of it

521
00:22:58,220 --> 00:23:00,950
you could do something
like a VNET peering,

522
00:23:00,950 --> 00:23:04,180
you could do something like a VPN tunnel,

523
00:23:04,180 --> 00:23:06,470
that's up to your architectural decisions

524
00:23:06,470 --> 00:23:07,883
and your requirements.

525
00:23:09,210 --> 00:23:12,090
So, let's talk about policy.

526
00:23:12,090 --> 00:23:15,220
Within a single web environment,

527
00:23:15,220 --> 00:23:17,980
do we want to have one
policy to rule them all,

528
00:23:17,980 --> 00:23:21,470
the same policy on
tests on stage, on prod?

529
00:23:21,470 --> 00:23:23,520
And initially I thought, yes,

530
00:23:23,520 --> 00:23:26,250
but this is where we ran into issues

531
00:23:26,250 --> 00:23:28,110
that in a couple of our environments

532
00:23:29,390 --> 00:23:31,400
they were functionality different.

533
00:23:31,400 --> 00:23:34,700
And so that caused us to
pull out of some environments

534
00:23:34,700 --> 00:23:37,190
especially if they weren't
feature for feature.

535
00:23:37,190 --> 00:23:39,763
And that really took me back a little bit.

536
00:23:40,730 --> 00:23:43,010
Additionally, we need to pay
attention to cryptography.

537
00:23:43,010 --> 00:23:46,820
So, I went through and I
found in a couple environments

538
00:23:46,820 --> 00:23:49,830
that we were using generic
vendor supplied wildcards

539
00:23:49,830 --> 00:23:51,610
especially in the cloud.

540
00:23:51,610 --> 00:23:55,760
And so we had to switch them
over to our corporate CA.

541
00:23:55,760 --> 00:23:56,706
And of course we need to go through

542
00:23:56,707 --> 00:23:58,340
and we need to evaluate things

543
00:23:58,340 --> 00:24:01,173
like crypto strengthen
ciphers that we're allowing.

544
00:24:03,440 --> 00:24:04,523
Now granted.

545
00:24:05,430 --> 00:24:10,430
I had a very naive view of production

546
00:24:10,660 --> 00:24:14,040
coming into this environment.

547
00:24:14,040 --> 00:24:18,080
I used to think of production
as the now state of production

548
00:24:18,080 --> 00:24:21,409
where stage was the near
future state of production.

549
00:24:21,410 --> 00:24:24,170
And test was the future, future stage.

550
00:24:24,170 --> 00:24:27,570
After sitting in of
years of change control

551
00:24:27,570 --> 00:24:30,669
where I saw our DevOps promote bug fixes

552
00:24:30,670 --> 00:24:34,140
from test to stage, to dev, to prod.

553
00:24:34,140 --> 00:24:35,670
I figured that we were going to go through

554
00:24:35,670 --> 00:24:40,270
and have a very similar
rollout of our actual bugs

555
00:24:40,270 --> 00:24:42,800
that we find of the policy
configuration tweaks

556
00:24:42,800 --> 00:24:44,460
that we need to make on the WAF.

557
00:24:44,460 --> 00:24:46,140
This was not so.

558
00:24:46,140 --> 00:24:48,570
In fact, we found very quickly

559
00:24:48,570 --> 00:24:53,030
that a block could be thrown at any level.

560
00:24:53,030 --> 00:24:56,020
And as I dug into it with the developers

561
00:24:56,020 --> 00:24:58,830
it became fairly obvious that the reason

562
00:24:58,830 --> 00:25:00,350
that we were having this,

563
00:25:00,350 --> 00:25:03,809
was because we didn't have equal testing

564
00:25:03,809 --> 00:25:06,030
at all levels in the environment.

565
00:25:06,030 --> 00:25:10,320
In fact, everything below our stage

566
00:25:10,320 --> 00:25:12,750
really didn't have as rich

567
00:25:12,750 --> 00:25:17,470
and as polished testing
as we really needed.

568
00:25:17,470 --> 00:25:19,560
And so this is why I constantly harp

569
00:25:19,560 --> 00:25:21,990
that you need to have a mix of human

570
00:25:21,990 --> 00:25:25,850
and automated testing at all levels.

571
00:25:25,850 --> 00:25:27,020
And what we found was that,

572
00:25:27,020 --> 00:25:31,260
we needed a process in
order to do a policy push

573
00:25:31,260 --> 00:25:33,879
whether it was the expected bottom up,

574
00:25:33,880 --> 00:25:35,803
top down or middle out.

575
00:25:37,560 --> 00:25:40,550
So, on policy pushes, once again,

576
00:25:40,550 --> 00:25:42,430
volume and diversity of traffic

577
00:25:42,430 --> 00:25:44,940
is key in lower environments.

578
00:25:44,940 --> 00:25:47,130
You need to know, you need to think about,

579
00:25:47,130 --> 00:25:49,970
what is going to trigger a policy push?

580
00:25:49,970 --> 00:25:50,970
Is it time?

581
00:25:50,970 --> 00:25:52,000
Is the event?

582
00:25:52,000 --> 00:25:53,610
Is it criticality?

583
00:25:53,610 --> 00:25:56,560
And chances are it's
going to be all of them.

584
00:25:56,560 --> 00:25:58,169
All of those.

585
00:25:58,170 --> 00:26:00,350
When do you promote a learning suggestion

586
00:26:00,350 --> 00:26:01,820
based on deployments,

587
00:26:01,820 --> 00:26:04,060
do you tie into the new
normal deployment schedule

588
00:26:04,060 --> 00:26:05,360
as part of their deployments?

589
00:26:05,360 --> 00:26:07,139
Or do you go through

590
00:26:07,140 --> 00:26:11,840
and do you deploy your learning
suggestions a week early?

591
00:26:11,840 --> 00:26:13,909
That way you can reduce some confusion

592
00:26:13,910 --> 00:26:15,473
during the actual deployments.

593
00:26:16,680 --> 00:26:18,140
When demoting a policy

594
00:26:18,140 --> 00:26:20,550
from a higher environment
to a lower environment

595
00:26:20,550 --> 00:26:22,280
how do you ensure that that policy

596
00:26:22,280 --> 00:26:23,160
that you're going to go through

597
00:26:23,160 --> 00:26:25,860
and you're going to push
is going to be customized

598
00:26:25,860 --> 00:26:27,500
for that environment?

599
00:26:27,500 --> 00:26:30,300
Can you promote/demote a
single learning suggestion

600
00:26:30,300 --> 00:26:34,770
or do you go through and
promote/demote the entire policy?

601
00:26:34,770 --> 00:26:36,879
Do you have a mono policy that covered

602
00:26:36,880 --> 00:26:38,580
to the entire web application?

603
00:26:38,580 --> 00:26:39,939
I used to be in favor of that.

604
00:26:39,940 --> 00:26:44,070
However, we went through
and we quickly found out

605
00:26:44,070 --> 00:26:47,090
that there were certain
parts of our web application

606
00:26:47,090 --> 00:26:49,860
that acted really unique
to just that part.

607
00:26:49,860 --> 00:26:53,770
And we felt comfortable
unblocking certain functionality

608
00:26:53,770 --> 00:26:55,410
to just that part,

609
00:26:55,410 --> 00:26:56,810
but not the entire website

610
00:26:56,810 --> 00:26:58,679
that would just be a little too much risk.

611
00:26:58,680 --> 00:27:01,610
So we went through and we
created a microservice,

612
00:27:01,610 --> 00:27:02,870
or it might be called

613
00:27:02,870 --> 00:27:05,750
a parent slash child policy relationship

614
00:27:05,750 --> 00:27:08,420
but that really went through
and fixed up a lot of things.

615
00:27:08,420 --> 00:27:12,890
And finally, how do we
track moves/adds/changes?

616
00:27:12,890 --> 00:27:15,760
Not only to help us in case
we need to troubleshoot,

617
00:27:15,760 --> 00:27:19,940
but for the sake of that
internal audit comes to us.

618
00:27:19,940 --> 00:27:22,760
So, I know I've thrown a lot at,

619
00:27:22,760 --> 00:27:24,560
but what I'd like to challenge you

620
00:27:24,560 --> 00:27:26,810
that you should do within the next week

621
00:27:26,810 --> 00:27:29,300
is take an inventory of
your web applications

622
00:27:29,300 --> 00:27:31,320
and identify those web applications

623
00:27:31,320 --> 00:27:34,470
that you feel could
benefit from the enhanced

624
00:27:34,470 --> 00:27:36,740
security controls a WAF can provide.

625
00:27:36,740 --> 00:27:38,660
I challenge you to map out a project team

626
00:27:38,660 --> 00:27:41,750
to establish both scope and justification

627
00:27:41,750 --> 00:27:43,053
for a WAF investment.

628
00:27:44,070 --> 00:27:47,300
In the first three months
after this presentation,

629
00:27:47,300 --> 00:27:49,290
I challenge you identify a diverse team

630
00:27:49,290 --> 00:27:52,060
to review WAF solutions and to deploy

631
00:27:52,060 --> 00:27:54,159
at least one Web Application Firewall

632
00:27:54,160 --> 00:27:56,430
into a non production environment.

633
00:27:56,430 --> 00:27:59,250
Within six months, you
should complete tuning

634
00:27:59,250 --> 00:28:03,140
of at least one WAF and
place it into blocking mode.

635
00:28:03,140 --> 00:28:05,070
And of course, we need to create, train

636
00:28:05,070 --> 00:28:08,612
and empower our support team
so that we can provide support.

637
00:28:10,600 --> 00:28:12,790
I'd love to continue
this conversation here,

638
00:28:12,790 --> 00:28:14,980
there or anywhere.

639
00:28:14,980 --> 00:28:17,570
you can follow me on Twitter @MicahKBrown.

640
00:28:17,570 --> 00:28:19,312
You can take a look at my GitHub

641
00:28:19,313 --> 00:28:21,220
github.com/micahkbrown,

642
00:28:21,220 --> 00:28:23,780
where I publish all of my talks.

643
00:28:23,780 --> 00:28:26,240
I'd like to thank everyone
that is responsible

644
00:28:26,240 --> 00:28:29,290
for going through and putting
this conference together.

645
00:28:29,290 --> 00:28:31,081
And I'd like to thank you for your time.

646
00:28:31,082 --> 00:28:33,147
Thank you and have a great day.

