1
00:00:02,480 --> 00:00:03,600
- My name is Daniele,

2
00:00:03,600 --> 00:00:06,413
and I'm a PhD student at KU Leuven.

3
00:00:07,410 --> 00:00:10,320
This is a joint work with
Professor Nigel Smart

4
00:00:10,320 --> 00:00:12,900
and Younes Talibi Alaoul.

5
00:00:12,900 --> 00:00:15,600
This presentation is about
Secure Fast Evaluation

6
00:00:15,600 --> 00:00:16,750
of Iterative Methods:

7
00:00:16,750 --> 00:00:18,783
With an Application to Secure PageRank.

8
00:00:19,990 --> 00:00:24,349
To begin with, let's
imagine we have a system

9
00:00:24,350 --> 00:00:26,690
of bank accounts and transactions,

10
00:00:26,690 --> 00:00:31,690
and you want to detect
fraudulent transactions.

11
00:00:32,070 --> 00:00:35,300
So the idea is that you
start collecting data

12
00:00:35,300 --> 00:00:37,580
about these transactions
over a period of time,

13
00:00:37,580 --> 00:00:40,533
and from this history you form a graph.

14
00:00:42,420 --> 00:00:44,370
You do some graph analysis

15
00:00:45,260 --> 00:00:49,230
which helps you locate
suspicious accounts.

16
00:00:49,230 --> 00:00:52,110
One way for doing that is
the PageRank algorithm,

17
00:00:52,110 --> 00:00:53,300
which in this case,

18
00:00:53,300 --> 00:00:56,739
is used to measure the reputation

19
00:00:56,740 --> 00:00:58,810
of single bank accounts.

20
00:00:58,810 --> 00:01:01,470
This is motivated by heuristic observation

21
00:01:01,470 --> 00:01:06,470
that from such networks
behave like a web of trust.

22
00:01:07,960 --> 00:01:11,869
So individuals are likely
to establish relations

23
00:01:11,870 --> 00:01:13,133
with those they trust.

24
00:01:14,650 --> 00:01:19,490
So this means that the
higher is the reputation

25
00:01:19,490 --> 00:01:21,979
or connection of a single

26
00:01:23,950 --> 00:01:26,623
bank account, the less
likely it is fraudulent.

27
00:01:27,510 --> 00:01:28,410
On the other hand,

28
00:01:29,330 --> 00:01:31,810
fraudulent accounts look like

29
00:01:32,720 --> 00:01:35,440
singularities in this network.

30
00:01:35,440 --> 00:01:37,152
So mathematically you can think,

31
00:01:38,435 --> 00:01:40,270
transaction network as a directive graph

32
00:01:40,270 --> 00:01:42,670
where vertices are the accounts,

33
00:01:42,670 --> 00:01:43,917
and (indistinct) are the transactions.

34
00:01:43,917 --> 00:01:46,697
So you can form the indigent metrics

35
00:01:46,697 --> 00:01:49,850
and by dividing each entry by out degrees

36
00:01:49,850 --> 00:01:52,759
you get this stochastic metric speed

37
00:01:52,760 --> 00:01:55,930
was again values can be ordered

38
00:01:55,930 --> 00:02:00,070
by decreasing Gord there,
according to their size.

39
00:02:00,070 --> 00:02:03,729
So you have the largest Eigenvalue

40
00:02:03,730 --> 00:02:05,580
and I'm the one equals to one.

41
00:02:05,580 --> 00:02:07,880
Then the second are just
eigenvalue and so on.

42
00:02:09,240 --> 00:02:11,910
Don't do that at any point

43
00:02:11,910 --> 00:02:15,900
the money will simply junk to any other

44
00:02:17,150 --> 00:02:19,290
bank account with uniform probability.

45
00:02:19,290 --> 00:02:22,410
And this is modeled by
introducing these public damping

46
00:02:22,410 --> 00:02:23,623
factor Lambda,

47
00:02:24,470 --> 00:02:28,163
which is typically chosen
to be equal to 0.75.

48
00:02:30,296 --> 00:02:31,850
The eigenvalues for this matrix,

49
00:02:31,850 --> 00:02:34,595
which is still (mumbles)

50
00:02:34,595 --> 00:02:38,007
related by this P by this damping factor.

51
00:02:39,040 --> 00:02:42,579
So this matrix really is
encode sold information

52
00:02:42,580 --> 00:02:46,020
about this transaction network,

53
00:02:46,020 --> 00:02:48,400
which is a mark of process.

54
00:02:48,400 --> 00:02:50,780
So computing, the
patriarch of this network

55
00:02:51,680 --> 00:02:56,680
is really to finding the stationary vector

56
00:02:57,130 --> 00:03:00,370
of the process of the change.

57
00:03:00,370 --> 00:03:03,680
So you do this using the power meter

58
00:03:03,680 --> 00:03:08,360
and the stationary part is the limits

59
00:03:08,360 --> 00:03:10,090
of this sequence.

60
00:03:10,090 --> 00:03:14,330
The entries will measure the reputation

61
00:03:14,330 --> 00:03:15,750
of single bank accounts

62
00:03:15,750 --> 00:03:19,823
and you're gonna investigate
those with a low value.

63
00:03:21,100 --> 00:03:24,000
So this is easy one,
you have only one back

64
00:03:24,000 --> 00:03:26,480
because you're full
control of the world graph,

65
00:03:26,480 --> 00:03:29,840
but things start getting challenging when

66
00:03:29,840 --> 00:03:34,390
different banks appear and own

67
00:03:34,390 --> 00:03:36,653
a portion of the accounts,

68
00:03:37,620 --> 00:03:40,330
this is because each bank is only aware

69
00:03:40,330 --> 00:03:44,680
of the transaction sub
pending among their clients.

70
00:03:44,680 --> 00:03:47,400
So in this example, the green bank

71
00:03:47,400 --> 00:03:49,740
can only see this part of the metrics,

72
00:03:49,740 --> 00:03:51,583
while the rest is blank,

73
00:03:52,710 --> 00:03:53,920
it's secret.

74
00:03:53,920 --> 00:03:57,839
And so the banks really
need to collaborate

75
00:03:57,840 --> 00:04:01,163
not to detect.(mumbles)

76
00:04:03,800 --> 00:04:06,180
But the problem is how can they do that

77
00:04:06,180 --> 00:04:08,463
while preserving the
privacy of the clients?

78
00:04:09,500 --> 00:04:12,140
And the answer comes from

79
00:04:13,110 --> 00:04:15,480
privacy oriented cryptographic techniques

80
00:04:15,480 --> 00:04:18,690
like HCM or multiparty computation.

81
00:04:18,690 --> 00:04:21,410
So a paper from 2019

82
00:04:22,290 --> 00:04:25,883
proposed the solution-based
homomorphic encryption,

83
00:04:27,470 --> 00:04:32,470
but had some throwbacks
like low-level of security

84
00:04:32,870 --> 00:04:35,320
and the very design of the scheme

85
00:04:35,320 --> 00:04:39,440
didn't allow parties to
outsource the computation.

86
00:04:39,440 --> 00:04:42,550
They had to stay aligned
the world computation.

87
00:04:42,550 --> 00:04:47,120
So this work, we propose a
protocol and target based

88
00:04:47,120 --> 00:04:49,680
on multiparty computation
that aims to solve

89
00:04:50,540 --> 00:04:51,603
all these problems.

90
00:04:53,340 --> 00:04:55,679
So the idea is, well

91
00:04:55,680 --> 00:05:00,240
we would like to have an ideal
uncorrupted functionality F

92
00:05:01,920 --> 00:05:04,230
which as a black box

93
00:05:04,230 --> 00:05:06,540
takes the secret inputs of the banks

94
00:05:07,620 --> 00:05:12,620
and performs the, computes
the patriarch of the network,

95
00:05:13,600 --> 00:05:17,600
and sends the result back to the banks.

96
00:05:17,600 --> 00:05:21,190
This is completely safe
because this is a black box.

97
00:05:21,190 --> 00:05:22,023
And,

98
00:05:23,470 --> 00:05:26,840
but of course, in reality
this cannot happen

99
00:05:26,840 --> 00:05:28,179
such an entity does not exist.

100
00:05:28,180 --> 00:05:29,710
So we,

101
00:05:29,710 --> 00:05:31,623
the sign and multiparty protocol.

102
00:05:34,080 --> 00:05:39,080
So which implements F and
with the security requirements

103
00:05:39,740 --> 00:05:43,550
that each party cannot
learn anything about

104
00:05:43,550 --> 00:05:45,340
the others input,

105
00:05:45,340 --> 00:05:50,340
except from what can be inferred
from the public parameters

106
00:05:50,690 --> 00:05:52,533
and the output of the computation.

107
00:05:54,920 --> 00:05:57,150
Fundamental building block here is linear

108
00:05:57,150 --> 00:05:57,983
secret shared.

109
00:05:57,983 --> 00:06:02,801
So secret field element
is added to the shared

110
00:06:02,801 --> 00:06:03,729
and just representation,

111
00:06:03,730 --> 00:06:05,693
you can compute anything.

112
00:06:07,382 --> 00:06:08,920
You can construct general protocols

113
00:06:08,920 --> 00:06:10,350
that achieve active security

114
00:06:10,350 --> 00:06:13,600
even when only one party is honest.

115
00:06:13,600 --> 00:06:14,680
And most importantly,

116
00:06:14,680 --> 00:06:17,503
it allows parties to
outsource the computation.

117
00:06:18,750 --> 00:06:20,133
So back to our example.

118
00:06:21,250 --> 00:06:24,620
Remember the matrix M

119
00:06:24,620 --> 00:06:28,170
as entries, which are rational numbers,

120
00:06:28,170 --> 00:06:30,600
but this is not a problem because we can

121
00:06:30,600 --> 00:06:32,610
encode them as field

122
00:06:32,610 --> 00:06:34,840
elements using fixed points arithmetic.

123
00:06:34,840 --> 00:06:37,349
So the only thing left is representing

124
00:06:40,614 --> 00:06:43,049
the parameter that's a
an arithmetic circuit

125
00:06:43,050 --> 00:06:44,640
which is quite easily.

126
00:06:44,640 --> 00:06:49,039
It's just made
multiplications and additions

127
00:06:49,040 --> 00:06:54,010
but the depth depends on
the number of iterations.

128
00:06:54,010 --> 00:06:57,593
And so the question is, how
many iterations do we need?

129
00:07:00,550 --> 00:07:02,990
If you were to avoid this
problem is by setting

130
00:07:02,990 --> 00:07:05,470
and to be large number,

131
00:07:05,470 --> 00:07:07,800
large enough so that we
know we have a threat,

132
00:07:07,800 --> 00:07:09,250
we have convergence,

133
00:07:09,250 --> 00:07:10,510
which we know happens

134
00:07:11,690 --> 00:07:14,219
for 100 or 30 durations,

135
00:07:14,220 --> 00:07:16,370
depending on the application.

136
00:07:16,370 --> 00:07:21,290
And well, this is definitely not optimal

137
00:07:21,290 --> 00:07:23,900
so we can do better.

138
00:07:23,900 --> 00:07:26,969
We can fix a small error absolute,

139
00:07:26,970 --> 00:07:30,930
and we stop iterating as
soon as the difference

140
00:07:30,930 --> 00:07:33,430
of two consecutive
elements of the sequence

141
00:07:33,430 --> 00:07:34,603
is less than absolute.

142
00:07:36,670 --> 00:07:39,270
So this is optimal, but

143
00:07:39,270 --> 00:07:43,094
of course it introduces
a security problems

144
00:07:43,095 --> 00:07:46,470
because we are revealing
the number of iterations,

145
00:07:46,470 --> 00:07:48,840
remember that this conditions

146
00:07:48,840 --> 00:07:52,739
has to be secret chart.

147
00:07:52,740 --> 00:07:54,480
So the question is,

148
00:07:54,480 --> 00:07:57,240
can we quantify the amount of leakage

149
00:07:57,240 --> 00:08:00,253
due to our revealing the
number of iterations?

150
00:08:01,910 --> 00:08:04,760
So remember that for the tower metered,

151
00:08:04,760 --> 00:08:09,080
we have the general term use

152
00:08:09,080 --> 00:08:10,053
looks like this,

153
00:08:11,260 --> 00:08:14,530
from which you see that the
convergence is dominated

154
00:08:14,530 --> 00:08:16,082
by the largest,

155
00:08:17,380 --> 00:08:18,610
second largest fitting value.

156
00:08:18,610 --> 00:08:21,360
So revealing the number of iterations

157
00:08:21,360 --> 00:08:25,800
reveals one sample from
the geometric distribution.

158
00:08:25,800 --> 00:08:28,033
That depends on lambda two.

159
00:08:30,680 --> 00:08:34,130
So a paper from the two unit thousands

160
00:08:34,130 --> 00:08:37,210
says that according to
the typology of the graph,

161
00:08:37,210 --> 00:08:38,563
we have two cases.

162
00:08:39,409 --> 00:08:43,350
Either we have more than two closed

163
00:08:43,350 --> 00:08:45,650
irreducible connected components.

164
00:08:45,650 --> 00:08:49,350
And we are lucky because
lambda two is exactly equal

165
00:08:49,350 --> 00:08:52,020
to the dumping factor
lambda, which is public.

166
00:08:52,020 --> 00:08:54,790
So revealing something
that depends on lambda

167
00:08:56,370 --> 00:09:00,930
is fine because we don't
reveal anything new,

168
00:09:00,930 --> 00:09:04,770
or we have just a single
closely irreducible

169
00:09:04,770 --> 00:09:05,720
connected component,

170
00:09:05,720 --> 00:09:07,800
for which we can only say that

171
00:09:07,800 --> 00:09:10,810
lambda two is less than
the dumping factor.

172
00:09:10,810 --> 00:09:12,550
But this is fine,

173
00:09:12,550 --> 00:09:14,890
because the only way an
attacker could explore this

174
00:09:14,890 --> 00:09:19,460
is by collecting many samples
from this distribution.

175
00:09:19,460 --> 00:09:21,560
And this is not the
case in our application

176
00:09:21,560 --> 00:09:26,392
because the banks will only
perform this computation once.

177
00:09:27,540 --> 00:09:32,180
In conclusion, one can formulate
a more general question.

178
00:09:32,180 --> 00:09:35,640
So if you have a general
fixed point problem

179
00:09:35,640 --> 00:09:37,893
where the iteration,

180
00:09:39,420 --> 00:09:41,630
the condition is secret chart,

181
00:09:41,630 --> 00:09:45,103
then is it safe to reveal
the number of iterations?

182
00:09:47,010 --> 00:09:49,939
It depends on the application
you have in mind actually.

183
00:09:49,940 --> 00:09:51,383
'Cause in the special case,

184
00:09:52,810 --> 00:09:55,969
where the contraction
is given by the matrix,

185
00:09:55,970 --> 00:09:59,440
as we saw this leaks the
sample from the distribution,

186
00:09:59,440 --> 00:10:00,790
that depends on lambda two,

187
00:10:02,870 --> 00:10:04,780
and in the more special case,

188
00:10:04,780 --> 00:10:08,893
where we have the PageRank and matrix,

189
00:10:10,390 --> 00:10:15,000
then either we reveal a single sample

190
00:10:15,000 --> 00:10:16,360
from this distribution.

191
00:10:16,360 --> 00:10:18,300
That depends on lambda two,

192
00:10:18,300 --> 00:10:22,630
which is a negligible amount
of information we leak.

193
00:10:22,630 --> 00:10:27,490
Or we are in the safe case,

194
00:10:27,490 --> 00:10:28,690
in the perfect case

195
00:10:29,940 --> 00:10:31,850
where lambda two is exactly equal

196
00:10:31,850 --> 00:10:33,910
to the dumping factor lambda

197
00:10:33,910 --> 00:10:37,183
and we are not revealing anything new.

198
00:10:38,180 --> 00:10:40,992
So this concludes my presentation.

199
00:10:43,730 --> 00:10:44,563
- Hello there.

200
00:10:44,563 --> 00:10:47,170
So what we're going to be talking about

201
00:10:47,170 --> 00:10:49,260
in this talk is we're going to be looking

202
00:10:49,260 --> 00:10:54,260
at Compilation of programs in
Secure Computing Paradigms.

203
00:10:54,690 --> 00:10:55,600
So in particular

204
00:10:55,600 --> 00:10:58,870
the two competing paradigms
we're going to be looking at

205
00:10:58,870 --> 00:11:01,730
is multi-party computation,
as there are no spreads.

206
00:11:01,730 --> 00:11:04,530
So this is the kind of the
basic picture of what we have.

207
00:11:04,530 --> 00:11:06,730
So multi-party computation,
we have a bunch

208
00:11:06,730 --> 00:11:09,830
of parties that they've
got inputs, A B C D

209
00:11:09,830 --> 00:11:10,980
and they've got some function.

210
00:11:10,980 --> 00:11:13,800
They wanna compute on
their joint input 'cause F

211
00:11:13,800 --> 00:11:17,609
and they really most
of this god-like figure

212
00:11:17,610 --> 00:11:19,930
to compute this function for them

213
00:11:19,930 --> 00:11:23,500
so that they get the output F, A B C D,

214
00:11:23,500 --> 00:11:26,150
without revealing ABCD itself.

215
00:11:26,150 --> 00:11:27,720
So that's MPC.

216
00:11:27,720 --> 00:11:29,140
And zero knowledge,

217
00:11:29,140 --> 00:11:32,150
what we do is this god-like figure

218
00:11:32,150 --> 00:11:34,810
has values ABCD.

219
00:11:34,810 --> 00:11:37,270
And what it wants to
do is it wants to prove

220
00:11:37,270 --> 00:11:38,720
to a third party

221
00:11:38,720 --> 00:11:40,290
that there exists some values

222
00:11:40,290 --> 00:11:43,240
of such that the function
equals the given output G.

223
00:11:43,240 --> 00:11:46,733
So they're kind of very
similar kind of things.

224
00:11:47,650 --> 00:11:50,939
Now, because cryptographers
don't believe in god.

225
00:11:50,940 --> 00:11:53,850
What we try to do is replace
the magic god-like figure

226
00:11:53,850 --> 00:11:56,040
with a protocol or procedure.

227
00:11:56,040 --> 00:11:57,670
So we've replaced in this cycle,

228
00:11:57,670 --> 00:11:59,140
We've done is just taken the god

229
00:11:59,140 --> 00:12:00,630
and we've placed it

230
00:12:00,630 --> 00:12:05,210
on the MPC side with a bunch of computers

231
00:12:05,210 --> 00:12:08,300
connected with a protocol, with a network.

232
00:12:08,300 --> 00:12:10,410
And I mean, is there
another site we've replaced

233
00:12:10,410 --> 00:12:13,855
the god with a computer who is approver.

234
00:12:13,855 --> 00:12:15,170
Okay.

235
00:12:15,170 --> 00:12:17,560
Now traditionally in cryptography.

236
00:12:17,560 --> 00:12:21,359
So what we do is we
focus on the computers.

237
00:12:21,360 --> 00:12:22,193
That's what we do.

238
00:12:22,193 --> 00:12:23,939
We're interested in this specific feature.

239
00:12:23,940 --> 00:12:27,263
We're interested in the protocol, okay?

240
00:12:27,263 --> 00:12:30,010
That's what we do with
traditional cryptography.

241
00:12:30,010 --> 00:12:31,830
However, what we're gonna do

242
00:12:31,830 --> 00:12:35,600
in this talk is we're
concentrating on the function.

243
00:12:35,600 --> 00:12:38,560
So normally cryptography,
people just ignore this.

244
00:12:38,560 --> 00:12:40,449
They kind of go the function
is kind of given to you

245
00:12:40,450 --> 00:12:41,570
in some magic way.

246
00:12:41,570 --> 00:12:44,170
It's given to you by god, okay?

247
00:12:44,170 --> 00:12:46,236
But actually functions
aren't given to you by god.

248
00:12:46,236 --> 00:12:47,360
They're given to you by people.

249
00:12:47,360 --> 00:12:49,660
So that's what we want
to kind of tease apart.

250
00:12:51,650 --> 00:12:56,350
So what happens in traditional

251
00:12:56,350 --> 00:12:58,090
non-cryptographic compilation?

252
00:12:58,090 --> 00:12:59,040
Okay.

253
00:12:59,040 --> 00:13:02,040
So what do you do to take some
human readable representation

254
00:13:02,040 --> 00:13:05,219
of the function like C++ Java Rust?

255
00:13:05,220 --> 00:13:07,210
And then you compile that

256
00:13:07,210 --> 00:13:09,720
into a different representation

257
00:13:09,720 --> 00:13:11,440
like machine code.

258
00:13:11,440 --> 00:13:13,300
And this different representation

259
00:13:13,300 --> 00:13:17,439
is the representation that
the machine takes as input

260
00:13:17,440 --> 00:13:21,440
like ingests it's input and then executes.

261
00:13:21,440 --> 00:13:24,920
Okay. So we have human readable format

262
00:13:24,920 --> 00:13:26,180
machine-readable format,

263
00:13:26,180 --> 00:13:28,130
and then the machine.

264
00:13:28,130 --> 00:13:31,050
Now the machine building the machine,

265
00:13:31,050 --> 00:13:32,290
how you do this you know,

266
00:13:32,290 --> 00:13:34,703
is the focus of computer architecture.

267
00:13:35,550 --> 00:13:37,780
The focus of programming language research

268
00:13:37,780 --> 00:13:41,120
and compiler writing is taking
the high level viewpoint

269
00:13:41,120 --> 00:13:43,310
and turning into a
machine-readable format.

270
00:13:43,310 --> 00:13:45,979
So we divide the process into two things,

271
00:13:45,980 --> 00:13:48,480
converting from human readable
format of the function

272
00:13:48,480 --> 00:13:51,683
to evaluating the function
in a machine-readable format.

273
00:13:52,540 --> 00:13:56,300
Now, if we look at
cryptographic compilation,

274
00:13:56,300 --> 00:13:58,449
what happens is that the machine,

275
00:13:58,450 --> 00:14:02,260
the X86 architecture is
the protocol in some sense.

276
00:14:02,260 --> 00:14:04,850
So that's the focus of
traditional cryptography.

277
00:14:04,850 --> 00:14:08,020
It's about how the protocol works.

278
00:14:08,020 --> 00:14:11,290
Whereas actually the translation

279
00:14:11,290 --> 00:14:13,730
from the higher level
viewpoint of the function

280
00:14:13,730 --> 00:14:18,730
into a representation, which
the protocol can ingest,

281
00:14:18,760 --> 00:14:19,870
that's ignored.

282
00:14:19,870 --> 00:14:21,527
Usually in cryptography we can know that.

283
00:14:21,527 --> 00:14:23,330
And what we're gonna do
in this talk is actually

284
00:14:23,330 --> 00:14:26,240
look at it and show why this is important,

285
00:14:26,240 --> 00:14:28,080
and why we need to consider this

286
00:14:28,080 --> 00:14:30,220
as a first cryptographic object,

287
00:14:30,220 --> 00:14:31,890
and not just worry about protocols

288
00:14:31,890 --> 00:14:34,263
but also worry about
function representations.

289
00:14:35,700 --> 00:14:39,770
Okay. So what happens in an
ideal cryptographic world?

290
00:14:39,770 --> 00:14:42,380
So what happens is in the ideal world,

291
00:14:42,380 --> 00:14:44,910
the theoretical cryptographers live in,

292
00:14:44,910 --> 00:14:46,540
they take a function,

293
00:14:46,540 --> 00:14:48,990
they represent it as a
binary arithmetic circuit,

294
00:14:48,990 --> 00:14:50,850
which they can always do 'cause this basic

295
00:14:50,850 --> 00:14:52,640
first year computer science.

296
00:14:52,640 --> 00:14:55,370
And then they input that
binary arithmetic circuit

297
00:14:55,370 --> 00:14:56,203
to the protocol.

298
00:14:56,203 --> 00:14:58,420
And they built that protocol on the basis

299
00:14:58,420 --> 00:15:00,780
that the input to the protocol

300
00:15:00,780 --> 00:15:03,800
is a binary or arithmetic circuit.

301
00:15:03,800 --> 00:15:05,800
But this is completely
impractical in the real world.

302
00:15:05,800 --> 00:15:08,250
This is a kin to normal computing,

303
00:15:08,250 --> 00:15:11,240
the computer program of
writing in a restricted form

304
00:15:11,240 --> 00:15:14,620
of VHDL then no one,

305
00:15:14,620 --> 00:15:16,300
except for, you know pretty hardcore

306
00:15:16,300 --> 00:15:19,079
hardware program has no
one would do this. Okay?

307
00:15:19,080 --> 00:15:20,890
So the actual process that happens

308
00:15:20,890 --> 00:15:23,100
in the real world is we take the function,

309
00:15:23,100 --> 00:15:26,240
we process through various
optimization processes

310
00:15:26,240 --> 00:15:29,350
depending on the protocol
we're actually targeting.

311
00:15:29,350 --> 00:15:31,480
And then we output of
representation of the function

312
00:15:31,480 --> 00:15:33,800
which is tailored to
that specific protocol.

313
00:15:33,800 --> 00:15:35,270
That's what actually happens,

314
00:15:35,270 --> 00:15:38,210
but cryptographers completely
ignore that process.

315
00:15:38,210 --> 00:15:39,290
So this is what we're focusing on.

316
00:15:39,290 --> 00:15:41,520
So let's look at what
happens when we focus

317
00:15:41,520 --> 00:15:42,733
on MPC protocols.

318
00:15:43,930 --> 00:15:47,959
So MPC protocols come with various sources

319
00:15:47,960 --> 00:15:49,665
various all sorts of bells and whistles

320
00:15:49,665 --> 00:15:50,599
that you can add to them.

321
00:15:50,600 --> 00:15:53,807
And particularly these are
sources of correlated randomness

322
00:15:53,807 --> 00:15:56,930
and secondly, they're special
gadgets for special tasks.

323
00:15:56,930 --> 00:15:59,849
So when we compile to
arithmetic or binary circuits

324
00:15:59,850 --> 00:16:02,260
it's kind of there're OK in theory

325
00:16:02,260 --> 00:16:05,050
but it's bad in practice
because it doesn't utilize

326
00:16:06,730 --> 00:16:08,040
as a first class object.

327
00:16:08,040 --> 00:16:10,680
These things the protocols
come equipped with.

328
00:16:10,680 --> 00:16:13,790
So classic example, if this
is the classic random to speak

329
00:16:13,790 --> 00:16:16,900
and provided by either triples
and MPC protocols, okay.

330
00:16:16,900 --> 00:16:18,860
So what you do if you take
the arithmetic circuit

331
00:16:18,860 --> 00:16:21,180
and then because you've got
this Beaver randomness beacon

332
00:16:21,180 --> 00:16:23,870
you can replace the
arithmetic multiplications

333
00:16:23,870 --> 00:16:26,083
by calls to Beaver randomness triple.

334
00:16:27,006 --> 00:16:29,939
A classic gadget that you
might want to consider

335
00:16:29,940 --> 00:16:32,750
is when you have plenty of
secret share and based MPC,

336
00:16:32,750 --> 00:16:35,800
you can perform lots of rounds in parallel

337
00:16:35,800 --> 00:16:37,550
to avoid sprouts and communication.

338
00:16:38,410 --> 00:16:40,760
So what we need is we need to understand

339
00:16:40,760 --> 00:16:42,040
the compilation process,

340
00:16:42,040 --> 00:16:44,760
which takes into account
these beacons and gadgets.

341
00:16:44,760 --> 00:16:46,569
And in fact, our theory
should take into account

342
00:16:46,570 --> 00:16:47,870
these beacons and gadgets.

343
00:16:50,406 --> 00:16:52,650
So, if we take a step back,

344
00:16:52,650 --> 00:16:55,410
we've got a function which is
operating on sensitive data.

345
00:16:55,410 --> 00:16:56,709
And if you're operating on sensitive data

346
00:16:56,710 --> 00:16:58,260
you basically have two key operations,

347
00:16:58,260 --> 00:16:59,880
which is declassification,

348
00:16:59,880 --> 00:17:03,160
making a sensitive variable nonsensitive,

349
00:17:03,160 --> 00:17:05,109
or it's a classification where you take

350
00:17:05,109 --> 00:17:07,550
a nonsensitive variable
and make it sensitive.

351
00:17:07,550 --> 00:17:09,960
So this is classic
information flow security

352
00:17:09,960 --> 00:17:13,123
which would see being
Bell-La-Padula Models, et cetera.

353
00:17:14,000 --> 00:17:16,750
So an MPC function
complies make strong use

354
00:17:16,750 --> 00:17:18,660
of these operations, but which are again

355
00:17:18,660 --> 00:17:20,869
ignored by the theory community.

356
00:17:20,869 --> 00:17:23,060
So classic example is into your comparison

357
00:17:23,060 --> 00:17:24,579
in LSS based MPC.

358
00:17:24,579 --> 00:17:27,285
We perform bit decompositions
using Beaver triples

359
00:17:27,286 --> 00:17:28,700
production.

360
00:17:28,700 --> 00:17:31,350
And then we use this using
this random, this beacon

361
00:17:31,350 --> 00:17:34,159
and then we open or declassify most value

362
00:17:34,160 --> 00:17:36,190
and then we execute the comparison.

363
00:17:36,190 --> 00:17:38,380
And this is much more efficient

364
00:17:38,380 --> 00:17:41,620
but makes our MPC protocol
become statistically secure.

365
00:17:41,620 --> 00:17:43,159
And the reason statistically secure is not

366
00:17:43,160 --> 00:17:45,350
because the protocol
is statistically secure

367
00:17:45,350 --> 00:17:48,699
but the compilation process
is statistically secure.

368
00:17:48,700 --> 00:17:49,876
So we have to...

369
00:17:49,876 --> 00:17:51,420
So this is our first example

370
00:17:51,420 --> 00:17:55,960
of where compilation
introduces statistical security

371
00:17:55,960 --> 00:17:58,003
or introduces a security concern.

372
00:18:00,880 --> 00:18:03,790
But we can also introduce
insecure compilations.

373
00:18:03,790 --> 00:18:06,629
So consider the following
compilation path.

374
00:18:06,630 --> 00:18:09,580
We take a function on
sensitive input values.

375
00:18:09,580 --> 00:18:11,270
Okay, well, okay.

376
00:18:11,270 --> 00:18:12,450
We can declassify values

377
00:18:12,450 --> 00:18:14,550
so we could classify X, Y, and Z.

378
00:18:14,550 --> 00:18:16,427
We compute F of X Y Z in a clear

379
00:18:16,427 --> 00:18:18,370
and we output the results,

380
00:18:18,370 --> 00:18:21,300
now from a computer
compilation point of view,

381
00:18:21,300 --> 00:18:22,780
this is a valid compilation.

382
00:18:22,780 --> 00:18:25,760
It's functionally correct,
but it's not secure

383
00:18:25,760 --> 00:18:27,770
because the values are declassified.

384
00:18:27,770 --> 00:18:31,100
So here, we've got an
issue where a compilation

385
00:18:31,100 --> 00:18:34,270
methodology gives a security floor.

386
00:18:34,270 --> 00:18:37,230
So clearly we have to
understand compilation

387
00:18:37,230 --> 00:18:40,690
if we're gonna make any
meaningful discussion

388
00:18:40,690 --> 00:18:42,590
of what security is.

389
00:18:42,590 --> 00:18:45,087
So the lesson is
compilation affect security

390
00:18:45,087 --> 00:18:48,550
and we need to quantify this loss.

391
00:18:48,550 --> 00:18:50,960
So that's basically what this paper does,

392
00:18:50,960 --> 00:18:54,520
is we represent a function
as a so-called M-Circuit,

393
00:18:54,520 --> 00:18:56,970
which has access and is...

394
00:18:56,970 --> 00:19:00,150
Which is a member of a class of circuits,

395
00:19:00,150 --> 00:19:01,130
the class STEM-Circuits,

396
00:19:01,130 --> 00:19:02,890
and these class STEM-Circuits are defined

397
00:19:02,890 --> 00:19:06,060
by what gadgets and what
beacons they have access to.

398
00:19:06,060 --> 00:19:08,389
And the compilation
process is something which

399
00:19:08,390 --> 00:19:11,580
takes a representation in
one class then circuits

400
00:19:11,580 --> 00:19:14,047
and changes it to it
another class then circuits.

401
00:19:14,047 --> 00:19:16,960
And what you want to do
is you take an input,

402
00:19:16,960 --> 00:19:19,130
a function, an input representation

403
00:19:19,130 --> 00:19:21,770
which is just the function
as a magic gadget,

404
00:19:21,770 --> 00:19:25,450
and then you compile it down
to a class of M-Circuits

405
00:19:25,450 --> 00:19:28,130
which is supported by the
underlying MPC protocol.

406
00:19:28,130 --> 00:19:30,283
That's what we mean by
function compilation.

407
00:19:32,900 --> 00:19:34,990
So we take it and when we simplify it

408
00:19:34,990 --> 00:19:38,090
and we want every step of
the function compilation

409
00:19:38,090 --> 00:19:41,139
must create functionally equivalent.

410
00:19:41,140 --> 00:19:42,220
They must be functionally equivalent.

411
00:19:42,220 --> 00:19:45,370
It mustn't change the
function as you compile.

412
00:19:45,370 --> 00:19:47,030
Okay.

413
00:19:47,030 --> 00:19:47,863
So what do we mean by security?

414
00:19:47,863 --> 00:19:50,360
Because we have two M-Circuits,

415
00:19:50,360 --> 00:19:52,540
representing the same function.

416
00:19:52,540 --> 00:19:54,740
And we can define their execution traits

417
00:19:54,740 --> 00:19:56,460
you should see the paper for this.

418
00:19:56,460 --> 00:19:58,550
And then what we can say is that

419
00:19:58,550 --> 00:20:01,220
if this compilation step
is perfectly secure,

420
00:20:01,220 --> 00:20:03,760
if the traces are perfectly
indistinguishable,

421
00:20:03,760 --> 00:20:06,930
or they're statistically secured

422
00:20:06,930 --> 00:20:09,390
they're statistically indistinguishable,

423
00:20:09,390 --> 00:20:12,730
and is insecure if the two
traces are distinguishable.

424
00:20:12,730 --> 00:20:14,750
And all of the examples that we gave,

425
00:20:14,750 --> 00:20:16,890
the Beaver triple right
from this beacon space

426
00:20:16,890 --> 00:20:19,520
they statistically secure
compilation with comparison,

427
00:20:19,520 --> 00:20:21,920
the insecure completion is exactly that.

428
00:20:21,920 --> 00:20:23,770
So this is the definition of what we mean

429
00:20:23,770 --> 00:20:25,780
by secure compilation.

430
00:20:25,780 --> 00:20:27,920
So that's the thirst
hard piece of the paper

431
00:20:27,920 --> 00:20:30,453
is we formally define
what it means to do this.

432
00:20:33,170 --> 00:20:35,820
So that's basically in the context of MPC

433
00:20:35,820 --> 00:20:39,889
but we can actually do, exactly
the same compilation process

434
00:20:39,890 --> 00:20:42,920
that so-called Zero-Knowledge
based on MPC-in-the-Head

435
00:20:42,920 --> 00:20:45,120
because effectively they're the same.

436
00:20:45,120 --> 00:20:48,189
So just do a quick recap
of MPC-in-the-Head.

437
00:20:48,190 --> 00:20:50,020
In-MPC-in-the-Head that prover a simulates

438
00:20:50,020 --> 00:20:54,220
the MPC parties, the challenger
in an interactive version

439
00:20:54,220 --> 00:20:56,660
challenges to prove to
open some of the parties.

440
00:20:56,660 --> 00:20:58,220
And then we check consistency

441
00:20:58,220 --> 00:21:00,400
of the views of the MPC

442
00:21:00,400 --> 00:21:02,530
engines which are in the previous head.

443
00:21:02,530 --> 00:21:04,000
Correctness come because
of the correctness

444
00:21:04,000 --> 00:21:05,540
of the underlying MPC protocols,

445
00:21:05,540 --> 00:21:07,350
soundness essentially across

446
00:21:07,350 --> 00:21:08,949
guessing the verifies challenge.

447
00:21:08,950 --> 00:21:12,040
Is there a knowledge that is
due to the passive security

448
00:21:12,040 --> 00:21:13,590
of the underlying MPC protocol?

449
00:21:14,880 --> 00:21:17,380
So we can kind of examine it

450
00:21:17,380 --> 00:21:19,320
in this kind of three-step process.

451
00:21:19,320 --> 00:21:21,342
Okay. So that's kind of
basically what happens

452
00:21:21,343 --> 00:21:26,343
and what happens is that
in our model of compiling

453
00:21:26,960 --> 00:21:30,230
functions, we have this methodology

454
00:21:30,230 --> 00:21:34,267
and it applies both to MPC and
to MPC-in-the-Head protocols.

455
00:21:34,267 --> 00:21:37,290
And we actually show a
concrete MPC and the head

456
00:21:37,290 --> 00:21:40,653
protocol using this M-Circuit
representation of functions.

457
00:21:41,580 --> 00:21:44,419
So we do this for various
different rabbit speakers

458
00:21:44,420 --> 00:21:45,730
various different gadgets.

459
00:21:45,730 --> 00:21:47,710
We also show how this allows optimization

460
00:21:47,710 --> 00:21:49,920
by looking at some very special gadgets.

461
00:21:49,920 --> 00:21:51,980
And we show we can reuse all the work

462
00:21:51,980 --> 00:21:53,670
on MPC completion strategies

463
00:21:53,670 --> 00:21:55,840
over the last 10 years to
build MPC-in-the-Head protocol.

464
00:21:55,840 --> 00:21:58,852
So this allows us to reuse
techniques from the past.

465
00:22:00,370 --> 00:22:02,649
So in summary,

466
00:22:02,650 --> 00:22:05,160
what would define this
compilation protocol?

467
00:22:05,160 --> 00:22:07,370
So what should you take away from today?

468
00:22:07,370 --> 00:22:10,120
When you define a secure
computation protocol

469
00:22:10,120 --> 00:22:12,209
you shouldn't be using the paradigm

470
00:22:12,210 --> 00:22:15,040
that binary/arith circuit
that's like 20 years ago,

471
00:22:15,040 --> 00:22:17,909
you should be using more
modern representation.

472
00:22:17,910 --> 00:22:20,140
Function representations are as important

473
00:22:20,140 --> 00:22:21,600
as the protocol for security

474
00:22:21,600 --> 00:22:24,580
as well as efficiency
and it's can be in fact,

475
00:22:24,580 --> 00:22:27,199
more important for performance.

476
00:22:27,200 --> 00:22:29,880
If you're building a
secure computation system,

477
00:22:29,880 --> 00:22:32,060
consider the way it
functions is gonna be used

478
00:22:32,060 --> 00:22:33,929
by your system, how are they
going to be represented?

479
00:22:33,930 --> 00:22:36,430
How are you gonna compile
the abstract representation

480
00:22:36,430 --> 00:22:40,220
that the user uses into the
one that the system needs?

481
00:22:40,220 --> 00:22:41,890
And if you're looking for topics insecure

482
00:22:41,890 --> 00:22:43,530
computation research,

483
00:22:43,530 --> 00:22:44,829
there's (mumbles)

484
00:22:44,829 --> 00:22:46,300
but a lot of them are really...

485
00:22:46,300 --> 00:22:49,580
This area of compilation
and function representation

486
00:22:49,580 --> 00:22:51,919
is very rarely looked at,

487
00:22:51,920 --> 00:22:55,480
but it's really where all the
effort in practical MPC is.

488
00:22:55,480 --> 00:22:57,130
So stop looking at protocols,

489
00:22:57,130 --> 00:23:01,650
stop looking at theory and
start looking at compilation.

490
00:23:01,650 --> 00:23:02,690
Thank you very much.

491
00:23:02,690 --> 00:23:04,443
And I hope you enjoyed the talk.

492
00:23:07,380 --> 00:23:08,780
- So hi everybody.

493
00:23:08,780 --> 00:23:10,810
We now present a paper
who believe you're still

494
00:23:10,810 --> 00:23:12,800
as via multi-party computation.

495
00:23:12,800 --> 00:23:14,930
And this is the result
of the collaboration

496
00:23:14,930 --> 00:23:17,620
between me, Ivan Damgard and Peter Scholl

497
00:23:17,620 --> 00:23:19,389
from Aarhus University,

498
00:23:19,390 --> 00:23:21,780
Seven Trieflinger from Bosch.

499
00:23:21,780 --> 00:23:24,100
Oblivious TLS is a multi-party execution

500
00:23:24,100 --> 00:23:25,500
of the TLS endpoint,

501
00:23:25,500 --> 00:23:28,210
and in particular, it's
a protocol that allows

502
00:23:28,210 --> 00:23:31,730
a set of parties consistent
in a composite server

503
00:23:31,730 --> 00:23:35,830
to securely communicate with
any client of the internet.

504
00:23:35,830 --> 00:23:37,850
And in particular, the
clients don't need to know

505
00:23:37,850 --> 00:23:41,570
that multi-party computation
is used at the service side.

506
00:23:41,570 --> 00:23:43,923
They just need to support TLS.

507
00:23:45,120 --> 00:23:47,830
We now introduce what
multi-party computation is

508
00:23:47,830 --> 00:23:49,290
through a practical example.

509
00:23:49,290 --> 00:23:52,480
So suppose that we have
the pharmaceutical company

510
00:23:52,480 --> 00:23:53,980
and the public health system,

511
00:23:53,980 --> 00:23:56,460
all them some sensitive
data X, for instance

512
00:23:56,460 --> 00:23:58,880
they have data of the patients.

513
00:23:58,880 --> 00:24:01,270
And suppose that the
pharmaceutical company is carrying

514
00:24:01,270 --> 00:24:04,350
out some research and would
like to evaluate the function F

515
00:24:04,350 --> 00:24:06,939
over the sensitive data X.

516
00:24:06,940 --> 00:24:10,070
We can also assume that the
function takes us input those

517
00:24:10,070 --> 00:24:13,409
secret parameters way that
the company wants to protect

518
00:24:13,410 --> 00:24:15,370
from competitors.

519
00:24:15,370 --> 00:24:17,629
Clearly for legal reasons

520
00:24:17,630 --> 00:24:20,900
the public health system is
not allowed to disclose X.

521
00:24:20,900 --> 00:24:23,300
So the question is, is
it possible to compute F

522
00:24:23,300 --> 00:24:27,800
of X and Y preserving the
confidentiality of X and Y?

523
00:24:27,800 --> 00:24:30,193
The answer turns out to
be, yes, it is possible.

524
00:24:30,193 --> 00:24:32,530
A multi-party computation is the sub field

525
00:24:32,530 --> 00:24:35,322
of cryptography that deals
with this kind of problems.

526
00:24:36,320 --> 00:24:38,470
One of the main techniques on which

527
00:24:38,470 --> 00:24:41,300
this protocol based on
is called secret sharing.

528
00:24:41,300 --> 00:24:43,560
And we explain how it
works in our example.

529
00:24:43,560 --> 00:24:46,850
So the public health system
can split X into two channels

530
00:24:46,850 --> 00:24:48,159
X one and X two.

531
00:24:48,160 --> 00:24:51,270
And we can say that
there sum is equal to X.

532
00:24:51,270 --> 00:24:52,629
And here are the important thing is

533
00:24:52,630 --> 00:24:55,120
that none of the two
tongues alone is sufficient

534
00:24:55,120 --> 00:24:57,300
to retrieve any information about X.

535
00:24:57,300 --> 00:24:58,812
We need both of the chunks.

536
00:24:59,850 --> 00:25:01,949
So the company can do
the same thing with Y.

537
00:25:01,950 --> 00:25:05,430
And after that, the public
health system can send X one

538
00:25:05,430 --> 00:25:07,750
to the company, keeping X two a secret.

539
00:25:07,750 --> 00:25:10,040
And here, the process
doesn't leak any information

540
00:25:10,040 --> 00:25:14,030
because the company needs
also X two to retrieve X.

541
00:25:14,030 --> 00:25:15,930
The same is done with Y.

542
00:25:15,930 --> 00:25:18,323
And yeah, now we have a
secret sharing of data.

543
00:25:20,230 --> 00:25:22,050
There are particular protocols that permit

544
00:25:22,050 --> 00:25:25,070
to perform a computation
over secret share data,

545
00:25:25,070 --> 00:25:27,220
opting new secret, shared outputs.

546
00:25:27,220 --> 00:25:30,040
And the process doesn't
leak any information.

547
00:25:30,040 --> 00:25:33,159
And now F of X and Y is
just the sum of Z one

548
00:25:33,160 --> 00:25:34,626
and Z two.

549
00:25:34,626 --> 00:25:36,520
The public health system
can then send it through

550
00:25:36,520 --> 00:25:37,440
to the company,

551
00:25:37,440 --> 00:25:40,623
which can then reconstruct what it wants.

552
00:25:42,000 --> 00:25:44,200
Okay. For the moment, we have assumed

553
00:25:44,200 --> 00:25:46,160
that the parties have all their inputs

554
00:25:46,160 --> 00:25:50,190
but what if the inputs
are supplied by clients?

555
00:25:50,190 --> 00:25:54,190
So we have just two parties
that perform computation

556
00:25:54,190 --> 00:25:55,740
in a distributed way.

557
00:25:55,740 --> 00:26:00,513
And there is a continuous
exchange of messages between them.

558
00:26:01,400 --> 00:26:03,070
We now introduce a new character.

559
00:26:03,070 --> 00:26:07,010
This guy holding some
personnel has data W,

560
00:26:07,010 --> 00:26:10,140
and this guy believes in
the importance of research

561
00:26:10,140 --> 00:26:12,480
but at the same time, he's
a little bit skeptical

562
00:26:12,480 --> 00:26:17,210
about the privacy and the
confidentiality of its own data.

563
00:26:17,210 --> 00:26:21,350
So how can this guy input
W into the computation,

564
00:26:21,350 --> 00:26:23,122
preserving privacy.

565
00:26:24,090 --> 00:26:25,820
One naive solution is the following.

566
00:26:25,820 --> 00:26:27,700
We can use some kind of secret sharing.

567
00:26:27,700 --> 00:26:31,270
So we split W into two
chunks, W one and W two,

568
00:26:31,270 --> 00:26:33,840
and we send W one to the company and W two

569
00:26:33,840 --> 00:26:35,649
to the public health system.

570
00:26:35,650 --> 00:26:38,640
Now W one in W two can be
input into the computation

571
00:26:38,640 --> 00:26:40,620
and we can compute F of W.

572
00:26:40,620 --> 00:26:43,889
And no information about
W is leaked to the parties

573
00:26:43,890 --> 00:26:46,200
as long as they don't collude.

574
00:26:46,200 --> 00:26:47,590
And here we have to trust them.

575
00:26:47,590 --> 00:26:49,070
There is no other way.

576
00:26:49,070 --> 00:26:51,700
For instance, we can say
that the public health system

577
00:26:51,700 --> 00:26:53,830
is not interested in W

578
00:26:53,830 --> 00:26:55,929
and therefore it will follow the protocol.

579
00:26:56,880 --> 00:26:59,640
Anyway, there is a
problem because the client

580
00:26:59,640 --> 00:27:02,070
needs to know how many parties they are,

581
00:27:02,070 --> 00:27:05,179
who they are, what type of
secret sharing they use,

582
00:27:05,180 --> 00:27:07,520
what type of parameters
the multi-party computation

583
00:27:07,520 --> 00:27:08,750
protocol uses.

584
00:27:08,750 --> 00:27:11,360
And yet all this information
is usually not available.

585
00:27:11,360 --> 00:27:16,360
So it compromises the
usability of this service.

586
00:27:17,270 --> 00:27:19,600
And as our issue is that
one of the two parties,

587
00:27:19,600 --> 00:27:22,110
when one of the two parties is malicious,

588
00:27:22,110 --> 00:27:23,719
there are security concerns

589
00:27:23,720 --> 00:27:26,683
and that complicates all the situation.

590
00:27:27,880 --> 00:27:30,780
Okay oblivious TLS tries
to solve these problems.

591
00:27:30,780 --> 00:27:33,889
And yeah, the idea is that
now there is a big mind time

592
00:27:33,890 --> 00:27:35,890
between the client and the parties,

593
00:27:35,890 --> 00:27:39,410
and the client doesn't know
anything about what's going on

594
00:27:39,410 --> 00:27:40,543
on the other side.

595
00:27:42,920 --> 00:27:46,590
We want to use TLS to
securely communicate W

596
00:27:46,590 --> 00:27:48,449
but we use it in a special way

597
00:27:48,450 --> 00:27:50,810
because now the server
is not a user server

598
00:27:50,810 --> 00:27:52,730
it is a composite server.

599
00:27:52,730 --> 00:27:55,270
It is made of the union of two parties.

600
00:27:55,270 --> 00:27:58,330
And if on the left hand side,
we have a symmetric key K

601
00:27:58,330 --> 00:28:01,110
on the right hand side,
the key is secret shared.

602
00:28:01,110 --> 00:28:04,240
So none of the two parties know the value

603
00:28:04,240 --> 00:28:06,383
of K they just hold chance of it.

604
00:28:07,580 --> 00:28:11,179
And so the client can
encrypt W using the key K

605
00:28:11,180 --> 00:28:14,060
and none of the two parties
can retrieve the plain text

606
00:28:14,060 --> 00:28:16,379
because nobody knows K.

607
00:28:16,380 --> 00:28:18,940
What they have to do is to
use a multi-party protocol

608
00:28:18,940 --> 00:28:21,362
that takes us into the ciphertexts

609
00:28:21,362 --> 00:28:23,110
and the two chunks of this key

610
00:28:23,110 --> 00:28:26,263
and it aborts a secret
sharing of the plain text.

611
00:28:27,580 --> 00:28:30,960
Specifically, what we
designed is this decrypt

612
00:28:30,960 --> 00:28:34,370
black box protocol that takes
us into the chunks of the key

613
00:28:34,370 --> 00:28:35,939
and the ciphertext.

614
00:28:35,940 --> 00:28:39,110
And it'll put a secret
chain of the plain text.

615
00:28:39,110 --> 00:28:43,139
Now, the prior place can
either reconstruct the message

616
00:28:43,140 --> 00:28:43,973
if needed.

617
00:28:43,973 --> 00:28:45,780
Otherwise they can keep it in shared form

618
00:28:45,780 --> 00:28:49,093
and they can compute computations over it.

619
00:28:50,090 --> 00:28:52,760
If the server has to reply to the client,

620
00:28:52,760 --> 00:28:57,310
we can also use this encrypt
protocol that we designed

621
00:28:57,310 --> 00:28:59,580
that takes us in put the chunks of the key

622
00:28:59,580 --> 00:29:01,280
and the chunks of the plain text.

623
00:29:01,280 --> 00:29:03,053
And it outputs a public ciphertexts

624
00:29:03,053 --> 00:29:05,543
that can be sent back to the client.

625
00:29:06,840 --> 00:29:09,550
Okay. So the security is
based on this secret sharing

626
00:29:09,550 --> 00:29:12,440
of the symmetric key but
how can we obtain that?

627
00:29:12,440 --> 00:29:15,140
That not a straightforward?

628
00:29:15,140 --> 00:29:18,290
So in TLS, the symmetric keys are obtain

629
00:29:18,290 --> 00:29:20,020
using public key cryptography

630
00:29:20,020 --> 00:29:22,650
and in particular, Diffie-Hellman.

631
00:29:22,650 --> 00:29:25,100
But if the secret key is
known to one of the two

632
00:29:25,100 --> 00:29:29,179
parties that party can
reconstruct the symmetric key

633
00:29:29,180 --> 00:29:32,560
and all the security is compromised.

634
00:29:32,560 --> 00:29:34,560
So nobody has to know the secret key.

635
00:29:34,560 --> 00:29:36,133
We have to secret share it.

636
00:29:37,000 --> 00:29:41,980
The parties hold chunks, and
they know nothing about escape.

637
00:29:41,980 --> 00:29:43,990
The public key instead must be public

638
00:29:43,990 --> 00:29:47,710
because we have to send it to the clients.

639
00:29:47,710 --> 00:29:50,950
So we designed this Diffie-Hellman
protocol that takes us

640
00:29:50,950 --> 00:29:53,100
into the chance of the secret key

641
00:29:53,100 --> 00:29:54,969
and the public key of the client,

642
00:29:54,970 --> 00:29:57,630
and this protocol outputs
the secret sharing

643
00:29:57,630 --> 00:29:59,780
of the symmetric key.

644
00:29:59,780 --> 00:30:01,860
And the letter can then be used

645
00:30:01,860 --> 00:30:05,550
in during the encryption and decryption.

646
00:30:06,490 --> 00:30:09,350
We explain a little bit
better what we do here.

647
00:30:09,350 --> 00:30:11,209
We use elliptic curve, Diffie-Hellman

648
00:30:11,210 --> 00:30:13,360
because it's faster and more common.

649
00:30:13,360 --> 00:30:15,969
And suppose that B is the
base point of the curve

650
00:30:15,970 --> 00:30:18,410
and let Q be it's order.

651
00:30:18,410 --> 00:30:21,290
Let P be the clients public him.

652
00:30:21,290 --> 00:30:25,780
And yet, as we said, the
secret key is secret shared.

653
00:30:25,780 --> 00:30:29,740
So sk is the sum of a one
and a two modular cube.

654
00:30:29,740 --> 00:30:32,020
And here you can understand
the new formation

655
00:30:32,020 --> 00:30:35,703
usually by the knowledge of
just one of the two chunks.

656
00:30:37,716 --> 00:30:41,199
The public key is clearly
sk times B as usual.

657
00:30:41,200 --> 00:30:42,960
So we can try to do the following.

658
00:30:42,960 --> 00:30:46,800
So the company Z one to a one times three

659
00:30:46,800 --> 00:30:51,320
and the public had systems
that Z two to a two times P.

660
00:30:51,320 --> 00:30:53,060
And yeah, we can understand

661
00:30:53,060 --> 00:30:54,690
that this is kind of what we want,

662
00:30:54,690 --> 00:30:57,720
because Z one plus Z
two over elliptic curve

663
00:30:57,720 --> 00:30:59,920
is exactly sk times P

664
00:30:59,920 --> 00:31:02,380
the point output by Deffium.

665
00:31:02,380 --> 00:31:04,500
However, there is a little problem because

666
00:31:04,500 --> 00:31:06,940
what we want is a secret
sharing of the coordinates

667
00:31:06,940 --> 00:31:08,200
of this point.

668
00:31:08,200 --> 00:31:12,590
And yeah, it is so clear how to derive it

669
00:31:12,590 --> 00:31:14,413
from a secret-sharing of this type.

670
00:31:15,870 --> 00:31:18,810
So we have to do something
a little bit different.

671
00:31:18,810 --> 00:31:22,129
We use this top post which
are called W authenticated

672
00:31:22,130 --> 00:31:22,963
top post

673
00:31:22,963 --> 00:31:25,460
and they are generated
in a pre-processing phase

674
00:31:25,460 --> 00:31:28,050
using a technique called cut-and-choose.

675
00:31:28,050 --> 00:31:30,530
Each of them can be used at most ones.

676
00:31:30,530 --> 00:31:32,320
And yeah, R one and R two

677
00:31:32,320 --> 00:31:34,830
are random points of the curve.

678
00:31:34,830 --> 00:31:37,473
In particular, there are
shares of the random point R

679
00:31:37,473 --> 00:31:39,263
that is known to the body.

680
00:31:40,450 --> 00:31:43,450
x one y one, x two and y
two are instead elements

681
00:31:43,450 --> 00:31:46,620
of the field on which
the curve is defined.

682
00:31:46,620 --> 00:31:48,013
And they are the shares
of the coordinates of R.

683
00:31:51,460 --> 00:31:52,890
How do we proceed?

684
00:31:52,890 --> 00:31:55,910
The company sends a one times P plus R one

685
00:31:55,910 --> 00:31:57,540
to the public health system

686
00:31:57,540 --> 00:32:01,750
which replies with a similar
message using a two and R2.

687
00:32:01,750 --> 00:32:03,420
And here, no information is leaked

688
00:32:03,420 --> 00:32:07,150
about the secret key,
because R one and R two,

689
00:32:07,150 --> 00:32:09,830
are random points that
mask all the information

690
00:32:09,830 --> 00:32:11,233
about a one and a two.

691
00:32:12,730 --> 00:32:15,590
Later on the parties
can sum the two points

692
00:32:15,590 --> 00:32:18,889
obtaining sk times B the
output of Deffie-Hellman

693
00:32:18,890 --> 00:32:22,400
plus the random point R
that is known to nobody.

694
00:32:22,400 --> 00:32:25,633
So this point doesn't
leak any information to.

695
00:32:28,220 --> 00:32:30,250
Yeah, now we have to subtract R.

696
00:32:30,250 --> 00:32:35,020
Are in order to retrieve the
coordinates of sk times P

697
00:32:35,020 --> 00:32:39,250
and therefore we use this
elliptic curve, subtraction

698
00:32:39,250 --> 00:32:42,700
like books protocol which
uses fine coordinates,

699
00:32:42,700 --> 00:32:44,710
this rather easy to implement it.

700
00:32:44,710 --> 00:32:47,760
We just need one division and one square.

701
00:32:47,760 --> 00:32:51,170
And this protocol takes
us into the coordinates

702
00:32:51,170 --> 00:32:53,630
of the public point t one, t two.

703
00:32:53,630 --> 00:32:55,710
And the coordinates of R,

704
00:32:55,710 --> 00:32:57,080
the shares of the coordinates of R,

705
00:32:57,080 --> 00:32:59,923
therefore X one Y one X two and Y two.

706
00:33:00,930 --> 00:33:03,460
The protocol performs the subtraction.

707
00:33:03,460 --> 00:33:07,400
And in the end, we obtain a secret sharing

708
00:33:07,400 --> 00:33:09,540
of the coordinates of sk times P.

709
00:33:09,540 --> 00:33:10,783
Let it be S.

710
00:33:11,750 --> 00:33:15,550
Later on we can derive
the symmetric keys from S

711
00:33:16,400 --> 00:33:18,023
obtaining them in shared four.

712
00:33:19,370 --> 00:33:20,203
Okay.

713
00:33:20,203 --> 00:33:21,860
Regarding performance

714
00:33:21,860 --> 00:33:24,100
as for every multi-party
computation protocol

715
00:33:24,100 --> 00:33:27,909
security comes at the cost of efficiency.

716
00:33:27,910 --> 00:33:30,630
We did some experiments
with two parties over a LAN

717
00:33:30,630 --> 00:33:33,900
and the handshake takes around one second.

718
00:33:33,900 --> 00:33:37,460
Whereas the throughput of
AES-GCM is around three megabytes

719
00:33:37,460 --> 00:33:41,150
per second, based on the
result of other people.

720
00:33:41,150 --> 00:33:44,180
And here we only take into
account the online phase.

721
00:33:44,180 --> 00:33:46,720
We don't consider the
print process in phase

722
00:33:46,720 --> 00:33:49,403
that is needed by the procedure.

723
00:33:50,560 --> 00:33:53,752
So to summarize the results oblivious TLS

724
00:33:53,752 --> 00:33:56,480
is a multi-party execution
of the TLS standpoint

725
00:33:56,480 --> 00:33:58,640
and this supports any number of parties.

726
00:33:58,640 --> 00:34:01,490
So in our example, we
just use two parties,

727
00:34:01,490 --> 00:34:04,303
but in general everything
is fine with any parties.

728
00:34:05,610 --> 00:34:07,669
The protocols can be used at service side

729
00:34:07,670 --> 00:34:09,469
but also at client's side.

730
00:34:09,469 --> 00:34:13,359
And it is based on a multi-party
version of elliptic curve

731
00:34:13,360 --> 00:34:17,699
Diffie-Hellman of
AES-GCM, and in the paper,

732
00:34:17,699 --> 00:34:22,040
we also present a Novel MPC-friendly AEAD,

733
00:34:22,040 --> 00:34:23,192
and yeah,

734
00:34:24,260 --> 00:34:27,860
this is particularly efficient
in a multi-party context

735
00:34:27,860 --> 00:34:30,933
but usually it is not
supported by the clients.

736
00:34:33,440 --> 00:34:35,620
The authentication is instead guaranteed

737
00:34:35,620 --> 00:34:38,192
by a threshold EdDSA signature.

738
00:34:39,480 --> 00:34:42,270
In order to apply what I presented today,

739
00:34:42,270 --> 00:34:46,699
my suggestion is to just
consider the potential

740
00:34:46,699 --> 00:34:47,949
of multi-party computation

741
00:34:47,949 --> 00:34:50,259
and the many interesting applications.

742
00:34:50,260 --> 00:34:53,909
And then you can reflect
on how applications

743
00:34:53,909 --> 00:34:56,679
can benefit from oblivious TLS.

744
00:34:56,679 --> 00:34:57,560
And, yeah, that's all.

745
00:34:57,560 --> 00:34:59,437
So thank you for your attention.

