1
00:00:02,400 --> 00:00:04,040
- Hello, and welcome to our session

2
00:00:04,040 --> 00:00:06,140
on Multi-Cloud Security Monitoring

3
00:00:06,140 --> 00:00:08,583
and CIS Benchmarks Evaluation at Scale.

4
00:00:09,667 --> 00:00:11,390
This session has been presented together

5
00:00:11,390 --> 00:00:15,170
by my colleague, Prasoon
Dwivedi and me Susam Pal.

6
00:00:15,170 --> 00:00:16,610
We have both been working together

7
00:00:16,610 --> 00:00:18,580
on multi-Cloud security at a large scale

8
00:00:18,580 --> 00:00:20,520
for the last three years.

9
00:00:20,520 --> 00:00:23,800
Before going any further,
let me introduce myself.

10
00:00:23,800 --> 00:00:25,270
My name is Susam Pal,

11
00:00:25,270 --> 00:00:28,490
I'm a security architect at
Walmart Global Technology.

12
00:00:28,490 --> 00:00:30,880
I have been working in the
information security space

13
00:00:30,880 --> 00:00:32,659
for about 15 years.

14
00:00:32,659 --> 00:00:35,830
Cloud security is one of my
special areas of interest.

15
00:00:35,830 --> 00:00:38,559
I'm also very passionate
about open source software.

16
00:00:38,560 --> 00:00:41,490
I love contributing to
existing open source projects,

17
00:00:41,490 --> 00:00:44,560
as well as write and
maintain my own projects.

18
00:00:44,560 --> 00:00:45,810
We will now take a brief look

19
00:00:45,810 --> 00:00:47,720
at what we will discuss in this session.

20
00:00:47,720 --> 00:00:49,449
Before we do that,

21
00:00:49,450 --> 00:00:51,730
please feel free to ask
questions throughout the session

22
00:00:51,730 --> 00:00:53,860
whenever you have any questions.

23
00:00:53,860 --> 00:00:57,150
Let us now take a brief
look at our agenda here.

24
00:00:57,150 --> 00:00:58,500
We will start with a quick background

25
00:00:58,500 --> 00:01:00,790
about how we got into Cloud security.

26
00:01:00,790 --> 00:01:02,040
We will then discuss features

27
00:01:02,040 --> 00:01:05,140
of our multi-Cloud security
monitoring solution.

28
00:01:05,140 --> 00:01:06,770
We will spend a lot of time

29
00:01:06,770 --> 00:01:09,869
discussing the design of the solution,

30
00:01:09,870 --> 00:01:11,910
how it caters to multiple Clouds,

31
00:01:11,910 --> 00:01:15,660
how it addresses the inconsistency
in concepts, terminology,

32
00:01:15,660 --> 00:01:18,490
and data formats between various Clouds.

33
00:01:18,490 --> 00:01:20,979
After discussing the
design, Prasoon will show us

34
00:01:20,980 --> 00:01:22,530
how this design can be used

35
00:01:22,530 --> 00:01:25,430
to implement CIS benchmark evaluation

36
00:01:25,430 --> 00:01:27,450
and reporting across multiple Clouds

37
00:01:27,450 --> 00:01:29,480
with some concrete examples.

38
00:01:29,480 --> 00:01:31,720
Finally, we'll talk about
the results we obtained

39
00:01:31,720 --> 00:01:33,080
using our solution.

40
00:01:33,080 --> 00:01:35,860
We will talk about other
industry standards out there,

41
00:01:35,860 --> 00:01:38,133
followed by a quick recap and conclusion.

42
00:01:39,960 --> 00:01:42,110
Before we discuss our monitoring solution,

43
00:01:42,110 --> 00:01:43,150
let us take a few moments

44
00:01:43,150 --> 00:01:46,120
to emphasize the importance
of Cloud security.

45
00:01:46,120 --> 00:01:47,540
In the last several years,

46
00:01:47,540 --> 00:01:49,400
there has been a very strong trend

47
00:01:49,400 --> 00:01:50,990
of more and more companies

48
00:01:50,990 --> 00:01:53,410
moving larger and larger
portion of their workloads

49
00:01:53,410 --> 00:01:54,789
to Clouds.

50
00:01:54,790 --> 00:01:57,580
In fact, as for many studies and focus,

51
00:01:57,580 --> 00:02:01,530
this trend is going to continue
for the foreseeable future.

52
00:02:01,530 --> 00:02:03,850
Cisco Global Cloud Index for example,

53
00:02:03,850 --> 00:02:07,009
predicts that in this year 2021,

54
00:02:07,010 --> 00:02:09,720
94% of workloads and compute instances

55
00:02:09,720 --> 00:02:12,180
will be processed by Cloud data centers.

56
00:02:12,180 --> 00:02:13,930
As the usage of Cloud increases,

57
00:02:13,930 --> 00:02:16,503
so does our emphasis on Cloud security.

58
00:02:18,250 --> 00:02:20,480
This increased emphasis on Cloud security

59
00:02:20,480 --> 00:02:21,920
is very relevant today.

60
00:02:21,920 --> 00:02:24,320
Here is an interesting
piece of statistics.

61
00:02:24,320 --> 00:02:26,079
In 2019 alone,

62
00:02:26,080 --> 00:02:29,510
there were 7.9 billion
data records compromised.

63
00:02:29,510 --> 00:02:31,370
It is a huge number.

64
00:02:31,370 --> 00:02:34,580
As we began working on Cloud security,

65
00:02:34,580 --> 00:02:37,570
we realized that creating
Cloud security monitoring tools

66
00:02:37,570 --> 00:02:41,459
that can work uniformly across
multiple Cloud providers

67
00:02:41,460 --> 00:02:43,210
comes with certain challenges.

68
00:02:43,210 --> 00:02:46,140
Most of these challenges are
due to lack of standardization

69
00:02:46,140 --> 00:02:48,059
between the various Cloud providers.

70
00:02:48,060 --> 00:02:51,310
Every Cloud provider has
its own API data formats,

71
00:02:51,310 --> 00:02:53,690
concepts and terminology.

72
00:02:53,690 --> 00:02:56,670
Some of the challenge also
comes in terms of performance.

73
00:02:56,670 --> 00:02:58,030
Running a Cloud monitoring tool

74
00:02:58,030 --> 00:03:00,550
on a large Cloud infrastructure,

75
00:03:00,550 --> 00:03:03,960
say, one consisting of 100,000 computes,

76
00:03:03,960 --> 00:03:06,140
hundreds of databases and so on,

77
00:03:06,140 --> 00:03:07,642
can consume significant time.

78
00:03:08,630 --> 00:03:10,410
So these observations were the motivation

79
00:03:10,410 --> 00:03:13,423
for us to start working on a
Cloud security monitoring tool.

80
00:03:16,080 --> 00:03:17,710
Let us now discuss how to develop

81
00:03:17,710 --> 00:03:19,460
a Cloud security monitoring solution

82
00:03:19,460 --> 00:03:21,720
that can work at a large scale.

83
00:03:21,720 --> 00:03:23,940
No matter what our Cloud
security monitoring tool

84
00:03:23,940 --> 00:03:26,420
looks like, we have to follow a process

85
00:03:26,420 --> 00:03:29,160
to ensure that this tool
is being used correctly.

86
00:03:29,160 --> 00:03:32,350
This process involves
three important steps.

87
00:03:32,350 --> 00:03:35,630
Audit the Cloud periodically
to detect security issues,

88
00:03:35,630 --> 00:03:37,260
patch the security issues.

89
00:03:37,260 --> 00:03:39,767
Most importantly, repeat this process

90
00:03:39,767 --> 00:03:41,633
and look again and again.

91
00:03:43,750 --> 00:03:47,360
The architecture of the solution
has two important aspects,

92
00:03:47,360 --> 00:03:49,320
the framework and the plugins.

93
00:03:49,320 --> 00:03:51,030
There are four types of plugins

94
00:03:51,030 --> 00:03:52,990
that you can see here on this slide.

95
00:03:52,990 --> 00:03:56,150
The framework which is not
explicitly depicted in the slide,

96
00:03:56,150 --> 00:03:58,370
manages these plugins in the background.

97
00:03:58,370 --> 00:04:00,550
We have an open source
reference implementation

98
00:04:00,550 --> 00:04:02,910
of this architecture in Python,

99
00:04:02,910 --> 00:04:04,359
in the form of a fully functional

100
00:04:04,360 --> 00:04:06,290
Cloud security monitoring tool.

101
00:04:06,290 --> 00:04:08,920
We will share a link to it at
the end of this presentation.

102
00:04:08,920 --> 00:04:10,920
Although our tool is written in Python,

103
00:04:10,920 --> 00:04:13,369
it is possible to
implement this architecture

104
00:04:13,370 --> 00:04:15,983
in any other programming
language just as well.

105
00:04:18,959 --> 00:04:20,820
The framework is that part of the code,

106
00:04:20,820 --> 00:04:23,000
that invokes these individual plugins

107
00:04:23,000 --> 00:04:26,120
and establishes the
communication between them.

108
00:04:26,120 --> 00:04:28,720
None of the plugins interact
with each other directly,

109
00:04:28,720 --> 00:04:31,250
they're not even aware of each other.

110
00:04:31,250 --> 00:04:33,900
The Cloud plugins connect
to the Cloud provider

111
00:04:33,900 --> 00:04:35,450
and pull Cloud data.

112
00:04:35,450 --> 00:04:38,539
Then they hand over all this
Cloud data to the framework.

113
00:04:38,540 --> 00:04:41,180
Now, adding support for
a new Cloud provider

114
00:04:41,180 --> 00:04:43,210
is as simple as writing a new plugin

115
00:04:43,210 --> 00:04:46,239
that implements a specific
Cloud plugin interface.

116
00:04:46,240 --> 00:04:49,120
We can show the interface
in an upcoming slide.

117
00:04:49,120 --> 00:04:51,540
Now, the framework receives
these Cloud records

118
00:04:51,540 --> 00:04:53,030
from Cloud plugins,

119
00:04:53,030 --> 00:04:55,609
these records are
typically in JSON format.

120
00:04:55,610 --> 00:04:57,750
They contain various Cloud attributes.

121
00:04:57,750 --> 00:04:59,870
The framework takes these records

122
00:04:59,870 --> 00:05:02,010
and sends them as inputs

123
00:05:02,010 --> 00:05:04,020
to all the configured store plugins

124
00:05:04,020 --> 00:05:06,419
and the event plugins in parallel.

125
00:05:06,420 --> 00:05:08,890
The store plugins know
how to read this records

126
00:05:08,890 --> 00:05:11,969
and send them to different
storage or indexing systems.

127
00:05:11,970 --> 00:05:15,380
Like MongoDB, ElasticSearch, Splunk,

128
00:05:15,380 --> 00:05:17,409
or even relational databases.

129
00:05:17,410 --> 00:05:18,780
We have one store plugin

130
00:05:18,780 --> 00:05:20,962
for each storage or indexing system.

131
00:05:21,990 --> 00:05:23,660
These arrows between the plugins

132
00:05:23,660 --> 00:05:25,680
are implemented in the framework there.

133
00:05:25,680 --> 00:05:26,910
Like I mentioned earlier,

134
00:05:26,910 --> 00:05:29,280
the plugins are not even
aware of each other.

135
00:05:29,280 --> 00:05:30,219
The framework takes care

136
00:05:30,220 --> 00:05:33,740
of establishing the communication
between the plugins.

137
00:05:33,740 --> 00:05:36,370
It runs each plugin in its own process.

138
00:05:36,370 --> 00:05:39,490
These arrows between the
plugins are multiprocessing cues

139
00:05:39,490 --> 00:05:42,220
that are set up by the framework itself.

140
00:05:42,220 --> 00:05:44,910
In this diagram, we show the
arrows connected directly

141
00:05:44,910 --> 00:05:46,380
from one plugin to another,

142
00:05:46,380 --> 00:05:49,020
because that is the logical
view of what is going on here.

143
00:05:49,020 --> 00:05:50,719
In the actual implementation though,

144
00:05:50,720 --> 00:05:52,500
there is always the framework in between

145
00:05:52,500 --> 00:05:53,973
that is managing these cues.

146
00:05:54,920 --> 00:05:57,360
You may notice that the
framework takes the Cloud data

147
00:05:57,360 --> 00:05:59,850
and feeds it to both the
store and event plugins

148
00:05:59,850 --> 00:06:01,250
at the same time.

149
00:06:01,250 --> 00:06:02,130
This has done so,

150
00:06:02,130 --> 00:06:05,950
because as we are storing all
this data in storage systems

151
00:06:05,950 --> 00:06:08,940
we also want to start
looking for security issues.

152
00:06:08,940 --> 00:06:10,590
Each event plugin specializes

153
00:06:10,590 --> 00:06:13,210
in looking at one type of security issue.

154
00:06:13,210 --> 00:06:15,330
Or each security issue found,

155
00:06:15,330 --> 00:06:18,015
the event plugins
generate an event record.

156
00:06:18,016 --> 00:06:21,030
And event record, it's just
another adjacent object

157
00:06:21,030 --> 00:06:24,393
that describes the security
issue found by the event plugin.

158
00:06:25,850 --> 00:06:28,360
The alert plugins take this event records

159
00:06:28,360 --> 00:06:30,270
and send them off as alerts.

160
00:06:30,270 --> 00:06:32,020
These alert plugins
receive the event records

161
00:06:32,020 --> 00:06:33,229
in JSON format.

162
00:06:33,230 --> 00:06:34,540
They convert these JSON objects

163
00:06:34,540 --> 00:06:36,450
into a suitable format for alerting.

164
00:06:36,450 --> 00:06:38,719
For example, a syslog alert plugin

165
00:06:38,720 --> 00:06:40,800
picks the most important
attributes and values

166
00:06:40,800 --> 00:06:42,030
from this JSON object,

167
00:06:42,030 --> 00:06:43,979
and creates the syslog message out of it.

168
00:06:43,980 --> 00:06:46,470
And sends it to a syslog receiver.

169
00:06:46,470 --> 00:06:49,640
The event plugin also sends
all this data to store plugins.

170
00:06:49,640 --> 00:06:52,430
That in fact depends on how we
have configured the solution.

171
00:06:52,430 --> 00:06:54,760
We may configure some of
our store destinations

172
00:06:54,760 --> 00:06:56,610
as alerting destinations too.

173
00:06:56,610 --> 00:06:59,520
For example, as we send out
alerts for security issues

174
00:06:59,520 --> 00:07:02,780
to a syslog receiver, we might
want to index this alerts

175
00:07:02,780 --> 00:07:04,799
to our ElasticSearch Index too.

176
00:07:04,800 --> 00:07:08,300
That is why this framework
supports using store plugins

177
00:07:08,300 --> 00:07:09,373
as alert plugins too.

178
00:07:13,560 --> 00:07:16,910
This is the interface that a
Cloud login must implement.

179
00:07:16,910 --> 00:07:19,370
It is a simple class
that is just two methods.

180
00:07:19,370 --> 00:07:20,470
It has an _init_ method,

181
00:07:20,470 --> 00:07:22,370
that takes the connection parameters.

182
00:07:22,370 --> 00:07:24,760
These connection parameters
are picked up by the framework,

183
00:07:24,760 --> 00:07:26,539
from the configuration file.

184
00:07:26,540 --> 00:07:28,570
Then it instantly shapes
an object of this class

185
00:07:28,570 --> 00:07:29,940
with these parameters.

186
00:07:31,260 --> 00:07:33,500
The second method in the
Cloud Plugin interface

187
00:07:33,500 --> 00:07:34,790
is the read method.

188
00:07:34,790 --> 00:07:37,370
The read method reads
Cloud data objects directly

189
00:07:37,370 --> 00:07:41,620
from the Cloud, using the Cloud
providers, SDK or REST API,

190
00:07:41,620 --> 00:07:44,330
and returns these data
objects to the framework.

191
00:07:44,330 --> 00:07:46,630
We will have one Cloud plugin like this

192
00:07:46,630 --> 00:07:49,243
for each Cloud provider
that we want to support.

193
00:07:51,710 --> 00:07:53,979
The store plugin has a
simple interface too.

194
00:07:53,980 --> 00:07:55,120
There is an _init_ method

195
00:07:55,120 --> 00:07:57,620
with parameters that
identify the destination.

196
00:07:57,620 --> 00:08:00,280
For example, this could be IP address

197
00:08:00,280 --> 00:08:04,059
and portal for a database,
or in URL, to post data to,

198
00:08:04,060 --> 00:08:05,430
or even a file system path.

199
00:08:05,430 --> 00:08:06,700
Then there is a write method

200
00:08:06,700 --> 00:08:08,520
that knows how to take the record

201
00:08:08,520 --> 00:08:10,630
and write it to a storage destination.

202
00:08:10,630 --> 00:08:12,250
The storage destination

203
00:08:12,250 --> 00:08:14,720
could be something as
simple as a local file,

204
00:08:14,720 --> 00:08:16,370
or could be as sophisticated

205
00:08:16,370 --> 00:08:19,080
as an index in an ElasticSearch.

206
00:08:19,080 --> 00:08:21,409
The framework feeds the
data from Cloud plugins

207
00:08:21,410 --> 00:08:22,970
to event plugins too.

208
00:08:22,970 --> 00:08:24,960
The event like it has an evaluator,

209
00:08:24,960 --> 00:08:27,099
that inspects the incoming record

210
00:08:27,100 --> 00:08:29,800
and analyzes if the data in the record

211
00:08:29,800 --> 00:08:31,460
shows a security issue.

212
00:08:31,460 --> 00:08:34,120
In this example, we see
that the event plugin

213
00:08:34,120 --> 00:08:37,179
is checking whether the OS
disc is encrypted or not.

214
00:08:37,179 --> 00:08:38,959
If it is found to be not encrypted,

215
00:08:38,960 --> 00:08:40,410
it generates an event record.

216
00:08:43,010 --> 00:08:44,670
Finally, we have the alert plugin

217
00:08:44,670 --> 00:08:45,910
which takes an event record

218
00:08:45,910 --> 00:08:47,949
and sends to an alerting destination.

219
00:08:47,950 --> 00:08:51,120
The interface is exactly the
same as our store plugins,

220
00:08:51,120 --> 00:08:54,870
because both store and alert
plugins do a very similar task.

221
00:08:54,870 --> 00:08:57,340
They accept records of
interest from the framework,

222
00:08:57,340 --> 00:08:59,900
and send them to different destinations.

223
00:08:59,900 --> 00:09:01,400
It is what worth retreating here,

224
00:09:01,400 --> 00:09:04,630
that one plugin has no
knowledge of the other plugins.

225
00:09:04,630 --> 00:09:07,189
Each plugin is concerned
only with its own task,

226
00:09:07,190 --> 00:09:09,600
it does not even care
about multiprocessing

227
00:09:09,600 --> 00:09:11,650
and communication between plugins.

228
00:09:11,650 --> 00:09:15,100
All the complexity is abstracted
away in the framework.

229
00:09:15,100 --> 00:09:17,807
This design is inspired
by the Unix philosophy,

230
00:09:17,807 --> 00:09:19,657
"Do one thing and do it well."

231
00:09:24,210 --> 00:09:25,550
A quick look at the key features

232
00:09:25,550 --> 00:09:28,130
of the solution we have discussed so far.

233
00:09:28,130 --> 00:09:29,970
The solution is Cloud agnostic.

234
00:09:29,970 --> 00:09:31,660
The framework is not tightly coupled

235
00:09:31,660 --> 00:09:34,050
with any specific Cloud provider.

236
00:09:34,050 --> 00:09:35,729
It is highly extensible,

237
00:09:35,730 --> 00:09:37,580
due to the plugin-based architecture.

238
00:09:39,020 --> 00:09:40,270
The solution is agentless

239
00:09:40,270 --> 00:09:42,430
because this tool does
not have to be installed

240
00:09:42,430 --> 00:09:44,469
within the computes running on the Cloud.

241
00:09:44,470 --> 00:09:46,600
The entire solution can
be run on any system

242
00:09:46,600 --> 00:09:47,850
independent of the Cloud.

243
00:09:49,900 --> 00:09:52,650
It is fast due to the
usage of multiprocessing.

244
00:09:52,650 --> 00:09:54,459
Each plugin is run as a separate process

245
00:09:54,460 --> 00:09:57,140
which allows plugins to run simultaneously

246
00:09:57,140 --> 00:09:58,223
on independent codes.

247
00:09:59,380 --> 00:10:02,200
It's supports generating
reports in multiple formats,

248
00:10:02,200 --> 00:10:04,360
because it supports
multiple storage systems.

249
00:10:04,360 --> 00:10:06,814
Out of the box it supports
Splunk, ElasticSearch,

250
00:10:06,814 --> 00:10:08,900
and MongoDB, and these systems

251
00:10:08,900 --> 00:10:11,400
come with their own dashboard
and reporting tools.

252
00:10:11,400 --> 00:10:14,120
For example, Splunk has Splunk dashboards.

253
00:10:14,120 --> 00:10:17,020
There are tools like Kibana
and grafana for ElasticSearch.

254
00:10:18,660 --> 00:10:21,860
Finally, the solution supports
industry standards with ease.

255
00:10:21,860 --> 00:10:23,450
We will see later in the session,

256
00:10:23,450 --> 00:10:26,720
how easy it is to develop
high-performance event plugins

257
00:10:26,720 --> 00:10:30,140
to perform CIS benchmark
auditing with very little code.

258
00:10:30,140 --> 00:10:32,680
It takes only about 30
to 40 lines of code,

259
00:10:32,680 --> 00:10:36,011
for event plugin.

260
00:10:36,011 --> 00:10:38,640
We will then see what the
actual data looks like.

261
00:10:38,640 --> 00:10:41,060
When a Cloud plugin returns
a Cloud data record,

262
00:10:41,060 --> 00:10:44,280
it arranges the data into
three top level buckets

263
00:10:44,280 --> 00:10:48,910
identified by these three top
level keys, raw, ext, and com.

264
00:10:48,910 --> 00:10:51,100
Ext stands for extended.

265
00:10:51,100 --> 00:10:52,670
Com stands for common.

266
00:10:52,670 --> 00:10:54,829
The purpose of these
keys will become clear

267
00:10:54,830 --> 00:10:56,083
in the next few slides.

268
00:10:58,070 --> 00:11:00,890
The 'Raw' Bucket contains
the original JSON objects

269
00:11:00,890 --> 00:11:03,710
the Cloud plugin receive
from the Cloud directly.

270
00:11:03,710 --> 00:11:06,170
We preserve that entire object as is,

271
00:11:06,170 --> 00:11:08,123
inside the 'Raw' Bucket.

272
00:11:08,124 --> 00:11:10,740
This is an example of a
virtual machine object

273
00:11:10,740 --> 00:11:12,470
we have received from Azure.

274
00:11:12,470 --> 00:11:14,360
The format of this raw data varies a lot

275
00:11:14,360 --> 00:11:16,280
from one Cloud provider to another.

276
00:11:16,280 --> 00:11:18,750
For example, on Google Cloud platform,

277
00:11:18,750 --> 00:11:20,240
the JSON objects for computes

278
00:11:20,240 --> 00:11:22,120
look very different from this.

279
00:11:22,120 --> 00:11:25,220
If you write queries or create
dashboards on this raw data,

280
00:11:25,220 --> 00:11:27,010
it would introduce a significant amount

281
00:11:27,010 --> 00:11:30,407
of Cloud provider specific
keys and values in the queries.

282
00:11:30,407 --> 00:11:32,087
We will also have to write
two different queries

283
00:11:32,087 --> 00:11:34,180
for two different Cloud providers.

284
00:11:34,180 --> 00:11:37,219
This is where the 'Ext'
Bucket comes useful.

285
00:11:37,220 --> 00:11:40,400
The 'Ext' Bucket contains
a lot of contextual data

286
00:11:40,400 --> 00:11:43,010
that is not directly available
from the 'Raw' Bucket.

287
00:11:43,010 --> 00:11:45,480
For example, when we obtain a Cloud record

288
00:11:45,480 --> 00:11:48,980
we want to save which Cloud
we got the record from.

289
00:11:48,980 --> 00:11:51,020
This is an example of contextual data,

290
00:11:51,020 --> 00:11:52,870
because the Cloud plugin knows

291
00:11:52,870 --> 00:11:56,000
which Cloud it connected
to while pulling the data.

292
00:11:56,000 --> 00:11:58,150
We need to save this
information somewhere,

293
00:11:58,150 --> 00:12:00,400
because later during
reporting or querring time,

294
00:12:00,400 --> 00:12:02,470
we might want to narrow down our results

295
00:12:02,470 --> 00:12:04,450
by a specific Cloud provider.

296
00:12:04,450 --> 00:12:07,190
So this contextual data,
is one type of data

297
00:12:07,190 --> 00:12:08,653
we save in the 'Ext' Bucket.

298
00:12:09,570 --> 00:12:11,690
The other type of data we
save in the 'Ext' Bucket

299
00:12:11,690 --> 00:12:13,230
is derived data.

300
00:12:13,230 --> 00:12:16,230
Take a look at the last
values in this JSON example.

301
00:12:16,230 --> 00:12:17,890
The "power_state" value

302
00:12:17,890 --> 00:12:20,689
shows whether VM is
actually powered on or not.

303
00:12:20,690 --> 00:12:22,890
The last field here
named os_disk_encrypted,

304
00:12:24,916 --> 00:12:26,990
tells us whether the operating system disk

305
00:12:26,990 --> 00:12:28,440
is encrypted or not.

306
00:12:28,440 --> 00:12:29,600
Now all of this information

307
00:12:29,600 --> 00:12:31,420
is available in the 'Raw' Bucket,

308
00:12:31,420 --> 00:12:34,650
but the data is very deep
inside of this JSON object.

309
00:12:34,650 --> 00:12:35,483
And the data

310
00:12:35,483 --> 00:12:38,270
is also in a very Cloud
provider specific format.

311
00:12:38,270 --> 00:12:40,600
But concepts like power
state and disk encryption

312
00:12:40,600 --> 00:12:43,300
are general concepts
that apply equally well

313
00:12:43,300 --> 00:12:44,589
to other Cloud providers.

314
00:12:44,590 --> 00:12:47,440
So this data would serve
us better in the long run

315
00:12:47,440 --> 00:12:49,190
if we can extract such general concepts

316
00:12:49,190 --> 00:12:50,950
from the Cloud provider specific data,

317
00:12:50,950 --> 00:12:54,630
and choose uniform names
and data format for them.

318
00:12:54,630 --> 00:12:57,980
This would make querring and
reporting much more convenient,

319
00:12:57,980 --> 00:12:59,963
and also Cloud provider agnostic.

320
00:13:03,150 --> 00:13:04,740
Finally, the 'Com' Bucket,

321
00:13:04,740 --> 00:13:07,290
this bucket contains a lot
of meta-level information

322
00:13:07,290 --> 00:13:08,920
that comes from the (mumbles) bucket.

323
00:13:08,920 --> 00:13:11,079
So, we named it 'com' for common,

324
00:13:11,080 --> 00:13:13,700
because these keys and
values look the same

325
00:13:13,700 --> 00:13:16,360
across all plugins for all Clouds.

326
00:13:16,360 --> 00:13:20,460
For example, the audit_version
gives the audit start time

327
00:13:20,460 --> 00:13:22,550
to serve as an audit version information

328
00:13:22,550 --> 00:13:25,209
that we can use in queries and dashboards.

329
00:13:25,210 --> 00:13:26,910
Let us see another example here.

330
00:13:26,910 --> 00:13:29,920
The origin_type key is
used to record the fact

331
00:13:29,920 --> 00:13:32,469
that this data was obtained
using the Cloud plugin.

332
00:13:34,000 --> 00:13:36,330
That was a quick tour of our Multi-cloud

333
00:13:36,330 --> 00:13:39,470
security monitoring design,
architecture and data formats.

334
00:13:39,470 --> 00:13:42,770
Now Prasoon, will talk about
how we use this concepts

335
00:13:42,770 --> 00:13:45,520
to help us perform
automated Cloud auditing,

336
00:13:45,520 --> 00:13:48,930
and especially how to perform
CIS benchmark evaluation.

337
00:13:48,930 --> 00:13:50,420
Over to you Prasoon.

338
00:13:50,420 --> 00:13:51,650
- Thank you very much, Susam.

339
00:13:51,650 --> 00:13:53,060
Hello everyone?

340
00:13:53,060 --> 00:13:56,010
Before we get started, let
me quickly introduce myself.

341
00:13:56,010 --> 00:13:57,550
My name is Prasoon Gwivedi,

342
00:13:57,550 --> 00:14:01,459
I work as a staff software
engineer at Walmart Global Tech.

343
00:14:01,460 --> 00:14:03,770
I'm based out of Bangalore India.

344
00:14:03,770 --> 00:14:05,880
I've been working in
information security domain

345
00:14:05,880 --> 00:14:07,760
for almost a decade now.

346
00:14:07,760 --> 00:14:11,303
And Cloud security is one
of my areas of interest.

347
00:14:12,510 --> 00:14:15,910
Now coming back to the
agenda of the session,

348
00:14:15,910 --> 00:14:17,673
where to start Cloud auditing?

349
00:14:18,770 --> 00:14:21,730
The effectiveness of a
Cloud auditing program

350
00:14:21,730 --> 00:14:24,600
relies heavily on its scope.

351
00:14:24,600 --> 00:14:26,470
It's already a challenging job

352
00:14:26,470 --> 00:14:28,700
to define the scope of any audit,

353
00:14:28,700 --> 00:14:32,280
but in case of Cloud it
becomes more a daunting task

354
00:14:32,280 --> 00:14:35,073
for a Cloud auditor to define the scope.

355
00:14:36,670 --> 00:14:39,310
This difficulty in scoping

356
00:14:39,310 --> 00:14:41,829
is primarily because of two reasons.

357
00:14:41,830 --> 00:14:44,700
The first reason is, in
a typical Cloud setup,

358
00:14:44,700 --> 00:14:46,180
there can be hundreds and thousands

359
00:14:46,180 --> 00:14:49,859
of heterogeneous
resources working together

360
00:14:49,860 --> 00:14:52,090
to achieve a business objective.

361
00:14:52,090 --> 00:14:53,670
And the second reason is,

362
00:14:53,670 --> 00:14:57,819
the speed at which cybersecurity
landscape is changing.

363
00:14:57,820 --> 00:15:00,293
So this period is very, very, very fast,

364
00:15:01,459 --> 00:15:04,662
and it makes the life of a
security auditor very difficult.

365
00:15:06,060 --> 00:15:08,800
Center for Information Security or CIS

366
00:15:08,800 --> 00:15:12,240
as we know it in short,
publishes benchmarks

367
00:15:12,240 --> 00:15:15,870
for most of the prominent
Cloud service providers.

368
00:15:15,870 --> 00:15:17,980
So these benchmarks from CIS

369
00:15:17,980 --> 00:15:21,239
are available for Microsoft Azure,

370
00:15:21,239 --> 00:15:24,800
Google Cloud Computing
Platform as well as Amazon AWS,

371
00:15:24,800 --> 00:15:25,632
and many others.

372
00:15:27,770 --> 00:15:30,289
So one may ask, what
these CIS benchmarks are.

373
00:15:30,289 --> 00:15:32,020
These CIS benchmarks are nothing

374
00:15:32,020 --> 00:15:36,720
but security best practices
and configuration baselines,

375
00:15:36,720 --> 00:15:39,050
which an organization can follow

376
00:15:39,050 --> 00:15:42,339
in order to eliminate a
common misconfiguration

377
00:15:42,340 --> 00:15:43,600
in their Cloud resources

378
00:15:43,600 --> 00:15:45,683
and hence secure their Cloud resources.

379
00:15:46,890 --> 00:15:48,449
Many of these CIS benchmarks

380
00:15:48,450 --> 00:15:52,730
map directly to one of the
well-known industry standard

381
00:15:52,730 --> 00:15:54,330
or a compliance framework,

382
00:15:54,330 --> 00:15:58,040
such as frameworks and
guidelines from NIST, ISO,

383
00:15:58,040 --> 00:16:01,853
PCI, HIPAA, SOX, and so on.

384
00:16:03,270 --> 00:16:06,720
These CIS benchmarks is
a result of collaboration

385
00:16:06,720 --> 00:16:08,470
between industry experts,

386
00:16:08,470 --> 00:16:11,020
information security practitioners,

387
00:16:11,020 --> 00:16:14,350
subject matter experts,
Cloud providers, vendors,

388
00:16:14,350 --> 00:16:15,903
and of course, people at CIS.

389
00:16:17,200 --> 00:16:19,380
CIS also makes a very conscious effort

390
00:16:19,380 --> 00:16:21,150
to keep these benchmarks updated

391
00:16:21,150 --> 00:16:23,183
with the latest trends in cybersecurity.

392
00:16:24,270 --> 00:16:26,360
And hence for all such reasons,

393
00:16:26,360 --> 00:16:29,780
CIS benchmarks are highly
regarded in the industry.

394
00:16:29,780 --> 00:16:32,480
And hundreds and thousands of businesses

395
00:16:32,480 --> 00:16:34,810
have already adopted CIS benchmarks

396
00:16:34,810 --> 00:16:36,459
for their auditing needs,

397
00:16:36,460 --> 00:16:39,410
as well as to protect their resources

398
00:16:39,410 --> 00:16:41,520
in their journey towards (mumbles).

399
00:16:41,520 --> 00:16:42,453
So moving on.

400
00:16:44,040 --> 00:16:47,550
We've already discussed that
in a typical Cloud setup,

401
00:16:47,550 --> 00:16:49,160
in a typical Cloud infrastructure,

402
00:16:49,160 --> 00:16:54,160
we may have large number of
different types of resources.

403
00:16:55,000 --> 00:16:58,980
These are low cost ephemeral resources,

404
00:16:58,980 --> 00:17:02,400
and they range from
databases, virtual machines,

405
00:17:02,400 --> 00:17:04,660
identity and access management systems.

406
00:17:04,660 --> 00:17:07,170
Storage accounts, networking components,

407
00:17:07,170 --> 00:17:12,170
IOT devices, Web applications
and application services.

408
00:17:13,690 --> 00:17:17,720
So CIS benchmarks for
a given Cloud provider

409
00:17:17,720 --> 00:17:19,583
provides most of these resources.

410
00:17:20,960 --> 00:17:23,819
Also, a results.

411
00:17:23,819 --> 00:17:26,319
Let's say, for example, a virtual machine

412
00:17:26,319 --> 00:17:28,590
offered by two different Cloud providers

413
00:17:28,590 --> 00:17:31,653
may differ in terms of
how it can be configured.

414
00:17:33,430 --> 00:17:37,700
So, this may cause potential risk

415
00:17:37,700 --> 00:17:40,260
if these sources that
are not configured well.

416
00:17:41,200 --> 00:17:44,380
So, CIS also takes care of this issue,

417
00:17:44,380 --> 00:17:46,420
and they may publish additional benchmarks

418
00:17:46,420 --> 00:17:49,450
or different benchmarks for same resources

419
00:17:49,450 --> 00:17:53,363
but offered by two different
Cloud service providers.

420
00:17:55,310 --> 00:17:56,370
So we have talked enough

421
00:17:56,370 --> 00:17:58,139
about center for information security

422
00:17:58,140 --> 00:18:00,890
and the CIS benchmarks.

423
00:18:00,890 --> 00:18:02,933
Now we'll see how the framework,

424
00:18:02,933 --> 00:18:05,230
what Susam talked about earlier,

425
00:18:05,230 --> 00:18:07,600
implements CIS benchmarks.

426
00:18:07,600 --> 00:18:09,882
And we'll do so by means of few examples.

427
00:18:12,360 --> 00:18:16,050
So, on our screen over here,
we see a CIS benchmark.

428
00:18:16,050 --> 00:18:18,780
This CIS benchmark is for Azure Cloud.

429
00:18:18,780 --> 00:18:23,050
And it recommends that, for
all the virtual machines

430
00:18:23,050 --> 00:18:25,379
in Azure subscription,

431
00:18:25,380 --> 00:18:27,733
Operating System desk must be encrypted.

432
00:18:28,780 --> 00:18:29,980
In the next slide we'll see

433
00:18:29,980 --> 00:18:32,030
the rationale behind this recommendation.

434
00:18:33,380 --> 00:18:38,250
So it is of utmost importance
for an organization

435
00:18:38,250 --> 00:18:40,663
as well as an individual
to protect its data.

436
00:18:41,910 --> 00:18:45,080
Data may be in motion, or it
may sit in a storage account

437
00:18:45,080 --> 00:18:48,473
or a desk while it's at rest.

438
00:18:49,720 --> 00:18:51,270
And one way to protect that data

439
00:18:51,270 --> 00:18:54,523
while it's at rest is to
prevent unwarranted reads.

440
00:18:55,620 --> 00:18:59,010
So if you encrypt your
VM's OS disk partition,

441
00:18:59,010 --> 00:19:01,410
you can prevent it from unwarranted read,

442
00:19:01,410 --> 00:19:04,980
because it can then only be read by actors

443
00:19:04,980 --> 00:19:07,440
while in position of the
right encryption key.

444
00:19:07,440 --> 00:19:11,150
So this way, encrypting
a VM's Operating System

445
00:19:11,150 --> 00:19:15,363
disk partition, protects that
confidentiality and integrity.

446
00:19:16,270 --> 00:19:18,180
Now, in the next slide we will see

447
00:19:18,180 --> 00:19:20,330
by means of a small illustration,

448
00:19:20,330 --> 00:19:22,530
how the framework
implements this benchmark.

449
00:19:24,460 --> 00:19:26,070
So, on your screen over here,

450
00:19:26,070 --> 00:19:28,700
you see four rectangular boxes,

451
00:19:28,700 --> 00:19:29,550
each one of these rectangular boxes

452
00:19:29,550 --> 00:19:31,943
represents a Cloud plugin.

453
00:19:33,060 --> 00:19:35,460
So on the top left section,

454
00:19:35,460 --> 00:19:38,780
you see Azure VM Cloud plugin.

455
00:19:38,780 --> 00:19:40,600
This is a plugin which is responsible

456
00:19:40,600 --> 00:19:44,520
for talking to the Azure
Cloud by means of API's,

457
00:19:44,520 --> 00:19:45,530
and getting data

458
00:19:45,530 --> 00:19:50,093
about all the VM's present in
a given Azure subscription.

459
00:19:51,380 --> 00:19:55,530
This plugin will also get
meta-level information

460
00:19:55,530 --> 00:19:58,460
about the VM's as well.

461
00:19:58,460 --> 00:20:00,690
And to do so, this plugin may make

462
00:20:00,690 --> 00:20:02,613
one or more than one
code to the Azure Cloud.

463
00:20:05,520 --> 00:20:08,010
Once the Azure Cloud plugin receives data

464
00:20:08,010 --> 00:20:11,750
about all the VM's present in
a given Azure subscription,

465
00:20:11,750 --> 00:20:13,490
it will sanitize this data.

466
00:20:13,490 --> 00:20:18,490
It will massage it and
mobilize it into VM record.

467
00:20:18,800 --> 00:20:21,399
VM record is nothing but just an object

468
00:20:21,400 --> 00:20:24,833
which represents a virtual
machine and its state.

469
00:20:26,570 --> 00:20:28,389
This VM records will then be passed on

470
00:20:28,390 --> 00:20:30,710
to one or more store plugin,

471
00:20:30,710 --> 00:20:34,830
who will be responsible for
processing it into a data store.

472
00:20:34,830 --> 00:20:38,399
From where this virtual
machine information

473
00:20:38,400 --> 00:20:41,230
can be useful for the analytics.

474
00:20:41,230 --> 00:20:43,670
The VM record will also be intercepted

475
00:20:43,670 --> 00:20:46,003
by Azure OS Disk Encryption Event plugin.

476
00:20:47,120 --> 00:20:50,810
This plugin is responsible
for evaluating VM record,

477
00:20:50,810 --> 00:20:54,953
and ensuring that Operating
System disk is encrypted.

478
00:20:56,260 --> 00:20:57,629
If it finds a VM,

479
00:20:57,630 --> 00:21:00,380
where Operating System disk
partition is not encrypted,

480
00:21:01,530 --> 00:21:03,921
it will generate an event,

481
00:21:03,921 --> 00:21:06,873
an event is nothing, but
again, just in record.

482
00:21:08,230 --> 00:21:12,350
This event record for
this particular example

483
00:21:12,350 --> 00:21:15,100
will be off type Azure OS
disk encryption event record.

484
00:21:16,060 --> 00:21:19,030
This event record will then
be passed on to store plugin,

485
00:21:19,030 --> 00:21:22,653
which will be responsible for
storing it in a data store.

486
00:21:23,620 --> 00:21:26,699
This event record will also be intercepted

487
00:21:26,700 --> 00:21:29,180
by an alert plugin,
which will be responsible

488
00:21:29,180 --> 00:21:32,130
for sending out an alert.

489
00:21:32,130 --> 00:21:33,410
An example of alert

490
00:21:33,410 --> 00:21:37,130
can be an email sent out
to all the stakeholders,

491
00:21:37,130 --> 00:21:39,740
notifying them that
there is such and such VM

492
00:21:39,740 --> 00:21:41,360
in their Azure subscription,

493
00:21:41,360 --> 00:21:44,270
where Operating System disk
encryption is not enabled.

494
00:21:45,350 --> 00:21:50,110
So, this way, the
framework we have proposed

495
00:21:50,110 --> 00:21:51,773
implemented benchmarks.

496
00:21:53,391 --> 00:21:56,640
And now, let's see an
example of an event record.

497
00:21:56,640 --> 00:21:58,250
So on our screen over here

498
00:21:58,250 --> 00:22:03,070
we have an event record
from the previous example.

499
00:22:03,070 --> 00:22:08,070
This record is of type Azure
VM OS disk encryption event.

500
00:22:08,530 --> 00:22:10,320
It has two buckets,

501
00:22:10,320 --> 00:22:12,500
which we have talked
about earlier as well.

502
00:22:12,500 --> 00:22:15,020
The first bucket is an 'Ext' bucket.

503
00:22:15,020 --> 00:22:18,470
This bucket contains
metadata about the audit,

504
00:22:18,470 --> 00:22:21,210
as well as the resource,
which has been audited.

505
00:22:21,210 --> 00:22:25,200
So in this bucket, you see
that there are information

506
00:22:25,200 --> 00:22:28,290
about the Cloud, which
for the previous example,

507
00:22:28,290 --> 00:22:33,290
is Azure, the power state,
the subscription ID,

508
00:22:34,310 --> 00:22:38,510
and other data to identify
the Azure resource,

509
00:22:38,510 --> 00:22:40,313
as well as the Azure subscription.

510
00:22:41,270 --> 00:22:45,980
The 'Ext' bucket will also have
contextual and derived data,

511
00:22:45,980 --> 00:22:47,010
like power state

512
00:22:47,010 --> 00:22:50,960
and state of Operating
System disk encryption

513
00:22:50,960 --> 00:22:53,770
which in this particular case is false.

514
00:22:53,770 --> 00:22:58,040
The next bucket, 'com' bucket

515
00:22:58,040 --> 00:23:01,193
which is short for common, will
also contain other metadata.

516
00:23:02,330 --> 00:23:04,090
But there are two fields
in the 'com' bucket

517
00:23:04,090 --> 00:23:05,770
which are of a special interest.

518
00:23:05,770 --> 00:23:08,480
The first field is the description field

519
00:23:10,550 --> 00:23:15,550
The description field
will tell an auditor,

520
00:23:15,730 --> 00:23:20,730
what exactly is wrong
with the Cloud resource

521
00:23:20,980 --> 00:23:22,830
which has been audited.

522
00:23:22,830 --> 00:23:24,189
So for this particular example,

523
00:23:24,190 --> 00:23:27,220
it will tell the Cloud auditor

524
00:23:27,220 --> 00:23:30,840
that there is such and such
VM in the Azure subscription

525
00:23:30,840 --> 00:23:32,780
bearing such and such ID,

526
00:23:32,780 --> 00:23:35,963
which has an unencrypted OS partition.

527
00:23:38,370 --> 00:23:40,719
The other field, which is of interest,

528
00:23:40,720 --> 00:23:42,490
is the remediation description field.

529
00:23:42,490 --> 00:23:46,410
So the remediation description
field has an integers

530
00:23:46,410 --> 00:23:49,240
where it tell the Cloud administrator

531
00:23:49,240 --> 00:23:51,790
what's wrong with the
security configuration

532
00:23:51,790 --> 00:23:54,899
of the resource they are managing.

533
00:23:54,900 --> 00:23:58,570
So in this case, the resources VM,

534
00:23:58,570 --> 00:24:03,179
and the remediation field will
tell the Cloud administrator

535
00:24:03,180 --> 00:24:08,180
that the Azure virtual machine
bearing such and such ID,

536
00:24:09,260 --> 00:24:12,110
which they are managing
has an unencrypted disk.

537
00:24:12,110 --> 00:24:14,590
And they must go on evaluate
this virtual machine

538
00:24:14,590 --> 00:24:17,003
and encrypt the OS disk partition.

539
00:24:19,790 --> 00:24:22,129
So moving on, we'll see one more example

540
00:24:22,130 --> 00:24:24,763
to make the concept a
little more concrete.

541
00:24:25,650 --> 00:24:28,520
So the next benchmark is
again for Azure Cloud,

542
00:24:28,520 --> 00:24:32,190
and it recommends that all the Web apps

543
00:24:32,190 --> 00:24:35,823
in an Azure subscription must
use latest version of TLS.

544
00:24:36,700 --> 00:24:39,760
We'll see why this
recommendation makes sense

545
00:24:39,760 --> 00:24:41,180
in the next slide.

546
00:24:41,180 --> 00:24:43,440
So TLS, or Transport Layer Security

547
00:24:43,440 --> 00:24:45,030
is a well-known protocol

548
00:24:45,030 --> 00:24:48,970
who safeguard data's
confidentiality and integrity

549
00:24:48,970 --> 00:24:50,760
when it's in motion between WebApps

550
00:24:50,760 --> 00:24:54,323
or upstream and downstream services.

551
00:24:55,350 --> 00:24:58,750
Industry standards such as
PCI DSS also recommend that,

552
00:24:59,790 --> 00:25:03,883
only version 1.2 of TLS must be used.

553
00:25:05,100 --> 00:25:10,100
The reason for it is, prior
versions before TLS version 1.2

554
00:25:12,850 --> 00:25:15,320
have known vulnerabilities in them.

555
00:25:15,320 --> 00:25:17,070
So, in order to protect their data

556
00:25:17,070 --> 00:25:19,550
while it moves between sub-systems,

557
00:25:19,550 --> 00:25:23,603
it's important to use at
least version 1.2 of TLS.

558
00:25:24,990 --> 00:25:26,470
Moving on to the next slide,

559
00:25:26,470 --> 00:25:30,450
we will see how the
framework we have proposed

560
00:25:30,450 --> 00:25:33,870
implements these benchmark,
again by means of illustration.

561
00:25:33,870 --> 00:25:36,590
So, again we see for rectangular boxes

562
00:25:36,590 --> 00:25:41,590
each one of them representing
a plugin within the framework.

563
00:25:41,600 --> 00:25:43,790
So this time, Azure VM plugin

564
00:25:43,790 --> 00:25:46,649
is replaced by an Azure
WebApp Cloud plugin.

565
00:25:46,650 --> 00:25:48,863
As an integer, this
Azure WebApp Cloud plugin

566
00:25:48,863 --> 00:25:52,290
will talk to the is Azure
Cloud by means of API's

567
00:25:52,290 --> 00:25:54,840
and get information about all the Web apps

568
00:25:54,840 --> 00:25:57,429
which are presenting
that Azure subscription.

569
00:25:57,430 --> 00:25:59,500
It will then sanitize the data,

570
00:25:59,500 --> 00:26:02,960
process it and create WebApp records.

571
00:26:02,960 --> 00:26:05,853
These WebApp records will be
inform of JSON structures.

572
00:26:06,840 --> 00:26:09,030
Again, these WebApp records

573
00:26:09,030 --> 00:26:12,879
will be processed by store plugins

574
00:26:12,880 --> 00:26:15,013
and persisted into a data store.

575
00:26:15,850 --> 00:26:20,090
The critical part of the framework

576
00:26:20,090 --> 00:26:21,780
which will be responsible

577
00:26:21,780 --> 00:26:25,770
for intercepting the WebApp record

578
00:26:25,770 --> 00:26:28,040
and making sense out of it,

579
00:26:28,040 --> 00:26:31,310
will be the Azure WebApp TLS event plugin.

580
00:26:31,310 --> 00:26:34,950
This plugin will check if a given WebApp

581
00:26:34,950 --> 00:26:38,160
is using minimum configured
version of TLS or not.

582
00:26:38,160 --> 00:26:40,540
If the WebApp is using
the minimum configured

583
00:26:40,540 --> 00:26:45,540
of TLS or version above
it, it won't do anything.

584
00:26:45,620 --> 00:26:47,580
But in case it finds a WebApp

585
00:26:48,750 --> 00:26:51,440
which is using a version of TLS

586
00:26:52,770 --> 00:26:55,660
which is below the configured version,

587
00:26:55,660 --> 00:26:57,670
it will generate an event record.

588
00:26:57,670 --> 00:26:59,810
In this example, the event record

589
00:26:59,810 --> 00:27:02,780
will be of type WebApp TLS event.

590
00:27:02,780 --> 00:27:06,280
It will again be stored into a data store

591
00:27:06,280 --> 00:27:10,339
by the store plugin, and alert
plugin will be responsible

592
00:27:10,339 --> 00:27:13,590
for generating an appropriate alert

593
00:27:13,590 --> 00:27:17,023
on receiving such event record.

594
00:27:18,900 --> 00:27:20,860
So moving on to the next slide.

595
00:27:20,860 --> 00:27:25,860
So on this slide, we have the
representation of event record

596
00:27:27,630 --> 00:27:29,900
in form of a JSON object.

597
00:27:29,900 --> 00:27:32,620
Again, we have two buckets in this record,

598
00:27:32,620 --> 00:27:35,330
the 'Ext' bucket will have metadata

599
00:27:35,330 --> 00:27:38,129
along with contextual
and direct information

600
00:27:38,130 --> 00:27:42,700
about a resource as well
as Azure subscription.

601
00:27:42,700 --> 00:27:44,160
The 'com' bucket again will have

602
00:27:44,160 --> 00:27:45,620
description and remediation field.

603
00:27:45,620 --> 00:27:49,229
So let's see how the description
and remediation field

604
00:27:49,230 --> 00:27:53,490
will look like for this particular event.

605
00:27:53,490 --> 00:27:56,100
So the misconfiguration description

606
00:27:56,100 --> 00:27:59,330
will tell the Azure administrator,

607
00:27:59,330 --> 00:28:01,080
that they need to take a look at

608
00:28:01,080 --> 00:28:03,520
such and such Azure WebApp.

609
00:28:03,520 --> 00:28:08,080
And because it's using a version of TLS,

610
00:28:08,080 --> 00:28:10,883
which is below the minimum
configured version.

611
00:28:12,960 --> 00:28:13,793
Th remediation field

612
00:28:13,793 --> 00:28:17,459
will also tell the security administrator

613
00:28:17,460 --> 00:28:20,410
that they need to inspect
this Azure WebApp,

614
00:28:20,410 --> 00:28:22,480
and make sure that it uses

615
00:28:22,480 --> 00:28:27,480
at least minimum
configured version of TLS,

616
00:28:27,790 --> 00:28:31,053
which is wonderful in
this particular case.

617
00:28:32,880 --> 00:28:34,490
All right, moving on.

618
00:28:34,490 --> 00:28:36,883
This brings us to the end of our session.

619
00:28:38,390 --> 00:28:39,870
In order to put into practice

620
00:28:39,870 --> 00:28:41,810
what you have learned
in this session today,

621
00:28:41,810 --> 00:28:43,440
the first thing you will need to do

622
00:28:43,440 --> 00:28:46,320
is to identify your Cloud footprint.

623
00:28:46,320 --> 00:28:50,100
In order to do so, you'll
need to prepare a list

624
00:28:50,100 --> 00:28:54,550
of all the resources your
organization is using

625
00:28:54,550 --> 00:28:56,072
which have a Cloud presence.

626
00:28:57,270 --> 00:29:01,150
You'll also need to classify
this Cloud resources

627
00:29:01,150 --> 00:29:04,540
based on their importance to business.

628
00:29:04,540 --> 00:29:08,930
Next, you will need to find
out all the industry standards

629
00:29:08,930 --> 00:29:10,440
and compliance guidelines

630
00:29:10,440 --> 00:29:13,913
your organization and
business needs to follow.

631
00:29:17,000 --> 00:29:21,620
It is very likely that within
your organization's set up

632
00:29:21,620 --> 00:29:25,110
you already have some kind of
controls and audit mechanisms

633
00:29:25,110 --> 00:29:26,919
already in place.

634
00:29:26,920 --> 00:29:28,190
In which case, you can go through

635
00:29:28,190 --> 00:29:29,960
the list of all the CIS benchmarks

636
00:29:29,960 --> 00:29:31,600
and identify the assessments

637
00:29:31,600 --> 00:29:33,663
which are applicable to your department.

638
00:29:35,320 --> 00:29:40,320
Even if you implement
all the CIS benchmarks,

639
00:29:40,780 --> 00:29:43,649
they will only provide
basic level of security

640
00:29:43,650 --> 00:29:48,650
against popular or most common
security misconfigurations.

641
00:29:51,730 --> 00:29:53,730
So, it is highly suggested

642
00:29:53,730 --> 00:29:57,970
that you refer other standards
and guidelines as well.

643
00:29:57,970 --> 00:30:00,553
You can refer guidelines
from NIST, PCI or ISO.

644
00:30:02,010 --> 00:30:05,330
The next step will be
the most crucial one.

645
00:30:05,330 --> 00:30:07,040
In this step, you will
need to bring together

646
00:30:07,040 --> 00:30:08,970
all the required stakeholders.

647
00:30:08,970 --> 00:30:11,320
And along with them you need
to prepare an audit plan

648
00:30:11,320 --> 00:30:12,456
and define its (indistinct).

649
00:30:13,535 --> 00:30:16,370
You will also need to define
the rules and responsibilities,

650
00:30:16,370 --> 00:30:19,330
but most importantly, you will
need to find out the person

651
00:30:19,330 --> 00:30:21,030
or the team who will be responsible

652
00:30:21,030 --> 00:30:23,879
for acting on the audit findings

653
00:30:23,880 --> 00:30:26,243
and fixing the security misconfigurations.

654
00:30:28,260 --> 00:30:31,100
The audit framework we
taught in the session

655
00:30:31,100 --> 00:30:33,360
has this reference implementation.

656
00:30:33,360 --> 00:30:37,000
The project is called Cloud
Marker, it's written in Python.

657
00:30:37,000 --> 00:30:38,300
And I highly recommend you all

658
00:30:38,300 --> 00:30:40,210
to go take a look at this project

659
00:30:40,210 --> 00:30:41,410
right after the session.

660
00:30:43,120 --> 00:30:45,600
You can start using it
right off the shelf,

661
00:30:45,600 --> 00:30:47,120
or you can retrofit it

662
00:30:47,120 --> 00:30:49,399
for your organization's security needs

663
00:30:49,400 --> 00:30:50,500
by adding more plugin.

664
00:30:51,550 --> 00:30:55,639
The plug-able nature of the
framework makes it very simple.

665
00:30:55,640 --> 00:30:58,400
All you need to do is
write few lines of code

666
00:30:58,400 --> 00:31:01,003
and you will be all set

667
00:31:01,003 --> 00:31:03,293
for an audit program in your organization.

668
00:31:04,310 --> 00:31:06,129
This concludes our session.

669
00:31:06,130 --> 00:31:09,570
We both appreciate you
all for listening to us.

670
00:31:09,570 --> 00:31:11,530
Thank you very much for your time.

671
00:31:11,530 --> 00:31:14,870
I recommend you all to
post your questions.

672
00:31:14,870 --> 00:31:18,736
We will be more than happy
to answer them, thank you.

