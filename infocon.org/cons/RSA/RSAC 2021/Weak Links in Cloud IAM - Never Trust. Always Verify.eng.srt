1
00:00:01,500 --> 00:00:02,820
- Hi, my name is Jay.

2
00:00:02,820 --> 00:00:06,779
I am a Cloud Security Researcher
with Palo Alto Network.

3
00:00:06,780 --> 00:00:10,610
My research has been focusing
on Cloud Native Security.

4
00:00:10,610 --> 00:00:14,270
And today I'm presenting with my coworker,

5
00:00:14,270 --> 00:00:17,280
Nathaniel Quist.

6
00:00:17,280 --> 00:00:19,160
- Hi, my name is Nathaniel.

7
00:00:19,160 --> 00:00:20,080
I'm a Senior Threat Researcher

8
00:00:20,080 --> 00:00:23,389
with Palo Alto Networks and Unit 42.

9
00:00:23,390 --> 00:00:25,840
My primary focus is on Cloud Security

10
00:00:25,840 --> 00:00:28,183
and who's attacking it and how?

11
00:00:30,590 --> 00:00:33,850
- So, in the first half of the talk,

12
00:00:33,850 --> 00:00:35,490
I will first go over

13
00:00:36,880 --> 00:00:38,380
interesting Red Team Exercise

14
00:00:38,380 --> 00:00:40,450
that we did in 2020.

15
00:00:40,450 --> 00:00:43,010
I will start with some introduction

16
00:00:43,010 --> 00:00:46,217
about the Identity and
Access Management in AWS.

17
00:00:48,230 --> 00:00:49,699
With the background,

18
00:00:49,700 --> 00:00:51,810
I will then go into the detail

19
00:00:51,810 --> 00:00:54,410
of our Red Team Exercise.

20
00:00:54,410 --> 00:00:55,569
And after the exercise,

21
00:00:55,570 --> 00:00:56,770
I will cover

22
00:00:58,260 --> 00:01:00,570
an extended research that we did after

23
00:01:00,570 --> 00:01:02,810
the Red Team Exercise

24
00:01:02,810 --> 00:01:05,340
to identify the misconfiguration

25
00:01:05,340 --> 00:01:07,590
that we found during the Red Team Exercise

26
00:01:07,590 --> 00:01:08,423
in the wild.

27
00:01:09,280 --> 00:01:11,267
The second half of the presentation

28
00:01:11,267 --> 00:01:12,950
"Q" will cover

29
00:01:12,950 --> 00:01:15,060
the Evidence Based Findings

30
00:01:15,060 --> 00:01:18,580
that we saw in our internal dataset.

31
00:01:18,580 --> 00:01:21,510
And he will also present
some interesting findings

32
00:01:21,510 --> 00:01:24,080
related to CryptoJacking in the talk.

33
00:01:24,080 --> 00:01:26,250
And finally, we will conclude the talk

34
00:01:26,250 --> 00:01:29,360
with a set of best
practice in cyber hygiene

35
00:01:29,360 --> 00:01:31,220
to help audience remediate

36
00:01:31,220 --> 00:01:33,289
and prevent the misconfigurations

37
00:01:33,290 --> 00:01:34,190
that we have seen.

38
00:01:35,510 --> 00:01:37,040
The fundamental concept

39
00:01:37,040 --> 00:01:39,520
of Identity and Access Management

40
00:01:39,520 --> 00:01:41,320
is very simple.

41
00:01:41,320 --> 00:01:42,812
It basically determine,

42
00:01:45,618 --> 00:01:46,470
for a principle

43
00:01:46,470 --> 00:01:48,990
what are the action that
the principal can perform

44
00:01:48,990 --> 00:01:50,503
on a set of resource?

45
00:01:51,550 --> 00:01:55,340
And the principal can be
a user or an application

46
00:01:55,340 --> 00:01:57,140
and the actions can be

47
00:01:57,140 --> 00:01:59,240
like read, write or execute.

48
00:01:59,240 --> 00:02:03,679
And the resource can be
file, functions or database.

49
00:02:03,680 --> 00:02:08,437
And when we put the IAM in the
cloud environment like AWS,

50
00:02:09,280 --> 00:02:11,343
the principal can be a user,

51
00:02:11,343 --> 00:02:15,329
a role or a federate user or even

52
00:02:15,330 --> 00:02:16,720
an application.

53
00:02:16,720 --> 00:02:17,553
And

54
00:02:19,020 --> 00:02:19,853
the action

55
00:02:19,853 --> 00:02:20,760
that

56
00:02:20,760 --> 00:02:23,200
the principal can perform
depend on the resource.

57
00:02:23,200 --> 00:02:27,100
For example, in AWS there's EC2 service

58
00:02:27,100 --> 00:02:28,400
for virtual machine,

59
00:02:28,400 --> 00:02:31,890
and within EC2 there are a
set of actions such as the

60
00:02:31,890 --> 00:02:36,313
relative instance stockings
instance or stopping instance.

61
00:02:37,610 --> 00:02:41,140
And in case of a S3 bucket service,

62
00:02:41,140 --> 00:02:43,070
there are also a set of services

63
00:02:43,070 --> 00:02:46,780
such as create bucket,
delete bucket and list bucket

64
00:02:48,520 --> 00:02:49,353
In AWS

65
00:02:50,440 --> 00:02:54,070
currently there are more
than 200 different services.

66
00:02:54,070 --> 00:02:56,200
You can essentially find

67
00:02:57,500 --> 00:03:01,520
a service for any type of
application that you can think of.

68
00:03:01,520 --> 00:03:03,360
And for each service usually,

69
00:03:03,360 --> 00:03:06,490
there are set up more than 50 actions

70
00:03:06,490 --> 00:03:07,630
that can be configured

71
00:03:09,462 --> 00:03:10,920
for a specific service.

72
00:03:10,920 --> 00:03:11,929
And out of the box

73
00:03:11,930 --> 00:03:14,220
when you create an AWS Account,

74
00:03:14,220 --> 00:03:15,170
there are

75
00:03:15,170 --> 00:03:17,420
500 preset

76
00:03:17,420 --> 00:03:20,880
managed policies that AWS define

77
00:03:20,880 --> 00:03:23,933
for all the AWS users.

78
00:03:25,230 --> 00:03:28,320
So with so many services
and so many actions.

79
00:03:28,320 --> 00:03:30,579
It is not an easy job

80
00:03:30,580 --> 00:03:31,440
to

81
00:03:32,390 --> 00:03:34,732
manage identity and access.

82
00:03:36,190 --> 00:03:38,880
Imagine that you are responsible for

83
00:03:40,593 --> 00:03:42,929
a cloud account with hundreds of users,

84
00:03:42,930 --> 00:03:44,597
hundreds of developers

85
00:03:45,860 --> 00:03:47,033
in an organization.

86
00:03:48,500 --> 00:03:50,740
It is impossible to

87
00:03:50,740 --> 00:03:52,460
define a policy...

88
00:03:52,460 --> 00:03:54,610
A permission policy for each users.

89
00:03:54,610 --> 00:03:56,290
As the assistant that mean,

90
00:03:56,290 --> 00:03:58,290
you probably don't want those engineers

91
00:03:58,290 --> 00:03:59,910
come to you every day for

92
00:04:01,275 --> 00:04:03,140
different service.

93
00:04:03,140 --> 00:04:07,160
So in reality, the
principle of least privilege

94
00:04:07,160 --> 00:04:08,540
is not that easy

95
00:04:09,840 --> 00:04:11,530
especially in a cloud environment

96
00:04:15,990 --> 00:04:17,690
So during...

97
00:04:17,690 --> 00:04:18,769
In 2020,

98
00:04:18,769 --> 00:04:19,603
we

99
00:04:19,603 --> 00:04:22,200
doing an engagement with our customers.

100
00:04:22,200 --> 00:04:25,640
We work with them to
perform a Red Team Exercise

101
00:04:25,640 --> 00:04:28,957
to evaluate their cloud environment,

102
00:04:28,957 --> 00:04:30,123
the AWS environment.

103
00:04:31,427 --> 00:04:32,370
And the outcome

104
00:04:34,398 --> 00:04:36,150
of this Red Team Exercise

105
00:04:36,150 --> 00:04:37,679
that we've found a few

106
00:04:39,100 --> 00:04:40,770
critical and interesting

107
00:04:42,090 --> 00:04:45,700
misconfiguration that allow
us to take over the account.

108
00:04:45,700 --> 00:04:49,140
We start with very
modeling the environment

109
00:04:49,140 --> 00:04:53,060
and we look at the environment
from different aspect.

110
00:04:53,060 --> 00:04:57,510
And today I will just cover
the two most interesting

111
00:04:57,510 --> 00:05:00,763
findings that we had during
the Red Team Exercise.

112
00:05:02,851 --> 00:05:05,210
In particular to identity

113
00:05:05,210 --> 00:05:07,060
and asset management

114
00:05:08,440 --> 00:05:09,780
misconfigurations that

115
00:05:12,142 --> 00:05:17,142
allow us to compromise
the cloud environments.

116
00:05:17,290 --> 00:05:19,200
The first misconfiguration is

117
00:05:19,200 --> 00:05:22,313
an overly-permissive permission policies.

118
00:05:23,270 --> 00:05:24,103
So

119
00:05:26,998 --> 00:05:28,990
We started as in developer.

120
00:05:28,990 --> 00:05:31,960
We were given a developer permission

121
00:05:31,960 --> 00:05:34,510
to emulate an insider attack

122
00:05:34,510 --> 00:05:37,460
or an permission leak type of tech

123
00:05:37,460 --> 00:05:38,293
which

124
00:05:39,720 --> 00:05:42,200
engineer or developers account

125
00:05:43,300 --> 00:05:44,180
was stolen.

126
00:05:44,180 --> 00:05:47,020
And the attacker can use
those stolen accounts

127
00:05:47,020 --> 00:05:49,320
to pivot inside...

128
00:05:49,320 --> 00:05:51,133
From inside the account.

129
00:05:52,750 --> 00:05:53,583
So

130
00:05:55,624 --> 00:05:58,240
the first misconfiguration we saw is that

131
00:05:59,730 --> 00:06:02,380
with a developer account we can

132
00:06:03,860 --> 00:06:08,320
put together a set of
overly-permissive permissions

133
00:06:08,320 --> 00:06:12,599
and eventually gain the
administration access

134
00:06:13,490 --> 00:06:14,570
privilege.

135
00:06:14,570 --> 00:06:16,400
Admin access is the highest

136
00:06:17,620 --> 00:06:18,453
privilege

137
00:06:19,440 --> 00:06:20,730
in AWS Account

138
00:06:20,730 --> 00:06:23,543
has taken root user in Linux.

139
00:06:25,270 --> 00:06:26,789
And the second misconfiguration

140
00:06:26,790 --> 00:06:30,203
is an overly-permissive IAM trust policy.

141
00:06:31,880 --> 00:06:34,480
In this particular scenario,

142
00:06:34,480 --> 00:06:36,840
we started as an outsider.

143
00:06:36,840 --> 00:06:38,650
We are spending

144
00:06:39,870 --> 00:06:41,400
penetration tester.

145
00:06:41,400 --> 00:06:42,840
We did not have any

146
00:06:43,700 --> 00:06:46,289
permission and zero privilege

147
00:06:47,380 --> 00:06:49,430
in the cloud environment.

148
00:06:49,430 --> 00:06:53,820
However, due to a misconfigured
IAM-role trust policy

149
00:06:53,820 --> 00:06:56,960
in that particular account
that we are testing.

150
00:06:56,960 --> 00:07:01,030
We are able to gain the initial
foothold into the cloud,

151
00:07:01,030 --> 00:07:03,489
as an anonymous user,

152
00:07:03,490 --> 00:07:06,840
and eventually pivot from the initial

153
00:07:07,810 --> 00:07:09,940
foothold to other service

154
00:07:09,940 --> 00:07:13,510
then access some highly sensitive data

155
00:07:13,510 --> 00:07:14,832
in that cloud environment.

156
00:07:15,830 --> 00:07:20,830
So, I will first go over
the first misconfiguration

157
00:07:20,900 --> 00:07:21,739
before covering...

158
00:07:21,740 --> 00:07:23,380
Before going to the detail,

159
00:07:23,380 --> 00:07:25,460
I will first cover two important concept

160
00:07:26,449 --> 00:07:29,357
in order to understand
this misconfiguration.

161
00:07:30,205 --> 00:07:31,500
Service roles is the type of role

162
00:07:32,397 --> 00:07:34,909
in AWS environment

163
00:07:34,910 --> 00:07:36,540
that is assigned

164
00:07:36,540 --> 00:07:38,280
to service such as

165
00:07:38,280 --> 00:07:40,613
EC2, ECS or Lambda.

166
00:07:41,540 --> 00:07:44,290
Service role grant service permission

167
00:07:44,290 --> 00:07:46,400
to access cloud resource.

168
00:07:46,400 --> 00:07:47,313
For example,

169
00:07:48,750 --> 00:07:53,240
a service role can be
attached to an EC2 instance

170
00:07:53,240 --> 00:07:54,780
a virtual machine

171
00:07:54,780 --> 00:07:55,929
and this virtual machine

172
00:07:55,930 --> 00:07:59,045
after being attached
with this service role

173
00:07:59,045 --> 00:08:02,580
it can start to access cloud resources,

174
00:08:02,580 --> 00:08:05,820
such as Lambda function, S3 bucket

175
00:08:05,820 --> 00:08:08,013
or key management service.

176
00:08:09,220 --> 00:08:13,420
So this is a special type of
a role that is assigned to

177
00:08:14,730 --> 00:08:16,663
AWS service, not users.

178
00:08:18,179 --> 00:08:21,854
Then the second concept
is called IAM:PassRole.

179
00:08:21,854 --> 00:08:26,810
PassRole is a spatial action
in identity access management.

180
00:08:26,810 --> 00:08:31,550
So this PassRole permission
allows a principal

181
00:08:31,550 --> 00:08:34,130
to attach a service to...

182
00:08:34,130 --> 00:08:36,700
A service role to a service.

183
00:08:36,700 --> 00:08:38,919
For example, if I'm a user

184
00:08:38,919 --> 00:08:41,349
and I have the PassRole permission,

185
00:08:41,350 --> 00:08:43,909
I can create an EC2 instance

186
00:08:43,909 --> 00:08:45,810
and attach a role...

187
00:08:45,810 --> 00:08:47,810
A service, particular a service role

188
00:08:47,810 --> 00:08:49,319
to this VM.

189
00:08:49,320 --> 00:08:52,890
And this VM can then use the permissions

190
00:08:54,218 --> 00:08:58,337
associated with the service
role to access to AWS resources

191
00:09:00,800 --> 00:09:02,459
Graphically,

192
00:09:02,460 --> 00:09:05,640
so I have IAM user and I
have PassRole permission

193
00:09:05,640 --> 00:09:08,520
and I can first create an EC2 instance

194
00:09:08,520 --> 00:09:12,490
and attach a service
role to this instance.

195
00:09:12,490 --> 00:09:15,240
And this instance then
can use the service role

196
00:09:15,240 --> 00:09:18,040
to access other AWS resources,

197
00:09:18,040 --> 00:09:19,967
such as AWS KMS, AWS

198
00:09:21,310 --> 00:09:22,142
Translate.

199
00:09:25,090 --> 00:09:27,100
So, as I mentioned earlier,

200
00:09:27,100 --> 00:09:28,840
we started us a developer.

201
00:09:28,840 --> 00:09:30,080
We were...

202
00:09:30,080 --> 00:09:33,070
In this exercise, we
were given as a developer

203
00:09:33,070 --> 00:09:34,740
we are given developer role

204
00:09:34,740 --> 00:09:36,940
and we work even a set of permissions

205
00:09:36,940 --> 00:09:40,620
because there are hundreds
of other developers

206
00:09:40,620 --> 00:09:43,030
in the same cloud environment.

207
00:09:43,030 --> 00:09:44,030
So we quickly...

208
00:09:44,030 --> 00:09:45,910
So we first check the permissions

209
00:09:45,910 --> 00:09:48,990
that we were given in this developer role.

210
00:09:48,990 --> 00:09:53,200
And the particular
permission that immediately

211
00:09:53,200 --> 00:09:56,533
caught our attention is that IAM PassRole.

212
00:09:58,137 --> 00:10:00,420
Why is this a PassRole...

213
00:10:00,420 --> 00:10:04,819
Why is this a PassRole
action so interesting.

214
00:10:04,820 --> 00:10:05,740
The reason is that

215
00:10:07,740 --> 00:10:10,833
it's really about the
configuration of this permission.

216
00:10:13,150 --> 00:10:14,160
We were able...

217
00:10:14,160 --> 00:10:17,569
With this permission we were able to pass

218
00:10:19,060 --> 00:10:22,380
any service to any role we want.

219
00:10:22,380 --> 00:10:24,870
This is because of the resource

220
00:10:26,541 --> 00:10:28,880
the asterisk symbol

221
00:10:28,880 --> 00:10:29,900
in this policy.

222
00:10:29,900 --> 00:10:33,613
This policy allows us to
pass any role to any service.

223
00:10:35,165 --> 00:10:36,959
Then we start to check

224
00:10:36,960 --> 00:10:40,550
what are the service that
we are allowed to pass?

225
00:10:40,550 --> 00:10:41,729
So there are...

226
00:10:41,730 --> 00:10:43,890
There area set of service roles

227
00:10:43,890 --> 00:10:46,463
in this AWS Account that we are testing.

228
00:10:47,670 --> 00:10:50,500
And we look into each service role

229
00:10:50,500 --> 00:10:51,983
to check their permission.

230
00:10:52,950 --> 00:10:56,940
And luckily there are a
few service roles that

231
00:10:57,890 --> 00:11:00,170
have admin access.

232
00:11:00,170 --> 00:11:04,810
The highest (clears throat)
privilege in an AWS Account.

233
00:11:04,810 --> 00:11:08,089
So now, we have a PassRole
permission that allow us

234
00:11:08,090 --> 00:11:10,160
to pass any service role.

235
00:11:10,160 --> 00:11:13,170
And we also find a service role, like

236
00:11:13,170 --> 00:11:16,099
not just one multiple
services role that has

237
00:11:17,739 --> 00:11:19,260
admin permission.

238
00:11:19,260 --> 00:11:20,210
So now we have

239
00:11:21,230 --> 00:11:22,700
multiple attack path.

240
00:11:22,700 --> 00:11:24,810
And this is just one of the example

241
00:11:24,810 --> 00:11:28,050
that we can pull this attack.

242
00:11:28,050 --> 00:11:31,010
So just, like I described earlier,

243
00:11:31,010 --> 00:11:33,410
we first create an EC2 instance.

244
00:11:33,410 --> 00:11:35,750
Then we attach a service role

245
00:11:35,750 --> 00:11:38,163
with admin permission to this instance.

246
00:11:39,160 --> 00:11:42,750
Because we created the
EC2 instance we can login.

247
00:11:42,750 --> 00:11:44,140
We have the credential.

248
00:11:44,140 --> 00:11:47,500
We can then login to this virtual machine

249
00:11:47,500 --> 00:11:49,273
and start to access the cloud...

250
00:11:49,273 --> 00:11:52,690
The access entire cloud
from this virtual machine.

251
00:11:52,690 --> 00:11:55,240
So what I described here is just one

252
00:11:55,240 --> 00:11:57,040
of the possible attack paths.

253
00:11:57,040 --> 00:12:00,650
Because we also have
access to other services

254
00:12:00,650 --> 00:12:02,220
such as Lambda function

255
00:12:04,278 --> 00:12:06,450
and ECS container service.

256
00:12:06,450 --> 00:12:09,780
We can also perform
the same type of attack

257
00:12:09,780 --> 00:12:12,620
using other services
such as Lambda function

258
00:12:12,620 --> 00:12:14,673
or ECS container service.

259
00:12:15,670 --> 00:12:18,290
Now let's look at the
second misconfiguration.

260
00:12:18,290 --> 00:12:19,550
Overly-permissive

261
00:12:20,846 --> 00:12:21,679
IAM Role Trust Policy.

262
00:12:22,900 --> 00:12:25,530
In order to understand
this misconfiguration

263
00:12:25,530 --> 00:12:28,797
again, I will first cover two
important concepts in IAM.

264
00:12:30,090 --> 00:12:35,010
So each IAM role is
associated with two policies.

265
00:12:35,010 --> 00:12:36,260
The first policy is...

266
00:12:36,260 --> 00:12:37,810
The first one is trust policy.

267
00:12:37,810 --> 00:12:39,863
And the second is permission policy.

268
00:12:40,860 --> 00:12:44,100
A trust policy define who can

269
00:12:44,100 --> 00:12:45,883
assume or use this role.

270
00:12:47,450 --> 00:12:50,630
So in this example, this trust policy

271
00:12:51,970 --> 00:12:55,135
grant permission to EC2 service.

272
00:12:55,135 --> 00:12:59,060
So only EC2 service can
assume and use this role

273
00:12:59,060 --> 00:13:00,579
to perform action.

274
00:13:00,580 --> 00:13:03,490
And the second policy
permission policy defines

275
00:13:03,490 --> 00:13:06,930
what actions that the
principals can perform.

276
00:13:06,930 --> 00:13:11,020
So now we understand the trust
policy and permission policy.

277
00:13:11,020 --> 00:13:12,310
Now let's look at...

278
00:13:12,310 --> 00:13:14,819
Now, we can look at the root cause

279
00:13:14,820 --> 00:13:17,240
of the second misconfiguration.

280
00:13:17,240 --> 00:13:19,890
In this particular, the root cause of this

281
00:13:21,220 --> 00:13:23,270
misconfiguration is due to

282
00:13:23,270 --> 00:13:26,620
overly-permissive trust policy.

283
00:13:26,620 --> 00:13:29,500
So this is the trust policy that we saw

284
00:13:29,500 --> 00:13:30,700
in the cloud environment

285
00:13:32,080 --> 00:13:34,280
A trust policy that grant

286
00:13:35,170 --> 00:13:38,229
everyone permission to access,

287
00:13:38,230 --> 00:13:40,173
to use or assume this role.

288
00:13:41,190 --> 00:13:43,347
As I highlight in the red box,

289
00:13:43,347 --> 00:13:46,390
AWS followed by AWS asterisk,

290
00:13:46,390 --> 00:13:49,689
meaning that anyone can
assume and use this role

291
00:13:49,690 --> 00:13:51,680
and this any person

292
00:13:52,830 --> 00:13:55,040
within or outside the cloud,

293
00:13:55,040 --> 00:13:56,610
you don't need to be a user

294
00:13:56,610 --> 00:13:58,550
in this particular cloud environment.

295
00:13:58,550 --> 00:14:01,069
You can be any user in

296
00:14:01,070 --> 00:14:02,220
other cloud environment

297
00:14:03,815 --> 00:14:06,110
as long as you know the name of this role

298
00:14:06,110 --> 00:14:09,400
then you can gain the access
to this cloud environment.

299
00:14:09,400 --> 00:14:10,430
So this is like

300
00:14:12,750 --> 00:14:14,630
having a set up server

301
00:14:15,540 --> 00:14:19,740
with users that can be
logging without a password.

302
00:14:19,740 --> 00:14:21,510
All you need to know is a username

303
00:14:21,510 --> 00:14:24,150
then you can access the...

304
00:14:24,150 --> 00:14:25,557
Then you can access to the host.

305
00:14:25,557 --> 00:14:27,830
So this is a very bad...

306
00:14:27,830 --> 00:14:30,240
This is a very bad misconfiguration

307
00:14:30,240 --> 00:14:33,300
that allow us to get the initial foothold

308
00:14:33,300 --> 00:14:36,349
to the customer's

309
00:14:36,350 --> 00:14:37,720
cloud environment.

310
00:14:37,720 --> 00:14:39,340
In the next few slides, I will explain

311
00:14:39,340 --> 00:14:41,280
how we actually

312
00:14:41,280 --> 00:14:44,447
exploited the misconfiguration

313
00:14:45,320 --> 00:14:46,320
and

314
00:14:46,320 --> 00:14:49,363
more laterally in the cloud environment.

315
00:14:50,480 --> 00:14:53,330
So as I said, because
of this misconfiguration

316
00:14:54,200 --> 00:14:55,560
we as

317
00:14:55,560 --> 00:14:56,780
outsiders

318
00:14:56,780 --> 00:14:59,310
can get the access

319
00:15:01,008 --> 00:15:02,510
to the cloud environment.

320
00:15:02,510 --> 00:15:06,100
So by assuming this misconfigured role

321
00:15:06,100 --> 00:15:09,510
we were given a short term access token

322
00:15:09,510 --> 00:15:12,350
and once we get the
short term access token,

323
00:15:12,350 --> 00:15:15,290
the first thing we did is
to enumerate the permission.

324
00:15:15,290 --> 00:15:19,390
To identify what are the
permissions that were granted

325
00:15:19,390 --> 00:15:22,050
to this particular role

326
00:15:22,050 --> 00:15:24,010
that was misconfigured.

327
00:15:24,010 --> 00:15:26,720
So we found that this token

328
00:15:26,720 --> 00:15:29,110
can access three AWS service

329
00:15:29,110 --> 00:15:31,813
EC2 S3 and (murmurs) service.

330
00:15:33,360 --> 00:15:36,270
And the configuration

331
00:15:36,270 --> 00:15:37,840
of this...

332
00:15:37,840 --> 00:15:40,150
The permission configuration of this role

333
00:15:40,150 --> 00:15:41,720
is actually

334
00:15:41,720 --> 00:15:44,174
very limited for each service.

335
00:15:44,174 --> 00:15:48,622
At EC2 it only grant a very
small set of permissions.

336
00:15:49,670 --> 00:15:52,459
However, we are able to use

337
00:15:52,460 --> 00:15:57,330
and leverage this small
subset of permission

338
00:15:57,330 --> 00:16:01,000
to move laterally inside
the cloud environment

339
00:16:01,000 --> 00:16:03,930
and eventually gain the
critical information,

340
00:16:03,930 --> 00:16:05,142
the sensitive data.

341
00:16:06,020 --> 00:16:06,930
So to be

342
00:16:08,830 --> 00:16:13,000
in particular, with the EC2 permission

343
00:16:13,000 --> 00:16:13,833
we were...

344
00:16:13,833 --> 00:16:16,520
We look inside the metadata of

345
00:16:16,520 --> 00:16:18,680
the EC2 instance cloud environment.

346
00:16:18,680 --> 00:16:20,130
And from the metadata,

347
00:16:20,130 --> 00:16:23,050
we identify a set of every S3 busket

348
00:16:23,050 --> 00:16:26,083
that this EC2 instance access.

349
00:16:27,090 --> 00:16:29,399
Then from those

350
00:16:29,399 --> 00:16:30,590
S3 buckets,

351
00:16:30,590 --> 00:16:34,110
because we have the SP
list and get permission,

352
00:16:34,110 --> 00:16:35,000
we can access...

353
00:16:35,000 --> 00:16:37,190
We can also access those S3 buckets.

354
00:16:37,190 --> 00:16:39,030
And inside those S3 bucket

355
00:16:39,030 --> 00:16:40,140
we found a lot of

356
00:16:41,140 --> 00:16:42,653
sensitive information.

357
00:16:44,120 --> 00:16:48,680
So the exact information,
the exact data we saw in

358
00:16:48,680 --> 00:16:53,079
these S3 bucket are the
certificate credential

359
00:16:53,080 --> 00:16:56,513
API tokens, and many others.

360
00:16:57,640 --> 00:16:59,930
Then we also found

361
00:16:59,930 --> 00:17:04,030
encrypted credential stored
inside this S3 bucket,

362
00:17:04,030 --> 00:17:07,859
which we were able to
decrypt with the KMS service

363
00:17:07,859 --> 00:17:10,419
that were also in this

364
00:17:11,400 --> 00:17:12,609
role.

365
00:17:12,609 --> 00:17:13,619
So we scan X

366
00:17:13,619 --> 00:17:17,929
we decrypt the encrypted
message inside the S3 bucket

367
00:17:17,930 --> 00:17:21,852
and that also allow us to
eventually gain the access

368
00:17:21,852 --> 00:17:22,685
to the

369
00:17:24,880 --> 00:17:26,640
source code repository

370
00:17:27,776 --> 00:17:29,060
in Docker Hub.

371
00:17:29,060 --> 00:17:31,110
The second misconfiguration

372
00:17:31,110 --> 00:17:33,159
was really like simple.

373
00:17:33,160 --> 00:17:35,820
Like just a simple misconfiguration that

374
00:17:35,820 --> 00:17:37,909
allow us to gain that initial foothold

375
00:17:37,910 --> 00:17:39,530
and start to move laterally.

376
00:17:39,530 --> 00:17:41,090
After the Red Team Exercise

377
00:17:41,090 --> 00:17:43,570
we were very curious how prevalent

378
00:17:43,570 --> 00:17:46,793
this type of misconfiguration
is in the wild.

379
00:17:48,110 --> 00:17:51,870
So we GitHub reconnaissance research

380
00:17:51,870 --> 00:17:54,389
in which we try to identify

381
00:17:54,390 --> 00:17:58,510
this type of misconfigured
IAM trust policy in the wild.

382
00:17:58,510 --> 00:17:59,750
So how we did is that

383
00:17:59,750 --> 00:18:02,490
we first crawl the entire GitHub to find

384
00:18:03,870 --> 00:18:05,290
the AWS resource...

385
00:18:05,290 --> 00:18:07,180
The AWS Account IDs

386
00:18:07,180 --> 00:18:09,510
and the possible IAM role names

387
00:18:11,173 --> 00:18:12,490
in this IDs.

388
00:18:12,490 --> 00:18:14,130
So we use...

389
00:18:14,130 --> 00:18:15,710
We basically use a lot of

390
00:18:18,116 --> 00:18:20,629
regularly expression to pass out

391
00:18:20,630 --> 00:18:23,540
the AWS Account IDs

392
00:18:23,540 --> 00:18:24,920
from these files

393
00:18:24,920 --> 00:18:28,400
and pass a bunch of possible
role names and keywords.

394
00:18:28,400 --> 00:18:31,940
Then we start to enumerate
a set of role name

395
00:18:31,940 --> 00:18:34,920
against these AWS Account IDs

396
00:18:34,920 --> 00:18:37,913
to find if any of these role
names are misconfigured.

397
00:18:39,000 --> 00:18:41,600
So, what we eventually found out

398
00:18:41,600 --> 00:18:42,709
probably eventually

399
00:18:44,070 --> 00:18:46,250
had is that we

400
00:18:46,250 --> 00:18:49,160
went to around 300,000 files

401
00:18:50,900 --> 00:18:54,430
out of around 150 regions repositories

402
00:18:55,270 --> 00:18:57,879
and we successfully identify

403
00:18:57,880 --> 00:19:00,950
almost 70,000 role names,

404
00:19:00,950 --> 00:19:02,820
valid role names

405
00:19:02,820 --> 00:19:03,963
in this AWS Account.

406
00:19:04,990 --> 00:19:05,823
And

407
00:19:07,740 --> 00:19:09,870
we found a subset of this roles...

408
00:19:09,870 --> 00:19:14,495
We found a subset of roles
that were misconfigured.

409
00:19:14,495 --> 00:19:16,949
And out of this misconfigured roles,

410
00:19:16,950 --> 00:19:20,880
we found out more than
thousands of EC2 Snapshots

411
00:19:20,880 --> 00:19:24,020
and more than hundred S3 buckets

412
00:19:24,020 --> 00:19:25,070
that we can access.

413
00:19:25,070 --> 00:19:28,960
And a lot of KMS key
management service keys

414
00:19:28,960 --> 00:19:30,330
that we can use to decrypt

415
00:19:31,970 --> 00:19:35,340
the data in those misconfigured
cloud environment.

416
00:19:35,340 --> 00:19:37,320
Now, I will give the floor to

417
00:19:38,597 --> 00:19:41,833
"Q" to continue the
second half of the talk.

418
00:19:42,690 --> 00:19:44,370
- All right. Thanks, Jay.

419
00:19:44,370 --> 00:19:45,550
Really good information to hear.

420
00:19:45,550 --> 00:19:46,980
So

421
00:19:46,980 --> 00:19:49,010
within this next section of the talk

422
00:19:49,010 --> 00:19:50,660
going to be talking about

423
00:19:50,660 --> 00:19:51,850
information that we've looked

424
00:19:51,850 --> 00:19:54,020
at across multiple cloud environments

425
00:19:54,020 --> 00:19:55,360
and we're looking at the data

426
00:19:55,360 --> 00:19:57,719
that we have actually found
from these environments

427
00:19:57,720 --> 00:20:01,520
that can lead to potential
risks that we saw

428
00:20:01,520 --> 00:20:03,010
within our Red Team Exercise

429
00:20:04,080 --> 00:20:05,189
that we performed.

430
00:20:05,190 --> 00:20:06,990
And then we're gonna dive into

431
00:20:06,990 --> 00:20:10,170
some of the CryptoJacking Act incidents

432
00:20:10,170 --> 00:20:13,700
and how they actually can relate back into

433
00:20:13,700 --> 00:20:16,970
some of the the past
role functions or even

434
00:20:16,970 --> 00:20:19,580
the misconfigured IAM trust policies

435
00:20:19,580 --> 00:20:20,832
that Jay just alluded to.

436
00:20:22,040 --> 00:20:24,149
So, first off we're gonna look at

437
00:20:24,150 --> 00:20:26,480
the Evidence-Based Findings.

438
00:20:26,480 --> 00:20:27,313
So with...

439
00:20:27,313 --> 00:20:29,820
In these aspects, again,
we wanted to look at

440
00:20:29,820 --> 00:20:33,530
identity as a whole
identity access management.

441
00:20:33,530 --> 00:20:36,030
And we dove into specific
cloud environments

442
00:20:36,030 --> 00:20:38,160
to see if we could find examples

443
00:20:38,160 --> 00:20:40,210
of potential threats

444
00:20:40,210 --> 00:20:41,470
that are in

445
00:20:41,470 --> 00:20:44,020
cloud environments today that could

446
00:20:44,020 --> 00:20:47,639
bring about potential
security risks or compromise.

447
00:20:47,640 --> 00:20:49,170
So the first section we wanna look at here

448
00:20:49,170 --> 00:20:50,880
is overly prescribed permissions.

449
00:20:50,880 --> 00:20:53,570
And this is exactly what
Jay was just talking about.

450
00:20:53,570 --> 00:20:55,550
What are these permissions
that are assigned

451
00:20:55,550 --> 00:20:58,970
to specific IAM role accounts?

452
00:20:58,970 --> 00:21:00,670
And then what can they actually do?

453
00:21:00,670 --> 00:21:03,270
One of the biggest threats
that we saw was we found

454
00:21:03,270 --> 00:21:07,410
that 62% of cloud
organizations on a global scale

455
00:21:08,280 --> 00:21:09,113
actually...

456
00:21:09,113 --> 00:21:10,350
That are using Google Cloud.

457
00:21:10,350 --> 00:21:12,332
So Google Cloud Platform.

458
00:21:13,410 --> 00:21:16,450
Their VMs inside of the
Google Cloud Platform

459
00:21:16,450 --> 00:21:19,330
are actually running
underneath admin rights

460
00:21:19,330 --> 00:21:21,139
or elevated service accounts

461
00:21:21,140 --> 00:21:23,510
that have admin privileges within them.

462
00:21:23,510 --> 00:21:26,110
So 62% of all cloud organizations

463
00:21:26,110 --> 00:21:30,169
using a Google Cloud Platform saw this

464
00:21:31,490 --> 00:21:33,580
particular risk.

465
00:21:33,580 --> 00:21:35,570
The JAPAC region actually have the highest

466
00:21:35,570 --> 00:21:39,470
that 75% of organizations
within that particular region.

467
00:21:39,470 --> 00:21:42,000
So, pretty high about three fourths

468
00:21:42,000 --> 00:21:43,210
of organizations

469
00:21:44,500 --> 00:21:46,290
allowing basically admin access to

470
00:21:46,290 --> 00:21:47,783
their VM instances.

471
00:21:49,750 --> 00:21:53,330
With the access keys that again,
Jay was just talking about

472
00:21:53,330 --> 00:21:55,839
when it comes to the access keys

473
00:21:55,839 --> 00:21:59,830
that we may be able to
scrape or glean from GitHub

474
00:21:59,830 --> 00:22:02,699
or if we are able to
find specific access keys

475
00:22:02,700 --> 00:22:05,110
within cloud instances

476
00:22:05,110 --> 00:22:07,330
themselves like say an attacker may find

477
00:22:07,330 --> 00:22:09,439
an access key within that.

478
00:22:09,440 --> 00:22:11,030
We found that these access keys

479
00:22:11,030 --> 00:22:13,610
are not being rotated on a regular basis.

480
00:22:13,610 --> 00:22:15,260
So we look to access keys

481
00:22:15,260 --> 00:22:18,040
or Cloud environments that have

482
00:22:18,040 --> 00:22:21,730
access keys that are in
excess of 90 days old.

483
00:22:21,730 --> 00:22:23,140
So older than 90 days, we found

484
00:22:23,140 --> 00:22:25,030
that 68% of organizations

485
00:22:25,030 --> 00:22:27,139
that are using the cloud on a global basis

486
00:22:29,829 --> 00:22:31,020
are Pat older than...

487
00:22:31,020 --> 00:22:33,513
Have access keys that
are older than 90 days.

488
00:22:34,540 --> 00:22:37,240
EMEA topped out within the regionality

489
00:22:37,240 --> 00:22:39,780
of this particular alerts at 72%

490
00:22:39,780 --> 00:22:42,590
of cloud organizations located within EMEA

491
00:22:42,590 --> 00:22:45,362
saw that that access keys
were older than 90 days.

492
00:22:46,650 --> 00:22:49,330
Something else that very serious.

493
00:22:49,330 --> 00:22:50,350
This is last slide right here.

494
00:22:50,350 --> 00:22:52,969
24% of organizations

495
00:22:52,970 --> 00:22:55,610
have enabled multi-factor authentication

496
00:22:55,610 --> 00:22:57,050
for their group accounts.

497
00:22:57,050 --> 00:22:58,379
Which means that

498
00:22:58,380 --> 00:23:02,070
76% of organizations have not enabled MFA

499
00:23:02,070 --> 00:23:03,780
for their group accounts.

500
00:23:03,780 --> 00:23:04,649
It's just...

501
00:23:04,650 --> 00:23:06,320
It's a staggering number that

502
00:23:07,620 --> 00:23:09,352
MFA is just, well,

503
00:23:10,450 --> 00:23:11,960
it's not a (chuckle)

504
00:23:11,960 --> 00:23:15,490
foolproof sort of security

505
00:23:15,490 --> 00:23:17,330
mitigation tactic.

506
00:23:17,330 --> 00:23:18,500
It is something that is...

507
00:23:18,500 --> 00:23:19,430
That makes

508
00:23:20,628 --> 00:23:22,909
the ability to add log
into that particular

509
00:23:22,910 --> 00:23:24,680
account a whole lot more difficult

510
00:23:24,680 --> 00:23:26,600
raises the bar significantly.

511
00:23:26,600 --> 00:23:27,860
So,

512
00:23:27,860 --> 00:23:29,969
getting our

513
00:23:29,970 --> 00:23:33,030
cloud environments or cloud on IAM roles,

514
00:23:33,030 --> 00:23:36,010
especially those with route privileges

515
00:23:36,010 --> 00:23:38,300
or administrative access,

516
00:23:38,300 --> 00:23:39,600
getting those with MFA

517
00:23:41,250 --> 00:23:43,260
is a key target that
we should all focus on

518
00:23:43,260 --> 00:23:44,760
within our cloud environments.

519
00:23:45,750 --> 00:23:48,260
In contrast to just a traditional

520
00:23:48,260 --> 00:23:49,940
or a standard user.

521
00:23:49,940 --> 00:23:52,537
IAM role, we found that 47%

522
00:23:53,460 --> 00:23:55,460
of traditional IAM

523
00:23:55,460 --> 00:23:56,930
roles are actually enabled

524
00:23:56,930 --> 00:23:58,890
with multi-factor authentication as well.

525
00:23:58,890 --> 00:23:59,890
So still not great.

526
00:23:59,890 --> 00:24:02,190
Almost half of all the

527
00:24:02,190 --> 00:24:03,350
accounts doing that.

528
00:24:03,350 --> 00:24:04,939
So again, I think there's some areas

529
00:24:04,940 --> 00:24:07,280
where we as an industry, as a security

530
00:24:08,290 --> 00:24:09,580
industry can actually

531
00:24:10,450 --> 00:24:13,400
push our DevOps and IT communities

532
00:24:13,400 --> 00:24:15,260
to kind of shore up some of these identity

533
00:24:15,260 --> 00:24:17,240
and access management credentials,

534
00:24:17,240 --> 00:24:19,123
or issues that we have with them.

535
00:24:20,830 --> 00:24:22,580
We're gonna transition a little bit.

536
00:24:22,580 --> 00:24:24,879
One thing that we talked
about within our cloud

537
00:24:24,880 --> 00:24:26,730
threat report as well

538
00:24:26,730 --> 00:24:28,350
within this last one here.

539
00:24:28,350 --> 00:24:30,110
Was CryptoJacking.

540
00:24:30,110 --> 00:24:33,050
Specifically, we found the 23% of

541
00:24:33,050 --> 00:24:36,330
cloud organizations or
environments worldwide

542
00:24:36,330 --> 00:24:39,992
experienced some sort of
communication or CryptoJacking

543
00:24:39,992 --> 00:24:41,790
or cryptomining operation

544
00:24:41,790 --> 00:24:42,899
network communications

545
00:24:42,900 --> 00:24:44,910
within their cloud environments.

546
00:24:44,910 --> 00:24:46,860
That's nearly a quarter
of all cloud environments

547
00:24:46,860 --> 00:24:49,090
actually doing some sort of

548
00:24:49,090 --> 00:24:51,070
communication with these

549
00:24:51,070 --> 00:24:52,419
mining pools.

550
00:24:52,420 --> 00:24:55,700
So what does a CryptoJacking
operation actually look like?

551
00:24:55,700 --> 00:24:57,080
We within this...

552
00:24:57,080 --> 00:24:57,913
Well, we're gonna talk

553
00:24:57,913 --> 00:24:59,973
about two specific
cryptomining operations,

554
00:25:01,790 --> 00:25:03,460
specifically with Kinsing

555
00:25:03,460 --> 00:25:06,220
and another one with TeamTNT.

556
00:25:06,220 --> 00:25:09,440
Both of these CryptoJacking groups

557
00:25:09,440 --> 00:25:10,850
are actually targeting...

558
00:25:10,850 --> 00:25:14,120
Actively targeting AWS environments.

559
00:25:14,120 --> 00:25:15,649
And they're specifically targeting

560
00:25:15,650 --> 00:25:19,280
those AWS environments to
grab their AWS credentials

561
00:25:19,280 --> 00:25:20,820
out of it.

562
00:25:20,820 --> 00:25:22,120
How they operate in general

563
00:25:22,120 --> 00:25:23,409
is they perform

564
00:25:23,410 --> 00:25:24,760
a very wide...

565
00:25:24,760 --> 00:25:27,470
They cast a very wide net
using a scanning tools

566
00:25:27,470 --> 00:25:28,303
like masscan

567
00:25:29,168 --> 00:25:30,001
or pnscan.

568
00:25:30,960 --> 00:25:33,950
They've also started using
other tools like (murmurs)

569
00:25:33,950 --> 00:25:34,783
which is a

570
00:25:35,910 --> 00:25:36,860
Golang based

571
00:25:37,950 --> 00:25:39,513
network scanner as well.

572
00:25:40,940 --> 00:25:42,580
And they're focusing on when they find

573
00:25:42,580 --> 00:25:44,439
exploitable systems.

574
00:25:44,440 --> 00:25:48,150
Systems that are exposed
and then exploited.

575
00:25:48,150 --> 00:25:50,320
Their very first action is to gather

576
00:25:50,320 --> 00:25:53,070
and capture the AWS credentials

577
00:25:53,070 --> 00:25:54,550
on those particular end points.

578
00:25:54,550 --> 00:25:55,383
If that

579
00:25:56,502 --> 00:25:58,610
AWS folder...

580
00:25:58,610 --> 00:26:01,765
Configuration folder does
exist on those end points,

581
00:26:01,766 --> 00:26:03,960
they will scrape those credentials.

582
00:26:03,960 --> 00:26:07,050
And then send them off to
their Command and Control Node.

583
00:26:07,050 --> 00:26:09,490
So they can most likely perform

584
00:26:09,490 --> 00:26:12,370
post-exploitation operations.

585
00:26:12,370 --> 00:26:15,050
Let's refer back to what
Jay was talking about

586
00:26:15,050 --> 00:26:17,680
with both the first
and the second scenario

587
00:26:17,680 --> 00:26:19,370
within his talk...

588
00:26:19,370 --> 00:26:23,020
Portion of the talk in that
if you know the access keys

589
00:26:23,020 --> 00:26:26,550
and the access ID for a particular account

590
00:26:27,500 --> 00:26:30,980
are there misconfigured permissions

591
00:26:30,980 --> 00:26:33,680
within those particular
roles that you can leverage

592
00:26:33,680 --> 00:26:36,910
to gain larger access
outside of those instances?

593
00:26:36,910 --> 00:26:39,050
So we see that CryptoJacking operations

594
00:26:39,050 --> 00:26:41,590
are not just targeting
the specific instances.

595
00:26:41,590 --> 00:26:43,689
They're actually most likely targeting

596
00:26:43,690 --> 00:26:45,970
the larger cloud environment

597
00:26:45,970 --> 00:26:48,930
in order to do additional damage

598
00:26:48,930 --> 00:26:51,523
or additional information gathering.

599
00:26:53,310 --> 00:26:54,990
One thing of note that we'd really like

600
00:26:54,990 --> 00:26:57,630
to say within most
CryptoJacking operations

601
00:26:57,630 --> 00:27:00,900
is there is a lot of
commonality within most,

602
00:27:00,900 --> 00:27:02,180
not just Kinsing or TeamTNT

603
00:27:02,180 --> 00:27:04,740
but with other groups like rock and Pacha

604
00:27:04,740 --> 00:27:07,400
and 82 to 20 lemon duck

605
00:27:07,400 --> 00:27:08,940
a lot of different ones as well

606
00:27:08,940 --> 00:27:09,924
is that

607
00:27:09,924 --> 00:27:12,530
they're very active at
removing other miners

608
00:27:12,530 --> 00:27:14,000
on those systems

609
00:27:14,000 --> 00:27:15,780
on those end points that they compromise.

610
00:27:15,780 --> 00:27:20,730
They're very active about
scanning for exposed systems.

611
00:27:20,730 --> 00:27:23,653
Using masscan specifically
is a very common tool.

612
00:27:24,757 --> 00:27:25,630
(murmurs) is another one

613
00:27:25,630 --> 00:27:27,797
that's becoming very common as well.

614
00:27:27,797 --> 00:27:29,340
And we see more and more groups

615
00:27:29,340 --> 00:27:32,540
also following the
Kinsing and TeamTNT trend

616
00:27:32,540 --> 00:27:35,580
in that they're trying to
do AWS credential scraping

617
00:27:35,580 --> 00:27:36,413
as well.

618
00:27:37,530 --> 00:27:39,360
Unit 42 just published a blog just

619
00:27:40,271 --> 00:27:41,104
a little bit ago

620
00:27:41,104 --> 00:27:42,243
when Jay was a coauthor for that.

621
00:27:43,840 --> 00:27:45,560
Specifically focused on TeamTNT

622
00:27:45,560 --> 00:27:48,090
and how they're actually also grabbing

623
00:27:48,090 --> 00:27:48,923
Kubernetes

624
00:27:50,230 --> 00:27:51,590
credentials as well.

625
00:27:51,590 --> 00:27:52,423
So there...

626
00:27:52,423 --> 00:27:53,790
They can actually start targeting

627
00:27:53,790 --> 00:27:56,470
that network mesh spec that Kubernetes has

628
00:27:56,470 --> 00:27:59,170
so they can exploit that

629
00:27:59,170 --> 00:28:01,850
as well as AWS credential scraping.

630
00:28:01,850 --> 00:28:02,830
So,

631
00:28:02,830 --> 00:28:04,429
it's not just a CryptoJacking.

632
00:28:04,430 --> 00:28:07,120
There is a trend towards larger and larger

633
00:28:07,120 --> 00:28:09,723
target basis within clouds.

634
00:28:10,840 --> 00:28:11,673
All right.

635
00:28:11,673 --> 00:28:14,830
So now we wanna talk about
the mitigation aspects.

636
00:28:14,830 --> 00:28:17,110
This will kind of cover
both what Jay just presented

637
00:28:17,110 --> 00:28:18,229
as well as

638
00:28:19,670 --> 00:28:21,430
the evidence-based findings

639
00:28:21,430 --> 00:28:22,720
and then the CryptoJacking

640
00:28:22,720 --> 00:28:24,520
the information that I just covered.

641
00:28:26,900 --> 00:28:30,240
How does this talk kind of apply

642
00:28:30,240 --> 00:28:31,300
to the larger

643
00:28:32,890 --> 00:28:34,670
RSA Conference Agenda

644
00:28:34,670 --> 00:28:37,480
and specifically looking at the educate

645
00:28:37,480 --> 00:28:39,450
plus learning and how do
we actually apply that

646
00:28:39,450 --> 00:28:40,870
as an industry?

647
00:28:40,870 --> 00:28:44,479
For our perspective within
this talk is we want

648
00:28:44,480 --> 00:28:46,100
to provide the education aspect

649
00:28:46,100 --> 00:28:47,899
being that seeking out new research,

650
00:28:48,930 --> 00:28:51,540
Jay and I performed a Red Team Exercise,

651
00:28:51,540 --> 00:28:53,389
which we've gone over.

652
00:28:53,390 --> 00:28:54,660
We're looking at CryptoJacking,

653
00:28:54,660 --> 00:28:55,910
which is one of the largest threats

654
00:28:55,910 --> 00:28:58,317
that we see within our environment.

655
00:28:58,317 --> 00:29:00,420
With a cloud organization
just kind of in general.

656
00:29:00,420 --> 00:29:03,260
And then how those affect your environment

657
00:29:03,260 --> 00:29:05,120
or your infrastructure.

658
00:29:05,120 --> 00:29:08,429
And that's where big learning
asset kind of comes into this

659
00:29:08,430 --> 00:29:11,760
with the evaluating your
cloud environment itself.

660
00:29:11,760 --> 00:29:16,530
Can you identify that policies
are performed accurately

661
00:29:16,530 --> 00:29:18,399
that you're not seeing
networking indications

662
00:29:18,400 --> 00:29:21,560
to CryptoJacking operations, et cetera.

663
00:29:21,560 --> 00:29:24,429
And then how do we apply
that if we do see those

664
00:29:24,430 --> 00:29:27,290
how do we actually apply
specific security measures?

665
00:29:27,290 --> 00:29:28,980
Or how do we explore...

666
00:29:28,980 --> 00:29:31,530
Apply the mitigations on that...

667
00:29:31,530 --> 00:29:32,990
Jay's covered and then I'll just...

668
00:29:32,990 --> 00:29:34,410
I'll jump into here in a second.

669
00:29:34,410 --> 00:29:36,010
How we bring those into your environment.

670
00:29:36,010 --> 00:29:38,770
So you can actually have a more secure

671
00:29:40,440 --> 00:29:43,850
cloud environment in your system.

672
00:29:43,850 --> 00:29:46,610
So specifically within
the mitigation aspects

673
00:29:46,610 --> 00:29:49,399
as far as identity access management

674
00:29:49,400 --> 00:29:51,846
there are specific best practices

675
00:29:51,846 --> 00:29:55,293
that we would encourage cloud
organizations to perform.

676
00:29:56,190 --> 00:29:59,700
Going around this, we
really want to encourage

677
00:29:59,700 --> 00:30:02,680
organizations not to use by a cloud

678
00:30:02,680 --> 00:30:05,610
or route accounts within
their cloud environments.

679
00:30:05,610 --> 00:30:08,520
Specifically within the
example I gave earlier

680
00:30:08,520 --> 00:30:09,353
with

681
00:30:10,620 --> 00:30:13,830
Google Cloud Platform with 67%

682
00:30:13,830 --> 00:30:18,639
of those organizations
providing VM root access

683
00:30:18,640 --> 00:30:20,290
to their VM instances.

684
00:30:20,290 --> 00:30:22,690
Removing those that root
access and just making it

685
00:30:22,690 --> 00:30:24,710
specifically to a specific service

686
00:30:24,710 --> 00:30:28,683
or a very specific least
privileged account rule.

687
00:30:30,130 --> 00:30:31,940
Minimizing the use just across the board

688
00:30:31,940 --> 00:30:33,600
of admin credentials.

689
00:30:33,600 --> 00:30:36,169
Again, using the least
privileged capability

690
00:30:36,170 --> 00:30:38,130
to only give that particular service

691
00:30:38,130 --> 00:30:38,963
or IAM

692
00:30:40,860 --> 00:30:42,090
user role.

693
00:30:42,090 --> 00:30:43,860
The only the credentials and the access

694
00:30:43,860 --> 00:30:45,350
they need in order to perform

695
00:30:45,350 --> 00:30:48,750
those services that they're deemed to use.

696
00:30:48,750 --> 00:30:52,120
Simplifying the user
management as a whole.

697
00:30:52,120 --> 00:30:54,179
Using groups, using roles,

698
00:30:54,180 --> 00:30:58,720
assigning IAM users to specific
roles or specific groups

699
00:30:58,720 --> 00:31:00,570
will simplify the task

700
00:31:00,570 --> 00:31:03,070
and the burden of managing and maintaining

701
00:31:04,780 --> 00:31:05,613
IAM accounts.

702
00:31:05,613 --> 00:31:08,330
So using some sort of hierarchical form

703
00:31:08,330 --> 00:31:09,460
that is easy to understand

704
00:31:09,460 --> 00:31:11,070
but still granular enough to perform

705
00:31:11,070 --> 00:31:13,060
at least privileged functions

706
00:31:13,060 --> 00:31:14,013
should be used.

707
00:31:15,580 --> 00:31:18,320
Rotate your access keys
on a regular basis.

708
00:31:18,320 --> 00:31:21,050
As Jay said before, using
some sort of automation

709
00:31:21,050 --> 00:31:23,230
in order to perform that functionality

710
00:31:23,230 --> 00:31:24,600
will greatly enable

711
00:31:25,930 --> 00:31:28,870
the security of your cloud infrastructure.

712
00:31:28,870 --> 00:31:30,439
And then if you do use it like

713
00:31:31,310 --> 00:31:32,370
use passwords.

714
00:31:32,370 --> 00:31:35,810
Like Azure organizations allow you to use.

715
00:31:35,810 --> 00:31:37,060
Make sure that your passwords

716
00:31:37,060 --> 00:31:39,870
are actually over a significant length.

717
00:31:39,870 --> 00:31:42,423
And are secure passwords.

718
00:31:44,240 --> 00:31:46,380
As far as the configuration of your

719
00:31:46,380 --> 00:31:49,450
infrastructure, your Identity
and Access Management

720
00:31:49,450 --> 00:31:52,730
infrastructure enabling
multi-factor authentication

721
00:31:52,730 --> 00:31:54,720
will greatly increase the bar.

722
00:31:54,720 --> 00:31:57,320
It will not make it impenetrable

723
00:31:57,320 --> 00:31:59,580
but it will significantly increase the bar

724
00:31:59,580 --> 00:32:01,169
and security within
your cloud environment.

725
00:32:01,170 --> 00:32:04,100
So enabling that is a key aspect.

726
00:32:04,100 --> 00:32:07,199
Doing some sort of
monitoring within the APIs

727
00:32:07,200 --> 00:32:09,260
that are being sent to your

728
00:32:09,260 --> 00:32:12,180
identity access services roles,

729
00:32:12,180 --> 00:32:14,900
what your cloud environment
monitoring the API

730
00:32:14,900 --> 00:32:15,770
for a specific

731
00:32:16,660 --> 00:32:17,493
threats

732
00:32:18,640 --> 00:32:20,240
or security risks

733
00:32:20,240 --> 00:32:23,173
is a really big bonus as well.

734
00:32:24,354 --> 00:32:26,940
All the remediating access
of permit privileges.

735
00:32:26,940 --> 00:32:29,060
If you have a user accounts

736
00:32:29,060 --> 00:32:30,980
that have not logged in in a very...

737
00:32:30,980 --> 00:32:32,460
An exceedingly long period of time

738
00:32:32,460 --> 00:32:33,983
removing

739
00:32:33,983 --> 00:32:36,450
the access for those particular accounts

740
00:32:37,836 --> 00:32:39,060
is recommended.

741
00:32:39,060 --> 00:32:41,540
And then finding some way to remove

742
00:32:41,540 --> 00:32:43,389
especially on administrative access

743
00:32:43,390 --> 00:32:45,360
from user accounts that
just don't need it.

744
00:32:45,360 --> 00:32:46,427
Find some way to do that.

745
00:32:46,427 --> 00:32:49,679
And again, we even this one
for the best for last year.

746
00:32:49,680 --> 00:32:51,346
Enable at least privileges.

747
00:32:51,346 --> 00:32:54,520
Make sure that only the
accounts that have...

748
00:32:54,520 --> 00:32:57,260
That need to access a
specific service or function.

749
00:32:57,260 --> 00:32:58,960
That's the only thing they can access.

750
00:32:58,960 --> 00:33:01,593
They don't have anything excess enabled.

751
00:33:02,980 --> 00:33:04,130
When it comes to CryptoJacking

752
00:33:04,130 --> 00:33:07,070
there are about five best
practices that we can look at.

753
00:33:07,070 --> 00:33:08,389
We wanna ensure that...

754
00:33:08,390 --> 00:33:10,600
We want to ensure that
you're authenticating all

755
00:33:10,600 --> 00:33:12,409
of the container service connections,

756
00:33:12,410 --> 00:33:15,650
ensuring that you're not making
connections to services or

757
00:33:16,550 --> 00:33:18,770
external IP addresses that are not known

758
00:33:18,770 --> 00:33:20,070
to your cloud environment.

759
00:33:21,010 --> 00:33:23,320
Ensure that you're monitoring those

760
00:33:23,320 --> 00:33:25,050
Blocking all fireworks...

761
00:33:25,050 --> 00:33:26,730
Firewall ports by default.

762
00:33:26,730 --> 00:33:28,830
Don't allow access to everything

763
00:33:28,830 --> 00:33:32,179
in both inbound and outbound
ingress egress traffic.

764
00:33:32,180 --> 00:33:34,320
Make sure that you're
specifically allocating

765
00:33:34,320 --> 00:33:37,322
what access needs to be
assigned for what service.

766
00:33:38,920 --> 00:33:42,910
Invest in some cloud threat
native security platform.

767
00:33:42,910 --> 00:33:45,023
Be that Prisma cloud or others.

768
00:33:46,220 --> 00:33:48,320
Something that can monitor
your cloud environment

769
00:33:48,320 --> 00:33:51,669
to ensure that you're
performing best practices

770
00:33:51,670 --> 00:33:55,330
for configurations both of your IAM,

771
00:33:55,330 --> 00:33:56,929
your network security, et cetera

772
00:33:58,320 --> 00:34:01,250
Leveraging intelligence feeds
using third-party sources

773
00:34:01,250 --> 00:34:03,430
to bring into your environment
so you can black...

774
00:34:03,430 --> 00:34:04,530
So you're not...

775
00:34:04,530 --> 00:34:05,920
So you're enabling

776
00:34:07,048 --> 00:34:10,179
the blocking of blacklisted
IP addresses or domains

777
00:34:11,600 --> 00:34:13,790
that are known to the industry in general

778
00:34:13,790 --> 00:34:17,480
or it can be gathered from
an intelligence threat feed,

779
00:34:17,480 --> 00:34:19,300
making sure that you're leveraging those

780
00:34:19,300 --> 00:34:21,380
to protect your environment.

781
00:34:21,380 --> 00:34:23,090
And it means maintaining a set

782
00:34:23,090 --> 00:34:25,560
of trusted images and registries.

783
00:34:25,560 --> 00:34:30,000
Only deploy images or containerd
images that are approved,

784
00:34:30,000 --> 00:34:31,449
that are vetted in your environment.

785
00:34:31,449 --> 00:34:32,759
So

786
00:34:32,759 --> 00:34:34,920
you're not bringing out

787
00:34:34,920 --> 00:34:36,860
tainted or corrupted or poisoned

788
00:34:36,860 --> 00:34:38,410
containers in your environment.

789
00:34:40,480 --> 00:34:41,958
All right.

790
00:34:41,958 --> 00:34:44,080
That wraps up our discussion.

791
00:34:44,080 --> 00:34:45,850
If there are any questions

792
00:34:45,850 --> 00:34:47,429
we will refer to those

793
00:34:48,489 --> 00:34:49,639
and thank you very much

794
00:34:50,882 --> 00:34:51,799
for attending this talk.

795
00:34:51,800 --> 00:34:52,967
Appreciate it.

