1
00:00:01,330 --> 00:00:02,690
- Hi, I'm Cindy Blake,

2
00:00:02,690 --> 00:00:05,420
Senior Security Evangelist at GitLab.

3
00:00:05,420 --> 00:00:07,120
I speak with a lot of companies

4
00:00:07,120 --> 00:00:09,480
that are maturing their DevOps practices

5
00:00:09,480 --> 00:00:12,170
and trying to pull security into the mix.

6
00:00:12,170 --> 00:00:13,620
Whether it's shifting left,

7
00:00:13,620 --> 00:00:15,790
or securing their newest infrastructure

8
00:00:15,790 --> 00:00:18,400
as they modernize their applications.

9
00:00:18,400 --> 00:00:22,159
I hope my experience can
provide some practical advice

10
00:00:22,160 --> 00:00:25,500
as you think about securing
your infrastructure as code

11
00:00:25,500 --> 00:00:28,570
while moving towards security as code.

12
00:00:28,570 --> 00:00:30,840
And I'm happy to take questions in chat

13
00:00:30,840 --> 00:00:32,240
throughout the presentation.

14
00:00:33,470 --> 00:00:35,730
Now the two terms are very related.

15
00:00:35,730 --> 00:00:38,370
What is security as code?

16
00:00:38,370 --> 00:00:40,699
To get there, we really must start

17
00:00:40,700 --> 00:00:42,880
with infrastructure as code.

18
00:00:42,880 --> 00:00:45,693
So let's look at the rise
of infrastructure as code.

19
00:00:47,280 --> 00:00:49,780
In the beginning, developers created code

20
00:00:49,780 --> 00:00:52,660
on hardware provision for shared use.

21
00:00:52,660 --> 00:00:56,330
The developers had to ask
operations to provision hardware

22
00:00:56,330 --> 00:00:58,019
for them before they could get started.

23
00:00:58,020 --> 00:01:00,103
And every project was unique.

24
00:01:01,670 --> 00:01:04,069
With cloud, developers
still asked for hardware

25
00:01:04,069 --> 00:01:04,902
to be provisioned,

26
00:01:04,903 --> 00:01:09,030
whether it's from their IT
ops or their cloud provider.

27
00:01:09,030 --> 00:01:11,170
And it's still on someone else's hardware

28
00:01:11,170 --> 00:01:14,830
but it can get done really
quickly and efficiently.

29
00:01:14,830 --> 00:01:17,800
So developers can get coding more quickly,

30
00:01:17,800 --> 00:01:20,163
but still every project is unique.

31
00:01:21,370 --> 00:01:24,650
And all it takes is a
little configuration.

32
00:01:24,650 --> 00:01:26,840
Now to speed configurations,

33
00:01:26,840 --> 00:01:28,753
people started using templates.

34
00:01:32,010 --> 00:01:33,677
Then someone said,

35
00:01:33,677 --> 00:01:35,627
"Hey, I can code those templates

36
00:01:35,627 --> 00:01:38,940
"to automatically provision
the resources needed."

37
00:01:38,940 --> 00:01:40,929
And that gave rise to
infrastructure as code.

38
00:01:40,930 --> 00:01:42,673
So cue the Star Wars music.

39
00:01:43,600 --> 00:01:46,940
With everything including
infrastructure becoming code,

40
00:01:46,940 --> 00:01:49,929
developers can provision
hardware themselves.

41
00:01:49,930 --> 00:01:52,783
And now it's even faster
and more consistent.

42
00:01:54,030 --> 00:01:57,020
And again, all it takes
is a little configuration.

43
00:01:57,020 --> 00:01:59,800
With configuration settings
everywhere you turn,

44
00:01:59,800 --> 00:02:02,690
in cloud services, in
containers, in orchestrators,

45
00:02:02,690 --> 00:02:05,350
in your software build
and deployment tools.

46
00:02:05,350 --> 00:02:08,122
It's no wonder we're worried
about misconfiguration.

47
00:02:09,060 --> 00:02:12,690
With automation, policies
can be configured centrally,

48
00:02:12,690 --> 00:02:16,200
and applied consistently to all projects.

49
00:02:16,200 --> 00:02:18,649
We've removed some of the
individual decision-making

50
00:02:18,650 --> 00:02:20,590
and its potential for error,

51
00:02:20,590 --> 00:02:22,410
but we've created a centralized target

52
00:02:22,410 --> 00:02:26,680
for anyone wanting to inject
malicious configurations.

53
00:02:26,680 --> 00:02:29,150
And therein lies the danger.

54
00:02:29,150 --> 00:02:31,830
Configuration can be
automated, repeatable,

55
00:02:31,830 --> 00:02:33,440
and follow standards.

56
00:02:33,440 --> 00:02:34,579
Or it can be a mess

57
00:02:34,580 --> 00:02:36,560
with a nasty web of one-offs created

58
00:02:36,560 --> 00:02:39,460
without understanding the
impact of the choices.

59
00:02:39,460 --> 00:02:42,180
Either way, security must be considered

60
00:02:42,180 --> 00:02:44,390
for not only the hardware and the apps,

61
00:02:44,390 --> 00:02:47,730
but the infrastructure
upon which the apps depend

62
00:02:47,730 --> 00:02:50,450
as they're developed, deployed, and used.

63
00:02:50,450 --> 00:02:52,792
And this is why security pros cringe.

64
00:02:54,140 --> 00:02:56,410
I love this report by Snyk

65
00:02:56,410 --> 00:02:58,850
on securing infrastructure as code.

66
00:02:58,850 --> 00:03:00,609
The first point is not surprising.

67
00:03:00,610 --> 00:03:01,860
When you look at threat reports,

68
00:03:01,860 --> 00:03:04,440
whether from Verizon, or
Fortify used to do them,

69
00:03:04,440 --> 00:03:06,840
AT&T, whomever.

70
00:03:06,840 --> 00:03:08,730
The vast majority of attacks

71
00:03:08,730 --> 00:03:10,730
are not inventing new approaches,

72
00:03:10,730 --> 00:03:12,600
they're using tried and true attack paths

73
00:03:12,600 --> 00:03:14,940
that have worked well and
continue to work well.

74
00:03:14,940 --> 00:03:17,730
And historically attacks have
leveraged vulnerabilities

75
00:03:17,730 --> 00:03:19,480
in the code, but they're beginning

76
00:03:19,480 --> 00:03:22,380
to leverage vulnerable configurations

77
00:03:22,380 --> 00:03:24,313
in the app surrounding infrastructure.

78
00:03:25,620 --> 00:03:27,460
The second point is that few are confident

79
00:03:27,460 --> 00:03:29,430
that they can spot bad configurations.

80
00:03:29,430 --> 00:03:31,180
That really should be no surprise.

81
00:03:31,180 --> 00:03:34,400
Do you even know where all
the configurations are?

82
00:03:34,400 --> 00:03:35,840
The options that are available?

83
00:03:35,840 --> 00:03:38,010
And who has access to change them?

84
00:03:38,010 --> 00:03:41,203
So it's really a no brainer
that automation can help.

85
00:03:42,780 --> 00:03:46,000
Capital One was merely
one example of an exploit

86
00:03:46,000 --> 00:03:48,130
of a misconfiguration.

87
00:03:48,130 --> 00:03:51,180
Automation must go way
beyond the use of cloud

88
00:03:51,180 --> 00:03:55,750
and configuring the cloud settings alone.

89
00:03:55,750 --> 00:03:57,950
It's really a huge risk and gets worse

90
00:03:57,950 --> 00:04:02,023
as more applications are
rearchitected to be cloud native.

91
00:04:03,120 --> 00:04:06,010
In fact, I'd like to
share this famous quote.

92
00:04:06,010 --> 00:04:09,340
Misconfigurations will be
on par with failure to patch

93
00:04:09,340 --> 00:04:11,460
in terms of top exploits.

94
00:04:11,460 --> 00:04:14,433
When? Well, now and into the future.

95
00:04:16,670 --> 00:04:21,029
Wikipedia defines infrastructure
as code as the process

96
00:04:21,029 --> 00:04:24,729
of managing and provisioning
computer data centers

97
00:04:24,730 --> 00:04:28,160
through machine readable definition files,

98
00:04:28,160 --> 00:04:30,390
rather than physical
hardware configuration

99
00:04:30,390 --> 00:04:33,349
or interactive configuration tools.

100
00:04:33,350 --> 00:04:37,510
It enables scale, speed,
consistency, visibility,

101
00:04:37,510 --> 00:04:41,200
traceability of changes
made to each configuration,

102
00:04:41,200 --> 00:04:44,080
but like source code or dependencies,

103
00:04:44,080 --> 00:04:47,560
it really deserves version
control, access control,

104
00:04:47,560 --> 00:04:49,720
security scanning and monitoring
just like you would do

105
00:04:49,720 --> 00:04:51,450
for any other code.

106
00:04:51,450 --> 00:04:54,120
The challenge is there's
so many levers to pull.

107
00:04:54,120 --> 00:04:56,570
Do you even know where they all are?

108
00:04:56,570 --> 00:04:58,740
Do you know the optimal settings to use?

109
00:04:58,740 --> 00:05:01,430
If these code settings are codified

110
00:05:01,430 --> 00:05:05,220
in infrastructure as code,
do you treat that code

111
00:05:05,220 --> 00:05:07,963
with the same rigor that
you would application code?

112
00:05:10,690 --> 00:05:15,620
Security as code, codifies
security and policy decisions,

113
00:05:15,620 --> 00:05:19,200
automating them within workflows
across functional teams.

114
00:05:19,200 --> 00:05:20,880
Now, it's easier said than done.

115
00:05:20,880 --> 00:05:24,670
You must define the
processes and automate them,

116
00:05:24,670 --> 00:05:28,100
and define the policies
and automate those.

117
00:05:28,100 --> 00:05:31,670
A lot of people get stuck on
the first step, shifting left,

118
00:05:31,670 --> 00:05:35,650
or they try to apply policies
without enough thought

119
00:05:35,650 --> 00:05:37,722
into the processes themselves.

120
00:05:39,840 --> 00:05:42,450
So I've summarized a few
of my recommendations

121
00:05:42,450 --> 00:05:45,030
for security as code into six items.

122
00:05:45,030 --> 00:05:47,419
We'll go through each
of these in more detail

123
00:05:47,420 --> 00:05:49,810
and you'll need to think
about the processes

124
00:05:49,810 --> 00:05:51,713
and the policies for each.

125
00:05:52,640 --> 00:05:54,914
First, test your source code.

126
00:05:54,914 --> 00:05:57,570
You know, and most people use
SAST and dependency scanning,

127
00:05:57,570 --> 00:05:59,780
but also think about secrets

128
00:05:59,780 --> 00:06:02,113
and even coverage guided fuzz testing.

129
00:06:03,150 --> 00:06:06,080
Next, think about your codes execution.

130
00:06:06,080 --> 00:06:07,690
You need to go beyond pen testing

131
00:06:07,690 --> 00:06:09,630
with automated dynamic scanning

132
00:06:09,630 --> 00:06:13,683
and maybe even behavioral
fuzzing and API testing.

133
00:06:14,530 --> 00:06:17,440
You need to test the
application's infrastructure.

134
00:06:17,440 --> 00:06:21,410
Think there about containers,
packages, and configurations.

135
00:06:21,410 --> 00:06:24,100
And then test the infrastructure as code,

136
00:06:24,100 --> 00:06:26,340
testing, managing, monitoring,

137
00:06:26,340 --> 00:06:28,289
and protecting code configurations.

138
00:06:28,290 --> 00:06:30,943
Things like Helm charts,
Terraform, and the like.

139
00:06:31,850 --> 00:06:35,410
And then you need to think about testing

140
00:06:35,410 --> 00:06:39,050
or protecting the access to
the application and its data.

141
00:06:39,050 --> 00:06:43,500
And that goes beyond
traditional network security.

142
00:06:43,500 --> 00:06:46,160
You need to think about
containers and orchestrators,

143
00:06:46,160 --> 00:06:48,930
which I tend to think
of as micro networks.

144
00:06:48,930 --> 00:06:52,833
So think network security
just at a different level.

145
00:06:54,290 --> 00:06:56,470
And finally, think about securing

146
00:06:56,470 --> 00:06:58,770
the software factory itself.

147
00:06:58,770 --> 00:07:01,919
Access to the code, code
signings, push rules,

148
00:07:01,920 --> 00:07:03,090
and all of those things

149
00:07:03,090 --> 00:07:07,119
along your entire software
development life cycle.

150
00:07:07,120 --> 00:07:09,063
Now, yes, the lines
are a little bit blurry

151
00:07:09,063 --> 00:07:11,710
between items three, four, and five,

152
00:07:11,710 --> 00:07:13,602
but that's so in real life too.

153
00:07:15,810 --> 00:07:18,660
So let's break down the
effort a little bit more.

154
00:07:18,660 --> 00:07:23,220
You must define the processes
and the policies around each.

155
00:07:23,220 --> 00:07:26,550
So for instance, you
test your source code.

156
00:07:26,550 --> 00:07:27,780
Do you test every app?

157
00:07:27,780 --> 00:07:29,178
What are the exceptions?

158
00:07:29,178 --> 00:07:31,850
Who can approve the exceptions?

159
00:07:31,850 --> 00:07:33,050
Do you test your containers?

160
00:07:33,050 --> 00:07:34,800
When, by whom?

161
00:07:34,800 --> 00:07:36,600
Do you monitor east-west traffic

162
00:07:36,600 --> 00:07:39,150
among the apps within a cluster?

163
00:07:39,150 --> 00:07:39,983
What's allowed?

164
00:07:39,983 --> 00:07:41,140
What's not allowed?

165
00:07:41,140 --> 00:07:43,740
Who has access to your application code?

166
00:07:43,740 --> 00:07:45,510
To your infrastructure as code?

167
00:07:45,510 --> 00:07:47,460
What are they allowed to change?

168
00:07:47,460 --> 00:07:49,810
All of these things need
to be thought through.

169
00:07:51,810 --> 00:07:55,890
So let's start with items one
and two, testing the code.

170
00:07:55,890 --> 00:07:57,500
You know, most people
start with shift left.

171
00:07:57,500 --> 00:08:00,870
It's really a fundamental step
towards automating security.

172
00:08:00,870 --> 00:08:02,430
You should be testing the static code

173
00:08:02,430 --> 00:08:04,210
and also its execution.

174
00:08:04,210 --> 00:08:05,320
Let's look at a few things

175
00:08:05,320 --> 00:08:07,070
you might not have thought through.

176
00:08:08,290 --> 00:08:10,010
Now as I talk with customers,

177
00:08:10,010 --> 00:08:12,080
these are the main reasons
they wanna shift left

178
00:08:12,080 --> 00:08:15,120
and automate security testing
within their CI pipelines.

179
00:08:15,120 --> 00:08:18,520
And consistency is one of the top reasons.

180
00:08:18,520 --> 00:08:22,409
Usually it's even above
reduced security exposure.

181
00:08:22,410 --> 00:08:24,050
They kind of go hand in hand.

182
00:08:24,050 --> 00:08:27,930
So automation can not only
simplify AppSec testing,

183
00:08:27,930 --> 00:08:29,390
but make it easier to ensure

184
00:08:29,390 --> 00:08:31,820
that the scans are actually used

185
00:08:31,820 --> 00:08:35,230
and that the appropriate
consistent action is taken.

186
00:08:35,230 --> 00:08:39,543
This automation can greatly
simplify an audit as well.

187
00:08:42,100 --> 00:08:45,250
Ideally, you'd wanna run
multiple types of scans,

188
00:08:45,250 --> 00:08:49,190
both at code commit,
before the code is merged.

189
00:08:49,190 --> 00:08:52,370
And as it's merged into the main branch.

190
00:08:52,370 --> 00:08:53,990
Most people start with SAST independencies

191
00:08:53,990 --> 00:08:55,820
and add from there.

192
00:08:55,820 --> 00:08:58,810
Consider tools that have all
of these scanners built in.

193
00:08:58,810 --> 00:09:00,900
So you don't have to
go crazy managing this,

194
00:09:00,900 --> 00:09:04,090
a complex tool chain integration.

195
00:09:04,090 --> 00:09:06,120
Even DAST can be run

196
00:09:06,120 --> 00:09:08,900
at the point of code commit before merge.

197
00:09:08,900 --> 00:09:12,560
If you're using a DevOps tool
that provides a review app

198
00:09:12,560 --> 00:09:16,630
to assess the impact of code
changes, that review app,

199
00:09:16,630 --> 00:09:19,300
which is ephemeral in
nature during the build,

200
00:09:19,300 --> 00:09:21,329
reflects the changes made to the code.

201
00:09:21,330 --> 00:09:24,510
And it too can be dynamically scanned

202
00:09:24,510 --> 00:09:26,003
at the point of code commit.

203
00:09:27,470 --> 00:09:30,790
So, first think about what
scans will you execute,

204
00:09:30,790 --> 00:09:32,608
determine what scanners you'll use,

205
00:09:32,608 --> 00:09:35,599
and the scope on which you'll use them

206
00:09:35,600 --> 00:09:38,150
for your application portfolio.

207
00:09:38,150 --> 00:09:41,270
Next, determine policies
around what you'll do

208
00:09:41,270 --> 00:09:43,770
with the results of those scans.

209
00:09:43,770 --> 00:09:46,020
When vulnerabilities are found,

210
00:09:46,020 --> 00:09:48,090
what actions do you want taken?

211
00:09:48,090 --> 00:09:49,680
Ideally, in an automated fashion,

212
00:09:49,680 --> 00:09:51,459
but it's important to think through that

213
00:09:51,460 --> 00:09:53,443
even if they're addressed manually.

214
00:09:56,075 --> 00:09:59,640
I would encourage you to
think about fuzz testing.

215
00:09:59,640 --> 00:10:01,270
Fuzz testing was once in the realm

216
00:10:01,270 --> 00:10:05,199
of only really, the super geeks,
and that's not so anymore.

217
00:10:05,200 --> 00:10:06,710
When fuzz testing is integrated

218
00:10:06,710 --> 00:10:08,130
into the developer's workflow,

219
00:10:08,130 --> 00:10:10,580
it's easier to set up and
interpret the results,

220
00:10:10,580 --> 00:10:13,000
making adoption much easier.

221
00:10:13,000 --> 00:10:16,010
Essentially mainstreaming
issues potentially.

222
00:10:16,010 --> 00:10:20,340
Fuzzing blurs the lines
between what is a security flaw

223
00:10:20,340 --> 00:10:22,910
versus a quality or logic flaw.

224
00:10:22,910 --> 00:10:25,230
Behavioral fuzzing can be very helpful

225
00:10:25,230 --> 00:10:27,580
to test your APIs, which
are an important element

226
00:10:27,580 --> 00:10:30,033
of modern application infrastructures.

227
00:10:32,190 --> 00:10:34,410
Now let's look at items three and four,

228
00:10:34,410 --> 00:10:36,050
testing the app's infrastructure,

229
00:10:36,050 --> 00:10:37,370
and the infrastructure as code.

230
00:10:37,370 --> 00:10:38,810
They're not exactly the same thing.

231
00:10:38,810 --> 00:10:39,983
So let me explain.

232
00:10:41,300 --> 00:10:42,939
I mentioned APIs.

233
00:10:42,940 --> 00:10:46,350
As monolithic apps get
broken into microservices,

234
00:10:46,350 --> 00:10:48,190
authentication and authorization takes

235
00:10:48,190 --> 00:10:53,010
on a whole new dimension and
embraces more use of APIs.

236
00:10:53,010 --> 00:10:54,400
Are you testing them?

237
00:10:54,400 --> 00:10:55,760
Can you go beyond testing

238
00:10:55,760 --> 00:10:58,980
and cut it to capture, store, and view

239
00:10:58,980 --> 00:11:03,700
all of the API calls for
audit and compliance purposes?

240
00:11:03,700 --> 00:11:05,950
Your additional attack
surfaces to consider

241
00:11:05,950 --> 00:11:09,280
include containers, more
specifically what's in them,

242
00:11:09,280 --> 00:11:11,400
the libraries and the dependencies.

243
00:11:11,400 --> 00:11:13,500
Along with the orchestrators.

244
00:11:13,500 --> 00:11:16,810
Orchestrators are configured
to direct how, and where,

245
00:11:16,810 --> 00:11:19,489
and what, and when containers run,

246
00:11:19,490 --> 00:11:22,530
including that API architecture.

247
00:11:22,530 --> 00:11:26,620
But think about which apps
can talk to which other apps,

248
00:11:26,620 --> 00:11:29,270
what compute and storage resources

249
00:11:29,270 --> 00:11:32,110
each app is allowed to consume.

250
00:11:32,110 --> 00:11:34,760
And then there's a cloud
environment itself.

251
00:11:34,760 --> 00:11:38,240
An environment hosting virtual
machines and containers.

252
00:11:38,240 --> 00:11:40,300
It represents an attack surface as well,

253
00:11:40,300 --> 00:11:42,400
though, it's really more closely guarded

254
00:11:42,400 --> 00:11:44,790
than these other newer elements.

255
00:11:44,790 --> 00:11:48,640
Each of these items has
configuration levers.

256
00:11:48,640 --> 00:11:51,460
Each an opportunity to do it wrong,

257
00:11:51,460 --> 00:11:53,840
either uniquely by projects,

258
00:11:53,840 --> 00:11:57,120
or repeatedly across all projects.

259
00:11:57,120 --> 00:12:01,660
That's the difference between
infrastructure which is unique

260
00:12:01,660 --> 00:12:03,420
and infrastructure as code

261
00:12:03,420 --> 00:12:06,453
which is used repeatedly and consistently.

262
00:12:08,760 --> 00:12:11,100
You must define your execution policies

263
00:12:11,100 --> 00:12:14,424
for those infrastructure
elements, along with any templates

264
00:12:14,424 --> 00:12:18,010
or automation you use to
configure those elements.

265
00:12:18,010 --> 00:12:21,450
What policies will you use
in dev and prod for things

266
00:12:21,450 --> 00:12:24,930
like containers, packages,
Helm charts, and the like?

267
00:12:24,930 --> 00:12:29,010
And what will you allow or deny
for each of those policies?

268
00:12:29,010 --> 00:12:30,500
What triggers an alert,

269
00:12:30,500 --> 00:12:32,720
what's acceptable for remediation,

270
00:12:32,720 --> 00:12:36,160
you can think of it sort of
as a service level agreement.

271
00:12:36,160 --> 00:12:39,663
What exceptions will you
allow, and who can grant them?

272
00:12:42,520 --> 00:12:45,640
Step five is to monitor
and protect the network.

273
00:12:45,640 --> 00:12:48,000
Not just the traditional network access,

274
00:12:48,000 --> 00:12:52,163
but the micronetwork within
and among containers.

275
00:12:53,240 --> 00:12:54,530
There are a couple of technologies

276
00:12:54,530 --> 00:12:56,610
that can be readily applied.

277
00:12:56,610 --> 00:12:59,200
So the first is container
network security.

278
00:12:59,200 --> 00:13:01,930
You can think of it sort
of as a mini firewall,

279
00:13:01,930 --> 00:13:05,329
inspecting traffic inside
your Kubernetes cluster.

280
00:13:05,330 --> 00:13:08,000
You can set up what traffic between pods

281
00:13:08,000 --> 00:13:09,980
is allowed or denied.

282
00:13:09,980 --> 00:13:13,410
And that can prevent attackers
from traversing laterally

283
00:13:13,410 --> 00:13:16,983
from one application pod to
another within a cluster.

284
00:13:19,040 --> 00:13:22,130
Next consider Container Host Security.

285
00:13:22,130 --> 00:13:26,430
Think of that as intrusion
detection and prevention for pods

286
00:13:26,430 --> 00:13:28,989
within your Kubernetes cluster.

287
00:13:28,990 --> 00:13:30,595
It can configure what resources

288
00:13:30,595 --> 00:13:34,249
and app has approval to
access, for instance.

289
00:13:34,249 --> 00:13:35,900
You know, just yesterday,

290
00:13:35,900 --> 00:13:38,380
I was talking with an
industry analyst about this

291
00:13:38,380 --> 00:13:41,600
and he said he'd seen
some large enterprises

292
00:13:41,600 --> 00:13:44,120
setting up hundreds of clusters.

293
00:13:44,120 --> 00:13:47,940
I'm guessing that they feel
that segmentation is safer,

294
00:13:47,940 --> 00:13:51,140
but it's also probably a
lot more overhead to manage.

295
00:13:51,140 --> 00:13:54,280
Customers we've encountered
have far fewer clusters

296
00:13:54,280 --> 00:13:58,860
instead managing multiple
names spaces within a cluster.

297
00:13:58,860 --> 00:14:02,670
And I just wonder if cluster
sprawl can be avoided

298
00:14:02,670 --> 00:14:05,560
by using better security
within the cluster.

299
00:14:05,560 --> 00:14:07,920
Something like container host security

300
00:14:07,920 --> 00:14:09,500
and container network security.

301
00:14:09,500 --> 00:14:10,913
So something to ponder.

302
00:14:13,280 --> 00:14:15,880
For step five, securing
your applications network.

303
00:14:15,880 --> 00:14:18,880
Again, layout which
policies must be applied

304
00:14:18,880 --> 00:14:20,360
to which elements.

305
00:14:20,360 --> 00:14:21,810
Are you gonna use a WAF?

306
00:14:21,810 --> 00:14:23,569
Under what circumstances?

307
00:14:23,570 --> 00:14:26,390
Will you use container
security, everywhere?

308
00:14:26,390 --> 00:14:28,720
Or only for certain projects?

309
00:14:28,720 --> 00:14:32,690
Next, again, think about what
is allowed and what is not.

310
00:14:32,690 --> 00:14:36,060
What's an alert that will
be allowed to continue

311
00:14:36,060 --> 00:14:37,810
versus what pushes the stop button

312
00:14:37,810 --> 00:14:39,282
for your software factory?

313
00:14:41,680 --> 00:14:43,219
And saving the best for last,

314
00:14:43,220 --> 00:14:45,290
speaking of the software factory,

315
00:14:45,290 --> 00:14:47,099
this is a huge issue now.

316
00:14:47,100 --> 00:14:49,390
Thanks to the attack on SolarWinds.

317
00:14:49,390 --> 00:14:52,050
It made everyone ask
themselves, am I doing enough

318
00:14:52,050 --> 00:14:55,319
to protect my software
factory from the same threats?

319
00:14:55,320 --> 00:14:57,163
The short answer is, probably not.

320
00:14:58,900 --> 00:15:03,090
Even the most damaging attacks
tend to rely on complacency

321
00:15:03,090 --> 00:15:05,370
toward basic security hygiene.

322
00:15:05,370 --> 00:15:07,780
Think patches and passwords.

323
00:15:07,780 --> 00:15:09,480
Using tried and trued exploits

324
00:15:09,480 --> 00:15:12,140
that have been around for a long time.

325
00:15:12,140 --> 00:15:16,350
From what I've read in the
news, SolarWinds admin relied

326
00:15:16,350 --> 00:15:19,020
on a simple password and didn't change it.

327
00:15:19,020 --> 00:15:23,220
My advice is to revisit your
software security policies,

328
00:15:23,220 --> 00:15:26,490
apply automation whenever
possible to make it more likely

329
00:15:26,490 --> 00:15:29,130
that policies are applied consistently.

330
00:15:29,130 --> 00:15:31,540
Things like regular key rotations.

331
00:15:31,540 --> 00:15:34,880
Use secrets detection to
look for hard-coded passwords

332
00:15:34,880 --> 00:15:36,500
that are especially prevalent

333
00:15:36,500 --> 00:15:38,323
when you're using API.

334
00:15:39,280 --> 00:15:43,949
Think really carefully about
alerts versus alert fatigue.

335
00:15:43,950 --> 00:15:46,160
You really want to minimize the alerts

336
00:15:46,160 --> 00:15:48,900
so those things that are truly important,

337
00:15:48,900 --> 00:15:52,640
and think about audit
processes and exceptions.

338
00:15:52,640 --> 00:15:55,220
If you can minimize things,

339
00:15:55,220 --> 00:15:57,720
potential exceptions through automation,

340
00:15:57,720 --> 00:16:02,720
it can narrow what you must
look at uniquely in an audit.

341
00:16:03,690 --> 00:16:05,590
For the SolarWinds Orion app,

342
00:16:05,590 --> 00:16:09,130
code was injected during
the build process.

343
00:16:09,130 --> 00:16:11,570
The attackers also included safeguards

344
00:16:11,570 --> 00:16:14,250
to prevent backdoor lines of code

345
00:16:14,250 --> 00:16:17,810
from appearing in Orion build logs.

346
00:16:17,810 --> 00:16:19,939
And they also included checks to ensure

347
00:16:19,940 --> 00:16:22,920
that such tampering
wouldn't cause build errors.

348
00:16:22,920 --> 00:16:26,069
Your logs should show who
introduced a code change,

349
00:16:26,070 --> 00:16:28,163
whether the build failed or not.

350
00:16:29,430 --> 00:16:33,859
In this case, you know,
even digitally signed code

351
00:16:33,860 --> 00:16:34,810
wouldn't have helped though,

352
00:16:34,810 --> 00:16:37,849
because the trojanized
component was digitally signed

353
00:16:37,850 --> 00:16:40,100
and contains a backdoor communication

354
00:16:40,100 --> 00:16:43,460
with third party servers
controlled by the attackers.

355
00:16:43,460 --> 00:16:45,233
So what can you do?

356
00:16:48,200 --> 00:16:51,290
Think again about defense and depth.

357
00:16:51,290 --> 00:16:53,290
The attackers use multiple methods,

358
00:16:53,290 --> 00:16:55,783
and you'll need to use multiple defenses.

359
00:16:57,920 --> 00:17:01,790
I've tried to condense these
suggestions into a short list.

360
00:17:01,790 --> 00:17:06,060
What's not here is start with
good hygiene, scan everything

361
00:17:06,060 --> 00:17:08,129
and look carefully at
your access management,

362
00:17:08,130 --> 00:17:11,210
your password policies
and secrets management.

363
00:17:11,210 --> 00:17:13,980
But here's a few other things
you might not have thought of.

364
00:17:13,980 --> 00:17:18,980
Automate your CI/CD to
apply common controls.

365
00:17:19,480 --> 00:17:23,800
Every compliance regulation
or regulatory requirement

366
00:17:26,130 --> 00:17:27,760
relies on common controls.

367
00:17:27,760 --> 00:17:29,930
These are things like,

368
00:17:29,930 --> 00:17:32,560
if the person that changes
the code shouldn't be the one

369
00:17:32,560 --> 00:17:34,639
that pushes it to production.

370
00:17:34,640 --> 00:17:35,870
There's several others.

371
00:17:35,870 --> 00:17:40,219
And you're gonna get
the link to these slides

372
00:17:40,220 --> 00:17:44,500
where I've included links
to more detailed examples,

373
00:17:44,500 --> 00:17:47,440
that we don't really have
time to go into here,

374
00:17:47,440 --> 00:17:51,650
but be sure and look at common controls.

375
00:17:51,650 --> 00:17:54,370
Next, applies zero trust principles.

376
00:17:54,370 --> 00:17:57,100
That includes things like
lease privilege access,

377
00:17:57,100 --> 00:18:01,500
not just to the network, but
to your DevOps tool chain.

378
00:18:01,500 --> 00:18:05,760
GitLab security team has
several blog articles

379
00:18:05,760 --> 00:18:07,923
on best practices that may be helpful.

380
00:18:08,920 --> 00:18:10,980
Also check more obscure things

381
00:18:10,980 --> 00:18:14,320
like container registries,
who has right access?

382
00:18:14,320 --> 00:18:17,139
A compromise of one person
could potentially lead

383
00:18:17,140 --> 00:18:20,310
to a compromise of the container
registry, which could lead

384
00:18:20,310 --> 00:18:24,183
through pipelines to compromisers
of numerous projects.

385
00:18:25,290 --> 00:18:29,870
Conduct an asset and access inventory,

386
00:18:29,870 --> 00:18:32,639
and be sure and include
infrastructure elements

387
00:18:32,640 --> 00:18:33,910
that you may not think about.

388
00:18:33,910 --> 00:18:38,540
Things like registries,
package managers, and so on.

389
00:18:38,540 --> 00:18:41,159
Who has admin access for instance,

390
00:18:41,160 --> 00:18:43,853
to these and to things like Kubernetes?

391
00:18:45,840 --> 00:18:48,970
Number four, apply container scanning

392
00:18:49,838 --> 00:18:53,970
and SAST to scanning your Helm charts.

393
00:18:53,970 --> 00:18:56,170
Consider using Container Host Security

394
00:18:56,170 --> 00:18:59,530
and Container Network Security
that I've just reviewed.

395
00:18:59,530 --> 00:19:03,730
And, you know, open source
tools like Falco and AppArmor,

396
00:19:03,730 --> 00:19:05,210
that's a tongue twister,

397
00:19:05,210 --> 00:19:07,300
when used in a CI environment,

398
00:19:07,300 --> 00:19:09,940
can alert and prevent build servers

399
00:19:09,940 --> 00:19:13,413
from doing unexpected things
like modifying scheduled tasks.

400
00:19:14,400 --> 00:19:17,080
Automated builds may
also help here, you know,

401
00:19:17,080 --> 00:19:20,149
the Teardrop malware
loads directly in memory.

402
00:19:20,150 --> 00:19:22,410
And so it doesn't leave
traces on the disc.

403
00:19:22,410 --> 00:19:26,590
The ephemeral nature of that
automated CI environment

404
00:19:26,590 --> 00:19:29,340
could possibly wipe the malware on a bill.

405
00:19:29,340 --> 00:19:31,199
But I wouldn't rely on that alone,

406
00:19:31,200 --> 00:19:32,700
but it could potentially help.

407
00:19:33,670 --> 00:19:36,209
And last, traditional AppSec testing looks

408
00:19:36,209 --> 00:19:38,820
for known security flaws.

409
00:19:38,820 --> 00:19:41,510
You may want to add fuzz
testing because it's useful

410
00:19:41,510 --> 00:19:46,510
to find things that are
not purely a security flaw,

411
00:19:46,660 --> 00:19:51,070
things that don't have a
signature of a known CVE.

412
00:19:51,070 --> 00:19:54,439
But misconfigurations
can be kind of borderline

413
00:19:54,440 --> 00:19:58,050
as well as other potential flaws there

414
00:19:58,050 --> 00:20:00,270
that don't have a known CVE.

415
00:20:00,270 --> 00:20:04,883
And that's where fuzz testing
can potentially play a role.

416
00:20:08,120 --> 00:20:12,449
Long-term, you need to think
about compliance management.

417
00:20:12,450 --> 00:20:16,660
Compliance frameworks are
pretty basic around securing

418
00:20:16,660 --> 00:20:20,110
the SDLC or software factory itself.

419
00:20:20,110 --> 00:20:23,320
You'll want to consider more
controls and enforcement

420
00:20:23,320 --> 00:20:25,379
beyond those basic.

421
00:20:25,380 --> 00:20:28,250
Things like approvals
to merge code changes.

422
00:20:28,250 --> 00:20:30,010
Do a scan on my code,

423
00:20:30,010 --> 00:20:32,010
not just the mission critical.

424
00:20:32,010 --> 00:20:34,223
Can I scale my current AppSec methods

425
00:20:34,223 --> 00:20:36,669
to the extent now required?

426
00:20:36,670 --> 00:20:38,902
These are important
long-term considerations

427
00:20:38,902 --> 00:20:40,483
to think through.

428
00:20:43,050 --> 00:20:46,290
If a nation state attacker
puts you in their crosshairs,

429
00:20:46,290 --> 00:20:48,240
it's quite likely they're
gonna find a way in

430
00:20:48,240 --> 00:20:51,100
no matter how much
defense and depth you use.

431
00:20:51,100 --> 00:20:52,899
You know, as the saying goes,

432
00:20:52,900 --> 00:20:54,470
they only need to be right once

433
00:20:54,470 --> 00:20:56,670
but you need to be right every time.

434
00:20:56,670 --> 00:20:58,423
But if a breach does occur,

435
00:20:59,889 --> 00:21:02,330
auditability can make the difference

436
00:21:02,330 --> 00:21:04,943
for rapid detection and remediation.

437
00:21:05,900 --> 00:21:08,330
In your software factory,

438
00:21:08,330 --> 00:21:11,629
can you tell who changed
what, where, when?

439
00:21:11,630 --> 00:21:14,170
Can you see all of the code changes

440
00:21:14,170 --> 00:21:16,840
for the code and the environments

441
00:21:16,840 --> 00:21:19,230
upon which it relies?

442
00:21:19,230 --> 00:21:21,480
It's really hard to do
if you're using a bunch

443
00:21:21,480 --> 00:21:24,790
of tools bolted together
in a complex tool chain.

444
00:21:24,790 --> 00:21:29,000
You lose that transparency
as you traverse tool to tool.

445
00:21:29,000 --> 00:21:32,097
Take a fresh look at how
you integrate security

446
00:21:32,097 --> 00:21:35,379
into your software supply chain

447
00:21:35,380 --> 00:21:38,233
and across your DevOps effort.

448
00:21:40,820 --> 00:21:43,169
When you approach security as code

449
00:21:43,170 --> 00:21:47,150
within your DevOps or your
DevSecOps as the case may be,

450
00:21:47,150 --> 00:21:49,230
you can have end-to-end security

451
00:21:49,230 --> 00:21:52,180
from software development,
through delivery and production,

452
00:21:53,350 --> 00:21:54,756
protecting not only the app

453
00:21:54,757 --> 00:21:58,003
but the infrastructure
upon which it relies.

454
00:22:00,440 --> 00:22:03,003
So how can you apply what
you've learned today?

455
00:22:04,210 --> 00:22:08,687
Next week, start with
identifying the access

456
00:22:10,210 --> 00:22:12,400
to the application infrastructure.

457
00:22:12,400 --> 00:22:14,361
And think out of the box.

458
00:22:14,361 --> 00:22:18,023
Think about the infrastructure
elements as well.

459
00:22:18,870 --> 00:22:20,794
In the first three months after this,

460
00:22:20,795 --> 00:22:23,010
determine your six processes

461
00:22:23,010 --> 00:22:24,890
and the policies surrounding each.

462
00:22:24,890 --> 00:22:27,890
This is really where the
bulk of the work happens.

463
00:22:27,890 --> 00:22:30,130
If you haven't integrated
your security scans

464
00:22:30,130 --> 00:22:32,010
into your CIP pipeline,

465
00:22:32,010 --> 00:22:35,240
that's a critical first
step towards automation,

466
00:22:35,240 --> 00:22:37,910
that will help your
security efforts keep up

467
00:22:37,910 --> 00:22:40,453
with those modern apps
and their infrastructure.

468
00:22:41,380 --> 00:22:45,480
But you also need to think
beyond shifting left,

469
00:22:45,480 --> 00:22:49,970
think about all of the processes
that need to be automated

470
00:22:49,970 --> 00:22:54,650
and the policy enforcement
around each of those.

471
00:22:54,650 --> 00:22:56,790
So what am I gonna automate?

472
00:22:56,790 --> 00:22:59,200
What's the scope of that automation?

473
00:22:59,200 --> 00:23:03,350
And what policies are going to be applied

474
00:23:03,350 --> 00:23:04,740
under what circumstances?

475
00:23:04,740 --> 00:23:07,160
So what are they gonna allow and deny

476
00:23:07,160 --> 00:23:11,503
in that software factory
and in my overall processes?

477
00:23:14,100 --> 00:23:16,500
So with that, I'd like
to move to questions,

478
00:23:16,500 --> 00:23:20,190
and happy to take questions live.

