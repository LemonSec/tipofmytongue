1
00:00:01,070 --> 00:00:02,540
- Hello, everybody, today's talk is

2
00:00:02,540 --> 00:00:05,510
on Blockchain Security
Guarantees and Exploits.

3
00:00:05,510 --> 00:00:07,779
From what I understand, there is a live

4
00:00:07,780 --> 00:00:09,080
Q&A session going on right now

5
00:00:09,080 --> 00:00:11,400
as this talk is being streamed.

6
00:00:11,400 --> 00:00:14,080
So I'll be in here, happy
to take any questions

7
00:00:14,080 --> 00:00:15,943
as this talk is going on.

8
00:00:17,580 --> 00:00:19,509
My name is Adrian Bednarek,

9
00:00:19,510 --> 00:00:22,350
I am the CISO at Overflow Labs.

10
00:00:22,350 --> 00:00:24,880
I am into reverse engineering weird stuff,

11
00:00:24,880 --> 00:00:26,759
anything from proprietary protocols,

12
00:00:26,760 --> 00:00:29,750
obfuscated code, digital assets,

13
00:00:29,750 --> 00:00:32,920
anything blockchainy,
and virtual economies.

14
00:00:32,920 --> 00:00:35,170
I have a pretty long history

15
00:00:35,170 --> 00:00:37,470
in exploring virtual economies,

16
00:00:37,470 --> 00:00:40,120
and what that basically
means is reverse engineering

17
00:00:40,120 --> 00:00:41,059
how they work,

18
00:00:41,060 --> 00:00:43,310
reverse engineering how the
technology behind them works,

19
00:00:43,310 --> 00:00:46,100
how the client-to-server
communication works,

20
00:00:46,100 --> 00:00:49,380
and how that can be manipulated
to create functionality

21
00:00:49,380 --> 00:00:51,820
into a system that was
beyond the intention

22
00:00:51,820 --> 00:00:53,120
of the developers.

23
00:00:53,120 --> 00:00:56,910
And I've participated in
virtual economies of MMORPGs,

24
00:00:56,910 --> 00:01:00,059
massively multiplayer
online role-playing games.

25
00:01:00,060 --> 00:01:01,860
Some of them included World of Warcraft,

26
00:01:01,860 --> 00:01:05,230
which is pretty familiar
with a lot of people,

27
00:01:05,230 --> 00:01:07,490
Shadowbane, Rift, Ultima Online,

28
00:01:07,490 --> 00:01:10,009
Wildstar, Elder Scrolls Online,

29
00:01:10,010 --> 00:01:12,043
and a couple dozen more.

30
00:01:13,890 --> 00:01:17,210
Today's agenda will be blockchain,

31
00:01:17,210 --> 00:01:19,009
mainly Ethereum, but also Bitcoin

32
00:01:19,010 --> 00:01:23,860
and any blockchain that uses
elliptical curve cryptography.

33
00:01:23,860 --> 00:01:26,910
We will take a fun, brief,

34
00:01:26,910 --> 00:01:29,429
and quick cryptographic
primitive crash course.

35
00:01:29,430 --> 00:01:31,950
It's a very math-intensive field.

36
00:01:31,950 --> 00:01:35,090
It takes years before a
cryptographic mechanism is vetted.

37
00:01:35,090 --> 00:01:36,510
There is a lot of peer review,

38
00:01:36,510 --> 00:01:39,180
and once it is vetted by the peers

39
00:01:39,180 --> 00:01:40,350
and it's released to the public,

40
00:01:40,350 --> 00:01:44,580
there's a sink-or-swim public adaptation.

41
00:01:44,580 --> 00:01:47,260
You know, is it easy to use by developers?

42
00:01:47,260 --> 00:01:52,260
Is it not resource intensive
on computing devices?

43
00:01:52,600 --> 00:01:54,039
It it easy to use?

44
00:01:54,040 --> 00:01:55,650
Are there a lot of
foot-shots that developers

45
00:01:55,650 --> 00:01:57,476
can make mistakes on?

46
00:01:57,476 --> 00:01:59,370
A lot of cryptographic systems fail

47
00:01:59,370 --> 00:02:01,480
and a lot of them succeed.

48
00:02:01,480 --> 00:02:03,123
It's kind of a roll of the dice.

49
00:02:04,760 --> 00:02:07,250
And then we also talk about
exploiting a weakness,

50
00:02:07,250 --> 00:02:09,243
specifically on the Ethereum blockchain,

51
00:02:09,243 --> 00:02:10,810
but, again, this could apply

52
00:02:10,810 --> 00:02:13,493
to any blockchain that uses ECC.

53
00:02:14,730 --> 00:02:17,130
Why this talk, why now?

54
00:02:17,130 --> 00:02:19,722
Again, blockchain, it's not going away.

55
00:02:22,160 --> 00:02:24,170
And even when using the right tools,

56
00:02:24,170 --> 00:02:27,619
mistakes will be made, but we
will still blame the tools.

57
00:02:27,620 --> 00:02:29,710
That's the age of old way of thinking.

58
00:02:29,710 --> 00:02:32,210
It's never my fault, it's
always the tool's fault.

59
00:02:33,310 --> 00:02:35,670
We will examine the
importance of randomness

60
00:02:35,670 --> 00:02:37,813
and cryptographic private keys.

61
00:02:39,420 --> 00:02:42,380
And then for the fun side of things,

62
00:02:42,380 --> 00:02:45,500
we will examine how we stumbled
into somebody we dubbed

63
00:02:45,500 --> 00:02:48,340
the blockchain bandit that possesses

64
00:02:48,340 --> 00:02:50,673
over a $100,000,000 worth of stolen loot.

65
00:02:53,740 --> 00:02:55,710
So this stock is based
on some research I did

66
00:02:55,710 --> 00:02:59,490
at my previous job at ISE,
Independent Security Evaluators.

67
00:02:59,490 --> 00:03:01,500
And the timeline is this,

68
00:03:01,500 --> 00:03:05,799
in August 2018, I started this
projects called Ethercombing,

69
00:03:05,799 --> 00:03:08,200
and it's was basically
how to find private keys

70
00:03:08,200 --> 00:03:09,873
on a public blockchain.

71
00:03:10,920 --> 00:03:14,309
We will go to details of
that throughout this talk.

72
00:03:14,310 --> 00:03:17,750
In January of 2019, a
Whitepaper was drafted,

73
00:03:17,750 --> 00:03:21,210
and I found out how fun it is
to create Whitepaper Drafts,

74
00:03:21,210 --> 00:03:23,220
and go over many, many reversions

75
00:03:23,220 --> 00:03:26,890
until it's massaged into
something that looks and feels

76
00:03:26,890 --> 00:03:29,500
like a Whitepaper that's worth publishing.

77
00:03:29,500 --> 00:03:31,280
And in February of 2019,

78
00:03:31,280 --> 00:03:33,963
we were faced with a
question, do we publish this?

79
00:03:35,100 --> 00:03:38,299
Anytime you're doing
research, especially research

80
00:03:38,300 --> 00:03:40,210
that's related to the security field

81
00:03:40,210 --> 00:03:41,983
and the security of systems,

82
00:03:43,080 --> 00:03:45,100
by publishing it, you
always have to ask yourself,

83
00:03:45,100 --> 00:03:47,680
will you give the bad guys ammo?

84
00:03:47,680 --> 00:03:51,403
Will they take this research
and use it to cause harm?

85
00:03:53,660 --> 00:03:55,820
So we mulled around on
it for a little bit,

86
00:03:55,820 --> 00:03:57,519
and then we did some tests.

87
00:03:57,520 --> 00:04:01,840
And through our testing, we
found that this was being

88
00:04:01,840 --> 00:04:03,680
exploited actively in the wild.

89
00:04:03,680 --> 00:04:05,110
So by publishing it, you know,

90
00:04:05,110 --> 00:04:08,060
we'd raised awareness and
help to protect people.

91
00:04:08,060 --> 00:04:13,060
So in April of 2019, we went
and published the Whitepaper,

92
00:04:13,290 --> 00:04:15,940
and it got picked up
by I think, wired.com.

93
00:04:15,940 --> 00:04:19,800
And then it got picked up by a dozen or so

94
00:04:19,800 --> 00:04:20,903
other news outlets.

95
00:04:23,560 --> 00:04:27,230
In early of 2021, I started a new company

96
00:04:27,230 --> 00:04:28,710
with some friends called Overflow,

97
00:04:28,710 --> 00:04:31,530
and we did a refresh on
their original research,

98
00:04:31,530 --> 00:04:33,830
and that's what we're
presenting on right now.

99
00:04:36,260 --> 00:04:40,730
So let's get over with
the boring and fun stuff,

100
00:04:40,730 --> 00:04:42,460
depending on your perspective

101
00:04:42,460 --> 00:04:45,796
on cryptography and blockchain primitives.

102
00:04:46,750 --> 00:04:48,580
So common cryptographic concepts,

103
00:04:48,580 --> 00:04:51,070
we'll go through this very quickly.

104
00:04:51,070 --> 00:04:53,469
Asymmetric Encryption,
the key concept here

105
00:04:53,470 --> 00:04:55,170
is that you have a
private key that encrypts,

106
00:04:55,170 --> 00:04:57,293
and a public key that decrypts.

107
00:04:58,970 --> 00:05:02,480
Public Key Signing, data
signed with a public key.

108
00:05:02,480 --> 00:05:04,320
I mean, sorry, data
signing with a private key

109
00:05:04,320 --> 00:05:06,020
can be verified with a public key.

110
00:05:06,961 --> 00:05:07,794
A Hash Function.

111
00:05:07,794 --> 00:05:10,750
A hash function takes
a variable sized input

112
00:05:10,750 --> 00:05:13,363
and generates a random fixed length value.

113
00:05:14,350 --> 00:05:17,260
The most common one right now is SHA-256

114
00:05:17,260 --> 00:05:19,560
before that it was SHA-128,

115
00:05:19,560 --> 00:05:23,420
which Google found this hash collision on.

116
00:05:23,420 --> 00:05:27,060
So SHA-128 is considered a
broken a hash function now,

117
00:05:27,060 --> 00:05:32,060
'cause you're able to collide
the hash result value.

118
00:05:32,250 --> 00:05:34,973
SHA-256 is still going good and strong.

119
00:05:36,810 --> 00:05:40,180
Entropy, one of the key
concepts of this stock,

120
00:05:40,180 --> 00:05:42,653
entropy is the measurement of randomness.

121
00:05:43,990 --> 00:05:45,573
If you have some random data,

122
00:05:46,530 --> 00:05:49,539
the random data's
distribution should be uniform

123
00:05:49,540 --> 00:05:51,410
amongst all possible values.

124
00:05:51,410 --> 00:05:54,233
Here, we see a green line in the graph,

125
00:05:56,510 --> 00:05:59,289
that's completely...

126
00:05:59,290 --> 00:06:00,820
Sorry, laser pointing.

127
00:06:00,820 --> 00:06:02,159
That's completely flat.

128
00:06:02,160 --> 00:06:03,490
So uniform distribution.

129
00:06:03,490 --> 00:06:05,660
And if we sampled the
random data that's generated

130
00:06:05,660 --> 00:06:08,823
you can see there's very
minimal variations in this data.

131
00:06:10,210 --> 00:06:12,770
There's a lot of statistical
tests to mathematically prove

132
00:06:12,770 --> 00:06:15,380
that something is random
or not, but you know,

133
00:06:15,380 --> 00:06:17,057
visually you can take a glimpse and say,

134
00:06:17,057 --> 00:06:17,947
"Hey this looks pretty random,

135
00:06:17,947 --> 00:06:21,487
"'cause it matches the
continuous uniform line."

136
00:06:23,710 --> 00:06:26,390
Again, if you have
something that's low entropy

137
00:06:26,390 --> 00:06:29,110
the deviation between
the sampled random data

138
00:06:29,110 --> 00:06:32,680
and the expected continuous
uniform random data

139
00:06:34,090 --> 00:06:35,400
is going to be obvious.

140
00:06:35,400 --> 00:06:37,400
There's going to be obvious deviations.

141
00:06:37,400 --> 00:06:39,770
And if you were to map this random data

142
00:06:39,770 --> 00:06:42,690
to a three-dimensional cube...

143
00:06:42,690 --> 00:06:44,810
Let me go back to the previous slide.

144
00:06:44,810 --> 00:06:47,020
Completely random data should appear to be

145
00:06:47,020 --> 00:06:48,400
like volumetric fog.

146
00:06:48,400 --> 00:06:51,969
Like if you had a cube
of just like mist or fog

147
00:06:53,590 --> 00:06:57,919
if there is a low entropy
system generating random numbers

148
00:06:57,920 --> 00:07:00,470
the entropy will be obvious.

149
00:07:00,470 --> 00:07:03,700
Like here you can see like
little dark markings here

150
00:07:03,700 --> 00:07:05,530
which indicates that, you know,

151
00:07:05,530 --> 00:07:07,479
things aren't random as they should be.

152
00:07:09,929 --> 00:07:12,419
And this is a huge rabbit hole.

153
00:07:12,420 --> 00:07:15,300
Elliptical Curve Digital
Signature Algorithm.

154
00:07:15,300 --> 00:07:19,163
It's kind of the foundation
of a lot of blockchains,

155
00:07:20,050 --> 00:07:22,852
specifically Ethereum and Bitcoin use

156
00:07:22,852 --> 00:07:24,327
a specific curve primitive
called it the secp256k1.

157
00:07:29,300 --> 00:07:32,320
Nearly all other blockchains use this,

158
00:07:32,320 --> 00:07:34,263
or some other variation of it.

159
00:07:36,890 --> 00:07:41,440
And the gist here is that
you create a private key

160
00:07:41,440 --> 00:07:45,820
to create a point on the curve
and that points on the curve

161
00:07:45,820 --> 00:07:48,813
is used to calculate the
different point on the curve.

162
00:07:50,620 --> 00:07:53,120
That second point you cannot do any math

163
00:07:53,120 --> 00:07:55,130
or you cannot derive that first point.

164
00:07:55,130 --> 00:07:59,240
So the second point on
the curve can not be used

165
00:07:59,240 --> 00:08:02,550
to work backwards and find
the first point on the curve,

166
00:08:02,550 --> 00:08:04,330
which was derived from your private key.

167
00:08:04,330 --> 00:08:05,972
That's kind of a key concept.

168
00:08:08,050 --> 00:08:10,950
So with all these concepts,
we have the blockchain, ta-da!

169
00:08:12,810 --> 00:08:16,217
The transactions are secured
by hashing it and signing it.

170
00:08:16,217 --> 00:08:19,400
And the critical inputs to a blockchain

171
00:08:19,400 --> 00:08:22,760
stems from a user generated private key.

172
00:08:22,760 --> 00:08:24,680
And that's highlighted in red here

173
00:08:24,680 --> 00:08:26,560
'cause we are about to dive in,

174
00:08:26,560 --> 00:08:29,223
what happens if there are mistakes made?

175
00:08:30,950 --> 00:08:34,462
So blockchain addresses and private keys.

176
00:08:36,490 --> 00:08:37,909
This is a lot of data

177
00:08:37,909 --> 00:08:40,400
but we'll walk through from top to bottom.

178
00:08:40,400 --> 00:08:41,350
So on the top here,

179
00:08:41,350 --> 00:08:43,963
you have a randomly generated private key.

180
00:08:46,330 --> 00:08:48,883
To get a public Ethereum address,

181
00:08:49,900 --> 00:08:51,449
it's essentially three steps.

182
00:08:51,450 --> 00:08:53,430
One, you have the private key.

183
00:08:53,430 --> 00:08:58,430
Then you use the elliptical
curve, secp256k1 derivation

184
00:08:59,690 --> 00:09:01,840
to get your public key.

185
00:09:01,840 --> 00:09:04,850
Then you perform a hash function.

186
00:09:04,850 --> 00:09:09,850
Ethereum uses Keccak256
to hash the public key

187
00:09:10,130 --> 00:09:12,990
to a value, which is here.

188
00:09:12,990 --> 00:09:15,430
Then the lower 20 bytes of this value

189
00:09:15,430 --> 00:09:16,770
is your Ethereum address.

190
00:09:16,770 --> 00:09:18,600
And this is the address that's public,

191
00:09:18,600 --> 00:09:19,847
that you give to your friend and be like,

192
00:09:19,847 --> 00:09:21,920
"Hey please pay me some
Ethereum to this address."

193
00:09:21,920 --> 00:09:25,043
This is the address in red
here that you'd give to them.

194
00:09:27,320 --> 00:09:29,420
So let's go through it again step-by-step.

195
00:09:30,410 --> 00:09:32,947
So step one, you generate the private key.

196
00:09:32,947 --> 00:09:34,823
And here we have 32 randomBytes.

197
00:09:37,140 --> 00:09:39,970
Step two, you derive the elliptical curve

198
00:09:39,970 --> 00:09:41,570
public key from the private key.

199
00:09:43,340 --> 00:09:48,120
So you do the secp256k1
transformation to get a public key,

200
00:09:48,120 --> 00:09:50,503
and then you get a 64-byte value back.

201
00:09:53,250 --> 00:09:56,550
Then you take the 64-byte value,

202
00:09:56,550 --> 00:10:01,130
and then you perform a hash
on it through keccak256,

203
00:10:01,130 --> 00:10:02,740
and then you get 32 bytes back.

204
00:10:02,740 --> 00:10:06,693
The lower 24 bytes
highlighted in yellow here,

205
00:10:07,900 --> 00:10:09,173
is your Ethereum address.

206
00:10:11,040 --> 00:10:12,079
It's pretty straight forward,

207
00:10:12,080 --> 00:10:14,950
if you abstract it away like that.

208
00:10:14,950 --> 00:10:17,530
The math behind this is very complex,

209
00:10:17,530 --> 00:10:20,783
and would take dozens of years to study.

210
00:10:22,860 --> 00:10:26,053
So anyway, private keys
are supposed to be random.

211
00:10:27,740 --> 00:10:29,173
We know errors can be made.

212
00:10:31,180 --> 00:10:34,959
From here on, a little
caution here, exclaimer.

213
00:10:34,960 --> 00:10:38,820
This isn't a the-sky-is-falling moment.

214
00:10:38,820 --> 00:10:41,330
So two disclaimers from
here on the focus is

215
00:10:41,330 --> 00:10:42,950
on the Ethereum blockchain,

216
00:10:42,950 --> 00:10:46,620
but the same concepts apply
to other ECDSA blockchains,

217
00:10:46,620 --> 00:10:50,010
such as Bitcoin, EOS, Dash, NEO, XRP,

218
00:10:50,010 --> 00:10:52,073
and a dozen or so others.

219
00:10:54,260 --> 00:10:56,013
The journey here that we're about to take

220
00:10:56,013 --> 00:10:58,240
over the next dozen or so slides

221
00:10:59,530 --> 00:11:02,390
will show that we were able
to discover weak private keys.

222
00:11:02,390 --> 00:11:05,290
Now this doesn't mean that the
blockchain Ethereum is broken

223
00:11:05,290 --> 00:11:09,630
or any other blockchain
based on ECDSA is broken.

224
00:11:09,630 --> 00:11:12,490
It's just to highlight the importance

225
00:11:12,490 --> 00:11:14,410
of truly random private keys,

226
00:11:14,410 --> 00:11:18,283
and verifying that private
keys are generated randomly.

227
00:11:19,580 --> 00:11:21,483
So, now what?

228
00:11:23,230 --> 00:11:26,130
We know how to create a private key,

229
00:11:26,130 --> 00:11:29,040
we know how to transform that
private key to a public key

230
00:11:29,040 --> 00:11:33,290
using the ECDSA curve.

231
00:11:33,290 --> 00:11:36,819
And then we know how to
derive an address from that.

232
00:11:36,820 --> 00:11:39,463
So let's play the hacker's
favorite game, what if?

233
00:11:40,410 --> 00:11:41,920
Typically when attacking the system,

234
00:11:41,920 --> 00:11:43,240
that's the first thing I do,

235
00:11:43,240 --> 00:11:45,600
as I learned how the
system works and then I go,

236
00:11:45,600 --> 00:11:46,433
what if we do this?

237
00:11:46,433 --> 00:11:47,417
What if we do that?

238
00:11:47,417 --> 00:11:48,830
And then you test it out,

239
00:11:48,830 --> 00:11:50,780
and see if you get unexpected behavior.

240
00:11:52,010 --> 00:11:54,213
So with this knowledge,
let's play, what if?

241
00:11:55,955 --> 00:11:58,640
What if we have errors in
generating random keys?

242
00:11:58,640 --> 00:12:00,930
Errors and codes are pretty common.

243
00:12:00,930 --> 00:12:03,750
Typically when you running some code

244
00:12:03,750 --> 00:12:06,280
and you get an error,
you get an error code.

245
00:12:06,280 --> 00:12:10,230
What happens if you use this
error code as your private key?

246
00:12:10,230 --> 00:12:12,230
This does happen.

247
00:12:12,230 --> 00:12:16,500
What if you just, by some chance,

248
00:12:16,500 --> 00:12:18,343
create a private key of one.

249
00:12:19,210 --> 00:12:22,763
Now this is a valid private key
which is interesting enough,

250
00:12:24,430 --> 00:12:26,323
but it's also highly unlikely.

251
00:12:28,570 --> 00:12:31,060
So let's stick the
private with key of one,

252
00:12:31,060 --> 00:12:33,739
and do all the proper transformations.

253
00:12:33,740 --> 00:12:35,920
And then we get a public key that starts

254
00:12:35,920 --> 00:12:38,703
in 7e5 and ends and bdf.

255
00:12:40,030 --> 00:12:44,020
And if we go to a blockchain
explorer for Ethereum,

256
00:12:44,020 --> 00:12:45,313
in this example, again,

257
00:12:46,280 --> 00:12:50,973
we can see if any transactions
occurred on this public key.

258
00:12:52,530 --> 00:12:54,360
So for a private key of one,

259
00:12:54,360 --> 00:12:57,043
we can see that there
were 635 transactions.

260
00:12:58,410 --> 00:13:01,360
So this is the aha moments
where it gets interesting.

261
00:13:01,360 --> 00:13:03,210
Somebody used the private key of one,

262
00:13:03,210 --> 00:13:07,353
and 635 transactions were committed on it.

263
00:13:09,150 --> 00:13:10,439
So what if we look at, you know,

264
00:13:10,440 --> 00:13:14,143
the private keys of two,
three, four, five, and so on?

265
00:13:15,700 --> 00:13:19,820
Remember that private
key space is 256-bits.

266
00:13:19,820 --> 00:13:22,433
That's roughly the amount
of atoms in the universe.

267
00:13:24,140 --> 00:13:28,060
We can't possibly
enumerate every single key

268
00:13:28,060 --> 00:13:30,650
in that key space 'cause
there isn't enough energy

269
00:13:30,650 --> 00:13:33,683
in the universe to do that.

270
00:13:35,460 --> 00:13:37,870
So what we did in this
research is we broke

271
00:13:37,870 --> 00:13:42,870
the 256-bit key down
into eight 32-bit chunks.

272
00:13:45,770 --> 00:13:47,793
Now I'll illustrate what I mean by that.

273
00:13:49,690 --> 00:13:52,857
So here are the first four
chunks that we scanned.

274
00:13:52,857 --> 00:13:55,230
So first we scan 32-bits,

275
00:13:55,230 --> 00:13:59,220
and this very first part of this key.

276
00:13:59,220 --> 00:14:02,060
32-bits is called a
DWORD in computer lingo.

277
00:14:02,060 --> 00:14:04,420
So we scan the first DWORD.

278
00:14:04,420 --> 00:14:05,740
Then we scanned the second DWORD,

279
00:14:05,740 --> 00:14:07,700
third DWORD, fourth DWORD.

280
00:14:07,700 --> 00:14:10,623
And going forward, fifth
DWORD, sixth DWORD,

281
00:14:10,623 --> 00:14:12,023
seventh DWORD, eighth DWORD.

282
00:14:12,890 --> 00:14:16,693
And just to make it crystal clear,

283
00:14:17,780 --> 00:14:20,930
so each highlighted range is 32-bits,

284
00:14:20,930 --> 00:14:25,310
and that's roughly 4.2
billion possible private keys

285
00:14:25,310 --> 00:14:26,183
in each range.

286
00:14:28,940 --> 00:14:30,690
So to make this more concrete,

287
00:14:30,690 --> 00:14:35,690
the first group, the range is
gonna be from one to FFFFFFFF,

288
00:14:36,160 --> 00:14:40,819
and FFFFFFF is hexadecimal
for 4.2 billion,

289
00:14:40,820 --> 00:14:42,140
and I forgot the rest.

290
00:14:42,140 --> 00:14:43,803
It's like 4.29 billion.

291
00:14:45,240 --> 00:14:47,590
So we did the same thing in group B.

292
00:14:47,590 --> 00:14:50,227
We just offset everything
to the next DWORD,

293
00:14:50,227 --> 00:14:51,640
and the key space.

294
00:14:51,640 --> 00:14:53,213
And so on in group C,

295
00:14:54,620 --> 00:14:58,310
and group D, E, F and G, and H, I think.

296
00:14:58,310 --> 00:15:01,739
Anyway, so we ended up
scanning around 32 billion keys

297
00:15:01,740 --> 00:15:04,130
and I can't even joke about this

298
00:15:04,130 --> 00:15:06,520
'cause to scan 32 billion keys,

299
00:15:06,520 --> 00:15:09,543
it's a pretty resource-intensive task.

300
00:15:11,140 --> 00:15:14,640
For a single core on a
computer you can scan about,

301
00:15:14,640 --> 00:15:18,380
well, in an unoptimized way,
I was running a node JS.

302
00:15:18,380 --> 00:15:21,430
I was scanning about
30,000 keys per second.

303
00:15:21,430 --> 00:15:24,939
So what I did was I spun
this up in the cloud,

304
00:15:24,940 --> 00:15:28,000
and Google was nice enough
to give you cloud credits

305
00:15:28,000 --> 00:15:31,520
for new accounts, so they
gave me $300 worth of credits,

306
00:15:31,520 --> 00:15:32,790
and I was like, sweet, I'll use this

307
00:15:32,790 --> 00:15:35,490
to scan through empty space
to find weak private keys.

308
00:15:36,470 --> 00:15:40,550
So basically what I did is
turned a $300 worth of credits

309
00:15:40,550 --> 00:15:44,660
into finding emptied blockchain wallets.

310
00:15:44,660 --> 00:15:46,762
And we'll go dive into that next.

311
00:15:49,350 --> 00:15:50,880
So the results.

312
00:15:50,880 --> 00:15:55,510
In group A, from the private
key of one to 4.2 billion,

313
00:15:55,510 --> 00:15:57,680
we scanned every single one.

314
00:15:57,680 --> 00:16:00,180
We found that a few 100 private keys

315
00:16:00,180 --> 00:16:02,609
each dot represents a match

316
00:16:04,360 --> 00:16:07,690
for a key that was used
to conduct a transaction

317
00:16:07,690 --> 00:16:09,300
on the public blockchain.

318
00:16:11,550 --> 00:16:13,469
So for example, right
here on the line you see

319
00:16:13,470 --> 00:16:15,323
the private key of one, it was used.

320
00:16:16,210 --> 00:16:20,670
And there's a very interesting
obvious pattern around here.

321
00:16:20,670 --> 00:16:24,370
And this is around the FF
range, the next decimal,

322
00:16:24,370 --> 00:16:26,370
and that's the upper bound

323
00:16:26,370 --> 00:16:30,530
of an eight-bit hexadecimal byte,

324
00:16:33,400 --> 00:16:35,160
which is somewhat interesting

325
00:16:35,160 --> 00:16:37,610
because after you go past that point

326
00:16:37,610 --> 00:16:39,410
it gets pretty sparse.

327
00:16:39,410 --> 00:16:41,060
I'm not sure why that is,

328
00:16:41,060 --> 00:16:43,282
it's just something interesting to note.

329
00:16:47,760 --> 00:16:51,380
The center groups, B, C, D, E, F, and G

330
00:16:51,380 --> 00:16:53,123
we found only four keys.

331
00:16:55,780 --> 00:16:57,410
And here they are part of that

332
00:16:57,410 --> 00:16:58,760
their respective opposites.

333
00:17:00,020 --> 00:17:02,970
There's a big red arrow
pointing to this key.

334
00:17:02,970 --> 00:17:06,780
This is a very interesting
key that I'll get to

335
00:17:06,780 --> 00:17:08,889
in a couple of slide, just remembered.

336
00:17:08,890 --> 00:17:10,920
Remember the big red
arrow pointing to that guy

337
00:17:10,920 --> 00:17:11,819
and this guy.

338
00:17:11,819 --> 00:17:14,569
We'll reference that guy and
this guy over and over again,

339
00:17:14,569 --> 00:17:15,403
in a little bit.

340
00:17:17,550 --> 00:17:21,042
So group H, the very last
group in the 256-bit key space.

341
00:17:22,050 --> 00:17:24,530
We did the same thing
scanning 4.2 billion keys

342
00:17:24,530 --> 00:17:25,369
in that key space,

343
00:17:25,369 --> 00:17:28,082
and we found a couple of 100 marquees.

344
00:17:29,170 --> 00:17:32,420
And most of them seem to
be clustered, you know,

345
00:17:32,420 --> 00:17:36,330
very close to the upper
bound of that DWORD.

346
00:17:36,330 --> 00:17:39,960
If we were to reverse this
graph would probably be

347
00:17:39,960 --> 00:17:41,890
the same case as in the first group,

348
00:17:41,890 --> 00:17:44,850
where most of the keys were
within that first byte.

349
00:17:44,850 --> 00:17:46,389
And there's probably some little NDNS

350
00:17:46,390 --> 00:17:48,760
going around where things
get shuffled around

351
00:17:48,760 --> 00:17:51,543
based how the keys are
generated, and things like that.

352
00:17:52,690 --> 00:17:55,650
But that's another
rabbit hole to dive down

353
00:17:55,650 --> 00:17:58,893
as to why these keys are
grouped in certain ways.

354
00:18:01,110 --> 00:18:05,379
So the full results, we
found 732 private keys.

355
00:18:07,600 --> 00:18:10,622
These keys were involved
in 50,000 transactions.

356
00:18:12,100 --> 00:18:12,949
And this is Ethereum,

357
00:18:12,950 --> 00:18:15,200
so they did have tokens
associated with them.

358
00:18:15,200 --> 00:18:18,910
And there were 16 million tokens
that were actually active.

359
00:18:18,910 --> 00:18:20,630
Like you could have
gone in and transferred

360
00:18:20,630 --> 00:18:22,740
all of these tokens out,
but most of them were

361
00:18:22,740 --> 00:18:24,980
like spam tokens that really
didn't have any value.

362
00:18:24,980 --> 00:18:29,980
So nobody really bothered
to interact with these.

363
00:18:31,160 --> 00:18:34,830
And originally when we
conducted this research,

364
00:18:34,830 --> 00:18:36,419
we thought we would find some Ethereum,

365
00:18:36,420 --> 00:18:38,500
which would present an interesting

366
00:18:38,500 --> 00:18:40,993
legal and ethical problem.

367
00:18:43,700 --> 00:18:45,240
When you interact with the blockchain

368
00:18:45,240 --> 00:18:48,810
and you generate a private
key, the key space is known.

369
00:18:48,810 --> 00:18:50,850
Your private key is gonna be some value

370
00:18:50,850 --> 00:18:55,273
between one and the upper
bound of a 256-bit number.

371
00:18:57,670 --> 00:19:02,010
Well, if you, by chance,
come across a private key

372
00:19:02,010 --> 00:19:03,313
that somebody else used,

373
00:19:04,640 --> 00:19:09,010
technically it's, you
know, it's found property

374
00:19:09,010 --> 00:19:12,340
out in public, or finders
keepers, losers keepers.

375
00:19:12,340 --> 00:19:14,629
I don't know if that concept
applies in the blockchain

376
00:19:14,630 --> 00:19:17,260
but there's some interesting
legal implications

377
00:19:17,260 --> 00:19:19,083
on what to do if you know,

378
00:19:20,070 --> 00:19:22,740
on the off chance you generate a bit,

379
00:19:22,740 --> 00:19:24,790
or a cryptocurrency wallet,

380
00:19:24,790 --> 00:19:27,780
and then you happen to
see that your wallet,

381
00:19:27,780 --> 00:19:30,300
the wallet that you thought
was brand new has a balance.

382
00:19:30,300 --> 00:19:32,850
You know, let's say you
create a Bitcoin wallet,

383
00:19:32,850 --> 00:19:35,770
and it has 10,000 Bitcoin in it,

384
00:19:35,770 --> 00:19:37,340
because your private key collided

385
00:19:37,340 --> 00:19:38,689
with somebody else's private key.

386
00:19:38,690 --> 00:19:40,340
What are the ethics of, you know,

387
00:19:41,660 --> 00:19:43,213
dealing with that situation?

388
00:19:44,080 --> 00:19:45,679
I think it's pretty interesting.

389
00:19:47,040 --> 00:19:51,310
But anyway, we found 732 private
keys, a lot of transactions

390
00:19:51,310 --> 00:19:52,653
and a zero balance.

391
00:19:54,280 --> 00:19:57,133
And this is the totality of our findings,

392
00:19:58,550 --> 00:19:59,850
in this cool little chart.

393
00:20:02,730 --> 00:20:05,920
So anyway, that awkward
moment when you bump

394
00:20:05,920 --> 00:20:07,053
into a real bad guy.

395
00:20:08,950 --> 00:20:10,593
Remember this guy, that guy.

396
00:20:13,570 --> 00:20:18,100
So, that represents an offset

397
00:20:18,100 --> 00:20:22,203
in the key space of group G.

398
00:20:24,490 --> 00:20:29,073
We know the private key,
the public key is this.

399
00:20:32,730 --> 00:20:36,330
So again, what we're looking
at here is a transaction

400
00:20:36,330 --> 00:20:37,960
from somebody to somebody

401
00:20:37,960 --> 00:20:40,343
with a pretty small value, about $7.

402
00:20:41,700 --> 00:20:45,160
The from is a private key that we know

403
00:20:45,160 --> 00:20:48,563
because we happened to collide with it.

404
00:20:51,590 --> 00:20:56,590
Somebody transferred money
of that known private key

405
00:20:56,640 --> 00:20:59,270
to somewhere else, to this address,

406
00:20:59,270 --> 00:21:02,123
this address that starts
in 957 and ends in 464.

407
00:21:04,100 --> 00:21:06,129
We were interested, who is that guy?

408
00:21:06,130 --> 00:21:07,960
So we went on the blockchain explorer,

409
00:21:07,960 --> 00:21:10,500
and we punched in that address.

410
00:21:10,500 --> 00:21:15,300
And we found out that that
person that interacted

411
00:21:15,300 --> 00:21:18,090
with a private key that we also found

412
00:21:18,090 --> 00:21:21,562
and looted $7 of Ethereum from it,

413
00:21:22,440 --> 00:21:25,050
that guy has a balance of 44,000 Ethereum,

414
00:21:25,050 --> 00:21:28,592
which today is worth $105 million.

415
00:21:32,070 --> 00:21:35,550
Digging around some more,
we found that this person

416
00:21:35,550 --> 00:21:37,360
that was basically vacuuming up,

417
00:21:37,360 --> 00:21:41,709
or siphoning, or looting,
stealing is a strong word,

418
00:21:41,710 --> 00:21:46,710
basically finding key collisions
in the private key space,

419
00:21:47,120 --> 00:21:51,110
was taking little bits of
Ethereum here and there

420
00:21:51,110 --> 00:21:52,310
in an automated fashion.

421
00:21:53,570 --> 00:21:56,500
What we did one day is test to see

422
00:21:56,500 --> 00:21:57,810
how active this person is.

423
00:21:57,810 --> 00:22:02,810
So we created a new wallet
within a key space that exists

424
00:22:03,920 --> 00:22:06,810
in a part of the key space that, you know,

425
00:22:06,810 --> 00:22:08,290
is known to have bad entropy.

426
00:22:08,290 --> 00:22:13,180
So anyway, we created a
wallet with a bad private key,

427
00:22:13,180 --> 00:22:14,910
and we sent the dollar to it.

428
00:22:14,910 --> 00:22:17,740
And instantly this guy
took that dollar out of it

429
00:22:17,740 --> 00:22:19,973
within, you know, half a second.

430
00:22:21,320 --> 00:22:22,990
So this person was looking,

431
00:22:22,990 --> 00:22:26,360
or monitoring for weak private
keys in an automated fashion.

432
00:22:26,360 --> 00:22:27,830
And he's very successful at it

433
00:22:27,830 --> 00:22:29,893
because he's got over $100 million.

434
00:22:31,210 --> 00:22:33,080
And that's all we know.

435
00:22:33,080 --> 00:22:35,560
The identity of this person is not known,

436
00:22:35,560 --> 00:22:37,470
and he's still active, as of last night,

437
00:22:37,470 --> 00:22:39,180
I was checking, and he was still active.

438
00:22:39,180 --> 00:22:41,490
So it's pretty interesting.

439
00:22:41,490 --> 00:22:43,480
It could be a bot somebody forgot about,

440
00:22:43,480 --> 00:22:45,960
and you know their bot that is stealing,

441
00:22:45,960 --> 00:22:48,780
or looting these private keys is amassing

442
00:22:48,780 --> 00:22:49,940
hundreds of millions of dollars

443
00:22:49,940 --> 00:22:52,500
without knowledge, who knows?

444
00:22:52,500 --> 00:22:54,783
It'll be an interesting story
one day when it comes out.

445
00:22:56,940 --> 00:22:58,160
So what else?

446
00:22:58,160 --> 00:23:01,490
We, you know, we enumerated
a bunch of private keys.

447
00:23:01,490 --> 00:23:04,810
We found transactions that
were committed on them.

448
00:23:04,810 --> 00:23:08,667
We found a bad guy that was
like looting all of these keys,

449
00:23:08,667 --> 00:23:11,360
you know, over a
$100,000,000 in his wallet.

450
00:23:11,360 --> 00:23:12,760
So what else can we look at?

451
00:23:14,410 --> 00:23:18,700
We know that the address is
derived from a keccak256 hash

452
00:23:18,700 --> 00:23:20,420
of the public key.

453
00:23:20,420 --> 00:23:23,950
But what if the public key is null?

454
00:23:23,950 --> 00:23:26,480
Which happens a lot in programming land,

455
00:23:26,480 --> 00:23:28,530
you initialize a variable and you forget

456
00:23:28,530 --> 00:23:30,333
to set it to a value.

457
00:23:31,420 --> 00:23:34,880
So you have a null public
key, and then you hash it,

458
00:23:34,880 --> 00:23:36,910
and then you get a vowel-looking hash.

459
00:23:36,910 --> 00:23:41,910
The hash starts in dcc and ends in 470.

460
00:23:42,080 --> 00:23:46,919
We looked this up and we saw
that there was 42 transactions

461
00:23:46,920 --> 00:23:49,100
performed on an address

462
00:23:49,100 --> 00:23:51,253
that was derived from a null public key.

463
00:23:53,550 --> 00:23:58,190
And this address has a
balance of 815 Ether,

464
00:23:58,190 --> 00:24:00,340
which is about $1.4 million.

465
00:24:00,340 --> 00:24:02,169
And this is money lost forever,

466
00:24:02,170 --> 00:24:04,030
'cause I'm not sure how you define

467
00:24:04,030 --> 00:24:06,560
the public or private
key that would collide

468
00:24:07,980 --> 00:24:11,220
with an address derived
from a null public key.

469
00:24:11,220 --> 00:24:14,243
That's another interesting
rabbit hole to dive down into.

470
00:24:18,450 --> 00:24:22,140
And to this address, that was
derived from a null public key

471
00:24:22,140 --> 00:24:23,760
there were some pretty big transactions.

472
00:24:23,760 --> 00:24:27,800
I redacted the name here 'cause
it was of a major exchange

473
00:24:27,800 --> 00:24:31,363
that's based here in the US, you know,

474
00:24:32,340 --> 00:24:36,669
through their transaction
history they sent 150 Ether

475
00:24:36,670 --> 00:24:38,880
and then they sent, you
know, a fraction of Ether,

476
00:24:38,880 --> 00:24:41,160
and then they sent 323 more.

477
00:24:41,160 --> 00:24:43,640
So that's about a million
dollars worth of Ether

478
00:24:43,640 --> 00:24:47,260
that were lost by accident
by a major exchange,

479
00:24:47,260 --> 00:24:48,763
which is pretty interesting.

480
00:24:53,440 --> 00:24:55,070
So, like I said, this
was based on research

481
00:24:55,070 --> 00:24:56,909
that was conducted in 2019,

482
00:24:56,910 --> 00:24:59,473
and here we are in 2021, what changed?

483
00:25:00,610 --> 00:25:04,780
Back then, we discovered 732 private keys,

484
00:25:04,780 --> 00:25:07,230
now we discovered 859.

485
00:25:07,230 --> 00:25:10,960
Back then there were 49,000 transactions,

486
00:25:10,960 --> 00:25:14,763
now we have almost 57,000 transactions.

487
00:25:15,630 --> 00:25:19,483
Back then when we found
32 looted Ethereum,

488
00:25:21,160 --> 00:25:26,160
now we found 228 looted Ethereum.

489
00:25:26,940 --> 00:25:30,530
Meaning that if back in 2019,

490
00:25:30,530 --> 00:25:32,649
we kept our software
running and then we found

491
00:25:32,650 --> 00:25:34,900
all these private keys, and
then we monitored transactions

492
00:25:34,900 --> 00:25:36,203
going into these private keys,

493
00:25:37,571 --> 00:25:40,159
you know, we could have looted, you know,

494
00:25:40,160 --> 00:25:44,550
close to $400,000+,

495
00:25:44,550 --> 00:25:46,149
but somebody else is doing that.

496
00:25:50,350 --> 00:25:54,770
So the gist of this story is that

497
00:25:54,770 --> 00:25:57,383
private keys are high value assets.

498
00:26:00,150 --> 00:26:03,580
One way people go about
protecting their private keys

499
00:26:03,580 --> 00:26:05,153
is to generate Paper Wallets.

500
00:26:06,590 --> 00:26:08,419
Typically, the way you
do this is you download

501
00:26:08,420 --> 00:26:09,520
some open source software.

502
00:26:09,520 --> 00:26:12,629
You put it on a USB stick,
and then you walk over

503
00:26:12,630 --> 00:26:17,630
into an offline computer to
generate the private key,

504
00:26:18,140 --> 00:26:20,010
and the public key.

505
00:26:20,010 --> 00:26:23,440
And then you get like a piece
of paper you can print out,

506
00:26:23,440 --> 00:26:26,930
or jot down, or whatever that
will have your private key

507
00:26:26,930 --> 00:26:29,780
that never touched an
internet connected computer,

508
00:26:29,780 --> 00:26:31,450
which is really important.

509
00:26:31,450 --> 00:26:33,360
And then you can like cut this off

510
00:26:33,360 --> 00:26:34,850
and share that public address,

511
00:26:34,850 --> 00:26:36,629
'cause if you wanna receive funds

512
00:26:36,630 --> 00:26:38,800
you can share this with your
friends on the internet,

513
00:26:38,800 --> 00:26:39,857
your blog, whatever, say,

514
00:26:39,857 --> 00:26:41,660
"Hey, send me some Ethereum".

515
00:26:41,660 --> 00:26:44,750
The key concept here is
that the private key exists

516
00:26:44,750 --> 00:26:47,620
on an offline computer that
never touched the internet.

517
00:26:47,620 --> 00:26:49,419
You think that's pretty safe, right?

518
00:26:51,360 --> 00:26:52,830
So we saw two instances

519
00:26:52,830 --> 00:26:54,679
where Paper wallets were compromised.

520
00:26:56,160 --> 00:26:58,573
The first one, which
is pretty interesting,

521
00:26:59,442 --> 00:27:04,442
BitcoinPaperWallet.com
the developer injected

522
00:27:05,330 --> 00:27:08,070
malicious code into the source code

523
00:27:08,070 --> 00:27:10,852
that was very obfuscated
and hard to audit.

524
00:27:11,800 --> 00:27:15,659
And when people eventually figured out

525
00:27:15,660 --> 00:27:18,681
what this obfuscated code
was doing was basically

526
00:27:18,681 --> 00:27:21,660
just generating random seeds
for random private keys

527
00:27:22,610 --> 00:27:25,919
in a deterministic way that
was known only to the attacker.

528
00:27:25,920 --> 00:27:28,920
So even though you ran the
software on an offline computer,

529
00:27:28,920 --> 00:27:30,870
a computer that never
touched the internet,

530
00:27:30,870 --> 00:27:33,270
the way those private keys were generated

531
00:27:33,270 --> 00:27:35,283
were known to his algorithm.

532
00:27:36,760 --> 00:27:39,250
Therefore he was able to
reproduce the same thing

533
00:27:39,250 --> 00:27:41,833
on his end to find the key collisions,

534
00:27:43,530 --> 00:27:48,410
and this has been discovered
to be active since 2018.

535
00:27:48,410 --> 00:27:52,000
Over $6 million were stolen.

536
00:27:52,000 --> 00:27:53,730
And as of right now,

537
00:27:53,730 --> 00:27:57,033
I believe this is an
ongoing investigation.

538
00:27:59,940 --> 00:28:03,220
The other interesting case is iotaseed.io.

539
00:28:03,220 --> 00:28:07,323
Iota, I think, was or is
another cryptocurrency.

540
00:28:08,430 --> 00:28:10,790
Again, it's an those open source project,

541
00:28:10,790 --> 00:28:12,960
which I think is pretty funny,
'cause people usually think

542
00:28:12,960 --> 00:28:14,570
open source it's more secure,

543
00:28:14,570 --> 00:28:15,970
'cause there's more eyes on it, right?

544
00:28:15,970 --> 00:28:17,810
But if everybody says
the exact same thing,

545
00:28:17,810 --> 00:28:19,210
then nobody's looking at it.

546
00:28:20,050 --> 00:28:23,169
So it was an exploit that was implanted

547
00:28:23,170 --> 00:28:24,980
into the source code.

548
00:28:24,980 --> 00:28:26,310
People assumed it was open source,

549
00:28:26,310 --> 00:28:27,827
so they were like, "This must be legit,

550
00:28:27,827 --> 00:28:31,020
"'cause you know there's
a lot of eyes on this".

551
00:28:31,020 --> 00:28:34,830
But it turns out people didn't
really want to dive into

552
00:28:34,830 --> 00:28:36,720
what this obfuscated code was doing,

553
00:28:36,720 --> 00:28:38,860
'cause it looks pretty innocent.

554
00:28:38,860 --> 00:28:41,840
But again, the same
result was there is that

555
00:28:41,840 --> 00:28:44,189
this obfuscated code was
generating random keys

556
00:28:45,580 --> 00:28:48,270
in a deterministic way that
were only known to the attacker.

557
00:28:48,270 --> 00:28:51,030
So the attacker could reproduce
the random key generation

558
00:28:51,030 --> 00:28:55,680
on his computer to create key collisions.

559
00:28:55,680 --> 00:28:58,740
And this person stole over $10 million,

560
00:28:58,740 --> 00:29:02,363
and I do believe he was
arrested by Interpol.

561
00:29:03,230 --> 00:29:04,870
I do believe he was in Germany.

562
00:29:04,870 --> 00:29:07,233
So he's having a court battle right now.

563
00:29:10,260 --> 00:29:13,443
Other interesting threats
against offline key generation.

564
00:29:14,500 --> 00:29:16,060
Side channel emissions.

565
00:29:16,060 --> 00:29:18,139
So we're all familiar with like Specter,

566
00:29:18,140 --> 00:29:20,980
and all these hardware
bloggers that allow processes

567
00:29:20,980 --> 00:29:23,300
to snoop in on privileged processes,

568
00:29:23,300 --> 00:29:24,330
and how they're processing,

569
00:29:24,330 --> 00:29:29,122
and read memory from
privileged areas of the system.

570
00:29:30,140 --> 00:29:34,060
But here's a completely different
way of attacking things,

571
00:29:34,060 --> 00:29:38,500
and that's using
electromagnetic emissions from,

572
00:29:38,500 --> 00:29:43,500
let's say, your DVI cable,
or maybe your HDMI cable.

573
00:29:43,980 --> 00:29:45,550
HDMI might be a little
bit more complicated

574
00:29:45,550 --> 00:29:47,980
since the signal is typically encrypted

575
00:29:47,980 --> 00:29:52,720
but definitely VGA, DVI,
and other cables like that

576
00:29:52,720 --> 00:29:55,170
that you connect to your monitor.

577
00:29:55,170 --> 00:29:57,810
People are able to use
off-the-shelf software

578
00:29:57,810 --> 00:29:59,919
to spy on these radio emissions

579
00:29:59,920 --> 00:30:03,550
from a distance as much
as like 90 to 100 feet.

580
00:30:03,550 --> 00:30:07,430
And they use the software
that was created by this guy

581
00:30:07,430 --> 00:30:08,940
the software's called TempestSDR.

582
00:30:08,940 --> 00:30:10,400
So use some off-the-shelf hardware,

583
00:30:10,400 --> 00:30:13,830
use this software called the TempestSDR,

584
00:30:13,830 --> 00:30:17,879
and you are able to recreate
what somebody else sees

585
00:30:17,880 --> 00:30:21,057
on the monitor from up to 100 feet away.

586
00:30:22,280 --> 00:30:23,840
So in this example,

587
00:30:23,840 --> 00:30:26,520
this monitor on the left is displaying

588
00:30:26,520 --> 00:30:28,879
an example of a password.

589
00:30:28,880 --> 00:30:32,690
And on the right, you can
see the TempestSDR software

590
00:30:32,690 --> 00:30:35,380
using off-the-shelf hardware to recreate

591
00:30:35,380 --> 00:30:38,520
what the other monitor is displaying.

592
00:30:38,520 --> 00:30:40,510
That's not very clear,
but it's clear enough.

593
00:30:40,510 --> 00:30:43,000
And if you had better hardware,

594
00:30:43,000 --> 00:30:45,070
fine tune the software a little bit more

595
00:30:45,070 --> 00:30:47,050
you could get a pretty
accurate representation

596
00:30:47,050 --> 00:30:48,592
of what's on the screen.

597
00:30:50,090 --> 00:30:53,830
So if you are dealing
with high value assets

598
00:30:53,830 --> 00:30:56,620
that are predicted by,

599
00:30:56,620 --> 00:30:59,852
you know, private keys, passwords,

600
00:31:00,770 --> 00:31:02,580
any piece of data that can give you access

601
00:31:02,580 --> 00:31:03,730
to those high value assets,

602
00:31:03,730 --> 00:31:05,660
you know, you always have to consider

603
00:31:05,660 --> 00:31:08,380
is the equipment that I'm
using able to transmit

604
00:31:10,870 --> 00:31:13,389
visible data, you know,
outside my building,

605
00:31:13,390 --> 00:31:14,980
outside my room, and things like that.

606
00:31:14,980 --> 00:31:18,660
And you have to understand all
the possible threat vectors.

607
00:31:18,660 --> 00:31:20,720
And I thought this one
was pretty interesting,

608
00:31:20,720 --> 00:31:23,250
especially since they were able to use

609
00:31:23,250 --> 00:31:26,080
off-the-shelf equipment
to snoop or spy on screens

610
00:31:26,080 --> 00:31:27,223
from 100 feet away.

611
00:31:31,040 --> 00:31:32,163
So what now?

612
00:31:34,830 --> 00:31:36,320
It's also interesting that blockchains

613
00:31:36,320 --> 00:31:37,903
have built in bug bounties.

614
00:31:39,710 --> 00:31:43,320
And what I mean by that
is blockchains hold

615
00:31:43,320 --> 00:31:45,129
a lot valuable data,

616
00:31:45,130 --> 00:31:47,713
and so they're being attacked constantly.

617
00:31:49,190 --> 00:31:52,202
If you find an exploit in the blockchain,

618
00:31:52,202 --> 00:31:54,040
any weakness can be monetized

619
00:31:54,040 --> 00:31:56,143
within minutes or instantly.

620
00:31:57,100 --> 00:31:59,607
There's a really good article called

621
00:31:59,607 --> 00:32:00,870
"Ethereum is a Dark Forest",

622
00:32:00,870 --> 00:32:02,919
that kind of illustrates this example

623
00:32:02,920 --> 00:32:05,760
where there are basically,
essentially bots

624
00:32:05,760 --> 00:32:08,980
that are running automated
fuzzing on transactions,

625
00:32:08,980 --> 00:32:13,970
smart contracts, and other
blockchain-specific technologies,

626
00:32:13,970 --> 00:32:15,830
to automatically discover exploits

627
00:32:15,830 --> 00:32:17,633
and then siphon funds out.

628
00:32:21,280 --> 00:32:23,149
Traditional software, SaaS services,

629
00:32:23,150 --> 00:32:26,270
and anything that handles
valuable data is a target,

630
00:32:26,270 --> 00:32:28,830
especially when you're
talking about, you know,

631
00:32:28,830 --> 00:32:32,483
a 256-bit key that
protects a lot of assets.

632
00:32:35,530 --> 00:32:37,520
So what next?

633
00:32:37,520 --> 00:32:40,170
How could you apply what we
talked here in this talk?

634
00:32:41,270 --> 00:32:43,213
The main thing is to audit and verify.

635
00:32:44,090 --> 00:32:46,970
Use well-known cryptographic
libraries and primitives.

636
00:32:46,970 --> 00:32:49,037
The adults saying, and
crypto was, you know,

637
00:32:49,037 --> 00:32:50,380
"Don't roll your own crypto."

638
00:32:50,380 --> 00:32:51,490
And that's true for a reason

639
00:32:51,490 --> 00:32:53,823
'cause it's very easy to make mistakes.

640
00:32:55,380 --> 00:32:56,690
Audit numbers generators.

641
00:32:56,690 --> 00:32:59,370
This is an interesting one, but you know

642
00:32:59,370 --> 00:33:01,370
you only want to use
cryptographically secure

643
00:33:01,370 --> 00:33:03,270
random number generation methods.

644
00:33:03,270 --> 00:33:05,300
And that's true for blockchains,

645
00:33:05,300 --> 00:33:08,310
and let's say if you're
building some software

646
00:33:08,310 --> 00:33:12,629
that serves web data or manager sessions,

647
00:33:12,630 --> 00:33:14,160
you don't want your sessions to collide.

648
00:33:14,160 --> 00:33:15,680
You don't want somebody logging in,

649
00:33:15,680 --> 00:33:19,630
and getting a session based
on a bad random number

650
00:33:19,630 --> 00:33:21,420
that will collide with
somebody else's session.

651
00:33:21,420 --> 00:33:23,130
'Cause I've seen this in the past where

652
00:33:23,130 --> 00:33:27,223
customer A will log in and they
will see customer B's data.

653
00:33:28,713 --> 00:33:31,933
Get into some interesting
issues and a lot of paperwork.

654
00:33:33,300 --> 00:33:37,043
One way to avoid this is to use
multiple sources of entropy.

655
00:33:40,400 --> 00:33:42,230
The other thing you can do is, you know,

656
00:33:42,230 --> 00:33:45,140
perform regular static
analysis on the source code.

657
00:33:45,140 --> 00:33:48,010
And do runtime dynamic analysis

658
00:33:48,010 --> 00:33:51,023
on the binary stuff the
source code generates,

659
00:33:51,940 --> 00:33:54,410
'cause static analyzers are
pretty good at like picking up

660
00:33:54,410 --> 00:33:57,910
the obvious things, but
doing a dynamic analysis

661
00:33:57,910 --> 00:34:00,400
on what's actually generated, and testing,

662
00:34:00,400 --> 00:34:02,670
and benchmarking the functionality

663
00:34:02,670 --> 00:34:04,730
to make sure it's within the spec

664
00:34:04,730 --> 00:34:06,713
that the developers designed.

665
00:34:07,930 --> 00:34:11,693
It's really important to
verify that at runtime also.

666
00:34:13,120 --> 00:34:15,170
And you also want to bake security into,

667
00:34:15,170 --> 00:34:17,560
you know, CI/CD pipelines.

668
00:34:17,560 --> 00:34:20,210
Do use static analysis tools.

669
00:34:20,210 --> 00:34:25,179
And when distributing high value builds,

670
00:34:25,179 --> 00:34:27,870
or builds that are used by
a large number of people,

671
00:34:27,870 --> 00:34:31,370
you know, do use
deterministic builds to verify

672
00:34:33,280 --> 00:34:36,840
that the code supplied
pipeline wasn't compromised

673
00:34:36,840 --> 00:34:39,929
at some point by a malicious insider.

674
00:34:39,929 --> 00:34:41,859
You want to have a consensus on,

675
00:34:41,860 --> 00:34:45,100
yes this thing was built,
and all of our builds match,

676
00:34:45,100 --> 00:34:47,933
and are therefore verified,
and therefor we can ship it.

677
00:34:50,053 --> 00:34:51,862
Do's and don'ts, mostly do's.

678
00:34:52,949 --> 00:34:54,542
Do enforce signed commits.

679
00:34:55,780 --> 00:34:57,520
We've seen, or I've seen a case

680
00:34:57,520 --> 00:35:01,420
where a developer was compromised,

681
00:35:01,420 --> 00:35:05,457
and their workstation
was used to commit code

682
00:35:07,050 --> 00:35:10,800
to their GitHub repo, which
was then later distributed

683
00:35:10,800 --> 00:35:14,137
out to the public, and it
did some pretty good harm,

684
00:35:14,137 --> 00:35:16,343
(clears throat) did some
pretty good harm out there.

685
00:35:17,680 --> 00:35:20,696
Do review code merges and pull requests.

686
00:35:20,697 --> 00:35:25,697
I've seen several cases
where people just merge

687
00:35:26,010 --> 00:35:29,570
a pull request, and without,
you know, thoroughly reviewing

688
00:35:29,570 --> 00:35:32,120
the code, and malicious
code gets introduced

689
00:35:32,120 --> 00:35:33,442
into the system,

690
00:35:34,360 --> 00:35:35,460
I've seen this a couple of times.

691
00:35:35,460 --> 00:35:38,460
So it's really important to
do thorough code reviews,

692
00:35:38,460 --> 00:35:40,530
especially when you're dealing with data

693
00:35:40,530 --> 00:35:42,693
that's being introduced from, let's say,

694
00:35:43,540 --> 00:35:44,730
an open source project,

695
00:35:44,730 --> 00:35:46,113
or a community project.

696
00:35:48,850 --> 00:35:50,150
Do harden workstations,

697
00:35:50,150 --> 00:35:53,513
especially in today's, you
know, home office environment.

698
00:35:54,920 --> 00:35:56,110
Like in the first point,

699
00:35:56,110 --> 00:35:58,210
we've seen the workstation
being compromised

700
00:35:58,210 --> 00:36:02,110
that was used to commit
code to GitHub repo,

701
00:36:02,110 --> 00:36:06,577
that was then used to distribute
code in the widespread way.

702
00:36:10,020 --> 00:36:12,280
When dealing with cryptographic systems,

703
00:36:12,280 --> 00:36:16,270
do review the NIST Cryptographic
standards and guidelines.

704
00:36:16,270 --> 00:36:18,680
I have a link here,
it's a really long PDF.

705
00:36:18,680 --> 00:36:21,730
It's good reading material,
if you wanna fall asleep.

706
00:36:21,730 --> 00:36:26,040
It's hundreds and hundreds of
pages of really good guidance

707
00:36:26,040 --> 00:36:28,540
on how to use cryptographic systems,

708
00:36:28,540 --> 00:36:31,263
what to look for, and things like that.

709
00:36:33,580 --> 00:36:36,303
Do follow this recommended test suites.

710
00:36:38,390 --> 00:36:41,190
Whenever you're building
something you wanna test

711
00:36:41,190 --> 00:36:45,460
individual components that you're building

712
00:36:45,460 --> 00:36:48,890
your software with and NIST
recommended test suites

713
00:36:48,890 --> 00:36:50,710
will help you, you know,

714
00:36:50,710 --> 00:36:52,993
will help guide you
through that whole process.

715
00:36:54,230 --> 00:36:57,160
But in the end, that awareness
is the key. (clears throat)

716
00:36:57,160 --> 00:36:59,163
Outside the box thinking is crucial.

717
00:37:00,030 --> 00:37:02,470
Check the box compliance is secondary.

718
00:37:02,470 --> 00:37:05,350
And what I mean by that is I've seen a lot

719
00:37:05,350 --> 00:37:08,350
of systems where the
auditors passed everything.

720
00:37:08,350 --> 00:37:10,230
All the boxes were checked,

721
00:37:10,230 --> 00:37:12,540
you know, it met all the requirements.

722
00:37:12,540 --> 00:37:14,420
but then doing a hands-on assessment,

723
00:37:14,420 --> 00:37:16,430
or sending it off to an assessment company

724
00:37:16,430 --> 00:37:21,430
and it comes back with really
cool issues in the system.

725
00:37:21,910 --> 00:37:23,279
So check the compliance,

726
00:37:23,280 --> 00:37:27,210
check the box compliance is
nice for its own purposes,

727
00:37:27,210 --> 00:37:29,830
but you always have to test
and the verify the system

728
00:37:29,830 --> 00:37:32,009
that, you know, it can't be compromised.

729
00:37:32,010 --> 00:37:36,880
And my final word is that if
you create novel technologies

730
00:37:36,880 --> 00:37:39,683
then people will find
novel ways to exploit them.

731
00:37:41,240 --> 00:37:43,616
And that's all I have
for you guys, thank you.

