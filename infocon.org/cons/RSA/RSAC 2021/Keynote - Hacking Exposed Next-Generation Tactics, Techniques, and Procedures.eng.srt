1
00:00:00,756 --> 00:00:03,339
(upbeat music)

2
00:00:19,195 --> 00:00:21,778
(bright music)

3
00:00:32,670 --> 00:00:34,830
- Thanks for joining this
Hacking Exposed session.

4
00:00:34,830 --> 00:00:36,580
Appreciate you all stopping by.

5
00:00:36,580 --> 00:00:37,860
My name is Mike Sentonas.

6
00:00:37,860 --> 00:00:40,250
I'm the CTO here at CrowdStrike.

7
00:00:40,250 --> 00:00:41,360
I would have loved to have been doing

8
00:00:41,360 --> 00:00:42,490
this session in person

9
00:00:42,490 --> 00:00:44,690
and hopefully we are getting closer

10
00:00:44,690 --> 00:00:46,360
to being able to get together

11
00:00:46,360 --> 00:00:48,769
and do an RSA where we are in person

12
00:00:48,770 --> 00:00:52,810
and we get to do a Hacking
Exposed demo session live.

13
00:00:52,810 --> 00:00:54,470
My co-presenter for this session,

14
00:00:54,470 --> 00:00:58,180
George Kurtz, author of
the Hacking Exposed series,

15
00:00:58,180 --> 00:01:00,420
Co-Founder and CEO of CrowdStrike.

16
00:01:00,420 --> 00:01:02,250
Unfortunately, George can't be here.

17
00:01:02,250 --> 00:01:03,670
He does send his apologies.

18
00:01:03,670 --> 00:01:06,720
He couldn't make it with
me to do this session.

19
00:01:06,720 --> 00:01:08,240
With that said the content

20
00:01:08,240 --> 00:01:10,350
is what we are gonna cover together.

21
00:01:10,350 --> 00:01:12,149
So let's get into it.

22
00:01:12,150 --> 00:01:14,310
Earlier this year,
George along with others

23
00:01:14,310 --> 00:01:18,130
testified before the Senate
Intelligence Committee

24
00:01:18,130 --> 00:01:19,570
and discuss the SolarWinds attack.

25
00:01:19,570 --> 00:01:23,149
In his testimony, he
called out the threat actor

26
00:01:23,150 --> 00:01:26,310
took advantage of systemic weaknesses

27
00:01:26,310 --> 00:01:29,050
in the windows
authentication architecture,

28
00:01:29,050 --> 00:01:33,050
allowing the adversary to move
laterally within the network

29
00:01:33,050 --> 00:01:35,280
as well as between the
network and the cloud

30
00:01:35,280 --> 00:01:37,470
by creating false credentials

31
00:01:37,470 --> 00:01:39,890
impersonating legitimate users

32
00:01:39,890 --> 00:01:43,380
and by bypassing
Multi-factor authentication.

33
00:01:43,380 --> 00:01:47,000
One of the most sophisticated
aspects of the campaign

34
00:01:47,000 --> 00:01:50,280
was how skillfully the
attacker took advantage

35
00:01:50,280 --> 00:01:52,150
of architectural limitations

36
00:01:52,150 --> 00:01:55,570
in Microsoft's Active
Directory Federation Services.

37
00:01:55,570 --> 00:01:57,429
There's been a lot of
talk about Golden SAML

38
00:01:57,430 --> 00:01:59,500
and the Golden SAML attack.

39
00:01:59,500 --> 00:02:01,390
In this particular example,

40
00:02:01,390 --> 00:02:05,380
it allowed the adversary to
jump from an organization

41
00:02:05,380 --> 00:02:07,830
and their On-premises environments

42
00:02:07,830 --> 00:02:10,259
into the cloud and cloud applications,

43
00:02:10,259 --> 00:02:12,829
effectively bypassing multi-factor

44
00:02:12,830 --> 00:02:14,720
authentication as mentioned.

45
00:02:14,720 --> 00:02:17,580
So this specific attack vector is not new.

46
00:02:17,580 --> 00:02:20,930
It was documented in 2017 by CyberArk,

47
00:02:20,930 --> 00:02:22,470
so shout out to them,

48
00:02:22,470 --> 00:02:25,890
and it operates at a cloud-scale version

49
00:02:25,890 --> 00:02:28,070
of a similar identity-based attack

50
00:02:28,070 --> 00:02:31,180
that George originally
wrote about in 1999.

51
00:02:31,180 --> 00:02:34,763
So great opportunity to
go back and revisit that.

52
00:02:35,660 --> 00:02:39,490
Now this is not a session to
go through the entire campaign.

53
00:02:39,490 --> 00:02:41,080
We don't have time for that.

54
00:02:41,080 --> 00:02:44,270
I'm gonna focus on a sophisticated aspect

55
00:02:44,270 --> 00:02:46,170
of the StellarParticle campaign

56
00:02:46,170 --> 00:02:48,519
which was how skillfully the threat actor

57
00:02:48,520 --> 00:02:50,740
took advantage of
architectural limitations

58
00:02:50,740 --> 00:02:55,600
in Microsoft ADFS credentialing
and authentication process.

59
00:02:55,600 --> 00:02:57,140
So I've talked about Golden SAML.

60
00:02:57,140 --> 00:03:01,290
The attack leveraged by the
actors allowed them to jump

61
00:03:01,290 --> 00:03:03,890
from an organizations
On-premises environment

62
00:03:03,890 --> 00:03:05,790
into their cloud and cloud applications

63
00:03:05,790 --> 00:03:08,630
and bypassing Multi-factor authentication

64
00:03:08,630 --> 00:03:11,130
and what SUNBURST in
this particular attack

65
00:03:11,130 --> 00:03:12,840
made it terribly clear,

66
00:03:12,840 --> 00:03:15,470
was that environments
had trust relationships

67
00:03:15,470 --> 00:03:19,070
between On-premises and the
cloud, specifically Azure,

68
00:03:19,070 --> 00:03:21,480
and not a lot of people expected that.

69
00:03:21,480 --> 00:03:25,070
So it showed us that
your On-premises issues

70
00:03:25,070 --> 00:03:28,459
don't stay On-premise when
you move to the cloud.

71
00:03:28,460 --> 00:03:31,020
It showed us that an
attack against On-premises

72
00:03:31,020 --> 00:03:33,510
could lead to a compromise in the cloud

73
00:03:33,510 --> 00:03:35,690
and other cloud applications.

74
00:03:35,690 --> 00:03:39,020
We saw the adversary
further complicate things

75
00:03:39,020 --> 00:03:42,110
by creating multiple points of persistence

76
00:03:42,110 --> 00:03:45,020
by placing persistence
mechanisms On-premise

77
00:03:45,020 --> 00:03:45,930
and then they placed them

78
00:03:45,930 --> 00:03:48,850
into the organization's cloud as well.

79
00:03:48,850 --> 00:03:52,130
And it's crucial to
show that organizations

80
00:03:52,130 --> 00:03:54,790
when they attempt to evict
the adversary one area,

81
00:03:54,790 --> 00:03:56,950
they don't forget all the other locations

82
00:03:56,950 --> 00:04:00,410
and this really held true in
that particular situation.

83
00:04:00,410 --> 00:04:03,510
When the adversary has this
type of circular control

84
00:04:03,510 --> 00:04:05,823
on the environment as
you'll see in the demo,

85
00:04:05,824 --> 00:04:06,880
and we need to be very careful

86
00:04:06,880 --> 00:04:08,530
in how we evict the adversary

87
00:04:08,530 --> 00:04:10,924
so we can be confident
that they're no longer

88
00:04:10,924 --> 00:04:11,757
in the environment,

89
00:04:11,757 --> 00:04:13,020
that they no longer have privileged

90
00:04:13,020 --> 00:04:16,130
and they haven't established
themselves for a longer term.

91
00:04:16,130 --> 00:04:18,420
We believe this circular
control of an environment

92
00:04:18,420 --> 00:04:21,360
will become more normal
as our IT environments

93
00:04:21,360 --> 00:04:23,830
become an environment of environments.

94
00:04:23,830 --> 00:04:27,530
We saw zero trust strategies
that only focus on the cloud,

95
00:04:27,530 --> 00:04:29,849
leaving them blind to On-premises

96
00:04:29,850 --> 00:04:32,650
especially on the
On-premise identity plane.

97
00:04:32,650 --> 00:04:34,739
If we know an adversary can jump

98
00:04:34,740 --> 00:04:36,960
from On-premises to the cloud,

99
00:04:36,960 --> 00:04:39,919
we need that additional signal coming in

100
00:04:39,920 --> 00:04:42,100
from our On-premise identity planning

101
00:04:42,100 --> 00:04:45,230
including risk scores to drive decisions

102
00:04:45,230 --> 00:04:47,360
on if we allow that
same identity or persona

103
00:04:47,360 --> 00:04:49,720
to perform an action in the cloud.

104
00:04:49,720 --> 00:04:51,860
We need to learn from this campaign

105
00:04:51,860 --> 00:04:53,740
and apply a lot of the knowledge

106
00:04:53,740 --> 00:04:55,180
to create better strategies

107
00:04:55,180 --> 00:04:57,510
to protect ourselves moving forward.

108
00:04:57,510 --> 00:04:59,659
Additionally, although the adversary here

109
00:04:59,660 --> 00:05:03,410
was extremely sophisticated
on how they compromise

110
00:05:03,410 --> 00:05:04,500
the supply chain,

111
00:05:04,500 --> 00:05:08,490
it's post exploit activity
of laterally moving

112
00:05:08,490 --> 00:05:10,760
and escalating privileges
in the environment

113
00:05:10,760 --> 00:05:12,200
was nothing new.

114
00:05:12,200 --> 00:05:15,490
By demonstrating how open-source tools

115
00:05:15,490 --> 00:05:17,040
can pull off the attack,

116
00:05:17,040 --> 00:05:18,530
what we wanted to achieve

117
00:05:18,530 --> 00:05:19,809
and what we hope it will do

118
00:05:19,810 --> 00:05:21,910
is allow you to better understand the risk

119
00:05:21,910 --> 00:05:23,830
and the tremendous impact.

120
00:05:23,830 --> 00:05:27,180
Let's do a quick primer
and dig into the demo.

121
00:05:27,180 --> 00:05:28,160
As you can see here,

122
00:05:28,160 --> 00:05:31,210
Microsoft Active Directory architecture

123
00:05:31,210 --> 00:05:33,289
ADFS is domain joined.

124
00:05:33,290 --> 00:05:36,170
This means if Active
Directory is compromised

125
00:05:36,170 --> 00:05:39,490
or any domain admin or
equivalent credential,

126
00:05:39,490 --> 00:05:43,710
then the adversary can
actually move to ADFS.

127
00:05:43,710 --> 00:05:47,380
This is especially harmful
when all domain joined assets

128
00:05:47,380 --> 00:05:49,360
and need to talk to Active Directory

129
00:05:49,360 --> 00:05:51,940
so network segmentation
does not help here.

130
00:05:51,940 --> 00:05:56,130
This is unlike other identity
providers whose service

131
00:05:56,130 --> 00:05:57,950
are not domain joined,

132
00:05:57,950 --> 00:06:00,200
forcing the adversary
to do additional recon

133
00:06:00,200 --> 00:06:02,940
or lateral movement, which
increases their likelihood

134
00:06:02,940 --> 00:06:04,930
of being detected and stopped.

135
00:06:04,930 --> 00:06:08,190
ADFs was seen in the
majority of environments

136
00:06:08,190 --> 00:06:09,890
impacted by SUNBURST.

137
00:06:09,890 --> 00:06:14,620
In addition, Azure ID does not
support smart cards natively

138
00:06:14,620 --> 00:06:16,270
which most of US public sector,

139
00:06:16,270 --> 00:06:19,210
as an example, departments
and agencies do leverage.

140
00:06:19,210 --> 00:06:22,419
So this means most of
those critical customers

141
00:06:22,420 --> 00:06:25,830
were forced to use this
weaker implementation

142
00:06:25,830 --> 00:06:28,310
of an identity provider ADFS

143
00:06:28,310 --> 00:06:31,950
if they wanted to use Azure
Office 365, as an example.

144
00:06:31,950 --> 00:06:36,050
I do wanna note that once the
adversary compromises ADFS,

145
00:06:36,050 --> 00:06:38,480
they can perform what is
known as a Golden SAML attack

146
00:06:38,480 --> 00:06:41,180
which is very similar to
a Golden Ticket Attack.

147
00:06:41,180 --> 00:06:43,810
Golden SAML allows the attacker

148
00:06:43,810 --> 00:06:45,510
to jump to the cloud resources,

149
00:06:45,510 --> 00:06:47,620
namely Azure, and Office 365.

150
00:06:47,620 --> 00:06:49,910
Bypassing Multi-factor authentication

151
00:06:49,910 --> 00:06:54,320
and post impersonating
any user at any time

152
00:06:54,320 --> 00:06:55,969
with any privilege.

153
00:06:55,970 --> 00:06:58,340
We will illustrate how
to perform this attack

154
00:06:58,340 --> 00:07:00,849
and just how easy to use a Microsoft's ID

155
00:07:00,850 --> 00:07:04,020
and Active Directory Federation
Service architecture.

156
00:07:04,020 --> 00:07:06,909
Now, many people that
we've spoken to told us

157
00:07:06,910 --> 00:07:10,210
that they're not susceptible
to the Golden SAML attack

158
00:07:10,210 --> 00:07:13,430
since their ADFS is not
routable from the internet

159
00:07:13,430 --> 00:07:15,110
and that they forced their end-users

160
00:07:15,110 --> 00:07:17,770
to be part of the internet first.

161
00:07:17,770 --> 00:07:19,359
And I wanted to call this out.

162
00:07:19,360 --> 00:07:21,440
But the interesting thing
is once the adversary

163
00:07:21,440 --> 00:07:25,560
has compromised the ADFS
services private certificate,

164
00:07:25,560 --> 00:07:28,050
they will never need to touch ADFS again.

165
00:07:28,050 --> 00:07:29,880
That certificate can be exported

166
00:07:29,880 --> 00:07:32,500
out of the environment
and authentication flows

167
00:07:32,500 --> 00:07:34,610
will never hit ADFS.

168
00:07:34,610 --> 00:07:38,750
And once the adversary
creates forged SAML objects,

169
00:07:38,750 --> 00:07:41,030
they are for all intensive purposes

170
00:07:41,030 --> 00:07:43,429
acting as the ADFS server

171
00:07:43,430 --> 00:07:46,630
while also bypassing
Multi-factor authentication

172
00:07:46,630 --> 00:07:51,630
since MFA challenges happen
before a SAML object is created.

173
00:07:51,700 --> 00:07:53,460
Now another thing to call out,

174
00:07:53,460 --> 00:07:56,690
we make the assumption that
we have SUNBURST-like control

175
00:07:56,690 --> 00:07:57,523
over the environment.

176
00:07:57,523 --> 00:07:59,436
Meaning access to a service account

177
00:07:59,436 --> 00:08:03,299
who also has administrator,
access on the domain controller

178
00:08:03,300 --> 00:08:05,700
and Active Directory Federation service.

179
00:08:05,700 --> 00:08:08,240
Our impacted supply chain
server is the main joints

180
00:08:08,240 --> 00:08:10,030
of the Active Directory.

181
00:08:10,030 --> 00:08:13,590
We disabled antivirus to show the attack.

182
00:08:13,590 --> 00:08:16,020
We aren't showing how to evade AV

183
00:08:16,020 --> 00:08:19,330
for hopefully obvious
reasons for this demo.

184
00:08:19,330 --> 00:08:23,289
The steps that we will take
to compromise this environment

185
00:08:23,290 --> 00:08:27,110
and then jump to the cloud
can be taken any time

186
00:08:27,110 --> 00:08:30,160
the adversary achieved
this level of control

187
00:08:30,160 --> 00:08:32,950
on Active Directory or domain controller,

188
00:08:32,950 --> 00:08:35,970
regardless of how they
got into the environment.

189
00:08:35,970 --> 00:08:39,270
We will mimic the same post-exploit TPs

190
00:08:39,270 --> 00:08:40,939
that the adversary took.

191
00:08:40,940 --> 00:08:43,390
So we'll start on the supply chain server,

192
00:08:43,390 --> 00:08:47,010
our patient zero will do
recon against the environment.

193
00:08:47,010 --> 00:08:49,030
We'll then laterally move

194
00:08:49,030 --> 00:08:51,699
to the Active Directory
Federation Service.

195
00:08:51,700 --> 00:08:54,810
There, we will then use the identity

196
00:08:54,810 --> 00:08:57,939
for which the ADFS service is running as

197
00:08:57,940 --> 00:09:01,359
and harvest the golden
SAML private certificate.

198
00:09:01,359 --> 00:09:02,891
And with this certificate,

199
00:09:02,891 --> 00:09:05,209
we will then forge legitimate SAML objects

200
00:09:05,210 --> 00:09:10,160
and gain access to Office
365, as well as Azure.

201
00:09:10,160 --> 00:09:11,650
There's a lot been written about this.

202
00:09:11,650 --> 00:09:14,090
So as we go through
this going pretty quick

203
00:09:14,090 --> 00:09:14,970
easy to come back

204
00:09:14,970 --> 00:09:18,170
and read about a lot of
these particular steps.

205
00:09:18,170 --> 00:09:20,010
We'll take it one step further

206
00:09:20,010 --> 00:09:22,280
and we will then use our Azure privileges

207
00:09:22,280 --> 00:09:24,130
to create another backdoor

208
00:09:24,130 --> 00:09:26,900
into the On-premises active directory.

209
00:09:26,900 --> 00:09:29,490
And this will be illustrating
the circular nature

210
00:09:29,490 --> 00:09:31,920
of command and control we
have in the environment.

211
00:09:31,920 --> 00:09:33,469
And this portion of the demo

212
00:09:33,470 --> 00:09:36,130
shows the circular trust relationships

213
00:09:36,130 --> 00:09:37,930
our environments have.

214
00:09:37,930 --> 00:09:40,739
Not only can the adversary
jump to the cloud

215
00:09:40,740 --> 00:09:43,100
by compromising our On-premises,

216
00:09:43,100 --> 00:09:46,660
they can compromise our
On-premises via the cloud.

217
00:09:46,660 --> 00:09:50,120
And these steps were not
necessarily seen in SUNBURST

218
00:09:50,120 --> 00:09:52,070
but similar techniques have been seen

219
00:09:52,070 --> 00:09:55,650
in prior nation state
incident response engagements.

220
00:09:55,650 --> 00:09:59,319
And we all must understand
that these risks exist

221
00:09:59,320 --> 00:10:02,020
and we need to make the
best risk based decisions

222
00:10:02,020 --> 00:10:03,540
in securing our digital estate

223
00:10:03,540 --> 00:10:06,930
so we wanted to cover
all of those scenarios.

224
00:10:06,930 --> 00:10:09,640
Now, for the good part, the demo.

225
00:10:09,640 --> 00:10:12,220
The demonstration here
starts with reconnaissance

226
00:10:12,220 --> 00:10:14,200
of course, in the environment

227
00:10:14,200 --> 00:10:16,410
and the environment that
we find ourselves in.

228
00:10:16,410 --> 00:10:19,170
The goal here is to
identify the ADFS server

229
00:10:19,170 --> 00:10:21,120
and perform two checks against it.

230
00:10:21,120 --> 00:10:23,420
Who are its local administrators?

231
00:10:23,420 --> 00:10:26,632
And what identity is the idea
of first process running at.

232
00:10:28,290 --> 00:10:30,219
So let's have a look at how this works.

233
00:10:30,220 --> 00:10:31,940
We're starting on Kelly.

234
00:10:31,940 --> 00:10:35,760
We already pay into our
compromised supply chain server

235
00:10:35,760 --> 00:10:39,060
running in context of the service account.

236
00:10:39,060 --> 00:10:42,069
Again, we could have used
any other assumption here.

237
00:10:42,070 --> 00:10:45,450
What we're focused on is
the post exploit tactics,

238
00:10:45,450 --> 00:10:47,880
techniques, and procedures.

239
00:10:47,880 --> 00:10:50,880
Once seen, we do recon in the environment

240
00:10:50,880 --> 00:10:51,713
we find ourselves in.

241
00:10:51,713 --> 00:10:53,300
We identified the ADFS server

242
00:10:53,300 --> 00:10:55,959
and perform those two checks against that.

243
00:10:55,960 --> 00:10:58,090
Who's its local administrators.

244
00:10:58,090 --> 00:11:02,360
We do this via PowerSploit
leveraging the SAMR protocol.

245
00:11:02,360 --> 00:11:05,900
What identity is the ADFS process running

246
00:11:05,900 --> 00:11:08,340
as we do this again by a PowerSploit.

247
00:11:08,340 --> 00:11:10,110
Knowing who is an admin on the machine

248
00:11:10,110 --> 00:11:12,930
tells us which credential
we need to harvest.

249
00:11:12,930 --> 00:11:15,260
So we can laterally move to the machine.

250
00:11:15,260 --> 00:11:18,660
And since our supply chain
service account is a local admin,

251
00:11:18,660 --> 00:11:21,699
we know we can get access
to the ADFS account.

252
00:11:21,700 --> 00:11:24,480
Had our service account
not had been an admin

253
00:11:24,480 --> 00:11:26,650
on an ADFS or Active Directory,

254
00:11:26,650 --> 00:11:28,949
we could have done additional
recon to figure out

255
00:11:28,950 --> 00:11:31,120
where those admin accounts were exposed to

256
00:11:31,120 --> 00:11:33,720
via SMB session enumeration.

257
00:11:33,720 --> 00:11:36,860
But that is outside the
context of this demo

258
00:11:36,860 --> 00:11:38,710
but going forward, we're
gonna make the assumption

259
00:11:38,710 --> 00:11:41,100
that we already have admin access to ADFS

260
00:11:41,100 --> 00:11:43,090
and an ID for time.

261
00:11:43,090 --> 00:11:45,640
By also knowing the
owner of the ADFS process

262
00:11:45,640 --> 00:11:47,610
running on the ADFS server,

263
00:11:47,610 --> 00:11:49,720
we also know which credential we need

264
00:11:49,720 --> 00:11:52,770
so we can later use it to
harvest the Golden SAML

265
00:11:52,770 --> 00:11:53,949
or the private certificate,

266
00:11:53,950 --> 00:11:56,240
which is critical in
that trust relationship

267
00:11:56,240 --> 00:11:58,773
between On-premises and the cloud.

268
00:11:59,630 --> 00:12:02,230
Now that we have both these answers,

269
00:12:02,230 --> 00:12:05,500
we can start taking prescriptive action.

270
00:12:05,500 --> 00:12:08,510
Now let's look at extracting
user password data.

271
00:12:08,510 --> 00:12:10,250
This is pretty straightforward.

272
00:12:10,250 --> 00:12:12,800
We'll use an all-time favorite Mimikatz.

273
00:12:12,800 --> 00:12:14,829
Mimikatz provides a variety of ways

274
00:12:14,830 --> 00:12:17,090
to extract then manipulate credentials

275
00:12:17,090 --> 00:12:18,540
but probably one of the most useful

276
00:12:18,540 --> 00:12:22,199
and scary ways is using
the DCSync command.

277
00:12:22,200 --> 00:12:25,210
This attack simulates the
behavior of a domain controller

278
00:12:25,210 --> 00:12:27,140
and use other domain controllers

279
00:12:27,140 --> 00:12:28,689
to replicate information

280
00:12:28,690 --> 00:12:31,160
using the directory replication servers,

281
00:12:31,160 --> 00:12:34,660
remote protocol, MS-DRSR.

282
00:12:34,660 --> 00:12:37,020
Basically, unless you pretend
to be a domain controller

283
00:12:37,020 --> 00:12:39,770
and ask for user password data.

284
00:12:39,770 --> 00:12:41,829
Most importantly this can be done

285
00:12:41,830 --> 00:12:44,620
without running any code
on a domain controller,

286
00:12:44,620 --> 00:12:46,290
as opposed to other ways Mimikatz

287
00:12:46,290 --> 00:12:48,510
will extract password data.

288
00:12:48,510 --> 00:12:51,650
So let's take a look about how this works.

289
00:12:51,650 --> 00:12:56,060
Here, we perform the attack
called DCSync, using Mimikatz.

290
00:12:56,060 --> 00:12:58,089
This allows us to use our privileges,

291
00:12:58,090 --> 00:12:59,560
thanks to our service account,

292
00:12:59,560 --> 00:13:02,630
but against active directory
where we have active directory

293
00:13:02,630 --> 00:13:07,600
give us the NTLM hash of the
ADFS process owners account.

294
00:13:07,600 --> 00:13:09,140
Again, we need this later

295
00:13:09,140 --> 00:13:13,110
when we want to harvest the
Golden SAML private certificate.

296
00:13:13,110 --> 00:13:15,720
Now that we've finished recon
and we have the accounts,

297
00:13:15,720 --> 00:13:19,710
we laterally move expanding our campaign.

298
00:13:19,710 --> 00:13:22,743
The next step is to
laterally move to ADFS,

299
00:13:23,640 --> 00:13:25,610
pretty straightforward here again.

300
00:13:25,610 --> 00:13:28,010
Here, we laterally move to ADFS.

301
00:13:28,010 --> 00:13:29,910
Remember we don't know the password

302
00:13:29,910 --> 00:13:31,620
for the server's account we have,

303
00:13:31,620 --> 00:13:33,670
thanks to the compromised
supply chain attack.

304
00:13:33,670 --> 00:13:35,760
And if we already paid, we will need that.

305
00:13:35,760 --> 00:13:38,260
However, thanks to Microsoft's restricted

306
00:13:38,260 --> 00:13:39,740
admin mode for IDP

307
00:13:39,740 --> 00:13:42,350
which was meant to help
with credential hygiene.

308
00:13:42,350 --> 00:13:45,750
We don't need it to IDP, to ADFS.

309
00:13:45,750 --> 00:13:47,820
Once we were on the area for server,

310
00:13:47,820 --> 00:13:48,840
we wanna become the identity

311
00:13:48,840 --> 00:13:51,730
of the area first process itself.

312
00:13:51,730 --> 00:13:55,080
This is a requirement to
harvest the Golden SAML.

313
00:13:55,080 --> 00:13:59,760
And using the NTLM hash from
our DC sync attack earlier

314
00:13:59,760 --> 00:14:02,930
we use it to perform
a pass the hash attack

315
00:14:02,930 --> 00:14:05,790
to become that identity.

316
00:14:05,790 --> 00:14:09,620
Next it's time to harvest the certificate.

317
00:14:09,620 --> 00:14:13,950
Acting as the identity who
owns the ADFS process itself

318
00:14:13,950 --> 00:14:16,480
it's now time to harvest the certificate.

319
00:14:16,480 --> 00:14:20,080
Here, we use an open-source
tool called ADFSDump

320
00:14:20,080 --> 00:14:22,150
which gives us any code of certificate,

321
00:14:22,150 --> 00:14:24,500
a private key, and some other metadata

322
00:14:24,500 --> 00:14:28,070
to see where this certificate
is used to establish trust.

323
00:14:28,070 --> 00:14:30,660
As you can see, this dump certificate

324
00:14:30,660 --> 00:14:31,920
is used against Microsoft

325
00:14:31,920 --> 00:14:35,375
which is used for both
Office 365 and Azure

326
00:14:35,375 --> 00:14:38,580
and any other Microsoft 365 servers,

327
00:14:38,580 --> 00:14:41,580
including Microsoft
Defender Security Center.

328
00:14:41,580 --> 00:14:45,960
We now have the Golden SAML
and can impersonate ADFS.

329
00:14:45,960 --> 00:14:48,190
And the next step is to
decode the Golden SAML

330
00:14:48,190 --> 00:14:50,273
so we can weaponize and use it.

331
00:14:51,160 --> 00:14:54,130
We copy those harvested certificates

332
00:14:54,130 --> 00:14:57,250
and private key to our Kali Linux machine.

333
00:14:57,250 --> 00:14:59,370
Next, we need to decode the Golden SAML

334
00:14:59,370 --> 00:15:01,670
so we can weaponize and use it.

335
00:15:01,670 --> 00:15:04,339
We Base64 Decode the certificate

336
00:15:04,340 --> 00:15:06,210
and clean up the private key

337
00:15:06,210 --> 00:15:08,480
and we can then use
another open-source tool

338
00:15:08,480 --> 00:15:12,570
called ADFSpoof to now
leverage the certificate

339
00:15:12,570 --> 00:15:17,160
and the private key to forge a
SAML object against any user.

340
00:15:17,160 --> 00:15:20,520
In this case here, we
are targeting a Marlow

341
00:15:20,520 --> 00:15:24,270
since we know she's a
global admin in Azure,

342
00:15:24,270 --> 00:15:28,350
although she's a non-privileged
user On-premises.

343
00:15:28,350 --> 00:15:31,340
Now what's interesting
here is by using ADFSpoof,

344
00:15:31,340 --> 00:15:35,650
we are given a SAML object
and we now need to inject it

345
00:15:35,650 --> 00:15:38,730
into HTTP session to use it

346
00:15:38,730 --> 00:15:41,450
which is where Burp Suite comes in.

347
00:15:41,450 --> 00:15:43,730
I'm sure many of you have
read about Bird Speed,

348
00:15:43,730 --> 00:15:44,610
no Bird Suite.

349
00:15:44,610 --> 00:15:47,950
We inject the SAML object
into the W-result parameter

350
00:15:47,950 --> 00:15:50,670
and send our requests to the resource,

351
00:15:50,670 --> 00:15:52,439
which trusts our certificate,

352
00:15:52,440 --> 00:15:55,520
in this case, Microsoft's Azure ID.

353
00:15:55,520 --> 00:15:58,220
We can open up the browser
now in private mode

354
00:15:58,220 --> 00:16:00,460
to prove there is no existing cookie

355
00:16:00,460 --> 00:16:03,600
and we are now our Marlow in the browser.

356
00:16:03,600 --> 00:16:07,461
So the next stage is to
access files in Office 365

357
00:16:07,461 --> 00:16:08,580
and we will show how an attack

358
00:16:08,580 --> 00:16:11,330
would have bypass
Multi-factor authentication.

359
00:16:11,330 --> 00:16:13,660
First we can access any file

360
00:16:13,660 --> 00:16:16,209
of the targeted user in Office 365.

361
00:16:16,210 --> 00:16:19,850
Again, had this required
Multi-factor authentication,

362
00:16:19,850 --> 00:16:22,340
our attack here would have bypass this.

363
00:16:22,340 --> 00:16:24,970
After we had done with Office 365 recon,

364
00:16:24,970 --> 00:16:26,810
we can use the privileges in Azure

365
00:16:27,820 --> 00:16:30,850
but luckily for us, our
Marlow the targeted user

366
00:16:30,850 --> 00:16:33,350
is a global admin in Azure

367
00:16:33,350 --> 00:16:35,780
and it basically shows us here

368
00:16:35,780 --> 00:16:38,730
that this is useful against any user.

369
00:16:38,730 --> 00:16:40,560
We don't just need a global admin,

370
00:16:40,560 --> 00:16:42,770
it could have been any
user with privileges

371
00:16:42,770 --> 00:16:44,600
against resources in Azure,

372
00:16:44,600 --> 00:16:46,840
such as someone who has a contributor role

373
00:16:46,840 --> 00:16:47,960
on a critical asset

374
00:16:47,960 --> 00:16:50,110
or someone who has contributed privileges

375
00:16:50,110 --> 00:16:53,190
on a resource group or managed group.

376
00:16:53,190 --> 00:16:56,360
Now, since Marlow has contributed access

377
00:16:56,360 --> 00:16:59,500
on an infrastructure as a
service domain controller,

378
00:16:59,500 --> 00:17:03,140
we can use that to compromise
On-premises from the cloud.

379
00:17:03,140 --> 00:17:06,569
Remember the target user
is not a domain admin

380
00:17:06,569 --> 00:17:08,540
nor has any privileges On-premises

381
00:17:08,540 --> 00:17:12,280
but thanks to her privileges
in the cloud, she can.

382
00:17:12,280 --> 00:17:15,639
This opens up interesting
questions about insider threat

383
00:17:15,640 --> 00:17:17,490
as well as circular control

384
00:17:17,490 --> 00:17:20,060
an adversary can achieve
on the environment.

385
00:17:20,060 --> 00:17:22,710
That's something that we've
seen time and time again.

386
00:17:23,589 --> 00:17:26,740
We can then use Azure as
custom stripped extension

387
00:17:26,740 --> 00:17:28,808
to run arbitrary commands.

388
00:17:28,808 --> 00:17:31,970
I don't N A S machine

389
00:17:31,970 --> 00:17:34,660
In this case, that is a domain controller.

390
00:17:34,660 --> 00:17:37,940
We already uploaded the
file without two commands

391
00:17:37,940 --> 00:17:39,500
which we'll show shortly,

392
00:17:39,500 --> 00:17:43,210
but ultimately it adds
a new user to the DC

393
00:17:43,210 --> 00:17:44,430
and then adds that user

394
00:17:44,430 --> 00:17:46,293
to the built-in administrative group.

395
00:17:47,400 --> 00:17:50,250
And we essentially created
a backdoor in the DC

396
00:17:50,250 --> 00:17:53,150
but instead of using malicious
code or say to beacon,

397
00:17:53,150 --> 00:17:55,290
we created a backdoor account.

398
00:17:55,290 --> 00:17:58,810
This is to show an
adversary can jump back down

399
00:17:58,810 --> 00:18:01,950
to On-premises if they work in the cloud.

400
00:18:01,950 --> 00:18:04,890
There are many attacks out
there allowing an adversary

401
00:18:04,890 --> 00:18:07,230
to run arbitrary code
On-premises from the cloud,

402
00:18:07,230 --> 00:18:10,930
including the ruler attack
which targets Office 365

403
00:18:10,930 --> 00:18:13,870
and can run arbitrary code
on any end-user device

404
00:18:13,870 --> 00:18:15,070
where they have outlook.

405
00:18:15,930 --> 00:18:18,670
So I just wanted to touch
on evicting the adversary.

406
00:18:18,670 --> 00:18:20,960
The impacted user here isn't an admin

407
00:18:20,960 --> 00:18:22,030
on the domain controller,

408
00:18:22,030 --> 00:18:24,883
yet with Azure's contributor
privilege on the ISBN.

409
00:18:26,320 --> 00:18:30,020
The user can reset the admin
account anytime they want,

410
00:18:30,020 --> 00:18:33,170
meaning that can be domain admin any time.

411
00:18:33,170 --> 00:18:35,000
Hopefully you caught that in the demo.

412
00:18:35,000 --> 00:18:38,290
In other words, this user
could have circular control

413
00:18:38,290 --> 00:18:41,980
of the environment, the
cloud, and the On-premises.

414
00:18:41,980 --> 00:18:44,160
From an insider threat perspective,

415
00:18:44,160 --> 00:18:45,570
this is something to be aware of.

416
00:18:45,570 --> 00:18:48,379
We can no longer look at
our identities and states

417
00:18:48,380 --> 00:18:49,650
if they are privileged or not

418
00:18:49,650 --> 00:18:52,140
without looking at the
much larger picture.

419
00:18:52,140 --> 00:18:54,530
We can't just remove
a backdoor On-premises

420
00:18:54,530 --> 00:18:57,100
without first looking at
if there is any privileges

421
00:18:57,100 --> 00:18:59,540
that they also have in the cloud as well.

422
00:18:59,540 --> 00:19:02,230
And we can no longer
argue that zero trust only

423
00:19:02,230 --> 00:19:05,640
applies to the cloud or
modern authentication.

424
00:19:05,640 --> 00:19:08,490
Due to the trust relationship
of the On-premises

425
00:19:08,490 --> 00:19:11,240
and the cloud, we must
have visibility, control,

426
00:19:11,240 --> 00:19:13,280
and signals across the board

427
00:19:13,280 --> 00:19:15,280
so we can make the best decision to allow

428
00:19:15,280 --> 00:19:17,340
or deny certain activity.

429
00:19:17,340 --> 00:19:18,220
I'm nearly out of time.

430
00:19:18,220 --> 00:19:21,230
It would be remiss of me to not
finish with countermeasures.

431
00:19:21,230 --> 00:19:22,520
And I wanted to share for

432
00:19:22,520 --> 00:19:24,320
with everybody in the session today.

433
00:19:25,570 --> 00:19:28,950
Now, firstly, strategically,
we need to remind ourselves

434
00:19:28,950 --> 00:19:31,370
that any security debt
we have On-premises,

435
00:19:31,370 --> 00:19:33,669
we bring it with us on our cloud

436
00:19:33,670 --> 00:19:36,120
and digital transformation journeys.

437
00:19:36,120 --> 00:19:40,199
We must apply zero trust
principles to On-premises

438
00:19:40,200 --> 00:19:41,690
and we need visibility

439
00:19:41,690 --> 00:19:45,040
of all of our On-premises
identity and devices.

440
00:19:45,040 --> 00:19:48,409
SUNBURST made that painfully
obvious when you read up

441
00:19:48,410 --> 00:19:51,660
and you look at the examples
that we've talked about today.

442
00:19:51,660 --> 00:19:54,670
Hopping on On-premises identity,

443
00:19:54,670 --> 00:19:57,350
still too often organizations do not have

444
00:19:57,350 --> 00:20:00,219
the right visibility even
if they are using things

445
00:20:00,220 --> 00:20:01,903
like smart card or MFA.

446
00:20:02,780 --> 00:20:07,240
Service accounts, unfortunately
are still acting as humans,

447
00:20:07,240 --> 00:20:09,600
hands on the keyboard effectively.

448
00:20:09,600 --> 00:20:12,449
Service accounts should
never be able to hardly pay

449
00:20:12,450 --> 00:20:15,360
or actually moved to a DC wading offense.

450
00:20:15,360 --> 00:20:17,860
If we never seen that before.

451
00:20:17,860 --> 00:20:20,110
Now, the majority of our authentications

452
00:20:20,110 --> 00:20:22,990
are outside the scope of smart card,

453
00:20:22,990 --> 00:20:25,320
specifically help desk MIT admins

454
00:20:25,320 --> 00:20:27,780
who are using non-interactive log-ins

455
00:20:27,780 --> 00:20:30,210
with things like remote PowerShell,

456
00:20:30,210 --> 00:20:33,550
we shouldn't just not
apply a smart card or MFA

457
00:20:33,550 --> 00:20:34,770
to those log-ins.

458
00:20:34,770 --> 00:20:37,379
We should still have
Multi-factor authentication

459
00:20:37,380 --> 00:20:39,810
on those activities based
on a time constraint,

460
00:20:39,810 --> 00:20:41,600
as an example.

461
00:20:41,600 --> 00:20:45,370
For that reason, CrowdStrike
we acquired Preempt

462
00:20:45,370 --> 00:20:48,689
and it's now our Falcon
protection capability

463
00:20:48,690 --> 00:20:51,400
which gives us visibility
to both of these issues

464
00:20:51,400 --> 00:20:54,730
while extending MFA and identity providers

465
00:20:54,730 --> 00:20:56,620
to On-premises authentication flows

466
00:20:56,620 --> 00:21:00,239
without requiring modifying
any application On-premises.

467
00:21:00,240 --> 00:21:01,083
Super important.

468
00:21:01,990 --> 00:21:04,040
Third bit of advice, with
the trust relationships

469
00:21:04,040 --> 00:21:06,930
between On-premises and the cloud

470
00:21:06,930 --> 00:21:10,090
that they're now much more
obvious, thanks to SUNBURST.

471
00:21:10,090 --> 00:21:12,830
We need to ensure our
zero trust strategies

472
00:21:12,830 --> 00:21:15,060
include On-premises.

473
00:21:15,060 --> 00:21:18,159
If an identity is compromised On-premises,

474
00:21:18,160 --> 00:21:20,820
it should change our decision in the cloud

475
00:21:20,820 --> 00:21:24,643
to allow or deny it accessing a resource.

476
00:21:25,760 --> 00:21:28,390
And finally, the circular level of control

477
00:21:28,390 --> 00:21:30,980
requires us to have exhausted visibility

478
00:21:30,980 --> 00:21:33,460
of our environment of environments.

479
00:21:33,460 --> 00:21:37,030
Just because a user does not
have privileges On-premises,

480
00:21:37,030 --> 00:21:38,930
doesn't mean they don't have a path

481
00:21:38,930 --> 00:21:40,520
to get privileges On-premises,

482
00:21:40,520 --> 00:21:44,160
thanks to potential privileges
they have in the cloud.

483
00:21:44,160 --> 00:21:46,400
The same can be said about Office 365

484
00:21:46,400 --> 00:21:49,324
where administrators can
potentially run arbitrary code

485
00:21:49,324 --> 00:21:52,370
in a users outlook application.

486
00:21:52,370 --> 00:21:54,780
There are multiple ways
an adversary can jump

487
00:21:54,780 --> 00:21:57,740
from On-premises to the
cloud and vice versa.

488
00:21:57,740 --> 00:21:59,700
And when responding to
incidents and measuring

489
00:21:59,700 --> 00:22:01,770
our risks and readiness,

490
00:22:01,770 --> 00:22:03,530
we need to be mindful of all of this

491
00:22:03,530 --> 00:22:06,330
so we can operate confidently.

492
00:22:06,330 --> 00:22:07,750
So I'm out of time.

493
00:22:07,750 --> 00:22:09,050
Well out of time.

494
00:22:09,050 --> 00:22:11,100
Again, George sends his apologies

495
00:22:11,100 --> 00:22:14,530
and we both hope this gives
an insight into the issue.

496
00:22:14,530 --> 00:22:16,560
Reach out to us at CrowdStrike

497
00:22:16,560 --> 00:22:17,393
if you've got any questions.

498
00:22:17,393 --> 00:22:18,917
Reach out to me directly,

499
00:22:18,917 --> 00:22:21,370
hit me up on LinkedIn or Twitter.

500
00:22:21,370 --> 00:22:23,639
Thanks so much for joining this session

501
00:22:23,640 --> 00:22:25,963
and enjoy the rest of the conference.

502
00:22:27,837 --> 00:22:30,420
(upbeat music)

