1
00:00:01,390 --> 00:00:02,239
- Hi everyone.

2
00:00:02,240 --> 00:00:05,280
This is Mike Raggo with Silent Signals,

3
00:00:05,280 --> 00:00:07,400
joined by my good friend Chet Hosmer,

4
00:00:07,400 --> 00:00:10,070
a professor with the
University of Arizona.

5
00:00:10,070 --> 00:00:11,930
We appreciate you
attending our session today

6
00:00:11,930 --> 00:00:15,890
titled, "Uncovering Covert
Channels in Your IoT Networks."

7
00:00:15,890 --> 00:00:18,640
This presentation is a
mashup of variety of research

8
00:00:18,640 --> 00:00:20,100
we've done over the years

9
00:00:20,100 --> 00:00:22,430
including a presentation we did previously

10
00:00:22,430 --> 00:00:25,250
for the RSA conference in 2018.

11
00:00:25,250 --> 00:00:27,360
In terms of the overall research,

12
00:00:27,360 --> 00:00:30,990
we've looked at a lot of
challenges across IoT,

13
00:00:30,990 --> 00:00:35,019
industrial IoT, ICS and
OT networks and devices.

14
00:00:35,019 --> 00:00:40,019
And if we take note of current
day challenges, threats

15
00:00:40,290 --> 00:00:42,140
and even breaches that have occurred,

16
00:00:43,050 --> 00:00:45,830
the systemic thread that
we see across all of this

17
00:00:45,830 --> 00:00:48,379
is that there's really poor visibility

18
00:00:48,380 --> 00:00:50,960
and a flawed a supply chain.

19
00:00:50,960 --> 00:00:52,380
And what we mean by that is,

20
00:00:52,380 --> 00:00:55,780
if we take note of, say
for example, Hosmer,

21
00:00:55,780 --> 00:00:57,840
So recently there was a hack

22
00:00:57,840 --> 00:01:00,690
at a Florida city water supply company,

23
00:01:00,690 --> 00:01:04,720
and this involved the fact
that in this OT environment,

24
00:01:04,720 --> 00:01:07,450
we're a lack of security
controls that allowed

25
00:01:07,450 --> 00:01:11,070
through Team Viewer, a
breach of a Windows 7 laptop

26
00:01:11,070 --> 00:01:13,899
which then allowed access potentially

27
00:01:13,900 --> 00:01:15,943
to the water supply environment.

28
00:01:16,990 --> 00:01:19,390
In looking at this, some of the challenges

29
00:01:19,390 --> 00:01:21,000
that we see are that,

30
00:01:21,000 --> 00:01:25,250
across OT environments
and even ICS environments,

31
00:01:25,250 --> 00:01:28,230
when we talk about, for
example, municipalities,

32
00:01:28,230 --> 00:01:31,820
we find that a lot of these
environments are underfunded,

33
00:01:31,820 --> 00:01:35,729
lack of security controls,
and really just a lack

34
00:01:35,730 --> 00:01:40,100
of money overall, to really
provide the security in place

35
00:01:40,100 --> 00:01:42,080
to really identify a lot of these risks

36
00:01:42,080 --> 00:01:43,480
and threats when they occur.

37
00:01:44,480 --> 00:01:46,950
Fortunately, in this
case, it just so happened.

38
00:01:46,950 --> 00:01:48,550
Someone was at the facility

39
00:01:48,550 --> 00:01:51,530
and started to see the
eminent threat by the mouse

40
00:01:51,530 --> 00:01:53,510
moving around on the actual computer

41
00:01:53,510 --> 00:01:55,936
as the threat was starting to occur.

42
00:01:55,936 --> 00:01:58,830
But in general, that was pure luck.

43
00:01:58,830 --> 00:02:02,240
And what we've seen with
SolarWinds, SUNBURST

44
00:02:02,240 --> 00:02:05,420
and many of these others is the fact that,

45
00:02:05,420 --> 00:02:07,620
a lot of these breaches
can be quite rampant.

46
00:02:07,620 --> 00:02:09,913
So when we look more broadly at SolarWinds

47
00:02:09,913 --> 00:02:12,360
and we see the thousands of organizations

48
00:02:12,360 --> 00:02:14,698
that have been impacted by this.

49
00:02:14,698 --> 00:02:18,920
There's not only the
threat of a supply chain

50
00:02:18,920 --> 00:02:22,170
which allowed a Trojan to be deployed

51
00:02:22,170 --> 00:02:24,500
across many of these environments.

52
00:02:24,500 --> 00:02:27,430
But when you think of
the aftermath of that,

53
00:02:27,430 --> 00:02:30,690
and whether that be remote
command and control,

54
00:02:30,690 --> 00:02:33,057
when you think about ex filtration of data

55
00:02:33,057 --> 00:02:34,619
and many of these other things,

56
00:02:34,620 --> 00:02:37,120
there are a lot of covert
channels that are going on

57
00:02:37,120 --> 00:02:38,674
across many of these breaches

58
00:02:38,674 --> 00:02:41,550
that most organizations are blind to.

59
00:02:41,550 --> 00:02:44,603
And these two examples are
prime examples of that.

60
00:02:48,010 --> 00:02:52,209
So, what we have found
doing a lot of research

61
00:02:52,210 --> 00:02:56,332
over the last number of years
across IOT, industrial IOT

62
00:02:56,332 --> 00:02:58,945
ICS and OT in general is that,

63
00:02:58,945 --> 00:03:02,549
there is a supply chain
challenge and problem,

64
00:03:02,550 --> 00:03:05,090
there's so many different
operating systems,

65
00:03:05,090 --> 00:03:08,560
communication protocols,
wireless and wired.

66
00:03:08,560 --> 00:03:12,140
And as a result, it's really
kind of The Wild West.

67
00:03:12,140 --> 00:03:15,010
And although that
standards exist out there,

68
00:03:15,010 --> 00:03:16,730
they're not frequently adopted.

69
00:03:16,730 --> 00:03:18,859
And furthermore, the environment, in terms

70
00:03:18,860 --> 00:03:21,040
of those standards is also very fragmented

71
00:03:21,040 --> 00:03:24,470
as many standards kind of
conflict with one another.

72
00:03:24,470 --> 00:03:27,800
When we take a deeper look
at a lot of these threats,

73
00:03:27,800 --> 00:03:31,760
it's certainly far different
than it was 20 or 30 years ago.

74
00:03:31,760 --> 00:03:34,200
And now with a plethora
of operating systems,

75
00:03:34,200 --> 00:03:36,450
let's say, for example Nucleus,

76
00:03:36,450 --> 00:03:38,970
Nucleus is this foreign
operating system that

77
00:03:38,970 --> 00:03:41,120
a lot of people just don't
really know much about

78
00:03:41,120 --> 00:03:43,140
or even heard of before.

79
00:03:43,140 --> 00:03:46,809
When we work with organizations
and identify risks going on

80
00:03:46,810 --> 00:03:50,000
in their environment when
we're doing investigations,

81
00:03:50,000 --> 00:03:53,240
these types of operating
systems, although Nucleus exists

82
00:03:53,240 --> 00:03:56,060
on over a billion
devices around the world.

83
00:03:56,060 --> 00:03:58,580
It can be found in
anything from a smartwatch

84
00:03:58,580 --> 00:04:02,080
to an industrial control
system type device.

85
00:04:02,080 --> 00:04:05,920
Nucleus itself, in our
research, we discovered that

86
00:04:05,920 --> 00:04:08,329
there were a lot of
covert channels going on.

87
00:04:08,330 --> 00:04:10,480
So research that we did
a number of years back

88
00:04:10,480 --> 00:04:12,483
on just a symbol smartwatch,

89
00:04:12,484 --> 00:04:16,240
determined that that smartwatch
communicating to an app

90
00:04:16,240 --> 00:04:20,160
on a mobile device allowed
covert channels back to China.

91
00:04:20,160 --> 00:04:22,723
And as a result, we
disclosed that research.

92
00:04:23,560 --> 00:04:25,950
In addition, when we look at
many of the other protocols

93
00:04:25,950 --> 00:04:28,849
in the environment, whether
it be wireless or wired,

94
00:04:28,849 --> 00:04:33,070
we now have progressed beyond
just Bluetooth and WiFi

95
00:04:33,070 --> 00:04:36,340
and now we've got Z-Wave, Sigfox, LoRaWAN,

96
00:04:36,340 --> 00:04:39,349
and many other protocols out there too.

97
00:04:39,350 --> 00:04:41,770
And so it becomes more
and more challenging

98
00:04:41,770 --> 00:04:43,697
for organizations to determine,

99
00:04:43,697 --> 00:04:45,580
"How do I protect all of this?

100
00:04:45,580 --> 00:04:48,890
Did I even know that some
of these operating systems

101
00:04:48,890 --> 00:04:52,510
or communication protocols even
existed in my environment?"

102
00:04:52,510 --> 00:04:54,210
we've never even used them.

103
00:04:54,210 --> 00:04:55,169
And upon assessments

104
00:04:55,170 --> 00:04:57,313
we frequently come across many of these.

105
00:05:01,340 --> 00:05:04,229
It does require a fundamental step back.

106
00:05:04,230 --> 00:05:09,140
And when we take a look
at this fundamental CIA

107
00:05:09,140 --> 00:05:12,030
confidentiality, integrity,
and availability.

108
00:05:12,030 --> 00:05:14,359
If we break these down in incorporate,

109
00:05:14,360 --> 00:05:19,185
our learnings across all of
these different IOT and OT

110
00:05:19,185 --> 00:05:21,150
and ICS environments,

111
00:05:21,150 --> 00:05:25,179
is that beyond how we
look at, how we protect

112
00:05:25,180 --> 00:05:27,850
Data-at-Rest or Data-in-Motion,

113
00:05:27,850 --> 00:05:29,410
we're now taking a deeper look

114
00:05:29,410 --> 00:05:32,910
as an industry at what's actually in use

115
00:05:32,910 --> 00:05:36,520
or furthermore, what is
the relationship between

116
00:05:36,520 --> 00:05:38,120
all of these devices?

117
00:05:38,120 --> 00:05:40,240
We've progressed obviously quite a bit

118
00:05:40,240 --> 00:05:43,730
from the traditional
client server approaches

119
00:05:43,730 --> 00:05:45,030
of many years back

120
00:05:45,030 --> 00:05:48,520
and now with the inflection point

121
00:05:48,520 --> 00:05:51,340
including the cloud and mobile devices

122
00:05:51,340 --> 00:05:53,770
and apps and hubs that run many

123
00:05:53,770 --> 00:05:56,407
of these IOT or Industrial IOT devices.

124
00:05:56,407 --> 00:05:58,673
Managing and securing all of this

125
00:05:58,673 --> 00:06:01,440
is becoming increasingly complex.

126
00:06:01,440 --> 00:06:04,219
So when we take a look at
confidentiality for example,

127
00:06:04,220 --> 00:06:08,730
many times we find somewhere
in that communication chain

128
00:06:08,730 --> 00:06:11,090
things may not necessarily be encrypted

129
00:06:11,090 --> 00:06:13,169
and are being communicated, clear text.

130
00:06:13,169 --> 00:06:15,680
Even the data at rest on the majority

131
00:06:15,680 --> 00:06:17,700
of the devices that
we've reverse engineered

132
00:06:17,700 --> 00:06:19,860
and done testing on, include no form

133
00:06:19,860 --> 00:06:22,890
of encryption or key
management altogether.

134
00:06:22,890 --> 00:06:25,940
And that kind of transcends
over into integrity too

135
00:06:25,940 --> 00:06:29,350
in the form of thinking
about when these devices

136
00:06:29,350 --> 00:06:32,830
communicate, what type
of hashing and validation

137
00:06:32,830 --> 00:06:35,300
and integrity checking is
actually being performed

138
00:06:35,300 --> 00:06:36,920
between these devices.

139
00:06:36,920 --> 00:06:38,730
Whether it's machine to machine,

140
00:06:38,730 --> 00:06:40,920
whether it's being
communicated to the cloud,

141
00:06:40,920 --> 00:06:43,060
whether it's being communicated to a hub

142
00:06:43,060 --> 00:06:44,803
or some other form of network.

143
00:06:46,170 --> 00:06:49,340
And then thirdly, availability,

144
00:06:49,340 --> 00:06:52,359
and most importantly security updates.

145
00:06:52,360 --> 00:06:55,750
So availability can
certainly include aspects

146
00:06:55,750 --> 00:06:58,520
of health checks, redundancy,

147
00:06:58,520 --> 00:07:00,500
but one of the key things that we found

148
00:07:00,500 --> 00:07:03,040
in a lot of the research we've
done on a lot of the devices

149
00:07:03,040 --> 00:07:05,450
in networks and hubs that
we've reverse engineered

150
00:07:05,450 --> 00:07:08,860
is that there is a big
lack of security updates,

151
00:07:08,860 --> 00:07:10,290
either they're not really provided

152
00:07:10,290 --> 00:07:12,410
by the vendor that sold the device

153
00:07:12,410 --> 00:07:15,150
or furthermore lack of
automation to update

154
00:07:15,150 --> 00:07:17,496
that within the device itself

155
00:07:17,497 --> 00:07:20,070
either automatically or programmatically

156
00:07:20,070 --> 00:07:22,250
if the user wants to go
into the web interface

157
00:07:22,250 --> 00:07:24,430
or something else and
perform those updates.

158
00:07:24,430 --> 00:07:27,040
So a lot of these devices
sit out there forever,

159
00:07:27,040 --> 00:07:28,503
never being patched.

160
00:07:33,020 --> 00:07:35,770
So, we've done a lot of
research across wired

161
00:07:35,770 --> 00:07:37,710
and wireless communications.

162
00:07:37,710 --> 00:07:41,549
And furthermore, when we think
about some of the protocols

163
00:07:41,550 --> 00:07:43,460
we're gonna talk about next,

164
00:07:43,460 --> 00:07:46,570
there's a lot of protocols from way back

165
00:07:46,570 --> 00:07:49,520
that still in today's environments.

166
00:07:49,520 --> 00:07:53,070
They may range from new
implementations of MODBUS,

167
00:07:53,070 --> 00:07:54,647
to things like RTSP

168
00:07:56,394 --> 00:07:58,240
and many of the other protocols out there.

169
00:07:58,240 --> 00:08:01,960
And then of course today, with
the explosion of IOT devices

170
00:08:01,960 --> 00:08:04,880
and new forms of wireless
communications across ZigBee

171
00:08:04,880 --> 00:08:09,219
Z-Wave, LoRaWAN and others,
there's a lot that each

172
00:08:09,220 --> 00:08:11,940
and every organization
needs to consider in terms

173
00:08:11,940 --> 00:08:14,700
of how they look at this and
all the different methods

174
00:08:14,700 --> 00:08:16,712
for these code of communications.

175
00:08:20,350 --> 00:08:24,080
So one really good
example is some protocols

176
00:08:24,080 --> 00:08:27,943
that we kind of peeled back
and took a closer look at.

177
00:08:28,900 --> 00:08:33,398
One of those is Simple Service
Discovery Protocol or SSDP.

178
00:08:33,398 --> 00:08:38,398
And this UPMP type of
communication allows devices

179
00:08:39,070 --> 00:08:42,150
within IOT to communicate
with one another.

180
00:08:42,150 --> 00:08:45,750
And there are different
subsets of different commands

181
00:08:45,750 --> 00:08:48,668
and different communications
that are performed.

182
00:08:48,668 --> 00:08:51,830
Some of the things that
we took a closer look at

183
00:08:51,830 --> 00:08:54,930
are things like M-Search or NOTIFY,

184
00:08:54,930 --> 00:08:56,719
in the case of M-Search

185
00:08:56,720 --> 00:08:59,140
where you put a device on a network,

186
00:08:59,140 --> 00:09:02,074
it's going to send out
automatically discovery packets

187
00:09:02,074 --> 00:09:05,189
on the network to try to
discover other devices

188
00:09:05,190 --> 00:09:07,820
that may want to communicate with.

189
00:09:07,820 --> 00:09:09,700
And the same thing with NOTIFY

190
00:09:09,700 --> 00:09:11,750
where it not only announces itself

191
00:09:11,750 --> 00:09:14,650
on the network and on a regular basis,

192
00:09:14,650 --> 00:09:18,130
but also when it's removed
from the network too.

193
00:09:18,130 --> 00:09:19,710
And we'll talk more
about that in a moment.

194
00:09:19,710 --> 00:09:22,750
But we did a lot of analysis around this

195
00:09:22,750 --> 00:09:26,840
and sort of the lack of integrity
and even confidentiality

196
00:09:26,840 --> 00:09:29,273
around some of these
protocol implementations.

197
00:09:30,510 --> 00:09:34,109
Also with RTSP or Real
Time Streaming Protocol,

198
00:09:34,109 --> 00:09:37,180
RTSP has been around for many, many years.

199
00:09:37,180 --> 00:09:40,520
So when you think about
the physical security

200
00:09:40,520 --> 00:09:42,310
in your environment, in your building

201
00:09:42,310 --> 00:09:44,550
in your data center or other places

202
00:09:44,550 --> 00:09:47,870
these old-school video
cameras still exist today

203
00:09:47,870 --> 00:09:51,100
and are still being purchased
and deployed for that matter.

204
00:09:51,100 --> 00:09:53,920
But this old school protocol is used

205
00:09:53,920 --> 00:09:55,849
in conjunction with video streams

206
00:09:55,850 --> 00:09:58,630
and has a plethora of
vulnerabilities and risks associated

207
00:09:58,630 --> 00:10:01,493
with it that we'll show
examples of in just a moment.

208
00:10:03,020 --> 00:10:04,550
And then the other thing that we've really

209
00:10:04,550 --> 00:10:08,160
uncovered are those aspects
around cloud providers.

210
00:10:08,160 --> 00:10:10,300
So many of these devices as we know,

211
00:10:10,300 --> 00:10:12,040
communicate to the cloud,

212
00:10:12,040 --> 00:10:14,209
but how they communicate to the cloud

213
00:10:14,210 --> 00:10:16,097
is a by-product of the implementation.

214
00:10:16,097 --> 00:10:19,100
Is it the device that is
directly communicating

215
00:10:19,100 --> 00:10:20,240
with the cloud?

216
00:10:20,240 --> 00:10:22,290
Is that the hub that's
managing that device

217
00:10:22,290 --> 00:10:24,160
that's communicating to the cloud?

218
00:10:24,160 --> 00:10:26,839
Is it the app that you're
using to manage that device

219
00:10:26,840 --> 00:10:28,810
that's communicating to the cloud?

220
00:10:28,810 --> 00:10:31,469
These are all additional
layers that need to

221
00:10:31,470 --> 00:10:33,610
be considered when looking at many

222
00:10:33,610 --> 00:10:35,960
of the risks and
vulnerabilities that can occur

223
00:10:35,960 --> 00:10:38,420
from having these devices
in the environment.

224
00:10:38,420 --> 00:10:40,770
And what we're gonna
show next is the exposure

225
00:10:40,770 --> 00:10:43,800
around UIDs, MAC addresses

226
00:10:43,800 --> 00:10:45,760
and even passwords that have been exposed

227
00:10:45,760 --> 00:10:46,760
as a result of this.

228
00:10:49,617 --> 00:10:51,380
The first example here

229
00:10:51,380 --> 00:10:54,610
that we'll use is kind of
an old school video camera.

230
00:10:54,610 --> 00:10:57,180
And with these surveillance cameras,

231
00:10:57,180 --> 00:11:00,680
we mentioned RTSP, Real
Time Streaming Protocol.

232
00:11:00,680 --> 00:11:02,907
And again, although this
is an old school protocol,

233
00:11:02,908 --> 00:11:05,850
it's still exists in
many environments today.

234
00:11:05,850 --> 00:11:06,700
But what's interesting

235
00:11:06,700 --> 00:11:10,940
about it is these devices are
not normally managed by IT.

236
00:11:10,940 --> 00:11:13,960
They're normally managed by
the physical security team

237
00:11:13,960 --> 00:11:18,520
and while, although those
folks are probably very good

238
00:11:18,520 --> 00:11:20,710
at how they handle physical security,

239
00:11:20,710 --> 00:11:22,740
do they really understand
the network protocols

240
00:11:22,740 --> 00:11:26,510
behind them that may be
exposing some of this data?

241
00:11:26,510 --> 00:11:28,693
This is just one example of that.

242
00:11:28,693 --> 00:11:31,079
So in this particular environment,

243
00:11:31,080 --> 00:11:34,320
we ran analysis around
that, first and foremost,

244
00:11:34,320 --> 00:11:37,430
we found that all the
communications by default

245
00:11:37,430 --> 00:11:38,969
were clear-text.

246
00:11:38,970 --> 00:11:43,510
And in addition, as we look
deeper at a lot of these

247
00:11:43,510 --> 00:11:46,680
different devices, we
found that to be the norm.

248
00:11:46,680 --> 00:11:49,349
And while although some of
them provided the ability to

249
00:11:49,350 --> 00:11:53,053
enable SSL, fundamentally
was turned off by default.

250
00:11:53,950 --> 00:11:56,070
And so, just the
communications back and forth

251
00:11:56,070 --> 00:11:58,097
on the local network were all clear-text.

252
00:11:58,097 --> 00:12:00,000
But they also typically communicate

253
00:12:00,000 --> 00:12:02,420
with some kind of data storage device.

254
00:12:02,420 --> 00:12:04,880
And for that, now in today's world

255
00:12:04,880 --> 00:12:07,560
typically provide a web
interface where people can go in

256
00:12:07,560 --> 00:12:11,099
and view the video feeds
or show them, of course

257
00:12:11,100 --> 00:12:14,440
on a screen in the physical security room

258
00:12:14,440 --> 00:12:16,480
so people can monitor those video feeds.

259
00:12:16,480 --> 00:12:17,330
But what we found is

260
00:12:17,330 --> 00:12:20,590
that many times those
web interfaces also have

261
00:12:20,590 --> 00:12:22,660
no authentication.

262
00:12:22,660 --> 00:12:24,350
What we found very alarming,

263
00:12:24,350 --> 00:12:27,510
and this very much in the
context of this presentation,

264
00:12:27,510 --> 00:12:31,780
is that there's a huge lack
of not only confidentiality

265
00:12:31,780 --> 00:12:34,500
as we've mentioned, but also integrity.

266
00:12:34,500 --> 00:12:37,670
And because of that, a lot
of data can be inserted

267
00:12:37,670 --> 00:12:40,459
within these communications,
within these protocols

268
00:12:40,460 --> 00:12:44,943
and within the payload to
communicate nefarious things.

269
00:12:44,943 --> 00:12:48,270
For example, we've tested and demonstrated

270
00:12:48,270 --> 00:12:51,264
in the past where you can
basically expose these

271
00:12:51,264 --> 00:12:54,160
by leveraging those payloads

272
00:12:54,160 --> 00:12:56,650
in those communications to insert data

273
00:12:56,650 --> 00:12:58,780
into those fields that could be used

274
00:12:58,780 --> 00:13:02,240
for implementing CNC,
infecting the device,

275
00:13:02,240 --> 00:13:03,940
and furthermore, for exfiltration.

276
00:13:08,200 --> 00:13:09,560
This is another example,

277
00:13:09,560 --> 00:13:14,119
but more in line with what we
mentioned earlier around SSDP.

278
00:13:14,120 --> 00:13:16,070
So in this particular example,

279
00:13:16,070 --> 00:13:18,290
this is an actual spy camera,

280
00:13:18,290 --> 00:13:20,910
spy cameras as we know, are available

281
00:13:20,910 --> 00:13:23,079
in a variety of different forms.

282
00:13:23,080 --> 00:13:24,250
They may be in the form

283
00:13:24,250 --> 00:13:27,670
of a USB thumb drive with a hidden camera

284
00:13:27,670 --> 00:13:32,670
or a smoke detector or a clock,
and many, many other forms.

285
00:13:33,200 --> 00:13:36,179
Of course, it's meant to
be, you know, invisible

286
00:13:36,179 --> 00:13:38,040
to the naked eye, right?

287
00:13:38,040 --> 00:13:39,829
Such that even though it's clear

288
00:13:39,830 --> 00:13:41,130
and present in the environment,

289
00:13:41,130 --> 00:13:44,156
you don't know there's a
video camera built into it.

290
00:13:44,156 --> 00:13:46,250
What we found as we implemented these

291
00:13:46,250 --> 00:13:49,190
is that many times they can
be configured to communicate

292
00:13:49,190 --> 00:13:50,800
over your wireless network

293
00:13:50,800 --> 00:13:52,680
or to an app on your mobile device.

294
00:13:52,680 --> 00:13:55,771
Either over Bluetooth or sometimes WiFi.

295
00:13:55,772 --> 00:13:59,330
But as we started to
peel back the protocol

296
00:13:59,330 --> 00:14:01,440
and these communications
that we found a lot

297
00:14:01,440 --> 00:14:03,360
of alarming things.

298
00:14:03,360 --> 00:14:06,770
First and foremost, this spy
camera wasn't quite as covert

299
00:14:06,770 --> 00:14:08,040
as you might think.

300
00:14:08,040 --> 00:14:10,099
It may be to the individual

301
00:14:10,100 --> 00:14:12,300
that that person maybe spying on,

302
00:14:12,300 --> 00:14:16,569
but in terms of the person
performing the spite activity,

303
00:14:16,570 --> 00:14:19,310
that data may end up elsewhere.

304
00:14:19,310 --> 00:14:20,732
So, we actually discovered that

305
00:14:20,732 --> 00:14:22,630
as these were communicating back

306
00:14:22,630 --> 00:14:25,280
and forth and communicating
over the network,

307
00:14:25,280 --> 00:14:28,750
whether it be via an app
or directly over the WiFi

308
00:14:28,750 --> 00:14:32,594
that it was transmitting things
like a UID, a MAC address

309
00:14:32,594 --> 00:14:36,720
and even the passwords in clear-text.

310
00:14:36,720 --> 00:14:39,350
So fortunately, we had a test network

311
00:14:39,350 --> 00:14:42,260
and we're using dummy
usernames and passwords

312
00:14:42,260 --> 00:14:44,750
but we found this information
communicated clear-text

313
00:14:44,750 --> 00:14:45,710
over the network.

314
00:14:45,710 --> 00:14:47,920
But furthermore, what
was even more alarming,

315
00:14:47,920 --> 00:14:49,593
was nowhere in the documentation

316
00:14:49,594 --> 00:14:52,647
did it say this information
be stored in the cloud.

317
00:14:52,647 --> 00:14:54,310
And as a result,

318
00:14:54,310 --> 00:14:58,430
we saw all our video recordings
being sent to Alibaba

319
00:14:58,430 --> 00:15:02,410
in China and communicated
clear-text over the internet.

320
00:15:02,410 --> 00:15:04,780
And what was even more alarming than that,

321
00:15:04,780 --> 00:15:07,319
where they were stored
in the cloud was almost

322
00:15:07,320 --> 00:15:11,600
like a massive Google Drive
of everybody's shared videos.

323
00:15:11,600 --> 00:15:13,800
So as we went out there to view our videos

324
00:15:13,800 --> 00:15:15,663
we found many other videos as well.

325
00:15:18,830 --> 00:15:22,370
So one week after we had
disclosed this, coincidentally

326
00:15:22,370 --> 00:15:25,420
the US put a ban on the exact
same cameras we had covered

327
00:15:25,420 --> 00:15:27,000
in the presentation.

328
00:15:27,000 --> 00:15:29,040
Not to say that we influenced that

329
00:15:29,040 --> 00:15:32,490
or we had any kind of play in that,

330
00:15:32,490 --> 00:15:34,260
but it certainly was quite a coincidence

331
00:15:34,260 --> 00:15:36,163
after we had released the research.

332
00:15:37,000 --> 00:15:39,090
And with that, I'll turn it over to Chet.

333
00:15:39,090 --> 00:15:40,190
- Great. Thanks, Mike.

334
00:15:41,090 --> 00:15:42,040
We wanna talk a little bit

335
00:15:42,040 --> 00:15:44,560
about industrial control
systems and we wanted to

336
00:15:44,560 --> 00:15:46,709
pick a particular
protocol that we wanted to

337
00:15:46,710 --> 00:15:49,990
actually examine and kind of
provide a little background

338
00:15:49,990 --> 00:15:51,810
on that and then actually show you how

339
00:15:51,810 --> 00:15:54,050
we could intercept that
protocol and actually figure

340
00:15:54,050 --> 00:15:55,370
out what was actually going on

341
00:15:55,370 --> 00:15:58,600
'cause these protocols were
originally designed not to run

342
00:15:58,600 --> 00:16:00,840
over the internet, over TCP/IP,

343
00:16:00,840 --> 00:16:01,950
they were direct connected.

344
00:16:01,950 --> 00:16:06,810
So MODBUS was originally
created by Modicon back in 1979

345
00:16:06,810 --> 00:16:08,959
and it was a serial
communication protocol.

346
00:16:08,960 --> 00:16:11,550
And then Modicum was
required by Snyder Electric,

347
00:16:11,550 --> 00:16:15,050
a very large industrial patrol
provider which uses it today.

348
00:16:15,050 --> 00:16:16,479
My first involvement was back

349
00:16:16,480 --> 00:16:18,830
in the early '90s when I was developing

350
00:16:18,830 --> 00:16:21,985
an AI (heuristic based)
Hydroelectric Control System

351
00:16:21,985 --> 00:16:25,050
during a research project
funded by Niagra Mohawk.

352
00:16:25,050 --> 00:16:26,510
So my involvement with MODBUS

353
00:16:26,510 --> 00:16:29,600
and those protocols go way
back and if interested,

354
00:16:29,600 --> 00:16:31,640
this was the review article that was peer

355
00:16:31,640 --> 00:16:35,030
reviewed by hydro review back in 1992.

356
00:16:35,030 --> 00:16:37,079
And I'm exposing how old I am.

357
00:16:37,080 --> 00:16:39,270
Anyway, just to talk about the basics

358
00:16:39,270 --> 00:16:42,250
of the MODBUS protocol and how it works.

359
00:16:42,250 --> 00:16:44,280
And one of the reasons
why it's so popular,

360
00:16:44,280 --> 00:16:47,360
but also one of the reasons
why it's so vulnerable is,

361
00:16:47,360 --> 00:16:49,600
you have clients or
multiple clients that need

362
00:16:49,600 --> 00:16:51,910
to make requests to specific units.

363
00:16:51,910 --> 00:16:53,240
So they have a server that's

364
00:16:53,240 --> 00:16:55,850
in between that you're
gonna communicate with.

365
00:16:55,850 --> 00:16:57,960
So the client basically makes a request

366
00:16:57,960 --> 00:17:00,980
to the server and then the
server responds to that request.

367
00:17:00,980 --> 00:17:03,090
And that could be to read some information

368
00:17:03,090 --> 00:17:06,000
from one of the units, or it
could be to make a setting

369
00:17:06,000 --> 00:17:08,240
or write and registers or
do those kinds of things

370
00:17:08,240 --> 00:17:11,544
to the industrial control
appliances that are attached

371
00:17:11,544 --> 00:17:14,230
and controlled by the server.

372
00:17:14,230 --> 00:17:16,040
So you would think I
have some protection here

373
00:17:16,040 --> 00:17:18,299
because I have a server that's basically

374
00:17:18,299 --> 00:17:22,790
translating those requests
and properly assigning them

375
00:17:22,790 --> 00:17:25,940
to specific units and then
responding back to the client.

376
00:17:25,940 --> 00:17:27,079
So let's take a look about,

377
00:17:27,079 --> 00:17:30,550
look at that packet structure,
how this actually works.

378
00:17:30,550 --> 00:17:34,471
So the MODBUS application
header has basically

379
00:17:34,471 --> 00:17:38,180
four different components,
a Transaction ID,

380
00:17:38,180 --> 00:17:40,730
a Protocol ID, a Length, and a Unit ID.

381
00:17:40,730 --> 00:17:43,800
So the Unit ID is, what unit
do I want to communicate with?

382
00:17:43,800 --> 00:17:45,840
The Transaction ID is
because they're gonna

383
00:17:45,840 --> 00:17:49,220
issue this client could be
issuing multiple transactions

384
00:17:49,220 --> 00:17:52,200
the same server for the same
unit or for multiple units.

385
00:17:52,200 --> 00:17:55,670
So we understand these things
are going on quite rapidly.

386
00:17:55,670 --> 00:17:57,840
And then there's a
function code, basically,

387
00:17:57,840 --> 00:18:00,759
what do I want you to do
with this particular request?

388
00:18:00,759 --> 00:18:02,350
And then I may have to provide you

389
00:18:02,350 --> 00:18:04,550
with some data that's associated

390
00:18:04,550 --> 00:18:05,919
with that particular request

391
00:18:05,920 --> 00:18:07,780
in order to be able to
perform the operation.

392
00:18:07,780 --> 00:18:10,250
Maybe I want to specify
a specific register,

393
00:18:10,250 --> 00:18:11,586
I may want to write some data,

394
00:18:11,586 --> 00:18:14,370
to a specific value within that area.

395
00:18:14,370 --> 00:18:15,729
So nothing wrong with it there.

396
00:18:15,730 --> 00:18:17,860
So how does it get the response?

397
00:18:17,860 --> 00:18:19,626
Well, when the response comes back,

398
00:18:19,626 --> 00:18:23,240
the response packet looks almost identical

399
00:18:23,240 --> 00:18:25,230
to the request packet.

400
00:18:25,230 --> 00:18:28,090
Basically there's a
transaction ID, a Process ID,

401
00:18:28,090 --> 00:18:29,040
a Length and, a Unit.

402
00:18:29,040 --> 00:18:32,710
So in order for the
client, okay, in order to

403
00:18:32,710 --> 00:18:35,210
basically collect this
data back from the server

404
00:18:35,210 --> 00:18:39,820
it has to associate the
request with the response.

405
00:18:39,820 --> 00:18:42,070
And so they do that by matching

406
00:18:42,070 --> 00:18:43,785
up the Transaction ID and the Function ID

407
00:18:43,786 --> 00:18:47,970
and the Unit ID coming
back into the protocol.

408
00:18:47,970 --> 00:18:49,939
So understand that this all operates

409
00:18:49,939 --> 00:18:53,730
in the payload section of TCP/IP, right?

410
00:18:53,730 --> 00:18:56,367
So it's below that particular level.

411
00:18:56,367 --> 00:18:59,560
If there's an error that
occurs that's defined

412
00:18:59,560 --> 00:19:02,431
by the server, the same
function code byte comes back,

413
00:19:02,431 --> 00:19:05,210
but the most significant
bit is set indicating

414
00:19:05,210 --> 00:19:06,320
there were some error

415
00:19:06,320 --> 00:19:08,909
and then there's an error
response that's there

416
00:19:08,910 --> 00:19:11,423
that we would want to
basically take a look at.

417
00:19:12,450 --> 00:19:16,490
So what are some observations
then based on this?

418
00:19:16,490 --> 00:19:19,480
First of all, the basic MODBUS
protocol has no built in

419
00:19:19,480 --> 00:19:22,460
security or integrity validation.

420
00:19:22,460 --> 00:19:25,430
Thus, any security or
integrity must be provided

421
00:19:25,430 --> 00:19:29,820
by either TCP or the TCP
exchange must be contained

422
00:19:29,820 --> 00:19:31,889
in some sort of wrapper, okay?

423
00:19:31,890 --> 00:19:32,723
In order to do it.

424
00:19:32,723 --> 00:19:35,419
So you'd have to add
security on top of this.

425
00:19:35,420 --> 00:19:36,740
And typically, as Mike said,

426
00:19:36,740 --> 00:19:39,180
is some of the other protocols,
it's typically not turned

427
00:19:39,180 --> 00:19:40,390
on or not used.

428
00:19:40,390 --> 00:19:42,680
And it also makes the
process more complicated.

429
00:19:42,680 --> 00:19:46,557
And one of the reasons that
it's not used is because,

430
00:19:46,557 --> 00:19:48,280
"Hey all of this is running inside

431
00:19:48,280 --> 00:19:50,947
of our internal environment,
why are we concerned?"

432
00:19:50,948 --> 00:19:52,490
So the insider threat

433
00:19:52,490 --> 00:19:54,330
and other compromises that can occur

434
00:19:54,330 --> 00:19:57,590
inside the organization
are not considered.

435
00:19:57,590 --> 00:20:01,522
So, but by capturing
all the TCP/IP traffic

436
00:20:01,522 --> 00:20:04,310
we could build a script
that matches the requests

437
00:20:04,310 --> 00:20:07,379
to the responses, translate
the function codes

438
00:20:07,380 --> 00:20:09,540
to readable messages so
we know what they were.

439
00:20:09,540 --> 00:20:12,139
We can translate any of the
error codes that were there

440
00:20:12,140 --> 00:20:16,210
and we can catch and
report any error responses.

441
00:20:16,210 --> 00:20:18,650
And we can report any orphaned requests

442
00:20:18,650 --> 00:20:21,860
or unsolicited responses,
which would be very unusual.

443
00:20:21,860 --> 00:20:24,159
In other words, you would expect in TCP/IP

444
00:20:24,160 --> 00:20:26,210
that I'm going to get a response

445
00:20:26,210 --> 00:20:28,485
to a request, I'm never
going to get a response

446
00:20:28,485 --> 00:20:30,870
to something I didn't request, right?

447
00:20:30,870 --> 00:20:32,350
Those things would be really odd

448
00:20:32,350 --> 00:20:35,263
and would probably indicate
some sort of compromise.

449
00:20:36,393 --> 00:20:39,060
So I'm going to turn this back to Mike.

450
00:20:39,060 --> 00:20:41,389
He's going to basically talk
about some of the IOT things.

451
00:20:41,390 --> 00:20:43,370
Then I'm going to come back
and show you a quick demo

452
00:20:43,370 --> 00:20:45,120
of how we actually do that capture.

453
00:20:47,210 --> 00:20:48,520
- Great. Thanks Chet.

454
00:20:48,520 --> 00:20:53,520
So, what have we learned through
a variety of this testing?

455
00:20:54,010 --> 00:20:56,060
First and foremost, you know,

456
00:20:56,060 --> 00:20:58,210
why is my username and
password being transmitted

457
00:20:58,210 --> 00:21:00,708
to the cloud to a foreign country?

458
00:21:00,708 --> 00:21:04,340
And by sending out this information,

459
00:21:04,340 --> 00:21:06,540
which by the way, wasn't even documented,

460
00:21:06,540 --> 00:21:08,690
this outbound only data,

461
00:21:08,690 --> 00:21:11,330
unless you're filtering
outbound, is being sent

462
00:21:11,330 --> 00:21:15,490
to the cloud in a foreign
country, stored in a drive share.

463
00:21:15,490 --> 00:21:17,899
That's accessible to everybody.

464
00:21:17,899 --> 00:21:22,070
In addition, when considering Data-at-Rest

465
00:21:22,070 --> 00:21:24,423
and Data-in-Motion, there's
also the important aspect

466
00:21:24,423 --> 00:21:28,440
of Data-in-Use in those Types-of-Data.

467
00:21:28,440 --> 00:21:30,370
For example, we've heard many

468
00:21:30,370 --> 00:21:33,989
of the stories around, for
example, the use of a mic

469
00:21:33,990 --> 00:21:37,610
within many of the IOT
devices, including televisions

470
00:21:37,610 --> 00:21:39,633
and other types of devices.

471
00:21:39,634 --> 00:21:43,904
A good example of that is
with a lot of our research

472
00:21:43,904 --> 00:21:47,444
in the past, around other
forms of smartwatches

473
00:21:47,444 --> 00:21:52,260
we had disclosed, for
example, not only the lack

474
00:21:52,260 --> 00:21:55,700
of resident encryption and data arrest,

475
00:21:55,700 --> 00:22:00,008
or a lack of Data-in-Motion
with these smartwatches

476
00:22:00,008 --> 00:22:01,610
and how they communicate with an app

477
00:22:01,610 --> 00:22:03,949
or communicate that data to the cloud.

478
00:22:03,950 --> 00:22:06,695
But furthermore, in
looking at how these data,

479
00:22:06,695 --> 00:22:10,570
these devices actually
leverage other functions

480
00:22:10,570 --> 00:22:14,040
of how they inter
inter-operate with, for example

481
00:22:14,040 --> 00:22:15,360
in the app on a mobile device,

482
00:22:15,360 --> 00:22:17,929
is what other types of
features are they using

483
00:22:17,930 --> 00:22:20,280
on that mobile device
that you weren't aware of.

484
00:22:20,280 --> 00:22:22,750
Maybe they had disclosed it
when you installed the app

485
00:22:22,750 --> 00:22:25,220
but fundamentally, there's
other aspects that are

486
00:22:25,220 --> 00:22:27,593
going on and also being sent to the cloud.

487
00:22:28,940 --> 00:22:32,010
The supply chain also for a
lot of these operating systems

488
00:22:32,010 --> 00:22:34,470
as we've mentioned, is largely unknown.

489
00:22:34,470 --> 00:22:36,580
For example, when we
first started research

490
00:22:36,580 --> 00:22:38,766
around the Nucleus Operating System,

491
00:22:38,767 --> 00:22:41,690
we knew nothing about
that operating system.

492
00:22:41,690 --> 00:22:45,940
And as we started to run
tests, do reverse engineering

493
00:22:45,940 --> 00:22:48,260
analyze the network communications,

494
00:22:48,260 --> 00:22:50,650
really started to uncover a lot of those

495
00:22:50,650 --> 00:22:52,110
undocumented features.

496
00:22:52,110 --> 00:22:54,060
And it kind of begs the question,

497
00:22:54,060 --> 00:22:56,730
did they not document it for a reason?

498
00:22:56,730 --> 00:22:58,880
Many of the documentation we got were also

499
00:22:58,880 --> 00:23:00,240
in foreign languages.

500
00:23:00,240 --> 00:23:02,060
And even in the extreme case

501
00:23:02,060 --> 00:23:03,830
where you could obtain an update,

502
00:23:03,830 --> 00:23:05,800
it would simply provide an IP address

503
00:23:05,800 --> 00:23:07,330
with no other information.

504
00:23:07,330 --> 00:23:08,733
So definitely suspicious.

505
00:23:09,690 --> 00:23:12,660
And as we've demonstrated
in this presentation

506
00:23:12,660 --> 00:23:14,050
and others we've done in the past

507
00:23:14,050 --> 00:23:17,970
including what we covered in
the RSA presentation in 2018,

508
00:23:17,970 --> 00:23:20,270
it's quite easy to modify a lot

509
00:23:20,270 --> 00:23:22,960
of these operating systems, their software

510
00:23:22,960 --> 00:23:27,040
and how they communicate to
embed a plethora of covert data.

511
00:23:27,040 --> 00:23:29,540
Because there really is no
integrity checking whatsoever

512
00:23:29,540 --> 00:23:30,913
on a lot of these devices.

513
00:23:31,811 --> 00:23:35,040
And also by adding a device

514
00:23:35,040 --> 00:23:38,480
to the network is the ability
to weaponize that device

515
00:23:38,480 --> 00:23:40,420
even if it's somewhat passive.

516
00:23:40,420 --> 00:23:42,930
So by putting a new IOT device

517
00:23:42,930 --> 00:23:46,730
on the network and leveraging
a protocol like SSDP

518
00:23:46,730 --> 00:23:50,230
with M-Search and NOTIFY and
those other communications,

519
00:23:50,230 --> 00:23:53,190
other devices are naturally
gonna respond back.

520
00:23:53,190 --> 00:23:56,540
It's sort of an indirect way
of footprinting the network

521
00:23:56,540 --> 00:23:59,723
without actually running an
actual scan of that network.

522
00:24:00,630 --> 00:24:02,709
And then lastly, as we've mentioned,

523
00:24:02,709 --> 00:24:06,594
other considerations related
to this, for example,

524
00:24:06,594 --> 00:24:11,594
are the ICS, are the OT, industrial IOT

525
00:24:12,200 --> 00:24:15,940
or IOT devices communicating
by means of a hub

526
00:24:15,940 --> 00:24:19,920
or a centralized gateway
in which they communicate?

527
00:24:19,920 --> 00:24:22,550
What's the actual physical security

528
00:24:22,550 --> 00:24:24,760
of something like that in a hub?

529
00:24:24,760 --> 00:24:27,250
You know, we presented
a few years back at RSA

530
00:24:27,250 --> 00:24:31,710
how plugging even just a thumb
drive into the storage device

531
00:24:31,710 --> 00:24:35,060
for all of the video storage
that you could easily

532
00:24:35,060 --> 00:24:38,669
without any access, to log into the device

533
00:24:38,670 --> 00:24:40,860
get a copy of all those videos

534
00:24:40,860 --> 00:24:43,360
store them to the thumb
drive and walk away.

535
00:24:43,360 --> 00:24:45,020
So a lot of those things we've implemented

536
00:24:45,020 --> 00:24:49,010
over the years on desktops and PCs

537
00:24:49,010 --> 00:24:51,473
hasn't really transcended
over into IOT yet.

538
00:24:56,363 --> 00:25:00,600
So in terms of applying this
based on our learnings here,

539
00:25:00,600 --> 00:25:04,010
and I'll let Chet kind of
elaborate on this as well,

540
00:25:04,010 --> 00:25:07,320
is when thinking about confidentiality

541
00:25:07,320 --> 00:25:10,070
in some of the examples we've
gone through already is,

542
00:25:10,070 --> 00:25:12,510
how's information secured

543
00:25:12,510 --> 00:25:14,990
and to what extent on these devices?

544
00:25:14,990 --> 00:25:19,600
We find the Data-at-Rest
and even the Data-in-Motion

545
00:25:19,600 --> 00:25:21,929
by default is largely turned off.

546
00:25:21,930 --> 00:25:23,670
And especially for the Data-at-rest,

547
00:25:23,670 --> 00:25:26,550
no resident in prescription
you can even enable.

548
00:25:26,550 --> 00:25:30,250
And furthermore, in
terms of the Data-in-Use,

549
00:25:30,250 --> 00:25:33,135
being able to also hide
data within payloads,

550
00:25:33,135 --> 00:25:35,920
there's just a huge
lack of confidentiality

551
00:25:35,920 --> 00:25:39,980
and furthermore integrity
checking especially to allow these

552
00:25:39,980 --> 00:25:43,210
to be used as an Avenue
for covert communications

553
00:25:43,210 --> 00:25:45,990
for data exfiltration and also injection

554
00:25:45,990 --> 00:25:49,960
and communicating CNC,
URLs and IP addresses.

555
00:25:49,960 --> 00:25:51,200
And also--
- One of the things

556
00:25:51,200 --> 00:25:53,490
we often talked about is
on the integrity side.

557
00:25:53,490 --> 00:25:56,300
Everybody kind of talks
about encryption, right?

558
00:25:56,300 --> 00:25:58,450
And thinking encryption is
going to solve everything.

559
00:25:58,450 --> 00:26:01,926
But integrity is just important
to have that in this process

560
00:26:01,926 --> 00:26:04,629
of being able to make sure
that the communications

561
00:26:04,630 --> 00:26:07,550
that are happening are
happening with integrity.

562
00:26:07,550 --> 00:26:11,080
So what type of cryptographic
hashing is being used?

563
00:26:11,080 --> 00:26:13,740
So are digital signatures
being used or rarely?

564
00:26:13,740 --> 00:26:15,490
Are trusted timestamps used?

565
00:26:15,490 --> 00:26:16,350
Never.

566
00:26:16,350 --> 00:26:18,740
Is blockchain an interesting technology?

567
00:26:18,740 --> 00:26:20,750
But is it applied in this area?

568
00:26:20,750 --> 00:26:22,130
We've not seen it.

569
00:26:22,130 --> 00:26:25,990
In audit, it's rarely captured,
but typically never viewed.

570
00:26:25,990 --> 00:26:29,120
So even if some of those
integrity mechanisms are

571
00:26:29,120 --> 00:26:32,473
in place within this
environment, nobody's watching.

572
00:26:35,730 --> 00:26:37,823
- And when we take a look at availability,

573
00:26:37,823 --> 00:26:41,550
we mentioned the lack of
security updates earlier,

574
00:26:41,550 --> 00:26:42,955
they're either not available,

575
00:26:42,955 --> 00:26:46,350
there's a lot of vendors
out there that just

576
00:26:46,350 --> 00:26:49,050
provide no services to manage that,

577
00:26:49,050 --> 00:26:52,080
or it may not even be built
into the device to go out there

578
00:26:52,080 --> 00:26:55,840
and pull down or automatically
update the device over time.

579
00:26:55,840 --> 00:26:58,260
And now that with all
the supply chain risks,

580
00:26:58,260 --> 00:27:01,340
would you trust it from
a non trusted vendor.

581
00:27:01,340 --> 00:27:03,445
which brings up further questions around

582
00:27:03,445 --> 00:27:05,102
availability as well.

583
00:27:06,130 --> 00:27:07,720
- So one of the things that we have built

584
00:27:07,720 --> 00:27:10,850
over the last few years is
this ability to monitor some

585
00:27:10,850 --> 00:27:11,830
of this traffic and look at.

586
00:27:11,830 --> 00:27:13,230
We pick one of the ones we've done

587
00:27:13,230 --> 00:27:15,880
which is the MODBUS applications.

588
00:27:15,880 --> 00:27:17,600
We wanted to actually
share that with everybody

589
00:27:17,600 --> 00:27:19,030
and actually give it to everybody for free

590
00:27:19,030 --> 00:27:20,960
if they want to actually
download it and play with it.

591
00:27:20,960 --> 00:27:24,430
So this is the analysis
of MODBUS flow requests

592
00:27:24,430 --> 00:27:26,684
and responses that I mentioned earlier.

593
00:27:26,684 --> 00:27:29,960
It's a Python 3 Scripts
that runs on all platforms.

594
00:27:29,960 --> 00:27:32,100
And you can freely download it from

595
00:27:32,100 --> 00:27:35,030
the Silent Signals website.

596
00:27:35,030 --> 00:27:39,433
So with that, I'll bring up the script.

597
00:27:40,780 --> 00:27:42,600
I can get rid of all my screens.

598
00:27:42,600 --> 00:27:45,320
And I'm gonna actually go ahead

599
00:27:45,320 --> 00:27:46,370
and run that script for you.

600
00:27:46,370 --> 00:27:47,520
So it's a pretty simple script.

601
00:27:47,520 --> 00:27:49,850
It's a script called MPA.pi

602
00:27:49,850 --> 00:27:53,290
and you basically specify
what directory that you'd

603
00:27:53,290 --> 00:27:57,889
like to basically pull
some PCAP files from.

604
00:27:57,890 --> 00:28:00,440
So I've got a bunch of them
in this particular directory.

605
00:28:00,440 --> 00:28:02,430
Let me show you a really
simple one to start with,

606
00:28:02,430 --> 00:28:03,700
we'll look at PCAP 3.

607
00:28:03,700 --> 00:28:05,580
So what we're gonna do
is, we're doing this

608
00:28:05,580 --> 00:28:08,250
by replaying a PCAP file but
you could also do this live

609
00:28:08,250 --> 00:28:11,110
of course, if you wanted to
put a monitor on your network.

610
00:28:11,110 --> 00:28:12,889
So what happens in this particular case,

611
00:28:12,890 --> 00:28:14,780
exactly what I wanted to visualize

612
00:28:14,780 --> 00:28:16,940
exactly what we talked about before.

613
00:28:16,940 --> 00:28:18,530
We processed eight packets and two

614
00:28:18,530 --> 00:28:22,129
of those packets were MODBUS
packets and they were normal.

615
00:28:22,130 --> 00:28:24,040
So we had the requests going out from

616
00:28:24,040 --> 00:28:26,898
at a particular time and it
came back almost instantly.

617
00:28:26,898 --> 00:28:29,060
The source IP addresses are the same,

618
00:28:29,060 --> 00:28:31,570
502 is the MODBUS port.

619
00:28:31,570 --> 00:28:34,980
And then in the request
direction, it's targeting

620
00:28:34,980 --> 00:28:37,880
the MODBUS port and in
the response direction,

621
00:28:37,880 --> 00:28:40,100
it's coming back from the port.

622
00:28:40,100 --> 00:28:41,149
So we're actually looking at those.

623
00:28:41,150 --> 00:28:45,630
So the TID and the PID and the
unit ID, all of those match.

624
00:28:45,630 --> 00:28:47,130
So what happens if we do something

625
00:28:47,130 --> 00:28:49,400
a little bit more interesting

626
00:28:49,400 --> 00:28:52,904
and we look at a PCAP file
that's a little bit bigger.

627
00:28:52,904 --> 00:28:56,010
And this script will run on
virtually any size PCAP file

628
00:28:56,010 --> 00:28:57,450
that you want to correlate.

629
00:28:57,450 --> 00:29:00,090
So we actually look at
these requests-to-response

630
00:29:00,090 --> 00:29:02,110
to determine if they're in fact normal.

631
00:29:02,110 --> 00:29:04,370
So normal would be, "Hey,
I sent out a request,

632
00:29:04,370 --> 00:29:06,610
I got a response there were no errors

633
00:29:06,610 --> 00:29:08,669
and everything was kosher.

634
00:29:08,670 --> 00:29:10,340
So you're basically seeing all of the data

635
00:29:10,340 --> 00:29:13,230
that's going back and forth
across that protocol here.

636
00:29:13,230 --> 00:29:14,380
And you can analyze that.

637
00:29:14,380 --> 00:29:16,890
So you're looking at all the
normal packets that go back

638
00:29:16,890 --> 00:29:19,457
and forth on that particular protocol.

639
00:29:19,457 --> 00:29:22,070
And what happens when things go wrong?

640
00:29:22,070 --> 00:29:25,179
And what might it mean if they go wrong?

641
00:29:25,180 --> 00:29:26,459
So let me scroll down to a couple of

642
00:29:26,459 --> 00:29:31,459
the warnings, the criticals,
unless the script jumps out.

643
00:29:31,460 --> 00:29:34,780
And this will dump out to a
CSV or adjacent file as well

644
00:29:34,780 --> 00:29:37,889
if you wanted to bring
it into another example.

645
00:29:37,890 --> 00:29:40,000
So here's the first warning that we got.

646
00:29:40,000 --> 00:29:43,170
So in this particular case, we
basically sent out a request,

647
00:29:43,170 --> 00:29:45,540
by the way, PCAP files came from Devcon.

648
00:29:45,540 --> 00:29:49,233
And basically, these were
a tax scenario PCAP files.

649
00:29:50,170 --> 00:29:51,677
I should give them some credit for that.

650
00:29:51,677 --> 00:29:53,199
So basically in this case,

651
00:29:53,200 --> 00:29:55,240
we call this a warning
because we sent out a request

652
00:29:55,240 --> 00:29:57,520
but we never got a
response from the server.

653
00:29:57,520 --> 00:29:59,010
So what could that mean?

654
00:29:59,010 --> 00:30:00,240
Well, obviously it could mean

655
00:30:00,240 --> 00:30:02,380
that the servers down are
not operating correctly

656
00:30:02,380 --> 00:30:06,050
or not responding correctly
to this particular request

657
00:30:06,050 --> 00:30:07,850
and is anybody watching to make sure

658
00:30:07,850 --> 00:30:08,740
that that actually is happening?

659
00:30:08,740 --> 00:30:11,090
So we've got several of those

660
00:30:11,090 --> 00:30:12,580
which are certainly concerning.

661
00:30:12,580 --> 00:30:14,710
In this one that we're looking at

662
00:30:14,710 --> 00:30:17,710
came from the same IP address,

663
00:30:17,710 --> 00:30:20,780
going out to the same
destination IP address

664
00:30:20,780 --> 00:30:24,810
over the port in multiple times
in a row It never responded.

665
00:30:24,810 --> 00:30:25,870
Kind of indicating this is

666
00:30:25,870 --> 00:30:27,719
an alert you'd want to know about,

667
00:30:27,720 --> 00:30:29,550
that something is not operating correctly

668
00:30:29,550 --> 00:30:31,720
within your ICS environment.

669
00:30:31,720 --> 00:30:33,980
And again, it may indicate there's been

670
00:30:33,980 --> 00:30:35,560
some sort of compromise.

671
00:30:35,560 --> 00:30:36,810
But the more concerning ones

672
00:30:36,810 --> 00:30:40,889
that we see in many of
these is one like this,

673
00:30:40,890 --> 00:30:43,940
where we have a missing request.

674
00:30:43,940 --> 00:30:45,860
So we have a response that came back

675
00:30:45,860 --> 00:30:47,879
from the server that's
operating when the unit

676
00:30:47,880 --> 00:30:49,930
the critical device that's
probably controlling

677
00:30:49,930 --> 00:30:52,570
a unit is sending out
a response packet where

678
00:30:52,570 --> 00:30:54,821
there was no corresponding request.

679
00:30:54,821 --> 00:30:57,250
That implies,

680
00:30:57,250 --> 00:30:59,820
that the server has been
compromised at some level

681
00:30:59,820 --> 00:31:01,929
and is trying to send information back

682
00:31:01,930 --> 00:31:04,360
to clients within the environment

683
00:31:04,360 --> 00:31:07,070
and basically trying to corrupt those.

684
00:31:07,070 --> 00:31:08,419
So this is a critical error

685
00:31:08,420 --> 00:31:10,270
that we would label in
this particular case

686
00:31:10,270 --> 00:31:12,610
because we have multiple cases here where

687
00:31:12,610 --> 00:31:15,800
we have a missing request
where we got a response back

688
00:31:15,800 --> 00:31:20,233
from the server, but no
corresponding request.

689
00:31:21,120 --> 00:31:24,620
And then basically you can run
as many of those as you want.

690
00:31:24,620 --> 00:31:25,649
And like I said before,

691
00:31:25,650 --> 00:31:28,570
the MPA analyzer is available,
it's a Python Script.

692
00:31:28,570 --> 00:31:30,169
You can run it out into your platforms

693
00:31:30,170 --> 00:31:35,170
and you can get that from
the Silent Signals website.

694
00:31:38,420 --> 00:31:42,167
So again, these are some of
the examples of their requests,

695
00:31:42,167 --> 00:31:44,810
the response I gave you the demo,

696
00:31:44,810 --> 00:31:46,070
I'm going to turn it back to Mike.

697
00:31:46,070 --> 00:31:47,715
I see we have a few
more minutes to kind of

698
00:31:47,715 --> 00:31:49,943
wrap up for the day.

699
00:31:51,100 --> 00:31:52,870
- Sounds great, thanks Chet.

700
00:31:52,870 --> 00:31:57,870
So to round things out, and really apply

701
00:31:58,160 --> 00:32:00,680
what we've learned today and kind of

702
00:32:00,680 --> 00:32:03,180
what we've demonstrated and talked about

703
00:32:03,180 --> 00:32:05,705
over the last 30 minutes or so is really

704
00:32:05,705 --> 00:32:08,429
how can you start out next week

705
00:32:08,430 --> 00:32:11,750
and how you could use a tool like this.

706
00:32:11,750 --> 00:32:13,030
And a lot of the learnings we went

707
00:32:13,030 --> 00:32:16,579
through truly perform localized
network packet captures

708
00:32:16,579 --> 00:32:19,330
in some kind of test location

709
00:32:19,330 --> 00:32:22,570
and use the script to assess
your MODBUS environment.

710
00:32:22,570 --> 00:32:23,649
And furthermore,

711
00:32:23,650 --> 00:32:25,790
determine if there are
any kind of suspicious

712
00:32:25,790 --> 00:32:28,860
or even maybe aberrant
behaviors that are occurring.

713
00:32:28,860 --> 00:32:32,495
And this can certainly be used to help

714
00:32:32,496 --> 00:32:36,120
investigate any kind of
suspicious covert communications

715
00:32:36,120 --> 00:32:37,760
or hostile type activities.

716
00:32:37,760 --> 00:32:42,083
And furthermore, what
can be done beyond that.

717
00:32:43,130 --> 00:32:44,900
We've also tested this

718
00:32:44,900 --> 00:32:48,770
within a raspberry PI and other
types of environments too.

719
00:32:48,770 --> 00:32:50,155
So it's very efficient,

720
00:32:50,155 --> 00:32:55,050
you don't need a huge server
or even a laptop to run this.

721
00:32:55,050 --> 00:32:58,040
And furthermore, if it is an ICS kind of

722
00:32:58,040 --> 00:33:02,260
an environment, you can even
run localized reporting.

723
00:33:02,260 --> 00:33:05,739
For example, Grafana, along
with an influx database

724
00:33:05,739 --> 00:33:08,390
on that device, which
would give you some really

725
00:33:08,390 --> 00:33:12,500
nice reporting for your operations center

726
00:33:12,500 --> 00:33:14,581
if you want it to operationalize it.

727
00:33:14,581 --> 00:33:17,990
Additionally, if you had
something like Splunk localized

728
00:33:17,990 --> 00:33:20,720
on the network, you
could report to that too.

729
00:33:20,720 --> 00:33:23,605
We tested that out with Splunk as well,

730
00:33:23,605 --> 00:33:26,447
or, in those other types of environments

731
00:33:26,447 --> 00:33:30,639
if you want to Cloudify this
and do this in the cloud,

732
00:33:30,640 --> 00:33:32,830
we've tested this across Grafana, Splunk

733
00:33:32,830 --> 00:33:37,179
and even have started doing
some testing with AWS as well.

734
00:33:37,180 --> 00:33:38,900
But as you think more broadly

735
00:33:38,900 --> 00:33:41,200
about your environment, multiple locations

736
00:33:41,200 --> 00:33:43,950
multiple networks is
the ability to kind of

737
00:33:43,950 --> 00:33:47,900
uncover these anomalous
nefarious type communications.

738
00:33:47,900 --> 00:33:49,398
Anything that might be suspicious,

739
00:33:49,398 --> 00:33:53,389
but also uncovering what
might be a hostile location,

740
00:33:53,390 --> 00:33:56,160
if it truly is or has found a way out

741
00:33:56,160 --> 00:34:01,160
to the internet as well as
well as ingress in some cases.

742
00:34:02,420 --> 00:34:04,310
And this can certainly help
with removing the device

743
00:34:04,310 --> 00:34:07,850
from the network and helping
lock down those communications.

744
00:34:07,850 --> 00:34:11,409
And then furthermore,
over time refining those

745
00:34:11,409 --> 00:34:14,053
approaches to fully operationalize that.

746
00:34:16,730 --> 00:34:19,690
So I'll allow Chet to
say thank you as well,

747
00:34:19,690 --> 00:34:22,300
but we did want to thank
you for your time today.

748
00:34:22,300 --> 00:34:25,022
Thank you so much for having us back.

749
00:34:25,022 --> 00:34:29,427
We had a great time in 2018
during the presentation for RSA

750
00:34:29,427 --> 00:34:33,760
and this is sort of our next version of,

751
00:34:33,760 --> 00:34:36,460
kind of an updated version
of all the different types

752
00:34:36,460 --> 00:34:39,435
of research we've been doing
around covert communications

753
00:34:39,435 --> 00:34:41,570
and really appreciate your time today.

754
00:34:41,570 --> 00:34:44,130
And I'll turn it over to
Chet one last time as well.

755
00:34:44,130 --> 00:34:45,429
- Great. Thanks, Mike.

756
00:34:45,429 --> 00:34:47,790
Really great to see everybody again

757
00:34:47,790 --> 00:34:49,340
and wish we were there in person

758
00:34:49,340 --> 00:34:51,590
but hopefully we kind of
inspired you a little bit

759
00:34:51,590 --> 00:34:54,469
to kind of look a little bit
deeper into these protocols

760
00:34:54,469 --> 00:34:57,430
use some tools and technologies
to actually do that analysis

761
00:34:57,430 --> 00:34:59,589
and actually integrate
that into your operations.

762
00:34:59,590 --> 00:35:01,250
And that's something that we do

763
00:35:01,250 --> 00:35:03,510
on a daily basis every single day.

764
00:35:03,510 --> 00:35:06,780
And so hopefully that was informative.

765
00:35:06,780 --> 00:35:09,090
Hopefully download the
scripts that we're providing

766
00:35:09,090 --> 00:35:10,900
so that you can start
to use those yourself

767
00:35:10,900 --> 00:35:13,577
and give us some feedback
we'd love to hear from you.

