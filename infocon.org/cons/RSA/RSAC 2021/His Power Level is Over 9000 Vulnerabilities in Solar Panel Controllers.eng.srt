1
00:00:01,250 --> 00:00:04,040
- Welcome to the session,
this is a session on

2
00:00:04,040 --> 00:00:06,310
Vulnerabilities in
Solar Panel Controllers.

3
00:00:06,310 --> 00:00:09,709
I'm Waylon Grange, I am a
Principle Threat Researcher

4
00:00:09,710 --> 00:00:11,510
at Stage 2 Security.

5
00:00:11,510 --> 00:00:13,770
So I can do this is my job.

6
00:00:13,770 --> 00:00:15,240
And this is just kind of a talk.

7
00:00:15,240 --> 00:00:17,040
I'm gonna talk particularly about

8
00:00:17,040 --> 00:00:18,890
vulnerabilities in solar panels,

9
00:00:18,890 --> 00:00:22,920
and I'm gonna use one case
study as an example here.

10
00:00:22,920 --> 00:00:23,996
And then I'll just highlight

11
00:00:23,996 --> 00:00:24,828
the vulnerabilities in this case study

12
00:00:24,829 --> 00:00:29,290
and tell you which ones are
kind of systematic across,

13
00:00:29,290 --> 00:00:33,483
IoT that we see versus unique
to this particular vendor.

14
00:00:34,520 --> 00:00:36,607
So just a little background to the story

15
00:00:36,607 --> 00:00:39,130
on what got me on this research initially.

16
00:00:39,130 --> 00:00:41,280
Last year, I found myself
with a little bit more

17
00:00:41,280 --> 00:00:43,730
extra free time when I was at home.

18
00:00:43,730 --> 00:00:46,430
And so, I was looking
for a project to work on,

19
00:00:46,430 --> 00:00:47,570
something to do.

20
00:00:47,570 --> 00:00:49,810
And around the same time,
my neighbor installed

21
00:00:49,810 --> 00:00:51,420
a new solar panel system.

22
00:00:51,420 --> 00:00:54,020
And as he was telling me about a system,

23
00:00:54,020 --> 00:00:56,540
a lot of little red flag shot in my mind

24
00:00:56,540 --> 00:00:58,832
and I wanted to check out
how secure system was.

25
00:00:58,832 --> 00:01:01,750
So added two together and
that's kinda how we got

26
00:01:01,750 --> 00:01:04,060
to where we are today.

27
00:01:04,060 --> 00:01:08,990
So just as a fair shot I
didn't single out this vendor

28
00:01:08,990 --> 00:01:10,199
for any other reason other than

29
00:01:10,200 --> 00:01:12,180
that's the vendor my neighbor had

30
00:01:12,180 --> 00:01:14,430
and so that's what I
figured I would look at.

31
00:01:16,147 --> 00:01:17,400
And so with that kind of background,

32
00:01:17,400 --> 00:01:18,790
why just take a quick look at things

33
00:01:18,790 --> 00:01:21,380
so when we do our
research on these projects

34
00:01:21,380 --> 00:01:23,869
the first thing we always do
is open source research, right?

35
00:01:23,870 --> 00:01:25,760
We try to figure out as far as we can go

36
00:01:25,760 --> 00:01:26,594
before we even touch any
type of embedded device.

37
00:01:26,594 --> 00:01:30,710
Just try to find out where
we can on the Internet,

38
00:01:30,710 --> 00:01:32,830
get a hold of firmware images if we can,

39
00:01:32,830 --> 00:01:34,490
and start looking that way.

40
00:01:34,490 --> 00:01:39,490
So as an overview, this
is taken from the Enphases

41
00:01:40,520 --> 00:01:42,160
on marketing material

42
00:01:42,160 --> 00:01:44,823
and this is their
overview of their system.

43
00:01:46,763 --> 00:01:48,100
So highlighting the things
that were interesting to me

44
00:01:48,100 --> 00:01:50,762
is that it's got a very
large cloud component.

45
00:01:51,831 --> 00:01:55,120
And also is accessible via your iPad

46
00:01:55,120 --> 00:01:56,910
so it's got some kind of application

47
00:01:56,910 --> 00:01:59,160
that interfaces with
the device in the cloud,

48
00:02:00,400 --> 00:02:03,670
and it is installed via
a mobile application.

49
00:02:03,670 --> 00:02:05,510
So that was really an
interesting point to me,

50
00:02:05,510 --> 00:02:07,610
that all the installation and setups

51
00:02:07,610 --> 00:02:09,583
is done via a web based app.

52
00:02:10,889 --> 00:02:11,940
And as you look at the graph,

53
00:02:11,940 --> 00:02:14,138
you've got your solar panels,
you've got your batteries,

54
00:02:14,138 --> 00:02:16,620
they highlight the
connector for some reason.

55
00:02:16,620 --> 00:02:19,560
But all of it is controlled,
the main brains behind it

56
00:02:19,560 --> 00:02:21,330
is over there on the left side

57
00:02:21,330 --> 00:02:25,520
that little Enphase IQ
or Enphase IQ Combiner.

58
00:02:25,520 --> 00:02:27,940
That device right there is
really the heart of the system

59
00:02:27,940 --> 00:02:31,960
that monitors power
consumption, power production,

60
00:02:31,960 --> 00:02:35,210
and then communicates this
information up to the cloud.

61
00:02:35,210 --> 00:02:39,890
It's what the Enphase Installer
Toolkit communicates with,

62
00:02:39,890 --> 00:02:42,940
and it's what reports the
data that ultimately ends up

63
00:02:42,940 --> 00:02:44,690
in your iPad application.

64
00:02:44,690 --> 00:02:46,250
So that device is kind of the heart,

65
00:02:46,250 --> 00:02:49,550
kind of the target of this research.

66
00:02:49,550 --> 00:02:51,269
And so the first thing we want to do

67
00:02:51,269 --> 00:02:52,520
is we wanna get the firmware image,

68
00:02:52,520 --> 00:02:54,790
a copy of the firmware
image for that device.

69
00:02:54,790 --> 00:02:55,659
So I did a lot of open source research.

70
00:02:55,659 --> 00:02:57,209
I was checking out the size,

71
00:02:57,210 --> 00:02:59,160
trying to find the firmware images

72
00:02:59,160 --> 00:03:02,520
that maybe you download
and update or whatever.

73
00:03:02,520 --> 00:03:04,340
But I was unable to
find that firmware image

74
00:03:04,340 --> 00:03:05,940
posted anywhere publicly.

75
00:03:05,940 --> 00:03:08,510
Which is a hats off to the vendors.

76
00:03:08,510 --> 00:03:10,750
Protecting the firmware
images really goes a long way

77
00:03:10,750 --> 00:03:13,250
to keep their devices secure.

78
00:03:13,250 --> 00:03:14,295
So I went with the next best thing,

79
00:03:14,295 --> 00:03:15,904
is that I downloaded the apps

80
00:03:15,904 --> 00:03:19,370
and started reverse
engineering those applications.

81
00:03:19,370 --> 00:03:22,300
So here's the two of
the apps that they have,

82
00:03:22,300 --> 00:03:25,850
they have the Installer Toolkit
and the Enlighten Manager.

83
00:03:25,850 --> 00:03:27,760
And both of these apps are actually

84
00:03:27,760 --> 00:03:31,100
just mono-based applications,

85
00:03:31,100 --> 00:03:33,808
that are either ported to iOS or Android.

86
00:03:33,808 --> 00:03:36,470
And so most of the codes
are written in C sharp.

87
00:03:36,470 --> 00:03:38,909
So it's fairly easy to
reverse and start looking at.

88
00:03:38,909 --> 00:03:41,810
However, what I found
inside the app itself

89
00:03:41,810 --> 00:03:44,440
is that for all
password-related functions,

90
00:03:44,440 --> 00:03:47,630
it would call down to a native binary,

91
00:03:47,630 --> 00:03:49,408
that's been, you know, compiled
for whatever architecture

92
00:03:49,408 --> 00:03:51,630
it's running on.

93
00:03:51,630 --> 00:03:53,980
And whenever I see
something that it's always

94
00:03:53,980 --> 00:03:55,000
a great interest as a pentester, right?

95
00:03:55,001 --> 00:03:57,727
When you do mobile app pentesting,

96
00:03:57,727 --> 00:03:59,563
and you see this a lot where,

97
00:04:00,400 --> 00:04:01,345
and I can't speak for the author

98
00:04:01,345 --> 00:04:03,640
but what it appears to be going on

99
00:04:03,640 --> 00:04:07,369
is there author knows that these apps

100
00:04:07,370 --> 00:04:09,180
can be easily reverse engineered, right?

101
00:04:09,180 --> 00:04:12,940
java.net can be reversed
engineered very easily.

102
00:04:12,940 --> 00:04:15,248
And so it's easy for an
attacker to see what's going on.

103
00:04:15,248 --> 00:04:18,320
And if they have something that
they wanna hide or protect,

104
00:04:18,320 --> 00:04:20,589
then they think, well,
I'm gonna write that in C

105
00:04:20,589 --> 00:04:22,539
or a lower level language C, C plus

106
00:04:23,400 --> 00:04:24,233
or something like that.

107
00:04:24,233 --> 00:04:25,250
Cause it's gonna combine
all down to assembly

108
00:04:25,250 --> 00:04:27,090
and that will further protect it.

109
00:04:27,090 --> 00:04:30,875
But reality reverses, I
mean, we do C, we do C++

110
00:04:30,875 --> 00:04:34,310
and it's almost a native
language just like .net

111
00:04:34,310 --> 00:04:38,480
or Java does to us so it's
really easy for us to see that

112
00:04:38,480 --> 00:04:41,710
to see what's going on in
those compiled binaries.

113
00:04:41,710 --> 00:04:44,010
And so whenever we see a trick like this,

114
00:04:44,010 --> 00:04:46,280
or like, Oh, they're using native binaries

115
00:04:46,280 --> 00:04:47,743
to perform password-related functions

116
00:04:47,743 --> 00:04:49,334
or crypto-related functions,

117
00:04:49,334 --> 00:04:50,319
it's almost like a look here,

118
00:04:50,319 --> 00:04:51,470
like there's going to be good stuff here.

119
00:04:51,470 --> 00:04:55,023
So it almost works to their disadvantage

120
00:04:55,023 --> 00:04:58,165
'cause it tells us right where
to look for some good things.

121
00:04:58,165 --> 00:05:02,640
And so I did just that as I
took their assembly binary

122
00:05:02,640 --> 00:05:04,030
started reversing it.

123
00:05:04,030 --> 00:05:05,559
You could see that they
have a few functions

124
00:05:05,560 --> 00:05:07,622
that they export like get
mobile password, get password

125
00:05:07,622 --> 00:05:10,870
get password for serial
number, get public password.

126
00:05:10,870 --> 00:05:12,510
And all these functions do,

127
00:05:12,510 --> 00:05:15,240
is call down to this native function,

128
00:05:15,240 --> 00:05:19,850
which will compute an MD5
of a string they built.

129
00:05:19,850 --> 00:05:22,870
Here they build a string
based on a serial number

130
00:05:22,870 --> 00:05:24,940
and that Enphase energy

131
00:05:24,940 --> 00:05:27,530
with the alternating caps case.

132
00:05:27,530 --> 00:05:31,619
The compute the MD5 and then
they do acute little CRC

133
00:05:31,620 --> 00:05:35,210
of that MD5 hash, which
makes like a six-character

134
00:05:35,210 --> 00:05:36,640
CRC of that hash.

135
00:05:36,640 --> 00:05:39,265
And that six character CRC is what

136
00:05:39,266 --> 00:05:42,280
then eventually gets compiled back up

137
00:05:42,280 --> 00:05:45,719
to the mobile application as the password.

138
00:05:45,720 --> 00:05:48,150
So this function right here,

139
00:05:48,150 --> 00:05:50,549
initially it tells me how
their password is generated.

140
00:05:50,550 --> 00:05:52,790
And I already, as long as
I know the serial number,

141
00:05:52,790 --> 00:05:55,150
I can compute the password,
the installer password

142
00:05:55,150 --> 00:05:56,051
for any device.

143
00:05:56,051 --> 00:05:58,390
Now gonna just shelve that for right now,

144
00:05:58,390 --> 00:06:01,419
because we'll see that this
is kind of a systematic issue

145
00:06:01,420 --> 00:06:03,410
with this vendor and not just this vendor,

146
00:06:03,410 --> 00:06:06,790
but a lot of vendors where
they kinda do the wrong thing

147
00:06:06,790 --> 00:06:09,320
in creating a password or a crypto

148
00:06:09,320 --> 00:06:12,360
and it ends up hurting them in the end.

149
00:06:12,360 --> 00:06:13,960
So we'll get back to this issue.

150
00:06:14,850 --> 00:06:17,370
Another thing I found
inside those mobile apps

151
00:06:17,370 --> 00:06:20,383
is where their firmware
images are downloaded from

152
00:06:20,383 --> 00:06:23,299
and installed on the device.

153
00:06:23,300 --> 00:06:25,710
And that is a S3 bucket in AWS.

154
00:06:25,710 --> 00:06:27,960
So I started poking at that S3 bucket

155
00:06:27,960 --> 00:06:31,280
and found that the
permissions are open for read.

156
00:06:31,280 --> 00:06:35,109
I could read everything
hosted in that bucket

157
00:06:35,110 --> 00:06:37,490
which means I can see all
their firmware images.

158
00:06:37,490 --> 00:06:39,262
I can also see some install scripts.

159
00:06:39,262 --> 00:06:42,370
I could see an XML file outlining

160
00:06:42,370 --> 00:06:44,780
which firmware images are appropriate

161
00:06:44,780 --> 00:06:47,125
for which devices and
what models they have.

162
00:06:47,125 --> 00:06:50,090
So I was able to glean
a lot of information

163
00:06:50,090 --> 00:06:51,203
by this Open S3 bucket.

164
00:06:51,204 --> 00:06:55,430
And this is a issue that
we see all the time.

165
00:06:55,430 --> 00:07:00,430
We do a lot of cloud pentests
and although open buckets

166
00:07:00,830 --> 00:07:02,659
are not as common as they used to be.

167
00:07:02,660 --> 00:07:05,209
A lot of misconfigurations
are common still

168
00:07:05,209 --> 00:07:09,780
especially with IoT when
they start to use like

169
00:07:09,780 --> 00:07:12,470
Cognito for authentication or shadow IT.

170
00:07:12,471 --> 00:07:14,808
To push settings down to IoT devices,

171
00:07:14,808 --> 00:07:18,530
it's really difficult for
vendors to get the permissions

172
00:07:18,530 --> 00:07:22,049
and the policies on those
cloud packages just right.

173
00:07:22,050 --> 00:07:26,317
And so this is a large issue
that we often see with vendors.

174
00:07:26,317 --> 00:07:30,380
Now, if you look at the
screenshot, you can see that

175
00:07:30,380 --> 00:07:34,430
all the packages end in
this eepkg extension.

176
00:07:34,430 --> 00:07:37,800
Or at least all the firmware
images ended in that extension.

177
00:07:37,800 --> 00:07:40,048
And so I thought I had the
firmware images in hand

178
00:07:40,048 --> 00:07:42,710
but it turns out that the extension

179
00:07:42,710 --> 00:07:44,621
is really their own custom encryption,

180
00:07:44,622 --> 00:07:47,620
so all these files have been encrypted

181
00:07:47,620 --> 00:07:49,830
and I didn't have the decryption key.

182
00:07:49,830 --> 00:07:51,892
I wasn't able to decrypt those files.

183
00:07:51,892 --> 00:07:53,827
Also on the drive, I saw some scripts

184
00:07:53,827 --> 00:07:55,954
which referenced that decryption routine.

185
00:07:55,954 --> 00:08:00,260
And you could see on that
screenshot there online 71

186
00:08:01,330 --> 00:08:04,820
they're calling this
program called eecrypt.

187
00:08:04,820 --> 00:08:07,640
I don't know what eecrypt is.

188
00:08:07,640 --> 00:08:09,800
I couldn't find any public
information about it

189
00:08:09,800 --> 00:08:10,854
but apparently, it is a binary that lives

190
00:08:10,854 --> 00:08:13,789
on the firmware image that is able to

191
00:08:13,790 --> 00:08:16,410
decrypt the other firmware to images.

192
00:08:16,410 --> 00:08:18,723
So here, this is a huge win for them.

193
00:08:18,723 --> 00:08:20,780
I thought I had firmware images,

194
00:08:20,780 --> 00:08:22,510
but they're encrypted still, right?

195
00:08:22,510 --> 00:08:24,800
That's for the protection for them.

196
00:08:24,800 --> 00:08:28,310
And I'm just left with a catch 22 chicken

197
00:08:28,310 --> 00:08:30,010
or the egg type problem.

198
00:08:30,010 --> 00:08:31,960
To decrypt the firmware images,

199
00:08:31,960 --> 00:08:33,880
I need this eecrypt tool

200
00:08:33,880 --> 00:08:36,828
which is found on the firmware images.

201
00:08:36,828 --> 00:08:40,390
So at this point I've
kind of gotten stuck.

202
00:08:40,390 --> 00:08:41,970
I've got, as far as I can go

203
00:08:41,970 --> 00:08:44,930
as a open source development
and I need to start looking

204
00:08:44,930 --> 00:08:47,532
at attacking the devices themselves.

205
00:08:47,533 --> 00:08:51,580
So I went to eBay, I found
myself one of these devices

206
00:08:51,580 --> 00:08:53,881
on eBay pulled it, and
don't download it yet

207
00:08:53,881 --> 00:08:57,770
bought the device and
started taking it apart.

208
00:08:57,770 --> 00:09:02,770
Here's an image of the main
PCB of that Enphase IQ device.

209
00:09:03,150 --> 00:09:06,160
And the overview here,
if you'll look at it

210
00:09:06,160 --> 00:09:09,579
there's kind of a line in
the silk screen on the PCB

211
00:09:09,580 --> 00:09:12,570
that divides the board and the two halves.

212
00:09:12,570 --> 00:09:15,810
The lower left half is the high power area

213
00:09:15,810 --> 00:09:17,859
which is connected to the solar panels,

214
00:09:17,860 --> 00:09:19,122
which is connected to your output,

215
00:09:19,122 --> 00:09:23,760
to your, you know, 110 or 220
phase power on your house.

216
00:09:23,760 --> 00:09:28,420
And then the top right
side is where the low power

217
00:09:28,420 --> 00:09:30,390
the embedded system is running.

218
00:09:30,390 --> 00:09:35,390
And here it's the main
processor is there in the center

219
00:09:35,960 --> 00:09:40,960
the TIAM335x chip, the
system on a computer chip.

220
00:09:42,990 --> 00:09:46,720
It is your main processor
with some external SDRAM,

221
00:09:46,720 --> 00:09:50,630
it's got a eMMC memory for its external.

222
00:09:50,630 --> 00:09:53,640
It's basically, if you're
not familiar the eMMC memory

223
00:09:53,640 --> 00:09:54,963
is like an SD card basically, right?

224
00:09:54,963 --> 00:09:59,963
Like that's where the Ext3
or Ext4 file system resides.

225
00:10:00,990 --> 00:10:03,183
So that's where the Linux Kernel is.

226
00:10:04,890 --> 00:10:07,040
That's where the file system
that reads from is located.

227
00:10:07,040 --> 00:10:09,839
They also have this custom
interface energy chip.

228
00:10:09,840 --> 00:10:12,580
I was able to find very
little information on that

229
00:10:12,580 --> 00:10:15,040
but it appears to be used for computing

230
00:10:15,040 --> 00:10:17,819
the power consumption, power production,

231
00:10:17,820 --> 00:10:19,310
and then reporting that information

232
00:10:19,310 --> 00:10:22,516
over to the TIAM335x chip.

233
00:10:22,516 --> 00:10:24,873
And then over on the right,
you can see there are

234
00:10:24,874 --> 00:10:28,370
it's JTAG Interface,
there's a UART Interface.

235
00:10:28,370 --> 00:10:30,080
There's also a wifi chip and the ethernet.

236
00:10:30,080 --> 00:10:32,110
So those are the attack avenues

237
00:10:32,110 --> 00:10:35,330
that I would have available
wifi, any ethernet

238
00:10:35,330 --> 00:10:39,330
for software attacks and JTAG
and UART for hardware attacks,

239
00:10:39,330 --> 00:10:41,410
not to mention any other traces

240
00:10:41,410 --> 00:10:44,130
or anything that we can pick up on.

241
00:10:44,130 --> 00:10:46,810
So I might come back and
reference this slide as we go on

242
00:10:46,810 --> 00:10:47,849
but this is just kind of overview

243
00:10:47,850 --> 00:10:50,250
of the chip and the system itself.

244
00:10:50,250 --> 00:10:55,250
And so as an embedded system attacker,

245
00:10:56,410 --> 00:10:58,329
there's multiple ways or multiple avenues

246
00:10:58,330 --> 00:10:59,520
that we can attack.

247
00:10:59,520 --> 00:11:01,870
And they're typically all
take place at some level

248
00:11:01,870 --> 00:11:05,950
or a point or another
at up the boot process.

249
00:11:05,950 --> 00:11:08,280
And so this is kind of an overview of how

250
00:11:08,280 --> 00:11:12,300
if any general generic
embedded Linux system boots

251
00:11:12,300 --> 00:11:15,130
and what I'm going to do is
we're gonna talk about each step

252
00:11:15,130 --> 00:11:20,130
and what kind of attacks
are available at each level.

253
00:11:20,150 --> 00:11:22,500
And then I'm gonna
start this at the bottom

254
00:11:22,500 --> 00:11:23,910
and work my way backwards.

255
00:11:23,910 --> 00:11:25,829
So I'm going to start
down at the Root system

256
00:11:25,829 --> 00:11:28,150
and slowly work my way back up.

257
00:11:28,150 --> 00:11:29,870
It might seem a little confusing at first

258
00:11:29,870 --> 00:11:31,140
but I think that makes the most sense

259
00:11:31,140 --> 00:11:33,054
because it starts with what
most people are familiar with

260
00:11:33,054 --> 00:11:36,060
and then slowly backing up from there.

261
00:11:36,060 --> 00:11:38,141
So we'll start down with
the Root Filesystem.

262
00:11:38,142 --> 00:11:42,723
This is basically when the
machine is up and running, right?

263
00:11:42,723 --> 00:11:44,640
This is what most people
are used to seeing

264
00:11:44,640 --> 00:11:46,539
90% of the time as the machine's running.

265
00:11:46,539 --> 00:11:49,610
So you've got all the
services that it runs

266
00:11:49,610 --> 00:11:52,150
maybe it's running SSH or HTTP,

267
00:11:52,150 --> 00:11:53,870
or if they're still running Telnet

268
00:11:53,870 --> 00:11:56,253
all those of the attack
surfaces available.

269
00:11:57,230 --> 00:12:01,280
Additionally, hardware
attacks at this point are

270
00:12:01,280 --> 00:12:02,433
you want to attach to the UART interface

271
00:12:02,433 --> 00:12:04,600
and see what's there.

272
00:12:04,600 --> 00:12:07,020
It used to be very common
that got attached to the UART

273
00:12:07,020 --> 00:12:09,050
and you'd be presented
with a root console.

274
00:12:09,051 --> 00:12:12,830
That's become less less common
as embedded device vendors

275
00:12:12,830 --> 00:12:14,660
have improved their security posture

276
00:12:14,660 --> 00:12:15,939
but it's still common enough

277
00:12:15,940 --> 00:12:18,070
that it's definitely
worth at least checking.

278
00:12:18,070 --> 00:12:22,620
And then I also list
here JTAG/SWD attacking.

279
00:12:22,620 --> 00:12:24,990
That although I listed here at this stage,

280
00:12:24,990 --> 00:12:28,760
JTAG/SWD is really tactical at any time

281
00:12:28,760 --> 00:12:31,270
as soon as the processor is running,

282
00:12:31,270 --> 00:12:32,120
but I'm gonna list it here

283
00:12:32,120 --> 00:12:34,710
because that's where you see it, right?

284
00:12:34,710 --> 00:12:35,840
And you want to attack it.

285
00:12:35,840 --> 00:12:38,210
And she's already on you just
connect to that interface

286
00:12:38,210 --> 00:12:41,840
you try to interrupt the
processor and start reading memory

287
00:12:41,840 --> 00:12:44,470
or register straight from the processor.

288
00:12:44,470 --> 00:12:47,021
That is an attack that also
used to be very common.

289
00:12:47,021 --> 00:12:50,979
But as embedded system design has improved

290
00:12:50,980 --> 00:12:52,197
processes have started to
include the capabilities

291
00:12:52,197 --> 00:12:56,820
to disable this, maybe
they can do a firmware burn

292
00:12:56,820 --> 00:12:58,940
that prevents it from being reenabled,

293
00:12:58,940 --> 00:13:00,954
or it's a retina setting inside the flash

294
00:13:00,954 --> 00:13:03,089
that just disables it.

295
00:13:03,090 --> 00:13:05,757
But that is becoming
very common to disable.

296
00:13:05,757 --> 00:13:09,143
And both those in this
particular case were disabled.

297
00:13:09,144 --> 00:13:13,420
The UART eye could read
output, but I could not.

298
00:13:13,420 --> 00:13:15,370
It would not accept any
inputs so I can press Enter,

299
00:13:15,370 --> 00:13:16,840
I couldn't log in or anything.

300
00:13:16,840 --> 00:13:21,110
And then the JTAG/SWD
was disabled on this chip

301
00:13:21,110 --> 00:13:23,189
So I was not able to interface with that.

302
00:13:23,189 --> 00:13:26,230
Well, I needed to look
higher up at the next level

303
00:13:26,230 --> 00:13:27,725
and that's like the Linux boot process.

304
00:13:27,725 --> 00:13:29,663
Anybody who's familiar
with Linux boot process

305
00:13:29,663 --> 00:13:31,443
this should sound pretty familiar to you

306
00:13:31,443 --> 00:13:34,848
but the Linux Kernel is
going to boot itself up.

307
00:13:34,849 --> 00:13:37,833
And you can influence that
maybe by the parameters

308
00:13:37,833 --> 00:13:39,315
that are passed to the Linux Kernel

309
00:13:39,316 --> 00:13:42,360
or if you can boot it
into like single user mode

310
00:13:42,360 --> 00:13:43,910
maybe there was a shortcut key.

311
00:13:45,410 --> 00:13:47,839
If you can interrupt
that in any sort of way

312
00:13:47,840 --> 00:13:50,082
then you want to be able
to get some of root console

313
00:13:50,082 --> 00:13:52,863
before it gets to its full boot process.

314
00:13:55,160 --> 00:13:57,722
To attack the Kernel
while it's booting though

315
00:13:57,722 --> 00:13:59,434
that requires some kind of input method.

316
00:13:59,434 --> 00:14:03,850
Sometimes the UART TTY
console isn't disabled

317
00:14:03,850 --> 00:14:05,650
until the final run level.

318
00:14:05,650 --> 00:14:07,740
So maybe it's enabled
during the early boot

319
00:14:07,740 --> 00:14:09,780
and you can press a key
to interrupt the boot

320
00:14:09,780 --> 00:14:12,680
and then change things
before it's disabled

321
00:14:13,700 --> 00:14:16,290
when you wanna change the run level.

322
00:14:16,290 --> 00:14:18,469
In this case, the UART was
disabled from the get go.

323
00:14:18,470 --> 00:14:20,500
I could watch the boot process

324
00:14:20,500 --> 00:14:24,260
which allowed me to gain
some kind of information

325
00:14:24,260 --> 00:14:27,910
but nothing, nothing that
helped bring down the system.

326
00:14:27,910 --> 00:14:31,520
Another thing that's worth
mentioning here is glitching.

327
00:14:31,520 --> 00:14:33,555
So if you're not familiar,
glitching is where

328
00:14:33,556 --> 00:14:37,530
you'll attack some of the
exposed data lines on the PCB.

329
00:14:37,530 --> 00:14:41,209
So example is the Linux Kernel is running

330
00:14:41,210 --> 00:14:46,210
on the embedded chip system
but the Ext file systems

331
00:14:46,440 --> 00:14:48,523
on that external eMMC chip, right?

332
00:14:48,523 --> 00:14:52,480
So if you tie maybe the IO line

333
00:14:52,480 --> 00:14:55,677
between the processor and
the eMMC chip to ground,

334
00:14:55,677 --> 00:14:59,280
then when the Kernel tries to load

335
00:14:59,280 --> 00:15:01,089
or mount the external file
system it's gonna fail

336
00:15:01,089 --> 00:15:03,650
because it can't read that chip.

337
00:15:03,650 --> 00:15:04,624
And then your hope here is that the Kernel

338
00:15:04,624 --> 00:15:07,490
will then go into like a safe mode, right?

339
00:15:07,490 --> 00:15:09,800
It will kind of say, "I can't
know the root file system."

340
00:15:09,800 --> 00:15:11,056
And just drop you at a prompt and say,

341
00:15:11,057 --> 00:15:12,300
"what do you want to do now?"

342
00:15:12,300 --> 00:15:16,280
And then at that point
you could end your glitch

343
00:15:16,280 --> 00:15:18,689
on the data line so it can then work

344
00:15:18,690 --> 00:15:22,640
and then manually mount the file system

345
00:15:22,640 --> 00:15:24,360
and then run whatever
attacks you have there

346
00:15:24,360 --> 00:15:26,060
because you've got a console now, right?

347
00:15:26,060 --> 00:15:28,300
You basically glitch it
in a way to prevent it

348
00:15:28,300 --> 00:15:29,420
from doing something and hope

349
00:15:29,420 --> 00:15:32,270
that it falls back in
some kind of safe mode.

350
00:15:32,270 --> 00:15:34,860
That did not against this processor,

351
00:15:34,860 --> 00:15:36,082
the Kernel will quickly go to a panic.

352
00:15:36,082 --> 00:15:38,630
And that's really the
right response, right?

353
00:15:38,630 --> 00:15:41,810
When you're designing embedded systems,

354
00:15:41,810 --> 00:15:45,680
you know the specific hardware,
what you expect to see.

355
00:15:45,680 --> 00:15:47,660
And so any variation from that,

356
00:15:47,660 --> 00:15:50,880
is something's gone wrong
or something's not right.

357
00:15:50,880 --> 00:15:52,939
And you need to panic,
that's the right response.

358
00:15:52,940 --> 00:15:54,810
If it's not how you expect it to be

359
00:15:54,810 --> 00:15:58,130
there's no point in half
booting or trying to recover.

360
00:15:58,130 --> 00:16:01,100
You should just in embedded
system, you can't count

361
00:16:01,100 --> 00:16:04,040
that as a faulty device
and prevent the boot panic.

362
00:16:04,040 --> 00:16:06,480
And that's what they did
here so that's a win for them

363
00:16:06,480 --> 00:16:09,140
which means I need to
go then up another level

364
00:16:09,140 --> 00:16:11,430
and start looking for
other attack methods.

365
00:16:11,430 --> 00:16:14,699
So in embedded systems, there's typically

366
00:16:14,700 --> 00:16:17,220
what's called a second level bootloader

367
00:16:17,220 --> 00:16:20,510
and its whole purpose is
to bring the Linux Kernel

368
00:16:20,510 --> 00:16:22,130
find the Linux Kernel, which is typically

369
00:16:22,130 --> 00:16:23,890
on some kind of external storage or it

370
00:16:23,890 --> 00:16:28,890
which is written as like Ext4,
Ext3, or Ext2 file system.

371
00:16:30,310 --> 00:16:32,219
Copy the Kernel over into memory

372
00:16:32,220 --> 00:16:34,323
and then pass execution to that Kernel.

373
00:16:35,550 --> 00:16:37,740
You boot by far is the most common

374
00:16:37,740 --> 00:16:39,130
second level bootloader I've used.

375
00:16:39,130 --> 00:16:41,630
There are others that's
not worth mentioning.

376
00:16:41,630 --> 00:16:44,610
U-boot pretty much has the
majority of the market share.

377
00:16:44,610 --> 00:16:46,093
U-boot it's very lightweight.

378
00:16:47,510 --> 00:16:51,319
U-boot also has its own
environment variables

379
00:16:51,320 --> 00:16:54,510
that it uses to know where
to find the Linux Kernel,

380
00:16:54,510 --> 00:16:58,140
how to mount the the ext file system

381
00:16:58,140 --> 00:16:59,400
to find the Linux Kernel.

382
00:16:59,400 --> 00:17:00,716
And what parameters do I need to pass

383
00:17:00,716 --> 00:17:02,517
to the Linux Kernel I boot .

384
00:17:03,398 --> 00:17:06,609
By default, U-boot has like
this three-second window

385
00:17:06,609 --> 00:17:07,776
where you can interrupt it and then drop

386
00:17:07,777 --> 00:17:11,329
to a U-boot console
where you can change some

387
00:17:11,329 --> 00:17:12,409
of those settings.

388
00:17:12,410 --> 00:17:13,950
U-boot also have options for like

389
00:17:13,950 --> 00:17:16,849
reading the Ext4 file system.

390
00:17:16,849 --> 00:17:21,849
It has options for downloading
a Kernel from a TFT location.

391
00:17:22,020 --> 00:17:23,839
TFTP excuse me, location.

392
00:17:23,839 --> 00:17:26,292
So it's very versatile
quite a little tool.

393
00:17:27,520 --> 00:17:29,764
But it's also fairly
easy to walk down, right?

394
00:17:29,764 --> 00:17:31,939
You can set the environment variables

395
00:17:31,940 --> 00:17:33,670
to say zero second boot delay

396
00:17:33,670 --> 00:17:35,880
which means there's no
interruption window.

397
00:17:35,880 --> 00:17:38,201
It performs like a CRC on
its environment variables

398
00:17:38,201 --> 00:17:40,942
to tell if there's any been
been any mucking with them,

399
00:17:40,942 --> 00:17:44,650
or if they've been corrupted
or glitchiness attacked them.

400
00:17:44,650 --> 00:17:49,100
So you can secure that to prevent
any attacks at that level.

401
00:17:49,100 --> 00:17:52,850
And then below the
U-boot is they very early

402
00:17:52,850 --> 00:17:54,742
the first stage bootloader.

403
00:17:54,742 --> 00:17:56,639
And this bootloader is very tiny.

404
00:17:56,640 --> 00:18:01,640
It's ROM on the embedded chip itself.

405
00:18:02,480 --> 00:18:04,230
And this is what kicks off initially.

406
00:18:04,230 --> 00:18:06,180
This is where as soon
as the chip's turned on,

407
00:18:06,180 --> 00:18:07,150
it starts here.

408
00:18:07,150 --> 00:18:10,630
And this code is basically
just finds the U-boot Kernel

409
00:18:10,630 --> 00:18:13,800
from wherever it is, or do
you bootloader and jumps

410
00:18:13,800 --> 00:18:15,840
blows into a memory and then jumps to it.

411
00:18:15,840 --> 00:18:17,830
It also may do things
like initialize the chip

412
00:18:17,830 --> 00:18:22,699
maybe initialize any GPIO pins,
you know, start the SPI bus

413
00:18:22,700 --> 00:18:25,010
maybe do some self diagnostics check

414
00:18:25,010 --> 00:18:26,640
before passing that execution

415
00:18:26,640 --> 00:18:28,760
but it's very tiny and it's very small

416
00:18:28,760 --> 00:18:33,090
and it doesn't know how
to read external flash

417
00:18:33,090 --> 00:18:35,629
or it doesn't know how to
read in an Ext4 file system.

418
00:18:35,630 --> 00:18:38,220
That's the point at the U-boot Kernel

419
00:18:38,220 --> 00:18:40,030
is just very small it initially bootstrap

420
00:18:40,030 --> 00:18:41,570
and get things going.

421
00:18:41,570 --> 00:18:43,386
So it will typically
find the U-boot Kernel

422
00:18:43,386 --> 00:18:47,850
which is on an external
flash most of the time.

423
00:18:47,850 --> 00:18:50,370
Most of the time the
embedded system itself

424
00:18:50,370 --> 00:18:52,560
doesn't have enough room to
fit the whole U-boot Kernel

425
00:18:52,560 --> 00:18:53,463
in its own ROM.

426
00:18:53,463 --> 00:18:55,920
So it's gonna look at an external flash

427
00:18:55,920 --> 00:18:58,790
and it can't be the EMC chip

428
00:18:58,790 --> 00:19:01,909
because the first stage
bootloader doesn't know

429
00:19:01,910 --> 00:19:03,820
how to read the Ext4, right?

430
00:19:03,820 --> 00:19:05,370
Has to be kind of a mediary step.

431
00:19:05,370 --> 00:19:08,146
So it's typically a
second little flash chip

432
00:19:08,146 --> 00:19:11,169
where the U-boot Kernel lifts.

433
00:19:11,170 --> 00:19:14,673
And so you can maybe attack
that second flash chip

434
00:19:14,673 --> 00:19:18,930
or replace this bootloader
image on the device itself.

435
00:19:18,930 --> 00:19:19,763
But that's kind of a dangerous attack

436
00:19:19,763 --> 00:19:21,630
because if you mess this up at all,

437
00:19:21,631 --> 00:19:24,840
you then break the device, it
won't boot any sort of form

438
00:19:24,840 --> 00:19:25,879
if you break it at this level

439
00:19:25,880 --> 00:19:27,352
there's no earlier stage to recover

440
00:19:27,352 --> 00:19:30,010
from if you attack at this point.

441
00:19:30,010 --> 00:19:33,083
So typically don't recommend
that, but it is possible.

442
00:19:34,601 --> 00:19:37,165
But so what I was able to do
at this point, like I mentioned

443
00:19:37,165 --> 00:19:42,165
the U-boot Kernel was loaded
on an external flash chip.

444
00:19:42,330 --> 00:19:44,310
And so you see here in this image,

445
00:19:44,310 --> 00:19:47,610
that's the chip where the
U-boot Kernel was located

446
00:19:47,610 --> 00:19:51,290
and we just put these Gator
clips right on that chip

447
00:19:51,290 --> 00:19:55,659
and using an external tool like
a bus pirate or other tools

448
00:19:55,660 --> 00:19:58,060
I usually use the custom
chip to pull this,

449
00:19:58,060 --> 00:20:01,649
but you can pull the exact
contents of that flash off

450
00:20:01,650 --> 00:20:02,623
and then read them.

451
00:20:03,650 --> 00:20:07,380
You can also alter them, but
flash doesn't let you change

452
00:20:07,380 --> 00:20:08,470
like one bite at a time.

453
00:20:08,470 --> 00:20:10,450
To change a flash you
have to erase the page

454
00:20:10,450 --> 00:20:13,080
and then rewrite that
flash, rewrite that page.

455
00:20:13,080 --> 00:20:14,019
So there's a little bit of risk there

456
00:20:14,019 --> 00:20:16,788
of corrupting something,
but it's a lot less risk

457
00:20:16,788 --> 00:20:19,890
than actually trying to refresh the chip.

458
00:20:19,890 --> 00:20:20,873
So I did that.

459
00:20:20,873 --> 00:20:23,500
And on the left side here,

460
00:20:23,500 --> 00:20:26,255
you can see the environment
variables for the U-boot

461
00:20:26,255 --> 00:20:28,710
in that dump from that chip.

462
00:20:28,710 --> 00:20:31,840
And you can see where they've
said the bootdelayed to one.

463
00:20:31,840 --> 00:20:34,800
So all I needed to do was
to change that bootdelay

464
00:20:34,800 --> 00:20:37,254
to five or three or whatever,
something longer than zero.

465
00:20:37,254 --> 00:20:41,379
And then reflash that chip,
and the next time it boots

466
00:20:41,380 --> 00:20:43,930
then they'll give me
that short little window

467
00:20:43,930 --> 00:20:46,460
where I can press a button,
interrupt the U-boot.

468
00:20:46,460 --> 00:20:48,360
And then once I've interrupted the U-boot,

469
00:20:48,360 --> 00:20:50,669
then I can go start either
changing the parameters

470
00:20:50,670 --> 00:20:53,350
that are passed to the Linux
Kernel when it's loaded

471
00:20:53,350 --> 00:20:58,350
or I could even start reading
the ext eMMC chip itself.

472
00:20:58,970 --> 00:21:00,700
And so on the right,
that's what I've done.

473
00:21:00,700 --> 00:21:02,950
I was able to inject that delay.

474
00:21:02,950 --> 00:21:05,990
I could boot to this U-boot console,

475
00:21:05,990 --> 00:21:08,340
and then at the U-boot console,

476
00:21:08,340 --> 00:21:12,370
the command there, I used Ext for load,

477
00:21:12,370 --> 00:21:16,379
that was able to read the Ext shadow file

478
00:21:16,380 --> 00:21:18,450
off of that external drive.

479
00:21:18,450 --> 00:21:20,792
So now I've got the Ext shadow file,

480
00:21:20,792 --> 00:21:23,030
You can see the root hash there.

481
00:21:23,030 --> 00:21:25,460
And my hope was that I
could just crack that hash

482
00:21:25,460 --> 00:21:27,390
and then SSH into the box.

483
00:21:27,390 --> 00:21:30,870
Truth be told I was never
able to crack that hash

484
00:21:30,870 --> 00:21:32,959
but it turns out it doesn't matter.

485
00:21:32,960 --> 00:21:35,883
And I'll tell you why in a little bit.

486
00:21:36,760 --> 00:21:40,750
What I did do though, was
using the same technique.

487
00:21:40,750 --> 00:21:44,240
I dumped the Ext or not the Ext shadow,

488
00:21:44,240 --> 00:21:46,310
but I dumped the, that eecrypt tool.

489
00:21:46,310 --> 00:21:49,970
I dumped that out to
memory in this hex view

490
00:21:49,970 --> 00:21:52,190
and then just use the
little script to turn that

491
00:21:52,190 --> 00:21:53,203
hex view you backed into the
binary, reverse the binary

492
00:21:53,203 --> 00:21:57,379
or, I could have just
ran the binary inside

493
00:21:57,380 --> 00:22:00,070
like a QEMU emulator to use the binary

494
00:22:00,070 --> 00:22:02,520
to decrypt these flashing
images that I stole

495
00:22:02,520 --> 00:22:05,160
on those slides back then a little ways.

496
00:22:05,160 --> 00:22:07,470
So with that, I started
looking at the eecrypt tool

497
00:22:07,470 --> 00:22:10,070
and sure enough, it
was self-contained tool

498
00:22:10,070 --> 00:22:12,633
that was able to decrypt
those from our images.

499
00:22:13,750 --> 00:22:15,600
What I found interesting in there is that

500
00:22:15,600 --> 00:22:18,607
all those images were
encrypted with AES, right?

501
00:22:18,607 --> 00:22:21,500
So there's a shared key that should be

502
00:22:21,500 --> 00:22:22,380
in this binary somewhere,

503
00:22:22,380 --> 00:22:25,650
but the key wasn't embedded in the binary,

504
00:22:25,650 --> 00:22:30,060
instead, they had this routine
which would compute the key

505
00:22:30,060 --> 00:22:32,039
based on these four blocks
or these eight blocks.

506
00:22:32,039 --> 00:22:36,470
So on the left side there's
these eight crypto blocks.

507
00:22:36,470 --> 00:22:40,400
And on the right side
is the routine they used

508
00:22:40,400 --> 00:22:42,572
to generate the SHA256#

509
00:22:42,572 --> 00:22:45,347
which is then used as the AES key.

510
00:22:45,347 --> 00:22:49,540
And you can see here
on this, they basically

511
00:22:49,540 --> 00:22:52,920
grab those blocks and then
hash them in this red order

512
00:22:52,920 --> 00:22:55,240
so that block one, two, three, four,

513
00:22:55,240 --> 00:22:56,750
four, three, two, one

514
00:22:56,750 --> 00:22:58,140
two, three, four, one.

515
00:22:58,140 --> 00:22:59,690
Three, four, one, two.

516
00:22:59,690 --> 00:23:01,590
They just kind of shuffle these blocks

517
00:23:01,590 --> 00:23:03,320
and then generate the key.

518
00:23:03,320 --> 00:23:06,300
And it's really kinda funny
to me that they did this.

519
00:23:06,300 --> 00:23:08,750
I can only speculate as to why

520
00:23:08,750 --> 00:23:11,860
but I believe this is
just my speculation here

521
00:23:11,860 --> 00:23:15,820
that either developers
knew or had some kind

522
00:23:15,820 --> 00:23:19,350
of best practices that
said you don't embed keys

523
00:23:19,350 --> 00:23:20,219
and binaries, right?

524
00:23:20,220 --> 00:23:25,220
Like that's a bad idea to write
the AES key in the binary.

525
00:23:25,490 --> 00:23:29,370
So to get around that they
implemented this nice little

526
00:23:30,370 --> 00:23:34,399
I don't know what you'd
call this data shuffler

527
00:23:34,400 --> 00:23:35,660
to generate the key.

528
00:23:35,660 --> 00:23:37,410
I mean, the end result's the same, right?

529
00:23:37,410 --> 00:23:41,870
I still know the AES key, but
I feel like that this was done

530
00:23:41,870 --> 00:23:44,010
to meet like some checkmark

531
00:23:44,010 --> 00:23:46,300
I didn't code the key in my binary, right?

532
00:23:46,300 --> 00:23:47,133
I was a good boy, I did
the right thing, right?

533
00:23:47,133 --> 00:23:50,500
When in reality, it really
makes no difference.

534
00:23:50,500 --> 00:23:52,720
I still know what the key is anyways.

535
00:23:52,720 --> 00:23:55,051
So with this I was able to decrypt

536
00:23:55,051 --> 00:23:57,360
all those firmware images.

537
00:23:57,360 --> 00:24:00,077
And I want to point out
that all the slides,

538
00:24:00,077 --> 00:24:02,733
what site, what 18 now.

539
00:24:04,230 --> 00:24:05,697
My goal here is to get the firmware image

540
00:24:05,697 --> 00:24:09,139
and they're keeping the firmware

541
00:24:09,140 --> 00:24:10,900
not publicly hosted, at least,

542
00:24:10,900 --> 00:24:13,160
at least not linked to publicly.

543
00:24:13,160 --> 00:24:16,060
And then encrypting it really
gave me a lot more trouble.

544
00:24:16,060 --> 00:24:19,960
I had to do a lot more steps
just to get to that same point

545
00:24:19,960 --> 00:24:21,480
As with other hardware devices,

546
00:24:21,480 --> 00:24:22,980
I can often just go to the website,

547
00:24:22,980 --> 00:24:23,813
find the firmware image

548
00:24:23,813 --> 00:24:25,081
and then start browsing their source code.

549
00:24:25,081 --> 00:24:29,469
So that was a lot of
protections that I had to defeat

550
00:24:29,470 --> 00:24:31,440
to get the same point that a lot of

551
00:24:31,440 --> 00:24:32,479
in the past I've been able
to get to very easily.

552
00:24:32,479 --> 00:24:35,700
So that's kind of a kudos to their design.

553
00:24:35,700 --> 00:24:39,050
But, I typically love to
get the firmware image

554
00:24:39,050 --> 00:24:40,740
because then I can start
looking at the web pages

555
00:24:40,740 --> 00:24:42,580
that they're hosting the
services they're doing

556
00:24:42,580 --> 00:24:44,439
and look for vulnerabilities in those.

557
00:24:44,440 --> 00:24:46,630
And sure enough, once I was able

558
00:24:46,630 --> 00:24:48,480
to get the firmware decrypted

559
00:24:48,480 --> 00:24:50,710
it didn't take me maybe more than an hour

560
00:24:50,710 --> 00:24:55,130
or two to find my first CVE on the box.

561
00:24:55,130 --> 00:24:57,121
This is one of their
scripts for upgrading.

562
00:24:57,121 --> 00:25:00,060
And you can see on line 92

563
00:25:00,060 --> 00:25:02,889
that it calls this
upgrade start pro script,

564
00:25:02,890 --> 00:25:04,610
and then it passes some arguments to it

565
00:25:04,610 --> 00:25:07,429
and on line 90, you
can see those arguments

566
00:25:07,430 --> 00:25:10,160
come from command line parameter force.

567
00:25:10,160 --> 00:25:13,490
So basically whenever I pass on the URL

568
00:25:13,490 --> 00:25:15,466
as the force query
parameter it gets parsed

569
00:25:15,466 --> 00:25:17,857
to throw on the fan line.

570
00:25:17,857 --> 00:25:20,119
There's no checking, so
I can do an ampersand,

571
00:25:20,119 --> 00:25:22,565
I can do pie, I can do
a semi-colon whatever

572
00:25:22,566 --> 00:25:25,430
and I can execute
whatever commands I want.

573
00:25:25,430 --> 00:25:26,960
So this is the first bug I found

574
00:25:26,960 --> 00:25:28,870
and this is the bug that ultimately led

575
00:25:28,870 --> 00:25:32,010
to me having code execution on the box.

576
00:25:32,010 --> 00:25:33,368
So I got code execution on the box.

577
00:25:33,368 --> 00:25:35,970
At this point, I have a semi command

578
00:25:35,970 --> 00:25:37,294
and I want to clean that up.

579
00:25:37,294 --> 00:25:40,530
First thing I wanted to do
was change the root password

580
00:25:40,530 --> 00:25:41,363
so I can SSH into the box

581
00:25:41,363 --> 00:25:44,640
and then play around a lot more freely.

582
00:25:44,640 --> 00:25:46,201
I changed the password to the root user

583
00:25:46,201 --> 00:25:49,500
and then attempted to
SSH in, and SSH failed.

584
00:25:49,500 --> 00:25:50,720
And I was really baffled by this.

585
00:25:50,720 --> 00:25:52,590
Like, I wouldn't check like sure enough

586
00:25:52,590 --> 00:25:53,674
the Ext shadow file was changed

587
00:25:53,674 --> 00:25:56,190
like the password hash is different

588
00:25:56,190 --> 00:25:58,768
but I cannot log in as
root for some reason.

589
00:25:58,768 --> 00:26:01,310
I tried just logging in
locally using that password

590
00:26:01,310 --> 00:26:02,440
and it failed again.

591
00:26:02,440 --> 00:26:03,940
So I knew it wasn't an SSH issue.

592
00:26:03,940 --> 00:26:06,610
It's something weird about the password.

593
00:26:06,610 --> 00:26:08,705
Like this made me start
chasing a few different options

594
00:26:08,705 --> 00:26:11,169
to start looking at the firmware image

595
00:26:11,170 --> 00:26:12,198
to see what was going on,

596
00:26:12,198 --> 00:26:15,020
how the authentication was being handled.

597
00:26:15,020 --> 00:26:17,120
And it turns out that they had implemented

598
00:26:17,999 --> 00:26:18,832
their own authentication module

599
00:26:18,832 --> 00:26:20,880
their Pam authentication module.

600
00:26:20,880 --> 00:26:23,230
So if you're not familiar
Pam is what handles

601
00:26:23,230 --> 00:26:25,197
all authentication on a Linux Kernel.

602
00:26:25,197 --> 00:26:27,379
And you can write your own
modules to interface with that.

603
00:26:27,380 --> 00:26:29,500
And they had done this
which will intercept

604
00:26:29,500 --> 00:26:32,700
all authentication
attempts and then run it,

605
00:26:32,700 --> 00:26:34,288
and then they would check
it against its own system

606
00:26:34,288 --> 00:26:35,900
and then return there.

607
00:26:35,900 --> 00:26:39,680
So it never actually used
what was in as a shadow.

608
00:26:39,680 --> 00:26:42,990
Instead it had this own
customer routine that was custom

609
00:26:42,990 --> 00:26:45,627
based on the type of
authentication that was being done.

610
00:26:45,627 --> 00:26:49,552
So on the left, you see here
what type of authentication

611
00:26:49,552 --> 00:26:51,850
it's intercepting, and then on the right,

612
00:26:51,850 --> 00:26:53,370
is one of the routines that it uses.

613
00:26:53,370 --> 00:26:57,346
So again, you see this get
password for serial number.

614
00:26:57,346 --> 00:26:59,900
Basically what that function is doing

615
00:26:59,900 --> 00:27:02,620
is it builds the string that's like

616
00:27:02,620 --> 00:27:07,620
username@enphaseenergy.com#
serial number of the device

617
00:27:07,900 --> 00:27:10,370
computes the MD5 hash of that,

618
00:27:10,370 --> 00:27:13,020
and that is what is it
expected for the password

619
00:27:13,020 --> 00:27:15,110
so that's the root user password.

620
00:27:15,110 --> 00:27:19,129
The hex digest of that MD5 hash.

621
00:27:19,130 --> 00:27:23,300
And that's bad that's
really bad in some ways.

622
00:27:23,300 --> 00:27:25,050
And then let me tell you why.

623
00:27:25,050 --> 00:27:27,480
First off you cannot
change the password, right?

624
00:27:27,480 --> 00:27:29,549
Like I attempted to change
the root user password.

625
00:27:29,549 --> 00:27:32,010
It doesn't matter what
I try to change that to

626
00:27:32,010 --> 00:27:34,298
that password is
hard-coded for that device.

627
00:27:34,298 --> 00:27:36,610
There's no way that that can be changed

628
00:27:36,610 --> 00:27:39,280
without completely disabling this module

629
00:27:39,280 --> 00:27:41,710
which is gonna break a number
of these other services

630
00:27:41,710 --> 00:27:44,910
because this module is responsible for

631
00:27:44,910 --> 00:27:47,110
not only SSH authentication,

632
00:27:47,110 --> 00:27:48,812
but it's also any web authentication.

633
00:27:48,813 --> 00:27:51,453
The mobile application authentication,

634
00:27:51,453 --> 00:27:54,020
the installer application authentication,

635
00:27:54,020 --> 00:27:57,215
all authentication that are
pertinent to this device

636
00:27:57,215 --> 00:27:59,629
are intercepted by this module.

637
00:27:59,630 --> 00:28:02,360
And none of those
passwords can be changed.

638
00:28:02,360 --> 00:28:04,824
Furthermore, each of those
passwords can be calculated.

639
00:28:04,825 --> 00:28:08,299
Now that I know how it is calculated,

640
00:28:08,299 --> 00:28:10,629
all I really needed to
know to get the password

641
00:28:10,630 --> 00:28:12,380
is the username I'm trying to log in with

642
00:28:12,380 --> 00:28:13,449
and the serial number of the device.

643
00:28:13,449 --> 00:28:17,760
So because of that three different CVEs

644
00:28:17,760 --> 00:28:22,070
came out of that one
really bad hardware design.

645
00:28:22,070 --> 00:28:26,677
And I had to look at this
and one of the big questions

646
00:28:26,677 --> 00:28:29,111
that I ask myself here is like, why?

647
00:28:29,112 --> 00:28:32,000
Why did they go this route, right?

648
00:28:32,000 --> 00:28:34,990
Why do you do this to intercept
the the authentication

649
00:28:34,990 --> 00:28:37,028
and go the separate route?

650
00:28:37,028 --> 00:28:39,899
And again, I can't
speak for the developers

651
00:28:39,899 --> 00:28:43,004
but here's what it seems to me, right?

652
00:28:43,005 --> 00:28:46,900
That they were trying to avoid the issue

653
00:28:46,900 --> 00:28:49,391
of having one password
for all their devices.

654
00:28:49,391 --> 00:28:52,410
That would be another bad security issue

655
00:28:52,410 --> 00:28:53,570
is to have one password that worked

656
00:28:53,570 --> 00:28:55,200
against every device everywhere.

657
00:28:55,200 --> 00:28:57,816
So they implemented this
Pam authentication module

658
00:28:57,816 --> 00:28:59,819
that has a custom password for each device

659
00:28:59,819 --> 00:29:02,280
based on that device's serial number.

660
00:29:02,280 --> 00:29:05,330
Which I'm sure they felt was a win,

661
00:29:05,330 --> 00:29:08,740
but it has all these
other downsides, right?

662
00:29:08,740 --> 00:29:10,930
It's just like in that picture

663
00:29:10,930 --> 00:29:12,700
they implemented the security thing,

664
00:29:12,700 --> 00:29:16,750
but didn't really consider the
side effects of that, right?

665
00:29:16,750 --> 00:29:18,500
They met the checklist,

666
00:29:18,500 --> 00:29:20,500
I don't have a hard-coded
password for this.

667
00:29:20,500 --> 00:29:23,400
all devices, no, one
password can rule them all

668
00:29:23,400 --> 00:29:26,770
but instead they have an
easily calculated password

669
00:29:26,770 --> 00:29:28,253
for each device.

670
00:29:30,280 --> 00:29:32,690
This is a problem.

671
00:29:32,690 --> 00:29:36,220
Not, as the way that this
company implemented this

672
00:29:36,220 --> 00:29:37,820
was very unique to them.

673
00:29:37,820 --> 00:29:42,820
But we do see password
management or security management

674
00:29:43,210 --> 00:29:46,830
or custom crypto done
in some form or another,

675
00:29:46,830 --> 00:29:47,663
on a lot of devices.

676
00:29:47,663 --> 00:29:51,903
It never, never, it very
rarely looks the same, right?

677
00:29:51,903 --> 00:29:55,080
Like everybody comes up with
their own custom solutions

678
00:29:55,080 --> 00:29:56,185
to this problem

679
00:29:56,185 --> 00:30:01,039
when I don't know why we don't just follow

680
00:30:01,039 --> 00:30:02,562
best practices here.

681
00:30:03,730 --> 00:30:04,851
At some point, somebody
should have thought

682
00:30:04,851 --> 00:30:09,580
maybe we're not the first one
to have this issue, right?

683
00:30:09,580 --> 00:30:13,939
So getting back up getting
off my soap box there,

684
00:30:13,940 --> 00:30:16,810
continuing on, really all I
needed to generate the password

685
00:30:16,810 --> 00:30:20,498
to compromise one of these
devices is the serial number.

686
00:30:20,498 --> 00:30:22,733
That serial number is what is used,

687
00:30:22,733 --> 00:30:26,546
it's a secure key material
for generating their key.

688
00:30:26,546 --> 00:30:30,210
The vendor didn't do so well

689
00:30:30,210 --> 00:30:32,170
at protecting that serial number.

690
00:30:32,170 --> 00:30:34,970
The serial number can be
found in two different places

691
00:30:34,970 --> 00:30:36,680
on the PCB itself.

692
00:30:36,680 --> 00:30:38,800
Both in a QR code that I've scribbled out

693
00:30:38,800 --> 00:30:43,370
or a serial number is just
printed on sticker up there.

694
00:30:43,370 --> 00:30:45,887
It's also on the back of
the interface box itself.

695
00:30:45,887 --> 00:30:47,850
If that's not enough, it's also printed

696
00:30:47,850 --> 00:30:50,469
on the bottom of the interface box itself.

697
00:30:50,470 --> 00:30:52,090
In fact, on their website,
they have pictures

698
00:30:52,090 --> 00:30:54,300
of the device showing the serial number

699
00:30:54,300 --> 00:30:56,080
of the device on their website.

700
00:30:56,080 --> 00:30:59,562
It's on the inside of the service panel.

701
00:30:59,563 --> 00:31:01,600
If that's too hard to find.

702
00:31:01,600 --> 00:31:02,773
And then, it's also
available on the outside

703
00:31:02,773 --> 00:31:05,858
of the shipping box.

704
00:31:05,858 --> 00:31:08,508
On this XML page that's
publicly accessible

705
00:31:08,508 --> 00:31:09,914
with no authentication,

706
00:31:09,914 --> 00:31:13,502
on the homepage with no authentication.

707
00:31:13,502 --> 00:31:16,139
And then finally, just
in case you missed it

708
00:31:16,140 --> 00:31:20,022
all the other places, they
also put it in the title bar.

709
00:31:20,022 --> 00:31:24,206
So all of these are extremely
easy to find the serial number

710
00:31:24,207 --> 00:31:25,825
for any device.

711
00:31:25,825 --> 00:31:29,835
Many of these devices have the
one I bought didn't have this

712
00:31:29,835 --> 00:31:33,144
but a many of these devices, excuse me,

713
00:31:33,144 --> 00:31:37,010
have cell phone module or
cellular network modules.

714
00:31:37,010 --> 00:31:40,620
So some of them are directly
accessible on the internet.

715
00:31:40,620 --> 00:31:42,410
You can find many of
these devices on showdown

716
00:31:42,411 --> 00:31:45,391
and easy enough to find the serial number

717
00:31:45,391 --> 00:31:46,224
and then you'd have the
key to the device, right?

718
00:31:46,224 --> 00:31:51,106
So this is a very wormable
bug in which lends itself

719
00:31:51,106 --> 00:31:54,952
to being built into, I don't know,

720
00:31:54,952 --> 00:31:58,230
whatever malware of the day

721
00:31:58,230 --> 00:32:00,754
or bought out of the
days out there, right?

722
00:32:00,754 --> 00:32:03,570
So what are we going to do
with this device, right like,

723
00:32:03,570 --> 00:32:08,570
man, maybe it'll end up in
some botnet or DDoS tool

724
00:32:09,870 --> 00:32:10,862
or whatever, right?

725
00:32:10,863 --> 00:32:13,932
Like that's the typical thing
you see of embedded devices

726
00:32:13,932 --> 00:32:16,830
but there's some other options here

727
00:32:16,830 --> 00:32:18,850
that I there that I want to run past you

728
00:32:18,850 --> 00:32:21,870
and just make you think
about with solar panels.

729
00:32:21,870 --> 00:32:23,969
First off, for this particular
vendor, there was one thing

730
00:32:23,970 --> 00:32:25,992
that kinda caught my eye
that is maybe interesting.

731
00:32:25,992 --> 00:32:28,045
On their page, they have this
option to open a connection.

732
00:32:28,045 --> 00:32:30,711
And when you click this
button, what it does is

733
00:32:30,711 --> 00:32:34,671
the device has a generated
open VPN certificate

734
00:32:34,671 --> 00:32:37,616
that it will then use to
establish a VPN tunnel

735
00:32:37,616 --> 00:32:42,616
back into Enphase energy's
office in California.

736
00:32:43,460 --> 00:32:46,128
I never played with this tunnel

737
00:32:46,128 --> 00:32:51,128
but you could take that
key, pull it off the device

738
00:32:51,135 --> 00:32:56,135
and then establish your own
VPN tunnel into their network.

739
00:32:56,600 --> 00:32:58,370
I don't know what kind of access it is.

740
00:32:58,370 --> 00:32:59,919
Maybe hopefully it's locked down

741
00:32:59,920 --> 00:33:02,630
so that you can't go (indistinct)
their internal network.

742
00:33:02,630 --> 00:33:05,350
But what it does provide,
is when you click this

743
00:33:05,350 --> 00:33:09,179
it does provide them a VPN
tunnel into your network.

744
00:33:09,180 --> 00:33:10,650
So that's kind of a big security risk.

745
00:33:10,650 --> 00:33:14,360
In my mind, I know a lot
of particular corporations

746
00:33:14,360 --> 00:33:16,439
would have issue having
that kind of feature

747
00:33:16,440 --> 00:33:20,873
where a vendor can have a VPN
tunnel enter their network.

748
00:33:20,873 --> 00:33:23,800
So that was one open issue
I never really chased,

749
00:33:23,800 --> 00:33:26,419
but the big concern to me,

750
00:33:26,420 --> 00:33:29,566
when I was researching the device is this.

751
00:33:29,566 --> 00:33:33,840
Is that about solar
renewable energy credits.

752
00:33:33,840 --> 00:33:36,379
So what those are, is that in some States

753
00:33:36,380 --> 00:33:39,910
you basically can earn credits
for the amount of energy

754
00:33:39,910 --> 00:33:42,500
you generate, that's clean energy, right?

755
00:33:42,500 --> 00:33:43,937
And then these credits are tradable.

756
00:33:43,937 --> 00:33:47,463
You can sell them to other
corporations that need

757
00:33:47,463 --> 00:33:49,591
to meet a certain clean
energy standard, right?

758
00:33:49,592 --> 00:33:54,592
So basically if you're
able to fool the system

759
00:33:56,330 --> 00:33:59,550
in how much energy you're solar generating

760
00:33:59,550 --> 00:34:02,960
you're basically printing
your own money at that point.

761
00:34:02,960 --> 00:34:05,260
So I took a look at this.

762
00:34:05,260 --> 00:34:07,751
This is their cloud component.

763
00:34:07,751 --> 00:34:11,070
And here you can see that I have

764
00:34:11,070 --> 00:34:14,900
suddenly started producing
900 kilowatts of power

765
00:34:14,900 --> 00:34:18,462
and their system's quite
happy with that actually.

766
00:34:20,210 --> 00:34:22,469
So here it is, this is where the title

767
00:34:22,469 --> 00:34:23,969
of the talk comes from, right?

768
00:34:24,830 --> 00:34:27,313
If you're not familiar,
this is power (indistinct).

769
00:34:27,313 --> 00:34:28,179
I think it was about,
I don't know for sure.

770
00:34:28,179 --> 00:34:30,620
So you don't work on that, but yeah

771
00:34:30,620 --> 00:34:33,319
you can just generate like your own power.

772
00:34:33,320 --> 00:34:36,889
You can edit the device
to report how much power

773
00:34:36,889 --> 00:34:41,029
you generate, but that's
not a lot of power.

774
00:34:41,030 --> 00:34:42,190
Why stop there?

775
00:34:42,190 --> 00:34:43,969
Let's generate more power, right?

776
00:34:43,969 --> 00:34:46,299
121 gigawatts.

777
00:34:46,300 --> 00:34:47,656
Now I never signed up with my account

778
00:34:47,656 --> 00:34:50,860
for the solar energy credits.

779
00:34:50,860 --> 00:34:53,350
So I didn't actually get any credits

780
00:34:53,350 --> 00:34:56,554
but the system happily reported
how much I was generating.

781
00:34:56,554 --> 00:34:57,387
And I would like to hope

782
00:34:57,387 --> 00:35:02,040
that they have some
safeguards in place to prevent

783
00:35:02,040 --> 00:35:03,930
or at least to notice the
anomaly of somebody's home

784
00:35:03,930 --> 00:35:07,663
solar panel system
generating 1.21 gigawatts

785
00:35:07,664 --> 00:35:11,350
and shutting it down, or
at least not cutting me

786
00:35:11,350 --> 00:35:12,380
that many credits.

787
00:35:12,380 --> 00:35:16,921
Then I could go trade to some
vendor for lots of money.

788
00:35:16,921 --> 00:35:17,870
It's kind of a huge deal

789
00:35:17,871 --> 00:35:22,871
or a big question that
possibly we need to look

790
00:35:23,365 --> 00:35:24,198
at with all solar vendors, right?

791
00:35:24,198 --> 00:35:26,634
Like this is a way that vendors

792
00:35:26,634 --> 00:35:29,310
that attackers or hackers could possibly

793
00:35:29,310 --> 00:35:32,533
generate their own money,
laundering possibly.

794
00:35:34,607 --> 00:35:36,125
So start kind of fast, I fit it all in.

795
00:35:36,125 --> 00:35:38,630
If you have questions, please chat,

796
00:35:38,630 --> 00:35:40,280
put them in the chat and
I'd love to answer them.

797
00:35:40,280 --> 00:35:43,560
But as the takeaways
here a better security

798
00:35:43,560 --> 00:35:44,680
is definitely getting better,

799
00:35:44,680 --> 00:35:47,410
a lot of the easy wins
aren't there anymore.

800
00:35:47,410 --> 00:35:48,759
But we still have other ways to go.

801
00:35:48,760 --> 00:35:51,295
There's still a lot of
attacks that can be made,

802
00:35:51,295 --> 00:35:53,680
like hardware attacks
are being more shutdown.

803
00:35:53,680 --> 00:35:57,200
JTAG, UART access are being blocked.

804
00:35:57,200 --> 00:35:58,618
Glitchiness kit is still there though,

805
00:35:58,618 --> 00:36:00,380
so we need to keep that in mind

806
00:36:00,380 --> 00:36:03,182
to always fail back to fail safe,

807
00:36:03,182 --> 00:36:06,332
not fall open, excuse me.

808
00:36:07,640 --> 00:36:09,497
And I can't repeat this
enough, but I don't,

809
00:36:09,497 --> 00:36:12,240
for some reason it just
doesn't seem to land.

810
00:36:12,240 --> 00:36:14,658
Never, never implement
your own crypto routines.

811
00:36:14,658 --> 00:36:17,670
If you've got a problem that has to do

812
00:36:17,670 --> 00:36:20,610
with password management or cryptography

813
00:36:20,610 --> 00:36:22,686
you're probably not the first
person to have that problem.

814
00:36:22,686 --> 00:36:25,020
And I'd suggest doing a little research

815
00:36:25,020 --> 00:36:26,370
and asking somebody else

816
00:36:26,370 --> 00:36:27,781
what do you suggest we should do here

817
00:36:27,781 --> 00:36:29,817
rather than come up
with your own solution.

818
00:36:29,817 --> 00:36:32,370
They rarely work out well.

819
00:36:32,370 --> 00:36:34,799
And then just one more time reiterating

820
00:36:34,800 --> 00:36:37,786
how much encrypting, signing
and preventing access

821
00:36:37,786 --> 00:36:42,603
to your firmware image goes to
keeping your devices secure.

822
00:36:44,320 --> 00:36:46,110
With that, I'll close up.

823
00:36:46,110 --> 00:36:48,670
If you have ideas or things
you want us to look at

824
00:36:48,670 --> 00:36:50,550
we do this kind of thing for our day job.

825
00:36:50,550 --> 00:36:52,511
I love taking apart devices and IoT stuff

826
00:36:52,511 --> 00:36:54,360
and embedded systems.

827
00:36:54,360 --> 00:36:56,221
So a hit us up, if you have
some questions or ideas,

828
00:36:56,221 --> 00:36:58,340
that's my Twitter handle.

829
00:36:58,340 --> 00:37:00,922
That's my email address
and that's our website.

830
00:37:00,922 --> 00:37:01,790
With that, thank you guys for your time.

831
00:37:01,790 --> 00:37:04,583
Thank you guys for listening
and I hope you have a good RSA.

