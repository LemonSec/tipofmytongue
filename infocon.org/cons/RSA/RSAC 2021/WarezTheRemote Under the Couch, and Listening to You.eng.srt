1
00:00:02,350 --> 00:00:03,451
- Hi everyone.

2
00:00:03,451 --> 00:00:05,960
My name is Ofri.

3
00:00:05,960 --> 00:00:08,020
Here with me is JJ.

4
00:00:08,020 --> 00:00:11,899
And we really appreciate
you joining our session.

5
00:00:11,900 --> 00:00:15,660
We are very excited to,
well, virtually be here

6
00:00:15,660 --> 00:00:19,823
with you today, never
quite get used to this.

7
00:00:21,000 --> 00:00:24,620
We're going to share the details
of an exploit we developed

8
00:00:24,620 --> 00:00:27,880
for remote controls, named WarezTheRemote

9
00:00:30,070 --> 00:00:31,420
it's a little bit technical

10
00:00:31,420 --> 00:00:32,940
but we promise to do our best

11
00:00:32,940 --> 00:00:35,263
to make it as painless as possible.

12
00:00:36,560 --> 00:00:39,700
Maybe a few words about
us before we begin.

13
00:00:39,700 --> 00:00:41,330
We come from Guardicore labs,

14
00:00:41,330 --> 00:00:44,150
the research arm of Guardicore,

15
00:00:44,150 --> 00:00:46,089
which is a segmentation company.

16
00:00:46,090 --> 00:00:49,513
That's disrupting the
legacy firewall market.

17
00:00:50,740 --> 00:00:52,470
So not all of our research

18
00:00:52,470 --> 00:00:55,259
is directly related to firewalls though.

19
00:00:55,259 --> 00:00:58,678
Our work also includes the discovery of

20
00:00:58,678 --> 00:01:00,930
maybe you heard about the Fritz frog,

21
00:01:00,930 --> 00:01:03,476
a peer to peer botnet we discovered.

22
00:01:03,476 --> 00:01:08,476
We released the infection
monkey tool and more

23
00:01:09,290 --> 00:01:13,830
and you can read all
about this in our blog.

24
00:01:13,830 --> 00:01:16,023
So let's get started.

25
00:01:18,962 --> 00:01:21,430
Okay. So we are going to be talking

26
00:01:21,430 --> 00:01:24,450
about the XR11 voice remote

27
00:01:24,450 --> 00:01:29,450
which typically comes with
the Comcast X1 cable box.

28
00:01:29,920 --> 00:01:32,980
And these are both very common items.

29
00:01:32,980 --> 00:01:37,520
Our listeners in the US have
probably run into these before.

30
00:01:37,520 --> 00:01:42,520
These remotes are very,
very widespread at 2017.

31
00:01:42,800 --> 00:01:46,270
There were, I think, more
than 18 million of these

32
00:01:46,270 --> 00:01:48,950
out there, which basically means

33
00:01:48,950 --> 00:01:51,350
they are one of the most common

34
00:01:51,350 --> 00:01:53,303
TV remotes in the world probably.

35
00:01:55,024 --> 00:01:57,857
Now the XR11 is a normal TV remote

36
00:01:59,850 --> 00:02:02,699
with an extra functionality
that allows you

37
00:02:02,700 --> 00:02:05,160
to give voice commands into the remote.

38
00:02:05,160 --> 00:02:09,669
So you press a blue button
on the remote say, mm

39
00:02:09,669 --> 00:02:11,730
I want to see the cooking channel.

40
00:02:11,730 --> 00:02:13,630
And the TV does that.

41
00:02:13,630 --> 00:02:16,630
And now most TV remotes
communicate with the TV

42
00:02:16,630 --> 00:02:19,510
using IR frequency, infrared.

43
00:02:19,510 --> 00:02:24,198
And IR is a short range
mode of communication.

44
00:02:24,199 --> 00:02:29,199
And that requires direct line
of sight with the television.

45
00:02:29,210 --> 00:02:34,210
Now this remote, this specific
remote uses RF frequencies

46
00:02:34,470 --> 00:02:39,470
Radio Frequencies, which can
cover much larger distances.

47
00:02:39,980 --> 00:02:42,760
And it doesn't require line of sight.

48
00:02:42,760 --> 00:02:46,903
Now, the combination of a
microphone in the remote

49
00:02:46,903 --> 00:02:50,620
with the reduction of the
line of sight limitation,

50
00:02:50,620 --> 00:02:55,620
or in other words, the much
longer distance communication

51
00:02:55,860 --> 00:03:00,093
option is very interesting
from a security perspective.

52
00:03:01,580 --> 00:03:06,280
I mean, what if we turn this into actually

53
00:03:06,280 --> 00:03:10,710
a listening device, the RF means
we could pull off an attack

54
00:03:10,710 --> 00:03:12,967
from a distance and the voice control

55
00:03:12,967 --> 00:03:16,050
is something we could
abuse to record audio

56
00:03:16,050 --> 00:03:17,713
for anyone near the remote.

57
00:03:18,760 --> 00:03:22,799
But maybe the question is that
there now comes up to mind

58
00:03:22,800 --> 00:03:25,000
is how do we actually hack a remote

59
00:03:26,490 --> 00:03:28,450
- When you go about hacking
something like this?

60
00:03:28,450 --> 00:03:31,859
The most obvious thing to
do is to just break it open

61
00:03:31,860 --> 00:03:33,190
and see what's inside.

62
00:03:33,190 --> 00:03:36,300
It's usually the fastest
way to get a big picture.

63
00:03:36,300 --> 00:03:38,483
Look at whatever you're working with.

64
00:03:40,130 --> 00:03:42,280
If you take a close
look at the circuit here

65
00:03:42,280 --> 00:03:44,490
you might not identify a ton of stuff

66
00:03:44,490 --> 00:03:45,990
but basically what you're looking at

67
00:03:45,990 --> 00:03:48,110
is a very simple computer.

68
00:03:48,110 --> 00:03:50,290
There's a little processor

69
00:03:50,290 --> 00:03:54,140
there's a keyboard that's
connected off on the right

70
00:03:54,140 --> 00:03:56,570
and there's a little light bulb here.

71
00:03:56,570 --> 00:03:59,769
So like on this remote, when
you hit the record button

72
00:03:59,769 --> 00:04:03,490
for voice commands, that
little LED lights up in blue

73
00:04:03,490 --> 00:04:05,973
other buttons will make
it go green or red.

74
00:04:08,170 --> 00:04:10,609
And just by looking at the open board

75
00:04:10,610 --> 00:04:11,670
you can get a basic idea

76
00:04:11,670 --> 00:04:13,850
of how these things are interconnected.

77
00:04:13,850 --> 00:04:15,370
And this is important to us

78
00:04:15,370 --> 00:04:18,720
because one of the first
questions we have to ask ourselves

79
00:04:18,720 --> 00:04:20,579
if we want to hack the microphone

80
00:04:20,579 --> 00:04:22,919
is whether the microphone
is physically connected

81
00:04:22,920 --> 00:04:25,660
to the keyboard, right?

82
00:04:25,660 --> 00:04:29,070
If mechanically pressing the record button

83
00:04:29,070 --> 00:04:30,480
turns on the microphone

84
00:04:31,510 --> 00:04:35,530
that is that there's a circuit
breaker between the keyboard

85
00:04:35,530 --> 00:04:38,190
between the microphone button and the LED.

86
00:04:38,190 --> 00:04:40,650
Then there won't be any way
to hack the microphone, right?

87
00:04:40,650 --> 00:04:42,729
There won't be any electricity to it

88
00:04:42,730 --> 00:04:45,573
unless anyone is physically
holding the button.

89
00:04:47,570 --> 00:04:51,380
But if you actually follow
the wiring on this board

90
00:04:51,380 --> 00:04:54,180
you can see that the microphone
isn't directly connected

91
00:04:54,180 --> 00:04:55,804
to the keyboard.

92
00:04:55,804 --> 00:04:58,960
It connects to the processor,
which is very good news

93
00:04:58,960 --> 00:05:02,599
as we're concerned, because
that means that the processor

94
00:05:02,600 --> 00:05:04,840
or the little computer inside is in charge

95
00:05:04,840 --> 00:05:09,090
of telling the microphone when
to record and when not to.

96
00:05:09,090 --> 00:05:12,619
So from our point of view, if
we can control the processor

97
00:05:12,620 --> 00:05:15,063
we should be able to
take over the microphone.

98
00:05:16,467 --> 00:05:19,090
So just by breaking this open

99
00:05:19,090 --> 00:05:22,277
we got the answer to
our very first question.

100
00:05:22,278 --> 00:05:23,930
Now that we know

101
00:05:23,930 --> 00:05:26,720
that the microphone is
controlled by the processor

102
00:05:26,720 --> 00:05:27,660
we need to figure out

103
00:05:27,660 --> 00:05:29,860
how to take control of
the processor though.

104
00:05:30,930 --> 00:05:33,940
If you take a close look
at the processor chip here

105
00:05:33,940 --> 00:05:36,860
you can see that the model number on it.

106
00:05:36,860 --> 00:05:39,810
It indicates, you know, which
make this as in our case

107
00:05:39,810 --> 00:05:42,580
it's a CC2530 chip

108
00:05:42,580 --> 00:05:45,272
which is manufactured
by Texas Instruments.

109
00:05:47,830 --> 00:05:50,969
If you check out Texas Instruments website

110
00:05:50,970 --> 00:05:55,060
you can read up on the
CC2530 from its data sheet

111
00:05:55,060 --> 00:05:58,340
which indicates that this
chip is used for all sorts

112
00:05:58,340 --> 00:06:01,349
of low power IOT type applications.

113
00:06:01,350 --> 00:06:04,923
They even mentioned
remote control systems.

114
00:06:06,610 --> 00:06:09,880
They also mentioned that
they have code samples.

115
00:06:09,880 --> 00:06:10,930
They have code samples

116
00:06:10,930 --> 00:06:14,190
on the Texas Instruments
site for people interested

117
00:06:14,190 --> 00:06:17,467
in developing their own
remote control applications

118
00:06:17,467 --> 00:06:18,710
instead of, you know

119
00:06:18,710 --> 00:06:21,430
needing to write them from the ground up.

120
00:06:21,430 --> 00:06:24,260
The samples are fantastic
as far as we're concerned

121
00:06:24,260 --> 00:06:26,340
because they can help us get our bearings.

122
00:06:26,340 --> 00:06:28,750
When we start reverse
engineering the firmware

123
00:06:28,750 --> 00:06:32,420
on our remote, it's more than likely

124
00:06:32,420 --> 00:06:35,610
that the remote's firmware will
be at least partially based

125
00:06:35,610 --> 00:06:37,260
on these code samples.

126
00:06:37,260 --> 00:06:39,230
The samples actually recommend, you know,

127
00:06:39,230 --> 00:06:40,870
working off of them

128
00:06:40,870 --> 00:06:43,760
when you write your own
remote control firmware.

129
00:06:43,760 --> 00:06:48,760
So that's great for us, which
takes us to the firmware.

130
00:06:48,915 --> 00:06:53,640
The firmware is the remote's
bare bones operating system.

131
00:06:53,640 --> 00:06:56,210
It tells it's basically
the entire software end

132
00:06:56,210 --> 00:06:57,043
of the remote.

133
00:06:59,070 --> 00:07:01,849
You'll remember that the XR11 remote

134
00:07:01,850 --> 00:07:03,860
it comes with an X1 cable box.

135
00:07:03,860 --> 00:07:06,360
The box, if you look around on the box,

136
00:07:06,360 --> 00:07:09,160
you'll find it has a copy
of the remote's firmware,

137
00:07:09,160 --> 00:07:13,530
just as a file which sounds
like something we can work with.

138
00:07:13,530 --> 00:07:15,700
But if you actually look at the files

139
00:07:15,700 --> 00:07:20,700
you'll see it's about, it's
124 kilobytes of pure binary,

140
00:07:21,351 --> 00:07:26,351
you know, no strings, no
symbols just pure op codes,

141
00:07:26,720 --> 00:07:29,457
pure 8051 architecture opcodes

142
00:07:30,410 --> 00:07:33,180
which is basically a
long list of instructions

143
00:07:33,180 --> 00:07:36,480
that tell the processor to
behave at any given moment.

144
00:07:36,480 --> 00:07:39,880
So there are about 50,000
of these instructions

145
00:07:39,880 --> 00:07:43,210
and that's way too many to
go over by hands, you know

146
00:07:43,210 --> 00:07:47,680
and try and read the
firmware one at a time.

147
00:07:47,680 --> 00:07:49,731
What we need is a
foothold that will tell us

148
00:07:49,731 --> 00:07:52,563
where to start reverse engineering from.

149
00:07:55,870 --> 00:07:59,340
Now to find that foothold
first we'd need to understand

150
00:07:59,340 --> 00:08:02,530
what's interesting to
us within the firmware.

151
00:08:02,530 --> 00:08:05,479
We need to find the op codes
that will take us straight

152
00:08:05,480 --> 00:08:06,800
to the microphone

153
00:08:06,800 --> 00:08:09,744
because that's the part
that we wanna control

154
00:08:09,744 --> 00:08:14,260
which means that we need to
find a bit of the firmware

155
00:08:14,260 --> 00:08:16,816
that is easy to identify and unique,

156
00:08:16,816 --> 00:08:19,239
that we can associate uniquely with

157
00:08:19,240 --> 00:08:20,943
when you use the microphone.

158
00:08:22,243 --> 00:08:26,240
We would love something that
we can immediately, you know

159
00:08:26,240 --> 00:08:28,750
associate with that
button press that turns on

160
00:08:28,750 --> 00:08:29,830
the microphone.

161
00:08:29,830 --> 00:08:31,030
But the problem is,

162
00:08:31,030 --> 00:08:35,209
the code that manipulates
the microphone itself

163
00:08:35,210 --> 00:08:38,570
will be pretty complicated
to identify, right?

164
00:08:38,570 --> 00:08:41,100
Handling something like
a peripheral device

165
00:08:41,100 --> 00:08:43,990
isn't that straightforward
in terms of op codes

166
00:08:43,990 --> 00:08:46,000
there'll be many hundreds of them.

167
00:08:46,000 --> 00:08:49,740
So it won't be something
we can find that easily

168
00:08:49,740 --> 00:08:52,033
just by skimming through the firmware.

169
00:08:53,020 --> 00:08:56,185
But you'll remember when
you hit the 'Record' button

170
00:08:56,185 --> 00:08:59,430
on the XR11 remote, the little blue

171
00:08:59,430 --> 00:09:01,920
the little LED at the
top lights up in blue

172
00:09:01,920 --> 00:09:04,810
which is something that
intuitively would be, you know

173
00:09:04,810 --> 00:09:08,219
a lot simpler to, to identify than handle

174
00:09:08,220 --> 00:09:10,700
and then turning on and
off a microphone. Right?

175
00:09:10,700 --> 00:09:12,844
'Cause turning on a
light bulb is basically

176
00:09:12,844 --> 00:09:16,210
either sending electricity to it or not.

177
00:09:16,210 --> 00:09:20,580
So we're going to look for
the sequence of op codes

178
00:09:20,580 --> 00:09:24,860
that we can associate with
turning the blue LED on or off

179
00:09:27,296 --> 00:09:29,440
You remember we mentioned earlier

180
00:09:29,440 --> 00:09:33,300
that Texas instruments provides
code samples to work off

181
00:09:33,300 --> 00:09:36,760
for people implementing
their own remote controls.

182
00:09:36,760 --> 00:09:38,189
There's no sample that shows you

183
00:09:38,190 --> 00:09:40,190
how to manipulate a microphone,

184
00:09:40,190 --> 00:09:42,830
but there is one that shows
how you could turn a LED

185
00:09:42,830 --> 00:09:45,850
on or off using the CC2530 chip

186
00:09:45,850 --> 00:09:48,600
which is exactly what we're looking for.

187
00:09:48,600 --> 00:09:52,520
The sample, it's basically
a long list of functions.

188
00:09:52,520 --> 00:09:53,760
And if you read through them

189
00:09:53,760 --> 00:09:57,069
you'll find one of them
is named 'HalLedOnOff

190
00:09:57,070 --> 00:09:59,010
which, you know, LedOnOff

191
00:09:59,010 --> 00:10:01,720
sounds basically like
what we're looking for

192
00:10:01,720 --> 00:10:04,793
a function that will make the
LED light up in blue somehow.

193
00:10:07,002 --> 00:10:11,400
And the way the HalLedOnOff
code works in the sample

194
00:10:11,400 --> 00:10:15,050
is that it assumes that the
LED is directly connected

195
00:10:15,050 --> 00:10:18,510
to four of the pins on the processor.

196
00:10:18,510 --> 00:10:21,741
If you look at the processor
chip, it's just a little square

197
00:10:21,741 --> 00:10:24,574
with many legs sticking
out in every direction.

198
00:10:24,575 --> 00:10:27,910
And each of these legs
is connected to different

199
00:10:27,910 --> 00:10:30,449
to a different piece of
hardware all over the remote's

200
00:10:30,450 --> 00:10:32,270
circuit board.

201
00:10:32,270 --> 00:10:36,650
The sample points to four
of those legs in particular

202
00:10:36,650 --> 00:10:41,310
named P1_1, P1_2, P1_3, P1_4

203
00:10:41,310 --> 00:10:44,770
and it just sets the electricity
to those legs on or off,

204
00:10:44,770 --> 00:10:48,970
depending on the colors you
want or sets them to one or zero

205
00:10:50,630 --> 00:10:52,730
that's all the
functionality that they need

206
00:10:52,730 --> 00:10:54,970
to control the LEDs in the code sample.

207
00:10:54,970 --> 00:10:56,990
So that's pretty straightforward

208
00:10:56,990 --> 00:10:59,790
and it should be pretty
unique as well, right?

209
00:10:59,790 --> 00:11:02,000
Besides manipulating the LEDs,

210
00:11:02,000 --> 00:11:05,830
nothing else should be
accessing these four pins.

211
00:11:05,830 --> 00:11:10,240
So in theory, we know
what the firmware code

212
00:11:10,240 --> 00:11:12,833
that performs HalLedOnoff would look like.

213
00:11:17,150 --> 00:11:22,150
So once we identify where
HalLedOnoff is based on the code,

214
00:11:22,650 --> 00:11:26,603
that based on the opcodes that
manipulate these four legs

215
00:11:26,603 --> 00:11:30,489
we can find the actual use of HalLedOnoff.

216
00:11:30,490 --> 00:11:32,530
That's interesting to us.

217
00:11:32,530 --> 00:11:36,449
So HalLedOnoff is a function
that takes two parameters.

218
00:11:36,450 --> 00:11:40,560
It takes one that says, which
LEDs you want to manipulate.

219
00:11:40,560 --> 00:11:41,392
And another that says

220
00:11:41,393 --> 00:11:43,703
whether you wanna turn
those LEDs on or off.

221
00:11:46,230 --> 00:11:49,430
So we're looking for the
following sequence of op codes.

222
00:11:49,430 --> 00:11:53,560
We want first, to store
the first parameter.

223
00:11:53,560 --> 00:11:56,349
And that says that we
want the bulb to be on

224
00:11:56,350 --> 00:11:59,083
which is zero one as opposed to zero zero,

225
00:12:00,090 --> 00:12:02,350
the second parameter we're looking for,

226
00:12:02,350 --> 00:12:05,533
specifies the color of the
LED that we're turning on.

227
00:12:06,370 --> 00:12:09,230
And after that, after we store the first

228
00:12:09,230 --> 00:12:11,860
and second parameters, we want to jump

229
00:12:11,860 --> 00:12:15,750
to the part of the code that
runs HalLedOnoff itself.

230
00:12:15,750 --> 00:12:17,800
Now, since we could identify HalLedOnoff,

231
00:12:19,810 --> 00:12:23,670
we were able to spot
code that performs a jump

232
00:12:23,670 --> 00:12:25,463
to this address pretty readily.

233
00:12:27,990 --> 00:12:31,942
Once we found all the locations
that jumped to HalLedOnoff,

234
00:12:31,942 --> 00:12:35,500
we have to figure out which
one of them was the one

235
00:12:35,500 --> 00:12:38,350
that is associated with the microphone.

236
00:12:38,350 --> 00:12:40,230
And if you look through
all of the sequences

237
00:12:40,230 --> 00:12:42,430
of opcodes that do this,

238
00:12:42,430 --> 00:12:45,170
only one of them uses
color number four, right?

239
00:12:45,170 --> 00:12:48,060
There's also color one, two and three.

240
00:12:48,060 --> 00:12:51,510
And the LED on the remote can light up

241
00:12:51,510 --> 00:12:53,620
in blue, red, green, or yellow.

242
00:12:53,620 --> 00:12:58,620
So it's not immediately obvious
which color this represents

243
00:12:59,000 --> 00:13:01,470
but by combing the manual

244
00:13:01,470 --> 00:13:03,785
and playing around with the remote,

245
00:13:03,785 --> 00:13:06,507
we determined that
unlike the other colors,

246
00:13:06,507 --> 00:13:08,370
red, green, and yellow

247
00:13:08,370 --> 00:13:10,930
there's only one way to turn the LED blue

248
00:13:10,930 --> 00:13:13,140
and that's by hitting the 'Record' button.

249
00:13:13,140 --> 00:13:16,310
So it stands to reason that
if color number four shows

250
00:13:16,310 --> 00:13:20,290
up in one place exactly,
that color would be blue.

251
00:13:20,290 --> 00:13:23,103
In other words, this is the
location we're looking for.

252
00:13:24,993 --> 00:13:28,760
And once we started from that location

253
00:13:28,760 --> 00:13:33,130
of turning on the blue
LED, we poked around nearby

254
00:13:33,130 --> 00:13:34,560
and we actually found code

255
00:13:34,560 --> 00:13:39,193
that looks like microphone
initialization code.

256
00:13:39,193 --> 00:13:42,360
It happens shortly before
the blue LED is switched on.

257
00:13:42,360 --> 00:13:44,070
There's a sequence of opcodes

258
00:13:44,070 --> 00:13:46,593
that manipulates the microphone.

259
00:13:47,490 --> 00:13:50,740
And our question was whether
there was any other way

260
00:13:50,740 --> 00:13:53,171
to trigger the microphone code

261
00:13:53,171 --> 00:13:57,490
other than pressing the
recording button, right?

262
00:13:57,490 --> 00:14:00,480
'Cause we, for our attack, we
want to turn the microphone

263
00:14:00,480 --> 00:14:02,810
on without requiring someone
to physically be there

264
00:14:02,810 --> 00:14:03,810
and hold the button.

265
00:14:05,790 --> 00:14:09,199
Unfortunately it didn't really look like

266
00:14:09,200 --> 00:14:11,110
there was any other way to do this

267
00:14:11,110 --> 00:14:12,421
other than pressing the button.

268
00:14:12,421 --> 00:14:16,040
No other code flows led to
the part of the firmware

269
00:14:16,040 --> 00:14:18,563
that that started up the microphone.

270
00:14:20,540 --> 00:14:25,540
So we need to find another
way to trigger the microphone.

271
00:14:26,150 --> 00:14:27,939
So how can we do this?

272
00:14:27,940 --> 00:14:30,530
Well, what if we could entirely change

273
00:14:30,530 --> 00:14:32,573
the remote's operating system?

274
00:14:33,990 --> 00:14:37,230
Back in 2017, a bunch of researchers

275
00:14:37,230 --> 00:14:40,160
from best steel networks
actually did some work

276
00:14:40,160 --> 00:14:43,610
on the XR11 remotes, the
ones we're looking at.

277
00:14:43,610 --> 00:14:44,600
And they discovered

278
00:14:44,600 --> 00:14:47,700
that these remotes
receive firmware upgrades

279
00:14:47,700 --> 00:14:50,736
from the X1 cable boxes over the air

280
00:14:50,736 --> 00:14:53,819
which is pretty cool, right?

281
00:14:53,820 --> 00:14:56,770
That's pretty advanced
functionality for a TV remote

282
00:14:56,770 --> 00:14:58,333
to get firmware upgrades.

283
00:14:59,675 --> 00:15:02,913
And the (indistinct) guys
proved that the remote

284
00:15:02,913 --> 00:15:07,410
will accept an unsigned firmware image

285
00:15:07,410 --> 00:15:11,230
from the box it's paired,
with besides a very simple

286
00:15:11,230 --> 00:15:12,930
a cyclic redundancy check.

287
00:15:12,930 --> 00:15:15,939
There was no cryptographic validation done

288
00:15:15,940 --> 00:15:17,373
on the firmware at all.

289
00:15:18,610 --> 00:15:23,610
Which means that you could
theoretically edit the firmware

290
00:15:24,430 --> 00:15:29,150
somehow and then send
in a firmware upgrade

291
00:15:29,150 --> 00:15:31,490
to the remote from the
box that's paired with.

292
00:15:31,490 --> 00:15:35,560
They took advantage of this
to push their own, you know

293
00:15:35,560 --> 00:15:38,266
identical firmware version
where they just changed

294
00:15:38,266 --> 00:15:41,709
the version number two,
one, three, three, seven.

295
00:15:41,710 --> 00:15:43,560
You can see it over here.

296
00:15:43,560 --> 00:15:46,380
This is a screenshot from their slide.

297
00:15:46,380 --> 00:15:48,430
And at the end of their lecture

298
00:15:48,430 --> 00:15:51,209
it wasn't (indistinct)

299
00:15:51,210 --> 00:15:54,140
from their presentation said this.

300
00:15:54,140 --> 00:15:56,680
He said, we thought it
would be really cool.

301
00:15:56,680 --> 00:16:00,089
If we could push an over-the-air
update to this remote

302
00:16:00,090 --> 00:16:02,400
and make the remote a listening device.

303
00:16:02,400 --> 00:16:04,300
We haven't got that far yet.

304
00:16:04,300 --> 00:16:05,920
You guys should do it.

305
00:16:05,920 --> 00:16:08,713
Which is exactly where
our research comes in.

306
00:16:11,250 --> 00:16:14,100
So our work is basically cut out for us.

307
00:16:14,100 --> 00:16:16,160
First we need to find a way to attack

308
00:16:16,160 --> 00:16:18,860
the firmware upgrade mechanism.

309
00:16:18,860 --> 00:16:20,700
And then we'll take advantage of that.

310
00:16:20,700 --> 00:16:24,450
Push our own malicious
firmware image to the remote.

311
00:16:24,450 --> 00:16:28,420
We'll have to write that malicious
firmware image ourselves.

312
00:16:28,420 --> 00:16:29,530
Once we do that

313
00:16:29,530 --> 00:16:32,433
we should be able to control
the microphone from afar.

314
00:16:34,413 --> 00:16:36,500
But first we'll need an idea

315
00:16:36,500 --> 00:16:40,340
of how firmware upgrades
actually work for the remote.

316
00:16:40,340 --> 00:16:43,444
So each remote is paired to one box.

317
00:16:43,444 --> 00:16:46,380
And the box that it's
paired with is the one

318
00:16:46,380 --> 00:16:49,330
that gets asked for new firmware images.

319
00:16:49,330 --> 00:16:52,340
Once a day, the remote asks the box

320
00:16:52,340 --> 00:16:54,963
whether it has a new
firmware image for it.

321
00:16:56,041 --> 00:17:00,090
In reality, Comcast basically
never releases upgrades

322
00:17:00,090 --> 00:17:02,150
for these remotes.

323
00:17:02,150 --> 00:17:03,360
There's no reason to.

324
00:17:03,360 --> 00:17:06,010
So 99% of the time the box says,

325
00:17:06,010 --> 00:17:07,839
no there's no firmware image.

326
00:17:07,839 --> 00:17:10,282
And that's the end of
that, until the next day.

327
00:17:11,579 --> 00:17:13,540
But if the box tells the remote, yes

328
00:17:13,540 --> 00:17:16,240
I have a new firmware image for you.

329
00:17:16,240 --> 00:17:19,319
Then the remote will start
asking for that firmware image

330
00:17:19,319 --> 00:17:20,659
one chunk at a time.

331
00:17:20,660 --> 00:17:24,733
So first send me the first X
bytes at position, whatever.

332
00:17:24,733 --> 00:17:27,530
And then the next Y bytes
at the next position.

333
00:17:27,530 --> 00:17:30,860
And it goes through the
whole firmware image

334
00:17:30,860 --> 00:17:32,939
until it has the entire file.

335
00:17:32,940 --> 00:17:36,063
So this is, it takes
about 15 non-prod chunks.

336
00:17:37,170 --> 00:17:38,370
It takes a little while.

337
00:17:40,610 --> 00:17:44,129
We would love to push our
own firmware to the remote

338
00:17:44,130 --> 00:17:47,400
using this mechanism, but
we don't control the box.

339
00:17:47,400 --> 00:17:50,290
So we can't just take over the box

340
00:17:50,290 --> 00:17:52,781
and tell it to use our own firmware image

341
00:17:52,781 --> 00:17:57,781
because we don't have a way
to hack the box from afar.

342
00:17:57,880 --> 00:18:00,490
But if the remote only
accepts firmware images

343
00:18:00,490 --> 00:18:02,390
from the box that's paired with,

344
00:18:02,390 --> 00:18:04,328
and we can't take over the box,

345
00:18:04,328 --> 00:18:08,480
our only way in is to
pretend to be the box.

346
00:18:08,480 --> 00:18:11,920
We want to impersonate the
box that the remote trusts

347
00:18:11,920 --> 00:18:14,063
and asks for firmware images.

348
00:18:15,310 --> 00:18:18,550
There are two main problems
with this approach.

349
00:18:18,550 --> 00:18:21,680
First, there's the
question of interference

350
00:18:21,680 --> 00:18:23,910
when the remote asks for new firmware?

351
00:18:23,910 --> 00:18:25,740
If I could just answer it.

352
00:18:25,740 --> 00:18:28,307
Yes. There's new firmware for
you with so-and-so firmware.

353
00:18:28,307 --> 00:18:30,910
And at the same time, the box says,

354
00:18:30,910 --> 00:18:33,070
no there is no firmware image.

355
00:18:33,070 --> 00:18:34,730
We're gonna be in a race with the box.

356
00:18:34,730 --> 00:18:38,260
And as often as not, we're
going to lose that race.

357
00:18:38,260 --> 00:18:40,754
So we need to find a way to
get the box out of the way

358
00:18:40,754 --> 00:18:42,703
when we're impersonating it.

359
00:18:43,680 --> 00:18:47,240
The second and more fundamental issue

360
00:18:47,240 --> 00:18:50,390
is that you can't simply tell
the remote anything you like.

361
00:18:50,390 --> 00:18:54,310
Communication between the
remote and the box is encrypted.

362
00:18:54,310 --> 00:18:57,810
Outsiders can just push
their messages in the middle

363
00:18:57,810 --> 00:19:02,810
unless they share the secret
between the remote and the box.

364
00:19:03,410 --> 00:19:07,640
So first let's solve the
easier problem of the two.

365
00:19:07,640 --> 00:19:10,280
How do we overcome the interference issue?

366
00:19:10,280 --> 00:19:12,100
There's a process on the box.

367
00:19:12,100 --> 00:19:14,199
The box just runs on Linux

368
00:19:14,200 --> 00:19:17,790
and there's a process on it
that interacts with the remote.

369
00:19:17,790 --> 00:19:19,483
And it's called Control Manager.

370
00:19:20,510 --> 00:19:23,830
We were looking for a denial
of service candidates.

371
00:19:23,830 --> 00:19:26,889
You know, we just need a
way to get Control Manager

372
00:19:26,890 --> 00:19:28,563
out of the way for us for a bit.

373
00:19:29,560 --> 00:19:32,636
So we tried the simplest
thing you can imagine,

374
00:19:32,636 --> 00:19:36,690
which we wrote up a very
simple fuzzing implementation

375
00:19:36,690 --> 00:19:40,060
which basically generates random packets

376
00:19:40,060 --> 00:19:44,163
and sends them to the
control manager process.

377
00:19:45,360 --> 00:19:48,496
You know, so usually
it takes a little while

378
00:19:48,497 --> 00:19:52,710
for fuzzers like this to actually
find anything of interest.

379
00:19:52,710 --> 00:19:55,797
But within like five
seconds, we had control.

380
00:19:55,797 --> 00:19:58,323
We had crashed Control Manager.

381
00:19:59,310 --> 00:20:03,639
So it didn't take very much
to get that out of the way

382
00:20:04,840 --> 00:20:06,480
Control Manager starts back up

383
00:20:06,480 --> 00:20:09,540
after you crash it a few seconds later

384
00:20:09,540 --> 00:20:10,570
but that's all we need.

385
00:20:10,570 --> 00:20:12,950
We just need it to miss
one specific packet

386
00:20:12,950 --> 00:20:15,380
which is the one where
it tells the remote.

387
00:20:15,380 --> 00:20:17,580
There's no firmware
image available for you.

388
00:20:19,680 --> 00:20:23,883
The other issue with the cryptography

389
00:20:24,930 --> 00:20:26,803
is much more problematic.

390
00:20:27,710 --> 00:20:31,010
You'll remember there's a
series, a shared secret key

391
00:20:31,010 --> 00:20:34,567
between the XR11 remote
and the X1 cable box.

392
00:20:34,567 --> 00:20:38,880
And that secret is coordinated
between them at pairing time

393
00:20:38,880 --> 00:20:41,970
which is what basically
when you get the box

394
00:20:41,970 --> 00:20:44,380
for the first time and
set it up in your home

395
00:20:44,380 --> 00:20:46,160
and we're not around for this process.

396
00:20:46,160 --> 00:20:48,330
So we can't just snoop on the secret key.

397
00:20:48,330 --> 00:20:49,460
By the time we're around

398
00:20:49,460 --> 00:20:52,800
all the communication
is already encrypted.

399
00:20:52,800 --> 00:20:55,100
Which means that we'll
need a vulnerability

400
00:20:55,100 --> 00:20:57,959
if we're going to find a way in here.

401
00:20:57,960 --> 00:20:58,793
So we looked for one

402
00:20:58,793 --> 00:21:01,659
it actually didn't take that long to find.

403
00:21:01,660 --> 00:21:04,220
We found out that not everything that goes

404
00:21:04,220 --> 00:21:06,600
between the remote and
the box is encrypted.

405
00:21:06,600 --> 00:21:11,600
When you're holding the
record button on the remote,

406
00:21:11,610 --> 00:21:15,419
the audio packets that are
sent are not encrypted.

407
00:21:15,420 --> 00:21:17,960
Which is interesting because that means

408
00:21:17,960 --> 00:21:21,790
that if we compare the unencrypted
packets from the audio,

409
00:21:21,790 --> 00:21:23,710
for example, to the encrypted ones

410
00:21:23,710 --> 00:21:26,040
which are from any other button press

411
00:21:26,040 --> 00:21:29,600
you can find that each packet is marked

412
00:21:29,600 --> 00:21:33,918
with one bit that says whether
the packet is secured or not.

413
00:21:33,918 --> 00:21:37,459
There's a protocol called RF4CE

414
00:21:37,460 --> 00:21:39,740
that specifies most of the communication

415
00:21:39,740 --> 00:21:42,480
between these two devices.

416
00:21:42,480 --> 00:21:47,210
And it mentions this secure
bit where one means secure

417
00:21:47,210 --> 00:21:48,590
and zero means not secure.

418
00:21:48,590 --> 00:21:51,459
And in reality, what secure means is

419
00:21:51,460 --> 00:21:54,060
whether the packet's
contents are encrypted or not

420
00:21:56,190 --> 00:21:58,900
which is very interesting because it means

421
00:21:58,900 --> 00:22:02,030
that not the whole
connection between the box

422
00:22:02,030 --> 00:22:04,524
and their mode is encrypted,
as you might expect

423
00:22:04,525 --> 00:22:08,100
but rather it's on a per packet basis

424
00:22:09,420 --> 00:22:11,980
whether or not that packet is encrypted.

425
00:22:11,980 --> 00:22:16,140
So that means that if you
can send your own pocket

426
00:22:16,140 --> 00:22:19,990
your own packet and mark it
as not secure or not encrypted

427
00:22:19,990 --> 00:22:23,440
you can essentially inject your
own packet into the session.

428
00:22:23,440 --> 00:22:25,200
And the other side will just accept it

429
00:22:25,200 --> 00:22:27,250
as part of the protocol.

430
00:22:27,250 --> 00:22:29,770
It will just read that
as a plain text packet

431
00:22:29,770 --> 00:22:31,990
if you don't mark it as encrypted.

432
00:22:31,990 --> 00:22:36,530
So to recap that the remote doesn't verify

433
00:22:36,530 --> 00:22:38,860
that the packet actually came from the box

434
00:22:38,860 --> 00:22:40,520
it will just accept the packet

435
00:22:40,520 --> 00:22:42,710
whether it's encrypted or not.

436
00:22:42,710 --> 00:22:44,430
So if we can send our own packets

437
00:22:44,430 --> 00:22:46,680
that look like they're coming from the box

438
00:22:46,680 --> 00:22:48,360
and mark them as not encrypted

439
00:22:48,360 --> 00:22:49,913
the remote should accept them.

440
00:22:51,750 --> 00:22:54,770
And now this would be
perfect if we could just

441
00:22:54,770 --> 00:22:58,940
tell the remote, do a
firmware upgrade, right?

442
00:22:58,940 --> 00:23:01,960
'Cause if we could just
create that plain text packet

443
00:23:01,960 --> 00:23:04,453
and the remote would accept it, we've won.

444
00:23:05,330 --> 00:23:06,419
But as it turns out

445
00:23:06,420 --> 00:23:09,530
you can't simply initiate
a session with the remote.

446
00:23:09,530 --> 00:23:11,610
The remote's operating system is built

447
00:23:11,610 --> 00:23:15,163
so that it is always the
initiating side of the transaction.

448
00:23:16,620 --> 00:23:19,830
Basically, it's not, it doesn't
listen around for commands.

449
00:23:19,830 --> 00:23:21,720
It doesn't wait around
listening for commands.

450
00:23:21,720 --> 00:23:25,370
It is always the first
one to send out a query

451
00:23:25,370 --> 00:23:29,719
which is basically a neat way
for it to conserve battery.

452
00:23:29,720 --> 00:23:30,553
Cause it means

453
00:23:30,553 --> 00:23:33,690
that it doesn't have to have
its RF transceiver around

454
00:23:33,690 --> 00:23:34,970
all the time.

455
00:23:34,970 --> 00:23:36,560
From our perspective, what that means

456
00:23:36,560 --> 00:23:39,428
is we can't tell actively tell the remote,

457
00:23:39,428 --> 00:23:41,640
take a firmware upgrade from us.

458
00:23:41,640 --> 00:23:46,030
We have to wait for it to
ask for that firmware upgrade

459
00:23:46,030 --> 00:23:48,470
before we can respond to it and say, yes

460
00:23:48,470 --> 00:23:49,983
there is an upgrade available.

461
00:23:51,412 --> 00:23:52,910
But the problem with this is

462
00:23:52,910 --> 00:23:55,460
that everything that remote
sends out is encrypted.

463
00:23:55,460 --> 00:23:59,170
So even if we can send
out plain text packets

464
00:23:59,170 --> 00:24:01,860
we can't decipher what
the remote is asking for

465
00:24:01,860 --> 00:24:03,240
in the first place.

466
00:24:03,240 --> 00:24:05,750
So how can we know what to answer?

467
00:24:05,750 --> 00:24:08,270
What we need to do is guess.

468
00:24:08,270 --> 00:24:10,350
We were looking for a way

469
00:24:10,350 --> 00:24:13,189
to make the remote accept our firmware.

470
00:24:13,190 --> 00:24:15,310
If we can guess that the remote is asking

471
00:24:15,310 --> 00:24:19,000
for a new firmware image
and which chunks it's asking

472
00:24:19,000 --> 00:24:21,020
for each time of that firmware image

473
00:24:21,020 --> 00:24:23,600
we don't actually have
to decrypt those packets.

474
00:24:23,600 --> 00:24:26,216
We can just pretend we
understand what it's asking for

475
00:24:26,217 --> 00:24:28,549
and send back our response.

476
00:24:28,549 --> 00:24:31,129
It's a little bit like how in real life

477
00:24:31,130 --> 00:24:32,880
you don't have to listen that closely

478
00:24:32,880 --> 00:24:36,570
to the other half of the conversation,

479
00:24:36,570 --> 00:24:37,963
if you know what to answer.

480
00:24:40,770 --> 00:24:43,310
So what our final process will look like

481
00:24:43,310 --> 00:24:45,620
is something like this.

482
00:24:45,620 --> 00:24:48,199
Although with the daily
firmware upgrade requests

483
00:24:48,200 --> 00:24:49,903
from the remote is encrypted.

484
00:24:50,930 --> 00:24:55,780
Thanks to a little giveaway
parts of that request packet

485
00:24:55,780 --> 00:24:59,820
we can understand whether
that is the remote asking

486
00:24:59,820 --> 00:25:02,260
for a new firmware image or not.

487
00:25:02,260 --> 00:25:04,250
So once we know

488
00:25:04,250 --> 00:25:07,909
that we have a new firmware
request packet on hand

489
00:25:07,909 --> 00:25:12,616
what we need to do is we
need to crash the remote.

490
00:25:12,616 --> 00:25:14,250
We need to crash the box

491
00:25:14,250 --> 00:25:16,830
the control manager process
we talked about earlier

492
00:25:16,830 --> 00:25:19,710
just to get it out of the
way for a few seconds.

493
00:25:19,710 --> 00:25:22,670
So we send our malicious
packet over RF to the box

494
00:25:22,670 --> 00:25:24,573
and then control manager is done.

495
00:25:25,730 --> 00:25:30,380
Next. We identify the request
for the new firmware image

496
00:25:30,380 --> 00:25:34,033
and answer that, yes we have a
new firmware image available.

497
00:25:35,120 --> 00:25:38,750
Next, the remote will
ask for the first chunk.

498
00:25:38,750 --> 00:25:40,743
This request is encrypted.

499
00:25:43,194 --> 00:25:44,290
The box ignores that request

500
00:25:44,290 --> 00:25:46,210
because Control Manager was crashed

501
00:25:46,210 --> 00:25:47,773
when the remote asked for it.

502
00:25:49,454 --> 00:25:51,710
But we see the requests and we can guess

503
00:25:51,710 --> 00:25:55,210
that the remote is asking
for the first chunk

504
00:25:55,210 --> 00:25:57,600
and for the following firmware chunks

505
00:25:57,600 --> 00:26:00,070
the order is very predictable.

506
00:26:00,070 --> 00:26:04,710
Which means that each time
the remote asks for a chunk

507
00:26:04,710 --> 00:26:07,440
using an encrypted request
for send me the first

508
00:26:07,440 --> 00:26:09,630
or second or third chunk or whatever

509
00:26:09,630 --> 00:26:12,960
we can just guess exactly
which one it's asking for

510
00:26:12,960 --> 00:26:17,140
and send that back in
a non-encrypted packet.

511
00:26:17,140 --> 00:26:18,790
Which means that piece by piece

512
00:26:18,790 --> 00:26:23,200
we can send the whole
firmware image that we chose.

513
00:26:23,200 --> 00:26:25,550
And once we've completed the
whole process from beginning

514
00:26:25,550 --> 00:26:29,120
to the whole 1500 packets
the remote will restart

515
00:26:29,120 --> 00:26:30,963
with the new firmware image running.

516
00:26:31,900 --> 00:26:35,580
Now to do all of this
we need some equipment.

517
00:26:35,580 --> 00:26:39,176
Not everyone has an RF
transceiver on hand at home.

518
00:26:39,176 --> 00:26:42,800
Luckily we had one that we
had bought a long time ago

519
00:26:42,800 --> 00:26:45,540
but it's not at all expensive to do this.

520
00:26:45,540 --> 00:26:49,870
I mean, the antenna we used
here is pretty powerful

521
00:26:49,870 --> 00:26:51,550
and it costs about $30

522
00:26:51,550 --> 00:26:54,183
and there are much cheaper ones than that.

523
00:26:54,183 --> 00:26:56,430
Like the one connected to my computer here

524
00:26:56,430 --> 00:26:58,800
which costs about a dollar.

525
00:26:58,800 --> 00:27:01,490
So it's not that difficult
to turn your computer

526
00:27:01,490 --> 00:27:03,810
into an RF hacking device.

527
00:27:03,810 --> 00:27:07,389
We implemented a little script
that does just the process

528
00:27:07,390 --> 00:27:10,110
I just described, which
is guessing each time

529
00:27:10,110 --> 00:27:12,129
which chunk of the firmware
the remote is asking for

530
00:27:12,130 --> 00:27:13,453
and sending that chunk.

531
00:27:14,430 --> 00:27:17,890
First, we tried to replace
the remote's firmware

532
00:27:17,890 --> 00:27:21,400
with the same exact
firmware it's already using.

533
00:27:21,400 --> 00:27:24,157
This is what that looks like.

534
00:27:24,157 --> 00:27:26,620
Here you can see the
remote is flashing yellow

535
00:27:26,620 --> 00:27:28,610
meaning I'm getting new firmware chunks.

536
00:27:28,610 --> 00:27:31,649
And at the very end

537
00:27:31,650 --> 00:27:34,690
there's a little green
LED and that's success.

538
00:27:34,690 --> 00:27:37,510
The remote is restarted
with the firmware we post.

539
00:27:37,510 --> 00:27:40,651
Which is exactly the same
one it had to start with.

540
00:27:40,651 --> 00:27:43,901
So once we've sent all 1500 packets

541
00:27:43,901 --> 00:27:47,060
we had all those little yellow blinks

542
00:27:47,060 --> 00:27:49,899
we have taken over the remote control.

543
00:27:49,900 --> 00:27:54,120
Next, we try to write our own
to make our own little change

544
00:27:54,120 --> 00:27:57,050
to the firmware, to test
that's working just right.

545
00:27:57,050 --> 00:28:01,909
We changed the little's zero
four from the record LED

546
00:28:01,910 --> 00:28:04,560
you'll remember earlier that
made it light up in blue,

547
00:28:04,560 --> 00:28:07,220
and we changed it to a zero two

548
00:28:07,220 --> 00:28:09,333
to make it a green LED instead.

549
00:28:10,570 --> 00:28:12,760
So just by changing that one little bit

550
00:28:12,760 --> 00:28:14,730
in the entire firmware image,

551
00:28:14,730 --> 00:28:19,640
we wanted to see if we could,
you know make our own changes

552
00:28:19,640 --> 00:28:21,880
and that they would get
uploaded to the remote

553
00:28:21,880 --> 00:28:23,495
and they would work.

554
00:28:23,495 --> 00:28:28,300
So we ran our script
again with the new image

555
00:28:28,300 --> 00:28:32,919
and when we press the record button now,

556
00:28:32,920 --> 00:28:34,500
you can see it lights up in green.

557
00:28:34,500 --> 00:28:35,970
And at the very beginning there

558
00:28:35,970 --> 00:28:37,980
it was green before it flashed blue.

559
00:28:37,980 --> 00:28:41,750
So that is super exciting, right?

560
00:28:41,750 --> 00:28:46,360
It means that we have our first
part of the attack in hand

561
00:28:46,360 --> 00:28:49,868
we can actually push an
arbitrary firmware image to it.

562
00:28:49,868 --> 00:28:54,868
Now the having the blue LED is
pretty cool, but changing it

563
00:28:55,070 --> 00:28:57,580
to green is pretty cool, but
it's not quite evil enough.

564
00:28:57,580 --> 00:28:59,300
We want something a little more evil.

565
00:28:59,300 --> 00:29:01,100
We want to take over the microphone.

566
00:29:03,750 --> 00:29:08,580
So we have to actually write
that malicious firmware image

567
00:29:08,580 --> 00:29:10,330
that will take over the microphone.

568
00:29:10,330 --> 00:29:11,322
Let's get to that.

569
00:29:13,150 --> 00:29:15,910
So adding your own
functionality to firmware

570
00:29:15,910 --> 00:29:17,200
is not that simple.

571
00:29:17,200 --> 00:29:19,180
You can't just glue in the middle.

572
00:29:19,180 --> 00:29:21,670
Anything you would like
because a lot of code refers

573
00:29:21,670 --> 00:29:24,840
to other code addresses and
all sorts of complicated ways.

574
00:29:24,840 --> 00:29:27,360
So it's kind of like if
you try to add a paragraph

575
00:29:27,360 --> 00:29:29,070
to the middle of a book, right

576
00:29:29,070 --> 00:29:31,500
you completely break
the table of contents.

577
00:29:31,500 --> 00:29:34,170
So rang firmware is the
same in a lot of ways

578
00:29:35,450 --> 00:29:37,270
except that if you modify the firmware

579
00:29:37,270 --> 00:29:39,850
in a way that breaks it
you will ruin your remote,

580
00:29:39,850 --> 00:29:41,050
it'll never boot up again.

581
00:29:41,050 --> 00:29:43,500
It will become a worthless piece of junk.

582
00:29:43,500 --> 00:29:46,096
And we didn't have an endless
supply of TV remotes on hand.

583
00:29:46,096 --> 00:29:49,200
So we weren't that interested
in doing it the hard way

584
00:29:50,120 --> 00:29:54,189
and basically the best way
to avoid doing anything

585
00:29:54,190 --> 00:29:57,660
too harmful to the remote, is
to make as tiny modification

586
00:29:57,660 --> 00:29:59,250
as you can, to reach your goal.

587
00:29:59,250 --> 00:30:01,623
Basically the shortest
path to changing it.

588
00:30:02,699 --> 00:30:04,670
We want the remote to start recording

589
00:30:04,670 --> 00:30:08,100
when it receives a command
from the outside, right?

590
00:30:08,100 --> 00:30:12,629
So the firmware upgrade

591
00:30:12,630 --> 00:30:15,710
normally happens once every 24 hours.

592
00:30:15,710 --> 00:30:18,470
And what we did is we made a tiny change

593
00:30:18,470 --> 00:30:20,540
that makes it check once a minute instead.

594
00:30:20,540 --> 00:30:23,370
So, so far, no big changes.

595
00:30:23,370 --> 00:30:26,899
Now, normally the remote
would ask, you know

596
00:30:26,900 --> 00:30:28,367
is there a new firmware image or not?

597
00:30:28,367 --> 00:30:31,683
And the box would say, yes,
I knew I do, or no, I don't.

598
00:30:32,730 --> 00:30:35,950
And we added a tiny change
that makes it understand a new

599
00:30:35,950 --> 00:30:38,071
a third response to that question.

600
00:30:38,071 --> 00:30:41,746
Now understands the new answer that says

601
00:30:41,747 --> 00:30:43,680
"please start recording now."

602
00:30:43,680 --> 00:30:48,670
And we sort of rewired the
remote's firmware to jump

603
00:30:48,670 --> 00:30:51,040
to the recording code from before

604
00:30:51,040 --> 00:30:52,753
when it sees that response.

605
00:30:54,150 --> 00:30:55,610
So in the original firmware

606
00:30:55,610 --> 00:30:57,469
the only way to reach the microphone code

607
00:30:57,470 --> 00:30:59,100
was when the record button is pressed

608
00:30:59,100 --> 00:31:01,810
and we made it so that it will go there

609
00:31:01,810 --> 00:31:06,080
when you give it the magic
answer of "start recording."

610
00:31:06,080 --> 00:31:08,710
And when the remote sees that
it's just starts recording

611
00:31:08,710 --> 00:31:10,070
for 10 minutes at a time

612
00:31:10,070 --> 00:31:12,939
as if you were holding the
button, it starts recording

613
00:31:12,940 --> 00:31:15,650
and transmit all of the
recorded stuff over RF.

614
00:31:15,650 --> 00:31:17,760
'Cause that's normally what it does

615
00:31:17,760 --> 00:31:19,670
when you hit the record button.

616
00:31:19,670 --> 00:31:23,190
All of these changes were made
by modifying just 36 bytes

617
00:31:23,190 --> 00:31:25,020
of the firmware file out of, you know

618
00:31:25,020 --> 00:31:26,260
more than a hundred kilobytes.

619
00:31:26,260 --> 00:31:28,413
So that's a really tiny modification.

620
00:31:30,780 --> 00:31:33,328
So once the remote is
running our new firmware,

621
00:31:33,328 --> 00:31:37,540
the new flow becomes available,
which is once every minute

622
00:31:37,540 --> 00:31:40,168
the remote asks the
box for a new firmware,

623
00:31:40,169 --> 00:31:41,760
same requests every minute

624
00:31:41,760 --> 00:31:44,830
instead of just once every 24 hours

625
00:31:44,830 --> 00:31:47,000
when the attacker decides
to start recording

626
00:31:47,000 --> 00:31:49,223
they temporarily crash the box.

627
00:31:50,080 --> 00:31:52,179
The remote will ask for
a new firmware image.

628
00:31:52,180 --> 00:31:54,740
The box will not respond as before.

629
00:31:54,740 --> 00:31:57,140
And the attacker instead
of responding, yes

630
00:31:57,140 --> 00:31:58,743
new firmware image or no,

631
00:31:58,743 --> 00:32:02,179
the attacker will respond,
"please start recording".

632
00:32:02,180 --> 00:32:05,050
And once the remote sees that
it jumps to the recording code

633
00:32:05,050 --> 00:32:09,040
and you have 10 minutes, 10
minutes of a live audio stream.

634
00:32:09,040 --> 00:32:11,770
Once it's done with that stream,
we can repeat it as often

635
00:32:11,770 --> 00:32:14,260
as we like, because the
remote's just gonna keep asking

636
00:32:14,260 --> 00:32:15,663
for new firmware upgrade.

637
00:32:16,640 --> 00:32:18,720
- Okay. So now that we have

638
00:32:18,720 --> 00:32:23,030
both the vulnerability
and the malicious firmware

639
00:32:23,030 --> 00:32:26,485
it's time to actually run that back.

640
00:32:26,486 --> 00:32:29,890
So we went outside to do some field tests

641
00:32:29,890 --> 00:32:33,660
and we found that the attack
vary depending on the distance

642
00:32:33,660 --> 00:32:35,810
and obstruction from the remote.

643
00:32:35,810 --> 00:32:39,990
But we're able to pretty
reliably pull it off

644
00:32:39,990 --> 00:32:43,950
from about 65 feet through a solid wall

645
00:32:43,950 --> 00:32:47,520
and attacking from the
outside of an apartment.

646
00:32:47,520 --> 00:32:51,040
And that when we used
pretty inexpensive equipment

647
00:32:51,040 --> 00:32:52,720
as mentioned before.

648
00:32:52,720 --> 00:32:55,130
So I would guess that with a better gear

649
00:32:55,130 --> 00:32:56,950
we could definitely have pulled this off

650
00:32:56,950 --> 00:32:59,070
from a much longer distance.

651
00:32:59,070 --> 00:33:00,899
Now for the initial attack

652
00:33:00,900 --> 00:33:03,470
you have to wait around for a while.

653
00:33:03,470 --> 00:33:08,470
So the remote's daily framework
upgrade check will kick in.

654
00:33:09,010 --> 00:33:11,080
And once you've caught that

655
00:33:11,080 --> 00:33:13,169
it takes another 20 to 30 minutes

656
00:33:13,170 --> 00:33:16,210
to upload our malicious
framework to the remote.

657
00:33:16,210 --> 00:33:18,040
Now, once that's done

658
00:33:18,040 --> 00:33:19,810
you can actually start recording.

659
00:33:19,810 --> 00:33:20,899
Any point that you like.

660
00:33:20,900 --> 00:33:22,970
So since the remote asks any

661
00:33:22,970 --> 00:33:27,110
I think every minute or so
whether to start recording.

662
00:33:27,110 --> 00:33:30,476
So basically we ended up with something

663
00:33:30,476 --> 00:33:34,229
as if taken from a spy
movie, sitting in a van

664
00:33:34,229 --> 00:33:37,070
and listening to what's happening

665
00:33:37,070 --> 00:33:39,080
in the apartment next to us.

666
00:33:39,080 --> 00:33:43,560
Now, the question is, does the
recording from such a device

667
00:33:43,560 --> 00:33:46,399
sound any good, like from how far

668
00:33:46,400 --> 00:33:48,893
does the remote microphone
hear its surroundings?

669
00:33:50,240 --> 00:33:52,923
So we actually took us a while,

670
00:33:53,760 --> 00:33:56,170
to figure out how to even decode the audio

671
00:33:56,170 --> 00:33:57,790
coming from this remote.

672
00:33:57,790 --> 00:34:00,560
And once we did that, we
were pleased to find that

673
00:34:00,560 --> 00:34:05,240
the remote's tiny microphone
is really surprisingly strong.

674
00:34:05,240 --> 00:34:07,770
And you can hear pretty
clearly a conversation

675
00:34:07,770 --> 00:34:10,750
from around 15 feet from the remote

676
00:34:10,750 --> 00:34:12,239
which was very impressive.

677
00:34:12,239 --> 00:34:15,389
And we were kind of
surprised by these results.

678
00:34:15,389 --> 00:34:20,389
So we could hear a conversation
50 feet from the remote

679
00:34:20,480 --> 00:34:22,550
inside the apartment.

680
00:34:22,550 --> 00:34:25,613
Now, here is a quick recording
we made from this distance.

681
00:34:27,407 --> 00:34:30,480
(remote audio playing)

682
00:34:30,480 --> 00:34:34,300
- [woman] Let's go the other day.

683
00:34:34,300 --> 00:34:39,300
- [Man] And I tell you this,
you can set it up to Eva.

684
00:34:41,270 --> 00:34:43,070
- So you can hear this very clearly

685
00:34:43,070 --> 00:34:46,989
considering it is a tiny
microphone in a remote control.

686
00:34:46,989 --> 00:34:50,810
Now that's pretty much it
for the technical details.

687
00:34:50,810 --> 00:34:53,699
And at this point, we realized
that we should probably get

688
00:34:53,699 --> 00:34:58,700
in touch with Comcast reporting
about what we discovered.

689
00:34:59,440 --> 00:35:02,350
So we wrote to them about our findings.

690
00:35:02,350 --> 00:35:04,810
They got back to us right away.

691
00:35:04,810 --> 00:35:06,750
And within a couple of months

692
00:35:06,750 --> 00:35:08,960
they released a number of fixes.

693
00:35:08,960 --> 00:35:11,710
They fixed the issue that
allowed third-party framework

694
00:35:11,710 --> 00:35:13,260
to be installed on the remote

695
00:35:13,260 --> 00:35:16,150
by signing framework cryptography,

696
00:35:16,150 --> 00:35:18,720
they fixed the bug that allowed
us to reply to the remote

697
00:35:18,720 --> 00:35:20,359
with un-encrypted packets.

698
00:35:20,360 --> 00:35:22,220
And last they fixed the bug on the box

699
00:35:22,220 --> 00:35:23,370
that allows us to crash it.

700
00:35:23,370 --> 00:35:25,730
Which makes it harder
to pull off this attack

701
00:35:25,730 --> 00:35:28,050
without the box interfering.

702
00:35:28,050 --> 00:35:30,450
And so to recap here is what we have.

703
00:35:30,450 --> 00:35:31,283
First.

704
00:35:31,283 --> 00:35:33,509
There is the fact that
you can turn a remote

705
00:35:33,510 --> 00:35:35,160
into a listening device.

706
00:35:35,160 --> 00:35:37,399
And one of the things that enabled this

707
00:35:37,400 --> 00:35:40,450
is how much the remotes relies
on RF for its communication.

708
00:35:40,450 --> 00:35:41,899
It's surprising enough

709
00:35:41,900 --> 00:35:44,480
that the TV remote has fewer upgrades

710
00:35:44,480 --> 00:35:47,330
but the fact that it
pushes them over the air

711
00:35:47,330 --> 00:35:50,220
or over RF, it really struck us.

712
00:35:50,220 --> 00:35:53,580
This was a much heavier use
of RF than we would expect it

713
00:35:53,580 --> 00:35:57,529
for a widespread home
device, such as a TV remote.

714
00:35:57,530 --> 00:36:00,310
If devices like these
start relying more heavily

715
00:36:00,310 --> 00:36:03,145
on RF for their system
upgrades and administration

716
00:36:03,145 --> 00:36:05,780
it's likely more and
more threats will come

717
00:36:05,780 --> 00:36:09,550
from this direction, especially
since RF interferences

718
00:36:09,550 --> 00:36:13,390
haven't been that very
heavily audited up until now.

719
00:36:13,390 --> 00:36:16,779
It's hard to say how many
other devices are built

720
00:36:16,780 --> 00:36:18,750
on top of RemoTI,

721
00:36:18,750 --> 00:36:22,320
the development kit that
the XR11 remote's framework

722
00:36:22,320 --> 00:36:25,810
is based on, pretty
much anything using this

723
00:36:25,810 --> 00:36:28,529
will be proprietary and hard to find

724
00:36:28,530 --> 00:36:30,370
without reverse engineering.

725
00:36:30,370 --> 00:36:33,779
But assuming Comcast isn't the
only company using these kits

726
00:36:33,780 --> 00:36:37,980
it's likely that the crypto
flaw we took advantage of here

727
00:36:37,980 --> 00:36:40,370
will turn up in other devices too.

728
00:36:40,370 --> 00:36:42,980
Finally, we should stress
how important it is

729
00:36:42,980 --> 00:36:45,040
to fix disclose the security issues.

730
00:36:45,040 --> 00:36:48,810
Even if they don't seem easily
exploitable at first glance

731
00:36:51,485 --> 00:36:54,715
I want to take a small
step back and undoubtfully

732
00:36:54,715 --> 00:36:58,340
all of you have heard about IOT research

733
00:36:58,340 --> 00:37:01,810
and some degree by now,
it feels like once a week

734
00:37:01,810 --> 00:37:04,151
someone takes over Alexa or something.

735
00:37:04,151 --> 00:37:07,151
What we believe is interesting
about this particular project

736
00:37:07,151 --> 00:37:10,690
is that remote control is pretty
standard household device.

737
00:37:10,690 --> 00:37:13,777
Not many people would
think of it as an IOT

738
00:37:13,777 --> 00:37:18,777
even privately conscious people
which I hope is most of us

739
00:37:20,159 --> 00:37:23,010
don't think a remote
control is being something

740
00:37:23,010 --> 00:37:25,150
that is potentially attackable at all.

741
00:37:25,150 --> 00:37:27,100
We weren't able to find anything really

742
00:37:27,100 --> 00:37:28,920
about the attacks on TV remotes.

743
00:37:28,920 --> 00:37:29,930
And we assume that

744
00:37:29,930 --> 00:37:32,785
because people don't think
they are viable targets

745
00:37:32,785 --> 00:37:35,337
or valuable one, but they are

746
00:37:35,338 --> 00:37:38,250
because of all this new
functionality comes in.

747
00:37:38,250 --> 00:37:40,700
Like the voice control which
means they have a microphone

748
00:37:40,700 --> 00:37:43,290
in RF transmission over long distances.

749
00:37:43,290 --> 00:37:45,360
Everyone heard that IOT is everywhere

750
00:37:45,360 --> 00:37:46,513
and can be easily exploited.

751
00:37:46,513 --> 00:37:49,319
But the staff that hurt
the most are the devices

752
00:37:49,320 --> 00:37:52,993
or any parts of life that
we least expecting it.

753
00:37:54,460 --> 00:37:56,590
And so the good news is

754
00:37:56,590 --> 00:37:58,220
that this attack shouldn't work anymore.

755
00:37:58,220 --> 00:38:02,810
Comcast patch version 1.1
0.4 mitigates all issues

756
00:38:02,810 --> 00:38:03,845
worked about it.

757
00:38:03,845 --> 00:38:07,549
As for future, RF isn't
exactly a new technology

758
00:38:07,550 --> 00:38:08,916
but from a security perspective,

759
00:38:08,916 --> 00:38:11,860
research has remained pretty sparse

760
00:38:11,860 --> 00:38:13,540
on RF based attack vectors

761
00:38:13,540 --> 00:38:16,210
as far as smart devices are concerned

762
00:38:16,210 --> 00:38:18,360
as these devices become more sophisticated

763
00:38:18,360 --> 00:38:20,800
we will see more critical
communication over RF

764
00:38:20,800 --> 00:38:23,168
which means we will probably
run into new threats

765
00:38:23,168 --> 00:38:25,260
in all sorts of RF tech

766
00:38:25,260 --> 00:38:28,600
whether it is smart home stuff
or more industrial devices.

767
00:38:28,600 --> 00:38:32,000
If there is anything we can
be sure is cybersecurity.

768
00:38:32,000 --> 00:38:35,170
It's that when first few
explodes show up somewhere

769
00:38:35,170 --> 00:38:36,610
a lot more will follow.

770
00:38:36,610 --> 00:38:39,630
So stuff that used to be
reserved for nation state actors

771
00:38:39,630 --> 00:38:42,390
like the smart DVX from Snowden's leaks

772
00:38:42,390 --> 00:38:45,223
never leave cyber crime far (indistinct).

773
00:38:45,224 --> 00:38:47,040
And if that's not enough,

774
00:38:47,040 --> 00:38:49,270
the world of work from home means that

775
00:38:49,270 --> 00:38:52,393
the exposure to threats
like these home devices

776
00:38:52,393 --> 00:38:54,982
reaches all the way to enterprises now.

777
00:38:54,982 --> 00:38:57,970
And when there isn't clear separation

778
00:38:57,970 --> 00:38:59,520
of high or low clearance

779
00:38:59,520 --> 00:39:01,700
and when every employee's
home is effectively

780
00:39:01,700 --> 00:39:04,189
an office space and threats to privacy

781
00:39:04,190 --> 00:39:05,720
like a malicious listening device

782
00:39:05,720 --> 00:39:08,372
are now potentially threats
to trade secrets as well.

783
00:39:08,372 --> 00:39:11,060
And security conscious organization that

784
00:39:11,060 --> 00:39:13,100
wouldn't allow an Alexa
in a conference room

785
00:39:13,100 --> 00:39:15,290
can hardly expect an
employee working from home

786
00:39:15,290 --> 00:39:17,712
to take his TV remote out of the room.

787
00:39:18,750 --> 00:39:21,530
So summing up, if you want to
read more about our research

788
00:39:21,530 --> 00:39:23,420
you are welcome to
visit guardicore website

789
00:39:23,420 --> 00:39:25,270
and download the full research report.

790
00:39:25,270 --> 00:39:26,833
Thank you all for listening.

