1
00:00:01,062 --> 00:00:03,530
- Hey humans, I'm Aaron Rosenmund.

2
00:00:03,530 --> 00:00:04,850
And with my full-time job

3
00:00:04,850 --> 00:00:07,770
I'm the director of security for research

4
00:00:07,770 --> 00:00:09,783
and development for
Pluralsight and part-time,

5
00:00:09,783 --> 00:00:11,129
I work for the Air Force

6
00:00:11,130 --> 00:00:13,300
in defensive and cyber operations.

7
00:00:13,300 --> 00:00:15,320
And welcome to my talk

8
00:00:15,320 --> 00:00:18,443
on ransomware, creation,
detection and response.

9
00:00:19,670 --> 00:00:21,547
Now what do I mean by that?

10
00:00:21,547 --> 00:00:23,313
What do we expect from this?

11
00:00:24,210 --> 00:00:25,370
I'm going to walk through

12
00:00:25,370 --> 00:00:27,330
what it's like to create ransomware

13
00:00:27,330 --> 00:00:29,650
as the author of some malware that I made

14
00:00:29,650 --> 00:00:31,032
for training that was actually leaked out.

15
00:00:31,033 --> 00:00:33,314
And that gives me a bit
of a unique perspective

16
00:00:33,314 --> 00:00:35,801
but then talk about some
of the lessons learned

17
00:00:35,801 --> 00:00:39,866
from that creation and those
detections that were done

18
00:00:39,866 --> 00:00:41,820
by different anti-viruses

19
00:00:41,820 --> 00:00:45,330
and some things I was able to
pull from those detections.

20
00:00:45,330 --> 00:00:47,190
And then after that, after we find

21
00:00:47,190 --> 00:00:49,760
out how those detections
imply ways to then

22
00:00:49,760 --> 00:00:52,280
invade those antiviruses,
once again, we'll talk

23
00:00:52,280 --> 00:00:54,300
about what you can do for
instant response to ransomware.

24
00:00:54,300 --> 00:00:56,550
And the whole purpose of this

25
00:00:56,550 --> 00:00:58,690
before we start is to make sure

26
00:00:58,690 --> 00:01:00,440
that you understand the engineering

27
00:01:00,441 --> 00:01:03,831
and practices in malware
detection response capabilities,

28
00:01:03,831 --> 00:01:06,455
but also so that you understand
that you don't have as much

29
00:01:06,455 --> 00:01:08,715
of a false sense of security,
which is another theme

30
00:01:08,715 --> 00:01:11,030
from all the research
that I've been doing,

31
00:01:11,030 --> 00:01:12,945
whether it's air gaps or
whether it's anti-virus.

32
00:01:12,945 --> 00:01:16,830
I don't want you to feel like
you're safe if you're not.

33
00:01:16,830 --> 00:01:18,610
And before we continue,

34
00:01:18,610 --> 00:01:20,940
please make sure that if
you have any questions,

35
00:01:20,940 --> 00:01:23,940
feel free to chat in them,
we're remote this time.

36
00:01:23,940 --> 00:01:26,426
Thanks to COVID so go ahead
and put those in the chat,

37
00:01:26,426 --> 00:01:29,223
and I'll answer them
throughout the presentation.

38
00:01:30,460 --> 00:01:33,229
So I know you're probably
reeling from when I said,

39
00:01:33,230 --> 00:01:34,690
I created ransomware.

40
00:01:34,690 --> 00:01:35,570
That sounds really bad.

41
00:01:35,570 --> 00:01:38,039
It's not anything that
can actually be harmful.

42
00:01:38,040 --> 00:01:41,373
It can't be paid, but let's
talk about how that happened.

43
00:01:42,251 --> 00:01:45,390
I guess took really
far the know your enemy

44
00:01:45,390 --> 00:01:46,798
become your enemy situation.

45
00:01:46,798 --> 00:01:50,130
And I wanted to understand what
all of the requirements for

46
00:01:50,130 --> 00:01:53,048
ransomware and so for a training event

47
00:01:53,049 --> 00:01:56,120
or I wanted to make a
really realistic simulation,

48
00:01:56,120 --> 00:01:59,041
I made some malware, it was
in a contained environment,

49
00:01:59,041 --> 00:02:00,643
and one of the students released it

50
00:02:00,644 --> 00:02:03,500
even though there was an NDA
saying that they should not.

51
00:02:03,500 --> 00:02:05,360
And when it did get released,

52
00:02:05,360 --> 00:02:08,539
it just went on Twitter
and like everybody took it

53
00:02:08,539 --> 00:02:10,840
over and it ended up
getting uploaded everywhere.

54
00:02:10,840 --> 00:02:12,250
And this picture is actually

55
00:02:12,250 --> 00:02:15,010
from Malpedia who did some reversing

56
00:02:15,010 --> 00:02:17,310
on it and called it Ironcat.

57
00:02:17,310 --> 00:02:18,710
I wrote a blog about how it works.

58
00:02:18,710 --> 00:02:21,110
You can go to my website,
find that if you want.

59
00:02:23,330 --> 00:02:25,325
So this ransomware and gets released.

60
00:02:25,325 --> 00:02:27,311
And the very first thing
is it goes on Twitter.

61
00:02:27,312 --> 00:02:29,660
And of course now our hunter team got

62
00:02:29,660 --> 00:02:31,700
a hold of it and starts reversing it,

63
00:02:31,700 --> 00:02:35,280
saying, oh no did REvil or Sodinokibi.

64
00:02:35,280 --> 00:02:36,113
Did they go to Golang?

65
00:02:36,113 --> 00:02:39,072
Cause I used Golang to make this malware.

66
00:02:39,072 --> 00:02:41,738
And then it kind of spread
around and different people,

67
00:02:41,738 --> 00:02:44,210
just translated from Russian,

68
00:02:44,210 --> 00:02:45,538
this is Malpedia picking up.

69
00:02:45,538 --> 00:02:46,583
There's the picture that we got

70
00:02:46,583 --> 00:02:50,390
because of the note that was
dropped, it was called Ironcat

71
00:02:50,390 --> 00:02:52,619
because it had different
strings in it that related

72
00:02:52,620 --> 00:02:55,860
to Ironcat, which occasionally
is my hacker handle online.

73
00:02:55,860 --> 00:03:00,790
And then of course the different
software that will profit

74
00:03:00,790 --> 00:03:02,070
off these sorts of things
started releasing things

75
00:03:02,070 --> 00:03:05,470
and that they could clean
your device of ransomware,

76
00:03:05,470 --> 00:03:06,303
which I thought was excellent.

77
00:03:06,303 --> 00:03:07,847
Because if you look through it,

78
00:03:07,848 --> 00:03:10,800
there's no way to fix
this once you get hit.

79
00:03:10,800 --> 00:03:13,590
And so this lets you know,
that every single one

80
00:03:13,590 --> 00:03:16,680
of these companies, while
also saying that I by myself

81
00:03:16,680 --> 00:03:20,070
was this was this advanced
criminal actor organization

82
00:03:20,070 --> 00:03:22,817
with like advanced evasive
capabilities is also

83
00:03:22,818 --> 00:03:25,490
kind of not really telling
you the truth when they say

84
00:03:25,490 --> 00:03:28,050
that they can fix this problem for you.

85
00:03:28,050 --> 00:03:31,483
That was kind of a really neat
perspective to get as well.

86
00:03:32,390 --> 00:03:35,329
And finally, what happened
is Microsoft named

87
00:03:35,330 --> 00:03:36,690
a whole malware family after that.

88
00:03:36,690 --> 00:03:37,750
And so that exists.

89
00:03:37,750 --> 00:03:39,500
And we'll see this again later.

90
00:03:39,500 --> 00:03:41,850
And then eventually everybody figured out,

91
00:03:41,850 --> 00:03:45,280
hey this is not actually
our REvil or Sodinokibi.

92
00:03:46,150 --> 00:03:47,770
It's actually just someone spoofing it.

93
00:03:47,770 --> 00:03:49,580
And the reason they thought I
was spoofing it is because I

94
00:03:49,580 --> 00:03:51,153
used a previous ransomware response.

95
00:03:51,153 --> 00:03:52,991
Nope, I kind of neutered it

96
00:03:52,991 --> 00:03:55,556
and took the capability to pay out of it.

97
00:03:55,556 --> 00:03:59,208
And a lot of the different
language that was in there

98
00:03:59,208 --> 00:04:00,499
for being able to go to the site

99
00:04:00,499 --> 00:04:02,495
and like pay Bitcoin
and that kind of thing.

100
00:04:02,495 --> 00:04:04,112
But a lot of the note was still the same.

101
00:04:04,112 --> 00:04:05,984
So that's why they
thought it was the same.

102
00:04:05,984 --> 00:04:07,410
But when they were looking

103
00:04:07,410 --> 00:04:08,980
through it and obviously reversing it here

104
00:04:08,980 --> 00:04:11,233
they're finding all these Ironcat strings

105
00:04:11,233 --> 00:04:14,460
because of the way that it operated.

106
00:04:14,460 --> 00:04:16,060
And when I just talked about is,

107
00:04:17,940 --> 00:04:19,331
I wanted to understand
is do you feel safe?

108
00:04:19,331 --> 00:04:20,930
Do you feel safe because all

109
00:04:20,930 --> 00:04:23,110
of these different groups pick this

110
00:04:23,110 --> 00:04:25,855
up and immediately antivirus companies.

111
00:04:25,855 --> 00:04:28,930
And we had detection and all
this stuff that made it like,

112
00:04:28,930 --> 00:04:31,307
okay when ransomware gets
out, detections are ready

113
00:04:31,307 --> 00:04:34,630
and the consumer is protected
and enterprises are protected.

114
00:04:34,630 --> 00:04:37,125
But my real question is,
was that really true?

115
00:04:37,125 --> 00:04:39,801
And that's what this talk's
about, is is that true?

116
00:04:39,801 --> 00:04:42,289
And what are those detecting on?

117
00:04:42,290 --> 00:04:44,293
Is the detection actually correct?

118
00:04:45,160 --> 00:04:46,760
Or is it even really effective at all?

119
00:04:46,760 --> 00:04:49,409
Like is there ways to bypass
the detection that are really

120
00:04:49,410 --> 00:04:51,390
really easy for adversaries?

121
00:04:51,390 --> 00:04:52,223
I didn't know.

122
00:04:52,223 --> 00:04:53,220
And that's what we're gonna kind of figure

123
00:04:53,220 --> 00:04:56,560
out as we walk through this
and to really understand

124
00:04:56,560 --> 00:04:58,850
I'm gonna start with, what
was the Ironcat ransomware?

125
00:04:58,850 --> 00:04:59,720
What does it do?

126
00:04:59,720 --> 00:05:02,534
Okay, so actions taken by this exe.

127
00:05:02,534 --> 00:05:05,106
The first thing was that really based

128
00:05:05,106 --> 00:05:06,990
off the way I wanted to be able to use it

129
00:05:06,990 --> 00:05:08,700
for the training environment, I set it up

130
00:05:08,700 --> 00:05:10,430
so it used arguments.

131
00:05:10,430 --> 00:05:12,550
So when you run it, you had to put in

132
00:05:12,550 --> 00:05:13,700
what mode you want it to run in

133
00:05:13,700 --> 00:05:14,870
whether it's encrypt or decrypt,

134
00:05:14,870 --> 00:05:19,250
and then the key that you wanted
to use to encrypt the data.

135
00:05:19,250 --> 00:05:20,973
And so this ended up being
something interesting

136
00:05:20,973 --> 00:05:23,160
because it made it harder to reverse.

137
00:05:23,160 --> 00:05:24,210
And we'll see that later too.

138
00:05:24,210 --> 00:05:26,460
But every time you didn't put
it in the correct argument

139
00:05:26,460 --> 00:05:29,799
or ran it with no arguments
or put in the wrong argument

140
00:05:29,800 --> 00:05:31,220
it would give you kind
of a different message.

141
00:05:31,220 --> 00:05:33,090
So you can see the BeepBoop,
here with the error

142
00:05:33,090 --> 00:05:35,750
you can see the cheeseburger situation.

143
00:05:35,750 --> 00:05:37,050
And I'm Ironcat, and you're not,

144
00:05:37,050 --> 00:05:38,960
so that's why it was called Ironcat.

145
00:05:38,960 --> 00:05:42,380
And the main actions that
this thing took were to

146
00:05:42,380 --> 00:05:44,400
use AES to encrypt the files.

147
00:05:44,400 --> 00:05:46,179
It dropped the payload
called pay_the_piper

148
00:05:46,180 --> 00:05:47,737
which was that kind of spoofed note.

149
00:05:47,737 --> 00:05:51,110
And then at the very end,
after encrypting those files

150
00:05:51,110 --> 00:05:54,410
it dropped four batch files
into the C Windows folder.

151
00:05:54,410 --> 00:05:56,564
The first one was a Sethc
back door and then it ran

152
00:05:56,564 --> 00:06:00,760
a batch file to create a
registry backdoor using Utilman

153
00:06:00,760 --> 00:06:02,640
and then deleted the volume shadow copies

154
00:06:02,640 --> 00:06:03,930
like normal ransomware would

155
00:06:03,930 --> 00:06:05,880
and then clears all the events logs.

156
00:06:05,880 --> 00:06:09,290
Now before all that could happen it also,

157
00:06:09,290 --> 00:06:11,340
they simulate real ransomware
and have network traffic

158
00:06:11,340 --> 00:06:14,789
send out a packet to what was at the time,

159
00:06:14,790 --> 00:06:17,906
a in range domain only called Fakebook

160
00:06:17,906 --> 00:06:19,494
that simulated Facebook.

161
00:06:19,494 --> 00:06:22,214
And it was a red herring IP and the header

162
00:06:22,214 --> 00:06:24,869
and also like some
different UTF characters.

163
00:06:24,869 --> 00:06:27,900
I think there were Chinese
characters just to kind of throw

164
00:06:27,900 --> 00:06:30,280
off people for attribution as well.

165
00:06:30,280 --> 00:06:31,936
So that's what it did.

166
00:06:31,937 --> 00:06:34,649
It had a base 64 encoded
password that was sent

167
00:06:34,649 --> 00:06:35,800
in that packet.

168
00:06:35,800 --> 00:06:36,871
So hopefully if you found the packet

169
00:06:36,871 --> 00:06:38,859
you could then decrypt your malware.

170
00:06:38,860 --> 00:06:40,110
That was the whole point.

171
00:06:41,090 --> 00:06:43,340
Now, when this was uploaded it started to

172
00:06:43,340 --> 00:06:46,034
spread around in VirusTotal
from the top right

173
00:06:46,035 --> 00:06:48,340
you can see there were
multiple different files.

174
00:06:48,340 --> 00:06:50,779
So for this specific training event

175
00:06:50,779 --> 00:06:54,630
we had one that had a
specific file and programs.

176
00:06:54,630 --> 00:06:56,978
It was inetpub, which is for

177
00:06:56,978 --> 00:07:01,518
www-data for websites on IIS

178
00:07:01,518 --> 00:07:04,039
whether it was the user's
file and different kinds

179
00:07:04,040 --> 00:07:05,150
of user files.

180
00:07:05,150 --> 00:07:06,364
In each one of these that was uploaded,

181
00:07:06,364 --> 00:07:08,729
I then uploaded all of
them myself afterwards

182
00:07:08,730 --> 00:07:11,060
also so that they would be detected

183
00:07:11,060 --> 00:07:13,726
and I had something slightly
different about them.

184
00:07:13,726 --> 00:07:15,387
And so really the only main thing

185
00:07:15,387 --> 00:07:16,981
is its exactly the same code.

186
00:07:16,981 --> 00:07:19,807
The only thing that was
really different was the path

187
00:07:19,807 --> 00:07:22,110
that it went to encrypt.

188
00:07:22,110 --> 00:07:24,930
And so here we can see it matches the rule

189
00:07:24,930 --> 00:07:27,020
for QNAP, which is interesting.

190
00:07:27,020 --> 00:07:28,260
Like why is it making that match?

191
00:07:28,260 --> 00:07:30,580
And just some of the paths that it found.

192
00:07:30,580 --> 00:07:33,370
And we have that someone else reporting

193
00:07:33,370 --> 00:07:35,597
that it's Snatch ransomware
and intezer picked it up

194
00:07:35,597 --> 00:07:37,183
and this Thor Yara rule.

195
00:07:37,183 --> 00:07:38,159
Now, as we go through,

196
00:07:38,160 --> 00:07:40,138
this is a different
file and this one had 39

197
00:07:40,138 --> 00:07:44,700
out of 69 detections and
intezer again, Thor again,

198
00:07:44,701 --> 00:07:47,390
same thing with the Snatch malware

199
00:07:47,390 --> 00:07:48,880
and then like slightly different reports

200
00:07:48,880 --> 00:07:50,403
on what actually ran.

201
00:07:51,720 --> 00:07:54,730
And now when we go to the SQL versions

202
00:07:54,730 --> 00:07:56,920
this is trying to hit a SQL server.

203
00:07:56,920 --> 00:07:58,620
It was 38 instead of 39.

204
00:07:58,620 --> 00:08:01,330
So that's one less rule
with the exact same code.

205
00:08:01,330 --> 00:08:03,070
So who's missing what, right?

206
00:08:03,070 --> 00:08:05,690
Like that's what I started
to want to understand.

207
00:08:05,690 --> 00:08:08,979
Also in this one, there was
no automated signatures.

208
00:08:08,979 --> 00:08:11,849
So though this was uploaded
around the same time.

209
00:08:11,850 --> 00:08:13,799
There were no Yara signatures
for this one specifically

210
00:08:13,799 --> 00:08:16,558
and I wanted to know why.

211
00:08:16,559 --> 00:08:18,119
Next we have the same results

212
00:08:18,119 --> 00:08:20,822
but this one does have the
Thor Apt Scanner picking it up.

213
00:08:20,822 --> 00:08:25,810
And for whatever reason,
for this specific sample

214
00:08:25,810 --> 00:08:27,396
it detected that there was a Registry Add

215
00:08:27,396 --> 00:08:29,170
for the debugger backdoor.

216
00:08:29,170 --> 00:08:30,340
But only on this one even though

217
00:08:30,340 --> 00:08:32,659
that code existed in all of them.

218
00:08:32,659 --> 00:08:35,284
And then again, I took the original file

219
00:08:35,284 --> 00:08:36,780
changed it to just .hta,

220
00:08:36,780 --> 00:08:38,819
I didn't actually change any code.

221
00:08:38,820 --> 00:08:40,549
And all of a sudden I have more detections

222
00:08:40,549 --> 00:08:42,819
and instead of Qnap, it's Yomi Hunter.

223
00:08:42,820 --> 00:08:45,220
I have no idea why but what that tells me,

224
00:08:45,220 --> 00:08:48,427
just inference the same,
just the name of the file

225
00:08:48,427 --> 00:08:50,785
generates a different kind of analysis

226
00:08:50,785 --> 00:08:53,310
and is used in the detection of malware.

227
00:08:53,310 --> 00:08:55,319
So that was like an interesting hint

228
00:08:55,320 --> 00:08:58,270
for how these detections are
done by the different engines.

229
00:08:59,630 --> 00:09:03,140
And so when we look at
I users hta, sure enough

230
00:09:03,140 --> 00:09:04,595
Microsoft still had this as Ironcat.

231
00:09:04,595 --> 00:09:06,150
So that's a pretty good detection

232
00:09:06,150 --> 00:09:08,810
but many others had it as
something completely different

233
00:09:08,810 --> 00:09:10,542
than they had it previously.

234
00:09:13,322 --> 00:09:14,286
There's all these different files

235
00:09:14,286 --> 00:09:17,500
but let's talk about the
anatomy of ransomware.

236
00:09:17,500 --> 00:09:18,950
How should detections be done

237
00:09:18,950 --> 00:09:21,302
if we just think about
what the requirements are

238
00:09:21,302 --> 00:09:23,754
for making ransomware in the first place?

239
00:09:23,754 --> 00:09:26,780
Well, you wanna target
a specific set of files.

240
00:09:26,780 --> 00:09:28,949
Ideally, I have files that
are important to the user

241
00:09:28,950 --> 00:09:30,680
to the organization because
you want to properly

242
00:09:30,680 --> 00:09:32,969
perform your business, right?

243
00:09:32,970 --> 00:09:34,723
You're gonna open, change those files

244
00:09:34,723 --> 00:09:36,290
and you're gonna re-save them like over

245
00:09:36,290 --> 00:09:37,780
and over and over rapidly.

246
00:09:37,780 --> 00:09:39,367
And it probably requires admin access

247
00:09:39,368 --> 00:09:41,520
unless you only need
user access just to get

248
00:09:41,520 --> 00:09:45,090
to that specific user profile,
if that's okay then fine.

249
00:09:45,090 --> 00:09:46,973
But ideally it has admin access.

250
00:09:48,530 --> 00:09:49,757
The next part is the drops backdoors,

251
00:09:49,757 --> 00:09:51,986
generally that's so the
actor can get back in

252
00:09:51,986 --> 00:09:55,150
and continue access whether
that's after the ransom's paid

253
00:09:55,150 --> 00:09:57,630
or during, sometimes I've seen the mess up

254
00:09:57,630 --> 00:09:59,511
and have to get back in,

255
00:09:59,511 --> 00:10:01,852
and that's not a 100% requirement.

256
00:10:01,852 --> 00:10:03,709
It doesn't have to be.

257
00:10:03,710 --> 00:10:05,060
But then the next piece
is you really want to

258
00:10:05,060 --> 00:10:07,180
delete backups, delete
volume shadow copies,

259
00:10:07,180 --> 00:10:10,410
so the victim can't recover and delete

260
00:10:10,410 --> 00:10:12,150
the Windows event logs just
kind of cover your tracks

261
00:10:12,150 --> 00:10:14,030
because why not while you're there?

262
00:10:14,030 --> 00:10:16,391
Also you need to get a key
back that is associated

263
00:10:16,391 --> 00:10:18,949
with that deployment of ransomware

264
00:10:18,950 --> 00:10:21,020
so that when the customer hopefully pays

265
00:10:21,020 --> 00:10:23,398
you can use that key to unlock those files

266
00:10:23,398 --> 00:10:25,760
for them to continue
your business practice,

267
00:10:25,760 --> 00:10:27,610
depending on who the organization is

268
00:10:27,610 --> 00:10:28,854
and what their actual intent is.

269
00:10:28,854 --> 00:10:31,070
But that's kind of another requirement.

270
00:10:31,070 --> 00:10:33,920
Also, you can't break the system.

271
00:10:33,920 --> 00:10:37,370
So knowing that all of
those things have to happen

272
00:10:37,370 --> 00:10:40,220
we didn't really see that
in any of the analysis.

273
00:10:40,220 --> 00:10:42,250
But why, like what did it miss?

274
00:10:42,250 --> 00:10:44,665
Well didn't see the
batch drop of the files.

275
00:10:44,665 --> 00:10:48,237
It didn't see the event
logs that were deleted

276
00:10:48,237 --> 00:10:50,449
and VSS copies deleted.

277
00:10:50,450 --> 00:10:52,437
C2 domains for the DNS
request it didn't catch that

278
00:10:52,437 --> 00:10:55,890
or at least say what
DNS requests were made.

279
00:10:55,890 --> 00:10:58,486
There's no mention of like
keys being in the packet

280
00:10:58,486 --> 00:11:01,200
even from the people
who did manual analysis

281
00:11:01,200 --> 00:11:02,492
nor the Sethc back door.

282
00:11:02,492 --> 00:11:05,790
And the file extension was
initially missed as well.

283
00:11:05,790 --> 00:11:07,774
Like if you saw the reports
before my blog came out,

284
00:11:07,774 --> 00:11:09,930
they didn't catch it,
they said DoT encrypted

285
00:11:09,930 --> 00:11:12,890
is actually kind of using
different ransomware groups

286
00:11:12,890 --> 00:11:14,199
saying this is the file that's dropped

287
00:11:14,200 --> 00:11:15,370
even though it wasn't true

288
00:11:15,370 --> 00:11:18,560
which is also just really interesting.

289
00:11:18,560 --> 00:11:19,800
And why, why was it all missed?

290
00:11:19,800 --> 00:11:22,203
Well, if I go back and think about it,

291
00:11:22,203 --> 00:11:27,203
adding the arguments as a
requirement really made it where

292
00:11:27,626 --> 00:11:30,550
when it tried to run in
the sandbox, it couldn't

293
00:11:30,550 --> 00:11:32,469
because those arguments weren't provided,

294
00:11:32,470 --> 00:11:34,058
so instead you just get, these sandboxes

295
00:11:34,058 --> 00:11:36,620
getting silly messages from Ironcat

296
00:11:36,620 --> 00:11:38,070
and no real execution happens.

297
00:11:38,070 --> 00:11:41,400
So kind of by accident,
this was a defensive

298
00:11:41,400 --> 00:11:43,709
evasion or sandbox evasion method.

299
00:11:43,710 --> 00:11:45,667
So that's one interesting finding.

300
00:11:45,667 --> 00:11:48,021
And also a lot of this is focused only on

301
00:11:48,021 --> 00:11:50,589
static binary analysis and Golang

302
00:11:50,590 --> 00:11:52,410
it's kind of difficult to analyze for now.

303
00:11:52,410 --> 00:11:53,530
It depends who you can talk to

304
00:11:53,530 --> 00:11:54,824
but it's just different looking than

305
00:11:54,825 --> 00:11:57,763
like a C++ program that's been compiled.

306
00:11:59,030 --> 00:12:00,035
Okay.

307
00:12:00,035 --> 00:12:02,358
That's all of the kind of
characteristics of what happened

308
00:12:02,359 --> 00:12:06,070
with this creation and some
of the static analysis.

309
00:12:06,070 --> 00:12:07,390
So let's talk about detection,

310
00:12:07,390 --> 00:12:10,958
like what was good in the
detection that made sense?

311
00:12:10,958 --> 00:12:12,350
Well, one thing that was good is,

312
00:12:12,350 --> 00:12:13,710
as kind of as time went on,

313
00:12:13,710 --> 00:12:15,169
these samples are analyzed and intezer

314
00:12:15,169 --> 00:12:20,169
found that it was unique codes
when they cross looked at

315
00:12:20,470 --> 00:12:22,140
code and use fuzzy hashes to understand

316
00:12:22,140 --> 00:12:23,179
what code is being used.

317
00:12:23,179 --> 00:12:25,006
Now, again, it was interesting cause this

318
00:12:25,006 --> 00:12:26,617
doesn't actually match any of the hashes

319
00:12:26,618 --> 00:12:28,422
of any of the files that I had.

320
00:12:28,422 --> 00:12:31,970
I don't know who uploaded this
or what it was specifically

321
00:12:31,970 --> 00:12:33,180
but it still seemed to match

322
00:12:33,180 --> 00:12:35,989
in like what it did and
with the name tags stuff.

323
00:12:35,990 --> 00:12:38,447
And so it was saying it was
unique code, which is accurate.

324
00:12:38,447 --> 00:12:41,030
I didn't make all of
it from scratch myself.

325
00:12:41,030 --> 00:12:43,473
And it did properly
recognize it as Golang.

326
00:12:43,474 --> 00:12:46,030
Where, when you look
at VirusTotal's report

327
00:12:46,030 --> 00:12:48,030
it thought it was .net. for some reason.

328
00:12:49,040 --> 00:12:51,651
Now JOE sandbox really did
detect that there was a

329
00:12:51,651 --> 00:12:55,359
a Tor address in the text file

330
00:12:55,360 --> 00:12:58,275
which tells me a lot of this
analysis is being done based

331
00:12:58,275 --> 00:13:00,924
on clear strings in the binary.

332
00:13:00,924 --> 00:13:02,900
And then beyond that, it was just saying,

333
00:13:02,900 --> 00:13:04,458
hey the biggest reason
we think this is bad is

334
00:13:04,458 --> 00:13:06,930
the signatures cause other
people found signatures

335
00:13:06,930 --> 00:13:07,762
instead of that.

336
00:13:07,763 --> 00:13:09,390
And that's the top thing on there.

337
00:13:09,390 --> 00:13:10,470
So, okay.

338
00:13:10,470 --> 00:13:11,626
Maybe we remove the Tor file.

339
00:13:11,626 --> 00:13:13,353
We don't have to worry about it.

340
00:13:14,250 --> 00:13:17,819
Now, Malware Bazzar did
actually categorize this

341
00:13:17,819 --> 00:13:20,914
as Sodinokibi, and that's
interesting because again

342
00:13:20,914 --> 00:13:22,630
it's being categorized that way

343
00:13:22,630 --> 00:13:24,670
because of that spoof ransomware note.

344
00:13:24,670 --> 00:13:27,069
Now they also got Ironcat
after a while because

345
00:13:27,070 --> 00:13:29,238
of the changes, but
this all tells me maybe

346
00:13:29,238 --> 00:13:31,166
things that these
antiviruses are looking at

347
00:13:31,166 --> 00:13:33,333
as tells for detection.

348
00:13:34,710 --> 00:13:36,953
And then finally Yara
signatures were created

349
00:13:36,953 --> 00:13:39,170
that was able to download and
we'll be able to test those

350
00:13:39,170 --> 00:13:41,380
out and see what they were doing also.

351
00:13:41,380 --> 00:13:44,230
So based on all that information

352
00:13:44,230 --> 00:13:45,063
what were these detections?

353
00:13:45,063 --> 00:13:48,230
Well, there was an automatically
generated Yara signature,

354
00:13:48,230 --> 00:13:49,570
probably the ransom note strings

355
00:13:49,570 --> 00:13:50,820
definitely the Tor address.

356
00:13:50,820 --> 00:13:52,910
One thing detected that
there was a registry add.

357
00:13:52,910 --> 00:13:54,510
So that's something to consider.

358
00:13:55,400 --> 00:13:57,252
Batch file execution probably
should have been a detection

359
00:13:57,253 --> 00:13:58,320
but I didn't see it anywhere.

360
00:13:58,320 --> 00:13:59,794
So that's something to keep in mind,

361
00:13:59,794 --> 00:14:03,030
for if I want to try to make this evasive.

362
00:14:03,030 --> 00:14:04,324
And in my mind, what you should detect on

363
00:14:04,324 --> 00:14:06,849
is probably concurrent access to files,

364
00:14:06,850 --> 00:14:09,311
like very quick access
to files by some binary,

365
00:14:09,311 --> 00:14:11,303
especially on signed binary.

366
00:14:12,242 --> 00:14:15,829
And so now the thing that I want to do is

367
00:14:15,830 --> 00:14:18,100
what's the least amount
of change I can make

368
00:14:18,100 --> 00:14:19,820
to then evade these antiviruses.

369
00:14:19,820 --> 00:14:21,887
So I'm gonna make small
changes in this demo that's

370
00:14:21,887 --> 00:14:23,757
about to come up, I'm
gonna make small changes.

371
00:14:23,758 --> 00:14:26,570
And then we're going to
see what the reaction is.

372
00:14:26,570 --> 00:14:27,403
I'm gonna change function names.

373
00:14:27,403 --> 00:14:30,500
We're gonna look at a custom ransom note.

374
00:14:30,500 --> 00:14:32,330
I'd need to remove that Tor address,

375
00:14:32,330 --> 00:14:34,389
probably we'll end up having
to remove the registry add.

376
00:14:34,389 --> 00:14:37,070
And then if I wanna use
a different backdoor,

377
00:14:37,070 --> 00:14:37,930
here's an option.

378
00:14:37,930 --> 00:14:39,890
And if I really have to, I'll have to get

379
00:14:39,890 --> 00:14:40,949
to the behavioral analysis.

380
00:14:40,950 --> 00:14:42,150
So let's check that out.

381
00:14:43,324 --> 00:14:46,280
Now, those evasion ideas
are just a hypothesis.

382
00:14:46,280 --> 00:14:49,180
Now let's take a look at
how this actually plays out.

383
00:14:49,180 --> 00:14:52,540
Keep in mind the idea here is that based

384
00:14:52,540 --> 00:14:55,520
on the variations in the
detection that I just went over

385
00:14:55,520 --> 00:14:56,981
what are the least amount of changes

386
00:14:56,981 --> 00:15:00,276
that I can make to completely
evade Windows Defender,

387
00:15:00,276 --> 00:15:02,750
the Yara Signature and VirusTotal?

388
00:15:02,750 --> 00:15:04,100
That's my goal.

389
00:15:04,100 --> 00:15:06,860
So first up, I want you to
see what I'm working with.

390
00:15:06,860 --> 00:15:08,690
It's the same original files.

391
00:15:08,690 --> 00:15:11,347
So here's the md5 for the iaiusers.exe,

392
00:15:12,846 --> 00:15:17,700
iai here stands for Ironcat,
of course, or I am Ironcat.

393
00:15:17,700 --> 00:15:20,079
And here's the original
md5 for the variation

394
00:15:20,079 --> 00:15:23,193
that encrypts just a
specific different folder.

395
00:15:24,410 --> 00:15:27,520
Now those are the same md5s
that you saw on VirusTotal

396
00:15:27,520 --> 00:15:29,377
and you can also see here.

397
00:15:29,377 --> 00:15:32,722
And this md5 has 52 out of 70 detections.

398
00:15:32,722 --> 00:15:35,210
And then the one for the file location

399
00:15:35,210 --> 00:15:37,650
in a different area has 38

400
00:15:37,650 --> 00:15:40,819
out of 69 detections on VirusTotal.

401
00:15:40,820 --> 00:15:43,510
Well last but not least
the Yara Signature.

402
00:15:43,510 --> 00:15:44,780
And I'm not really sure
how much effort this is

403
00:15:44,780 --> 00:15:46,470
it did say it was automated.

404
00:15:46,470 --> 00:15:48,010
But then when I look at it

405
00:15:48,010 --> 00:15:49,672
it has a user called Florian Roth

406
00:15:49,672 --> 00:15:52,530
but I'm pretty sure he
just made the automation.

407
00:15:52,530 --> 00:15:54,968
You can look at automation
as being a really heavy toll

408
00:15:54,969 --> 00:15:59,558
in itself, but either way here's
the original Yara signature

409
00:15:59,558 --> 00:16:02,270
and it's highly effective
against all of the original

410
00:16:02,270 --> 00:16:04,180
samples that are in this folder.

411
00:16:04,180 --> 00:16:05,911
So that means at the very
least, that the different names

412
00:16:05,911 --> 00:16:08,099
and different hashes and
different target files

413
00:16:08,100 --> 00:16:11,310
aren't throwing the Yara
signature off that sense.

414
00:16:11,310 --> 00:16:13,867
So it seems like that
was a pretty good job.

415
00:16:13,867 --> 00:16:16,520
And a quick look at that
signature file shows

416
00:16:16,520 --> 00:16:19,670
that there's nine detection
sequences with the criteria

417
00:16:19,670 --> 00:16:23,000
for detection being that
seven of them are matched.

418
00:16:23,000 --> 00:16:26,140
And the file has to also be
smaller than a specific size

419
00:16:26,140 --> 00:16:27,721
which brings to mind another point

420
00:16:27,721 --> 00:16:30,683
like maybe I just need to make
really hefty sized malware

421
00:16:30,683 --> 00:16:32,489
and not worry about detection evasion.

422
00:16:32,489 --> 00:16:35,073
But that's probably a
different talk completely.

423
00:16:38,110 --> 00:16:39,105
Next for the test machine.

424
00:16:39,105 --> 00:16:41,097
And rest assured there is no tomfoolery

425
00:16:41,097 --> 00:16:42,586
or hijinks going on here.

426
00:16:42,586 --> 00:16:45,170
It's a fully patched Windows 10 with

427
00:16:45,170 --> 00:16:46,902
fully updated signatures.

428
00:16:46,903 --> 00:16:48,875
When I dropped the known
malware on the desktop

429
00:16:48,875 --> 00:16:51,038
it's instantly detected and removed

430
00:16:51,038 --> 00:16:54,563
and here we have a lovely
Ironcat malware family alert.

431
00:16:57,130 --> 00:16:57,963
So great.

432
00:16:57,963 --> 00:17:00,709
It seems like we're super safe
and Microsoft's on top of it.

433
00:17:00,710 --> 00:17:03,230
Well, when you look at
many of those detections

434
00:17:03,230 --> 00:17:05,569
that we just talked about earlier,

435
00:17:05,569 --> 00:17:08,163
it seems like a lot of
them alerted on Sodinokibi.

436
00:17:09,640 --> 00:17:11,415
Probably based on the copied ransom note

437
00:17:11,415 --> 00:17:14,973
from a incident response that
I did to an REvil incident.

438
00:17:15,940 --> 00:17:19,089
So maybe based on that conclusion
or what I'm seeing there

439
00:17:19,089 --> 00:17:22,069
with those detections, if I
change the ransom note that will

440
00:17:22,069 --> 00:17:24,683
at least throw off these
detections a little bit.

441
00:17:25,530 --> 00:17:27,629
So here I changed the
ransom note to say even

442
00:17:27,630 --> 00:17:29,330
more things that an Ironcat would say,

443
00:17:29,330 --> 00:17:31,870
and it's completely
happenstance that cats don't

444
00:17:31,870 --> 00:17:33,969
have very good written English either.

445
00:17:33,970 --> 00:17:36,160
And it has nothing to do with
my terrible typing skills

446
00:17:36,160 --> 00:17:38,230
and occasional issues with attention

447
00:17:38,230 --> 00:17:40,080
to grammatical and spelling accuracy.

448
00:17:42,240 --> 00:17:43,930
In general this is not
completely different

449
00:17:43,930 --> 00:17:45,510
from the original file on the left with

450
00:17:45,510 --> 00:17:47,253
exception to this ransom note.

451
00:17:47,253 --> 00:17:51,530
Now I recompile this
into iai as back view one

452
00:17:51,530 --> 00:17:54,060
and it's time to test out on
the sweet Windows Defender

453
00:17:54,060 --> 00:17:55,342
detection capabilities,

454
00:17:56,340 --> 00:17:57,812
and to prove that this
isn't a box of mirrors,

455
00:17:57,813 --> 00:17:59,450
you can first see the threat detection

456
00:17:59,450 --> 00:18:00,692
from the previous file.

457
00:18:00,692 --> 00:18:03,657
Then check out that real
time protection is on

458
00:18:03,657 --> 00:18:05,258
as well as cloud protection.

459
00:18:05,258 --> 00:18:08,020
And I did not turn on the
sample submission here

460
00:18:08,020 --> 00:18:09,350
'cause I don't want this to get burned

461
00:18:09,350 --> 00:18:10,949
before I even finished the demo.

462
00:18:12,030 --> 00:18:15,220
Now I'm copying the new
malware onto the desktop

463
00:18:15,220 --> 00:18:18,307
and well, there's no detection.

464
00:18:19,898 --> 00:18:22,701
But that's okay, evading
these hashed based detections

465
00:18:22,701 --> 00:18:24,858
are one thing but surely there's no way

466
00:18:24,858 --> 00:18:26,715
that this will be allowed to run, right?

467
00:18:26,715 --> 00:18:28,831
I mean, it's just the exact same code

468
00:18:28,831 --> 00:18:31,432
with a different message from a cat.

469
00:18:31,432 --> 00:18:34,670
Well, let's find out,
you're on the desktop.

470
00:18:34,670 --> 00:18:36,389
I set up to run the executable

471
00:18:36,389 --> 00:18:38,740
with required command arguments.

472
00:18:38,740 --> 00:18:42,120
And well, of course this
wouldn't be a live demo

473
00:18:42,120 --> 00:18:43,168
without a few mistakes.

474
00:18:43,169 --> 00:18:46,110
I'm just trying to make sure
this is realistic for you.

475
00:18:46,110 --> 00:18:49,360
One requirement for the
Ironcat sample to run is

476
00:18:49,360 --> 00:18:51,956
for it to be able to resolve
and send a HTTP packet

477
00:18:51,957 --> 00:18:53,970
for fakebook.com.

478
00:18:53,970 --> 00:18:54,803
Okay.

479
00:18:54,803 --> 00:18:57,300
So this seems like I forgot
to enable the Hyper-V adapter,

480
00:18:57,300 --> 00:18:58,582
no biggie.

481
00:18:59,810 --> 00:19:01,029
Enabling that, I give it another shot.

482
00:19:01,029 --> 00:19:02,550
And it also means that
that cloud protection

483
00:19:02,550 --> 00:19:05,353
is also fully enabled,
still no detections.

484
00:19:05,353 --> 00:19:07,827
And then here we go to run it.

485
00:19:07,827 --> 00:19:10,170
And oh, there's a pop-up there.

486
00:19:10,170 --> 00:19:11,590
Oh no, no, that's not Windows Defender,

487
00:19:11,590 --> 00:19:13,169
it's just letting you know

488
00:19:13,170 --> 00:19:15,400
in a friendly way that files
are waiting in the queue.

489
00:19:15,400 --> 00:19:18,426
Files waiting in queue to
be encrypted, of course,

490
00:19:18,426 --> 00:19:19,820
but there's still time.

491
00:19:19,820 --> 00:19:23,370
And as it finishes encrypting,
now we see an alert,

492
00:19:23,371 --> 00:19:26,370
but it seems like it actually
ran quite a bit there

493
00:19:26,370 --> 00:19:27,989
before that alert happened.

494
00:19:27,990 --> 00:19:29,763
So using the get.mpthreat command,

495
00:19:29,763 --> 00:19:32,062
you can see that this is
actually a different alert

496
00:19:32,063 --> 00:19:34,260
from the original Ironcat alert.

497
00:19:34,260 --> 00:19:36,540
Instead, this is a behavioral alert,

498
00:19:36,540 --> 00:19:38,010
that seems like it's
something that's gonna be more

499
00:19:38,010 --> 00:19:41,400
difficult to get past than
just changing the hash.

500
00:19:41,400 --> 00:19:42,635
So it seems like we have execution.

501
00:19:42,635 --> 00:19:45,056
And when I take a look
at these sample files,

502
00:19:45,056 --> 00:19:48,130
I see that the note did drop
and the text of this document

503
00:19:48,130 --> 00:19:49,800
here was indeed encrypted.

504
00:19:49,800 --> 00:19:51,909
All right, I'll exit out of that.

505
00:19:51,910 --> 00:19:53,050
And when you exit out of this window

506
00:19:53,050 --> 00:19:55,127
there's all the telltale
signs of ransomware execution.

507
00:19:55,127 --> 00:19:57,476
The desktop images is
different and links are broken

508
00:19:57,476 --> 00:19:59,433
and there's notes left in every folder.

509
00:20:01,430 --> 00:20:02,920
And that by itself is interesting.

510
00:20:02,920 --> 00:20:04,878
This is saying that an
up-to-date Windows Defender

511
00:20:04,878 --> 00:20:08,294
is essentially only checking
the contents of the ransom note

512
00:20:08,295 --> 00:20:11,360
in the strings of the
binary for detection.

513
00:20:11,360 --> 00:20:12,193
And if you change that

514
00:20:12,193 --> 00:20:15,098
well now at least I have
execution on the box.

515
00:20:15,098 --> 00:20:18,450
It may actually get detected,
but it's a little late

516
00:20:18,450 --> 00:20:20,850
because the ransomware
already kind of happened.

517
00:20:21,700 --> 00:20:22,620
But I want more than that.

518
00:20:22,620 --> 00:20:23,851
I don't want to just trick Defender,

519
00:20:23,852 --> 00:20:26,290
I don't want this to be detected at all.

520
00:20:26,290 --> 00:20:27,123
And it should be more of a challenge

521
00:20:27,123 --> 00:20:29,740
to get past these
behavioral detections right?

522
00:20:29,740 --> 00:20:32,153
Well, now it's time for version two.

523
00:20:33,060 --> 00:20:35,659
So what do I change now,
going over what I know

524
00:20:35,660 --> 00:20:37,349
I realized that this is
string based detection.

525
00:20:37,349 --> 00:20:39,760
And so I'm going to go ahead and change

526
00:20:39,760 --> 00:20:42,470
significantly unique
strings that occur elsewhere

527
00:20:42,470 --> 00:20:43,750
in the binary.

528
00:20:43,750 --> 00:20:45,057
And it also seemed to have issues

529
00:20:45,057 --> 00:20:47,752
with access to ntuser file.

530
00:20:47,752 --> 00:20:50,725
And when I look at the name
of the behavioral alert

531
00:20:50,725 --> 00:20:53,803
it was called accessibility elevation F.

532
00:20:54,774 --> 00:20:57,773
Well one of those batch
files that's dropped changes

533
00:20:57,773 --> 00:21:01,110
the Sethc executable,
which is the binary in

534
00:21:01,110 --> 00:21:02,831
Windows System32 that's associated

535
00:21:02,832 --> 00:21:04,933
with accessibility features.

536
00:21:06,420 --> 00:21:08,410
So that's fine, I may not be
able to use that back door,

537
00:21:08,410 --> 00:21:10,056
but I can use a different backdoor later,

538
00:21:10,056 --> 00:21:12,470
for now I'll just remove
that as a function

539
00:21:12,470 --> 00:21:15,377
because even if all I do is
achieve ransomware execution

540
00:21:15,377 --> 00:21:17,293
that's still the end game goal.

541
00:21:19,371 --> 00:21:21,050
And one last touch.

542
00:21:21,050 --> 00:21:23,760
I noticed that some of the
manual reverse engineers

543
00:21:23,760 --> 00:21:26,157
found absolute paths
reflecting the folder structure

544
00:21:26,157 --> 00:21:28,620
I used when creating the project.

545
00:21:28,620 --> 00:21:31,820
This time I'm gonna use
the -trimpath option when

546
00:21:31,820 --> 00:21:34,812
I compile to make the path
strings relative instead.

547
00:21:36,150 --> 00:21:38,410
But before I go straight
to the Windows detection

548
00:21:38,410 --> 00:21:41,550
I wanted to check on the
Yara signature detection.

549
00:21:41,550 --> 00:21:43,690
So first I'm gonna go back
to version one and check

550
00:21:43,690 --> 00:21:47,218
to see that yeah, the Yara
signature is still hitting seven

551
00:21:47,218 --> 00:21:49,976
of the nine sequences,
which was really the cap.

552
00:21:49,976 --> 00:21:52,750
So we got rid of two of the sequences.

553
00:21:52,750 --> 00:21:54,619
And honestly, if you think
about what just happened

554
00:21:54,619 --> 00:21:56,730
that's saying that this
Yara signature that was

555
00:21:56,730 --> 00:21:57,954
generated is doing a better job

556
00:21:57,954 --> 00:22:00,653
than a fully patched
Window Defender signatures.

557
00:22:01,630 --> 00:22:03,710
So now when I test the
version two that I just

558
00:22:03,710 --> 00:22:06,750
compiled changing all
those other unique strings

559
00:22:06,750 --> 00:22:09,983
we did nothing, zero detections,

560
00:22:11,645 --> 00:22:13,995
which honestly was much
easier than I expected.

561
00:22:13,995 --> 00:22:17,659
So now that I have the box
checked for Yara signature

562
00:22:17,660 --> 00:22:20,766
evasion I need to test
Windows with these changes

563
00:22:20,766 --> 00:22:24,373
and see if I got past that
behavioral detection as well.

564
00:22:26,480 --> 00:22:27,970
So I reverted this device back,

565
00:22:27,970 --> 00:22:30,920
I'm using hyper-V and now
run the second version.

566
00:22:30,920 --> 00:22:32,770
And of course, again I
forgot to turn off the

567
00:22:32,770 --> 00:22:34,834
external networking,
but this at least shows

568
00:22:34,834 --> 00:22:37,203
after I get it working, that my addition

569
00:22:37,203 --> 00:22:41,000
of error strings for the
HTTP error is also working.

570
00:22:41,000 --> 00:22:43,463
So there was some change
to the code there as well.

571
00:22:44,620 --> 00:22:46,320
Now this time it runs and guess what?

572
00:22:46,320 --> 00:22:51,320
Big reveal, zero detections,
no Ironcat detection

573
00:22:52,140 --> 00:22:55,680
and no additional behavior
detections with full run-through.

574
00:22:55,680 --> 00:22:58,730
One last test is VirusTotal,

575
00:22:58,730 --> 00:23:02,144
and surely with its sandbox
execution and nearly 70 engines,

576
00:23:02,144 --> 00:23:04,106
it's not gonna be as easy as just changing

577
00:23:04,106 --> 00:23:07,193
some clear text strings that
happen to occur in the binary.

578
00:23:08,090 --> 00:23:10,470
Well, almost, with version two

579
00:23:10,470 --> 00:23:15,300
I now only get 12 detections
from groups like FireEye

580
00:23:15,300 --> 00:23:17,787
recognizing this as Snatch ransomware

581
00:23:17,787 --> 00:23:20,473
which I saw before in
the original detections.

582
00:23:22,480 --> 00:23:25,123
Now this got me thinking,
what's my baseline.

583
00:23:25,123 --> 00:23:27,240
I wanted something to test
that was really noxious,

584
00:23:27,240 --> 00:23:28,084
that really wasn't malicious.

585
00:23:28,084 --> 00:23:30,610
So I made a hello world application

586
00:23:30,610 --> 00:23:33,330
and I dropped that into
VirusTotal as well.

587
00:23:33,330 --> 00:23:36,194
And sure enough, four
of the engines detected

588
00:23:36,194 --> 00:23:39,310
the hello world app as malicious also.

589
00:23:39,310 --> 00:23:41,179
So that's really the best I can do,

590
00:23:41,180 --> 00:23:42,660
four or less and we're seeing

591
00:23:42,660 --> 00:23:45,763
that those four basically think
that everything's malicious.

592
00:23:46,860 --> 00:23:49,510
If I get to four or less than
and it's these four players,

593
00:23:49,510 --> 00:23:52,155
I'll be happy with that
because I'm then getting past

594
00:23:52,155 --> 00:23:57,155
the major players like ISA
and FireEye and bit defender.

595
00:23:57,210 --> 00:23:58,380
Okay, but before getting into some

596
00:23:58,380 --> 00:23:59,815
of the behavioral modifications

597
00:23:59,815 --> 00:24:02,180
that I think I might have to make based,

598
00:24:02,180 --> 00:24:03,947
on the slide that I presented previously,

599
00:24:03,947 --> 00:24:05,662
I had one last idea.

600
00:24:07,010 --> 00:24:08,160
Developers are often told

601
00:24:08,160 --> 00:24:10,170
that they should use
descriptive names for functions.

602
00:24:10,170 --> 00:24:11,298
And I think that probably applies

603
00:24:11,298 --> 00:24:13,168
for malware developers as well.

604
00:24:13,168 --> 00:24:15,649
And I don't disagree normally

605
00:24:15,650 --> 00:24:17,114
but what about if I don't do that?

606
00:24:17,114 --> 00:24:18,978
If you're creating ransomware

607
00:24:18,978 --> 00:24:22,600
and the function name is
encrypt or ransom note

608
00:24:22,600 --> 00:24:25,100
that seems a bit on the nose, doesn't it?

609
00:24:25,100 --> 00:24:27,580
So to test this out, I
changed function names

610
00:24:27,580 --> 00:24:28,837
and other strings that say ransom

611
00:24:28,837 --> 00:24:33,080
or the word crypt to
friendly no, or like entropy.

612
00:24:33,080 --> 00:24:35,210
And the last thing I wanted to do,

613
00:24:35,210 --> 00:24:36,700
there was still some function code

614
00:24:36,700 --> 00:24:39,592
for the registry utilman
backdoor that was also dropped.

615
00:24:39,592 --> 00:24:43,322
Though it wasn't used, I think
it was still in the binary.

616
00:24:43,322 --> 00:24:45,303
So I wanted to remove that as well.

617
00:24:47,661 --> 00:24:49,060
And after those changes,

618
00:24:49,060 --> 00:24:51,290
the code still does
exactly the same thing.

619
00:24:51,290 --> 00:24:53,399
It still deletes the volume shadow copies,

620
00:24:53,400 --> 00:24:56,250
it still deletes all the logs
and it encrypts everything.

621
00:24:58,310 --> 00:25:00,149
So now it's the big moment, it's time.

622
00:25:00,150 --> 00:25:01,175
This is the end of this demo.

623
00:25:01,175 --> 00:25:02,760
It's time to hold your breath.

624
00:25:02,760 --> 00:25:04,260
If we were doing this in person,

625
00:25:04,260 --> 00:25:06,092
I'd be really, really nervous
and considering whether

626
00:25:06,092 --> 00:25:10,080
or not I should have done a
live demo in the first place.

627
00:25:10,080 --> 00:25:12,082
And though, as this is loading,

628
00:25:13,541 --> 00:25:16,810
SecureAge APEX instantly
decided that this was malicious.

629
00:25:16,810 --> 00:25:19,940
I'm pretty sure it just thinks
that because it's a binary

630
00:25:19,940 --> 00:25:22,410
that's not Microsoft, it's malicious.

631
00:25:22,410 --> 00:25:24,810
For reference calculator
when you open it up in like

632
00:25:24,810 --> 00:25:27,659
Process Explore, has one
detection VirusTotal.

633
00:25:27,660 --> 00:25:30,330
So I'm not super upset about that,

634
00:25:30,330 --> 00:25:34,320
but by the time this is done
processing zero other engines

635
00:25:34,320 --> 00:25:37,090
detected the sample, not FireEye, not ISA

636
00:25:37,090 --> 00:25:38,763
not Bitdefender, not any of them.

637
00:25:39,730 --> 00:25:43,970
The sample that all I
did was changed strings

638
00:25:43,970 --> 00:25:45,857
it's just as effective as the original.

639
00:25:45,857 --> 00:25:48,629
And all I had to do was what basically

640
00:25:48,630 --> 00:25:50,251
constituted string replacement

641
00:25:50,251 --> 00:25:53,000
and remove code for batch
files or backdoor tactics

642
00:25:53,000 --> 00:25:54,810
that are like 10 years old.

643
00:25:54,810 --> 00:25:57,048
I'm sure if I replaced them
with something that was newer

644
00:25:57,048 --> 00:26:00,270
or more obfuscated we
would be able to get by

645
00:26:00,270 --> 00:26:01,260
with that as well.

646
00:26:01,260 --> 00:26:04,150
In fact, I can avoid dropping
batch files completely

647
00:26:04,150 --> 00:26:06,850
and just do all of it through the binary.

648
00:26:06,850 --> 00:26:09,513
And just like that, Ironcat's back.

649
00:26:11,530 --> 00:26:14,440
Okay, so I don't feel really safe anymore.

650
00:26:14,440 --> 00:26:16,156
After I went through this
and created all of that,

651
00:26:16,156 --> 00:26:18,720
what I actually feel is that maybe my

652
00:26:18,720 --> 00:26:21,160
antivirus isn't protecting
me like I thought it was.

653
00:26:21,160 --> 00:26:23,510
I know this isn't accounting
for having something like

654
00:26:23,510 --> 00:26:25,538
Advanced Threat Protection or Endgame

655
00:26:25,538 --> 00:26:27,150
actually installed on a device.

656
00:26:27,150 --> 00:26:29,545
I didn't have that software,
but for the average consumer

657
00:26:29,545 --> 00:26:32,496
for the average enterprise user,

658
00:26:32,496 --> 00:26:36,770
being able to just change a
few strings as a malware author

659
00:26:36,770 --> 00:26:39,920
and redistribute really
completely bypasses

660
00:26:39,920 --> 00:26:42,570
that entire industry of appliances

661
00:26:42,570 --> 00:26:43,727
and that's kind of concerning.

662
00:26:43,728 --> 00:26:48,440
But what it does do is it
places a really high importance

663
00:26:48,440 --> 00:26:50,370
on better behavioral detections.

664
00:26:50,370 --> 00:26:52,440
So when I talk about
that, it's EDR solutions,

665
00:26:52,441 --> 00:26:54,990
it's centralized logging,
that password that was input

666
00:26:54,990 --> 00:26:57,047
with the argument would
have been caught if all

667
00:26:57,047 --> 00:26:59,940
of the arguments and all of
the commands that were ran

668
00:26:59,940 --> 00:27:02,430
in a terminal were passed
back to centralized logging,

669
00:27:02,430 --> 00:27:04,040
they wouldn't have been deleted.

670
00:27:04,040 --> 00:27:07,061
We wanna do that log
analysis on Windows devices.

671
00:27:07,061 --> 00:27:09,010
And we have to be able to chain processes

672
00:27:09,010 --> 00:27:11,020
and track like file
execution, that sort of thing.

673
00:27:11,020 --> 00:27:13,720
On the network side, JA3
hashes would've caught

674
00:27:13,720 --> 00:27:16,783
the weird signature
for the network traffic

675
00:27:16,783 --> 00:27:20,050
leaving the binary before it had executed.

676
00:27:20,050 --> 00:27:21,070
There's certificate anomalies.

677
00:27:21,070 --> 00:27:22,780
Like the fact that this one
didn't even have a certificate.

678
00:27:22,780 --> 00:27:25,596
Well as full packet capture

679
00:27:25,596 --> 00:27:26,807
would have helped us understand

680
00:27:26,807 --> 00:27:28,265
what that Base64 string was doing.

681
00:27:28,265 --> 00:27:29,705
And we would have been able to catch that.

682
00:27:29,705 --> 00:27:31,983
Now that's not necessarily
how real ransomware works,

683
00:27:31,983 --> 00:27:34,427
but there needs to be a
heavier focus on these things.

684
00:27:34,427 --> 00:27:37,622
It seems like anti-virus
shouldn't provide us the sense

685
00:27:37,623 --> 00:27:40,010
of safety any longer.

686
00:27:40,010 --> 00:27:41,020
So now let's talk about response.

687
00:27:41,020 --> 00:27:42,632
I don't want to like provide
all of that capability,

688
00:27:42,632 --> 00:27:44,680
and I purposely didn't show
a ton of the source code

689
00:27:44,680 --> 00:27:46,340
and won't provide that cause I don't want

690
00:27:46,340 --> 00:27:48,360
this being reused over and over,

691
00:27:48,360 --> 00:27:50,870
but let's talk about it when
this ransomware does happen,

692
00:27:50,870 --> 00:27:52,709
what are some interesting
things I've learned

693
00:27:52,710 --> 00:27:53,543
about doing response?

694
00:27:53,543 --> 00:27:55,590
And one of those things is

695
00:27:55,590 --> 00:27:57,889
as you come across different devices

696
00:27:57,890 --> 00:27:59,380
you'll notice that when they encrypted

697
00:27:59,380 --> 00:28:01,124
that is a touch time,
the date modified time,

698
00:28:01,124 --> 00:28:03,430
and you can use that time to kind of chain

699
00:28:03,430 --> 00:28:05,180
the events together to understand how

700
00:28:05,180 --> 00:28:07,140
the adversary's moving
through the network.

701
00:28:07,140 --> 00:28:09,380
A few of them that I responded
to, it's not all I ever do,

702
00:28:09,380 --> 00:28:11,230
but they were live, the
adversary was still there.

703
00:28:11,230 --> 00:28:12,639
And I was able to kind of track them back,

704
00:28:12,639 --> 00:28:14,490
kick them out, figure out how they got in.

705
00:28:14,490 --> 00:28:16,870
That was root cause analysis for me.

706
00:28:16,870 --> 00:28:19,409
Another piece of this and
something that's really exciting.

707
00:28:19,410 --> 00:28:22,180
And maybe you already
know, but if you don't,

708
00:28:22,180 --> 00:28:25,840
that because of that requirement
to leave the box useful

709
00:28:25,840 --> 00:28:27,610
and this will be talked
about here in a second.

710
00:28:27,610 --> 00:28:30,670
Again, I'll show this off,
but there's an HTTPERR log,

711
00:28:30,671 --> 00:28:32,895
that isn't part of the
Windows logging system,

712
00:28:32,895 --> 00:28:36,918
that can show things that
try to scan the devices.

713
00:28:36,918 --> 00:28:38,729
And in this case, if you see that Trinity

714
00:28:38,730 --> 00:28:40,052
it's kind of small there,
maybe you see Trinity

715
00:28:40,052 --> 00:28:42,629
as a get request, it's
actually a signature

716
00:28:42,630 --> 00:28:44,900
for in map being ran in your network.

717
00:28:44,900 --> 00:28:49,140
Same thing goes for, we can
use the firewall log on Windows

718
00:28:49,140 --> 00:28:50,360
the local firewall log,

719
00:28:50,360 --> 00:28:53,300
isn't just in the
Windows event log system,

720
00:28:53,300 --> 00:28:55,488
to understand what
network traffic's going on

721
00:28:55,488 --> 00:28:57,011
on that device also.

722
00:28:57,011 --> 00:29:01,440
And if you take care, you can
go into the advanced firewall

723
00:29:01,440 --> 00:29:04,320
and enable that, one change
the size limit for that log,

724
00:29:04,320 --> 00:29:06,990
as well as enable it to log for things

725
00:29:06,990 --> 00:29:09,380
that are successful as well as failed.

726
00:29:09,380 --> 00:29:11,440
And this is the place
where you can do that.

727
00:29:11,440 --> 00:29:14,148
Often in enterprises, already default.

728
00:29:14,148 --> 00:29:16,062
When you do that you can
collect all the information,

729
00:29:16,063 --> 00:29:18,743
start to track that internal activity.

730
00:29:19,660 --> 00:29:22,700
This is Graph Tool and
Elastic that I was able to use

731
00:29:22,700 --> 00:29:24,850
on those logs to put
all this stuff together

732
00:29:24,850 --> 00:29:29,072
really draw out what access
happened, even after the fact.

733
00:29:29,073 --> 00:29:30,470
And one last piece,

734
00:29:30,470 --> 00:29:32,800
I'm gonna show this off here in a second.

735
00:29:32,800 --> 00:29:35,193
Here's a few logs that
are really, really helpful

736
00:29:35,193 --> 00:29:39,570
for checking SMB activity
and remote desktop activity.

737
00:29:39,570 --> 00:29:43,460
And I say this because what
has to happen especially

738
00:29:43,460 --> 00:29:45,883
in a live situation is when
ransomware is detonated,

739
00:29:45,883 --> 00:29:47,790
that actor then has to disconnect.

740
00:29:47,790 --> 00:29:50,062
So yes, the logs were cleared, but as soon

741
00:29:50,063 --> 00:29:53,157
as that actor disconnects,
there's another log generated.

742
00:29:53,157 --> 00:29:56,112
And in this case, that
log actually was generated

743
00:29:56,113 --> 00:29:59,370
with the IP, with the
network address in this case,

744
00:29:59,370 --> 00:30:02,350
the external address that
was being used by that actor.

745
00:30:02,350 --> 00:30:03,504
And this is where you can find that,

746
00:30:03,504 --> 00:30:05,770
and I'll show you here in a second.

747
00:30:05,770 --> 00:30:09,461
Also, I made a tool that can
put all this stuff together

748
00:30:09,461 --> 00:30:12,059
and help you do these incident
response capabilities.

749
00:30:12,059 --> 00:30:13,873
And we'll look at that also.

750
00:30:13,873 --> 00:30:16,223
I'll give you a demo of that right now.

751
00:30:17,400 --> 00:30:19,362
All right, for this demo, get with me.

752
00:30:19,362 --> 00:30:22,198
And here you are, the worst has happened.

753
00:30:22,198 --> 00:30:25,420
Ironcat strikes back or
insert whatever ransomware

754
00:30:25,420 --> 00:30:27,933
of your choice, you're
jumping onto the box.

755
00:30:28,920 --> 00:30:30,900
And the same idea applies.

756
00:30:30,900 --> 00:30:32,660
First just in case you haven't been there,

757
00:30:32,660 --> 00:30:34,225
and some may think this is really simple

758
00:30:34,225 --> 00:30:35,900
but none of the links are gonna work

759
00:30:35,901 --> 00:30:37,890
because they're also encrypted.

760
00:30:37,890 --> 00:30:40,230
And the recycle bin is
generally unaffected.

761
00:30:40,230 --> 00:30:42,270
So you can still get to
the file system that way.

762
00:30:42,270 --> 00:30:43,720
It's an easier way to get in.

763
00:30:44,620 --> 00:30:46,919
I've even done in some response where like

764
00:30:46,920 --> 00:30:48,280
when I was doing in remote,

765
00:30:48,280 --> 00:30:49,726
the Windows archi didn't work correctly

766
00:30:49,727 --> 00:30:52,330
or didn't pass through
the way I needed it to.

767
00:30:52,330 --> 00:30:54,629
So this was the best way
for me to get around.

768
00:30:55,660 --> 00:30:58,153
Inside the event viewer you'll
find that for the most part

769
00:30:58,153 --> 00:31:00,320
the logs are all gone.

770
00:31:00,320 --> 00:31:01,429
This is going to be the case.

771
00:31:01,430 --> 00:31:03,477
But in my experience
when ransomware was done

772
00:31:03,477 --> 00:31:06,504
by live actors, and sometimes
even when it wasn't,

773
00:31:06,504 --> 00:31:09,130
the order of operations
requires them to disconnect

774
00:31:09,131 --> 00:31:11,838
from the session whether it's SMB or RDP

775
00:31:11,838 --> 00:31:16,340
after the execution of the
malware that clears those logs.

776
00:31:16,340 --> 00:31:17,970
Now hyper-V uses RDP.

777
00:31:17,970 --> 00:31:20,285
So I'm going to disconnect from hyper-V

778
00:31:20,285 --> 00:31:22,165
reconnect to hyper-V,

779
00:31:22,165 --> 00:31:24,442
and then open up the event terminal again,

780
00:31:24,442 --> 00:31:27,414
go to terminal services under Windows,

781
00:31:27,414 --> 00:31:28,708
local session manager.

782
00:31:28,708 --> 00:31:32,760
In that location, you can check
the logs that are generated

783
00:31:32,760 --> 00:31:35,150
from the disconnection of the RDP session.

784
00:31:35,150 --> 00:31:37,240
This RDP session that existed prior

785
00:31:37,240 --> 00:31:42,240
to the logs being cleared and
right here with event ID 24,

786
00:31:42,389 --> 00:31:44,466
this is where you're
gonna find the IP address

787
00:31:44,467 --> 00:31:49,010
of the connection that existed
while the logs were cleared.

788
00:31:49,010 --> 00:31:52,313
And this is what you saw in
the slides just prior to this.

789
00:31:55,120 --> 00:31:56,649
Kind of two keynotes there.

790
00:31:56,650 --> 00:31:58,960
But one last thing I wanted to show you is

791
00:31:58,960 --> 00:32:01,330
remember the requirement of ransomware

792
00:32:01,330 --> 00:32:03,220
from the actor's perspective.

793
00:32:03,220 --> 00:32:04,320
They just wanna make money.

794
00:32:04,320 --> 00:32:06,830
Well, usually speaking,
they just wanna make money.

795
00:32:06,830 --> 00:32:09,535
So ideally your machine is not brit.

796
00:32:09,536 --> 00:32:11,876
That would be kind of counterproductive,

797
00:32:11,876 --> 00:32:14,649
which for the most part means
that the System32 folder

798
00:32:14,650 --> 00:32:16,750
under Windows is left alone.

799
00:32:16,750 --> 00:32:19,100
In here in the System32 folder,

800
00:32:19,100 --> 00:32:21,719
you will find the folder named log files.

801
00:32:21,720 --> 00:32:25,200
And inside that folder,
another called firewall.

802
00:32:25,200 --> 00:32:27,035
Now this is the best
part about these logs.

803
00:32:27,035 --> 00:32:29,036
They are not Evtx logs

804
00:32:29,036 --> 00:32:32,350
and they're not part of the
Windows event log system.

805
00:32:32,350 --> 00:32:35,928
So the log clearing that the
actors did, didn't touch these.

806
00:32:35,929 --> 00:32:37,920
Now, if you wanna open these up on the box

807
00:32:37,920 --> 00:32:39,660
which I don't recommend,
just scrape them off,

808
00:32:39,660 --> 00:32:41,690
and look at them later,
but if you wanna open them

809
00:32:41,690 --> 00:32:44,280
up on the box, you have to use
the administrative notepad.

810
00:32:44,280 --> 00:32:45,589
But once you do take a look at these,

811
00:32:45,589 --> 00:32:47,612
you get a lovely historical accounting

812
00:32:47,613 --> 00:32:50,016
of all of the connections
made to this machine,

813
00:32:50,016 --> 00:32:54,011
especially of the setting to
log allow connections as well

814
00:32:54,011 --> 00:32:56,629
as drop connections, which often times,

815
00:32:56,630 --> 00:32:59,080
that I've found inside of
a enterprise environment

816
00:32:59,080 --> 00:33:00,290
is on by default.

817
00:33:03,400 --> 00:33:05,460
And though this mashup of texts is lovely

818
00:33:05,460 --> 00:33:06,360
in its own, right?

819
00:33:06,360 --> 00:33:08,490
My main job isn't
actually to make malware.

820
00:33:08,490 --> 00:33:09,760
I just thought it was interesting.

821
00:33:09,760 --> 00:33:11,750
What I actually do is incident response

822
00:33:11,750 --> 00:33:15,530
and cyber defense and
red team operations that

823
00:33:15,530 --> 00:33:17,600
sometimes includes making malware.

824
00:33:17,600 --> 00:33:21,560
But I've also created this
tooling to process this file.

825
00:33:21,560 --> 00:33:23,654
It enriches it with
local and external DNS.

826
00:33:23,654 --> 00:33:26,096
It uses GoIP and threat information

827
00:33:26,096 --> 00:33:28,559
and aggregates it all
from multiple machines

828
00:33:28,559 --> 00:33:32,200
into an Elastic stack so
that it looks like this.

829
00:33:32,200 --> 00:33:34,086
So what you're seeing
here is the same logs

830
00:33:34,086 --> 00:33:37,080
that you saw collected, but
from two devices that were

831
00:33:37,080 --> 00:33:39,649
involved in the live
ransomware incident last year

832
00:33:39,650 --> 00:33:42,486
that I responded to, and with
the location changed here

833
00:33:42,486 --> 00:33:45,053
for the source location
to protect the innocent.

834
00:33:45,910 --> 00:33:47,329
Those local firewall logs were collected

835
00:33:47,329 --> 00:33:50,440
and then provided this map
of every connection made

836
00:33:50,440 --> 00:33:52,220
externally with country codes,

837
00:33:52,220 --> 00:33:54,240
known IPs on threat list or Tor nodes.

838
00:33:54,240 --> 00:33:55,680
So if it's green, there's no threat,

839
00:33:55,680 --> 00:33:56,697
if it's red, there would be a threat.

840
00:33:56,697 --> 00:33:58,910
It didn't detect anything
on a known threat list

841
00:33:58,911 --> 00:34:01,884
when I had dumped it into this
Elastic instance this time.

842
00:34:01,884 --> 00:34:05,919
But you also get protocol and
path distribution analysis

843
00:34:05,919 --> 00:34:07,500
by firewall actions.

844
00:34:07,500 --> 00:34:08,750
So you can see like a spike there

845
00:34:08,750 --> 00:34:12,385
and drop packets as well
as counts of ICNP type.

846
00:34:12,385 --> 00:34:15,230
And really just any way you
can split up this information.

847
00:34:15,230 --> 00:34:17,423
And I'm sure there's a lot
more to be done with it.

848
00:34:18,810 --> 00:34:21,020
The more devices you collect,
the more you can build

849
00:34:21,020 --> 00:34:22,922
out the attack pass through the network.

850
00:34:22,922 --> 00:34:25,572
In this case, RDP and SMB
were the primary means

851
00:34:25,572 --> 00:34:27,002
of lateral movement.

852
00:34:28,770 --> 00:34:31,389
When you search for 3389
you get a positive internal

853
00:34:31,389 --> 00:34:32,299
to internal connection.

854
00:34:32,300 --> 00:34:34,820
I say positive because there's
a green dot right there

855
00:34:34,820 --> 00:34:35,810
on Jacksonville, Florida

856
00:34:35,810 --> 00:34:38,264
which is where I changed the location to.

857
00:34:38,264 --> 00:34:40,400
And when you put this into a list inside

858
00:34:40,400 --> 00:34:42,141
discover with the same kind of search

859
00:34:42,141 --> 00:34:45,105
and only look at the
source and destination IPs,

860
00:34:45,106 --> 00:34:48,139
you can see what other devices
they were connecting to

861
00:34:48,139 --> 00:34:51,100
and you can do the same for SMB.

862
00:34:51,100 --> 00:34:53,839
And this has been an incredibly
effective tool for me.

863
00:34:53,840 --> 00:34:56,580
And I plan to keep
expanding on its capability

864
00:34:56,580 --> 00:34:58,660
right now I'm calling the tool Revenant

865
00:34:58,660 --> 00:35:00,129
and you can find it and download it

866
00:35:00,130 --> 00:35:02,164
and use it yourself with
the GitHub that's associated

867
00:35:02,164 --> 00:35:05,213
with this presentation,
that will be at the end.

868
00:35:05,213 --> 00:35:10,213
So that being the case that
I'm showing you how to respond

869
00:35:10,640 --> 00:35:13,240
what can you do to try to prevent this?

870
00:35:13,240 --> 00:35:14,721
Well, it's all the things
that we already talked

871
00:35:14,721 --> 00:35:16,731
about for detection and response,

872
00:35:16,731 --> 00:35:18,760
but it's also reducing
your attack surface.

873
00:35:18,760 --> 00:35:21,850
I've seen RDP is an entry
point too many times

874
00:35:21,850 --> 00:35:23,319
now to count.

875
00:35:23,320 --> 00:35:25,040
We just looked at client to client traffic

876
00:35:25,040 --> 00:35:26,862
is something that you can
monitor and stop this,

877
00:35:26,862 --> 00:35:28,089
the lateral spread of that.

878
00:35:28,089 --> 00:35:30,130
You do have time while there's live actors

879
00:35:30,130 --> 00:35:31,360
in your network.

880
00:35:31,360 --> 00:35:34,232
Monitor file access, and write IO and

881
00:35:34,232 --> 00:35:37,024
the same like C2 and
log review and all that.

882
00:35:37,024 --> 00:35:39,980
But one really key point
that I want to focus

883
00:35:39,980 --> 00:35:42,560
on is emulation, emulation, emulation.

884
00:35:42,560 --> 00:35:43,447
You have to test it,

885
00:35:43,447 --> 00:35:45,783
and you have to test what
your capabilities are,

886
00:35:45,783 --> 00:35:48,290
and what you can and can't do.

887
00:35:48,290 --> 00:35:52,622
And with that, you need to
apply that knowledge right now.

888
00:35:52,622 --> 00:35:54,767
So let's talk about
next week, you wanna go

889
00:35:54,767 --> 00:35:56,140
and make sure you have detections

890
00:35:56,140 --> 00:35:59,218
in place that allow
for antiviruses to fail

891
00:35:59,218 --> 00:36:00,924
and you have behavioral
capabilities that are

892
00:36:00,924 --> 00:36:02,350
more difficult to bypass.

893
00:36:02,350 --> 00:36:04,990
So that what the attacker
that you're defending against

894
00:36:04,990 --> 00:36:06,879
doesn't just have to change some strings.

895
00:36:06,880 --> 00:36:08,220
In the next three months,

896
00:36:08,220 --> 00:36:09,689
let's talk about these TTPs that we looked

897
00:36:09,690 --> 00:36:12,790
at for instant response and
develop your tools internally,

898
00:36:12,790 --> 00:36:16,009
so that you can track this
activity, once you do find it.

899
00:36:16,010 --> 00:36:18,980
Then within six months, use
the resources in this GitHub.

900
00:36:18,980 --> 00:36:22,790
And please absolutely whether
it's the Revenant tool or

901
00:36:22,790 --> 00:36:26,451
whether it's the already
released malware that you

902
00:36:26,451 --> 00:36:29,440
can download yourself to test
like this is safe malware.

903
00:36:29,440 --> 00:36:30,655
There's a blog about what it does.

904
00:36:30,655 --> 00:36:33,798
You can use this internally
to test your environments

905
00:36:33,798 --> 00:36:36,410
and run exercises with your team.

906
00:36:36,410 --> 00:36:40,053
Thank you so much for joining me at RSA 21

907
00:36:40,053 --> 00:36:41,990
and happy hunting.

