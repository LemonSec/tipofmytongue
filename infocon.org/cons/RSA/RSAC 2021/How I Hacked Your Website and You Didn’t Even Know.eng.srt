1
00:00:02,300 --> 00:00:04,150
- [Siddhesh] Hello. I'm Siddhesh,

2
00:00:04,150 --> 00:00:05,720
I'm a part of the technical team

3
00:00:05,720 --> 00:00:06,833
at Tala security.

4
00:00:07,740 --> 00:00:09,050
Through this session,

5
00:00:09,050 --> 00:00:11,280
I'd like to help you better understand

6
00:00:11,280 --> 00:00:13,209
client side threats,

7
00:00:13,210 --> 00:00:14,150
the relative ease

8
00:00:14,150 --> 00:00:17,450
at which web applications
have been compromised

9
00:00:17,450 --> 00:00:19,550
and some actionable next steps

10
00:00:19,550 --> 00:00:21,690
on what you can do in the near term

11
00:00:21,690 --> 00:00:24,723
to safeguard against this new age threat.

12
00:00:27,280 --> 00:00:28,430
In this session,

13
00:00:28,430 --> 00:00:31,040
I'll go through an
introduction of the problem,

14
00:00:31,040 --> 00:00:33,310
and then we'll spend around 10-15 minutes

15
00:00:33,310 --> 00:00:36,623
going over a live attack demo.

16
00:00:37,630 --> 00:00:39,450
And then lastly, we're going to finish off

17
00:00:39,450 --> 00:00:42,380
with some of the defenses
that you can apply

18
00:00:42,380 --> 00:00:44,233
to help your organization.

19
00:00:45,410 --> 00:00:48,930
No prior knowledge is required
to understand this session.

20
00:00:48,930 --> 00:00:50,870
And this presentation is for anybody

21
00:00:50,870 --> 00:00:52,489
that uses a website

22
00:00:52,490 --> 00:00:54,983
or is responsible for web security.

23
00:00:56,250 --> 00:00:57,670
By the end of this session,

24
00:00:57,670 --> 00:00:59,220
you'll hopefully have an understanding

25
00:00:59,220 --> 00:01:02,180
of how vulnerable web applications are

26
00:01:02,180 --> 00:01:05,470
on the client side and the increasing need

27
00:01:05,470 --> 00:01:08,199
to implement client side security.

28
00:01:08,199 --> 00:01:09,703
Let's get started.

29
00:01:11,470 --> 00:01:13,539
I'm sure everyone has heard of

30
00:01:13,540 --> 00:01:15,920
the recent SolarWinds breach

31
00:01:15,920 --> 00:01:17,820
and the large impact that it had

32
00:01:17,820 --> 00:01:19,482
on several enterprises.

33
00:01:20,500 --> 00:01:22,690
The part that I would like to focus on

34
00:01:22,690 --> 00:01:26,080
is how software supply
chains are being exploited

35
00:01:26,080 --> 00:01:29,070
and how these attacks
are gaining relevance

36
00:01:29,070 --> 00:01:30,133
everywhere today.

37
00:01:32,010 --> 00:01:35,130
So, let's break down the solarwinds attack

38
00:01:35,130 --> 00:01:36,440
and look into some of the reasons

39
00:01:36,440 --> 00:01:38,473
why it was so devastating.

40
00:01:41,060 --> 00:01:42,259
First of all,

41
00:01:42,259 --> 00:01:45,500
SolarWinds was a trusted SaaS vendor.

42
00:01:45,500 --> 00:01:47,970
Enterprises trusted the company

43
00:01:47,970 --> 00:01:49,803
and the software that they deliver.

44
00:01:51,480 --> 00:01:54,910
It was widely adopted
in a single compromise

45
00:01:54,910 --> 00:01:57,683
led to over 18,000 regions.

46
00:01:59,080 --> 00:02:01,190
And from an attacker's point of view,

47
00:02:01,190 --> 00:02:04,830
these types of attacks
are especially attractive

48
00:02:04,830 --> 00:02:06,740
because they give the attackers

49
00:02:06,740 --> 00:02:11,039
remote control access to their end servers

50
00:02:11,039 --> 00:02:11,873
in a way.

51
00:02:13,550 --> 00:02:17,400
So, this is how the
solarwinds hack went down.

52
00:02:17,400 --> 00:02:18,610
And I'm sure you're thinking,

53
00:02:18,610 --> 00:02:22,030
how does some IT management software

54
00:02:22,030 --> 00:02:25,163
affect web application and web security?

55
00:02:26,060 --> 00:02:27,940
Let me explain by quickly going

56
00:02:27,940 --> 00:02:30,530
over how web architecture has evolved

57
00:02:30,530 --> 00:02:31,683
over the past 10 years.

58
00:02:35,215 --> 00:02:37,150
What about architecture
for the past decade

59
00:02:37,150 --> 00:02:39,780
followed a trend where the applications

60
00:02:39,780 --> 00:02:43,410
were server heavy and
enterprise data centers

61
00:02:43,410 --> 00:02:45,273
handle the bulk of the processing.

62
00:02:46,790 --> 00:02:48,890
The web browser during this time

63
00:02:48,890 --> 00:02:51,333
was more of a graphical interface only.

64
00:02:52,960 --> 00:02:56,780
And as we look in the
past few years to today,

65
00:02:56,780 --> 00:02:59,330
the architecture has
evolved for many reasons

66
00:02:59,330 --> 00:03:02,300
including optimizations
that enterprises want

67
00:03:02,300 --> 00:03:04,330
in terms of speed, as well as

68
00:03:04,330 --> 00:03:07,530
increased computing capacity
on the client devices.

69
00:03:07,530 --> 00:03:09,893
That is your PC and your mobile devices.

70
00:03:10,860 --> 00:03:12,430
As a result, today's websites

71
00:03:12,430 --> 00:03:15,780
integrate dozens of third party vendors

72
00:03:16,710 --> 00:03:19,170
all the way from your user analytics,

73
00:03:19,170 --> 00:03:22,700
marketing tags, CDNs,
open source libraries

74
00:03:22,700 --> 00:03:23,593
and so on.

75
00:03:24,760 --> 00:03:28,109
This has led to third-party
vendors and libraries

76
00:03:28,110 --> 00:03:30,650
loading their content directly

77
00:03:30,650 --> 00:03:32,830
onto your browsers.

78
00:03:32,830 --> 00:03:35,690
And this means that on average,

79
00:03:35,690 --> 00:03:40,690
around 70% of what loads
on end user's browsers,

80
00:03:41,210 --> 00:03:44,353
doesn't come from first
party servers at all.

81
00:03:46,300 --> 00:03:48,370
Enterprises are designing client

82
00:03:48,370 --> 00:03:50,820
heavy applications as a result

83
00:03:50,820 --> 00:03:53,953
that are run through
JavaScript on the browser.

84
00:03:55,070 --> 00:03:58,563
And these browsers are
acting as the modern-day OS.

85
00:04:03,590 --> 00:04:07,040
So, this is how a typical web application

86
00:04:07,040 --> 00:04:10,209
and website loads their content today.

87
00:04:10,210 --> 00:04:12,350
And as you can see,

88
00:04:12,350 --> 00:04:14,549
this diagram shows the
different third parties

89
00:04:14,550 --> 00:04:18,070
and their multiple
locations and data centers

90
00:04:18,070 --> 00:04:19,832
that are situated across the globe.

91
00:04:21,360 --> 00:04:23,510
Hopefully, this sort of explains

92
00:04:23,510 --> 00:04:26,173
why the internet is called the web.

93
00:04:28,360 --> 00:04:31,190
So in this, your JavaScript

94
00:04:31,190 --> 00:04:33,110
loads third-party JavaScript

95
00:04:33,110 --> 00:04:36,603
which in turn may load fourth
and fifth party JavaScript.

96
00:04:38,150 --> 00:04:40,950
This is called the
piggybacking of JavaScript.

97
00:04:40,950 --> 00:04:44,560
And this creates a trust between you,

98
00:04:44,560 --> 00:04:47,853
your third party, your
fourth party, and so on.

99
00:04:49,120 --> 00:04:51,410
And as a result of this trust model,

100
00:04:51,410 --> 00:04:53,730
it only takes one of these libraries

101
00:04:53,730 --> 00:04:57,140
or dependencies or even one server

102
00:04:57,140 --> 00:05:00,753
to be infected in order to
compromise your website.

103
00:05:02,180 --> 00:05:03,930
And this is the main principle

104
00:05:03,930 --> 00:05:06,080
that is leading to website breaches

105
00:05:06,080 --> 00:05:07,183
on the client side.

106
00:05:08,760 --> 00:05:12,039
And as you will notice, your data center

107
00:05:12,040 --> 00:05:15,610
or any of your servers,
they were not impacted,

108
00:05:15,610 --> 00:05:19,100
they were not breached
or attacked in any way.

109
00:05:19,100 --> 00:05:21,790
But still, your end users,

110
00:05:21,790 --> 00:05:24,613
they got infected with
this malicious JavaScript.

111
00:05:26,670 --> 00:05:30,190
Google Researchers that work on Chrome,

112
00:05:30,190 --> 00:05:32,790
they say that if an
attacker's able to inject

113
00:05:32,790 --> 00:05:36,830
any JavaScript in end users browsers,

114
00:05:36,830 --> 00:05:39,123
it is practically game over.

115
00:05:43,350 --> 00:05:45,780
So now, if we combine the principles

116
00:05:45,780 --> 00:05:48,979
of the SolarWinds-style
supply chain attacks

117
00:05:48,980 --> 00:05:52,130
and how websites are using a large number

118
00:05:52,130 --> 00:05:54,203
of third party dependencies.

119
00:05:55,090 --> 00:05:58,162
The modern web has
become the perfect storm.

120
00:05:59,350 --> 00:06:01,080
Here's the breakdown.

121
00:06:01,080 --> 00:06:03,390
We already have JavaScript as the one

122
00:06:03,390 --> 00:06:05,880
common language and framework

123
00:06:05,880 --> 00:06:07,703
that powers the entire web today.

124
00:06:08,970 --> 00:06:11,640
And one JavaScript can
load another JavaScript

125
00:06:11,640 --> 00:06:13,010
and so on,

126
00:06:13,010 --> 00:06:14,700
through the implicit trust model

127
00:06:15,780 --> 00:06:19,212
that we just saw that's
present in the web today.

128
00:06:20,820 --> 00:06:23,960
Finally, many popular JavaScript libraries

129
00:06:23,960 --> 00:06:27,409
are deployed to over
thousands of websites.

130
00:06:27,410 --> 00:06:30,680
In fact, a recent study
that Tala conducted

131
00:06:30,680 --> 00:06:34,250
analyzing over 1000 websites.

132
00:06:34,250 --> 00:06:37,940
The Alexa one k highlighted
the startling number

133
00:06:37,940 --> 00:06:42,100
of third party services
and average website users.

134
00:06:42,100 --> 00:06:44,163
And that number is 34.

135
00:06:45,380 --> 00:06:48,270
What was more concerning
through this study

136
00:06:48,270 --> 00:06:50,830
was the lack of security controls

137
00:06:50,830 --> 00:06:53,840
that the top thousand
websites in the world

138
00:06:53,840 --> 00:06:57,239
have against such types of vulnerabilities

139
00:06:57,240 --> 00:06:58,943
and third party breaches.

140
00:07:00,460 --> 00:07:02,433
This seems a little scary, right?

141
00:07:04,150 --> 00:07:06,489
So, in the next section

142
00:07:06,490 --> 00:07:09,730
I'm going to be showing
you a live attack demo

143
00:07:09,730 --> 00:07:11,550
but before we switch gears,

144
00:07:11,550 --> 00:07:13,120
there's one situation

145
00:07:13,120 --> 00:07:14,770
that I'd like you to think about.

146
00:07:15,670 --> 00:07:18,658
Imagine if one of your third parties

147
00:07:18,658 --> 00:07:21,403
told you that they have been breached,

148
00:07:22,330 --> 00:07:25,020
what is protecting your web application

149
00:07:25,020 --> 00:07:27,433
from being compromised today?

150
00:07:32,940 --> 00:07:35,150
So now, we're going to switch mode

151
00:07:35,150 --> 00:07:37,539
to an attacker's point of view.

152
00:07:37,540 --> 00:07:40,060
I'm going to act as an attacker now

153
00:07:40,060 --> 00:07:42,020
and I'm going to share my thoughts

154
00:07:42,020 --> 00:07:44,823
while we're going through
an attack together.

155
00:07:46,950 --> 00:07:49,150
So as an attacker, I'm going to try

156
00:07:49,150 --> 00:07:52,070
and explore the weakest part of armor

157
00:07:52,070 --> 00:07:53,853
that the web application has.

158
00:07:54,900 --> 00:07:59,900
I know that your WAF only
protects your servers

159
00:08:01,950 --> 00:08:03,219
but the content that is served

160
00:08:03,220 --> 00:08:06,080
from outside your WAF,

161
00:08:06,080 --> 00:08:07,353
that's less protected.

162
00:08:09,090 --> 00:08:10,140
There's a growing saying

163
00:08:10,140 --> 00:08:12,039
in the industry of the past few years

164
00:08:12,040 --> 00:08:13,093
that goes like,

165
00:08:14,007 --> 00:08:16,487
"If you're only having a WAF,

166
00:08:17,650 --> 00:08:19,887
an attacker is having a laugh".

167
00:08:21,370 --> 00:08:23,380
So with that in mind,

168
00:08:23,380 --> 00:08:25,360
I'm going to try to target the servers

169
00:08:25,360 --> 00:08:27,910
that are outside your data center.

170
00:08:27,910 --> 00:08:29,160
All these servers that on the

171
00:08:29,160 --> 00:08:31,203
right hand side of this diagram,

172
00:08:32,620 --> 00:08:35,033
these are much easier targets.

173
00:08:36,289 --> 00:08:38,709
Let me show you how a
typical website attack

174
00:08:38,710 --> 00:08:40,963
takes place in this case.

175
00:08:44,000 --> 00:08:46,410
First of all, these style of attacks

176
00:08:46,410 --> 00:08:47,410
are called Magecart.

177
00:08:48,490 --> 00:08:50,040
And Magecart is also the name

178
00:08:50,040 --> 00:08:51,959
of the most infamous group

179
00:08:51,960 --> 00:08:53,853
that carries out these hacks.

180
00:08:55,180 --> 00:08:59,079
And without going off
on a tangent too much,

181
00:08:59,080 --> 00:09:02,163
let me present analogy
from the physical world.

182
00:09:03,500 --> 00:09:06,250
I'm sure you've heard of the
credit card skimming attacks

183
00:09:06,250 --> 00:09:08,823
that sometimes take place at gas stations.

184
00:09:09,780 --> 00:09:10,890
They go something like this,

185
00:09:10,890 --> 00:09:14,830
where you swipe your
credit card at the pump

186
00:09:16,040 --> 00:09:18,110
and some

187
00:09:18,110 --> 00:09:19,686
attackers or

188
00:09:19,686 --> 00:09:23,730
somebody has put in a
small little hardware

189
00:09:23,730 --> 00:09:26,180
that steals your credit card number

190
00:09:26,180 --> 00:09:27,543
and stores it somewhere.

191
00:09:29,910 --> 00:09:32,699
Your transaction at the
pump, it goes through okay,

192
00:09:32,700 --> 00:09:36,620
and you cannot detect anything
is wrong at that time.

193
00:09:36,620 --> 00:09:38,630
However, after a few weeks

194
00:09:38,630 --> 00:09:41,320
when you check your credit card statement,

195
00:09:41,320 --> 00:09:42,950
there are some mysterious charges

196
00:09:42,950 --> 00:09:46,653
that have been applied
that you've not made.

197
00:09:48,290 --> 00:09:50,079
So, similar to these

198
00:09:50,080 --> 00:09:53,360
physical credit card skimming attacks,

199
00:09:53,360 --> 00:09:58,240
we have web-based
JavaScript skimming attacks.

200
00:09:58,240 --> 00:09:59,690
And that in a sense

201
00:09:59,690 --> 00:10:02,730
is what the Magecart attack is

202
00:10:02,730 --> 00:10:05,003
and what the Magecart group does.

203
00:10:06,730 --> 00:10:07,563
Let's take a look

204
00:10:07,563 --> 00:10:09,100
at the typical steps

205
00:10:09,100 --> 00:10:10,533
in a Magecart attack.

206
00:10:11,800 --> 00:10:14,760
Step one, the attacker
will try and find out

207
00:10:14,760 --> 00:10:18,090
what goes into your web application.

208
00:10:18,090 --> 00:10:19,350
That means listing out

209
00:10:19,350 --> 00:10:21,913
all your third and fourth
party dependencies.

210
00:10:23,010 --> 00:10:26,610
Once the attackers
identified a suitable target,

211
00:10:26,610 --> 00:10:29,380
they'll use all
appropriate means to breach

212
00:10:29,380 --> 00:10:31,323
into the third party servers.

213
00:10:32,200 --> 00:10:34,590
This can be achieved using any of the

214
00:10:34,590 --> 00:10:36,160
standard attacking and hacking tools

215
00:10:36,160 --> 00:10:38,500
all the way from credential theft,

216
00:10:38,500 --> 00:10:41,561
SQL injection, RDP attacks, rainbow tables

217
00:10:41,561 --> 00:10:44,030
whatever you can think of,

218
00:10:44,030 --> 00:10:46,730
and that has been known or unknown.

219
00:10:46,730 --> 00:10:48,662
The attacker will try and use that

220
00:10:48,662 --> 00:10:51,933
to gain control of the third party server.

221
00:10:53,780 --> 00:10:56,020
Now, once the attacker is controllable

222
00:10:56,020 --> 00:10:57,763
the third party server,

223
00:10:59,100 --> 00:10:59,940
they were going to try

224
00:10:59,940 --> 00:11:03,593
and insert their own
little JavaScript in there.

225
00:11:04,970 --> 00:11:07,730
This code is designed to avoid detection

226
00:11:07,730 --> 00:11:10,410
and it would maintain a low profile.

227
00:11:10,410 --> 00:11:12,846
We go over how attackers are doing this

228
00:11:12,846 --> 00:11:14,483
in a few slides.

229
00:11:16,510 --> 00:11:21,010
Now, when an end user
navigates to this website

230
00:11:21,010 --> 00:11:23,870
their browser loads the
third party dependency

231
00:11:23,870 --> 00:11:27,330
and ta-da, you have been infected

232
00:11:27,330 --> 00:11:29,083
by the attackers JavaScript.

233
00:11:30,340 --> 00:11:34,790
By inserting one JavaScript
onto your browser

234
00:11:34,790 --> 00:11:38,040
and attacker can do a lot of nasty things.

235
00:11:38,040 --> 00:11:39,880
They can deface your website,

236
00:11:39,880 --> 00:11:43,439
inject their own ads, do Bitcoin mining.

237
00:11:43,440 --> 00:11:46,120
But over the past few years,

238
00:11:46,120 --> 00:11:47,300
attackers have realized

239
00:11:47,300 --> 00:11:50,849
that the best way for
them to monetize on this

240
00:11:50,850 --> 00:11:53,950
is to try and steal end user data.

241
00:11:53,950 --> 00:11:56,510
That generally means
your credit card numbers,

242
00:11:56,510 --> 00:11:58,833
your username and passwords.

243
00:11:59,680 --> 00:12:02,229
And that's what attackers
will generally go behind.

244
00:12:03,800 --> 00:12:07,150
And this is actually what
happened a few years ago

245
00:12:07,150 --> 00:12:09,333
on a ticketing website in the UK.

246
00:12:10,830 --> 00:12:14,328
Attackers must have thought, "Hey, look"

247
00:12:14,328 --> 00:12:17,687
"A lot of people are going
to book their tickets"

248
00:12:17,687 --> 00:12:21,767
"on this website through
their credit card in"

249
00:12:21,767 --> 00:12:23,907
"and let's try and steal it."

250
00:12:25,337 --> 00:12:26,857
"Or they couldn't book their tickets"

251
00:12:26,857 --> 00:12:28,166
"to their favorite concert,"

252
00:12:28,167 --> 00:12:29,887
"something like a Justin Bieber concert"

253
00:12:29,887 --> 00:12:34,109
"and got pissed and decided
to hack this website".

254
00:12:34,110 --> 00:12:36,140
It's something like that.

255
00:12:36,140 --> 00:12:38,360
But, at the end of the day

256
00:12:38,360 --> 00:12:40,460
they decided to try and target one

257
00:12:40,460 --> 00:12:43,140
of the ticketing websites third parties,

258
00:12:43,140 --> 00:12:44,463
that is inventor.

259
00:12:45,410 --> 00:12:47,750
and they injected their own JavaScript

260
00:12:47,750 --> 00:12:50,493
after hacking into inventor servers.

261
00:12:53,010 --> 00:12:54,500
Now, when end users

262
00:12:54,500 --> 00:12:56,720
went onto the ticketing website

263
00:12:56,720 --> 00:12:59,983
to book their concert tickets and so on,

264
00:13:00,880 --> 00:13:03,553
that credit card information
was being stolen.

265
00:13:04,680 --> 00:13:07,089
And as a result of this type

266
00:13:07,090 --> 00:13:10,530
of attack that the Magecart group did,

267
00:13:10,530 --> 00:13:14,410
they were able to steal over
60,000 credit card numbers

268
00:13:14,410 --> 00:13:16,742
on this ticketing website alone.

269
00:13:20,390 --> 00:13:22,480
For my attack demo,

270
00:13:22,480 --> 00:13:25,060
I'm going to perform a similar set

271
00:13:25,060 --> 00:13:28,272
of steps in order to show the attack.

272
00:13:32,900 --> 00:13:34,490
For my attack demo,

273
00:13:34,490 --> 00:13:37,850
I wanted to use a
well-known public website

274
00:13:37,850 --> 00:13:40,680
to show you how we can attack it

275
00:13:40,680 --> 00:13:43,660
and have some little hack funds.

276
00:13:43,660 --> 00:13:46,969
But thanks to the legal
team, I had to settle

277
00:13:46,970 --> 00:13:51,343
for a demo website that I created and own.

278
00:13:52,320 --> 00:13:55,430
I've not hacked or done anything illegally

279
00:13:55,430 --> 00:13:58,380
against any other website or server.

280
00:13:58,380 --> 00:14:00,883
And this demo is just an example.

281
00:14:02,590 --> 00:14:05,660
So for this demo, this
is the target website

282
00:14:05,660 --> 00:14:06,853
that I'm going to use.

283
00:14:08,030 --> 00:14:10,360
And for the first step, I would want

284
00:14:10,360 --> 00:14:12,540
to analyze the target website

285
00:14:12,540 --> 00:14:14,310
to understand its supply chain

286
00:14:14,310 --> 00:14:16,542
and look for any possible weaknesses.

287
00:14:18,270 --> 00:14:19,670
For this purpose,

288
00:14:19,670 --> 00:14:22,360
I'm going to use Zed Attack Proxy,

289
00:14:22,360 --> 00:14:23,723
also known as ZAP.

290
00:14:25,000 --> 00:14:27,290
And this is a great open source tool

291
00:14:27,290 --> 00:14:29,423
for attacking a web application.

292
00:14:30,850 --> 00:14:32,610
What this tool does is,

293
00:14:32,610 --> 00:14:34,680
it crawls the web application

294
00:14:34,680 --> 00:14:36,540
and understands all the resources

295
00:14:36,540 --> 00:14:37,433
that are loaded.

296
00:14:38,990 --> 00:14:41,740
It can optionally also run attacks

297
00:14:41,740 --> 00:14:46,310
or pen test against
some of these resources.

298
00:14:46,310 --> 00:14:48,209
So, please get permission

299
00:14:48,210 --> 00:14:51,423
before running ZAP against a website.

300
00:14:55,470 --> 00:14:57,650
This is a start page of ZAP

301
00:14:57,650 --> 00:14:59,850
and I'm going to run a scan against

302
00:14:59,850 --> 00:15:01,283
my target website.

303
00:15:02,570 --> 00:15:04,670
I've send the options in ZAP already,

304
00:15:04,670 --> 00:15:07,521
so that it will try and
explore all links possible

305
00:15:07,521 --> 00:15:10,521
and look for all the resources

306
00:15:10,521 --> 00:15:12,762
that are present on this website.

307
00:15:14,080 --> 00:15:17,983
So, let's hit off attack
to start the process.

308
00:15:20,370 --> 00:15:22,830
As this website is quite small,

309
00:15:22,830 --> 00:15:25,000
it will only take a few seconds

310
00:15:25,000 --> 00:15:27,450
for ZAP to trace all the dependencies

311
00:15:27,450 --> 00:15:28,870
or the third parties

312
00:15:28,870 --> 00:15:30,443
that are present on this site.

313
00:15:33,730 --> 00:15:34,700
As you can see,

314
00:15:34,700 --> 00:15:38,430
there are quite a few

315
00:15:38,430 --> 00:15:40,120
first party resources

316
00:15:40,120 --> 00:15:41,200
that are loaded.

317
00:15:41,200 --> 00:15:42,620
And then also some third parties

318
00:15:42,620 --> 00:15:45,393
that you can see are getting loaded here.

319
00:15:51,200 --> 00:15:54,873
Let me show you a graph
for better understanding.

320
00:15:59,520 --> 00:16:00,353
- Yeah.

321
00:16:01,260 --> 00:16:03,270
- As you can see the target website,

322
00:16:03,270 --> 00:16:05,689
it loads quite a few third parties.

323
00:16:05,690 --> 00:16:07,683
And I did my research on them all.

324
00:16:08,680 --> 00:16:10,742
I found out the view analytics,

325
00:16:12,290 --> 00:16:16,290
the one which is on the
normal side of the diagram.

326
00:16:16,290 --> 00:16:19,252
That is actually an open
source analytics library.

327
00:16:20,240 --> 00:16:22,340
And this is great news for me.

328
00:16:22,340 --> 00:16:25,100
Why? Because for the past few months

329
00:16:25,100 --> 00:16:26,230
I have been contributing

330
00:16:26,230 --> 00:16:29,270
to the open source community, quite a lot.

331
00:16:29,270 --> 00:16:32,010
I've gained their trust
in this time-frame.

332
00:16:32,010 --> 00:16:35,660
And just last week I put in a bug fix

333
00:16:35,660 --> 00:16:38,520
and I also slid in another dependency

334
00:16:39,500 --> 00:16:42,150
to fetch one small JavaScript

335
00:16:42,150 --> 00:16:43,523
from my servers.

336
00:16:45,940 --> 00:16:49,153
So now, when you load the target website,

337
00:16:50,030 --> 00:16:51,319
your browser is going to fetch

338
00:16:51,320 --> 00:16:54,363
in infected view analytics script,

339
00:16:55,280 --> 00:16:58,992
which brings us to the
next step of the attack.

340
00:17:04,490 --> 00:17:08,200
The attack payload are
just these five lines

341
00:17:08,200 --> 00:17:10,940
and these five lines is all that it takes

342
00:17:10,940 --> 00:17:12,980
to perform a data exfiltration attack

343
00:17:12,980 --> 00:17:14,130
that I will be demoing.

344
00:17:15,599 --> 00:17:19,223
In this case, the attacks deals
the username and password.

345
00:17:20,550 --> 00:17:23,780
Let me walk you through
this at a very high level

346
00:17:23,780 --> 00:17:25,899
and no programming knowledge is required

347
00:17:25,900 --> 00:17:27,263
to understand this.

348
00:17:28,380 --> 00:17:30,580
The first two lines say,

349
00:17:30,580 --> 00:17:32,919
let's read the username
and password values

350
00:17:32,920 --> 00:17:35,023
when they're typed in by the end user.

351
00:17:37,190 --> 00:17:38,560
That's how easy it is

352
00:17:38,560 --> 00:17:41,340
for one JavaScript on any JavaScript

353
00:17:41,340 --> 00:17:43,913
to read anything from a webpage.

354
00:17:45,060 --> 00:17:47,097
On the next three lines, say,

355
00:17:47,097 --> 00:17:52,097
"Hey, let's send this data
out to bad-server.com."

356
00:17:53,384 --> 00:17:54,840
And that's all there is

357
00:17:54,840 --> 00:17:58,013
to data exfiltration in JavaScript.

358
00:18:01,165 --> 00:18:02,639
Okay.

359
00:18:02,640 --> 00:18:04,300
Let's go to the target website

360
00:18:04,300 --> 00:18:05,822
to see the actual attack.

361
00:18:08,010 --> 00:18:10,160
This is regular Chrome.

362
00:18:10,160 --> 00:18:11,730
And on the right hand side,

363
00:18:11,730 --> 00:18:14,330
I have opened up developer tools

364
00:18:14,330 --> 00:18:15,370
on the side

365
00:18:15,370 --> 00:18:18,129
so that I can explain the attack better.

366
00:18:18,130 --> 00:18:19,670
I will be able to explain what's happening

367
00:18:19,670 --> 00:18:23,170
under the hood side-by-side to the website

368
00:18:23,170 --> 00:18:24,163
in this manner.

369
00:18:25,560 --> 00:18:27,023
So let's go to website.

370
00:18:33,800 --> 00:18:38,100
So, as soon as the website
loads under the hood,

371
00:18:38,100 --> 00:18:41,250
I can see that the
attacker's already loaded in

372
00:18:41,250 --> 00:18:45,113
their attack script
through view analytics.

373
00:18:46,010 --> 00:18:47,590
On the left-hand side,

374
00:18:47,590 --> 00:18:49,310
nothing seems to be a missed.

375
00:18:49,310 --> 00:18:50,629
The website loads properly

376
00:18:50,630 --> 00:18:51,963
and everything seems good.

377
00:18:53,320 --> 00:18:54,893
So let me try and log in.

378
00:18:55,956 --> 00:18:58,039
(typing)

379
00:19:10,930 --> 00:19:11,940
There we go.

380
00:19:11,940 --> 00:19:14,040
The login went in successfully

381
00:19:14,040 --> 00:19:17,310
and I didn't realize anything's amiss.

382
00:19:17,310 --> 00:19:19,490
Frederick Gordon can go about doing

383
00:19:19,490 --> 00:19:21,983
his usual business after logging in,

384
00:19:23,250 --> 00:19:26,420
but what's happening on the back

385
00:19:26,420 --> 00:19:30,290
is that a copy of the
username and password

386
00:19:30,290 --> 00:19:33,010
is sent back to the attacker servers.

387
00:19:33,010 --> 00:19:36,650
In this case, it's my attack servers.com.

388
00:19:36,650 --> 00:19:40,520
As you can see, here are the
username and the password

389
00:19:40,520 --> 00:19:42,633
that was sent back to the servers.

390
00:19:44,260 --> 00:19:49,260
In this case, the attacker
is only printing the logs

391
00:19:50,150 --> 00:19:51,433
just for this demo.

392
00:19:52,540 --> 00:19:56,030
And that's how easy it is
for credit card numbers

393
00:19:56,030 --> 00:20:00,260
and username and passwords to be stolen,

394
00:20:00,260 --> 00:20:02,663
and then later sold to the dark net.

395
00:20:04,360 --> 00:20:06,949
This is steady income for any attacker

396
00:20:06,950 --> 00:20:09,230
and one US credit card

397
00:20:09,230 --> 00:20:13,253
can go for around $7 on the dark market.

398
00:20:19,570 --> 00:20:22,980
So for such attacks, some of you may think

399
00:20:22,980 --> 00:20:26,740
that these attacks are
easy to stop or detect.

400
00:20:26,740 --> 00:20:31,070
Well, not really,
attackers have a few tricks

401
00:20:31,070 --> 00:20:32,210
up their sleeves

402
00:20:32,210 --> 00:20:35,040
to ensure that these attacks
are not easy to detect

403
00:20:35,040 --> 00:20:37,223
and don't go detected
for a very long time.

404
00:20:38,260 --> 00:20:42,093
The average Magecart infection is 46 days.

405
00:20:43,560 --> 00:20:44,510
Here are some of the reasons

406
00:20:44,510 --> 00:20:47,140
why these attackers are so successful

407
00:20:47,140 --> 00:20:49,743
and why these attacks
are so hard to detect.

408
00:20:51,350 --> 00:20:52,689
The attackers would, first of all

409
00:20:52,690 --> 00:20:54,240
use the standard techniques.

410
00:20:54,240 --> 00:20:55,730
They will obfuscated the code

411
00:20:55,730 --> 00:20:57,947
and ensure that no static analysis tools

412
00:20:57,947 --> 00:21:01,033
is able to detect their
malicious behavior.

413
00:21:03,025 --> 00:21:07,683
Here's where the attackers
get a bit more creative.

414
00:21:09,230 --> 00:21:12,123
So, the malicious
JavaScript that they put in,

415
00:21:13,240 --> 00:21:16,230
it will not perform anything malicious,

416
00:21:16,230 --> 00:21:19,313
if it realizes that
your dev tools are open.

417
00:21:20,330 --> 00:21:21,439
They're quite smart about this

418
00:21:21,440 --> 00:21:23,350
and they do not want to get detected

419
00:21:23,350 --> 00:21:25,070
by some security engineer,

420
00:21:25,070 --> 00:21:26,580
keeping their dev tools open

421
00:21:26,580 --> 00:21:29,253
and trying to understand this behavior.

422
00:21:30,480 --> 00:21:33,260
and I'm sure some security
engineer would be smiling

423
00:21:33,260 --> 00:21:34,215
and saying,

424
00:21:34,215 --> 00:21:37,907
"Aha, I'm going to try and use Wireshark,"

425
00:21:37,907 --> 00:21:39,917
"to trace all the network connections"

426
00:21:39,917 --> 00:21:41,307
"that go from the browser".

427
00:21:42,580 --> 00:21:43,980
What time do you work?

428
00:21:43,980 --> 00:21:45,940
Because these attacks scripts,

429
00:21:45,940 --> 00:21:48,960
they only load from one to 4:00 AM

430
00:21:48,960 --> 00:21:52,360
and that to uncertain randomized days

431
00:21:52,360 --> 00:21:53,832
on certain geographies.

432
00:21:55,520 --> 00:21:57,360
And even during that time,

433
00:21:57,360 --> 00:21:58,830
the malicious behavior

434
00:21:58,830 --> 00:22:01,933
only occurs for around 20% of the time.

435
00:22:02,800 --> 00:22:06,620
By that, I mean to say 80% of traffic

436
00:22:06,620 --> 00:22:11,620
at 1:00 AM to 4:00 AM is
still completely clean.

437
00:22:13,020 --> 00:22:14,370
And you won't even realize

438
00:22:14,370 --> 00:22:17,612
there's an attack taking
place to the other 20%.

439
00:22:18,990 --> 00:22:22,770
Lastly, I wanted to add
that the network requests

440
00:22:22,770 --> 00:22:26,400
to fix the attack scripts
is exactly identical

441
00:22:26,400 --> 00:22:29,670
to the other hundred, 150 network requests

442
00:22:29,670 --> 00:22:31,830
that the browser makes

443
00:22:31,830 --> 00:22:33,203
in those two seconds.

444
00:22:34,140 --> 00:22:35,360
How are you going to distinguish

445
00:22:35,360 --> 00:22:37,689
the good and the bad?

446
00:22:37,690 --> 00:22:39,220
It's like finding a needle

447
00:22:39,220 --> 00:22:40,843
in a haystack in my opinion.

448
00:22:42,950 --> 00:22:44,860
And that explains why these attacks

449
00:22:44,860 --> 00:22:47,219
mostly go undetected.

450
00:22:47,220 --> 00:22:48,720
In fact, a few years ago

451
00:22:48,720 --> 00:22:50,810
when Symantec analyzed over thousand

452
00:22:50,810 --> 00:22:52,570
forum jacking attempts

453
00:22:52,570 --> 00:22:54,700
in just a three-day period,

454
00:22:54,700 --> 00:22:56,970
they found that over 57 websites

455
00:22:56,970 --> 00:22:59,523
got hit with Magecart.

456
00:23:01,100 --> 00:23:02,449
The websites that got infected

457
00:23:02,450 --> 00:23:04,892
ranged from a fashion
retailer in Australia

458
00:23:04,892 --> 00:23:08,033
to a fitness reseller in Italy.

459
00:23:09,750 --> 00:23:12,130
And regulators have started taking notice

460
00:23:12,130 --> 00:23:15,060
and imposing very large fines

461
00:23:15,060 --> 00:23:17,570
on the main website directly

462
00:23:17,570 --> 00:23:20,193
not just on the third
parties, but the main website.

463
00:23:22,410 --> 00:23:23,810
And these attacks are causing

464
00:23:23,810 --> 00:23:25,550
significant financial damage

465
00:23:25,550 --> 00:23:28,260
not just in terms of these fines

466
00:23:28,260 --> 00:23:31,000
but also class action lawsuits,

467
00:23:31,000 --> 00:23:34,380
as well as a loss of customer loyalty

468
00:23:34,380 --> 00:23:36,323
and trust in the brand.

469
00:23:41,380 --> 00:23:43,110
So, now that you've seen

470
00:23:43,110 --> 00:23:44,669
how these attacks have transpired

471
00:23:44,670 --> 00:23:46,850
and how they're gaining momentum.

472
00:23:46,850 --> 00:23:48,780
Let's talk about what you can do

473
00:23:48,780 --> 00:23:50,283
to protect yourselves.

474
00:23:52,130 --> 00:23:52,980
And at this time,

475
00:23:52,980 --> 00:23:54,490
I'm just going to try and say that

476
00:23:54,490 --> 00:23:57,060
you have to use the
basic security principles

477
00:23:57,060 --> 00:23:58,993
of defense in layers.

478
00:24:00,310 --> 00:24:01,659
In other words,

479
00:24:01,660 --> 00:24:05,910
using RSA conferences theme for this year.

480
00:24:05,910 --> 00:24:08,993
They resilience into your security,

481
00:24:10,100 --> 00:24:13,629
create layers of defense
around your web application

482
00:24:13,630 --> 00:24:16,313
to increase security and redundancy.

483
00:24:18,080 --> 00:24:22,280
So, you cannot protect against threats

484
00:24:22,280 --> 00:24:24,180
that you do not know about.

485
00:24:24,180 --> 00:24:26,370
On the first step or the
first layer of defense

486
00:24:26,370 --> 00:24:28,709
is to understand all the third parties

487
00:24:28,710 --> 00:24:31,393
that in that integrate
with your application.

488
00:24:33,000 --> 00:24:38,000
Next, let's try and minimize
the number of third parties

489
00:24:38,180 --> 00:24:40,953
that are loaded on your web application.

490
00:24:43,090 --> 00:24:46,550
Layer three, adds an active protection

491
00:24:46,550 --> 00:24:48,230
to our web application

492
00:24:48,230 --> 00:24:49,700
so that it's protected,

493
00:24:49,700 --> 00:24:52,763
even if a third party has
been breached or attacked.

494
00:24:54,041 --> 00:24:57,649
And lastly, you should be
on the constant lookout

495
00:24:57,650 --> 00:24:59,940
for any signs of potential breaches

496
00:24:59,940 --> 00:25:02,270
from your third parties.

497
00:25:02,270 --> 00:25:04,230
Let's double click on each of these layers

498
00:25:04,230 --> 00:25:06,563
to understand these defenses a bit better.

499
00:25:08,640 --> 00:25:11,350
So, as thing you cannot
protect against threats

500
00:25:11,350 --> 00:25:13,429
that you do not know about.

501
00:25:13,430 --> 00:25:16,700
The first step is to
identify all third parties

502
00:25:16,700 --> 00:25:19,150
that your application loads

503
00:25:19,150 --> 00:25:20,690
and more importantly,

504
00:25:20,690 --> 00:25:23,430
all the third and fourth parties

505
00:25:23,430 --> 00:25:25,943
that are loaded by your third parties.

506
00:25:26,920 --> 00:25:30,593
That is the fourth and
fifth party JavaScripts

507
00:25:30,593 --> 00:25:33,713
that have been piggyback on
through your third party.

508
00:25:35,260 --> 00:25:39,300
It also helps to prioritize certain pages

509
00:25:39,300 --> 00:25:41,350
that have sensitive user input

510
00:25:41,350 --> 00:25:45,000
such as login pages and payment pages.

511
00:25:45,000 --> 00:25:47,810
And try and classify third parties

512
00:25:47,810 --> 00:25:49,409
based on

513
00:25:49,410 --> 00:25:52,470
how severe of a breach it would be

514
00:25:52,470 --> 00:25:54,450
to your web application,

515
00:25:54,450 --> 00:25:56,413
if the third party got compromised.

516
00:26:00,150 --> 00:26:01,530
When it comes to security,

517
00:26:01,530 --> 00:26:02,740
like many things,

518
00:26:02,740 --> 00:26:04,560
I'll say learn from the best.

519
00:26:04,560 --> 00:26:05,720
And Google is definitely one

520
00:26:05,720 --> 00:26:09,023
of the good champions on web security.

521
00:26:10,150 --> 00:26:12,700
What you're seeing here
is a typical login form

522
00:26:12,700 --> 00:26:14,080
that you've seen a hundred times

523
00:26:14,080 --> 00:26:17,060
I'm sure, while logging into Google.

524
00:26:17,060 --> 00:26:18,860
On the right hand side,

525
00:26:18,860 --> 00:26:21,600
I have the developer tools open,

526
00:26:21,600 --> 00:26:23,179
which has been set to

527
00:26:23,180 --> 00:26:26,383
filter out only third party resources.

528
00:26:27,480 --> 00:26:30,700
As you can see, that list is empty.

529
00:26:30,700 --> 00:26:32,530
That is Google doesn't have

530
00:26:32,530 --> 00:26:34,260
a single third party JavaScript

531
00:26:34,260 --> 00:26:36,970
on this critical sensitive page.

532
00:26:36,970 --> 00:26:38,440
And that's definitely an easy route

533
00:26:38,440 --> 00:26:41,820
that you can take to protect
your web application,

534
00:26:41,820 --> 00:26:45,090
minimize or reduce the
number of JavaScripts

535
00:26:45,090 --> 00:26:47,773
that are loaded from external sources.

536
00:26:49,020 --> 00:26:51,600
Sure. This is not feasible everywhere.

537
00:26:51,600 --> 00:26:54,070
And sometimes there is
an essential JavaScript

538
00:26:54,070 --> 00:26:57,332
which you require, which is
a third-party JavaScript.

539
00:26:58,330 --> 00:27:01,050
You can consider self-hosting it,

540
00:27:01,050 --> 00:27:03,791
and that would make the
third party JavaScript,

541
00:27:03,791 --> 00:27:05,659
a first party JavaScript

542
00:27:05,660 --> 00:27:07,483
since you are serving it directly.

543
00:27:12,790 --> 00:27:15,090
The active protection layer in my opinion

544
00:27:15,090 --> 00:27:18,040
is the most important layer of defense.

545
00:27:18,040 --> 00:27:21,340
And it addresses the worst case situation,

546
00:27:21,340 --> 00:27:23,973
when an actual third party is breached.

547
00:27:24,960 --> 00:27:26,930
These active protection methods

548
00:27:26,930 --> 00:27:28,850
allow your web application

549
00:27:28,850 --> 00:27:31,168
to successfully defend itself

550
00:27:31,168 --> 00:27:34,729
against these malicious
third party libraries,

551
00:27:34,730 --> 00:27:35,913
in real time.

552
00:27:37,830 --> 00:27:40,510
These protections are for web applications

553
00:27:40,510 --> 00:27:44,423
through W3C and HTML5 Standards.

554
00:27:45,430 --> 00:27:48,500
They're deployed through HTTP headers

555
00:27:48,500 --> 00:27:49,853
or in the page body.

556
00:27:51,140 --> 00:27:53,900
So, here's how the typical
workflow takes place.

557
00:27:53,900 --> 00:27:56,900
When a browser requests,
the web application,

558
00:27:56,900 --> 00:27:59,500
it comes with these protections

559
00:27:59,500 --> 00:28:01,583
that the browser then enforces.

560
00:28:02,500 --> 00:28:05,820
These standards are
enforced by the browser.

561
00:28:05,820 --> 00:28:09,530
So, when your web application
makes a request to

562
00:28:09,530 --> 00:28:12,250
fetch any third party resource,

563
00:28:12,250 --> 00:28:14,560
the browser ensures that these resources

564
00:28:14,560 --> 00:28:17,783
that are loaded are
secure and trustworthy.

565
00:28:19,320 --> 00:28:21,350
You're basically telling the browser

566
00:28:21,350 --> 00:28:23,149
to be responsible for your

567
00:28:23,150 --> 00:28:25,053
web application security now.

568
00:28:26,200 --> 00:28:27,960
The best part is

569
00:28:27,960 --> 00:28:31,149
94% of all internet traffic today

570
00:28:31,149 --> 00:28:34,943
uses a browser that
supports these standards.

571
00:28:36,210 --> 00:28:39,170
And these standards are free to use.

572
00:28:39,170 --> 00:28:41,373
Thanks to W3C working groups.

573
00:28:43,398 --> 00:28:44,449
Let's take a look

574
00:28:44,450 --> 00:28:47,010
at the three most important
security standards

575
00:28:47,010 --> 00:28:48,379
on the client side

576
00:28:48,380 --> 00:28:50,610
and how they would have
protected your website

577
00:28:50,610 --> 00:28:52,572
from the attack that I just demoed.

578
00:28:54,010 --> 00:28:56,113
The first one is Content Security Policy.

579
00:28:57,210 --> 00:28:58,480
Through this header,

580
00:28:58,480 --> 00:29:02,770
you can control what comes
in and what goes out.

581
00:29:02,770 --> 00:29:04,220
For example, you can list

582
00:29:04,220 --> 00:29:05,814
all the third party domains

583
00:29:05,814 --> 00:29:08,950
that are allowed to bring resources

584
00:29:08,950 --> 00:29:10,560
into your web application

585
00:29:11,470 --> 00:29:14,293
and all the domains that
data can be sent out to.

586
00:29:15,710 --> 00:29:17,680
Content Security Policy
would have prevented

587
00:29:17,680 --> 00:29:19,440
the attack that I demoed

588
00:29:19,440 --> 00:29:21,017
by not allowing the script

589
00:29:21,017 --> 00:29:24,490
from my server to load in the first place,

590
00:29:24,490 --> 00:29:27,713
my malicious server to
load in the first place.

591
00:29:28,550 --> 00:29:33,020
And further, it would have also
blocked the outflow of data,

592
00:29:33,020 --> 00:29:35,340
that is the data exfiltration,

593
00:29:35,340 --> 00:29:38,693
because the attack was sending
the data to a new server.

594
00:29:41,610 --> 00:29:45,209
The second one is SubResource Integrity.

595
00:29:45,210 --> 00:29:48,317
And this standard verifies the hash

596
00:29:48,317 --> 00:29:51,880
of a third party script in runtime.

597
00:29:51,880 --> 00:29:54,430
And it blocks the script from running,

598
00:29:54,430 --> 00:29:56,113
if the hash doesn't match.

599
00:29:57,100 --> 00:29:59,709
If SRI was protecting
the view analytics script

600
00:29:59,710 --> 00:30:01,690
from the earlier demo,

601
00:30:01,690 --> 00:30:03,560
then the browser would not

602
00:30:03,560 --> 00:30:06,572
have liked my malicious
modification of the script.

603
00:30:07,720 --> 00:30:09,770
The hash would have changed

604
00:30:09,770 --> 00:30:11,960
and the browser would not
have permitted the script

605
00:30:11,960 --> 00:30:13,223
to execute at all.

606
00:30:15,487 --> 00:30:20,480
And a third powerful standard
is the iFrame Sandboxing.

607
00:30:20,480 --> 00:30:22,580
This is a feature of modern browsers

608
00:30:22,580 --> 00:30:24,460
that allows the third party script

609
00:30:24,460 --> 00:30:27,483
to be fully isolated
from the main website.

610
00:30:28,510 --> 00:30:31,780
And if this was deployed
during the attack demo,

611
00:30:31,780 --> 00:30:34,240
the attack script could not have read

612
00:30:34,240 --> 00:30:36,903
the username and password values.

613
00:30:38,030 --> 00:30:41,200
This is because the
browser would have made

614
00:30:41,200 --> 00:30:46,010
the attacks group run in a
completely isolated context

615
00:30:46,010 --> 00:30:48,100
as compared to the main website,

616
00:30:48,100 --> 00:30:50,173
which had the login form.

617
00:30:52,600 --> 00:30:55,270
W3C and HTML5 standards can control

618
00:30:55,270 --> 00:30:57,629
over a hundred different browser behaviors

619
00:30:57,630 --> 00:31:02,207
that range from security
to privacy and compliance.

620
00:31:02,207 --> 00:31:07,207
As these standards are enforcing
security on the browser.

621
00:31:07,280 --> 00:31:09,330
That is the client side.

622
00:31:09,330 --> 00:31:10,270
That's why they're called

623
00:31:10,270 --> 00:31:12,363
client site security standards.

624
00:31:13,995 --> 00:31:15,780
I'll definitely recommend that you spend

625
00:31:15,780 --> 00:31:19,160
some time to get to know
the standards a bit better

626
00:31:19,160 --> 00:31:22,590
and also to set up some
standards for your website.

627
00:31:22,590 --> 00:31:25,820
I generally don't like to
explain a joke or a meme.

628
00:31:25,820 --> 00:31:28,429
So, I hope you get the irony when there is

629
00:31:28,430 --> 00:31:31,380
a third party service JavaScript

630
00:31:31,380 --> 00:31:33,240
that claims that it can protect

631
00:31:33,240 --> 00:31:35,723
against other third party JavaScript.

632
00:31:41,620 --> 00:31:43,820
The main security downside of using

633
00:31:43,820 --> 00:31:46,560
one defense JavaScript.

634
00:31:46,560 --> 00:31:48,562
Again, some attack JavaScript

635
00:31:48,563 --> 00:31:50,790
that are putting in the same privilege

636
00:31:50,790 --> 00:31:53,420
is that this is not good for security.

637
00:31:53,420 --> 00:31:56,040
You want your defense JavaScript to be

638
00:31:56,040 --> 00:31:58,623
at a higher privilege than the attack.

639
00:31:59,730 --> 00:32:01,970
And when that does not happen

640
00:32:01,970 --> 00:32:03,640
like for JavaScript based solutions

641
00:32:03,640 --> 00:32:05,590
where they're the same privilege,

642
00:32:05,590 --> 00:32:08,251
the attack JavaScript can simply get rid

643
00:32:08,251 --> 00:32:10,843
of your defense JavaScript.

644
00:32:12,060 --> 00:32:15,453
You always want your defense
to be at a higher privilege.

645
00:32:18,400 --> 00:32:22,420
And the W3C standards
from the previous slide

646
00:32:22,420 --> 00:32:24,060
they've been publicly scrutinized

647
00:32:24,060 --> 00:32:27,040
now recommended by the
security industry as a whole,

648
00:32:27,040 --> 00:32:29,360
rather they were even created

649
00:32:29,360 --> 00:32:31,803
by the security industry, actually.

650
00:32:34,760 --> 00:32:36,440
The JavaScript based solutions.

651
00:32:36,440 --> 00:32:38,020
They're also not free to use

652
00:32:38,020 --> 00:32:40,920
like the browser standard
which we mentioned earlier.

653
00:32:43,940 --> 00:32:45,370
So, now that you've added

654
00:32:45,370 --> 00:32:48,320
in sufficient defense to your application,

655
00:32:48,320 --> 00:32:50,010
what's next,

656
00:32:50,010 --> 00:32:52,370
you got to stay ahead of your adversaries

657
00:32:52,370 --> 00:32:55,010
and build a layer

658
00:32:55,010 --> 00:32:56,740
that can keep track

659
00:32:56,740 --> 00:32:58,360
of all the third parties

660
00:32:58,360 --> 00:33:00,780
and preemptively take action,

661
00:33:00,780 --> 00:33:03,889
when you feel that there's
something going wrong

662
00:33:03,890 --> 00:33:05,583
with one of your third parties.

663
00:33:08,960 --> 00:33:12,943
Now, that we have understood
the defenses in theory,

664
00:33:12,943 --> 00:33:16,310
let's take a look at a
sample web application

665
00:33:16,310 --> 00:33:19,210
that is implemented these defenses.

666
00:33:19,210 --> 00:33:20,080
In this case,

667
00:33:20,080 --> 00:33:23,419
I'm going to act as the website owner

668
00:33:23,420 --> 00:33:25,490
and walk you through that.

669
00:33:25,490 --> 00:33:28,800
So, first of all, I know all the resources

670
00:33:28,800 --> 00:33:30,570
and third parties that are

671
00:33:30,570 --> 00:33:33,300
in this website and webpage

672
00:33:33,300 --> 00:33:35,010
have examined them all

673
00:33:35,010 --> 00:33:37,270
and reviews the number of third parties

674
00:33:37,270 --> 00:33:38,253
that are loaded.

675
00:33:39,650 --> 00:33:42,290
The one essential strip
that was really required

676
00:33:42,290 --> 00:33:43,780
for my application,

677
00:33:43,780 --> 00:33:44,680
I'd have protected it

678
00:33:44,680 --> 00:33:47,500
through a SubResource Integrity Hash

679
00:33:47,500 --> 00:33:49,483
so that no one can tamper with it.

680
00:33:50,930 --> 00:33:55,130
Plus, I'm also using a strong
Content Security Policy

681
00:33:55,130 --> 00:33:57,660
to ensure that no extra scripts are loaded

682
00:33:58,720 --> 00:34:01,603
and no other data can
leave my web application.

683
00:34:03,030 --> 00:34:05,590
Lastly, I'm periodically checking

684
00:34:05,590 --> 00:34:08,179
all my third party scripts and vendors

685
00:34:08,179 --> 00:34:10,719
to ensure that they have not
been tampered or breached

686
00:34:10,719 --> 00:34:11,587
in any way.

687
00:34:13,840 --> 00:34:16,610
As we're coming to a
close of this session.

688
00:34:16,610 --> 00:34:18,560
I hope that you have
a better understanding

689
00:34:18,560 --> 00:34:20,360
of client side threats

690
00:34:20,360 --> 00:34:22,400
and the ways in which you can safeguard

691
00:34:22,400 --> 00:34:24,733
against this new age of threats.

692
00:34:26,500 --> 00:34:27,870
For the next steps,

693
00:34:27,870 --> 00:34:29,620
I'll recommend that in the coming weeks,

694
00:34:29,620 --> 00:34:32,009
you try and perform a resource inventory

695
00:34:32,010 --> 00:34:33,103
of your website.

696
00:34:34,449 --> 00:34:35,980
The next few months,

697
00:34:35,980 --> 00:34:38,639
get a CSP, use an SRI

698
00:34:38,639 --> 00:34:40,710
and be ready for the worst case

699
00:34:40,710 --> 00:34:42,743
in case a third party is breached.

700
00:34:44,010 --> 00:34:46,860
And lastly, pass on this message

701
00:34:46,860 --> 00:34:48,989
to other security professionals

702
00:34:48,989 --> 00:34:51,049
in your network and in your company.

703
00:34:51,050 --> 00:34:54,563
So, they too can protect
their websites and web assets.

704
00:34:56,820 --> 00:34:59,160
And if you're interested in knowing more.

705
00:34:59,160 --> 00:35:02,259
Tala Security has been
working in this field

706
00:35:02,260 --> 00:35:04,610
of eliminating client side attacks

707
00:35:04,610 --> 00:35:06,250
for the past five years

708
00:35:06,250 --> 00:35:09,073
and we've published a few
white papers on this topic.

709
00:35:09,960 --> 00:35:12,223
You can access them through the QR code.

710
00:35:13,180 --> 00:35:15,870
And there's also a link to our website

711
00:35:15,870 --> 00:35:18,569
which has a lot of free resources

712
00:35:18,570 --> 00:35:22,513
to help you get started
and secure your website.

713
00:35:24,210 --> 00:35:25,760
You can also feel free to reach out

714
00:35:25,760 --> 00:35:28,010
to me on my email address

715
00:35:28,010 --> 00:35:29,683
or connect with me on LinkedIn.

716
00:35:31,330 --> 00:35:32,180
Thank you.

717
00:35:32,180 --> 00:35:34,830
And there's a Q and a session
that is coming up next.

