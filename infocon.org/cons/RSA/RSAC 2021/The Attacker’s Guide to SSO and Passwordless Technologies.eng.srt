1
00:00:01,421 --> 00:00:02,429
- Hello, everyone.

2
00:00:02,430 --> 00:00:04,230
It is great to have you all here

3
00:00:04,230 --> 00:00:07,010
and I think it's going
to be a great session

4
00:00:07,010 --> 00:00:10,719
and we will all can learn
from it valuable things.

5
00:00:10,720 --> 00:00:12,854
I'm Asaf Hecht, a team leader of

6
00:00:12,854 --> 00:00:16,490
one of the technical research
team at CyberArk Labs.

7
00:00:16,490 --> 00:00:19,349
The team and I did lots of
research working around cloud

8
00:00:19,350 --> 00:00:22,560
and modern authentication
and authorization techniques.

9
00:00:22,560 --> 00:00:27,009
Today, we are going to dive
into the minds of the attackers

10
00:00:27,010 --> 00:00:30,610
and talk about how they see
the latest security trends

11
00:00:30,610 --> 00:00:33,661
of passwordless and single sign-on.

12
00:00:33,661 --> 00:00:37,440
Are these promising security
concept indeed bulletproof?

13
00:00:37,440 --> 00:00:38,272
Let's start.

14
00:00:40,810 --> 00:00:42,930
Well the best way to start the session is

15
00:00:42,930 --> 00:00:45,414
with something personal to break the ice.

16
00:00:45,414 --> 00:00:49,700
And I, like I guess many of
you, worked a lot from home

17
00:00:49,700 --> 00:00:52,740
last year due to the
corona virus situation.

18
00:00:52,740 --> 00:00:54,530
And one day I saw this nice guy

19
00:00:54,530 --> 00:00:58,050
with his dog in the background
and just felt the same

20
00:00:58,050 --> 00:01:01,885
because I also have a dog
running around in my house

21
00:01:01,886 --> 00:01:05,450
and so the video captures
my daily feeling.

22
00:01:05,450 --> 00:01:07,470
- Maple could you stop just for a second?

23
00:01:07,470 --> 00:01:11,670
Three, two one. More cold air.

24
00:01:11,670 --> 00:01:15,080
Three, two, one.
(dog barking)

25
00:01:15,080 --> 00:01:17,190
Cold air continues across the area tonight

26
00:01:17,190 --> 00:01:20,100
potential for some frost
and freeze for some of us.

27
00:01:20,100 --> 00:01:21,675
To warm up it's gonna take.

28
00:01:21,675 --> 00:01:23,733
(dog barking)

29
00:01:23,733 --> 00:01:27,440
(man clapping)
Hey, Hey.

30
00:01:27,440 --> 00:01:30,970
Come here, come here, come here.

31
00:01:33,720 --> 00:01:38,090
Sit. Three, two, one.

32
00:01:38,090 --> 00:01:40,770
Frost and freeze for
some of us again tonight.

33
00:01:40,770 --> 00:01:43,229
The cold air is lingering
through much of the week.

34
00:01:43,230 --> 00:01:44,490
We'll show you when the best chance

35
00:01:44,490 --> 00:01:46,732
of precipitation is with future casts.

36
00:01:46,732 --> 00:01:49,830
(dog barking)

37
00:01:49,830 --> 00:01:54,830
Maple. Three, two, one.

38
00:01:56,485 --> 00:02:01,485
(dog barking)
Maple. Excuse me.

39
00:02:01,660 --> 00:02:05,429
Hello. Come here. Come here, come here.

40
00:02:05,430 --> 00:02:07,900
Do you wanna be in this
tease? Is that what you want?

41
00:02:07,900 --> 00:02:12,900
Come here. Just lean up here I
can do this. Three, two, one.

42
00:02:14,580 --> 00:02:18,750
- Well, so do you also
feel like him sometimes?

43
00:02:18,750 --> 00:02:22,020
Personally I do. Anyway, let's begin.

44
00:02:22,020 --> 00:02:24,610
Modern environments are
built from hundreds,

45
00:02:24,610 --> 00:02:28,070
hundreds of devices like laptops, servers,

46
00:02:28,070 --> 00:02:30,730
mobile phones, application
and cloud services.

47
00:02:30,730 --> 00:02:33,579
And they are all connected
together with thousands

48
00:02:33,580 --> 00:02:37,750
of (indistinct) communication
and serving access needs.

49
00:02:37,750 --> 00:02:41,440
The way that these access
requests are being validated

50
00:02:41,440 --> 00:02:46,210
are with SQL element and it's
only the valid identity source

51
00:02:46,210 --> 00:02:47,340
should know.

52
00:02:47,340 --> 00:02:49,880
Most of the time it will
be done with passwords

53
00:02:49,880 --> 00:02:54,880
or binary keys like SSH keys,
cloud access keys, and so on.

54
00:02:56,570 --> 00:02:58,390
From the attackers side

55
00:02:58,390 --> 00:03:01,940
these passwords and keys
are the main targets.

56
00:03:01,940 --> 00:03:04,160
If the attacker's
succeeding in the efforts of

57
00:03:04,160 --> 00:03:06,040
stealing these secrets

58
00:03:06,040 --> 00:03:08,910
they can easily impersonate
the compromised identity

59
00:03:08,910 --> 00:03:12,770
and do whatever they want
on the victim's behalf.

60
00:03:12,770 --> 00:03:15,150
For long decades these passwords and keys

61
00:03:15,150 --> 00:03:18,670
are the core problem of
the cybersecurity field.

62
00:03:18,670 --> 00:03:20,929
We all can agree that the amount

63
00:03:20,930 --> 00:03:23,650
of these password and keys is huge.

64
00:03:23,650 --> 00:03:27,350
Just think of yourself how
many passwords do you have?

65
00:03:27,350 --> 00:03:29,750
How many online websites and system

66
00:03:29,750 --> 00:03:31,363
you are registered to?

67
00:03:31,363 --> 00:03:34,650
And how it's awful to
manage all these passwords

68
00:03:34,650 --> 00:03:36,940
and also click them again and again

69
00:03:36,940 --> 00:03:39,270
into different applications.

70
00:03:39,270 --> 00:03:42,010
That's why in the recent years

71
00:03:42,010 --> 00:03:44,890
the world introduced
two promising concepts.

72
00:03:44,890 --> 00:03:47,790
The first is passwordless authentication

73
00:03:47,790 --> 00:03:52,690
and the second is single
sign-on also known as SSO.

74
00:03:52,690 --> 00:03:57,690
With SSO user can authenticated,
can authenticate once

75
00:03:58,450 --> 00:04:01,339
and afterwards they can access
all the connected devices

76
00:04:01,340 --> 00:04:02,800
and services.

77
00:04:02,800 --> 00:04:06,700
Therefore the users only have one password

78
00:04:06,700 --> 00:04:10,929
so it should be easier to
make the password stronger

79
00:04:10,930 --> 00:04:12,690
and protect it better.

80
00:04:12,690 --> 00:04:15,563
Now, does it really
protect us from attackers?

81
00:04:16,459 --> 00:04:21,459
Well the answer is it's complex
but in the bottom line no.

82
00:04:21,640 --> 00:04:24,550
No because there are two
major break-in points.

83
00:04:24,550 --> 00:04:27,020
The first is the initial authentication.

84
00:04:27,020 --> 00:04:29,880
Many times it is still
done with a password

85
00:04:30,830 --> 00:04:34,690
and we know that password are
still one of the weak spots.

86
00:04:34,690 --> 00:04:37,219
Definitely when it is used by human users

87
00:04:38,460 --> 00:04:40,159
we tend to use weak password.

88
00:04:40,160 --> 00:04:42,680
We use them and even
tend to write them down

89
00:04:42,680 --> 00:04:44,700
on a piece of paper.

90
00:04:44,700 --> 00:04:49,700
And on top of all they are easy
target for phishing attacks.

91
00:04:50,160 --> 00:04:55,160
The second break-in point is
after the SSO is completed

92
00:04:57,390 --> 00:05:00,740
the initial, completed
the initial authentication

93
00:05:00,740 --> 00:05:03,800
there is an identity token that is valid

94
00:05:03,800 --> 00:05:06,423
to multiple services and resources.

95
00:05:07,480 --> 00:05:10,390
If this one security token is compromised

96
00:05:10,390 --> 00:05:14,080
all the related services
are compromised with it.

97
00:05:14,080 --> 00:05:18,830
Moreover it will also bypass
multifactor authentication

98
00:05:18,830 --> 00:05:21,979
because the SSO token is being issued

99
00:05:21,980 --> 00:05:26,193
after the multifactor check
was passed successfully.

100
00:05:27,110 --> 00:05:32,110
So we don't love password
and that's why passwordless'

101
00:05:32,130 --> 00:05:35,170
gaining more and more popularity.

102
00:05:35,170 --> 00:05:37,300
With passwordless methods

103
00:05:37,300 --> 00:05:41,010
you can authenticate yourself
with biometrics attributes

104
00:05:41,010 --> 00:05:43,240
like face recognition and fingerprint

105
00:05:44,100 --> 00:05:45,853
or using a simple pin code.

106
00:05:46,750 --> 00:05:50,970
And in the background an extra
layer of security was added

107
00:05:50,970 --> 00:05:53,690
that is using the local PPM of the device

108
00:05:53,690 --> 00:05:55,960
the trusted platform model.

109
00:05:55,960 --> 00:05:58,549
And after all of this, does it help?

110
00:05:58,550 --> 00:06:01,230
This is what we are going to discuss.

111
00:06:01,230 --> 00:06:03,140
Let's dive into the details

112
00:06:03,140 --> 00:06:05,700
and see what attacker can still do.

113
00:06:05,700 --> 00:06:08,760
First we will focus on passwordless trend.

114
00:06:08,760 --> 00:06:11,140
Microsoft leads the
market with their great

115
00:06:11,140 --> 00:06:13,770
and popular solution Windows Hello.

116
00:06:13,770 --> 00:06:16,729
With Windows Hello you
don't need password anymore.

117
00:06:16,730 --> 00:06:20,410
Of course, only for the things
that Windows Hello supports

118
00:06:20,410 --> 00:06:22,030
and currently has integration with

119
00:06:22,030 --> 00:06:24,460
but becomes more and more.

120
00:06:24,460 --> 00:06:27,299
You can have a Windows Hello for business

121
00:06:27,300 --> 00:06:29,950
in the network environment
with active directory

122
00:06:29,950 --> 00:06:33,810
and Azure active directory
or even set it up locally

123
00:06:33,810 --> 00:06:36,750
without external active directory

124
00:06:36,750 --> 00:06:40,090
and replace your local login password.

125
00:06:40,090 --> 00:06:42,169
To be clear under the (indistinct)

126
00:06:42,170 --> 00:06:45,660
there are still password to every user.

127
00:06:45,660 --> 00:06:48,270
The user will not need
to use them regularly

128
00:06:48,270 --> 00:06:51,210
but their password still exists for them

129
00:06:51,210 --> 00:06:54,840
and stored in the active
directory just like before.

130
00:06:54,840 --> 00:06:58,489
With Windows Hello to each
user who will be added

131
00:06:58,490 --> 00:07:00,410
additional authentication method

132
00:07:00,410 --> 00:07:03,980
additional keypass I would say

133
00:07:05,120 --> 00:07:08,850
and Windows Hello authentication
is built on top of

134
00:07:08,850 --> 00:07:12,520
key-based and certificate-based
authentication.

135
00:07:12,520 --> 00:07:15,330
Again in simple words you can think of

136
00:07:15,330 --> 00:07:18,020
a private and public keeper.

137
00:07:18,020 --> 00:07:21,320
The public key of the alarm
mechanism is being stored

138
00:07:21,320 --> 00:07:23,800
in a new attribute in the active directory

139
00:07:23,800 --> 00:07:25,820
that you can see here.

140
00:07:25,820 --> 00:07:28,940
It's called msDS-KeyCredentialLink.

141
00:07:28,940 --> 00:07:31,560
And the private key of the user is stored

142
00:07:31,560 --> 00:07:33,570
on the device itself.

143
00:07:33,570 --> 00:07:36,120
In the best case the
private key will be stored

144
00:07:36,120 --> 00:07:38,070
inside the local TPM.

145
00:07:38,070 --> 00:07:42,020
TPM is ultimately a physical
trusted platform model

146
00:07:42,020 --> 00:07:44,340
that makes the private key inaccessible

147
00:07:44,340 --> 00:07:48,289
for the operation system
and prevent remote access

148
00:07:48,290 --> 00:07:50,840
to the keys from the network.

149
00:07:50,840 --> 00:07:53,109
You can see here a nice diagram.

150
00:07:53,110 --> 00:07:56,320
Now here come the tricks.

151
00:07:56,320 --> 00:07:58,948
The private key in the TPM is secure by

152
00:07:58,948 --> 00:08:00,940
a passwordless method.

153
00:08:00,940 --> 00:08:04,630
It is locked unless
the passwordless method

154
00:08:04,630 --> 00:08:07,580
was successfully passed.

155
00:08:07,580 --> 00:08:11,700
In Windows Hello these
methods could be using

156
00:08:11,700 --> 00:08:14,860
a face recognition,
fingerprint, pin code, and more

157
00:08:14,860 --> 00:08:16,560
as you can see in the picture.

158
00:08:16,560 --> 00:08:18,730
Only when the initial passwordless check

159
00:08:18,730 --> 00:08:20,600
was passed successfully

160
00:08:20,600 --> 00:08:23,730
then the private key
is unlocked in the TPM

161
00:08:23,730 --> 00:08:27,450
and the domain authentication
process is starting

162
00:08:27,450 --> 00:08:29,340
with the active directory.

163
00:08:29,340 --> 00:08:32,250
In general Windows Hello is a great thing

164
00:08:32,250 --> 00:08:35,510
because the private key
never leaves the local device

165
00:08:35,510 --> 00:08:39,669
and supposedly cannot be
extracted by regular users

166
00:08:39,669 --> 00:08:42,150
and used from a different computer.

167
00:08:42,150 --> 00:08:46,490
If a user configured Hello
on different machines

168
00:08:46,490 --> 00:08:49,210
there will be different unique private key

169
00:08:49,210 --> 00:08:52,240
for each one of these machines.

170
00:08:52,240 --> 00:08:56,700
Hello is also considered
as a multifactor solution

171
00:08:56,700 --> 00:08:59,230
because it involves a key or certificate

172
00:08:59,230 --> 00:09:02,540
that is tied to the physical device

173
00:09:02,540 --> 00:09:05,310
and there is also the additional method

174
00:09:05,310 --> 00:09:07,959
for starting the Hello
authentication process

175
00:09:07,960 --> 00:09:11,300
if it's a biometric
element or other secrets

176
00:09:11,300 --> 00:09:12,262
like a pin code.

177
00:09:13,250 --> 00:09:15,690
Here you can see the full
authentication process.

178
00:09:15,690 --> 00:09:18,120
First, the user start the process

179
00:09:18,120 --> 00:09:21,730
and needs to pass the
face recognition check

180
00:09:21,730 --> 00:09:24,290
as in the second example here.

181
00:09:24,290 --> 00:09:28,520
Then the private key is unlocked
from the TPM and is used

182
00:09:28,520 --> 00:09:32,477
for starting a Kerberos
authentication in the domain.

183
00:09:32,477 --> 00:09:37,060
The active directory validates
the usage of the private key

184
00:09:37,060 --> 00:09:40,439
against the related users public key.

185
00:09:40,440 --> 00:09:43,050
And if the validation is successfully

186
00:09:43,050 --> 00:09:45,969
the authentication process is completed

187
00:09:45,970 --> 00:09:50,800
by sending a TGT, ticket granting
ticket, to the endpoints.

188
00:09:50,800 --> 00:09:54,400
From here the access to the
resources by the endpoint

189
00:09:54,400 --> 00:09:58,730
and by the user are the
same as before as being done

190
00:09:58,730 --> 00:10:00,733
without Windows Hello.

191
00:10:00,733 --> 00:10:03,619
You can see the Hello only chains

192
00:10:03,620 --> 00:10:07,480
the first authentication phase
and not the ongoing process

193
00:10:07,480 --> 00:10:10,210
of accessing the network resources

194
00:10:10,210 --> 00:10:13,590
after the first
authentication is completed.

195
00:10:13,590 --> 00:10:15,483
So sounds great isn't it?

196
00:10:16,520 --> 00:10:18,670
But what the attackers still do?

197
00:10:18,670 --> 00:10:22,110
This is our main goal for today.

198
00:10:22,110 --> 00:10:25,590
Well, the fact is the most of
the active directory attacks

199
00:10:25,590 --> 00:10:26,860
still work.

200
00:10:26,860 --> 00:10:30,180
The reason is Windows Hello just changes

201
00:10:30,180 --> 00:10:32,449
the first authentication step.

202
00:10:32,450 --> 00:10:36,250
After this it's still Kerberos
and NTLM authentication

203
00:10:36,250 --> 00:10:37,820
in the environment.

204
00:10:37,820 --> 00:10:39,990
Therefore attackers can still perform

205
00:10:39,990 --> 00:10:43,730
the notorious domain
attacks of pass the hash,

206
00:10:43,730 --> 00:10:45,983
pass the ticket, and over-pass the hash.

207
00:10:47,020 --> 00:10:49,400
And this is one of the
important slide here.

208
00:10:49,400 --> 00:10:51,880
We should all realize this one

209
00:10:51,880 --> 00:10:54,310
and let's see a demo for
pass the ticket attack

210
00:10:54,310 --> 00:10:55,859
in the an environment that is

211
00:10:55,860 --> 00:10:57,973
a full adoption of Windows Hello.

212
00:10:59,449 --> 00:11:03,113
Well here is an endpoint of a user name U.

213
00:11:04,343 --> 00:11:08,683
You can see U can log in with
a password and with a pin.

214
00:11:12,130 --> 00:11:15,583
Now I will login with the pin code.

215
00:11:16,830 --> 00:11:21,553
It means that I'm login
currently with windows Hello.

216
00:11:23,610 --> 00:11:25,830
Now I locked the computer

217
00:11:25,830 --> 00:11:29,073
and change the user for an administrator.

218
00:11:35,010 --> 00:11:36,700
I'm loading Mimikatz

219
00:11:41,250 --> 00:11:44,683
and performing the
log-on passwords command.

220
00:11:45,800 --> 00:11:50,800
And you can see here user U,
also even when it's configured

221
00:11:51,840 --> 00:11:54,510
with Windows Hello passwordless solution

222
00:11:54,510 --> 00:11:56,633
it's still as NTLM hash.

223
00:11:58,360 --> 00:12:00,590
Now what about Kerberos tickets?

224
00:12:01,870 --> 00:12:05,113
I will use Mimikatz to
export them from the memory.

225
00:12:08,694 --> 00:12:09,640
Here they are.

226
00:12:09,640 --> 00:12:13,470
You can see that the end point the machine

227
00:12:13,470 --> 00:12:16,900
and the U is Kerberos tickets

228
00:12:16,900 --> 00:12:19,813
even in these passwordless methods.

229
00:12:22,300 --> 00:12:24,890
Next thing as an attacker

230
00:12:24,890 --> 00:12:28,540
I could take these Kerberos tickets

231
00:12:28,540 --> 00:12:32,242
and copy them to a different machine.

232
00:12:34,470 --> 00:12:39,470
Now I'm changing the look
to a different server

233
00:12:40,000 --> 00:12:42,940
and I'm logging in to the different server

234
00:12:42,940 --> 00:12:44,023
as an administrator.

235
00:12:49,250 --> 00:12:52,220
Next thing is you can see
here the Kerberos tickets

236
00:12:52,220 --> 00:12:54,640
the free tickets I copied earlier.

237
00:12:56,240 --> 00:13:01,240
Now you can see that currently
in my memory, device memory,

238
00:13:01,307 --> 00:13:04,210
there are a bunch of Kerberos tickets

239
00:13:04,210 --> 00:13:06,630
for the administrator user.

240
00:13:06,630 --> 00:13:08,020
I remove them.

241
00:13:08,020 --> 00:13:11,860
You can see currently there
are no tickets in the memory.

242
00:13:11,860 --> 00:13:15,070
The next step in the
pass the ticket attack

243
00:13:15,070 --> 00:13:20,070
is to use Mimikatz to load
the copied Kerberos tickets

244
00:13:22,350 --> 00:13:25,403
of U user to the memory.

245
00:13:29,560 --> 00:13:31,300
Here it is done.

246
00:13:31,300 --> 00:13:36,300
You can see that I loaded
the TGT of U into the memory

247
00:13:36,787 --> 00:13:39,993
but I still administrator.

248
00:13:42,750 --> 00:13:46,260
Now when I'm doing the
action on the network

249
00:13:46,260 --> 00:13:51,260
you can see that TGT is getting
more TGS for the U users.

250
00:13:52,800 --> 00:13:57,790
And this is how pass the
ticket attack still happens

251
00:13:57,790 --> 00:14:00,642
in passwordless
authentication environment.

252
00:14:02,237 --> 00:14:05,083
In addition to all the
popular domain attacks

253
00:14:05,083 --> 00:14:08,350
that are still valid in
Windows Hello environment

254
00:14:08,350 --> 00:14:11,000
there was also some attack surface

255
00:14:11,000 --> 00:14:12,700
around Windows Hello itself.

256
00:14:12,700 --> 00:14:15,430
The researcher Michael Grafnetter

257
00:14:15,430 --> 00:14:18,463
described three attack
vectors in the past.

258
00:14:19,330 --> 00:14:23,160
Injecting a Windows
Hello key into the user.

259
00:14:23,160 --> 00:14:27,709
In this attack vector the
attackers injects a custom NGC

260
00:14:27,710 --> 00:14:30,780
next generation credential key

261
00:14:30,780 --> 00:14:33,520
to the user active directory attributes.

262
00:14:33,520 --> 00:14:37,030
The attack steps are
generate an RSA key pair,

263
00:14:37,030 --> 00:14:40,870
create NGC blob from the RSA public key,

264
00:14:40,870 --> 00:14:44,530
write the NGC blob to
the active directory,

265
00:14:44,530 --> 00:14:46,762
and authenticate using PKINT.

266
00:14:48,670 --> 00:14:52,189
Prerequisite to this attack
is to have write permission

267
00:14:52,190 --> 00:14:53,790
on the target user account.

268
00:14:53,790 --> 00:14:56,469
That's means it could be done only

269
00:14:56,470 --> 00:14:58,820
as a post-exploitation action

270
00:14:58,820 --> 00:15:00,923
but it's still useful for attackers.

271
00:15:01,850 --> 00:15:05,630
In addition Windows Hello's
keys that were created

272
00:15:05,630 --> 00:15:08,720
by TPM version older than 2017

273
00:15:08,720 --> 00:15:11,890
are vulnerable to be
cracked in an easier way.

274
00:15:11,890 --> 00:15:15,020
You can see the publication
about this ROCA vulnerability

275
00:15:15,020 --> 00:15:17,683
that's made big waves a few years ago.

276
00:15:19,700 --> 00:15:24,540
Another thing is when
someone sets up Windows Hello

277
00:15:24,540 --> 00:15:27,010
the Hello's public key is written to

278
00:15:27,010 --> 00:15:30,230
the on-premises active directory

279
00:15:30,230 --> 00:15:33,080
and also to the Azure active directory.

280
00:15:33,080 --> 00:15:37,612
And this key is tied to
the user and to the device.

281
00:15:37,612 --> 00:15:42,150
If the device is removed, it's
attached Windows Hello key

282
00:15:42,150 --> 00:15:44,310
is considered orphaned.

283
00:15:44,310 --> 00:15:48,859
However this orphaned keys
deleted and sometimes even if

284
00:15:48,860 --> 00:15:51,503
they're corresponding device is remove.

285
00:15:52,390 --> 00:15:55,260
While any authentication
to Azure active directory

286
00:15:55,260 --> 00:15:58,490
using an orphaned key will be rejected

287
00:15:58,490 --> 00:16:02,500
some of these keys cause security issues

288
00:16:02,500 --> 00:16:05,300
in active directories on-prem

289
00:16:05,300 --> 00:16:09,670
in the version of 2016 and 2019.

290
00:16:09,670 --> 00:16:11,329
So be careful.

291
00:16:11,330 --> 00:16:14,053
Now it's time to talk
about single sign-on.

292
00:16:14,950 --> 00:16:17,900
Most of the organization
progressed in the recent years

293
00:16:17,900 --> 00:16:22,459
to hybrid networks architect tools.

294
00:16:22,460 --> 00:16:25,130
In hybrid environments
you can easily enjoy

295
00:16:25,130 --> 00:16:27,770
the advantages of both worlds, right?

296
00:16:27,770 --> 00:16:32,240
The cloud and your old
on-prem systems and networks.

297
00:16:32,240 --> 00:16:34,770
The connectivity to
the cloud could be done

298
00:16:34,770 --> 00:16:38,670
with different IAM and
single sign on solutions

299
00:16:38,670 --> 00:16:41,800
with federation solution like ADFS

300
00:16:41,800 --> 00:16:46,319
and also there are a few
synchronization solution

301
00:16:46,320 --> 00:16:48,600
like Azure AD Connect.

302
00:16:48,600 --> 00:16:52,960
In the case of Azure AD
Connect, you can install it

303
00:16:52,960 --> 00:16:56,680
on an on-prem server and it will connect

304
00:16:56,680 --> 00:17:00,045
and kind of replicate the
on-prem active directory

305
00:17:00,046 --> 00:17:02,750
to the Azure active directory.

306
00:17:02,750 --> 00:17:07,750
In that way, all the users
could also be authenticated

307
00:17:07,780 --> 00:17:11,349
to the cloud in a convenient
way over the internet

308
00:17:11,349 --> 00:17:14,020
and from anywhere (indistinct) access

309
00:17:14,020 --> 00:17:15,500
the different online application

310
00:17:15,500 --> 00:17:20,300
without any limitation of being
inside the on-prem network

311
00:17:20,300 --> 00:17:22,342
or using VPNs.

312
00:17:23,450 --> 00:17:26,170
The synchronization also applies

313
00:17:26,170 --> 00:17:28,349
to the domain device accounts.

314
00:17:28,349 --> 00:17:31,810
A machine in the hybrid
environment will be defined

315
00:17:31,810 --> 00:17:35,820
as a joint device both in
the on-prem active directory

316
00:17:35,820 --> 00:17:38,060
and in the Azure active directory.

317
00:17:38,060 --> 00:17:40,120
Here you can see an example.

318
00:17:40,120 --> 00:17:45,000
On the right you can see the
on-prem domain of the machines

319
00:17:45,000 --> 00:17:48,070
and on the left you can
see that in the same time

320
00:17:48,070 --> 00:17:52,919
the machine is also defined
as an Azure AD join device.

321
00:17:52,920 --> 00:17:56,600
In addition you can see the
connected Azure tenant ID

322
00:17:56,600 --> 00:17:57,763
and tenant name.

323
00:17:59,210 --> 00:18:02,670
In hybrid environments
there are many advantages

324
00:18:02,670 --> 00:18:06,890
and they're related one to
our talk is the ability to do

325
00:18:06,890 --> 00:18:09,900
an out of the box SSO.

326
00:18:09,900 --> 00:18:13,430
You log on once to your local machine

327
00:18:13,430 --> 00:18:15,880
and then can access a different

328
00:18:15,880 --> 00:18:19,880
and more cloud services
and online applications.

329
00:18:19,880 --> 00:18:24,800
You can access this online
services with your web browser.

330
00:18:24,800 --> 00:18:28,730
In Chrome there is a great
extension by Microsoft

331
00:18:28,730 --> 00:18:31,943
that will do the
connectivity work for you.

332
00:18:32,860 --> 00:18:36,209
And in Edge browser
this functionality comes

333
00:18:36,210 --> 00:18:38,220
built in natively.

334
00:18:38,220 --> 00:18:40,390
Here is an example to a list of

335
00:18:40,390 --> 00:18:44,200
several connected online
application that I can access

336
00:18:44,200 --> 00:18:48,710
automatically with my previous
initial authentication

337
00:18:48,710 --> 00:18:52,400
and without the need to
enter my password again.

338
00:18:52,400 --> 00:18:53,563
This is a great thing.

339
00:18:54,430 --> 00:18:58,377
Now a short background
on modern authentication

340
00:18:58,377 --> 00:19:00,240
and authorization.

341
00:19:00,240 --> 00:19:04,608
Where the OAuth protocol
which provides authorization

342
00:19:04,608 --> 00:19:09,210
and access to resources
and with open ID connect

343
00:19:09,210 --> 00:19:14,210
that is based on OAuth and
adds a layer of authentication

344
00:19:15,120 --> 00:19:17,350
and SSO capabilities.

345
00:19:17,350 --> 00:19:20,669
Both are super, super popular.

346
00:19:20,670 --> 00:19:23,780
OAuth is built from validation of

347
00:19:23,780 --> 00:19:25,920
different security's tokens.

348
00:19:25,920 --> 00:19:30,000
First you get the refresh
token and with it you get

349
00:19:30,000 --> 00:19:34,100
an access token and with the access token

350
00:19:34,100 --> 00:19:37,850
you are being authorized
and get the final access

351
00:19:37,850 --> 00:19:40,919
to the desired application.

352
00:19:40,920 --> 00:19:45,320
In the case of Azure browser
SSO here is the main stream.

353
00:19:45,320 --> 00:19:50,320
The users logs on then gets
a PRT, primary refresh token.

354
00:19:51,530 --> 00:19:55,240
The PRT is more of a
long-term persistent token

355
00:19:55,240 --> 00:20:00,070
that reminds the ticket
granting ticket, the TGT,

356
00:20:00,070 --> 00:20:03,840
in Kerberos in the
domain active directory.

357
00:20:03,840 --> 00:20:08,310
With the PRT you get a PRT cookie that is

358
00:20:08,310 --> 00:20:11,300
in a JWT structure.

359
00:20:11,300 --> 00:20:13,570
Then to access the online application

360
00:20:13,570 --> 00:20:17,250
the PRT is in use for
getting refresh tokens

361
00:20:17,250 --> 00:20:22,250
and access tokens like we saw
earlier in the hall of logic.

362
00:20:23,120 --> 00:20:28,120
In real life in this process
there is some more complexity

363
00:20:28,240 --> 00:20:31,730
and some use of dynamic and derives keys

364
00:20:31,730 --> 00:20:34,140
that's add more security.

365
00:20:34,140 --> 00:20:39,140
These keys are issued per
device and per session.

366
00:20:39,720 --> 00:20:42,240
The question you should ask yourself is,

367
00:20:42,240 --> 00:20:45,830
where all these keys are
being stored on the machine?

368
00:20:45,830 --> 00:20:47,909
Because they are sensitive right?

369
00:20:47,910 --> 00:20:52,280
They are providing access
and here is the answer.

370
00:20:52,280 --> 00:20:55,510
The PRT is stored in the
TPM or in the registry

371
00:20:55,510 --> 00:20:58,020
if no TPM is available.

372
00:20:58,020 --> 00:21:00,800
And the PRT cookie is
stored in the Lsass memory

373
00:21:00,800 --> 00:21:04,163
in the CloudAP one of the
authentication packages.

374
00:21:05,010 --> 00:21:09,560
The refresh and access tokens
are used a lot by the browser

375
00:21:09,560 --> 00:21:14,216
and they are stored by using
for example DPAPI mechanisms.

376
00:21:15,420 --> 00:21:18,690
The next and an important
question from the attacker's side

377
00:21:18,690 --> 00:21:21,050
is how you can extract these keys

378
00:21:21,050 --> 00:21:24,520
and what are the required
privileges for doing it.

379
00:21:24,520 --> 00:21:27,920
You can see that with local
admin rights on the machines

380
00:21:27,920 --> 00:21:30,720
you can extract the PRT itself

381
00:21:30,720 --> 00:21:35,350
and therefore steal the entire
SSO authentication context.

382
00:21:35,350 --> 00:21:38,870
And even without admin rights,
attacker can still access

383
00:21:38,870 --> 00:21:42,379
the browser data of the compromised user

384
00:21:42,380 --> 00:21:45,380
and then impersonate his SSO context

385
00:21:45,380 --> 00:21:48,320
and access on his behalf or our behalf

386
00:21:48,320 --> 00:21:52,419
the target application
and make lots of damage.

387
00:21:52,420 --> 00:21:56,930
Here is a summary of the two
attack vectors we discussed.

388
00:21:56,930 --> 00:22:01,210
With the regular user
privileges attacker can request

389
00:22:01,210 --> 00:22:04,980
regular refresh tokens
like the user and access

390
00:22:04,980 --> 00:22:06,833
Azure AD connected resources.

391
00:22:07,700 --> 00:22:10,260
Additionally with local
administrator privileges

392
00:22:10,260 --> 00:22:13,550
attacker can extract the entire PRT

393
00:22:13,550 --> 00:22:16,530
and even use it from a different machines.

394
00:22:16,530 --> 00:22:17,493
Very risky.

395
00:22:18,360 --> 00:22:21,810
That is how new attack is
introduced to the world.

396
00:22:21,810 --> 00:22:24,659
The attack of pass the PRT.

397
00:22:24,660 --> 00:22:27,140
This is what we described here.

398
00:22:27,140 --> 00:22:30,260
The amazing thing is that
it's already supported

399
00:22:30,260 --> 00:22:33,930
in the famous Mimikatz
tool and you can see here

400
00:22:33,930 --> 00:22:36,163
a tweet by Benjamin Delpy.

401
00:22:37,630 --> 00:22:41,050
So great research work
in the past in this field

402
00:22:41,050 --> 00:22:45,389
was done by Dirk-jan
Mollema and again Delpy

403
00:22:45,390 --> 00:22:48,180
and you can see here another tweet

404
00:22:48,180 --> 00:22:51,410
on the proof of concept
they did on these methods

405
00:22:51,410 --> 00:22:53,357
of attacking the browser SSO.

406
00:22:55,150 --> 00:22:57,210
When talking on OAuth protocol

407
00:22:57,210 --> 00:23:00,010
it's important to also
mention the weakness

408
00:23:00,010 --> 00:23:04,330
in OAuth application that
our cyber labs discovered.

409
00:23:04,330 --> 00:23:07,263
We called it BlackDirect Vulnerability.

410
00:23:08,490 --> 00:23:13,240
In every OAuth application
there is a list of URLs that are

411
00:23:13,240 --> 00:23:17,240
that the tokens are allowed
to be transferred to.

412
00:23:17,240 --> 00:23:20,420
This also, this is also
known as the list of

413
00:23:20,420 --> 00:23:22,333
the allowed redirect URLs.

414
00:23:23,810 --> 00:23:27,050
In the research we did we
discovered orphaned URLs,

415
00:23:28,152 --> 00:23:31,190
URLs in sensitive OAuth application

416
00:23:31,190 --> 00:23:33,540
and potential attackers could reduce that,

417
00:23:33,540 --> 00:23:35,970
these sub domains to themselves

418
00:23:35,970 --> 00:23:38,260
and then hijack the security token

419
00:23:38,260 --> 00:23:39,913
of this sensitive application.

420
00:23:40,941 --> 00:23:42,793
Here is the main flow in OAuth.

421
00:23:44,400 --> 00:23:47,470
The user browses to
the target application,

422
00:23:47,470 --> 00:23:50,030
office.com as an example.

423
00:23:51,320 --> 00:23:54,341
The application, the online
service redirect the user

424
00:23:54,341 --> 00:23:59,341
to the authorization server
forgetting his access token.

425
00:23:59,848 --> 00:24:04,760
Then the browser sends a request
to the authorization server

426
00:24:04,760 --> 00:24:07,350
for creating access token.

427
00:24:07,350 --> 00:24:10,990
The browser gets the access token

428
00:24:10,990 --> 00:24:15,990
and with it provide it to the
office.com and get his data.

429
00:24:18,990 --> 00:24:22,090
And here is the attack
scenario when attackers

430
00:24:22,090 --> 00:24:24,159
exploit BlackDirect vulnerability.

431
00:24:24,160 --> 00:24:29,160
When they registered took over
a domain that was trusted by

432
00:24:29,350 --> 00:24:31,320
one of the OAuth application.

433
00:24:31,320 --> 00:24:34,800
The clients surf to the
compromised subdomain

434
00:24:34,800 --> 00:24:39,800
then the subdomain that is
being handled by the attacker

435
00:24:40,660 --> 00:24:44,960
is transfer them to the
authorization server

436
00:24:44,960 --> 00:24:47,500
and authorization server provides

437
00:24:47,500 --> 00:24:50,760
in creating an access token and this time

438
00:24:50,760 --> 00:24:55,023
the access token is being
sent to the attacker's server.

439
00:24:56,360 --> 00:25:01,360
And in his (indistinct) he
can access the user's data

440
00:25:02,160 --> 00:25:04,973
on his behalf and do
whatever you want with it.

441
00:25:05,910 --> 00:25:08,800
The reason for this vulnerable
OAuth application is because

442
00:25:08,800 --> 00:25:12,379
it is an hard task to correctly manage

443
00:25:12,380 --> 00:25:14,730
all the connected subdomains.

444
00:25:14,730 --> 00:25:18,150
You can see on the right
some example, real examples

445
00:25:18,150 --> 00:25:20,540
for the orphaned subdomains URLs

446
00:25:20,540 --> 00:25:23,629
that we discovered and
were reported to Microsoft

447
00:25:23,630 --> 00:25:26,763
so it's okay, they are fixed now.

448
00:25:27,630 --> 00:25:32,100
Yeah but you can see the
quite complex subdomains and

449
00:25:32,100 --> 00:25:34,780
but still they're important ones

450
00:25:34,780 --> 00:25:36,620
and the application trusts them.

451
00:25:36,620 --> 00:25:39,033
Access token could be sent to them.

452
00:25:40,010 --> 00:25:42,460
It's part of this (indistinct)
research we develop

453
00:25:42,460 --> 00:25:45,010
and publish a free scanning tool.

454
00:25:45,010 --> 00:25:48,640
You can see you can easily
scan your environment

455
00:25:48,640 --> 00:25:53,103
by going to the, this
website here black.direct.

456
00:25:54,350 --> 00:25:56,629
Many companies already scanned themselves

457
00:25:56,630 --> 00:25:58,810
and were amazed by the findings.

458
00:25:58,810 --> 00:26:01,300
You can see that in the average

459
00:26:01,300 --> 00:26:06,300
there are about six vulnerable
URLs in each company.

460
00:26:06,700 --> 00:26:10,600
So we'll commend you as well
to scan your OAuth application

461
00:26:10,600 --> 00:26:12,800
and their trusted URL.

462
00:26:12,800 --> 00:26:15,050
Then be sure to handle the orphaned URLs

463
00:26:15,050 --> 00:26:17,822
that attacker might take over.

464
00:26:18,840 --> 00:26:22,173
Protect your OAuth application
before something bad happens.

465
00:26:23,070 --> 00:26:24,790
That's it for today.

466
00:26:24,790 --> 00:26:27,010
Let's talk on what you can do

467
00:26:27,010 --> 00:26:31,073
for mitigating the attack
vectored we discussed.

468
00:26:31,920 --> 00:26:35,990
First make sure all your SSO
and passwordless solution

469
00:26:35,990 --> 00:26:39,760
are implemented according
to their best practices

470
00:26:39,760 --> 00:26:44,556
and make sure to install
the latest updates.

471
00:26:44,556 --> 00:26:49,250
Then focus, and this is
the most important step,

472
00:26:49,250 --> 00:26:51,300
focus on the important things of

473
00:26:51,300 --> 00:26:56,300
securing your privilege
accounts, including local admins,

474
00:26:56,610 --> 00:27:00,983
sensitive application, and
your remote access procedures.

475
00:27:01,850 --> 00:27:06,080
Remember if the security
fundamentals will be compromised

476
00:27:06,080 --> 00:27:10,399
SSO and passwordless will not help

477
00:27:10,400 --> 00:27:12,680
and the attackers will celebrate

478
00:27:12,680 --> 00:27:15,570
with the attack vector we covered today.

479
00:27:15,570 --> 00:27:19,889
In addition, we recommend
on performing periodic scans

480
00:27:19,890 --> 00:27:22,180
for the threats we presented

481
00:27:22,180 --> 00:27:26,610
including removing unused
Windows Hello keys,

482
00:27:26,610 --> 00:27:31,320
go for the logging, login
logs in your environments

483
00:27:31,320 --> 00:27:35,550
and scan yourself against
BlackDirect Vulnerability.

484
00:27:35,550 --> 00:27:38,490
To sum it up we reviewed
the real life threats

485
00:27:38,490 --> 00:27:41,383
in the field of
passwordless, SSO, and OAuth.

486
00:27:43,080 --> 00:27:45,399
More details are available online.

487
00:27:45,400 --> 00:27:47,790
We invite you to check them out.

488
00:27:47,790 --> 00:27:51,500
Follow the best practices
when implementing

489
00:27:51,500 --> 00:27:56,500
these new technologies and
the most important thing is

490
00:27:56,530 --> 00:28:00,250
ensure the security
fundamentals are in place

491
00:28:00,250 --> 00:28:03,880
like protecting the access
point of our network

492
00:28:03,880 --> 00:28:06,453
and secure your privilege accounts.

493
00:28:07,410 --> 00:28:09,910
Thank you for joining the session today.

494
00:28:09,910 --> 00:28:12,340
I hope you learned
several important things

495
00:28:12,340 --> 00:28:14,409
and if you have any question or feedback

496
00:28:14,410 --> 00:28:18,410
feel free to contact me through
my Twitter account @Hechtov.

497
00:28:18,410 --> 00:28:20,440
Also we invite you to have a look

498
00:28:20,440 --> 00:28:23,820
at our CyberArk Labs dedicated website.

499
00:28:23,820 --> 00:28:27,010
It is more useful
security open source tools

500
00:28:27,010 --> 00:28:30,379
and publication of the
research work we do.

501
00:28:30,380 --> 00:28:32,450
Thank you and have a good day.

