1
00:00:00,989 --> 00:00:03,560
- Hello, thanks for joining us here

2
00:00:03,560 --> 00:00:06,870
at this virtual RSA conference.

3
00:00:06,870 --> 00:00:09,690
Myself and Jason Lam,

4
00:00:09,690 --> 00:00:13,390
we'll be talking today about
well attack and defend.

5
00:00:13,390 --> 00:00:16,100
Protecting modern distributed
applications and components.

6
00:00:16,100 --> 00:00:19,550
Now, Jason Lam he is
a certified instructor

7
00:00:19,550 --> 00:00:21,280
for the SANS Institute.

8
00:00:21,280 --> 00:00:24,230
I'm myself, Johannes Ullrich,

9
00:00:24,230 --> 00:00:28,410
I'm the Dean of research for
the SANS Technology Institute

10
00:00:28,410 --> 00:00:29,920
our crafted school.

11
00:00:29,920 --> 00:00:31,870
And the two of us together

12
00:00:31,870 --> 00:00:35,870
are teaching a defending
web application class.

13
00:00:35,870 --> 00:00:38,349
And in this class in
the last couple of years

14
00:00:38,350 --> 00:00:39,400
when we updated it,

15
00:00:39,400 --> 00:00:41,610
we added more and more
sort of cloud components

16
00:00:41,610 --> 00:00:43,730
and modern applications like this.

17
00:00:43,730 --> 00:00:46,680
And why we did this we came
sort of across a couple

18
00:00:46,680 --> 00:00:48,645
of patterns that we saw

19
00:00:48,645 --> 00:00:53,200
that we would like to share
here in this presentation.

20
00:00:53,200 --> 00:00:55,290
And part of this as well, of course,

21
00:00:55,290 --> 00:00:57,660
microservices and API's.

22
00:00:57,660 --> 00:00:59,650
A modern web application is really sort of

23
00:00:59,650 --> 00:01:01,370
a single page application

24
00:01:01,370 --> 00:01:04,780
that pulls in a multitude of components.

25
00:01:04,780 --> 00:01:08,870
So we'll talk about some of
the application challenges here

26
00:01:08,870 --> 00:01:10,970
but also the integrity challenges.

27
00:01:10,970 --> 00:01:15,820
How do we preserve the integrity
of these remote components

28
00:01:15,820 --> 00:01:16,839
In the end of course,

29
00:01:16,840 --> 00:01:20,270
well, we don't like to leave
you hanging with just problems.

30
00:01:20,270 --> 00:01:22,320
We'll also sort of give
you some solutions.

31
00:01:22,320 --> 00:01:23,899
Actually the way we set up the talk

32
00:01:23,900 --> 00:01:27,325
is that Jason will sort of protect

33
00:01:27,325 --> 00:01:29,420
the attacker's perspective

34
00:01:29,420 --> 00:01:33,990
while I'm presenting the
defender's perspective.

35
00:01:33,990 --> 00:01:37,970
So with that, Jason, why don't you walk us

36
00:01:37,970 --> 00:01:40,320
through that little architecture
that you set up here

37
00:01:40,320 --> 00:01:42,550
for this presentation.

38
00:01:42,550 --> 00:01:44,179
- Sure thing Johannes, thank you for that.

39
00:01:44,180 --> 00:01:46,140
And hi everyone.

40
00:01:46,140 --> 00:01:48,250
Today, our application, the subject

41
00:01:48,250 --> 00:01:50,070
that we're gonna talk about today

42
00:01:50,070 --> 00:01:53,520
is looks like what's
you have on the screen.

43
00:01:53,520 --> 00:01:55,170
And what we have particularly

44
00:01:55,170 --> 00:01:58,550
is a modern day web application.

45
00:01:58,550 --> 00:02:00,060
And what does that mean is that

46
00:02:00,060 --> 00:02:02,310
we have a static file storage component

47
00:02:02,310 --> 00:02:04,480
that actually store, for example

48
00:02:04,480 --> 00:02:07,760
the images, the JavaScript
that you're gonna load.

49
00:02:07,760 --> 00:02:10,860
And then subsequently once
the JavaScript hit the browser

50
00:02:10,860 --> 00:02:14,490
the browser then calls out to, through API

51
00:02:14,490 --> 00:02:17,430
to integrate the data back into the page.

52
00:02:17,430 --> 00:02:21,530
And that API call is going
through the API gateway

53
00:02:21,530 --> 00:02:23,830
as it normally does these days.

54
00:02:23,830 --> 00:02:26,250
With the API gateway behind it,

55
00:02:26,250 --> 00:02:29,780
there are other API back ends as well.

56
00:02:29,780 --> 00:02:33,110
So the API gateway also
act as a traffic cop

57
00:02:33,110 --> 00:02:35,970
and also security device in some cases

58
00:02:35,970 --> 00:02:39,253
to make sure that, you know
the bad guys don't get in.

59
00:02:39,253 --> 00:02:43,010
In addition, we also
have an IAM component.

60
00:02:43,010 --> 00:02:45,850
That's where the users go and authenticate

61
00:02:45,850 --> 00:02:49,670
and get authorization to
access certain information

62
00:02:49,670 --> 00:02:51,149
within the application.

63
00:02:51,150 --> 00:02:54,280
So that's really the background
of what the application

64
00:02:54,280 --> 00:02:56,540
that we're going to look into today.

65
00:02:56,540 --> 00:02:58,670
With that, Johannes why
don't you walk us through

66
00:02:58,670 --> 00:03:00,899
the application, how does
it actually look like,

67
00:03:00,900 --> 00:03:02,240
how does it work?

68
00:03:02,240 --> 00:03:05,333
- Yeah, so this is the little
application that we have here.

69
00:03:05,333 --> 00:03:09,120
Again sort of a very simple,
single page application.

70
00:03:09,120 --> 00:03:13,200
So demonstrate that as architecture

71
00:03:13,200 --> 00:03:15,109
when I am logging in here,

72
00:03:15,110 --> 00:03:19,727
I am actually then being
redirected to our gateway,

73
00:03:19,727 --> 00:03:21,357
to our altercation gateway.

74
00:03:21,357 --> 00:03:26,357
Let me just reload the page
here and click on that.

75
00:03:26,402 --> 00:03:31,402
So SANS and then my complex password.

76
00:03:31,900 --> 00:03:36,544
That sends me back now with
the altercation information

77
00:03:36,544 --> 00:03:38,750
to this application.

78
00:03:38,750 --> 00:03:42,790
And I can look up the service ticket here.

79
00:03:42,790 --> 00:03:45,510
So this is the simple
application we built.

80
00:03:45,510 --> 00:03:49,581
Of course there is some
API in the background.

81
00:03:49,581 --> 00:03:51,320
We just saw key cloak.

82
00:03:51,320 --> 00:03:53,680
That's what they're
using here for our IAM.

83
00:03:53,680 --> 00:03:56,150
We also have Kong, another
open source product

84
00:03:56,150 --> 00:04:00,440
that we're using for our API gateway.

85
00:04:00,440 --> 00:04:03,390
With that Jason, tell
us a little bit about

86
00:04:03,390 --> 00:04:07,179
how you would attack this application?

87
00:04:07,180 --> 00:04:08,570
- Sure.

88
00:04:08,570 --> 00:04:10,980
Today we've got three
different attack scenarios.

89
00:04:10,980 --> 00:04:12,429
Let's talk about scenario number one.

90
00:04:12,430 --> 00:04:15,770
I call that the microservice exposure.

91
00:04:15,770 --> 00:04:18,470
And let's see how we expose things.

92
00:04:18,470 --> 00:04:21,990
So before the microservices age

93
00:04:23,000 --> 00:04:25,140
our request looks something similar

94
00:04:25,140 --> 00:04:27,380
to what you see on the screen.

95
00:04:27,380 --> 00:04:30,360
So we've got a giant request

96
00:04:30,360 --> 00:04:32,260
and then there are different data set

97
00:04:32,260 --> 00:04:33,610
that get assembled together

98
00:04:33,610 --> 00:04:38,190
to hit the website with
something like a session cookie

99
00:04:38,190 --> 00:04:40,910
to identify yourself When
you go back to the website.

100
00:04:40,910 --> 00:04:43,280
That's how it started right?

101
00:04:43,280 --> 00:04:46,003
And then in the modern day
application, next slide.

102
00:04:47,200 --> 00:04:49,849
What we have looks like this.

103
00:04:49,850 --> 00:04:53,240
The request looks like you
still call the application.

104
00:04:53,240 --> 00:04:56,210
You still send a post
to the web application.

105
00:04:56,210 --> 00:05:00,799
But now instead of the
reckless session and so on

106
00:05:00,800 --> 00:05:03,720
you send this bang, the
authorization token.

107
00:05:03,720 --> 00:05:06,664
Mark this chunk of text there, right?

108
00:05:06,664 --> 00:05:08,539
Make a mental note of it.

109
00:05:08,540 --> 00:05:11,883
Later on this chunk of
text is going to benefit us

110
00:05:11,883 --> 00:05:15,570
from an attacker standpoint, huge way.

111
00:05:15,570 --> 00:05:16,500
Okay.

112
00:05:16,500 --> 00:05:19,870
So that's the subject of
our discussion later on.

113
00:05:19,870 --> 00:05:21,480
Next.

114
00:05:21,480 --> 00:05:23,480
Before we pivot over to the demo

115
00:05:24,400 --> 00:05:26,820
what we're trying to achieve
here in this attack scenario

116
00:05:26,820 --> 00:05:30,840
is there was the API
gateway in the middle.

117
00:05:30,840 --> 00:05:33,250
What can we do and how do we actually

118
00:05:33,250 --> 00:05:35,930
use some of those
credentials that we have used

119
00:05:35,930 --> 00:05:39,000
that we've seen earlier
to actually sort of bypass

120
00:05:39,000 --> 00:05:43,630
the API gateway and hit
the back end API services?

121
00:05:43,630 --> 00:05:46,110
That's kind of what
we're going to do here.

122
00:05:46,110 --> 00:05:46,943
Okay.

123
00:05:46,943 --> 00:05:49,099
With that let's get over to the demo

124
00:05:49,100 --> 00:05:52,443
and we'll show you some of
these attacks scenarios.

125
00:05:53,870 --> 00:05:56,160
Now with that, the first
thing that I want to highlight

126
00:05:56,160 --> 00:06:00,610
is that we just pop up the
developer tools in the browser.

127
00:06:00,610 --> 00:06:03,870
Any modern day browser will
have the developer tools.

128
00:06:03,870 --> 00:06:05,700
And this is really meant for debunking

129
00:06:05,700 --> 00:06:09,820
and also help us identify what
goes on in the background.

130
00:06:09,820 --> 00:06:13,849
With that we want to show the
request that we sent earlier.

131
00:06:13,850 --> 00:06:17,560
So we can go to the network
tab on the developer screws.

132
00:06:17,560 --> 00:06:19,450
Yes, we can generate the traffic

133
00:06:19,450 --> 00:06:21,330
and go to the network perhaps.

134
00:06:21,330 --> 00:06:24,010
And you can see that just now that request

135
00:06:24,010 --> 00:06:28,234
actually generated there's
one, two, three, four request

136
00:06:28,234 --> 00:06:30,340
to the website.

137
00:06:30,340 --> 00:06:32,169
And if we click on that request,

138
00:06:32,170 --> 00:06:34,640
it will show you the additional details

139
00:06:34,640 --> 00:06:36,082
related to the request.

140
00:06:37,234 --> 00:06:39,859
You can see quite a bit of details there,

141
00:06:39,860 --> 00:06:41,750
but I want to highlight
the bottom part to you,

142
00:06:41,750 --> 00:06:43,200
which is the request headers.

143
00:06:44,050 --> 00:06:47,800
So along with that request, it was a token

144
00:06:47,800 --> 00:06:51,280
that was sent forth to
the web applications.

145
00:06:51,280 --> 00:06:55,299
And that token is exactly what

146
00:06:55,300 --> 00:06:58,940
the subject of our next part is gonna be,

147
00:06:58,940 --> 00:07:00,380
the attack scenario.

148
00:07:00,380 --> 00:07:01,790
So what we're gonna do

149
00:07:01,790 --> 00:07:04,820
is we're gonna copy this whole request.

150
00:07:04,820 --> 00:07:09,200
So a nice browser these
days allow you to copy

151
00:07:09,200 --> 00:07:11,550
in higher requests as if it is a curl.

152
00:07:11,550 --> 00:07:12,383
What is curl?

153
00:07:12,383 --> 00:07:15,880
Curl is a command line
tool to generate a request

154
00:07:15,880 --> 00:07:19,140
so that you can manipulate
it as much as you want.

155
00:07:19,140 --> 00:07:21,080
And we just copied that.

156
00:07:21,080 --> 00:07:25,330
And we can, before we
actually go and do anything

157
00:07:25,330 --> 00:07:28,010
let's just talk about what we can do

158
00:07:28,010 --> 00:07:32,099
to actually identify
targets to actually attack.

159
00:07:32,100 --> 00:07:34,640
So, so far we've copied
a request, but you know

160
00:07:34,640 --> 00:07:36,599
where are we gonna drop it, right?

161
00:07:36,600 --> 00:07:40,525
So if we go back to the
browser for a second.

162
00:07:40,525 --> 00:07:44,099
When we want to identify targets right?

163
00:07:44,100 --> 00:07:45,810
Okay so we said we would bypass.

164
00:07:45,810 --> 00:07:48,193
But bypassing, where do we land?

165
00:07:49,186 --> 00:07:51,760
In determining what targets

166
00:07:51,760 --> 00:07:53,430
we can go and drop this credential

167
00:07:53,430 --> 00:07:55,320
and say hey service me please.

168
00:07:55,320 --> 00:07:58,040
We can go and take a
look at this certificate.

169
00:07:58,040 --> 00:08:02,920
So modern day web applications,
obviously you have HTTPS.

170
00:08:02,920 --> 00:08:05,850
You know, the SSL, the TLS portion of it.

171
00:08:05,850 --> 00:08:09,030
And it requires you to have a certificate.

172
00:08:09,030 --> 00:08:12,789
If you don't get a certificate
here, it has multiple names.

173
00:08:12,790 --> 00:08:16,430
These may be names that
are other components

174
00:08:16,430 --> 00:08:19,620
of your web application
that accept that token.

175
00:08:19,620 --> 00:08:22,420
So maybe you can just directly talk to it

176
00:08:22,420 --> 00:08:23,930
using the credentials

177
00:08:23,930 --> 00:08:27,030
that you have already
authenticated yourself with

178
00:08:27,030 --> 00:08:29,179
and ask for service, okay.

179
00:08:29,180 --> 00:08:30,690
So that's one way.

180
00:08:30,690 --> 00:08:32,330
And the other way that you can also

181
00:08:32,330 --> 00:08:34,380
do this particular portion is

182
00:08:34,380 --> 00:08:37,250
also going to the certificate search.

183
00:08:37,250 --> 00:08:40,919
Essentially all certificate
authority nowadays

184
00:08:40,919 --> 00:08:45,829
publish the logs of all the
certificate registration

185
00:08:45,830 --> 00:08:48,280
and they let you search it.

186
00:08:48,280 --> 00:08:51,120
Organizations like Google, gather together

187
00:08:51,120 --> 00:08:52,340
and let you search it.

188
00:08:52,340 --> 00:08:55,580
So right now what we're
doing is that we show you

189
00:08:55,580 --> 00:08:56,880
related to this domain.

190
00:08:56,880 --> 00:09:00,480
These are the certificate
oh these are the host names

191
00:09:00,480 --> 00:09:02,250
that have certificates.

192
00:09:02,250 --> 00:09:06,040
These are the juicy, high level
target that we can attack.

193
00:09:06,040 --> 00:09:09,010
Now armed with that information

194
00:09:09,010 --> 00:09:11,370
we can potentially go off to our attack.

195
00:09:11,370 --> 00:09:14,560
And there are other things that
you can also attack as well.

196
00:09:14,560 --> 00:09:16,010
Right, like you can also target--

197
00:09:16,010 --> 00:09:19,080
You can also do port scans
or identify other ports

198
00:09:19,080 --> 00:09:23,139
that are on the same host
that are serving web content

199
00:09:23,139 --> 00:09:26,410
or other hosts on the same sub-net,

200
00:09:26,410 --> 00:09:28,300
the network IP address range.

201
00:09:28,300 --> 00:09:31,120
That those could be targets as well.

202
00:09:31,120 --> 00:09:32,310
So for the purpose of this

203
00:09:32,310 --> 00:09:35,099
let's simulate that we have another port.

204
00:09:35,100 --> 00:09:36,530
Listening--

205
00:09:36,530 --> 00:09:41,480
You know, that is the
target back end API was.

206
00:09:41,480 --> 00:09:44,600
Now earlier we copied that curl command.

207
00:09:44,600 --> 00:09:46,390
That's what this is, right?

208
00:09:46,390 --> 00:09:48,540
You see a lot of text here

209
00:09:48,540 --> 00:09:51,719
but what it is is that the
browser is telling you,

210
00:09:51,720 --> 00:09:53,720
hey if you use this Chrome command

211
00:09:53,720 --> 00:09:56,950
then you generate the exact
same request that I sent

212
00:09:56,950 --> 00:09:58,610
to the website earlier.

213
00:09:58,610 --> 00:10:01,380
So over here, you know
the highlight of that

214
00:10:01,380 --> 00:10:04,352
is the top part which
is, you know the URL.

215
00:10:04,352 --> 00:10:07,829
We're sending the
request over there, okay?

216
00:10:07,830 --> 00:10:11,128
And let's send it now.

217
00:10:11,128 --> 00:10:14,293
8443 is where we're sending it, the port.

218
00:10:15,240 --> 00:10:17,710
So we got a response back, okay.

219
00:10:17,710 --> 00:10:18,930
The response comes back.

220
00:10:18,930 --> 00:10:21,520
You can see, those of you
who know HTTP protocol,

221
00:10:21,520 --> 00:10:24,430
this is HTTP1.1200 okay.

222
00:10:24,430 --> 00:10:28,329
And I also want to highlight
the last line of the header,

223
00:10:28,330 --> 00:10:30,510
which is beer Kong.

224
00:10:30,510 --> 00:10:34,760
Kong is our API gateway as
Johannes mentioned earlier, okay.

225
00:10:34,760 --> 00:10:39,560
So this particular request was
serviced by the API gateway.

226
00:10:39,560 --> 00:10:44,560
And then the last portion
of it is the data portion,

227
00:10:44,730 --> 00:10:47,140
which we saw earlier
in the web application.

228
00:10:47,140 --> 00:10:48,580
Now that's how it goes.

229
00:10:48,580 --> 00:10:52,740
What if we change it to another port

230
00:10:52,740 --> 00:10:56,710
and drop it to our target, okay.

231
00:10:56,710 --> 00:10:59,210
Our target in this case,
our simulation here is

232
00:10:59,210 --> 00:11:02,073
the back end is actually running on 443.

233
00:11:03,090 --> 00:11:04,273
Let's send it.

234
00:11:05,390 --> 00:11:08,660
Now this one is a little bit different.

235
00:11:08,660 --> 00:11:10,459
Now you'll already notice that

236
00:11:10,460 --> 00:11:13,260
the header comes back
a little bit different.

237
00:11:13,260 --> 00:11:14,590
What difference is there?

238
00:11:14,590 --> 00:11:16,870
Do you notice a beer pattern?

239
00:11:16,870 --> 00:11:18,060
I don't.

240
00:11:18,060 --> 00:11:22,869
It is because we sent it
directly bypassing the gateway

241
00:11:22,870 --> 00:11:24,990
directly to the API back end.

242
00:11:24,990 --> 00:11:26,790
That's what we've done here.

243
00:11:26,790 --> 00:11:28,750
And the service answer,

244
00:11:28,750 --> 00:11:31,390
sorry the back end service answered it.

245
00:11:31,390 --> 00:11:34,630
And without any crying, any complaints,

246
00:11:34,630 --> 00:11:36,920
it just came back with the same data.

247
00:11:36,920 --> 00:11:39,930
Notice that the end results,
you know the bottom part

248
00:11:39,930 --> 00:11:42,079
is really the same, the
message is the same.

249
00:11:42,080 --> 00:11:44,300
Now I just bypass the API gateway.

250
00:11:44,300 --> 00:11:46,120
You may say, hey what's the big deal?

251
00:11:46,120 --> 00:11:48,140
I'll let Johannes talk about

252
00:11:48,140 --> 00:11:50,319
what it means from a defense standpoint.

253
00:11:50,320 --> 00:11:53,700
What if I just, you know,
broke on his application.

254
00:11:53,700 --> 00:11:54,880
Johannes.
- Yeah so

255
00:11:54,880 --> 00:11:59,290
let me show you Kong, the API
gateway that we using here

256
00:11:59,290 --> 00:12:03,870
and the administrative interface for Kong.

257
00:12:03,870 --> 00:12:07,460
Let me pull this up here
to show a little bit what

258
00:12:07,460 --> 00:12:11,960
sort of security features
we do have available here.

259
00:12:11,960 --> 00:12:16,960
Now, first of all vacation
is still a done by our API.

260
00:12:17,090 --> 00:12:20,010
So we didn't bypass all vacation.

261
00:12:20,010 --> 00:12:23,600
But Kong offers a number of features

262
00:12:23,600 --> 00:12:26,060
like here we just have a couple enabled.

263
00:12:26,060 --> 00:12:28,089
Bot detection, which is very simple.

264
00:12:28,090 --> 00:12:31,000
It sort of looks for
user agent's strengths.

265
00:12:31,000 --> 00:12:32,170
We also have right limiting.

266
00:12:32,170 --> 00:12:34,520
And the right limiting I
have currently turned on.

267
00:12:34,520 --> 00:12:37,380
So I can show that to you quickly.

268
00:12:37,380 --> 00:12:42,380
If I'm going back to sending
these requests to port 843.

269
00:12:42,610 --> 00:12:46,320
And let me send them a little bit faster.

270
00:12:46,320 --> 00:12:49,600
And what you'll see here is eventually

271
00:12:49,600 --> 00:12:54,070
I'll get this error message
of 429, too many requests.

272
00:12:54,070 --> 00:12:57,780
And well API rate limit exceeded.

273
00:12:57,780 --> 00:12:59,910
And you see it didn't really take me much.

274
00:12:59,910 --> 00:13:04,560
I didn't really set up a
very large rate limit here.

275
00:13:04,560 --> 00:13:07,719
If I'm going back directly to the API

276
00:13:07,720 --> 00:13:09,930
then of course I've
consented these requests

277
00:13:09,930 --> 00:13:11,968
as far as I want them.

278
00:13:11,968 --> 00:13:14,939
I'm sending them here as fast
as I can with my keyboard.

279
00:13:14,940 --> 00:13:17,410
It may scroll a little
bit too fast for you

280
00:13:17,410 --> 00:13:18,870
as you're streaming this.

281
00:13:18,870 --> 00:13:23,460
But I never get any of
these rate limit messages.

282
00:13:23,460 --> 00:13:26,590
So this is one thing if
you're bypassing here

283
00:13:27,610 --> 00:13:30,500
by bypassing the API gateway

284
00:13:30,500 --> 00:13:33,580
we are bypassing any kind off filtering

285
00:13:33,580 --> 00:13:38,410
that may happen in the API gateway.

286
00:13:38,410 --> 00:13:41,650
And then in some cases we may
even have some altercation

287
00:13:41,650 --> 00:13:43,510
with the API gateway.

288
00:13:43,510 --> 00:13:44,896
Now, how do we defend against this?

289
00:13:44,897 --> 00:13:47,980
And I promise, I will tell
you how to defend against

290
00:13:47,980 --> 00:13:49,410
some of these issues.

291
00:13:49,410 --> 00:13:52,100
And of course, traditionally
in our good old

292
00:13:52,100 --> 00:13:53,240
on-premise world

293
00:13:53,240 --> 00:13:55,090
we would have had a network perimeter.

294
00:13:55,090 --> 00:13:59,350
And yes, you can set some
sort of IP based access rules

295
00:13:59,350 --> 00:14:00,790
in the cloud as well.

296
00:14:00,790 --> 00:14:02,709
But what if that service

297
00:14:02,710 --> 00:14:05,540
is what's implemented using Serverless?

298
00:14:05,540 --> 00:14:08,670
And then this may not
work that well anymore?

299
00:14:08,670 --> 00:14:12,010
Well, luckily the cloud
people have thought about this

300
00:14:12,010 --> 00:14:15,540
and they gave us a tool
to address this problem.

301
00:14:15,540 --> 00:14:19,310
And that is done via these policies

302
00:14:19,310 --> 00:14:23,079
that begin to find private
end point policies.

303
00:14:23,080 --> 00:14:24,640
So this is a private end point policy

304
00:14:24,640 --> 00:14:26,480
just a very quick sample

305
00:14:26,480 --> 00:14:28,900
to kind of show you
what they're all about.

306
00:14:28,900 --> 00:14:33,480
This one best restrict
access to an S3 bucket.

307
00:14:33,480 --> 00:14:36,420
And notice that, well here in this policy

308
00:14:36,420 --> 00:14:39,510
we don't have credentials,
you still need credentials

309
00:14:39,510 --> 00:14:43,180
in order to access this if
it's configured appropriately.

310
00:14:43,180 --> 00:14:45,959
But what it really is all about

311
00:14:45,960 --> 00:14:50,960
is this condition here and this
source Vpc in this example.

312
00:14:52,370 --> 00:14:55,900
The limit requests to originate here

313
00:14:55,900 --> 00:14:58,420
from a particular source Vpc

314
00:14:58,420 --> 00:15:01,750
that we identify in this policy.

315
00:15:01,750 --> 00:15:04,270
So that's really the trick here.

316
00:15:04,270 --> 00:15:05,990
They're not specifying the IP address,

317
00:15:05,990 --> 00:15:08,260
they are specifying the actual source.

318
00:15:08,260 --> 00:15:09,810
Which actually is better in some ways,

319
00:15:09,810 --> 00:15:11,949
because IP addresses change.

320
00:15:11,950 --> 00:15:15,080
So with this we really
sort of more identified,

321
00:15:15,080 --> 00:15:16,658
it's really more about identity

322
00:15:16,658 --> 00:15:18,800
of the source of the requests.

323
00:15:18,800 --> 00:15:22,170
It's not so much about a random IP address

324
00:15:22,170 --> 00:15:25,949
that we may not be able to
enforce to be consistent

325
00:15:25,950 --> 00:15:28,520
in our application.

326
00:15:28,520 --> 00:15:29,890
So this is one thing we can do.

327
00:15:29,890 --> 00:15:33,890
So we can block access,
direct access to the API.

328
00:15:33,890 --> 00:15:38,060
We can restrict access that
bypasses our API gateway

329
00:15:38,060 --> 00:15:40,930
and enforce that all requests originate

330
00:15:40,930 --> 00:15:43,040
from the API gateway.

331
00:15:43,040 --> 00:15:46,567
But earlier Jason pointed out this law.

332
00:15:46,567 --> 00:15:48,830
And that's really what the
altercation is all about

333
00:15:48,830 --> 00:15:50,240
this beer token.

334
00:15:50,240 --> 00:15:55,240
And as we are using in this
case, Jason web token, JWT.

335
00:15:56,020 --> 00:15:59,670
Who is better to tell you about
Jason web tokens than Jason.

336
00:15:59,670 --> 00:16:01,987
So Jason, tell me about
what they're all about

337
00:16:01,987 --> 00:16:04,300
and how you would attack them?

338
00:16:04,300 --> 00:16:06,170
- Thanks Johannes on that one.

339
00:16:06,170 --> 00:16:08,569
Love the Jason reference.

340
00:16:08,570 --> 00:16:11,101
Let Jason tell you how
to attack these things.

341
00:16:11,101 --> 00:16:11,934
Okay.

342
00:16:11,934 --> 00:16:14,290
So we're gonna quickly walk through

343
00:16:14,290 --> 00:16:16,050
what we're looking at first.

344
00:16:16,050 --> 00:16:19,420
Earlier that chunk of text
that we were looking at, right?

345
00:16:19,421 --> 00:16:23,630
That big token, it
actually means something.

346
00:16:23,630 --> 00:16:28,370
And if you throw it into certain
websites like this jwt.io

347
00:16:28,370 --> 00:16:31,520
it actually tells you
or decipher it for you

348
00:16:31,520 --> 00:16:34,610
so that you know what's contained inside.

349
00:16:34,610 --> 00:16:38,220
And later on we'll demo it
to you to see how that works.

350
00:16:38,220 --> 00:16:40,600
Basically, it means something

351
00:16:40,600 --> 00:16:43,540
that you and I can both
look at and open it up

352
00:16:43,540 --> 00:16:45,180
and understand what it means.

353
00:16:45,180 --> 00:16:46,540
So that's one thing.

354
00:16:46,540 --> 00:16:51,540
And then the JWT token, JOC token

355
00:16:52,180 --> 00:16:55,910
actually contains certain payroll right?

356
00:16:55,910 --> 00:16:57,199
As I said, it means something.

357
00:16:57,200 --> 00:16:58,730
So what does it actually contain?

358
00:16:58,730 --> 00:17:00,880
It actually contained
a claims for the user.

359
00:17:00,880 --> 00:17:04,181
So it basically identify who the user is,

360
00:17:04,181 --> 00:17:07,369
you know what the user can
do and such information.

361
00:17:07,369 --> 00:17:11,129
So it can be barely
sensitive as to the access

362
00:17:11,130 --> 00:17:13,993
that you're gonna be
granted to the application.

363
00:17:15,098 --> 00:17:20,098
And with that information,
let's look at our target state

364
00:17:20,143 --> 00:17:22,839
and our demo that are upcoming.

365
00:17:22,839 --> 00:17:25,879
So what we have here is
that, you know, again

366
00:17:25,880 --> 00:17:28,480
the same application of being attacked

367
00:17:28,480 --> 00:17:30,750
but this one is a little
bit different, right?

368
00:17:30,750 --> 00:17:35,750
We're not just bypassing,
just like what we did before.

369
00:17:36,420 --> 00:17:41,290
But let's see what web application
can expose for you to do

370
00:17:41,290 --> 00:17:44,379
versus what you can actually do.

371
00:17:44,380 --> 00:17:46,420
Because usually when
you go and take a look

372
00:17:46,420 --> 00:17:48,941
at the developer tools and so on.

373
00:17:48,941 --> 00:17:51,040
You can see that the web application

374
00:17:51,040 --> 00:17:53,389
does give a certain functions and so on.

375
00:17:53,390 --> 00:17:54,880
But you may or may not know,

376
00:17:54,880 --> 00:17:57,090
okay so what else can we access?

377
00:17:57,090 --> 00:18:00,000
So in this example, we'll show you that

378
00:18:00,000 --> 00:18:01,940
if you're not configuring things right

379
00:18:01,940 --> 00:18:06,490
how do you actually extend
beyond normally what you can use

380
00:18:06,490 --> 00:18:08,150
towards the application, right.

381
00:18:08,150 --> 00:18:13,130
Like you can stretch your
credential to do extra things.

382
00:18:13,130 --> 00:18:16,973
And with that let's pivot
over to the demo mode.

383
00:18:19,450 --> 00:18:20,283
Okay.

384
00:18:20,283 --> 00:18:21,639
So earlier remember

385
00:18:21,640 --> 00:18:24,180
that I was talking about the application,

386
00:18:24,180 --> 00:18:26,060
which we're showing here.

387
00:18:26,060 --> 00:18:31,060
We have capture the curl
command, the token and so on.

388
00:18:31,700 --> 00:18:32,660
Okay.

389
00:18:32,660 --> 00:18:37,270
So that's what we're gonna
start off with, right.

390
00:18:37,270 --> 00:18:39,360
First of all, let's clear up the screen.

391
00:18:39,360 --> 00:18:43,000
Let's show that one more time

392
00:18:43,000 --> 00:18:46,893
that the back end is actually working.

393
00:18:47,941 --> 00:18:48,993
See that one time.

394
00:18:51,920 --> 00:18:53,310
Okay.

395
00:18:53,310 --> 00:18:57,610
So it seems that this is working.

396
00:18:57,610 --> 00:18:58,443
Okay.

397
00:19:04,260 --> 00:19:07,760
What we want to do is capturing that token

398
00:19:07,760 --> 00:19:10,150
and then throw it into the website

399
00:19:10,150 --> 00:19:12,103
that I was talking about jwt.io.

400
00:19:13,050 --> 00:19:17,570
And we're gonna paste
that into this website.

401
00:19:17,570 --> 00:19:20,280
Go and try this website out,
it's pretty cool, right?

402
00:19:20,280 --> 00:19:23,220
So this website allows
you to decode that token

403
00:19:23,220 --> 00:19:25,770
and you can read what's inside the token.

404
00:19:25,770 --> 00:19:29,129
So the first part of it talks
about the hashing algorithm.

405
00:19:29,130 --> 00:19:31,050
What is a hashing full?

406
00:19:31,050 --> 00:19:34,860
The hashing is really to
protect this entire token.

407
00:19:34,860 --> 00:19:38,560
Because again, this token
remember the attacker, me

408
00:19:38,560 --> 00:19:39,850
get access to it.

409
00:19:39,850 --> 00:19:42,709
So I can potentially just fuss around

410
00:19:42,710 --> 00:19:44,360
with the content of it

411
00:19:44,360 --> 00:19:47,458
at additional scope that may not be there

412
00:19:47,459 --> 00:19:49,549
can grind, myself extra access.

413
00:19:49,549 --> 00:19:52,510
How do they defender protect it?

414
00:19:52,510 --> 00:19:54,410
They put a hash on it to guarantee

415
00:19:54,410 --> 00:19:56,270
that it has not been altered.

416
00:19:56,270 --> 00:19:58,920
So that's the algorithm that
we're talking about there.

417
00:19:58,920 --> 00:20:01,540
And with being the paint low portion,

418
00:20:01,540 --> 00:20:03,320
you can see if we scroll down,

419
00:20:03,320 --> 00:20:05,040
you can see information such as

420
00:20:05,040 --> 00:20:07,980
when was this token generated?

421
00:20:07,980 --> 00:20:09,730
When does it expire?

422
00:20:09,730 --> 00:20:12,170
What URL generated it?

423
00:20:12,170 --> 00:20:14,600
And more importantly, right

424
00:20:14,600 --> 00:20:18,580
if we just look further
down you see the ROM access,

425
00:20:18,580 --> 00:20:23,580
the rows, and also further
down you've got roles as well.

426
00:20:27,000 --> 00:20:29,650
So those two things basically talk about

427
00:20:29,650 --> 00:20:32,773
what access you have and
what function you have,

428
00:20:32,773 --> 00:20:36,939
who can access and what roles
your user identity can do

429
00:20:36,940 --> 00:20:37,980
and so on.

430
00:20:37,980 --> 00:20:40,550
So these are very, very
sensitive information.

431
00:20:40,550 --> 00:20:43,190
And look at the main of
those rows that you have

432
00:20:43,190 --> 00:20:47,390
COVID vaccine formula, offline
excess, UMA authorization,

433
00:20:47,390 --> 00:20:48,700
take over the world.

434
00:20:48,700 --> 00:20:50,540
Wow that's amazing.

435
00:20:50,540 --> 00:20:54,808
So these are the access that are granted.

436
00:20:54,808 --> 00:20:58,860
Those functions may or may
not be accessible normally

437
00:20:58,860 --> 00:21:02,310
with the web application interface.

438
00:21:02,310 --> 00:21:04,393
Now with that.

439
00:21:06,060 --> 00:21:08,970
So we can go back to
our demo there, right?

440
00:21:08,970 --> 00:21:11,840
Armed with that information,
knowing the token,

441
00:21:11,840 --> 00:21:13,899
knowing the content of the token.

442
00:21:13,900 --> 00:21:16,990
That helps us a lot
with the attack, right?

443
00:21:16,990 --> 00:21:20,380
So I propose that we do one thing, right.

444
00:21:20,380 --> 00:21:25,380
Instead of calling the
API ticket and so on

445
00:21:25,510 --> 00:21:28,000
let's just shake hands with the API.

446
00:21:28,000 --> 00:21:29,600
Let's call the API directly.

447
00:21:29,600 --> 00:21:30,570
Okay.

448
00:21:30,570 --> 00:21:35,570
We're gonna call it directly
and yep let's hit enter there.

449
00:21:35,590 --> 00:21:39,449
Now we're not calling a
specific operation function

450
00:21:39,450 --> 00:21:41,053
but we're handshaking with the API

451
00:21:41,053 --> 00:21:43,920
and say hey API, how are you doing?

452
00:21:43,920 --> 00:21:45,880
And API, tell us immediately that,

453
00:21:45,880 --> 00:21:48,760
hey you can hit me this way.

454
00:21:48,760 --> 00:21:51,770
Meaning you can call
this particular operation

455
00:21:51,770 --> 00:21:55,760
called COVID formula, take over the world.

456
00:21:55,760 --> 00:21:56,870
Wow.

457
00:21:56,870 --> 00:22:01,790
Remember that it correspond to
the row that we have earlier.

458
00:22:01,790 --> 00:22:03,350
So it looks like this is something

459
00:22:03,350 --> 00:22:06,560
that we can definitely call
and invoke the service.

460
00:22:06,560 --> 00:22:10,700
Now let's go and try this
take over the world thing.

461
00:22:10,700 --> 00:22:13,920
Right cause hey I would
love to take over the world,

462
00:22:13,920 --> 00:22:15,460
don't you, right?

463
00:22:15,460 --> 00:22:16,330
Let's try that.

464
00:22:16,330 --> 00:22:20,060
Let's call that and see
if we have the permission

465
00:22:20,060 --> 00:22:21,864
to actually invoke that service.

466
00:22:21,864 --> 00:22:25,210
Again from the front end
of the web application

467
00:22:25,210 --> 00:22:27,830
there may not be a call directly to it.

468
00:22:27,830 --> 00:22:30,120
But if we call it this way directly

469
00:22:30,120 --> 00:22:32,979
you know, we're hinted by the token.

470
00:22:32,980 --> 00:22:36,060
It does give us some data, right.

471
00:22:36,060 --> 00:22:39,190
So it indicate that, you
know the response here

472
00:22:39,190 --> 00:22:41,190
it does indicate that yep.

473
00:22:41,190 --> 00:22:42,915
The cat's planned to take over the world.

474
00:22:42,915 --> 00:22:43,748
And so on.

475
00:22:43,748 --> 00:22:46,400
Yes, there is successfully got invoked.

476
00:22:46,400 --> 00:22:49,440
And basically what it
means is that normally

477
00:22:49,440 --> 00:22:51,020
in the web user interface,

478
00:22:51,020 --> 00:22:53,720
you may not be able to get
to this particular function.

479
00:22:53,720 --> 00:22:58,110
But now gathering all the
data and finding by the token,

480
00:22:58,110 --> 00:23:00,312
acquiring by the AP,
calling the API directly,

481
00:23:00,313 --> 00:23:02,620
we're able to gather the information

482
00:23:02,620 --> 00:23:05,139
on how to directly access
some of these functions

483
00:23:05,140 --> 00:23:06,863
that may not be apparent.

484
00:23:07,750 --> 00:23:10,140
And with that, hey, you know Johannes

485
00:23:10,140 --> 00:23:12,170
I think I just hit some of the functions

486
00:23:12,170 --> 00:23:15,340
that you did not mean
to be exposed publicly.

487
00:23:15,340 --> 00:23:18,040
- Yes so let's talk about
how to defend against this.

488
00:23:18,040 --> 00:23:20,180
This vulnerability reminds me a little bit

489
00:23:20,180 --> 00:23:22,213
of a traditional web application

490
00:23:22,213 --> 00:23:24,930
that you do have an administrative feature

491
00:23:24,930 --> 00:23:27,050
that doesn't do proper access control,

492
00:23:27,050 --> 00:23:30,510
kind of these direct URL vulnerabilities

493
00:23:30,510 --> 00:23:32,504
they're sometimes called.

494
00:23:32,504 --> 00:23:36,290
And an attacker well,
usually doesn't see it

495
00:23:36,290 --> 00:23:38,310
because they don't have the right button

496
00:23:38,310 --> 00:23:41,590
in their user interface if
they log in as a normal user.

497
00:23:41,590 --> 00:23:43,149
But there's something else

498
00:23:43,150 --> 00:23:44,170
that is sort of the different

499
00:23:44,170 --> 00:23:45,910
in traditional web applications.

500
00:23:45,910 --> 00:23:48,660
In traditional web applications
you have a session token.

501
00:23:48,660 --> 00:23:52,830
And the session itself didn't
really have any value per se.

502
00:23:52,830 --> 00:23:54,750
It was a random string.

503
00:23:54,750 --> 00:23:57,070
And then it was presented
to the application.

504
00:23:57,070 --> 00:23:59,730
The application had some
kind of back end storage

505
00:23:59,730 --> 00:24:04,430
that then told us what this
session was allowed to do.

506
00:24:04,430 --> 00:24:07,090
What's different here
with the Jason web tokens

507
00:24:07,090 --> 00:24:11,199
is that this information
runs site's on the user.

508
00:24:11,200 --> 00:24:13,640
And while it's properly digitally signed,

509
00:24:13,640 --> 00:24:14,650
and cannot be altered.

510
00:24:14,650 --> 00:24:18,670
So it's not one of these
admin equals yes cookies.

511
00:24:18,670 --> 00:24:22,720
The attacker has more
insight into the application.

512
00:24:22,720 --> 00:24:24,360
And there are two ways how we can

513
00:24:24,360 --> 00:24:26,709
sort of protect ourselves here.

514
00:24:26,710 --> 00:24:29,000
One is sometimes referred
as a fandom token.

515
00:24:29,000 --> 00:24:31,080
So in this case, we sort of move back

516
00:24:31,080 --> 00:24:35,129
to adapt more traditional
web application stance.

517
00:24:35,130 --> 00:24:40,130
What we do here is the user is
logging into our IAM service.

518
00:24:41,590 --> 00:24:46,590
And then the IAM service
is returning a ticket.

519
00:24:46,740 --> 00:24:50,500
This ticket is only used a
percent to the API gateway.

520
00:24:50,500 --> 00:24:52,857
The API gateway will
then exchange the ticket

521
00:24:52,857 --> 00:24:56,190
for the actual token that we had before.

522
00:24:56,190 --> 00:24:58,380
And use that to gain access.

523
00:24:58,380 --> 00:25:03,380
So this isolates the user
from that back end ticket.

524
00:25:03,680 --> 00:25:07,770
Problem here is, well you have
additional HTTP round trips

525
00:25:07,770 --> 00:25:09,550
between the gateway and the service

526
00:25:09,550 --> 00:25:12,330
than ever you're hitting the gateway.

527
00:25:12,330 --> 00:25:13,330
Solution?

528
00:25:13,330 --> 00:25:17,710
Well, let's cash the
information at the gateway.

529
00:25:17,710 --> 00:25:20,460
But you're playing a
little bit of a trick here.

530
00:25:20,460 --> 00:25:24,190
So what do we use to actually
index, look up that cash

531
00:25:24,190 --> 00:25:27,410
and what we're using as an
index, kind of to search it.

532
00:25:27,410 --> 00:25:31,090
When I am now logging in to the service.

533
00:25:31,090 --> 00:25:33,540
Instead of returning that token to me

534
00:25:33,540 --> 00:25:35,610
it just returns the signature.

535
00:25:35,610 --> 00:25:39,010
And the signature well is
as unique as the token.

536
00:25:39,010 --> 00:25:42,800
So at the same time the
service is also storing

537
00:25:42,800 --> 00:25:45,480
the ticket with the gateway.

538
00:25:45,480 --> 00:25:48,620
And the client is not
presenting that signature.

539
00:25:48,620 --> 00:25:51,639
The signature is used to
look up the right ticket

540
00:25:51,640 --> 00:25:54,860
and it's being used to
authenticate the operation

541
00:25:54,860 --> 00:25:56,810
back to our API.

542
00:25:56,810 --> 00:25:58,720
So this is a bit more efficient.

543
00:25:58,720 --> 00:26:03,720
It saves us that around trip
to the IAM service here.

544
00:26:04,450 --> 00:26:05,563
But well--

545
00:26:06,460 --> 00:26:10,804
So Jason, I got the altercation
under control it looks like

546
00:26:10,804 --> 00:26:15,275
We foiled the cat's secret
plan to take over the world.

547
00:26:15,275 --> 00:26:18,590
What else could happen
with cloud components?

548
00:26:18,590 --> 00:26:20,659
And I think they're going to
talk a little bit now about

549
00:26:20,660 --> 00:26:24,230
that static part we
sort of ignored so far.

550
00:26:24,230 --> 00:26:26,690
So Jason up to you.

551
00:26:26,690 --> 00:26:28,420
- Yep thanks Johannes.

552
00:26:28,420 --> 00:26:31,000
That was good that you could
defend that application

553
00:26:31,000 --> 00:26:33,530
but I've got one more
trick under my sleeve.

554
00:26:33,530 --> 00:26:35,320
Let's try that right.

555
00:26:35,320 --> 00:26:38,080
This one, I call remote bouncer.

556
00:26:38,080 --> 00:26:41,340
Let's look at this request.

557
00:26:41,340 --> 00:26:42,743
What is in this request?

558
00:26:43,820 --> 00:26:47,040
So, you know architecture here.

559
00:26:47,040 --> 00:26:50,030
You can see that in this architecture,

560
00:26:50,030 --> 00:26:51,760
we have the static file portion

561
00:26:51,760 --> 00:26:55,370
which actually links
to some HTML and so on.

562
00:26:55,370 --> 00:26:58,766
That HTML nowadays with
modern day application

563
00:26:58,767 --> 00:27:02,050
you don't just have HTML,
who does that right?

564
00:27:02,050 --> 00:27:04,340
Nowadays you gotta have some JavaScript

565
00:27:04,340 --> 00:27:07,040
that links to something useful, right?

566
00:27:07,040 --> 00:27:12,040
Where do we run React,
Angular, any of the, you know

567
00:27:12,380 --> 00:27:14,270
slightly older things that are more common

568
00:27:14,270 --> 00:27:17,160
like J-Curry libraries and so on.

569
00:27:17,160 --> 00:27:19,600
Modern-day applications generally load

570
00:27:19,600 --> 00:27:23,090
like 15 to 20 different
JavaScripts very easily.

571
00:27:23,090 --> 00:27:26,110
And most of them often from
different sources as well.

572
00:27:26,110 --> 00:27:26,943
Right?

573
00:27:26,943 --> 00:27:29,340
For example, if you load
Angular you're likely gonna use

574
00:27:29,340 --> 00:27:30,540
the Google's copy.

575
00:27:30,540 --> 00:27:32,120
You're gonna link it with Google

576
00:27:32,120 --> 00:27:33,989
and Google is hosting it for you.

577
00:27:33,990 --> 00:27:36,192
That's generally how it goes.

578
00:27:36,192 --> 00:27:40,780
With this, this is what
it is showing here, right?

579
00:27:40,780 --> 00:27:43,320
The HTML has a script reference.

580
00:27:43,320 --> 00:27:45,629
This one is to payment.com.

581
00:27:45,630 --> 00:27:49,680
And essentially when the
users come and know your HTML

582
00:27:49,680 --> 00:27:52,780
it knows the browser
goes over the payment.com

583
00:27:52,780 --> 00:27:56,470
to load that JavaScript
and run that JavaScript.

584
00:27:56,470 --> 00:27:59,570
So if the JavaScript,
anytime you run something

585
00:27:59,570 --> 00:28:01,770
that can be a little scary right?

586
00:28:01,770 --> 00:28:04,180
So that's really the background there.

587
00:28:04,180 --> 00:28:08,090
And then a little more
about the scripting itself

588
00:28:08,090 --> 00:28:09,889
in the next slide.

589
00:28:09,890 --> 00:28:12,640
So on the scripting itself.

590
00:28:12,640 --> 00:28:13,473
Okay.

591
00:28:13,473 --> 00:28:16,220
And on the right hand
side, you can see right?

592
00:28:16,220 --> 00:28:17,520
You know, some of you may tell me,

593
00:28:17,520 --> 00:28:21,220
hey this JavaScript is a
script, we can recognize it.

594
00:28:21,220 --> 00:28:22,220
Look at it, right.

595
00:28:22,220 --> 00:28:26,130
Modern-day JavaScript,
either minified or compressed

596
00:28:26,130 --> 00:28:26,963
and so on.

597
00:28:26,963 --> 00:28:28,139
It's very difficult to read.

598
00:28:28,140 --> 00:28:29,470
Like, even if I give it to you

599
00:28:29,470 --> 00:28:32,000
you wouldn't make too
much sense of it, right.

600
00:28:32,000 --> 00:28:34,450
So how do we protect these resources

601
00:28:34,450 --> 00:28:36,760
and how do we attack these resources

602
00:28:36,760 --> 00:28:38,970
is really the question
here in this scenario.

603
00:28:38,970 --> 00:28:43,870
Now let's look at the next scenarios

604
00:28:43,870 --> 00:28:48,662
so that we can talk about how
we're gonna attack this slide.

605
00:28:53,270 --> 00:28:54,353
So, okay.

606
00:28:56,899 --> 00:29:00,739
In this one, we're showing
you the developer tools

607
00:29:00,740 --> 00:29:03,980
and showing you that J-Curry
has been loaded, right?

608
00:29:03,980 --> 00:29:06,820
Like under the cursor right
now we're loading J-Curry

609
00:29:06,820 --> 00:29:10,050
from this generic cdn.com, okay.

610
00:29:10,050 --> 00:29:12,673
And what it is here is that, you know

611
00:29:12,673 --> 00:29:17,673
this HTML page is loading a
script from a foreign location.

612
00:29:18,340 --> 00:29:22,179
Location that is not part
of this sec.522.com website.

613
00:29:22,180 --> 00:29:23,200
Okay.

614
00:29:23,200 --> 00:29:26,720
So what we can do is you can assume

615
00:29:26,720 --> 00:29:29,670
that I somehow is able to
attack this particular cdn

616
00:29:29,670 --> 00:29:32,840
and compromises it and
control everything over there.

617
00:29:32,840 --> 00:29:35,820
All the content over
there is under my control.

618
00:29:35,820 --> 00:29:38,439
I'm gonna replace that J-Curry script

619
00:29:38,440 --> 00:29:41,040
with a EvoScript that I own okay.

620
00:29:41,040 --> 00:29:42,460
That I just wrote.

621
00:29:42,460 --> 00:29:45,490
And let's replace it please.

622
00:29:45,490 --> 00:29:49,451
And we will also show you the, sorry.

623
00:29:49,451 --> 00:29:54,451
We will also show you the
page that loaded as well.

624
00:29:56,910 --> 00:29:57,743
Okay.

625
00:29:58,590 --> 00:30:00,840
And by the way, that script that I loaded

626
00:30:00,840 --> 00:30:03,199
that EvoScript that is there

627
00:30:03,200 --> 00:30:08,200
is really meant to
capture key stroke okay.

628
00:30:08,350 --> 00:30:11,169
And that's what we're trying to do there.

629
00:30:11,170 --> 00:30:12,830
Okay.

630
00:30:12,830 --> 00:30:15,460
So let me flip it back
to the original format

631
00:30:15,460 --> 00:30:17,420
of what we need to show you here.

632
00:30:17,420 --> 00:30:20,220
That's the script that
we're including here.

633
00:30:20,220 --> 00:30:21,370
Good.

634
00:30:21,370 --> 00:30:22,203
Okay.

635
00:30:23,200 --> 00:30:27,590
And let's check this out.

636
00:30:27,590 --> 00:30:29,600
So we're gonna reload it multiple times.

637
00:30:29,600 --> 00:30:32,080
Okay so we change a script.

638
00:30:32,080 --> 00:30:34,419
The prompts are normally
catches those scripts.

639
00:30:34,420 --> 00:30:37,040
So we've got to reload it, hot reload it

640
00:30:37,040 --> 00:30:42,040
and make sure that the browser
is picking up the new script.

641
00:30:43,110 --> 00:30:46,080
And with this new script, I
think we just loaded it here

642
00:30:47,300 --> 00:30:52,300
With the new EvoScript
that I loaded, okay.

643
00:30:52,410 --> 00:30:55,973
So it's still loading
that script and so on.

644
00:30:56,860 --> 00:30:58,290
That's good.

645
00:30:58,290 --> 00:31:00,690
Now you can see that there, right?

646
00:31:00,690 --> 00:31:03,840
Hint, hint on the screen earlier,

647
00:31:03,840 --> 00:31:05,199
what we have in the script is that

648
00:31:05,200 --> 00:31:06,990
there was a key locker component.

649
00:31:06,990 --> 00:31:09,700
And Johannes already
typed in that, you know

650
00:31:09,700 --> 00:31:11,240
some key stroke over there.

651
00:31:11,240 --> 00:31:14,250
Look here, the key stroke is captured.

652
00:31:14,250 --> 00:31:17,540
And if you roam over
the mouse cursor on that

653
00:31:17,540 --> 00:31:19,409
the key strokes actually go to a domain

654
00:31:19,410 --> 00:31:22,740
called evilexample.com as well.

655
00:31:22,740 --> 00:31:25,060
So is not going back to the same website.

656
00:31:25,060 --> 00:31:28,929
It goes to a website that
I, the attacker, own.

657
00:31:28,930 --> 00:31:29,830
That's my website.

658
00:31:29,830 --> 00:31:32,320
Okay so I'm capturing all of Johannes'

659
00:31:32,320 --> 00:31:34,490
and his user's key stroke.

660
00:31:34,490 --> 00:31:36,570
Because whenever the user go to that page,

661
00:31:36,570 --> 00:31:39,210
then their key strokes are captured by me.

662
00:31:39,210 --> 00:31:40,043
Okay.

663
00:31:40,043 --> 00:31:44,969
So that is something that
I can do to your website.

664
00:31:44,970 --> 00:31:46,050
Johannes, what are you gonna do?

665
00:31:46,050 --> 00:31:47,890
- [Johannes] So let's defend against this.

666
00:31:47,891 --> 00:31:52,891
Now, what we need to do is
we need to tell the browser

667
00:31:52,980 --> 00:31:55,740
what JavaScript is
legitimate for our site.

668
00:31:55,740 --> 00:31:58,360
And there's a neat feature that we can use

669
00:31:58,360 --> 00:32:03,179
called subresource
integrity or an SRI hash.

670
00:32:03,180 --> 00:32:07,650
So if I'm going here
to the original jquery.

671
00:32:07,650 --> 00:32:12,650
And I'm just copying that
and I am pasting this

672
00:32:12,960 --> 00:32:15,240
in the site here.

673
00:32:15,240 --> 00:32:18,400
It will now create a script pack for us

674
00:32:18,400 --> 00:32:22,600
that does include this integrity hash.

675
00:32:22,600 --> 00:32:23,709
So let me copy this.

676
00:32:23,710 --> 00:32:24,940
And if you paid attention

677
00:32:24,940 --> 00:32:27,520
I actually have to fix
this earlier quickly

678
00:32:27,520 --> 00:32:32,520
because we already had this
from prior testing in that page.

679
00:32:32,560 --> 00:32:37,533
But I'm opening my page here.

680
00:32:41,110 --> 00:32:46,110
And I'm now inserting this new
version with integrity hash

681
00:32:49,040 --> 00:32:52,110
Let me remove the dot original part.

682
00:32:52,110 --> 00:32:56,590
So we actually load the evil
JavaScript that's still there.

683
00:32:56,590 --> 00:32:58,240
So you kind of see how this

684
00:32:58,240 --> 00:33:02,663
prevents us loading the evil JavaScript.

685
00:33:09,780 --> 00:33:11,740
Okay, let me go back here.

686
00:33:11,740 --> 00:33:16,740
And you already see, actually,
as I flipped over here

687
00:33:19,640 --> 00:33:21,090
it tried to reload it

688
00:33:21,090 --> 00:33:24,350
and it now gives me the
error that it failed,

689
00:33:24,350 --> 00:33:29,350
because well it wasn't
able a to verify that hash.

690
00:33:30,010 --> 00:33:32,660
Also my JavaScript of course
got broken on the page

691
00:33:32,660 --> 00:33:33,650
as it should,

692
00:33:33,650 --> 00:33:37,200
because well we can no longer load jquery.

693
00:33:37,200 --> 00:33:40,680
So only after I am
actually now switching back

694
00:33:40,680 --> 00:33:44,523
to the original jquery.

695
00:33:57,417 --> 00:33:58,669
Only after I do this.

696
00:33:58,670 --> 00:34:01,760
And if I now reload again,
now everything is good.

697
00:34:01,760 --> 00:34:06,067
And my application should work again.

698
00:34:06,067 --> 00:34:07,820
Oh.

699
00:34:07,820 --> 00:34:09,090
We'll have it not quite right here.

700
00:34:09,090 --> 00:34:13,290
I probably forgot the
right to reload again

701
00:34:13,290 --> 00:34:16,520
but now the JavaScript is loaded again

702
00:34:16,520 --> 00:34:18,280
and everything is good.

703
00:34:18,280 --> 00:34:21,730
But with this subresource integrity hash,

704
00:34:21,730 --> 00:34:25,377
we are actually able to tell the browser

705
00:34:25,377 --> 00:34:30,350
that this particular
JavaScript got changed.

706
00:34:30,350 --> 00:34:33,000
And that's really sort of
what this is all about.

707
00:34:33,000 --> 00:34:37,639
So we are validating
these remote resources

708
00:34:37,639 --> 00:34:39,699
using the hash.

709
00:34:39,699 --> 00:34:42,739
And with that, an attacker
Matchcar for example,

710
00:34:42,739 --> 00:34:45,389
they made a lot of money
what this type of attack

711
00:34:45,389 --> 00:34:48,730
is no longer able to just swap out

712
00:34:48,730 --> 00:34:53,730
some remote resources that we
don't really have any control.

713
00:34:54,409 --> 00:34:57,220
So Jason, you just want
to wrap it up here?

714
00:34:57,220 --> 00:35:01,029
- Sure thing Johannes, that
was good defense on your part.

715
00:35:01,030 --> 00:35:03,100
Now that you locked down the hash for us,

716
00:35:03,100 --> 00:35:04,750
I don't know what to do.

717
00:35:04,750 --> 00:35:07,530
So that basically is
all my tricks for today.

718
00:35:07,530 --> 00:35:10,591
And well, the lessons learned here,

719
00:35:10,591 --> 00:35:12,390
particular for this presentation

720
00:35:12,390 --> 00:35:13,640
and hopefully you enjoyed it

721
00:35:13,640 --> 00:35:15,950
is that, you know, there
are a few learnings,

722
00:35:15,950 --> 00:35:17,551
key learning objective here.

723
00:35:17,551 --> 00:35:18,990
First thing I would recommend

724
00:35:18,990 --> 00:35:22,839
that people review your modern
day application architecture.

725
00:35:22,840 --> 00:35:25,610
There are a lot of really good libraries,

726
00:35:25,610 --> 00:35:27,280
really good framework out there

727
00:35:27,280 --> 00:35:29,970
that you could create
your applications with.

728
00:35:29,970 --> 00:35:33,352
However, there's still a
lot of pitfalls and so on

729
00:35:33,353 --> 00:35:34,860
that you can fall into.

730
00:35:34,860 --> 00:35:37,620
So review it, make sure you understand

731
00:35:37,620 --> 00:35:40,040
the configuration of your components.

732
00:35:40,040 --> 00:35:42,520
As Johannes pointed out earlier right?

733
00:35:42,520 --> 00:35:44,200
Some of the cloud component

734
00:35:44,200 --> 00:35:47,020
it may not have all
the configuration right

735
00:35:47,020 --> 00:35:50,280
to say, okay this is the
origin of the location.

736
00:35:50,280 --> 00:35:53,860
Only if data comes from
that then is mine, right?

737
00:35:53,860 --> 00:35:55,220
So you would want to review that.

738
00:35:55,220 --> 00:35:58,609
And also understand the credential flow.

739
00:35:58,610 --> 00:36:02,630
Those particular token,
the beer token and so on.

740
00:36:02,630 --> 00:36:04,409
It means something right.

741
00:36:04,409 --> 00:36:08,440
And you would want to be very
careful by how you handle it,

742
00:36:08,440 --> 00:36:11,870
where it goes and what
are included extra details

743
00:36:11,870 --> 00:36:13,270
that you don't need.

744
00:36:13,270 --> 00:36:15,009
And those are some of the key things

745
00:36:15,010 --> 00:36:17,640
that you would want to
look at very quickly.

746
00:36:17,640 --> 00:36:20,600
Now, in the longer term,
we recommend people

747
00:36:20,600 --> 00:36:23,670
to reveal the credential
handling guidelines

748
00:36:23,670 --> 00:36:25,300
with the development teams,

749
00:36:25,300 --> 00:36:27,540
so that they're not inventing the wheel

750
00:36:27,540 --> 00:36:30,890
or reinventing the wheel at
every single application.

751
00:36:30,890 --> 00:36:33,210
Make it consistent, make it secure

752
00:36:33,210 --> 00:36:34,800
and that would take some time to develop.

753
00:36:34,800 --> 00:36:37,630
But once you develop it then
you can reuse that pattern

754
00:36:37,630 --> 00:36:39,210
on an ongoing basis.

755
00:36:39,210 --> 00:36:43,010
And this will be a trick to
survive, you know the journey

756
00:36:43,010 --> 00:36:44,990
in a battle with the microservices,

757
00:36:44,990 --> 00:36:47,729
API based web applications.

758
00:36:47,730 --> 00:36:49,880
So hopefully you enjoyed
this presentation.

759
00:36:49,880 --> 00:36:52,393
Thank you very much for attending this.

760
00:36:54,292 --> 00:36:56,009
- I look forward to your questions.

761
00:36:56,010 --> 00:36:58,670
So please let us know if
you have any questions

762
00:36:58,670 --> 00:37:03,103
and thanks for watching this presentation.

