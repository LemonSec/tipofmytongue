1
00:00:03,570 --> 00:00:05,199
- Welcome everybody.

2
00:00:05,200 --> 00:00:09,469
My name is Rod Soto and I work at Splunk

3
00:00:09,470 --> 00:00:12,600
as a principal security research engineer.

4
00:00:12,600 --> 00:00:15,469
I've been at Splunk for now two years.

5
00:00:15,470 --> 00:00:19,460
Previously I worked for Lexic technologies

6
00:00:19,460 --> 00:00:21,350
and Akamai technologies.

7
00:00:21,350 --> 00:00:25,183
And I am here today with Jose Hernandez.

8
00:00:28,352 --> 00:00:30,680
- I'm also a fellow Splunker,

9
00:00:30,680 --> 00:00:33,693
currently a manager to
our research team here.

10
00:00:35,350 --> 00:00:37,520
Our goal is to basically build detections

11
00:00:37,520 --> 00:00:40,153
not only for our customers,
for the community as well.

12
00:00:41,350 --> 00:00:42,660
I've been an old colleague of Rod

13
00:00:42,660 --> 00:00:44,642
we've worked together Akamai,

14
00:00:46,251 --> 00:00:47,918
Prolexic which is now Akamai.

15
00:00:47,918 --> 00:00:51,910
And I also helped co-found
a company called Zenedge

16
00:00:51,910 --> 00:00:53,250
which is now Oracle's web application

17
00:00:53,250 --> 00:00:55,293
firewall and DDoS mitigation services.

18
00:00:56,300 --> 00:00:57,940
- So thank you, Jose.

19
00:00:57,940 --> 00:01:02,030
We're here today to talk to
you about a serious issue

20
00:01:02,030 --> 00:01:05,107
that we've been tracking
and researching about,

21
00:01:05,107 --> 00:01:10,107
and that is the leakage of
secrets onto public repositories.

22
00:01:12,640 --> 00:01:16,300
And we're gonna explain
how a simple leakage

23
00:01:16,300 --> 00:01:21,300
of a, for example, secret
key can lead to compromise.

24
00:01:22,300 --> 00:01:26,600
We also have a bit of
data for you at the end.

25
00:01:26,600 --> 00:01:28,649
We're gonna show you a demo of it too.

26
00:01:28,650 --> 00:01:33,220
And we are gonna show you how important is

27
00:01:33,220 --> 00:01:37,039
to keep track of your secrets.

28
00:01:37,040 --> 00:01:40,170
And since we're talking about secrets,

29
00:01:40,170 --> 00:01:43,151
before we delve into
what those secrets are,

30
00:01:43,151 --> 00:01:48,151
we had to talked about where
those secrets are involved,

31
00:01:48,210 --> 00:01:53,210
and how they are used or pass through,

32
00:01:54,450 --> 00:01:57,540
many to call it in a certain way,

33
00:01:57,540 --> 00:02:00,980
operations within enterprises.

34
00:02:00,980 --> 00:02:03,170
So when we talked about that,

35
00:02:03,170 --> 00:02:04,767
there are two things that
we have to talk about.

36
00:02:04,767 --> 00:02:09,767
One of them is Devops,
and one of them is ITOPS.

37
00:02:10,520 --> 00:02:12,870
These two things or two philosophies.

38
00:02:12,870 --> 00:02:16,682
One of them is focused
on software development.

39
00:02:16,682 --> 00:02:21,072
And the other one is focused on deploying,

40
00:02:21,073 --> 00:02:26,023
management and monitoring
of infrastructure,

41
00:02:27,140 --> 00:02:29,839
information technology operations.

42
00:02:29,840 --> 00:02:33,190
So what happens here is basically

43
00:02:33,190 --> 00:02:36,240
we have a number of processes.

44
00:02:36,240 --> 00:02:39,560
So for example, as you're
looking in this slide,

45
00:02:39,560 --> 00:02:43,780
you can take a look at the DevOps process.

46
00:02:43,780 --> 00:02:45,803
This is what is called two chains.

47
00:02:45,803 --> 00:02:49,620
So the two chains are
basically conceptual phases

48
00:02:49,620 --> 00:02:52,650
that you go through
when you are publishing,

49
00:02:52,650 --> 00:02:55,830
developing creative planning software.

50
00:02:55,830 --> 00:02:58,630
So you can see it's a continuous process,

51
00:02:58,630 --> 00:03:03,440
in this continuous process
you had a very large number

52
00:03:03,440 --> 00:03:05,500
of technologies that are involved,

53
00:03:05,500 --> 00:03:06,910
as you can see in the slide,

54
00:03:06,910 --> 00:03:09,070
there's all kinds of
technologies involved.

55
00:03:09,070 --> 00:03:11,337
But the important thing about it is that

56
00:03:11,337 --> 00:03:13,829
for these technologies
to talk to each other

57
00:03:15,550 --> 00:03:20,550
and to keep some sort
of a level of security,

58
00:03:20,607 --> 00:03:22,610
not only at the local level,

59
00:03:22,610 --> 00:03:26,898
but when the software
is basically published,

60
00:03:26,898 --> 00:03:31,320
which is usually done
at the cloud platforms.

61
00:03:31,320 --> 00:03:35,269
One of the main mechanisms to do this

62
00:03:35,270 --> 00:03:37,970
is the use of secrets.

63
00:03:37,970 --> 00:03:41,578
Secrets, we're gonna
be delving in a minute,

64
00:03:41,578 --> 00:03:43,202
what secrets we're talking about,

65
00:03:43,202 --> 00:03:45,877
but as you can see in this slides,

66
00:03:47,010 --> 00:03:50,090
as you go through all this
process and these technologies,

67
00:03:50,090 --> 00:03:54,519
at one point the secret will
go from one point to the other.

68
00:03:54,519 --> 00:03:59,519
What happens with this two chains is

69
00:03:59,667 --> 00:04:02,900
in many stages these technologies are

70
00:04:02,900 --> 00:04:06,929
either not monitor or they are trusted

71
00:04:06,929 --> 00:04:11,929
or they basically taken
for granted to be secure.

72
00:04:12,520 --> 00:04:14,820
And we will see that in the next slides

73
00:04:16,390 --> 00:04:17,223
Next please.

74
00:04:21,720 --> 00:04:25,600
Looking at what I just presented,

75
00:04:25,600 --> 00:04:30,600
in terms of IT operations,
in terms of DevOps,

76
00:04:32,848 --> 00:04:37,260
all of this two processes
had something in common.

77
00:04:37,260 --> 00:04:42,260
Most of them nowadays are linked one way

78
00:04:42,810 --> 00:04:46,090
or the other to cloud providers.

79
00:04:46,090 --> 00:04:50,890
So we used to talk about
the perimeter that ends

80
00:04:50,890 --> 00:04:55,890
on your gateway, that
is no longer a reality.

81
00:04:56,090 --> 00:05:00,030
We now have what we call
a converged perimeter.

82
00:05:00,030 --> 00:05:02,049
What is a converged perimeter?

83
00:05:02,050 --> 00:05:05,647
A converged perimeter is
basically that gradient

84
00:05:05,647 --> 00:05:10,110
that comes in between
your classic perimeter,

85
00:05:10,110 --> 00:05:13,860
where you have your,
whatever's behind your gateway,

86
00:05:13,860 --> 00:05:17,255
your internet gateway,
either can be a WAN, LAN.

87
00:05:17,255 --> 00:05:19,440
Whatever you want, it can be
an (indistinct) if you want

88
00:05:19,440 --> 00:05:21,450
but it's not the internet.

89
00:05:21,450 --> 00:05:25,527
And the mixed in that gradient
with cloud technology.

90
00:05:25,527 --> 00:05:28,560
So many of you are probably familiar

91
00:05:28,560 --> 00:05:31,283
that cloud providers are
now offering services

92
00:05:31,283 --> 00:05:34,327
which basically you can be saving data,

93
00:05:34,327 --> 00:05:35,887
you can be polishing software,

94
00:05:35,887 --> 00:05:39,441
you can be doing actual
operations on servers

95
00:05:39,441 --> 00:05:41,659
that are in the cloud, but it looks like

96
00:05:41,660 --> 00:05:43,894
you are basically inside
your own perimeter.

97
00:05:43,894 --> 00:05:46,120
That's what we call a converged perimeter.

98
00:05:46,120 --> 00:05:51,120
It may not be easy to distinguish
because in many instances

99
00:05:52,600 --> 00:05:56,841
is seamless and one of the
mechanisms to make this seamless

100
00:05:56,841 --> 00:06:00,653
is the back and forth of
secure communications,

101
00:06:00,653 --> 00:06:05,140
or they use those secrets in
order not to force your users

102
00:06:05,140 --> 00:06:08,310
or technologies to
constantly try to log in

103
00:06:08,310 --> 00:06:09,462
again and again and again.

104
00:06:09,462 --> 00:06:12,519
And here's where it comes
the concept of federations,

105
00:06:12,519 --> 00:06:15,790
which is also another
issue when we're talking

106
00:06:15,790 --> 00:06:19,792
about the use of secrets,
not only at the local level,

107
00:06:19,792 --> 00:06:21,840
but at the cloud level.

108
00:06:21,840 --> 00:06:24,609
So please keep this in mind,

109
00:06:24,610 --> 00:06:28,710
the perimeter as we know
it in this day and age

110
00:06:28,710 --> 00:06:32,931
where we're adopting cloud
platforms and technologies,

111
00:06:32,931 --> 00:06:37,931
in order to do many things
from software to IT operations,

112
00:06:38,460 --> 00:06:40,979
it's no longer the same perimeter.

113
00:06:40,980 --> 00:06:43,130
We now have a converged perimeter,

114
00:06:43,130 --> 00:06:46,740
a mix of what we used to
call our classic perimeter

115
00:06:46,740 --> 00:06:48,970
and the cloud services that were adopting.

116
00:06:48,970 --> 00:06:49,803
Next up, please.

117
00:06:54,560 --> 00:06:58,854
With this converging, where
we had to basically go back

118
00:06:58,854 --> 00:07:03,330
and forth and operate in
this different platforms.

119
00:07:03,330 --> 00:07:06,652
We need mechanisms that
allow us to authenticate,

120
00:07:07,500 --> 00:07:10,242
that allow us to secure
and provide our users

121
00:07:10,242 --> 00:07:13,820
in our applications a way
to talk to each other.

122
00:07:13,820 --> 00:07:18,820
So if we put together the
processes of ITOPS, DevOps,

123
00:07:20,187 --> 00:07:23,113
and now we put this on their context of,

124
00:07:23,980 --> 00:07:27,990
a converged perimeter, there
are credentials everywhere,

125
00:07:27,990 --> 00:07:32,700
from SSH key pairs, which
is obviously commonly

126
00:07:32,700 --> 00:07:36,180
used to log into servers.

127
00:07:36,180 --> 00:07:38,513
The Slack tokens, for example,

128
00:07:39,530 --> 00:07:42,667
which is basically a tool
or communication tool

129
00:07:42,668 --> 00:07:47,668
that is used between many
developers in IT operations,

130
00:07:49,860 --> 00:07:51,190
SAML tokens.

131
00:07:51,190 --> 00:07:54,550
The SAML tokens are basically a way to

132
00:07:54,550 --> 00:07:56,787
authenticate through an API.

133
00:07:58,070 --> 00:08:02,950
We also are looking at IAM
secrets which is usually,

134
00:08:02,950 --> 00:08:07,573
had to do with identity
authentication management,

135
00:08:08,510 --> 00:08:13,510
how we authenticate users,
certificates, key pairs.

136
00:08:13,806 --> 00:08:18,806
And of course, we had things
such as API keys, Oauth tokens,

137
00:08:20,190 --> 00:08:22,719
example of that it's Oauth tokens

138
00:08:22,720 --> 00:08:27,113
and Google platform for example, or Azure.

139
00:08:29,780 --> 00:08:34,780
In this environments, we have
quite a bit of credentials,

140
00:08:35,860 --> 00:08:39,830
which makes the job of
defenders even more complicated,

141
00:08:39,830 --> 00:08:41,620
'cause if you had issues before,

142
00:08:41,620 --> 00:08:45,500
when you only had a perimeter,
let's say with passwords or

143
00:08:47,140 --> 00:08:49,609
password policies or people storing stuff

144
00:08:49,609 --> 00:08:53,214
that was available to others.

145
00:08:53,214 --> 00:08:55,710
Now it gets worse because
now you had to deal

146
00:08:55,710 --> 00:09:00,710
with plenty of different
sets of new credentials

147
00:09:00,760 --> 00:09:05,760
that can expose your
organization in ways that many

148
00:09:06,560 --> 00:09:09,982
of you probably can't see
it yet, but it is happening.

149
00:09:09,982 --> 00:09:12,949
And we will show some examples of it.

150
00:09:12,950 --> 00:09:13,783
Next up, please.

151
00:09:18,760 --> 00:09:23,293
So continuing my description of why is it

152
00:09:27,990 --> 00:09:31,190
that now we have all this new credentials,

153
00:09:31,190 --> 00:09:34,004
and we have this risk
scenarios that are increased

154
00:09:34,004 --> 00:09:38,956
because of the converging of
this new cloud technologies,

155
00:09:38,956 --> 00:09:43,956
which many times IT
administrators and CIS admins

156
00:09:45,370 --> 00:09:49,380
or even SEC operations had to say it.

157
00:09:49,380 --> 00:09:51,850
They tend not to see things into cloud

158
00:09:51,850 --> 00:09:54,833
like they belong to them because the line

159
00:09:54,833 --> 00:09:58,240
between the cloud
provider and the customer

160
00:09:59,499 --> 00:10:01,113
is responsibility.

161
00:10:02,720 --> 00:10:04,610
It's not very clear.

162
00:10:04,610 --> 00:10:06,876
And because there is no clarity in that

163
00:10:06,876 --> 00:10:10,996
the risk increases, the
risk like I said before,

164
00:10:10,996 --> 00:10:13,857
now a converged perimeter
and now there is a number

165
00:10:13,857 --> 00:10:17,226
of credentials that are
passing back and forth

166
00:10:17,226 --> 00:10:22,226
which many times I had to
say the biggest problem

167
00:10:22,428 --> 00:10:26,330
is the lack of visibility
at the cloud level,

168
00:10:26,330 --> 00:10:29,353
because it is assumed somehow,

169
00:10:29,353 --> 00:10:32,969
that this cloud environments are secure.

170
00:10:32,970 --> 00:10:36,049
Because it's a responsibility
for example of the provider

171
00:10:36,049 --> 00:10:39,689
or because many people somehow don't think

172
00:10:39,690 --> 00:10:40,680
that this will affect them.

173
00:10:40,680 --> 00:10:43,560
The truth is that it will affect you.

174
00:10:43,560 --> 00:10:48,369
And then here are some risk scenarios

175
00:10:48,370 --> 00:10:51,720
that you should consider
within this context.

176
00:10:51,720 --> 00:10:55,040
One of them is you're having developers

177
00:10:55,040 --> 00:10:57,829
with very high privileges that are

178
00:10:57,830 --> 00:11:02,152
either pushing code that
are logging into servers.

179
00:11:02,152 --> 00:11:05,450
Example, developer logs in locally,

180
00:11:05,450 --> 00:11:08,509
has high privileges then happens to log in

181
00:11:08,509 --> 00:11:11,190
into a cloud server, reuses
the said credentials,

182
00:11:11,190 --> 00:11:16,190
makes a mistake and hard codes
credentials in some code.

183
00:11:17,520 --> 00:11:19,117
That is a problem.

184
00:11:19,117 --> 00:11:21,392
When this credentials get leak,

185
00:11:22,880 --> 00:11:25,853
they may end up in public repositories.

186
00:11:26,920 --> 00:11:31,920
When this credentials are
embedded in public repositories

187
00:11:32,134 --> 00:11:37,134
and because of the speed
and the dynamics of

188
00:11:37,484 --> 00:11:41,100
software production for example,

189
00:11:41,100 --> 00:11:44,330
the link to production
systems is almost immediate.

190
00:11:44,330 --> 00:11:46,051
So it's very hard to catch it or stop it.

191
00:11:46,051 --> 00:11:49,110
Once the mistake has been made.

192
00:11:49,110 --> 00:11:52,050
Also remember, like I was saying before,

193
00:11:52,050 --> 00:11:54,913
because a lot of these
environments are ephemeral.

194
00:11:56,002 --> 00:11:59,928
Ephemeral means you can
destroy it any time you want.

195
00:11:59,928 --> 00:12:03,900
They're usually dismissed
and they're poorly monitored.

196
00:12:03,900 --> 00:12:06,290
I'll give you another example of this.

197
00:12:06,290 --> 00:12:08,500
Your developers or your IT operations

198
00:12:08,500 --> 00:12:10,980
are just wanting a specific
application or stack.

199
00:12:10,980 --> 00:12:15,980
They just go to a public hub
of where this container is

200
00:12:16,260 --> 00:12:18,504
for example, there are containers

201
00:12:18,504 --> 00:12:21,360
and they just download
them and they don't check

202
00:12:21,360 --> 00:12:23,560
if there are backdoors in it,

203
00:12:23,560 --> 00:12:25,189
then they put the credentials in it.

204
00:12:25,190 --> 00:12:27,020
This thing goes into the two chain

205
00:12:27,020 --> 00:12:29,370
of a company that's developing software.

206
00:12:29,370 --> 00:12:31,833
And somehow this ends up
either in your private

207
00:12:31,833 --> 00:12:35,250
container repository or even worse at a

208
00:12:35,250 --> 00:12:37,640
public repository of software.

209
00:12:37,640 --> 00:12:39,927
And finally, we've been
looking at this lately,

210
00:12:39,927 --> 00:12:42,710
is the use of federated credentials,

211
00:12:42,710 --> 00:12:47,140
when you're using federated
credentials it means if

212
00:12:47,140 --> 00:12:50,610
the credential is
compromised, either inside

213
00:12:50,610 --> 00:12:53,370
or at the cloud, it can be reused.

214
00:12:53,370 --> 00:12:57,290
And it can be reused,
you can go North-South,

215
00:12:57,290 --> 00:12:59,812
East-West, and we're seeing this already.

216
00:12:59,812 --> 00:13:04,812
In fact, we're seeing
campaigns where now part of

217
00:13:05,500 --> 00:13:10,500
the post exploitation
TTPs involve the search

218
00:13:11,387 --> 00:13:15,290
and the use if found of
federated credentials

219
00:13:15,291 --> 00:13:17,283
at the cloud connected environment.

220
00:13:18,270 --> 00:13:19,103
Next up, please.

221
00:13:23,870 --> 00:13:26,350
So let's talk a little better what the

222
00:13:26,350 --> 00:13:30,348
primary source of leaked credentials is.

223
00:13:30,348 --> 00:13:33,209
It's usually a public repository.

224
00:13:33,210 --> 00:13:38,210
So what you see here is the
main public repositories

225
00:13:38,960 --> 00:13:39,793
for software.

226
00:13:39,793 --> 00:13:44,726
And here we had Bitbucket,
GitHub, which is very popular.

227
00:13:46,367 --> 00:13:49,956
S3 Buckets, you'll be surprised
the number of S3 Buckets

228
00:13:49,956 --> 00:13:52,517
that are public and exposed.

229
00:13:52,517 --> 00:13:54,933
Things like Open DB or Gitlabs.

230
00:13:55,970 --> 00:14:00,930
So if you are an attacker and
you're trying to find somebody

231
00:14:00,930 --> 00:14:05,930
that either by omission or neglect,

232
00:14:07,670 --> 00:14:09,950
embedded credentials that could be reused,

233
00:14:09,951 --> 00:14:14,951
this would be your sources
of leaked credentials.

234
00:14:15,990 --> 00:14:17,410
And we're going to show you that today,

235
00:14:17,410 --> 00:14:21,515
we're gonna show you with
data, how this is a problem.

236
00:14:21,515 --> 00:14:25,560
This is a current problem
and it needs to be addressed.

237
00:14:25,560 --> 00:14:26,392
Next up please.

238
00:14:29,660 --> 00:14:32,992
Here's a little bit more
what I was just saying.

239
00:14:33,934 --> 00:14:38,934
With the use and the creation of this sort

240
00:14:41,146 --> 00:14:44,990
of technologies that
enable seamless operation,

241
00:14:44,990 --> 00:14:48,335
between what used to be
called the North-South

242
00:14:48,335 --> 00:14:51,580
meaning from perimeter
out of the internet,

243
00:14:51,580 --> 00:14:54,500
and back and forth or a lateral movement,

244
00:14:54,500 --> 00:14:55,910
which is East-West.

245
00:14:55,910 --> 00:14:59,380
It is now possible in many
of those environments where

246
00:14:59,380 --> 00:15:02,589
there's a converged
perimeter, the possibility to

247
00:15:02,589 --> 00:15:05,772
pivot North-South, what does this mean?

248
00:15:05,772 --> 00:15:10,000
This means that because
you now have either

249
00:15:10,000 --> 00:15:13,209
reuse credentials that
work inside the perimeter

250
00:15:13,209 --> 00:15:14,790
and at the cloud level,

251
00:15:14,790 --> 00:15:19,110
or you have federated
systems that allow the

252
00:15:19,110 --> 00:15:24,019
seamless pass-through
operation from North-South

253
00:15:24,019 --> 00:15:29,019
or East-West then now it
is technically possible to

254
00:15:30,480 --> 00:15:33,850
basically do what we used
to call lateral moment,

255
00:15:33,850 --> 00:15:37,111
but instead of East-West
could be North-South.

256
00:15:37,111 --> 00:15:38,487
Why?

257
00:15:38,487 --> 00:15:43,006
Because credentials persist
for an endpoint to cloud,

258
00:15:43,006 --> 00:15:47,000
there is a risk of credential
abuse that is increased

259
00:15:47,000 --> 00:15:48,373
in federated environments.

260
00:15:49,468 --> 00:15:54,300
And this allows pivoting,
because now I can pivot

261
00:15:54,300 --> 00:15:57,106
between endpoints and cloud providers.

262
00:15:57,106 --> 00:16:02,106
And like I said before, we're
starting to see the adoption

263
00:16:02,129 --> 00:16:07,129
of POS exploitation, TTPs
that involve the search

264
00:16:08,648 --> 00:16:13,648
and use and abuse of either
cloud connected credentials,

265
00:16:16,189 --> 00:16:21,189
or abuse or reuse of
federated credentials.

266
00:16:22,870 --> 00:16:27,870
So this obviously can come
from different vectors,

267
00:16:28,759 --> 00:16:33,754
but one of them is the unvetted images.

268
00:16:33,754 --> 00:16:36,550
Unvetted images are a
clear and present danger.

269
00:16:36,550 --> 00:16:40,474
Why, because, like I said
before, many companies,

270
00:16:40,475 --> 00:16:45,475
for some reason, because these
are ephemeral environments,

271
00:16:46,100 --> 00:16:51,100
meaning you deploy it, use it
for what you want to use it

272
00:16:51,237 --> 00:16:52,329
and then destroy it.

273
00:16:52,330 --> 00:16:56,174
Somehow they pass as they are secure

274
00:16:56,174 --> 00:16:58,160
or they don't care much about it.

275
00:16:58,160 --> 00:17:02,910
And what happens is
they end up in a private

276
00:17:07,060 --> 00:17:11,060
enterprise repositories
where they had been implanted

277
00:17:11,060 --> 00:17:15,399
back door and many other
vulnerabilities that basically

278
00:17:15,400 --> 00:17:19,670
could pass through simply
because you have a developer

279
00:17:19,670 --> 00:17:23,839
that wanted many and a
specific piece of code

280
00:17:23,839 --> 00:17:25,450
that was in that container.

281
00:17:25,450 --> 00:17:28,060
However, this wasn't scanned,

282
00:17:28,060 --> 00:17:31,427
this was not look upon security scanners,

283
00:17:31,427 --> 00:17:34,439
or it's not even inventory by operation.

284
00:17:34,440 --> 00:17:35,533
That's a huge risk.

285
00:17:37,250 --> 00:17:42,250
And then re-emphasizing that
recent post exploitation

286
00:17:42,512 --> 00:17:46,303
DDBs such as Pass The Cookie
and Golden SAML are examples

287
00:17:46,304 --> 00:17:49,000
of converged perimeter attack vectors.

288
00:17:49,000 --> 00:17:53,937
Again, as we are entering
a series of environments,

289
00:17:57,230 --> 00:18:00,453
where now a lot of these
cloud technologies are part

290
00:18:00,453 --> 00:18:03,570
of our perimeter, our
converged perimeters,

291
00:18:03,570 --> 00:18:08,447
this TTPs will become as well a standard.

292
00:18:08,448 --> 00:18:13,297
And what happens is
with these items of risk

293
00:18:15,546 --> 00:18:20,497
and items that they can
lead to obviously issues

294
00:18:21,906 --> 00:18:26,590
and even compromise,
organizations need visibility.

295
00:18:26,590 --> 00:18:28,937
Not only inside the
perimeter and at the cloud.

296
00:18:28,937 --> 00:18:33,142
I'd like to emphasize again,
that the problem starts here,

297
00:18:33,143 --> 00:18:38,143
from becoming aware that
the cloud does not belong,

298
00:18:38,620 --> 00:18:41,300
although it may belong to the provider,

299
00:18:41,300 --> 00:18:44,787
it's your responsibility
to keep it secure.

300
00:18:46,410 --> 00:18:49,790
And it's your data and
you have to watch it.

301
00:18:49,790 --> 00:18:50,643
Next up, please.

302
00:18:53,890 --> 00:18:58,890
So one of the things
that we had been using

303
00:18:59,420 --> 00:19:04,420
as a referential is Mitre
ATT&CK Cloud Matrix.

304
00:19:05,487 --> 00:19:09,910
We believe this framework,

305
00:19:09,910 --> 00:19:14,910
it's a very good
referential for looking at

306
00:19:16,580 --> 00:19:21,580
the different faces in
possible TTPs that can be used.

307
00:19:22,510 --> 00:19:27,510
In environments where
we have this variables

308
00:19:28,000 --> 00:19:31,247
of multiple credentials,
converse parameters,

309
00:19:31,247 --> 00:19:36,247
and exposure of leaked credentials,

310
00:19:36,300 --> 00:19:41,188
which is in the case that
we're trying to focus today,

311
00:19:41,189 --> 00:19:42,860
the main attack factor.

312
00:19:42,860 --> 00:19:46,544
It's pretty easy to go to
some of these repositories

313
00:19:46,545 --> 00:19:51,340
and basically obtain leaked credentials.

314
00:19:51,340 --> 00:19:54,100
So here's something that we put this here

315
00:19:54,100 --> 00:19:59,100
because we wanted to make
many aware that there

316
00:19:59,650 --> 00:20:02,070
is a Mitre ATT&CK Cloud Matrix,

317
00:20:02,070 --> 00:20:04,530
and many of the stuff
that you have seen today,

318
00:20:04,530 --> 00:20:07,013
we use this as a referential.

319
00:20:07,870 --> 00:20:08,703
Next up.

320
00:20:11,920 --> 00:20:16,920
So here's the following up on
the Mitre ATT&CK Cloud Matrix.

321
00:20:20,690 --> 00:20:23,250
Here's some examples of TTPs that

322
00:20:23,250 --> 00:20:24,924
we believe you should be aware of

323
00:20:24,924 --> 00:20:27,453
if you have this type of environment.

324
00:20:29,590 --> 00:20:34,409
Things that attackers can do
and that you have to watch for.

325
00:20:34,410 --> 00:20:36,967
For example create
permanent or temporary keys.

326
00:20:36,967 --> 00:20:41,040
If you have, we've seen
cases, for example,

327
00:20:41,040 --> 00:20:45,139
where developers had root
keys of an AWS environment,

328
00:20:45,140 --> 00:20:47,248
that is pretty bad, you
should never get root keys.

329
00:20:47,248 --> 00:20:52,248
You had to enforce
segregation of duties and

330
00:20:53,127 --> 00:20:55,012
principle of least privilege

331
00:20:55,012 --> 00:20:57,560
because basically a
person with a root key,

332
00:20:57,560 --> 00:20:58,929
once you have a root key,

333
00:20:58,930 --> 00:21:01,080
you can do whatever
you want and take over.

334
00:21:02,050 --> 00:21:06,180
You had to watch users
and even privileged users

335
00:21:06,180 --> 00:21:08,430
creating trust policies
cause trust policies,

336
00:21:09,700 --> 00:21:11,890
that can be attached
to a role for example,

337
00:21:11,890 --> 00:21:15,260
can allow somebody to escalate privileges.

338
00:21:15,260 --> 00:21:17,467
You had to watch for temporary tokens

339
00:21:17,467 --> 00:21:22,467
and probably tokens can be
abused such as Oauth2 tokens

340
00:21:22,734 --> 00:21:27,734
and GCP or watch for
commands such as AssumeRole

341
00:21:28,260 --> 00:21:29,510
or GetSessionTokens.

342
00:21:29,510 --> 00:21:31,400
These are things that for example,

343
00:21:31,400 --> 00:21:34,960
would allow any user or an attacker to

344
00:21:34,960 --> 00:21:38,909
assume someone's role
that has higher privileges

345
00:21:38,909 --> 00:21:43,350
or refresh a session
because they were able to

346
00:21:43,350 --> 00:21:44,209
obtain the token.

347
00:21:44,210 --> 00:21:49,089
Let's say they were able
to obtain a compromised

348
00:21:49,089 --> 00:21:51,993
and endpoint, for example,
where there is an SDK,

349
00:21:51,993 --> 00:21:54,216
or a CLI or AWS.

350
00:21:54,216 --> 00:21:56,729
They might be able to
extend their sessions

351
00:21:56,730 --> 00:22:01,640
by executing this commands
or even increased privileges,

352
00:22:01,640 --> 00:22:05,243
they had to do a little work
to find the correct roles.

353
00:22:05,243 --> 00:22:07,803
But these are things that
you had to watch for.

354
00:22:09,040 --> 00:22:12,892
Also things that you should
be aware of is if you have

355
00:22:12,892 --> 00:22:17,892
an Azure environment, you have
to watch for the creation of

356
00:22:19,190 --> 00:22:20,350
federated domains.

357
00:22:20,350 --> 00:22:23,514
Federated domains would
allow users from that new

358
00:22:23,514 --> 00:22:27,159
federated domain to
access your environment.

359
00:22:27,160 --> 00:22:29,840
And there is a technique
basically where you can

360
00:22:29,840 --> 00:22:33,860
create a backdoor federated domain to then

361
00:22:33,860 --> 00:22:37,630
basically access it.

362
00:22:37,631 --> 00:22:39,587
This is just something
you had to watch for,

363
00:22:39,587 --> 00:22:41,396
and the same thing with
service principles,

364
00:22:41,396 --> 00:22:43,399
service principles that are associated

365
00:22:43,400 --> 00:22:46,280
with the creation of federations.

366
00:22:46,280 --> 00:22:48,379
So this should be an event for example

367
00:22:48,380 --> 00:22:52,370
that if you see, you
should pay attention to it.

368
00:22:52,370 --> 00:22:54,929
And finally, one of the
things that we've been

369
00:22:54,930 --> 00:22:59,330
seeing lately is the
forge of SAML assertions.

370
00:22:59,330 --> 00:23:02,260
Some of the assertions
involve environments such

371
00:23:02,260 --> 00:23:07,170
as the ADFS, like Active
Directory Federation Service,

372
00:23:07,170 --> 00:23:12,080
and of course can be used
in Azure, Microsoft Azure,

373
00:23:12,080 --> 00:23:17,060
and they can be used
in Amazon Web Services.

374
00:23:17,060 --> 00:23:21,541
And with that, I am gonna pass it to Jose.

375
00:23:21,541 --> 00:23:25,899
- Thank you Rod for sharing
a bit of an understanding of

376
00:23:25,900 --> 00:23:29,700
what are the potential
vulnerabilities and issues,

377
00:23:29,700 --> 00:23:32,600
TTPs here that an attacker can
exploit leaked credentials.

378
00:23:34,240 --> 00:23:35,850
I wanted to pivot a little bit

379
00:23:35,850 --> 00:23:38,810
and talk about how we can
exploit this actively.

380
00:23:38,810 --> 00:23:41,378
How can we actually
leverage leaked credentials,

381
00:23:41,378 --> 00:23:43,768
study them and gather them.

382
00:23:43,768 --> 00:23:47,490
And there's a few things to
consider right off the bat.

383
00:23:47,490 --> 00:23:49,289
Like when we started
tackling this problem,

384
00:23:49,289 --> 00:23:53,540
one is what are the low hanging
fruits for us to monitor?

385
00:23:53,540 --> 00:23:56,230
Usually leaked credentials
are low hanging fruits

386
00:23:56,230 --> 00:23:57,580
for actors.

387
00:23:57,580 --> 00:23:58,720
It's easy to commit mistakes.

388
00:23:58,720 --> 00:24:01,020
I've made mistakes before
in development where,

389
00:24:01,020 --> 00:24:03,859
I've committed either something sensitive

390
00:24:03,859 --> 00:24:05,888
on a repo and I didn't realize it.

391
00:24:05,888 --> 00:24:08,379
And I caught it afterwards.

392
00:24:08,380 --> 00:24:09,972
And I've seen again,
colleagues, do those mistakes.

393
00:24:09,972 --> 00:24:12,970
So it's a low hanging fruit for actors to

394
00:24:12,970 --> 00:24:15,100
get a leaked credential, reuse it across

395
00:24:16,070 --> 00:24:17,320
to attack an environment.

396
00:24:19,970 --> 00:24:24,430
Specifically GitHub, it's
an industry standard tool

397
00:24:24,430 --> 00:24:26,885
used by DevOps to commit code.

398
00:24:26,885 --> 00:24:31,252
So again it's somewhat of
a common tuition to use

399
00:24:31,252 --> 00:24:35,003
and common place to
find leaked credentials.

400
00:24:36,680 --> 00:24:39,540
But again, in our demo today, one of our,

401
00:24:39,540 --> 00:24:42,020
we shared the example we
kind of picked on GitHub,

402
00:24:42,020 --> 00:24:42,933
but there's a lot more targets out there.

403
00:24:42,933 --> 00:24:47,654
There's Gitlabs, Bitbucket
and other basically

404
00:24:47,654 --> 00:24:52,654
revision control systems as a
service that you can leverage

405
00:24:53,790 --> 00:24:55,540
and exploit for leaked credentials.

406
00:24:57,727 --> 00:25:00,240
Before again I jump into the demo

407
00:25:00,240 --> 00:25:02,997
and I shared working pieces,

408
00:25:02,997 --> 00:25:06,999
wanna talk about the
challenges with hunting

409
00:25:06,999 --> 00:25:09,673
for leaked secrets in public repositories.

410
00:25:10,700 --> 00:25:12,088
The first and most obvious challenge is

411
00:25:12,088 --> 00:25:14,730
public repositories like GitHub,

412
00:25:14,730 --> 00:25:16,650
typically enforce API limits.

413
00:25:16,650 --> 00:25:21,650
And so if you're searching
through their API to

414
00:25:21,890 --> 00:25:26,260
extract essentially credentials,
they'll typically limit you

415
00:25:26,260 --> 00:25:28,394
by query by user or repo.

416
00:25:28,394 --> 00:25:31,100
We found some API specifically
in GitHub that allows us to

417
00:25:31,100 --> 00:25:32,820
grab all events coming in.

418
00:25:32,820 --> 00:25:37,620
And so were not necessarily
a constraint in the tool

419
00:25:37,620 --> 00:25:40,110
by user or repo, but this
is a usual constraint to

420
00:25:40,110 --> 00:25:43,233
think about as you're trying
to gather leaked credentials.

421
00:25:45,062 --> 00:25:47,853
Verifying whether a piece of code has a

422
00:25:47,854 --> 00:25:51,813
credential in it or not
by hand does not scale.

423
00:25:53,196 --> 00:25:55,790
When Rod and I originally
started this research,

424
00:25:55,790 --> 00:25:57,604
we were just running
searches across GitHub

425
00:25:57,604 --> 00:26:02,111
and finding different files
and then reading through them

426
00:26:02,111 --> 00:26:04,210
to see if they had leaked
credentials and we realized

427
00:26:04,210 --> 00:26:08,012
that we weren't gonna
scale, doing this manually.

428
00:26:08,012 --> 00:26:10,067
Which really gets me to
the third point of some

429
00:26:10,067 --> 00:26:13,040
of the challenges, but also
some of the opportunities here

430
00:26:13,040 --> 00:26:15,790
which is there's not a
whole lot of automation.

431
00:26:15,790 --> 00:26:18,280
Although this problem has been,

432
00:26:18,280 --> 00:26:20,370
in the last six months I've
seen a whole lot of improvement

433
00:26:20,370 --> 00:26:22,320
and this has changed.

434
00:26:22,320 --> 00:26:25,977
This entire process for
essentially parsing,

435
00:26:25,978 --> 00:26:28,871
storing and reporting
for leaked credentials,

436
00:26:28,871 --> 00:26:30,046
it's ripe for automation.

437
00:26:30,046 --> 00:26:32,196
There's a lot of opportunities
for automating things

438
00:26:32,196 --> 00:26:34,153
specifically to solve this problem.

439
00:26:35,174 --> 00:26:39,170
So now we're set, let me
jump into a quick demo

440
00:26:39,170 --> 00:26:41,980
and like everything in life,

441
00:26:41,980 --> 00:26:44,180
it's not fun unless we do a live.

442
00:26:44,180 --> 00:26:46,013
So I'm gonna try to do this life.

443
00:26:47,179 --> 00:26:49,690
I've already cloned down git-wild-hunt.

444
00:26:49,690 --> 00:26:52,153
Actually, before I jump,

445
00:26:52,153 --> 00:26:54,680
I've already cloned git-wild-hunt tool

446
00:26:54,680 --> 00:26:56,660
and I have it configured here.

447
00:26:56,660 --> 00:26:58,555
Git-wild-hunt is the tool we developed

448
00:26:58,555 --> 00:27:01,756
essentially to search
for leaked credentials.

449
00:27:01,756 --> 00:27:06,193
And it works very simply by taking in a

450
00:27:06,193 --> 00:27:07,866
GitHub advanced search.

451
00:27:07,866 --> 00:27:09,700
It would then parse all the results

452
00:27:09,700 --> 00:27:12,500
from that search and
try to find inside of it

453
00:27:12,500 --> 00:27:15,053
whether there was a
leaked token in it or not.

454
00:27:19,290 --> 00:27:21,240
Let me show you the configuration for it,

455
00:27:21,240 --> 00:27:22,923
it's extremely simple.

456
00:27:23,864 --> 00:27:25,273
Let me share what the configurations look

457
00:27:25,273 --> 00:27:26,465
like really quickly.

458
00:27:26,465 --> 00:27:29,163
It just needs your GitHub token,

459
00:27:30,090 --> 00:27:32,000
where do you wanna write the results into

460
00:27:32,000 --> 00:27:33,730
and it logs it's actions.

461
00:27:33,730 --> 00:27:36,903
And what rej access to match
for leaked credentials.

462
00:27:39,996 --> 00:27:41,928
If you wanted to search for example,

463
00:27:41,928 --> 00:27:44,167
leaked credentials for AWS,

464
00:27:45,160 --> 00:27:49,101
we can write an advanced search for,

465
00:27:49,101 --> 00:27:52,068
we can grab an advanced search
that would look for anything

466
00:27:52,068 --> 00:27:54,819
under the AWS path, which is where

467
00:27:54,819 --> 00:27:57,022
AWS stores its credentials

468
00:27:57,022 --> 00:27:59,088
This is an example of that.

469
00:27:59,088 --> 00:28:01,577
So GitHub advanced
search, look for anything

470
00:28:01,577 --> 00:28:04,589
on the .path with a
founding credential in it.

471
00:28:04,589 --> 00:28:07,330
That's usually where AWS stores
their credentials natively,

472
00:28:07,330 --> 00:28:09,050
AWS CLI specifically.

473
00:28:09,050 --> 00:28:11,149
And the tool is gonna search all of GitHub

474
00:28:13,060 --> 00:28:15,556
for this file and see if
it matches given the reject

475
00:28:15,556 --> 00:28:18,354
patterns that we have any
potential credentials in it.

476
00:28:18,354 --> 00:28:21,250
So I'm gonna go ahead and
run it really quickly.

477
00:28:21,250 --> 00:28:22,375
And you see right off the bat,

478
00:28:22,375 --> 00:28:26,199
we have about 350 results
currently right now in GitHub,

479
00:28:26,199 --> 00:28:28,030
that match this file path.

480
00:28:28,030 --> 00:28:30,533
And now it's gonna go through every result

481
00:28:31,687 --> 00:28:36,090
and essentially see if it
finds a potential leaked key.

482
00:28:36,090 --> 00:28:37,337
And you can see already that
is already finding keys.

483
00:28:37,337 --> 00:28:40,869
So it's telling you hey, I
found a key on this repo.

484
00:28:40,869 --> 00:28:45,720
Here's potentially the key ID and

485
00:28:47,520 --> 00:28:49,758
again, it runs through
every single piece of code

486
00:28:49,758 --> 00:28:53,722
that gets returned for that
GitHub advanced search.

487
00:28:53,722 --> 00:28:57,210
And it's checking for about,

488
00:28:57,210 --> 00:29:00,730
I wanna say about 30 plus patterns,

489
00:29:00,730 --> 00:29:03,140
rejects patterns that match
different credentials.

490
00:29:03,140 --> 00:29:05,942
And those patterns are
things like Google API keys,

491
00:29:05,942 --> 00:29:08,410
Google Cloud platform tokens,

492
00:29:08,410 --> 00:29:12,900
Mailshake, Mailgun API tokens,

493
00:29:12,900 --> 00:29:17,150
Azure as well as GCP tokens.

494
00:29:17,150 --> 00:29:20,403
Squarespace, Stripe API tokens,

495
00:29:21,600 --> 00:29:23,189
it's all documented nicely in the project

496
00:29:23,190 --> 00:29:25,740
but there's about 30 plus checks

497
00:29:25,740 --> 00:29:29,150
with different potential
tokens that can be matched on

498
00:29:29,150 --> 00:29:31,430
given an advanced search.

499
00:29:31,430 --> 00:29:35,470
Once the tool finishes
processing all the results,

500
00:29:35,470 --> 00:29:39,660
and it's about to be done here,
we're in the 270 something,

501
00:29:39,660 --> 00:29:43,478
it will write all the
results into a JSON file.

502
00:29:43,478 --> 00:29:46,310
And the primary reason
we're writing this into

503
00:29:46,310 --> 00:29:49,200
this JSON file is to make it
very easily consumable and

504
00:29:49,200 --> 00:29:52,750
portable afterwards
and here it's all done.

505
00:29:52,750 --> 00:29:54,034
Excellent.

506
00:29:54,034 --> 00:29:59,034
If you go here, we wrote our
results into results@JSON

507
00:29:59,460 --> 00:30:00,808
'cause we're not creative with names.

508
00:30:00,808 --> 00:30:05,490
And you can see here, there's
a structure of all the results

509
00:30:06,535 --> 00:30:09,210
of all the matches essentially it found.

510
00:30:09,210 --> 00:30:12,850
It grabs back not only the
URL or where it matched,

511
00:30:12,850 --> 00:30:16,050
but also the type of
check, essentially leak,

512
00:30:16,050 --> 00:30:19,500
what the match was and then
it brings back a little bit of

513
00:30:19,500 --> 00:30:22,514
information about the user in
GitHub that leaked it as well.

514
00:30:22,514 --> 00:30:24,311
And again this is
everything that's available

515
00:30:24,311 --> 00:30:26,179
to the GitHub API.

516
00:30:26,180 --> 00:30:30,030
Now, cool thing is since
this is a simple JSON,

517
00:30:30,030 --> 00:30:32,639
one of the things that we're doing here,

518
00:30:32,640 --> 00:30:36,040
is we're indexing in Splunk this data,

519
00:30:36,040 --> 00:30:37,670
to make it easily reportable.

520
00:30:37,670 --> 00:30:42,420
And what Rod and I have been
doing is we've been collecting,

521
00:30:42,420 --> 00:30:44,320
we've been running this tool
for the last eight months

522
00:30:44,320 --> 00:30:47,580
and collecting all the data
out of it in a Splunk instance.

523
00:30:47,580 --> 00:30:51,840
And we have a bunch of
good information out of it.

524
00:30:51,840 --> 00:30:53,790
By the way, this is the GitHub project,

525
00:30:54,890 --> 00:30:57,480
just wanted to share
with you really quickly.

526
00:30:57,480 --> 00:30:59,365
You will clone it, you have some examples.

527
00:30:59,365 --> 00:31:01,390
If you wanted to hunt
for specific credentials,

528
00:31:01,390 --> 00:31:02,611
these are the ones that
we've been hunting for

529
00:31:02,611 --> 00:31:04,110
for the last eight months.

530
00:31:04,110 --> 00:31:06,949
So specifically GCP,
AWS, Azure, (indistinct)

531
00:31:06,950 --> 00:31:09,670
Kubernetes, Jenkins, Circle CX secrets

532
00:31:09,670 --> 00:31:11,420
and just generic credentials again.

533
00:31:12,540 --> 00:31:13,850
These are the different registers

534
00:31:13,850 --> 00:31:15,500
that it ships out of the box.

535
00:31:15,500 --> 00:31:16,370
I'm not creative.

536
00:31:16,370 --> 00:31:18,429
I totally borrowed this from TruffleHog.

537
00:31:18,430 --> 00:31:20,883
This is exactly what
TruffleHog searches for,

538
00:31:23,206 --> 00:31:25,909
and again the biggest difference
if compared to something

539
00:31:25,910 --> 00:31:27,840
like this to TruffleHog
is TruffleHog will search

540
00:31:27,840 --> 00:31:30,240
for these credentials
inside a specific repo,

541
00:31:30,240 --> 00:31:32,710
where here we're searching
across all of GitHub

542
00:31:32,710 --> 00:31:35,943
and then finding leaks for
these specific type of keys.

543
00:31:37,010 --> 00:31:38,486
So with that said, let me show you

544
00:31:38,486 --> 00:31:40,700
after collecting there for eight months,

545
00:31:40,700 --> 00:31:44,840
here we put together a
dashboard to allow us

546
00:31:44,840 --> 00:31:47,240
to quickly get a pulse
of how things are going

547
00:31:47,240 --> 00:31:50,060
from leaked credentials perspective,

548
00:31:50,060 --> 00:31:52,000
specifically I call this the leak pie.

549
00:31:52,000 --> 00:31:54,830
And so you can see most
leaks that we've gotten,

550
00:31:54,830 --> 00:31:57,659
have been literally passwords in URLs.

551
00:31:57,660 --> 00:32:00,914
And some of it is a bunch
of GCP service accounts

552
00:32:00,914 --> 00:32:04,163
as well on here, as well as API keys.

553
00:32:07,500 --> 00:32:10,010
If you break down by type,
the most common type,

554
00:32:10,010 --> 00:32:11,390
again, password by URLs.

555
00:32:12,430 --> 00:32:15,530
You can see here a pulse of how things,

556
00:32:15,530 --> 00:32:16,851
it's awesome to see that over the months

557
00:32:16,852 --> 00:32:18,890
that we've been running this tool,

558
00:32:18,890 --> 00:32:21,440
there has been less and less
leaked credentials in GitHub.

559
00:32:21,440 --> 00:32:23,201
Which means, again, it
makes me feel happy that

560
00:32:23,201 --> 00:32:26,220
the problem is getting
solved, to be honest with you

561
00:32:26,220 --> 00:32:27,670
since we started noticing it.

562
00:32:33,330 --> 00:32:38,330
In short this is what we've
been leveraging the tool for.

563
00:32:38,564 --> 00:32:41,030
Now, let me flip back here to our slides.

564
00:32:41,030 --> 00:32:46,030
I wanna share some other
metrics that we gathered.

565
00:32:48,268 --> 00:32:51,793
A few of the metrics that
we gathered here are,

566
00:32:53,730 --> 00:32:58,730
there's about 276,000
companies that we noticed

567
00:32:59,580 --> 00:33:01,919
that leak credentials out there actively.

568
00:33:01,920 --> 00:33:04,331
And the way we're
gathering the companies is,

569
00:33:04,331 --> 00:33:07,199
if a GitHub user has a company listed

570
00:33:07,200 --> 00:33:08,894
under their GitHub profile,

571
00:33:08,894 --> 00:33:11,120
that's how we know there's
a company behind it.

572
00:33:11,120 --> 00:33:13,449
And so we counted them, 270

573
00:33:13,450 --> 00:33:14,283
it's quite a bit of companies leaked.

574
00:33:14,283 --> 00:33:16,639
And this is by the way, the breakdown of

575
00:33:16,640 --> 00:33:18,140
leaked by companies, I forgot to mention.

576
00:33:18,140 --> 00:33:23,140
Mainly passwords in your URLs,
GCP tokens and AWS API keys.

577
00:33:24,220 --> 00:33:26,964
Now, one interesting fact
was the average leak time

578
00:33:26,964 --> 00:33:28,360
was about 52 days.

579
00:33:28,360 --> 00:33:31,118
So when we saw a secret be leaked,

580
00:33:31,118 --> 00:33:34,730
it took 52 days for a secret
to come off the GitHub project.

581
00:33:34,730 --> 00:33:35,830
And like I showed you in the trend,

582
00:33:35,830 --> 00:33:37,919
this has been trending down all around

583
00:33:37,920 --> 00:33:39,400
which is really, really nicely.

584
00:33:39,400 --> 00:33:42,583
But you can see, I do some
trendlines here to show you that,

585
00:33:47,129 --> 00:33:50,783
it's a common problem,
even in large corporations,

586
00:33:50,784 --> 00:33:52,960
that have like distributed DevOps team,

587
00:33:52,960 --> 00:33:55,233
if you're using specific
things like GitHub.

588
00:33:56,400 --> 00:33:57,908
Again, very common, this
is a very common problem

589
00:33:57,908 --> 00:33:59,560
across multiple companies.

590
00:33:59,560 --> 00:34:01,350
I wanted to show you a bit of a,

591
00:34:01,350 --> 00:34:02,947
again good for these
companies that the trend

592
00:34:02,947 --> 00:34:05,579
as you can see has been going down

593
00:34:05,579 --> 00:34:08,029
since we've been monitoring
this, which is amazing.

594
00:34:08,030 --> 00:34:09,699
But it affects everybody.

595
00:34:09,699 --> 00:34:11,085
This is a very common problem we've seen

596
00:34:11,085 --> 00:34:12,253
across the industry.

597
00:34:13,860 --> 00:34:16,989
And now I'm gonna pass it
back to Rod to close it

598
00:34:16,989 --> 00:34:21,409
off for us and give us a
bit of how you can apply

599
00:34:21,409 --> 00:34:22,913
this in your own environment.

600
00:34:23,987 --> 00:34:27,299
- Sure and thank you.

601
00:34:27,300 --> 00:34:30,842
Basically, what we want you
to take from this presentation

602
00:34:30,842 --> 00:34:35,842
is that you have to become
aware that if you have

603
00:34:37,010 --> 00:34:42,010
any cloud assets where you either have

604
00:34:44,900 --> 00:34:49,900
either a DevOps process
or ITOPS process where

605
00:34:52,380 --> 00:34:55,760
you're deploying servers for
applications, deploying servers

606
00:34:55,760 --> 00:34:57,820
for software, publishing applications,

607
00:34:57,820 --> 00:35:01,460
publishing patches
software, you're exposed.

608
00:35:01,460 --> 00:35:06,100
So it is important for
you to be aware not only

609
00:35:07,220 --> 00:35:10,640
what happens at the end of this road,

610
00:35:10,640 --> 00:35:14,759
which is the credential
gets leaked and published,

611
00:35:14,760 --> 00:35:17,650
but you can prevent this
by having visibility,

612
00:35:17,650 --> 00:35:22,650
not only at the cloud level,
but at the local level

613
00:35:24,410 --> 00:35:29,410
where you had to have visibility
into what your developers

614
00:35:29,603 --> 00:35:33,610
are downloading, what your
IT people are publishing.

615
00:35:33,610 --> 00:35:35,830
Where are they getting
this containers from?

616
00:35:35,830 --> 00:35:37,060
Are they scanning them?

617
00:35:37,060 --> 00:35:42,060
Is there a process to
inventory and scan applications

618
00:35:42,170 --> 00:35:45,093
for libraries, for
example or containers for

619
00:35:46,370 --> 00:35:48,189
either libraries, vulnerabilities,

620
00:35:48,189 --> 00:35:51,129
at the operating system level.

621
00:35:51,130 --> 00:35:55,520
Things that may be brought inside from a

622
00:35:55,520 --> 00:35:58,860
unvetted on check entity.

623
00:35:58,860 --> 00:36:03,630
So be aware that, this is
if you have an enterprise

624
00:36:03,630 --> 00:36:06,410
or even in a small medium company

625
00:36:06,410 --> 00:36:10,960
that has cloud assets, this concerns you.

626
00:36:10,960 --> 00:36:14,070
This is something that
you need to be aware of.

627
00:36:14,070 --> 00:36:17,720
My suggestion in some of the
cases that I've been approached

628
00:36:17,720 --> 00:36:21,609
by some very concerned security people is

629
00:36:21,610 --> 00:36:24,700
sit down with them, talk
to your IT operations,

630
00:36:24,700 --> 00:36:28,049
talk to your development
managers and talk to them and

631
00:36:28,050 --> 00:36:31,856
say hey, what do we
use for cloud services?

632
00:36:31,856 --> 00:36:36,856
What type of exposure can we have

633
00:36:37,630 --> 00:36:39,200
by what you're downloading?

634
00:36:39,200 --> 00:36:41,027
Is there an inventory of the containers?

635
00:36:41,027 --> 00:36:46,027
Is there a process in place to sanitizing,

636
00:36:46,290 --> 00:36:49,890
to research them and to
watch what's being published

637
00:36:49,890 --> 00:36:50,723
or even leaked?

638
00:36:50,723 --> 00:36:55,259
In fact, we know for a fact,
that GitHub has released a tool

639
00:36:55,260 --> 00:36:58,590
to prevent this type of issue.

640
00:36:58,590 --> 00:37:00,860
So this is something that you can use

641
00:37:00,860 --> 00:37:03,725
and you can also use the
tool that we show you,

642
00:37:03,725 --> 00:37:08,725
to see if your company is
being exposed by somebody,

643
00:37:10,741 --> 00:37:15,741
either accidentally or
because there's not a process.

644
00:37:16,327 --> 00:37:20,279
And this is not checked,
being exposed publicly

645
00:37:20,279 --> 00:37:24,490
on the internet by leaking secrets.

646
00:37:24,490 --> 00:37:27,778
So once you get to this
point, you can basically

647
00:37:27,778 --> 00:37:31,173
develop procedures and
prevent this from happening.

648
00:37:33,312 --> 00:37:34,393
- I just wanna add,

649
00:37:37,508 --> 00:37:41,720
thank you so much for
hearing our plea today.

650
00:37:43,600 --> 00:37:46,334
I think Rod and I are
extremely happy to see again,

651
00:37:46,334 --> 00:37:48,680
this trend down overall,

652
00:37:48,680 --> 00:37:51,453
and I hope you enjoy the talk.

653
00:37:51,454 --> 00:37:52,454
- Thank you.

