1
00:00:01,250 --> 00:00:02,083
- Hi, everyone.

2
00:00:02,083 --> 00:00:03,990
Welcome to Beyond Public Buckets:

3
00:00:03,990 --> 00:00:06,420
Lessons Learned on Attack
Detection in the Cloud.

4
00:00:06,420 --> 00:00:07,630
I'm on Nick Jones.

5
00:00:07,630 --> 00:00:08,950
I'm a senior consultant at F-Secure

6
00:00:08,950 --> 00:00:11,379
and I look after our cloud
security services globally.

7
00:00:11,380 --> 00:00:13,190
With me today, I've got Alfie Champion.

8
00:00:13,190 --> 00:00:14,379
- Hi everyone.

9
00:00:14,380 --> 00:00:18,000
I too, I'm a senior consultant
at F-Secure consulting

10
00:00:18,000 --> 00:00:19,800
and I look after the
attack detection services.

11
00:00:19,800 --> 00:00:21,800
- So for our agenda today,

12
00:00:21,800 --> 00:00:23,890
we've got a few things
we're gonna talk through.

13
00:00:23,890 --> 00:00:25,620
First off, a comparison between

14
00:00:25,620 --> 00:00:27,943
on-premise attack detection and cloud.

15
00:00:27,943 --> 00:00:29,570
There's a fair few nuances there

16
00:00:29,570 --> 00:00:31,840
that are worth understanding
before we go much further

17
00:00:31,840 --> 00:00:33,310
and some discussion around

18
00:00:33,310 --> 00:00:36,170
how to design your detection
stack for the cloud,

19
00:00:36,170 --> 00:00:38,650
how to integrate the different
technologies involved.

20
00:00:38,650 --> 00:00:41,230
And talking through some of
the likely attacker activity

21
00:00:41,230 --> 00:00:42,180
you're likely to see.

22
00:00:42,180 --> 00:00:44,100
All of that's quite specific
to your own environments

23
00:00:44,100 --> 00:00:46,030
but it's worth talking
through the generics

24
00:00:46,030 --> 00:00:47,120
as far as we can.

25
00:00:47,120 --> 00:00:50,430
And lastly, our experience
is taking the methodologies

26
00:00:50,430 --> 00:00:52,840
that our friends over
in the DevOps world use

27
00:00:52,840 --> 00:00:55,450
and applying those to attack detection.

28
00:00:55,450 --> 00:00:59,180
- Great, so on-premise versus
cloud, then to kick us off.

29
00:00:59,180 --> 00:01:01,230
So let's just, I guess lay the foundations

30
00:01:01,230 --> 00:01:02,480
and compare this to on-prem.

31
00:01:02,480 --> 00:01:04,739
Is this like a solved problem already?

32
00:01:04,739 --> 00:01:06,199
Are there lessons learned from on-prem

33
00:01:06,200 --> 00:01:08,432
that we can carry over into cloud?

34
00:01:08,432 --> 00:01:11,880
Well, I think from Nick
and I's experience,

35
00:01:11,880 --> 00:01:14,449
there's four kind of key areas
that are of most interest

36
00:01:14,450 --> 00:01:16,530
and the first is this idea

37
00:01:16,530 --> 00:01:19,460
of the uncertainty of malicious intent.

38
00:01:19,460 --> 00:01:21,750
The idea here that at this point,

39
00:01:21,750 --> 00:01:23,350
when we're working with a cloud account,

40
00:01:23,350 --> 00:01:25,009
certainly at the cat account level,

41
00:01:25,010 --> 00:01:29,000
and much of the actions that we're taking

42
00:01:29,000 --> 00:01:30,360
are through published API's,

43
00:01:30,360 --> 00:01:32,370
the kind of intended use.

44
00:01:32,370 --> 00:01:34,030
So much of the known bad,

45
00:01:34,030 --> 00:01:35,347
the kind of things

46
00:01:35,347 --> 00:01:36,280
that you'd see on prem being catered for

47
00:01:36,280 --> 00:01:39,090
by the likes of maybe
antivirus, for example

48
00:01:39,090 --> 00:01:41,620
are kind of more few and far between

49
00:01:41,620 --> 00:01:44,520
and managed services like AWS' guard duty

50
00:01:44,520 --> 00:01:47,130
provide some good coverage
in that known bad space

51
00:01:47,130 --> 00:01:49,960
to the likes of beckoning
out to tour IP addresses

52
00:01:49,960 --> 00:01:51,410
being a good example of that.

53
00:01:52,490 --> 00:01:55,440
Similarly context is ever more key

54
00:01:55,440 --> 00:01:57,870
when it comes to cloud detection.

55
00:01:57,870 --> 00:02:00,010
So as I said with much of this,

56
00:02:00,010 --> 00:02:01,940
there's API interaction going on,

57
00:02:01,940 --> 00:02:04,620
understanding an action,
the intent behind the action

58
00:02:04,620 --> 00:02:07,830
and the context of it could
be crucial in building

59
00:02:07,830 --> 00:02:10,092
kind of high fidelity detections really.

60
00:02:11,260 --> 00:02:15,799
Thirdly gaining visibility
on the face of it is easier.

61
00:02:15,800 --> 00:02:17,950
So with AWS as an example,

62
00:02:17,950 --> 00:02:20,950
we can have kind of
organization wide cloud trails.

63
00:02:20,950 --> 00:02:23,399
We can adopt some kind
of account vending policy

64
00:02:23,400 --> 00:02:26,620
such that a baseline level
of logging is maintained

65
00:02:26,620 --> 00:02:28,750
across the various accounts that we have

66
00:02:28,750 --> 00:02:30,680
and then indeed but your biggest problem

67
00:02:30,680 --> 00:02:31,850
becomes something like shadow.

68
00:02:31,850 --> 00:02:34,560
It we're actually understanding
the cloud environments

69
00:02:34,560 --> 00:02:35,393
that you're operating

70
00:02:35,393 --> 00:02:37,390
in can be your main concern at that point.

71
00:02:38,350 --> 00:02:40,670
And then lastly, less about kind of

72
00:02:40,670 --> 00:02:41,929
how you do cloud detection

73
00:02:41,930 --> 00:02:44,470
and maybe something to
be more mindful of really

74
00:02:44,470 --> 00:02:46,010
is that attackers are automating.

75
00:02:46,010 --> 00:02:48,010
This is like an economies
of scale type thing here

76
00:02:48,010 --> 00:02:50,850
where they're leveraging
kind of scripted attacks

77
00:02:50,850 --> 00:02:54,170
such that the compromise
of some access keys

78
00:02:54,170 --> 00:02:57,160
may probably that's through
some unintended exposure

79
00:02:57,160 --> 00:03:00,109
through say a code
repository or something,

80
00:03:00,110 --> 00:03:03,750
that can lead to an EC2 being
spun up in some obscure region

81
00:03:03,750 --> 00:03:05,920
and a crypto miner being installed

82
00:03:05,920 --> 00:03:07,519
in mere moments effectively.

83
00:03:07,520 --> 00:03:09,910
So understanding the pace
at which some of these

84
00:03:09,910 --> 00:03:12,030
more commodity start attacks are happening

85
00:03:12,030 --> 00:03:14,080
is something to definitely be mindful of.

86
00:03:15,900 --> 00:03:19,390
So the threat actors then kind
of what are we dealing with

87
00:03:19,390 --> 00:03:21,929
and what changes as we go up
that level of sophistication,

88
00:03:21,930 --> 00:03:23,720
what one, two and three here we've got.

89
00:03:23,720 --> 00:03:26,380
Well, the first thing is to
bear in mind that kind of,

90
00:03:26,380 --> 00:03:28,560
as I've mentioned already
that commodity style attack

91
00:03:28,560 --> 00:03:31,400
and I think much like
we see from the kind of

92
00:03:31,400 --> 00:03:34,560
cyclical process of
vulnerability disclosure,

93
00:03:34,560 --> 00:03:36,100
some patch release and then potentially

94
00:03:36,100 --> 00:03:37,892
some mass exportation.

95
00:03:37,892 --> 00:03:40,090
There's kind of some
parallel here as well.

96
00:03:40,090 --> 00:03:43,420
If credentials are compromised
in the likes of GitHub

97
00:03:43,420 --> 00:03:46,970
or on an exposed S3
public bucket, for example

98
00:03:46,970 --> 00:03:49,210
as I've said, there's
a very quick turnaround

99
00:03:49,210 --> 00:03:50,860
when it comes to that compromise

100
00:03:50,860 --> 00:03:53,690
leading to some account action.

101
00:03:53,690 --> 00:03:56,150
But there's obviously with
some malicious intent.

102
00:03:56,150 --> 00:03:57,710
As we move up that pyramid,

103
00:03:57,710 --> 00:03:59,630
we start dealing with
more targeted attacks,

104
00:03:59,630 --> 00:04:01,269
whether that's application vulnerability,

105
00:04:01,270 --> 00:04:03,450
whether that's a targeted attack through

106
00:04:03,450 --> 00:04:06,019
let's say a fishing vector, for example.

107
00:04:06,020 --> 00:04:09,760
And it's at that very top,
very Bespoke TTP angles

108
00:04:09,760 --> 00:04:11,640
that Nick and I have spent
our time really, I think

109
00:04:11,640 --> 00:04:13,190
with our clients most recently.

110
00:04:15,030 --> 00:04:16,940
And I think when you get there,

111
00:04:16,940 --> 00:04:18,969
there's a bit of a mindset shift

112
00:04:18,970 --> 00:04:20,610
that needs to happen when you again,

113
00:04:20,610 --> 00:04:22,010
going back to that, on-prem.

114
00:04:23,350 --> 00:04:25,017
There are obviously bad things,

115
00:04:25,017 --> 00:04:26,740
but the classic kind of evergreen example

116
00:04:26,740 --> 00:04:28,370
is something like Mimikatz.

117
00:04:28,370 --> 00:04:30,671
If Mimikatz is dropped
on an on-premise device

118
00:04:30,671 --> 00:04:33,020
as a known hash there's
some behaviors there that

119
00:04:33,020 --> 00:04:35,750
are so obviously bad if you like

120
00:04:35,750 --> 00:04:37,630
that you've got some reasonable confidence

121
00:04:37,630 --> 00:04:40,983
that you can act on those
with quick speed there really.

122
00:04:42,050 --> 00:04:45,340
In cloud, there are a
few of these we've said.

123
00:04:45,340 --> 00:04:46,820
There's less obviously bad things.

124
00:04:46,820 --> 00:04:49,520
Everything is abuse of
adjustment functionality.

125
00:04:49,520 --> 00:04:52,240
And as I've mentioned, context
becomes the key thing here.

126
00:04:52,240 --> 00:04:53,870
So as a simple example,

127
00:04:53,870 --> 00:04:57,070
we take a given IM user, for example.

128
00:04:57,070 --> 00:05:00,700
This user is then
provisioned with admin access

129
00:05:00,700 --> 00:05:03,659
of some kind of relevant means.

130
00:05:03,660 --> 00:05:07,470
And then if we take a look at
how the actions took place,

131
00:05:07,470 --> 00:05:09,980
if that changes is made by CI/CD user,

132
00:05:09,980 --> 00:05:11,520
there's some relevant change control

133
00:05:11,520 --> 00:05:13,180
associated with that event.

134
00:05:13,180 --> 00:05:14,710
The likelihood is and obviously

135
00:05:14,710 --> 00:05:16,430
there's always those cases to this

136
00:05:16,430 --> 00:05:18,400
where that action is probably okay.

137
00:05:18,400 --> 00:05:19,760
The intent there is legitimate

138
00:05:19,760 --> 00:05:21,310
and it's not a malicious actor.

139
00:05:23,000 --> 00:05:26,140
If that change is made
by an admin with no 2FA,

140
00:05:26,140 --> 00:05:28,633
maybe we've enriched our
data to say with the GOP

141
00:05:28,633 --> 00:05:31,330
that this is coming from
an unexpected place,

142
00:05:31,330 --> 00:05:34,109
there's no audit trail to suggest
there should be happening,

143
00:05:34,110 --> 00:05:35,313
that could give us more information

144
00:05:35,313 --> 00:05:36,616
that could act as an alert

145
00:05:36,617 --> 00:05:39,217
or something that instigates
some kind of investors.

146
00:05:41,540 --> 00:05:44,390
So on premise telemetry then versus cloud

147
00:05:44,390 --> 00:05:46,210
kind of what's at our disposal.

148
00:05:46,210 --> 00:05:48,200
We've said that the visibility is easier.

149
00:05:48,200 --> 00:05:49,460
There's more at our disposal,

150
00:05:49,460 --> 00:05:50,909
well, what are we talking about there?

151
00:05:50,910 --> 00:05:54,340
Well, I guess when you consider on premise

152
00:05:54,340 --> 00:05:55,173
the obvious candidates there.

153
00:05:55,173 --> 00:05:57,340
There's your host base telemetry,

154
00:05:57,340 --> 00:05:58,953
your network-based telemetry

155
00:05:58,954 --> 00:06:01,760
and application telemetry,
network telemetry.

156
00:06:01,760 --> 00:06:04,313
We could be looking at
some kind of like IDS, IPS,

157
00:06:05,360 --> 00:06:08,070
host based EDR, AV

158
00:06:08,070 --> 00:06:10,460
and the application
telemetry can obviously vary

159
00:06:10,460 --> 00:06:11,609
based on what we're talking about here

160
00:06:11,610 --> 00:06:13,450
but that could be some
vendor provided logs.

161
00:06:13,450 --> 00:06:15,840
That could be some custom developed logs

162
00:06:15,840 --> 00:06:18,767
that you're providing as
part of that application.

163
00:06:18,767 --> 00:06:22,159
When we consider a cloud workload though,

164
00:06:22,160 --> 00:06:24,940
some of that remains and
some is less important.

165
00:06:24,940 --> 00:06:27,050
So the most important thing, I guess

166
00:06:27,050 --> 00:06:29,510
is the control plane
telemetry, which kind of

167
00:06:29,510 --> 00:06:31,550
encompasses everything
we're talking about here.

168
00:06:31,550 --> 00:06:34,040
If you consider what's commonly called

169
00:06:34,040 --> 00:06:36,610
a kind of lift and shift
approach to that cloud workload

170
00:06:36,610 --> 00:06:38,300
you may retain all of these.

171
00:06:38,300 --> 00:06:39,480
You may have host telemetry,

172
00:06:39,480 --> 00:06:40,940
your EDR could still be rolled out

173
00:06:40,940 --> 00:06:42,580
and would still be relevant.

174
00:06:42,580 --> 00:06:44,930
Your network telemetry
and D could similarly be

175
00:06:46,550 --> 00:06:47,383
relevant to some degree

176
00:06:47,383 --> 00:06:50,159
and your application logs are
likely still to be relevant.

177
00:06:50,160 --> 00:06:52,750
But if we start considering
cloud native workloads,

178
00:06:52,750 --> 00:06:53,830
some of those could go away.

179
00:06:53,830 --> 00:06:57,210
The idea of deploying an
ADR to an entirely kind

180
00:06:57,210 --> 00:06:59,640
of card native workload
could just be a nonstarter.

181
00:06:59,640 --> 00:07:01,010
It just wouldn't work.

182
00:07:01,010 --> 00:07:03,360
And simply that control plane becomes

183
00:07:03,360 --> 00:07:05,460
such a critical source
of information for you

184
00:07:05,460 --> 00:07:08,950
as a defender or the API
calls you've spoken about

185
00:07:08,950 --> 00:07:10,550
the intended functionality,

186
00:07:10,550 --> 00:07:12,980
nine times out of 10 it's in
that control plane telemetry

187
00:07:12,980 --> 00:07:14,280
that we're gonna be doing.

188
00:07:15,320 --> 00:07:17,290
So just a pause for a second.

189
00:07:17,290 --> 00:07:19,950
Then we call it a thought
conceptually about on-prem

190
00:07:19,950 --> 00:07:21,650
and cloud and what the
differences might be.

191
00:07:21,650 --> 00:07:23,570
Well, just gonna take a vote to look at

192
00:07:23,570 --> 00:07:26,390
some of the mistakes
and pitfalls that we see

193
00:07:26,390 --> 00:07:29,710
from clients as they pivot
from their on premise detection

194
00:07:29,710 --> 00:07:31,947
particularly those with
the mature outfit already

195
00:07:31,947 --> 00:07:34,640
and take that over to cloud.

196
00:07:34,640 --> 00:07:35,800
And I think the first one we see

197
00:07:35,800 --> 00:07:37,400
and this is quite common is that

198
00:07:37,400 --> 00:07:40,979
telemetry is aggregated with no context

199
00:07:41,980 --> 00:07:44,980
and I think there's two
main things to say here.

200
00:07:44,980 --> 00:07:47,090
One is by no provided context.

201
00:07:47,090 --> 00:07:49,940
What I mean is not only is it that

202
00:07:49,940 --> 00:07:51,770
that log source has not been enriched

203
00:07:51,770 --> 00:07:52,950
when it makes its way to the scene.

204
00:07:52,950 --> 00:07:54,990
So there's no way of knowing kind of

205
00:07:54,990 --> 00:07:56,400
in which account it belongs to

206
00:07:56,400 --> 00:07:59,289
aside from maybe the account
ID is provided alongside it.

207
00:07:59,290 --> 00:08:02,210
But more importantly, there's
no way for your analysts

208
00:08:02,210 --> 00:08:05,510
for your investigation team
to pivot into an account

209
00:08:05,510 --> 00:08:07,330
to understand maybe more
about what's going on.

210
00:08:07,330 --> 00:08:09,310
If they've got some
kind of federated access

211
00:08:09,310 --> 00:08:11,950
into those accounts to actually
perform the investigation

212
00:08:11,950 --> 00:08:15,060
in a streamlined, effective
and formalized way.

213
00:08:15,060 --> 00:08:16,320
And as I've said there,

214
00:08:16,320 --> 00:08:18,599
what is bad in one account
could be good in another

215
00:08:18,600 --> 00:08:21,550
and you need that context as
we've said to figure that out.

216
00:08:22,410 --> 00:08:25,320
Another thing is overlooking
authentication logs.

217
00:08:25,320 --> 00:08:26,830
So we're talking about kind of on-prem

218
00:08:26,830 --> 00:08:30,599
if you imagine that kind of
top and bottom on-prem logs

219
00:08:30,600 --> 00:08:33,025
and then we're talking
about your cloud-based logs,

220
00:08:33,025 --> 00:08:34,199
the control plane stuff we've mentioned.

221
00:08:34,200 --> 00:08:35,909
But there's that interface in the middle,

222
00:08:35,909 --> 00:08:38,380
that trust boundary or
at least conceptually

223
00:08:38,380 --> 00:08:40,049
when it comes to the federated access.

224
00:08:40,049 --> 00:08:43,799
Any organization of a decent
size is likely to be managing

225
00:08:43,799 --> 00:08:46,199
various cloud accounts and indeed doing it

226
00:08:46,200 --> 00:08:49,550
in some kind of federated
way that relies probably

227
00:08:49,550 --> 00:08:51,520
on a single point of truth.

228
00:08:51,520 --> 00:08:53,890
It getting the logs out
of that is certainly

229
00:08:53,890 --> 00:08:56,470
going to be valuable for doing
some meaningful correlation

230
00:08:56,470 --> 00:08:58,520
between the events you see
and a good example of that

231
00:08:58,520 --> 00:09:01,180
is probably the golden
Samat attacks that have been

232
00:09:01,180 --> 00:09:05,371
made me very, very, very notice
boarding in recent times.

233
00:09:05,371 --> 00:09:07,490
And I think it's important
to mention as well

234
00:09:07,490 --> 00:09:10,557
what we're talking about
here, this idea of kind of

235
00:09:10,557 --> 00:09:12,430
what are cloud accounts providing us

236
00:09:12,430 --> 00:09:14,810
when it comes to telemetry
and what the differences are.

237
00:09:14,810 --> 00:09:17,020
It's never too early
to threat model these,

238
00:09:17,020 --> 00:09:19,460
to start thinking about
how would I attack this?

239
00:09:19,460 --> 00:09:20,860
How would I subvert the controls

240
00:09:20,860 --> 00:09:22,960
that I've got in place and just test out

241
00:09:22,960 --> 00:09:25,149
some of those offensive scenarios?

242
00:09:25,149 --> 00:09:27,710
And the best way to do
that is to build a context

243
00:09:27,710 --> 00:09:29,090
from the architectural stage onwards.

244
00:09:29,090 --> 00:09:30,880
So don't think about it as like a

245
00:09:30,880 --> 00:09:33,390
I'd go through my development
cycle we're about to deploy.

246
00:09:33,390 --> 00:09:36,050
Okay, now I'm gonna start
thinking about what I can detect.

247
00:09:36,050 --> 00:09:37,740
I've got some log sources turned on

248
00:09:37,740 --> 00:09:39,430
which harks back to my
first point there about

249
00:09:39,430 --> 00:09:42,380
kind of providing logs,
aggravated with no context

250
00:09:42,380 --> 00:09:43,890
building this in from the start to say

251
00:09:43,890 --> 00:09:46,949
what should the environment
do, maybe what should it not do

252
00:09:46,950 --> 00:09:50,650
and then provide that insight
to your analysts directly.

253
00:09:50,650 --> 00:09:52,040
So they know when
they're dealing with this

254
00:09:52,040 --> 00:09:53,110
when they're triaging events

255
00:09:53,110 --> 00:09:55,030
and even when they're building detections

256
00:09:55,030 --> 00:09:56,350
this is what I should see.

257
00:09:56,350 --> 00:09:57,970
And this is what I shouldn't see

258
00:09:57,970 --> 00:09:59,657
and the codifying of this
and the documenting of this

259
00:09:59,657 --> 00:10:02,130
is something that Nick's gonna speak about

260
00:10:02,130 --> 00:10:03,560
later on in this session.

261
00:10:03,560 --> 00:10:05,319
So Nick I'll pass that to you.

262
00:10:05,320 --> 00:10:06,520
- Thanks Alfie.

263
00:10:06,520 --> 00:10:08,250
And so we're gonna talk now about

264
00:10:08,250 --> 00:10:10,230
designing your cloud detection stack

265
00:10:10,230 --> 00:10:13,370
and what we mean here is how do we go from

266
00:10:13,370 --> 00:10:16,880
not having anything to
a stack of technology

267
00:10:16,880 --> 00:10:19,260
that ingests the right logs,
presents them in the right way

268
00:10:19,260 --> 00:10:22,410
and our analysts can get
some useful data out of.

269
00:10:22,410 --> 00:10:24,342
Now, our first tip here I think is

270
00:10:24,342 --> 00:10:27,020
as much as the industry
likes to go on about

271
00:10:27,020 --> 00:10:28,960
the idea of a single pane of glass

272
00:10:28,960 --> 00:10:31,070
and useful but perhaps not necessary.

273
00:10:31,070 --> 00:10:33,630
What is necessary is to make it very easy

274
00:10:33,630 --> 00:10:36,480
for your analysts to pivot
between different environments,

275
00:10:36,480 --> 00:10:39,140
different providers,
different data sources.

276
00:10:39,140 --> 00:10:40,640
The real critical thing here is that

277
00:10:40,640 --> 00:10:43,500
attacks rarely happen in
isolation in a single environment.

278
00:10:43,500 --> 00:10:45,460
It's very likely an attacker
is likely to trigger

279
00:10:45,460 --> 00:10:48,069
and try and pivot or
laterally move from your

280
00:10:48,069 --> 00:10:50,550
on premises to state into
the cloud or vice versa

281
00:10:50,550 --> 00:10:53,219
or between two environments.

282
00:10:53,220 --> 00:10:55,150
And so analysts need to be able to

283
00:10:55,150 --> 00:10:56,770
look at logs from one data source

284
00:10:56,770 --> 00:10:58,319
and easily pivot into the next.

285
00:11:01,050 --> 00:11:01,882
So now let's actually talk about

286
00:11:01,883 --> 00:11:03,390
some of these data sources, right?

287
00:11:03,390 --> 00:11:06,430
So we've got two key ones that
I really want to focus in on,

288
00:11:06,430 --> 00:11:08,979
the first of which is the
control plane audit logs.

289
00:11:08,980 --> 00:11:11,600
The second, which is the
service specific logs.

290
00:11:11,600 --> 00:11:13,670
There are a number of
other logs available,

291
00:11:13,670 --> 00:11:15,640
some that will remain relevant

292
00:11:15,640 --> 00:11:16,880
from your on premises estates,

293
00:11:16,880 --> 00:11:19,280
probably things like if
you have virtual machines,

294
00:11:19,280 --> 00:11:21,930
put your endpoint detection
response products on them.

295
00:11:21,930 --> 00:11:23,760
Likewise network flow logs,

296
00:11:23,760 --> 00:11:26,300
If you have a lot of
virtual machines running

297
00:11:26,300 --> 00:11:28,219
you're likely to get
more value out of those

298
00:11:28,220 --> 00:11:29,830
than a serverless cloud.

299
00:11:29,830 --> 00:11:31,480
Native environment might.

300
00:11:31,480 --> 00:11:33,100
But these are things to analyze

301
00:11:33,100 --> 00:11:35,070
on a an environment by environment basis.

302
00:11:35,070 --> 00:11:36,720
The two that you really
should always be looking at,

303
00:11:36,720 --> 00:11:38,280
all the control plane audit logs

304
00:11:38,280 --> 00:11:41,062
and the service specific logs
for services you're using.

305
00:11:41,062 --> 00:11:43,203
So first up, control plane audit logs.

306
00:11:44,050 --> 00:11:47,125
So here we're talking cloud trial for AWS

307
00:11:47,125 --> 00:11:49,530
and audit log for Azure and GCP

308
00:11:49,530 --> 00:11:51,610
but also Kubernetes audit logs

309
00:11:51,610 --> 00:11:53,170
have proven quite a rich data source

310
00:11:53,170 --> 00:11:55,750
in a couple of client
environments for us as well.

311
00:11:55,750 --> 00:11:57,610
And the real key thing
here is what these do

312
00:11:57,610 --> 00:12:01,010
is they log every action
taken against the API

313
00:12:01,010 --> 00:12:03,860
provided by AWS as your Kubernetes

314
00:12:03,860 --> 00:12:05,520
for managing the environment

315
00:12:05,520 --> 00:12:08,240
any resource creation,
destruction, alteration

316
00:12:08,240 --> 00:12:11,260
or modification, you will
generate logs here for it

317
00:12:11,260 --> 00:12:14,490
and that provides you
with a trail of event data

318
00:12:14,490 --> 00:12:16,760
which you can analyze to
understand what someone has done

319
00:12:16,760 --> 00:12:18,100
in your environment.

320
00:12:18,100 --> 00:12:20,320
Couple of key considerations.

321
00:12:20,320 --> 00:12:23,300
First of which is for AWS,
you need global events

322
00:12:23,300 --> 00:12:25,390
or multi-region logging turned on

323
00:12:25,390 --> 00:12:26,470
and it locks to a single region

324
00:12:26,470 --> 00:12:29,480
or sorry for a single region by default

325
00:12:29,480 --> 00:12:31,760
which has caught a few
people out that I've seen.

326
00:12:31,760 --> 00:12:35,069
And it's worth centralizing
these as we spoke about before.

327
00:12:35,070 --> 00:12:37,580
All the providers offer some kind of

328
00:12:37,580 --> 00:12:41,850
organization-wide
centralized control point

329
00:12:41,850 --> 00:12:43,630
where everything gets
logged into the same place

330
00:12:43,630 --> 00:12:45,650
while we're taking advantage of those.

331
00:12:45,650 --> 00:12:48,740
The next up we have the
service specific logs.

332
00:12:48,740 --> 00:12:51,130
And so here, I'm thinking
about things like

333
00:12:51,130 --> 00:12:53,080
your object level logging for S3 in AWS

334
00:12:54,150 --> 00:12:58,500
or your Lander or as your
function execution logs.

335
00:12:58,500 --> 00:13:01,960
And in certain environments
for certain key resources,

336
00:13:01,960 --> 00:13:04,410
these can generate some
quite useful telemetry.

337
00:13:04,410 --> 00:13:06,430
If you know that you have an S3 bucket

338
00:13:06,430 --> 00:13:08,300
containing lots of sensitive data,

339
00:13:08,300 --> 00:13:10,020
keeping a very close
eye on that data events

340
00:13:10,020 --> 00:13:11,819
happening in that bucket is very useful.

341
00:13:11,820 --> 00:13:15,800
That said, if you've got an S3
bucket that just serves data,

342
00:13:15,800 --> 00:13:17,560
JavaScript assets, things like that

343
00:13:17,560 --> 00:13:19,050
as part of the web application,

344
00:13:19,050 --> 00:13:20,689
you probably don't care about read events.

345
00:13:20,690 --> 00:13:22,260
so you can filter all of those out,

346
00:13:22,260 --> 00:13:24,390
right events on the other
hand might be quite useful

347
00:13:24,390 --> 00:13:28,740
for spotting sort of major cart
style and website defacement

348
00:13:28,740 --> 00:13:30,670
JavaScript alteration attacks.

349
00:13:30,670 --> 00:13:32,209
But this is entirely case by case.

350
00:13:32,210 --> 00:13:33,680
You have to look at your environment,

351
00:13:33,680 --> 00:13:36,780
work out what it is that
you can get value out of

352
00:13:36,780 --> 00:13:38,540
and enable those specific log types

353
00:13:38,540 --> 00:13:40,980
and to stop you spending
your entire security budget

354
00:13:40,980 --> 00:13:43,270
with splunk in log ingestion phase.

355
00:13:43,270 --> 00:13:46,380
So in terms of how to
prioritize this stuff,

356
00:13:46,380 --> 00:13:47,960
where we're to start with this

357
00:13:47,960 --> 00:13:50,070
and you want to make
sure to gather telemetry

358
00:13:50,070 --> 00:13:52,070
for the services you're using,

359
00:13:52,070 --> 00:13:54,830
it's quite useful to
filter out all the data

360
00:13:54,830 --> 00:13:56,560
that may come in from
services that you know

361
00:13:56,560 --> 00:13:57,619
you're not gonna use,

362
00:13:57,620 --> 00:14:00,870
especially if you're able to put blocks

363
00:14:00,870 --> 00:14:02,120
on those services being used,

364
00:14:02,120 --> 00:14:04,320
service control policies
for instance in AWS

365
00:14:05,580 --> 00:14:08,080
and then really look at what an attacker

366
00:14:08,080 --> 00:14:10,070
is going to try and do
for a given environment.

367
00:14:10,070 --> 00:14:12,960
What is the key business
level attacker outcome?

368
00:14:12,960 --> 00:14:14,637
What are they going to do to achieve that?

369
00:14:14,637 --> 00:14:15,829
And then work backwards

370
00:14:15,830 --> 00:14:18,380
from the objective end of the kill chain

371
00:14:18,380 --> 00:14:20,750
where you'll get the
highest fidelity alerts

372
00:14:20,750 --> 00:14:21,583
- Great, yeah.

373
00:14:21,583 --> 00:14:23,000
So we've spoken about this then.

374
00:14:23,000 --> 00:14:25,810
So this idea of lucky attacker activity,

375
00:14:25,810 --> 00:14:27,219
we've spoken about the log sources

376
00:14:27,220 --> 00:14:29,153
that might be honest at our disposal.

377
00:14:29,990 --> 00:14:32,120
But what are we looking for?

378
00:14:32,120 --> 00:14:34,680
Well, I think just going
back to that comparison

379
00:14:34,680 --> 00:14:35,930
of on-prem to cloud,

380
00:14:35,930 --> 00:14:38,550
I think one of the things
that strikes me here is that

381
00:14:38,550 --> 00:14:41,050
when it comes to on-premise things are,

382
00:14:41,050 --> 00:14:43,170
I think when you consider industry scale,

383
00:14:43,170 --> 00:14:44,833
reasonably homogenous.

384
00:14:45,730 --> 00:14:48,510
You consider the end
point at your disposal.

385
00:14:48,510 --> 00:14:52,680
You consider maybe your
web proxies, et cetera.

386
00:14:52,680 --> 00:14:54,260
And there's some degree of commonality

387
00:14:54,260 --> 00:14:55,660
from a state to a state

388
00:14:55,660 --> 00:14:57,150
and there's some degree of commonality

389
00:14:57,150 --> 00:14:59,790
in terms of how you might overcome

390
00:14:59,790 --> 00:15:01,010
an organization's defenses

391
00:15:01,010 --> 00:15:03,260
to achieve some malicious objective.

392
00:15:03,260 --> 00:15:05,370
And I think in many cases,

393
00:15:05,370 --> 00:15:07,840
certainly not all but in many cases,

394
00:15:07,840 --> 00:15:10,820
the cloud workloads that
we're talking about here

395
00:15:10,820 --> 00:15:11,720
are bespoke ones.

396
00:15:11,720 --> 00:15:14,460
So the caveats of that course are

397
00:15:14,460 --> 00:15:17,660
when we're dealing with
maybe like an extension

398
00:15:17,660 --> 00:15:19,610
of our corporate environment.

399
00:15:19,610 --> 00:15:21,660
So we just have like a peer network where

400
00:15:21,660 --> 00:15:24,180
maybe our server estate
has been as I said before,

401
00:15:24,180 --> 00:15:27,410
lifted and shifted into
it into AWS for example.

402
00:15:27,410 --> 00:15:30,110
It could be that a lot of the
paradigms there are the same.

403
00:15:30,110 --> 00:15:32,060
It's almost transparent at a network level

404
00:15:32,060 --> 00:15:35,030
when it comes to interacting
with those assets.

405
00:15:35,030 --> 00:15:37,870
When we start thinking about
purpose-built cloud first,

406
00:15:37,870 --> 00:15:39,720
cloud native all of those things,

407
00:15:39,720 --> 00:15:43,290
it could be that that
environment is entirely bespoke.

408
00:15:43,290 --> 00:15:45,579
And then as such, the attacker actions

409
00:15:45,580 --> 00:15:48,280
that are performed within them
needs to be bespoke as well.

410
00:15:48,280 --> 00:15:49,780
We need to behave in a certain way

411
00:15:49,780 --> 00:15:53,293
to achieve the goal that we're after here.

412
00:15:54,200 --> 00:15:56,520
And I think at this point,
it's worth mentioning as well

413
00:15:56,520 --> 00:15:58,900
that we're talking about simple examples.

414
00:15:58,900 --> 00:15:59,900
In the previous diagram,

415
00:15:59,900 --> 00:16:02,270
I had like a couple of
EC2s and Alandra function.

416
00:16:02,270 --> 00:16:04,890
But you consider enterprise scale,

417
00:16:04,890 --> 00:16:08,670
certainly the kind of
modern kind of startup style

418
00:16:08,670 --> 00:16:11,620
kind of consumption of,
they're not the services.

419
00:16:11,620 --> 00:16:14,530
That cloud adoption is
insanely complicated.

420
00:16:14,530 --> 00:16:16,860
I mean, you could be talking
about trust boundaries

421
00:16:16,860 --> 00:16:19,050
that exist between
services entirely outside

422
00:16:19,050 --> 00:16:21,910
of your classical kind of
organization, kind of perimeter,

423
00:16:21,910 --> 00:16:23,270
if you like.

424
00:16:23,270 --> 00:16:25,040
You could be looking at cases where

425
00:16:25,040 --> 00:16:26,760
you need to be consuming the log sources

426
00:16:26,760 --> 00:16:28,270
from those third party providers

427
00:16:28,270 --> 00:16:29,540
and relying on the fidelity,

428
00:16:29,540 --> 00:16:32,160
the completeness of those sources

429
00:16:32,160 --> 00:16:35,420
to achieve some meaningful
detection within.

430
00:16:35,420 --> 00:16:38,209
So what we're talking about
here is hopefully conveyed

431
00:16:38,210 --> 00:16:40,410
as a principle, a way to get started

432
00:16:40,410 --> 00:16:42,760
but it's just worth bearing in mind that

433
00:16:42,760 --> 00:16:44,237
there's a bigger scope here

434
00:16:44,237 --> 00:16:45,780
and that's something that's
gonna become apparent

435
00:16:45,780 --> 00:16:47,893
as we progress through
this session as well.

436
00:16:49,670 --> 00:16:50,650
Leading from there then,

437
00:16:50,650 --> 00:16:52,329
I think one of the obvious candidates

438
00:16:52,330 --> 00:16:53,530
certainly that served us

439
00:16:54,485 --> 00:16:56,730
or has been invaluable on prem has been

440
00:16:56,730 --> 00:16:59,020
my to attack the enterprise matrix there

441
00:16:59,020 --> 00:17:01,220
on the left hand side of this

442
00:17:01,220 --> 00:17:03,940
serves to allow us to convey the attacks,

443
00:17:03,940 --> 00:17:06,359
allows us to link them back
to form some kind of mapping

444
00:17:06,359 --> 00:17:08,770
and some meaningful
tracking as we go through

445
00:17:08,770 --> 00:17:09,700
from threat intel

446
00:17:09,700 --> 00:17:12,773
to to kind of security control,
proficiency, everything.

447
00:17:13,670 --> 00:17:15,913
And it obviously serves
us in cloud as well.

448
00:17:17,240 --> 00:17:19,450
In comparison, the cloud attack matrix

449
00:17:19,450 --> 00:17:23,819
is relatively immature and less
kind of complete if you like

450
00:17:23,819 --> 00:17:26,210
or contains less attacker actions.

451
00:17:26,210 --> 00:17:27,930
I think when you look
at the enterprise matrix

452
00:17:27,930 --> 00:17:29,630
you can get right down
to the granular level

453
00:17:29,630 --> 00:17:33,950
of like use rundll32 to
achieve some code execution.

454
00:17:33,950 --> 00:17:35,710
And it's that granularity that I think

455
00:17:35,710 --> 00:17:38,110
is something that we're
certainly see more of

456
00:17:38,110 --> 00:17:42,179
as we progress and as the
cloud attack matrix progresses

457
00:17:42,180 --> 00:17:44,780
and there's some great work
from various individuals

458
00:17:45,987 --> 00:17:48,230
and kind of companies
within the InfoSec space,

459
00:17:48,230 --> 00:17:50,387
the likes of Scott Piper
and Spencer Gietzen

460
00:17:50,387 --> 00:17:53,200
and the guys that run our
security GitLab as well

461
00:17:53,200 --> 00:17:55,580
and putting out some really
great research and great tooling

462
00:17:55,580 --> 00:17:58,100
that kind of allows
all of us to understand

463
00:17:58,100 --> 00:18:00,112
what it is to attack a
defense cut environments.

464
00:18:00,113 --> 00:18:02,330
This is some great stuff there.

465
00:18:02,330 --> 00:18:05,699
So getting down to that granular level of

466
00:18:05,700 --> 00:18:07,670
what is it that an
attacker is likely to do?

467
00:18:07,670 --> 00:18:08,503
That's why we're here.

468
00:18:08,503 --> 00:18:10,370
Like, what are we gonna be looking for?

469
00:18:10,370 --> 00:18:11,699
I think for Nick and I

470
00:18:11,700 --> 00:18:14,610
and indeed kind of the practices relieved,

471
00:18:14,610 --> 00:18:17,100
it comes down to kind of
relying on our own experience

472
00:18:17,100 --> 00:18:19,669
what we've seen before what's worked well.

473
00:18:19,670 --> 00:18:20,730
And just to give you some examples

474
00:18:20,730 --> 00:18:21,920
of some of the entry points

475
00:18:21,920 --> 00:18:24,550
I think conveys kind of what's possible

476
00:18:24,550 --> 00:18:26,469
but also some of the complications
that I showed in that

477
00:18:26,469 --> 00:18:29,250
that spaghetti diagram before.

478
00:18:29,250 --> 00:18:31,560
The first is identity
management as a way in.

479
00:18:31,560 --> 00:18:33,770
So we've already spoken about this idea of

480
00:18:33,770 --> 00:18:37,760
either public repos or indeed
globally accessible repos

481
00:18:37,760 --> 00:18:38,710
that are internal.

482
00:18:38,710 --> 00:18:41,703
So any user within an organization
can access that stuff.

483
00:18:42,540 --> 00:18:44,370
If there are credentials
found within these,

484
00:18:44,370 --> 00:18:47,120
that could lead to potentially direct,

485
00:18:47,120 --> 00:18:49,070
the cloud workload compromise

486
00:18:49,070 --> 00:18:52,030
but also it could lead to
upstream compromise as well.

487
00:18:52,030 --> 00:18:55,990
So consider things like if
there are credentials to like

488
00:18:55,990 --> 00:18:57,260
an artifact repository

489
00:18:58,170 --> 00:19:00,350
if there're credentials
that provide access

490
00:19:00,350 --> 00:19:03,560
to our pipelines, the
configurations of our pipelines.

491
00:19:03,560 --> 00:19:05,188
That can be a huge thing

492
00:19:05,189 --> 00:19:06,710
and as we see it is coming of often

493
00:19:06,710 --> 00:19:11,177
in the idea of source
code management and CRCD.

494
00:19:11,177 --> 00:19:13,159
And similarly in kind of
linked to that, I guess

495
00:19:13,160 --> 00:19:16,010
is this idea of pivoting from
other environments as well.

496
00:19:16,950 --> 00:19:20,650
We've seen this in several
cases kind of most notably

497
00:19:20,650 --> 00:19:23,210
in a solar winds case where

498
00:19:23,210 --> 00:19:25,710
what we're doing is compromising on prem.

499
00:19:25,710 --> 00:19:28,995
And then when there's that
source of trust lies on premise,

500
00:19:28,995 --> 00:19:30,899
that we can move from there

501
00:19:30,900 --> 00:19:32,450
with some assumed level of privilege

502
00:19:32,450 --> 00:19:35,740
and the trust that is kind of
put from the cloud provider

503
00:19:35,740 --> 00:19:37,870
onto us when we access those assets

504
00:19:37,870 --> 00:19:40,870
and that can provide a very powerful way

505
00:19:40,870 --> 00:19:43,765
to essentially arrive at the
doors of your cloud account

506
00:19:43,766 --> 00:19:45,260
with all the access you need
to do what you need to do.

507
00:19:45,260 --> 00:19:46,930
So there's no need to pivot through it

508
00:19:46,930 --> 00:19:49,563
to attain kind of full
control if you like.

509
00:19:50,860 --> 00:19:51,693
And I've already touched on this,

510
00:19:51,693 --> 00:19:52,683
but it's worth bearing in mind

511
00:19:52,683 --> 00:19:55,010
kind of what this really
means really, I guess.

512
00:19:55,010 --> 00:19:57,670
So when we consider our
current environments,

513
00:19:57,670 --> 00:19:59,080
the kind of the DevOps,

514
00:19:59,080 --> 00:20:01,669
ethos that surrounds it in many cases,

515
00:20:01,670 --> 00:20:04,110
one obvious target is
infrastructure as code

516
00:20:04,110 --> 00:20:07,459
and the repositories that
that is contained within.

517
00:20:07,460 --> 00:20:09,420
The ability to change
infrastructure as code

518
00:20:09,420 --> 00:20:10,910
then its repository,

519
00:20:10,910 --> 00:20:12,120
let it go through a pipeline

520
00:20:12,120 --> 00:20:14,169
or a date attack the pipeline itself

521
00:20:14,170 --> 00:20:15,670
could lead to us introducing

522
00:20:15,670 --> 00:20:17,810
kind of new users to
that kind of environment,

523
00:20:17,810 --> 00:20:20,750
misconfigurations,
intentional misconfigurations

524
00:20:20,750 --> 00:20:21,840
or adding network access.

525
00:20:21,840 --> 00:20:24,540
That's as educators kind of
use their imagination then.

526
00:20:24,540 --> 00:20:27,960
So I think what I'm trying
to say here really is

527
00:20:27,960 --> 00:20:29,720
when you're considering
your cloud workload,

528
00:20:29,720 --> 00:20:31,120
that is invaluable.

529
00:20:31,120 --> 00:20:32,060
That's something that we've certainly

530
00:20:32,060 --> 00:20:33,399
spent a lot of time doing.

531
00:20:33,400 --> 00:20:34,710
But do bear in mind

532
00:20:34,710 --> 00:20:36,840
where the trust comes
from with that account,

533
00:20:36,840 --> 00:20:39,389
where is the upstream sources there

534
00:20:39,390 --> 00:20:41,970
that are pushing information
down into the account,

535
00:20:41,970 --> 00:20:43,570
and could be compromised

536
00:20:43,570 --> 00:20:44,980
essentially outside of the scope

537
00:20:44,980 --> 00:20:46,480
of the current account itself.

538
00:20:47,670 --> 00:20:49,740
And lastly, just as a
counter to that really

539
00:20:49,740 --> 00:20:51,613
is application of vulnerability so,

540
00:20:52,510 --> 00:20:55,340
this is effectively
traditional internet facing

541
00:20:55,340 --> 00:20:57,100
app vulnerabilities that
we've seen in the past,

542
00:20:57,100 --> 00:20:58,760
this idea of

543
00:20:58,760 --> 00:21:00,730
kind of high profile
disclosures coming out,

544
00:21:00,730 --> 00:21:02,830
leading to widespread compromise,

545
00:21:02,830 --> 00:21:04,889
if those servers, if those appliances

546
00:21:04,890 --> 00:21:08,190
are being hosted in a Cloud environment,

547
00:21:08,190 --> 00:21:10,070
it potentially makes
very little difference

548
00:21:10,070 --> 00:21:12,639
when it comes to the
compromise of the asset itself.

549
00:21:12,640 --> 00:21:14,120
If that provides initial access,

550
00:21:14,120 --> 00:21:16,290
if we're looking at a
peered network without

551
00:21:16,290 --> 00:21:18,690
where our server of state lines in AWS,

552
00:21:18,690 --> 00:21:19,523
along with say

553
00:21:20,530 --> 00:21:23,000
an exposed application that's vulnerable,

554
00:21:23,000 --> 00:21:24,320
that could provide the pivot point.

555
00:21:24,320 --> 00:21:26,649
You get to there and then from there

556
00:21:26,650 --> 00:21:28,020
pivot further into the environment,

557
00:21:28,020 --> 00:21:30,200
whether that's within the
cloud environment still,

558
00:21:30,200 --> 00:21:33,580
whether that's going into
the on-premise environment,

559
00:21:33,580 --> 00:21:34,800
all those things are up for grabs.

560
00:21:34,800 --> 00:21:36,200
And what we consider back to

561
00:21:37,357 --> 00:21:39,690
the pyramid that we have before,

562
00:21:39,690 --> 00:21:41,350
this could go any number of ways.

563
00:21:41,350 --> 00:21:43,510
Once you've obtained the initial access,

564
00:21:43,510 --> 00:21:45,140
it could be that the access is retained.

565
00:21:45,140 --> 00:21:47,420
by the original party and they go and

566
00:21:47,420 --> 00:21:48,710
install a crypto miner.

567
00:21:48,710 --> 00:21:50,150
And then we see something like

568
00:21:50,150 --> 00:21:52,180
guard duty flag or something like that,

569
00:21:52,180 --> 00:21:53,560
or it could be, they sell the access

570
00:21:53,560 --> 00:21:56,020
onto a more sophisticated group

571
00:21:56,020 --> 00:21:57,139
and then things take a turn

572
00:21:57,140 --> 00:21:58,860
and they go down a different path,

573
00:21:58,860 --> 00:22:00,600
but all of these things
are worth bearing in mind

574
00:22:00,600 --> 00:22:02,209
when it comes to the security,

575
00:22:02,210 --> 00:22:04,270
and certainly detection engineering angle,

576
00:22:04,270 --> 00:22:05,870
of what we're dealing with here.

577
00:22:07,540 --> 00:22:09,710
So how do we start then?

578
00:22:09,710 --> 00:22:10,980
Well, I think we've
already mentioned this,

579
00:22:10,980 --> 00:22:13,240
but this idea of threat
modeling your environment,

580
00:22:13,240 --> 00:22:15,340
identify the attack paths.

581
00:22:15,340 --> 00:22:17,071
And we've already said
there's a few things

582
00:22:17,071 --> 00:22:18,322
to use as inputs to this,

583
00:22:18,322 --> 00:22:20,790
that'd be offensive
research rescind from guys

584
00:22:20,790 --> 00:22:22,240
who've already mentioned.

585
00:22:22,240 --> 00:22:25,260
The attack matrix as a way of kind of

586
00:22:25,260 --> 00:22:26,823
narrowing your view there,

587
00:22:26,823 --> 00:22:29,810
it's gonna focus on a
few things in particular.

588
00:22:29,810 --> 00:22:30,643
But then also, as Nick said,

589
00:22:30,643 --> 00:22:32,780
the kind of the critical flows here,

590
00:22:32,780 --> 00:22:34,450
like what is business
critical information?

591
00:22:34,450 --> 00:22:36,880
What is business critical functionality?

592
00:22:36,880 --> 00:22:38,630
Consider the attacker objectives,

593
00:22:38,630 --> 00:22:40,510
consider the starting points,

594
00:22:40,510 --> 00:22:42,370
what are the threat
agents that you arrive at

595
00:22:42,370 --> 00:22:43,780
with this threat model?

596
00:22:43,780 --> 00:22:46,510
And then from there
prioritize the attack paths.

597
00:22:46,510 --> 00:22:48,030
If there's something there that's like,

598
00:22:48,030 --> 00:22:49,580
this is our kind of black Swan event,

599
00:22:49,580 --> 00:22:50,500
if this happens

600
00:22:51,418 --> 00:22:52,979
this is game over kind of

601
00:22:52,980 --> 00:22:55,160
turn the lights up on
the way out type stuff.

602
00:22:55,160 --> 00:22:56,810
That is where we need to be spending our,

603
00:22:56,810 --> 00:22:58,970
at least in the first instance
where we spend our time

604
00:22:58,970 --> 00:23:00,730
and we put our focus into.

605
00:23:00,730 --> 00:23:03,840
So, pick those paths,
prioritize those paths,

606
00:23:03,840 --> 00:23:05,149
and then start to deconstruct.

607
00:23:05,150 --> 00:23:07,330
Understand the TTPs,

608
00:23:07,330 --> 00:23:09,570
the tactics and
techniques, the procedures,

609
00:23:09,570 --> 00:23:11,429
and that those attack
paths could consistent of,

610
00:23:11,430 --> 00:23:14,060
and, just as Nick, as illustrated there,

611
00:23:14,060 --> 00:23:15,800
we can look at the log sources that are

612
00:23:15,800 --> 00:23:18,639
at our disposal for detecting those things

613
00:23:18,640 --> 00:23:20,233
and verifying but that's the laboratory

614
00:23:20,233 --> 00:23:22,713
is indeed available to our defenders.

615
00:23:23,600 --> 00:23:25,639
And then lastly,

616
00:23:25,640 --> 00:23:26,900
execute this attack eruptions.

617
00:23:26,900 --> 00:23:31,300
Obviously do it in a sensible
change controlled environment.

618
00:23:31,300 --> 00:23:33,690
But actually kick the tires on this,

619
00:23:33,690 --> 00:23:35,020
try out the attack eruptions,

620
00:23:35,020 --> 00:23:35,940
do them as kill chains,

621
00:23:35,940 --> 00:23:37,510
even do them as an isolated event,

622
00:23:37,510 --> 00:23:39,290
just do them atomically,

623
00:23:39,290 --> 00:23:41,100
and verify that the detection cases

624
00:23:41,100 --> 00:23:42,959
that you've developed
or that you've rely on,

625
00:23:42,960 --> 00:23:44,490
work as expected.

626
00:23:44,490 --> 00:23:47,190
And I think this slide
says, "How do I start?"

627
00:23:47,190 --> 00:23:49,230
Really, I think this is an operating model

628
00:23:49,230 --> 00:23:50,770
that extends faster.

629
00:23:50,770 --> 00:23:52,300
If you consider this way,

630
00:23:52,300 --> 00:23:53,460
the complexities of this

631
00:23:53,460 --> 00:23:54,840
you've got log sources emanating

632
00:23:54,840 --> 00:23:56,790
from one account over moving into

633
00:23:56,790 --> 00:23:59,409
a centralized security or
a data logging account,

634
00:23:59,410 --> 00:24:01,400
and then making their
way potentially further

635
00:24:01,400 --> 00:24:03,813
into a seam or some analysis kind of pain.

636
00:24:04,720 --> 00:24:07,440
That is complicated and mistakes happen,

637
00:24:07,440 --> 00:24:09,570
they do happen we've seen ourselves.

638
00:24:09,570 --> 00:24:11,580
So actually performing
this on a regular basis

639
00:24:11,580 --> 00:24:14,560
can allow you to validate
that entire pipeline from

640
00:24:14,560 --> 00:24:16,310
the source to the end, to the analyst,

641
00:24:16,310 --> 00:24:18,200
sitting in their hands in the portals,

642
00:24:18,200 --> 00:24:20,490
and allowing them to kind of pivot into

643
00:24:20,490 --> 00:24:22,493
the accounts and
understand what's going on,

644
00:24:23,374 --> 00:24:25,143
to triage the alerts
is a valuable exercise.

645
00:24:26,520 --> 00:24:29,160
So just as Nicole said, where do we start?

646
00:24:29,160 --> 00:24:31,523
Well, potentially at the objective end.

647
00:24:32,492 --> 00:24:33,325
So, if we're talking about

648
00:24:33,325 --> 00:24:35,020
the exfiltration of sensitive data,

649
00:24:35,020 --> 00:24:37,350
if we're talking about even down to the

650
00:24:37,350 --> 00:24:39,810
crypto mining example of in installing,

651
00:24:39,810 --> 00:24:40,740
or kind of deploying

652
00:24:40,740 --> 00:24:43,113
a high-powered DC to for crypto mining,

653
00:24:44,220 --> 00:24:46,330
understand what those events are,

654
00:24:46,330 --> 00:24:47,270
kind of catalog there,

655
00:24:47,270 --> 00:24:49,000
make sure that's all written down.

656
00:24:49,000 --> 00:24:49,850
And then from there

657
00:24:49,850 --> 00:24:51,826
start doing the detection around them,

658
00:24:51,826 --> 00:24:54,160
what are the API calls
on expecting to see here?

659
00:24:54,160 --> 00:24:54,993
What are the log sources

660
00:24:54,993 --> 00:24:56,763
that are gonna contain those API calls?

661
00:24:58,500 --> 00:25:00,440
And we've touched upon this idea that

662
00:25:00,440 --> 00:25:01,529
DevOps principles and kind of,

663
00:25:01,529 --> 00:25:02,638
I guess, what leads there

664
00:25:02,638 --> 00:25:05,459
is the treating everything
as code kind of thing.

665
00:25:05,460 --> 00:25:07,890
And what we can do is,

666
00:25:07,890 --> 00:25:09,130
codify our detections.

667
00:25:09,130 --> 00:25:10,500
And we've seen a few examples of that,

668
00:25:10,500 --> 00:25:13,350
some really popular
examples of that in fact.

669
00:25:13,350 --> 00:25:15,050
Sigma is a great example.

670
00:25:15,050 --> 00:25:17,139
So that's a community project there,

671
00:25:17,140 --> 00:25:20,800
started by Florian Roth
which allows us to codify

672
00:25:20,800 --> 00:25:23,780
detection kind of
concept, detection logic,

673
00:25:23,780 --> 00:25:25,030
and it seemed agnostic, right?

674
00:25:25,030 --> 00:25:26,379
So we can apply that to

675
00:25:26,380 --> 00:25:27,620
whichever seam it is we're using,

676
00:25:27,620 --> 00:25:29,907
wherever our events ultimately
make their way into.

677
00:25:29,907 --> 00:25:31,740
We can use this to not only

678
00:25:31,740 --> 00:25:35,140
kind of bootstrap our
detection capability,

679
00:25:35,140 --> 00:25:37,690
but also to share as well.

680
00:25:37,690 --> 00:25:40,060
So if we have things that
we think are valuable,

681
00:25:40,060 --> 00:25:42,889
not only can we provide
them across the community,

682
00:25:42,890 --> 00:25:45,060
but also from team internally.

683
00:25:45,060 --> 00:25:48,520
If there's a tack or actions
that are meaningful to you,

684
00:25:48,520 --> 00:25:50,120
then it could be that the
other application teams,

685
00:25:50,120 --> 00:25:52,080
the other card engineering
teams that you work with

686
00:25:52,080 --> 00:25:52,913
could use them as well.

687
00:25:52,913 --> 00:25:56,420
And that fostering that
evangelizing, that is key.

688
00:25:56,420 --> 00:25:57,410
And one source,

689
00:25:57,410 --> 00:25:58,540
which I know Nick is going to speak about

690
00:25:58,540 --> 00:26:00,777
in just a moment is Jupiter notebooks.

691
00:26:00,777 --> 00:26:01,890
So I'll leave that to him.

692
00:26:01,890 --> 00:26:03,480
But lastly I mentioned,

693
00:26:03,480 --> 00:26:05,235
John Lovitz talk there on the

694
00:26:05,235 --> 00:26:06,909
hub effication of InfoSec,

695
00:26:06,910 --> 00:26:08,590
which I think encompasses basically

696
00:26:08,590 --> 00:26:09,990
all of the things we're talking about here

697
00:26:09,990 --> 00:26:13,350
from codifying, from
using Jupiter to share,

698
00:26:13,350 --> 00:26:15,840
to correlate, to provide
a kind of process,

699
00:26:15,840 --> 00:26:17,480
and a thought process

700
00:26:17,480 --> 00:26:18,760
for how we go about these things,

701
00:26:18,760 --> 00:26:20,230
and how we share them with each other

702
00:26:20,230 --> 00:26:22,460
internally and externally.

703
00:26:22,460 --> 00:26:24,167
So I'll pass over to Nick then,

704
00:26:24,167 --> 00:26:26,230
for how we can bring
DevOps into detection.

705
00:26:26,230 --> 00:26:28,160
- Absolutely, so we

706
00:26:28,160 --> 00:26:29,140
took a look at what we were doing,

707
00:26:29,140 --> 00:26:31,062
we took a lot of look at a lot of the

708
00:26:31,062 --> 00:26:34,399
DevOps edification efforts

709
00:26:34,400 --> 00:26:36,940
so it's used a horrible buzzword there.

710
00:26:36,940 --> 00:26:39,840
That we're being undertaken
by a few of our clients

711
00:26:39,840 --> 00:26:40,916
and we took a step back

712
00:26:40,916 --> 00:26:42,149
and we built some tooling around this

713
00:26:42,150 --> 00:26:43,700
which we've released a second source.

714
00:26:43,700 --> 00:26:45,343
So Alfie Leonidas place.

715
00:26:46,610 --> 00:26:48,229
What we're talking about here is

716
00:26:48,230 --> 00:26:50,077
an automated attack simulation too.

717
00:26:50,977 --> 00:26:52,580
It's a framework for defining,

718
00:26:52,580 --> 00:26:55,040
executing and validating your detection of

719
00:26:55,040 --> 00:26:57,720
a set of attacker TTPs that you define.

720
00:26:57,720 --> 00:26:59,314
And currently AWS,

721
00:26:59,314 --> 00:27:00,530
and we've got Azure and Google Cloud

722
00:27:00,530 --> 00:27:03,040
on the roadmap, and
everything's defined as code.

723
00:27:03,040 --> 00:27:05,889
All of the detection rules,

724
00:27:05,890 --> 00:27:07,730
all of the attacker actions,

725
00:27:07,730 --> 00:27:10,740
it's all codified and the framework itself

726
00:27:10,740 --> 00:27:13,000
automatically generates
both the serverless API

727
00:27:13,000 --> 00:27:14,557
that at the moment runs in AWS,

728
00:27:14,557 --> 00:27:16,270
but as you're in GCP on the roadmap,

729
00:27:16,270 --> 00:27:18,550
as I say it'll generate Sigma rules,

730
00:27:18,550 --> 00:27:20,169
but it'd be fairly easy to generate.

731
00:27:20,170 --> 00:27:21,030
other rule sets as well

732
00:27:21,030 --> 00:27:23,290
if you were interested in doing so.

733
00:27:23,290 --> 00:27:25,909
And also some documentation.

734
00:27:25,910 --> 00:27:29,140
You can run a multi-
Cloud copy of Leonidas

735
00:27:29,140 --> 00:27:29,980
in a single instance.

736
00:27:29,980 --> 00:27:32,540
So you'd have to deploy
into all the providers,

737
00:27:32,540 --> 00:27:37,230
and it supports user roles
service account impersonation.

738
00:27:37,230 --> 00:27:39,250
So you can do really, quite a lot with it.

739
00:27:39,250 --> 00:27:42,270
Alfie, let's have a look at
the diagram for this then,

740
00:27:42,270 --> 00:27:43,200
how does this break down?

741
00:27:43,200 --> 00:27:45,140
So we have some analysts,

742
00:27:45,140 --> 00:27:46,670
we have our purple teams,

743
00:27:46,670 --> 00:27:48,920
perhaps they define some TTPs.

744
00:27:48,920 --> 00:27:50,150
These are then pushed up into

745
00:27:50,150 --> 00:27:52,800
a continuous integration
deployment pipeline.

746
00:27:52,800 --> 00:27:55,070
So you have a rapid cycle between new TCP

747
00:27:55,070 --> 00:27:57,360
is defined and we're able to simulate it

748
00:27:57,360 --> 00:27:59,387
and that's deployed as
a Lander function then.

749
00:27:59,387 --> 00:28:01,610
And what we do is we execute

750
00:28:01,610 --> 00:28:04,020
a API calls against that Lander function,

751
00:28:04,020 --> 00:28:07,129
and that triggers actions
on target resources

752
00:28:07,130 --> 00:28:08,380
specified by your

753
00:28:09,275 --> 00:28:10,460
API calls that you're making there.

754
00:28:10,460 --> 00:28:11,520
And that then generates logs

755
00:28:11,520 --> 00:28:13,453
which go into your senior account.

756
00:28:14,510 --> 00:28:15,730
And we'll talk through
a little bit more about

757
00:28:15,730 --> 00:28:17,740
how this works specifically
in a second of the demo.

758
00:28:17,740 --> 00:28:19,320
But one thing I did
wanna highlight quickly

759
00:28:19,320 --> 00:28:21,030
is the documentation.

760
00:28:21,030 --> 00:28:23,010
We found documentation generation

761
00:28:23,010 --> 00:28:24,220
to be a very useful thing,

762
00:28:24,220 --> 00:28:26,070
because it allows you to embed

763
00:28:26,070 --> 00:28:27,919
organization specific notes and comments

764
00:28:27,920 --> 00:28:31,630
about these attacker
activity inside the code,

765
00:28:31,630 --> 00:28:33,200
and then automatically generate a nice,

766
00:28:33,200 --> 00:28:34,580
pretty documentation website

767
00:28:34,580 --> 00:28:36,379
that your analysts can use to work out

768
00:28:36,380 --> 00:28:38,970
what's going on when a given alert fires.

769
00:28:38,970 --> 00:28:40,748
So let's demo some of this, I think.

770
00:28:40,748 --> 00:28:42,560
As we mentioned, Leonidas

771
00:28:42,560 --> 00:28:45,780
is a attack simulation framework to

772
00:28:45,780 --> 00:28:48,500
simulate attacker
activity within the Cloud,

773
00:28:48,500 --> 00:28:50,360
in this case, AWS.

774
00:28:50,360 --> 00:28:53,620
So before I launch into
Leonidas and how it works,

775
00:28:53,620 --> 00:28:54,879
I think let's talk through

776
00:28:54,880 --> 00:28:56,850
what a Leonidas case looks like.

777
00:28:56,850 --> 00:28:58,659
So this here is the

778
00:28:58,660 --> 00:29:00,590
enumerate Cloud trials case.

779
00:29:00,590 --> 00:29:01,649
Cloud trial, as we mentioned

780
00:29:01,650 --> 00:29:03,247
is the audit log (indistinct) of AWS,

781
00:29:03,247 --> 00:29:05,260
and so this defines

782
00:29:05,260 --> 00:29:07,320
what metadata were tying it back to

783
00:29:07,320 --> 00:29:08,899
some of the metadata about it,

784
00:29:08,900 --> 00:29:10,850
the permissions needed to execute it,

785
00:29:10,850 --> 00:29:13,350
and then how to execute it in particular.

786
00:29:13,350 --> 00:29:14,429
And you can see down here,

787
00:29:14,430 --> 00:29:16,730
we've got a single line of Python code

788
00:29:16,730 --> 00:29:20,880
that executes the
destroyed trails API call,

789
00:29:20,880 --> 00:29:23,400
using the underlying AWS Python libraries.

790
00:29:23,400 --> 00:29:25,120
And so that single line of code there is

791
00:29:25,120 --> 00:29:26,500
all an analyst needs to write

792
00:29:26,500 --> 00:29:28,810
to make this detection case work,

793
00:29:28,810 --> 00:29:31,179
the framework takes care
of everything else for you,

794
00:29:31,180 --> 00:29:33,090
which means you can give this to,

795
00:29:33,090 --> 00:29:34,370
less experienced analysts,

796
00:29:34,370 --> 00:29:36,560
people without much of an
engineering background,

797
00:29:36,560 --> 00:29:38,460
and they can get going
with it quite quickly.

798
00:29:38,460 --> 00:29:40,410
And we also embed the detection data in.

799
00:29:40,410 --> 00:29:44,130
So here we generate Sigma
rules off the back of

800
00:29:44,130 --> 00:29:47,030
these definitions but we define

801
00:29:47,030 --> 00:29:49,550
the data sources you look for in

802
00:29:49,550 --> 00:29:50,980
event names, event sources,

803
00:29:50,980 --> 00:29:52,233
the kinds of data that you can use then.

804
00:29:52,233 --> 00:29:54,553
so then to build rules in your scene.

805
00:30:02,980 --> 00:30:04,300
So now that we've seen

806
00:30:04,300 --> 00:30:05,850
what of the Leonidas task case looks like

807
00:30:05,850 --> 00:30:06,683
while you're defining it,

808
00:30:06,683 --> 00:30:09,030
let's actually execute
a kill chain with it.

809
00:30:09,030 --> 00:30:13,040
And so typically we interact
with Leonidas using Jupiter.

810
00:30:13,040 --> 00:30:14,540
Jupiter is a data science tool

811
00:30:14,540 --> 00:30:16,399
for those not familiar with it.

812
00:30:16,400 --> 00:30:18,160
But it also works really nicely for

813
00:30:18,160 --> 00:30:21,260
just experiments in with
this and things in Python,

814
00:30:21,260 --> 00:30:22,950
producing some nice graphs, tables,

815
00:30:22,950 --> 00:30:24,890
all of these kinds of things.

816
00:30:24,890 --> 00:30:27,733
So first off let's load it in,

817
00:30:28,630 --> 00:30:29,530
then what we're going to do

818
00:30:29,530 --> 00:30:30,490
is just have a quick look at

819
00:30:30,490 --> 00:30:32,400
the test cases that we
currently got defined.

820
00:30:32,400 --> 00:30:34,080
And this particular instance has about

821
00:30:34,080 --> 00:30:35,899
40 test cases, I think.

822
00:30:35,900 --> 00:30:38,040
And it's a good variety of

823
00:30:38,040 --> 00:30:40,290
persistence, privilege escalation,

824
00:30:40,290 --> 00:30:42,639
and some discovery work there as well.

825
00:30:42,640 --> 00:30:44,600
So we can simulate an entire kill chain

826
00:30:44,600 --> 00:30:46,459
with the test cases we've got defined.

827
00:30:46,460 --> 00:30:47,750
That's what we're going to do.

828
00:30:47,750 --> 00:30:49,780
So first off, let's see who we are,

829
00:30:49,780 --> 00:30:50,953
who we executing as?

830
00:30:53,650 --> 00:30:57,120
Here you can see we are at Leonidas role.

831
00:30:57,120 --> 00:30:59,580
And this is actually the role
that's tied to the function,

832
00:30:59,580 --> 00:31:00,929
the API when it's deployed.

833
00:31:02,800 --> 00:31:04,860
So that comes with a set of permissions

834
00:31:04,860 --> 00:31:06,199
that are defined by the

835
00:31:06,200 --> 00:31:09,100
task cases that you configure,

836
00:31:09,100 --> 00:31:11,570
that you have deployed in this particular

837
00:31:11,570 --> 00:31:12,860
version of the API.

838
00:31:12,860 --> 00:31:16,790
So let's now see if our

839
00:31:16,790 --> 00:31:17,930
actions are being logged,

840
00:31:17,930 --> 00:31:19,650
if there's an audit trail running.

841
00:31:19,650 --> 00:31:21,210
This is the test case
that I showed earlier

842
00:31:21,210 --> 00:31:23,793
that we just compiled in and uploaded.

843
00:31:24,780 --> 00:31:26,420
And here you can see we've got a couple of

844
00:31:26,420 --> 00:31:28,210
Cloud trials configured,

845
00:31:28,210 --> 00:31:30,060
this is useful for an
attacker to understand

846
00:31:30,060 --> 00:31:32,620
what they might do that will get spotted,

847
00:31:32,620 --> 00:31:34,169
what might fly under the radar.

848
00:31:35,380 --> 00:31:37,460
But now that we know that
we are being monitored

849
00:31:37,460 --> 00:31:38,770
work and I'd go for broke anyway.

850
00:31:38,770 --> 00:31:41,020
So we're going to add an IAM user as a

851
00:31:41,020 --> 00:31:43,670
persistence mechanism so
that we can come back later.

852
00:31:44,730 --> 00:31:47,300
So you can see here,
we've now got an RSA user,

853
00:31:47,300 --> 00:31:50,720
IAM user we're now gonna add some API keys

854
00:31:50,720 --> 00:31:52,900
so that we can use these later.

855
00:31:52,900 --> 00:31:54,970
And now that we've got those

856
00:31:54,970 --> 00:31:57,460
API keys saved we can come back

857
00:31:57,460 --> 00:31:58,310
to a little bit, right?

858
00:31:58,310 --> 00:32:00,169
So we're gonna add some permissions to it.

859
00:32:00,170 --> 00:32:01,580
In this case, we're gonna go overboard.

860
00:32:01,580 --> 00:32:04,210
We're gonna give it administrator access.

861
00:32:04,210 --> 00:32:05,950
And so now we can make use

862
00:32:05,950 --> 00:32:08,880
of those credentials that
we previously generated

863
00:32:08,880 --> 00:32:11,550
in order to simulate the
rest of the kill chain,

864
00:32:11,550 --> 00:32:12,740
simulating the attacker,

865
00:32:12,740 --> 00:32:14,050
seeing some more credentials,

866
00:32:14,050 --> 00:32:16,690
or doing some lateral movement,
these kinds of things.

867
00:32:16,690 --> 00:32:18,980
And so what we're doing here is we're

868
00:32:18,980 --> 00:32:21,220
defining a new credential block,

869
00:32:21,220 --> 00:32:23,210
and we're passing that
entirely in Leonidas

870
00:32:23,210 --> 00:32:24,360
as part of the API call

871
00:32:24,360 --> 00:32:27,310
so that Leonidas can use those credentials

872
00:32:27,310 --> 00:32:29,610
to become that user.

873
00:32:29,610 --> 00:32:31,490
So here, then you can see when we run,

874
00:32:31,490 --> 00:32:33,390
get caller identity again,

875
00:32:33,390 --> 00:32:34,850
this time around is coming back as

876
00:32:34,850 --> 00:32:36,709
an IAM user that is called RSI user,

877
00:32:36,710 --> 00:32:38,310
this one that we created earlier.

878
00:32:38,310 --> 00:32:40,790
So we can now use that as well to then

879
00:32:40,790 --> 00:32:42,830
do some sensitive data exfiltration,

880
00:32:42,830 --> 00:32:45,210
we're gonna enumerate some secrets,

881
00:32:45,210 --> 00:32:47,730
and it turns out we've
got a secret configured,

882
00:32:47,730 --> 00:32:50,520
so let's get the value of our secret.

883
00:32:50,520 --> 00:32:52,730
And that's come back we got a

884
00:32:52,730 --> 00:32:55,960
fake API key in there
that we can take away.

885
00:32:55,960 --> 00:32:57,180
So what we've done there is

886
00:32:57,180 --> 00:32:58,770
execute a complete kill chain

887
00:32:58,770 --> 00:33:00,950
from start to finish purely by making.

888
00:33:00,950 --> 00:33:03,807
API calls to the Leonidas web API.

889
00:33:03,807 --> 00:33:06,270
And what that does then

890
00:33:06,270 --> 00:33:07,660
is execute those in the background

891
00:33:07,660 --> 00:33:10,360
using the Lambda function and
returns the results to us.

892
00:33:10,360 --> 00:33:14,389
So we've done a whole kill
chain of initial discovery,

893
00:33:14,390 --> 00:33:16,960
some persistence privilege escalation

894
00:33:16,960 --> 00:33:19,640
by signing new permissions
to that permissions,

895
00:33:19,640 --> 00:33:22,120
to that persistence mechanism, sorry.

896
00:33:22,120 --> 00:33:23,719
Then anymore it's gonna actual

897
00:33:23,720 --> 00:33:25,680
tracing some sensitive data.

898
00:33:25,680 --> 00:33:27,730
Now, we also mentioned that Leonidas

899
00:33:27,730 --> 00:33:30,740
comes with its own audit trail.

900
00:33:30,740 --> 00:33:32,910
It's not going over into CloudWatch,

901
00:33:32,910 --> 00:33:35,360
we can take a look at some
of these from earlier.

902
00:33:36,330 --> 00:33:37,483
So you can see here,

903
00:33:38,460 --> 00:33:41,540
we've got the first
get caught or identity,

904
00:33:41,540 --> 00:33:44,560
then enumerate cloud trials at the user,

905
00:33:44,560 --> 00:33:46,203
of the API key to the user.

906
00:33:47,500 --> 00:33:50,400
And the audit logs that Leonidas creates

907
00:33:50,400 --> 00:33:53,520
gives you the data from
the request itself,

908
00:33:53,520 --> 00:33:55,870
but also the response
and you can use this then

909
00:33:55,870 --> 00:33:59,120
to compare the requests mightily Leonidas,

910
00:33:59,120 --> 00:34:01,199
against the logs you're
seeing in your seen,

911
00:34:01,200 --> 00:34:03,740
and make sure that the right signals,

912
00:34:03,740 --> 00:34:07,310
the right use cases are
triggering in the right places.

913
00:34:07,310 --> 00:34:09,190
And so you can use this as well

914
00:34:09,190 --> 00:34:11,290
to simulate testing across environments,

915
00:34:11,290 --> 00:34:12,900
on premise up into the Clouds,

916
00:34:12,900 --> 00:34:15,889
and combined it with
things like Mitre CALDERA,

917
00:34:15,889 --> 00:34:18,279
to get complete coverage
across your whole estate.

918
00:34:18,280 --> 00:34:19,560
That's another really powerful story

919
00:34:19,560 --> 00:34:21,290
that is it's still fairly early days

920
00:34:21,290 --> 00:34:22,310
for experimenting with it,

921
00:34:22,310 --> 00:34:24,690
but I think there's a fair amount there.

922
00:34:24,690 --> 00:34:26,770
And we can use it also as part of

923
00:34:28,054 --> 00:34:29,429
the idea of continuous
detection validation.

924
00:34:29,429 --> 00:34:31,080
As I mentioned the demo,

925
00:34:31,080 --> 00:34:33,199
the idea that we check new rules in

926
00:34:33,199 --> 00:34:35,259
those get run through the CICD pipeline

927
00:34:35,260 --> 00:34:36,429
deployed to the same,

928
00:34:36,429 --> 00:34:37,949
and we use Leonidas then

929
00:34:37,949 --> 00:34:40,022
to verify that this all works correctly.

930
00:34:41,101 --> 00:34:42,100
And that's quite a powerful story

931
00:34:42,100 --> 00:34:43,620
that again we've been experimenting with

932
00:34:43,620 --> 00:34:46,880
and has really made a significant impact

933
00:34:46,880 --> 00:34:48,139
on a couple of places.

934
00:34:48,139 --> 00:34:48,973
- Great.

935
00:34:48,973 --> 00:34:50,620
So in conclusion then,

936
00:34:50,620 --> 00:34:52,560
I think there's a few
things to draw out really.

937
00:34:52,560 --> 00:34:54,420
The first is what we're talking about here

938
00:34:54,420 --> 00:34:57,690
isn't necessarily a solution
but more of a process,

939
00:34:57,690 --> 00:34:58,870
the workflow to go through

940
00:34:58,870 --> 00:35:00,870
and something that can
hopefully be scaled out

941
00:35:00,870 --> 00:35:03,160
to your various application
and infrastructure teams.

942
00:35:03,160 --> 00:35:05,040
And as your Cloud environments change,

943
00:35:05,040 --> 00:35:05,933
just as Nick has said,

944
00:35:05,933 --> 00:35:07,420
your detection will change too,

945
00:35:07,420 --> 00:35:09,540
that the log sources you need.

946
00:35:09,540 --> 00:35:11,350
The attacker options that
you've been able to simulate

947
00:35:11,350 --> 00:35:13,440
in the are relevant will change too.

948
00:35:13,440 --> 00:35:16,100
Indeed, as we've said,
many times context is key,

949
00:35:16,100 --> 00:35:18,509
understand better than anyone,

950
00:35:18,510 --> 00:35:20,217
what your environments
are supposed to be doing,

951
00:35:20,217 --> 00:35:21,630
and what they shouldn't be doing,

952
00:35:21,630 --> 00:35:23,550
and you can use that to your advantage.

953
00:35:23,550 --> 00:35:24,480
And finally,

954
00:35:24,480 --> 00:35:26,790
hopefully with a tool
set that we've seen here,

955
00:35:26,790 --> 00:35:28,970
you can codify and show your use cases

956
00:35:28,970 --> 00:35:31,430
and indeed your attacks
to aid knowledge sharing

957
00:35:31,430 --> 00:35:34,482
internally and with the
wider community as well.

958
00:35:35,320 --> 00:35:37,120
So applying what you've
learned here today,

959
00:35:37,120 --> 00:35:40,089
then, well, I think
next week we're talking,

960
00:35:40,090 --> 00:35:42,910
go away, identify the existing policies

961
00:35:42,910 --> 00:35:43,859
when it comes to logging.

962
00:35:43,860 --> 00:35:45,990
and confirm that aggregation,

963
00:35:45,990 --> 00:35:47,189
rather than we're logging,

964
00:35:47,190 --> 00:35:48,900
but they're just going to necessary bucket

965
00:35:48,900 --> 00:35:50,160
and that's the end of it.

966
00:35:50,160 --> 00:35:51,529
Are we aggregating those logs?

967
00:35:51,530 --> 00:35:52,760
Do our responders,

968
00:35:52,760 --> 00:35:54,420
do our analyst have somewhere
they can actually go?

969
00:35:54,420 --> 00:35:55,270
And see them all.

970
00:35:56,120 --> 00:35:58,980
And similarly, are you kind of
making use of the quick wins,

971
00:35:58,980 --> 00:35:59,980
the likes of guards shooters?

972
00:35:59,980 --> 00:36:02,950
We talked about the
caters quite effectively.

973
00:36:02,950 --> 00:36:05,129
Not only to, to the base of that pyramid,

974
00:36:05,130 --> 00:36:06,870
but further up when it comes to

975
00:36:06,870 --> 00:36:08,500
the known buds where they exist,

976
00:36:08,500 --> 00:36:10,450
are they being kind of catered for?

977
00:36:10,450 --> 00:36:11,629
And then moving forward a lot,

978
00:36:11,630 --> 00:36:13,490
the next kind of three months,

979
00:36:13,490 --> 00:36:15,330
document the Cloud
workloads that you've got,

980
00:36:15,330 --> 00:36:17,840
what services are there
any commonality there?

981
00:36:17,840 --> 00:36:19,600
And then take an example work load,

982
00:36:19,600 --> 00:36:20,920
or perform what we've described here,

983
00:36:20,920 --> 00:36:22,190
their threat modeling exercise,

984
00:36:22,190 --> 00:36:24,330
identify the attack
parts, deconstruct them,

985
00:36:24,330 --> 00:36:26,700
get the TTPs, execute them,

986
00:36:26,700 --> 00:36:28,040
and understand kind of where your

987
00:36:28,040 --> 00:36:31,823
detection capabilitY is
really at effectively.

988
00:36:33,160 --> 00:36:35,170
And then in the next six months,

989
00:36:35,170 --> 00:36:37,370
ensure your defenders have got the access.

990
00:36:37,370 --> 00:36:38,870
We've spoken about this throughout really,

991
00:36:38,870 --> 00:36:40,759
but making sure that the
guys on the front line,

992
00:36:40,760 --> 00:36:42,040
the analysts that are gonna be picking up.

993
00:36:42,040 --> 00:36:43,480
these tickets and these alerts,

994
00:36:43,480 --> 00:36:45,660
and in building the
alerts in the first place,

995
00:36:45,660 --> 00:36:47,430
they're familiar with card attacks,

996
00:36:47,430 --> 00:36:48,669
they understand how to triage.

997
00:36:48,670 --> 00:36:49,840
They've got the processes,

998
00:36:49,840 --> 00:36:52,040
and the actual technology
to triage as well.

999
00:36:53,100 --> 00:36:54,890
And then actually just instill this

1000
00:36:54,890 --> 00:36:56,040
in your development cycles.

1001
00:36:56,040 --> 00:36:59,070
As we said, it's never
too early to threat model,

1002
00:36:59,070 --> 00:37:01,410
to start kicking off that
detection engineering process,

1003
00:37:01,410 --> 00:37:04,134
to share this information and
to capture this information,

1004
00:37:04,134 --> 00:37:06,570
and then hopefully all this goes well,

1005
00:37:06,570 --> 00:37:08,510
and you could evangelize this approach,

1006
00:37:08,510 --> 00:37:10,830
across your various teams.

1007
00:37:10,830 --> 00:37:12,330
And then just as Nick said there,

1008
00:37:12,330 --> 00:37:14,596
Leonidas is available on the SEQR labs,

1009
00:37:14,597 --> 00:37:15,900
GitHub it's available now,

1010
00:37:15,900 --> 00:37:17,360
it's available for free.

1011
00:37:17,360 --> 00:37:19,360
So give it a go and let
us know what you think.

1012
00:37:19,360 --> 00:37:20,630
And that's the end of our session.

1013
00:37:20,630 --> 00:37:21,970
So thanks for joining us today.

1014
00:37:21,970 --> 00:37:23,830
And hopefully there's some
questions in the Q&A for us.

1015
00:37:23,830 --> 00:37:24,663
Thank you.

