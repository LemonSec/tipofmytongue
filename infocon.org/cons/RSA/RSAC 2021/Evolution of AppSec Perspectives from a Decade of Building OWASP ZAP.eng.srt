1
00:00:01,110 --> 00:00:03,300
- Hello, my name is Simon Bennetts.

2
00:00:03,300 --> 00:00:07,070
I'm the Zed Attack Proxy
Founder and Project Lead.

3
00:00:07,070 --> 00:00:09,860
And today I'm gonna be
talking about my perspectives

4
00:00:09,860 --> 00:00:12,043
from a decade of building ZAP.

5
00:00:14,130 --> 00:00:15,890
So I'm gonna start with...

6
00:00:17,440 --> 00:00:19,280
Just to quickly run through
what we're gonna talk about,

7
00:00:19,280 --> 00:00:20,520
I'm gonna start by explaining

8
00:00:20,520 --> 00:00:23,630
what ZAP is for those of you
who've never heard of it.

9
00:00:23,630 --> 00:00:25,043
I'm gonna give a bit of the ZAP history

10
00:00:25,043 --> 00:00:27,759
because I think that does explain

11
00:00:27,760 --> 00:00:31,940
how it got to where it is
now and part of my journey.

12
00:00:31,940 --> 00:00:32,820
And then I'm gonna talk

13
00:00:32,820 --> 00:00:36,990
about running a successful
open-source project,

14
00:00:36,990 --> 00:00:39,110
which hopefully, ZAP is considered.

15
00:00:39,110 --> 00:00:43,230
I'll talk a bit about the
application security changes

16
00:00:43,230 --> 00:00:46,629
I've seen in the last 10
years, where we stand today,

17
00:00:46,630 --> 00:00:49,860
and a bit about the future
of application security.

18
00:00:49,860 --> 00:00:52,019
Although, I kind of hate
looking into crystal balls,

19
00:00:52,020 --> 00:00:55,050
so I'm not gonna spend
too much time on that.

20
00:00:55,050 --> 00:00:57,050
And I'll finish off with some takeaways.

21
00:00:59,250 --> 00:01:01,910
So I will start with what is ZAP.

22
00:01:01,910 --> 00:01:03,449
And quite simply,

23
00:01:03,450 --> 00:01:07,350
it's a tool for finding
vulnerabilities in web applications.

24
00:01:07,350 --> 00:01:10,573
Now, if you've come from
the network security world,

25
00:01:11,580 --> 00:01:13,310
you'll kind of think of scanners

26
00:01:13,310 --> 00:01:17,290
which targets known vulnerabilities
in known applications.

27
00:01:17,290 --> 00:01:20,130
And ZAP is kind of a
different kind of beast.

28
00:01:20,130 --> 00:01:24,089
ZAP trains to find custom
or new vulnerabilities

29
00:01:24,090 --> 00:01:25,860
in custom applications.

30
00:01:25,860 --> 00:01:28,150
So these are applications that typically

31
00:01:28,150 --> 00:01:29,710
no one has ever seen before.

32
00:01:29,710 --> 00:01:33,220
So there are no CVEs,
there's nothing to go on.

33
00:01:33,220 --> 00:01:36,539
So what ZAP does, ZAP attacks applications

34
00:01:36,540 --> 00:01:37,900
in a very similar way

35
00:01:37,900 --> 00:01:41,143
to a manual penetration tester
or a malicious attacker.

36
00:01:42,710 --> 00:01:45,550
It is, like all open source tools,

37
00:01:45,550 --> 00:01:47,473
completely free and open source,

38
00:01:48,310 --> 00:01:51,250
and it's a community project.

39
00:01:51,250 --> 00:01:52,860
That was something that
was very important to me

40
00:01:52,860 --> 00:01:55,763
from the start and I'll explain why soon.

41
00:01:56,600 --> 00:01:58,179
So we try to make sure

42
00:01:58,180 --> 00:02:01,390
that it's very welcoming to
anybody who wants to join ZAP.

43
00:02:01,390 --> 00:02:06,390
And it is, we hope, ideal for
both newcomers and experts.

44
00:02:07,650 --> 00:02:09,203
And this is something we have found.

45
00:02:09,203 --> 00:02:11,780
When I started off, it was
very much aimed at people

46
00:02:11,780 --> 00:02:13,360
new to security.

47
00:02:13,360 --> 00:02:16,070
We found a lot of security
experts using it as well.

48
00:02:16,070 --> 00:02:18,730
And in some ways, it's made a
bit of a rod for our own back

49
00:02:18,730 --> 00:02:20,959
because we have to cope with, on one hand,

50
00:02:20,960 --> 00:02:22,770
people who know nothing about security,

51
00:02:22,770 --> 00:02:25,540
right up to people who
are very experienced,

52
00:02:25,540 --> 00:02:27,140
but that's just the way it goes.

53
00:02:28,440 --> 00:02:30,950
But ZAP is particularly
good for automation,

54
00:02:30,950 --> 00:02:34,423
and that is one area where
it's being used very widely.

55
00:02:35,400 --> 00:02:36,940
And indeed, we believe

56
00:02:36,940 --> 00:02:38,750
it is the world's most frequently used

57
00:02:38,750 --> 00:02:40,143
web application scanner.

58
00:02:42,970 --> 00:02:46,150
So a little bit about ZAP history.

59
00:02:46,150 --> 00:02:49,000
So in 2009,

60
00:02:49,000 --> 00:02:50,970
I was a team lead,

61
00:02:50,970 --> 00:02:53,280
I was leading a small
Java development team

62
00:02:53,280 --> 00:02:56,020
which was developing an online service,

63
00:02:56,020 --> 00:02:58,360
a service that was
considered security critical

64
00:02:58,360 --> 00:03:00,790
to the company that I worked for.

65
00:03:00,790 --> 00:03:02,150
Now, at that stage,

66
00:03:02,150 --> 00:03:05,400
I'd had actually had no
security training whatsoever.

67
00:03:05,400 --> 00:03:08,010
But we were aware that
security was important,

68
00:03:08,010 --> 00:03:10,459
so we did our best to
make sure it was secure,

69
00:03:10,460 --> 00:03:13,060
and I arranged a penetration test.

70
00:03:13,060 --> 00:03:16,360
And the whole idea, really,
of that was to confirm

71
00:03:16,360 --> 00:03:18,213
that we'd done all the right things.

72
00:03:19,700 --> 00:03:22,162
That didn't really work out as planned.

73
00:03:23,200 --> 00:03:27,570
We got a couple of guys in
to pen test the service,

74
00:03:27,570 --> 00:03:30,489
I put them in a room, and
I spent some time with them

75
00:03:30,490 --> 00:03:32,800
explaining exactly how the service worked,

76
00:03:32,800 --> 00:03:34,590
gave them all the information

77
00:03:34,590 --> 00:03:36,590
because I wanted to make sure
that they had the best chance

78
00:03:36,590 --> 00:03:39,300
of finding any problems
that there could have been.

79
00:03:39,300 --> 00:03:42,120
So I explained everything
and left them to it.

80
00:03:42,120 --> 00:03:44,400
And then just went back after one hour

81
00:03:44,400 --> 00:03:45,980
just to see how they were doing,

82
00:03:45,980 --> 00:03:48,262
and see, you now, if they needed any help.

83
00:03:49,300 --> 00:03:51,670
I walked into the room
only to find one of them

84
00:03:51,670 --> 00:03:55,269
was actually logged into
the administration console

85
00:03:55,270 --> 00:03:57,570
for the service with my credentials.

86
00:03:57,570 --> 00:03:59,480
They had essentially gained

87
00:03:59,480 --> 00:04:02,630
superuser access within one hour.

88
00:04:02,630 --> 00:04:04,970
And, you know, they didn't
have those credentials.

89
00:04:04,970 --> 00:04:06,433
That was not the idea.

90
00:04:07,810 --> 00:04:10,480
So this was a bit of a shock.

91
00:04:10,480 --> 00:04:13,970
In fact, in this particular
case, it wasn't a vulnerability

92
00:04:13,970 --> 00:04:15,810
with the service we developed,

93
00:04:15,810 --> 00:04:16,920
they had actually cracked

94
00:04:16,920 --> 00:04:19,459
the company's single sign-on system,

95
00:04:19,459 --> 00:04:22,330
the single sign-on system
for the whole company.

96
00:04:22,330 --> 00:04:24,280
Technically, this was out of scope,

97
00:04:24,280 --> 00:04:27,080
but we were really pleased
that they found that problem.

98
00:04:28,670 --> 00:04:30,420
But even though that
wasn't a vulnerability

99
00:04:30,420 --> 00:04:32,090
in the service we had developed,

100
00:04:32,090 --> 00:04:34,000
they still found plenty of other things.

101
00:04:34,000 --> 00:04:35,380
And they found vulnerabilities

102
00:04:35,380 --> 00:04:38,780
I'd never even heard of like
cross-site request forgery

103
00:04:38,780 --> 00:04:41,250
and things like a cross-site
scripting vulnerability

104
00:04:41,250 --> 00:04:42,450
slipped through as well.

105
00:04:43,890 --> 00:04:47,630
It felt at the time a bit of a car crash.

106
00:04:47,630 --> 00:04:52,630
I've since learned that, you
know, as security reports go,

107
00:04:53,290 --> 00:04:54,220
it wasn't that bad,

108
00:04:54,220 --> 00:04:56,740
and I've actually delivered
worse ones myself,

109
00:04:56,740 --> 00:04:58,920
but at the time, it felt really bad.

110
00:04:58,920 --> 00:05:02,010
And I decided that I
needed to do something.

111
00:05:02,010 --> 00:05:04,280
And upon reflection, I decided

112
00:05:04,280 --> 00:05:07,003
that I really wanted to do three things.

113
00:05:07,940 --> 00:05:10,750
I wanted to learn more about web security.

114
00:05:10,750 --> 00:05:13,443
And for me, this wasn't really...

115
00:05:13,443 --> 00:05:16,060
I wasn't just focusing on web security,

116
00:05:16,060 --> 00:05:17,980
I just saw this as another aspect

117
00:05:17,980 --> 00:05:20,380
of making a robust system.

118
00:05:20,380 --> 00:05:23,610
So it's similar, in my mind,
to performance, scalability,

119
00:05:23,610 --> 00:05:26,397
usability, supportability,
all these good things.

120
00:05:26,397 --> 00:05:29,030
And I must admit, I still
think of it in those terms.

121
00:05:29,030 --> 00:05:30,669
You know, security is not an absolute.

122
00:05:30,670 --> 00:05:33,210
Having a perfectly
secure service is no good

123
00:05:33,210 --> 00:05:34,483
if no one can use it.

124
00:05:36,360 --> 00:05:39,000
But I also wanted to find a tool

125
00:05:39,000 --> 00:05:41,260
which I could automate
some security tests,

126
00:05:41,260 --> 00:05:43,219
things like the cross-site
scripting vulnerability

127
00:05:43,220 --> 00:05:44,840
that got through and missing headers.

128
00:05:44,840 --> 00:05:47,460
I was sure that all of those
things could have been found

129
00:05:47,460 --> 00:05:49,260
by an automated tool.

130
00:05:49,260 --> 00:05:50,960
And, you know, I wanted to find a tool

131
00:05:50,960 --> 00:05:54,462
that I could run against
my software every night.

132
00:05:56,420 --> 00:05:58,450
And I also decided at that time

133
00:05:58,450 --> 00:06:02,180
that I've actually wanted to
join an open-source project.

134
00:06:02,180 --> 00:06:04,800
And I thought, well, I
could actually combine

135
00:06:04,800 --> 00:06:05,633
these three things.

136
00:06:05,633 --> 00:06:09,113
I could find a friendly, open
source web security tool,

137
00:06:10,020 --> 00:06:13,150
and then I could use that to
learn more about web security,

138
00:06:13,150 --> 00:06:15,750
and I could use that to
automate the security tests.

139
00:06:17,380 --> 00:06:21,533
So it actually didn't turn out
quite as easy as I thought.

140
00:06:22,880 --> 00:06:25,880
At the time, there were
no actively maintained

141
00:06:25,880 --> 00:06:28,140
open source web security projects.

142
00:06:28,140 --> 00:06:31,652
This kind of surprise me, and
I must admit, it felt wrong.

143
00:06:32,640 --> 00:06:35,229
But there were some ones
which were abandoned,

144
00:06:35,230 --> 00:06:37,395
tools like Paros and WebScarab.

145
00:06:37,395 --> 00:06:40,070
And both of those happened
to be written in Java,

146
00:06:40,070 --> 00:06:41,300
I was a Java developer,

147
00:06:41,300 --> 00:06:42,980
so I started looking at the source code

148
00:06:42,980 --> 00:06:44,430
and playing around with them.

149
00:06:45,610 --> 00:06:49,950
I also started learning the OWASP Top 10

150
00:06:49,950 --> 00:06:51,440
and I completely realized

151
00:06:51,440 --> 00:06:53,660
this was not the be-all and end-all,

152
00:06:53,660 --> 00:06:56,180
but it was really a good
place to start for me,

153
00:06:56,180 --> 00:06:57,013
you know, I wanted to learn

154
00:06:57,013 --> 00:06:59,820
about the most commonly
found vulnerabilities,

155
00:06:59,820 --> 00:07:02,090
and I started using some
of these old security tools

156
00:07:02,090 --> 00:07:04,390
to play around with these
kinds of vulnerabilities

157
00:07:04,390 --> 00:07:06,300
in both my own applications

158
00:07:06,300 --> 00:07:08,700
and in some of the
deliberately vulnerable ones.

159
00:07:10,446 --> 00:07:15,410
And as I learnt, I decided
that I thought it was important

160
00:07:15,410 --> 00:07:17,620
to start teaching some of the other people

161
00:07:17,620 --> 00:07:19,310
at the same company as me,

162
00:07:19,310 --> 00:07:22,490
particularly developers
and QA functional testers.

163
00:07:22,490 --> 00:07:23,540
I thought it was really important

164
00:07:23,540 --> 00:07:26,070
that they learn some of the
things that I was learning.

165
00:07:26,070 --> 00:07:28,373
And I actually found it
a great way to make sure

166
00:07:28,373 --> 00:07:31,030
that I actually understood
things well enough.

167
00:07:31,030 --> 00:07:31,890
You don't realize,

168
00:07:31,890 --> 00:07:35,960
you know, how well or little
you understand something

169
00:07:35,960 --> 00:07:38,210
until you try to explain
it to somebody else.

170
00:07:39,520 --> 00:07:42,280
So I started giving training courses

171
00:07:42,280 --> 00:07:44,640
and the first question
at the end was always,

172
00:07:44,640 --> 00:07:46,900
what tools should we use?

173
00:07:46,900 --> 00:07:49,810
So I decided I want to have
another look at the options

174
00:07:49,810 --> 00:07:52,960
and I decided, you know, had I thought

175
00:07:52,960 --> 00:07:56,270
about what are my requirements?

176
00:07:56,270 --> 00:07:58,729
And I decided I wanted
something that was free.

177
00:07:58,730 --> 00:08:01,610
At that time, I didn't
think I would be able

178
00:08:01,610 --> 00:08:03,670
to actually convince the
company where I worked

179
00:08:03,670 --> 00:08:05,790
to pay lots of money
for all the developers

180
00:08:05,790 --> 00:08:09,760
and functional testers
to use a security tool.

181
00:08:09,760 --> 00:08:11,852
I wanted it open source.

182
00:08:11,852 --> 00:08:13,020
I wanted it cross platform.

183
00:08:13,020 --> 00:08:14,830
There were a lot of
windows developers there,

184
00:08:14,830 --> 00:08:17,890
I was developing on Linux,
and I don't get the whole idea

185
00:08:17,890 --> 00:08:21,370
of tools only run on one platform anyway.

186
00:08:21,370 --> 00:08:22,930
I wanted it to be easy to use

187
00:08:22,930 --> 00:08:25,050
and wanted it to be maintained.

188
00:08:25,050 --> 00:08:27,180
And I looked at the options out there

189
00:08:27,180 --> 00:08:31,130
and I decided the closest
thing to that was Paros,

190
00:08:31,130 --> 00:08:32,880
or rather, the version of Paros

191
00:08:32,880 --> 00:08:35,130
that I was hacking around with.

192
00:08:35,130 --> 00:08:40,130
And so I decided to bite
the bullet and I raised ZAP.

193
00:08:40,520 --> 00:08:45,520
So this was in 2010 and this
is the email that I sent.

194
00:08:46,770 --> 00:08:49,760
And basically, a couple of things

195
00:08:49,760 --> 00:08:52,270
I want to draw your attention to.

196
00:08:52,270 --> 00:08:55,829
First, is that, you know,
really from the start,

197
00:08:55,830 --> 00:08:58,147
I intended it as a tool for developers

198
00:08:58,147 --> 00:09:00,380
and QA functional testers.

199
00:09:00,380 --> 00:09:01,560
I didn't really think I'd...

200
00:09:01,560 --> 00:09:04,619
I didn't have the cheek
to aim it as a tool

201
00:09:04,620 --> 00:09:06,100
for security people,

202
00:09:06,100 --> 00:09:09,750
although I did say that, you
know, they may find it useful.

203
00:09:09,750 --> 00:09:11,610
And secondly, I made it very clear

204
00:09:11,610 --> 00:09:13,130
that it was completely free.

205
00:09:13,130 --> 00:09:15,020
There wouldn't be a pro version

206
00:09:15,020 --> 00:09:17,199
and you know, there never would be.

207
00:09:17,200 --> 00:09:18,106
And that's been something

208
00:09:18,106 --> 00:09:19,710
that I think is very important to me,

209
00:09:19,710 --> 00:09:22,743
because I think there is a
real need for a tool like this.

210
00:09:25,210 --> 00:09:28,670
So I actually had a look
and try to find a screenshot

211
00:09:28,670 --> 00:09:31,099
from the very first version of ZAP,

212
00:09:31,100 --> 00:09:33,440
and I couldn't actually find one.

213
00:09:33,440 --> 00:09:37,280
We did find one from ZAP 1.2.0,

214
00:09:37,280 --> 00:09:40,089
but I do know that in ZAP 1.1.0,

215
00:09:40,090 --> 00:09:42,830
we added the active scan,
spider, brute force,

216
00:09:42,830 --> 00:09:44,340
and port scan taps.

217
00:09:44,340 --> 00:09:46,970
So my quick attempt to
attacking a screenshot

218
00:09:46,970 --> 00:09:50,350
from ZAP 1.0.0 is this.

219
00:09:50,350 --> 00:09:53,350
So, you know, it does look
quite straightforward,

220
00:09:53,350 --> 00:09:54,500
you know, quite simple.

221
00:09:55,900 --> 00:09:57,560
Actually, this is a screenshot

222
00:09:57,560 --> 00:10:01,579
from one of the most recent
weekly releases of ZAP.

223
00:10:01,580 --> 00:10:04,363
And this is not what you
will see when you start ZAP.

224
00:10:05,510 --> 00:10:08,510
But what I've done is I've
installed all of the add-ons

225
00:10:08,510 --> 00:10:10,360
and I've actually, by default,

226
00:10:10,360 --> 00:10:11,540
most of the tabs will be hidden

227
00:10:11,540 --> 00:10:13,093
but I've made them all visible.

228
00:10:13,970 --> 00:10:15,750
So you can see there's a lot going on.

229
00:10:15,750 --> 00:10:17,110
There are actually many more options,

230
00:10:17,110 --> 00:10:19,340
there's loads of right-click options.

231
00:10:19,340 --> 00:10:21,150
So you can see this app is now quite a big

232
00:10:21,150 --> 00:10:22,333
and complex project.

233
00:10:24,210 --> 00:10:25,043
What I want to do now

234
00:10:25,043 --> 00:10:29,380
is kind of talk about some
of the firsts and innovations

235
00:10:29,380 --> 00:10:31,990
that we brought as part of ZAP.

236
00:10:31,990 --> 00:10:34,260
I think many people or some
people still seem to think

237
00:10:34,260 --> 00:10:37,610
that open-source projects
just copy commercial ones.

238
00:10:37,610 --> 00:10:39,890
But I think in terms of web security,

239
00:10:39,890 --> 00:10:42,670
ZAP has led the way in many areas.

240
00:10:42,670 --> 00:10:45,650
So in 2011,

241
00:10:45,650 --> 00:10:48,640
I added daemon mode and the API.

242
00:10:48,640 --> 00:10:50,800
Automation was a very early goal for me.

243
00:10:50,800 --> 00:10:52,479
I couldn't get it in the first version,

244
00:10:52,480 --> 00:10:55,100
but it's something I wanted
to make sure it was available.

245
00:10:55,100 --> 00:10:57,760
And so ZAP has been built for automation

246
00:10:57,760 --> 00:10:59,193
from an early stage.

247
00:11:00,730 --> 00:11:01,563
Something else we did,

248
00:11:01,563 --> 00:11:06,563
I actually started
internationalizing ZAP very early on.

249
00:11:06,610 --> 00:11:10,280
And in 2011, we actually had
full internationalization done.

250
00:11:10,280 --> 00:11:12,502
And I think this is
actually very important.

251
00:11:13,570 --> 00:11:16,100
I don't understand why
so many security tools

252
00:11:16,100 --> 00:11:18,500
and so many commercial
ones are still English

253
00:11:18,500 --> 00:11:19,800
or American only.

254
00:11:19,800 --> 00:11:22,260
I think this is wrong,

255
00:11:22,260 --> 00:11:24,920
and I'm actually very proud
that ZAP is being translated

256
00:11:24,920 --> 00:11:26,973
into over 30 different languages.

257
00:11:29,130 --> 00:11:32,260
In 2012, we started doing weekly releases

258
00:11:32,260 --> 00:11:33,700
and we've kept up doing that.

259
00:11:33,700 --> 00:11:36,810
So every week, there is
a new version of ZAP.

260
00:11:36,810 --> 00:11:41,010
And if there are significant problems,

261
00:11:41,010 --> 00:11:43,140
we do re-release the weekly,

262
00:11:43,140 --> 00:11:45,343
but that's only happened a few times.

263
00:11:46,310 --> 00:11:49,380
And occasionally, we
don't do weekly releases

264
00:11:49,380 --> 00:11:50,970
maybe over Christmas or something,

265
00:11:50,970 --> 00:11:54,550
but it's been pretty much
every week, since 2012,

266
00:11:54,550 --> 00:11:55,992
we've had a new release.

267
00:11:57,490 --> 00:12:00,493
Then in 2013, loads of things happened.

268
00:12:01,370 --> 00:12:03,390
WebSockets support was added

269
00:12:03,390 --> 00:12:06,569
and this was actually part
of Google Summer of Code.

270
00:12:06,570 --> 00:12:10,080
And ZAP was one of the
first security tools

271
00:12:10,080 --> 00:12:11,220
to have WebSocket support

272
00:12:11,220 --> 00:12:14,520
and probably still has the
best support out there.

273
00:12:14,520 --> 00:12:17,970
The Ajax Spider, we found
that the traditional spider

274
00:12:17,970 --> 00:12:22,660
didn't cope with modern
web applications very well.

275
00:12:22,660 --> 00:12:25,579
So the Ajax Spider now
actually launches browsers

276
00:12:25,580 --> 00:12:28,370
and clicks on things
controlled by Selenium.

277
00:12:28,370 --> 00:12:29,720
And that was in 2013,

278
00:12:29,720 --> 00:12:32,593
way before many other
similar security tools.

279
00:12:33,750 --> 00:12:38,240
We launched the online
add-on marketplace in 2013.

280
00:12:38,240 --> 00:12:40,630
Of course, all of these
add-ons are completely free

281
00:12:40,630 --> 00:12:42,340
and open source.

282
00:12:42,340 --> 00:12:44,620
And in 2014,

283
00:12:44,620 --> 00:12:48,560
we launched both Zest and Plug-n-Hack.

284
00:12:48,560 --> 00:12:49,810
Zest is scripting language,

285
00:12:49,810 --> 00:12:51,280
and Plug-n-Hack actually allowed you

286
00:12:51,280 --> 00:12:53,653
to control ZAP from your browser.

287
00:12:55,410 --> 00:12:59,530
Then in 2014, we added support
for client-side events,

288
00:12:59,530 --> 00:13:01,020
things like postMessages.

289
00:13:01,020 --> 00:13:05,750
So you can actually fuzz
postMessages and intercept them,

290
00:13:05,750 --> 00:13:08,250
even though they're all
completely in the browser.

291
00:13:10,070 --> 00:13:14,680
And in 2015, we added
access control testing.

292
00:13:14,680 --> 00:13:17,750
So this allows ZAP to
actually try out functionality

293
00:13:17,750 --> 00:13:19,713
available to one user as another.

294
00:13:23,870 --> 00:13:27,030
So we added the Docker Images in 2016

295
00:13:27,030 --> 00:13:28,240
and the package scans,

296
00:13:28,240 --> 00:13:30,573
and these have been incredibly popular.

297
00:13:31,420 --> 00:13:34,300
2017, we added browser launch.

298
00:13:34,300 --> 00:13:36,969
This means we can actually
launch browsers from ZAP

299
00:13:36,970 --> 00:13:39,540
and they're pre-configured
to proxy through ZAP

300
00:13:39,540 --> 00:13:42,319
and ignore any certificate warnings,

301
00:13:42,320 --> 00:13:44,433
which makes ZAP so much easier.

302
00:13:45,300 --> 00:13:46,900
You don't have to worry

303
00:13:46,900 --> 00:13:49,890
about configuring your
browser in the same way.

304
00:13:49,890 --> 00:13:52,490
And 2019, we introduced
the heads-up display,

305
00:13:52,490 --> 00:13:54,750
which I'll talk about a little bit later,

306
00:13:54,750 --> 00:13:57,560
but this basically brings
a lot of the functionality

307
00:13:57,560 --> 00:13:59,193
of ZAP into the browser.

308
00:14:00,660 --> 00:14:04,640
2020 I think we're the
very first security tool

309
00:14:04,640 --> 00:14:07,740
to be or this desk tool to be available

310
00:14:07,740 --> 00:14:10,670
in Github Actions.

311
00:14:10,670 --> 00:14:15,670
And in 2020, we already supported
Swagger OpenAPI and SOAP,

312
00:14:16,380 --> 00:14:17,910
but we added GraphQL,

313
00:14:17,910 --> 00:14:20,699
which means that ZAP is
incredibly powerful tool

314
00:14:20,700 --> 00:14:22,113
for testing APIs.

315
00:14:23,330 --> 00:14:25,210
And in this year,

316
00:14:25,210 --> 00:14:27,840
we've actually launched
an automation framework

317
00:14:27,840 --> 00:14:29,750
which makes ZAP even easier to automate,

318
00:14:29,750 --> 00:14:32,163
while providing access
to many more features.

319
00:14:34,460 --> 00:14:37,030
So today, there's actually
three project leaders.

320
00:14:37,030 --> 00:14:40,470
So myself, Ricardo, also known as thc202,

321
00:14:40,470 --> 00:14:42,450
and Rick, kingthorin.

322
00:14:42,450 --> 00:14:45,560
And all three of us have admin credentials

323
00:14:45,560 --> 00:14:49,073
to all of the related
services related to ZAP.

324
00:14:49,950 --> 00:14:50,890
We have a core team

325
00:14:50,890 --> 00:14:53,250
which is built up of the three leaders

326
00:14:53,250 --> 00:14:54,890
and at the moment, two others.

327
00:14:54,890 --> 00:14:56,900
The core team kind of varies over time.

328
00:14:56,900 --> 00:15:00,530
The three project leaders we've
been constant for some time.

329
00:15:00,530 --> 00:15:02,720
But basically, any significant contributor

330
00:15:02,720 --> 00:15:04,370
gets asked to join the core team.

331
00:15:05,820 --> 00:15:07,780
ZAP is very actively maintained.

332
00:15:07,780 --> 00:15:10,829
There are pull requests
being made all the time

333
00:15:10,830 --> 00:15:12,663
and we're doing a lot of releases.

334
00:15:13,731 --> 00:15:15,890
Well, we do a couple of releases a year,

335
00:15:15,890 --> 00:15:18,723
but as I said, we're doing
releases every single week.

336
00:15:20,030 --> 00:15:21,760
And ZAP is getting quite big.

337
00:15:21,760 --> 00:15:24,040
We actually have 35 repositories

338
00:15:24,040 --> 00:15:26,223
in these the zaproxy Github org.

339
00:15:28,470 --> 00:15:32,333
And it is part of a growing
number of commercial offerings.

340
00:15:35,390 --> 00:15:39,840
ZAP was released as Apache
V2 license from the start,

341
00:15:39,840 --> 00:15:42,670
and that's because I wanted
companies to get involved

342
00:15:42,670 --> 00:15:44,806
and start contributing back to ZAP,

343
00:15:44,807 --> 00:15:46,993
and we're starting to see that happen now.

344
00:15:47,860 --> 00:15:49,520
And as I mentioned before,

345
00:15:49,520 --> 00:15:51,449
it is the world's most frequently used

346
00:15:51,450 --> 00:15:53,300
web application scanner.

347
00:15:53,300 --> 00:15:54,380
How do we know that?

348
00:15:54,380 --> 00:15:57,320
Well, we have various stats,
which I'll talk about later,

349
00:15:57,320 --> 00:16:00,010
but basically, we've gone
public with this claim

350
00:16:00,010 --> 00:16:02,590
and made sure our competitors
know all about it,

351
00:16:02,590 --> 00:16:04,460
and none of them have contested it,

352
00:16:04,460 --> 00:16:05,723
so it must be true.

353
00:16:07,890 --> 00:16:10,210
So what I'd like to do
now is talk a little bit

354
00:16:10,210 --> 00:16:12,040
about running what's hopefully seen

355
00:16:12,040 --> 00:16:14,113
as a successful open-source project.

356
00:16:15,184 --> 00:16:18,360
I think one of the key things
you have to decide early on

357
00:16:18,360 --> 00:16:22,690
is whether you want to keep
your team very small and focused

358
00:16:22,690 --> 00:16:25,860
or whether you actually want
to welcome new contributors.

359
00:16:25,860 --> 00:16:27,680
Now, I think it's actually easier

360
00:16:27,680 --> 00:16:30,239
to manage a small dedicated team,

361
00:16:30,240 --> 00:16:33,460
but that was never really
something we considered with ZAP.

362
00:16:33,460 --> 00:16:36,730
I started ZAP because I wanted
to learn about web security

363
00:16:36,730 --> 00:16:38,810
and I wanted other people
to be able to learn as well.

364
00:16:38,810 --> 00:16:40,319
I wanted to teach people

365
00:16:40,320 --> 00:16:42,210
and I wanted people to be able to learn

366
00:16:42,210 --> 00:16:45,227
in the same way that I have.

367
00:16:45,227 --> 00:16:48,650
And this means we actually need
to spend quite a lot of time

368
00:16:48,650 --> 00:16:50,090
with new contributors.

369
00:16:50,090 --> 00:16:51,460
You often have to spend a lot longer

370
00:16:51,460 --> 00:16:54,680
with a new contributor working
on a piece of functionality,

371
00:16:54,680 --> 00:16:57,010
than it would have done
if you'd done it yourself.

372
00:16:57,010 --> 00:16:58,700
But if you keep on doing things yourself

373
00:16:58,700 --> 00:17:01,040
and don't bring new contributors in,

374
00:17:01,040 --> 00:17:03,349
then you won't get any more
long-term contributors.

375
00:17:03,350 --> 00:17:05,440
So we spend time with new contributors

376
00:17:05,440 --> 00:17:07,400
and many of them only stick around

377
00:17:07,400 --> 00:17:09,140
for a short period of
time, which is a shame,

378
00:17:09,140 --> 00:17:10,470
but we keep doing it to make sure

379
00:17:10,470 --> 00:17:12,270
that we do get more people involved.

380
00:17:13,760 --> 00:17:15,849
I think it's important
to accept very early on

381
00:17:15,849 --> 00:17:17,996
that it's no longer just your project.

382
00:17:17,997 --> 00:17:20,030
And that's something
I'm very careful to do.

383
00:17:20,030 --> 00:17:21,339
You know, it's not my project.

384
00:17:21,339 --> 00:17:25,050
I always talk about the fact
that it belongs to everybody

385
00:17:25,050 --> 00:17:26,173
who's contributed to it.

386
00:17:26,173 --> 00:17:28,773
I think it's important to
think in that way as well.

387
00:17:30,060 --> 00:17:31,820
There is definitely an aspect,

388
00:17:31,820 --> 00:17:35,220
when running an open-source
project, of spinning plates.

389
00:17:35,220 --> 00:17:37,460
There's always much too much to do

390
00:17:37,460 --> 00:17:40,170
and you can only focus on a
few things at any one time.

391
00:17:40,170 --> 00:17:42,860
And your focus changes over time.

392
00:17:42,860 --> 00:17:45,219
You'll see things that suddenly seem

393
00:17:45,220 --> 00:17:46,053
much more important to you.

394
00:17:46,053 --> 00:17:49,130
You'll go over, pay attention
to those, get those going,

395
00:17:49,130 --> 00:17:50,440
and then you'll be able
to leave them for a while

396
00:17:50,440 --> 00:17:52,330
and go and focus on other things.

397
00:17:52,330 --> 00:17:54,750
And unfortunately, every so
often you'll hear a crash

398
00:17:54,750 --> 00:17:55,583
when something,

399
00:17:55,583 --> 00:17:57,640
a plate that you weren't
paying attention to has crashed

400
00:17:57,640 --> 00:18:00,720
to the ground and you've
gotta pick up the pieces.

401
00:18:00,720 --> 00:18:04,520
And this brings me on to the
importance of actually focusing

402
00:18:04,520 --> 00:18:07,270
and working out what to
focus on at any one time

403
00:18:07,270 --> 00:18:08,930
and ignoring distractions.

404
00:18:08,930 --> 00:18:12,170
It's very easy for people to
come along, make suggestions,

405
00:18:12,170 --> 00:18:16,030
give you ideas and like, oh,
great, I wanna do that now.

406
00:18:16,030 --> 00:18:17,440
But you often have to stand back

407
00:18:17,440 --> 00:18:19,560
and go, no, I've gotta keep
on doing what I'm doing.

408
00:18:19,560 --> 00:18:20,537
And, you know, hopefully, there'll be time

409
00:18:20,537 --> 00:18:23,350
for me to do that later or
maybe I can get somebody else

410
00:18:23,350 --> 00:18:25,392
to do that new and exciting thing.

411
00:18:26,920 --> 00:18:29,100
I think documentation is really important

412
00:18:29,100 --> 00:18:30,699
for open-source projects,

413
00:18:30,700 --> 00:18:33,960
and something we haven't
always got right with ZAP.

414
00:18:33,960 --> 00:18:35,970
So, you know, I know
there's lots of features

415
00:18:35,970 --> 00:18:37,410
that we've got, they're part of ZAP,

416
00:18:37,410 --> 00:18:39,020
which aren't well enough documented.

417
00:18:39,020 --> 00:18:40,607
And we get questions saying,
why don't you support this?

418
00:18:40,607 --> 00:18:42,090
And we can go back to and say,

419
00:18:42,090 --> 00:18:43,592
well, actually we already do.

420
00:18:45,250 --> 00:18:47,860
And I think a key thing is persistence.

421
00:18:47,860 --> 00:18:50,590
Making sure that you actually
keep on plugging away.

422
00:18:50,590 --> 00:18:52,230
I think that's really important.

423
00:18:52,230 --> 00:18:55,020
And you know, ignoring the detractors.

424
00:18:55,020 --> 00:18:58,120
There will always be people
who will criticize what you do

425
00:18:58,120 --> 00:19:01,820
or compare you in a bad
way with any other project.

426
00:19:01,820 --> 00:19:04,669
You've gotta ignore those and
focus on what you're doing.

427
00:19:06,416 --> 00:19:08,550
As has been said many times,

428
00:19:08,550 --> 00:19:10,340
you know, when you run
an open-source project,

429
00:19:10,340 --> 00:19:12,409
you have to wear many hats.

430
00:19:12,410 --> 00:19:14,570
I think a lot of people who
get involved in open source

431
00:19:14,570 --> 00:19:16,419
seem to come from the development world.

432
00:19:16,420 --> 00:19:19,090
So the whole idea of designing
software, and implementing,

433
00:19:19,090 --> 00:19:23,550
and testing as well, hopefully,
is not too much a surprise.

434
00:19:23,550 --> 00:19:25,730
But you have to be things
like technical also,

435
00:19:25,730 --> 00:19:27,040
you need to document things,

436
00:19:27,040 --> 00:19:29,800
otherwise, people don't
know that they're there.

437
00:19:29,800 --> 00:19:31,580
You need to be a graphical artist as well,

438
00:19:31,580 --> 00:19:33,980
or at least put together
things that look nice

439
00:19:33,980 --> 00:19:36,410
or look vaguely good.

440
00:19:36,410 --> 00:19:38,183
You need to support your users.

441
00:19:39,150 --> 00:19:40,610
Unless you're doing
something really trivial,

442
00:19:40,610 --> 00:19:41,719
people have problems.

443
00:19:41,720 --> 00:19:45,263
They'll come across situations
that you haven't seen before.

444
00:19:46,410 --> 00:19:47,950
You have to evangelize your product.

445
00:19:47,950 --> 00:19:49,000
You have to be a marketeer.

446
00:19:49,000 --> 00:19:51,170
You have to go out and sell it.

447
00:19:51,170 --> 00:19:54,293
You have to manage projects
and you have to manage people.

448
00:19:55,510 --> 00:19:56,720
As it's been said before,

449
00:19:56,720 --> 00:19:59,890
again, you know, managing
developers is like herding cats.

450
00:19:59,890 --> 00:20:01,500
It is really non-trivial.

451
00:20:01,500 --> 00:20:03,160
Particularly, as, you know,
you're not paying them,

452
00:20:03,160 --> 00:20:05,253
they're just doing things they want to do.

453
00:20:07,206 --> 00:20:09,179
Another thing I think is really important

454
00:20:09,180 --> 00:20:11,670
is measuring everything you can.

455
00:20:11,670 --> 00:20:13,060
If you don't measure things well,

456
00:20:13,060 --> 00:20:14,480
you don't know how you're doing.

457
00:20:14,480 --> 00:20:17,440
I actually started recording ZAP downloads

458
00:20:17,440 --> 00:20:19,090
the very first day I released ZAP,

459
00:20:19,090 --> 00:20:20,629
and I've been trying to record

460
00:20:20,630 --> 00:20:23,840
anything else that I can
think of ever since then.

461
00:20:23,840 --> 00:20:27,570
It is hard getting good statistics
for open-source projects.

462
00:20:27,570 --> 00:20:29,450
Things like licenses and license fees

463
00:20:29,450 --> 00:20:31,360
are great way of measuring
how well you're doing

464
00:20:31,360 --> 00:20:32,560
and we don't have those.

465
00:20:33,540 --> 00:20:37,810
And with open source, anyone
can download it and use it.

466
00:20:37,810 --> 00:20:40,873
They don't have to tell you
and people don't tell us.

467
00:20:41,910 --> 00:20:45,060
It's also quite hard to
draw detailed conclusions.

468
00:20:45,060 --> 00:20:47,639
So if you look at this
chart being set properly,

469
00:20:47,640 --> 00:20:49,920
it looks like in 2020,

470
00:20:49,920 --> 00:20:53,210
we actually had a big
increase in ZAP usage.

471
00:20:53,210 --> 00:20:55,320
In fact, we weren't getting any pings

472
00:20:55,320 --> 00:20:56,780
from the check from update requests

473
00:20:56,780 --> 00:20:58,110
when we're in daemon mode.

474
00:20:58,110 --> 00:21:00,459
That was only added in 2.9.0.

475
00:21:00,460 --> 00:21:01,620
So in fact, we're probably having

476
00:21:01,620 --> 00:21:04,003
a lot more people using
ZAP, we didn't know it.

477
00:21:05,320 --> 00:21:08,560
So what do we actually measure for ZAP?

478
00:21:08,560 --> 00:21:11,320
One thing is direct downloads.

479
00:21:11,320 --> 00:21:12,960
And that's relatively straightforward,

480
00:21:12,960 --> 00:21:16,250
but we have deliberately chosen
not to host ZAP downloads

481
00:21:16,250 --> 00:21:19,100
on platforms where we can't
get any statistics from them.

482
00:21:20,210 --> 00:21:22,120
Next thing is Docker pulls,

483
00:21:22,120 --> 00:21:25,100
particularly as Docker has
proved so popular for us.

484
00:21:25,100 --> 00:21:28,030
But this kind of raises
an interesting point,

485
00:21:28,030 --> 00:21:30,760
how difficult it is to understand
what's really going on.

486
00:21:30,760 --> 00:21:33,580
For example, why did
we get 6 million pulls

487
00:21:33,580 --> 00:21:37,169
in February, 2021 and
only 1 million in March?

488
00:21:37,170 --> 00:21:38,350
I have no idea.

489
00:21:38,350 --> 00:21:39,449
I don't know what's going on.

490
00:21:39,450 --> 00:21:41,880
I don't know why we had so many one month

491
00:21:41,880 --> 00:21:44,280
and relatively few the next month.

492
00:21:44,280 --> 00:21:46,663
So it's difficult to draw conclusions.

493
00:21:47,770 --> 00:21:49,420
So Github forks and stars,

494
00:21:49,420 --> 00:21:52,010
those are kind of straightforward
things to measure.

495
00:21:52,010 --> 00:21:55,340
Then things like check for
update requests and start pings.

496
00:21:55,340 --> 00:21:58,480
So for ZAP, we check for updates

497
00:21:58,480 --> 00:22:01,800
and we have a kind of news item
that we check on the start.

498
00:22:01,800 --> 00:22:03,970
The check for updates we
only check once per day

499
00:22:03,970 --> 00:22:05,050
per installation.

500
00:22:05,050 --> 00:22:07,070
With start up, the news items we check

501
00:22:07,070 --> 00:22:08,649
every times ZAP starts.

502
00:22:08,650 --> 00:22:10,280
One of the reasons for doing that

503
00:22:10,280 --> 00:22:12,550
is we get two different data points,

504
00:22:12,550 --> 00:22:15,730
because we're doing these
checks via Bitly URLs,

505
00:22:15,730 --> 00:22:18,570
so we actually find out when
people make these requests.

506
00:22:18,570 --> 00:22:21,679
So these are actually very
important things for us

507
00:22:21,680 --> 00:22:24,740
but we do know that
people can turn these off.

508
00:22:24,740 --> 00:22:26,810
And we know that people
run ZAP in environments

509
00:22:26,810 --> 00:22:28,600
where there's no external communication.

510
00:22:28,600 --> 00:22:31,209
So we just won't get those pings

511
00:22:31,210 --> 00:22:33,233
from people who run ZAP in that way.

512
00:22:34,830 --> 00:22:38,530
We get website traffic zaproxy.org now

513
00:22:38,530 --> 00:22:40,660
and we measure things
like the number of posts

514
00:22:40,660 --> 00:22:41,823
to the Google groups.

515
00:22:42,820 --> 00:22:44,456
I would love to add
instrumentation to ZAP.

516
00:22:44,457 --> 00:22:45,820
That's something I'd like to...

517
00:22:45,820 --> 00:22:47,409
You know, definitely want to do,

518
00:22:47,410 --> 00:22:50,000
but we'd have to be very
careful not to collect anything

519
00:22:50,000 --> 00:22:52,300
that would make any of our users nervous,

520
00:22:52,300 --> 00:22:54,340
particularly details of vulnerabilities.

521
00:22:54,340 --> 00:22:55,820
And we'll definitely
have to have an option

522
00:22:55,820 --> 00:22:59,413
to turn that kind of
instrumentation off if we do add it.

523
00:23:01,300 --> 00:23:04,500
I think getting contributors
is always a challenge

524
00:23:04,500 --> 00:23:06,530
for open-source projects.

525
00:23:06,530 --> 00:23:08,450
ZAP has always been a community project.

526
00:23:08,450 --> 00:23:11,300
We've always stressed that we
want people to get involved.

527
00:23:11,300 --> 00:23:13,980
And initially, I kind of thought and hoped

528
00:23:13,980 --> 00:23:16,130
that we would get
security people involved.

529
00:23:16,990 --> 00:23:18,870
We do have some security people involved

530
00:23:18,870 --> 00:23:21,189
but a lot fewer than I kind of hoped.

531
00:23:21,190 --> 00:23:23,740
And I think that's because
they have a tendency

532
00:23:23,740 --> 00:23:26,453
to contribute to a certain
other commercial tool.

533
00:23:27,430 --> 00:23:29,810
Developers, again, I was
hoping a lot of developers

534
00:23:29,810 --> 00:23:30,793
would get involved.

535
00:23:31,840 --> 00:23:33,189
We do have developers involved

536
00:23:33,190 --> 00:23:35,100
but not as many as I was hoping.

537
00:23:35,100 --> 00:23:36,740
And I'm not sure why,

538
00:23:36,740 --> 00:23:40,610
but I think perhaps they either
want to contribute to tools

539
00:23:40,610 --> 00:23:43,360
they use more directly,
development-type tools,

540
00:23:43,360 --> 00:23:45,159
or maybe they're nervous
about contributing

541
00:23:45,160 --> 00:23:46,230
to the security tool.

542
00:23:46,230 --> 00:23:48,070
They actually want to
use the security tool,

543
00:23:48,070 --> 00:23:48,903
but they don't really want

544
00:23:48,903 --> 00:23:50,653
to have to understand it in detail.

545
00:23:51,940 --> 00:23:55,140
So the place we've actually
got the most number

546
00:23:55,140 --> 00:23:57,500
of contributors is students.

547
00:23:57,500 --> 00:24:01,460
We've had loads of really
significant student contributions.

548
00:24:01,460 --> 00:24:05,070
And in fact, we have a
student hall of fame.

549
00:24:05,070 --> 00:24:07,610
So there more than 20 students on there

550
00:24:07,610 --> 00:24:09,879
and they've contributed
really significant projects

551
00:24:09,880 --> 00:24:12,810
like WebSockets, Ajax Spider,

552
00:24:12,810 --> 00:24:14,990
contributions to heads-up display,

553
00:24:14,990 --> 00:24:16,800
Github Actions, GraphQL support,

554
00:24:16,800 --> 00:24:19,700
loads of really key ZAP features.

555
00:24:19,700 --> 00:24:23,030
And actually, the latest
two students on that list

556
00:24:23,030 --> 00:24:24,593
are part of the ZAP core team.

557
00:24:25,450 --> 00:24:28,580
So we do get students via programs

558
00:24:28,580 --> 00:24:30,720
like Google Summer of Code,

559
00:24:30,720 --> 00:24:32,250
but we also do direct mentorship.

560
00:24:32,250 --> 00:24:34,420
So we always do our best to help students

561
00:24:34,420 --> 00:24:35,630
who want to work on ZAP,

562
00:24:35,630 --> 00:24:38,100
even if they've come to
us directly and some do.

563
00:24:38,100 --> 00:24:39,520
So if you want to work on ZAP

564
00:24:39,520 --> 00:24:43,963
as part of your university
course, then please get in touch.

565
00:24:45,810 --> 00:24:48,530
So one thing I think is
actually really important

566
00:24:48,530 --> 00:24:51,990
is to try and get as much
sponsorship as possible.

567
00:24:51,990 --> 00:24:54,550
Now, the other two ZAP leaders

568
00:24:54,550 --> 00:24:56,300
actually work on ZAP in their own time,

569
00:24:56,300 --> 00:24:58,649
which I think is quite incredible.

570
00:24:58,650 --> 00:25:00,630
But I've been really lucky.

571
00:25:00,630 --> 00:25:04,620
So between 2012 and 2020,
I worked at Mozilla,

572
00:25:04,620 --> 00:25:05,530
and they essentially sponsored

573
00:25:05,530 --> 00:25:10,129
40 to 80% of my time working on ZAP.

574
00:25:10,130 --> 00:25:12,730
I say luck, but I did actually
choose to work at Mozilla

575
00:25:12,730 --> 00:25:15,130
over other companies

576
00:25:15,130 --> 00:25:18,500
because they said they
wanted me to work on ZAP.

577
00:25:18,500 --> 00:25:21,790
And since 2020, I've
actually worked at StackHawk,

578
00:25:21,790 --> 00:25:26,110
where I'm able to spend
nearly 100% of my time on ZAP.

579
00:25:26,110 --> 00:25:28,479
And that makes a huge difference

580
00:25:28,480 --> 00:25:31,100
to the amount of things you can do.

581
00:25:31,100 --> 00:25:33,320
So the more time you can
spend on your project,

582
00:25:33,320 --> 00:25:34,852
the better, not surprisingly.

583
00:25:36,120 --> 00:25:38,879
So Google Summer of Code has
been really great for us.

584
00:25:38,880 --> 00:25:41,950
We've had 16 student projects
and many of those students

585
00:25:41,950 --> 00:25:45,403
have carried on contributing
to ZAP well after the event.

586
00:25:46,990 --> 00:25:49,580
We had a Mozilla Winter of Security event.

587
00:25:49,580 --> 00:25:52,040
We had three students part of the team

588
00:25:52,040 --> 00:25:54,780
and Google Season of Docs,
where we had one student,

589
00:25:54,780 --> 00:25:56,970
and that student carried on actually doing

590
00:25:56,970 --> 00:25:59,720
code contributions afterwards as well.

591
00:25:59,720 --> 00:26:02,300
But we've also run some competitions

592
00:26:02,300 --> 00:26:04,210
and this is where actually
having money donations

593
00:26:04,210 --> 00:26:07,350
to the ZAP project has been really great,

594
00:26:07,350 --> 00:26:08,370
because what we've been able to do

595
00:26:08,370 --> 00:26:10,580
is we've been able to offer cash prizes

596
00:26:10,580 --> 00:26:13,689
for writing ZAP scripts,
writing unit tests,

597
00:26:13,690 --> 00:26:16,460
and we've got one open right now,

598
00:26:16,460 --> 00:26:18,493
creating new report templates for ZAP.

599
00:26:21,550 --> 00:26:23,169
So one thing I'd like to touch on now

600
00:26:23,170 --> 00:26:27,510
is kind of difference between
innovations and evolution.

601
00:26:27,510 --> 00:26:29,379
And this is something
that I'm still probably

602
00:26:29,380 --> 00:26:31,230
kind of struggling with a bit myself.

603
00:26:32,200 --> 00:26:33,960
We've had lots of ZAP innovations,

604
00:26:33,960 --> 00:26:36,260
but two kind of stand out for me.

605
00:26:36,260 --> 00:26:40,650
One is Zest and that's a
graphical macro-like language,

606
00:26:40,650 --> 00:26:42,240
which kind of domain-specific language

607
00:26:42,240 --> 00:26:44,090
which is really powerful.

608
00:26:44,090 --> 00:26:46,560
And the ZAP heads-up display.

609
00:26:46,560 --> 00:26:50,070
And that brings information
from ZAP into the browser

610
00:26:50,070 --> 00:26:52,283
and allows you to control ZAP.

611
00:26:54,116 --> 00:26:57,290
It allows you to focus on the
application functionality,

612
00:26:57,290 --> 00:27:00,530
while you can see what's
going on under the covers.

613
00:27:00,530 --> 00:27:02,870
And it's kind of unique
amongst security tools.

614
00:27:02,870 --> 00:27:04,870
And I've actually not
seen anything like it

615
00:27:04,870 --> 00:27:06,879
in any other tool either.

616
00:27:06,880 --> 00:27:10,940
However, even though these
are incredibly innovative,

617
00:27:10,940 --> 00:27:13,780
we actually have seen
limited take-up of them.

618
00:27:13,780 --> 00:27:15,780
They do have their fans,
but for some reason,

619
00:27:15,780 --> 00:27:17,360
they haven't taken off as much

620
00:27:17,360 --> 00:27:19,433
as I'd hoped and, to be honest, expected.

621
00:27:20,680 --> 00:27:23,220
Whereas we've had kind
of evolutionary things,

622
00:27:23,220 --> 00:27:25,700
so things like the API, the Docker Images,

623
00:27:25,700 --> 00:27:27,140
and the package scans,

624
00:27:27,140 --> 00:27:29,900
none of these are kind of dramatic changes

625
00:27:29,900 --> 00:27:32,770
but there are things that have
proved incredibly popular.

626
00:27:32,770 --> 00:27:34,850
So sometimes I think you have to realize

627
00:27:34,850 --> 00:27:37,719
you have to focus on evolution
rather than innovation.

628
00:27:37,720 --> 00:27:40,020
But as an open-source
project, we can do both.

629
00:27:41,840 --> 00:27:44,766
So some of the ongoing
challenges we have for ZAP

630
00:27:44,767 --> 00:27:46,570
and I kind of think will be the similar

631
00:27:46,570 --> 00:27:50,169
for many other open-source projects, time.

632
00:27:50,170 --> 00:27:53,263
Actually, getting more
people to contribute to ZAP.

633
00:27:54,343 --> 00:27:57,630
So we want contributors,
we want volunteers,

634
00:27:57,630 --> 00:28:00,100
but I really think direct
sponsorship is key here.

635
00:28:00,100 --> 00:28:01,850
So we're really trying
to get other companies

636
00:28:01,850 --> 00:28:03,233
to contribute to ZAP,

637
00:28:04,140 --> 00:28:06,300
but yet getting more longterm contributors

638
00:28:06,300 --> 00:28:07,790
is really important.

639
00:28:07,790 --> 00:28:09,593
We want people to get involved.

640
00:28:11,130 --> 00:28:14,113
And then getting actionable feedback.

641
00:28:15,390 --> 00:28:17,520
Most people don't tell
us they're using ZAP

642
00:28:17,520 --> 00:28:19,450
or what they're using it for.

643
00:28:19,450 --> 00:28:21,520
We only find out people are using features

644
00:28:21,520 --> 00:28:23,400
when they start reporting issues.

645
00:28:23,400 --> 00:28:27,040
So getting good quality
feedback is really difficult.

646
00:28:27,040 --> 00:28:28,139
But then there's managing

647
00:28:28,140 --> 00:28:30,420
loads of kind of spurious feedback you get

648
00:28:30,420 --> 00:28:32,620
and keeping up with
the emails, the issues,

649
00:28:32,620 --> 00:28:37,620
the Slack mentions, group
messages, Twitter, stack overflow.

650
00:28:37,810 --> 00:28:39,129
There's so many different ways

651
00:28:39,130 --> 00:28:41,120
people kind of comment, or complain,

652
00:28:41,120 --> 00:28:43,090
or they'll report problems around ZAP

653
00:28:43,090 --> 00:28:44,360
and keeping on top of those

654
00:28:44,360 --> 00:28:46,889
is actually really tricky as well.

655
00:28:46,890 --> 00:28:48,740
And then as I've mentioned before,

656
00:28:48,740 --> 00:28:52,070
kind of knowing what to
do at the right time,

657
00:28:52,070 --> 00:28:53,750
focusing on the right things,

658
00:28:53,750 --> 00:28:57,250
and focusing on things you
need to when you need to,

659
00:28:57,250 --> 00:29:00,153
and then changing your
focus when it's important.

660
00:29:02,090 --> 00:29:05,459
So I'd now like to kind of talk

661
00:29:05,460 --> 00:29:07,110
about some of the changes I've seen

662
00:29:07,110 --> 00:29:09,622
in application security
in the last 10 years.

663
00:29:10,740 --> 00:29:13,370
So I do think there is a much higher level

664
00:29:13,370 --> 00:29:15,679
of security knowledge

665
00:29:15,680 --> 00:29:18,060
amongst developers than was before.

666
00:29:18,060 --> 00:29:20,190
So more developers know the basics

667
00:29:20,190 --> 00:29:22,810
like cross-site scripting
and SQL injection,

668
00:29:22,810 --> 00:29:25,342
and appreciate that security
is really important.

669
00:29:27,070 --> 00:29:31,250
So application security, so security teams

670
00:29:31,250 --> 00:29:32,640
and securities considerations

671
00:29:32,640 --> 00:29:34,510
are being taken into account much early

672
00:29:34,510 --> 00:29:35,863
in the development process.

673
00:29:37,740 --> 00:29:40,840
But there is really an increase...

674
00:29:40,840 --> 00:29:43,220
There are some companies
that are doing really well

675
00:29:43,220 --> 00:29:45,260
and really understand security,

676
00:29:45,260 --> 00:29:46,180
there are some companies

677
00:29:46,180 --> 00:29:48,300
that have just, you know,
not made a start at all.

678
00:29:48,300 --> 00:29:49,570
So there's an increasing gap

679
00:29:49,570 --> 00:29:51,243
between those two extremes.

680
00:29:52,490 --> 00:29:54,910
Newer languages and frameworks

681
00:29:54,910 --> 00:29:57,040
are taking security into account

682
00:29:57,040 --> 00:30:00,610
and are trying to be much
more secure by default,

683
00:30:00,610 --> 00:30:01,443
and this is really good,

684
00:30:01,443 --> 00:30:04,230
this is making a really big impression.

685
00:30:04,230 --> 00:30:05,600
And, you know, I think it's clear

686
00:30:05,600 --> 00:30:09,459
that bug bounties have really taken off.

687
00:30:09,460 --> 00:30:11,750
But I think it can be difficult

688
00:30:11,750 --> 00:30:13,740
to actually maximize their benefits.

689
00:30:13,740 --> 00:30:15,903
I'll talk a little bit
more about that later.

690
00:30:18,540 --> 00:30:21,913
Security automation, you know,
there's a lot more options.

691
00:30:23,220 --> 00:30:25,770
There's a lot more things
you can do with that now,

692
00:30:25,770 --> 00:30:27,700
particularly for open-source projects,

693
00:30:27,700 --> 00:30:31,163
which can use many
commercial tools for free.

694
00:30:32,500 --> 00:30:34,170
But I think, you know, we all know

695
00:30:34,170 --> 00:30:36,820
that automation is not
gonna solve everything

696
00:30:36,820 --> 00:30:40,129
and that, you know, manual
testing really is required,

697
00:30:40,130 --> 00:30:41,863
especially for high value sites.

698
00:30:43,770 --> 00:30:46,160
So where are we today?

699
00:30:46,160 --> 00:30:47,950
Well, I think everybody knows

700
00:30:47,950 --> 00:30:49,720
that there's not enough security people.

701
00:30:49,720 --> 00:30:50,680
There are a huge number.

702
00:30:50,680 --> 00:30:52,050
There's huge demand

703
00:30:52,050 --> 00:30:53,220
and there are not enough people

704
00:30:53,220 --> 00:30:54,933
to fill all of the open jobs.

705
00:30:55,870 --> 00:30:58,860
There is still not enough
developer's security knowledge.

706
00:30:58,860 --> 00:31:00,290
Now, I don't want to fall into the trap

707
00:31:00,290 --> 00:31:01,940
of just blaming developers.

708
00:31:01,940 --> 00:31:03,570
Developers do what they're told,

709
00:31:03,570 --> 00:31:05,463
encouraged, or incentivized to do.

710
00:31:06,350 --> 00:31:08,850
So if it's not a priority for management,

711
00:31:08,850 --> 00:31:11,949
then it won't get the kind
of focus from developers

712
00:31:11,950 --> 00:31:12,783
that it needs.

713
00:31:15,540 --> 00:31:17,230
Automated security tools like ZAP,

714
00:31:17,230 --> 00:31:21,330
DAST tools used to only
be run just before release

715
00:31:21,330 --> 00:31:22,860
and that was way too late.

716
00:31:22,860 --> 00:31:24,889
They are now being used much earlier,

717
00:31:24,890 --> 00:31:26,320
particularly in development,

718
00:31:26,320 --> 00:31:28,393
thanks in part, I think, to ZAP.

719
00:31:29,410 --> 00:31:34,410
And SAS tools, soft
software analysis tools,

720
00:31:34,790 --> 00:31:38,770
are starting to give much
more actionable feedback.

721
00:31:38,770 --> 00:31:41,190
They used to give a huge
and massive potential issues

722
00:31:41,190 --> 00:31:42,660
which were difficult to wade through,

723
00:31:42,660 --> 00:31:47,200
and some of those are providing
much more useful coverage,

724
00:31:47,200 --> 00:31:48,680
much more useful information,

725
00:31:48,680 --> 00:31:50,880
and focusing on the
really important things.

726
00:31:52,240 --> 00:31:56,880
But software composition analysis,
SCA, is a huge challenge.

727
00:31:56,880 --> 00:31:58,830
It's really difficult.

728
00:31:58,830 --> 00:32:01,240
There's proliferation of libraries

729
00:32:01,240 --> 00:32:02,450
and keeping them up to date

730
00:32:02,450 --> 00:32:05,793
and making sure they're all
secure is incredibly difficult.

731
00:32:07,636 --> 00:32:10,470
So bug bounties have proved really useful

732
00:32:10,470 --> 00:32:12,410
but they're not a panacea.

733
00:32:12,410 --> 00:32:15,140
So I was on the Mozilla
Bug Bounty Committee

734
00:32:15,140 --> 00:32:16,840
and we saw a significant drop

735
00:32:16,840 --> 00:32:19,959
in the quality of the
usefulness of findings.

736
00:32:19,960 --> 00:32:23,340
Now, I think, you know, it's
difficult to tell why that was,

737
00:32:23,340 --> 00:32:27,340
but I think it's partly due
to the improving quality

738
00:32:27,340 --> 00:32:28,629
of our services,

739
00:32:28,630 --> 00:32:31,110
but it's also due to the competition

740
00:32:31,110 --> 00:32:32,979
from other bug bounties as well.

741
00:32:32,980 --> 00:32:34,830
And I think it's only fair to expect

742
00:32:34,830 --> 00:32:37,720
that people who take part in bug bounties

743
00:32:37,720 --> 00:32:39,180
are looking to get the most money

744
00:32:39,180 --> 00:32:40,900
with the least amount of effort.

745
00:32:40,900 --> 00:32:43,470
So it's really difficult to
get really good findings,

746
00:32:43,470 --> 00:32:45,420
unless you pass a lot of money,

747
00:32:45,420 --> 00:32:47,470
and, you know, you'll get lots of findings

748
00:32:47,470 --> 00:32:49,320
you're not interested in at all,

749
00:32:49,320 --> 00:32:52,133
even if you scope the
program really carefully.

750
00:32:54,337 --> 00:32:55,580
And I'm afraid to say

751
00:32:55,580 --> 00:32:59,610
that web security,
there just aren't enough

752
00:32:59,610 --> 00:33:01,592
open-source web security tools out there.

753
00:33:01,593 --> 00:33:03,780
There's still not very many.

754
00:33:03,780 --> 00:33:07,389
ZAP is one of the few web
security tools out there.

755
00:33:07,390 --> 00:33:10,270
Web security tools are easy to create

756
00:33:10,270 --> 00:33:12,139
but they're hard to maintain.

757
00:33:12,140 --> 00:33:14,030
And we've seen a lot have come and go,

758
00:33:14,030 --> 00:33:16,303
very few stay the distance.

759
00:33:18,296 --> 00:33:22,063
So quickly touch on a bit
of the future as I see it.

760
00:33:23,350 --> 00:33:24,939
I think it's, you know,
there's an old saying,

761
00:33:24,940 --> 00:33:27,050
you can't hack yourself secure.

762
00:33:27,050 --> 00:33:29,550
Things like web application
firewalls are great

763
00:33:29,550 --> 00:33:30,800
but they're sticky plasters.

764
00:33:30,800 --> 00:33:31,710
They're okay in emergency,

765
00:33:31,710 --> 00:33:34,530
but they don't make systems secure.

766
00:33:34,530 --> 00:33:38,642
So you have to actually
get security involved.

767
00:33:38,642 --> 00:33:40,180
From the very start,

768
00:33:40,180 --> 00:33:42,090
you have to get developers involved.

769
00:33:42,090 --> 00:33:45,132
Developers create secure
systems, security people don't.

770
00:33:46,770 --> 00:33:48,300
And as I think we all know,

771
00:33:48,300 --> 00:33:51,080
the use of software is expanding.

772
00:33:51,080 --> 00:33:53,149
Software is everywhere,
it's reaching the world,

773
00:33:53,150 --> 00:33:56,323
and, you know, we just do not
have enough security people.

774
00:33:59,070 --> 00:34:00,960
The modern frameworks
are getting much better

775
00:34:00,960 --> 00:34:03,360
and they are preventing
a lot of common issues.

776
00:34:03,360 --> 00:34:06,310
But we still seen some new frameworks

777
00:34:06,310 --> 00:34:08,080
introducing old vulnerabilities.

778
00:34:08,080 --> 00:34:10,460
So just keeping up with
the latest, greatest thing

779
00:34:10,460 --> 00:34:12,103
doesn't mean you'll be secure.

780
00:34:13,420 --> 00:34:16,770
Not surprisingly, I'm a
big fan of automation,

781
00:34:16,770 --> 00:34:18,870
but I think there's gonna
be a huge potential gains

782
00:34:18,870 --> 00:34:22,250
when we start integrating
DAST, SAST, IAST, fuzzing,

783
00:34:22,250 --> 00:34:24,563
all these different
types of security tools.

784
00:34:27,130 --> 00:34:28,770
There are various commercial tools

785
00:34:28,770 --> 00:34:31,920
that claim to do this,
but I haven't tried them

786
00:34:31,920 --> 00:34:34,310
and they're charging
a significant premium.

787
00:34:34,310 --> 00:34:35,143
And I don't think these

788
00:34:35,143 --> 00:34:37,550
will take off until they're much cheaper

789
00:34:37,550 --> 00:34:40,380
or hopefully, there are open
source options out there.

790
00:34:40,380 --> 00:34:41,320
And that's something I'm hoping

791
00:34:41,320 --> 00:34:43,763
that we can contribute to as part of ZAP.

792
00:34:45,010 --> 00:34:48,219
And there's the all refrain,
there's no silver bullet,

793
00:34:48,219 --> 00:34:51,899
and that is as true in
security as it's ever been.

794
00:34:51,900 --> 00:34:54,450
So that means, I think, we
need a blended approach.

795
00:34:55,440 --> 00:34:59,290
So, you know, security is non-intuitive.

796
00:34:59,290 --> 00:35:01,740
Once developers have been
exposed to security concepts,

797
00:35:01,740 --> 00:35:04,500
they get them and they start
building more secure software,

798
00:35:04,500 --> 00:35:07,110
but they need training first.

799
00:35:07,110 --> 00:35:09,430
I think threat modeling
is a really important way

800
00:35:09,430 --> 00:35:11,250
to think about security upfront.

801
00:35:11,250 --> 00:35:12,700
It's a great way for security team

802
00:35:12,700 --> 00:35:14,560
to interact with developers

803
00:35:14,560 --> 00:35:16,560
early in the project life cycle as well.

804
00:35:18,380 --> 00:35:20,230
Security should be
taken into consideration

805
00:35:20,230 --> 00:35:22,740
when choosing frameworks
and developers should know

806
00:35:22,740 --> 00:35:25,912
what security controls are
available and when to use them.

807
00:35:27,250 --> 00:35:30,630
Ideally, I think applications
should be security aware,

808
00:35:30,630 --> 00:35:32,980
actually, know when they will be attacked

809
00:35:32,980 --> 00:35:34,420
and react accordingly.

810
00:35:34,420 --> 00:35:37,900
But that's kind of, you know,
another step down the road.

811
00:35:37,900 --> 00:35:40,340
Automation is absolutely key,

812
00:35:40,340 --> 00:35:43,860
particularly, you know, should
be run as early as possible.

813
00:35:43,860 --> 00:35:47,220
It gives you the best coverage
and picks up problems early,

814
00:35:47,220 --> 00:35:48,080
learning to address them,

815
00:35:48,080 --> 00:35:50,220
whether it's, you know,
lack of security training

816
00:35:50,220 --> 00:35:51,763
or missing security controls.

817
00:35:54,000 --> 00:35:56,760
Testing, manual testing
is really required.

818
00:35:56,760 --> 00:35:59,130
There's a lot of things that
really hard to automate,

819
00:35:59,130 --> 00:36:01,490
and I'm actually a big fan
of getting QA involved.

820
00:36:01,490 --> 00:36:03,379
They're used to testing.

821
00:36:03,380 --> 00:36:05,560
They know about testing weird cases.

822
00:36:05,560 --> 00:36:07,240
And the ones that I've trained,

823
00:36:07,240 --> 00:36:09,790
actually really enjoy
getting involved in security.

824
00:36:11,490 --> 00:36:13,890
But for high value sites, you still need

825
00:36:13,890 --> 00:36:15,692
manual external pen testing.

826
00:36:16,660 --> 00:36:20,899
Systems developed as above
actually become much more secure

827
00:36:20,900 --> 00:36:23,680
and you get much more
value from pen testers.

828
00:36:23,680 --> 00:36:26,393
Pen testers hate not
finding significant issues.

829
00:36:27,307 --> 00:36:29,629
When I was at Mozilla,

830
00:36:29,630 --> 00:36:31,990
we made sure our systems were
pretty secure as they could be

831
00:36:31,990 --> 00:36:33,459
before we brought pen testers in.

832
00:36:33,460 --> 00:36:34,990
And we got some really great findings,

833
00:36:34,990 --> 00:36:37,750
just because halfway
through the engagement,

834
00:36:37,750 --> 00:36:38,920
they were getting really frustrated

835
00:36:38,920 --> 00:36:42,480
they hadn't found anything and
they just tried really hard.

836
00:36:42,480 --> 00:36:44,540
And of course, bug
bounties are still there.

837
00:36:44,540 --> 00:36:45,840
But as I've mentioned before,

838
00:36:45,840 --> 00:36:48,453
you know, managing them
takes a bit of practice.

839
00:36:50,400 --> 00:36:52,573
So future of ZAP,

840
00:36:54,610 --> 00:36:57,140
it's tricky, I do find it
difficult looking to the future

841
00:36:57,140 --> 00:36:58,220
of these kinds of things,

842
00:36:58,220 --> 00:37:01,629
but more automation is
definitely on the cards.

843
00:37:01,630 --> 00:37:04,560
I would love to put more
self configuration in.

844
00:37:04,560 --> 00:37:08,232
ZAP has got loads of
ways of configuring it,

845
00:37:09,411 --> 00:37:11,427
but then you have to know how to do that.

846
00:37:11,427 --> 00:37:13,000
And it's partly cause we
don't get enough input

847
00:37:13,000 --> 00:37:15,180
to know how to configure ZAP best.

848
00:37:15,180 --> 00:37:16,419
I'm hoping we can start

849
00:37:16,420 --> 00:37:19,080
to improve that by getting more feedback.

850
00:37:19,080 --> 00:37:20,830
Definitely seeing more tools and services

851
00:37:20,830 --> 00:37:22,120
built on top of ZAP.

852
00:37:22,120 --> 00:37:24,230
We're very friendly to commercial tools

853
00:37:24,230 --> 00:37:25,090
and we try and make sure

854
00:37:25,090 --> 00:37:27,540
that ZAP can be as easily
integrated as possible.

855
00:37:28,400 --> 00:37:30,210
I really hope we get more contributors,

856
00:37:30,210 --> 00:37:32,140
you know, we're definitely
trying for that,

857
00:37:32,140 --> 00:37:35,542
but a lot of what we do will
depend on who gets involved.

858
00:37:37,100 --> 00:37:40,343
So a few personal takeaways
based on my experience.

859
00:37:41,820 --> 00:37:43,610
Luck does play a big part.

860
00:37:43,610 --> 00:37:46,203
I think I was in the right
place at the right time.

861
00:37:47,440 --> 00:37:49,510
So I released ZAP at a good time

862
00:37:49,510 --> 00:37:53,313
when there weren't other
tools available like it.

863
00:37:54,690 --> 00:37:57,060
But I do think an open-source
project is for life,

864
00:37:57,060 --> 00:37:58,779
not just for Christmas.

865
00:37:58,780 --> 00:38:02,170
It's a bit of an old joke
but it's got a serious point.

866
00:38:02,170 --> 00:38:05,440
Short-lived open-source projects
won't make a big impact.

867
00:38:05,440 --> 00:38:07,290
You have to be in it for the long haul

868
00:38:07,290 --> 00:38:09,860
if you want to make a difference.

869
00:38:09,860 --> 00:38:13,570
But successful open-source
projects open lots of doors.

870
00:38:13,570 --> 00:38:16,950
I've not actually updated
my CV since I started ZAP.

871
00:38:16,950 --> 00:38:18,850
I've been head hunted
for the last two jobs

872
00:38:18,850 --> 00:38:20,500
and I've turned down job offers

873
00:38:20,500 --> 00:38:23,200
in some of the best known
tech companies in the world.

874
00:38:24,890 --> 00:38:26,500
But if we're going to
make secure products,

875
00:38:26,500 --> 00:38:29,320
we have to get developers
involved with security

876
00:38:29,320 --> 00:38:30,563
at the very start.

877
00:38:31,940 --> 00:38:33,790
But the main thing, I think,
is, you know, security

878
00:38:33,790 --> 00:38:36,650
is really hard, but
it's great job security.

879
00:38:36,650 --> 00:38:38,840
So if you're thinking of
actually moving into security,

880
00:38:38,840 --> 00:38:40,393
I can only recommend it.

881
00:38:41,604 --> 00:38:45,379
And last slide, you know,
what can you actually do?

882
00:38:45,380 --> 00:38:47,970
So right now, feedback.

883
00:38:47,970 --> 00:38:50,680
It is so valuable to open-source projects.

884
00:38:50,680 --> 00:38:52,500
Even if you think you have no feedback,

885
00:38:52,500 --> 00:38:55,420
just telling them that
you're using their project

886
00:38:55,420 --> 00:38:57,920
and that things are going
well is really valuable.

887
00:38:59,270 --> 00:39:02,100
Longer term, you know,
it would be really great

888
00:39:02,100 --> 00:39:04,900
if you contribute to open
source, particularly ZAP.

889
00:39:04,900 --> 00:39:07,750
Don't be afraid to start in
an new open-source project,

890
00:39:07,750 --> 00:39:11,543
but only do that if you
intend to keep it up.

891
00:39:12,520 --> 00:39:15,350
And I do think helping
others is absolutely key.

892
00:39:15,350 --> 00:39:17,839
You know, that's what I've been
trying to do as part of ZAP,

893
00:39:17,840 --> 00:39:20,423
and it's just paid me huge dividends.

894
00:39:21,490 --> 00:39:24,250
And the final thing is
just keep plugging away.

895
00:39:24,250 --> 00:39:27,570
Slow but consistent
progress over many years

896
00:39:27,570 --> 00:39:30,120
will take you much further
than a flash in the pan.

897
00:39:31,670 --> 00:39:32,750
And that's it.

898
00:39:32,750 --> 00:39:33,610
That's all I've got to say.

899
00:39:33,610 --> 00:39:35,003
I hope you've enjoyed it.

