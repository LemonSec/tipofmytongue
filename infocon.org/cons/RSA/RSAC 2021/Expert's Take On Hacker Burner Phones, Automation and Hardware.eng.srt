1
00:00:00,280 --> 00:00:02,770
- So welcome to the RSA
Conference Lightning Talk.

2
00:00:02,770 --> 00:00:06,707
This one is titled "Experts
Take on Hacker Burner Phones,

3
00:00:06,707 --> 00:00:08,357
"Automation, and Hardware."

4
00:00:09,220 --> 00:00:11,350
In this session, we'll
hear from three experts.

5
00:00:11,350 --> 00:00:14,260
Each has about seven minutes
to share their big idea.

6
00:00:14,260 --> 00:00:16,180
Following their presentation,

7
00:00:16,180 --> 00:00:17,960
we will have a five minute Q and A.

8
00:00:18,800 --> 00:00:19,900
While they are speaking,

9
00:00:19,900 --> 00:00:23,083
please feel free to add questions
to the chat here in Zoom.

10
00:00:24,120 --> 00:00:28,000
And then as the time comes for Q and A,

11
00:00:28,000 --> 00:00:29,800
we're gonna get that started.

12
00:00:29,800 --> 00:00:31,010
So let's get started.

13
00:00:31,010 --> 00:00:33,190
And I'm gonna introduce
our first speaker here,

14
00:00:33,190 --> 00:00:35,309
which is Mark Loveless,
a security researcher

15
00:00:35,310 --> 00:00:37,870
at GitLab and a lifelong hacker

16
00:00:37,870 --> 00:00:41,129
with strong feelings on
security and privacy.

17
00:00:41,130 --> 00:00:42,553
So Mark, take it away.

18
00:00:44,370 --> 00:00:46,059
- Hi, my name's Mark.

19
00:00:46,060 --> 00:00:50,020
And like you said, I'm a
security researcher at GitLab.

20
00:00:50,020 --> 00:00:51,840
And I like to play with technology

21
00:00:51,840 --> 00:00:56,040
whether I'm at work or not,
I love gadgets and devices.

22
00:00:56,040 --> 00:00:58,940
And today, I'm gonna be
talking about such a device,

23
00:00:58,940 --> 00:01:00,239
the hacker burner phone.

24
00:01:00,240 --> 00:01:04,519
Now a traditional burner
phone is intended to be tossed

25
00:01:04,519 --> 00:01:06,890
if the number is burned,

26
00:01:06,890 --> 00:01:10,800
think of those old cheap flip
phones, but a modern phone,

27
00:01:10,800 --> 00:01:13,869
it has five radios, four of them

28
00:01:13,870 --> 00:01:15,140
are capable of transmitting.

29
00:01:15,140 --> 00:01:18,290
And for the most part, as
long as the phone has power,

30
00:01:18,290 --> 00:01:20,300
it can disclose data and location

31
00:01:20,300 --> 00:01:23,520
to others via one of these radios.

32
00:01:23,520 --> 00:01:26,009
This information can be
gathered by data brokers

33
00:01:26,010 --> 00:01:27,700
and sold at any number of parties,

34
00:01:27,700 --> 00:01:30,030
including advertising agencies

35
00:01:30,030 --> 00:01:33,420
and even government agencies,
including law enforcement.

36
00:01:33,420 --> 00:01:36,310
With apps that constantly gather data,

37
00:01:36,310 --> 00:01:39,420
radios constantly broadcasting,

38
00:01:39,420 --> 00:01:41,320
it is no longer your phone number

39
00:01:41,320 --> 00:01:44,009
that is burned with the modern phone,

40
00:01:44,010 --> 00:01:46,270
you are the one that's burned.

41
00:01:46,270 --> 00:01:50,820
So, I did cover the technical details

42
00:01:50,820 --> 00:01:54,740
behind the data gathering
in a talk at BSidesDFW

43
00:01:54,740 --> 00:01:58,396
in November of 2020 in a presentation

44
00:02:01,110 --> 00:02:03,590
called "Your Phone Hates You."

45
00:02:03,590 --> 00:02:06,050
So, if you wanna get more
of the technical details

46
00:02:06,050 --> 00:02:08,350
on what I'm gonna cover
through here real quickly,

47
00:02:08,350 --> 00:02:12,269
just go to my website at markloveless.net,

48
00:02:12,270 --> 00:02:14,550
click on the YouTube icon
and you'll find the talk.

49
00:02:14,550 --> 00:02:18,500
But for today, I want you to
bear these things in mind.

50
00:02:18,500 --> 00:02:20,530
First, the modern phone is hoard

51
00:02:20,530 --> 00:02:22,853
for privacy and personal security.

52
00:02:23,770 --> 00:02:26,550
Any phone will begin to
build a digital footprint

53
00:02:26,550 --> 00:02:30,430
of its user, but combining separation

54
00:02:30,430 --> 00:02:31,969
of data with some OPSEC,

55
00:02:31,969 --> 00:02:36,969
one can create a completely
separate digital identity.

56
00:02:43,420 --> 00:02:45,179
And that's kind of the goal.

57
00:02:45,180 --> 00:02:47,840
Why a hacker burner phone?

58
00:02:47,840 --> 00:02:49,710
Here's some scenarios for that.

59
00:02:49,710 --> 00:02:52,410
A human rights worker, you
need to be in locations

60
00:02:52,410 --> 00:02:55,920
with an evil government
that's monitoring you.

61
00:02:55,920 --> 00:02:59,440
Use the burner during
sensitive operations.

62
00:02:59,440 --> 00:03:01,050
On the show "Billions",

63
00:03:01,050 --> 00:03:03,840
there is the Bobby Axelrod scenario.

64
00:03:03,840 --> 00:03:08,000
His tight group of
co-conspirators each have a burner

65
00:03:08,000 --> 00:03:10,330
only used for communication
between each other

66
00:03:10,330 --> 00:03:13,800
or shady web searches or whatnot.

67
00:03:13,800 --> 00:03:15,970
The OPSEC isn't rigid by any means,

68
00:03:15,970 --> 00:03:17,560
but they regularly swap out all

69
00:03:17,560 --> 00:03:19,593
of their burner phones all at once.

70
00:03:20,470 --> 00:03:23,350
If you attend protests, using a burner

71
00:03:23,350 --> 00:03:26,340
at the protest keeps you
in the loop with the world,

72
00:03:26,340 --> 00:03:29,210
but any government surveillance
that's happening with, say,

73
00:03:29,210 --> 00:03:33,153
with IMSI-catcher or stingers
will only get your burner.

74
00:03:34,220 --> 00:03:37,640
The security conference
attendee, which should apply

75
00:03:37,640 --> 00:03:41,029
to well, everyone here,
it should be obvious,

76
00:03:41,030 --> 00:03:43,650
but if you're attending a conference such

77
00:03:43,650 --> 00:03:46,363
as perhaps one in Vegas this summer,

78
00:03:48,800 --> 00:03:51,470
then you wanna protect yourself

79
00:03:51,470 --> 00:03:53,620
from a potential government monitoring,

80
00:03:53,620 --> 00:03:56,640
out of countries spies,
fellow attendees, et cetera,

81
00:03:56,640 --> 00:03:58,880
all can be covered via the burner

82
00:03:58,880 --> 00:04:00,560
while you are still able to communicate

83
00:04:00,560 --> 00:04:02,850
with your hacker friends.

84
00:04:02,850 --> 00:04:05,630
Now, to make your hacker burner phone,

85
00:04:05,630 --> 00:04:08,500
you have to figure out what phone to get.

86
00:04:08,500 --> 00:04:10,760
Think about memory customization,

87
00:04:10,760 --> 00:04:14,410
keep small footprint in mind
and whatever your budget is.

88
00:04:14,410 --> 00:04:16,540
My main phone is an iPhone,

89
00:04:16,540 --> 00:04:18,300
but based on my needs and my budget,

90
00:04:18,300 --> 00:04:20,863
I chose a Motorola Moto G7.

91
00:04:22,130 --> 00:04:24,390
Now, how do you get your burner

92
00:04:24,390 --> 00:04:26,289
and not have it traced back to you?

93
00:04:26,290 --> 00:04:29,640
That's interesting, the
steps I've come up with here

94
00:04:29,640 --> 00:04:34,640
are first, set up a ProtonMail
account via a personal VPN.

95
00:04:36,210 --> 00:04:39,180
Do this via a private
window in your browser,

96
00:04:39,180 --> 00:04:41,703
like Incognito in Chrome, for example.

97
00:04:42,890 --> 00:04:44,550
Don't send a test message

98
00:04:44,550 --> 00:04:47,270
to your regular email account to test it.

99
00:04:47,270 --> 00:04:48,729
That creates a link between you

100
00:04:48,730 --> 00:04:50,363
and the new ProtonMail account.

101
00:04:51,390 --> 00:04:55,000
Create an Amazon account
using your ProtonMail address.

102
00:04:55,000 --> 00:04:58,710
Then physically go to a store
that sells Visa gift cards

103
00:04:58,710 --> 00:05:01,159
and pay cash for those cards.

104
00:05:01,160 --> 00:05:02,950
You'll have to buy them in amounts

105
00:05:02,950 --> 00:05:07,740
of less than $300 as $300
triggers a security check

106
00:05:07,740 --> 00:05:09,450
or they ask for a driver's license,

107
00:05:09,450 --> 00:05:11,289
even if you're paying cash.

108
00:05:11,290 --> 00:05:14,063
This rule kind of applies in the U.S.

109
00:05:15,490 --> 00:05:18,713
Load the Amazon account up
with the Visa gift cards,

110
00:05:19,620 --> 00:05:23,260
order the phone for
delivery via Amazon Locker.

111
00:05:23,260 --> 00:05:25,969
Pick a Locker site you've never been to.

112
00:05:25,970 --> 00:05:28,460
The notification with your six digit code

113
00:05:28,460 --> 00:05:30,609
to get into your Locker
will come in email.

114
00:05:31,610 --> 00:05:34,240
Okay, now here's how you physically pick

115
00:05:34,240 --> 00:05:36,500
up the burner from the Amazon Locker.

116
00:05:36,500 --> 00:05:37,740
Bring a Faraday bag.

117
00:05:37,740 --> 00:05:39,110
And I cover Faraday bags

118
00:05:39,110 --> 00:05:43,150
in that BSidesDFW talk
I mentioned earlier.

119
00:05:43,150 --> 00:05:46,219
I recommend bags from either Silent Pocket

120
00:05:46,220 --> 00:05:49,220
or Mission Darkness, don't go cheap.

121
00:05:49,220 --> 00:05:51,700
The pandemic is awesome

122
00:05:51,700 --> 00:05:53,570
as you have an excuse to wear a mask,

123
00:05:53,570 --> 00:05:57,540
gloves, hats, sunglasses,
so no facial recognition.

124
00:05:57,540 --> 00:05:59,840
Leave your regular phone at home.

125
00:05:59,840 --> 00:06:01,260
Don't park in the parking lot

126
00:06:01,260 --> 00:06:02,659
'cause they'll have cameras there

127
00:06:02,660 --> 00:06:05,330
if you think about your
vehicle license plate.

128
00:06:05,330 --> 00:06:07,440
Park nearby and walk.

129
00:06:07,440 --> 00:06:09,070
Unbox the burner in the parking lot,

130
00:06:09,070 --> 00:06:10,190
remove the serial number

131
00:06:10,190 --> 00:06:13,180
that's printed on the box
for later secure disposal,

132
00:06:13,180 --> 00:06:15,630
toss the box and all of
that unwanted paperwork

133
00:06:15,630 --> 00:06:16,463
in the dumpster.

134
00:06:17,330 --> 00:06:19,320
Place your new burner
phone in the Faraday bag

135
00:06:19,320 --> 00:06:21,750
as the battery might have some juice.

136
00:06:21,750 --> 00:06:24,180
And keep it there when not in use.

137
00:06:24,180 --> 00:06:25,540
Now to configure things,

138
00:06:25,540 --> 00:06:30,540
I recommend you go someplace
with free wifi accessible

139
00:06:30,610 --> 00:06:31,723
from a parking lot,

140
00:06:32,970 --> 00:06:35,140
someplace where you never
take your regular phone.

141
00:06:35,140 --> 00:06:38,210
Disable everything except the wifi.

142
00:06:38,210 --> 00:06:40,239
Turn on every privacy setting possible.

143
00:06:40,240 --> 00:06:42,450
Lock things down really tight.

144
00:06:42,450 --> 00:06:47,010
Load up a personal VP like
a ProtonVPN, for example.

145
00:06:47,010 --> 00:06:49,993
Patch and delete all unused apps.

146
00:06:50,900 --> 00:06:52,780
Load on a secure browser,

147
00:06:52,780 --> 00:06:56,859
something maybe like a
Firefox Focus or Brave.

148
00:06:56,860 --> 00:07:01,043
Set your browser's default
search engine as DuckDuckGo.

149
00:07:02,440 --> 00:07:04,880
And if your burner is an iPhone,

150
00:07:04,880 --> 00:07:07,990
you might look into Disconnect.

151
00:07:07,990 --> 00:07:11,140
I think that's at
disconnect.me or disconnect.io.

152
00:07:11,140 --> 00:07:13,110
I can't remember which
off the top of my head.

153
00:07:13,110 --> 00:07:15,890
Anyway, now that you have your burner,

154
00:07:15,890 --> 00:07:18,130
here are some fun tips to keep in mind.

155
00:07:18,130 --> 00:07:20,570
Never have your burner outside

156
00:07:20,570 --> 00:07:23,270
of its Faraday bag near
your home or office

157
00:07:23,270 --> 00:07:25,719
and never out of the bag
near your regular phone.

158
00:07:26,860 --> 00:07:30,893
If the battery is removable,
remove it as much as possible.

159
00:07:31,970 --> 00:07:34,000
Only use the burner when it's required.

160
00:07:34,000 --> 00:07:37,240
So don't show it off or brag to friends.

161
00:07:37,240 --> 00:07:40,610
If you need to switch between
burner and regular phone,

162
00:07:40,610 --> 00:07:42,470
each should have its own Faraday bag

163
00:07:42,470 --> 00:07:45,033
and don't do it at the same place.

164
00:07:46,230 --> 00:07:48,280
Don't walk around with your burner out,

165
00:07:48,280 --> 00:07:51,260
and your Fitbit that speaks cellular,

166
00:07:51,260 --> 00:07:54,082
that kinda defeats the
entire purpose of this.

167
00:07:55,250 --> 00:07:58,170
Never use your burner to
access accounts associated

168
00:07:58,170 --> 00:08:01,093
with you, especially social media.

169
00:08:01,980 --> 00:08:04,110
And that's pretty much it

170
00:08:04,110 --> 00:08:08,064
as far as the hacker burner phone goes.

171
00:08:08,064 --> 00:08:13,064
I will be doing a blog post
on this coming up fairly quick

172
00:08:14,040 --> 00:08:19,040
and you can certainly
ask me questions via here

173
00:08:22,410 --> 00:08:25,840
or if you don't feel like
putting 'em up in a public forum,

174
00:08:25,840 --> 00:08:28,140
you can contact me via Twitter

175
00:08:29,140 --> 00:08:33,622
or via my website at markloveless.net.

176
00:08:34,960 --> 00:08:37,190
And there you have it.
- [Sam] Thank you so much.

177
00:08:37,190 --> 00:08:38,240
That was really cool.

178
00:08:39,240 --> 00:08:42,929
And then honestly, great
URL for your website.

179
00:08:42,929 --> 00:08:44,829
So pretty easy to find you.

180
00:08:44,830 --> 00:08:45,920
I know that we have a couple

181
00:08:45,920 --> 00:08:49,890
of quick questions that people were asking

182
00:08:49,890 --> 00:08:51,699
before this talk started.

183
00:08:51,700 --> 00:08:53,827
So one of them was, all right,

184
00:08:53,827 --> 00:08:56,907
"If I remove my SIM is that
gonna defeat, you know,

185
00:08:56,907 --> 00:08:59,557
"all cellular communications
with this burner phone?"

186
00:09:01,050 --> 00:09:05,329
- No, no, it's not simply because
there's two parts to that.

187
00:09:05,330 --> 00:09:08,360
There's the IMSI which
is stored on the SIM,

188
00:09:08,360 --> 00:09:12,250
and then there's the IMEI, which stands

189
00:09:12,250 --> 00:09:15,820
for International Mobile
Equipment Identification.

190
00:09:15,820 --> 00:09:17,520
I believe it's what it stands for.

191
00:09:18,490 --> 00:09:21,250
That one is a unique number
tied to your hardware.

192
00:09:21,250 --> 00:09:24,100
With that, that's why we're
able to not have a SIM in there

193
00:09:24,100 --> 00:09:27,740
and still be able to make 911 calls

194
00:09:27,740 --> 00:09:30,550
or receive Amber Alerts or weather alerts

195
00:09:30,550 --> 00:09:33,050
and stuff like that on the phone.

196
00:09:33,050 --> 00:09:35,829
So it still allows for communication.

197
00:09:35,830 --> 00:09:37,810
And obviously it's hitting a cell tower.

198
00:09:37,810 --> 00:09:39,910
So technically, it's still traceable.

199
00:09:39,910 --> 00:09:41,240
- [Sam] Yeah, 'cause
you see in the movies,

200
00:09:41,240 --> 00:09:42,380
they take the SIM card out

201
00:09:42,380 --> 00:09:44,460
and they bite it or something
and it's like, okay.

202
00:09:44,460 --> 00:09:47,951
- Yeah, oh, that took care
of exactly half the problem.

203
00:09:47,951 --> 00:09:51,830
- [Sam] (laughs) Yeah, we got a couple of,

204
00:09:51,830 --> 00:09:52,857
I like this one question here,

205
00:09:52,857 --> 00:09:54,587
"Any tips on hiding facial identity

206
00:09:54,587 --> 00:09:55,896
"when picking up the phones

207
00:09:55,897 --> 00:10:00,350
"after pandemic masks
sort of become unusual?"

208
00:10:00,350 --> 00:10:04,620
- Well, I'm planning on
wearing a facial mask,

209
00:10:04,620 --> 00:10:08,040
and then if anyone asks
anything, I'm just gonna say, oh,

210
00:10:08,040 --> 00:10:13,040
I'm allergic to the
vaccine, I can't take it.

211
00:10:13,364 --> 00:10:15,970
(laughs) And I'm just
continue to wear the mask.

212
00:10:15,970 --> 00:10:18,830
I planned on doing that as soon
as we started wearing masks.

213
00:10:18,830 --> 00:10:21,600
So (laughs) I don't know, at
some point this will go away,

214
00:10:21,600 --> 00:10:24,190
but this is just too awesome.
- [Sam] 7-Eleven and it's,

215
00:10:24,190 --> 00:10:28,060
I'm allergic to the hot
dogs that are sitting there.

216
00:10:28,060 --> 00:10:29,430
- Yeah.
- [Sam] I wanna

217
00:10:29,430 --> 00:10:32,479
the 7-Eleven pizzas.
- Yeah, exactly.

218
00:10:32,480 --> 00:10:34,630
There you go, that's it.

219
00:10:34,630 --> 00:10:35,780
- [Sam] Let's see here.

220
00:10:38,200 --> 00:10:41,520
Yeah, I think one other
question we had was essentially

221
00:10:41,520 --> 00:10:43,370
are there any sort of recommended apps

222
00:10:43,370 --> 00:10:45,510
for the burner that you had
that you, you covered one,

223
00:10:45,510 --> 00:10:50,510
but what other?
- I would recommend Signal

224
00:10:52,140 --> 00:10:55,903
would be one for encrypted communication.

225
00:10:57,080 --> 00:11:00,370
There are apps that allow for, let's say,

226
00:11:00,370 --> 00:11:05,370
you can store the entirety
of Wikipedia offline.

227
00:11:06,810 --> 00:11:09,630
You can store it on your
phone, things like that.

228
00:11:09,630 --> 00:11:12,660
Maybe there's some mapping
software that does exist

229
00:11:12,660 --> 00:11:14,449
where you can store maps.

230
00:11:14,450 --> 00:11:17,360
So, that way you can get
around using the phone,

231
00:11:17,360 --> 00:11:19,020
but you don't have to necessarily be tied

232
00:11:19,020 --> 00:11:21,293
to having GPS active and that kinda stuff.

233
00:11:23,490 --> 00:11:25,820
- [Sam] I think we might have
time for one more question.

234
00:11:25,820 --> 00:11:28,198
Obviously, RSA can call me out

235
00:11:28,198 --> 00:11:29,590
if we don't have any more time,

236
00:11:29,590 --> 00:11:31,840
but essentially I do
like this other question

237
00:11:31,840 --> 00:11:35,310
about essentially where could one

238
00:11:35,310 --> 00:11:38,084
even consult legality on this?

239
00:11:38,084 --> 00:11:40,969
Or is there a legal issues
to be concerned about

240
00:11:40,970 --> 00:11:42,820
when trying to set up a burner phone?

241
00:11:45,870 --> 00:11:48,070
- That I don't know, I don't know.

242
00:11:48,070 --> 00:11:51,270
That'll probably play itself out in court.

243
00:11:51,270 --> 00:11:54,100
There is nothing that I'm mentioning

244
00:11:54,100 --> 00:11:59,100
in this at all that necessarily says

245
00:11:59,330 --> 00:12:01,970
that I'm gonna go and commit
illegal acts with that.

246
00:12:01,970 --> 00:12:06,580
Now that being said, it
does look awfully suspicious

247
00:12:06,580 --> 00:12:10,010
if you're picked up for
potentially committing crime

248
00:12:10,010 --> 00:12:13,900
and you've got this elaborate
burner phone set up.

249
00:12:13,900 --> 00:12:18,120
But the main thing I'm thinking
about it is for privacy.

250
00:12:18,120 --> 00:12:21,490
And so for that, I don't
think it's much of a problem.

251
00:12:21,490 --> 00:12:25,633
And I'd say contribute to the
EFF, they are your friends.

252
00:12:27,290 --> 00:12:32,290
- [Sam] Right on, oh, there's
a question here sort of

253
00:12:33,010 --> 00:12:38,010
about even using prepaid cards over time,

254
00:12:38,520 --> 00:12:43,520
it does get trackable, that
question sort of going into,

255
00:12:43,740 --> 00:12:46,690
I guess, a subscription or making sure

256
00:12:46,690 --> 00:12:51,480
that your phone plan is
paid for and sort of--

257
00:12:51,480 --> 00:12:54,860
- For me, I wasn't even
gonna have a phone plan.

258
00:12:54,860 --> 00:12:59,613
I was just basically gonna use
it just for the wifi access.

259
00:13:01,860 --> 00:13:04,300
So for me, it wasn't
too much of a big deal.

260
00:13:04,300 --> 00:13:06,099
And all things considered,

261
00:13:06,100 --> 00:13:08,750
you could just conceivably
just keep moving on and on,

262
00:13:08,750 --> 00:13:13,750
and just (laughs) continually
switching out the identity

263
00:13:16,250 --> 00:13:18,010
and getting a new phone.

264
00:13:18,010 --> 00:13:20,050
- Awesome, well, hey
Mark, thank you so much,

265
00:13:20,050 --> 00:13:22,260
again everyone can contact Mark.

266
00:13:22,260 --> 00:13:23,520
We're moving onto the next speaker.

267
00:13:23,520 --> 00:13:27,240
This is the Lightning Talks and
we got to go lightning fast.

268
00:13:27,240 --> 00:13:30,640
So next up we have John Gleason

269
00:13:30,640 --> 00:13:33,843
who is a senior dev ops engineer at ISE,

270
00:13:34,890 --> 00:13:38,090
and he leverages his unbridled enthusiasm

271
00:13:38,090 --> 00:13:39,900
for system automation to build

272
00:13:39,900 --> 00:13:41,819
and operate cloud hosting platforms.

273
00:13:41,820 --> 00:13:43,403
So John, please take it away.

274
00:13:44,650 --> 00:13:46,643
- Thanks Sam, and thanks,
Mark, for your talk.

275
00:13:46,643 --> 00:13:48,973
That was super exciting.

276
00:13:49,920 --> 00:13:53,293
I am gonna talk today a
little bit about high level,

277
00:13:54,300 --> 00:13:56,990
I don't know, I have a high
level diatribe on automation.

278
00:13:56,990 --> 00:14:00,330
And it's not gonna get into any specifics,

279
00:14:00,330 --> 00:14:02,830
but I'm excited to just
rant for a few minutes

280
00:14:02,830 --> 00:14:04,630
and hopefully answer some questions.

281
00:14:05,870 --> 00:14:07,840
During my talk, I'm not going to advocate

282
00:14:07,840 --> 00:14:10,190
for any specific tool, although
there will be references

283
00:14:10,190 --> 00:14:13,750
to tools and things that I use personally.

284
00:14:13,750 --> 00:14:15,400
The major takeaway from my talk

285
00:14:15,400 --> 00:14:17,470
should be a general approach,

286
00:14:17,470 --> 00:14:20,640
an architectural process or mindset.

287
00:14:20,640 --> 00:14:24,393
So without regards to any
specific tools or implementation.

288
00:14:25,788 --> 00:14:28,343
Give me just a second, I
have to move my screen.

289
00:14:30,980 --> 00:14:34,373
Oh no, I'm burning my
seven minutes, okay, fixed.

290
00:14:35,920 --> 00:14:39,819
All right, so to kick it
off, I have a quick story

291
00:14:39,820 --> 00:14:42,320
of an early career epiphany that I had.

292
00:14:42,320 --> 00:14:45,540
I would sort of shape my
approach for several years.

293
00:14:45,540 --> 00:14:48,010
It might not be terribly groundbreaking

294
00:14:48,010 --> 00:14:49,870
and there's a small
chance for some pitchforks

295
00:14:49,870 --> 00:14:51,510
from some members of audience.

296
00:14:51,510 --> 00:14:53,730
But I have been advocating this mindset

297
00:14:53,730 --> 00:14:55,370
within my teams for a while now.

298
00:14:55,370 --> 00:14:57,600
And I feel like it's worthy
of a little recognition.

299
00:14:57,600 --> 00:14:58,493
So here we go.

300
00:14:59,340 --> 00:15:00,670
A large portion of my background

301
00:15:00,670 --> 00:15:02,319
is in Windows server administration.

302
00:15:02,320 --> 00:15:05,710
And I wrote and continue to
write a lot of PowerShell

303
00:15:05,710 --> 00:15:08,120
to facilitate operational activities.

304
00:15:08,120 --> 00:15:10,860
I could configure entire
server farms from image boot

305
00:15:10,860 --> 00:15:14,320
to running application with
very little interaction.

306
00:15:14,320 --> 00:15:16,350
I automate business continuity

307
00:15:16,350 --> 00:15:18,120
and disaster recovery activities

308
00:15:18,120 --> 00:15:21,190
and application fail over and
high availability mechanisms

309
00:15:21,190 --> 00:15:25,143
for both initial configuration
as well as daily operations.

310
00:15:26,030 --> 00:15:27,459
Another specific example

311
00:15:27,460 --> 00:15:29,360
is I could perform no downtime patching

312
00:15:29,360 --> 00:15:32,400
of Windows applications
in entire server farms

313
00:15:32,400 --> 00:15:37,400
and continued to do stuff
like that every day.

314
00:15:39,510 --> 00:15:41,920
The things that I mentioned
just now I did almost entirely

315
00:15:41,920 --> 00:15:43,829
before I ever touched the CI/CD pipeline,

316
00:15:43,830 --> 00:15:45,970
before I ever knew how to use Git

317
00:15:45,970 --> 00:15:47,690
or how code commit worked.

318
00:15:47,690 --> 00:15:50,500
And most of my scripts
and systems were built

319
00:15:50,500 --> 00:15:54,000
and deployed by hand
for their initial setup,

320
00:15:54,000 --> 00:15:56,300
and of course maintained over time.

321
00:15:56,300 --> 00:15:57,740
I kept them on my local system

322
00:15:57,740 --> 00:16:00,980
and I had to copy them up via RDP

323
00:16:00,980 --> 00:16:03,433
or any other mechanism
that I had access to.

324
00:16:04,806 --> 00:16:05,639
Then one day, I was doing some research

325
00:16:05,639 --> 00:16:08,290
and came across Jenkins, a tutorial video,

326
00:16:08,290 --> 00:16:12,480
and watch kinda how they set
it up to perform code build

327
00:16:12,480 --> 00:16:14,823
and deployment in
response to a code commit.

328
00:16:15,720 --> 00:16:18,530
Now, this type of thing is not
new, but for me at the time,

329
00:16:18,530 --> 00:16:19,900
it sort of clicked in my mind.

330
00:16:19,900 --> 00:16:22,530
What sort of clicked was all the code

331
00:16:22,530 --> 00:16:25,140
that I write controls infrastructure.

332
00:16:25,140 --> 00:16:27,850
So that means that my
infrastructure can be automated

333
00:16:27,850 --> 00:16:29,480
from this platform.

334
00:16:29,480 --> 00:16:31,470
And yeah, of course,
infrastructure is code

335
00:16:31,470 --> 00:16:33,890
and things like GitOps are terms now

336
00:16:33,890 --> 00:16:35,180
that get thrown around a lot.

337
00:16:35,180 --> 00:16:37,839
But for me, this was pretty groundbreaking

338
00:16:37,840 --> 00:16:42,280
before I really realized
what I was stumbling upon.

339
00:16:42,280 --> 00:16:45,760
While everyone was calling
Jenkins and other systems

340
00:16:45,760 --> 00:16:49,150
like GitLab or GitHub's CI/CD platforms

341
00:16:50,560 --> 00:16:54,329
or build tools or software
development lifecycle tools,

342
00:16:54,330 --> 00:16:56,060
my mind was immediately drawn to the fact

343
00:16:56,060 --> 00:16:58,910
that it was really a
general automation tool.

344
00:16:58,910 --> 00:17:00,400
It just happens to be used

345
00:17:00,400 --> 00:17:03,410
for software development life cycle tasks.

346
00:17:03,410 --> 00:17:05,740
It was all downhill for me from there

347
00:17:05,740 --> 00:17:08,290
because I personally,

348
00:17:08,290 --> 00:17:11,550
and while I've personally grown
organically towards GitLab,

349
00:17:11,550 --> 00:17:14,079
the tool itself doesn't really matter.

350
00:17:14,079 --> 00:17:16,869
It's about the idea that
if you have a problem

351
00:17:16,869 --> 00:17:18,780
that you can define as a script

352
00:17:18,780 --> 00:17:21,609
or a collection of scripts or tools,

353
00:17:21,609 --> 00:17:23,929
you can use those as building blocks

354
00:17:23,930 --> 00:17:28,930
to automate problems or issues or tasks

355
00:17:28,970 --> 00:17:30,220
using the same techniques

356
00:17:30,220 --> 00:17:33,490
that we use in the software
development life cycle.

357
00:17:33,490 --> 00:17:35,830
So, the same epiphany
of course has been had.

358
00:17:35,830 --> 00:17:37,849
It's not unique to me.

359
00:17:37,849 --> 00:17:39,899
GitOps and infrastructure
as code are not new.

360
00:17:39,900 --> 00:17:41,930
But my takeaway for you today

361
00:17:41,930 --> 00:17:43,240
is to think a little bit bigger.

362
00:17:43,240 --> 00:17:45,330
Your company's CI/CD platform

363
00:17:45,330 --> 00:17:46,909
could be used to automate anything

364
00:17:46,910 --> 00:17:48,960
that you can define in code,

365
00:17:48,960 --> 00:17:51,280
any collection of repeatable actions

366
00:17:51,280 --> 00:17:55,610
or John tasks that you have
in code can be built in a way

367
00:17:55,610 --> 00:17:58,010
to leverage that automation capability

368
00:17:58,010 --> 00:18:00,379
of your CI/CD pipeline tools.

369
00:18:00,380 --> 00:18:05,290
So the next I want to
talk over some, oh boy,

370
00:18:05,290 --> 00:18:06,840
awesome, my eyes spot (laughs).

371
00:18:14,570 --> 00:18:16,710
I'm gonna talk over
some major bullet points

372
00:18:16,710 --> 00:18:20,240
to follow when taking this
approach that I'm outlining.

373
00:18:20,240 --> 00:18:21,680
I'm not gonna read my slides.

374
00:18:21,680 --> 00:18:23,750
You can read them while they're there,

375
00:18:23,750 --> 00:18:26,110
but I'll touch base on most of them.

376
00:18:26,110 --> 00:18:29,129
Just consider my slide and
those bullet points supporting

377
00:18:29,130 --> 00:18:30,680
to these points.

378
00:18:30,680 --> 00:18:32,900
So, number one, the key takeaway

379
00:18:32,900 --> 00:18:35,900
is from a mindset perspective,
automate everything.

380
00:18:35,900 --> 00:18:37,120
And I don't say this lightly.

381
00:18:37,120 --> 00:18:39,379
I firmly believe that if
the action is worth doing,

382
00:18:39,380 --> 00:18:42,010
it's worth having a
repeatable process for.

383
00:18:42,010 --> 00:18:43,610
Now, it's up to you as a manager

384
00:18:43,610 --> 00:18:45,639
or a developer or a department

385
00:18:45,640 --> 00:18:48,450
to determine the smallest unit of tasks

386
00:18:48,450 --> 00:18:50,630
that are actually worth being repeated.

387
00:18:50,630 --> 00:18:53,840
But as a rule of thumb,
if you can, automate it.

388
00:18:53,840 --> 00:18:56,919
Source control everything,
even small scripts.

389
00:18:56,920 --> 00:18:58,280
If you are going to script

390
00:18:58,280 --> 00:19:00,230
or write a repeatable tool or process,

391
00:19:00,230 --> 00:19:02,440
the code can't be hoarded on local systems

392
00:19:02,440 --> 00:19:04,860
like I did when I was starting out.

393
00:19:04,860 --> 00:19:06,733
Commit them, even the small things,

394
00:19:08,040 --> 00:19:10,270
even the small single use
scripts to source control.

395
00:19:10,270 --> 00:19:12,400
And I recommend this
for a couple of reasons.

396
00:19:12,400 --> 00:19:14,370
One, obvious, repeatability,

397
00:19:14,370 --> 00:19:16,330
you never know when you
might need something again,

398
00:19:16,330 --> 00:19:19,570
and two, code review for automation tools.

399
00:19:19,570 --> 00:19:20,403
If you're doing it right,

400
00:19:20,403 --> 00:19:21,490
your automation pipelines

401
00:19:21,490 --> 00:19:23,710
will likely end up touching
production systems.

402
00:19:23,710 --> 00:19:26,810
So, testing and review is paramount.

403
00:19:26,810 --> 00:19:29,990
There's sort of a third
hidden benefit as well.

404
00:19:29,990 --> 00:19:32,340
With enough small component scripts,

405
00:19:32,340 --> 00:19:35,770
you'll over time build out
this library of capabilities.

406
00:19:35,770 --> 00:19:38,830
You'll be able to choose from
when creating new systems,

407
00:19:38,830 --> 00:19:40,283
sort of like building blocks.

408
00:19:41,380 --> 00:19:43,830
A library of everything that you create,

409
00:19:43,830 --> 00:19:46,909
you create with repeatability
and modularity in mind.

410
00:19:46,910 --> 00:19:48,820
You'll be able to use
them for new projects

411
00:19:48,820 --> 00:19:52,939
while maintaining a
familiarity and a common ground

412
00:19:52,940 --> 00:19:55,080
ever growing tool set.

413
00:19:55,080 --> 00:19:57,720
This mindset for committing
even small scripts

414
00:19:57,720 --> 00:20:00,050
to source control affords you a way

415
00:20:00,050 --> 00:20:03,070
to think about problems
as discreet actions.

416
00:20:03,070 --> 00:20:06,570
And from those discreet actions,
you'll be able to architect

417
00:20:06,570 --> 00:20:09,510
and draw out workflows
for the task at hand.

418
00:20:09,510 --> 00:20:13,063
Using the common language of your scripts,

419
00:20:13,063 --> 00:20:15,000
you'll build a workflow,

420
00:20:15,000 --> 00:20:16,390
and these workflows are how you end up

421
00:20:16,390 --> 00:20:19,130
defining your CI/CD tools pipeline

422
00:20:19,130 --> 00:20:21,580
to construct your automation system.

423
00:20:21,580 --> 00:20:22,960
When writing these scripts, I found

424
00:20:22,960 --> 00:20:26,170
that it's important to build
assumptions into the defaults.

425
00:20:26,170 --> 00:20:29,480
Allow for configuration or
parameterized overrides,

426
00:20:29,480 --> 00:20:31,623
but the scripts should be opinionated.

427
00:20:33,230 --> 00:20:36,710
This way, the default behavior
is the most common use case.

428
00:20:36,710 --> 00:20:39,820
What you want, you can derive
input and output tolerances

429
00:20:39,820 --> 00:20:40,840
based on future needs.

430
00:20:40,840 --> 00:20:43,990
So, essentially what that
means is have some inputs

431
00:20:43,990 --> 00:20:47,640
that are defaulted and
then allow the script grow

432
00:20:47,640 --> 00:20:51,590
or contract or shrink, depending
on what you might need.

433
00:20:51,590 --> 00:20:55,129
Don't go too overboard in
handling every edge case.

434
00:20:55,130 --> 00:20:58,913
Just make sure that you
have a solid default state.

435
00:21:01,700 --> 00:21:03,260
Solve for the problem now

436
00:21:03,260 --> 00:21:05,500
with a mind for iteration in the future.

437
00:21:05,500 --> 00:21:06,870
You'll likely never be complete

438
00:21:06,870 --> 00:21:09,870
because you will continuously
wanna improve the process

439
00:21:09,870 --> 00:21:12,419
and your pipelines will change over time,

440
00:21:12,420 --> 00:21:15,170
but with your defined issues
and tasks being solved

441
00:21:15,170 --> 00:21:17,310
with source controlled
automation pipelines,

442
00:21:17,310 --> 00:21:20,190
you immediately and without
additional overhead,

443
00:21:20,190 --> 00:21:21,960
get the visibility and traceability

444
00:21:21,960 --> 00:21:24,750
that source code repository
is afforded software teams.

445
00:21:24,750 --> 00:21:27,440
Not only do you know
when a commit was made

446
00:21:28,290 --> 00:21:29,940
that triggered some environment change

447
00:21:29,940 --> 00:21:31,040
or triggered some process,

448
00:21:31,040 --> 00:21:33,159
you also know who performed that change.

449
00:21:33,160 --> 00:21:35,720
And if something isn't right
about the output of the system,

450
00:21:35,720 --> 00:21:38,700
you can simply fix it
in code, commit again,

451
00:21:38,700 --> 00:21:42,790
and the pipeline will run, and
the automation will take care

452
00:21:42,790 --> 00:21:44,230
of the state of the system.

453
00:21:44,230 --> 00:21:48,250
This is a desired state or a
declarative state type of way

454
00:21:48,250 --> 00:21:49,970
of thinking about things.

455
00:21:49,970 --> 00:21:51,310
You can configure your pipelines

456
00:21:51,310 --> 00:21:53,260
to support different environment layers

457
00:21:53,260 --> 00:21:55,910
for testing of automation pipelines.

458
00:21:55,910 --> 00:21:58,390
Think prod and non-prod environments.

459
00:21:58,390 --> 00:22:00,680
You use that with a branch

460
00:22:00,680 --> 00:22:04,530
or a tag style system in source control.

461
00:22:04,530 --> 00:22:06,899
And it's a really neat way

462
00:22:06,900 --> 00:22:09,030
of going about building
automation systems.

463
00:22:09,030 --> 00:22:12,389
I personally advocate for it
based on nearly five years

464
00:22:12,390 --> 00:22:14,903
of cloud production usage.

465
00:22:16,570 --> 00:22:21,570
It can be used for internal
internal systems as well.

466
00:22:21,810 --> 00:22:23,510
And I'm running out of time,

467
00:22:23,510 --> 00:22:27,160
but I do wanna touch briefly

468
00:22:27,160 --> 00:22:29,300
on a couple of challenges that come up.

469
00:22:29,300 --> 00:22:31,669
The security challenge is one.

470
00:22:31,670 --> 00:22:34,090
And the reason it is, is because depending

471
00:22:34,090 --> 00:22:36,449
on the configuration of the GitLab

472
00:22:36,450 --> 00:22:40,543
or Jenkins or whatever
automation pipeline you're using,

473
00:22:41,380 --> 00:22:44,110
you have to really have
some strong foundation

474
00:22:44,110 --> 00:22:45,969
around role-based access control

475
00:22:46,900 --> 00:22:49,490
and iteration time can be a
little bit of a challenge,

476
00:22:49,490 --> 00:22:52,580
basically just how long
it takes to make a change,

477
00:22:52,580 --> 00:22:55,580
commit it, and then have the pipeline run.

478
00:22:55,580 --> 00:22:59,250
So I will go ahead and call it there.

479
00:22:59,250 --> 00:23:02,640
That's my slide, my topic,
and my presentation.

480
00:23:02,640 --> 00:23:04,700
And then I'll turn it over for questions.

481
00:23:04,700 --> 00:23:08,060
- Hey, thank you so much,
John, let's see here.

482
00:23:08,060 --> 00:23:11,348
One of the questions we had was kind of,

483
00:23:11,348 --> 00:23:14,639
"How do you know when an
automation project is done?"

484
00:23:14,640 --> 00:23:16,970
- Yeah, that's a bit of a trick question,

485
00:23:16,970 --> 00:23:21,970
and really you automate a
task so that you can say

486
00:23:22,900 --> 00:23:25,410
that you don't have to do
it manually in the future,

487
00:23:25,410 --> 00:23:27,210
that makes the task complete.

488
00:23:27,210 --> 00:23:29,790
The automation project itself likely

489
00:23:29,790 --> 00:23:31,430
will always need a little bit of tweaking,

490
00:23:31,430 --> 00:23:33,190
a little bit of iteration.

491
00:23:33,190 --> 00:23:36,450
So really it comes down
to maintaining a backlog,

492
00:23:36,450 --> 00:23:38,960
just like any other software
development life cycle

493
00:23:41,577 --> 00:23:43,520
or software development project.

494
00:23:43,520 --> 00:23:46,610
You'll probably never be done,
but you will get to a point

495
00:23:46,610 --> 00:23:49,673
that is sufficient for the use case.

496
00:23:51,230 --> 00:23:52,210
Particularly when you're talking

497
00:23:52,210 --> 00:23:56,240
about building out a tool set
or a collection, a library,

498
00:23:56,240 --> 00:23:59,240
you will always want to iterate on that.

499
00:23:59,240 --> 00:24:01,790
So you're never really done,

500
00:24:01,790 --> 00:24:05,980
but you can get to a
point where the pipeline

501
00:24:05,980 --> 00:24:08,680
that you've built is doing
what you want it to do, so.

502
00:24:09,530 --> 00:24:11,950
- All right, cool, and I
think one last question

503
00:24:11,950 --> 00:24:15,687
before we move on, which is
from Paul Vincent, he's asking,

504
00:24:15,687 --> 00:24:18,526
"What if automation costs more
than just doing it manually,

505
00:24:18,527 --> 00:24:20,550
"at least for the
foreseeable future, right?"

506
00:24:20,550 --> 00:24:22,360
- Yeah, yeah, that's a balance.

507
00:24:22,360 --> 00:24:25,010
You really do have to think about that.

508
00:24:25,010 --> 00:24:29,250
And it's probably gonna
end up on some sort

509
00:24:29,250 --> 00:24:31,930
of graph somewhere and it
might even behoove of you

510
00:24:31,930 --> 00:24:33,410
while you're thinking about a project

511
00:24:33,410 --> 00:24:34,810
to try and graph it out,

512
00:24:34,810 --> 00:24:37,860
because if it takes you
10 hours to do a project

513
00:24:37,860 --> 00:24:41,870
that automates a 10 minute process,

514
00:24:41,870 --> 00:24:45,239
you don't really reap benefits

515
00:24:45,240 --> 00:24:48,230
from the automation for several years,

516
00:24:48,230 --> 00:24:49,650
depending on how
frequently the problem is.

517
00:24:49,650 --> 00:24:54,270
So, the idea, the mindset
is to automate everything,

518
00:24:54,270 --> 00:24:59,120
but of course, individual
tolerances and teams

519
00:24:59,120 --> 00:25:03,582
and consideration is
required for every project.

520
00:25:05,660 --> 00:25:07,240
- Right on, I think we actually

521
00:25:07,240 --> 00:25:10,610
have at least 30 seconds left.

522
00:25:10,610 --> 00:25:12,810
And I know that there was a topic here

523
00:25:12,810 --> 00:25:14,510
that we were talking about earlier,

524
00:25:14,510 --> 00:25:18,140
which was how do you get
support from security teams

525
00:25:18,140 --> 00:25:20,140
or clients teams with automation

526
00:25:20,140 --> 00:25:22,463
for that last question alone?

527
00:25:23,441 --> 00:25:26,840
- Security teams and compliance
teams should love this idea

528
00:25:26,840 --> 00:25:31,139
because you gain visibility,

529
00:25:31,140 --> 00:25:34,530
you gain repeatability,
you gain traceability,

530
00:25:34,530 --> 00:25:39,530
everything that a source code
management system affords

531
00:25:40,510 --> 00:25:41,980
a software development team,

532
00:25:41,980 --> 00:25:46,700
you can leverage as an infrastructure

533
00:25:46,700 --> 00:25:48,870
or as an automation pipeline team.

534
00:25:48,870 --> 00:25:52,419
And security will reap
the benefits from that

535
00:25:52,420 --> 00:25:54,973
if they are involved
in the decision making.

536
00:25:56,380 --> 00:25:59,760
Platforms such as GitLab
afford environment variables

537
00:25:59,760 --> 00:26:01,180
and secrets that can be masked.

538
00:26:01,180 --> 00:26:03,150
And so there's a ton of ways

539
00:26:03,150 --> 00:26:07,520
to securely create these pipelines,

540
00:26:07,520 --> 00:26:12,450
including with the use of
sensitive credentials and secrets.

541
00:26:12,450 --> 00:26:15,920
So, that's how you do it.

542
00:26:15,920 --> 00:26:17,540
Involve your security teams

543
00:26:17,540 --> 00:26:21,330
and involve your compliance
teams in the design process.

544
00:26:21,330 --> 00:26:26,330
Show them how the process
improves their goals.

545
00:26:27,380 --> 00:26:29,430
Because it does.
- Thank you so much, John,

546
00:26:29,430 --> 00:26:33,273
and got to love that, GitHub,
not GitHub, GitLab, blah.

547
00:26:36,310 --> 00:26:38,629
So, love for GitLab.
- Thanks, Sam.

548
00:26:38,630 --> 00:26:41,150
- Let's see here, we'll
move on to our next

549
00:26:41,150 --> 00:26:43,870
and final speaker of the
day for this session,

550
00:26:43,870 --> 00:26:47,090
and that is gonna be Keith Rebello,

551
00:26:47,090 --> 00:26:50,550
who has the best job in the
world as a program manager

552
00:26:50,550 --> 00:26:54,780
at the Defense Advanced
Research Projects Agency,

553
00:26:54,780 --> 00:26:56,463
might know it as DARPA,

554
00:26:57,360 --> 00:26:59,709
where he is creating the
future of hardware security.

555
00:26:59,710 --> 00:27:01,743
So with that, Keith, take it away.

556
00:27:02,930 --> 00:27:07,693
- Thanks, Sam, I packed a lot
in here, so let's get into it.

557
00:27:09,630 --> 00:27:11,600
So, when we think of security,

558
00:27:11,600 --> 00:27:14,300
we normally think of software, right?

559
00:27:14,300 --> 00:27:16,940
There are vulnerabilities
in software that are tacked

560
00:27:16,940 --> 00:27:21,350
with software exploits that are
fixed with software patches,

561
00:27:21,350 --> 00:27:22,949
but I'm here to tell you

562
00:27:22,950 --> 00:27:25,400
that we should really be
thinking about hardware.

563
00:27:26,300 --> 00:27:29,870
The plot on your screen shows
data from Mandiant FireEye

564
00:27:29,870 --> 00:27:32,219
who looked at 60
vulnerabilities discovered

565
00:27:32,220 --> 00:27:34,300
from 2018 to 2020.

566
00:27:34,300 --> 00:27:36,389
For each, they analyzed
the time difference

567
00:27:36,390 --> 00:27:37,870
between when a patch was issued

568
00:27:37,870 --> 00:27:39,649
and the first time that that vulnerability

569
00:27:39,650 --> 00:27:41,820
was exploited in the wild.

570
00:27:41,820 --> 00:27:44,310
These results show the
failure of software patching

571
00:27:44,310 --> 00:27:45,990
to keep us secure.

572
00:27:45,990 --> 00:27:48,640
On the right side of the graph
are zero day vulnerabilities

573
00:27:48,640 --> 00:27:50,050
which are discovered and exploited

574
00:27:50,050 --> 00:27:53,310
by attackers before a
software patch is available.

575
00:27:53,310 --> 00:27:54,480
In some cases, attackers

576
00:27:54,480 --> 00:27:56,690
were exploiting these
vulnerabilities for months

577
00:27:56,690 --> 00:27:58,823
or years before defenders discovered them.

578
00:27:59,760 --> 00:28:01,180
On the left side of the graph,

579
00:28:01,180 --> 00:28:04,470
our vulnerabilities for
which patches already existed

580
00:28:04,470 --> 00:28:06,230
but where attackers still found success

581
00:28:06,230 --> 00:28:09,160
in developing and using
exploits for the vulnerabilities

582
00:28:09,160 --> 00:28:11,560
after software patches were available.

583
00:28:11,560 --> 00:28:13,350
How are they successful?

584
00:28:13,350 --> 00:28:15,139
Well, the reality is that even

585
00:28:15,140 --> 00:28:16,870
when a software patch is available,

586
00:28:16,870 --> 00:28:19,399
patch deployment is often incomplete.

587
00:28:19,400 --> 00:28:21,490
Systems can remain
unpatched and vulnerable

588
00:28:21,490 --> 00:28:24,730
for months or years after a
vulnerability is disclosed.

589
00:28:24,730 --> 00:28:27,020
This problem is especially
pronounced for embedded

590
00:28:27,020 --> 00:28:30,129
in IOT systems where it can be
very difficult to incorporate

591
00:28:30,130 --> 00:28:31,883
and roll out software patches.

592
00:28:33,140 --> 00:28:35,530
So, we know that software
patching doesn't work,

593
00:28:35,530 --> 00:28:38,170
but how can we do a better job?

594
00:28:38,170 --> 00:28:41,290
At DARPA, we decided to look
at the root of the problem,

595
00:28:41,290 --> 00:28:44,820
the hardware, when an attacker
exploits a vulnerability,

596
00:28:44,820 --> 00:28:47,220
they're directing the
hardware to perform an action

597
00:28:47,220 --> 00:28:50,470
in a way that the software
developer didn't intend.

598
00:28:50,470 --> 00:28:53,070
That could mean accessing memory

599
00:28:53,070 --> 00:28:56,520
beyond the bounds of an
array, reusing a pointer

600
00:28:56,520 --> 00:28:58,470
to a piece of memory that a heat manager

601
00:28:58,470 --> 00:29:02,230
has already freed and reallocated,
performing a calculation

602
00:29:02,230 --> 00:29:05,350
that overflows the hardware's
need of register size,

603
00:29:05,350 --> 00:29:06,600
or changing the order

604
00:29:06,600 --> 00:29:09,439
in which the hardware
executes instructions.

605
00:29:09,440 --> 00:29:11,380
All of these actions are
traditionally allowed

606
00:29:11,380 --> 00:29:12,820
by the hardware because the hardware

607
00:29:12,820 --> 00:29:15,203
has no knowledge of the
programmer's intent.

608
00:29:16,190 --> 00:29:17,420
For example, there's no way

609
00:29:17,420 --> 00:29:19,650
for the hardware to
distinguish a memory access

610
00:29:19,650 --> 00:29:22,650
that the programmer intended
from a memory access

611
00:29:22,650 --> 00:29:25,870
that an attacker is using
to exploit a system.

612
00:29:25,870 --> 00:29:28,760
But what if we built better hardware,

613
00:29:28,760 --> 00:29:30,280
could we improve security

614
00:29:30,280 --> 00:29:32,293
and prevent exploitation of systems?

615
00:29:33,290 --> 00:29:35,139
DARPA's system security integration

616
00:29:35,140 --> 00:29:36,677
through hardware and firmware,

617
00:29:36,677 --> 00:29:39,919
our SSITH program is
looking at doing just that.

618
00:29:39,920 --> 00:29:42,480
SSITH aims to close entire
classes of weaknesses

619
00:29:42,480 --> 00:29:44,150
that lead to system exploitation

620
00:29:44,150 --> 00:29:47,300
with a goal of making systems
that can't be exploited

621
00:29:47,300 --> 00:29:48,973
even if the software is flawed.

622
00:29:50,370 --> 00:29:52,590
Performers on the program
have developed a variety

623
00:29:52,590 --> 00:29:54,850
of novel techniques to
build better processors,

624
00:29:54,850 --> 00:29:58,139
including memory tagging
to inform hardware

625
00:29:58,140 --> 00:30:00,490
about its intended use and bounds,

626
00:30:00,490 --> 00:30:04,810
using limited capabilities to
restrict hardware operations,

627
00:30:04,810 --> 00:30:08,570
analyzing the context of
hardware operations at runtime,

628
00:30:08,570 --> 00:30:10,820
and using encryption
and compartmentalization

629
00:30:10,820 --> 00:30:14,080
to protect valuable assets in hardware.

630
00:30:14,080 --> 00:30:16,250
These techniques have been
demonstrated on a range

631
00:30:16,250 --> 00:30:19,640
of risk five processor types
from 32 bit microcontrollers

632
00:30:19,640 --> 00:30:22,360
all the way up to 64 bit out of order,

633
00:30:22,360 --> 00:30:23,763
high-performance CPUs.

634
00:30:25,200 --> 00:30:27,530
The performers have validated
the security protections

635
00:30:27,530 --> 00:30:29,060
using formal methods and a suite

636
00:30:29,060 --> 00:30:31,060
of synthetic security benchmarks.

637
00:30:31,060 --> 00:30:33,590
And most importantly, they've demonstrated

638
00:30:33,590 --> 00:30:35,090
that they can provide these protections

639
00:30:35,090 --> 00:30:38,703
with minimal impact to
performance, power, and area.

640
00:30:39,980 --> 00:30:42,360
But the history of computer
security is littered

641
00:30:42,360 --> 00:30:45,620
with examples of systems that
were believed to be secure

642
00:30:45,620 --> 00:30:48,189
but then ultimately fell to attackers.

643
00:30:48,190 --> 00:30:50,790
To evaluate how effectively
the SSITH technologies

644
00:30:50,790 --> 00:30:52,659
prevented real-world cyber attacks,

645
00:30:52,660 --> 00:30:55,240
DARPA held its first Bug Bounty midway

646
00:30:55,240 --> 00:30:57,100
through the SSITH program.

647
00:30:57,100 --> 00:30:59,610
Produced in conjunction with
the defense digital services,

648
00:30:59,610 --> 00:31:02,500
Hack the Pentagon program
and hosted by Synack,

649
00:31:02,500 --> 00:31:04,550
the Finding Exploits of Thwart Tampering

650
00:31:04,550 --> 00:31:07,230
or FETT Bug Bounty, allowed
security researchers

651
00:31:07,230 --> 00:31:10,070
and Whitehead hackers from
around the globe access

652
00:31:10,070 --> 00:31:13,683
to emulated computer systems
based on SSITH technologies.

653
00:31:14,940 --> 00:31:17,540
These systems included
unpatched software stacks

654
00:31:17,540 --> 00:31:19,670
with multiple known vulnerabilities,

655
00:31:19,670 --> 00:31:21,650
many of which were easily exploitable

656
00:31:21,650 --> 00:31:24,470
on systems using conventional processors.

657
00:31:24,470 --> 00:31:26,630
The results from FETT were striking.

658
00:31:26,630 --> 00:31:29,340
After over 10,000 hours of attack

659
00:31:29,340 --> 00:31:31,500
by over 500 security researchers,

660
00:31:31,500 --> 00:31:33,860
the SSITH processors
demonstrated they were able

661
00:31:33,860 --> 00:31:37,229
to successfully prevent
exploitation of the vulnerabilities

662
00:31:37,230 --> 00:31:39,730
in the provided software stacks.

663
00:31:39,730 --> 00:31:42,820
This result was reinforced
by an independent analysis

664
00:31:42,820 --> 00:31:46,290
by the Microsoft Security
Response Center, or MSRC,

665
00:31:46,290 --> 00:31:49,680
who looked at one of SSITH's
architecture is called CHERI.

666
00:31:49,680 --> 00:31:51,530
They concluded that over two thirds

667
00:31:51,530 --> 00:31:53,260
of the security vulnerabilities reported

668
00:31:53,260 --> 00:31:55,560
to the MSRC in 2019 would

669
00:31:55,560 --> 00:31:58,159
have been determinimalistically mitigated.

670
00:31:58,160 --> 00:31:59,130
That means that they would not

671
00:31:59,130 --> 00:32:02,393
have required a security
update on systems using SSITH.

672
00:32:03,350 --> 00:32:05,679
To further explore the
bounds of SSITH technologies,

673
00:32:05,680 --> 00:32:09,160
FETT security researchers were
granted extraordinary access

674
00:32:09,160 --> 00:32:11,220
to probe the hardware defenses.

675
00:32:11,220 --> 00:32:13,490
This included root level system access

676
00:32:13,490 --> 00:32:14,750
and the permission to develop

677
00:32:14,750 --> 00:32:17,350
any software application they could,

678
00:32:17,350 --> 00:32:18,639
which exhibited a weakness

679
00:32:18,640 --> 00:32:21,160
that should have been protected by SSITH.

680
00:32:21,160 --> 00:32:23,810
Using this access, the
security researchers were able

681
00:32:25,696 --> 00:32:27,360
to provide valuable insights
into architectural weaknesses

682
00:32:27,360 --> 00:32:30,260
which are being addressed in
the last part of the program.

683
00:32:31,400 --> 00:32:33,850
To learn more, tune to
Synack's "Bird a Feather" talk

684
00:32:33,850 --> 00:32:35,413
immediately after this session.

685
00:32:36,470 --> 00:32:38,850
So where do we go from here?

686
00:32:38,850 --> 00:32:40,520
We have demonstrated that hardware design

687
00:32:40,520 --> 00:32:42,540
for security can offer strong protections

688
00:32:42,540 --> 00:32:44,850
for systems that have flawed software.

689
00:32:44,850 --> 00:32:46,790
These protections can prevent exploitation

690
00:32:46,790 --> 00:32:49,200
of flaws that previously
could only be addressed

691
00:32:49,200 --> 00:32:50,533
with software patches.

692
00:32:51,869 --> 00:32:53,879
Th SSITH program now is
focused on transition

693
00:32:53,880 --> 00:32:56,900
to make this technology broadly available.

694
00:32:56,900 --> 00:32:59,130
This includes extending SSITH protections

695
00:32:59,130 --> 00:33:00,870
from risk five processors

696
00:33:00,870 --> 00:33:04,513
to processors based on ARM
and X86 instruction sets.

697
00:33:05,770 --> 00:33:08,570
The SSITH program is fabricating
an ARM processor focused

698
00:33:08,570 --> 00:33:12,070
on embedded applications
using SSITH technologies.

699
00:33:12,070 --> 00:33:13,419
And the Morello program,

700
00:33:13,420 --> 00:33:15,980
funded by the United
Kingdom's Research Institute,

701
00:33:15,980 --> 00:33:17,510
is funding ARM to fabricate

702
00:33:17,510 --> 00:33:20,233
a prototype high-performance
processor based on SSITH.

703
00:33:21,590 --> 00:33:24,730
We're also looking at how
software can more efficiently,

704
00:33:24,730 --> 00:33:28,410
more robustly and more
resiliently use Harbor protections

705
00:33:28,410 --> 00:33:30,580
to provide processes defenses

706
00:33:30,580 --> 00:33:32,639
against malicious applications installed

707
00:33:32,640 --> 00:33:34,960
by unwitting system users.

708
00:33:34,960 --> 00:33:36,600
This will require adaptation

709
00:33:36,600 --> 00:33:39,949
of application software to
use Harbor security resources

710
00:33:39,950 --> 00:33:43,250
and the tailoring of hardware
to meet application needs.

711
00:33:43,250 --> 00:33:44,500
We're calling this process

712
00:33:44,500 --> 00:33:46,963
hardware software co-design for security.

713
00:33:47,830 --> 00:33:51,210
In this context, we also want
to extend system protections

714
00:33:51,210 --> 00:33:54,373
to address the threat of
malicious or compromised hardware.

715
00:33:55,380 --> 00:34:00,000
Black-box Harbor IP cores,
unverifiable from firmware,

716
00:34:00,000 --> 00:34:01,030
the threat of compromised

717
00:34:01,030 --> 00:34:03,430
by user attached hardware peripherals

718
00:34:03,430 --> 00:34:06,280
require us to have a zero
trust architecture model

719
00:34:06,280 --> 00:34:08,040
to maintain system security

720
00:34:08,040 --> 00:34:10,960
in the face of hardware
peripheral compromise.

721
00:34:10,960 --> 00:34:13,600
Security is much more
than a software problem.

722
00:34:13,600 --> 00:34:15,810
Looking to hardware,
we have the technology

723
00:34:15,810 --> 00:34:18,350
to build secure systems that
release us from our reliance

724
00:34:18,350 --> 00:34:19,770
on software patching.

725
00:34:19,770 --> 00:34:21,620
To learn more, reach out to me

726
00:34:21,620 --> 00:34:25,322
at keith.rebello@darpa.mil, thank you.

727
00:34:27,969 --> 00:34:29,509
- Awesome, thank you so much, Keith.

728
00:34:29,510 --> 00:34:31,710
That was really interesting.

729
00:34:31,710 --> 00:34:32,719
So now we're moving on

730
00:34:32,719 --> 00:34:36,082
to the last Q and A segment
of the day for Keith.

731
00:34:36,949 --> 00:34:39,639
So, as people are typing
in some questions,

732
00:34:39,639 --> 00:34:41,259
I know that we have
some internal questions

733
00:34:41,260 --> 00:34:43,313
that we were thinking of ahead of time.

734
00:34:44,219 --> 00:34:47,739
And obviously the main one
is this is a brand new thing,

735
00:34:47,739 --> 00:34:49,219
brand new initiative for y'all,

736
00:34:49,219 --> 00:34:51,469
so where can we really
learn more about this?

737
00:34:52,310 --> 00:34:54,980
- Well, so in addition
to reaching out to me

738
00:34:54,980 --> 00:34:59,300
and going to the SSITH
website and the FETT website,

739
00:34:59,300 --> 00:35:01,080
I really didn't get a
chance to talk about it

740
00:35:01,080 --> 00:35:02,509
'cause we had limited time.

741
00:35:02,510 --> 00:35:04,560
But one of the cool things
that we're doing on SSITH

742
00:35:04,560 --> 00:35:06,690
is we're building a demonstrator,

743
00:35:06,690 --> 00:35:10,190
so we're taking an actual
car, smart car in this case,

744
00:35:10,190 --> 00:35:12,420
and we're ripping out
the engine control unit

745
00:35:12,420 --> 00:35:14,230
and the infotainment system,

746
00:35:14,230 --> 00:35:16,780
and we're replacing those
with SSITH processors

747
00:35:16,780 --> 00:35:20,060
to show how we can now
make the car resilient

748
00:35:20,060 --> 00:35:22,482
and immune to cyber attacks.

749
00:35:23,410 --> 00:35:26,009
And so, keep on the lookout for that.

750
00:35:26,010 --> 00:35:28,200
Coming later this summer,

751
00:35:28,200 --> 00:35:29,990
we'll be giving a talk at Black Hat

752
00:35:29,990 --> 00:35:33,653
and at the Electronics
Resurgence Initiative in October.

753
00:35:35,160 --> 00:35:38,082
So stay tuned.
- Right on, right on.

754
00:35:39,460 --> 00:35:41,530
You used the word "immune"
there for a second.

755
00:35:41,530 --> 00:35:44,920
So is this something where over time,

756
00:35:44,920 --> 00:35:47,900
it gains a better a understanding

757
00:35:47,900 --> 00:35:50,183
of how to defend itself against attacks?

758
00:35:51,710 --> 00:35:52,910
- Well, there's certain technologies

759
00:35:52,910 --> 00:35:53,859
that we've been developing

760
00:35:53,860 --> 00:35:57,143
that can be updated over time.

761
00:35:59,189 --> 00:36:01,490
But that is definitely
something that we're interested

762
00:36:01,490 --> 00:36:02,750
in developing technologies

763
00:36:02,750 --> 00:36:07,160
that are adaptable and learn on the fly.

764
00:36:07,160 --> 00:36:10,080
And that feeds into this
whole resiliency theme

765
00:36:10,080 --> 00:36:11,890
that we're talking about
here at the conference.

766
00:36:11,890 --> 00:36:15,270
- All right, cool, you were talking

767
00:36:15,270 --> 00:36:17,660
about being able to show some demos

768
00:36:17,660 --> 00:36:19,160
and some of that stuff later on

769
00:36:19,160 --> 00:36:21,350
over the course of this initiative,

770
00:36:21,350 --> 00:36:25,120
but when can we start to expect
to see it available for use?

771
00:36:25,120 --> 00:36:27,650
- Yeah, so we're currently
building hardware.

772
00:36:27,650 --> 00:36:32,270
So, we have the processor
that ARM is building.

773
00:36:32,270 --> 00:36:35,270
That's gonna come out calendar year 2020,

774
00:36:35,270 --> 00:36:37,860
and then the processors that
we're building at DARPA,

775
00:36:37,860 --> 00:36:41,700
that'll be available in calendar 2023.

776
00:36:41,700 --> 00:36:45,859
So pretty soon.
- Okay, cool.

777
00:36:45,860 --> 00:36:49,430
Something that a group like
myself might be interested in

778
00:36:49,430 --> 00:36:51,350
or other people in the audience

779
00:36:51,350 --> 00:36:54,029
who are maybe practical security people,

780
00:36:54,030 --> 00:36:56,660
vulnerability hunters or people like that,

781
00:36:56,660 --> 00:37:00,350
is what sort of classes
of weaknesses or issues

782
00:37:00,350 --> 00:37:04,250
is the SSITH going to protect against?

783
00:37:04,250 --> 00:37:07,730
- Right, yeah, so what we did

784
00:37:07,730 --> 00:37:09,920
was we took the MITRE CWE database,

785
00:37:09,920 --> 00:37:12,010
so the common weakness
enumeration database

786
00:37:12,010 --> 00:37:16,760
that MITRE has, and we
grouped those into categories

787
00:37:16,760 --> 00:37:20,510
that just solely focused on
hardware vulnerabilities.

788
00:37:20,510 --> 00:37:23,080
And so, we came up with
about seven categories.

789
00:37:23,080 --> 00:37:27,830
So things like buffer errors,
resource management errors,

790
00:37:27,830 --> 00:37:32,502
numeric errors, information
leakage, injection,

791
00:37:33,730 --> 00:37:36,560
privileged permissions,
and access control errors,

792
00:37:36,560 --> 00:37:40,790
and then hardware and system
on chip implementation errors.

793
00:37:40,790 --> 00:37:43,180
So those are the seven broad categories

794
00:37:43,180 --> 00:37:46,093
that we aim to close down on the program.

795
00:37:48,331 --> 00:37:51,317
- Okay, right on, let's see.

796
00:37:52,260 --> 00:37:54,190
Any other questions from the audience,

797
00:37:54,190 --> 00:37:56,810
I know that internally
we were sort of wanting

798
00:37:56,810 --> 00:38:01,290
to also cover maybe
earlier in this process

799
00:38:02,170 --> 00:38:05,550
that you learned some lessons

800
00:38:05,550 --> 00:38:09,023
from a previous session, the FETT program.

801
00:38:10,260 --> 00:38:12,310
- Yeah, so we learned a lot of things

802
00:38:12,310 --> 00:38:15,330
about performer's hardware implementation,

803
00:38:15,330 --> 00:38:19,470
so little nits in bugs, but
the main thing that we learned

804
00:38:19,470 --> 00:38:21,299
is that you can't look

805
00:38:21,300 --> 00:38:23,040
at the hardware in complete isolation.

806
00:38:23,040 --> 00:38:25,060
There's other parts of the system

807
00:38:25,060 --> 00:38:28,970
that we depend on for security,

808
00:38:28,970 --> 00:38:32,759
so firmware and some
software that's above that.

809
00:38:32,760 --> 00:38:35,570
And so the correctness of
pieces of trusted software

810
00:38:35,570 --> 00:38:37,600
is also really important

811
00:38:37,600 --> 00:38:40,123
to address when you're
developing a system.

812
00:38:41,480 --> 00:38:45,930
- Okay, awesome, well with
that, I know that we have just

813
00:38:45,930 --> 00:38:49,399
about I think 30 seconds
before the end of the session.

814
00:38:49,400 --> 00:38:52,970
So I'm really awesome that
we got to meet all of you,

815
00:38:52,970 --> 00:38:55,399
hear from all your different perspectives,

816
00:38:55,400 --> 00:38:59,330
and get everyone's questions in here.

817
00:38:59,330 --> 00:39:01,390
So with that, thank
you to all the speakers

818
00:39:01,390 --> 00:39:03,173
and to our audience for joining us.

819
00:39:04,120 --> 00:39:06,180
Keep the participation alive.

820
00:39:06,180 --> 00:39:07,930
Please feel free to engage everyone

821
00:39:09,350 --> 00:39:11,250
with their contact they provided here.

822
00:39:11,250 --> 00:39:13,763
So yeah, thank you so much
for everyone being here.

