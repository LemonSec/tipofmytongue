1
00:00:01,620 --> 00:00:04,110
- Good day and welcome to the
Malware Reverse Engineering

2
00:00:04,110 --> 00:00:06,120
with PE Tree presentation.

3
00:00:06,120 --> 00:00:06,960
My name's Tom Bonner,

4
00:00:06,960 --> 00:00:09,440
Distinguished Threat
Researcher at BlackBerry.

5
00:00:09,440 --> 00:00:12,910
And I'd like to show you the PE Tree tool

6
00:00:12,910 --> 00:00:14,540
that we've been developing.

7
00:00:14,540 --> 00:00:17,210
So yeah, we're gonna do a quick intro,

8
00:00:17,210 --> 00:00:18,520
sort of, overview of PE Tree,

9
00:00:18,520 --> 00:00:20,570
how it came to life, things like that,

10
00:00:20,570 --> 00:00:21,980
look at some of the features

11
00:00:21,980 --> 00:00:24,530
and how you install it and use it.

12
00:00:24,530 --> 00:00:26,520
And then the bulk of the presentation,

13
00:00:26,520 --> 00:00:27,580
we'll dive into the demo.

14
00:00:27,580 --> 00:00:30,310
So we're gonna do a little,
sort of, walkthrough

15
00:00:30,310 --> 00:00:32,910
with the PE file format,
just a whistle-stop tour,

16
00:00:32,910 --> 00:00:36,220
and then look at some of
the use cases for PE Tree

17
00:00:36,220 --> 00:00:40,269
and how it can assist
in sort of helping to

18
00:00:40,270 --> 00:00:43,120
ease the reverse engineering
process for a lot of people.

19
00:00:44,170 --> 00:00:48,410
So, yeah, PE Tree, it's a console software

20
00:00:48,410 --> 00:00:51,812
that we sort of released
maybe about a year ago now,

21
00:00:53,090 --> 00:00:55,660
developed in Python and based off of

22
00:00:55,660 --> 00:00:59,260
Ero Carreras pefile python library

23
00:00:59,260 --> 00:01:00,117
that you may well have heard of

24
00:01:00,117 --> 00:01:03,050
and built on software PyQt5.

25
00:01:03,050 --> 00:01:05,489
So this actually started
life as an internal tool

26
00:01:05,489 --> 00:01:08,309
and something that I was using quite a bit

27
00:01:08,310 --> 00:01:10,987
embedded into IDA Pro to disassembler.

28
00:01:12,320 --> 00:01:14,899
Really, what we were sort of
trying to do at that point

29
00:01:14,900 --> 00:01:19,320
was just sort of present the
PE file in a, literary, a Tree.

30
00:01:19,320 --> 00:01:20,960
There was no rainbow view,

31
00:01:20,960 --> 00:01:23,179
as you can see on the
left-hand side there,

32
00:01:23,180 --> 00:01:24,120
just the Tree view,

33
00:01:24,120 --> 00:01:25,700
and just make it easier to navigate

34
00:01:25,700 --> 00:01:28,140
portable executables within the IDA,

35
00:01:28,140 --> 00:01:30,693
which is something it
wasn't brilliantly good at.

36
00:01:32,070 --> 00:01:35,190
And then on top of that, it
sort of blossomed and grew,

37
00:01:35,190 --> 00:01:40,190
and about a year ago now,
during the very first lockdown,

38
00:01:40,210 --> 00:01:42,890
my children were sat at the kitchen table

39
00:01:42,890 --> 00:01:45,370
drawing rainbows to hang in the window

40
00:01:45,370 --> 00:01:48,980
as a show of support, to
like the healthcare workers

41
00:01:48,980 --> 00:01:50,593
and key workers in this country.

42
00:01:52,702 --> 00:01:54,370
And I was always looking,
I thought hang on a minute,

43
00:01:54,370 --> 00:01:58,167
that's probably a very nice way
of visualizing the structure

44
00:01:58,167 --> 00:02:00,270
and the composition of a PE file

45
00:02:00,270 --> 00:02:02,210
and sort of hurried back to my keyboard.

46
00:02:02,210 --> 00:02:05,869
And that was the birth
of the the rainbow view

47
00:02:05,870 --> 00:02:06,703
within PE Tree.

48
00:02:06,703 --> 00:02:09,960
So it provides a very nice
sort of visual indication

49
00:02:09,960 --> 00:02:12,890
of the structure of the
file at a high level,

50
00:02:12,890 --> 00:02:17,170
so quite interesting in a way,

51
00:02:17,170 --> 00:02:19,309
doing sort of visual
comparisons of malware

52
00:02:19,310 --> 00:02:21,763
and just being able to
see the composition.

53
00:02:22,640 --> 00:02:24,529
So yeah, PE Tree comes in a few flavors.

54
00:02:24,530 --> 00:02:26,640
There's a standalone application,

55
00:02:26,640 --> 00:02:29,059
much like any regular PE Viewer,

56
00:02:29,060 --> 00:02:31,730
you've probably played
with, in the past PeStudio,

57
00:02:31,730 --> 00:02:33,882
PE-bear, PEview, things like that.

58
00:02:35,290 --> 00:02:37,250
So you can view headers and certificates,

59
00:02:37,250 --> 00:02:39,000
bits of data like that.

60
00:02:39,000 --> 00:02:41,790
It has capstone, the
disassembler baked into it,

61
00:02:41,790 --> 00:02:43,480
so certain addresses and offsets

62
00:02:43,480 --> 00:02:44,993
can be disassembled that way.

63
00:02:45,940 --> 00:02:48,948
We could export data to CyberChef
for further manipulation

64
00:02:48,949 --> 00:02:51,090
and processing, which is pretty handy.

65
00:02:51,090 --> 00:02:54,800
And DVT pivot search is
on just about everything

66
00:02:54,800 --> 00:02:57,000
you could search on within a PE file.

67
00:02:57,000 --> 00:03:01,730
So, you know, section
names, exports, compilation,

68
00:03:01,730 --> 00:03:03,792
timestamps, bits and pieces like that.

69
00:03:05,620 --> 00:03:08,720
Then we have an IDAPython plug in,

70
00:03:08,720 --> 00:03:10,870
which is really where PE Tree started.

71
00:03:10,870 --> 00:03:13,570
So, not only does it allow you to navigate

72
00:03:13,570 --> 00:03:17,239
the structures of PE files,
sort of, within an IDB

73
00:03:17,240 --> 00:03:21,600
it also works well with
memory mapped PE files.

74
00:03:21,600 --> 00:03:25,040
And in fact, you can even
search an IDA database,

75
00:03:25,040 --> 00:03:28,160
find MZP headers, pull
out the executables,

76
00:03:28,160 --> 00:03:30,200
reconstruct them, rebuild them

77
00:03:30,200 --> 00:03:33,820
and dump them with a new imports table,

78
00:03:33,820 --> 00:03:35,010
which is pretty handy.

79
00:03:35,010 --> 00:03:36,959
As well as also labeling and commenting,

80
00:03:36,960 --> 00:03:38,700
a lot of structures and details

81
00:03:38,700 --> 00:03:41,290
from the PE it finds
back in the IDA database,

82
00:03:41,290 --> 00:03:42,412
which is pretty handy.

83
00:03:43,560 --> 00:03:45,300
We have Rekall support as well

84
00:03:45,300 --> 00:03:49,341
and actually Volatility
is pretty soon on its way.

85
00:03:49,341 --> 00:03:52,970
So a pretty powerful way to
operate against memory dumps.

86
00:03:52,970 --> 00:03:56,253
And in fact Rekall would allow
for live systems as well.

87
00:03:57,230 --> 00:04:00,160
So yeah, much the same as the IDA version.

88
00:04:00,160 --> 00:04:05,160
It can scan the entire
address space for executables,

89
00:04:05,230 --> 00:04:07,010
pull out any it finds, reconstruct them,

90
00:04:07,010 --> 00:04:08,670
including imports and exports,

91
00:04:08,670 --> 00:04:11,899
which is something that a lot
of the forensic frameworks

92
00:04:11,900 --> 00:04:14,620
and platforms haven't
really done until now.

93
00:04:14,620 --> 00:04:17,370
So we can fully reconstruct
them, dump them back to disk

94
00:04:17,370 --> 00:04:20,740
and it makes the reverse
engineering and analysis process

95
00:04:20,740 --> 00:04:24,270
a lot smoother for any
analyst at the end of the day.

96
00:04:24,270 --> 00:04:28,673
And finally, the latest big
release is focusing on Ghidra,

97
00:04:29,842 --> 00:04:33,587
so the open source
disassembler from the NSA.

98
00:04:35,943 --> 00:04:38,599
And that's not quite as
feature complete as IDA Pro

99
00:04:38,600 --> 00:04:43,290
in that there is no debugger
in there yet, but it is coming.

100
00:04:43,290 --> 00:04:46,920
So currently, whilst it's only possible

101
00:04:46,920 --> 00:04:48,340
in the latest release Ghidra,

102
00:04:48,340 --> 00:04:51,169
to sort of navigate the
structure of PE files

103
00:04:51,170 --> 00:04:53,670
and sort of browse about,
and bits like that,

104
00:04:53,670 --> 00:04:56,580
as soon as debug support is released,

105
00:04:56,580 --> 00:04:59,370
it should be possible as
well to do the dumping

106
00:04:59,370 --> 00:05:01,263
and reconstruction IDA things do.

107
00:05:02,640 --> 00:05:05,219
As, sort of, grabbing
PE Tree, installing it,

108
00:05:05,220 --> 00:05:06,370
it's up there on Github,

109
00:05:06,370 --> 00:05:09,620
we'll do a court reveal of
this at the end as well.

110
00:05:09,620 --> 00:05:12,720
PIP installable as well,
PIP install PE Tree

111
00:05:12,720 --> 00:05:15,260
and off we go, and
pre-installed on REMnux as well.

112
00:05:15,260 --> 00:05:18,280
So plenty of places in
which you can grab the tool

113
00:05:18,280 --> 00:05:19,429
and have a play around.

114
00:05:20,970 --> 00:05:24,063
So let's dive into the
demos then, the fun stuff.

115
00:05:24,930 --> 00:05:26,930
First part there, we're just
gonna do a quick, sort of

116
00:05:26,930 --> 00:05:29,810
whistle-stop tour of the PE file format.

117
00:05:29,810 --> 00:05:31,830
I'm sure a lot of people
are quite familiar with it

118
00:05:31,830 --> 00:05:34,099
but for those that aren't,
we can do a little tour

119
00:05:34,100 --> 00:05:35,210
and have a look about.

120
00:05:35,210 --> 00:05:39,582
So here is PE Tree there,
in it's sort of raw form,

121
00:05:40,570 --> 00:05:43,170
we've just dumped DiskView
from sysinternals,

122
00:05:43,170 --> 00:05:46,630
quite a popular and well-known executable.

123
00:05:46,630 --> 00:05:49,670
So on the left-hand side, it's
the sort of rainbow map there

124
00:05:49,670 --> 00:05:53,290
so we can see the structure of the exe

125
00:05:53,290 --> 00:05:55,977
how large certain sections are on disk,

126
00:05:55,977 --> 00:05:58,210
like the text section looks approximately,

127
00:05:58,210 --> 00:05:59,880
50% of the file here.

128
00:05:59,880 --> 00:06:02,120
There's an R data section beyond that

129
00:06:02,120 --> 00:06:04,760
containing a read-only data

130
00:06:04,760 --> 00:06:06,580
and some resources as well.

131
00:06:06,580 --> 00:06:09,750
So let's keep digging through.

132
00:06:09,750 --> 00:06:11,760
We've got a nice summary at the top,

133
00:06:11,760 --> 00:06:12,593
various searches and bits,

134
00:06:12,593 --> 00:06:15,180
there are pivot searchable
on VirusTotal too.

135
00:06:15,180 --> 00:06:17,240
So we can go off to VT

136
00:06:17,240 --> 00:06:19,393
and have a little hums around on those.

137
00:06:21,250 --> 00:06:23,000
Back in then, you're gonna
dive through the headers.

138
00:06:23,000 --> 00:06:24,810
So the DOS header is the first part

139
00:06:24,810 --> 00:06:28,490
of any portable executable file.

140
00:06:28,490 --> 00:06:29,480
We see it start there.

141
00:06:29,480 --> 00:06:33,380
It's got the Magic Bytes MZ at the top.

142
00:06:33,380 --> 00:06:34,940
And beyond that,

143
00:06:34,940 --> 00:06:39,120
this is where the DOS
stub message is embedded.

144
00:06:39,120 --> 00:06:41,720
So probably seeing the string before,

145
00:06:41,720 --> 00:06:44,160
this program can not be run in DOS mode.

146
00:06:44,160 --> 00:06:46,560
This is basically a 16 bit stubs.

147
00:06:46,560 --> 00:06:51,090
So any executable, back in
the old days, Windows 95

148
00:06:52,050 --> 00:06:56,530
running in mixed 16 bit, 32
bit mode operating systems,

149
00:06:56,530 --> 00:06:58,739
this stub was there for 16 bit DOS.

150
00:06:58,740 --> 00:07:01,739
If you accidentally run
a 32 bit PE file on there

151
00:07:01,739 --> 00:07:04,020
it had enough code at the
start to bring the message,

152
00:07:04,020 --> 00:07:06,289
this program could not be
run in DOS mode and bail.

153
00:07:06,290 --> 00:07:08,500
So that's where that part comes from,

154
00:07:08,500 --> 00:07:11,063
purely sort of a legacy thing,

155
00:07:11,930 --> 00:07:14,088
however, embedded in there as well,

156
00:07:14,088 --> 00:07:18,613
there's a very interesting bit
of data stuck in that stub.

157
00:07:19,910 --> 00:07:23,950
And this has come along sort
of more recently since well,

158
00:07:23,950 --> 00:07:26,263
Visual Studio 6, back in the day now,

159
00:07:27,620 --> 00:07:32,070
but the linker embeds a lot
of information in here now

160
00:07:32,070 --> 00:07:37,040
about the tools and the
sources and the object files

161
00:07:37,040 --> 00:07:40,220
and the linker that was
used to actually link

162
00:07:40,220 --> 00:07:42,320
and construct the executable.

163
00:07:42,320 --> 00:07:45,120
Not a very well-documented field,

164
00:07:45,120 --> 00:07:47,940
took us a little while to
figure it out, back in the day.

165
00:07:47,940 --> 00:07:51,830
But I think enough tools
are fairly with this now

166
00:07:52,950 --> 00:07:54,830
So yeah, just nice to be
able to break that down

167
00:07:54,830 --> 00:07:57,770
and show a lot of the tools
that were in use in there.

168
00:07:57,770 --> 00:08:01,180
We can also see if it correlates
with other information

169
00:08:01,180 --> 00:08:03,540
in the NT headers later on, you know,

170
00:08:03,540 --> 00:08:06,830
this stuff can be spoofed.

171
00:08:06,830 --> 00:08:08,180
But at least we can see here, like,

172
00:08:08,180 --> 00:08:11,160
Visual Studio 2008 in the link aversion,

173
00:08:11,160 --> 00:08:14,075
Visual Studio 2008 in the Rich headers.

174
00:08:14,075 --> 00:08:16,770
It seems kind of legit.

175
00:08:16,770 --> 00:08:18,810
So yeah, we've got the
rest of the NT headers

176
00:08:18,810 --> 00:08:19,713
mapped out here.

177
00:08:21,097 --> 00:08:22,810
So immediately following on them

178
00:08:22,810 --> 00:08:26,190
from sort of the DOS
stub is the NT headers

179
00:08:26,190 --> 00:08:28,200
containing the signature PE.

180
00:08:28,200 --> 00:08:29,150
Surprise, surprise!

181
00:08:29,150 --> 00:08:31,560
It stands for portable executable.

182
00:08:31,560 --> 00:08:33,429
And then from that is the file header

183
00:08:33,429 --> 00:08:34,919
where we find interesting things like

184
00:08:34,919 --> 00:08:38,990
which machine types its
for, is it Intel AMD86,

185
00:08:38,990 --> 00:08:43,990
is it AMD64 or any other processes

186
00:08:44,680 --> 00:08:46,930
that the PE files can run on.

187
00:08:46,930 --> 00:08:50,589
Timestamp as well, again,
this can be spoofed,

188
00:08:50,590 --> 00:08:52,840
but a bit more on that later.

189
00:08:52,840 --> 00:08:54,740
And then into the optional header as well.

190
00:08:54,740 --> 00:08:57,904
So we see things like which compiler

191
00:08:57,904 --> 00:08:59,740
or rather linker was used.

192
00:08:59,740 --> 00:09:01,540
We the address at the entry point,

193
00:09:01,540 --> 00:09:02,790
which was set on at the minute.

194
00:09:02,790 --> 00:09:05,683
So the code begins in the .text section,

195
00:09:07,250 --> 00:09:12,250
some other alignment,
bits and pieces, and yeah.

196
00:09:14,280 --> 00:09:18,280
Beyond this then, we will end
up with the data directors.

197
00:09:18,280 --> 00:09:21,360
So this is a nice way for the PE file

198
00:09:21,360 --> 00:09:24,040
to at least alert the PE loader

199
00:09:24,040 --> 00:09:25,579
where interesting chunks of data are.

200
00:09:25,580 --> 00:09:28,080
So things like the imports,

201
00:09:28,080 --> 00:09:31,706
this would be APIs that
are imported from DLLs.

202
00:09:31,706 --> 00:09:33,707
They are stuffed in the data directory,

203
00:09:35,176 --> 00:09:37,173
or rather the pointer to them
is in the data directory.

204
00:09:37,173 --> 00:09:40,300
All the data directory
holds is the pointer

205
00:09:40,300 --> 00:09:42,022
in memory and the size.

206
00:09:43,100 --> 00:09:45,260
The resource is listed through there

207
00:09:45,260 --> 00:09:48,510
so that's icons, string
tables, things like that.

208
00:09:48,510 --> 00:09:50,530
There's a security director entry.

209
00:09:50,530 --> 00:09:53,319
So this would tell the PE loader where

210
00:09:54,400 --> 00:09:56,293
any authentic code signatures are.

211
00:09:57,140 --> 00:10:00,189
Debug just helps in debugging information

212
00:10:00,190 --> 00:10:02,080
and sort of where the PDB path,

213
00:10:02,080 --> 00:10:05,150
the program database path, bits like that.

214
00:10:05,150 --> 00:10:08,360
Load config, we've got
things like stag cookies

215
00:10:08,360 --> 00:10:10,040
and bits like that listed there.

216
00:10:10,040 --> 00:10:11,990
And IAT, which is the actual table

217
00:10:11,990 --> 00:10:13,473
of function pointers itself.

218
00:10:15,373 --> 00:10:18,130
So that's resolved by the PE loader

219
00:10:18,130 --> 00:10:19,613
when it was opening in Bochs.

220
00:10:20,640 --> 00:10:23,699
After that, then we have the Sections.

221
00:10:23,700 --> 00:10:26,660
So yeah, a number of
sections and a PE file.

222
00:10:26,660 --> 00:10:30,060
First one here being .test section.

223
00:10:30,060 --> 00:10:32,459
You perhaps think that
this contains, you know

224
00:10:32,460 --> 00:10:35,270
strings or text of some sort

225
00:10:35,270 --> 00:10:38,290
but it's actually where the code is booked

226
00:10:38,290 --> 00:10:40,380
as we can see from the
characteristics on this one

227
00:10:40,380 --> 00:10:42,323
being code, execute, and read.

228
00:10:44,617 --> 00:10:47,740
And we can also see for PE Tree here then,

229
00:10:47,740 --> 00:10:51,070
the overall size ratio and
entropy of this section as well.

230
00:10:51,070 --> 00:10:55,070
So entropy being sort of a measure of,

231
00:10:55,070 --> 00:10:56,420
how best to describe it?

232
00:10:56,420 --> 00:10:58,880
The average number of bits set per byte

233
00:10:58,880 --> 00:11:02,340
across a buffer of bytes.

234
00:11:02,340 --> 00:11:05,010
So, you know, eight being every bit set,

235
00:11:05,010 --> 00:11:07,650
and zero being every bit unset.

236
00:11:07,650 --> 00:11:12,420
So the higher the value the
more we lean towards eight,

237
00:11:12,420 --> 00:11:15,959
the more likely it is that
data has been compressed

238
00:11:15,960 --> 00:11:20,350
or encrypted or tampered
with in somewhat like that.

239
00:11:20,350 --> 00:11:22,640
So yeah, the first
section in text section,

240
00:11:22,640 --> 00:11:24,590
holding the code, moving on from there.

241
00:11:24,590 --> 00:11:26,290
Moving on from there, next section,

242
00:11:26,290 --> 00:11:28,882
R data holds read-only data.

243
00:11:29,940 --> 00:11:33,590
Again fairly standard name
used by most compilers.

244
00:11:33,590 --> 00:11:37,160
And after that's the data section.

245
00:11:37,160 --> 00:11:41,530
So in here goes, basically any strings

246
00:11:41,530 --> 00:11:44,140
or constants in your code that are,

247
00:11:44,140 --> 00:11:46,710
just that, defined as constants.

248
00:11:46,710 --> 00:11:49,240
So if you're writing
sort of a C application

249
00:11:49,240 --> 00:11:52,930
and you declare a string as being const,

250
00:11:52,930 --> 00:11:54,719
can't be written or modified,

251
00:11:54,720 --> 00:11:58,630
then it's gonna end up R data.

252
00:11:58,630 --> 00:12:00,430
And anything that can be written too

253
00:12:00,430 --> 00:12:02,459
will end up in the .data section.

254
00:12:02,460 --> 00:12:05,083
So this is data that can be manipulated.

255
00:12:06,670 --> 00:12:10,180
Beyond that, we've got
the .RSR C-sections.

256
00:12:10,180 --> 00:12:13,719
So this has resources and pretty much

257
00:12:13,720 --> 00:12:16,170
all resources in the files
should reside within here,

258
00:12:16,170 --> 00:12:17,372
they don't always.

259
00:12:19,352 --> 00:12:21,720
Moving on then, we have
the Import descriptors.

260
00:12:21,720 --> 00:12:25,400
So this is a big long
list of all of the DLLs

261
00:12:25,400 --> 00:12:27,780
and libraries that are imported.

262
00:12:27,780 --> 00:12:29,140
I'm gonna largely skip over that

263
00:12:29,140 --> 00:12:31,699
because it's quite long and boring.

264
00:12:31,700 --> 00:12:34,963
Following on from that
the director entry debug.

265
00:12:36,722 --> 00:12:39,890
So like I said before,
this holds a few things

266
00:12:39,890 --> 00:12:41,973
like the program database path.

267
00:12:42,820 --> 00:12:45,270
So we can see this in DiskView release.

268
00:12:45,270 --> 00:12:48,613
DiskView on PDB can be quite
handy for some malware,

269
00:12:49,579 --> 00:12:52,290
at least for tracking them,
tracking campaigns and bits.

270
00:12:52,290 --> 00:12:55,819
But obviously this information
doesn't have to be set,

271
00:12:55,820 --> 00:12:59,393
can be spoofed, can be
stripped out by the developers.

272
00:13:02,050 --> 00:13:03,632
So worth bearing that in mind.

273
00:13:05,810 --> 00:13:07,160
Yeah, one interesting thing we see

274
00:13:07,160 --> 00:13:09,290
is that there's a timestamp in that.

275
00:13:09,290 --> 00:13:12,069
And again, for a lot of DLLs with exports,

276
00:13:12,070 --> 00:13:17,070
as well as a timestamp in
the exports descriptor too,

277
00:13:17,460 --> 00:13:21,830
now not very, very well known is that

278
00:13:24,673 --> 00:13:26,077
when malware authors try

279
00:13:26,077 --> 00:13:28,150
and basically timestamp their executables

280
00:13:29,020 --> 00:13:31,439
they will replace the timestamp field,

281
00:13:31,440 --> 00:13:33,880
perhaps with one say, from CMD.exe

282
00:13:33,880 --> 00:13:35,220
to make it look more legit

283
00:13:35,220 --> 00:13:37,830
or they'll just null it out altogether.

284
00:13:37,830 --> 00:13:39,810
There are other places in the PE file,

285
00:13:39,810 --> 00:13:40,739
where there are timestamps.

286
00:13:40,740 --> 00:13:43,170
So direct entry debug being one,

287
00:13:43,170 --> 00:13:45,550
the exports directory being another.

288
00:13:45,550 --> 00:13:48,760
And if we're sneaky with some of our, say,

289
00:13:48,760 --> 00:13:50,450
VirusTotal pivot searches,

290
00:13:50,450 --> 00:13:52,990
and we put a little bit
of a time range in there,

291
00:13:52,990 --> 00:13:55,210
of a few seconds either side,

292
00:13:55,210 --> 00:13:58,173
it can quite often be sufficient to find,

293
00:13:58,173 --> 00:14:01,140
similar and related samples

294
00:14:01,140 --> 00:14:05,033
that haven't had the timestamp
altered, for instance.

295
00:14:06,600 --> 00:14:07,960
So, yeah, that's that sort of things.

296
00:14:07,960 --> 00:14:11,490
After that Load Config directory,

297
00:14:11,490 --> 00:14:13,160
again, like I said earlier,

298
00:14:13,160 --> 00:14:16,283
we've got SCH handlers listed in here,

299
00:14:17,310 --> 00:14:19,199
stag cookies, things like that.

300
00:14:19,200 --> 00:14:21,140
Following on then,
we've got the Resources.

301
00:14:21,140 --> 00:14:23,807
Now, this is a fairly interesting one,

302
00:14:23,807 --> 00:14:25,970
(indistinct) disk with BinRes.

303
00:14:25,970 --> 00:14:27,750
So if we go dump that, Hex-dump it,

304
00:14:27,750 --> 00:14:31,683
we can see quite easily there,
that's another MZ executable.

305
00:14:32,550 --> 00:14:34,430
We draw out icons as well

306
00:14:34,430 --> 00:14:38,170
and show sort of the overall

307
00:14:38,170 --> 00:14:41,402
ratio and file format layout.

308
00:14:43,910 --> 00:14:45,069
Moving on from there,

309
00:14:45,070 --> 00:14:47,540
just, sort of, finally
the VS version Infoblox.

310
00:14:47,540 --> 00:14:50,839
So this will list sort of
who's produced the file,

311
00:14:50,840 --> 00:14:53,740
again, or develop a set, so
these things could be spoofed.

312
00:14:55,790 --> 00:14:58,884
And then finally the
security director info.

313
00:14:58,884 --> 00:15:02,260
So certificates in there, we
can export them to CyberChef

314
00:15:02,260 --> 00:15:03,790
for processing, which is quite nice.

315
00:15:03,790 --> 00:15:06,250
You can dump a little
more info out of there

316
00:15:06,250 --> 00:15:08,430
but pretty much anything
that can be saved,

317
00:15:08,430 --> 00:15:11,564
so sections and resources, bits like that,

318
00:15:11,565 --> 00:15:13,710
can all be exported to CyberChef.

319
00:15:13,710 --> 00:15:17,130
And we can do sort of VT
searches on serial numbers

320
00:15:17,130 --> 00:15:18,080
and bits like that.

321
00:15:19,260 --> 00:15:22,380
And that's pretty much it,

322
00:15:22,380 --> 00:15:24,880
top down whistle-stop or the PE file

323
00:15:26,649 --> 00:15:29,640
Here we can see, just based
off of this certificate search,

324
00:15:29,640 --> 00:15:32,760
we're able to find 1.4 million samples.

325
00:15:32,760 --> 00:15:35,930
So, very clearly, that was
a Microsoft certificate

326
00:15:35,930 --> 00:15:36,880
we were looking at.

327
00:15:38,400 --> 00:15:41,730
Right, so let's dive on
into the next one then.

328
00:15:41,730 --> 00:15:45,560
So it's a bit more of a sort
of use case then for PE Tree.

329
00:15:45,560 --> 00:15:49,680
We're gonna be looking at
injected DLLs with IDA Pro.

330
00:15:49,680 --> 00:15:54,680
And in this example, what
we have is an APT32 sample.

331
00:15:58,250 --> 00:16:03,003
It's been loaded up
under McODS, sideloaded,

332
00:16:06,234 --> 00:16:10,090
So McODS is actually a McAfee application.

333
00:16:10,090 --> 00:16:12,270
Now, this could have been any vendor,

334
00:16:12,270 --> 00:16:17,270
we've seen APT32 target, a
bunch of different programs,

335
00:16:17,360 --> 00:16:18,760
all with sideloading issues in them.

336
00:16:18,760 --> 00:16:21,130
So not just McAfee, there was Symantec,

337
00:16:21,130 --> 00:16:25,830
there was Google and quite a
few of the regular players.

338
00:16:25,830 --> 00:16:28,290
So I'm not singling
anyone out here at all.

339
00:16:28,290 --> 00:16:30,089
In fact, I think even back in the day,

340
00:16:30,090 --> 00:16:32,220
I have been responsible
for writing software

341
00:16:32,220 --> 00:16:36,060
that was susceptible
to sideloading attacks,

342
00:16:36,060 --> 00:16:37,930
many, many, many years ago.

343
00:16:37,930 --> 00:16:41,410
So yeah, I know how it goes,
not singling anyone out.

344
00:16:41,410 --> 00:16:43,189
This was just the details of the case.

345
00:16:43,190 --> 00:16:47,170
So yeah, what had happened was

346
00:16:47,170 --> 00:16:49,150
the threat attack there, APT32,

347
00:16:49,150 --> 00:16:51,763
written on your start
group, had dropped McODS,

348
00:16:53,260 --> 00:16:58,260
the legitimate signed
McAfee executable on a Bochs

349
00:16:59,331 --> 00:17:02,490
and they then dropped a DLL alongside it.

350
00:17:02,490 --> 00:17:07,490
The McODS would actually pick up and load.

351
00:17:09,410 --> 00:17:13,893
That DLL would then
load up some shellcode.

352
00:17:13,893 --> 00:17:17,230
That shellcode would unpack
some more shellcode into memory.

353
00:17:17,230 --> 00:17:20,940
That shellcode would then
unpack a DLL into memory,

354
00:17:20,940 --> 00:17:24,280
it would load it itself so
that the DLL is not loaded

355
00:17:24,280 --> 00:17:27,270
via the normal Windows loader mechanisms.

356
00:17:27,270 --> 00:17:29,389
And then finally that DLL

357
00:17:29,390 --> 00:17:33,420
would be used to perform C2 communications

358
00:17:34,480 --> 00:17:36,453
after unpacking of the final stage.

359
00:17:37,460 --> 00:17:39,010
So there was a point in time

360
00:17:39,010 --> 00:17:42,240
where we were encountering
quite a few of these

361
00:17:43,640 --> 00:17:46,730
executable with this
multi-layered shellcode

362
00:17:46,730 --> 00:17:51,700
and following the entire sort
of execution train through

363
00:17:51,700 --> 00:17:55,290
was slow and painful each time.

364
00:17:55,290 --> 00:17:59,576
Certainly several hours
of work to track it all,

365
00:17:59,576 --> 00:18:02,410
verify everything, to pull
the executable out of memory,

366
00:18:02,410 --> 00:18:04,160
to reconstruct them, to look at them,

367
00:18:04,160 --> 00:18:06,800
to grab the data we were interested in

368
00:18:06,800 --> 00:18:07,870
took quite a bit of effort.

369
00:18:07,870 --> 00:18:11,120
So what I've done in
this particular instance

370
00:18:11,120 --> 00:18:14,703
I've run everything up,
McODS it's loaded it's DLL

371
00:18:14,703 --> 00:18:16,780
it's loaded shellcode,

372
00:18:16,780 --> 00:18:19,590
and then I've attached
IDA to it as the debugger,

373
00:18:19,590 --> 00:18:21,260
and then taken a memory snapshot.

374
00:18:21,260 --> 00:18:24,970
So this saves all of the
segments to memory regions

375
00:18:24,970 --> 00:18:28,220
back to the IDA database so
that you can disassemble them.

376
00:18:28,220 --> 00:18:32,630
And what we can do then after
having a little look around

377
00:18:32,630 --> 00:18:37,360
and then explore is right click
within PE Tree, search IDB.

378
00:18:37,360 --> 00:18:40,300
And that's now gonna go off
and scan the IDA database

379
00:18:40,300 --> 00:18:43,530
looking for DLLs that it can find.

380
00:18:43,530 --> 00:18:45,270
As you can see, it's found quite a few,

381
00:18:45,270 --> 00:18:48,070
you probably recognize the
name of quite a lot of these.

382
00:18:49,540 --> 00:18:54,300
We've got things like
Version.dll from Windows,

383
00:18:54,300 --> 00:18:56,800
WoW64, and in fact, they're
nearly all Windows DLLs

384
00:18:56,800 --> 00:18:57,940
apart from a couple that come

385
00:18:57,940 --> 00:19:00,073
from memory defense product.

386
00:19:01,060 --> 00:19:03,020
So immediately, one that stands out

387
00:19:03,020 --> 00:19:06,673
and that's just one with the
long GUID looking file name.

388
00:19:07,590 --> 00:19:10,689
So let's go and drill into
this a little bit more

389
00:19:10,690 --> 00:19:13,433
because this is definitely
the one that I'm after.

390
00:19:14,500 --> 00:19:16,720
So we can see the structure of it now.

391
00:19:16,720 --> 00:19:19,240
A lot of, in fact, the bulk of it

392
00:19:19,240 --> 00:19:22,780
just seems to be a
resource, if we look at it.

393
00:19:22,780 --> 00:19:25,010
And if we click on that, we can see

394
00:19:25,010 --> 00:19:28,500
it's a very high entropy resource
as we saw by the red there

395
00:19:28,500 --> 00:19:30,320
and we can go and click on it

396
00:19:30,320 --> 00:19:34,929
and at least browse it in the IDA database

397
00:19:34,930 --> 00:19:36,420
and see the code.

398
00:19:36,420 --> 00:19:37,253
If we dig down as well,

399
00:19:37,253 --> 00:19:38,629
and this is what I was saying earlier,

400
00:19:38,630 --> 00:19:39,800
about the export descriptor,

401
00:19:39,800 --> 00:19:42,731
if you notice there is
a timestamp in there,

402
00:19:42,731 --> 00:19:45,680
but quite nicely, this also
gives us the name of the DLL

403
00:19:45,680 --> 00:19:48,260
at compile time, the DLL entry.

404
00:19:48,260 --> 00:19:50,010
So we can quite easily see that now.

405
00:19:50,010 --> 00:19:51,920
Go to find the entry point in IDA,

406
00:19:51,920 --> 00:19:53,970
which wasn't so easy to do before

407
00:19:53,970 --> 00:19:57,543
or if you were just loading
this up and debugging blind.

408
00:19:58,471 --> 00:20:02,587
And yeah, the resource well at the end,

409
00:20:06,530 --> 00:20:09,700
is where I know that the
final, final stage payload

410
00:20:09,700 --> 00:20:10,533
comes from too.

411
00:20:10,533 --> 00:20:14,669
So I know that by being able
to navigate to that one quickly

412
00:20:14,670 --> 00:20:17,900
and easily that I can
just grab the payload,

413
00:20:17,900 --> 00:20:20,760
grab the decryption key,
which was the first IDG bites

414
00:20:20,760 --> 00:20:21,873
and decrypt it.

415
00:20:23,470 --> 00:20:25,010
So that's pretty much that one.

416
00:20:25,010 --> 00:20:28,930
Let me just go back into the
middle a little bit more here.

417
00:20:28,930 --> 00:20:31,630
One other thing, one other point to make,

418
00:20:31,630 --> 00:20:35,330
which perhaps wasn't so
clear and visible here

419
00:20:35,330 --> 00:20:37,510
is that during the scanning process,

420
00:20:37,510 --> 00:20:40,350
it's been able to pull in and
rebuild the imports as well.

421
00:20:40,350 --> 00:20:43,350
So at this point, now we
could just right click,

422
00:20:43,350 --> 00:20:45,250
save this PDF file back to disk,

423
00:20:45,250 --> 00:20:47,050
go and open it in the fresh IDA

424
00:20:47,050 --> 00:20:49,993
and everything is ready to rock and roll.

425
00:20:52,890 --> 00:20:55,450
Cool, so next little use case,

426
00:20:55,450 --> 00:20:59,477
we're gonna look up at
unpacking, in this case MPRESS,

427
00:20:59,477 --> 00:21:03,710
but it works well with UPX
and other similar upackers

428
00:21:03,710 --> 00:21:06,680
that ultimately largely reconstruct

429
00:21:06,680 --> 00:21:09,783
the original executable in memory.

430
00:21:11,400 --> 00:21:13,910
So again, I've used IDA Pro for this one

431
00:21:13,910 --> 00:21:18,910
but I actually use the Bochs debugger.

432
00:21:19,000 --> 00:21:21,740
So wasn't running this on a live system,

433
00:21:21,740 --> 00:21:26,050
Bochs is pretty much sufficient
to emulate enough of the API

434
00:21:26,050 --> 00:21:27,332
to get unpacking working.

435
00:21:28,540 --> 00:21:32,850
So as you can see, fairly
standard MPRESS text here.

436
00:21:32,850 --> 00:21:34,040
Most of the data is stuffed

437
00:21:34,040 --> 00:21:36,070
in MPRSS 1 and MPRESS 2 sections.

438
00:21:36,070 --> 00:21:39,030
The resources are left unpacked here.

439
00:21:39,940 --> 00:21:44,230
So we'd locate at least
the first sort of jump out

440
00:21:44,230 --> 00:21:45,750
as we can see here,

441
00:21:45,750 --> 00:21:47,970
this will be where it's jumping
back to the entry point,

442
00:21:47,970 --> 00:21:51,100
but we search IDB now after it's run up

443
00:21:51,100 --> 00:21:52,129
and we see it's fine,

444
00:21:52,130 --> 00:21:53,550
debug errors there were two,

445
00:21:53,550 --> 00:21:56,750
which is a segment in memory

446
00:21:56,750 --> 00:22:00,660
and largely, we've rebuilt
some of the import table,

447
00:22:00,660 --> 00:22:01,670
but not an awful lot.

448
00:22:01,670 --> 00:22:05,570
As you can see, there's
only one import or two

449
00:22:05,570 --> 00:22:09,169
for kernel 32 per R import descriptor.

450
00:22:09,170 --> 00:22:14,130
So it's not quite gotten
everything, but it's close.

451
00:22:14,130 --> 00:22:16,590
So we right click on this now and hit dump

452
00:22:17,517 --> 00:22:19,220
and rebuild imports at the Tree.

453
00:22:19,220 --> 00:22:21,810
It's now gonna try and
rebuild the import table.

454
00:22:21,810 --> 00:22:25,419
And what this is gonna do is basically

455
00:22:25,420 --> 00:22:29,700
scan the code section.

456
00:22:29,700 --> 00:22:34,110
So for IDA, it's using
the IDA disassembler.

457
00:22:34,110 --> 00:22:39,110
For other platforms such
as Rekall or Volatility,

458
00:22:40,550 --> 00:22:44,310
it will use capstone,
Ghidra will use Ghidra

459
00:22:45,450 --> 00:22:47,300
Oh, seems to have gone a bit farther.

460
00:22:50,086 --> 00:22:52,780
So yes, what it's been able to do there

461
00:22:52,780 --> 00:22:55,170
is is scan all of the code section,

462
00:22:55,170 --> 00:22:58,970
looking for any corals,
jumps, references...

463
00:22:58,970 --> 00:23:02,150
that are into any loaded DLLs.

464
00:23:02,150 --> 00:23:04,560
We can then resolve the
module name and the API name,

465
00:23:04,560 --> 00:23:07,639
and use that to rebuild the import table.

466
00:23:07,640 --> 00:23:10,360
So this is pretty much done now.

467
00:23:10,360 --> 00:23:11,810
If we'd have hit save to file

468
00:23:11,810 --> 00:23:15,220
on the last dialogue that
popped up, the dump dialogue,

469
00:23:15,220 --> 00:23:16,510
we could have saved it to disk.

470
00:23:16,510 --> 00:23:18,760
Again, put that back into IDA.

471
00:23:18,760 --> 00:23:21,100
We'd have a fully reconstructed executable

472
00:23:21,100 --> 00:23:22,496
And they should run as well.

473
00:23:22,497 --> 00:23:24,510
You should be able to
double-click it and run it.

474
00:23:24,510 --> 00:23:28,313
And everything's as it should be.

475
00:23:29,810 --> 00:23:32,673
So that's pretty much the MPRESS's case.

476
00:23:33,930 --> 00:23:36,430
After that, we're gonna
look a little bit now

477
00:23:37,302 --> 00:23:39,770
at Rekall integration and support

478
00:23:39,770 --> 00:23:43,290
and how we can explore
processes DLL, drivers,

479
00:23:43,290 --> 00:23:46,340
any loaded module,
basically on the system.

480
00:23:46,340 --> 00:23:49,473
So to get PE Tree running for Rekall,

481
00:23:49,473 --> 00:23:50,700
it's a slightly different process

482
00:23:50,700 --> 00:23:52,390
than perhaps the disassembler

483
00:23:54,301 --> 00:23:56,110
in that we need to start Rekall first

484
00:23:56,110 --> 00:23:59,010
and then from within it, we
can use the run -i command

485
00:23:59,010 --> 00:24:00,660
to run PE Tree.

486
00:24:00,660 --> 00:24:02,340
And once that's done,

487
00:24:02,340 --> 00:24:07,340
it will then be able to connect to Rekall,

488
00:24:07,858 --> 00:24:09,690
it'll be able to enumerate processes

489
00:24:09,690 --> 00:24:11,190
and we can see right here,

490
00:24:11,190 --> 00:24:12,700
we've got a full process listing now

491
00:24:12,700 --> 00:24:13,740
from the memory dump,

492
00:24:13,740 --> 00:24:17,210
all of the drivers
listed out under system.

493
00:24:17,210 --> 00:24:19,463
So let's go on and just
pick a few of those.

494
00:24:21,970 --> 00:24:23,337
All these are my processes as well,

495
00:24:23,337 --> 00:24:27,810
here's SVC host and all of the modules,

496
00:24:27,810 --> 00:24:32,161
reader SL, and Adobe app
that was part of this.

497
00:24:32,161 --> 00:24:34,100
I think this is a Cridex
memory dump actually.

498
00:24:34,100 --> 00:24:36,459
So they've been dumped out to disk now

499
00:24:36,460 --> 00:24:38,440
without sort of a reboot of exports.

500
00:24:38,440 --> 00:24:40,470
We can clearly see that's a driver

501
00:24:40,470 --> 00:24:43,300
and this is a composition of that one.

502
00:24:43,300 --> 00:24:44,552
We got Microsoft NetBIOS driver.

503
00:24:44,552 --> 00:24:49,552
However, maybe missing
imports for that one.

504
00:24:50,030 --> 00:24:54,050
So again much like we did
for MPRESS, rebuild imports

505
00:24:54,050 --> 00:24:58,060
at the PE Tree, and we
should now have, yeah,

506
00:24:58,060 --> 00:25:01,560
a driver with a full imports table on it.

507
00:25:01,560 --> 00:25:06,480
So pretty handy to be able to reconstruct

508
00:25:06,480 --> 00:25:08,570
the imports for drivers as well.

509
00:25:08,570 --> 00:25:11,899
And yeah, we can do the
same thing for read RSL.

510
00:25:11,900 --> 00:25:16,900
I think this should have
some resources and bits in it

511
00:25:17,064 --> 00:25:19,264
that we can get to quite
quickly and easily.

512
00:25:20,410 --> 00:25:24,730
So yeah, very simple to
dump anything from memory.

513
00:25:24,730 --> 00:25:27,460
It's a much more
comprehensive dumped process

514
00:25:27,460 --> 00:25:29,840
and say Rekall or Volatility right now,

515
00:25:29,840 --> 00:25:33,580
and that can fix up a
lot more of the headers.

516
00:25:33,580 --> 00:25:35,740
It'll remove like certificate directors

517
00:25:35,740 --> 00:25:37,440
if they're not there.

518
00:25:37,440 --> 00:25:40,210
I think it's definitely
a bit better resetting

519
00:25:40,210 --> 00:25:41,330
the section sizes.

520
00:25:41,330 --> 00:25:45,090
So what I tend to find is that,

521
00:25:45,090 --> 00:25:47,367
for sections that may have been modified,

522
00:25:47,367 --> 00:25:50,483
.text gets modified for
relocations when it's loaded,

523
00:25:51,367 --> 00:25:54,523
.data, it's a writeable section,
things can change in there,

524
00:25:54,523 --> 00:25:58,149
but .RData, .resource, sections like that,

525
00:25:58,150 --> 00:26:01,966
even from PE files that have
been mapped into memory,

526
00:26:01,966 --> 00:26:03,510
the checksums can be very good

527
00:26:03,510 --> 00:26:06,660
for pivot searching with VirusTotal.

528
00:26:06,660 --> 00:26:10,170
So I will often try and
locate those sections fast

529
00:26:10,170 --> 00:26:15,170
and search those MD5s on VT
within our private databases

530
00:26:16,140 --> 00:26:19,093
and see if we get any
hits back on those faster.

531
00:26:23,015 --> 00:26:24,980
After that then, finally,

532
00:26:24,980 --> 00:26:28,910
the latest feature release
then is Ghidra support.

533
00:26:28,910 --> 00:26:30,690
So I'm sure we all know and love

534
00:26:30,690 --> 00:26:33,660
the Ghidra disassember by now.

535
00:26:33,660 --> 00:26:36,480
Very much sort of the
same as IDA at this point,

536
00:26:36,480 --> 00:26:39,760
we can click around say, double click

537
00:26:39,760 --> 00:26:42,670
on anything on the left
for you to take you there.

538
00:26:42,670 --> 00:26:45,613
Go and see some of the
sections, text section there,

539
00:26:47,057 --> 00:26:49,290
and look at R data.

540
00:26:49,290 --> 00:26:52,843
We can go, and see it sync
up into the disassembly view.

541
00:26:54,175 --> 00:26:55,008
And it's just very powerful

542
00:26:55,008 --> 00:26:57,580
to be able to navigate the PE file

543
00:26:57,580 --> 00:27:01,800
and at least be able to link
it up to the disassembly.

544
00:27:01,800 --> 00:27:03,210
At least I found.

545
00:27:03,210 --> 00:27:06,350
And again, we can go through,
and click on resources

546
00:27:06,350 --> 00:27:07,850
and view those quite nicely

547
00:27:07,850 --> 00:27:10,500
in the Ghidra disassembler as well.

548
00:27:10,500 --> 00:27:11,910
And any of these, we can pull out

549
00:27:11,910 --> 00:27:16,143
and save to disk and sent to
CyberChef et cetera, et cetera.

550
00:27:17,741 --> 00:27:19,323
As I said a bit earlier on,

551
00:27:22,870 --> 00:27:25,389
we're hoping the debugger
gets released soon.

552
00:27:25,390 --> 00:27:28,010
The dumping code is in
place, it does work.

553
00:27:28,010 --> 00:27:33,010
So as soon as the debugger
is live within Ghidra,

554
00:27:33,800 --> 00:27:36,379
then we should be able
to do exactly the same

555
00:27:36,380 --> 00:27:41,140
dumping, rebuilding of
the imports IAT and IDT

556
00:27:41,140 --> 00:27:43,393
that we do with other exes.

557
00:27:45,490 --> 00:27:46,970
So yeah, that's pretty much it.

558
00:27:46,970 --> 00:27:51,970
We're up on github.com/blackberry/pe_tree.

559
00:27:52,057 --> 00:27:54,207
You can download it
and fork it from there.

560
00:27:55,845 --> 00:27:59,340
I'm hoping that after this talk,

561
00:27:59,340 --> 00:28:01,020
pretty much anyone can go and grab it now,

562
00:28:01,020 --> 00:28:02,950
PIP install PE Tree, off you go,

563
00:28:02,950 --> 00:28:07,950
and hopefully this becomes one
of your de facto PE viewer.

564
00:28:08,800 --> 00:28:10,169
I know there are a lot
of good ones out there

565
00:28:10,170 --> 00:28:13,960
and I'd never aim to replace them fully.

566
00:28:13,960 --> 00:28:15,860
There are certainly others I used too.

567
00:28:17,520 --> 00:28:21,010
For those of you that do use disassemblers

568
00:28:21,010 --> 00:28:23,520
and debuggers day-to-day,

569
00:28:23,520 --> 00:28:25,020
I'd hope that you'd be able to grab this

570
00:28:25,020 --> 00:28:27,210
and at least be able to do some dumping

571
00:28:27,210 --> 00:28:29,780
and rebuild the IATs and IDTs,

572
00:28:29,780 --> 00:28:34,780
and get malware back into a
more sort of analyzable form,

573
00:28:35,370 --> 00:28:37,724
if that's even a word.

574
00:28:37,724 --> 00:28:42,724
And, sort of, long term, if you
know, people are interested,

575
00:28:42,960 --> 00:28:46,020
and willing, and able, I'm
more than happy for anyone

576
00:28:46,020 --> 00:28:48,370
to create pull requests some GitHub

577
00:28:48,370 --> 00:28:50,629
to contribute to development.

578
00:28:50,630 --> 00:28:53,200
Or the very least, if there's features

579
00:28:53,200 --> 00:28:55,140
or you encounter issues and bugs,

580
00:28:55,140 --> 00:28:57,920
feel free to create a
ticket on the GitHub page.

581
00:28:57,920 --> 00:29:00,713
And definitely happy to look into that.

582
00:29:01,600 --> 00:29:03,530
So, yeah, quick final summary then

583
00:29:03,530 --> 00:29:06,030
of everything we've just gone over.

584
00:29:06,030 --> 00:29:08,280
So obviously PE Tree is open source tool

585
00:29:08,280 --> 00:29:09,850
for reverse engineering

586
00:29:09,850 --> 00:29:12,800
or aiding in the reverse
engineering of PE files.

587
00:29:12,800 --> 00:29:14,490
Runs on Windows, Linux, Mac,

588
00:29:14,490 --> 00:29:15,460
which is rather the handy.

589
00:29:15,460 --> 00:29:19,290
Plugins for IDA pro, Rekall
and Ghidra, with Volatility

590
00:29:19,290 --> 00:29:21,633
and Minidumps coming fairly soon.

591
00:29:22,670 --> 00:29:24,210
We can view, explore, dump

592
00:29:24,210 --> 00:29:26,230
and reconstruct imports in PE files.

593
00:29:26,230 --> 00:29:29,690
And it's up there on GitHub
for everyone to enjoy

594
00:29:29,690 --> 00:29:31,210
and contribute.

595
00:29:31,210 --> 00:29:32,043
And that's it.

596
00:29:32,043 --> 00:29:33,209
Thank you very much from me.

597
00:29:33,210 --> 00:29:34,100
And thanks for joining.

598
00:29:34,100 --> 00:29:36,409
And I hope you have a great
rest of the conference.

599
00:29:36,410 --> 00:29:37,243
Cheers!

