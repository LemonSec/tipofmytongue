1
00:00:01,030 --> 00:00:03,349
- Hi everyone, my name's Heather Adkins

2
00:00:03,350 --> 00:00:06,560
and I'm a senior director of
security engineering at Google.

3
00:00:06,560 --> 00:00:08,790
And I'm here today to talk a little bit

4
00:00:08,790 --> 00:00:11,459
about building secure
and reliable systems.

5
00:00:11,460 --> 00:00:13,440
Thank you to RSA for having me.

6
00:00:13,440 --> 00:00:15,830
Thank you for all of you for joining in.

7
00:00:15,830 --> 00:00:17,410
I'm here to answer questions throughout

8
00:00:17,410 --> 00:00:19,560
so you can drop questions
into the chat box

9
00:00:19,560 --> 00:00:22,192
and I'll try to answer
your questions as we go.

10
00:00:23,970 --> 00:00:27,770
So I'd like to start today by pondering

11
00:00:27,770 --> 00:00:30,110
some of the following questions:

12
00:00:30,110 --> 00:00:33,120
Can a system ever be fundamentally secure

13
00:00:33,120 --> 00:00:36,629
if it's not reliable and similarly

14
00:00:36,630 --> 00:00:40,100
can it be reliable if it's not secure?

15
00:00:40,100 --> 00:00:43,640
Now, if you think about the way
complex systems are designed

16
00:00:43,640 --> 00:00:46,270
whether they're airplanes or automobiles,

17
00:00:46,270 --> 00:00:49,080
a fundamental principle is to make sure

18
00:00:49,080 --> 00:00:52,019
that they run and execute under duress,

19
00:00:52,020 --> 00:00:55,300
reliably over long periods of time.

20
00:00:55,300 --> 00:00:57,489
Similarly, we expect them to be safe.

21
00:00:57,490 --> 00:01:01,860
Not only do we run to run safely every day

22
00:01:01,860 --> 00:01:04,492
but to protect us in the
event of an accident.

23
00:01:05,379 --> 00:01:08,199
And this is not unlike
modern computing systems

24
00:01:08,200 --> 00:01:11,270
and large scale services
that we use online

25
00:01:11,270 --> 00:01:14,940
like YouTube and Gmail,
perhaps Netflix and Zoom.

26
00:01:14,940 --> 00:01:17,610
These are services we've
come to really rely on

27
00:01:17,610 --> 00:01:19,810
especially during the pandemic.

28
00:01:19,810 --> 00:01:20,910
They have allowed us to connect

29
00:01:20,910 --> 00:01:22,170
with people all over the world

30
00:01:22,170 --> 00:01:25,210
and get stuff done while
we're working remotely.

31
00:01:25,210 --> 00:01:28,630
So imagine if these services
weren't reliable or secure,

32
00:01:28,630 --> 00:01:31,970
for example if zoom was reliably running

33
00:01:31,970 --> 00:01:33,210
during a classroom session

34
00:01:33,210 --> 00:01:36,160
but a lurker constantly zoom bombed it.

35
00:01:36,160 --> 00:01:40,750
Or if your access to Gmail is
really fast and stores lots

36
00:01:40,750 --> 00:01:44,020
of data reliably, but your
email is constantly being read

37
00:01:44,020 --> 00:01:47,110
by hackers because they
guessed your password.

38
00:01:47,110 --> 00:01:51,440
And in reality, we as
developers have long relied

39
00:01:51,440 --> 00:01:54,110
on principles of
reliability as cornerstones

40
00:01:54,110 --> 00:01:55,344
in any of our designs.

41
00:01:55,344 --> 00:01:59,089
If a system doesn't run
it, then it's not a system

42
00:01:59,090 --> 00:02:02,210
but increasingly we're seeing
the rise in this principle

43
00:02:02,210 --> 00:02:05,250
of security and its
close counterpart privacy

44
00:02:05,250 --> 00:02:07,083
as being similarly mandatory.

45
00:02:07,970 --> 00:02:10,080
So what I'd like to discuss
today are some new ways

46
00:02:10,080 --> 00:02:13,690
we should be thinking about
resiliency in our systems based

47
00:02:13,690 --> 00:02:15,700
in how they're architected and designed.

48
00:02:15,700 --> 00:02:18,690
And these are the ways we thought

49
00:02:18,690 --> 00:02:21,713
about how to make Google
really resilient over time.

50
00:02:23,140 --> 00:02:25,762
And this is an increasingly
important topic.

51
00:02:26,900 --> 00:02:28,570
Every day, we see new headlines

52
00:02:28,570 --> 00:02:31,359
about companies that we
rely on being compromised.

53
00:02:31,360 --> 00:02:33,680
Let's just take the example
of supply chain attacks

54
00:02:33,680 --> 00:02:36,850
which is very front and center right now.

55
00:02:36,850 --> 00:02:39,380
Supply chain attacks very
simply put, are attacks

56
00:02:39,380 --> 00:02:42,150
on technology companies
that build the software

57
00:02:42,150 --> 00:02:43,790
and hardware we rely on

58
00:02:43,790 --> 00:02:45,900
and that we integrate
into our environments.

59
00:02:45,900 --> 00:02:47,860
These are tools we use to design software

60
00:02:47,860 --> 00:02:51,950
and hardware to compile
test, deploy software.

61
00:02:51,950 --> 00:02:54,190
Even the tools we use
to verify that software

62
00:02:54,190 --> 00:02:57,930
and hardware is in and of
itself reliable and secure.

63
00:02:57,930 --> 00:03:02,160
And these technologies and
the companies that build them

64
00:03:02,160 --> 00:03:05,750
we're all at risk and attackers
know how important they are

65
00:03:05,750 --> 00:03:09,730
to us and how they can be
leveraged to attack others.

66
00:03:09,730 --> 00:03:12,820
Now, if you're new to the
field, you may not realize

67
00:03:12,820 --> 00:03:14,630
that these have been
going on for some time.

68
00:03:14,630 --> 00:03:16,040
I put a quick timeline together.

69
00:03:16,040 --> 00:03:18,630
How does you can see it's not complete

70
00:03:18,630 --> 00:03:20,440
by any means those of you

71
00:03:20,440 --> 00:03:23,320
in the know who will probably
spot some things missing

72
00:03:23,320 --> 00:03:26,130
but it does demonstrate that
we've had some challenges

73
00:03:26,130 --> 00:03:28,423
in this space for a very, very long time.

74
00:03:29,370 --> 00:03:31,670
You might even wonder if we've known this

75
00:03:31,670 --> 00:03:33,030
as a risk for a long time.

76
00:03:33,030 --> 00:03:34,380
Why does it keep happening?

77
00:03:35,300 --> 00:03:38,160
I would pause it it's
because as an industry

78
00:03:38,160 --> 00:03:41,070
we haven't really gotten
down to earth serious

79
00:03:41,070 --> 00:03:43,280
about how our systems need to be built

80
00:03:43,280 --> 00:03:45,270
how our networks need to be constructed

81
00:03:45,270 --> 00:03:49,460
and how all of these ecosystems
fit tightly together.

82
00:03:49,460 --> 00:03:52,040
And we haven't made that
hard choice to change

83
00:03:52,040 --> 00:03:56,179
how we teach practitioners
better ways to do things.

84
00:03:56,180 --> 00:03:58,930
So the method I would
propose is that we start to

85
00:03:58,930 --> 00:04:01,080
view these systems as
having interconnected

86
00:04:01,080 --> 00:04:04,790
interlinked properties of
reliability and security

87
00:04:04,790 --> 00:04:06,350
and that everyone who builds, maintains

88
00:04:06,350 --> 00:04:09,210
and deploys them thinks of
these things as existing

89
00:04:09,210 --> 00:04:13,450
not only by default, but
as inherently necessary.

90
00:04:13,450 --> 00:04:15,950
And one reason I like
this framing so much is

91
00:04:15,950 --> 00:04:20,039
that reliability concepts are
so familiar to developers.

92
00:04:20,040 --> 00:04:22,560
And these concepts are
often more approachable

93
00:04:22,560 --> 00:04:25,200
than some of our complex
security topics have been

94
00:04:26,080 --> 00:04:28,753
over the many years we've
been talking about this.

95
00:04:29,710 --> 00:04:31,659
At a high level, what
does this really mean?

96
00:04:31,660 --> 00:04:33,190
What am I talking about?

97
00:04:33,190 --> 00:04:35,310
It means we need to
rethink entirely the way

98
00:04:35,310 --> 00:04:39,060
we build systems and the way
we approach designing things

99
00:04:39,060 --> 00:04:42,870
in effect, we need to
reshape our ecosystems.

100
00:04:42,870 --> 00:04:43,950
Now I'm fond of saying

101
00:04:43,950 --> 00:04:46,219
that modern computing systems are a bit

102
00:04:46,220 --> 00:04:49,950
like fish without scales,
scales help keep the saltwater

103
00:04:49,950 --> 00:04:54,810
out or gills, gills, help fish
consume oxygen in the water.

104
00:04:54,810 --> 00:04:57,760
Well, modern computing
systems are a bit like fish

105
00:04:57,760 --> 00:05:00,740
that have not adapted
to living in the ocean.

106
00:05:00,740 --> 00:05:04,730
Modern computing systems have
no resiliency on the internet.

107
00:05:04,730 --> 00:05:07,733
That is the ecosystem that
they live in by default.

108
00:05:08,620 --> 00:05:10,610
We need to start building
the systems differently

109
00:05:10,610 --> 00:05:12,790
and reshape the ecosystem they live in

110
00:05:12,790 --> 00:05:15,570
in order to avoid the kinds
of problems we are seeing

111
00:05:15,570 --> 00:05:18,890
with the software supply
chain every single day

112
00:05:18,890 --> 00:05:21,960
but practically, what does
this mean practically?

113
00:05:21,960 --> 00:05:24,780
Let's walk through three
examples I pulled out.

114
00:05:24,780 --> 00:05:27,409
There are so many others,
but I picked these

115
00:05:27,410 --> 00:05:30,130
because we've walked this
journey at Google and

116
00:05:30,130 --> 00:05:32,450
because they're hot topics
that I hear practitioners

117
00:05:32,450 --> 00:05:33,823
discussing all the time.

118
00:05:35,470 --> 00:05:38,080
The first example I'd like to use is

119
00:05:38,080 --> 00:05:39,880
around enterprise architectures.

120
00:05:39,880 --> 00:05:42,840
That is the kinds of
networks that we build

121
00:05:42,840 --> 00:05:45,429
for the companies we all work for.

122
00:05:45,430 --> 00:05:47,520
Now, when most practitioners are learning

123
00:05:47,520 --> 00:05:50,930
about enterprise network
architectures, they're doing so

124
00:05:50,930 --> 00:05:53,320
using curriculum that
that we've been teaching

125
00:05:53,320 --> 00:05:56,010
in the same way for many, many years.

126
00:05:56,010 --> 00:05:57,780
For example, right now,
if you're going through

127
00:05:57,780 --> 00:06:02,359
a certification, let's take
the CompTIA Network+ cert,

128
00:06:02,360 --> 00:06:04,770
you'll learn about the TCP/IP Stack

129
00:06:04,770 --> 00:06:06,159
and what ethernet is.

130
00:06:06,160 --> 00:06:09,610
And they teach network
segmentation as a security feature

131
00:06:09,610 --> 00:06:10,443
which is great.

132
00:06:11,660 --> 00:06:14,610
I also did a quick survey
through the academic courses

133
00:06:14,610 --> 00:06:17,300
online at the moment
during the pandemic, all

134
00:06:17,300 --> 00:06:20,530
of their syllabuses are
online, which is really great.

135
00:06:20,530 --> 00:06:23,940
So let's take computer
networking class at Stanford

136
00:06:23,940 --> 00:06:26,490
that they're teaching right
now, they're teaching all

137
00:06:26,490 --> 00:06:29,890
of the same basics and
even some advanced topics

138
00:06:29,890 --> 00:06:32,260
like software, defined networking,

139
00:06:32,260 --> 00:06:34,849
but at a high level for us was 30 years.

140
00:06:34,850 --> 00:06:35,930
Most of us are taught

141
00:06:35,930 --> 00:06:39,180
and network architecture principle
that results in networks.

142
00:06:39,180 --> 00:06:40,930
Like the one you see on this slide.

143
00:06:41,900 --> 00:06:43,640
Here, we have the internet, which stands

144
00:06:43,640 --> 00:06:46,442
to reason is relatively untrusted.

145
00:06:46,442 --> 00:06:48,342
And then there's usually a connection,

146
00:06:49,751 --> 00:06:52,780
an internet connection
into your private network

147
00:06:52,780 --> 00:06:54,880
such as your company's enterprise network.

148
00:06:56,170 --> 00:06:58,560
And then there are people who are mobile.

149
00:06:58,560 --> 00:07:01,220
Maybe they usually travel for business

150
00:07:02,510 --> 00:07:04,283
or occasionally work from home.

151
00:07:05,180 --> 00:07:08,060
And very recently we've
also been seeing the rise

152
00:07:08,060 --> 00:07:11,300
of software as a service and
corporate infrastructure moving

153
00:07:11,300 --> 00:07:13,440
into cloud computing environments.

154
00:07:13,440 --> 00:07:15,930
But surprisingly, one
thing that hasn't become

155
00:07:15,930 --> 00:07:19,900
very common is the way
people work remotely.

156
00:07:19,900 --> 00:07:24,130
In fact, I've met many
enterprises who moved to the cloud

157
00:07:24,130 --> 00:07:26,170
but still require their
employees to connect

158
00:07:26,170 --> 00:07:28,270
into the cloud-based services

159
00:07:28,270 --> 00:07:29,490
through corporate VPN,

160
00:07:29,490 --> 00:07:32,460
through the trusted corporate network.

161
00:07:32,460 --> 00:07:34,700
And I often call this the castle model

162
00:07:34,700 --> 00:07:37,550
where we assume everything
inside that trusted network

163
00:07:37,550 --> 00:07:41,843
is safe and everything
outside the castle is not.

164
00:07:42,840 --> 00:07:47,840
This castle model presents
us with a number of problems.

165
00:07:47,950 --> 00:07:50,830
Let's talk first about reliability.

166
00:07:50,830 --> 00:07:53,289
And again, I'll use the
remote worker as the core

167
00:07:53,290 --> 00:07:55,100
of my argument here.

168
00:07:55,100 --> 00:07:56,410
I think it's familiar to many people

169
00:07:56,410 --> 00:07:59,513
because COVID-19 has really
brought us front and center.

170
00:08:00,520 --> 00:08:02,623
First off VPNs don't scale very well.

171
00:08:03,630 --> 00:08:04,990
And if you're in a company that's made

172
00:08:04,990 --> 00:08:07,400
this transition to work
from home during COVID-19

173
00:08:07,400 --> 00:08:11,760
you've probably seen this
firsthand systems designed

174
00:08:11,760 --> 00:08:14,219
for people to occasionally work from home

175
00:08:14,220 --> 00:08:17,380
began to fall over with the sudden traffic

176
00:08:17,380 --> 00:08:20,920
when everyone was required to be remote.

177
00:08:20,920 --> 00:08:24,380
And if you've also ever
tried to work on an airplane

178
00:08:24,380 --> 00:08:27,210
using a VPN you've probably
experienced frequent drops,

179
00:08:27,210 --> 00:08:30,380
or actually just the complete inability

180
00:08:30,380 --> 00:08:32,480
for the VPN negotiation to happen.

181
00:08:32,480 --> 00:08:34,190
And this is because VPN connections

182
00:08:34,190 --> 00:08:35,493
are typically full tunnel.

183
00:08:36,350 --> 00:08:37,860
The technologies behind them

184
00:08:37,860 --> 00:08:41,850
like IP sec are really high cost.

185
00:08:41,850 --> 00:08:44,230
And from a network traffic perspective,

186
00:08:44,230 --> 00:08:45,580
they're not very efficient.

187
00:08:46,810 --> 00:08:48,959
And finally, you know, all
this service aggregation

188
00:08:48,960 --> 00:08:53,710
around VPN disconnects and
reliability issues leads

189
00:08:53,710 --> 00:08:55,040
to productivity loss

190
00:08:55,040 --> 00:08:57,719
and productivity loss means revenue loss.

191
00:08:57,720 --> 00:08:59,870
On the other hand with security

192
00:08:59,870 --> 00:09:01,760
unless you're very, very diligent and very

193
00:09:01,760 --> 00:09:05,920
careful these kind of remote
work VPN architectures

194
00:09:05,920 --> 00:09:09,569
start to introduce more
security issues than they solve.

195
00:09:09,570 --> 00:09:11,100
First, you end up with roaming devices

196
00:09:11,100 --> 00:09:13,210
that you don't necessarily control.

197
00:09:13,210 --> 00:09:16,130
A lot of companies don't restrict access

198
00:09:16,130 --> 00:09:19,960
to strongly managed, verified
devices, even Google,

199
00:09:19,960 --> 00:09:22,440
and before it's tickets
journey to rethink this

200
00:09:22,440 --> 00:09:26,160
over 10 years ago, lots of
people connected over VPN

201
00:09:26,160 --> 00:09:28,969
with their personal
systems and many companies

202
00:09:28,970 --> 00:09:31,380
even still today have a BYO program

203
00:09:31,380 --> 00:09:33,520
where you can use any system to do it.

204
00:09:33,520 --> 00:09:36,393
And goodness knows what's
going on on the systems.

205
00:09:37,300 --> 00:09:42,300
VPNs are also often used to
grant broadly privileged access.

206
00:09:43,080 --> 00:09:46,040
They are designed to be
tunnels for all traffic

207
00:09:46,040 --> 00:09:48,670
between two highly trusted places.

208
00:09:48,670 --> 00:09:50,599
And this means that if
any threat is introduced

209
00:09:50,600 --> 00:09:53,500
into that roaming device,
children using them

210
00:09:53,500 --> 00:09:57,150
for remote school, or unfortunately,
as we are increasingly

211
00:09:57,150 --> 00:10:01,280
seeing spousal abuse at home,
you know, attackers can get

212
00:10:01,280 --> 00:10:03,640
onto these machines
and then laterally move

213
00:10:03,640 --> 00:10:06,120
from the VPN connection
into more sensitive spaces

214
00:10:06,120 --> 00:10:07,380
of your network.

215
00:10:07,380 --> 00:10:09,560
And this is not ideal.

216
00:10:09,560 --> 00:10:11,270
And finally, when things don't go well,

217
00:10:11,270 --> 00:10:15,670
if you start throwing up
roadblocks or start reducing access

218
00:10:15,670 --> 00:10:16,930
users get creative.

219
00:10:16,930 --> 00:10:19,760
I've known many users who have worked

220
00:10:19,760 --> 00:10:21,420
around our security controls tried

221
00:10:21,420 --> 00:10:24,130
to just in order to get stuff done.

222
00:10:24,130 --> 00:10:26,780
So you can see here that
we have both reliability

223
00:10:26,780 --> 00:10:27,959
and security problems

224
00:10:27,960 --> 00:10:31,760
with this very traditional
enterprise network architecture

225
00:10:31,760 --> 00:10:35,160
that we teach practitioners
in their training

226
00:10:37,050 --> 00:10:38,939
and we want to do differently.

227
00:10:38,940 --> 00:10:40,610
We would all be right to ask,

228
00:10:40,610 --> 00:10:42,760
what could this look like to be better?

229
00:10:42,760 --> 00:10:47,040
How can we reshape this ecosystem?

230
00:10:47,040 --> 00:10:48,420
Well, Google started doing this back

231
00:10:48,420 --> 00:10:51,640
in 2011 with the goal of doing just that.

232
00:10:51,640 --> 00:10:55,020
And you often hear this
called zero trust networking

233
00:10:55,020 --> 00:10:59,260
in some circles at Google we
pioneered this architecture

234
00:10:59,260 --> 00:11:02,097
and called this BeyondCorp.

235
00:11:02,097 --> 00:11:05,110
Beyond Corp being beyond the old Corp

236
00:11:05,110 --> 00:11:08,400
or beyond the enterprise
that we used to know.

237
00:11:08,400 --> 00:11:12,040
The premise here is that the
once trusted corporate network

238
00:11:12,040 --> 00:11:13,530
is no longer trusted.

239
00:11:13,530 --> 00:11:17,449
In fact, working inside a
Google building is the same

240
00:11:17,450 --> 00:11:19,703
as if you were working
inside the Starbucks.

241
00:11:21,790 --> 00:11:24,469
First, every device has
to prove itself is safe

242
00:11:24,470 --> 00:11:27,380
Whether it's in that building
or whether it's here at home

243
00:11:27,380 --> 00:11:30,770
where I am right now, a
series of checks happen using

244
00:11:30,770 --> 00:11:32,890
what we call the trust decision pipeline

245
00:11:32,890 --> 00:11:36,093
that allowed the device to
assert its trustworthiness.

246
00:11:37,080 --> 00:11:39,060
This could be because the
machine has the certificate

247
00:11:39,060 --> 00:11:42,380
that we've given it but
we'll also use other factors.

248
00:11:42,380 --> 00:11:44,120
Like, is it the right patch level?

249
00:11:44,120 --> 00:11:47,180
Has the user authenticated
using a strong authenticator

250
00:11:47,180 --> 00:11:50,270
like a security key, or
are they even working

251
00:11:50,270 --> 00:11:51,280
at the right time of day

252
00:11:51,280 --> 00:11:53,569
that we would expect them to be?

253
00:11:53,570 --> 00:11:58,570
Second, we leverage the fact
that most enterprise services

254
00:11:58,780 --> 00:12:02,220
at this point are web
based productivity apps

255
00:12:02,220 --> 00:12:05,010
like Gmail or Google docs

256
00:12:05,010 --> 00:12:08,700
filing expense reports,
accessing HR systems.

257
00:12:08,700 --> 00:12:11,080
This is all facilitated
today by the web browser

258
00:12:11,080 --> 00:12:13,570
which is increasingly the
most important software

259
00:12:13,570 --> 00:12:15,340
in the ecosystem.

260
00:12:15,340 --> 00:12:18,100
And all of this means that
we can begin to narrow down

261
00:12:18,100 --> 00:12:20,150
what traffic needs to be trusted

262
00:12:20,150 --> 00:12:24,020
and to come from these trusted devices.

263
00:12:24,020 --> 00:12:25,860
Now I'm simplifying here a bit for time

264
00:12:25,860 --> 00:12:27,940
but effectively what we're saying is

265
00:12:27,940 --> 00:12:30,150
that we do strong verification and machine

266
00:12:30,150 --> 00:12:33,449
and the user before
allowing any SSL connection

267
00:12:33,450 --> 00:12:35,450
to our enterprise cloud services.

268
00:12:35,450 --> 00:12:37,640
There's no VPN, everything is done

269
00:12:37,640 --> 00:12:39,863
over the internet using SSL.

270
00:12:41,600 --> 00:12:45,760
The effect here is clear for
both reliability and security.

271
00:12:45,760 --> 00:12:47,920
Instead of the heavyweight VPN

272
00:12:47,920 --> 00:12:50,719
for connections into corporate services,

273
00:12:50,720 --> 00:12:54,180
we rely on the strength of
the more performance SSL.

274
00:12:54,180 --> 00:12:56,290
And by designing the network in this way

275
00:12:56,290 --> 00:12:59,490
at any time we can make
the workforce mobile.

276
00:12:59,490 --> 00:13:01,380
The solution even works on airplanes

277
00:13:01,380 --> 00:13:05,150
without disruptive VPN
software, configuration problems

278
00:13:05,150 --> 00:13:07,300
protocol issues with
routers and firewalls.

279
00:13:07,300 --> 00:13:10,859
It just works as soon
as you open the machine.

280
00:13:10,860 --> 00:13:12,960
And it also has a lot
of benefits for security

281
00:13:12,960 --> 00:13:14,750
because we have confidence in the devices

282
00:13:14,750 --> 00:13:17,220
that are accessing the cloud services.

283
00:13:17,220 --> 00:13:18,460
We know who the employees are.

284
00:13:18,460 --> 00:13:21,241
We know that their devices
are trustworthy also.

285
00:13:21,241 --> 00:13:24,370
And one of the best benefits we've gotten

286
00:13:24,370 --> 00:13:28,130
that wasn't immediate in
our design 10 years ago

287
00:13:28,130 --> 00:13:31,390
but we have seen be very
successful throughout is

288
00:13:31,390 --> 00:13:33,840
that if the attacker does
happen to get control

289
00:13:33,840 --> 00:13:37,500
that roaming device they're
trapped, that's all they get.

290
00:13:37,500 --> 00:13:40,770
They can't use this
connection to make remote

291
00:13:40,770 --> 00:13:44,220
Windows RPC calls into the
active directory environment.

292
00:13:44,220 --> 00:13:47,550
They can't access into the
company's financial server.

293
00:13:47,550 --> 00:13:49,349
There's no trusted tunnel back

294
00:13:49,350 --> 00:13:51,230
to a highly privileged network

295
00:13:51,230 --> 00:13:53,950
or a set of highly privileged systems.

296
00:13:53,950 --> 00:13:55,280
Now this isn't foolproof

297
00:13:55,280 --> 00:13:58,120
but our studies have shown that
it does slow attackers down.

298
00:13:58,120 --> 00:14:00,570
It slows our red teams
down and importantly

299
00:14:00,570 --> 00:14:03,460
it gives us a leg up during
incident response to get

300
00:14:03,460 --> 00:14:05,830
to the attacker sooner while
they're trying to figure

301
00:14:05,830 --> 00:14:08,700
out what ecosystem they're operating in.

302
00:14:08,700 --> 00:14:09,533
So you can see that

303
00:14:09,533 --> 00:14:13,070
by rethinking the way the
enterprise architecture works

304
00:14:13,070 --> 00:14:14,620
we've actually solved a lot

305
00:14:14,620 --> 00:14:17,540
of problems about reliability
and security together.

306
00:14:17,540 --> 00:14:20,780
And we can solve these challenges
together at the same time

307
00:14:20,780 --> 00:14:22,069
in a way that the practitioners

308
00:14:22,070 --> 00:14:25,240
in the field who are
implementing the systems can also

309
00:14:25,240 --> 00:14:28,623
appreciate using the domain
that they're most familiar with.

310
00:14:30,450 --> 00:14:33,600
Let's shift topics to my second example,

311
00:14:33,600 --> 00:14:35,410
around application development.

312
00:14:35,410 --> 00:14:37,550
And this is a really vast to topic.

313
00:14:37,550 --> 00:14:39,900
So to give us some
focus, we might actually

314
00:14:39,900 --> 00:14:44,242
consider web application
development for our conversation.

315
00:14:45,400 --> 00:14:47,900
I did a quick survey,
you'll see a theme here.

316
00:14:47,900 --> 00:14:49,860
I did a quick survey of
professional trainings,

317
00:14:49,860 --> 00:14:54,540
certificates, academic studies
and there are a wide variety

318
00:14:54,540 --> 00:14:58,500
of approaches that are taken
to teaching developers,

319
00:14:58,500 --> 00:15:00,480
how to build, not just code

320
00:15:00,480 --> 00:15:03,390
but systems that that code runs on.

321
00:15:03,390 --> 00:15:05,860
And there are two pretty popular models.

322
00:15:05,860 --> 00:15:08,680
There are others, but
I'll talk about these two.

323
00:15:08,680 --> 00:15:11,050
The first is the three tier architecture.

324
00:15:11,050 --> 00:15:14,670
And when I first entered
the industry 20 years ago

325
00:15:14,670 --> 00:15:18,130
the three tier model was the
one talked about the most.

326
00:15:18,130 --> 00:15:21,280
In fact, before I joined
Google many, many years ago

327
00:15:22,230 --> 00:15:25,550
I used to run the large scale
mail system for excite.com

328
00:15:25,550 --> 00:15:29,410
which was when web mail
was still very very new.

329
00:15:29,410 --> 00:15:32,213
And our architecture,
mostly fit into this model.

330
00:15:33,180 --> 00:15:35,520
And the second model that
we've seen become very

331
00:15:35,520 --> 00:15:37,939
very popular because it's open source

332
00:15:37,940 --> 00:15:41,220
and very flexible is the LAMP stack.

333
00:15:41,220 --> 00:15:45,170
Now LAMP stands for Linux
Apache, MySQL and PHP.

334
00:15:45,170 --> 00:15:48,640
We also use the P two mean Perl and Python

335
00:15:48,640 --> 00:15:50,569
whatever scripting language you're using

336
00:15:50,570 --> 00:15:52,810
to create the applications.

337
00:15:52,810 --> 00:15:54,439
Again, there are other stacks

338
00:15:54,440 --> 00:15:57,770
but let's just talk about
these two for a moment.

339
00:15:57,770 --> 00:16:00,100
Now, these models provide a basic engine

340
00:16:00,100 --> 00:16:01,610
for someone who wants to design,

341
00:16:01,610 --> 00:16:04,090
implement and maintain a web application

342
00:16:04,090 --> 00:16:06,480
such as an e-commerce website

343
00:16:06,480 --> 00:16:08,450
and LAMP has particularly attractive

344
00:16:08,450 --> 00:16:09,990
because it's all open source

345
00:16:09,990 --> 00:16:12,150
there's reasonably good documentation.

346
00:16:12,150 --> 00:16:16,860
A very strong community and
training that you can get.

347
00:16:16,860 --> 00:16:19,180
It's also very quickly quick to deploy

348
00:16:19,180 --> 00:16:20,803
on all the bins cloud providers.

349
00:16:21,660 --> 00:16:25,670
You can quickly develop
and deploy a LAMP stack in

350
00:16:25,670 --> 00:16:28,490
in any of the big cloud
environments at this point.

351
00:16:28,490 --> 00:16:30,590
And you can even do it on
your home Linux system.

352
00:16:30,590 --> 00:16:32,160
You can do it on a laptop

353
00:16:32,160 --> 00:16:36,140
so that you can run an
e-commerce application

354
00:16:36,140 --> 00:16:37,270
while you're on an airplane.

355
00:16:37,270 --> 00:16:40,110
Nobody else will be able
to use it, but you will.

356
00:16:40,110 --> 00:16:42,970
You can see there's a lot of
convenience and having quick

357
00:16:42,970 --> 00:16:45,160
easy access to technology that just works.

358
00:16:45,160 --> 00:16:46,650
And this is the promise of open source.

359
00:16:46,650 --> 00:16:48,500
And it's, it's great for many reasons

360
00:16:49,430 --> 00:16:52,829
but it does come with some
downsides, any developer

361
00:16:52,830 --> 00:16:55,640
that has launched a
single LAMP stack instance

362
00:16:55,640 --> 00:16:58,620
for example, for an online service begins

363
00:16:58,620 --> 00:17:03,620
to notice the issues
immediately first reliability.

364
00:17:03,830 --> 00:17:05,260
By default there's no load balancing

365
00:17:05,260 --> 00:17:06,510
between multiple servers

366
00:17:06,510 --> 00:17:08,810
which means that if you
have too much traffic

367
00:17:08,810 --> 00:17:10,560
you can't distribute the load.

368
00:17:10,560 --> 00:17:12,520
You find yourself having
to add another server

369
00:17:12,520 --> 00:17:13,353
and another one

370
00:17:13,353 --> 00:17:15,369
and then find a solution
for load balancing.

371
00:17:15,369 --> 00:17:17,703
And you can kind of see
where this is going.

372
00:17:18,630 --> 00:17:22,819
Similarly if you have an
errant process or a bug

373
00:17:22,819 --> 00:17:26,089
in your code that leads to
an expensive database query

374
00:17:26,089 --> 00:17:30,659
maybe it overloads the database,
your application queries

375
00:17:30,660 --> 00:17:32,400
the database too often.

376
00:17:32,400 --> 00:17:34,710
The web app has lots of
hanging up and connections.

377
00:17:34,710 --> 00:17:36,810
It starts to become overloaded.

378
00:17:36,810 --> 00:17:39,290
This is all expanded if you're
running the whole LAMP stack

379
00:17:39,290 --> 00:17:40,953
on just one single machine.

380
00:17:42,370 --> 00:17:44,030
And when all of this complexity is going

381
00:17:44,030 --> 00:17:46,460
on and your app is crashing

382
00:17:46,460 --> 00:17:48,760
you don't really know
which module is broken.

383
00:17:48,760 --> 00:17:51,180
You don't really know where
to start your debugging.

384
00:17:51,180 --> 00:17:53,750
Everything's broken all at the same time.

385
00:17:53,750 --> 00:17:57,150
And keep in mind that there are solutions

386
00:17:57,150 --> 00:17:59,333
in the space to help solve this.

387
00:18:00,560 --> 00:18:03,409
And I don't want to
downplay the importance

388
00:18:03,410 --> 00:18:05,760
of those common modules

389
00:18:05,760 --> 00:18:08,450
networking hardware that
provides load balancing

390
00:18:09,630 --> 00:18:12,540
and allows you to distribute
your apps and do replication.

391
00:18:12,540 --> 00:18:13,980
There are certainly solutions for this

392
00:18:13,980 --> 00:18:16,320
but they're strangely
not as straightforward

393
00:18:16,320 --> 00:18:17,623
in default as we'd like.

394
00:18:18,560 --> 00:18:20,700
On the security front this architecture

395
00:18:20,700 --> 00:18:23,060
has no boundaries built in by default.

396
00:18:23,060 --> 00:18:25,560
If you're running a LAMP stack
on a single machine, or even

397
00:18:25,560 --> 00:18:29,909
if you've distributed across
several machines and sites

398
00:18:29,910 --> 00:18:33,000
for say Apache for the
web server and MySQL

399
00:18:33,000 --> 00:18:35,620
for the database, actually,
the way that these

400
00:18:35,620 --> 00:18:38,590
are administered is that
people just set up SSH

401
00:18:38,590 --> 00:18:43,540
between the hosts and your
MySQL connection allows you

402
00:18:43,540 --> 00:18:46,060
to query any data over it and any time,

403
00:18:46,060 --> 00:18:48,370
as long as you have the credentials.

404
00:18:48,370 --> 00:18:51,689
So an attacker working
in this environment,

405
00:18:51,690 --> 00:18:54,360
perhaps after exploiting a vulnerability

406
00:18:54,360 --> 00:18:57,620
in your web application
suddenly not just has access

407
00:18:57,620 --> 00:19:00,659
to that, but suddenly
has access to everything

408
00:19:00,660 --> 00:19:02,940
because everything so
closely tied together

409
00:19:02,940 --> 00:19:05,640
and the privileges are broadly shared,

410
00:19:05,640 --> 00:19:08,260
and this is the way most
systems administrators

411
00:19:08,260 --> 00:19:09,853
get introduced to security.

412
00:19:10,850 --> 00:19:14,340
Is they find that they've
suddenly been hacked

413
00:19:14,340 --> 00:19:17,750
by vulnerability in their infrastructure.

414
00:19:17,750 --> 00:19:21,640
And suddenly the attacker
has access to everything.

415
00:19:21,640 --> 00:19:24,300
And that's how I became
a security engineer.

416
00:19:24,300 --> 00:19:26,000
I was assisted men who got hacked.

417
00:19:27,190 --> 00:19:29,730
I think we'd like to think
about this differently.

418
00:19:29,730 --> 00:19:31,970
I would hope in 10 years
we're no longer talking

419
00:19:31,970 --> 00:19:34,580
about this problem I'm discussing.

420
00:19:34,580 --> 00:19:38,540
And one of the solutions to
this, it's not the only one

421
00:19:38,540 --> 00:19:41,330
but one of the solutions
is to this is to begin

422
00:19:41,330 --> 00:19:44,389
thinking differently
and no longer teaching

423
00:19:44,390 --> 00:19:47,570
the basic architecture I've described,

424
00:19:47,570 --> 00:19:51,179
but instead encouraging people
to use these technologies,

425
00:19:51,180 --> 00:19:56,180
Linux Apache, MySQL,
Python, hopefully over PHP,

426
00:19:56,520 --> 00:20:00,100
is to use modern architecture
design from the very beginning

427
00:20:00,100 --> 00:20:03,139
to put these pieces
together in a different way

428
00:20:03,140 --> 00:20:05,350
that becomes the best practice.

429
00:20:05,350 --> 00:20:06,610
And a prevalent example of this

430
00:20:06,610 --> 00:20:08,913
is using Microservices as a concept.

431
00:20:10,040 --> 00:20:11,820
Microservices segment elements

432
00:20:11,820 --> 00:20:14,439
of an application into smaller components

433
00:20:14,440 --> 00:20:18,880
create boundaries around them
and allows the components

434
00:20:18,880 --> 00:20:20,650
operate in a container environment

435
00:20:20,650 --> 00:20:24,380
or sandbox that provides
that boundary for you.

436
00:20:24,380 --> 00:20:26,070
And then in order to work together,

437
00:20:26,070 --> 00:20:27,929
the different components have to speak

438
00:20:27,930 --> 00:20:30,070
over predefined data flows

439
00:20:30,070 --> 00:20:34,870
APIs RPCs that can be
authenticated in strong ways

440
00:20:34,870 --> 00:20:36,439
and in predictable ways.

441
00:20:36,440 --> 00:20:41,440
And by doing this container
isolation plus data flow model

442
00:20:42,290 --> 00:20:43,980
we're able to control the reliability

443
00:20:43,980 --> 00:20:46,670
and security properties of the system.

444
00:20:46,670 --> 00:20:48,173
Just a bit more carefully.

445
00:20:49,260 --> 00:20:50,650
I grabbed an example here

446
00:20:50,650 --> 00:20:53,253
from the Google cloud
migration documentation.

447
00:20:54,290 --> 00:20:55,399
This is not a Google talk.

448
00:20:55,400 --> 00:20:56,990
I am gonna use some examples from there

449
00:20:56,990 --> 00:21:00,830
but you can find similar examples
in a cloud of your choice

450
00:21:00,830 --> 00:21:05,649
but here we have a relatively
basic monolithic application.

451
00:21:05,650 --> 00:21:06,970
You can see here in the diagram

452
00:21:06,970 --> 00:21:08,650
that you have some app servers

453
00:21:08,650 --> 00:21:10,100
perhaps these are web servers

454
00:21:10,100 --> 00:21:15,090
for a commerce website and
built into the application there

455
00:21:15,090 --> 00:21:20,060
you might do everything from
accepting the HTTPS connection

456
00:21:20,930 --> 00:21:24,160
or allowing the user
to do a product search,

457
00:21:24,160 --> 00:21:28,030
maintain a web cart, maybe even
go through the whole process

458
00:21:28,030 --> 00:21:31,580
of purchasing what's in their web cart.

459
00:21:31,580 --> 00:21:35,810
So these single app servers
tend to do many things.

460
00:21:35,810 --> 00:21:37,580
You also have a cache server

461
00:21:37,580 --> 00:21:40,933
and a search database, a
primary database, and replica's

462
00:21:40,933 --> 00:21:43,010
this is actually a fairly complex web app

463
00:21:43,010 --> 00:21:44,910
but you can see here,
the monolithic nature

464
00:21:44,910 --> 00:21:47,863
of that application server
layer in particular.

465
00:21:48,820 --> 00:21:50,710
But the commonality here is

466
00:21:50,710 --> 00:21:52,320
that there are very few boundaries.

467
00:21:52,320 --> 00:21:55,899
And because of this,
these systems often have

468
00:21:55,900 --> 00:21:58,600
highly privileged access to one another.

469
00:21:58,600 --> 00:22:01,469
Typically the admins can SSH between them.

470
00:22:01,470 --> 00:22:03,150
You can connect from the front end

471
00:22:03,150 --> 00:22:07,350
to the database with a highly
privileged SQL connection.

472
00:22:07,350 --> 00:22:09,459
And they're also highly
dependent on the performance

473
00:22:09,460 --> 00:22:14,460
of one another, any issue with
one becomes an issue with all

474
00:22:15,120 --> 00:22:16,419
but what might this look like

475
00:22:16,420 --> 00:22:21,420
if we consider a more modern
approach to the architecture.

476
00:22:21,790 --> 00:22:23,980
And again, here, this example comes

477
00:22:23,980 --> 00:22:26,610
to us from the cloud
migration documentation.

478
00:22:26,610 --> 00:22:28,209
This is what your architecture might look

479
00:22:28,210 --> 00:22:31,403
like if you decided to be redesign it.

480
00:22:33,020 --> 00:22:37,430
And it takes the most important
thing that we're doing here

481
00:22:37,430 --> 00:22:40,890
is that we're taking that
monolithic application layer

482
00:22:40,890 --> 00:22:43,740
and breaking it down
into different functions.

483
00:22:43,740 --> 00:22:46,840
And each function then
goes into a container.

484
00:22:46,840 --> 00:22:49,540
In this case, it's a Kubernetes container

485
00:22:49,540 --> 00:22:52,470
which allows you to take,
say the product search

486
00:22:52,470 --> 00:22:57,470
or the web cart or the purchase
process, break them down

487
00:22:57,810 --> 00:23:00,690
into a smaller app, and then
put them inside a container

488
00:23:00,690 --> 00:23:03,927
all on their own, which we
then call a microservice.

489
00:23:04,800 --> 00:23:09,389
Each of them would then
connect to other resources.

490
00:23:09,390 --> 00:23:12,950
So instead of MySQL
perhaps you'd use cloud SQL

491
00:23:12,950 --> 00:23:16,730
and access the data through
an API or an RPC interface

492
00:23:16,730 --> 00:23:19,970
instead of the very broad SQL connection.

493
00:23:19,970 --> 00:23:22,300
This allows us to better
control what kinds

494
00:23:22,300 --> 00:23:23,720
of data can be accessed.

495
00:23:23,720 --> 00:23:27,870
And we can put really granular
permissions on that access

496
00:23:27,870 --> 00:23:29,763
so that it's more heavily restricted.

497
00:23:30,830 --> 00:23:32,679
Separately, one of your microservices

498
00:23:33,710 --> 00:23:35,930
might need to store metadata.

499
00:23:35,930 --> 00:23:39,370
Let's say that your product search feature

500
00:23:39,370 --> 00:23:42,080
needs to quickly retrieve data for search.

501
00:23:42,080 --> 00:23:43,820
You always want that to be quite fast

502
00:23:43,820 --> 00:23:45,270
we've learned that over time.

503
00:23:46,140 --> 00:23:50,220
So perhaps instead of a
really heavy SQL database

504
00:23:50,220 --> 00:23:54,030
you put this in a quick retrieval system

505
00:23:54,030 --> 00:23:55,223
like Cloud Firestorm.

506
00:23:56,280 --> 00:23:58,570
And so you can see in doing this

507
00:23:58,570 --> 00:23:59,860
that we've broken the application down

508
00:23:59,860 --> 00:24:03,370
into smaller components, and
as they speak to each other

509
00:24:03,370 --> 00:24:07,030
they're speaking over APIs, and RPCs

510
00:24:07,030 --> 00:24:09,010
this makes the application
a bit more complex.

511
00:24:09,010 --> 00:24:12,410
So microservices are
somewhat controversial

512
00:24:12,410 --> 00:24:16,300
and they need to be balanced
for too much complexity.

513
00:24:16,300 --> 00:24:17,830
We know that too much complexity leads

514
00:24:17,830 --> 00:24:20,590
to worse security outcomes actually.

515
00:24:20,590 --> 00:24:23,639
But what we've gained here are
some very powerful boundaries

516
00:24:23,640 --> 00:24:27,300
and failure domains, and
this benefits, security

517
00:24:27,300 --> 00:24:29,639
and reliability in multiple ways.

518
00:24:29,640 --> 00:24:32,850
For one, if one of your
microservices go down

519
00:24:32,850 --> 00:24:36,060
let's say that you have
a catastrophic failure

520
00:24:36,060 --> 00:24:38,800
of your product search feature.

521
00:24:38,800 --> 00:24:40,750
If that microservice goes down

522
00:24:40,750 --> 00:24:42,160
it won't necessarily bring the others

523
00:24:42,160 --> 00:24:44,180
down because you've broken it out.

524
00:24:44,180 --> 00:24:46,440
Yes, your website will be
a little buggy for a bit

525
00:24:46,440 --> 00:24:47,920
but people could still check out

526
00:24:47,920 --> 00:24:50,163
and they could still
click around your website.

527
00:24:51,110 --> 00:24:54,203
It's also easier to diagnose
if that component is family.

528
00:24:55,050 --> 00:24:56,730
Debugging becomes more straightforward

529
00:24:56,730 --> 00:24:58,590
because you can see within that container

530
00:24:58,590 --> 00:25:01,990
in that failure domain, that's
the domain that's failing

531
00:25:01,990 --> 00:25:03,403
and it's quite easy to see.

532
00:25:04,590 --> 00:25:06,143
This also benefits security.

533
00:25:07,590 --> 00:25:11,330
An attacker overtaking any one
of your microservices means

534
00:25:11,330 --> 00:25:14,199
that they're contained
within that environment.

535
00:25:14,200 --> 00:25:15,610
They won't necessarily be able

536
00:25:15,610 --> 00:25:18,199
to compromise everything else.

537
00:25:18,200 --> 00:25:21,110
Secondly, the inherent
reliability properties

538
00:25:21,110 --> 00:25:23,399
of configuring and running microservices

539
00:25:23,400 --> 00:25:25,810
and modern cloud environments means

540
00:25:25,810 --> 00:25:28,780
that breach recovery is
much more straightforward.

541
00:25:28,780 --> 00:25:29,879
And typically you have to set

542
00:25:29,880 --> 00:25:32,020
up the configuration ahead of time.

543
00:25:32,020 --> 00:25:35,670
It gets stored in the
cloud as a configuration

544
00:25:35,670 --> 00:25:39,020
your data storage solutions
are pre-configured and all

545
00:25:39,020 --> 00:25:42,629
of this is highly reliable
in and of itself by design.

546
00:25:42,630 --> 00:25:45,490
So should an attacker gain
control of this environment.

547
00:25:45,490 --> 00:25:49,730
And you have to rebuild
a lot of that setup work

548
00:25:49,730 --> 00:25:54,550
is saved, and I've seen
customers who get compromised

549
00:25:54,550 --> 00:25:57,669
be able to redeploy new
environments in a matter of minutes

550
00:25:57,670 --> 00:26:02,010
instead of the heavy work
that we typically have to do

551
00:26:02,010 --> 00:26:03,963
in these more traditional environments.

552
00:26:05,230 --> 00:26:07,610
Now I've prepared a really
simplistic picture here.

553
00:26:07,610 --> 00:26:10,250
And for those of you who have
actually done this migration

554
00:26:10,250 --> 00:26:12,090
you know, it's very, very difficult.

555
00:26:12,090 --> 00:26:15,649
But I've simplified it for a reason.

556
00:26:15,650 --> 00:26:17,630
It's because when we are taught

557
00:26:17,630 --> 00:26:19,500
application design as developers

558
00:26:19,500 --> 00:26:23,430
we are taught using very
simplistic examples.

559
00:26:23,430 --> 00:26:26,270
I would advocate that when
we need simplistic examples

560
00:26:26,270 --> 00:26:28,480
these are the examples we use instead.

561
00:26:28,480 --> 00:26:31,100
And in fact that we began to advocate

562
00:26:32,730 --> 00:26:34,590
as we build more complex applications

563
00:26:34,590 --> 00:26:37,709
in our work that that looked
like these simple examples.

564
00:26:37,710 --> 00:26:40,080
It's a way of changing the conversation

565
00:26:40,080 --> 00:26:43,062
within our own ecosystem
and our community.

566
00:26:44,600 --> 00:26:45,510
There's a bonus

567
00:26:45,510 --> 00:26:48,093
because I do imagine
this sounds really hard.

568
00:26:48,093 --> 00:26:50,840
And sometimes the light at the end

569
00:26:50,840 --> 00:26:52,800
of the tunnel is very difficult to see.

570
00:26:52,800 --> 00:26:55,220
So let's just talk about
mobile phone operating systems

571
00:26:55,220 --> 00:26:56,693
for the slightest moment.

572
00:26:58,540 --> 00:27:01,800
Every day, new developers
are being trained

573
00:27:01,800 --> 00:27:05,200
to use the software development kits

574
00:27:05,200 --> 00:27:08,550
for mobile phone apps,
and they're doing so

575
00:27:08,550 --> 00:27:11,260
using frameworks that capture
the inherent properties

576
00:27:11,260 --> 00:27:12,410
of what I've just discussed.

577
00:27:12,410 --> 00:27:15,950
This idea of app isolation,
where the components

578
00:27:15,950 --> 00:27:18,830
of the systems don't have default access.

579
00:27:18,830 --> 00:27:21,929
Each app runs in a container,
and you have to apply

580
00:27:21,930 --> 00:27:25,500
for permission to access data
outside of the container.

581
00:27:25,500 --> 00:27:28,070
Now, you, as a user on
your phone, see this

582
00:27:28,070 --> 00:27:31,439
in the form of allow and deny
permission prompts, right?

583
00:27:31,440 --> 00:27:34,360
As a developer, the
developer doesn't really

584
00:27:34,360 --> 00:27:36,850
have to do anything to
get all of these benefits.

585
00:27:36,850 --> 00:27:38,949
The framework that is inherent

586
00:27:38,950 --> 00:27:40,793
in operating system does it for you.

587
00:27:41,690 --> 00:27:43,360
So we've been able to abstract a lot

588
00:27:43,360 --> 00:27:46,503
of that complexity away from
the developer and the user.

589
00:27:47,480 --> 00:27:49,230
Now getting to this
point with mobile phone

590
00:27:49,230 --> 00:27:51,880
operating systems has
been a decade long journey

591
00:27:51,880 --> 00:27:54,420
whether you're talking
about the Android ecosystem

592
00:27:54,420 --> 00:27:58,960
or the Applebee's ecosystem,
or even the Chrome ecosystem

593
00:27:58,960 --> 00:28:01,870
we have not, it's not been
an easy journey for us

594
00:28:01,870 --> 00:28:03,929
but it's been a really beneficial one

595
00:28:03,930 --> 00:28:06,430
because we are really getting the benefits

596
00:28:06,430 --> 00:28:09,130
of having rethought the
way operating systems work

597
00:28:09,130 --> 00:28:10,620
and apps work.

598
00:28:10,620 --> 00:28:12,469
So just a quick example here

599
00:28:12,470 --> 00:28:15,653
on how we can really make
change over the longterm.

600
00:28:16,950 --> 00:28:19,790
And finally, my third example
I wanna talk a little bit

601
00:28:19,790 --> 00:28:21,423
about managing infrastructure.

602
00:28:22,590 --> 00:28:24,449
And again, I did a quick look

603
00:28:24,450 --> 00:28:26,430
through all the training materials

604
00:28:26,430 --> 00:28:29,140
and the certification programs for setting

605
00:28:29,140 --> 00:28:31,390
up and managing infrastructure

606
00:28:31,390 --> 00:28:33,500
and strikingly despite the fact

607
00:28:33,500 --> 00:28:35,610
that we've been doing
this for many decades

608
00:28:35,610 --> 00:28:38,860
it's still super common
for new administrators

609
00:28:38,860 --> 00:28:41,590
site reliability engineers,
network administrators

610
00:28:41,590 --> 00:28:44,980
and so on to be taught
that to manage a system

611
00:28:44,980 --> 00:28:47,690
you have to log into them
with really high levels

612
00:28:47,690 --> 00:28:51,700
of privilege, a root account,
an administrator account

613
00:28:51,700 --> 00:28:55,140
or having enable access on a router.

614
00:28:55,140 --> 00:28:58,880
And these broad privileges
make you feel really cool

615
00:28:58,880 --> 00:29:01,900
about yourself, but
they have immense power.

616
00:29:01,900 --> 00:29:05,450
I remember being rude at
Google and it felt really good

617
00:29:05,450 --> 00:29:06,450
but I look back on it now

618
00:29:06,450 --> 00:29:10,753
and I cringe with how much
power that those accounts had.

619
00:29:12,170 --> 00:29:13,240
You can upgrade software

620
00:29:13,240 --> 00:29:15,580
and change configurations do debugging.

621
00:29:15,580 --> 00:29:17,189
That's all great.

622
00:29:17,190 --> 00:29:19,800
You can also accidentally
delete the file system

623
00:29:19,800 --> 00:29:23,930
or corrupt data, or even
bring the system down.

624
00:29:23,930 --> 00:29:25,980
Any Unix administrator
who's been in their field

625
00:29:25,980 --> 00:29:29,170
long enough has accidentally
deleted the root file system.

626
00:29:29,170 --> 00:29:32,113
At least once I am guilty of that as well.

627
00:29:33,530 --> 00:29:36,790
And it's not just about you,
anything that you can do

628
00:29:36,790 --> 00:29:41,120
an attacker who's hijacked
your account can do as well.

629
00:29:41,120 --> 00:29:42,889
And so if you've been
fished if you have malware

630
00:29:42,890 --> 00:29:45,619
on your machine or you've come

631
00:29:45,619 --> 00:29:48,480
to any other catastrophic outcome

632
00:29:49,630 --> 00:29:51,310
this can be really dangerous

633
00:29:51,310 --> 00:29:54,373
for the whole ecosystem
that you're administering.

634
00:29:56,865 --> 00:29:59,940
And in a study that Google performed

635
00:29:59,940 --> 00:30:04,373
on its own SRE's we spoke
publicly about this in 2019.

636
00:30:06,020 --> 00:30:10,660
We estimate that there's a
0.01% chance that any SRE

637
00:30:10,660 --> 00:30:13,800
at Google could make a
mistake and with a team

638
00:30:13,800 --> 00:30:18,120
of about 1400 SMEs, that
means there's a 75% chance

639
00:30:18,120 --> 00:30:19,889
of a major outage every year.

640
00:30:19,890 --> 00:30:21,790
And that a major outage might

641
00:30:21,790 --> 00:30:23,960
take search down or Gmail down.

642
00:30:23,960 --> 00:30:25,060
And nobody wants that.

643
00:30:25,930 --> 00:30:27,840
Now, mind you, this isn't
a massive infrastructure

644
00:30:27,840 --> 00:30:30,970
the size of ours, but
you can extrapolate this

645
00:30:30,970 --> 00:30:33,820
into your own environment that
it will happen eventually.

646
00:30:35,690 --> 00:30:37,310
And again, I mentioned that, you know

647
00:30:37,310 --> 00:30:41,753
anything that you have
an attacker can get too.

648
00:30:43,050 --> 00:30:47,490
And so we realized at
Google quite a while ago

649
00:30:47,490 --> 00:30:50,510
that really what we
wanted was to stop people

650
00:30:50,510 --> 00:30:55,010
from having route administrator
broadly privileged access

651
00:30:55,010 --> 00:30:57,160
and that we wanted to
reshape the way we thought

652
00:30:57,160 --> 00:30:59,730
about this and the way that developers

653
00:30:59,730 --> 00:31:03,310
and SREs interact with
our key production systems

654
00:31:03,310 --> 00:31:04,950
and what I'm gonna describe here

655
00:31:04,950 --> 00:31:06,920
doesn't apply to every system at Google

656
00:31:06,920 --> 00:31:09,100
but we've been able to apply
it to the most important ones

657
00:31:09,100 --> 00:31:11,372
that are fundamental
to our infrastructure.

658
00:31:13,070 --> 00:31:16,909
And this is now the default
such that every change made

659
00:31:16,910 --> 00:31:21,910
in our production system is
validated either by automation

660
00:31:22,940 --> 00:31:27,940
or pre-validated by software,
or we have two party systems.

661
00:31:28,640 --> 00:31:32,350
And as a final result,
break glass mechanisms.

662
00:31:32,350 --> 00:31:34,350
And I'll talk about what that means

663
00:31:34,350 --> 00:31:35,709
but it effectively means that humans

664
00:31:35,710 --> 00:31:38,890
are no longer directly
logging into the systems.

665
00:31:38,890 --> 00:31:41,220
If they do it's a rare event.

666
00:31:41,220 --> 00:31:43,980
And this is a concept
we call Zero Touch Prod

667
00:31:43,980 --> 00:31:45,880
and it has massive implications

668
00:31:45,880 --> 00:31:47,453
for security and reliability.

669
00:31:49,090 --> 00:31:50,879
Here's one approach for
how we've solved this.

670
00:31:50,880 --> 00:31:54,130
And this example comes
from a book we wrote

671
00:31:54,130 --> 00:31:56,020
which I'll reference at the end

672
00:31:56,020 --> 00:31:58,100
if you're interested in reading.

673
00:31:58,100 --> 00:32:00,340
Instead of the SREs and
developers logging directly

674
00:32:00,340 --> 00:32:03,540
into systems we've built a
set of command line tools

675
00:32:03,540 --> 00:32:06,680
that send RPC calls to a proxy.

676
00:32:06,680 --> 00:32:09,250
And this proxy only
permits certain actions

677
00:32:09,250 --> 00:32:10,840
against the system to be made.

678
00:32:10,840 --> 00:32:13,990
This is common actions like
starting and stopping a service,

679
00:32:13,990 --> 00:32:16,250
deploying a new version of the service.

680
00:32:16,250 --> 00:32:19,150
In the example you see here,
the tool will allow you

681
00:32:19,150 --> 00:32:23,130
to kill a borg which is our nickname

682
00:32:23,130 --> 00:32:25,780
for our cluster management infrastructure,

683
00:32:25,780 --> 00:32:28,100
the equivalent of logging
into a unit system

684
00:32:28,100 --> 00:32:30,233
and killing an Apache process effectively.

685
00:32:31,640 --> 00:32:34,280
The proxy serves several purposes.

686
00:32:34,280 --> 00:32:39,260
Its job is to authenticate
every request made,

687
00:32:39,260 --> 00:32:42,510
and we do this with a highly
secure two-factor solution

688
00:32:42,510 --> 00:32:43,913
called security keys.

689
00:32:44,770 --> 00:32:46,790
And this means you can
no longer log in directly

690
00:32:46,790 --> 00:32:50,440
as route and do a hundred
actions with one authentication.

691
00:32:50,440 --> 00:32:53,250
You have to successfully
validly authenticate

692
00:32:53,250 --> 00:32:56,290
for every sensitive action
that you want to take.

693
00:32:56,290 --> 00:33:00,620
We also leverage the proxy to
enforce two party approvals.

694
00:33:00,620 --> 00:33:01,899
That means if you want to do something

695
00:33:01,900 --> 00:33:05,640
extraordinarily sensitive we
can require a peer to review

696
00:33:05,640 --> 00:33:08,683
what you're going to do to see
if you're making a mistake.

697
00:33:09,630 --> 00:33:12,700
The proxy also lets us
document any bug numbers

698
00:33:12,700 --> 00:33:16,890
change management, IDs,
anything else associated

699
00:33:16,890 --> 00:33:18,620
with the action, meaning that we have

700
00:33:18,620 --> 00:33:21,050
a really good documentation
and attribution

701
00:33:21,050 --> 00:33:23,600
on every change made in
our production environment.

702
00:33:24,440 --> 00:33:27,520
The proxy can also do validation checks

703
00:33:27,520 --> 00:33:28,820
to see if you've made any errors.

704
00:33:28,820 --> 00:33:32,010
Maybe you've put an invalid path in

705
00:33:32,010 --> 00:33:34,250
or you've got over-broad scoping

706
00:33:34,250 --> 00:33:35,990
and you're gonna touch too many machines

707
00:33:35,990 --> 00:33:38,740
that you didn't mean to
common issues such as this

708
00:33:38,740 --> 00:33:41,510
that we've often seen lead to mistakes.

709
00:33:41,510 --> 00:33:43,510
And we can program these over time

710
00:33:43,510 --> 00:33:46,160
as we learn about new kinds
of mistakes that we make.

711
00:33:47,030 --> 00:33:50,340
And you do still have a full log in option

712
00:33:50,340 --> 00:33:53,909
if you are in the right kind
of role, but it's really meant

713
00:33:53,910 --> 00:33:57,570
as a last resort in rare circumstances.

714
00:33:57,570 --> 00:33:58,770
And they're small enough

715
00:33:58,770 --> 00:34:01,400
and number that every time it happens

716
00:34:01,400 --> 00:34:03,393
we can carefully audit that manually.

717
00:34:04,400 --> 00:34:08,360
And the benefits I would
think are fairly evident.

718
00:34:08,360 --> 00:34:10,429
Mistakes are captured
before they're executed

719
00:34:10,429 --> 00:34:11,520
and we have great records

720
00:34:11,520 --> 00:34:14,460
on how it happened and who approved it.

721
00:34:14,460 --> 00:34:16,719
And on the security front

722
00:34:16,719 --> 00:34:19,429
if you're an attacker
operating in this environment

723
00:34:19,429 --> 00:34:22,429
it's actually really tough to do anything

724
00:34:22,429 --> 00:34:23,960
with these accounts.

725
00:34:23,960 --> 00:34:28,370
If you can imagine you've
gotten onto an SRE's workstation

726
00:34:28,370 --> 00:34:33,370
your only interface into
production really is this proxy.

727
00:34:34,179 --> 00:34:39,179
And it's not perfect because we know

728
00:34:39,219 --> 00:34:41,529
from our red teams that it can be bypassed

729
00:34:41,530 --> 00:34:45,080
but we usually see that it
usually takes the attacker longer

730
00:34:45,080 --> 00:34:46,670
to figure out how to work around.

731
00:34:46,670 --> 00:34:49,380
You can slow them down
before they get to anything.

732
00:34:49,380 --> 00:34:52,159
And in some cases they're
fully prevented things

733
00:34:52,159 --> 00:34:54,830
like security, keys to party authorization

734
00:34:56,000 --> 00:34:59,363
really create strong
barriers for security.

735
00:35:01,070 --> 00:35:02,590
Finally, coming all the way back

736
00:35:02,590 --> 00:35:04,880
to our topic of supply chain.

737
00:35:04,880 --> 00:35:07,170
Imagine if we had these
three examples deployed

738
00:35:07,170 --> 00:35:09,930
at a company that developed software

739
00:35:09,930 --> 00:35:11,569
if we were using zero trust networks

740
00:35:11,570 --> 00:35:14,080
for us or using the
developers who are working

741
00:35:14,080 --> 00:35:15,450
we would trust their devices.

742
00:35:15,450 --> 00:35:17,200
We would know who they are at any time

743
00:35:17,200 --> 00:35:19,102
and that they are safe to use.

744
00:35:20,210 --> 00:35:21,880
Imagine your build repository

745
00:35:21,880 --> 00:35:25,040
your build process,
your delivery pipelines.

746
00:35:25,040 --> 00:35:27,390
They could all be
architected as microservices

747
00:35:27,390 --> 00:35:31,970
in and of themselves with
strong boundary protections.

748
00:35:31,970 --> 00:35:33,950
And all of this could be managed by SRE's

749
00:35:33,950 --> 00:35:37,710
who practice Zero Touch Prod
techniques, and an attacker

750
00:35:37,710 --> 00:35:40,340
in this environment would
have to work significantly

751
00:35:40,340 --> 00:35:42,380
different than those that attacked

752
00:35:42,380 --> 00:35:44,980
SolarWinds Microsoft and others recently.

753
00:35:44,980 --> 00:35:47,880
And in fact, many of
the techniques they used

754
00:35:47,880 --> 00:35:52,090
for lateral movement
and privilege escalation

755
00:35:52,090 --> 00:35:54,000
just simply wouldn't work here.

756
00:35:54,000 --> 00:35:56,490
And this would be
architecture we use at Google.

757
00:35:56,490 --> 00:35:58,810
And we have witnessed the difficulties

758
00:35:58,810 --> 00:36:01,640
that our red teams face
on a regular basis.

759
00:36:01,640 --> 00:36:03,819
And it really does give
the blue team quite ahead

760
00:36:03,820 --> 00:36:05,660
a leg up on things.

761
00:36:05,660 --> 00:36:08,720
So in summary, by reshaping the ecosystem

762
00:36:08,720 --> 00:36:11,080
and working very differently, we can begin

763
00:36:11,080 --> 00:36:13,069
to move the conversation forward on

764
00:36:13,070 --> 00:36:16,470
how we solve some of
these systematic issues

765
00:36:16,470 --> 00:36:19,169
that we've been observing for so long.

766
00:36:19,170 --> 00:36:20,960
So how might you get started?

767
00:36:20,960 --> 00:36:22,130
This is always the big question

768
00:36:22,130 --> 00:36:23,790
because it sounds really hard.

769
00:36:23,790 --> 00:36:25,600
I would recommend starting small, you know

770
00:36:25,600 --> 00:36:28,710
maybe next week you do a quick study.

771
00:36:28,710 --> 00:36:31,160
How many outages have you
had in your environment

772
00:36:33,637 --> 00:36:35,790
sort of how many attackers have
gotten into your environment

773
00:36:35,790 --> 00:36:39,460
and maybe try to identify
where Zero Prod Touch

774
00:36:39,460 --> 00:36:42,310
or Zero Touch Prod would have
worked if you'd had a proxy

775
00:36:43,170 --> 00:36:47,650
in your environment mitigating
or rather remediating

776
00:36:47,650 --> 00:36:50,210
some of your actions
would that have actually

777
00:36:50,210 --> 00:36:52,340
prevented on the situation?

778
00:36:52,340 --> 00:36:54,650
I think a lot of leadership
teams really value data.

779
00:36:54,650 --> 00:36:58,410
And so having data is an
important thing to gather.

780
00:36:58,410 --> 00:37:00,040
Secondly, maybe you'll have a workshop

781
00:37:00,040 --> 00:37:03,070
with your colleagues to discuss maybe one

782
00:37:03,070 --> 00:37:05,210
of your monolithic services

783
00:37:05,210 --> 00:37:08,610
that isn't really working
very well and maybe play

784
00:37:08,610 --> 00:37:10,140
around with the idea of a redesign.

785
00:37:10,140 --> 00:37:12,009
What would that look like?

786
00:37:12,010 --> 00:37:14,460
Don't get too bogged down
in and is it feasible?

787
00:37:14,460 --> 00:37:16,250
I think it's important
to have the conversation,

788
00:37:16,250 --> 00:37:19,630
even if your outcomes are failures,

789
00:37:19,630 --> 00:37:22,840
if you fail enough times
you'll succeed one day.

790
00:37:22,840 --> 00:37:24,930
And maybe try thinking a little bit

791
00:37:24,930 --> 00:37:27,040
about training for the longterm.

792
00:37:27,040 --> 00:37:28,620
You don't have to necessarily go out

793
00:37:28,620 --> 00:37:30,000
and change everything right away

794
00:37:30,000 --> 00:37:32,460
but you can start helping
the teams you work

795
00:37:32,460 --> 00:37:35,170
with rethink some of these ideas

796
00:37:35,170 --> 00:37:37,410
about how you can reshape your ecosystem.

797
00:37:37,410 --> 00:37:39,770
And maybe you're stuck with
the systems you have today,

798
00:37:39,770 --> 00:37:42,860
but maybe the next one, your
teams build will look different

799
00:37:42,860 --> 00:37:44,310
than the ones you have today.

800
00:37:45,330 --> 00:37:48,580
Re-architecting is always
hard, but when you can get

801
00:37:48,580 --> 00:37:51,660
into the ground zero
and and start reshaping

802
00:37:51,660 --> 00:37:54,440
from the beginning, that's really great.

803
00:37:54,440 --> 00:37:58,440
And then I'll give you a
bonus, maybe host a book club.

804
00:37:58,440 --> 00:38:00,320
I can recommend a great book.

805
00:38:00,320 --> 00:38:04,500
This is a book that myself
and about a hundred Googlers

806
00:38:04,500 --> 00:38:07,680
put together that describes
all of our experiences

807
00:38:07,680 --> 00:38:10,930
and recommendations for
thinking about building secure

808
00:38:10,930 --> 00:38:14,843
and reliable systems and
how you can move forward.

809
00:38:16,250 --> 00:38:17,920
We use this internally

810
00:38:17,920 --> 00:38:20,500
and read a chapter about every two weeks.

811
00:38:20,500 --> 00:38:21,450
It's great to get together

812
00:38:21,450 --> 00:38:24,220
and just talk through some
of the concepts in there.

813
00:38:24,220 --> 00:38:28,279
And I know a lot of teams have
been very successful at that.

814
00:38:28,280 --> 00:38:31,140
And then if you have any questions or any

815
00:38:31,140 --> 00:38:35,060
of these three examples I
gave you or interesting at all

816
00:38:35,060 --> 00:38:38,140
here's some additional
resources you can take a photo

817
00:38:38,140 --> 00:38:39,319
of this or a screenshot

818
00:38:40,380 --> 00:38:45,160
and these might provide
a little bit more insight

819
00:38:45,160 --> 00:38:46,560
into how to do some of these things.

820
00:38:46,560 --> 00:38:49,360
I think microservices,
especially as a concept

821
00:38:49,360 --> 00:38:52,120
there's some great resources
going back several decades

822
00:38:52,120 --> 00:38:53,529
but also some really great books

823
00:38:53,530 --> 00:38:57,000
that have been written
recently that came out in 2020

824
00:38:57,000 --> 00:39:01,580
during the pandemic particularly
on container security

825
00:39:01,580 --> 00:39:03,330
the fundamentals of software architecture.

826
00:39:03,330 --> 00:39:06,252
And I find these to be really,
really great resources.

827
00:39:07,290 --> 00:39:10,520
So with that, I wanna
thank the RSA teams so much

828
00:39:10,520 --> 00:39:14,450
and to thank all of you for
joining me here for chat.

829
00:39:14,450 --> 00:39:16,950
And I wish you all of the best.

830
00:39:16,950 --> 00:39:17,783
Thank you.

