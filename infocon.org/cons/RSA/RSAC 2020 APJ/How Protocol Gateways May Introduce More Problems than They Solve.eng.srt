1
00:00:08,604 --> 00:00:11,187
(upbeat music)

2
00:00:30,190 --> 00:00:34,460
- Hello and welcome to How
Protocol Gateways May Introduce

3
00:00:34,460 --> 00:00:37,130
More Problems Than They Solve.

4
00:00:37,130 --> 00:00:39,710
If you're joining us
live, our speaker is in

5
00:00:39,710 --> 00:00:44,070
Slido chat discussion answering
your question right now.

6
00:00:44,070 --> 00:00:45,680
For audio/video issue

7
00:00:45,680 --> 00:00:48,450
you can click the technical
support button below.

8
00:00:48,450 --> 00:00:50,200
I'd like to now turn it over to

9
00:00:50,200 --> 00:00:52,093
Philippe Lin for the presentation.

10
00:00:58,037 --> 00:00:59,610
- Thank you Cassie.

11
00:00:59,610 --> 00:01:00,470
Oh, hi.

12
00:01:00,470 --> 00:01:01,839
Welcome to attend the session of

13
00:01:01,840 --> 00:01:04,379
How Protocol Gateways May
Introduce More Problems

14
00:01:04,379 --> 00:01:05,369
Than They Solve.

15
00:01:05,370 --> 00:01:06,960
My name is Philippe lin.

16
00:01:06,960 --> 00:01:08,679
I'm a senior Threat Researcher from

17
00:01:08,680 --> 00:01:11,990
Trend Micro Forward Looking Research Team.

18
00:01:11,990 --> 00:01:15,089
And this research is brought
to you by myself and my

19
00:01:15,090 --> 00:01:19,044
colleagues, Charles Perine,
Marco Balduzzi, Ryan Flores,

20
00:01:19,044 --> 00:01:22,420
Rainer Vosseler and Luca Bonglorni.

21
00:01:22,420 --> 00:01:24,040
We're also on Slido.

22
00:01:24,040 --> 00:01:25,697
So if you have any questions,

23
00:01:25,697 --> 00:01:27,543
please shoot to shoot.

24
00:01:29,280 --> 00:01:30,113
Okay.

25
00:01:30,113 --> 00:01:34,093
So do you have a protocol
gateways in your network?

26
00:01:36,180 --> 00:01:39,330
You might ask, "what is
the protocol gateway?"

27
00:01:39,330 --> 00:01:42,679
Or, "yeah, I have several
protocol gateways in my network,

28
00:01:42,680 --> 00:01:44,057
but where are they?"

29
00:01:45,600 --> 00:01:48,660
So protocol gateway is
usually a tiny little box

30
00:01:48,660 --> 00:01:50,280
that's often overlooked

31
00:01:51,250 --> 00:01:54,130
and it's just like a translator

32
00:01:54,130 --> 00:01:56,350
that translates between two languages.

33
00:01:56,350 --> 00:01:58,720
For example, from English to Japanese

34
00:01:58,720 --> 00:02:01,350
and from Japanese to English.

35
00:02:01,350 --> 00:02:04,149
And in some cases it
even translate to between

36
00:02:04,150 --> 00:02:05,530
the same language.

37
00:02:05,530 --> 00:02:08,150
For example, from English
to American sign language

38
00:02:08,150 --> 00:02:09,193
and vice versa.

39
00:02:11,920 --> 00:02:15,290
So the Protocol Gateway translates between

40
00:02:15,290 --> 00:02:19,329
different physical layers of
the same protocol of family.

41
00:02:19,330 --> 00:02:21,923
For example, from Modbus
TCP to Modbus RTU.

42
00:02:23,280 --> 00:02:28,280
Modbus TCP and Modbus RTU are
just exactly the same protocol

43
00:02:28,340 --> 00:02:31,530
but they are transmitted
over different media.

44
00:02:31,530 --> 00:02:35,150
Like Modbus TCP is
transmitted over the ethernet.

45
00:02:35,150 --> 00:02:38,410
And Modbus RTU is
transmitted over the serial

46
00:02:38,410 --> 00:02:41,863
lines, such as RS242, RS485.

47
00:02:43,220 --> 00:02:46,020
A protocol gateway also translate between

48
00:02:46,020 --> 00:02:49,130
different protocols on
the same physical layer.

49
00:02:49,130 --> 00:02:52,743
For example, Modbus TCP to even an IP.

50
00:02:53,760 --> 00:02:57,299
These two protocols are super
different from each other.

51
00:02:57,300 --> 00:03:00,710
But all of them are transmitted
over the ethernet cable

52
00:03:01,770 --> 00:03:05,030
Or a Protocol gateway can
be a combination of both.

53
00:03:05,030 --> 00:03:07,743
Like from Modbus RTU to ethernet IP.

54
00:03:10,030 --> 00:03:11,770
So in this research,

55
00:03:11,770 --> 00:03:15,370
we want to focus on the first
type of protocol gateway.

56
00:03:15,370 --> 00:03:19,230
It's because Modbus is
really, really widely used

57
00:03:19,230 --> 00:03:23,640
since it's for standardization in 1979.

58
00:03:23,640 --> 00:03:25,760
And throughout this research,

59
00:03:25,760 --> 00:03:29,200
we have figured out a
lot of serious problems

60
00:03:29,200 --> 00:03:34,130
that we find it's necessary
to raise the awareness

61
00:03:34,130 --> 00:03:37,213
so that everyone can
take immediate actions.

62
00:03:39,180 --> 00:03:42,083
And where's the protocol gateway?

63
00:03:42,083 --> 00:03:44,790
A protocol gateway might
be in your ICS network

64
00:03:44,790 --> 00:03:46,459
for quite a long time.

65
00:03:46,460 --> 00:03:48,043
You might just not notice it.

66
00:03:49,300 --> 00:03:54,300
It's on one hand connected
to your core switch in your

67
00:03:54,410 --> 00:03:55,920
control network.

68
00:03:55,920 --> 00:03:59,239
The control network is
where we have like HMI,

69
00:03:59,240 --> 00:04:03,800
engineer workstation and historians.

70
00:04:03,800 --> 00:04:06,420
On the other hand, it's
connects to the PLC,

71
00:04:06,420 --> 00:04:10,450
the Programmable Logic
Controller in your field network.

72
00:04:10,450 --> 00:04:13,239
And a PLC might connect to a,

73
00:04:13,240 --> 00:04:17,620
subordinate devices like a
relay, motor, thermometer,

74
00:04:17,620 --> 00:04:22,620
tachometer, actuator and so
on by another serial line,

75
00:04:22,650 --> 00:04:27,650
another Modbus line or by a
direct digital and analog I/O.

76
00:04:29,930 --> 00:04:34,930
So the protocol gateway is just
in the middle of this chart.

77
00:04:36,120 --> 00:04:39,870
It's becoming more and more complex.

78
00:04:39,870 --> 00:04:42,470
Thanks to industrial 4.O.

79
00:04:42,470 --> 00:04:47,437
Right now it's asked to support
the protocols like Modbus,

80
00:04:47,437 --> 00:04:52,437
ethernet IP DMP3 profit net as
well as some cloud protocols

81
00:04:53,350 --> 00:04:58,350
such as MQTT, AWS Greengrass
and Microsoft Azure.

82
00:04:59,020 --> 00:05:02,049
As you can probably imagine that

83
00:05:02,050 --> 00:05:05,050
this kind of complicity has
brought a lot of challenge

84
00:05:05,050 --> 00:05:06,493
to this protocol gateway.

85
00:05:08,010 --> 00:05:12,289
And I hope you have noticed
that there is an ICS firewall

86
00:05:12,290 --> 00:05:15,543
between the control network
and the Protocol gateway.

87
00:05:18,670 --> 00:05:20,810
This is not always the case.

88
00:05:20,810 --> 00:05:24,600
I have to say, because an ICS
firewall is still not very

89
00:05:24,600 --> 00:05:27,063
frequent in this industry.

90
00:05:29,500 --> 00:05:31,030
And throughout this research,

91
00:05:31,030 --> 00:05:34,369
we have identified the
two types of gateways.

92
00:05:34,370 --> 00:05:36,720
And the first on the left
hand side is what we call

93
00:05:36,720 --> 00:05:37,943
a Real-time gateway.

94
00:05:38,840 --> 00:05:43,840
A real-time gateway passes
incoming packet immediately.

95
00:05:43,870 --> 00:05:48,070
If a packet is found invalid,
it is dropped right away.

96
00:05:48,070 --> 00:05:51,530
Or the protocol gateway
might try to fix the packet.

97
00:05:51,530 --> 00:05:53,626
By fix the packet, you might think,

98
00:05:53,627 --> 00:05:56,290
"okay, yeah, there can
be something wrong there

99
00:05:56,290 --> 00:05:58,600
in the fixing process."

100
00:05:58,600 --> 00:06:03,120
And if the packet is correct, no problem.

101
00:06:03,120 --> 00:06:05,623
It's translated and forwarded immediately.

102
00:06:06,720 --> 00:06:10,050
So a real-time gateway does
everything at a real time.

103
00:06:10,050 --> 00:06:12,200
That's how it's called
a real-time gateway.

104
00:06:15,400 --> 00:06:18,210
It's like one packet after another.

105
00:06:18,210 --> 00:06:20,359
So its a streamline.

106
00:06:20,359 --> 00:06:24,859
However, a data station is a
little bit more complicated.

107
00:06:24,860 --> 00:06:28,180
It's usually has one or more processes

108
00:06:28,180 --> 00:06:31,580
running simultaneously in the processor.

109
00:06:31,580 --> 00:06:35,169
And it's translate
asynchronously the messages

110
00:06:35,170 --> 00:06:39,113
by conducting a one or
more I/O mapping tables.

111
00:06:40,216 --> 00:06:43,990
And the I/O mapping table
is a little bit complicated

112
00:06:43,990 --> 00:06:48,990
because the system integrator
or a principal engineer

113
00:06:49,280 --> 00:06:51,482
has to set up the mapping tables,

114
00:06:52,380 --> 00:06:55,340
according to ladder logic of a PLC

115
00:06:55,340 --> 00:07:00,152
or has to match the actual
wiring inside the plant.

116
00:07:04,670 --> 00:07:05,503
Okay.

117
00:07:05,503 --> 00:07:08,909
So we were looking for
the vulnerabilities in

118
00:07:08,910 --> 00:07:11,200
the following three aspects.

119
00:07:11,200 --> 00:07:14,150
The first is, we want to
know whether there's any

120
00:07:14,150 --> 00:07:18,200
vulnerability in the
protocol gateway itself.

121
00:07:18,200 --> 00:07:21,270
Just like a latency
vulnerability research,

122
00:07:21,270 --> 00:07:23,390
we want to learn the firmware

123
00:07:23,390 --> 00:07:25,360
and see whether there is some

124
00:07:25,360 --> 00:07:28,793
vulnerability introduced by
using the management software.

125
00:07:29,950 --> 00:07:34,530
And since the protocol
gateway is an embedded device,

126
00:07:34,530 --> 00:07:38,270
the CPU and the memory
are usually very limited.

127
00:07:38,270 --> 00:07:42,270
So we want to also learn
that on the heavy traffic,

128
00:07:42,270 --> 00:07:45,299
maybe there will be
some resource exhaustion

129
00:07:45,300 --> 00:07:47,443
and causing a denial of service.

130
00:07:48,480 --> 00:07:52,123
And the second aspect is the
protocol translation error.

131
00:07:53,210 --> 00:07:57,789
So we want to learn that
and parsing the protocols,

132
00:07:57,790 --> 00:08:00,310
maybe there's some special condition.

133
00:08:00,310 --> 00:08:04,660
Maybe we can craft some
special packet that cause a

134
00:08:04,660 --> 00:08:06,863
translation process to hang up.

135
00:08:08,060 --> 00:08:10,723
And also causing a denial of service.

136
00:08:11,560 --> 00:08:14,640
More over there can be
some translation errors

137
00:08:14,640 --> 00:08:19,330
that for example, some packet
is not translated at all.

138
00:08:19,330 --> 00:08:22,940
Or some packet are translated
in a way that the hackers

139
00:08:22,940 --> 00:08:26,493
might take advantage of it
and hack the PLC behind it.

140
00:08:27,370 --> 00:08:29,600
And since of protocol gateways

141
00:08:29,600 --> 00:08:31,750
are supporting cloud services,

142
00:08:31,750 --> 00:08:34,980
we also want to take a quick
look in the communication

143
00:08:34,980 --> 00:08:37,843
and see whether it is
encrypted or secured.

144
00:08:40,530 --> 00:08:43,569
And the second aspect of our research,

145
00:08:43,570 --> 00:08:45,870
with the protocol translation error,

146
00:08:45,870 --> 00:08:48,700
actually is the key to our work.

147
00:08:48,700 --> 00:08:51,680
This is what makes our
research different from the

148
00:08:51,680 --> 00:08:54,900
traditional vulnerability research.

149
00:08:54,900 --> 00:08:59,319
And for a hacker who has
some interest in hacking

150
00:08:59,320 --> 00:09:01,203
an industrial control system.

151
00:09:02,060 --> 00:09:04,573
This is actually a very new attack vector.

152
00:09:05,610 --> 00:09:09,983
With the error that we
have found in translation,

153
00:09:11,110 --> 00:09:14,090
a hacker can conduct stealthy attacks.

154
00:09:14,090 --> 00:09:16,870
And since the packets are all valid,

155
00:09:16,870 --> 00:09:20,160
they may be able to even
bypass the ICS firewall if they

156
00:09:20,160 --> 00:09:21,293
have installed one.

157
00:09:24,500 --> 00:09:28,270
So in order to do a thorough test,

158
00:09:28,270 --> 00:09:32,670
we have adopted and highly
modified an open source

159
00:09:32,670 --> 00:09:34,579
fuzzing framework called boofuzz

160
00:09:37,390 --> 00:09:41,560
So boofuzz are helps us to
generate all kinds of invalid

161
00:09:41,560 --> 00:09:45,930
packets and monitors the unit under test.

162
00:09:45,930 --> 00:09:50,900
So when the unit under test is crashed,

163
00:09:50,900 --> 00:09:53,319
the packet is sent over.

164
00:09:53,320 --> 00:09:55,800
The lines are logged, analyzed

165
00:09:55,800 --> 00:09:59,010
and the unit under test is rebooted.

166
00:09:59,010 --> 00:10:01,833
So that we can continue with
the tests automatically.

167
00:10:03,310 --> 00:10:06,423
And this is the actual setup.

168
00:10:07,550 --> 00:10:09,683
That what we have been using.

169
00:10:09,683 --> 00:10:10,944
So as you can see here,

170
00:10:10,944 --> 00:10:15,781
we got it raspberry Pi that
you'll need on the test and

171
00:10:15,782 --> 00:10:20,115
model of a serial line and
the model ethernet cable.

172
00:10:22,943 --> 00:10:26,650
So as you'll see on the
table that we have identified

173
00:10:26,650 --> 00:10:29,713
three real-time gateways
and the two data stations.

174
00:10:31,010 --> 00:10:35,350
Unfortunately all of the
got legacy vulnerabilities,

175
00:10:35,350 --> 00:10:37,320
like resource exhaustion, you have

176
00:10:37,320 --> 00:10:41,410
service privilege escalation,
information disclosure

177
00:10:41,410 --> 00:10:42,992
and you even got a root shell.

178
00:10:44,660 --> 00:10:49,660
And three of them got problem
in translating the protocols.

179
00:10:50,060 --> 00:10:51,872
Which we will talk about later.

180
00:10:53,260 --> 00:10:57,473
And three of them supports MQTT protocol.

181
00:10:58,530 --> 00:11:01,183
However, one of them are
really, really problematic.

182
00:11:02,400 --> 00:11:06,033
In that there's a huge problem
in user authentication.

183
00:11:09,360 --> 00:11:13,070
And here is a list of the
devices that we have studied.

184
00:11:13,070 --> 00:11:15,070
We really want to make a balance between

185
00:11:15,070 --> 00:11:16,740
the country of the vendors,

186
00:11:16,740 --> 00:11:20,880
and we want to contain all the
price ranges, different types

187
00:11:20,880 --> 00:11:23,393
and the different underlying
operating systems.

188
00:11:24,960 --> 00:11:26,550
As you can see,

189
00:11:26,550 --> 00:11:29,910
we have purchased the protocol gateways

190
00:11:29,910 --> 00:11:33,560
as cheap as only $200.

191
00:11:33,560 --> 00:11:38,497
And even the most expensive
one, the RedLion is only 650.

192
00:11:39,870 --> 00:11:44,780
And RedLion is really a fully
functional protocol gateway.

193
00:11:44,780 --> 00:11:47,750
It supports up to 300 protocols

194
00:11:47,750 --> 00:11:50,520
So we can imagine that the function is

195
00:11:50,520 --> 00:11:52,023
really, really complicated.

196
00:11:53,440 --> 00:11:56,410
And we want to cover
like real-time gateway

197
00:11:56,410 --> 00:11:57,969
and the data stations.

198
00:11:57,970 --> 00:12:00,370
We want to have different
operating systems,

199
00:12:00,370 --> 00:12:02,360
because a common operating system might

200
00:12:02,360 --> 00:12:04,350
introduce some common problems.

201
00:12:04,350 --> 00:12:07,353
We want to list to be
representative to the market.

202
00:12:08,880 --> 00:12:11,593
Okay, now let's talk about
the three vulnerabilities.

203
00:12:13,370 --> 00:12:18,370
So first is the resource
exhaustion or denial of service.

204
00:12:19,210 --> 00:12:23,150
Of the protocol gateways
that we have studied

205
00:12:23,150 --> 00:12:26,510
have suffered from resource exhaustion.

206
00:12:26,510 --> 00:12:30,600
Like real-time gateway one and two,

207
00:12:30,600 --> 00:12:35,600
we're able to just send like
the first of 400 packets,

208
00:12:35,930 --> 00:12:38,870
make one protocol gateway stop.

209
00:12:38,870 --> 00:12:43,313
And then every 1,200
packets they crash again.

210
00:12:45,000 --> 00:12:47,020
And the third realtime gateway,

211
00:12:47,020 --> 00:12:49,810
even reboots under heavy stress.

212
00:12:49,810 --> 00:12:54,810
So, they're not really designed
to, for a heavy traffic.

213
00:12:55,460 --> 00:12:58,950
The data stations
usually have a better CPU

214
00:12:58,950 --> 00:13:01,180
and a bigger memory.

215
00:13:01,180 --> 00:13:06,099
So there's no resource
exhaustion on the data stations.

216
00:13:06,100 --> 00:13:08,560
However, since they're more complicated,

217
00:13:08,560 --> 00:13:12,449
we are able to craft some special packet,

218
00:13:12,450 --> 00:13:14,973
that crash data station one.

219
00:13:18,100 --> 00:13:21,307
The special crafted packets is like,

220
00:13:21,307 --> 00:13:24,840
"I want to read the coil
or read the register

221
00:13:24,840 --> 00:13:28,187
of a register zero at address zero."

222
00:13:29,790 --> 00:13:31,343
And this might not make sense to you

223
00:13:31,343 --> 00:13:32,307
because you would think,

224
00:13:32,307 --> 00:13:37,307
"okay, why should I read
zero register or zero coil

225
00:13:37,330 --> 00:13:38,497
at address zero?"

226
00:13:38,497 --> 00:13:41,180
"Then I'm reading nothing right?"

227
00:13:41,180 --> 00:13:45,510
But just with this tiny,
tiny, special crafted package,

228
00:13:45,510 --> 00:13:47,840
we're able to crash into station one

229
00:13:47,840 --> 00:13:49,240
and it's cause it to reboot.

230
00:13:51,160 --> 00:13:56,060
And station two is a little bit special.

231
00:13:56,060 --> 00:13:58,829
It's has provided a
special Modbus commands

232
00:13:58,830 --> 00:14:03,310
that a hacker has only
to send a special value

233
00:14:03,310 --> 00:14:06,069
to a special address to make it reboot.

234
00:14:06,070 --> 00:14:08,630
And since this function
is written in the manual,

235
00:14:08,630 --> 00:14:11,490
we're not saying this is a vulnerability.

236
00:14:11,490 --> 00:14:15,090
And however, if you are owner
of this, protocol gateway,

237
00:14:15,090 --> 00:14:17,720
you might want to know it
and you might want to block

238
00:14:17,720 --> 00:14:20,493
this kind of packet in the ICS firewall.

239
00:14:25,100 --> 00:14:28,050
Let's talk about the
legacy vulnerabilities.

240
00:14:28,050 --> 00:14:30,319
Since the protocol
gateways are often running

241
00:14:30,320 --> 00:14:31,790
on embedded Linux,

242
00:14:31,790 --> 00:14:34,240
We want to try some really good alteryx

243
00:14:35,190 --> 00:14:38,363
like unfiltered parameters
unescaped arguments and so on.

244
00:14:40,570 --> 00:14:42,697
And we have really found something.

245
00:14:45,780 --> 00:14:49,630
For example, data station
two, you're able to log in,

246
00:14:49,630 --> 00:14:53,040
as a normal user with very low privilege.

247
00:14:53,040 --> 00:14:54,890
And it will just go to the ping test.

248
00:14:55,770 --> 00:14:58,470
A ping test is, what's usually used

249
00:14:58,470 --> 00:15:01,320
to test the network connectivity.

250
00:15:01,320 --> 00:15:03,810
So everyone is able to use that.

251
00:15:03,810 --> 00:15:07,569
But just go to the dialog
box and type the command,

252
00:15:07,570 --> 00:15:08,970
press enter.

253
00:15:08,970 --> 00:15:12,980
It immediately opens up a Telenet session

254
00:15:12,980 --> 00:15:15,240
on port nine, four, two, three,

255
00:15:15,240 --> 00:15:17,603
or whichever port that you have assigned.

256
00:15:18,760 --> 00:15:22,189
All you have to do is
to turn that to port.

257
00:15:22,190 --> 00:15:25,450
It doesn't ask for username, no password,

258
00:15:25,450 --> 00:15:26,853
your are roots immediately.

259
00:15:28,200 --> 00:15:29,823
So what can you do as a root?

260
00:15:31,380 --> 00:15:34,378
With root you can add new users.

261
00:15:34,378 --> 00:15:39,378
You add new users with have
SSH session with the new shell.

262
00:15:39,530 --> 00:15:43,699
So that you can make
yourself persistent in this

263
00:15:43,700 --> 00:15:45,160
protocol gateway.

264
00:15:45,160 --> 00:15:46,699
We can hide there.

265
00:15:46,700 --> 00:15:49,360
You can add users in the
protocol gateway itself

266
00:15:49,360 --> 00:15:52,310
so that would make
yourself an administrator.

267
00:15:52,310 --> 00:15:55,569
You can do a lateral
movement within the planet.

268
00:15:55,570 --> 00:16:00,392
And you can, for example, connect back to

269
00:16:00,392 --> 00:16:02,540
your command and control server

270
00:16:02,540 --> 00:16:05,573
and the wait to attack the whole plant.

271
00:16:06,910 --> 00:16:11,910
And we have also found
some like credential reuse.

272
00:16:12,330 --> 00:16:15,630
And some way to beat the
I/O mapping function.

273
00:16:15,630 --> 00:16:18,870
Is for example, if you
are a field engineer,

274
00:16:18,870 --> 00:16:21,770
you use the management
software that's can be freely

275
00:16:21,770 --> 00:16:24,002
downloaded from the vendor's websites.

276
00:16:25,620 --> 00:16:27,040
You're plug in your laptop.

277
00:16:27,040 --> 00:16:30,459
You want to inspect in
the field what's going on

278
00:16:30,459 --> 00:16:32,439
in the protocol gateway.

279
00:16:32,440 --> 00:16:35,410
And the whole database got stumped

280
00:16:36,760 --> 00:16:38,750
and is transmitted over gate.

281
00:16:38,750 --> 00:16:41,340
But even if the database
has been encrypted,

282
00:16:41,340 --> 00:16:43,160
we have found a way to decrypt it

283
00:16:43,160 --> 00:16:45,933
and all the configurations are inside.

284
00:16:47,490 --> 00:16:51,430
And moreover the random
generator is a little

285
00:16:51,430 --> 00:16:53,989
bit problematic.

286
00:16:53,990 --> 00:16:56,850
The random generator comes without seed.

287
00:16:56,850 --> 00:17:00,293
Which means that each
time the service restarts,

288
00:17:01,160 --> 00:17:05,359
the sequence of random
number is always the same.

289
00:17:05,359 --> 00:17:07,240
So they use the random number to encrypt

290
00:17:07,240 --> 00:17:08,813
the administrator password.

291
00:17:09,890 --> 00:17:13,380
That means you can
always do a reply attack

292
00:17:13,380 --> 00:17:17,109
and you don't even have to
know the actual passwords.

293
00:17:17,109 --> 00:17:21,546
You try to pretend to be an
admin and change the settings.

294
00:17:22,730 --> 00:17:24,022
That's really serious.

295
00:17:25,410 --> 00:17:29,400
And lets talk about the
protocol translation errors.

296
00:17:29,400 --> 00:17:31,440
And this is an example
that we have found in

297
00:17:31,440 --> 00:17:32,693
real-time gateways.

298
00:17:34,330 --> 00:17:38,230
In the table, the first line is on how

299
00:17:38,230 --> 00:17:40,543
a Modbus TCP packet looks like.

300
00:17:41,730 --> 00:17:45,560
And you'll see, there's a
header with transaction ID,

301
00:17:45,560 --> 00:17:47,760
protocol ID message lengths,

302
00:17:47,760 --> 00:17:50,833
followed by a standard Modbus payload.

303
00:17:51,900 --> 00:17:54,610
And the second in line is Modbus TCP...

304
00:17:54,610 --> 00:17:58,173
I'm sorry, Modbus RTU payload.

305
00:17:59,230 --> 00:18:01,480
So it's exactly the same payload.

306
00:18:01,480 --> 00:18:04,370
Just follow by a CRC SSH session.

307
00:18:04,370 --> 00:18:08,120
So if you are a designer of
a very lazy protocol gateway,

308
00:18:08,120 --> 00:18:09,137
what will you do?

309
00:18:09,137 --> 00:18:11,830
You'll just strip off the header

310
00:18:11,830 --> 00:18:14,310
and add the CRC at the bottom,

311
00:18:14,310 --> 00:18:16,560
and you are done with
the translation, right?

312
00:18:17,590 --> 00:18:20,770
No, this is absolutely wrong because

313
00:18:21,660 --> 00:18:25,090
this kind protocol gateway
doesn't inspect the content

314
00:18:25,090 --> 00:18:27,033
of the Modbus I/O payload.

315
00:18:28,820 --> 00:18:32,560
So if you would know
how to stop a POC behind

316
00:18:32,560 --> 00:18:33,562
with a malicious payload,

317
00:18:33,563 --> 00:18:36,270
you can just inject this kind of payload

318
00:18:36,270 --> 00:18:39,123
and program it the way
it will not stop it.

319
00:18:40,780 --> 00:18:44,110
And we have found another type of error

320
00:18:44,110 --> 00:18:46,803
caused by this fixing function.

321
00:18:48,100 --> 00:18:52,169
And you might notice that
there's a big 90 function code.

322
00:18:52,170 --> 00:18:57,070
So all the function code that's
greater than hexadecimal 80

323
00:18:57,070 --> 00:19:00,840
means that there is an
error in the request

324
00:19:00,840 --> 00:19:03,070
and this kind of function code

325
00:19:03,070 --> 00:19:05,793
always appears in the responses.

326
00:19:08,260 --> 00:19:09,710
So we think," okay,

327
00:19:09,710 --> 00:19:14,290
maybe we can just try to send a error code

328
00:19:14,290 --> 00:19:17,639
as a function code and
see what will happen."

329
00:19:17,640 --> 00:19:20,450
So one of the real-time
gateway just strip off

330
00:19:20,450 --> 00:19:25,203
the most significant bytes
and to make this 90 a 10.

331
00:19:25,203 --> 00:19:28,517
A 10 means write multiple registers.

332
00:19:31,470 --> 00:19:36,180
So a hacker can just pretend
to send an error message and

333
00:19:36,180 --> 00:19:37,907
the ICS firewall would say,

334
00:19:37,907 --> 00:19:41,939
"okay, that's an error
message so just let it pass."

335
00:19:41,940 --> 00:19:46,940
And actually the hacker is able
to write multiple registers.

336
00:19:47,600 --> 00:19:50,899
Or if we just want to take a coil,

337
00:19:50,900 --> 00:19:55,900
we can put 85 and it will
be translated to zero five.

338
00:19:56,040 --> 00:19:59,450
Zero five is write a single coil.

339
00:19:59,450 --> 00:20:01,300
And that it would cause some damages.

340
00:20:03,920 --> 00:20:08,810
Protocol gateway like a data
station is more complicated.

341
00:20:08,810 --> 00:20:13,810
It's usually running two or
more routines simultaneously.

342
00:20:15,270 --> 00:20:18,800
The first routine is responsible
to parse inbound packets

343
00:20:18,800 --> 00:20:22,562
and the set of coils and the
registers in internal memory.

344
00:20:23,670 --> 00:20:26,383
According to how you designed
this I/O mapping table.

345
00:20:29,180 --> 00:20:33,840
In some cases, we have found
a problematic data station

346
00:20:33,840 --> 00:20:38,840
that does one to one
mapping the input address

347
00:20:40,140 --> 00:20:42,540
to the internal memory,

348
00:20:42,540 --> 00:20:44,550
which allows you to overwrite

349
00:20:45,740 --> 00:20:47,853
whatever address in the internal memory.

350
00:20:49,930 --> 00:20:54,930
And the second routine
usually parse periodically the

351
00:20:55,010 --> 00:20:59,150
internal memory and see whether
any value has been changed.

352
00:20:59,150 --> 00:21:00,750
If anything's changed,

353
00:21:00,750 --> 00:21:04,120
it would trigger the command
to send the command to

354
00:21:04,120 --> 00:21:05,253
Modbus slaves.

355
00:21:07,890 --> 00:21:08,723
(clears throat)

356
00:21:08,723 --> 00:21:13,540
This is how a normal
operation of a data station.

357
00:21:14,910 --> 00:21:19,910
So as you can see on the
table on the upper left side,

358
00:21:21,770 --> 00:21:24,350
we have the first I/O mapping table.

359
00:21:24,350 --> 00:21:26,219
For example, command one means that

360
00:21:27,210 --> 00:21:32,210
we have one coil on slave ID
one function five address one.

361
00:21:33,070 --> 00:21:35,080
So one coil is just like a switch.

362
00:21:35,080 --> 00:21:36,540
You flip it on or off.

363
00:21:36,540 --> 00:21:37,790
There is no other States.

364
00:21:39,880 --> 00:21:43,380
Then there's a second I/O
mapping table that you'll see

365
00:21:43,380 --> 00:21:46,093
on the right hand side of the table.

366
00:21:46,950 --> 00:21:50,950
So that means command one is mapped

367
00:21:50,950 --> 00:21:53,720
to the internal address zero.

368
00:21:53,720 --> 00:21:56,910
So whenever you want to
change the value or say,

369
00:21:56,910 --> 00:22:00,680
you want to turn on the
switch, what you do,

370
00:22:00,680 --> 00:22:03,550
is to follow the points, the bullet point.

371
00:22:03,550 --> 00:22:07,560
Say you send a function five
address one, turn on the coil.

372
00:22:07,560 --> 00:22:11,190
And when the data station
receives this kind of message,

373
00:22:11,190 --> 00:22:14,940
it would map this command
to internal address zero

374
00:22:14,940 --> 00:22:17,273
and change the zero to one.

375
00:22:18,320 --> 00:22:22,610
And the second routine a
snap in the green background

376
00:22:22,610 --> 00:22:26,209
and has found that, "Oh,
there's zero changed to one."

377
00:22:26,210 --> 00:22:29,520
So it sends the Modbus command
function five address one

378
00:22:29,520 --> 00:22:31,160
and turn this on.

379
00:22:31,160 --> 00:22:32,483
So that's how it works.

380
00:22:33,580 --> 00:22:37,263
Now, let's see how a
hacker would abuse it.

381
00:22:38,410 --> 00:22:43,150
So for a hacker, my
apologies the 25 on a slides

382
00:22:43,150 --> 00:22:46,053
should be a 24, because the
address begins from zero.

383
00:22:46,940 --> 00:22:51,940
So the hacker would just send
function five, address 24,

384
00:22:52,010 --> 00:22:53,110
and turn on.

385
00:22:53,110 --> 00:22:56,510
And you might ask
yourself, "what, there's no

386
00:22:56,510 --> 00:23:01,189
definition of address 24,
because if you look at the table,

387
00:23:01,189 --> 00:23:04,890
and there's a write
address 21, or address one,

388
00:23:04,890 --> 00:23:06,760
and there's no 24."

389
00:23:06,760 --> 00:23:10,460
And however, since this
is a one to one mapping,

390
00:23:10,460 --> 00:23:15,020
what you are changing is in
fact, the five, three, and,

391
00:23:15,020 --> 00:23:16,720
the wrong numbering

392
00:23:16,720 --> 00:23:20,780
And it totally changes
the zero too zero three.

393
00:23:20,780 --> 00:23:24,170
It's something that you
totally would not expect.

394
00:23:24,170 --> 00:23:28,140
Then the second routine
where honestly obey

395
00:23:28,140 --> 00:23:30,287
this I/O mapping table and find,

396
00:23:30,287 --> 00:23:32,960
"okay, I should send a command three

397
00:23:32,960 --> 00:23:37,320
functions 15 to address 21 length 50.

398
00:23:37,320 --> 00:23:40,020
This is something that
you would not expect.

399
00:23:40,020 --> 00:23:44,110
And what's making it worse is that

400
00:23:44,110 --> 00:23:47,699
it can figure out where
a register is mapped to.

401
00:23:47,700 --> 00:23:51,830
It could just like turning on a switch.

402
00:23:51,830 --> 00:23:54,023
It will change the value of the register.

403
00:23:56,180 --> 00:23:57,880
Okay, from the slides above,

404
00:23:57,880 --> 00:24:02,880
we have learned that an
attacker can take advantage

405
00:24:03,150 --> 00:24:05,450
of a leaked I/O mapping table

406
00:24:05,450 --> 00:24:07,723
or an error in the translation.

407
00:24:08,850 --> 00:24:12,649
So if packets are all valid in formats,

408
00:24:12,650 --> 00:24:16,310
it would simply bypass the ICS firewall.

409
00:24:16,310 --> 00:24:18,480
It would not be stopped.

410
00:24:18,480 --> 00:24:23,480
And the translated message
to the POC would cause

411
00:24:24,470 --> 00:24:26,850
or not cause a damage.

412
00:24:26,850 --> 00:24:30,290
All depends on the
knowledge of the attacker.

413
00:24:30,290 --> 00:24:33,730
If the attacker really knows
your factory very well,

414
00:24:33,730 --> 00:24:35,740
they know which kind of PLC you are using,

415
00:24:35,740 --> 00:24:37,790
which kind of Robo arm you're using,

416
00:24:37,790 --> 00:24:39,190
then you're totally screwed.

417
00:24:40,760 --> 00:24:43,390
If this is not serious enough,

418
00:24:43,390 --> 00:24:48,390
the attacker can top it up with
the privilege escalation or

419
00:24:48,480 --> 00:24:52,700
leaked IO mapping table,
or just to simply use this

420
00:24:52,700 --> 00:24:55,040
legacy vulnerabilities to make himself

421
00:24:55,970 --> 00:24:59,110
administrator of the network and change to

422
00:24:59,110 --> 00:25:01,082
their value to fit his needs.

423
00:25:04,490 --> 00:25:08,760
And we want to briefly talk
about the cloud vulnerabilities.

424
00:25:08,760 --> 00:25:12,300
In one of the real-time
gateways that we have found,

425
00:25:12,300 --> 00:25:15,480
there is a broken confidentiality in that,

426
00:25:15,480 --> 00:25:19,970
there's no encryption in
the communication at all.

427
00:25:19,970 --> 00:25:24,083
Moreover, the username
is always left blank.

428
00:25:24,970 --> 00:25:28,110
So you might connect it
to a rogue MQTT broker,

429
00:25:28,110 --> 00:25:29,122
and you don't know.

430
00:25:30,230 --> 00:25:32,980
We have found that there
is no input validation

431
00:25:32,980 --> 00:25:35,010
from the Modbus RTU.

432
00:25:35,010 --> 00:25:40,010
So that's everything we have
sent over Modbus RTU repackaged

433
00:25:40,660 --> 00:25:43,460
and translated to MQTT size.

434
00:25:43,460 --> 00:25:47,200
If you have a cloud service and
you don't inspect the input,

435
00:25:47,200 --> 00:25:49,360
you might end up with a SQL injection

436
00:25:49,360 --> 00:25:52,092
and get exploited in the backend.

437
00:25:56,736 --> 00:26:00,040
And so we have learned
that a protocol gateway is

438
00:26:00,040 --> 00:26:03,970
becoming more and more prominent,
thanks to industrial 4.O.

439
00:26:03,970 --> 00:26:07,800
It is fundamental to
IT and OT integration.

440
00:26:07,800 --> 00:26:11,870
But it's also a tiny little
box that you mind forgets after

441
00:26:11,870 --> 00:26:12,703
deployment.

442
00:26:13,760 --> 00:26:16,690
And they're prone to crafted packets

443
00:26:16,690 --> 00:26:17,890
and might damage the POC

444
00:26:18,830 --> 00:26:21,183
and even to stop your production line.

445
00:26:22,328 --> 00:26:26,930
And since we're able to
make up valid packets,

446
00:26:26,930 --> 00:26:30,570
it means that the packets
can pass an ICS firewall

447
00:26:32,040 --> 00:26:35,023
and the attacker could do with the attack

448
00:26:35,023 --> 00:26:36,403
that you may not know.

449
00:26:38,530 --> 00:26:42,143
This is what we really recommend
you to do in the next week.

450
00:26:43,540 --> 00:26:47,129
Please identify protocol
gateways in your ICS environment.

451
00:26:47,130 --> 00:26:49,663
Have them listed in the critical assets.

452
00:26:51,460 --> 00:26:53,540
You might also want to know that,

453
00:26:53,540 --> 00:26:56,812
are there any rules on
gateways or data stations?

454
00:26:58,140 --> 00:27:01,490
Because we have identified the
different vulnerabilities in

455
00:27:01,490 --> 00:27:03,693
real-time gateways and the data stations.

456
00:27:04,990 --> 00:27:06,790
And you might have also learned that

457
00:27:08,070 --> 00:27:10,350
whether they're sending
anything to the cloud,

458
00:27:10,350 --> 00:27:12,870
if they do, please make
sure that they're encrypted

459
00:27:12,870 --> 00:27:13,709
and secured.

460
00:27:13,710 --> 00:27:17,923
Just like you want to do
in any cloud services.

461
00:27:20,550 --> 00:27:24,260
And in three months, you're
really, really encouraged

462
00:27:24,260 --> 00:27:27,160
to configure your network
to protect the gateways.

463
00:27:27,160 --> 00:27:29,743
You might want to set up a whitelist

464
00:27:29,743 --> 00:27:32,909
and to allow only some IP or Mac addresses

465
00:27:32,910 --> 00:27:36,120
that can access the protocol gateways.

466
00:27:36,120 --> 00:27:38,173
You want to block all other accesses.

467
00:27:39,350 --> 00:27:41,209
You might want to contact the vendor

468
00:27:41,210 --> 00:27:43,340
and ask for more upgrade

469
00:27:43,340 --> 00:27:46,470
and test the upgrades
in the lab environment.

470
00:27:46,470 --> 00:27:50,640
If you're using any
vendors that we have tested

471
00:27:50,640 --> 00:27:53,130
in this research, we're pretty sure that

472
00:27:53,130 --> 00:27:56,420
they're working very hard
on a framework patch.

473
00:27:56,420 --> 00:27:58,733
You might be able to obtain it from them.

474
00:28:00,720 --> 00:28:03,600
Within six months, you were
really, really encouraged

475
00:28:03,600 --> 00:28:06,203
to add firmware upgrade
to the scheduled downtime.

476
00:28:07,070 --> 00:28:10,370
You might also want to
identify an ICS firewall

477
00:28:10,370 --> 00:28:14,050
in the market that's can
filter invalid packets.

478
00:28:14,050 --> 00:28:16,879
Please make sure that
they also check the mains

479
00:28:16,880 --> 00:28:20,113
inside the packets and
not only check the format.

480
00:28:22,350 --> 00:28:25,533
So this is the disclosed vulnerabilities.

481
00:28:27,680 --> 00:28:29,880
My apologies that I cannot really

482
00:28:31,089 --> 00:28:33,050
go through all the vulnerabilities.

483
00:28:33,050 --> 00:28:35,440
I cannot do a deep dive because

484
00:28:35,440 --> 00:28:37,463
the vendors are still fixing them.

485
00:28:38,500 --> 00:28:41,060
We want to be responsible
and we don't want,

486
00:28:41,060 --> 00:28:44,000
your factory be hacked
because of our fault.

487
00:28:44,000 --> 00:28:49,000
We promise that all the technical
details might be released

488
00:28:49,030 --> 00:28:53,373
in mid August if there's no problems.

489
00:28:54,870 --> 00:28:59,870
And if you have any
questions, we're all Slido,

490
00:29:00,220 --> 00:29:02,960
or you are more than welcome to contact us

491
00:29:02,960 --> 00:29:05,090
in Trend Micro Research.

492
00:29:05,090 --> 00:29:07,959
And this is the twitter handle
of Trend Micro Research.

493
00:29:07,960 --> 00:29:10,023
It's @trendmicroRSRCH.

494
00:29:11,280 --> 00:29:14,649
Ping us, drop us a message
if you have any questions.

495
00:29:14,650 --> 00:29:16,410
We're really happy to help.

496
00:29:16,410 --> 00:29:17,243
Thank you.

