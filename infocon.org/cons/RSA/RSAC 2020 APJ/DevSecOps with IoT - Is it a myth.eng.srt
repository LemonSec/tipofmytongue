1
00:00:04,390 --> 00:00:06,380
- Hello everyone, thanks
for joining me today,

2
00:00:06,380 --> 00:00:11,070
in this session, DevSecOps
with IoT, is it a myth?

3
00:00:11,070 --> 00:00:12,270
Well, we'll see.

4
00:00:12,270 --> 00:00:13,480
This is Neel Mitra,

5
00:00:13,480 --> 00:00:16,720
I'm a Specialist Solutions
Architect on IoT,

6
00:00:16,720 --> 00:00:19,369
I work with customers worldwide,

7
00:00:19,370 --> 00:00:22,760
I've been working for AWS
close to four years now,

8
00:00:22,760 --> 00:00:24,660
based out of New York City,

9
00:00:24,660 --> 00:00:28,759
I'm super excited to be in
front of all of you today.

10
00:00:28,760 --> 00:00:31,180
So, we have a lot to cover today,

11
00:00:31,180 --> 00:00:34,280
I guess you care about DevOps or Security,

12
00:00:34,280 --> 00:00:36,400
or IoT or everything,

13
00:00:36,400 --> 00:00:38,190
and that's why you are here.

14
00:00:38,190 --> 00:00:40,690
So, you're probably a DevOps engineer,

15
00:00:40,690 --> 00:00:43,250
an architect, security practitioner,

16
00:00:43,250 --> 00:00:44,750
or just love the space.

17
00:00:44,750 --> 00:00:45,590
So, that's awesome,

18
00:00:45,590 --> 00:00:48,220
you're at the right
place at the right time.

19
00:00:48,220 --> 00:00:51,460
We'll start with a quick
Insecurity Of Things,

20
00:00:51,460 --> 00:00:55,580
to help you understand why IoT is complex,

21
00:00:55,580 --> 00:01:00,180
then I will introduce you to
different AWS IoT services,

22
00:01:00,180 --> 00:01:02,370
in case you're not familiar,

23
00:01:02,370 --> 00:01:07,060
and we will get into the weeds
focusing on age computing,

24
00:01:07,060 --> 00:01:10,430
specifically, how do you develop,

25
00:01:10,430 --> 00:01:14,480
operate a new generation
of applications at Edge,

26
00:01:14,480 --> 00:01:17,090
securely in an agile fashion?

27
00:01:17,090 --> 00:01:19,330
That's going to be the
goal of this session.

28
00:01:19,330 --> 00:01:21,550
So, without being an embedded developer,

29
00:01:21,550 --> 00:01:23,429
how do you bring the agility

30
00:01:23,430 --> 00:01:25,580
that you have in the Cloud today?

31
00:01:25,580 --> 00:01:28,090
Finally, I will try to
show you a quick demo

32
00:01:28,090 --> 00:01:32,810
and get you going to your next
session with some resources.

33
00:01:32,810 --> 00:01:35,670
Sounds exciting? Let's get started.

34
00:01:35,670 --> 00:01:36,610
If you are here,

35
00:01:36,610 --> 00:01:39,620
you already know the potential of IoT.

36
00:01:39,620 --> 00:01:43,080
IoT is being adopted across
all different verticals,

37
00:01:43,080 --> 00:01:46,850
connected home, industrial,
agricultural, financial.

38
00:01:46,850 --> 00:01:48,500
According to IDC,

39
00:01:48,500 --> 00:01:52,370
worldwide technology spending on IoT

40
00:01:52,370 --> 00:01:55,940
will reach more than $1
trillion in next few years.

41
00:01:55,940 --> 00:01:58,500
That means, as developers,

42
00:01:58,500 --> 00:02:01,110
you will have a lot more to code

43
00:02:01,110 --> 00:02:04,220
and we can see some of us today,

44
00:02:04,220 --> 00:02:05,370
part of our lives,

45
00:02:05,370 --> 00:02:07,943
we are surrounded by IoT devices,

46
00:02:07,943 --> 00:02:10,340
like an Alexa monitoring my home,

47
00:02:10,340 --> 00:02:11,330
hope she's not listening,

48
00:02:11,330 --> 00:02:13,950
to drones delivering packages,

49
00:02:13,950 --> 00:02:15,290
IoT is everywhere.

50
00:02:15,290 --> 00:02:18,750
But being everywhere is a problem as well,

51
00:02:18,750 --> 00:02:20,990
and that's the reason, you know,

52
00:02:20,990 --> 00:02:23,280
you need to understand lot of scenarios

53
00:02:23,280 --> 00:02:24,280
that you need to cover,

54
00:02:24,280 --> 00:02:26,470
when you're building these
kind of applications.

55
00:02:26,470 --> 00:02:30,290
Because your security perimeter,

56
00:02:30,290 --> 00:02:33,070
is getting larger with
the physical devices

57
00:02:33,070 --> 00:02:34,343
interacting with you.

58
00:02:35,400 --> 00:02:37,040
Such as, what are the scenarios?

59
00:02:37,040 --> 00:02:38,090
Denial of service,

60
00:02:38,090 --> 00:02:40,920
when IoT devices can prevent access

61
00:02:40,920 --> 00:02:43,329
to legitimate web services,

62
00:02:43,330 --> 00:02:47,360
or LTE, where hackers
can use either devices,

63
00:02:47,360 --> 00:02:49,230
to bypass a perimeter security

64
00:02:49,230 --> 00:02:50,769
and access critical resources,

65
00:02:50,770 --> 00:02:54,973
and these traits are not
going anywhere, anytime soon.

66
00:02:55,830 --> 00:02:57,270
So, why is that?

67
00:02:57,270 --> 00:03:00,783
Because IoT solutions are
complex and multidimensional.

68
00:03:01,650 --> 00:03:03,150
So, think of there's different layers,

69
00:03:03,150 --> 00:03:04,150
you have the edgy layer,

70
00:03:04,150 --> 00:03:05,420
this is where you onboard,

71
00:03:05,420 --> 00:03:08,350
operate and manage all
your devices or assets.

72
00:03:08,350 --> 00:03:10,049
Then you have the communication layer,

73
00:03:10,050 --> 00:03:11,530
which handles the connectivity,

74
00:03:11,530 --> 00:03:13,400
message routing among devices,

75
00:03:13,400 --> 00:03:15,060
between the devices and the Cloud.

76
00:03:15,060 --> 00:03:17,840
Then you have the ingestion
and analytics lives.

77
00:03:17,840 --> 00:03:19,370
This is where all the disparate

78
00:03:19,370 --> 00:03:21,290
data streams gets aggregated,

79
00:03:21,290 --> 00:03:23,850
created by your devices
to help you analyze,

80
00:03:23,850 --> 00:03:25,890
visualize offer machine learning,

81
00:03:25,890 --> 00:03:27,269
to drive your business outcomes.

82
00:03:27,270 --> 00:03:29,970
And finally, you have the
application layer as well.

83
00:03:29,970 --> 00:03:32,310
This is where you build
different kinds of applications,

84
00:03:32,310 --> 00:03:33,550
like user applications,

85
00:03:33,550 --> 00:03:36,760
to enable your users like us
interacting with, you know,

86
00:03:36,760 --> 00:03:39,140
Alexa or mobile applications

87
00:03:39,140 --> 00:03:41,309
to start your thermostat,

88
00:03:41,310 --> 00:03:43,270
or set the temperature and whatnot.

89
00:03:43,270 --> 00:03:45,290
You also have management applications,

90
00:03:45,290 --> 00:03:48,489
that means, you are creating
a set of applications

91
00:03:48,490 --> 00:03:50,440
for your field missions,

92
00:03:50,440 --> 00:03:52,300
to create an operative device

93
00:03:52,300 --> 00:03:55,840
and diagnose them from
time to time as needed.

94
00:03:55,840 --> 00:03:57,680
So, with all these layers,

95
00:03:57,680 --> 00:04:01,730
it's very difficult to
identify different issues

96
00:04:01,730 --> 00:04:05,340
and engage to mitigate them very quickly.

97
00:04:05,340 --> 00:04:07,470
So, now the obvious question is,

98
00:04:07,470 --> 00:04:10,733
how does AWS help customers here?

99
00:04:11,930 --> 00:04:15,330
So, we have tried to
simplify this architecture,

100
00:04:15,330 --> 00:04:17,000
this multidimensional architecture

101
00:04:17,000 --> 00:04:19,360
into standard three tier architecture.

102
00:04:19,360 --> 00:04:21,670
And learning from the
experience of our customers,

103
00:04:21,670 --> 00:04:22,710
in the last few years,

104
00:04:22,710 --> 00:04:24,440
we have been building different services,

105
00:04:24,440 --> 00:04:27,410
for different use cases
across these links.

106
00:04:27,410 --> 00:04:28,870
So, on the device layer,

107
00:04:28,870 --> 00:04:31,260
we have services like IoT Device SDK,

108
00:04:31,260 --> 00:04:33,650
which is SDK that you can use

109
00:04:33,650 --> 00:04:36,000
for different IP connected devices,

110
00:04:36,000 --> 00:04:38,670
like your mobile phones or other devices

111
00:04:38,670 --> 00:04:40,630
which can directly talk
to a Cloud Endpoint,

112
00:04:40,630 --> 00:04:42,860
and we offer this in different languages,

113
00:04:42,860 --> 00:04:46,290
like Node. js, Java, Python,
Go, C sharp, you name it.

114
00:04:46,290 --> 00:04:48,440
Then, there is Greengrass as well.

115
00:04:48,440 --> 00:04:50,390
With Greengrass, it brings lot

116
00:04:50,390 --> 00:04:52,380
of Edge computing capabilities,

117
00:04:52,380 --> 00:04:54,570
on the Edge as a gateway.

118
00:04:54,570 --> 00:04:58,310
It can act as a very powerful appliance

119
00:04:58,310 --> 00:05:00,650
and connect you to Cloud services,

120
00:05:00,650 --> 00:05:02,780
different Cloud services as needed.

121
00:05:02,780 --> 00:05:04,070
Then you have freeRTOS,

122
00:05:04,070 --> 00:05:06,250
which is an operating
system for microcontrollers.

123
00:05:06,250 --> 00:05:09,380
So, if your devices are
really resource constrained,

124
00:05:09,380 --> 00:05:12,060
like the sensors or the fitness trackers,

125
00:05:12,060 --> 00:05:14,110
that's where you use
something like a FreeRTOS,

126
00:05:14,110 --> 00:05:16,090
which has few cables of RAM maybe.

127
00:05:16,090 --> 00:05:16,923
On the middle layer,

128
00:05:16,923 --> 00:05:18,700
we have the control services.

129
00:05:18,700 --> 00:05:20,950
So, starting with IoT Core,

130
00:05:20,950 --> 00:05:22,060
with IoT Core,

131
00:05:22,060 --> 00:05:24,060
it gives you a managed platform,

132
00:05:24,060 --> 00:05:26,660
is a gateway to support
billions of devices

133
00:05:26,660 --> 00:05:28,410
and trillions of messages.

134
00:05:28,410 --> 00:05:31,530
And it can round all these
messages using a rules engine

135
00:05:31,530 --> 00:05:33,669
to back end services as well.

136
00:05:33,670 --> 00:05:36,440
And now you have billions
of devices on the field,

137
00:05:36,440 --> 00:05:39,400
you need to ensure that you
are managing them properly.

138
00:05:39,400 --> 00:05:41,440
So, IoT Device Management,

139
00:05:41,440 --> 00:05:44,240
helps you to organize
and manage your devices,

140
00:05:44,240 --> 00:05:46,300
including doing auto upgrades,

141
00:05:46,300 --> 00:05:47,953
patching and new frameworks.

142
00:05:49,230 --> 00:05:50,990
But that's not the end, right?

143
00:05:50,990 --> 00:05:52,450
You have organized your devices,

144
00:05:52,450 --> 00:05:53,760
how do you do that securely?

145
00:05:53,760 --> 00:05:56,610
So, that's where IoT
Device Defender helps you,

146
00:05:56,610 --> 00:06:00,200
which enables you to
continuously audit your IoT

147
00:06:00,200 --> 00:06:01,740
configurations to ensure,

148
00:06:01,740 --> 00:06:04,690
they're not deviating from
the security best practices

149
00:06:04,690 --> 00:06:06,230
throughout their lifecycle.

150
00:06:06,230 --> 00:06:07,640
Let's think of smart switches,

151
00:06:07,640 --> 00:06:10,469
it can sit in my room or in my apartment

152
00:06:10,470 --> 00:06:12,430
for next 10,15,20 years,

153
00:06:12,430 --> 00:06:14,390
but I don't want them to be compromised

154
00:06:14,390 --> 00:06:16,650
even 10 or 15 years from now onwards.

155
00:06:16,650 --> 00:06:19,120
So, how do you think about
those kind of scenarios?

156
00:06:19,120 --> 00:06:20,470
IoT Things Graph,

157
00:06:20,470 --> 00:06:21,910
how do you build all these kind

158
00:06:21,910 --> 00:06:24,800
of IoT applications quickly, rapidly.

159
00:06:24,800 --> 00:06:28,310
So, that helps you build a
prototype really really quick,

160
00:06:28,310 --> 00:06:32,223
with different website services
using a drag and drop mode.

161
00:06:33,210 --> 00:06:35,030
And the top layer is a data layer,

162
00:06:35,030 --> 00:06:36,609
this is where we have build services like,

163
00:06:36,610 --> 00:06:39,240
IoT Analytics, which
helps you to collect lots

164
00:06:39,240 --> 00:06:41,670
of time series data from all these devices

165
00:06:41,670 --> 00:06:45,090
and store it in a time
series optimized data store,

166
00:06:45,090 --> 00:06:47,429
on top of which, you can run SQL,

167
00:06:47,430 --> 00:06:48,740
everyone loves SQL, right?

168
00:06:48,740 --> 00:06:51,920
So you can run complex SQL, simple SQL,

169
00:06:51,920 --> 00:06:54,960
you can do visualization with BI tools,

170
00:06:54,960 --> 00:06:57,229
you can do machine
learning on top of them,

171
00:06:57,230 --> 00:06:59,040
there's a lot of things that you can do.

172
00:06:59,040 --> 00:07:03,130
IoT Events, it's very easy
to monitor one sensor,

173
00:07:03,130 --> 00:07:06,030
But when you have hundreds
and thousands of sensors

174
00:07:06,030 --> 00:07:09,349
and you need to detect
issues with your sensors,

175
00:07:09,350 --> 00:07:10,183
how do you do that?

176
00:07:10,183 --> 00:07:12,719
That's where we have been
to service IoT Events,

177
00:07:12,720 --> 00:07:15,900
which helps you to monitor
equipment and fleets of devices

178
00:07:15,900 --> 00:07:18,630
with failures or changes in operation

179
00:07:18,630 --> 00:07:19,987
and trigger alerts for you.

180
00:07:19,987 --> 00:07:23,210
IoT SiteWise, it makes it easy for you,

181
00:07:23,210 --> 00:07:26,460
to collect and organize data
from industrial equipments,

182
00:07:26,460 --> 00:07:30,060
which might be talking
industrial protocols like OPCQL.

183
00:07:30,060 --> 00:07:31,090
So, that's a lot, right?

184
00:07:31,090 --> 00:07:33,890
I don't want to overwhelm
you and in this session,

185
00:07:33,890 --> 00:07:38,140
we're only going to
focus on IoT Greengrass,

186
00:07:38,140 --> 00:07:40,969
which is marked on red on my screen.

187
00:07:40,970 --> 00:07:42,200
But to get the point,

188
00:07:42,200 --> 00:07:45,060
what we're trying to do is remove,

189
00:07:45,060 --> 00:07:49,250
the complexity of implementing
IoT into the business,

190
00:07:49,250 --> 00:07:51,410
we do the undifferentiated heavy lifting

191
00:07:51,410 --> 00:07:53,180
of managing the infrastructure,

192
00:07:53,180 --> 00:07:57,710
so that you can focus on
the business outcomes.

193
00:07:57,710 --> 00:07:59,210
And millions of customers

194
00:07:59,210 --> 00:08:01,320
have been using this services everyday.

195
00:08:01,320 --> 00:08:04,670
A quick peek into some of
the customers like Vizio,

196
00:08:04,670 --> 00:08:07,910
they have built an entire
line of smart televisions

197
00:08:07,910 --> 00:08:09,050
and sound bars,

198
00:08:09,050 --> 00:08:12,590
they have millions of devices
on the field using IoT Core.

199
00:08:12,590 --> 00:08:14,500
If you think of a customer like iRobot,

200
00:08:14,500 --> 00:08:16,790
if you have a Roomba Vacuum Cleaner,

201
00:08:16,790 --> 00:08:19,770
they have mopped more than
500 million square feet

202
00:08:19,770 --> 00:08:22,330
of floor space and they use IoT Core.

203
00:08:22,330 --> 00:08:24,530
If you think of a customer like Pentair,

204
00:08:24,530 --> 00:08:27,119
they provide beer and
water filtration system

205
00:08:27,120 --> 00:08:29,400
to industrial brewing customers.

206
00:08:29,400 --> 00:08:31,330
So, with IoT Greengrass,

207
00:08:31,330 --> 00:08:33,759
they ingest a lot of operational data

208
00:08:33,759 --> 00:08:38,759
to improve their operational efficiency.

209
00:08:40,039 --> 00:08:45,040
So, now let's get into the
weeds with that background.

210
00:08:45,040 --> 00:08:47,130
I hear this question often,

211
00:08:47,130 --> 00:08:49,060
Edge, is this something new?

212
00:08:49,060 --> 00:08:51,650
Will our Cloud Computing
solves all our problems?

213
00:08:51,650 --> 00:08:55,209
Well, the first generation
of enterprise applications,

214
00:08:55,210 --> 00:08:58,970
were built with focus on
people like, CRM applications,

215
00:08:58,970 --> 00:09:00,860
or ERP applications.

216
00:09:00,860 --> 00:09:02,840
And we often refer to them now,

217
00:09:02,840 --> 00:09:06,610
as Internet of People applications.

218
00:09:06,610 --> 00:09:10,010
Today, we're talking about
building applications,

219
00:09:10,010 --> 00:09:13,290
for the things, Internet
of Things applications.

220
00:09:13,290 --> 00:09:16,730
So, thus we need decentralized system,

221
00:09:16,730 --> 00:09:20,280
just closer to us, the
people serving our needs.

222
00:09:20,280 --> 00:09:22,896
Think of Alexa or our mobile phones,

223
00:09:22,897 --> 00:09:25,500
thus, this concept is not new,

224
00:09:25,500 --> 00:09:29,493
and we see a lot of
implementations today though.

225
00:09:31,290 --> 00:09:32,219
So, how does it work?

226
00:09:32,220 --> 00:09:33,110
In simple terms,

227
00:09:33,110 --> 00:09:35,360
you have your devices like thermostats,

228
00:09:35,360 --> 00:09:38,170
light bulbs that exists
in your home network,

229
00:09:38,170 --> 00:09:39,920
it connects using WiFi,

230
00:09:39,920 --> 00:09:43,110
Bluetooth, ZigBee, Z-Wave and whatnot,

231
00:09:43,110 --> 00:09:46,340
and it's often managed
through a local gateway.

232
00:09:46,340 --> 00:09:48,850
The local gateway, in
turn does a lot of things.

233
00:09:48,850 --> 00:09:50,090
It can do a command control,

234
00:09:50,090 --> 00:09:53,830
like change the temperature
of my room, message routing,

235
00:09:53,830 --> 00:09:55,500
different kind of data aggregation,

236
00:09:55,500 --> 00:09:58,530
and connectivity to
the Cloud as if needed.

237
00:09:58,530 --> 00:10:01,550
And once the data is pushed
to the Cloud to add to Court,

238
00:10:01,550 --> 00:10:03,439
you have all the goodies of Cloud,

239
00:10:03,440 --> 00:10:05,510
if it's economy of scale,

240
00:10:05,510 --> 00:10:07,840
with different value proposition like,

241
00:10:07,840 --> 00:10:09,410
you can do Device Management,

242
00:10:09,410 --> 00:10:10,980
you can do all the auditing,

243
00:10:10,980 --> 00:10:12,020
you can do data processing,

244
00:10:12,020 --> 00:10:14,310
you can build serverless applications,

245
00:10:14,310 --> 00:10:16,622
you can do machine learning, and whatnot.

246
00:10:18,000 --> 00:10:20,470
So, the obvious question is,

247
00:10:20,470 --> 00:10:22,730
how do I develop on the Edge?

248
00:10:22,730 --> 00:10:25,160
Well, if you think traditionally,

249
00:10:25,160 --> 00:10:27,490
you have to be an embedded developer,

250
00:10:27,490 --> 00:10:32,090
using low level languages
like C and C++ and whatnot.

251
00:10:32,090 --> 00:10:34,180
And our customers like you,

252
00:10:34,180 --> 00:10:38,760
asked us how you can
practice DevSecOps patterns,

253
00:10:38,760 --> 00:10:42,030
with these devices and
each application as well.

254
00:10:42,030 --> 00:10:44,740
For example, you might
have a hardware like ESP32,

255
00:10:44,740 --> 00:10:46,420
which is a microcontroller,

256
00:10:46,420 --> 00:10:49,320
or you might have NVIDIA, Jetson,

257
00:10:49,321 --> 00:10:52,320
which would be a microprocessor.

258
00:10:52,320 --> 00:10:55,060
On Cloud is very common for customers,

259
00:10:55,060 --> 00:10:58,400
like Amazon do thousands
of deployments every week,

260
00:10:58,400 --> 00:11:00,760
or maybe hundreds of
thousands, I don't know.

261
00:11:00,760 --> 00:11:04,470
Can we do something similar
with Edge applications as well,

262
00:11:04,470 --> 00:11:07,300
for you to continuously innovate

263
00:11:07,300 --> 00:11:09,939
and improve the customer experience,

264
00:11:09,940 --> 00:11:12,223
with their hardware and
with their solutions.

265
00:11:13,380 --> 00:11:14,660
So, let's see.

266
00:11:14,660 --> 00:11:18,540
And that's where Greengrass
comes to the play,

267
00:11:18,540 --> 00:11:21,569
it's a comprehensive
Edge solution that brings

268
00:11:21,570 --> 00:11:25,990
local compute, local
messaging, Data caching, sync,

269
00:11:25,990 --> 00:11:28,140
Machine learning inferencing,

270
00:11:28,140 --> 00:11:30,630
or to your capabilities to Edge Devices.

271
00:11:30,630 --> 00:11:33,810
It can act as a very powerful device,

272
00:11:33,810 --> 00:11:36,619
that can work in a
completely offline mode.

273
00:11:36,620 --> 00:11:40,330
I repeat, it can work in
a completely offline mode.

274
00:11:40,330 --> 00:11:41,730
That means whenever,

275
00:11:41,730 --> 00:11:43,680
it is disconnected to the Cloud,

276
00:11:43,680 --> 00:11:45,109
and there could be different scenarios,

277
00:11:45,110 --> 00:11:47,120
think of our auto model.

278
00:11:47,120 --> 00:11:48,820
It is in a no network zone,

279
00:11:48,820 --> 00:11:50,790
but everything that is happening

280
00:11:50,790 --> 00:11:52,650
in that self driving vehicle,

281
00:11:52,650 --> 00:11:53,730
or autonomous vehicle,

282
00:11:53,730 --> 00:11:55,930
need to continue without
the Cloud connectivity.

283
00:11:55,930 --> 00:11:56,939
How do you do that?

284
00:11:56,940 --> 00:11:58,960
You need a solution that can work

285
00:11:58,960 --> 00:12:01,770
in a continuously disconnected mode.

286
00:12:01,770 --> 00:12:03,579
That's why Greengrass can help build.

287
00:12:03,580 --> 00:12:06,370
And of course, it can
also act as a gateway

288
00:12:06,370 --> 00:12:08,870
to thousands of devices behind it,

289
00:12:08,870 --> 00:12:11,960
and chop to the Cloud as necessary.

290
00:12:11,960 --> 00:12:16,960
So, it's an extension of the
Cloud to the physical world.

291
00:12:20,080 --> 00:12:21,330
But it's a software,

292
00:12:21,330 --> 00:12:22,500
that's the beauty of it,

293
00:12:22,500 --> 00:12:24,580
it can run on any hardware,

294
00:12:24,580 --> 00:12:26,920
which is X86 or ARM architecture,

295
00:12:26,920 --> 00:12:31,199
it just needs one core of CPU
and 120MB of RAM, that's it.

296
00:12:31,200 --> 00:12:32,860
You can give as much as you want,

297
00:12:32,860 --> 00:12:33,693
but at the minimum,

298
00:12:33,693 --> 00:12:35,020
that's what is required.

299
00:12:35,020 --> 00:12:37,920
You can run this on
different flavors of Linux,

300
00:12:37,920 --> 00:12:40,877
such as Ubuntu, Suse, Raspbian,

301
00:12:40,877 --> 00:12:43,290
or for non-Linux platforms,

302
00:12:43,290 --> 00:12:45,630
you can run it as a Docker Container.

303
00:12:45,630 --> 00:12:47,000
So, for our Docker lovers,

304
00:12:47,000 --> 00:12:48,970
this is awesome, right?

305
00:12:48,970 --> 00:12:50,530
So, on top of Greengrass,

306
00:12:50,530 --> 00:12:53,360
you can deploy your code
through Lambda functions,

307
00:12:53,360 --> 00:12:57,610
or Docker Containers and
that changes the entire game,

308
00:12:57,610 --> 00:13:00,800
because now you can use Java,

309
00:13:00,800 --> 00:13:02,199
you can use Node. js,

310
00:13:02,200 --> 00:13:04,640
you can use Python with Lambda.

311
00:13:04,640 --> 00:13:06,260
If you have never used Lambda,

312
00:13:06,260 --> 00:13:07,700
it's our serverless offering.

313
00:13:07,700 --> 00:13:09,690
That means you just do the coding,

314
00:13:09,690 --> 00:13:10,967
and you upload to the Cloud,

315
00:13:10,967 --> 00:13:12,600
and Cloud does everything.

316
00:13:12,600 --> 00:13:15,030
Now, that Cloud capability,

317
00:13:15,030 --> 00:13:17,810
is brought to the Edge as well.

318
00:13:17,810 --> 00:13:20,589
So, you can do all your
coding on the Cloud,

319
00:13:20,590 --> 00:13:23,640
and then you can deploy
all this to the Edge,

320
00:13:23,640 --> 00:13:24,740
and we'll see how,

321
00:13:24,740 --> 00:13:26,830
the same thing for containers as well.

322
00:13:26,830 --> 00:13:29,150
So, now since you can develop,

323
00:13:29,150 --> 00:13:31,740
in all these different
programming languages like Java,

324
00:13:31,740 --> 00:13:34,271
Node. js, Python, or anything
that can be Dockerized,

325
00:13:34,271 --> 00:13:37,910
you do not have to be an
embedded developer anymore,

326
00:13:37,910 --> 00:13:41,880
to build this new generation
of Edge applications,

327
00:13:41,880 --> 00:13:43,230
that is changing our lives.

328
00:13:44,280 --> 00:13:47,490
So, now let's talk a little
bit more into the technology.

329
00:13:47,490 --> 00:13:48,370
What is Greengrass?

330
00:13:48,370 --> 00:13:51,120
What are the different components it has?

331
00:13:51,120 --> 00:13:53,670
The first definition that you need

332
00:13:53,670 --> 00:13:57,569
to understand well is of Greengrass group.

333
00:13:57,570 --> 00:14:01,550
Think of it as a overarching package,

334
00:14:01,550 --> 00:14:03,620
that contains all the other resources,

335
00:14:03,620 --> 00:14:05,370
in very simplistic terms.

336
00:14:05,370 --> 00:14:07,600
So, Greengrass group
has a Greengrass Core,

337
00:14:07,600 --> 00:14:10,090
this is like the brain of the software,

338
00:14:10,090 --> 00:14:13,930
this is a domain that will
run on the Linux environment,

339
00:14:13,930 --> 00:14:15,469
or on the Docker environment

340
00:14:15,470 --> 00:14:18,859
and do all the orchestration
for that software.

341
00:14:18,859 --> 00:14:21,960
Now, the Core will also
interact with other components,

342
00:14:21,960 --> 00:14:24,170
like the Lambda functions
I just mentioned,

343
00:14:24,170 --> 00:14:26,250
or the containers, or the subscriptions

344
00:14:26,250 --> 00:14:28,280
which are essentially routing rules

345
00:14:28,280 --> 00:14:31,130
for all the messages that is required

346
00:14:31,130 --> 00:14:33,330
to be routed on the Edge itself,

347
00:14:33,330 --> 00:14:34,680
then you have the connectors

348
00:14:34,680 --> 00:14:37,870
and the name is (Neel
laughs) self explanatory.

349
00:14:37,870 --> 00:14:40,210
It connects to different AWS services,

350
00:14:40,210 --> 00:14:41,910
or third party services.

351
00:14:41,910 --> 00:14:43,900
So, you do not have to code for that.

352
00:14:43,900 --> 00:14:45,110
And finally, resources.

353
00:14:45,110 --> 00:14:47,960
You can push different kind of resources,

354
00:14:47,960 --> 00:14:49,290
like machine learning models,

355
00:14:49,290 --> 00:14:51,160
like different kind of secret managers,

356
00:14:51,160 --> 00:14:53,060
different kind of local ports,

357
00:14:53,060 --> 00:14:54,959
like the USB ports or the serial ports,

358
00:14:54,960 --> 00:14:56,630
of the cameras that you need

359
00:14:56,630 --> 00:14:58,840
to access using Greengrass as well.

360
00:14:58,840 --> 00:15:00,010
So, what do you do?

361
00:15:00,010 --> 00:15:03,170
You build all those
resources onto the Cloud,

362
00:15:03,170 --> 00:15:05,050
you create this group definition,

363
00:15:05,050 --> 00:15:06,680
using console or CLA or API,

364
00:15:06,680 --> 00:15:08,969
there're different ways you can do it

365
00:15:08,970 --> 00:15:12,883
and finally deployed over the
air and it goes to the Edge.

366
00:15:14,310 --> 00:15:18,609
Now, how do these components
work in conjunction?

367
00:15:18,610 --> 00:15:19,750
Very common question.

368
00:15:19,750 --> 00:15:21,420
So, devices can communicate

369
00:15:21,420 --> 00:15:24,760
to other devices with Greengrass,

370
00:15:24,760 --> 00:15:26,100
and when I say devices,

371
00:15:26,100 --> 00:15:28,770
think of it Greengrass
is lifted the gateway,

372
00:15:28,770 --> 00:15:31,520
and behind the gate where you
have multiple thermostats,

373
00:15:31,520 --> 00:15:34,699
or a light bulb with a
thermostat and something else,

374
00:15:34,700 --> 00:15:36,410
and they need to probably communicate

375
00:15:36,410 --> 00:15:38,490
to each other directly for some reason.

376
00:15:38,490 --> 00:15:39,390
so they can do that,

377
00:15:39,390 --> 00:15:41,449
and Greengrass will
manage that orchestration,

378
00:15:41,450 --> 00:15:44,480
or you do not want the
device to communicate

379
00:15:44,480 --> 00:15:45,430
to each other directly.

380
00:15:45,430 --> 00:15:48,290
You want them to go
through a routing logic,

381
00:15:48,290 --> 00:15:50,459
that's where you can put
a Lambda in the middle,

382
00:15:50,460 --> 00:15:53,040
and Lambda can do lot of
local data processing,

383
00:15:53,040 --> 00:15:56,060
data filtering, and it
can make the decision,

384
00:15:56,060 --> 00:15:59,603
whether the data needs to go
from source A to source B.

385
00:16:02,790 --> 00:16:04,170
You can also run Docker Containers,

386
00:16:04,170 --> 00:16:06,479
as I say on top of Greengrass,

387
00:16:06,480 --> 00:16:09,560
so you can port any existing application

388
00:16:09,560 --> 00:16:10,550
that you have today.

389
00:16:10,550 --> 00:16:13,040
So, you might have lot
of existing investments,

390
00:16:13,040 --> 00:16:15,560
you do not want to
recall, and that's fine.

391
00:16:15,560 --> 00:16:18,589
So, you can bring all those applications

392
00:16:19,460 --> 00:16:22,130
and run it on top of Greengrass.

393
00:16:22,130 --> 00:16:23,640
And then also the scenarios

394
00:16:23,640 --> 00:16:26,449
where you do not want to feed
into that Lambda paradigm,

395
00:16:26,450 --> 00:16:28,570
or you have a programming language

396
00:16:28,570 --> 00:16:30,340
that is not supported by Lambda, that is,

397
00:16:30,340 --> 00:16:32,200
which is beyond Java, Node. js or Python,

398
00:16:32,200 --> 00:16:34,000
you might have something like a MATLAB,

399
00:16:34,000 --> 00:16:34,833
what do you do?

400
00:16:34,833 --> 00:16:36,719
You can Dockerize that as well,

401
00:16:36,720 --> 00:16:38,650
and then you can associate to Greengrass

402
00:16:38,650 --> 00:16:39,973
and push it to the Edge.

403
00:16:41,600 --> 00:16:43,793
So, how does it work?

404
00:16:45,270 --> 00:16:46,530
What do I do in the Cloud?

405
00:16:46,530 --> 00:16:47,839
And what do I do on the Edge?

406
00:16:47,840 --> 00:16:50,060
I'm confused, understood.

407
00:16:50,060 --> 00:16:50,892
So, let's see.

408
00:16:50,893 --> 00:16:52,250
So, what you'll do is,

409
00:16:52,250 --> 00:16:55,510
you will continue to
use your CI/CD pipeline,

410
00:16:55,510 --> 00:16:57,170
you will build your applications

411
00:16:57,170 --> 00:16:58,880
in the same way you do today,

412
00:16:58,880 --> 00:17:00,610
whether it's a Docker application,

413
00:17:00,610 --> 00:17:02,440
whether it's a Lambda on the Cloud,

414
00:17:02,440 --> 00:17:04,079
so you draw your Code coverage,

415
00:17:04,079 --> 00:17:07,319
you do your unit testing, you do your XIT,

416
00:17:07,319 --> 00:17:09,359
that everything that
happens today in your world

417
00:17:09,359 --> 00:17:10,919
can exist as it is.

418
00:17:10,920 --> 00:17:13,310
And once your Code is verified,

419
00:17:13,310 --> 00:17:16,389
and it's checked in into the final branch,

420
00:17:16,390 --> 00:17:19,040
from there, you can take all those images

421
00:17:19,040 --> 00:17:21,200
and associate it with Greengrass,

422
00:17:21,200 --> 00:17:24,380
now your Code can come from
different kind of repository.

423
00:17:24,380 --> 00:17:25,520
It could be Docker Hub,

424
00:17:25,520 --> 00:17:26,960
it could be a Private Docker repository,

425
00:17:26,960 --> 00:17:30,650
or it could be a Container
Registry provided by AWS.

426
00:17:30,650 --> 00:17:32,370
And then Greengrass,

427
00:17:32,370 --> 00:17:35,709
having all these resources
associated with it,

428
00:17:35,710 --> 00:17:38,720
can deploy over the year,
when you click the button,

429
00:17:38,720 --> 00:17:41,180
or trigger the script.

430
00:17:41,180 --> 00:17:43,790
And you can do any number of
tabs that's the beauty, right?

431
00:17:43,790 --> 00:17:46,720
You do not have to think
anymore that this is my hardware

432
00:17:46,720 --> 00:17:49,340
and this is outside the
Cloud and the data centers,

433
00:17:49,340 --> 00:17:51,129
I do not have access to.

434
00:17:51,130 --> 00:17:53,380
That is true if you do
not have connectivity,

435
00:17:53,380 --> 00:17:55,450
but if you do have the connectivity,

436
00:17:55,450 --> 00:17:59,360
you can deploy your security
patches, Codes, configurations

437
00:17:59,360 --> 00:18:01,629
as many times as you want,

438
00:18:01,630 --> 00:18:04,010
and that brings a whole agility.

439
00:18:04,010 --> 00:18:05,070
And guess what,

440
00:18:05,070 --> 00:18:06,649
like that each community,

441
00:18:06,650 --> 00:18:08,760
is growing by leaps and bounds

442
00:18:08,760 --> 00:18:11,900
so, you can get different
compatible hardwares,

443
00:18:11,900 --> 00:18:14,230
different solutions, the community support

444
00:18:14,230 --> 00:18:17,093
for production grade deployments as well.

445
00:18:18,600 --> 00:18:21,980
With that, let's switch gears
and talk about security.

446
00:18:21,980 --> 00:18:24,810
Security, is job zero at AWS,

447
00:18:24,810 --> 00:18:26,629
which means everything we do,

448
00:18:26,630 --> 00:18:28,710
starts with security.

449
00:18:28,710 --> 00:18:31,340
But there're two very important concepts

450
00:18:31,340 --> 00:18:32,290
that you should remember.

451
00:18:32,290 --> 00:18:35,520
The first one is, Shared
Responsibility Model,

452
00:18:35,520 --> 00:18:38,060
which states, security and compliance,

453
00:18:38,060 --> 00:18:41,943
is a shared responsibility
between AWS and the customer.

454
00:18:42,837 --> 00:18:46,030
AWS responsibility is
security of the Cloud.

455
00:18:46,030 --> 00:18:48,149
That means we're
responsible for protecting

456
00:18:48,150 --> 00:18:49,610
the infrastructure that runs

457
00:18:49,610 --> 00:18:52,490
all the services offered in AWS Cloud.

458
00:18:52,490 --> 00:18:54,740
The infrastructure is
composed of the hardware,

459
00:18:54,740 --> 00:18:57,820
the software, networking,
the physical data centers,

460
00:18:57,820 --> 00:18:59,610
that runs the Cloud services.

461
00:18:59,610 --> 00:19:03,340
And AWS is responsible for
managing the hypervisor,

462
00:19:03,340 --> 00:19:05,179
down to the data center.

463
00:19:05,180 --> 00:19:07,260
But your responsibility as a customer,

464
00:19:07,260 --> 00:19:10,010
is security in the Cloud,

465
00:19:10,010 --> 00:19:14,270
which means, customer
responsibility is determined

466
00:19:14,270 --> 00:19:17,490
by the Cloud services that you select

467
00:19:17,490 --> 00:19:20,333
that might include the
amount of configuration work,

468
00:19:20,333 --> 00:19:23,410
that you must perform as part
of a security responsibility.

469
00:19:23,410 --> 00:19:25,220
You might develop your applications,

470
00:19:25,220 --> 00:19:27,500
you will bring your own data.

471
00:19:27,500 --> 00:19:29,060
We give you all the tools,

472
00:19:29,060 --> 00:19:30,270
all the best practices,

473
00:19:30,270 --> 00:19:31,540
but at the end of the day,

474
00:19:31,540 --> 00:19:32,680
it's your application,

475
00:19:32,680 --> 00:19:33,840
it's your data,

476
00:19:33,840 --> 00:19:36,080
and you need to ensure
that you're aligning

477
00:19:36,080 --> 00:19:37,409
to those practices.

478
00:19:37,410 --> 00:19:40,300
So, how does it extend to IoT?

479
00:19:40,300 --> 00:19:41,710
With the IoT,

480
00:19:41,710 --> 00:19:44,980
we do not have the control
to your physical device,

481
00:19:44,980 --> 00:19:47,190
it's not in AWS data center,

482
00:19:47,190 --> 00:19:48,670
it's somewhere out there,

483
00:19:48,670 --> 00:19:50,510
in New York or Singapore.

484
00:19:50,510 --> 00:19:51,900
So, as a customer,

485
00:19:51,900 --> 00:19:54,860
you're responsible for
the physical component,

486
00:19:54,860 --> 00:19:58,490
and interface security
of your devices as well.

487
00:19:58,490 --> 00:20:00,270
We help you along the way, again,

488
00:20:00,270 --> 00:20:03,710
with all the different best
practices, tools, capabilities,

489
00:20:03,710 --> 00:20:05,270
that makes it easier for you,

490
00:20:05,270 --> 00:20:06,840
so you're not alone,

491
00:20:06,840 --> 00:20:08,340
but at the end of the day,

492
00:20:08,340 --> 00:20:10,540
you need to make those
well-informed decisions

493
00:20:10,540 --> 00:20:12,700
and align to those best practices.

494
00:20:12,700 --> 00:20:13,800
So, with those in mind,

495
00:20:13,800 --> 00:20:16,030
let's talk about Greengrass a little bit.

496
00:20:16,030 --> 00:20:19,360
So, Greengrass devices looks
like this, on the left,

497
00:20:19,360 --> 00:20:20,639
it will have all the components

498
00:20:20,640 --> 00:20:21,770
that you have seen before,

499
00:20:21,770 --> 00:20:23,303
but for security,

500
00:20:24,446 --> 00:20:26,719
it does a mutual art,

501
00:20:26,720 --> 00:20:28,460
using X.509 certificate.

502
00:20:28,460 --> 00:20:29,720
So, you need to ensure first,

503
00:20:29,720 --> 00:20:33,590
that all your certificates
and keys are well protected,

504
00:20:33,590 --> 00:20:35,939
all your private keys are well protected.

505
00:20:35,940 --> 00:20:37,710
So, that's where the recommendation is,

506
00:20:37,710 --> 00:20:40,630
you should use some
kind of a HSM solution,

507
00:20:40,630 --> 00:20:42,720
use a PKCS interface,

508
00:20:42,720 --> 00:20:45,320
and retrieve the keys in an ephemeral way

509
00:20:45,320 --> 00:20:46,520
from time to time,

510
00:20:46,520 --> 00:20:49,790
it should not be sitting
on the file system

511
00:20:49,790 --> 00:20:52,000
in clear text, right?

512
00:20:52,000 --> 00:20:53,530
And then when Greengrass,

513
00:20:53,530 --> 00:20:55,860
as a gateway talks to the Cloud,

514
00:20:55,860 --> 00:20:59,719
it uses TLS Encryption as
well to send all the messages.

515
00:20:59,720 --> 00:21:03,270
So, your communication
is protected end to end,

516
00:21:03,270 --> 00:21:04,493
when in transit.

517
00:21:06,520 --> 00:21:08,540
Okay, so what happens in the
Cloud that's on the Edge?

518
00:21:08,540 --> 00:21:11,170
So, on the Cloud every Greengrass group,

519
00:21:11,170 --> 00:21:12,890
and I will show you in the demo,

520
00:21:12,890 --> 00:21:16,470
every Greengrass group is
associated with a role.

521
00:21:16,470 --> 00:21:18,470
So, it's a IAM role,

522
00:21:18,470 --> 00:21:20,900
if you're aware of Identity
and Access Management,

523
00:21:20,900 --> 00:21:24,560
that authorizes IoT Greengrass
to access resources,

524
00:21:24,560 --> 00:21:27,210
from AWS services on behalf of the device.

525
00:21:27,210 --> 00:21:29,010
This makes it possible for Greengrass

526
00:21:29,010 --> 00:21:30,550
to perform essential tasks,

527
00:21:30,550 --> 00:21:32,750
such as, retrieving your Lambda functions,

528
00:21:32,750 --> 00:21:35,060
interacting with other
services and whatnot.

529
00:21:35,060 --> 00:21:36,470
And with all the applications,

530
00:21:36,470 --> 00:21:39,210
whether it's Lambda or
container on the Edge,

531
00:21:39,210 --> 00:21:41,480
how do you manage the configuration,

532
00:21:41,480 --> 00:21:43,370
the endpoints securely?

533
00:21:43,370 --> 00:21:44,419
So, not just the keys,

534
00:21:44,420 --> 00:21:45,960
what about the rest of the stuff?

535
00:21:45,960 --> 00:21:49,370
That's where Greengrass secret
manager helps you as well.

536
00:21:49,370 --> 00:21:52,129
And finally, you can
create security profiles

537
00:21:52,130 --> 00:21:54,170
with IoT Device Defender,

538
00:21:54,170 --> 00:21:57,410
which is our security
service in the Cloud,

539
00:21:57,410 --> 00:21:58,939
and that extends to the Edge.

540
00:21:58,939 --> 00:22:00,560
So, you build a security profile,

541
00:22:00,560 --> 00:22:02,929
that can capture Device-side metrics,

542
00:22:02,930 --> 00:22:04,350
and Cloud-side metrics,

543
00:22:04,350 --> 00:22:05,969
so you can collect metrics like,

544
00:22:05,970 --> 00:22:08,370
Packets size, Bytes C and Bytes out,

545
00:22:08,370 --> 00:22:11,399
with the Cloud, you can
measure like the Auth_failures,

546
00:22:11,400 --> 00:22:12,930
increase message size,

547
00:22:12,930 --> 00:22:17,080
and thus, you can continuously
audit your IoT workloads

548
00:22:17,080 --> 00:22:19,439
that spans from the Edge to the Cloud,

549
00:22:19,440 --> 00:22:22,330
and you can even build an
automated mitigation pipeline.

550
00:22:22,330 --> 00:22:25,710
So, DevSecOps pipeline for anomalies

551
00:22:25,710 --> 00:22:27,870
that is detected on the Edge,

552
00:22:27,870 --> 00:22:30,303
and it's kind of mitigated
in near real time.

553
00:22:31,340 --> 00:22:32,500
If you went to re:Invent,

554
00:22:32,500 --> 00:22:33,530
you might have seen

555
00:22:34,570 --> 00:22:39,020
our shuttles and you
have used that probably,

556
00:22:39,020 --> 00:22:42,730
from going from one resort

557
00:22:42,730 --> 00:22:43,563
to another resort.

558
00:22:43,563 --> 00:22:44,680
It's our yearly conference,

559
00:22:44,680 --> 00:22:47,240
by the way for people who are
not familiar with re:Invent.

560
00:22:47,240 --> 00:22:48,600
And what we did here,

561
00:22:48,600 --> 00:22:50,270
you can see on the picture,

562
00:22:50,270 --> 00:22:52,660
we had Greengrass in the middle,

563
00:22:52,660 --> 00:22:55,153
on top of Intel Logic Supply hardware,

564
00:22:55,153 --> 00:22:58,740
that we just collecting all
the different camera data,

565
00:22:58,740 --> 00:23:00,320
video data and showing it,

566
00:23:00,320 --> 00:23:02,300
not only in a local dashboard,

567
00:23:02,300 --> 00:23:05,060
but also sending the data from
time to time to the Cloud,

568
00:23:05,060 --> 00:23:08,270
so you can access it from
your mobile application.

569
00:23:08,270 --> 00:23:10,873
What is my wait time for the New York bus?

570
00:23:13,740 --> 00:23:17,160
Okay, so we talked about development.

571
00:23:17,160 --> 00:23:20,330
So, you can build all this
Lambdas, all the containers,

572
00:23:20,330 --> 00:23:22,949
you can deploy it onto the Edge,

573
00:23:22,950 --> 00:23:23,940
in a jagged fashion.

574
00:23:23,940 --> 00:23:27,240
We talked about the security
on the Edge onto the Cloud.

575
00:23:27,240 --> 00:23:29,000
And now, what about operations,

576
00:23:29,000 --> 00:23:31,520
because technology fails all the time,

577
00:23:31,520 --> 00:23:33,889
so it's important for you to monitor

578
00:23:33,890 --> 00:23:36,550
an operative workload security as well.

579
00:23:36,550 --> 00:23:39,330
How do you monitor your
SICK fleet of devices?

580
00:23:39,330 --> 00:23:42,889
So, AWS IoT, and AWS as a whole,

581
00:23:42,890 --> 00:23:45,010
gives you different services

582
00:23:45,010 --> 00:23:47,490
to monitor your workloads.

583
00:23:47,490 --> 00:23:50,750
Example, Events are generated
by the Device Registry,

584
00:23:50,750 --> 00:23:52,570
when you create new things.

585
00:23:52,570 --> 00:23:53,470
In the data plane,

586
00:23:53,470 --> 00:23:55,620
you can collect different
Logs and Metrices

587
00:23:55,620 --> 00:23:56,699
using AWS Cloudwatch,

588
00:23:56,700 --> 00:23:58,470
which is our monitoring service.

589
00:23:58,470 --> 00:24:00,080
For the control plane,

590
00:24:00,080 --> 00:24:02,320
if you need to have all the API Logs,

591
00:24:02,320 --> 00:24:04,129
you can access that as well.

592
00:24:04,130 --> 00:24:04,963
We give you different kind

593
00:24:04,963 --> 00:24:07,000
of operational dashboards out of the box,

594
00:24:07,000 --> 00:24:09,660
and you can create your
customized version as well.

595
00:24:09,660 --> 00:24:11,290
Now, you're doing all these operations,

596
00:24:11,290 --> 00:24:14,970
then how do you send it to the devices?

597
00:24:14,970 --> 00:24:17,103
Well, that's where OTA helps,

598
00:24:17,103 --> 00:24:19,050
and OTA is not just for one device,

599
00:24:19,050 --> 00:24:22,863
you can have bulk updates
to all your devices,

600
00:24:22,863 --> 00:24:23,960
that is on the field,

601
00:24:23,960 --> 00:24:26,800
although you should consider
deployment velocity,

602
00:24:26,800 --> 00:24:29,050
like 5% of my field is successful,

603
00:24:29,050 --> 00:24:31,550
now let me do the 10%
rather than doing a big bug.

604
00:24:33,850 --> 00:24:36,480
Okay, connectors we
touched upon it lightly,

605
00:24:36,480 --> 00:24:37,420
but as the end says,

606
00:24:37,420 --> 00:24:38,950
you can connect to different services,

607
00:24:38,950 --> 00:24:40,360
the simple configuration,

608
00:24:40,360 --> 00:24:42,550
whether it's Device Defender
that we just talked,

609
00:24:42,550 --> 00:24:45,850
Cloudwatch or third
party services as well,

610
00:24:45,850 --> 00:24:47,199
Twilio, Splunk, ServiceNow.

611
00:24:49,100 --> 00:24:51,790
If you have those parts
of your enterprise,

612
00:24:51,790 --> 00:24:54,170
you can easily connect
them from the Greengrass,

613
00:24:54,170 --> 00:24:57,270
without writing a piece of
code to the solutions as well.

614
00:24:57,270 --> 00:25:01,460
Okay, so seeing is believing.

615
00:25:01,460 --> 00:25:05,370
So, I want to show you what
I have been preaching so far.

616
00:25:05,370 --> 00:25:07,959
So, you can see this Edge
to Cloud Architecture,

617
00:25:07,960 --> 00:25:10,140
where there is a sensors

618
00:25:10,140 --> 00:25:12,250
and lot of data is being simulated,

619
00:25:12,250 --> 00:25:15,500
and it is going through a
Lambda functions on the Edge.

620
00:25:15,500 --> 00:25:18,200
So, the left side of the
screen is all Greengrass,

621
00:25:18,200 --> 00:25:20,360
and it will be in the physical world,

622
00:25:20,360 --> 00:25:22,320
in the real world, this is a device.

623
00:25:22,320 --> 00:25:24,399
And on the right side, you see the Cloud,

624
00:25:24,400 --> 00:25:27,100
that's where the data is
being sent from time to time,

625
00:25:27,100 --> 00:25:29,043
to its Data Link for
different other purposes like,

626
00:25:29,043 --> 00:25:31,409
analytics, machine learning and whatnot.

627
00:25:31,410 --> 00:25:33,240
So, what I will plan to show you,

628
00:25:33,240 --> 00:25:35,390
is how we can automate

629
00:25:35,390 --> 00:25:40,390
this entire solution using
DevSecOps principles.

630
00:25:42,370 --> 00:25:44,129
So, how does it work?

631
00:25:44,130 --> 00:25:46,240
Let me quickly show you.

632
00:25:46,240 --> 00:25:48,860
So, you have the link to a GitHub,

633
00:25:48,860 --> 00:25:51,909
and you can play with this on your own,

634
00:25:51,910 --> 00:25:53,660
but very quickly,

635
00:25:53,660 --> 00:25:55,430
the only thing that you need to do,

636
00:25:55,430 --> 00:25:58,160
you need to essentially
clone a Git repository,

637
00:25:58,160 --> 00:26:01,000
and then you need to run a NPM command,

638
00:26:01,000 --> 00:26:02,670
and do a CDQ deploy.

639
00:26:02,670 --> 00:26:04,520
And what that will do for you,

640
00:26:04,520 --> 00:26:07,150
it will create a Cloud formation stack.

641
00:26:07,150 --> 00:26:09,480
And a Cloud formation is
essentially a template,

642
00:26:09,480 --> 00:26:11,360
it's infrastructure has a code,

643
00:26:11,360 --> 00:26:13,370
where all the resources are defined,

644
00:26:13,370 --> 00:26:16,310
starting from S3 and Greengrass,

645
00:26:16,310 --> 00:26:20,590
and all the components that
you see in the architecture,

646
00:26:20,590 --> 00:26:22,470
from Edge to the Cloud,

647
00:26:22,470 --> 00:26:25,460
is stored in this template.

648
00:26:25,460 --> 00:26:28,170
So, one template, you deploy, boom,

649
00:26:28,170 --> 00:26:30,260
your interim solution is running.

650
00:26:30,260 --> 00:26:31,600
Now, in the real world,

651
00:26:31,600 --> 00:26:34,679
you have to do a one time setup
of configuring your device,

652
00:26:34,680 --> 00:26:37,720
because it will come from
the manufacturing facility,

653
00:26:37,720 --> 00:26:40,250
versus a simulated world
which I'm going to do it now.

654
00:26:40,250 --> 00:26:42,860
But after that, you
will do the same process

655
00:26:42,860 --> 00:26:44,310
that I show you here,

656
00:26:44,310 --> 00:26:46,500
of automating your interim resources

657
00:26:46,500 --> 00:26:49,030
and finally deployment Over-the-Air

658
00:26:49,030 --> 00:26:50,480
So with cloud formation,

659
00:26:50,480 --> 00:26:52,560
this stack is created
in the interest of time,

660
00:26:52,560 --> 00:26:55,470
I created it for you in advance

661
00:26:55,470 --> 00:26:57,980
and each creates different certificates,

662
00:26:57,980 --> 00:26:59,690
it gives me different end points,

663
00:26:59,690 --> 00:27:02,320
that has been embedded
onto the device as well.

664
00:27:02,320 --> 00:27:05,159
And then on the IoT console now,

665
00:27:05,160 --> 00:27:07,150
you see Greengrass as an option,

666
00:27:07,150 --> 00:27:10,620
and this Greengrass group is created.

667
00:27:10,620 --> 00:27:12,870
And with Greengrass group,
the different concept

668
00:27:12,870 --> 00:27:14,500
that I was explaining earlier

669
00:27:14,500 --> 00:27:16,520
like you have different routing rules,

670
00:27:16,520 --> 00:27:18,139
that we call the subscriptions,

671
00:27:18,140 --> 00:27:20,150
to ensure that the data
is being communicated

672
00:27:20,150 --> 00:27:21,760
from one place to the other,

673
00:27:21,760 --> 00:27:23,010
you have different Lambdas,

674
00:27:23,010 --> 00:27:24,700
you can see I have multiple Lambdas here,

675
00:27:24,700 --> 00:27:26,590
as well as in the architecture as well,

676
00:27:26,590 --> 00:27:28,610
there are different
other kinds of resources,

677
00:27:28,610 --> 00:27:30,070
I have not used much here,

678
00:27:30,070 --> 00:27:31,560
and connectors as well,

679
00:27:31,560 --> 00:27:33,639
because I've also deployed

680
00:27:33,640 --> 00:27:36,310
Docker application Deployment Manager.

681
00:27:36,310 --> 00:27:39,740
So, with that the demo
is kind of running here,

682
00:27:39,740 --> 00:27:41,210
that you can see,

683
00:27:41,210 --> 00:27:42,880
this is a console on the left side,

684
00:27:42,880 --> 00:27:44,910
you can see that my devices

685
00:27:44,910 --> 00:27:46,520
are storing all the certificates,

686
00:27:46,520 --> 00:27:48,730
which are needed for the mutual art

687
00:27:48,730 --> 00:27:49,970
from Greengrass to the Cloud.

688
00:27:49,970 --> 00:27:51,870
Now, it's in the file system,

689
00:27:51,870 --> 00:27:53,070
that's because it's a demo,

690
00:27:53,070 --> 00:27:54,599
but in the ideal world,

691
00:27:54,599 --> 00:27:56,450
you will have a hardware
which will have a HSM

692
00:27:56,450 --> 00:28:00,320
and that will store your
private keys and certificates.

693
00:28:00,320 --> 00:28:02,010
The configuration will look like this,

694
00:28:02,010 --> 00:28:04,570
this is what the Greengrass software uses

695
00:28:04,570 --> 00:28:06,409
to talk to an endpoint

696
00:28:06,410 --> 00:28:08,980
and perform different operations,

697
00:28:08,980 --> 00:28:10,400
on the file system as well.

698
00:28:10,400 --> 00:28:11,750
And finally, at the bottom,

699
00:28:11,750 --> 00:28:16,470
you see the Log of data
being sent from the Edge,

700
00:28:16,470 --> 00:28:17,990
to the Cloud.

701
00:28:17,990 --> 00:28:21,730
Also, there's one more application here.

702
00:28:26,150 --> 00:28:28,770
Let me move this guy, okay,

703
00:28:28,770 --> 00:28:30,810
this is the Docker Container console

704
00:28:30,810 --> 00:28:31,760
that is running locally.

705
00:28:31,760 --> 00:28:33,520
So, web server running locally.

706
00:28:33,520 --> 00:28:35,910
So, if you have applications on the Edge,

707
00:28:35,910 --> 00:28:37,620
you will probably have dashboards as well,

708
00:28:37,620 --> 00:28:39,699
and we want to run the containers locally,

709
00:28:39,700 --> 00:28:40,960
so this is that field.

710
00:28:40,960 --> 00:28:42,360
And finally, on the Cloud side,

711
00:28:42,360 --> 00:28:45,770
the data is being streamed
from the Edge to the Cloud,

712
00:28:45,770 --> 00:28:47,420
for different services like IoT Analytics,

713
00:28:47,420 --> 00:28:50,400
where you can see a real time preview

714
00:28:50,400 --> 00:28:52,120
of all the SQL queries,

715
00:28:52,120 --> 00:28:55,110
and also the Kinesis Analytics

716
00:28:55,110 --> 00:28:56,840
where you can do different
kind of, you know,

717
00:28:56,840 --> 00:28:59,610
animal detection that you can see here.

718
00:28:59,610 --> 00:29:02,870
So, wrapping it up, summarizing,

719
00:29:02,870 --> 00:29:05,550
what I showed you from
the Edge to the Cloud,

720
00:29:05,550 --> 00:29:06,680
you have different components

721
00:29:06,680 --> 00:29:07,570
on the Edge running,

722
00:29:07,570 --> 00:29:09,990
starting from Lambda, and containers,

723
00:29:09,990 --> 00:29:12,010
all this data is being aggregated

724
00:29:12,010 --> 00:29:13,540
and finally pushed to cloud,

725
00:29:13,540 --> 00:29:16,680
where different services like
IoT Analytics and Kinesis,

726
00:29:16,680 --> 00:29:18,220
is processing the data, again,

727
00:29:18,220 --> 00:29:19,910
to store into a data link,

728
00:29:19,910 --> 00:29:21,730
which is finally consumed to QuickSight

729
00:29:21,730 --> 00:29:23,073
which is a BI solution.

730
00:29:25,150 --> 00:29:26,870
And get your hands dirty.

731
00:29:26,870 --> 00:29:28,350
So, the GitHub link is here,

732
00:29:28,350 --> 00:29:29,850
you can try it yourself.

733
00:29:29,850 --> 00:29:31,090
So, what did we learn?

734
00:29:31,090 --> 00:29:33,780
DevSecOps is not a myth,

735
00:29:33,780 --> 00:29:36,410
you can build an into
ans automation pipeline,

736
00:29:36,410 --> 00:29:37,950
for IoT workloads,

737
00:29:37,950 --> 00:29:39,350
you can use different kind of tools,

738
00:29:39,350 --> 00:29:40,639
such as CloudFormation,

739
00:29:40,640 --> 00:29:42,360
other CI/CD services,

740
00:29:42,360 --> 00:29:44,610
security features are
built into every step,

741
00:29:44,610 --> 00:29:46,820
starting from the IAM roles on the Cloud,

742
00:29:46,820 --> 00:29:48,450
with TLS, one to two,

743
00:29:48,450 --> 00:29:51,090
mutual auth for the device to communicate,

744
00:29:51,090 --> 00:29:54,149
hardware specific features like HSM,

745
00:29:54,150 --> 00:29:55,530
with PKCS integration,

746
00:29:55,530 --> 00:29:58,120
and hundreds of certified
security certifications

747
00:29:58,120 --> 00:30:00,290
that we have more than anyone else,

748
00:30:00,290 --> 00:30:04,100
for you to manage and operate
your devices at scale.

749
00:30:04,100 --> 00:30:06,139
Now, I often hear this question,

750
00:30:06,140 --> 00:30:09,950
how do I learn more
about AWS IoT services?

751
00:30:09,950 --> 00:30:12,010
We have developed a training library,

752
00:30:12,010 --> 00:30:14,550
so you can take this free trainings,

753
00:30:14,550 --> 00:30:16,610
either in AWS training library,

754
00:30:16,610 --> 00:30:19,699
or on the edx.org site as well,

755
00:30:19,700 --> 00:30:22,250
which also gives you a
certification if you pay them,

756
00:30:22,250 --> 00:30:25,130
and then, we have built
all this different kind

757
00:30:25,130 --> 00:30:27,340
of cool hardwares for you to play with.

758
00:30:27,340 --> 00:30:29,112
Like we have the Deepress
and we have the DeepLens,

759
00:30:29,113 --> 00:30:30,460
that you can play with.

760
00:30:30,460 --> 00:30:31,577
If you do not want them,

761
00:30:31,577 --> 00:30:34,460
you can always start with a Raspberry Pi.

762
00:30:34,460 --> 00:30:36,970
And for production grade applications,

763
00:30:36,970 --> 00:30:38,140
production grade devices,

764
00:30:38,140 --> 00:30:40,050
we also have a device catalog,

765
00:30:40,050 --> 00:30:42,669
with partners such as NXP and Microchip,

766
00:30:42,670 --> 00:30:44,560
and Qualcomm and all the big names

767
00:30:44,560 --> 00:30:48,120
where you can go and choose
your preferred vendor.

768
00:30:48,120 --> 00:30:51,629
With that, the world is
changing more than ever,

769
00:30:51,630 --> 00:30:53,820
today, we need to run our businesses,

770
00:30:53,820 --> 00:30:56,980
and life using technology as an enabler.

771
00:30:56,980 --> 00:30:58,010
And as a developer,

772
00:30:58,010 --> 00:30:59,720
we have a lot to do as a builder,

773
00:30:59,720 --> 00:31:00,740
we have a lot to do.

774
00:31:00,740 --> 00:31:02,240
And I can't wait,

775
00:31:02,240 --> 00:31:05,320
to see what innovative IoT applications,

776
00:31:05,320 --> 00:31:08,659
you will develop in the
future using Edge and Cloud.

777
00:31:08,660 --> 00:31:10,230
It's just day one guys,

778
00:31:10,230 --> 00:31:13,110
and there is so much more we have to do.

779
00:31:13,110 --> 00:31:14,870
We want to help double your experiments,

780
00:31:14,870 --> 00:31:16,169
double your inventiveness,

781
00:31:17,392 --> 00:31:21,060
as your success will surely
make the whole world successful.

782
00:31:21,060 --> 00:31:22,700
With that, thank you,

783
00:31:22,700 --> 00:31:24,253
stay safe and take care.

