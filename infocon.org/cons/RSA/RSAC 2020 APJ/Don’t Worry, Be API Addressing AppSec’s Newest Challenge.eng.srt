1
00:00:09,251 --> 00:00:11,834
(upbeat music)

2
00:00:36,270 --> 00:00:40,080
- Hello and welcome to Don't Worry, Be API

3
00:00:40,080 --> 00:00:43,040
Addressing AppSec's Newest Challenge.

4
00:00:43,040 --> 00:00:44,910
If you're joining us
live, our speaker is in

5
00:00:44,910 --> 00:00:47,930
the flutter discussion answering
your questions right now.

6
00:00:47,930 --> 00:00:49,400
For audio or video issues,

7
00:00:49,400 --> 00:00:52,290
please click the technical
support button below.

8
00:00:52,290 --> 00:00:53,370
I'd now like to turn it over to

9
00:00:53,370 --> 00:00:54,919
Erez Yalon with a presentation.

10
00:00:57,660 --> 00:00:59,260
- Thank you very much Ellie.

11
00:00:59,260 --> 00:01:00,330
Really happy to be here.

12
00:01:00,330 --> 00:01:02,010
And thank you all for joining me

13
00:01:02,010 --> 00:01:04,319
during the same trying times.

14
00:01:04,319 --> 00:01:07,339
It's great to be again in RSA Conference.

15
00:01:07,340 --> 00:01:09,190
Okay, so let's start with a question.

16
00:01:12,170 --> 00:01:16,060
The question is, what do all
these companies have in common?

17
00:01:16,060 --> 00:01:20,363
So I'm pretty sure some of you
have several answers to that.

18
00:01:21,850 --> 00:01:24,130
I'll give you another second.

19
00:01:24,130 --> 00:01:26,060
If you answered all of
them had some sort of

20
00:01:26,060 --> 00:01:28,283
API security issues.

21
00:01:29,600 --> 00:01:31,289
That was the right answer.

22
00:01:31,290 --> 00:01:36,290
And if your answer was they
had API security issues,

23
00:01:37,810 --> 00:01:39,630
recently, in the last few months,

24
00:01:39,630 --> 00:01:42,660
then your answer was even correct.

25
00:01:42,660 --> 00:01:44,643
So what is it about API security

26
00:01:44,643 --> 00:01:47,113
that makes everyone so vulnerable?

27
00:01:48,090 --> 00:01:49,010
Let's see.

28
00:01:49,010 --> 00:01:52,410
Let's start with defining
what API security is.

29
00:01:52,410 --> 00:01:55,229
This is how we start things.

30
00:01:55,230 --> 00:01:58,610
So we go for Wikipedia,
we see that an API is

31
00:01:58,610 --> 00:02:00,733
an application programming interface.

32
00:02:01,940 --> 00:02:03,950
It's an interface or
communication protocol

33
00:02:03,950 --> 00:02:06,060
between a client and a server.

34
00:02:06,060 --> 00:02:07,570
So far so good.

35
00:02:07,570 --> 00:02:11,200
These days, we use the
client and server terms

36
00:02:11,200 --> 00:02:12,530
in the border way.

37
00:02:12,530 --> 00:02:17,450
So basically, we mean that
the API is the interface

38
00:02:17,450 --> 00:02:18,600
or communication protocol

39
00:02:18,600 --> 00:02:22,049
between every component in our system.

40
00:02:22,050 --> 00:02:26,550
So each component wanting
to talk to another component

41
00:02:26,550 --> 00:02:30,003
will be using an API.

42
00:02:31,320 --> 00:02:36,109
So who uses APIs and what
uses them which technologies?

43
00:02:36,110 --> 00:02:40,490
The quick answer is everyone, everybody.

44
00:02:40,490 --> 00:02:43,200
We can see that every modern
application these days,

45
00:02:43,200 --> 00:02:48,200
uses APIs, definitely
microservices and mobile and IoT,

46
00:02:50,590 --> 00:02:53,960
B2B, serverless everything that is cloud

47
00:02:53,960 --> 00:02:57,510
and today we see a lot of
single page applications.

48
00:02:57,510 --> 00:03:02,049
These are all using APIs.

49
00:03:02,050 --> 00:03:04,550
So we love APIs we use them

50
00:03:04,550 --> 00:03:08,523
and they are the beating
heart of modern application.

51
00:03:09,780 --> 00:03:11,780
What is the difference between traditional

52
00:03:11,780 --> 00:03:12,810
and modern application?

53
00:03:12,810 --> 00:03:16,010
Why am I saying that we need to put a bit

54
00:03:16,010 --> 00:03:18,540
more emphasis on those security?

55
00:03:18,540 --> 00:03:21,640
And what is the knowledge
gap we have today?

56
00:03:21,640 --> 00:03:25,779
So let's start by comparing
traditional applications

57
00:03:25,780 --> 00:03:27,410
to modern applications.

58
00:03:27,410 --> 00:03:30,260
So let's start with what is similar.

59
00:03:30,260 --> 00:03:33,359
The similarities are
users that are interacting

60
00:03:33,360 --> 00:03:35,260
with some sort of client.

61
00:03:35,260 --> 00:03:38,220
When in traditional
applications we used to have

62
00:03:38,220 --> 00:03:43,220
one specific client it
was usually a web browser.

63
00:03:43,630 --> 00:03:46,810
Obviously these days
with modern application,

64
00:03:46,810 --> 00:03:48,610
it doesn't have to be
a web browser anymore.

65
00:03:48,610 --> 00:03:52,730
It can be a smartwatch, a scooter.

66
00:03:52,730 --> 00:03:56,726
It can be a mobile phone, it
can be another B2B component,

67
00:03:58,640 --> 00:04:01,190
small toaster, you name it.

68
00:04:01,190 --> 00:04:06,190
So the second part that is
similar is the connection

69
00:04:06,380 --> 00:04:09,722
between the server and the database.

70
00:04:09,723 --> 00:04:14,723
The server, will request
some data from the database,

71
00:04:15,490 --> 00:04:18,430
and will expect to get the data back.

72
00:04:18,430 --> 00:04:23,430
Now the difference here lies
in the database itself which

73
00:04:23,650 --> 00:04:27,880
in traditional application,
it used to be more of SQLi.

74
00:04:27,880 --> 00:04:31,719
And now we see more no
SQLi elastic, etcetera.

75
00:04:31,720 --> 00:04:35,620
And also the server that used
to be a traditional server

76
00:04:35,620 --> 00:04:37,940
as we know it today does
not really have to be

77
00:04:37,940 --> 00:04:38,840
an actual server.

78
00:04:38,840 --> 00:04:41,789
It can be a cluster of microservices,

79
00:04:41,790 --> 00:04:43,820
or any other thing that functions

80
00:04:43,820 --> 00:04:45,283
as a server as the back end.

81
00:04:47,600 --> 00:04:52,090
So here comes the difference
when our client needs

82
00:04:53,450 --> 00:04:57,250
to show a page, for example to a user

83
00:04:57,250 --> 00:04:59,320
in a traditional application.

84
00:04:59,320 --> 00:05:03,082
There is a GET request that
being sent to the server,

85
00:05:03,083 --> 00:05:07,550
the server will turn on the
logic will gather all the

86
00:05:07,550 --> 00:05:10,730
information, render a full HTML page

87
00:05:10,730 --> 00:05:12,743
and return it to the browser.

88
00:05:13,950 --> 00:05:16,460
As we said, these days, the browser is not

89
00:05:16,460 --> 00:05:18,450
a single client possible.

90
00:05:18,450 --> 00:05:21,719
There are many, many possibilities
for clients with more

91
00:05:21,720 --> 00:05:24,200
and more joining us every day.

92
00:05:24,200 --> 00:05:25,979
So it's a bit different.

93
00:05:25,980 --> 00:05:30,950
Now we have the client, just
asking the server for specific

94
00:05:30,950 --> 00:05:35,719
bits of data, we get a
series of API GET requests,

95
00:05:35,720 --> 00:05:38,520
the server will aggregate
all the information

96
00:05:38,520 --> 00:05:43,520
and send back just the raw data
and sometimes raw parameters

97
00:05:43,610 --> 00:05:47,980
and we expect the client to
arrange them and filter them

98
00:05:47,980 --> 00:05:50,640
and put them the way
they're supposed to be

99
00:05:50,640 --> 00:05:52,853
and to show what they're supposed to show.

100
00:05:54,541 --> 00:05:58,320
This is a very significant
difference because it means that

101
00:05:58,320 --> 00:06:01,163
the logic phase is on the client side.

102
00:06:03,310 --> 00:06:07,490
Another difference is abstraction
layers, we can see that

103
00:06:07,490 --> 00:06:11,430
there are less abstraction
layers, and the client and server

104
00:06:11,430 --> 00:06:15,170
and database actually speak
the same JSON language,

105
00:06:15,170 --> 00:06:20,170
we see that every part
can be used by sending

106
00:06:20,290 --> 00:06:24,690
and receiving JSON,
which makes it very flat.

107
00:06:24,690 --> 00:06:25,523
Let's see.

108
00:06:27,550 --> 00:06:29,910
So what makes APIs vulnerable?

109
00:06:29,910 --> 00:06:34,910
There are three different
reasons that we can look at.

110
00:06:36,210 --> 00:06:39,469
The first one is the abundancy
of API endpoints that make

111
00:06:39,470 --> 00:06:42,400
the attack surface much bigger.

112
00:06:42,400 --> 00:06:46,510
So if in the past in a traditional
application in order to

113
00:06:47,360 --> 00:06:51,650
get to a database, I had
to go through module A

114
00:06:51,650 --> 00:06:55,890
that was in charge of
authentication and authorization,

115
00:06:55,890 --> 00:07:00,039
for example, and only then go to B, and C.

116
00:07:00,040 --> 00:07:03,630
Maybe these days, I can try
and hack myself in through

117
00:07:03,630 --> 00:07:07,670
module H that also connects or exposed

118
00:07:07,670 --> 00:07:10,430
to the API of module B.

119
00:07:10,430 --> 00:07:13,810
So we can see that the
endpoints are out there,

120
00:07:16,090 --> 00:07:17,989
sometimes in the open and they make

121
00:07:17,990 --> 00:07:20,400
the attack surface bigger.

122
00:07:20,400 --> 00:07:24,210
The second reason is that
clients consume raw data.

123
00:07:24,210 --> 00:07:26,979
And we saw that more parameters are sent

124
00:07:26,980 --> 00:07:28,330
in each HTTP request.

125
00:07:28,330 --> 00:07:31,460
Sometimes it's object ID's
and values and filters

126
00:07:31,460 --> 00:07:34,972
and whatnot, we just see raw
data flying through the air.

127
00:07:36,470 --> 00:07:38,870
When component one here
sends this information

128
00:07:38,870 --> 00:07:42,100
to component two, then
component one may be sure that

129
00:07:42,100 --> 00:07:45,490
component two is inside the network

130
00:07:45,490 --> 00:07:48,960
or inside the organization
and is protected.

131
00:07:48,960 --> 00:07:53,330
So maybe they would send
some sensitive data,

132
00:07:53,330 --> 00:07:56,240
but component one does not
know that component two

133
00:07:56,240 --> 00:08:00,040
will use this for example
sensitive object to be sent

134
00:08:00,040 --> 00:08:01,830
outside to component three.

135
00:08:01,830 --> 00:08:06,609
And it's very, very easy
to loose the destination

136
00:08:06,610 --> 00:08:11,610
of sensitive data when you
have a complicated networks of

137
00:08:12,030 --> 00:08:14,852
APIs, microservices, etcetera.

138
00:08:16,790 --> 00:08:21,240
The third reason is a is
DevOps or DevSecOps these days.

139
00:08:22,430 --> 00:08:26,893
DevSecOps became so
flexible, so efficient,

140
00:08:28,980 --> 00:08:32,448
almost too fast to handle, we
see that the flexibility of

141
00:08:32,448 --> 00:08:35,569
CI/CD processes are getting more and more

142
00:08:35,570 --> 00:08:36,913
efficient and quicker.

143
00:08:37,929 --> 00:08:41,030
It's almost effortless to
deploy a new microservice,

144
00:08:41,030 --> 00:08:44,410
new containers, cloud
infrastructure, full sets

145
00:08:44,410 --> 00:08:46,113
and versions of APIs.

146
00:08:47,307 --> 00:08:49,557
And it's very, very easy
to deploy and forget

147
00:08:50,576 --> 00:08:54,970
and to keep these APIs just
floating without no one

148
00:08:56,050 --> 00:08:57,740
remembering what they did

149
00:08:57,740 --> 00:08:59,873
and that they will actually there.

150
00:09:01,427 --> 00:09:05,850
So, I'm guess by now
you're thinking, oh, no!

151
00:09:05,850 --> 00:09:08,290
What did we do with APIs?

152
00:09:08,290 --> 00:09:09,490
So it's not all bad.

153
00:09:09,490 --> 00:09:11,040
It's not all bad news.

154
00:09:11,040 --> 00:09:13,360
We know that traditional
vulnerabilities are less common

155
00:09:13,360 --> 00:09:17,910
these days in API-based apps,
we see that injections like

156
00:09:17,910 --> 00:09:21,850
SQLi injections are less and less common.

157
00:09:21,850 --> 00:09:24,511
This is thanks to
increasing use of frameworks

158
00:09:24,511 --> 00:09:26,512
and ORMs, etcetera.

159
00:09:27,520 --> 00:09:30,490
We see that cross-site request forgery

160
00:09:30,490 --> 00:09:32,607
are less common also.

161
00:09:32,607 --> 00:09:35,050
This is thanks to the
authorization headers

162
00:09:35,050 --> 00:09:37,500
are used instead of cookies.

163
00:09:37,500 --> 00:09:41,700
Other things that we see less
common are path manipulations,

164
00:09:41,700 --> 00:09:44,440
for example, because
more and more storage is

165
00:09:44,440 --> 00:09:45,820
cloud-based these days.

166
00:09:45,820 --> 00:09:48,290
Now, I'm not saying that path manipulation

167
00:09:48,290 --> 00:09:49,640
is not a thing on the cloud.

168
00:09:49,640 --> 00:09:53,100
It is a thing, but it is
definitely less common

169
00:09:53,100 --> 00:09:56,493
and also usually less severe
because it's contained.

170
00:09:57,380 --> 00:10:01,020
And in general, a lot of
classic IT security issues are

171
00:10:01,020 --> 00:10:02,829
being solved slowly.

172
00:10:02,830 --> 00:10:07,800
But surely, we have
different SaaS approaches.

173
00:10:07,800 --> 00:10:10,223
So as I said, it's not all bad news.

174
00:10:12,380 --> 00:10:14,090
How do you bridge this gap?

175
00:10:14,090 --> 00:10:18,580
So I work in Checkmarx and
we see every day a lot of

176
00:10:18,580 --> 00:10:22,690
mistakes that are being
introduced into code.

177
00:10:22,690 --> 00:10:27,690
And together with the migration
of the technology towards

178
00:10:28,770 --> 00:10:33,770
APIs and microservices,
we also saw the mistakes,

179
00:10:34,680 --> 00:10:39,260
obviously the security mistakes
migrating to there as well.

180
00:10:39,260 --> 00:10:43,689
So in order to see how we
bridge the gap, both for us

181
00:10:43,690 --> 00:10:48,550
and for the entire
community, we decided to go

182
00:10:50,320 --> 00:10:53,220
and do some research,
usually when we're trying

183
00:10:53,220 --> 00:10:56,780
to learn something new, we go to OWASP.

184
00:10:56,780 --> 00:11:01,110
I hope everyone that is listening
at the moment and watching

185
00:11:01,110 --> 00:11:05,550
this note OWASP if not
go and check them out.

186
00:11:05,550 --> 00:11:08,839
So OWASP is the open web
application security project.

187
00:11:08,840 --> 00:11:13,840
And the most famous or
most useful asset so far

188
00:11:14,570 --> 00:11:19,570
is the OWASP, top 10 that
was released in 2017.

189
00:11:20,010 --> 00:11:23,230
But we saw that a lot of solutions to

190
00:11:23,230 --> 00:11:27,320
traditional applications, but
not to API-based applications.

191
00:11:27,320 --> 00:11:31,600
So we actually were left with
the same gap of knowledge

192
00:11:31,600 --> 00:11:33,760
and we had to fill it out.

193
00:11:33,760 --> 00:11:37,293
So we decided to fill it out by ourselves.

194
00:11:38,860 --> 00:11:42,453
With great help from
my friend Inon Shkedy,

195
00:11:43,490 --> 00:11:48,057
we founded the OWASP API
security project started defining

196
00:11:49,580 --> 00:11:53,990
the different issues and
problems we see these days

197
00:11:53,990 --> 00:11:57,733
with API-based applications.

198
00:11:59,290 --> 00:12:03,189
And we managed to define
after about a year of work,

199
00:12:03,190 --> 00:12:06,380
OWASP API security, top 10.

200
00:12:06,380 --> 00:12:09,330
Now, unfortunately, we don't
have enough time here to cover

201
00:12:09,330 --> 00:12:13,621
each and every category in the
OWASP API security, top 10.

202
00:12:13,621 --> 00:12:15,329
This is something you can find online

203
00:12:15,330 --> 00:12:18,930
and improve your knowledge.

204
00:12:18,930 --> 00:12:21,910
But I do want to point
several points here.

205
00:12:21,910 --> 00:12:26,910
So in this list, we have four
groups, four different groups.

206
00:12:27,800 --> 00:12:31,640
So the first group is
the group we, let's say,

207
00:12:31,640 --> 00:12:34,492
stole from the OWASP top
10, the original one.

208
00:12:35,390 --> 00:12:38,189
We feel that injection
issues as I said, they are

209
00:12:38,190 --> 00:12:41,000
decreasing, but we're
not done with that yet.

210
00:12:41,000 --> 00:12:44,650
So it's not the number one issue.

211
00:12:44,650 --> 00:12:49,372
It's API8 now in our top
10, but it's still a thing.

212
00:12:50,820 --> 00:12:52,980
And API10 is insufficient logging

213
00:12:52,980 --> 00:12:55,023
and monitoring not directly.

214
00:12:57,050 --> 00:12:59,900
We're not directly looking
at that as a security issue,

215
00:12:59,900 --> 00:13:04,900
but we should, because if a
specific application is not

216
00:13:05,400 --> 00:13:09,230
doing the logging, as it's
supposed to or doing the

217
00:13:09,230 --> 00:13:13,883
monitoring, then it can
become a security issue.

218
00:13:15,660 --> 00:13:20,270
The second group, which we
will talk more in detail later,

219
00:13:20,270 --> 00:13:25,020
because this is the biggest
challenge of API security

220
00:13:25,020 --> 00:13:27,410
is the access control group.

221
00:13:27,410 --> 00:13:31,069
Everything that is about
authentication and authorization,

222
00:13:31,070 --> 00:13:34,380
we can see that we have three
different categories that are

223
00:13:34,380 --> 00:13:38,950
about access control that
are part of the top five,

224
00:13:38,950 --> 00:13:40,870
let's say from the top 10.

225
00:13:40,870 --> 00:13:43,110
So we have broken object
level of authorization

226
00:13:43,110 --> 00:13:44,440
and broken authentication

227
00:13:44,440 --> 00:13:46,750
and broken function level authorization.

228
00:13:46,750 --> 00:13:50,310
Obviously, very, very
important we will discuss

229
00:13:50,310 --> 00:13:53,079
that deeper later.

230
00:13:53,080 --> 00:13:57,160
But in general, it means that
I need to know who my user is

231
00:13:59,030 --> 00:14:04,030
what they can do and what kind of objects

232
00:14:04,100 --> 00:14:06,390
or assets they may touch.

233
00:14:06,390 --> 00:14:09,280
And if I don't do that,
we see things like that,

234
00:14:09,280 --> 00:14:14,280
for example, a couple of
months ago, we published that

235
00:14:15,340 --> 00:14:20,340
a research we did show that
one of the smart vacuum

236
00:14:22,580 --> 00:14:27,300
manufacturers created a
vacuum with a camera on it,

237
00:14:29,140 --> 00:14:32,400
not sure why, but I guess
they believe it's a good idea,

238
00:14:32,400 --> 00:14:33,763
and also their customers.

239
00:14:34,880 --> 00:14:39,880
The problem is that access
control was not employed,

240
00:14:40,100 --> 00:14:41,310
as it was supposed to.

241
00:14:41,310 --> 00:14:46,310
And during some API,
researching or hacking

242
00:14:46,690 --> 00:14:50,680
or pentesting, we managed to
get access to the video feed

243
00:14:50,680 --> 00:14:53,363
of each and every user around the world.

244
00:14:54,762 --> 00:14:59,530
So this is a result of
problem in access control

245
00:14:59,530 --> 00:15:02,810
in this case, we managed to
get the video feed and location

246
00:15:02,810 --> 00:15:07,810
and the form of the room
inside and more sensitive data.

247
00:15:10,200 --> 00:15:12,230
So this is the biggest challenge.

248
00:15:12,230 --> 00:15:15,460
And as I said, we'll talk
about it in a second.

249
00:15:15,460 --> 00:15:17,690
Let's continue with our third group.

250
00:15:17,690 --> 00:15:19,920
The third group is to access data.

251
00:15:19,920 --> 00:15:24,510
Remember I mentioned some
minutes ago, all this lower power

252
00:15:24,510 --> 00:15:25,610
meters flying in the air.

253
00:15:25,610 --> 00:15:30,050
So they got two different
categories, both API free,

254
00:15:30,050 --> 00:15:32,479
which is excessive data exposure.

255
00:15:32,480 --> 00:15:37,480
It means that sometimes I
would use sensitive parameters

256
00:15:39,690 --> 00:15:44,690
or sensitive data for being
sent to another component

257
00:15:46,260 --> 00:15:50,090
without actually being able
to follow where it gets.

258
00:15:50,090 --> 00:15:53,560
And sometimes it will get to a client

259
00:15:53,560 --> 00:15:55,489
that I don't want to get.

260
00:15:55,490 --> 00:15:58,183
I don't want this client to get it.

261
00:15:59,110 --> 00:16:02,750
One of the biggest things
mistakes is thinking that

262
00:16:02,750 --> 00:16:07,750
if I filter it in the client,
then the user will not see it.

263
00:16:08,770 --> 00:16:12,120
Obviously, this is a
mistake because an attacker

264
00:16:12,120 --> 00:16:16,240
or a malicious user will
look at the JSON files

265
00:16:16,240 --> 00:16:18,950
and the traffic that comes
to the client that not

266
00:16:18,950 --> 00:16:22,103
specifically to what the
client chooses to show us.

267
00:16:23,300 --> 00:16:26,219
The other side of it is mass assignment.

268
00:16:26,220 --> 00:16:29,710
This is where you get a lot of information

269
00:16:29,710 --> 00:16:31,250
from many sources.

270
00:16:31,250 --> 00:16:36,139
Some of them may be untrusted
from users or malicious users.

271
00:16:36,139 --> 00:16:40,340
And because of the confusion
from where this came from,

272
00:16:40,340 --> 00:16:42,620
you believe that this is trusted data

273
00:16:42,620 --> 00:16:45,300
and you use it in a trusted manner.

274
00:16:45,300 --> 00:16:47,992
Obviously, this is also a problem.

275
00:16:48,880 --> 00:16:53,140
So an example for excessive
data exposure of data that being

276
00:16:53,140 --> 00:16:58,140
filtered on the client
we saw about a year ago.

277
00:16:58,410 --> 00:17:01,030
This is a good example
that I enjoyed to show

278
00:17:01,030 --> 00:17:05,020
every now and then an
application called 3Fun

279
00:17:05,020 --> 00:17:07,742
meant for hooking, I guess hooking up,

280
00:17:09,150 --> 00:17:11,380
they sent a lot of information.

281
00:17:11,380 --> 00:17:15,400
Obviously, when the user
looked at the profile on the

282
00:17:15,400 --> 00:17:17,369
application, they got only to see

283
00:17:17,369 --> 00:17:20,399
the nonsensitive information.

284
00:17:20,400 --> 00:17:25,400
But when looking at the
the traffic that comes

285
00:17:27,260 --> 00:17:29,930
from the server to the
client, you could see

286
00:17:29,930 --> 00:17:34,483
a lot of sensitive data,
including specific location,

287
00:17:36,390 --> 00:17:38,943
like GPS specific.

288
00:17:40,410 --> 00:17:43,120
The interesting thing that
made it famous is that the

289
00:17:43,120 --> 00:17:48,120
researcher Alex Lomas decided
to map these points around the

290
00:17:48,610 --> 00:17:52,540
White House, which obviously
made a lot of noise

291
00:17:52,540 --> 00:17:57,490
but this is a classic
example of the issues of

292
00:18:00,750 --> 00:18:02,333
exposing excessive data.

293
00:18:04,570 --> 00:18:09,570
Moving on to the fourth group,
these were kind of bundled

294
00:18:10,660 --> 00:18:13,527
under a DevOps or DevSecOps.

295
00:18:14,430 --> 00:18:19,110
And these are the everyday
things we do to protect

296
00:18:19,110 --> 00:18:22,169
our functioning code.

297
00:18:22,170 --> 00:18:26,390
So for example, API4 is
about the lack of resource

298
00:18:26,390 --> 00:18:27,560
and rate limiting.

299
00:18:27,560 --> 00:18:30,600
All of us know that if we do not protect

300
00:18:30,600 --> 00:18:33,840
and do not put some sort of
rate limiting protection,

301
00:18:33,840 --> 00:18:37,800
or protect our resources,
we are subject to

302
00:18:39,050 --> 00:18:40,300
denial of service.

303
00:18:40,300 --> 00:18:43,790
This denial of service
can be from the network,

304
00:18:43,790 --> 00:18:48,447
or from an application
or whatever other source.

305
00:18:50,180 --> 00:18:54,380
But another issue that
can come from forgetting

306
00:18:54,380 --> 00:18:58,950
rate limiting is the ability
to do some brute force

307
00:18:58,950 --> 00:19:02,920
and to try and hack through guessing

308
00:19:02,920 --> 00:19:05,413
and enumerating usernames and passwords.

309
00:19:06,410 --> 00:19:11,410
API7 is called security misconfiguration.

310
00:19:11,758 --> 00:19:14,040
It's a big bucket of...

311
00:19:14,880 --> 00:19:16,850
Well, all the security misconfigurations

312
00:19:16,850 --> 00:19:17,953
you can think about.

313
00:19:20,430 --> 00:19:22,143
There are a lot of those.

314
00:19:23,120 --> 00:19:28,120
It can be anything from,
as we said rate limiting

315
00:19:28,490 --> 00:19:33,490
to using HTTP instead of HTTPS, etcetera.

316
00:19:35,180 --> 00:19:38,370
There are many, many
insecurity misconfigurations

317
00:19:38,370 --> 00:19:39,929
that can go wrong.

318
00:19:39,930 --> 00:19:44,930
And the last one last, but
definitely not least is API9

319
00:19:45,030 --> 00:19:47,530
improper assets management.

320
00:19:47,530 --> 00:19:51,810
As as we said, it's very, very
easy to deploy these days,

321
00:19:51,810 --> 00:19:56,070
new APIs and completely
new versions of APIs.

322
00:19:56,070 --> 00:19:58,980
Just in the click of a
button takes between minutes

323
00:19:58,980 --> 00:20:01,480
and sometimes even seconds these days.

324
00:20:01,480 --> 00:20:03,110
And it's very easy to forget them.

325
00:20:03,110 --> 00:20:06,370
So without popular assets
management, yes, I mean

326
00:20:06,370 --> 00:20:09,580
documentation sometimes,
and clear policies

327
00:20:09,580 --> 00:20:14,070
and clear processes of
how to deploy new APIs

328
00:20:14,070 --> 00:20:17,830
and how to deprecate all
the APIs, you are left with

329
00:20:17,830 --> 00:20:22,669
sometimes a big mess of not
knowing what kinds of APIs

330
00:20:22,670 --> 00:20:25,330
and assets you actually have.

331
00:20:25,330 --> 00:20:27,980
So let's see an example of
security misconfiguration.

332
00:20:29,556 --> 00:20:31,956
And also just a couple
of months ago, the Google

333
00:20:33,150 --> 00:20:38,070
Google Firebase allowed
some unauthorized parties

334
00:20:38,070 --> 00:20:41,939
to easily found the
databases of many, many, many

335
00:20:41,940 --> 00:20:46,940
24,000 android apps just
because of data exposed through

336
00:20:47,670 --> 00:20:49,450
a common misconfiguration.

337
00:20:49,450 --> 00:20:53,200
So it's really easy and it
happens really to everyone

338
00:20:53,200 --> 00:20:56,283
just because it's easy
to toggle something off.

339
00:20:59,326 --> 00:21:01,640
As I said, the biggest issue
or the biggest challenge

340
00:21:01,640 --> 00:21:02,810
is access control.

341
00:21:02,810 --> 00:21:07,810
So I would like to attend
to that before we move on.

342
00:21:08,280 --> 00:21:13,010
So access control is API
security biggest challenge.

343
00:21:13,010 --> 00:21:15,660
Let's look again at the three categories

344
00:21:15,660 --> 00:21:16,810
that are part of it.

345
00:21:16,810 --> 00:21:21,139
So we have API1, broken
object level of authorization,

346
00:21:21,140 --> 00:21:22,153
we call it BOLA.

347
00:21:24,020 --> 00:21:29,020
This is basically about
what an authorized user

348
00:21:30,570 --> 00:21:34,409
can or cannot touch or access.

349
00:21:34,410 --> 00:21:39,410
Broken authentication is to
make sure that the user is

350
00:21:39,930 --> 00:21:42,570
authenticated correctly, and no other user

351
00:21:42,570 --> 00:21:46,030
can claim their identity.

352
00:21:46,030 --> 00:21:49,450
And broken function level
authorization is similar to API1

353
00:21:49,450 --> 00:21:54,008
but instead of what the
user can touch or access

354
00:21:54,008 --> 00:21:57,930
API5 is broken function level
authorization, it's what the

355
00:21:57,930 --> 00:22:02,100
user can or allowed to do the actions.

356
00:22:02,100 --> 00:22:03,969
And let's take a look in that.

357
00:22:03,970 --> 00:22:06,713
So let's start with API2
the broken authentication.

358
00:22:08,040 --> 00:22:13,040
When we look at that, we are
talking about two different

359
00:22:13,680 --> 00:22:15,690
and completing issues.

360
00:22:15,690 --> 00:22:18,530
So the first one is lack of protection.

361
00:22:18,530 --> 00:22:21,790
For example, if you have
an API set of, we have here

362
00:22:21,790 --> 00:22:25,409
five different APIs, API endpoints.

363
00:22:25,410 --> 00:22:27,530
We see login and another kind of login

364
00:22:27,530 --> 00:22:29,730
and forgot password sign something

365
00:22:29,730 --> 00:22:32,490
and update location and edit photo.

366
00:22:32,490 --> 00:22:37,490
So what we expect this API to
cover or to be protected is

367
00:22:37,580 --> 00:22:41,740
against rate limiting to have
a rate limiting protection

368
00:22:41,740 --> 00:22:43,620
like we discussed before.

369
00:22:43,620 --> 00:22:44,689
But this is not all.

370
00:22:44,690 --> 00:22:49,690
We see here, three APIs, three
endpoints that are touching

371
00:22:50,240 --> 00:22:52,270
login or about login.

372
00:22:52,270 --> 00:22:55,120
So I would expect some
extra protection for that.

373
00:22:55,120 --> 00:22:57,739
And this extra protection can be either

374
00:22:57,740 --> 00:23:01,830
an account lockout mechanism or a CAPTCHA

375
00:23:01,830 --> 00:23:04,540
or credential stuffing
protection or anything

376
00:23:04,540 --> 00:23:09,210
that is specifically aligned in protecting

377
00:23:09,210 --> 00:23:11,713
login related endpoints.

378
00:23:14,780 --> 00:23:17,750
The other side of broken authentication

379
00:23:17,750 --> 00:23:19,593
is sometimes misimplementation.

380
00:23:21,890 --> 00:23:25,400
This can be from many,
many different reasons.

381
00:23:25,400 --> 00:23:30,400
For example, when you have
JWT, and you're using that

382
00:23:30,430 --> 00:23:32,720
that's an excellent start.

383
00:23:32,720 --> 00:23:37,070
But if your encryption algorithm is none,

384
00:23:37,070 --> 00:23:40,082
then you obviously did
not do something well.

385
00:23:42,080 --> 00:23:44,951
Again, sometimes the
service does not validate

386
00:23:44,951 --> 00:23:46,430
the OAuth provider.

387
00:23:46,430 --> 00:23:49,430
We see passwords that
are stored without salts

388
00:23:49,430 --> 00:23:54,207
and many many other reasons
for these misimplementations.

389
00:23:56,450 --> 00:23:59,913
All of them resolved in
broken authentication.

390
00:24:01,670 --> 00:24:03,663
Why are these errors so common?

391
00:24:06,390 --> 00:24:11,000
We said that authentication
endpoints are just out there.

392
00:24:11,000 --> 00:24:14,550
Some of them are exposed
to anyone by design.

393
00:24:14,550 --> 00:24:17,550
The software security
engineers have sometimes

394
00:24:17,550 --> 00:24:19,649
misconceptions, obviously not everyone,

395
00:24:19,650 --> 00:24:23,340
but we see it a lot.

396
00:24:23,340 --> 00:24:26,010
We need to remember that
OAuth isn't authentication,

397
00:24:26,010 --> 00:24:29,180
it's authorization, we need
to remember that API keys

398
00:24:29,180 --> 00:24:31,880
should not be used for
user authentication,

399
00:24:31,880 --> 00:24:34,090
but for client authentication.

400
00:24:34,090 --> 00:24:38,419
And multiple authentication flows exist in

401
00:24:38,420 --> 00:24:42,230
modern application, we see it
especially in IoT and mobile,

402
00:24:42,230 --> 00:24:45,800
but also obviously in legacy
and deep links with credentials

403
00:24:45,800 --> 00:24:48,919
and you have a lot of different flows

404
00:24:48,920 --> 00:24:52,223
to authenticate a user these days.

405
00:24:53,510 --> 00:24:55,030
And they all run in parallel.

406
00:24:55,030 --> 00:24:58,333
So it's very easy to make a mistake.

407
00:24:59,290 --> 00:25:04,290
Let's move to API1, BOLA, broken
object level authorization,

408
00:25:05,350 --> 00:25:09,070
the situation to be
described is very, very easy.

409
00:25:09,070 --> 00:25:13,653
If a user asks for the their own document,

410
00:25:15,470 --> 00:25:19,160
they should get a response, of
course and get the document.

411
00:25:19,160 --> 00:25:22,660
If a user asks for another document,

412
00:25:22,660 --> 00:25:25,360
then they should not get that.

413
00:25:25,360 --> 00:25:28,280
And if they do get some sort of access to

414
00:25:28,280 --> 00:25:29,910
someone else's document,

415
00:25:29,910 --> 00:25:33,140
then we have broken object
level authorization.

416
00:25:33,140 --> 00:25:35,140
I think the concept is very, very clear.

417
00:25:37,170 --> 00:25:39,280
Why are errors so common?

418
00:25:39,280 --> 00:25:42,040
We saw that before in the
beginning, so the attack surface

419
00:25:42,040 --> 00:25:44,340
is much wider, and it's easy to try

420
00:25:44,340 --> 00:25:47,679
and bypass the areas of authorization.

421
00:25:47,680 --> 00:25:50,700
And unfortunately, there's
no security solution

422
00:25:50,700 --> 00:25:52,960
that solves the problem completely.

423
00:25:52,960 --> 00:25:57,320
This needs to be baked
and into the solutions

424
00:25:57,320 --> 00:26:01,770
from day one and the entire architecture

425
00:26:01,770 --> 00:26:05,203
needs to be involved in that.

426
00:26:07,990 --> 00:26:12,023
Some of you say, so that
is IDOR, I get crime.

427
00:26:13,210 --> 00:26:14,130
It's not IDOR.

428
00:26:14,130 --> 00:26:15,380
We don't call it IDOR.

429
00:26:15,380 --> 00:26:18,510
And the reason is that we believe it's not

430
00:26:18,510 --> 00:26:20,320
accurate or indicative enough.

431
00:26:20,320 --> 00:26:22,200
One thing IDOR we talked about

432
00:26:22,200 --> 00:26:24,500
insecure direct object reference.

433
00:26:24,500 --> 00:26:29,290
And we don't feel that the direct object

434
00:26:29,290 --> 00:26:30,550
is the problem here.

435
00:26:30,550 --> 00:26:35,550
We think that there
shouldn't be something...

436
00:26:35,720 --> 00:26:39,890
We don't think that everything
should be salted or hashed

437
00:26:39,890 --> 00:26:42,110
or added the random string.

438
00:26:42,110 --> 00:26:47,110
So we think that just the
authorization should be fixed.

439
00:26:47,160 --> 00:26:50,660
Obviously, try to ask your
developers to implement

440
00:26:50,660 --> 00:26:53,793
indirect mechanism in every
place that receives an ID.

441
00:26:54,660 --> 00:26:56,920
I think you'll get a strike.

442
00:26:56,920 --> 00:26:59,930
And the last thing is
that the problem is not

443
00:26:59,930 --> 00:27:01,160
the object reference.

444
00:27:01,160 --> 00:27:05,600
It's the lack of
authorization in our eyes.

445
00:27:05,600 --> 00:27:10,082
So we decided not to use
IDOR, but the new term BOLA.

446
00:27:11,010 --> 00:27:15,770
And the last part in
this access control is

447
00:27:15,770 --> 00:27:17,733
broken function level of authorization.

448
00:27:18,570 --> 00:27:20,570
Again, easy to define.

449
00:27:20,570 --> 00:27:22,990
If an admin asks for an admin API,

450
00:27:22,990 --> 00:27:24,830
they should be okay with it.

451
00:27:24,830 --> 00:27:27,493
And if a regular user asked for it,

452
00:27:28,480 --> 00:27:31,973
they should be avoided from accessing it.

453
00:27:33,000 --> 00:27:35,970
Why is it so common this problem in APIs?

454
00:27:35,970 --> 00:27:38,970
So the function level
authorization can be implemented

455
00:27:38,970 --> 00:27:40,040
in many different ways.

456
00:27:40,040 --> 00:27:43,370
It can be in the code, in
configuration, in API gateways,

457
00:27:43,370 --> 00:27:44,750
and other places.

458
00:27:44,750 --> 00:27:47,900
Also, it's really easy to
detect and exploit APIs

459
00:27:47,900 --> 00:27:50,110
because the endpoints are predictable.

460
00:27:50,110 --> 00:27:52,209
Let's see an example of a traditional app.

461
00:27:53,140 --> 00:27:55,750
If you want to get a user's profile,

462
00:27:55,750 --> 00:27:57,480
from a regular endpoint,

463
00:27:57,480 --> 00:27:59,663
it looks like you see here on the left.

464
00:28:00,610 --> 00:28:03,100
If you suddenly want to
delete a user as an admin,

465
00:28:03,100 --> 00:28:05,699
then you need to go to the admin panel

466
00:28:05,700 --> 00:28:08,750
and try to get into the user management

467
00:28:09,670 --> 00:28:14,510
use some sort of post
to be able to do that.

468
00:28:14,510 --> 00:28:18,470
Now how it looks like
these days, you just switch

469
00:28:18,470 --> 00:28:20,053
the GET into delete.

470
00:28:20,930 --> 00:28:23,933
And as you can see, it's
very, very predictable.

471
00:28:26,980 --> 00:28:28,050
Let's summarize.

472
00:28:28,050 --> 00:28:33,050
So what you need to remember,
hopefully, after this talk,

473
00:28:33,950 --> 00:28:38,044
so modern API-based
applications are different.

474
00:28:38,044 --> 00:28:41,000
We saw how and we understood why.

475
00:28:41,000 --> 00:28:44,330
Being different they have
their own security issues.

476
00:28:44,330 --> 00:28:47,000
I hope I convinced you in that.

477
00:28:47,000 --> 00:28:49,870
The attack surface is much wider.

478
00:28:49,870 --> 00:28:53,270
There is more data moving
between components sometimes raw

479
00:28:54,160 --> 00:28:56,893
and access control is a real challenge.

480
00:28:59,970 --> 00:29:01,200
What you need to do.

481
00:29:01,200 --> 00:29:03,130
So first of all, educate.

482
00:29:03,130 --> 00:29:06,120
There is no defense against
threats, you don't know.

483
00:29:06,120 --> 00:29:09,919
The way we trying to close
the gap now is part of it.

484
00:29:09,920 --> 00:29:13,193
Educate yourselves,
educate your developers.

485
00:29:14,550 --> 00:29:19,399
Again, what you don't know
you cannot defend from.

486
00:29:19,400 --> 00:29:23,030
Keep an up to date API inventory.

487
00:29:23,030 --> 00:29:26,100
You cannot protect what
you don't know you have.

488
00:29:26,100 --> 00:29:29,820
And last but not least, embed
access control best practices

489
00:29:29,820 --> 00:29:32,470
from the beginning from the start.

490
00:29:32,470 --> 00:29:37,470
And it goes, a good way to
use that and to do that is by

491
00:29:38,540 --> 00:29:41,430
talking to a developer and
telling them to implement.

492
00:29:41,430 --> 00:29:45,940
Instead, for example, a user
gets access to the document.

493
00:29:45,940 --> 00:29:50,730
You can ask the developer to
do a task that only that user

494
00:29:50,730 --> 00:29:54,170
gets only read access to their document.

495
00:29:54,170 --> 00:29:59,170
This can sometimes help the
developers with the requirements

496
00:29:59,300 --> 00:30:00,250
for access control.

497
00:30:01,610 --> 00:30:02,479
And that's it.

498
00:30:02,480 --> 00:30:03,510
Thank you very much.

499
00:30:03,510 --> 00:30:05,629
Thank you so much for joining me today

500
00:30:05,630 --> 00:30:06,680
and have a great day.

