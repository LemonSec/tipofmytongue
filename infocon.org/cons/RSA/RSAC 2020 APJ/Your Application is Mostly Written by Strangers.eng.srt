1
00:00:03,770 --> 00:00:07,130
- Hi everyone, my name is Edwin Kwan

2
00:00:07,130 --> 00:00:11,490
and I'm here to talk to you
today about how your application

3
00:00:11,490 --> 00:00:14,560
is mostly written by strangers.

4
00:00:14,560 --> 00:00:16,540
Now when I say your application,

5
00:00:16,540 --> 00:00:18,960
I'm referring to the applications

6
00:00:18,960 --> 00:00:21,450
that your company develops.

7
00:00:21,450 --> 00:00:23,070
As security professionals,

8
00:00:23,070 --> 00:00:26,590
we spent a lot of time
educating our developers

9
00:00:26,590 --> 00:00:28,223
on how to write secure code.

10
00:00:29,260 --> 00:00:30,520
But the truth is,

11
00:00:30,520 --> 00:00:33,700
the bulk of your application
is written by people

12
00:00:33,700 --> 00:00:36,530
who are not part of your organization,

13
00:00:36,530 --> 00:00:38,890
they're written by strangers.

14
00:00:38,890 --> 00:00:41,470
Now this did not used to be the case,

15
00:00:41,470 --> 00:00:44,949
applications used to be
built from the ground up.

16
00:00:44,950 --> 00:00:48,290
Software development has
evolved over the years

17
00:00:48,290 --> 00:00:50,680
and today, they're mostly assembled

18
00:00:50,680 --> 00:00:52,513
from a bunch of libraries.

19
00:00:53,610 --> 00:00:56,700
Now this is similar to
the construction industry,

20
00:00:56,700 --> 00:01:01,340
where building a house used to
be done one brick at a time.

21
00:01:01,340 --> 00:01:05,373
It was time consuming and the
process was labor intensive.

22
00:01:06,720 --> 00:01:11,120
Today's houses can be assembled
from prefabricated parts.

23
00:01:11,120 --> 00:01:14,540
The parts are built off-site and in bulk

24
00:01:14,540 --> 00:01:17,520
and it reduces the
construction time required

25
00:01:17,520 --> 00:01:19,570
for building to house.

26
00:01:19,570 --> 00:01:21,460
In software development,

27
00:01:21,460 --> 00:01:25,530
those prefabricated parts
are open-source libraries

28
00:01:25,530 --> 00:01:29,460
and these open-source libraries
make up a large percentage

29
00:01:29,460 --> 00:01:31,573
of an application's code base.

30
00:01:33,290 --> 00:01:35,840
So here's what I'd like
to share with you today.

31
00:01:35,840 --> 00:01:38,450
I'd like to talk about
open-source software,

32
00:01:38,450 --> 00:01:43,430
how much open-source are we
using and who develops them?

33
00:01:43,430 --> 00:01:46,280
I'll then share some of
the open-source breaches

34
00:01:46,280 --> 00:01:48,410
that have occurred in the last two years

35
00:01:49,310 --> 00:01:52,200
and I'll finish off
with what you should do

36
00:01:52,200 --> 00:01:55,443
to reduce your risk of
an open-source breach.

37
00:01:57,610 --> 00:01:59,600
So open-source software.

38
00:01:59,600 --> 00:02:01,270
As I have already mentioned,

39
00:02:01,270 --> 00:02:05,470
it is now quite rare for
organizations to write the majority

40
00:02:05,470 --> 00:02:07,780
of the software in-house.

41
00:02:07,780 --> 00:02:09,870
Instead, most organizations

42
00:02:09,870 --> 00:02:12,500
will leverage open-source software

43
00:02:12,500 --> 00:02:15,763
to create the bulk of
their software products.

44
00:02:16,970 --> 00:02:19,109
There was a survey that
was released last year

45
00:02:19,110 --> 00:02:21,160
which provided some stats on this.

46
00:02:21,160 --> 00:02:26,160
This was the 2019 State of
Software Supply Chain Report

47
00:02:26,270 --> 00:02:30,460
and it stated that 85%
of modern applications

48
00:02:30,460 --> 00:02:34,250
consisted of open-source components.

49
00:02:34,250 --> 00:02:37,730
Now, I had to decide on my own

50
00:02:37,730 --> 00:02:39,690
and I did my own analysis

51
00:02:39,690 --> 00:02:43,070
on some of the apps
within my organization.

52
00:02:43,070 --> 00:02:44,609
So for one of the apps,

53
00:02:44,610 --> 00:02:47,960
we had 12 components that
were written in-house,

54
00:02:47,960 --> 00:02:52,050
this was a Java Maven application.

55
00:02:52,050 --> 00:02:57,050
So these 12 components
consisted of submodules

56
00:02:57,140 --> 00:02:58,542
and internal libraries.

57
00:02:59,400 --> 00:03:02,310
How many open-source
libraries do you think

58
00:03:02,310 --> 00:03:03,773
the application uses?

59
00:03:04,850 --> 00:03:08,463
10, 20, 50?

60
00:03:09,930 --> 00:03:13,880
It uses this many open-source libraries.

61
00:03:13,880 --> 00:03:18,000
So it had 12 in-house components

62
00:03:18,000 --> 00:03:22,363
and 268 open-source components.

63
00:03:23,300 --> 00:03:28,050
So that means the open-source made up 98%

64
00:03:28,050 --> 00:03:31,550
of all the components that
are in this particular app.

65
00:03:31,550 --> 00:03:34,130
What if we go by file size instead?

66
00:03:35,150 --> 00:03:39,630
For in-house app, it was 504 kilobytes

67
00:03:39,630 --> 00:03:44,180
and the open-source libraries
took up 86 megabytes.

68
00:03:44,180 --> 00:03:48,470
So that's about the same ratio, about 98%.

69
00:03:48,470 --> 00:03:53,050
And I found similar ratios
with the other applications

70
00:03:53,050 --> 00:03:54,780
that I analyzed.

71
00:03:54,780 --> 00:03:58,300
And what this tells me is
that our development team

72
00:03:58,300 --> 00:04:02,070
only writes a very small
percentage of the code

73
00:04:02,070 --> 00:04:03,783
that make up our application.

74
00:04:04,710 --> 00:04:06,960
So who is responsible

75
00:04:06,960 --> 00:04:10,030
for writing the bulk of
our application's code?

76
00:04:10,030 --> 00:04:12,430
Who are these open-source developers?

77
00:04:13,363 --> 00:04:17,430
Well open-source developers
could be individuals

78
00:04:17,430 --> 00:04:21,240
who devote their spare time
working in the evenings

79
00:04:21,240 --> 00:04:22,283
or on weekends.

80
00:04:23,240 --> 00:04:27,360
And most highly successful
open-source software

81
00:04:27,360 --> 00:04:30,480
are not developed by a single person.

82
00:04:30,480 --> 00:04:32,830
So you could have multiple
of these individuals

83
00:04:32,830 --> 00:04:34,022
working on a project.

84
00:04:35,110 --> 00:04:37,030
They could also be contributions

85
00:04:37,030 --> 00:04:39,510
by developers from companies

86
00:04:39,510 --> 00:04:41,550
who volunteer their company's time

87
00:04:41,550 --> 00:04:43,920
to contribute to open-source.

88
00:04:43,920 --> 00:04:46,240
When I was researching
for this particular slide,

89
00:04:46,240 --> 00:04:49,810
I actually discovered
that Google and Microsoft

90
00:04:49,810 --> 00:04:52,160
are the top open-source contributors

91
00:04:52,160 --> 00:04:55,480
in terms of repositories
that they contributed to

92
00:04:55,480 --> 00:04:57,493
and the number of contributors.

93
00:04:59,600 --> 00:05:02,820
And open-source software surprisingly

94
00:05:02,820 --> 00:05:05,423
also leverage other open-source software.

95
00:05:06,320 --> 00:05:09,840
So you have a highly distributed team

96
00:05:09,840 --> 00:05:13,630
of individuals and
companies working together

97
00:05:13,630 --> 00:05:16,130
using other open-source software

98
00:05:16,130 --> 00:05:19,620
to develop their open-source software.

99
00:05:19,620 --> 00:05:22,480
So you could say their
open-source software

100
00:05:22,480 --> 00:05:24,593
can be quite complex.

101
00:05:26,220 --> 00:05:29,480
Now not all open-source are created equal.

102
00:05:29,480 --> 00:05:32,187
As part of our organization's SDLC,

103
00:05:32,187 --> 00:05:34,570
our Software Development Life Cycle,

104
00:05:34,570 --> 00:05:37,659
we have a number of processes in place

105
00:05:37,660 --> 00:05:41,513
to ensure that we are building
our applications securely.

106
00:05:42,370 --> 00:05:44,800
We've got secure coding practices,

107
00:05:44,800 --> 00:05:48,740
where we obviously
follow the OWASP Top 10,

108
00:05:48,740 --> 00:05:50,700
we have integrated testing

109
00:05:50,700 --> 00:05:53,940
where we check not only for common bugs

110
00:05:53,940 --> 00:05:56,210
and unexpected behavior

111
00:05:56,210 --> 00:05:58,440
but also to check that
there are no changes

112
00:05:58,440 --> 00:06:01,773
that have been made without
the developer's knowledge.

113
00:06:02,850 --> 00:06:04,520
There's change control,

114
00:06:04,520 --> 00:06:08,210
so we're able to tell
who made what changes

115
00:06:08,210 --> 00:06:10,930
and when those changes are made.

116
00:06:10,930 --> 00:06:15,260
And we also have two-factor
or multi-factor authentication

117
00:06:15,260 --> 00:06:18,719
for our developer accounts
and other important accounts

118
00:06:18,720 --> 00:06:21,300
associated with the project's design,

119
00:06:21,300 --> 00:06:23,960
deployment and maintenance.

120
00:06:23,960 --> 00:06:26,099
So we're doing all this

121
00:06:26,100 --> 00:06:30,453
for the 2% of the code that
we write in our applications.

122
00:06:31,630 --> 00:06:35,159
Now do we know if the same is being done

123
00:06:35,160 --> 00:06:38,113
for the open-source
components that we use,

124
00:06:39,020 --> 00:06:43,623
which is the other 98% of
our application's code.

125
00:06:44,610 --> 00:06:48,193
Now not all open-source are created equal.

126
00:06:49,270 --> 00:06:50,530
I'd like to now talk about

127
00:06:50,530 --> 00:06:54,243
some of the more recent
open-source breaches.

128
00:06:55,830 --> 00:06:58,349
The first breach that
I'd like to share with

129
00:06:58,350 --> 00:07:03,350
is with a JavaScript npm
package called event-stream.

130
00:07:04,520 --> 00:07:06,789
Now it's quite a popular package

131
00:07:06,790 --> 00:07:10,390
with just under 2 million downloads.

132
00:07:10,390 --> 00:07:14,969
This breach happened in November 2018

133
00:07:14,970 --> 00:07:18,230
and the original author for the project

134
00:07:18,230 --> 00:07:22,670
created this project on August 2011

135
00:07:22,670 --> 00:07:26,183
and has been looking after
this for over seven years.

136
00:07:27,130 --> 00:07:30,210
Due to lack of time and interest

137
00:07:30,210 --> 00:07:32,799
the author for this event-stream library

138
00:07:32,800 --> 00:07:36,193
decided to hand over
ownership to someone else.

139
00:07:37,100 --> 00:07:39,920
Now unfortunately, this someone else

140
00:07:39,920 --> 00:07:43,453
turned out to be someone
with malicious intent.

141
00:07:45,350 --> 00:07:48,640
The new owner included
a malicious dependency

142
00:07:48,640 --> 00:07:50,440
called flatmap-streams

143
00:07:51,300 --> 00:07:53,240
and this malicious dependency

144
00:07:53,240 --> 00:07:56,220
was used to steal crypto
wallet information

145
00:07:56,220 --> 00:07:58,053
now including private keys.

146
00:07:58,890 --> 00:08:03,070
The new owner even attempted
to hide their activity

147
00:08:03,070 --> 00:08:05,200
by releasing subsequent versions

148
00:08:05,200 --> 00:08:08,582
that did not have the
malicious dependency.

149
00:08:09,450 --> 00:08:11,530
Now fortunately, the malicious code

150
00:08:11,530 --> 00:08:14,619
was discovered and reported.

151
00:08:14,620 --> 00:08:18,530
npm had to intervene to
remove the malicious versions

152
00:08:18,530 --> 00:08:22,123
and they also took down
the flatmap-stream library.

153
00:08:23,860 --> 00:08:27,470
However, that wasn't the end of it,

154
00:08:27,470 --> 00:08:31,250
there were still multiple
copies of the malicious version

155
00:08:31,250 --> 00:08:34,763
as it was a dependency
for many other libraries.

156
00:08:36,250 --> 00:08:39,299
And this was still being caged locally

157
00:08:39,299 --> 00:08:43,323
on developers' machines and in
internal repository managers.

158
00:08:44,440 --> 00:08:47,320
npm had to reach out to over,

159
00:08:47,320 --> 00:08:51,410
I think just under 4000
project maintainers

160
00:08:51,410 --> 00:08:53,992
to ask them to update
their dependency tree.

161
00:08:55,330 --> 00:08:58,690
Now the cause of this breach
was social engineering,

162
00:08:58,690 --> 00:09:02,090
which resulted in the
ownership of the library

163
00:09:02,090 --> 00:09:06,183
being legitimately handed
over to the attacker.

164
00:09:08,750 --> 00:09:12,430
Now this next breach was
on a RubyGems library

165
00:09:12,430 --> 00:09:14,920
and it happened in the middle,

166
00:09:14,920 --> 00:09:17,106
I think in mid 2019.

167
00:09:17,106 --> 00:09:19,856
The library is called strong_password.

168
00:09:19,856 --> 00:09:23,220
Now it was discovered by a developer

169
00:09:23,220 --> 00:09:26,990
who was upgrading some dependencies

170
00:09:26,990 --> 00:09:29,770
and that person was
doing some due diligence

171
00:09:29,770 --> 00:09:34,530
and going through all the
library's changeset line by line.

172
00:09:34,530 --> 00:09:36,209
Now I'm really impressed by that

173
00:09:36,210 --> 00:09:40,350
because I don't think I do
that myself all the time,

174
00:09:40,350 --> 00:09:43,453
so that's really good due
diligence on this developers part.

175
00:09:44,850 --> 00:09:46,120
While going through it,

176
00:09:46,120 --> 00:09:50,230
this developer discovered
that strong_password

177
00:09:50,230 --> 00:09:52,763
did not have a changelog file.

178
00:09:54,070 --> 00:09:57,740
And upon inspecting the code changes,

179
00:09:57,740 --> 00:10:01,000
discovered the following lines of code

180
00:10:01,000 --> 00:10:06,000
and this code allowed for
remote code execution.

181
00:10:07,700 --> 00:10:09,740
The developer investigated further

182
00:10:09,740 --> 00:10:12,540
to find out who added those code

183
00:10:12,540 --> 00:10:15,199
and discovered that there were actually

184
00:10:15,200 --> 00:10:17,023
no code changes in GitHub.

185
00:10:18,050 --> 00:10:22,280
So GitHub was still showing version 006

186
00:10:22,280 --> 00:10:23,819
as the latest version,

187
00:10:23,820 --> 00:10:27,883
with the last code change
being six months ago.

188
00:10:29,700 --> 00:10:34,420
So it turned out that the
maintainer's RubyGems account

189
00:10:34,420 --> 00:10:35,839
had been compromised.

190
00:10:35,840 --> 00:10:38,460
So the author had an old password,

191
00:10:38,460 --> 00:10:41,730
which was reused on
multiple other websites,

192
00:10:41,730 --> 00:10:44,140
including websites that had previously

193
00:10:44,140 --> 00:10:45,983
reported data breaches.

194
00:10:47,050 --> 00:10:49,160
He wasn't doing much open-source work

195
00:10:49,160 --> 00:10:52,030
and forgot about the RubyGems account

196
00:10:52,030 --> 00:10:53,983
and hence did not update the password.

197
00:10:55,000 --> 00:10:59,830
And this account was
created before RubyGems

198
00:10:59,830 --> 00:11:02,010
even had 2FA.

199
00:11:02,010 --> 00:11:05,110
So you could say that
the cause of this breach

200
00:11:05,110 --> 00:11:07,253
is that there wasn't a strong password.

201
00:11:09,770 --> 00:11:12,260
This next breach, it's a lot more recent

202
00:11:12,260 --> 00:11:14,803
and it happened in February this year.

203
00:11:15,640 --> 00:11:18,870
It did not involve
compromising any accounts

204
00:11:18,870 --> 00:11:23,870
and it works based on developers
not realizing the typo

205
00:11:24,260 --> 00:11:28,210
in the library's name and
picking the malicious library

206
00:11:28,210 --> 00:11:30,403
instead of the legitimate one.

207
00:11:34,310 --> 00:11:38,050
And the malicious gems originated

208
00:11:38,050 --> 00:11:40,170
from these two user accounts,

209
00:11:40,170 --> 00:11:42,520
Peter Gibbons and Jim Carrey.

210
00:11:42,520 --> 00:11:44,210
So the one I wanna talk about

211
00:11:44,210 --> 00:11:47,713
is the one with the
highest download count,

212
00:11:49,050 --> 00:11:50,193
which is atlas-client.

213
00:11:51,880 --> 00:11:55,430
So here's a screenshot
of the legitimate library

214
00:11:55,430 --> 00:11:56,772
next to the malicious one.

215
00:11:57,890 --> 00:12:01,810
Do you remember which is
the malicious library?

216
00:12:01,810 --> 00:12:05,113
Is it the one on the top
or the one at the bottom?

217
00:12:07,410 --> 00:12:09,329
It's the one at the bottom

218
00:12:09,330 --> 00:12:13,050
and it turns out that
not many people could

219
00:12:13,050 --> 00:12:17,150
as at the time of the
incident when it was reported,

220
00:12:17,150 --> 00:12:22,073
the malicious gem had close
to 30% of the total downloads.

221
00:12:23,760 --> 00:12:26,569
So what happen when your application uses

222
00:12:26,570 --> 00:12:27,733
the malicious library?

223
00:12:28,670 --> 00:12:31,430
Well if it's running on a Windows system,

224
00:12:31,430 --> 00:12:34,002
it will rename the PNG file,

225
00:12:35,480 --> 00:12:38,750
aaa.png to an executive

226
00:12:38,750 --> 00:12:42,310
so it'll be a.exe and it would execute it.

227
00:12:42,310 --> 00:12:47,310
And this would create a new
VBScript file for persistence

228
00:12:47,930 --> 00:12:51,449
and it would create a
new AutoRun registry key

229
00:12:52,570 --> 00:12:54,270
so that the malware will run every time

230
00:12:54,270 --> 00:12:56,143
the system is started or rebooted.

231
00:12:57,011 --> 00:13:00,480
And this script will start
and do an infinite loop

232
00:13:00,480 --> 00:13:04,150
where it captures the
user's clipboard data,

233
00:13:04,150 --> 00:13:05,569
it checks if it matches

234
00:13:05,570 --> 00:13:08,400
the format of a cryptocurrency wallet

235
00:13:08,400 --> 00:13:09,233
and if it does,

236
00:13:09,233 --> 00:13:13,323
it replaces the address
with that of the attacker's.

237
00:13:16,420 --> 00:13:19,390
So there are actually real
financial consequences

238
00:13:19,390 --> 00:13:20,660
to open-source breaches.

239
00:13:20,660 --> 00:13:22,880
And there not just to the end users

240
00:13:22,880 --> 00:13:24,480
of the affected applications

241
00:13:25,650 --> 00:13:28,040
but they also affect the organizations

242
00:13:28,040 --> 00:13:29,843
who produces the application.

243
00:13:30,850 --> 00:13:34,130
Now British Airways
experienced this two years ago,

244
00:13:34,130 --> 00:13:39,130
when it had a data breach of
over 380,000 credit cards.

245
00:13:41,030 --> 00:13:45,393
It was subsequently fined
$229 million for that breach.

246
00:13:46,470 --> 00:13:47,880
And all this happened

247
00:13:47,880 --> 00:13:51,040
because of a common JavaScript library,

248
00:13:51,040 --> 00:13:55,719
the modernized library which
had 22 lines of malicious code

249
00:13:55,720 --> 00:13:57,103
included into it.

250
00:13:58,150 --> 00:14:00,660
So you could say that the
fine worked out to cost

251
00:14:00,660 --> 00:14:04,843
around $100 million per
line of malicious code.

252
00:14:06,560 --> 00:14:10,170
So there are real financial consequences

253
00:14:10,170 --> 00:14:12,022
to open-source breaches.

254
00:14:15,610 --> 00:14:17,010
What should you do about it?

255
00:14:18,580 --> 00:14:20,560
Open-source bridges are real

256
00:14:20,560 --> 00:14:22,400
and open-source is everywhere

257
00:14:22,400 --> 00:14:24,209
and it's probably here to stay.

258
00:14:24,210 --> 00:14:27,453
So let's talk about what you
should be doing about it.

259
00:14:28,960 --> 00:14:30,360
The first thing that you need to do

260
00:14:30,360 --> 00:14:33,610
is you need to maintain
a dependencies list,

261
00:14:33,610 --> 00:14:36,533
you need to have a bill of materials.

262
00:14:37,450 --> 00:14:39,890
Your applications are mostly made up

263
00:14:39,890 --> 00:14:41,710
of open-source components

264
00:14:41,710 --> 00:14:43,580
and you need to have a way

265
00:14:43,580 --> 00:14:46,183
to keep track of what
those components are.

266
00:14:47,510 --> 00:14:49,819
In order to be able to quickly respond

267
00:14:49,820 --> 00:14:53,070
to open-source vulnerabilities
when they are discovered,

268
00:14:53,070 --> 00:14:55,730
you need a way to quickly understand

269
00:14:55,730 --> 00:14:57,423
your company's exposure.

270
00:14:58,380 --> 00:15:01,563
So you need to maintain
a dependencies list.

271
00:15:04,080 --> 00:15:06,340
The next thing we need to do

272
00:15:06,340 --> 00:15:10,870
is to have better due
diligence on new dependencies.

273
00:15:10,870 --> 00:15:12,590
Now I'm very surprised

274
00:15:12,590 --> 00:15:15,750
at the different processes
organizations have

275
00:15:15,750 --> 00:15:19,663
when using open-source
versus commercial software.

276
00:15:21,980 --> 00:15:23,970
We have very different processes

277
00:15:25,120 --> 00:15:27,300
or most organizations have
very different processes

278
00:15:27,300 --> 00:15:30,290
between buying and free software.

279
00:15:30,290 --> 00:15:33,642
When you are looking at
introducing open-source software,

280
00:15:35,462 --> 00:15:37,990
this could be a typical
process that is taken.

281
00:15:37,990 --> 00:15:40,550
So the first thing that you do is

282
00:15:40,550 --> 00:15:44,180
you have to search for a
software and assess it.

283
00:15:44,180 --> 00:15:46,630
So this could be done in a few ways,

284
00:15:46,630 --> 00:15:48,623
it could be based on past experience.

285
00:15:49,630 --> 00:15:51,790
The developer could have used this before,

286
00:15:51,790 --> 00:15:53,329
had a good experience with it,

287
00:15:53,330 --> 00:15:57,070
it could have been a long
time ago and decide to use it.

288
00:15:57,070 --> 00:15:59,840
This could also be the
first entry that you find

289
00:15:59,840 --> 00:16:01,710
from a Google search,

290
00:16:01,710 --> 00:16:03,980
so you decide to just look into that

291
00:16:03,980 --> 00:16:07,690
or it could be a response
that you saw on Stack Overflow

292
00:16:07,690 --> 00:16:11,170
from someone who had a similar problem

293
00:16:11,170 --> 00:16:12,959
like what you're facing.

294
00:16:12,960 --> 00:16:17,770
And this assessment is usually
done by a single developer

295
00:16:17,770 --> 00:16:19,470
while this research is being done.

296
00:16:21,310 --> 00:16:23,349
The next step, once you
determine the software

297
00:16:23,350 --> 00:16:25,890
is you check if it works.

298
00:16:25,890 --> 00:16:28,543
Put it in there, run it, see if it works.

299
00:16:29,510 --> 00:16:32,260
If it does, you commit the code

300
00:16:32,260 --> 00:16:34,370
and you push it to the master repository

301
00:16:35,300 --> 00:16:37,400
and that's the process.

302
00:16:37,400 --> 00:16:38,530
Usually in this case,

303
00:16:38,530 --> 00:16:42,260
the developers usually,
one or maybe two or more

304
00:16:42,260 --> 00:16:44,663
are the decision makers in this.

305
00:16:45,580 --> 00:16:48,250
Now let's compare this process

306
00:16:49,350 --> 00:16:52,810
to the typical process that could be taken

307
00:16:52,810 --> 00:16:57,510
if you're about to spend
$1 more on the software.

308
00:16:57,510 --> 00:16:58,667
So the first thing you need to do is

309
00:16:58,667 --> 00:17:00,890
the software still needs to be assessed

310
00:17:02,310 --> 00:17:03,800
but you might be doing

311
00:17:05,099 --> 00:17:08,609
a bit of comparison
between a few alternatives,

312
00:17:08,609 --> 00:17:10,540
as you might need to put a business case

313
00:17:10,540 --> 00:17:11,772
for using a software.

314
00:17:13,920 --> 00:17:15,310
Security normally gets involved,

315
00:17:15,310 --> 00:17:17,260
you have to do a risk assessment.

316
00:17:17,260 --> 00:17:18,640
It wants to know things like,

317
00:17:18,640 --> 00:17:22,220
what sort of data does it
enter and does it store?

318
00:17:22,220 --> 00:17:24,599
Is there any PII data in there?

319
00:17:24,599 --> 00:17:27,879
Is any business-sensitive data in there?

320
00:17:27,880 --> 00:17:31,523
They would usually wanna
do a security review on it.

321
00:17:32,900 --> 00:17:34,330
Legal might also get involved,

322
00:17:34,330 --> 00:17:37,439
they might wanna review
the contract, the licenses,

323
00:17:37,440 --> 00:17:38,770
understand what the cost is,

324
00:17:38,770 --> 00:17:41,514
what's the level of support
that we're gonna get

325
00:17:41,515 --> 00:17:46,515
and what kind of software
maintenance are there?

326
00:17:47,950 --> 00:17:50,690
Now I know I'm just simplifying everything

327
00:17:50,690 --> 00:17:52,360
but what I'm trying to say is that

328
00:17:52,360 --> 00:17:54,260
there's more due diligence taken

329
00:17:54,260 --> 00:17:57,493
when we're about to spend
$1 or more on software.

330
00:17:58,900 --> 00:18:00,083
Why is that so?

331
00:18:01,001 --> 00:18:03,700
Is it because there is more risk

332
00:18:03,700 --> 00:18:05,400
when we're using commercial software

333
00:18:05,400 --> 00:18:07,283
as compared to open-source software?

334
00:18:08,770 --> 00:18:10,210
I don't believe so

335
00:18:10,210 --> 00:18:12,790
but yet for most organizations,

336
00:18:12,790 --> 00:18:14,879
there is a large discrepancy

337
00:18:14,880 --> 00:18:19,880
in the way we review free
software versus paid software.

338
00:18:21,250 --> 00:18:23,620
And I've heard that
for some organizations,

339
00:18:23,620 --> 00:18:27,320
the open-source selection
process is like the Wild West,

340
00:18:27,320 --> 00:18:29,649
where anything goes.

341
00:18:29,650 --> 00:18:30,610
It shouldn't be

342
00:18:31,490 --> 00:18:34,373
and we need to do better due diligence.

343
00:18:36,710 --> 00:18:39,740
Here are some questions
we should be asking

344
00:18:39,740 --> 00:18:42,273
before we use open-source software.

345
00:18:43,859 --> 00:18:46,443
The first one is, do we really need this?

346
00:18:47,310 --> 00:18:49,919
Are we already using
an open-source software

347
00:18:49,920 --> 00:18:51,330
which does the same thing?

348
00:18:51,330 --> 00:18:54,750
Now you don't want to have
five different libraries

349
00:18:54,750 --> 00:18:56,320
doing the same thing,

350
00:18:56,320 --> 00:18:58,200
you want to be using one

351
00:18:58,200 --> 00:19:00,693
and it has to be the highest quality.

352
00:19:03,380 --> 00:19:07,010
Is this software actively being developed?

353
00:19:07,010 --> 00:19:09,560
Now an actively developed software

354
00:19:09,560 --> 00:19:12,159
is not an indicator that
it would still be supported

355
00:19:12,160 --> 00:19:13,620
in the future

356
00:19:13,620 --> 00:19:18,129
but a software that is no
longer actively developed

357
00:19:18,130 --> 00:19:20,350
provides a pretty good indication

358
00:19:20,350 --> 00:19:22,163
that you should avoid using it.

359
00:19:24,860 --> 00:19:26,112
Is it popular?

360
00:19:27,070 --> 00:19:30,240
The idea behind this is
that popular software

361
00:19:30,240 --> 00:19:35,170
are used a lot more and
hence gets more scrutiny.

362
00:19:35,170 --> 00:19:38,830
As such, any vulnerabilities
in the software

363
00:19:38,830 --> 00:19:43,413
would be quicker to be found
than if it was not widely used.

364
00:19:45,790 --> 00:19:48,180
What license does it have?

365
00:19:48,180 --> 00:19:50,840
Now it's not a security-specific question

366
00:19:50,840 --> 00:19:52,372
but it is very important.

367
00:19:53,930 --> 00:19:55,220
And the last question,

368
00:19:55,220 --> 00:19:58,790
are there any known vulnerabilities?

369
00:19:58,790 --> 00:20:02,593
You do not want to pass
any defects downstream.

370
00:20:07,092 --> 00:20:09,742
And now we're onto the last
thing that you should do,

371
00:20:10,720 --> 00:20:13,970
you should update stale dependencies.

372
00:20:13,970 --> 00:20:16,920
A dependency is considered stale

373
00:20:16,920 --> 00:20:19,973
when there is a newer version available.

374
00:20:20,820 --> 00:20:22,270
Using the newest version

375
00:20:22,270 --> 00:20:25,230
would mean that you have
the latest bug fixers

376
00:20:25,230 --> 00:20:27,100
and security fix.

377
00:20:27,100 --> 00:20:29,669
If you don't keep your
dependencies up to date

378
00:20:29,670 --> 00:20:32,570
and you let them get really stale,

379
00:20:32,570 --> 00:20:35,050
when a security issue is discovered,

380
00:20:35,050 --> 00:20:37,409
it can be quite hard to upgrade

381
00:20:37,410 --> 00:20:39,860
as there could be many breaking changes

382
00:20:39,860 --> 00:20:41,592
that you'll also need to address.

383
00:20:43,100 --> 00:20:45,290
There are a few ways you could do this.

384
00:20:45,290 --> 00:20:46,659
You could have a policy,

385
00:20:46,660 --> 00:20:49,910
where teams should update
all stale dependencies

386
00:20:49,910 --> 00:20:51,460
when making new changes

387
00:20:52,380 --> 00:20:55,850
or you could have a dedicated
time set aside each month

388
00:20:55,850 --> 00:20:58,090
for updating stale dependencies,

389
00:20:58,090 --> 00:21:00,909
such as one developer for half a day

390
00:21:00,910 --> 00:21:03,963
every month doing technical debt work.

391
00:21:06,120 --> 00:21:10,239
I call it the open-source tax,

392
00:21:10,240 --> 00:21:14,010
you get software for free so
that you can build faster,

393
00:21:14,010 --> 00:21:16,583
you need to put the time
back in to upgrade it.

394
00:21:17,952 --> 00:21:20,450
Or the last bit is you could automate it

395
00:21:20,450 --> 00:21:23,150
as shown on the screen using
tools like the Dependabot

396
00:21:24,500 --> 00:21:27,170
which automatically
upgrades stale dependencies

397
00:21:27,170 --> 00:21:28,910
and creates a pull request

398
00:21:28,910 --> 00:21:33,293
so that the changes for these
updates can be merged in.

399
00:21:34,980 --> 00:21:36,400
So those are the three things.

400
00:21:36,400 --> 00:21:39,060
Let's look at an example implementation

401
00:21:39,060 --> 00:21:42,240
for how you could put that into your SDLC.

402
00:21:42,240 --> 00:21:43,970
So the first thing that you need to have

403
00:21:43,970 --> 00:21:46,180
is a local cache repository.

404
00:21:46,180 --> 00:21:48,620
This would be your bills of material,

405
00:21:48,620 --> 00:21:51,000
this is where you will know

406
00:21:51,000 --> 00:21:54,403
that all open-sources
you're using is coming from.

407
00:21:55,295 --> 00:21:58,920
So the developers will retrieve
the open-source software

408
00:21:58,920 --> 00:22:02,073
from that repository when
they're making a changes,

409
00:22:02,910 --> 00:22:04,400
they could obviously get
it from anywhere else

410
00:22:04,400 --> 00:22:06,160
but you would advocate
that they'll be getting it

411
00:22:06,160 --> 00:22:08,273
from that local cache repository.

412
00:22:09,190 --> 00:22:10,870
When they've committed changes,

413
00:22:10,870 --> 00:22:12,912
it goes into the code repository,

414
00:22:13,820 --> 00:22:16,040
which then triggers the build

415
00:22:16,040 --> 00:22:21,040
and the bill gate kick
offs on the build agent

416
00:22:21,160 --> 00:22:22,240
which test is built,

417
00:22:22,240 --> 00:22:23,780
runs all its tests

418
00:22:23,780 --> 00:22:26,053
and if everything passes,

419
00:22:26,960 --> 00:22:29,220
it goes into production

420
00:22:29,220 --> 00:22:31,773
or it goes into a release repository.

421
00:22:32,750 --> 00:22:35,290
You should be configuring
your build agents

422
00:22:35,290 --> 00:22:38,420
to only allow dependencies
to get pulled in

423
00:22:38,420 --> 00:22:40,480
from the local cache repository,

424
00:22:40,480 --> 00:22:45,480
so that way you can be sure
that all your dependencies

425
00:22:45,780 --> 00:22:48,910
are actually from this
local cache repository

426
00:22:48,910 --> 00:22:51,010
and hence you have your bill of materials.

427
00:22:51,930 --> 00:22:53,100
The next thing is,

428
00:22:53,100 --> 00:22:55,969
how do you deal with new
open-source software?

429
00:22:55,970 --> 00:22:57,920
When there's a new open-source software

430
00:22:59,257 --> 00:23:02,300
that the teams like to
add to the application,

431
00:23:02,300 --> 00:23:03,800
it needs to be reviewed.

432
00:23:03,800 --> 00:23:07,960
It could be done by a security
champion or a team tech lead

433
00:23:07,960 --> 00:23:08,997
and it goes through questions

434
00:23:08,997 --> 00:23:11,030
that I just went through earlier.

435
00:23:11,030 --> 00:23:13,000
And if everything is good,

436
00:23:13,000 --> 00:23:14,400
it can be approved

437
00:23:14,400 --> 00:23:18,113
and it gets added to
this local repository.

438
00:23:19,210 --> 00:23:21,040
So something really lightweight

439
00:23:21,040 --> 00:23:24,070
but it's still good to have
that quick review process.

440
00:23:24,070 --> 00:23:25,429
The other thing that you should be doing

441
00:23:25,430 --> 00:23:27,530
is in your build pipeline,

442
00:23:27,530 --> 00:23:31,440
you need to detect CVEs and report on them

443
00:23:31,440 --> 00:23:35,030
and what I recommend is
having time-based waivers,

444
00:23:35,030 --> 00:23:38,010
whereby once those CVEs are detected,

445
00:23:38,010 --> 00:23:42,530
you need to, I guess
report that to the team

446
00:23:42,530 --> 00:23:43,950
so that they're made aware of it

447
00:23:43,950 --> 00:23:46,540
and they need to be given
time to address them.

448
00:23:46,540 --> 00:23:51,540
So what I've done is we have
SLOs, Service Level Objectives

449
00:23:53,616 --> 00:23:54,980
which states that you have to address

450
00:23:54,980 --> 00:23:57,520
certain vulnerabilities by a given time

451
00:23:57,520 --> 00:24:00,650
otherwise the build would break.

452
00:24:00,650 --> 00:24:05,480
So the time that we had was
based on the CVEs' severity,

453
00:24:05,480 --> 00:24:09,823
and we have two weeks if there's a high,

454
00:24:10,790 --> 00:24:14,280
three months for a medium
and six months for a low.

455
00:24:14,280 --> 00:24:16,410
And the other thing that
you also need to be doing

456
00:24:16,410 --> 00:24:20,780
is you need to be having
regular code scanning for CDEs,

457
00:24:20,780 --> 00:24:25,570
so this will scan the code
that is not actively developed

458
00:24:25,570 --> 00:24:27,300
and you also need to make sure

459
00:24:27,300 --> 00:24:30,193
you update your stale dependencies.

460
00:24:31,990 --> 00:24:34,010
So in summary,

461
00:24:34,010 --> 00:24:37,170
your application is mostly
written by strangers

462
00:24:38,650 --> 00:24:40,100
and what you should be doing about it

463
00:24:40,100 --> 00:24:43,469
is you need to maintain
a dependencies list.

464
00:24:43,470 --> 00:24:44,750
By doing that,

465
00:24:44,750 --> 00:24:46,970
allows you to know what
open-source components

466
00:24:46,970 --> 00:24:49,210
your organization is using

467
00:24:49,210 --> 00:24:52,630
and you can quickly understand
your company's exposure

468
00:24:52,630 --> 00:24:56,070
to any discovered
open-source vulnerabilities.

469
00:24:56,070 --> 00:24:58,550
You need to do better due diligence

470
00:24:58,550 --> 00:25:02,000
so that you use fewer open-source supplies

471
00:25:02,000 --> 00:25:04,503
and only the highest quality components.

472
00:25:05,500 --> 00:25:08,730
And you shouldn't allow
stale dependencies,

473
00:25:08,730 --> 00:25:12,843
never pass open-source defects downstream.

474
00:25:14,460 --> 00:25:17,913
And with that, I end my talk, thank you.

