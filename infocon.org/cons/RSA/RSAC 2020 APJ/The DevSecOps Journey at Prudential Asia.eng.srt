1
00:00:03,450 --> 00:00:05,880
- Good morning, Good
afternoon, Good evening,

2
00:00:05,880 --> 00:00:07,590
wherever you are.

3
00:00:07,590 --> 00:00:10,660
Myself Mohan Yelnuda, I'll
be talking about something

4
00:00:11,510 --> 00:00:15,100
that we underwent in DevSocOps
journey at Prudential.

5
00:00:15,100 --> 00:00:19,009
The title of this topic is,
"Did we cover enough ground?"

6
00:00:19,010 --> 00:00:21,410
so we will look at different
tracks that we have

7
00:00:22,500 --> 00:00:26,807
in Prudential and we will go
through different challenges

8
00:00:26,807 --> 00:00:31,409
that we faced, different
integration points,

9
00:00:31,410 --> 00:00:34,120
the experience in different areas

10
00:00:34,120 --> 00:00:37,769
of this different DevSecOps tracks.

11
00:00:37,770 --> 00:00:40,030
All the views, which I've
expressed in this session

12
00:00:40,030 --> 00:00:44,062
are mine, not my past
current or future employer

13
00:00:44,062 --> 00:00:45,750
to be on the safer side.

14
00:00:45,750 --> 00:00:46,583
Thank you.

15
00:00:47,480 --> 00:00:49,809
Well, that's a cost overview.

16
00:00:49,810 --> 00:00:51,270
I'll not spend more time on this

17
00:00:51,270 --> 00:00:54,520
because I think most of
the audience would know

18
00:00:54,520 --> 00:00:56,580
I assume DevSecOps.

19
00:00:56,580 --> 00:01:00,070
The definition or meaning
of DevSecOps in my words,

20
00:01:00,070 --> 00:01:02,270
is very simple here.

21
00:01:02,270 --> 00:01:05,730
Integration of security in
development and operations

22
00:01:05,730 --> 00:01:08,160
to facilitate early feedback.

23
00:01:08,160 --> 00:01:10,929
So the highlighted words
are actually very critical

24
00:01:10,930 --> 00:01:14,870
because that is the essence of DevSecOps.

25
00:01:14,870 --> 00:01:18,050
First it says integration,
integration between development

26
00:01:18,050 --> 00:01:19,926
and operations, both these domains,

27
00:01:19,926 --> 00:01:24,926
and not just only development,
like earlier we used to do.

28
00:01:25,005 --> 00:01:29,820
Also the desiccants,
about feedback, you know,

29
00:01:29,820 --> 00:01:32,770
giving early and frequent feedback

30
00:01:32,770 --> 00:01:37,550
to the different stakeholders
in development and operations,

31
00:01:37,550 --> 00:01:40,000
management and so on.

32
00:01:40,000 --> 00:01:43,333
Right, so this is basically
the meaning of DevSecOps.

33
00:01:45,638 --> 00:01:50,170
My people refer this as maybe secure SDLC

34
00:01:50,170 --> 00:01:55,170
or secure software lifecycle,
or secDevOps, or DevSecOps.

35
00:01:56,530 --> 00:01:58,720
The meaning is basically as
long as you're integrating

36
00:01:58,720 --> 00:02:01,220
the security in this domain

37
00:02:01,220 --> 00:02:05,480
and giving automated early
and frequent feedback

38
00:02:05,480 --> 00:02:08,850
to the stakeholders during your DevSecOps

39
00:02:08,850 --> 00:02:10,220
or whatever that you prefer.

40
00:02:10,220 --> 00:02:12,320
So before we get into this,

41
00:02:12,320 --> 00:02:14,400
it's important that we understand

42
00:02:14,400 --> 00:02:17,330
what is the Application
Attack Surface, right?

43
00:02:17,330 --> 00:02:20,340
So let me start with the focus

44
00:02:20,340 --> 00:02:22,140
because we're talking
about application security

45
00:02:22,140 --> 00:02:25,230
so it has to be application
as a starting point.

46
00:02:25,230 --> 00:02:27,773
Now, when we look at
application, obviously,

47
00:02:28,939 --> 00:02:33,239
the main focus usually has
to start with the code,

48
00:02:33,240 --> 00:02:35,760
the custom core that we develop, right?

49
00:02:35,760 --> 00:02:37,600
or our developers develop.

50
00:02:37,600 --> 00:02:41,920
And then in that we have
also an equally more

51
00:02:41,920 --> 00:02:46,170
or sometimes even more, in
terms of extent, it is more

52
00:02:46,170 --> 00:02:48,399
the open source libraries that we use.

53
00:02:48,400 --> 00:02:50,380
So application basically consists

54
00:02:50,380 --> 00:02:52,240
of these two major components.

55
00:02:52,240 --> 00:02:53,970
And if you look at the relative size,

56
00:02:53,970 --> 00:02:57,540
the custom code is shrinking
since last few years,

57
00:02:57,540 --> 00:03:00,594
and I'm sure it is gonna
shrink as we go further.

58
00:03:00,594 --> 00:03:03,370
More and more open source
libraries will be used

59
00:03:05,710 --> 00:03:07,720
in our applications actually.

60
00:03:07,720 --> 00:03:10,200
So, the developers can come in

61
00:03:10,200 --> 00:03:13,619
from both of these two different areas.

62
00:03:13,620 --> 00:03:15,972
And then when it is hosted
in a container of course,

63
00:03:15,972 --> 00:03:19,040
container itself has a Base OS Layer,

64
00:03:19,040 --> 00:03:22,030
multiple components stacked
on top of the base always

65
00:03:22,030 --> 00:03:26,390
and then of course, your
application binary running on top.

66
00:03:26,390 --> 00:03:29,700
So, vulnerabilities can come
in on any of these layers

67
00:03:29,700 --> 00:03:31,250
and of course, where it is hosted.

68
00:03:31,250 --> 00:03:33,879
So, it could be a AKS or

69
00:03:33,879 --> 00:03:35,399
openshift,

70
00:03:35,400 --> 00:03:39,820
or it could be any, it could
be a simple VM as well, right?

71
00:03:39,820 --> 00:03:42,940
So, wherever it is hosted,
so the orchestration platform

72
00:03:42,940 --> 00:03:45,780
also can develop vulnerabilities
and you should be aware

73
00:03:45,780 --> 00:03:48,750
because those vulnerabilities
can actually, you know,

74
00:03:48,750 --> 00:03:53,750
impact applications security
or the data security.

75
00:03:54,490 --> 00:03:58,160
So, these are the different
areas which we need to focus

76
00:03:58,160 --> 00:04:00,170
in terms of security right?

77
00:04:00,170 --> 00:04:03,670
Now the important aspect is
how do we do that, right?

78
00:04:03,670 --> 00:04:06,679
Obviously, we know that
there is no one single tool,

79
00:04:06,680 --> 00:04:08,970
like a silver bullet, which takes care

80
00:04:08,970 --> 00:04:10,840
of all the vulnerabilities
in different layers

81
00:04:10,840 --> 00:04:13,150
across this attack vector.

82
00:04:13,150 --> 00:04:16,017
So we have to go for something very niche,

83
00:04:16,017 --> 00:04:19,560
and more effective in each of these.

84
00:04:19,560 --> 00:04:23,120
So let's look at those areas.

85
00:04:23,120 --> 00:04:24,400
I'll start with SAS,

86
00:04:24,400 --> 00:04:27,558
or static application security testing.

87
00:04:27,558 --> 00:04:31,150
So that's the track which
basically focuses on the code

88
00:04:31,150 --> 00:04:32,530
that our developers develop.

89
00:04:32,530 --> 00:04:34,349
And then we have another track

90
00:04:34,350 --> 00:04:37,110
called software composition analysis

91
00:04:37,110 --> 00:04:39,440
or open source software security.

92
00:04:39,440 --> 00:04:41,300
So that basically as the name suggests,

93
00:04:41,300 --> 00:04:45,240
it focuses on the library
components coming from open source

94
00:04:45,240 --> 00:04:46,790
and third party libraries.

95
00:04:46,790 --> 00:04:51,330
And then we have Csec
or container security.

96
00:04:51,330 --> 00:04:53,260
Again, its role

97
00:04:53,260 --> 00:04:56,004
is very cut out in a
very, very straightforward

98
00:04:56,004 --> 00:04:59,412
that it focused on the base
OS and all the other layers

99
00:04:59,412 --> 00:05:02,532
as well as the configurations around it.

100
00:05:02,532 --> 00:05:07,169
Also it looks at the container
orchestration platform.

101
00:05:07,170 --> 00:05:11,130
So it has its own, you know, benchmarks,

102
00:05:11,130 --> 00:05:13,120
and it can create reports.

103
00:05:13,120 --> 00:05:15,350
And, you know, you can be

104
00:05:15,350 --> 00:05:18,640
assured in terms of the
different dimensions

105
00:05:18,640 --> 00:05:20,760
of continuous security
through these tools.

106
00:05:20,760 --> 00:05:22,940
So that's the third track.

107
00:05:22,940 --> 00:05:25,290
And then the last track is DAST,

108
00:05:25,290 --> 00:05:27,730
or Dynamic Application Security Testing

109
00:05:27,730 --> 00:05:28,900
or DAST.

110
00:05:28,900 --> 00:05:32,395
So, this is basically
automating and testing,

111
00:05:32,396 --> 00:05:35,410
which you cannot by the way.

112
00:05:35,410 --> 00:05:38,680
However, it is important to do automation,

113
00:05:38,680 --> 00:05:42,470
whatever that you can, so
that people who actually do

114
00:05:42,470 --> 00:05:46,240
the manual penetration testing,
they can spend less time

115
00:05:46,240 --> 00:05:51,000
in the overall testing phase.

116
00:05:51,000 --> 00:05:55,780
So these are our basic
four DevSecOps tracks.

117
00:05:55,780 --> 00:05:59,809
So Prudential has these and,
you know, we will talk about

118
00:05:59,810 --> 00:06:04,810
the next steps starting
with the different tracks

119
00:06:04,970 --> 00:06:06,860
and sorting it a little.

120
00:06:06,860 --> 00:06:09,210
Before I start these tracks individually,

121
00:06:09,210 --> 00:06:11,560
let me go through these couple of slides

122
00:06:11,560 --> 00:06:14,130
where I talk about, you know,

123
00:06:14,130 --> 00:06:18,540
what are those things that
we did and which you can do

124
00:06:18,540 --> 00:06:20,840
in your respective organizations so that

125
00:06:20,840 --> 00:06:23,674
the track gets a maturity, right?

126
00:06:23,674 --> 00:06:26,739
So, instead of starting from
scratch without a knowledge,

127
00:06:26,740 --> 00:06:29,150
these are the steps which
actually we have learned

128
00:06:29,150 --> 00:06:30,496
a hard way.

129
00:06:30,497 --> 00:06:33,100
And you probably can take a cue from us

130
00:06:33,100 --> 00:06:35,090
instead of you also going to that

131
00:06:35,090 --> 00:06:39,840
attempt and the hardship of course.

132
00:06:39,840 --> 00:06:42,340
For any track, you do need to identify

133
00:06:42,340 --> 00:06:44,770
what are your requirements,
you know, when I say your,

134
00:06:44,770 --> 00:06:48,030
I mean, your organization's requirement.

135
00:06:48,030 --> 00:06:51,801
So, normally tool vendors
publish these documents,

136
00:06:51,802 --> 00:06:56,802
then there are industry experts
who actually give their own

137
00:06:57,870 --> 00:07:01,770
requirements that are different
individual consultants.

138
00:07:01,770 --> 00:07:05,320
They have their, you know,
blogs which talk about these.

139
00:07:05,320 --> 00:07:08,099
So what's important is you read all those,

140
00:07:08,100 --> 00:07:10,780
however you look at what is
your passions requirement,

141
00:07:10,780 --> 00:07:13,251
you know, for each of
these tracks, and then

142
00:07:13,252 --> 00:07:17,243
you finalize those because for each track

143
00:07:17,243 --> 00:07:20,530
you're seeing for your organization,

144
00:07:20,530 --> 00:07:25,530
it's important that you understand
the technology landscape.

145
00:07:26,460 --> 00:07:29,870
So those blocks may not be
aware of your landscape,

146
00:07:29,870 --> 00:07:32,402
and those would be
something beyond, you know,

147
00:07:32,402 --> 00:07:35,760
or something applicable to
whatever their landscape.

148
00:07:35,760 --> 00:07:37,909
So it's important that you
finalize these requirements

149
00:07:37,910 --> 00:07:40,740
based on your landscape
rather than someone else's.

150
00:07:40,740 --> 00:07:42,880
Start with formalizing these requirements

151
00:07:42,880 --> 00:07:44,659
for each of the track.

152
00:07:44,660 --> 00:07:46,890
Of course, there are

153
00:07:47,790 --> 00:07:50,450
guidances published every now and then

154
00:07:50,450 --> 00:07:52,570
by Gartner, Forrester.

155
00:07:52,570 --> 00:07:55,909
So you can look at those as guidance only.

156
00:07:55,910 --> 00:08:00,540
And then you take the
leading tool vendors.

157
00:08:00,540 --> 00:08:03,090
You basically do a proof of concept

158
00:08:03,090 --> 00:08:07,169
and then finalize what actually
fits in your environment

159
00:08:07,170 --> 00:08:10,150
for your landscape and
your requirements, right?

160
00:08:10,150 --> 00:08:11,770
And then of course,
you will need to set up

161
00:08:11,770 --> 00:08:15,734
the tool integrated at
a strategic location

162
00:08:15,734 --> 00:08:18,180
in all locations in fact

163
00:08:18,180 --> 00:08:19,800
in the software development lifecycle.

164
00:08:19,800 --> 00:08:21,960
We'll talk about this later in detail.

165
00:08:21,960 --> 00:08:24,900
Establish the process on how
and when to use this tool

166
00:08:24,900 --> 00:08:25,859
in SDLC.

167
00:08:25,860 --> 00:08:27,160
So this is important, you know,

168
00:08:27,160 --> 00:08:31,070
for a small organization where you have

169
00:08:31,070 --> 00:08:36,069
maybe 10 to 50 developers,
it's not a big deal actually

170
00:08:36,861 --> 00:08:39,460
because they sit in probably one area

171
00:08:39,460 --> 00:08:41,880
or they have regular interaction.

172
00:08:41,880 --> 00:08:45,000
You basically tell them,
Hey, this is the tool

173
00:08:45,000 --> 00:08:47,640
this is how you need to
use, your job is done.

174
00:08:47,640 --> 00:08:51,050
But if it is a medium
to large organization,

175
00:08:51,050 --> 00:08:53,400
their business units are spread

176
00:08:53,400 --> 00:08:55,439
across different geographies.

177
00:08:55,440 --> 00:08:58,170
In such cases, this
step is very important.

178
00:08:58,170 --> 00:09:01,973
So you need to be create a
process, publish it so that

179
00:09:01,973 --> 00:09:05,050
the development teams actually understand,

180
00:09:05,051 --> 00:09:08,580
how this tool can be used.

181
00:09:08,580 --> 00:09:10,692
Setup the Triage process.

182
00:09:10,692 --> 00:09:13,290
Normally when we talk about triage,

183
00:09:13,290 --> 00:09:16,420
first thing that we think
of is false positives,

184
00:09:16,420 --> 00:09:17,550
and which is right.

185
00:09:17,550 --> 00:09:20,260
Most of the times these automated tools

186
00:09:20,260 --> 00:09:22,311
actually lead to false positives.

187
00:09:22,311 --> 00:09:26,070
Some tracks are prone to
more false positives rather

188
00:09:26,070 --> 00:09:28,000
than the other.

189
00:09:28,000 --> 00:09:31,231
We will see those when we
talk about those tracks.

190
00:09:31,231 --> 00:09:34,900
Sometimes the triage can be required

191
00:09:34,900 --> 00:09:37,590
not just for false positives,
but also applicably.

192
00:09:37,590 --> 00:09:41,540
Sometimes you need to go a little deep

193
00:09:41,540 --> 00:09:43,810
and make an analysis in terms of

194
00:09:43,810 --> 00:09:47,680
Hey, the CV is applicable
for this library for example,

195
00:09:47,680 --> 00:09:50,439
but whether it is applicable for this

196
00:09:50,440 --> 00:09:53,720
particular project or not,
or application or not,

197
00:09:53,720 --> 00:09:55,450
is something that you have to decide.

198
00:09:55,450 --> 00:09:59,200
So you have to read the
fine print about the CV

199
00:09:59,200 --> 00:10:03,020
and when it says Hey,
if and only if, this API

200
00:10:03,020 --> 00:10:06,170
is being used in your application
then only it is vulnerable

201
00:10:06,170 --> 00:10:07,479
otherwise it is not.

202
00:10:07,480 --> 00:10:08,880
Now CV is saying

203
00:10:08,880 --> 00:10:11,350
library or application
is vulnerable for sure

204
00:10:11,350 --> 00:10:13,730
but whether it is applicable or not,

205
00:10:13,730 --> 00:10:14,563
whether that CV

206
00:10:14,563 --> 00:10:18,400
is applicable or not depends
on the usage of that API.

207
00:10:18,400 --> 00:10:20,771
If it is not being called
in your application

208
00:10:20,772 --> 00:10:22,430
developers know it, right?

209
00:10:22,430 --> 00:10:24,010
Because they are the
ones who are using it.

210
00:10:24,010 --> 00:10:27,120
So if they say, Hey, I'm
not calling this API,

211
00:10:27,120 --> 00:10:28,700
you don't need to worry about it.

212
00:10:28,700 --> 00:10:31,230
So it may be vulnerable as per the tool,

213
00:10:31,230 --> 00:10:34,050
but it may not be applicable
based on your analysis.

214
00:10:34,050 --> 00:10:36,109
So that's the kind of triage process

215
00:10:36,110 --> 00:10:37,710
sometimes you have to undergo.

216
00:10:37,710 --> 00:10:40,510
It is always a good
idea to build, you know,

217
00:10:40,510 --> 00:10:44,150
to set up build breakers or
Kate gates or gating mechanism

218
00:10:48,643 --> 00:10:50,500
to ensure that only
secure systems actually

219
00:10:50,500 --> 00:10:52,100
are deployed in production.

220
00:10:52,100 --> 00:10:54,999
And it's always a good
idea to automate this.

221
00:10:54,999 --> 00:10:58,610
Instead of, you know,
having a QA team or QC team

222
00:10:58,610 --> 00:11:00,950
basically doing this manually right?

223
00:11:00,950 --> 00:11:03,730
So, there are a lot of delays
and they could be human errors

224
00:11:03,730 --> 00:11:06,030
in such cases, it is always a good idea

225
00:11:06,030 --> 00:11:08,600
to set up, Build breakers
or gating mechanisms

226
00:11:08,600 --> 00:11:09,800
in an automated way.

227
00:11:09,800 --> 00:11:11,560
This is very important point,

228
00:11:11,560 --> 00:11:14,300
most of the times it gets forgotten.

229
00:11:14,300 --> 00:11:17,040
You need to come up with
a strategy to reevaluate

230
00:11:17,041 --> 00:11:21,090
as well as in certain
cases replacing these tools

231
00:11:21,090 --> 00:11:23,210
every few years.

232
00:11:23,210 --> 00:11:25,000
For me, I put two or three years

233
00:11:25,000 --> 00:11:26,590
based on your risk appetite,

234
00:11:26,590 --> 00:11:28,280
you can probably increase or decrease

235
00:11:28,280 --> 00:11:29,990
the number there, right?

236
00:11:29,990 --> 00:11:33,411
So the point is a lot
of things are changing,

237
00:11:33,411 --> 00:11:35,829
when you set it up, say for example,

238
00:11:35,829 --> 00:11:38,620
we set it up in 2019 right?

239
00:11:38,620 --> 00:11:42,430
And then the world has
changed since then, right?

240
00:11:42,430 --> 00:11:45,761
A lot of new attacks have come up,

241
00:11:45,761 --> 00:11:49,370
new series has been reported,
new exploitation techniques

242
00:11:49,370 --> 00:11:50,810
have been discovered.

243
00:11:50,810 --> 00:11:53,930
In such case if your
tools in different tracks

244
00:11:53,930 --> 00:11:57,640
are not matching, not
updated enough, you know,

245
00:11:57,640 --> 00:11:59,210
so it's of no use.

246
00:11:59,210 --> 00:12:02,040
You may have invested money
but if it's not matching

247
00:12:02,040 --> 00:12:03,660
with the latest vulnerabilities,

248
00:12:03,660 --> 00:12:07,209
latest exploitation attacks,
you have to rethink over it,

249
00:12:07,210 --> 00:12:09,259
you know, and then in certain cases,

250
00:12:09,259 --> 00:12:11,930
you have to replace it as
well after certain time.

251
00:12:11,930 --> 00:12:15,839
So most of the times vendors
do a good job they try it,

252
00:12:15,840 --> 00:12:19,760
they ensure that their
roadmap is very, very dynamic,

253
00:12:19,760 --> 00:12:22,890
and they keep ensuring
that their tool is relevant

254
00:12:22,890 --> 00:12:24,310
in the market, right?

255
00:12:24,310 --> 00:12:27,079
But sometimes, it is difficult.

256
00:12:27,080 --> 00:12:28,130
So, in such cases,

257
00:12:28,130 --> 00:12:30,540
you have to do your own evaluation.

258
00:12:30,540 --> 00:12:32,810
And then either you take decision

259
00:12:32,810 --> 00:12:35,518
to continue with the same tool or tools

260
00:12:35,519 --> 00:12:38,480
or you replace maybe some if not all.

261
00:12:38,480 --> 00:12:40,780
Educate the stakeholders
on how to use the tools.

262
00:12:40,780 --> 00:12:42,850
In this case, the primary
stakeholders are of course,

263
00:12:42,850 --> 00:12:46,040
your development teams, your ops team.

264
00:12:46,040 --> 00:12:47,969
Create ecosystem of documentation,

265
00:12:47,970 --> 00:12:50,060
frequently asked questions, small videos,

266
00:12:50,060 --> 00:12:51,180
like three to five minutes.

267
00:12:51,180 --> 00:12:53,479
So we did that actually.

268
00:12:53,480 --> 00:12:57,319
And that's been found very
useful because not every time

269
00:12:57,319 --> 00:13:00,069
because we are so small in number

270
00:13:00,070 --> 00:13:01,342
compared to the developers.

271
00:13:01,342 --> 00:13:05,290
They cannot catch hold of us,
you know when they need it.

272
00:13:05,290 --> 00:13:07,730
So having these ecosystem

273
00:13:07,730 --> 00:13:09,661
around the application security domain

274
00:13:09,661 --> 00:13:14,661
helps us to mitigate
these, you know, inquiries,

275
00:13:14,820 --> 00:13:16,080
and only when,

276
00:13:16,080 --> 00:13:17,270
you know,

277
00:13:17,270 --> 00:13:19,001
the severity of these inquiries is

278
00:13:19,001 --> 00:13:23,810
more or it is prioritized,
we can actually find time

279
00:13:23,810 --> 00:13:25,630
to help them on those ways.

280
00:13:25,630 --> 00:13:29,260
But otherwise, documentation,
frequently asked questions,

281
00:13:29,260 --> 00:13:30,870
list of false positives,

282
00:13:30,870 --> 00:13:34,240
small videos on how to use
the tools, process, etc.

283
00:13:34,240 --> 00:13:38,910
These definitely help us in
a big way here at Prudential.

284
00:13:38,910 --> 00:13:41,230
Create metrics, you need to measure those

285
00:13:41,230 --> 00:13:43,300
and you need to track
those four improvements.

286
00:13:43,300 --> 00:13:45,387
Now, this is an important

287
00:13:45,388 --> 00:13:50,330
you know, indicator of the
maturity of your track, right?

288
00:13:50,330 --> 00:13:53,290
So you can start with onboarding metrics.

289
00:13:53,290 --> 00:13:55,420
For example, if you have
saved 20 applications

290
00:13:55,420 --> 00:13:57,870
in your organization, and then you start

291
00:13:57,870 --> 00:13:59,690
with how many applications are

292
00:13:59,690 --> 00:14:00,980
onboarded on this too

293
00:14:00,980 --> 00:14:02,270
because it's not

294
00:14:02,270 --> 00:14:04,560
like a switch, right?

295
00:14:04,560 --> 00:14:07,650
Like zero to one, you know,

296
00:14:07,650 --> 00:14:09,557
by pressing the button,
you basically enable

297
00:14:09,557 --> 00:14:11,370
the DevSecOps integration, right?

298
00:14:11,370 --> 00:14:14,300
So there are a lot of challenges,

299
00:14:14,300 --> 00:14:17,530
the challenges could be the
priority of the business,

300
00:14:17,530 --> 00:14:21,750
availability of these tools,
availability of, you know,

301
00:14:21,750 --> 00:14:24,590
the CI pipelines, and so on and so forth.

302
00:14:24,590 --> 00:14:28,340
So, sometimes it takes some time, right?

303
00:14:28,340 --> 00:14:30,842
and maybe one quarter or two quarters.

304
00:14:30,842 --> 00:14:34,939
And you need to basically
create these metrics track,

305
00:14:34,940 --> 00:14:37,990
hey, three applications are
on boarded in the first month,

306
00:14:37,990 --> 00:14:40,530
maybe 10 in the quarter, maybe all

307
00:14:40,530 --> 00:14:43,829
by the end of second quarter, and so on.

308
00:14:43,830 --> 00:14:47,164
Once all the applications are on boarded,

309
00:14:47,164 --> 00:14:49,750
you don't need this metric, right?

310
00:14:49,750 --> 00:14:52,050
You want to just discard
it and create new metric.

311
00:14:52,050 --> 00:14:53,620
What can be that new metric?

312
00:14:53,620 --> 00:14:56,050
Hey, now the scanning is happening.

313
00:14:56,050 --> 00:14:59,439
The reports are being
published in the dashboard.

314
00:14:59,440 --> 00:15:03,800
Now it's time for checking
what liberties basically

315
00:15:03,800 --> 00:15:05,520
you need to fix, you need to prioritize

316
00:15:05,520 --> 00:15:07,370
and to fix those.

317
00:15:07,370 --> 00:15:09,920
So, issue metrics is something
that you can think of

318
00:15:09,920 --> 00:15:11,702
as the next set of metrics.

319
00:15:11,702 --> 00:15:13,902
So you can start with probably,

320
00:15:13,902 --> 00:15:16,390
critical issues first,

321
00:15:16,390 --> 00:15:18,500
and then once all the keys
to critical issues are fixed

322
00:15:18,500 --> 00:15:21,670
then you go down to high,
then further, you know,

323
00:15:21,670 --> 00:15:23,729
to medium low and so on, right?

324
00:15:23,730 --> 00:15:27,000
So, this is the way you
know, we track here,

325
00:15:27,000 --> 00:15:28,750
because that's how

326
00:15:28,750 --> 00:15:30,447
we can actually respace

327
00:15:32,670 --> 00:15:34,132
analysis and prioritization.

328
00:15:35,520 --> 00:15:40,383
Now, with that we'll go
over track by track and see,

329
00:15:41,330 --> 00:15:44,323
you know, how we have come up

330
00:15:44,323 --> 00:15:47,233
with the implementation of
DevSecOps at Prudential.

331
00:15:48,706 --> 00:15:50,460
So starting with SAST,

332
00:15:50,460 --> 00:15:52,845
yeah, so what I've done
is I've added these

333
00:15:52,845 --> 00:15:56,260
few elements on the left
hand side in the ello.

334
00:15:56,260 --> 00:16:01,260
So that we know what to do in
each of these tracks, right?

335
00:16:02,380 --> 00:16:06,500
So for SAST, for example,
as I showed earlier,

336
00:16:06,500 --> 00:16:08,750
it's Static Application Security Testing.

337
00:16:08,750 --> 00:16:10,980
And we fake focus on the custom code

338
00:16:10,980 --> 00:16:12,930
that our developers develop, right?

339
00:16:12,930 --> 00:16:16,780
So in this case, of
course, as it's obvious,

340
00:16:16,780 --> 00:16:18,069
the input is the source code,

341
00:16:18,070 --> 00:16:20,510
the custom code that
our developers develop.

342
00:16:20,510 --> 00:16:23,740
The output is security
vulnerabilities and yeah,

343
00:16:23,740 --> 00:16:25,190
a lot of them.

344
00:16:25,190 --> 00:16:27,879
So I have worked in the past life.

345
00:16:27,879 --> 00:16:31,530
In static analysis compiler.

346
00:16:31,530 --> 00:16:33,280
I know this domain very closely.

347
00:16:33,280 --> 00:16:35,540
I've developed part of it actually.

348
00:16:35,540 --> 00:16:38,473
So it's very challenging there right?

349
00:16:38,473 --> 00:16:41,329
with new languages, new extensions

350
00:16:41,330 --> 00:16:44,100
to the existing languages, compilers,

351
00:16:44,100 --> 00:16:46,930
variations of these compilers.

352
00:16:46,930 --> 00:16:48,500
So it's very difficult, you know,

353
00:16:48,500 --> 00:16:50,160
to keep pace with all these changes.

354
00:16:50,160 --> 00:16:52,877
So your tool, unless it is, you know,

355
00:16:52,878 --> 00:16:56,730
has a very vibrant roadmap

356
00:16:56,730 --> 00:16:59,199
and a very vibrant development team.

357
00:16:59,199 --> 00:17:01,880
These tools actually can create

358
00:17:01,880 --> 00:17:03,863
a lot of false positives, right?

359
00:17:05,112 --> 00:17:06,723
So that's the,

360
00:17:07,700 --> 00:17:11,900
triage that we need to
do in terms of SAST.

361
00:17:11,900 --> 00:17:15,750
So here, I have said very
bluntly triage required,

362
00:17:15,750 --> 00:17:17,940
which means you take any tool, you know,

363
00:17:17,940 --> 00:17:20,596
open source commercial, all these tools

364
00:17:20,596 --> 00:17:24,920
lead to false positives and
the triage is a must actually.

365
00:17:24,920 --> 00:17:26,300
What are the integration points

366
00:17:26,300 --> 00:17:28,810
where these tools can be used?

367
00:17:28,810 --> 00:17:32,260
So, most of these tools,
what I've seen so far,

368
00:17:32,260 --> 00:17:34,430
have ID plugins, that means

369
00:17:35,990 --> 00:17:40,990
they support all the leading
IDEs that developers use.

370
00:17:41,440 --> 00:17:43,370
It could be starting
with traditional IDE's

371
00:17:43,370 --> 00:17:47,610
like Eclipse, IntelliJ, or Visual Studio,

372
00:17:47,610 --> 00:17:51,560
or Visual Studio code or
the school visual code.

373
00:17:51,560 --> 00:17:54,097
All these different
leading IDEs are supported,

374
00:17:54,097 --> 00:17:56,270
and the speed that the
vendors have come up with

375
00:17:56,270 --> 00:17:58,460
their plugins there, so
that while the developer

376
00:17:58,460 --> 00:18:00,650
is developing, they can
actually you know scan

377
00:18:00,650 --> 00:18:05,430
and get a feedback right then and there

378
00:18:05,430 --> 00:18:07,010
even before committing, basically.

379
00:18:07,010 --> 00:18:09,277
So these vendors also
have integration points

380
00:18:09,277 --> 00:18:10,899
in the CI pipeline, right?

381
00:18:10,899 --> 00:18:14,216
So, when you are committed, you know,

382
00:18:14,217 --> 00:18:18,160
when you're about to release
or do the integration testing

383
00:18:18,160 --> 00:18:21,090
that time you basically use this CI

384
00:18:21,090 --> 00:18:22,659
or Continuous Integration Pipeline.

385
00:18:22,660 --> 00:18:25,260
And either you can use their CLI's

386
00:18:25,260 --> 00:18:28,450
in your pipeline script,
or most of these tools

387
00:18:28,450 --> 00:18:32,130
have orchestration platform based plugins,

388
00:18:32,130 --> 00:18:33,933
like image for Jenkins,

389
00:18:35,466 --> 00:18:38,040
for Bamboo, for Circles,

390
00:18:38,040 --> 00:18:41,090
CI then for Azure DevOps,

391
00:18:41,090 --> 00:18:42,159
then GateOps

392
00:18:42,160 --> 00:18:45,470
all these you know, so
most of these platforms

393
00:18:45,470 --> 00:18:47,300
have plugin for those.

394
00:18:47,300 --> 00:18:48,379
What is the challenge?

395
00:18:48,380 --> 00:18:52,190
I already talked about the
major challenge with SAST right?

396
00:18:52,190 --> 00:18:55,249
and in this track major challenges usually

397
00:18:55,249 --> 00:18:57,480
have about false positives

398
00:18:57,480 --> 00:19:00,400
second, supporting

399
00:19:00,400 --> 00:19:02,320
X or Y vulnerabilities version

400
00:19:02,320 --> 00:19:04,450
of a particular programming language

401
00:19:04,450 --> 00:19:05,630
that developers are using.

402
00:19:05,630 --> 00:19:07,670
Normally developers keep upgrading, right?

403
00:19:07,670 --> 00:19:10,330
This tools actually lag behind.

404
00:19:10,330 --> 00:19:12,290
So that's a major challenge.

405
00:19:12,290 --> 00:19:14,320
So they are already gone ahead.

406
00:19:14,320 --> 00:19:16,990
And the tool says, Hey,
I'm sorry, I just support

407
00:19:16,990 --> 00:19:20,740
N-2 version. and not the end.

408
00:19:20,740 --> 00:19:24,480
It's an ongoing challenge,
across the industry, in SAS,

409
00:19:24,480 --> 00:19:27,930
new languages, of course,
with the flexibility

410
00:19:27,930 --> 00:19:29,350
and the freedom that is given

411
00:19:29,350 --> 00:19:30,961
to the development teams these days,

412
00:19:30,961 --> 00:19:35,961
you can expect at least one
new language being discovered

413
00:19:37,110 --> 00:19:40,729
and used by the development
teams in India, right?

414
00:19:40,730 --> 00:19:42,930
So that's a challenge.

415
00:19:42,930 --> 00:19:46,710
Sometimes you have to find
some alternative mechanisms,

416
00:19:46,710 --> 00:19:51,450
like when a new language
comes, new tools also appear

417
00:19:51,450 --> 00:19:52,470
in the open source domain.

418
00:19:52,470 --> 00:19:54,534
So you have to mix and match

419
00:19:54,534 --> 00:19:58,000
deal with this challenge.

420
00:19:58,000 --> 00:19:59,780
What is a tip for this track?

421
00:19:59,780 --> 00:20:02,300
Generally allow development
teams to, you know,

422
00:20:02,300 --> 00:20:04,730
go through the reported findings first,

423
00:20:04,730 --> 00:20:08,000
and then, you know, you come in picture

424
00:20:08,000 --> 00:20:09,360
you as a security consultant.

425
00:20:09,360 --> 00:20:11,969
The reason is developers
have developed that code

426
00:20:11,970 --> 00:20:16,680
so they know and they are
large in number usually right?

427
00:20:16,680 --> 00:20:21,600
compared to the development
tools security pressure, right?

428
00:20:21,600 --> 00:20:23,389
Usually, for every 200 developers,

429
00:20:23,390 --> 00:20:25,320
you have one security consultant.

430
00:20:25,320 --> 00:20:29,581
You need to allow them
to have a go at it first,

431
00:20:29,581 --> 00:20:32,429
then if they come back

432
00:20:32,430 --> 00:20:36,580
and say, Hey, I don't think
these eight or 10 issues

433
00:20:36,580 --> 00:20:38,100
are actually issues, you know,

434
00:20:38,100 --> 00:20:40,120
they should be false positives.

435
00:20:40,120 --> 00:20:41,860
Then it's good to have a look

436
00:20:41,860 --> 00:20:43,770
at all those eight or 10 rather than

437
00:20:43,770 --> 00:20:46,210
the whole 100 or 200 issues right?

438
00:20:46,210 --> 00:20:49,610
So, you can do the Triage
discussion and then if you agree

439
00:20:49,610 --> 00:20:52,310
you just mark those as false
positives or not applicable.

440
00:20:52,310 --> 00:20:55,389
Or if you don't you ask
them to fix it, you know,

441
00:20:55,390 --> 00:20:58,020
you convince them, hey,
these are actually two issues

442
00:20:58,020 --> 00:21:02,810
and you can help them on
the guidance on how to fix,

443
00:21:02,810 --> 00:21:06,899
so that's the static
analysis tool and the track.

444
00:21:06,900 --> 00:21:10,580
Next track is the Dynamic
Application Security Testing track

445
00:21:10,580 --> 00:21:11,540
or DAST.

446
00:21:11,540 --> 00:21:15,830
So this is the second most
traditional security track

447
00:21:15,830 --> 00:21:19,169
or secure SDLC track or
DevSecOps track, right?

448
00:21:19,170 --> 00:21:23,930
People have been using tools
like burp suite open tool

449
00:21:23,930 --> 00:21:28,160
that has SAP, wasp SAP, and
a few more other, right?

450
00:21:28,160 --> 00:21:32,540
So most of these tools are
actually used independently

451
00:21:32,540 --> 00:21:34,970
that means by the development teams

452
00:21:34,970 --> 00:21:39,070
or by the penetration testing
teams in a manual mode.

453
00:21:39,070 --> 00:21:42,080
Here, I'm talking about using these tools

454
00:21:42,080 --> 00:21:43,649
in the CD mode, right?

455
00:21:43,650 --> 00:21:46,686
So it focuses on the actual application,

456
00:21:46,686 --> 00:21:50,429
which is running non
production environment, right?

457
00:21:50,430 --> 00:21:53,040
So that's the input a
stable running application

458
00:21:53,040 --> 00:21:56,810
or API endpoint, in a
pre prod environment,

459
00:21:56,810 --> 00:22:00,010
and also that's the prerequisite
for this DAST track.

460
00:22:00,010 --> 00:22:00,843
What is output?

461
00:22:00,843 --> 00:22:02,340
Of course security vulnerabilities.

462
00:22:02,340 --> 00:22:05,230
Are triage... sometimes
yes, it is required

463
00:22:05,230 --> 00:22:07,170
because when you are running

464
00:22:07,170 --> 00:22:11,360
this tool in a automated way,
in a pre prod environment.

465
00:22:11,360 --> 00:22:14,889
Some of the vulnerabilities
may not be applicable

466
00:22:14,890 --> 00:22:16,020
in the production environment

467
00:22:16,020 --> 00:22:18,480
because not usually production environment

468
00:22:18,480 --> 00:22:21,450
is more hardened compared
to pre prod right?

469
00:22:21,450 --> 00:22:22,790
So, some of the vulnerabilities

470
00:22:22,790 --> 00:22:24,560
would be false positives obviously.

471
00:22:24,560 --> 00:22:27,166
So, in such cases you can probably either

472
00:22:27,166 --> 00:22:31,929
mark those as false
positives or in the beginning

473
00:22:31,930 --> 00:22:33,450
that means through configuration

474
00:22:33,450 --> 00:22:38,040
so that it doesn't report
otherwise you have a quick review

475
00:22:38,040 --> 00:22:39,633
and go case by case.

476
00:22:41,220 --> 00:22:42,690
Triage definitely is required.

477
00:22:42,690 --> 00:22:44,960
However, compared to SAST track,

478
00:22:44,960 --> 00:22:48,380
the number of issues
reported are very, very few.

479
00:22:48,380 --> 00:22:51,240
And thus the triage required is again

480
00:22:51,240 --> 00:22:54,369
a very, very small triage
as compared to SAST.

481
00:22:54,369 --> 00:22:55,699
What are the integration points?

482
00:22:55,700 --> 00:22:57,480
There's only one of course,

483
00:22:57,480 --> 00:23:01,438
as it is obvious it is CD
pipelines and not CI pipeline.

484
00:23:01,438 --> 00:23:05,000
So in the CD pipeline, most of these tools

485
00:23:05,000 --> 00:23:09,370
have orchestration layers based plugins,

486
00:23:09,370 --> 00:23:12,649
as well as you can always
automate using their CLI's

487
00:23:12,650 --> 00:23:15,590
in CD pipeline.

488
00:23:15,590 --> 00:23:16,656
What are the challenges?

489
00:23:16,656 --> 00:23:21,370
Of course, as I said earlier,
manual penetration testing

490
00:23:21,370 --> 00:23:24,870
is something is not gonna go away for next

491
00:23:24,870 --> 00:23:27,560
at least seven to 10 years, okay?

492
00:23:27,560 --> 00:23:29,000
If someone is telling they automated

493
00:23:29,000 --> 00:23:33,720
their penetration testing
part or DAST track,

494
00:23:33,720 --> 00:23:35,670
you can take it with a pinch of salt

495
00:23:35,670 --> 00:23:37,550
because it's not gonna happen.

496
00:23:37,550 --> 00:23:39,300
I've been asked this question many times

497
00:23:39,300 --> 00:23:41,510
and I keep saying the same thing.

498
00:23:41,510 --> 00:23:44,680
What are maybe the advancements
in AI or machine learning?

499
00:23:44,680 --> 00:23:46,370
We are at least five years, okay?

500
00:23:46,370 --> 00:23:49,484
at least five years away from that

501
00:23:49,484 --> 00:23:52,082
completely automated pen
testing or DAST tool.

502
00:23:53,020 --> 00:23:56,540
So the challenge is, these
automated tools actually can find

503
00:23:56,540 --> 00:23:58,393
only certain type of vulnerabilities.

504
00:23:58,393 --> 00:24:01,695
Usually, those are low
hanging fruit, right?

505
00:24:01,695 --> 00:24:04,664
And that's where the
manual penetration testing

506
00:24:04,664 --> 00:24:05,950
comes in picture.

507
00:24:05,950 --> 00:24:08,320
So to focus on the
critical vulnerabilities

508
00:24:08,320 --> 00:24:12,159
to focus on application logic
related vulnerabilities.

509
00:24:12,160 --> 00:24:15,140
That's where the manual
pen testing is required

510
00:24:15,140 --> 00:24:17,383
and that's basically a
challenge of, you know,

511
00:24:17,383 --> 00:24:18,500
this DAST track.

512
00:24:18,500 --> 00:24:20,090
What is the tip here?

513
00:24:20,090 --> 00:24:23,937
focus on missing data
validation, injection attacks.

514
00:24:23,937 --> 00:24:28,600
These are very easily detectable
by these automated tools,

515
00:24:28,600 --> 00:24:31,340
burp suite or SAP or any other such tool.

516
00:24:31,340 --> 00:24:36,340
So ensure that you focus on
those, you increase the payloads

517
00:24:36,410 --> 00:24:38,480
that you give as input to the tool

518
00:24:38,480 --> 00:24:41,863
and ensure that it can identify those

519
00:24:41,863 --> 00:24:45,290
and you focus it for remediation as well.

520
00:24:45,290 --> 00:24:46,810
So that's the second track.

521
00:24:46,810 --> 00:24:49,590
The third track, software
composition analysis

522
00:24:49,590 --> 00:24:52,429
or Open Source Software security or OSS,

523
00:24:52,430 --> 00:24:53,910
either SEO or SS.

524
00:24:53,910 --> 00:24:56,200
It basically focus on as the name suggests

525
00:24:56,200 --> 00:24:57,900
open source software libraries, right?

526
00:24:57,900 --> 00:24:59,180
So that's the input.

527
00:24:59,180 --> 00:25:02,247
So all the dependencies
from your source code,

528
00:25:02,247 --> 00:25:05,830
you know, that's the
input that it requires

529
00:25:05,830 --> 00:25:06,949
in order to analyze.

530
00:25:06,950 --> 00:25:08,860
And output is, of course,
security vulnerabilities

531
00:25:08,860 --> 00:25:11,419
in your third party open source libraries.

532
00:25:11,420 --> 00:25:14,940
Now, the way these tools work is,

533
00:25:14,940 --> 00:25:17,400
what they do is they take
a particular library,

534
00:25:17,400 --> 00:25:19,660
open source library, or third
party library, whatever,

535
00:25:19,660 --> 00:25:21,630
you know, and then they
look at all the versions

536
00:25:21,630 --> 00:25:23,270
that are published, right?

537
00:25:23,270 --> 00:25:26,280
And then for each of these
version, they create one hash,

538
00:25:26,280 --> 00:25:28,770
and then they do their
analysis and they say,

539
00:25:28,770 --> 00:25:32,097
Okay, for this x, say, lock for Z 1.4.1

540
00:25:33,541 --> 00:25:37,463
there are two CVS reported
for this vulnerability,

541
00:25:37,463 --> 00:25:39,577
and then they, you know, lock
this in their database, right?

542
00:25:40,687 --> 00:25:43,100
And then, when you run this scan

543
00:25:43,100 --> 00:25:45,850
with software composition analysis tool,

544
00:25:45,850 --> 00:25:48,332
what it does is it identifies
which library that was

545
00:25:48,333 --> 00:25:52,030
and then it tries to
match the hash of that

546
00:25:52,030 --> 00:25:53,010
with their database.

547
00:25:53,010 --> 00:25:55,010
And if it matches, it basically says,

548
00:25:55,010 --> 00:25:58,980
Hey, your version, your
library that you're using

549
00:25:58,980 --> 00:26:00,730
the version that you're using

550
00:26:00,730 --> 00:26:03,710
is infected with these vulnerabilities.

551
00:26:03,710 --> 00:26:05,690
It gives a list of CD's, right?

552
00:26:05,690 --> 00:26:07,270
So that's how they work.

553
00:26:07,270 --> 00:26:11,050
When it is so straightforward,
do we need the triage?

554
00:26:11,050 --> 00:26:12,710
Of course, you need triage,

555
00:26:12,710 --> 00:26:15,973
but again next set of
triage is very limited.

556
00:26:16,810 --> 00:26:20,503
The triage is basically I give an example

557
00:26:20,503 --> 00:26:23,669
of impacted and applicable, right?

558
00:26:23,670 --> 00:26:25,520
these two are different words

559
00:26:25,520 --> 00:26:28,620
and they have very good
meaning in this track.

560
00:26:28,620 --> 00:26:31,226
So, in fact it is, if you
are using this library

561
00:26:31,227 --> 00:26:34,770
and this version, the CVS are reported,

562
00:26:34,770 --> 00:26:36,931
the tool is gonna say
it is impacted, right?

563
00:26:36,931 --> 00:26:40,660
But whether it is applicable
is decided by the fine print,

564
00:26:40,660 --> 00:26:44,150
you know, you're to look at
the CV, understand, you know,

565
00:26:44,150 --> 00:26:46,590
in what case, this is vulnerable.

566
00:26:46,590 --> 00:26:51,470
And imagine if its use of one
or two APS within that library

567
00:26:51,470 --> 00:26:53,063
is making it one level.

568
00:26:53,063 --> 00:26:55,710
And if your development
team is saying that, hey,

569
00:26:55,710 --> 00:26:57,840
we are not using these
two libraries, or sorry,

570
00:26:57,840 --> 00:27:00,310
these two API's within that library,

571
00:27:00,310 --> 00:27:02,877
Then in that case, you
know, you can skip this

572
00:27:02,877 --> 00:27:07,169
and it's not applicable
for your development team.

573
00:27:07,170 --> 00:27:10,540
That's the triage sometimes
you have to undergo.

574
00:27:10,540 --> 00:27:12,643
What about the integration points?

575
00:27:12,643 --> 00:27:16,742
This domain is really
very mature, I would say.

576
00:27:16,742 --> 00:27:21,540
They have identified all
possible integration points

577
00:27:21,540 --> 00:27:24,263
that you can think of,
made by either plugin,

578
00:27:25,670 --> 00:27:30,440
CI pipeline hosted plugins,
Artifact repo, you know,

579
00:27:30,440 --> 00:27:32,190
so once you build artifact, you push it

580
00:27:32,190 --> 00:27:35,560
to some artifact repository.

581
00:27:35,560 --> 00:27:39,750
So they have the scanning
enabled there as well.

582
00:27:39,750 --> 00:27:42,800
So it's like end to end, you start with ID

583
00:27:42,800 --> 00:27:47,198
and end with the artifact, repo base scan.

584
00:27:47,199 --> 00:27:50,000
All these different
dimensions are well taken care

585
00:27:50,000 --> 00:27:52,200
so they have one or the other option.

586
00:27:52,200 --> 00:27:54,690
And you can use that for scan.

587
00:27:54,690 --> 00:27:57,840
Challenges, I told you,
the triage sometimes

588
00:27:57,840 --> 00:27:59,510
can be challenging sometimes

589
00:27:59,510 --> 00:28:00,969
I've seen these tools.

590
00:28:00,969 --> 00:28:04,630
If the database is not updated enough,

591
00:28:04,630 --> 00:28:06,900
which is very, very rare case,

592
00:28:06,900 --> 00:28:09,238
then some of the vulnerabilities
can be missed out,

593
00:28:09,238 --> 00:28:12,740
unless there is a zero day, right?

594
00:28:12,740 --> 00:28:14,820
It happened like today
morning, for example.

595
00:28:14,820 --> 00:28:17,770
In that case, the tool
probably would not be aware,

596
00:28:17,770 --> 00:28:20,830
but vendors are normally very
quick to give you feedback

597
00:28:20,830 --> 00:28:23,379
saying that, hey, if
you're using this library,

598
00:28:23,380 --> 00:28:27,680
this open source issue
that has been discovered

599
00:28:27,680 --> 00:28:29,100
and you're impacted.

600
00:28:29,100 --> 00:28:30,310
Yeah, so that's the challenge.

601
00:28:30,310 --> 00:28:32,100
And what about tips?

602
00:28:32,100 --> 00:28:36,110
So it's very important
that we need to convince

603
00:28:36,110 --> 00:28:38,060
our development teams about the gravity

604
00:28:38,060 --> 00:28:40,837
of such open source software challenges

605
00:28:40,837 --> 00:28:42,860
coming from these vulnerabilities.

606
00:28:42,860 --> 00:28:47,860
The reason being the 2017
case of Equifax right?

607
00:28:48,088 --> 00:28:52,520
So there was a patch, the team actually

608
00:28:52,520 --> 00:28:55,590
didn't care enough to apply
the patch and then you know,

609
00:28:55,590 --> 00:28:58,570
it wasn't struts to
library, and then you know,

610
00:28:58,570 --> 00:28:59,980
the rest of the history.

611
00:28:59,980 --> 00:29:03,350
So let's not be the second
Equifax and, you know,

612
00:29:03,350 --> 00:29:07,070
give our developers actually
enough knowledge and awareness

613
00:29:07,070 --> 00:29:08,500
about these vulnerabilities,

614
00:29:08,500 --> 00:29:11,160
make them fix those in a timely fashion.

615
00:29:11,160 --> 00:29:12,506
Enable production monitoring.

616
00:29:12,506 --> 00:29:17,355
so that's even beyond
artifact repo scan, right?

617
00:29:17,355 --> 00:29:19,920
So what happens normally is you build,

618
00:29:19,920 --> 00:29:23,684
you put the production ready, build

619
00:29:23,684 --> 00:29:26,190
in a particular folder, right?

620
00:29:26,190 --> 00:29:29,250
in the logical folder in
your artifact repository.

621
00:29:29,250 --> 00:29:31,350
That goes to the deployment in production.

622
00:29:31,350 --> 00:29:33,429
So as long as you are
actually monitoring this

623
00:29:33,430 --> 00:29:37,160
on a daily basis, so most of
these tools in this track,

624
00:29:37,160 --> 00:29:38,840
have this production monitoring feature.

625
00:29:38,840 --> 00:29:41,000
So enable it so that you may think,

626
00:29:41,000 --> 00:29:42,680
Hey, I'm not doing any change there.

627
00:29:42,680 --> 00:29:45,610
So I'm secure, so it's not the case.

628
00:29:45,610 --> 00:29:47,340
Some developers sitting
somewhere, you know,

629
00:29:47,340 --> 00:29:48,886
may have discovered a vulnerability

630
00:29:48,886 --> 00:29:52,409
in the library that you have
put in production, right?

631
00:29:52,410 --> 00:29:55,118
In such case, this
production monitoring feature

632
00:29:55,118 --> 00:29:58,260
actually, is very helpful.

633
00:29:58,260 --> 00:30:02,474
In my previous organization,
we had this issue discovered,

634
00:30:02,474 --> 00:30:05,480
and we were like running to identify

635
00:30:05,480 --> 00:30:06,810
who the stakeholders are

636
00:30:06,810 --> 00:30:10,698
and how to inform them what
action needs to be taken.

637
00:30:10,699 --> 00:30:15,699
Yeah, so we had a great time
doing all that turning around.

638
00:30:15,958 --> 00:30:19,800
So just ensure that, you know,

639
00:30:19,800 --> 00:30:23,899
you have enabled this
feature, and keep getting

640
00:30:23,900 --> 00:30:26,760
the alerts from it, and
act on those alerts.

641
00:30:26,760 --> 00:30:28,097
That's even more important.

642
00:30:28,097 --> 00:30:30,210
Container security, the next track.

643
00:30:30,210 --> 00:30:32,730
Again, as the name suggests,
the input is of course,

644
00:30:32,730 --> 00:30:34,588
either a Docker image or a container.

645
00:30:34,588 --> 00:30:37,100
And output is the
different vulnerabilities

646
00:30:37,100 --> 00:30:39,419
coming from different
layers of these containers

647
00:30:39,420 --> 00:30:41,650
or even sometimes the platform right?

648
00:30:41,650 --> 00:30:46,590
AKE's or Kubernetes, or whatever
platform that you're using

649
00:30:46,590 --> 00:30:48,919
for hosting your containers.

650
00:30:48,920 --> 00:30:52,297
Triage yes, sometimes we do need triages

651
00:30:52,297 --> 00:30:55,070
because of challenges
with regard to the way

652
00:30:55,070 --> 00:30:57,658
your container is been formed, right?

653
00:30:57,658 --> 00:31:01,399
So imagine you have a
library say x library

654
00:31:01,400 --> 00:31:02,700
in your base OS,

655
00:31:02,700 --> 00:31:06,328
and then the developer is
using the same library in his,

656
00:31:06,328 --> 00:31:10,203
you know, other layer
in the same container.

657
00:31:12,147 --> 00:31:14,800
And the issue would be to
actually identify the issue

658
00:31:16,030 --> 00:31:17,600
in both of these.

659
00:31:17,600 --> 00:31:20,830
And what you can fix is the library

660
00:31:20,830 --> 00:31:23,433
which is at the higher layer, not the one

661
00:31:23,433 --> 00:31:25,290
which is at the base or sled.

662
00:31:25,290 --> 00:31:27,200
Either you have to change
the whole, you know,

663
00:31:27,200 --> 00:31:29,860
Docker image itself, or you have to find

664
00:31:29,860 --> 00:31:31,209
some other alternative approach.

665
00:31:31,210 --> 00:31:35,870
So that's the challenge
that we face sometimes.

666
00:31:35,870 --> 00:31:38,879
But most times, these tools
are really, really good.

667
00:31:38,880 --> 00:31:40,785
What about the integration points?

668
00:31:40,785 --> 00:31:43,770
IDE plugin, CI pipelines.

669
00:31:43,770 --> 00:31:45,310
Integration, yes.

670
00:31:45,310 --> 00:31:47,419
As well as Container
Registry repo scanning.

671
00:31:47,420 --> 00:31:52,174
So even when you're, you
created a Docker image,

672
00:31:52,174 --> 00:31:53,650
you pull the Docker
image, you can scan it,

673
00:31:53,650 --> 00:31:56,980
you're pulled into a Docker
image put your, whatever

674
00:31:56,980 --> 00:32:01,270
your file or application
binary on top of Docker form

675
00:32:01,270 --> 00:32:04,240
the container, you can put
it in the Container Registry

676
00:32:04,240 --> 00:32:08,240
while deciding that these
Docker images or containers

677
00:32:08,240 --> 00:32:10,860
can be vulnerable, right?

678
00:32:10,860 --> 00:32:11,969
because again, as I said,

679
00:32:11,970 --> 00:32:14,155
just like the third party libraries.

680
00:32:14,155 --> 00:32:18,389
So, you need to enable these regular scans

681
00:32:18,390 --> 00:32:20,120
in the Container Registry.

682
00:32:20,120 --> 00:32:24,949
Well as most of the times
these vendors in this track

683
00:32:24,950 --> 00:32:29,190
have one time scanning that
means either as a sidecar

684
00:32:29,190 --> 00:32:33,360
or through a daemon set
or these micro scanners

685
00:32:33,360 --> 00:32:34,899
in certain tools, right?

686
00:32:34,900 --> 00:32:38,030
so they sit next to
your container or a pod,

687
00:32:38,030 --> 00:32:40,730
and then they keep watching, keep scanning

688
00:32:40,730 --> 00:32:43,150
and the moment you know
something unusual happens

689
00:32:43,150 --> 00:32:45,370
they are either based on
how you're configured it,

690
00:32:45,370 --> 00:32:47,954
they can either alert you
or they can quarantine

691
00:32:47,954 --> 00:32:51,940
that particular part and save the day.

692
00:32:51,940 --> 00:32:53,830
Again, just like open source libraries,

693
00:32:53,830 --> 00:32:56,939
sometimes it is difficult to
convince development teams

694
00:32:56,940 --> 00:32:59,640
the gravity of these container
level vulnerabilities

695
00:32:59,640 --> 00:33:01,990
because they think that
vulnerabilities can probably come

696
00:33:01,990 --> 00:33:04,180
only in the application
code that they have written

697
00:33:04,180 --> 00:33:07,280
and not the less because
they think those layers

698
00:33:07,280 --> 00:33:10,760
are very deep down, and
hackers cannot even access it.

699
00:33:10,760 --> 00:33:14,110
But the reality is completely different.

700
00:33:14,110 --> 00:33:16,862
So you need to probably
convince development teams,

701
00:33:16,863 --> 00:33:20,070
on the gravity of that part.

702
00:33:20,070 --> 00:33:23,020
Next enable production
monitoring, I talked about this.

703
00:33:23,020 --> 00:33:25,304
This is a very, very important feature.

704
00:33:25,304 --> 00:33:28,480
Most of the tools commercial
tool, at least have this.

705
00:33:28,480 --> 00:33:32,050
I think open source tools
do have these features,

706
00:33:32,050 --> 00:33:35,530
but not in all, so ensure
that when you buy a tool

707
00:33:35,530 --> 00:33:37,820
or finalize a tool, you have this

708
00:33:37,820 --> 00:33:40,620
as part of your success criteria.

709
00:33:40,620 --> 00:33:42,073
Yeah, so the final slide.

710
00:33:42,074 --> 00:33:44,750
Did we cover enough ground?

711
00:33:44,750 --> 00:33:47,970
obviously, the answer is, you know, right?

712
00:33:47,970 --> 00:33:51,230
It's not, it's not the case
and it can never be the case.

713
00:33:51,230 --> 00:33:53,780
Because DevSecOps ops is a journey.

714
00:33:53,780 --> 00:33:58,780
And this journey basically,
is a process right?

715
00:33:59,260 --> 00:34:01,140
New vulnerabilities keep coming in,

716
00:34:01,140 --> 00:34:04,540
they have to have upgraded
tools, upgrade processes,

717
00:34:04,540 --> 00:34:06,520
upgraded awareness programs.

718
00:34:06,520 --> 00:34:09,668
And this is an ongoing
job, you know, for us

719
00:34:09,668 --> 00:34:13,179
to just keep moving,
you know, keep learning,

720
00:34:13,179 --> 00:34:17,449
keep moving, keep integrating
these new learnings

721
00:34:17,449 --> 00:34:19,786
within the process, within the tool.

722
00:34:19,786 --> 00:34:21,520
And the journey never stops.

723
00:34:21,520 --> 00:34:25,280
The other tracks that
Prudential has actually started

724
00:34:25,280 --> 00:34:27,520
and working on with varying maturity.

725
00:34:27,520 --> 00:34:31,509
Some tracks are very mature,
some are some, as I said,

726
00:34:31,510 --> 00:34:33,310
we are going to see, right?

727
00:34:33,310 --> 00:34:35,578
So yeah, we keep learning.

728
00:34:35,578 --> 00:34:39,380
We keep learning from others.

729
00:34:39,380 --> 00:34:41,980
We keep learning from the
other development teams,

730
00:34:41,980 --> 00:34:43,168
other organizations.

731
00:34:43,168 --> 00:34:45,690
That's the precise reason why I'm here

732
00:34:45,690 --> 00:34:47,130
sharing our experience.

733
00:34:47,130 --> 00:34:50,650
So I hope you get some insights from this

734
00:34:50,650 --> 00:34:54,030
and hope, whatever time you spent here

735
00:34:54,030 --> 00:34:55,630
is useful in some way.

736
00:34:55,630 --> 00:34:57,870
Thank you and have a good day ahead

737
00:34:57,870 --> 00:34:59,370
or Good evening or Good night.

