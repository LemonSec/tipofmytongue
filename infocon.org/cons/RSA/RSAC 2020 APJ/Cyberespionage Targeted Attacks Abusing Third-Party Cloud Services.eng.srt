1
00:00:08,890 --> 00:00:10,270
- [Narrator] Think you're special?

2
00:00:10,270 --> 00:00:11,510
One of the kind?

3
00:00:11,510 --> 00:00:12,690
We agreed.

4
00:00:12,690 --> 00:00:16,538
The way you pursue your digital
ambitions is unique to you,

5
00:00:16,538 --> 00:00:19,020
and so is your appetite for digital risk.

6
00:00:19,020 --> 00:00:21,180
Whether you're hyper-connecting
your ecosystem,

7
00:00:21,180 --> 00:00:23,340
empowering a distributed workforce,

8
00:00:23,340 --> 00:00:26,390
rapidly leveraging cloud, IOT, AI,

9
00:00:26,390 --> 00:00:28,170
or other new technologies,

10
00:00:28,170 --> 00:00:31,860
RSA is here to help you
manage digital risk your way

11
00:00:31,860 --> 00:00:34,060
at every stage of your journey.

12
00:00:34,060 --> 00:00:36,325
So go ahead, be you.

13
00:00:36,325 --> 00:00:38,825
(piano music)

14
00:00:44,140 --> 00:00:47,720
- Hello, and welcome to
Cyberespionage Targeted Attacks,

15
00:00:47,720 --> 00:00:50,310
Abusing Third Party Cloud Services.

16
00:00:50,310 --> 00:00:53,210
If you're joining us live, our
speaker is in the Slido chat

17
00:00:53,210 --> 00:00:56,560
discussion area answering
your questions right now.

18
00:00:56,560 --> 00:00:58,120
For audio or video issues,

19
00:00:58,120 --> 00:01:00,660
click the technical support button below.

20
00:01:00,660 --> 00:01:03,000
I'd now like to turn it over to Jaromir

21
00:01:03,000 --> 00:01:04,153
for the presentation.

22
00:01:06,240 --> 00:01:07,860
- Hello.

23
00:01:07,860 --> 00:01:10,110
So this is the outline of my presentation.

24
00:01:10,110 --> 00:01:14,150
So in the beginning, I will
tell you a short introduction

25
00:01:14,150 --> 00:01:19,150
about the general comparison of two kinds

26
00:01:19,180 --> 00:01:22,360
of malware infrastructure,
which we can see in malware,

27
00:01:22,360 --> 00:01:25,000
it can be either custom or cloud-based.

28
00:01:25,000 --> 00:01:27,080
And after this quick introduction,

29
00:01:27,080 --> 00:01:29,450
I will talk about several APT cases,

30
00:01:29,450 --> 00:01:33,070
which abuse the
cloud-based infrastructure.

31
00:01:33,070 --> 00:01:37,800
So the idea of using cloud
services and abusing the services

32
00:01:37,800 --> 00:01:40,830
in malware is not new.

33
00:01:40,830 --> 00:01:43,140
There are some presentations in the past

34
00:01:43,140 --> 00:01:44,940
and some research done in the past.

35
00:01:44,940 --> 00:01:49,940
However, this talk will be
special because we will focus on

36
00:01:50,090 --> 00:01:54,920
abusing of cloud services in
context of targeted attacks.

37
00:01:54,920 --> 00:01:57,940
So the goal of my
presentation is to show you

38
00:01:57,940 --> 00:02:02,940
several real examples of
the real APT threat attacks.

39
00:02:03,270 --> 00:02:05,920
And then we will see
like what it means for us

40
00:02:05,920 --> 00:02:09,110
as researchers or defenders
and how can we leverage

41
00:02:09,110 --> 00:02:13,230
or use the cloud services
for our benefits.

42
00:02:13,230 --> 00:02:15,140
So now let's quickly review

43
00:02:15,140 --> 00:02:18,510
what is custom malware infrastructure.

44
00:02:18,510 --> 00:02:22,140
So in this case, the malware developer,

45
00:02:22,140 --> 00:02:24,119
they develop basically everything

46
00:02:24,120 --> 00:02:26,460
but then also they register domain names,

47
00:02:26,460 --> 00:02:30,050
they prepare their own hosting,

48
00:02:30,050 --> 00:02:33,530
they just develop their
C&C communication protocol.

49
00:02:33,530 --> 00:02:37,250
They develop their own backend services,

50
00:02:37,250 --> 00:02:39,340
backend script, control panels,

51
00:02:39,340 --> 00:02:43,873
they install and maintain their
own C&C servers and so on.

52
00:02:45,100 --> 00:02:46,710
This approach has some advantages.

53
00:02:46,710 --> 00:02:48,950
So basically they can
implement whatever they want,

54
00:02:48,950 --> 00:02:51,410
whatever they like,

55
00:02:51,410 --> 00:02:54,549
they're not limited by
almost anything else,

56
00:02:54,550 --> 00:02:57,430
but this approach has some disadvantages

57
00:02:57,430 --> 00:03:00,570
and especially, it might be
easier to monitor, block,

58
00:03:00,570 --> 00:03:05,352
or sinkhole for researchers
or law enforcement.

59
00:03:06,290 --> 00:03:09,940
And there's also higher
probability that these developers

60
00:03:09,940 --> 00:03:12,530
make a mistake, make a vulnerability

61
00:03:12,530 --> 00:03:16,250
and their backend service can be hacked,

62
00:03:16,250 --> 00:03:20,050
and basically they can have some problems

63
00:03:20,050 --> 00:03:21,150
with their service.

64
00:03:21,150 --> 00:03:23,290
And also there might be
problems with reliability

65
00:03:23,290 --> 00:03:24,329
in different conditions,

66
00:03:24,330 --> 00:03:27,340
problems with overloading, and so on.

67
00:03:27,340 --> 00:03:31,620
So what are the cloud
malware infrastructure?

68
00:03:31,620 --> 00:03:35,480
So we can have some
malware which don't develop

69
00:03:35,480 --> 00:03:38,220
their own infrastructure,
their own backend,

70
00:03:38,220 --> 00:03:41,960
however, they rely on
knowledgeable third party services.

71
00:03:41,960 --> 00:03:45,940
These services can be known services,

72
00:03:45,940 --> 00:03:50,000
for example, for file
sharing, for text storage,

73
00:03:50,000 --> 00:03:52,760
for communication and collaboration tools,

74
00:03:52,760 --> 00:03:55,399
they can be different
publishing platforms,

75
00:03:55,400 --> 00:03:59,540
they can be, for example,
some content formatting

76
00:03:59,540 --> 00:04:03,380
and feed aggregating tools, and so on.

77
00:04:03,380 --> 00:04:06,260
They're usually free or
it's paid very cheap,

78
00:04:06,260 --> 00:04:08,399
they use API for communication,

79
00:04:08,400 --> 00:04:12,590
they have much higher reliability
and these kind of services

80
00:04:12,590 --> 00:04:14,670
are harder to block because if you block

81
00:04:14,670 --> 00:04:19,039
some of the legitimate
service, your also block usage,

82
00:04:19,040 --> 00:04:23,510
the service from use of
legitimate like normal users.

83
00:04:23,510 --> 00:04:25,640
So these are the advantages.

84
00:04:25,640 --> 00:04:28,590
So disadvantage that we would mention,

85
00:04:28,590 --> 00:04:33,590
the smaller developers are
limited by the cloud service API.

86
00:04:33,880 --> 00:04:36,120
So this is very quick introduction.

87
00:04:36,120 --> 00:04:40,380
And now we will look
into selected APT cases,

88
00:04:40,380 --> 00:04:43,610
which I helped to research in the past.

89
00:04:43,610 --> 00:04:47,890
So I will mention like
four different APT groups.

90
00:04:47,890 --> 00:04:50,280
For each group, I will
show this kind of map,

91
00:04:50,280 --> 00:04:52,590
and this map shows the targeted countries.

92
00:04:52,590 --> 00:04:55,530
We should remember that
these threat actors,

93
00:04:55,530 --> 00:04:59,340
they're like APT groups,
they're like targeted attacks,

94
00:04:59,340 --> 00:05:00,960
so they are interested in espionage.

95
00:05:00,960 --> 00:05:04,229
So they mainly target like
various high profile companies

96
00:05:04,230 --> 00:05:05,490
in different industries.

97
00:05:05,490 --> 00:05:08,550
And very much they, all
of them like packing

98
00:05:08,550 --> 00:05:13,190
or all of them like
getting into the systems

99
00:05:13,190 --> 00:05:15,620
which belong to government
because governments

100
00:05:15,620 --> 00:05:17,840
might have interesting documents from then

101
00:05:19,865 --> 00:05:21,520
which might be exfiltrated.

102
00:05:21,520 --> 00:05:23,799
So for example, this Patchwork group,

103
00:05:23,800 --> 00:05:26,460
we know that it's based
somewhere in South Asia,

104
00:05:26,460 --> 00:05:29,489
and you can see that it mainly
targets countries in Asia.

105
00:05:29,490 --> 00:05:33,070
You can see like Pakistan,
China, Bangladesh, Sri Lanka,

106
00:05:33,070 --> 00:05:34,620
let's name a few of them.

107
00:05:34,620 --> 00:05:37,960
So from this projector,
I chose this backdoor.

108
00:05:37,960 --> 00:05:41,460
Backdoor is called Badnews,
and this is how it works.

109
00:05:41,460 --> 00:05:43,940
So we have the malware the middle

110
00:05:45,789 --> 00:05:49,460
and it sends the GET
request to some legitimate

111
00:05:49,460 --> 00:05:52,330
like services like Feed43, GitHub

112
00:05:52,330 --> 00:05:54,693
or WordPress, let's name a few.

113
00:05:58,594 --> 00:06:01,520
It returns encrypted configuration,

114
00:06:01,520 --> 00:06:03,580
this configuration gets encrypted,

115
00:06:03,580 --> 00:06:05,669
it reviews the real C&C server

116
00:06:05,670 --> 00:06:10,080
when the real communication
with the C&C server starts.

117
00:06:10,080 --> 00:06:12,099
So if we analyze the malware,

118
00:06:12,100 --> 00:06:15,430
we can see that it's executable,

119
00:06:15,430 --> 00:06:18,530
which contains the following strings,

120
00:06:18,530 --> 00:06:23,530
which starts with iuuqt
substrings when we decode it.

121
00:06:23,620 --> 00:06:26,620
So it means that decoding
in this case is subtracting

122
00:06:26,620 --> 00:06:31,620
value one from each character,
we get the URL addresses,

123
00:06:31,770 --> 00:06:34,510
as you can see below in the screenshot,

124
00:06:34,510 --> 00:06:37,480
like one link goes to GitHub user content,

125
00:06:37,480 --> 00:06:41,250
the other one to Feed43,
the third one to WordPress ,

126
00:06:41,250 --> 00:06:42,320
and so on.

127
00:06:42,320 --> 00:06:45,260
So basically when we visit
any of these websites,

128
00:06:45,260 --> 00:06:47,010
you always get something like this.

129
00:06:47,880 --> 00:06:51,680
There's always like some long string,

130
00:06:51,680 --> 00:06:54,230
which doesn't make sense in the beginning.

131
00:06:54,230 --> 00:06:56,380
But when we reverse, engineer the malware,

132
00:06:56,380 --> 00:07:00,820
we can find out that this
is base 64 encoded string,

133
00:07:00,820 --> 00:07:05,380
which later gets encrypted
either by XOL and ROL,

134
00:07:05,380 --> 00:07:09,070
or bit the rotation functions
or with some specific

135
00:07:09,070 --> 00:07:12,640
functions like encryption
functions like blowfish,

136
00:07:12,640 --> 00:07:16,983
and this leads to encrypting
the actual address.

137
00:07:18,080 --> 00:07:20,950
Because it uses GitHub,
so we can use GitHub

138
00:07:20,950 --> 00:07:24,960
for searching similar files,
so we know that in this case,

139
00:07:24,960 --> 00:07:27,099
the file name was xml.xml.

140
00:07:27,100 --> 00:07:31,460
So if we search for a similar XML file,

141
00:07:31,460 --> 00:07:34,250
we can, for example,
see what is the history.

142
00:07:34,250 --> 00:07:35,950
So every time the file was added,

143
00:07:35,950 --> 00:07:38,640
we can get different
configuration so we can get

144
00:07:38,640 --> 00:07:41,729
different IP addresses or URL addresses,

145
00:07:41,730 --> 00:07:46,730
or we can also search for
similar repositories in GitHub.

146
00:07:47,770 --> 00:07:50,849
So, for example, in this
case, we got 64 cases

147
00:07:50,850 --> 00:07:53,290
with the same xml.xml file,

148
00:07:53,290 --> 00:07:57,660
each of them may contain
the configuration,

149
00:07:57,660 --> 00:08:01,190
which can lead us to know
more about the victims

150
00:08:01,190 --> 00:08:04,490
and get more information about targets

151
00:08:04,490 --> 00:08:07,120
and about another campaigns,

152
00:08:07,120 --> 00:08:09,500
which this threat actor has done.

153
00:08:09,500 --> 00:08:12,370
Let's continue with another threat actor.

154
00:08:12,370 --> 00:08:14,560
We call him Confucius.

155
00:08:14,560 --> 00:08:17,580
Again, based in South Asia,
but this time you can see

156
00:08:17,580 --> 00:08:19,419
the highlighted country, just Pakistan.

157
00:08:19,420 --> 00:08:24,420
So they, for some reason
target some organizations

158
00:08:24,450 --> 00:08:27,229
in Pakistan, and from this projector

159
00:08:27,230 --> 00:08:31,537
I selected a few stealers
called Swissknife.

160
00:08:31,537 --> 00:08:35,620
And these stealers look like this.

161
00:08:35,620 --> 00:08:39,490
So they use another legitimate
service, in this case,

162
00:08:39,490 --> 00:08:43,330
Dropbox, can be any other
like cloud storage service,

163
00:08:43,330 --> 00:08:45,840
and this tool searches for files

164
00:08:45,840 --> 00:08:47,890
with specific file extensions.

165
00:08:47,890 --> 00:08:50,420
And every time this
file extension is found,

166
00:08:50,420 --> 00:08:53,443
it gets uploaded to its Dropbox storage.

167
00:08:54,850 --> 00:08:57,140
And as you can see, we
need, for uploading,

168
00:08:57,140 --> 00:09:01,970
we need some configuration,
some authorization variable.

169
00:09:01,970 --> 00:09:04,670
So what it means for us?

170
00:09:04,670 --> 00:09:08,839
So this malware, as we found
out, was written in Python.

171
00:09:08,840 --> 00:09:11,860
So it was quite easy to decompile it,

172
00:09:11,860 --> 00:09:14,750
and after decompilation, we
could see that in the beginning,

173
00:09:14,750 --> 00:09:18,841
there was like one variable with content

174
00:09:18,841 --> 00:09:20,870
and this content is API key.

175
00:09:20,870 --> 00:09:24,180
So this API key is used for communicating

176
00:09:24,180 --> 00:09:26,349
with the Dropbox storage.

177
00:09:26,350 --> 00:09:28,900
Below is the code for searching

178
00:09:28,900 --> 00:09:31,130
and enumerating all the files.

179
00:09:31,130 --> 00:09:35,640
So we just look into the documentation,

180
00:09:36,960 --> 00:09:38,840
we know that, for example, for Dropbox,

181
00:09:38,840 --> 00:09:40,470
we can get like libraries,

182
00:09:40,470 --> 00:09:45,070
we can write this kind of
simple code by ourselves.

183
00:09:45,070 --> 00:09:47,753
There's the function
code files_list_folder.

184
00:09:49,760 --> 00:09:51,537
It has several parameters.

185
00:09:51,537 --> 00:09:54,910
If you are, for example, very
interested in false parameter,

186
00:09:54,910 --> 00:09:59,829
which is called include_deleted,
by default is false,

187
00:09:59,830 --> 00:10:02,720
but when you enter the value true,

188
00:10:02,720 --> 00:10:04,250
we get this kind of information.

189
00:10:04,250 --> 00:10:09,250
So even though in the storage
found no data, no files,

190
00:10:09,420 --> 00:10:11,800
we still were able to
retrieve some metadata.

191
00:10:11,800 --> 00:10:14,469
So by knowing that for each victim,

192
00:10:14,470 --> 00:10:16,170
this malware creates new folder,

193
00:10:16,170 --> 00:10:19,229
so we can list all the
folders so we could know like

194
00:10:19,230 --> 00:10:22,490
how many victims are there likely be.

195
00:10:22,490 --> 00:10:27,480
And also we could enumerate
files which existed.

196
00:10:27,480 --> 00:10:30,040
So we could see like
what kind of file names

197
00:10:30,040 --> 00:10:32,522
were exfiltrated from infected machines.

198
00:10:33,820 --> 00:10:37,400
So this is like one version
of this Swissknife malware.

199
00:10:37,400 --> 00:10:41,300
There is also another one for
another service or pCloud,

200
00:10:41,300 --> 00:10:42,520
which was very similar.

201
00:10:42,520 --> 00:10:44,920
In this case, there was no API token,

202
00:10:44,920 --> 00:10:46,900
there was just login and password.

203
00:10:46,900 --> 00:10:51,430
So again, we can go search online,

204
00:10:51,430 --> 00:10:55,150
we can see there again,
some libraries in Python.

205
00:10:55,150 --> 00:10:58,220
So this is like from the GitHub page.

206
00:10:58,220 --> 00:11:01,860
There's also like example that
we can in these three lines,

207
00:11:01,860 --> 00:11:04,240
as long as we have the credentials,

208
00:11:04,240 --> 00:11:07,800
we can just write very
simple three-line code

209
00:11:07,800 --> 00:11:12,800
just to run it and get
the content of the files,

210
00:11:13,200 --> 00:11:15,520
which have been stolen and uploaded there.

211
00:11:15,520 --> 00:11:18,170
So after this malware was
again written in Python,

212
00:11:18,170 --> 00:11:20,459
after decompilation, we
could see in the first line,

213
00:11:20,460 --> 00:11:23,420
there was some email
address, some password.

214
00:11:23,420 --> 00:11:28,280
So we had credentials, and
even in case of these services

215
00:11:28,280 --> 00:11:29,850
where we have name and password,

216
00:11:29,850 --> 00:11:32,380
sometimes it's impossible to log in

217
00:11:32,380 --> 00:11:33,850
and see if there are any files,

218
00:11:33,850 --> 00:11:36,080
which thread actor is really there

219
00:11:36,970 --> 00:11:40,750
that there's also like web interface,

220
00:11:40,750 --> 00:11:42,980
there is also restore function.

221
00:11:42,980 --> 00:11:44,780
So if some files have been deleted

222
00:11:44,780 --> 00:11:48,813
and moved to trash permanently,
they can be restored.

223
00:11:49,990 --> 00:11:54,990
So this threat actor also
has malware on the Android,

224
00:11:55,330 --> 00:11:57,190
some kind of mobile malware.

225
00:11:57,190 --> 00:12:01,454
One of the piece of malware
is called TweetyChat.

226
00:12:01,454 --> 00:12:04,930
It was like backdoored
Android chat application.

227
00:12:04,930 --> 00:12:07,160
So in this case, it was kind
of like a hybrid approach.

228
00:12:07,160 --> 00:12:09,459
So there was the communication

229
00:12:09,460 --> 00:12:13,350
with like standard C&C server
multicloud in the beginning.

230
00:12:13,350 --> 00:12:17,080
But then there was also
like one of the commands,

231
00:12:17,080 --> 00:12:20,100
received commands was
updating AWS credentials.

232
00:12:20,100 --> 00:12:24,610
So for stealing, for
uploading stolen files,

233
00:12:24,610 --> 00:12:28,850
the C&C server had to send access keys,

234
00:12:28,850 --> 00:12:31,120
and these access keys had
been used for uploading

235
00:12:31,120 --> 00:12:33,303
bigger files into AWS.

236
00:12:35,730 --> 00:12:40,730
So we need like two keys, so
AWS access key and AWS secret.

237
00:12:41,060 --> 00:12:44,939
Both of them have been sent
to the malware from C&C server

238
00:12:46,610 --> 00:12:51,020
via cloud messaging, either
Google cloud messaging

239
00:12:51,020 --> 00:12:54,413
for old samples or newer
Firebase messaging.

240
00:12:55,860 --> 00:12:57,640
These are like screenshots of the code.

241
00:12:57,640 --> 00:13:02,640
The upper screenshot is the
code of cloud message receiver.

242
00:13:03,830 --> 00:13:08,830
And the code below is just,
it calls put object request,

243
00:13:09,500 --> 00:13:13,593
which basically uploads the
object to Amazon S3 bucket.

244
00:13:15,840 --> 00:13:19,850
So let's move to the third
threat actor I would like to

245
00:13:19,850 --> 00:13:22,750
talk about, it's called MuddyWater.

246
00:13:22,750 --> 00:13:24,360
And as you can see in the map,

247
00:13:24,360 --> 00:13:26,810
there's lots of the red
color in Middle East.

248
00:13:26,810 --> 00:13:30,699
So this threat actor is based
in Middle East and they like

249
00:13:30,700 --> 00:13:35,563
to target many countries
in the Middle East.

250
00:13:37,540 --> 00:13:41,949
So from this threat actor,
the first backdoor I chose

251
00:13:41,950 --> 00:13:43,390
is called CloudSTATS.

252
00:13:45,240 --> 00:13:49,480
This backdoor uses again,
Dropbox, but in a different way,

253
00:13:49,480 --> 00:13:53,700
it uses Dropbox or cloud or
it can use any cloud storage,

254
00:13:53,700 --> 00:13:55,520
but it can use it in a different way,

255
00:13:55,520 --> 00:13:58,140
it can use it as command
and control channel.

256
00:13:58,140 --> 00:14:01,430
So in this case, when
the victim gets infected,

257
00:14:01,430 --> 00:14:06,430
it computes some unique hash,
and this hash is the name,

258
00:14:06,740 --> 00:14:08,660
it serves as the name of this machine.

259
00:14:08,660 --> 00:14:12,390
So it uses this hash and
that's the extension.

260
00:14:12,390 --> 00:14:15,560
The extension in case of registering

261
00:14:15,560 --> 00:14:19,229
new infected machine as extension .reg.

262
00:14:19,230 --> 00:14:23,170
So it creates .reg file
in the cloud storage,

263
00:14:23,170 --> 00:14:28,170
then threat actor monitor,
or mother operator monitors

264
00:14:28,340 --> 00:14:30,180
this cloud storage,

265
00:14:30,180 --> 00:14:32,660
and if he wants to execute some commands,

266
00:14:32,660 --> 00:14:36,050
he puts this commands into .cmd file,

267
00:14:36,050 --> 00:14:39,589
uploads it to the C&C server,

268
00:14:39,590 --> 00:14:42,660
then the malware reads this cmd file,

269
00:14:42,660 --> 00:14:46,790
executes it, saves the
result into .res file

270
00:14:46,790 --> 00:14:49,573
and uploads the result
to the Dropbox again.

271
00:14:51,350 --> 00:14:52,890
When we look at the source code,

272
00:14:52,890 --> 00:14:54,250
you can see something like that.

273
00:14:54,250 --> 00:14:58,520
So we can clearly see that
this was written in PowerShell.

274
00:14:58,520 --> 00:15:01,140
And when looking at the code,
we are interested mainly

275
00:15:01,140 --> 00:15:05,319
in these kinds of information,
authorization variable,

276
00:15:05,320 --> 00:15:07,200
which I will describe later.

277
00:15:07,200 --> 00:15:09,883
And then URL address for downloading.

278
00:15:11,710 --> 00:15:15,720
For uploading function, we
are interested again for URL

279
00:15:15,720 --> 00:15:19,410
for uploading again,
authorization variable,

280
00:15:19,410 --> 00:15:21,449
and content of the data,

281
00:15:21,450 --> 00:15:25,593
which should be uploaded to the storage.

282
00:15:26,750 --> 00:15:31,490
So what is the authorization
or what is the API key?

283
00:15:31,490 --> 00:15:34,090
It was hardcoded again in smaller.

284
00:15:34,090 --> 00:15:39,090
So you can see the variables
$api0, $api1, so api1,

285
00:15:39,850 --> 00:15:43,150
so there'll be like two
hardcoded API tokens.

286
00:15:43,150 --> 00:15:46,120
So for us, it means that
we can read this token

287
00:15:46,120 --> 00:15:50,350
and use it with our own script
to monitor what's going on

288
00:15:50,350 --> 00:15:51,723
in this channel.

289
00:15:53,090 --> 00:15:54,600
And this is piece of code,

290
00:15:54,600 --> 00:15:57,590
which shows the names of the extensions,

291
00:15:57,590 --> 00:15:59,240
which I described before.

292
00:15:59,240 --> 00:16:00,830
Also, you can remember that there is like

293
00:16:00,830 --> 00:16:04,740
one more thing .prc, so
basically it's like locally

294
00:16:04,740 --> 00:16:09,360
after execution, there is
.prc, like the process result,

295
00:16:09,360 --> 00:16:10,773
which gets encoded,

296
00:16:14,200 --> 00:16:17,820
saved to the result file
address and uploaded.

297
00:16:17,820 --> 00:16:21,860
And these are two examples of
.register file or .reg file.

298
00:16:21,860 --> 00:16:26,860
So you can see there is the
operating system version,

299
00:16:27,710 --> 00:16:32,140
there is the business
architecture 32 or 64 bit,

300
00:16:32,140 --> 00:16:35,580
there is like the domain name, IP address,

301
00:16:35,580 --> 00:16:40,500
time of execution and the
result file is encoded,

302
00:16:40,500 --> 00:16:42,970
and after decoding, it can
look something like that.

303
00:16:42,970 --> 00:16:47,970
So to list all the files
in the user's desktop,

304
00:16:49,453 --> 00:16:52,423
you command and get this kind of result.

305
00:16:55,250 --> 00:17:00,170
For the MuddyWater, we also
mentioned like one more example,

306
00:17:00,170 --> 00:17:05,170
in this case, it's again,
Android mobile application,

307
00:17:05,520 --> 00:17:07,800
but in this case it uses telegram,

308
00:17:07,800 --> 00:17:12,470
but it uses also hybrid approach.

309
00:17:12,470 --> 00:17:17,470
So it uses both standard
approach like standard C&C server

310
00:17:17,920 --> 00:17:20,200
for retrieving the commands,

311
00:17:20,200 --> 00:17:24,589
but for uploading bigger
files of stolen information

312
00:17:24,589 --> 00:17:28,332
and stolen information, it
uses the telegram channel.

313
00:17:29,930 --> 00:17:32,060
So when we look inside the malware,

314
00:17:32,060 --> 00:17:34,629
we can search for some piece of code,

315
00:17:34,630 --> 00:17:36,330
which references to telegram.

316
00:17:36,330 --> 00:17:38,770
So we can see the screenshot
above there is the link

317
00:17:38,770 --> 00:17:43,139
to api.telegram.org,
which follows according

318
00:17:43,140 --> 00:17:47,470
to documentation with what's
token/ there's the method name.

319
00:17:47,470 --> 00:17:48,800
So in the screenshot above,

320
00:17:48,800 --> 00:17:53,310
we see the method name is sent message.

321
00:17:53,310 --> 00:17:55,393
So we find something like that.

322
00:17:57,170 --> 00:18:00,780
When you look again into the function

323
00:18:00,780 --> 00:18:03,950
which processes the commands,
it's named process command,

324
00:18:03,950 --> 00:18:07,790
we can see that there is a
switch with several cases,

325
00:18:07,790 --> 00:18:12,170
we can see case 55, 54, 53 52.

326
00:18:12,170 --> 00:18:15,870
And in two of these
cases, there is the link

327
00:18:15,870 --> 00:18:20,870
to api.telegram.org/ token and the method

328
00:18:21,960 --> 00:18:24,150
and below is the function
which gets executed.

329
00:18:24,150 --> 00:18:28,496
So you can see that there is
function called getSystemInfo

330
00:18:28,496 --> 00:18:30,480
or getSmartCallLog.

331
00:18:30,480 --> 00:18:33,313
So the names are quite self-explanatory.

332
00:18:34,460 --> 00:18:36,220
And it's also like one interesting feature

333
00:18:36,220 --> 00:18:38,950
or one useful feature
for the threat actor.

334
00:18:38,950 --> 00:18:43,090
There's basically once a day,
the malware collects all of

335
00:18:43,090 --> 00:18:47,100
the possible information like
the system info, contact info,

336
00:18:47,100 --> 00:18:49,909
installed application
info, call log and SMSs,

337
00:18:49,910 --> 00:18:52,940
and sends them to the telegram channel.

338
00:18:52,940 --> 00:18:55,440
This is useful if the threat actor,

339
00:18:55,440 --> 00:18:58,750
for some reason, loses
control of the C&C server.

340
00:18:58,750 --> 00:19:01,790
And if this malware is still
installed in the phone,

341
00:19:01,790 --> 00:19:05,190
the mobile phone, it still
gets once a day to collect

342
00:19:05,190 --> 00:19:08,853
all this information and
send it to telegram channel.

343
00:19:12,350 --> 00:19:15,500
One interesting thing when
talking about telegram

344
00:19:15,500 --> 00:19:20,500
is that we can display the
metadata of the telegram account,

345
00:19:20,820 --> 00:19:24,360
and in this metadata, we're
usually interested in username

346
00:19:24,360 --> 00:19:27,520
or maybe language code
can be interesting for us

347
00:19:27,520 --> 00:19:32,520
because in this case, the user
set the language to false fa,

348
00:19:33,710 --> 00:19:37,930
which might give us a hint
like where the threat actor

349
00:19:37,930 --> 00:19:39,510
might come from.

350
00:19:39,510 --> 00:19:42,290
But of course, we always have to remember

351
00:19:42,290 --> 00:19:46,760
that this information can be
fake, so it can be manipulated.

352
00:19:46,760 --> 00:19:50,403
So we shouldn't believe it all the time.

353
00:19:52,200 --> 00:19:55,350
Let's go for the fourth threat actor

354
00:19:55,350 --> 00:19:56,840
I would like to mention.

355
00:19:56,840 --> 00:20:01,419
We call it SLUB, and it's interesting,

356
00:20:01,420 --> 00:20:05,313
or this threat actor has
some interest in North Korea.

357
00:20:07,170 --> 00:20:09,710
And this case is I would
say the most interesting

358
00:20:09,710 --> 00:20:12,640
from all these cases,
which I mentioned today,

359
00:20:12,640 --> 00:20:16,090
because it has, I will
talk about two versions,

360
00:20:16,090 --> 00:20:16,923
in version one,

361
00:20:16,923 --> 00:20:20,837
it uses these three
different characteristics.

362
00:20:23,130 --> 00:20:27,130
So the first one is gist
for requesting commands

363
00:20:27,130 --> 00:20:28,810
to be executed.

364
00:20:28,810 --> 00:20:33,810
The second one is Slack,
which is used for uploading

365
00:20:35,620 --> 00:20:39,300
or for sending the results
of received commands.

366
00:20:39,300 --> 00:20:43,990
And in case that some bigger
file needs to be exfiltrated,

367
00:20:43,990 --> 00:20:47,163
it uses this file service.

368
00:20:48,890 --> 00:20:51,430
So we know that this
malware has been delivered

369
00:20:51,430 --> 00:20:54,170
via waterholding on one website,

370
00:20:54,170 --> 00:20:56,543
which was about or related to North Korea.

371
00:20:57,940 --> 00:21:02,830
When we observed these
gist, or gits snippets,

372
00:21:02,830 --> 00:21:06,840
we saw something like that,
that there is this gistfile1.txt

373
00:21:06,840 --> 00:21:08,250
and there is the list of commands

374
00:21:08,250 --> 00:21:09,850
which are quite self-explanatory

375
00:21:10,770 --> 00:21:15,330
and these commands, they can
be activated or deactivated.

376
00:21:15,330 --> 00:21:19,510
So if the command is activated,
so it starts with these

377
00:21:19,510 --> 00:21:23,273
two symbols, this caret symbol
and dollar symbol at the end.

378
00:21:24,180 --> 00:21:26,890
And for example, in this case, we can see

379
00:21:26,890 --> 00:21:30,010
that capture command gets executed.

380
00:21:30,010 --> 00:21:32,610
So it means taking the screenshot.

381
00:21:32,610 --> 00:21:36,280
Task list is listing front processes,

382
00:21:36,280 --> 00:21:39,137
drive list is list of this and file list

383
00:21:39,137 --> 00:21:42,663
is the list of files in the directory.

384
00:21:44,950 --> 00:21:49,950
For Slack, we, again,
similar to Dropbox and eCloud

385
00:21:50,430 --> 00:21:53,640
and others, we also, we
need less token again,

386
00:21:53,640 --> 00:21:57,420
and this token is hardcoded in the binary.

387
00:21:57,420 --> 00:22:00,090
And this token split into small strings

388
00:22:00,090 --> 00:22:05,090
so we need to take these strings,
concatenate them together,

389
00:22:05,100 --> 00:22:08,372
and this is what it will be
our token for communication.

390
00:22:09,733 --> 00:22:14,733
And exfiltration via file.io,
it's very, very useful

391
00:22:15,170 --> 00:22:18,850
because once the file gets
uploaded to the service,

392
00:22:18,850 --> 00:22:21,840
after the first download,
after it is downloaded,

393
00:22:21,840 --> 00:22:25,260
this file gets automatically
disabled or completely deleted.

394
00:22:25,260 --> 00:22:30,260
So basically it's like
one-time storage for files.

395
00:22:30,530 --> 00:22:33,716
Later we have seen version
of this SLUB version two

396
00:22:33,717 --> 00:22:36,190
and they made the one
change because they stopped

397
00:22:36,190 --> 00:22:38,110
using this git GitHub,

398
00:22:38,110 --> 00:22:40,870
they didn't use it anymore
because the previous solution had

399
00:22:40,870 --> 00:22:43,919
one problem that there was
only like one gist repository

400
00:22:43,920 --> 00:22:48,840
and it was executed on all
the victims at the same time.

401
00:22:48,840 --> 00:22:53,300
So instead of that, in version
two, they use the Slack

402
00:22:53,300 --> 00:22:57,169
for sending and receiving the commands.

403
00:22:57,170 --> 00:23:00,220
So for the Slack, if threat
actor wants to execute

404
00:23:00,220 --> 00:23:05,220
a command, they write the message
and pin it to the channel.

405
00:23:05,910 --> 00:23:08,960
Then the victim machine
reads this message,

406
00:23:08,960 --> 00:23:12,823
executes it and send the
results back to this channel.

407
00:23:16,010 --> 00:23:19,140
Yes, let's see it in the schematics again.

408
00:23:19,140 --> 00:23:22,240
So Slack again is for communication.

409
00:23:26,140 --> 00:23:30,400
Yes, file.io is for uploading stolen files

410
00:23:30,400 --> 00:23:33,080
and just like one more feature using

411
00:23:33,080 --> 00:23:36,841
this micro-blogging service called Pen.io,

412
00:23:36,841 --> 00:23:41,610
and it is used for updating Slack tokens.

413
00:23:41,610 --> 00:23:45,139
Because we, as researchers,
we find some tokens

414
00:23:45,140 --> 00:23:47,803
which are abusing the
service, we can report them,

415
00:23:49,284 --> 00:23:52,440
and these are code companies
can disable these tokens.

416
00:23:52,440 --> 00:23:55,580
So for the threat actor, it
means that if these tokens

417
00:23:55,580 --> 00:23:59,850
get disabled, they will lose
access to their malware,

418
00:23:59,850 --> 00:24:01,129
to their effective machines,

419
00:24:01,130 --> 00:24:04,480
so they implement this kind of fallback.

420
00:24:04,480 --> 00:24:07,340
So if their token get disabled,

421
00:24:07,340 --> 00:24:10,790
they can use the service
for updating the tokens.

422
00:24:10,790 --> 00:24:15,113
So the malware regularly
reads from this website.

423
00:24:16,210 --> 00:24:19,530
This is how the website
looks like by default.

424
00:24:19,530 --> 00:24:24,410
But if a threat actor needs
to update their tokens,

425
00:24:24,410 --> 00:24:27,380
they can change the
content of this address.

426
00:24:27,380 --> 00:24:29,610
So below you can see their new tokens.

427
00:24:29,610 --> 00:24:33,513
So malware reads tokens
and resumes this operation.

428
00:24:37,075 --> 00:24:37,908
Yes.

429
00:24:39,246 --> 00:24:41,430
For us as researchers,
it's quite interesting

430
00:24:41,430 --> 00:24:43,893
that when, for example, there is gist,

431
00:24:45,280 --> 00:24:47,460
we can always see what revisions,

432
00:24:47,460 --> 00:24:50,850
what changes have been done,
so we can see some history.

433
00:24:52,490 --> 00:24:56,090
When using Slack API,
they're like Python library,

434
00:24:56,090 --> 00:25:00,070
so when we have the token,
we can call various commands,

435
00:25:00,070 --> 00:25:03,110
like list of users,
information about the team,

436
00:25:03,110 --> 00:25:05,750
a list of channels, and
the most interesting

437
00:25:05,750 --> 00:25:08,610
or important for us is the last line,

438
00:25:08,610 --> 00:25:10,590
which is called the channels.history.

439
00:25:10,590 --> 00:25:15,429
So it can give us the history
of messages in the channel.

440
00:25:15,430 --> 00:25:17,920
And when we ask for history,

441
00:25:17,920 --> 00:25:22,310
we can get this kind of
result written in JSON format,

442
00:25:22,310 --> 00:25:25,320
and you can see that
there is attribute text,

443
00:25:25,320 --> 00:25:28,169
and the text is the command
which has been executed

444
00:25:28,170 --> 00:25:29,110
by this threat actor,

445
00:25:29,110 --> 00:25:31,498
so we can know which
files they were after,

446
00:25:31,499 --> 00:25:35,553
and which directories
they wanted to enumerate,

447
00:25:35,553 --> 00:25:37,463
what they were interested to do.

448
00:25:38,810 --> 00:25:40,653
And also for taking screenshots,

449
00:25:42,570 --> 00:25:44,870
we were able to find some permanent links

450
00:25:44,870 --> 00:25:47,169
to the screenshots, which could be again,

451
00:25:47,170 --> 00:25:51,203
downloaded with WB or in anything else.

452
00:25:52,170 --> 00:25:56,520
Yeah, so now we come to the conclusion.

453
00:25:56,520 --> 00:26:01,370
So the abusing of the cloud
services is a worldwide trend,

454
00:26:01,370 --> 00:26:04,429
I would say that these
services can be abused

455
00:26:04,430 --> 00:26:08,510
for different purposes, either
for storing the configuration

456
00:26:08,510 --> 00:26:13,070
or uploading the stolen
data, or it can be used

457
00:26:13,070 --> 00:26:17,062
as C&C channel for sending
and receiving messages.

458
00:26:18,770 --> 00:26:22,410
It has some benefits
for us as researchers,

459
00:26:22,410 --> 00:26:27,410
because we in many cases
we don't need to hack back

460
00:26:27,890 --> 00:26:31,550
for us having just, or
extracting the tokens enough

461
00:26:31,550 --> 00:26:35,450
to monitor the threat actor
and to get some information

462
00:26:35,450 --> 00:26:38,350
about whom they're targeting,

463
00:26:38,350 --> 00:26:40,403
what information they're interested in.

464
00:26:41,960 --> 00:26:44,500
And for the takeaway
slide, I would say that,

465
00:26:44,500 --> 00:26:46,890
or we should remember that all the traffic

466
00:26:46,890 --> 00:26:49,160
for these cloud services is encrypted.

467
00:26:49,160 --> 00:26:54,110
So it's basically impossible
for us to distinguish

468
00:26:54,110 --> 00:26:56,793
which traffic is legitimate
and which is malicious.

469
00:26:58,130 --> 00:27:02,180
Blocking IP addresses,
or DNS blacklisting,

470
00:27:02,180 --> 00:27:04,180
it's kind of limited because if we block

471
00:27:04,180 --> 00:27:06,720
some of these services, no one can use it,

472
00:27:06,720 --> 00:27:10,173
neither threat actor,
nor the legitimate users.

473
00:27:11,010 --> 00:27:12,760
We cannot take down these services.

474
00:27:12,760 --> 00:27:15,730
However, it gives us like
very good possibilities

475
00:27:15,730 --> 00:27:18,340
for monitoring these attackers.

476
00:27:18,340 --> 00:27:21,723
We can search for similar campaigns,

477
00:27:22,790 --> 00:27:27,399
if we find on these services,
like any other campaigns,

478
00:27:27,400 --> 00:27:32,400
we can know like some other targets,

479
00:27:34,743 --> 00:27:38,010
we can display the history,
version controlling.

480
00:27:38,010 --> 00:27:42,860
And it can help us to monitor
the attackers like much better

481
00:27:42,860 --> 00:27:43,793
and much easier.

482
00:27:44,670 --> 00:27:46,940
So now we came to the
end of my presentation.

483
00:27:46,940 --> 00:27:49,780
So if you are interested to read more,

484
00:27:49,780 --> 00:27:53,530
there are like some blog
posts or research papers

485
00:27:53,530 --> 00:27:56,500
I helped to write in the past.

486
00:27:56,500 --> 00:28:00,630
So if you are interested, please
follow any of these links.

487
00:28:00,630 --> 00:28:02,323
Thank you for your attendance.

