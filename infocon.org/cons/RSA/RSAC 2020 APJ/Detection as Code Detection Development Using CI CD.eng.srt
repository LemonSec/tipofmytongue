1
00:00:10,999 --> 00:00:14,082
(piano music begins)

2
00:00:21,117 --> 00:00:23,534
(drums beat)

3
00:00:37,008 --> 00:00:39,207
- Hello and welcome to Detection as Code.

4
00:00:39,207 --> 00:00:41,390
Detection Development using CI/CD.

5
00:00:41,390 --> 00:00:42,750
If you're joining us live,

6
00:00:42,750 --> 00:00:45,490
our speakers are in the
Slido chat area right now,

7
00:00:45,490 --> 00:00:47,250
answering your questions.

8
00:00:47,250 --> 00:00:48,870
For audio and video issues.

9
00:00:48,870 --> 00:00:51,870
Please click the technical
support button below.

10
00:00:51,870 --> 00:00:54,780
I'd now like to turn it
over to Patrick Bareiss,

11
00:00:54,780 --> 00:00:57,123
and Jose Hernandez for the presentation.

12
00:01:01,650 --> 00:01:03,113
- Hello, welcome everyone.

13
00:01:04,140 --> 00:01:07,580
So the threat landscape is for us,

14
00:01:07,580 --> 00:01:09,598
defenders is getting worse,

15
00:01:09,598 --> 00:01:10,670
it's ever changing.

16
00:01:10,670 --> 00:01:13,440
And really this is one of our challenges.

17
00:01:13,440 --> 00:01:16,610
We really, really need
to start keeping up.

18
00:01:16,610 --> 00:01:18,700
And one of the ways that Patrick,

19
00:01:18,700 --> 00:01:21,063
and I have thought of keeping
up with this threat landscape,

20
00:01:22,000 --> 00:01:23,720
is essentially through
continuously testing,

21
00:01:23,720 --> 00:01:25,650
and improving detections.

22
00:01:25,650 --> 00:01:29,000
And that's one of the challenges that...

23
00:01:29,000 --> 00:01:32,550
For us today and specifically
what I mean by that is

24
00:01:33,760 --> 00:01:37,810
data driven approach
accompanies the defenders,

25
00:01:37,810 --> 00:01:38,970
to make sure that those detections

26
00:01:38,970 --> 00:01:42,330
that were working 90 days
ago still work today.

27
00:01:42,330 --> 00:01:46,240
That that C2 callback didn't change.

28
00:01:46,240 --> 00:01:47,701
And if it did,

29
00:01:47,701 --> 00:01:49,399
make sure that you can catch it.

30
00:01:49,400 --> 00:01:51,080
Detections are continuously
improving their tooling.

31
00:01:51,080 --> 00:01:52,860
We should be doing the same thing.

32
00:01:52,860 --> 00:01:54,300
And if we do this,

33
00:01:54,300 --> 00:01:55,289
we should be also

34
00:01:55,290 --> 00:01:57,240
as a result,

35
00:01:57,240 --> 00:02:01,289
shortening the development
life cycle of new detections.

36
00:02:01,290 --> 00:02:03,253
So when new attack comes out,

37
00:02:04,100 --> 00:02:05,630
we should be ready to have a new detection

38
00:02:05,630 --> 00:02:08,350
to find it as soon as possible.

39
00:02:08,350 --> 00:02:11,260
Speed is the key to success as a defender.

40
00:02:11,260 --> 00:02:13,950
And unfortunately it's not,

41
00:02:13,950 --> 00:02:16,602
we're not even a deal
scenario today's image.

42
00:02:18,060 --> 00:02:20,047
What do I mean by the testing detections?

43
00:02:20,047 --> 00:02:21,760
And what do we mean by this?

44
00:02:21,760 --> 00:02:26,149
Specifically, think of the CI/CD work flow

45
00:02:26,150 --> 00:02:27,410
or software development,

46
00:02:27,410 --> 00:02:30,250
or typical software
developer runs through,

47
00:02:30,250 --> 00:02:32,200
in the software development life cycle.

48
00:02:33,398 --> 00:02:34,270
You first commit code,

49
00:02:34,270 --> 00:02:35,810
or you commit change,

50
00:02:35,810 --> 00:02:38,570
that commit trigger some
sort of built process,

51
00:02:38,570 --> 00:02:41,780
that runs through a continuously

52
00:02:43,098 --> 00:02:44,391
develop a continuous integration pipeline,

53
00:02:44,391 --> 00:02:46,090
that builds whatever code,

54
00:02:46,090 --> 00:02:47,490
or whatever app you're building,

55
00:02:47,490 --> 00:02:48,590
and then notifies you,

56
00:02:49,738 --> 00:02:51,250
notifies you whether the
build was successful.

57
00:02:51,250 --> 00:02:53,140
A bunch of tests run to make sure that

58
00:02:53,140 --> 00:02:55,459
that built actually is
ready for production.

59
00:02:55,460 --> 00:02:57,410
When the test runs successfully,

60
00:02:57,410 --> 00:02:58,430
you get notification,

61
00:02:58,430 --> 00:03:00,380
whether they run successful or not.

62
00:03:00,380 --> 00:03:01,267
And ultimately you end up deploying

63
00:03:01,267 --> 00:03:03,109
the software to production.

64
00:03:03,110 --> 00:03:05,620
Or if you take this kind
of mindset or this concept,

65
00:03:05,620 --> 00:03:07,830
and we apply it to detection engineering,

66
00:03:07,830 --> 00:03:12,270
we can layer it and almost do
exactly the same thing, right?

67
00:03:12,270 --> 00:03:15,610
You committed detection, we convert,

68
00:03:15,610 --> 00:03:18,060
or you can convert those detections,

69
00:03:18,060 --> 00:03:19,470
whatever SIEM or Sysmons you're going

70
00:03:19,470 --> 00:03:21,109
to deploy them to,

71
00:03:21,110 --> 00:03:25,170
most users today have more
than one piece of software

72
00:03:25,170 --> 00:03:27,309
to deploy into in the large environment,

73
00:03:27,310 --> 00:03:29,992
which means you're going
to have to package it.

74
00:03:29,992 --> 00:03:30,959
And instead of convert
it for that environment,

75
00:03:30,960 --> 00:03:33,657
but more important than
you need to be notified

76
00:03:33,657 --> 00:03:35,540
of whether this bill for this environment

77
00:03:35,540 --> 00:03:36,590
is successful or not.

78
00:03:37,676 --> 00:03:39,203
And then finally have a way to test

79
00:03:39,204 --> 00:03:40,880
this repeatedly and take the connection,

80
00:03:40,880 --> 00:03:43,370
or the data driven approach
through the detection.

81
00:03:43,370 --> 00:03:45,170
That's going out to production.

82
00:03:45,170 --> 00:03:48,130
If this detection is tested successfully,

83
00:03:48,130 --> 00:03:49,410
then deploy it to,

84
00:03:49,410 --> 00:03:51,731
then the next logical step would be like,

85
00:03:51,731 --> 00:03:53,200
let's get this detection
out to production,

86
00:03:53,200 --> 00:03:54,149
to find bad things.

87
00:03:56,340 --> 00:03:59,900
Now let's dig into specifically

88
00:03:59,900 --> 00:04:02,070
what commit detection looks like,

89
00:04:02,070 --> 00:04:04,560
or committing a detection looks like.

90
00:04:04,560 --> 00:04:06,880
I want to start with two examples,

91
00:04:06,880 --> 00:04:08,290
from two different projects here,

92
00:04:08,290 --> 00:04:09,609
one is called Sigma.

93
00:04:09,610 --> 00:04:12,030
The other one's called
Splunk security content.

94
00:04:12,030 --> 00:04:14,690
And both have different,

95
00:04:14,690 --> 00:04:16,584
slightly different ways that

96
00:04:16,584 --> 00:04:17,899
they approach writing detections,

97
00:04:17,899 --> 00:04:21,019
but a big, big commonality between both is

98
00:04:21,019 --> 00:04:22,733
both projects that here to schema.

99
00:04:23,970 --> 00:04:26,410
Sigma and Splunk security content

100
00:04:26,410 --> 00:04:28,600
both have over 200,

101
00:04:28,600 --> 00:04:30,890
essentially detections for sentence

102
00:04:32,768 --> 00:04:33,700
that any individual consumer can leverage,

103
00:04:33,700 --> 00:04:35,800
and both are open source that are free.

104
00:04:35,800 --> 00:04:39,548
And the key of, of what,

105
00:04:39,548 --> 00:04:41,161
what makes these

106
00:04:41,161 --> 00:04:42,000
both sigma and splunk successful is again,

107
00:04:42,000 --> 00:04:44,410
this detection schema up behind it.

108
00:04:44,410 --> 00:04:46,840
And why does a schema make

109
00:04:46,840 --> 00:04:48,409
this project successful specifically?

110
00:04:48,410 --> 00:04:51,920
Because find a schema to
detection development,

111
00:04:51,920 --> 00:04:53,240
and not just,

112
00:04:53,240 --> 00:04:54,920
again, writing a search for Splunk

113
00:04:54,920 --> 00:04:57,370
or writing some query for elk,

114
00:04:57,370 --> 00:05:01,170
is that schema is a lot
easier to read and maintain.

115
00:05:01,170 --> 00:05:03,320
And essentially it becomes
product agnostic, right?

116
00:05:03,320 --> 00:05:05,640
And very, very, very much in vain.

117
00:05:05,640 --> 00:05:07,738
And then the other beautiful part

118
00:05:07,738 --> 00:05:09,070
of leveraging a schema for,

119
00:05:09,070 --> 00:05:10,370
for detection development,

120
00:05:11,534 --> 00:05:14,650
is there various ways to
enforce using a schema,

121
00:05:14,650 --> 00:05:16,659
whether it's written correctly or not,

122
00:05:16,660 --> 00:05:20,340
which makes testing and
implementation a lot easier,

123
00:05:20,340 --> 00:05:22,816
when it comes to deploying a search

124
00:05:22,817 --> 00:05:23,650
in a production environment.

125
00:05:25,510 --> 00:05:28,310
Now, one thing I want to highlight

126
00:05:28,310 --> 00:05:33,310
is both of these projects
center around writing rules.

127
00:05:33,490 --> 00:05:35,530
And what I mean by that

128
00:05:35,530 --> 00:05:39,119
is there's a lot of
products out there today

129
00:05:39,120 --> 00:05:41,863
that really leverage,

130
00:05:43,082 --> 00:05:46,342
and rely upon machine learning

131
00:05:46,342 --> 00:05:47,642
and for anomaly detection.

132
00:05:48,539 --> 00:05:50,750
They basically are
anomaly detection engines,

133
00:05:50,750 --> 00:05:52,690
which are great,

134
00:05:52,690 --> 00:05:56,010
are finding things that
you may not know about,

135
00:05:56,010 --> 00:05:58,420
but they also tend to a lot of noise,

136
00:05:58,420 --> 00:06:01,710
especially when they're not
properly trained or tuned.

137
00:06:01,710 --> 00:06:04,190
Where Sigma and Splunk Security Content,

138
00:06:04,190 --> 00:06:07,110
again, are focused on
providing essentially rules

139
00:06:07,110 --> 00:06:09,690
that are targeted for known bad things,

140
00:06:09,690 --> 00:06:11,160
which ultimately end up being rules

141
00:06:11,160 --> 00:06:13,160
that get fed to train a lot of

142
00:06:13,160 --> 00:06:15,750
this MO machine learning based box,

143
00:06:15,750 --> 00:06:18,570
that depend on essentially rules

144
00:06:18,570 --> 00:06:23,530
to then make anomaly this
lack of a better word.

145
00:06:23,530 --> 00:06:26,570
So I'm getting at is don't discount rules.

146
00:06:26,570 --> 00:06:28,400
They're still extremely valuable.

147
00:06:28,400 --> 00:06:31,433
And a lot of the new products
end up relying on it.

148
00:06:33,410 --> 00:06:34,920
Now, if we were thinking about

149
00:06:34,920 --> 00:06:36,520
a detection development workflow,

150
00:06:36,520 --> 00:06:38,683
similar to a software
development workflow.

151
00:06:41,000 --> 00:06:44,423
If you are leveraging a code repository,

152
00:06:45,849 --> 00:06:47,920
you're a capable of then versioning,

153
00:06:47,920 --> 00:06:49,413
not only versioning,

154
00:06:49,413 --> 00:06:51,490
but also having a development life cycle,

155
00:06:51,490 --> 00:06:54,230
where you can branch off
your detection stuff.

156
00:06:54,230 --> 00:06:55,950
Multiple teams of developers,

157
00:06:55,950 --> 00:06:58,860
and parallel working
across the same code base

158
00:06:58,860 --> 00:07:00,570
by being able to branch

159
00:07:00,570 --> 00:07:03,980
and merge back into the main
code line for the detections.

160
00:07:03,980 --> 00:07:05,620
What does this mean for you?

161
00:07:05,620 --> 00:07:08,900
You can have a SOC or a large team work

162
00:07:08,900 --> 00:07:11,400
on the same pool of detections,

163
00:07:11,400 --> 00:07:12,700
without affecting each other.

164
00:07:12,700 --> 00:07:15,210
While testing is still happening.

165
00:07:15,210 --> 00:07:18,479
And sanity still kept across the team.

166
00:07:18,480 --> 00:07:21,550
Finally, if you're using
a branching workflow,

167
00:07:21,550 --> 00:07:26,450
and essentially a modern
code verging system

168
00:07:26,450 --> 00:07:29,560
should be able to tag once
you're happy with all the changes

169
00:07:29,560 --> 00:07:30,580
in a certain environment,

170
00:07:30,580 --> 00:07:32,500
a release and cut release us off,

171
00:07:32,500 --> 00:07:34,970
for the rest of your
consumers or your clients.

172
00:07:34,970 --> 00:07:36,620
EEG, any other business units

173
00:07:36,620 --> 00:07:38,320
that may leverage your detections.

174
00:07:42,370 --> 00:07:44,070
Now let's move on to the second phase

175
00:07:44,070 --> 00:07:47,969
of essentially detection engineering

176
00:07:47,970 --> 00:07:50,480
using this CI/CD workflow.

177
00:07:50,480 --> 00:07:53,270
Which is converting
detections and packaging them.

178
00:07:53,270 --> 00:07:55,810
Why are these two phases important?

179
00:07:55,810 --> 00:07:56,643
Well,

180
00:07:57,970 --> 00:08:01,374
I mentioned earlier against
Splunk security content,

181
00:08:01,374 --> 00:08:03,480
and also Sigma both
leverage schema format.

182
00:08:03,480 --> 00:08:05,210
So pretty find schema

183
00:08:05,210 --> 00:08:08,960
to basically structure
what a detection looks like

184
00:08:08,960 --> 00:08:10,770
with a bunch of metadata on it.

185
00:08:10,770 --> 00:08:14,849
Now, when it comes to
having to hit the road,

186
00:08:14,850 --> 00:08:18,440
these detection schemas
need to be credit to a SIEM,

187
00:08:19,351 --> 00:08:21,810
or SIEM specific search format,

188
00:08:21,810 --> 00:08:24,069
and need to be configured for that SIEM.

189
00:08:24,069 --> 00:08:25,620
So you can actually execute it there.

190
00:08:25,620 --> 00:08:28,070
Both projects take a
slightly different approach.

191
00:08:29,270 --> 00:08:32,823
But ultimately the goal is to take this,

192
00:08:33,690 --> 00:08:35,253
this YML that you see here,

193
00:08:37,789 --> 00:08:38,900
and which has a bunch
of concepts around it,

194
00:08:38,900 --> 00:08:41,319
like how to implement and descriptions,

195
00:08:41,320 --> 00:08:43,559
and essentially what MITRE IDs,

196
00:08:43,559 --> 00:08:46,170
this detection supposed to target.

197
00:08:46,170 --> 00:08:49,895
And simply output what
your SIEM is going to use.

198
00:08:49,895 --> 00:08:52,199
In this case for Splunk
as a Splunk search,

199
00:08:52,200 --> 00:08:54,263
and make sure that this Splunk search

200
00:08:54,263 --> 00:08:56,840
can be deployed in an
environment and schedule.

201
00:08:56,840 --> 00:08:59,570
For us and specifically for security,

202
00:08:59,570 --> 00:09:01,724
I see a splunk security content.

203
00:09:01,724 --> 00:09:04,020
This looks like a SIEM
search.com configuration.

204
00:09:04,020 --> 00:09:06,130
If you can look at this example,

205
00:09:06,130 --> 00:09:08,810
there's things like a crown scheduler

206
00:09:08,810 --> 00:09:11,599
for how often you want
this detection to run.

207
00:09:11,600 --> 00:09:13,310
There are parameters around notable,

208
00:09:13,310 --> 00:09:15,910
and what alerts do you
want out of this detection,

209
00:09:15,910 --> 00:09:18,459
if it ever matches so on and so forth.

210
00:09:18,460 --> 00:09:20,170
Each SIEM is going to
be slightly different

211
00:09:20,170 --> 00:09:21,520
or totally different.

212
00:09:21,520 --> 00:09:22,770
And that's the beauty of having

213
00:09:22,770 --> 00:09:26,579
a product agnostic schema
that you can leverage

214
00:09:26,580 --> 00:09:28,563
to generate detections for it.

215
00:09:30,570 --> 00:09:31,580
The next step.

216
00:09:31,580 --> 00:09:33,760
Next major step after this

217
00:09:33,760 --> 00:09:36,437
is Notify of build outcome.

218
00:09:36,437 --> 00:09:38,400
And here I'm going to
pass it on to Patrick

219
00:09:38,400 --> 00:09:42,973
to finish off what the CI/CD
workflow would look like

220
00:09:42,974 --> 00:09:43,807
for detection engineering.

221
00:09:48,220 --> 00:09:50,023
- Thank you very much Jose.

222
00:09:51,900 --> 00:09:56,010
When we build the whole project,

223
00:09:56,010 --> 00:09:59,750
we can then validate different steps.

224
00:09:59,750 --> 00:10:03,080
For example, we saw like
how to package detections,

225
00:10:03,080 --> 00:10:05,620
how to convert the detections.

226
00:10:05,620 --> 00:10:06,633
And then we can,

227
00:10:07,568 --> 00:10:11,180
in our CI/CD pipeline we
can run different scripts,

228
00:10:11,180 --> 00:10:13,400
which then validates the content.

229
00:10:13,400 --> 00:10:16,689
For example, did I use
the right key value pairs

230
00:10:16,690 --> 00:10:18,260
for different key value

231
00:10:18,260 --> 00:10:19,813
for the different fields.

232
00:10:20,690 --> 00:10:25,265
Is it a compatible package to your SIEM,

233
00:10:25,265 --> 00:10:27,415
to your elk, to your
Splunk, to your Azure?

234
00:10:30,263 --> 00:10:32,810
And can our build process
completely build a package?

235
00:10:32,810 --> 00:10:34,760
For example here, you can see CircleCI.

236
00:10:35,970 --> 00:10:38,250
CircleCI is a CI/CD tool,

237
00:10:38,250 --> 00:10:40,150
which you can easily integrate together.

238
00:10:40,150 --> 00:10:41,703
For example, with GitHub.

239
00:10:42,690 --> 00:10:46,220
And we saw here in our validation phase,

240
00:10:46,220 --> 00:10:48,640
we called validate and build,

241
00:10:48,640 --> 00:10:51,153
that we first validate our content.

242
00:10:54,000 --> 00:10:59,000
Did the detection developer
add all the correct fields

243
00:10:59,010 --> 00:11:01,810
into the key belt, into the demo file?

244
00:11:01,810 --> 00:11:04,747
Which costs the show to us?

245
00:11:04,748 --> 00:11:08,050
Are we able then to
take all the detections,

246
00:11:08,050 --> 00:11:13,050
and build them for us
the Splunk detections.

247
00:11:14,320 --> 00:11:18,350
I'll be able to package them
all together into one package.

248
00:11:18,350 --> 00:11:19,183
And then,

249
00:11:20,080 --> 00:11:23,330
there was the last command is called this,

250
00:11:23,330 --> 00:11:25,731
this example it's epic inspect,

251
00:11:25,731 --> 00:11:26,830
this is something Splunk specific,

252
00:11:26,830 --> 00:11:28,470
where it's a small tool,

253
00:11:28,470 --> 00:11:31,410
which checks if that output

254
00:11:31,410 --> 00:11:33,969
the app is a valid Splunk app.

255
00:11:33,970 --> 00:11:37,655
But you can also replace that with other,

256
00:11:37,655 --> 00:11:40,760
there's another job which,

257
00:11:40,760 --> 00:11:43,903
checks it for in Azure or in elk.

258
00:11:46,900 --> 00:11:48,630
So I will try now,

259
00:11:48,630 --> 00:11:51,038
because this is like in the middle,

260
00:11:51,038 --> 00:11:52,960
I tried to now recap what we learned,

261
00:11:52,960 --> 00:11:54,350
what we had before,

262
00:11:54,350 --> 00:11:57,870
and then I will continue
with test detection.

263
00:11:57,870 --> 00:12:00,860
First, we learned about commit detections.

264
00:12:00,860 --> 00:12:02,530
In commit detections,

265
00:12:02,530 --> 00:12:03,520
we saw that

266
00:12:04,570 --> 00:12:09,280
how we can use tools such GitLab or GitHub

267
00:12:09,280 --> 00:12:12,959
to manage and versioning our detections.

268
00:12:12,960 --> 00:12:15,470
We learned that and detection schema

269
00:12:15,470 --> 00:12:19,060
is very important in
order to manage the rules

270
00:12:19,060 --> 00:12:20,479
with all its advantages,

271
00:12:20,480 --> 00:12:24,170
because it detection schema has

272
00:12:24,170 --> 00:12:27,829
provides some abstractions
from specific configurations

273
00:12:27,829 --> 00:12:29,497
for specific SIEM.

274
00:12:29,498 --> 00:12:32,383
And that's why it's a lot
better from detection engineer,

275
00:12:32,383 --> 00:12:35,264
working with detection schema instead

276
00:12:35,264 --> 00:12:38,597
of product specific configuration pilot.

277
00:12:39,717 --> 00:12:42,270
Then we saw how we can take that schema,

278
00:12:42,270 --> 00:12:45,630
and the detections in the
detection specific format,

279
00:12:45,630 --> 00:12:50,030
and convert them and
package them into an app.

280
00:12:50,030 --> 00:12:53,079
Which we can then use in our SIEM

281
00:12:53,080 --> 00:12:56,363
with all that detection rules in there.

282
00:12:57,340 --> 00:13:02,340
And then we saw that based
on that generated package,

283
00:13:02,430 --> 00:13:06,339
we run different validation scripts.

284
00:13:06,340 --> 00:13:11,180
And in order to check if the
output was really correct.

285
00:13:11,180 --> 00:13:16,173
And if the output was as
successfully generated by,

286
00:13:17,950 --> 00:13:19,633
by that step.

287
00:13:21,270 --> 00:13:25,393
Now let's come to test detections.

288
00:13:27,020 --> 00:13:31,130
It's very important
that the security teams

289
00:13:31,130 --> 00:13:33,310
can rely on their detection rules.

290
00:13:33,310 --> 00:13:35,250
If they can't rely on the detection rule

291
00:13:35,250 --> 00:13:37,350
they'll never know if they miss something.

292
00:13:37,350 --> 00:13:41,850
Which means when they're
deployed like 50 detection rules,

293
00:13:41,850 --> 00:13:43,130
they want to rely,

294
00:13:43,130 --> 00:13:45,000
they want to be able to rely on them.

295
00:13:45,000 --> 00:13:46,770
They are currently working.

296
00:13:46,770 --> 00:13:47,880
In order to do that,

297
00:13:47,880 --> 00:13:52,023
we need continuously
testing of detection rules.

298
00:13:53,170 --> 00:13:55,449
Why I say continuously,

299
00:13:55,450 --> 00:13:59,060
because there is so many moving pieces.

300
00:13:59,060 --> 00:14:02,142
There can be changes in
the operating System,

301
00:14:03,383 --> 00:14:04,580
changing in the passing phase,

302
00:14:04,580 --> 00:14:06,160
changing on the SIEM itself

303
00:14:06,160 --> 00:14:07,620
when there was an update,

304
00:14:07,620 --> 00:14:10,330
which means we have to
continuously test it.

305
00:14:10,330 --> 00:14:14,080
Not only one time during the development,

306
00:14:14,080 --> 00:14:17,150
we have to regularly
test all the detections,

307
00:14:17,150 --> 00:14:18,350
which are in production.

308
00:14:25,760 --> 00:14:28,310
Test detection, first of all,

309
00:14:28,310 --> 00:14:29,920
there was a lot of discussions

310
00:14:29,920 --> 00:14:32,180
about where to test detections.

311
00:14:32,180 --> 00:14:34,829
Few people say in a
production environment,

312
00:14:34,830 --> 00:14:38,010
other people say in a
detection lab environment.

313
00:14:38,010 --> 00:14:42,490
In my opinion, for developing
and testing detections.

314
00:14:42,490 --> 00:14:45,700
For the detections engineering team,

315
00:14:45,700 --> 00:14:48,730
I recommend to use a
detection lab environment,

316
00:14:48,730 --> 00:14:50,530
because the detection engineers wants

317
00:14:50,530 --> 00:14:54,144
to have full control over the Systems,

318
00:14:54,144 --> 00:14:56,450
and therefore be able to attack the System

319
00:14:56,450 --> 00:14:58,290
and compromise the System,

320
00:14:58,290 --> 00:15:01,198
or even change some parameters,

321
00:15:01,198 --> 00:15:03,329
which would be not allowed
in a production environment.

322
00:15:03,330 --> 00:15:05,160
I don't know how many of you are allowed

323
00:15:05,160 --> 00:15:07,420
to run Mimi cats, for example,

324
00:15:07,420 --> 00:15:09,229
on the production domain control,

325
00:15:09,230 --> 00:15:10,423
probably nobody.

326
00:15:13,910 --> 00:15:16,020
In order to test our detections,

327
00:15:16,020 --> 00:15:18,043
we have to perform multiple steps.

328
00:15:19,770 --> 00:15:23,550
The first step is we need
to build a lab environment.

329
00:15:23,550 --> 00:15:25,810
We have to build a lab in environment,

330
00:15:25,810 --> 00:15:29,573
which is as close as possible
to our production environment,

331
00:15:30,450 --> 00:15:34,660
which means we need to have the
same locking configurations.

332
00:15:34,660 --> 00:15:36,780
We have to have the same
handling conversations.

333
00:15:36,780 --> 00:15:40,213
We want to install the same
tools as our production,

334
00:15:41,230 --> 00:15:42,830
same tools which are also installed

335
00:15:42,830 --> 00:15:44,330
in our production environment.

336
00:15:46,120 --> 00:15:49,860
Then we want to be able to simulate a test

337
00:15:49,860 --> 00:15:51,480
against the environment.

338
00:15:51,480 --> 00:15:53,810
There was already a bunch of,

339
00:15:53,810 --> 00:15:55,430
awesome open source tools,

340
00:15:55,430 --> 00:15:56,719
which you can use for them.

341
00:15:56,720 --> 00:15:58,993
I will shortly explain them later,

342
00:16:02,610 --> 00:16:03,940
but two tools I want
to especially highlight

343
00:16:03,940 --> 00:16:05,820
as an adversary simulation tools

344
00:16:06,864 --> 00:16:10,853
are Atomic Red team developed
from the Mitre guys.

345
00:16:12,470 --> 00:16:15,800
And, sorry from Caldera
developed from the Mitre guys,

346
00:16:16,753 --> 00:16:18,520
and Atomic red team.

347
00:16:18,520 --> 00:16:21,890
These tools can be used to perform a test

348
00:16:21,890 --> 00:16:23,960
against this lab environment.

349
00:16:23,960 --> 00:16:27,880
For example, I have now spin
up my lab domain controller,

350
00:16:27,880 --> 00:16:31,070
and now I want to run
credential dumping attack

351
00:16:31,070 --> 00:16:33,930
against this domain controller.

352
00:16:33,930 --> 00:16:34,900
This is normally things

353
00:16:34,900 --> 00:16:36,900
which I can't do in a
production environment.

354
00:16:36,900 --> 00:16:40,893
That's why I suggest to use
a detection lab environment.

355
00:16:42,110 --> 00:16:43,700
Then in the next step,

356
00:16:43,700 --> 00:16:46,700
we have a look into the generating blocks,

357
00:16:46,700 --> 00:16:49,290
which came out of this attack,

358
00:16:49,290 --> 00:16:53,680
and this logs we can either
use to develop new detections,

359
00:16:53,680 --> 00:16:57,189
all tests, all existing detections.

360
00:16:57,190 --> 00:16:58,520
For example,

361
00:16:58,520 --> 00:17:00,170
from credential them pick attack.

362
00:17:01,290 --> 00:17:02,670
And then last but not least,

363
00:17:02,670 --> 00:17:06,339
because we are talking
about a CI/CD pipeline.

364
00:17:06,339 --> 00:17:09,659
We want to get out report similar.

365
00:17:09,660 --> 00:17:11,109
What you see before,

366
00:17:11,109 --> 00:17:15,310
what kind of detections successful tested,

367
00:17:15,310 --> 00:17:18,082
and what kind of
detection failed the test.

368
00:17:21,845 --> 00:17:22,880
In the next slide,

369
00:17:22,880 --> 00:17:25,780
I want to now give you two projects

370
00:17:28,741 --> 00:17:30,889
which focus on building
up a detection lab,

371
00:17:30,890 --> 00:17:33,640
which you can use for
detection development

372
00:17:33,640 --> 00:17:34,773
and detection testing.

373
00:17:39,430 --> 00:17:43,610
The first project which I want
to highlight is Mordor labs.

374
00:17:43,610 --> 00:17:46,152
Mordor labs was developed
by Roberto Rodriguez.

375
00:17:47,110 --> 00:17:49,389
And Mordor labs is an repository

376
00:17:49,390 --> 00:17:53,523
of different cloud
templates, configurations,

377
00:17:54,942 --> 00:17:57,442
and scripts to deploy a
detection lab environment.

378
00:17:58,430 --> 00:18:03,430
The goal of mordor labs is
to attack this environment

379
00:18:03,500 --> 00:18:06,333
with simulated at rosaries,

380
00:18:07,606 --> 00:18:10,030
and then recall this data sets,

381
00:18:10,030 --> 00:18:13,379
and publish it in another
project by Roberto Rodriguez

382
00:18:13,380 --> 00:18:15,990
called Mordor.

383
00:18:15,990 --> 00:18:19,480
Mordor is a project containing
prerecord security events,

384
00:18:19,480 --> 00:18:21,980
which we all can then consume,

385
00:18:21,980 --> 00:18:25,850
and use to develop and
test out detections.

386
00:18:25,850 --> 00:18:28,233
All to prepare on POC or POV,

387
00:18:29,391 --> 00:18:30,693
whatever you want.

388
00:18:32,150 --> 00:18:36,500
Mordor labs is using the SRO
resource manager templates

389
00:18:36,500 --> 00:18:39,213
to build a detection lab in Azure.

390
00:18:40,200 --> 00:18:42,840
And these templates are used to build

391
00:18:42,840 --> 00:18:45,139
the different virtual networks

392
00:18:45,140 --> 00:18:47,110
to the different vendors endpoints,

393
00:18:47,110 --> 00:18:50,290
and also configure the different machines,

394
00:18:50,290 --> 00:18:51,490
and configure the login.

395
00:18:53,520 --> 00:18:55,073
As I talked about logging,

396
00:18:59,920 --> 00:19:03,190
the telemetric data from
the windows endpoints

397
00:19:03,190 --> 00:19:07,193
are collected over windows
event forwarder in mordor labs.

398
00:19:08,050 --> 00:19:10,452
The windows event forwarder

399
00:19:10,452 --> 00:19:12,250
forwards the windows logs,

400
00:19:12,250 --> 00:19:14,750
the Sysmon logs and the PowerShell logs

401
00:19:14,750 --> 00:19:17,523
over to windows event collector.

402
00:19:19,462 --> 00:19:20,980
On the windows event collector

403
00:19:20,980 --> 00:19:22,853
Nix lock is installed.

404
00:19:24,773 --> 00:19:27,100
And for these logs as chase logs

405
00:19:27,100 --> 00:19:28,973
to Log stash and chase format.

406
00:19:30,180 --> 00:19:32,570
From there, you can do whatever you want.

407
00:19:32,570 --> 00:19:37,439
In this case, Roberto is using
that in an Azure event hub,

408
00:19:37,440 --> 00:19:42,440
and then using a kafkacat
to store that data

409
00:19:42,830 --> 00:19:44,062
in his mordor project.

410
00:19:45,188 --> 00:19:48,140
And you can easily go to his GitHub slide.

411
00:19:48,140 --> 00:19:50,770
Just Google for Mordor and GitHub.

412
00:19:50,770 --> 00:19:53,690
And there, you can find a
pre recall the data sets,

413
00:19:53,690 --> 00:19:55,630
which you can then download and use

414
00:19:55,630 --> 00:19:57,730
for development and testing of detections.

415
00:20:02,940 --> 00:20:04,050
The second project,

416
00:20:04,050 --> 00:20:08,943
which I want to show you
today is a attack range.

417
00:20:10,866 --> 00:20:13,480
The attack range solves
three main challenges

418
00:20:13,480 --> 00:20:14,850
in detection which mean.

419
00:20:14,850 --> 00:20:19,659
First of all, builds up and
detection lab environment.

420
00:20:19,660 --> 00:20:24,433
It performs attack simulation
with atrosary simulation,

421
00:20:25,384 --> 00:20:26,603
such as we said,

422
00:20:26,603 --> 00:20:28,010
talking about the Atomic
red team in Caldera,

423
00:20:28,010 --> 00:20:31,723
and can easily integrate
it into a CI/CD pipeline.

424
00:20:32,600 --> 00:20:34,699
The attack range consists of different

425
00:20:34,700 --> 00:20:37,290
bottom SIEMS such as domain control,

426
00:20:37,290 --> 00:20:39,770
windows server, Windows Splunk,

427
00:20:39,770 --> 00:20:40,980
splunk machine,

428
00:20:40,980 --> 00:20:42,840
and follow further instances

429
00:20:42,840 --> 00:20:46,602
such as a Kali Linux or a Splunk Phantom.

430
00:20:47,840 --> 00:20:50,500
The Linux and Mac end points are currently

431
00:20:50,500 --> 00:20:51,693
under development.

432
00:20:52,610 --> 00:20:54,399
They will have voice query

433
00:20:56,365 --> 00:20:57,673
for logging purposes.

434
00:20:59,220 --> 00:21:01,760
The different virtual
machines comes pre-configured,

435
00:21:01,760 --> 00:21:04,410
which means you will already get logs

436
00:21:04,410 --> 00:21:05,880
such as windows event logs,

437
00:21:05,880 --> 00:21:09,770
sysmon logs, power logs already
in your Splunk instance,

438
00:21:09,770 --> 00:21:11,020
in the different indexes.

439
00:21:12,311 --> 00:21:14,730
And the Splunk instance is
already completely configured.

440
00:21:14,730 --> 00:21:17,450
Furthermore, the different
address simulation

441
00:21:17,450 --> 00:21:19,430
softwares already pre installed

442
00:21:19,430 --> 00:21:21,420
on the different windows endpoints,

443
00:21:21,420 --> 00:21:24,923
and Caldera is installed
on the same box as Splunk.

444
00:21:30,920 --> 00:21:34,870
You can build the attack
range in two different ways.

445
00:21:34,870 --> 00:21:38,429
You can either build it
locally on your local laptop

446
00:21:38,430 --> 00:21:40,110
with Vagrant,

447
00:21:40,110 --> 00:21:43,226
or you can build it with Terraform in AWS.

448
00:21:44,900 --> 00:21:46,120
In both cases,

449
00:21:46,120 --> 00:21:50,209
we are using Ansible to configure
all the different boxes,

450
00:21:50,210 --> 00:21:53,120
which means like it installed Splunk,

451
00:21:53,120 --> 00:21:54,169
it configures Splunk,

452
00:21:55,614 --> 00:21:57,564
or it also prepares the windows machine

453
00:22:00,436 --> 00:22:01,872
to enable to install Sysmon,

454
00:22:02,760 --> 00:22:04,210
or install a specific version

455
00:22:06,848 --> 00:22:08,598
of a specific Sysmon configuration.

456
00:22:10,070 --> 00:22:13,450
The build process takes
around maximum 30 minutes,

457
00:22:13,450 --> 00:22:16,810
depending on your internet connection.

458
00:22:16,810 --> 00:22:18,592
And then you have the whole lab,

459
00:22:19,590 --> 00:22:21,522
which you can see in here.

460
00:22:21,522 --> 00:22:23,033
You can enable different boxes,

461
00:22:23,033 --> 00:22:24,683
disabled according to your needs.

462
00:22:28,270 --> 00:22:32,593
The attack range supports
different commands.

463
00:22:34,560 --> 00:22:36,600
The first command is everything

464
00:22:36,600 --> 00:22:38,379
which we learned around build.

465
00:22:38,380 --> 00:22:40,960
We heard that build is
a very important goal

466
00:22:40,960 --> 00:22:42,510
from a detection lab.

467
00:22:42,510 --> 00:22:46,413
We support build,
destroys, stop and resume.

468
00:22:46,413 --> 00:22:48,830
I think all the different
commands itself explaining.

469
00:22:48,830 --> 00:22:51,210
I just wanted to give us
a little bit more detail

470
00:22:51,210 --> 00:22:53,660
into stop and resume.

471
00:22:53,660 --> 00:22:56,010
There is some cases where we don't want

472
00:22:56,010 --> 00:22:59,010
to always build and destroy the lab.

473
00:22:59,010 --> 00:23:02,433
And as we also have the
option to deploy it into AWS,

474
00:23:04,150 --> 00:23:07,660
we also sometimes want to
shut down the ISTE machines

475
00:23:07,660 --> 00:23:09,160
in order to save money.

476
00:23:09,160 --> 00:23:12,510
That's why we also have the
possibilities to stop the lab,

477
00:23:12,510 --> 00:23:15,293
and resume it in that
state as it was before.

478
00:23:16,700 --> 00:23:19,910
Then you have simulate attacks.

479
00:23:19,910 --> 00:23:22,400
We support Atomic Red team

480
00:23:22,400 --> 00:23:25,797
and Caldera to simulate attacks.

481
00:23:25,797 --> 00:23:28,330
In this case, from our
command line interface,

482
00:23:28,330 --> 00:23:30,960
we support atomic red team in order

483
00:23:30,960 --> 00:23:33,920
to simulate any attack which you want.

484
00:23:33,920 --> 00:23:36,670
You specify the box
which you want to target.

485
00:23:36,670 --> 00:23:37,820
We saw different boxes.

486
00:23:37,820 --> 00:23:40,976
For example, you either
specified a windows server

487
00:23:40,977 --> 00:23:44,340
and windows client on
windows domain controller.

488
00:23:44,340 --> 00:23:47,439
And you specify which kind of Mitre attack

489
00:23:47,440 --> 00:23:51,530
you want to execute
against this environment.

490
00:23:51,530 --> 00:23:53,379
For example, if you're want

491
00:23:53,380 --> 00:23:55,930
to run a credential dumping attack,

492
00:23:55,930 --> 00:23:59,130
you would specify a Mitre attack ID,

493
00:23:59,130 --> 00:24:02,580
which is T1003 for credential dumping,

494
00:24:02,580 --> 00:24:05,899
and a credential dumping
attack would be executed

495
00:24:05,900 --> 00:24:09,253
against that environment
with one line of code.

496
00:24:10,320 --> 00:24:12,102
And then we have test detections.

497
00:24:13,020 --> 00:24:15,830
We now we simulate the attack,

498
00:24:15,830 --> 00:24:17,570
the logs were generated,

499
00:24:17,570 --> 00:24:19,639
and we wanted to use this logs in order

500
00:24:19,640 --> 00:24:22,500
to verify if all detection is working.

501
00:24:22,500 --> 00:24:25,355
That's why we have a search
command where you can run,

502
00:24:25,355 --> 00:24:28,340
where we can execute your detection,

503
00:24:28,340 --> 00:24:30,399
and you get immediate back result.

504
00:24:30,400 --> 00:24:34,980
If that detection was able
to detect the attack or not,

505
00:24:34,980 --> 00:24:38,543
this is very important
for detection development.

506
00:24:47,940 --> 00:24:50,160
We talked about test detections.

507
00:24:50,160 --> 00:24:53,843
Now I want to talk about the test outcome.

508
00:24:59,850 --> 00:25:04,030
And integration of a detection
lab into a CI/CD pipeline

509
00:25:04,030 --> 00:25:07,952
will lead to multiple steps,

510
00:25:07,952 --> 00:25:11,193
which need to be executed
per detection test.

511
00:25:13,280 --> 00:25:14,250
First of all,

512
00:25:14,250 --> 00:25:17,750
first of all, you're going to
have to build a detection lab.

513
00:25:17,750 --> 00:25:20,420
We have to simulate the attack.

514
00:25:20,420 --> 00:25:22,790
We have to run the detection.

515
00:25:22,790 --> 00:25:24,600
Destroy the detection lab.

516
00:25:24,600 --> 00:25:26,480
And then we look to the next detection

517
00:25:26,480 --> 00:25:28,170
and start from the beginning.

518
00:25:28,170 --> 00:25:31,130
And this needs to be done in,

519
00:25:31,130 --> 00:25:33,390
I recommend it as an IT job,

520
00:25:33,390 --> 00:25:35,650
which goes then over all the detections

521
00:25:35,650 --> 00:25:37,620
which you have in your repository,

522
00:25:37,620 --> 00:25:40,963
and that you're then able to
test that different detections.

523
00:25:42,447 --> 00:25:45,610
In this case, you'll see an
example of the attack range.

524
00:25:45,610 --> 00:25:48,449
We use the simulate,

525
00:25:48,450 --> 00:25:51,293
a simulation of credential dumping attack.

526
00:25:52,560 --> 00:25:55,399
Which you see on the left
side with that command line,

527
00:25:55,400 --> 00:26:00,400
attack range terraform simulate T1003.

528
00:26:00,760 --> 00:26:02,350
And then we wait.

529
00:26:02,350 --> 00:26:05,179
We wait couple of minutes,

530
00:26:05,180 --> 00:26:07,290
in order to ensure the logs in,

531
00:26:07,290 --> 00:26:10,457
in our logging, in our SIEM.

532
00:26:10,458 --> 00:26:13,830
And then we run the specific detection

533
00:26:13,830 --> 00:26:15,240
which we want to test.

534
00:26:15,240 --> 00:26:18,410
This case is attempted
credential dumping for registry

535
00:26:18,410 --> 00:26:19,860
via Reg.exe.

536
00:26:19,860 --> 00:26:22,350
Reg.exe can be easily used

537
00:26:22,350 --> 00:26:26,620
to dump different hives in windows.

538
00:26:26,620 --> 00:26:31,320
And this is a detection which
exactly detect this specific

539
00:26:32,380 --> 00:26:33,213
attack.

540
00:26:34,590 --> 00:26:36,959
And then of course,

541
00:26:36,960 --> 00:26:41,960
we want to know if that
attack was successful or not,

542
00:26:45,570 --> 00:26:47,899
which means you either have
to have green check mark

543
00:26:47,900 --> 00:26:48,863
or red X,

544
00:26:49,814 --> 00:26:50,813
if that was successful.

545
00:26:52,560 --> 00:26:55,919
Then let's come to the last step.

546
00:26:55,920 --> 00:26:58,430
The last step of that CI/CD workflow,

547
00:26:58,430 --> 00:27:00,213
which is deploy detections.

548
00:27:04,120 --> 00:27:07,830
Detections can be deployed
in three different ways.

549
00:27:07,830 --> 00:27:11,963
The first way is you can
package detection into an app.

550
00:27:13,220 --> 00:27:14,659
Many SIEM vendors are
using that concept of apps

551
00:27:14,659 --> 00:27:18,264
to add more features into that tool.

552
00:27:18,264 --> 00:27:22,429
These apps normally consist of
multiple configuration files,

553
00:27:22,430 --> 00:27:25,010
which add additional features

554
00:27:25,010 --> 00:27:26,490
or add the detections.

555
00:27:26,490 --> 00:27:31,200
CI/CD can be used to already
package this kind of app,

556
00:27:31,200 --> 00:27:32,850
which then the SOC team easily

557
00:27:32,850 --> 00:27:35,939
can use in deployed into the SIEM.

558
00:27:35,940 --> 00:27:37,470
This is the first way.

559
00:27:37,470 --> 00:27:42,083
Then the second way is
forking the project,

560
00:27:43,340 --> 00:27:44,629
the git project,

561
00:27:44,630 --> 00:27:47,960
which means it's similar
as a first step, but,

562
00:27:47,960 --> 00:27:52,310
and user can first
before he build that app,

563
00:27:52,310 --> 00:27:53,639
he can change.

564
00:27:53,640 --> 00:27:57,400
He can adapt the detections
according to his environment,

565
00:27:57,400 --> 00:27:59,626
which means you can tune it.

566
00:27:59,626 --> 00:28:01,233
You can change it how he needs it.

567
00:28:02,915 --> 00:28:04,960
And the third way is a more cloud,

568
00:28:04,960 --> 00:28:09,960
and micro service oriented
way of deploying detections.

569
00:28:09,980 --> 00:28:14,210
With every release we can update REST API,

570
00:28:14,210 --> 00:28:18,627
and users can directly hit that REST API

571
00:28:18,627 --> 00:28:20,270
for the latest detections.

572
00:28:20,270 --> 00:28:23,290
This is a very short
development lifecycle,

573
00:28:23,290 --> 00:28:27,129
and we can also enrich it
with contextual information,

574
00:28:27,130 --> 00:28:29,830
which means they can hit the API and get,

575
00:28:29,830 --> 00:28:33,129
give me all the detections
for APD 28 flux software.

576
00:28:33,130 --> 00:28:35,970
Which means you can already enrich

577
00:28:35,970 --> 00:28:38,470
our detections with some metadata,

578
00:28:38,470 --> 00:28:41,243
which then can be used by the juices.

579
00:28:45,210 --> 00:28:50,210
So let me shortly repeat what
we learned in that talk today.

580
00:28:50,370 --> 00:28:53,000
We learned how to establish
a continuous integration,

581
00:28:53,000 --> 00:28:56,890
and continuous delivery
pipeline for detection rules,

582
00:28:56,890 --> 00:29:01,573
to be able to quickly
respond to new threats.

583
00:29:03,410 --> 00:29:06,900
Next week, you should
download either attack range

584
00:29:06,900 --> 00:29:07,830
or mordor labs depending

585
00:29:07,830 --> 00:29:10,260
on what SIEM technology you're using,

586
00:29:10,260 --> 00:29:13,663
and try to install it and
play around with the tools.

587
00:29:14,970 --> 00:29:17,350
In the next three months,

588
00:29:17,350 --> 00:29:18,520
after this presentation,

589
00:29:18,520 --> 00:29:22,410
you should establish a CI/CD workload,

590
00:29:22,410 --> 00:29:26,220
sorry a CI/CD workflow
for your SIEM detections

591
00:29:26,220 --> 00:29:29,400
and start to continuously
test the detections.

592
00:29:29,400 --> 00:29:32,483
It's very important to do
this step continuously.

593
00:29:35,310 --> 00:29:37,173
Within the next six months,

594
00:29:38,030 --> 00:29:40,330
you should think about
sharing these detections

595
00:29:40,330 --> 00:29:41,743
with the InfoSec community.

596
00:29:45,904 --> 00:29:47,090
We are very happy to collaborate

597
00:29:47,090 --> 00:29:48,480
with the open source community,

598
00:29:48,480 --> 00:29:50,080
and share all detections,

599
00:29:50,080 --> 00:29:51,960
because I think when we share them,

600
00:29:51,960 --> 00:29:53,383
that helps everybody.

601
00:29:55,240 --> 00:29:57,450
And additional, you should think about

602
00:29:57,450 --> 00:30:00,955
to make the process a little bit

603
00:30:00,955 --> 00:30:03,189
a little bit more automated.

604
00:30:03,190 --> 00:30:05,141
Because you see you will,

605
00:30:05,141 --> 00:30:05,974
when you start to do it manually,

606
00:30:05,974 --> 00:30:07,360
you will lose a lot of time.

607
00:30:07,360 --> 00:30:09,379
And then you can think about automate

608
00:30:09,380 --> 00:30:12,650
that with an CI/CD workflow

609
00:30:12,650 --> 00:30:14,500
Thank you very much for your attention.

610
00:30:14,500 --> 00:30:17,830
We are looking forward to
your questions in Slido.

611
00:30:17,830 --> 00:30:18,663
Thank you.

