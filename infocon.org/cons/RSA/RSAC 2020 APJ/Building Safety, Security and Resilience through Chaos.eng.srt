1
00:00:10,460 --> 00:00:11,830
- [Narrator] Think you're special,

2
00:00:11,830 --> 00:00:14,240
one of the kind, we agree.

3
00:00:14,240 --> 00:00:17,150
The way you pursue your digital
ambitions is unique to you.

4
00:00:17,150 --> 00:00:20,549
And so do your appetite for digital risk.

5
00:00:20,550 --> 00:00:22,740
Whether you're hyper
connected your ecosystem

6
00:00:22,740 --> 00:00:24,900
and powering a distributed workforce

7
00:00:24,900 --> 00:00:29,740
rapidly leveraging cloud, IoT,
AI or other new technologies.

8
00:00:29,740 --> 00:00:33,430
RSA is here to help you
manage digital risk your way

9
00:00:33,430 --> 00:00:35,620
at every stage of your journey.

10
00:00:35,620 --> 00:00:37,473
So, go ahead, be you.

11
00:00:45,860 --> 00:00:48,930
- Hello, and welcome to Building Safety,

12
00:00:48,930 --> 00:00:51,530
Security and Resilience through Chaos.

13
00:00:51,530 --> 00:00:52,460
If you're joining us live

14
00:00:52,460 --> 00:00:54,510
our speakers are now in
the slider discussion

15
00:00:54,510 --> 00:00:56,900
answering your questions right now.

16
00:00:56,900 --> 00:00:58,240
For audio and video issues,

17
00:00:58,240 --> 00:01:00,587
please click the technical
support button below.

18
00:01:00,587 --> 00:01:02,940
And I'd now like to turn
it over to Aaron Reinhart

19
00:01:02,940 --> 00:01:05,113
and Jerome Walter for the presentation.

20
00:01:08,380 --> 00:01:10,726
- Thank you and welcome to this session.

21
00:01:13,380 --> 00:01:14,213
I'm Jerome Walter,

22
00:01:14,213 --> 00:01:17,929
am the director of security
modernization at VMware.

23
00:01:17,930 --> 00:01:19,200
For the last 20 years,

24
00:01:19,200 --> 00:01:21,550
I've been lucky to have positions as

25
00:01:21,550 --> 00:01:23,280
development system engineers,

26
00:01:23,280 --> 00:01:27,280
and lately as security executive
in various organizations.

27
00:01:27,280 --> 00:01:32,030
At VMware, I helped companies
who were embracing a cloud

28
00:01:32,030 --> 00:01:34,660
and modern applications
and agenda builder issues.

29
00:01:34,660 --> 00:01:38,220
to deliver just a reaches for security.

30
00:01:38,220 --> 00:01:40,270
Throughout the years, I've noticed that

31
00:01:40,270 --> 00:01:43,682
a lot of the traditional
security approach tends to

32
00:01:43,682 --> 00:01:47,530
compensate for flaws in
our practices and systems

33
00:01:47,530 --> 00:01:50,970
and inherently are limiting as a business.

34
00:01:50,970 --> 00:01:51,880
In this presentation,

35
00:01:51,880 --> 00:01:55,240
I will look at a number of key
principles for architecture

36
00:01:55,240 --> 00:01:57,330
for designing security from within

37
00:01:57,330 --> 00:02:00,143
that doesn't impede the
velocity of your business.

38
00:02:04,240 --> 00:02:06,130
- Hi, I'm Aaron Rinehart.

39
00:02:06,130 --> 00:02:08,650
I'm the CTO and co-founder of Verica.

40
00:02:08,650 --> 00:02:13,402
I'm also the Americas a
company that specializes in

41
00:02:13,402 --> 00:02:17,872
bringing the Chaos
Engineering tool sets from

42
00:02:17,872 --> 00:02:21,820
Netflix and United Health
Group to the market.

43
00:02:21,820 --> 00:02:24,109
I'm the former chief security architect,

44
00:02:24,110 --> 00:02:25,370
at the United Health Group.

45
00:02:25,370 --> 00:02:27,151
I have a background actually in

46
00:02:27,151 --> 00:02:30,430
Safety Reliability Engineering at NASA,

47
00:02:30,430 --> 00:02:33,540
as well as I was a software
engineer for most of my career.

48
00:02:33,540 --> 00:02:35,560
I'm a frequent speaker in the space.

49
00:02:35,560 --> 00:02:40,010
I wrote the security
chapter, Chaos Engineering,

50
00:02:40,010 --> 00:02:42,500
the Security Chaos Engineering
chapter in the O'Reilly book

51
00:02:42,500 --> 00:02:44,510
we'll talk about about that.

52
00:02:44,510 --> 00:02:48,390
And Jerome and I are also authors on the

53
00:02:49,390 --> 00:02:51,859
security Chaos Engineering O'Reilly book

54
00:02:51,860 --> 00:02:53,360
due to come out end of summer.

55
00:03:00,510 --> 00:03:03,649
- Thanks Aaron, most of
the organization today

56
00:03:03,650 --> 00:03:05,790
are facing with a challenge.

57
00:03:05,790 --> 00:03:07,910
On one hand digital transformation

58
00:03:07,910 --> 00:03:10,879
and the business needs
innovation needs to change.

59
00:03:10,879 --> 00:03:13,429
They're under a lot of
pressure from new startups

60
00:03:13,430 --> 00:03:15,750
from new organization
and technology companies

61
00:03:15,750 --> 00:03:17,480
who are disrupting the market.

62
00:03:17,480 --> 00:03:20,850
Companies want to improve
their ability to innovate

63
00:03:20,850 --> 00:03:23,160
and then improve the ability to change.

64
00:03:23,160 --> 00:03:25,850
If you read the news all over you see that

65
00:03:25,850 --> 00:03:27,769
there are breaches happening every day

66
00:03:27,770 --> 00:03:30,380
security and assurance
functions want more control

67
00:03:30,380 --> 00:03:32,190
want more stability,

68
00:03:32,190 --> 00:03:34,700
and in the traditional practices,

69
00:03:34,700 --> 00:03:36,250
it seems to be a zero sum game.

70
00:03:37,700 --> 00:03:41,290
On one hand, innovation
needs new technologies.

71
00:03:41,290 --> 00:03:43,910
Needs to step up on the latest game

72
00:03:43,910 --> 00:03:45,710
even before it is standardized

73
00:03:45,710 --> 00:03:48,590
needs you to rise fast,
needs you have a belief.

74
00:03:48,590 --> 00:03:52,120
While when you look at
the traditional practices

75
00:03:52,120 --> 00:03:54,140
in resilience and security,

76
00:03:54,140 --> 00:03:55,940
it's pretty fixed and stable.

77
00:03:55,940 --> 00:03:58,339
Disaster recovery planning
and risk assessments

78
00:03:58,339 --> 00:04:00,200
stepping stones, protective

79
00:04:00,200 --> 00:04:04,804
added on security systems
that actually slow

80
00:04:04,804 --> 00:04:06,823
the speed of change.

81
00:04:08,610 --> 00:04:09,980
If you look at resilience,

82
00:04:09,980 --> 00:04:13,328
which is a core capability
today of our business.

83
00:04:13,329 --> 00:04:17,149
Resilience engineering on autos

84
00:04:17,149 --> 00:04:20,279
have pretty much set it clearly,

85
00:04:20,279 --> 00:04:21,880
the resilience development in organization

86
00:04:21,880 --> 00:04:24,610
is the ability to resist,
absorb and recover

87
00:04:24,610 --> 00:04:26,270
and adapt to change.

88
00:04:26,270 --> 00:04:28,919
It's really whether
you're resilient or not

89
00:04:28,920 --> 00:04:31,810
depends on whether your
customers can depend on you

90
00:04:31,810 --> 00:04:33,520
in times of crisis.

91
00:04:33,520 --> 00:04:35,870
In terms of COVID we can see it,

92
00:04:35,870 --> 00:04:37,560
organizations who are doing the best

93
00:04:37,560 --> 00:04:40,277
as a one way boat to adapt
to serve the customers

94
00:04:40,277 --> 00:04:44,380
who are in need of new change a new CFO

95
00:04:44,380 --> 00:04:46,110
during this dire situation,

96
00:04:46,110 --> 00:04:48,150
know the organization that does struggling

97
00:04:48,150 --> 00:04:49,710
to survive themselves.

98
00:04:50,670 --> 00:04:53,060
Whereas when it discusses a lot of

99
00:04:53,060 --> 00:04:55,930
IT and security executive
about resilience,

100
00:04:55,930 --> 00:04:57,740
a few is pretty much around

101
00:04:57,740 --> 00:04:59,500
building robustness in the system or

102
00:04:59,500 --> 00:05:02,103
the ability to recover from disaster,

103
00:05:02,940 --> 00:05:07,063
agility and the ability to
adapt is very often left aside.

104
00:05:10,630 --> 00:05:14,130
We've developed a flow
view of our systems.

105
00:05:14,130 --> 00:05:17,240
In our practices, we
try to wrap our hands,

106
00:05:17,240 --> 00:05:19,310
our heads around the complex systems,

107
00:05:19,310 --> 00:05:20,640
and we want to document them.

108
00:05:20,640 --> 00:05:23,780
But the realities of
fun very different than

109
00:05:23,780 --> 00:05:26,090
what actually is written in the thumb.

110
00:05:26,090 --> 00:05:29,542
If it wasn't, there wouldn't
be any outage or the issues.

111
00:05:31,110 --> 00:05:34,780
Our approach also doesn't
stand the test of time.

112
00:05:34,780 --> 00:05:36,030
When you build something,

113
00:05:36,030 --> 00:05:40,700
things change organization real nice.

114
00:05:40,700 --> 00:05:43,640
Competition change and
the need to is a needs

115
00:05:43,640 --> 00:05:45,909
always constantly evolving.

116
00:05:45,910 --> 00:05:48,840
Our systems have become way more complex

117
00:05:48,840 --> 00:05:50,260
than we remember them.

118
00:05:50,260 --> 00:05:54,436
We try to simplify them to
wrap our head around it,

119
00:05:54,436 --> 00:05:57,793
but the reality is
often much more complex.

120
00:05:59,260 --> 00:06:02,150
There is also division
in the organizations.

121
00:06:02,150 --> 00:06:03,580
On one hand, we have the builders

122
00:06:03,580 --> 00:06:07,590
trying to build new application
and it brings us innovation.

123
00:06:07,590 --> 00:06:09,900
On the other hand, we
have teams of defenders

124
00:06:09,900 --> 00:06:14,133
who are studying and incentivize
to improve the stability

125
00:06:14,134 --> 00:06:16,030
and to improve this defense,

126
00:06:16,030 --> 00:06:17,640
and force them to cooperate.

127
00:06:17,640 --> 00:06:20,289
We've write stunts, we've
write documentation,

128
00:06:20,290 --> 00:06:25,290
and we turn to accentuates
this of issue of simplifying

129
00:06:25,850 --> 00:06:28,510
for everyone to read around the table.

130
00:06:28,510 --> 00:06:30,060
If you're familiar with Conway's Law,

131
00:06:30,060 --> 00:06:31,634
you will know that

132
00:06:31,634 --> 00:06:33,620
systems center reproduce the organization,

133
00:06:33,620 --> 00:06:36,183
and that's a key challenge we have today.

134
00:06:37,430 --> 00:06:38,810
So, hope is not lost.

135
00:06:38,810 --> 00:06:40,400
There is a new playbook new practices

136
00:06:40,400 --> 00:06:41,710
that come from organizations that have

137
00:06:41,710 --> 00:06:44,719
embraced the cloud
technologies and embrace a jive

138
00:06:44,720 --> 00:06:46,660
from the last decade.

139
00:06:46,660 --> 00:06:49,060
And this is what I want
you to look at with you.

140
00:06:51,110 --> 00:06:52,920
A few attributes are very important

141
00:06:52,920 --> 00:06:55,030
when you design your systems.

142
00:06:55,030 --> 00:06:56,753
We will see three attributes DIE,

143
00:06:57,996 --> 00:06:59,003
do you remember them?

144
00:06:59,003 --> 00:07:02,320
That really have spitting
resilience in your systems.

145
00:07:02,320 --> 00:07:03,349
If you want to be the security

146
00:07:03,350 --> 00:07:05,560
weeds out impending innovation,

147
00:07:05,560 --> 00:07:08,990
you should focus on these
five attributes ideas,

148
00:07:08,990 --> 00:07:10,803
and we will see what they are today.

149
00:07:15,500 --> 00:07:18,841
Modern applications have
pretty much embraced

150
00:07:18,841 --> 00:07:20,810
those five principle.

151
00:07:20,810 --> 00:07:23,450
Immutable systems, systems
that are not changed

152
00:07:23,450 --> 00:07:25,430
once they're build,

153
00:07:25,430 --> 00:07:29,100
were changed or not done
after being building

154
00:07:29,100 --> 00:07:32,360
but why building and replacing systems.

155
00:07:32,360 --> 00:07:35,389
Distributed architecture
that enables resilience

156
00:07:35,389 --> 00:07:38,610
and security as well.

157
00:07:38,610 --> 00:07:41,670
So, workloads and the mindset
of how you design a system

158
00:07:41,670 --> 00:07:44,340
to be ephemeral to work on the few minutes

159
00:07:44,340 --> 00:07:47,633
or a few hours instead of
the old ways of doing years.

160
00:07:48,690 --> 00:07:51,690
Authentication is critical
for increasing security.

161
00:07:51,690 --> 00:07:55,463
And so, we use segmentation to
reduce less reuse of issues.

162
00:07:56,600 --> 00:07:58,910
Let's look at a few of the benefits

163
00:07:58,910 --> 00:08:00,620
once you build an immutable system

164
00:08:00,620 --> 00:08:04,120
which means you're moving
towards a declarative system.

165
00:08:04,120 --> 00:08:07,000
Everything is written
as configuration as code

166
00:08:07,000 --> 00:08:09,750
infrastructure as code and applications.

167
00:08:09,750 --> 00:08:14,050
Then your systems enforce what
the state is supposed to be.,

168
00:08:14,050 --> 00:08:17,190
you gain predictability,
you gain audit ability.

169
00:08:17,190 --> 00:08:20,150
You also reduce your
chances of insider threats

170
00:08:20,150 --> 00:08:22,912
by removing the human change
directly from the system.

171
00:08:23,920 --> 00:08:26,370
Distributed systems have
been there for decades.

172
00:08:26,370 --> 00:08:30,910
And we know the value in
terms of handling furtherance.

173
00:08:30,910 --> 00:08:33,630
But joined with the immutable principles

174
00:08:33,630 --> 00:08:34,980
and pipelines we have today.

175
00:08:34,980 --> 00:08:36,996
We also facilitate,

176
00:08:36,996 --> 00:08:39,913
it also facilitates patching
of security vulnerabilities

177
00:08:39,913 --> 00:08:41,169
in a matter of time,

178
00:08:41,169 --> 00:08:44,310
we see massive growth through
reduction of patching windows,

179
00:08:44,310 --> 00:08:46,270
thanks to this approach.

180
00:08:46,270 --> 00:08:48,189
So, we change to however easier

181
00:08:48,190 --> 00:08:51,310
for more metrics of microservices,

182
00:08:51,310 --> 00:08:52,869
while in the past, you
were building something

183
00:08:52,870 --> 00:08:54,610
and trying to maintain it

184
00:08:54,610 --> 00:08:57,163
for years and years without outage.

185
00:08:58,310 --> 00:09:00,260
Cloud Native architecture release

186
00:09:00,260 --> 00:09:03,260
about working with something
to destroy and build regularly.

187
00:09:04,170 --> 00:09:05,680
What it means for security,

188
00:09:05,680 --> 00:09:08,079
that you can guarantee that
the state of your system

189
00:09:08,080 --> 00:09:10,250
is what is in your configuration,

190
00:09:10,250 --> 00:09:14,473
you can wipe clean regularly
to disrupt any cyber attack.

191
00:09:15,710 --> 00:09:17,120
Everything is API driven.

192
00:09:17,120 --> 00:09:19,620
So, you need to authentication
to make sure that

193
00:09:19,620 --> 00:09:24,060
everything remains
controlled by your users.

194
00:09:24,060 --> 00:09:26,530
Segmentation of networks and service mesh

195
00:09:26,530 --> 00:09:28,449
really helps reduce the blast radius

196
00:09:28,450 --> 00:09:30,370
by making sure that your
network segmentation

197
00:09:30,370 --> 00:09:31,793
is your business logic.

198
00:09:34,940 --> 00:09:36,260
We have a new challenge today,

199
00:09:36,260 --> 00:09:37,410
we're moving towards

200
00:09:37,410 --> 00:09:39,719
declarative programming
infrastructure as code

201
00:09:39,720 --> 00:09:41,130
security as code.

202
00:09:41,130 --> 00:09:44,140
That means that everyone needs to focus on

203
00:09:44,140 --> 00:09:45,760
reconciliation of state,

204
00:09:45,760 --> 00:09:47,770
making sure that this thing to your system

205
00:09:47,770 --> 00:09:49,960
is what you expect it to be.

206
00:09:49,960 --> 00:09:53,990
And this is where we have today,

207
00:09:53,990 --> 00:09:56,880
internal tools, that's
what communities and notice

208
00:09:56,880 --> 00:09:59,280
application platform
really brings into you

209
00:09:59,280 --> 00:10:01,827
declarative manifests and making sure that

210
00:10:01,827 --> 00:10:04,371
whenever the state of the system change

211
00:10:04,371 --> 00:10:08,288
it is the platform's
resumes the normal states.

212
00:10:09,274 --> 00:10:10,783
Gonna keep security the same

213
00:10:10,783 --> 00:10:13,880
making sure that anything
that deviates from the plan

214
00:10:13,880 --> 00:10:15,431
and from your configuration files

215
00:10:15,431 --> 00:10:18,950
is detected and reason to know.

216
00:10:18,950 --> 00:10:20,610
Into those practices,

217
00:10:20,610 --> 00:10:23,400
declarative programming
at the application level

218
00:10:23,400 --> 00:10:25,510
repaving your infrastructure,

219
00:10:25,510 --> 00:10:27,620
destroying and rebuilding
regularly to make sure that

220
00:10:27,620 --> 00:10:30,650
it's not any unauthorized
modification of malware

221
00:10:30,650 --> 00:10:32,510
is utterly important.

222
00:10:32,510 --> 00:10:34,750
For more complex reconciliations,

223
00:10:34,750 --> 00:10:37,853
this is where Chaos
Engineering is so important.

224
00:10:39,590 --> 00:10:43,910
Simple practices really help
give you the the hygiene,

225
00:10:43,910 --> 00:10:48,910
but complex to find weaknesses
requires chaos engine.

226
00:10:51,540 --> 00:10:53,110
And I really want to leave you with

227
00:10:53,110 --> 00:10:57,280
one principle of the cyber
hygiene we need to do today.

228
00:10:57,280 --> 00:11:00,610
Improving our ability to
repair through pipeline

229
00:11:00,610 --> 00:11:04,230
into immutability into
distributed aspects.

230
00:11:04,230 --> 00:11:06,000
Your ability to fix the vulnerability

231
00:11:06,000 --> 00:11:08,840
before someone exploited is very much

232
00:11:08,840 --> 00:11:12,310
the core of not being breached.

233
00:11:12,310 --> 00:11:15,199
Repaving and destroying and
rebuilding as often as you can

234
00:11:15,200 --> 00:11:17,270
to make sure that what
runs in your environment

235
00:11:17,270 --> 00:11:20,203
is what you expect it to
be is absolutely important.

236
00:11:21,170 --> 00:11:22,439
The more fun you repave,

237
00:11:22,440 --> 00:11:24,450
the less likely a lateral movement

238
00:11:25,481 --> 00:11:27,363
will be able to be executive.

239
00:11:28,560 --> 00:11:31,619
Protecting your credentials
is premier module as well.

240
00:11:31,620 --> 00:11:33,780
We see in the last version reported

241
00:11:33,780 --> 00:11:37,399
80% of breaches have to do
with stolen credentials,

242
00:11:37,399 --> 00:11:40,057
whether they are changing them regularly

243
00:11:40,057 --> 00:11:42,060
and your ability to change them regularly

244
00:11:42,060 --> 00:11:44,810
can make the difference
between an attack and a breach.

245
00:11:49,130 --> 00:11:51,975
Aaron, I leave it to you.

246
00:11:51,975 --> 00:11:55,620
- Thank you, so Chaos Engineering,

247
00:11:55,620 --> 00:11:58,450
in general requires a change in mindset.

248
00:11:58,450 --> 00:12:03,450
And an important aspect that I
love to bring to bear is that

249
00:12:04,720 --> 00:12:06,960
this actually statement
is a modified statement

250
00:12:06,960 --> 00:12:10,770
from Sidney Decker, which
replaces the word secure

251
00:12:11,650 --> 00:12:14,173
into a safe, but it's a reminder,

252
00:12:14,173 --> 00:12:17,580
like when things go well,
humans are involved.

253
00:12:17,580 --> 00:12:19,830
When things go bad humans are involved.

254
00:12:19,830 --> 00:12:23,130
And no system is inherently
secure by default.

255
00:12:23,130 --> 00:12:26,560
It's humans that are required
to make them that way.

256
00:12:26,560 --> 00:12:30,329
It's a safety security
liability are human constructs.

257
00:12:30,330 --> 00:12:32,340
It's important remember that
next time we point the finger

258
00:12:32,340 --> 00:12:34,140
at human error and things like that.

259
00:12:36,427 --> 00:12:38,240
So, what is this Chaos Engineering thing

260
00:12:38,240 --> 00:12:39,440
I keep talking about?

261
00:12:39,440 --> 00:12:41,150
If you haven't heard about it already.

262
00:12:41,150 --> 00:12:43,280
By the way, I often ask people

263
00:12:43,280 --> 00:12:44,829
if they've ever heard
of Chaos Engineering,

264
00:12:44,830 --> 00:12:46,040
some people raise their hands

265
00:12:46,040 --> 00:12:48,370
and I asked people if they've
ever heard of Chaos Monkey

266
00:12:48,370 --> 00:12:49,570
and more people raise their hands.

267
00:12:49,570 --> 00:12:51,366
It's the same thing.

268
00:12:51,366 --> 00:12:56,366
And the Chaos Monkey is a
tool within Chaos Engineering.

269
00:12:56,910 --> 00:12:58,370
So, what is Chaos Engineering?

270
00:12:58,370 --> 00:13:00,220
So, the Netflix definition is

271
00:13:00,220 --> 00:13:04,070
the discipline of experimentation
on distributed systems

272
00:13:04,070 --> 00:13:06,270
in order to build
confidence in the system's

273
00:13:06,270 --> 00:13:08,870
ability to withstand turbulent conditions.

274
00:13:08,870 --> 00:13:10,060
Another way to think about it is this

275
00:13:10,060 --> 00:13:12,270
is idea of proactively introducing

276
00:13:12,270 --> 00:13:13,760
turbulent conditions into a system

277
00:13:13,760 --> 00:13:15,220
to try to determine the conditions

278
00:13:15,220 --> 00:13:19,063
by which a system will fail,
before it actually fails.

279
00:13:20,324 --> 00:13:21,609
And we'll talk about how
this applies to security.

280
00:13:21,610 --> 00:13:24,670
But in general, this is the basic concept.

281
00:13:24,670 --> 00:13:28,286
We'd like to label as more experimentation

282
00:13:28,286 --> 00:13:29,853
than a testing regime.

283
00:13:31,100 --> 00:13:32,880
Who's doing Chaos Engineering,

284
00:13:32,880 --> 00:13:35,460
it's a little over, I think, 12 or 1300.

285
00:13:35,460 --> 00:13:39,480
Companies now doing it in
various shapes or forums of it.

286
00:13:39,480 --> 00:13:43,033
And Security Chaos Engineering
is taking off as well.

287
00:13:43,977 --> 00:13:46,110
Been quite interesting to watch.

288
00:13:46,110 --> 00:13:48,122
But this is no longer a fad.

289
00:13:48,122 --> 00:13:50,780
This is becoming a standard practice

290
00:13:50,780 --> 00:13:53,530
and eventually it's going to
be part of the new normal.

291
00:13:54,370 --> 00:13:55,990
So, there are currently two O'Reilly books

292
00:13:55,990 --> 00:13:57,500
out on Chaos Engineering.

293
00:13:57,500 --> 00:13:58,770
The first one was from Netflix.

294
00:13:58,770 --> 00:14:01,630
The second one was was written
by my co founder Becker,

295
00:14:01,630 --> 00:14:05,150
Casey Rosenthal, that's this
book I showed up earlier,

296
00:14:05,150 --> 00:14:05,983
just came out.

297
00:14:05,983 --> 00:14:07,890
It also has chapter 20,

298
00:14:07,890 --> 00:14:10,808
is the chapter on Security
Chaos Engineering.

299
00:14:10,808 --> 00:14:13,740
And as a reminder, there
will be a full book

300
00:14:13,740 --> 00:14:15,341
on Security Chaos Engineering,

301
00:14:15,341 --> 00:14:18,728
towards the end of the summer coming up.

302
00:14:18,728 --> 00:14:21,449
Don't cast engineering story would be fit

303
00:14:21,450 --> 00:14:24,090
without explaining Chaos Monkey.

304
00:14:24,090 --> 00:14:25,540
So, Chaos Monkey was sort of

305
00:14:25,540 --> 00:14:28,020
beginning of Chaos
Engineering and Netflix,

306
00:14:28,020 --> 00:14:29,319
and it was born out of actually

307
00:14:29,320 --> 00:14:31,070
Netflix cloud transformation.

308
00:14:31,070 --> 00:14:33,860
A lot of people forget that key component

309
00:14:33,860 --> 00:14:34,930
because a lot of people say Aaron,

310
00:14:34,930 --> 00:14:36,301
I can't even do the DevOps,

311
00:14:36,302 --> 00:14:38,580
how am i into Chaos Engineering?

312
00:14:38,580 --> 00:14:42,320
Well, Netflix was very immature
and engineering as well.

313
00:14:42,320 --> 00:14:44,450
They were it was during
their cloud transformation

314
00:14:44,450 --> 00:14:45,932
from DVDs to Amazon,

315
00:14:45,932 --> 00:14:48,240
that they could see the need for it.

316
00:14:48,240 --> 00:14:50,190
The idea was, is that what was happening

317
00:14:50,190 --> 00:14:52,285
is as they were building an Amazon,

318
00:14:52,285 --> 00:14:55,000
AMIs, Amazon Machine Images,
would just disappear.

319
00:14:55,000 --> 00:14:57,554
It was a feature at the
time of Amazon, apparently.

320
00:14:57,554 --> 00:14:59,709
Well, what they needed was is

321
00:14:59,710 --> 00:15:01,610
after they built a
systems that are resilient

322
00:15:01,610 --> 00:15:03,120
to that particular problem,

323
00:15:03,120 --> 00:15:05,030
they need a way of actually testing it.

324
00:15:05,030 --> 00:15:07,010
So, Chaos Monkey during business hours

325
00:15:07,010 --> 00:15:09,160
were pseudo randomly select an AMI,

326
00:15:09,160 --> 00:15:10,650
it will terminate it.

327
00:15:10,650 --> 00:15:12,097
I what that does is,

328
00:15:12,097 --> 00:15:16,132
it puts a well defined problem
in front of an engineer.

329
00:15:16,133 --> 00:15:17,500
What do I mean by that?

330
00:15:17,500 --> 00:15:20,745
Well, any engineer has the condition

331
00:15:20,745 --> 00:15:25,745
that can happen to my service
during business hours.

332
00:15:25,890 --> 00:15:27,670
So, I need my service to be resilient

333
00:15:27,670 --> 00:15:29,380
to those kind of failures and problems.

334
00:15:29,380 --> 00:15:31,110
It turned out Netflix did.

335
00:15:31,110 --> 00:15:33,986
And the story kind of
evolved from Chaos Monkey.

336
00:15:33,986 --> 00:15:35,730
But the key thing was is that

337
00:15:35,730 --> 00:15:38,070
it was really about putting
well defined problems

338
00:15:38,070 --> 00:15:39,793
and context in front of engineers.

339
00:15:41,210 --> 00:15:43,120
What is Security Chaos Engineering?

340
00:15:43,120 --> 00:15:45,350
Well, I'll cut to the chase
quote real quick on it.

341
00:15:45,350 --> 00:15:47,950
It's really the same thing
as applied to security.

342
00:15:47,950 --> 00:15:49,307
It's just a different
way of thinking about it.

343
00:15:49,307 --> 00:15:51,357
And the use cases are a little different.

344
00:15:52,574 --> 00:15:55,550
The core premise of Chaos
Engineering in general is that

345
00:15:55,550 --> 00:15:57,064
hope is not a strategy.

346
00:15:57,064 --> 00:16:01,260
I like to, I've kind of bold
my statement here is that,

347
00:16:01,260 --> 00:16:04,390
engineers don't really believe
in two things hope or luck.

348
00:16:04,390 --> 00:16:08,090
It didn't work, so it doesn't
And we want to know why?

349
00:16:08,090 --> 00:16:09,390
So, we can make it better.

350
00:16:10,500 --> 00:16:12,270
Yeah, hope work, the hope is the strategy

351
00:16:12,270 --> 00:16:14,370
worked in Star Wars but doesn't work here.

352
00:16:15,850 --> 00:16:18,200
So, it's really about continuously

353
00:16:18,200 --> 00:16:20,040
validating that our security functions

354
00:16:20,040 --> 00:16:21,569
the way we think it does.

355
00:16:21,570 --> 00:16:23,610
A lot of people, a lot of
companies that have come to me

356
00:16:23,610 --> 00:16:24,880
and I've helped them get started with

357
00:16:24,880 --> 00:16:26,383
Security Chaos Engineering.

358
00:16:27,480 --> 00:16:29,490
They've started applying these techniques

359
00:16:29,490 --> 00:16:32,620
of injecting these failure
modes into their systems.

360
00:16:32,620 --> 00:16:33,880
And they're finding that

361
00:16:33,880 --> 00:16:36,200
a lot of their security
actually doesn't work.

362
00:16:36,200 --> 00:16:37,450
But that's great, I mean,

363
00:16:37,450 --> 00:16:39,889
it's better that we proactively find out

364
00:16:39,889 --> 00:16:42,190
that our security is not functioning

365
00:16:42,190 --> 00:16:43,510
as well as we think it is.

366
00:16:43,510 --> 00:16:46,580
It's better we find it out
instead of an adversary,

367
00:16:46,580 --> 00:16:47,730
taking advantage of it.

368
00:16:50,940 --> 00:16:53,368
Through the process of
using Chaos Engineering,

369
00:16:53,368 --> 00:16:56,000
we're able to, we're able
to reduce uncertainty,

370
00:16:56,000 --> 00:16:58,240
because if we're constantly
injecting things like

371
00:16:58,240 --> 00:16:59,770
misconfigured ports are,

372
00:16:59,770 --> 00:17:02,290
a permissive accounts are,
turning off encryption,

373
00:17:02,290 --> 00:17:04,180
or if we're constantly
injecting the things

374
00:17:04,180 --> 00:17:05,810
that we expect to detach.

375
00:17:05,810 --> 00:17:08,710
We build this confidence that we know,

376
00:17:08,710 --> 00:17:11,849
under certain conditions that we are

377
00:17:11,849 --> 00:17:13,449
and we constantly do these things

378
00:17:13,450 --> 00:17:18,450
that our security is functioning
as good as we wanted it to.

379
00:17:20,347 --> 00:17:23,349
And that builds a great
amount of confidence.

380
00:17:23,349 --> 00:17:27,142
And we really need that in the business.

381
00:17:29,071 --> 00:17:30,919
It's really about proactively
managing and measuring

382
00:17:30,920 --> 00:17:34,610
because we're, because
we're initiating the event,

383
00:17:34,610 --> 00:17:36,340
instead of waiting for an event to happen.

384
00:17:36,340 --> 00:17:39,580
We can now kind of measure
things like instant response,

385
00:17:39,580 --> 00:17:41,810
and we can measure and look at logs

386
00:17:41,810 --> 00:17:45,330
and see if they have the log
data actually made sense.

387
00:17:45,330 --> 00:17:46,970
You're trying to evaluate log data

388
00:17:46,970 --> 00:17:48,893
for areas during an incident.

389
00:17:50,540 --> 00:17:51,990
it's a little too late to be doing that

390
00:17:51,990 --> 00:17:54,660
to be proactive, if you're proactively

391
00:17:55,700 --> 00:17:58,210
injecting these failure
modes and trying to determine

392
00:17:58,210 --> 00:18:02,350
Hey, did the environ give us
the right kind of data we need

393
00:18:02,350 --> 00:18:04,399
to understand what happened,

394
00:18:04,400 --> 00:18:06,470
it's way better learning environment

395
00:18:06,470 --> 00:18:08,530
when people aren't freaking
out, they're gonna incident.

396
00:18:08,530 --> 00:18:11,798
The cognitive load
between between handoffs,

397
00:18:11,798 --> 00:18:16,798
is too much for learning environment.

398
00:18:16,899 --> 00:18:20,040
So, some of the use cases
for Chaos Engineering,

399
00:18:20,040 --> 00:18:23,710
instant response is a great
use case for Chaos Engineering.

400
00:18:23,710 --> 00:18:26,190
Obviously, control validation.

401
00:18:26,190 --> 00:18:27,950
validating with security controls fire

402
00:18:27,950 --> 00:18:29,650
under the conditions you expect them,

403
00:18:29,650 --> 00:18:31,280
you'd be surprised when
you start doing this,

404
00:18:31,280 --> 00:18:33,300
that a find out that they really don't.

405
00:18:33,300 --> 00:18:36,330
But that's not due to anybody
intentionally doing that.

406
00:18:36,330 --> 00:18:38,490
It's the size, scale speed and complexity

407
00:18:38,490 --> 00:18:39,820
of how we build things.

408
00:18:39,820 --> 00:18:43,200
Our controls quickly drift
out of effectiveness.

409
00:18:43,200 --> 00:18:45,543
And that's Chaos Engineering.

410
00:18:45,543 --> 00:18:50,543
It's the way for us to know
about that, fix it proactively.

411
00:18:50,620 --> 00:18:52,580
It's that's a key thing
about Chaos Engineering,

412
00:18:52,580 --> 00:18:54,500
it's a proactive technique.

413
00:18:54,500 --> 00:18:57,200
Instead of most levels, other
techniques are reactive.

414
00:18:58,351 --> 00:19:01,350
And also to be useful cases
security observability

415
00:19:01,350 --> 00:19:03,350
it's a great like I said,
it a great way to find out

416
00:19:03,350 --> 00:19:06,199
what log data you had or
log data you didn't have

417
00:19:06,200 --> 00:19:10,090
an enhance your observable events

418
00:19:10,090 --> 00:19:14,413
during those during
those types of signals.

419
00:19:15,350 --> 00:19:16,949
Also, compliance monitoring,

420
00:19:16,950 --> 00:19:18,760
every Chaos Engineering experiment

421
00:19:18,760 --> 00:19:21,040
with its availability of security based

422
00:19:21,040 --> 00:19:22,149
has compliance value.

423
00:19:22,150 --> 00:19:24,440
Essentially, you prove whether
the technology works the way

424
00:19:24,440 --> 00:19:27,780
you thought it did, or
how you had a documented

425
00:19:27,780 --> 00:19:28,613
and your compliance.

426
00:19:28,613 --> 00:19:30,730
And so, there's compliance and audit value

427
00:19:30,730 --> 00:19:32,743
for every control, every experiment.

428
00:19:33,900 --> 00:19:38,623
So, the answer response use
case is really a valuable one.

429
00:19:39,470 --> 00:19:42,450
And because no matter
how much money you spend,

430
00:19:42,450 --> 00:19:43,760
how many you have,

431
00:19:43,760 --> 00:19:46,889
how many fancy new
security controls you have,

432
00:19:46,889 --> 00:19:49,649
you still don't know a lot about an event

433
00:19:49,650 --> 00:19:51,726
is that, you don't know
where it's gonna happen.

434
00:19:51,726 --> 00:19:52,680
who's doing it?

435
00:19:52,680 --> 00:19:55,256
why they're doing it? how they're,

436
00:19:55,256 --> 00:19:57,520
how they're trying to get in?

437
00:19:57,520 --> 00:19:59,407
or who it is like, you know,

438
00:19:59,407 --> 00:20:02,379
and so, it's difficult,
it's hard to compare

439
00:20:02,380 --> 00:20:06,240
also subjective events, a side by side.

440
00:20:06,240 --> 00:20:07,490
And you're also assuming that

441
00:20:07,490 --> 00:20:10,440
you knew the point of
which the event began,

442
00:20:10,440 --> 00:20:13,600
or that it wasn't a cascading
event from multiple things.

443
00:20:13,600 --> 00:20:16,469
But when you initiate the event yourself,

444
00:20:16,470 --> 00:20:18,280
you're able to now kind
of manage a measure.

445
00:20:18,280 --> 00:20:20,300
Did I have the right
number of people on call?

446
00:20:20,300 --> 00:20:21,721
Did they have the right skills?

447
00:20:21,721 --> 00:20:24,140
We didn't have the access
they needed to those systems

448
00:20:24,140 --> 00:20:25,790
with a rum books correct.

449
00:20:25,790 --> 00:20:26,623
These are the kind of things

450
00:20:26,623 --> 00:20:27,980
you can do with Chaos Engineering,

451
00:20:27,980 --> 00:20:29,830
it couldn't do with every techniques.

452
00:20:30,920 --> 00:20:32,290
It's really about flipping the model

453
00:20:32,290 --> 00:20:36,360
instead, the post mortem
being that exercise

454
00:20:36,360 --> 00:20:40,219
the toy about explaining to
management what happened,

455
00:20:40,220 --> 00:20:42,220
it makes the post mortem,

456
00:20:42,220 --> 00:20:43,950
actually a preparation exercises

457
00:20:43,950 --> 00:20:46,710
is that we get to proactively
introduce these conditions,

458
00:20:46,710 --> 00:20:47,900
figure out what worked, what didn't,

459
00:20:47,900 --> 00:20:49,510
if it didn't work, which almost every

460
00:20:49,510 --> 00:20:51,550
Chaos Engineering
experiment I've experienced,

461
00:20:51,550 --> 00:20:53,159
doesn't work the first time.

462
00:20:53,160 --> 00:20:55,510
But if it didn't work, document why?

463
00:20:55,510 --> 00:20:57,391
Develop an understanding, talk him through

464
00:20:57,391 --> 00:21:01,590
developer mediation, and
then run it again, right?

465
00:21:01,590 --> 00:21:04,139
And if we're doing this when
there's no internet outage,

466
00:21:04,140 --> 00:21:07,540
we're discovering things about
our system, we didn't know.

467
00:21:07,540 --> 00:21:08,570
Because we knew them,

468
00:21:08,570 --> 00:21:09,870
there never would have been the outage,

469
00:21:09,870 --> 00:21:11,260
we would have just fixed it.

470
00:21:11,260 --> 00:21:13,320
And just remember, we
don't do Chaos Engineering

471
00:21:13,320 --> 00:21:14,560
when people are freaking out.

472
00:21:14,560 --> 00:21:16,240
This is a proactive methodology

473
00:21:16,240 --> 00:21:19,470
to discover and build a
continuous learning capability

474
00:21:19,470 --> 00:21:22,100
within our engineering apparatus.

475
00:21:22,100 --> 00:21:24,909
But we don't do it when
people are freaking out.

476
00:21:24,910 --> 00:21:29,320
So Chaoslingr, so I'm
sort of known as being

477
00:21:29,320 --> 00:21:31,840
sort of the Pioneer behind applying

478
00:21:31,840 --> 00:21:35,530
Netflix's Chaos Engineering to security,

479
00:21:35,530 --> 00:21:36,889
and I did it United Health Group

480
00:21:36,890 --> 00:21:39,551
and we wrote this tool called ChaoSlingr.

481
00:21:39,551 --> 00:21:42,669
What it was, is the first application of

482
00:21:42,670 --> 00:21:44,993
Chaos Engineering to security.

483
00:21:44,993 --> 00:21:48,070
But I'm no longer at United Health Group.

484
00:21:48,070 --> 00:21:50,570
But the tools I don't get hub.

485
00:21:50,570 --> 00:21:52,909
And basically, it represents a framework

486
00:21:52,910 --> 00:21:55,590
for how to actually
execute case experiments.

487
00:21:55,590 --> 00:21:57,419
There's three functions

488
00:21:57,420 --> 00:22:00,460
and there's couple example
experiments out there.

489
00:22:00,460 --> 00:22:02,770
And there'll be more on
this in the O'Reilly book

490
00:22:02,770 --> 00:22:04,120
on the how to and all that.

491
00:22:05,038 --> 00:22:07,760
Few of the features of the
product is it's entirely lambdas,

492
00:22:07,760 --> 00:22:12,410
and AWS, the only works
for AWS at the moment,

493
00:22:12,410 --> 00:22:15,113
is ChatOps integration, and
it's Opt-in Opt-out model.

494
00:22:16,400 --> 00:22:20,330
So, an example experiment that
we released with ChaoSlingr

495
00:22:20,330 --> 00:22:21,679
we needed an example experiment

496
00:22:21,680 --> 00:22:23,006
that everyone could relate to.

497
00:22:23,006 --> 00:22:25,740
And the example experiment
was port slinger.

498
00:22:25,740 --> 00:22:27,640
Port slinger was the failure mode,

499
00:22:27,640 --> 00:22:30,420
was an unauthorized
misconfigured port change.

500
00:22:30,420 --> 00:22:32,900
And for some odd reason
that happens all the time,

501
00:22:32,900 --> 00:22:36,080
not intentionally people make
I thought the form wrong.

502
00:22:36,080 --> 00:22:39,169
They had applied the change
wrong, It happens, right?

503
00:22:39,170 --> 00:22:40,810
Well, we started doing this

504
00:22:40,810 --> 00:22:43,139
and running this on our AWS instances,

505
00:22:43,140 --> 00:22:46,310
we started finding out that
our expectation was that

506
00:22:46,310 --> 00:22:48,480
our firewall would immediately
detect it and lock it.

507
00:22:48,480 --> 00:22:49,940
It would be a nonissue.

508
00:22:49,940 --> 00:22:54,010
We found out was definitely
true, but 60% of the time,

509
00:22:54,010 --> 00:22:56,800
and what we saw as a person we learned.

510
00:22:56,800 --> 00:22:58,240
The second thing we learned was

511
00:22:58,240 --> 00:23:01,020
the cloud native commodity
configuration management tool

512
00:23:01,020 --> 00:23:02,760
caught it and bought it every time.

513
00:23:02,760 --> 00:23:04,640
So, something that
we're kind of paying for

514
00:23:04,640 --> 00:23:07,694
wasn't as good as the thing
we weren't paying for.

515
00:23:07,694 --> 00:23:11,320
So anyway, we were able
to proactively fix,

516
00:23:11,320 --> 00:23:12,649
we had a configuration drift issue

517
00:23:12,650 --> 00:23:15,010
between our different
environments for the firewall,

518
00:23:15,010 --> 00:23:17,890
so, we were able to fix
it, there was no incident.

519
00:23:17,890 --> 00:23:20,030
And also we expect a good log data

520
00:23:20,030 --> 00:23:23,160
to correlate events to our
security operation center.

521
00:23:23,160 --> 00:23:25,010
That happened, that actually happened.

522
00:23:25,010 --> 00:23:29,460
But when the Security
Operations Center got the alert,

523
00:23:29,460 --> 00:23:32,200
they couldn't tell which
Amazon it came from.

524
00:23:32,200 --> 00:23:33,540
And as an engineer, you can say,

525
00:23:33,540 --> 00:23:35,840
well, you can take the
IP address and map back

526
00:23:37,403 --> 00:23:38,810
which account it was, but like

527
00:23:38,810 --> 00:23:41,139
that could take anywhere from
30 minutes to three hours,

528
00:23:41,140 --> 00:23:42,600
and during an actual incident,

529
00:23:42,600 --> 00:23:44,719
that could be millions of
dollars, you're losing.

530
00:23:44,720 --> 00:23:46,250
Well, millions of dollars weren't lost.

531
00:23:46,250 --> 00:23:47,994
We just realized we had to add a pointer.

532
00:23:47,994 --> 00:23:51,403
And we were able to resolve the
matter, it wasn't a problem.

533
00:23:53,200 --> 00:23:55,570
This example illustrates the basis behind

534
00:23:55,570 --> 00:23:56,770
what we're trying to do.

535
00:24:00,910 --> 00:24:03,980
A few takeaways from this
presentation are that

536
00:24:06,400 --> 00:24:10,570
like drum talk about security
by design with idea and die,

537
00:24:10,570 --> 00:24:13,389
It's Jerome has really
evolved the meaningful sort of

538
00:24:15,440 --> 00:24:17,603
extended die framework with the ideas.

539
00:24:18,600 --> 00:24:20,750
DIE was also the person who created

540
00:24:20,750 --> 00:24:24,510
DIE as another author on the
O'Reilly book, Sunil you.

541
00:24:24,510 --> 00:24:26,960
Also see it Chaos Engineering provides

542
00:24:26,960 --> 00:24:29,780
a proactive measure for verification

543
00:24:30,680 --> 00:24:32,200
of our security controls.

544
00:24:32,200 --> 00:24:34,640
It's really about validating
like how things really work

545
00:24:34,640 --> 00:24:35,917
versus how we think they work.

546
00:24:35,917 --> 00:24:39,650
And we find that they're thrown
talked about earlier is that

547
00:24:39,651 --> 00:24:42,030
system engineering is
a very messy exercise

548
00:24:42,030 --> 00:24:45,610
we quickly because of unforeseen events,

549
00:24:45,610 --> 00:24:49,320
our systems become stable
through unforeseen events

550
00:24:49,320 --> 00:24:50,800
and incidents and outages.

551
00:24:50,800 --> 00:24:53,919
Because we learn we learn about
what didn't work, we fix it.

552
00:24:53,920 --> 00:24:55,460
Why counted the pain?

553
00:24:55,460 --> 00:24:57,210
Cast engineering has to be proactive

554
00:24:57,210 --> 00:24:58,710
so, you don't encounter the pain.

555
00:24:58,710 --> 00:25:01,773
We practically learn, service
it, fix it, and repeat.

556
00:25:02,730 --> 00:25:05,410
And it's important to
instrument your security

557
00:25:05,410 --> 00:25:07,060
before someone else does.

558
00:25:07,060 --> 00:25:08,690
And that's really also we're trying to do

559
00:25:08,690 --> 00:25:10,990
before an attacker has an opportunity

560
00:25:10,990 --> 00:25:12,350
to take advantage of it.

561
00:25:12,350 --> 00:25:17,350
And lastly, resilience is
not something a system has.

562
00:25:17,490 --> 00:25:18,993
It's something a system does,

563
00:25:22,760 --> 00:25:24,310
Jerome.

564
00:25:24,310 --> 00:25:27,240
- Thanks Aaron, and if you think about it,

565
00:25:27,240 --> 00:25:29,430
a lot of the discussion towards

566
00:25:29,430 --> 00:25:32,020
increasing agility and DevOps,

567
00:25:32,020 --> 00:25:35,310
focus on this mean time to recovery.

568
00:25:35,310 --> 00:25:36,690
But insecurity and resilience,

569
00:25:36,690 --> 00:25:39,480
we also have an issue of
meantime to detection.

570
00:25:39,480 --> 00:25:42,070
And that's really the core of

571
00:25:42,070 --> 00:25:44,350
why Chaos Engineering is so important

572
00:25:44,350 --> 00:25:47,290
and security chaos is so important.

573
00:25:47,290 --> 00:25:49,010
In the times where everything changes

574
00:25:49,010 --> 00:25:52,280
this failed playbook and
just failed documentations

575
00:25:52,280 --> 00:25:53,600
do not help.

576
00:25:53,600 --> 00:25:55,840
So many times we see a sock

577
00:25:55,840 --> 00:25:58,560
who struggled to build
contacts and know whether

578
00:25:58,560 --> 00:26:01,580
it's a breach or not within
the first few minutes or hours

579
00:26:01,580 --> 00:26:02,870
of an incident.

580
00:26:02,870 --> 00:26:07,040
This is really where teams
need to work together

581
00:26:07,040 --> 00:26:09,629
and Chaos Engineering is a
way to get them practicing

582
00:26:09,630 --> 00:26:14,630
and get them comfortable
with this approach.

583
00:26:15,010 --> 00:26:18,960
But it doesn't work if you
don't do anything about it.

584
00:26:18,960 --> 00:26:22,627
So, we'd like to take a
take away and apply forward

585
00:26:22,627 --> 00:26:26,629
and we know it's a complex program.

586
00:26:26,630 --> 00:26:28,850
You won't just apply Chaos Engineering

587
00:26:28,850 --> 00:26:31,419
on absolutely everything tomorrow.

588
00:26:31,420 --> 00:26:32,570
But what you can do though,

589
00:26:32,570 --> 00:26:35,620
is share this concept
with your with your teams.

590
00:26:35,620 --> 00:26:40,179
Look, if you have an SRE
Site Reliability Engineering

591
00:26:40,180 --> 00:26:41,430
in your organization

592
00:26:41,430 --> 00:26:44,120
and try to identify a
few security scenarios

593
00:26:44,120 --> 00:26:45,878
you could work out with them.

594
00:26:45,878 --> 00:26:48,230
In the next three months,
please read the book.

595
00:26:48,230 --> 00:26:50,590
So, it would be much
more details on patterns

596
00:26:50,590 --> 00:26:53,889
and how to get started in this book

597
00:26:53,890 --> 00:26:56,690
than we can cover in this presentation.

598
00:26:56,690 --> 00:26:58,930
Review your user facing application

599
00:26:58,930 --> 00:27:00,770
and review your ability to repave

600
00:27:01,800 --> 00:27:03,263
and rotate those credentials.

601
00:27:03,263 --> 00:27:06,840
This is extremely important
as a disrupter of the kitchen.

602
00:27:06,840 --> 00:27:11,010
So, please assess your ability to do it.

603
00:27:11,010 --> 00:27:13,400
Pick an application and run a scenario.

604
00:27:13,400 --> 00:27:15,720
It can be manual first, it's not an issue

605
00:27:15,720 --> 00:27:19,449
but just run a Security
Chaos Engineering scenario

606
00:27:19,449 --> 00:27:20,860
to get comfortable with it.

607
00:27:20,860 --> 00:27:22,320
And then in the next six months,

608
00:27:22,320 --> 00:27:23,820
starting automating some of the exercises

609
00:27:23,820 --> 00:27:27,490
so that you can apply this
continuous verification

610
00:27:27,490 --> 00:27:31,330
in everything that you're
building and deploy.

611
00:27:31,330 --> 00:27:34,360
This is really an important
step and an important turn

612
00:27:34,360 --> 00:27:37,000
in the way we do resilience and security.

613
00:27:37,000 --> 00:27:41,100
It moves from the static test

614
00:27:41,100 --> 00:27:43,030
towards continuous verification.

615
00:27:43,030 --> 00:27:46,933
I really would like to get on
board with that, thank you.

616
00:27:49,750 --> 00:27:51,233
- Thank you, everybody.

