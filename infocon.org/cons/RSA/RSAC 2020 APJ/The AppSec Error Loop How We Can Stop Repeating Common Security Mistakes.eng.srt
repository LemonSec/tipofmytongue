1
00:00:11,319 --> 00:00:14,486
(bright upbeat music)

2
00:00:31,650 --> 00:00:35,060
- Hello and welcome to
the AppSec Error Loop,

3
00:00:35,060 --> 00:00:38,380
How We Can Stop Repeating
Common Security Mistakes.

4
00:00:38,380 --> 00:00:39,360
If you were joining us live,

5
00:00:39,360 --> 00:00:40,860
our speaker is in the slider discussion

6
00:00:40,860 --> 00:00:43,110
answering your questions right now.

7
00:00:43,110 --> 00:00:44,980
For audio or video issues,

8
00:00:44,980 --> 00:00:48,730
please click the technical
support button found below.

9
00:00:48,730 --> 00:00:49,769
And now I'd like to turn it over

10
00:00:49,770 --> 00:00:51,913
to Peter Danhiex for the presentation.

11
00:00:54,445 --> 00:00:56,520
- Hello and welcome everybody.

12
00:00:56,520 --> 00:00:58,470
I think normally I would be enjoying

13
00:00:58,470 --> 00:01:01,120
a black pepper crab in Singapore

14
00:01:01,120 --> 00:01:05,450
but this year is obviously not
going to work out that way.

15
00:01:05,450 --> 00:01:07,726
So welcome to the AppSec Error Loop.

16
00:01:07,726 --> 00:01:10,666
My name is Peter, I'm
the CEO and Co-Founder

17
00:01:10,666 --> 00:01:12,600
of Secure Code Warrior.

18
00:01:12,600 --> 00:01:15,030
I've been in this industry
for roughly about 20 years.

19
00:01:15,030 --> 00:01:18,300
Early 2000s, I started
working on software security

20
00:01:18,300 --> 00:01:20,480
and I wanna share a
little bit of my journey

21
00:01:20,480 --> 00:01:24,050
on why we are still
here in this error loop

22
00:01:24,050 --> 00:01:26,050
and how we can basically fix it.

23
00:01:26,050 --> 00:01:27,630
Now, I'm not sure about you guys,

24
00:01:27,630 --> 00:01:30,320
but whenever I open up
my digital newspaper,

25
00:01:30,320 --> 00:01:32,850
I see a new data breach every single day.

26
00:01:32,850 --> 00:01:35,009
And to be honest, I started to become

27
00:01:35,010 --> 00:01:37,640
a little bit insensitive
about those breaches

28
00:01:37,640 --> 00:01:40,240
because another week, another breach,

29
00:01:40,240 --> 00:01:42,690
another millions records
have been disposed

30
00:01:42,690 --> 00:01:44,200
and I'll just glance over it

31
00:01:44,200 --> 00:01:46,147
and kind of roll my eyes and say,

32
00:01:46,147 --> 00:01:48,930
"Well, it is what it is."

33
00:01:48,930 --> 00:01:50,750
Now, I think we're in this situation

34
00:01:50,750 --> 00:01:52,610
because we've been using
duct tape for too long.

35
00:01:52,610 --> 00:01:55,230
And what I mean with that
is, remember camping gear?

36
00:01:55,230 --> 00:01:57,360
When you go camping,
there's a hole in your tent.

37
00:01:57,360 --> 00:01:58,750
Well, you fix it with duct tape.

38
00:01:58,750 --> 00:02:01,640
Now you do that 100 times after a while,

39
00:02:01,640 --> 00:02:04,100
your tent is basically
going to not function

40
00:02:04,100 --> 00:02:04,933
that well anymore.

41
00:02:04,933 --> 00:02:08,639
And I think we've been now
in this space for 20 years

42
00:02:08,639 --> 00:02:11,200
and we're still making a lot of basic

43
00:02:11,200 --> 00:02:13,700
simple security mistakes in software.

44
00:02:13,700 --> 00:02:16,350
And the approach we've been
taking for the past 20 years

45
00:02:16,350 --> 00:02:19,200
is just not working and
we need to change that.

46
00:02:19,200 --> 00:02:21,470
Now, before I go into some of the details,

47
00:02:21,470 --> 00:02:22,303
let's look at some of the statistics,

48
00:02:22,303 --> 00:02:25,100
some of the numbers
around software security,

49
00:02:25,100 --> 00:02:26,640
because I do think it's important

50
00:02:26,640 --> 00:02:30,563
for everyone to understand
the scale of this problem.

51
00:02:31,410 --> 00:02:35,690
Now, did you know that today
there are roughly 24 million

52
00:02:35,690 --> 00:02:38,240
developers around the world?

53
00:02:38,240 --> 00:02:40,580
Now I didn't count them,
it was basically EvansData

54
00:02:40,580 --> 00:02:44,200
that came out with a blog
post in May this year

55
00:02:44,200 --> 00:02:45,950
and basically just saying
that we're gonna grow

56
00:02:45,950 --> 00:02:50,950
from 24 million to 28 million
people that are writing code.

57
00:02:51,020 --> 00:02:53,390
So in about four years, we'll be adding

58
00:02:53,390 --> 00:02:55,769
another four million
people around this world

59
00:02:55,770 --> 00:02:58,730
that would be writing software.

60
00:02:58,730 --> 00:03:01,760
And it's not a surprise
because a lot of the banks

61
00:03:01,760 --> 00:03:03,609
are turning into software companies.

62
00:03:03,610 --> 00:03:04,910
A lot of the car companies

63
00:03:04,910 --> 00:03:06,700
are turning into software companies.

64
00:03:06,700 --> 00:03:09,760
Basically everybody is
switching to digital

65
00:03:09,760 --> 00:03:13,019
and writing code every now and then.

66
00:03:13,020 --> 00:03:15,060
Now CSO Online basically came out

67
00:03:15,060 --> 00:03:16,047
with another statistic saying,

68
00:03:16,047 --> 00:03:21,047
"Hey, we actually are writing 111 billion

69
00:03:21,130 --> 00:03:23,250
lines of code every single year."

70
00:03:23,250 --> 00:03:25,510
I don't ask me how they basically came up

71
00:03:25,510 --> 00:03:27,530
or counted that number
but that's an estimation

72
00:03:27,530 --> 00:03:30,770
basically making 1100
billion lines of code.

73
00:03:30,770 --> 00:03:32,920
Now, what we also know as security experts

74
00:03:32,920 --> 00:03:35,594
is that there's roughly one to four

75
00:03:35,594 --> 00:03:40,594
exploitable security bug
in 50,000 lines of code.

76
00:03:40,840 --> 00:03:42,515
Now based upon statistics

77
00:03:42,515 --> 00:03:45,859
and things we've heard
of the Stack Overflow,

78
00:03:45,860 --> 00:03:48,310
that is a pretty scary statistic.

79
00:03:48,310 --> 00:03:49,880
Basically these are not just bugs,

80
00:03:49,880 --> 00:03:52,340
these are exploitable security bugs.

81
00:03:52,340 --> 00:03:55,310
So things that the hackers
can basically abuse.

82
00:03:55,310 --> 00:03:59,170
Now if you do quick math that
means 24 million developers,

83
00:03:59,170 --> 00:04:02,920
1100 billion lines of
code and this statistics

84
00:04:02,920 --> 00:04:04,660
that means we are roughly releasing

85
00:04:04,660 --> 00:04:08,570
two million exploitable
security bugs every single year.

86
00:04:08,570 --> 00:04:11,400
And we security people need to find a way

87
00:04:11,400 --> 00:04:14,090
on how to stop them and minimize them.

88
00:04:14,090 --> 00:04:17,600
Now, DHS says that 90 percent
of the security incidents

89
00:04:17,600 --> 00:04:21,589
come from the defects in
the design or in the code

90
00:04:21,589 --> 00:04:22,840
that you're basically writing.

91
00:04:22,840 --> 00:04:25,700
And recently for Verizon
came back with two statistics

92
00:04:25,700 --> 00:04:28,740
one of them being, well, we have about 20%

93
00:04:28,740 --> 00:04:31,340
of the data breaches are actually caused

94
00:04:31,340 --> 00:04:33,929
by a security misconfiguration.

95
00:04:33,930 --> 00:04:36,820
in a strict three buckets
that is open or something

96
00:04:36,820 --> 00:04:40,390
we've misconfigured or
basically a human error

97
00:04:40,390 --> 00:04:41,223
or human mistake.

98
00:04:41,223 --> 00:04:44,958
And I think the last one
is around the data breaches

99
00:04:44,958 --> 00:04:48,780
20% of those are using known

100
00:04:48,780 --> 00:04:50,419
web application vulnerabilities.

101
00:04:50,420 --> 00:04:54,240
So these are not new
type of latest threats.

102
00:04:54,240 --> 00:04:56,050
These are things that we've been known

103
00:04:56,050 --> 00:04:59,600
for a very, very, very long time.

104
00:04:59,600 --> 00:05:03,360
Now, how did we end up in this situation?

105
00:05:03,360 --> 00:05:06,240
Well, that's where I
always kind of look back

106
00:05:06,240 --> 00:05:10,430
to software engineering as a profession.

107
00:05:10,430 --> 00:05:11,780
Now, how long have you been written

108
00:05:11,780 --> 00:05:13,799
software as a professional?

109
00:05:13,800 --> 00:05:16,260
I think it must be less than 100 years.

110
00:05:16,260 --> 00:05:17,680
So that means the experience

111
00:05:17,680 --> 00:05:19,940
we've built up in software engineering

112
00:05:19,940 --> 00:05:22,260
is basically less than 100 years old.

113
00:05:22,260 --> 00:05:25,349
Now, if you compare that
with civil engineering

114
00:05:25,350 --> 00:05:27,660
or building houses, this is basically

115
00:05:27,660 --> 00:05:29,600
how we're building a house today.

116
00:05:29,600 --> 00:05:31,370
It looks nice, it's functional.

117
00:05:31,370 --> 00:05:33,070
It has cameras, doors, locks

118
00:05:33,070 --> 00:05:34,760
and everything is basically there

119
00:05:34,760 --> 00:05:37,440
to protect the family and their assets.

120
00:05:37,440 --> 00:05:41,030
Now, this is the result
of more than 2000 years

121
00:05:41,030 --> 00:05:43,159
of house building engineering.

122
00:05:43,160 --> 00:05:46,100
So this is what we've
achieved after 2000 years.

123
00:05:46,100 --> 00:05:48,520
Now, I'm pretty sure
that the initial houses

124
00:05:48,520 --> 00:05:52,909
was built 2000 years ago,
weren't safe, weren't secure,

125
00:05:52,910 --> 00:05:56,050
they were probably functional
in some kind of a way,

126
00:05:56,050 --> 00:05:57,620
they protected you from the rain

127
00:05:57,620 --> 00:05:59,520
and from the elements of nature,

128
00:05:59,520 --> 00:06:04,520
but they weren't really
safe or totally flawless.

129
00:06:05,960 --> 00:06:08,440
And I think we're in a similar journey

130
00:06:08,440 --> 00:06:09,570
with software engineering.

131
00:06:09,570 --> 00:06:12,620
It's a very young profession with less

132
00:06:12,620 --> 00:06:13,820
than 100 years of experience,

133
00:06:13,820 --> 00:06:15,630
and we're still learning very quickly

134
00:06:15,630 --> 00:06:18,525
about how to not only make functional

135
00:06:18,525 --> 00:06:22,919
and beautiful software but
also software that is safe,

136
00:06:22,920 --> 00:06:26,850
that protects privacy
and the protects data

137
00:06:26,850 --> 00:06:29,903
from customers and clients.

138
00:06:31,971 --> 00:06:36,410
Now it's also pretty well-known
that when you actually fix

139
00:06:36,410 --> 00:06:39,200
or find the flaw, the later you find

140
00:06:39,200 --> 00:06:41,200
that flaw in your construction,

141
00:06:41,200 --> 00:06:43,113
the most costly it actually is

142
00:06:43,113 --> 00:06:44,930
and it's the same with housing.

143
00:06:44,930 --> 00:06:48,247
Once you build your whole house
and then you start finding

144
00:06:48,247 --> 00:06:51,580
fundamental flaws in your security design,

145
00:06:51,580 --> 00:06:54,090
your security architecture, is very costly

146
00:06:54,090 --> 00:06:55,936
to actually fix that and
there's no difference

147
00:06:55,936 --> 00:06:58,849
in software development.

148
00:06:58,850 --> 00:07:03,640
The later you basically start
with focusing on security,

149
00:07:03,640 --> 00:07:05,930
the more it is going to
cost you and the more

150
00:07:05,930 --> 00:07:09,050
it's also going to slow you down.

151
00:07:09,050 --> 00:07:11,780
I think in this came out was
the statistics basic thing.

152
00:07:11,780 --> 00:07:15,010
It is 30 times more
expensive to actually wait

153
00:07:15,010 --> 00:07:16,670
until your software has been written,

154
00:07:16,670 --> 00:07:19,610
deployed into production,
and then find the flaw

155
00:07:19,610 --> 00:07:22,290
then basically focusing on secure coding

156
00:07:22,290 --> 00:07:25,460
while you're writing or
in your design phases

157
00:07:25,460 --> 00:07:26,993
of your software.

158
00:07:28,120 --> 00:07:31,870
So obviously we've been
doing something wrong

159
00:07:31,870 --> 00:07:34,200
in the last one years
and have in my heart,

160
00:07:34,200 --> 00:07:36,770
I'm probably one of the
people that did it wrong

161
00:07:36,770 --> 00:07:38,280
in the past as well because as I said,

162
00:07:38,280 --> 00:07:40,940
I started security roughly 2003.

163
00:07:40,940 --> 00:07:43,660
And for a long time, I was
following the practices

164
00:07:43,660 --> 00:07:47,913
that I'm actually very
much against nowadays.

165
00:07:48,800 --> 00:07:53,220
Now, one of the things I've
realized is that the number

166
00:07:53,220 --> 00:07:57,013
of developers are actually
growing way faster

167
00:07:57,013 --> 00:08:00,840
than the security knowledge distribution.

168
00:08:00,840 --> 00:08:02,909
That means there's way more developers

169
00:08:02,910 --> 00:08:05,760
coming into this market
than that we can train

170
00:08:05,760 --> 00:08:07,620
them or that we can help them

171
00:08:07,620 --> 00:08:10,780
and sprint that knowledge and
I think a big part of that

172
00:08:10,780 --> 00:08:14,510
is our university or academia
system that they need

173
00:08:14,510 --> 00:08:17,900
to start focusing and helping
us with teaching developers

174
00:08:17,900 --> 00:08:19,710
around secure coding patterns.

175
00:08:19,710 --> 00:08:23,359
Very often developers don't
really have an accountability,

176
00:08:23,360 --> 00:08:24,940
or they don't really feel responsible

177
00:08:24,940 --> 00:08:26,500
for the security of their code.

178
00:08:26,500 --> 00:08:28,850
And I think that's basically the result,

179
00:08:28,850 --> 00:08:31,460
again, of all the security people.

180
00:08:31,460 --> 00:08:32,357
We've always kind of said,

181
00:08:32,357 --> 00:08:35,250
"Hey, you know what, we
build the security function,

182
00:08:35,250 --> 00:08:37,460
we'll build it outside of engineering.

183
00:08:37,460 --> 00:08:40,220
We are the experts, we
treat it as a black box."

184
00:08:40,220 --> 00:08:41,400
And I think as a result,

185
00:08:41,400 --> 00:08:43,939
we've kind of taken away
the accountability of that.

186
00:08:43,940 --> 00:08:46,057
So many software developers are like,

187
00:08:46,057 --> 00:08:47,468
"Well, you know what,

188
00:08:47,468 --> 00:08:50,870
we've got a security team that
fixes those issues for us."

189
00:08:50,870 --> 00:08:54,360
And I'll tell you something
about the challenges

190
00:08:54,360 --> 00:08:56,570
with that model.

191
00:08:56,570 --> 00:08:59,370
Now, if you're actually
looking at the data breaches

192
00:08:59,370 --> 00:09:03,638
that are happening, many of
them have software weaknesses

193
00:09:03,638 --> 00:09:08,370
that are 15 to 20 years old.

194
00:09:08,370 --> 00:09:09,913
So these are not new things.

195
00:09:11,320 --> 00:09:13,270
Out of my head, if you look at OWASP 3,

196
00:09:13,270 --> 00:09:15,890
cross-site scripting,
SQL injection attacks,

197
00:09:15,890 --> 00:09:19,840
things that were discovered
literally in 1999,

198
00:09:19,840 --> 00:09:24,640
so pre-2000 and we are
still making mistakes

199
00:09:24,640 --> 00:09:27,550
against those old
software vulnerabilities,

200
00:09:27,550 --> 00:09:29,439
especially in the IoT space

201
00:09:29,440 --> 00:09:31,670
where we're now writing all the software

202
00:09:31,670 --> 00:09:34,500
for new devices we are
kind of finding back that

203
00:09:34,500 --> 00:09:37,050
old vulnerabilities like
(indistinct) overflows,

204
00:09:37,050 --> 00:09:40,949
like some injection attacks
are continuously resurfacing.

205
00:09:40,950 --> 00:09:43,640
I think the main reason
is because developers

206
00:09:43,640 --> 00:09:46,393
aren't really aware of some
of the back loading panels.

207
00:09:47,630 --> 00:09:50,550
Now, if you look at
software security today,

208
00:09:50,550 --> 00:09:52,650
what is happening around the world?

209
00:09:52,650 --> 00:09:54,230
What is happening in AppSec?

210
00:09:54,230 --> 00:09:56,240
Well, first of all, there is a bunch

211
00:09:56,240 --> 00:09:57,540
of technologies out there.

212
00:09:58,680 --> 00:10:01,479
You've got static
application security testing,

213
00:10:01,480 --> 00:10:04,250
which basically means you're
gonna feed the technology

214
00:10:04,250 --> 00:10:05,510
a bunch of source code,

215
00:10:05,510 --> 00:10:07,960
and it's going to scan
for vulnerabilities.

216
00:10:07,960 --> 00:10:12,010
You've got newer things
like RASP and DAST and IAST

217
00:10:12,010 --> 00:10:15,250
basically a lot of acronyms

218
00:10:15,250 --> 00:10:18,700
that confuse non-security people a lot.

219
00:10:18,700 --> 00:10:21,700
So we've got SAST, RASP, DAST, IAST,

220
00:10:21,700 --> 00:10:24,453
we got the bounties of
crowd-security testing.

221
00:10:25,290 --> 00:10:28,160
And we also got the fairly new DevSecOps

222
00:10:28,160 --> 00:10:30,920
containerization security, pipelining

223
00:10:30,920 --> 00:10:32,327
and everybody's basically shouting,

224
00:10:32,327 --> 00:10:33,837
"Hey, we need to shift left."

225
00:10:35,619 --> 00:10:39,240
Now, SAST has been there since 2010.

226
00:10:39,240 --> 00:10:40,563
I think that was when the first SAST

227
00:10:40,563 --> 00:10:42,460
kind of space he came out.

228
00:10:42,460 --> 00:10:43,920
Now, what are some of the problems

229
00:10:43,920 --> 00:10:46,283
we were facing with that technology?

230
00:10:47,280 --> 00:10:52,280
Well, first of all, most
of the tools, to be honest,

231
00:10:53,150 --> 00:10:56,829
they don't work like they're advertised

232
00:10:56,830 --> 00:10:59,020
and I'm talking kind of
out of the experience here.

233
00:10:59,020 --> 00:11:04,020
If you look at SAST, you need
expertise to run the tool.

234
00:11:04,090 --> 00:11:06,900
It has a false positive ratio,

235
00:11:06,900 --> 00:11:09,819
which means that it often flags things

236
00:11:09,820 --> 00:11:11,750
that are not correct.

237
00:11:11,750 --> 00:11:13,810
Yes, it does flag vulnerabilities,

238
00:11:13,810 --> 00:11:17,630
but it often also flags pieces
of code that are in fact,

239
00:11:17,630 --> 00:11:19,616
not vulnerability because it is,

240
00:11:19,616 --> 00:11:23,340
if you're simply down signature-based,

241
00:11:23,340 --> 00:11:25,730
it is also very slow and it needs

242
00:11:25,730 --> 00:11:27,870
to support different frameworks.

243
00:11:27,870 --> 00:11:31,555
What it means that a
SAST can (indistinct) C++

244
00:11:31,555 --> 00:11:34,239
very often doesn't support JavaScript

245
00:11:34,240 --> 00:11:36,500
or doesn't support Go or Rust,

246
00:11:36,500 --> 00:11:40,800
which means that with SAST, you
don't really have a solution

247
00:11:40,800 --> 00:11:43,319
that supports most of those language.

248
00:11:43,320 --> 00:11:46,240
So there's no silver bullet for SAST.

249
00:11:48,182 --> 00:11:50,940
Other challenges with IS and DAST again,

250
00:11:50,940 --> 00:11:52,710
I think you need expertise.

251
00:11:52,710 --> 00:11:54,060
It has false negatives.

252
00:11:54,060 --> 00:11:56,250
So if you don't know what you're doing,

253
00:11:56,250 --> 00:11:58,930
you will be forgetting flaws.

254
00:11:58,930 --> 00:12:00,280
You will be bypassing it

255
00:12:00,280 --> 00:12:04,250
and you won't basically detect
him and it is also slow.

256
00:12:04,250 --> 00:12:05,410
You then got RASP.

257
00:12:05,410 --> 00:12:07,530
Well, in my opinion, RASP is more

258
00:12:07,530 --> 00:12:09,910
of a web application firewall

259
00:12:09,910 --> 00:12:14,680
next generation plus plus
something which many people

260
00:12:14,680 --> 00:12:18,380
are basically trying to use,
but nobody actually blocks it

261
00:12:18,380 --> 00:12:23,380
in production and is also
very technology specific.

262
00:12:23,810 --> 00:12:27,194
So I honestly think that with
the technology we've built,

263
00:12:27,194 --> 00:12:32,194
it helps, it supports but it
is not a one-size fits all.

264
00:12:32,740 --> 00:12:35,130
And I think many people
kind of make the mistake

265
00:12:35,130 --> 00:12:37,970
the first time they started
investing in software security,

266
00:12:37,970 --> 00:12:40,247
what they do is they will fall back to,

267
00:12:40,247 --> 00:12:43,329
"Hey, let's buy technology and
let's see if the technology

268
00:12:43,330 --> 00:12:46,017
can actually fix this for us."

269
00:12:47,180 --> 00:12:49,510
So there's no one tool to rule them all.

270
00:12:49,510 --> 00:12:52,960
Not a single tool can scan
for every vulnerability

271
00:12:52,960 --> 00:12:56,620
in every situation and they're slow.

272
00:12:56,620 --> 00:12:59,503
Now, they have been useful
because in a waterfall model,

273
00:12:59,503 --> 00:13:01,930
you can attach those scanners at the end,

274
00:13:01,930 --> 00:13:03,770
you can plug them somewhere in,

275
00:13:03,770 --> 00:13:07,280
and if they take an hour or
even a day or even three days,

276
00:13:07,280 --> 00:13:08,860
it doesn't really matter

277
00:13:08,860 --> 00:13:10,520
because you were in a waterfall model

278
00:13:10,520 --> 00:13:12,890
and you're not really
slowing down too much.

279
00:13:12,890 --> 00:13:15,560
There is a different
in an agile environment

280
00:13:15,560 --> 00:13:18,109
where me as a developer,

281
00:13:18,110 --> 00:13:20,120
I wanna write code and
I want to publish it

282
00:13:20,120 --> 00:13:22,380
by the end of the year and end of the day.

283
00:13:22,380 --> 00:13:25,350
That means those tools needs to be fast,

284
00:13:25,350 --> 00:13:26,510
they need to be responsive.

285
00:13:26,510 --> 00:13:28,700
And I can't wait an hour

286
00:13:28,700 --> 00:13:30,780
to kind of see the results of my scan

287
00:13:30,780 --> 00:13:33,079
because I'm already
working on something else.

288
00:13:33,080 --> 00:13:36,330
So I think that's all the
challenges we're currently having

289
00:13:36,330 --> 00:13:38,313
with some of those tools.

290
00:13:39,630 --> 00:13:43,070
Another thing a lot of people,

291
00:13:43,070 --> 00:13:46,031
they kind of fall back
to penetration testing.

292
00:13:46,031 --> 00:13:49,479
Well, I've been in pen-testing
for a long time in career.

293
00:13:49,480 --> 00:13:51,110
I was teaching for science

294
00:13:51,110 --> 00:13:53,860
for roughly about 10 years of my career.

295
00:13:53,860 --> 00:13:57,380
And I wanna be honest,
pen-testing mostly sucks.

296
00:13:57,380 --> 00:14:00,627
And the reason why is
because the pen-testers

297
00:14:00,627 --> 00:14:02,810
are also the breakers,

298
00:14:02,810 --> 00:14:05,170
they are speaking a different language

299
00:14:05,170 --> 00:14:08,300
than the developers,
which are the builders.

300
00:14:08,300 --> 00:14:11,130
Now pen-testers, security testers

301
00:14:11,130 --> 00:14:15,550
are really good into finding problems,

302
00:14:15,550 --> 00:14:19,630
pointing them out and talking
things like injection attacks,

303
00:14:19,630 --> 00:14:23,360
XSS, IDOR and a whole bunch
of acronyms and languages

304
00:14:23,360 --> 00:14:26,870
that actually the developer
doesn't understand.

305
00:14:26,870 --> 00:14:29,580
The developer, he or she knows their goal.

306
00:14:29,580 --> 00:14:31,050
They don't speak security.

307
00:14:31,050 --> 00:14:34,349
They speak about classes,
framer, constructors,

308
00:14:34,350 --> 00:14:35,470
all that kind of stuff.

309
00:14:35,470 --> 00:14:38,300
And the problem is we've
got a big language barrier

310
00:14:38,300 --> 00:14:39,939
between those two groups.

311
00:14:39,940 --> 00:14:43,060
The breakers, they can point out problems

312
00:14:43,060 --> 00:14:45,660
but not many can actually fix them.

313
00:14:45,660 --> 00:14:48,430
There are a lot of breakers
that can find injection attacks,

314
00:14:48,430 --> 00:14:49,262
but if you ask them,

315
00:14:49,263 --> 00:14:51,740
"Hey, how would you fix
this in Python and Django?"

316
00:14:51,740 --> 00:14:52,827
They got no idea.

317
00:14:52,827 --> 00:14:56,000
"How would you fix this into NodeJs?"

318
00:14:56,000 --> 00:14:57,270
They've got no idea.

319
00:14:57,270 --> 00:14:59,569
They will basically give
generic recommendation.

320
00:14:59,570 --> 00:15:01,167
I think everybody heard about,

321
00:15:01,167 --> 00:15:02,850
"Hey, you got an injection attacks,

322
00:15:02,850 --> 00:15:05,170
you need to do input validation."

323
00:15:05,170 --> 00:15:08,849
Now for a developer, it's
basically users advice

324
00:15:08,850 --> 00:15:13,800
like input validation is so
broad, it's so unpractical

325
00:15:13,800 --> 00:15:17,280
and builders, they wanna know
what functions to you use,

326
00:15:17,280 --> 00:15:21,750
what libraries to use,
what patterns to apply,

327
00:15:21,750 --> 00:15:25,310
and I think we need to fix and
basically cross that barrier.

328
00:15:25,310 --> 00:15:27,900
And I think that's why I'm a bit concerned

329
00:15:27,900 --> 00:15:29,900
about most penetration,

330
00:15:29,900 --> 00:15:32,819
as the people you need to
kind of lift up your game

331
00:15:32,820 --> 00:15:35,880
and start coding, understand how builders

332
00:15:35,880 --> 00:15:36,713
are building their code.

333
00:15:36,713 --> 00:15:40,339
And if you write reports,
please give them recommendations

334
00:15:40,340 --> 00:15:42,890
on how to fix them more
than something generically

335
00:15:42,890 --> 00:15:44,319
that you've copied from OWASP

336
00:15:44,320 --> 00:15:46,040
or any of those websites out there,

337
00:15:46,040 --> 00:15:48,130
give them a secure coding pattern

338
00:15:48,130 --> 00:15:50,850
in the language and in their framework.

339
00:15:50,850 --> 00:15:53,360
Now, another challenge I
notice in a lot of companies

340
00:15:53,360 --> 00:15:57,540
is AppSec very often is a bottleneck.

341
00:15:57,540 --> 00:15:59,810
Now, I don't know whether you're from

342
00:15:59,810 --> 00:16:02,290
a same age pattern as me,

343
00:16:02,290 --> 00:16:05,130
but this was basically how
I was surfing the internet

344
00:16:05,130 --> 00:16:06,900
probably in the '90s.

345
00:16:06,900 --> 00:16:09,560
If you were downloading
a file of 180 megabytes,

346
00:16:09,560 --> 00:16:11,319
it took about 39 years.

347
00:16:11,320 --> 00:16:13,900
Now, the AppSec function, the company

348
00:16:13,900 --> 00:16:16,449
is very much the same at the moment.

349
00:16:16,450 --> 00:16:18,520
You basically ask them to do something

350
00:16:18,520 --> 00:16:20,380
and it will take a long time.

351
00:16:20,380 --> 00:16:22,500
And it's not that they
don't want to move fast,

352
00:16:22,500 --> 00:16:26,000
but the thing is they can't
move fast, they can't scale.

353
00:16:26,000 --> 00:16:30,680
Now if you look at the ratio
between software developers

354
00:16:30,680 --> 00:16:33,801
and AppSec experts, it's roughly

355
00:16:33,802 --> 00:16:37,000
one AppSec person for 200 developers.

356
00:16:37,000 --> 00:16:40,430
And this is a high maturity company

357
00:16:40,430 --> 00:16:42,670
that is investing in AppSec.

358
00:16:42,670 --> 00:16:45,939
So in many of them, it is one to 2000,

359
00:16:45,940 --> 00:16:47,510
which is a far worse situation.

360
00:16:47,510 --> 00:16:50,189
Now, imagine you're in this company

361
00:16:50,190 --> 00:16:51,950
that's investing in security

362
00:16:51,950 --> 00:16:54,530
and you need to work with 200 developers

363
00:16:54,530 --> 00:16:58,063
to make sure that their
code is basically secured.

364
00:16:59,600 --> 00:17:01,005
It's basically an impossible task

365
00:17:01,005 --> 00:17:03,520
because you can literally
spend like eight hours

366
00:17:04,480 --> 00:17:06,540
with one developer for a full year

367
00:17:06,540 --> 00:17:08,619
and that's of course not going to help.

368
00:17:08,619 --> 00:17:10,369
So AppSec is a bottleneck.

369
00:17:10,369 --> 00:17:13,209
They are basically sometimes slowing down

370
00:17:13,210 --> 00:17:15,490
software development and that's why it is,

371
00:17:15,490 --> 00:17:17,490
basically it needs a different approach.

372
00:17:18,569 --> 00:17:22,030
So we will never have
enough AppSec specialists

373
00:17:22,030 --> 00:17:24,575
to deal with the amount of code produced

374
00:17:24,575 --> 00:17:28,923
because it is an impossible
game to kind of win.

375
00:17:28,923 --> 00:17:31,510
Basically in my company, we've decided

376
00:17:31,510 --> 00:17:33,300
to not put up an AppSec team

377
00:17:33,300 --> 00:17:35,159
but to build in software security

378
00:17:35,160 --> 00:17:36,730
into the engineering function.

379
00:17:36,730 --> 00:17:38,140
I think moving forward,

380
00:17:38,140 --> 00:17:39,550
that's what we'll probably have to do

381
00:17:39,550 --> 00:17:43,030
is not reliable on a
central function for AppSec,

382
00:17:43,030 --> 00:17:44,370
but making sure that AppSec

383
00:17:44,370 --> 00:17:47,399
is building into your
engineering function.

384
00:17:47,400 --> 00:17:49,700
Now today, when everybody
thinks about AppSec,

385
00:17:51,480 --> 00:17:53,123
basically, oops,

386
00:17:55,275 --> 00:17:57,360
we're basically failing from learning

387
00:17:57,360 --> 00:18:00,030
from some of our mistakes.

388
00:18:00,030 --> 00:18:03,300
And I think the main
reason because of this

389
00:18:03,300 --> 00:18:06,899
is that we are finding a bug.

390
00:18:06,900 --> 00:18:10,320
We are assigning it to a
developer to kind of fix it

391
00:18:10,320 --> 00:18:14,460
and then basically when that
developer fixes the bug,

392
00:18:14,460 --> 00:18:16,410
that secure coding pattern that,

393
00:18:16,410 --> 00:18:18,650
that developer has used to fix it,

394
00:18:18,650 --> 00:18:20,640
now there's one developer
in all the company

395
00:18:20,640 --> 00:18:22,340
that knows about this.

396
00:18:22,340 --> 00:18:24,790
But what about the 1000 (indistinct)?

397
00:18:24,790 --> 00:18:27,720
How are we gonna make sure
that they know about this fix?

398
00:18:27,720 --> 00:18:31,810
Well, very often we don't
do anything with that.

399
00:18:31,810 --> 00:18:35,100
So we are basically having this black hole

400
00:18:35,100 --> 00:18:38,449
of security knowledge
where one person finds

401
00:18:38,450 --> 00:18:40,730
a fix and that knowledge base goes away

402
00:18:40,730 --> 00:18:43,770
and that one person if you
leave the organization,

403
00:18:43,770 --> 00:18:44,700
nobody else knows.

404
00:18:44,700 --> 00:18:47,770
And I think that's the reason
why we have continuously

405
00:18:47,770 --> 00:18:50,945
being reintroducing the
same vulnerabilities

406
00:18:50,945 --> 00:18:54,270
into basically code because every time

407
00:18:54,270 --> 00:18:56,196
it is a different developer introducing

408
00:18:56,196 --> 00:19:00,392
a similar type of flaw in organization.

409
00:19:01,370 --> 00:19:04,439
Now, one of the things we've
done is on Secure Code Warrior,

410
00:19:04,440 --> 00:19:07,550
we basically have a platform
where a developer could learn

411
00:19:07,550 --> 00:19:09,879
about secure coding patterns.

412
00:19:09,880 --> 00:19:14,060
And we support like 38,
39 different frameworks

413
00:19:14,060 --> 00:19:16,600
and I've kinda started analyzing this data

414
00:19:16,600 --> 00:19:20,120
because now five years
long, we've collected

415
00:19:20,120 --> 00:19:22,419
roughly about more than the million

416
00:19:22,420 --> 00:19:26,520
of those scolding pattern
challenges that those developers

417
00:19:26,520 --> 00:19:27,930
have played in our platform.

418
00:19:27,930 --> 00:19:29,460
Now, those developers come from roughly

419
00:19:29,460 --> 00:19:31,510
400 enterprise organizations

420
00:19:31,510 --> 00:19:33,530
and we've mainly looked at what we call

421
00:19:33,530 --> 00:19:34,530
the mature languages,

422
00:19:34,530 --> 00:19:37,330
Java, C#, Python, NodeJs and Ruby.

423
00:19:37,330 --> 00:19:40,350
Now, what was very
interesting to kind of see

424
00:19:40,350 --> 00:19:45,179
is that things like SQL
injection people, actually 60%,

425
00:19:45,180 --> 00:19:48,370
roughly 60% number of the time,
they knew about the detect

426
00:19:48,370 --> 00:19:52,010
and rightfully saw it, it's
something which is 20 years old.

427
00:19:52,010 --> 00:19:56,310
And the same with the usage
of vulnerable components,

428
00:19:56,310 --> 00:19:58,820
it was correct 64% of the time.

429
00:19:58,820 --> 00:20:03,409
And that's actually not about results,

430
00:20:03,410 --> 00:20:05,822
but then if you look at the flip side,

431
00:20:05,822 --> 00:20:08,030
it also means that 42%

432
00:20:08,030 --> 00:20:09,570
of all of the developers

433
00:20:09,570 --> 00:20:11,389
didn't know about this coding pattern

434
00:20:11,390 --> 00:20:14,850
that was introducing an injection
attack from 20 years ago.

435
00:20:14,850 --> 00:20:16,209
And if you look at things

436
00:20:16,210 --> 00:20:18,590
like Insecure Direct Object Reference,

437
00:20:18,590 --> 00:20:20,649
like poor authorization rules,

438
00:20:20,650 --> 00:20:24,240
it was incorrect roughly 80% of the time.

439
00:20:24,240 --> 00:20:26,580
That means that 80% of your developers

440
00:20:26,580 --> 00:20:29,300
don't really know how to prevent

441
00:20:29,300 --> 00:20:30,863
these kind of flaws in code.

442
00:20:31,897 --> 00:20:36,070
CSRF, CSRF serve or Cross
Site Request Forgery

443
00:20:36,070 --> 00:20:37,139
which is a vulnerability.

444
00:20:37,140 --> 00:20:39,420
I think about nine to 10 years old

445
00:20:39,420 --> 00:20:42,290
was incorrect about 63% of the time.

446
00:20:42,290 --> 00:20:45,740
So it's obviously demonstrating that there

447
00:20:45,740 --> 00:20:49,310
is a knowledge gap that
we have with developers

448
00:20:49,310 --> 00:20:50,590
and we need to help them.

449
00:20:50,590 --> 00:20:54,100
We basically need to
help them become better.

450
00:20:54,100 --> 00:20:55,889
Now, this is basically what everybody

451
00:20:55,890 --> 00:20:57,370
thinks that AppSec is doing,

452
00:20:57,370 --> 00:21:00,350
but in fact this is basically what AppSec

453
00:21:00,350 --> 00:21:02,362
is doing on a daily basis.

454
00:21:03,450 --> 00:21:05,360
Now, how can you fix this?

455
00:21:05,360 --> 00:21:08,840
How can you basically not shift left

456
00:21:08,840 --> 00:21:10,840
because you actually need to start left.

457
00:21:10,840 --> 00:21:15,470
You need to focus on
making the person better,

458
00:21:15,470 --> 00:21:18,370
making the developer better
and how can you scale it

459
00:21:18,370 --> 00:21:21,489
and make an impact as an AppSec Pro.

460
00:21:21,490 --> 00:21:25,460
Now, if you look at athletes,
runners, footballers,

461
00:21:25,460 --> 00:21:28,930
tennis players, they don't
focus on fixing their flaws

462
00:21:28,930 --> 00:21:30,950
with a technology problem, they train.

463
00:21:30,950 --> 00:21:32,990
They basically they go to gym,

464
00:21:32,990 --> 00:21:35,580
they nudge their food and
they basically continue

465
00:21:35,580 --> 00:21:37,350
to try to come better
and better and better.

466
00:21:37,350 --> 00:21:39,699
And I think that's one of
the things we probably need

467
00:21:39,700 --> 00:21:42,020
to start doing is starting left

468
00:21:42,020 --> 00:21:45,523
and focusing on the individual developers.

469
00:21:46,460 --> 00:21:49,070
So in a perfect world,
how does AppSec like?

470
00:21:49,070 --> 00:21:52,429
Well, first of all, everybody
cares about security.

471
00:21:52,430 --> 00:21:54,670
So there's a positive security culture.

472
00:21:54,670 --> 00:21:58,130
Very often now you notice
this constraint culture

473
00:21:58,130 --> 00:22:00,100
between security and developers.

474
00:22:00,100 --> 00:22:03,010
The developers don't rely
in the security people

475
00:22:03,010 --> 00:22:04,110
and can you blame them?

476
00:22:04,110 --> 00:22:06,889
The security function
always gives them problems

477
00:22:06,890 --> 00:22:09,410
and flaws but never fix this.

478
00:22:09,410 --> 00:22:10,820
So we need to change that.

479
00:22:10,820 --> 00:22:13,230
We need to make sure that
the security function

480
00:22:13,230 --> 00:22:15,810
is being seen as something
which is there to support

481
00:22:15,810 --> 00:22:18,457
and help and provide them
with secure coding patterns

482
00:22:18,458 --> 00:22:21,233
rather than saying, "Hey,
here's a pen-test reports,

483
00:22:21,233 --> 00:22:23,679
we've got 20 things and you need to fix it

484
00:22:23,680 --> 00:22:25,270
or we going to fail and all that."

485
00:22:25,270 --> 00:22:28,180
That's not the way in how to
create a positive culture.

486
00:22:28,180 --> 00:22:30,760
So they need to be shared responsibility

487
00:22:30,760 --> 00:22:33,240
and important as well what is noted

488
00:22:33,240 --> 00:22:36,389
that a lot of developers,
they don't get time

489
00:22:36,389 --> 00:22:40,570
to even learn about things
like secure coding patterns.

490
00:22:40,570 --> 00:22:44,600
So we also need to make sure
from a developers perspective

491
00:22:44,600 --> 00:22:46,830
that they get the time to actually

492
00:22:46,830 --> 00:22:49,273
work on some of these things.

493
00:22:50,190 --> 00:22:52,113
Now, what can security do?

494
00:22:54,040 --> 00:22:56,780
Well, if you focus on the negatives,

495
00:22:56,780 --> 00:22:58,090
you are gonna get a negative result.

496
00:22:58,090 --> 00:23:03,090
And what I mean with that
is the whole problem around

497
00:23:03,290 --> 00:23:05,300
security testing or penetration testing

498
00:23:06,230 --> 00:23:08,360
don't give developers problems,

499
00:23:08,360 --> 00:23:12,590
give them fixes, create them
JIRA tickets with advice,

500
00:23:12,590 --> 00:23:14,560
create pull requests
if you are comfortable

501
00:23:14,560 --> 00:23:16,860
in the frame of to actually fix the bug.

502
00:23:16,860 --> 00:23:19,750
And in that way, you can
actually help that security,

503
00:23:19,750 --> 00:23:22,627
that engineer to become better

504
00:23:22,627 --> 00:23:24,550
rather than just shoving a problem

505
00:23:27,518 --> 00:23:30,363
and basically forcing them to fix it.

506
00:23:32,680 --> 00:23:35,370
Now what is the right type of training?

507
00:23:35,370 --> 00:23:40,199
Well, what I don't like
sending people to a full-time

508
00:23:40,200 --> 00:23:42,622
week training and take
them out of the work

509
00:23:42,622 --> 00:23:44,920
and basically have them emerge one time

510
00:23:44,920 --> 00:23:46,620
and then the rest of the year, nothing.

511
00:23:46,620 --> 00:23:49,250
I think we need to find
ways on how to train people

512
00:23:49,250 --> 00:23:51,193
embedded into their daily lives.

513
00:23:52,430 --> 00:23:55,886
Do it small, do it with
micro-learning, do it contextual,

514
00:23:55,886 --> 00:24:00,730
make it fun, make it engaging
and the most important thing

515
00:24:00,730 --> 00:24:03,320
is make it specific to the language

516
00:24:03,320 --> 00:24:07,350
and framework that a developer is using.

517
00:24:07,350 --> 00:24:09,939
So if your developers are coding

518
00:24:09,940 --> 00:24:12,883
in NodeJs Express Framework,

519
00:24:12,883 --> 00:24:15,750
don't train them on generic Java training.

520
00:24:15,750 --> 00:24:17,210
That's not gonna work.

521
00:24:17,210 --> 00:24:21,310
Yes, vulnerabilities exist
in both of those languages

522
00:24:21,310 --> 00:24:24,399
but the way on how you fix
them and how you patch them

523
00:24:24,400 --> 00:24:26,260
is completely different.

524
00:24:26,260 --> 00:24:30,280
So that's why it needs
to be framework specific.

525
00:24:30,280 --> 00:24:31,780
So it needs to be in
the relevant language,

526
00:24:31,780 --> 00:24:32,680
relevant framework.

527
00:24:32,680 --> 00:24:36,240
If you use Go or Rust
or (indistinct) or Play

528
00:24:36,240 --> 00:24:39,530
or even the newer infrastructure
as code languages,

529
00:24:39,530 --> 00:24:43,629
basically focus on fixing
the top three vulnerabilities

530
00:24:43,630 --> 00:24:46,330
that you're finding in your organization

531
00:24:46,330 --> 00:24:48,399
and make sure you can eliminate those.

532
00:24:48,400 --> 00:24:51,020
Imagine you can basically
train every single developer

533
00:24:51,020 --> 00:24:53,670
to prevent the three top vulnerabilities

534
00:24:53,670 --> 00:24:54,750
you have in your company.

535
00:24:54,750 --> 00:24:58,683
How much time would that
save for the organization?

536
00:24:59,620 --> 00:25:03,100
Now change your mindset
from weaknesses to controls,

537
00:25:03,100 --> 00:25:05,310
which means stop talking
about OWSAP top 10,

538
00:25:05,310 --> 00:25:06,200
we know it exists.

539
00:25:06,200 --> 00:25:08,060
It's been there for a long time,

540
00:25:08,060 --> 00:25:11,649
and he say very useful resource
for security awareness,

541
00:25:11,650 --> 00:25:12,920
but it points are problems.

542
00:25:12,920 --> 00:25:14,800
It's basically pointing
out the negativity.

543
00:25:14,800 --> 00:25:18,110
What we should be doing is
talking about things like

544
00:25:18,110 --> 00:25:19,870
the proactive controls for developers,

545
00:25:19,870 --> 00:25:21,510
the security verification standards,

546
00:25:21,510 --> 00:25:23,714
what patterns should you implement

547
00:25:23,714 --> 00:25:26,970
to basically prevent some of these flaws.

548
00:25:26,970 --> 00:25:29,934
Now, I think if you wanna
distribute knowledge,

549
00:25:29,934 --> 00:25:33,100
you need to do it at a point in time

550
00:25:33,100 --> 00:25:35,379
where it is useful to the developer

551
00:25:35,380 --> 00:25:36,600
and when they actually need it.

552
00:25:36,600 --> 00:25:38,370
Now, what better way to do it,

553
00:25:38,370 --> 00:25:40,689
to embed it into their tools,

554
00:25:40,690 --> 00:25:42,850
embedded into IntelliJ, JetBrains,

555
00:25:42,850 --> 00:25:44,490
embedded into Visual Studio,

556
00:25:44,490 --> 00:25:47,640
embedded into things like JIRA and GitHub,

557
00:25:47,640 --> 00:25:51,710
because that is the moment
where either inside the IDE,

558
00:25:51,710 --> 00:25:54,063
where the developer is writing code,

559
00:25:54,063 --> 00:25:55,447
that's where you need to say,

560
00:25:55,447 --> 00:25:58,189
"Hey, wait a minute, the
coding pattern using here,

561
00:25:58,190 --> 00:25:59,330
you shouldn't be using it.

562
00:25:59,330 --> 00:26:00,970
It's actually bad one to use

563
00:26:00,970 --> 00:26:03,110
because it can lead to a vulnerability."

564
00:26:03,110 --> 00:26:05,117
So that is a moment of microlearning.

565
00:26:05,117 --> 00:26:07,409
You've got time and attention

566
00:26:07,410 --> 00:26:09,090
to demonstrate they can fix it.

567
00:26:09,090 --> 00:26:12,580
The same with things like
ticketing systems like JIRA

568
00:26:12,580 --> 00:26:15,280
and GitHub issues and service now,

569
00:26:15,280 --> 00:26:18,899
when a developer gets
assigned a bug to fix,

570
00:26:18,900 --> 00:26:22,750
you have a little moment
there where you can help them

571
00:26:22,750 --> 00:26:26,250
to become faster by instead of
having them look up on Google

572
00:26:26,250 --> 00:26:28,060
on how to fix an injection attack,

573
00:26:28,060 --> 00:26:29,427
well, provide them the knowledge saying,

574
00:26:29,427 --> 00:26:31,290
"Hey, JIRA ticket, this is how you fix it,

575
00:26:31,290 --> 00:26:32,860
this is your coding patterns"

576
00:26:32,860 --> 00:26:35,350
so that you actually save
them time from Googling

577
00:26:35,350 --> 00:26:37,310
and find to find the right answer,

578
00:26:37,310 --> 00:26:38,889
potentially copy based in the wrong

579
00:26:38,890 --> 00:26:40,540
answer from Stack Overflow,

580
00:26:40,540 --> 00:26:43,010
you're basically giving
them secure coding patterns.

581
00:26:43,010 --> 00:26:46,693
So embed this knowledge into
some of the developer tooling.

582
00:26:49,210 --> 00:26:51,120
We need to create a culture of awareness.

583
00:26:51,120 --> 00:26:52,689
Yep, developers.

584
00:26:52,690 --> 00:26:54,960
We need to remain agile.

585
00:26:54,960 --> 00:26:58,650
We need to make sure that
AppSec doesn't get frustrated.

586
00:26:58,650 --> 00:27:02,260
And I think if you focus on
building security into the DNA

587
00:27:02,260 --> 00:27:06,760
of a developer, you're
actually going to go a long way

588
00:27:06,760 --> 00:27:08,970
of changing that security culture.

589
00:27:08,970 --> 00:27:10,330
Now, I think one of the best examples

590
00:27:10,330 --> 00:27:11,730
I've seen in Asia Pacific

591
00:27:11,730 --> 00:27:14,710
and props to Ruben and the team

592
00:27:14,710 --> 00:27:17,390
at the DBS bank in Singapore,

593
00:27:17,390 --> 00:27:21,780
they started working four
or five years on improving

594
00:27:21,780 --> 00:27:23,639
the security and pushing that

595
00:27:23,640 --> 00:27:25,520
into the DNA of their developers.

596
00:27:25,520 --> 00:27:27,867
And initially they started
with 30 or 40 developers

597
00:27:27,867 --> 00:27:29,870
and they sold the resulted go with that,

598
00:27:29,870 --> 00:27:32,850
that now they push it
out to 1500 developers.

599
00:27:32,850 --> 00:27:36,469
And they're basically building
in security into the DNA

600
00:27:36,470 --> 00:27:39,990
of every single person that
touches code within DBS.

601
00:27:39,990 --> 00:27:43,320
And I think they've
gotten very far with it

602
00:27:43,320 --> 00:27:46,672
and I'm really proud of
working together with them,

603
00:27:46,672 --> 00:27:50,063
but also seeing what they've
achieved in a few years time.

604
00:27:51,470 --> 00:27:54,160
So how do you apply this knowledge?

605
00:27:54,160 --> 00:27:57,940
Like, what do I expect you,
what you can do next week?

606
00:27:57,940 --> 00:28:00,020
Well, first of all, if you have developers

607
00:28:00,020 --> 00:28:02,870
in your organization,
go and speak with them

608
00:28:02,870 --> 00:28:07,520
and ask them what you can do
to help them write your code.

609
00:28:07,520 --> 00:28:10,230
Do they want tools, do
they want knowledge,

610
00:28:10,230 --> 00:28:13,190
do they want skew coding
patterns also as them,

611
00:28:13,190 --> 00:28:16,320
how effective their
knowledge is around security

612
00:28:16,320 --> 00:28:17,266
because many developers say,

613
00:28:17,267 --> 00:28:20,020
"Well, look, I know about security"

614
00:28:20,020 --> 00:28:21,920
like don't bother me with these things.

615
00:28:21,920 --> 00:28:24,340
And if they do, then don't,
just leaves them alone,

616
00:28:24,340 --> 00:28:25,970
as long as they can prove that the code

617
00:28:25,970 --> 00:28:29,360
that they're writing is basically secure.

618
00:28:29,360 --> 00:28:32,040
Now, while you're having
these conversations,

619
00:28:32,040 --> 00:28:34,240
try to figure out which developers

620
00:28:34,240 --> 00:28:36,520
are interested in security

621
00:28:36,520 --> 00:28:38,490
and actually have good
communication skills,

622
00:28:38,490 --> 00:28:41,230
because those are the ones
you want to engage with

623
00:28:41,230 --> 00:28:44,240
as your champions or as
your security coaches.

624
00:28:44,240 --> 00:28:45,990
Because if you have got 1000 developers

625
00:28:45,990 --> 00:28:49,180
and you're only one AppSec
personal one security function,

626
00:28:49,180 --> 00:28:50,450
you wanna have helpers.

627
00:28:50,450 --> 00:28:53,200
You wanna have people that
bring out the communication

628
00:28:53,200 --> 00:28:56,810
and that basically push out
messaging to those developers.

629
00:28:56,810 --> 00:29:00,490
So basically find those champions.

630
00:29:00,490 --> 00:29:02,670
Now, once you've had those conversations,

631
00:29:02,670 --> 00:29:07,100
one of the things you should
try is basically focus

632
00:29:07,100 --> 00:29:10,471
on identifying your top
three key weaknesses

633
00:29:10,471 --> 00:29:14,420
and figure out how to fix
them in the main languages

634
00:29:14,420 --> 00:29:16,343
that you using in your company.

635
00:29:17,962 --> 00:29:21,240
And basically make a page,
make a document that shows

636
00:29:21,240 --> 00:29:23,080
your developers how to fix

637
00:29:23,080 --> 00:29:26,090
those top three languages in Java Spring.

638
00:29:26,090 --> 00:29:27,689
in Java Stack or whatever language

639
00:29:27,690 --> 00:29:29,340
you're using in the organization.

640
00:29:29,340 --> 00:29:32,177
And you can use that as
guidance based to say,

641
00:29:32,177 --> 00:29:36,429
"Hey, every single developer
in our company needs to learn

642
00:29:36,430 --> 00:29:38,060
about those top three weaknesses

643
00:29:38,060 --> 00:29:41,736
and secure coding patterns
to basically stop them."

644
00:29:41,737 --> 00:29:44,040
And you know, what do that for six months

645
00:29:44,040 --> 00:29:46,740
and after six months measure the impact,

646
00:29:46,740 --> 00:29:49,450
look with SAST or DAST how many tools

647
00:29:49,450 --> 00:29:50,630
or how many of those bugs

648
00:29:50,630 --> 00:29:53,390
basically come back and
you will be able to see

649
00:29:53,390 --> 00:29:55,880
a great result that you've
been able to eliminate

650
00:29:55,880 --> 00:29:59,050
your top three weaknesses
in only six months.

651
00:29:59,050 --> 00:30:00,409
Good, I hope this was useful.

652
00:30:00,410 --> 00:30:02,580
Thanks very much for listening everybody

653
00:30:02,580 --> 00:30:05,403
and happy to answer any
questions on the live chat.

