1
00:00:03,720 --> 00:00:05,860
Good morning, good
afternoon, good evening.

2
00:00:05,860 --> 00:00:07,397
Wherever you are in the world.

3
00:00:07,397 --> 00:00:11,030
This is this is going to be an
interesting topic for today.

4
00:00:11,030 --> 00:00:14,379
We're going to talk about the
Four Horsemen of DevSecOps.

5
00:00:14,380 --> 00:00:15,973
My name is Nachu Subramaniam.

6
00:00:16,830 --> 00:00:18,380
I'm living in Singapore

7
00:00:18,380 --> 00:00:21,849
and I have a good expertise
in cloud infrastructure,

8
00:00:21,850 --> 00:00:24,590
DevSecOps, data analytics,

9
00:00:24,590 --> 00:00:27,700
artificial intelligence,
machine learning, deep learning,

10
00:00:27,700 --> 00:00:31,550
internet updates, database
administration, PeopleSoft ERP,

11
00:00:31,550 --> 00:00:32,920
and Agile Delivery.

12
00:00:32,920 --> 00:00:35,090
And I have around 17 years of experience.

13
00:00:35,090 --> 00:00:39,880
And also I have been an
entrepreneur for about seven years.

14
00:00:39,880 --> 00:00:42,017
I've worked in various
locations of the world,

15
00:00:42,017 --> 00:00:45,260
primarily Singapore and
in the past, I've worked

16
00:00:45,260 --> 00:00:49,349
in Malaysia, US, India and
other countries as well.

17
00:00:49,350 --> 00:00:53,080
And then, currently I'm
working as a vice president,

18
00:00:53,080 --> 00:00:55,809
for the head of DevSecOps
engineering center

19
00:00:55,810 --> 00:00:58,710
of excellence at OCBC bank, Singapore.

20
00:00:58,710 --> 00:01:01,330
And also in the past,
I've worked for various,

21
00:01:01,330 --> 00:01:05,580
financial institutions and
other consulting firms.

22
00:01:05,580 --> 00:01:07,960
Some of them are Oracle
corporation, Accenture,

23
00:01:07,960 --> 00:01:12,470
TCS, Tech, Mahindra, IPSoft, Honeywell,

24
00:01:12,470 --> 00:01:16,107
and also about four financial
institutions like World Bank,

25
00:01:16,107 --> 00:01:19,910
ING Bank, Credit Suisse
Bank, United Overseas Bank

26
00:01:19,910 --> 00:01:21,740
and other organizations as well.

27
00:01:21,740 --> 00:01:25,570
And my education background is
Computer Science Engineering.

28
00:01:25,570 --> 00:01:27,820
Also, I've got a diploma
in data analytics,

29
00:01:27,820 --> 00:01:30,759
machine learning and
artificial intelligence

30
00:01:30,760 --> 00:01:33,820
from London School of
Business and Finance.

31
00:01:33,820 --> 00:01:35,320
I'm also certified in various,

32
00:01:36,220 --> 00:01:40,020
cloud and DevSecOpss
and others technology.

33
00:01:40,020 --> 00:01:43,270
And I've also done various pet projects

34
00:01:43,270 --> 00:01:45,530
on artificial intelligence,
machine learning

35
00:01:45,530 --> 00:01:46,920
and data analytics.

36
00:01:46,920 --> 00:01:49,260
We are gonna talk about what
are the major challenges

37
00:01:49,260 --> 00:01:51,120
in that DevSecOpss journey?

38
00:01:51,120 --> 00:01:53,600
Many organizations are not starting

39
00:01:53,600 --> 00:01:55,009
with their DevSecOpss journey,

40
00:01:55,010 --> 00:01:57,290
but then a few key things that they need

41
00:01:57,290 --> 00:02:00,500
to remember on the DevSecOpss
journey is on the security

42
00:02:00,500 --> 00:02:02,550
aspect of the DevSecOpss as well.

43
00:02:02,550 --> 00:02:07,550
Especially when it comes to
the cyber security threats,

44
00:02:07,930 --> 00:02:11,600
coming up very fast.

45
00:02:11,600 --> 00:02:13,936
We may need to ensure that we are covering

46
00:02:13,937 --> 00:02:15,520
the DevSecOpss journey

47
00:02:15,520 --> 00:02:18,100
with the necessary
security measures in place.

48
00:02:18,100 --> 00:02:20,108
I've listed down some of the key,

49
00:02:20,109 --> 00:02:24,680
security challenges that is
being faced by the organization.

50
00:02:24,680 --> 00:02:27,910
Some of them are cyber
security teams are struggling

51
00:02:27,910 --> 00:02:29,600
to keep up with the pace of DevSecOpss,

52
00:02:29,600 --> 00:02:32,530
especially when the DevSecOpss
team is bringing in new tools

53
00:02:32,530 --> 00:02:34,820
and new technology stacks.

54
00:02:34,820 --> 00:02:38,551
And when they are trying to
build up their CICB pipeline,

55
00:02:38,551 --> 00:02:42,380
with various new components
that the cybersecurity teams

56
00:02:42,380 --> 00:02:44,240
also need to catch up with them and ensure

57
00:02:44,240 --> 00:02:49,240
that they are able to add
security to all those,

58
00:02:49,970 --> 00:02:51,609
DevSecOpss components as well.

59
00:02:51,610 --> 00:02:54,351
That's one area that
everybody needs to look at.

60
00:02:54,351 --> 00:02:57,040
The other security challenge
that everybody is facing

61
00:02:57,040 --> 00:03:00,470
is on that the DevSecOpss
team itself is neglecting

62
00:03:00,470 --> 00:03:03,350
the security portion of it when
there've been there setting

63
00:03:03,350 --> 00:03:08,350
up the CI CD CP pipeline,
especially because of the pace

64
00:03:08,710 --> 00:03:11,200
of delivery that they need to meet.

65
00:03:11,200 --> 00:03:15,123
They are not able to concentrate
on the security aspect

66
00:03:15,123 --> 00:03:16,796
of this continuous integration,

67
00:03:16,796 --> 00:03:20,250
continuous delivery and
continuous testing, pipeline.

68
00:03:20,250 --> 00:03:23,090
So this is another challenge
that everybody is facing.

69
00:03:23,090 --> 00:03:24,992
And then, the most important

70
00:03:24,992 --> 00:03:27,593
security challenge is the
free and open source tools.

71
00:03:27,593 --> 00:03:29,730
And the third-party libraries.

72
00:03:29,730 --> 00:03:34,109
When the developers are
having the necessary freedom

73
00:03:34,110 --> 00:03:37,590
to use the free and open
source tools or the third-party

74
00:03:37,590 --> 00:03:40,410
libraries as part of
their coding life cycle.

75
00:03:40,410 --> 00:03:44,430
They also use many free
and open source tools

76
00:03:44,430 --> 00:03:46,050
and third-party libraries.

77
00:03:46,050 --> 00:03:49,670
And in this case, these tools
come up with lot of risks,

78
00:03:49,670 --> 00:03:53,660
or it may not be fully
secure because it's generally

79
00:03:53,660 --> 00:03:57,340
downloaded from a free
and open source website.

80
00:03:57,340 --> 00:03:59,916
So this is another aspect
of the security challenge

81
00:03:59,916 --> 00:04:01,750
that the DevSecOps teams are facing.

82
00:04:01,750 --> 00:04:04,270
And then the fourth one
is the inadequate controls

83
00:04:04,270 --> 00:04:07,330
or inadequate processes,
especially when it comes

84
00:04:07,330 --> 00:04:10,390
to the risk and compliance
related standards

85
00:04:10,390 --> 00:04:11,959
to be followed.

86
00:04:11,960 --> 00:04:16,440
The application teams are not
giving importance to that.

87
00:04:16,440 --> 00:04:18,790
So those, especially for
the banking environments,

88
00:04:18,790 --> 00:04:21,070
we call this maker-chacker.

89
00:04:21,070 --> 00:04:24,460
So whatever somebody makes
it, somebody has to check it.

90
00:04:24,460 --> 00:04:26,950
So this needs to be followed throughout

91
00:04:26,950 --> 00:04:28,909
the software delivery life cycle.

92
00:04:28,910 --> 00:04:31,570
So this is one another important aspect

93
00:04:31,570 --> 00:04:35,510
company needs to follow
on the financial markets

94
00:04:35,510 --> 00:04:37,830
and all the financial
institutions have to follow.

95
00:04:37,830 --> 00:04:42,270
So these inadequate controls
also adds another aspect

96
00:04:42,270 --> 00:04:44,390
of the security challenge
that we are facing.

97
00:04:44,390 --> 00:04:47,969
And then last but not least
is the solution architects,

98
00:04:47,970 --> 00:04:50,790
need to be aware of the
security threats consistently.

99
00:04:50,790 --> 00:04:53,180
So whenever there's a
new component being added

100
00:04:53,180 --> 00:04:55,340
in the software development life cycle,

101
00:04:55,340 --> 00:04:58,510
whenever there's a new changes happening

102
00:04:58,510 --> 00:05:01,929
to the architecture the solution
architects need to be aware

103
00:05:01,929 --> 00:05:05,229
of what security threats could be possible

104
00:05:05,230 --> 00:05:06,750
for these changes.

105
00:05:06,750 --> 00:05:09,548
And then the solution
architects need to ensure

106
00:05:09,548 --> 00:05:12,880
that they are adding the
security aspects of this,

107
00:05:12,880 --> 00:05:14,717
to the architecture of the application

108
00:05:14,717 --> 00:05:16,219
that they're designing.

109
00:05:16,220 --> 00:05:19,220
So this is another important
aspect that everybody

110
00:05:19,220 --> 00:05:20,053
needs to look at.

111
00:05:20,053 --> 00:05:22,150
Okay, this is on the
solution architecture piece.

112
00:05:22,150 --> 00:05:27,150
Let's quickly jump into
Horsemen of DevSecOps men,

113
00:05:28,340 --> 00:05:32,310
who can help us in getting
the DevSecOpss journey,

114
00:05:32,310 --> 00:05:35,057
the four good horsemen of DevSecOps

115
00:05:35,057 --> 00:05:39,650
are continuous, compliance,
container and cloud security,

116
00:05:39,650 --> 00:05:42,370
secure code and a binary review,

117
00:05:42,370 --> 00:05:44,160
check your architecture design.

118
00:05:44,160 --> 00:05:46,930
So these are the four good
Horsemen that I have identified

119
00:05:46,930 --> 00:05:50,200
for securing your DevSecOpss journey.

120
00:05:50,200 --> 00:05:54,320
So especially these four
pillars, if they start

121
00:05:54,320 --> 00:05:57,969
to follow us right from
your DevSecOpss journey

122
00:05:57,970 --> 00:06:00,380
in combination, then you
will be able to ensure

123
00:06:00,380 --> 00:06:02,940
that you're not leaving any tracks,

124
00:06:02,940 --> 00:06:06,910
and then you are completely
securing your CICB pipeline.

125
00:06:06,910 --> 00:06:09,580
So these are the four important areas

126
00:06:09,580 --> 00:06:13,090
that we are going to talk
about in today's session.

127
00:06:13,090 --> 00:06:15,820
The first one is on the
secure design review,

128
00:06:15,820 --> 00:06:18,020
that this picture is from Cisco.

129
00:06:18,020 --> 00:06:20,442
So as you can see here there are various

130
00:06:20,442 --> 00:06:23,767
areas where we need to
concentrate on this secure design.

131
00:06:23,767 --> 00:06:27,820
And this is on the security
architecture, okay?

132
00:06:27,820 --> 00:06:30,490
So when we design the architecture

133
00:06:30,490 --> 00:06:33,593
of the company's applications,
we need to ensure

134
00:06:33,593 --> 00:06:36,470
the architecture are
secure at multiple layers.

135
00:06:36,470 --> 00:06:38,560
One is that campus architecture.

136
00:06:38,560 --> 00:06:42,690
So these terms campus architecture
and branch architecture

137
00:06:42,690 --> 00:06:44,490
might be slightly confusing.

138
00:06:44,490 --> 00:06:46,560
What it literally means is
campus architecture refers

139
00:06:46,560 --> 00:06:49,130
to the headquarters of the company

140
00:06:49,130 --> 00:06:54,044
or the company's main branches are located

141
00:06:54,044 --> 00:06:56,590
and what kind of security network

142
00:06:56,590 --> 00:06:59,190
to be security architecture
to be reviewed.

143
00:06:59,190 --> 00:07:01,090
And then the brand architecture

144
00:07:01,090 --> 00:07:04,469
is all your retail locations, audio,

145
00:07:04,470 --> 00:07:08,137
branches in other locations.

146
00:07:08,137 --> 00:07:12,462
For example, if it's an eCommerce company,

147
00:07:12,462 --> 00:07:15,217
where they are delivering the product

148
00:07:15,217 --> 00:07:17,870
to a retail store, then
those retail stores

149
00:07:17,870 --> 00:07:20,460
are considered as a brand.

150
00:07:20,460 --> 00:07:25,460
So in this case, every retail
or every country branch

151
00:07:26,720 --> 00:07:29,970
is what is coming under
the brand architecture.

152
00:07:29,970 --> 00:07:33,570
These two areas need to be
secured when we are designing

153
00:07:33,570 --> 00:07:36,880
the end-to-end architecture
for the network,

154
00:07:36,880 --> 00:07:40,300
especially when we have
are having all that,

155
00:07:40,300 --> 00:07:43,489
information, all of the
secrets of the company

156
00:07:43,489 --> 00:07:45,637
in the headquarters, we need to ensure

157
00:07:45,637 --> 00:07:49,950
that we are securing
those secrets as well.

158
00:07:49,950 --> 00:07:52,633
When we are transferring these
secrets or confidential data

159
00:07:52,633 --> 00:07:54,844
from the headquarters to the branches.

160
00:07:54,844 --> 00:07:59,130
During transit also and
while the data is in rest,

161
00:07:59,130 --> 00:08:02,650
also we need to ensure
that the data is secure.

162
00:08:02,650 --> 00:08:04,676
So this is where the campus architecture

163
00:08:04,677 --> 00:08:07,423
and the branch architecture
is very, very important.

164
00:08:07,423 --> 00:08:09,850
I'll give you one good example,

165
00:08:09,850 --> 00:08:14,850
if you are having your
data in your headquarters,

166
00:08:16,040 --> 00:08:19,095
that has been your also some of your work,

167
00:08:19,095 --> 00:08:22,223
there are vendors who
are remotely connecting

168
00:08:22,223 --> 00:08:25,430
from a branch location
or from an offshore site.

169
00:08:25,430 --> 00:08:28,230
We need to ensure that the
vendors or anybody else,

170
00:08:28,230 --> 00:08:30,742
are not able to take out the data

171
00:08:30,742 --> 00:08:32,380
that we are holding on our premise.

172
00:08:34,010 --> 00:08:37,905
So this is where we use a
virtual desktop infrastructure

173
00:08:37,905 --> 00:08:40,600
for the vendors to connect
and then they can work,

174
00:08:40,600 --> 00:08:42,645
but they will not be able
to pick out the data.

175
00:08:42,645 --> 00:08:44,729
They'll not be able to take a screenshot

176
00:08:44,730 --> 00:08:47,870
or print the data that we
are sharing through this,

177
00:08:47,870 --> 00:08:49,950
what's your best of (mumbles).

178
00:08:49,950 --> 00:08:52,150
So this is where the
VDI infrastructure need

179
00:08:52,150 --> 00:08:53,939
to be end-to-end secure.

180
00:08:53,940 --> 00:08:57,450
And also, the data on
premise is also secure.

181
00:08:57,450 --> 00:08:59,350
So these are the two important areas

182
00:08:59,350 --> 00:09:02,420
when we talk about the
security design review,

183
00:09:02,420 --> 00:09:04,479
and then the most important one

184
00:09:04,480 --> 00:09:06,180
is the data center architecture.

185
00:09:06,180 --> 00:09:08,786
When we design the data
center architecture,

186
00:09:08,787 --> 00:09:11,776
we need to ensure that this
data center architecture

187
00:09:11,776 --> 00:09:16,108
is customizable and we are
able to scale up and down

188
00:09:17,550 --> 00:09:20,022
immediately and we are able to secure it

189
00:09:20,023 --> 00:09:22,502
while we are scaling up or scaling down.

190
00:09:22,502 --> 00:09:27,024
For example, when we are
expanding our data center,

191
00:09:27,024 --> 00:09:29,242
to the public cloud or private cloud

192
00:09:29,242 --> 00:09:34,175
while we are transporting
the data from our on premise

193
00:09:34,175 --> 00:09:37,430
data center to the public
cloud private cloud,

194
00:09:37,430 --> 00:09:41,392
we need to ensure that the data
is secure while it is wildly

195
00:09:41,393 --> 00:09:42,523
transit and wildly different transit.

196
00:09:43,440 --> 00:09:45,360
So this is where the
data center architecture

197
00:09:45,360 --> 00:09:47,700
is very, very ordinary and we have been

198
00:09:47,700 --> 00:09:49,620
considering the security design.

199
00:09:49,620 --> 00:09:52,750
So we need to add some
important guide for this,

200
00:09:52,750 --> 00:09:55,870
which is the operations guide
and then the architecture

201
00:09:55,870 --> 00:09:58,480
guide and then the design guide.

202
00:09:58,480 --> 00:10:01,640
These are these important
guides will help us do a design

203
00:10:01,640 --> 00:10:04,550
our end-to-end data center architecture.

204
00:10:04,550 --> 00:10:08,300
And then the next important
thing is internet architecture.

205
00:10:08,300 --> 00:10:11,109
And now that most of our
operations are happening

206
00:10:11,110 --> 00:10:14,743
through internet and some of our customers

207
00:10:14,743 --> 00:10:18,667
are accessing our
features through internet.

208
00:10:18,667 --> 00:10:22,440
And we also need to ensure
that when we are gathering

209
00:10:22,440 --> 00:10:24,410
the customer's data then
we are sending our data

210
00:10:24,410 --> 00:10:25,370
to the customer.

211
00:10:25,370 --> 00:10:28,786
We need to ensure that during
this internet connections,

212
00:10:28,786 --> 00:10:32,939
that the data is secure
and we need to design

213
00:10:32,940 --> 00:10:35,050
this architecture for
our internet connectivity

214
00:10:35,050 --> 00:10:38,829
in such a way that none
of this data is stolen

215
00:10:38,830 --> 00:10:40,220
while in transit.

216
00:10:40,220 --> 00:10:42,900
So, especially for financial institutions,

217
00:10:42,900 --> 00:10:46,459
when we are sending data
from our banking system side,

218
00:10:46,460 --> 00:10:47,930
or our core banking systems.

219
00:10:47,930 --> 00:10:49,693
So the end users who are accessing

220
00:10:49,693 --> 00:10:54,329
the internet banking
website from their laptop,

221
00:10:54,330 --> 00:10:58,111
we need to ensure that
all the data is encrypted

222
00:10:58,111 --> 00:11:00,530
and then it is not stolen along the way.

223
00:11:00,530 --> 00:11:04,650
So I talk about financial
institutions as an example,

224
00:11:04,650 --> 00:11:06,270
I come from financial institution.

225
00:11:06,270 --> 00:11:09,034
So I give a lot of examples
from the financial institution

226
00:11:09,034 --> 00:11:11,415
perspective but this is applicable

227
00:11:11,415 --> 00:11:12,872
for all other industries as well.

228
00:11:12,872 --> 00:11:15,781
Then we are sending the
data to the end users

229
00:11:15,781 --> 00:11:18,731
who are accessing our
services through internet

230
00:11:18,731 --> 00:11:21,180
from our on my systems.

231
00:11:21,180 --> 00:11:23,560
We need to ensure that
the data is encrypted

232
00:11:23,560 --> 00:11:27,810
and we also have might be
factor authentication as well.

233
00:11:27,810 --> 00:11:30,592
Okay, so we will talk
about the multi_factor

234
00:11:30,592 --> 00:11:32,521
in the next few slides.

235
00:11:32,521 --> 00:11:34,870
The next one is on the edge architecture.

236
00:11:34,870 --> 00:11:38,900
So the edge architecture
is mainly for those devices

237
00:11:38,900 --> 00:11:41,689
that they're using, the
device is not necessarily

238
00:11:41,690 --> 00:11:43,810
mean only the mobile devices.

239
00:11:43,810 --> 00:11:46,276
It could be any other physical
devices that we are using.

240
00:11:46,277 --> 00:11:50,200
For example, ATMs that we
are using RS they are using

241
00:11:50,200 --> 00:11:52,730
any tokens or any physical tokens

242
00:11:52,730 --> 00:11:54,700
that they are using for authenticating.

243
00:11:54,700 --> 00:11:58,952
For example, RSA itself
is having is providing

244
00:11:58,952 --> 00:12:01,104
the third-party tokens as well.

245
00:12:01,104 --> 00:12:05,513
So those physical tokens
or any other digital tokens

246
00:12:05,513 --> 00:12:08,680
that people are using and
mobile devices as well.

247
00:12:08,680 --> 00:12:11,939
So we need to ensure
that the data is secure

248
00:12:11,940 --> 00:12:16,010
by using this digital tokens
and the mobile devices.

249
00:12:16,010 --> 00:12:19,319
And also a secure, for
example, when we are creating

250
00:12:19,320 --> 00:12:22,601
this iOS and Android app,
we also need to ensure

251
00:12:22,601 --> 00:12:27,601
that the data is not it's
not stolen by encrypted

252
00:12:28,120 --> 00:12:29,230
by decrypting those apps.

253
00:12:29,230 --> 00:12:32,490
So this is where we use
some mobile applications

254
00:12:32,490 --> 00:12:35,140
wrapper solutions for example, mobile lion

255
00:12:35,140 --> 00:12:39,367
or any other solution for
wrapping up our IPA files

256
00:12:40,707 --> 00:12:44,203
or APK files and then
ensure that we are securing

257
00:12:44,203 --> 00:12:48,199
that edge device operating
systems applications.

258
00:12:48,200 --> 00:12:51,273
And then the last one is
on the WAN architecture.

259
00:12:51,273 --> 00:12:54,960
Our WAN and LAN architecture
also need to ensure

260
00:12:54,960 --> 00:12:59,300
that we are having the
necessary security aspect in it.

261
00:12:59,300 --> 00:13:04,250
For example, any proxies or
firewalls need to be set up.

262
00:13:04,250 --> 00:13:07,830
Then when there is data
outgoing or incoming.

263
00:13:07,830 --> 00:13:12,630
So this is where we need to
ensure that when they are using

264
00:13:12,630 --> 00:13:16,165
the cloud based services
or any third party services

265
00:13:16,166 --> 00:13:20,210
for hosts which are hosted
on their cloud like a Sash

266
00:13:21,561 --> 00:13:25,330
or a Sash service, then we
need to ensure that our WAN

267
00:13:25,330 --> 00:13:27,760
and the LAN architecture is secure.

268
00:13:27,760 --> 00:13:28,858
And then it is connecting

269
00:13:28,858 --> 00:13:31,967
to that Ssh service provider security.

270
00:13:31,967 --> 00:13:35,280
So this is another important
area that we need to look at.

271
00:13:35,280 --> 00:13:37,240
This is on the secure design review.

272
00:13:37,240 --> 00:13:39,601
The next is on the secure
code and binary review.

273
00:13:39,601 --> 00:13:43,545
So we have all heard about the SAST, DAST

274
00:13:43,545 --> 00:13:45,550
and IAST techniques.

275
00:13:45,550 --> 00:13:50,550
It's secure for example,
static code analysis

276
00:13:50,600 --> 00:13:53,560
or dynamic code analysis
or interactive analysis

277
00:13:53,560 --> 00:13:56,989
while the developers are
developing and building

278
00:13:56,990 --> 00:13:58,010
their source code.

279
00:13:58,010 --> 00:14:01,110
So these are the important
areas to look at Vindhya

280
00:14:01,110 --> 00:14:04,050
when they're discussing
about secure code review,

281
00:14:04,050 --> 00:14:07,829
for example, there are various
secure code analysis tools

282
00:14:07,830 --> 00:14:09,060
available in the market.

283
00:14:09,060 --> 00:14:13,407
So we might use those tools
and try to secure our code

284
00:14:13,408 --> 00:14:15,870
before we build our code.

285
00:14:15,870 --> 00:14:20,070
So as part of our CICD
journey, when we are building

286
00:14:20,070 --> 00:14:24,465
our code we also need to do
that the necessary security

287
00:14:24,465 --> 00:14:25,730
review of our code.

288
00:14:25,730 --> 00:14:27,120
So it could be a two levels.

289
00:14:27,120 --> 00:14:29,860
One is that while the
developers are writing the code

290
00:14:29,860 --> 00:14:32,410
on their IDE at that
time it says we can do

291
00:14:32,410 --> 00:14:35,050
the security review or
after they're developing

292
00:14:35,050 --> 00:14:36,139
and then they check in their source code

293
00:14:36,139 --> 00:14:40,523
to any repository like
any good we can ensure

294
00:14:40,523 --> 00:14:45,523
that this secure reviewing
the score and we are able

295
00:14:48,517 --> 00:14:49,557
to identify any security
vulnerabilities in that code.

296
00:14:51,869 --> 00:14:55,190
So this is where the secure code review

297
00:14:55,190 --> 00:14:56,023
is very important.

298
00:14:56,023 --> 00:14:58,270
There are various tools
available in the market,

299
00:14:58,270 --> 00:15:02,280
especially some of them that
I have used are synopsis tools

300
00:15:02,280 --> 00:15:05,680
like Co verity, and also black deck

301
00:15:05,680 --> 00:15:08,743
and other tools like Vericode and HP 45

302
00:15:08,744 --> 00:15:11,100
are available in the market.

303
00:15:11,100 --> 00:15:13,770
And also for security binary analysis.

304
00:15:13,770 --> 00:15:18,000
Once we have this code
ready and once we verify

305
00:15:18,000 --> 00:15:21,790
using our CACD pipeline,
then we get a binary.

306
00:15:21,790 --> 00:15:23,780
Once we get this binary, they also need

307
00:15:23,780 --> 00:15:27,752
to do the binary analysis
because whatever security

308
00:15:27,753 --> 00:15:31,310
threats we haven't identified
during the secure code review,

309
00:15:31,310 --> 00:15:32,853
we might be able to identify

310
00:15:32,854 --> 00:15:35,380
when we do the security binary analysis.

311
00:15:35,380 --> 00:15:39,362
And also not all code is
written within our company.

312
00:15:39,362 --> 00:15:42,420
We might be engaging
our third party vendors

313
00:15:42,420 --> 00:15:44,719
to provide their services

314
00:15:44,720 --> 00:15:46,620
and they might be giving their binaries.

315
00:15:46,620 --> 00:15:49,880
So those binaries also
need to be scanned as well.

316
00:15:49,880 --> 00:15:52,737
So when we get the binary
from the third party vendor,

317
00:15:52,737 --> 00:15:54,969
we happen we built our binaries.

318
00:15:54,970 --> 00:15:57,310
So those binaries need to be a scanned

319
00:15:57,310 --> 00:15:59,239
for any security threats.

320
00:15:59,240 --> 00:16:00,700
And then the third important one

321
00:16:00,700 --> 00:16:03,010
is the third party libraries.

322
00:16:03,010 --> 00:16:04,569
So as part of my code, let's say

323
00:16:04,570 --> 00:16:06,790
I'm writing a Java code or a .net code

324
00:16:06,790 --> 00:16:09,400
or any other code, then I'm writing it,

325
00:16:09,400 --> 00:16:13,480
if I'm referring to third party library,

326
00:16:13,480 --> 00:16:17,511
which is hosted in any public
repositories like GitHub,

327
00:16:17,511 --> 00:16:21,290
Docker, or any public
repository for that matter.

328
00:16:21,290 --> 00:16:23,969
When I'm downloading those
third party libraries,

329
00:16:23,970 --> 00:16:26,487
I also need to ensure that
those third party libraries

330
00:16:26,487 --> 00:16:27,870
are also scanned.

331
00:16:27,870 --> 00:16:29,380
In my case, I'm using one tool

332
00:16:29,380 --> 00:16:30,523
called Nexus firewall.

333
00:16:33,264 --> 00:16:37,240
I tried to scan those
third party libraries

334
00:16:37,240 --> 00:16:42,240
and then ensure that it is
completely a vulnerability

335
00:16:42,590 --> 00:16:46,010
only then I allow my
developers to start using this.

336
00:16:46,010 --> 00:16:49,375
So before I check in with
this third party libraries

337
00:16:49,375 --> 00:16:51,289
to the binary repository,

338
00:16:51,289 --> 00:16:52,960
I will do the scan of this
third party libraries.

339
00:16:54,062 --> 00:16:55,580
And then only if it is secure,

340
00:16:55,580 --> 00:17:00,580
I allow developers to start
using this stuff for deliveries.

341
00:17:00,700 --> 00:17:03,420
So this is the third important
area that we can look at.

342
00:17:03,420 --> 00:17:06,072
And then the fourth
and most important area

343
00:17:06,073 --> 00:17:08,435
is the free and open source
tools security review,

344
00:17:08,435 --> 00:17:12,560
And then free and open source
tools are being widely used.

345
00:17:12,560 --> 00:17:14,931
We also need to ensure that whatever

346
00:17:14,931 --> 00:17:17,257
the free and open source
tools that our developers

347
00:17:17,257 --> 00:17:19,859
are downloading and using

348
00:17:19,859 --> 00:17:22,300
or not, I mean whoever
is downloading and using

349
00:17:24,040 --> 00:17:25,869
the thorough security review of it.

350
00:17:25,869 --> 00:17:29,479
Before I add this free
and open source tools

351
00:17:29,480 --> 00:17:34,370
to my software center or any
other software library each.

352
00:17:34,370 --> 00:17:36,610
I need to ensure to do that, okay?

353
00:17:36,610 --> 00:17:37,879
Whether it will steal my data,

354
00:17:37,880 --> 00:17:42,880
whether it steal any secrets
or confidential information.

355
00:17:43,310 --> 00:17:45,300
Once I do the review then I only

356
00:17:45,300 --> 00:17:49,120
I should be uploading this
chain open source software

357
00:17:49,120 --> 00:17:52,120
to the software center
or any software library.

358
00:17:52,120 --> 00:17:53,423
So this is another important area

359
00:17:53,423 --> 00:17:55,870
that everybody should
keep in mind when it comes

360
00:17:55,870 --> 00:17:58,340
to using the free and open source tools.

361
00:17:58,340 --> 00:18:01,480
I could see a trend of
many developers are relying

362
00:18:01,480 --> 00:18:02,950
on the free and open source tools

363
00:18:02,950 --> 00:18:06,670
because of the convenience of using it.

364
00:18:06,670 --> 00:18:08,035
But they also need to ensure

365
00:18:08,035 --> 00:18:10,770
that they are doing the security review

366
00:18:10,770 --> 00:18:14,910
and one standard version of
these free and open source tools

367
00:18:14,910 --> 00:18:18,450
should be used across the company.

368
00:18:18,450 --> 00:18:22,450
Because, if everybody is using
different versions of it,

369
00:18:22,450 --> 00:18:27,450
probably we may need to scan
and consistently keep looking

370
00:18:27,550 --> 00:18:29,770
for threats on these multiple versions.

371
00:18:29,770 --> 00:18:32,770
So I would rather
standardize these versions

372
00:18:32,770 --> 00:18:35,377
of the free and open source tools

373
00:18:35,377 --> 00:18:38,460
and then make my users follow

374
00:18:38,460 --> 00:18:40,550
that particular standardized version.

375
00:18:40,550 --> 00:18:43,030
So that's on the secure
and stick your code

376
00:18:43,030 --> 00:18:44,370
and binary review.

377
00:18:44,370 --> 00:18:46,919
So the next one is on the
container and cloud security.

378
00:18:46,920 --> 00:18:51,200
There's a wide usage of
containers in most banks now,

379
00:18:51,200 --> 00:18:54,390
we are also not only Docker containers

380
00:18:54,390 --> 00:18:58,020
as we are getting into
other CRI-O compliant

381
00:18:58,020 --> 00:19:00,639
or OCI compliant containers as well.

382
00:19:00,640 --> 00:19:05,000
So we need that we are
containerizing our applications.

383
00:19:05,000 --> 00:19:08,520
we need to ensure that
these containers are scanned

384
00:19:08,520 --> 00:19:10,480
for any security vulnerabilities,

385
00:19:10,480 --> 00:19:15,040
and only if it is having the
necessary security checks done

386
00:19:15,040 --> 00:19:17,690
and authorized, then we
should be allowing it.

387
00:19:17,690 --> 00:19:19,860
So there are various tools
available in the market

388
00:19:19,860 --> 00:19:21,600
for container image security and container

389
00:19:21,600 --> 00:19:23,370
run-time security.

390
00:19:23,370 --> 00:19:26,979
So these can scan for vulnerabilities

391
00:19:26,980 --> 00:19:30,490
on the container image
itself, or while the container

392
00:19:30,490 --> 00:19:32,610
is running in the run time.

393
00:19:32,610 --> 00:19:34,629
So, this is very, very important.

394
00:19:34,630 --> 00:19:36,656
So let's say when we are
downloading a container image

395
00:19:36,656 --> 00:19:38,450
from a third party repository,

396
00:19:38,450 --> 00:19:40,740
or if a container image is given

397
00:19:40,740 --> 00:19:43,220
by our other service providers,

398
00:19:43,220 --> 00:19:45,727
we need to scan those container images

399
00:19:45,727 --> 00:19:47,570
for any security vulnerabilities

400
00:19:47,570 --> 00:19:49,820
and also container run
time security as well.

401
00:19:49,820 --> 00:19:54,413
So while running those containers.

402
00:19:54,413 --> 00:19:56,059
cloning those existing containers

403
00:19:56,059 --> 00:19:58,484
that might be any new
security vulnerabilities

404
00:19:58,484 --> 00:19:59,908
that could trigger a password.

405
00:19:59,909 --> 00:20:03,348
That another area
everybody needs to look at

406
00:20:03,348 --> 00:20:06,180
and then ensure that the containers

407
00:20:06,180 --> 00:20:08,940
are secure even during
the run time as well.

408
00:20:08,940 --> 00:20:11,114
There are various tools
available in the market.

409
00:20:11,114 --> 00:20:13,650
And then he does scan for vulnerabilities

410
00:20:13,650 --> 00:20:15,848
of these containers during run time,

411
00:20:15,848 --> 00:20:18,169
let's say while a run time,

412
00:20:18,170 --> 00:20:21,700
let's say if a particular new
threat has been identified,

413
00:20:21,700 --> 00:20:23,050
and that has been posted

414
00:20:23,050 --> 00:20:24,940
in all the our security channels.

415
00:20:24,940 --> 00:20:28,730
Then if they identify
that our current container

416
00:20:28,730 --> 00:20:31,601
which is in run time because
having this vulnerability,

417
00:20:31,601 --> 00:20:33,490
then we need to figure
out how we are going

418
00:20:33,490 --> 00:20:36,500
to quarantined this
container or how we are going

419
00:20:36,500 --> 00:20:38,881
to bring down this container gracefully

420
00:20:38,881 --> 00:20:41,890
without impacting the end users.

421
00:20:41,890 --> 00:20:45,250
So this is where we need
to plan for a zero downtime

422
00:20:45,250 --> 00:20:46,940
or blue green deployments

423
00:20:46,940 --> 00:20:49,451
while we articulating our containers.

424
00:20:49,451 --> 00:20:53,310
In case if there's any a
container is having vulnerability

425
00:20:53,310 --> 00:20:54,929
we need to aggressively shut it down

426
00:20:54,930 --> 00:20:56,685
and then spin up the new container,

427
00:20:56,685 --> 00:20:58,620
which doesn't have the
security vulnerabilities

428
00:20:58,620 --> 00:21:00,726
and without impacting the end users.

429
00:21:00,727 --> 00:21:03,200
And also we are very much aware

430
00:21:03,200 --> 00:21:06,880
that two factor authentication
is another important area

431
00:21:06,880 --> 00:21:10,308
where we need to ensure
that all the applications

432
00:21:10,308 --> 00:21:14,830
that we are using not
only containers not only

433
00:21:14,830 --> 00:21:16,870
on the cloud, but each and every device

434
00:21:16,870 --> 00:21:20,679
or each and every area that we
are looking on authentication

435
00:21:20,680 --> 00:21:21,825
is very, very important.

436
00:21:21,825 --> 00:21:25,833
We, my defect that I would
say multi-factor indication,

437
00:21:25,833 --> 00:21:30,387
because we can have the secret
split into multiple sources

438
00:21:31,780 --> 00:21:35,230
so that it is not compromised easily.

439
00:21:35,230 --> 00:21:39,650
So we can ensure that before
someone can try to compromise,

440
00:21:39,650 --> 00:21:41,575
we are stopping them at multiple layers.

441
00:21:41,575 --> 00:21:44,418
So this is where two factor authentication

442
00:21:44,418 --> 00:21:46,546
or multi-factor authentication
is very, very important.

443
00:21:46,547 --> 00:21:50,662
VPC for cloud applications.

444
00:21:50,662 --> 00:21:52,430
VPC is very, very important or IAM rules

445
00:21:52,430 --> 00:21:54,490
are also very, very important.

446
00:21:54,490 --> 00:21:59,460
So for example, on on the
virtual private cloud,

447
00:21:59,460 --> 00:22:02,259
we may be able to ensure
that we are stopping

448
00:22:02,259 --> 00:22:04,629
the figurative threats at multiple layers.

449
00:22:04,629 --> 00:22:09,629
We can stop it by having that
authentication rules defined,

450
00:22:10,510 --> 00:22:12,640
we can stop them at the firewall level.

451
00:22:12,640 --> 00:22:16,150
We can also stop them at
different security layers.

452
00:22:16,150 --> 00:22:21,150
We can ensure that our regions are secure.

453
00:22:21,150 --> 00:22:24,670
Let's say if we have
multiple cloud environments

454
00:22:24,670 --> 00:22:27,840
in different regions let's
say, if one cloud environment

455
00:22:27,840 --> 00:22:31,057
is impacted due to a
security threat then we need

456
00:22:31,057 --> 00:22:35,490
to secure all other
regions and then we can

457
00:22:35,490 --> 00:22:38,910
immediately zeroing on
that particular region

458
00:22:38,910 --> 00:22:40,420
that has got impact.

459
00:22:40,420 --> 00:22:42,780
So this is where the virtual private cloud

460
00:22:42,780 --> 00:22:44,110
is very, very important.

461
00:22:44,110 --> 00:22:48,030
And encryption tokens
are also quite useful.

462
00:22:48,030 --> 00:22:51,820
For example, as I mentioned
previously we need to secure

463
00:22:51,820 --> 00:22:54,379
the data while in transit
and while intrinsic.

464
00:22:54,380 --> 00:22:58,450
So we have to encrypt this
data while it is in transit

465
00:22:58,450 --> 00:23:01,840
and then after the data
has reached the destination

466
00:23:01,840 --> 00:23:04,850
we can decrypt using
the encryption tokens.

467
00:23:04,850 --> 00:23:08,850
So we can dynamically
generate encryption tokens

468
00:23:08,850 --> 00:23:10,933
before the data is in transited

469
00:23:10,933 --> 00:23:13,591
from one location to another location.

470
00:23:13,591 --> 00:23:16,330
After it has reached the destination,

471
00:23:16,330 --> 00:23:20,480
then we can decrypt this
encryption and decryption.

472
00:23:20,480 --> 00:23:22,469
And then data encryption
as I previously mentioned,

473
00:23:22,469 --> 00:23:26,470
Data encryption for the cloud
is very, very important.

474
00:23:26,470 --> 00:23:30,880
Especially I have one use
case that I have gone through.

475
00:23:30,880 --> 00:23:34,240
Let's say if we are
having our on-premise data

476
00:23:34,240 --> 00:23:37,500
being sent to our cloud
infrastructure only

477
00:23:37,500 --> 00:23:41,330
that is during searching transactions.

478
00:23:41,330 --> 00:23:43,960
Then that's where we
need to encrypt the data,

479
00:23:43,960 --> 00:23:48,960
and we to ensure that only
during this search period

480
00:23:49,310 --> 00:23:52,928
of transaction we are
sending the data to the cloud

481
00:23:52,929 --> 00:23:55,419
and we are securing it.

482
00:23:55,419 --> 00:23:58,065
And after the search bit of
the transaction are done,

483
00:23:58,065 --> 00:24:01,540
we are again wiping out the
data from the cloud environment.

484
00:24:01,540 --> 00:24:05,067
And we are throughout this
transaction we are encrypting

485
00:24:05,067 --> 00:24:07,301
the data especially for organizations

486
00:24:07,301 --> 00:24:11,140
who wants to put down on
their cloud investments.

487
00:24:11,141 --> 00:24:11,974
They might look at this sending the data

488
00:24:14,329 --> 00:24:15,560
to the cloud infrastructure only

489
00:24:15,560 --> 00:24:18,490
during the search of transactions.

490
00:24:18,490 --> 00:24:20,961
So this is where they have to
ensure that they're encrypting

491
00:24:20,961 --> 00:24:22,780
the data well when they are sending it

492
00:24:22,780 --> 00:24:24,610
to the cloud infrastructure.

493
00:24:24,610 --> 00:24:28,169
And then the last but not
least is that DDOS production.

494
00:24:28,170 --> 00:24:31,370
Although every company is
having the DDOS production

495
00:24:31,370 --> 00:24:34,389
for the cloud services
and containers as well.

496
00:24:34,390 --> 00:24:38,000
We need to follow this
cloud data production

497
00:24:38,000 --> 00:24:41,870
with artificial intelligence
because previously,

498
00:24:41,870 --> 00:24:43,929
you know there's manual
intervention required

499
00:24:43,930 --> 00:24:45,120
for the best production.

500
00:24:45,120 --> 00:24:48,659
But now there are a lot of
security tools that are coming up

501
00:24:48,660 --> 00:24:51,420
with artificial intelligence
based data production.

502
00:24:51,420 --> 00:24:52,977
So it identifies, okay?

503
00:24:52,977 --> 00:24:55,410
If I'm getting this service call

504
00:24:55,410 --> 00:24:57,190
from this particular location

505
00:24:57,190 --> 00:25:01,480
only once in a while
then I can allow this.

506
00:25:01,480 --> 00:25:03,819
But as if I'm getting this
particular service call

507
00:25:03,819 --> 00:25:06,610
very frequently from this
particular IP address then I can

508
00:25:06,610 --> 00:25:08,659
either decide to permanently block it

509
00:25:08,660 --> 00:25:10,210
or temporarily block it.

510
00:25:10,210 --> 00:25:12,580
So that decision should
be made automatically

511
00:25:12,580 --> 00:25:14,789
without any manual intervention.

512
00:25:14,789 --> 00:25:18,617
So this is where artificial
RDM driven data production

513
00:25:18,617 --> 00:25:20,680
and other security measures

514
00:25:20,680 --> 00:25:22,730
that can be taken into consideration.

515
00:25:22,730 --> 00:25:26,516
So this is the third
and most important area

516
00:25:26,516 --> 00:25:29,040
for the DevSecOps journey.

517
00:25:29,040 --> 00:25:32,300
And then the last one is on
that continuous compliance.

518
00:25:32,300 --> 00:25:34,810
So we have spoken about various areas

519
00:25:34,810 --> 00:25:37,454
like, the secure design review

520
00:25:37,454 --> 00:25:40,995
or the secure code review,
secure binary review

521
00:25:40,995 --> 00:25:44,250
container security and cloud security.

522
00:25:44,250 --> 00:25:46,380
But how do we keep this?

523
00:25:46,380 --> 00:25:49,270
And how do we ensure that we
are following this all along?

524
00:25:49,270 --> 00:25:51,900
Because we shouldn't
be looking at this only

525
00:25:51,900 --> 00:25:55,360
on the first time we should
be continuously doing

526
00:25:55,360 --> 00:25:59,120
this security review and we need to ensure

527
00:25:59,120 --> 00:26:01,370
that we are validating this throughout

528
00:26:01,370 --> 00:26:04,030
our DevSecOps journey.

529
00:26:04,030 --> 00:26:08,600
So this is where we have to
and show continuous compliance.

530
00:26:08,600 --> 00:26:11,567
And we have to maintain
our compliance standards

531
00:26:11,567 --> 00:26:14,920
and compliance policies
updated all the time.

532
00:26:14,920 --> 00:26:18,934
We have to keep an automated
review of all the compliance

533
00:26:18,934 --> 00:26:20,580
and compliance policies.

534
00:26:20,580 --> 00:26:23,199
For example, any compliance standard

535
00:26:23,200 --> 00:26:25,960
or compliance policy that we are imposing.

536
00:26:25,960 --> 00:26:28,570
We need to have a way for
automatically reviewing it

537
00:26:28,570 --> 00:26:30,399
in slap any manual intervention.

538
00:26:30,400 --> 00:26:34,230
So this is where automation
is also very, very important

539
00:26:34,230 --> 00:26:37,660
when we are doing the
continuous compliance.

540
00:26:37,660 --> 00:26:41,130
For example, let's say
if I designed saying

541
00:26:41,130 --> 00:26:46,130
that going forward in
my code when I'm pushing

542
00:26:46,130 --> 00:26:50,580
my code to the release branch
or to the master branch,

543
00:26:50,580 --> 00:26:55,050
I need two or more than two
reviewers need to be there.

544
00:26:55,050 --> 00:26:56,600
This is a standard that I'm imposing

545
00:26:56,600 --> 00:26:58,020
in my compliance standards.

546
00:26:58,020 --> 00:27:01,300
We shouldn't be manually going
and checking that's okay.

547
00:27:03,230 --> 00:27:05,780
Have two people already reviewed the codes

548
00:27:05,780 --> 00:27:08,110
or is it only one person
reviewing the code?

549
00:27:08,110 --> 00:27:11,610
And also, we need to
ensure that there's some

550
00:27:11,610 --> 00:27:15,919
automated mechanism for
reviewing this compliance center.

551
00:27:15,920 --> 00:27:19,650
So this is where we need to
introduce automation tools,

552
00:27:19,650 --> 00:27:23,250
which will automatically
look for whether the code

553
00:27:23,250 --> 00:27:26,460
is reviewed by two people
or more than two people

554
00:27:26,460 --> 00:27:28,260
for the security compliance.

555
00:27:28,260 --> 00:27:31,463
So these kinds of
automation in the compliance

556
00:27:31,463 --> 00:27:34,300
selection policies will
be very, very helpful.

557
00:27:34,300 --> 00:27:37,624
Once we identified the
compliance standards

558
00:27:37,624 --> 00:27:41,900
and policies are not met, then
we need to either report it

559
00:27:41,900 --> 00:27:43,230
or we have to fix it.

560
00:27:43,230 --> 00:27:46,706
So this is where we need to have

561
00:27:46,706 --> 00:27:48,699
that auto healing feature enable.

562
00:27:48,700 --> 00:27:50,590
So when I say auto healing,

563
00:27:50,590 --> 00:27:54,760
once we identify the compliance
policies are not met,

564
00:27:54,760 --> 00:27:57,900
we will be notifying
the concerned authority

565
00:27:57,900 --> 00:28:00,150
our use case doesn't stop there.

566
00:28:00,150 --> 00:28:02,670
We need to ensure that after we notify it,

567
00:28:02,670 --> 00:28:05,500
we also try to fix it automatically.

568
00:28:05,500 --> 00:28:09,110
So this is where we roll
back to a previous state

569
00:28:09,110 --> 00:28:11,790
where this compliance
breach was not there.

570
00:28:11,790 --> 00:28:14,992
In this case, we have an
end-to-end closed loop

571
00:28:14,992 --> 00:28:18,200
for identifying the
compliance standard breaches

572
00:28:18,200 --> 00:28:20,928
and notifying it and then fixing it

573
00:28:20,928 --> 00:28:23,678
and then again, going
back to the original state

574
00:28:23,678 --> 00:28:25,760
of complying the standards.

575
00:28:25,760 --> 00:28:28,402
So we need to have a
end-to-end the close loop

576
00:28:28,402 --> 00:28:32,640
for the compliance
standard management, okay?

577
00:28:32,640 --> 00:28:35,650
And then all our compliance standards

578
00:28:35,650 --> 00:28:38,470
and policies should be
measurable and quantifiable.

579
00:28:38,470 --> 00:28:43,470
If I say I need to have highest security

580
00:28:43,770 --> 00:28:47,010
or extreme security, but how high is high

581
00:28:47,010 --> 00:28:51,640
or how extreme is extreme
because whatever highest

582
00:28:51,640 --> 00:28:55,370
for me and not be the highest
for you guys, or why she was.

583
00:28:55,370 --> 00:28:58,629
So we need to have everything
measurable and quantifiable.

584
00:28:58,630 --> 00:28:59,820
So this is where I should set

585
00:28:59,820 --> 00:29:02,540
the standards saying that I should have

586
00:29:06,229 --> 00:29:07,541
zero critical issues.

587
00:29:07,541 --> 00:29:10,072
So this kind of measurable
and quantifiable

588
00:29:10,072 --> 00:29:13,659
security standards and policies
is very, very important.

589
00:29:13,660 --> 00:29:17,047
So that we can trace back
to it and then we can ensure

590
00:29:17,047 --> 00:29:19,887
that we are always meeting

591
00:29:19,887 --> 00:29:21,732
this compliance standards and policies.

592
00:29:21,732 --> 00:29:24,718
So this is some of the tools available

593
00:29:24,718 --> 00:29:29,128
in the market are able
to identify that you are

594
00:29:29,128 --> 00:29:33,470
within the limits or you have
already surpassed that limit.

595
00:29:33,470 --> 00:29:37,500
We have to ensure that we have
measurable and quantifiable,

596
00:29:37,500 --> 00:29:38,333
compliance standards and policies.

597
00:29:38,333 --> 00:29:42,410
And then consistently
monitoring our environment

598
00:29:42,410 --> 00:29:45,557
against this measurable
and quantifiable policies.

599
00:29:45,557 --> 00:29:49,130
And then the last one is on
the near real-time validation

600
00:29:49,130 --> 00:29:52,055
and verification, for
example for any transaction

601
00:29:52,055 --> 00:29:54,860
that we are having in our environment,

602
00:29:54,860 --> 00:29:56,949
and if it is having any vulnerability,

603
00:29:56,950 --> 00:30:01,094
you shouldn't be fixing
it after the vulnerability

604
00:30:01,094 --> 00:30:03,340
has already at all our environments.

605
00:30:03,340 --> 00:30:06,459
We should ensure that we have
added it and get real-time,

606
00:30:06,460 --> 00:30:08,650
or at least near real-time
and then capturing

607
00:30:08,650 --> 00:30:11,310
these vulnerabilities on the flight

608
00:30:11,310 --> 00:30:14,020
and then are immediately reporting it.

609
00:30:14,020 --> 00:30:18,250
So there be should be
a SLA or notifying it

610
00:30:18,250 --> 00:30:19,290
and then fixing it.

611
00:30:19,290 --> 00:30:22,980
And then we need to comply
to that SLA agreement

612
00:30:22,980 --> 00:30:26,040
for that identifying and notifying

613
00:30:26,040 --> 00:30:28,580
and fixing these vulnerabilities.

614
00:30:28,580 --> 00:30:31,020
And they should be very,very minimal

615
00:30:31,020 --> 00:30:31,900
for all those machines.

616
00:30:31,900 --> 00:30:35,230
so that we can ensure that our environment

617
00:30:35,230 --> 00:30:37,350
is completely secure, especially

618
00:30:39,631 --> 00:30:40,464
for our DevSecOps journey, right?

619
00:30:40,464 --> 00:30:43,010
Near real-time and
measurable and quantifiable

620
00:30:43,010 --> 00:30:43,920
is very, very important.

621
00:30:43,920 --> 00:30:48,920
So let's say we are
quantifying our end-to-end CICD

622
00:30:49,400 --> 00:30:52,910
and quality issues and also how frequently

623
00:30:52,910 --> 00:30:54,300
we are deploying to production.

624
00:30:54,300 --> 00:30:56,993
Why not quantify the
security threats as well?

625
00:30:56,993 --> 00:31:01,169
How many security threats have
I identified in last month?

626
00:31:01,170 --> 00:31:04,730
How many secrete security
threats have fixed in this month?

627
00:31:04,730 --> 00:31:08,230
And how Am I securing this more and more?

628
00:31:08,230 --> 00:31:12,230
and what are the security
threats I haven't fixed

629
00:31:12,230 --> 00:31:14,910
and it is still there in
my production environment?

630
00:31:14,910 --> 00:31:17,870
So this is where we need to
have the end-to-end monitoring

631
00:31:17,870 --> 00:31:21,716
For our DevSecOps pipeline
and our applications.

632
00:31:21,717 --> 00:31:25,310
And ensure that we have that
near real-time validation

633
00:31:25,310 --> 00:31:28,540
and verification and it is
measured against the measurable

634
00:31:28,540 --> 00:31:31,750
and quantifiable compliance
and different policies.

635
00:31:31,750 --> 00:31:34,824
So these are four Horsemen of DevSecOps

636
00:31:34,824 --> 00:31:35,657
that I thoght off, and I'm pretty sure

637
00:31:35,657 --> 00:31:40,657
there are various other
areas that you could look at,

638
00:31:41,200 --> 00:31:45,310
but these four areas if
you start looking at them,

639
00:31:45,310 --> 00:31:47,450
this will help to ensure
your DevSecOps journey

640
00:31:47,450 --> 00:31:49,640
is secure the first level of test,

641
00:31:49,640 --> 00:31:54,640
and then for them or if
you have any more new,

642
00:31:54,722 --> 00:31:58,240
area that you identify,
you could add that as well.

643
00:31:58,240 --> 00:32:01,601
But my suggestion is to
start with these four areas

644
00:32:01,601 --> 00:32:05,600
of continuous compliance,
secure design review,

645
00:32:05,600 --> 00:32:08,360
and container and cloud security.

646
00:32:08,360 --> 00:32:12,280
And also on the secure code
review and secure binary review.

647
00:32:12,280 --> 00:32:15,399
If you ensure that these
four areas are covered,

648
00:32:15,400 --> 00:32:18,550
I'm pretty sure at least 75 to 80% of your

649
00:32:18,550 --> 00:32:21,930
DevSecOps journey is secure
and why I'm leaving this 20%

650
00:32:21,930 --> 00:32:24,530
is something that you
have to look at on your

651
00:32:24,530 --> 00:32:27,050
DevSecOps journey and
then identify new areas

652
00:32:27,050 --> 00:32:28,740
of security threats.

653
00:32:28,740 --> 00:32:30,017
So DevSecOps is a journey.

654
00:32:30,017 --> 00:32:33,050
So we need to look for more and more gaps

655
00:32:33,050 --> 00:32:34,889
and then attempting to actually fix it,

656
00:32:34,890 --> 00:32:37,580
and then ensure that we are moving

657
00:32:37,580 --> 00:32:40,290
from our DevSecOps journey
for the design option.

658
00:32:40,290 --> 00:32:42,740
So this is my recommendations for all

659
00:32:42,740 --> 00:32:47,530
the DevSecOps engineers and
application folks to ensure

660
00:32:47,530 --> 00:32:49,796
that they are moving they're securing

661
00:32:49,796 --> 00:32:50,936
their DevSecOps pipelines

662
00:32:50,936 --> 00:32:54,560
and confidentially moving
ahead on DevSecOps journey.

663
00:32:54,560 --> 00:32:58,770
if you guys have any questions,
you can please let me know.

664
00:32:58,770 --> 00:33:00,795
I'm available in LinkedIn.

665
00:33:00,795 --> 00:33:03,480
Also if you can post
your questions as well,

666
00:33:03,480 --> 00:33:06,500
I'm happy to answer your
questions on the desk.

667
00:33:06,500 --> 00:33:07,510
Thank you very much guys.

668
00:33:07,510 --> 00:33:09,060
You guys have great week ahead.

