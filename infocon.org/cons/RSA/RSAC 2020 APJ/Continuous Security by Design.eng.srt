1
00:00:04,180 --> 00:00:07,770
- Hi, welcome to
DevSecOps Days, Singapore.

2
00:00:07,770 --> 00:00:11,129
We're gonna talk about
Continuous Security by Design.

3
00:00:11,130 --> 00:00:12,830
Here's the part where I tell you my slides

4
00:00:12,830 --> 00:00:14,300
are definitely going to be online.

5
00:00:14,300 --> 00:00:16,360
And they're online right now.

6
00:00:16,360 --> 00:00:18,099
You can go to robrich.org,

7
00:00:18,100 --> 00:00:19,490
click on Presentations

8
00:00:19,490 --> 00:00:22,090
and Continuous Security
by Design is right here.

9
00:00:22,090 --> 00:00:24,890
You can view the slides that
we're gonna look at right now.

10
00:00:24,890 --> 00:00:25,840
While you're there,

11
00:00:25,840 --> 00:00:27,840
click on About Me, and
you'll get to this page

12
00:00:27,840 --> 00:00:30,259
which talks about some of
the things that I've done.

13
00:00:30,260 --> 00:00:31,870
I'm a Microsoft MVP.

14
00:00:31,870 --> 00:00:33,170
I'm a friend of Red Gate.

15
00:00:33,170 --> 00:00:37,030
I help lead AZGiveCamp, a
charity that builds software

16
00:00:37,030 --> 00:00:38,960
for charities who otherwise

17
00:00:38,960 --> 00:00:40,710
couldn't afford software services.

18
00:00:40,710 --> 00:00:45,710
I do training on Docker,
Kubernetes, ASP.NET, Node and Git.

19
00:00:46,740 --> 00:00:49,860
And (laughs) one of the things
I'm particularly proud of,

20
00:00:49,860 --> 00:00:52,920
I replied to .NET Rocks
at podcast episode.

21
00:00:52,920 --> 00:00:55,000
They read my comment on the air.

22
00:00:55,000 --> 00:00:57,817
They sent me a mug. (squeals)

23
00:00:57,817 --> 00:01:00,523
Let's dig into Continuous
Security by Design.

24
00:01:02,530 --> 00:01:04,890
Continuous security by design.

25
00:01:04,890 --> 00:01:06,140
We talked about this guy.

26
00:01:07,280 --> 00:01:10,080
Doesn't Kubernetes do
this for me? (laughs)

27
00:01:10,080 --> 00:01:11,880
When we're looking at containers,

28
00:01:11,880 --> 00:01:13,520
doesn't the containerized platform

29
00:01:13,520 --> 00:01:16,039
just solve the security piece?

30
00:01:16,040 --> 00:01:17,570
Let's look at Kubernetes.

31
00:01:17,570 --> 00:01:19,889
Here's kind of a diagram
of how Kubernetes works.

32
00:01:19,890 --> 00:01:22,920
We see two main inputs for users.

33
00:01:22,920 --> 00:01:26,590
Here's a developer using
the cube CTL command line

34
00:01:26,590 --> 00:01:27,960
to get into Kubernetes.

35
00:01:27,960 --> 00:01:29,820
Kubernetes will schedule some content

36
00:01:29,820 --> 00:01:31,830
and ultimately launch a pod.

37
00:01:31,830 --> 00:01:34,240
And here's the second
one where users come in

38
00:01:34,240 --> 00:01:37,910
through a load balancer and
execute content on a pod.

39
00:01:37,910 --> 00:01:40,640
Kubernetes' job is to
schedule all that work

40
00:01:40,640 --> 00:01:42,380
and to get that content going.

41
00:01:42,380 --> 00:01:45,310
It's not about securing the workloads

42
00:01:45,310 --> 00:01:47,300
between the containers.

43
00:01:47,300 --> 00:01:49,899
By default, every
container within Kubernetes

44
00:01:49,900 --> 00:01:52,483
can reach every other
container in Kubernetes.

45
00:01:54,320 --> 00:01:57,740
Our software really isn't
secure from that point of view.

46
00:01:57,740 --> 00:02:00,190
Additionally, what if a pod goes rogue?

47
00:02:00,190 --> 00:02:02,410
Kubernetes can evict that pod,

48
00:02:02,410 --> 00:02:05,092
but, has it already done the damage?

49
00:02:06,020 --> 00:02:07,050
Looking at a different way,

50
00:02:07,050 --> 00:02:08,660
looking at the container runtime.

51
00:02:08,660 --> 00:02:13,500
Here's a Docker runtime here on the right

52
00:02:13,500 --> 00:02:16,800
compared to a traditional
hypervisor mechanism,

53
00:02:16,800 --> 00:02:18,720
virtual machine mechanism on the left.

54
00:02:18,720 --> 00:02:21,900
Here, we can see that we
still have a hypervisor

55
00:02:21,900 --> 00:02:23,770
and we have those sandboxes,

56
00:02:23,770 --> 00:02:24,950
but there's nothing here

57
00:02:24,950 --> 00:02:27,760
about securing these
workloads from each other.

58
00:02:27,760 --> 00:02:31,540
Every workload has network
access to every other container

59
00:02:31,540 --> 00:02:34,173
and they can do what they need to do.

60
00:02:35,330 --> 00:02:37,430
So, what is Kubernetes?

61
00:02:37,430 --> 00:02:40,830
At best Kubernetes is
a cluster of machines.

62
00:02:40,830 --> 00:02:43,360
Kubernetes is a firewall
in front of the container,

63
00:02:43,360 --> 00:02:45,430
so that only the ports that we expect

64
00:02:45,430 --> 00:02:47,210
will get into the container.

65
00:02:47,210 --> 00:02:51,520
But, Kubernetes can't secure
the processes in the container.

66
00:02:51,520 --> 00:02:52,403
That's our job.

67
00:02:53,990 --> 00:02:55,530
So, what is a Docker container?

68
00:02:55,530 --> 00:02:56,810
It has a file system.

69
00:02:56,810 --> 00:02:57,930
It has users.

70
00:02:57,930 --> 00:02:59,240
It has a process.

71
00:02:59,240 --> 00:03:00,670
It has ports.

72
00:03:00,670 --> 00:03:02,780
This sounds a lot like a Linux machine.

73
00:03:02,780 --> 00:03:05,380
And in fact, a container
pretty much is a Linux machine,

74
00:03:05,380 --> 00:03:07,420
except well,

75
00:03:07,420 --> 00:03:10,880
a container is meant to be
built in a very specific way

76
00:03:10,880 --> 00:03:12,380
to start up really quickly,

77
00:03:12,380 --> 00:03:16,090
to live for a short amount of
time and then to spend down.

78
00:03:16,090 --> 00:03:17,660
And that's kind of the major difference.

79
00:03:17,660 --> 00:03:18,770
It's still a Linux machine.

80
00:03:18,770 --> 00:03:21,310
It still has processes
and ports and users,

81
00:03:21,310 --> 00:03:22,930
but it runs for a short amount of time

82
00:03:22,930 --> 00:03:24,793
and it's built using tools.

83
00:03:27,300 --> 00:03:28,600
Securing containers.

84
00:03:28,600 --> 00:03:30,660
By default, every
container can communicate

85
00:03:30,660 --> 00:03:32,210
with every other container.

86
00:03:32,210 --> 00:03:35,680
So, we need to work to secure
the content in our container

87
00:03:35,680 --> 00:03:39,140
to ensure that it's not
targeted by other containers

88
00:03:39,140 --> 00:03:40,632
or by outside traffic.

89
00:03:42,030 --> 00:03:44,150
If you pop the container, (laughs)

90
00:03:44,150 --> 00:03:46,470
you can get to all the
rest of the containers

91
00:03:46,470 --> 00:03:47,690
in the cluster.

92
00:03:47,690 --> 00:03:49,040
So, if you lose a container

93
00:03:49,040 --> 00:03:51,513
or if you expose secrets
within a container,

94
00:03:52,630 --> 00:03:55,623
yeah, much like securing a Linux box.

95
00:03:57,130 --> 00:03:57,970
Threat vectors.

96
00:03:57,970 --> 00:04:00,910
We could have a CVE in installed software.

97
00:04:00,910 --> 00:04:03,720
We could have a custom app
that has a vulnerability.

98
00:04:03,720 --> 00:04:05,859
We could have excessive permissions,

99
00:04:05,860 --> 00:04:07,380
exposed secrets.

100
00:04:07,380 --> 00:04:09,750
We can kind of break
these into two groups.

101
00:04:09,750 --> 00:04:11,980
Maybe there's a threat
coming from underneath,

102
00:04:11,980 --> 00:04:14,179
or maybe there's a threat
coming from outside.

103
00:04:14,180 --> 00:04:18,700
And then, in once we've
compromised the container,

104
00:04:18,700 --> 00:04:20,930
we can kind of think of two main vectors

105
00:04:20,930 --> 00:04:22,450
that attackers are gonna do.

106
00:04:22,450 --> 00:04:25,070
Either they're gonna steal
content out of the container

107
00:04:25,070 --> 00:04:28,373
or they're gonna pivot that
to attack other containers.

108
00:04:30,190 --> 00:04:32,900
So, how do we secure ourselves from that?

109
00:04:32,900 --> 00:04:34,190
Well, the good news is,

110
00:04:34,190 --> 00:04:36,140
because containers are ephemeral

111
00:04:36,140 --> 00:04:39,330
because they live for
a short amount of time,

112
00:04:39,330 --> 00:04:41,419
then, if we need to,

113
00:04:41,420 --> 00:04:43,580
if a container goes rogue or gets hacked,

114
00:04:43,580 --> 00:04:46,780
we can just evict that
container and create a new one.

115
00:04:46,780 --> 00:04:49,133
But, (laughs)

116
00:04:50,150 --> 00:04:53,162
if they got in, they may
get in that same way again.

117
00:04:54,120 --> 00:04:55,130
But the cool thing is

118
00:04:55,130 --> 00:04:56,750
a container is designed

119
00:04:56,750 --> 00:04:59,640
to be pretty much a read only file system.

120
00:04:59,640 --> 00:05:01,240
Once we've scanned the container

121
00:05:01,240 --> 00:05:03,130
and we know the contents of it,

122
00:05:03,130 --> 00:05:05,850
once we understand the attack
surface of a container,

123
00:05:05,850 --> 00:05:07,460
then,

124
00:05:07,460 --> 00:05:09,090
we know that doesn't change.

125
00:05:09,090 --> 00:05:10,169
We're not gonna change

126
00:05:10,170 --> 00:05:12,170
the way we interact with that container.

127
00:05:14,520 --> 00:05:15,650
Types of tests.

128
00:05:15,650 --> 00:05:17,010
As we're building a container,

129
00:05:17,010 --> 00:05:20,230
we should do unit and
integration tests of our code.

130
00:05:20,230 --> 00:05:22,950
We should do static
analysis of our source code,

131
00:05:22,950 --> 00:05:26,010
machine inventory for
known vulnerabilities,

132
00:05:26,010 --> 00:05:28,020
open source license compliance,

133
00:05:28,020 --> 00:05:31,760
and ultimately the results
of all of those tests,

134
00:05:31,760 --> 00:05:34,330
We should validate against
our corporate policy.

135
00:05:34,330 --> 00:05:38,219
Perhaps we're not okay
with any vulnerabilities

136
00:05:38,220 --> 00:05:39,210
in our containers

137
00:05:39,210 --> 00:05:42,239
or perhaps we're okay
with low vulnerabilities

138
00:05:42,240 --> 00:05:43,670
or a few failing tests.

139
00:05:43,670 --> 00:05:46,190
If that means that we get
the new feature out on time.

140
00:05:46,190 --> 00:05:48,260
Ultimately get with your organization

141
00:05:48,260 --> 00:05:51,293
and understand the capabilities
and the concerns here.

142
00:05:52,680 --> 00:05:54,010
Let's dig into each of those.

143
00:05:54,010 --> 00:05:56,240
Unit and integration tests.

144
00:05:56,240 --> 00:05:58,230
There's not much to here, (laughs)

145
00:05:58,230 --> 00:05:59,880
you know what you need to do.

146
00:05:59,880 --> 00:06:01,510
Just do it.

147
00:06:01,510 --> 00:06:02,860
Static code analysis.

148
00:06:02,860 --> 00:06:05,650
I'm not here to talk about
any particular product,

149
00:06:05,650 --> 00:06:08,370
but as you grab these
slides from robrich.org,

150
00:06:08,370 --> 00:06:09,950
every one of these blue links,

151
00:06:09,950 --> 00:06:11,770
you can click on to go to that site

152
00:06:11,770 --> 00:06:13,419
to learn more about that.

153
00:06:13,420 --> 00:06:15,100
Pick a static code analysis tool

154
00:06:15,100 --> 00:06:17,100
that works for your organization,

155
00:06:17,100 --> 00:06:18,900
for your type of software,

156
00:06:18,900 --> 00:06:21,340
for your frameworks and your tolerance

157
00:06:22,954 --> 00:06:25,743
for durability and depth of the scan.

158
00:06:26,690 --> 00:06:29,740
Again, this is more or
less a solved problem.

159
00:06:29,740 --> 00:06:30,960
License analysis.

160
00:06:30,960 --> 00:06:32,680
Here's two packages where you can

161
00:06:32,680 --> 00:06:34,630
google using these search terms

162
00:06:34,630 --> 00:06:36,659
and that could get you to other products

163
00:06:36,660 --> 00:06:39,810
that may help inventory the software

164
00:06:39,810 --> 00:06:42,360
and ensure that you're compliant with

165
00:06:42,360 --> 00:06:45,113
the open source licenses
that you're using.

166
00:06:46,430 --> 00:06:47,930
Policy validation.

167
00:06:47,930 --> 00:06:50,110
We take the results of all of these tests,

168
00:06:50,110 --> 00:06:54,630
and we can now create a go
or no go type of scenario.

169
00:06:54,630 --> 00:06:57,250
Do we allow this
container to get released?

170
00:06:57,250 --> 00:07:00,980
Or should we pull back
and not release this?

171
00:07:00,980 --> 00:07:04,053
Because it isn't worthy of our cluster.

172
00:07:04,920 --> 00:07:07,490
Ultimately, this is an individual...

173
00:07:09,370 --> 00:07:11,400
this is an individual piece

174
00:07:11,400 --> 00:07:13,979
and you can choose with your organization

175
00:07:13,980 --> 00:07:17,650
where it makes sense to add more leeway

176
00:07:17,650 --> 00:07:19,460
or to tighten things down

177
00:07:19,460 --> 00:07:21,359
to make sure that they're more secure.

178
00:07:22,540 --> 00:07:24,670
So, let's do a temperature check.

179
00:07:24,670 --> 00:07:28,010
So far we've talked about
all of the standard ways

180
00:07:28,010 --> 00:07:31,969
to secure, well, a machine. (laughs)

181
00:07:31,970 --> 00:07:33,930
So, where's the server list?

182
00:07:33,930 --> 00:07:35,990
Where's the container bits?

183
00:07:35,990 --> 00:07:39,140
And that's where we're gonna
talk about container scanning.

184
00:07:39,140 --> 00:07:41,260
And the cool thing about
container scanning,

185
00:07:41,260 --> 00:07:43,990
because each container
is pretty much assumed

186
00:07:43,990 --> 00:07:45,900
to be read only once it's done,

187
00:07:45,900 --> 00:07:49,630
we can scan it at the
point where we build it,

188
00:07:49,630 --> 00:07:51,980
collect the inventory of
the software that we have,

189
00:07:51,980 --> 00:07:54,260
understand the vulnerabilities
that are there.

190
00:07:54,260 --> 00:07:57,659
And then continuously
compare that inventory

191
00:07:57,660 --> 00:07:59,010
to the list of vulnerabilities,

192
00:07:59,010 --> 00:08:02,010
to know if our container
will be vulnerable

193
00:08:02,010 --> 00:08:04,863
or has become vulnerable in the future.

194
00:08:06,150 --> 00:08:07,750
So, there's two things we wonna do.

195
00:08:07,750 --> 00:08:11,140
We wonna catalog all of the
software on the container.

196
00:08:11,140 --> 00:08:13,490
And then second, we want
to compare that catalog

197
00:08:13,490 --> 00:08:15,363
with a list of known vulnerabilities.

198
00:08:17,820 --> 00:08:18,909
When to scan.

199
00:08:18,910 --> 00:08:21,540
The cool thing is, there's
ways that you can hook this

200
00:08:21,540 --> 00:08:26,310
into your DevOps process at
various steps in the way.

201
00:08:26,310 --> 00:08:29,430
You can do it as you're doing a build.

202
00:08:29,430 --> 00:08:31,790
Now, this isn't the fastest process.

203
00:08:31,790 --> 00:08:34,500
So you may get some pushback
if the goal is, you know,

204
00:08:34,500 --> 00:08:37,580
let's get it from developer's
hands into production

205
00:08:37,580 --> 00:08:39,549
in 10 minutes.

206
00:08:39,549 --> 00:08:41,789
You're gonna spend quite a
few of those minutes here

207
00:08:41,789 --> 00:08:42,890
on the container scan.

208
00:08:44,100 --> 00:08:45,520
Another way you can go.

209
00:08:45,520 --> 00:08:48,060
You can scan the container registry.

210
00:08:48,060 --> 00:08:49,260
Perhaps you have

211
00:08:49,260 --> 00:08:52,130
a private container
registry in Artifactory,

212
00:08:52,130 --> 00:08:55,170
or you have a private container registry

213
00:08:55,170 --> 00:08:56,819
in Azure container registry.

214
00:08:56,820 --> 00:08:57,930
You can go scan through

215
00:08:57,930 --> 00:09:00,150
all of the containers in that registry,

216
00:09:00,150 --> 00:09:02,319
identifying the software in each one,

217
00:09:02,320 --> 00:09:05,603
cataloging that and scanning
for known vulnerabilities.

218
00:09:06,980 --> 00:09:09,110
Another way is Kubernetes webhook.

219
00:09:09,110 --> 00:09:10,660
And this is really interesting.

220
00:09:10,660 --> 00:09:12,610
Let's come back to this one.

221
00:09:12,610 --> 00:09:14,600
You can also scan production.

222
00:09:14,600 --> 00:09:16,850
You can look through all the
containers that are running,

223
00:09:16,850 --> 00:09:19,000
any that you haven't scanned yet. (laughs)

224
00:09:19,000 --> 00:09:22,210
You can scan those and assess the concern.

225
00:09:22,210 --> 00:09:24,920
The downside with this is that

226
00:09:26,170 --> 00:09:28,910
the vulnerable container
has been there for some time

227
00:09:28,910 --> 00:09:31,116
by the time you discover it in production.

228
00:09:31,116 --> 00:09:34,830
I would recommend you find one
of the other places to do it.

229
00:09:34,830 --> 00:09:37,380
Ideally, you're doing it
in the build pipeline.

230
00:09:37,380 --> 00:09:39,840
If you can assume that
this is the only way

231
00:09:39,840 --> 00:09:41,830
that containers will get into production,

232
00:09:41,830 --> 00:09:44,340
then you can scan each
container as it's built.

233
00:09:44,340 --> 00:09:46,580
And by the time it finishes building,

234
00:09:46,580 --> 00:09:49,640
you know that it is safe
to run in your cluster.

235
00:09:49,640 --> 00:09:53,060
Together with understanding
new vulnerabilities

236
00:09:53,060 --> 00:09:56,060
and comparing that to the
catalog of the containers

237
00:09:56,060 --> 00:09:57,900
that you've scanned previously,

238
00:09:57,900 --> 00:10:00,150
you understand when you need
to take down a container

239
00:10:00,150 --> 00:10:03,313
to be able to upgrade it to
more secure versions of content.

240
00:10:05,041 --> 00:10:06,430
Kubernetes webhooks.

241
00:10:06,430 --> 00:10:08,500
This is particularly interesting because

242
00:10:08,500 --> 00:10:11,080
as you take an image

243
00:10:11,080 --> 00:10:13,890
and start to launch it as
a container in Kubernetes,

244
00:10:13,890 --> 00:10:15,840
as you fire up a pod,

245
00:10:15,840 --> 00:10:17,560
it'll go through this process

246
00:10:17,560 --> 00:10:19,599
and it'll go look at each step

247
00:10:19,600 --> 00:10:21,300
and take appropriate action.

248
00:10:21,300 --> 00:10:22,530
What's really interesting,

249
00:10:22,530 --> 00:10:24,459
here in the mutating spot,

250
00:10:24,460 --> 00:10:26,920
we go call out to various webhooks

251
00:10:26,920 --> 00:10:28,510
that are subscribed to this event

252
00:10:28,510 --> 00:10:30,950
and they can change the pod definition.

253
00:10:30,950 --> 00:10:33,750
Perhaps here's where we
add sidecar containers.

254
00:10:33,750 --> 00:10:35,440
And then again, validating,

255
00:10:35,440 --> 00:10:36,930
we call various webhooks

256
00:10:36,930 --> 00:10:39,780
and each web hook can say yes or no.

257
00:10:39,780 --> 00:10:42,510
So, we could take each of the containers,

258
00:10:42,510 --> 00:10:45,110
run it through our
container scanning software,

259
00:10:45,110 --> 00:10:47,480
give it a go or no go mechanism

260
00:10:47,480 --> 00:10:50,660
or validate that we've
scanned it previously,

261
00:10:50,660 --> 00:10:54,839
and ultimately choose to
launch or not launch that pod.

262
00:10:54,840 --> 00:10:57,960
This is a great way to ensure
that nothing vulnerable

263
00:10:57,960 --> 00:11:00,150
can get started in the container.

264
00:11:00,150 --> 00:11:03,189
Now, we do need to understand
ongoing vulnerabilities

265
00:11:03,190 --> 00:11:06,190
and perhaps expire containers
that become vulnerable

266
00:11:06,190 --> 00:11:10,270
because of new vulnerabilities
that are exposed.

267
00:11:10,270 --> 00:11:11,350
But this will ensure

268
00:11:11,350 --> 00:11:15,140
that we can't launch new
vulnerabilities into our cluster.

269
00:11:15,140 --> 00:11:16,790
We can create a webhook

270
00:11:16,790 --> 00:11:19,890
that will validate that
this container is correct,

271
00:11:19,890 --> 00:11:22,742
and only then allow it
to launch in the cluster.

272
00:11:24,660 --> 00:11:25,939
Container scanning software.

273
00:11:25,940 --> 00:11:28,000
Ultimately, get with your organization

274
00:11:28,000 --> 00:11:29,920
and choose a container scanning software

275
00:11:29,920 --> 00:11:31,010
that fits your budget,

276
00:11:31,010 --> 00:11:33,470
that fits your durability needs,

277
00:11:33,470 --> 00:11:38,190
that fits your level of
corporate sponsorship.

278
00:11:38,190 --> 00:11:41,050
Here's some examples that you
might use as search terms,

279
00:11:41,050 --> 00:11:42,670
but I'm definitely not here to sell you

280
00:11:42,670 --> 00:11:45,800
on a particular container
scanning technology.

281
00:11:45,800 --> 00:11:48,760
Ultimately, evaluate
these and find the one

282
00:11:48,760 --> 00:11:50,223
that works right for you.

283
00:11:51,380 --> 00:11:54,070
Now, unfortunately, to demo one (laughs)

284
00:11:54,070 --> 00:11:55,560
I'm gonna need to pick one.

285
00:11:55,560 --> 00:11:57,444
So, I'm gonna pick Anchore.

286
00:11:57,444 --> 00:11:58,473
Anchore (laughs) Anchore (laughs) Anchore.

287
00:12:02,130 --> 00:12:03,689
So, I'll demo Anchore.

288
00:12:03,690 --> 00:12:06,110
And ultimately, whether
you choose this one

289
00:12:06,110 --> 00:12:07,060
or a different one,

290
00:12:07,060 --> 00:12:08,900
understand that the principles of these

291
00:12:08,900 --> 00:12:10,709
carry through all of the software,

292
00:12:10,710 --> 00:12:13,140
your goal is to do a inventory

293
00:12:13,140 --> 00:12:15,350
of all the software
running in the container,

294
00:12:15,350 --> 00:12:17,930
compare that to a vulnerability database

295
00:12:17,930 --> 00:12:20,652
and catalog when your
container is vulnerable.

296
00:12:22,670 --> 00:12:24,020
So, let's dig into Anchore.

297
00:12:26,770 --> 00:12:28,810
Anchore is free and open source.

298
00:12:28,810 --> 00:12:31,650
It runs as microservices in containers,

299
00:12:31,650 --> 00:12:34,270
and it does both software inventory

300
00:12:34,270 --> 00:12:36,640
and then scanning for CVEs

301
00:12:36,640 --> 00:12:38,530
of all the software that it finds.

302
00:12:38,530 --> 00:12:40,520
Now, it's not doing static code analysis.

303
00:12:40,520 --> 00:12:43,270
It's not examining specific files.

304
00:12:43,270 --> 00:12:45,280
It's only examining packages.

305
00:12:45,280 --> 00:12:49,329
So, it will look through both
the operating system packages

306
00:12:49,330 --> 00:12:50,163
and

307
00:12:51,320 --> 00:12:54,180
installed libraries for your software

308
00:12:54,180 --> 00:12:57,180
and catalog based on the
inventory that you have there.

309
00:12:57,180 --> 00:13:00,239
So, if you do put one
random file into place,

310
00:13:00,240 --> 00:13:02,320
yeah, that file (laughs)
could be vulnerable

311
00:13:02,320 --> 00:13:03,570
and it wouldn't catch it.

312
00:13:05,032 --> 00:13:09,400
Anchore is not fast (laughs)
and the docs are not great.

313
00:13:09,400 --> 00:13:11,709
As I was starting to spin up anchor,

314
00:13:11,710 --> 00:13:13,020
I kept getting into places

315
00:13:13,020 --> 00:13:15,040
where the docs would refer to other docs

316
00:13:15,040 --> 00:13:17,969
that would refer back to the
docs that I had just came from,

317
00:13:17,970 --> 00:13:20,933
assuming that the other one
had clarified the piece.

318
00:13:24,281 --> 00:13:25,770
When I was researching it, actually,

319
00:13:25,770 --> 00:13:28,280
when I was looking at lists of software,

320
00:13:28,280 --> 00:13:29,829
some of the lists of software

321
00:13:29,830 --> 00:13:31,900
gave better getting started documentation

322
00:13:31,900 --> 00:13:34,143
than the Anchore docs.

323
00:13:35,160 --> 00:13:36,800
But that's okay.

324
00:13:36,800 --> 00:13:39,130
Step one in the anchor docs

325
00:13:39,130 --> 00:13:41,520
is to download a docker-compose file.

326
00:13:41,520 --> 00:13:43,100
That docker-compose file

327
00:13:43,100 --> 00:13:46,720
specifies all of the microservices
associated with Anchore.

328
00:13:46,720 --> 00:13:48,520
And then you docker-compose up.

329
00:13:48,520 --> 00:13:50,960
And now you have Anchor
running in your cluster.

330
00:13:50,960 --> 00:13:52,520
Well, kind of.

331
00:13:52,520 --> 00:13:54,550
A couple of commands.

332
00:13:54,550 --> 00:13:57,719
I can docker-compose exec
into one of the containers

333
00:13:57,720 --> 00:14:00,310
or I can pip install anchorcli.

334
00:14:00,310 --> 00:14:04,199
And now I have the anchorcli
so I can run commands.

335
00:14:04,200 --> 00:14:06,980
The anchorcli perhaps
I'm pip installing this

336
00:14:06,980 --> 00:14:08,300
into my build agent,

337
00:14:08,300 --> 00:14:11,020
so that now I have that
available to be able to launch

338
00:14:11,020 --> 00:14:14,173
into my container scanning
in my DevOps pipeline.

339
00:14:15,311 --> 00:14:19,500
The first commands that
they suggest that we run,

340
00:14:19,500 --> 00:14:24,210
anchor-cli system status and
anchor-cli system feeds list.

341
00:14:24,210 --> 00:14:25,550
The first one will tell us, yep,

342
00:14:25,550 --> 00:14:27,490
all of the microservices are running

343
00:14:27,490 --> 00:14:30,520
and the status will
show us as it downloads

344
00:14:30,520 --> 00:14:32,850
the details of all of the vulnerabilities

345
00:14:32,850 --> 00:14:34,370
that it's gonna use to catalog.

346
00:14:34,370 --> 00:14:37,540
It will automatically update
these when it needs to,

347
00:14:37,540 --> 00:14:40,709
but this process is not fast. (laughs)

348
00:14:40,710 --> 00:14:42,940
The docs say it may take 10 minutes

349
00:14:42,940 --> 00:14:45,380
to populate all the scan data.

350
00:14:45,380 --> 00:14:48,630
It took me closer to a week. (laughs)

351
00:14:48,630 --> 00:14:49,939
Your mileage may vary,

352
00:14:49,940 --> 00:14:53,070
but the good part is once it is updated,

353
00:14:53,070 --> 00:14:55,900
then Anchore will keep that
updated in the background,

354
00:14:55,900 --> 00:14:57,959
and so you won't need to worry about it.

355
00:14:57,960 --> 00:15:00,363
But it does take a bit
to get started with this.

356
00:15:01,290 --> 00:15:05,170
Next up, what do I do to build out my...

357
00:15:05,170 --> 00:15:09,680
either my build script or the
DevOps process to do this.

358
00:15:09,680 --> 00:15:12,170
And the Anchore docs
suggest a couple of things.

359
00:15:12,170 --> 00:15:16,420
First, we're gonna add
the image to Anchore

360
00:15:16,420 --> 00:15:18,510
as an image that it wants to scan.

361
00:15:18,510 --> 00:15:20,290
This doesn't actually do the scanning,

362
00:15:20,290 --> 00:15:22,313
but rather queues it to be scanned.

363
00:15:23,180 --> 00:15:26,719
We can choose to wait
for that scan to finish.

364
00:15:26,720 --> 00:15:28,860
This is great in a DevOps pipeline,

365
00:15:28,860 --> 00:15:30,610
but in another process,

366
00:15:30,610 --> 00:15:33,190
we may want to just look
through the registry,

367
00:15:33,190 --> 00:15:35,080
submit all of them to be scanned,

368
00:15:35,080 --> 00:15:37,900
and come back later and
look for the results.

369
00:15:37,900 --> 00:15:41,579
So, let's add our creating
a DevOps pipeline here.

370
00:15:41,580 --> 00:15:44,070
Let's add our container to the...

371
00:15:44,920 --> 00:15:45,810
to be scanned.

372
00:15:45,810 --> 00:15:47,739
Let's wait for that scan to happen.

373
00:15:47,740 --> 00:15:49,380
And then let's get some results.

374
00:15:49,380 --> 00:15:52,210
We can get the summary
just by saying image get,

375
00:15:52,210 --> 00:15:53,733
passing in that image name.

376
00:15:54,810 --> 00:15:59,189
And then we can ask for
vulnerabilities and also content.

377
00:15:59,190 --> 00:16:00,470
Now, the cool thing about listing

378
00:16:00,470 --> 00:16:02,310
the vulnerabilities and the content.

379
00:16:02,310 --> 00:16:05,089
Let's take that content and
let's save that off for later.

380
00:16:05,090 --> 00:16:05,980
We can use that

381
00:16:05,980 --> 00:16:09,570
to continuously compare this
to vulnerability database.

382
00:16:09,570 --> 00:16:11,670
And then we know if the container suddenly

383
00:16:11,670 --> 00:16:14,853
becomes vulnerable and we need
to expire it and rebuild it.

384
00:16:16,380 --> 00:16:18,610
The vulnerability list
is great for right now,

385
00:16:18,610 --> 00:16:21,670
we can make that go or no go
decision right now and say,

386
00:16:21,670 --> 00:16:24,229
no, there are too many
vulnerabilities in this container.

387
00:16:24,230 --> 00:16:25,680
I'm not gonna let it through.

388
00:16:28,428 --> 00:16:30,500
Anchore also works with GitHub Actions,

389
00:16:30,500 --> 00:16:32,470
and we're gonna dig into this in the demo.

390
00:16:32,470 --> 00:16:34,860
GitHub Actions might be
a simpler way to do that

391
00:16:34,860 --> 00:16:38,120
because GitHub Actions
maintains the anchor database,

392
00:16:38,120 --> 00:16:41,460
ensures that that database
is always up to date.

393
00:16:41,460 --> 00:16:43,960
And so, we just hit it with
a single command that says,

394
00:16:43,960 --> 00:16:46,460
hey, go scan my thing. (laughs)

395
00:16:46,460 --> 00:16:48,480
Then we can go look at the Anchore reports

396
00:16:48,480 --> 00:16:51,420
to try and dig into the vulnerability list

397
00:16:51,420 --> 00:16:52,783
and the content list.

398
00:16:53,690 --> 00:16:56,430
So let's do that, let's demo Anchore.

399
00:16:59,720 --> 00:17:04,300
I've got the Anchore set
up here, docker-compose.

400
00:17:04,300 --> 00:17:06,609
We'll list all of the content associated

401
00:17:06,609 --> 00:17:08,402
with the Anchore engine.

402
00:17:10,510 --> 00:17:13,140
And what I notice about this
that's kind of interesting is,

403
00:17:13,140 --> 00:17:16,910
all of them are the Anchore
engine, all of the containers.

404
00:17:16,910 --> 00:17:21,440
So, if I've got all of the
content in one container,

405
00:17:21,440 --> 00:17:25,440
why am I spinning up lots
of microservices? (laughs)

406
00:17:25,440 --> 00:17:30,400
Here's our build.sh and we
want to add Anchore to it.

407
00:17:30,400 --> 00:17:33,330
So we're docker-building the container,

408
00:17:33,330 --> 00:17:35,179
and then we'll push it to our registry

409
00:17:35,180 --> 00:17:37,933
and ultimately kick off
our thing in Kubernetes.

410
00:17:38,880 --> 00:17:41,540
Now, to add the container
scanning details,

411
00:17:41,540 --> 00:17:45,310
I'm gonna go at it, I'll
also add the Docker file.

412
00:17:45,310 --> 00:17:47,250
I'll wait for that to be done.

413
00:17:47,250 --> 00:17:49,100
I'll harvest the list of vulnerabilities,

414
00:17:49,100 --> 00:17:50,459
and then I'll go compare that

415
00:17:50,460 --> 00:17:54,620
to the policies that
I've got in my system.

416
00:17:54,620 --> 00:17:57,689
Perhaps this vulnerability list is okay,

417
00:17:57,690 --> 00:17:59,820
perhaps I'm not gonna
accept any vulnerabilities

418
00:17:59,820 --> 00:18:02,620
and I should just kick
it out straight away.

419
00:18:02,620 --> 00:18:05,469
I'll grab the content, I'll
save both the vulnerability list

420
00:18:05,470 --> 00:18:09,190
and the content for later so
that I can continuously compare

421
00:18:09,190 --> 00:18:12,510
this content to list
of new vulnerabilities.

422
00:18:12,510 --> 00:18:15,320
And ultimately if that succeeds,

423
00:18:15,320 --> 00:18:18,000
now I'll push my content up to

424
00:18:19,160 --> 00:18:21,073
my Docker container registry.

425
00:18:22,610 --> 00:18:25,782
So we can see that
setting up those steps is

426
00:18:25,782 --> 00:18:29,082
decently involved, but
that's totally okay.

427
00:18:30,980 --> 00:18:33,870
On the GitHub side, here's that mechanism.

428
00:18:33,870 --> 00:18:36,949
I'm gonna create a .github folder,

429
00:18:36,950 --> 00:18:41,350
I'll go into workflows
and here's my docker.yaml.

430
00:18:41,350 --> 00:18:44,230
Now, this yaml is the
build steps associated

431
00:18:44,230 --> 00:18:46,740
with doing the build
here in GitHub Actions.

432
00:18:46,740 --> 00:18:48,730
I'm gonna hit edit.

433
00:18:48,730 --> 00:18:50,160
And now we have this wizard

434
00:18:50,160 --> 00:18:52,180
that will help walk us
through all the details,

435
00:18:52,180 --> 00:18:54,000
which is really, really cool.

436
00:18:54,000 --> 00:18:58,790
So, check out, then I'm
doing my Anchore scan.

437
00:18:58,790 --> 00:19:01,830
Then I'm gonna go echo all the results

438
00:19:01,830 --> 00:19:04,960
just to the build blogs so that
I can see all of the files.

439
00:19:04,960 --> 00:19:07,650
I'm also gonna grab that
Anchore reports folder

440
00:19:07,650 --> 00:19:09,720
and use that as a build artifact

441
00:19:09,720 --> 00:19:13,083
so that I can just keep
track of all of the things.

442
00:19:14,400 --> 00:19:15,233
And then finally,

443
00:19:15,233 --> 00:19:17,139
I'm gonna see if there
are any vulnerabilities.

444
00:19:17,140 --> 00:19:19,980
In this case, I'm looking
for any vulnerabilities.

445
00:19:19,980 --> 00:19:22,610
And if so, I'm gonna fail the build.

446
00:19:22,610 --> 00:19:24,399
Now, this happens before I push it up

447
00:19:24,400 --> 00:19:25,510
to the container registry.

448
00:19:25,510 --> 00:19:27,570
In this GitHub Action suite,

449
00:19:27,570 --> 00:19:30,230
I'm actually not pushing
it up to the registry.

450
00:19:30,230 --> 00:19:34,910
But I have two repositories
here, one for a passing site,

451
00:19:34,910 --> 00:19:36,870
one for a failing site,

452
00:19:36,870 --> 00:19:39,979
and we can take a look
at the content in there.

453
00:19:39,980 --> 00:19:42,750
Each one produces these Anchore reports.

454
00:19:42,750 --> 00:19:45,220
And as I pop up in those Anchore reports,

455
00:19:45,220 --> 00:19:47,770
I can see that list of vulnerabilities.

456
00:19:47,770 --> 00:19:49,580
Here's the vulnerabilities that we found

457
00:19:49,580 --> 00:19:50,629
in that failing container.

458
00:19:50,630 --> 00:19:53,110
And each one identifies the CVE.

459
00:19:53,110 --> 00:19:56,844
It identifies is there a solution to this?

460
00:19:56,845 --> 00:19:59,550
And so that can be really, really helpful.

461
00:19:59,550 --> 00:20:00,810
as we look through the content,

462
00:20:00,810 --> 00:20:04,590
here's the content of everything
(laugh) that's kinda big.

463
00:20:04,590 --> 00:20:06,090
But we can also get the content,

464
00:20:06,090 --> 00:20:08,070
in this case there are no RubyGems,

465
00:20:08,070 --> 00:20:09,980
there's no Java JARs,

466
00:20:09,980 --> 00:20:12,100
but we do have some NPM libraries.

467
00:20:12,100 --> 00:20:15,810
And so we can use this
as that list to harvest

468
00:20:16,670 --> 00:20:20,023
and continuously compare this
to our vulnerability database.

469
00:20:22,210 --> 00:20:24,560
So, ultimately we didn't
have a super a lot of time

470
00:20:24,560 --> 00:20:26,270
to dig into a lot of things,

471
00:20:26,270 --> 00:20:27,960
but you can grab the past demo

472
00:20:27,960 --> 00:20:29,710
or the failed demo from GitHub

473
00:20:29,710 --> 00:20:31,460
and you can do what you need to do.

474
00:20:32,540 --> 00:20:35,920
Final closing words, Kubernetes
only protects itself.

475
00:20:35,920 --> 00:20:37,750
We secure the containers.

476
00:20:37,750 --> 00:20:40,000
Use container scanning
to get a hold of this

477
00:20:41,040 --> 00:20:45,200
and add that to your list of

478
00:20:45,200 --> 00:20:47,363
tasks in your build pipeline.

479
00:20:48,270 --> 00:20:50,629
I'll join you now for
questions and answers

480
00:20:50,630 --> 00:20:52,920
in the way that the
conference has made available.

481
00:20:52,920 --> 00:20:53,753
Thanks.

