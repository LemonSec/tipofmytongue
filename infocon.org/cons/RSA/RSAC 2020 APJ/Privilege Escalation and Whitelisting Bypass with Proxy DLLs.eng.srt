1
00:00:09,300 --> 00:00:11,660
- [Moderator] The Vendorpedia
platform is purpose-built

2
00:00:11,660 --> 00:00:14,190
to automate the third
party risk life cycle.

3
00:00:14,190 --> 00:00:16,239
With three core capabilities.

4
00:00:16,239 --> 00:00:18,159
Assessments and due diligence,

5
00:00:18,160 --> 00:00:21,853
global risk exchange and
vendorchasing services.

6
00:00:27,900 --> 00:00:31,150
- Hello, and welcome
to Privilege Escalation

7
00:00:31,150 --> 00:00:34,650
and Whitelisting Bypass with Proxy DLLs.

8
00:00:34,650 --> 00:00:35,830
If you're joining us live,

9
00:00:35,830 --> 00:00:37,860
our speaker is in the slide O discussion,

10
00:00:37,860 --> 00:00:40,240
answering your questions right now.

11
00:00:40,240 --> 00:00:41,730
For audio video issues,

12
00:00:41,730 --> 00:00:44,419
click the technical support button below.

13
00:00:44,420 --> 00:00:46,920
And now I'd like to turn
it over to Jake Williams

14
00:00:46,920 --> 00:00:47,973
for the presentation.

15
00:00:51,610 --> 00:00:52,750
- Hey, thank you so much, Casey.

16
00:00:52,750 --> 00:00:56,070
I'm super excited to be
here and thanks to everybody

17
00:00:56,070 --> 00:00:59,950
for being out here with us at RSA.

18
00:00:59,950 --> 00:01:03,200
So I wanted to get in and start talking

19
00:01:03,200 --> 00:01:04,769
about really from our agenda standpoint,

20
00:01:04,769 --> 00:01:06,509
what are we gonna cover?

21
00:01:06,510 --> 00:01:08,680
And right off the bat here, wanna talk

22
00:01:08,680 --> 00:01:10,250
about what is a proxy DLL.

23
00:01:10,250 --> 00:01:12,830
So we're talking about
privilege escalation and bypass.

24
00:01:12,830 --> 00:01:14,399
And I assume most people come into this,

25
00:01:14,400 --> 00:01:16,970
may know what proxy DLL's, I
assume as some of you don't.

26
00:01:16,970 --> 00:01:19,679
I wanna discuss why we're
gonna use proxy DLLs.

27
00:01:19,680 --> 00:01:22,750
Why has it become such an
attractive thing for us to use?

28
00:01:22,750 --> 00:01:23,930
How do we build one?

29
00:01:23,930 --> 00:01:25,570
And then apply it of course, right?

30
00:01:25,570 --> 00:01:28,020
Because well, I mean, I
don't wanna talk at you.

31
00:01:28,020 --> 00:01:30,070
I'd rather tell you how to do something,

32
00:01:30,070 --> 00:01:33,979
and then we'll wrap it up with
some closing thoughts, right?

33
00:01:33,980 --> 00:01:36,493
So, what is a proxy DLL?

34
00:01:36,493 --> 00:01:38,320
A proxy DLL is a malicious DLL

35
00:01:38,320 --> 00:01:42,750
that exports the same function
names as legitimate DLL

36
00:01:42,750 --> 00:01:44,010
that it's impersonating.

37
00:01:44,010 --> 00:01:48,450
As proxy DLL is forwarding
or proxying API calls,

38
00:01:48,450 --> 00:01:51,670
from an application to the legitimate DLL.

39
00:01:51,670 --> 00:01:53,460
You can almost think about
this if you're familiar

40
00:01:53,460 --> 00:01:55,070
with the term hooking, right?

41
00:01:55,070 --> 00:01:57,360
Or in some cases shimming,

42
00:01:57,360 --> 00:02:00,460
this is basically the
equivalent of shimming

43
00:02:00,460 --> 00:02:03,740
a malicious DLL into a
legitimate application, right?

44
00:02:03,740 --> 00:02:06,710
This has tons of uses for
approval justification

45
00:02:06,710 --> 00:02:09,449
and weightless bypass, are
two of the most important

46
00:02:09,449 --> 00:02:12,489
and really are the two that
come into play the most for us,

47
00:02:12,490 --> 00:02:14,340
when we're doing our assessment work,

48
00:02:16,000 --> 00:02:17,840
assessment work on my consultancy, right?

49
00:02:17,840 --> 00:02:21,850
So, the proxy DLL can go
execute any malicious code,

50
00:02:21,850 --> 00:02:24,250
could execute a call back, it
could generate a bind shell.

51
00:02:24,250 --> 00:02:26,000
Can do any malicious payload here.

52
00:02:26,000 --> 00:02:27,910
The idea here, I'm not
gonna get into the payloads

53
00:02:27,910 --> 00:02:30,230
because you do that right?

54
00:02:30,230 --> 00:02:31,920
Payloads or diamond does
and what we're really

55
00:02:31,920 --> 00:02:33,700
talking about here is
how do I get the payload

56
00:02:33,700 --> 00:02:35,730
execute on the target machine right?

57
00:02:35,730 --> 00:02:37,429
Now in the case of verbal escalation,

58
00:02:37,430 --> 00:02:39,060
you probably wanna do
something after the fact

59
00:02:39,060 --> 00:02:41,577
to maintain that privilege
escalation, right?

60
00:02:41,577 --> 00:02:44,120
As to why proxy DLLs in
the first place, all right?

61
00:02:44,120 --> 00:02:47,130
Well, first off, proxy
DLL allows attackers

62
00:02:47,130 --> 00:02:49,210
to persist malicious code on a system.

63
00:02:49,210 --> 00:02:50,750
They don't have to go change auto runs.

64
00:02:50,750 --> 00:02:52,840
This is critical, right?

65
00:02:52,840 --> 00:02:55,760
When I got into the field
here many moons ago,

66
00:02:55,760 --> 00:02:58,700
autoruns was like the
kind of the GoTo, right.

67
00:02:58,700 --> 00:03:00,077
You'd sit and be like, okay,

68
00:03:00,077 --> 00:03:03,820
"hey, I'm gonna go in
and implement autoruns."

69
00:03:03,820 --> 00:03:06,590
It's like, rock on, love it, right?

70
00:03:06,590 --> 00:03:09,590
And so, it's something like,
yeah, we'll run autoruns

71
00:03:09,590 --> 00:03:10,810
and look realistic.

72
00:03:10,810 --> 00:03:11,643
Unless people didn't understand

73
00:03:11,643 --> 00:03:13,050
what they were even looking at.

74
00:03:13,050 --> 00:03:16,700
But the reality today
is these EDR systems,

75
00:03:16,700 --> 00:03:19,350
end point detection, response
systems are a dime a dozen,

76
00:03:19,350 --> 00:03:22,030
we're getting into threat
hunting being a regular thing.

77
00:03:22,030 --> 00:03:23,670
You change autoruns on a system, right?

78
00:03:23,670 --> 00:03:25,980
You probably know about a
frequency of least occurrence,

79
00:03:25,980 --> 00:03:27,064
right?

80
00:03:27,064 --> 00:03:28,040
Looking across an enterprise.

81
00:03:28,040 --> 00:03:29,600
And like, where are the
standouts from the autorun?

82
00:03:29,600 --> 00:03:32,710
So start with a golden image,
that's probably the malware.

83
00:03:32,710 --> 00:03:35,440
It's probably your
implant, your tool, right?

84
00:03:35,440 --> 00:03:37,513
As a red teamer or penetration
tests are sitting there,

85
00:03:37,513 --> 00:03:39,260
it's a deviation from the baseline.

86
00:03:39,260 --> 00:03:41,790
So we don't wanna add things
to autoruns if we can avoid it.

87
00:03:41,790 --> 00:03:43,350
Now look, defenders are getting way better

88
00:03:43,350 --> 00:03:44,845
monitoring process list, right?

89
00:03:44,845 --> 00:03:47,020
It used to be, you go throw
some randomly named executable

90
00:03:47,020 --> 00:03:48,727
on a process list and
game on people were like,

91
00:03:48,727 --> 00:03:51,020
"ooh, that's good, can't do that anymore."

92
00:03:51,020 --> 00:03:52,450
Application whitelisting.

93
00:03:52,450 --> 00:03:54,320
It's definitely changing the game

94
00:03:54,320 --> 00:03:56,120
on which programs can actually start.

95
00:03:56,120 --> 00:03:58,630
There's a lot of reasons
that organizations,

96
00:03:58,630 --> 00:04:00,829
even the ones that
implement good whitelisting,

97
00:04:00,830 --> 00:04:02,390
don't whitelist DLLs.

98
00:04:02,390 --> 00:04:04,540
I actually have a couple of
customers that have tried.

99
00:04:04,540 --> 00:04:06,950
My friends has a religious experience.

100
00:04:06,950 --> 00:04:10,209
It is a absolutely painful experience

101
00:04:10,210 --> 00:04:11,747
to try to whitelist DLLs.

102
00:04:11,747 --> 00:04:13,970
And there's lots of reasons for this too,

103
00:04:13,970 --> 00:04:15,520
but one of the things
that I'll throw out there

104
00:04:15,520 --> 00:04:16,910
is that because so few people,

105
00:04:16,910 --> 00:04:19,140
so few organizations whitelist DLLs.

106
00:04:19,140 --> 00:04:21,659
I will tell you that a
number of major manufacturers

107
00:04:21,660 --> 00:04:23,130
and major software vendors.

108
00:04:23,130 --> 00:04:24,540
And I won't get into naming names here

109
00:04:24,540 --> 00:04:26,050
'cause that's not what it's all about,

110
00:04:26,050 --> 00:04:28,100
but a number of these software vendors

111
00:04:28,100 --> 00:04:29,760
periodically releasing software,

112
00:04:29,760 --> 00:04:31,800
are where they forget to
digitally sign the DLLs.

113
00:04:31,800 --> 00:04:34,090
And this creates all kinds
of problems right now.

114
00:04:34,090 --> 00:04:36,400
Now not all the DLLs it's
like they can do an update.

115
00:04:36,400 --> 00:04:39,179
And it's like, the executables
that gets checked off in QA.

116
00:04:39,180 --> 00:04:41,333
But the DLLs don't, nobody notices it

117
00:04:41,333 --> 00:04:43,090
because so few people try to do this.

118
00:04:43,090 --> 00:04:45,609
Now again, if you are whitelisting DLLs.

119
00:04:45,610 --> 00:04:48,090
Now, all of a sudden we're
saying only by digital signature.

120
00:04:48,090 --> 00:04:50,580
Yeah, you can't do buy
Shaw, whether your shot,

121
00:04:50,580 --> 00:04:51,413
you would just like Shaw.

122
00:04:51,413 --> 00:04:53,640
Why don't you care what Shaw
you're using, bottom line,

123
00:04:53,640 --> 00:04:55,169
you can't do it by that, right?

124
00:04:55,170 --> 00:04:56,366
Really what we end up with now

125
00:04:56,366 --> 00:04:58,870
is really going to do
digital certificates.

126
00:04:58,870 --> 00:05:01,120
And again, for lots of reasons,

127
00:05:01,120 --> 00:05:05,280
this is not a viable option
for most organizations.

128
00:05:05,280 --> 00:05:08,580
So, when I talk about how
do we use a proxy DLL?

129
00:05:08,580 --> 00:05:09,979
There's two main ways that we use it.

130
00:05:09,980 --> 00:05:11,980
Now, obviously there's other ways

131
00:05:11,980 --> 00:05:14,040
that you can use a proxy DLLs.

132
00:05:14,040 --> 00:05:15,760
But one is maintaining persistence.

133
00:05:15,760 --> 00:05:17,719
So this is a big deal for us, right?

134
00:05:17,720 --> 00:05:19,820
I just talked about the
fact that I wanna maintain

135
00:05:19,820 --> 00:05:24,820
persistence, but I also
know that with persistence,

136
00:05:25,100 --> 00:05:27,350
I obviously I have the downside there

137
00:05:27,350 --> 00:05:29,380
and I'm leaving something
behind on the system,

138
00:05:29,380 --> 00:05:30,460
for systems meaning of course

139
00:05:30,460 --> 00:05:32,840
I don't wanna have to
re-explore the system again,

140
00:05:32,840 --> 00:05:35,419
to get back versus my payload.

141
00:05:35,420 --> 00:05:38,760
I know that there are gonna
be times if I change autoruns,

142
00:05:38,760 --> 00:05:39,849
I'm gonna get caught, right?

143
00:05:39,850 --> 00:05:40,683
That's a big one.

144
00:05:40,683 --> 00:05:43,719
So if I can without changing the autoruns,

145
00:05:43,720 --> 00:05:46,560
and without changing the
program it's executing,

146
00:05:46,560 --> 00:05:48,040
every time we get back on this,

147
00:05:48,040 --> 00:05:49,810
every time that process restarts,

148
00:05:49,810 --> 00:05:52,560
get code into the context
of that process game on.

149
00:05:52,560 --> 00:05:55,400
Now, this really ramps it up a notch here.

150
00:05:55,400 --> 00:05:58,229
If we can find a program that executes

151
00:05:58,230 --> 00:06:00,320
in a privileged context, right?

152
00:06:00,320 --> 00:06:01,380
So a privileged context,

153
00:06:01,380 --> 00:06:04,380
meaning it's running as a
system or a service account,

154
00:06:04,380 --> 00:06:06,240
or administrator or whatever the case is.

155
00:06:06,240 --> 00:06:10,150
If we can then write a
DLL to that directory,

156
00:06:10,150 --> 00:06:13,090
where that executable runs from, right?

157
00:06:13,090 --> 00:06:15,210
That means that we can then go in

158
00:06:17,416 --> 00:06:19,469
and gain privilege escalation

159
00:06:19,470 --> 00:06:21,230
rather than just persistence, right?

160
00:06:21,230 --> 00:06:23,210
So now we're persisting as basically

161
00:06:23,210 --> 00:06:24,979
persisting as a privileged user

162
00:06:24,980 --> 00:06:26,430
from an unprivileged context.

163
00:06:26,430 --> 00:06:28,360
Now, before you step back and you're like,

164
00:06:28,360 --> 00:06:29,193
well, that's dumb.

165
00:06:29,193 --> 00:06:30,789
That never happens, first off,

166
00:06:30,790 --> 00:06:32,240
let me tell you that definitely happens.

167
00:06:32,240 --> 00:06:33,870
That happens all the time.

168
00:06:33,870 --> 00:06:36,830
Major bank whose name
obviously will not reveal

169
00:06:36,830 --> 00:06:39,169
for customer reasons, major
bank in the United States.

170
00:06:39,170 --> 00:06:41,960
Who won one of the very, very
large ones that I'm positive,

171
00:06:41,960 --> 00:06:43,460
everybody knows the name of,

172
00:06:43,460 --> 00:06:46,719
we were able to take over with
system they're golden image,

173
00:06:46,720 --> 00:06:48,500
every machine in their network.

174
00:06:48,500 --> 00:06:52,250
And it was because we're able
to go add a DLL to a directory

175
00:06:52,250 --> 00:06:53,840
and we couldn't overwrite
stuff in that directory.

176
00:06:53,840 --> 00:06:56,520
But adding files to a
directory is a very common

177
00:06:56,520 --> 00:06:59,900
extended NTFS permission,
happens to be inherited as well.

178
00:06:59,900 --> 00:07:02,039
And sub-directories, and so, if it's set

179
00:07:02,040 --> 00:07:03,490
at a high level directory,

180
00:07:03,490 --> 00:07:06,145
then it's gonna install this
software, their game on, right?

181
00:07:06,145 --> 00:07:07,349
And install all about this.

182
00:07:07,350 --> 00:07:10,510
So, just something to keep
in mind there as we roll.

183
00:07:10,510 --> 00:07:13,789
So, talking about proxy DLLs, I have to,

184
00:07:13,790 --> 00:07:15,960
before we get further into
this, I'm gonna assume

185
00:07:15,960 --> 00:07:17,293
you have some experience, right?

186
00:07:17,293 --> 00:07:22,230
With DLL side bloating or
DLL search or hijacking.

187
00:07:22,230 --> 00:07:23,710
But in case you don't, right?

188
00:07:23,710 --> 00:07:26,940
Wanna quickly walk through
the search order for DLLs.

189
00:07:26,940 --> 00:07:30,820
Windows, the Windows
loader finds DLLs by name,

190
00:07:30,820 --> 00:07:33,780
but the path isn't specified,
this is actually intentional.

191
00:07:33,780 --> 00:07:37,280
I suspect that if you could
like roll back right 30 years

192
00:07:37,280 --> 00:07:39,539
in history and go back to the Microsoft,

193
00:07:39,540 --> 00:07:41,510
maybe a little bit more
than 30 years of it.

194
00:07:41,510 --> 00:07:42,420
But go back and be like,

195
00:07:42,420 --> 00:07:44,750
hey, are you sure you wanna do that?

196
00:07:44,750 --> 00:07:46,090
I think they're gonna tell you, no,

197
00:07:46,090 --> 00:07:47,159
I think they're gonna be like, ah,

198
00:07:47,160 --> 00:07:49,860
you know we probably should
have taken and put the full path

199
00:07:49,860 --> 00:07:52,060
form the DLL, another,
there are some benefits

200
00:07:52,060 --> 00:07:53,130
to not having the full path.

201
00:07:53,130 --> 00:07:55,413
I don't have time to get
into some of the actual,

202
00:07:56,260 --> 00:07:58,349
some of the compatibility
benefits and whatnot,

203
00:07:58,350 --> 00:08:00,900
but really what's happening
here is when you import a DLL,

204
00:08:00,900 --> 00:08:04,150
the executable load time,
the loader goes in parses,

205
00:08:04,150 --> 00:08:06,280
the portable executable
head or the PE header

206
00:08:06,280 --> 00:08:07,719
and says, hey, what are we important?

207
00:08:07,720 --> 00:08:10,137
And then it says, hey,
let me go find that DLL.

208
00:08:10,137 --> 00:08:12,140
And it searches through these directories

209
00:08:12,140 --> 00:08:14,080
to find it in this order.

210
00:08:14,080 --> 00:08:15,640
You'll notice that the number one up there

211
00:08:15,640 --> 00:08:18,820
is the directory from
which the DLL is loaded,

212
00:08:18,820 --> 00:08:20,430
oh sorry, from which the
application is loaded.

213
00:08:20,430 --> 00:08:22,239
So if we can write a DLL

214
00:08:22,239 --> 00:08:25,450
to the same directory that
the executable runs from,

215
00:08:25,450 --> 00:08:29,390
and again, most often this is
entirely possible, game on.

216
00:08:29,390 --> 00:08:30,223
We win.

217
00:08:30,223 --> 00:08:31,160
Now, if you're thinking,

218
00:08:31,160 --> 00:08:34,169
I just let's say I compromised some Yahoo

219
00:08:34,169 --> 00:08:35,959
with a phishing email, because he's like,

220
00:08:35,960 --> 00:08:38,559
heck yeah, I wanna see confidential,

221
00:08:38,559 --> 00:08:41,750
whatever their executive
compensation bonus.xls.

222
00:08:41,750 --> 00:08:43,840
And he opens it up and then sure enough,

223
00:08:43,840 --> 00:08:46,610
it exploits them and you're
running as a regular user.

224
00:08:46,610 --> 00:08:47,460
What now, right?

225
00:08:47,460 --> 00:08:49,150
Well, are there autoruns
of the regular use?

226
00:08:49,150 --> 00:08:50,780
Yeah, you betcha, right?

227
00:08:50,780 --> 00:08:53,350
You think about like
GoToMeeting and in many cases,

228
00:08:53,350 --> 00:08:56,290
Dropbox, and you just run
through like all these

229
00:08:56,290 --> 00:08:59,060
little applications that
may not be installed

230
00:08:59,060 --> 00:09:00,099
in the golden image,

231
00:09:00,100 --> 00:09:01,640
but they run under that user context is

232
00:09:01,640 --> 00:09:04,983
GoToMeetings and Webexs and you name it.

233
00:09:04,983 --> 00:09:07,689
There's very common they install,

234
00:09:07,690 --> 00:09:10,560
under the user's context and they autorun

235
00:09:10,560 --> 00:09:12,439
in that user context as well, right?

236
00:09:12,440 --> 00:09:14,790
So meaning see users
whoever their name is.

237
00:09:14,790 --> 00:09:17,120
So game on, we can definitely
write to there again,

238
00:09:17,120 --> 00:09:18,530
no privilege escalation with app.

239
00:09:18,530 --> 00:09:20,680
We do the persistence consistently

240
00:09:20,680 --> 00:09:22,689
and game on we're happy with.

241
00:09:22,690 --> 00:09:26,470
So, next step we need to
pick the DLL to proxy.

242
00:09:26,470 --> 00:09:27,960
We have to find a DLL that's loaded

243
00:09:27,960 --> 00:09:29,030
by our target application.

244
00:09:29,030 --> 00:09:30,290
If it's not loaded by the target app,

245
00:09:30,290 --> 00:09:32,870
then I mean, that doesn't
help me at all, right?

246
00:09:32,870 --> 00:09:35,370
I need no one that is in the same folder

247
00:09:35,370 --> 00:09:37,120
or as in does not exist in the same folder

248
00:09:37,120 --> 00:09:38,610
as the target application.

249
00:09:38,610 --> 00:09:40,740
Now, even once I have admin permissions,

250
00:09:40,740 --> 00:09:43,210
I don't wanna go poison
something in system 32

251
00:09:43,210 --> 00:09:44,510
or system file 64,

252
00:09:44,510 --> 00:09:45,813
because odds are good,

253
00:09:45,813 --> 00:09:49,080
that the actual legitimate
DLL is sitting right there.

254
00:09:49,080 --> 00:09:51,480
And that doesn't help me, right?

255
00:09:51,480 --> 00:09:55,370
And finally here, there's
a special category of DLLs

256
00:09:55,370 --> 00:09:58,660
called KnownDLLs, on the
target system, right?

257
00:09:58,660 --> 00:10:02,100
So, we have to avoid it
being in KnownDLLs as well.

258
00:10:02,100 --> 00:10:03,570
And what are KnownDLLs, right?

259
00:10:03,570 --> 00:10:06,320
Well, I mean, they're
known no joke, right?

260
00:10:06,320 --> 00:10:07,540
But what does that mean?

261
00:10:07,540 --> 00:10:10,079
What's happening here
effectively is these are DLLs

262
00:10:10,080 --> 00:10:11,520
that are preloaded.

263
00:10:11,520 --> 00:10:14,730
Meaning that before the loader, right?

264
00:10:14,730 --> 00:10:16,540
Before the loader goes in

265
00:10:16,540 --> 00:10:19,589
and basically starts parsing
the in-port address table.

266
00:10:19,590 --> 00:10:22,110
And we'll as a parse of the
port address table, regardless,

267
00:10:22,110 --> 00:10:25,040
it looks and says, "hey, I
need to go load this DLL."

268
00:10:25,040 --> 00:10:27,459
Now what's gonna happen there
is it's gonna open the file,

269
00:10:27,460 --> 00:10:30,840
and as it opens the file,
it's going to create a handle

270
00:10:30,840 --> 00:10:32,223
in the global object table.

271
00:10:33,180 --> 00:10:36,670
Turns out that open only
happens if the name of the DLL.

272
00:10:36,670 --> 00:10:38,550
Doesn't already appear on
the global object table.

273
00:10:38,550 --> 00:10:42,520
Or turns out through the
object manager as terms go,

274
00:10:42,520 --> 00:10:45,380
as it turns out here, these DLLs,

275
00:10:45,380 --> 00:10:46,990
even though they don't
show up in your list

276
00:10:46,990 --> 00:10:48,780
of loaded modules automatically,

277
00:10:48,780 --> 00:10:52,870
it turns out that handles
the DLLs already exists.

278
00:10:52,870 --> 00:10:55,370
And so, the problem that we run into here

279
00:10:55,370 --> 00:10:57,550
is that if we try and
open one of those DLLs,

280
00:10:57,550 --> 00:10:59,640
it's never gonna open our malicious DLL

281
00:10:59,640 --> 00:11:02,189
'cause there's an existing
handle to it elsewhere.

282
00:11:02,190 --> 00:11:05,590
Now, the bad news is
that there's no one solid

283
00:11:05,590 --> 00:11:06,630
list of known DLLs.

284
00:11:06,630 --> 00:11:09,400
They change depending on the
operating system version.

285
00:11:09,400 --> 00:11:11,050
And there's a lot of reasons for this.

286
00:11:11,050 --> 00:11:13,790
And it gets deeply
tactical, INS too and others

287
00:11:13,790 --> 00:11:15,290
have talked about this
and some of the Windows,

288
00:11:15,290 --> 00:11:18,170
internals books, and some of
the rationale behind this,

289
00:11:18,170 --> 00:11:19,713
why don't they preload all the DLLs

290
00:11:19,713 --> 00:11:21,543
through the object manager.

291
00:11:22,400 --> 00:11:24,410
What, bottom line you just need to know

292
00:11:24,410 --> 00:11:26,230
for your target operating system,

293
00:11:26,230 --> 00:11:28,400
what are KnownDLLs and what are, right?

294
00:11:28,400 --> 00:11:33,400
Wants to avoid NTDLL32.dll,
et cetera, avoid those right?

295
00:11:33,540 --> 00:11:35,880
Anything that's super common, right?

296
00:11:35,880 --> 00:11:39,443
Top 10, top 12, or it's a
Winsock, when INET typically

297
00:11:39,443 --> 00:11:40,610
those are the known DLLs, right?

298
00:11:40,610 --> 00:11:41,750
Matter of fact, I think they always,

299
00:11:41,750 --> 00:11:43,300
those particular ones always do,

300
00:11:43,300 --> 00:11:46,750
bottom line I wanna pick
something that's kind of obscure,

301
00:11:46,750 --> 00:11:48,700
but not like crazy obscure right?

302
00:11:48,700 --> 00:11:50,450
Bottom line is it just
can't be a KnownDLL.

303
00:11:50,450 --> 00:11:52,440
So, if all that was super technical,

304
00:11:52,440 --> 00:11:55,890
just clear your KnownDLLs
key, look at it and be like,

305
00:11:55,890 --> 00:11:57,640
'hey, is my DLL on that list?"

306
00:11:57,640 --> 00:11:59,710
If no proceed, that's it, right?

307
00:11:59,710 --> 00:12:01,870
So, let's talk about
how this actually works.

308
00:12:01,870 --> 00:12:03,960
Or it's like, got my proxy
DLL now in this case,

309
00:12:03,960 --> 00:12:06,031
we're only doing weightless bypass, right?

310
00:12:06,031 --> 00:12:08,989
And so I have a signed
application it's in C:\goodApp.

311
00:12:08,990 --> 00:12:12,360
Now it turns out that in the
root of your file system,

312
00:12:12,360 --> 00:12:15,750
by default, NTFS implements something,

313
00:12:15,750 --> 00:12:17,770
I remember a special permission.

314
00:12:17,770 --> 00:12:20,579
That's called the basically add data,

315
00:12:20,580 --> 00:12:23,920
and a pen, sorry, add data
and create files, right?

316
00:12:23,920 --> 00:12:25,620
So basically you can create a file

317
00:12:25,620 --> 00:12:27,520
that doesn't already exist

318
00:12:28,400 --> 00:12:30,260
basically in that predictable folder.

319
00:12:30,260 --> 00:12:34,270
So, when goodApp installed,
the MSI installer, right?

320
00:12:34,270 --> 00:12:35,103
Basically it said, okay,

321
00:12:35,103 --> 00:12:38,180
inherit the permissions
of this directory, right?

322
00:12:38,180 --> 00:12:39,223
Set ownership.

323
00:12:39,224 --> 00:12:40,057
But it says for the permissions

324
00:12:40,057 --> 00:12:40,890
and here are the permissions.

325
00:12:40,890 --> 00:12:43,170
Well, the root says add files.

326
00:12:43,170 --> 00:12:44,945
And so when an installed the goodApp,

327
00:12:44,946 --> 00:12:47,950
C:\goodApp receive those same permissions

328
00:12:47,950 --> 00:12:49,110
so we can write new files.

329
00:12:49,110 --> 00:12:51,340
We can't override existing
files in that directory

330
00:12:51,340 --> 00:12:53,007
because of ownership permissions.

331
00:12:53,007 --> 00:12:56,239
But if the file name doesn't
yet exist in the directory,

332
00:12:56,240 --> 00:12:58,790
game on, we can go ahead
and write that better.

333
00:12:58,790 --> 00:13:01,140
So we do as we go and we take a look at

334
00:13:01,140 --> 00:13:02,100
what this thing imports.

335
00:13:02,100 --> 00:13:05,340
Now, I've been super easy
here to basically say,

336
00:13:05,340 --> 00:13:08,100
okay, well, let's only
show a couple of DLLs.

337
00:13:08,100 --> 00:13:09,500
One of them is kernel32.dll.

338
00:13:09,500 --> 00:13:11,690
One is msimg.dll, right?

339
00:13:11,690 --> 00:13:14,000
So, let's walk through
the loading process.

340
00:13:14,000 --> 00:13:16,690
And so what happens here is that goodApp

341
00:13:16,690 --> 00:13:20,050
is going to go in and load kernel32.dll.

342
00:13:20,050 --> 00:13:21,729
Now the search order here doesn't matter,

343
00:13:21,730 --> 00:13:24,620
if you recall the search
order only matters

344
00:13:24,620 --> 00:13:25,953
for things that are KnownDLLs.

345
00:13:25,953 --> 00:13:28,040
Kernel32 is always a KnownDLLs,

346
00:13:28,040 --> 00:13:30,140
enhanced none of that matters, right?

347
00:13:30,140 --> 00:13:32,250
And so it's gonna go
grab it from technically

348
00:13:32,250 --> 00:13:33,590
from system 32 although again,

349
00:13:33,590 --> 00:13:35,410
technically it's grabbing
it from the object manager.

350
00:13:35,410 --> 00:13:37,410
or it's already grabbed from kernel32,

351
00:13:37,410 --> 00:13:39,130
oh sorry from system32.

352
00:13:39,130 --> 00:13:40,939
And so, what ultimately
happens there of course,

353
00:13:40,940 --> 00:13:43,600
is that kernel32 imports ntdll.

354
00:13:43,600 --> 00:13:47,140
And so we have, because kernel32 imports

355
00:13:47,140 --> 00:13:50,380
from ntdll, ntdll also gets loaded, right?

356
00:13:50,380 --> 00:13:52,340
So, we have an explicit load,

357
00:13:52,340 --> 00:13:54,460
which is kernel32 and
implicit load, right?

358
00:13:54,460 --> 00:13:57,610
Implicit, meaning that it
was loaded by something else.

359
00:13:57,610 --> 00:13:59,410
It was explicitly loaded by the app.

360
00:14:00,600 --> 00:14:04,546
So goodApp next goes and loads msimg.dll,

361
00:14:04,546 --> 00:14:06,910
msimg32.dll which is not DLL.

362
00:14:06,910 --> 00:14:09,530
Now here, this is critical.

363
00:14:09,530 --> 00:14:12,939
We've now written a malicious DLL

364
00:14:12,940 --> 00:14:17,280
and then msimg32.dll into
our directory, C:\goodApp.

365
00:14:17,280 --> 00:14:19,240
Now game on, what we're set here, right?

366
00:14:19,240 --> 00:14:22,130
So, that means that our
DLL is gonna be loaded,

367
00:14:22,130 --> 00:14:24,266
but it's not enough to
simply fire up Meterpreter

368
00:14:24,267 --> 00:14:26,900
and Metasploit will be
like, generate me a DLL.

369
00:14:26,900 --> 00:14:28,930
You can't just do that and
assume everything's gonna work

370
00:14:28,930 --> 00:14:30,839
because Windows loader is gonna be like,

371
00:14:30,840 --> 00:14:32,320
okay, cool I loaded that DLL.

372
00:14:32,320 --> 00:14:35,700
Now let me resolve these
exported functions, right?

373
00:14:35,700 --> 00:14:38,184
Because they're an import
that address table, goodApp.

374
00:14:38,184 --> 00:14:39,800
And it can't do it
because we have an export

375
00:14:39,800 --> 00:14:41,140
of this functions, right?

376
00:14:41,140 --> 00:14:43,100
That's where the proxy comes in.

377
00:14:43,100 --> 00:14:45,490
By the way, beyond just export
of those function names.

378
00:14:45,490 --> 00:14:47,110
They actually have to do something, right?

379
00:14:47,110 --> 00:14:50,140
The program needs it and if
you don't provide that code,

380
00:14:50,140 --> 00:14:52,199
the program is gonna crash,
well, that's bad for you

381
00:14:52,200 --> 00:14:53,640
'cause you want it to persist on the box.

382
00:14:53,640 --> 00:14:57,050
Also lots of program crashes
tend to get the help desk call.

383
00:14:57,050 --> 00:14:58,839
And we all know what the help
desk is going to do, right?

384
00:14:58,840 --> 00:15:00,960
That they're literally gonna
nuke the machine from orbit.

385
00:15:00,960 --> 00:15:02,930
They're gonna reinstall it
probably not gonna investigate.

386
00:15:02,930 --> 00:15:05,370
You're less likely to get caught here,

387
00:15:05,370 --> 00:15:07,360
than you are simply to have
that machinery installed.

388
00:15:07,360 --> 00:15:10,070
But either way we lose,
I don't want that right?

389
00:15:10,070 --> 00:15:12,650
So my proxy DLL, what it's gonna do is,

390
00:15:12,650 --> 00:15:14,650
it's gonna proxy any of those calls.

391
00:15:14,650 --> 00:15:17,310
It has to export all the same
stuff, proxy, those calls.

392
00:15:17,310 --> 00:15:19,902
And then I have to
write a legitimate copy.

393
00:15:20,980 --> 00:15:25,120
I have to write a legitimate
copy of msimg32.dll.

394
00:15:25,120 --> 00:15:26,990
Now, I'm gonna name it something

395
00:15:26,990 --> 00:15:29,140
hopefully not less suspicious here.

396
00:15:29,140 --> 00:15:30,850
I can't have a name collision right?

397
00:15:30,850 --> 00:15:33,110
So, what I'm gonna have
to do is this guy here,

398
00:15:33,110 --> 00:15:38,110
msimg32_.dll is really the
legitimate copy of that.

399
00:15:38,860 --> 00:15:41,940
The reason I can't just
import it from system 32,

400
00:15:41,940 --> 00:15:43,190
like would normally happen is

401
00:15:43,190 --> 00:15:44,843
I'm already taking up that name, right?

402
00:15:44,843 --> 00:15:48,219
And so, it turns out that's
gonna cause a naming collision,

403
00:15:48,220 --> 00:15:49,190
and it's not gonna work.

404
00:15:49,190 --> 00:15:52,230
And so no problem though, I'm okay here.

405
00:15:52,230 --> 00:15:54,140
Totally okay with, now again,

406
00:15:54,140 --> 00:15:55,500
you wanna name this something like

407
00:15:55,500 --> 00:15:57,720
don't say obviously not malware.dll

408
00:15:57,720 --> 00:15:59,600
or make it something that blends in,

409
00:15:59,600 --> 00:16:01,670
one of the ones that I've
actually tricked folks

410
00:16:01,670 --> 00:16:04,319
with consistently, and even
use this as a blue team

411
00:16:04,320 --> 00:16:07,020
challenge is, I'll change the 32 to 64.

412
00:16:07,020 --> 00:16:08,720
And I'll ask people which
ones are legitimate.

413
00:16:08,720 --> 00:16:11,000
Know what they're like,
man, are we on a 64 bit?

414
00:16:11,000 --> 00:16:12,640
This is probably a 32 one right?

415
00:16:12,640 --> 00:16:13,800
It turns out the answer is no,

416
00:16:13,800 --> 00:16:15,969
it's really the 64, bottom line,

417
00:16:15,970 --> 00:16:17,488
name it something, right?

418
00:16:17,488 --> 00:16:18,830
That's not gonna get your caught, right?

419
00:16:18,830 --> 00:16:20,880
That sort of comes down to, right?

420
00:16:20,880 --> 00:16:23,120
Very few people look at
DLLs in the first place.

421
00:16:23,120 --> 00:16:24,940
But if they do, you want something

422
00:16:24,940 --> 00:16:26,730
that's not gonna jump right out on it.

423
00:16:26,730 --> 00:16:30,740
So we've talked about what a proxy DLL is.

424
00:16:30,740 --> 00:16:32,730
We've talked about how
it gets loaded, right?

425
00:16:32,730 --> 00:16:34,650
We talked about what you can do with it.

426
00:16:34,650 --> 00:16:37,079
How do we actually build
one of these things, right?

427
00:16:37,080 --> 00:16:39,730
Because that's really the takeaway, right?

428
00:16:39,730 --> 00:16:41,910
I mean, well, I could simply
come in here and be like,

429
00:16:41,910 --> 00:16:43,469
oh, proxy DLLs are awesome.

430
00:16:43,470 --> 00:16:44,730
And then leave you with like, nothing.

431
00:16:44,730 --> 00:16:45,563
We don't do that, right?

432
00:16:45,563 --> 00:16:47,970
So let's talk about how
we build two few tools.

433
00:16:47,970 --> 00:16:50,560
First off, you're told
read and dump the imports.

434
00:16:50,560 --> 00:16:52,810
I like dumpbin for a couple of reasons.

435
00:16:52,810 --> 00:16:54,810
It is by far not my favorite PE editor

436
00:16:54,810 --> 00:16:58,920
for any number of reasons,
but dumpbin on windows,

437
00:16:58,920 --> 00:17:00,569
gets installed when of
course we're talking

438
00:17:00,570 --> 00:17:02,090
about Windows or DLLs, right?

439
00:17:02,090 --> 00:17:03,490
'Cause install with Visual Studio.

440
00:17:03,490 --> 00:17:05,410
So it's a tool that I don't have to go out

441
00:17:05,410 --> 00:17:06,579
any way to get,

442
00:17:06,579 --> 00:17:09,260
because I'm using Visual
Studio as my compiler, right?

443
00:17:09,260 --> 00:17:11,810
So given that I'm using
Visual Studio as my compiler,

444
00:17:11,810 --> 00:17:14,230
knowing the dumpbin is
already there game on again,

445
00:17:14,230 --> 00:17:16,089
I don't use it for much beyond this.

446
00:17:16,089 --> 00:17:18,569
The reason I liked dumpbin
for this specifically,

447
00:17:18,569 --> 00:17:21,079
is that it dumps everything
out in text right?

448
00:17:21,079 --> 00:17:22,310
And that's really where I want it

449
00:17:22,310 --> 00:17:25,889
because rather than me
going into a GUI, right?

450
00:17:25,890 --> 00:17:30,026
And going through and copying
individually and all that.

451
00:17:30,026 --> 00:17:31,750
(mumbles) no, right?

452
00:17:31,750 --> 00:17:34,360
So, anything that I can
use from a tech standpoint

453
00:17:34,360 --> 00:17:36,580
that makes it super easy to
go in and start scripting

454
00:17:36,580 --> 00:17:38,129
some of these statements
that I need to build.

455
00:17:38,130 --> 00:17:40,180
And then of course I need
time and patience, right?

456
00:17:40,180 --> 00:17:42,500
Or some Python to help me build this out,

457
00:17:42,500 --> 00:17:44,150
or any scripting language for that matter,

458
00:17:44,150 --> 00:17:45,750
I don't have this process fully automated,

459
00:17:45,750 --> 00:17:49,080
but I'd say it's 80, 85% automated, right?

460
00:17:49,080 --> 00:17:53,240
So, as you get into to
building a proxy DLL,

461
00:17:53,240 --> 00:17:55,276
let's kinda step through
what we do here right?

462
00:17:55,276 --> 00:17:58,310
So my step one at first,
I need to use dumpbin

463
00:17:58,310 --> 00:18:01,010
any other tool that can
read the exports right?

464
00:18:01,010 --> 00:18:03,210
But what I'm doing here really is

465
00:18:03,210 --> 00:18:04,310
I'm getting away from the GUI

466
00:18:04,310 --> 00:18:06,392
and I'm going to the command
line interface, sorry.

467
00:18:06,392 --> 00:18:09,100
I used to have a joke
with people with CLI,

468
00:18:09,100 --> 00:18:10,936
I was like, "hey, what a CLI stand for?"

469
00:18:10,936 --> 00:18:12,110
And they are like 'the
Command Line Interface."

470
00:18:12,110 --> 00:18:13,850
I'm like, no, it's a cache
liner interface right?

471
00:18:13,850 --> 00:18:15,500
Because the people know how to use it,

472
00:18:15,500 --> 00:18:18,020
make a heck of a lot more cash
than those that don't, right?

473
00:18:18,020 --> 00:18:19,650
And look, when it comes down to it here,

474
00:18:19,650 --> 00:18:20,860
this is gonna help me dramatically.

475
00:18:20,860 --> 00:18:24,649
Now, technically I don't
need all of the exports.

476
00:18:24,650 --> 00:18:29,020
Technically, I only need
to know the actual exports

477
00:18:29,020 --> 00:18:32,543
that are going to be called
by my target application.

478
00:18:33,820 --> 00:18:34,653
Some people will come in and they're like,

479
00:18:34,653 --> 00:18:37,480
"well, you could run dumpbin
and just look at the imports."

480
00:18:37,480 --> 00:18:38,480
And I'm like, I could.

481
00:18:38,480 --> 00:18:40,670
Here's where I've been
burned by that in the past.

482
00:18:40,670 --> 00:18:42,930
Some because of loading,

483
00:18:42,930 --> 00:18:46,250
loading overhead, some
programs at runtime,

484
00:18:46,250 --> 00:18:48,270
particularly in like
little fringe conditions,

485
00:18:48,270 --> 00:18:49,629
user clicks the help menu.

486
00:18:49,630 --> 00:18:51,960
Suddenly they then go dynamically

487
00:18:51,960 --> 00:18:53,780
resolve a bunch of other APIs.

488
00:18:53,780 --> 00:18:55,240
And now I'm toast, right?

489
00:18:55,240 --> 00:18:57,520
For me, as far as I'm
concerned, I'm just like, look,

490
00:18:57,520 --> 00:19:01,280
I know that the legitimate msigm32.dll,

491
00:19:01,280 --> 00:19:04,500
exports the following, whatever
it is, I think it's 130,

492
00:19:04,500 --> 00:19:06,300
some odd functions on
the version of windows

493
00:19:06,300 --> 00:19:08,500
I worked out last,
something along those lines

494
00:19:08,500 --> 00:19:09,980
whatever it is, their bottom line.

495
00:19:09,980 --> 00:19:11,170
Instead of me going in and be like,

496
00:19:11,170 --> 00:19:13,840
here are the five, this
one application surgically

497
00:19:13,840 --> 00:19:14,673
and print, I'm like, forget it.

498
00:19:14,673 --> 00:19:16,860
It's 130, I just export
all of it, all right?

499
00:19:16,860 --> 00:19:19,040
My proxy, DLL export everything.

500
00:19:19,040 --> 00:19:22,250
So, it actually looks just like msimg32,

501
00:19:22,250 --> 00:19:23,610
this is future person you're right?

502
00:19:23,610 --> 00:19:24,810
The other one's super surgical.

503
00:19:24,810 --> 00:19:25,659
Don't get me wrong.

504
00:19:25,660 --> 00:19:26,890
But from a security benefit,

505
00:19:26,890 --> 00:19:29,200
there's actual error detection benefit.

506
00:19:29,200 --> 00:19:32,678
There's no benefit as it turns out

507
00:19:32,678 --> 00:19:34,380
you only hurt yourself, right?

508
00:19:34,380 --> 00:19:36,870
So don't do this bottom line
to just do all the exports

509
00:19:36,870 --> 00:19:37,703
right?

510
00:19:37,703 --> 00:19:39,430
Next thing I'm gonna do here is,

511
00:19:39,430 --> 00:19:41,570
I'm gonna copy all these
export names in the output.

512
00:19:41,570 --> 00:19:43,600
Really I only want the name
at the end of it right?

513
00:19:43,600 --> 00:19:47,010
The ordinal and the, I mean,
technically the ordinal helps,

514
00:19:47,010 --> 00:19:49,270
the ordinal for those that
don't know is basically

515
00:19:49,270 --> 00:19:52,400
the order in which these
functions are exported from.

516
00:19:52,400 --> 00:19:55,300
And I said a lot, but I
said a hundred and some odd,

517
00:19:55,300 --> 00:19:57,790
maybe that was WinMM, my apologies here.

518
00:19:57,790 --> 00:19:59,300
It looks like I've got five over here,

519
00:19:59,300 --> 00:20:01,280
but I won't swear this
is the same deal all,

520
00:20:01,280 --> 00:20:03,200
bottom line what we're doing here again,

521
00:20:03,200 --> 00:20:06,170
is we're gonna grab those there.

522
00:20:06,170 --> 00:20:07,850
And again, the name is
what I'm looking at.

523
00:20:07,850 --> 00:20:10,219
It is a rare case, an application imports

524
00:20:10,220 --> 00:20:11,990
by ordinal as a fringe case.

525
00:20:11,990 --> 00:20:15,290
I'm not gonna cover here,
but just Google ordinals,

526
00:20:15,290 --> 00:20:18,690
and importing by ordinals and
dive down that rabbit hole.

527
00:20:18,690 --> 00:20:20,570
You'll see that it's a very rare thing,

528
00:20:20,570 --> 00:20:22,800
except in Microsoft
software, Microsoft software

529
00:20:22,800 --> 00:20:24,399
and a couple of antiviruses do this.

530
00:20:24,400 --> 00:20:26,580
You're probably not
poisoning any of that right?

531
00:20:26,580 --> 00:20:28,669
It's very likely third party applications

532
00:20:28,670 --> 00:20:29,530
that you're doing this with.

533
00:20:29,530 --> 00:20:32,417
So, next thing I'm gonna
do here is I need to create

534
00:20:32,417 --> 00:20:34,080
#pragma statements for all the imports.

535
00:20:34,080 --> 00:20:35,820
Remember I said before, I do all of these,

536
00:20:35,820 --> 00:20:39,310
now you'll notice here that
what I'm doing here is that

537
00:20:39,310 --> 00:20:42,200
my DLL name in this particular example

538
00:20:42,200 --> 00:20:46,010
is msimmg32.dll right?

539
00:20:46,010 --> 00:20:47,440
So I talked about the 64 thing.

540
00:20:47,440 --> 00:20:48,850
I love doubling up a letter

541
00:20:48,850 --> 00:20:50,740
because it is really tough to see this.

542
00:20:50,740 --> 00:20:52,010
It just it's tough.

543
00:20:52,010 --> 00:20:53,900
Now, this actually, it's hard coded

544
00:20:53,900 --> 00:20:55,340
into my DLL, my proxy DLL.

545
00:20:55,340 --> 00:20:59,730
So, I lose some flexibility
on the target side,

546
00:20:59,730 --> 00:21:01,670
meaning that I can't
dynamically change the name

547
00:21:01,670 --> 00:21:03,583
without recompiling, that's
just part of the game, right?

548
00:21:03,583 --> 00:21:06,850
Just be aware of that, as
we go and you'll see here

549
00:21:06,850 --> 00:21:09,763
that I'm telling the
linker, basically go export,

550
00:21:12,610 --> 00:21:14,560
this basically that I've got an export.

551
00:21:15,587 --> 00:21:16,956
And I wanna make sure that I've got this

552
00:21:16,956 --> 00:21:18,530
named appropriately.

553
00:21:18,530 --> 00:21:21,500
And it's saying, "hey, when
this export gets called,"

554
00:21:21,500 --> 00:21:25,660
basically then you wanna go
over and basically pass that off

555
00:21:25,660 --> 00:21:29,600
to msimmg32.dll, right?

556
00:21:29,600 --> 00:21:31,270
Okay, so got that.

557
00:21:31,270 --> 00:21:33,870
And then all I'm gonna do is
take those #pragma statements

558
00:21:33,870 --> 00:21:36,469
and copy those into a DLL
project in Visual Studio.

559
00:21:36,470 --> 00:21:38,850
Now, if you're not familiar
with coding in Visual Studio,

560
00:21:38,850 --> 00:21:40,760
this is actually something that came up,

561
00:21:40,760 --> 00:21:43,647
as we were kinda bouncing
through this talk

562
00:21:43,647 --> 00:21:44,939
and what level are we gonna give the talk?

563
00:21:44,940 --> 00:21:47,507
And some folks are like,
"man we should totally show

564
00:21:47,507 --> 00:21:50,927
"some code over here and
how to go build the payload

565
00:21:50,927 --> 00:21:52,139
"that goes along with this."

566
00:21:52,140 --> 00:21:53,490
I'm just gonna go out and tell you, like,

567
00:21:53,490 --> 00:21:55,170
I want to demonstrate this technique.

568
00:21:55,170 --> 00:21:57,418
And sometimes again, you may not need

569
00:21:57,418 --> 00:22:02,418
the full code execution piece
to show the vulnerability,

570
00:22:02,530 --> 00:22:05,850
you can cause an app to
crash with this very easily,

571
00:22:05,850 --> 00:22:06,852
without writing the code in this right?

572
00:22:06,853 --> 00:22:09,270
What do you use for a payload though?

573
00:22:09,270 --> 00:22:11,200
Look, your payload goes into DLLMain.

574
00:22:11,200 --> 00:22:13,191
You can get one of those out of MSFvenom,

575
00:22:13,191 --> 00:22:14,910
and Metaspoilt, obvious
that's gonna get caught

576
00:22:14,910 --> 00:22:17,430
immediately by any
virus, but hey, whatever,

577
00:22:17,430 --> 00:22:18,423
or write your own payload, right?

578
00:22:18,423 --> 00:22:20,440
When it comes down to this
isn't about the payload.

579
00:22:20,440 --> 00:22:22,580
This is about getting
the payload into memory

580
00:22:22,580 --> 00:22:24,810
and executing in the first place, right?

581
00:22:24,810 --> 00:22:29,110
So, as far as custom
payloads, in many cases,

582
00:22:29,110 --> 00:22:30,350
I'll tell you most cases for me,

583
00:22:30,350 --> 00:22:32,240
I go inject into another process, right?

584
00:22:32,240 --> 00:22:33,300
And the reason I'm doing that

585
00:22:33,300 --> 00:22:36,139
is just for your own notification.

586
00:22:36,140 --> 00:22:38,930
The reason I always will
inject into a remote processes,

587
00:22:38,930 --> 00:22:41,540
that if the process I
gained execution with dies,

588
00:22:41,540 --> 00:22:43,600
or is killed by the user, many cases,

589
00:22:43,600 --> 00:22:45,110
I'm not progressing with this.

590
00:22:45,110 --> 00:22:47,040
Again, I'm maintaining
persistence with the user.

591
00:22:47,040 --> 00:22:49,603
Let's say it's with WebEx and
they click to close WebEx.

592
00:22:49,603 --> 00:22:50,910
Why, I'm toast, right?

593
00:22:50,910 --> 00:22:53,640
I wannna make sure that I
can inject somewhere else

594
00:22:53,640 --> 00:22:56,500
and explore their desktop is a
great place to do that right?

595
00:22:56,500 --> 00:22:57,360
'Cause when they log off,

596
00:22:57,360 --> 00:22:59,379
I'm gonna lose that context anyway.

597
00:22:59,380 --> 00:23:02,080
But explore the desktop is
there until they log off.

598
00:23:02,080 --> 00:23:05,560
So, I love all, I'm all about
the survivability, right?

599
00:23:05,560 --> 00:23:07,240
So RSA has a big thing we're like,

600
00:23:07,240 --> 00:23:09,380
hey, gotta show how to apply this, right?

601
00:23:09,380 --> 00:23:10,930
So how do you apply what
you've learned today?

602
00:23:10,930 --> 00:23:12,330
Well, I have to apply at slides, right?

603
00:23:12,330 --> 00:23:15,560
Because this talk really
speaks to, I think,

604
00:23:15,560 --> 00:23:19,580
I hope both red teamers
and blue teamers, right?

605
00:23:19,580 --> 00:23:20,699
If you're a red teamer,

606
00:23:20,700 --> 00:23:22,770
I hope that you've either
learned something today

607
00:23:22,770 --> 00:23:24,930
on reinforcing some ideas around

608
00:23:24,930 --> 00:23:27,170
how to gain that persistence,

609
00:23:27,170 --> 00:23:28,413
and beat the blue teamer at their game.

610
00:23:28,413 --> 00:23:30,100
Well I'll tell you a
lot of the blue teamers

611
00:23:30,100 --> 00:23:32,280
are looking for autoruns
and they're looking

612
00:23:32,280 --> 00:23:35,290
using that frequency of
least occurrence, right?

613
00:23:35,290 --> 00:23:38,409
And saying, "hey, where are
my deviations from baseline?"

614
00:23:38,410 --> 00:23:39,480
Right?

615
00:23:39,480 --> 00:23:40,313
"Where do I have something extra?"

616
00:23:40,313 --> 00:23:41,680
This is a way to beat that right?

617
00:23:41,680 --> 00:23:44,220
So from red team standpoint,
what do you wanna do?

618
00:23:44,220 --> 00:23:45,620
You wanna go examine the software

619
00:23:45,620 --> 00:23:48,280
load it on your
organization's golden images,

620
00:23:48,280 --> 00:23:49,560
and you wanna go look for software

621
00:23:49,560 --> 00:23:51,020
that starts with elevated privileges.

622
00:23:51,020 --> 00:23:53,680
I prefer digitally sign in
case whitelisting controls

623
00:23:53,680 --> 00:23:55,330
are in place, right?

624
00:23:55,330 --> 00:23:57,780
And so that generally wins me,

625
00:23:57,780 --> 00:24:00,490
or gives me a little bit
of extra AB heuristic

626
00:24:00,490 --> 00:24:01,710
bypass as well.

627
00:24:01,710 --> 00:24:02,820
I'm a big fan of that.

628
00:24:02,820 --> 00:24:04,909
And then I wanna determine
if the software packages

629
00:24:04,910 --> 00:24:08,340
allow for unprivileged users
to add files to the directory.

630
00:24:08,340 --> 00:24:10,590
Look, if they can, it's a great candidate

631
00:24:10,590 --> 00:24:11,540
for privilege escalation.

632
00:24:11,540 --> 00:24:14,550
Otherwise it's just good
for whitelist bypass.

633
00:24:14,550 --> 00:24:15,810
One thing that I wanna figure out here,

634
00:24:15,810 --> 00:24:18,530
as we talk about this is
the difference between

635
00:24:18,530 --> 00:24:20,750
looking at autoruns on the system,

636
00:24:20,750 --> 00:24:22,600
versus the autoruns for the user

637
00:24:22,600 --> 00:24:24,480
that you just exploited, right?

638
00:24:24,480 --> 00:24:27,500
And I'll tell you that from
a privilege escalation side,

639
00:24:27,500 --> 00:24:29,550
I wanna be on the system, right?

640
00:24:29,550 --> 00:24:31,030
But from just a persistent side,

641
00:24:31,030 --> 00:24:32,476
I generally wanna be on the user, right?

642
00:24:32,477 --> 00:24:34,540
And so again, if I've
got privilege escalation,

643
00:24:34,540 --> 00:24:36,120
I've got that plus persistence right?

644
00:24:36,120 --> 00:24:38,550
But again, in the cases
where I don't have that,

645
00:24:38,550 --> 00:24:40,360
I wanna make sure that I take a look

646
00:24:40,360 --> 00:24:42,020
at the user's autoruns as well.

647
00:24:42,020 --> 00:24:43,820
These are gonna be stored
in the users into user

648
00:24:43,820 --> 00:24:44,780
about that hive.

649
00:24:44,780 --> 00:24:47,470
And a run runtime, like, let's
say, just fished onto a box.

650
00:24:47,470 --> 00:24:50,260
You're looking at the HQ current user hive

651
00:24:50,260 --> 00:24:52,360
as you do your queries, right?

652
00:24:52,360 --> 00:24:54,530
Okay, let's come back to blue team, right?

653
00:24:54,530 --> 00:24:56,100
Because I'm gonna tell ya,

654
00:24:56,100 --> 00:24:58,010
I've been on both sides
of the keyboard, right?

655
00:24:58,010 --> 00:25:00,560
Most folks know my bio here.

656
00:25:00,560 --> 00:25:02,370
I've definitely been
on the offensive side,

657
00:25:02,370 --> 00:25:04,010
and today I do more instead of response

658
00:25:04,010 --> 00:25:04,870
than anything else right?

659
00:25:04,870 --> 00:25:07,409
So, blue team and defensive
security practitioners.

660
00:25:07,410 --> 00:25:09,420
Let me go ahead and tell
ya, this is hard to detect.

661
00:25:09,420 --> 00:25:12,450
It's hard to detect, and it's
hard to defend against, right?

662
00:25:12,450 --> 00:25:14,920
I'll tell ya, that follow
the red team's slides,

663
00:25:14,920 --> 00:25:17,210
and go out and assess.

664
00:25:17,210 --> 00:25:18,790
I mean, if the red team
is doing the right job

665
00:25:18,790 --> 00:25:20,710
and they're reporting well
to you in the first place,

666
00:25:20,710 --> 00:25:22,860
this stuff is getting identified
and it's getting fixed,

667
00:25:22,860 --> 00:25:24,320
but let's assume for a
minute, it's not right?

668
00:25:24,320 --> 00:25:25,427
Because you can't just say,

669
00:25:25,427 --> 00:25:26,776
"hey, the red team's got it, cool.

670
00:25:26,777 --> 00:25:29,680
"We're good," what does
that even mean, right?

671
00:25:29,680 --> 00:25:33,380
And so, engage them to
do it with you, right?

672
00:25:33,380 --> 00:25:36,650
One, you're gonna learn a lot
and two, you can make sure

673
00:25:36,650 --> 00:25:38,200
and kinda audit the work there, right?

674
00:25:38,200 --> 00:25:41,950
'Cause, particularly if there's
other low hanging fruit,

675
00:25:41,950 --> 00:25:42,988
right?

676
00:25:42,988 --> 00:25:45,130
This is a spot where I
wanna use the red team

677
00:25:45,130 --> 00:25:46,130
collaboratively.

678
00:25:46,130 --> 00:25:48,780
When examining my tooling,
can I detect an abnormal DLL

679
00:25:48,780 --> 00:25:50,290
loaded into a legitimate process?

680
00:25:50,290 --> 00:25:52,010
Because I'm gonna tell
you a lot of them can't,

681
00:25:52,010 --> 00:25:53,430
a lot of your tools can't.

682
00:25:53,430 --> 00:25:55,370
Now, I'll tell you that
there is a great tool

683
00:25:55,370 --> 00:25:58,729
from SysInternals now owned
by Microsoft called DLLlist,

684
00:25:58,730 --> 00:25:59,563
right?

685
00:25:59,563 --> 00:26:01,920
And it can look for DLLs
and tell you whether or not

686
00:26:01,920 --> 00:26:03,770
they're digitally sign,
show you the full path

687
00:26:03,770 --> 00:26:06,790
for those DLLs and start
looking for those outliers.

688
00:26:06,790 --> 00:26:08,379
Determine whether all signed binaries,

689
00:26:08,380 --> 00:26:10,110
it should be allowed
to load per application

690
00:26:10,110 --> 00:26:11,310
whitelisting rules, right?

691
00:26:11,310 --> 00:26:13,320
In most cases, the answer to this is no,

692
00:26:13,320 --> 00:26:15,550
but hey, I mean, this is
another big one for you

693
00:26:15,550 --> 00:26:17,350
if you're implementing
whitelisting in the first place,

694
00:26:17,350 --> 00:26:19,000
what does that look like?

695
00:26:19,000 --> 00:26:21,110
And then finally an
examine EDR capabilities

696
00:26:21,110 --> 00:26:23,280
and determine if the
rules can be structured

697
00:26:23,280 --> 00:26:25,830
to detect abnormal DLL loads.

698
00:26:25,830 --> 00:26:27,939
I'm gonna tell you this is
a very heavy lift, right?

699
00:26:27,940 --> 00:26:30,750
Because it's one thing to say,
we baseline the application,

700
00:26:30,750 --> 00:26:33,300
but I use Microsoft word as my examples.

701
00:26:33,300 --> 00:26:35,970
Did you know that Microsoft
Word can actually go in

702
00:26:35,970 --> 00:26:37,450
and play embedded videos?

703
00:26:37,450 --> 00:26:39,540
There's a whole browser
embedded inside a Word.

704
00:26:39,540 --> 00:26:41,520
I mean, like you look
at these extra features

705
00:26:41,520 --> 00:26:44,040
like who precisely needed this, right?

706
00:26:44,040 --> 00:26:45,750
And the answer is why I
don't wanna say nobody

707
00:26:45,750 --> 00:26:47,440
clearly somebody at some time did.

708
00:26:47,440 --> 00:26:50,130
The problem is I baseline
Word when none of that stuff

709
00:26:50,130 --> 00:26:54,030
is running and I get an entirely
different one-time profile.

710
00:26:54,030 --> 00:26:55,710
Then when somebody sends me a document

711
00:26:55,710 --> 00:26:59,550
with these weird embedded
videos in it, yeah.

712
00:26:59,550 --> 00:27:01,310
Anyway, the bottom line there is

713
00:27:01,310 --> 00:27:03,260
that it's very, very
difficult to do this, right?

714
00:27:03,260 --> 00:27:05,480
So just bear in mind
there, that's a thing.

715
00:27:05,480 --> 00:27:08,400
I'm more about hunt for my
DLLs in the first place.

716
00:27:08,400 --> 00:27:09,500
Wanna close my thoughts here,

717
00:27:09,500 --> 00:27:11,500
or give a couple of
closing thoughts and say

718
00:27:11,500 --> 00:27:13,890
proxy DLLs have been used,
their persistence method

719
00:27:13,890 --> 00:27:15,590
in advanced attacks for years,

720
00:27:15,590 --> 00:27:17,500
we're having a big OST tooling debate,

721
00:27:17,500 --> 00:27:21,470
offensive security tool
debate in the public right now

722
00:27:21,470 --> 00:27:24,360
about hey, should we be
talking about this stuff,

723
00:27:24,360 --> 00:27:25,409
for an offensive side or not,

724
00:27:25,410 --> 00:27:26,900
we giving something to the attackers,

725
00:27:26,900 --> 00:27:27,800
my friends, let me tell you,

726
00:27:27,800 --> 00:27:29,669
we're not giving anything to
the attackers here, right?

727
00:27:29,670 --> 00:27:32,800
I've seen several different
nation states using this.

728
00:27:32,800 --> 00:27:35,010
At least I would say
all of the big players,

729
00:27:35,010 --> 00:27:36,060
all of the names we know,

730
00:27:36,060 --> 00:27:39,389
and there's no reason to tick-off
another government again,

731
00:27:39,390 --> 00:27:40,600
by mentioning those names,

732
00:27:40,600 --> 00:27:42,409
but game on, we'll just
go ahead and say that.

733
00:27:42,410 --> 00:27:43,980
I'll say the biggest
tooling is getting better.

734
00:27:43,980 --> 00:27:46,480
We're likely to see an
increase in this technique.

735
00:27:46,480 --> 00:27:48,260
I talked about easy it is to see autoruns.

736
00:27:48,260 --> 00:27:49,903
EDR is changing the game on that, right?

737
00:27:49,903 --> 00:27:53,890
Your EDR can probably show
you very quickly the outliers,

738
00:27:53,890 --> 00:27:56,278
something that took manual analysis,

739
00:27:56,278 --> 00:27:58,190
a while back, right?

740
00:27:58,190 --> 00:28:01,690
And so, I expect attackers
to continue to use this more.

741
00:28:01,690 --> 00:28:03,040
We're seeing it,

742
00:28:03,040 --> 00:28:06,850
I would say not with great
frequency and arms and response,

743
00:28:06,850 --> 00:28:09,189
but not with no frequency audit.

744
00:28:09,190 --> 00:28:10,940
And then I'll finally mention here

745
00:28:10,940 --> 00:28:12,620
that if you haven't seen these yet,

746
00:28:12,620 --> 00:28:14,419
I don't wanna tell you it's
because you're blind to it,

747
00:28:14,420 --> 00:28:18,040
but, but, it's probably
because the attackers

748
00:28:18,040 --> 00:28:20,740
are able to maintain persistence
using easier methods.

749
00:28:20,740 --> 00:28:22,400
We have worked repeated incidents

750
00:28:22,400 --> 00:28:24,220
where hackers have navigated

751
00:28:24,220 --> 00:28:26,920
these business to business links B2B VPNs.

752
00:28:26,920 --> 00:28:30,030
And we see changes in
the attacker profile,

753
00:28:30,030 --> 00:28:31,490
between different organizations.

754
00:28:31,490 --> 00:28:32,730
They compromise this with,

755
00:28:32,730 --> 00:28:34,870
based on what your security
profile looks like.

756
00:28:34,870 --> 00:28:37,939
They won't expose their top
tier tools unless they have to.

757
00:28:37,940 --> 00:28:39,190
So what I'm gonna throw out here and say,

758
00:28:39,190 --> 00:28:40,430
is if you're sitting here a poopoo

759
00:28:40,430 --> 00:28:42,157
and this is a blue teamer and saying,

760
00:28:42,157 --> 00:28:44,020
"wow, never seen that before."

761
00:28:44,020 --> 00:28:46,010
I just wanna close here
and say my friends,

762
00:28:46,010 --> 00:28:47,320
maybe there's a reason.

763
00:28:47,320 --> 00:28:48,399
Thank you so much for your time.

764
00:28:48,400 --> 00:28:51,710
Thank you for all the
sponsors for RSA APAC,

765
00:28:51,710 --> 00:28:53,750
and thanks to RSA for happening.

766
00:28:53,750 --> 00:28:54,610
It's been a great time.

767
00:28:54,610 --> 00:28:55,443
Thanks folks.

