1
00:00:11,180 --> 00:00:14,900
- Hello and welcome to PKI Well Revised.

2
00:00:14,900 --> 00:00:18,580
Common Mistakes Which Lead to
Huge Compromise of Identity.

3
00:00:18,580 --> 00:00:19,610
If you are joining us live,

4
00:00:19,610 --> 00:00:21,730
our speaker is in this
slider discussion now

5
00:00:21,730 --> 00:00:23,490
answering your questions.

6
00:00:23,490 --> 00:00:25,110
For audio and video issues,

7
00:00:25,110 --> 00:00:28,360
please click the technical
support button below.

8
00:00:28,360 --> 00:00:32,379
I'd now like to turn it
over to Mike Jankowski Lorek

9
00:00:32,380 --> 00:00:33,513
for the presentation.

10
00:00:36,500 --> 00:00:39,040
- Hi, I'm Dr. Mike Jankowski Lorek

11
00:00:39,040 --> 00:00:42,269
and I'm director of consulting
and cybersecurity expert

12
00:00:42,270 --> 00:00:43,900
working for CQURE.

13
00:00:43,900 --> 00:00:47,007
I'm also perpetration
tester and consultant

14
00:00:47,008 --> 00:00:49,690
working with Windows and
CQURE infrastructure design

15
00:00:49,690 --> 00:00:51,280
all over the world.

16
00:00:51,280 --> 00:00:55,540
Today, I will focus on
public key infrastructure

17
00:00:55,540 --> 00:00:57,640
and common mistakes which may lead

18
00:00:57,640 --> 00:01:01,670
to huge compromise of identity.

19
00:01:01,670 --> 00:01:02,890
Let's start with the agenda.

20
00:01:02,890 --> 00:01:05,300
First, it will be cryptography one to one,

21
00:01:05,300 --> 00:01:08,039
basis of the cryptography
and the times necessary

22
00:01:08,040 --> 00:01:11,730
to fully understand attacks
and the live hacking demo

23
00:01:11,730 --> 00:01:13,580
which I have prepared for you.

24
00:01:13,580 --> 00:01:17,260
Next, why we want to have
that and use that PKI.

25
00:01:17,260 --> 00:01:19,830
And we will finish with the intense demo

26
00:01:19,830 --> 00:01:23,929
in which you see how
common mistakes in PKI,

27
00:01:23,930 --> 00:01:27,990
implementation can allow for
escalation to domain audits.

28
00:01:27,990 --> 00:01:30,369
But let me tell you a story first.

29
00:01:30,370 --> 00:01:33,670
Couple of years ago, I was
traveling with my beloved wife

30
00:01:33,670 --> 00:01:37,800
in USA, California to the
deserts of the Joshua Tree Park.

31
00:01:37,800 --> 00:01:40,860
On the map, there was marked goldmine.

32
00:01:40,860 --> 00:01:43,420
And of course my romantic side kicked in

33
00:01:43,420 --> 00:01:46,430
and I got the vision of
beautiful preserved goldmine

34
00:01:46,430 --> 00:01:48,560
in wide wide west style.

35
00:01:48,560 --> 00:01:51,540
So the one that you can see on Instagram

36
00:01:51,540 --> 00:01:53,360
or in the Hollywood movies.

37
00:01:53,360 --> 00:01:57,100
So we decided to go on the off road,

38
00:01:57,100 --> 00:02:01,759
and I was driving a small
Jeep on a very rough road.

39
00:02:01,760 --> 00:02:05,360
But it was an off road, it
was an adventure of course.

40
00:02:05,360 --> 00:02:08,800
No one on the desert except us.

41
00:02:08,800 --> 00:02:10,590
No cell phone reception,

42
00:02:10,590 --> 00:02:14,356
so I was just hoping that
the car will not break down

43
00:02:14,356 --> 00:02:17,972
or we will be strangled in the
middle of nowhere absolutely.

44
00:02:19,195 --> 00:02:22,340
After around six miles,
the road has ended,

45
00:02:22,340 --> 00:02:23,740
there was nothing there.

46
00:02:23,740 --> 00:02:25,419
We couldn't see an entrance

47
00:02:25,419 --> 00:02:29,410
and just the peel or whatever it was

48
00:02:30,320 --> 00:02:32,763
and there was one thing.

49
00:02:33,701 --> 00:02:36,570
There was a hole in the
ground looking very similar

50
00:02:36,570 --> 00:02:38,609
to this what you can see right now.

51
00:02:38,610 --> 00:02:42,200
Of course, I could check
before going on this journey

52
00:02:42,200 --> 00:02:47,200
if my vision of gold mine is
really what there will be.

53
00:02:49,000 --> 00:02:52,950
But as you say, all that
glitters is not a gold.

54
00:02:52,950 --> 00:02:54,850
The same is with PKI.

55
00:02:54,850 --> 00:02:57,170
It should be used for
increasing the security

56
00:02:57,170 --> 00:03:02,170
but if we don't check it, if
we do not secure it properly,

57
00:03:02,180 --> 00:03:06,400
then it can be used for
attacking your infrastructure

58
00:03:06,400 --> 00:03:08,390
and compromising completely
your organization

59
00:03:08,390 --> 00:03:09,290
and data security.

60
00:03:10,300 --> 00:03:13,040
And let's see how it's going to be done.

61
00:03:13,040 --> 00:03:16,606
First, let's go with the
other bit of cryptography,

62
00:03:16,606 --> 00:03:18,799
just a little bit to fully understand

63
00:03:18,800 --> 00:03:21,252
what we are talking here about.

64
00:03:21,252 --> 00:03:24,100
So the basic concepts, encoding.

65
00:03:24,100 --> 00:03:26,650
The purpose of encoding
is to transform the data

66
00:03:26,650 --> 00:03:28,820
so that it can be properly consumed

67
00:03:28,820 --> 00:03:31,220
by the different types of the system.

68
00:03:31,220 --> 00:03:35,390
The goal is not to keep
the information secret,

69
00:03:35,390 --> 00:03:37,049
but rather to ensure that it is able

70
00:03:37,050 --> 00:03:38,533
to be consumed properly.

71
00:03:39,410 --> 00:03:41,020
Examples are seen in coding,

72
00:03:41,020 --> 00:03:44,140
Unicode to URL encoding based 64.

73
00:03:44,140 --> 00:03:46,089
Encryption is on the other hand,

74
00:03:46,090 --> 00:03:48,690
it's maintaining the data confidentiality

75
00:03:48,690 --> 00:03:52,040
and requiring the use of the key

76
00:03:52,040 --> 00:03:54,840
for encryption and decryption.

77
00:03:54,840 --> 00:03:58,033
So to transfer it from the
clear text to the cipher text.

78
00:03:59,010 --> 00:04:04,010
We are focusing here on only
permitting selected users

79
00:04:04,760 --> 00:04:09,120
or selected identities to see
the content of the messages.

80
00:04:09,120 --> 00:04:10,320
For example, we have advanced

81
00:04:10,320 --> 00:04:12,589
encryption standard or address.

82
00:04:12,589 --> 00:04:13,422
Advanced encryption standard

83
00:04:13,422 --> 00:04:15,740
is using this symmetric cryptography.

84
00:04:15,740 --> 00:04:17,910
We just really are using the same key

85
00:04:17,910 --> 00:04:19,903
for encryption and for the decryption.

86
00:04:20,839 --> 00:04:24,820
But when we are using RSI,
we have a pair of their keys.

87
00:04:24,820 --> 00:04:28,150
So the key number one and the second one,

88
00:04:28,150 --> 00:04:30,419
I'll generate it at the same time

89
00:04:30,420 --> 00:04:32,650
and if you see only one of those keys,

90
00:04:32,650 --> 00:04:36,500
you cannot create or
regenerate the second one.

91
00:04:36,500 --> 00:04:39,640
So when we do the encryption
with the first key,

92
00:04:39,640 --> 00:04:42,110
the second one is used for the decryption.

93
00:04:42,110 --> 00:04:45,120
But we can do this other way around,

94
00:04:45,120 --> 00:04:47,820
like use the second key for encryption

95
00:04:47,820 --> 00:04:49,384
and then the first one will be used

96
00:04:49,384 --> 00:04:52,010
for the decryption of it.

97
00:04:52,010 --> 00:04:55,620
And of course, we can make
one of those keys public.

98
00:04:55,620 --> 00:04:57,467
Then of course, if you
choose or have chosen one

99
00:04:57,467 --> 00:04:59,919
of the those keys as a public one,

100
00:04:59,920 --> 00:05:04,210
definitely use the second one
as a very, very private one

101
00:05:04,210 --> 00:05:05,363
and storage security.

102
00:05:06,350 --> 00:05:10,150
Other concepts are hashing when we have,

103
00:05:10,150 --> 00:05:12,060
in general, the purpose of hashing

104
00:05:12,060 --> 00:05:13,960
is to ensure integrity of the messages.

105
00:05:13,960 --> 00:05:17,099
So we can easily check if
the message was changed

106
00:05:17,100 --> 00:05:22,090
and if someone is making some
misuse on our network maybe,

107
00:05:22,090 --> 00:05:24,760
and we are using the for example,

108
00:05:24,760 --> 00:05:27,332
MD5, SHA-1, SHA-256 for this.

109
00:05:28,320 --> 00:05:31,719
Important thing is that the
hashing is one-way function.

110
00:05:31,720 --> 00:05:33,500
So from the message, we can get the hash,

111
00:05:33,500 --> 00:05:35,913
but not other way around, it's impossible.

112
00:05:36,900 --> 00:05:38,950
And finally, the sign.

113
00:05:38,950 --> 00:05:40,450
It's quite important concept

114
00:05:40,450 --> 00:05:42,719
especially for the authentication.

115
00:05:42,720 --> 00:05:46,240
It's proving who is the
outer of the message, okay?

116
00:05:46,240 --> 00:05:48,210
How we do that, we calculate the hash

117
00:05:48,210 --> 00:05:50,760
and we encrypt it with
something that we only know.

118
00:05:50,760 --> 00:05:52,810
So the private key is used of that.

119
00:05:52,810 --> 00:05:57,140
Signature I go with, for
example, it's SHA-256 RSA.

120
00:05:57,140 --> 00:05:59,240
So what is the major problem

121
00:05:59,240 --> 00:06:03,330
of an insecure
communication or signatures?

122
00:06:03,330 --> 00:06:05,979
It's how we associate the keys

123
00:06:05,980 --> 00:06:10,330
with the identity of the user,
machine, service, et cetera.

124
00:06:10,330 --> 00:06:12,599
So this is when the certificates

125
00:06:12,600 --> 00:06:15,967
and the PTI is coming for the rescue.

126
00:06:15,967 --> 00:06:18,729
Public key certificate or
also digital certificate

127
00:06:18,729 --> 00:06:21,099
or identity certificate
is an electronic document

128
00:06:21,100 --> 00:06:23,573
used to prove the ownership
of the public key.

129
00:06:24,500 --> 00:06:27,740
The certificates include
information about the key,

130
00:06:27,740 --> 00:06:32,720
about the identity, and
also has a digital signature

131
00:06:32,720 --> 00:06:35,180
of an entity that has verified

132
00:06:35,180 --> 00:06:39,833
the content of the certificate,
and it's called issuer.

133
00:06:41,050 --> 00:06:43,100
So even the signature is valid

134
00:06:43,100 --> 00:06:45,930
and we trust that issuer
out of the certificate,

135
00:06:45,930 --> 00:06:48,080
then we can know that the subject

136
00:06:48,080 --> 00:06:49,832
and the public key are matching.

137
00:06:50,840 --> 00:06:53,770
In cryptography, we use
for X.509, the standard

138
00:06:54,620 --> 00:06:56,740
for the following defining the format

139
00:06:56,740 --> 00:06:59,993
of the public key and identity.

140
00:07:01,200 --> 00:07:05,840
One of the optimum properties
of this is X.509 standard

141
00:07:05,840 --> 00:07:07,299
is extended key usage.

142
00:07:07,300 --> 00:07:08,990
It tells us for which purposes

143
00:07:08,990 --> 00:07:10,640
we can you use the certificate.

144
00:07:10,640 --> 00:07:14,219
So for example, server
security or email protection,

145
00:07:14,220 --> 00:07:17,200
code signing, and we should not be able

146
00:07:17,200 --> 00:07:20,260
to use the certificate,
which is used for one purpose

147
00:07:20,260 --> 00:07:23,310
or issued for one purpose
to use it with application

148
00:07:23,310 --> 00:07:25,070
that need another one.

149
00:07:25,070 --> 00:07:26,293
Very important thing

150
00:07:26,293 --> 00:07:28,850
is the Certificate Signing Request, CSR.

151
00:07:28,850 --> 00:07:32,650
It's a message sent from an applicant

152
00:07:32,650 --> 00:07:35,602
to request for the digital certificate.

153
00:07:36,440 --> 00:07:40,560
And of course, inside of
it, we have a subject.

154
00:07:40,560 --> 00:07:41,393
That does well

155
00:07:41,393 --> 00:07:43,940
for what purpose we want
to use this certificate.

156
00:07:43,940 --> 00:07:45,337
Also, there is a publicly,

157
00:07:45,337 --> 00:07:48,599
then this is signed by the
certification authority

158
00:07:48,600 --> 00:07:50,300
to issue that digital certificate.

159
00:07:51,190 --> 00:07:53,560
So CA acts as a trusted third-party,

160
00:07:53,560 --> 00:07:57,620
trusted by both the client and the server.

161
00:07:57,620 --> 00:07:59,620
And if it's trusted by both,

162
00:07:59,620 --> 00:08:04,620
we can ensure that the key
belongs really to the subject.

163
00:08:05,040 --> 00:08:07,540
Then based on this, we
can perform authentication

164
00:08:07,540 --> 00:08:10,569
or the secure communication.

165
00:08:10,569 --> 00:08:12,930
Certification Authority
is publishing the CPS,

166
00:08:12,930 --> 00:08:14,380
the legal document that describes

167
00:08:14,380 --> 00:08:15,640
how the certification authority

168
00:08:15,640 --> 00:08:17,360
manage the certificates and issues.

169
00:08:17,360 --> 00:08:18,800
Based on this, we are really trusting

170
00:08:18,800 --> 00:08:22,940
or not trusting certification authorities.

171
00:08:22,940 --> 00:08:24,160
We also need to remember

172
00:08:24,160 --> 00:08:26,260
that there are certificate
revocation at least

173
00:08:26,260 --> 00:08:28,349
and online certificates stuff protocol

174
00:08:28,350 --> 00:08:30,640
which allows us to invite the certificate,

175
00:08:30,640 --> 00:08:32,929
if it's become, the private key

176
00:08:32,929 --> 00:08:35,370
become compromised for example.

177
00:08:35,370 --> 00:08:38,950
Also, there is a certificate transparency

178
00:08:38,950 --> 00:08:42,260
which is the system
collecting all information

179
00:08:42,260 --> 00:08:46,700
about all the logs that we
have issued the certificates

180
00:08:47,590 --> 00:08:49,740
to be able to browse through those logs

181
00:08:49,740 --> 00:08:54,740
and to find if someone is
using malicious certificates

182
00:08:55,280 --> 00:08:57,833
or is requesting for the
malicious certificates.

183
00:08:59,620 --> 00:09:03,220
We must remember that
there are trust lists.

184
00:09:03,220 --> 00:09:07,060
And one of the most important
trust lists for the root CAS

185
00:09:07,060 --> 00:09:11,040
is the trusted root
certification authority list.

186
00:09:11,040 --> 00:09:12,829
Every system that tests, for example,

187
00:09:12,830 --> 00:09:16,400
Windows Server or Windows 10
contains the predefined list

188
00:09:16,400 --> 00:09:20,360
of that certification
authorities that Microsoft trust.

189
00:09:20,360 --> 00:09:22,240
Different applications
use different lists.

190
00:09:22,240 --> 00:09:24,010
For example, for Mozilla Firefox,

191
00:09:24,010 --> 00:09:26,520
we'll be using a
completely different list.

192
00:09:26,520 --> 00:09:29,300
Of course, it's a containing as well

193
00:09:29,300 --> 00:09:32,109
many common trust sets with CAS,

194
00:09:32,110 --> 00:09:35,670
but if something is added to the list,

195
00:09:35,670 --> 00:09:37,930
we are trusting all the certificates

196
00:09:37,930 --> 00:09:41,319
which will be changing
back to the top one.

197
00:09:41,320 --> 00:09:42,980
So the one that we are trusting.

198
00:09:42,980 --> 00:09:44,220
Because if we trust someone,

199
00:09:44,220 --> 00:09:46,460
then another person trust another person,

200
00:09:46,460 --> 00:09:48,393
then we find building this chain.

201
00:09:49,850 --> 00:09:51,760
And when we have two organizations,

202
00:09:51,760 --> 00:09:54,220
you need to remember that they can as well

203
00:09:54,220 --> 00:09:56,060
exchange the certificates,

204
00:09:56,060 --> 00:10:00,369
and create this trust between
two different organizations,

205
00:10:00,370 --> 00:10:02,670
even if they aren't just
a private components,

206
00:10:02,670 --> 00:10:05,750
not related to the
publicly trusted root CAs.

207
00:10:05,750 --> 00:10:07,560
So how they can do that?

208
00:10:07,560 --> 00:10:09,880
The simplest solution would
be to just take a certificate

209
00:10:09,880 --> 00:10:13,439
of a second component and
put it as a trusted root CA.

210
00:10:13,440 --> 00:10:16,860
Okay, but then we trust
absolutely ever certificate,

211
00:10:16,860 --> 00:10:19,650
which means that they
can issue a certificate

212
00:10:19,650 --> 00:10:24,650
that will be having the subject
as an email of your CEO,

213
00:10:26,740 --> 00:10:28,790
which then can be used for encrypting,

214
00:10:28,790 --> 00:10:31,050
consigning the emails that you will trust.

215
00:10:31,050 --> 00:10:32,370
That would be problematic.

216
00:10:32,370 --> 00:10:37,370
So instead of that, we can
use then cross certification

217
00:10:38,940 --> 00:10:40,990
and you should specialize on
what kinds of certificates

218
00:10:40,990 --> 00:10:44,220
which will restrict to only the names

219
00:10:44,220 --> 00:10:47,890
that the other company has.

220
00:10:47,890 --> 00:10:50,620
So for example, DNS
suffix, or email suffix,

221
00:10:50,620 --> 00:10:54,990
everything we want is after
the at sign in the email.

222
00:10:54,990 --> 00:10:59,960
This is extremely important
not to trust, not the root CA

223
00:10:59,960 --> 00:11:01,933
if we are really not
trusting all the certificates

224
00:11:01,933 --> 00:11:03,883
that will be issued by them.

225
00:11:04,750 --> 00:11:06,890
So why we are really using the PKI?

226
00:11:06,890 --> 00:11:08,800
What is benefits of it?

227
00:11:08,800 --> 00:11:11,160
The basic is the server authentication.

228
00:11:11,160 --> 00:11:13,630
And this is absolutely all
the time when we are using it.

229
00:11:13,630 --> 00:11:14,540
For example, right now.

230
00:11:14,540 --> 00:11:17,310
You are on the webpage, going to the HTTPS

231
00:11:17,310 --> 00:11:19,290
and there is a TLS

232
00:11:19,290 --> 00:11:21,839
that is presenting as
well the certificate.

233
00:11:21,840 --> 00:11:24,890
Client authentication, then
we are using our certificate

234
00:11:24,890 --> 00:11:26,770
to prove to the web server who we are,

235
00:11:26,770 --> 00:11:29,340
or for example, authenticate
to some applications.

236
00:11:29,340 --> 00:11:32,410
A little bit more advanced
solutions are smart card logon

237
00:11:32,410 --> 00:11:34,303
or Windows Hello for Business.

238
00:11:35,170 --> 00:11:38,000
And more and more popular is
getting the security email.

239
00:11:38,000 --> 00:11:39,470
It's quite simple how to use it,

240
00:11:39,470 --> 00:11:41,140
but it's getting more and more prepared,

241
00:11:41,140 --> 00:11:43,630
especially doing the remote working

242
00:11:43,630 --> 00:11:46,500
to prove who is the sender of the email

243
00:11:46,500 --> 00:11:49,010
and as well to trust.

244
00:11:49,010 --> 00:11:52,410
So it's time for a little
bit of life hacking.

245
00:11:52,410 --> 00:11:55,839
Let me turn off camera and
let's start the presentation.

246
00:11:57,633 --> 00:11:59,540
- [Bob] In this demo, I will focus

247
00:11:59,540 --> 00:12:04,449
on how misconfigured certificate
templates can be used

248
00:12:04,450 --> 00:12:09,450
to bypass absolutely any
security on your network.

249
00:12:09,720 --> 00:12:13,820
Because we can start and impersonate any,

250
00:12:13,820 --> 00:12:17,090
absolutely any account on the network

251
00:12:17,090 --> 00:12:19,610
by simply requesting

252
00:12:19,610 --> 00:12:23,303
and receiving specially
crafted certificate.

253
00:12:24,730 --> 00:12:27,580
So let's set up the stage first here.

254
00:12:27,580 --> 00:12:29,830
And I'm currently signing

255
00:12:29,830 --> 00:12:33,150
to one of my Windows Server machines.

256
00:12:33,150 --> 00:12:34,850
It's not a domain controller,

257
00:12:34,850 --> 00:12:37,970
it's not a certification authority key,

258
00:12:37,970 --> 00:12:42,330
and I'm using just a user
who is a local administrator

259
00:12:42,330 --> 00:12:45,670
of that computer, but to
perform those kinds of attacks,

260
00:12:45,670 --> 00:12:49,540
there is no need for being
a local administrator.

261
00:12:49,540 --> 00:12:52,469
Of course it depends on
the type of that template

262
00:12:52,470 --> 00:12:53,690
that I want to use.

263
00:12:53,690 --> 00:12:56,220
Because in this demo, I will be attacking

264
00:12:56,220 --> 00:12:58,050
through the certificate templates

265
00:12:58,050 --> 00:13:03,050
that are assigned to the servers,
for example, a web server.

266
00:13:04,540 --> 00:13:06,439
So let's see who am I.

267
00:13:06,440 --> 00:13:09,616
This time is a secure Bob
and if I see the groups,

268
00:13:09,616 --> 00:13:12,400
let's see, what are the group membership.

269
00:13:12,400 --> 00:13:14,670
This is the building administrators.

270
00:13:14,670 --> 00:13:16,400
I'm belonging as well to the users

271
00:13:16,400 --> 00:13:20,640
because this might local
administrator for this host.

272
00:13:20,640 --> 00:13:24,430
Let's try if I can just simply do the dir

273
00:13:24,430 --> 00:13:27,829
and let's say dc01\c$.

274
00:13:27,830 --> 00:13:29,970
Of course, dc01 is my domain controller

275
00:13:29,970 --> 00:13:34,860
if I use the nslookup and
go with the cqure.lab.

276
00:13:34,860 --> 00:13:38,940
This is absolutely one of the
IP addresses 10, 10, 10, 10,

277
00:13:38,940 --> 00:13:43,940
which is of course assigned
to my dc01 as a name.

278
00:13:44,040 --> 00:13:48,829
So another common which I
will try to do is net use

279
00:13:48,830 --> 00:13:53,390
and let's say it mount
as Z drive, the dc01\c$

280
00:13:53,390 --> 00:13:55,069
to show you that it's requesting

281
00:13:55,070 --> 00:13:57,160
for the user name and password.

282
00:13:57,160 --> 00:14:00,339
Because my user currently
is not a domain admin,

283
00:14:00,340 --> 00:14:04,670
he cannot get to the domain controller.

284
00:14:04,670 --> 00:14:06,632
So stopping this, clearing the screen.

285
00:14:07,890 --> 00:14:11,180
Let's see, what are the
certificates that currently I have.

286
00:14:11,180 --> 00:14:16,079
So let's certmgr.msc, the
console for certificates

287
00:14:16,080 --> 00:14:17,610
for current user.

288
00:14:17,610 --> 00:14:19,760
That's important, this
is the current user.

289
00:14:19,760 --> 00:14:21,910
In the personnel refresh,

290
00:14:21,910 --> 00:14:25,199
there is absolutely no
certificates right now here.

291
00:14:25,200 --> 00:14:28,820
If I tried to request for
any kind of certificate,

292
00:14:28,820 --> 00:14:31,410
let's see what is available for me

293
00:14:31,410 --> 00:14:35,630
and there is a classic user template.

294
00:14:35,630 --> 00:14:38,939
This is multipurpose certificate template.

295
00:14:38,940 --> 00:14:40,370
It's a encrypting file system

296
00:14:40,370 --> 00:14:43,093
security mailing client authentication.

297
00:14:43,093 --> 00:14:45,870
Let's enroll it and to
maybe I will show you

298
00:14:45,870 --> 00:14:48,760
that even if I provide
something in the subject name,

299
00:14:48,760 --> 00:14:53,710
like let's say common name, test, and odd,

300
00:14:53,710 --> 00:14:58,710
and maybe the user principal
name like admin at secure.lab

301
00:15:00,040 --> 00:15:02,750
still it will be ignored.

302
00:15:02,750 --> 00:15:06,360
And if I enroll it, I'm
getting the certificate,

303
00:15:06,360 --> 00:15:10,120
but really the certificate
is for the Bob builder.

304
00:15:10,120 --> 00:15:12,270
So it should too, and in the details

305
00:15:12,270 --> 00:15:16,910
in the subject alternate
name, subject and the name,

306
00:15:16,910 --> 00:15:18,510
there is of course only Bob,

307
00:15:18,510 --> 00:15:21,770
because this is properly
configured template.

308
00:15:21,770 --> 00:15:23,730
So no problem with it.

309
00:15:23,730 --> 00:15:26,100
Okay, so I cannot use this certificate

310
00:15:26,100 --> 00:15:30,790
to abuse my identity,
my servers and to use it

311
00:15:30,790 --> 00:15:33,317
for different purposes in the identity.

312
00:15:35,750 --> 00:15:38,660
So how about switching to
the computer certificates?

313
00:15:38,660 --> 00:15:39,930
I'm a local administrator,

314
00:15:39,930 --> 00:15:41,650
so definitely I have a possibility

315
00:15:41,650 --> 00:15:46,650
to use with the certlm.msc,
and after approving this,

316
00:15:47,185 --> 00:15:51,650
I should get possibility
to get to my certificates,

317
00:15:51,650 --> 00:15:55,500
certificates and right now,
see, there are a couple of sites

318
00:15:55,500 --> 00:15:59,050
on this web server or
are the issue from my dc.

319
00:15:59,050 --> 00:16:00,699
I will request a new certificate,

320
00:16:01,800 --> 00:16:04,880
and this time I let's
go through the template

321
00:16:04,880 --> 00:16:06,799
for the web server.

322
00:16:06,799 --> 00:16:07,632
And as you can see

323
00:16:07,632 --> 00:16:10,339
I have two different
certificate templates.

324
00:16:10,340 --> 00:16:14,880
One is a CQ Web, and the
second one is CQ Web bed.

325
00:16:14,880 --> 00:16:17,503
Of course, this one will be the one

326
00:16:17,503 --> 00:16:19,780
that is allowing me to
abuse the certificates.

327
00:16:19,780 --> 00:16:21,689
What are the difference between those two?

328
00:16:21,690 --> 00:16:23,100
If I look in the details,

329
00:16:23,100 --> 00:16:25,600
in the first one, you
see that in the CQ web,

330
00:16:25,600 --> 00:16:28,200
there is only a server authentication.

331
00:16:28,200 --> 00:16:30,860
If I look at the CQ web,

332
00:16:30,860 --> 00:16:33,820
there will be server and
the client authentication.

333
00:16:33,820 --> 00:16:38,560
For multiple purposes of
on a different client side,

334
00:16:38,560 --> 00:16:43,219
I see that the certificate
are issued like this

335
00:16:43,220 --> 00:16:45,310
because maybe their web servers

336
00:16:45,310 --> 00:16:48,750
use as well as a client
for the sandwich APIs

337
00:16:48,750 --> 00:16:51,130
or there is some kind of other binding

338
00:16:51,130 --> 00:16:53,177
which requires the client authentication.

339
00:16:53,177 --> 00:16:54,800
But in most cases,

340
00:16:54,800 --> 00:16:57,719
there is no need for using the
client authentication here.

341
00:16:57,720 --> 00:17:01,460
If I see that I can supply the request

342
00:17:01,460 --> 00:17:06,060
and to supply the name
inside of the request,

343
00:17:06,060 --> 00:17:08,409
and there is a client
authentication for me,

344
00:17:08,410 --> 00:17:13,410
this is almost for sure possibility
for abusing the request.

345
00:17:13,730 --> 00:17:15,040
So let's use it.

346
00:17:15,040 --> 00:17:16,260
Let's use the bed one

347
00:17:16,260 --> 00:17:17,900
because there is a client authentication

348
00:17:17,900 --> 00:17:21,130
and go with the properties
and choose one of them.

349
00:17:21,130 --> 00:17:23,339
So come on, name, let's stick

350
00:17:23,339 --> 00:17:28,339
to the Python sitefreecqure.lab

351
00:17:31,090 --> 00:17:33,310
are outing good DNS name, the same,

352
00:17:33,310 --> 00:17:34,840
so we're keeping it simple

353
00:17:34,840 --> 00:17:38,159
so anyone who will be just watching

354
00:17:38,160 --> 00:17:40,450
for what kind of
certificate I'm requesting,

355
00:17:40,450 --> 00:17:43,124
it looks absolutely nice.

356
00:17:43,124 --> 00:17:46,570
But also I will sub out
the alternative name

357
00:17:46,570 --> 00:17:50,460
which will be admin@cqure.lab.

358
00:17:50,460 --> 00:17:52,600
Okay, how'd they get there?

359
00:17:52,600 --> 00:17:54,590
Okay, so this is the second option

360
00:17:54,590 --> 00:17:56,669
and that's all which I
need right at this moment.

361
00:17:56,670 --> 00:17:59,690
Click OK and now it's time for enroll.

362
00:17:59,690 --> 00:18:00,840
There are two options.

363
00:18:00,840 --> 00:18:03,929
One is that it's automatically
approved like this.

364
00:18:03,930 --> 00:18:06,338
So I already got the certificate,

365
00:18:06,338 --> 00:18:08,040
or the second one that it will be pending

366
00:18:08,040 --> 00:18:12,370
for the certificate manager
for the further approval.

367
00:18:12,370 --> 00:18:14,979
But even if it's for the further approval,

368
00:18:14,980 --> 00:18:17,110
if this meets the requirements

369
00:18:17,110 --> 00:18:21,270
and there's no strict procedure
on the revising the request,

370
00:18:21,270 --> 00:18:23,040
there is good chance

371
00:18:23,040 --> 00:18:26,700
that someone will approve
this kind of certificate,

372
00:18:26,700 --> 00:18:28,290
sooner or later, of course.

373
00:18:28,290 --> 00:18:31,930
But preferably probably
a little bit earlier.

374
00:18:31,930 --> 00:18:34,640
So this one is the site free

375
00:18:34,640 --> 00:18:36,840
and if we look into the certificate,

376
00:18:36,840 --> 00:18:39,020
it looks that it's everything good with it

377
00:18:39,020 --> 00:18:41,040
but in the subject alternate name,

378
00:18:41,040 --> 00:18:45,020
you will find out that there
is other channel requests

379
00:18:45,020 --> 00:18:48,870
and additional name, admin@cqure.lab.

380
00:18:48,870 --> 00:18:53,870
So let's try to use
this certificate, okay?

381
00:18:53,890 --> 00:18:55,690
First of all, it's a local computer.

382
00:18:55,690 --> 00:19:00,066
So I cannot do too much as this user, Bob.

383
00:19:00,066 --> 00:19:03,603
Okay, maybe it's possible for
me to export the certificate.

384
00:19:04,550 --> 00:19:09,200
I can go to the export and if
it's a key storage provider,

385
00:19:09,200 --> 00:19:11,080
I will be able to export it.

386
00:19:11,080 --> 00:19:13,960
Even if this option is disabled by default

387
00:19:13,960 --> 00:19:15,430
by the certificate template,

388
00:19:15,430 --> 00:19:17,310
then remember that it's protected

389
00:19:17,310 --> 00:19:19,060
by using data protection API.

390
00:19:19,060 --> 00:19:21,760
So really I can export the key,

391
00:19:21,760 --> 00:19:24,110
even if their option is not available.

392
00:19:24,110 --> 00:19:27,340
This time I will export
it and let's go next.

393
00:19:27,340 --> 00:19:29,510
I will save it with the password.

394
00:19:29,510 --> 00:19:34,510
So this will be my password
one and save it to the file.

395
00:19:35,600 --> 00:19:38,459
Let's go with fake certificate,

396
00:19:38,460 --> 00:19:41,830
this is for certificate
number five this time.

397
00:19:41,830 --> 00:19:44,960
Okay, next, finish and that's all.

398
00:19:44,960 --> 00:19:47,320
Now I can remove it from the sites even,

399
00:19:47,320 --> 00:19:48,570
so I don't need it.

400
00:19:48,570 --> 00:19:50,610
Okay, delete it perfectly,

401
00:19:50,610 --> 00:19:52,149
and the next option

402
00:19:52,150 --> 00:19:55,210
is to just simply import this certificate

403
00:19:55,210 --> 00:19:58,000
into my current user.

404
00:19:58,000 --> 00:20:01,570
So if I just simply import it, okay?

405
00:20:01,570 --> 00:20:06,570
Next and choose the certificate
from the list here, okay?

406
00:20:07,540 --> 00:20:10,190
So this was PFX so I
should change it like that,

407
00:20:10,190 --> 00:20:14,113
and this is FC5, next
and type the password.

408
00:20:15,000 --> 00:20:16,750
There will be no difference absolutely.

409
00:20:16,750 --> 00:20:18,790
For me, I still will not be able

410
00:20:18,790 --> 00:20:22,620
to use the certificate to sign
in, or I will not be able,

411
00:20:22,620 --> 00:20:26,919
for example, to just
simply use it for mapping

412
00:20:26,920 --> 00:20:29,710
and I think from the system.

413
00:20:29,710 --> 00:20:34,710
For example, if I use a run
as, there is one of the options

414
00:20:35,450 --> 00:20:38,510
that is use smart card, okay?

415
00:20:38,510 --> 00:20:41,100
But if you use smart card,
I need to have a smart card.

416
00:20:41,100 --> 00:20:43,199
Remember, right now, my certificate

417
00:20:43,200 --> 00:20:44,593
is not important to the smart card,

418
00:20:44,593 --> 00:20:47,100
it's important to the
key service provider.

419
00:20:47,100 --> 00:20:49,550
So I'm removing this certificate again,

420
00:20:49,550 --> 00:20:52,100
and this time I will prepare a smart card.

421
00:20:52,100 --> 00:20:53,909
Let's find out if I have a smart card

422
00:20:53,910 --> 00:20:56,240
available for me at this moment.

423
00:20:56,240 --> 00:21:01,060
So going here and the
properties are maybe yes,

424
00:21:01,060 --> 00:21:04,793
properties, this one and device manager,

425
00:21:06,000 --> 00:21:10,370
going to look if there
are smart cards for me.

426
00:21:10,370 --> 00:21:12,321
Right now, I do not have any smart card,

427
00:21:12,321 --> 00:21:14,060
but I have a TPM module.

428
00:21:14,060 --> 00:21:18,082
So if I have a TPM module, I can use a TPM

429
00:21:19,421 --> 00:21:22,690
TPM through our smart card manager,

430
00:21:22,690 --> 00:21:24,980
and if I display everything here,

431
00:21:24,980 --> 00:21:27,320
there is a very simple
common that I can use

432
00:21:27,320 --> 00:21:30,370
to generate new smart card for me,

433
00:21:30,370 --> 00:21:32,370
but this option will be not possible

434
00:21:32,370 --> 00:21:35,419
if I'm in the terminal services session.

435
00:21:35,420 --> 00:21:37,240
So what I need to do right now,

436
00:21:37,240 --> 00:21:40,760
I need to go to the basic session

437
00:21:40,760 --> 00:21:43,440
on my hyper V configuration

438
00:21:43,440 --> 00:21:46,280
to be able to use the smart cards.

439
00:21:46,280 --> 00:21:47,600
Unfortunately, it would be not

440
00:21:47,600 --> 00:21:49,360
in the full screen mode anymore.

441
00:21:49,360 --> 00:21:52,840
So signing in as Bob, be the builder,

442
00:21:52,840 --> 00:21:57,209
and executing absolutely
the same comment again.

443
00:21:57,210 --> 00:22:00,140
This time, the smart card is generated,

444
00:22:00,140 --> 00:22:01,340
this is the virtual pocket

445
00:22:01,340 --> 00:22:04,010
which is bound to the TPM device.

446
00:22:04,010 --> 00:22:06,770
Okay, the next thing
which I need to perform,

447
00:22:06,770 --> 00:22:08,030
of course, I can show

448
00:22:08,030 --> 00:22:10,831
that there is a smart card
this time already available,

449
00:22:10,831 --> 00:22:12,929
the smart card reader,

450
00:22:12,930 --> 00:22:17,930
I need to import the
certificate to my smart card.

451
00:22:19,230 --> 00:22:21,513
So to do that, I will use certutil

452
00:22:21,513 --> 00:22:24,939
with the Microsoft-based
market crypto provider,

453
00:22:24,940 --> 00:22:28,970
and I will be importing
the PFX file from the CDG

454
00:22:30,100 --> 00:22:34,360
and this was my effects
certificate number five, PFX.

455
00:22:34,360 --> 00:22:37,520
It's asking whether I need to be elevated.

456
00:22:37,520 --> 00:22:40,120
So let's do this again.

457
00:22:40,120 --> 00:22:42,562
We've the common prom
that will be elevated.

458
00:22:43,690 --> 00:22:45,850
CMD again.

459
00:22:45,850 --> 00:22:49,730
I'll set me straight or as
simple as pasting it here

460
00:22:49,730 --> 00:22:50,920
and hitting Enter.

461
00:22:50,920 --> 00:22:54,360
So I need to provide the
password for the PFX.

462
00:22:54,360 --> 00:22:55,370
This is the pin.

463
00:22:55,370 --> 00:22:59,225
So it's 12345678, this is the default pin,

464
00:22:59,225 --> 00:23:02,629
and right away I will have access

465
00:23:02,630 --> 00:23:06,020
to newly imported certificate.

466
00:23:06,020 --> 00:23:07,350
So right now it will be visible

467
00:23:07,350 --> 00:23:10,159
absolutely in the same
way in the certificate.

468
00:23:10,160 --> 00:23:15,160
So refresh here, and there is
this site-free certificate.

469
00:23:15,300 --> 00:23:19,030
Let's test if I can, right
now do couple of fix.

470
00:23:19,030 --> 00:23:21,567
So try to use the dir again,

471
00:23:21,567 --> 00:23:24,450
and this is dc01 c$.

472
00:23:24,450 --> 00:23:26,040
Okay, it's denied.

473
00:23:26,040 --> 00:23:30,310
So maybe I can use the net
use again for the same.

474
00:23:30,310 --> 00:23:35,310
Net use and say, this is Z dc01 c$

475
00:23:36,640 --> 00:23:39,180
and of course Enter.

476
00:23:39,180 --> 00:23:42,110
This time again, not available for me,

477
00:23:42,110 --> 00:23:45,993
but if I use the same comment,
this time with smart card,

478
00:23:47,610 --> 00:23:50,040
it's going to read the smart cards

479
00:23:50,040 --> 00:23:52,540
and because I have a certificate

480
00:23:52,540 --> 00:23:56,850
with other shell novel
subject alternate name

481
00:23:56,850 --> 00:24:00,558
which has extended key usage set to that,

482
00:24:00,558 --> 00:24:05,558
provide the pin 78 and command
completed successfully.

483
00:24:07,480 --> 00:24:12,010
So right now, if I go to
the Z drive and use the dir,

484
00:24:12,010 --> 00:24:13,970
it's a dc.

485
00:24:13,970 --> 00:24:17,640
If I go to the Windows NTDS,

486
00:24:17,640 --> 00:24:20,010
you can find out that there is of course,

487
00:24:20,010 --> 00:24:22,520
the NTDS, the database.

488
00:24:22,520 --> 00:24:24,870
But of course, this is only a possibility

489
00:24:24,870 --> 00:24:26,899
for me to mount the drive.

490
00:24:26,900 --> 00:24:29,190
So maybe instead of doing that,

491
00:24:29,190 --> 00:24:32,890
I will just simply run
something as administrator.

492
00:24:32,890 --> 00:24:37,820
So now I can just simply
unmount the Z drive, okay?

493
00:24:37,820 --> 00:24:42,820
And use run as user admin@cqure.lab,

494
00:24:44,650 --> 00:24:47,050
because this is what we see
in subject alternate name

495
00:24:47,050 --> 00:24:51,513
and then of course,
smart card, smart card,

496
00:24:52,800 --> 00:24:55,700
and provide that I want to start the CMD.

497
00:24:55,700 --> 00:24:58,580
So I try to start CMD using the smart card

498
00:24:58,580 --> 00:25:02,290
for authentication and run it
as a, why I do this this way?

499
00:25:02,290 --> 00:25:04,600
Because remember my certificate

500
00:25:04,600 --> 00:25:09,600
does not have smart card
logon as extended key use it.

501
00:25:09,660 --> 00:25:12,900
So I cannot use it in
Windows 10 to sign in

502
00:25:12,900 --> 00:25:14,617
using this as a smart card.

503
00:25:14,617 --> 00:25:17,510
But I can still use a run as command,

504
00:25:17,510 --> 00:25:22,510
which require me only
to have the certificate

505
00:25:23,230 --> 00:25:24,770
with client authentication.

506
00:25:24,770 --> 00:25:28,660
Final fact is that I'm running
it as site free cqure.lab,

507
00:25:28,660 --> 00:25:32,497
but if you type who am I, I'm CQURE admin,

508
00:25:32,497 --> 00:25:36,053
whoamI/all and you will see

509
00:25:36,053 --> 00:25:38,960
that I'm definitely a
domain admin right now.

510
00:25:38,960 --> 00:25:42,920
So maybe I'm able to just
simply use again, dir

511
00:25:42,920 --> 00:25:47,710
on the dc01 and for example, C$ this time

512
00:25:47,710 --> 00:25:49,970
without any troubles here.

513
00:25:49,970 --> 00:25:53,050
Remember, I'm currently a domain admin.

514
00:25:53,050 --> 00:25:55,257
So K list, let's see what is there.

515
00:25:55,257 --> 00:25:57,950
And as you can see, there
are Kerberos tickets,

516
00:25:57,950 --> 00:26:02,660
which I can as well steal and
reuse it on any other system

517
00:26:02,660 --> 00:26:04,950
as a pass that ticket.

518
00:26:04,950 --> 00:26:09,340
So remember that you need
to secure the template

519
00:26:09,340 --> 00:26:11,620
because right now the template allows me

520
00:26:11,620 --> 00:26:13,899
to forward two things at the same time.

521
00:26:13,900 --> 00:26:16,490
When I'm requesting the certificate,

522
00:26:16,490 --> 00:26:20,060
there is of course not for this
user, but for the computers,

523
00:26:20,060 --> 00:26:24,149
so certlm.msc, there is possibility for me

524
00:26:24,150 --> 00:26:29,150
to request for any kind of requests.

525
00:26:30,740 --> 00:26:33,350
So a subject name can be provided by me

526
00:26:33,350 --> 00:26:37,810
and additionally, there is a
client authentication in it.

527
00:26:37,810 --> 00:26:42,070
No certificate manager approval required.

528
00:26:42,070 --> 00:26:45,270
This is really, really bad configuration.

529
00:26:45,270 --> 00:26:48,450
It looks like very big
misconfiguration at the same time

530
00:26:48,450 --> 00:26:51,290
that no one should create this one,

531
00:26:51,290 --> 00:26:53,790
but it's quite common misconfiguration

532
00:26:53,790 --> 00:26:58,603
that we see on multiple
cases at our client's sites.

533
00:27:01,400 --> 00:27:05,840
- So that was the, one
of the hacking solution

534
00:27:05,840 --> 00:27:10,730
which we can perform to actually
get to our infrastructure,

535
00:27:10,730 --> 00:27:14,040
and this is not the only one
that we really can perform.

536
00:27:14,040 --> 00:27:18,490
So the common mistakes which
you should investigate.

537
00:27:18,490 --> 00:27:22,350
Definitely if you are using a
software key storage provider,

538
00:27:22,350 --> 00:27:25,716
you can export the certificates
and the private keys

539
00:27:25,716 --> 00:27:28,040
from the storage.

540
00:27:28,040 --> 00:27:29,550
Multipurpose certificates.

541
00:27:29,550 --> 00:27:32,860
There are arising and
other kinds of problem

542
00:27:32,860 --> 00:27:34,600
for which purpose they were issued.

543
00:27:34,600 --> 00:27:36,949
If you combine a email and signing

544
00:27:36,950 --> 00:27:40,440
with encryption of the drive,

545
00:27:40,440 --> 00:27:43,228
then you need to have a
possibility to recover the files

546
00:27:43,228 --> 00:27:46,220
and of course we're losing the
ability for accountability.

547
00:27:46,220 --> 00:27:49,690
CSR automatic approval,
definitely not a good idea.

548
00:27:49,690 --> 00:27:53,640
Your certificate managers
should take a closer look

549
00:27:53,640 --> 00:27:55,680
into the certificates especially those

550
00:27:55,680 --> 00:27:57,143
which are high volume.

551
00:27:58,120 --> 00:28:00,570
Template permissions, domain admins.

552
00:28:00,570 --> 00:28:03,060
Literally only domain admins
should be able to do that.

553
00:28:03,060 --> 00:28:06,389
Of course, if you delegate the
permissions to the templates,

554
00:28:06,390 --> 00:28:09,620
remember that we can change the settings

555
00:28:09,620 --> 00:28:12,370
and do exactly this kind of attack.

556
00:28:12,370 --> 00:28:14,750
So watch out who has
access to the templates

557
00:28:14,750 --> 00:28:17,620
and to reach them place with
what kind of permissions.

558
00:28:17,620 --> 00:28:20,760
And the unconstrained cross certification

559
00:28:20,760 --> 00:28:23,937
which allows me to just
issue from one PKI,

560
00:28:25,900 --> 00:28:29,030
the certificate which is
really about your MTTs,

561
00:28:29,030 --> 00:28:31,320
about your users,

562
00:28:31,320 --> 00:28:35,379
and this will be still
trusted certificate.

563
00:28:35,380 --> 00:28:39,500
Okay, in this demo, I was not
using any of our custom tools,

564
00:28:39,500 --> 00:28:42,260
but we have developed more
than 200 tools and scripts

565
00:28:42,260 --> 00:28:44,200
used for different Apax and demos.

566
00:28:44,200 --> 00:28:47,000
Some of them we are sharing on our site.

567
00:28:47,000 --> 00:28:51,120
So if you are interested
in any of them as well,

568
00:28:51,120 --> 00:28:55,739
those which our team is using
on other aerosol sessions,

569
00:28:55,740 --> 00:28:57,840
visit the link and freely download them

570
00:28:57,840 --> 00:28:59,362
and use them and play around.

571
00:29:00,390 --> 00:29:04,370
So CQURE is not only doing presentations

572
00:29:04,370 --> 00:29:08,433
and writing at those, even
though we are quite good at this.

573
00:29:09,510 --> 00:29:13,590
But our main job is knowledge
sharing all around the world

574
00:29:13,590 --> 00:29:15,980
with online and offline,

575
00:29:15,980 --> 00:29:19,290
from custom trainings
related to the security,

576
00:29:19,290 --> 00:29:21,930
and of course, a lot
of consulting services

577
00:29:21,930 --> 00:29:25,610
together with one of the best
custom penetration testing

578
00:29:25,610 --> 00:29:28,793
and red teaming exercises
that you can get, like et al.

579
00:29:29,900 --> 00:29:32,970
So thank you for joining
me for this session

580
00:29:32,970 --> 00:29:35,750
and remember to verify
if your PKI solution

581
00:29:35,750 --> 00:29:37,833
does not have simple misconfigurations,

582
00:29:39,280 --> 00:29:43,040
mistakes which may lead to huge compromise

583
00:29:43,040 --> 00:29:44,443
of your identity solution.

