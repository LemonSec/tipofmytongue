1
00:00:06,490 --> 00:00:08,090
- [Announcer] No matter
what business you're in,

2
00:00:08,090 --> 00:00:10,290
digital transformation never stops.

3
00:00:10,290 --> 00:00:13,500
At Verizon, we keep companies
ready for what's next.

4
00:00:13,500 --> 00:00:15,580
We wave security into their business,

5
00:00:15,580 --> 00:00:17,250
virtualize their operations,

6
00:00:17,250 --> 00:00:19,550
and build AI customer experiences.

7
00:00:19,550 --> 00:00:22,300
We also keep them ready for
the next big opportunity

8
00:00:22,300 --> 00:00:23,263
like 5G.

9
00:00:24,220 --> 00:00:27,032
Almost all of the Fortune
500 partner with us.

10
00:00:28,000 --> 00:00:30,170
When it comes to digital transformation,

11
00:00:30,170 --> 00:00:32,314
we're here and we're ready.

12
00:00:32,314 --> 00:00:34,897
(upbeat music)

13
00:00:41,540 --> 00:00:44,550
- Hello and welcome to explore adventures

14
00:00:44,550 --> 00:00:48,360
in the Underland:Forensic
Techniques against hackers.

15
00:00:48,360 --> 00:00:49,480
If you're joining us live,

16
00:00:49,480 --> 00:00:51,949
our speaker is in the
slideshow chat discussion

17
00:00:51,950 --> 00:00:54,210
answering questions right now.

18
00:00:54,210 --> 00:00:56,370
For audio, video issues,

19
00:00:56,370 --> 00:00:58,959
click the technical support button below.

20
00:00:58,960 --> 00:01:02,890
I'd now like to turn it
over Paula Januizkiewicz,

21
00:01:05,060 --> 00:01:06,213
for the presentation.

22
00:01:08,320 --> 00:01:10,059
- Thank you so much for the introduction.

23
00:01:10,060 --> 00:01:11,560
And good morning.

24
00:01:11,560 --> 00:01:12,950
Good afternoon.

25
00:01:12,950 --> 00:01:14,370
I hope you're doing well.

26
00:01:14,370 --> 00:01:18,060
Let's jump into a bit
of a forensic subject.

27
00:01:18,060 --> 00:01:20,270
But first, let me introduce myself,

28
00:01:20,270 --> 00:01:23,460
Paula Januizkiewicz, I'm the CEO of CQURE.

29
00:01:23,460 --> 00:01:26,509
And I've got to 15 years of experience

30
00:01:26,510 --> 00:01:28,400
working in cybersecurity field,

31
00:01:28,400 --> 00:01:30,220
delivering penetration tests,

32
00:01:30,220 --> 00:01:32,710
I've got also access to
the source code of Windows,

33
00:01:32,710 --> 00:01:34,800
even though I don't work for Microsoft,

34
00:01:34,800 --> 00:01:38,460
I've got a role of
Microsoft Regional Director.

35
00:01:38,460 --> 00:01:40,649
So this is pretty much my background

36
00:01:40,650 --> 00:01:44,670
and within our team being
placed in four offices,

37
00:01:44,670 --> 00:01:49,480
New York, Switzerland,
Poland and in Dubai.

38
00:01:49,480 --> 00:01:53,310
We are pretty much taking
care about cybersecurity

39
00:01:53,310 --> 00:01:55,400
of our customers.

40
00:01:55,400 --> 00:02:00,050
So we've got forensics and
when we look at the subject,

41
00:02:00,050 --> 00:02:02,350
it is a very exciting subject because

42
00:02:02,350 --> 00:02:03,630
we've written forensics,

43
00:02:03,630 --> 00:02:06,610
or we've got the possibility to perform,

44
00:02:06,610 --> 00:02:08,560
first of all evidence gathering,

45
00:02:08,560 --> 00:02:11,430
and then investigation
about what happened.

46
00:02:11,430 --> 00:02:13,450
And in our team and including myself,

47
00:02:13,450 --> 00:02:16,130
we are participating in
various types of projects.

48
00:02:16,130 --> 00:02:18,790
There are plenty of stories to talk about.

49
00:02:18,790 --> 00:02:22,829
So let me share with you at the
very beginning of the story,

50
00:02:22,830 --> 00:02:27,300
where basically we learn
that research makes sense.

51
00:02:27,300 --> 00:02:30,530
So, long story short, I've got a friend

52
00:02:30,530 --> 00:02:32,370
and he's a developer.

53
00:02:32,370 --> 00:02:37,310
He was asking me where it's
possible to meet someone.

54
00:02:37,310 --> 00:02:41,007
Yes, so I have recommended
some dating portal, so to say,

55
00:02:41,007 --> 00:02:43,160
and so he registered himself,

56
00:02:43,160 --> 00:02:48,160
and he arranged like a chat
discussion with some lady,

57
00:02:48,190 --> 00:02:50,420
and he went for the meeting,

58
00:02:50,420 --> 00:02:52,570
and he was completely disappointed because

59
00:02:52,570 --> 00:02:55,109
the picture that he got, basically,

60
00:02:55,110 --> 00:02:57,760
it wasn't the same person
that was on the meeting.

61
00:02:57,760 --> 00:03:00,959
So he came back to me and
he asked the question,

62
00:03:00,960 --> 00:03:02,810
okay, so what I'm I supposed to do?

63
00:03:02,810 --> 00:03:04,730
So I said, arrange a Skype call,

64
00:03:04,730 --> 00:03:09,730
that will clearly help you to
avoid that kind of situation.

65
00:03:10,340 --> 00:03:12,030
So he did that.

66
00:03:12,030 --> 00:03:14,620
And there was a lady, she
was really nice and so on.

67
00:03:14,620 --> 00:03:16,360
So he was like, okay, let's meet up.

68
00:03:16,360 --> 00:03:17,510
So he went for a date.

69
00:03:17,510 --> 00:03:20,519
And then he comes back quite disappointed.

70
00:03:20,520 --> 00:03:22,470
And I'm asking what happens?

71
00:03:22,470 --> 00:03:24,980
Yes, that could work out pretty well.

72
00:03:24,980 --> 00:03:27,609
And he was like, no,
because who was actually

73
00:03:27,610 --> 00:03:31,110
on a Skype call, that
was this girl's sister.

74
00:03:31,110 --> 00:03:35,130
And eventually, she was too
ashamed to be on a Skype call.

75
00:03:35,130 --> 00:03:36,750
So that was just a different girl.

76
00:03:36,750 --> 00:03:40,850
So I said, you know what, then
deeper research never hurts.

77
00:03:40,850 --> 00:03:43,320
And when we apply that story to

78
00:03:43,320 --> 00:03:45,100
whatever we've got to have in the memory

79
00:03:45,100 --> 00:03:48,850
of the operating system,
that works out pretty well

80
00:03:48,850 --> 00:03:51,460
because within the memory investigation,

81
00:03:51,460 --> 00:03:54,560
and this is the first
evidence that you got her,

82
00:03:54,560 --> 00:03:56,230
not the disk, but the memory,

83
00:03:56,230 --> 00:03:58,130
you've got a possibility to extract

84
00:03:58,130 --> 00:04:00,359
lots of different types of data.

85
00:04:00,360 --> 00:04:03,617
For example, we've got
the processors list,

86
00:04:03,617 --> 00:04:05,310
we've got two different files,

87
00:04:05,310 --> 00:04:09,410
we've got a possibility to
play with different DLLs.

88
00:04:09,410 --> 00:04:13,427
So in general, you can
learn a lot what happens,

89
00:04:13,427 --> 00:04:16,010
and whatever works in
general, and this is the rule,

90
00:04:16,010 --> 00:04:17,399
you're gonna find in a memory.

91
00:04:17,399 --> 00:04:21,399
That's why performing a memory
dump, it's so important.

92
00:04:21,399 --> 00:04:23,609
Whenever we look at that approach,

93
00:04:23,610 --> 00:04:25,410
what I would like to show you guys,

94
00:04:25,410 --> 00:04:30,340
is the possibility to extract
files from the memory dump.

95
00:04:30,340 --> 00:04:32,570
And let's start with
something that's trivial,

96
00:04:32,570 --> 00:04:33,820
if you don't mind.

97
00:04:33,820 --> 00:04:37,380
And this is actually a
situation where we were having

98
00:04:38,810 --> 00:04:41,260
real issues during that project,

99
00:04:41,260 --> 00:04:45,909
because our job was to actually
extract that memory content

100
00:04:45,910 --> 00:04:50,260
and the files that were
supposed to be later used

101
00:04:50,260 --> 00:04:52,070
within that investigation.

102
00:04:52,070 --> 00:04:53,187
Lets have a look.

103
00:05:02,120 --> 00:05:04,550
In one of the projects,
we had a funny situation

104
00:05:04,550 --> 00:05:08,620
where we were supposed to extract files

105
00:05:08,620 --> 00:05:11,390
from the memory of the operating system

106
00:05:11,390 --> 00:05:16,190
of someone that eventually
was committing a crime.

107
00:05:17,080 --> 00:05:20,060
And the interesting fact is that,

108
00:05:20,060 --> 00:05:22,290
not only were we supposed to extract files

109
00:05:22,290 --> 00:05:24,090
that could bring some meanings,

110
00:05:24,090 --> 00:05:27,299
like maybe remainders
of documents and so on,

111
00:05:27,300 --> 00:05:31,290
but also we were looking for evtx files

112
00:05:31,290 --> 00:05:36,250
that were not saved into
an original file yet.

113
00:05:36,250 --> 00:05:40,850
And that is extremely
difficult because evtx itself,

114
00:05:40,850 --> 00:05:44,880
it's super hard to reverse
engineer, but we did that,

115
00:05:44,880 --> 00:05:48,150
it took us actually over
six months to do it.

116
00:05:48,150 --> 00:05:53,150
But eventually weirder and
interesting, I think, is that

117
00:05:53,990 --> 00:05:58,990
we were able to analyze these
files, so on the evtx files,

118
00:06:00,290 --> 00:06:03,650
make them not corrupted
made them consistent.

119
00:06:03,650 --> 00:06:08,650
And then we were able to read
partition of the log file

120
00:06:09,090 --> 00:06:12,390
that could help and helped a little bit

121
00:06:12,390 --> 00:06:14,690
within the whole investigation.

122
00:06:14,690 --> 00:06:16,950
So let's have a look how we can do that.

123
00:06:16,950 --> 00:06:19,440
So over here, we've got volatility,

124
00:06:19,440 --> 00:06:22,640
and we've got a dump file, analyze the MP,

125
00:06:22,640 --> 00:06:24,530
we specify the profile over here.

126
00:06:24,530 --> 00:06:28,087
So for example, that's gonna be this one.

127
00:06:28,087 --> 00:06:32,070
And in order to be able to extract files,

128
00:06:32,070 --> 00:06:36,380
we have to find out which
protest is actually responsible

129
00:06:36,380 --> 00:06:38,800
for maintaining these files.

130
00:06:38,800 --> 00:06:41,120
Well, not only this,
because you could go to the

131
00:06:41,120 --> 00:06:43,300
address in a memory address space,

132
00:06:43,300 --> 00:06:46,250
but eventually when the process was there,

133
00:06:46,250 --> 00:06:49,110
and it was processing
certain types of files,

134
00:06:49,110 --> 00:06:54,110
for sure that process would
have handles to these files.

135
00:06:54,210 --> 00:06:58,409
Now, because these are the evtx files,

136
00:06:58,410 --> 00:07:02,140
if we think about what kind
of process could have handles

137
00:07:02,140 --> 00:07:05,610
to evtx, that will be clearly svchost.

138
00:07:05,610 --> 00:07:08,290
Because that's the one
that hosts the Windows

139
00:07:08,290 --> 00:07:10,130
even lock service.

140
00:07:10,130 --> 00:07:13,670
But the funny part is that,
even though we know that,

141
00:07:13,670 --> 00:07:16,470
question would be, which svchost,

142
00:07:16,470 --> 00:07:18,020
'cause there are many of those.

143
00:07:18,020 --> 00:07:22,409
So in order to identify svchost
that we have to look at,

144
00:07:22,410 --> 00:07:26,500
first, we need to do DLL list like this.

145
00:07:26,500 --> 00:07:31,500
To get as DLL, let's just
stream it to DLL txt,

146
00:07:31,930 --> 00:07:35,100
to get us all of the DLLs loaded,

147
00:07:35,100 --> 00:07:38,040
including the ones that
is responsible for Windows

148
00:07:38,040 --> 00:07:39,420
even lock service.

149
00:07:39,420 --> 00:07:42,980
And this is how we will
be able to find svchost

150
00:07:42,980 --> 00:07:45,040
that is related with that DLL.

151
00:07:45,040 --> 00:07:47,450
Okay, so let's have a look.

152
00:07:47,450 --> 00:07:52,450
So dll.txt, and over here
we've got a pretty large file

153
00:07:53,230 --> 00:07:57,383
where we are looking for the wevtsvc,

154
00:08:00,440 --> 00:08:01,430
so that's the one.

155
00:08:01,430 --> 00:08:03,430
And we found it, and that's this one.

156
00:08:03,430 --> 00:08:05,720
So which svchost is this?

157
00:08:05,720 --> 00:08:07,230
Eight, four, eight.

158
00:08:07,230 --> 00:08:08,380
Okay, fantastic.

159
00:08:08,380 --> 00:08:10,840
So we can copy that process ID.

160
00:08:10,840 --> 00:08:13,400
And now we can go to the next stage,

161
00:08:13,400 --> 00:08:16,140
where we're gonna be actually digging into

162
00:08:17,030 --> 00:08:21,099
the extraction of the files.

163
00:08:21,100 --> 00:08:23,820
And what's so exciting about that is that,

164
00:08:23,820 --> 00:08:27,719
you can do it not only with
this particular types of files,

165
00:08:27,720 --> 00:08:30,880
but in general, you
can do it with anything

166
00:08:30,880 --> 00:08:34,689
that you are eventually
gonna find meaningful.

167
00:08:34,690 --> 00:08:38,680
So let's see how we can
do that for evtx files,

168
00:08:40,270 --> 00:08:43,319
so it's gonna be same command like here,

169
00:08:43,320 --> 00:08:48,320
but this time the model is
gonna be dump files, like this.

170
00:08:49,440 --> 00:08:52,430
And we're gonna specify minus a, a,n

171
00:08:52,430 --> 00:08:55,030
to preserve the names of the processes,

172
00:08:55,030 --> 00:09:00,030
and then minus process ID
minus directory, capital D,

173
00:09:00,180 --> 00:09:03,203
file handles, that's my folder name.

174
00:09:04,600 --> 00:09:08,980
So that everything over
here that eventually,

175
00:09:08,980 --> 00:09:11,820
this process ID has handles too,

176
00:09:11,820 --> 00:09:14,900
will be extracted to that folder.

177
00:09:14,900 --> 00:09:16,980
So if it has a handle to the file,

178
00:09:16,980 --> 00:09:19,240
it's gonna be in that folder, yeah.

179
00:09:19,240 --> 00:09:21,360
So as you can see, very quickly,

180
00:09:21,360 --> 00:09:24,310
we've got over here EBT
access coming, yeah?

181
00:09:24,310 --> 00:09:28,089
So these are the ones that
we will be interested in.

182
00:09:28,090 --> 00:09:31,910
Later on, there's gonna be a
list of DLLs, not right now.

183
00:09:31,910 --> 00:09:34,319
But eventually, we're able to see here

184
00:09:34,320 --> 00:09:38,610
that we actually had a bunch of DLLs.

185
00:09:38,610 --> 00:09:39,770
So this is good.

186
00:09:39,770 --> 00:09:42,500
Now question is what comes next?

187
00:09:42,500 --> 00:09:46,080
Well, over here, this is this
folder we are looking at.

188
00:09:46,080 --> 00:09:49,820
Yes, so file handles, I'm
gonna be actually analyzing

189
00:09:49,820 --> 00:09:51,430
the application log.

190
00:09:51,430 --> 00:09:53,280
So that's this one, yeah.

191
00:09:53,280 --> 00:09:57,920
And I'm gonna allow
myself to get that file,

192
00:09:57,920 --> 00:10:01,910
and actually I'm gonna paste
it in into the tools folder,

193
00:10:01,910 --> 00:10:05,520
so that we can analyze it one on one,

194
00:10:05,520 --> 00:10:10,520
and it's gonna be a very clear,
so to say situation, okay?

195
00:10:10,790 --> 00:10:15,400
So let me show you how we're able to,

196
00:10:15,400 --> 00:10:17,319
first of all open this file.

197
00:10:17,320 --> 00:10:20,530
So that's gonna be the
first lesson over here.

198
00:10:20,530 --> 00:10:22,930
And if we're actually able to do it,

199
00:10:22,930 --> 00:10:27,120
and a second, basically how to recover it.

200
00:10:27,120 --> 00:10:29,480
So that's this file we've been working on.

201
00:10:29,480 --> 00:10:33,580
Now if we do rename, and
I'm gonna remove this

202
00:10:33,580 --> 00:10:36,670
extension to leave only evtx.

203
00:10:36,670 --> 00:10:39,829
So that's the file directly
extracted from the memory.

204
00:10:39,830 --> 00:10:42,200
I'll try to do it right now.

205
00:10:42,200 --> 00:10:44,440
Can I for example, fix it?

206
00:10:44,440 --> 00:10:46,880
Yes, of course, and that's
what we're gonna do.

207
00:10:46,880 --> 00:10:48,073
So please have a look.

208
00:10:48,920 --> 00:10:52,002
We're gonna get into the tools folder.

209
00:10:53,667 --> 00:10:54,500
Here we go.

210
00:10:55,540 --> 00:10:58,703
And we've got a folder
over here called out,

211
00:10:59,550 --> 00:11:01,709
and it's empty.

212
00:11:01,710 --> 00:11:05,370
So that will be the folder
where we're gonna be extracting

213
00:11:05,370 --> 00:11:07,670
our lock file, okay?

214
00:11:07,670 --> 00:11:11,969
So CQEVTX Recovery, it's
one of my favorite tools

215
00:11:11,970 --> 00:11:12,980
to be sincere.

216
00:11:12,980 --> 00:11:15,360
We're given input directory.

217
00:11:15,360 --> 00:11:17,370
And we're given output directory.

218
00:11:17,370 --> 00:11:19,290
So this is actually quite easy.

219
00:11:19,290 --> 00:11:23,599
Enter, and then it says
successfully recovered 17 records.

220
00:11:23,600 --> 00:11:24,810
Well, that's exciting.

221
00:11:24,810 --> 00:11:27,810
If we have a look over
here, we've got file.

222
00:11:27,810 --> 00:11:30,560
Let's see if it opens.

223
00:11:30,560 --> 00:11:32,412
And in a moment,

224
00:11:34,410 --> 00:11:35,663
we need to load it.

225
00:11:38,500 --> 00:11:41,613
It takes always a bit of time,
so no worries about that.

226
00:11:43,970 --> 00:11:46,860
Because it has to actually verify

227
00:11:46,860 --> 00:11:50,603
if we've got different types
of internal signatures,

228
00:11:52,144 --> 00:11:54,730
and also just signatures
of chunks and so on.

229
00:11:54,730 --> 00:11:58,550
So there's a plenty,
plenty of security in evtx,

230
00:11:58,550 --> 00:12:01,969
but as you can see this
time, we were actually able

231
00:12:01,970 --> 00:12:03,680
to open that lock.

232
00:12:03,680 --> 00:12:08,680
So this is a fantastic way
to fix and extract files,

233
00:12:10,470 --> 00:12:14,780
but also to fix corrupted evtx files.

234
00:12:14,780 --> 00:12:17,550
And if you ever been, or it's
gonna be in that situation,

235
00:12:17,550 --> 00:12:20,723
don't forget, we've got a tool
for it, and it's a free tool.

236
00:12:28,110 --> 00:12:30,230
Okay guys, so right now

237
00:12:30,230 --> 00:12:32,040
you are familiar with the possibility

238
00:12:32,040 --> 00:12:34,130
to play with the memory dump.

239
00:12:34,130 --> 00:12:37,180
Now it's time to look
at the different ways

240
00:12:37,180 --> 00:12:40,099
of how we are able to extract
evidence from the disk.

241
00:12:40,100 --> 00:12:43,750
So once for example, you got
her memory as for evidence,

242
00:12:43,750 --> 00:12:44,910
it's time for disk,

243
00:12:44,910 --> 00:12:47,699
so make sure that you're
gonna do it safely

244
00:12:47,700 --> 00:12:51,650
using the appropriate tools,
like FTK, Imager and so on,

245
00:12:51,650 --> 00:12:55,689
so that eventually nothing is affected.

246
00:12:55,690 --> 00:12:57,880
Let's have a look at the attack.

247
00:12:57,880 --> 00:13:01,500
So I'm excited because after
this attack from the desk,

248
00:13:01,500 --> 00:13:03,963
we're gonna learn what actually happened.

249
00:13:12,540 --> 00:13:14,430
Let's have a look at a simple attack

250
00:13:14,430 --> 00:13:16,695
where we're gonna deliver SMB relay.

251
00:13:16,696 --> 00:13:21,350
SMB relay in general is
relying on the situation,

252
00:13:21,350 --> 00:13:24,730
where we have no SMB signing
in the infrastructure.

253
00:13:24,730 --> 00:13:28,510
And at the same time, we're
using NTLM version two protocol

254
00:13:28,510 --> 00:13:30,240
for authentication.

255
00:13:30,240 --> 00:13:34,410
Now, this attack works in vast
majority of organizations.

256
00:13:34,410 --> 00:13:37,110
And the problem is that well, it's easy,

257
00:13:37,110 --> 00:13:39,690
but at the same time,
there is a certain code

258
00:13:39,690 --> 00:13:41,290
that needs to execute.

259
00:13:41,290 --> 00:13:43,430
And it will be great of course, to know

260
00:13:43,430 --> 00:13:46,660
what are the ways to figure
out that, that particular code

261
00:13:46,660 --> 00:13:48,719
has actually executed.

262
00:13:48,720 --> 00:13:53,720
So for the SMB relay, I'm going
to use smbrelayx.py script,

263
00:13:54,350 --> 00:13:59,230
as you see, and my target
is gonna be 10, 10, 10, 250.

264
00:13:59,230 --> 00:14:04,230
And on execution, I'm
gonna run CQShell104a.exe,

265
00:14:04,550 --> 00:14:07,930
which is actually a reverse
shell that is customized

266
00:14:07,930 --> 00:14:09,099
by our team.

267
00:14:09,100 --> 00:14:12,070
Now the customization
that is happening here,

268
00:14:12,070 --> 00:14:15,440
is actually related with the discovery

269
00:14:15,440 --> 00:14:18,620
or non discovery by
the antivirus solution.

270
00:14:18,620 --> 00:14:21,890
But at the end is just
a simple reverse shell.

271
00:14:21,890 --> 00:14:23,390
So that's gonna be the first step.

272
00:14:23,390 --> 00:14:25,480
Second step that we got over here,

273
00:14:25,480 --> 00:14:28,800
is related with the listener or handler

274
00:14:28,800 --> 00:14:30,729
for the incoming connections.

275
00:14:30,730 --> 00:14:32,910
And I have over here, mat exploit,

276
00:14:32,910 --> 00:14:36,860
which I have simply set up,
as you see, that's everything.

277
00:14:36,860 --> 00:14:39,150
So that's why it is like it's so simple

278
00:14:39,150 --> 00:14:42,770
to perform the handling of connections,

279
00:14:42,770 --> 00:14:47,230
that are about to come if
they run the reverse shell.

280
00:14:47,230 --> 00:14:49,880
So this is basically
what's happening here.

281
00:14:49,880 --> 00:14:52,610
Now that reverse shell in general

282
00:14:52,610 --> 00:14:56,050
is gonna be running next
because SMB relay itself

283
00:14:56,050 --> 00:14:58,780
in order to establish a
connection to a shorter session,

284
00:14:58,780 --> 00:15:02,079
and so on, has to run its own executable,

285
00:15:02,080 --> 00:15:05,160
which we would like to trace afterwards.

286
00:15:05,160 --> 00:15:08,240
And that's gonna be a
very interesting situation

287
00:15:08,240 --> 00:15:09,550
to have a look at.

288
00:15:09,550 --> 00:15:11,430
So let's see, first of all,

289
00:15:11,430 --> 00:15:13,752
here where we just need to go exploit.

290
00:15:14,590 --> 00:15:18,400
And second thing here, we
just need to run the script.

291
00:15:18,400 --> 00:15:23,000
Now what I'm gonna do on my
site, it's gonna be basically

292
00:15:23,000 --> 00:15:27,130
the query from a certain type of machine.

293
00:15:27,130 --> 00:15:29,730
So from one host to another,

294
00:15:29,730 --> 00:15:33,940
in order to a query, or trigger NTLM,

295
00:15:33,940 --> 00:15:36,220
version two authentication.

296
00:15:36,220 --> 00:15:40,610
Now that situation is actually
quite straightforward,

297
00:15:40,610 --> 00:15:43,880
because querying by IP address
different types of hosts

298
00:15:43,880 --> 00:15:47,490
in the infrastructure, it's
a quite typical thing, right?

299
00:15:47,490 --> 00:15:49,800
So basically, we do backslash, backslash,

300
00:15:49,800 --> 00:15:51,949
and then we specify an IP address.

301
00:15:51,950 --> 00:15:56,120
Now I'm gonna here, listen
to incoming connections.

302
00:15:56,120 --> 00:15:57,510
So please have a look.

303
00:15:57,510 --> 00:16:01,920
Now I have queried a certain
IP address in infrastructure.

304
00:16:01,920 --> 00:16:05,849
Here, we can do ps to list processes.

305
00:16:05,850 --> 00:16:08,250
And over here, I'm able
to see that for example,

306
00:16:08,250 --> 00:16:11,940
there is an svchost running
as NT authority system,

307
00:16:11,940 --> 00:16:14,310
which has process ID 3136.

308
00:16:14,310 --> 00:16:18,750
So let's do that migrate, 3136.

309
00:16:18,750 --> 00:16:20,650
And the migration process over here,

310
00:16:20,650 --> 00:16:25,650
I was asked to move our bad
piece of code to that protests,

311
00:16:26,440 --> 00:16:29,050
and this is a typical
exploitation technique,

312
00:16:29,050 --> 00:16:31,079
and not in the form of DLL and so on,

313
00:16:31,080 --> 00:16:35,390
but by modification of
the memory address space

314
00:16:35,390 --> 00:16:36,780
of that process.

315
00:16:36,780 --> 00:16:39,860
Now, we are right now in that system,

316
00:16:39,860 --> 00:16:43,370
so I've gotta press shell
here, if we do Who am I,

317
00:16:43,370 --> 00:16:46,730
you are able to see that
we are actually system

318
00:16:46,730 --> 00:16:49,610
in that target system.

319
00:16:49,610 --> 00:16:51,890
So this is all good.

320
00:16:51,890 --> 00:16:53,340
But the question is, of course,

321
00:16:53,340 --> 00:16:56,380
how are we able to investigate it, okay?

322
00:16:56,380 --> 00:16:57,950
And this is something that
I would like to show you.

323
00:16:57,950 --> 00:17:02,160
So we were migrating the 3136,

324
00:17:02,160 --> 00:17:06,819
and we are able to see over
here that it's from 2909.

325
00:17:06,819 --> 00:17:09,530
And once we did shell, then basically

326
00:17:09,530 --> 00:17:11,810
here there has been protests created.

327
00:17:11,810 --> 00:17:16,810
So let's have a look how this
activity reflects, basically,

328
00:17:16,990 --> 00:17:19,180
on our target machine.

329
00:17:19,180 --> 00:17:20,700
And it's extremely interesting

330
00:17:20,700 --> 00:17:23,450
because this particular attack,

331
00:17:23,450 --> 00:17:25,869
can happen pretty much anytime.

332
00:17:25,869 --> 00:17:29,120
But the thing is that if
it happened, for example,

333
00:17:29,120 --> 00:17:31,620
six months ago, now question is,

334
00:17:31,620 --> 00:17:34,510
how do we know that,
that actually happened?

335
00:17:34,510 --> 00:17:37,840
And there are a couple of
things that could indicate,

336
00:17:37,840 --> 00:17:42,159
even after that time, that
there is something bad going on.

337
00:17:42,160 --> 00:17:44,510
So first of all, what are we gonna do?

338
00:17:44,510 --> 00:17:46,050
We're gonna look at the machine?

339
00:17:46,050 --> 00:17:47,860
Yes, so let's do it.

340
00:17:47,860 --> 00:17:49,439
So here's the machine.

341
00:17:49,440 --> 00:17:51,770
We can sort by the process IDs of,

342
00:17:51,770 --> 00:17:54,023
for the simplification of this research.

343
00:17:54,900 --> 00:17:56,560
This by the way, it's not because

344
00:17:56,560 --> 00:17:58,450
there is some vulnerability or anything.

345
00:17:58,450 --> 00:18:00,910
No, no, no, this is how it works

346
00:18:00,910 --> 00:18:04,963
because of the NTLM version
two, and SMB not being signed,

347
00:18:05,970 --> 00:18:08,180
which is a default, actually.

348
00:18:08,180 --> 00:18:09,430
So here we go.

349
00:18:09,430 --> 00:18:14,430
We've got a 3136, 3136, we don't have,

350
00:18:14,900 --> 00:18:17,190
we actually do see that process.

351
00:18:17,190 --> 00:18:19,157
So we got 3136, yeah.

352
00:18:19,157 --> 00:18:22,189
And so this is basically
the one that we've been,

353
00:18:22,190 --> 00:18:23,440
we are migrating to.

354
00:18:23,440 --> 00:18:25,310
So I'm gonna move down a little bit.

355
00:18:25,310 --> 00:18:27,899
So this is this one 3136.

356
00:18:27,900 --> 00:18:31,160
But we don't have 2904.

357
00:18:31,160 --> 00:18:35,830
If we look for 2904, that
protest does not exist anymore.

358
00:18:35,830 --> 00:18:36,870
Now why?

359
00:18:36,870 --> 00:18:40,350
Because when migrated to 3136,

360
00:18:40,350 --> 00:18:44,370
that 2904 just vanished, yes.

361
00:18:44,370 --> 00:18:49,370
Now 2864, that is this one basically.

362
00:18:50,560 --> 00:18:53,280
It is here, we've got this one.

363
00:18:53,280 --> 00:18:55,180
That's the cmd.exe.

364
00:18:55,180 --> 00:18:57,330
Yes, indeed, because that's the shell.

365
00:18:57,330 --> 00:18:59,820
But of course if the hacker closes it,

366
00:18:59,820 --> 00:19:01,439
you won't see it anymore.

367
00:19:01,440 --> 00:19:02,810
And now what?

368
00:19:02,810 --> 00:19:05,760
So, long story short, or first of all,

369
00:19:05,760 --> 00:19:07,803
we can have a look at netstat.

370
00:19:09,150 --> 00:19:13,170
And with the option ano
maybe, let's do more.

371
00:19:13,170 --> 00:19:15,320
And here we've got process IDs,

372
00:19:15,320 --> 00:19:17,929
that are related with the communication.

373
00:19:17,930 --> 00:19:21,110
Now funny fact is that
if you have a look at the

374
00:19:21,110 --> 00:19:24,350
establish connection because
it clearly stands out,

375
00:19:24,350 --> 00:19:26,330
we're able to see that the process ID

376
00:19:26,330 --> 00:19:30,199
assigned to that connection, it's 2904.

377
00:19:30,200 --> 00:19:33,010
But hey, didn't we just
say that, that process

378
00:19:33,010 --> 00:19:34,250
just vanished?

379
00:19:34,250 --> 00:19:37,590
Exactly, because unfortunately, netstat

380
00:19:37,590 --> 00:19:39,260
won't tell you the truth.

381
00:19:39,260 --> 00:19:43,560
Netstat unfortunately, will
show you only the connections

382
00:19:43,560 --> 00:19:46,370
or the process that was used

383
00:19:46,370 --> 00:19:48,699
when we were establishing a connection.

384
00:19:48,700 --> 00:19:49,910
And that's it.

385
00:19:49,910 --> 00:19:52,230
So simply, we cannot trust it.

386
00:19:52,230 --> 00:19:55,440
So is there someone to trust
in the operating system,

387
00:19:55,440 --> 00:19:58,870
assuming the data attack
happened long time ago?

388
00:19:58,870 --> 00:19:59,959
Well, yes.

389
00:19:59,960 --> 00:20:04,250
We've got something that
basically, we call Prefetch.

390
00:20:04,250 --> 00:20:08,130
And we're in Windows Prefetch,
which is out there running

391
00:20:08,130 --> 00:20:11,800
for all the time, we've
got a possibility to verify

392
00:20:11,800 --> 00:20:15,129
what were the processes running,

393
00:20:15,130 --> 00:20:17,540
since you have set up your Windows.

394
00:20:17,540 --> 00:20:22,540
So lets just start dot, and
here I have sorted these things

395
00:20:22,960 --> 00:20:24,800
by date modified.

396
00:20:24,800 --> 00:20:27,700
So you're able to see that eventually,

397
00:20:27,700 --> 00:20:32,550
we've got more netstat
process hacker, where am I?

398
00:20:32,550 --> 00:20:34,940
And then we've got this strange guy.

399
00:20:34,940 --> 00:20:38,990
That's this I-Y-J-R and so on.

400
00:20:38,990 --> 00:20:42,210
So, and this is quite interesting
because it looks dodgy.

401
00:20:42,210 --> 00:20:44,880
But of course, it might
have a really nice name.

402
00:20:44,880 --> 00:20:48,160
So let's, in general, for the
sake of our research here,

403
00:20:48,160 --> 00:20:52,260
verify if this could be this bad process.

404
00:20:52,260 --> 00:20:54,430
So what I'm going to do is,

405
00:20:54,430 --> 00:20:57,200
I'm right now on the hackers machine,

406
00:20:57,200 --> 00:21:00,390
and this is this attack that
we were delivering yeah?

407
00:21:00,390 --> 00:21:04,000
And over here you can see
that authentication was made.

408
00:21:04,000 --> 00:21:09,000
And then we've got uploading
file, I-Y-J-R-D, and so on.

409
00:21:10,140 --> 00:21:11,370
So that's this one.

410
00:21:11,370 --> 00:21:14,790
And that was also the one
that we could confirm,

411
00:21:14,790 --> 00:21:17,710
that was on the client side, yeah.

412
00:21:17,710 --> 00:21:20,250
So this is basically this situation.

413
00:21:20,250 --> 00:21:22,680
Now, if it was called,
who am I, for example,

414
00:21:22,680 --> 00:21:27,060
or a Notepad or something, then
it won't look that strange.

415
00:21:27,060 --> 00:21:29,060
So can we look inside?

416
00:21:29,060 --> 00:21:32,659
Of course, Shift + right
click, Copy as path.

417
00:21:32,660 --> 00:21:36,420
And over here, I'm going
to go to our tools,

418
00:21:36,420 --> 00:21:39,070
where I'm going to use CQ,

419
00:21:39,070 --> 00:21:41,379
and in this case, Prefetch Parser.

420
00:21:41,380 --> 00:21:42,420
So we now are a team.

421
00:21:42,420 --> 00:21:44,290
We've got lots of tools like that.

422
00:21:44,290 --> 00:21:47,330
But this particular one, we're gonna use

423
00:21:47,330 --> 00:21:49,909
with the parameter F for file.

424
00:21:49,910 --> 00:21:51,480
We're gonna paste the path,

425
00:21:51,480 --> 00:21:54,810
and then we're gonna do
minus a for analysis.

426
00:21:54,810 --> 00:21:57,530
And long story short, let
me make it full screen.

427
00:21:57,530 --> 00:22:02,500
We are able to analyze,
but a bit of details

428
00:22:02,500 --> 00:22:05,450
about what's going on
inside the Prefetch file.

429
00:22:05,450 --> 00:22:08,653
For example, here we've got run count one.

430
00:22:09,620 --> 00:22:11,810
And the run count one indicates

431
00:22:11,810 --> 00:22:16,500
that this particular executable
has been running only once,

432
00:22:16,500 --> 00:22:19,120
and that is already quite suspicious.

433
00:22:19,120 --> 00:22:22,159
We can see when, but we can also see

434
00:22:22,160 --> 00:22:24,980
what kind of DLLs are loaded over here.

435
00:22:24,980 --> 00:22:27,380
So if this file has a name node part

436
00:22:27,380 --> 00:22:30,810
and it is actually malware,
then we are always able

437
00:22:30,810 --> 00:22:34,450
to compare, for example,
the list of loaded DLLs,

438
00:22:34,450 --> 00:22:38,650
whether it's the same as
original Notepad or not.

439
00:22:38,650 --> 00:22:43,650
So Prefetch in general,
allows us to indicate

440
00:22:43,680 --> 00:22:46,410
what kind of executables we're running

441
00:22:46,410 --> 00:22:49,880
in the operating system,
even though process tracking,

442
00:22:49,880 --> 00:22:54,190
for example, as one of the
logging methods wasn't turned on.

443
00:22:54,190 --> 00:22:57,360
So Prefetch, it's not that detailed,

444
00:22:57,360 --> 00:23:01,530
but in a worst case, it
helps you to understand

445
00:23:01,530 --> 00:23:03,010
if there was something suspicious

446
00:23:03,010 --> 00:23:05,100
actually running on your machine.

447
00:23:05,100 --> 00:23:07,360
How long do we maintain Prefetch?

448
00:23:07,360 --> 00:23:09,379
Well, since you installed Windows,

449
00:23:09,380 --> 00:23:11,790
so over here, you were
able to find a history

450
00:23:11,790 --> 00:23:14,330
of everything that has been ever running

451
00:23:14,330 --> 00:23:16,850
in this operating
system, that's one thing.

452
00:23:16,850 --> 00:23:18,949
Second, who can delete it?

453
00:23:18,950 --> 00:23:21,930
Well Prefetch can be
deleted by administrators.

454
00:23:21,930 --> 00:23:25,650
So long story short, if hacker knows what

455
00:23:25,650 --> 00:23:28,330
he or she is doing,
then this person can go

456
00:23:28,330 --> 00:23:30,639
to the Prefetch folder,
and then eventually

457
00:23:30,640 --> 00:23:32,290
delete the trace.

458
00:23:32,290 --> 00:23:34,480
So it really depends on the situation.

459
00:23:34,480 --> 00:23:37,590
But actually, during this analysis,

460
00:23:37,590 --> 00:23:41,088
we rarely see that
Prefetch is being deleted.

461
00:23:41,088 --> 00:23:43,700
What if it is deleted, actually?

462
00:23:43,700 --> 00:23:47,110
Is it possible to recover,
for example, deleted files?

463
00:23:47,110 --> 00:23:50,062
And answer is, of course,
we can always do that.

464
00:24:01,250 --> 00:24:04,290
So this is always quite
exciting, I would say,

465
00:24:04,290 --> 00:24:06,899
because there are different ways of how

466
00:24:06,900 --> 00:24:11,504
we are able to delete
or hide files and so on,

467
00:24:11,504 --> 00:24:13,520
so that we can later recover them.

468
00:24:13,520 --> 00:24:17,580
And let's have a look at that
moment at the demolition,

469
00:24:17,580 --> 00:24:21,449
where I'd like to show
you how you got this file,

470
00:24:21,450 --> 00:24:25,890
to actually play with
files that were deleted.

471
00:24:25,890 --> 00:24:28,280
Now, if you have any questions, of course,

472
00:24:28,280 --> 00:24:30,070
do not hesitate to post them on a chart,

473
00:24:30,070 --> 00:24:32,730
because this is a quite
an intense session.

474
00:24:32,730 --> 00:24:34,240
So I'm happy to answer those.

475
00:24:34,240 --> 00:24:36,530
But in the meantime, are we gonna learn

476
00:24:36,530 --> 00:24:38,629
how to use PowerShell.

477
00:24:38,630 --> 00:24:41,520
And that's exciting
because PowerShell is free,

478
00:24:41,520 --> 00:24:44,020
with the free module of Power Forensics,

479
00:24:44,020 --> 00:24:48,020
in order to recover that type of data.

480
00:24:48,020 --> 00:24:50,610
So Power Forensics, in general,

481
00:24:50,610 --> 00:24:54,240
you were able simply to
download it from the internet.

482
00:24:54,240 --> 00:24:57,020
And once you set it up, you've got

483
00:24:57,020 --> 00:24:59,420
all of these commands available.

484
00:24:59,420 --> 00:25:02,080
So over here I'm gonna set up the drive.

485
00:25:02,080 --> 00:25:05,957
So that's that VHDX for the demo purpose.

486
00:25:05,958 --> 00:25:10,958
And our goal is gonna
be to mounted read only.

487
00:25:11,030 --> 00:25:13,170
So the reason why we
are doing it this way,

488
00:25:13,170 --> 00:25:16,630
because I mean, it's a good
practice to do it like this.

489
00:25:16,630 --> 00:25:19,230
But at the same time, we
have to do it this way

490
00:25:19,230 --> 00:25:22,930
so that we are not affecting
any of these files.

491
00:25:22,930 --> 00:25:25,123
Now over here, you are able to see that,

492
00:25:25,123 --> 00:25:28,950
that particular drive is simply empty.

493
00:25:28,950 --> 00:25:33,950
And our goal is gonna be to
play with var use commands

494
00:25:34,150 --> 00:25:37,880
in order to well set up the module itself.

495
00:25:37,880 --> 00:25:41,350
And then of course, to
get information about

496
00:25:41,350 --> 00:25:43,959
what kind of stuff has been deleted.

497
00:25:43,960 --> 00:25:46,320
So we've got over here, import module,

498
00:25:46,320 --> 00:25:49,250
and then we are getting
their forensic file records,

499
00:25:49,250 --> 00:25:52,520
where the object is actually deleted.

500
00:25:52,520 --> 00:25:55,970
So we got it and let's play data.

501
00:25:55,970 --> 00:25:59,200
Let's play data with this
rule, let's run this command.

502
00:25:59,200 --> 00:26:02,483
And we have got over here,
all of the objects about,

503
00:26:03,780 --> 00:26:06,720
from the E drives that are there,

504
00:26:06,720 --> 00:26:09,210
but without attack of being deleted.

505
00:26:09,210 --> 00:26:13,330
So our goal basically is gonna
be to add that part to them.

506
00:26:13,330 --> 00:26:15,990
And this will indicate as of course,

507
00:26:15,990 --> 00:26:18,450
files that were deleted.

508
00:26:18,450 --> 00:26:22,760
Okay, so we can see here
that we've got p.exe,

509
00:26:22,760 --> 00:26:26,360
and that's p.exe basically,
it's an executable,

510
00:26:26,360 --> 00:26:28,320
that we would like to get.

511
00:26:28,320 --> 00:26:31,720
And for sure, we need to get
more information about that.

512
00:26:31,720 --> 00:26:34,990
But the record number
that we got, it's 38.

513
00:26:34,990 --> 00:26:38,660
That's something that we call
I note, or index, and so on.

514
00:26:38,660 --> 00:26:40,440
So there are various names for that.

515
00:26:40,440 --> 00:26:44,350
But that is actually our record number

516
00:26:44,350 --> 00:26:46,530
that we're gonna be leveraging.

517
00:26:46,530 --> 00:26:49,520
So once we get to more information about,

518
00:26:49,520 --> 00:26:54,010
we are able to read of course,
how big it is, and so on,

519
00:26:54,010 --> 00:26:55,840
but this one in the moment.

520
00:26:55,840 --> 00:26:59,963
So that's when we get forensic
file record in general,

521
00:27:01,117 --> 00:27:04,420
for that particular file,
we can see of course,

522
00:27:04,420 --> 00:27:06,050
its metadata too.

523
00:27:06,050 --> 00:27:08,290
Don't forget that metadata, by the way,

524
00:27:08,290 --> 00:27:10,790
can be as well modified.

525
00:27:10,790 --> 00:27:14,040
So let's play a little bit with the p.exe,

526
00:27:14,040 --> 00:27:17,800
and over here, you can see
that we've got attributes,

527
00:27:17,800 --> 00:27:20,879
standard information, file name, data,

528
00:27:20,880 --> 00:27:24,510
we can see how big it
is, we can see metadata.

529
00:27:24,510 --> 00:27:28,330
So this is all about a deleted file, yeah?

530
00:27:28,330 --> 00:27:31,179
And we've got it also in data.

531
00:27:31,180 --> 00:27:34,923
So whenever we play with
attribute over here,

532
00:27:35,860 --> 00:27:39,139
especially with the data,
we can see basically,

533
00:27:39,140 --> 00:27:41,060
that we've got over here,

534
00:27:41,060 --> 00:27:45,929
data run that represents
as data of the file.

535
00:27:45,930 --> 00:27:47,830
So as simple as this.

536
00:27:47,830 --> 00:27:51,980
And we can see basically,
that, that refers to

537
00:27:52,940 --> 00:27:55,200
the file of course that has been deleted.

538
00:27:55,200 --> 00:27:59,440
So that data run, it's a
data structure of the file

539
00:27:59,440 --> 00:28:02,930
or data content, or in general
content of the file, yeah,

540
00:28:02,930 --> 00:28:04,280
there we go.

541
00:28:04,280 --> 00:28:08,740
So we can, right now play
and see what has basically

542
00:28:08,740 --> 00:28:10,040
ruined data run.

543
00:28:10,040 --> 00:28:11,670
And where does it spread.

544
00:28:11,670 --> 00:28:14,880
So we can see over here start
cluster, and that's this one.

545
00:28:14,880 --> 00:28:17,680
And we can see the cluster length as well.

546
00:28:17,680 --> 00:28:20,317
It's not also sparse,
it's not, it is important

547
00:28:20,317 --> 00:28:22,730
but we rarely see actually sparse files.

548
00:28:22,730 --> 00:28:26,660
But start cluster will be the
one that we're gonna refer to

549
00:28:26,660 --> 00:28:28,400
while recovering the file.

550
00:28:28,400 --> 00:28:32,970
But before we do it, we have
to learn that basically,

551
00:28:32,970 --> 00:28:37,970
that particular cluster size is x.

552
00:28:38,010 --> 00:28:40,560
And we didn't know yet
what's the cluster size

553
00:28:40,560 --> 00:28:43,360
to multiply by 130.

554
00:28:43,360 --> 00:28:45,949
That's why we're gonna do get forensic,

555
00:28:45,950 --> 00:28:49,840
a volume boot record to learn
that the bytes per cluster

556
00:28:49,840 --> 00:28:52,500
it's 4096.

557
00:28:52,500 --> 00:28:56,200
And then we've got
Invoke-ForensicDD in file,

558
00:28:56,200 --> 00:29:00,130
where we specify that
particular cluster size.

559
00:29:00,130 --> 00:29:02,410
We've got an offset, and so on,

560
00:29:02,410 --> 00:29:06,480
and we save everything into a file.

561
00:29:06,480 --> 00:29:09,310
So our goal over here would be to recover

562
00:29:09,310 --> 00:29:10,700
that data structure,

563
00:29:10,700 --> 00:29:15,700
and to save it into, for
example, out file, CQ test, okay?

564
00:29:16,740 --> 00:29:18,370
So this is quite simple, right?

565
00:29:18,370 --> 00:29:20,260
Because it's all in PowerShell.

566
00:29:20,260 --> 00:29:24,240
And we're able to stream
out the data that we got

567
00:29:24,240 --> 00:29:27,900
on the drive, actually, to the place.

568
00:29:27,900 --> 00:29:31,620
So here, we've got our drive.

569
00:29:31,620 --> 00:29:34,679
And our goal, of course,
would be to recover

570
00:29:34,680 --> 00:29:36,170
that particular file.

571
00:29:36,170 --> 00:29:37,950
So let's do it.

572
00:29:37,950 --> 00:29:38,860
Yeah, we got it.

573
00:29:38,860 --> 00:29:40,729
We've got a file as well.

574
00:29:40,730 --> 00:29:45,730
And let's see, basically,
this is basically a putti,

575
00:29:46,170 --> 00:29:47,150
so to say.

576
00:29:47,150 --> 00:29:50,880
And this is a working file
that we have recovered

577
00:29:50,880 --> 00:29:52,290
from the drive.

578
00:29:52,290 --> 00:29:55,750
If you wonder, is it possible
to get a signature as race?

579
00:29:55,750 --> 00:29:58,400
Yes, of course, yes, this
is like a fighter step.

580
00:29:58,400 --> 00:30:01,730
But right now we can see
that, that particular file

581
00:30:01,730 --> 00:30:03,990
has a description, and so on.

582
00:30:03,990 --> 00:30:07,520
And if we try to open it up,

583
00:30:07,520 --> 00:30:10,780
we've got the putti over here working.

584
00:30:10,780 --> 00:30:15,560
If the file is or isn't
digitally signed, in general,

585
00:30:15,560 --> 00:30:18,283
our goal would be to
learn more a little bit,

586
00:30:19,530 --> 00:30:23,387
by cutting it off, while
we've got over here,

587
00:30:23,387 --> 00:30:25,409
the data structure.

588
00:30:25,410 --> 00:30:28,573
So this is basically the setup over here.

589
00:30:29,625 --> 00:30:34,550
And if we're to do it, then
basically we will be able to

590
00:30:34,550 --> 00:30:39,550
put it into the array and
then cut off all the details.

591
00:30:39,730 --> 00:30:43,170
So this is basically the approach.

592
00:30:43,170 --> 00:30:45,263
Now, once we do it,

593
00:30:46,830 --> 00:30:50,020
we can check out if particularly

594
00:30:50,020 --> 00:30:53,393
the file has the digital signature.

595
00:30:54,250 --> 00:30:59,250
Okay, so we got it and the next part

596
00:30:59,320 --> 00:31:02,730
is related with the summary and the tools.

597
00:31:02,730 --> 00:31:06,430
So hopefully you guys enjoyed
what we've seen today.

598
00:31:06,430 --> 00:31:09,720
And hopefully it was an insightful.

599
00:31:09,720 --> 00:31:12,940
And at the end, you've learned basically

600
00:31:12,940 --> 00:31:16,430
how we're able to play
with that memory dump,

601
00:31:16,430 --> 00:31:20,320
how to recover data, how to
play with that disk analysis

602
00:31:20,320 --> 00:31:24,889
after the talk, and how to get
access to the deleted files.

603
00:31:26,190 --> 00:31:28,380
Whenever we like, is the next step to do

604
00:31:28,380 --> 00:31:32,030
for sure is to write a good
Incident Response Plan.

605
00:31:32,030 --> 00:31:34,649
Because everyone we are,

606
00:31:34,650 --> 00:31:36,920
having that kind of stressful situation,

607
00:31:36,920 --> 00:31:39,520
it's always very hard to reapply.

608
00:31:39,520 --> 00:31:42,950
That's why in general, we have to be ready

609
00:31:42,950 --> 00:31:45,230
and to have appropriate toolkit

610
00:31:45,230 --> 00:31:46,760
in order to gather evidence,

611
00:31:46,760 --> 00:31:51,620
so that we've got a nice
analysis like we did today,

612
00:31:51,620 --> 00:31:53,129
in your situation.

613
00:31:53,130 --> 00:31:54,630
Don't forget to get the tools.

614
00:31:55,730 --> 00:32:00,490
They are all free and within on our blog,

615
00:32:00,490 --> 00:32:04,627
you were able to find more
information about what we do,

616
00:32:04,627 --> 00:32:07,070
and in general our team,

617
00:32:07,070 --> 00:32:09,399
including lots of free content,

618
00:32:09,400 --> 00:32:11,880
because our team is very
passionate about it.

619
00:32:11,880 --> 00:32:13,410
Thank you so much, guys,

620
00:32:13,410 --> 00:32:17,683
and hopefully see you on
the next presentations.

