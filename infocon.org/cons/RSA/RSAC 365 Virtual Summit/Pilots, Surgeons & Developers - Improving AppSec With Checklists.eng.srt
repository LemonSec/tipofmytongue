1
00:00:00,230 --> 00:00:01,063
- Hi there.

2
00:00:01,063 --> 00:00:03,250
Welcome to pilots,
surgeons and developers.

3
00:00:03,250 --> 00:00:05,250
How to improve your application security

4
00:00:05,250 --> 00:00:06,850
by using checklists.

5
00:00:06,850 --> 00:00:10,350
My name is Joe Kuemerie, I'm
a Product Security Engineer.

6
00:00:10,350 --> 00:00:13,020
And before we get started, I
do wanna set a disclaimer that

7
00:00:13,020 --> 00:00:15,670
this work is all my own personal work,

8
00:00:15,670 --> 00:00:18,880
while I do security work for my employer.

9
00:00:18,880 --> 00:00:20,619
None of what I'm going to be talking about

10
00:00:20,620 --> 00:00:24,120
is relevant to them, nor have
they endorsed us in any way,

11
00:00:24,120 --> 00:00:25,530
nor should anything I say

12
00:00:25,530 --> 00:00:27,953
be an endorsement of my current employer.

13
00:00:28,870 --> 00:00:30,530
Having said that, welcome to this talk.

14
00:00:30,530 --> 00:00:32,020
I know that we're doing this virtual

15
00:00:32,020 --> 00:00:33,760
and it's gonna be a little bit odd.

16
00:00:33,760 --> 00:00:36,330
However, I am in the live chat

17
00:00:36,330 --> 00:00:38,070
alongside the playback of this.

18
00:00:38,070 --> 00:00:41,070
So at any time if you have
comments, suggestions,

19
00:00:41,070 --> 00:00:42,810
feedback that you'd like to offer,

20
00:00:42,810 --> 00:00:44,790
please feel free to drop it into the chat

21
00:00:44,790 --> 00:00:46,640
I'll be happy to respond.

22
00:00:46,640 --> 00:00:49,790
Additionally, there is
going to be a live session

23
00:00:49,790 --> 00:00:52,500
following this, where we'll
have much more ability

24
00:00:52,500 --> 00:00:54,130
to interact directly,

25
00:00:54,130 --> 00:00:57,020
collaborate on some of the
ideas presented in this talk.

26
00:00:57,020 --> 00:00:59,050
I'd really love to have
you stick around for that

27
00:00:59,050 --> 00:00:59,882
and to have a chance

28
00:00:59,883 --> 00:01:02,570
to interact with you much more personally.

29
00:01:02,570 --> 00:01:05,319
With that we can go ahead
and jump right into the talk.

30
00:01:06,610 --> 00:01:08,730
Scientists that study problems

31
00:01:08,730 --> 00:01:12,250
have classified them into
three basic varieties.

32
00:01:12,250 --> 00:01:15,750
There are simple problems,
there are complicated problems

33
00:01:15,750 --> 00:01:18,150
and there are complex problems.

34
00:01:18,150 --> 00:01:20,630
Simple problems are pretty
much what it says in the box,

35
00:01:20,630 --> 00:01:23,750
something like learning how
to bake a cake from a recipe.

36
00:01:23,750 --> 00:01:26,680
You have a recipe, you
follow the instructions.

37
00:01:26,680 --> 00:01:28,610
And once you learn it,

38
00:01:28,610 --> 00:01:30,620
you basically have a very high likelihood

39
00:01:30,620 --> 00:01:33,040
of success doing the same things

40
00:01:33,040 --> 00:01:36,040
and getting the same steps
with the same results.

41
00:01:36,040 --> 00:01:38,400
Complicated problem is something that's

42
00:01:38,400 --> 00:01:40,650
more like sending a rocket to the moon.

43
00:01:40,650 --> 00:01:42,830
There is not a simple recipe for it.

44
00:01:42,830 --> 00:01:45,880
Often it requires multiple
people collaborating,

45
00:01:45,880 --> 00:01:49,729
coordinating teams with
specialized experience.

46
00:01:49,730 --> 00:01:51,990
However things like the laws of physics

47
00:01:51,990 --> 00:01:53,559
are pretty consistent.

48
00:01:53,560 --> 00:01:56,110
So that once you've learned how to

49
00:01:56,110 --> 00:01:57,850
send one rocket to the moon,

50
00:01:57,850 --> 00:02:01,100
you can usually repeat the
process with similar rockets,

51
00:02:01,100 --> 00:02:03,273
and expect similar results.

52
00:02:04,380 --> 00:02:06,179
Moving on to the complex problems.

53
00:02:06,180 --> 00:02:08,350
Something that is defined as complex,

54
00:02:08,350 --> 00:02:11,065
it's like raising a child. Unlike rockets

55
00:02:11,065 --> 00:02:14,370
that are constructed to
be virtually identical,

56
00:02:14,370 --> 00:02:16,120
each child is unique.

57
00:02:16,120 --> 00:02:20,210
And even more of the
environment of any given child

58
00:02:20,210 --> 00:02:22,960
is different from any other environment.

59
00:02:22,960 --> 00:02:24,940
If you have children, you
know that raising a child

60
00:02:24,940 --> 00:02:27,660
does provide some experience.

61
00:02:27,660 --> 00:02:29,350
But the lessons you learn from one child

62
00:02:29,350 --> 00:02:32,321
do not always directly
apply to another one.

63
00:02:32,321 --> 00:02:36,920
Indeed the techniques that you
may have used for one child

64
00:02:36,920 --> 00:02:39,750
may be completely different and you may be

65
00:02:39,750 --> 00:02:42,733
completely ineffective on
their brother or sister.

66
00:02:43,920 --> 00:02:45,440
In that way, building software

67
00:02:45,440 --> 00:02:48,470
is defined as a complex activity.

68
00:02:48,470 --> 00:02:50,210
By definition, most software

69
00:02:50,210 --> 00:02:52,070
is bringing something into the world

70
00:02:52,070 --> 00:02:54,519
that wasn't previously there.

71
00:02:54,520 --> 00:02:56,670
This means that like a child,

72
00:02:56,670 --> 00:02:58,609
there are some common similarities

73
00:02:58,610 --> 00:03:00,380
between software solutions

74
00:03:00,380 --> 00:03:03,810
but there are also a number
of unique circumstances.

75
00:03:03,810 --> 00:03:07,100
Building a secure application
is also something that cannot

76
00:03:07,100 --> 00:03:10,650
be completely controlled
by a simple set of steps.

77
00:03:10,650 --> 00:03:15,410
And it does require active
participation by developers

78
00:03:15,410 --> 00:03:18,859
as well as those who help
to support the developers.

79
00:03:18,860 --> 00:03:21,140
Giving developers freedom to innovate

80
00:03:21,140 --> 00:03:24,429
while providing a usable
method to remind them

81
00:03:24,430 --> 00:03:26,890
of what they know and
what they need to do,

82
00:03:26,890 --> 00:03:29,632
is the purpose of building our checklists.

83
00:03:31,320 --> 00:03:34,190
We'll start with some simple definitions

84
00:03:34,190 --> 00:03:37,120
just to make sure that
we're all on the same page.

85
00:03:37,120 --> 00:03:41,320
A checklist is basically a set
of simple, straightforward,

86
00:03:41,320 --> 00:03:43,780
easy to assess criteria.

87
00:03:43,780 --> 00:03:46,570
Should be a well-targeted, detailed enough

88
00:03:46,570 --> 00:03:49,769
for a user to assess if
an item is completed.

89
00:03:49,770 --> 00:03:52,983
But also not get bogged
down with unnecessarily,

90
00:03:54,070 --> 00:03:55,970
overly complex details

91
00:03:55,970 --> 00:03:59,343
or items that are not relevant
to their current task.

92
00:04:00,380 --> 00:04:02,890
There are two major types of checklists.

93
00:04:02,890 --> 00:04:06,220
The first is defined as do list

94
00:04:06,220 --> 00:04:10,230
or more accurately
called, call do response.

95
00:04:10,230 --> 00:04:12,320
This is what most people commonly picture

96
00:04:12,320 --> 00:04:14,733
as a checklist completion process.

97
00:04:16,019 --> 00:04:19,769
And the do list method, the
checklist drives the process

98
00:04:19,769 --> 00:04:21,709
to step by step approach.

99
00:04:21,709 --> 00:04:23,729
The user works the checklist,

100
00:04:23,730 --> 00:04:25,580
performing each action in series

101
00:04:25,580 --> 00:04:28,320
and then recording the results.

102
00:04:28,320 --> 00:04:30,490
This method can reduce redundancy

103
00:04:30,490 --> 00:04:33,250
as there is no need for follow-up process,

104
00:04:33,250 --> 00:04:35,900
since the required
actions are usually taken

105
00:04:35,900 --> 00:04:39,263
during the execution of this
style of checklist completion.

106
00:04:40,780 --> 00:04:44,179
One of the disadvantages is,

107
00:04:44,180 --> 00:04:47,500
this method can lead to
steps getting skipped

108
00:04:47,500 --> 00:04:50,150
or emitted in high
distraction environments.

109
00:04:50,150 --> 00:04:53,099
It's very easy for a user to skip a step,

110
00:04:53,100 --> 00:04:55,700
and if the execution
sequence is interrupted

111
00:04:55,700 --> 00:04:58,543
and not notice the omission
until it's too late.

112
00:05:00,560 --> 00:05:03,660
While many of our environments
are not as distraction prone

113
00:05:03,660 --> 00:05:07,070
as airline cockpits or operating theaters,

114
00:05:07,070 --> 00:05:09,800
I think that in some
instances such as building

115
00:05:09,800 --> 00:05:13,390
and releasing security fixes,
in response to an incident

116
00:05:14,240 --> 00:05:17,040
perceived overhead of a do list process,

117
00:05:17,040 --> 00:05:20,503
may feel like unnecessary
overhead for the stakeholders.

118
00:05:22,290 --> 00:05:24,540
Second method of checklist completion

119
00:05:24,540 --> 00:05:26,560
is called challenge response.

120
00:05:26,560 --> 00:05:27,970
It's also better described as

121
00:05:27,970 --> 00:05:30,633
challenge verification response.

122
00:05:31,610 --> 00:05:33,450
In this method we're using the checklist

123
00:05:33,450 --> 00:05:35,740
as a backup procedure.

124
00:05:35,740 --> 00:05:39,290
The user performs whatever
actions they need to take.

125
00:05:39,290 --> 00:05:42,480
In our case, developers
write code, building software

126
00:05:42,480 --> 00:05:44,930
according to whatever processes

127
00:05:44,930 --> 00:05:47,910
and quality criteria you have in place.

128
00:05:47,910 --> 00:05:49,950
And then they use that checklist

129
00:05:49,950 --> 00:05:53,640
to verify that what they
have done is in accordance

130
00:05:53,640 --> 00:05:56,223
and meets all of the
checklist requirements.

131
00:05:57,140 --> 00:05:58,740
This challenge response pattern

132
00:05:58,740 --> 00:06:01,380
is most commonly used
pattern by major airlines

133
00:06:01,380 --> 00:06:05,343
as well as other high
sensitivity environments.

134
00:06:06,550 --> 00:06:10,360
Now, one or both these methods,

135
00:06:10,360 --> 00:06:13,200
may not work for you specifically

136
00:06:13,200 --> 00:06:15,030
based on your culture, your environment,

137
00:06:15,030 --> 00:06:17,799
your requirements and that's okay.

138
00:06:17,800 --> 00:06:19,120
The purpose of this talk

139
00:06:19,120 --> 00:06:22,160
is to give an overview
of different methods,

140
00:06:22,160 --> 00:06:26,100
how they've been enacted in the real world

141
00:06:26,100 --> 00:06:27,810
and to give you a starting point

142
00:06:27,810 --> 00:06:30,320
to take back and to build on.

143
00:06:30,320 --> 00:06:33,070
There's not a one size fits all solution.

144
00:06:33,070 --> 00:06:35,349
Checklists have to take into account

145
00:06:35,350 --> 00:06:38,630
corporate culture,
development methodologies,

146
00:06:38,630 --> 00:06:40,969
how your security teams work and interact

147
00:06:40,970 --> 00:06:42,390
with development teams,

148
00:06:42,390 --> 00:06:45,013
as well as your people's
preferred work styles.

149
00:06:46,080 --> 00:06:49,609
Even in the airline industry
with identical equipment,

150
00:06:49,610 --> 00:06:52,770
each airline has their
own preferred work style.

151
00:06:52,770 --> 00:06:55,620
And thus a unique set
of checklists and styles

152
00:06:55,620 --> 00:06:59,040
that are suited for how that
corporate culture works.

153
00:06:59,040 --> 00:07:00,830
It's also well within the scope

154
00:07:00,830 --> 00:07:04,640
of a checklist implementation,
planned on a hybrid solution,

155
00:07:04,640 --> 00:07:06,820
where some checklists are do lists

156
00:07:06,820 --> 00:07:09,473
and others are challenge response.

157
00:07:11,920 --> 00:07:14,693
We'll cover a little bit
of what a checklist is now.

158
00:07:15,650 --> 00:07:16,483
As I've said,

159
00:07:16,483 --> 00:07:19,370
a checklist is not intended
to be a comprehensive guide,

160
00:07:19,370 --> 00:07:22,893
nor should it replace a
well-defined secure coding standard.

161
00:07:23,870 --> 00:07:26,050
Comprehensive security standards,

162
00:07:26,050 --> 00:07:30,100
detailed process documentation
and strong security controls

163
00:07:30,100 --> 00:07:31,493
are also essential.

164
00:07:32,440 --> 00:07:35,770
Without any of those, a
checklist is essentially useless

165
00:07:35,770 --> 00:07:39,530
as the purpose of a checklist
is to be a memory aid

166
00:07:39,530 --> 00:07:43,359
and to cause the user to
stop and think before acting.

167
00:07:43,360 --> 00:07:45,410
A good checklist will raise

168
00:07:45,410 --> 00:07:48,280
high level awareness of risky situations

169
00:07:48,280 --> 00:07:50,479
and provide a limited set of options.

170
00:07:50,480 --> 00:07:53,083
But it's not going to
cover all situations.

171
00:07:54,500 --> 00:07:57,620
Just as flight checklists rely on training

172
00:07:57,620 --> 00:08:00,420
and detailed operational procedures,

173
00:08:00,420 --> 00:08:03,890
application security checklists
must also be backed up

174
00:08:03,890 --> 00:08:06,760
by good security training
and written resources

175
00:08:06,760 --> 00:08:09,060
for developers to use.

176
00:08:09,060 --> 00:08:11,260
All the checklists in the
world will not help someone

177
00:08:11,260 --> 00:08:14,203
who does not have the
necessary background knowledge.

178
00:08:15,470 --> 00:08:17,710
Checklist must be usable.

179
00:08:17,710 --> 00:08:20,409
If something is too long or complicated,

180
00:08:20,410 --> 00:08:22,480
that won't get properly addressed.

181
00:08:22,480 --> 00:08:26,500
Human memory is fallible and
human attention to detail,

182
00:08:26,500 --> 00:08:28,920
especially when working on routine matters

183
00:08:28,920 --> 00:08:31,530
that are perceived as mundane

184
00:08:31,530 --> 00:08:34,199
can cause items to be easily overlooked.

185
00:08:34,200 --> 00:08:37,409
Especially in the midst
of complicated activities,

186
00:08:37,409 --> 00:08:39,799
such as preparing to cut someone open,

187
00:08:39,799 --> 00:08:42,309
attempting to get 200,000 pounds of metal,

188
00:08:42,309 --> 00:08:44,880
fuel and people to fly through the air.

189
00:08:44,880 --> 00:08:47,290
Or building a system to allow customers

190
00:08:47,290 --> 00:08:49,069
to securely use their credit cards

191
00:08:49,070 --> 00:08:51,093
and purchase things over the internet.

192
00:08:52,980 --> 00:08:55,640
Good checklist must be precise.

193
00:08:55,640 --> 00:08:58,680
They must be relevant
to the situation at hand

194
00:08:58,680 --> 00:09:02,410
and describe actions
that are both meaningful

195
00:09:02,410 --> 00:09:05,110
and actionable to the user.

196
00:09:05,110 --> 00:09:08,840
They must be engaging for the
user and work as a memory aid.

197
00:09:08,840 --> 00:09:11,870
Not a rote list of steps that
just have to be checked off

198
00:09:11,870 --> 00:09:14,253
in order to get to the
next phase of your work.

199
00:09:15,980 --> 00:09:18,180
Just like agile development techniques,

200
00:09:18,180 --> 00:09:21,000
when you give the developers
leeway to innovate,

201
00:09:21,000 --> 00:09:24,080
a good checklist will
empower those developers

202
00:09:24,080 --> 00:09:26,453
to build more secure solutions.

203
00:09:30,310 --> 00:09:32,880
In order to measure the
effectiveness of our checklists,

204
00:09:32,880 --> 00:09:37,880
we need to be able to
verify their effectiveness.

205
00:09:38,040 --> 00:09:40,219
Across multiple industries, aviation,

206
00:09:40,220 --> 00:09:43,470
medicine and construction or
some of the major industries

207
00:09:43,470 --> 00:09:45,240
with well-documented successes

208
00:09:45,240 --> 00:09:49,090
in using checklists to
drive effectiveness.

209
00:09:49,090 --> 00:09:51,620
While we in the security
industry are still evolving

210
00:09:51,620 --> 00:09:55,030
our methods of measurement,
the effective use of checklist

211
00:09:55,030 --> 00:09:58,400
will raise communication,
increase collaboration

212
00:09:58,400 --> 00:10:01,943
and it should result in more
secure systems moving forward.

213
00:10:03,580 --> 00:10:05,600
Can you absolutely measure

214
00:10:05,600 --> 00:10:08,010
a reduction in security incidents?

215
00:10:08,010 --> 00:10:10,410
That's a definite challenge.

216
00:10:10,410 --> 00:10:13,319
It depends on your
organization's used cases

217
00:10:13,320 --> 00:10:15,510
and security maturity.

218
00:10:15,510 --> 00:10:18,870
This can be easier for some
externally facing products,

219
00:10:18,870 --> 00:10:21,790
with the product security
process in place,

220
00:10:21,790 --> 00:10:24,030
with internally developed
and managed systems,

221
00:10:24,030 --> 00:10:25,280
it's a lot more difficult

222
00:10:25,280 --> 00:10:28,610
to have that sort of absolute metrics.

223
00:10:28,610 --> 00:10:31,720
Either way, there is still
some uncertainty involved.

224
00:10:31,720 --> 00:10:34,650
This is straight up reduction
in number of vulnerabilities,

225
00:10:34,650 --> 00:10:36,860
may or may not be directly attributable

226
00:10:36,860 --> 00:10:40,553
to the use the checklist or
any other individual activity.

227
00:10:45,540 --> 00:10:48,199
The aviation industry
has been using checklists

228
00:10:48,200 --> 00:10:51,163
in various forms since at least 1935.

229
00:10:52,100 --> 00:10:54,820
1935 there was a new Boeing test bomber

230
00:10:54,820 --> 00:10:57,893
that was being prototyped
and being tested.

231
00:10:59,140 --> 00:11:01,620
Initially after a smooth takeoff on its,

232
00:11:01,620 --> 00:11:03,600
one of its first flight installed,

233
00:11:03,600 --> 00:11:07,010
turned on one wing, crashed and exploded.

234
00:11:07,010 --> 00:11:09,220
Killed two of the five
members of the crew,

235
00:11:09,220 --> 00:11:11,040
including the pilot,

236
00:11:11,040 --> 00:11:13,790
who was also the chief of
flight testing at the time.

237
00:11:13,790 --> 00:11:18,329
So it's arguable that it was
not lack of pilot experience

238
00:11:18,330 --> 00:11:20,423
that caused the sort of crash.

239
00:11:21,530 --> 00:11:24,010
The investigation that occurred afterwards

240
00:11:24,010 --> 00:11:26,880
revealed that there was
no mechanical issue.

241
00:11:26,880 --> 00:11:31,110
The crash was simply caused
by quote, pilot error.

242
00:11:31,110 --> 00:11:34,220
This airplane was more complex
than most previous models

243
00:11:34,220 --> 00:11:37,360
including having four engines to manage.

244
00:11:37,360 --> 00:11:39,330
At this point, the pilot
had simply forgotten

245
00:11:39,330 --> 00:11:41,590
to release a single locking mechanism

246
00:11:41,590 --> 00:11:43,533
on the elevator and rudder controls.

247
00:11:45,260 --> 00:11:47,710
Newspapers at the time
reported that the airline

248
00:11:47,710 --> 00:11:52,470
was probably too much airplane
for any man, one man to fly.

249
00:11:52,470 --> 00:11:55,870
Boeing nearly went bankrupt
as a result of this.

250
00:11:55,870 --> 00:11:58,560
When the Army Air Corp
chose a Douglas airplane

251
00:11:58,560 --> 00:12:01,323
instead as their primary bomber choice.

252
00:12:02,270 --> 00:12:05,319
Luckily the Air Corp did
purchase a few of these planes

253
00:12:05,320 --> 00:12:07,340
to be used as test planes.

254
00:12:07,340 --> 00:12:09,760
It was a dedicated group of test pilots

255
00:12:09,760 --> 00:12:13,233
who were determined to prove
that this airplane was flyable.

256
00:12:14,350 --> 00:12:15,480
One thing that they did

257
00:12:15,480 --> 00:12:18,970
instead of mandating that there
needed to be more training,

258
00:12:18,970 --> 00:12:21,980
because again, one of the pilots

259
00:12:21,980 --> 00:12:25,030
that crashed the original
plane, was the head of testing.

260
00:12:25,030 --> 00:12:27,680
He had been trained as much as anyone,

261
00:12:27,680 --> 00:12:29,522
if not anyone else in the area.

262
00:12:30,640 --> 00:12:33,569
So what they came up with,
was a set of checklists

263
00:12:33,570 --> 00:12:37,210
to cover takeoff, flight,
landing and taxing.

264
00:12:37,210 --> 00:12:38,863
It was a basic list of things

265
00:12:38,863 --> 00:12:41,810
that the pilots already knew how to do,

266
00:12:41,810 --> 00:12:44,839
but that could easily be
overlooked during complicated

267
00:12:44,840 --> 00:12:46,723
but routine set up for a flight.

268
00:12:48,240 --> 00:12:49,750
That checklist worked.

269
00:12:49,750 --> 00:12:51,450
It demonstrated that the airplane

270
00:12:51,450 --> 00:12:54,230
could in fact be flown successfully.

271
00:12:54,230 --> 00:12:56,440
This airplane became the B-17 bomber

272
00:12:56,440 --> 00:12:57,273
and it ended up being

273
00:12:57,273 --> 00:12:59,763
the third most produced
bomber of all time.

274
00:13:00,960 --> 00:13:03,180
The aviation industry has used checklist

275
00:13:03,180 --> 00:13:05,142
for great effectiveness over the years.

276
00:13:06,170 --> 00:13:09,060
The chart on the left shows
plane crashes per year,

277
00:13:09,060 --> 00:13:12,380
along with corresponding
passenger and crew deaths.

278
00:13:12,380 --> 00:13:14,830
You can see that after the 1940s,

279
00:13:14,830 --> 00:13:16,900
even as the number of flights increased,

280
00:13:16,900 --> 00:13:19,280
the number of crashes decreased.

281
00:13:19,280 --> 00:13:21,310
The chart on the right shows a trend line

282
00:13:21,310 --> 00:13:25,329
of United States commercial
flight hours since 2000,

283
00:13:25,330 --> 00:13:28,950
excluding this current past year as well.

284
00:13:28,950 --> 00:13:32,170
Over the last 18 years, the
number of hours spent in flight

285
00:13:32,170 --> 00:13:33,829
continues to increase.

286
00:13:33,830 --> 00:13:37,083
And yet crashes are rare
and noteworthy events.

287
00:13:41,180 --> 00:13:43,426
Similar willing in medicine,

288
00:13:43,427 --> 00:13:47,220
the use of surgical checklists
has been increasing.

289
00:13:47,220 --> 00:13:50,310
The checklist manifesto by Atul Gawande,

290
00:13:50,310 --> 00:13:52,910
which is one of the
inspirations for this talk,

291
00:13:52,910 --> 00:13:55,880
describes a process by which Dr. Gawande

292
00:13:55,880 --> 00:13:58,453
pioneered the concept of
checklist in medicine.

293
00:13:59,330 --> 00:14:01,380
There've been studies that show consistent

294
00:14:01,380 --> 00:14:04,620
and repeatable improvement
in surgical outcomes,

295
00:14:04,620 --> 00:14:06,783
in locations where checklists are used.

296
00:14:07,840 --> 00:14:10,210
The use of checklist provides noticeable

297
00:14:10,210 --> 00:14:12,020
and measurable improvements,

298
00:14:12,020 --> 00:14:14,030
regardless of the resources available

299
00:14:14,030 --> 00:14:15,990
to the testing hospital.

300
00:14:15,990 --> 00:14:18,900
The study has expand a
range of institutions,

301
00:14:18,900 --> 00:14:22,079
from some of the top tier institutions

302
00:14:22,080 --> 00:14:24,370
in some of the wealthiest
countries in the world,

303
00:14:24,370 --> 00:14:29,370
to underfunded crowded hospitals
in developing economies.

304
00:14:29,730 --> 00:14:30,840
The used checklists,

305
00:14:30,840 --> 00:14:33,503
has resulted in improvements
across the board.

306
00:14:37,950 --> 00:14:39,290
This is an example

307
00:14:39,290 --> 00:14:42,390
of the World Health
Organization surgical checklist.

308
00:14:42,390 --> 00:14:45,800
Some things to note are
the simplicity of design,

309
00:14:45,800 --> 00:14:48,880
the questions that have
clear and meaningful answers,

310
00:14:48,880 --> 00:14:52,050
and the categorization to
help people focus on the items

311
00:14:52,050 --> 00:14:55,483
that are most relevant to
them at any particular phase.

312
00:14:56,410 --> 00:14:58,410
Also note that the checklist calls out

313
00:14:58,410 --> 00:15:00,790
that it is not a comprehensive resource

314
00:15:00,790 --> 00:15:03,969
and the customizations by
those who use the checklist

315
00:15:03,970 --> 00:15:05,713
are actively encouraged.

316
00:15:06,740 --> 00:15:09,350
Collaboration and a feeling of ownership

317
00:15:09,350 --> 00:15:12,310
are important factors in the
successful implementation

318
00:15:12,310 --> 00:15:13,673
of a checklist program.

319
00:15:14,788 --> 00:15:18,690
We use the checklist in development
and application security

320
00:15:18,690 --> 00:15:21,150
can provide meaningful security benefits

321
00:15:21,150 --> 00:15:23,333
in the posture of our applications.

322
00:15:27,140 --> 00:15:29,140
We're not gonna move on
to the nuts and bolts

323
00:15:29,140 --> 00:15:30,080
of how we can start

324
00:15:30,080 --> 00:15:33,070
building a checklist for our organization.

325
00:15:33,070 --> 00:15:35,670
There are a number of items
that we're going to cover.

326
00:15:35,670 --> 00:15:37,010
We'll define the ground rules

327
00:15:37,010 --> 00:15:39,100
and objectives for our checklist.

328
00:15:39,100 --> 00:15:41,040
We'll define multiple checklists

329
00:15:41,040 --> 00:15:43,742
as no single checklist
should ever cover everything.

330
00:15:44,690 --> 00:15:46,660
We'll then cover the basic questions

331
00:15:46,660 --> 00:15:49,660
that are likely to apply
to many different areas.

332
00:15:49,660 --> 00:15:52,992
And also some situational
questions that are more specific.

333
00:15:53,920 --> 00:15:55,900
Again I wanna remind
you that the chat window

334
00:15:55,900 --> 00:15:57,160
is there for your use.

335
00:15:57,160 --> 00:15:59,100
If you have any questions, feedback,

336
00:15:59,100 --> 00:16:00,520
please feel free to put them in there.

337
00:16:00,520 --> 00:16:01,640
I'm happy to answer them

338
00:16:01,640 --> 00:16:03,280
as we go on through this discussion.

339
00:16:03,280 --> 00:16:05,530
And there'll be some
time at the end as well.

340
00:16:06,610 --> 00:16:09,050
The main idea that I wanna get across,

341
00:16:09,050 --> 00:16:12,490
is that building a checklist
is a collaborative process.

342
00:16:12,490 --> 00:16:15,580
A checklist cannot be
another set of processes

343
00:16:15,580 --> 00:16:18,143
that we inflict on the development teams.

344
00:16:19,330 --> 00:16:22,120
A primary purpose and value of checklists

345
00:16:22,120 --> 00:16:24,090
that they contain a collaboration

346
00:16:24,090 --> 00:16:27,880
between security knowledge
and development processes.

347
00:16:27,880 --> 00:16:30,660
It must be built by direct involvement

348
00:16:30,660 --> 00:16:33,740
and open to changes
coming from our consumers,

349
00:16:33,740 --> 00:16:34,823
the developers.

350
00:16:38,070 --> 00:16:39,420
We'll start our ground rules

351
00:16:39,420 --> 00:16:41,979
by building an effective checklist

352
00:16:41,980 --> 00:16:44,340
from the aviation and medical world.

353
00:16:44,340 --> 00:16:47,310
Where our checklists have
been shown to work well.

354
00:16:47,310 --> 00:16:49,050
Our ground rules will guide us.

355
00:16:49,050 --> 00:16:51,030
And as noted in the previous slide,

356
00:16:51,030 --> 00:16:52,510
our intention is to increase

357
00:16:52,510 --> 00:16:54,873
communication and collaboration.

358
00:16:57,310 --> 00:17:00,349
Our checklists are going
to serve a dual purpose.

359
00:17:00,350 --> 00:17:02,100
Their explicit purposes of course,

360
00:17:02,100 --> 00:17:04,829
going to ensure that rote tasks

361
00:17:04,829 --> 00:17:07,143
are consistently implemented.

362
00:17:07,143 --> 00:17:09,710
That the developer's execution

363
00:17:09,710 --> 00:17:11,990
and ongoing reevaluation of the checklist

364
00:17:11,990 --> 00:17:15,319
also serves as an important
communication bridge

365
00:17:15,319 --> 00:17:18,139
between the developers and
us security professionals

366
00:17:18,140 --> 00:17:19,340
who are supporting them.

367
00:17:20,700 --> 00:17:22,760
We'll take some lessons from surgery,

368
00:17:22,760 --> 00:17:25,609
where taking time for everyone on the team

369
00:17:25,609 --> 00:17:28,139
to introduce themselves and their roles

370
00:17:28,140 --> 00:17:31,030
results in better patient outcomes.

371
00:17:31,030 --> 00:17:33,363
And we'll apply that to
application security.

372
00:17:35,520 --> 00:17:39,290
If the developers know who
their security people are

373
00:17:39,290 --> 00:17:42,810
and understand that the
goals we're aiming for,

374
00:17:42,810 --> 00:17:45,460
then there can be a
larger sense of teamwork

375
00:17:45,460 --> 00:17:48,460
and a willingness to stop
and ask about things,

376
00:17:48,460 --> 00:17:50,860
rather than just plowing
ahead with development.

377
00:17:54,700 --> 00:17:56,750
Let's take a moment to
review this block of text,

378
00:17:56,750 --> 00:17:58,770
describing what the aviation studies

379
00:17:58,770 --> 00:18:00,893
believe their checklist should achieve.

380
00:18:07,450 --> 00:18:08,430
I'm not going to read
through the whole slide

381
00:18:08,430 --> 00:18:11,980
and you can feel free to
come back to this later.

382
00:18:11,980 --> 00:18:13,690
But essentially we're gonna boil it down

383
00:18:13,690 --> 00:18:17,680
as checklists must be
standardized to a certain extent

384
00:18:17,680 --> 00:18:20,340
and have to at least be consistent.

385
00:18:20,340 --> 00:18:22,310
They should serve as an aid to memory

386
00:18:22,310 --> 00:18:24,543
and a backup for our processes.

387
00:18:25,550 --> 00:18:28,656
The process of working through a checklist

388
00:18:28,656 --> 00:18:30,409
should be logically ordered.

389
00:18:30,410 --> 00:18:32,420
And the checklist should
provide a framework

390
00:18:32,420 --> 00:18:33,730
for both the inter team

391
00:18:33,730 --> 00:18:36,913
and cross team communication
and collaboration.

392
00:18:38,490 --> 00:18:40,160
Our checklist should be designed

393
00:18:40,160 --> 00:18:45,160
to allow for any team member,
regardless of role, seniority

394
00:18:45,200 --> 00:18:49,393
or technical skills, to detect
and call out anomalous items.

395
00:18:50,600 --> 00:18:53,290
Nobody can know or see everything.

396
00:18:53,290 --> 00:18:55,730
Sometimes detecting a
potential vulnerability

397
00:18:55,730 --> 00:18:58,340
can come from an unexpected quarter.

398
00:18:58,340 --> 00:19:00,639
Such as, say a project manager

399
00:19:00,640 --> 00:19:03,410
who becomes more aware
of data privacy standards

400
00:19:03,410 --> 00:19:06,503
by being exposed to the
concept on a checklist.

401
00:19:07,470 --> 00:19:10,950
This can really help those
who are new to the team,

402
00:19:10,950 --> 00:19:13,840
those are who lesser
experienced developers,

403
00:19:13,840 --> 00:19:17,149
those who may not have
primary development roles,

404
00:19:17,150 --> 00:19:19,410
to be empowered, to notice

405
00:19:19,410 --> 00:19:21,870
and call out some vulnerabilities.

406
00:19:21,870 --> 00:19:23,739
Essentially like in an operating room

407
00:19:23,740 --> 00:19:24,830
where there is a checklist

408
00:19:24,830 --> 00:19:26,220
and where there's this team introduction

409
00:19:26,220 --> 00:19:30,120
and comfortability with
the members of the team.

410
00:19:30,120 --> 00:19:33,250
Non-surgeons in general
can feel more comfortable

411
00:19:33,250 --> 00:19:34,110
in calling it,

412
00:19:34,110 --> 00:19:37,330
noticing calling out
potentially risky situations.

413
00:19:37,330 --> 00:19:40,159
This is something that I
think would greatly benefit

414
00:19:40,160 --> 00:19:42,670
in being translated to the
application security realm

415
00:19:42,670 --> 00:19:44,710
and have that level of trust

416
00:19:44,710 --> 00:19:47,460
among the development teams
or with the security teams.

417
00:19:50,270 --> 00:19:53,000
Finally, the TMC use checklists

418
00:19:53,000 --> 00:19:56,410
must have a sense of buy-in and ownership.

419
00:19:56,410 --> 00:19:57,740
Those teams need to feel that

420
00:19:57,740 --> 00:20:00,170
the checklist items are relevant,

421
00:20:00,170 --> 00:20:03,420
that they can be effectively
executed and evaluated.

422
00:20:03,420 --> 00:20:05,150
And they also have to understand

423
00:20:05,150 --> 00:20:06,690
and be committed to the purpose

424
00:20:06,690 --> 00:20:09,453
behind each of the items on the checklist.

425
00:20:10,300 --> 00:20:13,800
Any irrelevant or ineffective
items on a checklist

426
00:20:13,800 --> 00:20:16,450
can lead to minimization of use

427
00:20:16,450 --> 00:20:19,900
or even outright disregard
of the checklist.

428
00:20:19,900 --> 00:20:23,030
This can give us yet another
failed security initiative

429
00:20:23,030 --> 00:20:25,473
and even more exposed vulnerabilities.

430
00:20:29,180 --> 00:20:32,030
In aviation they don't
have a single checklist

431
00:20:32,030 --> 00:20:35,310
and neither should we
in application security.

432
00:20:35,310 --> 00:20:36,950
Just as there are different checklists

433
00:20:36,950 --> 00:20:40,480
for different phases of
flight, pre flight, takeoff,

434
00:20:40,480 --> 00:20:42,700
standard flight and landing,

435
00:20:42,700 --> 00:20:46,730
as well as checklists designed
for emergency situations,

436
00:20:46,730 --> 00:20:48,960
we should also have a number of checklists

437
00:20:48,960 --> 00:20:51,403
that are appropriate
for various scenarios.

438
00:20:52,880 --> 00:20:55,420
The cognitive redundancy
provided by checklists

439
00:20:55,420 --> 00:20:57,400
can be a benefit in all phases

440
00:20:57,400 --> 00:21:00,053
of our application security
development life cycle.

441
00:21:03,120 --> 00:21:06,179
Checklists should cover our
standard operating procedures

442
00:21:06,180 --> 00:21:08,840
and should be able to
be used by developers

443
00:21:08,840 --> 00:21:11,840
as they go about their
day-to-day business.

444
00:21:11,840 --> 00:21:14,810
Designing, writing,
testing and deploying code.

445
00:21:14,810 --> 00:21:16,990
Just as airline pilots use their checklist

446
00:21:16,990 --> 00:21:18,930
to ensure that they do
not forget to enable

447
00:21:18,930 --> 00:21:20,930
critical settings during flight,

448
00:21:20,930 --> 00:21:23,670
developers should use our
checklist to have a reference

449
00:21:23,670 --> 00:21:26,163
to remind them how to build secure code.

450
00:21:27,600 --> 00:21:29,139
Straightened on level flight,

451
00:21:29,140 --> 00:21:32,000
still requires monitoring and adjustment.

452
00:21:32,000 --> 00:21:35,240
Standard development processes
can integrate checklists

453
00:21:35,240 --> 00:21:38,173
into their workflow
with minimal disruption.

454
00:21:40,550 --> 00:21:43,240
There are also those more
complicated scenarios

455
00:21:43,240 --> 00:21:45,980
that require more specialized knowledge.

456
00:21:45,980 --> 00:21:49,350
These scenarios can also
benefit in checklists.

457
00:21:49,350 --> 00:21:51,560
Development of high risk components

458
00:21:51,560 --> 00:21:54,330
brought the indication cryptography

459
00:21:54,330 --> 00:21:56,169
or any other high risk areas,

460
00:21:56,170 --> 00:22:00,470
should either have specific
steps or even entire checklist

461
00:22:00,470 --> 00:22:03,013
for their covering
their specific scenario.

462
00:22:03,910 --> 00:22:05,630
Checklists can also be used

463
00:22:05,630 --> 00:22:09,003
to effectively respond in
an emergency situations.

464
00:22:09,960 --> 00:22:12,860
When there are mechanical
issues with an airplane,

465
00:22:12,860 --> 00:22:14,879
there are numerous
troubleshooting checklists

466
00:22:14,880 --> 00:22:17,100
that the pilots can work from.

467
00:22:17,100 --> 00:22:21,159
Similarly, we can build
checklists for incident response,

468
00:22:21,160 --> 00:22:23,860
breach disclosure and other high risk,

469
00:22:23,860 --> 00:22:25,959
high pressure scenarios.

470
00:22:25,960 --> 00:22:28,000
Having an agreed upon set of steps

471
00:22:28,000 --> 00:22:29,850
that have been thought out ahead of time

472
00:22:29,850 --> 00:22:33,659
and shared across an organization
can help prevent missteps

473
00:22:33,660 --> 00:22:35,913
and mistakes in the heat of the moment.

474
00:22:43,480 --> 00:22:45,160
Our checklist shouldn't be something

475
00:22:45,160 --> 00:22:48,640
that we impose on developers
from the security group.

476
00:22:48,640 --> 00:22:50,720
Collaboration is essential.

477
00:22:50,720 --> 00:22:54,450
It provides both the sense of
ownership over the process,

478
00:22:54,450 --> 00:22:57,290
as well as the feelings that

479
00:22:57,290 --> 00:22:59,190
to ensure that the items are relevant

480
00:22:59,190 --> 00:23:02,363
and can all provide the expected results.

481
00:23:03,350 --> 00:23:05,840
Another benefits of checklists

482
00:23:05,840 --> 00:23:08,639
is not just from going through the items,

483
00:23:08,640 --> 00:23:11,133
a major benefit is
improvement in communication.

484
00:23:12,220 --> 00:23:14,610
surgical teams that know each other,

485
00:23:14,610 --> 00:23:16,830
even just through a quick
introduction of names

486
00:23:16,830 --> 00:23:18,909
and titles just before a surgery,

487
00:23:18,910 --> 00:23:22,480
are more effective and have
a better patient outcome.

488
00:23:22,480 --> 00:23:25,350
This effectiveness is
driven by communication.

489
00:23:25,350 --> 00:23:27,320
When you have names to put with faces,

490
00:23:27,320 --> 00:23:29,629
it humanizes everyone in the group.

491
00:23:29,630 --> 00:23:31,470
It increases the sense of ownership

492
00:23:31,470 --> 00:23:33,070
and makes people feel more comfortable

493
00:23:33,070 --> 00:23:35,253
with calling out those potential issues.

494
00:23:36,480 --> 00:23:39,440
Checklists are not a one
size fits all solution.

495
00:23:39,440 --> 00:23:41,280
Checklists need to be customized

496
00:23:41,280 --> 00:23:43,980
to fit your corporate culture
development processes,

497
00:23:43,980 --> 00:23:46,270
your tooling checklists choices

498
00:23:46,270 --> 00:23:49,550
and to meet the needs of the
software you're building.

499
00:23:49,550 --> 00:23:51,530
In order to build a good checklist,

500
00:23:51,530 --> 00:23:53,970
you're going to have to collaborate.

501
00:23:53,970 --> 00:23:55,280
You're going to have to collaborate

502
00:23:55,280 --> 00:23:58,580
with lots of non-security
people and talk about,

503
00:23:58,580 --> 00:24:01,143
let's talk about some
good ways to do just that.

504
00:24:04,430 --> 00:24:07,000
We'll start with the major
consumers of our checklist,

505
00:24:07,000 --> 00:24:08,093
the developers.

506
00:24:09,210 --> 00:24:12,070
They need to feel both
encouraged to use them

507
00:24:12,070 --> 00:24:15,639
as well as empowered to
change them as necessary.

508
00:24:15,640 --> 00:24:17,870
There's usually, a bit of a tension

509
00:24:17,870 --> 00:24:20,550
between security groups and developers.

510
00:24:20,550 --> 00:24:22,409
We all know that the most secure system

511
00:24:22,410 --> 00:24:25,313
is one that's completely
isolated and does nothing.

512
00:24:26,620 --> 00:24:30,000
Developers on the other hand
have different incentives.

513
00:24:30,000 --> 00:24:31,120
They get paid based on

514
00:24:31,120 --> 00:24:34,580
how many potential security
vulnerabilities up, sorry.

515
00:24:34,580 --> 00:24:37,943
I mean actual features, that
they can expose to the world.

516
00:24:39,100 --> 00:24:41,379
When building checklists with developers,

517
00:24:41,380 --> 00:24:45,287
we should work with them,
so that we understand how

518
00:24:45,287 --> 00:24:47,900
and they understand how
every item on the checklist

519
00:24:47,900 --> 00:24:50,450
helps their systems to be more reliable,

520
00:24:50,450 --> 00:24:53,410
more available and more stable.

521
00:24:53,410 --> 00:24:56,450
Just saying it's more secure to do X,

522
00:24:56,450 --> 00:24:59,483
is usually not a winning
strategy for collaboration.

523
00:25:04,210 --> 00:25:06,470
Having checklists that
span multiple groups

524
00:25:06,470 --> 00:25:08,410
and include operations teams

525
00:25:08,410 --> 00:25:11,640
can also help with both
day-to-day operations,

526
00:25:11,640 --> 00:25:13,513
as well as incident response.

527
00:25:14,540 --> 00:25:16,270
Risk comes from everywhere.

528
00:25:16,270 --> 00:25:18,350
Maintaining good
communication with people,

529
00:25:18,350 --> 00:25:20,550
keeping our systems
running day in and day out,

530
00:25:20,550 --> 00:25:22,590
can be very beneficial.

531
00:25:22,590 --> 00:25:25,179
Checklists are also facilitate

532
00:25:25,180 --> 00:25:28,940
knowledge of people and
roles across groups.

533
00:25:28,940 --> 00:25:31,270
Again leads to increased communication,

534
00:25:31,270 --> 00:25:35,330
increased improvements in things
such as incident response,

535
00:25:35,330 --> 00:25:37,830
where there is a central
cross team collaboration.

536
00:25:41,540 --> 00:25:43,240
Using checklists also provides

537
00:25:43,240 --> 00:25:45,010
more effective communication openings

538
00:25:45,010 --> 00:25:47,440
between different security groups.

539
00:25:47,440 --> 00:25:51,070
Good working relationships
with infrastructure security,

540
00:25:51,070 --> 00:25:53,750
enterprise security, risk management

541
00:25:53,750 --> 00:25:56,120
and others security eccentric teams,

542
00:25:56,120 --> 00:25:57,689
is enhanced by the knowledge

543
00:25:57,690 --> 00:26:00,870
that is commonly known
playbook for everyone to use

544
00:26:00,870 --> 00:26:02,503
based upon these checklists.

545
00:26:07,400 --> 00:26:10,380
We even need to collaborate
with management.

546
00:26:10,380 --> 00:26:13,910
As the ones who set priorities
and sign the paychecks,

547
00:26:13,910 --> 00:26:16,810
management needs to have an
understanding of their power

548
00:26:16,810 --> 00:26:21,480
to cause essential security
processes to be circumvented.

549
00:26:21,480 --> 00:26:23,420
Management should have an understanding

550
00:26:23,420 --> 00:26:27,170
of how performing security
related work can be a benefit.

551
00:26:27,170 --> 00:26:29,900
The benefits of a more secure code base

552
00:26:29,900 --> 00:26:32,973
can be expressed in ways
that management understands.

553
00:26:34,150 --> 00:26:37,410
What's one of the things that
management best understands?

554
00:26:37,410 --> 00:26:39,350
Cold hard cash.

555
00:26:39,350 --> 00:26:41,730
We can demonstrate that
more secure systems

556
00:26:41,730 --> 00:26:44,970
are more reliable and
more reliable systems

557
00:26:44,970 --> 00:26:46,650
can lead to more users.

558
00:26:46,650 --> 00:26:49,430
More users leads to more revenue.

559
00:26:49,430 --> 00:26:52,090
That's a direct goal that
management can get on board with

560
00:26:52,090 --> 00:26:54,100
and help them to understand

561
00:26:54,100 --> 00:26:56,250
that an investment in secure code

562
00:26:56,250 --> 00:26:57,810
is an investment in good code

563
00:26:57,810 --> 00:26:59,659
and an investment in the bottom line.

564
00:27:02,900 --> 00:27:05,120
As we've covered a bit
of how to collaborate

565
00:27:05,120 --> 00:27:07,949
and build checklists, there
are also some anti-patterns

566
00:27:07,950 --> 00:27:09,620
that we should be aware of

567
00:27:09,620 --> 00:27:13,429
so that we can avoid
specific problematic areas

568
00:27:13,430 --> 00:27:15,460
as we collaborate with
the development teams

569
00:27:15,460 --> 00:27:17,423
to build these checklists.

570
00:27:18,840 --> 00:27:21,933
One of the most significant
anti-patterns is length.

571
00:27:22,890 --> 00:27:26,610
Checklists have to be
efficient, not comprehensive.

572
00:27:26,610 --> 00:27:29,469
This is where it helps to
have a good understanding

573
00:27:29,470 --> 00:27:33,520
of your systems and your major
vulnerability categories.

574
00:27:33,520 --> 00:27:36,240
You must be ruthless in your process

575
00:27:36,240 --> 00:27:40,000
to ensure that only highly
relevant, highly probable

576
00:27:40,000 --> 00:27:43,380
and highly impactful items
are on your checklists.

577
00:27:43,380 --> 00:27:46,050
This also helps increase
the relevancy of them

578
00:27:46,050 --> 00:27:49,053
and therefore the
adaptability and use of them.

579
00:27:51,570 --> 00:27:54,120
Your checklist needed to be simple.

580
00:27:54,120 --> 00:27:57,709
Complexity and ambiguity
are counterproductive.

581
00:27:57,710 --> 00:28:01,000
Every item on your checklist
should be easy to understand.

582
00:28:01,000 --> 00:28:02,670
The steps to complete that item

583
00:28:02,670 --> 00:28:05,503
must be clear cut and well defined.

584
00:28:08,740 --> 00:28:11,493
Finally, your checklists
have to be relevant.

585
00:28:12,420 --> 00:28:15,110
If you give a developer a
laundry list of terminology

586
00:28:15,110 --> 00:28:17,010
that they don't work with every day,

587
00:28:17,010 --> 00:28:19,340
that's a recipe for trouble.

588
00:28:19,340 --> 00:28:22,550
Items that are meaningful
will get attention.

589
00:28:22,550 --> 00:28:24,730
Items that are considered irrelevant

590
00:28:24,730 --> 00:28:26,480
we'll get overlooked and minimized.

591
00:28:31,910 --> 00:28:35,170
So on a measurement, how do we
measure our security output?

592
00:28:35,170 --> 00:28:38,143
How do we measure the
effectiveness of our checklists?

593
00:28:39,120 --> 00:28:41,790
One proxy for this, can
be a developer interaction

594
00:28:41,790 --> 00:28:43,470
and relationships with security

595
00:28:43,470 --> 00:28:47,595
having a process in place
to collaborate early

596
00:28:47,595 --> 00:28:51,060
with your developers and to
actually have some measurement

597
00:28:51,060 --> 00:28:52,870
of that over releases,

598
00:28:52,870 --> 00:28:56,659
can give you numbers to drive
your effective communications.

599
00:28:56,660 --> 00:28:58,295
So the more that you
interact with the teams,

600
00:28:58,295 --> 00:28:59,830
the higher your scores can be.

601
00:28:59,830 --> 00:29:03,260
That's something that can be
measured and used as a proxy

602
00:29:03,260 --> 00:29:04,890
for how interactive you're being

603
00:29:04,890 --> 00:29:06,680
with your development teams.

604
00:29:06,680 --> 00:29:08,690
Another measure can be security bugs

605
00:29:08,690 --> 00:29:10,460
that have been detected over time

606
00:29:10,460 --> 00:29:12,880
and in which phase they're detected.

607
00:29:12,880 --> 00:29:16,380
Catching something and design
review is a lot more effective

608
00:29:16,380 --> 00:29:18,050
than catching something code review

609
00:29:18,050 --> 00:29:19,740
versus having it shipped to production

610
00:29:19,740 --> 00:29:21,670
and having a external bug bounty

611
00:29:21,670 --> 00:29:23,840
participant report it to you.

612
00:29:23,840 --> 00:29:26,449
The earlier you can catch
security vulnerabilities

613
00:29:26,450 --> 00:29:28,040
and if you have the ability to track

614
00:29:28,040 --> 00:29:30,930
at which phase those
security bugs are caught,

615
00:29:30,930 --> 00:29:33,110
is a really good additional proxy

616
00:29:33,110 --> 00:29:35,740
for the effectiveness
of your security process

617
00:29:35,740 --> 00:29:37,190
and therefore the effectiveness

618
00:29:37,190 --> 00:29:39,543
of having these checklists in place.

619
00:29:42,240 --> 00:29:44,850
Here we have a few sample checklist items

620
00:29:44,850 --> 00:29:46,110
that have come from myself

621
00:29:46,110 --> 00:29:48,503
and from previous versions of this talk.

622
00:29:50,240 --> 00:29:53,570
You'll notice that this covers a variety

623
00:29:53,570 --> 00:29:55,480
of common development scenarios,

624
00:29:55,480 --> 00:29:58,010
common security vulnerabilities

625
00:29:58,010 --> 00:30:00,100
and the checklist items themselves.

626
00:30:00,100 --> 00:30:02,669
The questions are concise.

627
00:30:02,670 --> 00:30:04,730
They are an attempt to be clear.

628
00:30:04,730 --> 00:30:09,050
They minimize the amount
of security and language

629
00:30:09,050 --> 00:30:11,830
in those questions and
in the checklist items.

630
00:30:11,830 --> 00:30:16,139
And the answers are easy
to tell what they are

631
00:30:16,140 --> 00:30:18,623
and what their completion steps are.

632
00:30:19,560 --> 00:30:23,389
This is some really good
examples of how checklist items

633
00:30:23,390 --> 00:30:26,600
can look, how they can be
effective and how they can again,

634
00:30:26,600 --> 00:30:31,600
serve as not a long-winded
secure development process,

635
00:30:32,100 --> 00:30:35,169
but just as a quick and simple
reminder to the developers

636
00:30:35,170 --> 00:30:37,410
as they're getting ready
to commit their code.

637
00:30:37,410 --> 00:30:39,120
Or as they're writing their code that

638
00:30:39,120 --> 00:30:41,260
have they encountered the scenario

639
00:30:41,260 --> 00:30:44,220
and to remind them to do the
right thing security wise

640
00:30:44,220 --> 00:30:47,773
about those particular pieces
of code that they're writing.

641
00:30:51,400 --> 00:30:53,650
I have of course built a checklist

642
00:30:53,650 --> 00:30:57,130
in order to help us build checklists.

643
00:30:57,130 --> 00:30:59,916
This is again a list of 10 items

644
00:30:59,916 --> 00:31:01,460
that you need to keep in mind

645
00:31:01,460 --> 00:31:03,300
as you're building checklists.

646
00:31:03,300 --> 00:31:05,460
This is something in
our interactive session.

647
00:31:05,460 --> 00:31:07,030
Following this recording,

648
00:31:07,030 --> 00:31:10,700
we will use as our core
criteria for collaborating

649
00:31:10,700 --> 00:31:13,010
on building relevant checklist items

650
00:31:13,010 --> 00:31:14,810
for some of our scenarios.

651
00:31:14,810 --> 00:31:16,220
And as with checklists,

652
00:31:16,220 --> 00:31:18,390
this does cover the most important things.

653
00:31:18,390 --> 00:31:23,250
First, it does provide
a clear and meaningful

654
00:31:23,250 --> 00:31:25,970
representation of what needs to be done.

655
00:31:25,970 --> 00:31:28,810
And it provides that
satisfaction of having that

656
00:31:28,810 --> 00:31:32,260
checkbox of here's the
clear well-defined criteria

657
00:31:32,260 --> 00:31:35,110
and then a definition of done
for this particular item.

658
00:31:35,110 --> 00:31:38,469
So that we can then move
down this list in order

659
00:31:39,770 --> 00:31:42,210
and come up with an effective

660
00:31:42,210 --> 00:31:45,003
and useful set of checklist criteria.

661
00:31:46,110 --> 00:31:50,320
Again, so in the collaborative
session after this talk,

662
00:31:50,320 --> 00:31:51,710
anyone who's participating now,

663
00:31:51,710 --> 00:31:54,210
we will collaboratively
build checklist items

664
00:31:54,210 --> 00:31:56,950
that are relevant to our
particular environments.

665
00:31:56,950 --> 00:31:58,360
If you have any feedback

666
00:31:58,360 --> 00:32:00,010
that you haven't already put in the chat,

667
00:32:00,010 --> 00:32:01,180
now would be a great time.

668
00:32:01,180 --> 00:32:03,500
I'm happy to answer any
questions that may come up.

669
00:32:03,500 --> 00:32:05,100
We'll have a little bit of extra time

670
00:32:05,100 --> 00:32:06,572
at the end of the session.

671
00:32:07,410 --> 00:32:11,400
And finally, the references slide.

672
00:32:11,400 --> 00:32:12,790
Please feel free,

673
00:32:12,790 --> 00:32:14,520
take this back to your companies,

674
00:32:14,520 --> 00:32:17,680
build a process that works for
you, for your organization,

675
00:32:17,680 --> 00:32:19,350
for your development teams.

676
00:32:19,350 --> 00:32:21,790
Collaboration is the key to this.

677
00:32:21,790 --> 00:32:24,240
Iterate development is highly important.

678
00:32:24,240 --> 00:32:25,890
Something that you get out there,

679
00:32:27,060 --> 00:32:31,820
contest and then build on,
is the preferred mechanism.

680
00:32:31,820 --> 00:32:33,629
Just building something once,

681
00:32:33,630 --> 00:32:34,570
throwing it out there and saying,

682
00:32:34,570 --> 00:32:36,810
this is the way we're gonna
do it forever and ever,

683
00:32:36,810 --> 00:32:38,470
it's not going to be very adaptable.

684
00:32:38,470 --> 00:32:40,440
It's not going to be very flexible.

685
00:32:40,440 --> 00:32:43,274
So again, have those
collaboration conversations

686
00:32:43,274 --> 00:32:45,419
with your development teams,

687
00:32:45,420 --> 00:32:47,800
with your other teams
within your organization,

688
00:32:47,800 --> 00:32:49,010
include management in this.

689
00:32:49,010 --> 00:32:53,640
Get that buy-in and get
yourself a good, simple

690
00:32:53,640 --> 00:32:57,150
straightforward process
to remind those developers

691
00:32:57,150 --> 00:32:59,670
of all that expensive
security training they've got

692
00:32:59,670 --> 00:33:02,020
at the point in time when
they're writing code.

693
00:33:02,930 --> 00:33:05,000
With that I wanna thank
you for your time today.

694
00:33:05,000 --> 00:33:07,260
I appreciate the
opportunity to speak to you.

695
00:33:07,260 --> 00:33:09,640
Happy to continue this
conversation and chat.

696
00:33:09,640 --> 00:33:11,460
Happy to continue this after the fact,

697
00:33:11,460 --> 00:33:15,010
as well as you can reach out
to me on Twitter at any time.

698
00:33:15,010 --> 00:33:18,193
Thank you so much and have
a good rest of your RSA.

