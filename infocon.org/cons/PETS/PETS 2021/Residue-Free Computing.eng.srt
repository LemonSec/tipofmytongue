1
00:00:00,560 --> 00:00:02,879
hello everyone my name is logan arkema

2
00:00:02,879 --> 00:00:03,919
and i have

3
00:00:03,919 --> 00:00:05,920
the honor of presenting residue free

4
00:00:05,920 --> 00:00:06,960
computing an

5
00:00:06,960 --> 00:00:09,040
architecture and implementation for

6
00:00:09,040 --> 00:00:10,960
users to use their own computer

7
00:00:10,960 --> 00:00:13,280
without leaving behind the unwanted and

8
00:00:13,280 --> 00:00:14,160
pervasive

9
00:00:14,160 --> 00:00:16,960
digital breadcrumbs left behind by many

10
00:00:16,960 --> 00:00:18,880
modern user applications

11
00:00:18,880 --> 00:00:20,800
for some housekeeping items this is the

12
00:00:20,800 --> 00:00:22,640
version of the presentation

13
00:00:22,640 --> 00:00:24,480
that does not have subtitles except for

14
00:00:24,480 --> 00:00:26,560
this slide a version with subtitles is

15
00:00:26,560 --> 00:00:28,000
available at the website

16
00:00:28,000 --> 00:00:30,480
on the slide and also this paper and

17
00:00:30,480 --> 00:00:32,558
presentation represents work i primarily

18
00:00:32,558 --> 00:00:34,399
did well at georgetown university

19
00:00:34,399 --> 00:00:36,079
and does not necessarily represent the

20
00:00:36,079 --> 00:00:37,680
thoughts positions or opinions

21
00:00:37,680 --> 00:00:39,520
of my current employer with that let's

22
00:00:39,520 --> 00:00:41,360
jump in as most of us are aware

23
00:00:41,360 --> 00:00:43,200
current privacy work is overwhelmingly

24
00:00:43,200 --> 00:00:45,120
what we might call server-side

25
00:00:45,120 --> 00:00:46,399
and that we're focused on what

26
00:00:46,399 --> 00:00:48,399
organizations do with our data

27
00:00:48,399 --> 00:00:50,399
after they have access to it privacy

28
00:00:50,399 --> 00:00:52,320
regulations and current research focuses

29
00:00:52,320 --> 00:00:53,760
on mitigating the risks of an

30
00:00:53,760 --> 00:00:55,520
organization processing

31
00:00:55,520 --> 00:00:58,239
using collecting storing or transmitting

32
00:00:58,239 --> 00:01:00,079
or distributing users data

33
00:01:00,079 --> 00:01:02,079
it's not bad that the focus is here

34
00:01:02,079 --> 00:01:04,000
because these privacy risks scale

35
00:01:04,000 --> 00:01:04,559
quickly

36
00:01:04,559 --> 00:01:06,080
and are an accurate threat model for

37
00:01:06,080 --> 00:01:07,840
most users most of the time

38
00:01:07,840 --> 00:01:10,400
however it does leave open concerns

39
00:01:10,400 --> 00:01:12,560
about the data that isn't sent to other

40
00:01:12,560 --> 00:01:15,280
organizations and sits on the user's

41
00:01:15,280 --> 00:01:17,680
machines

42
00:01:17,680 --> 00:01:20,000
and personal computers store a lot of

43
00:01:20,000 --> 00:01:20,960
hidden details

44
00:01:20,960 --> 00:01:22,960
what we call residue that could provide

45
00:01:22,960 --> 00:01:24,640
a strikingly accurate trail of the

46
00:01:24,640 --> 00:01:26,000
user's activities on their

47
00:01:26,000 --> 00:01:27,920
own computer without their knowledge or

48
00:01:27,920 --> 00:01:30,320
consent developers lack incentives not

49
00:01:30,320 --> 00:01:32,000
to cash data on your computer

50
00:01:32,000 --> 00:01:33,920
privacy policies typically don't address

51
00:01:33,920 --> 00:01:35,280
what gets left on your machine

52
00:01:35,280 --> 00:01:36,960
and applications get computational

53
00:01:36,960 --> 00:01:38,320
benefits from caching

54
00:01:38,320 --> 00:01:39,920
but this means a lot of potentially

55
00:01:39,920 --> 00:01:42,079
sensitive information gets left behind

56
00:01:42,079 --> 00:01:43,920
and very few apps bother to tell their

57
00:01:43,920 --> 00:01:46,159
users about it the appendix of our paper

58
00:01:46,159 --> 00:01:48,079
details the residue we found on 20

59
00:01:48,079 --> 00:01:50,079
different user applications in ubuntu

60
00:01:50,079 --> 00:01:51,840
but residue might include evidence and

61
00:01:51,840 --> 00:01:54,079
apples installed that a privacy-centric

62
00:01:54,079 --> 00:01:55,840
app was used even if its data isn't

63
00:01:55,840 --> 00:01:56,479
stored

64
00:01:56,479 --> 00:01:58,640
detailed chat logs and timestamps from

65
00:01:58,640 --> 00:02:00,320
apps like skype and slack

66
00:02:00,320 --> 00:02:02,640
and without private or incognito mode

67
00:02:02,640 --> 00:02:04,799
browsers will cache websites visited

68
00:02:04,799 --> 00:02:06,799
and the file system itself as well as

69
00:02:06,799 --> 00:02:08,000
many content readers

70
00:02:08,000 --> 00:02:10,239
will store when documents were opened

71
00:02:10,239 --> 00:02:12,000
therefore we introduce residue free

72
00:02:12,000 --> 00:02:13,120
computing to allow

73
00:02:13,120 --> 00:02:16,080
users to use their machine on the fly

74
00:02:16,080 --> 00:02:16,640
without

75
00:02:16,640 --> 00:02:19,440
leaving residue behind for example let's

76
00:02:19,440 --> 00:02:21,440
look at an application vlc

77
00:02:21,440 --> 00:02:23,360
that stores data a user may consider

78
00:02:23,360 --> 00:02:25,200
sensitive without informing the user

79
00:02:25,200 --> 00:02:27,040
or providing a clear way to delete the

80
00:02:27,040 --> 00:02:29,040
data in our example the user wants to

81
00:02:29,040 --> 00:02:30,560
watch a query-oriented video

82
00:02:30,560 --> 00:02:32,319
but lives with invasive co-inhabitants

83
00:02:32,319 --> 00:02:34,239
that monitor the user's computer use

84
00:02:34,239 --> 00:02:35,440
and the user does not want their

85
00:02:35,440 --> 00:02:37,120
co-inhabitants to know they watch the

86
00:02:37,120 --> 00:02:37,680
video

87
00:02:37,680 --> 00:02:39,920
so the user wanting to be private uses

88
00:02:39,920 --> 00:02:42,080
firefox in private mode to search for a

89
00:02:42,080 --> 00:02:43,440
queer poetry event

90
00:02:43,440 --> 00:02:46,640
and they download the file and

91
00:02:46,640 --> 00:02:49,760
then they download it play it and remove

92
00:02:49,760 --> 00:02:50,959
it from their machine

93
00:02:50,959 --> 00:02:53,120
later the invasive cohabitant is able to

94
00:02:53,120 --> 00:02:54,879
get their hands on the user's computer

95
00:02:54,879 --> 00:02:57,120
and identify files that were modified

96
00:02:57,120 --> 00:02:59,200
while the user used the computer we

97
00:02:59,200 --> 00:03:00,640
actually created this list

98
00:03:00,640 --> 00:03:02,560
using residue freeze forensic mode which

99
00:03:02,560 --> 00:03:04,720
we'll touch on later but nonetheless

100
00:03:04,720 --> 00:03:06,640
they can see a bunch of firefox

101
00:03:06,640 --> 00:03:08,800
files were modified and more

102
00:03:08,800 --> 00:03:10,400
concerningly some vlc

103
00:03:10,400 --> 00:03:13,440
files were modified in what appears to

104
00:03:13,440 --> 00:03:15,680
be a hidden configuration directory

105
00:03:15,680 --> 00:03:18,640
and when we grep for lgbt we see that

106
00:03:18,640 --> 00:03:19,440
this hidden

107
00:03:19,440 --> 00:03:22,560
vlc file appears to be

108
00:03:22,560 --> 00:03:25,280
storing the names of recent videos that

109
00:03:25,280 --> 00:03:26,159
were played

110
00:03:26,159 --> 00:03:28,959
using vlc without the user's knowledge

111
00:03:28,959 --> 00:03:30,879
or consent we see that when we

112
00:03:30,879 --> 00:03:32,799
open up the file that indeed recent

113
00:03:32,799 --> 00:03:34,640
files are being stored by this

114
00:03:34,640 --> 00:03:35,920
configuration file

115
00:03:35,920 --> 00:03:38,000
while there are previous solutions to

116
00:03:38,000 --> 00:03:40,640
protect data that is left on a user's

117
00:03:40,640 --> 00:03:41,440
disk

118
00:03:41,440 --> 00:03:43,120
these are either inadequate and that

119
00:03:43,120 --> 00:03:44,879
they leave recoverable data

120
00:03:44,879 --> 00:03:47,920
or they have high usability barriers

121
00:03:47,920 --> 00:03:49,920
or they do not allow the user to use

122
00:03:49,920 --> 00:03:52,080
their own operating system and their own

123
00:03:52,080 --> 00:03:52,959
applications

124
00:03:52,959 --> 00:03:56,000
that they have pre-installed or they

125
00:03:56,000 --> 00:03:58,159
leave some traces that could be

126
00:03:58,159 --> 00:03:59,519
considered sensitive or

127
00:03:59,519 --> 00:04:02,159
undesirable we go into details for each

128
00:04:02,159 --> 00:04:02,799
of these

129
00:04:02,799 --> 00:04:04,480
previous solutions and their challenges

130
00:04:04,480 --> 00:04:06,560
in the paper so to recap here are our

131
00:04:06,560 --> 00:04:08,239
goals of what we're trying to provide

132
00:04:08,239 --> 00:04:09,760
users and the scenario that we are

133
00:04:09,760 --> 00:04:11,439
trying to protect them from

134
00:04:11,439 --> 00:04:13,599
to start an advanced adversary may be

135
00:04:13,599 --> 00:04:15,760
able to obtain a forensic image of the

136
00:04:15,760 --> 00:04:16,639
file system

137
00:04:16,639 --> 00:04:18,238
or just be generally familiar with the

138
00:04:18,238 --> 00:04:20,000
state of the user's machine

139
00:04:20,000 --> 00:04:23,199
prior to them using residue free

140
00:04:23,199 --> 00:04:24,800
however they do not install malware

141
00:04:24,800 --> 00:04:26,800
spyware or persistent access to the user

142
00:04:26,800 --> 00:04:28,000
system they also don't have

143
00:04:28,000 --> 00:04:31,360
network access to the user's traffic

144
00:04:31,360 --> 00:04:33,440
the user then runs the normal operating

145
00:04:33,440 --> 00:04:35,600
system and on the fly decides to use

146
00:04:35,600 --> 00:04:36,479
residue free

147
00:04:36,479 --> 00:04:37,919
when they use residue free they should

148
00:04:37,919 --> 00:04:39,360
have access to all of their normal

149
00:04:39,360 --> 00:04:41,360
applications and using residue free

150
00:04:41,360 --> 00:04:43,840
should feel as identical as possible to

151
00:04:43,840 --> 00:04:45,280
their standard use of their operating

152
00:04:45,280 --> 00:04:46,000
system

153
00:04:46,000 --> 00:04:48,720
except that the data from their residue

154
00:04:48,720 --> 00:04:51,440
free session will not be saved to disk

155
00:04:51,440 --> 00:04:52,960
when they're done using residue free

156
00:04:52,960 --> 00:04:55,520
they exit and then the attacker is able

157
00:04:55,520 --> 00:04:56,080
to gain

158
00:04:56,080 --> 00:04:58,479
access to the machine again or for the

159
00:04:58,479 --> 00:04:59,520
first time

160
00:04:59,520 --> 00:05:01,840
and even with complete access to the

161
00:05:01,840 --> 00:05:03,120
user's file system

162
00:05:03,120 --> 00:05:04,880
they should not be able to identify the

163
00:05:04,880 --> 00:05:06,400
apps that were used or

164
00:05:06,400 --> 00:05:08,240
the files that were modified while the

165
00:05:08,240 --> 00:05:11,199
user used residue free even if they

166
00:05:11,199 --> 00:05:13,039
are able to compare a before and after

167
00:05:13,039 --> 00:05:15,039
forensic image of the file system

168
00:05:15,039 --> 00:05:16,560
which brings us to the high level

169
00:05:16,560 --> 00:05:18,720
architecture for residue free computing

170
00:05:18,720 --> 00:05:20,479
we begin with the user system for our

171
00:05:20,479 --> 00:05:22,240
purposes mainly composed of the user's

172
00:05:22,240 --> 00:05:24,080
file system hardware resources and

173
00:05:24,080 --> 00:05:25,280
system processes

174
00:05:25,280 --> 00:05:26,880
some of which may need to be modified to

175
00:05:26,880 --> 00:05:28,080
ensure they don't write sensitive

176
00:05:28,080 --> 00:05:30,160
information about residue free to disk

177
00:05:30,160 --> 00:05:32,160
and the residue free environment we want

178
00:05:32,160 --> 00:05:34,880
the users applications to run in

179
00:05:34,880 --> 00:05:36,400
the key component of residue free

180
00:05:36,400 --> 00:05:38,000
computing is a volatile

181
00:05:38,000 --> 00:05:40,160
virtual disk and ram to prevent file

182
00:05:40,160 --> 00:05:41,919
carving or later recovery of sensitive

183
00:05:41,919 --> 00:05:42,560
residue

184
00:05:42,560 --> 00:05:44,800
it is key that all file modifications

185
00:05:44,800 --> 00:05:45,919
occur in ram and

186
00:05:45,919 --> 00:05:48,400
never touch the user's physical disk to

187
00:05:48,400 --> 00:05:49,440
mediate access

188
00:05:49,440 --> 00:05:51,360
between the user's permanent file system

189
00:05:51,360 --> 00:05:53,360
and the ram disk we add a union file

190
00:05:53,360 --> 00:05:55,120
system a logical file system that

191
00:05:55,120 --> 00:05:56,960
applications have direct access to

192
00:05:56,960 --> 00:05:58,800
but that just directs file operations to

193
00:05:58,800 --> 00:06:00,080
the appropriate disk

194
00:06:00,080 --> 00:06:02,080
residue free applications must be able

195
00:06:02,080 --> 00:06:03,680
to read and write

196
00:06:03,680 --> 00:06:06,240
to the ram file system but only read

197
00:06:06,240 --> 00:06:07,840
from the user's file system

198
00:06:07,840 --> 00:06:09,440
the union file system should also be

199
00:06:09,440 --> 00:06:11,759
copy on write so that any files modified

200
00:06:11,759 --> 00:06:12,960
inside residue free

201
00:06:12,960 --> 00:06:14,400
are copied to the ram disk where they

202
00:06:14,400 --> 00:06:16,160
can again be read and rewritten

203
00:06:16,160 --> 00:06:17,759
without additional calls to the user's

204
00:06:17,759 --> 00:06:20,080
file system then of course we need to

205
00:06:20,080 --> 00:06:21,919
set up an execution environment

206
00:06:21,919 --> 00:06:24,000
where the applications run and all file

207
00:06:24,000 --> 00:06:26,000
calls made inside that environment

208
00:06:26,000 --> 00:06:28,880
must go to the union file system the

209
00:06:28,880 --> 00:06:29,440
final

210
00:06:29,440 --> 00:06:32,240
and most challenging component is

211
00:06:32,240 --> 00:06:33,919
providing the execution environment

212
00:06:33,919 --> 00:06:35,840
sufficient access to the user system

213
00:06:35,840 --> 00:06:36,720
resources

214
00:06:36,720 --> 00:06:39,600
such as drivers input or output keyring

215
00:06:39,600 --> 00:06:41,520
the user system configurations

216
00:06:41,520 --> 00:06:43,919
and inter-process communication while

217
00:06:43,919 --> 00:06:46,080
minimizing the risk that these resources

218
00:06:46,080 --> 00:06:48,160
store information about what occurs

219
00:06:48,160 --> 00:06:49,680
inside residue free

220
00:06:49,680 --> 00:06:51,520
while doing this we want to keep residue

221
00:06:51,520 --> 00:06:53,280
free as lightweight as possible an

222
00:06:53,280 --> 00:06:55,360
implementation could conceivably

223
00:06:55,360 --> 00:06:57,120
reinitialize many of these services

224
00:06:57,120 --> 00:06:58,400
inside residue free

225
00:06:58,400 --> 00:07:00,160
but that may cause interoperability

226
00:07:00,160 --> 00:07:02,080
problems so the residue free down

227
00:07:02,080 --> 00:07:04,400
or in very technical terms make the

228
00:07:04,400 --> 00:07:06,080
operating system cranky

229
00:07:06,080 --> 00:07:07,840
after residue free exits the

230
00:07:07,840 --> 00:07:09,840
implementation needs to ensure that all

231
00:07:09,840 --> 00:07:11,199
residue in ram

232
00:07:11,199 --> 00:07:13,520
is made inaccessible as quickly as

233
00:07:13,520 --> 00:07:15,440
possible while architectures and

234
00:07:15,440 --> 00:07:16,080
diagrams

235
00:07:16,080 --> 00:07:18,000
are fantastic here are the details for

236
00:07:18,000 --> 00:07:20,080
how we got residue free to work

237
00:07:20,080 --> 00:07:22,160
we built our implementation in ubuntu

238
00:07:22,160 --> 00:07:24,720
starting with the basic xt4 file system

239
00:07:24,720 --> 00:07:27,039
remounted with the no access time option

240
00:07:27,039 --> 00:07:28,720
to prevent the file system from tracking

241
00:07:28,720 --> 00:07:29,599
file reads

242
00:07:29,599 --> 00:07:31,919
from inside residue free we created our

243
00:07:31,919 --> 00:07:33,599
ram disk using temp fs

244
00:07:33,599 --> 00:07:35,440
a temporary file system that lives

245
00:07:35,440 --> 00:07:36,639
entirely in ram

246
00:07:36,639 --> 00:07:38,639
and ensured its volatility and efficient

247
00:07:38,639 --> 00:07:39,680
destructibility

248
00:07:39,680 --> 00:07:42,160
by mounting ecrypt fs a basic encrypted

249
00:07:42,160 --> 00:07:43,039
file system

250
00:07:43,039 --> 00:07:45,280
on top of it so that all contents of

251
00:07:45,280 --> 00:07:46,080
temp fs

252
00:07:46,080 --> 00:07:47,759
would be encrypted as they are written

253
00:07:47,759 --> 00:07:50,160
to ram we then used union fs to

254
00:07:50,160 --> 00:07:51,919
implement the union file system

255
00:07:51,919 --> 00:07:54,720
over the xt4 and temp fs disks as some

256
00:07:54,720 --> 00:07:56,400
astute observers may have guessed by the

257
00:07:56,400 --> 00:07:58,639
color change we used a docker container

258
00:07:58,639 --> 00:08:01,919
for execution environment this made it

259
00:08:01,919 --> 00:08:03,199
pretty easy to

260
00:08:03,199 --> 00:08:05,039
ensure that all file calls were made to

261
00:08:05,039 --> 00:08:06,960
the union fs file system

262
00:08:06,960 --> 00:08:09,120
mediating access between residue free

263
00:08:09,120 --> 00:08:10,240
and system resources

264
00:08:10,240 --> 00:08:12,160
namely service statements was again

265
00:08:12,160 --> 00:08:13,759
challenging and where the bulk of our

266
00:08:13,759 --> 00:08:14,800
time was spent

267
00:08:14,800 --> 00:08:16,800
for example we provided residue free

268
00:08:16,800 --> 00:08:18,879
access to the user's network namespace

269
00:08:18,879 --> 00:08:20,160
so it could easily connect

270
00:08:20,160 --> 00:08:22,240
to virtual unix sockets as well as

271
00:08:22,240 --> 00:08:24,319
direct access to other unix sockets like

272
00:08:24,319 --> 00:08:27,039
dbus and x11 for essential inter-process

273
00:08:27,039 --> 00:08:28,240
communication

274
00:08:28,240 --> 00:08:31,039
with resources that the certain user

275
00:08:31,039 --> 00:08:32,479
apps required

276
00:08:32,479 --> 00:08:34,399
since we provided means for residue free

277
00:08:34,399 --> 00:08:36,159
to communicate with the user system we

278
00:08:36,159 --> 00:08:36,958
had to modify

279
00:08:36,958 --> 00:08:39,039
certain system processes to ensure they

280
00:08:39,039 --> 00:08:41,039
didn't save any sensitive information or

281
00:08:41,039 --> 00:08:41,679
residue

282
00:08:41,679 --> 00:08:43,440
that they may have received from residue

283
00:08:43,440 --> 00:08:46,240
free for example we temporarily disabled

284
00:08:46,240 --> 00:08:47,760
syslog and journal d

285
00:08:47,760 --> 00:08:50,000
modified application use tracking kept

286
00:08:50,000 --> 00:08:50,880
by gnome

287
00:08:50,880 --> 00:08:53,600
and restarted pulse audio inside residue

288
00:08:53,600 --> 00:08:54,240
free

289
00:08:54,240 --> 00:08:56,320
for cleanup we simply destroyed the

290
00:08:56,320 --> 00:08:57,600
e-craft fs

291
00:08:57,600 --> 00:08:59,600
encryption key to make the residue

292
00:08:59,600 --> 00:09:01,920
inaccessible and unrecoverable

293
00:09:01,920 --> 00:09:03,920
and then restored system processes we

294
00:09:03,920 --> 00:09:06,160
modified back to their original state

295
00:09:06,160 --> 00:09:08,320
including restoring access times to the

296
00:09:08,320 --> 00:09:11,519
xt4 file system

297
00:09:11,519 --> 00:09:13,279
in addition to the privacy-centric

298
00:09:13,279 --> 00:09:14,560
architectural requirements we

299
00:09:14,560 --> 00:09:15,920
established for ourselves

300
00:09:15,920 --> 00:09:17,839
we wanted our implementation to be as

301
00:09:17,839 --> 00:09:19,200
usable and useful

302
00:09:19,200 --> 00:09:21,600
as possible both for end users and the

303
00:09:21,600 --> 00:09:22,640
research community

304
00:09:22,640 --> 00:09:24,880
to that end we included an option during

305
00:09:24,880 --> 00:09:26,640
installation and a small side script

306
00:09:26,640 --> 00:09:29,040
that adds a run in residue free option

307
00:09:29,040 --> 00:09:31,360
to any desktop application icon in

308
00:09:31,360 --> 00:09:32,399
ubuntu

309
00:09:32,399 --> 00:09:34,560
with this a user can launch residue free

310
00:09:34,560 --> 00:09:36,160
with a click of a button and entering

311
00:09:36,160 --> 00:09:37,040
their password

312
00:09:37,040 --> 00:09:39,440
we also created a designated folder that

313
00:09:39,440 --> 00:09:41,120
will save only files placed in that

314
00:09:41,120 --> 00:09:41,760
folder

315
00:09:41,760 --> 00:09:43,920
back to the user's permanent hard disk

316
00:09:43,920 --> 00:09:45,600
for instance if a user wants to save a

317
00:09:45,600 --> 00:09:47,600
file without storing residue about what

318
00:09:47,600 --> 00:09:48,640
application they used

319
00:09:48,640 --> 00:09:50,800
to download that file they could use

320
00:09:50,800 --> 00:09:52,880
this designated folder inside residue

321
00:09:52,880 --> 00:09:53,680
free

322
00:09:53,680 --> 00:09:56,000
for researchers we also added a forensic

323
00:09:56,000 --> 00:09:57,680
mode which functions just like the

324
00:09:57,680 --> 00:09:59,440
residue free we just described

325
00:09:59,440 --> 00:10:00,880
except instead of storing then

326
00:10:00,880 --> 00:10:03,040
destroying all file modifications in a

327
00:10:03,040 --> 00:10:04,240
volatile ram disk

328
00:10:04,240 --> 00:10:05,839
they're just saved in a designated

329
00:10:05,839 --> 00:10:07,839
location on the user's file system

330
00:10:07,839 --> 00:10:09,600
which makes it trivial especially when

331
00:10:09,600 --> 00:10:11,440
combined with diff to isolate the

332
00:10:11,440 --> 00:10:13,279
specific file changes caused by an

333
00:10:13,279 --> 00:10:15,279
application

334
00:10:15,279 --> 00:10:17,040
all right here's a demonstration of how

335
00:10:17,040 --> 00:10:18,880
residue free works and the features it

336
00:10:18,880 --> 00:10:19,839
can provide

337
00:10:19,839 --> 00:10:21,519
we're going to be performing pretty much

338
00:10:21,519 --> 00:10:23,279
the same actions that we did earlier but

339
00:10:23,279 --> 00:10:24,880
this time using residue free mode

340
00:10:24,880 --> 00:10:26,800
instead of firefox's private mode

341
00:10:26,800 --> 00:10:28,240
so you can launch residue free with the

342
00:10:28,240 --> 00:10:30,000
click of a button and

343
00:10:30,000 --> 00:10:33,600
entering a password and we get a notice

344
00:10:33,600 --> 00:10:36,240
saying that all files have to be saved

345
00:10:36,240 --> 00:10:36,640
to this

346
00:10:36,640 --> 00:10:39,200
special directory to be saved and we'll

347
00:10:39,200 --> 00:10:40,320
cut to downloading

348
00:10:40,320 --> 00:10:44,560
the file so the user is going to

349
00:10:44,560 --> 00:10:46,399
download the file but they saw the

350
00:10:46,399 --> 00:10:47,839
warning that popped up when they

351
00:10:47,839 --> 00:10:49,839
initiated residue free saying that

352
00:10:49,839 --> 00:10:52,000
if they don't save it in this keep files

353
00:10:52,000 --> 00:10:54,560
directory then it is going to be

354
00:10:54,560 --> 00:10:58,399
erased and while this isn't a typical

355
00:10:58,399 --> 00:11:00,880
user behavior we want to demonstrate the

356
00:11:00,880 --> 00:11:02,959
ability to save persistent files

357
00:11:02,959 --> 00:11:04,720
so they're going to save just the film

358
00:11:04,720 --> 00:11:06,480
itself

359
00:11:06,480 --> 00:11:10,079
in the keep files folder and that's

360
00:11:10,079 --> 00:11:10,880
going to be

361
00:11:10,880 --> 00:11:14,000
saved alright so the file's been

362
00:11:14,000 --> 00:11:16,480
downloaded and the user is going to exit

363
00:11:16,480 --> 00:11:18,079
out of firefox

364
00:11:18,079 --> 00:11:20,000
and residue free they notice that

365
00:11:20,000 --> 00:11:21,920
residue free is exiting

366
00:11:21,920 --> 00:11:24,640
and now they want to watch the video so

367
00:11:24,640 --> 00:11:25,519
they're going to

368
00:11:25,519 --> 00:11:29,760
use residue free again to launch plc

369
00:11:37,360 --> 00:11:41,279
continue go to where the file was saved

370
00:11:41,279 --> 00:11:43,839
on their desktop

371
00:11:48,079 --> 00:11:49,760
from the library of congress in

372
00:11:49,760 --> 00:11:52,720
washington dc

373
00:11:52,720 --> 00:11:55,120
then they're going to exit their vlc and

374
00:11:55,120 --> 00:11:56,639
the residue free session

375
00:11:56,639 --> 00:11:58,639
now this was all in residue freeze

376
00:11:58,639 --> 00:12:01,200
private mode not forensic mode so

377
00:12:01,200 --> 00:12:03,200
in forensic mode when we did those exact

378
00:12:03,200 --> 00:12:04,639
same actions

379
00:12:04,639 --> 00:12:06,639
uh even using firefox and private mode

380
00:12:06,639 --> 00:12:08,399
we got all of this data

381
00:12:08,399 --> 00:12:10,560
and now if we go back to the user's home

382
00:12:10,560 --> 00:12:11,600
directory

383
00:12:11,600 --> 00:12:14,800
and just try to find all files that were

384
00:12:14,800 --> 00:12:18,160
modified in the last five minutes

385
00:12:18,160 --> 00:12:20,720
nothing none of that incriminating data

386
00:12:20,720 --> 00:12:22,079
none of the vlc

387
00:12:22,079 --> 00:12:23,600
files that were modified or any of the

388
00:12:23,600 --> 00:12:25,200
firefox caching that

389
00:12:25,200 --> 00:12:27,040
indicate what sites they visited only

390
00:12:27,040 --> 00:12:29,519
the poetry video that they themselves

391
00:12:29,519 --> 00:12:31,920
saved well the skeptics among us say

392
00:12:31,920 --> 00:12:33,680
that all sounds fine and dandy

393
00:12:33,680 --> 00:12:35,360
but does it actually get rid of all the

394
00:12:35,360 --> 00:12:38,079
data that we wanted to

395
00:12:38,079 --> 00:12:41,279
yes uh to attach this we put

396
00:12:41,279 --> 00:12:44,320
uh two vms which were identical up until

397
00:12:44,320 --> 00:12:45,519
the point that one of them

398
00:12:45,519 --> 00:12:47,519
ran residue free while the other one

399
00:12:47,519 --> 00:12:48,959
idled in the background

400
00:12:48,959 --> 00:12:51,040
on the vm that was running residue free

401
00:12:51,040 --> 00:12:52,000
we threw the

402
00:12:52,000 --> 00:12:54,800
kitchen sink of activity that could

403
00:12:54,800 --> 00:12:56,320
generate residue we installed

404
00:12:56,320 --> 00:12:57,279
applications

405
00:12:57,279 --> 00:12:59,839
we used a vpn we created and saved

406
00:12:59,839 --> 00:13:00,880
documents

407
00:13:00,880 --> 00:13:04,079
using document editors we used web

408
00:13:04,079 --> 00:13:06,240
browsers to play videos and download

409
00:13:06,240 --> 00:13:08,160
documents and intentionally crashed one

410
00:13:08,160 --> 00:13:08,880
of them

411
00:13:08,880 --> 00:13:11,839
we used sensitive uh chat apps to send

412
00:13:11,839 --> 00:13:13,279
messages back and forth

413
00:13:13,279 --> 00:13:15,360
and we used file sharing clients to

414
00:13:15,360 --> 00:13:16,800
download files

415
00:13:16,800 --> 00:13:20,000
uh from our local network all trying to

416
00:13:20,000 --> 00:13:22,000
generate as much disk activity on common

417
00:13:22,000 --> 00:13:23,279
user applications

418
00:13:23,279 --> 00:13:26,480
as we possibly could we then froze

419
00:13:26,480 --> 00:13:30,079
both vms uh took forensic

420
00:13:30,079 --> 00:13:33,440
copies of both of their file systems

421
00:13:33,440 --> 00:13:35,839
by and then generated a hash of each

422
00:13:35,839 --> 00:13:37,680
file in their file systems

423
00:13:37,680 --> 00:13:40,000
and compared to the individual files

424
00:13:40,000 --> 00:13:41,440
where the hashes differed

425
00:13:41,440 --> 00:13:43,920
all in all there were only 39 files that

426
00:13:43,920 --> 00:13:46,000
had different hashes between the two

427
00:13:46,000 --> 00:13:48,720
operating systems and these were for the

428
00:13:48,720 --> 00:13:49,440
most part

429
00:13:49,440 --> 00:13:51,600
either time stamps that varied by a few

430
00:13:51,600 --> 00:13:52,560
seconds

431
00:13:52,560 --> 00:13:55,760
or unique identifiers that were off or

432
00:13:55,760 --> 00:13:58,399
evidence that residue free itself had

433
00:13:58,399 --> 00:13:58,800
run

434
00:13:58,800 --> 00:14:00,399
which we do not consider to be part of

435
00:14:00,399 --> 00:14:02,000
our threat model none of them

436
00:14:02,000 --> 00:14:04,160
contained any sensitive residue about

437
00:14:04,160 --> 00:14:05,920
the applications that were run inside

438
00:14:05,920 --> 00:14:07,040
residue free

439
00:14:07,040 --> 00:14:09,360
or the data or metadata from them we

440
00:14:09,360 --> 00:14:11,120
also wanted to measure residue's freeze

441
00:14:11,120 --> 00:14:12,399
performance against the baseline

442
00:14:12,399 --> 00:14:13,519
operating system

443
00:14:13,519 --> 00:14:15,360
we found that computationally they were

444
00:14:15,360 --> 00:14:17,360
broadly consistent across both graphics

445
00:14:17,360 --> 00:14:18,240
operations

446
00:14:18,240 --> 00:14:21,360
and cpu operations the ramp speed was

447
00:14:21,360 --> 00:14:21,760
even

448
00:14:21,760 --> 00:14:23,760
faster we weren't able to identify why

449
00:14:23,760 --> 00:14:25,600
but we posited maybe because of caching

450
00:14:25,600 --> 00:14:26,480
effects

451
00:14:26,480 --> 00:14:28,399
and network transfer speeds were also

452
00:14:28,399 --> 00:14:30,079
broadly consistent

453
00:14:30,079 --> 00:14:33,360
while file operations were significantly

454
00:14:33,360 --> 00:14:34,240
slower

455
00:14:34,240 --> 00:14:37,199
less than half as fast and residue free

456
00:14:37,199 --> 00:14:39,760
versus the baseline we also used

457
00:14:39,760 --> 00:14:41,519
some standard user applications

458
00:14:41,519 --> 00:14:44,079
libreoffice sftp vlc w vlcwget and

459
00:14:44,079 --> 00:14:45,199
firefox

460
00:14:45,199 --> 00:14:47,760
to measure performance times using

461
00:14:47,760 --> 00:14:48,880
pseudo-realistic

462
00:14:48,880 --> 00:14:50,800
user behavior and found that again they

463
00:14:50,800 --> 00:14:52,320
were broadly consistent

464
00:14:52,320 --> 00:14:55,040
uh with a few second delays in more file

465
00:14:55,040 --> 00:14:56,839
intensive operations like

466
00:14:56,839 --> 00:14:59,680
converting an open office document to a

467
00:14:59,680 --> 00:15:00,240
pdf

468
00:15:00,240 --> 00:15:03,040
using libreoffice we also measured the

469
00:15:03,040 --> 00:15:04,880
overhead times for residue free so the

470
00:15:04,880 --> 00:15:06,480
startup and shutdown times

471
00:15:06,480 --> 00:15:08,959
and while they was were at their highest

472
00:15:08,959 --> 00:15:11,120
over 17 and a half seconds the first

473
00:15:11,120 --> 00:15:12,800
time residue free was launched after a

474
00:15:12,800 --> 00:15:13,680
computer

475
00:15:13,680 --> 00:15:17,199
turned on this was also conducted on a

476
00:15:17,199 --> 00:15:19,199
computer that has very limited hardware

477
00:15:19,199 --> 00:15:20,320
resources

478
00:15:20,320 --> 00:15:23,519
an i3 processor with two cores and

479
00:15:23,519 --> 00:15:25,839
launching residue free on a vm with

480
00:15:25,839 --> 00:15:27,440
modest resources or

481
00:15:27,440 --> 00:15:30,880
more up-to-date hardware

482
00:15:30,959 --> 00:15:33,360
is significantly faster than the

483
00:15:33,360 --> 00:15:35,120
overhead times shown here

484
00:15:35,120 --> 00:15:38,000
and most importantly the shutdown times

485
00:15:38,000 --> 00:15:38,560
are

486
00:15:38,560 --> 00:15:41,279
very fast so all residue is removed in

487
00:15:41,279 --> 00:15:42,880
less than two and a half seconds while

488
00:15:42,880 --> 00:15:45,040
our implementation works quite well

489
00:15:45,040 --> 00:15:47,680
it does have its limitations the first

490
00:15:47,680 --> 00:15:49,600
is operating system portability

491
00:15:49,600 --> 00:15:51,279
we definitely benefited from the

492
00:15:51,279 --> 00:15:53,279
everything as a file nature of linux

493
00:15:53,279 --> 00:15:55,360
so a port to windows particularly with

494
00:15:55,360 --> 00:15:57,199
its system elements that live in memory

495
00:15:57,199 --> 00:15:58,639
like the registry

496
00:15:58,639 --> 00:16:00,880
will be difficult while other ports to

497
00:16:00,880 --> 00:16:02,480
linux distributions should be

498
00:16:02,480 --> 00:16:03,680
straightforward with only a few

499
00:16:03,680 --> 00:16:04,480
adjustments

500
00:16:04,480 --> 00:16:06,480
we are also working on a mac os port

501
00:16:06,480 --> 00:16:07,680
where we should be able to keep the

502
00:16:07,680 --> 00:16:09,279
logic of our implementation

503
00:16:09,279 --> 00:16:10,639
but we'll likely have to find an

504
00:16:10,639 --> 00:16:12,320
alternative to docker since docker

505
00:16:12,320 --> 00:16:14,720
focuses on emulating linux systems

506
00:16:14,720 --> 00:16:16,639
next and i have talked about this

507
00:16:16,639 --> 00:16:18,639
already is striking the balance between

508
00:16:18,639 --> 00:16:21,440
isolation and access to system resources

509
00:16:21,440 --> 00:16:22,959
operating systems are famously

510
00:16:22,959 --> 00:16:24,560
complicated so proving that an

511
00:16:24,560 --> 00:16:26,480
implementation is able to provide all

512
00:16:26,480 --> 00:16:27,920
the resources required

513
00:16:27,920 --> 00:16:30,079
by all user applications while removing

514
00:16:30,079 --> 00:16:31,360
all sensitive logging

515
00:16:31,360 --> 00:16:32,800
potentially associated with those

516
00:16:32,800 --> 00:16:35,600
resources is a herculean lift

517
00:16:35,600 --> 00:16:37,199
in fact certain applications that

518
00:16:37,199 --> 00:16:38,639
require demonization

519
00:16:38,639 --> 00:16:40,079
or integrating with the bundu's

520
00:16:40,079 --> 00:16:42,800
background services such as specific vpn

521
00:16:42,800 --> 00:16:43,440
clients

522
00:16:43,440 --> 00:16:45,440
snap packages or specific server

523
00:16:45,440 --> 00:16:46,800
applications

524
00:16:46,800 --> 00:16:48,320
they do not work with our current

525
00:16:48,320 --> 00:16:50,800
implementation precisely because

526
00:16:50,800 --> 00:16:53,120
of this challenge and different

527
00:16:53,120 --> 00:16:54,800
implementations of our proposed

528
00:16:54,800 --> 00:16:57,120
architecture can easily end up differing

529
00:16:57,120 --> 00:16:58,240
in how they

530
00:16:58,240 --> 00:17:00,880
end up on this balance finally our

531
00:17:00,880 --> 00:17:02,560
research did not include

532
00:17:02,560 --> 00:17:04,559
end user feedback while we designed

533
00:17:04,559 --> 00:17:06,640
residue free around usability

534
00:17:06,640 --> 00:17:08,799
as a key design parameter the two

535
00:17:08,799 --> 00:17:10,880
limitations i just mentioned are also

536
00:17:10,880 --> 00:17:13,039
hinderances to user adoption

537
00:17:13,039 --> 00:17:14,640
not to mention that we did not include a

538
00:17:14,640 --> 00:17:16,720
user study as part of our work

539
00:17:16,720 --> 00:17:18,160
thank you very much for watching this

540
00:17:18,160 --> 00:17:20,640
presentation the source code for residue

541
00:17:20,640 --> 00:17:22,880
free as well as the test results that

542
00:17:22,880 --> 00:17:25,599
i showed today and the vm with all of

543
00:17:25,599 --> 00:17:27,439
that pre-installed is available on

544
00:17:27,439 --> 00:17:28,160
github

545
00:17:28,160 --> 00:17:30,000
our implementation is designed to be

546
00:17:30,000 --> 00:17:31,760
usable and works out of the box on

547
00:17:31,760 --> 00:17:32,640
ubuntu

548
00:17:32,640 --> 00:17:34,480
though it may take some tweaking for

549
00:17:34,480 --> 00:17:36,080
other linux distributions

550
00:17:36,080 --> 00:17:39,120
we're working on a mac os port but any

551
00:17:39,120 --> 00:17:39,440
other

552
00:17:39,440 --> 00:17:40,960
improvements that you can think of or

553
00:17:40,960 --> 00:17:42,559
want to contribute we

554
00:17:42,559 --> 00:17:44,480
welcome with open arms we've open

555
00:17:44,480 --> 00:17:46,240
sourced everything and

556
00:17:46,240 --> 00:17:48,160
welcome any tweaks forks and

557
00:17:48,160 --> 00:17:50,160
contributions feel free to send any

558
00:17:50,160 --> 00:17:52,400
questions to me via email or i'm at

559
00:17:52,400 --> 00:17:53,600
logan arkema

560
00:17:53,600 --> 00:17:56,480
on twitter with that thanks again and

561
00:17:56,480 --> 00:17:59,760
enjoy the rest of pets

