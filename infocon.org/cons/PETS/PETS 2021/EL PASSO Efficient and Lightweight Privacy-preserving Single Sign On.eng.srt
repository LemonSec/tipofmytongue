1
00:00:01,920 --> 00:00:03,360
hi my name is mihao

2
00:00:03,360 --> 00:00:05,279
i'm a lecturer at city university of

3
00:00:05,279 --> 00:00:07,600
london and i'll present el paso

4
00:00:07,600 --> 00:00:09,440
our privacy preserving single sign-on

5
00:00:09,440 --> 00:00:12,160
system this is a joint work with g

6
00:00:12,160 --> 00:00:17,119
licia alberto and etienne

7
00:00:17,119 --> 00:00:19,359
so this work is about authentication

8
00:00:19,359 --> 00:00:20,880
during class two decades

9
00:00:20,880 --> 00:00:23,119
websites evolve into sophisticated

10
00:00:23,119 --> 00:00:24,480
services that allow us

11
00:00:24,480 --> 00:00:27,119
to create accounts and store our data so

12
00:00:27,119 --> 00:00:28,240
let's have a look at

13
00:00:28,240 --> 00:00:31,840
an example website

14
00:00:32,238 --> 00:00:36,160
i can go to sign up here

15
00:00:36,559 --> 00:00:38,399
so the classical way of authenticating

16
00:00:38,399 --> 00:00:40,480
is by providing and login and password

17
00:00:40,480 --> 00:00:41,760
combination

18
00:00:41,760 --> 00:00:43,440
so the first time i come i go to a

19
00:00:43,440 --> 00:00:44,879
service i have to choose

20
00:00:44,879 --> 00:00:46,800
a log in the password it will be stored

21
00:00:46,800 --> 00:00:48,079
at the server side

22
00:00:48,079 --> 00:00:49,920
and then every single time i connect to

23
00:00:49,920 --> 00:00:52,160
a service i have to

24
00:00:52,160 --> 00:00:55,039
provide the same combination it works

25
00:00:55,039 --> 00:00:56,399
but it's difficult to manage as the

26
00:00:56,399 --> 00:00:58,480
number of services grows

27
00:00:58,480 --> 00:01:00,640
users end up using the same passwords

28
00:01:00,640 --> 00:01:03,840
which poses multiple security concerns

29
00:01:03,840 --> 00:01:05,680
an alternative approach is to use a

30
00:01:05,680 --> 00:01:07,760
single sign-on solution such as openid

31
00:01:07,760 --> 00:01:09,119
connect

32
00:01:09,119 --> 00:01:12,560
at the bottom here here um

33
00:01:12,560 --> 00:01:14,240
users authenticate to an identity

34
00:01:14,240 --> 00:01:16,000
provider that will later authenticate

35
00:01:16,000 --> 00:01:18,320
the users to other services

36
00:01:18,320 --> 00:01:20,479
in this case we have github google and

37
00:01:20,479 --> 00:01:21,520
microsoft com

38
00:01:21,520 --> 00:01:25,119
as identity providers so let's go with

39
00:01:25,119 --> 00:01:28,400
github here i'm now being redirected to

40
00:01:28,400 --> 00:01:29,680
the github

41
00:01:29,680 --> 00:01:32,320
website which is my ident provider i

42
00:01:32,320 --> 00:01:35,040
have to authenticate using my

43
00:01:35,040 --> 00:01:37,759
my login password combination i click

44
00:01:37,759 --> 00:01:38,079
sign

45
00:01:38,079 --> 00:01:41,520
in and then i'm being redirected back

46
00:01:41,520 --> 00:01:44,240
to the service so this is done and i'm

47
00:01:44,240 --> 00:01:45,119
being

48
00:01:45,119 --> 00:01:49,600
i can i can use my account

49
00:01:50,399 --> 00:01:52,320
so how open id connect works under the

50
00:01:52,320 --> 00:01:53,520
hood

51
00:01:53,520 --> 00:01:55,520
the user first have to create an account

52
00:01:55,520 --> 00:01:57,680
with the identity provider

53
00:01:57,680 --> 00:01:59,360
this account can contain multiple

54
00:01:59,360 --> 00:02:00,960
information such as age

55
00:02:00,960 --> 00:02:04,000
gender or country of residence

56
00:02:04,000 --> 00:02:05,520
when user wants to connect to a web

57
00:02:05,520 --> 00:02:07,360
service they send a request

58
00:02:07,360 --> 00:02:09,280
and specifies the their identity

59
00:02:09,280 --> 00:02:10,720
provider

60
00:02:10,720 --> 00:02:12,480
the web service asks the identity

61
00:02:12,480 --> 00:02:13,840
provider

62
00:02:13,840 --> 00:02:15,840
the identity provider then asks for

63
00:02:15,840 --> 00:02:17,599
users consent

64
00:02:17,599 --> 00:02:20,640
and if it's granted the identity

65
00:02:20,640 --> 00:02:21,520
provider

66
00:02:21,520 --> 00:02:24,400
will share user information with the web

67
00:02:24,400 --> 00:02:26,800
service

68
00:02:28,000 --> 00:02:29,440
this is secured by asymmetric

69
00:02:29,440 --> 00:02:31,040
cryptography

70
00:02:31,040 --> 00:02:33,040
the user is now authenticated to the

71
00:02:33,040 --> 00:02:35,280
service and can start using it

72
00:02:35,280 --> 00:02:37,040
so there are multiple advantages of

73
00:02:37,040 --> 00:02:39,360
using open idconnect

74
00:02:39,360 --> 00:02:41,680
first of all now we have only one login

75
00:02:41,680 --> 00:02:43,440
password to memorize which is

76
00:02:43,440 --> 00:02:45,519
much easier than memorizing multiple

77
00:02:45,519 --> 00:02:46,480
accounts

78
00:02:46,480 --> 00:02:49,840
for different services second of all we

79
00:02:49,840 --> 00:02:50,640
have what is called

80
00:02:50,640 --> 00:02:53,200
intra domain linkability the web service

81
00:02:53,200 --> 00:02:55,120
always receives the global id

82
00:02:55,120 --> 00:02:58,640
of the user alice at idp.com here

83
00:02:58,640 --> 00:03:00,879
so if the user tries to launch a civil

84
00:03:00,879 --> 00:03:02,800
attack by creating multiple accounts

85
00:03:02,800 --> 00:03:04,560
the web service can easily detect and

86
00:03:04,560 --> 00:03:07,120
prevent it

87
00:03:07,519 --> 00:03:09,840
we also have easy password recovery so

88
00:03:09,840 --> 00:03:11,280
if the password is stolen

89
00:03:11,280 --> 00:03:14,159
or lost the user just have to identify

90
00:03:14,159 --> 00:03:14,640
that

91
00:03:14,640 --> 00:03:16,560
themselves to the identity provider and

92
00:03:16,560 --> 00:03:18,560
easily reset the password without going

93
00:03:18,560 --> 00:03:21,920
to multiple web services

94
00:03:22,400 --> 00:03:25,920
we also provide accountability again

95
00:03:25,920 --> 00:03:28,000
the web service has the global id of the

96
00:03:28,000 --> 00:03:30,720
user so if the user misbehaves

97
00:03:30,720 --> 00:03:32,319
it is easy for the web service to act

98
00:03:32,319 --> 00:03:34,879
upon that

99
00:03:35,920 --> 00:03:37,680
um it is also easy to set up

100
00:03:37,680 --> 00:03:39,120
multi-device support

101
00:03:39,120 --> 00:03:41,680
if alice here wants to add a new device

102
00:03:41,680 --> 00:03:43,120
say a mobile phone

103
00:03:43,120 --> 00:03:45,519
it is enough for her to uh to connect to

104
00:03:45,519 --> 00:03:46,239
the identity

105
00:03:46,239 --> 00:03:48,640
provider from the new device and the

106
00:03:48,640 --> 00:03:50,000
whole system works as

107
00:03:50,000 --> 00:03:53,040
at the initial device

108
00:03:53,280 --> 00:03:55,200
open id connect also works fully on the

109
00:03:55,200 --> 00:03:57,120
browser and does not require any

110
00:03:57,120 --> 00:03:59,040
additional software

111
00:03:59,040 --> 00:04:01,680
and uses only simple a cryptographic

112
00:04:01,680 --> 00:04:05,120
operation and is fairly fast

113
00:04:05,439 --> 00:04:07,120
however there are also multiple problems

114
00:04:07,120 --> 00:04:08,799
with privacy

115
00:04:08,799 --> 00:04:10,239
the identity provider is the fully

116
00:04:10,239 --> 00:04:12,480
trusted party and can access users data

117
00:04:12,480 --> 00:04:14,000
stored at the web service without

118
00:04:14,000 --> 00:04:16,880
users consent or knowledge imagine that

119
00:04:16,880 --> 00:04:18,798
the web services is a hospital holding

120
00:04:18,798 --> 00:04:20,880
some medical records you probably don't

121
00:04:20,880 --> 00:04:22,079
want your

122
00:04:22,079 --> 00:04:23,840
your identity provider to have access to

123
00:04:23,840 --> 00:04:26,000
this data

124
00:04:26,000 --> 00:04:28,639
second of all every time users connect

125
00:04:28,639 --> 00:04:30,560
to a web service the web service must

126
00:04:30,560 --> 00:04:33,040
communicate with the identity provider

127
00:04:33,040 --> 00:04:35,040
it leaves the identity provider with a

128
00:04:35,040 --> 00:04:38,320
full knowledge about the user activity

129
00:04:38,320 --> 00:04:40,560
furthermore each service receives the

130
00:04:40,560 --> 00:04:41,360
global

131
00:04:41,360 --> 00:04:44,479
fixed id of a user so even if

132
00:04:44,479 --> 00:04:46,400
if the identity provider fully protects

133
00:04:46,400 --> 00:04:48,240
our data the web services can

134
00:04:48,240 --> 00:04:48,880
collaborate

135
00:04:48,880 --> 00:04:51,919
to profile users

136
00:04:52,320 --> 00:04:57,840
finally the identity provides um

137
00:05:00,000 --> 00:05:01,759
finally the identity provider is

138
00:05:01,759 --> 00:05:03,840
necessary for every login

139
00:05:03,840 --> 00:05:06,240
if the identity provider is down user

140
00:05:06,240 --> 00:05:08,479
cannot access any web service

141
00:05:08,479 --> 00:05:10,000
it makes it difficult for smaller

142
00:05:10,000 --> 00:05:11,600
players to enter the market and

143
00:05:11,600 --> 00:05:15,199
increases web centralization

144
00:05:16,000 --> 00:05:18,479
so can we do better than this there are

145
00:05:18,479 --> 00:05:20,400
actually a lot of previous systems based

146
00:05:20,400 --> 00:05:20,639
on

147
00:05:20,639 --> 00:05:23,039
anonymous credentials anonymous

148
00:05:23,039 --> 00:05:24,960
credentials are based on zero knowledge

149
00:05:24,960 --> 00:05:26,800
proofs

150
00:05:26,800 --> 00:05:28,560
and the big difference here is that they

151
00:05:28,560 --> 00:05:31,680
require a private key at the user side

152
00:05:31,680 --> 00:05:34,240
users create a private key and the

153
00:05:34,240 --> 00:05:35,520
identity provider

154
00:05:35,520 --> 00:05:38,639
issues credentials bound to this key the

155
00:05:38,639 --> 00:05:40,639
credentials can be randomized for each

156
00:05:40,639 --> 00:05:42,479
login operation which means that it's

157
00:05:42,479 --> 00:05:43,520
impossible

158
00:05:43,520 --> 00:05:45,680
to say whether multiple logins come from

159
00:05:45,680 --> 00:05:48,400
the same user or not

160
00:05:48,400 --> 00:05:50,000
the users can also control the

161
00:05:50,000 --> 00:05:52,080
information they disclose and can prove

162
00:05:52,080 --> 00:05:54,400
claims so user can prove that they're

163
00:05:54,400 --> 00:05:55,600
above 18

164
00:05:55,600 --> 00:05:58,639
without disclosing their actual age all

165
00:05:58,639 --> 00:06:00,319
of this is really good for privacy

166
00:06:00,319 --> 00:06:02,800
protection

167
00:06:03,520 --> 00:06:06,800
when we compare open id connect against

168
00:06:06,800 --> 00:06:08,319
anonymous credentials

169
00:06:08,319 --> 00:06:10,400
we can split their features into two

170
00:06:10,400 --> 00:06:12,479
distinctive groups

171
00:06:12,479 --> 00:06:14,319
open id connect struggles with privacy

172
00:06:14,319 --> 00:06:16,080
protection but it's great for the ease

173
00:06:16,080 --> 00:06:16,639
of use

174
00:06:16,639 --> 00:06:19,600
practicality and accountability on the

175
00:06:19,600 --> 00:06:20,319
other hand

176
00:06:20,319 --> 00:06:22,080
anonymous credentials provide much

177
00:06:22,080 --> 00:06:23,680
better privacy protection

178
00:06:23,680 --> 00:06:27,280
but are more difficult to deploy

179
00:06:28,080 --> 00:06:31,199
first of all we don't have intra-domain

180
00:06:31,199 --> 00:06:32,639
linkability

181
00:06:32,639 --> 00:06:34,960
users can randomize their credentials

182
00:06:34,960 --> 00:06:36,720
and create multiple accounts within one

183
00:06:36,720 --> 00:06:40,400
website enabling easy civil attacks

184
00:06:40,400 --> 00:06:43,039
we also don't have password recovery

185
00:06:43,039 --> 00:06:44,560
user identity

186
00:06:44,560 --> 00:06:46,720
is bound to its private key when the key

187
00:06:46,720 --> 00:06:49,599
is lost the users lose access to their

188
00:06:49,599 --> 00:06:50,560
identity and

189
00:06:50,560 --> 00:06:53,840
all the services as well there is also a

190
00:06:53,840 --> 00:06:55,759
problem with the accountability

191
00:06:55,759 --> 00:06:57,599
the anonymous credentials protect users

192
00:06:57,599 --> 00:07:00,000
identity so it's impossible to punish

193
00:07:00,000 --> 00:07:02,960
users who misbehave

194
00:07:02,960 --> 00:07:05,199
furthermore using multiple devices is

195
00:07:05,199 --> 00:07:06,400
complicated

196
00:07:06,400 --> 00:07:08,960
users have to manually export their key

197
00:07:08,960 --> 00:07:10,880
secure securely migrate it

198
00:07:10,880 --> 00:07:13,280
between the devices and then import it

199
00:07:13,280 --> 00:07:14,720
on a new device

200
00:07:14,720 --> 00:07:16,560
those operations are too complicated for

201
00:07:16,560 --> 00:07:19,360
regular users

202
00:07:19,759 --> 00:07:21,280
anonymous credentials require more

203
00:07:21,280 --> 00:07:23,759
sophisticated cryptographic operation

204
00:07:23,759 --> 00:07:25,360
forcing users to install dedicated

205
00:07:25,360 --> 00:07:28,400
software this opens a whole new pandora

206
00:07:28,400 --> 00:07:29,599
box of issues

207
00:07:29,599 --> 00:07:33,440
related to interoperability finally

208
00:07:33,440 --> 00:07:35,440
costly cryptographic operations produce

209
00:07:35,440 --> 00:07:36,800
significant overhead

210
00:07:36,800 --> 00:07:38,639
increasing the logging time especially

211
00:07:38,639 --> 00:07:41,919
non-constrained devices

212
00:07:43,360 --> 00:07:45,440
so in this work we propose el paso which

213
00:07:45,440 --> 00:07:46,800
is a single sign-on

214
00:07:46,800 --> 00:07:49,199
uh authentication system that combines

215
00:07:49,199 --> 00:07:50,879
the privacy protection of anonymous

216
00:07:50,879 --> 00:07:53,199
credentials with the ease of use of open

217
00:07:53,199 --> 00:07:54,639
id connect

218
00:07:54,639 --> 00:07:56,240
we don't propose a new cryptographic

219
00:07:56,240 --> 00:07:58,240
primitives but rather build a complete

220
00:07:58,240 --> 00:07:58,720
system

221
00:07:58,720 --> 00:08:02,639
around existing anonymous credentials

222
00:08:03,199 --> 00:08:06,800
so this is how elbas operates as before

223
00:08:06,800 --> 00:08:08,879
aldi starts by creating a single account

224
00:08:08,879 --> 00:08:10,960
at the identity provider

225
00:08:10,960 --> 00:08:13,039
so we keep the log in the one login

226
00:08:13,039 --> 00:08:14,879
password property

227
00:08:14,879 --> 00:08:17,199
however now she also creates a private

228
00:08:17,199 --> 00:08:19,199
key that is only stored locally

229
00:08:19,199 --> 00:08:20,879
and never shared with the identity

230
00:08:20,879 --> 00:08:22,400
provider

231
00:08:22,400 --> 00:08:24,319
it makes it impossible for the identity

232
00:08:24,319 --> 00:08:26,479
provider to impersonate the user

233
00:08:26,479 --> 00:08:28,560
or access its data stored at the web

234
00:08:28,560 --> 00:08:30,960
server

235
00:08:31,280 --> 00:08:32,880
the identity provider then issues

236
00:08:32,880 --> 00:08:35,919
credentials bound to the private key

237
00:08:35,919 --> 00:08:38,240
when alice now wants to connect to a

238
00:08:38,240 --> 00:08:39,120
website

239
00:08:39,120 --> 00:08:41,120
she uses her private key plus the

240
00:08:41,120 --> 00:08:42,240
credentials from the

241
00:08:42,240 --> 00:08:44,800
identity provider to create a website

242
00:08:44,800 --> 00:08:47,279
specific identity

243
00:08:47,279 --> 00:08:50,160
importantly the the web service can

244
00:08:50,160 --> 00:08:52,320
verify the validity of the identity

245
00:08:52,320 --> 00:08:55,279
without contacting the identity provider

246
00:08:55,279 --> 00:08:56,800
we just provide asynchronous

247
00:08:56,800 --> 00:08:58,720
authentication and protect user activity

248
00:08:58,720 --> 00:09:02,560
data from the identity provider

249
00:09:02,640 --> 00:09:04,560
now when alice wants to connect to a

250
00:09:04,560 --> 00:09:05,839
different website say

251
00:09:05,839 --> 00:09:08,080
an online casino she creates a new

252
00:09:08,080 --> 00:09:10,160
identity with potentially a different

253
00:09:10,160 --> 00:09:11,920
set of disclosed attributes

254
00:09:11,920 --> 00:09:13,440
she can for instance only prove that she

255
00:09:13,440 --> 00:09:16,480
is above 18 to be able to play

256
00:09:16,480 --> 00:09:17,680
the important thing is that the

257
00:09:17,680 --> 00:09:19,120
credential used across different

258
00:09:19,120 --> 00:09:21,920
websites cannot be linked to one another

259
00:09:21,920 --> 00:09:22,399
so it

260
00:09:22,399 --> 00:09:27,200
so we achieve intra domain unlinkability

261
00:09:28,720 --> 00:09:30,880
el paso forces uses users to create

262
00:09:30,880 --> 00:09:32,880
identities in a specific way

263
00:09:32,880 --> 00:09:34,800
so that if it's uh so that it's

264
00:09:34,800 --> 00:09:37,440
impossible to create multiple accounts

265
00:09:37,440 --> 00:09:40,000
simple uh multiple simple identities for

266
00:09:40,000 --> 00:09:41,680
one website

267
00:09:41,680 --> 00:09:45,920
we just provide intradomain linkability

268
00:09:45,920 --> 00:09:48,720
each identity contains also a hint about

269
00:09:48,720 --> 00:09:50,640
user real identity

270
00:09:50,640 --> 00:09:53,519
it's encrypted and unavailable for the

271
00:09:53,519 --> 00:09:54,959
web service

272
00:09:54,959 --> 00:09:57,440
however if the user misbehaves the

273
00:09:57,440 --> 00:10:00,080
website can leak it to some authorities

274
00:10:00,080 --> 00:10:01,760
the authorities can then decrypt it and

275
00:10:01,760 --> 00:10:05,360
reveal the real identity of the user

276
00:10:05,360 --> 00:10:07,760
we support threshold cryptography here

277
00:10:07,760 --> 00:10:09,760
for instance at least three out of five

278
00:10:09,760 --> 00:10:12,640
authorities must agree to the decryption

279
00:10:12,640 --> 00:10:14,720
for it to work this provides

280
00:10:14,720 --> 00:10:16,079
accountability

281
00:10:16,079 --> 00:10:18,640
but it's also an optional feature in el

282
00:10:18,640 --> 00:10:21,040
paso

283
00:10:21,760 --> 00:10:23,600
we implement el paso as a web assembly

284
00:10:23,600 --> 00:10:25,600
module that runs fully in the browser

285
00:10:25,600 --> 00:10:27,519
and does not require any additional

286
00:10:27,519 --> 00:10:29,120
software

287
00:10:29,120 --> 00:10:30,640
the web service simply points to the

288
00:10:30,640 --> 00:10:32,320
location of the module which is

289
00:10:32,320 --> 00:10:34,399
automatically downloaded by the browser

290
00:10:34,399 --> 00:10:36,320
on the fly

291
00:10:36,320 --> 00:10:38,160
this operation is fully transparent for

292
00:10:38,160 --> 00:10:39,360
the user

293
00:10:39,360 --> 00:10:41,519
the module can also be cached by the

294
00:10:41,519 --> 00:10:43,600
browser so we don't have to re-download

295
00:10:43,600 --> 00:10:44,079
it with

296
00:10:44,079 --> 00:10:47,519
every single login the private key is

297
00:10:47,519 --> 00:10:48,560
serialized

298
00:10:48,560 --> 00:10:50,800
stored in the browser built in password

299
00:10:50,800 --> 00:10:52,800
monitor and automatically provided to

300
00:10:52,800 --> 00:10:55,040
the module

301
00:10:55,040 --> 00:10:57,279
when user adds a new device it's enough

302
00:10:57,279 --> 00:10:59,120
to log in with the new device at the

303
00:10:59,120 --> 00:11:01,279
identity provider

304
00:11:01,279 --> 00:11:03,839
el paso will automatically encrypt the

305
00:11:03,839 --> 00:11:04,880
existing key

306
00:11:04,880 --> 00:11:07,040
and send it to the new device via the

307
00:11:07,040 --> 00:11:09,120
identity provider

308
00:11:09,120 --> 00:11:11,040
the key is only decrypted at the new

309
00:11:11,040 --> 00:11:13,440
device and never exposed to the identity

310
00:11:13,440 --> 00:11:14,720
provider

311
00:11:14,720 --> 00:11:16,399
the procedure is transparent for the

312
00:11:16,399 --> 00:11:18,720
user and provide easy multi-device

313
00:11:18,720 --> 00:11:21,200
support

314
00:11:21,200 --> 00:11:24,320
if the private key is lost or stolen we

315
00:11:24,320 --> 00:11:26,079
provide and we provide the password

316
00:11:26,079 --> 00:11:28,160
recovery functionality

317
00:11:28,160 --> 00:11:29,839
the user connects to the identity

318
00:11:29,839 --> 00:11:32,560
provider reports a stolen key

319
00:11:32,560 --> 00:11:35,839
and generates a new one the identity

320
00:11:35,839 --> 00:11:37,920
provider immediately stops issuing the

321
00:11:37,920 --> 00:11:38,720
credentials

322
00:11:38,720 --> 00:11:41,440
bound to the old key to stop the

323
00:11:41,440 --> 00:11:44,399
attacker from accessing any services

324
00:11:44,399 --> 00:11:47,040
el paso creates now a special kind of

325
00:11:47,040 --> 00:11:48,079
credentials that will

326
00:11:48,079 --> 00:11:50,240
update the key information at the web

327
00:11:50,240 --> 00:11:51,440
services

328
00:11:51,440 --> 00:11:53,120
this procedure does not have to be

329
00:11:53,120 --> 00:11:55,200
completed right away on all registered

330
00:11:55,200 --> 00:11:56,240
services

331
00:11:56,240 --> 00:11:57,360
the replacement will happen

332
00:11:57,360 --> 00:11:59,200
automatically when user connects to a

333
00:11:59,200 --> 00:12:00,639
specific service

334
00:12:00,639 --> 00:12:02,959
we thus achieve automatic key reset

335
00:12:02,959 --> 00:12:05,439
procedure

336
00:12:06,399 --> 00:12:08,399
we compared el paso performance against

337
00:12:08,399 --> 00:12:11,519
open id connect and irma

338
00:12:11,519 --> 00:12:13,360
irma is a direct implementation of

339
00:12:13,360 --> 00:12:15,040
classic anonymous credentials

340
00:12:15,040 --> 00:12:17,920
without additional procedure and

341
00:12:17,920 --> 00:12:20,959
requires installing additional software

342
00:12:20,959 --> 00:12:22,720
all the tests were performed on a

343
00:12:22,720 --> 00:12:24,560
regular laptop

344
00:12:24,560 --> 00:12:26,880
not only el paso achieves a four times

345
00:12:26,880 --> 00:12:29,360
slower user perceived latency than irma

346
00:12:29,360 --> 00:12:31,519
but also outperforms a certified

347
00:12:31,519 --> 00:12:35,519
implementation of openid connect

348
00:12:36,480 --> 00:12:38,320
we verify the puzzle performance at the

349
00:12:38,320 --> 00:12:39,839
server side as well

350
00:12:39,839 --> 00:12:42,000
we discovered that a single instance on

351
00:12:42,000 --> 00:12:43,600
amazon aws

352
00:12:43,600 --> 00:12:46,480
can handle up to 270 requests per second

353
00:12:46,480 --> 00:12:48,160
at the identity provider

354
00:12:48,160 --> 00:12:50,959
and more than 170 login operations per

355
00:12:50,959 --> 00:12:51,519
second

356
00:12:51,519 --> 00:12:54,240
at the web service more results

357
00:12:54,240 --> 00:12:56,800
including constrained devices

358
00:12:56,800 --> 00:13:00,160
can be found in the paper

359
00:13:00,160 --> 00:13:02,639
to conclude el paso is an asynchronous

360
00:13:02,639 --> 00:13:04,560
authentication system that combines

361
00:13:04,560 --> 00:13:06,240
privacy protection of anonymous

362
00:13:06,240 --> 00:13:07,200
credentials

363
00:13:07,200 --> 00:13:10,560
and practicality of openid connect users

364
00:13:10,560 --> 00:13:12,720
generate domain specific identities that

365
00:13:12,720 --> 00:13:13,680
are unlinkable

366
00:13:13,680 --> 00:13:16,079
across websites and can be verified

367
00:13:16,079 --> 00:13:17,920
without synchronously consulting the

368
00:13:17,920 --> 00:13:20,160
identity provider

369
00:13:20,160 --> 00:13:22,639
elpas automatically handles tasks that

370
00:13:22,639 --> 00:13:23,440
are threatened

371
00:13:23,440 --> 00:13:26,000
traditionally difficult for the users

372
00:13:26,000 --> 00:13:26,480
and

373
00:13:26,480 --> 00:13:29,440
expose exposes a web interface that is

374
00:13:29,440 --> 00:13:31,440
similar to the one of the open id

375
00:13:31,440 --> 00:13:32,800
connect

376
00:13:32,800 --> 00:13:34,639
the efficient implementation lowers the

377
00:13:34,639 --> 00:13:36,000
user perceived login time

378
00:13:36,000 --> 00:13:37,839
and is lightweight enough to support

379
00:13:37,839 --> 00:13:39,920
hundreds of authentication requests per

380
00:13:39,920 --> 00:13:43,439
second on a regular server

381
00:13:44,480 --> 00:13:46,959
our code is available in open source we

382
00:13:46,959 --> 00:13:48,639
have fairly good documentation plus a

383
00:13:48,639 --> 00:13:50,000
demo that you can play with

384
00:13:50,000 --> 00:13:52,560
um we we also passed the pat's

385
00:13:52,560 --> 00:13:54,399
certificate evaluation so the code

386
00:13:54,399 --> 00:13:56,000
should be good to go

387
00:13:56,000 --> 00:13:59,040
so please please feel free to

388
00:13:59,040 --> 00:14:01,279
have a look at our repository and reach

389
00:14:01,279 --> 00:14:03,760
us if you have any questions

390
00:14:03,760 --> 00:14:09,760
thank you

