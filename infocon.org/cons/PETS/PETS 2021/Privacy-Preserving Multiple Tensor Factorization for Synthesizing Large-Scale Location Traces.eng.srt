1
00:00:02,879 --> 00:00:04,080
hello everyone

2
00:00:04,080 --> 00:00:07,520
i am takao murakabi at aisd today

3
00:00:07,520 --> 00:00:09,280
i'd like to talk about a location

4
00:00:09,280 --> 00:00:11,679
synthesizer called previously preserving

5
00:00:11,679 --> 00:00:17,039
multiple tensorflowization

6
00:00:17,039 --> 00:00:19,359
first i briefly explained the outline of

7
00:00:19,359 --> 00:00:20,640
this work

8
00:00:20,640 --> 00:00:22,880
nowadays a large amount of location

9
00:00:22,880 --> 00:00:25,199
traces are collected into an abs

10
00:00:25,199 --> 00:00:26,240
provider

11
00:00:26,240 --> 00:00:28,480
and they can be used for various types

12
00:00:28,480 --> 00:00:31,679
of zero data analysis

13
00:00:31,679 --> 00:00:34,399
for example we can calculate a time

14
00:00:34,399 --> 00:00:36,480
dependent population distribution from

15
00:00:36,480 --> 00:00:38,480
traces

16
00:00:38,480 --> 00:00:41,040
it can be used for finding popular boi

17
00:00:41,040 --> 00:00:45,839
such as popular restaurants at leinstein

18
00:00:46,239 --> 00:00:49,280
another example is a transient matrix

19
00:00:49,280 --> 00:00:51,520
a transient matrix is composed of a

20
00:00:51,520 --> 00:00:53,120
transition probability from some

21
00:00:53,120 --> 00:00:55,680
location to another location

22
00:00:55,680 --> 00:00:58,320
so it can be used for modern human

23
00:00:58,320 --> 00:01:00,079
movement patterns such as mall

24
00:01:00,079 --> 00:01:02,800
to restaurant

25
00:01:04,000 --> 00:01:06,159
the third example is a visit fraction

26
00:01:06,159 --> 00:01:08,080
distribution

27
00:01:08,080 --> 00:01:10,640
for each poi we can calculate a

28
00:01:10,640 --> 00:01:12,000
frequency distribution

29
00:01:12,000 --> 00:01:14,479
of the physics function and this

30
00:01:14,479 --> 00:01:17,119
distribution can be used for annotation

31
00:01:17,119 --> 00:01:19,200
of pois

32
00:01:19,200 --> 00:01:22,400
for example in this figure poi a

33
00:01:22,400 --> 00:01:26,640
is an office and poab is a park

34
00:01:26,640 --> 00:01:29,360
we know that many people spend much time

35
00:01:29,360 --> 00:01:30,400
at office

36
00:01:30,400 --> 00:01:34,000
for example they may spend 20 to 60

37
00:01:34,000 --> 00:01:35,520
percent of their time

38
00:01:35,520 --> 00:01:39,200
at office so we can automatically add

39
00:01:39,200 --> 00:01:42,240
an office tag to poi a based on this

40
00:01:42,240 --> 00:01:44,960
distribution

41
00:01:47,200 --> 00:01:49,920
so traces are very useful for various

42
00:01:49,920 --> 00:01:51,439
geodata analysis

43
00:01:51,439 --> 00:01:53,600
but they may include some sensitive

44
00:01:53,600 --> 00:01:55,439
locations such as hospitals

45
00:01:55,439 --> 00:02:00,399
and home to address a privacy issue

46
00:02:00,399 --> 00:02:02,640
as a location synthesizer has been

47
00:02:02,640 --> 00:02:04,640
widely studied

48
00:02:04,640 --> 00:02:06,880
in this approach we train a generative

49
00:02:06,880 --> 00:02:09,598
model from real traces

50
00:02:09,598 --> 00:02:12,560
then we generate synthetic traces from

51
00:02:12,560 --> 00:02:15,040
the gelatin model

52
00:02:15,040 --> 00:02:17,520
ideally synthetic choices should

53
00:02:17,520 --> 00:02:18,160
preserve

54
00:02:18,160 --> 00:02:20,080
various statistical features while

55
00:02:20,080 --> 00:02:23,840
protecting user privacy

56
00:02:24,720 --> 00:02:27,200
in particular locations form some

57
00:02:27,200 --> 00:02:28,640
clusters such as

58
00:02:28,640 --> 00:02:31,280
those who commit by car and those who

59
00:02:31,280 --> 00:02:33,040
often go shopping

60
00:02:33,040 --> 00:02:35,040
and the features specific to such

61
00:02:35,040 --> 00:02:36,080
clusters is

62
00:02:36,080 --> 00:02:38,160
important for some geodata analysis

63
00:02:38,160 --> 00:02:40,239
tasks

64
00:02:40,239 --> 00:02:43,599
for example annotation of office voice

65
00:02:43,599 --> 00:02:46,640
requires traces of office workers

66
00:02:46,640 --> 00:02:49,599
so poi annotation requires such

67
00:02:49,599 --> 00:02:52,800
cluster-specific features

68
00:02:52,800 --> 00:02:55,519
the class-a-specific feature is also

69
00:02:55,519 --> 00:02:57,599
important for generating realistic

70
00:02:57,599 --> 00:02:58,720
location datasets

71
00:02:58,720 --> 00:03:01,440
so location synthesizers should have

72
00:03:01,440 --> 00:03:05,360
this feature

73
00:03:05,360 --> 00:03:08,239
however most of the existing location

74
00:03:08,239 --> 00:03:10,519
synthesizers do not preserve a

75
00:03:10,519 --> 00:03:12,319
cluster-specific feature

76
00:03:12,319 --> 00:03:14,480
because they generate traces based on

77
00:03:14,480 --> 00:03:15,360
parameters

78
00:03:15,360 --> 00:03:18,400
common to all users

79
00:03:18,400 --> 00:03:21,360
so they are not satisfactory in terms of

80
00:03:21,360 --> 00:03:23,920
utility

81
00:03:24,080 --> 00:03:27,920
one exception is sglt synthetic location

82
00:03:27,920 --> 00:03:29,599
trace generator

83
00:03:29,599 --> 00:03:31,599
this is a state of the art location

84
00:03:31,599 --> 00:03:32,720
synthesizer

85
00:03:32,720 --> 00:03:35,920
but it's not scalable because the

86
00:03:35,920 --> 00:03:36,720
running time

87
00:03:36,720 --> 00:03:39,840
is quadratic in n the number of users

88
00:03:39,840 --> 00:03:44,560
and cubic in m the number of locations

89
00:03:44,560 --> 00:03:47,680
so in this work we propose a new

90
00:03:47,680 --> 00:03:49,799
location synthesizer called

91
00:03:49,799 --> 00:03:52,400
ppmtf to achieve high

92
00:03:52,400 --> 00:03:56,159
utility and scalability

93
00:03:57,360 --> 00:04:01,040
more specifically our proposal ppmgf has

94
00:04:01,040 --> 00:04:03,680
a following features

95
00:04:03,680 --> 00:04:06,159
first it preserves various statistical

96
00:04:06,159 --> 00:04:08,879
features such as population distribution

97
00:04:08,879 --> 00:04:12,079
and transient metrics

98
00:04:12,239 --> 00:04:14,879
it also preserves cluster-specific

99
00:04:14,879 --> 00:04:15,760
features

100
00:04:15,760 --> 00:04:17,918
so it preserves a visit fraction

101
00:04:17,918 --> 00:04:20,639
distribution

102
00:04:21,839 --> 00:04:26,080
second ppmetf is very scalable

103
00:04:26,080 --> 00:04:29,360
the running time is linear in users and

104
00:04:29,360 --> 00:04:32,880
quadratic in locations for example

105
00:04:32,880 --> 00:04:35,520
when the number of users is 200

106
00:04:35,520 --> 00:04:36,479
thousands

107
00:04:36,479 --> 00:04:39,880
and the number of locations is 1000

108
00:04:39,880 --> 00:04:43,280
sclt would require over 4 thousand

109
00:04:43,280 --> 00:04:46,720
years to train the generating model

110
00:04:46,720 --> 00:04:50,960
in contrast ppmtf requires only 2 days

111
00:04:50,960 --> 00:04:54,840
which is 1 million times faster than

112
00:04:54,840 --> 00:04:57,840
scld

113
00:04:58,320 --> 00:05:02,000
finally ppmtf uses possible reliability

114
00:05:02,000 --> 00:05:03,280
as a privacy metric

115
00:05:03,280 --> 00:05:06,560
in the same way as sclt to prevent the

116
00:05:06,560 --> 00:05:09,360
influence of real traces from synthetic

117
00:05:09,360 --> 00:05:11,280
traces

118
00:05:11,280 --> 00:05:14,000
so we advance the state of the art in

119
00:05:14,000 --> 00:05:14,560
terms of

120
00:05:14,560 --> 00:05:17,280
utility and scalability at the same

121
00:05:17,280 --> 00:05:20,479
level of privacy

122
00:05:20,639 --> 00:05:24,000
but one limitation is that we assume a

123
00:05:24,000 --> 00:05:26,320
generating model is kept secret

124
00:05:26,320 --> 00:05:28,639
and we protect privacy for only

125
00:05:28,639 --> 00:05:30,960
synthetic traces

126
00:05:30,960 --> 00:05:33,759
so providing strong privacy guarantees

127
00:05:33,759 --> 00:05:35,680
such as differential privacy for the

128
00:05:35,680 --> 00:05:36,880
generating model

129
00:05:36,880 --> 00:05:40,320
is left for future work

130
00:05:42,240 --> 00:05:44,560
okay so next i will explain more about

131
00:05:44,560 --> 00:05:47,440
our proposal

132
00:05:48,479 --> 00:05:51,600
i begin with its overview first to

133
00:05:51,600 --> 00:05:53,600
preserve transient matrices

134
00:05:53,600 --> 00:05:56,479
we calculate a transient count stencil

135
00:05:56,479 --> 00:05:58,319
which is composed of user

136
00:05:58,319 --> 00:06:01,520
location and next location

137
00:06:01,520 --> 00:06:03,440
this stencil includes a transition

138
00:06:03,440 --> 00:06:05,199
matrix for each user

139
00:06:05,199 --> 00:06:07,759
so it preserves the information about

140
00:06:07,759 --> 00:06:10,720
movement patterns

141
00:06:11,759 --> 00:06:14,720
and second to preserve time dependent

142
00:06:14,720 --> 00:06:16,240
operation distributions

143
00:06:16,240 --> 00:06:18,479
we calculate a visit count tensor

144
00:06:18,479 --> 00:06:19,919
stencil

145
00:06:19,919 --> 00:06:23,120
this is composed of user location and

146
00:06:23,120 --> 00:06:24,400
time slot

147
00:06:24,400 --> 00:06:27,840
and includes a visit count for each user

148
00:06:27,840 --> 00:06:31,199
location and time slot so

149
00:06:31,199 --> 00:06:33,680
this stencil preserves the information

150
00:06:33,680 --> 00:06:34,560
about time

151
00:06:34,560 --> 00:06:38,400
dependent population distributions

152
00:06:40,080 --> 00:06:42,639
and to preserve cluster specific

153
00:06:42,639 --> 00:06:43,440
features

154
00:06:43,440 --> 00:06:47,120
we factorize two tensors simultaneously

155
00:06:47,120 --> 00:06:48,880
this is known as multiple tensor

156
00:06:48,880 --> 00:06:51,199
factorization

157
00:06:51,199 --> 00:06:53,280
tensor factorization is a kind of

158
00:06:53,280 --> 00:06:54,479
glossary

159
00:06:54,479 --> 00:06:57,199
so a generative model preserves the

160
00:06:57,199 --> 00:06:59,440
information about clusters such as

161
00:06:59,440 --> 00:07:02,160
those who committed by car and those who

162
00:07:02,160 --> 00:07:04,880
go shopping

163
00:07:05,280 --> 00:07:09,039
and finally to generate synthetic traces

164
00:07:09,039 --> 00:07:11,520
we reconstruct tensors from a generating

165
00:07:11,520 --> 00:07:12,479
model

166
00:07:12,479 --> 00:07:14,479
and we generate traces from the

167
00:07:14,479 --> 00:07:16,080
reconstructed tensor

168
00:07:16,080 --> 00:07:19,840
via the mh algorithm

169
00:07:19,840 --> 00:07:24,000
okay this is a high level overview

170
00:07:24,319 --> 00:07:27,840
and now i explain the details first

171
00:07:27,840 --> 00:07:30,319
we calculate two sensors from training

172
00:07:30,319 --> 00:07:32,240
traces

173
00:07:32,240 --> 00:07:34,639
the first stencil is a transient count

174
00:07:34,639 --> 00:07:35,759
stencil

175
00:07:35,759 --> 00:07:37,680
which is a transition count matrix for

176
00:07:37,680 --> 00:07:39,919
each user

177
00:07:39,919 --> 00:07:43,199
in this example user u1 has

178
00:07:43,199 --> 00:07:46,560
one transition from x2 to x3

179
00:07:46,560 --> 00:07:51,039
so the corresponding element is 1.

180
00:07:52,000 --> 00:07:54,400
the second tensor is a visit count

181
00:07:54,400 --> 00:07:55,360
tensor

182
00:07:55,360 --> 00:07:57,440
which is a visit count vector for each

183
00:07:57,440 --> 00:08:00,000
user and time slot

184
00:08:00,000 --> 00:08:03,759
and in this example user u1 visits

185
00:08:03,759 --> 00:08:07,520
x2 and x3 in time slot 1.

186
00:08:07,520 --> 00:08:13,840
so the corresponding elements are 1.

187
00:08:14,879 --> 00:08:17,120
then we factorize two tensors

188
00:08:17,120 --> 00:08:19,199
simultaneously

189
00:08:19,199 --> 00:08:22,639
here a b c and d

190
00:08:22,639 --> 00:08:26,160
are called factor matrices and each

191
00:08:26,160 --> 00:08:27,440
column in a

192
00:08:27,440 --> 00:08:31,440
b c and d represents a cluster

193
00:08:31,440 --> 00:08:34,559
for example in this figure the first

194
00:08:34,559 --> 00:08:35,120
column

195
00:08:35,120 --> 00:08:38,159
in b c and d has

196
00:08:38,159 --> 00:08:41,200
high values at bars bars and

197
00:08:41,200 --> 00:08:44,240
night respectively then

198
00:08:44,240 --> 00:08:47,519
the first column in a represents a class

199
00:08:47,519 --> 00:08:47,839
of

200
00:08:47,839 --> 00:08:52,399
users who go to bus at night

201
00:08:52,720 --> 00:08:56,480
so there are z clusters in this example

202
00:08:56,480 --> 00:08:59,279
and the clusters are automatically found

203
00:08:59,279 --> 00:09:02,480
from training traces

204
00:09:04,320 --> 00:09:06,560
finally we generate traces from

205
00:09:06,560 --> 00:09:09,440
reconstructed tensions

206
00:09:09,440 --> 00:09:12,640
for each user u n and time slot t

207
00:09:12,640 --> 00:09:15,680
we calculate a visit probability vector

208
00:09:15,680 --> 00:09:20,160
p and t from the second tensor

209
00:09:20,160 --> 00:09:23,279
then from the first stencil we calculate

210
00:09:23,279 --> 00:09:25,120
a transition matrix q

211
00:09:25,120 --> 00:09:28,800
and t whose stationary vector is plt

212
00:09:28,800 --> 00:09:32,320
via the mh algorithm

213
00:09:32,320 --> 00:09:35,440
and finally we generate locations for

214
00:09:35,440 --> 00:09:37,440
each user and time slot

215
00:09:37,440 --> 00:09:39,519
using the corresponding stationary

216
00:09:39,519 --> 00:09:43,440
vector and transient matrix

217
00:09:43,600 --> 00:09:47,040
okay this is our proposal

218
00:09:47,040 --> 00:09:49,680
and next i will explain how to protect

219
00:09:49,680 --> 00:09:53,279
privacy in our proposal

220
00:09:54,480 --> 00:09:57,760
as i explained ppmtf generates a

221
00:09:57,760 --> 00:09:58,880
synthetic trace

222
00:09:58,880 --> 00:10:04,079
y for user ul using a generative model

223
00:10:04,079 --> 00:10:06,720
and we use clause reliability as a

224
00:10:06,720 --> 00:10:08,640
privacy metric

225
00:10:08,640 --> 00:10:12,320
formally k epsilon pd satisfies

226
00:10:12,320 --> 00:10:16,320
this inequality for input user u n

227
00:10:16,320 --> 00:10:20,320
and k minus 1 other uses um

228
00:10:20,320 --> 00:10:23,519
so the linkage of u n and y

229
00:10:23,519 --> 00:10:27,040
is alleviated by pd

230
00:10:27,279 --> 00:10:30,399
and we can calculate this probability so

231
00:10:30,399 --> 00:10:31,279
we release

232
00:10:31,279 --> 00:10:34,000
a synthetic trace y only when it

233
00:10:34,000 --> 00:10:37,519
provides k epsilon b d

234
00:10:39,519 --> 00:10:41,920
and we can explain the overall privacy

235
00:10:41,920 --> 00:10:46,000
of bp mtf based on pe

236
00:10:46,000 --> 00:10:48,640
we generate a synthetic trace y for user

237
00:10:48,640 --> 00:10:49,440
u n

238
00:10:49,440 --> 00:10:53,120
using a n b c and d

239
00:10:53,120 --> 00:10:57,360
where a n is uh the nth row over a

240
00:10:57,360 --> 00:11:00,720
and a n is a user profile of u n

241
00:11:00,720 --> 00:11:04,079
and now the linkage of u n and y

242
00:11:04,079 --> 00:11:07,440
is alleviated by pd so

243
00:11:07,440 --> 00:11:10,880
the leakage of a n is also elevated by

244
00:11:10,880 --> 00:11:14,160
pg and b

245
00:11:14,160 --> 00:11:16,560
and c are information about locations

246
00:11:16,560 --> 00:11:18,560
which is called location profile

247
00:11:18,560 --> 00:11:21,440
and d is information about time which is

248
00:11:21,440 --> 00:11:23,920
called time profile

249
00:11:23,920 --> 00:11:26,320
so the leakage of information about

250
00:11:26,320 --> 00:11:26,959
users

251
00:11:26,959 --> 00:11:31,279
is alleviated by k epsilon pd

252
00:11:31,519 --> 00:11:34,640
and we also empirically saw the privacy

253
00:11:34,640 --> 00:11:36,320
of ppmtf

254
00:11:36,320 --> 00:11:43,440
so now i explain our experiments

255
00:11:43,440 --> 00:11:46,640
in our experiments we first used

256
00:11:46,640 --> 00:11:49,279
the sns based people flow data set in

257
00:11:49,279 --> 00:11:51,440
tokyo

258
00:11:51,440 --> 00:11:54,720
here we set its time interval and time

259
00:11:54,720 --> 00:11:57,839
slot to 20 minutes and we extracted

260
00:11:57,839 --> 00:11:58,720
traces from

261
00:11:58,720 --> 00:12:02,880
9 a.m to 7 p.m for 500 training users

262
00:12:02,880 --> 00:12:04,000
and 500

263
00:12:04,000 --> 00:12:06,800
testing users

264
00:12:07,040 --> 00:12:09,600
and for privacy we consider the

265
00:12:09,600 --> 00:12:11,920
re-identification tag

266
00:12:11,920 --> 00:12:13,519
here we use the bayesian

267
00:12:13,519 --> 00:12:15,200
re-identification algorithm

268
00:12:15,200 --> 00:12:18,240
for to re-identify input user u n

269
00:12:18,240 --> 00:12:21,920
from each synthetic trace y

270
00:12:22,399 --> 00:12:25,360
for utility we calculated a time

271
00:12:25,360 --> 00:12:27,360
independent population distribution for

272
00:12:27,360 --> 00:12:30,160
test interests and synthetic traces

273
00:12:30,160 --> 00:12:33,200
and then we evaluated the average total

274
00:12:33,200 --> 00:12:36,160
variation between the two distributions

275
00:12:36,160 --> 00:12:40,480
we call this tb tv

276
00:12:42,000 --> 00:12:45,760
and here we have the results scd

277
00:12:45,760 --> 00:12:49,040
is a synthetic data generator and scd

278
00:12:49,040 --> 00:12:52,320
and sclt are two existing location

279
00:12:52,320 --> 00:12:54,560
synthesizers

280
00:12:54,560 --> 00:12:57,760
and c in sclt is a parameter that

281
00:12:57,760 --> 00:13:00,399
represents the number of clusters

282
00:13:00,399 --> 00:13:04,560
and we set c to various values

283
00:13:04,560 --> 00:13:08,399
and we can see that scd and sclt

284
00:13:08,399 --> 00:13:12,160
result in high re-identification rate

285
00:13:12,160 --> 00:13:14,800
this is because they generate synthetic

286
00:13:14,800 --> 00:13:16,320
choices by copying

287
00:13:16,320 --> 00:13:19,519
some training locations

288
00:13:19,519 --> 00:13:22,959
in contrast ppmtf achieves no

289
00:13:22,959 --> 00:13:25,200
re-identification rate while keeping

290
00:13:25,200 --> 00:13:27,440
high utility how it is close to

291
00:13:27,440 --> 00:13:30,240
20 traces

292
00:13:30,560 --> 00:13:33,760
we also showed that ppmtf preserves

293
00:13:33,760 --> 00:13:35,200
transfer matrices so

294
00:13:35,200 --> 00:13:39,440
so for more details please see a paper

295
00:13:41,360 --> 00:13:44,240
and to evaluate the privacy more we also

296
00:13:44,240 --> 00:13:47,600
consider the membership inference attack

297
00:13:47,600 --> 00:13:50,079
here we use the likelihood ratio based

298
00:13:50,079 --> 00:13:52,639
mi algorithm to determine for each

299
00:13:52,639 --> 00:13:55,839
1000 users whether she is a training

300
00:13:55,839 --> 00:13:57,519
user or not

301
00:13:57,519 --> 00:14:00,399
so we determined whether each user is a

302
00:14:00,399 --> 00:14:00,959
member

303
00:14:00,959 --> 00:14:03,839
or no member

304
00:14:05,279 --> 00:14:07,519
and here we have the results the

305
00:14:07,519 --> 00:14:09,760
membership advantage is the difference

306
00:14:09,760 --> 00:14:12,160
between the true possible rate and false

307
00:14:12,160 --> 00:14:13,279
possible rate

308
00:14:13,279 --> 00:14:17,120
so lower is better and we can see

309
00:14:17,120 --> 00:14:20,399
that ppmtf achieves low membership

310
00:14:20,399 --> 00:14:21,279
advantage

311
00:14:21,279 --> 00:14:24,800
while keeping high utility we consider

312
00:14:24,800 --> 00:14:25,760
this is because

313
00:14:25,760 --> 00:14:29,040
the inequality in pd holds for both

314
00:14:29,040 --> 00:14:33,120
training and testing users in practice

315
00:14:35,120 --> 00:14:38,160
we also visualize some columns in factor

316
00:14:38,160 --> 00:14:39,199
matrices b

317
00:14:39,199 --> 00:14:42,240
and c and training traces and synthetic

318
00:14:42,240 --> 00:14:43,120
traces

319
00:14:43,120 --> 00:14:46,480
the values in a are high

320
00:14:46,480 --> 00:14:49,279
the green line is synthroid and the

321
00:14:49,279 --> 00:14:50,160
orange line

322
00:14:50,160 --> 00:14:53,199
is social line so

323
00:14:53,199 --> 00:14:56,560
we can see that ppmtf preserves

324
00:14:56,560 --> 00:14:59,680
cluster features such as those who

325
00:14:59,680 --> 00:15:01,199
commute by train

326
00:15:01,199 --> 00:15:03,680
and we generate synthetic traces based

327
00:15:03,680 --> 00:15:07,599
on the cluster-specific features

328
00:15:09,760 --> 00:15:12,720
next we evaluate the scalability and

329
00:15:12,720 --> 00:15:15,519
here we have the results

330
00:15:15,519 --> 00:15:18,720
sclt is exactly cubic in m

331
00:15:18,720 --> 00:15:21,519
the number of locations and quadratic in

332
00:15:21,519 --> 00:15:21,760
n

333
00:15:21,760 --> 00:15:25,320
the number of users in contrast

334
00:15:25,320 --> 00:15:28,240
ppmtf is quadratic in m

335
00:15:28,240 --> 00:15:32,399
and linear in n so for example

336
00:15:32,399 --> 00:15:35,600
when n is 200 thousands and m

337
00:15:35,600 --> 00:15:39,600
is 1000 sclt would require over 4

338
00:15:39,600 --> 00:15:40,079
thousand

339
00:15:40,079 --> 00:15:45,920
years and ppmtl requires only 2 days

340
00:15:47,600 --> 00:15:50,720
finally we use a 4 square data set in

341
00:15:50,720 --> 00:15:51,600
new york

342
00:15:51,600 --> 00:15:53,920
and we evaluate its visit fraction

343
00:15:53,920 --> 00:15:56,079
distribution

344
00:15:56,079 --> 00:15:59,360
here we evaluated the ppmdf with

345
00:15:59,360 --> 00:16:03,120
10 1pd and scd

346
00:16:03,120 --> 00:16:06,000
we didn't evaluate sclt because it

347
00:16:06,000 --> 00:16:07,440
cannot be applied to this

348
00:16:07,440 --> 00:16:10,320
large data set

349
00:16:10,880 --> 00:16:14,240
and we can see that in scd all

350
00:16:14,240 --> 00:16:16,880
users spend almost the same amount of

351
00:16:16,880 --> 00:16:17,360
time

352
00:16:17,360 --> 00:16:21,120
on each poi this is because

353
00:16:21,120 --> 00:16:25,279
scd uses parameters common to all users

354
00:16:25,279 --> 00:16:27,839
so lcd cannot preserve the visit

355
00:16:27,839 --> 00:16:30,560
fraction distribution

356
00:16:30,560 --> 00:16:34,199
in contrast ppmtf preserves the

357
00:16:34,199 --> 00:16:36,639
cluster-specific features such as office

358
00:16:36,639 --> 00:16:37,759
workers

359
00:16:37,759 --> 00:16:40,079
so it preserves visit fraction

360
00:16:40,079 --> 00:16:41,600
distribution

361
00:16:41,600 --> 00:16:44,720
and the annotation of poi such as park

362
00:16:44,720 --> 00:16:50,000
and office is possible

363
00:16:50,000 --> 00:16:52,480
okay let me summarize this talk we

364
00:16:52,480 --> 00:16:55,600
proposed bbmdf which preserves our

365
00:16:55,600 --> 00:16:57,040
various statistical features

366
00:16:57,040 --> 00:16:58,399
including clustering our

367
00:16:58,399 --> 00:17:00,720
cluster-specific features

368
00:17:00,720 --> 00:17:03,120
it's also scalable and we can handle a

369
00:17:03,120 --> 00:17:05,839
million users

370
00:17:06,079 --> 00:17:08,559
for future work we directly provide

371
00:17:08,559 --> 00:17:10,160
strong privacy guarantees such as

372
00:17:10,160 --> 00:17:11,919
differential privacy for generating

373
00:17:11,919 --> 00:17:13,599
model

374
00:17:13,599 --> 00:17:16,079
for example differential privacy is

375
00:17:16,079 --> 00:17:17,199
small epsilon

376
00:17:17,199 --> 00:17:20,480
might be achieved by releasing only b c

377
00:17:20,480 --> 00:17:24,799
and d and randomly generating a

378
00:17:24,799 --> 00:17:27,119
so we'd like to investigate how much

379
00:17:27,119 --> 00:17:32,640
epsilon can be reduced by this approach

380
00:17:32,640 --> 00:17:36,160
okay that's all and thank you for your

381
00:17:38,120 --> 00:17:41,120
attention

