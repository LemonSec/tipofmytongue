1
00:00:00,240 --> 00:00:02,240
hello everyone thank you for being here

2
00:00:02,240 --> 00:00:04,640
today i'm siddish a second year phd

3
00:00:04,640 --> 00:00:06,640
student at the university of washington

4
00:00:06,640 --> 00:00:09,120
and today i'll be presenting details and

5
00:00:09,120 --> 00:00:10,000
measurements

6
00:00:10,000 --> 00:00:12,400
of a new privacy enhancing bns protocol

7
00:00:12,400 --> 00:00:13,360
called odo

8
00:00:13,360 --> 00:00:16,640
or oblivious dns over https this was a

9
00:00:16,640 --> 00:00:18,480
part of my internship work at cloudflare

10
00:00:18,480 --> 00:00:19,760
over the last summer

11
00:00:19,760 --> 00:00:21,359
and it would not have been possible

12
00:00:21,359 --> 00:00:23,760
without all the incredible collaborators

13
00:00:23,760 --> 00:00:25,760
i'm very excited to be representing all

14
00:00:25,760 --> 00:00:28,880
of them in today's talk

15
00:00:28,880 --> 00:00:30,640
as a quick introduction and most of you

16
00:00:30,640 --> 00:00:32,000
might already know

17
00:00:32,000 --> 00:00:34,160
dns is the domain name system and is

18
00:00:34,160 --> 00:00:36,079
really the foundation of a human usable

19
00:00:36,079 --> 00:00:36,960
internet

20
00:00:36,960 --> 00:00:39,040
it responds to client queries for host

21
00:00:39,040 --> 00:00:40,800
names with the corresponding ip

22
00:00:40,800 --> 00:00:42,559
addresses and records

23
00:00:42,559 --> 00:00:44,879
and traditionally the dns protocol is

24
00:00:44,879 --> 00:00:47,280
not encrypted and it uses udp

25
00:00:47,280 --> 00:00:49,200
which continues to be a majority of the

26
00:00:49,200 --> 00:00:50,800
traffic that is received

27
00:00:50,800 --> 00:00:52,719
by the public resolver that cloudflare

28
00:00:52,719 --> 00:00:54,000
operates

29
00:00:54,000 --> 00:00:56,719
the usage of non-encrypted dns leaks

30
00:00:56,719 --> 00:00:58,079
user information to network

31
00:00:58,079 --> 00:01:00,000
operators and passive network

32
00:01:00,000 --> 00:01:02,399
adversaries like this detective eyeball

33
00:01:02,399 --> 00:01:04,080
who is observing the network

34
00:01:04,080 --> 00:01:05,920
and also allows active attackers like

35
00:01:05,920 --> 00:01:07,360
the red monster here

36
00:01:07,360 --> 00:01:10,080
to modify the request from the client or

37
00:01:10,080 --> 00:01:12,880
the response from the resolver

38
00:01:12,880 --> 00:01:14,880
to overcome some of these problems there

39
00:01:14,880 --> 00:01:17,360
have been recent efforts to secure dns

40
00:01:17,360 --> 00:01:21,520
using dns over tls dot or dns over https

41
00:01:21,520 --> 00:01:23,040
or doh

42
00:01:23,040 --> 00:01:24,400
both of which have been gaining

43
00:01:24,400 --> 00:01:26,640
popularity and have been integrated into

44
00:01:26,640 --> 00:01:28,400
various web browsers and operating

45
00:01:28,400 --> 00:01:29,439
systems

46
00:01:29,439 --> 00:01:31,200
these protocols protect the client

47
00:01:31,200 --> 00:01:33,439
traffic from being observed by onlookers

48
00:01:33,439 --> 00:01:35,680
or being intercepted and changed by an

49
00:01:35,680 --> 00:01:37,040
on path attacker

50
00:01:37,040 --> 00:01:39,520
but a problem still remains the resolver

51
00:01:39,520 --> 00:01:40,960
operator can continue

52
00:01:40,960 --> 00:01:43,119
to associate the client requests to

53
00:01:43,119 --> 00:01:45,200
their ip addresses and build a profile

54
00:01:45,200 --> 00:01:48,079
around their browsing pattern

55
00:01:48,079 --> 00:01:49,920
over the past few years we have seen

56
00:01:49,920 --> 00:01:51,600
active measurement research trying to

57
00:01:51,600 --> 00:01:53,680
understand and measure the impacts of

58
00:01:53,680 --> 00:01:55,280
encrypted protocols like doe

59
00:01:55,280 --> 00:01:57,920
or dod and many large scale measurements

60
00:01:57,920 --> 00:01:59,360
have shown that the performance of

61
00:01:59,360 --> 00:02:01,040
encrypted protocols they vary by the

62
00:02:01,040 --> 00:02:02,320
choice of the resolver

63
00:02:02,320 --> 00:02:04,159
it does not significantly impact page

64
00:02:04,159 --> 00:02:07,119
load times and it improves user security

65
00:02:07,119 --> 00:02:09,119
there have also been various attempts to

66
00:02:09,119 --> 00:02:11,440
improve page load times by prefetching

67
00:02:11,440 --> 00:02:14,720
but why don't did improve the security

68
00:02:14,720 --> 00:02:16,000
of dns queries

69
00:02:16,000 --> 00:02:17,920
for the clients it also received a lot

70
00:02:17,920 --> 00:02:20,000
of criticism about the small number of

71
00:02:20,000 --> 00:02:22,239
publicly available resolver services

72
00:02:22,239 --> 00:02:24,319
essentially centralizing the internet

73
00:02:24,319 --> 00:02:26,160
and giving these organizations a lot of

74
00:02:26,160 --> 00:02:27,360
control

75
00:02:27,360 --> 00:02:29,120
additionally these resolver operators

76
00:02:29,120 --> 00:02:31,040
can associate all the client queries

77
00:02:31,040 --> 00:02:33,040
with the client ip addresses and using

78
00:02:33,040 --> 00:02:36,560
the ip to geo locate their client

79
00:02:36,560 --> 00:02:38,480
to maintain privacy guarantees some

80
00:02:38,480 --> 00:02:40,480
operators like cloudflare actively purge

81
00:02:40,480 --> 00:02:42,319
data exceeding 24 hours

82
00:02:42,319 --> 00:02:43,760
and give their users privacy

83
00:02:43,760 --> 00:02:45,599
policy-based guarantees

84
00:02:45,599 --> 00:02:47,840
but bringing together organizations to

85
00:02:47,840 --> 00:02:49,680
agree on a common set of privacy

86
00:02:49,680 --> 00:02:50,560
practices

87
00:02:50,560 --> 00:02:52,480
to maintain user privacy requires

88
00:02:52,480 --> 00:02:54,879
explicit negotiation and effort

89
00:02:54,879 --> 00:02:57,360
mozilla for example actively defined the

90
00:02:57,360 --> 00:02:59,280
criteria around data retention and

91
00:02:59,280 --> 00:03:00,159
aggregation

92
00:03:00,159 --> 00:03:02,080
with frequent audits before a dose

93
00:03:02,080 --> 00:03:04,319
service can be configured as a preset

94
00:03:04,319 --> 00:03:05,120
default

95
00:03:05,120 --> 00:03:08,000
in the firefox browser but while some

96
00:03:08,000 --> 00:03:10,000
users might be comfortable with a policy

97
00:03:10,000 --> 00:03:10,959
driven approach

98
00:03:10,959 --> 00:03:12,480
these are difficult to enforce and are

99
00:03:12,480 --> 00:03:14,720
really time consuming making users want

100
00:03:14,720 --> 00:03:15,599
a system

101
00:03:15,599 --> 00:03:17,440
that can technologically guarantee their

102
00:03:17,440 --> 00:03:20,080
privacy in this talk i'll kind of focus

103
00:03:20,080 --> 00:03:22,000
on the privacy critiques and the ability

104
00:03:22,000 --> 00:03:24,080
of the resolvers to be able to create a

105
00:03:24,080 --> 00:03:27,040
profile of their clients

106
00:03:27,040 --> 00:03:29,360
this is exactly where oblivious dns over

107
00:03:29,360 --> 00:03:31,680
https or odo kicks in

108
00:03:31,680 --> 00:03:34,080
odo was originally proposed as a draft

109
00:03:34,080 --> 00:03:35,040
at the ietf

110
00:03:35,040 --> 00:03:38,319
to improve client ip privacy at a high

111
00:03:38,319 --> 00:03:40,000
level there are three main components in

112
00:03:40,000 --> 00:03:40,560
novel

113
00:03:40,560 --> 00:03:42,560
the first are the clients who prepare a

114
00:03:42,560 --> 00:03:43,840
query for which they would like a

115
00:03:43,840 --> 00:03:44,799
response

116
00:03:44,799 --> 00:03:46,959
the goal of the clients in odo is to be

117
00:03:46,959 --> 00:03:48,879
able to successfully send encrypted

118
00:03:48,879 --> 00:03:49,840
messages

119
00:03:49,840 --> 00:03:52,159
receive valid responses to decrypt and

120
00:03:52,159 --> 00:03:53,120
in the process

121
00:03:53,120 --> 00:03:54,799
be able to identify if there are

122
00:03:54,799 --> 00:03:56,799
malicious actors and take corrective

123
00:03:56,799 --> 00:03:58,400
action

124
00:03:58,400 --> 00:04:00,799
the second is a proxy instance whose

125
00:04:00,799 --> 00:04:01,599
main role

126
00:04:01,599 --> 00:04:04,080
is to relay the encrypted queries and

127
00:04:04,080 --> 00:04:04,959
the responses

128
00:04:04,959 --> 00:04:07,519
to and from the targets while removing

129
00:04:07,519 --> 00:04:10,239
the ip addresses of the clients

130
00:04:10,239 --> 00:04:12,560
the third is a target instance which

131
00:04:12,560 --> 00:04:14,159
receives the encrypted query from the

132
00:04:14,159 --> 00:04:14,799
client

133
00:04:14,799 --> 00:04:17,199
decrypts it and obtains a dns response

134
00:04:17,199 --> 00:04:18,320
for the query

135
00:04:18,320 --> 00:04:20,320
the target's role is to then prepare an

136
00:04:20,320 --> 00:04:21,600
encrypted response

137
00:04:21,600 --> 00:04:24,080
and send it back to the proxy with no

138
00:04:24,080 --> 00:04:26,240
ability to identify the client by their

139
00:04:26,240 --> 00:04:28,320
ip addresses

140
00:04:28,320 --> 00:04:30,000
let's dive into the design of the yoyo

141
00:04:30,000 --> 00:04:31,759
protocol at a high level

142
00:04:31,759 --> 00:04:33,919
the design of odo is similar to that of

143
00:04:33,919 --> 00:04:36,160
doh and it kind of builds on it

144
00:04:36,160 --> 00:04:38,880
in indo the the resolver can see the

145
00:04:38,880 --> 00:04:40,080
client ip addresses

146
00:04:40,080 --> 00:04:42,000
and the query while providing secure

147
00:04:42,000 --> 00:04:44,320
encrypted communication channels

148
00:04:44,320 --> 00:04:46,880
by injecting an intermediate proxy node

149
00:04:46,880 --> 00:04:48,720
which terminates the client query and

150
00:04:48,720 --> 00:04:50,160
performs the query on the client's

151
00:04:50,160 --> 00:04:51,040
behalf

152
00:04:51,040 --> 00:04:53,919
the resolver now no longer sees the ip

153
00:04:53,919 --> 00:04:54,960
address of the client

154
00:04:54,960 --> 00:04:56,960
but the intermediate proxy sees both the

155
00:04:56,960 --> 00:04:58,800
client ip and the client query

156
00:04:58,800 --> 00:04:59,759
information

157
00:04:59,759 --> 00:05:01,840
and the usage of go on both the client

158
00:05:01,840 --> 00:05:04,160
proxy and the proxy resolver segments

159
00:05:04,160 --> 00:05:05,840
of the connection prevent network

160
00:05:05,840 --> 00:05:08,000
adversaries from modifying or passively

161
00:05:08,000 --> 00:05:11,039
analyzing the information

162
00:05:11,039 --> 00:05:13,039
but building on the proxy door design we

163
00:05:13,039 --> 00:05:14,320
would like to ensure that the

164
00:05:14,320 --> 00:05:15,520
intermediate proxy

165
00:05:15,520 --> 00:05:17,440
not have query information and the

166
00:05:17,440 --> 00:05:19,039
result will not have the client id

167
00:05:19,039 --> 00:05:20,000
addresses

168
00:05:20,000 --> 00:05:22,240
with the main goal of odo to prevent

169
00:05:22,240 --> 00:05:24,000
recursive resolvers and isps

170
00:05:24,000 --> 00:05:25,759
running such resolvers from being able

171
00:05:25,759 --> 00:05:27,919
to link clients to their queries

172
00:05:27,919 --> 00:05:30,160
the security model here builds on the

173
00:05:30,160 --> 00:05:32,080
premise that the proxy and the targets

174
00:05:32,080 --> 00:05:33,360
do not follow

175
00:05:33,360 --> 00:05:35,440
that's a critical part of the design so

176
00:05:35,440 --> 00:05:37,360
clients need to choose proxies and

177
00:05:37,360 --> 00:05:39,280
targets such that they are not operated

178
00:05:39,280 --> 00:05:40,800
by the same entity

179
00:05:40,800 --> 00:05:43,919
or known to be colluding and finally we

180
00:05:43,919 --> 00:05:45,440
have the protocol where the client

181
00:05:45,440 --> 00:05:46,080
encrypts

182
00:05:46,080 --> 00:05:48,479
the dns query using a hybrid public key

183
00:05:48,479 --> 00:05:49,600
encryption scheme

184
00:05:49,600 --> 00:05:51,759
and using a valid public key of the

185
00:05:51,759 --> 00:05:52,960
target resolver

186
00:05:52,960 --> 00:05:56,000
and sends the query with an encapsulated

187
00:05:56,000 --> 00:05:57,919
symmetric key from an authenticated

188
00:05:57,919 --> 00:05:58,960
encryption scheme

189
00:05:58,960 --> 00:06:01,199
to the proxy instance there are various

190
00:06:01,199 --> 00:06:02,560
ways in which the clients can

191
00:06:02,560 --> 00:06:04,800
learn about the services and validate

192
00:06:04,800 --> 00:06:06,960
them to dns sec validation or look for

193
00:06:06,960 --> 00:06:09,199
conflicting keys for the same resolvers

194
00:06:09,199 --> 00:06:11,759
but in our design we assume extended

195
00:06:11,759 --> 00:06:13,120
olivia adversaries

196
00:06:13,120 --> 00:06:15,120
which have the ability to create drop

197
00:06:15,120 --> 00:06:17,039
and modify any messages

198
00:06:17,039 --> 00:06:18,639
and also give them the ability to

199
00:06:18,639 --> 00:06:21,039
compromise tls sessions in our analysis

200
00:06:21,039 --> 00:06:23,360
of the security of the protocol

201
00:06:23,360 --> 00:06:25,280
practically colluding adversaries on

202
00:06:25,280 --> 00:06:27,039
various network links who

203
00:06:27,039 --> 00:06:29,039
who can decrypt the connection to read

204
00:06:29,039 --> 00:06:30,720
the message contents can create

205
00:06:30,720 --> 00:06:32,000
associations

206
00:06:32,000 --> 00:06:33,840
between the encrypted query and the

207
00:06:33,840 --> 00:06:35,280
encrypted response

208
00:06:35,280 --> 00:06:37,919
and compromise the resolver's secret key

209
00:06:37,919 --> 00:06:39,600
and and the compromise uh

210
00:06:39,600 --> 00:06:41,280
of the secret key could actually help

211
00:06:41,280 --> 00:06:42,639
such attacks

212
00:06:42,639 --> 00:06:45,840
uh in in aldo the proxy instance can see

213
00:06:45,840 --> 00:06:47,840
the ip address of the client but not the

214
00:06:47,840 --> 00:06:49,440
contents of the dns query

215
00:06:49,440 --> 00:06:51,039
and forwards this message to the

216
00:06:51,039 --> 00:06:52,720
oblivious target which decrypts the

217
00:06:52,720 --> 00:06:54,960
query and decapsulates the symmetric key

218
00:06:54,960 --> 00:06:57,440
and obtains a response from the resolver

219
00:06:57,440 --> 00:06:58,560
the response is

220
00:06:58,560 --> 00:07:00,479
encrypted by the oblivious target using

221
00:07:00,479 --> 00:07:02,160
the symmetric key provided and it is

222
00:07:02,160 --> 00:07:04,160
sent back to the proxy who only sends

223
00:07:04,160 --> 00:07:05,599
the message to the client

224
00:07:05,599 --> 00:07:07,599
where it can be decrypted in this

225
00:07:07,599 --> 00:07:08,880
process the target

226
00:07:08,880 --> 00:07:11,199
only sees the dns contents and not the

227
00:07:11,199 --> 00:07:13,360
actual client's ip addresses

228
00:07:13,360 --> 00:07:14,960
and we often say that the target and

229
00:07:14,960 --> 00:07:17,199
resolver are independent entities but

230
00:07:17,199 --> 00:07:19,440
this need not really be the case

231
00:07:19,440 --> 00:07:21,199
ideally in practice for performance

232
00:07:21,199 --> 00:07:23,039
reasons the oblivious target and the

233
00:07:23,039 --> 00:07:25,199
recursive resolver could be co-located

234
00:07:25,199 --> 00:07:27,120
to avoid additional network messages

235
00:07:27,120 --> 00:07:28,560
between the oblivious target and the

236
00:07:28,560 --> 00:07:29,680
resolver

237
00:07:29,680 --> 00:07:31,440
but it is still possible to maintain

238
00:07:31,440 --> 00:07:33,199
these as individual services without

239
00:07:33,199 --> 00:07:34,160
co-location

240
00:07:34,160 --> 00:07:36,080
but that would incur some performance

241
00:07:36,080 --> 00:07:37,759
penalty due to additional network

242
00:07:37,759 --> 00:07:39,440
requests

243
00:07:39,440 --> 00:07:41,440
we formally analyze the protocol and

244
00:07:41,440 --> 00:07:42,639
prove dilemma that

245
00:07:42,639 --> 00:07:45,520
an adversary is unable to associate a

246
00:07:45,520 --> 00:07:47,199
connection between the client and the

247
00:07:47,199 --> 00:07:48,000
proxy

248
00:07:48,000 --> 00:07:50,639
with the corresponding query unless both

249
00:07:50,639 --> 00:07:51,360
the proxy

250
00:07:51,360 --> 00:07:53,759
and the targets are compromised this

251
00:07:53,759 --> 00:07:55,520
brought to light a replay attack in the

252
00:07:55,520 --> 00:07:56,800
original proposal

253
00:07:56,800 --> 00:07:58,720
which has been fixed as a part of this

254
00:07:58,720 --> 00:08:00,960
work

255
00:08:00,960 --> 00:08:02,479
now with the understanding of the

256
00:08:02,479 --> 00:08:04,720
protocol in place there were three main

257
00:08:04,720 --> 00:08:06,960
research questions that interested us

258
00:08:06,960 --> 00:08:09,280
what is the impact of odo on the dns

259
00:08:09,280 --> 00:08:10,479
response times

260
00:08:10,479 --> 00:08:12,800
how does odo compare itself to other

261
00:08:12,800 --> 00:08:14,800
privacy enhancing protocol variants that

262
00:08:14,800 --> 00:08:16,080
are out there today

263
00:08:16,080 --> 00:08:18,479
and how does using odo affect page load

264
00:08:18,479 --> 00:08:20,800
times and user experiences

265
00:08:20,800 --> 00:08:22,400
this helped us understand the cost of

266
00:08:22,400 --> 00:08:24,479
privacy for the user while maintaining

267
00:08:24,479 --> 00:08:26,000
the security guarantees that are

268
00:08:26,000 --> 00:08:29,360
provided by encrypted dns protocols

269
00:08:29,360 --> 00:08:31,680
for the measurements in this work we

270
00:08:31,680 --> 00:08:33,279
implemented and deployed the oblivious

271
00:08:33,279 --> 00:08:35,679
targets and proxies using google cloud

272
00:08:35,679 --> 00:08:37,039
and a serverless platform like

273
00:08:37,039 --> 00:08:38,799
cloudflare workers

274
00:08:38,799 --> 00:08:40,719
we physically separated the oblivious

275
00:08:40,719 --> 00:08:42,880
target instances from the resolvers and

276
00:08:42,880 --> 00:08:45,279
randomized the query from the target to

277
00:08:45,279 --> 00:08:47,360
three public resolvers cloudflare dns

278
00:08:47,360 --> 00:08:49,680
google dns and quad9

279
00:08:49,680 --> 00:08:52,240
which we use in our measurements we use

280
00:08:52,240 --> 00:08:54,240
nine google cloud data center locations

281
00:08:54,240 --> 00:08:56,399
seven across the united states one in

282
00:08:56,399 --> 00:08:57,519
montreal canada and

283
00:08:57,519 --> 00:08:59,760
one in sao paulo in brazil with 10

284
00:08:59,760 --> 00:09:01,279
client instances running at

285
00:09:01,279 --> 00:09:02,880
each one of these vantage points

286
00:09:02,880 --> 00:09:04,880
performing an experiment sending dns

287
00:09:04,880 --> 00:09:07,040
requests at a rate of 15 requests per

288
00:09:07,040 --> 00:09:07,519
minute

289
00:09:07,519 --> 00:09:09,360
which is the average number of dns

290
00:09:09,360 --> 00:09:11,279
requests sent by client devices with

291
00:09:11,279 --> 00:09:13,519
very high internet usage

292
00:09:13,519 --> 00:09:15,440
the average bandwidth of all the clients

293
00:09:15,440 --> 00:09:16,800
running on a single core

294
00:09:16,800 --> 00:09:19,760
intel xeon processor is roughly 480

295
00:09:19,760 --> 00:09:22,240
megabits per second

296
00:09:22,240 --> 00:09:24,320
the clients perform dns response time

297
00:09:24,320 --> 00:09:25,519
measurements by choosing

298
00:09:25,519 --> 00:09:28,160
pairs of available proxy and targets and

299
00:09:28,160 --> 00:09:30,240
this brings us to the first result

300
00:09:30,240 --> 00:09:32,640
by choosing a low latency proxy target

301
00:09:32,640 --> 00:09:33,760
pair for the measurements

302
00:09:33,760 --> 00:09:36,080
shown by the orange line we find that

303
00:09:36,080 --> 00:09:36,880
the average

304
00:09:36,880 --> 00:09:39,920
query response time improves by 22.8

305
00:09:39,920 --> 00:09:40,720
percent

306
00:09:40,720 --> 00:09:42,320
compared to only choosing the low

307
00:09:42,320 --> 00:09:44,160
latency proxy which is shown by the

308
00:09:44,160 --> 00:09:46,080
green line

309
00:09:46,080 --> 00:09:48,320
this this kind of hints towards the fact

310
00:09:48,320 --> 00:09:50,160
that having an intermediate proxy

311
00:09:50,160 --> 00:09:52,160
on the same network path to the target

312
00:09:52,160 --> 00:09:54,560
will improve response time performance

313
00:09:54,560 --> 00:09:56,560
and this path however can be quite

314
00:09:56,560 --> 00:09:58,560
different from the path that a udp-based

315
00:09:58,560 --> 00:10:02,160
dns packet might actually travel on

316
00:10:02,160 --> 00:10:04,480
this then brings the the connection the

317
00:10:04,480 --> 00:10:06,640
the question of connection reuse

318
00:10:06,640 --> 00:10:09,519
and connection reuse is an optimization

319
00:10:09,519 --> 00:10:11,680
that can enable clients to improve their

320
00:10:11,680 --> 00:10:13,839
performance by at least 48

321
00:10:13,839 --> 00:10:16,560
at the median avoiding unnecessary tcp

322
00:10:16,560 --> 00:10:19,519
and tls handshakes for every request

323
00:10:19,519 --> 00:10:21,760
but however the reuse of connections

324
00:10:21,760 --> 00:10:22,800
could leak some

325
00:10:22,800 --> 00:10:24,880
client identity information but it still

326
00:10:24,880 --> 00:10:26,720
does not leak any information about the

327
00:10:26,720 --> 00:10:27,440
query

328
00:10:27,440 --> 00:10:30,399
or their responses and in our

329
00:10:30,399 --> 00:10:31,680
experimental setup

330
00:10:31,680 --> 00:10:33,040
we evaluate for the worst case

331
00:10:33,040 --> 00:10:34,959
performance and we incur an additional

332
00:10:34,959 --> 00:10:36,000
network latency

333
00:10:36,000 --> 00:10:37,760
between the target instance and the

334
00:10:37,760 --> 00:10:40,000
resolver in the architecture that we saw

335
00:10:40,000 --> 00:10:41,120
before

336
00:10:41,120 --> 00:10:43,040
as we can see here the target instances

337
00:10:43,040 --> 00:10:44,959
which are located in google cloud

338
00:10:44,959 --> 00:10:47,120
and performing queries to three public

339
00:10:47,120 --> 00:10:49,760
open resolvers have a faster response

340
00:10:49,760 --> 00:10:51,279
time for google dns

341
00:10:51,279 --> 00:10:53,200
because of potential co-location within

342
00:10:53,200 --> 00:10:54,880
the same data center compared to the

343
00:10:54,880 --> 00:10:56,880
other services

344
00:10:56,880 --> 00:10:59,279
and integrating the oblivious target

345
00:10:59,279 --> 00:11:01,200
into the recursive resolver can reduce

346
00:11:01,200 --> 00:11:02,640
the network latency

347
00:11:02,640 --> 00:11:05,120
to that of a cache hit for that for the

348
00:11:05,120 --> 00:11:06,640
answer and a cache miss

349
00:11:06,640 --> 00:11:08,480
incurring the additional network cost to

350
00:11:08,480 --> 00:11:09,760
speak to the uh

351
00:11:09,760 --> 00:11:12,320
name servers we find that co-locating

352
00:11:12,320 --> 00:11:13,839
these services results in better

353
00:11:13,839 --> 00:11:15,519
performance and we've engineered that

354
00:11:15,519 --> 00:11:17,120
into the public resolver that is

355
00:11:17,120 --> 00:11:18,560
operated by cloudflare

356
00:11:18,560 --> 00:11:21,839
as a public service for everyone

357
00:11:21,839 --> 00:11:24,000
to understand the performance of odo we

358
00:11:24,000 --> 00:11:26,079
compare this to other protocols

359
00:11:26,079 --> 00:11:28,240
offering similar privacy and security

360
00:11:28,240 --> 00:11:29,120
guarantees

361
00:11:29,120 --> 00:11:31,440
and use dough as the baseline protocol

362
00:11:31,440 --> 00:11:33,360
which is shown here on the blue line on

363
00:11:33,360 --> 00:11:34,560
the left side

364
00:11:34,560 --> 00:11:36,880
and go over tor which is a variant of

365
00:11:36,880 --> 00:11:38,720
dough which provides both security and

366
00:11:38,720 --> 00:11:40,640
privacy guarantees in addition to some

367
00:11:40,640 --> 00:11:42,240
anonymity guarantees

368
00:11:42,240 --> 00:11:44,000
and this is the orange line to the right

369
00:11:44,000 --> 00:11:47,200
side of the figure that you see here

370
00:11:47,200 --> 00:11:50,079
when compared to odo in green we notice

371
00:11:50,079 --> 00:11:52,720
that odo with no service co-location

372
00:11:52,720 --> 00:11:54,320
achieves this interesting position

373
00:11:54,320 --> 00:11:57,120
roughly between do and do what are

374
00:11:57,120 --> 00:11:58,880
and the results get more interesting and

375
00:11:58,880 --> 00:12:00,720
better as we start to co-locate the

376
00:12:00,720 --> 00:12:01,440
target

377
00:12:01,440 --> 00:12:03,519
and the resolver together which is shown

378
00:12:03,519 --> 00:12:05,760
as the purple line on this figure

379
00:12:05,760 --> 00:12:07,519
and we notice that the response time for

380
00:12:07,519 --> 00:12:09,360
odor compared to that of do as the

381
00:12:09,360 --> 00:12:10,480
baseline

382
00:12:10,480 --> 00:12:12,880
increases at the median by 50 percent

383
00:12:12,880 --> 00:12:15,200
with the service collocation and 100

384
00:12:15,200 --> 00:12:16,880
when the target and the resolver are

385
00:12:16,880 --> 00:12:20,160
actually not co-located

386
00:12:20,240 --> 00:12:22,240
dns protocols with message encryption

387
00:12:22,240 --> 00:12:23,440
like dns script

388
00:12:23,440 --> 00:12:25,200
tend to have much larger compute

389
00:12:25,200 --> 00:12:26,480
overheads and use

390
00:12:26,480 --> 00:12:29,200
non-encrypted channels these protocols

391
00:12:29,200 --> 00:12:29,920
have

392
00:12:29,920 --> 00:12:32,720
higher response time and lie between the

393
00:12:32,720 --> 00:12:33,920
doe and odo

394
00:12:33,920 --> 00:12:38,480
and over tor as shown by this dotted

395
00:12:38,480 --> 00:12:41,440
arrow in this figure and the performance

396
00:12:41,440 --> 00:12:41,760
uh

397
00:12:41,760 --> 00:12:43,760
in response times is is a middle ground

398
00:12:43,760 --> 00:12:45,040
between baseline doe

399
00:12:45,040 --> 00:12:46,959
and privacy enhancing variants such as

400
00:12:46,959 --> 00:12:48,480
do over tor or on an

401
00:12:48,480 --> 00:12:50,880
or anonymous dns script all while

402
00:12:50,880 --> 00:12:54,639
achieving similar privacy guarantees

403
00:12:54,639 --> 00:12:56,399
i'll keep it short for this talk but

404
00:12:56,399 --> 00:12:58,000
here's a slide for reference which you

405
00:12:58,000 --> 00:12:59,360
could revisit for

406
00:12:59,360 --> 00:13:01,040
seeing the comparisons of various

407
00:13:01,040 --> 00:13:02,880
network architectural variants

408
00:13:02,880 --> 00:13:04,800
and where odo fits in along with the

409
00:13:04,800 --> 00:13:06,480
protocol security and the privacy

410
00:13:06,480 --> 00:13:08,560
guarantees that is offered

411
00:13:08,560 --> 00:13:10,240
there's also a link to the production

412
00:13:10,240 --> 00:13:12,160
service which is the case of co-located

413
00:13:12,160 --> 00:13:15,839
odo that cloudflare operates today

414
00:13:15,839 --> 00:13:17,839
this brings us to a crucial measurement

415
00:13:17,839 --> 00:13:19,600
that we're really interested in

416
00:13:19,600 --> 00:13:22,560
the page load time impact to do this we

417
00:13:22,560 --> 00:13:24,320
establish a measurement node in a lab

418
00:13:24,320 --> 00:13:24,800
network

419
00:13:24,800 --> 00:13:27,600
connected to a commercial isp the node

420
00:13:27,600 --> 00:13:29,600
runs a local stub resolver which is

421
00:13:29,600 --> 00:13:30,480
configured to use

422
00:13:30,480 --> 00:13:34,160
do or odo for various runs in each run

423
00:13:34,160 --> 00:13:36,800
the web browser browses to the same set

424
00:13:36,800 --> 00:13:37,519
of pages

425
00:13:37,519 --> 00:13:39,440
after purging any local cache entries

426
00:13:39,440 --> 00:13:40,880
and performs the page load time

427
00:13:40,880 --> 00:13:41,760
measurements

428
00:13:41,760 --> 00:13:44,800
and we retrieve the hard files

429
00:13:44,800 --> 00:13:47,920
and identify the various page events the

430
00:13:47,920 --> 00:13:49,519
measurements presented

431
00:13:49,519 --> 00:13:51,839
here use the public order services

432
00:13:51,839 --> 00:13:53,199
operated by cloudflare

433
00:13:53,199 --> 00:13:55,120
and considers the complete page load

434
00:13:55,120 --> 00:13:58,079
event and dns response times

435
00:13:58,079 --> 00:14:00,000
we find that the median page load time

436
00:14:00,000 --> 00:14:02,880
increases by 6.7 percent when using

437
00:14:02,880 --> 00:14:03,360
dough

438
00:14:03,360 --> 00:14:07,120
compared to do 53 and 9.8

439
00:14:07,120 --> 00:14:11,360
when using co-located odo services

440
00:14:11,519 --> 00:14:14,480
in summary odo is a practical privacy

441
00:14:14,480 --> 00:14:15,600
enhancing protocol

442
00:14:15,600 --> 00:14:18,000
for dns with minimal total page load

443
00:14:18,000 --> 00:14:19,120
time impacts

444
00:14:19,120 --> 00:14:20,399
and the performance impacts of the

445
00:14:20,399 --> 00:14:22,560
protocol are purely network topology

446
00:14:22,560 --> 00:14:23,680
effects

447
00:14:23,680 --> 00:14:26,160
for better usage in production systems

448
00:14:26,160 --> 00:14:28,880
having an ecosystem of on-path proxies

449
00:14:28,880 --> 00:14:31,360
service co-location and connection reuse

450
00:14:31,360 --> 00:14:33,040
along with the support for the protocol

451
00:14:33,040 --> 00:14:35,120
by clients could be valuable for dns

452
00:14:35,120 --> 00:14:37,279
privacy

453
00:14:37,279 --> 00:14:39,839
our code libraries and implementations

454
00:14:39,839 --> 00:14:40,959
are open source

455
00:14:40,959 --> 00:14:42,639
and are made available along with

456
00:14:42,639 --> 00:14:45,680
operational production services

457
00:14:45,680 --> 00:14:53,439
thank you so much

