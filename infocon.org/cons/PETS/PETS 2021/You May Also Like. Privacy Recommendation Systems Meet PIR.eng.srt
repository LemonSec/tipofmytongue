1
00:00:02,320 --> 00:00:04,400
hi my name is aditya vadapalli and in

2
00:00:04,400 --> 00:00:06,000
this talk i'm going to talk about our

3
00:00:06,000 --> 00:00:07,919
paper you may also like privacy

4
00:00:07,919 --> 00:00:09,679
which is a private recommendation system

5
00:00:09,679 --> 00:00:11,360
and this is joint work with fatini and

6
00:00:11,360 --> 00:00:13,519
my phd advisor ryan henry

7
00:00:13,519 --> 00:00:15,920
um so yeah let's begin we'll begin with

8
00:00:15,920 --> 00:00:18,000
the usual netflix example and here

9
00:00:18,000 --> 00:00:21,279
we have our friend bob

10
00:00:21,279 --> 00:00:22,960
who logs into netflix and watches the

11
00:00:22,960 --> 00:00:24,800
movie invictus

12
00:00:24,800 --> 00:00:26,240
the next day he watches the movie

13
00:00:26,240 --> 00:00:27,920
shawshank redemption

14
00:00:27,920 --> 00:00:29,840
and by this time netflix has learned a

15
00:00:29,840 --> 00:00:31,279
few things about bob

16
00:00:31,279 --> 00:00:33,120
uh and recommend some the movie bucket

17
00:00:33,120 --> 00:00:35,200
list to him hoping that he would enjoy

18
00:00:35,200 --> 00:00:37,520
movies that feature morgan freeman

19
00:00:37,520 --> 00:00:39,760
uh indeed probably bob enjoys this as

20
00:00:39,760 --> 00:00:41,600
well uh and now

21
00:00:41,600 --> 00:00:43,760
when the net now the netflix algorithm

22
00:00:43,760 --> 00:00:45,920
has learned a few more things about bob

23
00:00:45,920 --> 00:00:48,160
and now recommends the movie to an angry

24
00:00:48,160 --> 00:00:50,320
man now hoping that he likes movies in

25
00:00:50,320 --> 00:00:50,879
the

26
00:00:50,879 --> 00:00:52,879
drama genre and once again netflix is

27
00:00:52,879 --> 00:00:55,120
correct and in this process

28
00:00:55,120 --> 00:00:57,680
bob really gets to watch a lot of movies

29
00:00:57,680 --> 00:00:58,640
of his choice

30
00:00:58,640 --> 00:01:01,280
without him having to search through the

31
00:01:01,280 --> 00:01:02,640
various netflix

32
00:01:02,640 --> 00:01:04,799
uh movies and this whole process of data

33
00:01:04,799 --> 00:01:06,560
collection and thus getting personalized

34
00:01:06,560 --> 00:01:08,320
recommendations for him works very well

35
00:01:08,320 --> 00:01:09,520
for him

36
00:01:09,520 --> 00:01:13,040
uh however things are not all honky dory

37
00:01:13,040 --> 00:01:14,960
and this entire process of data

38
00:01:14,960 --> 00:01:16,720
collection uh has

39
00:01:16,720 --> 00:01:19,040
had a lot of negative effects as it has

40
00:01:19,040 --> 00:01:20,960
been well studied for instance that it

41
00:01:20,960 --> 00:01:22,159
leads to algorithmic

42
00:01:22,159 --> 00:01:25,520
discrimination uh erosion of democracy

43
00:01:25,520 --> 00:01:26,159
identity

44
00:01:26,159 --> 00:01:28,640
theft and what not so in many ways this

45
00:01:28,640 --> 00:01:29,680
entire thing is a

46
00:01:29,680 --> 00:01:31,680
bit of a double-edged word uh for

47
00:01:31,680 --> 00:01:33,040
instance uh while

48
00:01:33,040 --> 00:01:35,439
uh it gives us personalization with data

49
00:01:35,439 --> 00:01:37,680
driven creation useful recommendations

50
00:01:37,680 --> 00:01:40,400
and also other advantages like fraud

51
00:01:40,400 --> 00:01:41,200
detection

52
00:01:41,200 --> 00:01:43,119
it comes with these negative effects of

53
00:01:43,119 --> 00:01:45,119
chilling if things like chilling effects

54
00:01:45,119 --> 00:01:47,280
algorithmic discrimination and identity

55
00:01:47,280 --> 00:01:48,399
theft

56
00:01:48,399 --> 00:01:50,079
so the question that we ask in this

57
00:01:50,079 --> 00:01:52,159
paper is is it possible to

58
00:01:52,159 --> 00:01:54,799
build a media delivery system that gives

59
00:01:54,799 --> 00:01:56,560
personalized recommendations

60
00:01:56,560 --> 00:01:59,119
while hiding the consumption history at

61
00:01:59,119 --> 00:02:00,560
the outset this seems

62
00:02:00,560 --> 00:02:02,960
like a rather unlikely thing to happen

63
00:02:02,960 --> 00:02:04,399
however let's have a look at this more

64
00:02:04,399 --> 00:02:05,200
carefully

65
00:02:05,200 --> 00:02:06,799
and first let's answer the question

66
00:02:06,799 --> 00:02:09,360
about hiding the consumption history

67
00:02:09,360 --> 00:02:11,120
the simplest way to hide consumption

68
00:02:11,120 --> 00:02:13,440
history is as follows

69
00:02:13,440 --> 00:02:16,239
is basically to ask the database for

70
00:02:16,239 --> 00:02:17,280
certain record

71
00:02:17,280 --> 00:02:19,280
and then and then download the entire

72
00:02:19,280 --> 00:02:20,959
database and then look at the record of

73
00:02:20,959 --> 00:02:22,080
your choice

74
00:02:22,080 --> 00:02:23,440
while this works it's completely

75
00:02:23,440 --> 00:02:25,440
impractical because for instance if

76
00:02:25,440 --> 00:02:27,520
one wants to watch uh one particular

77
00:02:27,520 --> 00:02:30,080
movie in netflix it would be completely

78
00:02:30,080 --> 00:02:31,680
infeasible to download the entire

79
00:02:31,680 --> 00:02:34,640
catalog to watch one movie

80
00:02:34,640 --> 00:02:36,560
uh private information retrieval has

81
00:02:36,560 --> 00:02:38,080
been well studied in the literature and

82
00:02:38,080 --> 00:02:38,959
has been used

83
00:02:38,959 --> 00:02:40,879
for hiding consumption history and a

84
00:02:40,879 --> 00:02:43,120
very informal definition of pir

85
00:02:43,120 --> 00:02:45,040
is that the users want to download

86
00:02:45,040 --> 00:02:46,480
something from the database without the

87
00:02:46,480 --> 00:02:49,360
servers knowing what they downloaded

88
00:02:49,360 --> 00:02:50,400
first let's have a look at the

89
00:02:50,400 --> 00:02:52,560
non-private information retrieval method

90
00:02:52,560 --> 00:02:55,040
in the slightly odd manner uh where

91
00:02:55,040 --> 00:02:56,160
there's a database d

92
00:02:56,160 --> 00:02:58,239
and the user user would like to download

93
00:02:58,239 --> 00:03:00,080
the lf record of the database

94
00:03:00,080 --> 00:03:01,519
and what they do is that they send the

95
00:03:01,519 --> 00:03:03,360
standard basis vector at l that is a

96
00:03:03,360 --> 00:03:05,040
vector which is zero everywhere except

97
00:03:05,040 --> 00:03:06,959
there at location where it is one

98
00:03:06,959 --> 00:03:09,360
and the servers return back the dot

99
00:03:09,360 --> 00:03:10,560
product or the standard

100
00:03:10,560 --> 00:03:13,120
of the standard basis vector at l with

101
00:03:13,120 --> 00:03:14,080
the database

102
00:03:14,080 --> 00:03:16,879
and indeed the user gets the let record

103
00:03:16,879 --> 00:03:18,080
of the database however

104
00:03:18,080 --> 00:03:19,840
this is not private because it leaks the

105
00:03:19,840 --> 00:03:21,599
index l so

106
00:03:21,599 --> 00:03:23,200
uh one of the many ways to make it

107
00:03:23,200 --> 00:03:25,200
private is to have uh

108
00:03:25,200 --> 00:03:28,720
n replicas of d h for both n servers

109
00:03:28,720 --> 00:03:31,120
and the servers and the user rather than

110
00:03:31,120 --> 00:03:33,360
sending one standard basis vector

111
00:03:33,360 --> 00:03:35,360
sends the secret shares to the standard

112
00:03:35,360 --> 00:03:37,360
basis vector to these n servers

113
00:03:37,360 --> 00:03:40,720
uh and the servers return back the dot

114
00:03:40,720 --> 00:03:43,120
product of the secret shares with the

115
00:03:43,120 --> 00:03:44,319
database

116
00:03:44,319 --> 00:03:46,959
and the user can reconstruct uh these

117
00:03:46,959 --> 00:03:47,920
dot products

118
00:03:47,920 --> 00:03:50,720
to get the leth record of the database

119
00:03:50,720 --> 00:03:52,159
uh while this works

120
00:03:52,159 --> 00:03:54,319
properly uh while this is correct and it

121
00:03:54,319 --> 00:03:55,920
is private unless all the

122
00:03:55,920 --> 00:03:58,239
uh n servers collude the problem of

123
00:03:58,239 --> 00:04:00,239
course is that these vectors are really

124
00:04:00,239 --> 00:04:01,760
large and they can be and they are as

125
00:04:01,760 --> 00:04:04,480
large as the size of the database

126
00:04:04,480 --> 00:04:07,840
that's the height of the database um so

127
00:04:07,840 --> 00:04:10,000
one way so this is where distributed

128
00:04:10,000 --> 00:04:11,840
point functions come into picture

129
00:04:11,840 --> 00:04:13,920
uh these were introduced by gilbert and

130
00:04:13,920 --> 00:04:15,439
dishai in 2014

131
00:04:15,439 --> 00:04:17,759
improved upon by boyle gilboa and

132
00:04:17,759 --> 00:04:19,519
shain15 and 16.

133
00:04:19,519 --> 00:04:21,680
uh and uh yeah so first let's look at

134
00:04:21,680 --> 00:04:23,840
the definition of point functions

135
00:04:23,840 --> 00:04:25,360
so point functions are the special

136
00:04:25,360 --> 00:04:27,919
functions over a certain domain

137
00:04:27,919 --> 00:04:30,160
which evaluate to zero at every point in

138
00:04:30,160 --> 00:04:31,199
the domain

139
00:04:31,199 --> 00:04:34,400
except at one special location which we

140
00:04:34,400 --> 00:04:36,080
call as a target location

141
00:04:36,080 --> 00:04:37,840
where they evaluate to a special value

142
00:04:37,840 --> 00:04:39,759
which we call the target value

143
00:04:39,759 --> 00:04:41,759
and dpfs are a succinct way to share

144
00:04:41,759 --> 00:04:44,320
these point functions

145
00:04:44,320 --> 00:04:46,240
the tuple l y describes the point

146
00:04:46,240 --> 00:04:47,840
function where l again

147
00:04:47,840 --> 00:04:50,400
is the special point and y is that

148
00:04:50,400 --> 00:04:53,120
special value

149
00:04:53,199 --> 00:04:56,560
now uh let's uh

150
00:04:56,560 --> 00:04:59,840
let's talk about dpfs uh and there are

151
00:04:59,840 --> 00:05:02,320
two main algorithms associated with dpfs

152
00:05:02,320 --> 00:05:03,759
and bear in mind that

153
00:05:03,759 --> 00:05:05,759
here we talk we are talking exclusively

154
00:05:05,759 --> 00:05:07,280
about two two dpfs

155
00:05:07,280 --> 00:05:09,600
that is uh that is where we are

156
00:05:09,600 --> 00:05:11,280
interested in sharing the point function

157
00:05:11,280 --> 00:05:13,039
among two servers

158
00:05:13,039 --> 00:05:15,120
the first algorithm associated with gps

159
00:05:15,120 --> 00:05:16,479
is a generator algorithm which the

160
00:05:16,479 --> 00:05:18,240
client runs and the generator takes in

161
00:05:18,240 --> 00:05:19,280
as parameter

162
00:05:19,280 --> 00:05:21,039
a security parameter lambda and the

163
00:05:21,039 --> 00:05:22,800
description of the point function

164
00:05:22,800 --> 00:05:26,080
l and y and it returns back two dpf keys

165
00:05:26,080 --> 00:05:28,320
the client sends these dpf keys to p0

166
00:05:28,320 --> 00:05:29,520
and p1

167
00:05:29,520 --> 00:05:31,440
who run the second algorithm associated

168
00:05:31,440 --> 00:05:32,960
with dpf known as the evaluation

169
00:05:32,960 --> 00:05:33,919
algorithm

170
00:05:33,919 --> 00:05:35,520
the evaluation algorithm takes in as

171
00:05:35,520 --> 00:05:37,840
input the dpf key and some index from

172
00:05:37,840 --> 00:05:40,000
the domain of the point function

173
00:05:40,000 --> 00:05:42,080
uh these outputs of the eval function

174
00:05:42,080 --> 00:05:44,560
look completely random to p0 and p1

175
00:05:44,560 --> 00:05:46,880
but have a but they have some special

176
00:05:46,880 --> 00:05:48,560
properties

177
00:05:48,560 --> 00:05:51,520
these outputs xor to zero at every

178
00:05:51,520 --> 00:05:53,280
location

179
00:05:53,280 --> 00:05:55,199
in the domain except at that target

180
00:05:55,199 --> 00:05:57,000
location where they

181
00:05:57,000 --> 00:06:00,960
evaluate the target value y

182
00:06:02,560 --> 00:06:04,240
there's also a function called eval full

183
00:06:04,240 --> 00:06:05,600
associated with dpfs

184
00:06:05,600 --> 00:06:07,360
which which essentially evaluates the

185
00:06:07,360 --> 00:06:10,720
dpf over the entire domain

186
00:06:10,720 --> 00:06:13,600
so essentially eval full of dpf is a

187
00:06:13,600 --> 00:06:15,840
vector comprising of the evals of

188
00:06:15,840 --> 00:06:18,400
dpf over the entire domain of the point

189
00:06:18,400 --> 00:06:19,199
function

190
00:06:19,199 --> 00:06:21,520
naturally eval full of dpf 0 and eval

191
00:06:21,520 --> 00:06:22,720
full of dpf1

192
00:06:22,720 --> 00:06:25,120
are the secret shares of the standards

193
00:06:25,120 --> 00:06:27,120
of the standard basis vector at l scaled

194
00:06:27,120 --> 00:06:28,319
by y

195
00:06:28,319 --> 00:06:29,919
now let's talk about the construction of

196
00:06:29,919 --> 00:06:31,600
dpf's and this construction is due to

197
00:06:31,600 --> 00:06:33,840
boyle gilboa and dishai from their 2016

198
00:06:33,840 --> 00:06:35,280
ccs paper

199
00:06:35,280 --> 00:06:39,120
the two main ingredients uh that are

200
00:06:39,120 --> 00:06:41,039
there for the construction of dpfs one

201
00:06:41,039 --> 00:06:43,039
is the len doubling prg

202
00:06:43,039 --> 00:06:44,880
which is used to construct these binary

203
00:06:44,880 --> 00:06:47,360
trees like this so p0 and p1 get some

204
00:06:47,360 --> 00:06:48,880
random seeds and they use a lymph

205
00:06:48,880 --> 00:06:50,080
doubling prg

206
00:06:50,080 --> 00:06:52,000
to construct a binary tree such that the

207
00:06:52,000 --> 00:06:54,000
number of leaves

208
00:06:54,000 --> 00:06:56,160
is equal to the size of the domain their

209
00:06:56,160 --> 00:06:58,000
goal eventually is to have

210
00:06:58,000 --> 00:07:00,479
the the leaves of the binary tree

211
00:07:00,479 --> 00:07:02,080
correspond to the outputs of the eval

212
00:07:02,080 --> 00:07:02,800
function

213
00:07:02,800 --> 00:07:05,039
for instance if the if they want to find

214
00:07:05,039 --> 00:07:06,960
if they found if they want to evaluate

215
00:07:06,960 --> 00:07:10,000
uh at index say five the fifth

216
00:07:10,000 --> 00:07:12,880
uh the fifth leaf uh should essentially

217
00:07:12,880 --> 00:07:13,680
give the

218
00:07:13,680 --> 00:07:16,400
output of the eval function at the index

219
00:07:16,400 --> 00:07:17,680
five

220
00:07:17,680 --> 00:07:19,840
now naturally what they would want is

221
00:07:19,840 --> 00:07:20,960
that

222
00:07:20,960 --> 00:07:23,280
the the leaves of the two trees should

223
00:07:23,280 --> 00:07:24,319
be identical

224
00:07:24,319 --> 00:07:26,479
at every location except at the target

225
00:07:26,479 --> 00:07:27,440
location

226
00:07:27,440 --> 00:07:30,000
where uh and at the target location the

227
00:07:30,000 --> 00:07:32,160
leaves should exhort to the target value

228
00:07:32,160 --> 00:07:34,080
of course just using this lint doubling

229
00:07:34,080 --> 00:07:35,520
prg would lead to

230
00:07:35,520 --> 00:07:37,120
completely random trees and not what

231
00:07:37,120 --> 00:07:38,960
we're looking for therefore there's a

232
00:07:38,960 --> 00:07:40,960
second ingredient associated that is the

233
00:07:40,960 --> 00:07:42,080
correction words

234
00:07:42,080 --> 00:07:45,199
which turn these random uh which which

235
00:07:45,199 --> 00:07:47,280
turn these random values into equal

236
00:07:47,280 --> 00:07:48,080
values

237
00:07:48,080 --> 00:07:50,960
uh and what essentially happens is that

238
00:07:50,960 --> 00:07:52,000
all the leaves

239
00:07:52,000 --> 00:07:55,199
except the target leaf are made equal to

240
00:07:55,199 --> 00:07:56,720
each other for both the trees

241
00:07:56,720 --> 00:07:59,680
and the target leaves remain random this

242
00:07:59,680 --> 00:08:00,879
is almost

243
00:08:00,879 --> 00:08:02,879
complete except the fact that what we

244
00:08:02,879 --> 00:08:04,560
wanted the target location

245
00:08:04,560 --> 00:08:07,120
is the target value not some random

246
00:08:07,120 --> 00:08:07,840
value

247
00:08:07,840 --> 00:08:09,440
and even that can be corrected pretty

248
00:08:09,440 --> 00:08:11,280
easily just by having another correction

249
00:08:11,280 --> 00:08:13,520
word known as the final correction word

250
00:08:13,520 --> 00:08:16,000
which basically turns this random value

251
00:08:16,000 --> 00:08:19,680
into the into the correct target value

252
00:08:19,680 --> 00:08:22,800
now uh with the help of dpfs one can

253
00:08:22,800 --> 00:08:24,879
construct various pir protocols

254
00:08:24,879 --> 00:08:27,039
and one such pir protocol is the happy's

255
00:08:27,039 --> 00:08:29,199
henry pir protocol that appeared in pets

256
00:08:29,199 --> 00:08:30,639
2019.

257
00:08:30,639 --> 00:08:32,880
this pi protocol is extremely fast and

258
00:08:32,880 --> 00:08:35,360
it can enable private streaming videos

259
00:08:35,360 --> 00:08:38,799
um now it's now with this uh we saw the

260
00:08:38,799 --> 00:08:41,120
first part of our problem that is hiding

261
00:08:41,120 --> 00:08:42,559
the consumption history

262
00:08:42,559 --> 00:08:44,560
but the second part still remains that

263
00:08:44,560 --> 00:08:45,920
is to provide personalized

264
00:08:45,920 --> 00:08:47,519
recommendations

265
00:08:47,519 --> 00:08:49,839
the way we do that is by doing secure

266
00:08:49,839 --> 00:08:51,680
multi-party computation over

267
00:08:51,680 --> 00:08:54,640
these dpf-based pir queries the system

268
00:08:54,640 --> 00:08:56,240
we built is called persona

269
00:08:56,240 --> 00:08:58,000
persona because it is built on top of

270
00:08:58,000 --> 00:08:59,680
pir and

271
00:08:59,680 --> 00:09:01,839
and it has the following key features

272
00:09:01,839 --> 00:09:04,080
suppose a user i has queried for an item

273
00:09:04,080 --> 00:09:04,480
j

274
00:09:04,480 --> 00:09:06,480
persona would be completely oblivious to

275
00:09:06,480 --> 00:09:08,720
j however pizzola would know i

276
00:09:08,720 --> 00:09:10,880
i the user who's authenticated that is

277
00:09:10,880 --> 00:09:12,720
we essentially hide what the user query

278
00:09:12,720 --> 00:09:16,240
for but not the user themselves

279
00:09:16,480 --> 00:09:18,240
now next talk about the collaborative

280
00:09:18,240 --> 00:09:19,680
filtering algorithm the underlying

281
00:09:19,680 --> 00:09:21,040
algorithm that is used to provide

282
00:09:21,040 --> 00:09:23,519
recommendations

283
00:09:23,519 --> 00:09:25,680
uh it is a it is based on gradient

284
00:09:25,680 --> 00:09:27,120
descent and there are

285
00:09:27,120 --> 00:09:30,080
two matrices the use known as unv called

286
00:09:30,080 --> 00:09:32,160
the user and item profiles

287
00:09:32,160 --> 00:09:34,640
at each iteration the user and item

288
00:09:34,640 --> 00:09:36,160
profiles are updated in the following

289
00:09:36,160 --> 00:09:37,600
manner if a user i

290
00:09:37,600 --> 00:09:40,320
has queried for item j one takes the dot

291
00:09:40,320 --> 00:09:42,160
product of the ith user profile with the

292
00:09:42,160 --> 00:09:43,519
jth item profile

293
00:09:43,519 --> 00:09:45,120
and multiplies with the corresponding

294
00:09:45,120 --> 00:09:47,200
user item profile and adds them to the

295
00:09:47,200 --> 00:09:49,760
user or writing profiles uh once this is

296
00:09:49,760 --> 00:09:50,399
done

297
00:09:50,399 --> 00:09:52,800
uh the the user item profiles have to be

298
00:09:52,800 --> 00:09:54,720
normalized

299
00:09:54,720 --> 00:09:57,040
so let's look at the setting uh persona

300
00:09:57,040 --> 00:09:58,000
is uh

301
00:09:58,000 --> 00:10:00,399
the prisoner system requires at least

302
00:10:00,399 --> 00:10:02,640
four servers for multi-party computation

303
00:10:02,640 --> 00:10:04,160
and more than four servers would make

304
00:10:04,160 --> 00:10:05,680
the pir efficient

305
00:10:05,680 --> 00:10:09,760
uh now uh these servers hold the share

306
00:10:09,760 --> 00:10:12,720
so the user at item profile here v0 and

307
00:10:12,720 --> 00:10:15,040
vb1 are the shares of the item profiles

308
00:10:15,040 --> 00:10:17,120
and u0 and u1 are the shares of the user

309
00:10:17,120 --> 00:10:18,240
profiles

310
00:10:18,240 --> 00:10:22,079
the user sends these happy spir queries

311
00:10:22,079 --> 00:10:23,839
reconstructs the responses to get the

312
00:10:23,839 --> 00:10:25,440
movie of their choice

313
00:10:25,440 --> 00:10:27,680
once that is done the persona servers

314
00:10:27,680 --> 00:10:29,600
engage themselves in an mpc protocol to

315
00:10:29,600 --> 00:10:31,600
provide the recommendations

316
00:10:31,600 --> 00:10:33,040
now let's look at each of the steps of

317
00:10:33,040 --> 00:10:34,800
the collaborative filtering algorithm

318
00:10:34,800 --> 00:10:36,560
the first step is to update the user

319
00:10:36,560 --> 00:10:38,320
profiles and now

320
00:10:38,320 --> 00:10:41,519
uh it is done by this following equation

321
00:10:41,519 --> 00:10:44,959
uh now let's have a look at ui

322
00:10:44,959 --> 00:10:47,839
ui is easy to compute because i is known

323
00:10:47,839 --> 00:10:50,560
uh because persona doesn't hide the user

324
00:10:50,560 --> 00:10:52,880
now computing vj is not that trivial

325
00:10:52,880 --> 00:10:54,560
because

326
00:10:54,560 --> 00:10:57,440
p0 and p1 have the shares of the item

327
00:10:57,440 --> 00:10:59,360
profile matrix and they need to

328
00:10:59,360 --> 00:11:01,839
compute the shares of the jth item

329
00:11:01,839 --> 00:11:03,360
profile

330
00:11:03,360 --> 00:11:05,120
so this is the problem essentially that

331
00:11:05,120 --> 00:11:06,640
they would like to compute the shares of

332
00:11:06,640 --> 00:11:08,480
vj

333
00:11:08,480 --> 00:11:10,399
for this purpose we built an mpc gadget

334
00:11:10,399 --> 00:11:11,519
called

335
00:11:11,519 --> 00:11:13,519
dpf based multiplexer the details of

336
00:11:13,519 --> 00:11:16,079
which are there in the paper

337
00:11:16,079 --> 00:11:18,800
so the dpf pace multiplexer gives us the

338
00:11:18,800 --> 00:11:19,519
shares of

339
00:11:19,519 --> 00:11:22,079
vj now once we have the shares of vj the

340
00:11:22,079 --> 00:11:23,519
jth item profile

341
00:11:23,519 --> 00:11:25,519
we already have the shares of the ith

342
00:11:25,519 --> 00:11:26,880
user profile

343
00:11:26,880 --> 00:11:28,800
one can compute the dot product using

344
00:11:28,800 --> 00:11:30,959
standard npc protocols like the duotile

345
00:11:30,959 --> 00:11:32,240
protocol which is a variant of the

346
00:11:32,240 --> 00:11:34,320
beaver triple multiplication

347
00:11:34,320 --> 00:11:36,160
and once that is complete multiplication

348
00:11:36,160 --> 00:11:38,399
with vj is again using standard mpc and

349
00:11:38,399 --> 00:11:40,800
the user profiles can be updated

350
00:11:40,800 --> 00:11:42,399
the next step is to update the item

351
00:11:42,399 --> 00:11:43,839
profiles which is more

352
00:11:43,839 --> 00:11:45,519
uh which is more complicated than

353
00:11:45,519 --> 00:11:46,959
updating the item pro are you

354
00:11:46,959 --> 00:11:49,519
updating the user profiles uh once again

355
00:11:49,519 --> 00:11:51,120
computing this particular

356
00:11:51,120 --> 00:11:53,519
value that is vj plus ui multiplied by

357
00:11:53,519 --> 00:11:55,040
this entire dot product is not very

358
00:11:55,040 --> 00:11:56,079
difficult

359
00:11:56,079 --> 00:11:58,399
and that requires just the standard mpc

360
00:11:58,399 --> 00:11:59,519
protocols

361
00:11:59,519 --> 00:12:02,320
uh and now suppose that p0 and p1 hold

362
00:12:02,320 --> 00:12:04,160
shares of z which is essentially this

363
00:12:04,160 --> 00:12:05,680
particular whole value

364
00:12:05,680 --> 00:12:08,480
uh they want to add z to the jth item

365
00:12:08,480 --> 00:12:09,440
profile

366
00:12:09,440 --> 00:12:11,680
now this seems almost like pir right

367
00:12:11,680 --> 00:12:13,839
except that there is a key difference

368
00:12:13,839 --> 00:12:16,160
unlike in pii right the user cannot

369
00:12:16,160 --> 00:12:17,279
create dpfs

370
00:12:17,279 --> 00:12:19,440
whose target value is z because z is

371
00:12:19,440 --> 00:12:22,000
computed

372
00:12:22,560 --> 00:12:24,480
is computed while the collaborative

373
00:12:24,480 --> 00:12:26,320
filtering algorithm is taking place

374
00:12:26,320 --> 00:12:29,600
in other words the uh the the the the

375
00:12:29,600 --> 00:12:31,519
gadget that we call to do my

376
00:12:31,519 --> 00:12:34,240
the the the gadget that we use to do the

377
00:12:34,240 --> 00:12:35,680
item profile updation

378
00:12:35,680 --> 00:12:38,079
is called dmax and the demux and the and

379
00:12:38,079 --> 00:12:40,240
the dpf based demux and pir right the

380
00:12:40,240 --> 00:12:40,639
key

381
00:12:40,639 --> 00:12:42,160
the key difference is that the input

382
00:12:42,160 --> 00:12:45,200
wire is not fixed

383
00:12:45,200 --> 00:12:47,440
so the way we solve this problem is as

384
00:12:47,440 --> 00:12:48,320
follows

385
00:12:48,320 --> 00:12:50,160
uh now recall them what was the main

386
00:12:50,160 --> 00:12:52,240
problem in uh

387
00:12:52,240 --> 00:12:54,000
the the main problem was that there was

388
00:12:54,000 --> 00:12:56,720
no way for the user to construct dpfs

389
00:12:56,720 --> 00:12:58,639
uh that would have the target value as

390
00:12:58,639 --> 00:13:01,680
yet so now let's recall the construction

391
00:13:01,680 --> 00:13:05,120
uh of um of dpfs there was this notion

392
00:13:05,120 --> 00:13:06,880
of final correction word which turned

393
00:13:06,880 --> 00:13:07,440
the

394
00:13:07,440 --> 00:13:09,600
random value at the target location into

395
00:13:09,600 --> 00:13:11,920
the desired value the target value

396
00:13:11,920 --> 00:13:14,079
so what the user does is that it

397
00:13:14,079 --> 00:13:16,240
withholds the final correction world and

398
00:13:16,240 --> 00:13:19,519
sends this defoliated dpf that is dps

399
00:13:19,519 --> 00:13:20,959
with a random value at the target

400
00:13:20,959 --> 00:13:21,920
location

401
00:13:21,920 --> 00:13:24,160
now these dpfs might seem useless at the

402
00:13:24,160 --> 00:13:24,959
outset

403
00:13:24,959 --> 00:13:27,920
however what the user also does is that

404
00:13:27,920 --> 00:13:28,880
it sends

405
00:13:28,880 --> 00:13:31,760
the shares of t2 plus t2 tilde where t2

406
00:13:31,760 --> 00:13:32,959
and t2 tilde

407
00:13:32,959 --> 00:13:35,120
are the random values at the target

408
00:13:35,120 --> 00:13:36,000
location

409
00:13:36,000 --> 00:13:37,920
let's call the shares of t 2 and t to

410
00:13:37,920 --> 00:13:41,040
tilde c w 0 and c w 1 respectively

411
00:13:41,040 --> 00:13:45,040
so now p 0 holds z 0 and c w 0 and p 1

412
00:13:45,040 --> 00:13:46,560
holds z 1 and c w 1

413
00:13:46,560 --> 00:13:49,600
0 and z1 are shares of z the the value

414
00:13:49,600 --> 00:13:51,040
with which they want to update the item

415
00:13:51,040 --> 00:13:52,000
profiles

416
00:13:52,000 --> 00:13:54,639
now they exchange that zero plus cw0 and

417
00:13:54,639 --> 00:13:56,240
z1 plus cw1

418
00:13:56,240 --> 00:13:58,720
and get cw prime which is z plus t2 plus

419
00:13:58,720 --> 00:13:59,839
t2 tilde

420
00:13:59,839 --> 00:14:01,600
which they can use as a final correction

421
00:14:01,600 --> 00:14:03,680
word to get the desired

422
00:14:03,680 --> 00:14:06,079
dpf now with this they can update the

423
00:14:06,079 --> 00:14:07,199
item profiles

424
00:14:07,199 --> 00:14:09,040
now once that is complete the next step

425
00:14:09,040 --> 00:14:10,880
is to do the normalization

426
00:14:10,880 --> 00:14:12,959
now that the the normalization problem

427
00:14:12,959 --> 00:14:13,920
is as follows

428
00:14:13,920 --> 00:14:16,880
p0 and p1 hold x0 and x1 vector such

429
00:14:16,880 --> 00:14:18,399
that they add up to x and their goal is

430
00:14:18,399 --> 00:14:19,440
to compute

431
00:14:19,440 --> 00:14:23,920
uh the x over the square root

432
00:14:23,920 --> 00:14:25,760
of the dot product computing the dot

433
00:14:25,760 --> 00:14:26,959
product is not

434
00:14:26,959 --> 00:14:29,199
difficult and once the inverse square

435
00:14:29,199 --> 00:14:30,880
root is computed

436
00:14:30,880 --> 00:14:33,040
normalizing is just one multiplication

437
00:14:33,040 --> 00:14:34,800
so the problem is about computing the

438
00:14:34,800 --> 00:14:36,000
inverse square root

439
00:14:36,000 --> 00:14:38,240
so the way we do it uh is rather than

440
00:14:38,240 --> 00:14:40,079
computing the inverse square root

441
00:14:40,079 --> 00:14:42,639
we compute uh the linear approximation

442
00:14:42,639 --> 00:14:44,240
of the inverse square root

443
00:14:44,240 --> 00:14:46,079
so what we have essentially is a table

444
00:14:46,079 --> 00:14:47,600
like this where we have

445
00:14:47,600 --> 00:14:50,079
ranges of x and the corresponding slope

446
00:14:50,079 --> 00:14:51,440
and intercept which would make a good

447
00:14:51,440 --> 00:14:52,880
linear approximation

448
00:14:52,880 --> 00:14:54,720
for example from this table if x slide

449
00:14:54,720 --> 00:14:56,000
between x 3 and f

450
00:14:56,000 --> 00:14:58,880
x 4 m 4 x plus b4 would be a good linear

451
00:14:58,880 --> 00:15:01,279
approximation of one over square root x

452
00:15:01,279 --> 00:15:03,120
now of course the main problem is to

453
00:15:03,120 --> 00:15:04,480
compute is is to

454
00:15:04,480 --> 00:15:06,959
get the correct shares of uh the slope

455
00:15:06,959 --> 00:15:07,920
and intercept

456
00:15:07,920 --> 00:15:10,160
now it almost seems like a pir problem

457
00:15:10,160 --> 00:15:11,600
except for the fact that

458
00:15:11,600 --> 00:15:13,519
constructing the pir queries is not

459
00:15:13,519 --> 00:15:15,920
trivial because rather than having x

460
00:15:15,920 --> 00:15:18,240
the parties only have shares of x so

461
00:15:18,240 --> 00:15:19,839
let's have a look at the problem again p

462
00:15:19,839 --> 00:15:22,000
0 and p 1 hold shares of x i

463
00:15:22,000 --> 00:15:23,760
and the main idea is to come up is to

464
00:15:23,760 --> 00:15:25,040
somehow compute

465
00:15:25,040 --> 00:15:28,240
uh the the

466
00:15:28,240 --> 00:15:29,839
the main idea is to somehow compute the

467
00:15:29,839 --> 00:15:31,600
pir queries for x i

468
00:15:31,600 --> 00:15:33,519
uh however the main roadblock as we said

469
00:15:33,519 --> 00:15:35,360
earlier was that the

470
00:15:35,360 --> 00:15:38,399
another part is no x i so

471
00:15:38,399 --> 00:15:40,639
uh we have a key observation though the

472
00:15:40,639 --> 00:15:42,160
observation is as follows

473
00:15:42,160 --> 00:15:44,480
suppose p0 and p1 held shares of a

474
00:15:44,480 --> 00:15:46,320
standard basis vector at some completely

475
00:15:46,320 --> 00:15:47,600
random value

476
00:15:47,600 --> 00:15:50,720
uh and then uh suppose the random value

477
00:15:50,720 --> 00:15:52,320
was five in this example

478
00:15:52,320 --> 00:15:54,800
and then they cyclically shifted by

479
00:15:54,800 --> 00:15:55,440
right

480
00:15:55,440 --> 00:15:58,720
uh these these uh these uh

481
00:15:58,720 --> 00:16:01,040
these shares of uh the standard basis

482
00:16:01,040 --> 00:16:01,759
affected at

483
00:16:01,759 --> 00:16:04,480
that random value uh five in this case

484
00:16:04,480 --> 00:16:04,800
by

485
00:16:04,800 --> 00:16:07,759
x i minus five that would give them the

486
00:16:07,759 --> 00:16:09,759
shares of the standard basis vector at x

487
00:16:09,759 --> 00:16:10,320
i

488
00:16:10,320 --> 00:16:12,399
now using this key observation and this

489
00:16:12,399 --> 00:16:13,360
and this and p

490
00:16:13,360 --> 00:16:16,480
2 uh we we construct the uh

491
00:16:16,480 --> 00:16:18,320
they can be constructed protocol to do

492
00:16:18,320 --> 00:16:19,920
the uh to compute the inverse square

493
00:16:19,920 --> 00:16:20,480
root

494
00:16:20,480 --> 00:16:23,199
p2 generates the dpf at some random

495
00:16:23,199 --> 00:16:25,440
value alpha 0 plus alpha 1

496
00:16:25,440 --> 00:16:28,320
and sends the dpf keys along with alpha

497
00:16:28,320 --> 00:16:31,040
0 and alpha 1 to p0 and p1 respectively

498
00:16:31,040 --> 00:16:34,399
who hold x0 and x1 uh p0 and p1 then do

499
00:16:34,399 --> 00:16:36,880
an eval full on dpf 0 and dpf 1 to get

500
00:16:36,880 --> 00:16:38,880
the shares of the standard basis vector

501
00:16:38,880 --> 00:16:41,759
at alpha which is alpha 0 plus alpha 1.

502
00:16:41,759 --> 00:16:44,160
next they exchange x 0 minus alpha 0 and

503
00:16:44,160 --> 00:16:45,440
x 1 minus alpha 1

504
00:16:45,440 --> 00:16:47,279
to get x i minus alpha and then

505
00:16:47,279 --> 00:16:48,959
cyclically shift the outputs of the eval

506
00:16:48,959 --> 00:16:51,360
function to get the correct pir queries

507
00:16:51,360 --> 00:16:53,360
and with that they can get the correct

508
00:16:53,360 --> 00:16:55,839
uh slope and intercept and then compute

509
00:16:55,839 --> 00:16:57,120
the inverse square root

510
00:16:57,120 --> 00:16:58,480
with which they can complete compute the

511
00:16:58,480 --> 00:17:00,639
normalization

512
00:17:00,639 --> 00:17:03,120
so persona can be summarized as follows

513
00:17:03,120 --> 00:17:04,160
we use two

514
00:17:04,160 --> 00:17:07,359
two two dpfs to do pir then then use uh

515
00:17:07,359 --> 00:17:08,760
distributed multiplexer and

516
00:17:08,760 --> 00:17:10,000
demultiplexer

517
00:17:10,000 --> 00:17:11,919
to update the user in item profiles that

518
00:17:11,919 --> 00:17:13,280
is we do collaborative filtering on

519
00:17:13,280 --> 00:17:14,799
these pir queries

520
00:17:14,799 --> 00:17:16,880
uh and then use a fast pir based

521
00:17:16,880 --> 00:17:18,480
normalization to complete

522
00:17:18,480 --> 00:17:21,760
the algorithm so we implemented persona

523
00:17:21,760 --> 00:17:24,480
and run it and run it on amazon ec2 uh

524
00:17:24,480 --> 00:17:26,000
the servers are placed in geographically

525
00:17:26,000 --> 00:17:27,119
distant locations

526
00:17:27,119 --> 00:17:29,360
to mimic the real-world latency and our

527
00:17:29,360 --> 00:17:30,960
results were

528
00:17:30,960 --> 00:17:33,760
quite outstanding netflix uh for for

529
00:17:33,760 --> 00:17:35,760
instance has 2 to the 14 titles across

530
00:17:35,760 --> 00:17:37,120
all categories

531
00:17:37,120 --> 00:17:38,960
with around 110 million subscribers

532
00:17:38,960 --> 00:17:41,120
worldwide uh our training is not

533
00:17:41,120 --> 00:17:42,960
sensitive to the number of users

534
00:17:42,960 --> 00:17:45,520
uh and uh if persona and persona can

535
00:17:45,520 --> 00:17:47,120
actually train around 2 to the 15

536
00:17:47,120 --> 00:17:49,600
queries on 2 to the 49 items in a minute

537
00:17:49,600 --> 00:17:52,720
which means that with a very modest uh

538
00:17:52,720 --> 00:17:55,120
charge netflix can actually pay for

539
00:17:55,120 --> 00:17:57,600
around 40 node persona and train 100

540
00:17:57,600 --> 00:18:01,120
to the netflix data uh one can find

541
00:18:01,120 --> 00:18:02,000
other

542
00:18:02,000 --> 00:18:04,160
other evaluations of persona for

543
00:18:04,160 --> 00:18:05,520
instance the weight resonance scales

544
00:18:05,520 --> 00:18:06,799
with number of items

545
00:18:06,799 --> 00:18:08,320
the way that it scales with number of

546
00:18:08,320 --> 00:18:10,880
queries uh and uh the way it scales with

547
00:18:10,880 --> 00:18:11,120
the

548
00:18:11,120 --> 00:18:12,559
the dimensions of the used knighted

549
00:18:12,559 --> 00:18:14,640
profiles profiles in our paper

550
00:18:14,640 --> 00:18:17,440
we also find that persona is uh is very

551
00:18:17,440 --> 00:18:18,320
faster

552
00:18:18,320 --> 00:18:21,520
than than for instance other other

553
00:18:21,520 --> 00:18:23,120
methods that have been used

554
00:18:23,120 --> 00:18:26,160
to implement these private

555
00:18:26,160 --> 00:18:27,440
recommendation systems

556
00:18:27,440 --> 00:18:29,360
for instance one of the methods is the

557
00:18:29,360 --> 00:18:31,360
is to use garbled circuits

558
00:18:31,360 --> 00:18:33,520
and uh persona is almost five times

559
00:18:33,520 --> 00:18:35,760
faster than that

560
00:18:35,760 --> 00:18:38,160
oh yeah and with that i conclude the

561
00:18:38,160 --> 00:18:39,039
talk and

562
00:18:39,039 --> 00:18:43,840
i'm happy to answer any questions

