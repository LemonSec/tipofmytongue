1
00:00:05,040 --> 00:00:07,839
hello my name is dais ferdin from tno

2
00:00:07,839 --> 00:00:09,519
i'm going to talk to you about secure

3
00:00:09,519 --> 00:00:13,519
integer division with a private divisor

4
00:00:14,480 --> 00:00:16,239
this is joint work with mark obsipal

5
00:00:16,239 --> 00:00:17,680
from cwi

6
00:00:17,680 --> 00:00:19,920
in the netherlands i first introduced

7
00:00:19,920 --> 00:00:21,119
the problem

8
00:00:21,119 --> 00:00:24,720
i talk about integer division motivation

9
00:00:24,720 --> 00:00:25,039
for

10
00:00:25,039 --> 00:00:28,800
private divisor i stepwise

11
00:00:28,800 --> 00:00:32,079
explain our protocols

12
00:00:32,079 --> 00:00:36,719
show the performance and some conclusion

13
00:00:37,760 --> 00:00:39,760
so the setting we are talking about is

14
00:00:39,760 --> 00:00:41,280
mpc

15
00:00:41,280 --> 00:00:44,480
you see a picture about mpc four players

16
00:00:44,480 --> 00:00:45,840
each having their own data

17
00:00:45,840 --> 00:00:47,520
together they want to compute some kind

18
00:00:47,520 --> 00:00:49,120
of function

19
00:00:49,120 --> 00:00:50,719
but they don't want to reveal the data

20
00:00:50,719 --> 00:00:53,199
to each other and they want to be sure

21
00:00:53,199 --> 00:00:53,600
that f

22
00:00:53,600 --> 00:00:55,680
is computed correctly this can be done

23
00:00:55,680 --> 00:00:58,719
with mpc

24
00:00:58,719 --> 00:01:02,000
the mpc usually computes with integers

25
00:01:02,000 --> 00:01:05,360
modulo sum number which is sometimes

26
00:01:05,360 --> 00:01:07,920
prime and we use the notation of

27
00:01:07,920 --> 00:01:10,880
brackets to denote secant shared

28
00:01:10,880 --> 00:01:14,400
integers although a setting with

29
00:01:14,400 --> 00:01:16,080
a morph encryption could also be

30
00:01:16,080 --> 00:01:17,600
possible

31
00:01:17,600 --> 00:01:20,720
we assume a basic npc framework

32
00:01:20,720 --> 00:01:23,439
with functionality like additions

33
00:01:23,439 --> 00:01:26,400
multiplication secure comparison

34
00:01:26,400 --> 00:01:29,520
random bit generation and from that we

35
00:01:29,520 --> 00:01:30,640
build

36
00:01:30,640 --> 00:01:33,119
efficient protocols for integer division

37
00:01:33,119 --> 00:01:34,079
with a private

38
00:01:34,079 --> 00:01:36,798
divisor

39
00:01:37,840 --> 00:01:40,320
what is integer division also known as

40
00:01:40,320 --> 00:01:42,159
euclidean division

41
00:01:42,159 --> 00:01:44,240
so we have given an integer div and

42
00:01:44,240 --> 00:01:45,439
dividend x

43
00:01:45,439 --> 00:01:48,479
at the integer divisor d

44
00:01:48,479 --> 00:01:51,840
and you want to compute x divided by

45
00:01:51,840 --> 00:01:56,320
d rounded downwards

46
00:01:56,320 --> 00:01:59,840
let me look for a pointer so this

47
00:01:59,840 --> 00:02:02,560
formula there's a clear relation with

48
00:02:02,560 --> 00:02:03,439
the modular

49
00:02:03,439 --> 00:02:07,680
remainder so x equals

50
00:02:07,680 --> 00:02:11,360
the x div d times d plus the model

51
00:02:11,360 --> 00:02:12,800
remainder so if you know the one you

52
00:02:12,800 --> 00:02:14,480
compute the other one

53
00:02:14,480 --> 00:02:16,720
which also means that if you want to

54
00:02:16,720 --> 00:02:17,840
find

55
00:02:17,840 --> 00:02:23,040
the diff you can compute the number

56
00:02:23,040 --> 00:02:26,560
w such that the remainder is between 0

57
00:02:26,560 --> 00:02:28,000
and d and then you know that you have

58
00:02:28,000 --> 00:02:29,920
the right div

59
00:02:29,920 --> 00:02:32,480
one remark is that integer division is

60
00:02:32,480 --> 00:02:37,519
not the same as multiplication with a

61
00:02:37,519 --> 00:02:41,680
multiplicative inverse in the field

62
00:02:41,760 --> 00:02:43,680
because you have to do here some

63
00:02:43,680 --> 00:02:45,360
rounding with integers and it will not

64
00:02:45,360 --> 00:02:48,319
yield the same value

65
00:02:48,319 --> 00:02:50,400
so basically we have three variants if

66
00:02:50,400 --> 00:02:53,440
you want to do a divisor in in mpc

67
00:02:53,440 --> 00:02:56,959
common uh device is a public divisor so

68
00:02:56,959 --> 00:02:58,959
you have some constant which everybody

69
00:02:58,959 --> 00:03:01,120
knows which can be your power of two

70
00:03:01,120 --> 00:03:03,360
and you divide a signature integer it's

71
00:03:03,360 --> 00:03:06,159
also known as truncation

72
00:03:06,159 --> 00:03:09,040
other commonly known as secret divisors

73
00:03:09,040 --> 00:03:10,400
so both

74
00:03:10,400 --> 00:03:11,850
numerator and divisor

75
00:03:11,850 --> 00:03:14,319
[Music]

76
00:03:14,319 --> 00:03:17,440
are secret and you need some kind of

77
00:03:17,440 --> 00:03:19,280
iterative

78
00:03:19,280 --> 00:03:22,159
solution with mathematical and numerical

79
00:03:22,159 --> 00:03:24,000
mathematics

80
00:03:24,000 --> 00:03:28,080
to approximate the division result

81
00:03:28,080 --> 00:03:31,360
and in between is a private divisor so

82
00:03:31,360 --> 00:03:33,360
the divisor is known to

83
00:03:33,360 --> 00:03:36,319
only one party and it's not public

84
00:03:36,319 --> 00:03:37,519
knowledge

85
00:03:37,519 --> 00:03:40,879
and the basic approach has always been

86
00:03:40,879 --> 00:03:43,040
to create a secret devices so make a

87
00:03:43,040 --> 00:03:44,400
secret sharing of it

88
00:03:44,400 --> 00:03:46,560
and then perform a secret division but

89
00:03:46,560 --> 00:03:49,040
as we will see it's much more efficient

90
00:03:49,040 --> 00:03:53,280
to use a separate protocol for this

91
00:03:54,560 --> 00:03:56,239
you can use a private divisor for

92
00:03:56,239 --> 00:03:57,840
example even

93
00:03:57,840 --> 00:03:59,519
securely computing with transaction

94
00:03:59,519 --> 00:04:00,879
networks

95
00:04:00,879 --> 00:04:02,799
you see three banks each with their own

96
00:04:02,799 --> 00:04:04,400
color

97
00:04:04,400 --> 00:04:06,400
it's a transaction network so each node

98
00:04:06,400 --> 00:04:08,640
is a client

99
00:04:08,640 --> 00:04:12,560
and an edge is a transaction

100
00:04:12,560 --> 00:04:15,200
and the banks are not allowed to share

101
00:04:15,200 --> 00:04:16,478
the transactions but

102
00:04:16,478 --> 00:04:18,639
they want to find financial fraud within

103
00:04:18,639 --> 00:04:20,320
the joint

104
00:04:20,320 --> 00:04:23,759
graph you could for example use a page

105
00:04:23,759 --> 00:04:25,600
rank

106
00:04:25,600 --> 00:04:29,440
algorithm to do compute page rank values

107
00:04:29,440 --> 00:04:32,240
this is a formula for that and within if

108
00:04:32,240 --> 00:04:34,000
you zoom in

109
00:04:34,000 --> 00:04:38,080
for example on the patreon value of node

110
00:04:38,080 --> 00:04:39,280
two

111
00:04:39,280 --> 00:04:41,919
so assume you you want to compute the

112
00:04:41,919 --> 00:04:43,040
secret shared

113
00:04:43,040 --> 00:04:46,400
next iterated value of uh the second

114
00:04:46,400 --> 00:04:47,440
note

115
00:04:47,440 --> 00:04:50,080
and it's some public value with some

116
00:04:50,080 --> 00:04:50,720
public

117
00:04:50,720 --> 00:04:54,160
constant but here is a private division

118
00:04:54,160 --> 00:04:57,600
it's the secret shared value

119
00:04:57,600 --> 00:05:01,919
of the um page rank value of the first

120
00:05:01,919 --> 00:05:02,320
note

121
00:05:02,320 --> 00:05:06,400
divided by uh a constant which is only

122
00:05:06,400 --> 00:05:07,360
known

123
00:05:07,360 --> 00:05:09,680
by the blue party it's namely it's the

124
00:05:09,680 --> 00:05:10,800
um

125
00:05:10,800 --> 00:05:14,400
the out degree of node one and here the

126
00:05:14,400 --> 00:05:15,199
same with

127
00:05:15,199 --> 00:05:17,600
node seven so here is an example of

128
00:05:17,600 --> 00:05:20,960
private division but there are more

129
00:05:21,280 --> 00:05:24,639
examples for that so how are we going to

130
00:05:24,639 --> 00:05:25,840
build our protocol

131
00:05:25,840 --> 00:05:27,680
well it's easy to start with a public

132
00:05:27,680 --> 00:05:29,440
divisor protocol

133
00:05:29,440 --> 00:05:33,199
so we have a secret shared x a public d

134
00:05:33,199 --> 00:05:34,800
and we want to compute the division

135
00:05:34,800 --> 00:05:36,240
result

136
00:05:36,240 --> 00:05:39,840
the way to go is to generate a large

137
00:05:39,840 --> 00:05:42,320
random number which none of the parties

138
00:05:42,320 --> 00:05:43,759
knows

139
00:05:43,759 --> 00:05:46,320
um and you also need to know the model

140
00:05:46,320 --> 00:05:47,520
or the remainder

141
00:05:47,520 --> 00:05:50,720
of this secret random number

142
00:05:50,720 --> 00:05:54,160
and the dividend the diff

143
00:05:54,160 --> 00:05:56,720
and you could do that for example by

144
00:05:56,720 --> 00:05:58,160
first generating

145
00:05:58,160 --> 00:06:01,840
rm as a uniformly random number between

146
00:06:01,840 --> 00:06:04,319
0 and d

147
00:06:04,319 --> 00:06:07,520
then generate a large random number rd

148
00:06:07,520 --> 00:06:11,199
and compute r as a result

149
00:06:11,199 --> 00:06:13,919
then you have a large random number you

150
00:06:13,919 --> 00:06:15,600
can add it to your

151
00:06:15,600 --> 00:06:18,639
secret dividend x

152
00:06:18,639 --> 00:06:22,400
reveal z z will tell you nothing about x

153
00:06:22,400 --> 00:06:23,120
because it's

154
00:06:23,120 --> 00:06:26,240
um additively blinded but given the

155
00:06:26,240 --> 00:06:28,319
public c you can easily compute z mod d

156
00:06:28,319 --> 00:06:29,919
and z 50

157
00:06:29,919 --> 00:06:34,800
and if you think about it the x diff d

158
00:06:34,800 --> 00:06:38,080
is more or less equal to z 50

159
00:06:38,080 --> 00:06:41,680
minus r d and sometimes you need to

160
00:06:41,680 --> 00:06:45,120
subtract an additional bit and whether

161
00:06:45,120 --> 00:06:46,800
you need to abstract that depends on the

162
00:06:46,800 --> 00:06:50,240
outcome of this comparison

163
00:06:50,560 --> 00:06:53,199
details are in the paper why this works

164
00:06:53,199 --> 00:06:54,800
so this is a

165
00:06:54,800 --> 00:06:58,479
example of a public division protocol

166
00:06:58,479 --> 00:07:01,199
so let's say we want to make this a

167
00:07:01,199 --> 00:07:04,080
private divisor

168
00:07:07,360 --> 00:07:10,400
so we have signature x

169
00:07:10,400 --> 00:07:12,560
we have a d which is only known to one

170
00:07:12,560 --> 00:07:14,400
party which we call p1

171
00:07:14,400 --> 00:07:16,319
and you want to compute the divisor

172
00:07:16,319 --> 00:07:18,160
result so id

173
00:07:18,160 --> 00:07:20,240
the idea is to reveal the same z as

174
00:07:20,240 --> 00:07:21,919
before

175
00:07:21,919 --> 00:07:24,560
two p1 who can compute the diff and the

176
00:07:24,560 --> 00:07:25,759
mod

177
00:07:25,759 --> 00:07:28,880
and from that you can continue until you

178
00:07:28,880 --> 00:07:32,400
find your output summary as before

179
00:07:32,400 --> 00:07:34,319
but there is a problem here namely how

180
00:07:34,319 --> 00:07:36,639
are we going to generate

181
00:07:36,639 --> 00:07:40,720
this random number without knowing d

182
00:07:40,720 --> 00:07:43,039
how do you generate a uniformly random

183
00:07:43,039 --> 00:07:44,800
number rm

184
00:07:44,800 --> 00:07:48,479
within this set without knowing without

185
00:07:48,479 --> 00:07:50,720
revealing d

186
00:07:50,720 --> 00:07:53,919
it seems hard to efficiently

187
00:07:53,919 --> 00:07:57,440
do that but you could do

188
00:07:57,440 --> 00:08:00,560
is we assume an upper bound on

189
00:08:00,560 --> 00:08:03,759
the divisor d so we know the maximum

190
00:08:03,759 --> 00:08:04,560
number of bits

191
00:08:04,560 --> 00:08:08,319
l of this divisor

192
00:08:08,319 --> 00:08:11,599
if we know that we can generate

193
00:08:11,599 --> 00:08:15,440
l swikit bits and compute rm from that

194
00:08:15,440 --> 00:08:18,639
so generating this is easy but

195
00:08:18,639 --> 00:08:21,120
we turns out to be there is another

196
00:08:21,120 --> 00:08:22,319
problem

197
00:08:22,319 --> 00:08:26,479
namely well we blind x

198
00:08:26,479 --> 00:08:30,639
with r reveals z to p1 but p1 can

199
00:08:30,639 --> 00:08:32,799
compute the model result

200
00:08:32,799 --> 00:08:36,399
with division by d

201
00:08:36,559 --> 00:08:40,080
and this unfortunately is no longer

202
00:08:40,080 --> 00:08:43,760
uniformly distributed so this reveals

203
00:08:43,760 --> 00:08:46,800
some information about x

204
00:08:46,800 --> 00:08:49,760
and that's b is because 2 to the power l

205
00:08:49,760 --> 00:08:50,240
is not

206
00:08:50,240 --> 00:08:53,440
exactly at least not always

207
00:08:53,440 --> 00:08:57,040
a multiple of d so the

208
00:08:57,040 --> 00:09:00,560
lower numbers of rm are a bit

209
00:09:00,560 --> 00:09:03,680
more likely than the higher numbers

210
00:09:03,680 --> 00:09:06,000
which makes that this leaks something so

211
00:09:06,000 --> 00:09:08,720
we need to solve that the way we solve

212
00:09:08,720 --> 00:09:10,480
that

213
00:09:10,480 --> 00:09:14,080
is by increasing rm

214
00:09:14,080 --> 00:09:16,720
so not with an upper bound of 2 to the

215
00:09:16,720 --> 00:09:18,959
power l but 2 to the power l plus sigma

216
00:09:18,959 --> 00:09:20,839
where sigma is the statistical security

217
00:09:20,839 --> 00:09:22,480
parameter

218
00:09:22,480 --> 00:09:25,760
this way we can assure that this

219
00:09:25,760 --> 00:09:28,720
is still more or less uniformly

220
00:09:28,720 --> 00:09:29,839
distributed

221
00:09:29,839 --> 00:09:32,560
so we don't have leakage but we run into

222
00:09:32,560 --> 00:09:34,839
an accuracy problem

223
00:09:34,839 --> 00:09:37,680
because um because our m

224
00:09:37,680 --> 00:09:40,800
is so large that rd will no longer be

225
00:09:40,800 --> 00:09:43,839
the dividend the diff result

226
00:09:43,839 --> 00:09:47,120
of r divided by d

227
00:09:47,519 --> 00:09:50,959
so we thought of a solution for that too

228
00:09:50,959 --> 00:09:54,640
namely we shift the secret value

229
00:09:54,640 --> 00:09:57,680
x with a factor 2 to the power

230
00:09:57,680 --> 00:10:01,839
l plus sigma compute z in this way and

231
00:10:01,839 --> 00:10:03,680
we don't divide by d

232
00:10:03,680 --> 00:10:07,279
but we divide by the shift d

233
00:10:07,279 --> 00:10:11,760
and this turns out to work really well

234
00:10:11,760 --> 00:10:14,959
because now if you want to compute

235
00:10:14,959 --> 00:10:17,519
x d of d it's the same as the shifted x

236
00:10:17,519 --> 00:10:18,800
divided by the shift

237
00:10:18,800 --> 00:10:22,959
d and so this is more or less equal to

238
00:10:22,959 --> 00:10:25,920
z divided by the shift to d minus r

239
00:10:25,920 --> 00:10:27,600
divided by the shift of d

240
00:10:27,600 --> 00:10:29,680
with some comparison bit which we can

241
00:10:29,680 --> 00:10:33,200
still compute

242
00:10:33,200 --> 00:10:36,240
this this division with that can be

243
00:10:36,240 --> 00:10:38,800
computed by p1

244
00:10:38,800 --> 00:10:42,320
and this number we can generate

245
00:10:42,320 --> 00:10:45,600
ourselves quite easily as we will

246
00:10:45,600 --> 00:10:48,240
see in the next protocol remember this

247
00:10:48,240 --> 00:10:49,600
is the value

248
00:10:49,600 --> 00:10:52,800
r prime and r prime should be equal to r

249
00:10:52,800 --> 00:10:56,640
divided by the shifted d

250
00:10:56,640 --> 00:11:01,279
this can be seen here

251
00:11:01,279 --> 00:11:04,000
so this is the shifted x these two

252
00:11:04,000 --> 00:11:04,640
together

253
00:11:04,640 --> 00:11:07,839
are our random value and

254
00:11:07,839 --> 00:11:12,160
r double prime is relatively small

255
00:11:12,160 --> 00:11:15,600
h is a multiple of d

256
00:11:15,600 --> 00:11:18,560
and within the multiple of d r prime is

257
00:11:18,560 --> 00:11:19,680
the multiple

258
00:11:19,680 --> 00:11:23,200
of the shift factor and r is again small

259
00:11:23,200 --> 00:11:24,800
so if you think about it then you see

260
00:11:24,800 --> 00:11:26,320
that r prime

261
00:11:26,320 --> 00:11:29,519
is our random

262
00:11:29,519 --> 00:11:32,720
secret number divided by the shift

263
00:11:32,720 --> 00:11:36,079
d that means

264
00:11:36,079 --> 00:11:39,440
that it's safe to reveal z

265
00:11:39,440 --> 00:11:42,800
to p1 we let p1

266
00:11:42,800 --> 00:11:47,680
compute the y and the y prime

267
00:11:48,320 --> 00:11:51,600
as as this

268
00:11:52,160 --> 00:11:56,000
p1 creates signatures for that and then

269
00:11:56,000 --> 00:12:00,480
the outcome is the y

270
00:12:00,480 --> 00:12:04,079
minus our r prime with a possible

271
00:12:04,079 --> 00:12:07,680
extra bit which is the result of this

272
00:12:07,680 --> 00:12:09,839
secure comparison

273
00:12:09,839 --> 00:12:11,920
details of why the security comparison

274
00:12:11,920 --> 00:12:13,519
works

275
00:12:13,519 --> 00:12:16,320
is in the paper

276
00:12:17,600 --> 00:12:19,519
now so this is our passive security

277
00:12:19,519 --> 00:12:20,800
solution

278
00:12:20,800 --> 00:12:23,440
next step is an actively secure solution

279
00:12:23,440 --> 00:12:25,760
so we have the problem here that

280
00:12:25,760 --> 00:12:28,959
p bar not necessarily computes to write

281
00:12:28,959 --> 00:12:32,479
y and y prime

282
00:12:35,600 --> 00:12:38,320
so p 1 needs to compute y and y prime

283
00:12:38,320 --> 00:12:39,120
correctly

284
00:12:39,120 --> 00:12:42,560
how can we make sure of that well

285
00:12:42,560 --> 00:12:47,440
the idea is that p1 is going to compute

286
00:12:47,440 --> 00:12:50,560
z prime which is z d

287
00:12:50,560 --> 00:12:53,040
and to make sure that z prime is

288
00:12:53,040 --> 00:12:54,399
actually equal to z

289
00:12:54,399 --> 00:12:57,839
d we let them compute z

290
00:12:57,839 --> 00:13:00,720
double prime which should be z mod d we

291
00:13:00,720 --> 00:13:02,639
we can jointly check whether it's with a

292
00:13:02,639 --> 00:13:05,200
number between zero and d

293
00:13:05,200 --> 00:13:09,040
and we can check whether z equals

294
00:13:09,040 --> 00:13:12,160
the diff times d plus the model result

295
00:13:12,160 --> 00:13:12,959
if this

296
00:13:12,959 --> 00:13:15,760
check holds then we know for sure that z

297
00:13:15,760 --> 00:13:16,560
prime

298
00:13:16,560 --> 00:13:22,480
equals z of d for that we want to avoid

299
00:13:22,480 --> 00:13:26,560
carryovers here modelo our npc modulo

300
00:13:26,560 --> 00:13:28,720
so we also need to show that z prime is

301
00:13:28,720 --> 00:13:31,120
not too large

302
00:13:31,120 --> 00:13:34,160
if we combine those three steps

303
00:13:34,160 --> 00:13:37,519
we can assure that p1 computes

304
00:13:37,519 --> 00:13:40,639
z prime correctly and giving depth

305
00:13:40,639 --> 00:13:43,600
we can compute within the mpc framework

306
00:13:43,600 --> 00:13:44,560
y prime

307
00:13:44,560 --> 00:13:47,680
from z prime and y from z

308
00:13:47,680 --> 00:13:50,720
prime why is that yeah if you look at

309
00:13:50,720 --> 00:13:52,000
this expression

310
00:13:52,000 --> 00:13:55,199
this is c prime so y prime will be the

311
00:13:55,199 --> 00:13:55,600
first

312
00:13:55,600 --> 00:13:58,320
alpha sigma bits and y will be the

313
00:13:58,320 --> 00:13:59,600
remaining

314
00:13:59,600 --> 00:14:02,240
output sigma bits and that way we can

315
00:14:02,240 --> 00:14:03,120
also make an

316
00:14:03,120 --> 00:14:06,320
actively secure solution

317
00:14:06,320 --> 00:14:09,680
and it's time to go to the

318
00:14:09,680 --> 00:14:12,959
performance and compare our results

319
00:14:12,959 --> 00:14:16,399
with other algorithms

320
00:14:16,399 --> 00:14:19,760
so we implemented the stuff in mp speeds

321
00:14:19,760 --> 00:14:22,320
happy speeds of merit variants many

322
00:14:22,320 --> 00:14:23,440
variants we

323
00:14:23,440 --> 00:14:24,959
use the one with three parties and

324
00:14:24,959 --> 00:14:26,880
replicated signaturing

325
00:14:26,880 --> 00:14:30,000
model over power of two in a

326
00:14:30,000 --> 00:14:33,680
amazon cloud and

327
00:14:33,680 --> 00:14:36,720
the secret division protocol for mcps is

328
00:14:36,720 --> 00:14:41,199
based on katrina and saxena from 2010

329
00:14:41,199 --> 00:14:42,800
unfortunately they use the same

330
00:14:42,800 --> 00:14:44,560
algorithm for the public division

331
00:14:44,560 --> 00:14:47,440
which is not really efficient but i know

332
00:14:47,440 --> 00:14:48,079
yeah that's

333
00:14:48,079 --> 00:14:50,719
convenient

334
00:14:51,120 --> 00:14:54,160
so because that is not

335
00:14:54,160 --> 00:14:59,279
not a realistic version we made our own

336
00:14:59,279 --> 00:15:01,519
public divisor protocol which is a

337
00:15:01,519 --> 00:15:04,000
public variant of our private divisor

338
00:15:04,000 --> 00:15:07,680
protocol to make a more fair comparison

339
00:15:07,680 --> 00:15:09,519
these are the results of the passive

340
00:15:09,519 --> 00:15:11,120
secure model

341
00:15:11,120 --> 00:15:14,399
where the dividend is twice the length

342
00:15:14,399 --> 00:15:16,160
of the divisor

343
00:15:16,160 --> 00:15:18,079
so here you see the blue line is our

344
00:15:18,079 --> 00:15:20,480
private divisor protocol

345
00:15:20,480 --> 00:15:22,560
the red line is the public divisor which

346
00:15:22,560 --> 00:15:24,560
should be lower than the blue line but

347
00:15:24,560 --> 00:15:27,920
because of the well say

348
00:15:27,920 --> 00:15:29,680
not efficient choice of empty speeds

349
00:15:29,680 --> 00:15:31,839
it's above the blue line

350
00:15:31,839 --> 00:15:34,880
and the secret divisor it's the most

351
00:15:34,880 --> 00:15:37,920
complex operation it's this

352
00:15:37,920 --> 00:15:39,839
green line which takes the most time of

353
00:15:39,839 --> 00:15:42,480
course and the actively secured case you

354
00:15:42,480 --> 00:15:44,720
have a similar picture

355
00:15:44,720 --> 00:15:46,639
you have a blue line which is our

356
00:15:46,639 --> 00:15:48,800
private divisor

357
00:15:48,800 --> 00:15:50,720
our version of the public divisor is

358
00:15:50,720 --> 00:15:52,000
indeed below the

359
00:15:52,000 --> 00:15:55,040
blue line the red line public device of

360
00:15:55,040 --> 00:15:58,079
amp speech is again above the blue line

361
00:15:58,079 --> 00:16:00,800
and the green line is again the highest

362
00:16:00,800 --> 00:16:01,600
of all

363
00:16:01,600 --> 00:16:04,639
highest complexity

364
00:16:06,079 --> 00:16:09,600
to conclude we showed that

365
00:16:09,600 --> 00:16:11,600
integer division with private divisor is

366
00:16:11,600 --> 00:16:14,800
a useful building block in npc

367
00:16:14,800 --> 00:16:16,959
transforming to secret division

368
00:16:16,959 --> 00:16:17,839
unnecessarily

369
00:16:17,839 --> 00:16:20,480
increases the complexity it's better to

370
00:16:20,480 --> 00:16:22,720
use one of our protocols

371
00:16:22,720 --> 00:16:25,519
where we show that the complexity is

372
00:16:25,519 --> 00:16:27,360
similar to the complexity of

373
00:16:27,360 --> 00:16:30,320
truncation and this complexity is linear

374
00:16:30,320 --> 00:16:31,440
in the bit length

375
00:16:31,440 --> 00:16:35,279
of the dividend and of divisor

376
00:16:35,279 --> 00:16:38,240
we gave both passively and actively

377
00:16:38,240 --> 00:16:39,759
secure protocols

378
00:16:39,759 --> 00:16:43,040
we implemented in empty speeds but you

379
00:16:43,040 --> 00:16:43,440
could

380
00:16:43,440 --> 00:16:45,199
implement it in any other embassy

381
00:16:45,199 --> 00:16:47,360
framework we showed that it's

382
00:16:47,360 --> 00:16:50,639
universally composable so

383
00:16:50,639 --> 00:16:54,160
it can be plugged in in all

384
00:16:54,160 --> 00:16:57,439
problems that you would

385
00:16:59,120 --> 00:17:01,519
so this ends this talk i would thank you

386
00:17:01,519 --> 00:17:02,480
for your

387
00:17:02,480 --> 00:17:06,319
attention and if you have any questions

388
00:17:06,319 --> 00:17:12,000
you know where to find me

