1
00:00:00,000 --> 00:00:02,800
hello everyone i'm tim ching tang from

2
00:00:02,800 --> 00:00:03,840
georgia tech

3
00:00:03,840 --> 00:00:06,080
i'm going to present a joint work with

4
00:00:06,080 --> 00:00:07,279
my advisor

5
00:00:07,279 --> 00:00:09,760
slash our bodywrapper on privacy

6
00:00:09,760 --> 00:00:12,000
preserving approximate key near stable

7
00:00:12,000 --> 00:00:12,559
search

8
00:00:12,559 --> 00:00:14,960
that hides access query and volume

9
00:00:14,960 --> 00:00:17,279
patterns

10
00:00:17,279 --> 00:00:19,760
so let's get started by looking at the k

11
00:00:19,760 --> 00:00:21,279
n problem

12
00:00:21,279 --> 00:00:23,840
over some metric space given a data set

13
00:00:23,840 --> 00:00:26,000
construct data structure that returns a

14
00:00:26,000 --> 00:00:28,000
point which is the i's nearest neighbor

15
00:00:28,000 --> 00:00:29,679
of the cure point for all i

16
00:00:29,679 --> 00:00:33,040
from 1 2 k in this illustration

17
00:00:33,040 --> 00:00:35,520
suppose k equals to 2 and let the black

18
00:00:35,520 --> 00:00:37,440
point know the zero point

19
00:00:37,440 --> 00:00:39,520
and all the red points are the points in

20
00:00:39,520 --> 00:00:41,440
the database

21
00:00:41,440 --> 00:00:45,200
we say p1 is qs1 n and p2

22
00:00:45,200 --> 00:00:50,079
is qs2 n as we all know that kn can be

23
00:00:50,079 --> 00:00:51,840
used as a basic machine learning

24
00:00:51,840 --> 00:00:53,280
classification tool

25
00:00:53,280 --> 00:00:56,719
and has numerous applications include

26
00:00:56,719 --> 00:00:58,960
content-based image search face

27
00:00:58,960 --> 00:01:00,079
recognition

28
00:01:00,079 --> 00:01:03,440
medical diagnosis and anomaly detection

29
00:01:03,440 --> 00:01:05,600
however the issue is that in our daily

30
00:01:05,600 --> 00:01:07,840
life high-dimensional data such as

31
00:01:07,840 --> 00:01:08,479
pictures

32
00:01:08,479 --> 00:01:10,799
videos are getting more prevalent and

33
00:01:10,799 --> 00:01:12,720
finding the exact kns

34
00:01:12,720 --> 00:01:15,920
suffers an inefficiency problem

35
00:01:15,920 --> 00:01:18,320
to deal with this we resort to the

36
00:01:18,320 --> 00:01:20,080
approximated version

37
00:01:20,080 --> 00:01:23,759
namely akn which is appropriate for many

38
00:01:23,759 --> 00:01:25,280
applications that allow

39
00:01:25,280 --> 00:01:27,520
sacrificing some precision for

40
00:01:27,520 --> 00:01:29,600
efficiency

41
00:01:29,600 --> 00:01:32,000
so now is the time to define approximate

42
00:01:32,000 --> 00:01:33,040
k n problem

43
00:01:33,040 --> 00:01:36,000
or epsilon delta again it asks the

44
00:01:36,000 --> 00:01:38,000
following question can we construct data

45
00:01:38,000 --> 00:01:40,000
structure that's returns point whose

46
00:01:40,000 --> 00:01:41,920
distance from the query is no more than

47
00:01:41,920 --> 00:01:44,399
one plus epsilon times the distance of

48
00:01:44,399 --> 00:01:45,600
the two

49
00:01:45,600 --> 00:01:48,159
ice nearest neighbor with probability at

50
00:01:48,159 --> 00:01:49,119
least one

51
00:01:49,119 --> 00:01:52,720
minus delta in this illustration suppose

52
00:01:52,720 --> 00:01:54,479
k equals two p one

53
00:01:54,479 --> 00:01:57,280
is q sub one n n and distance between q

54
00:01:57,280 --> 00:01:58,000
and p one

55
00:01:58,000 --> 00:02:01,200
is r one and p two is q's two and then

56
00:02:01,200 --> 00:02:03,200
the distance between two points is

57
00:02:03,200 --> 00:02:05,920
r two when we say that p one and p two

58
00:02:05,920 --> 00:02:07,840
are queues approximate 1 and n

59
00:02:07,840 --> 00:02:10,720
since both points reside in the orange

60
00:02:10,720 --> 00:02:12,400
circle centered at q

61
00:02:12,400 --> 00:02:16,160
of radius 1 plus epsilon times r1

62
00:02:16,160 --> 00:02:19,360
and p2 and p3 are cues approximately 2

63
00:02:19,360 --> 00:02:22,160
and n we're now ready to define the

64
00:02:22,160 --> 00:02:23,599
problem setting

65
00:02:23,599 --> 00:02:25,840
that is we want to preserve privacy when

66
00:02:25,840 --> 00:02:27,120
performing a cnn

67
00:02:27,120 --> 00:02:29,840
on our private data especially we're

68
00:02:29,840 --> 00:02:31,680
focusing on the outsource setting

69
00:02:31,680 --> 00:02:33,519
where the client has the data and the

70
00:02:33,519 --> 00:02:36,239
secret key since this common nowadays to

71
00:02:36,239 --> 00:02:37,920
outsource our data to the client

72
00:02:37,920 --> 00:02:38,640
services

73
00:02:38,640 --> 00:02:41,200
offered by companies such as apple and

74
00:02:41,200 --> 00:02:43,760
google for easy access

75
00:02:43,760 --> 00:02:47,519
social encryption or se is an area that

76
00:02:47,519 --> 00:02:50,400
explicitly targets outsource setting

77
00:02:50,400 --> 00:02:50,959
offers

78
00:02:50,959 --> 00:02:53,599
privacy preserving solutions accessing

79
00:02:53,599 --> 00:02:55,200
encrypted data

80
00:02:55,200 --> 00:02:58,239
in this illustration the client has a

81
00:02:58,239 --> 00:03:01,440
secret key and k equals to 2. she will

82
00:03:01,440 --> 00:03:02,239
first

83
00:03:02,239 --> 00:03:05,200
encrypt her files and tags and sends to

84
00:03:05,200 --> 00:03:06,560
the server

85
00:03:06,560 --> 00:03:08,959
during the search stage she will send

86
00:03:08,959 --> 00:03:11,040
the query tag

87
00:03:11,040 --> 00:03:13,440
and the server will find the text to and

88
00:03:13,440 --> 00:03:14,560
then associative

89
00:03:14,560 --> 00:03:18,239
files and sent back to the client

90
00:03:18,239 --> 00:03:20,319
there are a couple of busy schemes that

91
00:03:20,319 --> 00:03:22,640
support k n theories

92
00:03:22,640 --> 00:03:24,879
however some of the schemes leak the

93
00:03:24,879 --> 00:03:26,560
relative distance

94
00:03:26,560 --> 00:03:29,200
and some leaks common leakage patterns

95
00:03:29,200 --> 00:03:29,920
of se

96
00:03:29,920 --> 00:03:32,480
such as cure pattern sometimes volume

97
00:03:32,480 --> 00:03:32,959
pattern

98
00:03:32,959 --> 00:03:36,000
and access pattern

99
00:03:36,799 --> 00:03:38,879
i will briefly describe what those

100
00:03:38,879 --> 00:03:41,440
common sc leakage patterns are

101
00:03:41,440 --> 00:03:44,319
first the volume pattern the adversary

102
00:03:44,319 --> 00:03:45,680
chemical information

103
00:03:45,680 --> 00:03:47,599
for example the number of matched

104
00:03:47,599 --> 00:03:48,720
encrypted files

105
00:03:48,720 --> 00:03:51,920
by observing the transcript size in this

106
00:03:51,920 --> 00:03:53,120
illustration

107
00:03:53,120 --> 00:03:54,959
the orange query has two matched iron

108
00:03:54,959 --> 00:03:57,680
files while the blue query only has one

109
00:03:57,680 --> 00:03:59,120
match file

110
00:03:59,120 --> 00:04:02,239
next the queue pattern it implies what

111
00:04:02,239 --> 00:04:04,480
the queries are repeated

112
00:04:04,480 --> 00:04:06,959
in this case the orange cues have been

113
00:04:06,959 --> 00:04:08,080
made twice

114
00:04:08,080 --> 00:04:11,680
and the blue query has been made once

115
00:04:11,680 --> 00:04:14,400
finally the access pattern it reviews

116
00:04:14,400 --> 00:04:16,000
what encrypted files

117
00:04:16,000 --> 00:04:18,880
that the client has access on the server

118
00:04:18,880 --> 00:04:21,839
these are all common se leakage patterns

119
00:04:21,839 --> 00:04:24,720
and initially people will okay with such

120
00:04:24,720 --> 00:04:25,840
leakage

121
00:04:25,840 --> 00:04:28,639
as allowing this provided the fast sc

122
00:04:28,639 --> 00:04:30,080
solutions

123
00:04:30,080 --> 00:04:32,080
but in recent years emerging attacks

124
00:04:32,080 --> 00:04:33,919
exploiting those leakages have

125
00:04:33,919 --> 00:04:36,240
successfully recovered the query or

126
00:04:36,240 --> 00:04:38,000
reconstruct the dataset

127
00:04:38,000 --> 00:04:42,080
and thus becomes a problem

128
00:04:42,080 --> 00:04:44,960
there is a qlc solutions hiding comma-c

129
00:04:44,960 --> 00:04:45,759
patterns

130
00:04:45,759 --> 00:04:48,400
but with strong assumptions for example

131
00:04:48,400 --> 00:04:49,040
obliques

132
00:04:49,040 --> 00:04:51,680
using sdx hides the access and qr

133
00:04:51,680 --> 00:04:52,560
pattern

134
00:04:52,560 --> 00:04:55,680
a malware tool proposes a secure key in

135
00:04:55,680 --> 00:04:56,560
scheme

136
00:04:56,560 --> 00:04:59,600
relying on non-including servers high

137
00:04:59,600 --> 00:05:02,240
c access pattern however we want to

138
00:05:02,240 --> 00:05:03,840
solve the problem without such

139
00:05:03,840 --> 00:05:07,120
strong assumptions can we have a

140
00:05:07,120 --> 00:05:08,960
practical secure approximate k n

141
00:05:08,960 --> 00:05:09,680
protocol

142
00:05:09,680 --> 00:05:12,639
that hides access q and volume pattern

143
00:05:12,639 --> 00:05:15,440
in another source environment

144
00:05:15,440 --> 00:05:16,960
because we are dealing with hiding

145
00:05:16,960 --> 00:05:18,639
access pattern

146
00:05:18,639 --> 00:05:21,199
and it's well known that oblivious ram

147
00:05:21,199 --> 00:05:22,560
hides that

148
00:05:22,560 --> 00:05:23,840
so can we use our ram in a

149
00:05:23,840 --> 00:05:25,600
straightforward manner

150
00:05:25,600 --> 00:05:28,720
the bad news is david in 2015

151
00:05:28,720 --> 00:05:30,320
showed that if some of the keywords

152
00:05:30,320 --> 00:05:31,919
match all the documents

153
00:05:31,919 --> 00:05:35,199
then it leads to inefficiency namely for

154
00:05:35,199 --> 00:05:35,840
a single

155
00:05:35,840 --> 00:05:37,840
keyword search it costs more bandwidth

156
00:05:37,840 --> 00:05:39,440
than transferring the whole encrypted

157
00:05:39,440 --> 00:05:40,720
database

158
00:05:40,720 --> 00:05:44,240
however luckily for us we observed that

159
00:05:44,240 --> 00:05:46,240
solving akn and with oram-based

160
00:05:46,240 --> 00:05:47,440
constructions is

161
00:05:47,440 --> 00:05:49,199
more feasible than general keyword

162
00:05:49,199 --> 00:05:52,080
search since the number of data points

163
00:05:52,080 --> 00:05:54,240
or documents associated with each query

164
00:05:54,240 --> 00:05:57,440
tag can be bounded

165
00:05:57,440 --> 00:05:59,520
i'll summarize the contributions for our

166
00:05:59,520 --> 00:06:01,759
work which include defining security of

167
00:06:01,759 --> 00:06:05,280
privacy preserving nkm protocol ppakn

168
00:06:05,280 --> 00:06:07,440
defining security of oblivious map with

169
00:06:07,440 --> 00:06:08,319
encryption

170
00:06:08,319 --> 00:06:11,360
or mapping a generic ppak and protocol

171
00:06:11,360 --> 00:06:12,560
based on omap

172
00:06:12,560 --> 00:06:15,520
with security analysis and finally we

173
00:06:15,520 --> 00:06:16,479
evaluated

174
00:06:16,479 --> 00:06:18,160
our constructions through

175
00:06:18,160 --> 00:06:21,680
implementations and experiments

176
00:06:21,680 --> 00:06:23,600
before going into more details of the

177
00:06:23,600 --> 00:06:25,919
construction let's move on to define the

178
00:06:25,919 --> 00:06:26,639
syntax

179
00:06:26,639 --> 00:06:28,639
or in other words the functionality of

180
00:06:28,639 --> 00:06:29,919
the scheme

181
00:06:29,919 --> 00:06:32,880
a privacy preserving akn m protocol or

182
00:06:32,880 --> 00:06:35,280
ppa

183
00:06:47,280 --> 00:06:49,599
i have made some illustrations for the

184
00:06:49,599 --> 00:06:50,800
setup search

185
00:06:50,800 --> 00:06:53,599
update algorithm and omitted decryption

186
00:06:53,599 --> 00:06:56,720
as it is more straightforward

187
00:06:56,720 --> 00:06:58,960
given narrow factor epsilon failure

188
00:06:58,960 --> 00:07:00,880
probability delta

189
00:07:00,880 --> 00:07:03,840
prime z which may contain auxiliary

190
00:07:03,840 --> 00:07:05,440
information about the message

191
00:07:05,440 --> 00:07:08,639
distribution the setup algorithm takes

192
00:07:08,639 --> 00:07:08,880
as

193
00:07:08,880 --> 00:07:12,000
input those parameters and the list of

194
00:07:12,000 --> 00:07:12,639
files

195
00:07:12,639 --> 00:07:15,039
and tags and this will then output the

196
00:07:15,039 --> 00:07:16,639
encrypted database which will be

197
00:07:16,639 --> 00:07:18,479
outsourced to the server

198
00:07:18,479 --> 00:07:21,280
a secret key kept by the client a public

199
00:07:21,280 --> 00:07:22,560
parameter k-max

200
00:07:22,560 --> 00:07:24,639
that is the largest k supported by the

201
00:07:24,639 --> 00:07:27,520
system's akn search

202
00:07:27,520 --> 00:07:30,400
for the search algorithm the client will

203
00:07:30,400 --> 00:07:31,199
input her

204
00:07:31,199 --> 00:07:34,400
secret key a secret parameter k that is

205
00:07:34,400 --> 00:07:35,440
from 1 to k

206
00:07:35,440 --> 00:07:38,800
max and her q attack the server will

207
00:07:38,800 --> 00:07:41,840
input the incorporate database

208
00:07:41,840 --> 00:07:44,800
at the end of the search algorithm the

209
00:07:44,800 --> 00:07:47,199
client will receive the response

210
00:07:47,199 --> 00:07:49,440
and the server will update the increment

211
00:07:49,440 --> 00:07:51,199
database

212
00:07:51,199 --> 00:07:54,080
the update algorithm runs similarly with

213
00:07:54,080 --> 00:07:54,960
the exception

214
00:07:54,960 --> 00:07:58,319
that the client instead inputs

215
00:07:58,319 --> 00:08:01,520
an operation type either it's an add

216
00:08:01,520 --> 00:08:05,360
or remove she also inputs a tag

217
00:08:05,360 --> 00:08:08,960
and associate file at the end of the

218
00:08:08,960 --> 00:08:10,000
update

219
00:08:10,000 --> 00:08:12,479
algorithm the client will receive no

220
00:08:12,479 --> 00:08:14,960
output

221
00:08:15,280 --> 00:08:18,080
since we have the syntax ready now let's

222
00:08:18,080 --> 00:08:19,840
move to the correctness and efficiency

223
00:08:19,840 --> 00:08:23,199
requirements for ppa canon constructions

224
00:08:23,199 --> 00:08:26,240
we want epsilon delta cracked for search

225
00:08:26,240 --> 00:08:28,479
and perfect correctness for both update

226
00:08:28,479 --> 00:08:30,560
and decryption

227
00:08:30,560 --> 00:08:33,760
as for the efficiency aspect we want a

228
00:08:33,760 --> 00:08:35,440
big role of polylogging

229
00:08:35,440 --> 00:08:38,240
and computational and big goal of

230
00:08:38,240 --> 00:08:39,039
polylogging

231
00:08:39,039 --> 00:08:41,760
and communication bandwidth assuming k

232
00:08:41,760 --> 00:08:42,320
max

233
00:08:42,320 --> 00:08:45,200
is much less than n where n is the

234
00:08:45,200 --> 00:08:46,399
number of items

235
00:08:46,399 --> 00:08:50,160
in the data set next we will define the

236
00:08:50,160 --> 00:08:51,440
security

237
00:08:51,440 --> 00:08:54,480
we provide a simulation security notion

238
00:08:54,480 --> 00:08:57,200
with leakage functions for setup search

239
00:08:57,200 --> 00:08:58,800
and update

240
00:08:58,800 --> 00:09:01,600
in both experiments the adversary is

241
00:09:01,600 --> 00:09:03,279
given the inquiry database

242
00:09:03,279 --> 00:09:06,160
it can adaptly choose the queries

243
00:09:06,160 --> 00:09:07,040
receive

244
00:09:07,040 --> 00:09:09,440
the function outputs and the transcripts

245
00:09:09,440 --> 00:09:11,600
produced by the honest executions

246
00:09:11,600 --> 00:09:14,880
of the real protocol in the real world

247
00:09:14,880 --> 00:09:16,959
in the ideal world the simulator needs

248
00:09:16,959 --> 00:09:19,040
to produce the inquiry database and

249
00:09:19,040 --> 00:09:22,640
transcripts based on the allowed leakage

250
00:09:22,640 --> 00:09:25,120
our definition requires that there

251
00:09:25,120 --> 00:09:27,120
exists a ppt simulator

252
00:09:27,120 --> 00:09:30,240
for every non-uniform ppt adversary a

253
00:09:30,240 --> 00:09:32,320
a can only distinguish the real and

254
00:09:32,320 --> 00:09:34,839
ideal world with negotiable

255
00:09:34,839 --> 00:09:37,600
probability next

256
00:09:37,600 --> 00:09:40,080
the very crucial part we need to define

257
00:09:40,080 --> 00:09:42,399
a security sufficient for practice

258
00:09:42,399 --> 00:09:44,480
we model the server as an honest but

259
00:09:44,480 --> 00:09:46,399
curious adversary

260
00:09:46,399 --> 00:09:48,720
once the server is compromised the

261
00:09:48,720 --> 00:09:50,000
inquiry database should be

262
00:09:50,000 --> 00:09:53,279
resistant to the snapshot attack

263
00:09:53,279 --> 00:09:56,240
namely no efficient adversary is capable

264
00:09:56,240 --> 00:09:58,560
of learning the underlying plaintext by

265
00:09:58,560 --> 00:10:01,600
examining the encrypted database

266
00:10:01,600 --> 00:10:04,160
if construction satisfy our security

267
00:10:04,160 --> 00:10:05,440
definition

268
00:10:05,440 --> 00:10:08,000
then it implies that all efficient

269
00:10:08,000 --> 00:10:08,959
adversaries

270
00:10:08,959 --> 00:10:11,279
cannot learn information other than the

271
00:10:11,279 --> 00:10:12,320
allowed leakage

272
00:10:12,320 --> 00:10:14,320
explicitly specified in the

273
00:10:14,320 --> 00:10:16,000
constructions

274
00:10:16,000 --> 00:10:18,320
in our case we aim at a construction

275
00:10:18,320 --> 00:10:20,240
basically with no leakage

276
00:10:20,240 --> 00:10:22,320
whereas the secure definition is for

277
00:10:22,320 --> 00:10:23,680
general case

278
00:10:23,680 --> 00:10:28,800
so it has an abstract leakage profile

279
00:10:28,800 --> 00:10:32,000
before going to details of building a

280
00:10:32,000 --> 00:10:35,200
ppak and construction let's start with

281
00:10:35,200 --> 00:10:36,480
studying how to

282
00:10:36,480 --> 00:10:40,399
solve the unsecured akm first

283
00:10:41,920 --> 00:10:43,440
first we need to introduce the

284
00:10:43,440 --> 00:10:45,519
approximate near neighbor problem

285
00:10:45,519 --> 00:10:48,800
or crn and it's asked the following

286
00:10:48,800 --> 00:10:49,839
question

287
00:10:49,839 --> 00:10:52,480
given a closeness threshold r

288
00:10:52,480 --> 00:10:55,279
approximation factor c

289
00:10:55,279 --> 00:10:57,440
can we construct data structure so that

290
00:10:57,440 --> 00:10:58,880
for any qreq

291
00:10:58,880 --> 00:11:00,720
with probability at least one minus

292
00:11:00,720 --> 00:11:02,000
delta

293
00:11:02,000 --> 00:11:04,800
if their points within queues are radius

294
00:11:04,800 --> 00:11:06,959
the returns point in the data set

295
00:11:06,959 --> 00:11:10,160
so that it is at most c times r far

296
00:11:10,160 --> 00:11:13,360
away from q now puts yes

297
00:11:13,360 --> 00:11:16,640
otherwise i'll put no

298
00:11:16,640 --> 00:11:19,200
in this illustration suppose c equals

299
00:11:19,200 --> 00:11:20,320
1.2

300
00:11:20,320 --> 00:11:24,000
and the distance between q and p1 is r

301
00:11:24,000 --> 00:11:27,040
then we say p1 and p2 are q's vr and

302
00:11:27,040 --> 00:11:27,519
then

303
00:11:27,519 --> 00:11:30,320
since both points are within the orange

304
00:11:30,320 --> 00:11:30,880
circle

305
00:11:30,880 --> 00:11:33,920
centered at q of radius

306
00:11:33,920 --> 00:11:36,880
c times r

307
00:11:37,519 --> 00:11:40,720
so how to solve the rnn problem we use

308
00:11:40,720 --> 00:11:42,079
an algorithm called

309
00:11:42,079 --> 00:11:45,839
er such crnn which is buton

310
00:11:45,839 --> 00:11:48,800
locality sensitive hashing in extension

311
00:11:48,800 --> 00:11:49,519
form

312
00:11:49,519 --> 00:11:53,120
or elseh we called in our work

313
00:11:53,120 --> 00:11:56,320
essentially er is a vector of

314
00:11:56,320 --> 00:11:58,720
random hash functions the closer the

315
00:11:58,720 --> 00:11:59,839
data

316
00:11:59,839 --> 00:12:02,079
the higher probability they will share

317
00:12:02,079 --> 00:12:03,440
the same hashes

318
00:12:03,440 --> 00:12:07,200
or yield such tags so the yield such the

319
00:12:07,200 --> 00:12:08,560
rnn algorithm

320
00:12:08,560 --> 00:12:11,920
uses a lookup map that stores the eos

321
00:12:11,920 --> 00:12:14,000
attacks of all the data points

322
00:12:14,000 --> 00:12:17,760
in the keyword field it finds the rnn

323
00:12:17,760 --> 00:12:19,839
by examining points sharing overlapped

324
00:12:19,839 --> 00:12:23,519
yes attacks with a cure point

325
00:12:23,519 --> 00:12:25,600
now we are ready to solve the unsecured

326
00:12:25,600 --> 00:12:27,760
aknn problem

327
00:12:27,760 --> 00:12:29,839
we found in literature that we can solve

328
00:12:29,839 --> 00:12:31,760
a can m by reducing it

329
00:12:31,760 --> 00:12:34,720
to a sequence of crn sub problems for

330
00:12:34,720 --> 00:12:36,000
example of size s

331
00:12:36,000 --> 00:12:38,639
in this illustration we can then solve

332
00:12:38,639 --> 00:12:40,440
each sub-problem with

333
00:12:40,440 --> 00:12:43,440
ershcrnn this is a known idea

334
00:12:43,440 --> 00:12:46,000
but with no correctness proof so we

335
00:12:46,000 --> 00:12:49,519
provide one in our work

336
00:12:49,680 --> 00:12:52,320
so far all have described a for

337
00:12:52,320 --> 00:12:54,959
unsecured aknn solution

338
00:12:54,959 --> 00:12:57,839
so how to build a secure one the idea is

339
00:12:57,839 --> 00:13:00,079
that we can instantiate the unsecured

340
00:13:00,079 --> 00:13:01,040
lookup map

341
00:13:01,040 --> 00:13:03,920
with the secured version building block

342
00:13:03,920 --> 00:13:05,200
we call

343
00:13:05,200 --> 00:13:09,760
oblivious map with encryption or omap-e

344
00:13:09,760 --> 00:13:12,480
note that the existing secure definition

345
00:13:12,480 --> 00:13:13,680
for obliged map

346
00:13:13,680 --> 00:13:17,519
is not sufficient as it only provides

347
00:13:17,519 --> 00:13:20,880
a blue business namely having the access

348
00:13:20,880 --> 00:13:22,560
pattern

349
00:13:22,560 --> 00:13:25,920
but it does not provide data privacy

350
00:13:25,920 --> 00:13:29,839
in the presence of adaptive adversaries

351
00:13:29,839 --> 00:13:32,720
therefore we propose a secure definition

352
00:13:32,720 --> 00:13:33,839
for omape

353
00:13:33,839 --> 00:13:37,839
addressing those security properties

354
00:13:37,839 --> 00:13:40,800
we briefly discussed the syntax for omrp

355
00:13:40,800 --> 00:13:43,040
which is used in later discussion

356
00:13:43,040 --> 00:13:45,839
so omap is defined for message space by

357
00:13:45,839 --> 00:13:46,959
three algorithms

358
00:13:46,959 --> 00:13:50,160
key generation setup decryption and

359
00:13:50,160 --> 00:13:52,639
one interactive algorithm access that

360
00:13:52,639 --> 00:13:53,279
supports

361
00:13:53,279 --> 00:13:56,320
standard map operations including

362
00:13:56,320 --> 00:14:00,079
keyword lookup add and remove

363
00:14:00,079 --> 00:14:02,800
we show that we can build omap using

364
00:14:02,800 --> 00:14:03,839
oblivious map

365
00:14:03,839 --> 00:14:06,240
together with in cpa's metric encryption

366
00:14:06,240 --> 00:14:07,440
scheme

367
00:14:07,440 --> 00:14:10,000
there are two obvious map candidates one

368
00:14:10,000 --> 00:14:12,079
is oblivious avo3

369
00:14:12,079 --> 00:14:15,600
and the other is wsb skipless both can

370
00:14:15,600 --> 00:14:16,880
be built using

371
00:14:16,880 --> 00:14:19,839
non-recursive position based orm

372
00:14:19,839 --> 00:14:21,440
encrypting each blocks

373
00:14:21,440 --> 00:14:24,480
of the underlying oram and re-encrypting

374
00:14:24,480 --> 00:14:26,800
when writing back the blocks will

375
00:14:26,800 --> 00:14:28,000
satisfy our new

376
00:14:28,000 --> 00:14:32,000
security definition for omape

377
00:14:32,000 --> 00:14:35,440
the security of omape construction is

378
00:14:35,440 --> 00:14:37,600
stronger than struct encryption since it

379
00:14:37,600 --> 00:14:40,639
hides the type of the update operations

380
00:14:40,639 --> 00:14:43,279
as for the leakage part during the

381
00:14:43,279 --> 00:14:45,839
accessing stage for map operations

382
00:14:45,839 --> 00:14:49,120
the leakage is empty the setup leakage

383
00:14:49,120 --> 00:14:51,199
only contains public parameters of the

384
00:14:51,199 --> 00:14:53,199
oblivious map

385
00:14:53,199 --> 00:14:56,240
we can conclude that rmrp constructions

386
00:14:56,240 --> 00:15:00,480
height access query and volume pattern

387
00:15:00,480 --> 00:15:03,360
finally we are ready to build our ppak

388
00:15:03,360 --> 00:15:04,959
and construction

389
00:15:04,959 --> 00:15:07,839
let's take a look at the setup stage the

390
00:15:07,839 --> 00:15:09,920
client will first surround the omap

391
00:15:09,920 --> 00:15:13,440
key generation and get her secured key

392
00:15:13,440 --> 00:15:15,920
she will then run the compute parameters

393
00:15:15,920 --> 00:15:17,600
algorithm

394
00:15:17,600 --> 00:15:20,399
algorithm outputs else parameters and

395
00:15:20,399 --> 00:15:22,480
the keymax

396
00:15:22,480 --> 00:15:25,279
er such parameters will then be used to

397
00:15:25,279 --> 00:15:26,160
extract the

398
00:15:26,160 --> 00:15:29,920
yellow text and the tags are used

399
00:15:29,920 --> 00:15:34,479
to construct a map with her local files

400
00:15:35,120 --> 00:15:37,279
finally the client will run the omap

401
00:15:37,279 --> 00:15:38,320
setup stage

402
00:15:38,320 --> 00:15:40,480
and it will take such input her security

403
00:15:40,480 --> 00:15:41,839
key

404
00:15:41,839 --> 00:15:45,519
and the lookup map outputs the

405
00:15:45,519 --> 00:15:48,000
inquiry database that is stored on the

406
00:15:48,000 --> 00:15:50,480
server

407
00:15:51,759 --> 00:15:54,240
the search and updates algorithm of

408
00:15:54,240 --> 00:15:55,199
pbakin

409
00:15:55,199 --> 00:15:58,160
and construction are built using similar

410
00:15:58,160 --> 00:15:59,680
idea

411
00:15:59,680 --> 00:16:02,160
for search it will round the on my

412
00:16:02,160 --> 00:16:04,000
p-axis

413
00:16:04,000 --> 00:16:06,399
as a sub-protocol a fixed number of

414
00:16:06,399 --> 00:16:07,199
times

415
00:16:07,199 --> 00:16:11,040
to accomplish the akn search

416
00:16:11,040 --> 00:16:14,480
for update it also runs the on my p-axis

417
00:16:14,480 --> 00:16:16,959
a fixed number of times to update the

418
00:16:16,959 --> 00:16:20,160
underlining on my p

419
00:16:20,160 --> 00:16:23,120
since we have the construction ready we

420
00:16:23,120 --> 00:16:24,480
can now move to

421
00:16:24,480 --> 00:16:27,440
analyze the correctness and efficiency

422
00:16:27,440 --> 00:16:29,920
the practice part is not straightforward

423
00:16:29,920 --> 00:16:32,720
we provide a profound correctness and an

424
00:16:32,720 --> 00:16:34,480
upper bound on the size of returned

425
00:16:34,480 --> 00:16:36,720
results for efficiency

426
00:16:36,720 --> 00:16:38,880
and you can find more details of our

427
00:16:38,880 --> 00:16:40,079
constructions

428
00:16:40,079 --> 00:16:42,959
regarding the efficiency aspect in our

429
00:16:42,959 --> 00:16:44,800
paper

430
00:16:44,800 --> 00:16:47,440
we prove the security of our pvakn

431
00:16:47,440 --> 00:16:48,720
constructions

432
00:16:48,720 --> 00:16:51,279
relying on cpa of the underlying

433
00:16:51,279 --> 00:16:52,000
standard

434
00:16:52,000 --> 00:16:55,199
symmetric encryption scheme and adaptive

435
00:16:55,199 --> 00:16:56,160
obliviousness

436
00:16:56,160 --> 00:16:58,959
of the underlying oblivious map the

437
00:16:58,959 --> 00:17:00,399
leakage profile

438
00:17:00,399 --> 00:17:03,279
contains the setup leakage which are the

439
00:17:03,279 --> 00:17:06,880
public parameters of omapi.setup

440
00:17:06,880 --> 00:17:09,599
both search and update leaks the

441
00:17:09,599 --> 00:17:10,959
corresponding number of

442
00:17:10,959 --> 00:17:14,559
executions of omap access

443
00:17:14,559 --> 00:17:16,640
due to time limits i will briefly go

444
00:17:16,640 --> 00:17:18,400
through the implementation part

445
00:17:18,400 --> 00:17:20,799
we completed our ppaken protocol

446
00:17:20,799 --> 00:17:22,640
incorporating the er social library

447
00:17:22,640 --> 00:17:25,119
together with two new implementations of

448
00:17:25,119 --> 00:17:26,079
omap

449
00:17:26,079 --> 00:17:28,400
we tested and selected the else

450
00:17:28,400 --> 00:17:30,400
parameters on benchmark data sets

451
00:17:30,400 --> 00:17:32,320
tailored for akn search

452
00:17:32,320 --> 00:17:34,160
in addition we proposed the two

453
00:17:34,160 --> 00:17:35,679
optimization methods

454
00:17:35,679 --> 00:17:37,360
went through bachelor queries and the

455
00:17:37,360 --> 00:17:39,360
other through parallel axis

456
00:17:39,360 --> 00:17:41,440
we found through our experiments that ob

457
00:17:41,440 --> 00:17:43,440
skip list based construction performed

458
00:17:43,440 --> 00:17:44,400
much better

459
00:17:44,400 --> 00:17:46,960
than the oevo3 based ones and finally

460
00:17:46,960 --> 00:17:49,039
for a much larger database or smaller

461
00:17:49,039 --> 00:17:50,960
kmax the offset compared with the

462
00:17:50,960 --> 00:17:51,520
baseline

463
00:17:51,520 --> 00:17:54,080
increases since the row bandwidth cost

464
00:17:54,080 --> 00:17:54,880
is big o of

465
00:17:54,880 --> 00:17:58,400
kmax times log n square

466
00:17:59,200 --> 00:18:01,919
so this concludes my talk thank you for

467
00:18:01,919 --> 00:18:02,559
listening

468
00:18:02,559 --> 00:18:04,720
and if you have any question we can meet

469
00:18:04,720 --> 00:18:09,520
at the following poster session

