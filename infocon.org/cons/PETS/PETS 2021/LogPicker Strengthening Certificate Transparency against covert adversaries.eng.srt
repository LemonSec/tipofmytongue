1
00:00:00,080 --> 00:00:02,080
i'm alex and today i want to introduce

2
00:00:02,080 --> 00:00:03,280
you to our protocol

3
00:00:03,280 --> 00:00:05,680
lockpicker at the beginning let's take a

4
00:00:05,680 --> 00:00:06,319
short

5
00:00:06,319 --> 00:00:08,639
look on how secure communication works

6
00:00:08,639 --> 00:00:10,240
on the web nowadays

7
00:00:10,240 --> 00:00:14,160
so in the year 2020 in january about 95

8
00:00:14,160 --> 00:00:16,079
of all page loads in the browser chrome

9
00:00:16,079 --> 00:00:18,320
were served using https

10
00:00:18,320 --> 00:00:20,960
and the certificates needed for https

11
00:00:20,960 --> 00:00:23,199
are created by certificate authorities

12
00:00:23,199 --> 00:00:26,400
short cas and they are needed for

13
00:00:26,400 --> 00:00:30,960
binding a public key to a domain so

14
00:00:30,960 --> 00:00:33,760
the procedure on how the certificates

15
00:00:33,760 --> 00:00:34,079
are

16
00:00:34,079 --> 00:00:37,120
issued and what exactly the requirements

17
00:00:37,120 --> 00:00:38,719
are for the acceptance of the

18
00:00:38,719 --> 00:00:40,160
certificates by browsers

19
00:00:40,160 --> 00:00:43,040
are defined in the ca browser forum

20
00:00:43,040 --> 00:00:44,960
consequently the number of illicit

21
00:00:44,960 --> 00:00:47,120
certificates creation is increasing

22
00:00:47,120 --> 00:00:48,800
so just here to give you a short

23
00:00:48,800 --> 00:00:51,440
overview we had for example wusan

24
00:00:51,440 --> 00:00:54,559
who had several issues from back dating

25
00:00:54,559 --> 00:00:57,199
certificates or to not reporting known

26
00:00:57,199 --> 00:00:58,320
incidents

27
00:00:58,320 --> 00:01:00,960
or took trust who issued intermediate

28
00:01:00,960 --> 00:01:02,000
certificates that

29
00:01:02,000 --> 00:01:04,000
normally should be regular ssl

30
00:01:04,000 --> 00:01:06,000
certificates which is a big problem

31
00:01:06,000 --> 00:01:08,560
or the malaysian registered and they

32
00:01:08,560 --> 00:01:11,040
issued certificates with weaker keys

33
00:01:11,040 --> 00:01:14,000
so however most of this incident um

34
00:01:14,000 --> 00:01:16,240
happened due to the violations of the

35
00:01:16,240 --> 00:01:17,200
browser firm

36
00:01:17,200 --> 00:01:20,320
um guidelines or due to security

37
00:01:20,320 --> 00:01:22,400
vulnerabilities or technical issues

38
00:01:22,400 --> 00:01:25,360
this means that attacks were probably

39
00:01:25,360 --> 00:01:27,040
not intended

40
00:01:27,040 --> 00:01:29,680
however let's assume a sufficient strong

41
00:01:29,680 --> 00:01:30,479
attacker

42
00:01:30,479 --> 00:01:32,880
who is able to misuse the web pick i for

43
00:01:32,880 --> 00:01:35,439
let's say civilians reasons

44
00:01:35,439 --> 00:01:37,360
this kind of attack is known https

45
00:01:37,360 --> 00:01:38,479
interception

46
00:01:38,479 --> 00:01:40,799
and for this the attacker must obtain

47
00:01:40,799 --> 00:01:42,000
something that we call the rogue

48
00:01:42,000 --> 00:01:42,799
certificate

49
00:01:42,799 --> 00:01:44,720
which is a certificate for a domain that

50
00:01:44,720 --> 00:01:46,720
the attacker does not own

51
00:01:46,720 --> 00:01:48,560
and several attempts for https

52
00:01:48,560 --> 00:01:51,520
interceptions were already documented

53
00:01:51,520 --> 00:01:53,759
um especially for attempts by

54
00:01:53,759 --> 00:01:54,640
governments

55
00:01:54,640 --> 00:01:56,560
with let's say a weaker commitment to

56
00:01:56,560 --> 00:01:58,320
democracy

57
00:01:58,320 --> 00:02:00,159
so the newest case is for example

58
00:02:00,159 --> 00:02:01,840
maurizio's

59
00:02:01,840 --> 00:02:03,520
google and mozilla took action to

60
00:02:03,520 --> 00:02:05,520
protect the browser's users against this

61
00:02:05,520 --> 00:02:06,079
attack

62
00:02:06,079 --> 00:02:08,479
but we wonder why should a strong

63
00:02:08,479 --> 00:02:09,840
attacker like a government

64
00:02:09,840 --> 00:02:13,440
stop here let's get um

65
00:02:13,440 --> 00:02:15,680
a closer look into the details of this

66
00:02:15,680 --> 00:02:16,959
attack scenario

67
00:02:16,959 --> 00:02:20,239
so in 2007 oman and lindell introduced

68
00:02:20,239 --> 00:02:24,160
um the covert adversary attacking model

69
00:02:24,160 --> 00:02:25,680
and the main characteristic of this

70
00:02:25,680 --> 00:02:27,440
attacker is that he

71
00:02:27,440 --> 00:02:30,319
only attacks if he can stay undetected

72
00:02:30,319 --> 00:02:32,160
with his attack even after the attack is

73
00:02:32,160 --> 00:02:33,280
finished

74
00:02:33,280 --> 00:02:36,720
and sogon and stum introduced in 2010

75
00:02:36,720 --> 00:02:38,239
a suitable attack scenario which is

76
00:02:38,239 --> 00:02:39,519
called the compelled certificate

77
00:02:39,519 --> 00:02:40,400
creation

78
00:02:40,400 --> 00:02:42,640
for this scenario it needs a strong

79
00:02:42,640 --> 00:02:44,640
attacker who is able to compel

80
00:02:44,640 --> 00:02:48,319
sca to omit the domain ownership check

81
00:02:48,319 --> 00:02:49,840
and this way the attacker can obtain a

82
00:02:49,840 --> 00:02:51,360
rogue certificate

83
00:02:51,360 --> 00:02:53,680
so our scenario means that we have an

84
00:02:53,680 --> 00:02:55,599
attacker who succeeds in creating a

85
00:02:55,599 --> 00:02:56,879
rogue certificate

86
00:02:56,879 --> 00:02:59,040
that remains unnoticed by its legitimate

87
00:02:59,040 --> 00:03:01,440
domain owner

88
00:03:01,440 --> 00:03:04,319
well the mitigation attempt against this

89
00:03:04,319 --> 00:03:06,400
kind of malicious cas is certificate

90
00:03:06,400 --> 00:03:07,599
transparency

91
00:03:07,599 --> 00:03:09,599
and the pre-work on it began by lori

92
00:03:09,599 --> 00:03:10,640
kaspar langlin

93
00:03:10,640 --> 00:03:14,239
about 2012. so the goal was to make

94
00:03:14,239 --> 00:03:16,640
illicit certificate creations impossible

95
00:03:16,640 --> 00:03:19,360
without the domain owner's knowledge and

96
00:03:19,360 --> 00:03:21,920
this was achieved mainly by 460as

97
00:03:21,920 --> 00:03:24,400
to publish their certificate issuances

98
00:03:24,400 --> 00:03:27,280
in public locks

99
00:03:27,440 --> 00:03:29,519
so just a short primer on the protocol

100
00:03:29,519 --> 00:03:31,280
of certificate transparency at the

101
00:03:31,280 --> 00:03:32,799
bottom we have the ca

102
00:03:32,799 --> 00:03:34,560
who wants its certificate to be accepted

103
00:03:34,560 --> 00:03:36,480
by a city capable browser

104
00:03:36,480 --> 00:03:39,360
so it needs a proof that it submitted

105
00:03:39,360 --> 00:03:40,480
its certificate

106
00:03:40,480 --> 00:03:43,280
into a public city lock that means it

107
00:03:43,280 --> 00:03:44,959
sends its certificate this

108
00:03:44,959 --> 00:03:47,599
red thing here to any favorable city

109
00:03:47,599 --> 00:03:48,640
lock

110
00:03:48,640 --> 00:03:51,599
um trusted by the target browser and the

111
00:03:51,599 --> 00:03:53,280
ct lock must then include the

112
00:03:53,280 --> 00:03:55,519
certificate into its merkle tree without

113
00:03:55,519 --> 00:03:57,680
the mmd which is the minimum merge delay

114
00:03:57,680 --> 00:03:58,159
it's

115
00:03:58,159 --> 00:04:01,439
about 24 hours however the lock

116
00:04:01,439 --> 00:04:03,519
and the ct lock responds immediately

117
00:04:03,519 --> 00:04:04,799
with an sct

118
00:04:04,799 --> 00:04:07,280
which is a signed promise on i will

119
00:04:07,280 --> 00:04:09,200
include your certificate into my merkle

120
00:04:09,200 --> 00:04:11,280
tree in the next 24 hours

121
00:04:11,280 --> 00:04:13,680
and the ca can now take the certificate

122
00:04:13,680 --> 00:04:15,360
which is newly created

123
00:04:15,360 --> 00:04:17,680
and accompanied by the sct log sent it

124
00:04:17,680 --> 00:04:19,120
to the domain owner

125
00:04:19,120 --> 00:04:21,120
the domain owner can then deploy her

126
00:04:21,120 --> 00:04:22,479
website or whatever

127
00:04:22,479 --> 00:04:26,400
with https certificate transparency

128
00:04:26,400 --> 00:04:28,080
introduces two new

129
00:04:28,080 --> 00:04:30,240
entities into the webikai first are the

130
00:04:30,240 --> 00:04:32,880
auditors mostly third party

131
00:04:32,880 --> 00:04:36,080
and they check whether ct logs comply

132
00:04:36,080 --> 00:04:39,280
with this sct the site promise and some

133
00:04:39,280 --> 00:04:40,960
ca browser

134
00:04:40,960 --> 00:04:43,440
forum requirements on city locks it

135
00:04:43,440 --> 00:04:44,320
means

136
00:04:44,320 --> 00:04:45,919
this auditing check is domain

137
00:04:45,919 --> 00:04:48,160
independent the other party are the

138
00:04:48,160 --> 00:04:49,919
monitors at the bottom

139
00:04:49,919 --> 00:04:52,800
in this picture and the bot the monitors

140
00:04:52,800 --> 00:04:53,680
mainly

141
00:04:53,680 --> 00:04:56,240
check for a specific domain whether the

142
00:04:56,240 --> 00:04:56,800
ca

143
00:04:56,800 --> 00:04:59,280
always did the domain ownership check so

144
00:04:59,280 --> 00:05:00,400
that means

145
00:05:00,400 --> 00:05:04,000
only valid certificate issuances

146
00:05:04,000 --> 00:05:07,120
are has been locked in the ct logs so

147
00:05:07,120 --> 00:05:08,800
this is domain dependent

148
00:05:08,800 --> 00:05:11,039
and however domain owners must manually

149
00:05:11,039 --> 00:05:12,720
opt into monitoring so it's

150
00:05:12,720 --> 00:05:16,560
mostly used for high value domains

151
00:05:16,800 --> 00:05:18,880
however we think that certificate

152
00:05:18,880 --> 00:05:20,800
transparency is still vulnerable

153
00:05:20,800 --> 00:05:23,919
and at the moment each ct lock that is

154
00:05:23,919 --> 00:05:25,280
trusted by the bro

155
00:05:25,280 --> 00:05:28,479
by the chrome browser is also belongs to

156
00:05:28,479 --> 00:05:29,840
a ca vendor

157
00:05:29,840 --> 00:05:32,400
so we assume that attacking a ct lock is

158
00:05:32,400 --> 00:05:35,360
equal to attacking sca

159
00:05:35,360 --> 00:05:38,720
and the first compromise of a ct lock

160
00:05:38,720 --> 00:05:40,960
happened in 2020 due to assault

161
00:05:40,960 --> 00:05:42,560
vulnerability i think

162
00:05:42,560 --> 00:05:44,880
oh and well fun fact yesterday and i

163
00:05:44,880 --> 00:05:46,560
heard about another ct log

164
00:05:46,560 --> 00:05:49,120
issue which happened due to a random bit

165
00:05:49,120 --> 00:05:50,479
flip i think

166
00:05:50,479 --> 00:05:52,880
well so we assume a collaboration attack

167
00:05:52,880 --> 00:05:53,520
by a

168
00:05:53,520 --> 00:05:56,960
malicious ct log and a malicious ca

169
00:05:56,960 --> 00:05:59,120
to be realistic and this scenario

170
00:05:59,120 --> 00:06:01,120
already was considered in the city

171
00:06:01,120 --> 00:06:02,560
threat model document

172
00:06:02,560 --> 00:06:05,280
to be an open problem this year i'll

173
00:06:05,280 --> 00:06:07,280
introduced a

174
00:06:07,280 --> 00:06:10,160
low probability but high impact scenario

175
00:06:10,160 --> 00:06:12,319
which is mainly motivated by political

176
00:06:12,319 --> 00:06:14,639
or commercial or social reasons

177
00:06:14,639 --> 00:06:16,800
which is kind of the same attack we're

178
00:06:16,800 --> 00:06:18,400
talking about now

179
00:06:18,400 --> 00:06:20,960
and for this kind of compelled

180
00:06:20,960 --> 00:06:22,880
certificate creation attack

181
00:06:22,880 --> 00:06:24,800
and that malicious lock must create a

182
00:06:24,800 --> 00:06:27,680
split view attack

183
00:06:27,680 --> 00:06:31,919
a short prime on split views the lock

184
00:06:31,919 --> 00:06:34,240
deploys two different views the first

185
00:06:34,240 --> 00:06:36,400
one is only served to monitors which you

186
00:06:36,400 --> 00:06:37,199
can see here

187
00:06:37,199 --> 00:06:39,840
on this picture and the red certificate

188
00:06:39,840 --> 00:06:41,680
which the ca created previously

189
00:06:41,680 --> 00:06:44,000
is not included in this view so the

190
00:06:44,000 --> 00:06:46,160
domain owner won't detect

191
00:06:46,160 --> 00:06:47,680
a rogue certificate so it remains

192
00:06:47,680 --> 00:06:50,240
undetected for him

193
00:06:50,240 --> 00:06:52,720
the other view um is served only to

194
00:06:52,720 --> 00:06:53,680
auditors

195
00:06:53,680 --> 00:06:55,280
and as you can see on the picture it

196
00:06:55,280 --> 00:06:57,360
includes the road certificate

197
00:06:57,360 --> 00:07:00,240
and this means that it's not the problem

198
00:07:00,240 --> 00:07:02,000
for auditors because they are unaware

199
00:07:02,000 --> 00:07:05,199
of which domain belongs to who so

200
00:07:05,199 --> 00:07:07,440
they won't see the violation of the ca

201
00:07:07,440 --> 00:07:09,840
browser forum requirements

202
00:07:09,840 --> 00:07:13,440
and this attack remains also undetected

203
00:07:13,440 --> 00:07:16,319
a mitigation attempt for this attack is

204
00:07:16,319 --> 00:07:18,720
gossip certificate transparency gossip

205
00:07:18,720 --> 00:07:21,919
and it kind of involves each participant

206
00:07:21,919 --> 00:07:23,120
of the webpicker eye

207
00:07:23,120 --> 00:07:25,840
into this auditing process process and

208
00:07:25,840 --> 00:07:27,520
of the lock and charge

209
00:07:27,520 --> 00:07:30,000
and it's something like web servers

210
00:07:30,000 --> 00:07:32,160
talks to auditors and

211
00:07:32,160 --> 00:07:34,560
clients talks to web servers and clients

212
00:07:34,560 --> 00:07:35,840
talk to auditors

213
00:07:35,840 --> 00:07:37,840
and breach their browser history by the

214
00:07:37,840 --> 00:07:39,360
way and

215
00:07:39,360 --> 00:07:41,039
kind of everyone is talking to each

216
00:07:41,039 --> 00:07:42,479
other i just kind of lost the track

217
00:07:42,479 --> 00:07:43,440
about that

218
00:07:43,440 --> 00:07:45,840
so due to the complexity and many other

219
00:07:45,840 --> 00:07:48,000
reasons gossip is still a draft since i

220
00:07:48,000 --> 00:07:49,440
think 2015

221
00:07:49,440 --> 00:07:53,759
and will probably stay so anyway

222
00:07:53,759 --> 00:07:55,199
why not solving this issue by

223
00:07:55,199 --> 00:07:57,360
introducing some new trusted entities

224
00:07:57,360 --> 00:07:58,080
into the replica

225
00:07:58,080 --> 00:08:01,599
eye well because it won't help as

226
00:08:01,599 --> 00:08:04,319
already warned by one of city's inventor

227
00:08:04,319 --> 00:08:06,720
ben laurie

228
00:08:06,720 --> 00:08:09,840
so instead our work proposed

229
00:08:09,840 --> 00:08:12,879
another approach the protocol which we

230
00:08:12,879 --> 00:08:14,720
called lockpicker extends

231
00:08:14,720 --> 00:08:16,400
the current certificate transparency

232
00:08:16,400 --> 00:08:18,800
procedure by mainly involving

233
00:08:18,800 --> 00:08:20,639
more witnesses into the certificate

234
00:08:20,639 --> 00:08:22,000
issuance process

235
00:08:22,000 --> 00:08:25,120
and allowed automated target auditing of

236
00:08:25,120 --> 00:08:25,440
the

237
00:08:25,440 --> 00:08:29,199
city locks let's take a short look on

238
00:08:29,199 --> 00:08:31,280
the decelerator for our protocol

239
00:08:31,280 --> 00:08:33,760
so we have security and design goals the

240
00:08:33,760 --> 00:08:35,440
security goals we want to mitigate

241
00:08:35,440 --> 00:08:36,880
collaboration attacks which we talked

242
00:08:36,880 --> 00:08:37,279
about

243
00:08:37,279 --> 00:08:41,120
earlier so um and since we support ct's

244
00:08:41,120 --> 00:08:41,760
approach

245
00:08:41,760 --> 00:08:44,240
for making certificate issuance publicly

246
00:08:44,240 --> 00:08:44,959
visible

247
00:08:44,959 --> 00:08:47,519
we want to enhance this approach by

248
00:08:47,519 --> 00:08:50,240
mostly involving more witnesses into it

249
00:08:50,240 --> 00:08:52,480
and the witnesses should also be able to

250
00:08:52,480 --> 00:08:55,120
prove their participation in this

251
00:08:55,120 --> 00:08:57,440
in the certificate issuance and in

252
00:08:57,440 --> 00:08:58,560
addition we want

253
00:08:58,560 --> 00:09:01,440
to try to involve monitors earlier into

254
00:09:01,440 --> 00:09:01,760
the

255
00:09:01,760 --> 00:09:05,040
certificate issuance process well

256
00:09:05,040 --> 00:09:08,320
um but to get back to the design goes we

257
00:09:08,320 --> 00:09:09,279
don't want um

258
00:09:09,279 --> 00:09:11,120
any user data to be involved in this

259
00:09:11,120 --> 00:09:12,320
procedure

260
00:09:12,320 --> 00:09:14,399
and the same is for web servers because

261
00:09:14,399 --> 00:09:16,000
they think that web servers tend to be

262
00:09:16,000 --> 00:09:17,200
outdated so

263
00:09:17,200 --> 00:09:18,959
they shouldn't be involved in any kind

264
00:09:18,959 --> 00:09:21,040
of web pki changes

265
00:09:21,040 --> 00:09:23,279
and in addition we believe that

266
00:09:23,279 --> 00:09:24,959
incremental deployability

267
00:09:24,959 --> 00:09:27,600
by um certificate transparency was one

268
00:09:27,600 --> 00:09:28,640
of the most

269
00:09:28,640 --> 00:09:31,279
of the successes of city and we want to

270
00:09:31,279 --> 00:09:32,959
follow this approach as well

271
00:09:32,959 --> 00:09:35,360
and at last we don't want to introduce

272
00:09:35,360 --> 00:09:36,959
any new trusted entities into the

273
00:09:36,959 --> 00:09:38,640
webpicker because we think it's quite

274
00:09:38,640 --> 00:09:39,279
complex

275
00:09:39,279 --> 00:09:43,360
already okay um to give you a very rough

276
00:09:43,360 --> 00:09:44,560
overview

277
00:09:44,560 --> 00:09:46,399
on our protocol and without going too

278
00:09:46,399 --> 00:09:47,839
much into detail

279
00:09:47,839 --> 00:09:50,080
this is how it looks like so at the

280
00:09:50,080 --> 00:09:52,000
bottom we still have the ca who creates

281
00:09:52,000 --> 00:09:52,320
the

282
00:09:52,320 --> 00:09:54,720
certificates and but this time it does

283
00:09:54,720 --> 00:09:56,959
not submit a certificate to what to any

284
00:09:56,959 --> 00:09:58,320
favorable city lock

285
00:09:58,320 --> 00:10:01,200
but instead to a pool of locks many

286
00:10:01,200 --> 00:10:02,160
locks

287
00:10:02,160 --> 00:10:05,279
and this pool of locks is formed

288
00:10:05,279 --> 00:10:08,160
based on the target browser's trusted ct

289
00:10:08,160 --> 00:10:10,640
list which already exists at the moment

290
00:10:10,640 --> 00:10:13,200
so this pool collaboratively selects a

291
00:10:13,200 --> 00:10:15,519
lock at random among them

292
00:10:15,519 --> 00:10:18,000
and um the selections outcome isn't

293
00:10:18,000 --> 00:10:19,120
predictable as

294
00:10:19,120 --> 00:10:21,519
as long as at least one honest lock was

295
00:10:21,519 --> 00:10:23,600
among them

296
00:10:23,600 --> 00:10:26,240
um on commit each of those locks from

297
00:10:26,240 --> 00:10:26,880
the pool

298
00:10:26,880 --> 00:10:28,560
signs the proof that is collected in

299
00:10:28,560 --> 00:10:30,720
kind of a multi signatures

300
00:10:30,720 --> 00:10:33,360
and we call this proof the lpp the

301
00:10:33,360 --> 00:10:35,360
lockpicker proof and it can be used to

302
00:10:35,360 --> 00:10:37,839
prove the participation on the execution

303
00:10:37,839 --> 00:10:41,279
of lockpicker for one specific domain

304
00:10:41,279 --> 00:10:44,800
well during execution at multiple points

305
00:10:44,800 --> 00:10:47,839
at least one honest lock and can notify

306
00:10:47,839 --> 00:10:48,720
the monitor

307
00:10:48,720 --> 00:10:50,880
about the current execution for its

308
00:10:50,880 --> 00:10:52,160
domain

309
00:10:52,160 --> 00:10:54,079
so the monitor is involved earlier into

310
00:10:54,079 --> 00:10:55,680
the issuance process

311
00:10:55,680 --> 00:10:57,760
and the lpp can be attached to the

312
00:10:57,760 --> 00:10:58,720
certificate

313
00:10:58,720 --> 00:11:00,560
the same way as it's the case with the

314
00:11:00,560 --> 00:11:02,560
sct nowadays

315
00:11:02,560 --> 00:11:04,640
so lockpicker capable browser can

316
00:11:04,640 --> 00:11:05,760
enforce

317
00:11:05,760 --> 00:11:08,160
um the use of lockpicker by enforcing

318
00:11:08,160 --> 00:11:09,519
each certificate to be

319
00:11:09,519 --> 00:11:13,279
accompanied by an lpp and after the mmd

320
00:11:13,279 --> 00:11:16,480
this 24 hours promise each witness can

321
00:11:16,480 --> 00:11:19,360
which are also ct locks in the pool can

322
00:11:19,360 --> 00:11:21,680
automatically audited the lock-in charge

323
00:11:21,680 --> 00:11:25,040
for logging the certificate

324
00:11:25,279 --> 00:11:27,120
well let's take another look into the

325
00:11:27,120 --> 00:11:29,600
achievements

326
00:11:29,600 --> 00:11:31,920
in our security goals the attacker

327
00:11:31,920 --> 00:11:33,440
cannot forge the selection

328
00:11:33,440 --> 00:11:35,839
of the malicious lock which it wants to

329
00:11:35,839 --> 00:11:38,160
collaborate to because it's random

330
00:11:38,160 --> 00:11:41,440
and participants of the log pool serves

331
00:11:41,440 --> 00:11:42,399
as additional

332
00:11:42,399 --> 00:11:44,560
witnesses into the certificate issuance

333
00:11:44,560 --> 00:11:46,959
process

334
00:11:47,120 --> 00:11:49,440
each witness signs the outcome of this

335
00:11:49,440 --> 00:11:51,920
lockpicker execution

336
00:11:51,920 --> 00:11:54,240
and during the execution the monitor can

337
00:11:54,240 --> 00:11:56,240
be notified about the

338
00:11:56,240 --> 00:11:58,800
certificate issuance attempt no matter

339
00:11:58,800 --> 00:12:01,519
on whether it worked or not

340
00:12:01,519 --> 00:12:03,600
the user's private data has no part in

341
00:12:03,600 --> 00:12:04,639
our protocol

342
00:12:04,639 --> 00:12:06,720
and the ser the same is also for web

343
00:12:06,720 --> 00:12:08,639
servers they are not involved by this

344
00:12:08,639 --> 00:12:11,839
kind of changes

345
00:12:11,839 --> 00:12:14,560
lockpickers mitigation has does not need

346
00:12:14,560 --> 00:12:16,880
kind of a flag day for the changeover

347
00:12:16,880 --> 00:12:19,360
it's only for the web servers the next

348
00:12:19,360 --> 00:12:20,160
time they will

349
00:12:20,160 --> 00:12:22,160
deploy a new certificate they will get a

350
00:12:22,160 --> 00:12:23,200
lockpicker

351
00:12:23,200 --> 00:12:26,320
capable certificate

352
00:12:26,320 --> 00:12:29,279
and at last lockpicker only reuses the

353
00:12:29,279 --> 00:12:30,079
current

354
00:12:30,079 --> 00:12:32,320
entities of the webikai which are the

355
00:12:32,320 --> 00:12:33,440
cas

356
00:12:33,440 --> 00:12:35,839
the ct locks which at the same time are

357
00:12:35,839 --> 00:12:37,360
the auditors

358
00:12:37,360 --> 00:12:40,720
and the monitor and in addition

359
00:12:40,720 --> 00:12:43,519
lockpicker assumes each participant in

360
00:12:43,519 --> 00:12:44,160
the

361
00:12:44,160 --> 00:12:46,959
protocol's execution to be byzantine but

362
00:12:46,959 --> 00:12:48,639
one which we call the one honest block

363
00:12:48,639 --> 00:12:51,120
assumption

364
00:12:51,519 --> 00:12:53,519
so um to the additional paper

365
00:12:53,519 --> 00:12:54,560
contributions

366
00:12:54,560 --> 00:12:56,720
lockpicker uses a lot of crypto which is

367
00:12:56,720 --> 00:12:58,959
kind of this multi-signatures

368
00:12:58,959 --> 00:13:01,760
or a distributed randomness procedure

369
00:13:01,760 --> 00:13:03,600
and these are explained further in the

370
00:13:03,600 --> 00:13:05,279
paper

371
00:13:05,279 --> 00:13:07,920
in addition it explains some details on

372
00:13:07,920 --> 00:13:08,880
our security

373
00:13:08,880 --> 00:13:12,720
and um design goals of the protocol

374
00:13:12,720 --> 00:13:14,560
then we analyze the overall correctness

375
00:13:14,560 --> 00:13:16,480
probability of the web pick i

376
00:13:16,480 --> 00:13:18,480
first what we called the lock

377
00:13:18,480 --> 00:13:20,160
picker-based pki

378
00:13:20,160 --> 00:13:22,800
and then we compare it to the ca based

379
00:13:22,800 --> 00:13:23,519
pickeris

380
00:13:23,519 --> 00:13:25,839
correctness probability ct-based and the

381
00:13:25,839 --> 00:13:28,560
gossip-based pki

382
00:13:28,560 --> 00:13:31,279
further we discuss how the current ct

383
00:13:31,279 --> 00:13:32,959
policies can be adopted

384
00:13:32,959 --> 00:13:35,920
to lockpicker and which kind of changes

385
00:13:35,920 --> 00:13:37,120
are needed

386
00:13:37,120 --> 00:13:39,199
and at last we deployed the prototype

387
00:13:39,199 --> 00:13:41,440
simulation of the lockpicker protocol

388
00:13:41,440 --> 00:13:43,680
and it shows that lockpicker is scalable

389
00:13:43,680 --> 00:13:44,720
and can handle the

390
00:13:44,720 --> 00:13:48,720
current load of the web

391
00:13:48,720 --> 00:13:51,519
and of course we have a lot of work to

392
00:13:51,519 --> 00:13:52,240
do now

393
00:13:52,240 --> 00:13:54,560
so we need first a procedure on how

394
00:13:54,560 --> 00:13:55,839
exactly can we

395
00:13:55,839 --> 00:13:57,680
include the monitors during the lock

396
00:13:57,680 --> 00:13:59,839
picker execution

397
00:13:59,839 --> 00:14:02,240
and then we need lockpicker clients that

398
00:14:02,240 --> 00:14:04,560
um also able to perform this interlock

399
00:14:04,560 --> 00:14:05,279
auditing

400
00:14:05,279 --> 00:14:07,920
which is this automated auditing by the

401
00:14:07,920 --> 00:14:10,240
locks of the pool

402
00:14:10,240 --> 00:14:12,720
and then at several parts of the

403
00:14:12,720 --> 00:14:13,760
protocol and

404
00:14:13,760 --> 00:14:16,399
protocol aborts can occur for example

405
00:14:16,399 --> 00:14:16,959
because

406
00:14:16,959 --> 00:14:18,800
one of the locks in the pool detect

407
00:14:18,800 --> 00:14:20,160
another byzantine lock

408
00:14:20,160 --> 00:14:22,320
which is for example malicious and the

409
00:14:22,320 --> 00:14:24,160
protocol at the moment is supported so

410
00:14:24,160 --> 00:14:26,000
we have to think about how can we handle

411
00:14:26,000 --> 00:14:28,160
this kind of protocol aborts or

412
00:14:28,160 --> 00:14:31,600
maybe how can we reduce them either

413
00:14:31,600 --> 00:14:33,839
and at the end we all know that

414
00:14:33,839 --> 00:14:35,519
certificate revocation is still a

415
00:14:35,519 --> 00:14:37,279
nightmare on the web so

416
00:14:37,279 --> 00:14:39,360
maybe it's anyhow possible to include

417
00:14:39,360 --> 00:14:41,120
certificate revocation into the lock

418
00:14:41,120 --> 00:14:43,360
picker procedures

419
00:14:43,360 --> 00:14:45,680
well thank you for listening and i'm

420
00:14:45,680 --> 00:14:49,439
open to your questions now

