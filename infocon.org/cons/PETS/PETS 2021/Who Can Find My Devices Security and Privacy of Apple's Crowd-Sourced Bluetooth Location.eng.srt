1
00:00:00,960 --> 00:00:03,199
hello and welcome to our talk on who can

2
00:00:03,199 --> 00:00:04,880
find my devices

3
00:00:04,880 --> 00:00:06,879
in this talk i will present our results

4
00:00:06,879 --> 00:00:08,800
from analyzing apple's crowdsource

5
00:00:08,800 --> 00:00:10,719
bluetooth-based location tracking system

6
00:00:10,719 --> 00:00:11,440
called

7
00:00:11,440 --> 00:00:14,080
find my this was a collaborative effort

8
00:00:14,080 --> 00:00:16,400
between my colleagues alex tim matthias

9
00:00:16,400 --> 00:00:18,160
and myself

10
00:00:18,160 --> 00:00:19,920
who doesn't know the problem you left

11
00:00:19,920 --> 00:00:21,680
your smartphone somewhere you cannot

12
00:00:21,680 --> 00:00:22,960
find your keys

13
00:00:22,960 --> 00:00:24,560
or you don't know whether you left your

14
00:00:24,560 --> 00:00:26,160
notebook at work or whether it was

15
00:00:26,160 --> 00:00:29,119
stolen on the subway

16
00:00:29,119 --> 00:00:32,079
now you can either search by yourself or

17
00:00:32,079 --> 00:00:34,399
ask friends for help

18
00:00:34,399 --> 00:00:37,520
or you could ask a global crowd for help

19
00:00:37,520 --> 00:00:39,840
but what we are really interested in is

20
00:00:39,840 --> 00:00:41,600
offline finding

21
00:00:41,600 --> 00:00:43,920
and what if we could locate every object

22
00:00:43,920 --> 00:00:45,600
in the physical world

23
00:00:45,600 --> 00:00:48,000
if we are authorized and even if the

24
00:00:48,000 --> 00:00:49,680
object is offline

25
00:00:49,680 --> 00:00:51,280
this would be another step of the

26
00:00:51,280 --> 00:00:54,719
digital transformation in our society

27
00:00:54,719 --> 00:00:56,800
offline funding already exists in

28
00:00:56,800 --> 00:00:58,559
proprietary systems

29
00:00:58,559 --> 00:01:00,320
apple's find my network for example

30
00:01:00,320 --> 00:01:02,960
claims one app to find it all

31
00:01:02,960 --> 00:01:05,360
specifically apple's system is able to

32
00:01:05,360 --> 00:01:07,040
locate devices that are owned by the

33
00:01:07,040 --> 00:01:08,240
same user

34
00:01:08,240 --> 00:01:10,560
and since 2019 it also works when

35
00:01:10,560 --> 00:01:13,760
devices are offline

36
00:01:13,760 --> 00:01:16,000
to implement this apple uses hundreds of

37
00:01:16,000 --> 00:01:18,000
millions of crowdsourced iphones across

38
00:01:18,000 --> 00:01:19,040
the globe

39
00:01:19,040 --> 00:01:21,439
and last but not least apple promises

40
00:01:21,439 --> 00:01:23,680
that the whole system is secure

41
00:01:23,680 --> 00:01:27,840
and especially privacy preserving

42
00:01:28,080 --> 00:01:29,439
now let's have a look at apple's

43
00:01:29,439 --> 00:01:32,079
specific claims

44
00:01:32,079 --> 00:01:36,799
for once we can find apple devices

45
00:01:36,799 --> 00:01:39,520
apple promises that it works for offline

46
00:01:39,520 --> 00:01:40,799
devices

47
00:01:40,799 --> 00:01:42,720
and that the entire apple ecosystem

48
00:01:42,720 --> 00:01:45,280
helps with finding

49
00:01:45,280 --> 00:01:48,320
and finally everything is supposed to be

50
00:01:48,320 --> 00:01:48,960
secure

51
00:01:48,960 --> 00:01:51,439
private and anonymous and even apple

52
00:01:51,439 --> 00:01:53,360
itself does not have access to any

53
00:01:53,360 --> 00:01:56,399
location information

54
00:01:56,399 --> 00:01:58,320
the privacy implications of such a

55
00:01:58,320 --> 00:01:59,759
system are enormous

56
00:01:59,759 --> 00:02:01,520
and apple's promises sound too good to

57
00:02:01,520 --> 00:02:02,960
be true

58
00:02:02,960 --> 00:02:05,439
so we decided to analyze the security

59
00:02:05,439 --> 00:02:09,840
and privacy of apple's find my system

60
00:02:10,560 --> 00:02:12,160
in the first step i will present how

61
00:02:12,160 --> 00:02:14,480
apple's offline finding works

62
00:02:14,480 --> 00:02:16,879
then i will derive the possible risks

63
00:02:16,879 --> 00:02:18,400
and then present the solutions that

64
00:02:18,400 --> 00:02:20,720
apple implemented

65
00:02:20,720 --> 00:02:22,640
our knowledge comes from a comprehensive

66
00:02:22,640 --> 00:02:24,239
reverse engineering campaign

67
00:02:24,239 --> 00:02:26,160
as well as a few documents that apple

68
00:02:26,160 --> 00:02:29,120
shares with the public

69
00:02:29,120 --> 00:02:31,120
so in this example we want to locate

70
00:02:31,120 --> 00:02:32,319
this notebook

71
00:02:32,319 --> 00:02:34,160
during normal operation it is connected

72
00:02:34,160 --> 00:02:35,440
to the internet

73
00:02:35,440 --> 00:02:36,959
and therefore it is able to send

74
00:02:36,959 --> 00:02:38,879
location reports to apple's icloud

75
00:02:38,879 --> 00:02:40,400
infrastructure directly

76
00:02:40,400 --> 00:02:42,160
which we can then query from a second

77
00:02:42,160 --> 00:02:44,640
device

78
00:02:45,760 --> 00:02:47,280
if the notebook loses internet

79
00:02:47,280 --> 00:02:49,440
connectivity it can no longer report its

80
00:02:49,440 --> 00:02:50,720
own location

81
00:02:50,720 --> 00:02:52,720
but instead it starts emitting special

82
00:02:52,720 --> 00:02:54,640
bluetooth advertisements

83
00:02:54,640 --> 00:02:56,319
and this even happens if the device is

84
00:02:56,319 --> 00:02:58,480
asleep for example when you carry it in

85
00:02:58,480 --> 00:03:01,200
your bag in the subway

86
00:03:01,200 --> 00:03:03,120
all devices in apple's exosystem

87
00:03:03,120 --> 00:03:04,480
continuously listen for those

88
00:03:04,480 --> 00:03:05,840
advertisements

89
00:03:05,840 --> 00:03:08,159
and when receiving one an iphone for

90
00:03:08,159 --> 00:03:08,879
example

91
00:03:08,879 --> 00:03:11,519
determines its own location either by

92
00:03:11,519 --> 00:03:13,519
gps or wifi tracking

93
00:03:13,519 --> 00:03:14,959
and this location is actually an

94
00:03:14,959 --> 00:03:18,640
approximate location of the lost device

95
00:03:18,640 --> 00:03:20,720
an iphone collects several of such

96
00:03:20,720 --> 00:03:22,879
reports and regularly uploads them to

97
00:03:22,879 --> 00:03:24,640
apple's servers

98
00:03:24,640 --> 00:03:26,799
from there the owner can retrieve

99
00:03:26,799 --> 00:03:32,159
location reports of their own devices as

100
00:03:32,159 --> 00:03:34,159
privacy researchers we can immediately

101
00:03:34,159 --> 00:03:36,239
make out a number of potential issues

102
00:03:36,239 --> 00:03:38,319
with such a system

103
00:03:38,319 --> 00:03:40,799
for one we want to ensure that lost

104
00:03:40,799 --> 00:03:42,720
devices cannot be tracked by others

105
00:03:42,720 --> 00:03:46,000
via their bluetooth advertisements

106
00:03:46,000 --> 00:03:48,640
secondly there is the issue that finder

107
00:03:48,640 --> 00:03:50,879
devices disclose their own location to

108
00:03:50,879 --> 00:03:53,599
apple's servers

109
00:03:53,599 --> 00:03:56,799
and finally since all data is centrally

110
00:03:56,799 --> 00:03:58,720
stored on apple's servers

111
00:03:58,720 --> 00:04:00,799
good apple or third party access the

112
00:04:00,799 --> 00:04:02,480
reports and learn the location

113
00:04:02,480 --> 00:04:05,599
of lost devices of finer devices

114
00:04:05,599 --> 00:04:07,439
fortunately there are several solutions

115
00:04:07,439 --> 00:04:09,120
to these problems

116
00:04:09,120 --> 00:04:11,120
the first is to use unlinkable

117
00:04:11,120 --> 00:04:12,319
pseudonyms in the bluetooth

118
00:04:12,319 --> 00:04:15,120
advertisements that change regularly

119
00:04:15,120 --> 00:04:16,880
this will make it harder to track a lost

120
00:04:16,880 --> 00:04:18,560
device over time

121
00:04:18,560 --> 00:04:20,720
or to re-identify it across different

122
00:04:20,720 --> 00:04:22,479
locations

123
00:04:22,479 --> 00:04:25,040
second we can submit location reports

124
00:04:25,040 --> 00:04:26,880
anonymously

125
00:04:26,880 --> 00:04:28,800
and finally we can use end-to-end

126
00:04:28,800 --> 00:04:31,040
encryption for the location reports

127
00:04:31,040 --> 00:04:32,960
this way only the owner is able to

128
00:04:32,960 --> 00:04:35,440
decrypt reports for their own devices

129
00:04:35,440 --> 00:04:37,280
and even apple does not gain access to

130
00:04:37,280 --> 00:04:39,120
this information

131
00:04:39,120 --> 00:04:40,800
so let's see how apple implements the

132
00:04:40,800 --> 00:04:42,800
unlinkable synonyms

133
00:04:42,800 --> 00:04:44,560
for every device that the owner wants to

134
00:04:44,560 --> 00:04:46,560
track we need to generate a set of so

135
00:04:46,560 --> 00:04:48,639
called master keys

136
00:04:48,639 --> 00:04:50,720
in particular the master keys consists

137
00:04:50,720 --> 00:04:53,520
of a public private key pair on the p224

138
00:04:53,520 --> 00:04:54,400
elliptic curve

139
00:04:54,400 --> 00:04:57,360
called d0 and p0 as well as a symmetric

140
00:04:57,360 --> 00:04:57,919
key

141
00:04:57,919 --> 00:05:02,080
as k0 the symmetric key updates itself

142
00:05:02,080 --> 00:05:04,160
every 15 minutes using a well-known key

143
00:05:04,160 --> 00:05:06,400
derivation function or kdf

144
00:05:06,400 --> 00:05:09,120
creating a chain of symmetric keys these

145
00:05:09,120 --> 00:05:10,000
symmetric keys

146
00:05:10,000 --> 00:05:11,680
are used as seats for the actual

147
00:05:11,680 --> 00:05:14,080
bluetooth advertisements

148
00:05:14,080 --> 00:05:16,080
to get to the advertisements we first

149
00:05:16,080 --> 00:05:18,080
apply another round of kdf

150
00:05:18,080 --> 00:05:21,440
to each symmetric key to get two scalars

151
00:05:21,440 --> 00:05:24,080
finally we use the master public private

152
00:05:24,080 --> 00:05:26,400
key pair together with the two scalers

153
00:05:26,400 --> 00:05:28,479
to calculate the unlinkable public

154
00:05:28,479 --> 00:05:29,680
private key pairs

155
00:05:29,680 --> 00:05:30,800
that are used for the bluetooth

156
00:05:30,800 --> 00:05:33,199
advertisements in fact each bluetooth

157
00:05:33,199 --> 00:05:34,560
advertisement

158
00:05:34,560 --> 00:05:36,800
encodes the public part of this key and

159
00:05:36,800 --> 00:05:38,400
the private key can later be used to

160
00:05:38,400 --> 00:05:40,479
decrypt the encrypted location reports

161
00:05:40,479 --> 00:05:43,039
that are submitted by the finders

162
00:05:43,039 --> 00:05:44,720
to implement offline finding we need to

163
00:05:44,720 --> 00:05:47,199
put a 28 byte public advertisement key

164
00:05:47,199 --> 00:05:48,800
into a single bluetooth store energy

165
00:05:48,800 --> 00:05:50,000
advertisement

166
00:05:50,000 --> 00:05:51,199
according to the standard and

167
00:05:51,199 --> 00:05:53,199
advertisement consists of a mac address

168
00:05:53,199 --> 00:05:55,280
field and a payload of at most 30 bytes

169
00:05:55,280 --> 00:05:57,199
so this should not be a problem

170
00:05:57,199 --> 00:05:58,880
however this bluetooth standard also

171
00:05:58,880 --> 00:06:00,479
mandates that custom fields in the

172
00:06:00,479 --> 00:06:02,319
advertisements must be prefixed with the

173
00:06:02,319 --> 00:06:04,080
company identifier

174
00:06:04,080 --> 00:06:06,319
in addition apple already uses subtypes

175
00:06:06,319 --> 00:06:07,759
for their advertisements which only

176
00:06:07,759 --> 00:06:10,479
leaves 25 bytes for the key

177
00:06:10,479 --> 00:06:12,319
as a solution apple repurposed the

178
00:06:12,319 --> 00:06:13,840
address field to encode part of the

179
00:06:13,840 --> 00:06:14,800
public key

180
00:06:14,800 --> 00:06:18,000
and the rest of the key in the payload

181
00:06:18,000 --> 00:06:20,240
still we are not done as the bluetooth

182
00:06:20,240 --> 00:06:22,160
standard also mandates that the two

183
00:06:22,160 --> 00:06:24,080
first bits of a random mac address must

184
00:06:24,080 --> 00:06:25,520
be set to one

185
00:06:25,520 --> 00:06:27,120
therefore the advertisement also

186
00:06:27,120 --> 00:06:28,960
contains those two bits as part of the

187
00:06:28,960 --> 00:06:30,560
payload

188
00:06:30,560 --> 00:06:32,720
now whenever a finder device receives a

189
00:06:32,720 --> 00:06:34,720
bluetooth advertisement it extracts the

190
00:06:34,720 --> 00:06:35,440
public key

191
00:06:35,440 --> 00:06:38,000
pi and at the same time generates an

192
00:06:38,000 --> 00:06:40,080
ephemeral public private key pair on the

193
00:06:40,080 --> 00:06:42,319
same elliptic curve

194
00:06:42,319 --> 00:06:44,639
the finder then uses elliptic curve

195
00:06:44,639 --> 00:06:46,319
diffie-hellman key exchange

196
00:06:46,319 --> 00:06:49,759
to derive a shared secret the secret is

197
00:06:49,759 --> 00:06:51,759
in turn used to derive a symmetric key

198
00:06:51,759 --> 00:06:54,000
and initialization vector

199
00:06:54,000 --> 00:06:56,400
using this key material definer encrypts

200
00:06:56,400 --> 00:06:58,400
its current location as well as an

201
00:06:58,400 --> 00:07:02,560
accuracy value using asgcm and uploads

202
00:07:02,560 --> 00:07:05,440
the report together with the timestamp

203
00:07:05,440 --> 00:07:06,800
the hash of the lost device's

204
00:07:06,800 --> 00:07:08,560
advertisement key

205
00:07:08,560 --> 00:07:10,880
and its own informal public key to apple

206
00:07:10,880 --> 00:07:12,720
service

207
00:07:12,720 --> 00:07:15,280
the hash public advertisement key pi is

208
00:07:15,280 --> 00:07:17,280
used when an owner device requests a

209
00:07:17,280 --> 00:07:19,280
report for their own devices

210
00:07:19,280 --> 00:07:21,440
here the owner submits a list of the

211
00:07:21,440 --> 00:07:23,280
most recent advertisement keys of the

212
00:07:23,280 --> 00:07:24,319
lost device

213
00:07:24,319 --> 00:07:25,759
so that apple can deliver the

214
00:07:25,759 --> 00:07:27,599
corresponding reports

215
00:07:27,599 --> 00:07:29,759
the ephemera public key of the finder is

216
00:07:29,759 --> 00:07:31,680
required so that the owner can derive

217
00:07:31,680 --> 00:07:33,039
the same shared secret

218
00:07:33,039 --> 00:07:35,120
using the diffie-hellman key exchange to

219
00:07:35,120 --> 00:07:37,759
be able to decrypt the location report

220
00:07:37,759 --> 00:07:39,919
we conducted a comprehensive security

221
00:07:39,919 --> 00:07:41,360
and privacy analysis

222
00:07:41,360 --> 00:07:42,840
of the system's design and

223
00:07:42,840 --> 00:07:46,560
implementation and this is what we found

224
00:07:46,560 --> 00:07:48,000
so first of all it is the first

225
00:07:48,000 --> 00:07:49,840
commercials offline finding system that

226
00:07:49,840 --> 00:07:52,319
has a privacyfirst design

227
00:07:52,319 --> 00:07:54,080
and it integrates the three discussed

228
00:07:54,080 --> 00:07:57,039
solutions so apple implements encrypted

229
00:07:57,039 --> 00:08:00,479
end-to-end location reports it uses

230
00:08:00,479 --> 00:08:03,759
rotating public keys for the

231
00:08:03,759 --> 00:08:06,800
bluetooth advertisements and finally it

232
00:08:06,800 --> 00:08:08,639
makes sure that finder devices remain

233
00:08:08,639 --> 00:08:10,240
anonymous

234
00:08:10,240 --> 00:08:12,319
however at the same time the system

235
00:08:12,319 --> 00:08:14,080
becomes rather complex

236
00:08:14,080 --> 00:08:16,400
and this is typical for apple there is

237
00:08:16,400 --> 00:08:18,160
little public documentation about the

238
00:08:18,160 --> 00:08:19,440
system

239
00:08:19,440 --> 00:08:21,120
and if something cannot be easily

240
00:08:21,120 --> 00:08:22,879
evaluated independently

241
00:08:22,879 --> 00:08:27,199
errors might hide for a long time

242
00:08:27,199 --> 00:08:28,800
in our work we have discovered two

243
00:08:28,800 --> 00:08:30,720
distinct privacy vulnerabilities in

244
00:08:30,720 --> 00:08:32,719
apple's findmar system

245
00:08:32,719 --> 00:08:34,958
the first one allows unauthorized access

246
00:08:34,958 --> 00:08:36,640
to the user's location history

247
00:08:36,640 --> 00:08:38,719
by any local application running on mac

248
00:08:38,719 --> 00:08:39,679
os

249
00:08:39,679 --> 00:08:43,279
so what went wrong here to understand

250
00:08:43,279 --> 00:08:45,279
the vulnerability we have to know that

251
00:08:45,279 --> 00:08:46,880
apple's findmouse servers as well as

252
00:08:46,880 --> 00:08:48,880
many other system services

253
00:08:48,880 --> 00:08:51,600
used to secure system keychain and

254
00:08:51,600 --> 00:08:52,640
fightmap uses it

255
00:08:52,640 --> 00:08:54,640
to store master keys that are used to

256
00:08:54,640 --> 00:08:55,920
generate the pseudonyms for the

257
00:08:55,920 --> 00:08:58,959
bluetooth advertisements

258
00:08:58,959 --> 00:09:01,600
this process is computationally heavy so

259
00:09:01,600 --> 00:09:02,080
apple

260
00:09:02,080 --> 00:09:04,000
initially stored the pre-generated

261
00:09:04,000 --> 00:09:06,160
advertisement keys at cache directory in

262
00:09:06,160 --> 00:09:07,680
the file system

263
00:09:07,680 --> 00:09:10,080
and this directory was accessible by any

264
00:09:10,080 --> 00:09:13,440
unprivileged application

265
00:09:14,080 --> 00:09:16,240
these keys in the cache directory could

266
00:09:16,240 --> 00:09:18,080
be used to download and then decrypt

267
00:09:18,080 --> 00:09:20,240
location reports for the user's devices

268
00:09:20,240 --> 00:09:22,560
and therefore an attacker was able to

269
00:09:22,560 --> 00:09:24,959
access all location reports for the past

270
00:09:24,959 --> 00:09:26,080
seven days

271
00:09:26,080 --> 00:09:29,440
for all the users devices and while

272
00:09:29,440 --> 00:09:31,120
apple has meanwhile patched the issue

273
00:09:31,120 --> 00:09:33,120
we assume that users were vulnerable to

274
00:09:33,120 --> 00:09:36,640
this attack for at least one year

275
00:09:36,640 --> 00:09:38,560
now when we discovered the issue we were

276
00:09:38,560 --> 00:09:40,320
interested to know how much an attacker

277
00:09:40,320 --> 00:09:42,640
could infer from the location reports

278
00:09:42,640 --> 00:09:43,920
because there was no information

279
00:09:43,920 --> 00:09:46,000
available about how precise the final

280
00:09:46,000 --> 00:09:47,360
reports are

281
00:09:47,360 --> 00:09:49,440
and how many reports were generated in

282
00:09:49,440 --> 00:09:51,839
the wild

283
00:09:51,839 --> 00:09:53,440
to this end we conducted a set of

284
00:09:53,440 --> 00:09:55,040
experiments

285
00:09:55,040 --> 00:09:56,959
first we wanted to know whether and how

286
00:09:56,959 --> 00:09:59,920
precise we could track a victim's path

287
00:09:59,920 --> 00:10:01,920
to this end we used apple's private

288
00:10:01,920 --> 00:10:03,920
download api to get location reports

289
00:10:03,920 --> 00:10:06,240
from our own devices

290
00:10:06,240 --> 00:10:08,240
this is what we did so during the

291
00:10:08,240 --> 00:10:10,399
experiments one of the authors carried a

292
00:10:10,399 --> 00:10:11,279
lost iphone

293
00:10:11,279 --> 00:10:12,880
through downtown frankfurt on mine in

294
00:10:12,880 --> 00:10:14,480
germany

295
00:10:14,480 --> 00:10:16,800
and with the same iphone we recorded the

296
00:10:16,800 --> 00:10:18,720
gps trace as a ground truth

297
00:10:18,720 --> 00:10:20,959
and this is what we show on the map to

298
00:10:20,959 --> 00:10:23,439
the right

299
00:10:23,600 --> 00:10:25,680
after the experiment we downloaded and

300
00:10:25,680 --> 00:10:27,760
decrypted the offline finding reports

301
00:10:27,760 --> 00:10:30,240
via apple's private api and the raw

302
00:10:30,240 --> 00:10:32,320
location reports that were submitted by

303
00:10:32,320 --> 00:10:32,880
other

304
00:10:32,880 --> 00:10:35,839
finder devices are shown as black dots

305
00:10:35,839 --> 00:10:37,760
on the map

306
00:10:37,760 --> 00:10:40,000
these raw reports already match the gps

307
00:10:40,000 --> 00:10:40,880
scrum truth

308
00:10:40,880 --> 00:10:43,440
data rather well but we wanted to go a

309
00:10:43,440 --> 00:10:45,120
step further and see whether we could

310
00:10:45,120 --> 00:10:48,240
actually reconstruct the path

311
00:10:48,240 --> 00:10:51,200
so we use the smoothing algorithm on the

312
00:10:51,200 --> 00:10:51,680
raw

313
00:10:51,680 --> 00:10:54,160
offline finding reports and now we can

314
00:10:54,160 --> 00:10:54,959
see that

315
00:10:54,959 --> 00:10:57,279
our reconstructed path matches the

316
00:10:57,279 --> 00:10:59,760
ground with data rather well

317
00:10:59,760 --> 00:11:01,680
in numbers we were able to achieve a

318
00:11:01,680 --> 00:11:04,959
mean error of less than 30 meters

319
00:11:04,959 --> 00:11:06,800
in the second experiment we wanted to

320
00:11:06,800 --> 00:11:08,560
know whether access to the location

321
00:11:08,560 --> 00:11:10,800
reports would not only allow us to track

322
00:11:10,800 --> 00:11:11,600
a victim

323
00:11:11,600 --> 00:11:13,360
but to identify individuals by

324
00:11:13,360 --> 00:11:15,760
leveraging the so-called top locations

325
00:11:15,760 --> 00:11:17,120
those are the locations that an

326
00:11:17,120 --> 00:11:20,000
individual spends the most time at

327
00:11:20,000 --> 00:11:22,399
to this end one author carried an iphone

328
00:11:22,399 --> 00:11:24,560
during a regular work week

329
00:11:24,560 --> 00:11:26,399
after one week we downloaded and

330
00:11:26,399 --> 00:11:28,320
decrypted the offline finding reports

331
00:11:28,320 --> 00:11:30,240
generated for this device

332
00:11:30,240 --> 00:11:33,600
again by apple's private download api

333
00:11:33,600 --> 00:11:35,600
we then applied the dbscan clustering

334
00:11:35,600 --> 00:11:37,680
algorithm on the raw reports

335
00:11:37,680 --> 00:11:39,440
which we interpret as the user's top

336
00:11:39,440 --> 00:11:41,760
locations we show the clusters as well

337
00:11:41,760 --> 00:11:43,920
as the noise on the map to the right

338
00:11:43,920 --> 00:11:46,079
for this talk we anonymized the results

339
00:11:46,079 --> 00:11:48,000
by using a random projection to the city

340
00:11:48,000 --> 00:11:49,760
of london

341
00:11:49,760 --> 00:11:51,839
note that as a pre-processing step we

342
00:11:51,839 --> 00:11:53,760
had to resample the reports on the time

343
00:11:53,760 --> 00:11:54,560
domain

344
00:11:54,560 --> 00:11:56,079
because otherwise short visits to

345
00:11:56,079 --> 00:11:58,560
crowded areas would be over represented

346
00:11:58,560 --> 00:12:00,480
as more finder reports are generated

347
00:12:00,480 --> 00:12:02,800
there than for example in more remote

348
00:12:02,800 --> 00:12:05,200
areas

349
00:12:05,200 --> 00:12:07,120
we also wanted to know whether we could

350
00:12:07,120 --> 00:12:09,360
not only identify the top locations but

351
00:12:09,360 --> 00:12:11,040
also determine their type

352
00:12:11,040 --> 00:12:13,920
based on the visiting time pattern on

353
00:12:13,920 --> 00:12:14,560
the right

354
00:12:14,560 --> 00:12:16,639
we map the top locations to the hours of

355
00:12:16,639 --> 00:12:18,880
day that they were visited

356
00:12:18,880 --> 00:12:20,880
we can assume that the topmost location

357
00:12:20,880 --> 00:12:22,160
is the author's home

358
00:12:22,160 --> 00:12:23,920
as this is the only location that is

359
00:12:23,920 --> 00:12:26,560
visited during all hours of the day

360
00:12:26,560 --> 00:12:28,480
also we can make out the office working

361
00:12:28,480 --> 00:12:30,959
place as this location was only visited

362
00:12:30,959 --> 00:12:33,279
during regular office hours

363
00:12:33,279 --> 00:12:35,519
we verified the findings by letting the

364
00:12:35,519 --> 00:12:37,600
author label the locations

365
00:12:37,600 --> 00:12:40,079
in conclusion we were able to identify

366
00:12:40,079 --> 00:12:42,160
all top locations with an accuracy of

367
00:12:42,160 --> 00:12:44,079
approximately 10 meters

368
00:12:44,079 --> 00:12:45,839
which according to related work would be

369
00:12:45,839 --> 00:12:49,360
sufficient to uniquely identify a person

370
00:12:49,360 --> 00:12:51,440
i just explained the implications of the

371
00:12:51,440 --> 00:12:52,959
first vulnerability

372
00:12:52,959 --> 00:12:55,680
but we also discovered the second one we

373
00:12:55,680 --> 00:12:57,680
found that finder devices tend to upload

374
00:12:57,680 --> 00:12:59,680
location reports in batches

375
00:12:59,680 --> 00:13:01,600
probably to conserve both battery and

376
00:13:01,600 --> 00:13:02,800
bandwidth

377
00:13:02,800 --> 00:13:04,320
this means that while apple cannot

378
00:13:04,320 --> 00:13:06,399
decrypt the location reports

379
00:13:06,399 --> 00:13:08,800
they could infer which reports have been

380
00:13:08,800 --> 00:13:11,040
made in close proximity to each other

381
00:13:11,040 --> 00:13:12,959
assuming that finder devices travel at

382
00:13:12,959 --> 00:13:14,959
finite speed

383
00:13:14,959 --> 00:13:16,800
secondly we found that owner devices

384
00:13:16,800 --> 00:13:18,959
must authenticate with their apple id to

385
00:13:18,959 --> 00:13:20,399
be able to download the encrypted

386
00:13:20,399 --> 00:13:22,160
location reports

387
00:13:22,160 --> 00:13:24,160
together this would allow apple to build

388
00:13:24,160 --> 00:13:28,000
a social or proximity graph of owners

389
00:13:28,000 --> 00:13:29,839
however there are two caveats to this

390
00:13:29,839 --> 00:13:31,920
finding firstly

391
00:13:31,920 --> 00:13:34,000
while it would be technically possible

392
00:13:34,000 --> 00:13:35,839
apple claims that they do not store the

393
00:13:35,839 --> 00:13:37,360
required metadata

394
00:13:37,360 --> 00:13:39,360
and we have no evidence to disprove this

395
00:13:39,360 --> 00:13:40,800
claim

396
00:13:40,800 --> 00:13:42,959
secondly constructing such a proximity

397
00:13:42,959 --> 00:13:45,199
graph would require owner devices to

398
00:13:45,199 --> 00:13:48,399
actively use the find my application

399
00:13:48,399 --> 00:13:50,240
nevertheless we find that this issue

400
00:13:50,240 --> 00:13:52,000
leaves a sour aftertaste to this

401
00:13:52,000 --> 00:13:53,920
otherwise well-designed system

402
00:13:53,920 --> 00:13:56,000
especially since apple has not commented

403
00:13:56,000 --> 00:13:57,600
on the issue after our responsible

404
00:13:57,600 --> 00:13:58,800
disclosure

405
00:13:58,800 --> 00:14:00,839
even worse there would be a simple

406
00:14:00,839 --> 00:14:03,120
mitigation apple could simply drop the

407
00:14:03,120 --> 00:14:04,639
authentication requirement for

408
00:14:04,639 --> 00:14:06,079
downloading reports

409
00:14:06,079 --> 00:14:07,920
because the authentication actually does

410
00:14:07,920 --> 00:14:10,320
not provide any additional security

411
00:14:10,320 --> 00:14:11,920
at least based on our understanding of

412
00:14:11,920 --> 00:14:14,399
the system

413
00:14:14,399 --> 00:14:16,959
so let's recap apple's claims the

414
00:14:16,959 --> 00:14:18,639
offline finding system indeed

415
00:14:18,639 --> 00:14:21,040
makes it possible to find apple devices

416
00:14:21,040 --> 00:14:21,839
but in fact

417
00:14:21,839 --> 00:14:24,000
also any other bluetooth enabled devices

418
00:14:24,000 --> 00:14:26,639
which i will talk about in a second

419
00:14:26,639 --> 00:14:28,240
and this indeed also works if the

420
00:14:28,240 --> 00:14:30,160
devices are offline

421
00:14:30,160 --> 00:14:32,399
unfortunately the system is not fully

422
00:14:32,399 --> 00:14:34,399
anonymous by design

423
00:14:34,399 --> 00:14:36,240
as it would allow for correlating user

424
00:14:36,240 --> 00:14:38,000
locations

425
00:14:38,000 --> 00:14:40,160
also as with every design the table is

426
00:14:40,160 --> 00:14:41,040
in the details

427
00:14:41,040 --> 00:14:44,240
or more precisely in the implementation

428
00:14:44,240 --> 00:14:45,760
and finally we also found that the

429
00:14:45,760 --> 00:14:47,440
location reports are

430
00:14:47,440 --> 00:14:50,320
in fact not only stored for 24 hours but

431
00:14:50,320 --> 00:14:51,839
we were able to download encrypted

432
00:14:51,839 --> 00:14:54,320
location reports for our devices

433
00:14:54,320 --> 00:14:57,360
for up to seven days in the past

434
00:14:57,360 --> 00:15:00,000
to wrap this up apple's x system is

435
00:15:00,000 --> 00:15:01,279
enormous

436
00:15:01,279 --> 00:15:03,839
to analyze their proprietary system we

437
00:15:03,839 --> 00:15:05,680
invested quite some time and energy to

438
00:15:05,680 --> 00:15:06,800
develop tools

439
00:15:06,800 --> 00:15:08,480
that helped us understand the system in

440
00:15:08,480 --> 00:15:10,079
detail

441
00:15:10,079 --> 00:15:12,000
as part of this work we implemented open

442
00:15:12,000 --> 00:15:14,320
haystack an open framework that allows

443
00:15:14,320 --> 00:15:16,000
for tracking the location of any

444
00:15:16,000 --> 00:15:17,360
bluetooth device

445
00:15:17,360 --> 00:15:20,000
via apple's finder network and it

446
00:15:20,000 --> 00:15:22,000
already has unusually large user base

447
00:15:22,000 --> 00:15:25,360
from github so feel free to try this out

448
00:15:25,360 --> 00:15:27,360
based on our understanding we then

449
00:15:27,360 --> 00:15:29,360
conducted the first security and privacy

450
00:15:29,360 --> 00:15:32,079
analysis of apple's find my system

451
00:15:32,079 --> 00:15:34,079
we discovered two distinct flaws in this

452
00:15:34,079 --> 00:15:36,880
otherwise well-designed system

453
00:15:36,880 --> 00:15:38,880
in addition we provide first insights

454
00:15:38,880 --> 00:15:40,880
into the performance and accuracy of the

455
00:15:40,880 --> 00:15:43,680
generated finder reports

456
00:15:43,680 --> 00:15:45,440
thank you for your attention my name is

457
00:15:45,440 --> 00:15:47,360
milan feel free to reach out to me or

458
00:15:47,360 --> 00:15:49,639
one of my colleagues if you have

459
00:15:49,639 --> 00:15:52,639
questions

