1
00:00:00,560 --> 00:00:03,040
hello i'm akm mubashiralam

2
00:00:03,040 --> 00:00:04,799
i'm a phd student at marquette

3
00:00:04,799 --> 00:00:06,399
university in computer science

4
00:00:06,399 --> 00:00:07,279
department

5
00:00:07,279 --> 00:00:09,920
today i'm going to present sgx mr

6
00:00:09,920 --> 00:00:11,840
regulating data flows for protecting

7
00:00:11,840 --> 00:00:14,080
access patterns of data intensive sgx

8
00:00:14,080 --> 00:00:15,440
applications

9
00:00:15,440 --> 00:00:17,840
this research has been done by me my phd

10
00:00:17,840 --> 00:00:19,439
advisor dr kekaten

11
00:00:19,439 --> 00:00:21,920
and one of his ex-psd student dr sagar

12
00:00:21,920 --> 00:00:22,560
sharma

13
00:00:22,560 --> 00:00:24,560
who is currently affiliated with hp

14
00:00:24,560 --> 00:00:26,880
incorporation

15
00:00:26,880 --> 00:00:29,119
cloud computing has become very popular

16
00:00:29,119 --> 00:00:30,720
because of its key benefits

17
00:00:30,720 --> 00:00:33,600
for example economics the pay as you use

18
00:00:33,600 --> 00:00:34,559
billing model

19
00:00:34,559 --> 00:00:36,480
is much cheaper compared to building

20
00:00:36,480 --> 00:00:38,000
your own infrastructure

21
00:00:38,000 --> 00:00:40,399
the scalability the plenty of resources

22
00:00:40,399 --> 00:00:41,120
out there

23
00:00:41,120 --> 00:00:43,040
for storage and computation compared to

24
00:00:43,040 --> 00:00:44,800
your local machine for example

25
00:00:44,800 --> 00:00:46,879
the personal computers and also the

26
00:00:46,879 --> 00:00:47,840
accessibility

27
00:00:47,840 --> 00:00:49,840
the easy access regardless of time and

28
00:00:49,840 --> 00:00:51,760
location

29
00:00:51,760 --> 00:00:53,840
so in the cloud computing scenario the

30
00:00:53,840 --> 00:00:55,840
user upload the program and data to the

31
00:00:55,840 --> 00:00:56,559
cloud

32
00:00:56,559 --> 00:00:58,239
and after computation with the given

33
00:00:58,239 --> 00:01:00,719
program and data the results get back to

34
00:01:00,719 --> 00:01:01,680
the user

35
00:01:01,680 --> 00:01:04,159
so when user upload the program and data

36
00:01:04,159 --> 00:01:05,438
to the cloud

37
00:01:05,438 --> 00:01:08,320
the user actually losing the authority

38
00:01:08,320 --> 00:01:09,680
of the program and data

39
00:01:09,680 --> 00:01:12,000
and the server owners actually hold all

40
00:01:12,000 --> 00:01:14,159
the authority of the data and program

41
00:01:14,159 --> 00:01:17,040
so if the server is malicious they can

42
00:01:17,040 --> 00:01:18,880
temper the data they can temper the

43
00:01:18,880 --> 00:01:19,520
program

44
00:01:19,520 --> 00:01:20,880
they can even steal sensitive

45
00:01:20,880 --> 00:01:23,119
information so

46
00:01:23,119 --> 00:01:26,000
to achieve the benefits of the cloud

47
00:01:26,000 --> 00:01:27,840
user ultimately compromising the

48
00:01:27,840 --> 00:01:30,159
security and privacy

49
00:01:30,159 --> 00:01:32,320
so the ultimate goal should be the

50
00:01:32,320 --> 00:01:34,079
confidentiality

51
00:01:34,079 --> 00:01:36,000
server so that the server learns nothing

52
00:01:36,000 --> 00:01:37,920
about the program and data

53
00:01:37,920 --> 00:01:40,400
to achieve integrity so that the server

54
00:01:40,400 --> 00:01:42,640
returns the accurate results

55
00:01:42,640 --> 00:01:46,240
uh from the cloud and also uh

56
00:01:46,240 --> 00:01:48,320
to achieve the confidentiality and

57
00:01:48,320 --> 00:01:49,439
integrity

58
00:01:49,439 --> 00:01:51,840
so the overhead should be much less so

59
00:01:51,840 --> 00:01:53,439
the efficiency

60
00:01:53,439 --> 00:01:55,360
i mean the runtime the execution time

61
00:01:55,360 --> 00:01:57,840
should be much faster

62
00:01:57,840 --> 00:02:00,240
there are several existing solutions to

63
00:02:00,240 --> 00:02:01,600
address the issues

64
00:02:01,600 --> 00:02:03,759
researchers have been doing a great job

65
00:02:03,759 --> 00:02:05,439
there are software-based cryptographic

66
00:02:05,439 --> 00:02:07,360
approaches such as fully homomorphic

67
00:02:07,360 --> 00:02:08,399
encryption

68
00:02:08,399 --> 00:02:10,160
and also the secure multi-party

69
00:02:10,160 --> 00:02:11,760
computation to address the

70
00:02:11,760 --> 00:02:13,520
confidentiality problem

71
00:02:13,520 --> 00:02:15,040
but the problem is they are too

72
00:02:15,040 --> 00:02:16,879
expensive to be practical

73
00:02:16,879 --> 00:02:19,040
on the other hand there is trusted

74
00:02:19,040 --> 00:02:21,040
execution environment such as

75
00:02:21,040 --> 00:02:23,760
intel sgx that overcomes the performance

76
00:02:23,760 --> 00:02:24,480
issues

77
00:02:24,480 --> 00:02:25,959
and it also provides the both

78
00:02:25,959 --> 00:02:30,560
confidentiality and integrity guarantees

79
00:02:30,959 --> 00:02:33,360
intel sgx has trusted execution

80
00:02:33,360 --> 00:02:34,640
environment

81
00:02:34,640 --> 00:02:37,519
so intel extended their popular x86

82
00:02:37,519 --> 00:02:38,640
instruction set

83
00:02:38,640 --> 00:02:41,040
to provide a private reserve memory

84
00:02:41,040 --> 00:02:43,280
where privileged system codes such as

85
00:02:43,280 --> 00:02:45,200
the operating system virtual machine

86
00:02:45,200 --> 00:02:47,680
bios cannot access the private reserve

87
00:02:47,680 --> 00:02:48,319
memory

88
00:02:48,319 --> 00:02:51,680
cpu itself restrict them to access the

89
00:02:51,680 --> 00:02:53,519
reserve memory where the rest of the

90
00:02:53,519 --> 00:02:55,360
memories can be easily accessed by the

91
00:02:55,360 --> 00:02:56,560
privileged code

92
00:02:56,560 --> 00:02:59,200
so this service security is actually

93
00:02:59,200 --> 00:03:00,640
provided by

94
00:03:00,640 --> 00:03:04,400
via remote attestation as where the user

95
00:03:04,400 --> 00:03:06,159
get the guarantees that the service

96
00:03:06,159 --> 00:03:08,159
provider the cloud service provider

97
00:03:08,159 --> 00:03:09,680
actually providing the

98
00:03:09,680 --> 00:03:12,640
sgx supported cpus which actually

99
00:03:12,640 --> 00:03:14,959
guarantees this type of security

100
00:03:14,959 --> 00:03:18,159
so in the scenario a user can upload

101
00:03:18,159 --> 00:03:18,560
their

102
00:03:18,560 --> 00:03:21,120
encrypted binary and the data where

103
00:03:21,120 --> 00:03:23,280
using that binary the enclave has been

104
00:03:23,280 --> 00:03:24,799
created on the cloud

105
00:03:24,799 --> 00:03:26,640
and then they can securely transfer

106
00:03:26,640 --> 00:03:28,640
their uh encrypted data

107
00:03:28,640 --> 00:03:32,159
via the enclave call and when the data

108
00:03:32,159 --> 00:03:32,560
is

109
00:03:32,560 --> 00:03:36,080
transferred to the to the enclave then

110
00:03:36,080 --> 00:03:37,760
then they are decrypting the uh they

111
00:03:37,760 --> 00:03:39,599
could they will decrypt the data

112
00:03:39,599 --> 00:03:42,480
to work with the plain text environment

113
00:03:42,480 --> 00:03:42,959
so

114
00:03:42,959 --> 00:03:45,120
the within the enclave memory the

115
00:03:45,120 --> 00:03:46,080
reserve memory

116
00:03:46,080 --> 00:03:50,000
is actually working as a plain text

117
00:03:50,000 --> 00:03:52,799
as a plain text so that the execution

118
00:03:52,799 --> 00:03:53,760
will be must

119
00:03:53,760 --> 00:03:56,879
the execution will be much faster than

120
00:03:56,879 --> 00:03:59,840
uh using the fully homomorphic

121
00:03:59,840 --> 00:04:01,200
encryption or the

122
00:04:01,200 --> 00:04:05,040
or the other cryptographic approaches

123
00:04:05,040 --> 00:04:07,519
intel sgx is secure to be deployed in a

124
00:04:07,519 --> 00:04:08,640
cloud server

125
00:04:08,640 --> 00:04:11,760
however it still has some privacy issues

126
00:04:11,760 --> 00:04:13,840
intel sgx is vulnerable from

127
00:04:13,840 --> 00:04:15,360
software-based attacks

128
00:04:15,360 --> 00:04:18,320
such as page fault attack data or page

129
00:04:18,320 --> 00:04:19,759
access pattern attacks

130
00:04:19,759 --> 00:04:21,918
and branch shadowing attack in this

131
00:04:21,918 --> 00:04:24,320
research we are going to focus on these

132
00:04:24,320 --> 00:04:26,880
software-based side channel attacks

133
00:04:26,880 --> 00:04:29,919
however on the other hand the there are

134
00:04:29,919 --> 00:04:31,759
other side channel attacks too

135
00:04:31,759 --> 00:04:34,800
such as speculative execution attack or

136
00:04:34,800 --> 00:04:37,199
injection-based attacks since

137
00:04:37,199 --> 00:04:38,880
software-based mitigations are not

138
00:04:38,880 --> 00:04:39,759
sufficient

139
00:04:39,759 --> 00:04:42,560
or it may require micro architectural

140
00:04:42,560 --> 00:04:43,680
level patches

141
00:04:43,680 --> 00:04:45,759
which keep these side channels out of

142
00:04:45,759 --> 00:04:47,600
our scopes

143
00:04:47,600 --> 00:04:50,160
so why still sgx applications are

144
00:04:50,160 --> 00:04:52,000
vulnerable from privacy and security

145
00:04:52,000 --> 00:04:52,720
issues

146
00:04:52,720 --> 00:04:54,639
so we know that the operating system

147
00:04:54,639 --> 00:04:56,560
cannot access the application's trusted

148
00:04:56,560 --> 00:04:57,120
memory

149
00:04:57,120 --> 00:04:59,360
or we can say the private reserve memory

150
00:04:59,360 --> 00:05:01,600
but the problem is the physical memories

151
00:05:01,600 --> 00:05:02,000
of

152
00:05:02,000 --> 00:05:04,880
physical trusted memory is limited to 95

153
00:05:04,880 --> 00:05:05,759
megabyte

154
00:05:05,759 --> 00:05:08,240
so for this reason you the applications

155
00:05:08,240 --> 00:05:08,880
data

156
00:05:08,880 --> 00:05:10,880
the entire data set cannot be uploaded

157
00:05:10,880 --> 00:05:12,720
to the trusted memory

158
00:05:12,720 --> 00:05:14,880
so the application needs to upload the

159
00:05:14,880 --> 00:05:16,639
limited data to the

160
00:05:16,639 --> 00:05:19,199
adjusted memory on demand basis and

161
00:05:19,199 --> 00:05:20,880
sometimes it may need to spill out the

162
00:05:20,880 --> 00:05:22,400
data from the trusted memory to

163
00:05:22,400 --> 00:05:23,600
untrusted memory

164
00:05:23,600 --> 00:05:25,919
so these uh interaction between the

165
00:05:25,919 --> 00:05:27,680
trusted and untrusted memory

166
00:05:27,680 --> 00:05:31,120
can be detected by the operating system

167
00:05:31,120 --> 00:05:33,759
and also there are other mechanism like

168
00:05:33,759 --> 00:05:34,400
you can

169
00:05:34,400 --> 00:05:37,840
virtually uh increase the the trusted

170
00:05:37,840 --> 00:05:39,919
memory the size of the trusted memory

171
00:05:39,919 --> 00:05:41,919
so in that case the operating system

172
00:05:41,919 --> 00:05:43,919
itself will handle the

173
00:05:43,919 --> 00:05:46,720
paging mechanism to swap in and swap out

174
00:05:46,720 --> 00:05:47,360
the

175
00:05:47,360 --> 00:05:49,520
uh the trusted memory to the enclave and

176
00:05:49,520 --> 00:05:50,880
outside of the enclave

177
00:05:50,880 --> 00:05:53,039
so when the operating system get the

178
00:05:53,039 --> 00:05:54,479
authority to do that

179
00:05:54,479 --> 00:05:57,360
operating system can observe the page

180
00:05:57,360 --> 00:05:58,800
level access patterns

181
00:05:58,800 --> 00:06:01,199
so for these reasons the memory address

182
00:06:01,199 --> 00:06:05,280
can be detected by the operating systems

183
00:06:05,280 --> 00:06:07,680
speaking of the excess pattern leakages

184
00:06:07,680 --> 00:06:09,520
there are existing solutions for this

185
00:06:09,520 --> 00:06:10,240
problem

186
00:06:10,240 --> 00:06:13,600
oblivious ram or known as the oram

187
00:06:13,600 --> 00:06:16,000
is very well known to protect the access

188
00:06:16,000 --> 00:06:18,479
pattern between a server and a client

189
00:06:18,479 --> 00:06:20,639
so researchers have been experimenting

190
00:06:20,639 --> 00:06:22,960
oram to address the data access patterns

191
00:06:22,960 --> 00:06:24,880
of sgx applications

192
00:06:24,880 --> 00:06:27,360
so in the sgx setting obrm controller

193
00:06:27,360 --> 00:06:28,880
kept in the enclave

194
00:06:28,880 --> 00:06:30,400
which protects the access pattern

195
00:06:30,400 --> 00:06:33,759
between the trusted and untrusted memory

196
00:06:33,759 --> 00:06:35,440
so researchers have been implemented

197
00:06:35,440 --> 00:06:37,840
pathogram and circuit oram algorithms to

198
00:06:37,840 --> 00:06:39,039
protect the

199
00:06:39,039 --> 00:06:41,680
access patterns of the sgx applications

200
00:06:41,680 --> 00:06:43,600
so it has some specific contribution

201
00:06:43,600 --> 00:06:44,319
because

202
00:06:44,319 --> 00:06:46,800
uh i mean it achieved the efficiency

203
00:06:46,800 --> 00:06:49,120
that the classical orm setting because

204
00:06:49,120 --> 00:06:51,520
i mean it reduced the server client

205
00:06:51,520 --> 00:06:54,080
communication

206
00:06:54,080 --> 00:06:57,120
as the uh the rm controller kept in the

207
00:06:57,120 --> 00:06:58,720
enclave and which is itself in the

208
00:06:58,720 --> 00:06:59,759
server side

209
00:06:59,759 --> 00:07:02,319
but still it has some limitation because

210
00:07:02,319 --> 00:07:03,840
uh

211
00:07:03,840 --> 00:07:05,599
the overam takes the order of login

212
00:07:05,599 --> 00:07:07,840
operation to access each data block

213
00:07:07,840 --> 00:07:10,960
which is still not uh efficient also

214
00:07:10,960 --> 00:07:11,680
like the

215
00:07:11,680 --> 00:07:13,840
only it only protects a set of data

216
00:07:13,840 --> 00:07:15,759
access pad and data accesses when you

217
00:07:15,759 --> 00:07:16,080
have

218
00:07:16,080 --> 00:07:18,080
some data in the untrusted memory and

219
00:07:18,080 --> 00:07:19,840
you are accessing from the enclave

220
00:07:19,840 --> 00:07:22,319
so this interaction between the the this

221
00:07:22,319 --> 00:07:24,400
set of the common set of data access

222
00:07:24,400 --> 00:07:27,199
only protect by protected by the oram it

223
00:07:27,199 --> 00:07:28,319
cannot protect the

224
00:07:28,319 --> 00:07:31,680
application specific code access such as

225
00:07:31,680 --> 00:07:33,759
the conditional branching in the

226
00:07:33,759 --> 00:07:36,400
enclave

227
00:07:37,120 --> 00:07:40,080
our observation is oram incurs high

228
00:07:40,080 --> 00:07:41,680
computational cost

229
00:07:41,680 --> 00:07:44,319
if we can regulate the data flow of sjx

230
00:07:44,319 --> 00:07:45,280
application

231
00:07:45,280 --> 00:07:47,280
it can be more efficient than the orem

232
00:07:47,280 --> 00:07:48,319
primitive

233
00:07:48,319 --> 00:07:50,800
interestingly some application specific

234
00:07:50,800 --> 00:07:52,800
access pattern does not leak additional

235
00:07:52,800 --> 00:07:53,680
information

236
00:07:53,680 --> 00:07:56,720
for example sequentially access the

237
00:07:56,720 --> 00:07:58,560
entire data set doesn't leak additional

238
00:07:58,560 --> 00:08:00,800
informations but still there are other

239
00:08:00,800 --> 00:08:01,840
excess patterns

240
00:08:01,840 --> 00:08:04,000
which can be replaced with the specific

241
00:08:04,000 --> 00:08:05,280
oblivious algorithms

242
00:08:05,280 --> 00:08:07,520
such as the oblivious sorting oblivious

243
00:08:07,520 --> 00:08:10,319
merge and swap etc

244
00:08:10,319 --> 00:08:12,400
but to do that there are a few

245
00:08:12,400 --> 00:08:13,520
challenges because

246
00:08:13,520 --> 00:08:15,919
you need to you need to analyze in

247
00:08:15,919 --> 00:08:17,520
detail for each application

248
00:08:17,520 --> 00:08:19,599
specific access patterns which is very

249
00:08:19,599 --> 00:08:20,639
time consuming

250
00:08:20,639 --> 00:08:22,639
and also error prone if you want to do

251
00:08:22,639 --> 00:08:27,039
it for every applications

252
00:08:27,039 --> 00:08:29,120
our contribution we reduce the

253
00:08:29,120 --> 00:08:30,400
application specific

254
00:08:30,400 --> 00:08:32,479
access patterns to a few shared access

255
00:08:32,479 --> 00:08:34,640
patterns by regulating the data flows

256
00:08:34,640 --> 00:08:36,320
with mapreduce

257
00:08:36,320 --> 00:08:38,958
by utilizing map videos we can also

258
00:08:38,958 --> 00:08:39,440
cover

259
00:08:39,440 --> 00:08:41,200
a wide range of data analytics

260
00:08:41,200 --> 00:08:43,039
applications where

261
00:08:43,039 --> 00:08:46,320
by protecting the uh the

262
00:08:46,320 --> 00:08:48,720
the access patterns of mapreduce we can

263
00:08:48,720 --> 00:08:50,560
also protect a wide range of data

264
00:08:50,560 --> 00:08:52,320
analytics applications

265
00:08:52,320 --> 00:08:55,279
and sgx mr we designed a robust

266
00:08:55,279 --> 00:08:57,200
mitigation method to prevent

267
00:08:57,200 --> 00:08:59,040
the untrusted memory access pattern

268
00:08:59,040 --> 00:09:01,360
leakages and also the in-enclave memory

269
00:09:01,360 --> 00:09:02,959
access patterns

270
00:09:02,959 --> 00:09:06,160
uh we implemented the lightfit sgx mr

271
00:09:06,160 --> 00:09:08,080
framework which is very flexible to

272
00:09:08,080 --> 00:09:10,000
adopt the enclave's restriction

273
00:09:10,000 --> 00:09:12,399
for example the limited memory and

274
00:09:12,399 --> 00:09:13,200
finally we

275
00:09:13,200 --> 00:09:16,320
conducted extensive uh component wise

276
00:09:16,320 --> 00:09:18,560
experiments to understand the cost and

277
00:09:18,560 --> 00:09:20,080
the performance of sgx

278
00:09:20,080 --> 00:09:23,040
mr and we compare our results with the

279
00:09:23,040 --> 00:09:24,399
oram-based sgx

280
00:09:24,399 --> 00:09:26,959
approaches finally we understand that

281
00:09:26,959 --> 00:09:28,800
the sgx mr can be

282
00:09:28,800 --> 00:09:31,680
several times faster than our oram-based

283
00:09:31,680 --> 00:09:33,920
solutions

284
00:09:33,920 --> 00:09:36,720
here we can see the high level design of

285
00:09:36,720 --> 00:09:37,920
sgx mr

286
00:09:37,920 --> 00:09:40,080
we divide the framework into two parts

287
00:09:40,080 --> 00:09:41,680
that is the trusted part and the

288
00:09:41,680 --> 00:09:42,800
untrusted part

289
00:09:42,800 --> 00:09:44,720
the untrusted component contains the

290
00:09:44,720 --> 00:09:47,040
small initiator program that starts the

291
00:09:47,040 --> 00:09:48,480
hdx mr

292
00:09:48,480 --> 00:09:50,640
and also the encrypted files and the

293
00:09:50,640 --> 00:09:51,760
data blocks

294
00:09:51,760 --> 00:09:53,600
enclaves holds the rest of the

295
00:09:53,600 --> 00:09:55,440
components of sjx mr

296
00:09:55,440 --> 00:09:58,080
where the mr controller manages the data

297
00:09:58,080 --> 00:09:59,680
flow between the

298
00:09:59,680 --> 00:10:02,399
enclave and the untrusted memory it only

299
00:10:02,399 --> 00:10:04,560
accesses equal size blocks either

300
00:10:04,560 --> 00:10:05,680
sequentially

301
00:10:05,680 --> 00:10:08,880
or using oblivious algorithm to access

302
00:10:08,880 --> 00:10:09,440
the

303
00:10:09,440 --> 00:10:11,440
untrusted memory and also the

304
00:10:11,440 --> 00:10:13,360
user-defined functions such as the

305
00:10:13,360 --> 00:10:15,440
mapper combiner and reducer

306
00:10:15,440 --> 00:10:19,120
also executes in the enclave

307
00:10:19,120 --> 00:10:21,200
in the figure we can see how we are

308
00:10:21,200 --> 00:10:24,000
regulating the data flows of scxmr

309
00:10:24,000 --> 00:10:27,120
so it has basically three main phases so

310
00:10:27,120 --> 00:10:29,200
the map phase the sort phase and the

311
00:10:29,200 --> 00:10:30,399
reduced phase

312
00:10:30,399 --> 00:10:32,320
so in the map phase we if we see in the

313
00:10:32,320 --> 00:10:33,519
figure it

314
00:10:33,519 --> 00:10:35,920
read the blocks sequentially and perform

315
00:10:35,920 --> 00:10:36,880
the mapping

316
00:10:36,880 --> 00:10:39,200
uh mapping task and send the result to

317
00:10:39,200 --> 00:10:40,240
the combiner

318
00:10:40,240 --> 00:10:42,399
when combiner receives the data it

319
00:10:42,399 --> 00:10:44,160
aggregates the output

320
00:10:44,160 --> 00:10:47,040
output of the map and the sequentially

321
00:10:47,040 --> 00:10:49,279
writes the block to the untrusted memory

322
00:10:49,279 --> 00:10:51,600
when the map phase is done then the sort

323
00:10:51,600 --> 00:10:53,200
phase starts performing

324
00:10:53,200 --> 00:10:56,480
uh so it it source the mapped uh mapped

325
00:10:56,480 --> 00:10:57,120
and combined

326
00:10:57,120 --> 00:10:59,040
output and read and write the data

327
00:10:59,040 --> 00:11:00,240
blocks of

328
00:11:00,240 --> 00:11:02,800
to the untrusted memory and at the end

329
00:11:02,800 --> 00:11:04,240
the reduced phase

330
00:11:04,240 --> 00:11:06,480
performs as same as the map phase it

331
00:11:06,480 --> 00:11:08,720
sequentially read the sorted blocks

332
00:11:08,720 --> 00:11:11,120
and aggregate the group wise results and

333
00:11:11,120 --> 00:11:13,279
finally sequentially write the day

334
00:11:13,279 --> 00:11:17,279
write the blocks to the untrusted memory

335
00:11:17,680 --> 00:11:20,240
while regulating the data flows of the

336
00:11:20,240 --> 00:11:20,800
sgx

337
00:11:20,800 --> 00:11:23,680
mr our analysis shows that there are

338
00:11:23,680 --> 00:11:25,040
multiple critical

339
00:11:25,040 --> 00:11:26,839
sections that leak sensitive

340
00:11:26,839 --> 00:11:28,079
informations

341
00:11:28,079 --> 00:11:30,800
some of the key information leakages are

342
00:11:30,800 --> 00:11:32,320
that there are leakages in

343
00:11:32,320 --> 00:11:34,720
merge sort while performing the merge

344
00:11:34,720 --> 00:11:37,600
sort the relative order between the

345
00:11:37,600 --> 00:11:39,600
between the records can be leaked from

346
00:11:39,600 --> 00:11:42,640
the block access patterns and then there

347
00:11:42,640 --> 00:11:43,279
are

348
00:11:43,279 --> 00:11:45,680
the reduced phase leaks the group size

349
00:11:45,680 --> 00:11:47,360
of the aggregated results

350
00:11:47,360 --> 00:11:50,000
and also if we see there are in enclave

351
00:11:50,000 --> 00:11:51,120
access patterns

352
00:11:51,120 --> 00:11:53,519
that leaks the data dependent branching

353
00:11:53,519 --> 00:11:54,800
from the enclave

354
00:11:54,800 --> 00:11:58,079
the the the the operating system can

355
00:11:58,079 --> 00:12:00,560
observe the page access patterns to find

356
00:12:00,560 --> 00:12:01,360
out the

357
00:12:01,360 --> 00:12:03,760
data dependent branching so we have

358
00:12:03,760 --> 00:12:04,639
analyzed

359
00:12:04,639 --> 00:12:06,720
each of the leakages and proposed the

360
00:12:06,720 --> 00:12:08,079
mitigation methods

361
00:12:08,079 --> 00:12:12,079
for each of them mitigation methods

362
00:12:12,079 --> 00:12:14,399
we replace the merge sort with oblivious

363
00:12:14,399 --> 00:12:15,200
sword

364
00:12:15,200 --> 00:12:17,519
we adopted by tonic sword because it

365
00:12:17,519 --> 00:12:18,639
provides the

366
00:12:18,639 --> 00:12:20,720
identical access patterns irrespective

367
00:12:20,720 --> 00:12:22,639
of nature of the data set

368
00:12:22,639 --> 00:12:24,399
although by tonic sword incurs a

369
00:12:24,399 --> 00:12:26,320
significant cost because the the

370
00:12:26,320 --> 00:12:27,360
complexity of

371
00:12:27,360 --> 00:12:30,160
the sword is n log square n which is

372
00:12:30,160 --> 00:12:32,320
login times slower than the traditional

373
00:12:32,320 --> 00:12:33,760
merge sort

374
00:12:33,760 --> 00:12:36,800
to protect the indian clavices patterns

375
00:12:36,800 --> 00:12:37,360
we

376
00:12:37,360 --> 00:12:40,000
leverages the oblivious operations even

377
00:12:40,000 --> 00:12:41,120
in the enclave

378
00:12:41,120 --> 00:12:44,000
we apply oblivious swap copy and obvious

379
00:12:44,000 --> 00:12:44,880
merge

380
00:12:44,880 --> 00:12:46,480
to protect the in-enclave excess

381
00:12:46,480 --> 00:12:48,959
patterns also we made the block level

382
00:12:48,959 --> 00:12:49,760
combiner

383
00:12:49,760 --> 00:12:52,000
mandatory to protect the group size in

384
00:12:52,000 --> 00:12:53,200
the reduced phase

385
00:12:53,200 --> 00:12:56,000
finally the synergy of the curated

386
00:12:56,000 --> 00:12:56,720
components

387
00:12:56,720 --> 00:12:59,600
hides all the excess pattern leakages

388
00:12:59,600 --> 00:13:00,639
efficiently

389
00:13:00,639 --> 00:13:04,000
so we protect the relative order

390
00:13:04,000 --> 00:13:07,360
by protecting the sorting we protect the

391
00:13:07,360 --> 00:13:09,519
indian climaxes patterns and also

392
00:13:09,519 --> 00:13:11,920
we protect the reduce uh protect the

393
00:13:11,920 --> 00:13:15,519
group size of the reduced phases

394
00:13:15,519 --> 00:13:17,760
for experimental evaluation we

395
00:13:17,760 --> 00:13:20,399
implemented the prototype of the sgx

396
00:13:20,399 --> 00:13:22,639
mr uh the entire framework we have

397
00:13:22,639 --> 00:13:24,480
written in c plus plus

398
00:13:24,480 --> 00:13:26,720
the core framework uh written within the

399
00:13:26,720 --> 00:13:28,560
2000 lines of code

400
00:13:28,560 --> 00:13:30,720
and also the entire framework runs in

401
00:13:30,720 --> 00:13:31,760
the enclave

402
00:13:31,760 --> 00:13:34,639
except for the starter program we

403
00:13:34,639 --> 00:13:37,440
implemented the custom bitonic sort

404
00:13:37,440 --> 00:13:40,000
that adopt the block level operation and

405
00:13:40,000 --> 00:13:42,160
also covers all the proposed mitigation

406
00:13:42,160 --> 00:13:43,199
methods

407
00:13:43,199 --> 00:13:45,279
and also we leverages the seam of

408
00:13:45,279 --> 00:13:47,040
instructions for

409
00:13:47,040 --> 00:13:49,120
conditional swaps and the sensitive

410
00:13:49,120 --> 00:13:50,959
branching patterns

411
00:13:50,959 --> 00:13:54,480
and finally if we relies on the 128-bit

412
00:13:54,480 --> 00:13:56,800
aes counter mode encryptions

413
00:13:56,800 --> 00:14:00,399
from the sgx sdk

414
00:14:00,399 --> 00:14:02,639
we experimented sgxmr with two

415
00:14:02,639 --> 00:14:04,800
applications the word count problem

416
00:14:04,800 --> 00:14:07,680
and the chemist clustering to compare

417
00:14:07,680 --> 00:14:08,800
the baseline version

418
00:14:08,800 --> 00:14:10,959
we compare our result with the orm-based

419
00:14:10,959 --> 00:14:12,079
approaches

420
00:14:12,079 --> 00:14:14,079
we applied the orem integrated merge

421
00:14:14,079 --> 00:14:16,399
sword with the seam of protection

422
00:14:16,399 --> 00:14:18,560
we utilizes the zero trace oram

423
00:14:18,560 --> 00:14:21,199
implementation which is the fastest sgx

424
00:14:21,199 --> 00:14:23,600
base ram

425
00:14:23,600 --> 00:14:26,000
experimental results here we want to

426
00:14:26,000 --> 00:14:27,600
show that how you're protecting the

427
00:14:27,600 --> 00:14:28,880
group size in the sgx

428
00:14:28,880 --> 00:14:31,279
mr in the left figure we are showing the

429
00:14:31,279 --> 00:14:32,560
word count problem

430
00:14:32,560 --> 00:14:34,560
the observed frequency versus the actual

431
00:14:34,560 --> 00:14:36,800
frequency uh the x-axis

432
00:14:36,800 --> 00:14:39,120
is the top hundred words ordered by the

433
00:14:39,120 --> 00:14:40,480
actual frequency

434
00:14:40,480 --> 00:14:43,600
where the y-axis is the uh the word

435
00:14:43,600 --> 00:14:45,279
frequencies of the actual

436
00:14:45,279 --> 00:14:47,760
frequency and the observed frequency if

437
00:14:47,760 --> 00:14:48,560
we see that

438
00:14:48,560 --> 00:14:51,519
we can find we we can observe that there

439
00:14:51,519 --> 00:14:53,279
is no relation between the observed

440
00:14:53,279 --> 00:14:55,279
frequency and the actual frequency

441
00:14:55,279 --> 00:14:56,720
and the observed frequency from the

442
00:14:56,720 --> 00:15:00,000
reducer comes completely at random

443
00:15:00,000 --> 00:15:02,000
and in the right side we see that the

444
00:15:02,000 --> 00:15:03,279
k-means clustering

445
00:15:03,279 --> 00:15:05,680
the cluster size is in the y-axis and

446
00:15:05,680 --> 00:15:06,800
the logarithmic

447
00:15:06,800 --> 00:15:09,920
scale we see here also we see that the

448
00:15:09,920 --> 00:15:12,000
observed size is actually completely

449
00:15:12,000 --> 00:15:14,480
identical

450
00:15:14,480 --> 00:15:17,519
so that the attacker cannot cannot be

451
00:15:17,519 --> 00:15:18,639
able to distinguish

452
00:15:18,639 --> 00:15:21,839
the uh the cluster size from the

453
00:15:21,839 --> 00:15:26,079
uh from the k-means clustering algorithm

454
00:15:26,079 --> 00:15:27,519
finally the application based

455
00:15:27,519 --> 00:15:29,920
evaluations in the left side we have

456
00:15:29,920 --> 00:15:31,680
shown the word count problem and the

457
00:15:31,680 --> 00:15:33,759
right side we show that

458
00:15:33,759 --> 00:15:35,920
the k-means clustering for both of the

459
00:15:35,920 --> 00:15:38,480
graph we have compared the sjx mr with

460
00:15:38,480 --> 00:15:40,639
the orm-based implementation

461
00:15:40,639 --> 00:15:43,279
so we can see that in in the both graph

462
00:15:43,279 --> 00:15:44,000
we see

463
00:15:44,000 --> 00:15:46,720
that the sgx mr performs several times

464
00:15:46,720 --> 00:15:48,000
faster than the oran-based

465
00:15:48,000 --> 00:15:49,040
implementations

466
00:15:49,040 --> 00:15:52,320
and also if we increase the data size uh

467
00:15:52,320 --> 00:15:55,199
the rem bar will go higher than the

468
00:15:55,199 --> 00:15:57,680
current version

469
00:15:57,680 --> 00:16:00,959
so to sum up everything sgx mr avoids

470
00:16:00,959 --> 00:16:03,040
the expensive oram as the block input

471
00:16:03,040 --> 00:16:04,399
output operations

472
00:16:04,399 --> 00:16:06,320
and it also avoids the error prone

473
00:16:06,320 --> 00:16:09,120
application specific design of the

474
00:16:09,120 --> 00:16:11,839
access pattern protections it uses the

475
00:16:11,839 --> 00:16:14,079
mapreduce to regulate the data flows

476
00:16:14,079 --> 00:16:16,160
it protects a large class of the data

477
00:16:16,160 --> 00:16:17,839
intensive applications

478
00:16:17,839 --> 00:16:21,040
and it addresses both the access pattern

479
00:16:21,040 --> 00:16:26,639
text and the page folder tags thank you

