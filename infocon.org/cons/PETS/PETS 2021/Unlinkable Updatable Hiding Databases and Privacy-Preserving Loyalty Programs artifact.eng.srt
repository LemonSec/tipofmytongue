1
00:00:01,280 --> 00:00:03,679
hello our paper is titled unlinkable

2
00:00:03,679 --> 00:00:05,920
updatable hiding databases and privacy

3
00:00:05,920 --> 00:00:08,320
preserving loyalty programs

4
00:00:08,320 --> 00:00:10,480
the authors of this paper were myself

5
00:00:10,480 --> 00:00:12,320
and alfredo real and we were

6
00:00:12,320 --> 00:00:14,080
this work was done while we were both at

7
00:00:14,080 --> 00:00:16,320
the university of luxembourg

8
00:00:16,320 --> 00:00:18,800
this paper has also been funded by the

9
00:00:18,800 --> 00:00:22,400
luxembourg national research fund

10
00:00:22,400 --> 00:00:24,080
a loyalty program is a marketing

11
00:00:24,080 --> 00:00:25,760
strategy where you have a buyer who

12
00:00:25,760 --> 00:00:28,400
makes some purchases from a vendor and

13
00:00:28,400 --> 00:00:29,439
then this vendor

14
00:00:29,439 --> 00:00:31,439
collects information on these purchases

15
00:00:31,439 --> 00:00:33,200
collates them and eventually computes

16
00:00:33,200 --> 00:00:34,480
profiles for every

17
00:00:34,480 --> 00:00:36,239
buyer that purchases things from this

18
00:00:36,239 --> 00:00:37,760
vendor

19
00:00:37,760 --> 00:00:39,520
and this is done uh typically in

20
00:00:39,520 --> 00:00:41,120
exchange for loyalty points

21
00:00:41,120 --> 00:00:42,960
but this can reveal privacy sensitive

22
00:00:42,960 --> 00:00:45,520
information

23
00:00:45,520 --> 00:00:47,360
there are two main types of existing

24
00:00:47,360 --> 00:00:48,879
schemes in literature

25
00:00:48,879 --> 00:00:51,760
the first type relates to seams where

26
00:00:51,760 --> 00:00:53,039
vendors are not allowed to collect

27
00:00:53,039 --> 00:00:54,960
purchase histories at all

28
00:00:54,960 --> 00:00:56,960
the second type relates to cases where

29
00:00:56,960 --> 00:00:58,000
vendors are allowed to collect

30
00:00:58,000 --> 00:01:00,719
some information on purchase histories

31
00:01:00,719 --> 00:01:01,039
so

32
00:01:01,039 --> 00:01:03,280
in the first case you have schemes that

33
00:01:03,280 --> 00:01:04,720
use blind signatures

34
00:01:04,720 --> 00:01:06,880
updatable anonymous credentials and

35
00:01:06,880 --> 00:01:09,280
unlinkable loyalty cards

36
00:01:09,280 --> 00:01:10,960
and then you also have blind signatures

37
00:01:10,960 --> 00:01:12,479
and anonymous credentials in the second

38
00:01:12,479 --> 00:01:14,240
class

39
00:01:14,240 --> 00:01:15,759
now when it comes to these existing

40
00:01:15,759 --> 00:01:17,920
schemes there are a few shortcomings the

41
00:01:17,920 --> 00:01:19,439
first is that all purchases are not

42
00:01:19,439 --> 00:01:21,520
unlinkable

43
00:01:21,520 --> 00:01:23,200
the second shortcoming is that there is

44
00:01:23,200 --> 00:01:24,720
a lack of privacy with regard to

45
00:01:24,720 --> 00:01:26,400
purchase histories as in they reveal too

46
00:01:26,400 --> 00:01:27,920
much information

47
00:01:27,920 --> 00:01:30,159
and finally these schemes lack modular

48
00:01:30,159 --> 00:01:32,320
design

49
00:01:32,320 --> 00:01:34,159
we propose a scheme which resolves these

50
00:01:34,159 --> 00:01:35,759
shortcomings

51
00:01:35,759 --> 00:01:38,000
firstly we ensure that all purchases

52
00:01:38,000 --> 00:01:40,960
made in our scheme are unlinkable

53
00:01:40,960 --> 00:01:42,399
and then the scheme preserves buyer

54
00:01:42,399 --> 00:01:44,240
privacy and avoids purchase history

55
00:01:44,240 --> 00:01:45,920
disclosure while still allowing for

56
00:01:45,920 --> 00:01:47,520
profiling

57
00:01:47,520 --> 00:01:49,200
and finally we have designed our

58
00:01:49,200 --> 00:01:50,960
protocol modularly using the uc

59
00:01:50,960 --> 00:01:54,079
framework so in this paper we have

60
00:01:54,079 --> 00:01:55,759
come up with a new definition for an

61
00:01:55,759 --> 00:01:57,600
ideal functionality for what we refer to

62
00:01:57,600 --> 00:01:59,520
as a hiding database

63
00:01:59,520 --> 00:02:01,360
and then we have a functionality for our

64
00:02:01,360 --> 00:02:03,840
loyalty program and finally we have a

65
00:02:03,840 --> 00:02:08,000
uc secure loyalty program scheme

66
00:02:08,000 --> 00:02:09,679
we use the universal composability

67
00:02:09,679 --> 00:02:12,720
framework to design our protocols

68
00:02:12,720 --> 00:02:14,640
and the the basic idea behind the

69
00:02:14,640 --> 00:02:16,400
universal composability framework is

70
00:02:16,400 --> 00:02:17,280
that

71
00:02:17,280 --> 00:02:19,360
we have an ideal protocol which consists

72
00:02:19,360 --> 00:02:20,640
of the parties in the protocol

73
00:02:20,640 --> 00:02:21,520
themselves

74
00:02:21,520 --> 00:02:24,239
and an ideal functionality the ideal

75
00:02:24,239 --> 00:02:26,000
functionality gathers all inputs from

76
00:02:26,000 --> 00:02:26,480
these

77
00:02:26,480 --> 00:02:28,480
parties computes the outputs and sends

78
00:02:28,480 --> 00:02:30,560
them back to the parties

79
00:02:30,560 --> 00:02:32,239
and this functionality is also designed

80
00:02:32,239 --> 00:02:33,680
in such a way that the security

81
00:02:33,680 --> 00:02:35,440
properties we wish to guarantee with the

82
00:02:35,440 --> 00:02:36,000
protocol

83
00:02:36,000 --> 00:02:39,280
hold so in a sense this

84
00:02:39,280 --> 00:02:43,360
this protocol is secure by definition

85
00:02:43,440 --> 00:02:45,280
and now we say that our protocol

86
00:02:45,280 --> 00:02:48,000
securely realizes this ideal protocol

87
00:02:48,000 --> 00:02:50,800
if we have an entity which we refer to

88
00:02:50,800 --> 00:02:52,319
as an environment

89
00:02:52,319 --> 00:02:54,080
which can interact with the ideal

90
00:02:54,080 --> 00:02:56,160
protocol and

91
00:02:56,160 --> 00:02:59,680
a simulator and on the other side it

92
00:02:59,680 --> 00:03:03,040
interacts with the protocol in the real

93
00:03:03,040 --> 00:03:03,680
world

94
00:03:03,680 --> 00:03:07,120
and an adversary so if the view of the

95
00:03:07,120 --> 00:03:08,159
environment in both

96
00:03:08,159 --> 00:03:09,760
cases is the same and it cannot

97
00:03:09,760 --> 00:03:11,760
distinguish between the real world and

98
00:03:11,760 --> 00:03:13,440
the ideal world we see that the protocol

99
00:03:13,440 --> 00:03:16,239
securely realizes this ideal protocol

100
00:03:16,239 --> 00:03:20,800
and the security properties hold

101
00:03:20,800 --> 00:03:23,440
and we use this framework to define the

102
00:03:23,440 --> 00:03:24,720
protocols in

103
00:03:24,720 --> 00:03:27,760
the following slides so we basically we

104
00:03:27,760 --> 00:03:29,440
we come up with an ideal functionality

105
00:03:29,440 --> 00:03:30,720
for what we want to do with the

106
00:03:30,720 --> 00:03:33,040
properties that we wish to guarantee

107
00:03:33,040 --> 00:03:35,599
and then we have a construction for this

108
00:03:35,599 --> 00:03:37,120
the real protocol which securely

109
00:03:37,120 --> 00:03:38,720
realizes the functionalities that we've

110
00:03:38,720 --> 00:03:41,200
defined

111
00:03:41,680 --> 00:03:43,360
so this is the ideal functionality for

112
00:03:43,360 --> 00:03:45,360
our hiring database and the database

113
00:03:45,360 --> 00:03:46,159
supports two

114
00:03:46,159 --> 00:03:48,000
operations the first is a read operation

115
00:03:48,000 --> 00:03:50,159
where a reader can read an entry in a

116
00:03:50,159 --> 00:03:51,200
database

117
00:03:51,200 --> 00:03:52,879
whilst proving to the updater that it is

118
00:03:52,879 --> 00:03:54,799
reading a valid entry

119
00:03:54,799 --> 00:03:57,360
and this during a read operation both

120
00:03:57,360 --> 00:03:59,040
the position and the value of the data

121
00:03:59,040 --> 00:04:02,000
being read are hidden from the updater

122
00:04:02,000 --> 00:04:04,000
in an update operation an updater can

123
00:04:04,000 --> 00:04:06,239
update a reader's copy of its database

124
00:04:06,239 --> 00:04:08,000
without

125
00:04:08,000 --> 00:04:09,360
without reading the contents of this

126
00:04:09,360 --> 00:04:11,439
database

127
00:04:11,439 --> 00:04:13,280
and multiple readers can interact with

128
00:04:13,280 --> 00:04:14,720
this ideal functionality but we have

129
00:04:14,720 --> 00:04:17,760
just one updater

130
00:04:23,040 --> 00:04:24,560
there are three security properties we

131
00:04:24,560 --> 00:04:25,919
wish to guarantee with this ideal

132
00:04:25,919 --> 00:04:27,040
functionality

133
00:04:27,040 --> 00:04:30,240
the first is that of unlinkability the

134
00:04:30,240 --> 00:04:32,080
functionality uses a unique pseudonym to

135
00:04:32,080 --> 00:04:32,800
hide the

136
00:04:32,800 --> 00:04:35,919
reader's identity from an updater

137
00:04:35,919 --> 00:04:38,000
and then we also guarantee hiding in the

138
00:04:38,000 --> 00:04:39,199
sense that

139
00:04:39,199 --> 00:04:40,479
the functionality reveals only

140
00:04:40,479 --> 00:04:42,240
commitments to the updater upon a read

141
00:04:42,240 --> 00:04:44,080
interface invocation

142
00:04:44,080 --> 00:04:45,680
and these are hiding commitments so the

143
00:04:45,680 --> 00:04:47,120
updater does not

144
00:04:47,120 --> 00:04:49,040
get to learn the contents of the

145
00:04:49,040 --> 00:04:51,520
reader's database

146
00:04:51,520 --> 00:04:52,880
and finally we also guarantee

147
00:04:52,880 --> 00:04:55,520
unforgeability so that the reader cannot

148
00:04:55,520 --> 00:04:56,560
modify

149
00:04:56,560 --> 00:04:58,479
the database itself and it cannot read

150
00:04:58,479 --> 00:05:00,400
false database entries

151
00:05:00,400 --> 00:05:02,880
the reader can also not make the updater

152
00:05:02,880 --> 00:05:06,639
update an older version of the database

153
00:05:07,039 --> 00:05:08,560
we now propose a protocol in the

154
00:05:08,560 --> 00:05:10,479
universal composability framework that

155
00:05:10,479 --> 00:05:12,080
securely realizes the ideal

156
00:05:12,080 --> 00:05:13,680
functionality for hiding database that

157
00:05:13,680 --> 00:05:15,440
we've just seen

158
00:05:15,440 --> 00:05:17,440
we will also describe how this

159
00:05:17,440 --> 00:05:19,280
construction allows for read and update

160
00:05:19,280 --> 00:05:21,600
operations

161
00:05:21,600 --> 00:05:23,199
we use a vector commitment scheme to

162
00:05:23,199 --> 00:05:25,759
store databases in our protocol

163
00:05:25,759 --> 00:05:27,280
a vector commitment scheme allows you to

164
00:05:27,280 --> 00:05:29,840
commit to a vector of values

165
00:05:29,840 --> 00:05:31,520
and this vector commitment can then be

166
00:05:31,520 --> 00:05:33,919
open to any position and value in

167
00:05:33,919 --> 00:05:37,199
the vector and as

168
00:05:37,199 --> 00:05:39,199
every value in this vector is associated

169
00:05:39,199 --> 00:05:41,039
with the position value

170
00:05:41,039 --> 00:05:42,960
we can use this vector to store a

171
00:05:42,960 --> 00:05:44,240
database of the form i

172
00:05:44,240 --> 00:05:46,560
v ri where i represents positions and

173
00:05:46,560 --> 00:05:48,240
vri represents

174
00:05:48,240 --> 00:05:51,280
values in the vector

175
00:05:51,440 --> 00:05:52,960
the vector commitment scheme we use in

176
00:05:52,960 --> 00:05:54,880
our protocol guarantees two security

177
00:05:54,880 --> 00:05:56,240
properties

178
00:05:56,240 --> 00:05:59,120
the first property is hiding wherein the

179
00:05:59,120 --> 00:06:00,639
vector commitment does not reveal any

180
00:06:00,639 --> 00:06:02,000
information on the contents of the

181
00:06:02,000 --> 00:06:04,160
vector itself

182
00:06:04,160 --> 00:06:06,720
and the second property is binding which

183
00:06:06,720 --> 00:06:08,080
basically means that you can't have a

184
00:06:08,080 --> 00:06:09,840
vector commitment that commits to two

185
00:06:09,840 --> 00:06:10,319
different

186
00:06:10,319 --> 00:06:12,800
vectors

187
00:06:14,639 --> 00:06:17,280
another property we guarantee with our

188
00:06:17,280 --> 00:06:18,880
vector commitment is that of additive

189
00:06:18,880 --> 00:06:21,840
homomorphism

190
00:06:21,919 --> 00:06:24,000
so let's assume that we have two vectors

191
00:06:24,000 --> 00:06:25,840
x1 and x2

192
00:06:25,840 --> 00:06:27,680
and we generate vector commitments to

193
00:06:27,680 --> 00:06:29,199
these vectors so that's

194
00:06:29,199 --> 00:06:32,720
vc1 and vc2

195
00:06:32,720 --> 00:06:34,560
with a homomorphic operation we get

196
00:06:34,560 --> 00:06:36,319
another vector commitment

197
00:06:36,319 --> 00:06:39,600
and this third commitment is

198
00:06:39,600 --> 00:06:42,960
a commitment to the vector we receive as

199
00:06:42,960 --> 00:06:48,080
the result of combining x1 and x2 we

200
00:06:48,080 --> 00:06:49,840
will now look at how we allow for read

201
00:06:49,840 --> 00:06:53,039
operations in our hiring database

202
00:06:53,039 --> 00:06:54,639
when a reader first interacts with the

203
00:06:54,639 --> 00:06:57,199
updater the updater signs a vector

204
00:06:57,199 --> 00:07:00,319
commitment to an initial database db

205
00:07:00,319 --> 00:07:02,080
and sends both the database and this

206
00:07:02,080 --> 00:07:05,199
vector commitment to the radar

207
00:07:05,199 --> 00:07:07,120
the reader then re-randomizes this

208
00:07:07,120 --> 00:07:10,400
vector commitment vc to vc dash

209
00:07:10,400 --> 00:07:12,080
and proves to the updater in zero

210
00:07:12,080 --> 00:07:13,599
knowledge that vc dash is indeed a

211
00:07:13,599 --> 00:07:15,759
re-randomized version of a commitment

212
00:07:15,759 --> 00:07:17,120
that was previously signed by the

213
00:07:17,120 --> 00:07:19,280
updater

214
00:07:19,280 --> 00:07:20,800
the reader can now prove statements

215
00:07:20,800 --> 00:07:22,479
about the database committed to in vc

216
00:07:22,479 --> 00:07:25,758
dash to the updater

217
00:07:25,919 --> 00:07:27,599
and that brings us to the update phase

218
00:07:27,599 --> 00:07:29,360
of the hiding database where the updater

219
00:07:29,360 --> 00:07:31,280
updates a reader's copy of its database

220
00:07:31,280 --> 00:07:32,080
with

221
00:07:32,080 --> 00:07:35,039
some information while the reader's data

222
00:07:35,039 --> 00:07:37,199
is hidden from the updater

223
00:07:37,199 --> 00:07:40,000
so what you see on the first line is the

224
00:07:40,000 --> 00:07:41,280
set of

225
00:07:41,280 --> 00:07:42,800
entries that the updater wishes to

226
00:07:42,800 --> 00:07:44,720
update the reader's copy of its database

227
00:07:44,720 --> 00:07:46,000
width

228
00:07:46,000 --> 00:07:47,759
and the database on the second line is

229
00:07:47,759 --> 00:07:49,680
the reader's copy of its database which

230
00:07:49,680 --> 00:07:52,400
is hidden from the operator

231
00:07:52,400 --> 00:07:54,319
the updater computes a vector commitment

232
00:07:54,319 --> 00:07:55,680
vc2 to this

233
00:07:55,680 --> 00:07:58,879
to its database of updates and

234
00:07:58,879 --> 00:08:00,720
the reader already has a re-randomized

235
00:08:00,720 --> 00:08:02,080
version of a vector commitment

236
00:08:02,080 --> 00:08:04,878
from the updater

237
00:08:05,680 --> 00:08:08,000
so through homomorphism we have a

238
00:08:08,000 --> 00:08:09,680
homomorphic operation which gives us

239
00:08:09,680 --> 00:08:12,479
another vector commitment vcu

240
00:08:12,479 --> 00:08:14,879
which essentially is a vector commitment

241
00:08:14,879 --> 00:08:16,720
to the database which

242
00:08:16,720 --> 00:08:18,720
we get as a result of combining these

243
00:08:18,720 --> 00:08:21,120
values

244
00:08:21,120 --> 00:08:23,520
and this new vector commitment is sent

245
00:08:23,520 --> 00:08:27,280
to the reader

246
00:08:27,280 --> 00:08:29,919
the reader does the same on the reader

247
00:08:29,919 --> 00:08:31,120
takes these updates and

248
00:08:31,120 --> 00:08:34,320
updates its own copy of its database

249
00:08:34,320 --> 00:08:37,360
and it updates its local copy of its

250
00:08:37,360 --> 00:08:38,880
vector commitment with this new vector

251
00:08:38,880 --> 00:08:41,838
commitment vcu

252
00:08:42,000 --> 00:08:43,679
we also make use of a double spending

253
00:08:43,679 --> 00:08:47,360
detection mechanism in our database

254
00:08:47,360 --> 00:08:48,959
where the reader and the operator

255
00:08:48,959 --> 00:08:51,600
compute two random values s1 and s2

256
00:08:51,600 --> 00:08:53,760
respectively

257
00:08:53,760 --> 00:08:55,760
and the reader generates a commitment c1

258
00:08:55,760 --> 00:08:57,839
to s1 and sends this commitment

259
00:08:57,839 --> 00:09:01,200
to you during a read operation

260
00:09:01,200 --> 00:09:04,480
u in turn generates a commitment c2 to

261
00:09:04,480 --> 00:09:05,200
s2

262
00:09:05,200 --> 00:09:08,080
and computes c which is the result of an

263
00:09:08,080 --> 00:09:09,279
operation

264
00:09:09,279 --> 00:09:11,360
a homomorphic operation between c1 and

265
00:09:11,360 --> 00:09:12,640
c2

266
00:09:12,640 --> 00:09:14,640
and signs this commitment along with

267
00:09:14,640 --> 00:09:16,480
every vector commitment that is sent to

268
00:09:16,480 --> 00:09:17,760
the other party

269
00:09:17,760 --> 00:09:20,399
during an update operation the

270
00:09:20,399 --> 00:09:22,320
commitment and s2 are both sent

271
00:09:22,320 --> 00:09:25,839
to the reader and now when the reader

272
00:09:25,839 --> 00:09:27,920
invokes the read interface again

273
00:09:27,920 --> 00:09:30,000
it re-randomizes c and sends it to the

274
00:09:30,000 --> 00:09:31,120
updater

275
00:09:31,120 --> 00:09:32,800
and then proves to the updater that this

276
00:09:32,800 --> 00:09:34,880
was a seed that was

277
00:09:34,880 --> 00:09:38,320
first signed by the updater and later on

278
00:09:38,320 --> 00:09:40,480
the reader opens the c dash to s which

279
00:09:40,480 --> 00:09:42,000
is

280
00:09:42,000 --> 00:09:45,440
s1 plus s2 and now the updater checks if

281
00:09:45,440 --> 00:09:45,680
s

282
00:09:45,680 --> 00:09:48,480
has been received before and if this is

283
00:09:48,480 --> 00:09:49,680
not the case then

284
00:09:49,680 --> 00:09:51,600
you knows that the reader is not reading

285
00:09:51,600 --> 00:09:54,240
an older version of the database

286
00:09:54,240 --> 00:09:56,240
and because we're doing this these steps

287
00:09:56,240 --> 00:09:57,839
have to have to be repeated for every

288
00:09:57,839 --> 00:09:59,680
read and update sequence

289
00:09:59,680 --> 00:10:01,279
and the message space of the commitment

290
00:10:01,279 --> 00:10:02,800
scheme are using should be large to

291
00:10:02,800 --> 00:10:05,839
avoid collisions

292
00:10:05,920 --> 00:10:07,519
in a read operation the reader must

293
00:10:07,519 --> 00:10:09,360
compute openings for every position that

294
00:10:09,360 --> 00:10:10,480
is read

295
00:10:10,480 --> 00:10:12,640
and because we're doing this computation

296
00:10:12,640 --> 00:10:14,160
costs grow linearly with the

297
00:10:14,160 --> 00:10:16,560
number of entries in the database

298
00:10:16,560 --> 00:10:18,720
however we can store these openings and

299
00:10:18,720 --> 00:10:22,480
update them with cost independent of n

300
00:10:22,560 --> 00:10:24,800
the reader also computes a commitment c1

301
00:10:24,800 --> 00:10:27,120
with constant cost

302
00:10:27,120 --> 00:10:29,200
and in the first update operation

303
00:10:29,200 --> 00:10:31,760
computation costs grow linearly with n

304
00:10:31,760 --> 00:10:34,079
but are constant if the first database

305
00:10:34,079 --> 00:10:37,200
is a vector of zeros

306
00:10:37,200 --> 00:10:39,120
subsequent updates involve the

307
00:10:39,120 --> 00:10:41,680
homomorphic property of the vc scheme

308
00:10:41,680 --> 00:10:43,600
so then these computation costs grow

309
00:10:43,600 --> 00:10:45,040
with the number of positions that are

310
00:10:45,040 --> 00:10:46,480
being updated but they are still

311
00:10:46,480 --> 00:10:49,279
independent of n

312
00:10:49,279 --> 00:10:51,920
and to summarize the mr test computation

313
00:10:51,920 --> 00:10:53,760
costs are independent of database size

314
00:10:53,760 --> 00:10:55,760
which makes our instantiation

315
00:10:55,760 --> 00:11:01,839
practical for large databases

316
00:11:02,079 --> 00:11:03,360
and now we come to the ideal

317
00:11:03,360 --> 00:11:07,279
functionality for our loyalty program

318
00:11:07,279 --> 00:11:11,120
where we have five interfaces

319
00:11:11,519 --> 00:11:13,519
we use a unique pseudonymp for every

320
00:11:13,519 --> 00:11:14,560
operation except

321
00:11:14,560 --> 00:11:17,279
an update db operation between a buyer a

322
00:11:17,279 --> 00:11:18,240
vendor and

323
00:11:18,240 --> 00:11:20,240
the ideal functionality for this loyalty

324
00:11:20,240 --> 00:11:22,240
program we do this to a lot of

325
00:11:22,240 --> 00:11:24,399
unlinkability

326
00:11:24,399 --> 00:11:26,560
first we have a register interface where

327
00:11:26,560 --> 00:11:28,160
the buyer can register with

328
00:11:28,160 --> 00:11:30,320
a vendor for a loyalty program using a

329
00:11:30,320 --> 00:11:32,800
pseudonym

330
00:11:32,800 --> 00:11:34,800
and then we have an update db interface

331
00:11:34,800 --> 00:11:35,839
where the

332
00:11:35,839 --> 00:11:38,240
vendor can update a bios copy of its

333
00:11:38,240 --> 00:11:40,800
database

334
00:11:41,279 --> 00:11:43,600
we also have a purchase interface where

335
00:11:43,600 --> 00:11:45,519
a buyer can make purchases with the

336
00:11:45,519 --> 00:11:47,839
vendor

337
00:11:47,839 --> 00:11:50,160
and we have a redeem interface where the

338
00:11:50,160 --> 00:11:51,200
buyer can redeem

339
00:11:51,200 --> 00:11:53,120
some of its royalty points with the

340
00:11:53,120 --> 00:11:55,200
vendor

341
00:11:55,200 --> 00:11:57,360
and finally we have a profile interface

342
00:11:57,360 --> 00:11:58,320
where

343
00:11:58,320 --> 00:12:00,720
the user the buyer takes a function as

344
00:12:00,720 --> 00:12:01,839
input

345
00:12:01,839 --> 00:12:03,279
and reveals the output of this function

346
00:12:03,279 --> 00:12:06,000
to the vendor

347
00:12:06,160 --> 00:12:07,920
we propose a protocol in the universal

348
00:12:07,920 --> 00:12:09,600
composability framework that securely

349
00:12:09,600 --> 00:12:11,360
realizes the ideal functionality for a

350
00:12:11,360 --> 00:12:13,519
loyalty program that we've just seen

351
00:12:13,519 --> 00:12:15,920
and we're also now going to describe how

352
00:12:15,920 --> 00:12:17,279
this construction has been designed

353
00:12:17,279 --> 00:12:18,800
modularly and how it allows for

354
00:12:18,800 --> 00:12:20,079
unlinkable purchases

355
00:12:20,079 --> 00:12:22,560
and how it also preserves buyer privacy

356
00:12:22,560 --> 00:12:25,839
while allowing for profiling

357
00:12:26,240 --> 00:12:28,160
now because we've designed our protocol

358
00:12:28,160 --> 00:12:29,760
in the uc framework

359
00:12:29,760 --> 00:12:32,240
following modular design we make use of

360
00:12:32,240 --> 00:12:33,920
multiple ideal functionalities in this

361
00:12:33,920 --> 00:12:35,200
protocol

362
00:12:35,200 --> 00:12:37,680
the first is that of a hiding database

363
00:12:37,680 --> 00:12:39,279
and then we have one for non-interactive

364
00:12:39,279 --> 00:12:40,560
commitments

365
00:12:40,560 --> 00:12:43,440
another for a pseudonymous channel and

366
00:12:43,440 --> 00:12:46,560
two for zero knowledge

367
00:12:48,160 --> 00:12:49,920
because we're using multiple ideal

368
00:12:49,920 --> 00:12:51,920
functionalities we need to ensure that

369
00:12:51,920 --> 00:12:53,279
two or more of these functionalities

370
00:12:53,279 --> 00:12:55,120
receive the same input in

371
00:12:55,120 --> 00:12:58,639
several instances in our protocol

372
00:12:58,639 --> 00:13:01,120
so for instance we need to prove that we

373
00:13:01,120 --> 00:13:02,240
are reading the same

374
00:13:02,240 --> 00:13:04,560
loyalty point value from the reader's

375
00:13:04,560 --> 00:13:05,680
database

376
00:13:05,680 --> 00:13:07,600
whilst we're proving this to the updater

377
00:13:07,600 --> 00:13:09,360
by sending it to an ideal functionality

378
00:13:09,360 --> 00:13:12,160
for zero knowledge

379
00:13:12,160 --> 00:13:16,160
in such cases for instance the the buyer

380
00:13:16,160 --> 00:13:18,639
takes this value and sends it to the

381
00:13:18,639 --> 00:13:21,279
non-interactive commitment functionality

382
00:13:21,279 --> 00:13:22,720
and receives a commitment and its

383
00:13:22,720 --> 00:13:26,079
opening as output

384
00:13:26,079 --> 00:13:27,680
the buyer can then send this commitment

385
00:13:27,680 --> 00:13:29,440
along with the value itself to every

386
00:13:29,440 --> 00:13:31,360
functionality

387
00:13:31,360 --> 00:13:33,120
and these commitments are sent to the

388
00:13:33,120 --> 00:13:34,399
vendor

389
00:13:34,399 --> 00:13:37,440
from these functionalities as output

390
00:13:37,440 --> 00:13:39,199
the vendor then checks whether these com

391
00:13:39,199 --> 00:13:40,480
commitments are the same

392
00:13:40,480 --> 00:13:42,560
and because the bearing property holds

393
00:13:42,560 --> 00:13:44,160
we ensure that

394
00:13:44,160 --> 00:13:47,680
the initial values were the same

395
00:13:47,680 --> 00:13:49,360
and here we describe how we allow for

396
00:13:49,360 --> 00:13:51,040
the registration phase to take place in

397
00:13:51,040 --> 00:13:52,480
our protocol

398
00:13:52,480 --> 00:13:54,160
the buyer invokes the read interface of

399
00:13:54,160 --> 00:13:56,880
the hiding database for the first time

400
00:13:56,880 --> 00:13:59,040
and the hiding database then sends a

401
00:13:59,040 --> 00:13:59,920
response to

402
00:13:59,920 --> 00:14:03,680
the vendor the vendor then invokes

403
00:14:03,680 --> 00:14:05,600
the update interface of the hiding

404
00:14:05,600 --> 00:14:09,279
database with an empty database as input

405
00:14:09,279 --> 00:14:11,120
and this in turn initializes the

406
00:14:11,120 --> 00:14:12,959
database which is sent to the

407
00:14:12,959 --> 00:14:16,800
buyer the best way to understand the

408
00:14:16,800 --> 00:14:18,160
purchase phase would be to

409
00:14:18,160 --> 00:14:22,000
imagine a card payment made with a

410
00:14:22,000 --> 00:14:24,959
scanner so when you tap your card

411
00:14:24,959 --> 00:14:26,639
against the scanner it authenticates

412
00:14:26,639 --> 00:14:27,760
with the scanner and

413
00:14:27,760 --> 00:14:29,519
the vendor already knows the price of

414
00:14:29,519 --> 00:14:31,600
the item you are trying to purchase

415
00:14:31,600 --> 00:14:33,040
so this amount has been keyed into the

416
00:14:33,040 --> 00:14:34,800
scanner and the scanner just

417
00:14:34,800 --> 00:14:38,160
updates this card so in a similar

418
00:14:38,160 --> 00:14:39,760
fashion the buyer invokes the read

419
00:14:39,760 --> 00:14:42,560
interface of the heading database

420
00:14:42,560 --> 00:14:45,279
and the vendor receives another message

421
00:14:45,279 --> 00:14:48,480
from the hiding database

422
00:14:49,040 --> 00:14:51,040
now the vendor invokes the update

423
00:14:51,040 --> 00:14:52,079
interface

424
00:14:52,079 --> 00:14:55,199
with a database of updates

425
00:14:55,199 --> 00:14:58,079
which represents the updates to the

426
00:14:58,079 --> 00:14:59,680
purchase history of the buyer for this

427
00:14:59,680 --> 00:15:01,040
purchase and

428
00:15:01,040 --> 00:15:02,720
the updates to the loyalty points stored

429
00:15:02,720 --> 00:15:05,519
in this database

430
00:15:05,839 --> 00:15:07,519
at some point the buyer may wish to

431
00:15:07,519 --> 00:15:10,079
spend its loyalty points

432
00:15:10,079 --> 00:15:11,920
to do this it invokes the read interface

433
00:15:11,920 --> 00:15:13,600
of the hiding database to read the last

434
00:15:13,600 --> 00:15:15,360
entry in the database

435
00:15:15,360 --> 00:15:17,120
this is where the loyalty points of the

436
00:15:17,120 --> 00:15:20,000
buyer are stored

437
00:15:20,160 --> 00:15:22,639
the buyer then uses the zero knowledge

438
00:15:22,639 --> 00:15:24,320
functionality to prove that

439
00:15:24,320 --> 00:15:25,839
the the amount of points it wishes to

440
00:15:25,839 --> 00:15:27,680
spend lies in the range

441
00:15:27,680 --> 00:15:29,600
zero to the amount of point amount of

442
00:15:29,600 --> 00:15:32,399
points that it already has

443
00:15:32,399 --> 00:15:35,279
and we use the the method we spoke of

444
00:15:35,279 --> 00:15:36,720
earlier to ensure that same

445
00:15:36,720 --> 00:15:38,720
loyalty point value is sent both to the

446
00:15:38,720 --> 00:15:40,240
hiding database and to this zero

447
00:15:40,240 --> 00:15:42,399
knowledge functionality

448
00:15:42,399 --> 00:15:44,399
the vendor now uses the update interface

449
00:15:44,399 --> 00:15:46,399
of the hiding database

450
00:15:46,399 --> 00:15:49,040
to update the loyalty points stored in

451
00:15:49,040 --> 00:15:51,920
the in the bios database

452
00:15:51,920 --> 00:15:53,600
so we just deduct the points that have

453
00:15:53,600 --> 00:15:55,199
been spent

454
00:15:55,199 --> 00:15:57,680
and this updates the database of the

455
00:15:57,680 --> 00:16:00,000
buyer

456
00:16:02,240 --> 00:16:05,199
in the profiling phase the buyer

457
00:16:05,199 --> 00:16:06,320
receives a function as

458
00:16:06,320 --> 00:16:08,320
input so for instance this could be an

459
00:16:08,320 --> 00:16:09,600
average function that computes the

460
00:16:09,600 --> 00:16:10,800
average of all

461
00:16:10,800 --> 00:16:12,399
purchases made by the buyer without

462
00:16:12,399 --> 00:16:16,399
revealing the purchases themselves

463
00:16:16,639 --> 00:16:19,440
and the buyer uses the read interface of

464
00:16:19,440 --> 00:16:21,199
the hiring database to read a subset of

465
00:16:21,199 --> 00:16:22,959
entries that are required to compute

466
00:16:22,959 --> 00:16:26,959
the result of function f

467
00:16:26,959 --> 00:16:29,440
the buyer also uses a zero knowledge

468
00:16:29,440 --> 00:16:30,959
functionality to prove

469
00:16:30,959 --> 00:16:32,399
the correctness of the evaluation of

470
00:16:32,399 --> 00:16:34,639
this function and to prove that it has

471
00:16:34,639 --> 00:16:38,240
read the right entries from the database

472
00:16:38,240 --> 00:16:40,000
and again we use a non-interactive

473
00:16:40,000 --> 00:16:42,240
commitment functionality to prove that

474
00:16:42,240 --> 00:16:44,800
the same value values are sent to both

475
00:16:44,800 --> 00:16:46,160
the hiring database and the zero

476
00:16:46,160 --> 00:16:48,560
knowledge

477
00:16:48,839 --> 00:16:51,759
functionality

478
00:16:51,759 --> 00:16:53,360
we implemented our protocol and then

479
00:16:53,360 --> 00:16:55,199
measured the execution times of all the

480
00:16:55,199 --> 00:16:57,120
faces in this protocol

481
00:16:57,120 --> 00:16:59,040
we also varied the size of the database

482
00:16:59,040 --> 00:17:01,680
we used between 15 000 entries to 65

483
00:17:01,680 --> 00:17:04,000
000 entries as you can see from the

484
00:17:04,000 --> 00:17:06,000
table the execution terms are largely

485
00:17:06,000 --> 00:17:09,280
independent of the database size

486
00:17:09,280 --> 00:17:12,079
and when when it comes to profiling

487
00:17:12,079 --> 00:17:14,000
profiling times depend on the

488
00:17:14,000 --> 00:17:15,599
amount of on the number of entries we

489
00:17:15,599 --> 00:17:19,760
use for the profiling function

490
00:17:19,760 --> 00:17:21,439
to conclude our protocol provides

491
00:17:21,439 --> 00:17:23,280
additional functionalities whilst also

492
00:17:23,280 --> 00:17:24,959
maintaining communication computation

493
00:17:24,959 --> 00:17:26,559
costs that are similar to protocols that

494
00:17:26,559 --> 00:17:28,559
do not provide them

495
00:17:28,559 --> 00:17:30,840
the purchases in our protocol are always

496
00:17:30,840 --> 00:17:32,320
unlinkable

497
00:17:32,320 --> 00:17:34,000
and the scheme preserves buyer privacy

498
00:17:34,000 --> 00:17:35,760
and avoids purchase history disclosure

499
00:17:35,760 --> 00:17:38,640
while still allowing for profiling

500
00:17:38,640 --> 00:17:40,480
and as we've used the uc framework to

501
00:17:40,480 --> 00:17:42,559
design this protocol it follows modular

502
00:17:42,559 --> 00:17:43,919
design

503
00:17:43,919 --> 00:17:47,840
thank you

