1
00:00:01,040 --> 00:00:03,360
hello everybody today i will present our

2
00:00:03,360 --> 00:00:05,759
paper fortified multiparty computation

3
00:00:05,759 --> 00:00:07,600
taking advantage of simple secure

4
00:00:07,600 --> 00:00:09,519
hardware modules

5
00:00:09,519 --> 00:00:11,920
now as the name already implies this

6
00:00:11,920 --> 00:00:13,360
work is about the criminal party

7
00:00:13,360 --> 00:00:14,320
computation

8
00:00:14,320 --> 00:00:16,640
which deals with the following problem a

9
00:00:16,640 --> 00:00:17,600
group of parties

10
00:00:17,600 --> 00:00:19,199
who do not trust each other want to

11
00:00:19,199 --> 00:00:21,119
evaluate some predefined function

12
00:00:21,119 --> 00:00:24,480
on their private inputs for instance

13
00:00:24,480 --> 00:00:26,480
these parties may want to carry out an

14
00:00:26,480 --> 00:00:28,320
electronic blind auction

15
00:00:28,320 --> 00:00:29,840
where the private inputs are the party's

16
00:00:29,840 --> 00:00:32,079
bids and the output is the winner

17
00:00:32,079 --> 00:00:36,079
and the highest bid another example is

18
00:00:36,079 --> 00:00:38,239
private set intersection where the

19
00:00:38,239 --> 00:00:39,120
inputs are

20
00:00:39,120 --> 00:00:41,280
data sets and the output is the

21
00:00:41,280 --> 00:00:44,399
intersection of these data sets

22
00:00:44,399 --> 00:00:46,640
parties may also want to carry out an

23
00:00:46,640 --> 00:00:48,079
electronic election

24
00:00:48,079 --> 00:00:50,960
where the inputs are the party's secret

25
00:00:50,960 --> 00:00:51,680
votes

26
00:00:51,680 --> 00:00:54,879
and the output is the tally

27
00:00:54,879 --> 00:00:57,840
in order to solve such problems parties

28
00:00:57,840 --> 00:00:58,879
need to engage

29
00:00:58,879 --> 00:01:01,600
in a protocol that allows them to

30
00:01:01,600 --> 00:01:02,719
evaluate

31
00:01:02,719 --> 00:01:04,879
a function on their private inputs

32
00:01:04,879 --> 00:01:08,320
without having to trust each other

33
00:01:08,880 --> 00:01:10,799
there are also so-called general npc

34
00:01:10,799 --> 00:01:12,159
protocols these are

35
00:01:12,159 --> 00:01:15,680
protocols that allow securely realizing

36
00:01:15,680 --> 00:01:19,200
practically every purpose

37
00:01:20,080 --> 00:01:21,680
in multi-party computation one

38
00:01:21,680 --> 00:01:23,200
distinguishes between two corruption

39
00:01:23,200 --> 00:01:24,240
models

40
00:01:24,240 --> 00:01:26,560
either the set of corrupted parties is

41
00:01:26,560 --> 00:01:27,280
fixed

42
00:01:27,280 --> 00:01:28,560
prior to the start of the protocol

43
00:01:28,560 --> 00:01:31,200
execution

44
00:01:31,280 --> 00:01:34,000
this models protocol parties conspiring

45
00:01:34,000 --> 00:01:35,040
before the protocol

46
00:01:35,040 --> 00:01:38,240
has started or

47
00:01:38,240 --> 00:01:40,159
parties may become corrupted at any

48
00:01:40,159 --> 00:01:43,280
point during the protocol execution

49
00:01:43,280 --> 00:01:46,560
this intuitively models remote attacks

50
00:01:46,560 --> 00:01:49,040
where adversaries or hackers break into

51
00:01:49,040 --> 00:01:50,000
computers

52
00:01:50,000 --> 00:01:52,720
during the protocol execution by for

53
00:01:52,720 --> 00:01:53,200
instance

54
00:01:53,200 --> 00:01:56,720
sending computer viruses

55
00:01:57,200 --> 00:02:00,880
up to now all mpc protocols

56
00:02:00,880 --> 00:02:03,840
leak the private inputs of the parties

57
00:02:03,840 --> 00:02:06,399
corrupted during the protocol execution

58
00:02:06,399 --> 00:02:09,440
this also holds true for protocols that

59
00:02:09,440 --> 00:02:10,160
allow

60
00:02:10,160 --> 00:02:12,959
the parties to erase their local data in

61
00:02:12,959 --> 00:02:14,000
this case

62
00:02:14,000 --> 00:02:16,000
the adversary has to corrupt such

63
00:02:16,000 --> 00:02:17,599
parties before

64
00:02:17,599 --> 00:02:21,840
they have erased their secret local data

65
00:02:21,840 --> 00:02:24,800
as a consequence all previous npc

66
00:02:24,800 --> 00:02:25,599
protocols

67
00:02:25,599 --> 00:02:28,720
are susceptible to remote attacks

68
00:02:28,720 --> 00:02:32,160
that is that is an adversary may

69
00:02:32,160 --> 00:02:34,720
learn the party's private inputs and

70
00:02:34,720 --> 00:02:35,519
therefore

71
00:02:35,519 --> 00:02:38,800
sensitive information by sending remote

72
00:02:38,800 --> 00:02:41,200
attacks

73
00:02:41,680 --> 00:02:44,160
in this work we present general npc

74
00:02:44,160 --> 00:02:44,879
protocols

75
00:02:44,879 --> 00:02:46,879
with very strong security guarantees

76
00:02:46,879 --> 00:02:49,440
against remote attacks

77
00:02:49,440 --> 00:02:51,920
the parties in our protocols do not

78
00:02:51,920 --> 00:02:52,720
necessarily

79
00:02:52,720 --> 00:02:56,000
leak their private inputs if they are

80
00:02:56,000 --> 00:02:58,319
corrupted during the protocol execution

81
00:02:58,319 --> 00:03:01,280
via remote attacks

82
00:03:02,080 --> 00:03:04,879
in more detail if a protocol part in our

83
00:03:04,879 --> 00:03:05,760
constructions

84
00:03:05,760 --> 00:03:08,800
has already received input

85
00:03:08,800 --> 00:03:12,000
and is corrupted during the protocol

86
00:03:12,000 --> 00:03:12,879
execution

87
00:03:12,879 --> 00:03:16,640
by a remote attack then this allows the

88
00:03:16,640 --> 00:03:18,959
adversary to gain full control over this

89
00:03:18,959 --> 00:03:20,480
party

90
00:03:20,480 --> 00:03:23,760
but not the ability to learn the party's

91
00:03:23,760 --> 00:03:25,280
private input

92
00:03:25,280 --> 00:03:29,360
nor its private output nor to modify

93
00:03:29,360 --> 00:03:33,200
its input or output

94
00:03:33,200 --> 00:03:37,280
unless all parties are corrupted

95
00:03:37,920 --> 00:03:41,440
these strong security guarantees against

96
00:03:41,440 --> 00:03:44,000
remote attacks hold even in the current

97
00:03:44,000 --> 00:03:45,280
setting

98
00:03:45,280 --> 00:03:47,760
where our protocols may be executed

99
00:03:47,760 --> 00:03:48,560
concurrently

100
00:03:48,560 --> 00:03:52,480
with arbitrary other protocols

101
00:03:53,439 --> 00:03:55,840
now our constructions are based on the

102
00:03:55,840 --> 00:03:57,680
following observation

103
00:03:57,680 --> 00:04:00,640
in practice parties may be temporarily

104
00:04:00,640 --> 00:04:01,680
isolated

105
00:04:01,680 --> 00:04:04,480
and therefore not remotely hackable at

106
00:04:04,480 --> 00:04:05,439
least not

107
00:04:05,439 --> 00:04:07,519
at any point during the protocol

108
00:04:07,519 --> 00:04:09,599
execution

109
00:04:09,599 --> 00:04:12,400
for instance parties may utilize air gap

110
00:04:12,400 --> 00:04:13,200
switches

111
00:04:13,200 --> 00:04:15,920
which act as draw bridges isolating

112
00:04:15,920 --> 00:04:18,160
parties from network

113
00:04:18,160 --> 00:04:20,720
or parties may implement unidirectional

114
00:04:20,720 --> 00:04:21,680
channels

115
00:04:21,680 --> 00:04:24,880
with so-called data diodes

116
00:04:24,880 --> 00:04:27,919
in addition parties may also utilize

117
00:04:27,919 --> 00:04:28,320
other

118
00:04:28,320 --> 00:04:30,160
simple remotely hackable hardware

119
00:04:30,160 --> 00:04:32,080
modules such as a

120
00:04:32,080 --> 00:04:35,199
encryption module that simply implements

121
00:04:35,199 --> 00:04:36,400
a specific public

122
00:04:36,400 --> 00:04:40,240
encryption scheme such modules

123
00:04:40,240 --> 00:04:42,080
can be implemented as fixed function

124
00:04:42,080 --> 00:04:44,160
circuits and verified for

125
00:04:44,160 --> 00:04:47,199
correctness it may therefore be assumed

126
00:04:47,199 --> 00:04:47,759
to be

127
00:04:47,759 --> 00:04:50,880
remotely unhackable

128
00:04:51,919 --> 00:04:54,960
in our work we therefore propose a

129
00:04:54,960 --> 00:04:57,680
new security framework called uc or

130
00:04:57,680 --> 00:04:59,280
universal composability

131
00:04:59,280 --> 00:05:02,479
with fortified security our new

132
00:05:02,479 --> 00:05:03,120
framework

133
00:05:03,120 --> 00:05:05,520
comes with a new corruption model where

134
00:05:05,520 --> 00:05:06,880
one distinguishes between

135
00:05:06,880 --> 00:05:10,479
physical attacks and online attacks

136
00:05:10,479 --> 00:05:13,280
physical attacks model adversaries

137
00:05:13,280 --> 00:05:15,919
tampering with hardware

138
00:05:15,919 --> 00:05:20,479
online attacks model remote attacks

139
00:05:20,720 --> 00:05:23,360
online attacks are only effective if the

140
00:05:23,360 --> 00:05:24,320
targeted party

141
00:05:24,320 --> 00:05:27,759
is what we call online that is able to

142
00:05:27,759 --> 00:05:28,320
receive

143
00:05:28,320 --> 00:05:33,520
messages and remotely hackable

144
00:05:34,720 --> 00:05:37,840
in the following i will present a

145
00:05:37,840 --> 00:05:41,360
simplified version of our constructions

146
00:05:41,360 --> 00:05:43,759
but before giving the protocol

147
00:05:43,759 --> 00:05:44,639
description

148
00:05:44,639 --> 00:05:47,759
recall our security goal an adversary

149
00:05:47,759 --> 00:05:50,560
mounting online attacks against a party

150
00:05:50,560 --> 00:05:52,320
who has already received input

151
00:05:52,320 --> 00:05:54,960
may not learn that party's input or

152
00:05:54,960 --> 00:05:56,160
output

153
00:05:56,160 --> 00:05:59,280
nor may may he be able to modify that

154
00:05:59,280 --> 00:06:00,080
party's input

155
00:06:00,080 --> 00:06:04,400
output unless all parties are corrupted

156
00:06:05,199 --> 00:06:08,240
so in our protocol each

157
00:06:08,240 --> 00:06:12,880
party utilizes three hardware modules

158
00:06:12,880 --> 00:06:17,120
a buffer a so-called encryption module

159
00:06:17,120 --> 00:06:21,520
and a so-called output interface module

160
00:06:21,520 --> 00:06:23,520
the encryption module and the output

161
00:06:23,520 --> 00:06:25,039
interface module

162
00:06:25,039 --> 00:06:29,280
are assumed to be remotely unhackable

163
00:06:29,280 --> 00:06:31,759
the buffer and the party itself being

164
00:06:31,759 --> 00:06:32,800
for instance a

165
00:06:32,800 --> 00:06:36,080
personal computer may be remotely

166
00:06:36,080 --> 00:06:38,560
hackable

167
00:06:39,680 --> 00:06:42,479
our protocol proceeds in several phases

168
00:06:42,479 --> 00:06:43,919
in the first phase

169
00:06:43,919 --> 00:06:48,319
parties are offline

170
00:06:48,319 --> 00:06:51,440
and only communicate through their

171
00:06:51,440 --> 00:06:55,520
encryption module in this phase

172
00:06:55,520 --> 00:06:59,599
each party computes shares of its input

173
00:06:59,599 --> 00:07:01,919
and as will be explained later also of

174
00:07:01,919 --> 00:07:04,080
other things

175
00:07:04,080 --> 00:07:07,199
these shares are then encrypted using

176
00:07:07,199 --> 00:07:07,840
their

177
00:07:07,840 --> 00:07:11,198
respective encryption module

178
00:07:11,360 --> 00:07:15,039
together with signatures of these shares

179
00:07:15,039 --> 00:07:17,759
and the intended receiver's identity

180
00:07:17,759 --> 00:07:18,880
this ensures

181
00:07:18,880 --> 00:07:22,400
message authentication these ciphertexts

182
00:07:22,400 --> 00:07:23,759
are then sent

183
00:07:23,759 --> 00:07:27,199
to the other parties buffers

184
00:07:27,199 --> 00:07:29,360
note that since each party is offline

185
00:07:29,360 --> 00:07:30,800
this phase

186
00:07:30,800 --> 00:07:33,840
it may not receive messages

187
00:07:33,840 --> 00:07:37,440
itself now

188
00:07:37,440 --> 00:07:40,479
once this phase has

189
00:07:40,479 --> 00:07:43,599
been completed each party erases

190
00:07:43,599 --> 00:07:44,400
everything

191
00:07:44,400 --> 00:07:47,680
except for its own share its encryption

192
00:07:47,680 --> 00:07:48,639
key

193
00:07:48,639 --> 00:07:52,560
and the public keys note that

194
00:07:52,560 --> 00:07:54,240
since the parties that parties have

195
00:07:54,240 --> 00:07:56,560
shared their inputs

196
00:07:56,560 --> 00:07:58,720
among each other in this phase the

197
00:07:58,720 --> 00:08:00,160
adversary has to corrupt

198
00:08:00,160 --> 00:08:02,319
all parties in order to reconstruct the

199
00:08:02,319 --> 00:08:04,479
party's inputs

200
00:08:04,479 --> 00:08:08,560
therefore an adversary who mounts

201
00:08:08,560 --> 00:08:11,520
online attacks against the party who has

202
00:08:11,520 --> 00:08:12,160
already

203
00:08:12,160 --> 00:08:16,319
received input is not able to learn that

204
00:08:16,319 --> 00:08:17,680
party's input

205
00:08:17,680 --> 00:08:21,440
unless all parties are corrupted

206
00:08:22,000 --> 00:08:24,879
in the next phase called compute phase

207
00:08:24,879 --> 00:08:26,319
parties engage in a multi-party

208
00:08:26,319 --> 00:08:28,080
computation

209
00:08:28,080 --> 00:08:29,280
the input of this multi-party

210
00:08:29,280 --> 00:08:31,599
computation are

211
00:08:31,599 --> 00:08:34,240
the shares and signatures the parties

212
00:08:34,240 --> 00:08:36,159
receive for their buffer

213
00:08:36,159 --> 00:08:38,240
and the signature verification keys of

214
00:08:38,240 --> 00:08:41,440
each party

215
00:08:41,440 --> 00:08:42,799
the result of this multi-party

216
00:08:42,799 --> 00:08:45,360
computation is the following

217
00:08:45,360 --> 00:08:48,720
if all signatures are valid the desired

218
00:08:48,720 --> 00:08:51,600
function value is the result of this

219
00:08:51,600 --> 00:08:53,440
protocol execution

220
00:08:53,440 --> 00:08:55,920
actually it's a bit more complicated as

221
00:08:55,920 --> 00:08:56,720
i will

222
00:08:56,720 --> 00:09:00,720
explain later otherwise

223
00:09:00,720 --> 00:09:03,360
if any signature is invalid the output

224
00:09:03,360 --> 00:09:04,320
of the protocol is

225
00:09:04,320 --> 00:09:08,240
error if the adversary

226
00:09:08,240 --> 00:09:09,920
corrupts a party during the protocol

227
00:09:09,920 --> 00:09:14,000
execution by mounting an online attack

228
00:09:14,000 --> 00:09:18,160
and instructs that party to modify

229
00:09:18,240 --> 00:09:22,000
some of its shares then this would

230
00:09:22,000 --> 00:09:25,360
of course modify the inputs

231
00:09:25,360 --> 00:09:28,240
the input of some party or several

232
00:09:28,240 --> 00:09:30,000
parties

233
00:09:30,000 --> 00:09:33,440
but since the signatures

234
00:09:33,440 --> 00:09:36,480
are invalid if the adversary modifies

235
00:09:36,480 --> 00:09:37,839
any share

236
00:09:37,839 --> 00:09:40,880
the result in this case is

237
00:09:40,880 --> 00:09:44,240
error this

238
00:09:44,240 --> 00:09:46,880
also holds true of course if the

239
00:09:46,880 --> 00:09:48,320
adversary

240
00:09:48,320 --> 00:09:51,360
instructs a party to modify the share

241
00:09:51,360 --> 00:09:54,320
of its own input

242
00:09:55,040 --> 00:09:56,880
note that since the signing key has been

243
00:09:56,880 --> 00:09:59,120
erased the adversary

244
00:09:59,120 --> 00:10:02,240
is not able to create signatures of

245
00:10:02,240 --> 00:10:06,399
shares he created himself

246
00:10:07,920 --> 00:10:10,560
therefore if the adversary corrupts a

247
00:10:10,560 --> 00:10:12,880
party who has already received input

248
00:10:12,880 --> 00:10:15,519
through an online attack he is unable to

249
00:10:15,519 --> 00:10:16,320
modify

250
00:10:16,320 --> 00:10:20,000
that party's input unless all parties

251
00:10:20,000 --> 00:10:23,279
are corrupted in the final phase of the

252
00:10:23,279 --> 00:10:24,000
protocol

253
00:10:24,000 --> 00:10:27,360
the so-called output phase the output

254
00:10:27,360 --> 00:10:29,920
of a party is handled not by the party

255
00:10:29,920 --> 00:10:30,880
itself

256
00:10:30,880 --> 00:10:33,120
but by its so-called output interface

257
00:10:33,120 --> 00:10:34,079
module

258
00:10:34,079 --> 00:10:36,560
this is motivated by the following a

259
00:10:36,560 --> 00:10:37,120
party

260
00:10:37,120 --> 00:10:40,240
could have been corrupted by a

261
00:10:40,240 --> 00:10:41,920
online attack during the protocol

262
00:10:41,920 --> 00:10:44,160
execution therefore

263
00:10:44,160 --> 00:10:47,040
its output is not trustworthy since it

264
00:10:47,040 --> 00:10:47,760
may have been

265
00:10:47,760 --> 00:10:51,360
manipulated by the adversary however the

266
00:10:51,360 --> 00:10:52,000
output

267
00:10:52,000 --> 00:10:54,160
of the output interface module is

268
00:10:54,160 --> 00:10:55,279
trustworthy

269
00:10:55,279 --> 00:10:59,680
since this module is remotely unhackable

270
00:10:59,680 --> 00:11:02,240
to see how this output interface module

271
00:11:02,240 --> 00:11:03,200
works

272
00:11:03,200 --> 00:11:06,320
we need to go back to the

273
00:11:06,320 --> 00:11:10,399
sharing phase in the sharing phase

274
00:11:10,399 --> 00:11:13,680
each party sends a symmetric encryption

275
00:11:13,680 --> 00:11:14,800
key

276
00:11:14,800 --> 00:11:18,800
together with a key for a mac

277
00:11:18,800 --> 00:11:22,000
message authentication code to the

278
00:11:22,000 --> 00:11:25,120
output interface module

279
00:11:25,120 --> 00:11:29,120
and this distributes shares

280
00:11:29,120 --> 00:11:33,040
not only of its input but also of the

281
00:11:33,040 --> 00:11:35,680
of this symmetric encryption key and

282
00:11:35,680 --> 00:11:38,000
also of this mac key

283
00:11:38,000 --> 00:11:43,200
along with a signature on these shares

284
00:11:43,200 --> 00:11:46,640
in the compute phase the parties as

285
00:11:46,640 --> 00:11:48,800
mentioned before engage in a multi-party

286
00:11:48,800 --> 00:11:51,200
computation

287
00:11:51,200 --> 00:11:54,240
using as inputs they received shares

288
00:11:54,240 --> 00:11:57,360
and signatures and the verification keys

289
00:11:57,360 --> 00:12:00,000
now the result of this multi-party

290
00:12:00,000 --> 00:12:01,120
computation

291
00:12:01,120 --> 00:12:03,279
is the following if all signatures are

292
00:12:03,279 --> 00:12:05,200
valid the result is

293
00:12:05,200 --> 00:12:07,920
the desired function value encrypted

294
00:12:07,920 --> 00:12:08,639
with the

295
00:12:08,639 --> 00:12:11,360
respective symmetric encryption key

296
00:12:11,360 --> 00:12:12,399
together with a mac

297
00:12:12,399 --> 00:12:18,160
tag of this encrypted function value

298
00:12:18,959 --> 00:12:21,200
now if an adversary corrupts a party

299
00:12:21,200 --> 00:12:22,720
during the protocol execution

300
00:12:22,720 --> 00:12:24,800
through an online attack then he only

301
00:12:24,800 --> 00:12:28,639
learns the encrypted function value

302
00:12:28,639 --> 00:12:31,760
and since the symmetric encryption keys

303
00:12:31,760 --> 00:12:34,079
have been shared among the parties

304
00:12:34,079 --> 00:12:37,200
you would have he would have to corrupt

305
00:12:37,200 --> 00:12:41,040
each party to in order to learn

306
00:12:41,040 --> 00:12:46,320
the function value in the clear

307
00:12:46,320 --> 00:12:49,600
therefore if the adversary mounts

308
00:12:49,600 --> 00:12:51,600
an online attack against the party who

309
00:12:51,600 --> 00:12:54,160
has already received an input

310
00:12:54,160 --> 00:12:57,600
he is unable to learn the party's output

311
00:12:57,600 --> 00:13:02,000
unless all parties are corrupted

312
00:13:02,000 --> 00:13:05,120
finally in the output phase

313
00:13:05,120 --> 00:13:08,800
each party sends the encrypted function

314
00:13:08,800 --> 00:13:10,480
value and mac tag

315
00:13:10,480 --> 00:13:12,639
it has received in the compute phase to

316
00:13:12,639 --> 00:13:15,839
its respective output interface module

317
00:13:15,839 --> 00:13:19,040
who will then verify

318
00:13:19,040 --> 00:13:22,320
the mac tag and if

319
00:13:22,320 --> 00:13:25,920
the mac tag is valid will decrypt

320
00:13:25,920 --> 00:13:31,440
the function value and output the result

321
00:13:31,440 --> 00:13:34,720
otherwise if the mac tag is invalid

322
00:13:34,720 --> 00:13:38,160
the output interface module will output

323
00:13:38,160 --> 00:13:40,480
error

324
00:13:41,199 --> 00:13:44,639
note that since the mac keys are shared

325
00:13:44,639 --> 00:13:46,560
among the parties the adversary

326
00:13:46,560 --> 00:13:49,040
again has to corrupt all parties in

327
00:13:49,040 --> 00:13:50,079
order to learn

328
00:13:50,079 --> 00:13:54,560
the mac keys therefore

329
00:13:54,560 --> 00:13:56,880
if the adversary mounts an online attack

330
00:13:56,880 --> 00:13:57,920
against the party

331
00:13:57,920 --> 00:14:01,440
who has already received input he is

332
00:14:01,440 --> 00:14:06,079
unable to modify that party's output

333
00:14:06,079 --> 00:14:11,040
unless he corrupts every party

334
00:14:11,040 --> 00:14:13,360
in the final section of this talk

335
00:14:13,360 --> 00:14:15,519
possible implementations of the remotely

336
00:14:15,519 --> 00:14:16,880
hackable hardware modules

337
00:14:16,880 --> 00:14:20,800
used in our protocol are presented first

338
00:14:20,800 --> 00:14:23,760
three important remarks the remote and

339
00:14:23,760 --> 00:14:25,040
hackable hardware modules

340
00:14:25,040 --> 00:14:27,839
used in our protocol only have to be

341
00:14:27,839 --> 00:14:30,160
trusted by their owner

342
00:14:30,160 --> 00:14:33,440
do not have to be sent to other parties

343
00:14:33,440 --> 00:14:36,240
and only have to be secure against

344
00:14:36,240 --> 00:14:38,000
remote attacks

345
00:14:38,000 --> 00:14:42,839
therefore they do not have to be tamper

346
00:14:42,839 --> 00:14:44,399
proof

347
00:14:44,399 --> 00:14:47,600
now an air gap switch can be

348
00:14:47,600 --> 00:14:50,720
implemented using any managed ethernet

349
00:14:50,720 --> 00:14:51,519
switch

350
00:14:51,519 --> 00:14:54,079
or alternatively a non-managed ethernet

351
00:14:54,079 --> 00:14:54,639
switch

352
00:14:54,639 --> 00:14:57,519
together with a remotely controllable

353
00:14:57,519 --> 00:15:00,160
power strip

354
00:15:01,040 --> 00:15:03,920
there also exists various open source

355
00:15:03,920 --> 00:15:06,399
diy implementations for data diodes

356
00:15:06,399 --> 00:15:09,920
for instance the so-called tin foil chat

357
00:15:09,920 --> 00:15:12,320
these implementations exploit physical

358
00:15:12,320 --> 00:15:13,440
principles

359
00:15:13,440 --> 00:15:18,000
and therefore require very little trust

360
00:15:19,199 --> 00:15:20,880
concerning the implementation of the

361
00:15:20,880 --> 00:15:22,320
encryption module

362
00:15:22,320 --> 00:15:24,079
the encryption module does not have to

363
00:15:24,079 --> 00:15:25,519
handle secret keys

364
00:15:25,519 --> 00:15:28,320
since it only uses public keys which are

365
00:15:28,320 --> 00:15:31,120
retrieved from the public infrastructure

366
00:15:31,120 --> 00:15:32,880
the public keys retrieved from the

367
00:15:32,880 --> 00:15:34,480
public infrastructure

368
00:15:34,480 --> 00:15:37,360
of course have to be verified that is

369
00:15:37,360 --> 00:15:37,759
their

370
00:15:37,759 --> 00:15:40,320
integrity has to be verified this can be

371
00:15:40,320 --> 00:15:41,279
done by

372
00:15:41,279 --> 00:15:45,759
using for instance certificates

373
00:15:45,920 --> 00:15:48,560
the encryption module can be implemented

374
00:15:48,560 --> 00:15:49,440
using an

375
00:15:49,440 --> 00:15:52,320
hardware security module together with a

376
00:15:52,320 --> 00:15:53,199
simple

377
00:15:53,199 --> 00:15:55,839
network interface

378
00:15:57,120 --> 00:15:59,440
finally concerning the implementation of

379
00:15:59,440 --> 00:16:01,839
the output interface module

380
00:16:01,839 --> 00:16:05,040
the output interface module only

381
00:16:05,040 --> 00:16:08,079
provides an interface for

382
00:16:08,079 --> 00:16:11,120
outputs therefore

383
00:16:11,120 --> 00:16:14,560
no network capability is required unlike

384
00:16:14,560 --> 00:16:15,839
in the case of

385
00:16:15,839 --> 00:16:19,199
the encryption module therefore

386
00:16:19,199 --> 00:16:21,120
the output interface module can be

387
00:16:21,120 --> 00:16:23,600
implemented as follows

388
00:16:23,600 --> 00:16:27,600
one can extend an hsm or an fpga

389
00:16:27,600 --> 00:16:30,399
with the required functionality and

390
00:16:30,399 --> 00:16:31,120
connected

391
00:16:31,120 --> 00:16:34,000
via some interface providing a secure

392
00:16:34,000 --> 00:16:34,800
output

393
00:16:34,800 --> 00:16:38,480
for instance one could use a simple

394
00:16:38,480 --> 00:16:41,839
dot matrix display

395
00:16:41,839 --> 00:16:45,199
okay let me summarize in our paper

396
00:16:45,199 --> 00:16:47,839
we constructed general npc protocols

397
00:16:47,839 --> 00:16:48,720
providing

398
00:16:48,720 --> 00:16:51,199
very strong security guarantees against

399
00:16:51,199 --> 00:16:52,959
remote attacks

400
00:16:52,959 --> 00:16:56,240
these protocols are proven secure

401
00:16:56,240 --> 00:16:58,560
in a new security framework which we

402
00:16:58,560 --> 00:17:00,000
call uc

403
00:17:00,000 --> 00:17:02,079
or universal composability with

404
00:17:02,079 --> 00:17:04,000
fortified security

405
00:17:04,000 --> 00:17:06,480
which comes with a new corruption model

406
00:17:06,480 --> 00:17:08,160
that distinguishes between

407
00:17:08,160 --> 00:17:11,119
physical attacks and online attacks the

408
00:17:11,119 --> 00:17:11,839
latter

409
00:17:11,839 --> 00:17:15,359
modeling remote attacks

410
00:17:15,919 --> 00:17:21,919
okay so thank you for your attention

