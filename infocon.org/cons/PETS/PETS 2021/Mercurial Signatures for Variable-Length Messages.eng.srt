1
00:00:00,799 --> 00:00:02,560
so today i'm going to be talking about

2
00:00:02,560 --> 00:00:04,799
work on mercurial signatures for

3
00:00:04,799 --> 00:00:06,720
variable length messages

4
00:00:06,720 --> 00:00:11,040
this is joint work with analyst on skya

5
00:00:11,200 --> 00:00:13,200
so the application we're interested in

6
00:00:13,200 --> 00:00:16,000
is delegatable anonymous credentials a

7
00:00:16,000 --> 00:00:17,440
credential could be something like your

8
00:00:17,440 --> 00:00:19,920
passport or a driver's license

9
00:00:19,920 --> 00:00:21,920
and suppose that alice is going to

10
00:00:21,920 --> 00:00:23,279
receive a credential

11
00:00:23,279 --> 00:00:25,840
from some certification authority this

12
00:00:25,840 --> 00:00:28,800
is a signature on her public key

13
00:00:28,800 --> 00:00:30,560
and suppose that alice is going to

14
00:00:30,560 --> 00:00:32,880
delegate her credential to bob

15
00:00:32,880 --> 00:00:36,239
then she may sign his public key

16
00:00:36,239 --> 00:00:38,079
if bob then wants to delegate a

17
00:00:38,079 --> 00:00:39,840
credential to carol

18
00:00:39,840 --> 00:00:43,120
but he wants to be known to her under

19
00:00:43,120 --> 00:00:45,600
some equivalent but unlinkable public

20
00:00:45,600 --> 00:00:46,399
key pk

21
00:00:46,399 --> 00:00:49,680
prime then he needs a way to update his

22
00:00:49,680 --> 00:00:50,879
valid credential chain

23
00:00:50,879 --> 00:00:53,920
from the ca and alice so using a new

24
00:00:53,920 --> 00:00:55,440
type of signature scheme called a

25
00:00:55,440 --> 00:00:57,120
mercurial signature

26
00:00:57,120 --> 00:00:59,359
he can randomize his public key as well

27
00:00:59,359 --> 00:01:00,480
as alice's and

28
00:01:00,480 --> 00:01:03,120
update those signatures accordingly he

29
00:01:03,120 --> 00:01:04,239
then may sign

30
00:01:04,239 --> 00:01:06,880
carol's public key and her certificate

31
00:01:06,880 --> 00:01:08,720
will consist of the chain of these

32
00:01:08,720 --> 00:01:12,560
public keys and signatures so now let's

33
00:01:12,560 --> 00:01:15,360
talk about mercurial signatures

34
00:01:15,360 --> 00:01:17,920
mercurial signatures were inspired by

35
00:01:17,920 --> 00:01:19,280
fuchsbaridal

36
00:01:19,280 --> 00:01:21,840
and they had the idea of instead of

37
00:01:21,840 --> 00:01:23,920
signing a specific message

38
00:01:23,920 --> 00:01:25,840
you would sign an equivalence class of

39
00:01:25,840 --> 00:01:26,960
messages

40
00:01:26,960 --> 00:01:28,560
and what this means is that the sign

41
00:01:28,560 --> 00:01:31,040
algorithm takes as input some message m

42
00:01:31,040 --> 00:01:33,520
here in green but the verify algorithm

43
00:01:33,520 --> 00:01:35,040
takes us and put

44
00:01:35,040 --> 00:01:37,439
a message m in blue here which is

45
00:01:37,439 --> 00:01:39,600
equivalent to the original message

46
00:01:39,600 --> 00:01:41,200
and correctness here means that the

47
00:01:41,200 --> 00:01:42,960
verification accepts

48
00:01:42,960 --> 00:01:46,000
this blue m and that the blue m is

49
00:01:46,000 --> 00:01:47,840
equivalent to the original message m

50
00:01:47,840 --> 00:01:50,640
given as input to the sign algorithm now

51
00:01:50,640 --> 00:01:51,600
security here

52
00:01:51,600 --> 00:01:53,759
means that the adversary outputs some

53
00:01:53,759 --> 00:01:56,240
forgery m star sigma star

54
00:01:56,240 --> 00:01:59,520
and m star cannot be equivalent to any

55
00:01:59,520 --> 00:02:00,799
message that was given

56
00:02:00,799 --> 00:02:03,040
to the signing oracle so for normal

57
00:02:03,040 --> 00:02:04,159
eufcma

58
00:02:04,159 --> 00:02:05,840
it can't be equal to any message that's

59
00:02:05,840 --> 00:02:07,360
queried but here because we're dealing

60
00:02:07,360 --> 00:02:08,720
with equivalence classes

61
00:02:08,720 --> 00:02:11,840
m star can't be equivalent to any mi now

62
00:02:11,840 --> 00:02:13,280
the construction in that paper

63
00:02:13,280 --> 00:02:15,520
considers messages which are vectors of

64
00:02:15,520 --> 00:02:16,720
group elements

65
00:02:16,720 --> 00:02:18,480
and a message is considered to be

66
00:02:18,480 --> 00:02:20,000
equivalent if it's a scalar

67
00:02:20,000 --> 00:02:21,200
multiplication

68
00:02:21,200 --> 00:02:23,200
so here we have an original message m

69
00:02:23,200 --> 00:02:25,280
which is g to the a g to the b g to the

70
00:02:25,280 --> 00:02:25,760
c

71
00:02:25,760 --> 00:02:27,360
and we just raise all the exponents to

72
00:02:27,360 --> 00:02:29,120
some random value mu

73
00:02:29,120 --> 00:02:31,599
and these two messages are equivalent

74
00:02:31,599 --> 00:02:32,640
now mercurial

75
00:02:32,640 --> 00:02:35,519
signatures uh considers the case of

76
00:02:35,519 --> 00:02:37,760
randomizing the public key as well

77
00:02:37,760 --> 00:02:40,000
so the sign algorithm takes us and put

78
00:02:40,000 --> 00:02:41,440
this public key

79
00:02:41,440 --> 00:02:44,239
in red and the message in green and the

80
00:02:44,239 --> 00:02:46,400
verification algorithm takes as input

81
00:02:46,400 --> 00:02:47,519
equivalent

82
00:02:47,519 --> 00:02:50,160
public key pk in purple and equivalent

83
00:02:50,160 --> 00:02:50,640
message

84
00:02:50,640 --> 00:02:52,720
m in blue correctness says that the

85
00:02:52,720 --> 00:02:54,879
verification must hold and those values

86
00:02:54,879 --> 00:02:56,160
must be equivalent

87
00:02:56,160 --> 00:02:58,720
now for security the adversary has the

88
00:02:58,720 --> 00:03:00,879
additional ability to output a forged

89
00:03:00,879 --> 00:03:02,640
public key pk star

90
00:03:02,640 --> 00:03:04,879
this pk star must be equivalent to the

91
00:03:04,879 --> 00:03:06,560
challenge pk

92
00:03:06,560 --> 00:03:08,800
and like before the message m star has

93
00:03:08,800 --> 00:03:10,879
to be not equivalent to any message

94
00:03:10,879 --> 00:03:13,760
that's been queried

95
00:03:13,840 --> 00:03:15,440
now some important properties for

96
00:03:15,440 --> 00:03:17,040
mercurial signatures

97
00:03:17,040 --> 00:03:19,440
are message class hiding and public key

98
00:03:19,440 --> 00:03:20,480
class hiding

99
00:03:20,480 --> 00:03:22,319
message class hiding says that it should

100
00:03:22,319 --> 00:03:24,159
be hard to tell if two messages are in

101
00:03:24,159 --> 00:03:25,760
the same equivalence class

102
00:03:25,760 --> 00:03:27,360
and public key class hiding says it

103
00:03:27,360 --> 00:03:29,200
should be hard to tell if two public

104
00:03:29,200 --> 00:03:30,959
keys are in the same equivalence class

105
00:03:30,959 --> 00:03:32,879
even when given signatures under both of

106
00:03:32,879 --> 00:03:34,560
them and this was the

107
00:03:34,560 --> 00:03:37,920
non-trivial extension was proving public

108
00:03:37,920 --> 00:03:40,000
key class hiding

109
00:03:40,000 --> 00:03:41,519
now another important property for our

110
00:03:41,519 --> 00:03:43,440
application is origin hiding

111
00:03:43,440 --> 00:03:45,440
i mentioned that when bob is issuing

112
00:03:45,440 --> 00:03:47,200
issuing a credential to carol he needs

113
00:03:47,200 --> 00:03:48,959
to randomize his credential chain

114
00:03:48,959 --> 00:03:51,519
so this occurs in two steps first of all

115
00:03:51,519 --> 00:03:53,680
he can randomize alice's public key

116
00:03:53,680 --> 00:03:55,519
without knowing her secret key and

117
00:03:55,519 --> 00:03:56,239
update

118
00:03:56,239 --> 00:03:59,120
the signature to the sigma tilde but we

119
00:03:59,120 --> 00:04:01,040
need that the transformed value should

120
00:04:01,040 --> 00:04:02,959
be distributed like a fresh signature

121
00:04:02,959 --> 00:04:05,519
under that equivalence class now when

122
00:04:05,519 --> 00:04:07,519
bob updates his public key

123
00:04:07,519 --> 00:04:10,319
to an equivalent but unlinkable pk prime

124
00:04:10,319 --> 00:04:11,360
the transformed

125
00:04:11,360 --> 00:04:13,439
sigma prime should also be distributed

126
00:04:13,439 --> 00:04:15,040
like a fresh signature on that

127
00:04:15,040 --> 00:04:17,759
equivalence class

128
00:04:17,759 --> 00:04:20,320
so the key takeaway here is that

129
00:04:20,320 --> 00:04:21,918
mercurial signatures allow this

130
00:04:21,918 --> 00:04:22,960
transformation

131
00:04:22,960 --> 00:04:25,840
of a public key message and signature

132
00:04:25,840 --> 00:04:28,080
into an equivalent but unlinkable public

133
00:04:28,080 --> 00:04:28,560
key

134
00:04:28,560 --> 00:04:31,360
message and and equally valid signature

135
00:04:31,360 --> 00:04:34,160
sigma prime

136
00:04:34,800 --> 00:04:36,160
now we'll talk about our prior

137
00:04:36,160 --> 00:04:37,919
construction of mercurial signatures

138
00:04:37,919 --> 00:04:42,560
just to give some background

139
00:04:42,560 --> 00:04:44,639
so the prior construction was based on

140
00:04:44,639 --> 00:04:46,400
bilinear groups so you have a bilinear

141
00:04:46,400 --> 00:04:48,720
mapping which takes us and put

142
00:04:48,720 --> 00:04:51,440
two groups of prime order p and outputs

143
00:04:51,440 --> 00:04:53,360
a value in the target group also of

144
00:04:53,360 --> 00:04:54,639
order p

145
00:04:54,639 --> 00:04:57,040
alice's public key consists of a vector

146
00:04:57,040 --> 00:04:58,479
of group elements of length

147
00:04:58,479 --> 00:05:01,600
l now the value p hat here is a

148
00:05:01,600 --> 00:05:03,280
generator of g2

149
00:05:03,280 --> 00:05:06,320
and the values x i and the exponent are

150
00:05:06,320 --> 00:05:09,440
alice's secret key

151
00:05:09,440 --> 00:05:11,360
now bob's public key which is the

152
00:05:11,360 --> 00:05:12,960
message being signed

153
00:05:12,960 --> 00:05:15,919
is in the first group and the generator

154
00:05:15,919 --> 00:05:16,400
here is

155
00:05:16,400 --> 00:05:19,680
p and the exponents are the mis

156
00:05:19,680 --> 00:05:21,759
note that the public key is of length l

157
00:05:21,759 --> 00:05:24,240
and the message is also of length l

158
00:05:24,240 --> 00:05:26,000
now the signature consists of three

159
00:05:26,000 --> 00:05:27,520
group elements which span

160
00:05:27,520 --> 00:05:30,320
the two groups and for our particular

161
00:05:30,320 --> 00:05:31,120
construction

162
00:05:31,120 --> 00:05:32,479
we have a signature of three group

163
00:05:32,479 --> 00:05:34,400
elements and the public keys can be of

164
00:05:34,400 --> 00:05:35,440
two group elements

165
00:05:35,440 --> 00:05:37,520
so each link on a credential chain is

166
00:05:37,520 --> 00:05:41,280
represented by only five group elements

167
00:05:41,919 --> 00:05:45,120
now in terms of updating the signatures

168
00:05:45,120 --> 00:05:47,840
alice can have a randomized public key

169
00:05:47,840 --> 00:05:49,520
which is her original public key raised

170
00:05:49,520 --> 00:05:51,039
to some value row

171
00:05:51,039 --> 00:05:54,240
and when bob updates his public key

172
00:05:54,240 --> 00:05:57,280
it is his original public key raised to

173
00:05:57,280 --> 00:05:58,639
some value mu

174
00:05:58,639 --> 00:06:01,199
and these signatures can be updated so

175
00:06:01,199 --> 00:06:02,160
that they validate

176
00:06:02,160 --> 00:06:05,360
under the new keys on the new messages

177
00:06:05,360 --> 00:06:07,280
our prior result is that we were able to

178
00:06:07,280 --> 00:06:09,199
build delegatable anonymous credentials

179
00:06:09,199 --> 00:06:12,000
from our new type of signature scheme

180
00:06:12,000 --> 00:06:14,000
and this was the first direct

181
00:06:14,000 --> 00:06:16,000
construction of delegatable anonymous

182
00:06:16,000 --> 00:06:16,800
credentials

183
00:06:16,800 --> 00:06:18,400
all prior constructions required

184
00:06:18,400 --> 00:06:20,080
prohibitively inefficient

185
00:06:20,080 --> 00:06:21,600
non-interactive zero-knowledge proofs

186
00:06:21,600 --> 00:06:23,120
such as grasa high

187
00:06:23,120 --> 00:06:25,199
so this doesn't require any complicated

188
00:06:25,199 --> 00:06:26,479
zero-knowledge proofs

189
00:06:26,479 --> 00:06:28,160
and again each link on the chain is

190
00:06:28,160 --> 00:06:30,639
represented by only five group elements

191
00:06:30,639 --> 00:06:32,160
and we were able to prove this secure in

192
00:06:32,160 --> 00:06:34,160
the generic group model

193
00:06:34,160 --> 00:06:36,080
so now moving to the content of this

194
00:06:36,080 --> 00:06:38,080
paper the question is

195
00:06:38,080 --> 00:06:42,560
why do we want variable length messages

196
00:06:43,680 --> 00:06:47,039
so we consider a situation in which

197
00:06:47,039 --> 00:06:49,039
users have credentials under different

198
00:06:49,039 --> 00:06:50,720
certification authorities

199
00:06:50,720 --> 00:06:53,520
so alice could have a credential from

200
00:06:53,520 --> 00:06:55,039
the government she could also have a

201
00:06:55,039 --> 00:06:56,720
credential from her employer

202
00:06:56,720 --> 00:06:58,479
and we want to construct something that

203
00:06:58,479 --> 00:07:00,880
allows alice to have the same underlying

204
00:07:00,880 --> 00:07:02,000
secret key under

205
00:07:02,000 --> 00:07:05,840
both cas so let's see what happens if we

206
00:07:05,840 --> 00:07:06,800
try to use

207
00:07:06,800 --> 00:07:08,960
our prior mercurial signatures in order

208
00:07:08,960 --> 00:07:10,240
to achieve this

209
00:07:10,240 --> 00:07:14,160
so alice's public key is of length l

210
00:07:14,160 --> 00:07:16,479
and consider what happens if she has

211
00:07:16,479 --> 00:07:18,240
some attributes so this could be

212
00:07:18,240 --> 00:07:20,720
like an expiration date of her

213
00:07:20,720 --> 00:07:21,520
credential

214
00:07:21,520 --> 00:07:23,520
so for simplicity i'm going to assume

215
00:07:23,520 --> 00:07:25,680
that there's just a single attribute

216
00:07:25,680 --> 00:07:27,759
but our signature allows any number of

217
00:07:27,759 --> 00:07:28,880
attributes

218
00:07:28,880 --> 00:07:30,880
so again her public key would be of

219
00:07:30,880 --> 00:07:32,880
length l and then she has a

220
00:07:32,880 --> 00:07:36,720
single attribute and then bob's public

221
00:07:36,720 --> 00:07:37,120
key

222
00:07:37,120 --> 00:07:40,319
has to be of length l minus 1 because he

223
00:07:40,319 --> 00:07:41,919
has the single attribute so

224
00:07:41,919 --> 00:07:44,560
alice's public key of length l signs the

225
00:07:44,560 --> 00:07:45,840
full message

226
00:07:45,840 --> 00:07:49,039
which is of length l this means that

227
00:07:49,039 --> 00:07:50,720
bob's public key is of length l minus

228
00:07:50,720 --> 00:07:51,360
one

229
00:07:51,360 --> 00:07:53,680
this also means that alice's secret key

230
00:07:53,680 --> 00:07:54,639
is of length l

231
00:07:54,639 --> 00:07:56,639
and bob's secret keys of length l minus

232
00:07:56,639 --> 00:07:58,400
one just the discrete logs

233
00:07:58,400 --> 00:08:00,160
now if bob has a credential under a

234
00:08:00,160 --> 00:08:01,520
different ca let's say

235
00:08:01,520 --> 00:08:04,240
just for simplicities at the same level

236
00:08:04,240 --> 00:08:06,319
then he can also issue a credential to

237
00:08:06,319 --> 00:08:06,960
alice

238
00:08:06,960 --> 00:08:09,199
and now she's at level three so what

239
00:08:09,199 --> 00:08:10,879
does this mean her secret key was of

240
00:08:10,879 --> 00:08:12,800
length l but now it has to be of length

241
00:08:12,800 --> 00:08:14,319
l minus two

242
00:08:14,319 --> 00:08:16,000
so this is a contradiction and this is

243
00:08:16,000 --> 00:08:17,440
why we can't use

244
00:08:17,440 --> 00:08:19,919
the prior scheme for these credentials

245
00:08:19,919 --> 00:08:22,000
issued under multiple authorities

246
00:08:22,000 --> 00:08:24,879
also for a single authority when i say

247
00:08:24,879 --> 00:08:26,240
that alice uh

248
00:08:26,240 --> 00:08:28,319
can sign bob's public key and attributes

249
00:08:28,319 --> 00:08:29,440
of length l minus one

250
00:08:29,440 --> 00:08:32,320
even though this is possible to

251
00:08:32,320 --> 00:08:33,039
construct

252
00:08:33,039 --> 00:08:34,719
the proof of security in that paper

253
00:08:34,719 --> 00:08:36,640
actually does not allow this

254
00:08:36,640 --> 00:08:38,799
all messages and public keys have to be

255
00:08:38,799 --> 00:08:41,838
of length l

256
00:08:42,080 --> 00:08:43,839
so the question is how do we construct

257
00:08:43,839 --> 00:08:45,600
mercurial signatures to allow

258
00:08:45,600 --> 00:08:49,279
messages of any length so a message

259
00:08:49,279 --> 00:08:52,160
is a vector of length n plus one and the

260
00:08:52,160 --> 00:08:53,360
first element here g

261
00:08:53,360 --> 00:08:56,640
hat is a generator of g1 and each of the

262
00:08:56,640 --> 00:08:57,279
other

263
00:08:57,279 --> 00:09:00,800
components is written base g hat

264
00:09:00,800 --> 00:09:02,720
and the idea here is to break the

265
00:09:02,720 --> 00:09:04,320
message into n

266
00:09:04,320 --> 00:09:07,680
different messages so these are n

267
00:09:07,680 --> 00:09:08,480
messages

268
00:09:08,480 --> 00:09:11,839
of length five the first element is

269
00:09:11,839 --> 00:09:15,200
a new base and then the next two

270
00:09:15,200 --> 00:09:17,360
elements just indicate the index

271
00:09:17,360 --> 00:09:20,000
the final element is the content from

272
00:09:20,000 --> 00:09:21,440
the message the uis

273
00:09:21,440 --> 00:09:23,839
and then what's this h tilde so this h

274
00:09:23,839 --> 00:09:26,320
tilde is what we call a glue element

275
00:09:26,320 --> 00:09:28,800
and it glues together these n messages

276
00:09:28,800 --> 00:09:30,399
and the original message

277
00:09:30,399 --> 00:09:34,160
m in an unforgeable way and critically

278
00:09:34,160 --> 00:09:36,880
in order for the origin hiding property

279
00:09:36,880 --> 00:09:39,440
this h tilde must be computed relative

280
00:09:39,440 --> 00:09:40,480
to the new base

281
00:09:40,480 --> 00:09:42,480
g tilde as a function of the entire

282
00:09:42,480 --> 00:09:43,920
equivalence class to which the message

283
00:09:43,920 --> 00:09:44,880
belongs

284
00:09:44,880 --> 00:09:46,880
that means that no matter which message

285
00:09:46,880 --> 00:09:48,240
in the class is signed

286
00:09:48,240 --> 00:09:50,959
the glue element's discrete log base g

287
00:09:50,959 --> 00:09:52,560
tilde is the same

288
00:09:52,560 --> 00:09:55,600
so if m prime gets signed then m i

289
00:09:55,600 --> 00:09:57,680
prime should be equivalent to mi for all

290
00:09:57,680 --> 00:10:00,080
i now when we have these

291
00:10:00,080 --> 00:10:03,839
n messages m i uh they are all a fixed

292
00:10:03,839 --> 00:10:04,399
length

293
00:10:04,399 --> 00:10:06,320
five so we can use our prior mercurial

294
00:10:06,320 --> 00:10:09,279
signature scheme to sign each of them

295
00:10:09,279 --> 00:10:10,959
now the question is how to build this

296
00:10:10,959 --> 00:10:12,560
glue element

297
00:10:12,560 --> 00:10:14,800
and this is the main technical insight

298
00:10:14,800 --> 00:10:16,320
of this work

299
00:10:16,320 --> 00:10:18,560
so again i mentioned that the uis are

300
00:10:18,560 --> 00:10:19,440
written base g

301
00:10:19,440 --> 00:10:20,959
hat so the discrete logs are these

302
00:10:20,959 --> 00:10:24,880
little mis and we consider a polynomial

303
00:10:24,880 --> 00:10:27,360
uh in which the coefficients are the

304
00:10:27,360 --> 00:10:29,279
discrete log values

305
00:10:29,279 --> 00:10:32,320
we also consider a secret point x

306
00:10:32,320 --> 00:10:34,480
hat which is contained in the secret key

307
00:10:34,480 --> 00:10:35,519
of the signer

308
00:10:35,519 --> 00:10:37,440
and we evaluate the polynomial at this

309
00:10:37,440 --> 00:10:39,839
secret point so as a first step the glue

310
00:10:39,839 --> 00:10:41,279
is computed like this

311
00:10:41,279 --> 00:10:43,440
it's the base g hat raised to the

312
00:10:43,440 --> 00:10:46,160
polynomial evaluated at the secret point

313
00:10:46,160 --> 00:10:48,800
x hat

314
00:10:51,680 --> 00:10:54,160
but we need some pseudo-randomness for

315
00:10:54,160 --> 00:10:55,680
our hiding properties so

316
00:10:55,680 --> 00:10:58,959
we actually sample a random w

317
00:10:58,959 --> 00:11:01,760
and we create the new base element g

318
00:11:01,760 --> 00:11:02,720
tilde as g

319
00:11:02,720 --> 00:11:05,839
hat to the w and the ui tildes are the

320
00:11:05,839 --> 00:11:07,680
original uis from the message

321
00:11:07,680 --> 00:11:09,760
raised to the w so now we have this new

322
00:11:09,760 --> 00:11:10,880
message base

323
00:11:10,880 --> 00:11:14,000
g tilde which is m tilde and

324
00:11:14,000 --> 00:11:16,399
finally the glue element is computed

325
00:11:16,399 --> 00:11:17,279
using a

326
00:11:17,279 --> 00:11:20,800
secret random value y which is contained

327
00:11:20,800 --> 00:11:22,480
in the secret key so we have

328
00:11:22,480 --> 00:11:25,839
h tilde is the product of the ui tildes

329
00:11:25,839 --> 00:11:27,279
which again have the randomness w

330
00:11:27,279 --> 00:11:28,880
embedded raised to

331
00:11:28,880 --> 00:11:32,079
the polynomial evaluated at x hat and

332
00:11:32,079 --> 00:11:35,200
with this value y note that the uh a

333
00:11:35,200 --> 00:11:35,680
fresh

334
00:11:35,680 --> 00:11:38,399
w is sampled for each message for pseudo

335
00:11:38,399 --> 00:11:39,839
randomness whereas the same

336
00:11:39,839 --> 00:11:43,440
y value is used for all messages

337
00:11:43,440 --> 00:11:45,200
and finally you output the message m

338
00:11:45,200 --> 00:11:46,560
tilde and

339
00:11:46,560 --> 00:11:50,719
the signature h tilde sigma

340
00:11:51,040 --> 00:11:53,600
so here is what the public keys and

341
00:11:53,600 --> 00:11:56,399
messages look like so alice's public key

342
00:11:56,399 --> 00:11:59,920
is of length 10. there are

343
00:11:59,920 --> 00:12:02,399
uh five elements which we'll see in a

344
00:12:02,399 --> 00:12:03,839
moment are used to sign

345
00:12:03,839 --> 00:12:06,160
using the old scheme and then the secret

346
00:12:06,160 --> 00:12:07,920
values which are used to compute the

347
00:12:07,920 --> 00:12:08,399
glue

348
00:12:08,399 --> 00:12:10,959
are embedded in the final five values so

349
00:12:10,959 --> 00:12:12,240
we have the x hat

350
00:12:12,240 --> 00:12:15,279
embedded in the exponent and this y1

351
00:12:15,279 --> 00:12:18,480
and y2 now the glue is computed using a

352
00:12:18,480 --> 00:12:20,480
single value y which is the product of

353
00:12:20,480 --> 00:12:21,440
these two values

354
00:12:21,440 --> 00:12:24,480
this is an artifact of the proof of

355
00:12:24,480 --> 00:12:26,399
informability we require y

356
00:12:26,399 --> 00:12:29,839
to be separated into two values and

357
00:12:29,839 --> 00:12:33,040
the message here is p to the m

358
00:12:33,040 --> 00:12:36,079
i's and we have the

359
00:12:36,079 --> 00:12:39,200
glue element h tilde and

360
00:12:39,200 --> 00:12:43,040
n signatures sigma sigma i

361
00:12:43,040 --> 00:12:46,880
so we are able to sign the capital mi

362
00:12:46,880 --> 00:12:47,600
messages

363
00:12:47,600 --> 00:12:51,200
using the first part of alice's key

364
00:12:51,200 --> 00:12:54,560
so x1 through x5 we just use the prior

365
00:12:54,560 --> 00:12:55,440
scheme

366
00:12:55,440 --> 00:12:57,519
and note that the public key is of

367
00:12:57,519 --> 00:12:58,639
length 10

368
00:12:58,639 --> 00:13:00,880
but the message can be of any length so

369
00:13:00,880 --> 00:13:01,760
it can incorporate

370
00:13:01,760 --> 00:13:04,720
any number of attributes which is much

371
00:13:04,720 --> 00:13:06,959
more useful in applications

372
00:13:06,959 --> 00:13:09,600
now for this construction uh that i

373
00:13:09,600 --> 00:13:10,800
mentioned

374
00:13:10,800 --> 00:13:13,120
we are able to achieve message class

375
00:13:13,120 --> 00:13:15,680
hiding and public key class hiding as is

376
00:13:15,680 --> 00:13:18,880
but for enforceability and origin hiding

377
00:13:18,880 --> 00:13:21,360
we actually require

378
00:13:21,360 --> 00:13:24,720
some relaxations so in particular we

379
00:13:24,720 --> 00:13:27,760
require an interactive signing protocol

380
00:13:27,760 --> 00:13:30,000
so instead of assigner taking as input a

381
00:13:30,000 --> 00:13:30,800
message m

382
00:13:30,800 --> 00:13:32,959
and just outputting a signature there's

383
00:13:32,959 --> 00:13:34,000
actually

384
00:13:34,000 --> 00:13:35,600
an interaction between the signer and

385
00:13:35,600 --> 00:13:37,279
recipient so

386
00:13:37,279 --> 00:13:39,360
this occurs in three steps so in step

387
00:13:39,360 --> 00:13:41,440
one the receiver gives a zero knowledge

388
00:13:41,440 --> 00:13:42,480
proof of knowledge

389
00:13:42,480 --> 00:13:44,720
of the discrete logs of the message so

390
00:13:44,720 --> 00:13:46,320
these are the mis

391
00:13:46,320 --> 00:13:48,560
in step two the signer computes the glue

392
00:13:48,560 --> 00:13:50,880
value h tilde and the signature

393
00:13:50,880 --> 00:13:52,800
and then in step three the signer gives

394
00:13:52,800 --> 00:13:54,079
a zero knowledge proof

395
00:13:54,079 --> 00:13:57,519
that h tilde was computed correctly

396
00:13:57,519 --> 00:14:00,000
and the reason for the third step is

397
00:14:00,000 --> 00:14:01,839
that a dishonest signer might try to

398
00:14:01,839 --> 00:14:03,600
compute the glue element incorrectly in

399
00:14:03,600 --> 00:14:05,199
order to break the origin hiding

400
00:14:05,199 --> 00:14:06,000
property

401
00:14:06,000 --> 00:14:08,720
so we require this zero knowledge proof

402
00:14:08,720 --> 00:14:09,279
so that

403
00:14:09,279 --> 00:14:11,120
origin hiding holds for all signers not

404
00:14:11,120 --> 00:14:12,639
just on assigners

405
00:14:12,639 --> 00:14:15,120
and the first step where you prove the

406
00:14:15,120 --> 00:14:16,720
discrete log of the message this is

407
00:14:16,720 --> 00:14:18,720
something that was introduced as a type

408
00:14:18,720 --> 00:14:20,000
of unforge ability called

409
00:14:20,000 --> 00:14:22,000
existential and forgeability against

410
00:14:22,000 --> 00:14:24,160
chosen open message attack

411
00:14:24,160 --> 00:14:27,360
which was introduced by fukusperitol and

412
00:14:27,360 --> 00:14:30,880
this requires that the recipient

413
00:14:30,880 --> 00:14:33,519
give a discrete log a zero knowledge

414
00:14:33,519 --> 00:14:34,720
proof of the discrete logs of the

415
00:14:34,720 --> 00:14:35,760
message

416
00:14:35,760 --> 00:14:38,800
and while our construction satisfies

417
00:14:38,800 --> 00:14:40,639
this weaker notion of unforgeability and

418
00:14:40,639 --> 00:14:41,519
origin hiding

419
00:14:41,519 --> 00:14:43,920
for the purposes of our application it's

420
00:14:43,920 --> 00:14:44,959
completely fine

421
00:14:44,959 --> 00:14:47,279
so that's because um for anonymous

422
00:14:47,279 --> 00:14:49,199
credentials typically the recipient

423
00:14:49,199 --> 00:14:51,279
gives a proof of knowledge of her secret

424
00:14:51,279 --> 00:14:52,000
key

425
00:14:52,000 --> 00:14:54,639
so this is exactly the mis here and so

426
00:14:54,639 --> 00:14:56,560
this ufcoma

427
00:14:56,560 --> 00:14:59,199
really comes for free and then relaxing

428
00:14:59,199 --> 00:15:01,360
origin hiding to incorporate the zero

429
00:15:01,360 --> 00:15:02,560
knowledge proof

430
00:15:02,560 --> 00:15:05,040
um adds an additional step but it can be

431
00:15:05,040 --> 00:15:06,720
uh computed efficiently so both of these

432
00:15:06,720 --> 00:15:08,320
zero knowledge proofs can be computed

433
00:15:08,320 --> 00:15:09,040
using

434
00:15:09,040 --> 00:15:10,800
just standard sigma protocols on

435
00:15:10,800 --> 00:15:12,880
committed values so again these are all

436
00:15:12,880 --> 00:15:13,600
reasonable

437
00:15:13,600 --> 00:15:15,600
relaxations given the application that

438
00:15:15,600 --> 00:15:18,000
we're interested in

439
00:15:18,000 --> 00:15:20,560
so just to sum up our result is that we

440
00:15:20,560 --> 00:15:22,480
were able to construct mercurial

441
00:15:22,480 --> 00:15:23,360
signatures

442
00:15:23,360 --> 00:15:25,920
for variable length messages for this

443
00:15:25,920 --> 00:15:28,079
particular equivalence relation

444
00:15:28,079 --> 00:15:29,839
and we've proven them secure in the

445
00:15:29,839 --> 00:15:31,199
generic group model

446
00:15:31,199 --> 00:15:33,440
under the asymmetric bilinear decisional

447
00:15:33,440 --> 00:15:36,320
diffie helmet assumption

448
00:15:36,320 --> 00:15:41,839
and that's it thank you so much

