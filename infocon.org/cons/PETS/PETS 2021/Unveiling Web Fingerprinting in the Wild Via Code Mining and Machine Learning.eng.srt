1
00:00:02,560 --> 00:00:03,840
hello everyone

2
00:00:03,840 --> 00:00:06,319
thank you for joining this session i am

3
00:00:06,319 --> 00:00:08,160
valentino rizzo from mermaid cyber

4
00:00:08,160 --> 00:00:09,360
security and

5
00:00:09,360 --> 00:00:11,440
in this talk i'm going to present the

6
00:00:11,440 --> 00:00:13,440
work i developed together with stefano

7
00:00:13,440 --> 00:00:14,160
traverso

8
00:00:14,160 --> 00:00:16,320
also from airmen cyber security and

9
00:00:16,320 --> 00:00:18,880
marco media from politecnico torino and

10
00:00:18,880 --> 00:00:20,960
hermes cyber security

11
00:00:20,960 --> 00:00:23,199
the paper we wrote is called unveiling

12
00:00:23,199 --> 00:00:24,960
with fingerprinting in the wild

13
00:00:24,960 --> 00:00:27,680
via code mining and machine learning and

14
00:00:27,680 --> 00:00:29,920
in this work we developed a methodology

15
00:00:29,920 --> 00:00:31,279
for automatically detecting

16
00:00:31,279 --> 00:00:32,800
fingerprinting scripts

17
00:00:32,800 --> 00:00:34,640
and employed it to study web

18
00:00:34,640 --> 00:00:36,880
fingerprinting and this adoption in the

19
00:00:36,880 --> 00:00:38,239
wild

20
00:00:38,239 --> 00:00:41,520
this work has been funded by the horizon

21
00:00:41,520 --> 00:00:45,760
2020 pin city project

22
00:00:45,760 --> 00:00:48,800
so what is web fingerprinting

23
00:00:48,800 --> 00:00:51,039
as many of you here know the web is

24
00:00:51,039 --> 00:00:53,440
filled with services tracking users

25
00:00:53,440 --> 00:00:56,399
during their online browsing activity

26
00:00:56,399 --> 00:00:58,320
the services typically use

27
00:00:58,320 --> 00:01:00,640
conventional tracking techniques which

28
00:01:00,640 --> 00:01:01,440
exploit

29
00:01:01,440 --> 00:01:04,080
client-side storages such as cookies and

30
00:01:04,080 --> 00:01:06,000
local storage in order to save

31
00:01:06,000 --> 00:01:08,880
uniquely identifying strings generated

32
00:01:08,880 --> 00:01:09,920
on the server side

33
00:01:09,920 --> 00:01:12,560
to recognize the same user across

34
00:01:12,560 --> 00:01:14,240
different websites

35
00:01:14,240 --> 00:01:15,759
these techniques are easily

36
00:01:15,759 --> 00:01:18,240
circumventable by users by denying the

37
00:01:18,240 --> 00:01:20,640
possibility to store such identifiers to

38
00:01:20,640 --> 00:01:21,600
websites

39
00:01:21,600 --> 00:01:24,159
or by deleting these identifiers for

40
00:01:24,159 --> 00:01:27,520
example on the browser closure

41
00:01:27,520 --> 00:01:29,360
web fingerprinting is a tracking

42
00:01:29,360 --> 00:01:31,200
methodology characterized by a

43
00:01:31,200 --> 00:01:31,920
completely

44
00:01:31,920 --> 00:01:34,640
stateless approach as it relies on the

45
00:01:34,640 --> 00:01:35,680
collection through

46
00:01:35,680 --> 00:01:37,680
javascript code of device

47
00:01:37,680 --> 00:01:39,600
characteristics such as

48
00:01:39,600 --> 00:01:42,159
screen size color depth installed fonts

49
00:01:42,159 --> 00:01:43,280
and plugins

50
00:01:43,280 --> 00:01:45,920
graphic and audio stack characteristics

51
00:01:45,920 --> 00:01:47,920
and many others in order to create a

52
00:01:47,920 --> 00:01:49,920
uniquely identifying string

53
00:01:49,920 --> 00:01:52,320
which stays the same for the same user

54
00:01:52,320 --> 00:01:53,759
as the user

55
00:01:53,759 --> 00:01:57,119
visits different websites this technique

56
00:01:57,119 --> 00:01:59,759
is much harder to control by users as

57
00:01:59,759 --> 00:02:02,479
there is no trivial way to avoid the web

58
00:02:02,479 --> 00:02:03,920
fingerprinting without

59
00:02:03,920 --> 00:02:06,960
breaking websites

60
00:02:07,200 --> 00:02:09,038
so we consider the different

61
00:02:09,038 --> 00:02:11,360
fingerprinting techniques in our work

62
00:02:11,360 --> 00:02:13,040
we have browser parameters

63
00:02:13,040 --> 00:02:14,959
fingerprinting plugins and

64
00:02:14,959 --> 00:02:17,520
types enumeration installed fonts

65
00:02:17,520 --> 00:02:18,480
enumeration

66
00:02:18,480 --> 00:02:20,959
canvas audio and webgl parameters

67
00:02:20,959 --> 00:02:22,239
fingerprinting and

68
00:02:22,239 --> 00:02:25,280
hardware information collections each of

69
00:02:25,280 --> 00:02:26,400
these techniques

70
00:02:26,400 --> 00:02:28,959
is characterized by a set of apis that

71
00:02:28,959 --> 00:02:31,200
are needed in order to implement it

72
00:02:31,200 --> 00:02:33,519
and trackers usually combine multiple

73
00:02:33,519 --> 00:02:34,400
techniques

74
00:02:34,400 --> 00:02:36,640
in order to increase the final entropy

75
00:02:36,640 --> 00:02:38,080
of the generated string

76
00:02:38,080 --> 00:02:42,640
and as such render it more identifying

77
00:02:42,640 --> 00:02:44,239
from the consideration that

78
00:02:44,239 --> 00:02:46,879
fingerprinting is then implemented by

79
00:02:46,879 --> 00:02:49,440
exploiting multiple combinations of

80
00:02:49,440 --> 00:02:50,720
these apis

81
00:02:50,720 --> 00:02:53,280
comes our intuition that machine

82
00:02:53,280 --> 00:02:54,000
learning

83
00:02:54,000 --> 00:02:56,800
could help us spotting fingerprinting

84
00:02:56,800 --> 00:02:59,280
scripts

85
00:02:59,519 --> 00:03:01,680
so we started by developing a static

86
00:03:01,680 --> 00:03:04,400
code analysis based methodology

87
00:03:04,400 --> 00:03:07,360
it starts with the obfuscation and

88
00:03:07,360 --> 00:03:10,400
beautification of the analyze script

89
00:03:10,400 --> 00:03:13,519
this allows the script to become more

90
00:03:13,519 --> 00:03:14,560
human readable

91
00:03:14,560 --> 00:03:17,280
and so to verify the final

92
00:03:17,280 --> 00:03:18,400
classification

93
00:03:18,400 --> 00:03:22,080
of the methodology and also to

94
00:03:22,080 --> 00:03:24,799
process the script to the static code

95
00:03:24,799 --> 00:03:26,560
analysis

96
00:03:26,560 --> 00:03:29,599
then it proceeds with the creation of an

97
00:03:29,599 --> 00:03:31,920
abstract syntax tree representation of

98
00:03:31,920 --> 00:03:33,760
the analyzed code

99
00:03:33,760 --> 00:03:36,959
this creates a three base representation

100
00:03:36,959 --> 00:03:39,280
of the code syntactical structure

101
00:03:39,280 --> 00:03:41,440
and for example in the figure you can

102
00:03:41,440 --> 00:03:43,680
see the code section on the left

103
00:03:43,680 --> 00:03:46,000
being represented as its tree

104
00:03:46,000 --> 00:03:47,200
representation

105
00:03:47,200 --> 00:03:50,400
on the right then

106
00:03:50,400 --> 00:03:54,319
we have the identification in the ist

107
00:03:54,319 --> 00:03:57,680
of predefined patterns which could

108
00:03:57,680 --> 00:04:00,319
represent fingerprinting behavior we

109
00:04:00,319 --> 00:04:02,799
predefined those patterns based on

110
00:04:02,799 --> 00:04:06,080
field knowledge and finally we have the

111
00:04:06,080 --> 00:04:08,640
script classification by providing the

112
00:04:08,640 --> 00:04:11,360
information we extracted from d3

113
00:04:11,360 --> 00:04:13,680
to random forest and support bitcoin

114
00:04:13,680 --> 00:04:14,720
machines as

115
00:04:14,720 --> 00:04:17,760
features in input

116
00:04:18,320 --> 00:04:20,399
so we started with a sitting ground

117
00:04:20,399 --> 00:04:22,240
truth to counting about

118
00:04:22,240 --> 00:04:26,000
300 total scripts we collected those

119
00:04:26,000 --> 00:04:28,479
scripts from princeton's web census

120
00:04:28,479 --> 00:04:29,440
database for

121
00:04:29,440 --> 00:04:32,759
fingerprinting scripts and obtained

122
00:04:32,759 --> 00:04:35,520
non-fingerprinting scripts from websites

123
00:04:35,520 --> 00:04:37,919
having a low probability of embedding

124
00:04:37,919 --> 00:04:38,880
trackers

125
00:04:38,880 --> 00:04:43,040
such as government and academic websites

126
00:04:43,040 --> 00:04:45,440
we used this initial version of our

127
00:04:45,440 --> 00:04:46,960
ground truth in order to

128
00:04:46,960 --> 00:04:50,320
train and optimize a preliminary version

129
00:04:50,320 --> 00:04:52,160
of our classifier

130
00:04:52,160 --> 00:04:55,919
and we run this classifier over a

131
00:04:55,919 --> 00:04:57,759
hundred thousand randomly chosen

132
00:04:57,759 --> 00:04:59,360
javascript scripts

133
00:04:59,360 --> 00:05:01,600
from the results of this classification

134
00:05:01,600 --> 00:05:04,000
we manually verified the labeling

135
00:05:04,000 --> 00:05:07,120
for 1800 scripts and appended them to

136
00:05:07,120 --> 00:05:08,240
the ground truth

137
00:05:08,240 --> 00:05:10,720
resulting in a final grand route of

138
00:05:10,720 --> 00:05:11,280
about

139
00:05:11,280 --> 00:05:15,880
9 300 scripts coming from

140
00:05:15,880 --> 00:05:19,440
752 domains

141
00:05:20,960 --> 00:05:24,560
so we optimized our classifiers and

142
00:05:24,560 --> 00:05:25,280
tuned them

143
00:05:25,280 --> 00:05:28,160
using grid search and validated their

144
00:05:28,160 --> 00:05:29,360
results

145
00:05:29,360 --> 00:05:32,160
using k-fold cross-validation and as you

146
00:05:32,160 --> 00:05:33,600
can see from the figure

147
00:05:33,600 --> 00:05:36,960
both classifiers performed quite well

148
00:05:36,960 --> 00:05:40,400
with 94 percent accuracy

149
00:05:40,400 --> 00:05:43,440
for robot we can see that

150
00:05:43,440 --> 00:05:47,280
we also combined the results

151
00:05:47,280 --> 00:05:50,840
of the fingerprinting class from both

152
00:05:50,840 --> 00:05:53,280
classifiers creating their union

153
00:05:53,280 --> 00:05:55,600
and intersection and in particular the

154
00:05:55,600 --> 00:05:57,759
union of the result sets on the

155
00:05:57,759 --> 00:05:59,600
fingerprinting class

156
00:05:59,600 --> 00:06:02,759
resulting in the higher accuracy with

157
00:06:02,759 --> 00:06:06,319
94.2 percent but most importantly the

158
00:06:06,319 --> 00:06:11,520
highest recall at 40 94.4 percent

159
00:06:11,520 --> 00:06:13,520
which is the measure we were

160
00:06:13,520 --> 00:06:16,400
particularly interested into

161
00:06:16,400 --> 00:06:19,039
so from now on we will call the union of

162
00:06:19,039 --> 00:06:20,319
these

163
00:06:20,319 --> 00:06:23,120
results sets on the fingerprinting class

164
00:06:23,120 --> 00:06:23,759
as the

165
00:06:23,759 --> 00:06:27,520
static code analysis results

166
00:06:27,680 --> 00:06:29,680
we then proceeded with the creation of a

167
00:06:29,680 --> 00:06:33,039
dynamic code analysis based methodology

168
00:06:33,039 --> 00:06:35,840
we started with the instrumentation of

169
00:06:35,840 --> 00:06:38,000
the openvpn crawler

170
00:06:38,000 --> 00:06:41,039
we instrumented it to log the executions

171
00:06:41,039 --> 00:06:42,479
of apis which

172
00:06:42,479 --> 00:06:45,680
composed the ast patterns we previously

173
00:06:45,680 --> 00:06:46,400
mentioned

174
00:06:46,400 --> 00:06:48,800
in the static code analysis then

175
00:06:48,800 --> 00:06:49,840
proceeded with

176
00:06:49,840 --> 00:06:52,400
launching the crawler over the alexa

177
00:06:52,400 --> 00:06:54,720
million websites in order to lock the

178
00:06:54,720 --> 00:06:55,919
execution of

179
00:06:55,919 --> 00:06:59,120
interesting apis and finally provided

180
00:06:59,120 --> 00:07:00,800
those apis locks

181
00:07:00,800 --> 00:07:03,680
to random forest as input features to

182
00:07:03,680 --> 00:07:06,400
train the classifier and make it able to

183
00:07:06,400 --> 00:07:10,000
recognize fingerprinting scripts

184
00:07:10,000 --> 00:07:12,479
so when comparing dynamic code analysis

185
00:07:12,479 --> 00:07:13,840
to this targeted one

186
00:07:13,840 --> 00:07:17,120
we noticed that it has some advantages

187
00:07:17,120 --> 00:07:19,759
like the ability to inspect runtime

188
00:07:19,759 --> 00:07:20,479
value

189
00:07:20,479 --> 00:07:23,599
values at runtimes and there's a port

190
00:07:23,599 --> 00:07:27,039
for the analysis of obfuscated scripts

191
00:07:27,039 --> 00:07:29,599
but it also presents many disadvantages

192
00:07:29,599 --> 00:07:30,560
such as

193
00:07:30,560 --> 00:07:33,199
lower scalability the need for

194
00:07:33,199 --> 00:07:34,160
dependencies

195
00:07:34,160 --> 00:07:38,560
for scripts to be successfully executed

196
00:07:38,560 --> 00:07:41,440
the unavailability of the analysis

197
00:07:41,440 --> 00:07:42,160
offline

198
00:07:42,160 --> 00:07:44,879
as dependencies often needs to be

199
00:07:44,879 --> 00:07:46,000
downloaded

200
00:07:46,000 --> 00:07:49,039
and finally the fact that this analysis

201
00:07:49,039 --> 00:07:51,680
does not analyze non-executed code

202
00:07:51,680 --> 00:07:54,240
sections

203
00:07:55,039 --> 00:07:57,280
so we proceeded with comparing the

204
00:07:57,280 --> 00:07:59,280
dynamic and studied code analysis

205
00:07:59,280 --> 00:08:00,319
performances

206
00:08:00,319 --> 00:08:02,479
we did so over the set of scripts

207
00:08:02,479 --> 00:08:03,440
connected to

208
00:08:03,440 --> 00:08:07,120
about 17 000 websites randomly chosen

209
00:08:07,120 --> 00:08:09,599
from the alexa top 1 million rank

210
00:08:09,599 --> 00:08:12,560
and as we can see from the figure both

211
00:08:12,560 --> 00:08:12,960
the

212
00:08:12,960 --> 00:08:15,520
methodologies agreed on classifying as

213
00:08:15,520 --> 00:08:17,800
fingerprinters

214
00:08:17,800 --> 00:08:21,039
778 scripts but then the

215
00:08:21,039 --> 00:08:24,240
static code analysis also identified as

216
00:08:24,240 --> 00:08:25,639
fingerprinters

217
00:08:25,639 --> 00:08:29,039
394 scripts which were identified as

218
00:08:29,039 --> 00:08:30,400
non-fingerprinters

219
00:08:30,400 --> 00:08:33,200
by the dynamic code analysis while on

220
00:08:33,200 --> 00:08:35,919
the other side the dynamic analysis

221
00:08:35,919 --> 00:08:39,120
labeled 116 scripts

222
00:08:39,120 --> 00:08:41,760
as fingerprinters while the static code

223
00:08:41,760 --> 00:08:43,599
analysis missed them

224
00:08:43,599 --> 00:08:45,839
we looked into the causes of those

225
00:08:45,839 --> 00:08:48,240
differences and we found that

226
00:08:48,240 --> 00:08:50,880
static code analysis missed those

227
00:08:50,880 --> 00:08:52,640
scripts where the

228
00:08:52,640 --> 00:08:55,760
fingerprinting part was in an obfuscated

229
00:08:55,760 --> 00:08:56,959
code section

230
00:08:56,959 --> 00:09:00,000
while the dynamic code analysis missed

231
00:09:00,000 --> 00:09:03,279
those fingerprinters that included the

232
00:09:03,279 --> 00:09:06,640
fingerprinting section in a code block

233
00:09:06,640 --> 00:09:08,320
which was not executed

234
00:09:08,320 --> 00:09:11,760
during the particular open bpm

235
00:09:11,760 --> 00:09:15,439
execution of these grips

236
00:09:15,760 --> 00:09:17,640
we then proceeded with the

237
00:09:17,640 --> 00:09:20,000
characterization of fingerprinters in

238
00:09:20,000 --> 00:09:21,040
the wild

239
00:09:21,040 --> 00:09:24,080
we obtained a data set containing a 52

240
00:09:24,080 --> 00:09:24,640
million

241
00:09:24,640 --> 00:09:28,560
https transaction from 982 volunteering

242
00:09:28,560 --> 00:09:29,440
users

243
00:09:29,440 --> 00:09:33,120
between april and august 2017.

244
00:09:33,120 --> 00:09:37,360
this database ended up containing

245
00:09:37,360 --> 00:09:41,440
about 400 000 urls referencing

246
00:09:41,440 --> 00:09:44,640
javascript's files which once downloaded

247
00:09:44,640 --> 00:09:45,760
resulted in

248
00:09:45,760 --> 00:09:49,360
about 236 thousands unique

249
00:09:49,360 --> 00:09:52,959
javascript files volunteers have mostly

250
00:09:52,959 --> 00:09:54,000
been males

251
00:09:54,000 --> 00:09:57,200
in the 18 to 31 age range

252
00:09:57,200 --> 00:10:01,200
coming from different parts of italy

253
00:10:01,200 --> 00:10:04,560
and we also calculated the percentages

254
00:10:04,560 --> 00:10:07,360
of alexa rank websites included in our

255
00:10:07,360 --> 00:10:08,160
data set

256
00:10:08,160 --> 00:10:10,880
in order to study how it generalizes

257
00:10:10,880 --> 00:10:12,880
finding that about 70 percent

258
00:10:12,880 --> 00:10:15,839
of websites including in the top 1000

259
00:10:15,839 --> 00:10:17,200
rank are covered

260
00:10:17,200 --> 00:10:20,000
by our data set about 42 percent of

261
00:10:20,000 --> 00:10:22,800
those included in the top 10 000 rank

262
00:10:22,800 --> 00:10:26,399
and just 17.3 percent for those included

263
00:10:26,399 --> 00:10:27,360
in the top

264
00:10:27,360 --> 00:10:33,120
100 000 rank so here you can see

265
00:10:33,120 --> 00:10:36,959
the results we obtained on this data set

266
00:10:36,959 --> 00:10:40,000
we ran the static analysis over it

267
00:10:40,000 --> 00:10:42,160
as it was the only analysis which were

268
00:10:42,160 --> 00:10:43,600
capable of

269
00:10:43,600 --> 00:10:45,920
analyzing this data set since it is

270
00:10:45,920 --> 00:10:47,360
composed of

271
00:10:47,360 --> 00:10:50,480
raw javascript files as you can see the

272
00:10:50,480 --> 00:10:51,920
static analysis

273
00:10:51,920 --> 00:10:55,440
concluded that about 1.1

274
00:10:55,440 --> 00:10:58,880
of the scripts which users encountered

275
00:10:58,880 --> 00:11:01,920
during their navigation performed

276
00:11:01,920 --> 00:11:04,640
fingerprinting activity we also

277
00:11:04,640 --> 00:11:05,680
characterized

278
00:11:05,680 --> 00:11:08,800
those scripts by the api

279
00:11:08,800 --> 00:11:12,320
that they used to perform fingerprinting

280
00:11:12,320 --> 00:11:15,680
and we found that apis related to

281
00:11:15,680 --> 00:11:18,640
older fingerprinting techniques such as

282
00:11:18,640 --> 00:11:20,720
browser parameters plugins and mime

283
00:11:20,720 --> 00:11:21,519
types

284
00:11:21,519 --> 00:11:24,320
screen time zone hardware information

285
00:11:24,320 --> 00:11:24,720
and

286
00:11:24,720 --> 00:11:26,959
phone termination we are much more

287
00:11:26,959 --> 00:11:28,079
common when

288
00:11:28,079 --> 00:11:31,120
compared to apis related to recent

289
00:11:31,120 --> 00:11:32,800
fingerprinting techniques

290
00:11:32,800 --> 00:11:35,680
such as canvas audio and webgl

291
00:11:35,680 --> 00:11:37,440
parameters

292
00:11:37,440 --> 00:11:40,640
we also found that while

293
00:11:40,640 --> 00:11:43,360
those apis are much more common to

294
00:11:43,360 --> 00:11:45,040
encounter obviously in

295
00:11:45,040 --> 00:11:47,680
fingerprinting scripts the number of

296
00:11:47,680 --> 00:11:48,399
scripts

297
00:11:48,399 --> 00:11:51,600
that include these

298
00:11:51,600 --> 00:11:54,800
apis which is reported on the ticks of

299
00:11:54,800 --> 00:11:56,480
the bars of the histogram

300
00:11:56,480 --> 00:11:59,120
is much higher for non-fingerprinting

301
00:11:59,120 --> 00:12:00,399
scripts

302
00:12:00,399 --> 00:12:04,079
so as as non-fingerprinting scripts are

303
00:12:04,079 --> 00:12:06,560
frequently using those apis

304
00:12:06,560 --> 00:12:08,959
automatically detecting the purpose of

305
00:12:08,959 --> 00:12:11,279
their usage is not trivial and from this

306
00:12:11,279 --> 00:12:13,360
consideration comes our

307
00:12:13,360 --> 00:12:15,760
decision to opt for machine learning to

308
00:12:15,760 --> 00:12:16,639
do so

309
00:12:16,639 --> 00:12:18,959
we then proceeded with the creation of

310
00:12:18,959 --> 00:12:20,880
what we call the trackers list which is

311
00:12:20,880 --> 00:12:22,160
at least obtained by

312
00:12:22,160 --> 00:12:24,959
merging disconnects easily lists and

313
00:12:24,959 --> 00:12:27,040
these privacy's lists

314
00:12:27,040 --> 00:12:30,399
we use those this list in order to find

315
00:12:30,399 --> 00:12:30,720
out

316
00:12:30,720 --> 00:12:33,600
how many of the scripts we identified as

317
00:12:33,600 --> 00:12:35,279
fingerprinters are known

318
00:12:35,279 --> 00:12:37,920
to these lists and we found that less

319
00:12:37,920 --> 00:12:39,839
than 40 percent of the scripts

320
00:12:39,839 --> 00:12:43,760
were blocked by those lists and

321
00:12:43,760 --> 00:12:46,079
for what concerns domains servicing

322
00:12:46,079 --> 00:12:47,440
those scripts

323
00:12:47,440 --> 00:12:50,480
less than 20 percent of those domains

324
00:12:50,480 --> 00:12:51,600
were included

325
00:12:51,600 --> 00:12:55,200
in these lists we looked into

326
00:12:55,200 --> 00:12:57,600
the purposes for which unknown

327
00:12:57,600 --> 00:12:58,720
fingerprinters

328
00:12:58,720 --> 00:13:01,600
use fingerprinting techniques and we

329
00:13:01,600 --> 00:13:04,160
found that they do so for security and

330
00:13:04,160 --> 00:13:06,800
anti-fraud purposes for both

331
00:13:06,800 --> 00:13:09,600
recognition but in many cases also for

332
00:13:09,600 --> 00:13:10,959
actual tracking

333
00:13:10,959 --> 00:13:13,440
so in those cases they represent novel

334
00:13:13,440 --> 00:13:15,279
trackers which are still

335
00:13:15,279 --> 00:13:18,160
unknown to those popular anti-driving

336
00:13:18,160 --> 00:13:19,600
lists

337
00:13:19,600 --> 00:13:22,240
we proceeded with the characterization

338
00:13:22,240 --> 00:13:23,519
of known trackers

339
00:13:23,519 --> 00:13:26,480
and unknown fingerprinters for example

340
00:13:26,480 --> 00:13:27,279
in the

341
00:13:27,279 --> 00:13:29,600
reported figure you can see the

342
00:13:29,600 --> 00:13:31,200
comparison between

343
00:13:31,200 --> 00:13:33,040
the conditional probabilities of

344
00:13:33,040 --> 00:13:34,880
encountering an api

345
00:13:34,880 --> 00:13:38,639
on the x-axis once that script included

346
00:13:38,639 --> 00:13:42,160
an api on the y-axis and we can notice

347
00:13:42,160 --> 00:13:42,800
that

348
00:13:42,800 --> 00:13:44,800
the results are pretty similar between

349
00:13:44,800 --> 00:13:46,399
the two categories with the

350
00:13:46,399 --> 00:13:48,720
difference of canvas and webgl

351
00:13:48,720 --> 00:13:49,760
parameters

352
00:13:49,760 --> 00:13:52,079
being much more popular in unknown

353
00:13:52,079 --> 00:13:54,000
fingerprinters when compared to

354
00:13:54,000 --> 00:13:57,680
gnome fingerprinters however from these

355
00:13:57,680 --> 00:14:00,079
and other comparisons we concluded that

356
00:14:00,079 --> 00:14:00,720
is it

357
00:14:00,720 --> 00:14:02,959
is hard to automatically understand the

358
00:14:02,959 --> 00:14:05,040
purpose of the usage of fingerprinting

359
00:14:05,040 --> 00:14:06,000
techniques

360
00:14:06,000 --> 00:14:08,560
and that differentiating between given

361
00:14:08,560 --> 00:14:10,800
feminists of services is very difficult

362
00:14:10,800 --> 00:14:12,959
when basing the differentiation

363
00:14:12,959 --> 00:14:17,839
on the set of used apis

364
00:14:18,320 --> 00:14:21,600
so concerning the limits of our work

365
00:14:21,600 --> 00:14:23,839
several months have passed between the

366
00:14:23,839 --> 00:14:26,240
collection of users

367
00:14:26,240 --> 00:14:28,240
navigation traces and the actual

368
00:14:28,240 --> 00:14:29,600
download of the scripts

369
00:14:29,600 --> 00:14:32,160
resulting in about 40 percent of them

370
00:14:32,160 --> 00:14:32,959
being lost

371
00:14:32,959 --> 00:14:35,600
as they went offline in the meantime we

372
00:14:35,600 --> 00:14:38,079
recognize the spatial temporal and

373
00:14:38,079 --> 00:14:39,760
geographical limits of our wealth

374
00:14:39,760 --> 00:14:40,480
datasets

375
00:14:40,480 --> 00:14:42,880
given the demographics characteristics

376
00:14:42,880 --> 00:14:45,199
so we mentioned before

377
00:14:45,199 --> 00:14:47,920
we are aware that not all fingerprinting

378
00:14:47,920 --> 00:14:50,000
techniques have been considered in our

379
00:14:50,000 --> 00:14:50,800
work

380
00:14:50,800 --> 00:14:53,120
in fact less popular according to

381
00:14:53,120 --> 00:14:54,000
literature

382
00:14:54,000 --> 00:14:57,920
techniques such as device sensor

383
00:14:57,920 --> 00:14:58,800
fingerprinting

384
00:14:58,800 --> 00:15:01,199
and battery api fingerprinting have been

385
00:15:01,199 --> 00:15:01,920
excluded

386
00:15:01,920 --> 00:15:05,120
from our work and the in the wild

387
00:15:05,120 --> 00:15:06,320
characterization

388
00:15:06,320 --> 00:15:08,880
has been performed using solely the

389
00:15:08,880 --> 00:15:10,800
static code analysis which is the only

390
00:15:10,800 --> 00:15:13,360
one appliable to the while data set

391
00:15:13,360 --> 00:15:16,079
however as we previously mentioned

392
00:15:16,079 --> 00:15:17,920
static and dynamic code analysis are

393
00:15:17,920 --> 00:15:19,120
complementary and

394
00:15:19,120 --> 00:15:22,240
only using one of them causes partial

395
00:15:22,240 --> 00:15:23,199
result

396
00:15:23,199 --> 00:15:25,440
for this reason we are aware that the

397
00:15:25,440 --> 00:15:26,240
results we

398
00:15:26,240 --> 00:15:28,800
presented in our work consist in a lower

399
00:15:28,800 --> 00:15:31,120
bound of the actual fingerprinting usage

400
00:15:31,120 --> 00:15:33,759
in the wild

401
00:15:35,040 --> 00:15:38,000
so the key findings of our work we

402
00:15:38,000 --> 00:15:38,800
engineered

403
00:15:38,800 --> 00:15:40,480
an automatic web fingerprinting

404
00:15:40,480 --> 00:15:42,320
detecting methodology

405
00:15:42,320 --> 00:15:45,040
which achieves a high accuracy in a

406
00:15:45,040 --> 00:15:46,240
small amount of time

407
00:15:46,240 --> 00:15:49,600
on of the shell partner we

408
00:15:49,600 --> 00:15:51,440
were the first to our knowledge to

409
00:15:51,440 --> 00:15:54,079
compare static and dynamic code analysis

410
00:15:54,079 --> 00:15:55,920
when studying web fingerprinting and

411
00:15:55,920 --> 00:15:58,000
demonstrated that they are complementary

412
00:15:58,000 --> 00:15:58,959
when detecting

413
00:15:58,959 --> 00:16:02,399
fingerprinting scripts we measure the

414
00:16:02,399 --> 00:16:04,560
fingerprinting scripts frequency in the

415
00:16:04,560 --> 00:16:06,079
wild finding that

416
00:16:06,079 --> 00:16:09,360
1.1 of the scripts encountered by users

417
00:16:09,360 --> 00:16:10,079
who perform

418
00:16:10,079 --> 00:16:12,399
fingerprinting activities we

419
00:16:12,399 --> 00:16:14,160
characterize fingerprinters

420
00:16:14,160 --> 00:16:17,360
and the techniques they adopt

421
00:16:17,360 --> 00:16:19,920
we discovered that most fingerprinting

422
00:16:19,920 --> 00:16:22,160
services are not included in

423
00:16:22,160 --> 00:16:25,199
popular anti-tracking lists and finally

424
00:16:25,199 --> 00:16:27,199
we characterized scripts from

425
00:16:27,199 --> 00:16:29,440
known and unknown trackers testifying

426
00:16:29,440 --> 00:16:30,480
the variety

427
00:16:30,480 --> 00:16:33,839
in the fingerprinting ecosystem

428
00:16:33,839 --> 00:16:36,880
finally the methodology we developed in

429
00:16:36,880 --> 00:16:39,519
this work is now part of hermes's

430
00:16:39,519 --> 00:16:41,120
commercial product

431
00:16:41,120 --> 00:16:43,839
and we look into improving it in order

432
00:16:43,839 --> 00:16:44,399
to

433
00:16:44,399 --> 00:16:46,880
being able to differentiate between

434
00:16:46,880 --> 00:16:47,440
scripts

435
00:16:47,440 --> 00:16:49,519
performing fingerprinting for tracking

436
00:16:49,519 --> 00:16:51,040
purposes and

437
00:16:51,040 --> 00:16:54,160
those doing so for

438
00:16:54,160 --> 00:16:56,959
security or bot recognition or

439
00:16:56,959 --> 00:17:00,239
anti-fraud purposes

440
00:17:00,639 --> 00:17:02,800
thank you for following this talk and if

441
00:17:02,800 --> 00:17:04,319
you have any question please

442
00:17:04,319 --> 00:17:09,599
join the live session

