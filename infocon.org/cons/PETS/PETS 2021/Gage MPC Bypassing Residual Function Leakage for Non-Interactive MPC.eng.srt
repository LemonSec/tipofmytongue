1
00:00:01,839 --> 00:00:04,480
hey everyone this is radel mashagwa

2
00:00:04,480 --> 00:00:06,640
thank you for joining my talk today in

3
00:00:06,640 --> 00:00:08,559
which i will introduce our new

4
00:00:08,559 --> 00:00:10,639
multi-party computation model

5
00:00:10,639 --> 00:00:13,759
gauge and pc the goal of this model

6
00:00:13,759 --> 00:00:15,920
is to prevent the leakage of the

7
00:00:15,920 --> 00:00:17,199
residual function

8
00:00:17,199 --> 00:00:20,800
that is inherent in an interactive npc

9
00:00:20,800 --> 00:00:25,039
this is a joint work with fabrics

10
00:00:25,279 --> 00:00:31,840
daniel yaroslov tal malkin alex nikita

11
00:00:35,520 --> 00:00:38,800
is about combining two paradigms namely

12
00:00:38,800 --> 00:00:39,120
an

13
00:00:39,120 --> 00:00:41,680
interactive multi-party computation and

14
00:00:41,680 --> 00:00:44,000
npc over a blockchain

15
00:00:44,000 --> 00:00:47,360
i will introduce both of these paradigms

16
00:00:47,360 --> 00:00:51,039
starting with an impc and using auctions

17
00:00:51,039 --> 00:00:54,239
as an example in a conventional

18
00:00:54,239 --> 00:00:57,840
in inpc setup we have a special entity

19
00:00:57,840 --> 00:00:59,680
called an evaluator

20
00:00:59,680 --> 00:01:02,239
that will be available for the entire

21
00:01:02,239 --> 00:01:04,319
period of the computation

22
00:01:04,319 --> 00:01:07,119
and we have a set of participants who

23
00:01:07,119 --> 00:01:08,479
want to compute

24
00:01:08,479 --> 00:01:11,360
a specific function over their uh

25
00:01:11,360 --> 00:01:13,119
private inputs

26
00:01:13,119 --> 00:01:16,240
uh each party will submit a message to

27
00:01:16,240 --> 00:01:17,360
the evaluator

28
00:01:17,360 --> 00:01:20,159
uh where this message is computed based

29
00:01:20,159 --> 00:01:20,479
on

30
00:01:20,479 --> 00:01:23,920
uh its private input and

31
00:01:23,920 --> 00:01:27,680
without interacting with any other party

32
00:01:27,680 --> 00:01:30,240
uh once all these messages are received

33
00:01:30,240 --> 00:01:31,600
the evaluator

34
00:01:31,600 --> 00:01:34,079
performs the computation and announces

35
00:01:34,079 --> 00:01:35,200
the output

36
00:01:35,200 --> 00:01:38,400
which in our case will be uh the winner

37
00:01:38,400 --> 00:01:41,840
in the auction

38
00:01:41,840 --> 00:01:45,280
existing works on in inpc showed that

39
00:01:45,280 --> 00:01:48,720
in order to enable the setting a trusted

40
00:01:48,720 --> 00:01:50,240
setup is needed

41
00:01:50,240 --> 00:01:52,560
uh this trusted setup will generate what

42
00:01:52,560 --> 00:01:53,439
we call

43
00:01:53,439 --> 00:01:56,079
correlated randomness uh that will be

44
00:01:56,079 --> 00:01:57,280
distributed

45
00:01:57,280 --> 00:02:00,159
among the parties beforehand each of

46
00:02:00,159 --> 00:02:01,200
these parties

47
00:02:01,200 --> 00:02:04,560
will then generate uh its message

48
00:02:04,560 --> 00:02:07,680
based on her private input and

49
00:02:07,680 --> 00:02:11,360
this correlated randomness

50
00:02:11,760 --> 00:02:15,760
in the in inpc setting

51
00:02:15,760 --> 00:02:18,480
we have that the leakage of the residual

52
00:02:18,480 --> 00:02:19,120
function

53
00:02:19,120 --> 00:02:22,239
is inherent meaning that if the

54
00:02:22,239 --> 00:02:24,640
evaluator uh colludes with any of

55
00:02:24,640 --> 00:02:27,760
the parties uh say party zero then the

56
00:02:27,760 --> 00:02:28,720
evaluator

57
00:02:28,720 --> 00:02:31,519
can recompute the function over

58
00:02:31,519 --> 00:02:33,599
arbitrary values of this colluding

59
00:02:33,599 --> 00:02:37,040
uh party input uh while fixing uh the

60
00:02:37,040 --> 00:02:38,080
inputs of the

61
00:02:38,080 --> 00:02:41,280
uh rest or the honest uh parties

62
00:02:41,280 --> 00:02:44,879
uh so translate that uh to our example

63
00:02:44,879 --> 00:02:47,360
uh even for example let's say the last

64
00:02:47,360 --> 00:02:48,160
party

65
00:02:48,160 --> 00:02:51,280
in the computation pn can wait until

66
00:02:51,280 --> 00:02:53,760
it sees all messages from the rest of

67
00:02:53,760 --> 00:02:54,800
the parties

68
00:02:54,800 --> 00:02:58,400
and then by just like uh

69
00:02:58,400 --> 00:03:00,560
doing uh or recomputing the leakage

70
00:03:00,560 --> 00:03:03,120
function it will be able to figure out

71
00:03:03,120 --> 00:03:04,080
the highest previous

72
00:03:04,080 --> 00:03:08,159
bed and then act accordingly

73
00:03:08,159 --> 00:03:11,599
uh these uh existing works uh showed how

74
00:03:11,599 --> 00:03:12,400
to construct

75
00:03:12,400 --> 00:03:15,840
uh in in pc protocols that are robust

76
00:03:15,840 --> 00:03:19,440
to collusion so to guarantee that the

77
00:03:19,440 --> 00:03:20,800
only thing that will be

78
00:03:20,800 --> 00:03:24,159
leaked is the residual function

79
00:03:24,159 --> 00:03:26,959
and as i just said uh all these

80
00:03:26,959 --> 00:03:29,920
protocols uh require a trusted setup

81
00:03:29,920 --> 00:03:32,799
to generate a correlated randomness for

82
00:03:32,799 --> 00:03:35,440
the players

83
00:03:36,080 --> 00:03:39,519
in parallel there's a progress on

84
00:03:39,519 --> 00:03:43,680
exploiting blockchains in npc

85
00:03:43,680 --> 00:03:46,159
this started with the first generation

86
00:03:46,159 --> 00:03:47,040
who

87
00:03:47,040 --> 00:03:49,920
used a blockchain to implement a

88
00:03:49,920 --> 00:03:51,200
broadcast channel

89
00:03:51,200 --> 00:03:54,959
that is usually needed in npc protocols

90
00:03:54,959 --> 00:03:57,680
the second generation incorporated

91
00:03:57,680 --> 00:04:00,560
payments into npc protocols

92
00:04:00,560 --> 00:04:03,280
and this was mainly used to address

93
00:04:03,280 --> 00:04:04,239
fairness

94
00:04:04,239 --> 00:04:07,120
where uh the party that uh quits the

95
00:04:07,120 --> 00:04:08,640
computation before

96
00:04:08,640 --> 00:04:11,760
letting others know the output will lose

97
00:04:11,760 --> 00:04:15,920
uh her collateral or penalty deposit

98
00:04:15,920 --> 00:04:18,639
uh the third generation which is uh this

99
00:04:18,639 --> 00:04:19,199
work

100
00:04:19,199 --> 00:04:22,560
um we take this further to

101
00:04:22,560 --> 00:04:25,680
incorporate smart contracts and minors

102
00:04:25,680 --> 00:04:28,400
as active participants in the mpc

103
00:04:28,400 --> 00:04:30,240
protocol

104
00:04:30,240 --> 00:04:33,040
so our goal is to utilize the blockchain

105
00:04:33,040 --> 00:04:34,320
in a novel way

106
00:04:34,320 --> 00:04:36,880
to prevent the leakage of the residual

107
00:04:36,880 --> 00:04:37,440
function

108
00:04:37,440 --> 00:04:42,240
in impc and avoid the requirement of

109
00:04:42,240 --> 00:04:44,960
having a trusted setup or the evaluator

110
00:04:44,960 --> 00:04:47,520
party who has to be available online

111
00:04:47,520 --> 00:04:50,880
during the whole computation

112
00:04:51,520 --> 00:04:54,639
uh this is done as follows uh at a high

113
00:04:54,639 --> 00:04:56,720
level a gauge mpc

114
00:04:56,720 --> 00:04:59,840
is composed of a party p0 and a set of

115
00:04:59,840 --> 00:05:03,039
n parties who all want to compute a

116
00:05:03,039 --> 00:05:05,039
specific function over their private

117
00:05:05,039 --> 00:05:06,560
inputs

118
00:05:06,560 --> 00:05:10,240
p0 setup or sets up the computation

119
00:05:10,240 --> 00:05:13,600
uh by preparing uh its initial message

120
00:05:13,600 --> 00:05:16,560
in xero then she creates a smart

121
00:05:16,560 --> 00:05:17,280
contract

122
00:05:17,280 --> 00:05:20,320
to control the computation and uses this

123
00:05:20,320 --> 00:05:22,960
smart contract to record m0

124
00:05:22,960 --> 00:05:25,520
and to create a collateral on the

125
00:05:25,520 --> 00:05:26,639
blockchain

126
00:05:26,639 --> 00:05:28,800
the amount of this collateral is

127
00:05:28,800 --> 00:05:30,160
proportional

128
00:05:30,160 --> 00:05:34,000
to the hardness or amount of work

129
00:05:34,000 --> 00:05:37,600
that others need or needed by others to

130
00:05:37,600 --> 00:05:39,919
finalize the computation

131
00:05:39,919 --> 00:05:42,960
um after uh posting m0

132
00:05:42,960 --> 00:05:45,680
and the collateral uh other parties will

133
00:05:45,680 --> 00:05:46,000
use

134
00:05:46,000 --> 00:05:48,400
m0 to compute uh and of course their

135
00:05:48,400 --> 00:05:49,520
private inputs

136
00:05:49,520 --> 00:05:52,080
to compute their own messages and then

137
00:05:52,080 --> 00:05:54,000
they post them

138
00:05:54,000 --> 00:05:56,639
on the blockchain using the same smart

139
00:05:56,639 --> 00:05:59,039
contract

140
00:05:59,039 --> 00:06:01,440
after having all these messages

141
00:06:01,440 --> 00:06:03,360
published on the blockchain

142
00:06:03,360 --> 00:06:06,479
and within a time out period and honest

143
00:06:06,479 --> 00:06:07,280
p0

144
00:06:07,280 --> 00:06:10,560
will come back and post a final message

145
00:06:10,560 --> 00:06:13,520
m0 prime that will allow finalizing the

146
00:06:13,520 --> 00:06:14,400
computation

147
00:06:14,400 --> 00:06:18,319
and announcing the output this honest p0

148
00:06:18,319 --> 00:06:20,960
will be able to recover her collateral

149
00:06:20,960 --> 00:06:21,520
because

150
00:06:21,520 --> 00:06:24,720
uh she uh submitted m0 crime

151
00:06:24,720 --> 00:06:27,919
on the other hand um a malicious p0 may

152
00:06:27,919 --> 00:06:28,800
not show up

153
00:06:28,800 --> 00:06:32,319
um and uh at that time when just like

154
00:06:32,319 --> 00:06:35,039
after a time out other parties in the

155
00:06:35,039 --> 00:06:35,840
system

156
00:06:35,840 --> 00:06:39,039
which we call bounty hunters uh will uh

157
00:06:39,039 --> 00:06:42,400
expend the needed computation uh or

158
00:06:42,400 --> 00:06:45,840
work uh needed to compute in zero prime

159
00:06:45,840 --> 00:06:48,240
uh that will be used to finalize the

160
00:06:48,240 --> 00:06:49,520
computation

161
00:06:49,520 --> 00:06:52,560
uh as a reward these bounty hunters uh

162
00:06:52,560 --> 00:06:56,000
will uh claim the collateral uh that was

163
00:06:56,000 --> 00:06:59,520
deposited by uh p0

164
00:06:59,520 --> 00:07:02,479
so as long as there are financially

165
00:07:02,479 --> 00:07:03,599
motivated

166
00:07:03,599 --> 00:07:06,000
bounty hunters who are willing to do the

167
00:07:06,000 --> 00:07:08,240
work to finalize the computation

168
00:07:08,240 --> 00:07:10,319
the output of the mpc protocol is

169
00:07:10,319 --> 00:07:11,440
guaranteed

170
00:07:11,440 --> 00:07:14,639
uh so it is either

171
00:07:14,639 --> 00:07:17,039
which we call the nominal path p0 will

172
00:07:17,039 --> 00:07:19,280
uh allow producing the output

173
00:07:19,280 --> 00:07:22,160
or the motivated bounty hunters will do

174
00:07:22,160 --> 00:07:23,759
so

175
00:07:23,759 --> 00:07:27,759
and this setup works under a monetary

176
00:07:27,759 --> 00:07:30,720
assumption uh where we assume that an

177
00:07:30,720 --> 00:07:31,919
honest party

178
00:07:31,919 --> 00:07:35,120
p0 can put a collateral of value much

179
00:07:35,120 --> 00:07:36,000
higher

180
00:07:36,000 --> 00:07:39,039
uh than what an adversary can

181
00:07:39,039 --> 00:07:42,240
expand on computation gauge

182
00:07:42,240 --> 00:07:44,400
and pc eliminates the leakage of the

183
00:07:44,400 --> 00:07:46,160
residual function

184
00:07:46,160 --> 00:07:49,360
by requiring the adversary to expand an

185
00:07:49,360 --> 00:07:50,240
equivalent

186
00:07:50,240 --> 00:07:53,599
computation cost to what honest bounty

187
00:07:53,599 --> 00:07:54,720
hunters

188
00:07:54,720 --> 00:07:57,919
will expend in order to evaluate the

189
00:07:57,919 --> 00:07:58,720
functionality

190
00:07:58,720 --> 00:08:01,919
f over a single input so this means that

191
00:08:01,919 --> 00:08:04,400
evaluating this uh functionality over

192
00:08:04,400 --> 00:08:06,879
uh kind of like different set of inputs

193
00:08:06,879 --> 00:08:07,599
will be

194
00:08:07,599 --> 00:08:11,199
expensive uh also gauge mpc doesn't

195
00:08:11,199 --> 00:08:13,039
require a trusted setup

196
00:08:13,039 --> 00:08:16,400
and it doesn't require a dedicated uh

197
00:08:16,400 --> 00:08:18,560
online evaluator

198
00:08:18,560 --> 00:08:21,759
because uh finalizing the computation

199
00:08:21,759 --> 00:08:24,800
uh is automatic done by the miners when

200
00:08:24,800 --> 00:08:26,800
executing the smart contract

201
00:08:26,800 --> 00:08:30,000
that controls the gauge and pc uh

202
00:08:30,000 --> 00:08:33,679
protocol uh however um

203
00:08:33,679 --> 00:08:36,080
leaking or conflict uh that the

204
00:08:36,080 --> 00:08:37,839
protection against the leakage of the

205
00:08:37,839 --> 00:08:39,679
residual function

206
00:08:39,679 --> 00:08:42,479
is guaranteed in the only in the short

207
00:08:42,479 --> 00:08:43,360
term

208
00:08:43,360 --> 00:08:46,560
uh this is because uh because

209
00:08:46,560 --> 00:08:50,160
like having a wealthy patient adversary

210
00:08:50,160 --> 00:08:53,200
who's willing to invest a large amount

211
00:08:53,200 --> 00:08:54,480
of computation

212
00:08:54,480 --> 00:08:57,600
uh this adversary will be able to uh

213
00:08:57,600 --> 00:09:00,640
leak the residual function and

214
00:09:00,640 --> 00:09:03,040
maybe uh things like leak information

215
00:09:03,040 --> 00:09:04,640
about the private inputs

216
00:09:04,640 --> 00:09:08,080
of the parties for this reason uh gauge

217
00:09:08,080 --> 00:09:08,880
mpc

218
00:09:08,880 --> 00:09:11,760
should be used with uh computations of

219
00:09:11,760 --> 00:09:13,600
an ephemeral nature

220
00:09:13,600 --> 00:09:17,279
like auctions uh for example

221
00:09:17,279 --> 00:09:20,560
in the rest of this talk uh i will

222
00:09:20,560 --> 00:09:23,440
present our uh gauge mpc construction at

223
00:09:23,440 --> 00:09:24,480
a high level

224
00:09:24,480 --> 00:09:26,640
uh the full technical details can be

225
00:09:26,640 --> 00:09:28,880
found uh in our paper

226
00:09:28,880 --> 00:09:31,760
um as you see in the figure uh we

227
00:09:31,760 --> 00:09:33,040
introduce several

228
00:09:33,040 --> 00:09:35,920
primitives and combine them together

229
00:09:35,920 --> 00:09:37,360
towards building

230
00:09:37,360 --> 00:09:41,440
our gauge and pc scheme

231
00:09:42,320 --> 00:09:44,560
we start with a time capsule which is

232
00:09:44,560 --> 00:09:45,360
basically

233
00:09:45,360 --> 00:09:48,399
committing to a value that can be opened

234
00:09:48,399 --> 00:09:51,360
after expending a pre-specified amount

235
00:09:51,360 --> 00:09:52,800
of computation

236
00:09:52,800 --> 00:09:56,480
uh for example uh i can commit

237
00:09:56,480 --> 00:10:00,000
to a value s by publishing its hash

238
00:10:00,000 --> 00:10:03,040
on the blockchain for example and to

239
00:10:03,040 --> 00:10:04,079
open it uh

240
00:10:04,079 --> 00:10:07,040
anyone uh will brute force the pre-image

241
00:10:07,040 --> 00:10:07,680
domain

242
00:10:07,680 --> 00:10:11,120
uh of this hash function until she finds

243
00:10:11,120 --> 00:10:12,320
the value as

244
00:10:12,320 --> 00:10:14,720
or the pre-image us and as you can

245
00:10:14,720 --> 00:10:15,360
imagine

246
00:10:15,360 --> 00:10:18,320
uh the longer uh the seed value s the

247
00:10:18,320 --> 00:10:20,240
harder or the larger is the amount of

248
00:10:20,240 --> 00:10:21,760
computation

249
00:10:21,760 --> 00:10:26,399
that is needed in the opening process

250
00:10:26,399 --> 00:10:29,519
uh basically uh this is

251
00:10:29,519 --> 00:10:32,959
what uh bounty hunters are doing engaged

252
00:10:32,959 --> 00:10:34,079
npc

253
00:10:34,079 --> 00:10:37,040
uh so the input labels will be uh

254
00:10:37,040 --> 00:10:38,880
committed in time capsules

255
00:10:38,880 --> 00:10:41,680
if b0 that doesn't come back to open

256
00:10:41,680 --> 00:10:42,160
them

257
00:10:42,160 --> 00:10:44,399
the bounty hunters will brute force the

258
00:10:44,399 --> 00:10:45,200
opening

259
00:10:45,200 --> 00:10:49,440
and allow finalizing the competition

260
00:10:50,160 --> 00:10:52,800
having the pawn the bounty hunter uh

261
00:10:52,800 --> 00:10:55,120
post the opening publicly will not work

262
00:10:55,120 --> 00:10:56,399
in our setup

263
00:10:56,399 --> 00:10:58,640
this is because other malicious bounty

264
00:10:58,640 --> 00:11:00,000
hunters may claim

265
00:11:00,000 --> 00:11:03,200
this opening as theirs and uh steal the

266
00:11:03,200 --> 00:11:04,079
collateral

267
00:11:04,079 --> 00:11:06,399
from the honest monkey hunter who did

268
00:11:06,399 --> 00:11:07,440
the work

269
00:11:07,440 --> 00:11:10,000
uh for this reason we combined time

270
00:11:10,000 --> 00:11:12,160
capsules with zero knowledge proofs

271
00:11:12,160 --> 00:11:15,120
to allow a bounty hunter to prove in

272
00:11:15,120 --> 00:11:16,160
zero knowledge

273
00:11:16,160 --> 00:11:19,040
that uh she found the opening and did

274
00:11:19,040 --> 00:11:20,079
the required

275
00:11:20,079 --> 00:11:23,360
amount of work uh without revealing

276
00:11:23,360 --> 00:11:26,560
the opening itself uh the combination of

277
00:11:26,560 --> 00:11:28,000
these two primitives

278
00:11:28,000 --> 00:11:31,600
uh we call potsie or proof

279
00:11:31,600 --> 00:11:34,720
of time capsules

280
00:11:36,240 --> 00:11:39,760
in order to allow rewarding the bounty

281
00:11:39,760 --> 00:11:42,320
hunters for the work they are doing in

282
00:11:42,320 --> 00:11:43,040
opening

283
00:11:43,040 --> 00:11:46,720
time capsules um we utilize a smart

284
00:11:46,720 --> 00:11:47,519
contract

285
00:11:47,519 --> 00:11:50,399
uh to build what we call gauge time

286
00:11:50,399 --> 00:11:51,440
capsules

287
00:11:51,440 --> 00:11:55,200
uh where uh we bundle uh several proxies

288
00:11:55,200 --> 00:11:56,079
together

289
00:11:56,079 --> 00:11:59,519
and allow p0 to

290
00:11:59,519 --> 00:12:01,600
create a collateral on the blockchain

291
00:12:01,600 --> 00:12:03,279
through this smart contract

292
00:12:03,279 --> 00:12:06,560
that controls the gauge time capsule and

293
00:12:06,560 --> 00:12:10,000
uh not all these policies will be opened

294
00:12:10,000 --> 00:12:13,680
later only those that correct correspond

295
00:12:13,680 --> 00:12:17,279
to the private inputs of the parties so

296
00:12:17,279 --> 00:12:19,839
as you see in the figure and as we

297
00:12:19,839 --> 00:12:20,720
mentioned before

298
00:12:20,720 --> 00:12:23,680
there will be two paths uh the nominal

299
00:12:23,680 --> 00:12:25,920
path where p0 will come back

300
00:12:25,920 --> 00:12:28,959
and open the intended process and uh

301
00:12:28,959 --> 00:12:29,600
recover

302
00:12:29,600 --> 00:12:32,959
uh her collateral uh and there is the

303
00:12:32,959 --> 00:12:36,320
uh bounty hunting path where bounty

304
00:12:36,320 --> 00:12:38,959
hunters will do the work to open these

305
00:12:38,959 --> 00:12:43,760
time capsules and claim the collateral

306
00:12:44,720 --> 00:12:48,480
gauge time capsules basically allow

307
00:12:48,480 --> 00:12:52,000
committing to the input labels that

308
00:12:52,000 --> 00:12:55,200
are needed for the computation however

309
00:12:55,200 --> 00:12:56,000
we still

310
00:12:56,000 --> 00:12:58,240
need a protocol to perform the

311
00:12:58,240 --> 00:13:01,120
computation itself over these inputs

312
00:13:01,120 --> 00:13:04,560
uh for this reason we introduce

313
00:13:04,560 --> 00:13:07,360
what we call level driven level driven

314
00:13:07,360 --> 00:13:08,320
and pc

315
00:13:08,320 --> 00:13:10,639
which is a generalization of garbled

316
00:13:10,639 --> 00:13:11,360
circuit

317
00:13:11,360 --> 00:13:14,399
that is robust to the exposure of

318
00:13:14,399 --> 00:13:17,360
additional levels

319
00:13:18,320 --> 00:13:21,600
recall that in uh yao's garbled circuits

320
00:13:21,600 --> 00:13:24,560
uh we have uh two parties uh the garbler

321
00:13:24,560 --> 00:13:26,720
p0 and the evaluator

322
00:13:26,720 --> 00:13:30,720
p1 uh p0 garbles uh

323
00:13:30,720 --> 00:13:32,800
the circuit uh that represents the

324
00:13:32,800 --> 00:13:34,880
functionality that these parties want to

325
00:13:34,880 --> 00:13:35,519
compute

326
00:13:35,519 --> 00:13:38,160
over their private inputs and this gulf

327
00:13:38,160 --> 00:13:40,639
link is basically encrypting the truth

328
00:13:40,639 --> 00:13:41,440
table

329
00:13:41,440 --> 00:13:44,959
of the circuit it will also

330
00:13:44,959 --> 00:13:47,519
generate random labels for the input

331
00:13:47,519 --> 00:13:48,720
wires

332
00:13:48,720 --> 00:13:51,199
where for each wire we will have two

333
00:13:51,199 --> 00:13:51,839
labels

334
00:13:51,839 --> 00:13:54,160
uh one for the bit zero and the other

335
00:13:54,160 --> 00:13:55,839
for the bit one

336
00:13:55,839 --> 00:13:58,800
uh p0 sends the garble circuit to the

337
00:13:58,800 --> 00:14:00,560
evaluator p1

338
00:14:00,560 --> 00:14:03,920
and then they engage in an oblivious

339
00:14:03,920 --> 00:14:05,440
transfer protocol

340
00:14:05,440 --> 00:14:08,800
to allow p1 to retrieve

341
00:14:08,800 --> 00:14:12,079
the one label data present or that

342
00:14:12,079 --> 00:14:13,360
corresponds to

343
00:14:13,360 --> 00:14:16,560
her input after that p1

344
00:14:16,560 --> 00:14:18,800
can evaluate the garbage circuit using

345
00:14:18,800 --> 00:14:19,920
these labels

346
00:14:19,920 --> 00:14:22,880
and obtain the output of the function f

347
00:14:22,880 --> 00:14:23,360
over

348
00:14:23,360 --> 00:14:26,480
other private inputs the security

349
00:14:26,480 --> 00:14:28,399
guarantee of yao

350
00:14:28,399 --> 00:14:31,519
states that nothing will be uh revealed

351
00:14:31,519 --> 00:14:32,000
uh

352
00:14:32,000 --> 00:14:34,480
or leaked about the private inputs

353
00:14:34,480 --> 00:14:36,160
beyond what can be deduced

354
00:14:36,160 --> 00:14:39,519
from the output and it is known

355
00:14:39,519 --> 00:14:43,279
that revealing even of one additional

356
00:14:43,279 --> 00:14:46,560
label will compromise security so for

357
00:14:46,560 --> 00:14:47,199
example

358
00:14:47,199 --> 00:14:50,160
if an adversary gets to see both labels

359
00:14:50,160 --> 00:14:51,600
of an input wire

360
00:14:51,600 --> 00:14:54,560
this may allow him to leak information

361
00:14:54,560 --> 00:14:57,199
about about the private inputs

362
00:14:57,199 --> 00:15:00,480
uh we handle that by making

363
00:15:00,480 --> 00:15:03,680
robust uh to or against revealing

364
00:15:03,680 --> 00:15:07,279
k additional labels uh this is done by

365
00:15:07,279 --> 00:15:07,839
adding

366
00:15:07,839 --> 00:15:10,639
another layer of indirection to the

367
00:15:10,639 --> 00:15:11,680
computation

368
00:15:11,680 --> 00:15:13,680
which is the circuit c prime that you

369
00:15:13,680 --> 00:15:15,279
see in the figure

370
00:15:15,279 --> 00:15:17,920
uh circuit c prime will output the

371
00:15:17,920 --> 00:15:19,760
actual labels needed for

372
00:15:19,760 --> 00:15:22,480
the computation or the garbage circuit c

373
00:15:22,480 --> 00:15:22,880
if

374
00:15:22,880 --> 00:15:26,560
and only if its inputs constitute a

375
00:15:26,560 --> 00:15:28,240
valid code word

376
00:15:28,240 --> 00:15:31,199
uh by using a linear error correcting

377
00:15:31,199 --> 00:15:31,839
code

378
00:15:31,839 --> 00:15:35,040
with a minimum distance of k plus one

379
00:15:35,040 --> 00:15:38,079
um evaluating the circuit c

380
00:15:38,079 --> 00:15:42,160
over a new input value will require

381
00:15:42,160 --> 00:15:45,600
uh k plus 1 additional levels thus

382
00:15:45,600 --> 00:15:50,959
we achieve care robustness in this case

383
00:15:51,279 --> 00:15:53,839
as you might have guessed by now gauge

384
00:15:53,839 --> 00:15:54,720
mpc

385
00:15:54,720 --> 00:15:58,320
simply takes a level driven mpc

386
00:15:58,320 --> 00:16:02,000
and commits the input labels in agazi

387
00:16:02,000 --> 00:16:06,320
so party p0 who sets up the computation

388
00:16:06,320 --> 00:16:07,199
will prepare

389
00:16:07,199 --> 00:16:10,480
the garbage circuit and uh gatses for

390
00:16:10,480 --> 00:16:13,839
input labels for the rest of the parties

391
00:16:13,839 --> 00:16:16,240
and create a smart contract to control

392
00:16:16,240 --> 00:16:17,600
the computation

393
00:16:17,600 --> 00:16:20,560
which will also create a collateral for

394
00:16:20,560 --> 00:16:23,120
this party uh the rest of the parties

395
00:16:23,120 --> 00:16:24,880
will submit their inputs

396
00:16:24,880 --> 00:16:28,480
and then uh honest p0 will come back and

397
00:16:28,480 --> 00:16:29,040
open

398
00:16:29,040 --> 00:16:32,240
the corresponding labels which are

399
00:16:32,240 --> 00:16:35,279
uh potsies uh or uh

400
00:16:35,279 --> 00:16:38,480
the bounty hunters uh will do that

401
00:16:38,480 --> 00:16:41,680
uh after getting uh the openings uh the

402
00:16:41,680 --> 00:16:44,079
smart or the controller smart contract

403
00:16:44,079 --> 00:16:46,240
uh evaluate the circuit over these

404
00:16:46,240 --> 00:16:47,759
labels and record

405
00:16:47,759 --> 00:16:51,920
uh the output robustness guarantees that

406
00:16:51,920 --> 00:16:55,199
for an adversary to evaluate the garbage

407
00:16:55,199 --> 00:16:56,320
circuit

408
00:16:56,320 --> 00:16:59,360
over another input she will need to

409
00:16:59,360 --> 00:17:00,240
expand

410
00:17:00,240 --> 00:17:03,040
computation equivalent to the work

411
00:17:03,040 --> 00:17:04,640
needed to open

412
00:17:04,640 --> 00:17:07,839
and additional k plus one uh process uh

413
00:17:07,839 --> 00:17:10,480
or time capsules uh to get a valid uh

414
00:17:10,480 --> 00:17:12,959
codeword

415
00:17:12,959 --> 00:17:16,839
uh in the paper we provide uh several

416
00:17:16,839 --> 00:17:19,919
transformations for gauge and pc uh

417
00:17:19,919 --> 00:17:22,720
that provides several security level

418
00:17:22,720 --> 00:17:23,839
levels

419
00:17:23,839 --> 00:17:27,679
um as you can imagine

420
00:17:27,679 --> 00:17:31,120
conventional yao garbled circuits where

421
00:17:31,120 --> 00:17:34,640
uh on ep zero's input is a private

422
00:17:34,640 --> 00:17:37,840
uh provides what we call public input

423
00:17:37,840 --> 00:17:39,760
and zero robust security

424
00:17:39,760 --> 00:17:43,360
because uh it is uh insecure against

425
00:17:43,360 --> 00:17:46,400
the exposure of any additional label uh

426
00:17:46,400 --> 00:17:47,280
by using

427
00:17:47,280 --> 00:17:50,400
uh error correcting codes uh we obtain

428
00:17:50,400 --> 00:17:54,640
a robust level uh driven npc

429
00:17:54,640 --> 00:17:57,440
and uh to handle private inputs uh we

430
00:17:57,440 --> 00:17:58,880
can

431
00:17:58,880 --> 00:18:02,160
use a two-round two-party computation

432
00:18:02,160 --> 00:18:04,160
protocol to allow that

433
00:18:04,160 --> 00:18:06,400
uh by combining these two uh

434
00:18:06,400 --> 00:18:08,080
constructions together

435
00:18:08,080 --> 00:18:12,000
we uh obtain a gauge npc that satisfies

436
00:18:12,000 --> 00:18:14,799
the highest security level uh which is

437
00:18:14,799 --> 00:18:16,960
supporting private inputs for all

438
00:18:16,960 --> 00:18:17,600
parties

439
00:18:17,600 --> 00:18:20,799
and robust against uh the exposure

440
00:18:20,799 --> 00:18:23,840
of additional um input levels

441
00:18:23,840 --> 00:18:27,440
um and as mentioned uh the fully private

442
00:18:27,440 --> 00:18:28,160
uh

443
00:18:28,160 --> 00:18:30,960
input versions are for the two-party

444
00:18:30,960 --> 00:18:31,919
setting

445
00:18:31,919 --> 00:18:35,760
only to conclude

446
00:18:35,760 --> 00:18:38,799
in this talk we introduced a new

447
00:18:38,799 --> 00:18:41,520
model called gauge npc which

448
00:18:41,520 --> 00:18:43,440
incorporates smart contracts

449
00:18:43,440 --> 00:18:46,480
the miners and financial incentives in

450
00:18:46,480 --> 00:18:48,240
the computation

451
00:18:48,240 --> 00:18:51,200
gauge mpc does not leak the residual

452
00:18:51,200 --> 00:18:53,120
function and doesn't require

453
00:18:53,120 --> 00:18:56,160
a trusted setup like previous and

454
00:18:56,160 --> 00:18:59,280
interactive mpc protocols and it

455
00:18:59,280 --> 00:19:01,280
represents the third generation of

456
00:19:01,280 --> 00:19:02,720
combining npc

457
00:19:02,720 --> 00:19:05,760
uh with uh blockchains uh

458
00:19:05,760 --> 00:19:08,799
also on the way we developed several

459
00:19:08,799 --> 00:19:11,039
new primitives like a proof of time

460
00:19:11,039 --> 00:19:12,160
capsules uh

461
00:19:12,160 --> 00:19:15,679
gauge time capsules a label driven npc

462
00:19:15,679 --> 00:19:18,880
uh which we believe that uh they are of

463
00:19:18,880 --> 00:19:19,200
an

464
00:19:19,200 --> 00:19:22,240
independent interest and could be useful

465
00:19:22,240 --> 00:19:23,600
in building

466
00:19:23,600 --> 00:19:27,360
applications other than gauge and pc

467
00:19:27,360 --> 00:19:30,080
also in the paper we show a proof of

468
00:19:30,080 --> 00:19:31,600
concept implementation

469
00:19:31,600 --> 00:19:34,880
of assemble auction functionality

470
00:19:34,880 --> 00:19:38,160
to show the construct or to assess the

471
00:19:38,160 --> 00:19:39,360
efficiency

472
00:19:39,360 --> 00:19:43,280
of our protocols and primitives

473
00:19:43,280 --> 00:19:46,480
uh thank you for uh your attention and

474
00:19:46,480 --> 00:19:49,360
happy to answer any questions uh you

475
00:19:49,360 --> 00:19:50,240
might have

476
00:19:50,240 --> 00:19:53,360
thank you

