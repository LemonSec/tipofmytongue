1
00:00:00,640 --> 00:00:02,800
hi everyone my name is helen mullering

2
00:00:02,800 --> 00:00:04,400
and together with aditya hatch i will

3
00:00:04,400 --> 00:00:05,120
present you

4
00:00:05,120 --> 00:00:07,200
our systemization of knowledge on

5
00:00:07,200 --> 00:00:09,679
efficient privacy preserving clustering

6
00:00:09,679 --> 00:00:11,440
this is joint work with thomas schneider

7
00:00:11,440 --> 00:00:13,200
and hassan jalamir of the encrypted

8
00:00:13,200 --> 00:00:14,920
group of the technical university of

9
00:00:14,920 --> 00:00:16,160
darmstadt

10
00:00:16,160 --> 00:00:18,160
so first i will give you some insights

11
00:00:18,160 --> 00:00:19,680
into the motivation and

12
00:00:19,680 --> 00:00:21,840
preliminaries of our work before giving

13
00:00:21,840 --> 00:00:22,800
you details

14
00:00:22,800 --> 00:00:25,439
of our survey of in total 59 private

15
00:00:25,439 --> 00:00:26,880
clustering protocols

16
00:00:26,880 --> 00:00:28,960
afterwards my colleague edith is taking

17
00:00:28,960 --> 00:00:30,000
over to present

18
00:00:30,000 --> 00:00:32,558
our evaluation of four state-of-the-art

19
00:00:32,558 --> 00:00:34,079
private clustering protocols

20
00:00:34,079 --> 00:00:36,079
include concluding with the challenges

21
00:00:36,079 --> 00:00:37,600
that we identified for private

22
00:00:37,600 --> 00:00:38,480
clustering

23
00:00:38,480 --> 00:00:42,079
in real-world applications clustering is

24
00:00:42,079 --> 00:00:42,320
an

25
00:00:42,320 --> 00:00:43,920
unsupervised machine learning technique

26
00:00:43,920 --> 00:00:45,520
that groups similar items

27
00:00:45,520 --> 00:00:47,760
into so-called clusters while different

28
00:00:47,760 --> 00:00:49,440
elements should end up in different

29
00:00:49,440 --> 00:00:50,079
clusters

30
00:00:50,079 --> 00:00:52,000
it will have it has many applications

31
00:00:52,000 --> 00:00:54,239
ranging from the financial domain

32
00:00:54,239 --> 00:00:56,719
into the healthcare area for example it

33
00:00:56,719 --> 00:00:57,680
can be used

34
00:00:57,680 --> 00:01:00,000
in the detection of credit tagged forts

35
00:01:00,000 --> 00:01:00,879
by businesses

36
00:01:00,879 --> 00:01:03,039
for market segmentation allowing them to

37
00:01:03,039 --> 00:01:04,879
identify target customers

38
00:01:04,879 --> 00:01:06,320
that can be addressed with similar

39
00:01:06,320 --> 00:01:08,400
marketing measures as well as for

40
00:01:08,400 --> 00:01:09,920
medical imaging

41
00:01:09,920 --> 00:01:12,159
all these applications involve highly

42
00:01:12,159 --> 00:01:13,600
sensitive information

43
00:01:13,600 --> 00:01:16,640
calling for private clustering schemes

44
00:01:16,640 --> 00:01:19,439
we in our work conducted the first

45
00:01:19,439 --> 00:01:21,840
comprehensive review of 59 private

46
00:01:21,840 --> 00:01:23,680
clustering protocols and compare them

47
00:01:23,680 --> 00:01:26,159
with respect to multiple aspects such as

48
00:01:26,159 --> 00:01:27,360
clustering quality

49
00:01:27,360 --> 00:01:30,000
privacy leakage and efficiency further

50
00:01:30,000 --> 00:01:31,280
we give a guideline

51
00:01:31,280 --> 00:01:32,799
on how to choose an appropriate

52
00:01:32,799 --> 00:01:35,119
clustering protocol

53
00:01:35,119 --> 00:01:37,680
for given a concrete application and

54
00:01:37,680 --> 00:01:40,320
finally we also experimentally compare

55
00:01:40,320 --> 00:01:42,399
four state-of-the-art private clustering

56
00:01:42,399 --> 00:01:44,560
protocols with respect to quality and

57
00:01:44,560 --> 00:01:45,520
efficiency

58
00:01:45,520 --> 00:01:49,119
and also open source our implementation

59
00:01:49,119 --> 00:01:51,439
what you can see here now is an overview

60
00:01:51,439 --> 00:01:52,159
of the

61
00:01:52,159 --> 00:01:54,240
results of the 59 private clustering

62
00:01:54,240 --> 00:01:56,880
protocols that we analyzed

63
00:01:56,880 --> 00:01:59,360
what actually does uh private costing or

64
00:01:59,360 --> 00:02:01,280
even better fully privacy preserving

65
00:02:01,280 --> 00:02:02,960
clustering actually means

66
00:02:02,960 --> 00:02:05,920
so let us consider a trusted third party

67
00:02:05,920 --> 00:02:06,560
where

68
00:02:06,560 --> 00:02:09,679
yes multiple parties um

69
00:02:09,679 --> 00:02:12,480
data owners provide their data to and

70
00:02:12,480 --> 00:02:14,400
this trusted third party then does the

71
00:02:14,400 --> 00:02:16,480
clustering and will return the output

72
00:02:16,480 --> 00:02:18,560
either to the data owners or to another

73
00:02:18,560 --> 00:02:19,360
party

74
00:02:19,360 --> 00:02:22,000
and this is what actually also should be

75
00:02:22,000 --> 00:02:23,920
reached by a fully privacy

76
00:02:23,920 --> 00:02:25,440
preserving clustering it should not leak

77
00:02:25,440 --> 00:02:27,120
anything beyond what can be inferred

78
00:02:27,120 --> 00:02:28,000
from the output

79
00:02:28,000 --> 00:02:30,319
such as as if we would have a trusted

80
00:02:30,319 --> 00:02:31,599
third party

81
00:02:31,599 --> 00:02:34,080
and we identified four requirements for

82
00:02:34,080 --> 00:02:34,800
such a

83
00:02:34,800 --> 00:02:36,480
fully privacy preserving clustering

84
00:02:36,480 --> 00:02:38,400
scheme the first aspect is of course

85
00:02:38,400 --> 00:02:39,280
privacy

86
00:02:39,280 --> 00:02:40,959
so we want to have this fully privacy

87
00:02:40,959 --> 00:02:42,319
preserving property

88
00:02:42,319 --> 00:02:44,879
as if some intermediate information is

89
00:02:44,879 --> 00:02:45,519
leaked

90
00:02:45,519 --> 00:02:48,840
it is difficult to

91
00:02:48,840 --> 00:02:51,840
understand what this implies so what

92
00:02:51,840 --> 00:02:52,239
kind

93
00:02:52,239 --> 00:02:54,720
of information is actually if we would

94
00:02:54,720 --> 00:02:56,000
have very special

95
00:02:56,000 --> 00:02:59,120
um constellation of data then we of

96
00:02:59,120 --> 00:03:00,720
course want to have efficiency

97
00:03:00,720 --> 00:03:02,480
with respect to communication and

98
00:03:02,480 --> 00:03:04,080
computation as well as memory

99
00:03:04,080 --> 00:03:05,680
we want to achieve a good clustering

100
00:03:05,680 --> 00:03:08,159
quality and ideally we also want to have

101
00:03:08,159 --> 00:03:10,159
the flexibility for different scenarios

102
00:03:10,159 --> 00:03:10,879
such

103
00:03:10,879 --> 00:03:13,360
as outsourcing where one or more data

104
00:03:13,360 --> 00:03:15,120
owners outsource the data

105
00:03:15,120 --> 00:03:17,760
to a third party which then does the

106
00:03:17,760 --> 00:03:18,560
clustering

107
00:03:18,560 --> 00:03:21,280
or as well as the storage and this can

108
00:03:21,280 --> 00:03:23,200
for example be a cloud server

109
00:03:23,200 --> 00:03:25,280
then of course we also want to have the

110
00:03:25,280 --> 00:03:26,480
possibility to do

111
00:03:26,480 --> 00:03:28,480
multi-party computation directly between

112
00:03:28,480 --> 00:03:30,640
the data owners

113
00:03:30,640 --> 00:03:32,879
okay now we look at our survey of these

114
00:03:32,879 --> 00:03:34,959
59 private clustering protocols we

115
00:03:34,959 --> 00:03:36,239
identified in total

116
00:03:36,239 --> 00:03:39,120
seven aspects that help us to understand

117
00:03:39,120 --> 00:03:41,120
for a concrete application

118
00:03:41,120 --> 00:03:43,360
which private clustering protocol might

119
00:03:43,360 --> 00:03:44,159
be the best

120
00:03:44,159 --> 00:03:47,040
fit so first the first aspect is of

121
00:03:47,040 --> 00:03:48,799
course the plaintext algorithm

122
00:03:48,799 --> 00:03:52,400
there no uh algorithm is superior to the

123
00:03:52,400 --> 00:03:53,840
other algorithms so

124
00:03:53,840 --> 00:03:55,599
there are always aspects in which one of

125
00:03:55,599 --> 00:03:57,200
them is better than another

126
00:03:57,200 --> 00:04:00,640
and there's no uh such um algorithm that

127
00:04:00,640 --> 00:04:02,640
is the best out of them and the total

128
00:04:02,640 --> 00:04:04,799
eight different uh clustering algorithms

129
00:04:04,799 --> 00:04:06,640
were kind of translated to a privacy

130
00:04:06,640 --> 00:04:07,360
preserving

131
00:04:07,360 --> 00:04:10,080
variant and we compare these with

132
00:04:10,080 --> 00:04:11,920
respect to the thinking strengths and

133
00:04:11,920 --> 00:04:14,159
weaknesses in our paper

134
00:04:14,159 --> 00:04:16,079
then we also look at the security models

135
00:04:16,079 --> 00:04:17,519
and most of the works

136
00:04:17,519 --> 00:04:19,918
except from three actually focus on the

137
00:04:19,918 --> 00:04:21,918
semi-honest security model and only

138
00:04:21,918 --> 00:04:22,639
three look at

139
00:04:22,639 --> 00:04:25,280
malicious security as well then there

140
00:04:25,280 --> 00:04:27,520
are works that look at outsourcing with

141
00:04:27,520 --> 00:04:29,040
one or more data owners

142
00:04:29,040 --> 00:04:30,960
or at two-party and multi-party

143
00:04:30,960 --> 00:04:35,199
computation some of the consider both

144
00:04:35,199 --> 00:04:37,759
further these protocols differ with

145
00:04:37,759 --> 00:04:39,600
respect to the data partitioning so

146
00:04:39,600 --> 00:04:41,600
some assume that the data owner holds

147
00:04:41,600 --> 00:04:43,120
complete data records

148
00:04:43,120 --> 00:04:45,840
while others assume that they just have

149
00:04:45,840 --> 00:04:48,000
sub-parameters of the data records or

150
00:04:48,000 --> 00:04:48,720
they

151
00:04:48,720 --> 00:04:51,040
have even the possibility to have an

152
00:04:51,040 --> 00:04:51,919
arbitrary

153
00:04:51,919 --> 00:04:55,120
data splitting different techniques for

154
00:04:55,120 --> 00:04:57,360
prior for achieving the privacy

155
00:04:57,360 --> 00:04:59,120
preserving property were used

156
00:04:59,120 --> 00:05:01,360
many use homomorphic encryptions some do

157
00:05:01,360 --> 00:05:03,199
public key cryptography

158
00:05:03,199 --> 00:05:05,120
then there are also a few that look at

159
00:05:05,120 --> 00:05:07,199
multi-party computation with for example

160
00:05:07,199 --> 00:05:08,560
garbage circuits or

161
00:05:08,560 --> 00:05:10,320
arithmetic secret sharing or a mix of

162
00:05:10,320 --> 00:05:13,360
these techniques as well

163
00:05:13,360 --> 00:05:16,479
then as already indicated only

164
00:05:16,479 --> 00:05:18,880
a few works actually only 10 works

165
00:05:18,880 --> 00:05:19,759
achieve fully

166
00:05:19,759 --> 00:05:22,639
privacy preservation preservation and

167
00:05:22,639 --> 00:05:24,000
the others leak some kind

168
00:05:24,000 --> 00:05:25,759
of information in between and we also

169
00:05:25,759 --> 00:05:27,759
categorize this kind of information that

170
00:05:27,759 --> 00:05:29,360
is leaked there

171
00:05:29,360 --> 00:05:31,360
and finally the efficiency property we

172
00:05:31,360 --> 00:05:33,840
of course want to have a computationally

173
00:05:33,840 --> 00:05:36,000
communication efficient and memory

174
00:05:36,000 --> 00:05:37,360
efficient protocol

175
00:05:37,360 --> 00:05:39,520
and we also look at these aspects

176
00:05:39,520 --> 00:05:41,600
aspects in our works when we cut

177
00:05:41,600 --> 00:05:43,280
in our work when we categorize the

178
00:05:43,280 --> 00:05:45,520
different protocols

179
00:05:45,520 --> 00:05:48,080
what you can see here now are the only

180
00:05:48,080 --> 00:05:49,919
fully privacy preserving

181
00:05:49,919 --> 00:05:52,320
schemes that we identified so most of

182
00:05:52,320 --> 00:05:53,440
them are

183
00:05:53,440 --> 00:05:55,919
using the k-means algorithm and a few

184
00:05:55,919 --> 00:05:57,840
are also done with db scan affinity

185
00:05:57,840 --> 00:06:00,000
propagation mean shift and hierarchical

186
00:06:00,000 --> 00:06:02,080
clustering however

187
00:06:02,080 --> 00:06:03,520
we also looked at the efficiency

188
00:06:03,520 --> 00:06:05,919
property here and especially the old

189
00:06:05,919 --> 00:06:07,199
works mostly

190
00:06:07,199 --> 00:06:10,000
have um used the payee encryption scheme

191
00:06:10,000 --> 00:06:12,080
without any optimization such as packing

192
00:06:12,080 --> 00:06:14,000
or parallelization

193
00:06:14,000 --> 00:06:15,360
which makes them slower than the

194
00:06:15,360 --> 00:06:17,600
state-of-the-art works and we identified

195
00:06:17,600 --> 00:06:18,800
four of them to be

196
00:06:18,800 --> 00:06:21,280
the fully privacy preserving and most

197
00:06:21,280 --> 00:06:22,639
efficient

198
00:06:22,639 --> 00:06:25,600
and um as they were not directly

199
00:06:25,600 --> 00:06:27,440
compared to each other we conducted this

200
00:06:27,440 --> 00:06:28,400
comparison

201
00:06:28,400 --> 00:06:29,840
and this is where i hand over to my

202
00:06:29,840 --> 00:06:31,600
colleague aditya hatch

203
00:06:31,600 --> 00:06:33,680
we will give you some insights into our

204
00:06:33,680 --> 00:06:35,520
experimental comparison of these

205
00:06:35,520 --> 00:06:38,000
protocols

206
00:06:38,000 --> 00:06:40,800
thanks helen we benchmark the runtime of

207
00:06:40,800 --> 00:06:42,560
the state-of-the-art secure clustering

208
00:06:42,560 --> 00:06:43,440
protocols

209
00:06:43,440 --> 00:06:46,080
on a collection of small data sets for

210
00:06:46,080 --> 00:06:47,759
computing the clusters on the largest

211
00:06:47,759 --> 00:06:49,360
data set in this collection

212
00:06:49,360 --> 00:06:51,919
over lan the multi-party computation

213
00:06:51,919 --> 00:06:53,919
based k-means protocol of mohassel at

214
00:06:53,919 --> 00:06:54,319
all

215
00:06:54,319 --> 00:06:56,560
was the most efficient and took 25

216
00:06:56,560 --> 00:06:57,440
seconds

217
00:06:57,440 --> 00:06:58,960
while on the other end the fully

218
00:06:58,960 --> 00:07:00,639
homomorphic encryption based

219
00:07:00,639 --> 00:07:03,199
mean shift protocol of kion at all took

220
00:07:03,199 --> 00:07:04,080
1.7

221
00:07:04,080 --> 00:07:06,960
hours which is around 240 times more and

222
00:07:06,960 --> 00:07:08,319
the increase in run time

223
00:07:08,319 --> 00:07:10,160
was mainly because of the overhead of

224
00:07:10,160 --> 00:07:12,720
fully homomorphic encryption

225
00:07:12,720 --> 00:07:14,960
over van the runtimes of all the

226
00:07:14,960 --> 00:07:17,440
protocols except that of kianatal's he

227
00:07:17,440 --> 00:07:19,599
mainshift protocol increase

228
00:07:19,599 --> 00:07:21,919
since the remaining rely on mpc and have

229
00:07:21,919 --> 00:07:22,639
multiple

230
00:07:22,639 --> 00:07:25,759
rounds of interaction interestingly the

231
00:07:25,759 --> 00:07:27,360
change in the network setting

232
00:07:27,360 --> 00:07:29,280
leads to the runtime of the hierarchical

233
00:07:29,280 --> 00:07:31,280
crusting protocols of mangatal to be

234
00:07:31,280 --> 00:07:32,400
higher than that of

235
00:07:32,400 --> 00:07:35,919
itchy mean shift once again the mpc

236
00:07:35,919 --> 00:07:38,000
k-means protocol of mohasel atal and the

237
00:07:38,000 --> 00:07:40,319
privacy preserving bb scan protocol of

238
00:07:40,319 --> 00:07:43,440
bosnia are relatively more efficient and

239
00:07:43,440 --> 00:07:46,479
have run times of around 20 minutes

240
00:07:46,479 --> 00:07:48,560
for evaluating how the protocols scale

241
00:07:48,560 --> 00:07:50,080
to larger data sets

242
00:07:50,080 --> 00:07:51,680
we benchmark the performance of the

243
00:07:51,680 --> 00:07:53,840
protocols on a collection of large data

244
00:07:53,840 --> 00:07:56,080
sets described on the right

245
00:07:56,080 --> 00:07:57,919
unfortunately the memory consumption of

246
00:07:57,919 --> 00:07:59,759
the privacy preserving db scan and the

247
00:07:59,759 --> 00:08:01,599
hierarchical clustering protocols was

248
00:08:01,599 --> 00:08:02,960
too large on these data sets for

249
00:08:02,960 --> 00:08:04,479
benchmarking

250
00:08:04,479 --> 00:08:06,720
the mpc key means protocol had a runtime

251
00:08:06,720 --> 00:08:08,639
of around 5 hours while the he main

252
00:08:08,639 --> 00:08:10,319
shift protocol had a runtime of around

253
00:08:10,319 --> 00:08:12,720
23 hours in this case which is around 5

254
00:08:12,720 --> 00:08:13,919
times more

255
00:08:13,919 --> 00:08:16,080
so the impact of the computational

256
00:08:16,080 --> 00:08:17,360
overhead of fhe

257
00:08:17,360 --> 00:08:19,759
decreases for large data sets since the

258
00:08:19,759 --> 00:08:21,680
communication cost of the mpc-based

259
00:08:21,680 --> 00:08:24,800
protocols also increases significantly

260
00:08:24,800 --> 00:08:26,720
the large difference in the runtimes of

261
00:08:26,720 --> 00:08:28,400
protocols means that

262
00:08:28,400 --> 00:08:30,879
the choice of protocol in practice is

263
00:08:30,879 --> 00:08:33,039
often decided by the performance

264
00:08:33,039 --> 00:08:34,640
rather than the underlying clustering

265
00:08:34,640 --> 00:08:38,319
algorithm or any other aspect

266
00:08:39,039 --> 00:08:41,360
we also evaluated the clustering quality

267
00:08:41,360 --> 00:08:43,360
of the protocols on data sets with

268
00:08:43,360 --> 00:08:45,120
different parameters like number of

269
00:08:45,120 --> 00:08:47,120
clusters density of clusters

270
00:08:47,120 --> 00:08:50,399
outliers noise and so on the main

271
00:08:50,399 --> 00:08:51,920
takeaways are that the clustering

272
00:08:51,920 --> 00:08:54,240
quality changes significantly with the

273
00:08:54,240 --> 00:08:55,519
protocol or algorithm

274
00:08:55,519 --> 00:08:57,920
and no algorithm works well on all data

275
00:08:57,920 --> 00:08:59,200
sets

276
00:08:59,200 --> 00:09:01,279
in general we found that bbs can perform

277
00:09:01,279 --> 00:09:03,120
well on most data sets while k-means

278
00:09:03,120 --> 00:09:05,360
usually worked on convex and linearly

279
00:09:05,360 --> 00:09:07,519
separable datasets

280
00:09:07,519 --> 00:09:09,360
moreover the clustering quality was

281
00:09:09,360 --> 00:09:11,440
strongly influenced by the value of the

282
00:09:11,440 --> 00:09:12,399
parameters

283
00:09:12,399 --> 00:09:14,080
like the number of clusters in case of

284
00:09:14,080 --> 00:09:16,320
k-means and the neighborhood radius in

285
00:09:16,320 --> 00:09:18,560
case of db scan

286
00:09:18,560 --> 00:09:20,640
these values depend on the input data

287
00:09:20,640 --> 00:09:22,399
and required a bit of trial and error in

288
00:09:22,399 --> 00:09:24,800
setting the optimal values

289
00:09:24,800 --> 00:09:26,560
finally the clustering quality of

290
00:09:26,560 --> 00:09:29,279
protocols like chaonetta's ha main shift

291
00:09:29,279 --> 00:09:31,360
varied significantly with the randomness

292
00:09:31,360 --> 00:09:33,920
used that is its output quality wasn't

293
00:09:33,920 --> 00:09:36,160
consistent and had a strong dependency

294
00:09:36,160 --> 00:09:38,080
on the initialization

295
00:09:38,080 --> 00:09:40,160
the impact of randomness was lesser than

296
00:09:40,160 --> 00:09:41,680
other randomized protocols like

297
00:09:41,680 --> 00:09:44,000
mohasletta's mpc k-means

298
00:09:44,000 --> 00:09:46,080
which uses local computation by data

299
00:09:46,080 --> 00:09:47,440
owners on their data sets

300
00:09:47,440 --> 00:09:49,200
for better initialization during the

301
00:09:49,200 --> 00:09:52,320
protocol execution

302
00:09:52,399 --> 00:09:54,320
we now discuss the challenges in

303
00:09:54,320 --> 00:09:56,320
applying secure clustering to real life

304
00:09:56,320 --> 00:09:57,600
applications

305
00:09:57,600 --> 00:09:59,440
and future research directions to make

306
00:09:59,440 --> 00:10:02,399
secure clustering more practical

307
00:10:02,399 --> 00:10:04,399
we believe the best way to understand

308
00:10:04,399 --> 00:10:05,680
the current challenges to secure

309
00:10:05,680 --> 00:10:06,320
clustering

310
00:10:06,320 --> 00:10:08,480
is to compare it with the workflow for

311
00:10:08,480 --> 00:10:10,480
plain text clustering

312
00:10:10,480 --> 00:10:12,399
ideally we would want secure clustering

313
00:10:12,399 --> 00:10:13,600
protocols to be as

314
00:10:13,600 --> 00:10:15,839
easy to use and apply as their plain

315
00:10:15,839 --> 00:10:18,959
text variants consider a user

316
00:10:18,959 --> 00:10:21,600
which wishes to cluster a data set since

317
00:10:21,600 --> 00:10:23,360
this is the plain text scenario

318
00:10:23,360 --> 00:10:25,440
the user has access to the entire data

319
00:10:25,440 --> 00:10:27,360
set and moreover they can visualize and

320
00:10:27,360 --> 00:10:29,120
analyze it

321
00:10:29,120 --> 00:10:31,680
now this makes it easy for the user to

322
00:10:31,680 --> 00:10:33,279
select an appropriate clustering

323
00:10:33,279 --> 00:10:35,519
algorithm and its parameters

324
00:10:35,519 --> 00:10:37,519
for example in this case the user might

325
00:10:37,519 --> 00:10:39,200
learn that the data set consists of four

326
00:10:39,200 --> 00:10:40,399
clusters that have

327
00:10:40,399 --> 00:10:42,640
a simple spherical shape and they might

328
00:10:42,640 --> 00:10:44,399
decide to use key means which usually

329
00:10:44,399 --> 00:10:46,959
works well on such data sets

330
00:10:46,959 --> 00:10:48,720
the user obtains a possible set of

331
00:10:48,720 --> 00:10:50,959
clusters after running the algorithm

332
00:10:50,959 --> 00:10:53,440
which can then be evaluated visually or

333
00:10:53,440 --> 00:10:55,760
by computing internal clustering indices

334
00:10:55,760 --> 00:10:57,360
like the silver index

335
00:10:57,360 --> 00:10:59,279
which helps quantitatively compare

336
00:10:59,279 --> 00:11:01,120
different clustering of the data set

337
00:11:01,120 --> 00:11:04,320
without requiring any ground group now

338
00:11:04,320 --> 00:11:06,480
as we see in the example here in some

339
00:11:06,480 --> 00:11:08,240
cases the output might not be of good

340
00:11:08,240 --> 00:11:08,800
quality

341
00:11:08,800 --> 00:11:10,560
either due to bad initialization or

342
00:11:10,560 --> 00:11:12,720
non-optimal parameter values

343
00:11:12,720 --> 00:11:14,480
in which case the user reruns the

344
00:11:14,480 --> 00:11:16,320
algorithm with different parameters and

345
00:11:16,320 --> 00:11:18,000
random seeds or on a completely

346
00:11:18,000 --> 00:11:20,000
different algorithm

347
00:11:20,000 --> 00:11:21,680
finally they can evaluate and select the

348
00:11:21,680 --> 00:11:23,600
best output

349
00:11:23,600 --> 00:11:25,200
now let's look at the challenges that

350
00:11:25,200 --> 00:11:27,040
arise when using secure clustering

351
00:11:27,040 --> 00:11:29,440
protocols in a similar workflow

352
00:11:29,440 --> 00:11:31,279
in this case the data set is distributed

353
00:11:31,279 --> 00:11:33,360
among multiple data owners that wish to

354
00:11:33,360 --> 00:11:36,240
cluster on the combined dataset

355
00:11:36,240 --> 00:11:38,800
as mentioned previously no algorithm

356
00:11:38,800 --> 00:11:39,760
performs well

357
00:11:39,760 --> 00:11:42,800
on all datasets moreover the protocol

358
00:11:42,800 --> 00:11:44,880
parameter values have a significant

359
00:11:44,880 --> 00:11:47,120
impact on the clustering quality and the

360
00:11:47,120 --> 00:11:49,200
optimal value of some parameters

361
00:11:49,200 --> 00:11:52,079
depends on the input data since the data

362
00:11:52,079 --> 00:11:54,480
set is distributed among the data owners

363
00:11:54,480 --> 00:11:56,480
there is no easy way to perform a

364
00:11:56,480 --> 00:11:58,240
preliminary analysis on the combined

365
00:11:58,240 --> 00:11:59,600
data set

366
00:11:59,600 --> 00:12:01,200
now this makes it hard to choose a

367
00:12:01,200 --> 00:12:04,240
suitable algorithm and its parameters

368
00:12:04,240 --> 00:12:06,079
also since the performance of protocols

369
00:12:06,079 --> 00:12:07,680
vary significantly

370
00:12:07,680 --> 00:12:09,519
the choice of protocol might depend on

371
00:12:09,519 --> 00:12:11,360
the efficiency of the protocol

372
00:12:11,360 --> 00:12:12,959
rather than the underlying algorithm and

373
00:12:12,959 --> 00:12:14,959
the output quality

374
00:12:14,959 --> 00:12:17,120
moreover the inherent overhead of secure

375
00:12:17,120 --> 00:12:19,279
computation makes it infeasible to run

376
00:12:19,279 --> 00:12:20,800
the protocol multiple times with

377
00:12:20,800 --> 00:12:22,160
different parameter values and

378
00:12:22,160 --> 00:12:23,200
randomness

379
00:12:23,200 --> 00:12:24,959
like in the case of plain text

380
00:12:24,959 --> 00:12:26,720
clustering

381
00:12:26,720 --> 00:12:28,720
when the data owners do run a clustering

382
00:12:28,720 --> 00:12:30,240
protocol and receive the clusters in

383
00:12:30,240 --> 00:12:32,079
their data set as output

384
00:12:32,079 --> 00:12:34,079
the next challenge is in evaluating the

385
00:12:34,079 --> 00:12:35,680
clustering quality

386
00:12:35,680 --> 00:12:38,079
if a data owner evaluates only based on

387
00:12:38,079 --> 00:12:39,279
their local data set

388
00:12:39,279 --> 00:12:41,839
then it doesn't give an accurate picture

389
00:12:41,839 --> 00:12:44,000
in this example the output quality for

390
00:12:44,000 --> 00:12:46,320
the local data set of each data owner

391
00:12:46,320 --> 00:12:47,760
seems to be good

392
00:12:47,760 --> 00:12:49,600
but it's clear that the combined data

393
00:12:49,600 --> 00:12:52,079
set has four clusters and not three

394
00:12:52,079 --> 00:12:54,000
so there is a need to securely evaluate

395
00:12:54,000 --> 00:12:56,160
the output quality on the combined data

396
00:12:56,160 --> 00:12:56,880
set

397
00:12:56,880 --> 00:12:58,639
and one way to go about this is to

398
00:12:58,639 --> 00:13:01,360
securely compute clustering indices

399
00:13:01,360 --> 00:13:03,360
now there are two aspects to this the

400
00:13:03,360 --> 00:13:06,000
first is extending the protocols to

401
00:13:06,000 --> 00:13:08,079
efficiently compute such indices from

402
00:13:08,079 --> 00:13:09,839
the output

403
00:13:09,839 --> 00:13:11,839
secondly since these indices are

404
00:13:11,839 --> 00:13:14,160
computed on the combined data set

405
00:13:14,160 --> 00:13:16,240
it is important to analyze if outputting

406
00:13:16,240 --> 00:13:18,959
it can leak any private information

407
00:13:18,959 --> 00:13:20,480
and if there are other methods of

408
00:13:20,480 --> 00:13:22,480
evaluation better suited for the privacy

409
00:13:22,480 --> 00:13:24,480
preserving case

410
00:13:24,480 --> 00:13:26,480
finally since there is an overhead to

411
00:13:26,480 --> 00:13:28,240
evaluation and rerunning the clustering

412
00:13:28,240 --> 00:13:30,160
protocol multiple times

413
00:13:30,160 --> 00:13:32,000
we would want the protocol to be robust

414
00:13:32,000 --> 00:13:34,720
to outliers and handle noise well

415
00:13:34,720 --> 00:13:36,480
especially since it's harder to remove

416
00:13:36,480 --> 00:13:38,000
outliers and noisy inputs

417
00:13:38,000 --> 00:13:41,040
when the data is distributed

418
00:13:41,040 --> 00:13:43,440
so the plain text scenario makes it easy

419
00:13:43,440 --> 00:13:44,160
to select

420
00:13:44,160 --> 00:13:46,399
optimal parameter values and evaluate

421
00:13:46,399 --> 00:13:48,079
the clustering output

422
00:13:48,079 --> 00:13:49,600
while this is harder in the secure

423
00:13:49,600 --> 00:13:51,279
scenario mainly because of the

424
00:13:51,279 --> 00:13:53,440
distributed data set and the overhead of

425
00:13:53,440 --> 00:13:56,399
secure computation

426
00:13:56,399 --> 00:13:59,040
so to summarize we surveyed around 59

427
00:13:59,040 --> 00:14:00,959
works on secure clustering and found

428
00:14:00,959 --> 00:14:03,199
that only 10 were fully private

429
00:14:03,199 --> 00:14:05,040
our benchmarks showed that the run time

430
00:14:05,040 --> 00:14:06,639
of the state of the art

431
00:14:06,639 --> 00:14:08,320
among these protocols varies

432
00:14:08,320 --> 00:14:09,839
significantly

433
00:14:09,839 --> 00:14:12,000
so improving the efficiency of secure

434
00:14:12,000 --> 00:14:13,760
clustering protocols with respect to

435
00:14:13,760 --> 00:14:14,560
runtime

436
00:14:14,560 --> 00:14:17,279
communication and memory consumption is

437
00:14:17,279 --> 00:14:19,839
an important research direction

438
00:14:19,839 --> 00:14:21,519
application of secure clustering in the

439
00:14:21,519 --> 00:14:23,839
real world requires designing protocols

440
00:14:23,839 --> 00:14:25,360
whose parameters can be set

441
00:14:25,360 --> 00:14:27,839
independent of the input data the

442
00:14:27,839 --> 00:14:29,680
protocol should be robust to outliers

443
00:14:29,680 --> 00:14:31,120
and noise and should work well on

444
00:14:31,120 --> 00:14:33,279
different types of data sets

445
00:14:33,279 --> 00:14:35,839
finally practical application requires

446
00:14:35,839 --> 00:14:37,040
developing techniques

447
00:14:37,040 --> 00:14:39,040
to securely evaluate the clustering

448
00:14:39,040 --> 00:14:41,600
output to enable selecting the best one

449
00:14:41,600 --> 00:14:42,399
among different

450
00:14:42,399 --> 00:14:44,560
runs and across protocols like in the

451
00:14:44,560 --> 00:14:47,518
plaintext scenario

452
00:14:47,600 --> 00:14:49,920
so with this we conclude our talk thank

453
00:14:49,920 --> 00:14:52,480
you for your attention

454
00:14:52,480 --> 00:14:59,839
these are our references

