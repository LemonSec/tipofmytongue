1
00:00:00,799 --> 00:00:02,159
hello everyone and welcome to my

2
00:00:02,159 --> 00:00:03,280
presentation of

3
00:00:03,280 --> 00:00:05,600
uh efficient homomorphic evaluation of k

4
00:00:05,600 --> 00:00:07,040
n classifiers

5
00:00:07,040 --> 00:00:08,480
it's a work that i've done with renault

6
00:00:08,480 --> 00:00:11,920
cell d for serialist

7
00:00:11,920 --> 00:00:13,200
i'm going to have a very small

8
00:00:13,200 --> 00:00:15,360
introduction hopefully and uh

9
00:00:15,360 --> 00:00:18,160
then i'm gonna present our contribution

10
00:00:18,160 --> 00:00:19,039
and uh

11
00:00:19,039 --> 00:00:21,840
first uh our contribution explained in

12
00:00:21,840 --> 00:00:24,000
the context of cat privacy

13
00:00:24,000 --> 00:00:26,400
um if you have a user who has a picture

14
00:00:26,400 --> 00:00:27,279
of their cats

15
00:00:27,279 --> 00:00:28,880
and wants to know which one of them is

16
00:00:28,880 --> 00:00:30,720
the cutest

17
00:00:30,720 --> 00:00:32,399
maybe that user doesn't know how to

18
00:00:32,399 --> 00:00:33,760
answer that question

19
00:00:33,760 --> 00:00:36,800
but a server has a very complex cuteness

20
00:00:36,800 --> 00:00:39,120
determination algorithm that can do just

21
00:00:39,120 --> 00:00:42,320
that so how can both of them

22
00:00:42,320 --> 00:00:44,879
help each other well one way to do this

23
00:00:44,879 --> 00:00:46,320
is for the user to

24
00:00:46,320 --> 00:00:48,800
send the clear text picture of their

25
00:00:48,800 --> 00:00:50,399
cats to the server

26
00:00:50,399 --> 00:00:52,640
for the answer to come back from the

27
00:00:52,640 --> 00:00:54,160
server after computation

28
00:00:54,160 --> 00:00:57,360
but this means that the privacy of the

29
00:00:57,360 --> 00:00:59,760
cats is compromised here

30
00:00:59,760 --> 00:01:01,840
and another way to do this is for the

31
00:01:01,840 --> 00:01:03,039
server to send

32
00:01:03,039 --> 00:01:06,240
their complex algorithm to the user

33
00:01:06,240 --> 00:01:08,640
for a computation at on the user side

34
00:01:08,640 --> 00:01:10,320
but that means that a very complex and

35
00:01:10,320 --> 00:01:10,960
maybe

36
00:01:10,960 --> 00:01:14,560
a very expensive algorithm is just

37
00:01:14,560 --> 00:01:17,439
sent out in the open so that's a bit of

38
00:01:17,439 --> 00:01:18,240
a problem

39
00:01:18,240 --> 00:01:20,960
and one solution in the state of the art

40
00:01:20,960 --> 00:01:21,680
is

41
00:01:21,680 --> 00:01:24,400
fuliomorphic encryption and its promise

42
00:01:24,400 --> 00:01:24,880
is

43
00:01:24,880 --> 00:01:28,000
that given a function f that is applied

44
00:01:28,000 --> 00:01:29,600
on a certain number of inputs

45
00:01:29,600 --> 00:01:32,640
we can just encrypt those inputs uh with

46
00:01:32,640 --> 00:01:34,640
a fully homomorphic encryption scheme

47
00:01:34,640 --> 00:01:37,200
and just apply very easily that same

48
00:01:37,200 --> 00:01:39,439
function f and obtain an encryption

49
00:01:39,439 --> 00:01:42,880
of the result

50
00:01:43,520 --> 00:01:45,840
now what would that mean for our cats

51
00:01:45,840 --> 00:01:47,200
well in that case

52
00:01:47,200 --> 00:01:49,280
the user can just encrypt the picture of

53
00:01:49,280 --> 00:01:51,920
their cats and send it over to the

54
00:01:51,920 --> 00:01:54,000
server who can then compute over

55
00:01:54,000 --> 00:01:56,079
encrypted data and send the result

56
00:01:56,079 --> 00:01:59,280
back that way both the complex algorithm

57
00:01:59,280 --> 00:02:02,399
and the privacy of the cats

58
00:02:02,399 --> 00:02:05,840
is protected the encryption scheme that

59
00:02:05,840 --> 00:02:09,038
we've used for this contribution is tfhe

60
00:02:09,038 --> 00:02:12,239
a taurus-based lwe based encryption

61
00:02:12,239 --> 00:02:12,959
scheme

62
00:02:12,959 --> 00:02:15,520
and on top of knowing that well it's

63
00:02:15,520 --> 00:02:16,239
based on

64
00:02:16,239 --> 00:02:19,440
taurus which is the additive group zero

65
00:02:19,440 --> 00:02:20,319
one

66
00:02:20,319 --> 00:02:22,400
one thing that's important is that as

67
00:02:22,400 --> 00:02:24,720
with with every other lwe based

68
00:02:24,720 --> 00:02:27,040
encryption scheme there is an error that

69
00:02:27,040 --> 00:02:27,920
is introduced

70
00:02:27,920 --> 00:02:30,480
during the encryption uh that means that

71
00:02:30,480 --> 00:02:32,080
at decryption time

72
00:02:32,080 --> 00:02:35,120
uh the message that is retrieved

73
00:02:35,120 --> 00:02:37,599
has to be matched to the closest message

74
00:02:37,599 --> 00:02:38,560
in the message

75
00:02:38,560 --> 00:02:42,400
space now the operations that we have

76
00:02:42,400 --> 00:02:45,760
are internal addition a ciphertext with

77
00:02:45,760 --> 00:02:47,200
a ciphertext and an external

78
00:02:47,200 --> 00:02:48,400
multiplication

79
00:02:48,400 --> 00:02:51,120
of an integer clear text with a

80
00:02:51,120 --> 00:02:51,920
ciphertext

81
00:02:51,920 --> 00:02:54,400
now both of these give us a scalar

82
00:02:54,400 --> 00:02:55,440
product between

83
00:02:55,440 --> 00:02:58,480
an integer uh clear text

84
00:02:58,480 --> 00:03:01,440
vector and a ciphertext vector which is

85
00:03:01,440 --> 00:03:04,480
actually a squared euclidean distance

86
00:03:04,480 --> 00:03:06,560
and another operation that's a bit more

87
00:03:06,560 --> 00:03:08,480
complex and that's

88
00:03:08,480 --> 00:03:10,959
quite specific to tfhe is going to be

89
00:03:10,959 --> 00:03:12,800
the bootstrapping operation

90
00:03:12,800 --> 00:03:14,879
that does three things it outputs a

91
00:03:14,879 --> 00:03:16,640
fixed noise it switches

92
00:03:16,640 --> 00:03:19,680
the encryption key and if i evaluate a

93
00:03:19,680 --> 00:03:21,360
function which in our case is going to

94
00:03:21,360 --> 00:03:23,760
be the sine function

95
00:03:23,760 --> 00:03:25,280
now this is going to be a very

96
00:03:25,280 --> 00:03:27,440
interesting operation because

97
00:03:27,440 --> 00:03:30,239
of a problem that most homomorphic

98
00:03:30,239 --> 00:03:32,000
encryption schemes have which is error

99
00:03:32,000 --> 00:03:34,319
management as we said there is an error

100
00:03:34,319 --> 00:03:35,440
which is introduced

101
00:03:35,440 --> 00:03:37,760
at encryption time and this error is

102
00:03:37,760 --> 00:03:38,720
going to grow

103
00:03:38,720 --> 00:03:40,720
with every operation that we apply on

104
00:03:40,720 --> 00:03:42,000
our ciphertexts

105
00:03:42,000 --> 00:03:44,319
and at some point decryption is going to

106
00:03:44,319 --> 00:03:46,480
be impossible

107
00:03:46,480 --> 00:03:49,200
and so there's two solutions to this one

108
00:03:49,200 --> 00:03:50,720
is to use a leveled

109
00:03:50,720 --> 00:03:53,760
morphic encryption and that means

110
00:03:53,760 --> 00:03:56,560
setting the parameters so as to stop the

111
00:03:56,560 --> 00:03:58,239
computations exactly

112
00:03:58,239 --> 00:04:01,680
when the air has not yet grown too big

113
00:04:01,680 --> 00:04:03,680
and that means knowing the depth of the

114
00:04:03,680 --> 00:04:05,360
computation before

115
00:04:05,360 --> 00:04:07,760
we set the parameters and that can be a

116
00:04:07,760 --> 00:04:09,519
problem in certain use cases

117
00:04:09,519 --> 00:04:12,000
and that's the reason why we can use

118
00:04:12,000 --> 00:04:14,159
foliomorphic encryption

119
00:04:14,159 --> 00:04:16,320
to solve the same problem and that

120
00:04:16,320 --> 00:04:17,600
requires

121
00:04:17,600 --> 00:04:20,079
resetting the noise of the ciphertext's

122
00:04:20,079 --> 00:04:21,680
mid computation

123
00:04:21,680 --> 00:04:23,440
that's the point of the bootstrapping

124
00:04:23,440 --> 00:04:25,680
operation in our case

125
00:04:25,680 --> 00:04:28,320
if we take a real value m on the real

126
00:04:28,320 --> 00:04:29,360
axis here

127
00:04:29,360 --> 00:04:31,600
before it can be encrypted using tfhe it

128
00:04:31,600 --> 00:04:33,440
needs to be encoded into

129
00:04:33,440 --> 00:04:36,479
a taurus value by dividing it by a base

130
00:04:36,479 --> 00:04:38,560
b and therefore it's going to get into

131
00:04:38,560 --> 00:04:40,400
this circle

132
00:04:40,400 --> 00:04:43,120
which is the taurus uh with the lower

133
00:04:43,120 --> 00:04:45,280
values here being minus from minus one

134
00:04:45,280 --> 00:04:47,759
half to zero and then from zero to

135
00:04:47,759 --> 00:04:49,840
uh one half the positive values on top

136
00:04:49,840 --> 00:04:51,120
the negative values

137
00:04:51,120 --> 00:04:54,240
on the bottom uh then encryption adds an

138
00:04:54,240 --> 00:04:55,680
error which is represented by this

139
00:04:55,680 --> 00:04:57,919
squared area here and the bootstrapping

140
00:04:57,919 --> 00:05:00,240
operation is represented by this

141
00:05:00,240 --> 00:05:04,000
circle with uh red zones around zero and

142
00:05:04,000 --> 00:05:04,639
one half

143
00:05:04,639 --> 00:05:06,160
which is where the bootstrapping

144
00:05:06,160 --> 00:05:08,000
operation is going to

145
00:05:08,000 --> 00:05:11,759
output errors so the bootstrapping

146
00:05:11,759 --> 00:05:14,560
outputs a value which is then decrypted

147
00:05:14,560 --> 00:05:15,680
removing the error

148
00:05:15,680 --> 00:05:18,400
and then decoded by multiplying it by

149
00:05:18,400 --> 00:05:20,479
the output base which in this case is

150
00:05:20,479 --> 00:05:21,680
four

151
00:05:21,680 --> 00:05:24,160
so here we get an output of one at the

152
00:05:24,160 --> 00:05:24,800
end

153
00:05:24,800 --> 00:05:27,440
um for an input which was positive so

154
00:05:27,440 --> 00:05:29,039
that's a good application of the sine

155
00:05:29,039 --> 00:05:29,840
function

156
00:05:29,840 --> 00:05:32,880
equivalently if the initial input is

157
00:05:32,880 --> 00:05:33,520
negative

158
00:05:33,520 --> 00:05:35,600
then we're going to get an output of

159
00:05:35,600 --> 00:05:37,120
zero at the end

160
00:05:37,120 --> 00:05:40,639
and if the encoding of the initial

161
00:05:40,639 --> 00:05:43,759
input is too close to the value 0

162
00:05:43,759 --> 00:05:45,280
in the torus then the bootstrapping

163
00:05:45,280 --> 00:05:46,960
operation can

164
00:05:46,960 --> 00:05:49,680
get a wrong result in this case 0 for a

165
00:05:49,680 --> 00:05:50,840
value that was

166
00:05:50,840 --> 00:05:53,199
negative on to our contribution and

167
00:05:53,199 --> 00:05:54,160
first a word

168
00:05:54,160 --> 00:05:56,560
on k nearest neighbor classifiers

169
00:05:56,560 --> 00:05:57,919
they're very simple

170
00:05:57,919 --> 00:06:00,400
uh kinds of machine learning algorithms

171
00:06:00,400 --> 00:06:00,960
that are

172
00:06:00,960 --> 00:06:03,520
still very much used today in real world

173
00:06:03,520 --> 00:06:04,560
applications

174
00:06:04,560 --> 00:06:07,199
especially since the advent of embedding

175
00:06:07,199 --> 00:06:10,000
embedding based neural networks

176
00:06:10,000 --> 00:06:11,680
and for a very simple example here if

177
00:06:11,680 --> 00:06:13,039
you want to classify

178
00:06:13,039 --> 00:06:16,080
an unknown voter um as coming

179
00:06:16,080 --> 00:06:18,000
as having an affiliation to either

180
00:06:18,000 --> 00:06:20,000
democrats or republicans for

181
00:06:20,000 --> 00:06:23,919
an american election then we just place

182
00:06:23,919 --> 00:06:26,560
all known voters in a euclidean space

183
00:06:26,560 --> 00:06:28,400
and place our unknown voters in that

184
00:06:28,400 --> 00:06:29,840
space

185
00:06:29,840 --> 00:06:32,560
and then we either affiliate it to its

186
00:06:32,560 --> 00:06:33,600
closest neighbor

187
00:06:33,600 --> 00:06:36,639
here a democrat or just have a majority

188
00:06:36,639 --> 00:06:38,319
vote among its three

189
00:06:38,319 --> 00:06:41,120
nearest neighbors to affiliate it here

190
00:06:41,120 --> 00:06:41,440
as

191
00:06:41,440 --> 00:06:44,000
a republican and the number of closest

192
00:06:44,000 --> 00:06:45,039
neighbors that we

193
00:06:45,039 --> 00:06:49,120
choose is the number k of knn

194
00:06:49,120 --> 00:06:52,479
so in simple terms what we have uh

195
00:06:52,479 --> 00:06:55,759
is one clear vector which is

196
00:06:55,759 --> 00:06:58,960
uh the new vector to be classified and

197
00:06:58,960 --> 00:07:02,400
a bunch of encrypted model vectors

198
00:07:02,400 --> 00:07:06,880
which corresponded in our case to the

199
00:07:06,880 --> 00:07:09,680
voters that were already affiliated and

200
00:07:09,680 --> 00:07:10,880
what we want

201
00:07:10,880 --> 00:07:14,479
is an encrypted vector with a whole lot

202
00:07:14,479 --> 00:07:15,360
of zeros

203
00:07:15,360 --> 00:07:19,199
and just k ones at k indices

204
00:07:19,199 --> 00:07:22,639
uh which are the indices of the k

205
00:07:22,639 --> 00:07:25,680
nearest neighbors uh first

206
00:07:25,680 --> 00:07:27,840
let me present a leveled homomorphic one

207
00:07:27,840 --> 00:07:30,160
nearest neighbor computation

208
00:07:30,160 --> 00:07:32,080
and on the left here every operation

209
00:07:32,080 --> 00:07:34,479
done in a clear domain

210
00:07:34,479 --> 00:07:36,240
and we start with some distance

211
00:07:36,240 --> 00:07:37,840
computations

212
00:07:37,840 --> 00:07:40,720
and then we're going to for every

213
00:07:40,720 --> 00:07:42,400
distance k and

214
00:07:42,400 --> 00:07:44,879
dk and dl we're going to compare those

215
00:07:44,879 --> 00:07:45,440
two

216
00:07:45,440 --> 00:07:48,400
and compute a delta delta kl which is

217
00:07:48,400 --> 00:07:50,160
going to only be equal to 1

218
00:07:50,160 --> 00:07:52,960
if the distance k is lower than the

219
00:07:52,960 --> 00:07:54,080
distance l

220
00:07:54,080 --> 00:07:57,199
and this is going to give us a matrix of

221
00:07:57,199 --> 00:07:58,639
deltas

222
00:07:58,639 --> 00:08:01,039
and we're going to sum all of the

223
00:08:01,039 --> 00:08:01,919
columns

224
00:08:01,919 --> 00:08:04,080
of this matrix in order to get big

225
00:08:04,080 --> 00:08:05,039
deltas

226
00:08:05,039 --> 00:08:08,080
and uh what we need to understand here

227
00:08:08,080 --> 00:08:08,400
is

228
00:08:08,400 --> 00:08:10,319
for instance if we if we take this first

229
00:08:10,319 --> 00:08:12,720
column here of deltas

230
00:08:12,720 --> 00:08:15,599
if all of the deltas are equal to 1 that

231
00:08:15,599 --> 00:08:16,720
means that the distance

232
00:08:16,720 --> 00:08:20,319
1 was smaller than every other distance

233
00:08:20,319 --> 00:08:22,479
and this is only going to be the case

234
00:08:22,479 --> 00:08:23,680
for the smallest

235
00:08:23,680 --> 00:08:26,319
distance so we're going to have only one

236
00:08:26,319 --> 00:08:28,560
column which is going to be full of ones

237
00:08:28,560 --> 00:08:30,479
and every other column which is going to

238
00:08:30,479 --> 00:08:31,680
have at least one

239
00:08:31,680 --> 00:08:34,799
zero among the deltas so that means that

240
00:08:34,799 --> 00:08:36,080
in order to determine

241
00:08:36,080 --> 00:08:39,279
the smallest distance we can just ask

242
00:08:39,279 --> 00:08:42,479
of these big deltas here which one of

243
00:08:42,479 --> 00:08:42,799
them

244
00:08:42,799 --> 00:08:45,040
is equal to d minus 1 which would mean

245
00:08:45,040 --> 00:08:46,560
that all of the deltas in their column

246
00:08:46,560 --> 00:08:48,640
is are equal to 1.

247
00:08:48,640 --> 00:08:51,519
and this algorithm here is going to give

248
00:08:51,519 --> 00:08:52,399
us

249
00:08:52,399 --> 00:08:55,760
the one nearest neighbor uh

250
00:08:55,760 --> 00:08:58,959
vector as an output and uh in the

251
00:08:58,959 --> 00:09:00,320
encrypted domain

252
00:09:00,320 --> 00:09:02,240
uh how we can do this is well just

253
00:09:02,240 --> 00:09:04,000
compute the distances or rather

254
00:09:04,000 --> 00:09:05,600
the squared distances i should have

255
00:09:05,600 --> 00:09:08,160
changed this um

256
00:09:08,160 --> 00:09:10,320
to start with as we saw with our scalar

257
00:09:10,320 --> 00:09:11,600
product

258
00:09:11,600 --> 00:09:15,200
and this gives us a cipher text

259
00:09:15,200 --> 00:09:18,080
with an underlying message which

260
00:09:18,080 --> 00:09:20,160
shouldn't be anywhere in the taurus

261
00:09:20,160 --> 00:09:22,800
then we apply a bootstrapping sign

262
00:09:22,800 --> 00:09:25,040
bootstrapping operation

263
00:09:25,040 --> 00:09:28,640
in order to get our delta matrix

264
00:09:28,640 --> 00:09:30,000
and we're going to extract here the

265
00:09:30,000 --> 00:09:32,240
first column as an example

266
00:09:32,240 --> 00:09:36,000
we have a number of delta

267
00:09:36,000 --> 00:09:38,240
values here which can uh either either

268
00:09:38,240 --> 00:09:39,680
be equal to zero or

269
00:09:39,680 --> 00:09:42,160
one which is actually one over something

270
00:09:42,160 --> 00:09:42,720
uh

271
00:09:42,720 --> 00:09:45,200
encoded in the torus uh then we're going

272
00:09:45,200 --> 00:09:46,000
to sum

273
00:09:46,000 --> 00:09:49,200
all of these values together uh and get

274
00:09:49,200 --> 00:09:52,880
a value which can be anywhere between

275
00:09:52,880 --> 00:09:55,279
zero and d minus one and we want to

276
00:09:55,279 --> 00:09:56,800
select

277
00:09:56,800 --> 00:09:59,920
uh the uh the ciphertext which

278
00:09:59,920 --> 00:10:02,320
includes the value which is equal to d

279
00:10:02,320 --> 00:10:03,200
minus one

280
00:10:03,200 --> 00:10:04,560
and for this we're going to apply a

281
00:10:04,560 --> 00:10:06,320
little bit of a rotation and then a

282
00:10:06,320 --> 00:10:07,360
bootstrapping

283
00:10:07,360 --> 00:10:09,920
operation which uh is going to make it

284
00:10:09,920 --> 00:10:11,519
so that only

285
00:10:11,519 --> 00:10:14,000
the d minus one value is going to be in

286
00:10:14,000 --> 00:10:15,760
the lower half of the torus here

287
00:10:15,760 --> 00:10:17,920
so that means that the output of the

288
00:10:17,920 --> 00:10:19,519
bootstrapping operation is going to be

289
00:10:19,519 --> 00:10:21,440
equal to one

290
00:10:21,440 --> 00:10:25,440
here only for one of our delta big delta

291
00:10:25,440 --> 00:10:28,959
ciphertexts and so with this we have a

292
00:10:28,959 --> 00:10:30,320
leveled homomorphic one

293
00:10:30,320 --> 00:10:33,519
nearest neighbor computation now this

294
00:10:33,519 --> 00:10:37,440
is a leveled scheme because if we add

295
00:10:37,440 --> 00:10:39,600
a number of model vectors here at the

296
00:10:39,600 --> 00:10:41,839
beginning then we're going to increase

297
00:10:41,839 --> 00:10:44,480
the number of delta ciphertexts that we

298
00:10:44,480 --> 00:10:45,440
sum before

299
00:10:45,440 --> 00:10:47,680
a bootstrapping operation and if we

300
00:10:47,680 --> 00:10:49,360
increase this number too much

301
00:10:49,360 --> 00:10:52,320
then the error of the sum is going to be

302
00:10:52,320 --> 00:10:52,880
too big

303
00:10:52,880 --> 00:10:54,480
for the result of the bootstrapping

304
00:10:54,480 --> 00:10:56,800
operation to be correct

305
00:10:56,800 --> 00:11:00,160
and in order to change this leveled

306
00:11:00,160 --> 00:11:02,959
homomorphic scheme uh into a fully

307
00:11:02,959 --> 00:11:03,920
homomorphic

308
00:11:03,920 --> 00:11:06,480
uh computation uh well we're gonna have

309
00:11:06,480 --> 00:11:08,240
a very simple fix

310
00:11:08,240 --> 00:11:10,720
here if we take the sum of the zelda

311
00:11:10,720 --> 00:11:12,079
ciphertext here

312
00:11:12,079 --> 00:11:14,079
uh what we just need to do is to

313
00:11:14,079 --> 00:11:15,360
separate these

314
00:11:15,360 --> 00:11:18,399
uh delta ciphertexts into fixed sized

315
00:11:18,399 --> 00:11:19,200
groups

316
00:11:19,200 --> 00:11:21,600
and then just apply the same

317
00:11:21,600 --> 00:11:23,279
computations so

318
00:11:23,279 --> 00:11:26,160
a sum and a rotation and a bootstrapping

319
00:11:26,160 --> 00:11:28,000
operation in order to create some sort

320
00:11:28,000 --> 00:11:28,399
of

321
00:11:28,399 --> 00:11:31,120
intermediate deltas that we can just

322
00:11:31,120 --> 00:11:31,839
then keep

323
00:11:31,839 --> 00:11:34,880
summing and applying these

324
00:11:34,880 --> 00:11:37,680
rotations and bootstrapping operations

325
00:11:37,680 --> 00:11:39,440
and so if we do this

326
00:11:39,440 --> 00:11:41,680
with fixed sized groups every time we're

327
00:11:41,680 --> 00:11:44,720
going to get the same result

328
00:11:44,720 --> 00:11:48,000
in a fully homomorphic manner

329
00:11:48,000 --> 00:11:51,680
and now to build a knn from this

330
00:11:51,680 --> 00:11:54,079
1n classifier if we take our level

331
00:11:54,079 --> 00:11:55,040
demomorphic

332
00:11:55,040 --> 00:11:58,079
1n classifier here we're going to see

333
00:11:58,079 --> 00:11:58,720
that

334
00:11:58,720 --> 00:12:01,600
actually counting the number of zeros in

335
00:12:01,600 --> 00:12:04,320
every column is going to be

336
00:12:04,320 --> 00:12:06,079
very interesting and give us more

337
00:12:06,079 --> 00:12:07,760
information than just

338
00:12:07,760 --> 00:12:10,800
which distance is the closest indeed

339
00:12:10,800 --> 00:12:13,600
if a column has only one zero on top of

340
00:12:13,600 --> 00:12:15,680
the diagonal here of course

341
00:12:15,680 --> 00:12:17,279
then that means that that distance is

342
00:12:17,279 --> 00:12:19,040
going to be the second

343
00:12:19,040 --> 00:12:22,160
smallest distance etc etc

344
00:12:22,160 --> 00:12:24,959
so in order to determine the k smallest

345
00:12:24,959 --> 00:12:26,800
distances we can just replace

346
00:12:26,800 --> 00:12:30,480
this question here uh by uh the question

347
00:12:30,480 --> 00:12:34,000
is our big delta greater or equal than

348
00:12:34,000 --> 00:12:36,240
d minus k and this is going to give us

349
00:12:36,240 --> 00:12:37,440
an output with

350
00:12:37,440 --> 00:12:41,360
k ones exactly at the right indices

351
00:12:41,360 --> 00:12:44,000
and what this means for the ciphertext

352
00:12:44,000 --> 00:12:44,800
space

353
00:12:44,800 --> 00:12:47,920
is just a bigger rotation meaning that

354
00:12:47,920 --> 00:12:49,040
we select here

355
00:12:49,040 --> 00:12:52,639
the k smallest distances which means the

356
00:12:52,639 --> 00:12:53,200
k

357
00:12:53,200 --> 00:12:56,639
biggest deltas at the end and this

358
00:12:56,639 --> 00:12:59,519
is a pretty nice change with which gives

359
00:12:59,519 --> 00:13:00,160
us

360
00:13:00,160 --> 00:13:04,160
a leveled homomorphic knn classifier

361
00:13:04,160 --> 00:13:06,000
now transforming this leveled

362
00:13:06,000 --> 00:13:07,839
computation into a

363
00:13:07,839 --> 00:13:10,560
fully homomorphic computation means

364
00:13:10,560 --> 00:13:11,279
introducing

365
00:13:11,279 --> 00:13:14,320
a scoring operation um which we're going

366
00:13:14,320 --> 00:13:15,839
to apply on a subset

367
00:13:15,839 --> 00:13:18,720
of deltas from a column and what the

368
00:13:18,720 --> 00:13:20,320
scoring operation will do

369
00:13:20,320 --> 00:13:22,240
on this subset is it's going to start

370
00:13:22,240 --> 00:13:23,519
with a score of

371
00:13:23,519 --> 00:13:26,320
k and then every time it finds a zero

372
00:13:26,320 --> 00:13:28,959
it's going to reduce the score by one

373
00:13:28,959 --> 00:13:30,720
um and and this is going to be

374
00:13:30,720 --> 00:13:32,800
interesting for us because of course

375
00:13:32,800 --> 00:13:35,279
if there is more than a k zeroes in a

376
00:13:35,279 --> 00:13:36,320
single column

377
00:13:36,320 --> 00:13:38,880
that means uh that the distance in

378
00:13:38,880 --> 00:13:39,680
question

379
00:13:39,680 --> 00:13:43,199
is not among the k smallest distances

380
00:13:43,199 --> 00:13:48,160
and uh what how we're going to uh

381
00:13:48,160 --> 00:13:50,240
compute this scoring operation in the

382
00:13:50,240 --> 00:13:51,360
encrypted domain

383
00:13:51,360 --> 00:13:54,560
is just sum all of our deltas and then

384
00:13:54,560 --> 00:13:59,360
apply uh a different set of rotations

385
00:13:59,360 --> 00:14:02,720
in order to select one then 2 then 3

386
00:14:02,720 --> 00:14:06,959
etc with the maximum being k

387
00:14:06,959 --> 00:14:10,560
maximum values every time and then

388
00:14:10,560 --> 00:14:12,959
sum the results into something which is

389
00:14:12,959 --> 00:14:13,600
going to be

390
00:14:13,600 --> 00:14:17,120
between k and 0 and is going to be

391
00:14:17,120 --> 00:14:20,000
the score of our subset of deltas and

392
00:14:20,000 --> 00:14:21,600
then just as before we're going to

393
00:14:21,600 --> 00:14:22,320
iterate

394
00:14:22,320 --> 00:14:25,279
this scoring operation on fixed sized

395
00:14:25,279 --> 00:14:26,800
groups in order to make

396
00:14:26,800 --> 00:14:29,600
our computation fully homomorphic and

397
00:14:29,600 --> 00:14:30,240
this

398
00:14:30,240 --> 00:14:32,880
will actually give us the correct result

399
00:14:32,880 --> 00:14:34,720
which is going to be either a zero or a

400
00:14:34,720 --> 00:14:35,920
one for every

401
00:14:35,920 --> 00:14:39,279
column uh zero if it's among

402
00:14:39,279 --> 00:14:41,279
uh if it's not among the cake smallest

403
00:14:41,279 --> 00:14:42,639
distances and one

404
00:14:42,639 --> 00:14:45,199
if it is what's actually really

405
00:14:45,199 --> 00:14:47,120
interesting about

406
00:14:47,120 --> 00:14:49,680
our implementation is that these k

407
00:14:49,680 --> 00:14:51,680
bootstrapping operations here are not

408
00:14:51,680 --> 00:14:53,760
actually k boost wrapping operations

409
00:14:53,760 --> 00:14:56,639
but just k extractions at the end of a

410
00:14:56,639 --> 00:14:57,199
single

411
00:14:57,199 --> 00:14:59,279
bootstrapping operation so if you have

412
00:14:59,279 --> 00:15:00,800
like the original

413
00:15:00,800 --> 00:15:03,680
uh bootstrapping sign bootstrapping

414
00:15:03,680 --> 00:15:05,279
algorithm here on the left

415
00:15:05,279 --> 00:15:08,160
then the only change that we have for

416
00:15:08,160 --> 00:15:10,240
our

417
00:15:10,240 --> 00:15:13,279
scoring operation is just k extractions

418
00:15:13,279 --> 00:15:14,000
here at the end

419
00:15:14,000 --> 00:15:16,720
instead of one which is uh really

420
00:15:16,720 --> 00:15:17,839
interesting

421
00:15:17,839 --> 00:15:20,720
our results can be summarized with a

422
00:15:20,720 --> 00:15:22,880
very high accuracy as tested on the

423
00:15:22,880 --> 00:15:24,959
well-known mnist data set and the breast

424
00:15:24,959 --> 00:15:26,480
cancer wisconsin

425
00:15:26,480 --> 00:15:30,959
dataset and a bad scaling timewise

426
00:15:30,959 --> 00:15:33,519
because of its quadratic complexity in

427
00:15:33,519 --> 00:15:34,720
nature

428
00:15:34,720 --> 00:15:36,399
now in order to reduce the time

429
00:15:36,399 --> 00:15:38,160
complexity of our scheme what

430
00:15:38,160 --> 00:15:41,360
one could want to implement it um

431
00:15:41,360 --> 00:15:44,000
using a sort of more traditional

432
00:15:44,000 --> 00:15:45,440
tree-based

433
00:15:45,440 --> 00:15:47,759
approach and and that would mean uh

434
00:15:47,759 --> 00:15:48,480
having

435
00:15:48,480 --> 00:15:50,639
uh the distances here encrypted at the

436
00:15:50,639 --> 00:15:51,519
start and

437
00:15:51,519 --> 00:15:53,920
compared using the sine function and

438
00:15:53,920 --> 00:15:56,160
then one of them being selected using a

439
00:15:56,160 --> 00:15:56,480
mux

440
00:15:56,480 --> 00:15:59,839
gate and then going on and on descending

441
00:15:59,839 --> 00:16:00,959
a tree like this

442
00:16:00,959 --> 00:16:03,279
and this way we would have a linear

443
00:16:03,279 --> 00:16:04,639
complexity

444
00:16:04,639 --> 00:16:07,600
and it it it would be very interesting

445
00:16:07,600 --> 00:16:08,000
except

446
00:16:08,000 --> 00:16:11,120
that we have a a few problems

447
00:16:11,120 --> 00:16:13,920
with these one of them is that this mugs

448
00:16:13,920 --> 00:16:14,959
gate here

449
00:16:14,959 --> 00:16:18,079
when implemented homomorphically has a

450
00:16:18,079 --> 00:16:18,720
huge

451
00:16:18,720 --> 00:16:22,000
huge error growth in it and that means

452
00:16:22,000 --> 00:16:25,360
that we are not going to be able to

453
00:16:25,360 --> 00:16:28,639
go very far uh using this uh this

454
00:16:28,639 --> 00:16:32,399
uh sort of uh tree version um

455
00:16:32,399 --> 00:16:34,480
because of the error propagation that we

456
00:16:34,480 --> 00:16:36,399
have and we're going to have to have

457
00:16:36,399 --> 00:16:39,759
very big parameters and

458
00:16:39,759 --> 00:16:44,160
also because the error is going to

459
00:16:44,160 --> 00:16:47,199
grow every time we might want to use

460
00:16:47,199 --> 00:16:49,120
some sort of identity bootstrapping

461
00:16:49,120 --> 00:16:51,360
operation but then we're going to reduce

462
00:16:51,360 --> 00:16:52,560
the precision

463
00:16:52,560 --> 00:16:55,600
uh with which our distances uh are

464
00:16:55,600 --> 00:16:58,800
uh encrypted now to give an example for

465
00:16:58,800 --> 00:16:59,360
instance

466
00:16:59,360 --> 00:17:02,800
uh with the 64-bit version of tfhe

467
00:17:02,800 --> 00:17:06,079
we have a precision of 64-bit and

468
00:17:06,079 --> 00:17:07,679
using an identity bootstrapping

469
00:17:07,679 --> 00:17:09,839
operation we would go down to about 8

470
00:17:09,839 --> 00:17:10,480
bits

471
00:17:10,480 --> 00:17:13,679
of precision which would affect

472
00:17:13,679 --> 00:17:17,119
the overall precision of the k n

473
00:17:17,119 --> 00:17:19,839
classification in conclusion we have a

474
00:17:19,839 --> 00:17:21,359
highly precise

475
00:17:21,359 --> 00:17:24,079
fully homomorphic k n implementation

476
00:17:24,079 --> 00:17:24,720
which has

477
00:17:24,720 --> 00:17:26,400
a very good scaling in terms of

478
00:17:26,400 --> 00:17:28,079
precision and uh

479
00:17:28,079 --> 00:17:30,720
parameters because of its foliomorphic

480
00:17:30,720 --> 00:17:31,440
nature

481
00:17:31,440 --> 00:17:34,559
and bad scaling in terms of time

482
00:17:34,559 --> 00:17:37,039
now i think there's a lot of perspective

483
00:17:37,039 --> 00:17:38,880
in order to improve maybe this

484
00:17:38,880 --> 00:17:42,080
uh this scheme depending on the the

485
00:17:42,080 --> 00:17:45,039
constraints in the use case and mixing

486
00:17:45,039 --> 00:17:47,039
some sort of leveled scheme with

487
00:17:47,039 --> 00:17:50,160
our foliomorphic scheme uh uh in order

488
00:17:50,160 --> 00:17:50,559
to

489
00:17:50,559 --> 00:17:52,960
to boost the time performance but keep

490
00:17:52,960 --> 00:17:54,720
the precision of our scheme

491
00:17:54,720 --> 00:17:57,840
um and what's important here is that

492
00:17:57,840 --> 00:17:59,440
this very basic machine learning

493
00:17:59,440 --> 00:18:00,960
algorithm has

494
00:18:00,960 --> 00:18:03,280
really a host of applications in

495
00:18:03,280 --> 00:18:04,559
state-of-the-art

496
00:18:04,559 --> 00:18:07,840
modern machine learning

497
00:18:07,840 --> 00:18:09,039
thank you very much this is my

498
00:18:09,039 --> 00:18:10,880
presentation and i'll take questions now

499
00:18:10,880 --> 00:18:13,600
if you have them

