1
00:00:00,240 --> 00:00:02,480
hello everyone my name is zakash mishra

2
00:00:02,480 --> 00:00:04,160
and i'm a third year phd student at

3
00:00:04,160 --> 00:00:05,279
indury allele

4
00:00:05,279 --> 00:00:08,080
today i'll be presenting my paper titled

5
00:00:08,080 --> 00:00:09,040
deja vu

6
00:00:09,040 --> 00:00:10,480
of using browser cache headers to

7
00:00:10,480 --> 00:00:12,480
identify and track online users

8
00:00:12,480 --> 00:00:14,080
this paper was done in collaboration

9
00:00:14,080 --> 00:00:15,519
with my colleagues pierre

10
00:00:15,519 --> 00:00:18,240
walter and roma to give an overview of

11
00:00:18,240 --> 00:00:19,199
the presentation

12
00:00:19,199 --> 00:00:21,039
i'll start by giving a short intro to

13
00:00:21,039 --> 00:00:22,240
browser cache

14
00:00:22,240 --> 00:00:23,920
then present our attack along with its

15
00:00:23,920 --> 00:00:25,439
empirical evaluation

16
00:00:25,439 --> 00:00:27,199
and talk about the privacy implications

17
00:00:27,199 --> 00:00:28,640
of our attack

18
00:00:28,640 --> 00:00:30,560
finally i'll propose a few differences

19
00:00:30,560 --> 00:00:33,040
and then conclude the presentation

20
00:00:33,040 --> 00:00:34,880
all the modern browsers employ browser

21
00:00:34,880 --> 00:00:37,040
caches to optimize page loads and reduce

22
00:00:37,040 --> 00:00:38,079
network load

23
00:00:38,079 --> 00:00:40,079
by saving a local copy of static and

24
00:00:40,079 --> 00:00:42,160
frequently changed resources

25
00:00:42,160 --> 00:00:44,079
websites use expires and cache control

26
00:00:44,079 --> 00:00:45,920
headers to instruct the browsers on how

27
00:00:45,920 --> 00:00:48,079
to handle their caches

28
00:00:48,079 --> 00:00:51,120
expires http header is a pre-http 1.1

29
00:00:51,120 --> 00:00:51,840
header

30
00:00:51,840 --> 00:00:54,000
and simply denotes expiry date in future

31
00:00:54,000 --> 00:00:56,160
in the gmt format

32
00:00:56,160 --> 00:00:57,840
cache control header was introduced in

33
00:00:57,840 --> 00:00:59,359
http 1.1

34
00:00:59,359 --> 00:01:01,440
and it was meant to replace expires

35
00:01:01,440 --> 00:01:03,600
header as it gives the website owners

36
00:01:03,600 --> 00:01:05,600
much more fine-grained control using its

37
00:01:05,600 --> 00:01:09,280
various directives such as max age

38
00:01:09,760 --> 00:01:11,600
so here is a sample response header for

39
00:01:11,600 --> 00:01:13,360
an image whenever a client makes a

40
00:01:13,360 --> 00:01:15,200
request to the web server for an image

41
00:01:15,200 --> 00:01:16,880
this is what the web server

42
00:01:16,880 --> 00:01:19,200
returns informs of the header we can see

43
00:01:19,200 --> 00:01:20,960
the headers include access controller

44
00:01:20,960 --> 00:01:23,840
origin expose header content type says

45
00:01:23,840 --> 00:01:24,960
it's an image

46
00:01:24,960 --> 00:01:26,799
it also has a date header which shows

47
00:01:26,799 --> 00:01:29,119
the time when the resource was requested

48
00:01:29,119 --> 00:01:31,040
furthermore it has an expires header so

49
00:01:31,040 --> 00:01:32,560
the resource here is set to expire at

50
00:01:32,560 --> 00:01:33,920
some future date

51
00:01:33,920 --> 00:01:35,520
now if we could just read this date

52
00:01:35,520 --> 00:01:37,119
header we'll know when the resource was

53
00:01:37,119 --> 00:01:38,720
requested by the client

54
00:01:38,720 --> 00:01:40,479
there is a method called get all

55
00:01:40,479 --> 00:01:42,720
response headers which returns us a list

56
00:01:42,720 --> 00:01:45,200
of all response headers for a resource

57
00:01:45,200 --> 00:01:47,439
but here's the issue since we want to

58
00:01:47,439 --> 00:01:49,520
learn when a user visited a website

59
00:01:49,520 --> 00:01:51,280
these resources are all cross origin

60
00:01:51,280 --> 00:01:52,880
hence we need to make cross-origin

61
00:01:52,880 --> 00:01:55,280
requests now browsers have a

62
00:01:55,280 --> 00:01:56,799
security mechanism called the same

63
00:01:56,799 --> 00:01:58,719
origin policy which protects against

64
00:01:58,719 --> 00:02:00,560
cross-origin vulnerability

65
00:02:00,560 --> 00:02:02,560
however there are legitimate reasons to

66
00:02:02,560 --> 00:02:04,240
make cross-origin requests

67
00:02:04,240 --> 00:02:06,840
such as for third-party analytics fonts

68
00:02:06,840 --> 00:02:08,080
etc

69
00:02:08,080 --> 00:02:11,200
hence cards exist as a relaxation of

70
00:02:11,200 --> 00:02:13,599
same origin policy cars allows a

71
00:02:13,599 --> 00:02:15,280
resource from one origin to interact in

72
00:02:15,280 --> 00:02:16,720
the context of a different origin

73
00:02:16,720 --> 00:02:17,599
furthermore

74
00:02:17,599 --> 00:02:19,360
browsers rely on access controller

75
00:02:19,360 --> 00:02:21,280
origin header to decide if there is

76
00:02:21,280 --> 00:02:22,640
a response can be shared with the

77
00:02:22,640 --> 00:02:24,879
requesting code when the value of this

78
00:02:24,879 --> 00:02:26,239
header is

79
00:02:26,239 --> 00:02:28,720
set to a wildcard star it tells the

80
00:02:28,720 --> 00:02:30,400
browsers to allow requesting code from

81
00:02:30,400 --> 00:02:32,640
any origin to access this resource

82
00:02:32,640 --> 00:02:34,319
so now we just need to find resources

83
00:02:34,319 --> 00:02:35,920
which have access control allow origin

84
00:02:35,920 --> 00:02:36,959
set to start

85
00:02:36,959 --> 00:02:38,560
and we should have access to the date

86
00:02:38,560 --> 00:02:40,080
value correct

87
00:02:40,080 --> 00:02:42,000
well not really since the date header is

88
00:02:42,000 --> 00:02:43,599
not course safe listed

89
00:02:43,599 --> 00:02:45,599
which means that the browser will filter

90
00:02:45,599 --> 00:02:48,080
it out when processing a course response

91
00:02:48,080 --> 00:02:49,760
so we need to find some other way to

92
00:02:49,760 --> 00:02:51,440
extract the value of the date header as

93
00:02:51,440 --> 00:02:53,440
we do not have access to it

94
00:02:53,440 --> 00:02:55,200
notice that cache control and expires

95
00:02:55,200 --> 00:02:56,879
headers are safe listed

96
00:02:56,879 --> 00:02:59,040
which forms the basis of our attack

97
00:02:59,040 --> 00:03:00,400
let's just have a look at the response

98
00:03:00,400 --> 00:03:02,800
headers of the same resource as before

99
00:03:02,800 --> 00:03:04,480
but this time we request it multiple

100
00:03:04,480 --> 00:03:07,440
times after clearing the cache

101
00:03:07,440 --> 00:03:10,480
so once we request this uh resource

102
00:03:10,480 --> 00:03:12,959
after five minutes then we clear the

103
00:03:12,959 --> 00:03:14,720
cache then we request the same resource

104
00:03:14,720 --> 00:03:16,800
again after 10 minutes

105
00:03:16,800 --> 00:03:19,200
do you see the pattern the date and

106
00:03:19,200 --> 00:03:20,159
expires headers

107
00:03:20,159 --> 00:03:22,000
always have a difference of 24 hours in

108
00:03:22,000 --> 00:03:24,239
this case so if we know the value of the

109
00:03:24,239 --> 00:03:26,400
expires header we can simply subtract

110
00:03:26,400 --> 00:03:28,560
24 hours from it and get the value of

111
00:03:28,560 --> 00:03:30,400
the date header right

112
00:03:30,400 --> 00:03:32,560
that's the attack in a nutshell we find

113
00:03:32,560 --> 00:03:34,400
resources which show this pattern where

114
00:03:34,400 --> 00:03:36,159
cash and the date headers are consistent

115
00:03:36,159 --> 00:03:37,280
with respect to time

116
00:03:37,280 --> 00:03:39,840
so this uh picture gives a very simple

117
00:03:39,840 --> 00:03:40,640
overview of

118
00:03:40,640 --> 00:03:42,959
how our attack looks like a victim is

119
00:03:42,959 --> 00:03:44,560
led to a controlled web page

120
00:03:44,560 --> 00:03:46,959
that is step one that will make requests

121
00:03:46,959 --> 00:03:49,280
to make to one or more online resources

122
00:03:49,280 --> 00:03:51,840
on step two these resources are hosted

123
00:03:51,840 --> 00:03:53,439
either on the attacker's domain or an

124
00:03:53,439 --> 00:03:54,560
external one

125
00:03:54,560 --> 00:03:56,080
the attacker server then collects

126
00:03:56,080 --> 00:03:58,159
specific http headers namely cache

127
00:03:58,159 --> 00:03:59,680
control and expires

128
00:03:59,680 --> 00:04:01,200
from the victim to calculate the times

129
00:04:01,200 --> 00:04:02,560
when each resource was cached in the

130
00:04:02,560 --> 00:04:03,200
browser

131
00:04:03,200 --> 00:04:05,439
and then this time could be used to

132
00:04:05,439 --> 00:04:06,879
instrument attacks which we will talk

133
00:04:06,879 --> 00:04:08,799
about later in the presentation

134
00:04:08,799 --> 00:04:10,959
so let's talk about why this attack

135
00:04:10,959 --> 00:04:12,000
works

136
00:04:12,000 --> 00:04:14,400
so browsers employ many security

137
00:04:14,400 --> 00:04:16,000
mechanisms such as

138
00:04:16,000 --> 00:04:18,639
sop csp or course to control with

139
00:04:18,639 --> 00:04:19,440
precision

140
00:04:19,440 --> 00:04:21,120
what can be loaded and executed in the

141
00:04:21,120 --> 00:04:23,360
browser despite these mechanisms in

142
00:04:23,360 --> 00:04:25,040
place it is still possible to learn the

143
00:04:25,040 --> 00:04:27,440
exact time when a resource was cached

144
00:04:27,440 --> 00:04:29,360
these are the three inside which makes

145
00:04:29,360 --> 00:04:31,040
our attack possible

146
00:04:31,040 --> 00:04:32,639
the first one is browser caches are

147
00:04:32,639 --> 00:04:35,120
single keyed expires and cache control

148
00:04:35,120 --> 00:04:36,880
response headers are safe listed

149
00:04:36,880 --> 00:04:39,759
date header is not response headers are

150
00:04:39,759 --> 00:04:42,080
also cached along with the resource when

151
00:04:42,080 --> 00:04:43,840
course processes response headers it

152
00:04:43,840 --> 00:04:45,680
filters many sensitive headers and

153
00:04:45,680 --> 00:04:47,759
does not allow a core script access to

154
00:04:47,759 --> 00:04:49,360
these headers like date

155
00:04:49,360 --> 00:04:50,880
let's talk about date value extraction

156
00:04:50,880 --> 00:04:52,960
now so servers use one of the two

157
00:04:52,960 --> 00:04:54,160
following behaviors to manage the

158
00:04:54,160 --> 00:04:56,000
freshness of the resources

159
00:04:56,000 --> 00:04:57,919
they either use fixed expiry date or

160
00:04:57,919 --> 00:05:00,160
fixed expiry duration

161
00:05:00,160 --> 00:05:03,199
let's talk about fixed expiry date so if

162
00:05:03,199 --> 00:05:05,039
we look at this

163
00:05:05,039 --> 00:05:07,440
example here these two requests were

164
00:05:07,440 --> 00:05:09,440
made one minute apart

165
00:05:09,440 --> 00:05:12,560
by two users uh we can see from the uh

166
00:05:12,560 --> 00:05:14,320
example the difference of 60 seconds

167
00:05:14,320 --> 00:05:15,360
between the two requests

168
00:05:15,360 --> 00:05:16,960
is directly reflected in the maxis

169
00:05:16,960 --> 00:05:18,639
directive for user two

170
00:05:18,639 --> 00:05:20,479
assuming that users do not all visit the

171
00:05:20,479 --> 00:05:22,800
website at the exact same second

172
00:05:22,800 --> 00:05:24,639
it is possible to rely on maxes to

173
00:05:24,639 --> 00:05:26,240
differentiate users

174
00:05:26,240 --> 00:05:27,680
once the attacker knows about the fixed

175
00:05:27,680 --> 00:05:29,680
expiry date of a particular resource

176
00:05:29,680 --> 00:05:30,880
they can calculate the time when a

177
00:05:30,880 --> 00:05:33,039
resource was cached by using this

178
00:05:33,039 --> 00:05:36,000
equation so in this case all the

179
00:05:36,000 --> 00:05:37,919
resources expire at the exact same date

180
00:05:37,919 --> 00:05:39,199
for all users

181
00:05:39,199 --> 00:05:41,039
and the cache control max age header is

182
00:05:41,039 --> 00:05:42,400
dynamically calculated

183
00:05:42,400 --> 00:05:45,440
so once we know the fixed expiry date we

184
00:05:45,440 --> 00:05:45,759
can

185
00:05:45,759 --> 00:05:47,680
subtract the cache control max age to

186
00:05:47,680 --> 00:05:48,880
get the date

187
00:05:48,880 --> 00:05:50,400
the other technique which the websites

188
00:05:50,400 --> 00:05:52,560
use is called fixed expiry duration

189
00:05:52,560 --> 00:05:54,639
and in this technique the resources

190
00:05:54,639 --> 00:05:56,319
expire in a fixed amount of seconds for

191
00:05:56,319 --> 00:05:57,199
every user

192
00:05:57,199 --> 00:05:58,880
expires headers is unique for each

193
00:05:58,880 --> 00:06:01,440
request so in this example

194
00:06:01,440 --> 00:06:03,440
both users have the exact same max age

195
00:06:03,440 --> 00:06:05,039
header and they each have a unique

196
00:06:05,039 --> 00:06:07,039
expires header

197
00:06:07,039 --> 00:06:09,120
so for tracking purposes getting the

198
00:06:09,120 --> 00:06:11,199
unique expired setters may be sufficient

199
00:06:11,199 --> 00:06:12,720
but if the attacker wants to know when

200
00:06:12,720 --> 00:06:14,240
the resource was put in the cache to

201
00:06:14,240 --> 00:06:16,240
build a behavioral profile of the user

202
00:06:16,240 --> 00:06:19,520
she can use the following formula

203
00:06:19,520 --> 00:06:21,600
so now we know how to extract the date

204
00:06:21,600 --> 00:06:23,600
from from a resource

205
00:06:23,600 --> 00:06:25,520
but before conducting the attack it is

206
00:06:25,520 --> 00:06:27,440
necessary to identify online resources

207
00:06:27,440 --> 00:06:28,639
that can be fetched

208
00:06:28,639 --> 00:06:30,639
or probed from any domain and either

209
00:06:30,639 --> 00:06:32,160
have a fixed expiry date or a fixed

210
00:06:32,160 --> 00:06:33,440
expiry duration

211
00:06:33,440 --> 00:06:35,759
thus we need to identify the resources

212
00:06:35,759 --> 00:06:37,520
which follow some rules

213
00:06:37,520 --> 00:06:39,840
and we call that vulnerable resource

214
00:06:39,840 --> 00:06:41,039
identification

215
00:06:41,039 --> 00:06:42,800
so to identify them we perform two

216
00:06:42,800 --> 00:06:44,560
crawls of the same websites at different

217
00:06:44,560 --> 00:06:46,080
times t1 and t2

218
00:06:46,080 --> 00:06:47,759
and collect the response headers of all

219
00:06:47,759 --> 00:06:49,680
images css and javascript files

220
00:06:49,680 --> 00:06:52,479
requested on the page

221
00:06:52,479 --> 00:06:54,240
this slide shows the simple algorithm we

222
00:06:54,240 --> 00:06:55,680
use to detect servers with the

223
00:06:55,680 --> 00:06:58,880
vulnerable configurations

224
00:06:58,880 --> 00:07:00,319
it should be noted that in order to

225
00:07:00,319 --> 00:07:02,000
conduct this attack over a long period

226
00:07:02,000 --> 00:07:04,080
of time an attacker must perform regular

227
00:07:04,080 --> 00:07:05,520
clock crawls to maintain a list of

228
00:07:05,520 --> 00:07:08,639
vulnerable resources

229
00:07:09,759 --> 00:07:11,599
in the paper we also present empirical

230
00:07:11,599 --> 00:07:13,280
evaluation of our attack

231
00:07:13,280 --> 00:07:15,280
and we performed a crawl of top hundred

232
00:07:15,280 --> 00:07:17,919
thousand websites from tranco list

233
00:07:17,919 --> 00:07:19,520
not only did we visit the homepage of

234
00:07:19,520 --> 00:07:22,000
these websites but also five sub pages

235
00:07:22,000 --> 00:07:24,000
and uh we instrumented this crawl using

236
00:07:24,000 --> 00:07:25,520
uh headless chrome instrumented with

237
00:07:25,520 --> 00:07:27,039
puppeteer

238
00:07:27,039 --> 00:07:30,400
we were able to crawl about 000 web

239
00:07:30,400 --> 00:07:33,919
web pages on 78 000 websites on

240
00:07:33,919 --> 00:07:37,759
2nd of june 2020 and uh about 391 000

241
00:07:37,759 --> 00:07:39,360
web pages on 78

242
00:07:39,360 --> 00:07:42,319
623 websites on the third june 2020 so

243
00:07:42,319 --> 00:07:43,840
both these crawls were made

244
00:07:43,840 --> 00:07:47,758
24 hours apart from each other

245
00:07:48,160 --> 00:07:50,319
so we uh after these crawls we were able

246
00:07:50,319 --> 00:07:52,080
to collect about uh 12.6 million

247
00:07:52,080 --> 00:07:53,360
resources

248
00:07:53,360 --> 00:07:55,280
from the crawl on second june and about

249
00:07:55,280 --> 00:07:57,360
12.5 million resources on the

250
00:07:57,360 --> 00:08:00,560
from a crawl on third of june 2020

251
00:08:00,560 --> 00:08:02,800
so uh from both these crawls we look at

252
00:08:02,800 --> 00:08:03,919
the common resources

253
00:08:03,919 --> 00:08:05,599
uh because some of them because we can

254
00:08:05,599 --> 00:08:07,520
see that the numbers on second

255
00:08:07,520 --> 00:08:09,440
third june do not match this could be

256
00:08:09,440 --> 00:08:10,960
because of several reasons such as if

257
00:08:10,960 --> 00:08:12,479
page does not exist anymore

258
00:08:12,479 --> 00:08:14,479
or the resource does not exist anymore

259
00:08:14,479 --> 00:08:16,479
so we only look at the resources which

260
00:08:16,479 --> 00:08:19,039
are common between both the crawls

261
00:08:19,039 --> 00:08:21,759
so on on both the days uh from a crawl

262
00:08:21,759 --> 00:08:22,319
about

263
00:08:22,319 --> 00:08:25,440
76 000 websites were common

264
00:08:25,440 --> 00:08:28,080
from those websites about 382 webpages

265
00:08:28,080 --> 00:08:29,039
for common

266
00:08:29,039 --> 00:08:31,280
and about 10.6 million resources were

267
00:08:31,280 --> 00:08:33,279
found to be common in both the crawls

268
00:08:33,279 --> 00:08:35,839
from these 10.6 million resources only

269
00:08:35,839 --> 00:08:37,599
about 3.1 million

270
00:08:37,599 --> 00:08:39,519
resources were distinct because many of

271
00:08:39,519 --> 00:08:41,279
those resources were present in multiple

272
00:08:41,279 --> 00:08:42,799
websites

273
00:08:42,799 --> 00:08:44,560
so in our data set we found that many

274
00:08:44,560 --> 00:08:46,320
resources were present in multiple pages

275
00:08:46,320 --> 00:08:47,200
and websites

276
00:08:47,200 --> 00:08:48,800
so we analyzed the resources to figure

277
00:08:48,800 --> 00:08:50,320
out how many of them were shared with

278
00:08:50,320 --> 00:08:51,600
other websites

279
00:08:51,600 --> 00:08:53,519
for instance the table shows that about

280
00:08:53,519 --> 00:08:55,760
21 resources were seen in more than 1000

281
00:08:55,760 --> 00:08:56,959
websites

282
00:08:56,959 --> 00:08:58,640
all of these 21 resources can be

283
00:08:58,640 --> 00:09:00,640
categorized as analytics

284
00:09:00,640 --> 00:09:03,200
these resources include fb events.js and

285
00:09:03,200 --> 00:09:04,800
google analytics script

286
00:09:04,800 --> 00:09:08,160
add this widget ads by google and etc

287
00:09:08,160 --> 00:09:10,320
interestingly google analytics was the

288
00:09:10,320 --> 00:09:12,080
most commonly used resource and it was

289
00:09:12,080 --> 00:09:14,000
present in about 18 000 websites in our

290
00:09:14,000 --> 00:09:16,399
dataset

291
00:09:16,399 --> 00:09:19,600
once we have a data set of resources we

292
00:09:19,600 --> 00:09:21,200
perform some analysis

293
00:09:21,200 --> 00:09:23,040
on these resources and to figure out how

294
00:09:23,040 --> 00:09:24,640
many of them were vulnerable to our

295
00:09:24,640 --> 00:09:26,080
attack

296
00:09:26,080 --> 00:09:28,560
so this table presents a number of

297
00:09:28,560 --> 00:09:29,200
resources

298
00:09:29,200 --> 00:09:31,120
which followed a specific rule for

299
00:09:31,120 --> 00:09:32,800
example about 600 000

300
00:09:32,800 --> 00:09:34,720
resources had access control allow

301
00:09:34,720 --> 00:09:36,959
origin set to star

302
00:09:36,959 --> 00:09:39,519
so as i presented earlier in the in the

303
00:09:39,519 --> 00:09:40,560
slides uh

304
00:09:40,560 --> 00:09:43,200
we use the same algorithm we found that

305
00:09:43,200 --> 00:09:44,640
about 91 000

306
00:09:44,640 --> 00:09:47,920
resources were vulnerable to our attack

307
00:09:47,920 --> 00:09:49,519
interesting thing to note from here is

308
00:09:49,519 --> 00:09:51,600
that our data set has about 1.5 million

309
00:09:51,600 --> 00:09:53,600
resources that have the expires header

310
00:09:53,600 --> 00:09:55,279
this shows the extent of the usage of

311
00:09:55,279 --> 00:09:56,800
the expires header even though it has

312
00:09:56,800 --> 00:09:58,240
been deprecated and replaced by the

313
00:09:58,240 --> 00:10:01,760
cache control max says directive

314
00:10:02,000 --> 00:10:03,680
to better compare which resources are

315
00:10:03,680 --> 00:10:05,040
more vulnerable to our attack

316
00:10:05,040 --> 00:10:06,720
we define a metric called vulnerability

317
00:10:06,720 --> 00:10:08,880
window it denotes the amount of time

318
00:10:08,880 --> 00:10:10,240
until which our probing script can

319
00:10:10,240 --> 00:10:13,040
detect the presence of a cache resource

320
00:10:13,040 --> 00:10:14,640
this is the same as the duration for

321
00:10:14,640 --> 00:10:16,839
which a resource is cached in the

322
00:10:16,839 --> 00:10:19,279
browser

323
00:10:19,279 --> 00:10:21,200
in this figure we plot a cdf of the

324
00:10:21,200 --> 00:10:23,360
vulnerability windows of vulnerable js

325
00:10:23,360 --> 00:10:26,079
css and dbg resources in our data set

326
00:10:26,079 --> 00:10:28,160
the x axis has a log scale and the first

327
00:10:28,160 --> 00:10:30,000
dotted vertical line depicts 7 days

328
00:10:30,000 --> 00:10:32,480
while the second one depicts 30 days

329
00:10:32,480 --> 00:10:34,640
from the figure we can see that about 30

330
00:10:34,640 --> 00:10:36,079
percent of vulnerable images

331
00:10:36,079 --> 00:10:38,560
35 percent of vulnerable javascripts and

332
00:10:38,560 --> 00:10:40,640
30 percent of vulnerable css resources

333
00:10:40,640 --> 00:10:41,600
have a vw

334
00:10:41,600 --> 00:10:44,399
greater than 100 days which means that

335
00:10:44,399 --> 00:10:46,880
if a user visits a website that leads to

336
00:10:46,880 --> 00:10:49,040
one of these resources being cached they

337
00:10:49,040 --> 00:10:50,560
might remain cached for at least the

338
00:10:50,560 --> 00:10:52,240
next hundred days

339
00:10:52,240 --> 00:10:54,240
we believe the vulnerability windows

340
00:10:54,240 --> 00:10:56,399
depend on the use case of the resources

341
00:10:56,399 --> 00:10:58,720
for instance looking at image resources

342
00:10:58,720 --> 00:11:00,560
nearly 65 percent of them have a

343
00:11:00,560 --> 00:11:02,800
vulnerability window less than 30 days

344
00:11:02,800 --> 00:11:04,880
and 30 of them have a vulnerability

345
00:11:04,880 --> 00:11:06,160
window greater than 100

346
00:11:06,160 --> 00:11:08,320
days which means that there are only

347
00:11:08,320 --> 00:11:10,079
about 5 percent of vulnerable images

348
00:11:10,079 --> 00:11:12,079
which have a vulnerability window

349
00:11:12,079 --> 00:11:14,640
between 30 days and 100 days the reason

350
00:11:14,640 --> 00:11:16,240
being there are some images which are

351
00:11:16,240 --> 00:11:18,160
specific to a page or are part of a

352
00:11:18,160 --> 00:11:20,959
dynamic page for example an image of a

353
00:11:20,959 --> 00:11:22,720
politician on news website's

354
00:11:22,720 --> 00:11:25,120
front page on a given day whereas there

355
00:11:25,120 --> 00:11:26,800
are some images which are shared by

356
00:11:26,800 --> 00:11:28,079
other pages of the website

357
00:11:28,079 --> 00:11:29,920
and are expected to remain unchanged for

358
00:11:29,920 --> 00:11:31,600
longer duration

359
00:11:31,600 --> 00:11:33,839
for example the logo of the website for

360
00:11:33,839 --> 00:11:35,760
images that are present on all pages it

361
00:11:35,760 --> 00:11:37,519
makes sense for the servers to fix a

362
00:11:37,519 --> 00:11:38,880
long expiry date

363
00:11:38,880 --> 00:11:40,320
whereas the website does not want to

364
00:11:40,320 --> 00:11:41,839
take up space in the browser cache for

365
00:11:41,839 --> 00:11:43,360
too long for resources which are

366
00:11:43,360 --> 00:11:44,880
specific to a page

367
00:11:44,880 --> 00:11:47,279
or are part of a dynamic page thus we

368
00:11:47,279 --> 00:11:48,640
believe that images that have a

369
00:11:48,640 --> 00:11:50,399
vulnerability window of greater than 30

370
00:11:50,399 --> 00:11:51,120
days

371
00:11:51,120 --> 00:11:53,120
are those which are mostly site-wide

372
00:11:53,120 --> 00:11:57,760
resources such as logo

373
00:11:57,760 --> 00:11:59,360
we also did a performance evaluation of

374
00:11:59,360 --> 00:12:01,600
the attack across multiple environments

375
00:12:01,600 --> 00:12:04,000
and present the results in this table

376
00:12:04,000 --> 00:12:05,839
apart from webkit-based browsers where

377
00:12:05,839 --> 00:12:07,839
our attack does not succeed because

378
00:12:07,839 --> 00:12:10,079
it already has a cache isolation by

379
00:12:10,079 --> 00:12:10,880
default

380
00:12:10,880 --> 00:12:12,560
the attack succeeds in all other major

381
00:12:12,560 --> 00:12:14,560
browsers on mobile and desktop

382
00:12:14,560 --> 00:12:16,639
such as chrome firefox brave and even

383
00:12:16,639 --> 00:12:18,240
tor browser

384
00:12:18,240 --> 00:12:20,000
in a sense an attacker could feasibly

385
00:12:20,000 --> 00:12:22,240
check thousands of resources in under 30

386
00:12:22,240 --> 00:12:24,000
seconds without having any noticeable

387
00:12:24,000 --> 00:12:25,920
impact on the device or the web page

388
00:12:25,920 --> 00:12:28,000
performance another important point to

389
00:12:28,000 --> 00:12:29,519
note here is that our proven script can

390
00:12:29,519 --> 00:12:31,279
be instrumented with either head or get

391
00:12:31,279 --> 00:12:32,000
queries

392
00:12:32,000 --> 00:12:33,760
to test whether resource is in cash or

393
00:12:33,760 --> 00:12:35,839
not and headquarters are much faster

394
00:12:35,839 --> 00:12:37,440
than get queries and are significantly

395
00:12:37,440 --> 00:12:38,320
less impacted

396
00:12:38,320 --> 00:12:41,279
by the network speed

397
00:12:41,440 --> 00:12:43,279
we also look at the privacy implications

398
00:12:43,279 --> 00:12:45,680
of our attack by giving two examples

399
00:12:45,680 --> 00:12:47,760
of how our attack could be used the

400
00:12:47,760 --> 00:12:49,839
first one being history sniffing

401
00:12:49,839 --> 00:12:51,440
which simply means identical access of

402
00:12:51,440 --> 00:12:53,360
browser history through probing

403
00:12:53,360 --> 00:12:55,040
some of the popular techniques include

404
00:12:55,040 --> 00:12:57,760
css selectors and cache based attacks

405
00:12:57,760 --> 00:12:59,600
however there are two key differences

406
00:12:59,600 --> 00:13:01,200
between r attack and the previously

407
00:13:01,200 --> 00:13:02,399
known attacks

408
00:13:02,399 --> 00:13:04,399
unlike our attack which does not rely on

409
00:13:04,399 --> 00:13:05,760
any timing measurement

410
00:13:05,760 --> 00:13:07,360
all of the previous cash-based history

411
00:13:07,360 --> 00:13:09,440
sniffing attacks can be classified as

412
00:13:09,440 --> 00:13:11,200
timing attacks where the attacks rely on

413
00:13:11,200 --> 00:13:12,560
the difference in the time it takes to

414
00:13:12,560 --> 00:13:14,160
download the resource on the servers

415
00:13:14,160 --> 00:13:17,040
directly or using a cached copy this

416
00:13:17,040 --> 00:13:18,639
makes our attack immune to various

417
00:13:18,639 --> 00:13:20,320
defenses in modern browsers such as

418
00:13:20,320 --> 00:13:22,079
lower resolution and jitters in browser

419
00:13:22,079 --> 00:13:23,440
timers

420
00:13:23,440 --> 00:13:24,880
the second difference being that our

421
00:13:24,880 --> 00:13:26,880
method succeeds in extracting the

422
00:13:26,880 --> 00:13:29,200
exact time when resource was cached

423
00:13:29,200 --> 00:13:30,320
unlike other

424
00:13:30,320 --> 00:13:32,320
sniffing attacks which can only learn if

425
00:13:32,320 --> 00:13:34,320
a resource is cached or not

426
00:13:34,320 --> 00:13:35,920
this presents some serious privacy

427
00:13:35,920 --> 00:13:37,760
implications as this information can be

428
00:13:37,760 --> 00:13:39,199
leveraged to build the timeline of the

429
00:13:39,199 --> 00:13:40,639
user's visit

430
00:13:40,639 --> 00:13:42,240
we can learn if a visit to a particular

431
00:13:42,240 --> 00:13:44,160
domain was just a one-off or if it was

432
00:13:44,160 --> 00:13:45,120
repeated

433
00:13:45,120 --> 00:13:46,639
and part of the user daily routine

434
00:13:46,639 --> 00:13:48,240
showing a keen interest to the topics

435
00:13:48,240 --> 00:13:51,040
discussed on the website pages

436
00:13:51,040 --> 00:13:52,959
this information can also be abused to

437
00:13:52,959 --> 00:13:54,560
better target the user

438
00:13:54,560 --> 00:13:56,240
and understand her preferred time for

439
00:13:56,240 --> 00:13:58,800
reading news watching videos or shopping

440
00:13:58,800 --> 00:14:01,040
all in all knowing if a page was visited

441
00:14:01,040 --> 00:14:02,639
is already concerning

442
00:14:02,639 --> 00:14:04,240
but knowing exactly when adds an

443
00:14:04,240 --> 00:14:06,000
additional layer of intrusiveness that

444
00:14:06,000 --> 00:14:07,279
has not been seen before in more

445
00:14:07,279 --> 00:14:08,800
traditional sniffing

446
00:14:08,800 --> 00:14:11,519
we also look at the vulnerable websites

447
00:14:11,519 --> 00:14:12,720
in our data set

448
00:14:12,720 --> 00:14:14,560
and since not all vulnerable resources

449
00:14:14,560 --> 00:14:16,000
can be associated with individual

450
00:14:16,000 --> 00:14:17,440
websites as there could be some

451
00:14:17,440 --> 00:14:18,959
resources which are shared by multiple

452
00:14:18,959 --> 00:14:20,240
websites

453
00:14:20,240 --> 00:14:23,040
so from our data set about 87 000 uh

454
00:14:23,040 --> 00:14:24,560
resources represented only

455
00:14:24,560 --> 00:14:26,480
one website that means that each of

456
00:14:26,480 --> 00:14:28,560
these resources could be

457
00:14:28,560 --> 00:14:31,720
associated with a single website about

458
00:14:31,720 --> 00:14:34,240
8456 websites can be brought with just

459
00:14:34,240 --> 00:14:36,079
one resource

460
00:14:36,079 --> 00:14:38,720
and we also look at the ranking of these

461
00:14:38,720 --> 00:14:39,920
vulnerable websites

462
00:14:39,920 --> 00:14:42,160
and our results show that the vulnerable

463
00:14:42,160 --> 00:14:44,000
websites are somewhat evenly distributed

464
00:14:44,000 --> 00:14:46,320
in the tranquil ranking popular websites

465
00:14:46,320 --> 00:14:47,839
are also vulnerable and the popularity

466
00:14:47,839 --> 00:14:49,360
of a website does not appear to have a

467
00:14:49,360 --> 00:14:51,360
huge impact on its vulnerability to our

468
00:14:51,360 --> 00:14:53,680
attack

469
00:14:55,199 --> 00:14:57,120
not only did we look at the vulnerable

470
00:14:57,120 --> 00:15:00,399
websites but also vulnerable subpages

471
00:15:00,399 --> 00:15:03,199
in our data set about 9000 sub pages

472
00:15:03,199 --> 00:15:06,399
belonging to 5574 websites

473
00:15:06,399 --> 00:15:08,399
have at least one vulnerable resource

474
00:15:08,399 --> 00:15:10,079
unique to them

475
00:15:10,079 --> 00:15:13,120
blogs news provides articles besides

476
00:15:13,120 --> 00:15:15,519
are the major chunks in these sub pages

477
00:15:15,519 --> 00:15:17,440
since these are the websites which

478
00:15:17,440 --> 00:15:19,839
tend to have much more unique content in

479
00:15:19,839 --> 00:15:20,800
these pages

480
00:15:20,800 --> 00:15:24,000
such as image linked to a particular

481
00:15:24,000 --> 00:15:24,800
article

482
00:15:24,800 --> 00:15:27,920
video attached to a to a blog this

483
00:15:27,920 --> 00:15:30,480
leads to behavioral detection because we

484
00:15:30,480 --> 00:15:31,360
can detect

485
00:15:31,360 --> 00:15:33,519
particular articles read by the user

486
00:15:33,519 --> 00:15:35,120
which could lead to

487
00:15:35,120 --> 00:15:36,959
their political leanings their sexual

488
00:15:36,959 --> 00:15:38,720
orientation their financial leanings

489
00:15:38,720 --> 00:15:41,759
and etc we also did a case study on news

490
00:15:41,759 --> 00:15:42,720
websites

491
00:15:42,720 --> 00:15:44,639
so this case study demonstrates

492
00:15:44,639 --> 00:15:46,959
feasibility of attack on news websites

493
00:15:46,959 --> 00:15:49,519
so we manually visited five popular news

494
00:15:49,519 --> 00:15:50,959
websites namely msn

495
00:15:50,959 --> 00:15:54,639
cnn cnbc nbc news and amazon pc

496
00:15:54,639 --> 00:15:57,040
uh all of these websites are very highly

497
00:15:57,040 --> 00:15:57,759
ranked on

498
00:15:57,759 --> 00:16:00,240
tranco list and uh we visited all these

499
00:16:00,240 --> 00:16:01,839
websites on uh manually on

500
00:16:01,839 --> 00:16:04,880
31st of august 2020. each website has

501
00:16:04,880 --> 00:16:05,519
pages with

502
00:16:05,519 --> 00:16:07,759
unique images so all these websites had

503
00:16:07,759 --> 00:16:08,959
news articles

504
00:16:08,959 --> 00:16:10,560
and whenever you visit those news

505
00:16:10,560 --> 00:16:12,959
articles um all of these websites

506
00:16:12,959 --> 00:16:14,959
all of these news articles had at least

507
00:16:14,959 --> 00:16:16,560
one unique image

508
00:16:16,560 --> 00:16:19,199
and all and these unique images when

509
00:16:19,199 --> 00:16:20,720
they were cached in a browser

510
00:16:20,720 --> 00:16:22,480
their vulnerability window ranged from

511
00:16:22,480 --> 00:16:24,959
one hour for cnn.com to about 90 days

512
00:16:24,959 --> 00:16:25,560
for

513
00:16:25,560 --> 00:16:28,240
nbcnews.com so this case study

514
00:16:28,240 --> 00:16:30,160
highlights the seriousness of the attack

515
00:16:30,160 --> 00:16:32,399
because this attack can be used to

516
00:16:32,399 --> 00:16:33,519
extract what

517
00:16:33,519 --> 00:16:35,440
articles somebody read on these five

518
00:16:35,440 --> 00:16:38,320
popular websites

519
00:16:39,279 --> 00:16:41,360
another use case of our attack is user

520
00:16:41,360 --> 00:16:43,600
tracking so user tracking basically

521
00:16:43,600 --> 00:16:44,079
means

522
00:16:44,079 --> 00:16:46,480
you create a unique identifier for a

523
00:16:46,480 --> 00:16:47,279
user

524
00:16:47,279 --> 00:16:49,199
and you can use the identifier to track

525
00:16:49,199 --> 00:16:51,600
user visits on multiple websites

526
00:16:51,600 --> 00:16:53,600
so identifier is created by combining

527
00:16:53,600 --> 00:16:54,800
the times when

528
00:16:54,800 --> 00:16:56,399
specific resources were cached in the

529
00:16:56,399 --> 00:16:58,000
user's browser so

530
00:16:58,000 --> 00:17:00,959
91 755 vulnerable resources which we

531
00:17:00,959 --> 00:17:02,079
found in our dataset

532
00:17:02,079 --> 00:17:03,120
they can be used in different

533
00:17:03,120 --> 00:17:05,280
combinations to build a unique

534
00:17:05,280 --> 00:17:07,439
accommodation for each user

535
00:17:07,439 --> 00:17:09,839
however this uh is difficult to scale

536
00:17:09,839 --> 00:17:11,839
for high traffic websites because

537
00:17:11,839 --> 00:17:13,760
multiple users visit the website on the

538
00:17:13,760 --> 00:17:15,679
sa at the exact same time

539
00:17:15,679 --> 00:17:17,599
hence complex algorithms are required to

540
00:17:17,599 --> 00:17:19,119
pick different combinations of

541
00:17:19,119 --> 00:17:21,760
vulnerable resources we also talk about

542
00:17:21,760 --> 00:17:23,760
some possible defenses in the paper

543
00:17:23,760 --> 00:17:26,240
the first one being cache isolation and

544
00:17:26,240 --> 00:17:27,520
double keyed caches

545
00:17:27,520 --> 00:17:29,679
so this is the simplest defense and it

546
00:17:29,679 --> 00:17:31,280
has already been implemented

547
00:17:31,280 --> 00:17:34,400
in browsers such as safari double key

548
00:17:34,400 --> 00:17:36,720
cache basically means including the url

549
00:17:36,720 --> 00:17:37,679
of the resource

550
00:17:37,679 --> 00:17:39,919
and domain on which the request was made

551
00:17:39,919 --> 00:17:41,840
so instead of just keying it with the

552
00:17:41,840 --> 00:17:43,600
domain on which the request was made

553
00:17:43,600 --> 00:17:45,840
we also include the url of the resource

554
00:17:45,840 --> 00:17:46,720
safari is

555
00:17:46,720 --> 00:17:48,559
already using this etld plus one of the

556
00:17:48,559 --> 00:17:50,320
top level document as a second key since

557
00:17:50,320 --> 00:17:51,280
2013

558
00:17:51,280 --> 00:17:52,880
and hence this is the reason our attack

559
00:17:52,880 --> 00:17:56,160
does not succeed on safari

560
00:17:56,160 --> 00:17:57,919
triple key approach is also possible

561
00:17:57,919 --> 00:17:59,440
where subframe attacks could be

562
00:17:59,440 --> 00:18:00,960
prevented by using the frame on which

563
00:18:00,960 --> 00:18:02,960
the request was made

564
00:18:02,960 --> 00:18:05,120
however partitioning limits the

565
00:18:05,120 --> 00:18:06,960
reusability of third-party resources and

566
00:18:06,960 --> 00:18:07,679
it has

567
00:18:07,679 --> 00:18:10,960
some performance degradation as shown by

568
00:18:10,960 --> 00:18:12,240
experiments by the google

569
00:18:12,240 --> 00:18:13,919
chrome team overall network load

570
00:18:13,919 --> 00:18:15,919
increased by about three percent

571
00:18:15,919 --> 00:18:17,360
cache misses increased by about two

572
00:18:17,360 --> 00:18:19,679
percent finally to conclude

573
00:18:19,679 --> 00:18:21,520
in this paper we presented a novel cache

574
00:18:21,520 --> 00:18:23,440
attack which is not based on timing

575
00:18:23,440 --> 00:18:25,039
measurements and showed that caching

576
00:18:25,039 --> 00:18:25,760
headers

577
00:18:25,760 --> 00:18:28,640
can be used to sniff browsing history

578
00:18:28,640 --> 00:18:30,559
all major browsers except safari were

579
00:18:30,559 --> 00:18:32,080
found to be vulnerable

580
00:18:32,080 --> 00:18:34,080
and about 12 000 websites from trunk

581
00:18:34,080 --> 00:18:36,080
100k websites are susceptible to our

582
00:18:36,080 --> 00:18:36,960
attack

583
00:18:36,960 --> 00:18:38,880
in the end we believe that attack has

584
00:18:38,880 --> 00:18:40,640
serious privacy implications

585
00:18:40,640 --> 00:18:42,320
and major browser vendors need to roll

586
00:18:42,320 --> 00:18:44,000
out defense against this attack as soon

587
00:18:44,000 --> 00:18:45,039
as possible

588
00:18:45,039 --> 00:18:46,600
thank you and am now open to your

589
00:18:46,600 --> 00:18:49,600
questions

