1
00:00:02,240 --> 00:00:03,919
hello everyone i'm kostas and i'm going

2
00:00:03,919 --> 00:00:05,520
to present housewires a purely

3
00:00:05,520 --> 00:00:06,879
house-based train proof system

4
00:00:06,879 --> 00:00:08,320
applicable in settings for which there

5
00:00:08,320 --> 00:00:09,920
is a trusted third party that issues

6
00:00:09,920 --> 00:00:11,679
commitments over credentials

7
00:00:11,679 --> 00:00:13,920
i go by courses by the way and this is a

8
00:00:13,920 --> 00:00:15,679
joint work with sir kevin frederick and

9
00:00:15,679 --> 00:00:17,039
jolan

10
00:00:17,039 --> 00:00:18,240
we will start with the simplest

11
00:00:18,240 --> 00:00:19,600
application of hash wires which is

12
00:00:19,600 --> 00:00:20,880
proven that you are older than some

13
00:00:20,880 --> 00:00:21,680
fresh food

14
00:00:21,680 --> 00:00:24,400
and we will do that by basing our

15
00:00:24,400 --> 00:00:25,039
solution

16
00:00:25,039 --> 00:00:26,800
on top of frivolous and samir proposal

17
00:00:26,800 --> 00:00:28,160
in 1996

18
00:00:28,160 --> 00:00:29,920
and we gradually apply modifications to

19
00:00:29,920 --> 00:00:31,279
make the on uh

20
00:00:31,279 --> 00:00:33,360
like efficiency to locate we achieve

21
00:00:33,360 --> 00:00:34,640
this by introducing the minimum

22
00:00:34,640 --> 00:00:36,160
dominating partition

23
00:00:36,160 --> 00:00:37,680
algorithm and also some has based

24
00:00:37,680 --> 00:00:39,600
accumulators on top of the scheme

25
00:00:39,600 --> 00:00:41,200
uh regarding applications we will see

26
00:00:41,200 --> 00:00:43,120
some real-world cases of hash wires

27
00:00:43,120 --> 00:00:44,640
and compare it against zero knowledge

28
00:00:44,640 --> 00:00:46,079
proof schemes such as bulletproof and

29
00:00:46,079 --> 00:00:48,000
drop 16.

30
00:00:48,000 --> 00:00:49,760
so let's go back to the export example

31
00:00:49,760 --> 00:00:51,039
and let's assume that alice wants to

32
00:00:51,039 --> 00:00:52,719
prove the grocery store that is older

33
00:00:52,719 --> 00:00:53,600
donating

34
00:00:53,600 --> 00:00:55,120
on the right on the left side we have

35
00:00:55,120 --> 00:00:56,480
the government who is issuing a

36
00:00:56,480 --> 00:00:58,239
commitment over analysis page by just

37
00:00:58,239 --> 00:00:59,920
picking a random value part

38
00:00:59,920 --> 00:01:02,079
and then alice is able actually to prove

39
00:01:02,079 --> 00:01:03,920
for any threshold that c is older than

40
00:01:03,920 --> 00:01:04,479
this

41
00:01:04,479 --> 00:01:05,920
and this will succeed only if the

42
00:01:05,920 --> 00:01:08,159
threshold is less than or equal to x

43
00:01:08,159 --> 00:01:09,840
obviously the verifier should not play

44
00:01:09,840 --> 00:01:11,520
anything else except

45
00:01:11,520 --> 00:01:15,040
for for that statement um

46
00:01:15,040 --> 00:01:18,000
so how do we encode this in hashtags uh

47
00:01:18,000 --> 00:01:19,680
it's very easy let's focus on the right

48
00:01:19,680 --> 00:01:21,119
side where we have this uh

49
00:01:21,119 --> 00:01:23,520
assay here as we know the issuer knows

50
00:01:23,520 --> 00:01:24,479
the value r

51
00:01:24,479 --> 00:01:26,880
then they can easily create this hashtag

52
00:01:26,880 --> 00:01:29,119
like by success it has implications

53
00:01:29,119 --> 00:01:32,240
uh until they reach h to the x of r

54
00:01:32,240 --> 00:01:33,920
uh this means that the latest element is

55
00:01:33,920 --> 00:01:36,000
the commitment and how does this help

56
00:01:36,000 --> 00:01:37,680
it helps because by convention we feel

57
00:01:37,680 --> 00:01:39,040
that the commitment is correct

58
00:01:39,040 --> 00:01:40,880
under some value because the length of

59
00:01:40,880 --> 00:01:42,479
the chain is actually the real value

60
00:01:42,479 --> 00:01:43,600
you're encoding

61
00:01:43,600 --> 00:01:45,520
and now alice who also has access to the

62
00:01:45,520 --> 00:01:47,520
r value she can compute

63
00:01:47,520 --> 00:01:50,560
like the chain up to the h x minus t and

64
00:01:50,560 --> 00:01:52,880
then provide this as a proof to vote

65
00:01:52,880 --> 00:01:55,280
and what both will do bob will again

66
00:01:55,280 --> 00:01:55,920
continue

67
00:01:55,920 --> 00:01:58,960
uh to has uh this uh proof until he

68
00:01:58,960 --> 00:02:00,399
reaches their commitment

69
00:02:00,399 --> 00:02:03,600
and he is like 100 sure that alice had a

70
00:02:03,600 --> 00:02:06,000
long enough sail which is at least 18

71
00:02:06,000 --> 00:02:07,360
which means that alice is

72
00:02:07,360 --> 00:02:11,120
definitely uh uh 18 years old or more

73
00:02:11,120 --> 00:02:12,640
as you can see there is a commitment

74
00:02:12,640 --> 00:02:13,920
conditional sadness here and the

75
00:02:13,920 --> 00:02:15,520
witnessing distinguishability

76
00:02:15,520 --> 00:02:18,080
because both learns nothing else uh

77
00:02:18,080 --> 00:02:20,239
about alice's face however it's not the

78
00:02:20,239 --> 00:02:22,160
real zero knowledge key because

79
00:02:22,160 --> 00:02:23,840
there is some link which doesn't affect

80
00:02:23,840 --> 00:02:25,200
our application but

81
00:02:25,200 --> 00:02:27,440
in the strict zero knowledge proof like

82
00:02:27,440 --> 00:02:28,640
terms

83
00:02:28,640 --> 00:02:30,080
the verifier learns the pretty much of

84
00:02:30,080 --> 00:02:32,640
the commitment also you have to

85
00:02:32,640 --> 00:02:35,760
realize that in our particular case

86
00:02:35,760 --> 00:02:37,440
the verifier does not provide any random

87
00:02:37,440 --> 00:02:39,280
challenges nor do we use any fiat zombie

88
00:02:39,280 --> 00:02:40,800
transformation as other zero knowledge

89
00:02:40,800 --> 00:02:41,920
questions

90
00:02:41,920 --> 00:02:43,599
uh another major problem with this

91
00:02:43,599 --> 00:02:45,360
solution however is the fact that it

92
00:02:45,360 --> 00:02:46,160
doesn't scale

93
00:02:46,160 --> 00:02:48,000
imagine if we were in the domain of

94
00:02:48,000 --> 00:02:50,239
billions or 64 bits i mean you cannot

95
00:02:50,239 --> 00:02:52,000
have so long change right i mean it's

96
00:02:52,000 --> 00:02:53,200
impractical

97
00:02:53,200 --> 00:02:55,519
so how do we solve this our first

98
00:02:55,519 --> 00:02:57,280
attempt was actually to

99
00:02:57,280 --> 00:03:00,239
uh actually create a commitment over

100
00:03:00,239 --> 00:03:00,640
some

101
00:03:00,640 --> 00:03:04,239
value and split it by digit and by this

102
00:03:04,239 --> 00:03:05,920
in this particular case we mean that we

103
00:03:05,920 --> 00:03:07,760
have the commitment over the value zero

104
00:03:07,760 --> 00:03:08,480
three three

105
00:03:08,480 --> 00:03:10,800
zero three nine nine nine and let's

106
00:03:10,800 --> 00:03:12,480
assume that the max number is uh

107
00:03:12,480 --> 00:03:15,040
five nines nine nine nine nine nine nine

108
00:03:15,040 --> 00:03:17,440
um we can prove a number i mean if we do

109
00:03:17,440 --> 00:03:18,959
it per digit like

110
00:03:18,959 --> 00:03:21,360
for zero we have like only one element

111
00:03:21,360 --> 00:03:22,720
for three we have like

112
00:03:22,720 --> 00:03:24,799
zero one two three elements like four

113
00:03:24,799 --> 00:03:25,920
elements in total

114
00:03:25,920 --> 00:03:28,080
for nine we have ten elements and so on

115
00:03:28,080 --> 00:03:29,680
and this actually can help us actually

116
00:03:29,680 --> 00:03:30,640
prove the number

117
00:03:30,640 --> 00:03:33,920
one four 1492 because um if you want to

118
00:03:33,920 --> 00:03:35,440
provide the proof for 0

119
00:03:35,440 --> 00:03:37,599
1 4 9 2 you provide the first element

120
00:03:37,599 --> 00:03:40,080
here bob will has it zero times so

121
00:03:40,080 --> 00:03:42,480
it uses directly this we have the number

122
00:03:42,480 --> 00:03:43,200
one here

123
00:03:43,200 --> 00:03:45,120
and then you will hash it once you have

124
00:03:45,120 --> 00:03:46,560
the number four here you will have it

125
00:03:46,560 --> 00:03:47,280
four times

126
00:03:47,280 --> 00:03:49,519
and then nine times and then two times

127
00:03:49,519 --> 00:03:51,280
then all of these five commitments now

128
00:03:51,280 --> 00:03:52,959
we have five commitments instead of one

129
00:03:52,959 --> 00:03:53,760
is actually

130
00:03:53,760 --> 00:03:55,920
uh a proof that uh an evidence that

131
00:03:55,920 --> 00:03:59,280
alice has a value a condense of at least

132
00:03:59,280 --> 00:04:01,920
one four nine two and obviously in in

133
00:04:01,920 --> 00:04:03,519
real the world we can just combine all

134
00:04:03,519 --> 00:04:04,879
these commitments into one by just

135
00:04:04,879 --> 00:04:07,680
concatenating them and passing them

136
00:04:07,680 --> 00:04:09,519
however as you will see this is not like

137
00:04:09,519 --> 00:04:11,439
a full solution and the reason

138
00:04:11,439 --> 00:04:13,599
for this is if the number was different

139
00:04:13,599 --> 00:04:16,000
like the zero three nine nine seven here

140
00:04:16,000 --> 00:04:17,839
we would have some difficulties on uh

141
00:04:17,839 --> 00:04:19,199
like proving numbers

142
00:04:19,199 --> 00:04:21,519
uh with end to eight or nine as you can

143
00:04:21,519 --> 00:04:23,280
see here you cannot prove one five nine

144
00:04:23,280 --> 00:04:23,919
nine

145
00:04:23,919 --> 00:04:25,759
because the last time is not enough to

146
00:04:25,759 --> 00:04:27,600
actually encode eight or nine

147
00:04:27,600 --> 00:04:30,160
like it's very short here so uh this

148
00:04:30,160 --> 00:04:31,600
attempt actually

149
00:04:31,600 --> 00:04:33,759
cannot work and then we had to go to

150
00:04:33,759 --> 00:04:35,040
something else

151
00:04:35,040 --> 00:04:37,520
so in our particular case what we did

152
00:04:37,520 --> 00:04:38,800
for uh

153
00:04:38,800 --> 00:04:42,160
like hash wires is we

154
00:04:42,160 --> 00:04:43,919
we actually explored the minimum

155
00:04:43,919 --> 00:04:45,919
dominating partitions theory

156
00:04:45,919 --> 00:04:48,639
and we try to identify what are the

157
00:04:48,639 --> 00:04:49,520
potential

158
00:04:49,520 --> 00:04:51,680
uh let's say ways to split the number

159
00:04:51,680 --> 00:04:53,280
without having the problem we mentioned

160
00:04:53,280 --> 00:04:54,320
before

161
00:04:54,320 --> 00:04:57,600
we ended up uh like

162
00:04:57,600 --> 00:05:00,800
into a solution where uh a number

163
00:05:00,800 --> 00:05:03,199
x dominates another number y if all of

164
00:05:03,199 --> 00:05:04,560
its digits are equal

165
00:05:04,560 --> 00:05:06,160
or larger against the corresponding

166
00:05:06,160 --> 00:05:08,080
digit position of the other number

167
00:05:08,080 --> 00:05:09,840
as an example imagine that two three

168
00:05:09,840 --> 00:05:12,000
four five dominates one two three four

169
00:05:12,000 --> 00:05:13,520
because two dominates one three

170
00:05:13,520 --> 00:05:15,440
dominates two four dominates three and

171
00:05:15,440 --> 00:05:16,639
five dominates work so

172
00:05:16,639 --> 00:05:19,520
third position we have like uh the first

173
00:05:19,520 --> 00:05:20,000
uh

174
00:05:20,000 --> 00:05:22,639
number to dominate the second one so if

175
00:05:22,639 --> 00:05:25,360
we apply this uh we can actually uh

176
00:05:25,360 --> 00:05:25,840
create

177
00:05:25,840 --> 00:05:29,199
splits of uh of different numbers and

178
00:05:29,199 --> 00:05:32,000
for example the number 399 is by itself

179
00:05:32,000 --> 00:05:32,479
enough

180
00:05:32,479 --> 00:05:35,440
to encode any number uh uh smaller than

181
00:05:35,440 --> 00:05:37,039
this like

182
00:05:37,039 --> 00:05:39,680
any number 399.99 but what if we have

183
00:05:39,680 --> 00:05:40,880
three four one three

184
00:05:40,880 --> 00:05:42,800
then we can introduce new partitions in

185
00:05:42,800 --> 00:05:44,560
this algorithm and this particular case

186
00:05:44,560 --> 00:05:45,120
is these

187
00:05:45,120 --> 00:05:48,000
uh four uh numbers here and the reason

188
00:05:48,000 --> 00:05:48,320
uh

189
00:05:48,320 --> 00:05:50,720
that this works is because imagine that

190
00:05:50,720 --> 00:05:52,320
the last one can actually encode any

191
00:05:52,320 --> 00:05:52,880
number

192
00:05:52,880 --> 00:05:57,039
uh below 299. this number here the 33999

193
00:05:57,039 --> 00:05:58,240
can encode anything

194
00:05:58,240 --> 00:06:01,120
above this one but until this one this

195
00:06:01,120 --> 00:06:01,759
number

196
00:06:01,759 --> 00:06:03,680
and then this number can encode anything

197
00:06:03,680 --> 00:06:04,960
above this number

198
00:06:04,960 --> 00:06:06,800
three three nine nine so three four

199
00:06:06,800 --> 00:06:08,479
hundred and three three

200
00:06:08,479 --> 00:06:10,639
uh four zero nine and this one can

201
00:06:10,639 --> 00:06:12,080
encode any number from

202
00:06:12,080 --> 00:06:14,800
uh three four ten to three four thirty

203
00:06:14,800 --> 00:06:15,680
so in practice

204
00:06:15,680 --> 00:06:18,479
uh with these four partitions uh we know

205
00:06:18,479 --> 00:06:20,080
how to encode any number below it and

206
00:06:20,080 --> 00:06:21,680
because we don't have a bigger number

207
00:06:21,680 --> 00:06:23,759
we cannot encode the bigger number than

208
00:06:23,759 --> 00:06:24,960
what we would listen

209
00:06:24,960 --> 00:06:26,479
the same is for different bases for

210
00:06:26,479 --> 00:06:28,160
example for three one two

211
00:06:28,160 --> 00:06:30,240
this is the minimum dominating uh

212
00:06:30,240 --> 00:06:31,199
partition

213
00:06:31,199 --> 00:06:33,199
uh the counter example is for example is

214
00:06:33,199 --> 00:06:35,199
if in four three one three

215
00:06:35,199 --> 00:06:38,479
we missed the three four nine um

216
00:06:38,479 --> 00:06:40,639
the numbers between three uh three

217
00:06:40,639 --> 00:06:42,080
thousand four hundred and three thousand

218
00:06:42,080 --> 00:06:43,759
four hundred nine are not dominated

219
00:06:43,759 --> 00:06:46,400
so this is not an mdp and you will see i

220
00:06:46,400 --> 00:06:48,160
mean you can easily understand that

221
00:06:48,160 --> 00:06:51,759
uh the mtp algorithm actually ensures

222
00:06:51,759 --> 00:06:53,759
that the maximum size of this list can

223
00:06:53,759 --> 00:06:55,599
actually be as many digits as the number

224
00:06:55,599 --> 00:06:57,120
is on this base

225
00:06:57,120 --> 00:07:00,639
and you can even identify uh like how

226
00:07:00,639 --> 00:07:02,000
easy it is to compute

227
00:07:02,000 --> 00:07:04,560
it i remember we had some uh original uh

228
00:07:04,560 --> 00:07:06,240
comments from the reviewers

229
00:07:06,240 --> 00:07:09,919
oh um we we don't know uh how effective

230
00:07:09,919 --> 00:07:12,160
it is to to actually create the mdp and

231
00:07:12,160 --> 00:07:14,080
we saw here we implemented that as well

232
00:07:14,080 --> 00:07:14,960
but it's super

233
00:07:14,960 --> 00:07:17,039
super fast it's just a for loop over a

234
00:07:17,039 --> 00:07:18,560
number of digits times

235
00:07:18,560 --> 00:07:21,199
and um whatever you can read better like

236
00:07:21,199 --> 00:07:23,039
code or the algorithm itself

237
00:07:23,039 --> 00:07:25,360
it's like uh it's not reducing any

238
00:07:25,360 --> 00:07:26,720
efficiency issues in our other

239
00:07:26,720 --> 00:07:31,039
super fast um so we can go

240
00:07:31,039 --> 00:07:34,160
we can go actually on using this mdp

241
00:07:34,160 --> 00:07:36,960
to actually convert it to hashtags right

242
00:07:36,960 --> 00:07:38,720
so from the mtp values

243
00:07:38,720 --> 00:07:41,280
uh the values themselves are not enough

244
00:07:41,280 --> 00:07:42,800
right we just need to

245
00:07:42,800 --> 00:07:44,720
actually convert them into this

246
00:07:44,720 --> 00:07:46,319
particular construction

247
00:07:46,319 --> 00:07:49,680
and what we do here is we separate them

248
00:07:49,680 --> 00:07:51,120
and for each particular number we're

249
00:07:51,120 --> 00:07:52,879
created same so this is three one two

250
00:07:52,879 --> 00:07:54,479
obviously we have four zero one two

251
00:07:54,479 --> 00:07:55,120
three

252
00:07:55,120 --> 00:07:57,120
four zero one and four zero one two so

253
00:07:57,120 --> 00:07:58,960
for three zero three you have like

254
00:07:58,960 --> 00:08:00,560
four elements here zero here and four

255
00:08:00,560 --> 00:08:02,160
elements here and you do the same for

256
00:08:02,160 --> 00:08:03,120
two three three

257
00:08:03,120 --> 00:08:05,360
what's the trick here the trick is has

258
00:08:05,360 --> 00:08:06,560
wires is like

259
00:08:06,560 --> 00:08:08,800
in one time uh witnessing

260
00:08:08,800 --> 00:08:10,479
distinguishability scheme

261
00:08:10,479 --> 00:08:12,800
uh where alice can actually if she

262
00:08:12,800 --> 00:08:14,560
receives all of these three commitments

263
00:08:14,560 --> 00:08:16,800
she can actually pick which one to

264
00:08:16,800 --> 00:08:18,560
actually use every single time she is

265
00:08:18,560 --> 00:08:20,400
requested to provide it

266
00:08:20,400 --> 00:08:22,160
and that's the benefit because here if

267
00:08:22,160 --> 00:08:23,840
alice's request to provide the proof for

268
00:08:23,840 --> 00:08:24,720
one two three

269
00:08:24,720 --> 00:08:27,039
she will go on the right side because

270
00:08:27,039 --> 00:08:28,879
this one can encode any number below two

271
00:08:28,879 --> 00:08:30,319
to three

272
00:08:30,319 --> 00:08:32,159
and she can provide like the yellow node

273
00:08:32,159 --> 00:08:34,240
as a proof and this is true because

274
00:08:34,240 --> 00:08:37,279
uh this yellow node can improve one zero

275
00:08:37,279 --> 00:08:40,399
one this node can actually be has twice

276
00:08:40,399 --> 00:08:42,880
by box of zero one two so go be sure

277
00:08:42,880 --> 00:08:44,320
that you have at least two here

278
00:08:44,320 --> 00:08:45,839
and we'll be sure that you have at least

279
00:08:45,839 --> 00:08:48,160
three here so we have one two three if

280
00:08:48,160 --> 00:08:49,519
the issuer doesn't give you any other

281
00:08:49,519 --> 00:08:49,920
number

282
00:08:49,920 --> 00:08:51,760
alice cannot prove any number uh larger

283
00:08:51,760 --> 00:08:54,640
than three one two

284
00:08:54,800 --> 00:08:57,040
however as you can see previously we had

285
00:08:57,040 --> 00:08:59,120
like different has chains

286
00:08:59,120 --> 00:09:01,040
based on the different mdps if you have

287
00:09:01,040 --> 00:09:02,240
a lot of entities

288
00:09:02,240 --> 00:09:04,080
you're introducing like some complexity

289
00:09:04,080 --> 00:09:05,760
to the system because you need to

290
00:09:05,760 --> 00:09:08,000
uh implement like uh manufacturing would

291
00:09:08,000 --> 00:09:10,080
be the most expensive operation

292
00:09:10,080 --> 00:09:12,560
um one way to do this is because it's

293
00:09:12,560 --> 00:09:13,519
one time again

294
00:09:13,519 --> 00:09:16,240
we can actually uh why uh create just

295
00:09:16,240 --> 00:09:17,920
three elements here for three

296
00:09:17,920 --> 00:09:20,720
uh one two in base four and actually

297
00:09:20,720 --> 00:09:21,600
wire them

298
00:09:21,600 --> 00:09:23,839
efficiently and you can see in the next

299
00:09:23,839 --> 00:09:24,640
slide

300
00:09:24,640 --> 00:09:27,920
uh why the uh

301
00:09:27,920 --> 00:09:30,480
why the wiring is super simple imagine

302
00:09:30,480 --> 00:09:32,240
in previously they were completely

303
00:09:32,240 --> 00:09:33,279
dependent

304
00:09:33,279 --> 00:09:35,279
but what we do is we actually create

305
00:09:35,279 --> 00:09:37,360
three uh hussains

306
00:09:37,360 --> 00:09:39,839
and then again we keep the positions

307
00:09:39,839 --> 00:09:41,920
similar to the prediction so here we had

308
00:09:41,920 --> 00:09:42,800
like

309
00:09:42,800 --> 00:09:45,360
uh a y to the third node from the first

310
00:09:45,360 --> 00:09:46,480
chain on the left

311
00:09:46,480 --> 00:09:48,560
again as you can see it's on the third

312
00:09:48,560 --> 00:09:50,480
node zero one two three

313
00:09:50,480 --> 00:09:52,160
then it was like on the second note

314
00:09:52,160 --> 00:09:53,760
again the second

315
00:09:53,760 --> 00:09:56,480
red goes to the second note here and

316
00:09:56,480 --> 00:09:57,519
then we have like

317
00:09:57,519 --> 00:10:00,240
a link to the one two three and then as

318
00:10:00,240 --> 00:10:00,800
you can see

319
00:10:00,800 --> 00:10:02,959
the third one goes to one the same

320
00:10:02,959 --> 00:10:04,480
applies to all of them

321
00:10:04,480 --> 00:10:06,959
so in practice instead of having nine

322
00:10:06,959 --> 00:10:08,640
chains now you're using three tails and

323
00:10:08,640 --> 00:10:09,920
then with smart wiring

324
00:10:09,920 --> 00:10:14,320
uh you know where to go um

325
00:10:14,320 --> 00:10:17,760
also one of the problems of this uh like

326
00:10:17,760 --> 00:10:18,720
applications

327
00:10:18,720 --> 00:10:21,360
is if you reveal the number of mdps

328
00:10:21,360 --> 00:10:22,959
you're actually leaking something and we

329
00:10:22,959 --> 00:10:24,079
don't want it

330
00:10:24,079 --> 00:10:26,640
that's why on top of the mtps that we

331
00:10:26,640 --> 00:10:27,360
had before

332
00:10:27,360 --> 00:10:29,760
we're actually introducing some merkle

333
00:10:29,760 --> 00:10:30,640
tvs

334
00:10:30,640 --> 00:10:33,920
and the commitments to different mdp

335
00:10:33,920 --> 00:10:36,720
values are actually nodes of this uh

336
00:10:36,720 --> 00:10:39,680
sparse mercury here and we also support

337
00:10:39,680 --> 00:10:41,440
them so you don't even know if you have

338
00:10:41,440 --> 00:10:41,839
one

339
00:10:41,839 --> 00:10:44,560
or this was the second mdp value so no

340
00:10:44,560 --> 00:10:47,360
leaks uh by assuming that

341
00:10:47,360 --> 00:10:49,200
this could be a full tree or it could be

342
00:10:49,200 --> 00:10:51,279
a tree with one node you don't know

343
00:10:51,279 --> 00:10:52,959
because every single time every fire

344
00:10:52,959 --> 00:10:54,880
will receive one path

345
00:10:54,880 --> 00:10:58,480
um and then eventually

346
00:10:58,480 --> 00:11:01,040
we end up into a system which looks like

347
00:11:01,040 --> 00:11:02,480
this one

348
00:11:02,480 --> 00:11:05,600
which is like imagine

349
00:11:05,600 --> 00:11:08,160
a full version of hash wires and in this

350
00:11:08,160 --> 00:11:09,600
particular case

351
00:11:09,600 --> 00:11:11,680
you can see like the melting of the hat

352
00:11:11,680 --> 00:11:13,519
saves on the bottom

353
00:11:13,519 --> 00:11:15,600
and then we have some accumulators here

354
00:11:15,600 --> 00:11:16,640
to actually uh

355
00:11:16,640 --> 00:11:21,200
compress the three uh uh let's say

356
00:11:21,200 --> 00:11:23,440
commitments into one and then we put

357
00:11:23,440 --> 00:11:25,040
them in the supplier and then the

358
00:11:25,040 --> 00:11:26,720
shuffler actually goes into american

359
00:11:26,720 --> 00:11:28,399
tree to produce the root

360
00:11:28,399 --> 00:11:31,200
and we also have some malleability uh

361
00:11:31,200 --> 00:11:32,640
like this is optional

362
00:11:32,640 --> 00:11:34,959
um if you don't want someone to use your

363
00:11:34,959 --> 00:11:37,120
proof and prove another proof with your

364
00:11:37,120 --> 00:11:38,560
proof like a smaller proof with your

365
00:11:38,560 --> 00:11:38,959
proof

366
00:11:38,959 --> 00:11:40,160
then you can introduce them

367
00:11:40,160 --> 00:11:42,000
non-valuability like

368
00:11:42,000 --> 00:11:44,160
same similarly to how has base

369
00:11:44,160 --> 00:11:46,959
signatures are doing

370
00:11:46,959 --> 00:11:48,959
i will go back to the applications which

371
00:11:48,959 --> 00:11:50,720
is one of the most interesting things

372
00:11:50,720 --> 00:11:52,320
about has wires

373
00:11:52,320 --> 00:11:54,800
and what we have here is you can use

374
00:11:54,800 --> 00:11:57,279
hash wires for kyc proofs in our

375
00:11:57,279 --> 00:11:59,360
particular case we have aids

376
00:11:59,360 --> 00:12:01,519
but in practice it can be any any

377
00:12:01,519 --> 00:12:03,360
numeric kyc

378
00:12:03,360 --> 00:12:05,519
information something which is also

379
00:12:05,519 --> 00:12:07,440
interesting is the proof of income

380
00:12:07,440 --> 00:12:09,600
imagine that we might go to landlords

381
00:12:09,600 --> 00:12:11,440
this was very important when we did some

382
00:12:11,440 --> 00:12:12,880
survey on the use of

383
00:12:12,880 --> 00:12:14,959
like housewares and the landlords will

384
00:12:14,959 --> 00:12:16,880
require like evidence of your

385
00:12:16,880 --> 00:12:19,519
salary or evidence of your income uh

386
00:12:19,519 --> 00:12:20,399
imagine

387
00:12:20,399 --> 00:12:22,320
that now people who don't work with

388
00:12:22,320 --> 00:12:23,760
everything they just want to prove that

389
00:12:23,760 --> 00:12:24,800
they need to threshold

390
00:12:24,800 --> 00:12:26,480
and this is enough actually to convince

391
00:12:26,480 --> 00:12:27,839
them and because the algorithm is very

392
00:12:27,839 --> 00:12:28,320
simple

393
00:12:28,320 --> 00:12:30,000
it just has functions it can even

394
00:12:30,000 --> 00:12:31,120
implement it i don't know if the

395
00:12:31,120 --> 00:12:32,880
identity cards or some smart cards

396
00:12:32,880 --> 00:12:33,600
internally

397
00:12:33,600 --> 00:12:35,360
even in the blockchain because you don't

398
00:12:35,360 --> 00:12:37,680
even need like functionality of

399
00:12:37,680 --> 00:12:39,279
bulletproof or four other

400
00:12:39,279 --> 00:12:41,760
uh verification systems usually the hash

401
00:12:41,760 --> 00:12:43,279
function is available on most of the

402
00:12:43,279 --> 00:12:45,519
from the blockchains like ethereum and

403
00:12:45,519 --> 00:12:48,959
uh dm and so on um another interesting

404
00:12:48,959 --> 00:12:50,560
application that we figured out is the

405
00:12:50,560 --> 00:12:52,079
proof of valid timestamp

406
00:12:52,079 --> 00:12:53,839
there are a lot of attacks happening

407
00:12:53,839 --> 00:12:56,480
because the malicious users

408
00:12:56,480 --> 00:12:59,760
can uh priority see the expiration time

409
00:12:59,760 --> 00:13:01,519
of the certificate and they can prepare

410
00:13:01,519 --> 00:13:02,320
the attack

411
00:13:02,320 --> 00:13:04,160
so there are even bots about this what

412
00:13:04,160 --> 00:13:06,240
if you don't know when a certificate

413
00:13:06,240 --> 00:13:07,360
expires right

414
00:13:07,360 --> 00:13:09,040
and you only know that at the time you

415
00:13:09,040 --> 00:13:11,440
are entering a webpage in https page

416
00:13:11,440 --> 00:13:13,360
it's valid now but you don't know where

417
00:13:13,360 --> 00:13:14,800
when it expires

418
00:13:14,800 --> 00:13:17,360
um another interesting stuff is the

419
00:13:17,360 --> 00:13:18,959
location privacy

420
00:13:18,959 --> 00:13:22,079
where this one actually introduces a new

421
00:13:22,079 --> 00:13:23,760
concept of overlaying

422
00:13:23,760 --> 00:13:25,839
like has wire grooves in this particular

423
00:13:25,839 --> 00:13:27,920
case we have like the x-axis being a

424
00:13:27,920 --> 00:13:28,959
hash-wise proof

425
00:13:28,959 --> 00:13:31,200
the y-axis also being another crosswise

426
00:13:31,200 --> 00:13:32,800
proof and then because you have ranges

427
00:13:32,800 --> 00:13:34,480
you can create rectangles now and you

428
00:13:34,480 --> 00:13:35,040
can prove

429
00:13:35,040 --> 00:13:37,040
like you're located somewhere here in

430
00:13:37,040 --> 00:13:38,720
iceland like you have your address in

431
00:13:38,720 --> 00:13:39,760
your identity card

432
00:13:39,760 --> 00:13:41,360
but you don't reveal exactly what your

433
00:13:41,360 --> 00:13:42,959
address is i only know you are in this

434
00:13:42,959 --> 00:13:44,160
rectangle now

435
00:13:44,160 --> 00:13:46,240
and with introducing like different

436
00:13:46,240 --> 00:13:47,920
points of reference we can even create

437
00:13:47,920 --> 00:13:49,120
different shapes it's not only

438
00:13:49,120 --> 00:13:51,519
rectangles we can make like hexagons and

439
00:13:51,519 --> 00:13:53,839
other stuff another interesting

440
00:13:53,839 --> 00:13:55,360
application is micro payments and

441
00:13:55,360 --> 00:13:56,240
backticks

442
00:13:56,240 --> 00:13:58,399
imagine that if we want to have like

443
00:13:58,399 --> 00:14:00,240
some especially in the blockchain

444
00:14:00,240 --> 00:14:02,639
some checks where um you don't you

445
00:14:02,639 --> 00:14:04,320
cannot see the real value of the check

446
00:14:04,320 --> 00:14:06,000
but you gradually redeem it

447
00:14:06,000 --> 00:14:08,800
so you can start uh like by issuing a

448
00:14:08,800 --> 00:14:10,320
bank cheque of 1 000

449
00:14:10,320 --> 00:14:11,519
and then you go on the blockchain and

450
00:14:11,519 --> 00:14:13,519
you spend like 100 of them nobody knows

451
00:14:13,519 --> 00:14:16,079
you have another 900

452
00:14:16,079 --> 00:14:19,199
on the check but they know this 100 was

453
00:14:19,199 --> 00:14:21,440
actually at least issued by the bank and

454
00:14:21,440 --> 00:14:23,279
you have more and you have more at least

455
00:14:23,279 --> 00:14:24,639
expires you don't have enough money

456
00:14:24,639 --> 00:14:26,639
anymore in your in your check

457
00:14:26,639 --> 00:14:28,000
another interesting application is

458
00:14:28,000 --> 00:14:30,079
policy based signatures and this is very

459
00:14:30,079 --> 00:14:31,360
important because

460
00:14:31,360 --> 00:14:33,760
we can we actually realized with

461
00:14:33,760 --> 00:14:34,720
housewives

462
00:14:34,720 --> 00:14:36,720
that almost all of the hash-based

463
00:14:36,720 --> 00:14:38,399
schemes at least the

464
00:14:38,399 --> 00:14:41,680
uh a few times or one time has basically

465
00:14:41,680 --> 00:14:44,720
like watts bpqs and cloudboard can

466
00:14:44,720 --> 00:14:46,399
actually be converted very easily to

467
00:14:46,399 --> 00:14:47,920
policy-based signatures

468
00:14:47,920 --> 00:14:49,839
and imagine in bitcoin what does this

469
00:14:49,839 --> 00:14:51,279
mean

470
00:14:51,279 --> 00:14:53,519
for this particular policy by the way so

471
00:14:53,519 --> 00:14:54,560
there might be an

472
00:14:54,560 --> 00:14:56,399
owner of the key this owner of the key

473
00:14:56,399 --> 00:14:58,160
sending the key to some other nodes some

474
00:14:58,160 --> 00:14:59,040
other users

475
00:14:59,040 --> 00:15:00,959
but by putting restrictions on what you

476
00:15:00,959 --> 00:15:02,720
can sign like i'm not giving you the

477
00:15:02,720 --> 00:15:04,079
full change the full watch sayings i'm

478
00:15:04,079 --> 00:15:05,600
giving you only parts of them

479
00:15:05,600 --> 00:15:07,279
so you can sign up to some amount in

480
00:15:07,279 --> 00:15:09,920
bitcoins um

481
00:15:09,920 --> 00:15:12,720
and finally there is some interesting

482
00:15:12,720 --> 00:15:14,079
like applications in

483
00:15:14,079 --> 00:15:15,920
proof of writing like for games or for

484
00:15:15,920 --> 00:15:17,760
your cvs you might not want to reveal

485
00:15:17,760 --> 00:15:18,639
that you were

486
00:15:18,639 --> 00:15:20,320
fourth in your school but you want to

487
00:15:20,320 --> 00:15:21,839
prove that you were i don't in the top

488
00:15:21,839 --> 00:15:22,560
ten

489
00:15:22,560 --> 00:15:24,320
right the same thing for like a chess

490
00:15:24,320 --> 00:15:26,880
game or something and there is also the

491
00:15:26,880 --> 00:15:29,680
i mean in the food industry or the drug

492
00:15:29,680 --> 00:15:30,320
industry

493
00:15:30,320 --> 00:15:32,480
for secret recipes right imagine that

494
00:15:32,480 --> 00:15:33,519
you want to prove that you meet the

495
00:15:33,519 --> 00:15:35,360
regulations but you don't want to reveal

496
00:15:35,360 --> 00:15:36,320
all of your recipes

497
00:15:36,320 --> 00:15:39,519
not everything right and

498
00:15:39,519 --> 00:15:41,440
finally we have to mention because this

499
00:15:41,440 --> 00:15:43,199
is a question that we usually get

500
00:15:43,199 --> 00:15:44,560
because where commitments are not

501
00:15:44,560 --> 00:15:46,480
homomorphic which means that we cannot

502
00:15:46,480 --> 00:15:47,440
use them like

503
00:15:47,440 --> 00:15:49,759
nibble window or other uh schemes that

504
00:15:49,759 --> 00:15:51,600
require like adding commitments between

505
00:15:51,600 --> 00:15:52,480
themselves

506
00:15:52,480 --> 00:15:54,720
unfortunately this is the limitations of

507
00:15:54,720 --> 00:15:56,959
one of the limitations of class rights

508
00:15:56,959 --> 00:15:59,920
um finally we go to the comparison

509
00:15:59,920 --> 00:16:00,880
efficiency

510
00:16:00,880 --> 00:16:03,360
and uh we're super excited here because

511
00:16:03,360 --> 00:16:05,120
we have some record

512
00:16:05,120 --> 00:16:09,120
like numbers especially for like 32-bit

513
00:16:09,120 --> 00:16:10,880
uh engineers for example

514
00:16:10,880 --> 00:16:13,759
imagine that we can produce with 2048

515
00:16:13,759 --> 00:16:14,639
long sails

516
00:16:14,639 --> 00:16:16,399
which is still super feasible and super

517
00:16:16,399 --> 00:16:19,440
fast um you can actually produce

518
00:16:19,440 --> 00:16:23,040
like signatures of 7 177 bytes

519
00:16:23,040 --> 00:16:24,959
it's even smaller than the gross 16

520
00:16:24,959 --> 00:16:26,800
right which is 192.

521
00:16:26,800 --> 00:16:29,600
and the in practice if we can relax the

522
00:16:29,600 --> 00:16:31,279
collision resistance if we trust the

523
00:16:31,279 --> 00:16:33,040
issue it can even be smaller because we

524
00:16:33,040 --> 00:16:36,880
don't need 156 bit outputs

525
00:16:36,880 --> 00:16:39,360
so another benefit is actually on the

526
00:16:39,360 --> 00:16:40,399
speed because

527
00:16:40,399 --> 00:16:43,040
uh we're we're planning this in rust and

528
00:16:43,040 --> 00:16:44,399
then we have a great implementation of

529
00:16:44,399 --> 00:16:45,920
bullet proof even with

530
00:16:45,920 --> 00:16:48,560
vectorized instructions in the x2 and we

531
00:16:48,560 --> 00:16:50,320
realize that hash wires is

532
00:16:50,320 --> 00:16:52,000
a lot faster especially on proof

533
00:16:52,000 --> 00:16:53,920
generation imagine that

534
00:16:53,920 --> 00:16:56,160
uh something that takes like uh 12

535
00:16:56,160 --> 00:16:57,759
milliseconds for bulletproof

536
00:16:57,759 --> 00:17:00,959
it actually takes 100 microseconds and

537
00:17:00,959 --> 00:17:04,079
it has wires with basically like

538
00:17:04,079 --> 00:17:08,319
length of chain is uh like up to 16.

539
00:17:08,319 --> 00:17:10,720
obviously the comparison is a bit unfair

540
00:17:10,720 --> 00:17:12,000
because it's a generic zero

541
00:17:12,000 --> 00:17:13,359
knowledgeable schemes

542
00:17:13,359 --> 00:17:15,039
and we're only solving this particular

543
00:17:15,039 --> 00:17:17,280
problem and the property actually were

544
00:17:17,280 --> 00:17:19,520
offering his weakness in this usability

545
00:17:19,520 --> 00:17:21,599
but at the same time because these

546
00:17:21,599 --> 00:17:23,359
schemes are used for these solutions we

547
00:17:23,359 --> 00:17:25,119
compared against those

548
00:17:25,119 --> 00:17:28,799
um finally again this is the full

549
00:17:28,799 --> 00:17:31,919
uh like snapshot here and this is uh

550
00:17:31,919 --> 00:17:34,400
what you can find also in our repository

551
00:17:34,400 --> 00:17:37,760
happy to uh accept contributors here

552
00:17:37,760 --> 00:17:40,960
and yeah here it is i mean thank you for

553
00:17:40,960 --> 00:17:44,320
uh listening to me and uh

554
00:17:44,320 --> 00:17:47,840
happy to answer on any questions

