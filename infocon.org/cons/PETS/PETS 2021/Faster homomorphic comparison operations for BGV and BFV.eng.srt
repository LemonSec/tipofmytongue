1
00:00:01,040 --> 00:00:03,919
hi my name is ilya ilyashanka

2
00:00:03,919 --> 00:00:06,160
and i will demonstrate how to speed up

3
00:00:06,160 --> 00:00:08,320
the secure comparison of encrypted

4
00:00:08,320 --> 00:00:09,760
integers

5
00:00:09,760 --> 00:00:14,240
this is a joint work with events on zuka

6
00:00:14,559 --> 00:00:17,440
our data is kept in the cloud banks

7
00:00:17,440 --> 00:00:18,080
outsource

8
00:00:18,080 --> 00:00:20,960
customers data to the cloud providers to

9
00:00:20,960 --> 00:00:22,160
avoid deployment of

10
00:00:22,160 --> 00:00:24,560
necessary id infrastructure for data

11
00:00:24,560 --> 00:00:26,000
storage

12
00:00:26,000 --> 00:00:28,240
due to the same reason hospitals can use

13
00:00:28,240 --> 00:00:30,320
the cloud to store the medical data

14
00:00:30,320 --> 00:00:33,040
of their patients thus sparing some

15
00:00:33,040 --> 00:00:35,120
money

16
00:00:35,120 --> 00:00:38,160
of course financial and medical data is

17
00:00:38,160 --> 00:00:39,280
very sensitive

18
00:00:39,280 --> 00:00:41,280
and should be protected even from the

19
00:00:41,280 --> 00:00:42,719
cloud provider

20
00:00:42,719 --> 00:00:45,039
which can be done by using encryption

21
00:00:45,039 --> 00:00:47,360
algorithms

22
00:00:47,360 --> 00:00:49,200
then the question arises how to work

23
00:00:49,200 --> 00:00:51,360
with encrypted data in the cloud

24
00:00:51,360 --> 00:00:53,440
for example how to get statistics about

25
00:00:53,440 --> 00:00:55,039
customers or patients

26
00:00:55,039 --> 00:00:57,039
but at the same time keep all the data

27
00:00:57,039 --> 00:00:59,120
oblivious to the cloud

28
00:00:59,120 --> 00:01:01,680
it seems contradictory as cipher texts

29
00:01:01,680 --> 00:01:03,600
do not leak any information

30
00:01:03,600 --> 00:01:05,920
and the cloud needs to decrypt it first

31
00:01:05,920 --> 00:01:09,600
before going to computations

32
00:01:10,720 --> 00:01:14,159
in 1978 realist adleman endertoesis

33
00:01:14,159 --> 00:01:16,080
suggested the following hypothetical

34
00:01:16,080 --> 00:01:18,640
solution what if the cloud computes on

35
00:01:18,640 --> 00:01:21,040
ciphertext such that a desired function

36
00:01:21,040 --> 00:01:23,439
is computed on underlying plain texts

37
00:01:23,439 --> 00:01:23,920
without

38
00:01:23,920 --> 00:01:26,640
decryption after computation the cloud

39
00:01:26,640 --> 00:01:27,920
provider can just

40
00:01:27,920 --> 00:01:30,240
send only encrypted results back to the

41
00:01:30,240 --> 00:01:31,520
data owner

42
00:01:31,520 --> 00:01:33,360
the encryption algorithm used in this

43
00:01:33,360 --> 00:01:36,799
protocol is called homomorphic

44
00:01:36,799 --> 00:01:38,720
more precisely homomorphic encryption is

45
00:01:38,720 --> 00:01:40,000
an encryption scheme

46
00:01:40,000 --> 00:01:41,840
that allows computations on encrypted

47
00:01:41,840 --> 00:01:44,560
data without decryption

48
00:01:44,560 --> 00:01:46,560
the most advanced type of homomorphic

49
00:01:46,560 --> 00:01:48,240
encryption is fully homomorphic

50
00:01:48,240 --> 00:01:48,880
encryption

51
00:01:48,880 --> 00:01:51,280
that can compute any computable function

52
00:01:51,280 --> 00:01:53,439
on encrypted data

53
00:01:53,439 --> 00:01:55,119
but there is also somewhat homomorphic

54
00:01:55,119 --> 00:01:56,719
encryption that can compute

55
00:01:56,719 --> 00:02:00,640
any arithmetic circuit of bounded depth

56
00:02:00,640 --> 00:02:02,240
in practice some of homomorphic

57
00:02:02,240 --> 00:02:04,159
encryption is more efficient than

58
00:02:04,159 --> 00:02:06,240
fully homomorphic encryption in this

59
00:02:06,240 --> 00:02:08,399
work we focus on this type of

60
00:02:08,399 --> 00:02:11,280
homomorphic encryption

61
00:02:11,280 --> 00:02:14,720
the existing hg schemes natively support

62
00:02:14,720 --> 00:02:17,040
evaluation of arithmetic circuits

63
00:02:17,040 --> 00:02:18,879
in other words they can compute

64
00:02:18,879 --> 00:02:20,080
polynomials

65
00:02:20,080 --> 00:02:22,319
but many practically useful functions

66
00:02:22,319 --> 00:02:23,840
are not arithmetic

67
00:02:23,840 --> 00:02:25,760
so they should be somehow approximated

68
00:02:25,760 --> 00:02:29,280
to polynomials of reasonable degree

69
00:02:29,280 --> 00:02:31,280
in this work we focus on comparison

70
00:02:31,280 --> 00:02:33,519
functions such as logical predicates

71
00:02:33,519 --> 00:02:36,640
is equal is less than and maximum

72
00:02:36,640 --> 00:02:38,239
minimum functions

73
00:02:38,239 --> 00:02:40,800
we'll show how to speed up evaluation of

74
00:02:40,800 --> 00:02:43,599
such functions

75
00:02:43,680 --> 00:02:45,519
to study the computation complexity of

76
00:02:45,519 --> 00:02:47,360
homomorphic computation

77
00:02:47,360 --> 00:02:48,720
we should take into account which

78
00:02:48,720 --> 00:02:50,959
operations are cheap and which are

79
00:02:50,959 --> 00:02:53,840
expensive since there are two types of

80
00:02:53,840 --> 00:02:54,319
input

81
00:02:54,319 --> 00:02:56,640
in homomorphic encryption plain text and

82
00:02:56,640 --> 00:02:57,599
ciphertext

83
00:02:57,599 --> 00:02:59,440
the arithmetic operations have two

84
00:02:59,440 --> 00:03:01,760
versions namely with a plain text and

85
00:03:01,760 --> 00:03:02,959
the sever text

86
00:03:02,959 --> 00:03:06,080
or with two cyber texts the most

87
00:03:06,080 --> 00:03:07,120
expensive operation

88
00:03:07,120 --> 00:03:11,680
is ciphertext ciphertext multiplication

89
00:03:11,840 --> 00:03:13,920
it implies that when we evaluate a

90
00:03:13,920 --> 00:03:16,959
polynomial whose coefficients are public

91
00:03:16,959 --> 00:03:20,319
that is a plain text we should pay

92
00:03:20,319 --> 00:03:22,319
attention to the number of non-scholar

93
00:03:22,319 --> 00:03:23,680
multiplications

94
00:03:23,680 --> 00:03:26,319
where ciphertexts are involved

95
00:03:26,319 --> 00:03:28,239
multiplications by scholars

96
00:03:28,239 --> 00:03:32,000
are cheap it is also important to

97
00:03:32,000 --> 00:03:32,799
remember that

98
00:03:32,799 --> 00:03:34,480
the encryption parameters of somewhat

99
00:03:34,480 --> 00:03:36,159
homomorphic encryption schemes

100
00:03:36,159 --> 00:03:38,239
grow with non-scalar multiplicative

101
00:03:38,239 --> 00:03:39,360
depth

102
00:03:39,360 --> 00:03:41,440
this is why we aim to minimize this

103
00:03:41,440 --> 00:03:46,239
depth as much as possible

104
00:03:46,239 --> 00:03:48,400
let us provide more details on somewhat

105
00:03:48,400 --> 00:03:50,080
homomorphic encryption schemes we are

106
00:03:50,080 --> 00:03:52,799
going to use

107
00:03:53,040 --> 00:03:55,599
there are three main types of hg schemes

108
00:03:55,599 --> 00:03:57,760
the first type is suitable for a bitwise

109
00:03:57,760 --> 00:03:58,720
arithmetic

110
00:03:58,720 --> 00:04:02,080
and includes fhew and tfhe

111
00:04:02,080 --> 00:04:04,239
the second type is efficient for integer

112
00:04:04,239 --> 00:04:05,200
arithmetic

113
00:04:05,200 --> 00:04:07,200
the most well known schemes of this type

114
00:04:07,200 --> 00:04:08,480
are bgb and

115
00:04:08,480 --> 00:04:11,680
bfe and the third and the youngest type

116
00:04:11,680 --> 00:04:13,360
is suitable for approximate or

117
00:04:13,360 --> 00:04:15,599
fixed point arithmetic at the moment it

118
00:04:15,599 --> 00:04:17,120
contains only one scheme

119
00:04:17,120 --> 00:04:20,720
called ckks or hen

120
00:04:20,798 --> 00:04:22,800
in this work we'll focus on the second

121
00:04:22,800 --> 00:04:24,880
type that can evaluate arithmetic

122
00:04:24,880 --> 00:04:25,759
circuits and

123
00:04:25,759 --> 00:04:29,840
encode data into finite fields

124
00:04:29,919 --> 00:04:31,840
the plaintext space in such schemes is

125
00:04:31,840 --> 00:04:33,360
typically a vector

126
00:04:33,360 --> 00:04:36,639
space over a finite field

127
00:04:36,639 --> 00:04:38,880
plus there are homomorphic operations

128
00:04:38,880 --> 00:04:41,360
that allow to add and multiply plaintext

129
00:04:41,360 --> 00:04:42,080
factors

130
00:04:42,080 --> 00:04:45,360
coefficient wise and also rotate them or

131
00:04:45,360 --> 00:04:47,759
select a certain coordinate and zero as

132
00:04:47,759 --> 00:04:50,240
the rest

133
00:04:50,639 --> 00:04:53,120
to compare integers homomorphically we

134
00:04:53,120 --> 00:04:54,639
need first to encode them into the

135
00:04:54,639 --> 00:04:56,240
plaintext space

136
00:04:56,240 --> 00:04:58,639
first we decompose a given integer a

137
00:04:58,639 --> 00:05:00,160
into its base b

138
00:05:00,160 --> 00:05:03,039
prime representation every digit of this

139
00:05:03,039 --> 00:05:04,240
decomposition

140
00:05:04,240 --> 00:05:06,240
is also an element of the prime finite

141
00:05:06,240 --> 00:05:09,199
field f p

142
00:05:09,520 --> 00:05:12,560
then every group of d digits can be

143
00:05:12,560 --> 00:05:14,880
mapped to an element of the finite field

144
00:05:14,880 --> 00:05:18,080
f p to d

145
00:05:18,880 --> 00:05:21,120
and this means that we can convert the

146
00:05:21,120 --> 00:05:22,720
decomposition vector of

147
00:05:22,720 --> 00:05:25,280
a in base b prime to the vector of

148
00:05:25,280 --> 00:05:26,160
elements over

149
00:05:26,160 --> 00:05:29,680
f p to d note that this conversion

150
00:05:29,680 --> 00:05:33,360
is invertible to compute integer

151
00:05:33,360 --> 00:05:34,320
comparison

152
00:05:34,320 --> 00:05:36,880
we need the equality function over f p

153
00:05:36,880 --> 00:05:38,720
which is defined in the following way

154
00:05:38,720 --> 00:05:40,800
and can be computed in a logarithmic

155
00:05:40,800 --> 00:05:44,320
number of non-scalar multiplications

156
00:05:44,320 --> 00:05:46,240
using the equality function we can

157
00:05:46,240 --> 00:05:48,160
interpolate any function over a finite

158
00:05:48,160 --> 00:05:48,639
field

159
00:05:48,639 --> 00:05:51,120
using the lagrange interpolation the

160
00:05:51,120 --> 00:05:52,080
resulting polynomial

161
00:05:52,080 --> 00:05:54,320
will be unique and of the greet most p

162
00:05:54,320 --> 00:05:55,120
minus 1

163
00:05:55,120 --> 00:05:59,039
in each variable as a result we have all

164
00:05:59,039 --> 00:06:00,560
the ingredients to compare encrypted

165
00:06:00,560 --> 00:06:01,680
integers

166
00:06:01,680 --> 00:06:03,199
we use the fastest algorithm in the

167
00:06:03,199 --> 00:06:05,600
literature form tan at all

168
00:06:05,600 --> 00:06:07,680
the input of this algorithm is two

169
00:06:07,680 --> 00:06:08,720
integers x

170
00:06:08,720 --> 00:06:11,280
and y encoded as vectors of the finite

171
00:06:11,280 --> 00:06:11,840
field

172
00:06:11,840 --> 00:06:16,000
f p to d the first step is to extract

173
00:06:16,000 --> 00:06:18,000
the digits of these integers namely the

174
00:06:18,000 --> 00:06:19,360
elements of the prime field

175
00:06:19,360 --> 00:06:22,400
fb this step is relatively cheap

176
00:06:22,400 --> 00:06:24,240
note that each output ciphertext

177
00:06:24,240 --> 00:06:26,400
contains the ith coefficients

178
00:06:26,400 --> 00:06:28,319
of all the coordinates of the input

179
00:06:28,319 --> 00:06:30,800
vectors

180
00:06:30,880 --> 00:06:32,639
in the second step the corresponding

181
00:06:32,639 --> 00:06:34,080
pairs of digits are

182
00:06:34,080 --> 00:06:36,720
compared with a quality function note

183
00:06:36,720 --> 00:06:38,720
that one homomorphic evaluation of the

184
00:06:38,720 --> 00:06:40,080
equality function

185
00:06:40,080 --> 00:06:42,560
compares l pairs of digits

186
00:06:42,560 --> 00:06:45,039
simultaneously

187
00:06:45,039 --> 00:06:47,120
in the first step similarly the

188
00:06:47,120 --> 00:06:48,960
corresponding pairs of digits are

189
00:06:48,960 --> 00:06:51,280
compared with the less than function

190
00:06:51,280 --> 00:06:53,840
that returns one if the left argument is

191
00:06:53,840 --> 00:06:55,280
smaller than the right one

192
00:06:55,280 --> 00:06:58,319
and zero otherwise

193
00:06:58,319 --> 00:07:00,560
finally the results of the equality and

194
00:07:00,560 --> 00:07:03,039
the less than functions on digits

195
00:07:03,039 --> 00:07:05,199
are combined by the lexicographical

196
00:07:05,199 --> 00:07:06,319
order

197
00:07:06,319 --> 00:07:08,400
first we compute the lexicographical

198
00:07:08,400 --> 00:07:10,560
order per each block of the

199
00:07:10,560 --> 00:07:14,479
digits and then combine the results

200
00:07:14,479 --> 00:07:16,400
in the final lexicographical order

201
00:07:16,400 --> 00:07:18,000
equation that gives us

202
00:07:18,000 --> 00:07:23,520
1 if x is smaller than y and 0 otherwise

203
00:07:23,759 --> 00:07:26,080
so what are our contributions to this

204
00:07:26,080 --> 00:07:28,000
algorithm

205
00:07:28,000 --> 00:07:29,440
notice that the core part of the

206
00:07:29,440 --> 00:07:31,680
algorithm is the less than function over

207
00:07:31,680 --> 00:07:33,840
the prime field fb

208
00:07:33,840 --> 00:07:36,000
in the existing literature this function

209
00:07:36,000 --> 00:07:38,400
is the slowest one in the pipeline

210
00:07:38,400 --> 00:07:40,080
so how can we evaluate it more

211
00:07:40,080 --> 00:07:42,719
efficiently

212
00:07:42,880 --> 00:07:45,840
so the first method assumes that x and y

213
00:07:45,840 --> 00:07:47,520
are integers between zero

214
00:07:47,520 --> 00:07:50,639
and p minus one then the less than

215
00:07:50,639 --> 00:07:52,479
function is defined by the following

216
00:07:52,479 --> 00:07:53,440
lookup table

217
00:07:53,440 --> 00:07:56,319
which contains only once over its main

218
00:07:56,319 --> 00:07:57,280
diagonal

219
00:07:57,280 --> 00:08:00,639
and zeros anywhere else

220
00:08:00,639 --> 00:08:02,879
we can use the lagrange interpolation to

221
00:08:02,879 --> 00:08:04,720
find the polynomial of this function

222
00:08:04,720 --> 00:08:07,759
which will be of this form

223
00:08:07,759 --> 00:08:10,240
done it all showed in their paper that

224
00:08:10,240 --> 00:08:12,000
this polynomial can be computed in

225
00:08:12,000 --> 00:08:14,000
three p minus five non-scolar

226
00:08:14,000 --> 00:08:16,960
multiplications

227
00:08:17,360 --> 00:08:19,280
another method assumes that input

228
00:08:19,280 --> 00:08:21,599
integers are in the interval from zero

229
00:08:21,599 --> 00:08:22,080
to p

230
00:08:22,080 --> 00:08:25,840
over two and p is not prime

231
00:08:25,840 --> 00:08:27,919
in this case the less than function is

232
00:08:27,919 --> 00:08:28,879
reduced to the

233
00:08:28,879 --> 00:08:31,440
is negative function that checks whether

234
00:08:31,440 --> 00:08:33,440
the difference between the input values

235
00:08:33,440 --> 00:08:33,760
is

236
00:08:33,760 --> 00:08:36,240
negative this function has the following

237
00:08:36,240 --> 00:08:38,159
lookup table

238
00:08:38,159 --> 00:08:40,399
again using the lagrange interpolation

239
00:08:40,399 --> 00:08:42,240
we can find a polynomial for this

240
00:08:42,240 --> 00:08:43,120
function

241
00:08:43,120 --> 00:08:45,200
this method is called univariate because

242
00:08:45,200 --> 00:08:47,360
in fact we interpolate a univariate

243
00:08:47,360 --> 00:08:49,440
function

244
00:08:49,440 --> 00:08:51,519
it was shown that such function can be

245
00:08:51,519 --> 00:08:54,080
computed in about the square root of two

246
00:08:54,080 --> 00:08:58,160
p minus two non-scalar multiplications

247
00:08:58,160 --> 00:09:00,160
let's go back to the bivariate method

248
00:09:00,160 --> 00:09:02,320
which has the following form

249
00:09:02,320 --> 00:09:04,480
we proved that after expansion many

250
00:09:04,480 --> 00:09:06,480
coefficients of this polynomial cancel

251
00:09:06,480 --> 00:09:09,120
out such that the total degree becomes p

252
00:09:09,120 --> 00:09:10,720
instead of expected to p

253
00:09:10,720 --> 00:09:14,000
minus 2. in addition this polynomial

254
00:09:14,000 --> 00:09:16,000
always satisfy the following equality

255
00:09:16,000 --> 00:09:17,200
that simplifies

256
00:09:17,200 --> 00:09:20,959
its evaluation and as a result

257
00:09:20,959 --> 00:09:22,959
we can compute the less than function

258
00:09:22,959 --> 00:09:24,399
with 2p minus 6

259
00:09:24,399 --> 00:09:26,880
non-scalar multiplications and improve

260
00:09:26,880 --> 00:09:31,040
the complexity given by the prior work

261
00:09:31,200 --> 00:09:33,040
we also found that the univariate

262
00:09:33,040 --> 00:09:35,279
interpolation of the less than function

263
00:09:35,279 --> 00:09:38,000
has interesting structural properties

264
00:09:38,000 --> 00:09:38,480
first

265
00:09:38,480 --> 00:09:40,640
it can be represented as the sum of two

266
00:09:40,640 --> 00:09:41,760
polynomials where

267
00:09:41,760 --> 00:09:43,920
the first one is the exponent of the

268
00:09:43,920 --> 00:09:45,920
difference of two inputs

269
00:09:45,920 --> 00:09:47,760
and the second is the product of the

270
00:09:47,760 --> 00:09:49,680
difference with a polynomial of degree p

271
00:09:49,680 --> 00:09:51,440
minus 3 over 2

272
00:09:51,440 --> 00:09:53,519
evaluated at the square of the input

273
00:09:53,519 --> 00:09:55,680
difference

274
00:09:55,680 --> 00:09:57,680
as a result less non-scholar

275
00:09:57,680 --> 00:09:59,519
multiplications are needed

276
00:09:59,519 --> 00:10:01,839
to evaluate the less than function by a

277
00:10:01,839 --> 00:10:03,519
factor square root of 2

278
00:10:03,519 --> 00:10:06,880
in comparison to the prior work

279
00:10:06,880 --> 00:10:08,720
an interesting detail is that the

280
00:10:08,720 --> 00:10:10,240
leading term of the interpolation

281
00:10:10,240 --> 00:10:11,360
polynomial

282
00:10:11,360 --> 00:10:13,680
can be reused to compute the equality

283
00:10:13,680 --> 00:10:16,160
function almost for free

284
00:10:16,160 --> 00:10:17,680
and as a result we can save a

285
00:10:17,680 --> 00:10:19,200
significant number of non-scalar

286
00:10:19,200 --> 00:10:21,519
multiplications while evaluating the

287
00:10:21,519 --> 00:10:25,040
lexicographical order

288
00:10:25,839 --> 00:10:28,079
we can apply our observations to the

289
00:10:28,079 --> 00:10:29,839
minimum maximum functions

290
00:10:29,839 --> 00:10:31,519
that can be easily obtained from the

291
00:10:31,519 --> 00:10:34,000
less than function

292
00:10:34,000 --> 00:10:36,320
if we use the univariate method then the

293
00:10:36,320 --> 00:10:39,440
minimum function will look like this

294
00:10:39,440 --> 00:10:41,760
this says one multiplicative level as

295
00:10:41,760 --> 00:10:43,200
the complexity and the depth of the

296
00:10:43,200 --> 00:10:44,079
minimum function

297
00:10:44,079 --> 00:10:47,200
is the same as of the less than function

298
00:10:47,200 --> 00:10:49,440
plus we can compute the relu function

299
00:10:49,440 --> 00:10:50,880
which is very popular in machine

300
00:10:50,880 --> 00:10:52,880
learning

301
00:10:52,880 --> 00:10:54,959
we tested our faster circuits in two

302
00:10:54,959 --> 00:10:56,079
applications

303
00:10:56,079 --> 00:10:58,399
the first one is sorting where you are

304
00:10:58,399 --> 00:11:00,560
given an array of integers and the goal

305
00:11:00,560 --> 00:11:02,079
is to sort them

306
00:11:02,079 --> 00:11:05,040
we used the algorithm of chatting at all

307
00:11:05,040 --> 00:11:06,800
which has the minimum multiplicative

308
00:11:06,800 --> 00:11:07,760
depth

309
00:11:07,760 --> 00:11:10,160
let us illustrate it on a simple example

310
00:11:10,160 --> 00:11:12,839
where the input array has four

311
00:11:12,839 --> 00:11:15,440
integers step one of the algorithm is to

312
00:11:15,440 --> 00:11:17,200
compute the comparison matrix that

313
00:11:17,200 --> 00:11:19,040
contains the results of the less than

314
00:11:19,040 --> 00:11:20,320
function computed on

315
00:11:20,320 --> 00:11:22,399
any pair of elements from the input

316
00:11:22,399 --> 00:11:23,440
array

317
00:11:23,440 --> 00:11:25,120
we can make certain shortcuts while

318
00:11:25,120 --> 00:11:27,200
creating these metrics

319
00:11:27,200 --> 00:11:29,360
for example each element on the main

320
00:11:29,360 --> 00:11:31,200
diagonal of this matrix is

321
00:11:31,200 --> 00:11:34,320
always zero and also

322
00:11:34,320 --> 00:11:36,079
with relation to the main diagonal this

323
00:11:36,079 --> 00:11:38,240
matrix is anti-symmetric

324
00:11:38,240 --> 00:11:40,160
so you can look that for example this

325
00:11:40,160 --> 00:11:41,360
term is zero

326
00:11:41,360 --> 00:11:43,600
and its symmetric term with relation to

327
00:11:43,600 --> 00:11:46,720
the main diagonal is equal to one

328
00:11:46,720 --> 00:11:49,680
as a result we need only n times n minus

329
00:11:49,680 --> 00:11:51,680
one over two homomorphic comparisons in

330
00:11:51,680 --> 00:11:52,800
order to

331
00:11:52,800 --> 00:11:55,519
compute this matrix and these

332
00:11:55,519 --> 00:11:56,959
comparisons can be

333
00:11:56,959 --> 00:12:00,720
performed in parallel then we sum the

334
00:12:00,720 --> 00:12:02,000
rows of this matrix and

335
00:12:02,000 --> 00:12:05,600
obtain an array m this array contains

336
00:12:05,600 --> 00:12:07,120
the positions of the elements of the

337
00:12:07,120 --> 00:12:08,320
input array a

338
00:12:08,320 --> 00:12:11,839
and its sorted version

339
00:12:12,000 --> 00:12:14,399
in the second step we create a new array

340
00:12:14,399 --> 00:12:16,880
by homomorphically selecting entries of

341
00:12:16,880 --> 00:12:21,360
a using the information from the array m

342
00:12:21,360 --> 00:12:23,760
the selection uses the fact that this

343
00:12:23,760 --> 00:12:25,600
product of the equality function

344
00:12:25,600 --> 00:12:29,040
and an element h a is equal to a j

345
00:12:29,040 --> 00:12:32,800
if and only if the position of a j

346
00:12:32,800 --> 00:12:35,839
in the sorted array is

347
00:12:35,839 --> 00:12:39,200
equal to i and

348
00:12:39,200 --> 00:12:41,440
the position of the element aj in the

349
00:12:41,440 --> 00:12:42,560
sorted array is

350
00:12:42,560 --> 00:12:46,240
already encoded in the element mj

351
00:12:46,240 --> 00:12:50,639
otherwise this product will be zero

352
00:12:50,639 --> 00:12:52,240
as a result we can homomorphically

353
00:12:52,240 --> 00:12:54,320
compute the i element of the sorted

354
00:12:54,320 --> 00:12:56,240
array

355
00:12:56,240 --> 00:12:57,600
you can check that this algorithm

356
00:12:57,600 --> 00:12:59,200
returns the following array which is

357
00:12:59,200 --> 00:13:01,120
indeed the sorted version of the input

358
00:13:01,120 --> 00:13:03,839
array a

359
00:13:04,399 --> 00:13:06,800
another application of our circuits is

360
00:13:06,800 --> 00:13:09,760
the minimum maximum element of an array

361
00:13:09,760 --> 00:13:11,760
to compute the minimum element we could

362
00:13:11,760 --> 00:13:13,279
use the sorting algorithm

363
00:13:13,279 --> 00:13:15,760
but this requires a quadratic number of

364
00:13:15,760 --> 00:13:16,720
comparisons

365
00:13:16,720 --> 00:13:20,160
in the number of elements

366
00:13:20,160 --> 00:13:22,560
another way is to perform n minus one

367
00:13:22,560 --> 00:13:24,959
successive pairwise comparisons

368
00:13:24,959 --> 00:13:27,360
using the tournament method but in this

369
00:13:27,360 --> 00:13:30,959
case the depth will be practically big

370
00:13:30,959 --> 00:13:33,600
as a result we proposed a hybrid method

371
00:13:33,600 --> 00:13:36,480
by mixing two strategies

372
00:13:36,480 --> 00:13:38,720
first we perform t stages of the

373
00:13:38,720 --> 00:13:39,760
tournament method

374
00:13:39,760 --> 00:13:42,480
that outputs an array of a smaller size

375
00:13:42,480 --> 00:13:44,800
containing the minimum element

376
00:13:44,800 --> 00:13:47,279
and then we extract the minimal element

377
00:13:47,279 --> 00:13:49,279
using the sorting algorithm

378
00:13:49,279 --> 00:13:52,959
but now we need to sort less elements

379
00:13:52,959 --> 00:13:54,639
as a result the complexity of this

380
00:13:54,639 --> 00:13:56,079
approach is n minus

381
00:13:56,079 --> 00:13:59,120
and prime pairwise minimum functions and

382
00:13:59,120 --> 00:14:01,839
n prime times n prime minus one over 2

383
00:14:01,839 --> 00:14:04,720
less than functions

384
00:14:04,720 --> 00:14:06,800
we implemented the presented algorithms

385
00:14:06,800 --> 00:14:08,720
including the prior work in

386
00:14:08,720 --> 00:14:11,600
h leap which is a homomorphic encryption

387
00:14:11,600 --> 00:14:14,560
library realizing the pgv scheme

388
00:14:14,560 --> 00:14:17,040
for the experiments we used an average

389
00:14:17,040 --> 00:14:18,480
laptop

390
00:14:18,480 --> 00:14:20,639
we compared the performance of both our

391
00:14:20,639 --> 00:14:22,639
circuits of the less than function

392
00:14:22,639 --> 00:14:25,199
with a prior work of tan at all in this

393
00:14:25,199 --> 00:14:27,279
graph you can see the speed up factors

394
00:14:27,279 --> 00:14:29,440
of each of our circuits depending on the

395
00:14:29,440 --> 00:14:31,839
plaintext modulus p

396
00:14:31,839 --> 00:14:34,320
it's easy to see that the speedup factor

397
00:14:34,320 --> 00:14:36,240
of our bivariate circuit

398
00:14:36,240 --> 00:14:39,279
is almost constant and fluctuates around

399
00:14:39,279 --> 00:14:42,320
1.5 as predicted by theory

400
00:14:42,320 --> 00:14:44,480
the speed of factors of the univariate

401
00:14:44,480 --> 00:14:45,360
circuit

402
00:14:45,360 --> 00:14:49,440
is increasing with the modulus p

403
00:14:49,440 --> 00:14:51,040
the best running time that we could

404
00:14:51,040 --> 00:14:53,800
achieve is with the plaintext modulus of

405
00:14:53,800 --> 00:14:55,360
131.

406
00:14:55,360 --> 00:14:58,079
the total time is around 16 seconds but

407
00:14:58,079 --> 00:14:59,920
it is possible to encode several

408
00:14:59,920 --> 00:15:02,000
integers into one ciphertext

409
00:15:02,000 --> 00:15:03,920
and process them in parallel such that

410
00:15:03,920 --> 00:15:06,240
the amortized running time per integer

411
00:15:06,240 --> 00:15:07,839
is reduced

412
00:15:07,839 --> 00:15:10,720
we obtained 11 milliseconds per integer

413
00:15:10,720 --> 00:15:12,079
while the prior algorithm

414
00:15:12,079 --> 00:15:15,120
could achieve only 36 milliseconds this

415
00:15:15,120 --> 00:15:16,959
is an improvement by a factor of more

416
00:15:16,959 --> 00:15:19,040
than three

417
00:15:19,040 --> 00:15:21,519
we also sorted 32-bit integers and

418
00:15:21,519 --> 00:15:23,440
compared our results with the best work

419
00:15:23,440 --> 00:15:25,199
in this area by g team at

420
00:15:25,199 --> 00:15:28,560
all for any array length up to 64

421
00:15:28,560 --> 00:15:32,399
our algorithm is faster

422
00:15:32,880 --> 00:15:34,800
we also run the minimum element

423
00:15:34,800 --> 00:15:37,360
algorithm on array of the same length as

424
00:15:37,360 --> 00:15:39,920
in sorting here you can see the results

425
00:15:39,920 --> 00:15:43,759
for 32-bit integers

426
00:15:44,160 --> 00:15:46,560
in comparison to other he schemes our

427
00:15:46,560 --> 00:15:48,639
work is one of the fastest with relation

428
00:15:48,639 --> 00:15:51,120
to amortized time per integer

429
00:15:51,120 --> 00:15:54,079
note that it was believed that the bgbav

430
00:15:54,079 --> 00:15:54,880
schemes

431
00:15:54,880 --> 00:15:57,440
are inherently slower for comparison

432
00:15:57,440 --> 00:15:58,240
operations

433
00:15:58,240 --> 00:16:01,360
than the kvh-like schemes our work

434
00:16:01,360 --> 00:16:02,720
demonstrates that they have

435
00:16:02,720 --> 00:16:06,399
almost the same performance to conclude

436
00:16:06,399 --> 00:16:08,399
i sum up the main contributions of this

437
00:16:08,399 --> 00:16:09,279
work

438
00:16:09,279 --> 00:16:11,440
first we fully describe the comparison

439
00:16:11,440 --> 00:16:14,320
functions over finite fields

440
00:16:14,320 --> 00:16:16,320
then as a result we designed faster

441
00:16:16,320 --> 00:16:18,079
circuits for these functions

442
00:16:18,079 --> 00:16:19,839
that allowed us to improve the running

443
00:16:19,839 --> 00:16:22,639
time by factor free the corresponding

444
00:16:22,639 --> 00:16:25,040
speed up is shown in two applications

445
00:16:25,040 --> 00:16:28,399
sorting and array minimum maximum

446
00:16:28,399 --> 00:16:30,880
finally our circuits show that the bgv

447
00:16:30,880 --> 00:16:33,279
scheme is also suitable for integer

448
00:16:33,279 --> 00:16:34,240
comparison

449
00:16:34,240 --> 00:16:37,040
and can be as fast as tfhe and even

450
00:16:37,040 --> 00:16:40,399
better than the ckks scheme

451
00:16:40,399 --> 00:16:42,560
our future work will be focused on

452
00:16:42,560 --> 00:16:44,880
looking for other useful functions over

453
00:16:44,880 --> 00:16:46,240
rings and fields

454
00:16:46,240 --> 00:16:49,360
with efficient homomorphic circuits

455
00:16:49,360 --> 00:16:51,720
thank you very much and please ask

456
00:16:51,720 --> 00:16:54,720
questions

