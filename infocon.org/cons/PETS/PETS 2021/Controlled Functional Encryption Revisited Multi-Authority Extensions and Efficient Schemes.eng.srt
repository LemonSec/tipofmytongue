1
00:00:00,399 --> 00:00:01,920
in this work we present a

2
00:00:01,920 --> 00:00:03,120
multi-authority

3
00:00:03,120 --> 00:00:05,040
control function encryption scheme for

4
00:00:05,040 --> 00:00:08,000
quadratic functions

5
00:00:08,000 --> 00:00:09,679
traditional function encryption is a

6
00:00:09,679 --> 00:00:11,360
cryptographic primitive that enables

7
00:00:11,360 --> 00:00:12,960
data mining between three types of

8
00:00:12,960 --> 00:00:13,679
parties an

9
00:00:13,679 --> 00:00:16,800
authority data owners provide encrypted

10
00:00:16,800 --> 00:00:18,480
data and clients

11
00:00:18,480 --> 00:00:22,400
mining data supplied by by data owners

12
00:00:22,400 --> 00:00:24,240
the authority runs a setup algorithm

13
00:00:24,240 --> 00:00:26,640
defining a system-wide encryption key

14
00:00:26,640 --> 00:00:29,279
called the master public key and data

15
00:00:29,279 --> 00:00:30,000
owners can use

16
00:00:30,000 --> 00:00:33,040
hkey to encrypt their data the authority

17
00:00:33,040 --> 00:00:34,960
also distributes so-called function

18
00:00:34,960 --> 00:00:38,239
keys to clients and a client

19
00:00:38,239 --> 00:00:40,160
holding a function key for certain

20
00:00:40,160 --> 00:00:41,440
function f

21
00:00:41,440 --> 00:00:44,960
can learn f x from from a cipher text

22
00:00:44,960 --> 00:00:48,079
encrypting data x

23
00:00:48,239 --> 00:00:50,559
in short function encryption ensures

24
00:00:50,559 --> 00:00:52,000
that the client

25
00:00:52,000 --> 00:00:56,160
learns ffx and nothing more as such

26
00:00:56,160 --> 00:00:59,359
the authority can decide who can compute

27
00:00:59,359 --> 00:01:02,239
a function over encrypted data and which

28
00:01:02,239 --> 00:01:04,640
functions can be computed

29
00:01:04,640 --> 00:01:07,840
yet the authority has no control on the

30
00:01:07,840 --> 00:01:09,600
ciphertexts

31
00:01:09,600 --> 00:01:12,479
used to compute that function a client

32
00:01:12,479 --> 00:01:12,960
called

33
00:01:12,960 --> 00:01:14,799
a client holding function key for

34
00:01:14,799 --> 00:01:16,640
function f can evaluate

35
00:01:16,640 --> 00:01:20,240
f over any available ciphertext

36
00:01:20,240 --> 00:01:22,400
in a real world deployment function

37
00:01:22,400 --> 00:01:23,280
encryption

38
00:01:23,280 --> 00:01:25,280
could be used for analyzing sensitive

39
00:01:25,280 --> 00:01:28,080
data while receiving preserving privacy

40
00:01:28,080 --> 00:01:29,439
for example this could be used for

41
00:01:29,439 --> 00:01:32,159
genetic testing where each function key

42
00:01:32,159 --> 00:01:33,600
would correspond to

43
00:01:33,600 --> 00:01:36,079
certain genetic tests and the authority

44
00:01:36,079 --> 00:01:37,840
could control which client can run

45
00:01:37,840 --> 00:01:41,280
which test but the authority cannot

46
00:01:41,280 --> 00:01:42,799
prevent a client holding certain

47
00:01:42,799 --> 00:01:44,880
function key for a specific genetic test

48
00:01:44,880 --> 00:01:46,159
to run this test

49
00:01:46,159 --> 00:01:50,799
on any specific data on our ciphertext

50
00:01:50,880 --> 00:01:52,960
in reality function encryption could be

51
00:01:52,960 --> 00:01:54,560
enhanced to do so

52
00:01:54,560 --> 00:01:56,880
but the complexity of the scheme would

53
00:01:56,880 --> 00:01:58,479
grow considerably

54
00:01:58,479 --> 00:02:00,240
and the access control logic should be

55
00:02:00,240 --> 00:02:04,560
embedded in in the function key itself

56
00:02:06,960 --> 00:02:08,720
as we have seen in traditional

57
00:02:08,720 --> 00:02:10,080
functional encryption

58
00:02:10,080 --> 00:02:12,080
one can apply a given secret key to any

59
00:02:12,080 --> 00:02:13,760
cipher text

60
00:02:13,760 --> 00:02:16,319
instead control function encryption was

61
00:02:16,319 --> 00:02:18,599
introduced by navid and others in

62
00:02:18,599 --> 00:02:22,480
acmccs 2014 to allow the authority to

63
00:02:22,480 --> 00:02:24,080
extend control

64
00:02:24,080 --> 00:02:27,599
over the ciphertext that clients

65
00:02:27,599 --> 00:02:30,080
mine if we stick to the example of

66
00:02:30,080 --> 00:02:31,599
genomic tests

67
00:02:31,599 --> 00:02:33,360
now the authority can decide whether a

68
00:02:33,360 --> 00:02:35,280
particular client can run a specific

69
00:02:35,280 --> 00:02:38,400
test on a specific ciphertext or not

70
00:02:38,400 --> 00:02:40,800
in control function encryption the key

71
00:02:40,800 --> 00:02:42,640
generation algorithm becomes a two-party

72
00:02:42,640 --> 00:02:44,400
protocol between the authority

73
00:02:44,400 --> 00:02:46,879
and the client where the client provides

74
00:02:46,879 --> 00:02:48,959
both the ciphertext

75
00:02:48,959 --> 00:02:50,720
and a function and the authority uses

76
00:02:50,720 --> 00:02:52,879
their master secret key

77
00:02:52,879 --> 00:02:54,319
at the moment of encryption though the

78
00:02:54,319 --> 00:02:56,319
owners can choose a certain

79
00:02:56,319 --> 00:02:59,120
access policy called lambda that

80
00:02:59,120 --> 00:03:01,519
specifies what functions can be computed

81
00:03:01,519 --> 00:03:03,200
on the data and who can obtain the

82
00:03:03,200 --> 00:03:04,879
result during

83
00:03:04,879 --> 00:03:07,360
key generation the authority decides

84
00:03:07,360 --> 00:03:09,280
based on this policy lambda

85
00:03:09,280 --> 00:03:11,280
whether the key request is to be granted

86
00:03:11,280 --> 00:03:12,800
or not if so

87
00:03:12,800 --> 00:03:15,200
the client will receive a function key

88
00:03:15,200 --> 00:03:16,159
that only

89
00:03:16,159 --> 00:03:18,239
that is only functional on the requested

90
00:03:18,239 --> 00:03:20,959
ciphertext

91
00:03:21,120 --> 00:03:23,599
consequently in function encryption the

92
00:03:23,599 --> 00:03:25,519
authority becomes a policy evaluation

93
00:03:25,519 --> 00:03:26,560
and enforcement

94
00:03:26,560 --> 00:03:28,560
point to decide who can evaluate the

95
00:03:28,560 --> 00:03:30,400
function which functions can be

96
00:03:30,400 --> 00:03:33,120
evaluated and which cipher texts

97
00:03:33,120 --> 00:03:35,760
can be used for those evaluations of

98
00:03:35,760 --> 00:03:37,599
course data owners must trust the

99
00:03:37,599 --> 00:03:38,560
authority

100
00:03:38,560 --> 00:03:40,959
in correctly enforcing their policy

101
00:03:40,959 --> 00:03:42,879
ideally

102
00:03:42,879 --> 00:03:44,799
the key generation should require a

103
00:03:44,799 --> 00:03:46,799
minimal interaction for example

104
00:03:46,799 --> 00:03:49,120
being two rounds only one for the client

105
00:03:49,120 --> 00:03:50,000
to send

106
00:03:50,000 --> 00:03:52,720
the function and the safer text and the

107
00:03:52,720 --> 00:03:54,400
other for the authority to reply with

108
00:03:54,400 --> 00:03:55,519
the function

109
00:03:55,519 --> 00:03:58,720
or with a rejection message

110
00:03:58,720 --> 00:04:00,799
in mentioned first work about control

111
00:04:00,799 --> 00:04:02,400
function encryption

112
00:04:02,400 --> 00:04:05,360
the authors provide two schemes a very

113
00:04:05,360 --> 00:04:07,599
efficient one for linear functions

114
00:04:07,599 --> 00:04:10,560
and a general one for arbitrary circuits

115
00:04:10,560 --> 00:04:13,599
which relies on garbled circuits

116
00:04:13,599 --> 00:04:15,840
in our work we enhance control function

117
00:04:15,840 --> 00:04:17,440
encryption

118
00:04:17,440 --> 00:04:20,639
as presented by navid and others

119
00:04:20,639 --> 00:04:23,440
in several ways first we provide the

120
00:04:23,440 --> 00:04:24,960
control function encryption that

121
00:04:24,960 --> 00:04:29,759
accounts for multiple authorities

122
00:04:29,759 --> 00:04:31,440
in this way we can avoid a single point

123
00:04:31,440 --> 00:04:33,120
of failure of previous work

124
00:04:33,120 --> 00:04:35,600
in our scenario there are n authorities

125
00:04:35,600 --> 00:04:36,720
and all of them

126
00:04:36,720 --> 00:04:38,800
have to agree on an access control

127
00:04:38,800 --> 00:04:41,680
decision to make it effective

128
00:04:41,680 --> 00:04:43,520
next we extend the model to allow

129
00:04:43,520 --> 00:04:46,000
multiple data owners so that

130
00:04:46,000 --> 00:04:48,560
applications that require data from

131
00:04:48,560 --> 00:04:49,680
multiple sources

132
00:04:49,680 --> 00:04:53,280
like the genetic tests could be deployed

133
00:04:53,280 --> 00:04:55,440
finally we provide an instantiation that

134
00:04:55,440 --> 00:04:56,960
allows the competition of quadratic

135
00:04:56,960 --> 00:04:58,479
functions

136
00:04:58,479 --> 00:05:01,520
the tools we we use are cca

137
00:05:01,520 --> 00:05:03,199
public encryption and linear

138
00:05:03,199 --> 00:05:05,280
limbomorphic encryption

139
00:05:05,280 --> 00:05:08,400
similarly to the previous work

140
00:05:08,400 --> 00:05:10,639
our security definitions are geared

141
00:05:10,639 --> 00:05:12,160
towards malicious clients

142
00:05:12,160 --> 00:05:15,039
and semi-honest authorities note that

143
00:05:15,039 --> 00:05:16,880
our model accounts for scenarios where a

144
00:05:16,880 --> 00:05:19,759
client colludes with n-1 authorities

145
00:05:19,759 --> 00:05:21,759
or where all the authorities are

146
00:05:21,759 --> 00:05:24,639
corrected but the client is not

147
00:05:24,639 --> 00:05:26,880
we also implement a prototype and

148
00:05:26,880 --> 00:05:28,720
evaluate its performance on several

149
00:05:28,720 --> 00:05:31,360
experiments

150
00:05:31,919 --> 00:05:33,600
the following diagram provides an

151
00:05:33,600 --> 00:05:35,280
overview of our model

152
00:05:35,280 --> 00:05:37,520
there are multiple authorities and each

153
00:05:37,520 --> 00:05:39,520
goes through a setup algorithm to define

154
00:05:39,520 --> 00:05:41,600
public and private keys

155
00:05:41,600 --> 00:05:43,919
also clients have their own clan setup

156
00:05:43,919 --> 00:05:45,520
algorithm used to define their own

157
00:05:45,520 --> 00:05:46,560
public keys

158
00:05:46,560 --> 00:05:48,479
this is not shown in this slide to keep

159
00:05:48,479 --> 00:05:49,840
it simple

160
00:05:49,840 --> 00:05:51,840
know that client public keys were also

161
00:05:51,840 --> 00:05:54,160
implicitly assumed in previous work

162
00:05:54,160 --> 00:05:56,479
since their construction required a

163
00:05:56,479 --> 00:05:57,919
secure channel

164
00:05:57,919 --> 00:06:00,720
between the data owner and the client at

165
00:06:00,720 --> 00:06:01,759
encryption time

166
00:06:01,759 --> 00:06:05,280
each data owner who is also a client

167
00:06:05,280 --> 00:06:08,560
encrypts a data item and a policy under

168
00:06:08,560 --> 00:06:09,520
a public key

169
00:06:09,520 --> 00:06:11,680
that is the union of all authority

170
00:06:11,680 --> 00:06:12,800
public keys

171
00:06:12,800 --> 00:06:15,360
and their own public key for valuation

172
00:06:15,360 --> 00:06:17,440
given a vector of cipher texts

173
00:06:17,440 --> 00:06:20,800
possibly from multiple data owners

174
00:06:20,800 --> 00:06:24,160
and given a function a client engages

175
00:06:24,160 --> 00:06:26,080
in a key generation protocol with each

176
00:06:26,080 --> 00:06:27,840
of the authorities sequentially

177
00:06:27,840 --> 00:06:30,479
each authority analyzes the request and

178
00:06:30,479 --> 00:06:32,000
the policy is attached to the cipher

179
00:06:32,000 --> 00:06:32,880
texts

180
00:06:32,880 --> 00:06:35,199
and if all authorities grant the request

181
00:06:35,199 --> 00:06:36,479
the client will obtain

182
00:06:36,479 --> 00:06:39,440
a function key finally the client runs

183
00:06:39,440 --> 00:06:40,960
the decryption algorithm

184
00:06:40,960 --> 00:06:43,759
over the safer texts and the function

185
00:06:43,759 --> 00:06:44,400
key

186
00:06:44,400 --> 00:06:46,479
to obtain the value of the function

187
00:06:46,479 --> 00:06:50,159
evaluated over decide predicts

188
00:06:50,319 --> 00:06:52,160
in the following we will show our

189
00:06:52,160 --> 00:06:54,240
multi-thirty control function encryption

190
00:06:54,240 --> 00:06:55,599
instantiations

191
00:06:55,599 --> 00:06:59,199
in two steps first we show a single

192
00:06:59,199 --> 00:07:01,039
authority construction that ensures a

193
00:07:01,039 --> 00:07:03,840
technique from catalano and fury

194
00:07:03,840 --> 00:07:06,000
to evaluate quadratic functions over

195
00:07:06,000 --> 00:07:07,199
cipher texts

196
00:07:07,199 --> 00:07:09,520
encrypted by using a linear limomorphic

197
00:07:09,520 --> 00:07:11,440
encryption scheme

198
00:07:11,440 --> 00:07:14,080
next we show how to extend to multiple

199
00:07:14,080 --> 00:07:15,440
authorities by means of

200
00:07:15,440 --> 00:07:17,919
secret sharing and a distributed

201
00:07:17,919 --> 00:07:18,960
threshold version

202
00:07:18,960 --> 00:07:22,479
of the linoleum freak encryption scheme

203
00:07:22,479 --> 00:07:24,960
catalina and fiore proposed a technique

204
00:07:24,960 --> 00:07:27,199
for evaluating quadratic functions using

205
00:07:27,199 --> 00:07:30,560
linux encryption the idea is that to

206
00:07:30,560 --> 00:07:31,199
grip

207
00:07:31,199 --> 00:07:35,120
a value x from a certain finite ring

208
00:07:35,120 --> 00:07:36,880
like for example the integers module

209
00:07:36,880 --> 00:07:38,319
prime what

210
00:07:38,319 --> 00:07:40,720
one can sample randomness certain

211
00:07:40,720 --> 00:07:43,440
randomness are uniformly from the ring

212
00:07:43,440 --> 00:07:46,960
and define the ciphertext as x minus r

213
00:07:46,960 --> 00:07:49,360
and your linear human morph encryption

214
00:07:49,360 --> 00:07:51,199
of r

215
00:07:51,199 --> 00:07:54,879
having done this now everyone can

216
00:07:54,879 --> 00:07:57,120
homomorphically compute any quadratic

217
00:07:57,120 --> 00:07:58,720
function on x

218
00:07:58,720 --> 00:08:01,440
at the cost of getting the result masked

219
00:08:01,440 --> 00:08:03,039
by the same function applied on the

220
00:08:03,039 --> 00:08:04,000
randomness

221
00:08:04,000 --> 00:08:07,199
more precisely it is possible to compute

222
00:08:07,199 --> 00:08:09,520
a linearly monomorphic encryption of f

223
00:08:09,520 --> 00:08:11,120
of x minus f of

224
00:08:11,120 --> 00:08:14,800
r under the same public key even without

225
00:08:14,800 --> 00:08:16,720
knowing the secret key

226
00:08:16,720 --> 00:08:18,160
we will now show how to use this

227
00:08:18,160 --> 00:08:20,240
technique to build control function

228
00:08:20,240 --> 00:08:22,240
encryption

229
00:08:22,240 --> 00:08:24,000
in our control functional encryption

230
00:08:24,000 --> 00:08:26,240
construction for a single authority

231
00:08:26,240 --> 00:08:29,280
and quadratic functions ciphertexts

232
00:08:29,280 --> 00:08:32,719
consist of two parts a and b

233
00:08:32,719 --> 00:08:36,159
where a corresponds to x minus r and b

234
00:08:36,159 --> 00:08:38,240
to a linearly moved encryption of r

235
00:08:38,240 --> 00:08:41,120
under the client's public key

236
00:08:41,120 --> 00:08:44,000
having these two values the client could

237
00:08:44,000 --> 00:08:44,959
recover x

238
00:08:44,959 --> 00:08:47,680
that is why we add an additional layer

239
00:08:47,680 --> 00:08:50,320
of encryption on these two values

240
00:08:50,320 --> 00:08:55,200
using a cca to secure encryption scheme

241
00:08:55,200 --> 00:08:57,680
with the authorities public key

242
00:08:57,680 --> 00:08:59,600
furthermore the client is given

243
00:08:59,600 --> 00:09:02,320
randomness r in the clear on a key

244
00:09:02,320 --> 00:09:03,360
request

245
00:09:03,360 --> 00:09:05,279
the client sends this ciphertext to the

246
00:09:05,279 --> 00:09:08,240
authority who can remove the cca2 layer

247
00:09:08,240 --> 00:09:09,360
of encryption

248
00:09:09,360 --> 00:09:13,120
and compute f x minus f r minus f of r

249
00:09:13,120 --> 00:09:15,680
encrypted under the client's public key

250
00:09:15,680 --> 00:09:17,279
of the linearly monthly encryption

251
00:09:17,279 --> 00:09:18,480
scheme

252
00:09:18,480 --> 00:09:22,000
udl3d decides to grant the request

253
00:09:22,000 --> 00:09:24,000
based on the policy lab that was also

254
00:09:24,000 --> 00:09:26,080
given the client will receive

255
00:09:26,080 --> 00:09:29,680
the encryption of f of x minus f of r

256
00:09:29,680 --> 00:09:32,480
as a function key the client can now

257
00:09:32,480 --> 00:09:34,240
recover f of x minus

258
00:09:34,240 --> 00:09:38,000
f of r out of it using their secret key

259
00:09:38,000 --> 00:09:40,880
and can then remove ffr because the

260
00:09:40,880 --> 00:09:41,760
client knows

261
00:09:41,760 --> 00:09:45,839
r getting f x as desired

262
00:09:45,839 --> 00:09:48,959
r1230 control function encryption scheme

263
00:09:48,959 --> 00:09:51,440
is an extension of the previous single

264
00:09:51,440 --> 00:09:52,880
30 scheme

265
00:09:52,880 --> 00:09:55,920
however a number of technical challenges

266
00:09:55,920 --> 00:09:57,839
arise when trying to prevent the client

267
00:09:57,839 --> 00:10:00,000
colludes with up to

268
00:10:00,000 --> 00:10:03,120
all but one authority a key idea for

269
00:10:03,120 --> 00:10:04,399
construction

270
00:10:04,399 --> 00:10:08,160
is to secret secret share the encrypted

271
00:10:08,160 --> 00:10:09,920
message in particular to encrypt the

272
00:10:09,920 --> 00:10:10,399
value

273
00:10:10,399 --> 00:10:14,240
x the data owner picks n fresh blindings

274
00:10:14,240 --> 00:10:17,600
r1 to rn uniformly random

275
00:10:17,600 --> 00:10:21,200
assume that x is r0

276
00:10:21,200 --> 00:10:23,279
the data owner then gives rn in the

277
00:10:23,279 --> 00:10:24,800
clear to the client

278
00:10:24,800 --> 00:10:27,839
and creates a chain of cipher texts each

279
00:10:27,839 --> 00:10:28,399
of which

280
00:10:28,399 --> 00:10:31,519
is intended for certain authority and it

281
00:10:31,519 --> 00:10:33,920
is cca2 encrypted with the corresponding

282
00:10:33,920 --> 00:10:35,440
authorities public key

283
00:10:35,440 --> 00:10:38,399
the separatists associated with 3di

284
00:10:38,399 --> 00:10:40,160
contains

285
00:10:40,160 --> 00:10:43,519
r i minus 1 minus

286
00:10:43,519 --> 00:10:47,040
ri in the clear and also the encryption

287
00:10:47,040 --> 00:10:47,440
of

288
00:10:47,440 --> 00:10:50,480
ri and their a linearly myomorphic

289
00:10:50,480 --> 00:10:52,480
encryption scheme

290
00:10:52,480 --> 00:10:54,399
giving this information each authority

291
00:10:54,399 --> 00:10:55,839
can create

292
00:10:55,839 --> 00:10:58,959
the encryption of f

293
00:10:58,959 --> 00:11:02,079
of r i minus 1

294
00:11:02,079 --> 00:11:05,599
minus f of ri

295
00:11:07,040 --> 00:11:09,200
giving these values the client who can

296
00:11:09,200 --> 00:11:11,200
then decrypt

297
00:11:11,200 --> 00:11:12,880
aggregate the values and remove the

298
00:11:12,880 --> 00:11:14,240
additional term f of

299
00:11:14,240 --> 00:11:18,160
r n obtaining f of x as desired

300
00:11:18,160 --> 00:11:20,399
however this design has a security flow

301
00:11:20,399 --> 00:11:21,360
for example

302
00:11:21,360 --> 00:11:24,800
if the authority colludes with so i mean

303
00:11:24,800 --> 00:11:27,200
if the client collects with 31

304
00:11:27,200 --> 00:11:30,320
they can recover x since the authority

305
00:11:30,320 --> 00:11:31,120
has

306
00:11:31,120 --> 00:11:34,560
x minus r1 and also the encryption of r1

307
00:11:34,560 --> 00:11:35,839
but the client can decrypt the

308
00:11:35,839 --> 00:11:37,519
encryption for one obtaining r1 and

309
00:11:37,519 --> 00:11:40,480
consequently consequently x

310
00:11:40,480 --> 00:11:43,120
we fix this flow by using the notion of

311
00:11:43,120 --> 00:11:45,200
distributed threshold linearly monomeric

312
00:11:45,200 --> 00:11:46,399
encryption

313
00:11:46,399 --> 00:11:48,480
our idea is to use public keys from

314
00:11:48,480 --> 00:11:50,000
different authorities

315
00:11:50,000 --> 00:11:53,120
in their linear neumorphic ciphertext

316
00:11:53,120 --> 00:11:55,760
which can be removed sequentially during

317
00:11:55,760 --> 00:11:56,639
key generation

318
00:11:56,639 --> 00:11:58,320
we refer to the paper for more details

319
00:11:58,320 --> 00:12:00,880
about this notice how our construction

320
00:12:00,880 --> 00:12:02,720
imposes a specific order

321
00:12:02,720 --> 00:12:04,240
from communication with the authorities

322
00:12:04,240 --> 00:12:06,480
i'll be very nice to

323
00:12:06,480 --> 00:12:11,440
to relax this limitation in future work

324
00:12:11,440 --> 00:12:13,440
what we prove about our construction is

325
00:12:13,440 --> 00:12:14,639
that it is secure

326
00:12:14,639 --> 00:12:17,360
if at least one one party is honest

327
00:12:17,360 --> 00:12:18,079
either

328
00:12:18,079 --> 00:12:21,200
the client or one of the authorities

329
00:12:21,200 --> 00:12:24,480
and by security women that the data

330
00:12:24,480 --> 00:12:25,680
owners

331
00:12:25,680 --> 00:12:28,079
data is protected and only the value of

332
00:12:28,079 --> 00:12:30,000
the intended evaluations

333
00:12:30,000 --> 00:12:33,519
can be leaked we have implemented a

334
00:12:33,519 --> 00:12:34,720
journal library

335
00:12:34,720 --> 00:12:36,720
for control function encryption based on

336
00:12:36,720 --> 00:12:38,399
our constructions

337
00:12:38,399 --> 00:12:40,480
our library is written in ocam and uses

338
00:12:40,480 --> 00:12:41,760
a relic toolkit for

339
00:12:41,760 --> 00:12:44,880
elliptic curves we have also designed a

340
00:12:44,880 --> 00:12:46,959
simple programming language to describe

341
00:12:46,959 --> 00:12:48,160
circuits

342
00:12:48,160 --> 00:12:51,279
which gives users fine grain control on

343
00:12:51,279 --> 00:12:54,639
the wave functions are evaluated

344
00:12:54,639 --> 00:12:57,279
for the cca2 encryption primitive we

345
00:12:57,279 --> 00:12:58,000
choose

346
00:12:58,000 --> 00:13:01,120
hybrid encryption that uses aes with

347
00:13:01,120 --> 00:13:04,800
128 bits keys and the grammarship

348
00:13:04,800 --> 00:13:07,519
public key encryption scheme for the

349
00:13:07,519 --> 00:13:09,360
learnliar liam amore encryption scheme

350
00:13:09,360 --> 00:13:11,680
we implement both paella

351
00:13:11,680 --> 00:13:13,279
and el yamal and compare their

352
00:13:13,279 --> 00:13:15,200
performance

353
00:13:15,200 --> 00:13:19,040
for our multi-authority scheme however

354
00:13:19,040 --> 00:13:21,120
because our linearly amorphic encryption

355
00:13:21,120 --> 00:13:22,720
scheme must have the distributed

356
00:13:22,720 --> 00:13:24,000
threshold property

357
00:13:24,000 --> 00:13:26,000
our experiments are only based on

358
00:13:26,000 --> 00:13:27,440
optimal

359
00:13:27,440 --> 00:13:29,680
our experiments include evaluation of a

360
00:13:29,680 --> 00:13:31,519
machine learning classifier

361
00:13:31,519 --> 00:13:33,920
on encrypted data in particular we

362
00:13:33,920 --> 00:13:36,079
consider a quadratic classifier

363
00:13:36,079 --> 00:13:38,560
that maps encrypted images of the

364
00:13:38,560 --> 00:13:41,199
ionized data set

365
00:13:41,199 --> 00:13:44,320
represented handwritten digits into one

366
00:13:44,320 --> 00:13:45,360
out of 10 groups

367
00:13:45,360 --> 00:13:48,560
one per digit in table 1

368
00:13:48,560 --> 00:13:51,600
we report the times of encrypting these

369
00:13:51,600 --> 00:13:53,120
images with our control function

370
00:13:53,120 --> 00:13:54,399
encryption scheme

371
00:13:54,399 --> 00:13:56,320
and the times for key generation and

372
00:13:56,320 --> 00:13:58,240
decryption of the corresponding

373
00:13:58,240 --> 00:13:59,120
quadratic

374
00:13:59,120 --> 00:14:02,639
classifiers we also consider the

375
00:14:02,639 --> 00:14:04,399
scenario

376
00:14:04,399 --> 00:14:06,720
where both the data and the function to

377
00:14:06,720 --> 00:14:08,399
be evaluated are hidden

378
00:14:08,399 --> 00:14:10,079
in this case we need to sacrifice one

379
00:14:10,079 --> 00:14:12,000
degree in our computation

380
00:14:12,000 --> 00:14:17,199
and therefore our classifiers are linear

381
00:14:17,199 --> 00:14:19,440
and consequently less accurate the

382
00:14:19,440 --> 00:14:21,199
results in this case are reported in

383
00:14:21,199 --> 00:14:23,279
table 2.

384
00:14:23,279 --> 00:14:24,880
as we mentioned before for our

385
00:14:24,880 --> 00:14:26,480
multi-authority experiments

386
00:14:26,480 --> 00:14:29,440
we need to base our experiments on any

387
00:14:29,440 --> 00:14:31,120
since it is a linearly monomorphic

388
00:14:31,120 --> 00:14:32,720
encryption scheme which supports

389
00:14:32,720 --> 00:14:35,040
distributed threshold decryption

390
00:14:35,040 --> 00:14:38,800
and we cannot use paella in this case

391
00:14:38,800 --> 00:14:40,880
as a proof concept example we consider a

392
00:14:40,880 --> 00:14:43,120
small medical record with data of 30

393
00:14:43,120 --> 00:14:44,399
patients

394
00:14:44,399 --> 00:14:46,320
we encrypt the age and systolic blood

395
00:14:46,320 --> 00:14:48,480
pressure of every patient

396
00:14:48,480 --> 00:14:50,720
and evaluate simple linear regression

397
00:14:50,720 --> 00:14:52,320
and encrypted data

398
00:14:52,320 --> 00:14:54,720
we report the times in the figure where

399
00:14:54,720 --> 00:14:56,639
the key request is with respect to the

400
00:14:56,639 --> 00:14:58,399
four classifiers that we need

401
00:14:58,399 --> 00:15:01,440
in order to derive the regression line

402
00:15:01,440 --> 00:15:04,240
these are the average age average blood

403
00:15:04,240 --> 00:15:05,279
pressure

404
00:15:05,279 --> 00:15:07,440
the variance of the age variable and the

405
00:15:07,440 --> 00:15:09,360
covariance

406
00:15:09,360 --> 00:15:11,600
as expected the number of authorities

407
00:15:11,600 --> 00:15:12,720
slows down

408
00:15:12,720 --> 00:15:16,560
encryption and gain request linearly

409
00:15:16,560 --> 00:15:19,120
finally table 3 shows the size is

410
00:15:19,120 --> 00:15:20,959
relative to the implementation of our

411
00:15:20,959 --> 00:15:22,480
construction

412
00:15:22,480 --> 00:15:25,279
entries for plain text and cipher texts

413
00:15:25,279 --> 00:15:26,720
correspond to the size

414
00:15:26,720 --> 00:15:29,920
of encrypting one single integer

415
00:15:29,920 --> 00:15:31,600
whose size is bounded by the underlying

416
00:15:31,600 --> 00:15:34,079
ring note that encrypting

417
00:15:34,079 --> 00:15:38,199
a full mnist image requires encrypting 3

418
00:15:38,199 --> 00:15:41,040
784 integers

419
00:15:41,040 --> 00:15:42,560
also note that the size of

420
00:15:42,560 --> 00:15:43,920
multi-authority control function

421
00:15:43,920 --> 00:15:44,959
encryption

422
00:15:44,959 --> 00:15:48,320
keys is independent of the input length

423
00:15:48,320 --> 00:15:51,600
and the underlying function

424
00:15:51,920 --> 00:15:53,839
well that was all thank you very much

425
00:15:53,839 --> 00:15:56,720
for your attention

426
00:15:58,120 --> 00:16:01,120
bye

