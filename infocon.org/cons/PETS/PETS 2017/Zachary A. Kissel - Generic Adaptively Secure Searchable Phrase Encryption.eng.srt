1
00:00:00,060 --> 00:00:04,649
another boy<font color="#CCCCCC"> mystic</font><font color="#E5E5E5"> dogs coming up and so</font>

2
00:00:02,879 --> 00:00:07,740
the first law firm on the idea was to

3
00:00:04,650 --> 00:00:13,139
search<font color="#E5E5E5"> it with inclusion</font><font color="#CCCCCC"> and the first</font>

4
00:00:07,740 --> 00:00:15,629
is given by WP<font color="#E5E5E5"> center please</font><font color="#CCCCCC"> all right</font>

5
00:00:13,139 --> 00:00:18,390
so this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a joint work</font><font color="#E5E5E5"> with G Wang at</font>

6
00:00:15,630 --> 00:00:19,710
the University of Massachusetts<font color="#CCCCCC"> ok so</font>

7
00:00:18,390 --> 00:00:21,750
the<font color="#E5E5E5"> basic problem and searchable</font>

8
00:00:19,710 --> 00:00:23,609
encryption is to assume<font color="#CCCCCC"> that</font><font color="#E5E5E5"> Alice</font>

9
00:00:21,750 --> 00:00:25,859
<font color="#CCCCCC">opposes possesses a collection</font><font color="#E5E5E5"> of</font>

10
00:00:23,609 --> 00:00:28,710
documents<font color="#CCCCCC"> she wants a store in the cloud</font>

11
00:00:25,859 --> 00:00:30,810
<font color="#E5E5E5">and she wants to guarantee</font><font color="#CCCCCC"> two following</font>

12
00:00:28,710 --> 00:00:32,880
things<font color="#CCCCCC"> the documents cannot be read by</font>

13
00:00:30,810 --> 00:00:36,000
<font color="#E5E5E5">the cloud provider that's simple</font>

14
00:00:32,880 --> 00:00:38,100
encryption and<font color="#E5E5E5"> she can search over the</font>

15
00:00:36,000 --> 00:00:40,469
documents<font color="#CCCCCC"> using some query</font><font color="#E5E5E5"> queue without</font>

16
00:00:38,100 --> 00:00:43,050
<font color="#E5E5E5">revealing the query and that's the</font>

17
00:00:40,469 --> 00:00:44,700
<font color="#E5E5E5">problem searchable encryption the</font>

18
00:00:43,050 --> 00:00:47,038
general solutions in the literature work

19
00:00:44,700 --> 00:00:49,350
as follows<font color="#CCCCCC"> Alice has a</font><font color="#E5E5E5"> collection of</font>

20
00:00:47,039 --> 00:00:52,800
documents<font color="#E5E5E5"> she encrypts those documents</font>

21
00:00:49,350 --> 00:00:55,289
<font color="#E5E5E5">and puts them into</font><font color="#CCCCCC"> the cloud</font><font color="#E5E5E5"> she then</font>

22
00:00:52,800 --> 00:00:57,269
takes and builds an index<font color="#E5E5E5"> and encrypts</font>

23
00:00:55,289 --> 00:01:00,180
<font color="#E5E5E5">it this index is an inverted index in</font>

24
00:00:57,270 --> 00:01:03,449
particular<font color="#E5E5E5"> and it</font><font color="#CCCCCC"> maps queries to</font>

25
00:01:00,180 --> 00:01:06,360
documents that<font color="#CCCCCC"> match those queries</font><font color="#E5E5E5"> hey</font>

26
00:01:03,449 --> 00:01:08,850
when Alice wants<font color="#CCCCCC"> to make a query</font><font color="#E5E5E5"> she</font>

27
00:01:06,360 --> 00:01:11,729
<font color="#E5E5E5">generates a trapdoor sends that trapdoor</font>

28
00:01:08,850 --> 00:01:14,250
<font color="#E5E5E5">to Bob Bob uses the trapdoor and the</font>

29
00:01:11,729 --> 00:01:16,650
<font color="#E5E5E5">encrypted index to evaluate which</font>

30
00:01:14,250 --> 00:01:19,320
documents<font color="#E5E5E5"> match the query those</font>

31
00:01:16,650 --> 00:01:21,060
<font color="#E5E5E5">documents are then returned Alice</font>

32
00:01:19,320 --> 00:01:22,889
decrypts<font color="#E5E5E5"> and knows the solution to the</font>

33
00:01:21,060 --> 00:01:28,920
problem she was or<font color="#E5E5E5"> no it's the</font><font color="#CCCCCC"> solution</font>

34
00:01:22,890 --> 00:01:31,439
<font color="#E5E5E5">of the query ok the primitive consists</font>

35
00:01:28,920 --> 00:01:33,930
of four basic algorithms<font color="#E5E5E5"> a probabilistic</font>

36
00:01:31,439 --> 00:01:36,000
polynomial-time<font color="#E5E5E5"> setup algorithm that</font>

37
00:01:33,930 --> 00:01:38,400
<font color="#E5E5E5">takes the security parameter and returns</font>

38
00:01:36,000 --> 00:01:41,310
a key whose length is<font color="#E5E5E5"> polynomial and the</font>

39
00:01:38,400 --> 00:01:43,500
security parameter it takes the data

40
00:01:41,310 --> 00:01:46,140
culled index algorithm that takes<font color="#CCCCCC"> data</font>

41
00:01:43,500 --> 00:01:49,320
collection and a key and produces an

42
00:01:46,140 --> 00:01:52,259
encrypted index<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> polynomial on</font><font color="#E5E5E5"> the</font>

43
00:01:49,320 --> 00:01:54,658
size of the security parameter finally

44
00:01:52,259 --> 00:01:56,850
there's a token algorithm that given a

45
00:01:54,659 --> 00:01:58,710
query<font color="#E5E5E5"> in the key produces a token that</font>

46
00:01:56,850 --> 00:02:02,548
<font color="#E5E5E5">can be used to search over the encrypted</font>

47
00:01:58,710 --> 00:02:06,270
index the last algorithm is<font color="#E5E5E5"> search this</font>

48
00:02:02,549 --> 00:02:08,729
<font color="#E5E5E5">is</font><font color="#CCCCCC"> run by the</font><font color="#E5E5E5"> cloud pop it takes input</font>

49
00:02:06,270 --> 00:02:11,140
the encrypted<font color="#E5E5E5"> document collection and a</font>

50
00:02:08,729 --> 00:02:15,520
token<font color="#E5E5E5"> TQ and returns the match</font>

51
00:02:11,140 --> 00:02:17,589
documents security goal<font color="#E5E5E5"> a system like</font>

52
00:02:15,520 --> 00:02:20,319
this is you<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to guarantee the</font><font color="#E5E5E5"> cloud</font>

53
00:02:17,590 --> 00:02:22,720
learns nothing<font color="#E5E5E5"> about Alice's queries or</font>

54
00:02:20,319 --> 00:02:25,290
data except some acceptable amount<font color="#E5E5E5"> of</font>

55
00:02:22,720 --> 00:02:27,910
leakage<font color="#E5E5E5"> this is an absolute security</font>

56
00:02:25,290 --> 00:02:30,190
will model leakage is a stateful

57
00:02:27,910 --> 00:02:30,880
function and we're concerned with two

58
00:02:30,190 --> 00:02:32,709
<font color="#E5E5E5">pieces</font>

59
00:02:30,880 --> 00:02:35,140
what's leaked by<font color="#E5E5E5"> the existence of</font><font color="#CCCCCC"> that</font>

60
00:02:32,709 --> 00:02:40,180
collection<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the cloud and what's</font>

61
00:02:35,140 --> 00:02:43,119
leaked by query processing the

62
00:02:40,180 --> 00:02:46,360
<font color="#CCCCCC">state-of-the-art and security for sse is</font>

63
00:02:43,120 --> 00:02:48,489
called<font color="#CCCCCC"> CQ a to secure chosen query</font>

64
00:02:46,360 --> 00:02:50,320
attacks<font color="#CCCCCC"> and what</font><font color="#E5E5E5"> this means is there</font>

65
00:02:48,489 --> 00:02:52,780
<font color="#E5E5E5">does not exist a probabilistic</font>

66
00:02:50,320 --> 00:02:54,760
polynomial-time<font color="#E5E5E5"> adversary</font><font color="#CCCCCC"> that can</font>

67
00:02:52,780 --> 00:02:58,030
<font color="#E5E5E5">compromise the system even if they're</font>

68
00:02:54,760 --> 00:03:00,810
allowed adaptive queries and just to

69
00:02:58,030 --> 00:03:03,370
remind you of what adaptive queries are

70
00:03:00,810 --> 00:03:07,239
so we model security as a game in the

71
00:03:03,370 --> 00:03:10,750
real ideal paradigm the adversary first

72
00:03:07,239 --> 00:03:13,480
gives the game<font color="#E5E5E5"> the document said the</font>

73
00:03:10,750 --> 00:03:17,079
game produces an encrypted index and

74
00:03:13,480 --> 00:03:19,390
this is tracked inside a transcript<font color="#E5E5E5"> the</font>

75
00:03:17,079 --> 00:03:21,340
adversary then gives a query the game

76
00:03:19,390 --> 00:03:24,820
answers by giving the<font color="#CCCCCC"> total</font><font color="#E5E5E5"> the search</font>

77
00:03:21,340 --> 00:03:26,590
token and the results<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that gets out</font>

78
00:03:24,820 --> 00:03:31,769
of<font color="#CCCCCC"> the transcript</font><font color="#E5E5E5"> this can be repeated</font>

79
00:03:26,590 --> 00:03:34,000
<font color="#CCCCCC">and times</font><font color="#E5E5E5"> resulting in a real transcript</font>

80
00:03:31,769 --> 00:03:37,900
<font color="#E5E5E5">now if we happen to be in the ideal</font>

81
00:03:34,000 --> 00:03:39,640
<font color="#CCCCCC">world</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> introduce a simulator the</font>

82
00:03:37,900 --> 00:03:43,090
adversary again gives the data

83
00:03:39,640 --> 00:03:45,279
collection<font color="#CCCCCC"> to the game the</font><font color="#E5E5E5"> game instead</font>

84
00:03:43,090 --> 00:03:47,950
<font color="#CCCCCC">of performing any</font><font color="#E5E5E5"> computation</font><font color="#CCCCCC"> forwards</font>

85
00:03:45,280 --> 00:03:50,230
leakage to the simulator<font color="#CCCCCC"> the simulator</font>

86
00:03:47,950 --> 00:03:53,310
then uses<font color="#CCCCCC"> that leakage to produce an</font>

87
00:03:50,230 --> 00:03:57,578
encrypted index which it commits to and

88
00:03:53,310 --> 00:04:00,310
that is forwarded to the adversary<font color="#E5E5E5"> on</font><font color="#CCCCCC"> a</font>

89
00:03:57,579 --> 00:04:02,829
query the<font color="#CCCCCC"> query is</font><font color="#E5E5E5"> a folk forwarded to</font>

90
00:04:00,310 --> 00:04:05,650
the game the leakage to the simulator

91
00:04:02,829 --> 00:04:08,350
and<font color="#CCCCCC"> the simulator simulates what the</font>

92
00:04:05,650 --> 00:04:13,590
trapdoor should be and what<font color="#E5E5E5"> the results</font>

93
00:04:08,350 --> 00:04:16,810
<font color="#E5E5E5">are</font><font color="#CCCCCC"> and this can</font><font color="#E5E5E5"> be repeated and times</font>

94
00:04:13,590 --> 00:04:18,160
then we ask the<font color="#CCCCCC"> question is the real</font>

95
00:04:16,810 --> 00:04:19,599
transcript computationally

96
00:04:18,160 --> 00:04:22,200
indistinguishable from the ideal

97
00:04:19,599 --> 00:04:22,200
transcript

98
00:04:22,560 --> 00:04:28,680
so in this work our main contribution is

99
00:04:26,160 --> 00:04:31,080
the<font color="#E5E5E5"> theorem where we show that</font><font color="#CCCCCC"> NEC QA to</font>

100
00:04:28,680 --> 00:04:33,600
secure searchable encryption systems

101
00:04:31,080 --> 00:04:36,810
supporting keyword queries can<font color="#E5E5E5"> be used</font>

102
00:04:33,600 --> 00:04:39,450
to construct<font color="#CCCCCC"> a cqa to secure SSE system</font>

103
00:04:36,810 --> 00:04:42,960
that supports phrase queries<font color="#E5E5E5"> at the cost</font>

104
00:04:39,450 --> 00:04:44,909
of some<font color="#E5E5E5"> additional leakage so to show</font>

105
00:04:42,960 --> 00:04:46,169
you<font color="#CCCCCC"> how this theorem</font><font color="#E5E5E5"> works instead of</font>

106
00:04:44,910 --> 00:04:49,590
doing a proof<font color="#CCCCCC"> let's</font><font color="#E5E5E5"> look at an example</font>

107
00:04:46,169 --> 00:04:51,750
<font color="#CCCCCC">and this is going to</font><font color="#E5E5E5"> be based on the</font>

108
00:04:49,590 --> 00:04:55,739
keyword<font color="#E5E5E5"> SSE system due to</font><font color="#CCCCCC"> cache and</font>

109
00:04:51,750 --> 00:04:58,980
others and this<font color="#CCCCCC"> is cqa to secure so</font>

110
00:04:55,740 --> 00:05:01,140
<font color="#E5E5E5">Alice runs the</font><font color="#CCCCCC"> setup algorithm gives the</font>

111
00:04:58,980 --> 00:05:05,130
security parameter<font color="#E5E5E5"> gets the master key</font>

112
00:05:01,140 --> 00:05:08,909
<font color="#CCCCCC">which is polynomial in the security</font>

113
00:05:05,130 --> 00:05:12,300
parameter she then<font color="#E5E5E5"> goes on to build the</font>

114
00:05:08,910 --> 00:05:14,010
index where she's given the DB as a form

115
00:05:12,300 --> 00:05:16,110
of key value pairs<font color="#CCCCCC"> where the key is a</font>

116
00:05:14,010 --> 00:05:21,599
word<font color="#CCCCCC"> and the value is a document</font>

117
00:05:16,110 --> 00:05:24,380
identifier<font color="#E5E5E5"> then arrives a key value pair</font>

118
00:05:21,600 --> 00:05:27,450
that's encrypted<font color="#E5E5E5"> the left-hand side is a</font>

119
00:05:24,380 --> 00:05:29,040
pseudo-random<font color="#E5E5E5"> label the</font><font color="#CCCCCC"> right-hand side</font>

120
00:05:27,450 --> 00:05:31,200
is an encryption of<font color="#CCCCCC"> the document</font>

121
00:05:29,040 --> 00:05:33,150
identifier these pseudo-random labels

122
00:05:31,200 --> 00:05:36,719
are generated by applying<font color="#E5E5E5"> a</font>

123
00:05:33,150 --> 00:05:37,679
pseudo-random function with keys derived

124
00:05:36,720 --> 00:05:40,140
as follows

125
00:05:37,680 --> 00:05:44,970
so<font color="#CCCCCC"> the pseudo-random</font><font color="#E5E5E5"> function uses key</font><font color="#CCCCCC"> K</font>

126
00:05:40,140 --> 00:05:48,479
<font color="#CCCCCC">W 1 which is U which is derived from a</font>

127
00:05:44,970 --> 00:05:51,539
PRF keyed with the master key likewise

128
00:05:48,479 --> 00:05:54,080
for the encryption<font color="#E5E5E5"> algorithm we brought</font>

129
00:05:51,539 --> 00:05:57,390
apply a key derivation<font color="#E5E5E5"> function again</font>

130
00:05:54,080 --> 00:06:00,930
the C in the entry is a counter for the

131
00:05:57,390 --> 00:06:04,800
<font color="#E5E5E5">W that currency of that</font><font color="#CCCCCC"> key word in the</font>

132
00:06:00,930 --> 00:06:06,419
document<font color="#CCCCCC"> collection the leakage is</font>

133
00:06:04,800 --> 00:06:10,350
nothing more than the number<font color="#CCCCCC"> of entries</font>

134
00:06:06,419 --> 00:06:12,780
so this is<font color="#E5E5E5"> minor to generate the search</font>

135
00:06:10,350 --> 00:06:15,720
token you get a word in the master key

136
00:06:12,780 --> 00:06:21,000
and it outputs<font color="#E5E5E5"> the key pairs we saw and</font>

137
00:06:15,720 --> 00:06:24,360
build index to perform a search<font color="#E5E5E5"> Bob</font>

138
00:06:21,000 --> 00:06:26,400
Ford's<font color="#CCCCCC"> a token to the search algorithm</font>

139
00:06:24,360 --> 00:06:29,510
and then generates the first

140
00:06:26,400 --> 00:06:32,580
pseudo-random label by applying the PRF

141
00:06:29,510 --> 00:06:34,169
we then do a constant time lookup<font color="#E5E5E5"> into</font>

142
00:06:32,580 --> 00:06:37,498
<font color="#CCCCCC">the</font><font color="#E5E5E5"> EDB</font>

143
00:06:34,169 --> 00:06:41,128
and we store off the matching document

144
00:06:37,499 --> 00:06:44,159
identify or decrypting we<font color="#E5E5E5"> that apply the</font>

145
00:06:41,129 --> 00:06:47,610
next pseudo-random label find that in

146
00:06:44,159 --> 00:06:50,789
the<font color="#E5E5E5"> encrypted index return the document</font>

147
00:06:47,610 --> 00:06:53,310
identifier and then<font color="#E5E5E5"> we repeat the</font>

148
00:06:50,789 --> 00:06:57,688
<font color="#CCCCCC">process one last time</font><font color="#E5E5E5"> for pseudo-random</font>

149
00:06:53,310 --> 00:06:59,729
label<font color="#CCCCCC"> two we</font><font color="#E5E5E5"> find no entry and we return</font>

150
00:06:57,689 --> 00:07:03,650
the<font color="#E5E5E5"> results to Bob and those are the</font>

151
00:06:59,729 --> 00:07:06,150
matching documents the leakage here is

152
00:07:03,650 --> 00:07:07,859
the number<font color="#CCCCCC"> of documents</font><font color="#E5E5E5"> that match or</font>

153
00:07:06,150 --> 00:07:10,109
the<font color="#E5E5E5"> IDS</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the documents</font><font color="#CCCCCC"> that match and</font>

154
00:07:07,860 --> 00:07:12,659
the search pattern<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> nothing</font><font color="#E5E5E5"> more</font>

155
00:07:10,110 --> 00:07:18,029
<font color="#CCCCCC">than</font><font color="#E5E5E5"> the repeated documents</font><font color="#CCCCCC"> from</font>

156
00:07:12,659 --> 00:07:20,340
previous queries<font color="#E5E5E5"> now to do phrases we</font>

157
00:07:18,029 --> 00:07:22,650
look at a data structure<font color="#CCCCCC"> for information</font>

158
00:07:20,340 --> 00:07:25,589
<font color="#E5E5E5">retrieval which is called an X where it</font>

159
00:07:22,650 --> 00:07:29,219
index<font color="#E5E5E5"> this next word index takes</font><font color="#CCCCCC"> a vocab</font>

160
00:07:25,589 --> 00:07:31,259
list as a linked list<font color="#CCCCCC"> and</font><font color="#E5E5E5"> stores are not</font>

161
00:07:29,219 --> 00:07:32,969
pointed to another linked list<font color="#E5E5E5"> that</font>

162
00:07:31,259 --> 00:07:36,180
matches<font color="#CCCCCC"> the next words</font><font color="#E5E5E5"> that could follow</font>

163
00:07:32,969 --> 00:07:39,360
<font color="#E5E5E5">and off each next word is what's call</font>

164
00:07:36,180 --> 00:07:41,419
the posting<font color="#CCCCCC"> list</font><font color="#E5E5E5"> the posting</font><font color="#CCCCCC"> list starts</font>

165
00:07:39,360 --> 00:07:43,819
with<font color="#E5E5E5"> the number of documents</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> match</font>

166
00:07:41,419 --> 00:07:45,990
followed by the document identifier<font color="#E5E5E5"> x'</font>

167
00:07:43,819 --> 00:07:48,360
the number of<font color="#E5E5E5"> entries within the</font>

168
00:07:45,990 --> 00:07:53,610
document<font color="#E5E5E5"> that match and their locations</font>

169
00:07:48,360 --> 00:07:59,310
okay so document<font color="#CCCCCC"> 9 contains one instance</font>

170
00:07:53,610 --> 00:08:02,069
of<font color="#CCCCCC"> w1</font><font color="#E5E5E5"> w2 at position 4 now we take this</font>

171
00:07:59,310 --> 00:08:06,810
in this next word index structure and

172
00:08:02,069 --> 00:08:08,250
collapse it<font color="#E5E5E5"> into</font><font color="#CCCCCC"> a DB the keys are</font>

173
00:08:06,810 --> 00:08:10,289
<font color="#E5E5E5">consecutive pairs of words</font><font color="#CCCCCC"> and the next</font>

174
00:08:08,250 --> 00:08:11,849
word index and the values<font color="#E5E5E5"> are the</font>

175
00:08:10,289 --> 00:08:14,128
<font color="#E5E5E5">identifier of the document that contains</font>

176
00:08:11,849 --> 00:08:17,250
the key and the location in that

177
00:08:14,129 --> 00:08:19,349
<font color="#E5E5E5">document then we'll obfuscate the word</font>

178
00:08:17,250 --> 00:08:22,409
pair location information<font color="#E5E5E5"> to</font>

179
00:08:19,349 --> 00:08:25,889
qualitatively reduce the leakage and

180
00:08:22,409 --> 00:08:29,009
then we'll<font color="#CCCCCC"> construct the DB</font><font color="#E5E5E5"> so here's</font>

181
00:08:25,889 --> 00:08:31,949
how we<font color="#E5E5E5"> collapse that data structure we</font>

182
00:08:29,009 --> 00:08:34,769
notice<font color="#E5E5E5"> that we have</font><font color="#CCCCCC"> W 1 W 2 it occurs in</font>

183
00:08:31,949 --> 00:08:37,740
one location in document<font color="#E5E5E5"> 9 specifically</font>

184
00:08:34,769 --> 00:08:40,529
at location 4 we look at the same<font color="#E5E5E5"> with W</font>

185
00:08:37,740 --> 00:08:44,130
for W 3<font color="#CCCCCC"> it occurs at two locations in</font>

186
00:08:40,529 --> 00:08:46,180
document 3 4<font color="#E5E5E5"> and 8 respectively</font><font color="#CCCCCC"> and then</font>

187
00:08:44,130 --> 00:08:49,160
<font color="#E5E5E5">5 and</font><font color="#CCCCCC"> W for W</font><font color="#E5E5E5"> 2</font>

188
00:08:46,180 --> 00:08:54,349
<font color="#CCCCCC">- in document three five and nine and</font>

189
00:08:49,160 --> 00:08:57,920
three<font color="#E5E5E5"> in document 5 6 9 and 12 so now we</font>

190
00:08:54,350 --> 00:09:01,000
have key<font color="#CCCCCC"> value pairs</font><font color="#E5E5E5"> we're going to</font>

191
00:08:57,920 --> 00:09:04,670
<font color="#E5E5E5">sample a key</font><font color="#CCCCCC"> KL uniformly at random</font><font color="#E5E5E5"> and</font>

192
00:09:01,000 --> 00:09:06,740
for all key pairs we have<font color="#CCCCCC"> will update</font>

193
00:09:04,670 --> 00:09:09,920
the<font color="#CCCCCC"> location by tracking</font><font color="#E5E5E5"> the next</font>

194
00:09:06,740 --> 00:09:11,720
possible location then we'll obfuscate

195
00:09:09,920 --> 00:09:14,599
this by<font color="#CCCCCC"> applying a</font><font color="#E5E5E5"> pseudo-random</font>

196
00:09:11,720 --> 00:09:18,590
function and once we've<font color="#CCCCCC"> done this to all</font>

197
00:09:14,600 --> 00:09:22,130
<font color="#CCCCCC">documents we'll forget that key</font><font color="#E5E5E5"> now our</font>

198
00:09:18,590 --> 00:09:25,730
construction run setup of the cash

199
00:09:22,130 --> 00:09:28,880
scheme for<font color="#E5E5E5"> example as it had before</font>

200
00:09:25,730 --> 00:09:30,710
<font color="#CCCCCC">nothing</font><font color="#E5E5E5"> changes there build index now is</font>

201
00:09:28,880 --> 00:09:33,410
a little<font color="#E5E5E5"> different our index has word</font>

202
00:09:30,710 --> 00:09:35,930
pairs and we have this additional

203
00:09:33,410 --> 00:09:39,020
<font color="#E5E5E5">information</font><font color="#CCCCCC"> that's the obfuscated</font>

204
00:09:35,930 --> 00:09:42,469
location RN and RN<font color="#E5E5E5"> prime</font><font color="#CCCCCC"> RN</font><font color="#E5E5E5"> being</font><font color="#CCCCCC"> the</font>

205
00:09:39,020 --> 00:09:45,110
current<font color="#CCCCCC"> NAR and priming</font><font color="#E5E5E5"> the next this is</font>

206
00:09:42,470 --> 00:09:48,830
then pushed through we get pseudo-random

207
00:09:45,110 --> 00:09:50,930
labels as before<font color="#E5E5E5"> and encryption of</font><font color="#CCCCCC"> the</font>

208
00:09:48,830 --> 00:09:55,370
document ID and the location<font color="#CCCCCC"> information</font>

209
00:09:50,930 --> 00:09:57,709
here<font color="#E5E5E5"> commas are concatenation so the</font>

210
00:09:55,370 --> 00:10:01,040
keys<font color="#CCCCCC"> are the same</font><font color="#E5E5E5"> and the counter has</font>

211
00:09:57,710 --> 00:10:02,830
the same meaning the leakage is also

212
00:10:01,040 --> 00:10:05,510
very similar

213
00:10:02,830 --> 00:10:10,460
now when<font color="#E5E5E5"> Aleph wants to run the token</font>

214
00:10:05,510 --> 00:10:16,250
algorithm she<font color="#E5E5E5"> sends a phrase say W 1 W 2</font>

215
00:10:10,460 --> 00:10:19,310
W 3<font color="#E5E5E5"> she divides us into W 1 W 2 is up</font>

216
00:10:16,250 --> 00:10:21,550
with the token<font color="#E5E5E5"> saves that off</font>

217
00:10:19,310 --> 00:10:24,739
temporarily

218
00:10:21,550 --> 00:10:27,709
she then<font color="#E5E5E5"> forwards W 2 W 3</font><font color="#CCCCCC"> to the token</font>

219
00:10:24,740 --> 00:10:30,170
algorithm of<font color="#E5E5E5"> caches system outputs</font>

220
00:10:27,710 --> 00:10:32,690
another token<font color="#E5E5E5"> these two sub tokens are</font>

221
00:10:30,170 --> 00:10:37,209
then forwarded<font color="#E5E5E5"> as the token for the</font>

222
00:10:32,690 --> 00:10:42,950
<font color="#E5E5E5">overall phrase now when Bob runs search</font>

223
00:10:37,210 --> 00:10:47,480
he throws in the tokens run<font color="#E5E5E5"> search of</font>

224
00:10:42,950 --> 00:10:49,310
caches system on the EDB gets some

225
00:10:47,480 --> 00:10:51,680
results he stores those first results

226
00:10:49,310 --> 00:10:54,859
<font color="#E5E5E5">off to the side that's the running copy</font>

227
00:10:51,680 --> 00:10:57,890
of what is the where the<font color="#E5E5E5"> phrase exists</font>

228
00:10:54,860 --> 00:10:59,480
in the document<font color="#CCCCCC"> collection he then takes</font>

229
00:10:57,890 --> 00:11:02,060
the<font color="#E5E5E5"> next token</font>

230
00:10:59,480 --> 00:11:04,550
runs that through<font color="#E5E5E5"> and ends up with a new</font>

231
00:11:02,060 --> 00:11:07,939
set of documents<font color="#E5E5E5"> he now has to coalesce</font>

232
00:11:04,550 --> 00:11:11,949
these two results<font color="#CCCCCC"> to determine where</font>

233
00:11:07,940 --> 00:11:16,160
what documents contain both sub phrases

234
00:11:11,950 --> 00:11:18,440
<font color="#E5E5E5">he does this by comparing each new</font>

235
00:11:16,160 --> 00:11:20,540
result to the old results<font color="#E5E5E5"> he sees</font>

236
00:11:18,440 --> 00:11:23,330
documents don't match<font color="#E5E5E5"> ideas here so he</font>

237
00:11:20,540 --> 00:11:25,400
skips<font color="#CCCCCC"> that one again with</font><font color="#E5E5E5"> three they</font>

238
00:11:23,330 --> 00:11:28,970
don't match<font color="#CCCCCC"> so we can get</font><font color="#E5E5E5"> rid</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> four</font>

239
00:11:25,400 --> 00:11:31,250
it's impossible for<font color="#CCCCCC"> it</font><font color="#E5E5E5"> to occur we then</font>

240
00:11:28,970 --> 00:11:34,610
look at<font color="#E5E5E5"> three this is the last element</font>

241
00:11:31,250 --> 00:11:38,210
<font color="#E5E5E5">of</font><font color="#CCCCCC"> the last token</font><font color="#E5E5E5"> so when we compare</font>

242
00:11:34,610 --> 00:11:40,310
<font color="#E5E5E5">three</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> nine</font><font color="#CCCCCC"> nine doesn't occur so we</font>

243
00:11:38,210 --> 00:11:43,460
<font color="#CCCCCC">get rid of nine it can't occur in the</font>

244
00:11:40,310 --> 00:11:45,979
phrase<font color="#E5E5E5"> we then look at three the</font>

245
00:11:43,460 --> 00:11:49,580
document IDs match and<font color="#CCCCCC"> we'll also</font><font color="#E5E5E5"> say</font>

246
00:11:45,980 --> 00:11:51,830
<font color="#E5E5E5">that the location</font><font color="#CCCCCC"> information matches</font>

247
00:11:49,580 --> 00:11:56,630
specifically our two prime matches our

248
00:11:51,830 --> 00:11:59,330
four so<font color="#CCCCCC"> now we have</font><font color="#E5E5E5"> our result of three</font>

249
00:11:56,630 --> 00:12:02,360
which gets forwarded to Bob and Bob can

250
00:11:59,330 --> 00:12:04,910
forward two<font color="#E5E5E5"> L's the linkage here is a</font>

251
00:12:02,360 --> 00:12:06,800
lot<font color="#E5E5E5"> different</font><font color="#CCCCCC"> it's a lot higher</font><font color="#E5E5E5"> for</font>

252
00:12:04,910 --> 00:12:10,459
<font color="#CCCCCC">example it contains the leakage of both</font>

253
00:12:06,800 --> 00:12:12,890
the sub phrases the leakage due to the

254
00:12:10,460 --> 00:12:15,140
documents returned the search patterns

255
00:12:12,890 --> 00:12:17,840
of the two sub phrases<font color="#E5E5E5"> and also all the</font>

256
00:12:15,140 --> 00:12:21,650
location information<font color="#E5E5E5"> the obfuscated</font>

257
00:12:17,840 --> 00:12:23,180
location<font color="#CCCCCC"> information so in conclusion we</font>

258
00:12:21,650 --> 00:12:25,670
presented a generic construction<font color="#E5E5E5"> of</font>

259
00:12:23,180 --> 00:12:29,689
searchable phrase encryption based<font color="#E5E5E5"> on</font>

260
00:12:25,670 --> 00:12:31,339
<font color="#CCCCCC">NEC QA to secure</font><font color="#E5E5E5"> SSE system the</font><font color="#CCCCCC"> idea</font>

261
00:12:29,690 --> 00:12:33,860
again<font color="#CCCCCC"> was to</font><font color="#E5E5E5"> make word pairs key words</font>

262
00:12:31,340 --> 00:12:36,710
<font color="#E5E5E5">in store location</font><font color="#CCCCCC"> information is part of</font>

263
00:12:33,860 --> 00:12:38,810
the document<font color="#E5E5E5"> identifier we had the cost</font>

264
00:12:36,710 --> 00:12:41,360
of<font color="#CCCCCC"> additional leakage which is an open</font>

265
00:12:38,810 --> 00:12:44,359
problem to improve this<font color="#E5E5E5"> it's non-trivial</font>

266
00:12:41,360 --> 00:12:45,980
<font color="#E5E5E5">and see our paper for additional</font>

267
00:12:44,360 --> 00:12:48,170
constructions including dynamic<font color="#CCCCCC"> based</font>

268
00:12:45,980 --> 00:12:50,450
constructions<font color="#CCCCCC"> this is just the simplest</font>

269
00:12:48,170 --> 00:12:53,569
one performance<font color="#CCCCCC"> occurs</font><font color="#E5E5E5"> from</font>

270
00:12:50,450 --> 00:12:56,120
implementation we implemented one or two

271
00:12:53,570 --> 00:12:58,010
of<font color="#E5E5E5"> these systems the proof of the</font>

272
00:12:56,120 --> 00:13:00,350
compilers theorem if you're<font color="#E5E5E5"> into proofs</font>

273
00:12:58,010 --> 00:13:02,330
<font color="#E5E5E5">and a discussion of leakage abuse</font>

274
00:13:00,350 --> 00:13:07,120
attacks<font color="#E5E5E5"> which we're</font><font color="#CCCCCC"> gonna hear all about</font>

275
00:13:02,330 --> 00:13:07,120
the<font color="#E5E5E5"> next talk thank you</font>

276
00:13:07,830 --> 00:13:12,489
[Applause]

