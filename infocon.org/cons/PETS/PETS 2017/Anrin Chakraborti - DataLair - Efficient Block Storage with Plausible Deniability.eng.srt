1
00:00:10,790 --> 00:00:13,870
[Music]

2
00:00:18,650 --> 00:00:25,349
<font color="#E5E5E5">okay so hi</font><font color="#CCCCCC"> I'm hundred and I will be</font>

3
00:00:23,820 --> 00:00:27,330
talking<font color="#CCCCCC"> about data layer which is a</font>

4
00:00:25,350 --> 00:00:29,699
<font color="#E5E5E5">joint</font><font color="#CCCCCC"> work with</font><font color="#E5E5E5"> my colleague</font><font color="#CCCCCC"> Chen and my</font>

5
00:00:27,330 --> 00:00:32,189
<font color="#CCCCCC">advisor our design from Stony Brook</font>

6
00:00:29,699 --> 00:00:34,469
<font color="#CCCCCC">University and I hope</font><font color="#E5E5E5"> by the end of this</font>

7
00:00:32,189 --> 00:00:36,270
talk has convinced you that<font color="#E5E5E5"> data layer</font>

8
00:00:34,469 --> 00:00:37,829
is<font color="#E5E5E5"> a new storage mechanism that provides</font>

9
00:00:36,270 --> 00:00:41,309
<font color="#E5E5E5">possible deniability against multi</font>

10
00:00:37,829 --> 00:00:42,780
snapshot adversary's so before I go<font color="#E5E5E5"> into</font>

11
00:00:41,309 --> 00:00:44,788
<font color="#E5E5E5">the technical solution I would</font><font color="#CCCCCC"> like to</font>

12
00:00:42,780 --> 00:00:47,760
<font color="#CCCCCC">motivate the problem</font><font color="#E5E5E5"> and as I've</font>

13
00:00:44,789 --> 00:00:49,680
sketched here<font color="#E5E5E5"> these are some of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> cool</font>

14
00:00:47,760 --> 00:00:52,320
new<font color="#E5E5E5"> portable storage devices that we are</font>

15
00:00:49,680 --> 00:00:54,120
using and<font color="#E5E5E5"> we end up storing a</font><font color="#CCCCCC"> lot of</font>

16
00:00:52,320 --> 00:00:56,579
high<font color="#E5E5E5"> degree sensitive information on</font>

17
00:00:54,120 --> 00:00:59,489
them<font color="#E5E5E5"> such as I don't</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> social</font>

18
00:00:56,579 --> 00:01:01,230
security cards<font color="#CCCCCC"> etc and of course one of</font>

19
00:00:59,489 --> 00:01:06,479
our<font color="#CCCCCC"> goals should be to protect</font><font color="#E5E5E5"> this data</font>

20
00:01:01,230 --> 00:01:08,189
<font color="#E5E5E5">from untrusted parties now as</font><font color="#CCCCCC"> Colin's</font>

21
00:01:06,479 --> 00:01:09,960
wisdom<font color="#E5E5E5"> would suggest that we can use</font>

22
00:01:08,189 --> 00:01:13,158
encryption<font color="#E5E5E5"> we can encrypt our</font><font color="#CCCCCC"> pool disk</font>

23
00:01:09,960 --> 00:01:16,048
<font color="#E5E5E5">with tools such as BitLocker a DM crypt</font>

24
00:01:13,159 --> 00:01:19,530
<font color="#CCCCCC">which work with</font><font color="#E5E5E5"> almost minimal overheads</font>

25
00:01:16,049 --> 00:01:21,720
however trusting only<font color="#E5E5E5"> on encryption to</font>

26
00:01:19,530 --> 00:01:24,270
provide privacy has certain problems

27
00:01:21,720 --> 00:01:26,130
<font color="#CCCCCC">that</font><font color="#E5E5E5"> is summed up by</font><font color="#CCCCCC"> this cartoon which</font>

28
00:01:24,270 --> 00:01:28,140
<font color="#E5E5E5">is popular in the crypto circles which</font>

29
00:01:26,130 --> 00:01:30,089
says the easiest way to break<font color="#E5E5E5"> an</font>

30
00:01:28,140 --> 00:01:31,979
encryption scheme<font color="#E5E5E5"> is</font><font color="#CCCCCC"> to beat</font><font color="#E5E5E5"> the user</font>

31
00:01:30,090 --> 00:01:33,270
with the<font color="#E5E5E5"> proverbial rubber hose until</font>

32
00:01:31,979 --> 00:01:36,390
she reveals<font color="#CCCCCC"> her</font><font color="#E5E5E5"> encryption keys or</font>

33
00:01:33,270 --> 00:01:38,070
passwords<font color="#E5E5E5"> there might also be situations</font>

34
00:01:36,390 --> 00:01:40,110
<font color="#E5E5E5">where your government asks you to hand</font>

35
00:01:38,070 --> 00:01:41,610
over encryption keys<font color="#E5E5E5"> and that's not</font>

36
00:01:40,110 --> 00:01:43,500
<font color="#E5E5E5">really a problem and I'm not</font><font color="#CCCCCC"> advocating</font>

37
00:01:41,610 --> 00:01:45,810
<font color="#E5E5E5">you hiding information from your</font>

38
00:01:43,500 --> 00:01:48,479
<font color="#CCCCCC">government but this power needs</font><font color="#E5E5E5"> to be</font>

39
00:01:45,810 --> 00:01:50,700
used responsibly<font color="#CCCCCC"> so I have pulled</font><font color="#E5E5E5"> out</font>

40
00:01:48,479 --> 00:01:53,250
<font color="#E5E5E5">some</font><font color="#CCCCCC"> examples out of many that</font><font color="#E5E5E5"> are found</font>

41
00:01:50,700 --> 00:01:55,560
on human<font color="#CCCCCC"> rights watch where this power</font>

42
00:01:53,250 --> 00:01:57,119
has been misused<font color="#E5E5E5"> and even legitimate</font>

43
00:01:55,560 --> 00:01:59,180
<font color="#E5E5E5">users have</font><font color="#CCCCCC"> been</font><font color="#E5E5E5"> asked to provide</font>

44
00:01:57,119 --> 00:02:02,100
<font color="#E5E5E5">encryption keys to their sensitive data</font>

45
00:01:59,180 --> 00:02:03,630
so<font color="#E5E5E5"> clearly where you have coercive</font>

46
00:02:02,100 --> 00:02:05,339
<font color="#CCCCCC">adversary's that can ask for an</font>

47
00:02:03,630 --> 00:02:06,780
encryption key<font color="#E5E5E5"> from you you need</font>

48
00:02:05,340 --> 00:02:09,030
something stronger<font color="#E5E5E5"> than the simply</font>

49
00:02:06,780 --> 00:02:10,780
encryption and so<font color="#CCCCCC"> McDonald</font><font color="#E5E5E5"> at all in</font>

50
00:02:09,030 --> 00:02:13,300
their seminal paper suggests<font color="#E5E5E5"> across</font>

51
00:02:10,780 --> 00:02:16,420
deniability<font color="#CCCCCC"> which means</font><font color="#E5E5E5"> which allows you</font>

52
00:02:13,300 --> 00:02:17,650
to<font color="#E5E5E5"> idly claim to an adversary</font><font color="#CCCCCC"> that</font>

53
00:02:16,420 --> 00:02:19,600
<font color="#E5E5E5">you're not in possession of some</font>

54
00:02:17,650 --> 00:02:21,730
sensitive<font color="#E5E5E5"> information</font><font color="#CCCCCC"> and now this</font>

55
00:02:19,600 --> 00:02:23,200
adversary has to prove with some high

56
00:02:21,730 --> 00:02:25,470
<font color="#CCCCCC">level of confidence that this claim is</font>

57
00:02:23,200 --> 00:02:25,470
false

58
00:02:25,660 --> 00:02:30,310
moving<font color="#CCCCCC"> away a little bit from the story</font>

59
00:02:28,020 --> 00:02:31,959
<font color="#CCCCCC">I'll describe</font><font color="#E5E5E5"> the solution which was</font>

60
00:02:30,310 --> 00:02:34,750
popular for a few years called<font color="#CCCCCC"> TrueCrypt</font>

61
00:02:31,959 --> 00:02:36,850
<font color="#CCCCCC">and through group was basically a block</font>

62
00:02:34,750 --> 00:02:38,530
<font color="#CCCCCC">device level solution</font><font color="#E5E5E5"> allow you to</font>

63
00:02:36,850 --> 00:02:40,510
create multiple volumes some of which

64
00:02:38,530 --> 00:02:43,840
you could<font color="#E5E5E5"> claim to</font><font color="#CCCCCC"> be hidden and then</font>

65
00:02:40,510 --> 00:02:46,510
<font color="#CCCCCC">throughput</font><font color="#E5E5E5"> encrypt data from this hidden</font>

66
00:02:43,840 --> 00:02:48,040
volume and store it in<font color="#E5E5E5"> the free space of</font>

67
00:02:46,510 --> 00:02:49,750
the public data and then you could<font color="#E5E5E5"> came</font>

68
00:02:48,040 --> 00:02:52,600
to an<font color="#E5E5E5"> adversary that I just have public</font>

69
00:02:49,750 --> 00:02:53,890
data and<font color="#E5E5E5"> free space on my disk</font><font color="#CCCCCC"> was</font>

70
00:02:52,600 --> 00:02:55,450
<font color="#CCCCCC">created because it</font><font color="#E5E5E5"> worked with minimal</font>

71
00:02:53,890 --> 00:02:57,970
overheads

72
00:02:55,450 --> 00:03:00,609
the problem was<font color="#CCCCCC"> troupe did not provide</font>

73
00:02:57,970 --> 00:03:02,739
possible deniability<font color="#E5E5E5"> against what we</font>

74
00:03:00,610 --> 00:03:05,080
call a multi snapshot adversary<font color="#E5E5E5"> that can</font>

75
00:03:02,739 --> 00:03:06,430
access<font color="#E5E5E5"> the</font><font color="#CCCCCC"> user's</font><font color="#E5E5E5"> disk at multiple</font>

76
00:03:05,080 --> 00:03:09,100
points<font color="#CCCCCC"> in time and that is possibly</font>

77
00:03:06,430 --> 00:03:12,160
after every access the adversary and

78
00:03:09,100 --> 00:03:15,040
<font color="#CCCCCC">then save Dec snapshots file</font><font color="#E5E5E5"> system</font>

79
00:03:12,160 --> 00:03:16,390
States etc<font color="#E5E5E5"> and compare them and then can</font>

80
00:03:15,040 --> 00:03:18,130
detect all<font color="#CCCCCC"> the rights that</font><font color="#E5E5E5"> have taken</font>

81
00:03:16,390 --> 00:03:20,890
<font color="#E5E5E5">place in between these</font><font color="#CCCCCC"> snapshots so</font>

82
00:03:18,130 --> 00:03:22,600
<font color="#CCCCCC">purely in case</font><font color="#E5E5E5"> a group that virtually</font>

83
00:03:20,890 --> 00:03:24,040
would see<font color="#E5E5E5"> that the free space changes</font>

84
00:03:22,600 --> 00:03:25,420
<font color="#E5E5E5">frequently which should not be</font><font color="#CCCCCC"> the case</font>

85
00:03:24,040 --> 00:03:29,350
if you only have public data on your

86
00:03:25,420 --> 00:03:31,179
<font color="#CCCCCC">device</font><font color="#E5E5E5"> so then our claim is the other</font>

87
00:03:29,350 --> 00:03:33,400
provides efficient plausible deniability

88
00:03:31,180 --> 00:03:37,480
<font color="#CCCCCC">akane such strong multi snapshot</font>

89
00:03:33,400 --> 00:03:39,280
<font color="#E5E5E5">adversaries so when we started building</font>

90
00:03:37,480 --> 00:03:43,690
data<font color="#CCCCCC"> layer</font><font color="#E5E5E5"> first</font><font color="#CCCCCC"> we wanted</font><font color="#E5E5E5"> to understand</font>

91
00:03:39,280 --> 00:03:45,220
what we<font color="#CCCCCC"> really need to what we really</font>

92
00:03:43,690 --> 00:03:46,540
need for plausible deniability we wanted

93
00:03:45,220 --> 00:03:48,519
to reduce<font color="#CCCCCC"> it to some known security</font>

94
00:03:46,540 --> 00:03:49,959
<font color="#E5E5E5">primitives</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then implement them as a</font>

95
00:03:48,519 --> 00:03:53,140
part of our system<font color="#E5E5E5"> and then probably</font>

96
00:03:49,959 --> 00:03:56,680
<font color="#E5E5E5">show that we can we can guarantee</font>

97
00:03:53,140 --> 00:03:58,720
possible deniability<font color="#CCCCCC"> and we identified</font>

98
00:03:56,680 --> 00:04:00,970
<font color="#CCCCCC">two indistinguishability conditions</font>

99
00:03:58,720 --> 00:04:03,700
which we have termed as<font color="#CCCCCC"> AWA and dat</font><font color="#E5E5E5"> in</font>

100
00:04:00,970 --> 00:04:05,410
the paper<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we show that</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> two</font>

101
00:04:03,700 --> 00:04:07,060
<font color="#E5E5E5">conditions are in fact necessary and</font>

102
00:04:05,410 --> 00:04:08,739
sufficient for<font color="#E5E5E5"> you to claim that your</font>

103
00:04:07,060 --> 00:04:11,340
system is possibly<font color="#E5E5E5"> denial</font>

104
00:04:08,739 --> 00:04:14,489
against game of the snapshot<font color="#E5E5E5"> adversity</font><font color="#CCCCCC"> I</font>

105
00:04:11,340 --> 00:04:16,810
<font color="#CCCCCC">will probably define what this means</font><font color="#E5E5E5"> and</font>

106
00:04:14,489 --> 00:04:18,640
<font color="#CCCCCC">aww it basically means</font><font color="#E5E5E5"> breaking all</font>

107
00:04:16,810 --> 00:04:20,269
kinds<font color="#CCCCCC"> of links</font><font color="#E5E5E5"> between a logical address</font>

108
00:04:18,640 --> 00:04:23,270
<font color="#CCCCCC">space and a</font><font color="#E5E5E5"> physical</font><font color="#CCCCCC"> address space</font>

109
00:04:20,269 --> 00:04:25,069
supporting the<font color="#CCCCCC"> true preparin example you</font>

110
00:04:23,270 --> 00:04:26,568
have our<font color="#E5E5E5"> hidden logical volumes and you</font>

111
00:04:25,069 --> 00:04:28,849
have a<font color="#CCCCCC"> corresponding physical partition</font>

112
00:04:26,569 --> 00:04:30,380
on the disk<font color="#CCCCCC"> the location of data</font><font color="#E5E5E5"> a lot</font>

113
00:04:28,849 --> 00:04:32,090
<font color="#E5E5E5">of physical partition is independent of</font>

114
00:04:30,380 --> 00:04:34,370
<font color="#E5E5E5">its location in the hidden volume and</font>

115
00:04:32,090 --> 00:04:39,469
also independent<font color="#E5E5E5"> of whatever data you're</font>

116
00:04:34,370 --> 00:04:42,500
storing and it turns out that blaze at

117
00:04:39,470 --> 00:04:44,389
all from<font color="#CCCCCC"> CTS 2014</font><font color="#E5E5E5"> hi which was the</font>

118
00:04:42,500 --> 00:04:46,220
<font color="#E5E5E5">state-of-the-art</font><font color="#CCCCCC"> possible energy</font><font color="#E5E5E5"> scheme</font>

119
00:04:44,389 --> 00:04:47,630
when we wrote this paper showed that one

120
00:04:46,220 --> 00:04:50,180
of the ways we can<font color="#E5E5E5"> achieve this is using</font>

121
00:04:47,630 --> 00:04:52,219
<font color="#CCCCCC">a right on the Ora and we've also used</font>

122
00:04:50,180 --> 00:04:55,220
<font color="#CCCCCC">write</font><font color="#E5E5E5"> only or important data layer as I</font>

123
00:04:52,220 --> 00:04:58,220
will describe<font color="#CCCCCC"> later</font><font color="#E5E5E5"> the second property</font>

124
00:04:55,220 --> 00:05:00,710
<font color="#CCCCCC">we identified also informally means that</font>

125
00:04:58,220 --> 00:05:02,180
<font color="#E5E5E5">a device that has hidden data looks</font>

126
00:05:00,710 --> 00:05:04,340
indistinguishable<font color="#E5E5E5"> from a device that</font>

127
00:05:02,180 --> 00:05:06,259
does not<font color="#E5E5E5"> have it in data so in following</font>

128
00:05:04,340 --> 00:05:09,469
<font color="#E5E5E5">the true</font><font color="#CCCCCC"> crypt paradigm I did</font><font color="#E5E5E5"> which has</font>

129
00:05:06,259 --> 00:05:10,729
a logical<font color="#E5E5E5"> public volume and a logical</font>

130
00:05:09,470 --> 00:05:13,669
hidden volume and corresponding

131
00:05:10,729 --> 00:05:16,008
partitions<font color="#E5E5E5"> look identical</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> your device</font>

132
00:05:13,669 --> 00:05:18,229
which only has public data and then I

133
00:05:16,009 --> 00:05:19,849
can claim<font color="#CCCCCC"> to an</font><font color="#E5E5E5"> adversary that</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> only</font>

134
00:05:18,229 --> 00:05:21,949
store public data on my disk and I am

135
00:05:19,849 --> 00:05:24,860
only<font color="#CCCCCC"> using this for public data</font>

136
00:05:21,949 --> 00:05:26,419
<font color="#E5E5E5">operations now using these two</font>

137
00:05:24,860 --> 00:05:29,630
properties then we will data layer and

138
00:05:26,419 --> 00:05:31,669
<font color="#E5E5E5">there is to clear motivations the first</font>

139
00:05:29,630 --> 00:05:35,180
thing we want<font color="#E5E5E5"> to make public accesses as</font>

140
00:05:31,669 --> 00:05:36,650
efficient as possible<font color="#E5E5E5"> because it gives</font>

141
00:05:35,180 --> 00:05:38,630
you a plausible<font color="#CCCCCC"> reason to use this</font>

142
00:05:36,650 --> 00:05:41,419
device<font color="#E5E5E5"> without any hidden</font><font color="#CCCCCC"> data</font><font color="#E5E5E5"> it makes</font>

143
00:05:38,630 --> 00:05:43,849
no sense<font color="#E5E5E5"> to use a mechanism which is</font>

144
00:05:41,419 --> 00:05:45,349
orders of<font color="#CCCCCC"> magnitude slower</font><font color="#E5E5E5"> and claim</font>

145
00:05:43,849 --> 00:05:46,699
<font color="#CCCCCC">that you are using it only</font><font color="#E5E5E5"> for public</font>

146
00:05:45,349 --> 00:05:49,490
<font color="#E5E5E5">data operations and you do not have</font>

147
00:05:46,699 --> 00:05:52,550
<font color="#CCCCCC">hidden data</font><font color="#E5E5E5"> and it turns out this is</font>

148
00:05:49,490 --> 00:05:54,319
this<font color="#E5E5E5"> is not even challenging because we</font>

149
00:05:52,550 --> 00:05:55,940
<font color="#CCCCCC">do</font><font color="#E5E5E5"> not need any special special security</font>

150
00:05:54,319 --> 00:05:57,650
<font color="#E5E5E5">guarantees for our public data we are</font>

151
00:05:55,940 --> 00:06:01,219
<font color="#E5E5E5">not denying the existence of this public</font>

152
00:05:57,650 --> 00:06:03,020
data on the disk the second<font color="#E5E5E5"> we of course</font>

153
00:06:01,219 --> 00:06:06,800
want to<font color="#E5E5E5"> also speed up accesses to hidden</font>

154
00:06:03,020 --> 00:06:08,870
data and so we<font color="#E5E5E5"> design a new right Emilio</font>

155
00:06:06,800 --> 00:06:11,810
Rambaldi L or M which improves on the

156
00:06:08,870 --> 00:06:13,969
<font color="#E5E5E5">state of the art so first I'll talk</font>

157
00:06:11,810 --> 00:06:16,310
<font color="#E5E5E5">about what DL or M is and then show how</font>

158
00:06:13,969 --> 00:06:19,460
to use<font color="#E5E5E5"> it as a black</font><font color="#CCCCCC"> box for building</font>

159
00:06:16,310 --> 00:06:20,630
data layer so<font color="#E5E5E5"> DL or M is a position map</font>

160
00:06:19,460 --> 00:06:24,080
based program for all those<font color="#E5E5E5"> who are</font>

161
00:06:20,630 --> 00:06:25,819
<font color="#CCCCCC">aware of it and</font><font color="#E5E5E5"> DL Ora has two key</font>

162
00:06:24,080 --> 00:06:28,310
optimizations the first being the<font color="#E5E5E5"> L or M</font>

163
00:06:25,819 --> 00:06:31,219
stores the position map as an oblivious

164
00:06:28,310 --> 00:06:32,990
<font color="#CCCCCC">B+ tree</font><font color="#E5E5E5"> with the same data and this</font>

165
00:06:31,219 --> 00:06:34,670
conveniently avoids recursive

166
00:06:32,990 --> 00:06:36,520
<font color="#E5E5E5">reversal which is inherent</font><font color="#CCCCCC"> to most</font>

167
00:06:34,670 --> 00:06:39,770
position map based around the time

168
00:06:36,520 --> 00:06:42,140
setting and more importantly<font color="#CCCCCC"> DRM uses a</font>

169
00:06:39,770 --> 00:06:43,820
free block finding scheme that allows

170
00:06:42,140 --> 00:06:46,250
you to<font color="#E5E5E5"> find random free blocks for</font>

171
00:06:43,820 --> 00:06:48,680
writing data with constant disk access

172
00:06:46,250 --> 00:06:50,330
complexity we achieve this using<font color="#E5E5E5"> an</font>

173
00:06:48,680 --> 00:06:53,480
oblivious data structure to<font color="#E5E5E5"> store block</font>

174
00:06:50,330 --> 00:06:55,640
addresses of free blocks<font color="#E5E5E5"> and this gives</font>

175
00:06:53,480 --> 00:06:57,590
<font color="#E5E5E5">us an overall complexity</font><font color="#CCCCCC"> of order log n</font>

176
00:06:55,640 --> 00:07:00,560
<font color="#E5E5E5">versus order</font><font color="#CCCCCC"> lobster n which was</font><font color="#E5E5E5"> the</font>

177
00:06:57,590 --> 00:07:01,880
<font color="#CCCCCC">state-of-the-art</font><font color="#E5E5E5"> so this code could</font>

178
00:07:00,560 --> 00:07:03,170
discuss how the free block selection

179
00:07:01,880 --> 00:07:06,260
works and I will refer to<font color="#E5E5E5"> the paper for</font>

180
00:07:03,170 --> 00:07:08,390
details<font color="#E5E5E5"> on the position map so our</font>

181
00:07:06,260 --> 00:07:08,990
previous selection protocol is<font color="#CCCCCC"> actually</font>

182
00:07:08,390 --> 00:07:12,530
pretty simple

183
00:07:08,990 --> 00:07:14,210
so DL<font color="#CCCCCC"> or M creates okay</font><font color="#E5E5E5"> for anybody</font>

184
00:07:12,530 --> 00:07:16,280
who's aware of hive and the pre block

185
00:07:14,210 --> 00:07:18,289
selection protocol there<font color="#E5E5E5"> this is you can</font>

186
00:07:16,280 --> 00:07:22,130
view this as<font color="#E5E5E5"> a reverse of</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> process</font>

187
00:07:18,290 --> 00:07:24,590
and<font color="#CCCCCC"> so DL or M builds two sets of</font>

188
00:07:22,130 --> 00:07:27,800
constant size<font color="#E5E5E5"> each containing block</font>

189
00:07:24,590 --> 00:07:30,020
addresses the first<font color="#E5E5E5"> being</font><font color="#CCCCCC"> the preset the</font>

190
00:07:27,800 --> 00:07:31,490
preset contains randomly selected block

191
00:07:30,020 --> 00:07:33,650
addresses corresponding to blocks that

192
00:07:31,490 --> 00:07:36,130
<font color="#E5E5E5">are currently free on the</font><font color="#CCCCCC"> disk and a</font>

193
00:07:33,650 --> 00:07:38,419
<font color="#E5E5E5">random set that contains block addresses</font>

194
00:07:36,130 --> 00:07:40,790
corresponding to any<font color="#E5E5E5"> random block</font>

195
00:07:38,420 --> 00:07:43,310
selected<font color="#E5E5E5"> from the disk these two sets</font>

196
00:07:40,790 --> 00:07:45,410
are then combined and the<font color="#E5E5E5"> alluring forms</font>

197
00:07:43,310 --> 00:07:47,900
<font color="#E5E5E5">perform the final sampling</font><font color="#CCCCCC"> steps from</font>

198
00:07:45,410 --> 00:07:49,670
<font color="#E5E5E5">which you get a stamp sample of constant</font>

199
00:07:47,900 --> 00:07:52,099
number<font color="#CCCCCC"> of block addresses solves which</font>

200
00:07:49,670 --> 00:07:53,780
can be free<font color="#E5E5E5"> if you do end up</font><font color="#CCCCCC"> with some</font>

201
00:07:52,100 --> 00:07:55,340
block address corresponding to a free

202
00:07:53,780 --> 00:07:55,880
block you write the data to<font color="#E5E5E5"> this</font>

203
00:07:55,340 --> 00:07:58,789
location

204
00:07:55,880 --> 00:08:01,640
if not then you write it to an<font color="#E5E5E5"> in-memory</font>

205
00:07:58,790 --> 00:08:02,990
stash and it can be shown<font color="#E5E5E5"> that if</font><font color="#CCCCCC"> 50</font>

206
00:08:01,640 --> 00:08:04,669
<font color="#CCCCCC">percent of</font><font color="#E5E5E5"> the world is free then the</font>

207
00:08:02,990 --> 00:08:08,240
stash remains bounded to a constant<font color="#E5E5E5"> size</font>

208
00:08:04,670 --> 00:08:09,800
<font color="#E5E5E5">with very high probability now from this</font>

209
00:08:08,240 --> 00:08:12,260
slide<font color="#E5E5E5"> I would like to convince you that</font>

210
00:08:09,800 --> 00:08:14,270
this<font color="#E5E5E5"> mechanism works with constant disk</font>

211
00:08:12,260 --> 00:08:16,099
<font color="#CCCCCC">access complexity if we have some</font>

212
00:08:14,270 --> 00:08:19,310
mechanism to<font color="#E5E5E5"> track free blocks on the</font>

213
00:08:16,100 --> 00:08:22,100
disk with constant<font color="#E5E5E5"> except complexity and</font>

214
00:08:19,310 --> 00:08:23,600
in DL<font color="#E5E5E5"> or ramp we achieve this</font><font color="#CCCCCC"> using a</font>

215
00:08:22,100 --> 00:08:25,910
oblivious data structure which we call

216
00:08:23,600 --> 00:08:27,380
the free block matrix<font color="#CCCCCC"> and without</font><font color="#E5E5E5"> going</font>

217
00:08:25,910 --> 00:08:28,640
to too<font color="#E5E5E5"> much details of how free block</font>

218
00:08:27,380 --> 00:08:30,860
matrix<font color="#E5E5E5"> works I will give you the main</font>

219
00:08:28,640 --> 00:08:34,010
<font color="#E5E5E5">takeaway from this the</font><font color="#CCCCCC"> previous</font><font color="#E5E5E5"> matrix</font>

220
00:08:30,860 --> 00:08:35,630
<font color="#CCCCCC">stores block addresses corresponding to</font>

221
00:08:34,010 --> 00:08:38,600
blocks that<font color="#E5E5E5"> are currently free on the</font>

222
00:08:35,630 --> 00:08:40,280
<font color="#E5E5E5">disk</font><font color="#CCCCCC"> it can be obliviously</font><font color="#E5E5E5"> updated so it</font>

223
00:08:38,600 --> 00:08:41,830
<font color="#E5E5E5">means that entries from</font><font color="#CCCCCC"> the free block</font>

224
00:08:40,280 --> 00:08:44,920
matrix can be added<font color="#E5E5E5"> or removed</font>

225
00:08:41,830 --> 00:08:47,680
without leaking<font color="#CCCCCC"> information of what item</font>

226
00:08:44,920 --> 00:08:49,810
has been<font color="#E5E5E5"> accessed it will also allow</font><font color="#CCCCCC"> you</font>

227
00:08:47,680 --> 00:08:51,370
to uniformly randomly select addresses

228
00:08:49,810 --> 00:08:53,079
<font color="#E5E5E5">from within the free block matrix</font><font color="#CCCCCC"> and</font>

229
00:08:51,370 --> 00:08:54,519
both<font color="#CCCCCC"> of these operations</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> be</font>

230
00:08:53,080 --> 00:08:58,480
performed with constant number of<font color="#E5E5E5"> the</font>

231
00:08:54,519 --> 00:09:02,230
<font color="#E5E5E5">success complexity</font><font color="#CCCCCC"> then using this we</font>

232
00:08:58,480 --> 00:09:03,940
can<font color="#CCCCCC"> analyze how the</font><font color="#E5E5E5"> alarm</font><font color="#CCCCCC"> works and the</font>

233
00:09:02,230 --> 00:09:05,380
<font color="#CCCCCC">write complexity for D</font><font color="#E5E5E5"> Lauren is just a</font>

234
00:09:03,940 --> 00:09:07,660
combination of the<font color="#E5E5E5"> preview of collection</font>

235
00:09:05,380 --> 00:09:09,970
<font color="#E5E5E5">and updating the</font><font color="#CCCCCC"> B plus reposition map</font>

236
00:09:07,660 --> 00:09:11,620
which<font color="#CCCCCC"> has a height of log n so your</font>

237
00:09:09,970 --> 00:09:14,769
overall<font color="#E5E5E5"> write complexity is order log in</font>

238
00:09:11,620 --> 00:09:16,600
and your read complexity is just due to

239
00:09:14,769 --> 00:09:18,790
reading the position map which<font color="#E5E5E5"> is again</font>

240
00:09:16,600 --> 00:09:20,709
order log n so our<font color="#CCCCCC"> overall complexity</font>

241
00:09:18,790 --> 00:09:23,760
<font color="#E5E5E5">flex it is order log n compared to order</font>

242
00:09:20,709 --> 00:09:26,768
log square n for the state<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the art</font>

243
00:09:23,760 --> 00:09:28,899
now since a little<font color="#CCCCCC"> error was published</font>

244
00:09:26,769 --> 00:09:31,180
there<font color="#E5E5E5"> has been some follow-up work which</font>

245
00:09:28,899 --> 00:09:33,459
<font color="#E5E5E5">I would also like to highlight here so</font>

246
00:09:31,180 --> 00:09:36,279
we had last month<font color="#E5E5E5"> we were contacted</font><font color="#CCCCCC"> by</font>

247
00:09:33,459 --> 00:09:37,959
Ross at all from<font color="#CCCCCC"> US Naval</font><font color="#E5E5E5"> Academy</font><font color="#CCCCCC"> and</font>

248
00:09:36,279 --> 00:09:40,300
<font color="#E5E5E5">they said that they had</font><font color="#CCCCCC"> identified an</font>

249
00:09:37,959 --> 00:09:42,430
attack on DL or<font color="#E5E5E5"> M and another existing</font>

250
00:09:40,300 --> 00:09:44,529
right on your<font color="#CCCCCC"> M</font><font color="#E5E5E5"> called lateral run with</font>

251
00:09:42,430 --> 00:09:46,420
<font color="#E5E5E5">somebody's aware based on the fact that</font>

252
00:09:44,529 --> 00:09:48,339
the free block<font color="#CCCCCC"> selection</font><font color="#E5E5E5"> protocol will</font>

253
00:09:46,420 --> 00:09:50,890
select more number of<font color="#E5E5E5"> free blocks in the</font>

254
00:09:48,339 --> 00:09:54,010
combined set so we did some<font color="#E5E5E5"> follow-up</font>

255
00:09:50,890 --> 00:09:56,500
<font color="#E5E5E5">for which can</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> found here to pick this</font>

256
00:09:54,010 --> 00:09:58,360
attack and it<font color="#E5E5E5"> seems that there is a</font>

257
00:09:56,500 --> 00:10:01,149
simple fix<font color="#E5E5E5"> to this this is</font><font color="#CCCCCC"> our original</font>

258
00:09:58,360 --> 00:10:04,480
free block<font color="#CCCCCC"> collection protocol and here</font>

259
00:10:01,149 --> 00:10:06,959
<font color="#E5E5E5">instead of creating a random set we now</font>

260
00:10:04,480 --> 00:10:09,100
<font color="#E5E5E5">create a set of occupied block addresses</font>

261
00:10:06,959 --> 00:10:11,770
<font color="#CCCCCC">and the rest of the sampling step</font>

262
00:10:09,100 --> 00:10:14,050
remains the same in this<font color="#CCCCCC"> case we can in</font>

263
00:10:11,770 --> 00:10:15,610
<font color="#CCCCCC">fact show that the sample of blocks</font><font color="#E5E5E5"> that</font>

264
00:10:14,050 --> 00:10:17,260
are finally modified for<font color="#E5E5E5"> write is</font>

265
00:10:15,610 --> 00:10:19,690
indistinguishable from<font color="#E5E5E5"> a random samples</font>

266
00:10:17,260 --> 00:10:21,630
<font color="#E5E5E5">or in other words DL or M generates the</font>

267
00:10:19,690 --> 00:10:23,740
right<font color="#E5E5E5"> rate which can be generated</font><font color="#CCCCCC"> by</font>

268
00:10:21,630 --> 00:10:27,339
simulator with access<font color="#CCCCCC"> only to public</font>

269
00:10:23,740 --> 00:10:28,870
information<font color="#CCCCCC"> and to random Oracle again I</font>

270
00:10:27,339 --> 00:10:30,339
would<font color="#E5E5E5"> like to convince you that this</font>

271
00:10:28,870 --> 00:10:32,290
<font color="#E5E5E5">works with constant defects as</font>

272
00:10:30,339 --> 00:10:34,779
complexity if they can efficiently<font color="#E5E5E5"> store</font>

273
00:10:32,290 --> 00:10:36,670
block addresses for occupied blocks and

274
00:10:34,779 --> 00:10:39,339
since we know<font color="#CCCCCC"> how to do it</font><font color="#E5E5E5"> for free</font>

275
00:10:36,670 --> 00:10:41,229
blocks we can use a say<font color="#E5E5E5"> trick to store</font>

276
00:10:39,339 --> 00:10:42,670
block addresses for occupied blocks here

277
00:10:41,230 --> 00:10:44,589
again we use<font color="#E5E5E5"> something called the non</font>

278
00:10:42,670 --> 00:10:47,529
free block matrix<font color="#E5E5E5"> can be</font><font color="#CCCCCC"> updated</font>

279
00:10:44,589 --> 00:10:49,120
obliviously<font color="#E5E5E5"> and has a constant disk</font>

280
00:10:47,529 --> 00:10:51,910
<font color="#E5E5E5">access complexity</font>

281
00:10:49,120 --> 00:10:53,860
now using the order that we built<font color="#E5E5E5"> date</font>

282
00:10:51,910 --> 00:10:56,670
alert and first I'll describe data<font color="#CCCCCC"> light</font>

283
00:10:53,860 --> 00:10:59,649
which is<font color="#E5E5E5"> simplified form of our design</font>

284
00:10:56,670 --> 00:11:01,180
daily life creates two partitions on the

285
00:10:59,649 --> 00:11:02,709
disk<font color="#E5E5E5"> the public and the hidden partition</font>

286
00:11:01,180 --> 00:11:04,599
corresponding to<font color="#CCCCCC"> a</font><font color="#E5E5E5"> public under hidden</font>

287
00:11:02,709 --> 00:11:07,149
volume following the true<font color="#E5E5E5"> preparer line</font>

288
00:11:04,600 --> 00:11:09,399
<font color="#E5E5E5">and public volume operations are</font>

289
00:11:07,149 --> 00:11:10,629
performed without any address

290
00:11:09,399 --> 00:11:12,220
translation while hidden volume

291
00:11:10,629 --> 00:11:14,649
operations are performed through<font color="#CCCCCC"> DL or M</font>

292
00:11:12,220 --> 00:11:16,360
<font color="#E5E5E5">and by construction D L or M provides</font>

293
00:11:14,649 --> 00:11:20,410
<font color="#CCCCCC">Hwa which is one of the</font><font color="#E5E5E5"> necessary and</font>

294
00:11:16,360 --> 00:11:22,120
<font color="#CCCCCC">sufficient conditions</font><font color="#E5E5E5"> data Lele also</font>

295
00:11:20,410 --> 00:11:24,040
works in two modes<font color="#E5E5E5"> of</font><font color="#CCCCCC"> operations the</font>

296
00:11:22,120 --> 00:11:25,870
only public mode where data layer only

297
00:11:24,040 --> 00:11:27,370
<font color="#CCCCCC">tracks public data on the device and a</font>

298
00:11:25,870 --> 00:11:29,379
public hidden mode<font color="#CCCCCC"> when</font><font color="#E5E5E5"> a delay</font><font color="#CCCCCC"> tracks</font>

299
00:11:27,370 --> 00:11:32,050
both public and hidden<font color="#E5E5E5"> data the only</font>

300
00:11:29,379 --> 00:11:35,079
<font color="#E5E5E5">difference in</font><font color="#CCCCCC"> axis here is when in</font><font color="#E5E5E5"> only</font>

301
00:11:32,050 --> 00:11:37,599
public mode<font color="#CCCCCC"> an access</font><font color="#E5E5E5"> to the public data</font>

302
00:11:35,079 --> 00:11:40,239
is accompanied by an<font color="#CCCCCC"> access simulation</font>

303
00:11:37,600 --> 00:11:41,860
to DL or<font color="#CCCCCC"> amp while in the public hidden</font>

304
00:11:40,240 --> 00:11:43,749
mode access to the<font color="#E5E5E5"> public data is</font>

305
00:11:41,860 --> 00:11:46,149
accompanied with<font color="#E5E5E5"> real access to DL</font><font color="#CCCCCC"> or</font>

306
00:11:43,749 --> 00:11:47,829
else we also show that<font color="#CCCCCC"> these two</font><font color="#E5E5E5"> modes</font>

307
00:11:46,149 --> 00:11:51,189
<font color="#E5E5E5">of operations are indistinguishable and</font>

308
00:11:47,829 --> 00:11:54,579
thus the data layer<font color="#E5E5E5"> light is secured</font>

309
00:11:51,189 --> 00:11:56,199
against the<font color="#E5E5E5"> multis natural adversary now</font>

310
00:11:54,579 --> 00:11:58,329
<font color="#E5E5E5">daily life from a security perspective</font>

311
00:11:56,199 --> 00:12:00,870
<font color="#E5E5E5">works because it follows both the</font>

312
00:11:58,329 --> 00:12:02,769
necessary<font color="#E5E5E5"> and sufficient conditions for</font>

313
00:12:00,870 --> 00:12:04,839
ensuring possible deniability

314
00:12:02,769 --> 00:12:06,519
however<font color="#E5E5E5"> it's waste space so you have to</font>

315
00:12:04,839 --> 00:12:08,079
create two partitions<font color="#E5E5E5"> even though you</font>

316
00:12:06,519 --> 00:12:11,019
might<font color="#CCCCCC"> not be storing any kind</font><font color="#E5E5E5"> of hidden</font>

317
00:12:08,079 --> 00:12:12,939
<font color="#CCCCCC">data and so we</font><font color="#E5E5E5"> go ahead and we build</font>

318
00:12:11,019 --> 00:12:15,699
<font color="#E5E5E5">data layer which merges this hidden and</font>

319
00:12:12,939 --> 00:12:17,469
public partitions however now we have to

320
00:12:15,699 --> 00:12:19,300
<font color="#E5E5E5">keep track</font><font color="#CCCCCC"> of two things</font><font color="#E5E5E5"> we have</font><font color="#CCCCCC"> to</font>

321
00:12:17,470 --> 00:12:21,550
avoid<font color="#CCCCCC"> overwriting of data both hidden</font>

322
00:12:19,300 --> 00:12:24,849
and public and we have to avoid visible

323
00:12:21,550 --> 00:12:26,349
patterns where hidden data might<font color="#CCCCCC"> where</font>

324
00:12:24,850 --> 00:12:27,759
public data might avoid<font color="#E5E5E5"> writing to</font>

325
00:12:26,350 --> 00:12:29,230
locations which are already<font color="#E5E5E5"> occupied by</font>

326
00:12:27,759 --> 00:12:31,480
hidden data<font color="#CCCCCC"> thus leaking that</font><font color="#E5E5E5"> is are</font>

327
00:12:29,230 --> 00:12:33,490
more<font color="#E5E5E5"> than public data on your disk now</font>

328
00:12:31,480 --> 00:12:35,620
this is a<font color="#E5E5E5"> non-trivial conversion from</font>

329
00:12:33,490 --> 00:12:40,329
<font color="#E5E5E5">data</font><font color="#CCCCCC"> L light to</font><font color="#E5E5E5"> raid alert so I refer to</font>

330
00:12:35,620 --> 00:12:41,920
<font color="#E5E5E5">the paper for more details so yep</font>

331
00:12:40,329 --> 00:12:45,699
now let's talk about<font color="#E5E5E5"> how the inner</font>

332
00:12:41,920 --> 00:12:47,469
really works<font color="#E5E5E5"> on real hardware so we will</font>

333
00:12:45,699 --> 00:12:49,389
implement a<font color="#E5E5E5"> tailor as a device mapper</font>

334
00:12:47,470 --> 00:12:52,360
for the Linux<font color="#CCCCCC"> kernel and we are</font>

335
00:12:49,389 --> 00:12:54,279
evaluated on<font color="#CCCCCC"> an SSD using Bonney plus</font>

336
00:12:52,360 --> 00:12:57,639
plus the txt<font color="#E5E5E5"> for file systems built on</font>

337
00:12:54,279 --> 00:13:00,220
the logical volumes<font color="#E5E5E5"> the two metrics for</font>

338
00:12:57,639 --> 00:13:01,580
our<font color="#CCCCCC"> comparison</font><font color="#E5E5E5"> where throughput and</font>

339
00:13:00,220 --> 00:13:05,950
latency

340
00:13:01,580 --> 00:13:08,630
and we compared with<font color="#CCCCCC"> DM</font><font color="#E5E5E5"> crypt which is a</font>

341
00:13:05,950 --> 00:13:11,030
commonly<font color="#CCCCCC"> used as consumption</font><font color="#E5E5E5"> tool and</font><font color="#CCCCCC"> hi</font>

342
00:13:08,630 --> 00:13:14,030
which was the state<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the art when</font><font color="#CCCCCC"> this</font>

343
00:13:11,030 --> 00:13:16,209
paper was published<font color="#E5E5E5"> and the main</font>

344
00:13:14,030 --> 00:13:18,650
takeaway from this<font color="#E5E5E5"> slide is that</font><font color="#CCCCCC"> de leur</font>

345
00:13:16,210 --> 00:13:20,240
<font color="#E5E5E5">public</font><font color="#CCCCCC"> read-through puts a</font><font color="#E5E5E5"> 95 times</font>

346
00:13:18,650 --> 00:13:23,270
faster than<font color="#CCCCCC"> hive because</font><font color="#E5E5E5"> it's not</font>

347
00:13:20,240 --> 00:13:24,830
affected by the or an<font color="#E5E5E5"> overhead while we</font>

348
00:13:23,270 --> 00:13:27,199
have<font color="#E5E5E5"> a logarithmic improvement for right</font>

349
00:13:24,830 --> 00:13:29,620
both public<font color="#E5E5E5"> and hidden due to the better</font>

350
00:13:27,200 --> 00:13:31,940
asymptotic complexity of the<font color="#CCCCCC"> Alaura</font>

351
00:13:29,620 --> 00:13:36,830
latency will follow the same number so

352
00:13:31,940 --> 00:13:37,970
I'll skip<font color="#E5E5E5"> the slide here and finally</font><font color="#CCCCCC"> to</font>

353
00:13:36,830 --> 00:13:40,280
bridge the gap and<font color="#CCCCCC"> to make public</font>

354
00:13:37,970 --> 00:13:41,780
accesses more inefficient<font color="#CCCCCC"> we</font><font color="#E5E5E5"> prefer we</font>

355
00:13:40,280 --> 00:13:43,550
propose<font color="#CCCCCC"> two</font><font color="#E5E5E5"> optimizations</font>

356
00:13:41,780 --> 00:13:45,140
one is to perform<font color="#E5E5E5"> in place public</font>

357
00:13:43,550 --> 00:13:46,609
updates<font color="#E5E5E5"> and provides by performing</font>

358
00:13:45,140 --> 00:13:48,530
hidden<font color="#CCCCCC"> rates with only</font><font color="#E5E5E5"> these public</font>

359
00:13:46,610 --> 00:13:50,990
updates<font color="#CCCCCC"> and second is</font><font color="#E5E5E5"> to delayed and</font>

360
00:13:48,530 --> 00:13:52,550
<font color="#CCCCCC">writes and then it can be shown the</font>

361
00:13:50,990 --> 00:13:54,770
<font color="#E5E5E5">dealer achieves a maximum throughput of</font>

362
00:13:52,550 --> 00:13:56,359
32 megabytes per second which is orders

363
00:13:54,770 --> 00:13:58,939
of<font color="#E5E5E5"> magnitude</font><font color="#CCCCCC"> faster than previous work</font>

364
00:13:56,360 --> 00:14:01,970
and only<font color="#E5E5E5"> a few times slower than a raw</font>

365
00:13:58,940 --> 00:14:04,550
disk<font color="#E5E5E5"> finally I have some concluding</font>

366
00:14:01,970 --> 00:14:06,140
<font color="#CCCCCC">remarks which says that in this</font><font color="#E5E5E5"> paper we</font>

367
00:14:04,550 --> 00:14:07,699
show that it is<font color="#E5E5E5"> possible</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> build a</font>

368
00:14:06,140 --> 00:14:09,800
patient plausible deniability<font color="#CCCCCC"> systems</font>

369
00:14:07,700 --> 00:14:12,170
however<font color="#E5E5E5"> we are still far away from a</font>

370
00:14:09,800 --> 00:14:15,560
<font color="#E5E5E5">final</font><font color="#CCCCCC"> solution which</font><font color="#E5E5E5"> can replace simple</font>

371
00:14:12,170 --> 00:14:17,060
encryption at the<font color="#CCCCCC"> go-to standard tool</font><font color="#E5E5E5"> we</font>

372
00:14:15,560 --> 00:14:18,500
still have to talk<font color="#E5E5E5"> about usability how</font>

373
00:14:17,060 --> 00:14:22,160
<font color="#E5E5E5">usable these systems are how much</font>

374
00:14:18,500 --> 00:14:23,690
responsibility<font color="#CCCCCC"> is on</font><font color="#E5E5E5"> the users and we</font>

375
00:14:22,160 --> 00:14:25,250
have to talk<font color="#CCCCCC"> about how these systems</font><font color="#E5E5E5"> can</font>

376
00:14:23,690 --> 00:14:27,050
<font color="#E5E5E5">be implemented in which layer of the</font>

377
00:14:25,250 --> 00:14:28,520
software can we implement<font color="#E5E5E5"> this does this</font>

378
00:14:27,050 --> 00:14:31,010
need to<font color="#CCCCCC"> be a file system does this needs</font>

379
00:14:28,520 --> 00:14:32,720
to<font color="#E5E5E5"> be on the device level and how it can</font>

380
00:14:31,010 --> 00:14:36,350
be iterated<font color="#E5E5E5"> transparently with other</font>

381
00:14:32,720 --> 00:14:37,550
<font color="#E5E5E5">software in the software stack finally</font>

382
00:14:36,350 --> 00:14:39,320
we<font color="#E5E5E5"> also need to talk</font><font color="#CCCCCC"> about the security</font>

383
00:14:37,550 --> 00:14:40,969
<font color="#E5E5E5">and performance trade-off we are</font>

384
00:14:39,320 --> 00:14:43,700
<font color="#E5E5E5">considering right only orality or is</font>

385
00:14:40,970 --> 00:14:45,650
<font color="#E5E5E5">that too</font><font color="#CCCCCC"> strong for</font><font color="#E5E5E5"> a real practical</font>

386
00:14:43,700 --> 00:14:48,770
<font color="#E5E5E5">plausible deniability adversary and</font>

387
00:14:45,650 --> 00:14:50,060
whether<font color="#E5E5E5"> it's customizable based on user</font>

388
00:14:48,770 --> 00:14:52,610
parameters how much sensitive

389
00:14:50,060 --> 00:14:54,410
information he really wants to store<font color="#E5E5E5"> so</font>

390
00:14:52,610 --> 00:14:56,710
will<font color="#CCCCCC"> that include</font><font color="#E5E5E5"> my talk and as we have</font>

391
00:14:54,410 --> 00:15:01,889
<font color="#CCCCCC">60 questions</font>

392
00:14:56,710 --> 00:15:01,889
[Applause]

