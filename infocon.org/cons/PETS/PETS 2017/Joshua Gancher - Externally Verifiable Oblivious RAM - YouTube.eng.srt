1
00:00:01,730 --> 00:00:08,519
<font color="#CCCCCC">touken video see that was such</font><font color="#E5E5E5"> on</font>

2
00:00:05,190 --> 00:00:10,980
photography<font color="#E5E5E5"> Sakura</font><font color="#CCCCCC"> start we</font><font color="#E5E5E5"> have four</font>

3
00:00:08,519 --> 00:00:13,139
very<font color="#E5E5E5"> exciting panel today</font><font color="#CCCCCC"> in Seoul six</font>

4
00:00:10,980 --> 00:00:15,590
regions<font color="#CCCCCC"> burner are protecting memory</font>

5
00:00:13,139 --> 00:00:19,799
<font color="#CCCCCC">access projects</font><font color="#E5E5E5"> to secure community data</font>

6
00:00:15,590 --> 00:00:23,009
information<font color="#E5E5E5"> leaks</font><font color="#CCCCCC"> year GPUs as well</font><font color="#E5E5E5"> for</font>

7
00:00:19,800 --> 00:00:27,029
<font color="#CCCCCC">anybody</font><font color="#E5E5E5"> with an ability</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> first first</font>

8
00:00:23,010 --> 00:00:29,369
up we<font color="#CCCCCC"> have dr.</font><font color="#E5E5E5"> Patrick</font><font color="#CCCCCC"> social is</font><font color="#E5E5E5"> second</font>

9
00:00:27,029 --> 00:00:30,439
eighty students at Cornell<font color="#E5E5E5"> and he got me</font>

10
00:00:29,369 --> 00:00:33,690
interested in<font color="#CCCCCC"> photography</font>

11
00:00:30,439 --> 00:00:35,270
<font color="#E5E5E5">cryptocurrencies and hope man maybe</font>

12
00:00:33,690 --> 00:00:38,070
<font color="#E5E5E5">he'll give</font><font color="#CCCCCC"> us externally verifiable</font>

13
00:00:35,270 --> 00:00:41,430
<font color="#CCCCCC">obliviously all</font><font color="#E5E5E5"> right thank you</font><font color="#CCCCCC"> I'm</font>

14
00:00:38,070 --> 00:00:44,700
Joshua so today I'm talking<font color="#E5E5E5"> about a new</font>

15
00:00:41,430 --> 00:00:46,920
security<font color="#CCCCCC"> notes</font><font color="#E5E5E5"> notion for oblivious</font><font color="#CCCCCC"> RAM</font>

16
00:00:44,700 --> 00:00:48,719
this work is done in collaboration with

17
00:00:46,920 --> 00:00:52,410
<font color="#E5E5E5">my collaborators Adam</font><font color="#CCCCCC"> curves and</font><font color="#E5E5E5"> ours</font>

18
00:00:48,719 --> 00:00:54,870
ledger so today people put a lot<font color="#CCCCCC"> of</font>

19
00:00:52,410 --> 00:00:56,669
private data on the cloud<font color="#E5E5E5"> of course we</font>

20
00:00:54,870 --> 00:01:00,570
don't<font color="#E5E5E5"> always trust the cloud so we</font><font color="#CCCCCC"> have</font>

21
00:00:56,670 --> 00:01:01,949
to have some way it<font color="#E5E5E5"> pretends no data</font><font color="#CCCCCC"> so</font>

22
00:01:00,570 --> 00:01:04,110
what we do of course is we encrypt<font color="#E5E5E5"> our</font>

23
00:01:01,949 --> 00:01:06,840
data files<font color="#E5E5E5"> however</font><font color="#CCCCCC"> as we have</font><font color="#E5E5E5"> seen</font>

24
00:01:04,110 --> 00:01:09,180
earlier<font color="#E5E5E5"> today this is not always perfect</font>

25
00:01:06,840 --> 00:01:11,220
<font color="#E5E5E5">because the cloud can still learn about</font>

26
00:01:09,180 --> 00:01:13,650
the indices<font color="#CCCCCC"> of our data into the</font>

27
00:01:11,220 --> 00:01:16,590
database<font color="#E5E5E5"> forming these things which we</font>

28
00:01:13,650 --> 00:01:18,810
<font color="#CCCCCC">call access patterns to see why this</font><font color="#E5E5E5"> is</font>

29
00:01:16,590 --> 00:01:21,030
dangerous<font color="#E5E5E5"> just to recap cancer days to</font>

30
00:01:18,810 --> 00:01:22,619
access patterns seen here on<font color="#E5E5E5"> the top</font>

31
00:01:21,030 --> 00:01:24,810
<font color="#CCCCCC">access pattern the user accesses data</font>

32
00:01:22,619 --> 00:01:26,759
files number<font color="#E5E5E5"> one two three four five six</font>

33
00:01:24,810 --> 00:01:28,979
<font color="#E5E5E5">which is consistent with a linear scan</font>

34
00:01:26,759 --> 00:01:30,990
of the data on the bottom<font color="#E5E5E5"> instead the</font>

35
00:01:28,979 --> 00:01:32,850
user accesses data files<font color="#E5E5E5"> to eight to</font>

36
00:01:30,990 --> 00:01:35,850
eight<font color="#E5E5E5"> to eight which is not consistent</font>

37
00:01:32,850 --> 00:01:38,158
<font color="#CCCCCC">with a</font><font color="#E5E5E5"> linear scan</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> shows that if</font>

38
00:01:35,850 --> 00:01:39,720
the<font color="#CCCCCC"> server can see the</font><font color="#E5E5E5"> excess pattern of</font>

39
00:01:38,159 --> 00:01:41,040
the<font color="#E5E5E5"> data that server can infer what kind</font>

40
00:01:39,720 --> 00:01:43,020
of algorithm you're using on<font color="#E5E5E5"> the data</font>

41
00:01:41,040 --> 00:01:48,090
which in turn reveals a lot<font color="#E5E5E5"> of semantic</font>

42
00:01:43,020 --> 00:01:50,039
content if instead we<font color="#E5E5E5"> can obfuscate the</font>

43
00:01:48,090 --> 00:01:52,560
<font color="#E5E5E5">access patterns of our data the server</font>

44
00:01:50,040 --> 00:01:54,210
has a lot less<font color="#E5E5E5"> information</font><font color="#CCCCCC"> now the</font>

45
00:01:52,560 --> 00:01:56,159
server only<font color="#E5E5E5"> basically knows how much</font>

46
00:01:54,210 --> 00:01:59,089
data we<font color="#E5E5E5"> have and how often we access it</font>

47
00:01:56,159 --> 00:02:00,840
which is a lot<font color="#E5E5E5"> less information</font>

48
00:01:59,090 --> 00:02:02,009
<font color="#CCCCCC">fortunately there is a standard</font>

49
00:02:00,840 --> 00:02:05,520
cryptographic technique for achieving

50
00:02:02,009 --> 00:02:07,710
this which is called oblivious<font color="#CCCCCC"> rap here</font>

51
00:02:05,520 --> 00:02:08,449
is an abstract diagram of the oblivious

52
00:02:07,710 --> 00:02:11,090
<font color="#E5E5E5">Ram protocol</font>

53
00:02:08,449 --> 00:02:13,130
on the<font color="#CCCCCC"> left we have</font><font color="#E5E5E5"> the user interface</font>

54
00:02:11,090 --> 00:02:15,860
in with the oblivious<font color="#CCCCCC"> RAM protocol</font><font color="#E5E5E5"> the</font>

55
00:02:13,130 --> 00:02:19,459
user gives us<font color="#CCCCCC"> input n which is</font><font color="#E5E5E5"> the index</font>

56
00:02:15,860 --> 00:02:21,560
<font color="#CCCCCC">for so this is for each</font><font color="#E5E5E5"> axis so unless</font>

57
00:02:19,459 --> 00:02:22,940
<font color="#E5E5E5">the user gives their index n which is</font>

58
00:02:21,560 --> 00:02:25,280
the<font color="#E5E5E5"> index in the database</font><font color="#CCCCCC"> they which to</font>

59
00:02:22,940 --> 00:02:26,690
access the user also<font color="#E5E5E5"> gives this data</font>

60
00:02:25,280 --> 00:02:28,700
block<font color="#E5E5E5"> interesting in black which is the</font>

61
00:02:26,690 --> 00:02:32,359
data<font color="#E5E5E5"> block that they wish to write to</font>

62
00:02:28,700 --> 00:02:35,959
the database<font color="#E5E5E5"> each access on the volume</font>

63
00:02:32,360 --> 00:02:38,209
<font color="#E5E5E5">of the</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> protocol for the</font><font color="#CCCCCC"> users</font>

64
00:02:35,959 --> 00:02:40,099
output<font color="#E5E5E5"> these are to get this block seen</font>

65
00:02:38,209 --> 00:02:42,470
here in blue which by the security of

66
00:02:40,099 --> 00:02:44,750
the or<font color="#E5E5E5"> M protocol is</font><font color="#CCCCCC"> the true</font><font color="#E5E5E5"> and this</font>

67
00:02:42,470 --> 00:02:46,310
data block on the right<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> the</font>

68
00:02:44,750 --> 00:02:48,230
server just<font color="#E5E5E5"> interfacing back and forth</font>

69
00:02:46,310 --> 00:02:50,569
of the protocol<font color="#E5E5E5"> exchanging seemingly</font>

70
00:02:48,230 --> 00:02:52,010
random data blocks and the security

71
00:02:50,569 --> 00:02:54,048
<font color="#CCCCCC">Doerun protocol the server learns</font>

72
00:02:52,010 --> 00:02:59,480
nothing<font color="#CCCCCC"> about the</font><font color="#E5E5E5"> actual index of any of</font>

73
00:02:54,049 --> 00:03:01,880
these data blocks we focus on this work

74
00:02:59,480 --> 00:03:04,760
on<font color="#CCCCCC"> to modern web schemes</font><font color="#E5E5E5"> path and Ringo</font>

75
00:03:01,880 --> 00:03:07,700
<font color="#CCCCCC">Ram for certain use cases they're</font>

76
00:03:04,760 --> 00:03:11,209
definitely efficient enough<font color="#CCCCCC"> to use in</font>

77
00:03:07,700 --> 00:03:14,920
<font color="#E5E5E5">practice both schemes give about a log</font>

78
00:03:11,209 --> 00:03:14,920
<font color="#E5E5E5">in bandwidth</font><font color="#CCCCCC"> blow-up</font><font color="#E5E5E5"> in the worst case</font>

79
00:03:16,060 --> 00:03:22,459
so basically now we've solved the issue

80
00:03:19,340 --> 00:03:24,170
<font color="#E5E5E5">of data confidentiality however note</font>

81
00:03:22,459 --> 00:03:27,049
that integrity<font color="#CCCCCC"> of</font><font color="#E5E5E5"> this data is still</font>

82
00:03:24,170 --> 00:03:29,298
problem<font color="#CCCCCC"> the OEM protocol basically just</font>

83
00:03:27,049 --> 00:03:31,010
moves<font color="#CCCCCC"> round data blocks but has no</font>

84
00:03:29,299 --> 00:03:33,519
protections about one<font color="#E5E5E5"> of the not these</font>

85
00:03:31,010 --> 00:03:36,560
data blocks are correct to the<font color="#E5E5E5"> user</font>

86
00:03:33,519 --> 00:03:37,640
fortunately modern protocols are known

87
00:03:36,560 --> 00:03:39,380
to<font color="#E5E5E5"> be compatible with</font><font color="#CCCCCC"> standard</font>

88
00:03:37,640 --> 00:03:42,470
techniques the standard technique of

89
00:03:39,380 --> 00:03:45,019
Merkle trees which<font color="#E5E5E5"> is which is</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> can</font>

90
00:03:42,470 --> 00:03:46,700
use<font color="#E5E5E5"> because the</font><font color="#CCCCCC"> ERM protocols</font><font color="#E5E5E5"> has this</font>

91
00:03:45,019 --> 00:03:49,910
natural<font color="#CCCCCC"> binary tree structure to the</font>

92
00:03:46,700 --> 00:03:51,530
data<font color="#CCCCCC"> here the</font><font color="#E5E5E5"> user stores a small</font>

93
00:03:49,910 --> 00:03:54,530
constant<font color="#CCCCCC"> information which called the</font>

94
00:03:51,530 --> 00:03:56,690
<font color="#E5E5E5">root and the</font><font color="#CCCCCC"> outlet to the user is</font><font color="#E5E5E5"> not</font>

95
00:03:54,530 --> 00:03:59,150
<font color="#E5E5E5">only the end of state of</font><font color="#CCCCCC"> lock but also a</font>

96
00:03:56,690 --> 00:04:01,120
new<font color="#E5E5E5"> root prime along with this small log</font>

97
00:03:59,150 --> 00:04:03,769
and size proof

98
00:04:01,120 --> 00:04:06,440
indeed the user can<font color="#E5E5E5"> run this algorithm</font>

99
00:04:03,769 --> 00:04:09,410
which we call check<font color="#E5E5E5"> proofs which given</font>

100
00:04:06,440 --> 00:04:12,109
<font color="#CCCCCC">the old</font><font color="#E5E5E5"> root the new root any data that</font>

101
00:04:09,410 --> 00:04:14,600
was given<font color="#CCCCCC"> to the protocol any data given</font>

102
00:04:12,109 --> 00:04:17,989
back to the user<font color="#E5E5E5"> as</font><font color="#CCCCCC"> well with this check</font>

103
00:04:14,600 --> 00:04:20,430
mark<font color="#E5E5E5"> the this algorithm will return a</font>

104
00:04:17,988 --> 00:04:22,620
boolean<font color="#E5E5E5"> this boolean is true</font>

105
00:04:20,430 --> 00:04:24,570
when integrity is preserved which means

106
00:04:22,620 --> 00:04:26,699
that<font color="#E5E5E5"> this new route is we of course want</font>

107
00:04:24,570 --> 00:04:30,659
to<font color="#E5E5E5"> a sound update of the database given</font>

108
00:04:26,699 --> 00:04:32,669
the old route and this<font color="#E5E5E5"> proof crucially</font>

109
00:04:30,660 --> 00:04:35,160
this check proof function is only<font color="#CCCCCC"> a</font>

110
00:04:32,669 --> 00:04:37,380
<font color="#E5E5E5">protocol it's only a function of the OEM</font>

111
00:04:35,160 --> 00:04:39,449
transcript which by the security of the

112
00:04:37,380 --> 00:04:42,180
OEM protocol reveals no private

113
00:04:39,449 --> 00:04:44,280
information about the users data<font color="#E5E5E5"> what</font>

114
00:04:42,180 --> 00:04:47,340
<font color="#E5E5E5">this means is that if a third</font><font color="#CCCCCC"> party has</font>

115
00:04:44,280 --> 00:04:49,070
access<font color="#CCCCCC"> to the transcript</font><font color="#E5E5E5"> the third party</font>

116
00:04:47,340 --> 00:04:51,239
<font color="#E5E5E5">can actually validate</font><font color="#CCCCCC"> this proof itself</font>

117
00:04:49,070 --> 00:04:55,009
<font color="#E5E5E5">which means that you have some kind of</font>

118
00:04:51,240 --> 00:04:57,630
simple transfer ability about this proof

119
00:04:55,009 --> 00:05:00,289
that's now we are solved basically both

120
00:04:57,630 --> 00:05:03,509
data confidentiality and data<font color="#E5E5E5"> integrity</font>

121
00:05:00,289 --> 00:05:07,320
<font color="#E5E5E5">however we have not yet addressed data</font>

122
00:05:03,509 --> 00:05:08,940
availability this protocol as it is does

123
00:05:07,320 --> 00:05:11,460
not say<font color="#CCCCCC"> anything about</font><font color="#E5E5E5"> what happens if</font>

124
00:05:08,940 --> 00:05:14,759
the server goes<font color="#CCCCCC"> offline</font><font color="#E5E5E5"> and this is what</font>

125
00:05:11,460 --> 00:05:16,530
we<font color="#E5E5E5"> we try to</font><font color="#CCCCCC"> answer this question is</font>

126
00:05:14,759 --> 00:05:18,090
what we try<font color="#E5E5E5"> to answer</font><font color="#CCCCCC"> our work what</font>

127
00:05:16,530 --> 00:05:19,859
guarantees can<font color="#CCCCCC"> we give to data</font>

128
00:05:18,090 --> 00:05:23,190
availability<font color="#E5E5E5"> while preserving or</font><font color="#CCCCCC"> RAM</font>

129
00:05:19,860 --> 00:05:25,590
security using<font color="#E5E5E5"> our protocol first let's</font>

130
00:05:23,190 --> 00:05:27,000
define<font color="#E5E5E5"> what</font><font color="#CCCCCC"> a fail build means for a</font>

131
00:05:25,590 --> 00:05:28,500
server to become unavailable it means

132
00:05:27,000 --> 00:05:30,570
that<font color="#CCCCCC"> it's unable</font><font color="#E5E5E5"> to follow a correct</font>

133
00:05:28,500 --> 00:05:32,400
attribution<font color="#E5E5E5"> of the protocol note that</font>

134
00:05:30,570 --> 00:05:35,340
this covers both<font color="#CCCCCC"> non-response and also</font>

135
00:05:32,400 --> 00:05:36,900
data loss because we consider checking

136
00:05:35,340 --> 00:05:40,799
integrity of the data as part of the

137
00:05:36,900 --> 00:05:42,090
correct execution of the protocol now if

138
00:05:40,800 --> 00:05:44,070
the server goes<font color="#E5E5E5"> offline we can't</font>

139
00:05:42,090 --> 00:05:46,349
actually force the<font color="#CCCCCC"> server to come</font><font color="#E5E5E5"> off</font><font color="#CCCCCC"> to</font>

140
00:05:44,070 --> 00:05:48,510
come back<font color="#CCCCCC"> online obviously</font><font color="#E5E5E5"> so what we do</font>

141
00:05:46,349 --> 00:05:50,039
is the<font color="#E5E5E5"> next best thing what we trying to</font>

142
00:05:48,510 --> 00:05:52,949
do is compel the server to give a

143
00:05:50,039 --> 00:05:55,289
compensation<font color="#E5E5E5"> to the client in return for</font>

144
00:05:52,949 --> 00:05:58,169
<font color="#E5E5E5">a lapse</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> availability this</font>

145
00:05:55,289 --> 00:05:59,550
compensation<font color="#E5E5E5"> will come this repercussion</font>

146
00:05:58,169 --> 00:06:01,349
will come from<font color="#E5E5E5"> some</font><font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of other</font>

147
00:05:59,550 --> 00:06:03,889
financial<font color="#E5E5E5"> agent who has some</font><font color="#CCCCCC"> kind of</font>

148
00:06:01,349 --> 00:06:06,240
<font color="#E5E5E5">financial leverage over the server</font>

149
00:06:03,889 --> 00:06:08,159
however<font color="#E5E5E5"> this financial agent cannot</font>

150
00:06:06,240 --> 00:06:10,440
<font color="#E5E5E5">trust the</font><font color="#CCCCCC"> client to witness availability</font>

151
00:06:08,159 --> 00:06:13,680
otherwise almost just client could<font color="#E5E5E5"> abuse</font>

152
00:06:10,440 --> 00:06:15,240
this<font color="#E5E5E5"> trust for gain so what we do</font>

153
00:06:13,680 --> 00:06:17,580
instead<font color="#E5E5E5"> is how the client prove</font>

154
00:06:15,240 --> 00:06:19,880
availability loss to<font color="#CCCCCC"> the financial agent</font>

155
00:06:17,580 --> 00:06:21,990
which we call this external verifier

156
00:06:19,880 --> 00:06:23,909
what that will happen<font color="#E5E5E5"> is that verify</font>

157
00:06:21,990 --> 00:06:25,740
<font color="#CCCCCC">will check the proof given to them by</font>

158
00:06:23,909 --> 00:06:27,650
the<font color="#CCCCCC"> client and if it is good they may</font>

159
00:06:25,740 --> 00:06:29,909
then just<font color="#CCCCCC"> Lee penalize the server</font>

160
00:06:27,650 --> 00:06:31,359
<font color="#E5E5E5">note</font><font color="#CCCCCC"> that by the way</font><font color="#E5E5E5"> that this proof</font>

161
00:06:29,909 --> 00:06:32,860
<font color="#E5E5E5">must be interactive</font>

162
00:06:31,360 --> 00:06:34,780
because the verifier must be<font color="#E5E5E5"> able to</font>

163
00:06:32,860 --> 00:06:39,310
<font color="#E5E5E5">witness</font><font color="#CCCCCC"> non-responsive the cough the</font>

164
00:06:34,780 --> 00:06:41,229
server note also that this external

165
00:06:39,310 --> 00:06:45,520
verifier is<font color="#E5E5E5"> mostly acting as a</font><font color="#CCCCCC"> deterrent</font>

166
00:06:41,229 --> 00:06:47,318
from<font color="#CCCCCC"> his behavior from the server we</font>

167
00:06:45,520 --> 00:06:49,448
expect this<font color="#E5E5E5"> proof</font><font color="#CCCCCC"> to only</font><font color="#E5E5E5"> happen in the</font>

168
00:06:47,319 --> 00:06:51,310
event<font color="#CCCCCC"> of actual availability lapse</font>

169
00:06:49,449 --> 00:06:54,580
<font color="#E5E5E5">otherwise the protocol</font><font color="#CCCCCC"> should be to</font>

170
00:06:51,310 --> 00:06:56,789
proceed<font color="#E5E5E5"> just as before so now we can</font>

171
00:06:54,580 --> 00:07:00,389
sketch what our protocol will look like

172
00:06:56,789 --> 00:07:03,280
in<font color="#E5E5E5"> the average case the optimistic case</font>

173
00:07:00,389 --> 00:07:04,870
<font color="#CCCCCC">exactly as before except the protocol</font>

174
00:07:03,280 --> 00:07:06,789
will proceed exactly as<font color="#CCCCCC"> before except</font>

175
00:07:04,870 --> 00:07:08,469
with a few<font color="#E5E5E5"> checkpoint signatures which</font>

176
00:07:06,789 --> 00:07:10,539
are exchanged<font color="#CCCCCC"> east access between the</font>

177
00:07:08,469 --> 00:07:13,180
client and the<font color="#CCCCCC"> server these checkpoint</font>

178
00:07:10,539 --> 00:07:14,889
signatures<font color="#E5E5E5"> serve as agreements between</font>

179
00:07:13,180 --> 00:07:18,159
the<font color="#E5E5E5"> client and server over the state of</font>

180
00:07:14,889 --> 00:07:19,930
the database<font color="#CCCCCC"> what actually happens is</font>

181
00:07:18,159 --> 00:07:21,789
<font color="#E5E5E5">that the signature will basically be the</font>

182
00:07:19,930 --> 00:07:26,020
<font color="#CCCCCC">Merkle</font><font color="#E5E5E5"> tree root along with a counter</font>

183
00:07:21,789 --> 00:07:27,789
which will<font color="#E5E5E5"> enforce data</font><font color="#CCCCCC"> freshness in the</font>

184
00:07:26,020 --> 00:07:29,289
event of<font color="#E5E5E5"> an availability lapse the</font>

185
00:07:27,789 --> 00:07:31,779
client will then<font color="#E5E5E5"> solve the ordinary</font>

186
00:07:29,289 --> 00:07:33,340
execution of the protocol the client and

187
00:07:31,779 --> 00:07:35,229
server then will revert state to the

188
00:07:33,340 --> 00:07:38,830
most recent state agreed to by<font color="#E5E5E5"> these</font>

189
00:07:35,229 --> 00:07:40,930
<font color="#E5E5E5">secular signatures now what happens is</font>

190
00:07:38,830 --> 00:07:43,300
the client initiates<font color="#E5E5E5"> a verified access</font>

191
00:07:40,930 --> 00:07:44,889
of the protocol in this protocol mode

192
00:07:43,300 --> 00:07:47,219
<font color="#E5E5E5">the client and server will route the</font>

193
00:07:44,889 --> 00:07:49,599
<font color="#E5E5E5">entire protocol through the verifier</font>

194
00:07:47,219 --> 00:07:51,879
while blinded the actual data was a

195
00:07:49,599 --> 00:07:53,560
verifier down with access<font color="#CCCCCC"> to is the OEM</font>

196
00:07:51,879 --> 00:07:56,770
transcript along<font color="#E5E5E5"> with these checkpoint</font>

197
00:07:53,560 --> 00:07:58,389
signatures<font color="#E5E5E5"> seam here and here using the</font>

198
00:07:56,770 --> 00:08:00,008
transcript<font color="#E5E5E5"> the very product can then</font>

199
00:07:58,389 --> 00:08:01,839
check semantic correctness of the

200
00:08:00,009 --> 00:08:05,440
protocol both for the client and<font color="#E5E5E5"> the</font>

201
00:08:01,839 --> 00:08:07,240
server<font color="#E5E5E5"> recall</font><font color="#CCCCCC"> before that</font><font color="#E5E5E5"> integrity</font>

202
00:08:05,440 --> 00:08:08,889
checking can be done by<font color="#CCCCCC"> third</font><font color="#E5E5E5"> party if</font>

203
00:08:07,240 --> 00:08:10,690
they have access<font color="#CCCCCC"> to the transcript and</font>

204
00:08:08,889 --> 00:08:13,469
although<font color="#E5E5E5"> these checkpoint signatures can</font>

205
00:08:10,690 --> 00:08:17,169
<font color="#CCCCCC">be seen to be easily publicly verifiable</font>

206
00:08:13,469 --> 00:08:20,199
<font color="#E5E5E5">at any party while running the around</font>

207
00:08:17,169 --> 00:08:21,789
transcript or a protocol<font color="#E5E5E5"> violates</font><font color="#CCCCCC"> any</font>

208
00:08:20,199 --> 00:08:24,219
<font color="#E5E5E5">semantic correctness properties or times</font>

209
00:08:21,789 --> 00:08:27,490
out the verifier now can count this as a

210
00:08:24,219 --> 00:08:29,889
<font color="#E5E5E5">failure of</font><font color="#CCCCCC"> that party and the end of the</font>

211
00:08:27,490 --> 00:08:33,820
access the verify of it either<font color="#CCCCCC"> okay</font>

212
00:08:29,889 --> 00:08:35,589
<font color="#CCCCCC">cheat</font><font color="#E5E5E5"> s or</font><font color="#CCCCCC"> cheat c GS means that the</font>

213
00:08:33,820 --> 00:08:38,589
misbehavior of<font color="#E5E5E5"> the server has</font><font color="#CCCCCC"> been</font>

214
00:08:35,589 --> 00:08:40,810
<font color="#E5E5E5">detected</font><font color="#CCCCCC"> by the verifier</font><font color="#E5E5E5"> similarly</font><font color="#CCCCCC"> TC</font>

215
00:08:38,589 --> 00:08:42,700
means that the client has somehow

216
00:08:40,809 --> 00:08:45,020
misbehaved

217
00:08:42,700 --> 00:08:46,610
of course what we want is that<font color="#E5E5E5"> if the</font>

218
00:08:45,020 --> 00:08:48,890
<font color="#E5E5E5">client is honest and the server has</font>

219
00:08:46,610 --> 00:08:51,890
<font color="#E5E5E5">experience with sort of failure the</font>

220
00:08:48,890 --> 00:08:53,540
<font color="#E5E5E5">verifiable alpha cheetahs similarly if</font>

221
00:08:51,890 --> 00:08:55,699
<font color="#E5E5E5">the server is honest and</font><font color="#CCCCCC"> the client is</font>

222
00:08:53,540 --> 00:08:58,910
defies<font color="#E5E5E5"> the very travel achieves see</font>

223
00:08:55,700 --> 00:09:00,260
<font color="#CCCCCC">recall it's this might happen because we</font>

224
00:08:58,910 --> 00:09:03,800
want<font color="#E5E5E5"> to protect the server in the case</font>

225
00:09:00,260 --> 00:09:06,200
of the client is malicious<font color="#E5E5E5"> otherwise the</font>

226
00:09:03,800 --> 00:09:07,910
very private<font color="#CCCCCC"> law could</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> this can</font>

227
00:09:06,200 --> 00:09:10,250
generally happen<font color="#E5E5E5"> if there's a failure</font>

228
00:09:07,910 --> 00:09:14,030
which the client detects<font color="#E5E5E5"> but it is too</font>

229
00:09:10,250 --> 00:09:16,850
short<font color="#E5E5E5"> to be picked up by the verifier in</font>

230
00:09:14,030 --> 00:09:19,280
a nutshell<font color="#E5E5E5"> our security claim or sort of</font>

231
00:09:16,850 --> 00:09:21,110
<font color="#E5E5E5">the requirement for the protocol is that</font>

232
00:09:19,280 --> 00:09:23,000
security holds<font color="#E5E5E5"> whenever a malicious</font>

233
00:09:21,110 --> 00:09:24,950
client cannot force<font color="#E5E5E5"> cheat s and</font>

234
00:09:23,000 --> 00:09:28,270
similarly<font color="#E5E5E5"> for the server a malicious</font>

235
00:09:24,950 --> 00:09:31,940
server cannot force<font color="#CCCCCC"> cheat C to happen</font>

236
00:09:28,270 --> 00:09:33,920
<font color="#E5E5E5">this security definition is formalized</font>

237
00:09:31,940 --> 00:09:37,610
in our paper<font color="#E5E5E5"> as an ideal functionality</font>

238
00:09:33,920 --> 00:09:40,160
cryptographic<font color="#E5E5E5"> ideal functionality this</font>

239
00:09:37,610 --> 00:09:44,270
set of properties<font color="#CCCCCC"> here is collectively</font>

240
00:09:40,160 --> 00:09:46,910
what we call<font color="#CCCCCC"> external data file</font><font color="#E5E5E5"> 'ti note</font>

241
00:09:44,270 --> 00:09:50,180
however that<font color="#CCCCCC"> this verifier is trusted</font>

242
00:09:46,910 --> 00:09:52,880
for correctness but not<font color="#E5E5E5"> secret</font><font color="#CCCCCC"> e what</font>

243
00:09:50,180 --> 00:09:54,589
this means is that the security<font color="#CCCCCC"> must if</font>

244
00:09:52,880 --> 00:09:56,060
the verifier is<font color="#E5E5E5"> correct the security</font>

245
00:09:54,590 --> 00:09:57,740
definition will hold<font color="#E5E5E5"> but maybe not at</font>

246
00:09:56,060 --> 00:10:00,920
<font color="#CCCCCC">the Securities Inc is the verifiers</font>

247
00:09:57,740 --> 00:10:02,600
incorrect however the OEM transcript can

248
00:10:00,920 --> 00:10:04,250
<font color="#E5E5E5">be trusted to</font><font color="#CCCCCC"> be completely</font><font color="#E5E5E5"> public which</font>

249
00:10:02,600 --> 00:10:08,960
means<font color="#E5E5E5"> that the verifier</font><font color="#CCCCCC"> doesn't actually</font>

250
00:10:04,250 --> 00:10:11,060
need to hold any secret state in our

251
00:10:08,960 --> 00:10:13,310
paper we<font color="#E5E5E5"> give the security definition</font>

252
00:10:11,060 --> 00:10:16,310
for externally verifiable<font color="#CCCCCC"> Oh Ram called</font>

253
00:10:13,310 --> 00:10:18,979
<font color="#E5E5E5">Evo</font><font color="#CCCCCC"> Ram we get</font><font color="#E5E5E5"> even</font><font color="#CCCCCC"> your extensions to</font>

254
00:10:16,310 --> 00:10:21,050
both pass<font color="#CCCCCC"> entering o</font><font color="#E5E5E5"> Ram and along the</font>

255
00:10:18,980 --> 00:10:23,540
way we<font color="#CCCCCC"> also give a novel integrity</font>

256
00:10:21,050 --> 00:10:25,310
checking scheme for<font color="#CCCCCC"> ring o</font><font color="#E5E5E5"> Ram this is</font>

257
00:10:23,540 --> 00:10:26,689
subtle because ring o<font color="#CCCCCC"> Ram</font><font color="#E5E5E5"> does not</font>

258
00:10:25,310 --> 00:10:29,959
strictly<font color="#E5E5E5"> adhere to this binary tree</font>

259
00:10:26,690 --> 00:10:33,440
structure which I alluded<font color="#CCCCCC"> to earlier</font><font color="#E5E5E5"> now</font>

260
00:10:29,960 --> 00:10:35,180
we can talk<font color="#CCCCCC"> about implementation in our</font>

261
00:10:33,440 --> 00:10:37,520
implementation<font color="#E5E5E5"> the interesting thing</font>

262
00:10:35,180 --> 00:10:38,839
<font color="#E5E5E5">here</font><font color="#CCCCCC"> is that the verifier can actually</font>

263
00:10:37,520 --> 00:10:41,060
be implemented<font color="#CCCCCC"> as in a theory in the</font>

264
00:10:38,839 --> 00:10:42,500
smart<font color="#CCCCCC"> contract which moves the protocol</font>

265
00:10:41,060 --> 00:10:45,619
back from a<font color="#CCCCCC"> three person protocol to a</font>

266
00:10:42,500 --> 00:10:47,960
<font color="#E5E5E5">two person protocol effectively so I</font>

267
00:10:45,620 --> 00:10:51,140
will talk<font color="#CCCCCC"> about how that happens</font>

268
00:10:47,960 --> 00:10:53,570
<font color="#E5E5E5">atheria</font><font color="#CCCCCC"> massively distributed consensus</font>

269
00:10:51,140 --> 00:10:55,910
protocol<font color="#E5E5E5"> which meant maintains a notion</font>

270
00:10:53,570 --> 00:10:58,520
<font color="#E5E5E5">of currency as in Bitcoin but</font><font color="#CCCCCC"> also</font>

271
00:10:55,910 --> 00:11:00,020
maintains a notion of smart contracts<font color="#E5E5E5"> so</font>

272
00:10:58,520 --> 00:11:01,970
<font color="#E5E5E5">our contracts are essentially programs</font>

273
00:11:00,020 --> 00:11:05,180
which<font color="#E5E5E5"> are executed as part of the</font>

274
00:11:01,970 --> 00:11:07,100
contentious protocol by the security of

275
00:11:05,180 --> 00:11:09,109
the consensus protocol<font color="#E5E5E5"> we get that these</font>

276
00:11:07,100 --> 00:11:11,750
programs<font color="#E5E5E5"> can</font><font color="#CCCCCC"> be trusted</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> be executed</font>

277
00:11:09,110 --> 00:11:13,430
correctly<font color="#E5E5E5"> here is just a small schematic</font>

278
00:11:11,750 --> 00:11:14,720
of<font color="#CCCCCC"> what means to be a smart contract</font>

279
00:11:13,430 --> 00:11:17,479
over here we have an<font color="#CCCCCC"> end-user</font>

280
00:11:14,720 --> 00:11:19,520
<font color="#E5E5E5">interfacing with a</font><font color="#CCCCCC"> smart contract which</font>

281
00:11:17,480 --> 00:11:24,440
<font color="#E5E5E5">is collectively executed by all</font><font color="#CCCCCC"> the</font>

282
00:11:19,520 --> 00:11:27,260
<font color="#E5E5E5">members of the etherium blockchain since</font>

283
00:11:24,440 --> 00:11:30,050
this<font color="#E5E5E5"> smart contract</font><font color="#CCCCCC"> is collectively</font>

284
00:11:27,260 --> 00:11:32,270
executed by<font color="#CCCCCC"> all of</font><font color="#E5E5E5"> these members it must</font>

285
00:11:30,050 --> 00:11:33,859
be<font color="#E5E5E5"> that the contract must have some kind</font>

286
00:11:32,270 --> 00:11:36,920
<font color="#CCCCCC">of public state there's no secret state</font>

287
00:11:33,860 --> 00:11:39,980
that<font color="#E5E5E5"> this contract can have this</font>

288
00:11:36,920 --> 00:11:42,199
contract<font color="#CCCCCC"> in addition to performing</font>

289
00:11:39,980 --> 00:11:43,640
arbitrary computations<font color="#CCCCCC"> can also</font><font color="#E5E5E5"> hold and</font>

290
00:11:42,200 --> 00:11:47,300
<font color="#CCCCCC">manipulate the currency maintained by</font>

291
00:11:43,640 --> 00:11:48,740
<font color="#CCCCCC">etherium itself so that</font><font color="#E5E5E5"> we this is why</font>

292
00:11:47,300 --> 00:11:50,540
we<font color="#CCCCCC"> actually call</font><font color="#E5E5E5"> it a contract because</font>

293
00:11:48,740 --> 00:11:54,740
<font color="#E5E5E5">that can actually enforce some kind of</font>

294
00:11:50,540 --> 00:11:56,810
financial<font color="#E5E5E5"> capabilities additionally</font>

295
00:11:54,740 --> 00:11:58,340
assuming that the<font color="#CCCCCC"> etherion blockchain is</font>

296
00:11:56,810 --> 00:12:00,619
still<font color="#E5E5E5"> running and that you connect can</font>

297
00:11:58,340 --> 00:12:02,120
connect to<font color="#CCCCCC"> it you can assume that these</font>

298
00:12:00,620 --> 00:12:03,410
contracts<font color="#E5E5E5"> are available there's no</font>

299
00:12:02,120 --> 00:12:04,850
reason that these contracts<font color="#E5E5E5"> would time</font>

300
00:12:03,410 --> 00:12:05,980
out if the etherion blockchain is

301
00:12:04,850 --> 00:12:09,140
running is normal

302
00:12:05,980 --> 00:12:10,760
of course the punchline<font color="#E5E5E5"> here is that</font>

303
00:12:09,140 --> 00:12:14,199
these<font color="#E5E5E5"> four properties are exactly</font><font color="#CCCCCC"> the</font>

304
00:12:10,760 --> 00:12:18,410
same programming model as our verifier

305
00:12:14,200 --> 00:12:20,630
which means that the<font color="#E5E5E5"> are verified access</font>

306
00:12:18,410 --> 00:12:22,910
as talked about<font color="#CCCCCC"> before</font><font color="#E5E5E5"> can actually run</font>

307
00:12:20,630 --> 00:12:26,450
where the<font color="#E5E5E5"> verifier is itself a smart</font>

308
00:12:22,910 --> 00:12:27,380
<font color="#E5E5E5">contract on the etherion blockchain now</font>

309
00:12:26,450 --> 00:12:32,480
we'll talk a little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> about</font>

310
00:12:27,380 --> 00:12:33,950
implementation<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> meant</font><font color="#E5E5E5"> our client</font>

311
00:12:32,480 --> 00:12:37,610
and server code for the<font color="#CCCCCC"> overrun Protocol</font>

312
00:12:33,950 --> 00:12:39,560
locally as well<font color="#E5E5E5"> as the verifier</font><font color="#CCCCCC"> is about</font>

313
00:12:37,610 --> 00:12:41,030
dreams of lines of solidity<font color="#E5E5E5"> which is the</font>

314
00:12:39,560 --> 00:12:43,280
scripting<font color="#CCCCCC"> language for</font><font color="#E5E5E5"> aetherium</font><font color="#CCCCCC"> smart</font>

315
00:12:41,030 --> 00:12:45,949
contracts the bottlenecks for these

316
00:12:43,280 --> 00:12:47,839
kinds<font color="#CCCCCC"> of systems is of course caused</font><font color="#E5E5E5"> by</font>

317
00:12:45,950 --> 00:12:52,310
the blockchain itself

318
00:12:47,840 --> 00:12:53,720
<font color="#E5E5E5">oh the time for ejected so what happens</font>

319
00:12:52,310 --> 00:12:56,180
in the etherion<font color="#E5E5E5"> Network is that there's</font>

320
00:12:53,720 --> 00:12:57,830
this<font color="#E5E5E5"> notion of time</font><font color="#CCCCCC"> club blocks which</font>

321
00:12:56,180 --> 00:13:00,170
are<font color="#E5E5E5"> admitted once every 15 seconds</font>

322
00:12:57,830 --> 00:13:01,850
<font color="#E5E5E5">whenever</font><font color="#CCCCCC"> I send a</font><font color="#E5E5E5"> message to the boxing</font>

323
00:13:00,170 --> 00:13:04,219
this message<font color="#CCCCCC"> actually has to wait for</font>

324
00:13:01,850 --> 00:13:06,950
<font color="#E5E5E5">the next block to attach itself to these</font>

325
00:13:04,220 --> 00:13:08,570
books<font color="#E5E5E5"> are come very slowly which means</font>

326
00:13:06,950 --> 00:13:11,990
that there's actually a wild<font color="#CCCCCC"> Legion see</font>

327
00:13:08,570 --> 00:13:14,480
in<font color="#E5E5E5"> these</font><font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> systems our protocol</font>

328
00:13:11,990 --> 00:13:16,490
has six messages total which means that

329
00:13:14,480 --> 00:13:18,260
if each<font color="#E5E5E5"> message is taking about</font><font color="#CCCCCC"> every</font>

330
00:13:16,490 --> 00:13:19,880
<font color="#CCCCCC">ten or twenty seconds</font><font color="#E5E5E5"> that I can run for</font>

331
00:13:18,260 --> 00:13:23,270
maybe a<font color="#CCCCCC"> minute and a half which is not</font>

332
00:13:19,880 --> 00:13:26,960
very<font color="#E5E5E5"> good another issue with smart</font>

333
00:13:23,270 --> 00:13:29,290
contracts is that<font color="#E5E5E5"> contracts yes</font><font color="#CCCCCC"> no</font>

334
00:13:26,960 --> 00:13:31,580
another<font color="#E5E5E5"> issues small contracts is that</font>

335
00:13:29,290 --> 00:13:34,900
they cost currency for themselves to

336
00:13:31,580 --> 00:13:37,610
execute as of when you wrote the<font color="#E5E5E5"> paper</font>

337
00:13:34,900 --> 00:13:40,520
for a simulated<font color="#E5E5E5"> tender by database</font>

338
00:13:37,610 --> 00:13:42,770
access it only<font color="#CCCCCC"> cost 33 cents for this</font>

339
00:13:40,520 --> 00:13:44,689
<font color="#E5E5E5">contract execute however as I</font><font color="#CCCCCC"> theory</font>

340
00:13:42,770 --> 00:13:47,120
<font color="#E5E5E5">became more valuable over time this</font>

341
00:13:44,690 --> 00:13:50,180
price actually skyrocketed to<font color="#CCCCCC"> 15 dollars</font>

342
00:13:47,120 --> 00:13:51,950
which is less than practical<font color="#E5E5E5"> what the</font>

343
00:13:50,180 --> 00:13:53,660
showing that<font color="#E5E5E5"> those capabilities</font><font color="#CCCCCC"> well</font>

344
00:13:51,950 --> 00:13:56,030
this is an interesting<font color="#CCCCCC"> idea</font><font color="#E5E5E5"> its</font>

345
00:13:53,660 --> 00:13:58,939
capability of smart contract systems<font color="#E5E5E5"> is</font>

346
00:13:56,030 --> 00:14:00,560
still a major open area now I'll<font color="#CCCCCC"> just</font>

347
00:13:58,940 --> 00:14:02,840
wrap up by<font color="#CCCCCC"> mentioning a few</font><font color="#E5E5E5"> for the</font>

348
00:14:00,560 --> 00:14:05,119
<font color="#E5E5E5">directions what we essentially do in</font>

349
00:14:02,840 --> 00:14:06,890
this<font color="#E5E5E5"> paper is</font><font color="#CCCCCC"> extendo Ram by adding a</font>

350
00:14:05,120 --> 00:14:08,660
minimal amount<font color="#E5E5E5"> of information which we</font>

351
00:14:06,890 --> 00:14:10,939
call an audit trail which can be

352
00:14:08,660 --> 00:14:12,140
verifiably<font color="#E5E5E5"> which can be externally</font>

353
00:14:10,940 --> 00:14:14,600
verified by a third party

354
00:14:12,140 --> 00:14:16,819
of course this<font color="#CCCCCC"> methodology can probably</font>

355
00:14:14,600 --> 00:14:18,700
be extended to other protocols such as

356
00:14:16,820 --> 00:14:21,200
secure multi-party computation<font color="#E5E5E5"> or</font>

357
00:14:18,700 --> 00:14:27,160
protocols of<font color="#CCCCCC"> outsourced computation and</font>

358
00:14:21,200 --> 00:14:29,360
<font color="#E5E5E5">so on another thing we talk about</font>

359
00:14:27,160 --> 00:14:30,829
<font color="#E5E5E5">another thing which would be</font><font color="#CCCCCC"> interesting</font>

360
00:14:29,360 --> 00:14:34,640
<font color="#CCCCCC">for</font><font color="#E5E5E5"> the research is more efficient use</font>

361
00:14:30,830 --> 00:14:36,860
of<font color="#E5E5E5"> these smart contracts</font><font color="#CCCCCC"> quick</font>

362
00:14:34,640 --> 00:14:39,110
conventional crypto papers don't<font color="#E5E5E5"> really</font>

363
00:14:36,860 --> 00:14:41,810
talk about the case where we<font color="#E5E5E5"> have a very</font>

364
00:14:39,110 --> 00:14:44,720
very limited<font color="#E5E5E5"> execution environment as</font>

365
00:14:41,810 --> 00:14:46,189
advent of smart contract which it<font color="#E5E5E5"> brings</font>

366
00:14:44,720 --> 00:14:47,450
up<font color="#CCCCCC"> introduced interesting notions about</font>

367
00:14:46,190 --> 00:14:50,020
computation cost and also<font color="#CCCCCC"> around</font>

368
00:14:47,450 --> 00:14:50,020
complexity

369
00:14:50,120 --> 00:14:53,750
so if you're just<font color="#CCCCCC"> in</font><font color="#E5E5E5"> this work I invite</font>

370
00:14:51,980 --> 00:14:56,270
<font color="#E5E5E5">you to look at my look at</font><font color="#CCCCCC"> my</font><font color="#E5E5E5"> code here</font>

371
00:14:53,750 --> 00:14:58,190
<font color="#E5E5E5">and see if there's anything you would</font>

372
00:14:56,270 --> 00:14:59,870
like<font color="#E5E5E5"> to</font><font color="#CCCCCC"> see it</font><font color="#E5E5E5"> I would</font><font color="#CCCCCC"> note that this</font>

373
00:14:58,190 --> 00:15:01,700
might be<font color="#CCCCCC"> interesting to</font><font color="#E5E5E5"> you if you're</font>

374
00:14:59,870 --> 00:15:04,010
<font color="#E5E5E5">interested in</font><font color="#CCCCCC"> spark contract programming</font>

375
00:15:01,700 --> 00:15:05,060
in general<font color="#E5E5E5"> not just</font><font color="#CCCCCC"> oh rap stuff because</font>

376
00:15:04,010 --> 00:15:06,770
there's a lot in<font color="#E5E5E5"> here that you could</font>

377
00:15:05,060 --> 00:15:09,969
learn just<font color="#E5E5E5"> with the smart contracts than</font>

378
00:15:06,770 --> 00:15:09,970
generally thank you

379
00:15:10,140 --> 00:15:15,260
[Applause]

