1
00:00:00,080 --> 00:00:03,199
hello everybody i am pratik kumar pal in

2
00:00:03,199 --> 00:00:05,040
this talk we'll be discussing about how

3
00:00:05,040 --> 00:00:07,440
to prove any np statement jointly

4
00:00:07,440 --> 00:00:08,960
distributed prover zero knowledge

5
00:00:08,960 --> 00:00:12,960
protocols in short dpc

6
00:00:13,679 --> 00:00:15,599
here we'll start with the definition of

7
00:00:15,599 --> 00:00:17,760
zero knowledge protocols

8
00:00:17,760 --> 00:00:20,480
here we have a prover and a verifier the

9
00:00:20,480 --> 00:00:23,279
input to the prover is a statement x and

10
00:00:23,279 --> 00:00:25,680
a corresponding witness w the input to

11
00:00:25,680 --> 00:00:28,160
the verifier is the statement x the

12
00:00:28,160 --> 00:00:30,240
prover claims that the statement x is

13
00:00:30,240 --> 00:00:31,119
true

14
00:00:31,119 --> 00:00:33,040
that means there exists a deterministic

15
00:00:33,040 --> 00:00:36,239
algorithm m which takes x and w as input

16
00:00:36,239 --> 00:00:39,840
and outputs 1 if it is true

17
00:00:39,840 --> 00:00:41,840
the task for the prover is to convince

18
00:00:41,840 --> 00:00:43,920
the verifier that the statement is

19
00:00:43,920 --> 00:00:46,160
indeed true without revealing any

20
00:00:46,160 --> 00:00:48,719
information about w

21
00:00:48,719 --> 00:00:50,879
for that the proverb and the verifier

22
00:00:50,879 --> 00:00:54,160
can have interactions

23
00:00:54,160 --> 00:00:56,320
a zero knowledge protocol must have the

24
00:00:56,320 --> 00:01:00,079
following three properties first is

25
00:01:00,079 --> 00:01:01,199
properties

26
00:01:01,199 --> 00:01:03,440
first is called completeness

27
00:01:03,440 --> 00:01:05,438
if prover and the verifier are both

28
00:01:05,438 --> 00:01:08,000
honest then verifier will always accept

29
00:01:08,000 --> 00:01:09,439
the proof

30
00:01:09,439 --> 00:01:11,280
second is soundness

31
00:01:11,280 --> 00:01:13,680
that is if the proverb is cheating

32
00:01:13,680 --> 00:01:16,479
that means either the statement is false

33
00:01:16,479 --> 00:01:18,560
or the prover does not have a correct

34
00:01:18,560 --> 00:01:20,799
witness then verifier will reject the

35
00:01:20,799 --> 00:01:23,200
proof almost surely

36
00:01:23,200 --> 00:01:25,119
and third is zero knowledge

37
00:01:25,119 --> 00:01:27,759
that says at the end of the protocol the

38
00:01:27,759 --> 00:01:29,680
verifier learns that the statement is

39
00:01:29,680 --> 00:01:33,119
true but nothing else

40
00:01:33,600 --> 00:01:35,680
now we will discuss the distributed

41
00:01:35,680 --> 00:01:36,960
witness setting

42
00:01:36,960 --> 00:01:39,119
here instead of one prover we have a

43
00:01:39,119 --> 00:01:41,360
group of provers together they claim

44
00:01:41,360 --> 00:01:43,439
that the statement x is true

45
00:01:43,439 --> 00:01:45,600
corresponding to the statement x there

46
00:01:45,600 --> 00:01:47,680
exists a global witness w

47
00:01:47,680 --> 00:01:50,000
however none of the provers have the

48
00:01:50,000 --> 00:01:51,439
witness w

49
00:01:51,439 --> 00:01:53,759
instead they have a private share of the

50
00:01:53,759 --> 00:01:55,200
witness w

51
00:01:55,200 --> 00:01:57,520
putting all the shares together one can

52
00:01:57,520 --> 00:01:59,840
obtain the global witness w which we

53
00:01:59,840 --> 00:02:01,040
yells

54
00:02:01,040 --> 00:02:02,640
x is true

55
00:02:02,640 --> 00:02:04,399
a distributed prover zero knowledge

56
00:02:04,399 --> 00:02:06,719
protocol needs to satisfy the following

57
00:02:06,719 --> 00:02:10,318
two conditions one is privacy that says

58
00:02:10,318 --> 00:02:12,640
no proverb learns any other prover's

59
00:02:12,640 --> 00:02:15,520
private information and second is zero

60
00:02:15,520 --> 00:02:18,400
knowledge it says verifier should learn

61
00:02:18,400 --> 00:02:20,840
nothing about proverbs

62
00:02:20,840 --> 00:02:23,840
secret ideally all provers may send

63
00:02:23,840 --> 00:02:25,760
their shares of the witness to a trusted

64
00:02:25,760 --> 00:02:28,800
third party which can execute a standard

65
00:02:28,800 --> 00:02:30,480
zero knowledge protocol with the

66
00:02:30,480 --> 00:02:33,120
verifier on behalf of the prover

67
00:02:33,120 --> 00:02:35,680
however in real life we may not have

68
00:02:35,680 --> 00:02:38,640
such a trusted third party

69
00:02:38,640 --> 00:02:40,480
the primitive dpck has various

70
00:02:40,480 --> 00:02:41,840
applications

71
00:02:41,840 --> 00:02:44,000
one of the application is multi-wallet

72
00:02:44,000 --> 00:02:45,680
anonymous payments

73
00:02:45,680 --> 00:02:48,000
in the era of digital currency it is

74
00:02:48,000 --> 00:02:49,920
required to facilitate users with

75
00:02:49,920 --> 00:02:51,840
multi-wallet transactions where multiple

76
00:02:51,840 --> 00:02:54,640
users can execute a single transaction

77
00:02:54,640 --> 00:02:56,239
however to face

78
00:02:56,239 --> 00:02:58,879
however to validate the transaction the

79
00:02:58,879 --> 00:03:01,440
users need to ensure certain conditions

80
00:03:01,440 --> 00:03:03,760
are made without revealing their private

81
00:03:03,760 --> 00:03:06,560
information to maintain the anonymity

82
00:03:06,560 --> 00:03:10,000
in such scenarios dpgk can be used for

83
00:03:10,000 --> 00:03:12,959
example consider a cryptocurrency where

84
00:03:12,959 --> 00:03:16,400
p1 has coin c1 and p2 has coin c2

85
00:03:16,400 --> 00:03:18,560
together they claim that their coins are

86
00:03:18,560 --> 00:03:20,959
unspent and the combined value of their

87
00:03:20,959 --> 00:03:22,239
coins are

88
00:03:22,239 --> 00:03:25,280
more than a publicly known value v

89
00:03:25,280 --> 00:03:27,760
similar to this another use case is

90
00:03:27,760 --> 00:03:29,519
auction with joint bidding using

91
00:03:29,519 --> 00:03:32,000
cryptocurrency where parties opt for

92
00:03:32,000 --> 00:03:34,640
joint bidding so that they can have a

93
00:03:34,640 --> 00:03:37,760
higher chance to win the bid

94
00:03:37,760 --> 00:03:39,760
another application is publicly

95
00:03:39,760 --> 00:03:43,120
auditable mpc or multi-party computation

96
00:03:43,120 --> 00:03:45,599
mpc is a tool that allows multiple

97
00:03:45,599 --> 00:03:48,080
parties to privately evaluate functions

98
00:03:48,080 --> 00:03:50,159
on their private inputs

99
00:03:50,159 --> 00:03:52,239
for a standard mpc if all the

100
00:03:52,239 --> 00:03:54,480
computational parties are corrupt then

101
00:03:54,480 --> 00:03:56,640
neither privacy nor correctness is

102
00:03:56,640 --> 00:03:58,080
guaranteed

103
00:03:58,080 --> 00:04:00,640
but publicly auditable mpc ensures

104
00:04:00,640 --> 00:04:03,120
correctness even if all the parties are

105
00:04:03,120 --> 00:04:04,239
corrupt

106
00:04:04,239 --> 00:04:07,519
we can achieve this using dpck where all

107
00:04:07,519 --> 00:04:10,000
the computational parties jointly prove

108
00:04:10,000 --> 00:04:14,879
that they did the computation correctly

109
00:04:14,879 --> 00:04:16,880
in this work our contributions are

110
00:04:16,880 --> 00:04:19,040
mainly in three-fold

111
00:04:19,040 --> 00:04:20,880
first is we are giving a formal

112
00:04:20,880 --> 00:04:22,560
definition of distributed proof of zero

113
00:04:22,560 --> 00:04:24,479
knowledge systems

114
00:04:24,479 --> 00:04:26,800
second we build a compiler that takes

115
00:04:26,800 --> 00:04:28,639
any iop based zero knowledge proof

116
00:04:28,639 --> 00:04:29,520
system

117
00:04:29,520 --> 00:04:32,160
and gives another zero knowledge proof

118
00:04:32,160 --> 00:04:34,639
system which supports distributed proof

119
00:04:34,639 --> 00:04:36,080
generation

120
00:04:36,080 --> 00:04:38,000
an iop based zero knowledge protocol

121
00:04:38,000 --> 00:04:40,240
means that the proofer constructs an

122
00:04:40,240 --> 00:04:42,240
oracle and gives the oracle access to

123
00:04:42,240 --> 00:04:44,960
the verifier where the verifier makes

124
00:04:44,960 --> 00:04:47,520
polynomially many queries to the oracle

125
00:04:47,520 --> 00:04:50,240
and convinces itself that the statement

126
00:04:50,240 --> 00:04:52,639
is true

127
00:04:54,720 --> 00:04:56,960
and finally we give a new protocol

128
00:04:56,960 --> 00:04:58,160
graphing

129
00:04:58,160 --> 00:05:01,440
which is efficient in single prover as

130
00:05:01,440 --> 00:05:02,800
well as in the distributed prover

131
00:05:02,800 --> 00:05:05,199
setting

132
00:05:06,400 --> 00:05:08,720
while giving the definition of dpck we

133
00:05:08,720 --> 00:05:11,520
observed that the efficiency measures of

134
00:05:11,520 --> 00:05:13,840
standard zero knowledge is not adequate

135
00:05:13,840 --> 00:05:16,160
to judge the efficiency of a distributed

136
00:05:16,160 --> 00:05:18,320
rubric zero knowledge protocol

137
00:05:18,320 --> 00:05:20,400
for a standard zero knowledge a prover's

138
00:05:20,400 --> 00:05:23,280
efficiency is measured by the proof size

139
00:05:23,280 --> 00:05:25,199
and the proof generation time

140
00:05:25,199 --> 00:05:27,600
and a verifier's efficiency is measured

141
00:05:27,600 --> 00:05:30,080
by the verification time

142
00:05:30,080 --> 00:05:33,039
in the dpck

143
00:05:34,080 --> 00:05:36,960
in the dpck along with these parameters

144
00:05:36,960 --> 00:05:39,199
we also need to consider the number of

145
00:05:39,199 --> 00:05:41,840
interactions among the provers and the

146
00:05:41,840 --> 00:05:43,360
amount of communication among the

147
00:05:43,360 --> 00:05:46,080
provers to generate the proof to judge

148
00:05:46,080 --> 00:05:50,840
the efficiency of the protocol

149
00:05:52,400 --> 00:05:54,720
now we will briefly discuss the idea of

150
00:05:54,720 --> 00:05:56,160
our compiler

151
00:05:56,160 --> 00:05:58,720
it takes any iop based protocol

152
00:05:58,720 --> 00:06:01,199
consider pipe to be an iop based zero

153
00:06:01,199 --> 00:06:02,800
knowledge proof system

154
00:06:02,800 --> 00:06:05,280
the prover computes the oracle

155
00:06:05,280 --> 00:06:08,080
and the verifier makes polynomially many

156
00:06:08,080 --> 00:06:10,160
queries to the oracle

157
00:06:10,160 --> 00:06:12,240
then the verifier receives the data from

158
00:06:12,240 --> 00:06:13,039
the

159
00:06:13,039 --> 00:06:15,039
oracle

160
00:06:15,039 --> 00:06:17,680
corresponding to the query location

161
00:06:17,680 --> 00:06:20,720
using this it convinces itself that the

162
00:06:20,720 --> 00:06:23,360
statement is true

163
00:06:23,360 --> 00:06:25,360
to support distributed troop generation

164
00:06:25,360 --> 00:06:27,759
our compiler uses homomorphic commitment

165
00:06:27,759 --> 00:06:29,120
scheme

166
00:06:29,120 --> 00:06:31,440
in the compiled protocol the prover

167
00:06:31,440 --> 00:06:34,639
computes the oracle and the commitment

168
00:06:34,639 --> 00:06:37,039
of it

169
00:06:38,400 --> 00:06:40,240
and sets the committed

170
00:06:40,240 --> 00:06:43,440
oracle as the final oracle the verifier

171
00:06:43,440 --> 00:06:45,919
makes the same queries to which it

172
00:06:45,919 --> 00:06:48,400
receives committed data from the oracle

173
00:06:48,400 --> 00:06:50,160
and corresponding opening from the

174
00:06:50,160 --> 00:06:51,280
prover

175
00:06:51,280 --> 00:06:53,280
the binding property of the commitment

176
00:06:53,280 --> 00:06:56,400
scheme ensured that the prover cannot

177
00:06:56,400 --> 00:06:59,440
send any wrong value after the oracle is

178
00:06:59,440 --> 00:07:00,400
set

179
00:07:00,400 --> 00:07:02,560
the verifier checks if the openings are

180
00:07:02,560 --> 00:07:05,120
valid or not followed by the same

181
00:07:05,120 --> 00:07:08,400
verification as in pi

182
00:07:10,319 --> 00:07:12,560
for the distributed prover case prover

183
00:07:12,560 --> 00:07:15,360
starts with their shares of the witness

184
00:07:15,360 --> 00:07:18,560
and execute an mpc to obtain a sharing

185
00:07:18,560 --> 00:07:20,080
of the oracle

186
00:07:20,080 --> 00:07:22,960
now locally they compute the commitment

187
00:07:22,960 --> 00:07:25,440
of the oracle and send the committed

188
00:07:25,440 --> 00:07:28,639
value to a designated aggregator

189
00:07:28,639 --> 00:07:30,560
aggregated using the homomorphic

190
00:07:30,560 --> 00:07:32,400
property of the commitment scheme

191
00:07:32,400 --> 00:07:35,039
combine the oracles and compute the

192
00:07:35,039 --> 00:07:36,560
final oracle

193
00:07:36,560 --> 00:07:38,800
which is given to the verifier

194
00:07:38,800 --> 00:07:41,280
the verifier makes its queries

195
00:07:41,280 --> 00:07:44,879
which is forwarded to the provers

196
00:07:44,879 --> 00:07:46,960
then the proverb sent the corresponding

197
00:07:46,960 --> 00:07:49,199
opening to the aggregator

198
00:07:49,199 --> 00:07:51,280
which is combined

199
00:07:51,280 --> 00:07:52,639
and sent

200
00:07:52,639 --> 00:07:55,440
to the verifier

201
00:07:55,440 --> 00:07:58,000
note that the hiding property of the

202
00:07:58,000 --> 00:07:59,520
commitment scheme

203
00:07:59,520 --> 00:08:02,160
ensures that the aggregator cannot learn

204
00:08:02,160 --> 00:08:04,960
anything more than what a verifier can

205
00:08:04,960 --> 00:08:06,160
learn

206
00:08:06,160 --> 00:08:08,240
also the binding property

207
00:08:08,240 --> 00:08:10,879
prevents any prover from deviating from

208
00:08:10,879 --> 00:08:13,039
the committed values

209
00:08:13,039 --> 00:08:14,879
finally the verification

210
00:08:14,879 --> 00:08:17,599
is the same as in the single prover

211
00:08:17,599 --> 00:08:20,000
d pi

212
00:08:21,039 --> 00:08:23,840
using our compiler we compiled few state

213
00:08:23,840 --> 00:08:25,520
of the art popular zero knowledge

214
00:08:25,520 --> 00:08:27,840
protocols such as ligero ligoro plus

215
00:08:27,840 --> 00:08:30,080
plus aroda and bullet proofs

216
00:08:30,080 --> 00:08:32,080
here we can see that our compiler

217
00:08:32,080 --> 00:08:33,440
preserves the proof size of the

218
00:08:33,440 --> 00:08:35,200
protocols

219
00:08:35,200 --> 00:08:37,039
however we can see

220
00:08:37,039 --> 00:08:38,399
in the proof generation time and

221
00:08:38,399 --> 00:08:40,320
verification time there is some

222
00:08:40,320 --> 00:08:41,839
additional overhead

223
00:08:41,839 --> 00:08:44,640
this is due to the computational cost of

224
00:08:44,640 --> 00:08:46,720
the commitment scheme and the

225
00:08:46,720 --> 00:08:48,959
verification of its opening

226
00:08:48,959 --> 00:08:51,519
we also observed that protocols with

227
00:08:51,519 --> 00:08:53,920
fewer number of oracles perform better

228
00:08:53,920 --> 00:08:57,120
in the distributed prover setting

229
00:08:57,120 --> 00:08:58,560
since

230
00:08:58,560 --> 00:09:02,000
for each oracle it may require an

231
00:09:02,000 --> 00:09:04,399
additional interaction among the provers

232
00:09:04,399 --> 00:09:07,839
to generate the sharing of the oracle

233
00:09:07,839 --> 00:09:09,839
ligero

234
00:09:09,839 --> 00:09:12,399
bullet proofs and graphene has better

235
00:09:12,399 --> 00:09:14,640
communication among the approver as well

236
00:09:14,640 --> 00:09:16,080
as number of interaction among the

237
00:09:16,080 --> 00:09:19,200
provers in comparison to ligaro plus

238
00:09:19,200 --> 00:09:21,680
plus and aurora

239
00:09:21,680 --> 00:09:23,839
finally we can see that our construction

240
00:09:23,839 --> 00:09:26,480
graphene has better communication among

241
00:09:26,480 --> 00:09:29,120
the prover in comparison to any of the

242
00:09:29,120 --> 00:09:32,000
other protocols

243
00:09:32,880 --> 00:09:34,640
to understand the performance of

244
00:09:34,640 --> 00:09:37,360
graphene we provide a comparison with

245
00:09:37,360 --> 00:09:39,440
legato and bullet proofs

246
00:09:39,440 --> 00:09:41,920
we observe that graphene has better

247
00:09:41,920 --> 00:09:45,920
proof size in comparison to leaguero

248
00:09:45,920 --> 00:09:48,240
for troop generation time graphene and

249
00:09:48,240 --> 00:09:49,680
bullet proofs

250
00:09:49,680 --> 00:09:53,760
have a comparable proof generation time

251
00:09:54,000 --> 00:09:56,640
and for the case of verification time it

252
00:09:56,640 --> 00:09:58,080
outperforms

253
00:09:58,080 --> 00:10:00,240
both liger and bullet proofs in terms of

254
00:10:00,240 --> 00:10:02,399
verification time

255
00:10:02,399 --> 00:10:04,000
finally in the distributed prover

256
00:10:04,000 --> 00:10:06,240
setting we considered a z cast network

257
00:10:06,240 --> 00:10:08,560
where two parties p1 and p2

258
00:10:08,560 --> 00:10:11,600
having coins c1 and c2 together they

259
00:10:11,600 --> 00:10:14,000
claim that the coins are unspent and the

260
00:10:14,000 --> 00:10:16,800
combined value of the coin is more than

261
00:10:16,800 --> 00:10:18,720
a publicly known value v

262
00:10:18,720 --> 00:10:21,279
in the z cash network this claim can be

263
00:10:21,279 --> 00:10:24,079
verified by a circuit which is of size 4

264
00:10:24,079 --> 00:10:25,760
into 10 power 6.

265
00:10:25,760 --> 00:10:26,959
we see that

266
00:10:26,959 --> 00:10:28,880
the communication

267
00:10:28,880 --> 00:10:31,040
for bullet proof is 2 times more than

268
00:10:31,040 --> 00:10:34,000
the communication of graphene

269
00:10:34,000 --> 00:10:36,079
for proof generation time the

270
00:10:36,079 --> 00:10:38,720
bulletproof performs two times better

271
00:10:38,720 --> 00:10:40,560
than graphene however this is

272
00:10:40,560 --> 00:10:42,240
compensated

273
00:10:42,240 --> 00:10:44,800
in verification time where graphene

274
00:10:44,800 --> 00:10:47,760
performs 25 times better than bullet

275
00:10:47,760 --> 00:10:49,120
proof

276
00:10:49,120 --> 00:10:50,959
here i'll end the talk

277
00:10:50,959 --> 00:10:52,640
by restating the

278
00:10:52,640 --> 00:10:54,640
contributions of this work

279
00:10:54,640 --> 00:10:57,279
here we give the notion of dbz kim we

280
00:10:57,279 --> 00:10:59,760
construct a compiler

281
00:10:59,760 --> 00:11:01,760
which takes any iop based proof system

282
00:11:01,760 --> 00:11:04,000
and gives a distributed prover zero

283
00:11:04,000 --> 00:11:06,000
knowledge protocol

284
00:11:06,000 --> 00:11:08,240
finally we builds a new protocol

285
00:11:08,240 --> 00:11:09,680
graphene

286
00:11:09,680 --> 00:11:11,040
which has

287
00:11:11,040 --> 00:11:12,880
better proof size better proof

288
00:11:12,880 --> 00:11:15,680
generation time and

289
00:11:15,680 --> 00:11:18,959
better verification time and also it has

290
00:11:18,959 --> 00:11:21,920
good communication among the provers

291
00:11:21,920 --> 00:11:25,160
thank you

