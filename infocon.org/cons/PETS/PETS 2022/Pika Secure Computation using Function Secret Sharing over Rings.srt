1
00:00:03,360 --> 00:00:05,520
hi i'm samir i'm excited to share my

2
00:00:05,520 --> 00:00:07,759
recent work on secure computation using

3
00:00:07,759 --> 00:00:11,440
function secret sharing overrings

4
00:00:11,759 --> 00:00:13,280
non-linear functions are essential to

5
00:00:13,280 --> 00:00:14,880
secure computation

6
00:00:14,880 --> 00:00:16,800
this is a quick study i've done where um

7
00:00:16,800 --> 00:00:18,240
you take a very simple neural network

8
00:00:18,240 --> 00:00:19,680
architecture and to train it using

9
00:00:19,680 --> 00:00:21,199
secure computation

10
00:00:21,199 --> 00:00:23,119
and as a function of the depth of the

11
00:00:23,119 --> 00:00:25,119
network you can see that the relative

12
00:00:25,119 --> 00:00:27,359
error goes up in other words if you try

13
00:00:27,359 --> 00:00:29,359
to train deeper and deeper networks the

14
00:00:29,359 --> 00:00:30,640
errors start

15
00:00:30,640 --> 00:00:32,558
accumulating and that leads to poor and

16
00:00:32,558 --> 00:00:34,399
poorer network accuracy when you are

17
00:00:34,399 --> 00:00:36,160
trying to train inside secure

18
00:00:36,160 --> 00:00:37,600
computation

19
00:00:37,600 --> 00:00:40,000
so this is just one example of uh

20
00:00:40,000 --> 00:00:42,000
normalization function or functions

21
00:00:42,000 --> 00:00:44,399
which improve the stability of neural

22
00:00:44,399 --> 00:00:45,600
network training

23
00:00:45,600 --> 00:00:47,440
and this is going to be the focus of

24
00:00:47,440 --> 00:00:49,440
this work to actually study lookup style

25
00:00:49,440 --> 00:00:51,039
protocols like can they actually be

26
00:00:51,039 --> 00:00:53,360
feasible and practical

27
00:00:53,360 --> 00:00:56,399
for non-linear functions

28
00:00:56,399 --> 00:00:58,079
most of this work actually draws its

29
00:00:58,079 --> 00:00:59,760
benefits from from this new primitive

30
00:00:59,760 --> 00:01:01,840
called function secret sharing uh which

31
00:01:01,840 --> 00:01:04,400
was present in eurocrypt 2015. what

32
00:01:04,400 --> 00:01:06,320
function of secret sharing does is very

33
00:01:06,320 --> 00:01:08,159
similar to shammit secret sharing where

34
00:01:08,159 --> 00:01:10,640
instead of sharing a value it tries to

35
00:01:10,640 --> 00:01:13,520
share a function into many different uh

36
00:01:13,520 --> 00:01:15,520
shares and each of these functions can

37
00:01:15,520 --> 00:01:17,040
be locally computed

38
00:01:17,040 --> 00:01:18,720
and it has three

39
00:01:18,720 --> 00:01:20,080
properties which define what a function

40
00:01:20,080 --> 00:01:21,600
secret sharing screen is the first one

41
00:01:21,600 --> 00:01:23,920
is just the sum of the shares evaluated

42
00:01:23,920 --> 00:01:26,080
at each individual point

43
00:01:26,080 --> 00:01:28,479
add up to be the function value

44
00:01:28,479 --> 00:01:30,000
and the other two properties are

45
00:01:30,000 --> 00:01:31,920
succinctless which is that each of these

46
00:01:31,920 --> 00:01:33,040
functions should be really small

47
00:01:33,040 --> 00:01:34,159
otherwise you could have trivial

48
00:01:34,159 --> 00:01:37,200
function secret sharing schemes such as

49
00:01:37,200 --> 00:01:38,320
sharing the

50
00:01:38,320 --> 00:01:41,119
truth table of the the function f

51
00:01:41,119 --> 00:01:42,320
and then the other property is the

52
00:01:42,320 --> 00:01:44,159
hiding property which is uh the share

53
00:01:44,159 --> 00:01:45,600
should reveal nothing about the function

54
00:01:45,600 --> 00:01:47,679
f

55
00:01:47,759 --> 00:01:50,560
recent advances uh particularly have

56
00:01:50,560 --> 00:01:53,040
looked into this class of functions

57
00:01:53,040 --> 00:01:55,119
called distributed point functions uh

58
00:01:55,119 --> 00:01:56,640
which are effectively defined by two

59
00:01:56,640 --> 00:01:58,479
parameters um

60
00:01:58,479 --> 00:01:59,840
they are point functions in the sense

61
00:01:59,840 --> 00:02:02,560
they have a nonzero value at exactly one

62
00:02:02,560 --> 00:02:04,240
single point and everywhere else they

63
00:02:04,240 --> 00:02:06,560
are zero

64
00:02:06,560 --> 00:02:08,959
these uh usually have two algorithms

65
00:02:08,959 --> 00:02:10,720
defined to them so first one is a

66
00:02:10,720 --> 00:02:12,959
generation algorithm uh which actually

67
00:02:12,959 --> 00:02:14,640
takes in the two uh two values that

68
00:02:14,640 --> 00:02:17,040
define the function and outputs two keys

69
00:02:17,040 --> 00:02:18,879
and then the second part is evaluation

70
00:02:18,879 --> 00:02:21,040
algorithm which actually takes in each

71
00:02:21,040 --> 00:02:23,440
of the keys and evaluation point and

72
00:02:23,440 --> 00:02:25,520
they would evaluate the function at that

73
00:02:25,520 --> 00:02:27,040
point and in particular they would

74
00:02:27,040 --> 00:02:28,879
evaluate a share of the function at that

75
00:02:28,879 --> 00:02:29,840
point

76
00:02:29,840 --> 00:02:32,879
it's a little misleading there

77
00:02:32,879 --> 00:02:34,800
one other related sort of algorithm

78
00:02:34,800 --> 00:02:37,120
which is can be seen as just a union of

79
00:02:37,120 --> 00:02:39,840
evaluation at many many points is

80
00:02:39,840 --> 00:02:42,720
algorithm which evaluates the uh the

81
00:02:42,720 --> 00:02:45,120
function at every point in the domain so

82
00:02:45,120 --> 00:02:46,879
there have been some advances in

83
00:02:46,879 --> 00:02:48,720
improving this over just a linear

84
00:02:48,720 --> 00:02:50,480
complexity algorithm of evaluating at

85
00:02:50,480 --> 00:02:53,200
every single point

86
00:02:53,519 --> 00:02:55,680
a little bit about the the uh the

87
00:02:55,680 --> 00:02:58,400
overall setup of this mpc uh protocol

88
00:02:58,400 --> 00:03:00,400
work is uh we are going to be working in

89
00:03:00,400 --> 00:03:03,440
a three-party asymmetric uh protocol

90
00:03:03,440 --> 00:03:05,200
setup

91
00:03:05,200 --> 00:03:06,159
in this

92
00:03:06,159 --> 00:03:07,840
you have two parties p0 and p1 who

93
00:03:07,840 --> 00:03:08,800
actually

94
00:03:08,800 --> 00:03:10,560
do a two out of two secret sharing of

95
00:03:10,560 --> 00:03:12,319
the input and then there's the third

96
00:03:12,319 --> 00:03:14,800
helper party p2 and the function to be

97
00:03:14,800 --> 00:03:16,640
computed is is one of these non-linear

98
00:03:16,640 --> 00:03:18,400
functions which we have talked about

99
00:03:18,400 --> 00:03:19,840
since it's a lookup style protocol it's

100
00:03:19,840 --> 00:03:21,280
agnostic to which function we are really

101
00:03:21,280 --> 00:03:23,040
looking at

102
00:03:23,040 --> 00:03:24,959
all the data is actually operating over

103
00:03:24,959 --> 00:03:28,080
this ring 2 to the power k

104
00:03:28,080 --> 00:03:30,959
and it's also

105
00:03:31,680 --> 00:03:33,280
yeah

106
00:03:33,280 --> 00:03:35,440
well what uh in terms of the corruption

107
00:03:35,440 --> 00:03:37,920
model uh it we we look at a single

108
00:03:37,920 --> 00:03:39,280
corruption model so only one of the

109
00:03:39,280 --> 00:03:40,959
three parties can be corrupt and we look

110
00:03:40,959 --> 00:03:43,040
at both semi-honest as well as malicious

111
00:03:43,040 --> 00:03:45,599
corruptions so particularly given that

112
00:03:45,599 --> 00:03:47,200
it's an asymmetric protocol the

113
00:03:47,200 --> 00:03:48,640
corruption could be in one of the

114
00:03:48,640 --> 00:03:52,080
parties uh p1 or p2 sorry p0 or p1 or it

115
00:03:52,080 --> 00:03:54,400
could also be corrupt party p2 and we

116
00:03:54,400 --> 00:03:55,519
have to handle these two cases

117
00:03:55,519 --> 00:03:57,439
differently

118
00:03:57,439 --> 00:03:58,879
so let's take a quick look at the semi

119
00:03:58,879 --> 00:04:00,480
honest protocol the semionce protocol is

120
00:04:00,480 --> 00:04:02,000
very simple it's a bi style lookup

121
00:04:02,000 --> 00:04:04,319
protocol and so on the top we have the

122
00:04:04,319 --> 00:04:06,239
input switches secret shares of a secret

123
00:04:06,239 --> 00:04:08,400
a and on the output we want the value of

124
00:04:08,400 --> 00:04:10,159
the function f of a

125
00:04:10,159 --> 00:04:11,760
so the protocol essentially has three

126
00:04:11,760 --> 00:04:13,519
simple steps so the first one is the

127
00:04:13,519 --> 00:04:15,920
party p2 actually first has some

128
00:04:15,920 --> 00:04:17,918
correlated shared correlated randomness

129
00:04:17,918 --> 00:04:21,040
r0 and r1 uh with party p0 and p1

130
00:04:21,040 --> 00:04:23,360
respectively and then the combination of

131
00:04:23,360 --> 00:04:24,960
r0 and r1 which is r so the

132
00:04:24,960 --> 00:04:26,800
reconstruction of r0 r1 which is only

133
00:04:26,800 --> 00:04:29,360
known to p2 p2 uses that to actually

134
00:04:29,360 --> 00:04:31,840
generate dpf keys for this random value

135
00:04:31,840 --> 00:04:33,199
are

136
00:04:33,199 --> 00:04:35,440
uh the dpf keys are then shared with

137
00:04:35,440 --> 00:04:37,680
with the two parties so k0 and k1 here

138
00:04:37,680 --> 00:04:39,360
are actually the two keys which are

139
00:04:39,360 --> 00:04:42,400
shared with uh with parties ps1 and p1

140
00:04:42,400 --> 00:04:44,639
the uh for the final part of the first

141
00:04:44,639 --> 00:04:46,400
step is actually uh p0 and p1

142
00:04:46,400 --> 00:04:48,160
reconstruct the value x which is r minus

143
00:04:48,160 --> 00:04:50,080
j so it's just a shift

144
00:04:50,080 --> 00:04:51,759
and then um

145
00:04:51,759 --> 00:04:54,800
p0 and p1 run eval all on all their keys

146
00:04:54,800 --> 00:04:56,880
and shift the output vector vector by x

147
00:04:56,880 --> 00:04:58,320
so which are with which is the

148
00:04:58,320 --> 00:05:00,960
reconstruction r minus a

149
00:05:00,960 --> 00:05:03,680
and then finally

150
00:05:03,680 --> 00:05:05,039
they perform a dot product of the

151
00:05:05,039 --> 00:05:06,800
shifted vector with the database df and

152
00:05:06,800 --> 00:05:09,039
now this database is just a database

153
00:05:09,039 --> 00:05:10,880
which can be publicly constructed but

154
00:05:10,880 --> 00:05:12,720
it's available to p01 people which

155
00:05:12,720 --> 00:05:14,720
contains all the values so this is very

156
00:05:14,720 --> 00:05:16,800
similar to the pir style database like

157
00:05:16,800 --> 00:05:18,880
you have a public database and then the

158
00:05:18,880 --> 00:05:20,880
the eval all allows you to actually pick

159
00:05:20,880 --> 00:05:23,440
the appropriate entry from this database

160
00:05:23,440 --> 00:05:24,639
there is a few more details to this

161
00:05:24,639 --> 00:05:26,320
protocol which i'm skipping which i've

162
00:05:26,320 --> 00:05:28,639
presented in the paper but effectively

163
00:05:28,639 --> 00:05:30,400
this is essentially the blueprint of the

164
00:05:30,400 --> 00:05:32,880
protocol

165
00:05:32,880 --> 00:05:34,479
with that i'm going to jump into the

166
00:05:34,479 --> 00:05:35,919
next part which is really the more

167
00:05:35,919 --> 00:05:37,440
interesting part of this work which is

168
00:05:37,440 --> 00:05:38,479
how do you make this protocol

169
00:05:38,479 --> 00:05:40,560
maliciously circular so in particular i

170
00:05:40,560 --> 00:05:41,840
have the same

171
00:05:41,840 --> 00:05:43,919
same components here like so we have the

172
00:05:43,919 --> 00:05:47,280
generation r0 r1 and then we have the

173
00:05:47,280 --> 00:05:48,400
the

174
00:05:48,400 --> 00:05:49,919
the other parties p0 and p1 which are

175
00:05:49,919 --> 00:05:52,400
actually doing the two-party computation

176
00:05:52,400 --> 00:05:53,280
so

177
00:05:53,280 --> 00:05:54,880
there are two main challenges when we

178
00:05:54,880 --> 00:05:56,639
try to make this protocol maliciously

179
00:05:56,639 --> 00:05:59,840
secure so the first one is if one of p0

180
00:05:59,840 --> 00:06:02,800
and p1 is actually malicious

181
00:06:02,800 --> 00:06:04,319
note that we have a

182
00:06:04,319 --> 00:06:06,160
the second part of the protocol is it's

183
00:06:06,160 --> 00:06:07,759
just purely a two-part computation

184
00:06:07,759 --> 00:06:09,840
protocol between p0 and p1 so this

185
00:06:09,840 --> 00:06:11,759
almost uh

186
00:06:11,759 --> 00:06:13,280
so the first uh challenge here is

187
00:06:13,280 --> 00:06:14,720
actually that how do we ensure the

188
00:06:14,720 --> 00:06:16,639
correctness of the two-party computation

189
00:06:16,639 --> 00:06:19,280
uh when one of p0 and p1 is uh is

190
00:06:19,280 --> 00:06:21,039
corrupt

191
00:06:21,039 --> 00:06:22,639
i'll come to how we solve this challenge

192
00:06:22,639 --> 00:06:24,000
in just a minute but the second one our

193
00:06:24,000 --> 00:06:25,919
second challenge is what if p2 is

194
00:06:25,919 --> 00:06:27,759
actually corrupt uh in which case we

195
00:06:27,759 --> 00:06:29,520
have to ensure that a whole bunch of

196
00:06:29,520 --> 00:06:31,120
things so the first one is that the dpf

197
00:06:31,120 --> 00:06:32,479
key is actually correspond to a point

198
00:06:32,479 --> 00:06:33,360
function

199
00:06:33,360 --> 00:06:35,440
second one is that the shares

200
00:06:35,440 --> 00:06:37,919
of r which are presented are actually

201
00:06:37,919 --> 00:06:40,319
corresponding to the index of the above

202
00:06:40,319 --> 00:06:42,240
dpf like if the dpf is a distributed

203
00:06:42,240 --> 00:06:45,120
point function then r is that point

204
00:06:45,120 --> 00:06:46,720
and then the final one is the secret

205
00:06:46,720 --> 00:06:48,800
shares are over z to the power k and all

206
00:06:48,800 --> 00:06:50,800
most non-prior techniques uh actually

207
00:06:50,800 --> 00:06:52,240
operate our fields

208
00:06:52,240 --> 00:06:53,840
and so how do we solve all these three

209
00:06:53,840 --> 00:06:55,360
challenges

210
00:06:55,360 --> 00:06:56,720
so the first one is actually fairly

211
00:06:56,720 --> 00:06:57,919
straightforward since it's a two-party

212
00:06:57,919 --> 00:06:59,919
computation problem with effectively a

213
00:06:59,919 --> 00:07:01,440
dishonest majority because one party

214
00:07:01,440 --> 00:07:03,360
could be maliciously corrupt

215
00:07:03,360 --> 00:07:06,000
we use a speech 2k style secret sharing

216
00:07:06,000 --> 00:07:08,639
scheme to build this foundation so in

217
00:07:08,639 --> 00:07:11,520
particular each uh secret value uh has

218
00:07:11,520 --> 00:07:13,599
three components which is the secret the

219
00:07:13,599 --> 00:07:14,800
secret

220
00:07:14,800 --> 00:07:17,360
this share of the the value a share of

221
00:07:17,360 --> 00:07:19,680
the mac and then the the mac key i got

222
00:07:19,680 --> 00:07:21,199
the share of the mac key and then

223
00:07:21,199 --> 00:07:23,199
throughout the entire product uh the

224
00:07:23,199 --> 00:07:24,720
computation we'll have the invariant

225
00:07:24,720 --> 00:07:27,280
that uh the mac and the

226
00:07:27,280 --> 00:07:29,199
the mac key the mac and the shares of

227
00:07:29,199 --> 00:07:33,280
the secret satisfy this uh this relation

228
00:07:33,280 --> 00:07:35,759
uh one other thing to note here is it's

229
00:07:35,759 --> 00:07:37,120
really interesting that

230
00:07:37,120 --> 00:07:38,479
when we have a distributed point

231
00:07:38,479 --> 00:07:40,560
function the

232
00:07:40,560 --> 00:07:42,319
the mac of the distributed point

233
00:07:42,319 --> 00:07:44,639
function is also uh

234
00:07:44,639 --> 00:07:46,240
is also at this uh distributed point

235
00:07:46,240 --> 00:07:47,520
function because it will be nonzero at

236
00:07:47,520 --> 00:07:50,080
exactly one point um which uh which

237
00:07:50,080 --> 00:07:52,240
makes it possible to actually secret

238
00:07:52,240 --> 00:07:55,520
share both this the value uh the shares

239
00:07:55,520 --> 00:07:56,960
of the uh

240
00:07:56,960 --> 00:07:58,479
the distributed point function for the

241
00:07:58,479 --> 00:08:01,840
actual data as well as for the mac

242
00:08:02,160 --> 00:08:03,680
so that's that's pretty much the first

243
00:08:03,680 --> 00:08:05,680
uh addresses most of the first challenge

244
00:08:05,680 --> 00:08:08,400
this is a very high level intuition but

245
00:08:08,400 --> 00:08:10,000
the second challenge is the more

246
00:08:10,000 --> 00:08:12,000
interesting one so how do we actually

247
00:08:12,000 --> 00:08:14,800
verify that the tpf keys correspond to a

248
00:08:14,800 --> 00:08:15,840
point function as well as they

249
00:08:15,840 --> 00:08:17,599
correspond to the right point function

250
00:08:17,599 --> 00:08:18,560
and so on

251
00:08:18,560 --> 00:08:20,560
so here we use uh the standard blueprint

252
00:08:20,560 --> 00:08:22,000
of sketching schemes like how do you

253
00:08:22,000 --> 00:08:25,759
verify um sketching schemes um in uh

254
00:08:25,759 --> 00:08:27,759
in the seminal paper by boiling in ccs

255
00:08:27,759 --> 00:08:30,240
2016. so the first part is to actually

256
00:08:30,240 --> 00:08:33,519
construct a linear sketching uh matrix

257
00:08:33,519 --> 00:08:35,919
and here we we have to actually have

258
00:08:35,919 --> 00:08:37,200
four different rows in this matrix as

259
00:08:37,200 --> 00:08:39,279
opposed to three uh previously

260
00:08:39,279 --> 00:08:42,000
and the way uh these uh

261
00:08:42,000 --> 00:08:43,760
entries are chosen that the first two

262
00:08:43,760 --> 00:08:45,120
rows are effectively independently

263
00:08:45,120 --> 00:08:47,519
randomly chosen from a sampling space

264
00:08:47,519 --> 00:08:49,279
and then the third one is actually the

265
00:08:49,279 --> 00:08:50,959
constraint one like a3i is actually just

266
00:08:50,959 --> 00:08:52,320
the product of those two and the fourth

267
00:08:52,320 --> 00:08:54,560
one is uh it's just a fixed constant

268
00:08:54,560 --> 00:08:56,399
it's uh it's actually that and we'll see

269
00:08:56,399 --> 00:08:58,640
in a moment a minute why why we do this

270
00:08:58,640 --> 00:08:59,920
and then the second part of the

271
00:08:59,920 --> 00:09:02,000
sketching scheme is actually p0 and p1

272
00:09:02,000 --> 00:09:04,000
run the eval algorithm on the keys they

273
00:09:04,000 --> 00:09:05,600
are safe so they actually get these two

274
00:09:05,600 --> 00:09:08,000
vectors y comma m y which which are the

275
00:09:08,000 --> 00:09:10,160
expansions and then they compute these

276
00:09:10,160 --> 00:09:12,959
few values like z1 z2 z3 z4 as well as z

277
00:09:12,959 --> 00:09:15,040
star and they're named in such a way

278
00:09:15,040 --> 00:09:17,839
that um z1 c2 z3 z4

279
00:09:17,839 --> 00:09:20,160
if we look down at this expression here

280
00:09:20,160 --> 00:09:22,160
it has there are three effect uh three

281
00:09:22,160 --> 00:09:23,839
parentheses each of them

282
00:09:23,839 --> 00:09:25,920
uh have their uh

283
00:09:25,920 --> 00:09:28,320
use here so the first one actually z z1

284
00:09:28,320 --> 00:09:31,120
z2 minus z3 actually ensures that it's

285
00:09:31,120 --> 00:09:32,959
it's going to be a point function the

286
00:09:32,959 --> 00:09:36,320
second term here uh ensures that the the

287
00:09:36,320 --> 00:09:37,839
index of the point function actually

288
00:09:37,839 --> 00:09:40,000
corresponds to the secret shares of r

289
00:09:40,000 --> 00:09:41,839
which are supplied and then the final

290
00:09:41,839 --> 00:09:43,519
lower term actually corresponds to the

291
00:09:43,519 --> 00:09:46,959
fact that you can have the uh the mac

292
00:09:46,959 --> 00:09:49,200
on these values to verify with the mac

293
00:09:49,200 --> 00:09:50,640
provided by the

294
00:09:50,640 --> 00:09:52,399
uh by the party beauty

295
00:09:52,399 --> 00:09:54,480
so that's pretty much uh the entire

296
00:09:54,480 --> 00:09:56,880
blueprint if we dig deeper into why this

297
00:09:56,880 --> 00:09:58,399
approach works we really go to the heart

298
00:09:58,399 --> 00:10:00,320
of this work which is

299
00:10:00,320 --> 00:10:04,399
um when we have a check such as this z1

300
00:10:04,399 --> 00:10:06,320
z2 minus c3 is equal to 0 if we expand

301
00:10:06,320 --> 00:10:08,560
it we get an expression like this and

302
00:10:08,560 --> 00:10:11,120
this expression really allows us to uh

303
00:10:11,120 --> 00:10:13,200
do a verification with high probability

304
00:10:13,200 --> 00:10:15,680
because of this level known as shortcut

305
00:10:15,680 --> 00:10:18,560
lemma which is uh which applies over

306
00:10:18,560 --> 00:10:20,480
finite fields and allows us to ensure

307
00:10:20,480 --> 00:10:22,079
that like if you have a random sampling

308
00:10:22,079 --> 00:10:24,399
of ai's and this is a bilinear

309
00:10:24,399 --> 00:10:26,720
polynomial you can ensure that if it is

310
00:10:26,720 --> 00:10:28,880
non-zero uh then with high probability

311
00:10:28,880 --> 00:10:30,160
you will get a non-zero value and so the

312
00:10:30,160 --> 00:10:32,320
verification actually enables you to

313
00:10:32,320 --> 00:10:35,120
check whether the polynomial was zero

314
00:10:35,120 --> 00:10:37,519
so um in this work what we do is uh the

315
00:10:37,519 --> 00:10:39,200
core result is really a generalization

316
00:10:39,200 --> 00:10:41,760
of this uh to uh short zipper lmr2 to

317
00:10:41,760 --> 00:10:43,680
give valid over rings and it's a

318
00:10:43,680 --> 00:10:45,279
bi-linear version i have not been able

319
00:10:45,279 --> 00:10:47,040
to prove a generalized version and so

320
00:10:47,040 --> 00:10:48,880
there is some open questions in the work

321
00:10:48,880 --> 00:10:50,560
uh but i would be happy to talk to

322
00:10:50,560 --> 00:10:52,240
anyone who is interested in generalizing

323
00:10:52,240 --> 00:10:54,000
this further uh the important thing to

324
00:10:54,000 --> 00:10:56,000
note here is that there is a slack here

325
00:10:56,000 --> 00:10:58,079
and so this uh this sort of reminiscent

326
00:10:58,079 --> 00:10:59,760
from the speeds2k

327
00:10:59,760 --> 00:11:01,440
but it allows us to actually construct

328
00:11:01,440 --> 00:11:03,600
practical protocols

329
00:11:03,600 --> 00:11:06,399
finally the uh the protocol um very

330
00:11:06,399 --> 00:11:08,640
simple benchmarks uh actually show that

331
00:11:08,640 --> 00:11:10,399
this is very promising particularly in

332
00:11:10,399 --> 00:11:12,480
the land setting for about

333
00:11:12,480 --> 00:11:15,440
uh i would say 10 to the power 3 uh

334
00:11:15,440 --> 00:11:17,279
that's the size the best batch size of

335
00:11:17,279 --> 00:11:19,040
these protocols so since they are

336
00:11:19,040 --> 00:11:21,760
compute heavy uh the scaling is in favor

337
00:11:21,760 --> 00:11:24,160
of other protocols but this one uh but

338
00:11:24,160 --> 00:11:25,600
usually nonlinear functions are applied

339
00:11:25,600 --> 00:11:27,040
in really small batch sizes and that's

340
00:11:27,040 --> 00:11:27,760
why

341
00:11:27,760 --> 00:11:29,839
the protocol shines more in the

342
00:11:29,839 --> 00:11:31,360
smaller batch size as well as in the van

343
00:11:31,360 --> 00:11:32,320
setting

344
00:11:32,320 --> 00:11:34,480
um in the malicious protocol regime like

345
00:11:34,480 --> 00:11:36,079
you have

346
00:11:36,079 --> 00:11:37,760
slightly different scaling

347
00:11:37,760 --> 00:11:40,880
but still comparable to the prior work

348
00:11:40,880 --> 00:11:42,880
and finally um

349
00:11:42,880 --> 00:11:45,279
just to summarize um

350
00:11:45,279 --> 00:11:46,560
we have presented some constant round

351
00:11:46,560 --> 00:11:48,720
protocols the generalization of short

352
00:11:48,720 --> 00:11:50,240
supplement to drinks could be

353
00:11:50,240 --> 00:11:52,560
interesting more broadly but also enable

354
00:11:52,560 --> 00:11:53,920
semi honest to malicious conversion

355
00:11:53,920 --> 00:11:55,040
which could be of interest to other

356
00:11:55,040 --> 00:11:57,360
works and finally dpf approaches are

357
00:11:57,360 --> 00:11:59,760
known to be compute heavy and so with

358
00:11:59,760 --> 00:12:01,360
work such as gpu assisted or hardware

359
00:12:01,360 --> 00:12:03,600
assist or secure computation it might be

360
00:12:03,600 --> 00:12:05,440
more interesting to actually look into

361
00:12:05,440 --> 00:12:07,040
these protocols from a performance point

362
00:12:07,040 --> 00:12:07,920
of view

363
00:12:07,920 --> 00:12:11,079
thank you

