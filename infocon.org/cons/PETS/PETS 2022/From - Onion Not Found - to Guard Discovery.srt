1
00:00:00,480 --> 00:00:02,800
hi thanks for joining my pets 2022

2
00:00:02,800 --> 00:00:04,799
presentation on our paper called from

3
00:00:04,799 --> 00:00:07,120
onion not found to guard discovery i'm

4
00:00:07,120 --> 00:00:08,720
land oldenburg and this is joint work

5
00:00:08,720 --> 00:00:10,320
together with ganesha of radboud

6
00:00:10,320 --> 00:00:13,679
university and claudia diaz of cow liver

7
00:00:13,679 --> 00:00:15,360
towards the largest deployed anonymity

8
00:00:15,360 --> 00:00:17,279
service that we have available

9
00:00:17,279 --> 00:00:19,439
users of tor can use tor browser to

10
00:00:19,439 --> 00:00:21,680
browse the web privately by relaying

11
00:00:21,680 --> 00:00:23,920
their traffic through tor

12
00:00:23,920 --> 00:00:25,680
connections to the public web are

13
00:00:25,680 --> 00:00:27,680
typically relayed through a chain or

14
00:00:27,680 --> 00:00:30,880
circuit and tour or three tour relays

15
00:00:30,880 --> 00:00:33,200
so users in this case select a guard

16
00:00:33,200 --> 00:00:35,200
then the middle and then an exit

17
00:00:35,200 --> 00:00:36,640
through which to channel their traffic

18
00:00:36,640 --> 00:00:38,800
through towards the public web dns or

19
00:00:38,800 --> 00:00:40,320
web servers

20
00:00:40,320 --> 00:00:42,399
guards on these circuits have a

21
00:00:42,399 --> 00:00:44,399
particularly important position because

22
00:00:44,399 --> 00:00:46,000
they know the ip addresses of their

23
00:00:46,000 --> 00:00:48,559
users and users stick to them for longer

24
00:00:48,559 --> 00:00:50,640
amounts of time

25
00:00:50,640 --> 00:00:52,399
there's also connections within the tour

26
00:00:52,399 --> 00:00:55,120
web so destinations reached by

27
00:00:55,120 --> 00:00:57,760
connecting to onion addresses

28
00:00:57,760 --> 00:00:59,920
and onion services offer also the server

29
00:00:59,920 --> 00:01:01,760
side privacy protections that users

30
00:01:01,760 --> 00:01:03,520
enjoy as well

31
00:01:03,520 --> 00:01:04,959
connecting to an onion service is a bit

32
00:01:04,959 --> 00:01:06,960
of a complicated process involving

33
00:01:06,960 --> 00:01:09,360
multiple protocols however we will only

34
00:01:09,360 --> 00:01:11,360
focus on the first step so the

35
00:01:11,360 --> 00:01:13,439
descriptor lookup at hidden servers

36
00:01:13,439 --> 00:01:15,600
directories or hsds because this is

37
00:01:15,600 --> 00:01:18,000
relevant to our attack

38
00:01:18,000 --> 00:01:19,920
downloading such descriptor is relevant

39
00:01:19,920 --> 00:01:21,439
because connecting to an audio server is

40
00:01:21,439 --> 00:01:23,280
a bit more involved and more information

41
00:01:23,280 --> 00:01:25,600
is needed for how to reach out to them

42
00:01:25,600 --> 00:01:27,439
you can think of this step as somewhat

43
00:01:27,439 --> 00:01:30,400
like dns but for indian services

44
00:01:30,400 --> 00:01:32,240
crucially for our attack

45
00:01:32,240 --> 00:01:34,079
any descriptor describing for how to

46
00:01:34,079 --> 00:01:36,799
connect to an onion service is located

47
00:01:36,799 --> 00:01:38,880
at six hidden service directories or hs

48
00:01:38,880 --> 00:01:41,360
tiers such that if any one of them is

49
00:01:41,360 --> 00:01:43,360
down there's backup ones that users can

50
00:01:43,360 --> 00:01:45,040
reach out to and still be able to

51
00:01:45,040 --> 00:01:46,799
download the um descriptor of the

52
00:01:46,799 --> 00:01:48,479
service

53
00:01:48,479 --> 00:01:50,560
and also relevant for us is that each

54
00:01:50,560 --> 00:01:52,479
lookup for such a descriptor is done via

55
00:01:52,479 --> 00:01:55,520
fresh4hop circuit

56
00:01:55,520 --> 00:01:58,079
so let's look at how a lookup is done

57
00:01:58,079 --> 00:01:59,600
client from the client to the hidden

58
00:01:59,600 --> 00:02:01,439
search directories in the case that the

59
00:02:01,439 --> 00:02:03,680
onion service address requested by the

60
00:02:03,680 --> 00:02:05,600
client does not exist so there is no

61
00:02:05,600 --> 00:02:06,799
descriptor for this onion service

62
00:02:06,799 --> 00:02:09,360
address you can see here a tour browser

63
00:02:09,360 --> 00:02:11,280
user reaching out to

64
00:02:11,280 --> 00:02:12,640
one of the six hidden service

65
00:02:12,640 --> 00:02:14,959
directories responsible for

66
00:02:14,959 --> 00:02:16,720
the maintaining the hidden service

67
00:02:16,720 --> 00:02:19,599
descriptor of the address attack.onion

68
00:02:19,599 --> 00:02:21,520
attack.onion does not exist so the

69
00:02:21,520 --> 00:02:22,239
hidden

70
00:02:22,239 --> 00:02:23,920
directory cannot respond with anything

71
00:02:23,920 --> 00:02:25,200
that the user can

72
00:02:25,200 --> 00:02:27,120
use to connect to the servers and thus

73
00:02:27,120 --> 00:02:29,680
responds with four or four not found

74
00:02:29,680 --> 00:02:33,120
when the victim receives such a

75
00:02:33,120 --> 00:02:35,280
response it will continue to the next

76
00:02:35,280 --> 00:02:37,360
hidden source directory out of those six

77
00:02:37,360 --> 00:02:39,120
and ask again for the descriptor of

78
00:02:39,120 --> 00:02:41,120
attack.onion again the hidden source

79
00:02:41,120 --> 00:02:42,720
directory does not know about this

80
00:02:42,720 --> 00:02:44,239
particular address so it will respond

81
00:02:44,239 --> 00:02:46,160
with four for not found

82
00:02:46,160 --> 00:02:48,640
this process is repeated until all six

83
00:02:48,640 --> 00:02:49,680
hidden source directories have been

84
00:02:49,680 --> 00:02:51,760
contacted by the user always receiving a

85
00:02:51,760 --> 00:02:53,200
negative response

86
00:02:53,200 --> 00:02:56,239
and then the lookup is abandoned

87
00:02:56,239 --> 00:02:58,000
for our attack we consider a broad range

88
00:02:58,000 --> 00:02:59,840
of adversaries that only need to provide

89
00:02:59,840 --> 00:03:02,000
a couple of capabilities

90
00:03:02,000 --> 00:03:03,920
first we assume that they serve a

91
00:03:03,920 --> 00:03:06,319
fraction of tor's total relay bandwidth

92
00:03:06,319 --> 00:03:08,239
for example one percent two percent or

93
00:03:08,239 --> 00:03:11,120
five percent of tools relay bandwidth

94
00:03:11,120 --> 00:03:12,959
additionally the adversary needs to run

95
00:03:12,959 --> 00:03:14,159
a few of those hidden service

96
00:03:14,159 --> 00:03:16,400
directories or hs tiers but a small

97
00:03:16,400 --> 00:03:20,239
number such as 10 or 20 of them suffices

98
00:03:20,239 --> 00:03:21,519
and finally the adversary needs to

99
00:03:21,519 --> 00:03:24,159
somehow be part of the attack webpage

100
00:03:24,159 --> 00:03:25,840
that victims will visit

101
00:03:25,840 --> 00:03:27,440
and this can happen by them being the

102
00:03:27,440 --> 00:03:30,159
first party or by being a third party

103
00:03:30,159 --> 00:03:31,360
included in the page such as an

104
00:03:31,360 --> 00:03:33,440
advertiser

105
00:03:33,440 --> 00:03:35,280
and our attack is based on the

106
00:03:35,280 --> 00:03:38,159
unregulated behavior client side to look

107
00:03:38,159 --> 00:03:40,239
up hidden source descriptors and the

108
00:03:40,239 --> 00:03:42,959
distinctive cell pattern of a of such

109
00:03:42,959 --> 00:03:45,200
unsuccessful lookup so the where the

110
00:03:45,200 --> 00:03:47,200
response is for for not found

111
00:03:47,200 --> 00:03:48,799
we exploit this for a guard discovery

112
00:03:48,799 --> 00:03:51,120
attack and we also evaluate counter

113
00:03:51,120 --> 00:03:53,360
measures to help mitigate the impact of

114
00:03:53,360 --> 00:03:54,720
our attack

115
00:03:54,720 --> 00:03:56,959
so let's look at how it works

116
00:03:56,959 --> 00:03:59,599
you can see here a tor browser victim

117
00:03:59,599 --> 00:04:02,000
first requesting the target web page

118
00:04:02,000 --> 00:04:05,599
just via a regular three hop circuit

119
00:04:05,599 --> 00:04:07,280
as part of the target web page the

120
00:04:07,280 --> 00:04:09,760
adversary is somehow being able able to

121
00:04:09,760 --> 00:04:12,000
control parts of it and will embed a

122
00:04:12,000 --> 00:04:13,200
malicious

123
00:04:13,200 --> 00:04:15,200
script into the webpage

124
00:04:15,200 --> 00:04:17,600
in step three you can see how

125
00:04:17,600 --> 00:04:20,560
when the user receives the response from

126
00:04:20,560 --> 00:04:23,120
the web server this malicious script

127
00:04:23,120 --> 00:04:24,800
being part of the response starts

128
00:04:24,800 --> 00:04:27,280
embedding non-existing onion service

129
00:04:27,280 --> 00:04:29,520
addresses into the web page

130
00:04:29,520 --> 00:04:31,600
through a large number of live tour

131
00:04:31,600 --> 00:04:33,759
network experiments we determined that

132
00:04:33,759 --> 00:04:35,199
embedding at the rate of three

133
00:04:35,199 --> 00:04:37,040
non-existing audience addresses per

134
00:04:37,040 --> 00:04:38,240
second

135
00:04:38,240 --> 00:04:40,080
results in the highest overall number of

136
00:04:40,080 --> 00:04:43,840
lookups done by clients

137
00:04:44,000 --> 00:04:46,000
step four is exactly the process that i

138
00:04:46,000 --> 00:04:48,000
described a couple of slides ago so the

139
00:04:48,000 --> 00:04:49,680
victim to our browser will start

140
00:04:49,680 --> 00:04:51,759
creating many of these fresh four-hop

141
00:04:51,759 --> 00:04:54,160
circuits to hidden service directories

142
00:04:54,160 --> 00:04:55,919
in order to download the descriptors of

143
00:04:55,919 --> 00:04:59,600
these allegedly existing onion services

144
00:04:59,600 --> 00:05:01,840
um at some point the adversary is going

145
00:05:01,840 --> 00:05:03,919
to be part of one of these lookups in

146
00:05:03,919 --> 00:05:06,160
the second position and in in the hs

147
00:05:06,160 --> 00:05:08,479
tier so the fourth position

148
00:05:08,479 --> 00:05:10,400
and this is important uh

149
00:05:10,400 --> 00:05:11,759
for the adversary because this will

150
00:05:11,759 --> 00:05:13,280
allow them to

151
00:05:13,280 --> 00:05:15,600
ultimately discover g1 being the guard

152
00:05:15,600 --> 00:05:17,440
of the victim

153
00:05:17,440 --> 00:05:20,000
um the adversary keeps track of

154
00:05:20,000 --> 00:05:21,600
any of the cell patterns of the lookups

155
00:05:21,600 --> 00:05:23,199
that it sees and also whether for

156
00:05:23,199 --> 00:05:25,120
example at the hidden service directory

157
00:05:25,120 --> 00:05:27,520
uh position the request was for a target

158
00:05:27,520 --> 00:05:29,039
address or not

159
00:05:29,039 --> 00:05:30,880
crucially though in step six you can see

160
00:05:30,880 --> 00:05:32,560
that the adversary always responds

161
00:05:32,560 --> 00:05:33,919
according to protocol so it does not

162
00:05:33,919 --> 00:05:36,479
mess with the lookup so it will respond

163
00:05:36,479 --> 00:05:38,639
with four for not found to any of the

164
00:05:38,639 --> 00:05:40,320
requests that it does not know the

165
00:05:40,320 --> 00:05:41,759
descriptors for including the attack

166
00:05:41,759 --> 00:05:43,759
addresses

167
00:05:43,759 --> 00:05:46,080
when the adversary sees a lookup for

168
00:05:46,080 --> 00:05:47,360
target address at the hidden source

169
00:05:47,360 --> 00:05:48,880
directory position

170
00:05:48,880 --> 00:05:50,880
it will reach out to all its

171
00:05:50,880 --> 00:05:53,680
middle relays such as in this case r5

172
00:05:53,680 --> 00:05:56,319
and put together the two views only

173
00:05:56,319 --> 00:05:57,520
selecting

174
00:05:57,520 --> 00:05:59,520
the instances where target address was

175
00:05:59,520 --> 00:06:01,360
requested and the cell pattern at the

176
00:06:01,360 --> 00:06:03,360
second hop matched the

177
00:06:03,360 --> 00:06:05,360
attack cell set pattern

178
00:06:05,360 --> 00:06:06,560
additionally there's a couple of more

179
00:06:06,560 --> 00:06:08,639
checks about metadata for this request

180
00:06:08,639 --> 00:06:10,240
but ultimately the adverse you will be

181
00:06:10,240 --> 00:06:12,479
able to note down g1 as the candidate

182
00:06:12,479 --> 00:06:15,680
guard for the victim of this attack

183
00:06:15,680 --> 00:06:18,319
we use simulations to show how fast our

184
00:06:18,319 --> 00:06:21,199
attack is and we do this by the a victim

185
00:06:21,199 --> 00:06:22,880
visiting the target

186
00:06:22,880 --> 00:06:24,400
attack webpage

187
00:06:24,400 --> 00:06:26,880
and then we tracking the time

188
00:06:26,880 --> 00:06:28,319
that it takes to discover the guard of

189
00:06:28,319 --> 00:06:30,000
this victim

190
00:06:30,000 --> 00:06:32,400
we take a couple of adversarial

191
00:06:32,400 --> 00:06:35,120
settings into account such as the

192
00:06:35,120 --> 00:06:37,039
bandwidth share b that the adverse

193
00:06:37,039 --> 00:06:38,319
adversary contributes to the tour

194
00:06:38,319 --> 00:06:40,000
network again this is between one

195
00:06:40,000 --> 00:06:42,560
percent two percent or five percent

196
00:06:42,560 --> 00:06:44,639
also we consider the share of the hidden

197
00:06:44,639 --> 00:06:46,479
service directories for any of the

198
00:06:46,479 --> 00:06:48,720
online service addresses that are under

199
00:06:48,720 --> 00:06:50,479
adversarial control

200
00:06:50,479 --> 00:06:52,000
so in this case this can be one out of

201
00:06:52,000 --> 00:06:53,840
six that we consider or two out of six

202
00:06:53,840 --> 00:06:55,280
or one over three

203
00:06:55,280 --> 00:06:58,720
um and also for legacy v2 onion services

204
00:06:58,720 --> 00:07:00,319
we include

205
00:07:00,319 --> 00:07:01,919
the setting where all of the hidden

206
00:07:01,919 --> 00:07:03,599
source directories for a particular

207
00:07:03,599 --> 00:07:05,680
address are an adversary control this is

208
00:07:05,680 --> 00:07:08,000
not relevant for v3 onion services

209
00:07:08,000 --> 00:07:10,479
anymore that are the standard now

210
00:07:10,479 --> 00:07:12,080
for this setting we consider one over

211
00:07:12,080 --> 00:07:14,639
three to be the the most

212
00:07:14,639 --> 00:07:17,520
realistic and in this case strongest

213
00:07:17,520 --> 00:07:20,240
adversary setting

214
00:07:20,240 --> 00:07:22,240
of course users also do unrelated

215
00:07:22,240 --> 00:07:24,080
background lookups that result in four

216
00:07:24,080 --> 00:07:25,840
or final found responses

217
00:07:25,840 --> 00:07:28,639
and we have to consider the rate of

218
00:07:28,639 --> 00:07:31,120
these background or noise lookups

219
00:07:31,120 --> 00:07:32,560
because they may potentially lead to

220
00:07:32,560 --> 00:07:34,000
false positives

221
00:07:34,000 --> 00:07:36,400
on the adversarial side

222
00:07:36,400 --> 00:07:38,720
so we we do a experiment and

223
00:07:38,720 --> 00:07:41,520
use a an estimate of this noise look up

224
00:07:41,520 --> 00:07:42,840
rate in our

225
00:07:42,840 --> 00:07:44,400
simulations

226
00:07:44,400 --> 00:07:45,840
from our live tour network experiments

227
00:07:45,840 --> 00:07:48,240
we have collected a large number of um

228
00:07:48,240 --> 00:07:50,800
actual lookups that we re use for our

229
00:07:50,800 --> 00:07:52,479
simulations and base our requests in the

230
00:07:52,479 --> 00:07:54,080
simulations on

231
00:07:54,080 --> 00:07:56,080
and then ultimately it is important that

232
00:07:56,080 --> 00:07:56,960
we

233
00:07:56,960 --> 00:07:59,120
track the

234
00:07:59,120 --> 00:08:01,199
seeing a guard twice for the adversary

235
00:08:01,199 --> 00:08:02,800
so we want to note down

236
00:08:02,800 --> 00:08:04,160
the occurrence of a particular guard

237
00:08:04,160 --> 00:08:05,599
twice for a victim before we make a

238
00:08:05,599 --> 00:08:07,440
decision because this drives down the

239
00:08:07,440 --> 00:08:10,319
false positive rate

240
00:08:10,319 --> 00:08:12,400
so looking at the main result plot this

241
00:08:12,400 --> 00:08:14,240
is a cumulative distribution plot and

242
00:08:14,240 --> 00:08:15,520
you can see that the strength of the

243
00:08:15,520 --> 00:08:17,520
adversary increases from top left to

244
00:08:17,520 --> 00:08:18,720
bottom right

245
00:08:18,720 --> 00:08:20,639
in the columns you have the uh the share

246
00:08:20,639 --> 00:08:22,319
of the hidden service directories that

247
00:08:22,319 --> 00:08:24,080
the anniversary controls

248
00:08:24,080 --> 00:08:26,960
and on in the rows you see um the relay

249
00:08:26,960 --> 00:08:29,360
bandwidth share of the adversary

250
00:08:29,360 --> 00:08:31,039
and for the adversary that we consider

251
00:08:31,039 --> 00:08:33,919
realistic and strongest uh in the in the

252
00:08:33,919 --> 00:08:36,880
current tour setting h over um

253
00:08:36,880 --> 00:08:40,000
one three um and b equals five percent

254
00:08:40,000 --> 00:08:42,799
we see that after 12.06 seconds uh the

255
00:08:42,799 --> 00:08:44,560
adversary has discovered the gods of

256
00:08:44,560 --> 00:08:46,480
fifty percent of the victims

257
00:08:46,480 --> 00:08:48,160
and it takes uh diversity less than

258
00:08:48,160 --> 00:08:51,040
fifty seconds to uh discover the gods of

259
00:08:51,040 --> 00:08:54,959
ninety-nine percent of all the victims

260
00:08:54,959 --> 00:08:56,320
the total number of simulations done for

261
00:08:56,320 --> 00:08:58,560
this plot is

262
00:08:58,560 --> 00:09:01,839
2.5 million

263
00:09:02,240 --> 00:09:04,080
in terms of countermeasures we consider

264
00:09:04,080 --> 00:09:06,240
two approaches to mitigate the impact of

265
00:09:06,240 --> 00:09:08,480
our attack the first one

266
00:09:08,480 --> 00:09:10,560
tries to limit the number of circuit

267
00:09:10,560 --> 00:09:12,959
building attempts that clients can do

268
00:09:12,959 --> 00:09:15,519
before being regulated or throttled so

269
00:09:15,519 --> 00:09:18,320
this is an approach to cap the number of

270
00:09:18,320 --> 00:09:19,440
attempts

271
00:09:19,440 --> 00:09:22,240
and the second approach tries to rather

272
00:09:22,240 --> 00:09:24,640
restrict the set of relays that are

273
00:09:24,640 --> 00:09:26,320
eligible for a particular position on

274
00:09:26,320 --> 00:09:28,399
those circuits so this goes towards

275
00:09:28,399 --> 00:09:30,880
reusing prior made choices

276
00:09:30,880 --> 00:09:32,720
for future attempts

277
00:09:32,720 --> 00:09:34,240
and these map nicely onto our culture

278
00:09:34,240 --> 00:09:35,519
measures that

279
00:09:35,519 --> 00:09:37,440
i'm showing here on the slides

280
00:09:37,440 --> 00:09:39,120
the first one is that we propose to

281
00:09:39,120 --> 00:09:40,959
include a token bucket at the tour

282
00:09:40,959 --> 00:09:43,680
browser tab level that will result in

283
00:09:43,680 --> 00:09:45,600
the tour browser tab having always

284
00:09:45,600 --> 00:09:47,360
having to take a token when trying to

285
00:09:47,360 --> 00:09:49,120
build such circuit

286
00:09:49,120 --> 00:09:51,200
such lookup circuit and when the token

287
00:09:51,200 --> 00:09:53,040
bucket is empty no more attempts can be

288
00:09:53,040 --> 00:09:54,320
done

289
00:09:54,320 --> 00:09:56,320
and the second approach is

290
00:09:56,320 --> 00:09:57,440
actually a proposal by the tour

291
00:09:57,440 --> 00:09:59,920
developers called vanguard's light

292
00:09:59,920 --> 00:10:01,760
and vanguard's light

293
00:10:01,760 --> 00:10:04,720
applies the concept of guards to the

294
00:10:04,720 --> 00:10:06,959
second hop position on onion circuits so

295
00:10:06,959 --> 00:10:09,279
it restricts the set of eligible

296
00:10:09,279 --> 00:10:11,600
relays for this position

297
00:10:11,600 --> 00:10:12,399
from

298
00:10:12,399 --> 00:10:15,279
potentially all tor relays to a set of

299
00:10:15,279 --> 00:10:17,120
four chosen by the user for a particular

300
00:10:17,120 --> 00:10:18,880
amount of time

301
00:10:18,880 --> 00:10:20,880
and this naturally limits the exposure

302
00:10:20,880 --> 00:10:22,560
of toy users to

303
00:10:22,560 --> 00:10:23,760
the ones that have at least one

304
00:10:23,760 --> 00:10:26,079
adversarial

305
00:10:26,079 --> 00:10:27,600
second hop guard

306
00:10:27,600 --> 00:10:29,440
and wenger's light was implemented

307
00:10:29,440 --> 00:10:32,959
deployed and tore 0.4.7

308
00:10:32,959 --> 00:10:34,480
line

309
00:10:34,480 --> 00:10:37,279
looking at the results we can see that

310
00:10:37,279 --> 00:10:39,279
the token bucket countermeasure is quite

311
00:10:39,279 --> 00:10:41,760
effective against our particular attack

312
00:10:41,760 --> 00:10:44,640
so against the adversary controlling

313
00:10:44,640 --> 00:10:46,560
one third of all

314
00:10:46,560 --> 00:10:48,399
the hidden service directories

315
00:10:48,399 --> 00:10:49,680
that are

316
00:10:49,680 --> 00:10:51,920
maintaining the attack addresses

317
00:10:51,920 --> 00:10:53,839
and for various initial values in the

318
00:10:53,839 --> 00:10:57,040
token bucket so this is the the rows

319
00:10:57,040 --> 00:10:58,640
we see that after five minutes of attack

320
00:10:58,640 --> 00:11:00,800
time uh compromise probabilities are

321
00:11:00,800 --> 00:11:02,560
between one percent for

322
00:11:02,560 --> 00:11:04,240
an initial value of five

323
00:11:04,240 --> 00:11:06,000
two percent for initial value of ten and

324
00:11:06,000 --> 00:11:07,760
four percent of an initial value of

325
00:11:07,760 --> 00:11:10,160
fifteen so this is down from

326
00:11:10,160 --> 00:11:12,839
beyond ninety-nine percent um compromise

327
00:11:12,839 --> 00:11:14,640
probability

328
00:11:14,640 --> 00:11:16,640
vanguard's light

329
00:11:16,640 --> 00:11:18,800
presents a different picture so in the

330
00:11:18,800 --> 00:11:21,519
case that tour users chose at least one

331
00:11:21,519 --> 00:11:23,120
adversarial relay as part of their

332
00:11:23,120 --> 00:11:26,000
second hop guard set compromise is quick

333
00:11:26,000 --> 00:11:28,320
you can see here that after 21.31

334
00:11:28,320 --> 00:11:30,240
seconds 99

335
00:11:30,240 --> 00:11:32,640
um of the victims guards have been

336
00:11:32,640 --> 00:11:34,880
discovered by the adversary however this

337
00:11:34,880 --> 00:11:36,560
is limited to only the set of two users

338
00:11:36,560 --> 00:11:38,000
that actually selected and very

339
00:11:38,000 --> 00:11:39,920
adversarial relay the second hop guard

340
00:11:39,920 --> 00:11:40,720
set

341
00:11:40,720 --> 00:11:43,200
and this applies to on average only

342
00:11:43,200 --> 00:11:44,399
eighteen point five percent of tour

343
00:11:44,399 --> 00:11:46,880
users for the five percent uh bandwidth

344
00:11:46,880 --> 00:11:47,680
share

345
00:11:47,680 --> 00:11:48,480
um

346
00:11:48,480 --> 00:11:50,720
adversary the remaining two users are

347
00:11:50,720 --> 00:11:52,720
fine

348
00:11:52,720 --> 00:11:54,000
thank you very much this was my

349
00:11:54,000 --> 00:11:55,600
presentation you can find code and data

350
00:11:55,600 --> 00:11:57,279
at this location and i'm happy to take

351
00:11:57,279 --> 00:12:00,079
questions

