1
00:00:00,320 --> 00:00:01,280
hi

2
00:00:01,280 --> 00:00:03,520
my name is vera rimer and today i will

3
00:00:03,520 --> 00:00:06,000
present our paper titled trace oddity

4
00:00:06,000 --> 00:00:07,919
methodologies for data-driven traffic

5
00:00:07,919 --> 00:00:09,440
analysis on tor

6
00:00:09,440 --> 00:00:11,120
this is joined to work with my

7
00:00:11,120 --> 00:00:12,960
colleagues from kluven and our

8
00:00:12,960 --> 00:00:15,040
collaborators from bohum and red baud

9
00:00:15,040 --> 00:00:16,800
universities

10
00:00:16,800 --> 00:00:19,119
traffic analysis attacks against secure

11
00:00:19,119 --> 00:00:20,800
and private communication seem like a

12
00:00:20,800 --> 00:00:22,400
never-ending problem

13
00:00:22,400 --> 00:00:24,560
in case of tor while it protects the

14
00:00:24,560 --> 00:00:26,240
source and the destination of private

15
00:00:26,240 --> 00:00:28,480
communication the traffic metadata

16
00:00:28,480 --> 00:00:30,960
remains available for passive analysis

17
00:00:30,960 --> 00:00:32,320
attackers can still attempt to

18
00:00:32,320 --> 00:00:34,160
de-anonymize their users and their

19
00:00:34,160 --> 00:00:36,160
activities on the web

20
00:00:36,160 --> 00:00:37,600
the attacks vary in their goals and

21
00:00:37,600 --> 00:00:39,520
capabilities and the end-to-end

22
00:00:39,520 --> 00:00:41,120
confirmation attack that i will talk

23
00:00:41,120 --> 00:00:43,360
about today involves a very powerful

24
00:00:43,360 --> 00:00:45,120
attacker for instance a nation-state

25
00:00:45,120 --> 00:00:47,680
adversary who has access to both ends of

26
00:00:47,680 --> 00:00:48,960
communication

27
00:00:48,960 --> 00:00:50,640
namely the attacker observes traffic

28
00:00:50,640 --> 00:00:52,480
between the tor client and the entry

29
00:00:52,480 --> 00:00:54,879
node of the network and between the exit

30
00:00:54,879 --> 00:00:56,719
node and the destination

31
00:00:56,719 --> 00:00:59,039
these two segments can be correlated to

32
00:00:59,039 --> 00:01:01,840
the anonymized private users

33
00:01:01,840 --> 00:01:04,000
while there are many intergrain aspects

34
00:01:04,000 --> 00:01:05,920
to this attack in our study we looked

35
00:01:05,920 --> 00:01:08,000
specifically at the experimental setups

36
00:01:08,000 --> 00:01:09,840
that are used in research labs for

37
00:01:09,840 --> 00:01:11,439
approximate and attack performance in

38
00:01:11,439 --> 00:01:12,560
the wild

39
00:01:12,560 --> 00:01:14,400
the fundamental issue there is that

40
00:01:14,400 --> 00:01:16,640
while generating our own client-side

41
00:01:16,640 --> 00:01:18,960
traffic is feasible collecting traffic

42
00:01:18,960 --> 00:01:21,680
on the other side is really challenging

43
00:01:21,680 --> 00:01:23,200
as researchers we cannot trivially

44
00:01:23,200 --> 00:01:25,119
obtain access to the exit nodes in the

45
00:01:25,119 --> 00:01:27,360
safe way as that would come with ethical

46
00:01:27,360 --> 00:01:29,920
implications because we would expose

47
00:01:29,920 --> 00:01:32,720
realtor users it is also infeasible to

48
00:01:32,720 --> 00:01:34,320
monitor traffic on the destination

49
00:01:34,320 --> 00:01:36,400
itself as we would need access to a lot

50
00:01:36,400 --> 00:01:38,400
of web servers to provide proper

51
00:01:38,400 --> 00:01:41,520
diversity of the hosted content

52
00:01:41,520 --> 00:01:42,960
so the state-of-the-art solution is

53
00:01:42,960 --> 00:01:45,200
adding a proxy jump when traffic needs

54
00:01:45,200 --> 00:01:47,200
to pass between the exit node and the

55
00:01:47,200 --> 00:01:49,920
web server we enforce a detour instead

56
00:01:49,920 --> 00:01:51,600
of going directly the traffic first

57
00:01:51,600 --> 00:01:53,439
passes through a proxy server where it

58
00:01:53,439 --> 00:01:55,680
can be captured so we don't need any

59
00:01:55,680 --> 00:01:57,840
exits or destinations anymore and we do

60
00:01:57,840 --> 00:01:59,920
not need to see any real traffic but

61
00:01:59,920 --> 00:02:01,840
only our own generated traffic that

62
00:02:01,840 --> 00:02:04,479
passes through our uncontrolled proxy

63
00:02:04,479 --> 00:02:05,920
and this is currently how science

64
00:02:05,920 --> 00:02:07,680
approximates and to

65
00:02:07,680 --> 00:02:09,038
in the real world

66
00:02:09,038 --> 00:02:11,038
what we did in our studies we started

67
00:02:11,038 --> 00:02:13,040
analyzing this setup and wondering

68
00:02:13,040 --> 00:02:14,879
whether this artificial proxy jump

69
00:02:14,879 --> 00:02:17,840
brings any issues for attack simulation

70
00:02:17,840 --> 00:02:19,520
previously the impact of the proxy was

71
00:02:19,520 --> 00:02:21,680
seen as negligible or even claimed as

72
00:02:21,680 --> 00:02:24,080
disadvantages for traffic analysis

73
00:02:24,080 --> 00:02:26,160
meaning that scientific results probably

74
00:02:26,160 --> 00:02:27,920
underestimate severity of antoine

75
00:02:27,920 --> 00:02:30,160
confirmation attacks however our

76
00:02:30,160 --> 00:02:31,760
intuition was that

77
00:02:31,760 --> 00:02:33,840
using a proxy can play in favor of the

78
00:02:33,840 --> 00:02:35,599
simulated attacker

79
00:02:35,599 --> 00:02:37,440
so let's take a look at this map

80
00:02:37,440 --> 00:02:40,000
consider a door client a web server and

81
00:02:40,000 --> 00:02:43,040
three door relates located in europe the

82
00:02:43,040 --> 00:02:44,640
attacker would monitor the traffic on

83
00:02:44,640 --> 00:02:46,720
the exit node and at the entry site

84
00:02:46,720 --> 00:02:48,640
where we can also capture it

85
00:02:48,640 --> 00:02:50,319
then we would need a proxy to collect

86
00:02:50,319 --> 00:02:52,239
the exit traffic segment

87
00:02:52,239 --> 00:02:54,000
however when that proxy is placed

88
00:02:54,000 --> 00:02:56,000
arbitrarily for instance like here

89
00:02:56,000 --> 00:02:57,440
somewhere in the us

90
00:02:57,440 --> 00:02:58,959
what happens is that we introduce an

91
00:02:58,959 --> 00:03:00,560
intercontinental hope that would

92
00:03:00,560 --> 00:03:03,280
otherwise not be there this inevitably

93
00:03:03,280 --> 00:03:05,519
causes some time in overhead

94
00:03:05,519 --> 00:03:06,959
now this of course depends on the

95
00:03:06,959 --> 00:03:09,360
specific locations that doesn't always

96
00:03:09,360 --> 00:03:11,680
happen however given the diversity of

97
00:03:11,680 --> 00:03:14,400
the locations and door circuits if you

98
00:03:14,400 --> 00:03:16,239
only have a fixed proxy for the entire

99
00:03:16,239 --> 00:03:18,239
dataset such additional hopes will

100
00:03:18,239 --> 00:03:20,959
happen occasionally if not regularly

101
00:03:20,959 --> 00:03:22,640
this possibility that the setup

102
00:03:22,640 --> 00:03:24,080
occasionally introduces certain

103
00:03:24,080 --> 00:03:27,040
artifacts in the data can be problematic

104
00:03:27,040 --> 00:03:29,040
specifically we thought that introducing

105
00:03:29,040 --> 00:03:31,440
such artificial diversity in traces we

106
00:03:31,440 --> 00:03:33,120
make them more distinguishable for the

107
00:03:33,120 --> 00:03:35,360
simulated attacker which would lead to

108
00:03:35,360 --> 00:03:37,360
overestimation of attack performance on

109
00:03:37,360 --> 00:03:40,000
such data

110
00:03:40,000 --> 00:03:42,080
so then we hypothesize that the single

111
00:03:42,080 --> 00:03:44,080
proxy overhead influences the attack

112
00:03:44,080 --> 00:03:46,720
evolution in favor of the attacker and

113
00:03:46,720 --> 00:03:48,720
to test this out we decided to reduce

114
00:03:48,720 --> 00:03:50,720
this time in overhead by adding multiple

115
00:03:50,720 --> 00:03:53,040
proxies to the setup and seeing what

116
00:03:53,040 --> 00:03:54,560
happens

117
00:03:54,560 --> 00:03:57,360
so for this new multi-proxy setup we

118
00:03:57,360 --> 00:03:59,599
distribute 18 proxies around the world

119
00:03:59,599 --> 00:04:01,680
here you just see a close-up and we

120
00:04:01,680 --> 00:04:03,840
chose six primary locations following

121
00:04:03,840 --> 00:04:05,680
the actual distribution of door release

122
00:04:05,680 --> 00:04:07,519
especially exits

123
00:04:07,519 --> 00:04:09,519
and then for every tor connection we

124
00:04:09,519 --> 00:04:11,439
first predict the next circuit that will

125
00:04:11,439 --> 00:04:13,519
be picked by tor then we select the

126
00:04:13,519 --> 00:04:15,519
proxy that is closest to the predicted

127
00:04:15,519 --> 00:04:17,600
exit following the idea of reduce in the

128
00:04:17,600 --> 00:04:19,680
overhead of the detour and then we can

129
00:04:19,680 --> 00:04:21,358
do our measurements

130
00:04:21,358 --> 00:04:23,040
so this is the main idea behind our

131
00:04:23,040 --> 00:04:25,600
multi-proxy setup

132
00:04:25,600 --> 00:04:27,919
first we perform a preliminary analysis

133
00:04:27,919 --> 00:04:29,919
in terms of timing overhead to see if a

134
00:04:29,919 --> 00:04:32,240
multi-process setup changes anything so

135
00:04:32,240 --> 00:04:33,600
we want to measure timings in the

136
00:04:33,600 --> 00:04:35,520
original single proxy and the proposed

137
00:04:35,520 --> 00:04:37,600
multi-process setups in comparison to

138
00:04:37,600 --> 00:04:39,520
the no proxy setup that the real world

139
00:04:39,520 --> 00:04:41,360
attacker would use while we cannot

140
00:04:41,360 --> 00:04:43,199
collect actual traffic without a proxy

141
00:04:43,199 --> 00:04:45,680
we can still measure round trip timings

142
00:04:45,680 --> 00:04:47,520
so the results are as follows you see on

143
00:04:47,520 --> 00:04:49,199
the plot the

144
00:04:49,199 --> 00:04:51,360
blue colored single proxy

145
00:04:51,360 --> 00:04:53,680
timings they deviate from the no proxy

146
00:04:53,680 --> 00:04:56,479
timings in green while the multi-proxy

147
00:04:56,479 --> 00:04:58,560
timings appear to be like a really good

148
00:04:58,560 --> 00:05:01,280
approximation of no proxy timings

149
00:05:01,280 --> 00:05:03,520
so we see this factual difference

150
00:05:03,520 --> 00:05:05,120
but we still don't know how relevant

151
00:05:05,120 --> 00:05:06,880
these deviations and timings are for the

152
00:05:06,880 --> 00:05:08,639
attack what if it doesn't matter how

153
00:05:08,639 --> 00:05:11,440
closely our setup approximates no proxy

154
00:05:11,440 --> 00:05:12,800
timings

155
00:05:12,800 --> 00:05:14,160
to answer this question i'll first

156
00:05:14,160 --> 00:05:15,919
briefly introduce the state of the art

157
00:05:15,919 --> 00:05:17,919
and to end confirmation attack which at

158
00:05:17,919 --> 00:05:20,160
the moment of our study was deepcore

159
00:05:20,160 --> 00:05:22,240
deepcore uses a deep neural network to

160
00:05:22,240 --> 00:05:24,560
correlate traffic flows and each pairs

161
00:05:24,560 --> 00:05:26,160
of flows um

162
00:05:26,160 --> 00:05:28,160
are represented as their inter-packet

163
00:05:28,160 --> 00:05:31,280
delays that is timings and packet sizes

164
00:05:31,280 --> 00:05:32,960
as you can see half of the signal is

165
00:05:32,960 --> 00:05:35,360
timing so it definitely plays some role

166
00:05:35,360 --> 00:05:36,720
but we still need to evaluate if the

167
00:05:36,720 --> 00:05:38,560
attack benefits from the timing overhead

168
00:05:38,560 --> 00:05:40,479
that we suspect the single proxy

169
00:05:40,479 --> 00:05:42,160
introduces

170
00:05:42,160 --> 00:05:43,919
to find that out we collect actual

171
00:05:43,919 --> 00:05:45,600
traffic through both setups we try to

172
00:05:45,600 --> 00:05:47,840
fix as many variables as possible such

173
00:05:47,840 --> 00:05:49,600
that it's only the proxy setup that

174
00:05:49,600 --> 00:05:51,919
differs between the two data sets so we

175
00:05:51,919 --> 00:05:54,320
end up with roughly 8 000 traces for

176
00:05:54,320 --> 00:05:57,759
single proxy and multi-proxy data sets

177
00:05:57,759 --> 00:06:00,080
so now to know whether a single proxy fx

178
00:06:00,080 --> 00:06:02,080
location leads to an overestimation of

179
00:06:02,080 --> 00:06:04,240
attack's performance we need to run deep

180
00:06:04,240 --> 00:06:05,680
core which is a two-dimensional

181
00:06:05,680 --> 00:06:07,360
convolutional neural network on these

182
00:06:07,360 --> 00:06:09,039
two data sets and then compare

183
00:06:09,039 --> 00:06:10,720
performance

184
00:06:10,720 --> 00:06:12,319
but how exactly would that comparison

185
00:06:12,319 --> 00:06:14,560
look like it might seem straightforward

186
00:06:14,560 --> 00:06:16,560
at first we run the attack on both data

187
00:06:16,560 --> 00:06:18,080
sets and if the single proxy attack

188
00:06:18,080 --> 00:06:19,919
performs better then our hypothesis is

189
00:06:19,919 --> 00:06:22,800
confirmed however we all know it is not

190
00:06:22,800 --> 00:06:25,759
trivial to compare data-driven attacks

191
00:06:25,759 --> 00:06:28,479
in reality it is more complicated in our

192
00:06:28,479 --> 00:06:30,319
paper we recognize many challenges in

193
00:06:30,319 --> 00:06:32,880
reliable comparison of data-driven

194
00:06:32,880 --> 00:06:35,199
attacks first one of course needs to

195
00:06:35,199 --> 00:06:37,680
establish an equal ground for comparison

196
00:06:37,680 --> 00:06:39,759
this can mean infinitely many things for

197
00:06:39,759 --> 00:06:41,840
instance this relates to hyper parameter

198
00:06:41,840 --> 00:06:43,840
tuning how do we make sure both attacks

199
00:06:43,840 --> 00:06:45,520
are tuned using similar approach and

200
00:06:45,520 --> 00:06:47,600
effort in terms of hardware time and

201
00:06:47,600 --> 00:06:51,120
other resources are we using the same

202
00:06:51,120 --> 00:06:53,520
algorithm and also how sure are we that

203
00:06:53,520 --> 00:06:55,360
the difference in attack performance is

204
00:06:55,360 --> 00:06:57,280
due to the underlying

205
00:06:57,280 --> 00:06:59,199
learning algorithm or architecture and

206
00:06:59,199 --> 00:07:00,639
not due to the different learning

207
00:07:00,639 --> 00:07:03,360
capacity of two models

208
00:07:03,360 --> 00:07:05,280
the next crucial aspect is what do we

209
00:07:05,280 --> 00:07:07,120
even mean when we say attack performance

210
00:07:07,120 --> 00:07:08,800
which metric do we use to say that

211
00:07:08,800 --> 00:07:10,479
attack is successful

212
00:07:10,479 --> 00:07:12,319
sometimes and that is the case for

213
00:07:12,319 --> 00:07:14,400
end-to-end confirmation the metric used

214
00:07:14,400 --> 00:07:16,479
for optimizing the attack model is not

215
00:07:16,479 --> 00:07:18,800
the same as the one used for evaluating

216
00:07:18,800 --> 00:07:21,039
and comparing the attack so in reality

217
00:07:21,039 --> 00:07:22,479
there is this tension between the

218
00:07:22,479 --> 00:07:24,479
algorithmic optimization goal and the

219
00:07:24,479 --> 00:07:26,960
final evaluation metric

220
00:07:26,960 --> 00:07:28,720
the next challenge is quite general for

221
00:07:28,720 --> 00:07:30,400
machine learning and deep learning we

222
00:07:30,400 --> 00:07:31,919
need to eliminate as many sources of

223
00:07:31,919 --> 00:07:33,840
bias as possible for instance

224
00:07:33,840 --> 00:07:35,759
non-determinism of deep neural networks

225
00:07:35,759 --> 00:07:38,319
which rely a lot on randomness and can

226
00:07:38,319 --> 00:07:40,639
even be unstable there is also risk of

227
00:07:40,639 --> 00:07:42,639
sampling bias which is often mitigated

228
00:07:42,639 --> 00:07:44,800
with cross-validation

229
00:07:44,800 --> 00:07:46,560
but what follows from this instability

230
00:07:46,560 --> 00:07:48,400
and potential bias is that attack

231
00:07:48,400 --> 00:07:50,400
performance is not just a number it is

232
00:07:50,400 --> 00:07:52,479
in fact a distribution so when we

233
00:07:52,479 --> 00:07:54,240
compare data-driven attacks we compare

234
00:07:54,240 --> 00:07:56,000
rather limited samples of two

235
00:07:56,000 --> 00:07:58,800
distributions and we really need to show

236
00:07:58,800 --> 00:08:00,319
statistical significance of that

237
00:08:00,319 --> 00:08:02,879
comparison meaning how confident we are

238
00:08:02,879 --> 00:08:05,199
that among these two distributions from

239
00:08:05,199 --> 00:08:07,680
which we sampled performance values one

240
00:08:07,680 --> 00:08:10,479
is truly better than the other

241
00:08:10,479 --> 00:08:11,919
finally it would also be great to

242
00:08:11,919 --> 00:08:14,080
provide some semantical evidence as to

243
00:08:14,080 --> 00:08:16,080
why one attack performs better on the

244
00:08:16,080 --> 00:08:18,240
specific data for that we'll look into

245
00:08:18,240 --> 00:08:21,120
explainability of attack models

246
00:08:21,120 --> 00:08:22,400
so these are the challenges that are

247
00:08:22,400 --> 00:08:23,759
listed and

248
00:08:23,759 --> 00:08:25,360
now one could say that it's infeasible

249
00:08:25,360 --> 00:08:27,039
to satisfy all these requirements which

250
00:08:27,039 --> 00:08:29,919
is probably true however if we strive to

251
00:08:29,919 --> 00:08:32,559
that we will improve reliability of the

252
00:08:32,559 --> 00:08:34,479
results and our research is only as

253
00:08:34,479 --> 00:08:36,559
reliable as the conclusions that we draw

254
00:08:36,559 --> 00:08:38,640
from the limited empirical evidence so

255
00:08:38,640 --> 00:08:41,279
it's worth the effort

256
00:08:41,279 --> 00:08:43,039
with all that in mind we proposed a

257
00:08:43,039 --> 00:08:45,040
general high-level algorithm for

258
00:08:45,040 --> 00:08:47,680
scientific replication and comparison of

259
00:08:47,680 --> 00:08:49,360
data-driven attacks

260
00:08:49,360 --> 00:08:50,800
and we use this algorithm in our

261
00:08:50,800 --> 00:08:52,560
evaluation of the dip core attack on the

262
00:08:52,560 --> 00:08:56,080
single and multi-proxy data sets

263
00:08:56,080 --> 00:08:58,000
in this main evaluation we apply dip

264
00:08:58,000 --> 00:09:00,240
core to each data set and that includes

265
00:09:00,240 --> 00:09:02,720
extensive tuning training and testing of

266
00:09:02,720 --> 00:09:04,640
the neural networks and then comparing

267
00:09:04,640 --> 00:09:06,959
the results what is interesting is that

268
00:09:06,959 --> 00:09:08,720
the answer to our research question lies

269
00:09:08,720 --> 00:09:10,720
in every step of the attack if the

270
00:09:10,720 --> 00:09:12,480
single proxy setup indeed makes the

271
00:09:12,480 --> 00:09:14,080
attack easier we should be able to

272
00:09:14,080 --> 00:09:16,320
notice that at every step

273
00:09:16,320 --> 00:09:18,480
so let's nuance our original research

274
00:09:18,480 --> 00:09:20,640
question instead of asking if the attack

275
00:09:20,640 --> 00:09:22,480
on one dataset is more successful than

276
00:09:22,480 --> 00:09:23,519
on the other

277
00:09:23,519 --> 00:09:25,360
we want to find out whether the single

278
00:09:25,360 --> 00:09:27,600
proxy data presents a simpler learning

279
00:09:27,600 --> 00:09:31,200
problem than the multiproxy data

280
00:09:31,200 --> 00:09:33,040
so let's now move on to the relation

281
00:09:33,040 --> 00:09:35,360
results you can see on this plots the

282
00:09:35,360 --> 00:09:36,880
automated hyper-parameter tuning

283
00:09:36,880 --> 00:09:40,080
procedure that we performed with um 120

284
00:09:40,080 --> 00:09:42,560
runs per data set already at this stage

285
00:09:42,560 --> 00:09:44,000
you can notice that there are many more

286
00:09:44,000 --> 00:09:45,839
successful configurations on the single

287
00:09:45,839 --> 00:09:47,760
proxy data set than on the multiproxy

288
00:09:47,760 --> 00:09:50,160
one in other words it appears easier to

289
00:09:50,160 --> 00:09:51,839
tune a model collected on the single

290
00:09:51,839 --> 00:09:53,920
proxy traffic than on the multi-proxy

291
00:09:53,920 --> 00:09:57,360
traffic so that's already our first clue

292
00:09:57,360 --> 00:09:59,120
next we'll look at the training process

293
00:09:59,120 --> 00:10:00,000
itself

294
00:10:00,000 --> 00:10:02,000
here we have the best model simulated on

295
00:10:02,000 --> 00:10:04,000
five parts of each data set and we see

296
00:10:04,000 --> 00:10:05,440
that the neural network trained on the

297
00:10:05,440 --> 00:10:07,839
single proxy data colored in green

298
00:10:07,839 --> 00:10:10,079
converges better so here again the

299
00:10:10,079 --> 00:10:12,480
single proxy data set shows to be easier

300
00:10:12,480 --> 00:10:15,360
to train the model with

301
00:10:15,360 --> 00:10:17,920
and now i'll show final results first

302
00:10:17,920 --> 00:10:19,600
the average precision of the attack on

303
00:10:19,600 --> 00:10:21,760
multi-proxy data is an average 11

304
00:10:21,760 --> 00:10:24,399
percent worse than a single proxy

305
00:10:24,399 --> 00:10:26,560
moreover the false positives are doubled

306
00:10:26,560 --> 00:10:28,160
which means that for each only

307
00:10:28,160 --> 00:10:30,240
correlated pair of traces

308
00:10:30,240 --> 00:10:32,240
of the single proxy data set we get two

309
00:10:32,240 --> 00:10:34,079
of those for multiproxy which is quite

310
00:10:34,079 --> 00:10:36,800
detrimental these results over 40 runs

311
00:10:36,800 --> 00:10:38,240
come with a rather high statistical

312
00:10:38,240 --> 00:10:40,480
significance so we can conclude that

313
00:10:40,480 --> 00:10:42,240
antoine correlation is significantly

314
00:10:42,240 --> 00:10:44,480
more challenging on multi-proxy data

315
00:10:44,480 --> 00:10:46,399
strongly indicating that the subtle bias

316
00:10:46,399 --> 00:10:48,240
in timing characteristics in the single

317
00:10:48,240 --> 00:10:50,720
proxy setup may well be causing the

318
00:10:50,720 --> 00:10:53,600
overestimation of the attack performance

319
00:10:53,600 --> 00:10:54,959
while these results confirm our

320
00:10:54,959 --> 00:10:56,720
hypothesis we still wanted to get some

321
00:10:56,720 --> 00:10:58,720
more evidence by applying explainability

322
00:10:58,720 --> 00:11:00,399
analysis on deep core

323
00:11:00,399 --> 00:11:02,480
our preliminary analysis of activation

324
00:11:02,480 --> 00:11:04,800
values in the first layer of the network

325
00:11:04,800 --> 00:11:06,720
showed that timings and specifically

326
00:11:06,720 --> 00:11:09,040
uplink timing somehow are consistently

327
00:11:09,040 --> 00:11:10,560
more impactful for the attack on the

328
00:11:10,560 --> 00:11:12,800
single proxy setup this gives some

329
00:11:12,800 --> 00:11:16,000
additional support to our findings

330
00:11:16,000 --> 00:11:17,839
a couple of extra insights important

331
00:11:17,839 --> 00:11:20,160
going forward is that first

332
00:11:20,160 --> 00:11:22,079
even with eighty percent uh true

333
00:11:22,079 --> 00:11:23,920
positives which sounds high attack

334
00:11:23,920 --> 00:11:26,480
precision is in fact on average only

335
00:11:26,480 --> 00:11:28,399
eight percent

336
00:11:28,399 --> 00:11:30,640
also when we triple the amount of traces

337
00:11:30,640 --> 00:11:32,640
we use for learning it becomes much

338
00:11:32,640 --> 00:11:34,560
harder to execute the attack

339
00:11:34,560 --> 00:11:36,160
this is because for n traces the

340
00:11:36,160 --> 00:11:38,079
attacker needs to correlate end times

341
00:11:38,079 --> 00:11:40,000
and pairs so the base rate of truly

342
00:11:40,000 --> 00:11:42,240
correlated pairs becomes really small

343
00:11:42,240 --> 00:11:44,320
the high level takeaway is that it seems

344
00:11:44,320 --> 00:11:45,920
that we are still quite far from

345
00:11:45,920 --> 00:11:47,519
realistic estimations of end-to-end

346
00:11:47,519 --> 00:11:49,760
confirmation in terms of how feasible it

347
00:11:49,760 --> 00:11:52,880
is to exploit this kind of leakage

348
00:11:52,880 --> 00:11:54,959
to facilitate future research on this we

349
00:11:54,959 --> 00:11:56,399
publish our data

350
00:11:56,399 --> 00:11:58,639
the traces we used for the evaluation

351
00:11:58,639 --> 00:12:00,880
and the code are on github but we also

352
00:12:00,880 --> 00:12:03,120
collected a really large data set using

353
00:12:03,120 --> 00:12:05,440
our novel multi-proxy setup this data

354
00:12:05,440 --> 00:12:07,279
set is applicable for both end-to-end

355
00:12:07,279 --> 00:12:09,360
confirmation and website fingerprinting

356
00:12:09,360 --> 00:12:11,120
research

357
00:12:11,120 --> 00:12:13,279
to sum up we propose an improved data

358
00:12:13,279 --> 00:12:14,959
collection setup for end-to-end

359
00:12:14,959 --> 00:12:17,040
confirmation attacks against store

360
00:12:17,040 --> 00:12:19,200
together with the refined evaluation and

361
00:12:19,200 --> 00:12:21,839
comparison practices and preliminary

362
00:12:21,839 --> 00:12:23,760
explainability analysis

363
00:12:23,760 --> 00:12:27,720
thank you very much for your attention

