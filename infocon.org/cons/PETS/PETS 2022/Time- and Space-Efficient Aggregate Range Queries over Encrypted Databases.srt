1
00:00:00,480 --> 00:00:02,879
hi there my name is zachary espiritu and

2
00:00:02,879 --> 00:00:04,240
today i'm presenting time and space

3
00:00:04,240 --> 00:00:05,839
efficient aggregate range queries over

4
00:00:05,839 --> 00:00:07,520
encrypted databases work that i

5
00:00:07,520 --> 00:00:09,360
conducted with evangelia anna marcato

6
00:00:09,360 --> 00:00:10,960
and roberto thomasia while i was an

7
00:00:10,960 --> 00:00:12,960
undergraduate at brown university the

8
00:00:12,960 --> 00:00:14,480
motivation for this paper starts in the

9
00:00:14,480 --> 00:00:16,320
cloud computing model where the client

10
00:00:16,320 --> 00:00:17,600
wants to outsource storage and

11
00:00:17,600 --> 00:00:19,520
computation of their application to a

12
00:00:19,520 --> 00:00:21,840
third-party cloud service provider there

13
00:00:21,840 --> 00:00:23,600
are many benefits to doing so as shown

14
00:00:23,600 --> 00:00:24,880
on the slide here

15
00:00:24,880 --> 00:00:27,359
however privacy concerns arise

16
00:00:27,359 --> 00:00:29,199
especially given that a significant

17
00:00:29,199 --> 00:00:31,119
amount of trust is given to the service

18
00:00:31,119 --> 00:00:33,520
provider in handling and preserving the

19
00:00:33,520 --> 00:00:36,399
security of the client's outsourced data

20
00:00:36,399 --> 00:00:37,600
such concerns have led to the

21
00:00:37,600 --> 00:00:39,040
development of the field of encrypted

22
00:00:39,040 --> 00:00:40,640
search algorithms in which we have the

23
00:00:40,640 --> 00:00:42,480
same client and server except we assume

24
00:00:42,480 --> 00:00:44,079
the client is trusted and holds some

25
00:00:44,079 --> 00:00:45,760
kind of secret key and we assume the

26
00:00:45,760 --> 00:00:47,840
server is some semi-honest untrusted

27
00:00:47,840 --> 00:00:49,760
server the client can then use their

28
00:00:49,760 --> 00:00:51,520
secret key to upload their data set in

29
00:00:51,520 --> 00:00:53,760
such a way that they can send queries

30
00:00:53,760 --> 00:00:55,360
and receive results from the server

31
00:00:55,360 --> 00:00:56,879
while still maintaining some defined

32
00:00:56,879 --> 00:00:59,039
privacy guarantees over their data now

33
00:00:59,039 --> 00:01:00,079
there are many different types of

34
00:01:00,079 --> 00:01:01,840
encrypted search algorithms some

35
00:01:01,840 --> 00:01:02,960
implemented with different kinds of

36
00:01:02,960 --> 00:01:04,799
techniques and there are many algorithms

37
00:01:04,799 --> 00:01:07,119
for specific types of queries the type

38
00:01:07,119 --> 00:01:09,040
of query that has most interest to us in

39
00:01:09,040 --> 00:01:11,119
this particular work is that of a range

40
00:01:11,119 --> 00:01:13,360
query for example suppose we have a

41
00:01:13,360 --> 00:01:15,119
shopping application that has an order

42
00:01:15,119 --> 00:01:17,280
table containing dates and costs of

43
00:01:17,280 --> 00:01:18,159
orders

44
00:01:18,159 --> 00:01:19,439
and the client is interested in all of

45
00:01:19,439 --> 00:01:21,280
the orders purchased between july 11th

46
00:01:21,280 --> 00:01:22,799
and july 14th

47
00:01:22,799 --> 00:01:24,320
there are many existing encrypted search

48
00:01:24,320 --> 00:01:26,159
algorithms for range queries many of

49
00:01:26,159 --> 00:01:27,840
which use different techniques but they

50
00:01:27,840 --> 00:01:30,000
all follow the same process as we just

51
00:01:30,000 --> 00:01:31,040
saw before

52
00:01:31,040 --> 00:01:32,720
you use your secret key to generate some

53
00:01:32,720 --> 00:01:34,560
kind of encrypted query token and then

54
00:01:34,560 --> 00:01:36,159
the server returns all of the encrypted

55
00:01:36,159 --> 00:01:38,560
results for the client to then decrypt

56
00:01:38,560 --> 00:01:40,000
now despite the existence of many

57
00:01:40,000 --> 00:01:41,520
encrypted search algorithms to handle

58
00:01:41,520 --> 00:01:42,880
range queries there has been

59
00:01:42,880 --> 00:01:44,399
significantly less attention drawn to

60
00:01:44,399 --> 00:01:46,000
another fundamental type of query known

61
00:01:46,000 --> 00:01:48,240
as aggregate range queries in this kind

62
00:01:48,240 --> 00:01:49,840
of query the client is not actually

63
00:01:49,840 --> 00:01:51,040
interested in the records that fall

64
00:01:51,040 --> 00:01:52,880
within the queried range but rather they

65
00:01:52,880 --> 00:01:54,720
are interested in the result of an

66
00:01:54,720 --> 00:01:56,240
aggregate function applied to those

67
00:01:56,240 --> 00:01:58,560
records in this example we've modified

68
00:01:58,560 --> 00:02:00,320
the query such that we now are looking

69
00:02:00,320 --> 00:02:01,759
for the average cost of all the orders

70
00:02:01,759 --> 00:02:03,360
that fall between july 11th and july

71
00:02:03,360 --> 00:02:05,840
14th in plain text this kind of query is

72
00:02:05,840 --> 00:02:07,360
simple to answer the server can use

73
00:02:07,360 --> 00:02:09,119
whatever method it wants to retrieve the

74
00:02:09,119 --> 00:02:10,639
records and then it can compute the

75
00:02:10,639 --> 00:02:12,560
aggregate client side and then send the

76
00:02:12,560 --> 00:02:14,160
single constant size value back to the

77
00:02:14,160 --> 00:02:15,520
client

78
00:02:15,520 --> 00:02:16,959
in the encrypted setting this is much

79
00:02:16,959 --> 00:02:18,239
more challenging

80
00:02:18,239 --> 00:02:20,640
one might use an existing range query

81
00:02:20,640 --> 00:02:23,200
esa to answer these kinds of queries

82
00:02:23,200 --> 00:02:24,800
however this incurs some additional

83
00:02:24,800 --> 00:02:27,200
overhead while the client can still send

84
00:02:27,200 --> 00:02:29,360
a regular range query token and then

85
00:02:29,360 --> 00:02:31,440
send an encrypted table and then decrypt

86
00:02:31,440 --> 00:02:32,800
all of the records and then compute that

87
00:02:32,800 --> 00:02:34,080
average cost

88
00:02:34,080 --> 00:02:36,239
the client is now incurring additional

89
00:02:36,239 --> 00:02:37,680
computation at the client side

90
00:02:37,680 --> 00:02:39,040
additional bandwidth between the client

91
00:02:39,040 --> 00:02:41,440
and the server and on the case of the

92
00:02:41,440 --> 00:02:43,360
server security and privacy

93
00:02:43,360 --> 00:02:45,200
we might be revealing additional leakage

94
00:02:45,200 --> 00:02:46,720
to the server in that we are accessing

95
00:02:46,720 --> 00:02:48,800
multiple records but even though we are

96
00:02:48,800 --> 00:02:50,480
only really interested in the single

97
00:02:50,480 --> 00:02:52,080
aggregate value now there are many

98
00:02:52,080 --> 00:02:53,440
existing techniques that can be used to

99
00:02:53,440 --> 00:02:55,120
answer these kinds of queries for

100
00:02:55,120 --> 00:02:56,879
example expressive techniques such as

101
00:02:56,879 --> 00:02:58,879
fully homomorphic encryption multi-party

102
00:02:58,879 --> 00:03:01,120
computation and similar solutions such

103
00:03:01,120 --> 00:03:03,200
as hardware-based structured enclaves

104
00:03:03,200 --> 00:03:04,800
can be used to achieve

105
00:03:04,800 --> 00:03:06,640
queries for any arbitrary type of

106
00:03:06,640 --> 00:03:08,400
aggregate function with high security

107
00:03:08,400 --> 00:03:11,200
guarantees however these solutions often

108
00:03:11,200 --> 00:03:13,440
incur substantial performance overhead

109
00:03:13,440 --> 00:03:14,959
that make them unsuitable for practical

110
00:03:14,959 --> 00:03:15,760
use

111
00:03:15,760 --> 00:03:16,959
you can also use another type of

112
00:03:16,959 --> 00:03:18,480
homomorphic encryption called additively

113
00:03:18,480 --> 00:03:20,080
home mode for encryption to be able to

114
00:03:20,080 --> 00:03:21,599
compute additive types of aggregates

115
00:03:21,599 --> 00:03:23,360
such as sums and averages while these

116
00:03:23,360 --> 00:03:25,200
types of homomorphic encryption schemes

117
00:03:25,200 --> 00:03:26,720
have better performance they have

118
00:03:26,720 --> 00:03:28,000
reduced expressiveness and are not

119
00:03:28,000 --> 00:03:30,000
generic to other types of accurate

120
00:03:30,000 --> 00:03:31,360
functions

121
00:03:31,360 --> 00:03:32,640
you might also use other types of

122
00:03:32,640 --> 00:03:34,159
encryption such as property preserving

123
00:03:34,159 --> 00:03:35,920
encryption to be able to support things

124
00:03:35,920 --> 00:03:38,640
such as medians and modes however these

125
00:03:38,640 --> 00:03:39,920
kinds of encryption schemes have been

126
00:03:39,920 --> 00:03:41,840
shown in prior works to be extremely

127
00:03:41,840 --> 00:03:43,519
vulnerable to inference attacks and are

128
00:03:43,519 --> 00:03:45,360
not suitable for secure applications

129
00:03:45,360 --> 00:03:47,200
given all of these concerns we decided

130
00:03:47,200 --> 00:03:48,640
to turn our focus towards structured

131
00:03:48,640 --> 00:03:50,000
encryption which is a class of

132
00:03:50,000 --> 00:03:51,519
techniques that allows the client to

133
00:03:51,519 --> 00:03:52,879
encrypt the data structure such as an

134
00:03:52,879 --> 00:03:54,720
array or multi-map and outsource that

135
00:03:54,720 --> 00:03:56,480
encrypted structure to the server

136
00:03:56,480 --> 00:03:58,319
in particular we're interested in this

137
00:03:58,319 --> 00:03:59,920
kind of fruit line of work because of

138
00:03:59,920 --> 00:04:01,760
the fact that in 2018 there was a

139
00:04:01,760 --> 00:04:03,519
similar paper by demeritus at all in

140
00:04:03,519 --> 00:04:05,040
which they show exactly how to use

141
00:04:05,040 --> 00:04:06,720
structural encryption to design some

142
00:04:06,720 --> 00:04:09,439
preliminary schemes for some and minimum

143
00:04:09,439 --> 00:04:11,760
queries two schemes to be exact

144
00:04:11,760 --> 00:04:13,519
in this work we're interested in seeing

145
00:04:13,519 --> 00:04:15,599
how far we can generalize this technique

146
00:04:15,599 --> 00:04:17,358
to see if we can answer other types of

147
00:04:17,358 --> 00:04:19,680
queries and to see if we can improve on

148
00:04:19,680 --> 00:04:21,279
the performance bounds given by those

149
00:04:21,279 --> 00:04:23,600
initial schemes in this demeritt's paper

150
00:04:23,600 --> 00:04:24,960
to do this we develop the following

151
00:04:24,960 --> 00:04:26,720
contributions we first develop a

152
00:04:26,720 --> 00:04:28,560
framework known as arc which allows one

153
00:04:28,560 --> 00:04:30,240
to build encrypted aggregate range for

154
00:04:30,240 --> 00:04:32,320
indices for basically any type of

155
00:04:32,320 --> 00:04:34,400
aggregate range query one might desire

156
00:04:34,400 --> 00:04:36,000
as long as there is a suitable plain

157
00:04:36,000 --> 00:04:38,000
text aggregate range query index that

158
00:04:38,000 --> 00:04:39,360
already exists

159
00:04:39,360 --> 00:04:41,520
using arc we're able to derive a new

160
00:04:41,520 --> 00:04:42,800
constant time and query bandwidth

161
00:04:42,800 --> 00:04:44,880
schemes for encrypted range minimums

162
00:04:44,880 --> 00:04:46,160
approximate modes and approximate

163
00:04:46,160 --> 00:04:47,680
medians

164
00:04:47,680 --> 00:04:49,360
and in some cases improve upon the

165
00:04:49,360 --> 00:04:50,960
storage bounds already given in the

166
00:04:50,960 --> 00:04:53,040
demarcus 2018 paper

167
00:04:53,040 --> 00:04:54,880
we also back up these results with a

168
00:04:54,880 --> 00:04:57,040
formal implementation and evaluation of

169
00:04:57,040 --> 00:04:58,479
these schemes

170
00:04:58,479 --> 00:05:00,000
our paper also could include some other

171
00:05:00,000 --> 00:05:01,440
results that we don't cover in this

172
00:05:01,440 --> 00:05:03,680
presentation

173
00:05:03,680 --> 00:05:05,039
to give a high level overview of how the

174
00:05:05,039 --> 00:05:07,440
arc framework works the idea behind it

175
00:05:07,440 --> 00:05:09,600
is that the client chooses a plain text

176
00:05:09,600 --> 00:05:11,360
aggregate range query scheme that they

177
00:05:11,360 --> 00:05:13,280
would like to have an encrypted scheme

178
00:05:13,280 --> 00:05:15,360
with the equivalent functionality

179
00:05:15,360 --> 00:05:17,520
in this slide we denote this game with

180
00:05:17,520 --> 00:05:18,639
pi

181
00:05:18,639 --> 00:05:20,160
then they choose a suitable structured

182
00:05:20,160 --> 00:05:22,160
encryption scheme that can encrypt the

183
00:05:22,160 --> 00:05:24,400
data structure that is output by

184
00:05:24,400 --> 00:05:25,919
one of the algorithms in the plain text

185
00:05:25,919 --> 00:05:28,000
aggregate range various game

186
00:05:28,000 --> 00:05:30,400
combining both pi and sigma together

187
00:05:30,400 --> 00:05:32,479
into arc allows one to immediately

188
00:05:32,479 --> 00:05:34,080
derive an encrypted aggregate range

189
00:05:34,080 --> 00:05:35,360
query scheme

190
00:05:35,360 --> 00:05:37,120
with the same functionality as the

191
00:05:37,120 --> 00:05:39,120
underlying plaintext scheme

192
00:05:39,120 --> 00:05:40,960
the formal pseudo code and formal

193
00:05:40,960 --> 00:05:43,759
security definitions of arc can be found

194
00:05:43,759 --> 00:05:45,360
in our paper but what's important to

195
00:05:45,360 --> 00:05:47,440
note is that you can immediately derive

196
00:05:47,440 --> 00:05:49,759
the leakage definition of the arc

197
00:05:49,759 --> 00:05:53,039
instantiation based off of sigma and pi

198
00:05:53,039 --> 00:05:54,080
together

199
00:05:54,080 --> 00:05:56,319
so the security definition and a proof

200
00:05:56,319 --> 00:05:58,319
is generic to any possible combination

201
00:05:58,319 --> 00:06:00,240
of sigma and pi

202
00:06:00,240 --> 00:06:02,479
now a focus of this work is not just to

203
00:06:02,479 --> 00:06:04,479
derive new schemes but also to talk

204
00:06:04,479 --> 00:06:06,720
about exactly how we can derive these

205
00:06:06,720 --> 00:06:08,479
schemes in such a way that they actually

206
00:06:08,479 --> 00:06:10,880
produce reasonably secure schemes for

207
00:06:10,880 --> 00:06:12,479
example you can pick any plaintext

208
00:06:12,479 --> 00:06:14,160
aggregate range query scheme and plug it

209
00:06:14,160 --> 00:06:16,319
into this arc framework however as we

210
00:06:16,319 --> 00:06:18,639
show in our paper some plaintext

211
00:06:18,639 --> 00:06:20,560
accurate range query schemes actually

212
00:06:20,560 --> 00:06:22,240
are more secure

213
00:06:22,240 --> 00:06:24,000
when you can put them in this framework

214
00:06:24,000 --> 00:06:25,520
in comparison to other equivalent

215
00:06:25,520 --> 00:06:26,639
schemes

216
00:06:26,639 --> 00:06:28,160
in the paper we formalized this

217
00:06:28,160 --> 00:06:30,240
intuition via a new definition that we

218
00:06:30,240 --> 00:06:32,639
call data obliviousness at a high level

219
00:06:32,639 --> 00:06:34,800
a data oblivious scheme might leak the

220
00:06:34,800 --> 00:06:36,400
domain size and information about the

221
00:06:36,400 --> 00:06:38,160
queries but it doesn't link any other

222
00:06:38,160 --> 00:06:39,840
information in particular it doesn't

223
00:06:39,840 --> 00:06:41,360
need any information about the database

224
00:06:41,360 --> 00:06:42,240
size

225
00:06:42,240 --> 00:06:44,240
such as the number of records database

226
00:06:44,240 --> 00:06:45,919
distribution or really anything about

227
00:06:45,919 --> 00:06:48,000
the data itself

228
00:06:48,000 --> 00:06:49,520
the idea behind the data oblivious

229
00:06:49,520 --> 00:06:51,440
definition is that if the query

230
00:06:51,440 --> 00:06:53,039
distribution is independent of the data

231
00:06:53,039 --> 00:06:54,800
distribution then all known data

232
00:06:54,800 --> 00:06:56,639
reconstruction attacks don't work

233
00:06:56,639 --> 00:06:58,639
against data oblivious schemes

234
00:06:58,639 --> 00:07:00,160
and this is not from a computational

235
00:07:00,160 --> 00:07:02,080
perspective rather from an information

236
00:07:02,080 --> 00:07:04,160
theoretic perspective as we discussed in

237
00:07:04,160 --> 00:07:06,720
our paper this data oblivious idea is

238
00:07:06,720 --> 00:07:08,639
very useful in the aggregate setting

239
00:07:08,639 --> 00:07:10,800
because schemes don't result in the same

240
00:07:10,800 --> 00:07:12,800
leakage as more general

241
00:07:12,800 --> 00:07:14,880
structured encryption structures would

242
00:07:14,880 --> 00:07:16,720
this is because of the fact that in some

243
00:07:16,720 --> 00:07:18,720
sense the aggregate structures have

244
00:07:18,720 --> 00:07:20,319
reduced expressiveness than what you

245
00:07:20,319 --> 00:07:21,440
would see in the structured encryption

246
00:07:21,440 --> 00:07:22,880
structures because of the fact that

247
00:07:22,880 --> 00:07:24,720
they're only really returning a single

248
00:07:24,720 --> 00:07:27,280
constant size value as opposed to

249
00:07:27,280 --> 00:07:29,520
regular range query structures which

250
00:07:29,520 --> 00:07:30,400
return

251
00:07:30,400 --> 00:07:32,880
accesses to multiple records for example

252
00:07:32,880 --> 00:07:34,319
in our paper we go through several

253
00:07:34,319 --> 00:07:35,919
different types of aggregate range query

254
00:07:35,919 --> 00:07:38,160
types and we talk about how we satisfy

255
00:07:38,160 --> 00:07:39,919
data obliviousness for each one of these

256
00:07:39,919 --> 00:07:41,120
structures

257
00:07:41,120 --> 00:07:42,639
but to give you a sense of exactly what

258
00:07:42,639 --> 00:07:44,560
needs to happen for some of these query

259
00:07:44,560 --> 00:07:46,000
types in order to achieve data

260
00:07:46,000 --> 00:07:48,000
obliviousness we'll talk about our work

261
00:07:48,000 --> 00:07:49,759
on one specific query type which is

262
00:07:49,759 --> 00:07:51,520
minimum range queries

263
00:07:51,520 --> 00:07:53,440
in the demerits's 2018 paper they

264
00:07:53,440 --> 00:07:56,160
present a two minimum schemes their best

265
00:07:56,160 --> 00:07:57,599
one being a structured encryption based

266
00:07:57,599 --> 00:08:00,000
scheme achieving o n log n plus m

267
00:08:00,000 --> 00:08:02,080
storage where n is the number of records

268
00:08:02,080 --> 00:08:04,479
and m is the domain size with two round

269
00:08:04,479 --> 00:08:06,479
trips back and forth to the structure

270
00:08:06,479 --> 00:08:08,080
in this paper we present a new scheme

271
00:08:08,080 --> 00:08:10,000
called linear min which achieves storage

272
00:08:10,000 --> 00:08:12,319
linear in the domain size with one round

273
00:08:12,319 --> 00:08:13,840
chip at the expense of prohibiting

274
00:08:13,840 --> 00:08:15,520
certain small queries of size less than

275
00:08:15,520 --> 00:08:16,800
log m

276
00:08:16,800 --> 00:08:19,120
now while this is a limitation on the

277
00:08:19,120 --> 00:08:21,360
functionality of the scheme as we show

278
00:08:21,360 --> 00:08:23,440
in our paper the scheme that we present

279
00:08:23,440 --> 00:08:25,759
satisfies the data oblivious definition

280
00:08:25,759 --> 00:08:27,440
while the scheme in demeritus's paper

281
00:08:27,440 --> 00:08:29,039
does not satisfy the data oblivious

282
00:08:29,039 --> 00:08:30,160
definition

283
00:08:30,160 --> 00:08:31,039
and so

284
00:08:31,039 --> 00:08:33,360
under the data oblivious assumptions we

285
00:08:33,360 --> 00:08:35,120
can achieve better security using our

286
00:08:35,120 --> 00:08:37,279
linear min scheme our linear min scheme

287
00:08:37,279 --> 00:08:38,880
is based off an existing scheme by a

288
00:08:38,880 --> 00:08:41,760
2006 paper by fischer and hewn we don't

289
00:08:41,760 --> 00:08:43,279
have time to get into all the details of

290
00:08:43,279 --> 00:08:44,800
this scheme but just to give you a high

291
00:08:44,800 --> 00:08:46,640
level of how this works given a

292
00:08:46,640 --> 00:08:48,399
particular database in this case we have

293
00:08:48,399 --> 00:08:51,040
a database with size domain 16. you

294
00:08:51,040 --> 00:08:52,880
split up the database into blocks of

295
00:08:52,880 --> 00:08:54,959
size log m and then you generate a

296
00:08:54,959 --> 00:08:57,279
sparse table structure over the minimums

297
00:08:57,279 --> 00:08:59,600
of each of these blocks basically a

298
00:08:59,600 --> 00:09:01,519
structure that allows you to answer all

299
00:09:01,519 --> 00:09:04,080
range minimum queries that span entire

300
00:09:04,080 --> 00:09:05,440
blocks

301
00:09:05,440 --> 00:09:07,440
and then to answer queries that fall

302
00:09:07,440 --> 00:09:09,839
entirely within a particular block you

303
00:09:09,839 --> 00:09:11,839
then generate an additional lookup table

304
00:09:11,839 --> 00:09:13,600
that stores the answer to all possible

305
00:09:13,600 --> 00:09:16,000
queries that fall within a block then

306
00:09:16,000 --> 00:09:17,920
queries return a reference to part of

307
00:09:17,920 --> 00:09:21,200
the lookup table in a second round axis

308
00:09:21,200 --> 00:09:23,120
as we show in our paper this lookup

309
00:09:23,120 --> 00:09:24,959
table component results in a scheme that

310
00:09:24,959 --> 00:09:26,640
is not data oblivious when you try to

311
00:09:26,640 --> 00:09:28,480
combine it with the arc framework now

312
00:09:28,480 --> 00:09:29,839
the reason why this scheme is not data

313
00:09:29,839 --> 00:09:32,000
oblivious is because of the fact that

314
00:09:32,000 --> 00:09:33,839
the lookup table returns different

315
00:09:33,839 --> 00:09:35,120
references to different parts of the

316
00:09:35,120 --> 00:09:37,200
lookup table if the underlying plaintext

317
00:09:37,200 --> 00:09:39,040
contents of the database have changed

318
00:09:39,040 --> 00:09:40,959
this does not satisfy the leakage

319
00:09:40,959 --> 00:09:42,399
requirements of the data oblivious

320
00:09:42,399 --> 00:09:45,040
definition to solve this challenge we

321
00:09:45,040 --> 00:09:47,200
modify this game in such a way that we

322
00:09:47,200 --> 00:09:48,959
instead use a different lookup table in

323
00:09:48,959 --> 00:09:50,800
cody that stores the answers to all

324
00:09:50,800 --> 00:09:53,200
suffix and prefix queries of a block as

325
00:09:53,200 --> 00:09:55,519
we show in our paper this encoding

326
00:09:55,519 --> 00:09:57,440
satisfies the data oblivious definition

327
00:09:57,440 --> 00:09:59,040
while still preserving linear space

328
00:09:59,040 --> 00:10:00,800
storage overhead though it does prevent

329
00:10:00,800 --> 00:10:02,480
the user from issuing some queries of

330
00:10:02,480 --> 00:10:04,640
size smaller than log at

331
00:10:04,640 --> 00:10:06,800
however as we show in our paper there

332
00:10:06,800 --> 00:10:08,959
are some ways to get around this and we

333
00:10:08,959 --> 00:10:10,800
invite the readers to look at our paper

334
00:10:10,800 --> 00:10:12,959
for closer details it's also worth

335
00:10:12,959 --> 00:10:14,399
mentioning that this is just one example

336
00:10:14,399 --> 00:10:16,399
of a scheme that needed to be modified

337
00:10:16,399 --> 00:10:18,560
in our paper we show how for other types

338
00:10:18,560 --> 00:10:20,240
of queries you don't always need to

339
00:10:20,240 --> 00:10:22,560
modify the plain text schemes and in

340
00:10:22,560 --> 00:10:24,320
fact for the other two types of queries

341
00:10:24,320 --> 00:10:26,000
that we introduce new schemes for we

342
00:10:26,000 --> 00:10:27,519
don't need to modify them at all and

343
00:10:27,519 --> 00:10:29,920
they work easily and generally to

344
00:10:29,920 --> 00:10:32,000
reiterate in this paper we present a new

345
00:10:32,000 --> 00:10:33,920
framework called arc that allows one to

346
00:10:33,920 --> 00:10:35,440
build encrypted aggregate range query

347
00:10:35,440 --> 00:10:37,120
indices by combining structured

348
00:10:37,120 --> 00:10:38,880
encryption primitives on an existing

349
00:10:38,880 --> 00:10:41,040
plaintext accurate range query scheme

350
00:10:41,040 --> 00:10:43,279
additionally we define new definitions

351
00:10:43,279 --> 00:10:44,640
that are unique to the aggregate range

352
00:10:44,640 --> 00:10:46,640
query setting and show how those

353
00:10:46,640 --> 00:10:48,480
definitions can show us when a plain

354
00:10:48,480 --> 00:10:50,399
text aggregate range query scheme is

355
00:10:50,399 --> 00:10:53,120
potentially suitable for a secure arc

356
00:10:53,120 --> 00:10:54,640
instantiation

357
00:10:54,640 --> 00:10:56,240
in the paper we go into more details

358
00:10:56,240 --> 00:10:58,320
about our implementation and evaluation

359
00:10:58,320 --> 00:11:00,160
as well as some other results in the

360
00:11:00,160 --> 00:11:01,279
appendix

361
00:11:01,279 --> 00:11:04,320
thanks so much for listening

