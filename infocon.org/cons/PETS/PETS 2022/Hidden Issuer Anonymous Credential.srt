1
00:00:00,060 --> 00:00:03,259
hello I'm Metro System PhD students

2
00:00:03,259 --> 00:00:06,240
and I will present our work on the news

3
00:00:06,240 --> 00:00:08,039
credentials that we did conjunctly with

4
00:00:08,039 --> 00:00:10,620
Daniel busk David de Frey and gimpleer

5
00:00:10,620 --> 00:00:12,599
first I will recall what Anonymous

6
00:00:12,599 --> 00:00:14,700
credentials are then I will present why

7
00:00:14,700 --> 00:00:16,920
Anonymous credentials are not always so

8
00:00:16,920 --> 00:00:19,320
Anonymous and finally I will present our

9
00:00:19,320 --> 00:00:22,560
solution to circumvent this problem

10
00:00:22,560 --> 00:00:25,080
so here is Alice Alice goes to a ball

11
00:00:25,080 --> 00:00:27,300
and she wants a blur in this bar but the

12
00:00:27,300 --> 00:00:29,220
bartender needs to verify that she is

13
00:00:29,220 --> 00:00:32,880
over 18. so previously because Alice is

14
00:00:32,880 --> 00:00:35,160
French Alice will get a credential from

15
00:00:35,160 --> 00:00:36,660
the French Administration

16
00:00:36,660 --> 00:00:38,879
and because the bartender trusts the

17
00:00:38,879 --> 00:00:41,219
French Administration he gather the

18
00:00:41,219 --> 00:00:42,719
public key of the French Administration

19
00:00:42,719 --> 00:00:45,840
and put it in his trustees database in

20
00:00:45,840 --> 00:00:47,640
the second time Alice gets our

21
00:00:47,640 --> 00:00:48,719
credential from the French

22
00:00:48,719 --> 00:00:50,879
Administration so the credential is

23
00:00:50,879 --> 00:00:52,260
signed with the secret key of the French

24
00:00:52,260 --> 00:00:54,180
Administration and Alice can put this

25
00:00:54,180 --> 00:00:56,480
credential in her wallet

26
00:00:56,480 --> 00:00:58,680
back to the bow and at least want to

27
00:00:58,680 --> 00:01:01,260
prove that she is over 18 she can take

28
00:01:01,260 --> 00:01:03,600
this convention and she can randomize as

29
00:01:03,600 --> 00:01:05,780
she can randomize it it is to say that

30
00:01:05,780 --> 00:01:08,340
she adds some random element to the

31
00:01:08,340 --> 00:01:10,560
credential and now from the bottom point

32
00:01:10,560 --> 00:01:12,659
of view the credential is equivalent to

33
00:01:12,659 --> 00:01:14,280
a brand new credential that was just

34
00:01:14,280 --> 00:01:16,500
issued by the French Administration and

35
00:01:16,500 --> 00:01:18,000
that was never used

36
00:01:18,000 --> 00:01:20,220
so Alice gives this credential to the

37
00:01:20,220 --> 00:01:22,680
bartender and the bartender can verify

38
00:01:22,680 --> 00:01:25,259
as in the credential using the public

39
00:01:25,259 --> 00:01:27,360
key of the French Administration and

40
00:01:27,360 --> 00:01:29,939
because the credential is valid Alice

41
00:01:29,939 --> 00:01:31,740
can get over here

42
00:01:31,740 --> 00:01:35,119
now we need to note that

43
00:01:35,119 --> 00:01:37,439
one of the goal of anonymous credential

44
00:01:37,439 --> 00:01:40,619
is to give only one information which is

45
00:01:40,619 --> 00:01:42,899
the information stated by the credential

46
00:01:42,899 --> 00:01:46,200
and no more information but we'll see by

47
00:01:46,200 --> 00:01:48,299
studying what does the bartender learn

48
00:01:48,299 --> 00:01:51,240
that it is not always the case so first

49
00:01:51,240 --> 00:01:54,899
the bartender learns that the user is

50
00:01:54,899 --> 00:01:57,060
overeating because it is what is stated

51
00:01:57,060 --> 00:01:59,399
by the credential he also learned that

52
00:01:59,399 --> 00:02:02,040
the user is a woman because Alice went

53
00:02:02,040 --> 00:02:05,520
to the bar so he saw Alice at the bar

54
00:02:05,520 --> 00:02:08,098
and he knows it is a woman but

55
00:02:08,098 --> 00:02:09,660
furthermore because

56
00:02:09,660 --> 00:02:13,260
to verify the chronology of at least the

57
00:02:13,260 --> 00:02:16,800
bartender used the public of the French

58
00:02:16,800 --> 00:02:19,379
Administration the bartender knows that

59
00:02:19,379 --> 00:02:22,379
the user is French so here we have one

60
00:02:22,379 --> 00:02:24,959
information that Alice didn't intend to

61
00:02:24,959 --> 00:02:27,239
reveal to the bartender but that's about

62
00:02:27,239 --> 00:02:29,700
to run anyway

63
00:02:29,700 --> 00:02:31,800
furthermore Alice didn't go along to the

64
00:02:31,800 --> 00:02:34,680
bar she went with her friends Charlie

65
00:02:34,680 --> 00:02:37,019
and Bob who are French and do we

66
00:02:37,019 --> 00:02:40,200
immediately and funny who are Italian

67
00:02:40,200 --> 00:02:42,599
so just like before the bartender trust

68
00:02:42,599 --> 00:02:44,160
the Italian Administration so it gives

69
00:02:44,160 --> 00:02:45,660
us the public key of the administration

70
00:02:45,660 --> 00:02:49,500
and puts it in its trusted database and

71
00:02:49,500 --> 00:02:52,500
just like before uh Charlie and Bob gets

72
00:02:52,500 --> 00:02:53,459
credential from the French

73
00:02:53,459 --> 00:02:55,739
Administration and do we Emily and

74
00:02:55,739 --> 00:02:57,480
finally get could control from the

75
00:02:57,480 --> 00:02:59,280
Italian Administration

76
00:02:59,280 --> 00:03:01,379
they'll put their credential in their

77
00:03:01,379 --> 00:03:04,200
wallet and now from the bartender point

78
00:03:04,200 --> 00:03:06,780
of view and if we assume that there are

79
00:03:06,780 --> 00:03:09,000
only three citizens in France which are

80
00:03:09,000 --> 00:03:11,760
Charlie Bob and Alice and only three

81
00:03:11,760 --> 00:03:14,819
citizens in Italy which are doing a

82
00:03:14,819 --> 00:03:17,940
million funny we have two animated sets

83
00:03:17,940 --> 00:03:20,760
the set of French citizens that are over

84
00:03:20,760 --> 00:03:24,180
18 and the set of Italian citizens that

85
00:03:24,180 --> 00:03:27,360
are over 18 and if we assume that the

86
00:03:27,360 --> 00:03:29,099
bartender colludes with the French

87
00:03:29,099 --> 00:03:31,500
Administration now the bartender can

88
00:03:31,500 --> 00:03:35,040
learn more information about the user so

89
00:03:35,040 --> 00:03:36,959
just like before he learns that the user

90
00:03:36,959 --> 00:03:39,599
is overeating it's French and a girl but

91
00:03:39,599 --> 00:03:41,580
because the French Administration gives

92
00:03:41,580 --> 00:03:43,680
him information about people that are

93
00:03:43,680 --> 00:03:45,900
overeating in France he knows that the

94
00:03:45,900 --> 00:03:49,140
user is either Alice Bob or Charlie and

95
00:03:49,140 --> 00:03:50,819
because in this sense there is only one

96
00:03:50,819 --> 00:03:53,040
girl the bartender learns that the user

97
00:03:53,040 --> 00:03:56,099
is Alice and if we ask information to

98
00:03:56,099 --> 00:03:58,560
the French Administration about Alice it

99
00:03:58,560 --> 00:04:00,959
will get a lot of information all the

100
00:04:00,959 --> 00:04:02,459
information the French Administration

101
00:04:02,459 --> 00:04:05,220
knows about that is this is not what we

102
00:04:05,220 --> 00:04:07,439
want with we said animals credentials we

103
00:04:07,439 --> 00:04:09,659
send anonymous credentials we want the

104
00:04:09,659 --> 00:04:13,260
annunity sets to be as large as possible

105
00:04:13,260 --> 00:04:16,320
but with classical Anonymous credentials

106
00:04:16,320 --> 00:04:19,560
is depends on the issuers of the trust

107
00:04:19,560 --> 00:04:22,680
of the credentials

108
00:04:22,680 --> 00:04:26,060
in order to have the largest

109
00:04:26,060 --> 00:04:29,759
set as possible we want the enemy set to

110
00:04:29,759 --> 00:04:32,460
be defined by The issuers Trusted by the

111
00:04:32,460 --> 00:04:34,800
verifier and in our case we want the

112
00:04:34,800 --> 00:04:37,860
enemy set to be all the French or

113
00:04:37,860 --> 00:04:40,919
Italian citizens that are over 18 or at

114
00:04:40,919 --> 00:04:43,139
least because the bartender knows that

115
00:04:43,139 --> 00:04:45,840
Alice is a girl or the girls that are

116
00:04:45,840 --> 00:04:48,060
either French or Italian and that are

117
00:04:48,060 --> 00:04:50,040
overeating

118
00:04:50,040 --> 00:04:52,860
to do so what we want is to add the

119
00:04:52,860 --> 00:04:56,160
issuer of a given credential during the

120
00:04:56,160 --> 00:04:59,100
verification phase but we also want the

121
00:04:59,100 --> 00:05:01,740
verifier to be sure that a credential

122
00:05:01,740 --> 00:05:04,440
that he accepts come from one of these

123
00:05:04,440 --> 00:05:06,180
shares each first

124
00:05:06,180 --> 00:05:08,160
so how do we do it

125
00:05:08,160 --> 00:05:10,199
we take a classical Anonymous credential

126
00:05:10,199 --> 00:05:12,840
scheme and we build the need an hidden

127
00:05:12,840 --> 00:05:15,300
issue Anonymous credential scheme by

128
00:05:15,300 --> 00:05:17,880
using a new cryptographic protocol that

129
00:05:17,880 --> 00:05:19,740
we call an aggregator and that I will

130
00:05:19,740 --> 00:05:21,300
present now

131
00:05:21,300 --> 00:05:23,000
so

132
00:05:23,000 --> 00:05:25,620
the verifier in our case the button

133
00:05:25,620 --> 00:05:29,220
takes all the public Keys interests and

134
00:05:29,220 --> 00:05:31,380
he generates an aggregator which is the

135
00:05:31,380 --> 00:05:33,060
cylinder here and the secret

136
00:05:33,060 --> 00:05:36,240
verification key which is this key here

137
00:05:36,240 --> 00:05:39,180
afterwards the user at least in our case

138
00:05:39,180 --> 00:05:42,240
will gather the aggregator of the

139
00:05:42,240 --> 00:05:45,660
verifier but before using it she need to

140
00:05:45,660 --> 00:05:47,400
verify the Integrity of the aggregator

141
00:05:47,400 --> 00:05:49,620
these two says that the verifier will

142
00:05:49,620 --> 00:05:52,259
state things about the keys that are

143
00:05:52,259 --> 00:05:54,259
that are aggregated in the aggregator

144
00:05:54,259 --> 00:05:57,060
but the user need to verify this

145
00:05:57,060 --> 00:05:59,699
statement the verifier could be lying

146
00:05:59,699 --> 00:06:02,819
for example in our in our example if the

147
00:06:02,819 --> 00:06:04,560
referral states that there is the French

148
00:06:04,560 --> 00:06:06,600
and Italian Administration public keys

149
00:06:06,600 --> 00:06:09,360
in the aggregator but in fact he only

150
00:06:09,360 --> 00:06:12,539
put the French Administration public key

151
00:06:12,539 --> 00:06:16,860
then at least then when Alice proves

152
00:06:16,860 --> 00:06:19,560
something about our credential she fall

153
00:06:19,560 --> 00:06:21,120
back in the classical Anonymous

154
00:06:21,120 --> 00:06:23,940
credential scheme and she lose all the

155
00:06:23,940 --> 00:06:26,280
annunity properties that she can get

156
00:06:26,280 --> 00:06:28,080
with the hidden Israel and anus

157
00:06:28,080 --> 00:06:30,720
credential scheme so she verifies the

158
00:06:30,720 --> 00:06:32,340
Integrity of the algorithm using this

159
00:06:32,340 --> 00:06:34,560
integrative verification function with

160
00:06:34,560 --> 00:06:37,680
which outputs one if and only if the

161
00:06:37,680 --> 00:06:39,720
keys that are stated by the verifier to

162
00:06:39,720 --> 00:06:42,120
be in the aggregator are indeed in the

163
00:06:42,120 --> 00:06:46,440
aggregator when this function when Alice

164
00:06:46,440 --> 00:06:47,660
run

165
00:06:47,660 --> 00:06:51,300
knows that the aggregator is valid

166
00:06:51,300 --> 00:06:56,099
she can use this with create function to

167
00:06:56,099 --> 00:06:57,919
randomize the

168
00:06:57,919 --> 00:07:01,080
the public key of the usual over

169
00:07:01,080 --> 00:07:03,979
credential and she used the aggregator

170
00:07:03,979 --> 00:07:08,699
to produce a proof that this randomized

171
00:07:08,699 --> 00:07:11,099
key belongs to the set of public Keys

172
00:07:11,099 --> 00:07:13,319
the verifier trusts

173
00:07:13,319 --> 00:07:16,979
and finally the verifier will get the

174
00:07:16,979 --> 00:07:19,440
proof and the randomized key and you

175
00:07:19,440 --> 00:07:22,680
will be able to verify using the secret

176
00:07:22,680 --> 00:07:26,360
verification key that the randomized key

177
00:07:26,360 --> 00:07:29,940
belongs indeed to the set of public Keys

178
00:07:29,940 --> 00:07:32,220
it trusts

179
00:07:32,220 --> 00:07:34,080
so an aggregator has two main properties

180
00:07:34,080 --> 00:07:36,120
first the Collision Freedom property

181
00:07:36,120 --> 00:07:38,280
which states that if this verification

182
00:07:38,280 --> 00:07:41,580
function outputs one then the verifier

183
00:07:41,580 --> 00:07:45,060
is sure that the randomized key belongs

184
00:07:45,060 --> 00:07:47,280
to the set of public easy chest and the

185
00:07:47,280 --> 00:07:49,080
element in distinguishability property

186
00:07:49,080 --> 00:07:50,819
which states that even though the

187
00:07:50,819 --> 00:07:53,759
verifier knows that the randomized key

188
00:07:53,759 --> 00:07:55,500
belong to the set of public keys they

189
00:07:55,500 --> 00:07:58,020
trust you cannot learn which key was

190
00:07:58,020 --> 00:08:00,780
used to produce this randomized key

191
00:08:00,780 --> 00:08:03,780
so now how do we use an aggregator in a

192
00:08:03,780 --> 00:08:07,020
Indonesia and in muscular scheme first

193
00:08:07,020 --> 00:08:09,599
we need the bartender needs to produce

194
00:08:09,599 --> 00:08:12,360
the aggregator so it produces the

195
00:08:12,360 --> 00:08:15,599
aggregator when he adds keys to its

196
00:08:15,599 --> 00:08:17,879
trustees database

197
00:08:17,879 --> 00:08:19,680
and when Alice wants to prove that she's

198
00:08:19,680 --> 00:08:21,479
already in she will gather the

199
00:08:21,479 --> 00:08:25,020
bartenders aggregator she will verify

200
00:08:25,020 --> 00:08:27,720
its integrity and afterwards she will

201
00:08:27,720 --> 00:08:30,240
randomize the public key of the French

202
00:08:30,240 --> 00:08:32,458
Administration she will produce a proof

203
00:08:32,458 --> 00:08:35,700
using the verifiers aggregator that this

204
00:08:35,700 --> 00:08:37,260
one the most public key belongs to the

205
00:08:37,260 --> 00:08:39,140
set of public Keys the button the trust

206
00:08:39,140 --> 00:08:42,419
and finally she will randomize her

207
00:08:42,419 --> 00:08:45,300
credential and now the when the verifier

208
00:08:45,300 --> 00:08:47,700
want to verify this code I'm sure he no

209
00:08:47,700 --> 00:08:49,680
longer needs to use the public of the

210
00:08:49,680 --> 00:08:51,600
French Administration but he will need

211
00:08:51,600 --> 00:08:54,899
to use the randomized key and this

212
00:08:54,899 --> 00:08:57,540
randomized key cannot link to the French

213
00:08:57,540 --> 00:08:59,700
or to the Italian Administration public

214
00:08:59,700 --> 00:09:01,100
keys

215
00:09:01,100 --> 00:09:05,519
now we have two possible energy sets

216
00:09:05,519 --> 00:09:08,519
because the battery doesn't know if the

217
00:09:08,519 --> 00:09:10,019
credential was issued either by the

218
00:09:10,019 --> 00:09:12,540
French or Italian Administration and if

219
00:09:12,540 --> 00:09:14,519
the battery doesn't know that Alice is a

220
00:09:14,519 --> 00:09:17,160
girl then the anonymity set is a set of

221
00:09:17,160 --> 00:09:20,640
all French and Italian citizens that are

222
00:09:20,640 --> 00:09:23,160
waiting and if the button knows that

223
00:09:23,160 --> 00:09:26,040
releases occur then the anonymity set is

224
00:09:26,040 --> 00:09:28,200
the set of all girls that are over 18

225
00:09:28,200 --> 00:09:31,200
and that are either French or Italian

226
00:09:31,200 --> 00:09:34,740
on the efficiency side now we'll compare

227
00:09:34,740 --> 00:09:36,600
scheme to the pressure valve Sanders

228
00:09:36,600 --> 00:09:38,459
Anonymous condenser scheme which is a

229
00:09:38,459 --> 00:09:40,380
classical Anonymous credential scheme

230
00:09:40,380 --> 00:09:42,899
and to the Israel hidden attribute-based

231
00:09:42,899 --> 00:09:44,880
credential scheme which is a scheme

232
00:09:44,880 --> 00:09:46,800
which was produced recently and which

233
00:09:46,800 --> 00:09:49,620
has the same motivation as our scheme so

234
00:09:49,620 --> 00:09:51,600
all the numbers you can see here are the

235
00:09:51,600 --> 00:09:53,120
number of

236
00:09:53,120 --> 00:09:56,820
group operations we created to run each

237
00:09:56,820 --> 00:09:58,800
function

238
00:09:58,800 --> 00:10:02,339
on the Israel side first we can see that

239
00:10:02,339 --> 00:10:05,700
how scheme is a longer to run the ihbc

240
00:10:05,700 --> 00:10:07,620
scheme and then the Porsche version does

241
00:10:07,620 --> 00:10:09,980
came but

242
00:10:09,980 --> 00:10:13,140
these functions are not shown very often

243
00:10:13,140 --> 00:10:15,540
and the absolute training time is short

244
00:10:15,540 --> 00:10:18,360
on the user side now the Integrity

245
00:10:18,360 --> 00:10:21,000
verification function we can see that

246
00:10:21,000 --> 00:10:23,220
the numbers are underlined here it is to

247
00:10:23,220 --> 00:10:27,060
notice that this function is linear in

248
00:10:27,060 --> 00:10:29,220
function of the number of issuers

249
00:10:29,220 --> 00:10:32,040
trusted by the verifier here you have

250
00:10:32,040 --> 00:10:34,260
the number for hundred issuers and we

251
00:10:34,260 --> 00:10:35,700
can see that house gaming performance

252
00:10:35,700 --> 00:10:39,000
written better than high habc scam

253
00:10:39,000 --> 00:10:41,579
to randomize the credential now we can

254
00:10:41,579 --> 00:10:45,060
see that the non-insurer setup so the

255
00:10:45,060 --> 00:10:48,060
pressure levels under scheme is more

256
00:10:48,060 --> 00:10:49,800
efficient that the hidden issue are set

257
00:10:49,800 --> 00:10:50,640
up

258
00:10:50,640 --> 00:10:53,040
but we can see that both our scheme and

259
00:10:53,040 --> 00:10:55,800
ihbc scheme perform with the same

260
00:10:55,800 --> 00:10:57,839
efficiency when it comes to the

261
00:10:57,839 --> 00:11:00,300
randomization of a credential and

262
00:11:00,300 --> 00:11:03,180
finally on the verifier side we can see

263
00:11:03,180 --> 00:11:06,180
that the verifier setup function is also

264
00:11:06,180 --> 00:11:07,680
linear and function of the number of

265
00:11:07,680 --> 00:11:11,040
trusted issuers and but we can see that

266
00:11:11,040 --> 00:11:12,660
our skin performs two times better than

267
00:11:12,660 --> 00:11:17,519
habc scheme and just like to randomize a

268
00:11:17,519 --> 00:11:19,740
credential the verification of a

269
00:11:19,740 --> 00:11:22,019
randomized credential is longer to run

270
00:11:22,019 --> 00:11:24,300
with a known with the hidden initial

271
00:11:24,300 --> 00:11:27,000
setup than with a non-isual setup but

272
00:11:27,000 --> 00:11:29,579
both house scheme and a habc scheme

273
00:11:29,579 --> 00:11:33,060
perform more or less as efficiently in

274
00:11:33,060 --> 00:11:34,440
this case

275
00:11:34,440 --> 00:11:38,339
so to conclude I presented the why

276
00:11:38,339 --> 00:11:40,140
Anonymous credential are not always an

277
00:11:40,140 --> 00:11:42,720
animals I presented a collision free

278
00:11:42,720 --> 00:11:45,560
element in this indistinguishable

279
00:11:45,560 --> 00:11:47,700
cryptographic protocols that we call an

280
00:11:47,700 --> 00:11:50,339
aggregator and I presented how to use

281
00:11:50,339 --> 00:11:53,579
this aggregator to build an hidden

282
00:11:53,579 --> 00:11:56,639
issuer and a muscular scheme

283
00:11:56,639 --> 00:11:59,220
thank you for your attention and if you

284
00:11:59,220 --> 00:12:03,800
have any question I will answer them now

