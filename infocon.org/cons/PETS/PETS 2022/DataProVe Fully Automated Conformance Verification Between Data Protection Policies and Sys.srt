1
00:00:00,480 --> 00:00:01,360
hi

2
00:00:01,360 --> 00:00:03,600
today i will talk about our work on data

3
00:00:03,600 --> 00:00:05,440
proof fully automated performance

4
00:00:05,440 --> 00:00:07,520
verification between data protection

5
00:00:07,520 --> 00:00:11,679
policies and system architectures

6
00:00:11,679 --> 00:00:13,440
probably most of us are aware of the

7
00:00:13,440 --> 00:00:17,680
gdpr which took effect in 2018

8
00:00:17,680 --> 00:00:20,080
and it puts more emphasis on privacy by

9
00:00:20,080 --> 00:00:21,600
design

10
00:00:21,600 --> 00:00:24,240
where businesses are encouraged to

11
00:00:24,240 --> 00:00:26,640
implement measures at an early stage of

12
00:00:26,640 --> 00:00:29,439
the system design phase

13
00:00:29,439 --> 00:00:31,920
motivation behind this work is that

14
00:00:31,920 --> 00:00:36,000
during system design informal and manual

15
00:00:36,000 --> 00:00:38,079
conformance checks can be error prone

16
00:00:38,079 --> 00:00:40,480
and time consuming

17
00:00:40,480 --> 00:00:43,440
especially if the system is large with a

18
00:00:43,440 --> 00:00:45,120
with a huge number of

19
00:00:45,120 --> 00:00:46,480
components

20
00:00:46,480 --> 00:00:49,039
which may also include third-party

21
00:00:49,039 --> 00:00:51,600
applications

22
00:00:51,600 --> 00:00:54,079
to address this we propose a framework

23
00:00:54,079 --> 00:00:56,559
in which specified system architecture

24
00:00:56,559 --> 00:00:58,480
can be verified against a specified

25
00:00:58,480 --> 00:01:01,280
privacy or data protection policy

26
00:01:01,280 --> 00:01:03,039
this seems to have system designers

27
00:01:03,039 --> 00:01:05,280
detect any flows at an early stage

28
00:01:05,280 --> 00:01:07,520
however we also note that

29
00:01:07,520 --> 00:01:09,760
our framework can be used for auditing

30
00:01:09,760 --> 00:01:12,240
purpose as well verify existing

31
00:01:12,240 --> 00:01:15,360
architectures and policies after its

32
00:01:15,360 --> 00:01:17,119
phase

33
00:01:17,119 --> 00:01:19,119
we address the architectural level which

34
00:01:19,119 --> 00:01:21,040
is different from other works that

35
00:01:21,040 --> 00:01:23,200
verify the security of protocols or

36
00:01:23,200 --> 00:01:24,320
courts

37
00:01:24,320 --> 00:01:26,560
since at the architectural level we

38
00:01:26,560 --> 00:01:28,799
abstract away from the low-level system

39
00:01:28,799 --> 00:01:31,119
implementations

40
00:01:31,119 --> 00:01:34,159
such as codes our framework is suitable

41
00:01:34,159 --> 00:01:36,159
for verifying large system with high

42
00:01:36,159 --> 00:01:37,200
number of

43
00:01:37,200 --> 00:01:39,200
components including third-party

44
00:01:39,200 --> 00:01:40,640
applications

45
00:01:40,640 --> 00:01:43,280
i will talk about the formal definition

46
00:01:43,280 --> 00:01:45,520
of architectures later

47
00:01:45,520 --> 00:01:48,560
so with this we are able to verify the

48
00:01:48,560 --> 00:01:50,799
entire system

49
00:01:50,799 --> 00:01:54,079
or service instead of focusing just on a

50
00:01:54,079 --> 00:01:56,799
single protocol single application

51
00:01:56,799 --> 00:01:59,520
um and one can use our framework to

52
00:01:59,520 --> 00:02:00,479
detect

53
00:02:00,479 --> 00:02:02,560
design flow at high level

54
00:02:02,560 --> 00:02:05,119
and then continue to look into

55
00:02:05,119 --> 00:02:07,439
protocols or application codes after

56
00:02:07,439 --> 00:02:08,878
that

57
00:02:08,878 --> 00:02:10,639
although in the literature there are

58
00:02:10,639 --> 00:02:12,480
many works in this area they follow a

59
00:02:12,480 --> 00:02:14,800
different philosophy as most of them

60
00:02:14,800 --> 00:02:15,760
address

61
00:02:15,760 --> 00:02:19,360
policy enforcement during system run

62
00:02:19,360 --> 00:02:21,760
for instance some works only address the

63
00:02:21,760 --> 00:02:23,440
policy level

64
00:02:23,440 --> 00:02:25,760
such as how to specify privacy policies

65
00:02:25,760 --> 00:02:28,160
of web applications and check

66
00:02:28,160 --> 00:02:30,239
if the policy meets the expectation of

67
00:02:30,239 --> 00:02:31,760
customers

68
00:02:31,760 --> 00:02:33,599
some works address both the policy and

69
00:02:33,599 --> 00:02:35,680
architectural levels but in an informal

70
00:02:35,680 --> 00:02:38,160
way so basically here the authors

71
00:02:38,160 --> 00:02:40,080
discuss potential directions for

72
00:02:40,080 --> 00:02:42,560
modeling different data protection rules

73
00:02:42,560 --> 00:02:43,680
such as

74
00:02:43,680 --> 00:02:45,760
data access requirements and data

75
00:02:45,760 --> 00:02:48,000
linkability requirements which we also

76
00:02:48,000 --> 00:02:49,680
address in our paper

77
00:02:49,680 --> 00:02:52,000
some focus on the policy specification

78
00:02:52,000 --> 00:02:53,760
approaches for the transmission of

79
00:02:53,760 --> 00:02:56,319
personal data and how to enforce these

80
00:02:56,319 --> 00:02:58,879
policies during system operations

81
00:02:58,879 --> 00:03:01,120
and some focus on privacy threat

82
00:03:01,120 --> 00:03:03,440
modeling of system architectures but

83
00:03:03,440 --> 00:03:06,080
without considering the policy level

84
00:03:06,080 --> 00:03:08,239
and finally some focus on the code level

85
00:03:08,239 --> 00:03:10,400
and verification of policies against

86
00:03:10,400 --> 00:03:13,360
chords and as i already mentioned

87
00:03:13,360 --> 00:03:14,959
just usually focus on a single

88
00:03:14,959 --> 00:03:17,200
application due to the code complexity

89
00:03:17,200 --> 00:03:18,400
but it would be

90
00:03:18,400 --> 00:03:20,000
quite challenging if someone wants to

91
00:03:20,000 --> 00:03:22,480
verify the anti-service or system with

92
00:03:22,480 --> 00:03:23,440
this

93
00:03:23,440 --> 00:03:25,760
compared to just our framework follows a

94
00:03:25,760 --> 00:03:28,720
different philosophy it focuses on the

95
00:03:28,720 --> 00:03:30,879
system design phase

96
00:03:30,879 --> 00:03:33,360
it supports the formal specification of

97
00:03:33,360 --> 00:03:36,000
both policies and system architectures

98
00:03:36,000 --> 00:03:38,000
it supports fully automated compliance

99
00:03:38,000 --> 00:03:40,560
verification between them and it also

100
00:03:40,560 --> 00:03:42,400
supports specification and modelling of

101
00:03:42,400 --> 00:03:45,680
crypto primitives and operations

102
00:03:45,680 --> 00:03:47,760
as well as attackers

103
00:03:47,760 --> 00:03:49,920
to summarize our main contributions

104
00:03:49,920 --> 00:03:52,319
include a new variant of privacy policy

105
00:03:52,319 --> 00:03:54,400
language which propose syntax and

106
00:03:54,400 --> 00:03:57,200
semantics a new variant of architectural

107
00:03:57,200 --> 00:03:58,319
language

108
00:03:58,319 --> 00:03:59,920
the definition of three types of

109
00:03:59,920 --> 00:04:03,120
performance namely privacy uh data

110
00:04:03,120 --> 00:04:05,360
protection and functional performance

111
00:04:05,360 --> 00:04:06,799
relations

112
00:04:06,799 --> 00:04:09,599
um a new and efficient fully automated

113
00:04:09,599 --> 00:04:12,000
verification engine and a prototype

114
00:04:12,000 --> 00:04:13,360
implementation

115
00:04:13,360 --> 00:04:15,360
in the following we will highlight the

116
00:04:15,360 --> 00:04:17,440
syntax of the policy language we don't

117
00:04:17,440 --> 00:04:19,199
talk about the semantics due to time

118
00:04:19,199 --> 00:04:21,440
limitations but it can be found in the

119
00:04:21,440 --> 00:04:22,720
paper

120
00:04:22,720 --> 00:04:24,800
so the privacy policy is defined on a

121
00:04:24,800 --> 00:04:26,160
data type

122
00:04:26,160 --> 00:04:28,400
for example a data type can be a half

123
00:04:28,400 --> 00:04:29,759
record

124
00:04:29,759 --> 00:04:32,000
or address and so on

125
00:04:32,000 --> 00:04:34,639
and in our case each policy contains

126
00:04:34,639 --> 00:04:37,919
seven sub policies for data collections

127
00:04:37,919 --> 00:04:40,840
usage that the storage deletions

128
00:04:40,840 --> 00:04:43,759
transfer data access and

129
00:04:43,759 --> 00:04:45,919
link

130
00:04:45,919 --> 00:04:47,840
the data collection policy requires to

131
00:04:47,840 --> 00:04:49,840
specify whether collection consent is

132
00:04:49,840 --> 00:04:52,560
required for this type of data

133
00:04:52,560 --> 00:04:55,199
which can be yes or no

134
00:04:55,199 --> 00:04:58,160
and a set of collection purposes

135
00:04:58,160 --> 00:05:00,160
which can be for instance create and

136
00:05:00,160 --> 00:05:01,199
count

137
00:05:01,199 --> 00:05:03,039
or calculate

138
00:05:03,039 --> 00:05:06,639
bill receive insurance and so on

139
00:05:06,639 --> 00:05:08,800
the usage policy is similar to the data

140
00:05:08,800 --> 00:05:10,560
collection policy

141
00:05:10,560 --> 00:05:11,520
but with

142
00:05:11,520 --> 00:05:13,919
usage consent and

143
00:05:13,919 --> 00:05:17,039
usage purposes instead

144
00:05:17,039 --> 00:05:19,600
next the data storage policy requires

145
00:05:19,600 --> 00:05:21,840
one to specify whether storage consent

146
00:05:21,840 --> 00:05:23,199
is required

147
00:05:23,199 --> 00:05:26,160
the location of the storage and a set of

148
00:05:26,160 --> 00:05:27,919
storage food poses

149
00:05:27,919 --> 00:05:30,000
we define high level locations such as

150
00:05:30,000 --> 00:05:32,880
decentralized or centralized options

151
00:05:32,880 --> 00:05:35,120
which can be main storage or backup

152
00:05:35,120 --> 00:05:36,880
storage

153
00:05:36,880 --> 00:05:38,720
the deletion policy includes the

154
00:05:38,720 --> 00:05:41,199
specification of the location from where

155
00:05:41,199 --> 00:05:43,520
the data can be deleted

156
00:05:43,520 --> 00:05:46,800
and the numerical deletion delay so in

157
00:05:46,800 --> 00:05:49,520
our paper we only consider numerical

158
00:05:49,520 --> 00:05:51,440
delay

159
00:05:51,440 --> 00:05:53,600
the transfer policy also includes a set

160
00:05:53,600 --> 00:05:55,919
of entities to whom the data of this

161
00:05:55,919 --> 00:05:58,479
type can be transferred such as third

162
00:05:58,479 --> 00:05:59,840
party

163
00:05:59,840 --> 00:06:03,120
half authority and so on

164
00:06:03,120 --> 00:06:05,440
and then the last two sub policies

165
00:06:05,440 --> 00:06:07,520
address data privacy and security

166
00:06:07,520 --> 00:06:09,759
requirements

167
00:06:09,759 --> 00:06:12,160
the data access policy defines a set of

168
00:06:12,160 --> 00:06:15,360
entities that can access or can have

169
00:06:15,360 --> 00:06:18,319
the data of this type

170
00:06:18,319 --> 00:06:20,720
finally the data link policy contains a

171
00:06:20,720 --> 00:06:22,240
set of pairs

172
00:06:22,240 --> 00:06:24,319
which defines who can link a piece of

173
00:06:24,319 --> 00:06:26,560
data of type data

174
00:06:26,560 --> 00:06:30,240
with the data type defined in the pair

175
00:06:30,240 --> 00:06:31,759
for instance

176
00:06:31,759 --> 00:06:32,800
have

177
00:06:32,800 --> 00:06:34,319
authority

178
00:06:34,319 --> 00:06:36,080
is allowed to

179
00:06:36,080 --> 00:06:36,960
link

180
00:06:36,960 --> 00:06:38,560
an address with

181
00:06:38,560 --> 00:06:41,759
data of type tata so if the tata for

182
00:06:41,759 --> 00:06:45,039
instance is the health record

183
00:06:45,039 --> 00:06:47,600
then the authority can link someone's

184
00:06:47,600 --> 00:06:51,520
address with someone's health record

185
00:06:51,520 --> 00:06:53,440
now as for the formal definition of

186
00:06:53,440 --> 00:06:56,000
architectures we define architecture as

187
00:06:56,000 --> 00:06:57,599
a set of actions

188
00:06:57,599 --> 00:06:59,840
which define who can do what in the

189
00:06:59,840 --> 00:07:01,759
system

190
00:07:01,759 --> 00:07:02,560
so

191
00:07:02,560 --> 00:07:04,560
for instance in this picture

192
00:07:04,560 --> 00:07:06,560
action calculate add

193
00:07:06,560 --> 00:07:07,759
says that

194
00:07:07,759 --> 00:07:10,479
in a system an entity e can calculate a

195
00:07:10,479 --> 00:07:12,960
piece of data of type

196
00:07:12,960 --> 00:07:14,800
data

197
00:07:14,800 --> 00:07:18,319
this is denoted by x theta here

198
00:07:18,319 --> 00:07:20,800
at some non-specific time which is

199
00:07:20,800 --> 00:07:23,280
denoted by time tt

200
00:07:23,280 --> 00:07:24,639
in this case

201
00:07:24,639 --> 00:07:28,400
similarly uh receive at

202
00:07:28,400 --> 00:07:31,680
denotes or specified that e

203
00:07:31,680 --> 00:07:35,120
can receive the data x theta at some

204
00:07:35,120 --> 00:07:37,680
non-specific time

205
00:07:37,680 --> 00:07:40,319
okay so the rest actions can be can be

206
00:07:40,319 --> 00:07:44,160
interpreted in the same way

207
00:07:44,160 --> 00:07:46,800
here we can see an example of smart

208
00:07:46,800 --> 00:07:49,360
metering architecture

209
00:07:49,360 --> 00:07:53,440
with five entities and two actions

210
00:07:53,440 --> 00:07:54,879
so in this case

211
00:07:54,879 --> 00:07:56,479
the server

212
00:07:56,479 --> 00:07:58,639
at the service provider's side can

213
00:07:58,639 --> 00:08:01,520
receive an energy record

214
00:08:01,520 --> 00:08:03,919
of gas and electric consumptions from a

215
00:08:03,919 --> 00:08:06,479
smart meter

216
00:08:06,479 --> 00:08:08,560
so which is then

217
00:08:08,560 --> 00:08:11,039
can be centrally stored

218
00:08:11,039 --> 00:08:13,360
in the main storage

219
00:08:13,360 --> 00:08:15,440
we define free conformance relations

220
00:08:15,440 --> 00:08:17,360
between a privacy policy and an

221
00:08:17,360 --> 00:08:19,360
architecture

222
00:08:19,360 --> 00:08:21,599
the privacy conference relation says

223
00:08:21,599 --> 00:08:25,440
that if in a policy an entity does not

224
00:08:25,440 --> 00:08:28,240
have the right to access any data of

225
00:08:28,240 --> 00:08:29,759
type data

226
00:08:29,759 --> 00:08:30,639
then

227
00:08:30,639 --> 00:08:33,360
e cannot have this type of data in the

228
00:08:33,360 --> 00:08:35,760
corresponding architecture

229
00:08:35,760 --> 00:08:38,880
similarly for the data link requirement

230
00:08:38,880 --> 00:08:42,000
the data protection conformance deals

231
00:08:42,000 --> 00:08:42,880
with

232
00:08:42,880 --> 00:08:44,959
the concept collection requirements the

233
00:08:44,959 --> 00:08:47,680
purposes the data transfer and data

234
00:08:47,680 --> 00:08:49,519
deletion requirements

235
00:08:49,519 --> 00:08:50,800
and finally

236
00:08:50,800 --> 00:08:52,880
functional conformance addresses the

237
00:08:52,880 --> 00:08:55,440
functionality of a service that it can

238
00:08:55,440 --> 00:08:58,560
or cannot provide

239
00:08:59,120 --> 00:09:01,120
the automated verification algorithm is

240
00:09:01,120 --> 00:09:02,959
based on logic resolution and inference

241
00:09:02,959 --> 00:09:05,519
rules for example for privacy

242
00:09:05,519 --> 00:09:07,839
requirement we define a set of inference

243
00:09:07,839 --> 00:09:10,560
rules to capture what are the conditions

244
00:09:10,560 --> 00:09:14,800
for an entity to have a piece of data

245
00:09:14,800 --> 00:09:16,880
we also define rules for data protection

246
00:09:16,880 --> 00:09:18,720
and functional conformance as well as

247
00:09:18,720 --> 00:09:20,959
for data link requirements but

248
00:09:20,959 --> 00:09:22,880
due to time limitations we don't talk

249
00:09:22,880 --> 00:09:24,880
about them here

250
00:09:24,880 --> 00:09:27,040
in the verification process

251
00:09:27,040 --> 00:09:30,080
the policy and sub policy on the left

252
00:09:30,080 --> 00:09:32,480
side are mapped to logical goals to be

253
00:09:32,480 --> 00:09:33,440
proven

254
00:09:33,440 --> 00:09:35,680
while the architectural actions on the

255
00:09:35,680 --> 00:09:38,240
right side are mapped to logical facts

256
00:09:38,240 --> 00:09:40,800
with which we attempt to prove the goal

257
00:09:40,800 --> 00:09:43,600
with the use of the inference rules

258
00:09:43,600 --> 00:09:46,000
the proof process can be modeled by a

259
00:09:46,000 --> 00:09:47,760
derivation tree

260
00:09:47,760 --> 00:09:51,680
which either finds a proof or not

261
00:09:51,680 --> 00:09:53,839
we know that the algorithm only returns

262
00:09:53,839 --> 00:09:55,680
one positive proof even if there are

263
00:09:55,680 --> 00:09:57,440
many

264
00:09:57,440 --> 00:10:00,080
if no proof is found up to a given

265
00:10:00,080 --> 00:10:01,120
boundary

266
00:10:01,120 --> 00:10:04,079
then it stops so basically means that

267
00:10:04,079 --> 00:10:06,880
the solution is only complete

268
00:10:06,880 --> 00:10:08,079
up to

269
00:10:08,079 --> 00:10:11,040
a predefined boundary

270
00:10:11,040 --> 00:10:12,880
we implemented the prototype tool based

271
00:10:12,880 --> 00:10:15,360
on the proposed theoretical approaches

272
00:10:15,360 --> 00:10:17,360
which is every online on github as you

273
00:10:17,360 --> 00:10:19,360
can see

274
00:10:19,360 --> 00:10:21,519
as an example in the paper we

275
00:10:21,519 --> 00:10:23,360
demonstrate the feasibility of our

276
00:10:23,360 --> 00:10:25,680
approach and tool by verifying two

277
00:10:25,680 --> 00:10:27,920
contact tracing approaches

278
00:10:27,920 --> 00:10:30,880
dp3t which is a decentralized approach

279
00:10:30,880 --> 00:10:34,079
and pep pt which is a centralized

280
00:10:34,079 --> 00:10:35,200
approach

281
00:10:35,200 --> 00:10:37,440
we note that the tool

282
00:10:37,440 --> 00:10:40,320
can be used for any kind of

283
00:10:40,320 --> 00:10:41,760
you know services

284
00:10:41,760 --> 00:10:44,320
and system we only took this example

285
00:10:44,320 --> 00:10:48,000
here because it's timely and relevant

286
00:10:48,000 --> 00:10:50,079
for demonstration purposes we define a

287
00:10:50,079 --> 00:10:52,240
common policy for both architectures

288
00:10:52,240 --> 00:10:53,519
which

289
00:10:53,519 --> 00:10:55,440
includes policies such as

290
00:10:55,440 --> 00:10:57,440
short-term ids and long-term ideas of

291
00:10:57,440 --> 00:10:59,680
phones must be stored in a decentralized

292
00:10:59,680 --> 00:11:01,200
way in phones

293
00:11:01,200 --> 00:11:02,880
the back-end server

294
00:11:02,880 --> 00:11:05,360
has no right to link short-term ids and

295
00:11:05,360 --> 00:11:07,920
long-term ids with each other and the

296
00:11:07,920 --> 00:11:09,600
phones must delete

297
00:11:09,600 --> 00:11:13,360
the short-term ids within 14 days

298
00:11:13,360 --> 00:11:15,040
after running the verification against

299
00:11:15,040 --> 00:11:16,560
dp3t

300
00:11:16,560 --> 00:11:18,800
we identified only functional compliance

301
00:11:18,800 --> 00:11:20,480
issues related to the functionality of

302
00:11:20,480 --> 00:11:22,000
the service

303
00:11:22,000 --> 00:11:23,760
such as health authority cannot have

304
00:11:23,760 --> 00:11:26,399
statistics about the global cases

305
00:11:26,399 --> 00:11:28,720
in the case of pep pt we find some

306
00:11:28,720 --> 00:11:30,959
privacy compliance issues such as the

307
00:11:30,959 --> 00:11:33,120
back-end server can link short-term and

308
00:11:33,120 --> 00:11:35,279
long-term ideas with each other

309
00:11:35,279 --> 00:11:37,600
um or the short-term ids of phones are

310
00:11:37,600 --> 00:11:40,000
stored until 21 days

311
00:11:40,000 --> 00:11:42,240
but only 14 days are allowed in the

312
00:11:42,240 --> 00:11:44,720
specified policy

313
00:11:44,720 --> 00:11:46,640
in general the performance of the tool

314
00:11:46,640 --> 00:11:48,959
is quite good and it depends strongly on

315
00:11:48,959 --> 00:11:50,399
the data length

316
00:11:50,399 --> 00:11:52,560
or the number of arguments in the data

317
00:11:52,560 --> 00:11:54,320
for instance a document can contain

318
00:11:54,320 --> 00:11:56,399
several pieces of personal data as

319
00:11:56,399 --> 00:11:58,560
arguments

320
00:11:58,560 --> 00:12:00,480
and it also depends on the number of

321
00:12:00,480 --> 00:12:03,200
architectural actions

322
00:12:03,200 --> 00:12:05,680
to conclude we propose a novel framework

323
00:12:05,680 --> 00:12:07,440
and tool to automatically verify

324
00:12:07,440 --> 00:12:09,920
compliance between policies and

325
00:12:09,920 --> 00:12:11,519
architectures

326
00:12:11,519 --> 00:12:14,720
which could be used for system design

327
00:12:14,720 --> 00:12:18,639
auditing or educational purposes

328
00:12:18,639 --> 00:12:20,720
in the future we plan to improve and

329
00:12:20,720 --> 00:12:23,040
extend the framework and address some

330
00:12:23,040 --> 00:12:25,120
limitations such as

331
00:12:25,120 --> 00:12:28,240
supporting also non-numerical delay

332
00:12:28,240 --> 00:12:30,240
we change the policy language to support

333
00:12:30,240 --> 00:12:32,160
conditional requirements

334
00:12:32,160 --> 00:12:34,720
and other types of legal basis of

335
00:12:34,720 --> 00:12:36,880
processing and considering special

336
00:12:36,880 --> 00:12:39,760
category data as well

337
00:12:39,760 --> 00:12:41,279
thank you for your attention and happy

338
00:12:41,279 --> 00:12:45,439
to answer any questions thank you

