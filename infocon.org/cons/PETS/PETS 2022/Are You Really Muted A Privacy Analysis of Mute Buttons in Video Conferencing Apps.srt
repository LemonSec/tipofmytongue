1
00:00:00,240 --> 00:00:02,720
hello everyone on behalf of local all

2
00:00:02,720 --> 00:00:04,799
the co-authors jack and i will be

3
00:00:04,799 --> 00:00:07,440
presenting our work i usually muted a

4
00:00:07,440 --> 00:00:09,280
privacy analysis of mute buttons in

5
00:00:09,280 --> 00:00:10,960
video conference apps

6
00:00:10,960 --> 00:00:12,960
this work was done in collaboration with

7
00:00:12,960 --> 00:00:15,280
loyola university of chicago our

8
00:00:15,280 --> 00:00:17,199
co-authors are george k through what's

9
00:00:17,199 --> 00:00:19,359
called neil clinton-smith and the castle

10
00:00:19,359 --> 00:00:20,400
forwards

11
00:00:20,400 --> 00:00:22,480
video conference apps exploded in

12
00:00:22,480 --> 00:00:25,359
popularity and usage during coffee 19

13
00:00:25,359 --> 00:00:27,359
allowing millions of users to work from

14
00:00:27,359 --> 00:00:28,160
home

15
00:00:28,160 --> 00:00:30,640
vcas require access to the camera and

16
00:00:30,640 --> 00:00:33,200
microphone while using the application

17
00:00:33,200 --> 00:00:35,360
a user is always notified when the app

18
00:00:35,360 --> 00:00:37,920
is using a camera usually by a green

19
00:00:37,920 --> 00:00:40,160
light turning on or notification from

20
00:00:40,160 --> 00:00:41,920
the operating system

21
00:00:41,920 --> 00:00:44,079
microphones on the other hand sometimes

22
00:00:44,079 --> 00:00:46,640
do not have the same indicators except

23
00:00:46,640 --> 00:00:48,640
some apple products

24
00:00:48,640 --> 00:00:51,039
even though mute buttons is provided to

25
00:00:51,039 --> 00:00:53,600
mute the microphone there is no thorough

26
00:00:53,600 --> 00:00:55,520
privacy analysis of this function for

27
00:00:55,520 --> 00:00:56,640
vcas

28
00:00:56,640 --> 00:00:58,559
so we are here today to address the

29
00:00:58,559 --> 00:01:01,120
question what about the mute button

30
00:01:01,120 --> 00:01:03,199
to answer the question we need to first

31
00:01:03,199 --> 00:01:05,280
establish what should be happening by

32
00:01:05,280 --> 00:01:07,520
asking users what they think we need to

33
00:01:07,520 --> 00:01:08,880
understand that we see its actual

34
00:01:08,880 --> 00:01:11,760
behavior and from there observe if what

35
00:01:11,760 --> 00:01:15,439
the user expects is actually reality

36
00:01:15,439 --> 00:01:17,280
here let us start with the first

37
00:01:17,280 --> 00:01:19,439
question what are the user's

38
00:01:19,439 --> 00:01:22,000
expectations of the mute button

39
00:01:22,000 --> 00:01:24,479
to answer the question we recruited more

40
00:01:24,479 --> 00:01:27,040
than 200 participants who work from home

41
00:01:27,040 --> 00:01:28,720
during the pandemic

42
00:01:28,720 --> 00:01:30,720
we expect these individuals to know

43
00:01:30,720 --> 00:01:32,720
meeting apps and be comfortable using

44
00:01:32,720 --> 00:01:33,600
them

45
00:01:33,600 --> 00:01:35,360
their opinions and expectations of the

46
00:01:35,360 --> 00:01:37,920
mid button are a good baseline for our

47
00:01:37,920 --> 00:01:40,479
discussion

48
00:01:40,479 --> 00:01:42,240
on top of the mute button expectations

49
00:01:42,240 --> 00:01:45,119
and opinions we also learned which apps

50
00:01:45,119 --> 00:01:48,000
are the most used why normal vca users

51
00:01:48,000 --> 00:01:49,840
mute their microphone and what

52
00:01:49,840 --> 00:01:52,560
activities they are doing while muted

53
00:01:52,560 --> 00:01:55,280
zoom themes slack and webex were

54
00:01:55,280 --> 00:01:58,000
unsurprisingly the most popular vcas as

55
00:01:58,000 --> 00:01:59,680
for the reasons that users choose to

56
00:01:59,680 --> 00:02:02,079
mute microphone is to preserve their

57
00:02:02,079 --> 00:02:04,640
privacy of background activities

58
00:02:04,640 --> 00:02:06,960
those activities including watching tv

59
00:02:06,960 --> 00:02:09,758
talking cooking listening to music and

60
00:02:09,758 --> 00:02:11,038
cleaning

61
00:02:11,038 --> 00:02:13,440
as we found out in our user study the

62
00:02:13,440 --> 00:02:14,720
participant's expectations and

63
00:02:14,720 --> 00:02:17,360
assumptions were interesting

64
00:02:17,360 --> 00:02:18,959
the table represents four possible

65
00:02:18,959 --> 00:02:22,480
states of a vca the vca is off the reset

66
00:02:22,480 --> 00:02:25,200
is on but there is no meeting the user

67
00:02:25,200 --> 00:02:27,840
is in a meeting but it's muted and the

68
00:02:27,840 --> 00:02:30,000
users are muted in your meeting

69
00:02:30,000 --> 00:02:32,160
there is obvious discontinuity of when a

70
00:02:32,160 --> 00:02:33,840
user believes that vca is actually

71
00:02:33,840 --> 00:02:36,239
listening to the microphone however the

72
00:02:36,239 --> 00:02:38,720
participants have a clear expectation of

73
00:02:38,720 --> 00:02:41,200
when vcas should be listening they

74
00:02:41,200 --> 00:02:43,599
believe that vca should only access the

75
00:02:43,599 --> 00:02:45,599
microphone when they are muted within a

76
00:02:45,599 --> 00:02:47,120
meeting

77
00:02:47,120 --> 00:02:48,959
now that we understand what the user

78
00:02:48,959 --> 00:02:50,400
what the users expect

79
00:02:50,400 --> 00:02:51,360
we will

80
00:02:51,360 --> 00:02:54,959
explore how vcas actually work

81
00:02:54,959 --> 00:02:56,640
there are three main challenges when

82
00:02:56,640 --> 00:02:58,640
doing this study tracing audio data

83
00:02:58,640 --> 00:03:00,080
within the system pose a challenge

84
00:03:00,080 --> 00:03:02,480
because audio data begins in an api call

85
00:03:02,480 --> 00:03:04,720
controlled by the operating system

86
00:03:04,720 --> 00:03:07,280
all the api calls across each os are

87
00:03:07,280 --> 00:03:08,239
different

88
00:03:08,239 --> 00:03:10,000
knowing where the audio comes from is

89
00:03:10,000 --> 00:03:12,480
only half the battle though we also have

90
00:03:12,480 --> 00:03:14,480
to watch when other applications in

91
00:03:14,480 --> 00:03:16,319
other memory spaces call the api

92
00:03:16,319 --> 00:03:19,120
functions this is the second challenge

93
00:03:19,120 --> 00:03:21,120
building a system that can directly

94
00:03:21,120 --> 00:03:22,720
observe which apps are looking at the

95
00:03:22,720 --> 00:03:25,120
microphone through the lens of the api

96
00:03:25,120 --> 00:03:26,640
the final challenge was tracing the data

97
00:03:26,640 --> 00:03:28,480
within the application

98
00:03:28,480 --> 00:03:30,720
all the vcas use different libraries and

99
00:03:30,720 --> 00:03:32,879
each come with their own unique library

100
00:03:32,879 --> 00:03:35,760
going from the api watch point into the

101
00:03:35,760 --> 00:03:37,200
application posed to be an especially

102
00:03:37,200 --> 00:03:38,560
big challenge as the memory addresses

103
00:03:38,560 --> 00:03:40,000
were always changing which made it very

104
00:03:40,000 --> 00:03:41,519
difficult to script

105
00:03:41,519 --> 00:03:43,519
however we were able to overcome each

106
00:03:43,519 --> 00:03:44,959
challenge relative to the operating

107
00:03:44,959 --> 00:03:47,280
system they all require different tools

108
00:03:47,280 --> 00:03:49,680
and scripts but it was possible

109
00:03:49,680 --> 00:03:52,239
windows audio access mechanism is just

110
00:03:52,239 --> 00:03:54,799
simply the windows api we used a tool

111
00:03:54,799 --> 00:03:56,720
called api monitor which could attach

112
00:03:56,720 --> 00:03:59,120
itself to each unique api call

113
00:03:59,120 --> 00:04:00,959
we then trace the audio bytes into the

114
00:04:00,959 --> 00:04:03,439
application by grabbing the odd the

115
00:04:03,439 --> 00:04:05,599
audio but the audio's buffer address and

116
00:04:05,599 --> 00:04:08,720
following the address using x64 dbg in

117
00:04:08,720 --> 00:04:10,000
scala hide

118
00:04:10,000 --> 00:04:12,159
mac os had a similar api system with the

119
00:04:12,159 --> 00:04:14,720
microphone but xcode's instrumentation

120
00:04:14,720 --> 00:04:16,720
tool is what captured the ap the api

121
00:04:16,720 --> 00:04:18,720
calls instead of api monitor

122
00:04:18,720 --> 00:04:20,880
we we then follow the api calls into the

123
00:04:20,880 --> 00:04:23,040
application using ida pro

124
00:04:23,040 --> 00:04:25,600
finally in linux we use a tool called

125
00:04:25,600 --> 00:04:28,320
dynamo rio to capture api calls to pulse

126
00:04:28,320 --> 00:04:30,240
audio would then follow the data into

127
00:04:30,240 --> 00:04:32,800
the applications using ida pro

128
00:04:32,800 --> 00:04:35,040
chromium on the other hand just

129
00:04:35,040 --> 00:04:36,479
required some source code editing in the

130
00:04:36,479 --> 00:04:38,000
right places which are detailed in our

131
00:04:38,000 --> 00:04:38,960
paper

132
00:04:38,960 --> 00:04:41,040
understanding how vc8s work is not a

133
00:04:41,040 --> 00:04:43,199
simple task in fact each one works

134
00:04:43,199 --> 00:04:45,600
differently so from our user study we

135
00:04:45,600 --> 00:04:47,199
examined a breadth of options that were

136
00:04:47,199 --> 00:04:48,800
the most popular

137
00:04:48,800 --> 00:04:49,840
we also need to examine their

138
00:04:49,840 --> 00:04:51,280
functionality over all the operating

139
00:04:51,280 --> 00:04:53,360
systems what we saw was three

140
00:04:53,360 --> 00:04:55,360
characterizable behaviors

141
00:04:55,360 --> 00:04:57,040
the first behavior was when an

142
00:04:57,040 --> 00:04:58,720
application was continuously sampling

143
00:04:58,720 --> 00:05:00,560
the audio buffer during the entire

144
00:05:00,560 --> 00:05:02,880
runtime this includes when the software

145
00:05:02,880 --> 00:05:04,720
mute was engaged

146
00:05:04,720 --> 00:05:06,560
this was rare but we saw that webex was

147
00:05:06,560 --> 00:05:09,520
continuously sampling at all times

148
00:05:09,520 --> 00:05:11,280
the second characterizable behavior was

149
00:05:11,280 --> 00:05:13,600
when the vca had access but chose not to

150
00:05:13,600 --> 00:05:14,639
use it

151
00:05:14,639 --> 00:05:16,560
this case was is accessible but not

152
00:05:16,560 --> 00:05:18,720
accessed we found this was the common

153
00:05:18,720 --> 00:05:21,120
case across all the operating systems

154
00:05:21,120 --> 00:05:24,080
most vcas who had access only used it

155
00:05:24,080 --> 00:05:26,240
when the software mute was disengaged

156
00:05:26,240 --> 00:05:29,199
vcas do have access to flags that notify

157
00:05:29,199 --> 00:05:31,280
them if there is access as in if the

158
00:05:31,280 --> 00:05:33,360
audio is silent or not these flags do

159
00:05:33,360 --> 00:05:36,000
not leak any raw audiobytes this case

160
00:05:36,000 --> 00:05:37,759
however does require that the user

161
00:05:37,759 --> 00:05:40,800
trusts the vca

162
00:05:40,800 --> 00:05:42,639
finally the last case is the software

163
00:05:42,639 --> 00:05:44,800
mute case this is when the user is given

164
00:05:44,800 --> 00:05:46,720
absolute control over which app is using

165
00:05:46,720 --> 00:05:47,840
the microphone

166
00:05:47,840 --> 00:05:49,520
web browsers offer this functionality

167
00:05:49,520 --> 00:05:51,520
when they allow for the user to software

168
00:05:51,520 --> 00:05:53,520
mute the vca in the same window as the

169
00:05:53,520 --> 00:05:55,520
application is running in

170
00:05:55,520 --> 00:05:57,039
windows and mac os have similar

171
00:05:57,039 --> 00:05:58,560
functions but the options to turn them

172
00:05:58,560 --> 00:05:59,919
off are located in different menus that

173
00:05:59,919 --> 00:06:01,840
are commonly foreign to normal users

174
00:06:01,840 --> 00:06:04,880
macos does force the user to allow the

175
00:06:04,880 --> 00:06:06,720
application access whereas windows does

176
00:06:06,720 --> 00:06:08,560
not the second you launch an app in

177
00:06:08,560 --> 00:06:10,000
windows they could have access to your

178
00:06:10,000 --> 00:06:11,680
microphone

179
00:06:11,680 --> 00:06:13,520
we want to explore the continuous case

180
00:06:13,520 --> 00:06:15,360
of webex and understand why the vca

181
00:06:15,360 --> 00:06:19,720
needs to always sample the audio buffer

182
00:06:20,160 --> 00:06:21,680
our experiment setup is laid out as

183
00:06:21,680 --> 00:06:24,479
follows we already have discussed how we

184
00:06:24,479 --> 00:06:25,919
gather information from the microphone

185
00:06:25,919 --> 00:06:27,919
to inside the device but to get the full

186
00:06:27,919 --> 00:06:29,919
picture we need to now know how we

187
00:06:29,919 --> 00:06:31,600
capture the network traffic

188
00:06:31,600 --> 00:06:33,520
to this we capture package using

189
00:06:33,520 --> 00:06:35,600
microsoft's network monitor

190
00:06:35,600 --> 00:06:37,440
to decrypt the packets we use the api

191
00:06:37,440 --> 00:06:39,199
monitor again to attach to both the

192
00:06:39,199 --> 00:06:41,280
ethernet apis and the network encryption

193
00:06:41,280 --> 00:06:42,479
apis

194
00:06:42,479 --> 00:06:44,000
we found that webex was passing their

195
00:06:44,000 --> 00:06:47,199
data as plain text before the api calls

196
00:06:47,199 --> 00:06:48,960
therefore we can get full unencrypted

197
00:06:48,960 --> 00:06:50,639
traffic leaving our machine

198
00:06:50,639 --> 00:06:52,639
most packets were nothing special but we

199
00:06:52,639 --> 00:06:54,479
saw something interesting with the data

200
00:06:54,479 --> 00:06:57,599
leaving with the telemetry packets

201
00:06:57,599 --> 00:06:59,039
we saw that even when muted these

202
00:06:59,039 --> 00:07:00,720
telemetry values were changing

203
00:07:00,720 --> 00:07:02,240
implicating that there was an audio

204
00:07:02,240 --> 00:07:04,400
derived data leaving the system while

205
00:07:04,400 --> 00:07:06,800
the user was muted which then brings us

206
00:07:06,800 --> 00:07:09,520
to the next question do these telemetry

207
00:07:09,520 --> 00:07:11,199
packets leak any private information

208
00:07:11,199 --> 00:07:13,120
about the user

209
00:07:13,120 --> 00:07:15,039
here we set up experiment to collect

210
00:07:15,039 --> 00:07:17,280
telemetry data and observe whether any

211
00:07:17,280 --> 00:07:19,039
private information can be leaked

212
00:07:19,039 --> 00:07:20,639
through this process

213
00:07:20,639 --> 00:07:23,120
our setup consists of two machines one

214
00:07:23,120 --> 00:07:25,360
machine was a normal user with a mutant

215
00:07:25,360 --> 00:07:27,599
microphone in our backs meeting which

216
00:07:27,599 --> 00:07:29,919
was hosted by the other machine was also

217
00:07:29,919 --> 00:07:30,960
muted

218
00:07:30,960 --> 00:07:33,199
the other machine plated hours long

219
00:07:33,199 --> 00:07:35,440
video consisting of single background

220
00:07:35,440 --> 00:07:36,880
activities

221
00:07:36,880 --> 00:07:38,800
these activities are selected from ultra

222
00:07:38,800 --> 00:07:41,280
study and each activity consists of more

223
00:07:41,280 --> 00:07:43,280
than one two videos

224
00:07:43,280 --> 00:07:45,520
we deployed our analysis scripts with

225
00:07:45,520 --> 00:07:47,759
the tools discussed earlier to collect

226
00:07:47,759 --> 00:07:50,240
live telemetry data as the meeting was

227
00:07:50,240 --> 00:07:52,800
ongoing in total we gathered more than

228
00:07:52,800 --> 00:07:56,160
180 hours of telemetry data points which

229
00:07:56,160 --> 00:07:58,879
were then fed into our class fifth fire

230
00:07:58,879 --> 00:08:00,479
training model

231
00:08:00,479 --> 00:08:02,479
we present the data visualization of

232
00:08:02,479 --> 00:08:04,800
three audio gain values captured from

233
00:08:04,800 --> 00:08:07,520
our head metadata in a figure here

234
00:08:07,520 --> 00:08:09,440
each color represents one background

235
00:08:09,440 --> 00:08:12,319
activity collected in our excitements it

236
00:08:12,319 --> 00:08:15,039
is clear that there are not noticeable

237
00:08:15,039 --> 00:08:17,120
clusters in other words we can

238
00:08:17,120 --> 00:08:19,360
fingerprint these background activities

239
00:08:19,360 --> 00:08:21,680
by the outgoing telemetry data

240
00:08:21,680 --> 00:08:23,919
based on the data we collected we train

241
00:08:23,919 --> 00:08:26,319
our three-layer cn classifier and

242
00:08:26,319 --> 00:08:29,280
achieved more than 77 percent accuracy

243
00:08:29,280 --> 00:08:33,360
on average in evaluation set one and 89

244
00:08:33,360 --> 00:08:36,559
accuracy for sat2

245
00:08:36,559 --> 00:08:38,719
in a short time since we made this work

246
00:08:38,719 --> 00:08:39,760
public

247
00:08:39,760 --> 00:08:42,640
it has exhibited a significant impact on

248
00:08:42,640 --> 00:08:45,600
research the public and developers

249
00:08:45,600 --> 00:08:48,399
as a result of its work we expect more

250
00:08:48,399 --> 00:08:50,240
software and hardware-based control

251
00:08:50,240 --> 00:08:52,640
mechanisms to provide users with

252
00:08:52,640 --> 00:08:54,720
assurance about the behavior of

253
00:08:54,720 --> 00:08:57,360
microphones in commercial platforms

254
00:08:57,360 --> 00:09:00,320
on a public side this work receives

255
00:09:00,320 --> 00:09:02,320
significant media attention through a

256
00:09:02,320 --> 00:09:04,959
platform like the bbc independent and

257
00:09:04,959 --> 00:09:06,320
the computer world

258
00:09:06,320 --> 00:09:07,839
further this work has generated

259
00:09:07,839 --> 00:09:09,920
extensive online discussions on reddit

260
00:09:09,920 --> 00:09:12,080
and other platforms such as senior or

261
00:09:12,080 --> 00:09:15,519
security and hacker news

262
00:09:16,080 --> 00:09:18,720
after our investigation we also filed a

263
00:09:18,720 --> 00:09:21,200
responsible disclosure to cisco in

264
00:09:21,200 --> 00:09:23,200
response to all this closure

265
00:09:23,200 --> 00:09:25,680
cisco released an official blog post

266
00:09:25,680 --> 00:09:27,680
acknowledge our results and cease in the

267
00:09:27,680 --> 00:09:28,959
collection of audio telemetry

268
00:09:28,959 --> 00:09:30,000
information

269
00:09:30,000 --> 00:09:32,560
a statement described on this site

270
00:09:32,560 --> 00:09:34,640
was published a few days after release

271
00:09:34,640 --> 00:09:36,959
of our preprint paper

272
00:09:36,959 --> 00:09:39,519
in conclusion we first presented user

273
00:09:39,519 --> 00:09:42,080
study to understand the vca user's

274
00:09:42,080 --> 00:09:43,440
expectations

275
00:09:43,440 --> 00:09:46,000
we traced vce apps and found webex

276
00:09:46,000 --> 00:09:48,080
sending out telemetry data which may

277
00:09:48,080 --> 00:09:51,279
undermine user's privacy however our

278
00:09:51,279 --> 00:09:53,519
method cannot generalize to some apps

279
00:09:53,519 --> 00:09:55,600
due to their encryption before sending

280
00:09:55,600 --> 00:09:57,519
to os socket api

281
00:09:57,519 --> 00:10:00,000
also the os level indicator cannot

282
00:10:00,000 --> 00:10:02,399
correctly reflect whether the vca is

283
00:10:02,399 --> 00:10:05,040
actually actively reading the data from

284
00:10:05,040 --> 00:10:06,160
the microphone

285
00:10:06,160 --> 00:10:08,320
meanwhile priority policies are not

286
00:10:08,320 --> 00:10:10,959
explicit about data collection when user

287
00:10:10,959 --> 00:10:12,720
applies the mute button

288
00:10:12,720 --> 00:10:14,399
we think there should be more native

289
00:10:14,399 --> 00:10:16,640
support for mute button similar to

290
00:10:16,640 --> 00:10:17,680
cameras

291
00:10:17,680 --> 00:10:20,719
thank you

