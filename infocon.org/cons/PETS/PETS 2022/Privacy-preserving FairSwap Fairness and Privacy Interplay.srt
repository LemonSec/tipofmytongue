1
00:00:00,320 --> 00:00:02,159
hello my name is preston havey and i'm

2
00:00:02,159 --> 00:00:04,480
here with sabida abhije and we're phd

3
00:00:04,480 --> 00:00:06,399
students who work with rihanna

4
00:00:06,399 --> 00:00:08,080
safavinani on a

5
00:00:08,080 --> 00:00:10,080
project called privacy preserving fair

6
00:00:10,080 --> 00:00:12,639
spot fairness and privacy interplay done

7
00:00:12,639 --> 00:00:15,280
at the university of calgary in canada

8
00:00:15,280 --> 00:00:16,720
to begin we'll introduce the fair

9
00:00:16,720 --> 00:00:18,480
exchange problem so imagine we have a

10
00:00:18,480 --> 00:00:21,199
seller who has a file that they would

11
00:00:21,199 --> 00:00:23,439
like to sell for a certain price

12
00:00:23,439 --> 00:00:25,039
then we have a buyer who's willing to

13
00:00:25,039 --> 00:00:26,720
pay for the file but only if it

14
00:00:26,720 --> 00:00:29,119
satisfies their preferences

15
00:00:29,119 --> 00:00:30,640
when the buyer and seller communicate

16
00:00:30,640 --> 00:00:32,320
over an open network both parties need

17
00:00:32,320 --> 00:00:34,320
to trust each the other to follow

18
00:00:34,320 --> 00:00:36,079
through on their half of the bargain

19
00:00:36,079 --> 00:00:37,760
which is not a realistic assumption in

20
00:00:37,760 --> 00:00:39,680
many cases this motivates the

21
00:00:39,680 --> 00:00:41,760
requirement for a fairness property in

22
00:00:41,760 --> 00:00:43,280
the exchange where both parties are

23
00:00:43,280 --> 00:00:45,200
guaranteed that they either receive

24
00:00:45,200 --> 00:00:47,120
exactly what they ask for or neither of

25
00:00:47,120 --> 00:00:48,960
them loses or gains anything from the

26
00:00:48,960 --> 00:00:51,280
exchange in many exchange scenarios

27
00:00:51,280 --> 00:00:53,199
fairness has been proven to be

28
00:00:53,199 --> 00:00:55,440
impossible to achieve

29
00:00:55,440 --> 00:00:57,360
we can ensure fairness though with the

30
00:00:57,360 --> 00:00:59,280
help of a trusted third party referred

31
00:00:59,280 --> 00:01:01,039
to as a ttp

32
00:01:01,039 --> 00:01:02,879
the idea is that both parties send their

33
00:01:02,879 --> 00:01:04,799
half of the exchange to the ttp who

34
00:01:04,799 --> 00:01:06,080
checks that the conditions of the

35
00:01:06,080 --> 00:01:08,080
exchange are met if everything checks

36
00:01:08,080 --> 00:01:10,080
out then the ttp can send the file to

37
00:01:10,080 --> 00:01:12,799
buyer and payment to seller or if some

38
00:01:12,799 --> 00:01:14,080
conditions of the exchange are not met

39
00:01:14,080 --> 00:01:15,920
the ttp can ensure buyer doesn't get the

40
00:01:15,920 --> 00:01:18,400
file and seller doesn't get payment

41
00:01:18,400 --> 00:01:19,680
next we'll just outline the rest of the

42
00:01:19,680 --> 00:01:21,200
presentation so first we'll talk about

43
00:01:21,200 --> 00:01:23,520
smart contract based fare exchange and

44
00:01:23,520 --> 00:01:24,640
the original protocol fair spot

45
00:01:24,640 --> 00:01:26,159
ferrospot

46
00:01:26,159 --> 00:01:27,759
we'll talk about the information leakage

47
00:01:27,759 --> 00:01:29,360
we found in ferroswap and its effect on

48
00:01:29,360 --> 00:01:31,520
fairness then we'll discuss our approach

49
00:01:31,520 --> 00:01:33,680
to dealing with the information leakage

50
00:01:33,680 --> 00:01:35,759
and present our protocol for private

51
00:01:35,759 --> 00:01:37,360
fare swap then we discuss our

52
00:01:37,360 --> 00:01:39,200
implementation results and then

53
00:01:39,200 --> 00:01:41,439
conclusion and future work

54
00:01:41,439 --> 00:01:44,000
um the authors of fair swap protocol

55
00:01:44,000 --> 00:01:46,000
point out that finding a truly trusted

56
00:01:46,000 --> 00:01:48,560
third party is very difficult

57
00:01:48,560 --> 00:01:50,000
blockchains are readily available

58
00:01:50,000 --> 00:01:51,520
decentralized networks that provide

59
00:01:51,520 --> 00:01:53,200
trusted state information and program

60
00:01:53,200 --> 00:01:55,119
execution they can maintain a trusted

61
00:01:55,119 --> 00:01:57,600
ledger transactions but also a virtual

62
00:01:57,600 --> 00:01:59,439
machine inside which programs called

63
00:01:59,439 --> 00:02:01,360
smart contracts can be executed in a

64
00:02:01,360 --> 00:02:03,680
transparent and trusted manner this lets

65
00:02:03,680 --> 00:02:06,159
us encode the preference checking and

66
00:02:06,159 --> 00:02:07,680
the currency transfer functionality of

67
00:02:07,680 --> 00:02:10,560
the ttp as a smart contract that can be

68
00:02:10,560 --> 00:02:12,480
compiled and deployed to the blockchain

69
00:02:12,480 --> 00:02:14,080
now buyer and seller can conduct their

70
00:02:14,080 --> 00:02:15,599
exchange to the trusted blockchain

71
00:02:15,599 --> 00:02:17,120
network

72
00:02:17,120 --> 00:02:18,640
however blockchains have serious

73
00:02:18,640 --> 00:02:20,239
limitations when it comes to storage and

74
00:02:20,239 --> 00:02:22,480
computational capacity fair swap's

75
00:02:22,480 --> 00:02:24,800
approach to perform the previous

76
00:02:24,800 --> 00:02:27,360
approach is to perform the item transfer

77
00:02:27,360 --> 00:02:28,800
and preference checking off the

78
00:02:28,800 --> 00:02:30,480
blockchain network and then use the

79
00:02:30,480 --> 00:02:32,560
smart contract to verify and settle any

80
00:02:32,560 --> 00:02:34,800
disputes if one occurs

81
00:02:34,800 --> 00:02:36,959
the virus preferences are checked with a

82
00:02:36,959 --> 00:02:39,360
circuit uh the file is fed as input to

83
00:02:39,360 --> 00:02:40,879
the circuit and the circuit outputs one

84
00:02:40,879 --> 00:02:43,280
if the properties are satisfied and zero

85
00:02:43,280 --> 00:02:44,959
otherwise if there is a problem the

86
00:02:44,959 --> 00:02:46,959
buyer can complain with something called

87
00:02:46,959 --> 00:02:49,120
a proof of misbehavior

88
00:02:49,120 --> 00:02:52,160
in fair swap um we have three phases the

89
00:02:52,160 --> 00:02:53,920
initialization phase sees that the

90
00:02:53,920 --> 00:02:56,080
seller runs the property checking

91
00:02:56,080 --> 00:02:58,560
circuit on their digital item and

92
00:02:58,560 --> 00:03:00,319
encrypts all of the steps of this

93
00:03:00,319 --> 00:03:02,239
circuit computation they then store the

94
00:03:02,239 --> 00:03:03,760
commitments to the item the circuit

95
00:03:03,760 --> 00:03:05,760
execution and encryption key to the

96
00:03:05,760 --> 00:03:08,080
smart contract the buyer's funds are

97
00:03:08,080 --> 00:03:10,080
also locked by the contract then the

98
00:03:10,080 --> 00:03:11,760
seller sends the encrypted item and

99
00:03:11,760 --> 00:03:14,080
circuit execution to the buyer in the

100
00:03:14,080 --> 00:03:16,319
reveal stage the seller reveals the

101
00:03:16,319 --> 00:03:18,080
encryption key allowing the buyer to

102
00:03:18,080 --> 00:03:19,519
decrypt and verify the circuit

103
00:03:19,519 --> 00:03:22,000
computation in the payoff stage if no

104
00:03:22,000 --> 00:03:23,519
complaint is received by the smart

105
00:03:23,519 --> 00:03:25,280
contract then the smart contract

106
00:03:25,280 --> 00:03:27,519
releases the coins back to the seller

107
00:03:27,519 --> 00:03:30,799
if a plm is

108
00:03:30,799 --> 00:03:32,959
received and verified then the contract

109
00:03:32,959 --> 00:03:33,920
um

110
00:03:33,920 --> 00:03:35,360
refunds the

111
00:03:35,360 --> 00:03:36,239
uh

112
00:03:36,239 --> 00:03:38,720
coins to the buyer

113
00:03:38,720 --> 00:03:40,720
uh it might be the case that the the

114
00:03:40,720 --> 00:03:42,959
seller forces a gate to misbehave

115
00:03:42,959 --> 00:03:44,879
causing the circuit to output a one on

116
00:03:44,879 --> 00:03:46,959
an incorrect file in this case the buyer

117
00:03:46,959 --> 00:03:48,959
can find the misbehaving gate and

118
00:03:48,959 --> 00:03:51,599
construct the proof of misbehavior

119
00:03:51,599 --> 00:03:53,680
this includes the gate operation the

120
00:03:53,680 --> 00:03:55,519
inputs to the gate and the output to the

121
00:03:55,519 --> 00:03:57,519
gate along with merkle proofs that show

122
00:03:57,519 --> 00:04:00,080
that this information is related to that

123
00:04:00,080 --> 00:04:01,599
that was committed

124
00:04:01,599 --> 00:04:03,280
by the seller in the initialization

125
00:04:03,280 --> 00:04:08,159
stage now i'll pass it on to sebina

126
00:04:09,439 --> 00:04:11,599
hello my name is sepidan i will continue

127
00:04:11,599 --> 00:04:13,120
the presentation

128
00:04:13,120 --> 00:04:15,360
we observe that proof of misbehavior or

129
00:04:15,360 --> 00:04:17,199
palm insurance which is created by the

130
00:04:17,199 --> 00:04:19,358
buyer in the dispute resolution stage

131
00:04:19,358 --> 00:04:21,759
licks the inputs and output of one gate

132
00:04:21,759 --> 00:04:24,240
to the smart contract and it leads to

133
00:04:24,240 --> 00:04:25,759
privacy breaches

134
00:04:25,759 --> 00:04:27,440
the question is how important this

135
00:04:27,440 --> 00:04:29,440
leakage can be and whether there is any

136
00:04:29,440 --> 00:04:31,199
issue with the fairness guarantee of the

137
00:04:31,199 --> 00:04:32,400
protocol

138
00:04:32,400 --> 00:04:34,400
let's consider that the corrupted gate

139
00:04:34,400 --> 00:04:36,880
is in the input layer then you see proof

140
00:04:36,880 --> 00:04:39,040
of misbehavior leaks the input data

141
00:04:39,040 --> 00:04:41,040
corresponding to that gate to the public

142
00:04:41,040 --> 00:04:44,160
highs if the predicate is represented by

143
00:04:44,160 --> 00:04:46,240
boolean circuits the leakage is as small

144
00:04:46,240 --> 00:04:48,240
as two bits but if the predicate is

145
00:04:48,240 --> 00:04:50,560
represented by an arithmetic circuit

146
00:04:50,560 --> 00:04:53,040
then the leakage can be huge as it is to

147
00:04:53,040 --> 00:04:54,800
gamma where gamma depends on the

148
00:04:54,800 --> 00:04:57,440
security parameter

149
00:04:57,440 --> 00:04:59,280
when the confidentiality of the input

150
00:04:59,280 --> 00:05:00,960
data is necessary then proof of

151
00:05:00,960 --> 00:05:03,120
misbehavior creates problem

152
00:05:03,120 --> 00:05:04,880
moreover this leakage can affect

153
00:05:04,880 --> 00:05:06,800
fairness for example in the case that

154
00:05:06,800 --> 00:05:08,800
the item is associated with the buyer's

155
00:05:08,800 --> 00:05:11,440
personal information a malicious seller

156
00:05:11,440 --> 00:05:13,360
can send a buyer an item which doesn't

157
00:05:13,360 --> 00:05:16,080
satisfy the required predicate for

158
00:05:16,080 --> 00:05:18,320
example a file is a lower quality than

159
00:05:18,320 --> 00:05:20,960
expected if buyer intends to complain

160
00:05:20,960 --> 00:05:23,199
about the file her personal

161
00:05:23,199 --> 00:05:25,840
information will be leaked

162
00:05:25,840 --> 00:05:27,840
and this leakage can be used to link the

163
00:05:27,840 --> 00:05:29,919
item content to the buyer

164
00:05:29,919 --> 00:05:31,840
this can put the buyer in a dilemma

165
00:05:31,840 --> 00:05:33,199
whether she has to complain and

166
00:05:33,199 --> 00:05:35,360
sacrifice her privacy or she has to

167
00:05:35,360 --> 00:05:37,440
accept the wrong file and sacrifice the

168
00:05:37,440 --> 00:05:38,960
fairness

169
00:05:38,960 --> 00:05:40,960
also a malicious buyer can put the

170
00:05:40,960 --> 00:05:42,960
seller in a position that he accepts a

171
00:05:42,960 --> 00:05:45,120
lower price only to prevent the partial

172
00:05:45,120 --> 00:05:48,000
leakage of data to the public

173
00:05:48,000 --> 00:05:49,840
as this leakage can affect fairness

174
00:05:49,840 --> 00:05:51,680
behind the smart contract privacy as

175
00:05:51,680 --> 00:05:54,000
another requirement for a smart contract

176
00:05:54,000 --> 00:05:56,560
based for exchange

177
00:05:56,560 --> 00:05:58,479
this means that the smart contract with

178
00:05:58,479 --> 00:06:00,639
a non-exchanging party only learns

179
00:06:00,639 --> 00:06:02,479
negligible information about the

180
00:06:02,479 --> 00:06:03,759
exchange

181
00:06:03,759 --> 00:06:05,840
to provide this property for first what

182
00:06:05,840 --> 00:06:08,000
we can consider different solutions for

183
00:06:08,000 --> 00:06:09,680
example one simple solution is to

184
00:06:09,680 --> 00:06:12,160
restrict the predicate to be represented

185
00:06:12,160 --> 00:06:14,479
by boolean circuits just to limit the

186
00:06:14,479 --> 00:06:16,639
leakage but this is not practical as

187
00:06:16,639 --> 00:06:18,720
some predicates cannot be efficiently

188
00:06:18,720 --> 00:06:21,440
implemented as boolean circuits

189
00:06:21,440 --> 00:06:23,520
another solution is using homomorphic

190
00:06:23,520 --> 00:06:25,199
encryption for the item and run the

191
00:06:25,199 --> 00:06:28,000
predicate on the encrypted file

192
00:06:28,000 --> 00:06:30,240
however this incurs a huge computation

193
00:06:30,240 --> 00:06:32,960
cost on the smart contract in the seller

194
00:06:32,960 --> 00:06:34,720
the approach that we take is motivated

195
00:06:34,720 --> 00:06:36,800
by the randomized circuits with problems

196
00:06:36,800 --> 00:06:38,720
security in the context of side channel

197
00:06:38,720 --> 00:06:39,919
protection

198
00:06:39,919 --> 00:06:41,919
the idea of randomized circuit was

199
00:06:41,919 --> 00:06:44,800
proposed by ishaital in 2003 and their

200
00:06:44,800 --> 00:06:46,960
solution protects the boolean circuits

201
00:06:46,960 --> 00:06:49,039
against a probing attacker who can

202
00:06:49,039 --> 00:06:51,520
observe l wires of the circuit

203
00:06:51,520 --> 00:06:53,440
l is known in text

204
00:06:53,440 --> 00:06:55,199
the solution expands the circuit by

205
00:06:55,199 --> 00:06:57,680
using secret sharing each wire in the

206
00:06:57,680 --> 00:07:00,240
circuit is transformed to two l plus one

207
00:07:00,240 --> 00:07:02,720
wires where each wire carries a random

208
00:07:02,720 --> 00:07:05,360
value and probing l wire cannot take any

209
00:07:05,360 --> 00:07:09,039
information to the probing adversary

210
00:07:09,039 --> 00:07:11,039
in first what the smart contract always

211
00:07:11,039 --> 00:07:13,440
see the informational one gate three

212
00:07:13,440 --> 00:07:16,560
wires so we can model the adversary as a

213
00:07:16,560 --> 00:07:18,800
probing attacker and use secret sharing

214
00:07:18,800 --> 00:07:21,759
as a solution

215
00:07:22,160 --> 00:07:24,080
for practicality we extended the

216
00:07:24,080 --> 00:07:26,000
randomized circuit to the arithmetic

217
00:07:26,000 --> 00:07:28,720
circuit we set l to be one the reason is

218
00:07:28,720 --> 00:07:30,800
that the input and output wires of one

219
00:07:30,800 --> 00:07:32,639
gate are not independent and we showed

220
00:07:32,639 --> 00:07:35,039
that it is enough to set lgb one

221
00:07:35,039 --> 00:07:37,039
note that when the wires are expanded to

222
00:07:37,039 --> 00:07:40,400
two l plus one uh secret shares we need

223
00:07:40,400 --> 00:07:42,319
to replace the gates with the gadgets

224
00:07:42,319 --> 00:07:43,919
where each gadget includes several

225
00:07:43,919 --> 00:07:46,240
arithmetic gates by itself

226
00:07:46,240 --> 00:07:47,919
this is because we have to make sure the

227
00:07:47,919 --> 00:07:49,680
gadget will generate the secret shares

228
00:07:49,680 --> 00:07:51,440
of the original output when we give

229
00:07:51,440 --> 00:07:53,520
secret shares of the input and the

230
00:07:53,520 --> 00:07:55,280
leakage of l warriors correspond to a

231
00:07:55,280 --> 00:07:57,039
negligible information about the

232
00:07:57,039 --> 00:07:59,039
original values that are carried by

233
00:07:59,039 --> 00:08:00,879
wires

234
00:08:00,879 --> 00:08:03,520
so for the multiplication gates it is

235
00:08:03,520 --> 00:08:06,560
necessary to have random bits which take

236
00:08:06,560 --> 00:08:08,960
random values

237
00:08:08,960 --> 00:08:10,720
to adopt first work with randomized

238
00:08:10,720 --> 00:08:12,479
circuit approach we need to modify the

239
00:08:12,479 --> 00:08:14,479
protocol at 12 stages

240
00:08:14,479 --> 00:08:16,639
in the initialization stage the seller

241
00:08:16,639 --> 00:08:18,400
and the boy are engaged in choosing a

242
00:08:18,400 --> 00:08:20,240
random seed first to the random number

243
00:08:20,240 --> 00:08:21,440
generator

244
00:08:21,440 --> 00:08:23,360
from this seed the seller generates all

245
00:08:23,360 --> 00:08:25,360
the required randomness and expands the

246
00:08:25,360 --> 00:08:27,360
circuit using secret sharing and then he

247
00:08:27,360 --> 00:08:28,639
replaces the gates with their

248
00:08:28,639 --> 00:08:31,280
corresponding gadgets

249
00:08:31,280 --> 00:08:33,279
seller also commits to the transform

250
00:08:33,279 --> 00:08:35,919
circuit and used randomness in the smart

251
00:08:35,919 --> 00:08:38,478
contract

252
00:08:38,559 --> 00:08:40,559
in the dispute resolution stage the

253
00:08:40,559 --> 00:08:42,719
buyer generates the proof of misbehavior

254
00:08:42,719 --> 00:08:45,200
on the expanded circuit

255
00:08:45,200 --> 00:08:47,040
for efficiency buyer can run the

256
00:08:47,040 --> 00:08:49,120
original predicate on the item but after

257
00:08:49,120 --> 00:08:51,120
the corrupted gate is detected she must

258
00:08:51,120 --> 00:08:52,560
generate and send the proof of

259
00:08:52,560 --> 00:08:55,200
misbehavior on the randomized gate

260
00:08:55,200 --> 00:08:56,880
a smart contract can verify the

261
00:08:56,880 --> 00:08:58,720
correctness of proof of misbehavior and

262
00:08:58,720 --> 00:09:01,200
detect misbehaving party by running the

263
00:09:01,200 --> 00:09:03,440
computation of one gate with random

264
00:09:03,440 --> 00:09:05,760
inputs

265
00:09:05,760 --> 00:09:08,160
we use generalized uc framework to show

266
00:09:08,160 --> 00:09:10,720
the security and privacy of our scheme

267
00:09:10,720 --> 00:09:12,320
we showed that the buyer furnace is

268
00:09:12,320 --> 00:09:14,560
satisfied meaning that if buyer is

269
00:09:14,560 --> 00:09:16,320
honest either buyer receives correct

270
00:09:16,320 --> 00:09:18,720
item or doesn't lose any coins also

271
00:09:18,720 --> 00:09:21,040
seller farmers is satisfied meaning that

272
00:09:21,040 --> 00:09:22,880
if the seller is on us either the seller

273
00:09:22,880 --> 00:09:24,720
receives the coins or doesn't reveal any

274
00:09:24,720 --> 00:09:27,519
information about the item to the buyer

275
00:09:27,519 --> 00:09:29,600
to show a smart contract privacy in two

276
00:09:29,600 --> 00:09:32,000
cases when there is no disputes and then

277
00:09:32,000 --> 00:09:34,000
there is one malicious party

278
00:09:34,000 --> 00:09:36,080
and proof of misbehavior is generated

279
00:09:36,080 --> 00:09:38,640
and published to the smart contract

280
00:09:38,640 --> 00:09:40,720
we use the concept of non-monolithic

281
00:09:40,720 --> 00:09:42,959
adversaries that was introduced for a

282
00:09:42,959 --> 00:09:46,240
separated mpc by camara at all

283
00:09:46,240 --> 00:09:48,399
we modeled the smart contract as a semi

284
00:09:48,399 --> 00:09:50,399
honest and independent entity in the

285
00:09:50,399 --> 00:09:52,160
protocol rather than an ideal

286
00:09:52,160 --> 00:09:54,240
functionality and showed that the

287
00:09:54,240 --> 00:09:56,399
leakage to the smart contract is

288
00:09:56,399 --> 00:09:58,880
negligible

289
00:09:58,880 --> 00:10:00,320
to compare the

290
00:10:00,320 --> 00:10:02,079
on blockchain and off blockchain

291
00:10:02,079 --> 00:10:04,160
computation between fair swap and

292
00:10:04,160 --> 00:10:05,839
private fair swap we implemented the

293
00:10:05,839 --> 00:10:08,160
relevant parts of both protocols we

294
00:10:08,160 --> 00:10:09,839
wrote the smart contract and solidity

295
00:10:09,839 --> 00:10:11,839
and deployed it to the ethereum an

296
00:10:11,839 --> 00:10:13,680
ethereum test net the circuit

297
00:10:13,680 --> 00:10:15,440
randomization and proof of misbehavior

298
00:10:15,440 --> 00:10:17,360
construction was written in python we

299
00:10:17,360 --> 00:10:19,680
executed both protocols with a utf-8

300
00:10:19,680 --> 00:10:21,920
encoded version of the raven by edgar

301
00:10:21,920 --> 00:10:23,200
allen poe

302
00:10:23,200 --> 00:10:25,440
for three different circuit sizes we

303
00:10:25,440 --> 00:10:27,040
found that circuits and private fire

304
00:10:27,040 --> 00:10:29,279
swap were 10 times bigger than in the

305
00:10:29,279 --> 00:10:31,200
original fair swap and there were only

306
00:10:31,200 --> 00:10:33,120
there was only a slight increase to the

307
00:10:33,120 --> 00:10:34,640
work done by the smart contract and

308
00:10:34,640 --> 00:10:36,160
private fair swap compared to the

309
00:10:36,160 --> 00:10:37,920
original fair saw

310
00:10:37,920 --> 00:10:41,120
uh to conclude uh we talked about uh our

311
00:10:41,120 --> 00:10:43,519
observations of leakage and the proof of

312
00:10:43,519 --> 00:10:46,640
misbehavior we also talked about privacy

313
00:10:46,640 --> 00:10:48,320
of a fair exchange in the smart contract

314
00:10:48,320 --> 00:10:50,079
setting being affected by

315
00:10:50,079 --> 00:10:51,680
um

316
00:10:51,680 --> 00:10:53,839
having its fairness affected and we

317
00:10:53,839 --> 00:10:56,399
introduced our privacy preserving fair

318
00:10:56,399 --> 00:10:59,040
swap using circuit randomization

319
00:10:59,040 --> 00:11:00,560
for future work we'd like to work at

320
00:11:00,560 --> 00:11:02,240
optimizing the private fair stock

321
00:11:02,240 --> 00:11:04,560
protocol uh one of these ways could be

322
00:11:04,560 --> 00:11:07,200
to avoid the full description decryption

323
00:11:07,200 --> 00:11:09,519
and verification of every value in the

324
00:11:09,519 --> 00:11:11,760
encrypted circuit execution and we can

325
00:11:11,760 --> 00:11:13,839
also optimize the circuit description

326
00:11:13,839 --> 00:11:14,720
where

327
00:11:14,720 --> 00:11:15,920
we could

328
00:11:15,920 --> 00:11:17,600
have private circuits that include

329
00:11:17,600 --> 00:11:21,279
higher level functions for the gates uh

330
00:11:21,279 --> 00:11:23,120
thank you we'll be happy to take any

331
00:11:23,120 --> 00:11:26,519
questions now

