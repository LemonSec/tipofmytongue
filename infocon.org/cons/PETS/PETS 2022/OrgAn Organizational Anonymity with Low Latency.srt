1
00:00:00,799 --> 00:00:02,399
hello everyone

2
00:00:02,399 --> 00:00:04,560
i am going to present a protocol organ

3
00:00:04,560 --> 00:00:06,399
which can provide anonymity for an

4
00:00:06,399 --> 00:00:08,559
organizational network

5
00:00:08,559 --> 00:00:10,480
this is a joint work with easter vivek

6
00:00:10,480 --> 00:00:13,840
mangapudi and aniket kate

7
00:00:14,559 --> 00:00:17,279
suppose jim pam ran and andy are part of

8
00:00:17,279 --> 00:00:18,960
a local air network

9
00:00:18,960 --> 00:00:21,680
and they want to access the internet

10
00:00:21,680 --> 00:00:23,439
through the relay or gateway of the

11
00:00:23,439 --> 00:00:25,359
local area network or some local

12
00:00:25,359 --> 00:00:27,920
services

13
00:00:28,160 --> 00:00:30,960
and they don't want to reveal uh

14
00:00:30,960 --> 00:00:32,399
to anyone

15
00:00:32,399 --> 00:00:34,640
who is accessing what

16
00:00:34,640 --> 00:00:36,239
for this talk we'll focus on the

17
00:00:36,239 --> 00:00:38,879
outgoing traffic so we'll protect uh the

18
00:00:38,879 --> 00:00:41,200
anonymity of the senders uh we'll focus

19
00:00:41,200 --> 00:00:44,600
on send anonymity

20
00:00:45,120 --> 00:00:48,000
however for anonymity they don't want to

21
00:00:48,000 --> 00:00:50,719
rely on the relay or the gateway because

22
00:00:50,719 --> 00:00:51,920
all the traffic going through the relay

23
00:00:51,920 --> 00:00:53,600
or gateway can be observed by the office

24
00:00:53,600 --> 00:00:56,000
manager mike

25
00:00:56,000 --> 00:00:58,239
also some of the uh

26
00:00:58,239 --> 00:01:00,879
users might be instead of mic and that's

27
00:01:00,879 --> 00:01:02,960
why they don't want to rely on each

28
00:01:02,960 --> 00:01:05,199
other for anonymity and that's why we

29
00:01:05,199 --> 00:01:08,560
want a non-interactive protocol

30
00:01:08,560 --> 00:01:10,400
additionally we want to achieve low

31
00:01:10,400 --> 00:01:12,479
latency to support

32
00:01:12,479 --> 00:01:15,439
many latency sensitive applications

33
00:01:15,439 --> 00:01:18,639
so how do you achieve that

34
00:01:19,520 --> 00:01:20,560
you can

35
00:01:20,560 --> 00:01:22,560
suggest to use

36
00:01:22,560 --> 00:01:24,000
tor or mix

37
00:01:24,000 --> 00:01:26,560
however store or mix nets will read out

38
00:01:26,560 --> 00:01:28,960
the traffic through multiple

39
00:01:28,960 --> 00:01:31,840
servers spread across the globe

40
00:01:31,840 --> 00:01:33,840
and that might introduce a lot of

41
00:01:33,840 --> 00:01:35,920
overhead as well as

42
00:01:35,920 --> 00:01:39,200
even for accessing local services

43
00:01:39,200 --> 00:01:40,880
the traffic will be rerouted through the

44
00:01:40,880 --> 00:01:43,840
internet that might

45
00:01:43,840 --> 00:01:47,759
expose the system to external attacks

46
00:01:47,759 --> 00:01:50,880
so ideally we want solution that can be

47
00:01:50,880 --> 00:01:53,520
deployed within the local area network

48
00:01:53,520 --> 00:01:54,799
and for that

49
00:01:54,799 --> 00:01:58,719
dc net seems to be a good candidate

50
00:01:58,719 --> 00:02:00,799
let's see if existing dc nets can solve

51
00:02:00,799 --> 00:02:03,360
this problem

52
00:02:03,520 --> 00:02:06,240
there are p2p units where users interact

53
00:02:06,240 --> 00:02:10,000
with each other to achieve anonymity

54
00:02:10,000 --> 00:02:12,160
this interaction can introduce a lot of

55
00:02:12,160 --> 00:02:13,200
overhead

56
00:02:13,200 --> 00:02:13,920
and

57
00:02:13,920 --> 00:02:16,160
so the protocol can be slow as well as

58
00:02:16,160 --> 00:02:18,640
you need to interact with each other

59
00:02:18,640 --> 00:02:20,160
that's why this doesn't seem to be a

60
00:02:20,160 --> 00:02:22,080
good solution

61
00:02:22,080 --> 00:02:24,400
there are solutions where interactions

62
00:02:24,400 --> 00:02:26,720
among the users are replaced uh

63
00:02:26,720 --> 00:02:28,800
by interactions among several

64
00:02:28,800 --> 00:02:31,200
multi-party computation servers however

65
00:02:31,200 --> 00:02:32,640
mpc itself

66
00:02:32,640 --> 00:02:34,400
adds a lot of overhead

67
00:02:34,400 --> 00:02:35,200
and

68
00:02:35,200 --> 00:02:36,800
that also doesn't seem to be a good

69
00:02:36,800 --> 00:02:39,120
solution

70
00:02:39,120 --> 00:02:40,560
however

71
00:02:40,560 --> 00:02:42,800
a prior work prefi

72
00:02:42,800 --> 00:02:44,640
showed that

73
00:02:44,640 --> 00:02:46,879
you can involve the relay or the gateway

74
00:02:46,879 --> 00:02:49,280
in the protocol itself

75
00:02:49,280 --> 00:02:51,040
and eliminate the communication among

76
00:02:51,040 --> 00:02:52,800
the users

77
00:02:52,800 --> 00:02:54,959
but you need the help of a few setup

78
00:02:54,959 --> 00:02:56,080
servers

79
00:02:56,080 --> 00:02:59,360
the setup server help in the setup phase

80
00:02:59,360 --> 00:03:03,280
and then the users can run the protocol

81
00:03:03,599 --> 00:03:05,360
as long as

82
00:03:05,360 --> 00:03:07,440
every user trusts at least one of the

83
00:03:07,440 --> 00:03:08,959
setup servers

84
00:03:08,959 --> 00:03:12,239
you can guarantee anonymity

85
00:03:12,400 --> 00:03:15,840
in our design we require that the setup

86
00:03:15,840 --> 00:03:19,280
servers do not take part at all

87
00:03:19,280 --> 00:03:21,200
after the setup phase is done

88
00:03:21,200 --> 00:03:22,720
and this is a key difference between

89
00:03:22,720 --> 00:03:25,360
prefi and organ because in prefi the

90
00:03:25,360 --> 00:03:27,040
setup server still communicates with the

91
00:03:27,040 --> 00:03:30,720
relay during the anonymization phase

92
00:03:31,040 --> 00:03:33,200
so let's see in general how these setup

93
00:03:33,200 --> 00:03:36,000
servers can help

94
00:03:38,239 --> 00:03:41,519
the setup servers can help the users

95
00:03:41,519 --> 00:03:45,280
agree on shared secrets among themselves

96
00:03:45,280 --> 00:03:47,040
we have the local area network we have

97
00:03:47,040 --> 00:03:48,879
the setup servers

98
00:03:48,879 --> 00:03:51,920
setup server j splits the value s where

99
00:03:51,920 --> 00:03:54,239
s is publicly known

100
00:03:54,239 --> 00:03:58,040
to uh multiple values r1

101
00:03:58,040 --> 00:03:59,680
jr2jr3jr4j because there are four

102
00:03:59,680 --> 00:04:01,200
clients here

103
00:04:01,200 --> 00:04:03,040
that's four values

104
00:04:03,040 --> 00:04:05,599
and stairs those values with each of the

105
00:04:05,599 --> 00:04:06,879
clients

106
00:04:06,879 --> 00:04:10,000
using a secure channel

107
00:04:11,280 --> 00:04:14,000
after the client receives these secret

108
00:04:14,000 --> 00:04:16,000
values from each of the setup servers

109
00:04:16,000 --> 00:04:16,959
that

110
00:04:16,959 --> 00:04:19,120
each client can add them

111
00:04:19,120 --> 00:04:21,519
and derive his own

112
00:04:21,519 --> 00:04:23,919
secret

113
00:04:24,240 --> 00:04:26,560
what they really knows is that some of

114
00:04:26,560 --> 00:04:28,960
the uh some of the secrets of all the

115
00:04:28,960 --> 00:04:30,880
clients is k times s

116
00:04:30,880 --> 00:04:32,880
where k is the number of servers and s

117
00:04:32,880 --> 00:04:35,040
is the publicly known value that is

118
00:04:35,040 --> 00:04:38,160
split by each server

119
00:04:38,240 --> 00:04:39,680
but the relay does not know the

120
00:04:39,680 --> 00:04:42,160
individual secret values are i values

121
00:04:42,160 --> 00:04:45,040
for honest lines

122
00:04:45,040 --> 00:04:47,759
now these clients can run a decinet

123
00:04:47,759 --> 00:04:51,600
protocol with the help of the relay

124
00:04:51,600 --> 00:04:54,240
let's see how

125
00:04:55,040 --> 00:04:57,120
we have the local area network we have

126
00:04:57,120 --> 00:04:59,199
the setup servers this is what the relay

127
00:04:59,199 --> 00:05:00,080
knows

128
00:05:00,080 --> 00:05:02,479
but wait didn't i say that

129
00:05:02,479 --> 00:05:03,840
once the setup phase is done we don't

130
00:05:03,840 --> 00:05:06,639
need the setup servers anymore

131
00:05:06,639 --> 00:05:08,080
in our design

132
00:05:08,080 --> 00:05:11,360
we use additive homomorphic prfs

133
00:05:11,360 --> 00:05:14,720
where f of r1 comma d plus f of r2 comma

134
00:05:14,720 --> 00:05:16,720
d equals to f of r1 plus r2 comma d for

135
00:05:16,720 --> 00:05:18,800
a tag d

136
00:05:18,800 --> 00:05:22,160
here d can be the round number

137
00:05:22,560 --> 00:05:25,120
now if jim wants to send a message x

138
00:05:25,120 --> 00:05:29,600
what sense is x plus f of r1 comma d

139
00:05:29,600 --> 00:05:31,440
and rest of the client

140
00:05:31,440 --> 00:05:34,080
ryan and ian pam they only sends the

141
00:05:34,080 --> 00:05:36,800
peer values

142
00:05:37,199 --> 00:05:40,160
now what the relay can do is uh

143
00:05:40,160 --> 00:05:41,280
relay

144
00:05:41,280 --> 00:05:44,080
can retrieve x by adding all the cipher

145
00:05:44,080 --> 00:05:47,199
text received from all the clients

146
00:05:47,199 --> 00:05:49,039
and subtracting

147
00:05:49,039 --> 00:05:50,080
f of

148
00:05:50,080 --> 00:05:53,280
ks comma d because the really knows that

149
00:05:53,280 --> 00:05:54,880
sum of uh

150
00:05:54,880 --> 00:05:56,000
all the

151
00:05:56,000 --> 00:05:57,199
prfs

152
00:05:57,199 --> 00:05:58,960
equals to sum of f of chaos comma d

153
00:05:58,960 --> 00:06:02,960
because it's an additive chemorphic prf

154
00:06:03,600 --> 00:06:07,360
and the relay can retrieve the value x

155
00:06:07,360 --> 00:06:08,960
however

156
00:06:08,960 --> 00:06:10,479
how does

157
00:06:10,479 --> 00:06:13,600
any user for example pam know that in a

158
00:06:13,600 --> 00:06:15,680
specific round c is not supposed to send

159
00:06:15,680 --> 00:06:16,880
a message because someone else is

160
00:06:16,880 --> 00:06:19,039
sending message sending a message

161
00:06:19,039 --> 00:06:21,440
without knowing who is actually sending

162
00:06:21,440 --> 00:06:23,840
a message

163
00:06:24,080 --> 00:06:28,159
how do the users agree on such slots

164
00:06:30,000 --> 00:06:31,039
for that

165
00:06:31,039 --> 00:06:33,360
we use newton's power term

166
00:06:33,360 --> 00:06:34,800
equation system

167
00:06:34,800 --> 00:06:37,039
newton's power sum equation system uh is

168
00:06:37,039 --> 00:06:38,479
an identity

169
00:06:38,479 --> 00:06:41,600
so the order of inputs

170
00:06:41,600 --> 00:06:43,280
does not matter

171
00:06:43,280 --> 00:06:44,880
you get the same

172
00:06:44,880 --> 00:06:46,639
output

173
00:06:46,639 --> 00:06:48,479
and we can use such an equation system

174
00:06:48,479 --> 00:06:50,160
to achieve anonymity

175
00:06:50,160 --> 00:06:52,960
let's see how the relay can

176
00:06:52,960 --> 00:06:57,198
re receive such an equation system

177
00:06:58,160 --> 00:07:00,080
in our system

178
00:07:00,080 --> 00:07:04,080
every round has n slots so each user

179
00:07:04,080 --> 00:07:07,199
sends exactly one message in every round

180
00:07:07,199 --> 00:07:10,960
and for n messages there are n slots

181
00:07:10,960 --> 00:07:13,759
for every slot

182
00:07:13,759 --> 00:07:15,680
each user i

183
00:07:15,680 --> 00:07:16,880
sends

184
00:07:16,880 --> 00:07:19,599
the ciphertext cit

185
00:07:19,599 --> 00:07:20,560
which is

186
00:07:20,560 --> 00:07:23,120
x i where x i is the

187
00:07:23,120 --> 00:07:25,360
plain text of the client raised to the

188
00:07:25,360 --> 00:07:26,479
power t

189
00:07:26,479 --> 00:07:30,000
plus the prf value with tag t assuming

190
00:07:30,000 --> 00:07:31,599
the round number is zero

191
00:07:31,599 --> 00:07:33,520
we are using uh the slot number as the

192
00:07:33,520 --> 00:07:34,639
tag

193
00:07:34,639 --> 00:07:37,599
just for example

194
00:07:38,000 --> 00:07:41,280
and every client then sends n cipher

195
00:07:41,280 --> 00:07:45,840
text for every uh for n slots

196
00:07:47,120 --> 00:07:48,960
after receiving

197
00:07:48,960 --> 00:07:50,879
in cipher text

198
00:07:50,879 --> 00:07:52,560
from every client

199
00:07:52,560 --> 00:07:54,560
for every slot the relay can add this

200
00:07:54,560 --> 00:07:56,479
corresponding cipher text from each of

201
00:07:56,479 --> 00:07:58,240
the clients

202
00:07:58,240 --> 00:08:00,000
to retrieve the value

203
00:08:00,000 --> 00:08:02,319
x 1 to the power t plus x to the power t

204
00:08:02,319 --> 00:08:04,639
plus x n to the power t

205
00:08:04,639 --> 00:08:06,319
and that gives the

206
00:08:06,319 --> 00:08:09,759
equation corresponding to slot t

207
00:08:09,759 --> 00:08:12,879
so for n slots the relay gets all the

208
00:08:12,879 --> 00:08:15,280
for n equations and the relay solves

209
00:08:15,280 --> 00:08:17,120
those equations to retrieve the values

210
00:08:17,120 --> 00:08:19,199
x1 to xn

211
00:08:19,199 --> 00:08:21,440
and since the order of the inputs do not

212
00:08:21,440 --> 00:08:22,479
matter

213
00:08:22,479 --> 00:08:25,039
the really does not know which user sent

214
00:08:25,039 --> 00:08:27,840
which value

215
00:08:27,919 --> 00:08:32,478
and voila we got our protocol

216
00:08:33,760 --> 00:08:36,479
in our protocol the prf computation

217
00:08:36,479 --> 00:08:38,080
seems to be a huge overhead for the

218
00:08:38,080 --> 00:08:40,320
clients

219
00:08:40,320 --> 00:08:43,919
and we reduce the overhead by using an

220
00:08:43,919 --> 00:08:46,640
almost chemotherapy based on ring

221
00:08:46,640 --> 00:08:48,399
learning with rounding assumption

222
00:08:48,399 --> 00:08:49,760
instead of a classical chemotherapistic

223
00:08:49,760 --> 00:08:52,720
period based on ddh assumption

224
00:08:52,720 --> 00:08:54,560
in our protocol

225
00:08:54,560 --> 00:08:55,680
the

226
00:08:55,680 --> 00:08:57,839
exponentiation in the classical prf is

227
00:08:57,839 --> 00:08:59,519
replaced by

228
00:08:59,519 --> 00:09:02,399
vector dot product

229
00:09:02,640 --> 00:09:05,920
however this increases some noise in the

230
00:09:05,920 --> 00:09:06,839
prf

231
00:09:06,839 --> 00:09:09,920
function and

232
00:09:09,920 --> 00:09:12,000
but as long as the noise is a small

233
00:09:12,000 --> 00:09:14,399
value we can eliminate the noise

234
00:09:14,399 --> 00:09:16,560
by multiplying the

235
00:09:16,560 --> 00:09:19,839
plain text with a scalar value

236
00:09:19,839 --> 00:09:22,080
the main takeaway from this slide is

237
00:09:22,080 --> 00:09:23,040
that

238
00:09:23,040 --> 00:09:25,839
we improve the prf computation time

239
00:09:25,839 --> 00:09:28,080
by uh increasing the size of the keys

240
00:09:28,080 --> 00:09:29,839
because the key is now a vector instead

241
00:09:29,839 --> 00:09:32,480
of a scalar

242
00:09:32,880 --> 00:09:36,080
if you look at the prf function more

243
00:09:36,080 --> 00:09:37,760
closely

244
00:09:37,760 --> 00:09:38,959
you see that

245
00:09:38,959 --> 00:09:40,640
the hash function

246
00:09:40,640 --> 00:09:44,000
does not depend on the key or the

247
00:09:44,000 --> 00:09:47,200
plain text of the client

248
00:09:47,200 --> 00:09:49,279
so we can further improve the

249
00:09:49,279 --> 00:09:51,600
computation over it

250
00:09:51,600 --> 00:09:54,320
by pre-computing the hash values for uh

251
00:09:54,320 --> 00:09:57,519
for a tag officer up to certain range

252
00:09:57,519 --> 00:10:00,160
and store those has values

253
00:10:00,160 --> 00:10:02,560
but once the hash values are exhausted

254
00:10:02,560 --> 00:10:05,120
the exhausted the clients need to rerun

255
00:10:05,120 --> 00:10:07,920
the setup to reuse the same hash values

256
00:10:07,920 --> 00:10:09,519
and this gives us a storage versus

257
00:10:09,519 --> 00:10:11,200
compression trade-off

258
00:10:11,200 --> 00:10:13,360
however this allows us to speed up

259
00:10:13,360 --> 00:10:15,760
further

260
00:10:16,720 --> 00:10:18,399
now we have the core construction of our

261
00:10:18,399 --> 00:10:21,600
protocol let's call it organ a

262
00:10:21,600 --> 00:10:23,839
we also introduce a bulk protocol that

263
00:10:23,839 --> 00:10:26,880
allows clients to send large iv packets

264
00:10:26,880 --> 00:10:28,959
we also defend against active attacks

265
00:10:28,959 --> 00:10:30,320
like equification by the relay

266
00:10:30,320 --> 00:10:33,120
disruption by the clients or relay

267
00:10:33,120 --> 00:10:35,360
and all these without compromising

268
00:10:35,360 --> 00:10:37,680
anonymity i encourage you to read the

269
00:10:37,680 --> 00:10:41,359
paper for all these details

270
00:10:44,800 --> 00:10:46,959
we have an end-to-end implementation of

271
00:10:46,959 --> 00:10:50,399
organ with all the add-ons in rust

272
00:10:50,399 --> 00:10:52,079
and the implementation is publicly

273
00:10:52,079 --> 00:10:53,920
available

274
00:10:53,920 --> 00:10:56,240
and using this implementation we show

275
00:10:56,240 --> 00:10:58,959
that we can support uh throughput which

276
00:10:58,959 --> 00:11:01,040
allows for audio calls even for 100

277
00:11:01,040 --> 00:11:02,399
client system

278
00:11:02,399 --> 00:11:04,640
if you look at the table for 50 uh

279
00:11:04,640 --> 00:11:07,360
client system the throughput is 11 kps

280
00:11:07,360 --> 00:11:08,640
per client

281
00:11:08,640 --> 00:11:10,399
and 3 kbps

282
00:11:10,399 --> 00:11:12,160
when the there are 100 clients in the

283
00:11:12,160 --> 00:11:14,720
system

284
00:11:14,720 --> 00:11:16,160
to summarize the

285
00:11:16,160 --> 00:11:19,279
takeaways from this talk

286
00:11:20,079 --> 00:11:22,560
we set the requirement of setup phases

287
00:11:22,560 --> 00:11:24,880
for key agreement short slot agreement

288
00:11:24,880 --> 00:11:27,040
before every round in a descinet based

289
00:11:27,040 --> 00:11:28,399
protocol

290
00:11:28,399 --> 00:11:30,560
using a combination of newton's powers

291
00:11:30,560 --> 00:11:31,839
method and

292
00:11:31,839 --> 00:11:34,320
additive chemotherapy prfs

293
00:11:34,320 --> 00:11:37,440
in the client relay server model

294
00:11:37,440 --> 00:11:39,440
we also show a storage versus

295
00:11:39,440 --> 00:11:41,760
computation tradeoff in chemothick prf

296
00:11:41,760 --> 00:11:43,680
which is a public key primitive

297
00:11:43,680 --> 00:11:46,000
and we show that it is possible to make

298
00:11:46,000 --> 00:11:46,959
it

299
00:11:46,959 --> 00:11:49,760
really faster

300
00:11:49,920 --> 00:11:52,160
thank you for your patience and i open

301
00:11:52,160 --> 00:11:55,719
the forum for questions

