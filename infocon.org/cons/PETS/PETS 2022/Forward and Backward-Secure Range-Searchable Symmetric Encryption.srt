1
00:00:01,760 --> 00:00:04,000
hello everyone i'm javan wong from

2
00:00:04,000 --> 00:00:06,799
department of information engineering a

3
00:00:06,799 --> 00:00:09,120
chinese university of hong kong

4
00:00:09,120 --> 00:00:11,679
i'm going to present the paper forward

5
00:00:11,679 --> 00:00:14,000
and backward secure range searchable

6
00:00:14,000 --> 00:00:15,759
symmetric encryption

7
00:00:15,759 --> 00:00:18,080
this is a joint work with my supervisor

8
00:00:18,080 --> 00:00:20,720
professor sherman

9
00:00:20,720 --> 00:00:22,960
the ever-growing data cause great

10
00:00:22,960 --> 00:00:25,519
pressure on local storage

11
00:00:25,519 --> 00:00:28,080
an attractive solution is to also slam

12
00:00:28,080 --> 00:00:31,039
to the cloud server how to secure

13
00:00:31,039 --> 00:00:33,120
outsource the data while enabling

14
00:00:33,120 --> 00:00:35,920
efficient search online becomes an

15
00:00:35,920 --> 00:00:37,840
interesting problem

16
00:00:37,840 --> 00:00:40,239
for efficiency and security it is

17
00:00:40,239 --> 00:00:42,879
natural to index and encrypt the data

18
00:00:42,879 --> 00:00:45,840
respectively before outsourcing them

19
00:00:45,840 --> 00:00:48,960
search for symmetric encryption or sse

20
00:00:48,960 --> 00:00:52,640
is a useful cryptographic primitive here

21
00:00:52,640 --> 00:00:55,520
an sic client could search for files

22
00:00:55,520 --> 00:00:57,840
matching a specific keyword from his

23
00:00:57,840 --> 00:00:59,440
encrypted data

24
00:00:59,440 --> 00:01:01,440
by creating the corresponding search

25
00:01:01,440 --> 00:01:02,640
token

26
00:01:02,640 --> 00:01:05,280
the token enables the server to do

27
00:01:05,280 --> 00:01:07,119
research

28
00:01:07,119 --> 00:01:11,280
the dynamic version of ssc or dsse fully

29
00:01:11,280 --> 00:01:13,760
enables a client to update his

30
00:01:13,760 --> 00:01:16,080
outsourced data

31
00:01:16,080 --> 00:01:18,240
a new keyword file pair could be

32
00:01:18,240 --> 00:01:21,759
inserted with an update token

33
00:01:21,759 --> 00:01:24,720
to mitigate fire injection attack

34
00:01:24,720 --> 00:01:29,360
dsse requires forward security

35
00:01:29,360 --> 00:01:32,000
forward security ensures that

36
00:01:32,000 --> 00:01:34,720
the keyword in any update will not be

37
00:01:34,720 --> 00:01:40,360
reviewed until the next search on it

38
00:01:41,280 --> 00:01:43,360
searching for a range of values is a

39
00:01:43,360 --> 00:01:46,159
common query type serving as a basic

40
00:01:46,159 --> 00:01:49,280
function of sql queries over encrypted

41
00:01:49,280 --> 00:01:51,280
databases

42
00:01:51,280 --> 00:01:54,159
for this case the keyword space becomes

43
00:01:54,159 --> 00:01:57,439
a domain of numeric values

44
00:01:57,439 --> 00:02:00,799
range queries over encrypted data should

45
00:02:00,799 --> 00:02:03,040
be supported in a way that is more

46
00:02:03,040 --> 00:02:04,240
efficient

47
00:02:04,240 --> 00:02:06,719
than naively searching each value in the

48
00:02:06,719 --> 00:02:09,520
range one by one

49
00:02:09,520 --> 00:02:11,920
an approach is to build a tree like

50
00:02:11,920 --> 00:02:14,879
index on top of searchable encryption

51
00:02:14,879 --> 00:02:16,959
and reduce a range query to multiple

52
00:02:16,959 --> 00:02:19,680
single keyword searches

53
00:02:19,680 --> 00:02:22,000
fever at our end dimensions at our

54
00:02:22,000 --> 00:02:24,879
initiated lease study represented

55
00:02:24,879 --> 00:02:27,680
diverse indices yet their schemes are

56
00:02:27,680 --> 00:02:29,520
not dynamic

57
00:02:29,520 --> 00:02:32,160
that is not supporting the insertion of

58
00:02:32,160 --> 00:02:35,200
giver file pairs

59
00:02:35,200 --> 00:02:38,720
draw at r aimed at range dssc

60
00:02:38,720 --> 00:02:40,959
yes layer construction requiring

61
00:02:40,959 --> 00:02:43,680
efficient public key operations due to

62
00:02:43,680 --> 00:02:45,680
layer building blocks

63
00:02:45,680 --> 00:02:48,560
what's still the claim of our security

64
00:02:48,560 --> 00:02:51,599
in one of their schemes is problematic

65
00:02:51,599 --> 00:02:53,840
we demonstrate an adaptive fire

66
00:02:53,840 --> 00:02:57,680
injection attack against it in our paper

67
00:02:57,680 --> 00:03:00,080
less subsequent work which is also

68
00:03:00,080 --> 00:03:01,920
subsequent to ours

69
00:03:01,920 --> 00:03:04,319
fixes the problem with the skin using

70
00:03:04,319 --> 00:03:07,200
homophilically encrypted file index

71
00:03:07,200 --> 00:03:10,480
the file index is actually a bit vector

72
00:03:10,480 --> 00:03:13,280
with each slot denoting the existence of

73
00:03:13,280 --> 00:03:14,640
a file

74
00:03:14,640 --> 00:03:17,599
it limits the maximum number of files

75
00:03:17,599 --> 00:03:21,679
and makes the updates restrictive

76
00:03:22,080 --> 00:03:25,040
we summarize a framework of range dssc

77
00:03:25,040 --> 00:03:27,519
with a running example using a binary

78
00:03:27,519 --> 00:03:29,599
index and better range covering

79
00:03:29,599 --> 00:03:31,280
technicals by

80
00:03:31,280 --> 00:03:32,879
at hour

81
00:03:32,879 --> 00:03:34,239
to set up

82
00:03:34,239 --> 00:03:36,159
the keyword space is broken into the

83
00:03:36,159 --> 00:03:37,440
branches

84
00:03:37,440 --> 00:03:40,400
we associate a unique keyword to each of

85
00:03:40,400 --> 00:03:41,519
them

86
00:03:41,519 --> 00:03:45,200
we run dssc setup on the actual keyword

87
00:03:45,200 --> 00:03:48,239
and the keywords of sub ranges as shown

88
00:03:48,239 --> 00:03:51,120
in the example

89
00:03:51,360 --> 00:03:53,840
to search the target range is broken

90
00:03:53,840 --> 00:03:56,560
into the branches or keywords for

91
00:03:56,560 --> 00:03:57,599
example

92
00:03:57,599 --> 00:04:00,560
we break the range 1 3 into keyboard 1

93
00:04:00,560 --> 00:04:02,720
and sub branch 2 3

94
00:04:02,720 --> 00:04:05,760
we run dssc search online for a range

95
00:04:05,760 --> 00:04:07,840
query

96
00:04:07,840 --> 00:04:09,120
for update

97
00:04:09,120 --> 00:04:11,519
we found out any sub ranges covering the

98
00:04:11,519 --> 00:04:14,000
keywords to be updated

99
00:04:14,000 --> 00:04:16,959
for updating keyword 2 in the example

100
00:04:16,959 --> 00:04:20,478
the branches 2 3 and 1 2 3 4 are figured

101
00:04:20,478 --> 00:04:22,639
out

102
00:04:22,639 --> 00:04:25,919
and we run dssc updates only actual

103
00:04:25,919 --> 00:04:28,639
keywords and those associated to the

104
00:04:28,639 --> 00:04:31,040
covering sub ranges

105
00:04:31,040 --> 00:04:33,440
we'll obtain our modular construction

106
00:04:33,440 --> 00:04:36,160
more rse by instantiating the framework

107
00:04:36,160 --> 00:04:38,479
with any typical dsse

108
00:04:38,479 --> 00:04:41,360
the modular design avoids design

109
00:04:41,360 --> 00:04:43,919
specific problems of prior works for

110
00:04:43,919 --> 00:04:46,800
example the inefficiency due to specific

111
00:04:46,800 --> 00:04:48,720
building blocks

112
00:04:48,720 --> 00:04:52,960
for updates more rse runs dsscs updates

113
00:04:52,960 --> 00:04:55,040
for times of risk-making in the keyword

114
00:04:55,040 --> 00:04:57,520
space size which is essentially the

115
00:04:57,520 --> 00:04:59,600
height of the g index

116
00:04:59,600 --> 00:05:02,000
for search the client needs to figure

117
00:05:02,000 --> 00:05:04,720
out the coverings of ranges which can be

118
00:05:04,720 --> 00:05:07,360
done in time logarithmic in the range

119
00:05:07,360 --> 00:05:10,320
size dollar server needs to run multiple

120
00:05:10,320 --> 00:05:12,800
times of dssc search

121
00:05:12,800 --> 00:05:15,039
the sum of them is typically the number

122
00:05:15,039 --> 00:05:16,400
of matches

123
00:05:16,400 --> 00:05:20,160
as these sub-ranges have low overlaps

124
00:05:20,160 --> 00:05:21,520
notably

125
00:05:21,520 --> 00:05:24,560
more rse inherits full privacy from its

126
00:05:24,560 --> 00:05:26,479
underlying dsse

127
00:05:26,479 --> 00:05:28,560
because the update for each keyword or

128
00:05:28,560 --> 00:05:32,560
sub range is carried out independently

129
00:05:32,560 --> 00:05:33,840
before presenting our second

130
00:05:33,840 --> 00:05:36,080
construction we recall a storage

131
00:05:36,080 --> 00:05:38,320
overhead a single keyword for the

132
00:05:38,320 --> 00:05:40,080
security accessed

133
00:05:40,080 --> 00:05:42,800
for optimal round chip it doesn't also

134
00:05:42,800 --> 00:05:46,080
stage but keeps a state per keyword

135
00:05:46,080 --> 00:05:48,800
which usually consists of a key and an

136
00:05:48,800 --> 00:05:50,960
update counter

137
00:05:50,960 --> 00:05:53,360
for an update of a keyword

138
00:05:53,360 --> 00:05:55,600
the client will use the prf value

139
00:05:55,600 --> 00:05:58,560
evaluating its key and counter to

140
00:05:58,560 --> 00:06:01,680
determine the address to store it

141
00:06:01,680 --> 00:06:02,560
then

142
00:06:02,560 --> 00:06:05,440
the update counter is increased by 1 to

143
00:06:05,440 --> 00:06:07,680
ensure the next address is clear to the

144
00:06:07,680 --> 00:06:09,280
random

145
00:06:09,280 --> 00:06:11,360
when searching for a keyword

146
00:06:11,360 --> 00:06:14,319
its key will be revealed to the server

147
00:06:14,319 --> 00:06:15,520
meanwhile

148
00:06:15,520 --> 00:06:17,600
a new key will be picked and stored

149
00:06:17,600 --> 00:06:20,720
locally to ensure the subsequent updates

150
00:06:20,720 --> 00:06:22,479
will not be exposed

151
00:06:22,479 --> 00:06:25,520
due to any previous search

152
00:06:25,520 --> 00:06:26,639
thus

153
00:06:26,639 --> 00:06:30,400
the client of forward secure dssc needs

154
00:06:30,400 --> 00:06:33,280
to sterile states as many as the number

155
00:06:33,280 --> 00:06:35,759
of keywords

156
00:06:35,759 --> 00:06:40,000
consequently for range dssc with 3 index

157
00:06:40,000 --> 00:06:41,840
the current storage

158
00:06:41,840 --> 00:06:43,759
will become a wrong price of the

159
00:06:43,759 --> 00:06:46,639
keywords as its chase is arranged as a

160
00:06:46,639 --> 00:06:49,120
keyword

161
00:06:49,120 --> 00:06:51,759
our second range dssc construction

162
00:06:51,759 --> 00:06:54,960
rsquare reduces the client storage due

163
00:06:54,960 --> 00:06:57,680
to state maintenance by not storing

164
00:06:57,680 --> 00:07:00,639
stage for any sub range until it has

165
00:07:00,639 --> 00:07:02,639
been searched for

166
00:07:02,639 --> 00:07:05,840
we expand how to ensure forward security

167
00:07:05,840 --> 00:07:10,479
when updating a sub branch with no state

168
00:07:10,479 --> 00:07:13,520
for an unsearched sub range each key

169
00:07:13,520 --> 00:07:17,039
would be the pif value inputting itself

170
00:07:17,039 --> 00:07:19,759
which can be derived on the fly

171
00:07:19,759 --> 00:07:23,440
rs square computes its update counter

172
00:07:23,440 --> 00:07:26,080
as the sum of counters of its

173
00:07:26,080 --> 00:07:28,160
descendants nodes

174
00:07:28,160 --> 00:07:30,880
which are stored as per single keyword

175
00:07:30,880 --> 00:07:32,800
dsse

176
00:07:32,800 --> 00:07:35,599
the address to store the update of list

177
00:07:35,599 --> 00:07:38,240
of range is still based on its key and

178
00:07:38,240 --> 00:07:39,840
counters

179
00:07:39,840 --> 00:07:42,800
only after its first search where a new

180
00:07:42,800 --> 00:07:46,240
key is selected and stored

181
00:07:46,240 --> 00:07:47,759
for example

182
00:07:47,759 --> 00:07:50,879
if zero one has not been searched for

183
00:07:50,879 --> 00:07:53,680
its key is prf01

184
00:07:53,680 --> 00:07:56,800
and its counter is the sum of zeros and

185
00:07:56,800 --> 00:07:59,800
ones

186
00:07:59,919 --> 00:08:02,160
as no states will be stored for any

187
00:08:02,160 --> 00:08:03,919
unsearched branch

188
00:08:03,919 --> 00:08:06,879
i-square has the same client storage as

189
00:08:06,879 --> 00:08:09,759
the forward security ssc where no range

190
00:08:09,759 --> 00:08:11,680
query has been issued

191
00:08:11,680 --> 00:08:13,520
the client storage

192
00:08:13,520 --> 00:08:15,520
increases with the number of searcher

193
00:08:15,520 --> 00:08:16,639
range

194
00:08:16,639 --> 00:08:19,199
indicating that i square is suitable

195
00:08:19,199 --> 00:08:21,919
when rent queries are required yet not

196
00:08:21,919 --> 00:08:23,759
frequent

197
00:08:23,759 --> 00:08:26,479
in general the number of states stored

198
00:08:26,479 --> 00:08:29,039
by the client is the number of keywords

199
00:08:29,039 --> 00:08:32,559
plus the number of search sub-ranges

200
00:08:32,559 --> 00:08:33,760
in addition

201
00:08:33,760 --> 00:08:36,640
it takes time linear in the keywords for

202
00:08:36,640 --> 00:08:38,799
the clients to calculate the counters

203
00:08:38,799 --> 00:08:43,200
for the first search of any sub ranges

204
00:08:43,200 --> 00:08:45,279
backward security is another security

205
00:08:45,279 --> 00:08:48,320
notion requiring searches concerning any

206
00:08:48,320 --> 00:08:51,200
deleted keyword file pair not to reveal

207
00:08:51,200 --> 00:08:53,120
a deleted file

208
00:08:53,120 --> 00:08:55,839
booster at out defines three levels of

209
00:08:55,839 --> 00:08:58,160
background security differently

210
00:08:58,160 --> 00:09:00,399
combining the information leakage during

211
00:09:00,399 --> 00:09:03,360
updates and searches of a single keyword

212
00:09:03,360 --> 00:09:05,440
dssc

213
00:09:05,440 --> 00:09:07,600
we'll observe less the definition of

214
00:09:07,600 --> 00:09:10,399
post at out cannot be applied to range

215
00:09:10,399 --> 00:09:12,800
dsse directly

216
00:09:12,800 --> 00:09:15,600
as searches on the branches may have

217
00:09:15,600 --> 00:09:19,279
overlapped results of keywords

218
00:09:19,279 --> 00:09:22,160
considering this subtlety we extend the

219
00:09:22,160 --> 00:09:25,760
definition of three levels to range dssc

220
00:09:25,760 --> 00:09:26,959
meanwhile

221
00:09:26,959 --> 00:09:28,720
we show that the two run chip

222
00:09:28,720 --> 00:09:31,279
transformation for backward privacy by

223
00:09:31,279 --> 00:09:34,320
both at out can be applied to our more

224
00:09:34,320 --> 00:09:36,800
ise and is square

225
00:09:36,800 --> 00:09:40,959
please check our paper for details

226
00:09:41,200 --> 00:09:44,720
we implement our more isc and rs clear

227
00:09:44,720 --> 00:09:47,040
with a keyword space of over 1 million

228
00:09:47,040 --> 00:09:49,920
keywords we also compare the performance

229
00:09:49,920 --> 00:09:54,640
to the recent construction fb dsserq

230
00:09:54,640 --> 00:09:56,560
the time for updates and search

231
00:09:56,560 --> 00:09:59,120
demonstrates the efficiency of our

232
00:09:59,120 --> 00:10:02,120
constructions

233
00:10:04,320 --> 00:10:06,959
in addition we evaluate the client side

234
00:10:06,959 --> 00:10:09,440
storage to show the advantage of our

235
00:10:09,440 --> 00:10:10,480
square

236
00:10:10,480 --> 00:10:13,120
we randomly make range queries before

237
00:10:13,120 --> 00:10:15,360
measuring the number of states stored in

238
00:10:15,360 --> 00:10:16,720
the client side

239
00:10:16,720 --> 00:10:20,240
the results shows that i square indeed

240
00:10:20,240 --> 00:10:23,680
saves the client storage

241
00:10:25,120 --> 00:10:27,680
to sum up following our framework of

242
00:10:27,680 --> 00:10:30,320
range dssc we propose a modular

243
00:10:30,320 --> 00:10:32,160
construction let's avoid designing

244
00:10:32,160 --> 00:10:35,040
specific problems of prior works

245
00:10:35,040 --> 00:10:37,200
and the specific construction which

246
00:10:37,200 --> 00:10:39,360
reduce the client-side storage

247
00:10:39,360 --> 00:10:41,360
both of land realize

248
00:10:41,360 --> 00:10:43,440
forward and backward security and

249
00:10:43,440 --> 00:10:45,360
practical efficiency

250
00:10:45,360 --> 00:10:46,560
in addition

251
00:10:46,560 --> 00:10:49,519
centering around range dsse this work

252
00:10:49,519 --> 00:10:53,040
provides a mini slk of existing work

253
00:10:53,040 --> 00:10:55,839
a new file injection attack that refuses

254
00:10:55,839 --> 00:10:57,519
a previous scheme

255
00:10:57,519 --> 00:10:59,760
and a refined definition of backward

256
00:10:59,760 --> 00:11:02,160
security

257
00:11:02,160 --> 00:11:04,560
there are many filter works the first is

258
00:11:04,560 --> 00:11:07,040
how to support multiple clients

259
00:11:07,040 --> 00:11:10,240
our work in using security this year

260
00:11:10,240 --> 00:11:12,480
provides a generic construction that

261
00:11:12,480 --> 00:11:16,079
upgrades dsse with multiwriter support

262
00:11:16,079 --> 00:11:18,240
it is expected to see whether we can

263
00:11:18,240 --> 00:11:20,480
upgrade range dsse

264
00:11:20,480 --> 00:11:22,240
the second direction is the attack

265
00:11:22,240 --> 00:11:23,600
mitigation

266
00:11:23,600 --> 00:11:26,399
we are aware of attacks against a range

267
00:11:26,399 --> 00:11:29,360
search over encrypted data which often

268
00:11:29,360 --> 00:11:31,440
exploits the volume pattern

269
00:11:31,440 --> 00:11:34,640
women make branch dssc volume hiding as

270
00:11:34,640 --> 00:11:36,079
a mitigation

271
00:11:36,079 --> 00:11:38,640
the next talk by endo and george will

272
00:11:38,640 --> 00:11:41,680
discuss the cost of four long hiding

273
00:11:41,680 --> 00:11:45,040
finally we expect to see more expressive

274
00:11:45,040 --> 00:11:47,760
query types over encrypted data

275
00:11:47,760 --> 00:11:49,519
based on range

276
00:11:49,519 --> 00:11:52,399
for example the last orc by expiratory

277
00:11:52,399 --> 00:11:55,519
at r will study aggregate range queries

278
00:11:55,519 --> 00:11:57,839
thank you for listening and feel free to

279
00:11:57,839 --> 00:12:00,880
contact us

