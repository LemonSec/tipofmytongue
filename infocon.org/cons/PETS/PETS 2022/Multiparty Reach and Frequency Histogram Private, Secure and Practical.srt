1
00:00:00,539 --> 00:00:02,399
thank you everyone for attending this

2
00:00:02,399 --> 00:00:04,440
talk today I will be telling you about a

3
00:00:04,440 --> 00:00:06,180
private secure and practical algorithm

4
00:00:06,180 --> 00:00:08,940
for multi-party region frequency this

5
00:00:08,940 --> 00:00:11,820
driver with Buddy Ben Robbie jio Evgeni

6
00:00:11,820 --> 00:00:13,980
Yao and Craig

7
00:00:13,980 --> 00:00:17,520
our work is motivated by application in

8
00:00:17,520 --> 00:00:19,320
the ad domain where there are multiple

9
00:00:19,320 --> 00:00:21,720
Publishers showing the same or similar

10
00:00:21,720 --> 00:00:23,039
ads

11
00:00:23,039 --> 00:00:27,180
each publisher I manages to reach a set

12
00:00:27,180 --> 00:00:29,699
SI of users

13
00:00:29,699 --> 00:00:32,759
and our goal is to First compute the

14
00:00:32,759 --> 00:00:35,340
total reach across all Publishers which

15
00:00:35,340 --> 00:00:37,860
is simply the number of unique users

16
00:00:37,860 --> 00:00:40,379
that is contained in the union of all

17
00:00:40,379 --> 00:00:42,059
the sis

18
00:00:42,059 --> 00:00:44,340
furthermore we would like to compute the

19
00:00:44,340 --> 00:00:47,100
so-called frequency histogram where the

20
00:00:47,100 --> 00:00:49,739
case entry of this histogram which we

21
00:00:49,739 --> 00:00:51,899
call K frequency for short

22
00:00:51,899 --> 00:00:54,420
is the fraction of users that are

23
00:00:54,420 --> 00:00:59,239
reached K times across all publishers

24
00:00:59,399 --> 00:01:02,520
for convenient we typically cut off the

25
00:01:02,520 --> 00:01:05,339
frequency histogram at some number like

26
00:01:05,339 --> 00:01:09,180
10 or 15 and then group all the K

27
00:01:09,180 --> 00:01:11,280
greater than 10 or k greater than 15

28
00:01:11,280 --> 00:01:14,880
together into a single bucket

29
00:01:14,880 --> 00:01:18,119
the model of privacy that we use will be

30
00:01:18,119 --> 00:01:20,460
the so-called multi-helper model

31
00:01:20,460 --> 00:01:23,400
where there will be multiple workers and

32
00:01:23,400 --> 00:01:24,720
an aggregator

33
00:01:24,720 --> 00:01:26,880
and they will together run a secure

34
00:01:26,880 --> 00:01:29,520
protocol to compute reach and frequency

35
00:01:29,520 --> 00:01:32,579
and our goal is to ensure that every

36
00:01:32,579 --> 00:01:36,119
collusion of all but one parties

37
00:01:36,119 --> 00:01:39,240
cannot violate the user's privacy

38
00:01:39,240 --> 00:01:41,520
the specific notion of privacy we will

39
00:01:41,520 --> 00:01:44,100
use is differential privacy and we will

40
00:01:44,100 --> 00:01:46,259
go through that in more detail in a few

41
00:01:46,259 --> 00:01:48,720
slides but before that let me mention

42
00:01:48,720 --> 00:01:52,920
that as our title suggests our protocol

43
00:01:52,920 --> 00:01:56,820
should be practical and scalable and

44
00:01:56,820 --> 00:01:58,320
this means that we would like to be able

45
00:01:58,320 --> 00:02:02,399
to support many users up to as many as a

46
00:02:02,399 --> 00:02:05,880
billion users in the reach we would also

47
00:02:05,880 --> 00:02:07,740
like to be able to support many

48
00:02:07,740 --> 00:02:09,899
Publishers up to 100

49
00:02:09,899 --> 00:02:12,120
and we would also like to have a small

50
00:02:12,120 --> 00:02:14,340
communication overhead in running this

51
00:02:14,340 --> 00:02:16,800
secure protocol

52
00:02:16,800 --> 00:02:19,260
due to time constraint I will mostly be

53
00:02:19,260 --> 00:02:21,300
focusing on the reach today and normally

54
00:02:21,300 --> 00:02:25,200
touch upon frequency just a little bit

55
00:02:25,200 --> 00:02:27,060
and even before we talk about the

56
00:02:27,060 --> 00:02:30,300
multi-helper model let us start with the

57
00:02:30,300 --> 00:02:32,819
simpler and more popular Central model

58
00:02:32,819 --> 00:02:36,000
of differential privacy

59
00:02:36,000 --> 00:02:38,280
in the central model of differential

60
00:02:38,280 --> 00:02:41,940
privacy there is a trusted aggregator in

61
00:02:41,940 --> 00:02:44,040
this case the publisher can send their

62
00:02:44,040 --> 00:02:47,340
data to The Trusted aggregator who then

63
00:02:47,340 --> 00:02:50,940
produce the estimated Bridge

64
00:02:50,940 --> 00:02:52,980
the notion of differential privacy

65
00:02:52,980 --> 00:02:54,780
states that

66
00:02:54,780 --> 00:02:57,120
if we take a look at two neighboring

67
00:02:57,120 --> 00:03:00,540
data set the distribution of the output

68
00:03:00,540 --> 00:03:03,300
of the algorithm doesn't change too much

69
00:03:03,300 --> 00:03:06,000
and this is parameterized by two

70
00:03:06,000 --> 00:03:10,019
parameter Epsilon and Delta

71
00:03:10,019 --> 00:03:14,040
in our case we consider two data sets to

72
00:03:14,040 --> 00:03:16,260
be neighboring if they differ by adding

73
00:03:16,260 --> 00:03:18,420
or removing a single user across an

74
00:03:18,420 --> 00:03:20,519
arbitrary set of publishers

75
00:03:20,519 --> 00:03:23,159
in other words we are considering user

76
00:03:23,159 --> 00:03:26,420
level differential privacy

77
00:03:26,459 --> 00:03:28,379
in the central model of differential

78
00:03:28,379 --> 00:03:32,220
privacy we only enforce that the final

79
00:03:32,220 --> 00:03:34,260
estimated reach be differentially

80
00:03:34,260 --> 00:03:35,819
private

81
00:03:35,819 --> 00:03:37,799
note here that there is no protection

82
00:03:37,799 --> 00:03:40,739
against the aggregator at all and it is

83
00:03:40,739 --> 00:03:42,480
entirely possible that the Publishers

84
00:03:42,480 --> 00:03:46,560
send their raw data to the aggregator

85
00:03:46,560 --> 00:03:48,720
and this is why we need to trust the

86
00:03:48,720 --> 00:03:50,879
aggregator in the central model

87
00:03:50,879 --> 00:03:53,519
and this might not be the most suitable

88
00:03:53,519 --> 00:03:56,760
for the setting that we are in for which

89
00:03:56,760 --> 00:03:58,920
there might not be a single party that

90
00:03:58,920 --> 00:04:01,140
can be fully trusted

91
00:04:01,140 --> 00:04:03,720
despite this drawback the central model

92
00:04:03,720 --> 00:04:04,860
is nice

93
00:04:04,860 --> 00:04:08,040
that it is easy to design an algorithm

94
00:04:08,040 --> 00:04:11,459
for in fact for our Rich problem the

95
00:04:11,459 --> 00:04:13,920
algorithm is as simple as letting each

96
00:04:13,920 --> 00:04:16,019
publisher since their raw data to their

97
00:04:16,019 --> 00:04:19,380
creator then let the aggregator compute

98
00:04:19,380 --> 00:04:22,919
the true reach and then add to the tools

99
00:04:22,919 --> 00:04:25,860
some appropriately cultivated noise this

100
00:04:25,860 --> 00:04:27,840
would already give a central DP

101
00:04:27,840 --> 00:04:30,479
algorithm for reach

102
00:04:30,479 --> 00:04:33,660
however as we said earlier we would like

103
00:04:33,660 --> 00:04:36,540
our protocol to be scalable and being

104
00:04:36,540 --> 00:04:39,120
able to support many users and many

105
00:04:39,120 --> 00:04:41,520
Publishers and having each publisher

106
00:04:41,520 --> 00:04:43,680
sends their raw data to the aggregator

107
00:04:43,680 --> 00:04:46,680
is simply too costly in terms of the

108
00:04:46,680 --> 00:04:49,680
communication in our setting

109
00:04:49,680 --> 00:04:52,620
and this brings us to our first two in

110
00:04:52,620 --> 00:04:55,160
our work to reduce the communication

111
00:04:55,160 --> 00:04:58,020
complexity of the protocol and that is

112
00:04:58,020 --> 00:04:59,460
sketching

113
00:04:59,460 --> 00:05:03,000
the sketch that we use is a modification

114
00:05:03,000 --> 00:05:05,520
of the classic Bloom filter sketch and

115
00:05:05,520 --> 00:05:07,320
just to quickly recall in boom filter

116
00:05:07,320 --> 00:05:10,320
their M register is set to see lower

117
00:05:10,320 --> 00:05:13,440
initially and there is a hash function H

118
00:05:13,440 --> 00:05:16,860
that has each user ID to a uniformly

119
00:05:16,860 --> 00:05:20,220
random number from 1 to m

120
00:05:20,220 --> 00:05:22,800
when a user arrives we simply hash their

121
00:05:22,800 --> 00:05:25,919
user ID and then set the corresponding

122
00:05:25,919 --> 00:05:27,660
resistor to 1.

123
00:05:27,660 --> 00:05:30,240
Doom filters are easy to merge by simply

124
00:05:30,240 --> 00:05:32,880
taking the bit device or furthermore the

125
00:05:32,880 --> 00:05:35,639
risk can be estimated by looking at the

126
00:05:35,639 --> 00:05:37,860
number of non-empty resistors

127
00:05:37,860 --> 00:05:41,220
all these are good except that the

128
00:05:41,220 --> 00:05:43,740
accuracy of computer become very poor

129
00:05:43,740 --> 00:05:47,220
when the reach is much larger than the

130
00:05:47,220 --> 00:05:48,900
sketch size m

131
00:05:48,900 --> 00:05:51,600
and this leads us to our modification of

132
00:05:51,600 --> 00:05:53,940
the blue filters cache with which we

133
00:05:53,940 --> 00:05:56,160
call the liquid Legion sketch

134
00:05:56,160 --> 00:05:58,259
it's almost the same as the blue filter

135
00:05:58,259 --> 00:06:01,259
except that instead of having a hash

136
00:06:01,259 --> 00:06:04,400
function that map is user ID to

137
00:06:04,400 --> 00:06:08,280
uniformly at random register we take a

138
00:06:08,280 --> 00:06:10,620
map such that there is more probability

139
00:06:10,620 --> 00:06:13,620
that it gets mapped at the beginning of

140
00:06:13,620 --> 00:06:16,080
the sketch than at the end and this

141
00:06:16,080 --> 00:06:19,740
probability decrease geometrically as we

142
00:06:19,740 --> 00:06:22,319
go to the right of the sketch

143
00:06:22,319 --> 00:06:24,479
this can be thought of as a smoother

144
00:06:24,479 --> 00:06:27,120
version of the so-called ball and beans

145
00:06:27,120 --> 00:06:29,400
tree

146
00:06:29,400 --> 00:06:32,580
our liquid Legion sketch is much better

147
00:06:32,580 --> 00:06:33,780
at handling

148
00:06:33,780 --> 00:06:36,120
a large set size when compared to the

149
00:06:36,120 --> 00:06:39,000
sketch size for example for the billion

150
00:06:39,000 --> 00:06:42,780
user case we can accurately estimate the

151
00:06:42,780 --> 00:06:46,319
set size using only about a hundred

152
00:06:46,319 --> 00:06:49,319
thousand registers

153
00:06:49,319 --> 00:06:51,780
all right so how do we use this liquid

154
00:06:51,780 --> 00:06:54,060
Legion sketch in our protocol

155
00:06:54,060 --> 00:06:57,000
in The Trusted aggregator setting each

156
00:06:57,000 --> 00:07:00,000
publisher I can now send that sketch

157
00:07:00,000 --> 00:07:03,240
instead of their entire set SI to The

158
00:07:03,240 --> 00:07:05,580
Trusted aggregator the aggregator then

159
00:07:05,580 --> 00:07:08,340
merge these sketches

160
00:07:08,340 --> 00:07:10,740
and then compute the number of non-empty

161
00:07:10,740 --> 00:07:13,199
resistor in the merge sketch which as we

162
00:07:13,199 --> 00:07:15,060
discussed earlier can be used to

163
00:07:15,060 --> 00:07:17,400
estimate the range

164
00:07:17,400 --> 00:07:19,919
this is the entire protocol except that

165
00:07:19,919 --> 00:07:23,880
is not yet private because the number of

166
00:07:23,880 --> 00:07:26,580
non-empty registers depend on the input

167
00:07:26,580 --> 00:07:29,520
itself and this can be a sensitive data

168
00:07:29,520 --> 00:07:31,860
to make this differentially private we

169
00:07:31,860 --> 00:07:34,919
can add to it at discrete LaPlace noise

170
00:07:34,919 --> 00:07:37,139
and this would be a differentially

171
00:07:37,139 --> 00:07:39,419
private protocol in The Trusted

172
00:07:39,419 --> 00:07:41,220
aggregator model

173
00:07:41,220 --> 00:07:43,440
notice here that each publisher

174
00:07:43,440 --> 00:07:46,139
communication now scales with the sketch

175
00:07:46,139 --> 00:07:48,660
size instead of the set size and as we

176
00:07:48,660 --> 00:07:50,520
discussed earlier the formula can be

177
00:07:50,520 --> 00:07:52,860
much smaller than the ladder

178
00:07:52,860 --> 00:07:55,680
all right so that's the estimation

179
00:07:55,680 --> 00:07:57,660
algorithm in The Trusted aggregator

180
00:07:57,660 --> 00:07:58,919
model

181
00:07:58,919 --> 00:08:01,080
as we discussed earlier we would like to

182
00:08:01,080 --> 00:08:04,139
work in a model that requires less Trust

183
00:08:04,139 --> 00:08:07,440
specifically we use the multi-party DP

184
00:08:07,440 --> 00:08:10,560
notion here in additionally aggregator

185
00:08:10,560 --> 00:08:13,740
there are multiple workers and the

186
00:08:13,740 --> 00:08:17,340
notion of DP here is that we would like

187
00:08:17,340 --> 00:08:20,340
a collusion of all but one workers or

188
00:08:20,340 --> 00:08:21,720
aggregator

189
00:08:21,720 --> 00:08:23,460
to have that we will still be

190
00:08:23,460 --> 00:08:25,800
differentially private

191
00:08:25,800 --> 00:08:28,080
furthermore we relax the notion of DP

192
00:08:28,080 --> 00:08:30,419
from a statistical one we used earlier

193
00:08:30,419 --> 00:08:33,179
to a computational one this allows us

194
00:08:33,179 --> 00:08:35,760
the use of cryptography as well which as

195
00:08:35,760 --> 00:08:37,799
we will see in a moment will be very

196
00:08:37,799 --> 00:08:40,019
useful

197
00:08:40,019 --> 00:08:42,839
at a high level our protocol has 3D

198
00:08:42,839 --> 00:08:44,940
faces the sketch creation and

199
00:08:44,940 --> 00:08:46,740
transmission phase the reach estimation

200
00:08:46,740 --> 00:08:49,380
phase and the last phase the frequency

201
00:08:49,380 --> 00:08:51,180
estimation

202
00:08:51,180 --> 00:08:53,160
for the purpose of time here we will

203
00:08:53,160 --> 00:08:56,160
only focus on the first two phases

204
00:08:56,160 --> 00:08:58,380
before we describe the protocol let us

205
00:08:58,380 --> 00:09:00,660
recall that we would like to satisfy now

206
00:09:00,660 --> 00:09:03,120
both privacy and security

207
00:09:03,120 --> 00:09:05,040
the latter will be achieved via

208
00:09:05,040 --> 00:09:07,200
encryption and the former we are adding

209
00:09:07,200 --> 00:09:08,040
noise

210
00:09:08,040 --> 00:09:10,920
however there will also be complications

211
00:09:10,920 --> 00:09:13,080
that arise in our protocol

212
00:09:13,080 --> 00:09:15,180
because our protocol will leak some

213
00:09:15,180 --> 00:09:17,519
intermediate states that will be

214
00:09:17,519 --> 00:09:20,339
sensitive data and to make this data

215
00:09:20,339 --> 00:09:23,700
private we have to add noise however we

216
00:09:23,700 --> 00:09:26,580
have to add this noise carefully as

217
00:09:26,580 --> 00:09:28,560
otherwise we might destroy the utility

218
00:09:28,560 --> 00:09:30,899
of the protocol

219
00:09:30,899 --> 00:09:33,300
with that in mind let us start by

220
00:09:33,300 --> 00:09:36,060
describing roughly the sketch creation

221
00:09:36,060 --> 00:09:38,459
and transmission phrase

222
00:09:38,459 --> 00:09:40,920
recall again that each publisher I can

223
00:09:40,920 --> 00:09:44,399
construct their own liquid Legion sketch

224
00:09:44,399 --> 00:09:46,620
and they will send these questions to

225
00:09:46,620 --> 00:09:49,019
the worker instead of sending them as a

226
00:09:49,019 --> 00:09:50,640
bit Vector they will send them as

227
00:09:50,640 --> 00:09:54,720
indices of the non-empty registers this

228
00:09:54,720 --> 00:09:57,480
help reduce the communication further

229
00:09:57,480 --> 00:09:59,880
however this wouldn't be private because

230
00:09:59,880 --> 00:10:04,700
this indices depend on the input

231
00:10:04,920 --> 00:10:07,740
to fix this we encrypt each resistor

232
00:10:07,740 --> 00:10:10,440
index with the public keys of all the

233
00:10:10,440 --> 00:10:12,480
workers and the aggregator

234
00:10:12,480 --> 00:10:14,760
however even with this is still not

235
00:10:14,760 --> 00:10:17,760
private because each Publisher's number

236
00:10:17,760 --> 00:10:20,279
of non-empty registers is still revealed

237
00:10:20,279 --> 00:10:22,440
in the clear

238
00:10:22,440 --> 00:10:27,060
to fix this we then generate a num a

239
00:10:27,060 --> 00:10:29,339
number of noise registers which are sent

240
00:10:29,339 --> 00:10:32,040
along with the true resistors to the

241
00:10:32,040 --> 00:10:33,480
workers

242
00:10:33,480 --> 00:10:35,459
note here that the noise resistor will

243
00:10:35,459 --> 00:10:38,279
have a special designated register ID

244
00:10:38,279 --> 00:10:41,220
which I did not by C here as you will

245
00:10:41,220 --> 00:10:42,899
see in a moment this will be important

246
00:10:42,899 --> 00:10:46,320
in ensuring that the protocol has good

247
00:10:46,320 --> 00:10:47,880
utility

248
00:10:47,880 --> 00:10:50,040
that's roughly the sketch creation and

249
00:10:50,040 --> 00:10:52,440
transmission phrase let's move on to the

250
00:10:52,440 --> 00:10:54,899
rich estimation phrase so in Bridge

251
00:10:54,899 --> 00:10:56,820
estimation phrase the workers and

252
00:10:56,820 --> 00:11:00,600
aggregator communicate in a cycle and

253
00:11:00,600 --> 00:11:02,959
each party decrypts

254
00:11:02,959 --> 00:11:05,880
its own key from the encrypted register

255
00:11:05,880 --> 00:11:07,920
and then it shuffles all the register

256
00:11:07,920 --> 00:11:10,560
and then forward into the next party

257
00:11:10,560 --> 00:11:13,560
once this is done we are left with a set

258
00:11:13,560 --> 00:11:15,420
of indices

259
00:11:15,420 --> 00:11:19,140
and as stated earlier the noise resistor

260
00:11:19,140 --> 00:11:22,079
have a special resistor ID so we can

261
00:11:22,079 --> 00:11:25,140
remove them from this set which give us

262
00:11:25,140 --> 00:11:27,600
the number of non-empty resistors

263
00:11:27,600 --> 00:11:30,240
which can then be used to estimate the

264
00:11:30,240 --> 00:11:32,160
risk

265
00:11:32,160 --> 00:11:34,860
in the actual protocol the workers and

266
00:11:34,860 --> 00:11:37,140
the aggregator have to add some noise as

267
00:11:37,140 --> 00:11:39,300
well to achieve DP but we will not have

268
00:11:39,300 --> 00:11:42,420
time to go over those details today

269
00:11:42,420 --> 00:11:45,540
to conclude we have given a multi-party

270
00:11:45,540 --> 00:11:46,860
differentially private protocol

271
00:11:46,860 --> 00:11:49,320
operation frequency our protocol

272
00:11:49,320 --> 00:11:51,959
implementation can be found online on

273
00:11:51,959 --> 00:11:53,880
GitHub

274
00:11:53,880 --> 00:11:55,980
there are some related and ongoing works

275
00:11:55,980 --> 00:11:58,560
such as how to do privacy budgeting over

276
00:11:58,560 --> 00:12:01,440
multiple queries or how to answer time

277
00:12:01,440 --> 00:12:04,079
related rates and frequency query

278
00:12:04,079 --> 00:12:06,360
and that's all I have for today thank

279
00:12:06,360 --> 00:12:07,680
you all very much for your attention

280
00:12:07,680 --> 00:12:10,459
thank you

