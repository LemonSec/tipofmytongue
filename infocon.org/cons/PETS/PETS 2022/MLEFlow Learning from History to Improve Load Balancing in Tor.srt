1
00:00:00,799 --> 00:00:02,960
hello my name is hussein dorier i'm a

2
00:00:02,960 --> 00:00:04,560
phd student at the university of

3
00:00:04,560 --> 00:00:06,240
illinois at tuban champaign under the

4
00:00:06,240 --> 00:00:08,160
supervision of professor guerrero lerode

5
00:00:08,160 --> 00:00:10,400
and professor nikita borisov today i'm

6
00:00:10,400 --> 00:00:12,400
going to present our paper called emily

7
00:00:12,400 --> 00:00:14,240
flow learning from history to improve

8
00:00:14,240 --> 00:00:16,239
load balancing in tor

9
00:00:16,239 --> 00:00:18,960
privacy is a major concern nowadays it

10
00:00:18,960 --> 00:00:20,800
has been consistently on the headlines

11
00:00:20,800 --> 00:00:23,199
of news in recent years

12
00:00:23,199 --> 00:00:25,439
many technologies are emerging to ensure

13
00:00:25,439 --> 00:00:28,000
data and people privacy an example of a

14
00:00:28,000 --> 00:00:29,039
successfully

15
00:00:29,039 --> 00:00:30,480
implemented technology

16
00:00:30,480 --> 00:00:32,238
that seek to create a certain level of

17
00:00:32,238 --> 00:00:34,160
privacy to users are anonymous

18
00:00:34,160 --> 00:00:36,480
communication networks

19
00:00:36,480 --> 00:00:38,399
users are increasingly turning to

20
00:00:38,399 --> 00:00:40,079
anonymous communication networks to

21
00:00:40,079 --> 00:00:42,239
protect themselves from surveillance and

22
00:00:42,239 --> 00:00:44,719
online tracking anonymity networks

23
00:00:44,719 --> 00:00:46,559
provide users a way to communicate

24
00:00:46,559 --> 00:00:48,399
without revealing their identity and

25
00:00:48,399 --> 00:00:50,320
without revealing their relationship to

26
00:00:50,320 --> 00:00:52,399
third parties

27
00:00:52,399 --> 00:00:54,640
tor is the most popular anonymity

28
00:00:54,640 --> 00:00:57,120
network tor is a free software open

29
00:00:57,120 --> 00:00:59,280
source and run by volunteers it has

30
00:00:59,280 --> 00:01:02,879
millions of daily active users

31
00:01:02,879 --> 00:01:05,360
to create a connection a user chooses a

32
00:01:05,360 --> 00:01:06,880
path of three different relays to

33
00:01:06,880 --> 00:01:08,799
construct a circuit that forwards

34
00:01:08,799 --> 00:01:11,040
traffic in both directions

35
00:01:11,040 --> 00:01:13,520
only the user knows the entire path the

36
00:01:13,520 --> 00:01:15,520
relays know only their predecessor and

37
00:01:15,520 --> 00:01:17,600
successor obscuring the relationship

38
00:01:17,600 --> 00:01:20,720
between music users and destinations

39
00:01:20,720 --> 00:01:22,479
the traffic is also encrypted and

40
00:01:22,479 --> 00:01:24,400
decrypted at each node to hide the

41
00:01:24,400 --> 00:01:26,560
correspondence between incoming and

42
00:01:26,560 --> 00:01:29,840
outgoing traffic from a network observer

43
00:01:29,840 --> 00:01:31,920
despite the advantages offered from

44
00:01:31,920 --> 00:01:35,680
privacy point of view tor can be so

45
00:01:35,680 --> 00:01:37,360
it can be due to imperfect path

46
00:01:37,360 --> 00:01:39,200
allocations that we dealt with in a

47
00:01:39,200 --> 00:01:41,439
previous paper or to inaccurate three

48
00:01:41,439 --> 00:01:43,680
days capacity estimation that we did

49
00:01:43,680 --> 00:01:46,479
with in this paper

50
00:01:46,479 --> 00:01:48,560
so as an outline to this presentation

51
00:01:48,560 --> 00:01:50,159
i'm going first to present the current

52
00:01:50,159 --> 00:01:52,000
path allocation algorithm used in the

53
00:01:52,000 --> 00:01:54,479
tor network to show the importance of

54
00:01:54,479 --> 00:01:57,840
having accurate capacity estimations

55
00:01:57,840 --> 00:01:59,920
then i represent our maximum likelihood

56
00:01:59,920 --> 00:02:01,680
capacity estimation algorithm that we

57
00:02:01,680 --> 00:02:03,759
called mle flow

58
00:02:03,759 --> 00:02:06,079
and then i will present the results of

59
00:02:06,079 --> 00:02:08,080
shadow simulations that comprise the

60
00:02:08,080 --> 00:02:10,479
performance of mle flow when compared to

61
00:02:10,479 --> 00:02:13,520
other deployed algorithms for capacity

62
00:02:13,520 --> 00:02:15,280
estimation

63
00:02:15,280 --> 00:02:17,360
so first starting with the current path

64
00:02:17,360 --> 00:02:19,120
allocation algorithm used in the tor

65
00:02:19,120 --> 00:02:21,599
network

66
00:02:21,760 --> 00:02:23,680
currently the tor network uses a

67
00:02:23,680 --> 00:02:25,440
randomized assignment of flow circuits

68
00:02:25,440 --> 00:02:27,840
to relays where each user chooses the

69
00:02:27,840 --> 00:02:29,920
relays for their circuits randomly

70
00:02:29,920 --> 00:02:32,959
weighted by their estimated capacity

71
00:02:32,959 --> 00:02:34,800
an incoming user will use the random

72
00:02:34,800 --> 00:02:36,800
algorithm to choose the three relays

73
00:02:36,800 --> 00:02:38,239
forming their path

74
00:02:38,239 --> 00:02:40,640
the random algorithm receives the relay

75
00:02:40,640 --> 00:02:42,400
capacity estimates from the relay

76
00:02:42,400 --> 00:02:44,400
capacity estimation algorithm and

77
00:02:44,400 --> 00:02:46,560
creates a probability distribution over

78
00:02:46,560 --> 00:02:48,239
the relays

79
00:02:48,239 --> 00:02:50,560
this distribution is then sampled

80
00:02:50,560 --> 00:02:52,319
through three distinct relays that the

81
00:02:52,319 --> 00:02:55,599
user will use to serve the internet

82
00:02:55,599 --> 00:02:56,959
the intuition behind the random

83
00:02:56,959 --> 00:02:59,360
algorithm is that if the estimated

84
00:02:59,360 --> 00:03:01,200
capacities are equal to the true

85
00:03:01,200 --> 00:03:03,440
capacity of the relay the expected

86
00:03:03,440 --> 00:03:05,760
number of paths using each relay will be

87
00:03:05,760 --> 00:03:09,359
proportional to its bandwidth

88
00:03:10,000 --> 00:03:12,080
relay capacities are currently estimated

89
00:03:12,080 --> 00:03:14,319
using tor flow tor flow relies on two

90
00:03:14,319 --> 00:03:16,319
types of measurements the self-reported

91
00:03:16,319 --> 00:03:19,040
bandwidth and the measured bandwidth

92
00:03:19,040 --> 00:03:21,120
this version of capacity estimation has

93
00:03:21,120 --> 00:03:24,319
been in use in doors 2012.

94
00:03:24,319 --> 00:03:25,840
so starting with the self-reported

95
00:03:25,840 --> 00:03:28,239
bandwidth each relay estimates its own

96
00:03:28,239 --> 00:03:30,400
network capacity by computing the

97
00:03:30,400 --> 00:03:32,400
maximum sustained download and upload

98
00:03:32,400 --> 00:03:34,560
bandwidth over a 5 second period over

99
00:03:34,560 --> 00:03:37,360
the last 5 days and reports this value

100
00:03:37,360 --> 00:03:40,720
to directory authorities

101
00:03:42,400 --> 00:03:44,640
the self-reported value is then adjusted

102
00:03:44,640 --> 00:03:46,959
based on the result of a probe which we

103
00:03:46,959 --> 00:03:49,040
would call the measured bandwidth

104
00:03:49,040 --> 00:03:51,120
directory authorities create probe

105
00:03:51,120 --> 00:03:53,120
circuits through each relay and download

106
00:03:53,120 --> 00:03:54,159
a file

107
00:03:54,159 --> 00:03:56,000
measuring the realized bandwidth of this

108
00:03:56,000 --> 00:03:58,400
probe

109
00:03:59,680 --> 00:04:01,439
door flow then uses both those

110
00:04:01,439 --> 00:04:03,519
measurements to estimate the capacity of

111
00:04:03,519 --> 00:04:05,519
read aj

112
00:04:05,519 --> 00:04:07,840
those estimates get recomputed once an

113
00:04:07,840 --> 00:04:11,840
hour and we will call that an epoch

114
00:04:11,840 --> 00:04:13,920
this method however has a number of

115
00:04:13,920 --> 00:04:15,439
disadvantages

116
00:04:15,439 --> 00:04:17,680
a relay that is not sufficiently loaded

117
00:04:17,680 --> 00:04:19,918
may underestimate its self-reported

118
00:04:19,918 --> 00:04:21,199
bandwidth

119
00:04:21,199 --> 00:04:23,520
this leads to a well-documented ramp-up

120
00:04:23,520 --> 00:04:26,000
period of new relays where the low

121
00:04:26,000 --> 00:04:28,240
self-reported bandwidths leads to a

122
00:04:28,240 --> 00:04:30,720
small estimated capacity and hence low

123
00:04:30,720 --> 00:04:32,479
load which in turn leads to low

124
00:04:32,479 --> 00:04:35,520
self-reported bandwidth

125
00:04:35,520 --> 00:04:37,840
but even established three days see

126
00:04:37,840 --> 00:04:39,600
their self-reported bandwidth change

127
00:04:39,600 --> 00:04:41,759
over time as can be depicted in this

128
00:04:41,759 --> 00:04:43,759
plot of the self-reported bandwidth of

129
00:04:43,759 --> 00:04:45,759
10 randomly selected relays in the tor

130
00:04:45,759 --> 00:04:49,120
network over the months of may 2020

131
00:04:49,120 --> 00:04:51,280
an additional problem is that the use of

132
00:04:51,280 --> 00:04:52,880
self-reported bandwidth makes it

133
00:04:52,880 --> 00:04:54,880
possible for relay to influence its

134
00:04:54,880 --> 00:04:56,720
estimated capacity

135
00:04:56,720 --> 00:04:58,639
using the self-reported bandwidth for

136
00:04:58,639 --> 00:05:00,720
load balancing creates the opportunity

137
00:05:00,720 --> 00:05:02,479
for a low resource attack on the tor

138
00:05:02,479 --> 00:05:05,199
network in particular relay can publish

139
00:05:05,199 --> 00:05:06,880
a high self-reported bandwidth for

140
00:05:06,880 --> 00:05:08,960
itself which will cause more clients to

141
00:05:08,960 --> 00:05:11,120
choose it and creates more chances for

142
00:05:11,120 --> 00:05:13,919
it to break user's anonymity

143
00:05:13,919 --> 00:05:15,919
a previous configuration of torflow did

144
00:05:15,919 --> 00:05:18,160
not use self-reported bandwidth instead

145
00:05:18,160 --> 00:05:20,080
it adjusted the previous weight based on

146
00:05:20,080 --> 00:05:21,680
the current observation

147
00:05:21,680 --> 00:05:24,639
and the last estimated capacity

148
00:05:24,639 --> 00:05:26,639
the intuition is similar if the current

149
00:05:26,639 --> 00:05:28,639
weight of the relay is too high it will

150
00:05:28,639 --> 00:05:30,320
have a below average performance and

151
00:05:30,320 --> 00:05:32,479
hence below average measurement and its

152
00:05:32,479 --> 00:05:34,240
weight will be adjusted down and vice

153
00:05:34,240 --> 00:05:35,919
versa

154
00:05:35,919 --> 00:05:37,520
we will note that torque switch away

155
00:05:37,520 --> 00:05:39,520
from torque flow p because when deployed

156
00:05:39,520 --> 00:05:41,120
the feedback mechanism allowed the

157
00:05:41,120 --> 00:05:43,199
weights to significantly deviate from

158
00:05:43,199 --> 00:05:45,680
network capacities

159
00:05:45,680 --> 00:05:47,520
a recent effort to upgrade and

160
00:05:47,520 --> 00:05:49,440
re-engineer torqueflow has resulted in

161
00:05:49,440 --> 00:05:52,160
the development of sbws

162
00:05:52,160 --> 00:05:54,320
sbws still uses the self-reported

163
00:05:54,320 --> 00:05:55,919
bandwidth and measured bandwidth however

164
00:05:55,919 --> 00:05:57,680
it takes the minimum between between the

165
00:05:57,680 --> 00:05:58,960
self-reported bandwidth and the

166
00:05:58,960 --> 00:06:00,800
estimated capacity

167
00:06:00,800 --> 00:06:03,120
this makes the sbws implementation a

168
00:06:03,120 --> 00:06:06,639
hybrid between 204 and 24p

169
00:06:06,639 --> 00:06:08,479
it's still susceptible to underweighting

170
00:06:08,479 --> 00:06:10,639
relays with low self-reported bandwidth

171
00:06:10,639 --> 00:06:12,560
but it's more resilient to self-reported

172
00:06:12,560 --> 00:06:15,120
bandwidth that is too high

173
00:06:15,120 --> 00:06:16,880
now i'm going to present our maximum

174
00:06:16,880 --> 00:06:18,800
likelihood capacity estimation algorithm

175
00:06:18,800 --> 00:06:21,600
that we call the mle flow

176
00:06:21,600 --> 00:06:23,360
for any relay j

177
00:06:23,360 --> 00:06:25,440
in the set of all relays in the network

178
00:06:25,440 --> 00:06:28,080
that you call n the mle estimate of its

179
00:06:28,080 --> 00:06:31,440
actual capacity that we call c star of j

180
00:06:31,440 --> 00:06:34,479
will be a capacity kappa and the set of

181
00:06:34,479 --> 00:06:36,319
real positive number

182
00:06:36,319 --> 00:06:38,720
that maximizes the probability of

183
00:06:38,720 --> 00:06:40,080
observing the full history of

184
00:06:40,080 --> 00:06:42,160
measurements empty of j

185
00:06:42,160 --> 00:06:44,560
given the published weights w t of j

186
00:06:44,560 --> 00:06:47,120
over the first t plus one epochs

187
00:06:47,120 --> 00:06:49,680
this can be formulated as the arg max of

188
00:06:49,680 --> 00:06:52,479
this probability

189
00:06:52,720 --> 00:06:55,280
as assumptions to our model we consider

190
00:06:55,280 --> 00:06:57,440
a model where each user path goes

191
00:06:57,440 --> 00:06:59,599
through a single relay instead of a 3

192
00:06:59,599 --> 00:07:01,039
relays

193
00:07:01,039 --> 00:07:02,880
we consider also a synchronized model

194
00:07:02,880 --> 00:07:04,639
where time is divided into epochs and

195
00:07:04,639 --> 00:07:06,560
user connections all terminate at the

196
00:07:06,560 --> 00:07:08,319
end of each epoch

197
00:07:08,319 --> 00:07:10,080
user's arrival are

198
00:07:10,080 --> 00:07:12,240
the poisson distributed with rate lambda

199
00:07:12,240 --> 00:07:14,960
s so given the weight wt of j the number

200
00:07:14,960 --> 00:07:17,360
of paths using the j3a during the test

201
00:07:17,360 --> 00:07:20,080
epoch with a random variable x g of j

202
00:07:20,080 --> 00:07:21,840
that is a poisson distributed with

203
00:07:21,840 --> 00:07:25,919
parameters lambda as w t of j

204
00:07:25,919 --> 00:07:27,759
clients use all the bandwidth allocated

205
00:07:27,759 --> 00:07:29,599
to them we also assume that we have a

206
00:07:29,599 --> 00:07:32,800
bounded capacity set with known bounds

207
00:07:32,800 --> 00:07:34,880
using the modal assumptions that we just

208
00:07:34,880 --> 00:07:37,039
presented since we are only considering

209
00:07:37,039 --> 00:07:39,360
single relay paths the capacity of a

210
00:07:39,360 --> 00:07:41,120
relay will be divided equally among all

211
00:07:41,120 --> 00:07:43,039
the paths passing through it and hence

212
00:07:43,039 --> 00:07:44,720
we can relate the measured observation

213
00:07:44,720 --> 00:07:46,960
mt of j to the actual capacity of the

214
00:07:46,960 --> 00:07:49,599
relay c star of j by dividing c star of

215
00:07:49,599 --> 00:07:51,840
j by the number of paths passing through

216
00:07:51,840 --> 00:07:54,479
the relay x t of j plus one where this

217
00:07:54,479 --> 00:07:56,800
one refers to the prober created by the

218
00:07:56,800 --> 00:07:59,280
directory authorities

219
00:07:59,280 --> 00:08:01,680
hence using this relationship we can

220
00:08:01,680 --> 00:08:04,000
write the capacity estimate as the arg

221
00:08:04,000 --> 00:08:06,560
max of the product of poisson

222
00:08:06,560 --> 00:08:08,879
probabilities

223
00:08:08,879 --> 00:08:10,479
and hence we can

224
00:08:10,479 --> 00:08:12,800
do this maximization over the quantized

225
00:08:12,800 --> 00:08:14,879
capacity interval that we already

226
00:08:14,879 --> 00:08:17,360
defined

227
00:08:17,759 --> 00:08:20,240
using sterling approximation number w

228
00:08:20,240 --> 00:08:22,240
function and taylor series expansion we

229
00:08:22,240 --> 00:08:24,000
can find an approximation to the closed

230
00:08:24,000 --> 00:08:26,560
form solution of this maximization

231
00:08:26,560 --> 00:08:30,319
which we call mle flow cf

232
00:08:30,400 --> 00:08:32,080
if we consider the equation that we just

233
00:08:32,080 --> 00:08:34,000
presented and we suppose that the

234
00:08:34,000 --> 00:08:36,000
estimation only used the most recent

235
00:08:36,000 --> 00:08:38,000
measurement and the referee i is equal

236
00:08:38,000 --> 00:08:39,279
to t

237
00:08:39,279 --> 00:08:40,399
we can find

238
00:08:40,399 --> 00:08:41,839
this equation for the capacity

239
00:08:41,839 --> 00:08:43,760
estimation at t plus one

240
00:08:43,760 --> 00:08:45,839
if we normalize we'll find the weight at

241
00:08:45,839 --> 00:08:48,320
t plus one and if we compare this weight

242
00:08:48,320 --> 00:08:50,080
to the weight obtained after normalizing

243
00:08:50,080 --> 00:08:51,440
the estimation and the estimated

244
00:08:51,440 --> 00:08:54,560
capacities of door flow p we can see

245
00:08:54,560 --> 00:08:56,800
that or p is actually equivalent to

246
00:08:56,800 --> 00:08:59,200
estimating the capacities using mle

247
00:08:59,200 --> 00:09:01,120
considering only the last measurement

248
00:09:01,120 --> 00:09:02,880
and then normalizing to get the weight

249
00:09:02,880 --> 00:09:04,240
vector

250
00:09:04,240 --> 00:09:06,240
hence while torpro will only use the

251
00:09:06,240 --> 00:09:07,680
last measurement to estimate the

252
00:09:07,680 --> 00:09:10,000
capacity of relay mle flow will take

253
00:09:10,000 --> 00:09:11,440
into account the full history of

254
00:09:11,440 --> 00:09:12,800
measurements

255
00:09:12,800 --> 00:09:15,519
as we can compare both those

256
00:09:15,519 --> 00:09:17,040
algorithms

257
00:09:17,040 --> 00:09:19,600
and we find that for both algorithms for

258
00:09:19,600 --> 00:09:21,920
any relay j the expected value of the

259
00:09:21,920 --> 00:09:24,560
capacity estimates will go to the actual

260
00:09:24,560 --> 00:09:27,519
capacity as the rate of arrival of users

261
00:09:27,519 --> 00:09:29,519
goes to infinity

262
00:09:29,519 --> 00:09:31,839
we also find that the variances of mle

263
00:09:31,839 --> 00:09:34,399
flow closed form estimates are always

264
00:09:34,399 --> 00:09:36,560
less than the variances of the estimates

265
00:09:36,560 --> 00:09:38,640
found using tor4b

266
00:09:38,640 --> 00:09:40,959
and as the st goes to infinity the

267
00:09:40,959 --> 00:09:43,600
variance of the mle flow closed from

268
00:09:43,600 --> 00:09:46,800
estimates will goes to zero

269
00:09:46,800 --> 00:09:48,800
i'm going now to present our shadow

270
00:09:48,800 --> 00:09:50,480
simulator result

271
00:09:50,480 --> 00:09:52,000
we consider the three percent door

272
00:09:52,000 --> 00:09:55,040
network that contains 196 store relays

273
00:09:55,040 --> 00:09:57,440
we simulated our network for 22 epochs

274
00:09:57,440 --> 00:10:00,399
with a rate of arrival of 2000

275
00:10:00,399 --> 00:10:02,160
in this graph we compare the error

276
00:10:02,160 --> 00:10:03,680
between the actual capacity and the

277
00:10:03,680 --> 00:10:06,079
estimated capacities when using mle flow

278
00:10:06,079 --> 00:10:09,279
torqueflow and spws algorithms as we can

279
00:10:09,279 --> 00:10:11,120
see for the three different classes of

280
00:10:11,120 --> 00:10:13,760
relays cards middles and exits we can

281
00:10:13,760 --> 00:10:16,800
see that the error when using mle flow

282
00:10:16,800 --> 00:10:19,120
is much lower than when using tor4p and

283
00:10:19,120 --> 00:10:21,839
sbws especially for exit relays for

284
00:10:21,839 --> 00:10:24,320
example where the error average was

285
00:10:24,320 --> 00:10:26,880
around five percent when using mle flow

286
00:10:26,880 --> 00:10:29,200
while it was around thirty percent when

287
00:10:29,200 --> 00:10:30,160
using a

288
00:10:30,160 --> 00:10:36,000
torso p and above 80 when using spws

289
00:10:37,360 --> 00:10:40,079
an important question is how does this

290
00:10:40,079 --> 00:10:42,720
affect the performance of tour users in

291
00:10:42,720 --> 00:10:44,959
fact using shadow simulations we found

292
00:10:44,959 --> 00:10:47,680
that around 75 percent of all clients

293
00:10:47,680 --> 00:10:50,160
using mle flow queue estimates achieved

294
00:10:50,160 --> 00:10:52,320
the higher bandwidth compared to clients

295
00:10:52,320 --> 00:10:55,440
using tor4 estimates

296
00:10:55,440 --> 00:10:57,920
so as takeaways from this presentation

297
00:10:57,920 --> 00:10:59,920
mle flow ensures a fairer and more

298
00:10:59,920 --> 00:11:01,279
accurate bandwidth application in the

299
00:11:01,279 --> 00:11:02,959
total network

300
00:11:02,959 --> 00:11:04,800
manage flow uses the full history of

301
00:11:04,800 --> 00:11:06,079
measurements

302
00:11:06,079 --> 00:11:06,880
it

303
00:11:06,880 --> 00:11:08,720
leads to more accurate relays capacity

304
00:11:08,720 --> 00:11:10,240
estimates

305
00:11:10,240 --> 00:11:12,000
and further bandwidth allocation between

306
00:11:12,000 --> 00:11:13,839
users

307
00:11:13,839 --> 00:11:16,160
showed that our theoretical results were

308
00:11:16,160 --> 00:11:18,320
validated using both low fidelity and

309
00:11:18,320 --> 00:11:20,399
high fidelity simulations

310
00:11:20,399 --> 00:11:23,640
thank you

