1
00:00:00,560 --> 00:00:02,240
hello and welcome to the presentation of

2
00:00:02,240 --> 00:00:04,640
our paper privately connecting mobility

3
00:00:04,640 --> 00:00:06,319
to infectious diseases via black

4
00:00:06,319 --> 00:00:08,559
photography this paper is a joint work

5
00:00:08,559 --> 00:00:10,559
with alexandros bambolidis alessandro

6
00:00:10,559 --> 00:00:12,799
pony lucas helminger daniel carles

7
00:00:12,799 --> 00:00:15,759
christian reichberger and me romanvari

8
00:00:15,759 --> 00:00:17,199
when we have a look at the recent code

9
00:00:17,199 --> 00:00:19,359
19 when they make we can see that a lot

10
00:00:19,359 --> 00:00:20,880
of technical solutions have been

11
00:00:20,880 --> 00:00:22,560
proposed to help the population with

12
00:00:22,560 --> 00:00:24,720
contact tracing so people could decide

13
00:00:24,720 --> 00:00:26,880
to install an app activate bluetooth and

14
00:00:26,880 --> 00:00:28,240
when they have been in contact with

15
00:00:28,240 --> 00:00:30,960
another app user who has later been

16
00:00:30,960 --> 00:00:33,680
there's the positive with the virus and

17
00:00:33,680 --> 00:00:35,360
i get the notification from the app that

18
00:00:35,360 --> 00:00:37,440
they might be positive as well

19
00:00:37,440 --> 00:00:38,960
however the success of this app

20
00:00:38,960 --> 00:00:41,280
crucially relies on a large chunk of the

21
00:00:41,280 --> 00:00:43,440
population actually installing and using

22
00:00:43,440 --> 00:00:44,640
this app

23
00:00:44,640 --> 00:00:47,600
so when we wanted to help the spread

24
00:00:47,600 --> 00:00:49,360
containing the spread of the disease we

25
00:00:49,360 --> 00:00:50,879
thought of a different solution which

26
00:00:50,879 --> 00:00:52,559
does not rely on an app

27
00:00:52,559 --> 00:00:54,640
so what we wanted to do is we wanted to

28
00:00:54,640 --> 00:00:56,079
create a

29
00:00:56,079 --> 00:00:57,920
heat map which aggregates the location

30
00:00:57,920 --> 00:01:00,000
data of infected individuals and this

31
00:01:00,000 --> 00:01:02,480
heat map is intended to keep track of

32
00:01:02,480 --> 00:01:04,319
the spread of the disease and help

33
00:01:04,319 --> 00:01:07,680
policy makers in making some measures

34
00:01:07,680 --> 00:01:10,000
which help containing that disease and

35
00:01:10,000 --> 00:01:11,760
for example they can take some targeted

36
00:01:11,760 --> 00:01:14,560
measures for closing off public places

37
00:01:14,560 --> 00:01:16,479
which are located in inside of some

38
00:01:16,479 --> 00:01:18,960
hotspots and crucially our approach does

39
00:01:18,960 --> 00:01:20,640
not rely on the population installing

40
00:01:20,640 --> 00:01:23,040
some apps they just need to run around

41
00:01:23,040 --> 00:01:24,960
with their mobile phones

42
00:01:24,960 --> 00:01:26,799
so when we want to create this heat map

43
00:01:26,799 --> 00:01:28,640
of the aggregated location data of

44
00:01:28,640 --> 00:01:31,200
infected individuals we want to use do

45
00:01:31,200 --> 00:01:33,520
data sets so on one hand we want to use

46
00:01:33,520 --> 00:01:35,360
the location data which is collected

47
00:01:35,360 --> 00:01:37,600
from mobile network operators and on the

48
00:01:37,600 --> 00:01:39,439
other hand we want to use

49
00:01:39,439 --> 00:01:41,520
health records from health authorities

50
00:01:41,520 --> 00:01:43,360
which know which individuals in the

51
00:01:43,360 --> 00:01:46,240
population are actually infected

52
00:01:46,240 --> 00:01:48,159
however we cannot really trivially

53
00:01:48,159 --> 00:01:50,560
combine these two data sets to create

54
00:01:50,560 --> 00:01:52,479
our heat map because we are dealing with

55
00:01:52,479 --> 00:01:54,560
very privacy sensitive data sets one

56
00:01:54,560 --> 00:01:56,479
hand we have a location data and on the

57
00:01:56,479 --> 00:01:57,920
other hand we have health records so

58
00:01:57,920 --> 00:02:01,040
very sensitive data sets so our goal was

59
00:02:01,040 --> 00:02:02,560
to construct a

60
00:02:02,560 --> 00:02:05,040
protocol which on one hand produces this

61
00:02:05,040 --> 00:02:06,799
heat map that we want to

62
00:02:06,799 --> 00:02:08,959
create and on the other hand protects

63
00:02:08,959 --> 00:02:11,280
both of these data sets so we do not

64
00:02:11,280 --> 00:02:13,760
want to give anyone the ability to learn

65
00:02:13,760 --> 00:02:15,200
who is actually infected with the

66
00:02:15,200 --> 00:02:17,040
disease and on the other hand we do not

67
00:02:17,040 --> 00:02:19,360
want anyone to give a tool to track the

68
00:02:19,360 --> 00:02:20,840
location of any

69
00:02:20,840 --> 00:02:23,200
individual so now let's have a look at

70
00:02:23,200 --> 00:02:25,680
um how we achieved this price preserving

71
00:02:25,680 --> 00:02:27,840
heatmap protocol

72
00:02:27,840 --> 00:02:30,239
so when we have a look at

73
00:02:30,239 --> 00:02:32,319
the actual processing creating this heat

74
00:02:32,319 --> 00:02:34,640
map we can see that it actually boils

75
00:02:34,640 --> 00:02:36,800
down to a matrix vector multiplication

76
00:02:36,800 --> 00:02:38,720
so here on the left side we have the

77
00:02:38,720 --> 00:02:40,640
input of the health authority which is

78
00:02:40,640 --> 00:02:42,800
basically a vector which indicates which

79
00:02:42,800 --> 00:02:44,959
people are actually infected so a zero

80
00:02:44,959 --> 00:02:46,800
here indicates that the person

81
00:02:46,800 --> 00:02:49,360
corresponding to id2 is not infected and

82
00:02:49,360 --> 00:02:51,440
the one here indicates that the

83
00:02:51,440 --> 00:02:53,360
person to corresponding to id1 is

84
00:02:53,360 --> 00:02:55,599
infected with the virus the matrix on

85
00:02:55,599 --> 00:02:57,120
the other hand is the input of the

86
00:02:57,120 --> 00:02:59,360
mobile network operator and the elements

87
00:02:59,360 --> 00:03:01,519
in a matrix indicate how long each

88
00:03:01,519 --> 00:03:03,120
person has

89
00:03:03,120 --> 00:03:05,599
has been connected to a given cell tower

90
00:03:05,599 --> 00:03:07,120
and when we then perform this matrix

91
00:03:07,120 --> 00:03:09,440
vector multiplication the result is our

92
00:03:09,440 --> 00:03:12,159
desired heat map which indicates uh how

93
00:03:12,159 --> 00:03:15,280
long the aggregate that uh

94
00:03:15,280 --> 00:03:17,120
how long all individuals which are

95
00:03:17,120 --> 00:03:19,599
infected have aggregately spent on a

96
00:03:19,599 --> 00:03:21,599
given cell tower

97
00:03:21,599 --> 00:03:23,840
and we now have a look at how we can

98
00:03:23,840 --> 00:03:25,519
realize this matrix vector

99
00:03:25,519 --> 00:03:27,280
multiplication without leaking these

100
00:03:27,280 --> 00:03:28,640
data sets

101
00:03:28,640 --> 00:03:30,480
so our first breast enhancing technology

102
00:03:30,480 --> 00:03:33,120
that we use is homomorphic encryption so

103
00:03:33,120 --> 00:03:34,879
basically when the health authority

104
00:03:34,879 --> 00:03:37,519
sends its identifiers on who is infected

105
00:03:37,519 --> 00:03:39,840
and not to the mobile network operator

106
00:03:39,840 --> 00:03:41,920
it uses a homomorphic encryption scheme

107
00:03:41,920 --> 00:03:44,840
to encrypt this input vector of the

108
00:03:44,840 --> 00:03:46,400
protocol

109
00:03:46,400 --> 00:03:48,159
so it's a the input is actually

110
00:03:48,159 --> 00:03:50,080
encrypted so the mobile network operator

111
00:03:50,080 --> 00:03:52,799
is not able to learn who is infected but

112
00:03:52,799 --> 00:03:54,640
since it is a homomorphic encryption

113
00:03:54,640 --> 00:03:57,599
scheme it is still able to combine

114
00:03:57,599 --> 00:03:59,519
this encrypted vector with its location

115
00:03:59,519 --> 00:04:01,760
data matrix and produce an encrypted

116
00:04:01,760 --> 00:04:03,920
version of the desired heat map and once

117
00:04:03,920 --> 00:04:05,680
it's done it sends back this heat map to

118
00:04:05,680 --> 00:04:08,239
the health authority who then is the

119
00:04:08,239 --> 00:04:10,640
only one who has access to the secret

120
00:04:10,640 --> 00:04:12,560
decryption key and is the only one who

121
00:04:12,560 --> 00:04:14,400
can actually get the final heat map of

122
00:04:14,400 --> 00:04:15,920
the protocol

123
00:04:15,920 --> 00:04:17,600
homomorphic encryption on one hand

124
00:04:17,600 --> 00:04:19,759
protects the patient identifiers and on

125
00:04:19,759 --> 00:04:21,839
the other hand since the location data

126
00:04:21,839 --> 00:04:24,000
is combined with the ciphertext

127
00:04:24,000 --> 00:04:26,479
with this homomorphic ciphertext

128
00:04:26,479 --> 00:04:29,199
the location data is not uh leaked by

129
00:04:29,199 --> 00:04:31,759
the homomorphic encryption scheme itself

130
00:04:31,759 --> 00:04:33,520
however this protocol has another

131
00:04:33,520 --> 00:04:35,440
problem and that is that once the client

132
00:04:35,440 --> 00:04:37,840
has encrypted decrypted the heat map uh

133
00:04:37,840 --> 00:04:39,680
the heat map still can leak location

134
00:04:39,680 --> 00:04:42,479
data for example consider when the query

135
00:04:42,479 --> 00:04:44,880
consists of only one patient or we have

136
00:04:44,880 --> 00:04:46,639
two patients from uh completely

137
00:04:46,639 --> 00:04:48,639
different regions in a country then

138
00:04:48,639 --> 00:04:50,080
these location profiles of these

139
00:04:50,080 --> 00:04:52,160
patients are clearly visible on the

140
00:04:52,160 --> 00:04:53,840
final heat map

141
00:04:53,840 --> 00:04:56,240
so in the paper we propose to protect

142
00:04:56,240 --> 00:04:58,400
against this inherent leakage of this

143
00:04:58,400 --> 00:05:01,120
heat map by using differential privacy

144
00:05:01,120 --> 00:05:03,199
and this basically works by adding some

145
00:05:03,199 --> 00:05:05,199
correctly parameterized noise to the

146
00:05:05,199 --> 00:05:07,520
output of the protocol and this achieves

147
00:05:07,520 --> 00:05:09,360
that the heat map is statistically

148
00:05:09,360 --> 00:05:11,520
independent to the contribution to an

149
00:05:11,520 --> 00:05:12,720
individual

150
00:05:12,720 --> 00:05:14,800
so how does this look in practice

151
00:05:14,800 --> 00:05:16,479
so here on the left side we have created

152
00:05:16,479 --> 00:05:18,800
a heat map for london where we only

153
00:05:18,800 --> 00:05:21,759
included one person and you can clearly

154
00:05:21,759 --> 00:05:23,919
see the location profile of this person

155
00:05:23,919 --> 00:05:26,160
on the heatmap on the right side we then

156
00:05:26,160 --> 00:05:28,560
apply differential privacy and you can

157
00:05:28,560 --> 00:05:30,880
clearly also see that the location data

158
00:05:30,880 --> 00:05:33,120
is drowned in noise so

159
00:05:33,120 --> 00:05:34,960
the location profile of this individual

160
00:05:34,960 --> 00:05:37,520
is not visible on the heat map anymore

161
00:05:37,520 --> 00:05:39,680
but clearly this also does not give any

162
00:05:39,680 --> 00:05:41,680
utility of the heat

163
00:05:41,680 --> 00:05:44,720
then the image changes when we include a

164
00:05:44,720 --> 00:05:46,479
lot of more patients into the heatmap

165
00:05:46,479 --> 00:05:48,160
protocol so here on the left side we

166
00:05:48,160 --> 00:05:50,240
have created a heatmap for 600 infected

167
00:05:50,240 --> 00:05:52,639
people and on the right side we also

168
00:05:52,639 --> 00:05:54,240
applied differential privacy to this

169
00:05:54,240 --> 00:05:55,600
heat map

170
00:05:55,600 --> 00:05:57,680
and what you can clearly see here that

171
00:05:57,680 --> 00:05:59,759
even though individual's location is

172
00:05:59,759 --> 00:06:01,600
drowned in the noise when we have a

173
00:06:01,600 --> 00:06:02,880
hotspot here on the left side this

174
00:06:02,880 --> 00:06:04,639
hotspot is also clearly visible on the

175
00:06:04,639 --> 00:06:06,479
right side so the utility of the heat

176
00:06:06,479 --> 00:06:08,400
map is still preserved even though we

177
00:06:08,400 --> 00:06:11,280
are using differential privacy

178
00:06:11,280 --> 00:06:12,639
so so far

179
00:06:12,639 --> 00:06:14,319
what we have achieved is that the

180
00:06:14,319 --> 00:06:16,319
patient's identifiers is are protected

181
00:06:16,319 --> 00:06:18,240
by homomorphic encryption and the

182
00:06:18,240 --> 00:06:19,759
location data of the mobile network

183
00:06:19,759 --> 00:06:21,759
operator is protected by differential

184
00:06:21,759 --> 00:06:22,800
privacy

185
00:06:22,800 --> 00:06:25,120
however the protocol so far

186
00:06:25,120 --> 00:06:28,160
assumes that all parties behave honestly

187
00:06:28,160 --> 00:06:29,759
and the protocol does not protect

188
00:06:29,759 --> 00:06:31,520
against for example malicious queries

189
00:06:31,520 --> 00:06:33,600
from the health authorities so if they

190
00:06:33,600 --> 00:06:35,280
want to track an individual what they

191
00:06:35,280 --> 00:06:37,919
can do is that they when they

192
00:06:37,919 --> 00:06:40,080
craft the input vector which in our

193
00:06:40,080 --> 00:06:42,800
protocol is assumed to be 01 they can

194
00:06:42,800 --> 00:06:45,360
create set this value of this targeted

195
00:06:45,360 --> 00:06:48,000
individual to a much larger value and

196
00:06:48,000 --> 00:06:50,479
what this achieves is that it basically

197
00:06:50,479 --> 00:06:52,960
in the output heat map it um

198
00:06:52,960 --> 00:06:55,199
it increases the contribution of this

199
00:06:55,199 --> 00:06:57,039
single individual the location data of

200
00:06:57,039 --> 00:06:58,639
this individual individual is then

201
00:06:58,639 --> 00:07:00,880
clearly visible on this heat map

202
00:07:00,880 --> 00:07:03,360
and since this is basically a hotspot on

203
00:07:03,360 --> 00:07:05,199
its own differential privacy does not

204
00:07:05,199 --> 00:07:07,280
protect against this kind of attack

205
00:07:07,280 --> 00:07:09,120
and also since we're using homomorphic

206
00:07:09,120 --> 00:07:11,120
encryption the mobile network operator

207
00:07:11,120 --> 00:07:13,680
cannot trivially check whether this

208
00:07:13,680 --> 00:07:15,840
input vector consists of just zeros and

209
00:07:15,840 --> 00:07:16,800
ones

210
00:07:16,800 --> 00:07:18,560
so we have to come up with a different

211
00:07:18,560 --> 00:07:20,319
method to protect against this kind of

212
00:07:20,319 --> 00:07:22,639
attacks and what we do is we have

213
00:07:22,639 --> 00:07:24,080
derived some

214
00:07:24,080 --> 00:07:25,919
invalidation techniques from zero

215
00:07:25,919 --> 00:07:28,000
knowledge proofs and they have the the

216
00:07:28,000 --> 00:07:30,080
goal to invalidate the heat map if you

217
00:07:30,080 --> 00:07:31,919
detect malicious behavior

218
00:07:31,919 --> 00:07:34,000
so how does this work so basically our

219
00:07:34,000 --> 00:07:35,919
goal is that we add some value to the

220
00:07:35,919 --> 00:07:38,639
heat map so i'm masked with heat map and

221
00:07:38,639 --> 00:07:40,800
if the client query is honest so if it

222
00:07:40,800 --> 00:07:43,120
just contains zeros and ones then its

223
00:07:43,120 --> 00:07:44,800
mask will be zero and does not affect

224
00:07:44,800 --> 00:07:46,160
the heatmap

225
00:07:46,160 --> 00:07:48,240
but if you detect malicious behavior

226
00:07:48,240 --> 00:07:50,400
then the mask should be random values

227
00:07:50,400 --> 00:07:53,120
and invalidate the heat map

228
00:07:53,120 --> 00:07:55,440
and our mask our technique

229
00:07:55,440 --> 00:07:57,840
relies on one simple observation that

230
00:07:57,840 --> 00:07:59,840
basically is that when we

231
00:07:59,840 --> 00:08:01,759
subtract the

232
00:08:01,759 --> 00:08:04,639
each element of the vector by 1 and

233
00:08:04,639 --> 00:08:07,039
multiply it to the original vector then

234
00:08:07,039 --> 00:08:10,319
this results in the zero vector if and

235
00:08:10,319 --> 00:08:11,759
only if the

236
00:08:11,759 --> 00:08:13,759
initial vector contains only zeros and

237
00:08:13,759 --> 00:08:16,639
ones and in the paper we show how we can

238
00:08:16,639 --> 00:08:19,280
transform this uh simple observation

239
00:08:19,280 --> 00:08:21,759
into this uh mask here which provides a

240
00:08:21,759 --> 00:08:24,160
high statistical security so with this

241
00:08:24,160 --> 00:08:26,639
they take with this technique we can

242
00:08:26,639 --> 00:08:28,800
invalidate uh the result for malicious

243
00:08:28,800 --> 00:08:30,879
queries so that the health authority

244
00:08:30,879 --> 00:08:33,039
cannot track the location data of any

245
00:08:33,039 --> 00:08:34,479
individuals

246
00:08:34,479 --> 00:08:36,159
so so far we have constructed this

247
00:08:36,159 --> 00:08:38,320
protocol and it protects both of these

248
00:08:38,320 --> 00:08:40,640
there highly sensitive data sets which

249
00:08:40,640 --> 00:08:42,399
are involved

250
00:08:42,399 --> 00:08:44,159
so we then of course also implemented

251
00:08:44,159 --> 00:08:46,399
this protocol and we use the blast plus

252
00:08:46,399 --> 00:08:48,399
as programming language and we're using

253
00:08:48,399 --> 00:08:50,320
the microsoft c library for homomorphic

254
00:08:50,320 --> 00:08:52,640
encryption and we benchmarked this

255
00:08:52,640 --> 00:08:55,680
protocol for for um for creating a heat

256
00:08:55,680 --> 00:08:57,040
map of 8 million

257
00:08:57,040 --> 00:08:59,360
subscribers which is for enough for

258
00:08:59,360 --> 00:09:01,040
example for creating heat map of the

259
00:09:01,040 --> 00:09:03,279
whole country of austria or larger

260
00:09:03,279 --> 00:09:04,880
cities such as singapore and new york

261
00:09:04,880 --> 00:09:07,440
city and our benchmark show that

262
00:09:07,440 --> 00:09:10,160
creating one of these heat maps just

263
00:09:10,160 --> 00:09:12,720
takes 70 minutes which is a very

264
00:09:12,720 --> 00:09:14,720
feasible runtime in practice

265
00:09:14,720 --> 00:09:16,720
and when we would outsource this

266
00:09:16,720 --> 00:09:18,480
computation to amazon cloud this would

267
00:09:18,480 --> 00:09:20,880
correspond to just paying five dollars

268
00:09:20,880 --> 00:09:22,720
so this shows that it's very feasible to

269
00:09:22,720 --> 00:09:24,800
create these heat maps maybe once a week

270
00:09:24,800 --> 00:09:27,279
in practice

271
00:09:27,279 --> 00:09:28,800
so but when we want to deploy this in

272
00:09:28,800 --> 00:09:31,440
practice we need to discuss some uh some

273
00:09:31,440 --> 00:09:33,440
properties of the protocol so on one

274
00:09:33,440 --> 00:09:34,880
hand when we what we have seen in the

275
00:09:34,880 --> 00:09:36,959
beginning is that the health authority

276
00:09:36,959 --> 00:09:39,120
and the mobile network operator needs to

277
00:09:39,120 --> 00:09:40,880
agree on some indices so to say that

278
00:09:40,880 --> 00:09:43,279
then id one corresponds to dispersion

279
00:09:43,279 --> 00:09:45,920
and so on so if we wouldn't do that then

280
00:09:45,920 --> 00:09:47,600
the mobile network operator wouldn't be

281
00:09:47,600 --> 00:09:49,680
able to construct the correct matrix for

282
00:09:49,680 --> 00:09:51,760
that and in a paper we discussed that we

283
00:09:51,760 --> 00:09:53,440
can use existing private set

284
00:09:53,440 --> 00:09:55,519
intersection solutions to for this

285
00:09:55,519 --> 00:09:58,320
agreeing on indices parts and this

286
00:09:58,320 --> 00:09:59,600
is

287
00:09:59,600 --> 00:10:02,079
adds comparably low random and

288
00:10:02,079 --> 00:10:03,600
communication overhead to the rest of

289
00:10:03,600 --> 00:10:05,279
the protocol

290
00:10:05,279 --> 00:10:07,040
another thing to consider when we want

291
00:10:07,040 --> 00:10:08,959
to deploy this in practice is that

292
00:10:08,959 --> 00:10:11,120
people might not want to be part of this

293
00:10:11,120 --> 00:10:12,959
computation so when we have a look at

294
00:10:12,959 --> 00:10:15,120
the contract racing approach

295
00:10:15,120 --> 00:10:17,440
people who don't want to be part of the

296
00:10:17,440 --> 00:10:19,279
protocol they simply do not install the

297
00:10:19,279 --> 00:10:21,360
app so installing the app is basically

298
00:10:21,360 --> 00:10:23,200
an opt-in approach to be part of the

299
00:10:23,200 --> 00:10:24,560
protocol

300
00:10:24,560 --> 00:10:27,200
for our heatmap protocol when we also

301
00:10:27,200 --> 00:10:28,480
want to give the

302
00:10:28,480 --> 00:10:29,600
the

303
00:10:29,600 --> 00:10:31,920
people the possibility to not be part of

304
00:10:31,920 --> 00:10:33,760
the protocol we can also construct an

305
00:10:33,760 --> 00:10:34,800
opt-in

306
00:10:34,800 --> 00:10:37,200
a solution by let's say

307
00:10:37,200 --> 00:10:38,880
letting them decide to be part of the

308
00:10:38,880 --> 00:10:41,040
protocol when they get the positive test

309
00:10:41,040 --> 00:10:42,399
result for example if they get it from

310
00:10:42,399 --> 00:10:44,000
the doctors they can say yes i want to

311
00:10:44,000 --> 00:10:46,160
be part of the protocol and also when

312
00:10:46,160 --> 00:10:48,000
they get an email they can reply yes i

313
00:10:48,000 --> 00:10:50,640
want to be part of this protocol as well

314
00:10:50,640 --> 00:10:52,959
and we conjecture that our protocol is

315
00:10:52,959 --> 00:10:55,120
still useful even though when only a

316
00:10:55,120 --> 00:10:56,959
small part of the population agrees to

317
00:10:56,959 --> 00:10:58,880
be part of the protocol so that the

318
00:10:58,880 --> 00:11:00,959
protocol will produce

319
00:11:00,959 --> 00:11:04,000
a nice and useful heat map which help to

320
00:11:04,000 --> 00:11:06,480
drag the spread of the disease

321
00:11:06,480 --> 00:11:09,120
so to conclude this presentation so we

322
00:11:09,120 --> 00:11:11,600
have created a protocol which allows to

323
00:11:11,600 --> 00:11:13,360
reduce the heat map of the aggregated

324
00:11:13,360 --> 00:11:15,040
location data of only infected

325
00:11:15,040 --> 00:11:18,719
individuals and this helps in

326
00:11:18,800 --> 00:11:20,320
tracking the spread of the disease and

327
00:11:20,320 --> 00:11:23,519
helps government officials with

328
00:11:23,519 --> 00:11:25,920
taking targeted measures and we realize

329
00:11:25,920 --> 00:11:27,760
this protocols by combining homomorphic

330
00:11:27,760 --> 00:11:29,839
encryption differential privacy and

331
00:11:29,839 --> 00:11:31,519
invalidation techniques that we derived

332
00:11:31,519 --> 00:11:33,200
from zero knowledge proofs

333
00:11:33,200 --> 00:11:34,720
so in our paper we have much more

334
00:11:34,720 --> 00:11:36,640
details about this protocol and this is

335
00:11:36,640 --> 00:11:39,920
publicly available on eprint and also

336
00:11:39,920 --> 00:11:42,000
our implementation is publicly available

337
00:11:42,000 --> 00:11:43,680
it's an open source implementation you

338
00:11:43,680 --> 00:11:46,800
can get here on github with this link

339
00:11:46,800 --> 00:11:48,640
so thank you for your attention if you

340
00:11:48,640 --> 00:11:49,839
have any questions regarding your

341
00:11:49,839 --> 00:11:51,680
protocol please do not hesitate to ask

342
00:11:51,680 --> 00:11:56,079
to any conference so thanks again

