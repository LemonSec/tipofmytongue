1
00:00:01,439 --> 00:00:03,679
hi i'm marilyn and i'm here to talk

2
00:00:03,679 --> 00:00:05,359
about our work on the cost of

3
00:00:05,359 --> 00:00:06,960
suppressing volume for encrypted

4
00:00:06,960 --> 00:00:08,160
multi-maps

5
00:00:08,160 --> 00:00:10,240
and this is joint work with megumi ando

6
00:00:10,240 --> 00:00:12,480
from mitre

7
00:00:12,480 --> 00:00:14,559
a multi-map is a data structure that

8
00:00:14,559 --> 00:00:17,440
maps labels to tuples of values and a

9
00:00:17,440 --> 00:00:20,800
tuple can contain multiple values in it

10
00:00:20,800 --> 00:00:22,880
a multi-map supports get and put

11
00:00:22,880 --> 00:00:25,119
operations where the get operation

12
00:00:25,119 --> 00:00:27,680
queries for a label and receives all the

13
00:00:27,680 --> 00:00:30,000
corresponding values for that label and

14
00:00:30,000 --> 00:00:31,760
the put operation allows for the

15
00:00:31,760 --> 00:00:34,000
addition of new labels and values into

16
00:00:34,000 --> 00:00:36,079
the multimap

17
00:00:36,079 --> 00:00:38,079
multi-maps are very versatile structures

18
00:00:38,079 --> 00:00:40,320
and are used for a variety of purposes

19
00:00:40,320 --> 00:00:42,640
most commonly to create search indices

20
00:00:42,640 --> 00:00:45,520
and database indices

21
00:00:45,520 --> 00:00:47,360
structure encryption is a cryptographic

22
00:00:47,360 --> 00:00:49,120
primitive that allows a client to

23
00:00:49,120 --> 00:00:51,520
encrypt and upload a data structure to

24
00:00:51,520 --> 00:00:53,199
an untrusted server

25
00:00:53,199 --> 00:00:54,800
in this talk we will be talking about

26
00:00:54,800 --> 00:00:56,480
multi-maps and therefore the multi-map

27
00:00:56,480 --> 00:00:59,840
will be the running example

28
00:00:59,840 --> 00:01:01,600
structure encryption also allows a

29
00:01:01,600 --> 00:01:03,520
client to later query

30
00:01:03,520 --> 00:01:05,519
for labels in this multi-map using

31
00:01:05,519 --> 00:01:06,640
encrypted

32
00:01:06,640 --> 00:01:08,880
labels which are also referred to as

33
00:01:08,880 --> 00:01:11,040
query tokens and the client should

34
00:01:11,040 --> 00:01:14,080
receive in response the encrypted values

35
00:01:14,080 --> 00:01:17,520
that correspond to this label

36
00:01:17,840 --> 00:01:20,479
the adversary or the untrusted server

37
00:01:20,479 --> 00:01:22,479
observes the execution of the structured

38
00:01:22,479 --> 00:01:24,880
encryption scheme and learns meaningful

39
00:01:24,880 --> 00:01:26,799
information both about the underlying

40
00:01:26,799 --> 00:01:29,119
multi-map as well as the labels that are

41
00:01:29,119 --> 00:01:30,640
being queried

42
00:01:30,640 --> 00:01:32,960
and this information is referred to as

43
00:01:32,960 --> 00:01:35,439
leakage

44
00:01:35,680 --> 00:01:37,280
the quantification of leakage in

45
00:01:37,280 --> 00:01:39,680
structure encryption allows for flexible

46
00:01:39,680 --> 00:01:41,439
trade-offs between security and

47
00:01:41,439 --> 00:01:42,960
efficiency of structured encryption

48
00:01:42,960 --> 00:01:45,439
schemes

49
00:01:46,240 --> 00:01:47,759
in particular

50
00:01:47,759 --> 00:01:48,920
i would like to explain the

51
00:01:48,920 --> 00:01:51,040
indistinguishability definition for a

52
00:01:51,040 --> 00:01:53,280
leakage profile l for structure

53
00:01:53,280 --> 00:01:55,200
encryption this definition is the one

54
00:01:55,200 --> 00:01:56,799
that we use in our paper and for our

55
00:01:56,799 --> 00:01:58,880
proofs

56
00:01:58,880 --> 00:02:00,719
so first the adversary selects two

57
00:02:00,719 --> 00:02:02,560
multi-maps

58
00:02:02,560 --> 00:02:05,520
and sends them over to the challenger

59
00:02:05,520 --> 00:02:07,600
the challenger chooses a bit and

60
00:02:07,600 --> 00:02:09,280
therefore one of these multi-maps

61
00:02:09,280 --> 00:02:11,599
uniformly at random

62
00:02:11,599 --> 00:02:13,599
and encrypts the multi-map and returns

63
00:02:13,599 --> 00:02:16,799
it to the adversary

64
00:02:17,280 --> 00:02:19,280
then the adversary selects two sets of

65
00:02:19,280 --> 00:02:21,360
queries

66
00:02:21,360 --> 00:02:23,680
and under the condition that the leakage

67
00:02:23,680 --> 00:02:25,760
function evaluated on the first

68
00:02:25,760 --> 00:02:27,920
multi-map and the first set of queries

69
00:02:27,920 --> 00:02:29,599
is equal to the leakage function

70
00:02:29,599 --> 00:02:31,440
evaluated on the second multi-map and

71
00:02:31,440 --> 00:02:34,640
the second set of queries

72
00:02:35,280 --> 00:02:37,440
and finally the challenger sends back

73
00:02:37,440 --> 00:02:39,280
the encrypted queries or the tokens

74
00:02:39,280 --> 00:02:42,000
corresponding to the labels in the bith

75
00:02:42,000 --> 00:02:44,239
set

76
00:02:45,120 --> 00:02:46,720
at the end of the game the adversary

77
00:02:46,720 --> 00:02:48,239
tries to guess

78
00:02:48,239 --> 00:02:50,319
which multi-map and set of queries were

79
00:02:50,319 --> 00:02:51,519
chosen

80
00:02:51,519 --> 00:02:53,840
and the security requirement of this

81
00:02:53,840 --> 00:02:56,080
game is that the adversary not be able

82
00:02:56,080 --> 00:02:58,400
to guess with probability much greater

83
00:02:58,400 --> 00:03:00,319
than one-half which is the same as a

84
00:03:00,319 --> 00:03:02,958
random guess

85
00:03:03,200 --> 00:03:04,800
to start with some background for our

86
00:03:04,800 --> 00:03:05,599
work

87
00:03:05,599 --> 00:03:07,440
leakage profiles have been studied in

88
00:03:07,440 --> 00:03:09,680
many ways and one of the lines of work

89
00:03:09,680 --> 00:03:12,239
tries to use leakage in order to infer

90
00:03:12,239 --> 00:03:14,640
more information about the underlying

91
00:03:14,640 --> 00:03:17,360
structure and queries than expected

92
00:03:17,360 --> 00:03:19,360
and these attacks use either the query

93
00:03:19,360 --> 00:03:22,879
equality leakage or the volume leakage

94
00:03:22,879 --> 00:03:24,799
the query equality reveals whether two

95
00:03:24,799 --> 00:03:27,360
queries or two labels are equal to each

96
00:03:27,360 --> 00:03:29,120
other when they are queried

97
00:03:29,120 --> 00:03:30,879
and the volume leakage reveals the

98
00:03:30,879 --> 00:03:32,400
number of encrypted values that

99
00:03:32,400 --> 00:03:33,920
correspond to a given

100
00:03:33,920 --> 00:03:37,680
given query or an encrypted label

101
00:03:37,680 --> 00:03:39,200
and there's been a line of work in

102
00:03:39,200 --> 00:03:41,519
looking to suppress the leakage

103
00:03:41,519 --> 00:03:44,000
patterns that are used for attacks

104
00:03:44,000 --> 00:03:45,840
so for instance oram can be used to

105
00:03:45,840 --> 00:03:47,599
suppress query equality and there's

106
00:03:47,599 --> 00:03:49,519
oram-like techniques that can be used to

107
00:03:49,519 --> 00:03:51,519
suppress query equality for more complex

108
00:03:51,519 --> 00:03:53,200
data structures

109
00:03:53,200 --> 00:03:55,519
however we also know logarithmic lower

110
00:03:55,519 --> 00:03:57,439
bounds for communication complexity when

111
00:03:57,439 --> 00:04:01,360
the query quality leakage is suppressed

112
00:04:01,360 --> 00:04:03,120
however the overwhelming majority of

113
00:04:03,120 --> 00:04:04,959
attacks rely on the access pattern

114
00:04:04,959 --> 00:04:07,439
leakage and in particular

115
00:04:07,439 --> 00:04:09,439
query volumes which is the number of

116
00:04:09,439 --> 00:04:11,280
encrypted values that correspond to a

117
00:04:11,280 --> 00:04:13,599
label

118
00:04:13,680 --> 00:04:15,360
and so there is this line of work in

119
00:04:15,360 --> 00:04:17,680
volume hiding which looks to suppress

120
00:04:17,680 --> 00:04:19,839
the query volumes

121
00:04:19,839 --> 00:04:22,240
naively one could think of using padding

122
00:04:22,240 --> 00:04:24,160
to hide the query volume so how would

123
00:04:24,160 --> 00:04:27,120
this work for every label that can be

124
00:04:27,120 --> 00:04:29,360
queried in the multi-map you would add

125
00:04:29,360 --> 00:04:32,400
in empty values or garbage values so

126
00:04:32,400 --> 00:04:34,720
that whenever the label is queried there

127
00:04:34,720 --> 00:04:37,040
would be extra values in that encrypted

128
00:04:37,040 --> 00:04:39,360
response and therefore the the true

129
00:04:39,360 --> 00:04:41,440
volume of that query would never be

130
00:04:41,440 --> 00:04:42,880
revealed

131
00:04:42,880 --> 00:04:45,040
but it turns out that this solution

132
00:04:45,040 --> 00:04:47,040
is inefficient both in terms of storage

133
00:04:47,040 --> 00:04:48,880
as well as communication

134
00:04:48,880 --> 00:04:51,199
and so in 2019 kamara and motors

135
00:04:51,199 --> 00:04:53,840
proposed the first volume hiding scheme

136
00:04:53,840 --> 00:04:56,800
which would reuse encrypted values so

137
00:04:56,800 --> 00:04:58,400
use encrypted values from other

138
00:04:58,400 --> 00:05:01,440
responses instead of using only padding

139
00:05:01,440 --> 00:05:04,080
and therefore hide the query volumes

140
00:05:04,080 --> 00:05:06,240
of the label that's being queried

141
00:05:06,240 --> 00:05:09,759
and later in 2019 patel pagiano young

142
00:05:09,759 --> 00:05:11,520
proposed the formal definition of volume

143
00:05:11,520 --> 00:05:13,440
hiding and also introduced a second

144
00:05:13,440 --> 00:05:16,160
volume hiding scheme

145
00:05:16,160 --> 00:05:18,160
in this work the definition of volume

146
00:05:18,160 --> 00:05:19,759
hiding that we use is the one that was

147
00:05:19,759 --> 00:05:24,000
proposed in the patel at all paper

148
00:05:24,000 --> 00:05:25,600
there's also been a line of work in

149
00:05:25,600 --> 00:05:27,440
lower bounds which looks to study the

150
00:05:27,440 --> 00:05:30,560
security and efficiency trade-offs

151
00:05:30,560 --> 00:05:31,759
and

152
00:05:31,759 --> 00:05:33,919
however most of this work has looked at

153
00:05:33,919 --> 00:05:35,520
leakage patterns that leak both the

154
00:05:35,520 --> 00:05:38,000
access pattern and the query equality

155
00:05:38,000 --> 00:05:40,080
and we also know separate bounds for the

156
00:05:40,080 --> 00:05:41,919
query equality

157
00:05:41,919 --> 00:05:44,800
so the question that we ask in this work

158
00:05:44,800 --> 00:05:47,840
is what is the cost of hiding the query

159
00:05:47,840 --> 00:05:50,479
volumes in particular

160
00:05:50,479 --> 00:05:52,880
and how much should we expect to pay if

161
00:05:52,880 --> 00:05:57,120
we do not want to reveal query volumes

162
00:05:58,080 --> 00:06:00,240
so we define in particular this leakage

163
00:06:00,240 --> 00:06:02,319
profile that we refer to as minimally

164
00:06:02,319 --> 00:06:03,680
leaking

165
00:06:03,680 --> 00:06:05,759
and what we mean by minimally leaking is

166
00:06:05,759 --> 00:06:08,479
that the leakage of the scheme is no

167
00:06:08,479 --> 00:06:10,479
more than the total size of the

168
00:06:10,479 --> 00:06:12,160
multi-map which is n

169
00:06:12,160 --> 00:06:13,919
which is the number of values that are

170
00:06:13,919 --> 00:06:16,319
present in this multi-map and the query

171
00:06:16,319 --> 00:06:19,360
equality which is the whether two

172
00:06:19,360 --> 00:06:21,919
queried labels are the same

173
00:06:21,919 --> 00:06:23,440
so given this

174
00:06:23,440 --> 00:06:25,919
minimal leakage profile we ask what are

175
00:06:25,919 --> 00:06:27,440
the costs

176
00:06:27,440 --> 00:06:30,080
of having a scheme that has only this

177
00:06:30,080 --> 00:06:32,479
leakage

178
00:06:33,440 --> 00:06:35,039
so the first thing we see from this

179
00:06:35,039 --> 00:06:37,440
definition is that

180
00:06:37,440 --> 00:06:40,479
in order to suppress the volume

181
00:06:40,479 --> 00:06:44,560
of the of a query you have to read the

182
00:06:44,560 --> 00:06:46,720
scheme has to read at least the maximum

183
00:06:46,720 --> 00:06:48,960
number of encrypted values

184
00:06:48,960 --> 00:06:50,880
so at least the maximum length has to be

185
00:06:50,880 --> 00:06:52,400
read

186
00:06:52,400 --> 00:06:54,720
and then what we show for our first

187
00:06:54,720 --> 00:06:57,680
bound is that if you want optimal read

188
00:06:57,680 --> 00:06:59,919
efficiency where read efficiency is the

189
00:06:59,919 --> 00:07:01,840
number of values that must be read so

190
00:07:01,840 --> 00:07:03,360
given that you have to read the maximum

191
00:07:03,360 --> 00:07:05,440
number of values if you were reading

192
00:07:05,440 --> 00:07:07,919
exactly the maximum number of values

193
00:07:07,919 --> 00:07:11,039
what we show is that each of the tuples

194
00:07:11,039 --> 00:07:13,360
in the multimap will have to be padded

195
00:07:13,360 --> 00:07:15,919
so there has to be pretty much the naive

196
00:07:15,919 --> 00:07:17,199
solutions

197
00:07:17,199 --> 00:07:19,840
amount of padding in order to have

198
00:07:19,840 --> 00:07:21,680
a scheme that is both optimally

199
00:07:21,680 --> 00:07:26,639
deficient as well as minimally leaking

200
00:07:28,319 --> 00:07:30,639
and then we go on further to show that

201
00:07:30,639 --> 00:07:31,919
if

202
00:07:31,919 --> 00:07:34,479
you use parts of other responses instead

203
00:07:34,479 --> 00:07:36,080
of padding

204
00:07:36,080 --> 00:07:38,400
these parts of the other responses

205
00:07:38,400 --> 00:07:41,440
cannot be sampled completely at random

206
00:07:41,440 --> 00:07:43,199
because that cannot give minimally

207
00:07:43,199 --> 00:07:45,840
leaking

208
00:07:46,000 --> 00:07:46,960
so

209
00:07:46,960 --> 00:07:48,720
we're now re relaxing the read

210
00:07:48,720 --> 00:07:50,080
efficiency a little bit so we're

211
00:07:50,080 --> 00:07:52,639
allowing for a constant number of values

212
00:07:52,639 --> 00:07:54,720
to be read which is greater than the

213
00:07:54,720 --> 00:07:56,560
maximum length so earlier our results

214
00:07:56,560 --> 00:07:58,319
said exactly the maximum length of

215
00:07:58,319 --> 00:08:00,080
values has to be read and now we're

216
00:08:00,080 --> 00:08:03,840
allowing for more than that to be read

217
00:08:03,840 --> 00:08:06,479
and say for a concrete example we allow

218
00:08:06,479 --> 00:08:10,160
the scheme to read 10 values for every

219
00:08:10,160 --> 00:08:12,240
query when the maximum length in the

220
00:08:12,240 --> 00:08:15,759
multi-map is only five

221
00:08:15,919 --> 00:08:17,840
and that to let there be two encrypted

222
00:08:17,840 --> 00:08:19,840
responses such that the real lengths of

223
00:08:19,840 --> 00:08:22,240
both of those responses are five each so

224
00:08:22,240 --> 00:08:24,080
five values corresponding to each of the

225
00:08:24,080 --> 00:08:25,039
labels

226
00:08:25,039 --> 00:08:26,479
so as an example

227
00:08:26,479 --> 00:08:29,520
you have ci which has five real values

228
00:08:29,520 --> 00:08:31,440
that should be retrieved and then you

229
00:08:31,440 --> 00:08:33,760
want to add five more because the scheme

230
00:08:33,760 --> 00:08:35,519
has to read 10 values

231
00:08:35,519 --> 00:08:37,919
and these five values are picked at

232
00:08:37,919 --> 00:08:39,679
random from the remaining encrypted

233
00:08:39,679 --> 00:08:41,839
values

234
00:08:41,839 --> 00:08:44,800
and then we look at a second response cj

235
00:08:44,800 --> 00:08:47,600
which also has five real values that

236
00:08:47,600 --> 00:08:49,040
have to be read

237
00:08:49,040 --> 00:08:50,959
and then five values which have to be

238
00:08:50,959 --> 00:08:53,680
sampled from the remaining values

239
00:08:53,680 --> 00:08:55,680
now what we notice in particular that is

240
00:08:55,680 --> 00:08:57,920
that the server can observe

241
00:08:57,920 --> 00:08:59,920
the overlaps between these two encrypted

242
00:08:59,920 --> 00:09:01,279
responses

243
00:09:01,279 --> 00:09:03,279
and it can look in particular at the

244
00:09:03,279 --> 00:09:05,200
size of the overlaps or the number of

245
00:09:05,200 --> 00:09:07,519
encrypted values that are in common

246
00:09:07,519 --> 00:09:11,279
between these two encrypted responses

247
00:09:11,279 --> 00:09:12,080
and

248
00:09:12,080 --> 00:09:14,000
to think about a different example so if

249
00:09:14,000 --> 00:09:16,080
ci and cj were much shorter than the

250
00:09:16,080 --> 00:09:18,560
maximum line so say ci and cj only had

251
00:09:18,560 --> 00:09:20,560
one value each

252
00:09:20,560 --> 00:09:22,320
the essence of our proof is that we show

253
00:09:22,320 --> 00:09:23,120
that

254
00:09:23,120 --> 00:09:26,320
shorter responses tend to have larger

255
00:09:26,320 --> 00:09:28,800
overlaps so the size of the overlap

256
00:09:28,800 --> 00:09:31,279
depends on the length of the true

257
00:09:31,279 --> 00:09:33,360
response and therefore it reveals some

258
00:09:33,360 --> 00:09:36,800
information about the volumes

259
00:09:36,800 --> 00:09:38,880
and this is our main result in the

260
00:09:38,880 --> 00:09:41,120
standard model

261
00:09:41,120 --> 00:09:42,480
however

262
00:09:42,480 --> 00:09:45,120
the standard model might be

263
00:09:45,120 --> 00:09:47,120
too restrictive in that it gives the

264
00:09:47,120 --> 00:09:49,200
adversary a lot of power so going back

265
00:09:49,200 --> 00:09:51,279
to the definition of minimally leaking

266
00:09:51,279 --> 00:09:53,920
we see that the adversary is allowed to

267
00:09:53,920 --> 00:09:55,680
choose all of the labels that are

268
00:09:55,680 --> 00:09:58,800
queried in the query phase

269
00:09:58,800 --> 00:10:01,040
what if the adversary was not given this

270
00:10:01,040 --> 00:10:05,279
power so we propose a new definition

271
00:10:05,279 --> 00:10:08,000
that allows for a weaker adversary model

272
00:10:08,000 --> 00:10:10,079
where the adversary no longer chooses

273
00:10:10,079 --> 00:10:12,399
the queries instead

274
00:10:12,399 --> 00:10:15,440
the challenger samples queries from a

275
00:10:15,440 --> 00:10:16,959
distribution b

276
00:10:16,959 --> 00:10:18,399
and this distribution

277
00:10:18,399 --> 00:10:20,399
is used

278
00:10:20,399 --> 00:10:22,560
to create the encrypted tokens that are

279
00:10:22,560 --> 00:10:25,040
later sent over to the adversary

280
00:10:25,040 --> 00:10:26,560
in particular this distribution is

281
00:10:26,560 --> 00:10:29,120
public and known both to the adversary

282
00:10:29,120 --> 00:10:30,560
and the challenger

283
00:10:30,560 --> 00:10:33,440
and our definition is inspired by the

284
00:10:33,440 --> 00:10:36,480
attack paper literature where

285
00:10:36,480 --> 00:10:38,480
the attacks often assume that the

286
00:10:38,480 --> 00:10:41,200
adversary knows a distribution and the

287
00:10:41,200 --> 00:10:42,640
queries are being sampled from that

288
00:10:42,640 --> 00:10:44,079
distribution

289
00:10:44,079 --> 00:10:46,399
even if the attacker cannot choose the

290
00:10:46,399 --> 00:10:47,519
queries

291
00:10:47,519 --> 00:10:48,560
and

292
00:10:48,560 --> 00:10:50,560
arguably in some settings it is more

293
00:10:50,560 --> 00:10:52,720
realistic to assume that the adversary

294
00:10:52,720 --> 00:10:54,959
cannot choose queries but instead knows

295
00:10:54,959 --> 00:10:57,600
some information about the cumulative

296
00:10:57,600 --> 00:10:58,959
properties of the queries like the

297
00:10:58,959 --> 00:11:01,440
distribution

298
00:11:01,440 --> 00:11:02,480
and so

299
00:11:02,480 --> 00:11:04,399
we ask can we do better in the sample

300
00:11:04,399 --> 00:11:06,560
minimally leaking setting and we end up

301
00:11:06,560 --> 00:11:09,519
showing that it is possible to do better

302
00:11:09,519 --> 00:11:11,040
and we have a scheme in the sample

303
00:11:11,040 --> 00:11:13,040
minimally leaking setting that shows

304
00:11:13,040 --> 00:11:15,279
that we can do better

305
00:11:15,279 --> 00:11:17,040
and we show experimental evidence for

306
00:11:17,040 --> 00:11:18,800
this fact as well

307
00:11:18,800 --> 00:11:20,320
so here's a summary of all of our

308
00:11:20,320 --> 00:11:22,000
results please read our paper if you're

309
00:11:22,000 --> 00:11:23,760
more interested and i can take any

310
00:11:23,760 --> 00:11:27,560
questions thank you

