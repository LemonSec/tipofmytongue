1
00:00:01,380 --> 00:00:03,620
hello everyone my name is

2
00:00:03,620 --> 00:00:06,299
I work at a small startup called tamil's

3
00:00:06,299 --> 00:00:08,639
Labs but today I'm here to present work

4
00:00:08,639 --> 00:00:10,679
we did at Google with my colleagues

5
00:00:10,679 --> 00:00:12,900
James Bryant and Chin Murray and

6
00:00:12,900 --> 00:00:14,160
differentially private partition

7
00:00:14,160 --> 00:00:15,719
selection

8
00:00:15,719 --> 00:00:17,699
so first what is partition selection

9
00:00:17,699 --> 00:00:20,640
let's take a simple example

10
00:00:20,640 --> 00:00:22,800
imagine that you have a log

11
00:00:22,800 --> 00:00:25,619
of interactions with an online service

12
00:00:25,619 --> 00:00:29,220
so my user identifiers sometime as well

13
00:00:29,220 --> 00:00:31,920
as a device type here the device type

14
00:00:31,920 --> 00:00:33,600
could be really anything think of it

15
00:00:33,600 --> 00:00:35,579
maybe as a user agent string you don't

16
00:00:35,579 --> 00:00:37,200
know in advance

17
00:00:37,200 --> 00:00:39,239
what are the possible user agents that

18
00:00:39,239 --> 00:00:41,460
you're going to see in your data here

19
00:00:41,460 --> 00:00:43,680
for example we have a laptop a phone you

20
00:00:43,680 --> 00:00:45,719
know desktop computer a watch and then a

21
00:00:45,719 --> 00:00:48,120
crystal board for some weird reason

22
00:00:48,120 --> 00:00:50,039
if you want to count how many people

23
00:00:50,039 --> 00:00:53,699
you've seen with a single device given a

24
00:00:53,699 --> 00:00:55,500
specific device you're gonna do

25
00:00:55,500 --> 00:00:58,079
something like this in SQL you Group by

26
00:00:58,079 --> 00:00:59,340
device model

27
00:00:59,340 --> 00:01:01,140
and for each device model that you see

28
00:01:01,140 --> 00:01:03,120
in the data you count the number of

29
00:01:03,120 --> 00:01:04,559
identifiers

30
00:01:04,559 --> 00:01:06,540
Okay so

31
00:01:06,540 --> 00:01:08,220
when you do that you end up with a

32
00:01:08,220 --> 00:01:10,020
histogram and the question is how do you

33
00:01:10,020 --> 00:01:11,400
make this histogram different free

34
00:01:11,400 --> 00:01:13,560
credits well we all know that

35
00:01:13,560 --> 00:01:15,180
differential privacy requires the

36
00:01:15,180 --> 00:01:17,280
addition of noise first off let's try

37
00:01:17,280 --> 00:01:19,020
and add noise to the data

38
00:01:19,020 --> 00:01:21,060
is this enough to achieve default for

39
00:01:21,060 --> 00:01:22,259
privacy

40
00:01:22,259 --> 00:01:26,000
turns out not so much

41
00:01:26,100 --> 00:01:27,840
imagine that you have a single person in

42
00:01:27,840 --> 00:01:30,860
your data here in this greenish color

43
00:01:30,860 --> 00:01:33,360
that's connected to your service with a

44
00:01:33,360 --> 00:01:34,920
strange device let's say a crystal ball

45
00:01:34,920 --> 00:01:35,759
here

46
00:01:35,759 --> 00:01:38,700
when you add nodes to each of the of the

47
00:01:38,700 --> 00:01:40,680
partitions of the packets

48
00:01:40,680 --> 00:01:41,759
um

49
00:01:41,759 --> 00:01:44,220
this with sort of high probability this

50
00:01:44,220 --> 00:01:47,040
will appear in your data this specific

51
00:01:47,040 --> 00:01:49,439
partition this crystal ball right you're

52
00:01:49,439 --> 00:01:50,820
going to add noise to one and return a

53
00:01:50,820 --> 00:01:52,259
statistic associated with this crystal

54
00:01:52,259 --> 00:01:55,020
ball at uh you know that corresponds to

55
00:01:55,020 --> 00:01:57,180
OnePlus noise

56
00:01:57,180 --> 00:01:58,680
but of course if you remove that person

57
00:01:58,680 --> 00:02:00,119
from the database

58
00:02:00,119 --> 00:02:01,500
then you don't know that this thing

59
00:02:01,500 --> 00:02:02,939
exists when you do a group by this

60
00:02:02,939 --> 00:02:05,060
partition these buckets it doesn't exist

61
00:02:05,060 --> 00:02:07,619
so you're only adding it to the other

62
00:02:07,619 --> 00:02:09,720
partitions and of course these two

63
00:02:09,720 --> 00:02:11,520
situations here end up being very

64
00:02:11,520 --> 00:02:13,140
distinguishable in one case you're

65
00:02:13,140 --> 00:02:14,760
releasing a crystal ball the partition

66
00:02:14,760 --> 00:02:16,319
corresponding with your crystal ball and

67
00:02:16,319 --> 00:02:19,200
in the other units so this clearly is a

68
00:02:19,200 --> 00:02:20,700
problem because default of privacy is

69
00:02:20,700 --> 00:02:21,840
supposed to prevent you from

70
00:02:21,840 --> 00:02:23,400
distinguishing when you add or remove a

71
00:02:23,400 --> 00:02:25,680
user from your database

72
00:02:25,680 --> 00:02:29,040
the way the typical way we solve this is

73
00:02:29,040 --> 00:02:31,379
after adding LaPlace Noise We also use a

74
00:02:31,379 --> 00:02:32,459
threshold

75
00:02:32,459 --> 00:02:34,260
and we only release the counts that are

76
00:02:34,260 --> 00:02:36,540
above the thresholds so here this can

77
00:02:36,540 --> 00:02:39,959
mean that we are we're on the if you

78
00:02:39,959 --> 00:02:41,940
have a single person you're in your in a

79
00:02:41,940 --> 00:02:43,860
specific partition you're only going to

80
00:02:43,860 --> 00:02:47,000
release that partition if that the noise

81
00:02:47,000 --> 00:02:49,440
one plus noise ends up being above the

82
00:02:49,440 --> 00:02:51,599
threshold and we hope that it doesn't

83
00:02:51,599 --> 00:02:53,400
happen too much if the circle is high

84
00:02:53,400 --> 00:02:55,319
enough and it gives us excellent Delta

85
00:02:55,319 --> 00:02:57,420
deep control privacy and Delta is the

86
00:02:57,420 --> 00:02:58,860
probability this happens in which case

87
00:02:58,860 --> 00:03:00,000
this is the situations are

88
00:03:00,000 --> 00:03:01,500
distinguishing otherwise they're not

89
00:03:01,500 --> 00:03:03,120
distinguishing

90
00:03:03,120 --> 00:03:06,360
so this is how you you adapt the typical

91
00:03:06,360 --> 00:03:09,300
LaPlace mechanism for histograms uh to a

92
00:03:09,300 --> 00:03:11,700
situation where you don't know the set

93
00:03:11,700 --> 00:03:13,260
of partitions in advance

94
00:03:13,260 --> 00:03:15,360
and you go from eptilian DP to Pure

95
00:03:15,360 --> 00:03:17,700
departure privacy to Epsilon Delta DP

96
00:03:17,700 --> 00:03:19,620
approximate DP

97
00:03:19,620 --> 00:03:21,540
okay the question that we're asking in

98
00:03:21,540 --> 00:03:23,400
this work is can we do better

99
00:03:23,400 --> 00:03:25,319
and it turns out as we've seen that we

100
00:03:25,319 --> 00:03:27,180
are going to do better otherwise I

101
00:03:27,180 --> 00:03:29,040
wouldn't be here

102
00:03:29,040 --> 00:03:30,900
let's start to give you an intuition

103
00:03:30,900 --> 00:03:33,480
about how we can do better by plotting

104
00:03:33,480 --> 00:03:35,480
the probability of releasing a partition

105
00:03:35,480 --> 00:03:37,500
depending on the number of people in the

106
00:03:37,500 --> 00:03:40,200
partition so here this is simply the

107
00:03:40,200 --> 00:03:42,360
cumulative distribution function of the

108
00:03:42,360 --> 00:03:44,280
LaPlace mechanism

109
00:03:44,280 --> 00:03:47,099
uh that's sort of discretized here and

110
00:03:47,099 --> 00:03:49,860
of course the the more people we have in

111
00:03:49,860 --> 00:03:52,140
each partition the more likely we are to

112
00:03:52,140 --> 00:03:53,640
be above the threshold ones we add noise

113
00:03:53,640 --> 00:03:55,860
and so the closer we are to

114
00:03:55,860 --> 00:03:57,959
uh probability one of releasing that

115
00:03:57,959 --> 00:04:00,959
partition and of course as we saw here

116
00:04:00,959 --> 00:04:04,140
um you know at zero uh

117
00:04:04,140 --> 00:04:07,200
if we don't have any record associated

118
00:04:07,200 --> 00:04:08,580
with a certain partition in the data

119
00:04:08,580 --> 00:04:09,959
then we have zero probability of

120
00:04:09,959 --> 00:04:11,159
releasing the partition because we don't

121
00:04:11,159 --> 00:04:14,220
know that it exists in the first place

122
00:04:14,220 --> 00:04:17,040
so if you take a look at the LaPlace

123
00:04:17,040 --> 00:04:19,978
mechanism what what is so how do we

124
00:04:19,978 --> 00:04:22,040
construct this uh

125
00:04:22,040 --> 00:04:24,840
plots describing the the probability of

126
00:04:24,840 --> 00:04:26,520
releasing a partition depending on the

127
00:04:26,520 --> 00:04:27,960
number of people

128
00:04:27,960 --> 00:04:30,479
we saw that P0 equals zero and we also

129
00:04:30,479 --> 00:04:32,220
saw that P1 so the probability of

130
00:04:32,220 --> 00:04:33,600
releasing a partition with a single

131
00:04:33,600 --> 00:04:36,120
person in it is exactly the probability

132
00:04:36,120 --> 00:04:38,400
of you know a catastrophic privacy

133
00:04:38,400 --> 00:04:39,840
failure in a way distinguishing events

134
00:04:39,840 --> 00:04:41,639
so this can only happen with probability

135
00:04:41,639 --> 00:04:43,320
Delta

136
00:04:43,320 --> 00:04:45,780
and then once we get one to go from one

137
00:04:45,780 --> 00:04:47,220
to two we are multiplying that

138
00:04:47,220 --> 00:04:49,800
probability by e to the Epsilon why are

139
00:04:49,800 --> 00:04:51,660
we doing this it's because the LaPlace

140
00:04:51,660 --> 00:04:53,880
noise is this like double exponential

141
00:04:53,880 --> 00:04:55,560
distribution and it has this nice

142
00:04:55,560 --> 00:04:57,000
property very convenient in different

143
00:04:57,000 --> 00:05:00,240
for privacy that when you add

144
00:05:00,240 --> 00:05:03,300
um when you go one horizontally you're

145
00:05:03,300 --> 00:05:04,880
multiplying by e to the Epsilon

146
00:05:04,880 --> 00:05:08,639
vertically because of this nice

147
00:05:08,639 --> 00:05:09,539
um

148
00:05:09,539 --> 00:05:13,020
uh you know exponential or exponential

149
00:05:13,020 --> 00:05:15,360
so of course to go from P3 to P2 to from

150
00:05:15,360 --> 00:05:16,979
P2 to P3 we do the same thing we

151
00:05:16,979 --> 00:05:18,660
multiply by e to the Epsilon et cetera

152
00:05:18,660 --> 00:05:20,940
et cetera and then when we're on the

153
00:05:20,940 --> 00:05:22,380
other side of the distribution function

154
00:05:22,380 --> 00:05:24,360
the this we also have the relationship

155
00:05:24,360 --> 00:05:27,000
of the same kind but it's with one minus

156
00:05:27,000 --> 00:05:29,639
P because we're on the other side of uh

157
00:05:29,639 --> 00:05:30,900
we are on the other side of the curve so

158
00:05:30,900 --> 00:05:34,199
the relationship is somewhat reversed

159
00:05:34,199 --> 00:05:36,360
so now that we've seen it we've seen an

160
00:05:36,360 --> 00:05:37,860
interpretation of the LaPlace mechanism

161
00:05:37,860 --> 00:05:40,199
and performing in a sort of an iterative

162
00:05:40,199 --> 00:05:42,600
manner the question is okay can we use

163
00:05:42,600 --> 00:05:44,880
that iterative intuition to find an

164
00:05:44,880 --> 00:05:48,120
optimal an optimal shape of that curve

165
00:05:48,120 --> 00:05:49,680
here

166
00:05:49,680 --> 00:05:52,199
as we saw earlier we can't do better

167
00:05:52,199 --> 00:05:54,240
than zero at b0 because we don't know

168
00:05:54,240 --> 00:05:55,380
that partition so this is actually

169
00:05:55,380 --> 00:05:56,759
optimal

170
00:05:56,759 --> 00:05:58,979
similarly if we are releasing a

171
00:05:58,979 --> 00:06:00,900
partition with a single person in it

172
00:06:00,900 --> 00:06:02,400
that's the thing that's the

173
00:06:02,400 --> 00:06:03,780
distinguishing event compared to if we

174
00:06:03,780 --> 00:06:05,220
release a partition with zero people in

175
00:06:05,220 --> 00:06:07,860
it so again we don't have a choice the

176
00:06:07,860 --> 00:06:09,720
maximum the the highest discount can

177
00:06:09,720 --> 00:06:12,840
possibly be here is Delta

178
00:06:12,840 --> 00:06:16,620
but then to go from V1 to P2 before that

179
00:06:16,620 --> 00:06:18,660
we were just you know using e to the

180
00:06:18,660 --> 00:06:19,800
Epsilon

181
00:06:19,800 --> 00:06:22,259
but since we are using approximate gpe

182
00:06:22,259 --> 00:06:24,120
we have a little bit of budget a little

183
00:06:24,120 --> 00:06:26,340
bit of additional budget Delta here so

184
00:06:26,340 --> 00:06:28,380
we can actually compute that probability

185
00:06:28,380 --> 00:06:30,780
by saying the maximum probability we can

186
00:06:30,780 --> 00:06:33,060
get away with is e to the Epsilon plus

187
00:06:33,060 --> 00:06:34,139
Delta

188
00:06:34,139 --> 00:06:36,479
and when we continue doing this over

189
00:06:36,479 --> 00:06:40,080
time we are winning we're increasing a

190
00:06:40,080 --> 00:06:41,160
little bit a little bit more a little

191
00:06:41,160 --> 00:06:43,199
bit more the probability of releasing a

192
00:06:43,199 --> 00:06:45,319
partition using this sort of optimal

193
00:06:45,319 --> 00:06:47,880
mechanism rather than if we use the

194
00:06:47,880 --> 00:06:49,319
LaPlace mechanism

195
00:06:49,319 --> 00:06:51,599
we continue we keep going like this as

196
00:06:51,599 --> 00:06:53,220
you see the more we go the better it

197
00:06:53,220 --> 00:06:56,880
looks and after after some point we we

198
00:06:56,880 --> 00:06:58,800
cross the midpoints and then we also use

199
00:06:58,800 --> 00:07:01,560
the same relationship but reversed with

200
00:07:01,560 --> 00:07:03,419
the minus Delta over there to you know

201
00:07:03,419 --> 00:07:04,800
get the optimal

202
00:07:04,800 --> 00:07:07,500
formula and this gives us in a sense an

203
00:07:07,500 --> 00:07:09,360
optimal way of

204
00:07:09,360 --> 00:07:10,979
deciding whether we're going to publish

205
00:07:10,979 --> 00:07:13,139
a partition uh depending on the number

206
00:07:13,139 --> 00:07:15,360
of people in it

207
00:07:15,360 --> 00:07:17,819
that's really neat uh the algorithm sort

208
00:07:17,819 --> 00:07:19,860
of I hope that I convince you with this

209
00:07:19,860 --> 00:07:21,360
you know sort of iterative process that

210
00:07:21,360 --> 00:07:22,620
this algorithm is optimal you can't do

211
00:07:22,620 --> 00:07:23,699
better than this

212
00:07:23,699 --> 00:07:25,259
so this is great

213
00:07:25,259 --> 00:07:26,580
now

214
00:07:26,580 --> 00:07:30,060
this iterative way of of getting the

215
00:07:30,060 --> 00:07:31,919
probability distribution the probability

216
00:07:31,919 --> 00:07:34,319
of releasing a specific partition is

217
00:07:34,319 --> 00:07:37,199
sort of a little bit unwieldy because it

218
00:07:37,199 --> 00:07:39,000
would require us to every time we're

219
00:07:39,000 --> 00:07:41,400
looking at a uh the number of people in

220
00:07:41,400 --> 00:07:42,960
a certain partition we would need to do

221
00:07:42,960 --> 00:07:44,340
this iterative process to figure out

222
00:07:44,340 --> 00:07:46,440
with what probability to use so it would

223
00:07:46,440 --> 00:07:48,180
be nice if we have a closed formula for

224
00:07:48,180 --> 00:07:48,840
this

225
00:07:48,840 --> 00:07:50,940
luckily all the relationship involves

226
00:07:50,940 --> 00:07:52,919
here are actually pretty simple so we

227
00:07:52,919 --> 00:07:54,599
can we can transform that iterative

228
00:07:54,599 --> 00:07:56,759
process using math into a plus form

229
00:07:56,759 --> 00:07:59,099
formula which is really neat

230
00:07:59,099 --> 00:08:01,259
you can even do better than this not

231
00:08:01,259 --> 00:08:03,539
only is there a close form formula for

232
00:08:03,539 --> 00:08:06,780
this mechanism but we even prove that

233
00:08:06,780 --> 00:08:09,060
this mechanism is actually equivalent

234
00:08:09,060 --> 00:08:12,599
again using some math to adding a

235
00:08:12,599 --> 00:08:14,759
specific other kind of noise to the data

236
00:08:14,759 --> 00:08:16,259
and then thresholding

237
00:08:16,259 --> 00:08:18,060
so instead of adding LaPlace noise and

238
00:08:18,060 --> 00:08:19,740
thresholding what we're going to do is

239
00:08:19,740 --> 00:08:21,139
we're going to add this kind of weird

240
00:08:21,139 --> 00:08:24,900
double geometric that is bounded like

241
00:08:24,900 --> 00:08:27,539
bounded double geometric noise

242
00:08:27,539 --> 00:08:30,360
of course in a discrete version and that

243
00:08:30,360 --> 00:08:31,979
actually corresponds to the exact same

244
00:08:31,979 --> 00:08:35,159
thing as the closed formulas which was

245
00:08:35,159 --> 00:08:37,740
we just saw above this is really good

246
00:08:37,740 --> 00:08:40,260
news because since we can interpret our

247
00:08:40,260 --> 00:08:42,719
mechanism as adding us to special link

248
00:08:42,719 --> 00:08:44,640
along with this interpretation we can

249
00:08:44,640 --> 00:08:46,500
show that

250
00:08:46,500 --> 00:08:48,720
the the noisy counts so that when we add

251
00:08:48,720 --> 00:08:50,459
notes to the data and then we use the

252
00:08:50,459 --> 00:08:51,360
threshold

253
00:08:51,360 --> 00:08:53,339
just like with the LaPlace mechanism the

254
00:08:53,339 --> 00:08:55,260
noisy camp we can publish that

255
00:08:55,260 --> 00:08:56,640
you can actually release the entire

256
00:08:56,640 --> 00:08:58,920
histogram not just the partition and

257
00:08:58,920 --> 00:09:00,120
it's sort of interesting because it

258
00:09:00,120 --> 00:09:02,760
means that the the optimal mechanism

259
00:09:02,760 --> 00:09:04,920
specifically just for the problem of

260
00:09:04,920 --> 00:09:07,500
selecting the partition is also the

261
00:09:07,500 --> 00:09:09,660
optimal mechanism for the slightly more

262
00:09:09,660 --> 00:09:10,860
complicated problem of releasing the

263
00:09:10,860 --> 00:09:12,839
entire histogram

264
00:09:12,839 --> 00:09:14,940
but it seems like we completely you know

265
00:09:14,940 --> 00:09:17,100
solve that problem right

266
00:09:17,100 --> 00:09:19,260
well not really actually over the course

267
00:09:19,260 --> 00:09:21,839
of this Fork we sort of found out really

268
00:09:21,839 --> 00:09:23,940
interesting open questions uh associated

269
00:09:23,940 --> 00:09:26,160
with this problem the main sort of class

270
00:09:26,160 --> 00:09:28,560
of open questions is what if you have

271
00:09:28,560 --> 00:09:31,200
more than one contribution per person

272
00:09:31,200 --> 00:09:33,600
here we sort of had an implicit

273
00:09:33,600 --> 00:09:35,220
assumption that a single person

274
00:09:35,220 --> 00:09:36,899
contributed a single partition to the

275
00:09:36,899 --> 00:09:37,800
data

276
00:09:37,800 --> 00:09:40,260
and that does many cases in real life

277
00:09:40,260 --> 00:09:41,940
where that's the case but it's also

278
00:09:41,940 --> 00:09:43,560
happened very frequently that a single

279
00:09:43,560 --> 00:09:45,600
person contributes multiple partitions

280
00:09:45,600 --> 00:09:47,459
for example let's say a same user

281
00:09:47,459 --> 00:09:50,399
logging into through multiple devices

282
00:09:50,399 --> 00:09:52,320
so one of the natural open questions is

283
00:09:52,320 --> 00:09:54,000
can we get some notion of optimality

284
00:09:54,000 --> 00:09:55,620
here can we find a similarly maybe

285
00:09:55,620 --> 00:09:56,940
iteratively using the same kind of

286
00:09:56,940 --> 00:09:59,459
methods a way of getting an optimal

287
00:09:59,459 --> 00:10:00,839
algorithm for this

288
00:10:00,839 --> 00:10:03,140
it's a really hard problem because

289
00:10:03,140 --> 00:10:05,760
defining what optimality even means in

290
00:10:05,760 --> 00:10:08,339
this context is actually pretty tricky

291
00:10:08,339 --> 00:10:10,260
because when you have a single partition

292
00:10:10,260 --> 00:10:12,180
per User it's kind of fairly easy you

293
00:10:12,180 --> 00:10:13,440
can reduce the problem to looking at

294
00:10:13,440 --> 00:10:15,779
each partition separately but when each

295
00:10:15,779 --> 00:10:17,940
user contributes multiple partitions

296
00:10:17,940 --> 00:10:19,260
then you have to look at the

297
00:10:19,260 --> 00:10:21,540
distribution over all users how many

298
00:10:21,540 --> 00:10:24,240
have partitions in carbon you know how

299
00:10:24,240 --> 00:10:26,760
is this distributed Etc and so probably

300
00:10:26,760 --> 00:10:28,800
optimality results would require some

301
00:10:28,800 --> 00:10:31,560
distributional assumptions there

302
00:10:31,560 --> 00:10:33,660
finally another really interesting

303
00:10:33,660 --> 00:10:36,600
question is you know when you have a lot

304
00:10:36,600 --> 00:10:38,220
of contributions per user typically more

305
00:10:38,220 --> 00:10:40,440
than five instead of using LaPlace noise

306
00:10:40,440 --> 00:10:42,240
it becomes very quickly nicer to use

307
00:10:42,240 --> 00:10:44,279
Gotham noise especially

308
00:10:44,279 --> 00:10:46,019
you can do you can have this sort of

309
00:10:46,019 --> 00:10:47,399
methods that do a little bit better than

310
00:10:47,399 --> 00:10:49,800
go to Noise by for example if if

311
00:10:49,800 --> 00:10:52,440
somebody doesn't hasn't spent all of the

312
00:10:52,440 --> 00:10:55,079
sensitivity we make their contributions

313
00:10:55,079 --> 00:10:57,320
way a little bit more

314
00:10:57,320 --> 00:11:00,420
but if you want to do algorithms that

315
00:11:00,420 --> 00:11:03,300
scale we're still at a point where the

316
00:11:03,300 --> 00:11:05,940
naive algorithm so someone of the naive

317
00:11:05,940 --> 00:11:07,680
algorithm is the best thing we know

318
00:11:07,680 --> 00:11:10,079
there are smaller algorithms that check

319
00:11:10,079 --> 00:11:13,260
for each user which partitions were

320
00:11:13,260 --> 00:11:15,300
contributed by people before that

321
00:11:15,300 --> 00:11:17,459
specific user and decide which which

322
00:11:17,459 --> 00:11:19,860
partition to contribute to you know

323
00:11:19,860 --> 00:11:22,380
um adaptively like this adaptively like

324
00:11:22,380 --> 00:11:24,839
this but the problem with this is that

325
00:11:24,839 --> 00:11:26,880
it doesn't quite scale well because you

326
00:11:26,880 --> 00:11:28,680
have to remember you have to go one user

327
00:11:28,680 --> 00:11:30,420
after one user and remember the

328
00:11:30,420 --> 00:11:31,980
contribution of every single user before

329
00:11:31,980 --> 00:11:34,500
so if that histogram is very large if

330
00:11:34,500 --> 00:11:36,000
that if that list of partitions we've

331
00:11:36,000 --> 00:11:38,100
already seen is very large it might not

332
00:11:38,100 --> 00:11:39,480
fit in memory

333
00:11:39,480 --> 00:11:41,220
so it's a really interesting problem I

334
00:11:41,220 --> 00:11:43,019
think that and I encourage you to sort

335
00:11:43,019 --> 00:11:44,820
of work on it that sounds interesting to

336
00:11:44,820 --> 00:11:46,019
try to see if you can do better than

337
00:11:46,019 --> 00:11:48,000
this uh you know in a way that scales

338
00:11:48,000 --> 00:11:49,980
better

339
00:11:49,980 --> 00:11:52,500
that's all I have for you today uh

340
00:11:52,500 --> 00:11:54,480
thanks for listening I hope this was

341
00:11:54,480 --> 00:11:56,760
somewhat easy to understand and I will

342
00:11:56,760 --> 00:11:59,839
be happy to take your questions

