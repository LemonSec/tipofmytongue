1
00:00:01,040 --> 00:00:03,280
today i will present our paper a few

2
00:00:03,280 --> 00:00:05,040
reader a machine learning approach to

3
00:00:05,040 --> 00:00:07,279
systematically detect novel abuse of web

4
00:00:07,279 --> 00:00:09,840
apis for browser fingerprinting

5
00:00:09,840 --> 00:00:11,920
my name is pune bahrami and this is a

6
00:00:11,920 --> 00:00:13,440
collaborative world

7
00:00:13,440 --> 00:00:15,599
with umar paul and my advisor zober

8
00:00:15,599 --> 00:00:16,480
sheffield

9
00:00:16,480 --> 00:00:18,640
this work focuses on stateless tracking

10
00:00:18,640 --> 00:00:20,560
which is also commonly known as browser

11
00:00:20,560 --> 00:00:23,359
fingerprinting

12
00:00:23,439 --> 00:00:25,760
online tracking can be broadly divided

13
00:00:25,760 --> 00:00:28,000
into two categories stateful and

14
00:00:28,000 --> 00:00:29,679
stateless striking

15
00:00:29,679 --> 00:00:31,760
in a stateful tracking trackers will

16
00:00:31,760 --> 00:00:34,239
rely on unique and deterministic user

17
00:00:34,239 --> 00:00:36,399
identifiers that are typically stored as

18
00:00:36,399 --> 00:00:38,719
cookies in the browser

19
00:00:38,719 --> 00:00:40,800
however mainstream

20
00:00:40,800 --> 00:00:43,200
browsers have taken strict actions

21
00:00:43,200 --> 00:00:45,360
against striking cookies and most of

22
00:00:45,360 --> 00:00:46,879
them with the exception of chrome now

23
00:00:46,879 --> 00:00:48,320
blocked them

24
00:00:48,320 --> 00:00:50,800
that crackdown has motivated tracker to

25
00:00:50,800 --> 00:00:53,120
move towards a more

26
00:00:53,120 --> 00:00:55,280
invasive form of tracking called

27
00:00:55,280 --> 00:00:57,199
stateless striking

28
00:00:57,199 --> 00:00:58,559
since assistance tracking or browser

29
00:00:58,559 --> 00:01:00,480
fingerprinting is a tracking technique

30
00:01:00,480 --> 00:01:02,719
that does not require trackers to store

31
00:01:02,719 --> 00:01:05,438
any ident device at the client side

32
00:01:05,438 --> 00:01:07,600
fingerprinters are constructed by

33
00:01:07,600 --> 00:01:09,760
combining information from

34
00:01:09,760 --> 00:01:12,000
various web apis such as combining the

35
00:01:12,000 --> 00:01:14,000
phones and languages installed in the

36
00:01:14,000 --> 00:01:15,119
browser

37
00:01:15,119 --> 00:01:17,600
however for a fingerprint to be useful

38
00:01:17,600 --> 00:01:20,080
it needs to be

39
00:01:20,080 --> 00:01:22,240
unique and stable to make the

40
00:01:22,240 --> 00:01:24,960
fingerprints more unique trackers try to

41
00:01:24,960 --> 00:01:26,799
incorporate more

42
00:01:26,799 --> 00:01:30,000
multiple web apis including new web apis

43
00:01:30,000 --> 00:01:31,600
over time

44
00:01:31,600 --> 00:01:33,600
for browser fingerprinting from the

45
00:01:33,600 --> 00:01:36,000
mitigation perspective the incorporation

46
00:01:36,000 --> 00:01:38,479
of new apis over time makes fingerprint

47
00:01:38,479 --> 00:01:41,759
a moving target and this has puzzled the

48
00:01:41,759 --> 00:01:45,040
browser vendors in this paper we try to

49
00:01:45,040 --> 00:01:47,040
address this problem by proposing a

50
00:01:47,040 --> 00:01:49,040
graph-based machine learning technique

51
00:01:49,040 --> 00:01:51,600
that predicts new apis that trackers

52
00:01:51,600 --> 00:01:55,520
might exploit for browser fingerprinting

53
00:01:55,520 --> 00:01:57,200
let's look at an example about how

54
00:01:57,200 --> 00:01:59,360
browser opinion printing works in this

55
00:01:59,360 --> 00:02:02,240
example a javascript snippet is embedded

56
00:02:02,240 --> 00:02:04,640
in a website let's imagine three

57
00:02:04,640 --> 00:02:07,200
different users visit this website and

58
00:02:07,200 --> 00:02:09,280
the javascript code will run on their

59
00:02:09,280 --> 00:02:11,520
browser and extract information from

60
00:02:11,520 --> 00:02:14,800
several web apis for example

61
00:02:14,800 --> 00:02:17,520
the number of processor cores languages

62
00:02:17,520 --> 00:02:19,360
installed and this

63
00:02:19,360 --> 00:02:22,800
screen size of the machine

64
00:02:22,800 --> 00:02:25,280
the values returned by these properties

65
00:02:25,280 --> 00:02:27,680
are combined to create a distinguish

66
00:02:27,680 --> 00:02:29,760
distinguishing an identifier at the

67
00:02:29,760 --> 00:02:31,920
client side for each user

68
00:02:31,920 --> 00:02:34,000
trackers gather different information at

69
00:02:34,000 --> 00:02:36,160
the client side using different apis

70
00:02:36,160 --> 00:02:37,840
supported in the browser and then

71
00:02:37,840 --> 00:02:39,680
exfiltrate this information to the

72
00:02:39,680 --> 00:02:42,080
server

73
00:02:42,720 --> 00:02:44,959
next

74
00:02:45,360 --> 00:02:47,920
let me a little bit talk about some of

75
00:02:47,920 --> 00:02:49,519
the issues of

76
00:02:49,519 --> 00:02:51,360
existing state-of-the-art browser

77
00:02:51,360 --> 00:02:54,480
fingerprinting detection mechanisms

78
00:02:54,480 --> 00:02:57,120
in contrast to cookies it is not trivial

79
00:02:57,120 --> 00:02:59,840
to detect and block fingerprinting

80
00:02:59,840 --> 00:03:01,519
fingerprinting detection requires

81
00:03:01,519 --> 00:03:04,560
sophisticated static and

82
00:03:04,560 --> 00:03:06,560
dynamic analysis

83
00:03:06,560 --> 00:03:09,440
pre-work has tried to detect browser

84
00:03:09,440 --> 00:03:11,760
fingerprinting manually using manually

85
00:03:11,760 --> 00:03:13,680
crafted heuristics

86
00:03:13,680 --> 00:03:17,040
but heuristic has several limitations

87
00:03:17,040 --> 00:03:19,280
designing a heuristic is luberius and

88
00:03:19,280 --> 00:03:21,760
time consuming and they are brittle it

89
00:03:21,760 --> 00:03:23,280
means that they may miss fingerprinting

90
00:03:23,280 --> 00:03:25,040
a script that do not match their

91
00:03:25,040 --> 00:03:28,400
narrowly defined detection criteria

92
00:03:28,400 --> 00:03:31,120
and they don't work for evolved or

93
00:03:31,120 --> 00:03:33,680
new apis because it is pre-defined based

94
00:03:33,680 --> 00:03:36,000
on known fingerprinting techniques

95
00:03:36,000 --> 00:03:38,319
and finally they are reactively looking

96
00:03:38,319 --> 00:03:40,159
for known fingerprinting techniques in

97
00:03:40,159 --> 00:03:42,879
one point of time

98
00:03:42,879 --> 00:03:45,280
pre-work has also looked at ml based

99
00:03:45,280 --> 00:03:46,720
techniques to detect browser

100
00:03:46,720 --> 00:03:48,080
fingerprinting

101
00:03:48,080 --> 00:03:48,879
such

102
00:03:48,879 --> 00:03:51,519
techniques try to detect

103
00:03:51,519 --> 00:03:53,599
a fingerprinting script based on their

104
00:03:53,599 --> 00:03:55,920
structure and execution

105
00:03:55,920 --> 00:03:57,840
these approaches address some of the

106
00:03:57,840 --> 00:04:00,959
problems that flumex heuristics but

107
00:04:00,959 --> 00:04:03,439
they're still perfect specifically they

108
00:04:03,439 --> 00:04:05,200
automatically learn

109
00:04:05,200 --> 00:04:06,959
tracking behavior from features and

110
00:04:06,959 --> 00:04:09,040
they're flexible to minor changes in

111
00:04:09,040 --> 00:04:10,799
descript behavior

112
00:04:10,799 --> 00:04:13,120
however similar to heuristic they're not

113
00:04:13,120 --> 00:04:15,519
designed to detect new or

114
00:04:15,519 --> 00:04:18,560
evolved apis

115
00:04:20,399 --> 00:04:22,880
in summary existing detection mechanisms

116
00:04:22,880 --> 00:04:25,040
are not designed to detect new

117
00:04:25,040 --> 00:04:27,040
fingerprinting techniques we need

118
00:04:27,040 --> 00:04:28,639
approaches to detective use of

119
00:04:28,639 --> 00:04:30,800
javascript apis for fingerprinting in

120
00:04:30,800 --> 00:04:33,840
future to build this cappy proposed fp

121
00:04:33,840 --> 00:04:36,240
raider

122
00:04:36,240 --> 00:04:38,400
fp radar is a graph-based approach that

123
00:04:38,400 --> 00:04:40,560
leverage the longitudinal connectivity

124
00:04:40,560 --> 00:04:43,199
of apis to predict what api could be

125
00:04:43,199 --> 00:04:46,320
abused in fingerprinting in the future

126
00:04:46,320 --> 00:04:48,320
and it consists of four components i

127
00:04:48,320 --> 00:04:49,759
will go through each step in the

128
00:04:49,759 --> 00:04:51,440
following

129
00:04:51,440 --> 00:04:53,520
so the first step is input generation

130
00:04:53,520 --> 00:04:55,840
and data collection to longitudinally

131
00:04:55,840 --> 00:04:58,720
analyze web apis fp writer needs to

132
00:04:58,720 --> 00:05:01,840
measure their usage on the web over time

133
00:05:01,840 --> 00:05:04,320
we rely on the waypak machine to access

134
00:05:04,320 --> 00:05:06,720
historical snapshots of a script for the

135
00:05:06,720 --> 00:05:09,759
last 10 years on the alexa top 100k

136
00:05:09,759 --> 00:05:11,680
websites

137
00:05:11,680 --> 00:05:14,320
next fp radar relies on principle of

138
00:05:14,320 --> 00:05:17,280
guilt by association to detect the abuse

139
00:05:17,280 --> 00:05:19,840
of web apis for browser figure building

140
00:05:19,840 --> 00:05:22,240
it means that if an api is being used

141
00:05:22,240 --> 00:05:25,440
alongside known fingerprinting apis then

142
00:05:25,440 --> 00:05:28,160
we can presume that the api in question

143
00:05:28,160 --> 00:05:29,840
may also be used for browser

144
00:05:29,840 --> 00:05:31,199
fingerprinting

145
00:05:31,199 --> 00:05:33,520
to model this principle we represent the

146
00:05:33,520 --> 00:05:36,400
vapic occurrence in a graph

147
00:05:36,400 --> 00:05:38,479
let's

148
00:05:38,479 --> 00:05:40,880
take a closer look at how this graph

149
00:05:40,880 --> 00:05:43,120
works

150
00:05:43,120 --> 00:05:45,280
before we can link api's in graph

151
00:05:45,280 --> 00:05:47,280
representation we need to extract them

152
00:05:47,280 --> 00:05:50,560
from raw script to script to extract

153
00:05:50,560 --> 00:05:53,039
apis from the script we create abstract

154
00:05:53,039 --> 00:05:56,080
representation of a script through

155
00:05:56,080 --> 00:05:58,880
asds asds allows us

156
00:05:58,880 --> 00:06:01,360
to create uniform representation of

157
00:06:01,360 --> 00:06:03,360
scripts from different developers and

158
00:06:03,360 --> 00:06:06,160
get rid of non-essential content like

159
00:06:06,160 --> 00:06:08,639
comments

160
00:06:08,639 --> 00:06:11,039
once we extract apis from a script we

161
00:06:11,039 --> 00:06:13,440
map them in a graph representation

162
00:06:13,440 --> 00:06:15,840
specifically we create a node for each

163
00:06:15,840 --> 00:06:18,880
api and add an edge between nodes if

164
00:06:18,880 --> 00:06:20,000
they

165
00:06:20,000 --> 00:06:22,560
appear in the same script

166
00:06:22,560 --> 00:06:25,039
then we assign weight and

167
00:06:25,039 --> 00:06:27,039
weight to edges based on the frequency

168
00:06:27,039 --> 00:06:28,160
and time

169
00:06:28,160 --> 00:06:30,639
and then we extract these nodes from all

170
00:06:30,639 --> 00:06:33,039
of the script files for a particular

171
00:06:33,039 --> 00:06:36,080
year and build a separate graph for each

172
00:06:36,080 --> 00:06:39,360
year starting from 2010 to 2019

173
00:06:39,360 --> 00:06:44,000
we call these graphs longitudinal graphs

174
00:06:45,360 --> 00:06:46,880
once we create

175
00:06:46,880 --> 00:06:50,080
the longitudinal graph representation we

176
00:06:50,080 --> 00:06:53,120
try to predict the abuse of unknown apis

177
00:06:53,120 --> 00:06:54,479
in the future based on their

178
00:06:54,479 --> 00:06:57,520
co-occurrence with fingerprinting apis

179
00:06:57,520 --> 00:07:00,000
now let's have a closer look at the

180
00:07:00,000 --> 00:07:02,639
graph prediction procedure

181
00:07:02,639 --> 00:07:04,639
first we try to predict api

182
00:07:04,639 --> 00:07:07,039
co-occurrence in the future that is

183
00:07:07,039 --> 00:07:09,840
which api will will appear in widget

184
00:07:09,840 --> 00:07:11,680
script in the future

185
00:07:11,680 --> 00:07:13,599
suppose we have

186
00:07:13,599 --> 00:07:16,000
actual web api connectivity data from

187
00:07:16,000 --> 00:07:18,800
2010 to 2011

188
00:07:18,800 --> 00:07:20,880
and we want to predict the co-occurrence

189
00:07:20,880 --> 00:07:22,639
in the next year

190
00:07:22,639 --> 00:07:25,680
we rely on graph embeddings and manually

191
00:07:25,680 --> 00:07:28,000
extracted features from the graph

192
00:07:28,000 --> 00:07:30,400
representation of the api concurrence to

193
00:07:30,400 --> 00:07:32,319
predict the co-occurrence graph for the

194
00:07:32,319 --> 00:07:33,680
next year

195
00:07:33,680 --> 00:07:36,400
and our our intuition for relying on

196
00:07:36,400 --> 00:07:38,479
this feature is that the existing

197
00:07:38,479 --> 00:07:41,039
connectivity of apis is indicative of

198
00:07:41,039 --> 00:07:43,599
their future connectivity

199
00:07:43,599 --> 00:07:45,680
we repeat this process and predict the

200
00:07:45,680 --> 00:07:48,720
api code occurrence over 10 years by

201
00:07:48,720 --> 00:07:50,240
iteratively

202
00:07:50,240 --> 00:07:53,840
building temporal graphs

203
00:07:56,479 --> 00:07:58,720
next we predict which apis will be used

204
00:07:58,720 --> 00:08:00,720
for fingerprinting based on the

205
00:08:00,720 --> 00:08:04,000
predicted co-occurrence graph

206
00:08:04,000 --> 00:08:07,360
the next step is temporal clustering

207
00:08:07,360 --> 00:08:09,759
here we have our temporal

208
00:08:09,759 --> 00:08:13,599
graphs starting from 2010 to 2019

209
00:08:13,599 --> 00:08:15,919
fp reader non-temporarily clustered the

210
00:08:15,919 --> 00:08:18,000
graph based on the luvian method which

211
00:08:18,000 --> 00:08:20,960
partitioned the graph at each snapshot

212
00:08:20,960 --> 00:08:23,120
such that the modularity is maximized

213
00:08:23,120 --> 00:08:25,120
between clusters

214
00:08:25,120 --> 00:08:27,840
and then epirator links cluster across

215
00:08:27,840 --> 00:08:30,479
con consecutive years together to form

216
00:08:30,479 --> 00:08:33,120
temporal clusters

217
00:08:33,120 --> 00:08:36,080
specifically for reader links cluster

218
00:08:36,080 --> 00:08:39,120
together if their jacquard similarity is

219
00:08:39,120 --> 00:08:40,399
a

220
00:08:40,399 --> 00:08:43,679
more than a threshold

221
00:08:46,240 --> 00:08:48,160
now let's take a look at our

222
00:08:48,160 --> 00:08:50,880
measurements and results

223
00:08:50,880 --> 00:08:54,560
in total we extract 14 temporal clusters

224
00:08:54,560 --> 00:08:57,040
and then we try to

225
00:08:57,040 --> 00:09:00,640
detect clusters fingerprinting clusters

226
00:09:00,640 --> 00:09:02,399
based on uh

227
00:09:02,399 --> 00:09:04,480
the percentage of api keyword that are

228
00:09:04,480 --> 00:09:05,360
used

229
00:09:05,360 --> 00:09:08,000
in the open source fingerprint js2

230
00:09:08,000 --> 00:09:09,920
library

231
00:09:09,920 --> 00:09:11,279
and also the

232
00:09:11,279 --> 00:09:14,320
fraction of api keyword that appear in

233
00:09:14,320 --> 00:09:16,560
fingerprinting scripts to

234
00:09:16,560 --> 00:09:19,200
non-fingerprinting scripts

235
00:09:19,200 --> 00:09:22,000
and using this approach we detect six

236
00:09:22,000 --> 00:09:25,040
potential fingerprinting cluster and the

237
00:09:25,040 --> 00:09:28,800
most dominant cluster has a life span of

238
00:09:28,800 --> 00:09:31,360
nine years and the number of keywords in

239
00:09:31,360 --> 00:09:34,640
this temporal cluster uh

240
00:09:34,640 --> 00:09:37,600
has like 63 percent of keywords in

241
00:09:37,600 --> 00:09:39,519
temporal cluster has a common keyword

242
00:09:39,519 --> 00:09:42,480
the fingerprint js2 library and also the

243
00:09:42,480 --> 00:09:45,040
ratio of fp uh

244
00:09:45,040 --> 00:09:48,080
fingerprinting uh key keyword to

245
00:09:48,080 --> 00:09:50,080
non-fingerprinting keyboard is 20 is

246
00:09:50,080 --> 00:09:52,560
about 27.

247
00:09:52,560 --> 00:09:55,279
we next investigate only the dominant

248
00:09:55,279 --> 00:09:57,040
cluster

249
00:09:57,040 --> 00:09:58,959
so in the dominant cluster we link

250
00:09:58,959 --> 00:10:03,360
javascript api methods and properties

251
00:10:03,360 --> 00:10:06,320
with their parent class for example

252
00:10:06,320 --> 00:10:07,600
if we observe

253
00:10:07,600 --> 00:10:10,000
changing time api keyword which is a

254
00:10:10,000 --> 00:10:12,240
property of battery status api or

255
00:10:12,240 --> 00:10:14,399
plugins which is a method of navigator

256
00:10:14,399 --> 00:10:15,440
api

257
00:10:15,440 --> 00:10:17,120
we know that their parent class is

258
00:10:17,120 --> 00:10:19,760
better status or navigator

259
00:10:19,760 --> 00:10:21,680
we then try to figure out if there is

260
00:10:21,680 --> 00:10:24,480
any public resource including research

261
00:10:24,480 --> 00:10:27,120
publication w

262
00:10:27,120 --> 00:10:30,079
3c documentation or public forums that

263
00:10:30,079 --> 00:10:32,399
introduce or implement this keyword in a

264
00:10:32,399 --> 00:10:34,560
fingerprinting technique

265
00:10:34,560 --> 00:10:36,800
depending on the

266
00:10:36,800 --> 00:10:38,720
time of depending on the time of our

267
00:10:38,720 --> 00:10:41,279
detection using fp radar in comparison

268
00:10:41,279 --> 00:10:43,839
with the disclosure date we categorize

269
00:10:43,839 --> 00:10:46,399
these keywords to on time detection

270
00:10:46,399 --> 00:10:49,120
early detection late detection

271
00:10:49,120 --> 00:10:51,360
and

272
00:10:51,440 --> 00:10:52,959
for a number of keywords that there

273
00:10:52,959 --> 00:10:55,040
isn't any public disclosure we call them

274
00:10:55,040 --> 00:10:57,519
not yet disclosed

275
00:10:57,519 --> 00:10:59,920
the false positive rate of fp rated

276
00:10:59,920 --> 00:11:01,440
might be in question for you

277
00:11:01,440 --> 00:11:03,440
particularly regarding the keyword that

278
00:11:03,440 --> 00:11:05,760
we said there isn't any ground truth as

279
00:11:05,760 --> 00:11:07,360
far as we know

280
00:11:07,360 --> 00:11:11,200
so for 56 percent of the keywords

281
00:11:11,200 --> 00:11:13,120
we know that there is a ground truth and

282
00:11:13,120 --> 00:11:15,200
everywhere did they accept use of these

283
00:11:15,200 --> 00:11:19,120
apis before just like in 14 percent of

284
00:11:19,120 --> 00:11:21,519
the keywords a period or detect them

285
00:11:21,519 --> 00:11:24,480
before disclosure for 29 percent of the

286
00:11:24,480 --> 00:11:27,519
keyword epiderm detects them on time and

287
00:11:27,519 --> 00:11:30,640
for 13 percent of uh keyword epiderm

288
00:11:30,640 --> 00:11:33,440
detects them later than disclosure time

289
00:11:33,440 --> 00:11:34,160
but

290
00:11:34,160 --> 00:11:34,959
uh

291
00:11:34,959 --> 00:11:37,360
as we said for 44 percent of the keyword

292
00:11:37,360 --> 00:11:39,440
there isn't any comprehensive ground

293
00:11:39,440 --> 00:11:43,600
truth and uh to demonstrate the validity

294
00:11:43,600 --> 00:11:46,320
of these detected keywords we need to

295
00:11:46,320 --> 00:11:48,640
manually analyze the script

296
00:11:48,640 --> 00:11:49,519
and

297
00:11:49,519 --> 00:11:51,040
see how they can be abused for

298
00:11:51,040 --> 00:11:53,839
fingerprinting

299
00:11:54,079 --> 00:11:56,480
now i now will introduce a number of our

300
00:11:56,480 --> 00:11:58,160
new findings

301
00:11:58,160 --> 00:12:00,240
we have selected a

302
00:12:00,240 --> 00:12:02,800
sensor api among our findings to analyze

303
00:12:02,800 --> 00:12:03,920
it here

304
00:12:03,920 --> 00:12:05,680
a lot of study has

305
00:12:05,680 --> 00:12:06,959
been done

306
00:12:06,959 --> 00:12:09,360
about how trackers identify user using

307
00:12:09,360 --> 00:12:11,760
sensor information and these studies

308
00:12:11,760 --> 00:12:14,639
date backs to 2014 but the point is that

309
00:12:14,639 --> 00:12:16,720
all of all the studies are based on an

310
00:12:16,720 --> 00:12:19,040
old interface such as device motion even

311
00:12:19,040 --> 00:12:21,200
and device orientation even

312
00:12:21,200 --> 00:12:24,320
and this interpreter is able for example

313
00:12:24,320 --> 00:12:26,000
gather information about the change in

314
00:12:26,000 --> 00:12:28,000
motion and our study also detect these

315
00:12:28,000 --> 00:12:30,320
apis as fingerprinting

316
00:12:30,320 --> 00:12:32,639
but these interfaces are not part of

317
00:12:32,639 --> 00:12:35,519
sensor api sensor apis are is

318
00:12:35,519 --> 00:12:38,160
approximately a new api and it is

319
00:12:38,160 --> 00:12:40,880
continuously being updated

320
00:12:40,880 --> 00:12:41,680
uh

321
00:12:41,680 --> 00:12:44,959
and it is supported by chrome but

322
00:12:44,959 --> 00:12:47,200
not firefox on safari

323
00:12:47,200 --> 00:12:49,600
fp writer detects abuse of a number of

324
00:12:49,600 --> 00:12:52,160
new features of sensor api for example

325
00:12:52,160 --> 00:12:54,160
ambient light sensor which return the

326
00:12:54,160 --> 00:12:56,880
current level of the light around the

327
00:12:56,880 --> 00:12:59,360
hosting device and it is not part of old

328
00:12:59,360 --> 00:13:01,120
interface and as far as we know it is

329
00:13:01,120 --> 00:13:03,519
not publicly disclosed

330
00:13:03,519 --> 00:13:06,160
we have also detected use of other api

331
00:13:06,160 --> 00:13:08,320
keywords including page visibility a

332
00:13:08,320 --> 00:13:09,920
number of

333
00:13:09,920 --> 00:13:12,240
and a number of api keywords in the web

334
00:13:12,240 --> 00:13:14,480
worker gamepad and clipboard api but

335
00:13:14,480 --> 00:13:17,040
because of time limitation i can't go

336
00:13:17,040 --> 00:13:18,240
through them but

337
00:13:18,240 --> 00:13:20,079
you can read more about them in our

338
00:13:20,079 --> 00:13:21,600
paper

339
00:13:21,600 --> 00:13:23,839
operators code as well as the data is

340
00:13:23,839 --> 00:13:26,639
available online on our github and we

341
00:13:26,639 --> 00:13:28,880
hope that the community will build uh on

342
00:13:28,880 --> 00:13:31,440
it to improve counter measures against

343
00:13:31,440 --> 00:13:33,600
browser fingerprinting thank you for

344
00:13:33,600 --> 00:13:38,200
listening and your questions are welcome

