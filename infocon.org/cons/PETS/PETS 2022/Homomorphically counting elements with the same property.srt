1
00:00:00,880 --> 00:00:02,080
hello

2
00:00:02,080 --> 00:00:05,120
my name is yoder vitorima pedera and i'm

3
00:00:05,120 --> 00:00:06,960
going to present the paper homomorphic

4
00:00:06,960 --> 00:00:08,400
accounting elements with the same

5
00:00:08,400 --> 00:00:10,639
property this is a joint work with

6
00:00:10,639 --> 00:00:14,480
filiachenko izabashini americans

7
00:00:14,480 --> 00:00:16,560
so let's start by explaining what's the

8
00:00:16,560 --> 00:00:18,080
problem that we want to solve in this

9
00:00:18,080 --> 00:00:19,039
paper

10
00:00:19,039 --> 00:00:20,640
let's say that you have a database with

11
00:00:20,640 --> 00:00:22,480
some data so for example the height and

12
00:00:22,480 --> 00:00:24,160
the weight of some people maybe some

13
00:00:24,160 --> 00:00:25,439
more data

14
00:00:25,439 --> 00:00:26,880
then you encrypt

15
00:00:26,880 --> 00:00:28,640
all these data so you encrypt the whole

16
00:00:28,640 --> 00:00:30,240
database and you send this encrypted

17
00:00:30,240 --> 00:00:32,800
database to the server but now you are

18
00:00:32,800 --> 00:00:35,840
interested on the body mass index or bmi

19
00:00:35,840 --> 00:00:38,160
which is defined as the weight divided

20
00:00:38,160 --> 00:00:40,559
by square of the height

21
00:00:40,559 --> 00:00:41,280
but

22
00:00:41,280 --> 00:00:42,079
you

23
00:00:42,079 --> 00:00:45,760
you don't only want the the bmi of each

24
00:00:45,760 --> 00:00:47,520
entry of the database but what you

25
00:00:47,520 --> 00:00:49,680
really want is to know the distribution

26
00:00:49,680 --> 00:00:51,600
of the bmi so you want to know how many

27
00:00:51,600 --> 00:00:55,120
elements have bmi equal to 24 how many

28
00:00:55,120 --> 00:00:57,920
elements have bmi equal to 25 and so on

29
00:00:57,920 --> 00:00:59,600
and so forth

30
00:00:59,600 --> 00:01:02,399
so in this case because the bmi is not

31
00:01:02,399 --> 00:01:04,799
pre-computed in the table the server has

32
00:01:04,799 --> 00:01:06,880
to compute it itself so the server has

33
00:01:06,880 --> 00:01:09,119
to take the first row and compute 25

34
00:01:09,119 --> 00:01:09,920
okay

35
00:01:09,920 --> 00:01:13,200
the for the second row 33 okay and then

36
00:01:13,200 --> 00:01:15,360
at the end the server will have a list

37
00:01:15,360 --> 00:01:18,640
like this with the bmi of each row

38
00:01:18,640 --> 00:01:21,119
and now what you really want

39
00:01:21,119 --> 00:01:24,000
is how many times each of these values

40
00:01:24,000 --> 00:01:26,479
appear in the table right so the server

41
00:01:26,479 --> 00:01:28,479
has to somehow

42
00:01:28,479 --> 00:01:29,759
now

43
00:01:29,759 --> 00:01:33,439
say that okay 24 appears one two times

44
00:01:33,439 --> 00:01:37,119
25 appears one two three times and so on

45
00:01:37,119 --> 00:01:39,520
right so this table with the frequencies

46
00:01:39,520 --> 00:01:41,520
is what you want to download right in

47
00:01:41,520 --> 00:01:43,759
general this is the description of the

48
00:01:43,759 --> 00:01:45,759
problem the server holds an encrypted

49
00:01:45,759 --> 00:01:47,840
database the client

50
00:01:47,840 --> 00:01:49,920
wants to query some function to the

51
00:01:49,920 --> 00:01:51,200
server

52
00:01:51,200 --> 00:01:54,560
and then let's define these sets x k

53
00:01:54,560 --> 00:01:57,119
as the elements of the database

54
00:01:57,119 --> 00:01:59,840
on which when we evaluate the function

55
00:01:59,840 --> 00:02:02,399
we get this value k right so if if the

56
00:02:02,399 --> 00:02:05,360
function is the bmi as in our example

57
00:02:05,360 --> 00:02:07,840
x of 24 for example is all the elements

58
00:02:07,840 --> 00:02:10,639
of the database whose bmi is equal to

59
00:02:10,639 --> 00:02:12,560
24.

60
00:02:12,560 --> 00:02:14,879
and now the client can query this

61
00:02:14,879 --> 00:02:16,879
function and what the the client wants

62
00:02:16,879 --> 00:02:19,120
to receive is ciphertext encrypting the

63
00:02:19,120 --> 00:02:21,520
size of each of the sets right for all

64
00:02:21,520 --> 00:02:23,599
the case in the image of f

65
00:02:23,599 --> 00:02:26,480
so that's the problem we want to solve

66
00:02:26,480 --> 00:02:30,319
but how can we solve this problem so

67
00:02:30,319 --> 00:02:32,239
we could think that maybe we could use

68
00:02:32,239 --> 00:02:35,280
pir or or order preserving encryption or

69
00:02:35,280 --> 00:02:37,440
searchable encryption because these

70
00:02:37,440 --> 00:02:39,920
primitives allow us to search on

71
00:02:39,920 --> 00:02:41,760
encrypted data

72
00:02:41,760 --> 00:02:43,280
but here

73
00:02:43,280 --> 00:02:45,840
we also want to compute over encrypted

74
00:02:45,840 --> 00:02:48,080
data not only search so these tools are

75
00:02:48,080 --> 00:02:50,400
not the best for us

76
00:02:50,400 --> 00:02:52,319
a natural

77
00:02:52,319 --> 00:02:54,080
primitive that we can use here is

78
00:02:54,080 --> 00:02:55,680
homomorphic encryption or fully

79
00:02:55,680 --> 00:02:58,000
homomorphic encryption fhe

80
00:02:58,000 --> 00:03:00,879
because fhe allow us to perform

81
00:03:00,879 --> 00:03:04,800
computation over encrypted data

82
00:03:04,800 --> 00:03:08,239
however if we just try to use fhe out of

83
00:03:08,239 --> 00:03:11,519
the box we don't obtain an efficient

84
00:03:11,519 --> 00:03:14,000
satisfactory solution

85
00:03:14,000 --> 00:03:15,120
so

86
00:03:15,120 --> 00:03:16,720
the problem is the following let's say

87
00:03:16,720 --> 00:03:17,920
that

88
00:03:17,920 --> 00:03:21,440
using fhe we are able to compute

89
00:03:21,440 --> 00:03:23,920
uh to evaluate the function f in every

90
00:03:23,920 --> 00:03:26,319
entry so for example the bmi we are able

91
00:03:26,319 --> 00:03:28,879
to compute this encryption of the bmi

92
00:03:28,879 --> 00:03:30,959
right on each entry and then we have

93
00:03:30,959 --> 00:03:33,680
this list of encrypted values but what

94
00:03:33,680 --> 00:03:36,720
we really want to obtain at the end

95
00:03:36,720 --> 00:03:39,360
is this table with the frequencies right

96
00:03:39,360 --> 00:03:42,400
so somehow now the server has to take

97
00:03:42,400 --> 00:03:43,280
this

98
00:03:43,280 --> 00:03:47,680
first value here 24 and

99
00:03:47,680 --> 00:03:50,239
discover how many times 24 appears in

100
00:03:50,239 --> 00:03:53,120
this list right but everything here is

101
00:03:53,120 --> 00:03:55,360
encrypted so how can we do this using

102
00:03:55,360 --> 00:03:58,239
fhe well we don't know the value that is

103
00:03:58,239 --> 00:04:00,159
encrypted here in the first entry so we

104
00:04:00,159 --> 00:04:02,400
have to take this value and we have to

105
00:04:02,400 --> 00:04:04,799
compare this value with all possible

106
00:04:04,799 --> 00:04:07,120
values in this table so we compare it

107
00:04:07,120 --> 00:04:09,040
with 24 and then we get an encryption of

108
00:04:09,040 --> 00:04:10,640
zero because this this comparison is

109
00:04:10,640 --> 00:04:13,120
false we compare with with the next

110
00:04:13,120 --> 00:04:14,959
value so 25 and then we get an

111
00:04:14,959 --> 00:04:16,798
encryption of one but we don't know that

112
00:04:16,798 --> 00:04:19,199
this is one it's encrypted so we don't

113
00:04:19,199 --> 00:04:21,358
know that we can already stop comparing

114
00:04:21,358 --> 00:04:22,960
we also have to compare with all the

115
00:04:22,960 --> 00:04:24,560
other values right and then at the end

116
00:04:24,560 --> 00:04:27,440
we have this zero one zero zero zero

117
00:04:27,440 --> 00:04:29,759
and then now we can just add these

118
00:04:29,759 --> 00:04:31,680
values to this table with the

119
00:04:31,680 --> 00:04:33,040
frequencies right

120
00:04:33,040 --> 00:04:34,880
and then we get the value one

121
00:04:34,880 --> 00:04:37,680
corresponding to 25 but we'd have to do

122
00:04:37,680 --> 00:04:41,280
the same with 27 right we do run these

123
00:04:41,280 --> 00:04:43,600
comparisons we have one here and we add

124
00:04:43,600 --> 00:04:45,520
we have to do the same with all the

125
00:04:45,520 --> 00:04:47,919
entries of the database actually

126
00:04:47,919 --> 00:04:50,080
the problem is when we use fhe the

127
00:04:50,080 --> 00:04:52,400
homomorphic comparison is very costly

128
00:04:52,400 --> 00:04:54,960
it's a very complicated and inefficient

129
00:04:54,960 --> 00:04:57,680
operation so if for every element of the

130
00:04:57,680 --> 00:05:00,320
database you have to

131
00:05:00,320 --> 00:05:03,520
run this comparison several times

132
00:05:03,520 --> 00:05:05,919
your solution will not be efficient at

133
00:05:05,919 --> 00:05:08,159
the end

134
00:05:09,440 --> 00:05:12,400
so first we propose a general framework

135
00:05:12,400 --> 00:05:14,720
to simplify the aggregation step this is

136
00:05:14,720 --> 00:05:17,280
a step where we want to

137
00:05:17,280 --> 00:05:20,000
compute the frequencies and where we

138
00:05:20,000 --> 00:05:22,560
need several comparisons

139
00:05:22,560 --> 00:05:24,479
most fhe schemes

140
00:05:24,479 --> 00:05:26,479
work over polynomial rings this means

141
00:05:26,479 --> 00:05:28,320
that they can encrypt

142
00:05:28,320 --> 00:05:31,120
polynomials of degree up to n

143
00:05:31,120 --> 00:05:33,440
to some value n which is a parameter of

144
00:05:33,440 --> 00:05:34,560
the scheme

145
00:05:34,560 --> 00:05:36,320
so this means that instead of simply

146
00:05:36,320 --> 00:05:38,639
encrypting a integer z we can actually

147
00:05:38,639 --> 00:05:41,120
encrypt a polynomial so we can encode

148
00:05:41,120 --> 00:05:43,280
several integers z i in the coefficients

149
00:05:43,280 --> 00:05:44,960
of this polynomial

150
00:05:44,960 --> 00:05:47,680
now let's say that instead of computing

151
00:05:47,680 --> 00:05:49,199
homomorphically

152
00:05:49,199 --> 00:05:50,479
f of z

153
00:05:50,479 --> 00:05:52,560
we can compute x

154
00:05:52,560 --> 00:05:54,880
to the power of f of z

155
00:05:54,880 --> 00:05:56,400
what happens then

156
00:05:56,400 --> 00:05:57,199
well

157
00:05:57,199 --> 00:05:59,199
before we had a list of encrypted values

158
00:05:59,199 --> 00:06:02,160
like this now we have a list with x

159
00:06:02,160 --> 00:06:05,199
to the power of these values right

160
00:06:05,199 --> 00:06:08,240
and now we can see that if we just add

161
00:06:08,240 --> 00:06:09,759
these entries

162
00:06:09,759 --> 00:06:11,919
so for example we add these two

163
00:06:11,919 --> 00:06:14,000
entries we get the polynomial

164
00:06:14,000 --> 00:06:15,520
uh

165
00:06:15,520 --> 00:06:18,800
x to the 25 plus x to the 27

166
00:06:18,800 --> 00:06:21,520
and then when we add the this third term

167
00:06:21,520 --> 00:06:24,240
we get 2 times x to the 25 so the

168
00:06:24,240 --> 00:06:26,400
coefficients in these polynomials are

169
00:06:26,400 --> 00:06:28,400
telling us how many times

170
00:06:28,400 --> 00:06:30,000
these values appear

171
00:06:30,000 --> 00:06:32,720
these values appear in the list

172
00:06:32,720 --> 00:06:35,360
so the aggregation step now

173
00:06:35,360 --> 00:06:37,520
does not require any

174
00:06:37,520 --> 00:06:40,000
comparison we just have to add all of

175
00:06:40,000 --> 00:06:42,639
these monomials and the polynomial that

176
00:06:42,639 --> 00:06:44,160
we get at the end

177
00:06:44,160 --> 00:06:46,960
is what exactly what we want

178
00:06:46,960 --> 00:06:48,880
okay so we are saying that if we are

179
00:06:48,880 --> 00:06:51,520
able to compute f of z in the exponent

180
00:06:51,520 --> 00:06:52,720
of x

181
00:06:52,720 --> 00:06:53,759
then

182
00:06:53,759 --> 00:06:55,759
the we don't need all the

183
00:06:55,759 --> 00:06:57,599
comparisons and then computing the

184
00:06:57,599 --> 00:06:59,120
frequencies become

185
00:06:59,120 --> 00:07:00,720
much easier

186
00:07:00,720 --> 00:07:02,800
it's essentially for free

187
00:07:02,800 --> 00:07:05,440
but how can we compute f of z like this

188
00:07:05,440 --> 00:07:07,599
so in our paper we propose two methods

189
00:07:07,599 --> 00:07:09,440
the first one is called full domain and

190
00:07:09,440 --> 00:07:11,120
this one is better when the domain and

191
00:07:11,120 --> 00:07:12,800
the image have more or less the same

192
00:07:12,800 --> 00:07:14,000
size

193
00:07:14,000 --> 00:07:16,000
and the second one is called the split

194
00:07:16,000 --> 00:07:18,240
domain and this is better when the

195
00:07:18,240 --> 00:07:21,840
domain is much larger than the image of

196
00:07:21,840 --> 00:07:23,919
the function

197
00:07:23,919 --> 00:07:26,240
so now we are going to give a brief

198
00:07:26,240 --> 00:07:28,639
overview of how the full domain strategy

199
00:07:28,639 --> 00:07:30,160
works

200
00:07:30,160 --> 00:07:33,360
so we start with an encryption of

201
00:07:33,360 --> 00:07:35,919
uh power of x so with the message in the

202
00:07:35,919 --> 00:07:38,080
exponent already and let's say that we

203
00:07:38,080 --> 00:07:41,680
want to compute f of z in the exponent

204
00:07:41,680 --> 00:07:42,479
so

205
00:07:42,479 --> 00:07:45,120
let's denote by f of z

206
00:07:45,120 --> 00:07:49,680
i the i beat of f z okay

207
00:07:49,680 --> 00:07:51,520
so there is already a known technique

208
00:07:51,520 --> 00:07:54,080
it's called test polynomial it's used

209
00:07:54,080 --> 00:07:57,440
already in tfhe another

210
00:07:57,440 --> 00:07:58,560
of

211
00:07:58,560 --> 00:08:00,160
encryption scheme

212
00:08:00,160 --> 00:08:03,039
and this technique allow us to extract

213
00:08:03,039 --> 00:08:06,319
from z in the exponent extract

214
00:08:06,319 --> 00:08:08,960
some function of z here

215
00:08:08,960 --> 00:08:11,680
in the coefficient now let's see

216
00:08:11,680 --> 00:08:15,120
all right so what we do is we define

217
00:08:15,120 --> 00:08:18,240
test polynomials to extract each bit of

218
00:08:18,240 --> 00:08:19,840
f of z

219
00:08:19,840 --> 00:08:22,400
so we have we apply one test polynomial

220
00:08:22,400 --> 00:08:26,720
we get the zeroth beat we apply a second

221
00:08:26,720 --> 00:08:29,520
test polynomial we get the bit 1 and so

222
00:08:29,520 --> 00:08:33,599
on at the end we get a bit l so we have

223
00:08:33,599 --> 00:08:35,679
now encryptions

224
00:08:35,679 --> 00:08:39,039
of all the bits of f of z

225
00:08:39,039 --> 00:08:41,839
now it's important that this is binary

226
00:08:41,839 --> 00:08:43,760
because there is another technique which

227
00:08:43,760 --> 00:08:46,800
is called cmux that allow us to lift

228
00:08:46,800 --> 00:08:48,160
these bits

229
00:08:48,160 --> 00:08:50,320
from here to the exponent again but when

230
00:08:50,320 --> 00:08:52,560
we lift then we can multiply them by any

231
00:08:52,560 --> 00:08:55,279
constant that we want so what we do here

232
00:08:55,279 --> 00:08:57,440
we apply this cmox technique to lift

233
00:08:57,440 --> 00:09:00,320
them by in at the same time we we

234
00:09:00,320 --> 00:09:03,360
multiply them by powers of two

235
00:09:03,360 --> 00:09:06,000
so if this is the bit zero we multiply

236
00:09:06,000 --> 00:09:08,800
by two to the zero right then the next

237
00:09:08,800 --> 00:09:11,680
bit is the bit one we multiply by two to

238
00:09:11,680 --> 00:09:13,839
the one and so on

239
00:09:13,839 --> 00:09:16,800
so now you can see we have all the bits

240
00:09:16,800 --> 00:09:18,800
multiplied by the corresponding powers

241
00:09:18,800 --> 00:09:21,200
so to reconstruct f of z

242
00:09:21,200 --> 00:09:23,200
everything we have to do now is to add

243
00:09:23,200 --> 00:09:24,399
all these values that are in the

244
00:09:24,399 --> 00:09:25,760
exponent right

245
00:09:25,760 --> 00:09:28,240
but how can we add then well

246
00:09:28,240 --> 00:09:29,920
we just have to use the homomorphic

247
00:09:29,920 --> 00:09:32,560
multiplication so we multiply all these

248
00:09:32,560 --> 00:09:35,519
values here when we multiply them

249
00:09:35,519 --> 00:09:37,440
of course what we are doing is adding

250
00:09:37,440 --> 00:09:39,760
the exponents right

251
00:09:39,760 --> 00:09:43,120
so what we obtain is a power of x and

252
00:09:43,120 --> 00:09:45,600
what is in the exponent now is this sum

253
00:09:45,600 --> 00:09:48,160
but this is exactly

254
00:09:48,160 --> 00:09:50,560
f of z

255
00:09:50,560 --> 00:09:52,480
right so this

256
00:09:52,480 --> 00:09:53,839
is how we can

257
00:09:53,839 --> 00:09:58,480
go from z to f of z in the exponent

258
00:09:58,480 --> 00:10:00,399
but there is a little detail here if you

259
00:10:00,399 --> 00:10:01,760
remember all these homomorphic

260
00:10:01,760 --> 00:10:04,720
operations are done over this polynomial

261
00:10:04,720 --> 00:10:05,920
ring

262
00:10:05,920 --> 00:10:07,360
so this means that

263
00:10:07,360 --> 00:10:09,120
every additional multiplication

264
00:10:09,120 --> 00:10:11,680
everything is done modulo x to the n

265
00:10:11,680 --> 00:10:13,040
plus one

266
00:10:13,040 --> 00:10:15,600
in particular if this f of z is larger

267
00:10:15,600 --> 00:10:18,320
than n then what we obtain is f of z

268
00:10:18,320 --> 00:10:21,440
module n instead of f of z itself

269
00:10:21,440 --> 00:10:23,360
and the same holds here

270
00:10:23,360 --> 00:10:24,880
d z

271
00:10:24,880 --> 00:10:26,959
has to be smaller than n otherwise we

272
00:10:26,959 --> 00:10:28,079
get

273
00:10:28,079 --> 00:10:30,880
z module n instead of z itself

274
00:10:30,880 --> 00:10:33,519
so this implies that we have to choose n

275
00:10:33,519 --> 00:10:36,079
we have to instantiate our fhe scheme

276
00:10:36,079 --> 00:10:38,880
using n that is larger than the domain

277
00:10:38,880 --> 00:10:41,279
and the image of the function

278
00:10:41,279 --> 00:10:43,440
now i will give a brief overview of our

279
00:10:43,440 --> 00:10:45,440
second method which is called the split

280
00:10:45,440 --> 00:10:46,560
domain

281
00:10:46,560 --> 00:10:48,640
this method is better when the domain of

282
00:10:48,640 --> 00:10:51,519
the function is much larger than the

283
00:10:51,519 --> 00:10:53,200
image of the function

284
00:10:53,200 --> 00:10:54,880
because in the previous method we had to

285
00:10:54,880 --> 00:10:57,040
choose n larger than both the domain and

286
00:10:57,040 --> 00:11:01,600
the image now we want to choose n larger

287
00:11:01,600 --> 00:11:03,839
than the image only and don't care about

288
00:11:03,839 --> 00:11:05,680
the size of the domain so let's assume

289
00:11:05,680 --> 00:11:08,480
that the domain is about k times larger

290
00:11:08,480 --> 00:11:09,839
than the image

291
00:11:09,839 --> 00:11:11,360
the main idea

292
00:11:11,360 --> 00:11:14,160
here is that we can write the domain as

293
00:11:14,160 --> 00:11:17,440
a union of k is smaller sets and

294
00:11:17,440 --> 00:11:19,040
all of these sets

295
00:11:19,040 --> 00:11:23,279
have size close to i the image of f

296
00:11:23,279 --> 00:11:24,480
and now

297
00:11:24,480 --> 00:11:26,720
we can take a value z that belongs to

298
00:11:26,720 --> 00:11:29,440
the domain so z z is possibly

299
00:11:29,440 --> 00:11:32,560
large and we can write it as k is small

300
00:11:32,560 --> 00:11:35,760
values z1 up to zk each of them

301
00:11:35,760 --> 00:11:38,320
belonging to one of these smaller sets

302
00:11:38,320 --> 00:11:41,360
p1 up to pk right and now instead of

303
00:11:41,360 --> 00:11:44,720
encrypting z directly we can encrypt

304
00:11:44,720 --> 00:11:45,920
uh

305
00:11:45,920 --> 00:11:48,399
all these the i's here so we have a

306
00:11:48,399 --> 00:11:51,760
vector of ciphertext but now because

307
00:11:51,760 --> 00:11:54,240
each zi is small

308
00:11:54,240 --> 00:11:56,880
the value n doesn't have to be larger

309
00:11:56,880 --> 00:11:59,440
than the domain just larger than the

310
00:11:59,440 --> 00:12:01,680
sets pis which means larger than the

311
00:12:01,680 --> 00:12:03,200
image

312
00:12:03,200 --> 00:12:05,760
and then we propose a method to

313
00:12:05,760 --> 00:12:08,720
transform this vector into the

314
00:12:08,720 --> 00:12:12,480
encryption of f of z so we can obtain

315
00:12:12,480 --> 00:12:15,519
f of z in the exponent as before and now

316
00:12:15,519 --> 00:12:17,920
of course f of z also belongs to the

317
00:12:17,920 --> 00:12:21,200
image so in both cases the the values

318
00:12:21,200 --> 00:12:23,040
that are in the exponent are bounded by

319
00:12:23,040 --> 00:12:25,839
i so we just have to choose n is

320
00:12:25,839 --> 00:12:28,959
slightly larger than the image and this

321
00:12:28,959 --> 00:12:31,360
method will work

322
00:12:31,360 --> 00:12:33,680
now you show one application that we

323
00:12:33,680 --> 00:12:35,360
present in our paper

324
00:12:35,360 --> 00:12:38,480
so we consider homomorphic heat maps so

325
00:12:38,480 --> 00:12:41,200
a heat map divides the region into cells

326
00:12:41,200 --> 00:12:44,639
and then it counts how many points

327
00:12:44,639 --> 00:12:47,360
lie in the same cell right so in this

328
00:12:47,360 --> 00:12:48,880
example

329
00:12:48,880 --> 00:12:51,839
eight points are in the first cell one

330
00:12:51,839 --> 00:12:54,160
point is in the second cell zero points

331
00:12:54,160 --> 00:12:56,399
in the third cell and so on

332
00:12:56,399 --> 00:13:00,240
so we can consider that the server has a

333
00:13:00,240 --> 00:13:01,839
database

334
00:13:01,839 --> 00:13:03,360
uh holding

335
00:13:03,360 --> 00:13:07,600
encryptions of coordinates x i and y i

336
00:13:07,600 --> 00:13:08,720
and then

337
00:13:08,720 --> 00:13:10,480
let's consider that we have a heat map

338
00:13:10,480 --> 00:13:12,079
with n cells

339
00:13:12,079 --> 00:13:14,720
so we can define a function that map a

340
00:13:14,720 --> 00:13:18,480
point to one of the n possible cells

341
00:13:18,480 --> 00:13:22,160
and computing the heat map is exactly uh

342
00:13:22,160 --> 00:13:24,399
counting how many times

343
00:13:24,399 --> 00:13:27,200
uh each of these cells appears when we

344
00:13:27,200 --> 00:13:29,440
evaluate this function on this points

345
00:13:29,440 --> 00:13:32,240
right so this is exactly what our method

346
00:13:32,240 --> 00:13:33,279
does

347
00:13:33,279 --> 00:13:35,279
if we apply our method considering this

348
00:13:35,279 --> 00:13:37,200
setting it will

349
00:13:37,200 --> 00:13:38,959
it will take the value 1 so the first

350
00:13:38,959 --> 00:13:41,199
cell and count how many points evaluate

351
00:13:41,199 --> 00:13:43,199
under this function to the first cell

352
00:13:43,199 --> 00:13:46,240
right so in the end of our

353
00:13:46,240 --> 00:13:48,639
methods we would have a polynomial like

354
00:13:48,639 --> 00:13:50,959
this that represents exactly the heat

355
00:13:50,959 --> 00:13:53,760
map so we have eight meaning that the

356
00:13:53,760 --> 00:13:56,480
first cell has eight elements one here

357
00:13:56,480 --> 00:13:58,560
the second cell has one element and so

358
00:13:58,560 --> 00:13:59,760
on

359
00:13:59,760 --> 00:14:03,199
we implemented both the

360
00:14:03,199 --> 00:14:05,680
full domain and the split domain methods

361
00:14:05,680 --> 00:14:07,600
using c plus plus

362
00:14:07,600 --> 00:14:09,760
and we used it to compute these

363
00:14:09,760 --> 00:14:12,959
homomorphic heat maps so compared to the

364
00:14:12,959 --> 00:14:14,880
out of the box fhe solution that i

365
00:14:14,880 --> 00:14:16,800
discussed earlier

366
00:14:16,800 --> 00:14:20,320
our methods are around 50 and 200 times

367
00:14:20,320 --> 00:14:23,440
faster and our source code is available

368
00:14:23,440 --> 00:14:26,639
on this github repository so anyone that

369
00:14:26,639 --> 00:14:29,360
wants can go there download and play

370
00:14:29,360 --> 00:14:30,880
with it

371
00:14:30,880 --> 00:14:34,079
we proposed the general framework to

372
00:14:34,079 --> 00:14:36,160
simplify the aggregation step where we

373
00:14:36,160 --> 00:14:38,000
have to compute the frequencies then we

374
00:14:38,000 --> 00:14:42,079
proposed two methods to instantiate this

375
00:14:42,079 --> 00:14:44,800
general framework and then

376
00:14:44,800 --> 00:14:46,240
we used them

377
00:14:46,240 --> 00:14:48,240
to implement one application the

378
00:14:48,240 --> 00:14:50,240
homomorphic heat maps

379
00:14:50,240 --> 00:14:52,800
if you have any questions or comments

380
00:14:52,800 --> 00:14:55,600
please just contact me

381
00:14:55,600 --> 00:14:59,040
thanks for watching

