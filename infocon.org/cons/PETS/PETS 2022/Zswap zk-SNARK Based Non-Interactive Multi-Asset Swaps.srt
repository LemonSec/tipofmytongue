1
00:00:00,000 --> 00:00:01,920
hi everyone i'm michael volkov and this

2
00:00:01,920 --> 00:00:04,160
is a paper called z-swap implementing

3
00:00:04,160 --> 00:00:06,160
non-interactive multi-asset swaps on top

4
00:00:06,160 --> 00:00:09,040
of zcash

5
00:00:09,040 --> 00:00:10,800
so we start from a very basic separation

6
00:00:10,800 --> 00:00:13,360
between public and private ledger so

7
00:00:13,360 --> 00:00:14,799
in the public world usually have some

8
00:00:14,799 --> 00:00:16,480
kind of transactions that send money in

9
00:00:16,480 --> 00:00:17,440
clear

10
00:00:17,440 --> 00:00:19,439
and then if party a will send something

11
00:00:19,439 --> 00:00:20,880
to b it needs to reference the

12
00:00:20,880 --> 00:00:22,160
transaction

13
00:00:22,160 --> 00:00:24,480
the previous one that sends money to a

14
00:00:24,480 --> 00:00:25,599
from c

15
00:00:25,599 --> 00:00:27,039
and then the it is actually some kind of

16
00:00:27,039 --> 00:00:29,519
a signature to prove that it authorizes

17
00:00:29,519 --> 00:00:31,519
this spend

18
00:00:31,519 --> 00:00:33,120
if you want to do something like that in

19
00:00:33,120 --> 00:00:34,880
the private setting usually it's much

20
00:00:34,880 --> 00:00:37,600
more complicated so you have um all the

21
00:00:37,600 --> 00:00:39,040
values inside transaction hidden by

22
00:00:39,040 --> 00:00:41,120
default and then a only sees its own

23
00:00:41,120 --> 00:00:42,559
transaction and then when it comes to

24
00:00:42,559 --> 00:00:44,399
send something to b b will only see only

25
00:00:44,399 --> 00:00:46,000
list its own transaction but not the

26
00:00:46,000 --> 00:00:47,360
previous input

27
00:00:47,360 --> 00:00:49,360
so to reference the previous transaction

28
00:00:49,360 --> 00:00:50,800
you need to attach some kind of a proof

29
00:00:50,800 --> 00:00:52,800
or a signature as your knowledge proof

30
00:00:52,800 --> 00:00:54,719
in case of z cash or a ring signature in

31
00:00:54,719 --> 00:00:57,199
case of monero which will hide the

32
00:00:57,199 --> 00:01:00,079
um the the way money was flowing into

33
00:01:00,079 --> 00:01:03,440
this account in the last account

34
00:01:03,600 --> 00:01:06,159
this difference is very visible if uh

35
00:01:06,159 --> 00:01:07,520
we're trying to build some kind of

36
00:01:07,520 --> 00:01:09,520
centralized finance solutions in the

37
00:01:09,520 --> 00:01:11,520
public world where we only have where we

38
00:01:11,520 --> 00:01:12,960
have smart contracts

39
00:01:12,960 --> 00:01:14,080
uh for example take you through

40
00:01:14,080 --> 00:01:16,720
makardano on these platforms you can

41
00:01:16,720 --> 00:01:19,040
build uh lots of different tools like um

42
00:01:19,040 --> 00:01:20,400
you know automatic market makers

43
00:01:20,400 --> 00:01:22,400
exchanges landing platforms investment

44
00:01:22,400 --> 00:01:24,960
stable coins etc

45
00:01:24,960 --> 00:01:26,479
if someone wants to implement something

46
00:01:26,479 --> 00:01:27,680
like that on

47
00:01:27,680 --> 00:01:29,439
private cryptocurrency and private

48
00:01:29,439 --> 00:01:32,079
ledgers um again it's it's much more

49
00:01:32,079 --> 00:01:34,159
complicated not just of inherit because

50
00:01:34,159 --> 00:01:35,759
of inherent limitations but because of

51
00:01:35,759 --> 00:01:37,119
just the you know practical

52
00:01:37,119 --> 00:01:40,320
considerations um if you want to add

53
00:01:40,320 --> 00:01:41,759
some kind of an immigration tool on top

54
00:01:41,759 --> 00:01:43,920
of cardano or any public chain

55
00:01:43,920 --> 00:01:44,960
essentially

56
00:01:44,960 --> 00:01:46,640
like a tumbler and mixer

57
00:01:46,640 --> 00:01:48,960
it's often triceps anonymous or it

58
00:01:48,960 --> 00:01:51,280
requires a lot of setup

59
00:01:51,280 --> 00:01:54,159
if you want to add smart contracts on

60
00:01:54,159 --> 00:01:55,600
private

61
00:01:55,600 --> 00:01:57,759
private chains such that such as

62
00:01:57,759 --> 00:02:00,399
zcash or monero it is quite challenging

63
00:02:00,399 --> 00:02:01,920
it's just quite challenging and private

64
00:02:01,920 --> 00:02:03,920
smart contracts um theoretically

65
00:02:03,920 --> 00:02:05,840
possible even practically possible but

66
00:02:05,840 --> 00:02:06,960
still

67
00:02:06,960 --> 00:02:09,758
not being implemented on any big scale

68
00:02:09,758 --> 00:02:11,760
because of their because of many

69
00:02:11,760 --> 00:02:13,280
practical problems with their

70
00:02:13,280 --> 00:02:15,440
implementation so

71
00:02:15,440 --> 00:02:16,879
what we're trying to solve here what

72
00:02:16,879 --> 00:02:18,560
we're trying to attack here is this area

73
00:02:18,560 --> 00:02:21,680
of hybrid solutions where we have um

74
00:02:21,680 --> 00:02:23,840
private cryptocurrencies but we add

75
00:02:23,840 --> 00:02:25,840
very basic multi-token functionality

76
00:02:25,840 --> 00:02:28,480
here to them so examples of those are

77
00:02:28,480 --> 00:02:30,640
for example swap city this is a paper by

78
00:02:30,640 --> 00:02:33,519
our co-author felix and gilman

79
00:02:33,519 --> 00:02:36,480
21. so this adds um

80
00:02:36,480 --> 00:02:39,280
swaps into monaro

81
00:02:39,280 --> 00:02:40,879
essentially and then we also have for

82
00:02:40,879 --> 00:02:42,400
example these two categories of

83
00:02:42,400 --> 00:02:44,720
solutions so called user-defined assets

84
00:02:44,720 --> 00:02:46,480
on the cache multi-asset shielded pool

85
00:02:46,480 --> 00:02:48,080
msp

86
00:02:48,080 --> 00:02:50,000
anoma and these are pretty much the same

87
00:02:50,000 --> 00:02:52,160
idea of how do you add multiple tokens

88
00:02:52,160 --> 00:02:54,959
on top of zcash like cryptocurrency

89
00:02:54,959 --> 00:02:56,959
so we believe that these solutions can

90
00:02:56,959 --> 00:02:58,800
be a very solid basis

91
00:02:58,800 --> 00:02:59,680
for

92
00:02:59,680 --> 00:03:00,720
later

93
00:03:00,720 --> 00:03:02,239
interacting with private smart content

94
00:03:02,239 --> 00:03:04,959
so they are very necessary to get right

95
00:03:04,959 --> 00:03:06,159
um

96
00:03:06,159 --> 00:03:08,159
and in this area we present our work uh

97
00:03:08,159 --> 00:03:09,760
called z-swap it's a cryptocurrency

98
00:03:09,760 --> 00:03:11,360
mechanism very much the cache like an

99
00:03:11,360 --> 00:03:14,400
extension of of zcash

100
00:03:14,400 --> 00:03:16,959
which presents multi-asset atomic swaps

101
00:03:16,959 --> 00:03:18,800
so multi-asset means that we

102
00:03:18,800 --> 00:03:19,680
add

103
00:03:19,680 --> 00:03:22,159
types into the nodes so we have a node

104
00:03:22,159 --> 00:03:24,000
like a bank node that holds the value

105
00:03:24,000 --> 00:03:25,680
and also the type so you can represent

106
00:03:25,680 --> 00:03:26,560
many

107
00:03:26,560 --> 00:03:28,560
different types

108
00:03:28,560 --> 00:03:31,200
in the vein of your c20 smart contracts

109
00:03:31,200 --> 00:03:33,280
this formalizes msp so we do provide a

110
00:03:33,280 --> 00:03:35,360
rigorous analysis in sp

111
00:03:35,360 --> 00:03:38,000
um and atomic swaps means that whenever

112
00:03:38,000 --> 00:03:39,920
two parties have some coins so

113
00:03:39,920 --> 00:03:41,440
this person in the left has five pounds

114
00:03:41,440 --> 00:03:43,040
and it doesn't have four euro and they

115
00:03:43,040 --> 00:03:45,599
can swap that atomically and we realize

116
00:03:45,599 --> 00:03:47,760
the swap by essentially allowing merging

117
00:03:47,760 --> 00:03:49,360
transactions together

118
00:03:49,360 --> 00:03:51,760
non-interactively

119
00:03:51,760 --> 00:03:53,920
so how do we do about that let's start

120
00:03:53,920 --> 00:03:55,519
from something very simple let's start

121
00:03:55,519 --> 00:03:57,840
from zcash sapling we will only cover

122
00:03:57,840 --> 00:04:00,400
sapling uh if not set otherwise

123
00:04:00,400 --> 00:04:02,879
so in the cache we have these two main

124
00:04:02,879 --> 00:04:04,159
building blocks i would i would say

125
00:04:04,159 --> 00:04:04,959
they're

126
00:04:04,959 --> 00:04:07,360
called nodes and nullifiers so nodes are

127
00:04:07,360 --> 00:04:08,319
these

128
00:04:08,319 --> 00:04:10,720
things containing values and from a node

129
00:04:10,720 --> 00:04:12,080
if you own the node if you have a secret

130
00:04:12,080 --> 00:04:14,080
key you can derive using prf and

131
00:04:14,080 --> 00:04:15,360
nullifier and these two things are

132
00:04:15,360 --> 00:04:16,880
unlikable if you see a nullifier of

133
00:04:16,880 --> 00:04:19,440
someone's node you cannot know what node

134
00:04:19,440 --> 00:04:20,959
contains

135
00:04:20,959 --> 00:04:21,918
so now

136
00:04:21,918 --> 00:04:23,280
zcash maintains two structures

137
00:04:23,280 --> 00:04:24,880
commitment three so a tree of

138
00:04:24,880 --> 00:04:27,600
commitments of nodes and then set of

139
00:04:27,600 --> 00:04:29,199
nullifiers

140
00:04:29,199 --> 00:04:30,720
whenever a transaction comes that wants

141
00:04:30,720 --> 00:04:32,639
to spend some coins and output some

142
00:04:32,639 --> 00:04:34,639
coins it has a set of input nullifiers

143
00:04:34,639 --> 00:04:36,880
instead of output commitment nodes

144
00:04:36,880 --> 00:04:38,639
and so in the endpoint transaction is

145
00:04:38,639 --> 00:04:42,400
verified nullifiers go to this um set of

146
00:04:42,400 --> 00:04:44,000
nullifiers and the commitments go to

147
00:04:44,000 --> 00:04:46,160
this first set of uh commitment trees

148
00:04:46,160 --> 00:04:47,919
sorry into the commitment tree so if

149
00:04:47,919 --> 00:04:49,840
nullifiers nullifiers prevent double

150
00:04:49,840 --> 00:04:51,440
spending so if not is present here it

151
00:04:51,440 --> 00:04:53,280
means that the commitment was already

152
00:04:53,280 --> 00:04:55,440
the node was already spent

153
00:04:55,440 --> 00:04:57,360
to prove that everything works that the

154
00:04:57,360 --> 00:04:58,880
nullifiers are correctly formed and the

155
00:04:58,880 --> 00:05:00,880
commitments are correctly formed zcash

156
00:05:00,880 --> 00:05:03,680
uses uh niziks so we have an isik and

157
00:05:03,680 --> 00:05:04,960
something we have an easy per input

158
00:05:04,960 --> 00:05:07,360
music per output so the input netix says

159
00:05:07,360 --> 00:05:09,039
that the input nullifiers are correctly

160
00:05:09,039 --> 00:05:10,960
formed from some nodes in the medical

161
00:05:10,960 --> 00:05:13,440
tree and output music say that the

162
00:05:13,440 --> 00:05:16,080
commitments are just correctly formed

163
00:05:16,080 --> 00:05:18,160
but one thing that is not solved by

164
00:05:18,160 --> 00:05:19,840
music directly is the balance so how do

165
00:05:19,840 --> 00:05:21,440
we make sure that the value is inside

166
00:05:21,440 --> 00:05:23,039
this input nodes and the values inside

167
00:05:23,039 --> 00:05:25,600
output nodes do balance so input values

168
00:05:25,600 --> 00:05:28,960
minus output values is more than zero

169
00:05:28,960 --> 00:05:32,000
so again in indicas uh it's solved by

170
00:05:32,000 --> 00:05:34,160
adding so ending commitments homophobic

171
00:05:34,160 --> 00:05:36,400
commitments so this is our notification

172
00:05:36,400 --> 00:05:39,280
commitments

173
00:05:39,280 --> 00:05:40,880
of nodes and we add these value

174
00:05:40,880 --> 00:05:43,199
commitments inside here so each proof

175
00:05:43,199 --> 00:05:45,440
contains so each node contains a value

176
00:05:45,440 --> 00:05:47,520
and the randomness on each side and then

177
00:05:47,520 --> 00:05:49,520
the commitment is just h to the value

178
00:05:49,520 --> 00:05:51,600
and g to the r

179
00:05:51,600 --> 00:05:53,360
and as you may see if you have

180
00:05:53,360 --> 00:05:55,120
commitments to all these values on the

181
00:05:55,120 --> 00:05:56,960
left and the right individual ones if

182
00:05:56,960 --> 00:05:59,199
you multiply everything left and divide

183
00:05:59,199 --> 00:06:01,600
by everything to write so this value you

184
00:06:01,600 --> 00:06:02,800
will get a commitment to zero if

185
00:06:02,800 --> 00:06:04,240
everything balances commitment to zero

186
00:06:04,240 --> 00:06:07,600
with this joint randomness r

187
00:06:07,600 --> 00:06:09,039
and then what g cash does is that it

188
00:06:09,039 --> 00:06:10,880
says we have this

189
00:06:10,880 --> 00:06:13,120
joint randomness r and we have this g to

190
00:06:13,120 --> 00:06:15,039
the r so this is a kind of a binding

191
00:06:15,039 --> 00:06:17,120
secret key and the right thing is

192
00:06:17,120 --> 00:06:19,759
binding public key and dks provides a

193
00:06:19,759 --> 00:06:21,919
snore signature essential signature

194
00:06:21,919 --> 00:06:24,479
sigma on the whole transaction proving

195
00:06:24,479 --> 00:06:26,560
the knowledge of bsk with respect to bbk

196
00:06:26,560 --> 00:06:28,720
bpk is public bsd is secret

197
00:06:28,720 --> 00:06:30,240
this is how they solve it

198
00:06:30,240 --> 00:06:32,240
so our thinking is what happens if we

199
00:06:32,240 --> 00:06:34,800
just open this value r we don't try to

200
00:06:34,800 --> 00:06:36,800
put it in the side schnor inside any

201
00:06:36,800 --> 00:06:38,800
non-interactive journal which proof

202
00:06:38,800 --> 00:06:41,919
so the answer is we get balancing so we

203
00:06:41,919 --> 00:06:43,360
still have achieved balancing and we

204
00:06:43,360 --> 00:06:45,120
achieve some binding so we don't achieve

205
00:06:45,120 --> 00:06:46,800
fully full binding but we achieve

206
00:06:46,800 --> 00:06:49,120
exactly the type of bank you want to get

207
00:06:49,120 --> 00:06:50,560
for swaps

208
00:06:50,560 --> 00:06:52,639
transactions can be merged

209
00:06:52,639 --> 00:06:54,080
so you can have the transactions you can

210
00:06:54,080 --> 00:06:55,680
merge them together so all the inputs

211
00:06:55,680 --> 00:06:56,880
can get needed and all the outputs

212
00:06:56,880 --> 00:06:58,880
concatenated but you can't split them

213
00:06:58,880 --> 00:06:59,919
apart because they don't know the

214
00:06:59,919 --> 00:07:01,680
individual randomness which you need to

215
00:07:01,680 --> 00:07:03,520
split your transaction into

216
00:07:03,520 --> 00:07:05,120
so the first thing that we change is the

217
00:07:05,120 --> 00:07:06,479
commitment scheme the value commitment

218
00:07:06,479 --> 00:07:08,479
scheme we add types into it

219
00:07:08,479 --> 00:07:10,800
so now the type is hashed first and this

220
00:07:10,800 --> 00:07:14,479
hash of type is the new base age of type

221
00:07:14,479 --> 00:07:15,919
and we use different bases for different

222
00:07:15,919 --> 00:07:17,840
types this is how we arrive at this

223
00:07:17,840 --> 00:07:19,440
vector pattern commitment scheme with a

224
00:07:19,440 --> 00:07:21,440
very interesting homomorphic property

225
00:07:21,440 --> 00:07:23,680
such that different

226
00:07:23,680 --> 00:07:25,599
types produce different bases and so the

227
00:07:25,599 --> 00:07:27,919
values of different types do not some

228
00:07:27,919 --> 00:07:29,039
are not summed together but the

229
00:07:29,039 --> 00:07:30,880
randomness joint randomness is still the

230
00:07:30,880 --> 00:07:32,720
same as in certain commitments that's

231
00:07:32,720 --> 00:07:34,960
standard palace and commitment scheme

232
00:07:34,960 --> 00:07:36,479
the chief balancing with this vector

233
00:07:36,479 --> 00:07:38,479
pattern commitment scheme is easy as

234
00:07:38,479 --> 00:07:39,919
easy as it was before essentially you

235
00:07:39,919 --> 00:07:41,680
have still these values but now all

236
00:07:41,680 --> 00:07:42,639
types

237
00:07:42,639 --> 00:07:45,919
and the commitments to typed values

238
00:07:45,919 --> 00:07:47,840
and then as before we just

239
00:07:47,840 --> 00:07:49,360
take a product of the all the inputs and

240
00:07:49,360 --> 00:07:50,879
divide by the product of all the outputs

241
00:07:50,879 --> 00:07:52,960
and we get a commitment to zero it's a

242
00:07:52,960 --> 00:07:54,960
vector so vector of zero for different

243
00:07:54,960 --> 00:07:57,440
types and this joint randomness are the

244
00:07:57,440 --> 00:07:59,520
difference is that the r is now part of

245
00:07:59,520 --> 00:08:01,199
the part of the transaction and then we

246
00:08:01,199 --> 00:08:04,560
just open it as we said before

247
00:08:04,560 --> 00:08:07,199
the z swap transaction comprises of

248
00:08:07,199 --> 00:08:09,120
the basic bits nullifiers commitments to

249
00:08:09,120 --> 00:08:10,879
the output nodes zero knowledge proofs

250
00:08:10,879 --> 00:08:12,479
and this vector balancing commitments

251
00:08:12,479 --> 00:08:13,759
but these factor commitments and

252
00:08:13,759 --> 00:08:16,000
circuits are very much like indication

253
00:08:16,000 --> 00:08:18,080
so we ignore it for now this is not very

254
00:08:18,080 --> 00:08:19,680
interesting what is interesting is this

255
00:08:19,680 --> 00:08:21,599
open randomness which allows us to merge

256
00:08:21,599 --> 00:08:23,599
and split things up merge but not split

257
00:08:23,599 --> 00:08:24,720
things

258
00:08:24,720 --> 00:08:26,879
and then we have this imbalance per time

259
00:08:26,879 --> 00:08:28,400
so in balance per type is just an open

260
00:08:28,400 --> 00:08:30,879
set that maps types to the imbalance for

261
00:08:30,879 --> 00:08:32,559
example if i have an unbalanced

262
00:08:32,559 --> 00:08:34,080
transaction so it's a stem transaction

263
00:08:34,080 --> 00:08:36,320
with the non-zero imbalance

264
00:08:36,320 --> 00:08:39,120
um it say sells some

265
00:08:39,120 --> 00:08:41,360
nulls sell some coins of type green it

266
00:08:41,360 --> 00:08:43,440
receives some points of type red its

267
00:08:43,440 --> 00:08:45,440
imbalance is five for green and minus

268
00:08:45,440 --> 00:08:47,600
three for n if transaction is finalized

269
00:08:47,600 --> 00:08:50,160
it's balanced its imbalance is zero

270
00:08:50,160 --> 00:08:51,680
so we get to the swap mechanics now

271
00:08:51,680 --> 00:08:53,519
which is very important so how do we

272
00:08:53,519 --> 00:08:56,480
swap how do we swap things in this mob

273
00:08:56,480 --> 00:08:58,800
for example a creates an offer it's an

274
00:08:58,800 --> 00:09:01,440
embellished transaction from a to a a

275
00:09:01,440 --> 00:09:02,880
wants a cell some green and receives

276
00:09:02,880 --> 00:09:04,720
some red so it creates a transaction it

277
00:09:04,720 --> 00:09:06,720
has this imbalance public b does the

278
00:09:06,720 --> 00:09:08,000
same but with different values the

279
00:09:08,000 --> 00:09:09,920
opposite values for simplicity of the

280
00:09:09,920 --> 00:09:11,040
example

281
00:09:11,040 --> 00:09:13,040
then these two offers are sent to anyone

282
00:09:13,040 --> 00:09:14,959
this merger m

283
00:09:14,959 --> 00:09:17,120
and anyone who sees this from these two

284
00:09:17,120 --> 00:09:18,800
transactions can essentially merge them

285
00:09:18,800 --> 00:09:20,720
together into one transaction and when

286
00:09:20,720 --> 00:09:22,480
you merge transactions you erase

287
00:09:22,480 --> 00:09:23,839
information about their imbalance so

288
00:09:23,839 --> 00:09:26,160
this transaction the end is just exactly

289
00:09:26,160 --> 00:09:28,800
just as the basic

290
00:09:28,800 --> 00:09:30,560
z cash transaction doesn't have any

291
00:09:30,560 --> 00:09:32,320
balances it's fully

292
00:09:32,320 --> 00:09:34,480
uh it fully hides all the values inside

293
00:09:34,480 --> 00:09:38,160
and this is then sent to the blockchain

294
00:09:38,160 --> 00:09:40,959
there are different ways that you can um

295
00:09:40,959 --> 00:09:43,600
that the user a can uh send this offer

296
00:09:43,600 --> 00:09:45,839
to to different parties so for example a

297
00:09:45,839 --> 00:09:46,800
can

298
00:09:46,800 --> 00:09:48,880
try to swap some funds with b by sending

299
00:09:48,880 --> 00:09:50,480
an offer directly to b and then b

300
00:09:50,480 --> 00:09:52,480
creates its own offer it matches and

301
00:09:52,480 --> 00:09:54,399
then merge transactions together and

302
00:09:54,399 --> 00:09:56,800
send it to the blockchain

303
00:09:56,800 --> 00:09:59,040
um at the same time there might be a

304
00:09:59,040 --> 00:10:00,399
party called matching service that

305
00:10:00,399 --> 00:10:02,560
collects lots of different offers and

306
00:10:02,560 --> 00:10:04,079
then it just merges them all together

307
00:10:04,079 --> 00:10:05,360
maybe it also implements some kind of

308
00:10:05,360 --> 00:10:07,040
additional mechanics on you know

309
00:10:07,040 --> 00:10:08,399
interacting with users and saying

310
00:10:08,399 --> 00:10:10,000
telling them what is happening to their

311
00:10:10,000 --> 00:10:12,880
offers and so in the same way just it is

312
00:10:12,880 --> 00:10:15,680
exactly like an exchange platform where

313
00:10:15,680 --> 00:10:17,120
you see different offers and then try to

314
00:10:17,120 --> 00:10:19,760
match those with which can be matched

315
00:10:19,760 --> 00:10:22,079
so additionally to this we also

316
00:10:22,079 --> 00:10:24,720
argued that um informally that this is a

317
00:10:24,720 --> 00:10:26,800
minimal trust implemented that is

318
00:10:26,800 --> 00:10:28,880
necessary for exchange because

319
00:10:28,880 --> 00:10:30,800
you cannot exchange funds without

320
00:10:30,800 --> 00:10:32,320
revealing at least the imbalance of it

321
00:10:32,320 --> 00:10:33,200
so

322
00:10:33,200 --> 00:10:35,360
it gives this the system gives a

323
00:10:35,360 --> 00:10:38,079
flexibility over how and whom does it

324
00:10:38,079 --> 00:10:39,760
trust in exchanging things but

325
00:10:39,760 --> 00:10:41,440
essentially it cannot reveal less than

326
00:10:41,440 --> 00:10:44,000
what it reveals for now in the offer

327
00:10:44,000 --> 00:10:46,000
additionally to this m can collect fees

328
00:10:46,000 --> 00:10:48,800
so m can always add an additional fee

329
00:10:48,800 --> 00:10:50,160
output of the transactions and collect

330
00:10:50,160 --> 00:10:52,480
some money for its service and then it

331
00:10:52,480 --> 00:10:54,000
is also possible for a and b and other

332
00:10:54,000 --> 00:10:55,600
users to cancel buffers so this product

333
00:10:55,600 --> 00:10:57,839
is quite flexible in that respect

334
00:10:57,839 --> 00:11:00,000
it's very basically very flexible we

335
00:11:00,000 --> 00:11:01,440
prove system secure in the standard

336
00:11:01,440 --> 00:11:03,600
model in the game based setting

337
00:11:03,600 --> 00:11:05,440
essentially we have properties like

338
00:11:05,440 --> 00:11:07,200
antitheft which is we can merge

339
00:11:07,200 --> 00:11:09,279
interactions but not split them we have

340
00:11:09,279 --> 00:11:11,839
a balance which says funds are secure so

341
00:11:11,839 --> 00:11:13,760
you cannot spend funds that are not

342
00:11:13,760 --> 00:11:15,680
yours essentially and then privacy that

343
00:11:15,680 --> 00:11:17,600
you cannot see what happens on the

344
00:11:17,600 --> 00:11:19,360
blockchain kind of in distinguishability

345
00:11:19,360 --> 00:11:21,519
notion

346
00:11:21,519 --> 00:11:23,519
and finally a performance of our system

347
00:11:23,519 --> 00:11:25,040
is very close to the

348
00:11:25,040 --> 00:11:26,720
basic z cache it's quite efficient in

349
00:11:26,720 --> 00:11:28,480
that sense

350
00:11:28,480 --> 00:11:30,720
this table compares this swap with our

351
00:11:30,720 --> 00:11:32,399
implementation of sapling and the basic

352
00:11:32,399 --> 00:11:34,800
sapling and you can see for example for

353
00:11:34,800 --> 00:11:36,800
spending proofs and outputting proofs

354
00:11:36,800 --> 00:11:38,560
and so for generating spam and output

355
00:11:38,560 --> 00:11:40,560
proofs and verifying them

356
00:11:40,560 --> 00:11:41,279
the

357
00:11:41,279 --> 00:11:42,880
amount of time spent is pretty much the

358
00:11:42,880 --> 00:11:44,079
same

359
00:11:44,079 --> 00:11:45,120
um

360
00:11:45,120 --> 00:11:46,720
merging transactions and creating them

361
00:11:46,720 --> 00:11:49,600
is extremely cheap um and then the only

362
00:11:49,600 --> 00:11:51,440
difference that is noticeable is

363
00:11:51,440 --> 00:11:53,120
creating and verifying commitments but

364
00:11:53,120 --> 00:11:54,399
just because the patent commitment

365
00:11:54,399 --> 00:11:55,839
scheme is a bit more complicated but

366
00:11:55,839 --> 00:11:58,160
that's the overhead is still very small

367
00:11:58,160 --> 00:12:00,399
and overall the overhead compared to the

368
00:12:00,399 --> 00:12:02,079
cache is quite minimal

369
00:12:02,079 --> 00:12:06,040
and that's pretty much it thank you

