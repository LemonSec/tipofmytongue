1
00:00:02,159 --> 00:00:04,560
welcome everyone um

2
00:00:04,560 --> 00:00:06,399
i want to

3
00:00:06,399 --> 00:00:09,120
present my paper how not to handle keys

4
00:00:09,120 --> 00:00:10,559
timing attacks on the fight

5
00:00:10,559 --> 00:00:13,120
authenticator privacy my name is michael

6
00:00:13,120 --> 00:00:15,040
kimkowski and i'm phd student at

7
00:00:15,040 --> 00:00:17,119
macquarie university and together with

8
00:00:17,119 --> 00:00:19,760
my colleagues dr jan wood and professor

9
00:00:19,760 --> 00:00:23,359
daley kaffar and also in collaboration

10
00:00:23,359 --> 00:00:26,800
with dr lucian hansling from sispa

11
00:00:26,800 --> 00:00:29,760
security center in germany

12
00:00:29,760 --> 00:00:30,640
we

13
00:00:30,640 --> 00:00:32,880
we found out the privacy

14
00:00:32,880 --> 00:00:34,480
issue in the

15
00:00:34,480 --> 00:00:35,920
fido

16
00:00:35,920 --> 00:00:37,920
protocol actually from in the

17
00:00:37,920 --> 00:00:40,239
authenticators

18
00:00:40,239 --> 00:00:42,239
so quickly about the modern

19
00:00:42,239 --> 00:00:45,520
authentication and to where we had

20
00:00:45,520 --> 00:00:49,200
in terms of fido so 2012 idol alliance

21
00:00:49,200 --> 00:00:51,920
were still established and they created

22
00:00:51,920 --> 00:00:55,199
first version but only 2019

23
00:00:55,199 --> 00:00:58,320
when the web authentication

24
00:00:58,320 --> 00:01:01,840
protocol was defined it became to be a

25
00:01:01,840 --> 00:01:04,479
popular solution and currently

26
00:01:04,479 --> 00:01:07,200
on the right hand side you can see the

27
00:01:07,200 --> 00:01:09,600
microsoft recommendation where the fido

28
00:01:09,600 --> 00:01:12,159
key is in the best column on the

29
00:01:12,159 --> 00:01:14,560
passwordless authentication

30
00:01:14,560 --> 00:01:17,439
so quickly about the fido so this is a

31
00:01:17,439 --> 00:01:21,040
really a simple protocol challenge and

32
00:01:21,040 --> 00:01:22,400
response so

33
00:01:22,400 --> 00:01:24,080
on the top you can see this block

34
00:01:24,080 --> 00:01:26,720
diagram number one number two

35
00:01:26,720 --> 00:01:29,200
is the request that user

36
00:01:29,200 --> 00:01:31,759
does to the server server responds with

37
00:01:31,759 --> 00:01:33,439
the challenge which is forwarded to the

38
00:01:33,439 --> 00:01:35,759
authenticator an authenticator signs it

39
00:01:35,759 --> 00:01:37,200
and

40
00:01:37,200 --> 00:01:40,320
and sends back the signature which is

41
00:01:40,320 --> 00:01:43,840
verified by the server against the

42
00:01:43,840 --> 00:01:45,680
pre-registered

43
00:01:45,680 --> 00:01:48,000
public key

44
00:01:48,000 --> 00:01:48,880
so

45
00:01:48,880 --> 00:01:52,159
fido can work as a 2fa but also as a

46
00:01:52,159 --> 00:01:54,320
passwordless flow but today we are going

47
00:01:54,320 --> 00:01:57,280
to talk about the 2fa flow

48
00:01:57,280 --> 00:01:59,119
some advantages of the fido it is

49
00:01:59,119 --> 00:02:00,640
phishing resistant

50
00:02:00,640 --> 00:02:02,719
and it provides

51
00:02:02,719 --> 00:02:05,280
device attestation and also provides the

52
00:02:05,280 --> 00:02:08,479
user presence and verification checks so

53
00:02:08,479 --> 00:02:11,520
before the signing the challenge user

54
00:02:11,520 --> 00:02:13,440
user needs to provide

55
00:02:13,440 --> 00:02:15,520
user presence proof which is basically

56
00:02:15,520 --> 00:02:17,599
pressing the button or verification

57
00:02:17,599 --> 00:02:19,760
which for example can be fingerprint

58
00:02:19,760 --> 00:02:20,640
scan

59
00:02:20,640 --> 00:02:22,560
and in our case the most important part

60
00:02:22,560 --> 00:02:25,440
is privacy preserve preserving features

61
00:02:25,440 --> 00:02:28,319
that i'm going to talk uh about later

62
00:02:28,319 --> 00:02:30,239
i want to also mention the certification

63
00:02:30,239 --> 00:02:31,519
so there is a

64
00:02:31,519 --> 00:02:34,480
fidelity certification the some tokens

65
00:02:34,480 --> 00:02:37,840
like ubico are are

66
00:02:37,840 --> 00:02:41,440
certified with fips specification and

67
00:02:41,440 --> 00:02:44,000
fido tokens can be

68
00:02:44,000 --> 00:02:46,239
at level three

69
00:02:46,239 --> 00:02:48,239
assurance level three

70
00:02:48,239 --> 00:02:51,120
from this specification and in terms of

71
00:02:51,120 --> 00:02:53,680
support we have the support of all the

72
00:02:53,680 --> 00:02:54,640
major

73
00:02:54,640 --> 00:02:57,920
uh operating systems and browsers

74
00:02:57,920 --> 00:03:00,720
so quickly about this certification

75
00:03:00,720 --> 00:03:01,840
so

76
00:03:01,840 --> 00:03:03,599
find the alliance

77
00:03:03,599 --> 00:03:05,599
provide voluntary

78
00:03:05,599 --> 00:03:08,400
certification three levels

79
00:03:08,400 --> 00:03:10,640
however what is important on level three

80
00:03:10,640 --> 00:03:12,080
provides the

81
00:03:12,080 --> 00:03:15,200
tests and and penetration testing of the

82
00:03:15,200 --> 00:03:16,560
tokens

83
00:03:16,560 --> 00:03:19,840
so unfortunately the level three is not

84
00:03:19,840 --> 00:03:21,680
used yet

85
00:03:21,680 --> 00:03:24,159
so all the tokens that are on the market

86
00:03:24,159 --> 00:03:26,640
are either level one majority of them

87
00:03:26,640 --> 00:03:28,640
or level two so

88
00:03:28,640 --> 00:03:30,879
basically they are not checked

89
00:03:30,879 --> 00:03:34,239
against side channel vulnerabilities

90
00:03:34,239 --> 00:03:35,280
and

91
00:03:35,280 --> 00:03:38,560
so about the privacy of the fido

92
00:03:38,560 --> 00:03:40,720
on the right side you have like uh

93
00:03:40,720 --> 00:03:43,680
example of um

94
00:03:43,680 --> 00:03:45,680
of our registered

95
00:03:45,680 --> 00:03:47,760
authenticator so let's say that john is

96
00:03:47,760 --> 00:03:50,640
registered in service a and service b

97
00:03:50,640 --> 00:03:54,400
and service i generate the the token for

98
00:03:54,400 --> 00:03:56,480
for servicer generates

99
00:03:56,480 --> 00:03:59,360
one set of keys so these purple ones and

100
00:03:59,360 --> 00:04:00,799
for the service b

101
00:04:00,799 --> 00:04:03,519
second set of the keys is generated

102
00:04:03,519 --> 00:04:06,319
and each authentication is random has

103
00:04:06,319 --> 00:04:07,840
random challenge

104
00:04:07,840 --> 00:04:10,080
and there is also something called key

105
00:04:10,080 --> 00:04:12,080
handles which identifies the key but

106
00:04:12,080 --> 00:04:14,400
again this is this is random and should

107
00:04:14,400 --> 00:04:16,639
not be possible to link

108
00:04:16,639 --> 00:04:20,000
and the linking question here is that if

109
00:04:20,000 --> 00:04:22,400
if purple and green belongs to the same

110
00:04:22,400 --> 00:04:26,479
person and the consequences of breaking

111
00:04:26,479 --> 00:04:28,800
obviously can be just targeted

112
00:04:28,800 --> 00:04:31,040
recommendations or advertising however

113
00:04:31,040 --> 00:04:32,880
it can be also more serious like

114
00:04:32,880 --> 00:04:35,360
malicious actors criminals or state

115
00:04:35,360 --> 00:04:37,919
actors can target individuals and to

116
00:04:37,919 --> 00:04:39,199
support this

117
00:04:39,199 --> 00:04:41,360
uh i'm giving you two

118
00:04:41,360 --> 00:04:43,759
two examples first one is that the fido

119
00:04:43,759 --> 00:04:46,080
was used to

120
00:04:46,080 --> 00:04:48,800
to empower at risk video individuals

121
00:04:48,800 --> 00:04:51,440
like journalists 2021

122
00:04:51,440 --> 00:04:54,720
and big companies microsoft ubico google

123
00:04:54,720 --> 00:04:57,360
deployed 35 000 keys

124
00:04:57,360 --> 00:04:59,680
and also the recent

125
00:04:59,680 --> 00:05:02,400
risk in recent conflict in ukraine the

126
00:05:02,400 --> 00:05:03,520
fighter was

127
00:05:03,520 --> 00:05:06,560
was used to secure their cyberspace

128
00:05:06,560 --> 00:05:08,240
um

129
00:05:08,240 --> 00:05:10,800
regarding the uh the key handles because

130
00:05:10,800 --> 00:05:13,600
we use them to to execute our attack

131
00:05:13,600 --> 00:05:15,600
these are these randomized identifiers

132
00:05:15,600 --> 00:05:17,199
of the keys they are generated during

133
00:05:17,199 --> 00:05:18,720
the registration

134
00:05:18,720 --> 00:05:21,520
uh together with the public key

135
00:05:21,520 --> 00:05:22,840
and

136
00:05:22,840 --> 00:05:25,759
sometimes uh authenticators use them to

137
00:05:25,759 --> 00:05:27,840
implement non-resident keys non-resident

138
00:05:27,840 --> 00:05:29,680
keys means that the

139
00:05:29,680 --> 00:05:32,880
private key doesn't isn't saved on on

140
00:05:32,880 --> 00:05:35,840
the authenticator but it is sent to the

141
00:05:35,840 --> 00:05:40,180
uh relying part and then it is somehow

142
00:05:40,180 --> 00:05:41,919
[Music]

143
00:05:41,919 --> 00:05:43,360
somehow

144
00:05:43,360 --> 00:05:45,360
generated on the fly during the

145
00:05:45,360 --> 00:05:46,720
authentication

146
00:05:46,720 --> 00:05:48,800
and it is done because authenticators

147
00:05:48,800 --> 00:05:50,840
have the limited

148
00:05:50,840 --> 00:05:54,400
space and this uh these mechanisms can

149
00:05:54,400 --> 00:05:57,199
be implemented by simple key wrapping

150
00:05:57,199 --> 00:05:58,880
which means encryption

151
00:05:58,880 --> 00:06:01,280
uh it can be the key derivation function

152
00:06:01,280 --> 00:06:04,160
so key handle is just the input

153
00:06:04,160 --> 00:06:06,400
and it can be simple the simple

154
00:06:06,400 --> 00:06:07,520
reference

155
00:06:07,520 --> 00:06:09,840
and second feature that we use is silent

156
00:06:09,840 --> 00:06:12,319
authentication so on the low level of

157
00:06:12,319 --> 00:06:14,160
the fido protocol we have the setup

158
00:06:14,160 --> 00:06:16,639
which is like a binary protocol to talk

159
00:06:16,639 --> 00:06:18,400
to the authenticator and it allows

160
00:06:18,400 --> 00:06:21,280
silent authentication which means that

161
00:06:21,280 --> 00:06:23,440
user presence is not required so user

162
00:06:23,440 --> 00:06:25,360
doesn't know that authentication happens

163
00:06:25,360 --> 00:06:28,800
happened and this is used by clients to

164
00:06:28,800 --> 00:06:30,960
to enumerate which

165
00:06:30,960 --> 00:06:32,319
which key

166
00:06:32,319 --> 00:06:35,360
which key to use and usually it is not

167
00:06:35,360 --> 00:06:37,039
limited only windows

168
00:06:37,039 --> 00:06:39,520
we found it on lumitos implemented the

169
00:06:39,520 --> 00:06:42,160
limitations on the number of of silent

170
00:06:42,160 --> 00:06:45,759
authentications and here going to our

171
00:06:45,759 --> 00:06:47,280
attack so this is high level of the

172
00:06:47,280 --> 00:06:49,360
attack so let's say that attacker for

173
00:06:49,360 --> 00:06:52,639
example manages fido server has a key

174
00:06:52,639 --> 00:06:54,800
key handle b and key handle a

175
00:06:54,800 --> 00:06:57,039
and it knows about the key handle a but

176
00:06:57,039 --> 00:06:58,319
it doesn't know

177
00:06:58,319 --> 00:06:59,280
about

178
00:06:59,280 --> 00:07:02,080
who who is the owner of the key handle b

179
00:07:02,080 --> 00:07:05,120
so it sends the specially crafted

180
00:07:05,120 --> 00:07:07,759
list it is called allow credential list

181
00:07:07,759 --> 00:07:09,479
and inside this list we have the

182
00:07:09,479 --> 00:07:11,680
multiplication of the

183
00:07:11,680 --> 00:07:14,800
key handle b and what happens in the

184
00:07:14,800 --> 00:07:16,880
client is that

185
00:07:16,880 --> 00:07:17,759
that

186
00:07:17,759 --> 00:07:20,800
silent authentications are executed on

187
00:07:20,800 --> 00:07:23,440
everyone every single one

188
00:07:23,440 --> 00:07:25,520
key in the list and what we want to

189
00:07:25,520 --> 00:07:27,919
achieve here is that

190
00:07:27,919 --> 00:07:30,639
we want to check if the processing time

191
00:07:30,639 --> 00:07:33,680
of the key handle b is different

192
00:07:33,680 --> 00:07:36,720
from the random key handle

193
00:07:36,720 --> 00:07:39,280
and we

194
00:07:39,280 --> 00:07:40,240
we

195
00:07:40,240 --> 00:07:42,479
suspect that if if this key belongs to

196
00:07:42,479 --> 00:07:45,199
this token it might be different time

197
00:07:45,199 --> 00:07:48,319
and actually we identified not only that

198
00:07:48,319 --> 00:07:51,120
malicious fido server can be can be our

199
00:07:51,120 --> 00:07:53,039
adversary but also

200
00:07:53,039 --> 00:07:55,759
other identity provider fido to as a

201
00:07:55,759 --> 00:07:58,240
service provider it can be something in

202
00:07:58,240 --> 00:08:00,639
between like proxy services or or

203
00:08:00,639 --> 00:08:02,560
something that injects the malicious

204
00:08:02,560 --> 00:08:04,879
code

205
00:08:05,599 --> 00:08:07,360
regarding our experiments so we took

206
00:08:07,360 --> 00:08:09,599
eight eight roaming

207
00:08:09,599 --> 00:08:11,680
hardware authenticators

208
00:08:11,680 --> 00:08:13,599
you can see seven of them on the picture

209
00:08:13,599 --> 00:08:16,080
only the google titan is missing

210
00:08:16,080 --> 00:08:18,720
uh we executed silent authenticated to

211
00:08:18,720 --> 00:08:19,520
our

212
00:08:19,520 --> 00:08:21,840
silent authentication and measurements

213
00:08:21,840 --> 00:08:23,599
we checked six browsers on five

214
00:08:23,599 --> 00:08:25,680
platforms we we did

215
00:08:25,680 --> 00:08:29,599
the inspection of usb packets

216
00:08:29,599 --> 00:08:31,759
we did a simple study to check the user

217
00:08:31,759 --> 00:08:33,919
presence timing and

218
00:08:33,919 --> 00:08:35,919
we did also

219
00:08:35,919 --> 00:08:37,599
describe the audio variation of the

220
00:08:37,599 --> 00:08:40,479
attack and we did the fido in the while

221
00:08:40,479 --> 00:08:43,440
crawling and the results are that two of

222
00:08:43,440 --> 00:08:45,519
those tokens were vulnerable silent

223
00:08:45,519 --> 00:08:47,839
authentications are used in the browsers

224
00:08:47,839 --> 00:08:50,800
uh user presence delay is quite easy to

225
00:08:50,800 --> 00:08:52,959
mitigate and the crawling showed that

226
00:08:52,959 --> 00:08:55,200
2fa is the most popular way of

227
00:08:55,200 --> 00:08:56,720
deployment

228
00:08:56,720 --> 00:08:58,480
and these are the results on the left

229
00:08:58,480 --> 00:09:01,200
you can see hyperfider and and faithian

230
00:09:01,200 --> 00:09:03,200
so these are results from the silent

231
00:09:03,200 --> 00:09:05,200
authentications you can see that for

232
00:09:05,200 --> 00:09:08,080
hyperfire the difference is uh 10

233
00:09:08,080 --> 00:09:11,600
milliseconds for one uh

234
00:09:11,600 --> 00:09:12,399
one

235
00:09:12,399 --> 00:09:15,040
silent authentication and for failing is

236
00:09:15,040 --> 00:09:16,880
two milliseconds and on the right you

237
00:09:16,880 --> 00:09:19,600
can see the diagram that shows how many

238
00:09:19,600 --> 00:09:21,680
uh handles you need to send in the allow

239
00:09:21,680 --> 00:09:24,160
credential list to minimize the error

240
00:09:24,160 --> 00:09:26,959
rate and we also applied this delay from

241
00:09:26,959 --> 00:09:30,479
the user presence study

242
00:09:31,360 --> 00:09:35,200
and now in in terms of the mitigation so

243
00:09:35,200 --> 00:09:37,279
obviously it should be

244
00:09:37,279 --> 00:09:39,440
fixed on the authenticator side however

245
00:09:39,440 --> 00:09:42,560
the problem is that they do not allow

246
00:09:42,560 --> 00:09:45,040
a firmware update

247
00:09:45,040 --> 00:09:47,440
so only new authenticators can implement

248
00:09:47,440 --> 00:09:49,680
for example constant time execution or

249
00:09:49,680 --> 00:09:52,959
changing the the function of

250
00:09:52,959 --> 00:09:54,000
of

251
00:09:54,000 --> 00:09:55,680
getting the

252
00:09:55,680 --> 00:09:59,279
the keys and second option is on the

253
00:09:59,279 --> 00:10:01,120
existing deployments

254
00:10:01,120 --> 00:10:04,240
it can be changed to the resident keys

255
00:10:04,240 --> 00:10:05,519
however

256
00:10:05,519 --> 00:10:08,160
this is problematic because users need

257
00:10:08,160 --> 00:10:09,440
to

258
00:10:09,440 --> 00:10:10,720
re-register

259
00:10:10,720 --> 00:10:13,600
and the easiest option is to to

260
00:10:13,600 --> 00:10:16,079
implement mitigations on the client side

261
00:10:16,079 --> 00:10:17,760
switch which are basically the

262
00:10:17,760 --> 00:10:19,680
limitations of the allow credentialists

263
00:10:19,680 --> 00:10:22,160
so something like the duplication or

264
00:10:22,160 --> 00:10:24,800
limiting the size or

265
00:10:24,800 --> 00:10:26,160
basically delaying the silent

266
00:10:26,160 --> 00:10:27,440
authentication

267
00:10:27,440 --> 00:10:30,000
uh would solve this issue

268
00:10:30,000 --> 00:10:32,800
we notified the vendors from google

269
00:10:32,800 --> 00:10:34,480
chrome team we

270
00:10:34,480 --> 00:10:36,959
received a cv and

271
00:10:36,959 --> 00:10:39,600
and they fixed this issue the same

272
00:10:39,600 --> 00:10:41,120
happened for

273
00:10:41,120 --> 00:10:42,959
firefox

274
00:10:42,959 --> 00:10:46,320
we notified safari however we we didn't

275
00:10:46,320 --> 00:10:48,640
receive the the response the hyper

276
00:10:48,640 --> 00:10:50,720
fighters sent us

277
00:10:50,720 --> 00:10:53,040
new new tokens to test and we are

278
00:10:53,040 --> 00:10:55,600
testing them and faith and we we haven't

279
00:10:55,600 --> 00:10:58,320
received anything

280
00:10:58,320 --> 00:11:00,160
so to sum up the commercial

281
00:11:00,160 --> 00:11:01,920
authenticators are not checked against

282
00:11:01,920 --> 00:11:03,240
side channel

283
00:11:03,240 --> 00:11:05,839
vulnerabilities unless the vendors do do

284
00:11:05,839 --> 00:11:08,320
the checks themselves and

285
00:11:08,320 --> 00:11:09,040
the

286
00:11:09,040 --> 00:11:11,600
certification from fighter alliance only

287
00:11:11,600 --> 00:11:14,240
on level three checks the and the

288
00:11:14,240 --> 00:11:17,200
penetration testing of of tokens however

289
00:11:17,200 --> 00:11:19,519
as you could see there is no tokens on

290
00:11:19,519 --> 00:11:20,959
level three

291
00:11:20,959 --> 00:11:23,279
and the vulnerabilities that we found

292
00:11:23,279 --> 00:11:25,440
and and features that we found silent

293
00:11:25,440 --> 00:11:27,600
authentication which is dangerous setup

294
00:11:27,600 --> 00:11:28,640
flow

295
00:11:28,640 --> 00:11:31,279
allow credentials that was not

296
00:11:31,279 --> 00:11:32,560
not limited

297
00:11:32,560 --> 00:11:34,640
and obviously the time differences in

298
00:11:34,640 --> 00:11:37,839
processing of the vulnerable tokens and

299
00:11:37,839 --> 00:11:39,680
everything together

300
00:11:39,680 --> 00:11:40,959
gave us a

301
00:11:40,959 --> 00:11:44,160
nice remote vector of attack to

302
00:11:44,160 --> 00:11:47,440
to link the uh out and link the accounts

303
00:11:47,440 --> 00:11:49,600
of the users

304
00:11:49,600 --> 00:11:51,519
thank you and

305
00:11:51,519 --> 00:11:55,240
i can take some questions

