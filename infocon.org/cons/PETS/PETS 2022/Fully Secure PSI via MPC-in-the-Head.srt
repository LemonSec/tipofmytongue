1
00:00:02,720 --> 00:00:04,880
hello my name is free home today i will

2
00:00:04,880 --> 00:00:07,120
present our work named fully secure psi

3
00:00:07,120 --> 00:00:09,440
by mpc in the head this is the drug work

4
00:00:09,440 --> 00:00:11,599
with my advisor doug gordon and dr kamit

5
00:00:11,599 --> 00:00:14,599
jose

6
00:00:17,600 --> 00:00:19,520
first i'd like to introduce the privacy

7
00:00:19,520 --> 00:00:22,400
and section problem briefly the psi id

8
00:00:22,400 --> 00:00:24,480
functionality takes input from alice and

9
00:00:24,480 --> 00:00:27,199
bob it has a setup size w the

10
00:00:27,199 --> 00:00:28,800
functionality then computes the

11
00:00:28,800 --> 00:00:30,880
perception between the two input sets

12
00:00:30,880 --> 00:00:33,280
and gives the output to alison bob

13
00:00:33,280 --> 00:00:35,360
in practice the ideal functionality can

14
00:00:35,360 --> 00:00:37,440
be relaxed to allow some slackness where

15
00:00:37,440 --> 00:00:39,120
an adversary may be able to use an

16
00:00:39,120 --> 00:00:41,280
effective input set of size w prime

17
00:00:41,280 --> 00:00:45,559
greater than the rear point w

18
00:00:46,640 --> 00:00:49,280
psi has many real applications for

19
00:00:49,280 --> 00:00:50,640
example

20
00:00:50,640 --> 00:00:52,480
it is used to compute private contact

21
00:00:52,480 --> 00:00:54,320
discovery or when two companies want to

22
00:00:54,320 --> 00:00:56,800
identify a list of overlapping customers

23
00:00:56,800 --> 00:00:58,559
or when two states want to find the

24
00:00:58,559 --> 00:01:00,879
common names in their blacklist it is

25
00:01:00,879 --> 00:01:02,879
desirable that the psi protocol is

26
00:01:02,879 --> 00:01:05,438
secure and in many cases all parties

27
00:01:05,438 --> 00:01:08,880
will receive correct output

28
00:01:09,040 --> 00:01:11,360
psi is an important problem and is

29
00:01:11,360 --> 00:01:12,799
studying extensively among the

30
00:01:12,799 --> 00:01:14,880
cryptography community

31
00:01:14,880 --> 00:01:16,880
theoretically this is an interesting and

32
00:01:16,880 --> 00:01:19,040
challenging mathematical problem

33
00:01:19,040 --> 00:01:21,840
practically psi is used as a subroutine

34
00:01:21,840 --> 00:01:23,119
in many important real-world

35
00:01:23,119 --> 00:01:24,799
applications

36
00:01:24,799 --> 00:01:27,520
there is a long lab work in terms of psi

37
00:01:27,520 --> 00:01:31,040
both in two body and multiparty setting

38
00:01:31,040 --> 00:01:33,360
however all existing will focus on the

39
00:01:33,360 --> 00:01:35,200
case where only one party will receive

40
00:01:35,200 --> 00:01:37,680
the output of course the party receiving

41
00:01:37,680 --> 00:01:40,079
the output can relay it to other bodies

42
00:01:40,079 --> 00:01:42,240
however doing so implying the use of

43
00:01:42,240 --> 00:01:44,240
expensive unitless proofs and the

44
00:01:44,240 --> 00:01:46,640
protocol will be impractical

45
00:01:46,640 --> 00:01:48,640
and one more point most of the current

46
00:01:48,640 --> 00:01:51,200
two-party psi particles and multi-party

47
00:01:51,200 --> 00:01:53,200
psi particles are developed using

48
00:01:53,200 --> 00:01:55,600
different techniques and the two psi

49
00:01:55,600 --> 00:01:57,119
solutions do not extend to the

50
00:01:57,119 --> 00:02:00,159
multi-party setting

51
00:02:00,719 --> 00:02:03,119
recognizing the shortcoming in the psi

52
00:02:03,119 --> 00:02:05,680
literature our work aims at designing

53
00:02:05,680 --> 00:02:08,080
new fully secure psi particles in both

54
00:02:08,080 --> 00:02:10,479
two body and multibody settings our

55
00:02:10,479 --> 00:02:12,400
protocols are secure against malicious

56
00:02:12,400 --> 00:02:14,080
adversaries and provide the correct

57
00:02:14,080 --> 00:02:16,000
output to all parties if they ever

58
00:02:16,000 --> 00:02:17,680
receive any output

59
00:02:17,680 --> 00:02:20,080
a multi-party psi particle is built on

60
00:02:20,080 --> 00:02:22,080
top of the two-piece two-party psi

61
00:02:22,080 --> 00:02:23,280
protocol

62
00:02:23,280 --> 00:02:25,360
power particles are constructed based on

63
00:02:25,360 --> 00:02:27,760
the ips compiler and use leviosa as the

64
00:02:27,760 --> 00:02:30,239
blueprint one interesting voice about

65
00:02:30,239 --> 00:02:31,519
alpha cores

66
00:02:31,519 --> 00:02:33,440
is that arrows only need black box

67
00:02:33,440 --> 00:02:36,319
access to possibly cqle

68
00:02:36,319 --> 00:02:40,160
but achieving malicious security

69
00:02:40,400 --> 00:02:42,480
besides the new psi constructions we

70
00:02:42,480 --> 00:02:44,239
also improved the ips compiler in

71
00:02:44,239 --> 00:02:46,800
multibody setting

72
00:02:46,800 --> 00:02:48,560
before introducing our protocols i'd

73
00:02:48,560 --> 00:02:50,000
like to go through the background work

74
00:02:50,000 --> 00:02:51,840
that our constructions are based on

75
00:02:51,840 --> 00:02:53,840
which is the construction presented by

76
00:02:53,840 --> 00:02:55,840
prison and song at a high level

77
00:02:55,840 --> 00:02:57,680
residence hall and kill the input set

78
00:02:57,680 --> 00:02:59,280
with the polynomial

79
00:02:59,280 --> 00:03:01,280
resonance prove that if the product is

80
00:03:01,280 --> 00:03:04,800
compute t equal to q 1 r plus q2s where

81
00:03:04,800 --> 00:03:07,599
rns are random polynomials then t can be

82
00:03:07,599 --> 00:03:09,920
written as t equal to v w

83
00:03:09,920 --> 00:03:11,680
where v x encodes item in the

84
00:03:11,680 --> 00:03:14,400
intersection and w has uniformly random

85
00:03:14,400 --> 00:03:16,080
distribution

86
00:03:16,080 --> 00:03:18,480
as a result t preserves the intersection

87
00:03:18,480 --> 00:03:20,560
without leaking anything else to make

88
00:03:20,560 --> 00:03:22,560
sure that r and s are chosen uniformly

89
00:03:22,560 --> 00:03:25,040
at random each part resembles a random

90
00:03:25,040 --> 00:03:27,760
share of the polynomials

91
00:03:27,760 --> 00:03:29,519
as we can see here all the blue

92
00:03:29,519 --> 00:03:31,920
polynomials are held by p1 by all the

93
00:03:31,920 --> 00:03:34,560
red ones or by p2

94
00:03:34,560 --> 00:03:37,200
after computing t each party evaluates t

95
00:03:37,200 --> 00:03:38,959
on their input set and outputs the

96
00:03:38,959 --> 00:03:41,360
intersection

97
00:03:41,360 --> 00:03:43,680
with christening sound design in mind gn

98
00:03:43,680 --> 00:03:46,159
19 proposed an effective way to compute

99
00:03:46,159 --> 00:03:47,280
tx

100
00:03:47,280 --> 00:03:50,080
gn19 reduced the computation of tx to

101
00:03:50,080 --> 00:03:52,319
two up reverse polynomial evaluation

102
00:03:52,319 --> 00:03:53,280
instance

103
00:03:53,280 --> 00:03:55,680
before going into the details of gn19

104
00:03:55,680 --> 00:03:57,680
protocol i'd like to note that the blue

105
00:03:57,680 --> 00:04:00,560
polynomials are entirely known by p1

106
00:04:00,560 --> 00:04:03,360
when the red one are known by p2

107
00:04:03,360 --> 00:04:05,280
now with the first ope

108
00:04:05,280 --> 00:04:08,400
p1 provides s1 where p2 provides q2 and

109
00:04:08,400 --> 00:04:10,799
u2 when u2 is uniformly random

110
00:04:10,799 --> 00:04:12,159
polynomial

111
00:04:12,159 --> 00:04:18,000
p1 will obtain t1 equal to q2 s1 plus u2

112
00:04:18,000 --> 00:04:19,918
with the second ope

113
00:04:19,918 --> 00:04:24,720
p2 obtains t2 equal to q1 r2 plus u1

114
00:04:24,720 --> 00:04:27,600
after obtaining t1 and t2 respectively

115
00:04:27,600 --> 00:04:29,360
the parties use their local data to

116
00:04:29,360 --> 00:04:32,479
compute t1 hat and t2 hat

117
00:04:32,479 --> 00:04:34,720
we can see that p1 only adds the blue

118
00:04:34,720 --> 00:04:37,040
polynomial polynomials to the equation

119
00:04:37,040 --> 00:04:40,240
which is q1 r1 minus u1

120
00:04:40,240 --> 00:04:42,960
by p2 only has the red ones which is q2

121
00:04:42,960 --> 00:04:44,720
s2 minus u2

122
00:04:44,720 --> 00:04:47,919
when adding t1 hat and t2 hat tx is

123
00:04:47,919 --> 00:04:50,560
recovered

124
00:04:51,280 --> 00:04:53,360
gn19 major contribution is to have a

125
00:04:53,360 --> 00:04:56,400
very efficient instantiation of ope

126
00:04:56,400 --> 00:04:58,400
by the ole

127
00:04:58,400 --> 00:05:00,800
consider the ope computation where p1

128
00:05:00,800 --> 00:05:03,600
provides y p2 provides a and b

129
00:05:03,600 --> 00:05:07,360
but p1 will obtain c equal to a plus b y

130
00:05:07,360 --> 00:05:09,759
first both parties will agree on a set

131
00:05:09,759 --> 00:05:13,039
of two w plus one random points e i

132
00:05:13,039 --> 00:05:16,160
where w is degree of b and y and a has

133
00:05:16,160 --> 00:05:18,800
the has a degree of two w

134
00:05:18,800 --> 00:05:22,400
that y i a i b i is the evaluation of y

135
00:05:22,400 --> 00:05:24,639
a and b at the point e i

136
00:05:24,639 --> 00:05:26,800
then the two parties make an oav call on

137
00:05:26,800 --> 00:05:29,919
the inputs y i a i b i where p one

138
00:05:29,919 --> 00:05:32,639
obtains c i equal to a i plus b i

139
00:05:32,639 --> 00:05:34,479
multiply y i

140
00:05:34,479 --> 00:05:37,759
after two w plus one clause to the o ole

141
00:05:37,759 --> 00:05:40,400
p1 can recover cx by interpolating the

142
00:05:40,400 --> 00:05:43,600
polynomial of degree 2 w over the poise

143
00:05:43,600 --> 00:05:46,880
e i and ci

144
00:05:46,880 --> 00:05:49,120
with this approach gn19 came up with a

145
00:05:49,120 --> 00:05:51,120
linear communication psi particle in

146
00:05:51,120 --> 00:05:52,880
seminars settings

147
00:05:52,880 --> 00:05:55,039
and a way to extend their protocol to

148
00:05:55,039 --> 00:05:57,840
multi-party settings gn19 attempt to

149
00:05:57,840 --> 00:05:59,440
make their protocols secure against

150
00:05:59,440 --> 00:06:01,680
malicious adversaries however were not

151
00:06:01,680 --> 00:06:03,440
successful

152
00:06:03,440 --> 00:06:04,880
and the question whether there is an

153
00:06:04,880 --> 00:06:06,800
efficient way to make gn18 malicious

154
00:06:06,800 --> 00:06:08,080
secure

155
00:06:08,080 --> 00:06:10,880
or still open

156
00:06:10,880 --> 00:06:13,120
in this work we give a yes answer to the

157
00:06:13,120 --> 00:06:15,199
previous question by providing new fully

158
00:06:15,199 --> 00:06:17,600
secure psi particles

159
00:06:17,600 --> 00:06:19,600
our protocols are secure again malicious

160
00:06:19,600 --> 00:06:21,840
adversaries and provide output to all

161
00:06:21,840 --> 00:06:25,360
parties our protocol store with vm19 and

162
00:06:25,360 --> 00:06:27,120
you know in order to achieve fully

163
00:06:27,120 --> 00:06:29,919
secure psi protocols we use the ips

164
00:06:29,919 --> 00:06:31,759
compiler

165
00:06:31,759 --> 00:06:34,160
our two-party broadca use leviosa as the

166
00:06:34,160 --> 00:06:36,720
blueprint and it is extensible to

167
00:06:36,720 --> 00:06:39,199
multi-party settings

168
00:06:39,199 --> 00:06:40,960
interestingly in

169
00:06:40,960 --> 00:06:42,880
we achieve fully secure properties

170
00:06:42,880 --> 00:06:45,039
almost for free but after that of course

171
00:06:45,039 --> 00:06:46,479
are just a little bit more expensive

172
00:06:46,479 --> 00:06:47,919
than the semi-honors product was

173
00:06:47,919 --> 00:06:51,280
proposed by j19

174
00:06:51,759 --> 00:06:53,280
now i'd like to give a short overview

175
00:06:53,280 --> 00:06:55,280
about the ips compiler to give an

176
00:06:55,280 --> 00:06:57,599
intuition why the ips compiler can help

177
00:06:57,599 --> 00:07:00,000
providing apple to all parties

178
00:07:00,000 --> 00:07:01,759
assume ant parties want to compute a

179
00:07:01,759 --> 00:07:04,720
function f on the input x1 to xm

180
00:07:04,720 --> 00:07:06,720
with the ips compiler they will first

181
00:07:06,720 --> 00:07:08,720
simply share the input and send the

182
00:07:08,720 --> 00:07:11,039
shares to end imaginary servers and run

183
00:07:11,039 --> 00:07:12,800
an npc in the hack protocol that

184
00:07:12,800 --> 00:07:14,080
computes f

185
00:07:14,080 --> 00:07:16,080
the ips compiler achieves security

186
00:07:16,080 --> 00:07:18,319
against malicious adversaries by the use

187
00:07:18,319 --> 00:07:20,319
of watch list mechanism

188
00:07:20,319 --> 00:07:22,479
from the start of the execution each

189
00:07:22,479 --> 00:07:24,319
party can select two random servers to

190
00:07:24,319 --> 00:07:26,960
watch for the chosen servers the party

191
00:07:26,960 --> 00:07:29,120
will have all the shares and readiness

192
00:07:29,120 --> 00:07:30,960
and can verify the computation from the

193
00:07:30,960 --> 00:07:32,880
beginning to the end including the

194
00:07:32,880 --> 00:07:33,919
output

195
00:07:33,919 --> 00:07:36,479
so if the function f provides output to

196
00:07:36,479 --> 00:07:38,800
all parties each one can use its watch

197
00:07:38,800 --> 00:07:40,639
list to verify the correctness of the

198
00:07:40,639 --> 00:07:43,039
output

199
00:07:43,199 --> 00:07:44,960
optimizing the ips compiler for the

200
00:07:44,960 --> 00:07:46,800
privacy and the section problem we

201
00:07:46,800 --> 00:07:48,639
construct very efficient two-body and

202
00:07:48,639 --> 00:07:50,879
multi-party psi particles

203
00:07:50,879 --> 00:07:52,720
our protocols are the first ones that

204
00:07:52,720 --> 00:07:55,199
provide output to all parties so we can

205
00:07:55,199 --> 00:07:57,120
only compare it with existing one-side

206
00:07:57,120 --> 00:07:59,120
output psi protocols

207
00:07:59,120 --> 00:08:01,120
in terms of communication cost output

208
00:08:01,120 --> 00:08:03,120
goal has better communication complexity

209
00:08:03,120 --> 00:08:05,280
compared to other particles our

210
00:08:05,280 --> 00:08:07,520
communication class is dominated by

211
00:08:07,520 --> 00:08:09,840
mw kappa where m is the number of

212
00:08:09,840 --> 00:08:13,039
parties w is the input size and kappa is

213
00:08:13,039 --> 00:08:15,360
a security parameter we will show later

214
00:08:15,360 --> 00:08:18,240
that t is very small compared to w in

215
00:08:18,240 --> 00:08:21,720
our total cost

216
00:08:26,240 --> 00:08:27,840
now i'd like to go into the technical

217
00:08:27,840 --> 00:08:30,560
details of our protocols first let's

218
00:08:30,560 --> 00:08:32,479
start with the two-party protocol we

219
00:08:32,479 --> 00:08:34,559
follow the russia and ips compiler

220
00:08:34,559 --> 00:08:36,799
closely in our construction

221
00:08:36,799 --> 00:08:38,479
at the beginning the parties have the

222
00:08:38,479 --> 00:08:40,799
polynomials q1 and q2 that encode the

223
00:08:40,799 --> 00:08:44,080
input set as the input set size

224
00:08:44,080 --> 00:08:45,680
siw

225
00:08:45,680 --> 00:08:49,200
q1 and q2 have degree of w

226
00:08:49,200 --> 00:08:51,360
the first step is to pack q1 and q2 with

227
00:08:51,360 --> 00:08:54,320
random polynomials t1 and t2 it has

228
00:08:54,320 --> 00:08:56,959
degree t plus e where t and e are the

229
00:08:56,959 --> 00:08:59,360
current two's parameters such that one

230
00:08:59,360 --> 00:09:02,320
minus t over n to the power e equal to

231
00:09:02,320 --> 00:09:04,880
two to minus lambda where lambda is the

232
00:09:04,880 --> 00:09:06,720
security parameter

233
00:09:06,720 --> 00:09:08,800
next supporters will secretly share q1

234
00:09:08,800 --> 00:09:13,120
tier q22 r1 r2 s1 s2 to the imaginary

235
00:09:13,120 --> 00:09:15,600
servers and each selects t random

236
00:09:15,600 --> 00:09:17,760
servers to watch the shares are the

237
00:09:17,760 --> 00:09:20,080
evaluation of these polynomials on

238
00:09:20,080 --> 00:09:23,839
endpoints ei or the resellerman code

239
00:09:23,839 --> 00:09:26,080
of the input polynomials

240
00:09:26,080 --> 00:09:28,160
at each server the parties compute the

241
00:09:28,160 --> 00:09:29,600
shared ti

242
00:09:29,600 --> 00:09:32,000
of the output polynomial tx the

243
00:09:32,000 --> 00:09:33,920
correctness of t is guaranteed by the

244
00:09:33,920 --> 00:09:37,160
word list

245
00:09:38,399 --> 00:09:39,839
i've just gone through the high-level

246
00:09:39,839 --> 00:09:42,560
description of two-part epsi protocol

247
00:09:42,560 --> 00:09:44,480
now i'd like to talk about how we set up

248
00:09:44,480 --> 00:09:46,320
the watch list for our mpc in the hack

249
00:09:46,320 --> 00:09:47,519
in detail

250
00:09:47,519 --> 00:09:50,959
the ips compiler and leviosa use tfnot

251
00:09:50,959 --> 00:09:53,040
to set up the watchlist doing so we

252
00:09:53,040 --> 00:09:54,000
incur

253
00:09:54,000 --> 00:09:56,240
the communication cards at on

254
00:09:56,240 --> 00:09:58,720
we replace the ot approach with the

255
00:09:58,720 --> 00:10:00,959
commit then review paradigm

256
00:10:00,959 --> 00:10:02,800
instead of quietly watching a live

257
00:10:02,800 --> 00:10:05,279
channel the parties are asked to commit

258
00:10:05,279 --> 00:10:07,279
to their shares using the mercury before

259
00:10:07,279 --> 00:10:09,440
the competition and only when they

260
00:10:09,440 --> 00:10:11,360
perform a check after the messages are

261
00:10:11,360 --> 00:10:14,240
sent do they agree on the random set of

262
00:10:14,240 --> 00:10:15,920
t channels

263
00:10:15,920 --> 00:10:18,079
the commit then review paradigm only

264
00:10:18,079 --> 00:10:19,120
needs

265
00:10:19,120 --> 00:10:22,240
ota ot lock and communication cost which

266
00:10:22,240 --> 00:10:26,079
is much better than om

267
00:10:29,600 --> 00:10:31,440
next we extend our two party psi

268
00:10:31,440 --> 00:10:34,079
protocol to the multi-party psi protocol

269
00:10:34,079 --> 00:10:36,079
our multi-party psi product will use

270
00:10:36,079 --> 00:10:39,279
star topology as in his v17

271
00:10:39,279 --> 00:10:41,040
we start with a semi-honest particle and

272
00:10:41,040 --> 00:10:43,200
make it secure against malicious

273
00:10:43,200 --> 00:10:46,000
adversary by using the ips compiler with

274
00:10:46,000 --> 00:10:48,079
a more efficient waterless setup via

275
00:10:48,079 --> 00:10:51,040
commit then reveal paradigm

276
00:10:51,040 --> 00:10:52,720
at a high level we have a designated

277
00:10:52,720 --> 00:10:55,600
center party called p0 the party p0 and

278
00:10:55,600 --> 00:10:58,000
each pi performs a modified 2psi

279
00:10:58,000 --> 00:11:01,040
particle after each execution p0 we see

280
00:11:01,040 --> 00:11:02,480
q0

281
00:11:02,480 --> 00:11:06,959
ri plus qi si plus vi where ri s i v i

282
00:11:06,959 --> 00:11:09,600
are random polynomials on top of that v

283
00:11:09,600 --> 00:11:12,560
i is chosen by all the parties such that

284
00:11:12,560 --> 00:11:14,720
the sum of ovi is zero

285
00:11:14,720 --> 00:11:16,320
after the pairwise

286
00:11:16,320 --> 00:11:18,959
two psi executions p0 obtains the

287
00:11:18,959 --> 00:11:20,640
polynomial t that encodes the

288
00:11:20,640 --> 00:11:23,200
intersection of all the input sets

289
00:11:23,200 --> 00:11:26,079
p0 will then send t to all other parties

290
00:11:26,079 --> 00:11:28,079
the correctness is then enforced by the

291
00:11:28,079 --> 00:11:30,640
watchlist

292
00:11:31,120 --> 00:11:33,600
without optimization the watchlist setup

293
00:11:33,600 --> 00:11:36,320
will be very inefficient as an ips

294
00:11:36,320 --> 00:11:38,560
compiler each party will have t shares

295
00:11:38,560 --> 00:11:41,040
learned by one of the party altogether

296
00:11:41,040 --> 00:11:43,440
minus one shares can be learned by minus

297
00:11:43,440 --> 00:11:44,959
140s

298
00:11:44,959 --> 00:11:47,120
in order to preserve privacy the input

299
00:11:47,120 --> 00:11:49,360
polynomial needs to have a degree

300
00:11:49,360 --> 00:11:53,600
of at least m minus one t plus e

301
00:11:53,600 --> 00:11:55,360
and the instantiation of the multiplied

302
00:11:55,360 --> 00:11:59,200
waters is very expensive

303
00:11:59,279 --> 00:12:01,360
on the other hand alchemist and review

304
00:12:01,360 --> 00:12:03,680
paradigm works the same way as in the

305
00:12:03,680 --> 00:12:05,839
other two party settings

306
00:12:05,839 --> 00:12:10,519
the parties first commit to the shares

307
00:12:12,800 --> 00:12:14,959
and randomness for all the servers using

308
00:12:14,959 --> 00:12:18,079
the mercury after the execution

309
00:12:18,079 --> 00:12:19,760
they will decide to get the t random

310
00:12:19,760 --> 00:12:22,079
servers to verify the computation so the

311
00:12:22,079 --> 00:12:24,160
degree of the patent polynomial is still

312
00:12:24,160 --> 00:12:26,399
t plus e and the communication cost to

313
00:12:26,399 --> 00:12:29,519
commit then review is omt log n which is

314
00:12:29,519 --> 00:12:31,760
negligible overhead

315
00:12:31,760 --> 00:12:35,000
thank you

316
00:12:39,040 --> 00:12:41,120
you

