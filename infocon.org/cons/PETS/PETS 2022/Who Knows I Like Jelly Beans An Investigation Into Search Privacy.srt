1
00:00:01,040 --> 00:00:03,520
hello my name is daniel katz and today i

2
00:00:03,520 --> 00:00:05,440
will be talking about our research into

3
00:00:05,440 --> 00:00:07,759
search term privacy this work was

4
00:00:07,759 --> 00:00:09,840
conducted by myself and my colleagues

5
00:00:09,840 --> 00:00:12,000
david and johann at norton lifelock

6
00:00:12,000 --> 00:00:14,240
research group

7
00:00:14,240 --> 00:00:15,839
i wanted to start by discussing what

8
00:00:15,839 --> 00:00:18,880
motivated this work

9
00:00:19,439 --> 00:00:21,520
users understand that google and other

10
00:00:21,520 --> 00:00:23,279
search engines collect their search

11
00:00:23,279 --> 00:00:26,160
terms and may sell them to advertisers

12
00:00:26,160 --> 00:00:28,320
however internal site search is

13
00:00:28,320 --> 00:00:29,920
different from search engines the

14
00:00:29,920 --> 00:00:31,840
results are specific to that website

15
00:00:31,840 --> 00:00:33,040
alone

16
00:00:33,040 --> 00:00:35,040
therefore users may have a different

17
00:00:35,040 --> 00:00:38,559
expectation of privacy

18
00:00:39,520 --> 00:00:41,360
it is well known in the literature that

19
00:00:41,360 --> 00:00:43,040
search terms may contain sensitive

20
00:00:43,040 --> 00:00:45,600
information for example health race and

21
00:00:45,600 --> 00:00:48,399
sexual orientation

22
00:00:48,399 --> 00:00:50,719
it's also known that advertisers collect

23
00:00:50,719 --> 00:00:52,480
sensitive information and use it to

24
00:00:52,480 --> 00:00:54,000
target ads

25
00:00:54,000 --> 00:00:56,800
for example the cambridge analytica used

26
00:00:56,800 --> 00:00:58,480
race to dissuade black voters from

27
00:00:58,480 --> 00:01:01,359
voting in the 2016 election and numerous

28
00:01:01,359 --> 00:01:04,160
other examples

29
00:01:04,400 --> 00:01:06,320
our work studies the different ways that

30
00:01:06,320 --> 00:01:08,400
websites which contain internal site

31
00:01:08,400 --> 00:01:10,479
search may leak search terms

32
00:01:10,479 --> 00:01:12,400
accidentally are on purpose to third

33
00:01:12,400 --> 00:01:14,880
parties

34
00:01:15,200 --> 00:01:17,360
in order to understand our work we must

35
00:01:17,360 --> 00:01:20,880
first talk about referrers

36
00:01:21,840 --> 00:01:24,720
a referrer is an http request header

37
00:01:24,720 --> 00:01:26,799
that it's automatically set by clients

38
00:01:26,799 --> 00:01:28,880
or browsers to indicate how the user

39
00:01:28,880 --> 00:01:31,040
found that website

40
00:01:31,040 --> 00:01:33,360
for example this screenshot shows a new

41
00:01:33,360 --> 00:01:34,799
york times article on the news

42
00:01:34,799 --> 00:01:37,119
aggregator website hacker news when the

43
00:01:37,119 --> 00:01:39,200
link is clicked a network request is

44
00:01:39,200 --> 00:01:41,600
initiated to the new york times we can

45
00:01:41,600 --> 00:01:43,520
see that hacker news is included in the

46
00:01:43,520 --> 00:01:46,320
referrer header

47
00:01:49,600 --> 00:01:51,840
the referrer policy is set by the

48
00:01:51,840 --> 00:01:53,680
website owner and specifies how the

49
00:01:53,680 --> 00:01:55,439
referrer header will be set upon

50
00:01:55,439 --> 00:01:58,320
requests originating from that website

51
00:01:58,320 --> 00:01:59,920
it can be sent a number of different

52
00:01:59,920 --> 00:02:02,320
ways for example via the http response

53
00:02:02,320 --> 00:02:04,719
header but also via meta elements and

54
00:02:04,719 --> 00:02:07,439
inline in res inside the resource

55
00:02:07,439 --> 00:02:09,520
requests

56
00:02:09,520 --> 00:02:13,280
these are this is a table that has

57
00:02:13,280 --> 00:02:15,200
a variety of acceptable values for the

58
00:02:15,200 --> 00:02:16,879
referrer policy

59
00:02:16,879 --> 00:02:18,959
however the default for many browsers

60
00:02:18,959 --> 00:02:21,200
was no referrer when downgrade

61
00:02:21,200 --> 00:02:23,360
which in that case

62
00:02:23,360 --> 00:02:26,720
sends the full referrer header value

63
00:02:26,720 --> 00:02:30,879
including any potential query strings

64
00:02:32,239 --> 00:02:36,800
if both pages are https enabled

65
00:02:36,800 --> 00:02:38,560
prior work has shown that referrer

66
00:02:38,560 --> 00:02:40,800
headers can leak search terms the

67
00:02:40,800 --> 00:02:42,879
referrer values can contain query

68
00:02:42,879 --> 00:02:46,800
parameters for example search strings

69
00:02:46,800 --> 00:02:48,720
to use a concrete example we search for

70
00:02:48,720 --> 00:02:50,640
the medical condition pancreatic cancer

71
00:02:50,640 --> 00:02:52,000
on webmd

72
00:02:52,000 --> 00:02:54,400
when webmd renders the results page it

73
00:02:54,400 --> 00:02:56,400
loads the third-party javascript library

74
00:02:56,400 --> 00:02:58,959
google ad services our query string is

75
00:02:58,959 --> 00:03:00,879
sent to google ad services as part of

76
00:03:00,879 --> 00:03:04,359
the network request

77
00:03:05,840 --> 00:03:08,319
our primary research goal is to study

78
00:03:08,319 --> 00:03:10,239
the leakage of search terms in internal

79
00:03:10,239 --> 00:03:12,560
site search along three vectors the

80
00:03:12,560 --> 00:03:16,840
referrer header the url and the payload

81
00:03:16,840 --> 00:03:20,000
in to do this we crawl the top 1 million

82
00:03:20,000 --> 00:03:22,000
websites according to tranco which is

83
00:03:22,000 --> 00:03:26,159
considered a better alternative to alexa

84
00:03:26,400 --> 00:03:28,400
we use the headless browser to simulate

85
00:03:28,400 --> 00:03:30,799
typing in jelly beans into search fields

86
00:03:30,799 --> 00:03:33,040
one character at a time

87
00:03:33,040 --> 00:03:35,519
we intercepted in-going and outgoing

88
00:03:35,519 --> 00:03:37,760
network requests and we looked for the

89
00:03:37,760 --> 00:03:40,480
jelly bean string in the capture data to

90
00:03:40,480 --> 00:03:42,640
see which websites leak and receive our

91
00:03:42,640 --> 00:03:44,640
search string

92
00:03:44,640 --> 00:03:46,480
a crawler was based off the puppeteer

93
00:03:46,480 --> 00:03:48,239
headless browser and the architecture

94
00:03:48,239 --> 00:03:49,840
looks as follows

95
00:03:49,840 --> 00:03:51,599
the workers are headless chromium

96
00:03:51,599 --> 00:03:52,959
processes

97
00:03:52,959 --> 00:03:55,200
the headless browser has full js

98
00:03:55,200 --> 00:03:57,120
capabilities which is required to crawl

99
00:03:57,120 --> 00:03:58,799
the modern web

100
00:03:58,799 --> 00:04:01,519
our setup can handle over 100 concurrent

101
00:04:01,519 --> 00:04:04,080
workers which was necessary to crawl one

102
00:04:04,080 --> 00:04:06,400
million websites in a reasonable amount

103
00:04:06,400 --> 00:04:08,879
of time

104
00:04:08,879 --> 00:04:11,360
to put it in simple terms our crawler

105
00:04:11,360 --> 00:04:13,599
found all the search inputs on a given

106
00:04:13,599 --> 00:04:15,200
html page

107
00:04:15,200 --> 00:04:17,040
then it would type the jelly bean string

108
00:04:17,040 --> 00:04:19,839
one character at a time into that input

109
00:04:19,839 --> 00:04:22,079
and finally it would execute the search

110
00:04:22,079 --> 00:04:24,080
the crawler would record all network

111
00:04:24,080 --> 00:04:27,280
traffic for later analysis

112
00:04:27,280 --> 00:04:29,120
we faced a number of challenges when

113
00:04:29,120 --> 00:04:31,840
running our crawler for example

114
00:04:31,840 --> 00:04:33,520
false positives when searching for

115
00:04:33,520 --> 00:04:36,560
search inputs in the html page hidden

116
00:04:36,560 --> 00:04:38,880
search inputs dynamically generated

117
00:04:38,880 --> 00:04:41,440
query selectors search results displayed

118
00:04:41,440 --> 00:04:44,800
in a new tab interstitials captchas and

119
00:04:44,800 --> 00:04:47,040
regional blocking it took a significant

120
00:04:47,040 --> 00:04:49,199
amount of engineering effort to overcome

121
00:04:49,199 --> 00:04:51,600
these challenges

122
00:04:51,600 --> 00:04:56,280
now i want to present our main results

123
00:04:57,120 --> 00:04:59,360
we crawled the top 1 million websites

124
00:04:59,360 --> 00:05:02,000
using the tranco list from august 2020

125
00:05:02,000 --> 00:05:03,919
we were able to search on and collect

126
00:05:03,919 --> 00:05:07,039
results for about 512 000 domains

127
00:05:07,039 --> 00:05:09,759
out of those about 81 percent leak

128
00:05:09,759 --> 00:05:11,759
search terms to third parties in some

129
00:05:11,759 --> 00:05:14,080
form

130
00:05:14,479 --> 00:05:16,160
to answer a research question from

131
00:05:16,160 --> 00:05:18,160
earlier the leakage breaks down as

132
00:05:18,160 --> 00:05:21,120
follows via the referrer header via the

133
00:05:21,120 --> 00:05:24,320
url query parameters and via payload

134
00:05:24,320 --> 00:05:26,960
often in post requests

135
00:05:26,960 --> 00:05:28,880
we will explore each of these cases in

136
00:05:28,880 --> 00:05:30,479
more detail

137
00:05:30,479 --> 00:05:32,400
first we look at leakage via the

138
00:05:32,400 --> 00:05:33,840
referrer header

139
00:05:33,840 --> 00:05:36,000
the search terms are leaked in a direct

140
00:05:36,000 --> 00:05:38,560
manner on 72 percent of the websites we

141
00:05:38,560 --> 00:05:40,960
looked at via the referrer header

142
00:05:40,960 --> 00:05:43,039
however the search terms were leaked in

143
00:05:43,039 --> 00:05:45,680
an indirect manner on 10 of the websites

144
00:05:45,680 --> 00:05:47,039
that we looked at

145
00:05:47,039 --> 00:05:49,280
to see how this might happen take a look

146
00:05:49,280 --> 00:05:51,039
at the figure below

147
00:05:51,039 --> 00:05:54,320
notice that a loads b as an iframe and b

148
00:05:54,320 --> 00:05:56,880
sends a network request to website d

149
00:05:56,880 --> 00:05:59,360
in such cases we say that b leaks the

150
00:05:59,360 --> 00:06:02,880
search terms to d in an indirect manner

151
00:06:02,880 --> 00:06:04,720
another way for the search terms to be

152
00:06:04,720 --> 00:06:08,160
leaked is via the url query parameters

153
00:06:08,160 --> 00:06:12,639
this happens on 71 of websites however

154
00:06:12,639 --> 00:06:15,680
there is a potential for leakage on 87.4

155
00:06:15,680 --> 00:06:17,360
percent of websites

156
00:06:17,360 --> 00:06:19,759
the idea here is that websites which

157
00:06:19,759 --> 00:06:21,600
display search results may contain a

158
00:06:21,600 --> 00:06:23,120
variety of links

159
00:06:23,120 --> 00:06:25,919
when a user clicks on one of those links

160
00:06:25,919 --> 00:06:27,440
in that case

161
00:06:27,440 --> 00:06:30,319
this query string may be linked to that

162
00:06:30,319 --> 00:06:32,720
website's operator

163
00:06:32,720 --> 00:06:34,960
through a poorly configured referrer

164
00:06:34,960 --> 00:06:37,039
policy

165
00:06:37,039 --> 00:06:39,039
to determine the potential leakage we

166
00:06:39,039 --> 00:06:40,960
looked at the policy for the page and

167
00:06:40,960 --> 00:06:44,240
any element specific annotations

168
00:06:44,240 --> 00:06:46,080
the final vector that we looked at for

169
00:06:46,080 --> 00:06:47,840
search term leakage was via payload

170
00:06:47,840 --> 00:06:50,720
which often happens via post requests

171
00:06:50,720 --> 00:06:53,120
we actually observed payload leakage on

172
00:06:53,120 --> 00:06:55,360
21 of websites

173
00:06:55,360 --> 00:06:58,479
however we did also observe obfuscated

174
00:06:58,479 --> 00:07:01,520
payloads on 0.9 of website

175
00:07:01,520 --> 00:07:04,160
for example these websites might encode

176
00:07:04,160 --> 00:07:06,479
the query parameters in base64 which we

177
00:07:06,479 --> 00:07:08,800
decoded we also observed many other

178
00:07:08,800 --> 00:07:11,120
obfuscation techniques including exotic

179
00:07:11,120 --> 00:07:12,400
encodings

180
00:07:12,400 --> 00:07:14,880
we observed some very large payloads in

181
00:07:14,880 --> 00:07:17,199
some cases for example over 10 kilobytes

182
00:07:17,199 --> 00:07:19,199
per request which was a little bit

183
00:07:19,199 --> 00:07:21,199
suspicious

184
00:07:21,199 --> 00:07:23,360
finally we would like to report on what

185
00:07:23,360 --> 00:07:25,199
referrer policies were observed in the

186
00:07:25,199 --> 00:07:27,759
wild we found that for the vast majority

187
00:07:27,759 --> 00:07:30,080
of websites no referrer policies were

188
00:07:30,080 --> 00:07:32,639
explicitly specified either via their

189
00:07:32,639 --> 00:07:35,919
header or via html elements this shows

190
00:07:35,919 --> 00:07:37,280
the great amount of influence that

191
00:07:37,280 --> 00:07:38,720
browser vendors have to control

192
00:07:38,720 --> 00:07:40,800
potential privacy leaks via referrer

193
00:07:40,800 --> 00:07:42,560
headers

194
00:07:42,560 --> 00:07:44,479
another element of our research was

195
00:07:44,479 --> 00:07:47,919
looking at privacy policies

196
00:07:47,919 --> 00:07:49,840
we wanted to know whether users were

197
00:07:49,840 --> 00:07:51,520
informed that their search terms might

198
00:07:51,520 --> 00:07:54,719
leak to third parties

199
00:07:56,240 --> 00:07:58,800
in order to do this we extracted links

200
00:07:58,800 --> 00:08:01,440
to the privacy policies during our crawl

201
00:08:01,440 --> 00:08:04,080
we then determined if the documents

202
00:08:04,080 --> 00:08:06,160
were actually privacy policies using a

203
00:08:06,160 --> 00:08:08,879
classifier which we trained on

204
00:08:08,879 --> 00:08:13,919
the opp115 corpus using a one class svm

205
00:08:13,919 --> 00:08:15,919
then we looked at whether the privacy

206
00:08:15,919 --> 00:08:18,000
policies have any text relating to

207
00:08:18,000 --> 00:08:19,840
search

208
00:08:19,840 --> 00:08:23,520
this is a subset of the opp115 corpus it

209
00:08:23,520 --> 00:08:25,680
shows fragments of privacy policies that

210
00:08:25,680 --> 00:08:29,680
pertain to the treatment of search terms

211
00:08:30,240 --> 00:08:32,159
our results show that we were able to

212
00:08:32,159 --> 00:08:34,159
find privacy policies for fifty point

213
00:08:34,159 --> 00:08:36,799
five percent of websites in our data set

214
00:08:36,799 --> 00:08:38,399
thirteen percent of those privacy

215
00:08:38,399 --> 00:08:39,839
policies mention

216
00:08:39,839 --> 00:08:42,719
search related practices explicitly

217
00:08:42,719 --> 00:08:45,279
however a number of the privacy policies

218
00:08:45,279 --> 00:08:47,839
contain vague statements related to user

219
00:08:47,839 --> 00:08:50,080
interaction

220
00:08:50,080 --> 00:08:52,240
from this we can conclude

221
00:08:52,240 --> 00:08:55,600
that not many users would be informed

222
00:08:55,600 --> 00:08:57,760
of the potential for their search terms

223
00:08:57,760 --> 00:09:00,000
to be shared with

224
00:09:00,000 --> 00:09:02,240
third parties even in the case where

225
00:09:02,240 --> 00:09:05,360
they actually read the privacy polls

226
00:09:05,360 --> 00:09:07,040
i would like to conclude by talking

227
00:09:07,040 --> 00:09:09,440
about mitigations

228
00:09:09,440 --> 00:09:11,440
for starters the brave browser does

229
00:09:11,440 --> 00:09:13,760
redact the referrer header and chrome

230
00:09:13,760 --> 00:09:15,920
version 85 plus and newer versions of

231
00:09:15,920 --> 00:09:18,240
safari only sends the referrer domain

232
00:09:18,240 --> 00:09:20,480
not the query string to third parties by

233
00:09:20,480 --> 00:09:22,480
default this is something that they

234
00:09:22,480 --> 00:09:24,880
changed since the time of our crawl

235
00:09:24,880 --> 00:09:26,560
but keep in mind that all these settings

236
00:09:26,560 --> 00:09:29,360
can be overridden by the site operator

237
00:09:29,360 --> 00:09:31,040
in cases where this was not enough

238
00:09:31,040 --> 00:09:33,120
mitigation we also built a browser

239
00:09:33,120 --> 00:09:34,880
extension which alerts users when a

240
00:09:34,880 --> 00:09:36,560
website shares their search terms with

241
00:09:36,560 --> 00:09:39,359
third parties

242
00:09:40,399 --> 00:09:43,360
in conclusion 92.1 percent of top

243
00:09:43,360 --> 00:09:45,360
websites that we were able to crawl had

244
00:09:45,360 --> 00:09:47,200
some kind of privacy leak through one of

245
00:09:47,200 --> 00:09:50,080
the three observed vectors and often

246
00:09:50,080 --> 00:09:52,240
along multiple vectors

247
00:09:52,240 --> 00:09:54,320
website operators rarely specify the

248
00:09:54,320 --> 00:09:56,720
refer policy explicitly so browser

249
00:09:56,720 --> 00:09:58,640
vendors have a large impact on user

250
00:09:58,640 --> 00:09:59,920
privacy

251
00:09:59,920 --> 00:10:02,000
privacy policies include little or no

252
00:10:02,000 --> 00:10:04,079
information about search terms despite

253
00:10:04,079 --> 00:10:05,920
their known sensitivity

254
00:10:05,920 --> 00:10:08,240
and finally privacy policies on the web

255
00:10:08,240 --> 00:10:10,560
are still hard to find we were only able

256
00:10:10,560 --> 00:10:13,200
to find privacy policies for 50 of top

257
00:10:13,200 --> 00:10:14,959
websites

258
00:10:14,959 --> 00:10:16,800
thank you for listening to this talk

259
00:10:16,800 --> 00:10:18,880
since we only had a limited amount of

260
00:10:18,880 --> 00:10:21,279
time i only scratched the surface of our

261
00:10:21,279 --> 00:10:23,200
research and i encourage you to read our

262
00:10:23,200 --> 00:10:26,800
paper for more details

