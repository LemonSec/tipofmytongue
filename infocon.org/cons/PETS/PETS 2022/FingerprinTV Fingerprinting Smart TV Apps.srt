1
00:00:02,320 --> 00:00:04,560
hello my name is jenus varmagen thank

2
00:00:04,560 --> 00:00:06,399
you for attending our presentation of

3
00:00:06,399 --> 00:00:08,960
our paper fingerprint tv fingerprinting

4
00:00:08,960 --> 00:00:11,360
smart tv apps this is joint work with

5
00:00:11,360 --> 00:00:13,759
jada al-arash ramadi trimananda and

6
00:00:13,759 --> 00:00:17,719
professor athena marcopoulou

7
00:00:18,480 --> 00:00:21,680
a smart tv also known as a connected tv

8
00:00:21,680 --> 00:00:23,359
is an internet connected tv with

9
00:00:23,359 --> 00:00:25,760
computational capabilities

10
00:00:25,760 --> 00:00:27,680
this allows the tv to download content

11
00:00:27,680 --> 00:00:29,519
from servers on the internet and run

12
00:00:29,519 --> 00:00:31,359
interactive apps

13
00:00:31,359 --> 00:00:33,680
smart cities come in two flavors

14
00:00:33,680 --> 00:00:35,760
there are built-in smart tvs where the

15
00:00:35,760 --> 00:00:37,600
hardware and software is integrated into

16
00:00:37,600 --> 00:00:38,960
the tv set

17
00:00:38,960 --> 00:00:40,719
and there are external boxer stick

18
00:00:40,719 --> 00:00:43,520
solutions that can be inserted into a tv

19
00:00:43,520 --> 00:00:45,360
and we refer to both of these as smart

20
00:00:45,360 --> 00:00:47,039
cvs

21
00:00:47,039 --> 00:00:48,640
in this work we study network

22
00:00:48,640 --> 00:00:51,440
fingerprints in the context of smart tvs

23
00:00:51,440 --> 00:00:53,520
and simply put network fingerprints on

24
00:00:53,520 --> 00:00:55,280
traffic that is characteristic for

25
00:00:55,280 --> 00:00:57,600
certain software hardware

26
00:00:57,600 --> 00:00:59,199
and by observing the manifestation of

27
00:00:59,199 --> 00:01:01,440
fingerprints in real world traffic one

28
00:01:01,440 --> 00:01:03,199
can then deduce that the corresponding

29
00:01:03,199 --> 00:01:05,360
software is being used

30
00:01:05,360 --> 00:01:07,360
now well-started classic examples

31
00:01:07,360 --> 00:01:09,439
include identification of websites and

32
00:01:09,439 --> 00:01:11,840
iot devices but smart cv app

33
00:01:11,840 --> 00:01:13,360
identification has received less

34
00:01:13,360 --> 00:01:16,159
attention in the literature

35
00:01:16,159 --> 00:01:17,680
there are many different network

36
00:01:17,680 --> 00:01:20,400
fingerprinting techniques ranging from

37
00:01:20,400 --> 00:01:22,159
simple port-based fingerprints to

38
00:01:22,159 --> 00:01:24,000
sophisticated deep learning on traffic

39
00:01:24,000 --> 00:01:25,200
metadata

40
00:01:25,200 --> 00:01:26,640
in this work we consider three

41
00:01:26,640 --> 00:01:28,159
techniques that roughly fall in the

42
00:01:28,159 --> 00:01:31,520
middle of these two extremes

43
00:01:33,360 --> 00:01:35,520
smart tvs are now widespread in the us

44
00:01:35,520 --> 00:01:38,079
with at least one smart tv in 82 percent

45
00:01:38,079 --> 00:01:40,560
of us tv households

46
00:01:40,560 --> 00:01:42,479
at the same time more and more users

47
00:01:42,479 --> 00:01:43,920
rely on their smart tvs for

48
00:01:43,920 --> 00:01:45,920
entertainment in general including for

49
00:01:45,920 --> 00:01:48,720
music for video and for social media so

50
00:01:48,720 --> 00:01:50,720
this technology is used by many people

51
00:01:50,720 --> 00:01:53,680
often for several hours a day

52
00:01:53,680 --> 00:01:55,759
and partly due to this scale smart cv

53
00:01:55,759 --> 00:01:57,680
app usage data has monetization

54
00:01:57,680 --> 00:01:59,520
potential

55
00:01:59,520 --> 00:02:01,680
from studies on smartphones we know that

56
00:02:01,680 --> 00:02:04,000
app uses is indicative of the user's

57
00:02:04,000 --> 00:02:07,520
demographics personality interest etc

58
00:02:07,520 --> 00:02:09,038
now assuming that this carries over to

59
00:02:09,038 --> 00:02:11,038
smart tvs and also considering that

60
00:02:11,038 --> 00:02:12,720
viewing history is regarded a

61
00:02:12,720 --> 00:02:14,400
cornerstone of programmatic tv

62
00:02:14,400 --> 00:02:17,120
advertising smart cv app uses data as

63
00:02:17,120 --> 00:02:18,959
arguably a treasure trove of information

64
00:02:18,959 --> 00:02:20,720
for businesses engaged in targeted

65
00:02:20,720 --> 00:02:22,640
advertising

66
00:02:22,640 --> 00:02:24,720
and because isps are known to collect

67
00:02:24,720 --> 00:02:26,080
and use information about their

68
00:02:26,080 --> 00:02:28,480
customers for advertising purposes

69
00:02:28,480 --> 00:02:30,400
we believe it is important to quantify

70
00:02:30,400 --> 00:02:31,920
to what extent that they can collect

71
00:02:31,920 --> 00:02:36,679
smart tv app uses data as well

72
00:02:37,120 --> 00:02:39,280
thus the research question we set out to

73
00:02:39,280 --> 00:02:40,959
answer in this study is

74
00:02:40,959 --> 00:02:42,959
to what extent can smart cv apps be

75
00:02:42,959 --> 00:02:46,720
identified from their network traffic

76
00:02:46,720 --> 00:02:48,640
to answer this question we take a

77
00:02:48,640 --> 00:02:50,720
network measurement approach in which we

78
00:02:50,720 --> 00:02:52,640
instrument smart tvs to repeatedly

79
00:02:52,640 --> 00:02:54,319
launch the top thousand apps of the

80
00:02:54,319 --> 00:02:56,879
three most popular smart cv platforms

81
00:02:56,879 --> 00:02:59,760
namely apple cv amazon's fire tv and

82
00:02:59,760 --> 00:03:02,159
roku and we then analyze the traffic the

83
00:03:02,159 --> 00:03:06,159
apps generate for network fingerprints

84
00:03:06,400 --> 00:03:08,239
we instrument and collect traffic from

85
00:03:08,239 --> 00:03:10,400
the smart tvs by configuring a computer

86
00:03:10,400 --> 00:03:12,959
to host the wireless network

87
00:03:12,959 --> 00:03:14,640
the smart tv on the test is then

88
00:03:14,640 --> 00:03:16,879
connected to this wireless network

89
00:03:16,879 --> 00:03:18,319
and this means that all traffic

90
00:03:18,319 --> 00:03:20,239
generated by each app on the test will

91
00:03:20,239 --> 00:03:21,840
therefore flow through the computer's

92
00:03:21,840 --> 00:03:25,040
wireless network interface

93
00:03:25,040 --> 00:03:27,599
finally we run our software fingerprint

94
00:03:27,599 --> 00:03:29,360
tv on the computer

95
00:03:29,360 --> 00:03:31,440
fingerprint tv automates collection of

96
00:03:31,440 --> 00:03:33,599
apps on launch traffic

97
00:03:33,599 --> 00:03:35,360
for each app fingerprint tv

98
00:03:35,360 --> 00:03:37,120
programmatically installs the app on the

99
00:03:37,120 --> 00:03:38,319
smart tv

100
00:03:38,319 --> 00:03:40,080
launches the app 10 times while

101
00:03:40,080 --> 00:03:41,680
collecting traffic on the computer's

102
00:03:41,680 --> 00:03:43,680
wireless network interface and

103
00:03:43,680 --> 00:03:45,440
ultimately uninstalls the app from the

104
00:03:45,440 --> 00:03:47,680
smart cp

105
00:03:47,680 --> 00:03:49,360
in the following slides we'll use the

106
00:03:49,360 --> 00:03:52,239
term launch sample to refer to a single

107
00:03:52,239 --> 00:03:54,000
recording of the traffic and app

108
00:03:54,000 --> 00:03:57,120
generates at launch

109
00:03:58,080 --> 00:04:00,080
to answer our research question it is

110
00:04:00,080 --> 00:04:02,400
important that we study many of the most

111
00:04:02,400 --> 00:04:05,439
widely used smart tv apps

112
00:04:05,439 --> 00:04:07,040
we therefore first crawl the web

113
00:04:07,040 --> 00:04:09,120
interfaces of the three platforms app

114
00:04:09,120 --> 00:04:11,200
stores to determine all available free

115
00:04:11,200 --> 00:04:13,280
apps

116
00:04:13,280 --> 00:04:15,280
for each platform we then selected the

117
00:04:15,280 --> 00:04:17,199
thousand apps with the most reviews for

118
00:04:17,199 --> 00:04:19,279
inclusion in our study

119
00:04:19,279 --> 00:04:21,358
now the assumption we make here is that

120
00:04:21,358 --> 00:04:23,280
apps that have the most reviews also

121
00:04:23,280 --> 00:04:25,600
have the largest user bases and are

122
00:04:25,600 --> 00:04:27,440
therefore the most important apps to

123
00:04:27,440 --> 00:04:28,800
test

124
00:04:28,800 --> 00:04:30,720
these top thousands account for twenty

125
00:04:30,720 --> 00:04:33,280
six percent fifteen percent and seven

126
00:04:33,280 --> 00:04:35,600
percent of the available free apps for

127
00:04:35,600 --> 00:04:40,560
apple tv fire tv and roku respectively

128
00:04:41,120 --> 00:04:43,040
we use three different fingerprinting

129
00:04:43,040 --> 00:04:44,720
techniques to extract fingerprints from

130
00:04:44,720 --> 00:04:47,120
the collected loan samples

131
00:04:47,120 --> 00:04:48,880
each of these techniques essentially

132
00:04:48,880 --> 00:04:51,120
examines if a specific traffic feature

133
00:04:51,120 --> 00:04:53,440
assumes the same value across all 10

134
00:04:53,440 --> 00:04:55,120
loan symbols

135
00:04:55,120 --> 00:04:56,880
the requirement that the value should

136
00:04:56,880 --> 00:04:58,639
stay consistent across all launch

137
00:04:58,639 --> 00:05:00,880
samples is a conservative choice we made

138
00:05:00,880 --> 00:05:02,720
in order to ensure that we extract the

139
00:05:02,720 --> 00:05:05,280
most reliable fingerprints but this can

140
00:05:05,280 --> 00:05:09,359
be adjusted downwards if so desired

141
00:05:09,440 --> 00:05:11,360
we refer to the fingerprints extracted

142
00:05:11,360 --> 00:05:13,360
by the first technique as domain based

143
00:05:13,360 --> 00:05:16,479
fingerprints or dbf's for short

144
00:05:16,479 --> 00:05:18,400
and the dbf is essentially the set of

145
00:05:18,400 --> 00:05:20,479
domains that are consistently contacted

146
00:05:20,479 --> 00:05:23,600
at app launch time as extracted from dns

147
00:05:23,600 --> 00:05:27,680
tls sni or http

148
00:05:27,919 --> 00:05:29,280
the second type of fingerprint we

149
00:05:29,280 --> 00:05:31,360
consider we refer to as packet

150
00:05:31,360 --> 00:05:33,919
pair-based fingerprints or pbfs for

151
00:05:33,919 --> 00:05:34,960
short

152
00:05:34,960 --> 00:05:37,120
the basic idea here is to identify

153
00:05:37,120 --> 00:05:39,680
request reply packet exchanges where the

154
00:05:39,680 --> 00:05:41,759
packet sizes and the packet directions

155
00:05:41,759 --> 00:05:45,280
are consistent across launch samples

156
00:05:45,280 --> 00:05:47,600
this technique stems from our prior work

157
00:05:47,600 --> 00:05:49,360
where we found it to be successful at

158
00:05:49,360 --> 00:05:53,840
fingerprinting events on iot devices

159
00:05:54,400 --> 00:05:56,800
finally we consider what we call tls

160
00:05:56,800 --> 00:06:00,160
based fingerprints or tbfs for short

161
00:06:00,160 --> 00:06:02,960
and cbf is the set of individual cls

162
00:06:02,960 --> 00:06:05,120
fingerprints that consistently appear at

163
00:06:05,120 --> 00:06:06,720
app launch time

164
00:06:06,720 --> 00:06:08,960
where an individual tls fingerprint is

165
00:06:08,960 --> 00:06:10,880
derived from the parameters that the

166
00:06:10,880 --> 00:06:12,960
client sends when initiating a cls

167
00:06:12,960 --> 00:06:15,280
session

168
00:06:16,080 --> 00:06:18,160
to evaluate the performance of the three

169
00:06:18,160 --> 00:06:20,240
fingerprinting techniques we look at the

170
00:06:20,240 --> 00:06:23,039
following three metrics

171
00:06:23,039 --> 00:06:25,120
prevalence which is the percentage of

172
00:06:25,120 --> 00:06:26,960
apps that exhibit a fingerprint of a

173
00:06:26,960 --> 00:06:29,120
given type

174
00:06:29,120 --> 00:06:31,120
distinctiveness which is the percentage

175
00:06:31,120 --> 00:06:33,199
of apps that exhibit a fingerprint of a

176
00:06:33,199 --> 00:06:35,440
given type where that fingerprint is

177
00:06:35,440 --> 00:06:36,800
distinct from all other apps

178
00:06:36,800 --> 00:06:39,840
fingerprints of that same type

179
00:06:39,840 --> 00:06:42,560
finally we examine fingerprint sizes

180
00:06:42,560 --> 00:06:44,319
defined as the number of members in a

181
00:06:44,319 --> 00:06:46,479
fingerprint so for example the number of

182
00:06:46,479 --> 00:06:49,440
domains in a dbf

183
00:06:49,440 --> 00:06:51,919
to compute these metrics fingerprint tv

184
00:06:51,919 --> 00:06:53,840
constructs a matrix where the columns

185
00:06:53,840 --> 00:06:55,599
are apps and the rows are fingerprint

186
00:06:55,599 --> 00:06:56,960
members

187
00:06:56,960 --> 00:06:58,800
a cell in this matrix is assigned a

188
00:06:58,800 --> 00:07:00,800
binary value that denotes if the

189
00:07:00,800 --> 00:07:02,319
fingerprint member is part of the

190
00:07:02,319 --> 00:07:05,520
corresponding apps fingerprint or not

191
00:07:05,520 --> 00:07:07,280
so for example here on the right and

192
00:07:07,280 --> 00:07:10,240
appsdbf is the domains corresponding to

193
00:07:10,240 --> 00:07:12,080
the blue cells in the app's respective

194
00:07:12,080 --> 00:07:14,479
column

195
00:07:14,880 --> 00:07:16,800
now with this we can easily compute the

196
00:07:16,800 --> 00:07:19,199
prevalence using the number of columns

197
00:07:19,199 --> 00:07:21,120
where there is at least one cell that is

198
00:07:21,120 --> 00:07:22,720
non-zero

199
00:07:22,720 --> 00:07:25,120
and an abs fingerprint size is just the

200
00:07:25,120 --> 00:07:27,039
number of non-zero cells in the app's

201
00:07:27,039 --> 00:07:28,840
respective

202
00:07:28,840 --> 00:07:31,520
column to compute distinctiveness we

203
00:07:31,520 --> 00:07:33,599
perform agglomerative clustering on the

204
00:07:33,599 --> 00:07:35,280
columns in the matrix

205
00:07:35,280 --> 00:07:37,280
and here we use cosine distance for

206
00:07:37,280 --> 00:07:39,680
fingerprint similarity and a distance

207
00:07:39,680 --> 00:07:41,360
threshold of zero when extracting

208
00:07:41,360 --> 00:07:44,240
clusters from the clustering

209
00:07:44,240 --> 00:07:46,479
now this implies that apps must have

210
00:07:46,479 --> 00:07:48,479
identical fingerprints to end up in the

211
00:07:48,479 --> 00:07:50,879
same cluster and we can never use the

212
00:07:50,879 --> 00:07:52,960
number of singles on clusters to compute

213
00:07:52,960 --> 00:07:55,758
distinctiveness

214
00:07:57,520 --> 00:08:00,800
we find that dbf's pbfs and tbfs are

215
00:08:00,800 --> 00:08:03,039
highly prevalent on all three smart cv

216
00:08:03,039 --> 00:08:04,240
platforms

217
00:08:04,240 --> 00:08:06,960
for example all roku apps exhibit all

218
00:08:06,960 --> 00:08:09,759
three types of fingerprints

219
00:08:09,759 --> 00:08:11,919
however an app's fingerprint is only

220
00:08:11,919 --> 00:08:13,919
useful if it is distinct among other

221
00:08:13,919 --> 00:08:16,240
apps fingerprints and tbfs therefore

222
00:08:16,240 --> 00:08:17,840
have little value

223
00:08:17,840 --> 00:08:19,919
now this lack of discriminative power is

224
00:08:19,919 --> 00:08:23,840
consistent with findings in prior work

225
00:08:23,840 --> 00:08:25,680
we also examined the effects of

226
00:08:25,680 --> 00:08:27,759
combining fingerprints and here on the

227
00:08:27,759 --> 00:08:30,000
right the all case refers to apps that

228
00:08:30,000 --> 00:08:32,880
have either a dbf or a pbf or both of

229
00:08:32,880 --> 00:08:35,279
them and the aim case refers to apps

230
00:08:35,279 --> 00:08:39,279
that have both a dbf and a pbf

231
00:08:39,279 --> 00:08:41,599
we see that if one is okay with using

232
00:08:41,599 --> 00:08:45,279
either a dbf or a pbf nearly all apps on

233
00:08:45,279 --> 00:08:47,440
all platforms can be fingerprinted and

234
00:08:47,440 --> 00:08:48,560
the fingerprints have high

235
00:08:48,560 --> 00:08:50,800
distinctiveness

236
00:08:50,800 --> 00:08:52,880
and the distinctiveness increases even

237
00:08:52,880 --> 00:08:55,680
further for apps that exhibit both a dbf

238
00:08:55,680 --> 00:08:58,640
and a pbf

239
00:08:59,440 --> 00:09:01,440
to give insights into the distribution

240
00:09:01,440 --> 00:09:03,600
of fingerprint sizes and the relation

241
00:09:03,600 --> 00:09:05,680
between a fingerprint size and its

242
00:09:05,680 --> 00:09:08,320
distinctiveness fingerprint tv plots the

243
00:09:08,320 --> 00:09:10,320
fingerprint size against the cluster

244
00:09:10,320 --> 00:09:12,720
size annotated with the number of apps

245
00:09:12,720 --> 00:09:16,560
that fall at each point in this matrix

246
00:09:16,560 --> 00:09:19,040
we see that apps with larger dbf's

247
00:09:19,040 --> 00:09:21,279
generally fall in singles on or small

248
00:09:21,279 --> 00:09:22,399
clusters

249
00:09:22,399 --> 00:09:24,720
which is what you'd expect as a larger

250
00:09:24,720 --> 00:09:28,640
fingerprint is more likely to be unique

251
00:09:28,880 --> 00:09:30,959
on all three smart cv platforms the

252
00:09:30,959 --> 00:09:33,760
median size of a dbf is full

253
00:09:33,760 --> 00:09:37,279
the median size of a pbf is 2 4 and 5

254
00:09:37,279 --> 00:09:39,600
for apple cv fire tv and roku

255
00:09:39,600 --> 00:09:41,920
respectively

256
00:09:41,920 --> 00:09:44,000
more interestingly we find that a very

257
00:09:44,000 --> 00:09:45,920
large fraction of the fingerprints that

258
00:09:45,920 --> 00:09:47,760
are larger than the median size are

259
00:09:47,760 --> 00:09:48,839
distinct

260
00:09:48,839 --> 00:09:51,760
fingerprints so in total we see some

261
00:09:51,760 --> 00:09:54,080
correlation between a fingerprint size

262
00:09:54,080 --> 00:09:57,200
and its distinctiveness

263
00:09:57,920 --> 00:09:59,760
to better understand why some apps

264
00:09:59,760 --> 00:10:02,480
exhibit identical dpfs we took a closer

265
00:10:02,480 --> 00:10:04,240
look at apps that end up in the same

266
00:10:04,240 --> 00:10:07,279
cluster and thus share the same dbf

267
00:10:07,279 --> 00:10:09,680
here we show a breakdown of the number

268
00:10:09,680 --> 00:10:11,680
of distinct developers responsible for

269
00:10:11,680 --> 00:10:14,959
apps that cluster together

270
00:10:15,200 --> 00:10:17,200
we found that in many cases apps that

271
00:10:17,200 --> 00:10:19,519
share the same dbf often stem from the

272
00:10:19,519 --> 00:10:22,320
same developer

273
00:10:22,640 --> 00:10:25,519
from examining the domains in dbfs that

274
00:10:25,519 --> 00:10:28,079
are shared by multiple apps we also

275
00:10:28,079 --> 00:10:29,839
discovered that many apps that were

276
00:10:29,839 --> 00:10:31,519
officially published by different

277
00:10:31,519 --> 00:10:32,800
developers

278
00:10:32,800 --> 00:10:34,880
were actually generated using the same

279
00:10:34,880 --> 00:10:36,959
no code toolkits or developed by the

280
00:10:36,959 --> 00:10:40,160
same consulting firms

281
00:10:40,720 --> 00:10:42,959
if we consider such cases as the same

282
00:10:42,959 --> 00:10:45,600
developer a very large fraction of the

283
00:10:45,600 --> 00:10:48,399
apple cv and fire tv apps that share the

284
00:10:48,399 --> 00:10:51,279
dbs with other apps only shared with

285
00:10:51,279 --> 00:10:54,800
other apps from the same developer

286
00:10:57,360 --> 00:10:59,839
in summary we performed a large scale

287
00:10:59,839 --> 00:11:01,920
empirical study of the effectiveness of

288
00:11:01,920 --> 00:11:03,200
three different fingerprinting

289
00:11:03,200 --> 00:11:06,959
techniques when applied to smart cv apps

290
00:11:06,959 --> 00:11:09,519
we found dpfs and pbfs to be effective

291
00:11:09,519 --> 00:11:11,519
at fingerprinting smart tv apps

292
00:11:11,519 --> 00:11:13,360
especially when these two fingerprinting

293
00:11:13,360 --> 00:11:16,000
techniques are used in conjunction

294
00:11:16,000 --> 00:11:18,320
on the other hand tbfs have very little

295
00:11:18,320 --> 00:11:20,399
discriminative power

296
00:11:20,399 --> 00:11:22,480
we also found that when multiple apps

297
00:11:22,480 --> 00:11:25,440
share the same dbf these apps often stem

298
00:11:25,440 --> 00:11:27,440
from the same developer or have been

299
00:11:27,440 --> 00:11:30,880
built using the same no code toolkit

300
00:11:30,880 --> 00:11:32,959
thank you for listening please visit our

301
00:11:32,959 --> 00:11:35,040
website where you can access the network

302
00:11:35,040 --> 00:11:36,800
traces we collected as part of this

303
00:11:36,800 --> 00:11:37,760
study

304
00:11:37,760 --> 00:11:39,680
and we also plan to release the code for

305
00:11:39,680 --> 00:11:43,839
fingerprint tv at a later date

