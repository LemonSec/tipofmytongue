1
00:00:00,960 --> 00:00:02,960
hello my name is gabrielle capchuk i'm

2
00:00:02,960 --> 00:00:04,160
here today to talk to you about

3
00:00:04,160 --> 00:00:05,600
efficient set membership proofs using

4
00:00:05,600 --> 00:00:07,440
npc in the head and this is a joint work

5
00:00:07,440 --> 00:00:09,440
with matthias from our host university

6
00:00:09,440 --> 00:00:11,759
and arushi and matt from johns hopkins

7
00:00:11,759 --> 00:00:13,759
university uh in this work today we're

8
00:00:13,759 --> 00:00:14,960
going to be talking about set membership

9
00:00:14,960 --> 00:00:17,039
proofs or set membership statements and

10
00:00:17,039 --> 00:00:18,720
these are statements or proofs in which

11
00:00:18,720 --> 00:00:20,480
a prover wants to demonstrate that x1

12
00:00:20,480 --> 00:00:22,080
through xl these are all publicly known

13
00:00:22,080 --> 00:00:24,240
elements that one of them is in the

14
00:00:24,240 --> 00:00:25,680
language l

15
00:00:25,680 --> 00:00:26,800
and we're also going to be using

16
00:00:26,800 --> 00:00:28,480
relation circuit notation here so r

17
00:00:28,480 --> 00:00:30,160
being the relation circuit corresponding

18
00:00:30,160 --> 00:00:32,079
to l um and we're going to be using

19
00:00:32,079 --> 00:00:34,079
alpha to denote the active branch that

20
00:00:34,079 --> 00:00:36,480
is to say the index of the instance that

21
00:00:36,480 --> 00:00:38,000
the prover actually knows the witness

22
00:00:38,000 --> 00:00:40,000
for and is going to be using to actually

23
00:00:40,000 --> 00:00:43,520
satisfy uh the the zero knowledge proof

24
00:00:43,520 --> 00:00:45,600
um good so why care about set membership

25
00:00:45,600 --> 00:00:47,280
proofs at all uh some apprenticeship

26
00:00:47,280 --> 00:00:48,640
proofs are really important for privacy

27
00:00:48,640 --> 00:00:50,320
preserving systems and that's because in

28
00:00:50,320 --> 00:00:52,239
some cases zero knowledge isn't enough

29
00:00:52,239 --> 00:00:54,079
to actually give you privacy that is to

30
00:00:54,079 --> 00:00:55,760
say by simply generating a zero

31
00:00:55,760 --> 00:00:56,800
knowledge proof it might reveal

32
00:00:56,800 --> 00:00:58,559
something about who you are so take for

33
00:00:58,559 --> 00:01:00,160
example if i give you a zero knowledge

34
00:01:00,160 --> 00:01:02,000
proof that i can produce a signature on

35
00:01:02,000 --> 00:01:04,239
some particular message under a given

36
00:01:04,239 --> 00:01:06,799
public key that might reveal that i hold

37
00:01:06,799 --> 00:01:08,320
that secret key and therefore reveal my

38
00:01:08,320 --> 00:01:10,240
identity in order to kind of overcome

39
00:01:10,240 --> 00:01:11,840
the situation that membership proofs

40
00:01:11,840 --> 00:01:13,439
have been used for a long time ring

41
00:01:13,439 --> 00:01:14,960
signatures are a great example of a set

42
00:01:14,960 --> 00:01:16,799
membership proof and these are

43
00:01:16,799 --> 00:01:18,159
signatures in which a proofer wants to

44
00:01:18,159 --> 00:01:20,240
hide their identity among a set of

45
00:01:20,240 --> 00:01:22,560
public keys um so in this kpk1 through

46
00:01:22,560 --> 00:01:24,560
pkl and they can generate a signature

47
00:01:24,560 --> 00:01:26,240
and show uh this signature validates

48
00:01:26,240 --> 00:01:27,600
under one of these public keys but i'm

49
00:01:27,600 --> 00:01:28,960
not going to reveal which of these

50
00:01:28,960 --> 00:01:30,640
public keys it is um and therefore

51
00:01:30,640 --> 00:01:32,880
you're not sure who the signer is

52
00:01:32,880 --> 00:01:35,280
from that publicly known set

53
00:01:35,280 --> 00:01:36,799
this notion of privacy has been used in

54
00:01:36,799 --> 00:01:38,400
a lot of deployed systems for instance

55
00:01:38,400 --> 00:01:40,720
monero and zcash both use

56
00:01:40,720 --> 00:01:43,200
some kind of ring signature or um set

57
00:01:43,200 --> 00:01:44,799
membership proof in order to give

58
00:01:44,799 --> 00:01:46,640
privacy to those sending and receiving

59
00:01:46,640 --> 00:01:49,119
transactions on the blockchain

60
00:01:49,119 --> 00:01:51,040
um in our work what we do is we put

61
00:01:51,040 --> 00:01:52,960
forward a framework for integrating

62
00:01:52,960 --> 00:01:55,119
efficient set membership proofs into mpc

63
00:01:55,119 --> 00:01:56,960
in the head protocols and we try to

64
00:01:56,960 --> 00:01:59,040
actually integrate into existing mpc in

65
00:01:59,040 --> 00:02:00,640
the head protocols efficiently and then

66
00:02:00,640 --> 00:02:01,840
we give some applications of these

67
00:02:01,840 --> 00:02:03,840
systems in particular the smallest known

68
00:02:03,840 --> 00:02:05,200
symmetric key post quantum ring

69
00:02:05,200 --> 00:02:07,600
signatures um and we also give an

70
00:02:07,600 --> 00:02:09,919
extremely simple construction of uh ring

71
00:02:09,919 --> 00:02:12,560
ct transactions that are post quantum

72
00:02:12,560 --> 00:02:14,400
from basically just building on top of

73
00:02:14,400 --> 00:02:16,400
the signature

74
00:02:16,400 --> 00:02:17,920
uh so so everybody's on the same page

75
00:02:17,920 --> 00:02:20,160
we'll quickly review the icos framework

76
00:02:20,160 --> 00:02:22,560
for mpc in the head this is a family of

77
00:02:22,560 --> 00:02:23,920
zero knowledge protocols that work

78
00:02:23,920 --> 00:02:25,920
vaguely like this so a prover will start

79
00:02:25,920 --> 00:02:29,200
by emulating an npc uh the function that

80
00:02:29,200 --> 00:02:30,720
is being computed inside the mpc is the

81
00:02:30,720 --> 00:02:32,080
relation circuit for the relevant

82
00:02:32,080 --> 00:02:33,760
language uh the approver will then

83
00:02:33,760 --> 00:02:35,440
commit to each of the parties emulated

84
00:02:35,440 --> 00:02:37,440
party's views um and send the commitment

85
00:02:37,440 --> 00:02:39,519
to the verifier the verifier will then

86
00:02:39,519 --> 00:02:41,040
challenge a subset of the parties and

87
00:02:41,040 --> 00:02:42,560
the approver will open those subset and

88
00:02:42,560 --> 00:02:44,400
send it to the verifier in order to be

89
00:02:44,400 --> 00:02:46,319
convinced that the uh that the uh

90
00:02:46,319 --> 00:02:48,239
parties acted honestly the verifier is

91
00:02:48,239 --> 00:02:50,080
going to check for consistency among the

92
00:02:50,080 --> 00:02:51,519
party's views so if a message was sent

93
00:02:51,519 --> 00:02:53,040
from one party to another the verifier

94
00:02:53,040 --> 00:02:54,160
will check that that message is

95
00:02:54,160 --> 00:02:56,640
represented honestly in both commitments

96
00:02:56,640 --> 00:02:58,239
so how are we going to integrate set

97
00:02:58,239 --> 00:02:59,760
membership into this paradigm

98
00:02:59,760 --> 00:03:01,200
efficiently we're going to start with

99
00:03:01,200 --> 00:03:03,040
some inefficient approaches so the first

100
00:03:03,040 --> 00:03:05,200
is a naive repetition of the relation

101
00:03:05,200 --> 00:03:06,560
circuit so in this case what we'll just

102
00:03:06,560 --> 00:03:08,480
do is line up l copies of the relation

103
00:03:08,480 --> 00:03:10,480
circuit evaluate each one on a different

104
00:03:10,480 --> 00:03:12,800
uh a different instance x i and then or

105
00:03:12,800 --> 00:03:15,120
the outputs um while very very simple

106
00:03:15,120 --> 00:03:16,400
this is incredibly inefficient right

107
00:03:16,400 --> 00:03:17,920
because we're going to get l copies of

108
00:03:17,920 --> 00:03:19,280
the relation circuit which might

109
00:03:19,280 --> 00:03:21,040
potentially be very very big and so

110
00:03:21,040 --> 00:03:23,760
there's a multiplicative overhead um in

111
00:03:23,760 --> 00:03:25,440
l

112
00:03:25,440 --> 00:03:27,360
uh something that's actually that's much

113
00:03:27,360 --> 00:03:29,519
better is we could kind of separate out

114
00:03:29,519 --> 00:03:31,200
the logic for doing the set membership

115
00:03:31,200 --> 00:03:32,560
from the relation circuit so in this

116
00:03:32,560 --> 00:03:34,080
case we have on the left-hand side of

117
00:03:34,080 --> 00:03:36,000
our circuit and the the the relation

118
00:03:36,000 --> 00:03:38,480
circuit being evaluated so here it

119
00:03:38,480 --> 00:03:40,560
inputs are the witness w along with a

120
00:03:40,560 --> 00:03:42,720
secret instance x alpha in order to

121
00:03:42,720 --> 00:03:44,799
check that x alpha is one of the set x1

122
00:03:44,799 --> 00:03:46,239
through xl what we'll just do is an

123
00:03:46,239 --> 00:03:48,480
element-wise equality check and then or

124
00:03:48,480 --> 00:03:50,720
the results of those equality checks

125
00:03:50,720 --> 00:03:52,560
this is more efficient but there's still

126
00:03:52,560 --> 00:03:54,239
a linear number of equality checks

127
00:03:54,239 --> 00:03:56,000
happening in the circuit and l could

128
00:03:56,000 --> 00:03:57,840
actually be quite large think 2 to the

129
00:03:57,840 --> 00:03:59,599
15 right and so this would not be

130
00:03:59,599 --> 00:04:00,640
something you'd want to do in practice

131
00:04:00,640 --> 00:04:01,840
what you'd really want is something

132
00:04:01,840 --> 00:04:04,080
that's sublinear in l

133
00:04:04,080 --> 00:04:06,080
the way to get sublinearity in l for the

134
00:04:06,080 --> 00:04:08,080
the general approach is to use some kind

135
00:04:08,080 --> 00:04:09,120
of uh

136
00:04:09,120 --> 00:04:11,120
accumulator like a merkle tree in order

137
00:04:11,120 --> 00:04:13,040
to do the set membership check so here

138
00:04:13,040 --> 00:04:14,080
the left-hand side of the circuit

139
00:04:14,080 --> 00:04:15,840
remains exactly the same we're going to

140
00:04:15,840 --> 00:04:18,160
feed in the secret element x alpha along

141
00:04:18,160 --> 00:04:20,160
with the secret path into the mir sorry

142
00:04:20,160 --> 00:04:22,400
merkel tree authenticator along with a

143
00:04:22,400 --> 00:04:24,400
publicly known route that represents the

144
00:04:24,400 --> 00:04:26,720
accumulation of all the public elements

145
00:04:26,720 --> 00:04:29,040
of the set um and then simply check that

146
00:04:29,040 --> 00:04:31,600
uh the the merkle tree uh authenticator

147
00:04:31,600 --> 00:04:34,400
is correct along with the circuit r

148
00:04:34,400 --> 00:04:36,000
from an asymptotic perspective this is

149
00:04:36,000 --> 00:04:37,600
great um the the merkle tree

150
00:04:37,600 --> 00:04:39,759
authenticator can be represented in a

151
00:04:39,759 --> 00:04:42,160
logarithmic number of gates in l the

152
00:04:42,160 --> 00:04:43,759
problem is that that asymptotic hides a

153
00:04:43,759 --> 00:04:45,120
bunch of really really really high

154
00:04:45,120 --> 00:04:46,560
constants in particular we're going to

155
00:04:46,560 --> 00:04:48,880
do log l hashes and representing hash

156
00:04:48,880 --> 00:04:51,440
functions as gates can be incredibly

157
00:04:51,440 --> 00:04:53,280
incredibly expensive

158
00:04:53,280 --> 00:04:54,639
so we're going to do in our work is take

159
00:04:54,639 --> 00:04:56,320
this basic merkle tree approach what

160
00:04:56,320 --> 00:04:57,520
we're going to try and do is take the

161
00:04:57,520 --> 00:04:59,360
merkle tree authenticator and move it

162
00:04:59,360 --> 00:05:01,120
outside of the circuit that's going to

163
00:05:01,120 --> 00:05:04,240
be evaluated inside the npc in the head

164
00:05:04,240 --> 00:05:05,199
and because it's going to be outside

165
00:05:05,199 --> 00:05:06,479
we're not going to need to represent it

166
00:05:06,479 --> 00:05:08,000
as gates and we're going to run it at

167
00:05:08,000 --> 00:05:09,759
hardware time

168
00:05:09,759 --> 00:05:11,919
good so the first step in order to

169
00:05:11,919 --> 00:05:13,759
achieve our approach is to use a

170
00:05:13,759 --> 00:05:15,520
pre-processing similar to the one

171
00:05:15,520 --> 00:05:18,080
proposed in kkw it was proposing kkw in

172
00:05:18,080 --> 00:05:19,440
order to be able to use a more efficient

173
00:05:19,440 --> 00:05:20,960
mpc we're going to use it for slightly

174
00:05:20,960 --> 00:05:22,880
different reasons um the idea here is

175
00:05:22,880 --> 00:05:24,080
that the mpc that's going to be run

176
00:05:24,080 --> 00:05:25,840
inside the proofer's head is going to be

177
00:05:25,840 --> 00:05:27,680
in a pre-processing hybrid model um and

178
00:05:27,680 --> 00:05:29,360
the pre-processing is going to descend

179
00:05:29,360 --> 00:05:30,880
from some central coordinator and the

180
00:05:30,880 --> 00:05:32,320
parties are going to be able to use it

181
00:05:32,320 --> 00:05:34,160
uh during their evaluation of the

182
00:05:34,160 --> 00:05:35,520
circuit

183
00:05:35,520 --> 00:05:37,199
um commitment is going to kind of look

184
00:05:37,199 --> 00:05:38,800
similar as before the the proof is going

185
00:05:38,800 --> 00:05:40,160
to commit to all the parties views but

186
00:05:40,160 --> 00:05:41,840
they're also going to commit to some

187
00:05:41,840 --> 00:05:43,919
pre-processing seeds and we're going to

188
00:05:43,919 --> 00:05:45,440
use this commitment to do a cut and

189
00:05:45,440 --> 00:05:46,880
choose style argument that says that the

190
00:05:46,880 --> 00:05:49,280
pre-processing is done correctly

191
00:05:49,280 --> 00:05:50,400
what does that mean that means that the

192
00:05:50,400 --> 00:05:51,919
verifier is going to challenge both a

193
00:05:51,919 --> 00:05:53,680
set of views but also a set of

194
00:05:53,680 --> 00:05:56,080
pre-processings to make sure that the

195
00:05:56,080 --> 00:05:57,840
pre-processing was done correctly and

196
00:05:57,840 --> 00:05:59,280
the approver is going to open the

197
00:05:59,280 --> 00:06:00,720
preprocessing that were challenged along

198
00:06:00,720 --> 00:06:02,000
with the views and the verifier will

199
00:06:02,000 --> 00:06:05,440
check for correctness and consistency

200
00:06:05,440 --> 00:06:06,560
good so how are we going to use this

201
00:06:06,560 --> 00:06:08,560
approach to get set membership um for

202
00:06:08,560 --> 00:06:09,759
the next couple of slides we've got the

203
00:06:09,759 --> 00:06:11,360
dividing line this dividing line

204
00:06:11,360 --> 00:06:13,039
everything that happens below it is

205
00:06:13,039 --> 00:06:14,479
going to be during pre-processing and

206
00:06:14,479 --> 00:06:15,600
everything above it is going to be

207
00:06:15,600 --> 00:06:17,520
happening during the online phase of the

208
00:06:17,520 --> 00:06:19,199
emulated mpc

209
00:06:19,199 --> 00:06:20,720
so because the pre-processing is going

210
00:06:20,720 --> 00:06:22,240
to be validated using a cut and choose

211
00:06:22,240 --> 00:06:23,680
approach note that everything that

212
00:06:23,680 --> 00:06:25,520
happens there has to be privacy free it

213
00:06:25,520 --> 00:06:28,160
cannot in any way depend on the witness

214
00:06:28,160 --> 00:06:30,319
um so one kind of natural way you might

215
00:06:30,319 --> 00:06:32,080
want to try to use a pre-processing

216
00:06:32,080 --> 00:06:33,919
phase as an additional in addition to

217
00:06:33,919 --> 00:06:35,440
pre-processing for efficiency in the

218
00:06:35,440 --> 00:06:37,360
online mpc we're also going to create

219
00:06:37,360 --> 00:06:39,120
secret shares of all of the publicly

220
00:06:39,120 --> 00:06:42,000
known values x1 through xl

221
00:06:42,000 --> 00:06:44,000
then during the online phase we're going

222
00:06:44,000 --> 00:06:46,000
to take one of those secret shed values

223
00:06:46,000 --> 00:06:48,080
reconstruct it to get x alpha and then

224
00:06:48,080 --> 00:06:50,960
evaluate the relation circuit on x alpha

225
00:06:50,960 --> 00:06:52,880
um this is basically what we're going to

226
00:06:52,880 --> 00:06:54,960
be doing in this work but this straw man

227
00:06:54,960 --> 00:06:56,400
approach doesn't quite get where we need

228
00:06:56,400 --> 00:06:58,000
to go in particular you'll notice that

229
00:06:58,000 --> 00:06:59,840
this is in no way zero knowledge right

230
00:06:59,840 --> 00:07:01,199
because although all the values have

231
00:07:01,199 --> 00:07:03,360
been secret shared um the verifier can

232
00:07:03,360 --> 00:07:05,440
just check the index of the secret share

233
00:07:05,440 --> 00:07:07,120
that's used by the parties and they'll

234
00:07:07,120 --> 00:07:09,360
be able to figure out what alpha is so

235
00:07:09,360 --> 00:07:10,720
we need to do a little bit more more

236
00:07:10,720 --> 00:07:13,440
work in order to get zero knowledge

237
00:07:13,440 --> 00:07:14,560
in order to do this what we're going to

238
00:07:14,560 --> 00:07:16,000
do is something very intuitive we're

239
00:07:16,000 --> 00:07:17,120
going to take these secret shares and

240
00:07:17,120 --> 00:07:18,319
we're going to shuffle them during

241
00:07:18,319 --> 00:07:20,800
pre-processing note that the elements x1

242
00:07:20,800 --> 00:07:22,720
through xl are all publicly known and

243
00:07:22,720 --> 00:07:24,800
the shuffle is going to be verifiable

244
00:07:24,800 --> 00:07:26,319
during cut and choose that is to say the

245
00:07:26,319 --> 00:07:28,000
verifier can check that it represents an

246
00:07:28,000 --> 00:07:30,240
honest shuffle of those elements but

247
00:07:30,240 --> 00:07:31,759
during the actual pre-processing that

248
00:07:31,759 --> 00:07:33,280
are going to be used during the online

249
00:07:33,280 --> 00:07:35,840
phase the shuffle will not be known

250
00:07:35,840 --> 00:07:37,280
so this works this gives us zero

251
00:07:37,280 --> 00:07:38,560
knowledge this gets us most of the way

252
00:07:38,560 --> 00:07:40,160
where we want to go the problem is that

253
00:07:40,160 --> 00:07:42,319
this is not a communication efficient

254
00:07:42,319 --> 00:07:44,000
when instantiated inside of an mpc

255
00:07:44,000 --> 00:07:45,680
protocol in particular because the

256
00:07:45,680 --> 00:07:47,680
sending the list of x1 through xl even

257
00:07:47,680 --> 00:07:50,479
when shuffled is still linear in l um

258
00:07:50,479 --> 00:07:51,599
just the number of secret shares that

259
00:07:51,599 --> 00:07:53,120
each party needs to have is linear and l

260
00:07:53,120 --> 00:07:54,720
and so this ends up being not

261
00:07:54,720 --> 00:07:57,199
communication efficient

262
00:07:57,199 --> 00:07:59,280
um so we need to do a little bit more

263
00:07:59,280 --> 00:08:00,400
work in order to get communication

264
00:08:00,400 --> 00:08:02,240
efficiency the idea here is we're just

265
00:08:02,240 --> 00:08:03,680
going to do a slightly fancier version

266
00:08:03,680 --> 00:08:05,520
of the pre-processing that's really all

267
00:08:05,520 --> 00:08:07,599
about the same core intuition um what

268
00:08:07,599 --> 00:08:08,800
we're going to have uh what we're going

269
00:08:08,800 --> 00:08:10,240
to have happen is the pre-process the

270
00:08:10,240 --> 00:08:12,160
the coordinator is going to generate a

271
00:08:12,160 --> 00:08:14,479
secret sharing of a random value r is

272
00:08:14,479 --> 00:08:16,560
going to use this value to mask all of

273
00:08:16,560 --> 00:08:18,319
the uh known values at public known

274
00:08:18,319 --> 00:08:20,240
values x1 through xl these are then

275
00:08:20,240 --> 00:08:21,599
going to be shuffled and then

276
00:08:21,599 --> 00:08:23,840
accumulated into an accumulator you can

277
00:08:23,840 --> 00:08:25,440
think about this as a merkle tree i'll

278
00:08:25,440 --> 00:08:26,720
use notation as notes in oracle tree

279
00:08:26,720 --> 00:08:28,479
although in principle it uses with other

280
00:08:28,479 --> 00:08:29,759
it works just fine with other

281
00:08:29,759 --> 00:08:31,919
accumulators as well

282
00:08:31,919 --> 00:08:34,240
during the online phase of the mpc

283
00:08:34,240 --> 00:08:36,080
we're going to use some of the outputs

284
00:08:36,080 --> 00:08:38,399
of this accumulation process as public

285
00:08:38,399 --> 00:08:41,279
inputs to the mpc that is to say this

286
00:08:41,279 --> 00:08:43,440
value r plus x alpha is going to use as

287
00:08:43,440 --> 00:08:44,959
a public input

288
00:08:44,959 --> 00:08:46,959
additionally what can happen is we can

289
00:08:46,959 --> 00:08:48,880
check to make sure that this r plus x

290
00:08:48,880 --> 00:08:50,240
alpha really did come from the

291
00:08:50,240 --> 00:08:52,399
preprocessing and we can do that check

292
00:08:52,399 --> 00:08:54,320
without having to use any of the mpc in

293
00:08:54,320 --> 00:08:55,360
the head techniques can happen

294
00:08:55,360 --> 00:08:57,120
completely in parallel um so we're going

295
00:08:57,120 --> 00:09:00,080
to give a root a path and r plus x alpha

296
00:09:00,080 --> 00:09:02,880
and verify that these correspond to uh

297
00:09:02,880 --> 00:09:05,440
the pre-processing that uh that happened

298
00:09:05,440 --> 00:09:06,560
during this run

299
00:09:06,560 --> 00:09:08,240
um importantly r plus x alpha is

300
00:09:08,240 --> 00:09:10,080
distributed independently of x alpha and

301
00:09:10,080 --> 00:09:12,640
so it does not reveal anything about the

302
00:09:12,640 --> 00:09:15,120
value of alpha

303
00:09:15,120 --> 00:09:16,880
in the actual emulated npc what will

304
00:09:16,880 --> 00:09:18,640
happen is we'll take the public input r

305
00:09:18,640 --> 00:09:21,120
plus x alpha as well as the secret mask

306
00:09:21,120 --> 00:09:24,000
r and we'll re use the mask to recover

307
00:09:24,000 --> 00:09:25,839
the actual value x alpha and we can then

308
00:09:25,839 --> 00:09:27,279
feed the secret value of x alpha into

309
00:09:27,279 --> 00:09:29,519
the relation circuit and get the output

310
00:09:29,519 --> 00:09:31,279
one

311
00:09:31,279 --> 00:09:33,600
this is uh the the high level approach

312
00:09:33,600 --> 00:09:35,519
that we use our template for making this

313
00:09:35,519 --> 00:09:37,040
work and you'll notice that the big idea

314
00:09:37,040 --> 00:09:38,720
here is that we've taken the merkle tree

315
00:09:38,720 --> 00:09:40,720
verification and moved it outside of the

316
00:09:40,720 --> 00:09:42,560
circuit and importantly this gives us

317
00:09:42,560 --> 00:09:44,320
logarithmic communication complexity

318
00:09:44,320 --> 00:09:46,320
right because the only thing r plus x

319
00:09:46,320 --> 00:09:48,240
alpha and root are both constant size

320
00:09:48,240 --> 00:09:51,279
but path here is logarithmic in l

321
00:09:51,279 --> 00:09:52,800
so to see how this works out let's look

322
00:09:52,800 --> 00:09:54,080
at music-based post-quantum ring

323
00:09:54,080 --> 00:09:55,120
signatures from symmetric key

324
00:09:55,120 --> 00:09:57,440
assumptions uh these are a primitive

325
00:09:57,440 --> 00:09:59,279
that have been known and used in the

326
00:09:59,279 --> 00:10:01,200
last couple of years and are represented

327
00:10:01,200 --> 00:10:03,920
in the nist pqc competition that just

328
00:10:03,920 --> 00:10:05,279
finished

329
00:10:05,279 --> 00:10:07,920
um in order to get a uh

330
00:10:07,920 --> 00:10:09,600
basically it's a zero knowledge proof

331
00:10:09,600 --> 00:10:11,120
and that the prover shows that they have

332
00:10:11,120 --> 00:10:13,519
a secret key such that the prf evaluated

333
00:10:13,519 --> 00:10:15,200
with that secret key at the point zero

334
00:10:15,200 --> 00:10:17,040
equals some known public key in order to

335
00:10:17,040 --> 00:10:18,560
bind the message m into the zero

336
00:10:18,560 --> 00:10:20,000
knowledge proof it's put into the fiat

337
00:10:20,000 --> 00:10:22,320
chamier during flattening in order to

338
00:10:22,320 --> 00:10:24,000
get a ring signature version of this uh

339
00:10:24,000 --> 00:10:26,160
kkw just showed that you could add a set

340
00:10:26,160 --> 00:10:28,480
membership um into the zero knowledge

341
00:10:28,480 --> 00:10:29,920
statement

342
00:10:29,920 --> 00:10:32,240
in order to realize this ring signature

343
00:10:32,240 --> 00:10:34,160
uh what they did is that they used the

344
00:10:34,160 --> 00:10:36,079
exact merkle tree authentication trick

345
00:10:36,079 --> 00:10:38,160
that we had shown before um and in

346
00:10:38,160 --> 00:10:39,519
practice you can see from their results

347
00:10:39,519 --> 00:10:41,040
that the size of the number of gates

348
00:10:41,040 --> 00:10:42,800
that are added from this authentication

349
00:10:42,800 --> 00:10:44,560
check significantly significantly

350
00:10:44,560 --> 00:10:46,399
dominates the size of the circuit um and

351
00:10:46,399 --> 00:10:49,440
in general it's log l times uh the size

352
00:10:49,440 --> 00:10:52,160
of a low mc circuit uh where mc is omc

353
00:10:52,160 --> 00:10:55,040
is used as a prf

354
00:10:55,279 --> 00:10:57,200
in our implementation what we do is use

355
00:10:57,200 --> 00:10:59,200
the same framework that we had before so

356
00:10:59,200 --> 00:11:00,880
during pre-processing what will happen

357
00:11:00,880 --> 00:11:03,519
is this random mask r is applied to all

358
00:11:03,519 --> 00:11:05,440
of the public keys these public keys are

359
00:11:05,440 --> 00:11:07,279
shuffled accumulated and then the

360
00:11:07,279 --> 00:11:09,200
approver the signers

361
00:11:09,200 --> 00:11:12,000
actual pk is pulled out and uses public

362
00:11:12,000 --> 00:11:14,240
input in this mass form to the mpc in

363
00:11:14,240 --> 00:11:16,880
the head it's then unmasked uh low mc is

364
00:11:16,880 --> 00:11:19,760
run on uh the prover secret key and the

365
00:11:19,760 --> 00:11:22,160
point zero um this results in some

366
00:11:22,160 --> 00:11:24,399
potential public key and we check for

367
00:11:24,399 --> 00:11:26,160
equality between pk alpha and the output

368
00:11:26,160 --> 00:11:28,240
of low mc in order to finish out the

369
00:11:28,240 --> 00:11:29,680
circuit

370
00:11:29,680 --> 00:11:31,680
we find that this produces very very

371
00:11:31,680 --> 00:11:34,079
small uh symmetric key

372
00:11:34,079 --> 00:11:35,920
signatures um because they're symmetric

373
00:11:35,920 --> 00:11:37,760
key they're possibly post quantum we

374
00:11:37,760 --> 00:11:39,760
find that our signatures are about

375
00:11:39,760 --> 00:11:42,000
one-fifth to one-eighth the size of kkws

376
00:11:42,000 --> 00:11:43,920
depending on the exact size of the

377
00:11:43,920 --> 00:11:46,160
circuit that you are interested in uh we

378
00:11:46,160 --> 00:11:47,680
can also compare our work to other

379
00:11:47,680 --> 00:11:49,040
lattice-based post-quantum ring

380
00:11:49,040 --> 00:11:51,519
signatures um at the time we initially

381
00:11:51,519 --> 00:11:53,600
uh submitted our work ours represented

382
00:11:53,600 --> 00:11:54,959
the smallest post-quantum magnet

383
00:11:54,959 --> 00:11:57,440
signatures even comparing against um

384
00:11:57,440 --> 00:11:59,360
lattice-based constructions but in the

385
00:11:59,360 --> 00:12:01,839
last year or so a lattice-based uh

386
00:12:01,839 --> 00:12:02,959
construction have gotten smaller and

387
00:12:02,959 --> 00:12:04,880
smaller and now are smaller than our

388
00:12:04,880 --> 00:12:06,720
constructions

389
00:12:06,720 --> 00:12:07,839
um there's several things that i didn't

390
00:12:07,839 --> 00:12:09,839
have time to talk about today in my talk

391
00:12:09,839 --> 00:12:12,240
we show how to uh give a how to

392
00:12:12,240 --> 00:12:14,160
integrate our approaches in a non-black

393
00:12:14,160 --> 00:12:16,079
box way to specific mpc in the head

394
00:12:16,079 --> 00:12:17,839
protocols to get even better efficiency

395
00:12:17,839 --> 00:12:19,600
instead of having a very generic

396
00:12:19,600 --> 00:12:22,079
approach and we also get this very super

397
00:12:22,079 --> 00:12:24,079
super simple very efficient post quantum

398
00:12:24,079 --> 00:12:26,240
ring ct construction um that's really

399
00:12:26,240 --> 00:12:28,160
really intuitive the high level idea

400
00:12:28,160 --> 00:12:29,839
there um is that once you get zero

401
00:12:29,839 --> 00:12:31,680
knowledge i can support set membership

402
00:12:31,680 --> 00:12:34,000
easily most of the difficult problems in

403
00:12:34,000 --> 00:12:36,959
ring ct just immediately disappear

404
00:12:36,959 --> 00:12:38,079
and with that i'd like to thank you for

405
00:12:38,079 --> 00:12:41,239
your attention

