1
00:00:04,240 --> 00:00:06,799
hello everyone my name is min yu yang

2
00:00:06,799 --> 00:00:09,120
i'm a phd candidate at george mason

3
00:00:09,120 --> 00:00:11,679
university today i'm very happy to

4
00:00:11,679 --> 00:00:13,840
present our paper epsom delta

5
00:00:13,840 --> 00:00:15,440
indistinguishable mixing for

6
00:00:15,440 --> 00:00:17,119
cryptocurrencies

7
00:00:17,119 --> 00:00:19,520
this paper is a joint work with iona

8
00:00:19,520 --> 00:00:22,000
current tidal who is also a phd

9
00:00:22,000 --> 00:00:24,480
candidate at george mason university as

10
00:00:24,480 --> 00:00:26,800
well as for cleaning protestants and at

11
00:00:26,800 --> 00:00:29,279
dolph gardens at george mason university

12
00:00:29,279 --> 00:00:33,519
mayan warrior at boston university

13
00:00:34,559 --> 00:00:36,399
there are unlimited issues of

14
00:00:36,399 --> 00:00:39,040
cryptocurrency is well known for a long

15
00:00:39,040 --> 00:00:40,000
time

16
00:00:40,000 --> 00:00:42,559
many classical implementations like

17
00:00:42,559 --> 00:00:45,520
bitcoin it's only sudo anonymous and the

18
00:00:45,520 --> 00:00:48,079
transactions are quite linkable

19
00:00:48,079 --> 00:00:50,480
in particular addresses belong to the

20
00:00:50,480 --> 00:00:53,520
same user can be distinguished

21
00:00:53,520 --> 00:00:56,079
and even re-identified by analyzing the

22
00:00:56,079 --> 00:00:58,079
transaction pattern with the right

23
00:00:58,079 --> 00:01:01,520
auxiliary information

24
00:01:01,680 --> 00:01:04,080
to tackle such issues there are many

25
00:01:04,080 --> 00:01:07,040
efforts on breaking the linkage among

26
00:01:07,040 --> 00:01:08,799
the addresses

27
00:01:08,799 --> 00:01:11,439
one classical idea is to use a mixing

28
00:01:11,439 --> 00:01:12,799
mechanism

29
00:01:12,799 --> 00:01:15,920
specifically multiple users each have

30
00:01:15,920 --> 00:01:18,080
their cons stored in a potentially

31
00:01:18,080 --> 00:01:21,200
identified edges mix their cons together

32
00:01:21,200 --> 00:01:23,600
and deposit them into newly generated

33
00:01:23,600 --> 00:01:24,880
addresses

34
00:01:24,880 --> 00:01:27,920
in the end an anonymity set its form

35
00:01:27,920 --> 00:01:30,880
among the participants

36
00:01:30,880 --> 00:01:34,159
clearly the larger the elon music set

37
00:01:34,159 --> 00:01:36,880
the better the privacy each participant

38
00:01:36,880 --> 00:01:38,320
enjoys

39
00:01:38,320 --> 00:01:40,880
such missing mechanism can can be

40
00:01:40,880 --> 00:01:43,680
implemented with an untrust third party

41
00:01:43,680 --> 00:01:46,640
or relies on decentralized techniques

42
00:01:46,640 --> 00:01:49,680
one example for bitcoin is conjunct

43
00:01:49,680 --> 00:01:52,000
which allows transaction with multiple

44
00:01:52,000 --> 00:01:54,960
inputs and outputs however the

45
00:01:54,960 --> 00:01:56,880
measurement size of a transaction that

46
00:01:56,880 --> 00:01:59,119
can fit into a single block limit the

47
00:01:59,119 --> 00:02:03,759
maximum size of the limited set

48
00:02:04,479 --> 00:02:07,119
there are also standalone cryptocurrency

49
00:02:07,119 --> 00:02:10,000
with built-in privacy guarantee and two

50
00:02:10,000 --> 00:02:11,760
of the most successful

51
00:02:11,760 --> 00:02:14,720
successful ones on the market are monero

52
00:02:14,720 --> 00:02:16,319
and zcash

53
00:02:16,319 --> 00:02:19,040
mongero transaction use screen signature

54
00:02:19,040 --> 00:02:21,280
to hide the real inputs of the

55
00:02:21,280 --> 00:02:23,920
transactions among a small numbers of

56
00:02:23,920 --> 00:02:25,920
other addresses

57
00:02:25,920 --> 00:02:28,640
for mongero there is also a limit on how

58
00:02:28,640 --> 00:02:31,840
much address you can roll in by default

59
00:02:31,840 --> 00:02:34,640
each transaction only have 10 mixing and

60
00:02:34,640 --> 00:02:36,959
the computation cost is lineal to the

61
00:02:36,959 --> 00:02:39,120
number of mixing

62
00:02:39,120 --> 00:02:41,760
on the other hand z-cash relies on

63
00:02:41,760 --> 00:02:43,840
zero-knowledge proof for its qd

64
00:02:43,840 --> 00:02:46,400
transactions to completely hide the

65
00:02:46,400 --> 00:02:49,440
input and output of a transaction

66
00:02:49,440 --> 00:02:51,519
while this gives the strongest possible

67
00:02:51,519 --> 00:02:53,920
privacy the current implementation

68
00:02:53,920 --> 00:02:56,959
requires trust set out and it is less

69
00:02:56,959 --> 00:03:00,319
efficient without it

70
00:03:01,200 --> 00:03:04,239
as a result our goal of this paper is to

71
00:03:04,239 --> 00:03:06,480
build a solution that offer formal

72
00:03:06,480 --> 00:03:08,959
privacy guarantee and security under

73
00:03:08,959 --> 00:03:10,560
composability

74
00:03:10,560 --> 00:03:12,800
and it should accommodate very large

75
00:03:12,800 --> 00:03:15,680
anonymity sets for example and greater

76
00:03:15,680 --> 00:03:17,360
than one thousand

77
00:03:17,360 --> 00:03:19,920
ideally the solution should not require

78
00:03:19,920 --> 00:03:22,319
trust standard or any untrust third

79
00:03:22,319 --> 00:03:23,519
party

80
00:03:23,519 --> 00:03:25,680
and last but not the least it should

81
00:03:25,680 --> 00:03:28,000
have sublinear computational cost per

82
00:03:28,000 --> 00:03:29,840
party so that it

83
00:03:29,840 --> 00:03:33,000
is scalable

84
00:03:34,159 --> 00:03:37,040
how do we do that we do that by allowing

85
00:03:37,040 --> 00:03:40,400
some controlled leakage

86
00:03:41,200 --> 00:03:43,760
to achieve our goal we start by using a

87
00:03:43,760 --> 00:03:45,840
green signature based

88
00:03:45,840 --> 00:03:49,280
to create a link instead of small size

89
00:03:49,280 --> 00:03:51,519
consider the example of three user

90
00:03:51,519 --> 00:03:53,040
mixing on the right

91
00:03:53,040 --> 00:03:56,239
each user owns a potentially identified

92
00:03:56,239 --> 00:03:58,959
input address at the top layer and lead

93
00:03:58,959 --> 00:04:01,280
to transfer their value to a freshly

94
00:04:01,280 --> 00:04:04,720
generated output address at bottom layer

95
00:04:04,720 --> 00:04:08,560
to obfuscate each user additionally rope

96
00:04:08,560 --> 00:04:11,760
in the other input address as mixing

97
00:04:11,760 --> 00:04:14,239
thus hiding the real splendor of this

98
00:04:14,239 --> 00:04:16,798
transaction

99
00:04:17,759 --> 00:04:20,720
however naively extending this to end

100
00:04:20,720 --> 00:04:23,600
size along limited set is costly as the

101
00:04:23,600 --> 00:04:26,880
computation cost the party is linear to

102
00:04:26,880 --> 00:04:31,440
the number of mixing in each transaction

103
00:04:32,240 --> 00:04:34,560
instead to achieve a large or long

104
00:04:34,560 --> 00:04:37,360
limited set we use spotify level to

105
00:04:37,360 --> 00:04:39,520
augment the smaller one we just

106
00:04:39,520 --> 00:04:42,520
introduced

107
00:04:42,560 --> 00:04:44,960
this is a two area a size butterfly

108
00:04:44,960 --> 00:04:46,000
network

109
00:04:46,000 --> 00:04:48,639
a size refers to the a nodes in any

110
00:04:48,639 --> 00:04:51,199
layer two areas means that for every

111
00:04:51,199 --> 00:04:53,680
node is settled in the bottom layer it

112
00:04:53,680 --> 00:04:55,840
collects to two nodes in the layer

113
00:04:55,840 --> 00:04:57,919
immediately below it

114
00:04:57,919 --> 00:05:00,479
and this collection can be decided from

115
00:05:00,479 --> 00:05:02,880
drawing the repetitive

116
00:05:02,880 --> 00:05:06,000
butterfly patterns

117
00:05:06,080 --> 00:05:08,320
when we use the butterfly network the

118
00:05:08,320 --> 00:05:10,720
top layer nodes correspond to the input

119
00:05:10,720 --> 00:05:13,280
edges of the mixing users and the bottom

120
00:05:13,280 --> 00:05:14,479
layer nodes

121
00:05:14,479 --> 00:05:16,160
correspond to their

122
00:05:16,160 --> 00:05:19,039
newly generated output addresses

123
00:05:19,039 --> 00:05:21,919
note that between any input node and any

124
00:05:21,919 --> 00:05:26,479
alpha node there is a unique path

125
00:05:27,360 --> 00:05:29,840
now let's consider an even simpler full

126
00:05:29,840 --> 00:05:32,400
size spotify network and see how we use

127
00:05:32,400 --> 00:05:34,720
it for four party mixing

128
00:05:34,720 --> 00:05:38,080
in this case user 1 and 4 we like to pay

129
00:05:38,080 --> 00:05:41,039
directly to the new address we know y 2

130
00:05:41,039 --> 00:05:43,120
and 3 basically swap their helpful

131
00:05:43,120 --> 00:05:44,800
position

132
00:05:44,800 --> 00:05:47,280
to transfer one's values from its input

133
00:05:47,280 --> 00:05:50,080
address to its output edges each user

134
00:05:50,080 --> 00:05:52,400
follows strictly the path defined by the

135
00:05:52,400 --> 00:05:55,160
underlying but by network while creating

136
00:05:55,160 --> 00:05:58,240
additional addresses in the intermediate

137
00:05:58,240 --> 00:06:01,199
layers to forward their values

138
00:06:01,199 --> 00:06:03,199
clearly there could be collision of

139
00:06:03,199 --> 00:06:05,840
paths so we are using buckets instead of

140
00:06:05,840 --> 00:06:07,759
nodes for the junctions in the

141
00:06:07,759 --> 00:06:10,800
intermediate layers

142
00:06:11,919 --> 00:06:14,160
currently the transaction graph is

143
00:06:14,160 --> 00:06:17,039
clearly long plywood and our first step

144
00:06:17,039 --> 00:06:19,440
is to make address residing in the same

145
00:06:19,440 --> 00:06:21,919
bucket indistinguishable

146
00:06:21,919 --> 00:06:24,560
to achieve this we use green signature

147
00:06:24,560 --> 00:06:26,720
base transaction to create small

148
00:06:26,720 --> 00:06:28,639
allowability sets

149
00:06:28,639 --> 00:06:30,720
specifically we make sure that all

150
00:06:30,720 --> 00:06:33,120
transactions that goes in and out of the

151
00:06:33,120 --> 00:06:36,160
same bucket includes the other collected

152
00:06:36,160 --> 00:06:39,759
input x mixing

153
00:06:39,840 --> 00:06:42,720
in the end the edges in each bucket

154
00:06:42,720 --> 00:06:45,919
became indistinguishable from each other

155
00:06:45,919 --> 00:06:48,800
the remaining leakage can be captured as

156
00:06:48,800 --> 00:06:51,759
the number of addresses within each

157
00:06:51,759 --> 00:06:54,960
intermediate bucket or simply the bucket

158
00:06:54,960 --> 00:06:56,560
loads

159
00:06:56,560 --> 00:06:58,720
note that this remaining leakage does

160
00:06:58,720 --> 00:07:01,199
tell something about the permutation for

161
00:07:01,199 --> 00:07:04,160
example if we instead use an identity

162
00:07:04,160 --> 00:07:06,960
permutation then the intermediate edges

163
00:07:06,960 --> 00:07:11,840
are evenly distributed amount of buckets

164
00:07:13,039 --> 00:07:16,240
to solve this final leakage we randomize

165
00:07:16,240 --> 00:07:18,639
the leakage by adding noise

166
00:07:18,639 --> 00:07:21,360
moreover to avoid excessive amount of

167
00:07:21,360 --> 00:07:24,080
noise we borrow the elegant idea from

168
00:07:24,080 --> 00:07:26,880
differential policy and we only require

169
00:07:26,880 --> 00:07:29,840
enough noise to obfuscate any pair of

170
00:07:29,840 --> 00:07:32,240
labor implementation rather than any

171
00:07:32,240 --> 00:07:35,440
arbitrary implementations

172
00:07:35,440 --> 00:07:38,560
formally we say that true permutation on

173
00:07:38,560 --> 00:07:40,800
our labor routes if they differ in a

174
00:07:40,800 --> 00:07:42,240
single smart

175
00:07:42,240 --> 00:07:45,199
intuitively by providing a perfusication

176
00:07:45,199 --> 00:07:47,840
for any pair of labor implementation we

177
00:07:47,840 --> 00:07:51,520
give any user alibis to come to clean

178
00:07:51,520 --> 00:07:54,400
any output edges as its own

179
00:07:54,400 --> 00:07:56,800
note that in the example we just have

180
00:07:56,800 --> 00:07:59,599
before a single swap of

181
00:07:59,599 --> 00:08:02,639
parties 3 and 32's output edges caused

182
00:08:02,639 --> 00:08:06,720
the intermediate bucket nodes to change

183
00:08:07,199 --> 00:08:09,280
to hide the difference of bucky nodes we

184
00:08:09,280 --> 00:08:11,360
sample a certain number of noisy

185
00:08:11,360 --> 00:08:13,199
addresses for each parties

186
00:08:13,199 --> 00:08:15,199
on the left we have the two intermediate

187
00:08:15,199 --> 00:08:17,199
button nodes corresponding to the

188
00:08:17,199 --> 00:08:18,800
previous example

189
00:08:18,800 --> 00:08:21,759
and on the right we add some number of

190
00:08:21,759 --> 00:08:24,080
noisy edges for the nodes corresponding

191
00:08:24,080 --> 00:08:27,360
to the first case and we enforce the

192
00:08:27,360 --> 00:08:29,840
same rule for all the noisy edges within

193
00:08:29,840 --> 00:08:32,559
the buckets on roping in mixing so that

194
00:08:32,559 --> 00:08:34,719
they are indistinguishable with the real

195
00:08:34,719 --> 00:08:37,279
address we also use the confidential

196
00:08:37,279 --> 00:08:40,159
transaction to hide the transferred

197
00:08:40,159 --> 00:08:43,120
value as the transactions involve noisy

198
00:08:43,120 --> 00:08:46,240
edges should contain zero value

199
00:08:46,240 --> 00:08:47,279
now

200
00:08:47,279 --> 00:08:51,760
the uh since these are just noisy nodes

201
00:08:51,760 --> 00:08:52,560
then

202
00:08:52,560 --> 00:08:54,800
this particular wheel is a possible

203
00:08:54,800 --> 00:08:58,800
leakage for both communication

204
00:08:58,800 --> 00:09:01,279
formally we show that our mechanism

205
00:09:01,279 --> 00:09:03,680
achieve epsilon delta in distinguishable

206
00:09:03,680 --> 00:09:07,839
mixing which requires that for any labor

207
00:09:07,839 --> 00:09:10,720
the distribution of their leakage should

208
00:09:10,720 --> 00:09:12,480
be closed and bounded by a

209
00:09:12,480 --> 00:09:14,800
multiplicative factor of e to the

210
00:09:14,800 --> 00:09:17,839
epsilon and an addictive factor of delta

211
00:09:17,839 --> 00:09:19,440
similar to the definition of

212
00:09:19,440 --> 00:09:21,680
differential privacy

213
00:09:21,680 --> 00:09:24,160
practice the noise in each party can be

214
00:09:24,160 --> 00:09:25,760
sampled from likely binomial

215
00:09:25,760 --> 00:09:28,880
distribution which allow us to evenly

216
00:09:28,880 --> 00:09:31,760
divide the noise sampling responsibility

217
00:09:31,760 --> 00:09:36,120
to each user in the protocol

218
00:09:37,200 --> 00:09:40,480
we give a synthetic our analysis of our

219
00:09:40,480 --> 00:09:43,120
protocol using butterfly lab work with

220
00:09:43,120 --> 00:09:45,600
different areas and compare them to the

221
00:09:45,600 --> 00:09:48,080
live case of creating and size on a

222
00:09:48,080 --> 00:09:51,040
limited set with ring signatures

223
00:09:51,040 --> 00:09:53,200
compared to the linear computation

224
00:09:53,200 --> 00:09:56,240
course in the life case our protocol

225
00:09:56,240 --> 00:09:58,480
requires square root of n when the

226
00:09:58,480 --> 00:10:00,720
square root of n every butterfly level

227
00:10:00,720 --> 00:10:03,040
is used and if we

228
00:10:03,040 --> 00:10:05,760
use two every butterfly network we can

229
00:10:05,760 --> 00:10:08,079
further reduce e to log to the power of

230
00:10:08,079 --> 00:10:09,600
3n

231
00:10:09,600 --> 00:10:11,760
but for the values of n that we are

232
00:10:11,760 --> 00:10:14,399
interested in uh square root of n every

233
00:10:14,399 --> 00:10:16,480
but by network it's actually more

234
00:10:16,480 --> 00:10:18,160
practical

235
00:10:18,160 --> 00:10:20,560
therefore we cannot experiment measuring

236
00:10:20,560 --> 00:10:22,399
the computational cost of foreign

237
00:10:22,399 --> 00:10:24,480
signatures with different privacy

238
00:10:24,480 --> 00:10:25,680
parameters

239
00:10:25,680 --> 00:10:27,279
clearly the better the privacy

240
00:10:27,279 --> 00:10:29,600
parameters are the costly the

241
00:10:29,600 --> 00:10:32,000
computation is as we need to add more

242
00:10:32,000 --> 00:10:34,320
noise

243
00:10:34,959 --> 00:10:37,680
for conclusion uh our protocol have the

244
00:10:37,680 --> 00:10:39,279
following strengths

245
00:10:39,279 --> 00:10:41,920
first our computation cards

246
00:10:41,920 --> 00:10:43,760
our computation type per party for

247
00:10:43,760 --> 00:10:47,120
empathy mixing is all polylog and

248
00:10:47,120 --> 00:10:50,399
we offer small to a smooth tolerance of

249
00:10:50,399 --> 00:10:54,079
fail store adversary if a party abort is

250
00:10:54,079 --> 00:10:56,399
slightly reduced to privacy but the

251
00:10:56,399 --> 00:10:58,560
protocol can continue without any

252
00:10:58,560 --> 00:11:01,680
specific action we do not require any

253
00:11:01,680 --> 00:11:03,839
transdata and our construction is

254
00:11:03,839 --> 00:11:05,680
usually secure

255
00:11:05,680 --> 00:11:08,320
for weeklies we do not provide full

256
00:11:08,320 --> 00:11:10,800
anonymity but rather bound the leakage

257
00:11:10,800 --> 00:11:13,040
using the definition of epsilon delta

258
00:11:13,040 --> 00:11:14,959
indistinguishable missing

259
00:11:14,959 --> 00:11:17,279
as with all missing protocols we can

260
00:11:17,279 --> 00:11:21,200
only mix address of online parties

261
00:11:21,200 --> 00:11:23,680
and that's all for the presentation and

262
00:11:23,680 --> 00:11:29,160
i'm very happy to answer any questions

