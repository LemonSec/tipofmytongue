1
00:00:00,160 --> 00:00:02,000
hello i'm albert you from purdue

2
00:00:02,000 --> 00:00:04,400
university today i'll be presenting our

3
00:00:04,400 --> 00:00:06,720
work with don hang lou anna kakate and

4
00:00:06,720 --> 00:00:09,840
jamanta k maji titled polymath low

5
00:00:09,840 --> 00:00:12,480
latency npc via secure polynomial

6
00:00:12,480 --> 00:00:15,440
evaluations and its applications

7
00:00:15,440 --> 00:00:17,440
with the rise of many data processing

8
00:00:17,440 --> 00:00:19,600
applications such as machine learning

9
00:00:19,600 --> 00:00:21,119
algorithms like decision tree

10
00:00:21,119 --> 00:00:22,480
evaluations

11
00:00:22,480 --> 00:00:24,640
the problem of data privacy began

12
00:00:24,640 --> 00:00:27,359
getting more and more attention as well

13
00:00:27,359 --> 00:00:29,679
how can we protect the privacy of user

14
00:00:29,679 --> 00:00:30,480
data

15
00:00:30,480 --> 00:00:32,640
while still being able to perform useful

16
00:00:32,640 --> 00:00:34,640
computations on them

17
00:00:34,640 --> 00:00:36,559
one way this can be done is through

18
00:00:36,559 --> 00:00:38,960
secure multi-party computation also

19
00:00:38,960 --> 00:00:40,960
known as npc

20
00:00:40,960 --> 00:00:43,040
by representing these functions as

21
00:00:43,040 --> 00:00:45,680
either boolean or arithmetic circuits

22
00:00:45,680 --> 00:00:48,480
npc offer a way to securely evaluate

23
00:00:48,480 --> 00:00:50,640
these circuits without revealing any

24
00:00:50,640 --> 00:00:52,800
additional information on the user's

25
00:00:52,800 --> 00:00:54,640
private inputs

26
00:00:54,640 --> 00:00:57,039
there are many different npc protocols

27
00:00:57,039 --> 00:00:59,199
and frameworks such as yao's garbo

28
00:00:59,199 --> 00:01:02,079
circuit speeds by dengar at all and

29
00:01:02,079 --> 00:01:05,438
honey badger npc by lou at all

30
00:01:05,438 --> 00:01:07,439
one way this is done is through the use

31
00:01:07,439 --> 00:01:09,200
of secret sharing schemes

32
00:01:09,200 --> 00:01:11,280
in a secret sharing scheme

33
00:01:11,280 --> 00:01:14,159
a party with the secret x can generate

34
00:01:14,159 --> 00:01:17,040
several secret shares of x typically

35
00:01:17,040 --> 00:01:19,280
represented with square brackets and

36
00:01:19,280 --> 00:01:21,600
subscript when representing to specific

37
00:01:21,600 --> 00:01:23,119
shares

38
00:01:23,119 --> 00:01:25,439
then distribute these secret shares to

39
00:01:25,439 --> 00:01:27,200
various parties

40
00:01:27,200 --> 00:01:28,320
such that

41
00:01:28,320 --> 00:01:30,600
when the parties come together they can

42
00:01:30,600 --> 00:01:33,119
collaboratively use their shares to

43
00:01:33,119 --> 00:01:35,600
reconstruct the original secret

44
00:01:35,600 --> 00:01:37,680
but learn no additional information on

45
00:01:37,680 --> 00:01:40,240
the original secret otherwise

46
00:01:40,240 --> 00:01:42,320
one simple example of a secret sharing

47
00:01:42,320 --> 00:01:44,159
scheme is the additive secret sharing

48
00:01:44,159 --> 00:01:46,799
scheme depicted here where the secret

49
00:01:46,799 --> 00:01:50,960
shares add up to the original secret

50
00:01:51,200 --> 00:01:53,360
a special type of secret sharing scheme

51
00:01:53,360 --> 00:01:55,840
is called linear secret sharing scheme

52
00:01:55,840 --> 00:01:57,920
what makes linear secret sharing schemes

53
00:01:57,920 --> 00:02:00,159
especially desirable is that linear

54
00:02:00,159 --> 00:02:02,240
operations can be done locally and

55
00:02:02,240 --> 00:02:04,000
without any communication between

56
00:02:04,000 --> 00:02:05,280
parties

57
00:02:05,280 --> 00:02:07,920
for example to add up to secret shared

58
00:02:07,920 --> 00:02:09,679
values x and y

59
00:02:09,679 --> 00:02:12,480
each party simply need to locally add up

60
00:02:12,480 --> 00:02:15,120
their shares of x with their shares of y

61
00:02:15,120 --> 00:02:18,400
to obtain their shares of x plus y

62
00:02:18,400 --> 00:02:21,840
similarly to multiply a public value a

63
00:02:21,840 --> 00:02:24,319
with the secret share value x depicted

64
00:02:24,319 --> 00:02:25,920
in this presentation using blue

65
00:02:25,920 --> 00:02:27,520
asterisks

66
00:02:27,520 --> 00:02:29,760
each party simply need to locally

67
00:02:29,760 --> 00:02:32,160
multiply the public value with their

68
00:02:32,160 --> 00:02:33,840
shares

69
00:02:33,840 --> 00:02:36,319
all that remains is to multiply two

70
00:02:36,319 --> 00:02:39,040
secret shared values this is typically

71
00:02:39,040 --> 00:02:41,280
done using beaver multiplication or

72
00:02:41,280 --> 00:02:43,360
beaver triples

73
00:02:43,360 --> 00:02:45,599
in order to multiply two secret shared

74
00:02:45,599 --> 00:02:48,000
values the parties will utilize

75
00:02:48,000 --> 00:02:50,800
precomputed secret shares of a random

76
00:02:50,800 --> 00:02:51,920
value a

77
00:02:51,920 --> 00:02:54,000
shares of a random value b

78
00:02:54,000 --> 00:02:57,200
as well as shares of a b

79
00:02:57,200 --> 00:03:00,560
by computing x minus a and y minus b

80
00:03:00,560 --> 00:03:02,959
then opening or reconstructing those

81
00:03:02,959 --> 00:03:06,239
values the parties can obtain the secret

82
00:03:06,239 --> 00:03:09,200
share of product x y

83
00:03:09,200 --> 00:03:11,360
using that formula

84
00:03:11,360 --> 00:03:13,519
shown above

85
00:03:13,519 --> 00:03:15,680
note that these multiplications between

86
00:03:15,680 --> 00:03:17,280
two secret shared values will be

87
00:03:17,280 --> 00:03:20,239
represented using red asterisks

88
00:03:20,239 --> 00:03:22,720
this can be done in one round

89
00:03:22,720 --> 00:03:24,720
as opening a value requires

90
00:03:24,720 --> 00:03:26,879
communication between parties

91
00:03:26,879 --> 00:03:29,680
although we are opening two values since

92
00:03:29,680 --> 00:03:31,680
they do not depend on each other and can

93
00:03:31,680 --> 00:03:34,319
be done in parallel they belong in the

94
00:03:34,319 --> 00:03:36,799
same round

95
00:03:36,799 --> 00:03:39,200
mohasso and zheng also generalize the

96
00:03:39,200 --> 00:03:41,680
beaver multiplication technique into the

97
00:03:41,680 --> 00:03:43,360
realm of matrices

98
00:03:43,360 --> 00:03:45,440
instead of performing operations on each

99
00:03:45,440 --> 00:03:47,599
element individually they directly

100
00:03:47,599 --> 00:03:50,480
generate beaver triple like matrices

101
00:03:50,480 --> 00:03:55,760
that being random matrix a b and a b

102
00:03:55,760 --> 00:03:57,680
this allows them to directly perform

103
00:03:57,680 --> 00:04:01,840
multiplication between two matrices

104
00:04:02,640 --> 00:04:05,200
while these generic npcs are now

105
00:04:05,200 --> 00:04:07,680
complete as we have demonstrated how to

106
00:04:07,680 --> 00:04:10,640
evaluate a arithmetic circuit securely

107
00:04:10,640 --> 00:04:13,519
they often have prohibitively high costs

108
00:04:13,519 --> 00:04:16,000
on the other hand application specific

109
00:04:16,000 --> 00:04:19,120
npcs may be too narrow

110
00:04:19,120 --> 00:04:21,918
ideally what we want to do is identify

111
00:04:21,918 --> 00:04:23,919
common building blocks prevalent

112
00:04:23,919 --> 00:04:26,560
throughout many nbc applications and

113
00:04:26,560 --> 00:04:30,000
develop efficient versions of them

114
00:04:30,000 --> 00:04:32,479
with the current advance in computing

115
00:04:32,479 --> 00:04:34,000
technology

116
00:04:34,000 --> 00:04:36,400
npc applications are often bottlenecked

117
00:04:36,400 --> 00:04:38,400
on the round complexity

118
00:04:38,400 --> 00:04:39,600
therefore

119
00:04:39,600 --> 00:04:40,800
ideally

120
00:04:40,800 --> 00:04:43,040
we want to optimize the round complexity

121
00:04:43,040 --> 00:04:45,360
of these protocols

122
00:04:45,360 --> 00:04:47,280
that brings us to our contribution

123
00:04:47,280 --> 00:04:48,800
polymath

124
00:04:48,800 --> 00:04:51,360
the first part of polymath concerns

125
00:04:51,360 --> 00:04:54,840
evaluation of polynomials on

126
00:04:54,840 --> 00:04:57,919
integers in first protocol we developed

127
00:04:57,919 --> 00:05:00,720
generalizes beaver multiplication into

128
00:05:00,720 --> 00:05:03,440
product of three secret shared values

129
00:05:03,440 --> 00:05:05,680
to do this we utilized

130
00:05:05,680 --> 00:05:10,080
pre-generated shares of a random a b c

131
00:05:10,080 --> 00:05:13,520
and shares of a b c

132
00:05:14,160 --> 00:05:16,960
then you by using technique similar to b

133
00:05:16,960 --> 00:05:19,280
verbal multiplication

134
00:05:19,280 --> 00:05:22,560
it can achieve the product of x y z in

135
00:05:22,560 --> 00:05:25,280
one round whereas a direct application

136
00:05:25,280 --> 00:05:27,759
of beaver multiplication would have to

137
00:05:27,759 --> 00:05:30,000
be done sequentially and result in two

138
00:05:30,000 --> 00:05:32,000
rounds

139
00:05:32,000 --> 00:05:34,400
however what we soon realized is that

140
00:05:34,400 --> 00:05:37,520
this technique does not scale

141
00:05:37,520 --> 00:05:39,759
beyond three variables

142
00:05:39,759 --> 00:05:41,520
therefore we developed a separate

143
00:05:41,520 --> 00:05:44,479
protocol for evaluating a multivariate

144
00:05:44,479 --> 00:05:46,479
polynomial term

145
00:05:46,479 --> 00:05:48,240
in this setting

146
00:05:48,240 --> 00:05:51,360
our input are n secret shared values x1

147
00:05:51,360 --> 00:05:52,479
to xn

148
00:05:52,479 --> 00:05:57,600
as well as n public exponents e1 to en

149
00:05:57,600 --> 00:06:00,160
and the desired output is the secret

150
00:06:00,160 --> 00:06:04,400
share of x1 to the e1 times x2 to e2

151
00:06:04,400 --> 00:06:07,039
all the way to xn to the en

152
00:06:07,039 --> 00:06:08,319
to do this

153
00:06:08,319 --> 00:06:11,039
we pre-generate secret shares of n

154
00:06:11,039 --> 00:06:12,880
random values

155
00:06:12,880 --> 00:06:15,360
as well as secret shares of

156
00:06:15,360 --> 00:06:17,680
their inverses raised to the respective

157
00:06:17,680 --> 00:06:19,199
eis

158
00:06:19,199 --> 00:06:22,080
in the first step we multiply each x i

159
00:06:22,080 --> 00:06:23,840
with ri

160
00:06:23,840 --> 00:06:26,639
then we open those values

161
00:06:26,639 --> 00:06:29,600
by opening these values it allows us to

162
00:06:29,600 --> 00:06:32,000
perform some of the heavier computations

163
00:06:32,000 --> 00:06:34,240
such as raising to the power of eis as

164
00:06:34,240 --> 00:06:36,880
well as multiplying them all together in

165
00:06:36,880 --> 00:06:39,919
the clear and require no communication

166
00:06:39,919 --> 00:06:42,160
between parties

167
00:06:42,160 --> 00:06:43,360
finally

168
00:06:43,360 --> 00:06:45,759
i need to multiply by the secret share

169
00:06:45,759 --> 00:06:46,720
of

170
00:06:46,720 --> 00:06:49,039
the product of all the rs inverses in

171
00:06:49,039 --> 00:06:51,039
order to remove all the random values

172
00:06:51,039 --> 00:06:53,599
and obtain our final product

173
00:06:53,599 --> 00:06:55,919
this is how this allows us to perform

174
00:06:55,919 --> 00:06:58,960
this in two rounds instead of

175
00:06:58,960 --> 00:07:02,000
big o of log e plus log n mount

176
00:07:02,000 --> 00:07:04,160
note that this is especially significant

177
00:07:04,160 --> 00:07:06,479
because two is constant

178
00:07:06,479 --> 00:07:08,639
and independent of the actual values of

179
00:07:08,639 --> 00:07:12,000
n or the e i's

180
00:07:12,400 --> 00:07:16,000
a second part of polymath consists of

181
00:07:16,000 --> 00:07:18,000
protocols related to the polynomial

182
00:07:18,000 --> 00:07:20,160
evaluations of matrices

183
00:07:20,160 --> 00:07:22,639
first protocol developed by bar e and m

184
00:07:22,639 --> 00:07:24,160
beaver

185
00:07:24,160 --> 00:07:26,319
is used to multiply an arbitrary number

186
00:07:26,319 --> 00:07:28,240
of matrices

187
00:07:28,240 --> 00:07:31,759
inputs are n secret shared matrices

188
00:07:31,759 --> 00:07:34,240
x1 through xn and the output is the

189
00:07:34,240 --> 00:07:36,319
secret sure of the product of all these

190
00:07:36,319 --> 00:07:37,520
matrices

191
00:07:37,520 --> 00:07:39,759
to do this

192
00:07:39,759 --> 00:07:43,120
we pre-compute secret shares of n plus 1

193
00:07:43,120 --> 00:07:46,080
random matrices r 0 through r n as well

194
00:07:46,080 --> 00:07:48,319
as their inverses

195
00:07:48,319 --> 00:07:50,080
in the first step

196
00:07:50,080 --> 00:07:52,879
we compute the secret share of r i minus

197
00:07:52,879 --> 00:07:56,840
1 x i r i inverse and open all of these

198
00:07:56,840 --> 00:07:59,759
values when we multiply these values

199
00:07:59,759 --> 00:08:02,720
together we can see that the ri through

200
00:08:02,720 --> 00:08:06,240
rn minus 1 in the middle telescopes and

201
00:08:06,240 --> 00:08:08,240
cancels each other out

202
00:08:08,240 --> 00:08:10,720
finally we have to multiply by r0

203
00:08:10,720 --> 00:08:12,800
inverse from the left and r n inverse

204
00:08:12,800 --> 00:08:14,639
from the right to cancel out the last

205
00:08:14,639 --> 00:08:16,639
remaining random matrices

206
00:08:16,639 --> 00:08:19,440
to obtain our final product

207
00:08:19,440 --> 00:08:21,360
this can be done in four round instead

208
00:08:21,360 --> 00:08:24,080
of log n rounds

209
00:08:24,080 --> 00:08:26,720
what we then did is optimize the above

210
00:08:26,720 --> 00:08:29,440
protocol for the special case of

211
00:08:29,440 --> 00:08:32,000
computing powers of a square matrix

212
00:08:32,000 --> 00:08:33,440
instead of using

213
00:08:33,440 --> 00:08:36,159
n plus one random matrices we only use

214
00:08:36,159 --> 00:08:40,640
one random matrix r and its inverse

215
00:08:40,640 --> 00:08:41,679
and

216
00:08:41,679 --> 00:08:44,480
by following a similar protocol as the

217
00:08:44,480 --> 00:08:45,760
previous one

218
00:08:45,760 --> 00:08:48,080
we can quickly and efficiently calculate

219
00:08:48,080 --> 00:08:50,160
the powers of a square matrix

220
00:08:50,160 --> 00:08:52,240
done in four rounds instead of log e

221
00:08:52,240 --> 00:08:54,800
round

222
00:08:54,800 --> 00:08:57,839
to demonstrate our protocols

223
00:08:57,839 --> 00:08:59,680
we picked a couple applications and

224
00:08:59,680 --> 00:09:01,440
benchmarked them

225
00:09:01,440 --> 00:09:03,600
the application we've chosen is privacy

226
00:09:03,600 --> 00:09:06,800
preserving decision tree evaluation

227
00:09:06,800 --> 00:09:09,680
geochemistry at all presented a way to

228
00:09:09,680 --> 00:09:12,320
reduce decision tree evaluation

229
00:09:12,320 --> 00:09:15,360
to comparison and polynomial evaluation

230
00:09:15,360 --> 00:09:17,760
we first assign each non-leaf node with

231
00:09:17,760 --> 00:09:19,920
a variable x i

232
00:09:19,920 --> 00:09:21,680
then each leaf node would be a

233
00:09:21,680 --> 00:09:24,720
polynomial with terms in the form of x i

234
00:09:24,720 --> 00:09:28,240
minus 1 or x i plus 1.

235
00:09:28,240 --> 00:09:30,800
if the leaf node took a left branch at

236
00:09:30,800 --> 00:09:33,120
non-leaf node x i then it will have a

237
00:09:33,120 --> 00:09:36,959
term x i minus 1.

238
00:09:36,959 --> 00:09:38,800
if it took the right branch it will have

239
00:09:38,800 --> 00:09:41,760
x i plus one

240
00:09:42,480 --> 00:09:44,640
then when we want to evaluate the

241
00:09:44,640 --> 00:09:47,600
decision tree we would assign

242
00:09:47,600 --> 00:09:49,519
the variable x i

243
00:09:49,519 --> 00:09:51,839
with negative one if the left branch is

244
00:09:51,839 --> 00:09:54,720
chosen and give it plus one if the right

245
00:09:54,720 --> 00:09:56,240
branch is chosen

246
00:09:56,240 --> 00:09:58,959
what this does is it allows all the one

247
00:09:58,959 --> 00:10:02,720
polynomial to evaluate to zero

248
00:10:02,720 --> 00:10:04,399
and specific example

249
00:10:04,399 --> 00:10:06,640
suppose that the left branch is chosen a

250
00:10:06,640 --> 00:10:09,519
non-leaf node x1 the right branch is

251
00:10:09,519 --> 00:10:12,079
chosen at x2 and x3

252
00:10:12,079 --> 00:10:14,320
what we can see is that all of the red

253
00:10:14,320 --> 00:10:15,440
terms

254
00:10:15,440 --> 00:10:18,160
will evaluate to zero and only the blue

255
00:10:18,160 --> 00:10:20,640
polynomial will evaluate to a nonzero

256
00:10:20,640 --> 00:10:23,600
value identifying it as the correct leaf

257
00:10:23,600 --> 00:10:25,120
node

258
00:10:25,120 --> 00:10:27,519
once we have this way

259
00:10:27,519 --> 00:10:29,760
of reducing a decision tree evaluation

260
00:10:29,760 --> 00:10:32,880
to comparison and polynomial evaluation

261
00:10:32,880 --> 00:10:35,279
we can use our protocol to perform the

262
00:10:35,279 --> 00:10:38,000
polynomial evaluation securely as well

263
00:10:38,000 --> 00:10:41,279
as use a secure comparison protocol to

264
00:10:41,279 --> 00:10:42,480
do the

265
00:10:42,480 --> 00:10:44,839
non-leaf node comparisons

266
00:10:44,839 --> 00:10:48,079
securely we implemented this onto the

267
00:10:48,079 --> 00:10:51,040
honey badger npc framework and ran it

268
00:10:51,040 --> 00:10:53,440
for the nursery data set and obtained

269
00:10:53,440 --> 00:10:55,519
some benchmarking numbers

270
00:10:55,519 --> 00:10:57,680
how we discovered is that the time for

271
00:10:57,680 --> 00:11:00,399
polynomial evaluation is extremely fast

272
00:11:00,399 --> 00:11:02,480
and typically only take up around 10

273
00:11:02,480 --> 00:11:05,519
percent of the total time

274
00:11:05,519 --> 00:11:07,839
in conclusion

275
00:11:07,839 --> 00:11:10,880
mpc or secure multi-party computation

276
00:11:10,880 --> 00:11:13,120
helps to achieve privacy in various

277
00:11:13,120 --> 00:11:14,480
applications

278
00:11:14,480 --> 00:11:16,959
while generic protocols exist we want to

279
00:11:16,959 --> 00:11:19,680
optimize some common building blocks to

280
00:11:19,680 --> 00:11:21,839
that end we present protocols for

281
00:11:21,839 --> 00:11:24,399
polynomials and polynomials of matrices

282
00:11:24,399 --> 00:11:26,320
that optimize the communication round

283
00:11:26,320 --> 00:11:27,680
complexities

284
00:11:27,680 --> 00:11:30,920
thank you

