1
00:00:00,640 --> 00:00:02,720
hi everyone i'm james holland and today

2
00:00:02,720 --> 00:00:04,560
i'll be presenting our work on a new

3
00:00:04,560 --> 00:00:06,000
website fingerprinting defense called

4
00:00:06,000 --> 00:00:08,000
regulator this work was done alongside

5
00:00:08,000 --> 00:00:09,920
my advisor professor nicholas hopper and

6
00:00:09,920 --> 00:00:12,799
at the university of minnesota

7
00:00:12,799 --> 00:00:14,480
to provide a short summary tor is a

8
00:00:14,480 --> 00:00:16,640
popular low latency anonymity network

9
00:00:16,640 --> 00:00:18,320
that protects the privacy of its users

10
00:00:18,320 --> 00:00:20,320
internet browsing habits it does this by

11
00:00:20,320 --> 00:00:21,600
encrypting traffic while routing it

12
00:00:21,600 --> 00:00:23,439
through a circuit of three volunteer run

13
00:00:23,439 --> 00:00:25,199
nodes preventing any single node from

14
00:00:25,199 --> 00:00:26,480
knowing both the origin and the

15
00:00:26,480 --> 00:00:28,240
destination of the traffic

16
00:00:28,240 --> 00:00:30,080
the encryption strategy known as onion

17
00:00:30,080 --> 00:00:32,000
routing is characterized by a message

18
00:00:32,000 --> 00:00:33,680
encapsulated by multiple layers of

19
00:00:33,680 --> 00:00:36,079
encryption each successive tor relay

20
00:00:36,079 --> 00:00:37,600
strips a layer of encryption from the

21
00:00:37,600 --> 00:00:39,040
traffic and routes it to the revealed

22
00:00:39,040 --> 00:00:40,000
address

23
00:00:40,000 --> 00:00:41,600
then for example if an attacker is

24
00:00:41,600 --> 00:00:43,200
capturing traffic between the user and

25
00:00:43,200 --> 00:00:44,879
the guard node the attacker will be

26
00:00:44,879 --> 00:00:46,480
unable to determine the destination of

27
00:00:46,480 --> 00:00:48,959
the traffic

28
00:00:49,039 --> 00:00:50,879
in the last decade tor's user base has

29
00:00:50,879 --> 00:00:52,800
increased to millions of daily users

30
00:00:52,800 --> 00:00:54,640
over the same period a series of papers

31
00:00:54,640 --> 00:00:56,239
have shown that tor is vulnerable to a

32
00:00:56,239 --> 00:00:57,920
type of traffic analysis called website

33
00:00:57,920 --> 00:00:59,520
fingerprinting this attack is

34
00:00:59,520 --> 00:01:01,120
characterized by a passive local

35
00:01:01,120 --> 00:01:03,039
adversary who eavesdrops on encrypted

36
00:01:03,039 --> 00:01:04,959
traffic to determine which web pages a

37
00:01:04,959 --> 00:01:07,280
client is visiting this adversary can be

38
00:01:07,280 --> 00:01:08,799
anyone with access to traffic between

39
00:01:08,799 --> 00:01:10,799
the clients and guard including the

40
00:01:10,799 --> 00:01:13,119
guard itself the attacker typically uses

41
00:01:13,119 --> 00:01:14,880
patterns and traffic metadata including

42
00:01:14,880 --> 00:01:16,960
packet timing the sequence of upload and

43
00:01:16,960 --> 00:01:20,960
download packets and the traffic volume

44
00:01:21,600 --> 00:01:23,280
more specifically an attacker can run

45
00:01:23,280 --> 00:01:24,720
web crawls to create a database of

46
00:01:24,720 --> 00:01:26,960
associated website traffic pairs early

47
00:01:26,960 --> 00:01:28,560
approaches used custom features and

48
00:01:28,560 --> 00:01:30,000
machine learning techniques like

49
00:01:30,000 --> 00:01:31,680
k-nearest neighbors and support vector

50
00:01:31,680 --> 00:01:34,079
machines to create predictive models

51
00:01:34,079 --> 00:01:36,240
these models typically input capture

52
00:01:36,240 --> 00:01:38,000
traffic metadata and output a website

53
00:01:38,000 --> 00:01:40,400
prediction or early attacks struggled to

54
00:01:40,400 --> 00:01:41,520
reach the required degree of

55
00:01:41,520 --> 00:01:43,759
effectiveness for real-world use more

56
00:01:43,759 --> 00:01:45,360
recent techniques have leveraged large

57
00:01:45,360 --> 00:01:46,960
data sets and convolutional neural

58
00:01:46,960 --> 00:01:48,720
networks to significantly increase

59
00:01:48,720 --> 00:01:50,640
attack accuracy making the website

60
00:01:50,640 --> 00:01:54,759
fingerprinting attack more threatening

61
00:01:54,799 --> 00:01:56,320
in response a variety of website

62
00:01:56,320 --> 00:01:57,520
fingerprinting defenses have been

63
00:01:57,520 --> 00:01:59,600
developed defenses typically operate by

64
00:01:59,600 --> 00:02:01,600
delaying traffic and by inserting dummy

65
00:02:01,600 --> 00:02:03,759
traffic however previous defenses have

66
00:02:03,759 --> 00:02:05,360
generally been defeated by existing

67
00:02:05,360 --> 00:02:07,520
attacks incur high bandwidth and latency

68
00:02:07,520 --> 00:02:09,119
costs or require additional

69
00:02:09,119 --> 00:02:10,560
infrastructure

70
00:02:10,560 --> 00:02:12,640
regularizing defenses like tamara or

71
00:02:12,640 --> 00:02:14,560
dynaflow tend to be the most effective

72
00:02:14,560 --> 00:02:16,400
as they make the traffic associated with

73
00:02:16,400 --> 00:02:18,560
many different web pages look alike thus

74
00:02:18,560 --> 00:02:20,720
preventing accurate classification they

75
00:02:20,720 --> 00:02:22,400
operate by buffering traffic and sending

76
00:02:22,400 --> 00:02:24,720
it at a preset rate if no rail traffic

77
00:02:24,720 --> 00:02:26,319
is available then dummy traffic is sent

78
00:02:26,319 --> 00:02:28,640
instead however real traffic often

79
00:02:28,640 --> 00:02:30,640
doesn't match the set rate as a result

80
00:02:30,640 --> 00:02:32,319
excessive bandwidth and latency overhead

81
00:02:32,319 --> 00:02:34,400
has often occurred however one can

82
00:02:34,400 --> 00:02:36,000
regularize traffic without relying on

83
00:02:36,000 --> 00:02:38,160
constant right approaches to demonstrate

84
00:02:38,160 --> 00:02:39,599
i'll first present characteristics of

85
00:02:39,599 --> 00:02:41,040
real-world traffic that allow for

86
00:02:41,040 --> 00:02:44,560
effective but efficient defense

87
00:02:44,720 --> 00:02:46,000
first of all rail traffic is

88
00:02:46,000 --> 00:02:47,519
particularly bursty in the sense that

89
00:02:47,519 --> 00:02:48,959
much of the volume is sent in quick

90
00:02:48,959 --> 00:02:50,959
bursts with long and irregular gaps

91
00:02:50,959 --> 00:02:52,800
between the bursts several different

92
00:02:52,800 --> 00:02:54,400
example traces are given in the figure

93
00:02:54,400 --> 00:02:56,400
on the left as you can see much of the

94
00:02:56,400 --> 00:02:58,560
webpage is downloaded quickly though

95
00:02:58,560 --> 00:03:00,800
sometimes the page load may have a long

96
00:03:00,800 --> 00:03:02,000
tail

97
00:03:02,000 --> 00:03:03,680
in fact in the deep fingerprinting data

98
00:03:03,680 --> 00:03:05,760
set presented by suriname at all we find

99
00:03:05,760 --> 00:03:07,680
that the interquartile range on average

100
00:03:07,680 --> 00:03:09,840
of the traffic timing is about 4 seconds

101
00:03:09,840 --> 00:03:11,920
compared to a 28 second average loading

102
00:03:11,920 --> 00:03:12,959
time

103
00:03:12,959 --> 00:03:15,120
additionally surge patterns are fairly

104
00:03:15,120 --> 00:03:16,400
predictable in the sense that most of

105
00:03:16,400 --> 00:03:18,239
the traffic is sent soon after the web

106
00:03:18,239 --> 00:03:20,400
page download begins as shown in the

107
00:03:20,400 --> 00:03:22,480
middle figure in the same data set the

108
00:03:22,480 --> 00:03:25,120
median packet is sent just 7.5 seconds

109
00:03:25,120 --> 00:03:27,040
after the 10th packet

110
00:03:27,040 --> 00:03:29,760
lastly the upload packet timing imitates

111
00:03:29,760 --> 00:03:31,680
the download packet timing

112
00:03:31,680 --> 00:03:33,200
as shown in the right figure the upload

113
00:03:33,200 --> 00:03:35,680
setting rate is is heavily correlated

114
00:03:35,680 --> 00:03:37,200
with the download sending rate though at

115
00:03:37,200 --> 00:03:39,120
lower volumes this isn't particularly

116
00:03:39,120 --> 00:03:40,480
surprising given how web browsers

117
00:03:40,480 --> 00:03:42,000
request data which is then sent by the

118
00:03:42,000 --> 00:03:43,920
server in response but it is a useful

119
00:03:43,920 --> 00:03:47,839
property for the regulator defense

120
00:03:48,159 --> 00:03:49,760
so the intuition behind the regulator

121
00:03:49,760 --> 00:03:51,920
design is to regularize the download

122
00:03:51,920 --> 00:03:54,400
packet surges so that the sequence of

123
00:03:54,400 --> 00:03:55,439
packets and the packet timing

124
00:03:55,439 --> 00:03:57,680
information in the download leaks less

125
00:03:57,680 --> 00:03:58,959
information

126
00:03:58,959 --> 00:04:00,959
about the destination website

127
00:04:00,959 --> 00:04:02,159
and while at the same time sending

128
00:04:02,159 --> 00:04:04,159
upload traffic as a function of the

129
00:04:04,159 --> 00:04:05,200
download

130
00:04:05,200 --> 00:04:06,959
traffic this way the upload traffic

131
00:04:06,959 --> 00:04:08,480
leaks no more information about the

132
00:04:08,480 --> 00:04:10,000
website as well

133
00:04:10,000 --> 00:04:11,200
and

134
00:04:11,200 --> 00:04:13,120
the uh to set up the defense the client

135
00:04:13,120 --> 00:04:14,879
passed the upload packets and then the

136
00:04:14,879 --> 00:04:16,079
tor bridge or middle load pass the

137
00:04:16,079 --> 00:04:17,759
download packets and the download

138
00:04:17,759 --> 00:04:20,000
traffic is sent at initial search rate r

139
00:04:20,000 --> 00:04:22,479
and decay rate d so that rd the t

140
00:04:22,479 --> 00:04:24,000
packets are set at time t so in this

141
00:04:24,000 --> 00:04:25,600
case if the decay rate is 0.9 for

142
00:04:25,600 --> 00:04:27,120
example then the number pack packets

143
00:04:27,120 --> 00:04:30,080
sent at second seven is uh 0.9 the

144
00:04:30,080 --> 00:04:31,600
number of brackets

145
00:04:31,600 --> 00:04:32,960
second six

146
00:04:32,960 --> 00:04:35,360
um and then t is the number of seconds

147
00:04:35,360 --> 00:04:36,720
since the last surge so this is

148
00:04:36,720 --> 00:04:37,680
basically to make it so that at the

149
00:04:37,680 --> 00:04:39,199
beginning of a surge a large number of

150
00:04:39,199 --> 00:04:41,040
packets are sent but this sort of rate

151
00:04:41,040 --> 00:04:43,520
decays

152
00:04:44,000 --> 00:04:46,000
a few seconds after the surge

153
00:04:46,000 --> 00:04:47,280
and then if the number of delayed

154
00:04:47,280 --> 00:04:48,880
packets grows to a set multiple or

155
00:04:48,880 --> 00:04:51,120
capital t of the target rate then a a

156
00:04:51,120 --> 00:04:52,400
new surge is sent so this basically

157
00:04:52,400 --> 00:04:54,000
means that the number of packets already

158
00:04:54,000 --> 00:04:55,759
waiting in the buffer it has gotten

159
00:04:55,759 --> 00:04:57,759
large into the so the defense should

160
00:04:57,759 --> 00:04:59,280
send a new search packets to make it so

161
00:04:59,280 --> 00:05:01,440
the latency doesn't grow too high

162
00:05:01,440 --> 00:05:03,120
and then the padding budget is drawn

163
00:05:03,120 --> 00:05:05,680
from a uniform distribution zero to n

164
00:05:05,680 --> 00:05:07,360
this is partially to cap the amount of

165
00:05:07,360 --> 00:05:09,039
bandwidth that can be added

166
00:05:09,039 --> 00:05:11,520
and it's also to make it uh

167
00:05:11,520 --> 00:05:14,000
so that the amount of padding packets is

168
00:05:14,000 --> 00:05:16,160
somewhat random so that the the packet

169
00:05:16,160 --> 00:05:17,600
sequences associated with the given web

170
00:05:17,600 --> 00:05:18,479
page

171
00:05:18,479 --> 00:05:21,039
um or over the website are randomized

172
00:05:21,039 --> 00:05:22,080
somewhat making it harder for a

173
00:05:22,080 --> 00:05:24,960
classifier to uh classify them

174
00:05:24,960 --> 00:05:26,400
and the upload packets are sent as a

175
00:05:26,400 --> 00:05:28,080
fraction of the download packet rate

176
00:05:28,080 --> 00:05:30,080
just to make it so that the the real

177
00:05:30,080 --> 00:05:31,520
apple packets never have to wait very

178
00:05:31,520 --> 00:05:32,400
long

179
00:05:32,400 --> 00:05:34,000
to be sent

180
00:05:34,000 --> 00:05:35,840
while also making it so that the output

181
00:05:35,840 --> 00:05:37,840
packets are don't leak any further

182
00:05:37,840 --> 00:05:39,199
information because they're sent at this

183
00:05:39,199 --> 00:05:40,880
constant rate and the upload packets are

184
00:05:40,880 --> 00:05:43,919
also never delayed more than a certain

185
00:05:43,919 --> 00:05:46,080
like cap or c seconds

186
00:05:46,080 --> 00:05:46,880
um

187
00:05:46,880 --> 00:05:48,000
this is to make it so that the added

188
00:05:48,000 --> 00:05:51,880
latency doesn't grow too high

189
00:05:52,240 --> 00:05:53,600
of course there's still the difficulty

190
00:05:53,600 --> 00:05:55,440
finding the optimal parameters to use in

191
00:05:55,440 --> 00:05:57,199
this defense this is similar to the

192
00:05:57,199 --> 00:05:58,720
problem of hyper parameter optimization

193
00:05:58,720 --> 00:06:00,479
that's often found in machine learning

194
00:06:00,479 --> 00:06:02,639
uh and while um

195
00:06:02,639 --> 00:06:03,759
we could use something like random

196
00:06:03,759 --> 00:06:05,680
search or grid search we chose one of

197
00:06:05,680 --> 00:06:07,280
the bayesian methods tree structured

198
00:06:07,280 --> 00:06:09,280
parts and estimators which sort of

199
00:06:09,280 --> 00:06:11,759
explores possible combinations uh to

200
00:06:11,759 --> 00:06:13,360
find out which ones are high performing

201
00:06:13,360 --> 00:06:15,759
and then sort of further varies those to

202
00:06:15,759 --> 00:06:17,840
find better combinations

203
00:06:17,840 --> 00:06:19,360
now we end up picking two of these

204
00:06:19,360 --> 00:06:21,280
higher performing combinations

205
00:06:21,280 --> 00:06:23,120
that demonstrate different trade-offs

206
00:06:23,120 --> 00:06:24,880
between the overhead and the performance

207
00:06:24,880 --> 00:06:27,280
uh regulator heavy and regulator light

208
00:06:27,280 --> 00:06:28,560
with regulator heavy users more

209
00:06:28,560 --> 00:06:30,720
bandwidth uh and has slightly better

210
00:06:30,720 --> 00:06:33,120
latency

211
00:06:33,360 --> 00:06:35,759
but also uh has better defense

212
00:06:35,759 --> 00:06:37,600
effectiveness and regulator light which

213
00:06:37,600 --> 00:06:39,759
is somewhat less effective but uses a

214
00:06:39,759 --> 00:06:43,440
little less additional bandwidth

215
00:06:43,840 --> 00:06:45,120
and then here's an illustrator

216
00:06:45,120 --> 00:06:47,360
illustration of the regulator defense so

217
00:06:47,360 --> 00:06:48,880
you can see the undefended traffic there

218
00:06:48,880 --> 00:06:50,960
are a couple sort of large surges of

219
00:06:50,960 --> 00:06:52,720
download traffic that occurred around

220
00:06:52,720 --> 00:06:54,720
three and seven seconds in

221
00:06:54,720 --> 00:06:55,919
though in this case upload traffic is

222
00:06:55,919 --> 00:06:57,919
fairly constant

223
00:06:57,919 --> 00:06:59,520
then the defender traffic sends a fair

224
00:06:59,520 --> 00:07:01,199
amount of traffic early but then when

225
00:07:01,199 --> 00:07:02,880
these charges come in it delays some of

226
00:07:02,880 --> 00:07:05,599
those packets to form

227
00:07:05,599 --> 00:07:09,039
this this sort of curved pattern

228
00:07:09,039 --> 00:07:10,240
in that way

229
00:07:10,240 --> 00:07:12,080
if you use the same pattern in a lot of

230
00:07:12,080 --> 00:07:14,800
the different web websites then it

231
00:07:14,800 --> 00:07:16,240
becomes difficult to classify this

232
00:07:16,240 --> 00:07:17,280
traffic

233
00:07:17,280 --> 00:07:19,360
with its associated web page

234
00:07:19,360 --> 00:07:20,880
but at the same time it doesn't delay

235
00:07:20,880 --> 00:07:22,720
traffic very much or add too much

236
00:07:22,720 --> 00:07:25,520
additional brackets

237
00:07:26,639 --> 00:07:28,960
and then to evaluate regulator

238
00:07:28,960 --> 00:07:30,880
we uh simulate it

239
00:07:30,880 --> 00:07:32,479
on a few data sets primarily the data

240
00:07:32,479 --> 00:07:34,720
set provided by sternum at all for the

241
00:07:34,720 --> 00:07:37,360
deep fingerprinting work oh and then

242
00:07:37,360 --> 00:07:39,280
we uh compare regulator to other

243
00:07:39,280 --> 00:07:40,639
defenses in both the closed world and

244
00:07:40,639 --> 00:07:43,280
the open world settings and to provide a

245
00:07:43,280 --> 00:07:45,120
quick recap the uh

246
00:07:45,120 --> 00:07:46,879
close world setting is one

247
00:07:46,879 --> 00:07:48,560
where the attacker simply has to

248
00:07:48,560 --> 00:07:50,560
determine which of a number of set webs

249
00:07:50,560 --> 00:07:52,400
or set number of websites in this case

250
00:07:52,400 --> 00:07:54,560
95 the packet sequence or traces

251
00:07:54,560 --> 00:07:56,240
associated with

252
00:07:56,240 --> 00:07:57,840
um so this is basically just a

253
00:07:57,840 --> 00:07:59,520
straightforward classification problem

254
00:07:59,520 --> 00:08:01,280
and the other one's more realistic but

255
00:08:01,280 --> 00:08:02,800
someone harder whether it's a set of

256
00:08:02,800 --> 00:08:05,599
monitored or uh censored websites

257
00:08:05,599 --> 00:08:08,240
as well as a a set of websites that the

258
00:08:08,240 --> 00:08:09,919
attacker cannot train on in the open

259
00:08:09,919 --> 00:08:11,759
world and the attacker has to determine

260
00:08:11,759 --> 00:08:13,280
whether a certain uh new package

261
00:08:13,280 --> 00:08:15,520
sequence is uh

262
00:08:15,520 --> 00:08:17,039
or associated with website that's in the

263
00:08:17,039 --> 00:08:19,440
censored or monitored set or it belongs

264
00:08:19,440 --> 00:08:20,879
to a website that the the attacker has

265
00:08:20,879 --> 00:08:24,160
not seen before and and this is a fairly

266
00:08:24,160 --> 00:08:25,520
difficult setting but it's much more

267
00:08:25,520 --> 00:08:27,280
realistic

268
00:08:27,280 --> 00:08:29,440
and and then the data set

269
00:08:29,440 --> 00:08:31,199
we use here it has a thousand instances

270
00:08:31,199 --> 00:08:32,799
of each of the 95 monitor sites but

271
00:08:32,799 --> 00:08:35,679
about 41 000 web visits in the non-mun

272
00:08:35,679 --> 00:08:38,000
associated with non-monitored websites

273
00:08:38,000 --> 00:08:40,799
uh and then each defense is just uh

274
00:08:40,799 --> 00:08:43,200
simulated on the data set to produce a

275
00:08:43,200 --> 00:08:44,640
defended data set and we test the

276
00:08:44,640 --> 00:08:47,360
defense effectiveness by seeing uh how

277
00:08:47,360 --> 00:08:48,320
how

278
00:08:48,320 --> 00:08:50,880
far or how much it can lower the uh the

279
00:08:50,880 --> 00:08:53,360
website papering attack effectiveness

280
00:08:53,360 --> 00:08:56,160
on this data set

281
00:08:57,200 --> 00:08:59,519
so here are some of the uh the overhead

282
00:08:59,519 --> 00:09:02,160
and the closed world results

283
00:09:02,160 --> 00:09:04,240
as you can see the tamara

284
00:09:04,240 --> 00:09:07,519
overhead is very high

285
00:09:07,519 --> 00:09:09,120
at around thirty percent latency and

286
00:09:09,120 --> 00:09:12,080
it'll be 200 bandwidth with edition uh

287
00:09:12,080 --> 00:09:13,440
though of course it does very well in

288
00:09:13,440 --> 00:09:14,720
terms of defense effectiveness and it's

289
00:09:14,720 --> 00:09:16,880
mostly just used here as a sort of uh

290
00:09:16,880 --> 00:09:18,720
benchmark to see how good it was what's

291
00:09:18,720 --> 00:09:20,080
happening pretty defense could get

292
00:09:20,080 --> 00:09:22,480
wtfpat has moderate bandwidth

293
00:09:22,480 --> 00:09:23,760
but it's only really effective against

294
00:09:23,760 --> 00:09:25,279
qmol it's not not effective against the

295
00:09:25,279 --> 00:09:26,800
deep learning attacks

296
00:09:26,800 --> 00:09:28,160
uh front

297
00:09:28,160 --> 00:09:30,880
uh it has more moderate bandwidth

298
00:09:30,880 --> 00:09:32,399
although it's somewhat higher than wtf

299
00:09:32,399 --> 00:09:33,519
pad

300
00:09:33,519 --> 00:09:35,839
um it has some effectiveness against

301
00:09:35,839 --> 00:09:38,480
tick-tock and uh deep finger printing

302
00:09:38,480 --> 00:09:41,760
the two uh deep learning uh attacks

303
00:09:41,760 --> 00:09:44,399
and then regulator light has uh

304
00:09:44,399 --> 00:09:46,880
has some latency at 8.9 percent but

305
00:09:46,880 --> 00:09:49,440
fairly moderate bandwidth it does very

306
00:09:49,440 --> 00:09:50,959
well against tick-tock and d-finger

307
00:09:50,959 --> 00:09:52,640
printing getting tech talk down about 35

308
00:09:52,640 --> 00:09:54,480
percent and deep deep fingerprinting

309
00:09:54,480 --> 00:09:56,240
down to 23

310
00:09:56,240 --> 00:09:58,160
um and then regulator have you further

311
00:09:58,160 --> 00:10:00,880
sort of extends this lead though

312
00:10:00,880 --> 00:10:03,760
it has somewhat higher bandwidth

313
00:10:03,760 --> 00:10:07,279
it gets tick tock down to a 25

314
00:10:07,279 --> 00:10:08,959
accuracy and a deep

315
00:10:08,959 --> 00:10:12,880
fingerprinting down to about 20 accuracy

316
00:10:16,320 --> 00:10:18,160
so for the open world results we see

317
00:10:18,160 --> 00:10:20,880
something similar where uh and i guess

318
00:10:20,880 --> 00:10:21,920
to write a bit of background we use

319
00:10:21,920 --> 00:10:24,320
precision and recall here um because

320
00:10:24,320 --> 00:10:26,240
using accuracy isn't particularly useful

321
00:10:26,240 --> 00:10:28,959
due the base rate policy where you can

322
00:10:28,959 --> 00:10:30,720
have an attack that that appears to do

323
00:10:30,720 --> 00:10:32,079
well in the open world because it might

324
00:10:32,079 --> 00:10:34,079
have a fairly high accuracy percent but

325
00:10:34,079 --> 00:10:35,760
if the number of its false positives

326
00:10:35,760 --> 00:10:37,120
starts to actually drown out the number

327
00:10:37,120 --> 00:10:39,360
of uh the true positives which can

328
00:10:39,360 --> 00:10:40,560
happen when the monitor set is much

329
00:10:40,560 --> 00:10:43,440
smaller than the the unmonitored set um

330
00:10:43,440 --> 00:10:44,959
then then the attack with higher high

331
00:10:44,959 --> 00:10:46,160
accuracy might not actually be very

332
00:10:46,160 --> 00:10:49,839
useful so here we use the precision in a

333
00:10:49,839 --> 00:10:51,440
recall to

334
00:10:51,440 --> 00:10:53,760
compare the defenses

335
00:10:53,760 --> 00:10:55,200
and as you can see

336
00:10:55,200 --> 00:10:56,240
against both tick tock and deep

337
00:10:56,240 --> 00:10:57,440
fingerprinting

338
00:10:57,440 --> 00:11:00,399
regulator drive drives down the

339
00:11:00,399 --> 00:11:02,640
precision and recall curve a fair amount

340
00:11:02,640 --> 00:11:04,000
making it so that the attacker really

341
00:11:04,000 --> 00:11:05,839
has to choose between high precision and

342
00:11:05,839 --> 00:11:08,480
high recall and has a difficulty

343
00:11:08,480 --> 00:11:10,480
uh identifying many of the packet

344
00:11:10,480 --> 00:11:13,519
sequences uh very well

345
00:11:13,519 --> 00:11:15,360
without height really high false

346
00:11:15,360 --> 00:11:17,920
positive rate so in conclusion

347
00:11:17,920 --> 00:11:20,560
regulator provides an effective defense

348
00:11:20,560 --> 00:11:22,000
with similar similar or lessened

349
00:11:22,000 --> 00:11:24,160
overhead compared to other moderate uh

350
00:11:24,160 --> 00:11:26,240
overhead defenses

351
00:11:26,240 --> 00:11:28,079
regulator can be implemented in a fairly

352
00:11:28,079 --> 00:11:29,440
straightforward manner it doesn't

353
00:11:29,440 --> 00:11:31,360
require any additional

354
00:11:31,360 --> 00:11:33,360
infrastructure

355
00:11:33,360 --> 00:11:35,519
future work could include

356
00:11:35,519 --> 00:11:37,279
applying it to the setting where the

357
00:11:37,279 --> 00:11:38,640
user

358
00:11:38,640 --> 00:11:40,560
may visit multiple

359
00:11:40,560 --> 00:11:43,680
different web pages of the same website

360
00:11:43,680 --> 00:11:45,440
potentially making the packet sequence

361
00:11:45,440 --> 00:11:47,920
easier to identify if the data the data

362
00:11:47,920 --> 00:11:50,399
set includes multiple web pages

363
00:11:50,399 --> 00:11:52,959
of a certain domain

364
00:11:52,959 --> 00:11:55,040
and

365
00:11:55,040 --> 00:11:56,800
one could also look into how regulator

366
00:11:56,800 --> 00:11:58,079
could also provide effective defense

367
00:11:58,079 --> 00:11:59,760
against the flow correlation attack

368
00:11:59,760 --> 00:12:01,519
which is a different class of traffic

369
00:12:01,519 --> 00:12:04,880
analysis attack against tor

