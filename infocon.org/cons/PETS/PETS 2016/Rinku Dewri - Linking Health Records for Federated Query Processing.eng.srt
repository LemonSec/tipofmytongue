1
00:00:00,949 --> 00:00:07,048
good afternoon my name<font color="#CCCCCC"> is rinku Yuri I</font>

2
00:00:03,810 --> 00:00:11,160
am with<font color="#CCCCCC"> University of Denver and this</font>

3
00:00:07,049 --> 00:00:13,519
work was done in collaboration with torn

4
00:00:11,160 --> 00:00:16,980
on who is that the anschutz medical

5
00:00:13,519 --> 00:00:19,759
campus associated with the university of

6
00:00:16,980 --> 00:00:22,980
colorado denver and my colleague

7
00:00:19,760 --> 00:00:25,260
<font color="#E5E5E5">Ramakrishna</font><font color="#CCCCCC"> Tamela okay and I will talk</font>

8
00:00:22,980 --> 00:00:27,570
about linking health records so I'm

9
00:00:25,260 --> 00:00:32,399
<font color="#CCCCCC">going to dive into the</font><font color="#E5E5E5"> problem as to</font>

10
00:00:27,570 --> 00:00:36,690
what does it mean to link<font color="#E5E5E5"> let's the</font>

11
00:00:32,399 --> 00:00:39,090
databases in general<font color="#E5E5E5"> okay so in our case</font>

12
00:00:36,690 --> 00:00:42,750
the database it has a kind<font color="#E5E5E5"> of like a</font>

13
00:00:39,090 --> 00:00:45,239
table form which has records each record

14
00:00:42,750 --> 00:00:48,809
could be about one individual and then

15
00:00:45,239 --> 00:00:50,550
you have fields or attributes and the

16
00:00:48,809 --> 00:00:53,160
<font color="#E5E5E5">application scenario we were looking at</font>

17
00:00:50,550 --> 00:00:56,809
was these records where health records

18
00:00:53,160 --> 00:00:59,940
okay so attributes could be different

19
00:00:56,809 --> 00:01:03,059
related to the medical condition<font color="#E5E5E5"> of a</font>

20
00:00:59,940 --> 00:01:04,709
certain individual and part of the

21
00:01:03,059 --> 00:01:09,420
attributes would be demographic data

22
00:01:04,709 --> 00:01:11,280
name and identifies like<font color="#CCCCCC"> Social Security</font>

23
00:01:09,420 --> 00:01:15,659
numbers or address and so on<font color="#E5E5E5"> and so</font>

24
00:01:11,280 --> 00:01:19,020
forth so we have now two parties having

25
00:01:15,659 --> 00:01:21,150
to such databases or<font color="#CCCCCC"> two such health</font>

26
00:01:19,020 --> 00:01:24,539
databases and they are distributed<font color="#E5E5E5"> in</font>

27
00:01:21,150 --> 00:01:27,210
nature so there<font color="#E5E5E5"> are different locations</font>

28
00:01:24,540 --> 00:01:29,100
and often that<font color="#CCCCCC"> the case is that I do not</font>

29
00:01:27,210 --> 00:01:31,048
want to<font color="#E5E5E5"> disclose the rate of this again</font>

30
00:01:29,100 --> 00:01:33,929
due to<font color="#E5E5E5"> the sensitive nature of the data</font>

31
00:01:31,049 --> 00:01:38,060
contained in the databases<font color="#E5E5E5"> okay so the</font>

32
00:01:33,930 --> 00:01:41,840
idea behind linking is to then somehow

33
00:01:38,060 --> 00:01:45,180
figure out<font color="#E5E5E5"> if records in one database</font>

34
00:01:41,840 --> 00:01:47,880
and records in another base another

35
00:01:45,180 --> 00:01:50,070
database belong to the same individual

36
00:01:47,880 --> 00:01:55,619
<font color="#E5E5E5">okay so we could have overlap in the</font>

37
00:01:50,070 --> 00:01:57,960
databases if for instance in a regional

38
00:01:55,619 --> 00:01:59,759
setting there are multiple health

39
00:01:57,960 --> 00:02:01,350
providers and people often switch jobs

40
00:01:59,759 --> 00:02:03,060
moving from one health provider to

41
00:02:01,350 --> 00:02:04,500
another and so and so forth so there

42
00:02:03,060 --> 00:02:07,130
could be multiple instances of the same

43
00:02:04,500 --> 00:02:09,300
<font color="#E5E5E5">person to record that will</font>

44
00:02:07,130 --> 00:02:11,008
now the reason we want to do this is

45
00:02:09,300 --> 00:02:14,420
because we want<font color="#E5E5E5"> to facilitate what is</font>

46
00:02:11,008 --> 00:02:17,519
called federated<font color="#CCCCCC"> query</font><font color="#E5E5E5"> so you have a</font>

47
00:02:14,420 --> 00:02:20,670
query on a health database give me the

48
00:02:17,520 --> 00:02:24,950
number of<font color="#E5E5E5"> people with a certain glucose</font>

49
00:02:20,670 --> 00:02:28,829
level with certain heart condition<font color="#CCCCCC"> okay</font>

50
00:02:24,950 --> 00:02:30,570
first<font color="#E5E5E5"> of all both databases could</font>

51
00:02:28,830 --> 00:02:31,950
contain<font color="#CCCCCC"> an</font><font color="#E5E5E5"> information in which case you</font>

52
00:02:30,570 --> 00:02:36,420
want to assimilate the information

53
00:02:31,950 --> 00:02:39,480
collated and remove inaccuracies that

54
00:02:36,420 --> 00:02:41,640
can appear because of overlap second<font color="#CCCCCC"> may</font>

55
00:02:39,480 --> 00:02:44,700
<font color="#CCCCCC">be part of the data is in database a</font>

56
00:02:41,640 --> 00:02:47,488
part of the<font color="#E5E5E5"> raid data is in database be</font>

57
00:02:44,700 --> 00:02:49,709
so federated queries will allow us to<font color="#CCCCCC"> do</font>

58
00:02:47,489 --> 00:02:52,500
queries across attributes that appear in

59
00:02:49,709 --> 00:02:55,080
<font color="#E5E5E5">different databases</font><font color="#CCCCCC"> okay so that's the</font>

60
00:02:52,500 --> 00:02:59,130
whole idea behind creating such kind of

61
00:02:55,080 --> 00:03:02,010
a platform<font color="#E5E5E5"> and in Colorado Anschutz</font>

62
00:02:59,130 --> 00:03:03,630
medical campus they were working with

63
00:03:02,010 --> 00:03:05,220
this framework called safety net which

64
00:03:03,630 --> 00:03:10,200
basically tries to achieve things like

65
00:03:05,220 --> 00:03:11,880
this<font color="#E5E5E5"> okay okay so we will take this</font>

66
00:03:10,200 --> 00:03:13,798
particular problem description of

67
00:03:11,880 --> 00:03:16,620
databases linking and then see<font color="#CCCCCC"> how it</font>

68
00:03:13,799 --> 00:03:20,220
<font color="#E5E5E5">can be</font><font color="#CCCCCC"> done and the greedy matching way</font>

69
00:03:16,620 --> 00:03:23,610
to do it would be to take<font color="#E5E5E5"> a recording a</font>

70
00:03:20,220 --> 00:03:26,310
and compare it with every record in<font color="#E5E5E5"> B</font>

71
00:03:23,610 --> 00:03:30,410
and by comparing I mean come up with

72
00:03:26,310 --> 00:03:32,670
some kind of a score okay how what's the

73
00:03:30,410 --> 00:03:35,160
some kind of a<font color="#E5E5E5"> number that says okay</font>

74
00:03:32,670 --> 00:03:37,290
this record in a and this recording be

75
00:03:35,160 --> 00:03:42,120
actually belong to the same<font color="#CCCCCC"> person</font><font color="#E5E5E5"> okay</font>

76
00:03:37,290 --> 00:03:45,840
and that score itself is computed using

77
00:03:42,120 --> 00:03:48,390
some weighted sum of scores competed on

78
00:03:45,840 --> 00:03:50,220
the attributes themselves so if you're

79
00:03:48,390 --> 00:03:52,140
talking<font color="#E5E5E5"> about</font><font color="#CCCCCC"> one record in a</font><font color="#E5E5E5"> another</font>

80
00:03:50,220 --> 00:03:56,060
recording be you will also have the

81
00:03:52,140 --> 00:03:59,309
method to compute<font color="#E5E5E5"> the similarity between</font>

82
00:03:56,060 --> 00:04:01,920
an attribute in the records for example

83
00:03:59,310 --> 00:04:04,350
how to compare the name here and the

84
00:04:01,920 --> 00:04:05,910
name in another record again be so then

85
00:04:04,350 --> 00:04:09,750
the question is<font color="#CCCCCC"> okay we want to compute</font>

86
00:04:05,910 --> 00:04:11,579
that means scores for two strings how

87
00:04:09,750 --> 00:04:16,048
similar<font color="#E5E5E5"> two strings are that's where it</font>

88
00:04:11,579 --> 00:04:17,160
boils down to<font color="#E5E5E5"> okay now what are the</font>

89
00:04:16,048 --> 00:04:19,839
problems and there are different methods

90
00:04:17,160 --> 00:04:22,600
to do that so one is

91
00:04:19,839 --> 00:04:24,698
you have to take account of errors in

92
00:04:22,600 --> 00:04:27,280
the data because when data is input into

93
00:04:24,699 --> 00:04:29,380
the databases there will be errors so

94
00:04:27,280 --> 00:04:31,989
all of<font color="#E5E5E5"> these represent the same person</font>

95
00:04:29,380 --> 00:04:34,180
<font color="#E5E5E5">and so in the first case you missed a</font>

96
00:04:31,990 --> 00:04:37,330
letter<font color="#CCCCCC"> here is some transposition that</font>

97
00:04:34,180 --> 00:04:42,610
happened first name<font color="#E5E5E5"> last name has been</font>

98
00:04:37,330 --> 00:04:45,400
<font color="#CCCCCC">swap and key slip okay</font><font color="#E5E5E5"> mmm so but all of</font>

99
00:04:42,610 --> 00:04:48,220
both of<font color="#E5E5E5"> them in the in all of these</font>

100
00:04:45,400 --> 00:04:51,789
names<font color="#E5E5E5"> are about the same person so the</font>

101
00:04:48,220 --> 00:04:53,560
technique that is commonly used is to do

102
00:04:51,790 --> 00:04:56,710
by<font color="#E5E5E5"> Graham matching so what you do is you</font>

103
00:04:53,560 --> 00:05:00,400
break the string into by grams of every

104
00:04:56,710 --> 00:05:02,620
two subsequent characters and then do

105
00:05:00,400 --> 00:05:05,109
<font color="#CCCCCC">that on both sides you get a set of</font>

106
00:05:02,620 --> 00:05:07,419
diagrams on both sides and then you have

107
00:05:05,110 --> 00:05:10,000
some measure<font color="#E5E5E5"> or to figure out okay what</font>

108
00:05:07,419 --> 00:05:12,310
is the similarity between the two sets

109
00:05:10,000 --> 00:05:13,900
<font color="#E5E5E5">okay and one way to do that would be</font>

110
00:05:12,310 --> 00:05:16,660
<font color="#E5E5E5">something called dice coefficient which</font>

111
00:05:13,900 --> 00:05:18,250
looks at the intersection between<font color="#E5E5E5"> the</font>

112
00:05:16,660 --> 00:05:20,650
size of the<font color="#E5E5E5"> intersection</font><font color="#CCCCCC"> between the two</font>

113
00:05:18,250 --> 00:05:22,300
set and there is a formula involved it

114
00:05:20,650 --> 00:05:25,900
can compute different score other scores

115
00:05:22,300 --> 00:05:28,570
also so then what it means is the whole

116
00:05:25,900 --> 00:05:33,330
<font color="#E5E5E5">thing then boils down to finding out the</font>

117
00:05:28,570 --> 00:05:36,580
intersection size of the two sets<font color="#E5E5E5"> okay</font>

118
00:05:33,330 --> 00:05:38,770
which means that<font color="#E5E5E5"> we need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> able to</font>

119
00:05:36,580 --> 00:05:41,889
figure out<font color="#E5E5E5"> if two elements are equal or</font>

120
00:05:38,770 --> 00:05:43,240
not if two elements are equal from two

121
00:05:41,889 --> 00:05:47,470
different sets there in the intersection

122
00:05:43,240 --> 00:05:49,900
<font color="#E5E5E5">okay okay so it doesn't look so bad but</font>

123
00:05:47,470 --> 00:05:52,510
then the problem<font color="#E5E5E5"> arises</font><font color="#CCCCCC"> because now we</font>

124
00:05:49,900 --> 00:05:56,289
are saying<font color="#E5E5E5"> that okay we cannot see the</font>

125
00:05:52,510 --> 00:05:57,820
strings because again if you remember

126
00:05:56,289 --> 00:06:01,270
they're in different databases and their

127
00:05:57,820 --> 00:06:03,430
privacy there the providers are not

128
00:06:01,270 --> 00:06:06,969
willing to<font color="#E5E5E5"> reveal the databases as such</font>

129
00:06:03,430 --> 00:06:10,270
so we cannot look at the strings okay so

130
00:06:06,970 --> 00:06:13,090
one way to handle that would be use some

131
00:06:10,270 --> 00:06:15,460
kind of hashing a cryptographic hashing

132
00:06:13,090 --> 00:06:17,919
in this case so let's<font color="#E5E5E5"> say the two sides</font>

133
00:06:15,460 --> 00:06:20,409
they come up with<font color="#CCCCCC"> key is</font><font color="#E5E5E5"> K and K</font><font color="#CCCCCC"> Prime</font>

134
00:06:17,919 --> 00:06:24,789
of course these are strings so they have

135
00:06:20,410 --> 00:06:26,110
to be mapped to some kind<font color="#E5E5E5"> of a number so</font>

136
00:06:24,789 --> 00:06:29,680
in this case we actually map it to

137
00:06:26,110 --> 00:06:32,680
primitive roots and we do some<font color="#CCCCCC"> kind of a</font>

138
00:06:29,680 --> 00:06:33,670
modular exponentiation<font color="#E5E5E5"> okay so each</font>

139
00:06:32,680 --> 00:06:35,920
party does

140
00:06:33,670 --> 00:06:38,830
that on their side<font color="#E5E5E5"> and then then sense</font>

141
00:06:35,920 --> 00:06:40,690
the result to<font color="#CCCCCC"> the other side who that</font>

142
00:06:38,830 --> 00:06:42,250
they<font color="#E5E5E5"> just</font><font color="#CCCCCC"> takes the result and applies</font>

143
00:06:40,690 --> 00:06:44,830
its key again does a modular

144
00:06:42,250 --> 00:06:46,450
exponentiation using its own key both

145
00:06:44,830 --> 00:06:49,270
<font color="#E5E5E5">party does the same thing and then sense</font>

146
00:06:46,450 --> 00:06:51,729
these whatever these values are to some

147
00:06:49,270 --> 00:06:52,960
<font color="#E5E5E5">kind of a linkage agent</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> and then</font>

148
00:06:51,730 --> 00:06:55,870
the agent is<font color="#CCCCCC"> going to look at the two</font>

149
00:06:52,960 --> 00:06:58,390
<font color="#CCCCCC">values and say okay these are equal okay</font>

150
00:06:55,870 --> 00:07:00,760
fine that means the values that both

151
00:06:58,390 --> 00:07:03,280
party had or the by<font color="#E5E5E5"> Graham that they had</font>

152
00:07:00,760 --> 00:07:05,950
<font color="#CCCCCC">was equal otherwise not so that way</font>

153
00:07:03,280 --> 00:07:07,390
basically<font color="#E5E5E5"> doing a check for equality and</font>

154
00:07:05,950 --> 00:07:08,920
you can do the intersection and then you

155
00:07:07,390 --> 00:07:15,039
can compute attribute score and then

156
00:07:08,920 --> 00:07:19,990
computer record score<font color="#E5E5E5"> okay now if</font><font color="#CCCCCC"> I am</font>

157
00:07:15,040 --> 00:07:24,040
to do this implement this and exactly<font color="#E5E5E5"> on</font>

158
00:07:19,990 --> 00:07:26,020
a large database then if I have let's

159
00:07:24,040 --> 00:07:30,850
say<font color="#CCCCCC"> 100,000 records in each database</font>

160
00:07:26,020 --> 00:07:33,310
each its side then this could take years

161
00:07:30,850 --> 00:07:34,660
to compute because of the modular

162
00:07:33,310 --> 00:07:36,100
exponentiation there is some there are

163
00:07:34,660 --> 00:07:39,040
some<font color="#E5E5E5"> numbers estimates given in the</font>

164
00:07:36,100 --> 00:07:41,410
paper you look at<font color="#CCCCCC"> it and it would result</font>

165
00:07:39,040 --> 00:07:44,290
in the transfer of tremendous or a huge

166
00:07:41,410 --> 00:07:46,000
amount of data in bed abides okay you

167
00:07:44,290 --> 00:07:47,770
think<font color="#CCCCCC"> about each string will be broken</font>

168
00:07:46,000 --> 00:07:49,750
<font color="#CCCCCC">down into my grams and this operation</font>

169
00:07:47,770 --> 00:07:51,669
being shown is for every by<font color="#CCCCCC"> Graham</font>

170
00:07:49,750 --> 00:07:54,670
comparison and if you're doing a

171
00:07:51,670 --> 00:07:58,150
quadratic comparison then again it's

172
00:07:54,670 --> 00:08:00,880
basically just scales up<font color="#E5E5E5"> ah now there</font>

173
00:07:58,150 --> 00:08:03,489
are other methods also methods based on

174
00:08:00,880 --> 00:08:05,980
what the medical<font color="#E5E5E5"> community has been</font>

175
00:08:03,490 --> 00:08:08,140
using it's called bloom filters where

176
00:08:05,980 --> 00:08:10,780
you a hash this encode the same thing in

177
00:08:08,140 --> 00:08:12,940
bloom filters but on and off this doom

178
00:08:10,780 --> 00:08:15,219
filters have been attacked shown to have

179
00:08:12,940 --> 00:08:18,100
weaknesses so there's the the platform

180
00:08:15,220 --> 00:08:22,030
the landscape is not we have<font color="#E5E5E5"> not figured</font>

181
00:08:18,100 --> 00:08:25,660
out what's the best there<font color="#E5E5E5"> okay here this</font>

182
00:08:22,030 --> 00:08:30,190
<font color="#E5E5E5">approach has mostly been not years</font>

183
00:08:25,660 --> 00:08:32,920
because<font color="#CCCCCC"> of all this hi computation or</font>

184
00:08:30,190 --> 00:08:35,110
and high communication<font color="#E5E5E5"> cost problem so</font>

185
00:08:32,919 --> 00:08:38,289
we want to<font color="#E5E5E5"> see what we can do in do in</font>

186
00:08:35,110 --> 00:08:42,039
this<font color="#E5E5E5"> part so so what we the first thing</font>

187
00:08:38,289 --> 00:08:47,199
we do is we say<font color="#E5E5E5"> okay let's not have both</font>

188
00:08:42,039 --> 00:08:49,719
sides speak these keys every time they

189
00:08:47,200 --> 00:08:53,040
do you have to compare by grams let's

190
00:08:49,720 --> 00:08:56,470
<font color="#CCCCCC">just decide on a fixed set of keys and</font>

191
00:08:53,040 --> 00:08:58,449
then p keys from that particular set

192
00:08:56,470 --> 00:09:00,580
<font color="#E5E5E5">because what that gives us then this is</font>

193
00:08:58,450 --> 00:09:05,590
the ability to pre-compute all these

194
00:09:00,580 --> 00:09:08,290
different exponentiation<font color="#CCCCCC"> okay and</font>

195
00:09:05,590 --> 00:09:09,760
pre-computation can be done because if

196
00:09:08,290 --> 00:09:12,930
you think<font color="#E5E5E5"> of as a set of by</font><font color="#CCCCCC"> brahms it's</font>

197
00:09:09,760 --> 00:09:15,760
not really that large my<font color="#CCCCCC"> 4700 something</font>

198
00:09:12,930 --> 00:09:18,670
so that's what we do we take all the

199
00:09:15,760 --> 00:09:21,310
possible by grams okay and<font color="#E5E5E5"> then we do a</font>

200
00:09:18,670 --> 00:09:23,709
permutation so this is what every party

201
00:09:21,310 --> 00:09:27,699
does it does a permutation of this set

202
00:09:23,710 --> 00:09:31,180
<font color="#CCCCCC">so it does no one</font><font color="#E5E5E5"> knows what is here</font>

203
00:09:27,700 --> 00:09:32,860
except for<font color="#E5E5E5"> the party and then applies or</font>

204
00:09:31,180 --> 00:09:34,660
does a<font color="#E5E5E5"> pre computation which is</font>

205
00:09:32,860 --> 00:09:37,810
basically doing a modular exponentiation

206
00:09:34,660 --> 00:09:41,170
on every by<font color="#E5E5E5"> graham after in the</font>

207
00:09:37,810 --> 00:09:43,000
permitted set okay and then<font color="#E5E5E5"> just</font>

208
00:09:41,170 --> 00:09:47,589
combines is all together and sends it to

209
00:09:43,000 --> 00:09:49,120
the other side side B similarly this

210
00:09:47,590 --> 00:09:52,660
particular side is also going to receive

211
00:09:49,120 --> 00:09:55,510
something from the side be okay it's

212
00:09:52,660 --> 00:09:57,819
level<font color="#CCCCCC"> one output now the time it takes</font>

213
00:09:55,510 --> 00:10:03,430
to do level<font color="#CCCCCC"> one output if i am using</font><font color="#E5E5E5"> 50</font>

214
00:09:57,820 --> 00:10:06,250
keys 2048-bit<font color="#E5E5E5"> primes the eight got away</font>

215
00:10:03,430 --> 00:10:07,660
so<font color="#E5E5E5"> eight threads then this is going to</font>

216
00:10:06,250 --> 00:10:12,580
take roughly three minutes to<font color="#E5E5E5"> do and it</font>

217
00:10:07,660 --> 00:10:14,860
produces an output of 58 megabytes so

218
00:10:12,580 --> 00:10:17,770
next is we take<font color="#CCCCCC"> the data from the other</font>

219
00:10:14,860 --> 00:10:19,930
side okay and then<font color="#E5E5E5"> we apply the same</font>

220
00:10:17,770 --> 00:10:22,630
process so we apply the keys do the

221
00:10:19,930 --> 00:10:24,819
modular exponentiation and then we get

222
00:10:22,630 --> 00:10:27,070
<font color="#CCCCCC">the second level pre-computation which</font>

223
00:10:24,820 --> 00:10:28,900
you sent to the linkage agent in to do

224
00:10:27,070 --> 00:10:31,030
<font color="#E5E5E5">do this in the same setting it's going</font>

225
00:10:28,900 --> 00:10:32,380
to take around 2.2 hours and the output

226
00:10:31,030 --> 00:10:33,520
is around sixty eight megabytes of

227
00:10:32,380 --> 00:10:35,920
course<font color="#E5E5E5"> this is after we do some</font>

228
00:10:33,520 --> 00:10:39,610
truncation you don't have to keep entire

229
00:10:35,920 --> 00:10:41,709
256 bytes of the output can keep just

230
00:10:39,610 --> 00:10:43,810
enough so that every entry is unique in

231
00:10:41,710 --> 00:10:49,120
there which in our case in this case was

232
00:10:43,810 --> 00:10:51,969
65 now this<font color="#CCCCCC"> is what the output looks</font>

233
00:10:49,120 --> 00:10:54,310
like from the different<font color="#E5E5E5"> parties at the</font>

234
00:10:51,970 --> 00:10:57,040
linkage side so<font color="#E5E5E5"> you have these different</font>

235
00:10:54,310 --> 00:11:00,699
values so every site can now just refer

236
00:10:57,040 --> 00:11:01,089
<font color="#CCCCCC">to a bigram using an index and it is a</font>

237
00:11:00,700 --> 00:11:03,069
permit

238
00:11:01,089 --> 00:11:05,019
index because it knows the permutation

239
00:11:03,069 --> 00:11:08,769
function it knows which index to refer

240
00:11:05,019 --> 00:11:10,990
<font color="#CCCCCC">to and then you can</font><font color="#E5E5E5"> choose a key so you</font>

241
00:11:08,769 --> 00:11:13,779
<font color="#E5E5E5">can use that the linkage agent can use</font>

242
00:11:10,990 --> 00:11:15,999
that to look up the values in these two

243
00:11:13,779 --> 00:11:18,399
tables one received from a one<font color="#CCCCCC"> received</font>

244
00:11:15,999 --> 00:11:21,370
from B and then they do a quick check on

245
00:11:18,399 --> 00:11:23,249
the value so<font color="#E5E5E5"> this is how the linkage is</font>

246
00:11:21,370 --> 00:11:26,529
going to happen at the linkages inside

247
00:11:23,249 --> 00:11:29,559
so<font color="#E5E5E5"> using this process we were able to</font>

248
00:11:26,529 --> 00:11:31,930
compare 100,000 records in each pair

249
00:11:29,559 --> 00:11:35,170
that's around 10 billion record

250
00:11:31,930 --> 00:11:36,998
comparisons and they tattoo attributes

251
00:11:35,170 --> 00:11:40,689
names and addresses<font color="#CCCCCC"> it took around 80</font>

252
00:11:36,999 --> 00:11:44,860
minutes to do that now a problem with

253
00:11:40,689 --> 00:11:46,389
this method is with frequency attack so

254
00:11:44,860 --> 00:11:48,610
if I if<font color="#CCCCCC"> we know that there is</font><font color="#E5E5E5"> a certain</font>

255
00:11:46,389 --> 00:11:52,480
distribution of x grams in let's say any

256
00:11:48,610 --> 00:11:55,120
names if uniformly pick keys from for

257
00:11:52,480 --> 00:11:56,980
use in that method then each key will

258
00:11:55,120 --> 00:11:59,529
also display the same<font color="#E5E5E5"> kind of</font>

259
00:11:56,980 --> 00:12:01,689
distribution<font color="#CCCCCC"> okay so there is</font><font color="#E5E5E5"> it's</font>

260
00:11:59,529 --> 00:12:03,730
susceptible to a frequency attack in

261
00:12:01,689 --> 00:12:06,189
that<font color="#E5E5E5"> case so then what we say is ok</font>

262
00:12:03,730 --> 00:12:08,470
let's not<font color="#E5E5E5"> pick Keys uniformly at random</font>

263
00:12:06,189 --> 00:12:11,290
let's use some<font color="#E5E5E5"> kind of a smoothing so</font>

264
00:12:08,470 --> 00:12:13,720
for by grams that appear more number of

265
00:12:11,290 --> 00:12:15,519
times let's use more keys for by grams

266
00:12:13,720 --> 00:12:18,069
that appear less number of times appear

267
00:12:15,519 --> 00:12:21,629
less keys<font color="#CCCCCC"> ok as a result of which what</font>

268
00:12:18,069 --> 00:12:24,610
happens is that the keys start to show a

269
00:12:21,629 --> 00:12:27,490
distribution very close to being<font color="#CCCCCC"> uniform</font>

270
00:12:24,610 --> 00:12:29,110
yeah now of<font color="#CCCCCC"> course there is some</font>

271
00:12:27,490 --> 00:12:31,569
residual risk and then in the paper

272
00:12:29,110 --> 00:12:35,410
<font color="#E5E5E5">research we show how we compute it and</font>

273
00:12:31,569 --> 00:12:38,139
there is<font color="#E5E5E5"> some results now there is</font>

274
00:12:35,410 --> 00:12:41,889
advantage to have using a single keeper

275
00:12:38,139 --> 00:12:44,980
site yeah first of all if I just use one

276
00:12:41,889 --> 00:12:47,050
key then my pre-computation data only

277
00:12:44,980 --> 00:12:49,569
very small so small that<font color="#E5E5E5"> it you can fit</font>

278
00:12:47,050 --> 00:12:51,069
in the cache in<font color="#CCCCCC"> the cache if it can fit</font>

279
00:12:49,569 --> 00:12:53,229
in the cache then the lookups will be

280
00:12:51,069 --> 00:12:54,759
much much faster when I do this linkage

281
00:12:53,230 --> 00:12:58,600
operation because the linkage is nothing

282
00:12:54,759 --> 00:13:00,999
but lookups on the table second I can

283
00:12:58,600 --> 00:13:02,649
use a linear time algorithm to do the

284
00:13:00,999 --> 00:13:05,829
set intersection using a hash table or

285
00:13:02,649 --> 00:13:08,079
something<font color="#CCCCCC"> ok but of course the</font>

286
00:13:05,829 --> 00:13:11,138
frequencies frequency attacks are still

287
00:13:08,079 --> 00:13:14,410
<font color="#CCCCCC">possible and i do</font><font color="#E5E5E5"> not have ease now to</font>

288
00:13:11,139 --> 00:13:17,170
choose from to flatten the frequency

289
00:13:14,410 --> 00:13:19,660
<font color="#E5E5E5">okay so one way to do handle this would</font>

290
00:13:17,170 --> 00:13:23,920
be insert dummy records into the actual

291
00:13:19,660 --> 00:13:25,839
records<font color="#CCCCCC"> here so what if you look at</font><font color="#E5E5E5"> the</font>

292
00:13:23,920 --> 00:13:29,500
distribution of the frequency is in some

293
00:13:25,839 --> 00:13:31,360
attribute in the background then this is

294
00:13:29,500 --> 00:13:32,800
the uniform<font color="#E5E5E5"> distribution if all</font>

295
00:13:31,360 --> 00:13:36,459
frequencies where this level it<font color="#E5E5E5"> would</font>

296
00:13:32,800 --> 00:13:38,410
have been uniform so we could use these

297
00:13:36,459 --> 00:13:40,930
empty space basically which tells us how

298
00:13:38,410 --> 00:13:43,089
<font color="#CCCCCC">many by</font><font color="#E5E5E5"> are the count of diagrams we can</font>

299
00:13:40,930 --> 00:13:46,089
use<font color="#CCCCCC"> for each of these to create dummy</font>

300
00:13:43,089 --> 00:13:48,189
records yeah but if we do that then is

301
00:13:46,089 --> 00:13:55,120
<font color="#E5E5E5">go you are going to have much more</font>

302
00:13:48,189 --> 00:13:57,910
<font color="#E5E5E5">number of dummy records then actual</font>

303
00:13:55,120 --> 00:14:00,100
records<font color="#E5E5E5"> yeah so the technique we use is</font>

304
00:13:57,910 --> 00:14:01,600
to<font color="#E5E5E5"> do smoothing in the cluster so we</font>

305
00:14:00,100 --> 00:14:03,819
look at the distribution let's say we

306
00:14:01,600 --> 00:14:06,970
divided into five clusters and then we

307
00:14:03,819 --> 00:14:09,339
do smoothing in each cluster okay as a

308
00:14:06,970 --> 00:14:10,839
result of<font color="#E5E5E5"> which</font><font color="#CCCCCC"> the frequencies now</font>

309
00:14:09,339 --> 00:14:15,000
become something<font color="#E5E5E5"> like this so they are</font>

310
00:14:10,839 --> 00:14:15,000
uniform within the same cluster<font color="#E5E5E5"> okay</font>

311
00:14:15,569 --> 00:14:21,329
again if you do a single key now it at a

312
00:14:18,339 --> 00:14:26,410
team in it could become<font color="#CCCCCC"> ten minutes for</font>

313
00:14:21,329 --> 00:14:28,089
records 100,000 records at each side so

314
00:14:26,410 --> 00:14:30,219
if you look at<font color="#CCCCCC"> the</font><font color="#E5E5E5"> exposure risk now</font>

315
00:14:28,089 --> 00:14:32,079
there will always be some diagrams that

316
00:14:30,220 --> 00:14:35,290
have higher exposure risks than in

317
00:14:32,079 --> 00:14:38,319
others single key usually it is faster

318
00:14:35,290 --> 00:14:42,160
but it<font color="#E5E5E5"> has a slightly more residual risk</font>

319
00:14:38,319 --> 00:14:44,560
than in the multi key approach okay but

320
00:14:42,160 --> 00:14:46,719
note that knowing one or two few by

321
00:14:44,560 --> 00:14:48,489
grams is not sufficient to infer the

322
00:14:46,720 --> 00:14:50,589
whole string you need to know a

323
00:14:48,490 --> 00:14:54,939
significant number of them for you to be

324
00:14:50,589 --> 00:14:56,439
able to build<font color="#E5E5E5"> a string back and then if</font>

325
00:14:54,939 --> 00:14:57,849
you're worried about okay what<font color="#E5E5E5"> is the</font>

326
00:14:56,439 --> 00:14:59,620
precision leak call again this is about

327
00:14:57,850 --> 00:15:02,050
<font color="#E5E5E5">a greedy matching algorithm we didn't</font>

328
00:14:59,620 --> 00:15:03,970
explore anything outside of that the

329
00:15:02,050 --> 00:15:06,939
precision and recall that is the ability

330
00:15:03,970 --> 00:15:09,819
to match the records were pretty good

331
00:15:06,939 --> 00:15:12,309
close to ninety eight percent in in both

332
00:15:09,819 --> 00:15:13,689
cases yeah again<font color="#E5E5E5"> there is more in the</font>

333
00:15:12,309 --> 00:15:15,399
paper about<font color="#E5E5E5"> the whole processing</font>

334
00:15:13,689 --> 00:15:17,349
architecture how do we generate a set

335
00:15:15,399 --> 00:15:19,720
our implementation how do<font color="#E5E5E5"> you compute</font>

336
00:15:17,350 --> 00:15:23,800
the exposure all of that you can find in

337
00:15:19,720 --> 00:15:26,620
the paper okay so I believe we<font color="#CCCCCC"> have</font>

338
00:15:23,800 --> 00:15:27,910
provided some hint on how to implement

339
00:15:26,620 --> 00:15:31,470
this

340
00:15:27,910 --> 00:15:35,500
a linkage algorithm that can use

341
00:15:31,470 --> 00:15:38,470
cryptographic methods and have a

342
00:15:35,500 --> 00:15:41,650
feasible<font color="#E5E5E5"> runtime on linking large-scale</font>

343
00:15:38,470 --> 00:15:42,910
databases then we have the next step

344
00:15:41,650 --> 00:15:46,030
<font color="#CCCCCC">will probably want to</font><font color="#E5E5E5"> move towards</font>

345
00:15:42,910 --> 00:15:48,839
something like internet scale linking

346
00:15:46,030 --> 00:15:52,230
<font color="#E5E5E5">this will be much much bigger than scale</font>

347
00:15:48,840 --> 00:15:52,230
<font color="#CCCCCC">okay thank you</font>

