1
00:00:00,030 --> 00:00:05,069
so I'm Ryan<font color="#CCCCCC"> from Indiana University and</font>

2
00:00:02,700 --> 00:00:06,540
<font color="#E5E5E5">I'm</font><font color="#CCCCCC"> gonna talk about some work that I</font>

3
00:00:05,069 --> 00:00:09,210
have been<font color="#CCCCCC"> doing</font><font color="#E5E5E5"> on making</font>

4
00:00:06,540 --> 00:00:11,910
information-theoretic PIR more efficient

5
00:00:09,210 --> 00:00:13,650
<font color="#CCCCCC">using batch codes so we've seen two</font>

6
00:00:11,910 --> 00:00:17,880
<font color="#CCCCCC">different styles</font><font color="#E5E5E5"> of PIR now we'll see</font>

7
00:00:13,650 --> 00:00:20,039
<font color="#E5E5E5">the third so I'm</font><font color="#CCCCCC"> gonna very</font><font color="#E5E5E5"> briefly</font><font color="#CCCCCC"> go</font>

8
00:00:17,880 --> 00:00:22,500
over the PIR problem because I<font color="#E5E5E5"> think by</font>

9
00:00:20,039 --> 00:00:24,750
now you all know what the PIR problem is

10
00:00:22,500 --> 00:00:26,689
we have a user Bob here who is<font color="#E5E5E5"> trying to</font>

11
00:00:24,750 --> 00:00:28,890
<font color="#E5E5E5">fetch some information over the Internet</font>

12
00:00:26,689 --> 00:00:31,470
typically<font color="#CCCCCC"> he's</font><font color="#E5E5E5"> going to send some</font>

13
00:00:28,890 --> 00:00:33,420
<font color="#E5E5E5">requests to a remote server</font><font color="#CCCCCC"> and get some</font>

14
00:00:31,470 --> 00:00:35,670
<font color="#E5E5E5">sort of response</font><font color="#CCCCCC"> and this being pets</font>

15
00:00:33,420 --> 00:00:37,920
were interested<font color="#E5E5E5"> in providing some notion</font>

16
00:00:35,670 --> 00:00:39,930
of<font color="#E5E5E5"> privacy for the user in particular</font>

17
00:00:37,920 --> 00:00:42,300
<font color="#E5E5E5">we're considering scenarios where for</font>

18
00:00:39,930 --> 00:00:44,430
example Bob is<font color="#E5E5E5"> trying to research a</font>

19
00:00:42,300 --> 00:00:46,019
<font color="#E5E5E5">super-secret patent idea that he has he</font>

20
00:00:44,430 --> 00:00:47,730
wants to find<font color="#E5E5E5"> out is this novel</font><font color="#CCCCCC"> before</font>

21
00:00:46,020 --> 00:00:50,250
he devotes the next six<font color="#E5E5E5"> months of his</font>

22
00:00:47,730 --> 00:00:51,989
<font color="#CCCCCC">life to working out the details and he's</font>

23
00:00:50,250 --> 00:00:54,030
worried that<font color="#E5E5E5"> perhaps this remote server</font>

24
00:00:51,989 --> 00:00:57,000
might infer what his idea is and patent

25
00:00:54,030 --> 00:00:58,649
<font color="#E5E5E5">it before he's actually finished so we</font>

26
00:00:57,000 --> 00:01:01,260
<font color="#E5E5E5">want to make sure that we can allow</font>

27
00:00:58,649 --> 00:01:04,650
these queries but provide<font color="#E5E5E5"> privacy to</font>

28
00:01:01,260 --> 00:01:06,149
prevent this sort of attack and the

29
00:01:04,650 --> 00:01:09,119
approach we're going to take is<font color="#CCCCCC"> actually</font>

30
00:01:06,150 --> 00:01:11,670
the very first approach with some tweaks

31
00:01:09,119 --> 00:01:14,490
<font color="#E5E5E5">the very first PIR approach so we have a</font>

32
00:01:11,670 --> 00:01:17,700
database<font color="#E5E5E5"> which we're</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> model as a</font>

33
00:01:14,490 --> 00:01:18,869
matrix<font color="#E5E5E5"> it's gonna have our rows each row</font>

34
00:01:17,700 --> 00:01:20,729
is going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be s where it's long and</font>

35
00:01:18,869 --> 00:01:22,290
<font color="#CCCCCC">what the user is trying</font><font color="#E5E5E5"> to fetch is one</font>

36
00:01:20,729 --> 00:01:24,030
of the rows from this<font color="#E5E5E5"> matrix so it's</font>

37
00:01:22,290 --> 00:01:26,460
just<font color="#E5E5E5"> a matrix over some finite field and</font>

38
00:01:24,030 --> 00:01:29,579
the way we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to represent</font><font color="#E5E5E5"> a query</font>

39
00:01:26,460 --> 00:01:31,559
<font color="#E5E5E5">into this matrix</font><font color="#CCCCCC"> is using a</font><font color="#E5E5E5"> vector from</font>

40
00:01:29,579 --> 00:01:34,619
<font color="#E5E5E5">the standard basis so this vector is</font>

41
00:01:31,560 --> 00:01:36,390
<font color="#E5E5E5">going to</font><font color="#CCCCCC"> be a length or a vector</font><font color="#E5E5E5"> where R</font>

42
00:01:34,619 --> 00:01:38,430
corresponds to the height of<font color="#CCCCCC"> that matrix</font>

43
00:01:36,390 --> 00:01:41,549
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> going to consist of all zeros</font>

44
00:01:38,430 --> 00:01:43,320
except for a<font color="#CCCCCC"> one in a particular</font>

45
00:01:41,549 --> 00:01:44,759
<font color="#E5E5E5">position which corresponds to the row</font>

46
00:01:43,320 --> 00:01:46,919
that the user is trying to<font color="#E5E5E5"> fetch and</font>

47
00:01:44,759 --> 00:01:48,659
we'll<font color="#E5E5E5"> define the result of the query to</font>

48
00:01:46,920 --> 00:01:50,610
be the<font color="#E5E5E5"> product of that vector with that</font>

49
00:01:48,659 --> 00:01:52,950
<font color="#E5E5E5">matrix and for those of you that</font>

50
00:01:50,610 --> 00:01:54,299
<font color="#E5E5E5">remember your basic linear algebra</font><font color="#CCCCCC"> it</font>

51
00:01:52,950 --> 00:01:55,979
should be pretty<font color="#CCCCCC"> easy to see that if you</font>

52
00:01:54,299 --> 00:01:59,960
<font color="#CCCCCC">multiply that vector times that</font><font color="#E5E5E5"> matrix</font>

53
00:01:55,979 --> 00:02:04,380
<font color="#E5E5E5">what will pop out is indeed the</font><font color="#CCCCCC"> J</font><font color="#E5E5E5"> throw</font>

54
00:01:59,960 --> 00:02:06,329
<font color="#E5E5E5">okay so this seems to</font><font color="#CCCCCC"> work but we don't</font>

55
00:02:04,380 --> 00:02:08,038
<font color="#CCCCCC">have</font><font color="#E5E5E5"> any sort of privacy so</font><font color="#CCCCCC"> we need to</font>

56
00:02:06,329 --> 00:02:11,609
do<font color="#E5E5E5"> something here to get privacy from</font>

57
00:02:08,038 --> 00:02:13,369
this and it<font color="#E5E5E5"> turns out</font><font color="#CCCCCC"> this is actually</font>

58
00:02:11,610 --> 00:02:14,870
relatively<font color="#E5E5E5"> simple</font>

59
00:02:13,370 --> 00:02:17,690
so the approach we're gonna use was

60
00:02:14,870 --> 00:02:19,340
proposed by Goldberg back in 2007<font color="#E5E5E5"> we're</font>

61
00:02:17,690 --> 00:02:20,930
going to<font color="#CCCCCC"> replicate the database as was</font>

62
00:02:19,340 --> 00:02:22,849
previously<font color="#E5E5E5"> mentioned among several</font>

63
00:02:20,930 --> 00:02:24,290
different servers and then<font color="#CCCCCC"> Adi here is</font>

64
00:02:22,849 --> 00:02:26,510
giving us the missing<font color="#E5E5E5"> piece we're going</font>

65
00:02:24,290 --> 00:02:29,480
to use his<font color="#CCCCCC"> secret sharing scheme to take</font>

66
00:02:26,510 --> 00:02:32,269
this basis vector which<font color="#E5E5E5"> is clearly non</font>

67
00:02:29,480 --> 00:02:33,470
private and secret<font color="#CCCCCC"> share it component</font>

68
00:02:32,269 --> 00:02:38,690
wise so we're going<font color="#E5E5E5"> to take</font><font color="#CCCCCC"> each and</font>

69
00:02:33,470 --> 00:02:40,099
<font color="#E5E5E5">every entry in this</font><font color="#CCCCCC"> why</font><font color="#E5E5E5"> isn't it going</font>

70
00:02:38,690 --> 00:02:42,170
<font color="#CCCCCC">we're getting each and every entry in</font>

71
00:02:40,099 --> 00:02:45,518
<font color="#E5E5E5">this vector and we're gonna use</font><font color="#CCCCCC"> similar</font>

72
00:02:42,170 --> 00:02:47,780
secret<font color="#CCCCCC"> sharing</font><font color="#E5E5E5"> scheme to turn them into</font>

73
00:02:45,519 --> 00:02:49,940
<font color="#E5E5E5">vectors that look essentially random</font>

74
00:02:47,780 --> 00:02:53,120
we're gonna send those to the<font color="#E5E5E5"> servers</font>

75
00:02:49,940 --> 00:02:57,140
and then we're gonna wait and wait and

76
00:02:53,120 --> 00:02:59,239
<font color="#E5E5E5">wait and wait</font><font color="#CCCCCC"> while</font><font color="#E5E5E5"> these servers</font>

77
00:02:57,140 --> 00:03:01,220
multiply these random looking vectors

78
00:02:59,239 --> 00:03:04,220
times the copy of<font color="#E5E5E5"> the database</font><font color="#CCCCCC"> that they</font>

79
00:03:01,220 --> 00:03:05,750
have and<font color="#CCCCCC"> hopefully it's some time soon</font>

80
00:03:04,220 --> 00:03:08,540
<font color="#E5E5E5">because they only have 15</font><font color="#CCCCCC"> minutes for</font>

81
00:03:05,750 --> 00:03:10,730
<font color="#CCCCCC">this talk the server's will come back</font>

82
00:03:08,540 --> 00:03:12,319
with their responses<font color="#E5E5E5"> and because</font>

83
00:03:10,730 --> 00:03:13,940
<font color="#E5E5E5">everything here is linear the secret</font>

84
00:03:12,319 --> 00:03:16,250
sharing<font color="#E5E5E5"> is linear the vector matrix</font>

85
00:03:13,940 --> 00:03:17,480
multiplication is linear<font color="#E5E5E5"> the user just</font>

86
00:03:16,250 --> 00:03:19,370
has to do a<font color="#E5E5E5"> component wise</font>

87
00:03:17,480 --> 00:03:21,018
reconstruction on the responses<font color="#E5E5E5"> and lo</font>

88
00:03:19,370 --> 00:03:23,389
and<font color="#E5E5E5"> behold what pops out is the record</font>

89
00:03:21,019 --> 00:03:25,069
that<font color="#CCCCCC"> the user was after but from the</font>

90
00:03:23,389 --> 00:03:26,660
<font color="#E5E5E5">perspective of any individual server</font>

91
00:03:25,069 --> 00:03:29,238
clearly they can't figure<font color="#E5E5E5"> out what the</font>

92
00:03:26,660 --> 00:03:30,799
user was after and in fact the number<font color="#E5E5E5"> of</font>

93
00:03:29,239 --> 00:03:32,599
servers<font color="#CCCCCC"> that would have to work together</font>

94
00:03:30,799 --> 00:03:35,599
to figure out<font color="#E5E5E5"> what the user was after is</font>

95
00:03:32,599 --> 00:03:37,638
the same as the number of<font color="#E5E5E5"> servers or the</font>

96
00:03:35,599 --> 00:03:38,810
the parameter that was chosen<font color="#E5E5E5"> to the</font>

97
00:03:37,639 --> 00:03:40,459
secret<font color="#CCCCCC"> sharing the reconstruction</font>

98
00:03:38,810 --> 00:03:42,169
parameter<font color="#E5E5E5"> so if we make an appropriate</font>

99
00:03:40,459 --> 00:03:43,819
non collusion assumption we<font color="#CCCCCC"> can prove</font>

100
00:03:42,169 --> 00:03:47,030
<font color="#CCCCCC">that it is literally impossible for</font>

101
00:03:43,819 --> 00:03:49,879
these servers<font color="#CCCCCC"> 2d anonymize the</font><font color="#E5E5E5"> query</font><font color="#CCCCCC"> so</font>

102
00:03:47,030 --> 00:03:51,739
what<font color="#CCCCCC"> i'm interested in was that step</font>

103
00:03:49,879 --> 00:03:53,929
where<font color="#CCCCCC"> we waited and waited and</font><font color="#E5E5E5"> waited</font>

104
00:03:51,739 --> 00:03:55,730
<font color="#E5E5E5">and waited and seeing what we can do to</font>

105
00:03:53,930 --> 00:03:59,599
reduce<font color="#E5E5E5"> the</font><font color="#CCCCCC"> amount</font><font color="#E5E5E5"> of time we have to</font>

106
00:03:55,730 --> 00:04:01,010
<font color="#E5E5E5">wait so the</font><font color="#CCCCCC"> EPI we</font><font color="#E5E5E5"> have PIR can we get</font>

107
00:03:59,599 --> 00:04:04,069
to the new stuff yes yes we can<font color="#CCCCCC"> get to</font>

108
00:04:01,010 --> 00:04:05,690
the new stuff so the basic tool we're

109
00:04:04,069 --> 00:04:06,888
gonna use is called<font color="#E5E5E5"> a ramp scheme for</font>

110
00:04:05,690 --> 00:04:08,448
<font color="#E5E5E5">those of you who aren't familiar with</font>

111
00:04:06,889 --> 00:04:10,849
ramp schemes<font color="#CCCCCC"> I'm just gonna go</font><font color="#E5E5E5"> over very</font>

112
00:04:08,449 --> 00:04:12,470
<font color="#E5E5E5">quickly it's a very natural</font>

113
00:04:10,849 --> 00:04:13,578
<font color="#E5E5E5">generalization of secret</font><font color="#CCCCCC"> training</font>

114
00:04:12,470 --> 00:04:15,859
schemes that<font color="#E5E5E5"> have actually</font><font color="#CCCCCC"> been studied</font>

115
00:04:13,579 --> 00:04:18,889
<font color="#E5E5E5">as long as secret training schemes have</font>

116
00:04:15,859 --> 00:04:21,049
but don't show up in applications quite

117
00:04:18,889 --> 00:04:23,539
as often<font color="#E5E5E5"> so</font><font color="#CCCCCC"> on a</font><font color="#E5E5E5"> typical secret sharing</font>

118
00:04:21,048 --> 00:04:27,138
scheme<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have some parameter I'm</font>

119
00:04:23,539 --> 00:04:29,300
calling it<font color="#CCCCCC"> T here</font><font color="#E5E5E5"> if the attacker</font>

120
00:04:27,139 --> 00:04:31,370
gets their hands on<font color="#E5E5E5"> tea or fewer shares</font>

121
00:04:29,300 --> 00:04:33,199
<font color="#E5E5E5">they learn nothing at all about what the</font>

122
00:04:31,370 --> 00:04:34,939
secret is<font color="#E5E5E5"> but as soon as they have T</font>

123
00:04:33,199 --> 00:04:36,529
<font color="#E5E5E5">plus 1 or more shares they have the</font>

124
00:04:34,939 --> 00:04:39,860
entire secret and a<font color="#E5E5E5"> wrap scheme</font><font color="#CCCCCC"> just</font>

125
00:04:36,529 --> 00:04:41,240
<font color="#E5E5E5">relaxes this so that if you have tea</font><font color="#CCCCCC"> or</font>

126
00:04:39,860 --> 00:04:42,770
fewer shares you still have no

127
00:04:41,240 --> 00:04:44,599
<font color="#CCCCCC">information</font><font color="#E5E5E5"> about the secret but in</font>

128
00:04:42,770 --> 00:04:46,520
order to<font color="#E5E5E5"> get complete information</font><font color="#CCCCCC"> about</font>

129
00:04:44,599 --> 00:04:48,110
<font color="#CCCCCC">the secret</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have to have T plus</font>

130
00:04:46,520 --> 00:04:50,900
<font color="#E5E5E5">you shares where</font><font color="#CCCCCC"> u is some parameter</font>

131
00:04:48,110 --> 00:04:55,400
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> least one and the upshot of</font>

132
00:04:50,900 --> 00:04:57,859
this relaxation is we can now fit<font color="#CCCCCC"> new</font>

133
00:04:55,400 --> 00:05:00,438
secrets or<font color="#CCCCCC"> U times</font><font color="#E5E5E5"> as many secret bits</font>

134
00:04:57,860 --> 00:05:02,060
<font color="#E5E5E5">into the secret cheering scheme so the</font>

135
00:05:00,439 --> 00:05:05,240
shares that<font color="#CCCCCC"> the users have look exactly</font>

136
00:05:02,060 --> 00:05:06,889
like<font color="#E5E5E5"> they used to but we have a you fold</font>

137
00:05:05,240 --> 00:05:08,240
<font color="#CCCCCC">improvement in the amount of information</font>

138
00:05:06,889 --> 00:05:11,539
<font color="#E5E5E5">we can pack and we're</font><font color="#CCCCCC"> gonna try</font><font color="#E5E5E5"> to use</font>

139
00:05:08,240 --> 00:05:12,889
this to<font color="#E5E5E5"> speed up the PR and how do</font><font color="#CCCCCC"> we</font>

140
00:05:11,539 --> 00:05:16,580
actually implement<font color="#E5E5E5"> this so if you think</font>

141
00:05:12,889 --> 00:05:18,710
of Shamir secret sharing scheme<font color="#E5E5E5"> as you</font>

142
00:05:16,580 --> 00:05:20,330
have a random polynomial<font color="#CCCCCC"> it's random</font>

143
00:05:18,710 --> 00:05:21,859
other than the<font color="#E5E5E5"> y intercept which encodes</font>

144
00:05:20,330 --> 00:05:23,870
a secret we're gonna do<font color="#E5E5E5"> basically the</font>

145
00:05:21,860 --> 00:05:25,430
same<font color="#E5E5E5"> thing except now the y intercept</font>

146
00:05:23,870 --> 00:05:27,110
encodes a secret and perhaps<font color="#E5E5E5"> when you</font>

147
00:05:25,430 --> 00:05:28,849
evaluate<font color="#E5E5E5"> the polynomial at x equals 1</font>

148
00:05:27,110 --> 00:05:31,610
you<font color="#E5E5E5"> get a different secret we could pack</font>

149
00:05:28,849 --> 00:05:33,229
another secret<font color="#E5E5E5"> at x equals 2</font><font color="#CCCCCC"> etc so in</font>

150
00:05:31,610 --> 00:05:35,960
this<font color="#CCCCCC"> example there's just</font><font color="#E5E5E5"> two secrets</font>

151
00:05:33,229 --> 00:05:38,000
<font color="#E5E5E5">and I'm gonna</font><font color="#CCCCCC"> set T equal to two so to</font>

152
00:05:35,960 --> 00:05:40,250
make the<font color="#E5E5E5"> private the polynomials we use</font>

153
00:05:38,000 --> 00:05:42,020
for a ramp scheme<font color="#E5E5E5"> sharing we just throw</font>

154
00:05:40,250 --> 00:05:43,939
a couple<font color="#CCCCCC"> of</font><font color="#E5E5E5"> other random points on there</font>

155
00:05:42,020 --> 00:05:45,500
then we interpolate<font color="#E5E5E5"> through these and</font>

156
00:05:43,939 --> 00:05:47,149
then we<font color="#E5E5E5"> evaluate the result in</font>

157
00:05:45,500 --> 00:05:49,270
polynomial<font color="#CCCCCC"> at some other points and</font><font color="#E5E5E5"> hand</font>

158
00:05:47,149 --> 00:05:53,120
those out to<font color="#CCCCCC"> the various</font><font color="#E5E5E5"> shareholders</font>

159
00:05:49,270 --> 00:05:54,770
<font color="#CCCCCC">okay so how do</font><font color="#E5E5E5"> we use this to speed up</font>

160
00:05:53,120 --> 00:05:56,210
PR<font color="#E5E5E5"> so there's actually</font><font color="#CCCCCC"> two different</font>

161
00:05:54,770 --> 00:05:58,339
things<font color="#CCCCCC"> that I'm</font><font color="#E5E5E5"> going to talk</font><font color="#CCCCCC"> about one</font>

162
00:05:56,210 --> 00:05:59,960
of them is new one of them is old<font color="#E5E5E5"> and</font>

163
00:05:58,339 --> 00:06:02,360
then the third thing<font color="#CCCCCC"> is how we glue</font>

164
00:05:59,960 --> 00:06:04,899
those together to<font color="#CCCCCC"> get a really fast</font>

165
00:06:02,360 --> 00:06:09,080
protocol<font color="#E5E5E5"> so the first idea</font><font color="#CCCCCC"> the new one</font>

166
00:06:04,899 --> 00:06:10,909
we take our<font color="#E5E5E5"> R by s</font><font color="#CCCCCC"> matrix and the first</font>

167
00:06:09,080 --> 00:06:13,250
<font color="#E5E5E5">step is just</font><font color="#CCCCCC"> a rewriting step so we're</font>

168
00:06:10,909 --> 00:06:15,259
gonna think of it as a bunch of<font color="#CCCCCC"> U by s</font>

169
00:06:13,250 --> 00:06:17,210
matrices<font color="#E5E5E5"> stacked on top of each other so</font>

170
00:06:15,259 --> 00:06:18,770
<font color="#E5E5E5">right now I'm just rewriting changing</font>

171
00:06:17,210 --> 00:06:22,279
notation but<font color="#E5E5E5"> I haven't actually changed</font>

172
00:06:18,770 --> 00:06:25,068
anything<font color="#E5E5E5"> then from there we are going</font><font color="#CCCCCC"> to</font>

173
00:06:22,279 --> 00:06:29,080
take this collection<font color="#E5E5E5"> of eubiose matrices</font>

174
00:06:25,069 --> 00:06:32,210
and<font color="#E5E5E5"> we</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> going to turn each matrix</font>

175
00:06:29,080 --> 00:06:33,859
<font color="#E5E5E5">into a set of</font><font color="#CCCCCC"> ramp shares and</font><font color="#E5E5E5"> typically</font>

176
00:06:32,210 --> 00:06:35,508
you would just set the privacy parameter

177
00:06:33,860 --> 00:06:36,620
to<font color="#E5E5E5"> 0 here but there are</font><font color="#CCCCCC"> cases</font><font color="#E5E5E5"> where you</font>

178
00:06:35,509 --> 00:06:38,959
<font color="#E5E5E5">might</font><font color="#CCCCCC"> want to set it higher and we'll</font>

179
00:06:36,620 --> 00:06:39,510
talk about those<font color="#E5E5E5"> but the paper discusses</font>

180
00:06:38,959 --> 00:06:40,890
it a bit

181
00:06:39,510 --> 00:06:43,860
so what we're actually<font color="#E5E5E5"> doing here is</font>

182
00:06:40,890 --> 00:06:45,510
we're<font color="#CCCCCC"> taking one column of this matrix</font>

183
00:06:43,860 --> 00:06:47,400
we're interpolating through it to get<font color="#CCCCCC"> a</font>

184
00:06:45,510 --> 00:06:48,810
polynomial<font color="#CCCCCC"> of degree U minus</font><font color="#E5E5E5"> one and</font>

185
00:06:47,400 --> 00:06:50,549
<font color="#E5E5E5">that's the first entry</font><font color="#CCCCCC"> here in the</font>

186
00:06:48,810 --> 00:06:54,540
second<font color="#CCCCCC"> column of</font><font color="#E5E5E5"> this becomes the second</font>

187
00:06:50,550 --> 00:06:57,390
polynomial here<font color="#E5E5E5"> so again</font><font color="#CCCCCC"> this matrix is</font>

188
00:06:54,540 --> 00:06:59,490
a new<font color="#E5E5E5"> representation of this thing but</font>

189
00:06:57,390 --> 00:07:00,840
it's<font color="#E5E5E5"> equivalent right it's</font><font color="#CCCCCC"> just a</font>

190
00:06:59,490 --> 00:07:02,220
different representation<font color="#E5E5E5"> it's very easy</font>

191
00:07:00,840 --> 00:07:03,750
to<font color="#CCCCCC"> go from here to here and it's very</font>

192
00:07:02,220 --> 00:07:05,550
<font color="#E5E5E5">easy to</font><font color="#CCCCCC"> go from here back to here by</font>

193
00:07:03,750 --> 00:07:07,640
just evaluating these polynomials and

194
00:07:05,550 --> 00:07:11,220
putting the results in the right<font color="#E5E5E5"> places</font>

195
00:07:07,640 --> 00:07:12,930
<font color="#E5E5E5">the next step things change slightly</font><font color="#CCCCCC"> so</font>

196
00:07:11,220 --> 00:07:16,410
we're going to<font color="#E5E5E5"> take this vector</font><font color="#CCCCCC"> or this</font>

197
00:07:12,930 --> 00:07:18,210
<font color="#E5E5E5">matrix with polynomials and rather than</font>

198
00:07:16,410 --> 00:07:19,740
<font color="#E5E5E5">handing out the entire matrix to each of</font>

199
00:07:18,210 --> 00:07:21,989
the<font color="#CCCCCC"> servers we're going to evaluate it</font>

200
00:07:19,740 --> 00:07:24,030
<font color="#E5E5E5">and hand out evaluations</font><font color="#CCCCCC"> to the server</font>

201
00:07:21,990 --> 00:07:26,040
<font color="#E5E5E5">so the first server is going</font><font color="#CCCCCC"> to have</font>

202
00:07:24,030 --> 00:07:27,960
this whole<font color="#E5E5E5"> matrix</font><font color="#CCCCCC"> evaluated at</font><font color="#E5E5E5"> some x</font>

203
00:07:26,040 --> 00:07:29,400
<font color="#E5E5E5">coordinate the second server is gonna</font>

204
00:07:27,960 --> 00:07:31,440
have it<font color="#CCCCCC"> evaluated at some other x</font>

205
00:07:29,400 --> 00:07:33,539
coordinate<font color="#E5E5E5"> and so on and so now suddenly</font>

206
00:07:31,440 --> 00:07:36,780
<font color="#E5E5E5">each of the servers rather than holding</font>

207
00:07:33,540 --> 00:07:39,600
an<font color="#CCCCCC"> R by s</font><font color="#E5E5E5"> replica of the matrix holds an</font>

208
00:07:36,780 --> 00:07:43,500
R over<font color="#CCCCCC"> U by s</font><font color="#E5E5E5"> matrix of scalars so this</font>

209
00:07:39,600 --> 00:07:45,150
is much smaller<font color="#CCCCCC"> I mean at least half the</font>

210
00:07:43,500 --> 00:07:48,150
<font color="#CCCCCC">size if you set u equals to an</font><font color="#E5E5E5"> even</font>

211
00:07:45,150 --> 00:07:49,169
smaller<font color="#E5E5E5"> if you said you higher and so</font>

212
00:07:48,150 --> 00:07:51,390
now we need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> figure out how do you</font>

213
00:07:49,170 --> 00:07:53,910
<font color="#CCCCCC">actually get something out</font><font color="#E5E5E5"> of this was</font>

214
00:07:51,390 --> 00:07:55,770
<font color="#E5E5E5">early encoded</font><font color="#CCCCCC"> IR</font><font color="#E5E5E5"> database it turns out</font>

215
00:07:53,910 --> 00:07:58,020
this is pretty simple<font color="#CCCCCC"> so we're gonna</font>

216
00:07:55,770 --> 00:08:00,349
take the index of the record rafter<font color="#E5E5E5"> and</font>

217
00:07:58,020 --> 00:08:03,120
we're<font color="#E5E5E5"> just</font><font color="#CCCCCC"> gonna figure</font><font color="#E5E5E5"> out from</font><font color="#CCCCCC"> that</font>

218
00:08:00,350 --> 00:08:06,120
<font color="#E5E5E5">which polynomial contains the record</font>

219
00:08:03,120 --> 00:08:07,500
that we're<font color="#CCCCCC"> looking for and at what</font><font color="#E5E5E5"> value</font>

220
00:08:06,120 --> 00:08:09,360
do<font color="#E5E5E5"> we need to evaluate that polynomial</font>

221
00:08:07,500 --> 00:08:11,640
to make the<font color="#E5E5E5"> record we're looking for pop</font>

222
00:08:09,360 --> 00:08:13,950
out and this<font color="#E5E5E5"> is very simple you</font><font color="#CCCCCC"> take a</font>

223
00:08:11,640 --> 00:08:15,360
and you try<font color="#E5E5E5"> to divide it by you and you</font>

224
00:08:13,950 --> 00:08:17,460
<font color="#E5E5E5">get your</font><font color="#CCCCCC"> quotient and remainder and the</font>

225
00:08:15,360 --> 00:08:19,470
<font color="#CCCCCC">quotient</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> going to tell you which row</font>

226
00:08:17,460 --> 00:08:20,969
in this polynomial matrix contains your

227
00:08:19,470 --> 00:08:22,920
record<font color="#E5E5E5"> and the remainder is going</font><font color="#CCCCCC"> to</font>

228
00:08:20,970 --> 00:08:26,420
tell you what<font color="#E5E5E5"> x-coordinate</font><font color="#CCCCCC"> you need to</font>

229
00:08:22,920 --> 00:08:29,040
evaluate<font color="#E5E5E5"> that polynomial at to get the</font>

230
00:08:26,420 --> 00:08:31,410
<font color="#E5E5E5">map the record you were at how you're</font>

231
00:08:29,040 --> 00:08:34,130
after<font color="#E5E5E5"> out then we're going to do</font>

232
00:08:31,410 --> 00:08:36,840
essentially<font color="#CCCCCC"> the plain old</font><font color="#E5E5E5"> secret sharing</font>

233
00:08:34,130 --> 00:08:39,840
<font color="#E5E5E5">PIR query except we're going</font><font color="#CCCCCC"> to use this</font>

234
00:08:36,840 --> 00:08:41,700
<font color="#E5E5E5">shorter standard basis vector that we</font>

235
00:08:39,840 --> 00:08:44,040
get<font color="#E5E5E5"> from the quotient</font><font color="#CCCCCC"> and rather than</font>

236
00:08:41,700 --> 00:08:45,480
having the<font color="#CCCCCC"> y-intercept of our secret</font>

237
00:08:44,039 --> 00:08:47,939
<font color="#E5E5E5">cheering polynomials</font><font color="#CCCCCC"> passed through this</font>

238
00:08:45,480 --> 00:08:50,130
we're going<font color="#E5E5E5"> to have the point at x</font>

239
00:08:47,940 --> 00:08:53,130
equals whatever<font color="#E5E5E5"> that remainder was and</font>

240
00:08:50,130 --> 00:08:55,860
then everything<font color="#E5E5E5"> else works out exactly</font>

241
00:08:53,130 --> 00:08:57,750
as it used to<font color="#CCCCCC"> and when we look at the</font>

242
00:08:55,860 --> 00:08:59,730
costs of<font color="#E5E5E5"> this protocol we find that</font>

243
00:08:57,750 --> 00:09:01,770
compared to<font color="#CCCCCC"> the original</font><font color="#E5E5E5"> protocol I</font>

244
00:08:59,730 --> 00:09:03,720
started we get some nice performance

245
00:09:01,770 --> 00:09:05,610
improvements<font color="#E5E5E5"> basically the upload</font>

246
00:09:03,720 --> 00:09:08,220
computation and storage<font color="#CCCCCC"> costs are each</font>

247
00:09:05,610 --> 00:09:11,460
decreased by a<font color="#E5E5E5"> factor you for whatever</font>

248
00:09:08,220 --> 00:09:13,530
it is<font color="#E5E5E5"> that that</font><font color="#CCCCCC"> you parameter</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so</font>

249
00:09:11,460 --> 00:09:17,250
that's pretty<font color="#CCCCCC"> nifty what's the trade-off</font>

250
00:09:13,530 --> 00:09:19,650
<font color="#CCCCCC">so I've only got 15 minutes</font><font color="#E5E5E5"> I'll get</font>

251
00:09:17,250 --> 00:09:21,240
back to<font color="#E5E5E5"> that later the second thing</font>

252
00:09:19,650 --> 00:09:23,670
we're gonna do<font color="#E5E5E5"> is figure out how can we</font>

253
00:09:21,240 --> 00:09:26,160
<font color="#CCCCCC">get more</font><font color="#E5E5E5"> information</font><font color="#CCCCCC"> out of the database</font>

254
00:09:23,670 --> 00:09:29,910
<font color="#E5E5E5">at the same cost</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is actually work</font>

255
00:09:26,160 --> 00:09:33,600
that I did<font color="#CCCCCC"> with</font><font color="#E5E5E5"> Ian Goldberg and each</font>

256
00:09:29,910 --> 00:09:34,860
<font color="#E5E5E5">along back in 2013 that I'm going</font><font color="#CCCCCC"> to</font>

257
00:09:33,600 --> 00:09:37,380
talk about<font color="#E5E5E5"> briefly</font><font color="#CCCCCC"> and then</font><font color="#E5E5E5"> we'll</font><font color="#CCCCCC"> see</font>

258
00:09:34,860 --> 00:09:40,170
how<font color="#CCCCCC"> it can work</font><font color="#E5E5E5"> with this so the idea</font>

259
00:09:37,380 --> 00:09:41,760
<font color="#CCCCCC">here is</font><font color="#E5E5E5"> rather than sending a vector</font>

260
00:09:40,170 --> 00:09:43,979
like<font color="#CCCCCC"> this we want</font><font color="#E5E5E5"> to fetch</font><font color="#CCCCCC"> several</font>

261
00:09:41,760 --> 00:09:45,540
blocks<font color="#E5E5E5"> what we really want to do is send</font>

262
00:09:43,980 --> 00:09:47,730
<font color="#E5E5E5">a matrix it has</font><font color="#CCCCCC"> a whole</font><font color="#E5E5E5"> bunch of</font>

263
00:09:45,540 --> 00:09:49,469
<font color="#CCCCCC">different queries into</font><font color="#E5E5E5"> it but we want to</font>

264
00:09:47,730 --> 00:09:51,930
try<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> this sort of as efficiently as</font>

265
00:09:49,470 --> 00:09:53,880
possible<font color="#E5E5E5"> this was where we first came</font><font color="#CCCCCC"> up</font>

266
00:09:51,930 --> 00:09:55,800
<font color="#CCCCCC">with the idea of using ramp schemes</font><font color="#E5E5E5"> we</font>

267
00:09:53,880 --> 00:09:57,900
thought rather than component was

268
00:09:55,800 --> 00:10:00,390
sharing<font color="#E5E5E5"> this matrix why don't we use the</font>

269
00:09:57,900 --> 00:10:03,510
ramp scheme and turn this<font color="#E5E5E5"> into a single</font>

270
00:10:00,390 --> 00:10:05,400
<font color="#CCCCCC">vector and send the resulting vectors of</font>

271
00:10:03,510 --> 00:10:07,520
<font color="#E5E5E5">scalars rather than matrices</font><font color="#CCCCCC"> of scalars</font>

272
00:10:05,400 --> 00:10:10,350
to the<font color="#CCCCCC"> server's and we get a nice</font>

273
00:10:07,520 --> 00:10:12,360
<font color="#E5E5E5">speed-up so here we have this</font><font color="#CCCCCC"> matrix we</font>

274
00:10:10,350 --> 00:10:14,310
turn it into<font color="#E5E5E5"> a vector of polynomials</font>

275
00:10:12,360 --> 00:10:16,350
rather than a matrix of polynomials<font color="#E5E5E5"> we</font>

276
00:10:14,310 --> 00:10:19,170
send a vector to each server<font color="#E5E5E5"> and when</font>

277
00:10:16,350 --> 00:10:22,410
you do<font color="#E5E5E5"> that we found that you also get a</font>

278
00:10:19,170 --> 00:10:24,630
nice speed up when we pack<font color="#E5E5E5"> Q rows into</font>

279
00:10:22,410 --> 00:10:26,329
<font color="#E5E5E5">the ramp scheme polynomials we get a</font>

280
00:10:24,630 --> 00:10:30,330
<font color="#E5E5E5">factor Q speed up in the</font><font color="#CCCCCC"> upload/download</font>

281
00:10:26,330 --> 00:10:32,970
<font color="#CCCCCC">and</font><font color="#E5E5E5"> computation cost so that's quite</font>

282
00:10:30,330 --> 00:10:37,860
nice<font color="#CCCCCC"> again what's the trade-off and</font>

283
00:10:32,970 --> 00:10:38,910
again<font color="#E5E5E5"> don't</font><font color="#CCCCCC"> worry about</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> okay so the</font>

284
00:10:37,860 --> 00:10:40,080
<font color="#E5E5E5">next thing I want</font><font color="#CCCCCC"> to talk about</font><font color="#E5E5E5"> is what</font>

285
00:10:38,910 --> 00:10:41,520
happens if we<font color="#E5E5E5"> try to put these things</font>

286
00:10:40,080 --> 00:10:43,530
<font color="#E5E5E5">together and it turns out you can</font><font color="#CCCCCC"> use</font>

287
00:10:41,520 --> 00:10:45,300
<font color="#E5E5E5">this what I call</font><font color="#CCCCCC"> the Uwharrie encoding</font>

288
00:10:43,530 --> 00:10:47,640
this<font color="#E5E5E5"> taking the database and encoding it</font>

289
00:10:45,300 --> 00:10:49,890
in these<font color="#CCCCCC"> ramp scheme polynomials</font><font color="#E5E5E5"> with</font>

290
00:10:47,640 --> 00:10:51,330
those<font color="#CCCCCC"> Q batch queries and then if you</font>

291
00:10:49,890 --> 00:10:53,550
add in some other very important little

292
00:10:51,330 --> 00:10:56,700
details which I will<font color="#E5E5E5"> just sweep under</font>

293
00:10:53,550 --> 00:10:59,550
the rug for<font color="#CCCCCC"> the time being</font><font color="#E5E5E5"> you get Q</font>

294
00:10:56,700 --> 00:11:03,300
blocks for<font color="#E5E5E5"> the cost of 1 over</font><font color="#CCCCCC"> u</font><font color="#E5E5E5"> blocks</font>

295
00:10:59,550 --> 00:11:05,160
<font color="#E5E5E5">which is quite nice</font><font color="#CCCCCC"> so what</font><font color="#E5E5E5"> are the</font>

296
00:11:03,300 --> 00:11:07,240
important details<font color="#CCCCCC"> that I'm sweeping</font>

297
00:11:05,160 --> 00:11:09,640
under<font color="#E5E5E5"> the rug there if you think about</font>

298
00:11:07,240 --> 00:11:11,800
this encoded matrix that<font color="#E5E5E5"> I was talking</font>

299
00:11:09,640 --> 00:11:13,779
about<font color="#E5E5E5"> you could kind of view it as a</font>

300
00:11:11,800 --> 00:11:19,149
<font color="#CCCCCC">three-dimensional matrix so we</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> our</font>

301
00:11:13,779 --> 00:11:22,390
<font color="#CCCCCC">over</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> rose s columns</font><font color="#E5E5E5"> but then we have</font>

302
00:11:19,149 --> 00:11:23,950
for lack of a<font color="#CCCCCC"> better term new slices to</font>

303
00:11:22,390 --> 00:11:27,640
this so if you<font color="#E5E5E5"> evaluate these</font>

304
00:11:23,950 --> 00:11:29,230
polynomials at<font color="#CCCCCC"> 0 you get this set of r /</font>

305
00:11:27,640 --> 00:11:30,699
<font color="#CCCCCC">u records and if you evaluate it</font><font color="#E5E5E5"> at 1</font>

306
00:11:29,230 --> 00:11:32,800
you get<font color="#CCCCCC"> a different set of our / u</font>

307
00:11:30,700 --> 00:11:34,540
records and so<font color="#E5E5E5"> on</font><font color="#CCCCCC"> and if you think</font><font color="#E5E5E5"> about</font>

308
00:11:32,800 --> 00:11:38,229
<font color="#E5E5E5">how you query this thing well if we want</font>

309
00:11:34,540 --> 00:11:40,500
the ice block from the<font color="#E5E5E5"> J's slice the way</font>

310
00:11:38,230 --> 00:11:42,910
we actually<font color="#CCCCCC"> fetched that</font><font color="#E5E5E5"> is we encode a</font>

311
00:11:40,500 --> 00:11:45,970
particular standard basis vector at a

312
00:11:42,910 --> 00:11:49,540
particular<font color="#CCCCCC"> x-coordinate and</font><font color="#E5E5E5"> the annoying</font>

313
00:11:45,970 --> 00:11:51,279
observation that comes from this<font color="#CCCCCC"> is we</font>

314
00:11:49,540 --> 00:11:53,380
can't actually use one of these

315
00:11:51,279 --> 00:11:54,880
<font color="#CCCCCC">multi-block these cubed queries to fetch</font>

316
00:11:53,380 --> 00:11:56,529
more than one<font color="#CCCCCC"> block that</font><font color="#E5E5E5"> come from the</font>

317
00:11:54,880 --> 00:11:58,300
same slice<font color="#E5E5E5"> because we find ourselves in</font>

318
00:11:56,529 --> 00:12:00,310
the<font color="#E5E5E5"> impossible situation of taking two</font>

319
00:11:58,300 --> 00:12:01,569
different basis vectors<font color="#E5E5E5"> and encoding</font>

320
00:12:00,310 --> 00:12:06,640
them at the same<font color="#CCCCCC"> x-coordinate in their</font>

321
00:12:01,570 --> 00:12:08,470
polynomials so just occurred to<font color="#CCCCCC"> us and</font>

322
00:12:06,640 --> 00:12:10,209
we<font color="#E5E5E5"> might all darn that's that's</font>

323
00:12:08,470 --> 00:12:12,670
unfortunate or to me rather and I<font color="#CCCCCC"> went</font>

324
00:12:10,209 --> 00:12:13,989
<font color="#CCCCCC">oh darn that's</font><font color="#E5E5E5"> unfortunate but then I</font>

325
00:12:12,670 --> 00:12:19,479
<font color="#E5E5E5">realize there's a very simple</font><font color="#CCCCCC"> fix for</font>

326
00:12:13,990 --> 00:12:22,620
<font color="#E5E5E5">this oh yes this</font><font color="#CCCCCC"> is the cost of</font><font color="#E5E5E5"> I don't</font>

327
00:12:19,480 --> 00:12:25,600
<font color="#CCCCCC">know this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> sort of out of</font><font color="#E5E5E5"> place</font><font color="#CCCCCC"> oh</font>

328
00:12:22,620 --> 00:12:27,160
<font color="#CCCCCC">okay sorry I</font><font color="#E5E5E5"> eliminated a slide so</font>

329
00:12:25,600 --> 00:12:30,660
there's a very<font color="#E5E5E5"> simple fix for this which</font>

330
00:12:27,160 --> 00:12:33,040
<font color="#E5E5E5">is basically</font><font color="#CCCCCC"> to take the each</font><font color="#E5E5E5"> of these</font>

331
00:12:30,660 --> 00:12:35,339
records<font color="#CCCCCC"> and</font><font color="#E5E5E5"> put them in their</font><font color="#CCCCCC"> own slice</font>

332
00:12:33,040 --> 00:12:37,779
so we're gonna rather than using the

333
00:12:35,339 --> 00:12:39,040
remainder upon division by you to figure

334
00:12:37,779 --> 00:12:40,390
<font color="#E5E5E5">out</font><font color="#CCCCCC"> which</font><font color="#E5E5E5"> x coordinate we put it in we</font>

335
00:12:39,040 --> 00:12:42,520
just take each record<font color="#E5E5E5"> so if you want</font>

336
00:12:40,390 --> 00:12:44,140
<font color="#CCCCCC">record</font><font color="#E5E5E5"> one you evaluate the polynomial</font>

337
00:12:42,520 --> 00:12:45,640
at x equals<font color="#E5E5E5"> one and if you want</font><font color="#CCCCCC"> record</font>

338
00:12:44,140 --> 00:12:49,089
<font color="#E5E5E5">to you evaluate the</font><font color="#CCCCCC"> Paloma</font><font color="#E5E5E5"> at x equals</font>

339
00:12:45,640 --> 00:12:52,839
<font color="#CCCCCC">two so we still have</font><font color="#E5E5E5"> our over you rose</font>

340
00:12:49,089 --> 00:12:54,760
<font color="#CCCCCC">but now we've sort</font><font color="#E5E5E5"> of you can't really</font>

341
00:12:52,839 --> 00:12:57,730
draw a picture anymore<font color="#CCCCCC"> I'm yeah</font>

342
00:12:54,760 --> 00:12:59,170
but sorry<font color="#CCCCCC"> I think I botched that</font>

343
00:12:57,730 --> 00:13:01,029
<font color="#CCCCCC">explanation but hopefully you kind of</font>

344
00:12:59,170 --> 00:13:03,279
<font color="#E5E5E5">follow so if you want to get the record</font>

345
00:13:01,029 --> 00:13:04,810
you find the appropriate<font color="#E5E5E5"> row and then</font>

346
00:13:03,279 --> 00:13:07,600
<font color="#E5E5E5">you evaluate it at the x coordinate</font>

347
00:13:04,810 --> 00:13:08,920
corresponding<font color="#CCCCCC"> to the true</font><font color="#E5E5E5"> index of the</font>

348
00:13:07,600 --> 00:13:11,160
record year after rather than<font color="#E5E5E5"> its</font>

349
00:13:08,920 --> 00:13:13,839
remainder and<font color="#E5E5E5"> suddenly now we couldn't</font>

350
00:13:11,160 --> 00:13:15,279
fetch any record we want<font color="#E5E5E5"> in a batch</font>

351
00:13:13,839 --> 00:13:16,779
together and we don't have<font color="#E5E5E5"> to worry</font>

352
00:13:15,279 --> 00:13:19,449
about<font color="#CCCCCC"> these collisions at an x</font>

353
00:13:16,779 --> 00:13:20,880
coordinate<font color="#E5E5E5"> if that was not clear please</font>

354
00:13:19,449 --> 00:13:24,329
read the paper because it's clear

355
00:13:20,880 --> 00:13:27,149
<font color="#E5E5E5">okay so when you do that what we find is</font>

356
00:13:24,329 --> 00:13:30,300
we get really nice speed ups in every

357
00:13:27,149 --> 00:13:32,459
real reasonable cost metric so to get

358
00:13:30,300 --> 00:13:34,620
<font color="#CCCCCC">cue blocks from</font><font color="#E5E5E5"> one of these you area</font>

359
00:13:32,459 --> 00:13:39,000
<font color="#E5E5E5">encoded databases we get a factor</font><font color="#CCCCCC"> qu</font>

360
00:13:34,620 --> 00:13:40,709
<font color="#CCCCCC">speed-up in two of the metrics</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> get a</font>

361
00:13:39,000 --> 00:13:42,810
factor<font color="#E5E5E5"> Q speed-up in the download cost</font>

362
00:13:40,709 --> 00:13:45,000
and a factory<font color="#CCCCCC"> you speed up</font><font color="#E5E5E5"> in a storage</font>

363
00:13:42,810 --> 00:13:47,609
cost and<font color="#CCCCCC"> everything is is much</font><font color="#E5E5E5"> quicker</font>

364
00:13:45,000 --> 00:13:49,889
<font color="#E5E5E5">than it used to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> so I implemented this</font>

365
00:13:47,610 --> 00:13:52,139
in<font color="#E5E5E5"> per C++ the open source</font>

366
00:13:49,889 --> 00:13:55,139
implementation of the basic PIR protocol

367
00:13:52,139 --> 00:13:57,269
I was talking about<font color="#E5E5E5"> and this</font><font color="#CCCCCC"> is an</font>

368
00:13:55,139 --> 00:13:58,889
arbitrary<font color="#CCCCCC"> graph because there were so</font>

369
00:13:57,269 --> 00:14:00,930
many moving pieces I didn't know what to

370
00:13:58,889 --> 00:14:02,490
write<font color="#CCCCCC"> what to actually measure but I</font>

371
00:14:00,930 --> 00:14:04,920
thought this was<font color="#E5E5E5"> nice and illustrative</font>

372
00:14:02,490 --> 00:14:08,639
so here we have the<font color="#CCCCCC"> database size going</font>

373
00:14:04,920 --> 00:14:10,529
up to<font color="#E5E5E5"> about 256 gigabytes and the</font>

374
00:14:08,639 --> 00:14:12,660
clients<font color="#CCCCCC"> there the server side compute</font>

375
00:14:10,529 --> 00:14:14,100
time<font color="#E5E5E5"> this is a single core so everything</font>

376
00:14:12,660 --> 00:14:16,250
here is embarrassingly parallel izybelle

377
00:14:14,100 --> 00:14:19,740
but the experiments only used one<font color="#E5E5E5"> core</font>

378
00:14:16,250 --> 00:14:23,490
this top line is the<font color="#E5E5E5"> cost to run</font><font color="#CCCCCC"> the</font>

379
00:14:19,740 --> 00:14:25,649
protocol with<font color="#CCCCCC"> the default u equals 1 so</font>

380
00:14:23,490 --> 00:14:28,170
the standard before<font color="#CCCCCC"> I made any changes</font>

381
00:14:25,649 --> 00:14:31,079
and we see that the cost of<font color="#E5E5E5"> doing this</font>

382
00:14:28,170 --> 00:14:33,509
256 gigabyte database on the particular

383
00:14:31,079 --> 00:14:37,829
computer I threw at<font color="#CCCCCC"> it is</font><font color="#E5E5E5"> up at around a</font>

384
00:14:33,509 --> 00:14:39,480
thousand seconds when I set u equals 8

385
00:14:37,829 --> 00:14:41,399
which seemed like<font color="#CCCCCC"> a reasonable upper</font>

386
00:14:39,480 --> 00:14:44,250
bound on<font color="#CCCCCC"> the realistic size we get a</font>

387
00:14:41,399 --> 00:14:47,009
factor 13.5 speed-up<font color="#CCCCCC"> we get more than</font>

388
00:14:44,250 --> 00:14:51,029
<font color="#CCCCCC">the factor</font><font color="#E5E5E5"> 8 speed up because I ran out</font>

389
00:14:47,009 --> 00:14:52,529
<font color="#CCCCCC">of RAM at around this line so so in</font><font color="#E5E5E5"> this</font>

390
00:14:51,029 --> 00:14:53,850
case everything<font color="#E5E5E5"> fits in RAM but here</font>

391
00:14:52,529 --> 00:14:56,579
everything<font color="#E5E5E5"> doesn't fit in RAM and you</font>

392
00:14:53,850 --> 00:14:58,680
end up getting some latency<font color="#CCCCCC"> because of</font>

393
00:14:56,579 --> 00:15:01,050
that<font color="#CCCCCC"> so things are quite a bit faster</font>

394
00:14:58,680 --> 00:15:04,949
the upshot of this so basically<font color="#CCCCCC"> it takes</font>

395
00:15:01,050 --> 00:15:06,839
<font color="#CCCCCC">about 0.2 seconds per gigabyte per</font><font color="#E5E5E5"> soak</font>

396
00:15:04,949 --> 00:15:09,899
<font color="#E5E5E5">or seconds per gigabyte to process this</font>

397
00:15:06,839 --> 00:15:11,730
<font color="#E5E5E5">database if you have 16 cores divide</font>

398
00:15:09,899 --> 00:15:17,160
that number by 16 things<font color="#CCCCCC"> they're quite</font>

399
00:15:11,730 --> 00:15:18,120
fast<font color="#CCCCCC"> ok so I kept saying don't worry</font>

400
00:15:17,160 --> 00:15:19,529
about<font color="#E5E5E5"> the trade-off don't worry about</font>

401
00:15:18,120 --> 00:15:21,779
the trade-off<font color="#CCCCCC"> right now I'll</font><font color="#E5E5E5"> briefly</font>

402
00:15:19,529 --> 00:15:24,300
touch on what the trade-off<font color="#CCCCCC"> is so when</font>

403
00:15:21,779 --> 00:15:27,300
that original protocol<font color="#E5E5E5"> by</font><font color="#CCCCCC"> Goldberg was</font>

404
00:15:24,300 --> 00:15:28,829
proposed back in<font color="#E5E5E5"> 2007 the actual title</font>

405
00:15:27,300 --> 00:15:29,969
<font color="#CCCCCC">of the paper was improving the</font>

406
00:15:28,829 --> 00:15:32,520
robustness of<font color="#E5E5E5"> private information</font>

407
00:15:29,970 --> 00:15:34,800
retrieval<font color="#E5E5E5"> and the main contribution</font><font color="#CCCCCC"> was</font>

408
00:15:32,520 --> 00:15:36,480
that the protocol could handle quite a

409
00:15:34,800 --> 00:15:38,430
few incorrect responses from the

410
00:15:36,480 --> 00:15:39,900
<font color="#CCCCCC">server's so if you set that</font><font color="#E5E5E5"> privacy</font>

411
00:15:38,430 --> 00:15:41,489
threshold to<font color="#E5E5E5"> be a little bit smaller</font>

412
00:15:39,900 --> 00:15:42,750
than<font color="#E5E5E5"> the total number</font><font color="#CCCCCC"> of servers and</font><font color="#E5E5E5"> you</font>

413
00:15:41,490 --> 00:15:44,730
can handle<font color="#CCCCCC"> some</font><font color="#E5E5E5"> server's not responding</font>

414
00:15:42,750 --> 00:15:47,370
<font color="#E5E5E5">and some of the responding</font><font color="#CCCCCC"> server's</font>

415
00:15:44,730 --> 00:15:48,780
responding incorrectly and use ideas

416
00:15:47,370 --> 00:15:50,070
from<font color="#E5E5E5"> err correcting codes to</font><font color="#CCCCCC"> make sure</font>

417
00:15:48,780 --> 00:15:52,620
that you still<font color="#E5E5E5"> retrieve the information</font>

418
00:15:50,070 --> 00:15:54,210
<font color="#CCCCCC">you want and so this was sort of the</font>

419
00:15:52,620 --> 00:15:57,210
<font color="#CCCCCC">breakthrough</font><font color="#E5E5E5"> that you could get this</font>

420
00:15:54,210 --> 00:16:00,120
guru Swami<font color="#E5E5E5"> sedan list decoding radius as</font>

421
00:15:57,210 --> 00:16:02,940
your robustness level we fast forward

422
00:16:00,120 --> 00:16:05,040
five years<font color="#CCCCCC"> there's new techniques</font><font color="#E5E5E5"> new</font>

423
00:16:02,940 --> 00:16:07,200
ideas and<font color="#E5E5E5"> this bound has increased quite</font>

424
00:16:05,040 --> 00:16:10,349
dramatically<font color="#CCCCCC"> so the idea is if you</font><font color="#E5E5E5"> were</font>

425
00:16:07,200 --> 00:16:12,030
happy<font color="#CCCCCC"> with this level of robustness but</font>

426
00:16:10,350 --> 00:16:15,290
suddenly we just get this<font color="#CCCCCC"> level</font><font color="#E5E5E5"> of</font>

427
00:16:12,030 --> 00:16:17,819
robustness for free then we<font color="#CCCCCC"> can</font>

428
00:16:15,290 --> 00:16:20,069
reallocate<font color="#E5E5E5"> some of that robustness to</font>

429
00:16:17,820 --> 00:16:23,130
<font color="#E5E5E5">get better throughput</font><font color="#CCCCCC"> so at the</font><font color="#E5E5E5"> end of</font>

430
00:16:20,070 --> 00:16:24,750
the day the user the<font color="#CCCCCC"> server's get to set</font>

431
00:16:23,130 --> 00:16:26,730
<font color="#E5E5E5">these parameters however they want</font><font color="#CCCCCC"> l</font>

432
00:16:24,750 --> 00:16:28,440
here is<font color="#E5E5E5"> the number of servers T is that</font>

433
00:16:26,730 --> 00:16:30,240
privacy threshold so what we want<font color="#E5E5E5"> to do</font>

434
00:16:28,440 --> 00:16:31,920
is keep<font color="#CCCCCC"> L and T fixed we want to say</font>

435
00:16:30,240 --> 00:16:34,020
there's this many servers<font color="#E5E5E5"> this many of</font>

436
00:16:31,920 --> 00:16:35,459
<font color="#E5E5E5">them conclude and we get to play with</font>

437
00:16:34,020 --> 00:16:36,900
<font color="#CCCCCC">these other parameters I didn't</font><font color="#E5E5E5"> talk</font>

438
00:16:35,460 --> 00:16:40,170
<font color="#E5E5E5">about tau but it's discussed in the</font>

439
00:16:36,900 --> 00:16:42,810
paper<font color="#E5E5E5"> and the observation is we can set</font>

440
00:16:40,170 --> 00:16:45,990
<font color="#E5E5E5">Q and</font><font color="#CCCCCC"> u however we want up until V gets</font>

441
00:16:42,810 --> 00:16:47,939
<font color="#E5E5E5">down to</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> and so by n V is the number</font>

442
00:16:45,990 --> 00:16:49,710
<font color="#CCCCCC">of malicious servers we can tolerate</font><font color="#E5E5E5"> so</font>

443
00:16:47,940 --> 00:16:51,690
by reducing<font color="#CCCCCC"> this number of malicious</font>

444
00:16:49,710 --> 00:16:54,180
servers we can increase<font color="#E5E5E5"> those</font><font color="#CCCCCC"> Q&U</font>

445
00:16:51,690 --> 00:16:56,910
parameters arbitrarily to whatever level

446
00:16:54,180 --> 00:16:58,880
<font color="#E5E5E5">we want</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> long as this</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> equality</font>

447
00:16:56,910 --> 00:17:01,350
<font color="#CCCCCC">is satisfied everything</font><font color="#E5E5E5"> will still work</font>

448
00:16:58,880 --> 00:17:04,619
<font color="#CCCCCC">so that was everything I</font><font color="#E5E5E5"> wanted to take</font>

449
00:17:01,350 --> 00:17:07,020
away<font color="#E5E5E5"> or wanted to say my</font><font color="#CCCCCC"> take away is</font>

450
00:17:04,619 --> 00:17:09,659
that<font color="#E5E5E5"> if you use ramp schemes in ITP</font><font color="#CCCCCC"> IR</font>

451
00:17:07,020 --> 00:17:11,099
you<font color="#CCCCCC"> can get very fast this still slow</font>

452
00:17:09,660 --> 00:17:12,660
compared to<font color="#E5E5E5"> non private but fast</font>

453
00:17:11,099 --> 00:17:17,000
compared to<font color="#E5E5E5"> everything else</font><font color="#CCCCCC"> I have an</font>

454
00:17:12,660 --> 00:17:17,000
information<font color="#CCCCCC"> retrieval</font><font color="#E5E5E5"> okay</font>

