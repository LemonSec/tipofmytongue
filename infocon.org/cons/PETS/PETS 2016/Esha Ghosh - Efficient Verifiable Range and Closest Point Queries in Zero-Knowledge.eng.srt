1
00:00:00,000 --> 00:00:04,410
so<font color="#E5E5E5"> I'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk about</font><font color="#CCCCCC"> our work on</font>

2
00:00:02,100 --> 00:00:06,569
efficient verifiable range in closest

3
00:00:04,410 --> 00:00:09,030
point queries in zero knowledge and this

4
00:00:06,569 --> 00:00:10,860
is joint work with a brown<font color="#E5E5E5"> Adam now Oh</font>

5
00:00:09,030 --> 00:00:12,780
leo domenico who's now a researcher at

6
00:00:10,860 --> 00:00:16,560
Microsoft Research and my advisor

7
00:00:12,780 --> 00:00:19,140
Roberta<font color="#CCCCCC"> tomasi at</font><font color="#E5E5E5"> Brown so with the</font>

8
00:00:16,560 --> 00:00:21,960
advent of cloud computing both

9
00:00:19,140 --> 00:00:24,029
corporations and individuals add up

10
00:00:21,960 --> 00:00:26,970
cloud services to outsource a large

11
00:00:24,029 --> 00:00:29,849
amount of data<font color="#E5E5E5"> and computations now</font>

12
00:00:26,970 --> 00:00:32,250
however the<font color="#E5E5E5"> fact that the data owner is</font>

13
00:00:29,849 --> 00:00:34,469
not<font color="#E5E5E5"> in possession physical possession of</font>

14
00:00:32,250 --> 00:00:36,989
the data anymore raises obvious

15
00:00:34,469 --> 00:00:39,140
integrity issues and challenges but

16
00:00:36,989 --> 00:00:42,780
that's<font color="#E5E5E5"> not</font><font color="#CCCCCC"> all moreover often</font>

17
00:00:39,140 --> 00:00:45,120
third-party clients are allowed partial

18
00:00:42,780 --> 00:00:49,530
access to this out source data which

19
00:00:45,120 --> 00:00:52,828
raises privacy issues so traditionally

20
00:00:49,530 --> 00:00:55,020
<font color="#CCCCCC">this</font><font color="#E5E5E5"> cloud databases has been studied in</font>

21
00:00:52,829 --> 00:00:57,930
the<font color="#E5E5E5"> following three party model so a</font>

22
00:00:55,020 --> 00:01:00,210
trusted owner of<font color="#CCCCCC"> the data outsourced the</font>

23
00:00:57,930 --> 00:01:02,010
pre processes the data to generate some

24
00:01:00,210 --> 00:01:04,229
tokens specific to the data and it

25
00:01:02,010 --> 00:01:06,960
outsources the data and<font color="#E5E5E5"> the tokens to</font>

26
00:01:04,229 --> 00:01:09,780
this cloud provider and it also

27
00:01:06,960 --> 00:01:11,610
generates a short succinct information

28
00:01:09,780 --> 00:01:13,439
about the data which it posts publicly

29
00:01:11,610 --> 00:01:15,659
which is called PKD and it goes offline

30
00:01:13,439 --> 00:01:17,580
from this whole phase and later when

31
00:01:15,659 --> 00:01:19,560
clients want to query the data it

32
00:01:17,580 --> 00:01:21,750
interacts with<font color="#E5E5E5"> the server to ask</font>

33
00:01:19,560 --> 00:01:24,270
<font color="#E5E5E5">questions about the data and get the</font>

34
00:01:21,750 --> 00:01:26,030
corresponding answers but because of the

35
00:01:24,270 --> 00:01:28,470
integrity<font color="#E5E5E5"> issues to additionally the</font>

36
00:01:26,030 --> 00:01:30,990
threat model that has been studies is

37
00:01:28,470 --> 00:01:33,240
the adversarial server which means the

38
00:01:30,990 --> 00:01:34,949
client does not necessarily believe that

39
00:01:33,240 --> 00:01:37,710
the server is giving the correct answer

40
00:01:34,950 --> 00:01:40,259
so the client<font color="#E5E5E5"> also expects a proof of</font>

41
00:01:37,710 --> 00:01:42,149
<font color="#E5E5E5">the answer and then the</font><font color="#CCCCCC"> client will be</font>

42
00:01:40,259 --> 00:01:44,399
able<font color="#E5E5E5"> to verify this proof against this</font>

43
00:01:42,150 --> 00:01:48,000
short public digest information that has

44
00:01:44,399 --> 00:01:49,920
been<font color="#E5E5E5"> posted so but in this setting and</font>

45
00:01:48,000 --> 00:01:51,869
there has been<font color="#CCCCCC"> a huge amount of work in</font>

46
00:01:49,920 --> 00:01:53,460
this setting and many primitives and

47
00:01:51,869 --> 00:01:55,470
data structures have been developed in

48
00:01:53,460 --> 00:01:57,960
this technique but the<font color="#E5E5E5"> problem with this</font>

49
00:01:55,470 --> 00:01:59,880
technique<font color="#E5E5E5"> is the proofs often reveal way</font>

50
00:01:57,960 --> 00:02:02,610
more information that can be inferred

51
00:01:59,880 --> 00:02:05,039
from the answer itself so to give<font color="#CCCCCC"> you a</font>

52
00:02:02,610 --> 00:02:07,289
very quick example<font color="#CCCCCC"> Markel hash string</font>

53
00:02:05,040 --> 00:02:09,840
which<font color="#CCCCCC"> is one of the most widely</font><font color="#E5E5E5"> used</font>

54
00:02:07,290 --> 00:02:12,330
data structures in this setting if you

55
00:02:09,840 --> 00:02:13,560
think about it let's say the owner wants

56
00:02:12,330 --> 00:02:15,810
to<font color="#E5E5E5"> authenticate</font>

57
00:02:13,560 --> 00:02:18,150
this data items which are the leaves of

58
00:02:15,810 --> 00:02:20,280
<font color="#CCCCCC">the Merkel tree so it generates this</font>

59
00:02:18,150 --> 00:02:22,709
marquetry on top of it<font color="#E5E5E5"> the marquetry is</font>

60
00:02:20,280 --> 00:02:24,720
the authentication token that it sends

61
00:02:22,709 --> 00:02:27,060
to the<font color="#E5E5E5"> server and this sucks in digest</font>

62
00:02:24,720 --> 00:02:29,940
is the root of the Merkel tree which is

63
00:02:27,060 --> 00:02:32,670
posts publicly now at a later point when

64
00:02:29,940 --> 00:02:36,090
the client wants to query<font color="#E5E5E5"> for a data say</font>

65
00:02:32,670 --> 00:02:38,369
if is X in my database the proof of this

66
00:02:36,090 --> 00:02:40,500
answer is basically the sibling path

67
00:02:38,370 --> 00:02:42,660
which are the yellow nodes in this graph

68
00:02:40,500 --> 00:02:44,190
but as you can see the sibling for<font color="#E5E5E5"> the</font>

69
00:02:42,660 --> 00:02:46,079
height of the sibling path itself

70
00:02:44,190 --> 00:02:48,000
reveals the number of<font color="#CCCCCC"> elements in the</font>

71
00:02:46,080 --> 00:02:50,040
database but that's not<font color="#E5E5E5"> all when the</font>

72
00:02:48,000 --> 00:02:51,360
data is stored in a order<font color="#E5E5E5"> so it's</font>

73
00:02:50,040 --> 00:02:53,190
basically also reveals<font color="#CCCCCC"> the rank</font>

74
00:02:51,360 --> 00:02:55,769
information of the data<font color="#E5E5E5"> that is stored</font>

75
00:02:53,190 --> 00:02:57,359
in<font color="#E5E5E5"> the database so this</font><font color="#CCCCCC"> is just one of</font>

76
00:02:55,769 --> 00:03:00,420
<font color="#E5E5E5">the most</font><font color="#CCCCCC"> widely</font><font color="#E5E5E5"> used techniques and it</font>

77
00:02:57,360 --> 00:03:01,980
leaks a lot of information just<font color="#E5E5E5"> to give</font>

78
00:03:00,420 --> 00:03:04,950
you an example<font color="#E5E5E5"> that these data</font>

79
00:03:01,980 --> 00:03:07,470
structures are not privacy-preserving so

80
00:03:04,950 --> 00:03:09,359
is<font color="#E5E5E5"> this a problem yes this is not just a</font>

81
00:03:07,470 --> 00:03:11,340
theoretical risk so there have been many

82
00:03:09,360 --> 00:03:21,989
practical attacks demonstrated in this

83
00:03:11,340 --> 00:03:23,820
threat model sorry right yeah so there

84
00:03:21,989 --> 00:03:26,670
have been so some of these applications

85
00:03:23,820 --> 00:03:28,140
infuse DNS security<font color="#CCCCCC"> selective release of</font>

86
00:03:26,670 --> 00:03:29,970
medical health records we have heard a

87
00:03:28,140 --> 00:03:32,670
<font color="#CCCCCC">lot of talks about health records today</font>

88
00:03:29,970 --> 00:03:35,069
but to give you a concrete example as as

89
00:03:32,670 --> 00:03:36,839
a warm-up think of an organization which

90
00:03:35,069 --> 00:03:41,040
stores its email<font color="#E5E5E5"> records of its</font>

91
00:03:36,840 --> 00:03:42,870
employees on<font color="#E5E5E5"> a cloud server now when in</font>

92
00:03:41,040 --> 00:03:45,540
case of some malicious activity

93
00:03:42,870 --> 00:03:48,450
sometimes this<font color="#E5E5E5"> third-party auditor is</font>

94
00:03:45,540 --> 00:03:50,910
given partial access to this<font color="#E5E5E5"> record so</font>

95
00:03:48,450 --> 00:03:53,250
for example this auditor is given access

96
00:03:50,910 --> 00:03:55,500
only to<font color="#CCCCCC"> 4th to 14th April because there</font>

97
00:03:53,250 --> 00:03:58,590
was some some suspicious activity going

98
00:03:55,500 --> 00:04:00,480
on and it is allowed given access token

99
00:03:58,590 --> 00:04:03,090
to access<font color="#E5E5E5"> only that part of the record</font>

100
00:04:00,480 --> 00:04:05,179
now in this<font color="#E5E5E5"> case since the record is not</font>

101
00:04:03,090 --> 00:04:07,590
coming from<font color="#CCCCCC"> the organization itself the</font>

102
00:04:05,180 --> 00:04:09,150
auditor needs<font color="#E5E5E5"> to prove that it has not</font>

103
00:04:07,590 --> 00:04:11,040
been tampered the records have not been

104
00:04:09,150 --> 00:04:12,930
tampered<font color="#E5E5E5"> with but additionally because</font>

105
00:04:11,040 --> 00:04:14,850
this is email because<font color="#E5E5E5"> a little privacy</font>

106
00:04:12,930 --> 00:04:17,220
sensitive information it's important to

107
00:04:14,850 --> 00:04:18,930
not so when you prove you have to also

108
00:04:17,220 --> 00:04:20,070
give a proof that the answer is complete

109
00:04:18,930 --> 00:04:22,590
<font color="#E5E5E5">meaning that the server is not</font>

110
00:04:20,070 --> 00:04:24,690
withholding any record that it should

111
00:04:22,590 --> 00:04:26,130
have returned but<font color="#E5E5E5"> the proof should not</font>

112
00:04:24,690 --> 00:04:28,680
be revealing any

113
00:04:26,130 --> 00:04:33,000
mission beyond this range of data for to

114
00:04:28,680 --> 00:04:36,240
14th April so to study this model

115
00:04:33,000 --> 00:04:38,400
formally we initiated the study of this

116
00:04:36,240 --> 00:04:40,170
formal model where basically it is the

117
00:04:38,400 --> 00:04:43,200
three-party model with this additional

118
00:04:40,170 --> 00:04:44,550
setting of privacy against the client so

119
00:04:43,200 --> 00:04:46,050
if you recall the three-party

120
00:04:44,550 --> 00:04:48,240
traditional model there was only one

121
00:04:46,050 --> 00:04:50,490
adversary which is the server so in this

122
00:04:48,240 --> 00:04:53,100
model even the client can be adversarial

123
00:04:50,490 --> 00:04:54,720
meaning that<font color="#E5E5E5"> the client does not trust</font>

124
00:04:53,100 --> 00:04:58,680
the server about<font color="#CCCCCC"> the integrity of the</font>

125
00:04:54,720 --> 00:05:00,480
proof but the client we should not learn

126
00:04:58,680 --> 00:05:02,940
or should not be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to infer more</font>

127
00:05:00,480 --> 00:05:05,100
information about the query answer from

128
00:05:02,940 --> 00:05:08,640
the proofs than from the answer itself

129
00:05:05,100 --> 00:05:10,110
so in if more formally it is like a zero

130
00:05:08,640 --> 00:05:11,909
knowledge privacy meaning the proof

131
00:05:10,110 --> 00:05:14,040
should be simulator but if you did not

132
00:05:11,910 --> 00:05:15,870
understand<font color="#CCCCCC"> what that means nevermind it</font>

133
00:05:14,040 --> 00:05:17,280
basically<font color="#E5E5E5"> means they're done the proof</font>

134
00:05:15,870 --> 00:05:20,790
<font color="#E5E5E5">should not reveal anything beyond the</font>

135
00:05:17,280 --> 00:05:22,650
returned answer<font color="#CCCCCC"> okay so the goal of</font>

136
00:05:20,790 --> 00:05:24,900
designing this kind of primitives is

137
00:05:22,650 --> 00:05:27,090
threefold obviously it should<font color="#CCCCCC"> be</font>

138
00:05:24,900 --> 00:05:29,669
maintaining integrity and privacy in a

139
00:05:27,090 --> 00:05:31,530
provable way but another very important

140
00:05:29,670 --> 00:05:33,180
aspect in this primitives is that it

141
00:05:31,530 --> 00:05:35,190
should<font color="#CCCCCC"> be time and space efficient for</font>

142
00:05:33,180 --> 00:05:37,200
all the parties<font color="#E5E5E5"> involved otherwise one</font>

143
00:05:35,190 --> 00:05:39,090
of the major<font color="#E5E5E5"> benefits of cloud adopting</font>

144
00:05:37,200 --> 00:05:44,490
cloud services which is scalability is

145
00:05:39,090 --> 00:05:46,260
defeated so<font color="#E5E5E5"> okay so</font><font color="#CCCCCC"> with that have</font>

146
00:05:44,490 --> 00:05:48,480
talked about<font color="#E5E5E5"> the motivation and the</font>

147
00:05:46,260 --> 00:05:51,480
construction now let's<font color="#E5E5E5"> jump into the</font>

148
00:05:48,480 --> 00:05:53,790
work that we do<font color="#CCCCCC"> in this paper so in this</font>

149
00:05:51,480 --> 00:05:57,090
paper<font color="#E5E5E5"> we are working with range queries</font>

150
00:05:53,790 --> 00:05:58,830
<font color="#E5E5E5">so what meaning</font><font color="#CCCCCC"> that the data</font><font color="#E5E5E5"> store we</font>

151
00:05:57,090 --> 00:06:02,190
consider is a data store of key value

152
00:05:58,830 --> 00:06:03,780
pairs but<font color="#E5E5E5"> the keys are you can think of</font>

153
00:06:02,190 --> 00:06:06,480
them as binary strings are coming from a

154
00:06:03,780 --> 00:06:09,239
totally ordered universe and the query

155
00:06:06,480 --> 00:06:11,670
here is a range query meaning the client

156
00:06:09,240 --> 00:06:14,040
asks<font color="#E5E5E5"> return me all the keys from a given</font>

157
00:06:11,670 --> 00:06:15,930
interval A to B so the server should

158
00:06:14,040 --> 00:06:17,580
respond to be the correct key value

159
00:06:15,930 --> 00:06:18,660
pairs and the proof<font color="#CCCCCC"> that the answer is</font>

160
00:06:17,580 --> 00:06:20,460
complete if you think<font color="#E5E5E5"> of the email</font>

161
00:06:18,660 --> 00:06:23,100
record<font color="#CCCCCC"> is just that that was an example</font>

162
00:06:20,460 --> 00:06:25,620
<font color="#CCCCCC">of range query and this problem</font><font color="#E5E5E5"> has been</font>

163
00:06:23,100 --> 00:06:27,810
studied by ostrosky<font color="#CCCCCC"> rock offense</font>

164
00:06:25,620 --> 00:06:30,840
<font color="#CCCCCC">movement in a slightly stronger to party</font>

165
00:06:27,810 --> 00:06:32,430
model in 2004 but this result was mostly

166
00:06:30,840 --> 00:06:36,500
of theoretical interest and there has

167
00:06:32,430 --> 00:06:39,230
not been<font color="#E5E5E5"> much progress after</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> so</font>

168
00:06:36,500 --> 00:06:41,030
okay so let's take<font color="#E5E5E5"> a moment and try to</font>

169
00:06:39,230 --> 00:06:43,520
understand why this<font color="#E5E5E5"> is difficult to do</font>

170
00:06:41,030 --> 00:06:46,250
so<font color="#CCCCCC"> think of this tiny database which is</font>

171
00:06:43,520 --> 00:06:48,289
<font color="#E5E5E5">our toy database as</font><font color="#CCCCCC"> a database of email</font>

172
00:06:46,250 --> 00:06:51,290
records and corresponding to the query

173
00:06:48,290 --> 00:06:53,330
<font color="#E5E5E5">or</font><font color="#CCCCCC"> 4th to 14th April the mark the</font>

174
00:06:51,290 --> 00:06:56,990
highlighted records should be returned

175
00:06:53,330 --> 00:06:58,909
to the client now the client<font color="#E5E5E5"> needs to</font>

176
00:06:56,990 --> 00:07:00,980
know that<font color="#E5E5E5"> these records are authentic</font>

177
00:06:58,910 --> 00:07:04,880
but it also<font color="#CCCCCC"> needs to</font><font color="#E5E5E5"> know that no record</font>

178
00:07:00,980 --> 00:07:06,710
has been<font color="#CCCCCC"> withheld so as if you there are</font>

179
00:07:04,880 --> 00:07:08,300
techniques<font color="#E5E5E5"> that you could employ like</font>

180
00:07:06,710 --> 00:07:10,370
<font color="#CCCCCC">Markel hash tree which will</font><font color="#E5E5E5"> not be</font>

181
00:07:08,300 --> 00:07:12,950
privacy-preserving but one obvious

182
00:07:10,370 --> 00:07:15,230
privacy-preserving way to go is maybe

183
00:07:12,950 --> 00:07:16,969
the owner signed all the<font color="#E5E5E5"> keys that are</font>

184
00:07:15,230 --> 00:07:18,230
present<font color="#E5E5E5"> in the database and also all the</font>

185
00:07:16,970 --> 00:07:20,360
keys that are not<font color="#CCCCCC"> present in the</font>

186
00:07:18,230 --> 00:07:23,419
database since the universe is known

187
00:07:20,360 --> 00:07:24,740
already so for this empty spaces like

188
00:07:23,419 --> 00:07:26,270
<font color="#CCCCCC">forth April</font><font color="#E5E5E5"> there's no record</font>

189
00:07:24,740 --> 00:07:28,010
corresponding to that the owner could

190
00:07:26,270 --> 00:07:30,469
have generated a special signature

191
00:07:28,010 --> 00:07:32,810
saying<font color="#CCCCCC"> forth April but nothing is there</font>

192
00:07:30,470 --> 00:07:35,540
but obviously<font color="#CCCCCC"> this is privacy preserving</font>

193
00:07:32,810 --> 00:07:37,280
but this will be huge immensely

194
00:07:35,540 --> 00:07:39,500
inefficient because that means the

195
00:07:37,280 --> 00:07:41,780
answer is basically proportional to the

196
00:07:39,500 --> 00:07:43,220
number of<font color="#E5E5E5"> keys in the entire range and</font>

197
00:07:41,780 --> 00:07:45,950
not the number<font color="#E5E5E5"> of records that are</font>

198
00:07:43,220 --> 00:07:47,479
actually<font color="#CCCCCC"> present in the database so this</font>

199
00:07:45,950 --> 00:07:50,510
is<font color="#E5E5E5"> this is sort of the challenge by</font>

200
00:07:47,479 --> 00:07:54,650
knife solutions do not work very<font color="#CCCCCC"> quickly</font>

201
00:07:50,510 --> 00:07:56,479
so what is our idea so very at a high

202
00:07:54,650 --> 00:07:59,000
level the overview of<font color="#E5E5E5"> our construction</font>

203
00:07:56,479 --> 00:08:01,099
is use signature elements for the

204
00:07:59,000 --> 00:08:02,780
members that are present in<font color="#E5E5E5"> the database</font>

205
00:08:01,100 --> 00:08:04,540
that's<font color="#CCCCCC"> very easy</font><font color="#E5E5E5"> to do but the</font>

206
00:08:02,780 --> 00:08:07,669
challenging part is how to prove that

207
00:08:04,540 --> 00:08:09,110
portions the portions<font color="#CCCCCC"> that are</font><font color="#E5E5E5"> empty you</font>

208
00:08:07,669 --> 00:08:11,900
know in a sense without revealing

209
00:08:09,110 --> 00:08:13,900
anything else and for<font color="#CCCCCC"> that we use</font>

210
00:08:11,900 --> 00:08:18,140
hierarchical identity based encryption

211
00:08:13,900 --> 00:08:21,039
so I will<font color="#E5E5E5"> be quickly recap what that</font>

212
00:08:18,140 --> 00:08:23,360
means<font color="#E5E5E5"> before we go to the construction</font>

213
00:08:21,040 --> 00:08:26,030
so hierarchical identity based

214
00:08:23,360 --> 00:08:27,800
encryption this was<font color="#CCCCCC"> also in one of</font><font color="#E5E5E5"> the</font>

215
00:08:26,030 --> 00:08:30,109
key not talks today so it basically

216
00:08:27,800 --> 00:08:32,049
allows one to efficiently derive

217
00:08:30,110 --> 00:08:34,520
encryption and decryption keys

218
00:08:32,049 --> 00:08:36,919
respecting the access control based on a

219
00:08:34,520 --> 00:08:38,390
hierarchy of identity so the identities

220
00:08:36,919 --> 00:08:41,030
are public identities which you can

221
00:08:38,390 --> 00:08:42,679
think<font color="#E5E5E5"> of arbitrary binary strings now</font>

222
00:08:41,030 --> 00:08:45,740
the hierarchy of identities you can

223
00:08:42,679 --> 00:08:47,780
think<font color="#E5E5E5"> of a full binary suffix tree</font><font color="#CCCCCC"> okay</font>

224
00:08:45,740 --> 00:08:48,700
so what is the property like in any

225
00:08:47,780 --> 00:08:50,829
encryption scheme

226
00:08:48,700 --> 00:08:54,130
a message can be encrypted for any

227
00:08:50,830 --> 00:08:55,840
public ID by anybody but whoever<font color="#E5E5E5"> owns</font>

228
00:08:54,130 --> 00:08:58,660
<font color="#E5E5E5">the secret key corresponding to that</font>

229
00:08:55,840 --> 00:09:00,250
public ID will be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to decrypt it so</font>

230
00:08:58,660 --> 00:09:03,189
if you think<font color="#E5E5E5"> of the hierarchy</font><font color="#CCCCCC"> of ID</font>

231
00:09:00,250 --> 00:09:05,560
trees of depth<font color="#E5E5E5"> 3 the ID for a node 0 0</font>

232
00:09:03,190 --> 00:09:08,410
will be<font color="#CCCCCC"> it's two children 0 0 1 and 0 0</font>

233
00:09:05,560 --> 00:09:11,410
0 ok now the additional property here is

234
00:09:08,410 --> 00:09:14,050
that the unknown<font color="#E5E5E5"> can derive secret peace</font>

235
00:09:11,410 --> 00:09:15,819
for all his<font color="#E5E5E5"> descendant IDs which means</font>

236
00:09:14,050 --> 00:09:18,310
if you encrypt a message for a

237
00:09:15,820 --> 00:09:20,020
particular public ID of course that

238
00:09:18,310 --> 00:09:22,030
person with that secret key will be able

239
00:09:20,020 --> 00:09:24,010
<font color="#E5E5E5">to decrypt it but it will be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font>

240
00:09:22,030 --> 00:09:26,199
<font color="#E5E5E5">decrypt any message intended for his</font>

241
00:09:24,010 --> 00:09:30,189
children also but<font color="#E5E5E5"> nothing beyond that</font>

242
00:09:26,200 --> 00:09:32,560
sub tree<font color="#E5E5E5"> ok so in an example quick</font>

243
00:09:30,190 --> 00:09:36,340
example if somebody had the<font color="#E5E5E5"> pub secret</font>

244
00:09:32,560 --> 00:09:38,739
key 40 this<font color="#E5E5E5"> public ID will be able to</font>

245
00:09:36,340 --> 00:09:42,300
derive secret keys for all this children

246
00:09:38,740 --> 00:09:45,010
<font color="#E5E5E5">ok but nothing beyond that sub tree ok</font>

247
00:09:42,300 --> 00:09:48,040
now now let's step back to range queries

248
00:09:45,010 --> 00:09:50,170
and see what we can<font color="#E5E5E5"> do so with our toy</font>

249
00:09:48,040 --> 00:09:52,060
example let's say these are<font color="#CCCCCC"> the binary</font>

250
00:09:50,170 --> 00:09:54,760
strings which are the keys of the data

251
00:09:52,060 --> 00:09:56,739
store<font color="#E5E5E5"> ok 0 to 15 and the year once</font>

252
00:09:54,760 --> 00:09:58,270
marked in yellow are actually the

253
00:09:56,740 --> 00:10:00,250
elements<font color="#E5E5E5"> of the data base those key</font>

254
00:09:58,270 --> 00:10:02,860
value pairs are present in the database

255
00:10:00,250 --> 00:10:06,430
so implicitly you can think of<font color="#E5E5E5"> this</font>

256
00:10:02,860 --> 00:10:08,110
binary suffix tree where if this is a

257
00:10:06,430 --> 00:10:11,650
full binary suffix tree of height k

258
00:10:08,110 --> 00:10:17,020
where if yes oh<font color="#E5E5E5"> we're each beat length</font>

259
00:10:11,650 --> 00:10:19,810
is K bits<font color="#E5E5E5"> ok so the idea of</font><font color="#CCCCCC"> doing this</font>

260
00:10:17,020 --> 00:10:22,390
<font color="#CCCCCC">is basically the owner can prune the red</font>

261
00:10:19,810 --> 00:10:24,369
parts which are the path from the<font color="#E5E5E5"> leaf</font>

262
00:10:22,390 --> 00:10:29,080
to the<font color="#E5E5E5"> root</font><font color="#CCCCCC"> of the member elements and</font>

263
00:10:24,370 --> 00:10:31,630
this it will be left with a a forest and

264
00:10:29,080 --> 00:10:34,210
this forest take the roots of the forest

265
00:10:31,630 --> 00:10:35,830
which are this pink nodes ok so the at

266
00:10:34,210 --> 00:10:37,690
the setup phase the owner will basically

267
00:10:35,830 --> 00:10:40,120
generate signature for all the member

268
00:10:37,690 --> 00:10:42,070
elements and we'll set up a hype scheme

269
00:10:40,120 --> 00:10:45,580
and generate secret keys for the roots

270
00:10:42,070 --> 00:10:49,090
of this forest and then owner goes

271
00:10:45,580 --> 00:10:51,370
offline now in the query phase let's say

272
00:10:49,090 --> 00:10:53,950
the our typical example for 214 in the

273
00:10:51,370 --> 00:10:55,450
first phase of the query the server will

274
00:10:53,950 --> 00:10:57,940
return the signature of the<font color="#E5E5E5"> member</font>

275
00:10:55,450 --> 00:10:59,560
elements now<font color="#E5E5E5"> notice that ok let's</font>

276
00:10:57,940 --> 00:11:02,250
quickly talk<font color="#CCCCCC"> about what is the canonical</font>

277
00:10:59,560 --> 00:11:04,469
covering or CC so a canonical

278
00:11:02,250 --> 00:11:06,990
burung with respect to arrange a<font color="#CCCCCC"> B is</font>

279
00:11:04,470 --> 00:11:10,350
basically the minimum set minimal set of

280
00:11:06,990 --> 00:11:12,030
<font color="#E5E5E5">nodes that cover it completely so in the</font>

281
00:11:10,350 --> 00:11:13,770
interest of time<font color="#CCCCCC"> I am</font><font color="#E5E5E5"> going fast over</font>

282
00:11:12,030 --> 00:11:15,329
this but catch me offline if you want to

283
00:11:13,770 --> 00:11:16,770
talk<font color="#E5E5E5"> about it but this is unique with</font>

284
00:11:15,330 --> 00:11:19,590
respect to a height of a tree and<font color="#E5E5E5"> a</font>

285
00:11:16,770 --> 00:11:21,390
given range so basically once the memory

286
00:11:19,590 --> 00:11:23,940
elements are returned that uniquely

287
00:11:21,390 --> 00:11:26,790
breaks up the query<font color="#E5E5E5"> drain into a bunch</font>

288
00:11:23,940 --> 00:11:28,470
of sub-ranges and the canonical covering

289
00:11:26,790 --> 00:11:30,089
for the sub ranges<font color="#CCCCCC"> can be computed</font>

290
00:11:28,470 --> 00:11:32,640
independently by the client and<font color="#E5E5E5"> the</font>

291
00:11:30,090 --> 00:11:35,250
server so the<font color="#CCCCCC"> bold nodes here the client</font>

292
00:11:32,640 --> 00:11:37,380
can encrypt messages under those<font color="#E5E5E5"> IDs and</font>

293
00:11:35,250 --> 00:11:39,240
the server either have possesses those

294
00:11:37,380 --> 00:11:41,820
secret grease from<font color="#CCCCCC"> the owner</font><font color="#E5E5E5"> or you can</font>

295
00:11:39,240 --> 00:11:44,610
derive it by the property of five and it

296
00:11:41,820 --> 00:11:46,140
can prove<font color="#CCCCCC"> that those and decrypt the</font>

297
00:11:44,610 --> 00:11:48,150
nonces basically that's the challenge

298
00:11:46,140 --> 00:11:50,100
response phase and this is the

299
00:11:48,150 --> 00:11:52,370
complexities proportional except with

300
00:11:50,100 --> 00:11:54,840
the<font color="#E5E5E5"> K square factor to the answer size</font>

301
00:11:52,370 --> 00:11:56,790
which is good and this is a comparison

302
00:11:54,840 --> 00:11:58,320
with the ORS scheme which was not<font color="#E5E5E5"> even</font>

303
00:11:56,790 --> 00:12:00,930
zero knowledge the proof size is much

304
00:11:58,320 --> 00:12:02,220
better<font color="#CCCCCC"> and it's stateless and so on</font><font color="#E5E5E5"> so</font>

305
00:12:00,930 --> 00:12:04,199
<font color="#E5E5E5">I'm going</font><font color="#CCCCCC"> to quickly go to the</font>

306
00:12:02,220 --> 00:12:05,820
implementation<font color="#CCCCCC"> that we have done so we</font>

307
00:12:04,200 --> 00:12:08,339
have implemented returns<font color="#E5E5E5"> both synthetic</font>

308
00:12:05,820 --> 00:12:10,589
and real data so as<font color="#E5E5E5"> you can see</font><font color="#CCCCCC"> you can</font>

309
00:12:08,339 --> 00:12:12,360
<font color="#E5E5E5">you can imagine if the cliff the data is</font>

310
00:12:10,589 --> 00:12:14,550
clustered if the<font color="#CCCCCC"> kings are</font><font color="#E5E5E5"> clustered and</font>

311
00:12:12,360 --> 00:12:15,960
there are long empty ranges that's good

312
00:12:14,550 --> 00:12:17,939
for<font color="#CCCCCC"> all the parties because you</font><font color="#E5E5E5"> will be</font>

313
00:12:15,960 --> 00:12:20,040
<font color="#E5E5E5">able to cover it with the node which is</font>

314
00:12:17,940 --> 00:12:22,170
very higher up in the hierarchy of the

315
00:12:20,040 --> 00:12:24,030
tree otherwise it's bad and<font color="#CCCCCC"> that is the</font>

316
00:12:22,170 --> 00:12:25,829
<font color="#CCCCCC">result we see here for different</font><font color="#E5E5E5"> Saudi</font>

317
00:12:24,030 --> 00:12:30,120
dollar is basically completely random

318
00:12:25,830 --> 00:12:32,310
<font color="#E5E5E5">database and d16 is data</font><font color="#CCCCCC"> these sixteens</font>

319
00:12:30,120 --> 00:12:34,680
database where each cluster is of<font color="#E5E5E5"> 16</font>

320
00:12:32,310 --> 00:12:37,109
keys and DN basically one huge craft

321
00:12:34,680 --> 00:12:38,189
cluster so as we see the the as you

322
00:12:37,110 --> 00:12:40,350
increase the classroom level the

323
00:12:38,190 --> 00:12:42,570
performance improves for all the parties

324
00:12:40,350 --> 00:12:44,640
and this is a chart<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> variants and</font>

325
00:12:42,570 --> 00:12:46,800
<font color="#E5E5E5">we also implemented it on real data sets</font>

326
00:12:44,640 --> 00:12:49,199
one was the<font color="#E5E5E5"> in raw and email data set</font>

327
00:12:46,800 --> 00:12:52,199
and another was the Boston<font color="#E5E5E5"> taxi dataset</font>

328
00:12:49,200 --> 00:12:54,390
we notice<font color="#CCCCCC"> that the Boston</font><font color="#E5E5E5"> taxi</font><font color="#CCCCCC"> data sets</font>

329
00:12:52,200 --> 00:12:56,100
showed more clustering property so

330
00:12:54,390 --> 00:12:57,810
therefore<font color="#CCCCCC"> it showed much better</font>

331
00:12:56,100 --> 00:13:01,170
performance at the<font color="#CCCCCC"> enron email that</font>

332
00:12:57,810 --> 00:13:03,359
aside and finally to conclude so we

333
00:13:01,170 --> 00:13:05,280
presented an experimental evaluated this

334
00:13:03,360 --> 00:13:07,080
<font color="#CCCCCC">1d range queries and as an application</font>

335
00:13:05,280 --> 00:13:09,600
<font color="#E5E5E5">we show how to do closest point queries</font>

336
00:13:07,080 --> 00:13:12,480
which is basically very simple lancer

337
00:13:09,600 --> 00:13:14,420
size is constant in that case and two

338
00:13:12,480 --> 00:13:16,399
interesting open directions that

339
00:13:14,420 --> 00:13:18,050
did not address in this paper are<font color="#E5E5E5"> to</font>

340
00:13:16,399 --> 00:13:21,170
extend this to multi-dimensional data

341
00:13:18,050 --> 00:13:23,630
sets and also to handle dynamic data

342
00:13:21,170 --> 00:13:27,339
sets yeah and that's<font color="#E5E5E5"> all thank you</font><font color="#CCCCCC"> for</font>

343
00:13:23,630 --> 00:13:27,339
your attention I'll be happy to take

