1
00:00:00,000 --> 00:00:09,120
so good morning<font color="#E5E5E5"> I'm going to talk to you</font>

2
00:00:05,190 --> 00:00:12,000
about how you can improve the privacy of

3
00:00:09,120 --> 00:00:16,890
error reports in for graphical

4
00:00:12,000 --> 00:00:18,930
applications so unfortunately<font color="#E5E5E5"> we</font><font color="#CCCCCC"> are all</font>

5
00:00:16,890 --> 00:00:22,230
familiar with<font color="#E5E5E5"> this sort of error reports</font>

6
00:00:18,930 --> 00:00:24,269
where your application crashes and

7
00:00:22,230 --> 00:00:27,720
you're asked to submit some error report

8
00:00:24,269 --> 00:00:29,070
to the development<font color="#CCCCCC"> team and</font><font color="#E5E5E5"> a lot of</font>

9
00:00:27,720 --> 00:00:31,009
<font color="#E5E5E5">people don't submit them because they</font>

10
00:00:29,070 --> 00:00:33,059
are rightly worried about their<font color="#CCCCCC"> privacy</font>

11
00:00:31,009 --> 00:00:34,770
here you<font color="#E5E5E5"> can see an</font><font color="#CCCCCC"> example of an</font>

12
00:00:33,059 --> 00:00:36,959
airport where<font color="#CCCCCC"> a credit credit card</font>

13
00:00:34,770 --> 00:00:40,110
number was included in the error report

14
00:00:36,960 --> 00:00:41,760
and so to be a little<font color="#E5E5E5"> bit more secure</font>

15
00:00:40,110 --> 00:00:45,149
what you want is something like<font color="#CCCCCC"> this you</font>

16
00:00:41,760 --> 00:00:48,930
would like to have some system that runs

17
00:00:45,149 --> 00:00:55,530
your application is logging the

18
00:00:48,930 --> 00:00:58,170
application for for its input and then

19
00:00:55,530 --> 00:01:00,690
would have some box that would allow you

20
00:00:58,170 --> 00:01:03,899
to remove the sensitive information in

21
00:01:00,690 --> 00:01:06,780
your that you input and would show you

22
00:01:03,899 --> 00:01:09,090
how their report looks without that

23
00:01:06,780 --> 00:01:12,869
sensitive information before submitting

24
00:01:09,090 --> 00:01:17,130
submitting it with your approval to the

25
00:01:12,869 --> 00:01:20,100
development<font color="#E5E5E5"> team and you can approach</font>

26
00:01:17,130 --> 00:01:24,449
this in<font color="#CCCCCC"> different ways one possibility</font>

27
00:01:20,100 --> 00:01:28,039
is to do input obfuscation so to replace

28
00:01:24,450 --> 00:01:32,250
the input data with some more generic

29
00:01:28,040 --> 00:01:35,130
values you can<font color="#CCCCCC"> do this on the original</font>

30
00:01:32,250 --> 00:01:36,750
execution path of the application so try

31
00:01:35,130 --> 00:01:39,600
<font color="#E5E5E5">to find out if some of the values that</font>

32
00:01:36,750 --> 00:01:42,380
were original input can be somehow

33
00:01:39,600 --> 00:01:45,869
brought into some more generic values

34
00:01:42,380 --> 00:01:47,970
another possible approach is to do this

35
00:01:45,869 --> 00:01:49,920
on all the execution paths of<font color="#CCCCCC"> the</font>

36
00:01:47,970 --> 00:01:52,470
application this has been<font color="#E5E5E5"> tried but of</font>

37
00:01:49,920 --> 00:01:54,360
course is very<font color="#E5E5E5"> expensive here if you</font><font color="#CCCCCC"> are</font>

38
00:01:52,470 --> 00:01:56,640
doing an exhaustive<font color="#CCCCCC"> search of all the</font>

39
00:01:54,360 --> 00:01:58,350
possible execution paths leading to a

40
00:01:56,640 --> 00:02:01,200
crash of an application<font color="#CCCCCC"> to find which</font>

41
00:01:58,350 --> 00:02:06,630
one has the more generic input and there

42
00:02:01,200 --> 00:02:09,270
has been<font color="#E5E5E5"> sort of a mix Midway approach</font>

43
00:02:06,630 --> 00:02:12,750
to that which was developed by us

44
00:02:09,270 --> 00:02:15,120
which is called reap the problem with

45
00:02:12,750 --> 00:02:19,050
this is that it's<font color="#E5E5E5"> mostly targeted for</font>

46
00:02:15,120 --> 00:02:21,210
console applications or text input

47
00:02:19,050 --> 00:02:24,270
applications but the world is more and

48
00:02:21,210 --> 00:02:27,690
more<font color="#E5E5E5"> using GUI applications okay this is</font>

49
00:02:24,270 --> 00:02:31,710
an<font color="#E5E5E5"> example</font><font color="#CCCCCC"> from our evaluation a TV</font>

50
00:02:27,690 --> 00:02:35,220
Guide application where basically you

51
00:02:31,710 --> 00:02:37,830
<font color="#E5E5E5">are opening the application selecting</font>

52
00:02:35,220 --> 00:02:40,380
the settings picking a channel to create

53
00:02:37,830 --> 00:02:43,650
a custom list of TV channels and then

54
00:02:40,380 --> 00:02:45,630
when you click the local<font color="#E5E5E5"> section of the</font>

55
00:02:43,650 --> 00:02:51,150
of the settings the application crashes

56
00:02:45,630 --> 00:02:52,890
okay and this is a creates a new problem

57
00:02:51,150 --> 00:02:55,950
to the<font color="#CCCCCC"> input of execration techniques</font>

58
00:02:52,890 --> 00:02:58,170
because the GUI event loops in the

59
00:02:55,950 --> 00:02:59,790
applications have so many<font color="#E5E5E5"> different</font>

60
00:02:58,170 --> 00:03:01,649
options because there are so many

61
00:02:59,790 --> 00:03:04,320
<font color="#E5E5E5">different widgets and graphical events</font>

62
00:03:01,650 --> 00:03:06,750
that can happen that<font color="#E5E5E5"> the search for a</font>

63
00:03:04,320 --> 00:03:09,299
path in the application that has a that

64
00:03:06,750 --> 00:03:11,070
<font color="#CCCCCC">is the most generic</font><font color="#E5E5E5"> just is just</font><font color="#CCCCCC"> too</font>

65
00:03:09,300 --> 00:03:13,020
large there is an<font color="#E5E5E5"> explosion of the</font>

66
00:03:11,070 --> 00:03:16,200
search space and so different<font color="#CCCCCC"> thing you</font>

67
00:03:13,020 --> 00:03:19,410
can do is try to have to minimize the

68
00:03:16,200 --> 00:03:21,480
input so not trying to have more generic

69
00:03:19,410 --> 00:03:24,630
values but just removing input from the

70
00:03:21,480 --> 00:03:26,850
that was provided<font color="#CCCCCC"> by</font><font color="#E5E5E5"> the user one</font>

71
00:03:24,630 --> 00:03:31,100
<font color="#CCCCCC">approach that</font><font color="#E5E5E5"> has already some some time</font>

72
00:03:26,850 --> 00:03:33,570
<font color="#CCCCCC">is called scratch and here the users are</font>

73
00:03:31,100 --> 00:03:35,970
explicitly asked to indicate which parts

74
00:03:33,570 --> 00:03:38,609
<font color="#E5E5E5">of their input is privacy privacy</font>

75
00:03:35,970 --> 00:03:39,959
sensitive or not and this has all sorts

76
00:03:38,610 --> 00:03:41,670
of problems that<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> imagine</font><font color="#E5E5E5"> it's</font>

77
00:03:39,959 --> 00:03:43,020
very cumbersome the users can make

78
00:03:41,670 --> 00:03:45,030
mistakes they don't understand exactly

79
00:03:43,020 --> 00:03:47,880
what is private<font color="#E5E5E5"> senses the privacy</font>

80
00:03:45,030 --> 00:03:51,540
sensitive and so on another approach

81
00:03:47,880 --> 00:03:52,980
<font color="#E5E5E5">that we explored is to take the the</font>

82
00:03:51,540 --> 00:03:55,380
technique called<font color="#E5E5E5"> Delta debugging that</font>

83
00:03:52,980 --> 00:03:58,049
has been used for debugging purposes and

84
00:03:55,380 --> 00:04:00,000
that tries<font color="#CCCCCC"> to take the input into an</font>

85
00:03:58,050 --> 00:04:02,420
application and find out through a

86
00:04:00,000 --> 00:04:05,400
binary search of chunks of the input

87
00:04:02,420 --> 00:04:09,958
which parts of the input are critical to

88
00:04:05,400 --> 00:04:12,510
crash the application but this<font color="#E5E5E5"> has the</font>

89
00:04:09,959 --> 00:04:15,770
problem that in general green put logs

90
00:04:12,510 --> 00:04:18,060
tend to be very long with lots of events

91
00:04:15,770 --> 00:04:24,570
like mouse movements

92
00:04:18,060 --> 00:04:26,430
a lot of<font color="#CCCCCC"> pollution of</font><font color="#E5E5E5"> the log and so we</font>

93
00:04:24,570 --> 00:04:28,740
we sorted we thought of proposing

94
00:04:26,430 --> 00:04:30,419
something else so we propose a new

95
00:04:28,740 --> 00:04:35,150
approach called<font color="#CCCCCC"> gooey mean as far as we</font>

96
00:04:30,419 --> 00:04:37,950
know it's the first solution for

97
00:04:35,150 --> 00:04:40,560
targeting and privacy in error reporting

98
00:04:37,950 --> 00:04:43,260
for graphical applications it's a input

99
00:04:40,560 --> 00:04:47,880
minimization algorithm and it's

100
00:04:43,260 --> 00:04:51,360
basically<font color="#CCCCCC"> a</font><font color="#E5E5E5"> three-pronged approach to to</font>

101
00:04:47,880 --> 00:04:53,600
the search of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> minimal input so we do</font>

102
00:04:51,360 --> 00:04:57,139
a hierarchical search of the widgets

103
00:04:53,600 --> 00:04:59,370
basically we start we create a hierarchy

104
00:04:57,139 --> 00:05:00,870
hierarchical of the components of the

105
00:04:59,370 --> 00:05:05,790
graphical components of the application

106
00:05:00,870 --> 00:05:07,260
and we do the search level by level in

107
00:05:05,790 --> 00:05:09,050
this hierarchy are<font color="#E5E5E5"> going to I'm going to</font>

108
00:05:07,260 --> 00:05:12,240
<font color="#E5E5E5">show that a little bit more in a minute</font>

109
00:05:09,050 --> 00:05:15,630
then we this search is also hierarchical

110
00:05:12,240 --> 00:05:17,220
in terms of granularity because we start

111
00:05:15,630 --> 00:05:19,110
by looking at individual graphical

112
00:05:17,220 --> 00:05:21,150
components and they only then do we look

113
00:05:19,110 --> 00:05:23,190
at the events<font color="#E5E5E5"> that interact with each</font>

114
00:05:21,150 --> 00:05:26,250
one of these<font color="#E5E5E5"> components and at each one</font>

115
00:05:23,190 --> 00:05:30,200
<font color="#E5E5E5">of these levels we use binary search</font>

116
00:05:26,250 --> 00:05:33,060
algorithm to to find the best solution

117
00:05:30,200 --> 00:05:35,159
I'm also going to<font color="#E5E5E5"> show you that this can</font>

118
00:05:33,060 --> 00:05:37,919
also be integrated with an obfuscation

119
00:05:35,160 --> 00:05:41,789
system so after you minimize the input

120
00:05:37,919 --> 00:05:44,130
to a minimum sequence you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> then try</font>

121
00:05:41,789 --> 00:05:47,940
to replace the minimum sequence of input

122
00:05:44,130 --> 00:05:49,590
with some alternative values so let's go

123
00:05:47,940 --> 00:05:54,240
<font color="#E5E5E5">back</font><font color="#CCCCCC"> to the example</font><font color="#E5E5E5"> that I showed you</font>

124
00:05:49,590 --> 00:05:56,820
before<font color="#CCCCCC"> ok now the problem</font><font color="#E5E5E5"> if you do a</font>

125
00:05:54,240 --> 00:05:59,910
blind search of these of the login

126
00:05:56,820 --> 00:06:02,370
<font color="#E5E5E5">events of an error like this is that in</font>

127
00:05:59,910 --> 00:06:05,550
our<font color="#E5E5E5"> example where we have eight</font>

128
00:06:02,370 --> 00:06:07,740
graphical eight events so clicking the

129
00:06:05,550 --> 00:06:10,169
TV listings menu selecting settings and

130
00:06:07,740 --> 00:06:13,410
selecting channels in putting some text

131
00:06:10,169 --> 00:06:17,549
in the search box picking a channel out

132
00:06:13,410 --> 00:06:19,620
of the subset of selected channels and

133
00:06:17,550 --> 00:06:21,720
then clicking locale out of these eight

134
00:06:19,620 --> 00:06:27,180
events only<font color="#CCCCCC"> one two and</font><font color="#E5E5E5"> eight are</font>

135
00:06:21,720 --> 00:06:29,370
required for to replay the bug and so if

136
00:06:27,180 --> 00:06:29,810
you<font color="#E5E5E5"> start testing each line of the of</font>

137
00:06:29,370 --> 00:06:32,090
the

138
00:06:29,810 --> 00:06:33,860
of the right table is a test so if you

139
00:06:32,090 --> 00:06:36,138
do the<font color="#E5E5E5"> first test of course replying the</font>

140
00:06:33,860 --> 00:06:38,180
application crashes replace the crash

141
00:06:36,139 --> 00:06:40,070
and<font color="#E5E5E5"> then you can start do a binary</font>

142
00:06:38,180 --> 00:06:42,260
search on the<font color="#E5E5E5"> input so if you try the</font>

143
00:06:40,070 --> 00:06:43,520
first half of<font color="#E5E5E5"> the input you are going to</font>

144
00:06:42,260 --> 00:06:45,710
miss event<font color="#E5E5E5"> number</font><font color="#CCCCCC"> eight and</font><font color="#E5E5E5"> the</font>

145
00:06:43,520 --> 00:06:47,810
application doesn't crash but the

146
00:06:45,710 --> 00:06:49,219
<font color="#CCCCCC">problem that i want</font><font color="#E5E5E5"> to show you appears</font>

147
00:06:47,810 --> 00:06:53,090
when<font color="#CCCCCC"> you do the third test so when you</font>

148
00:06:49,220 --> 00:06:55,220
try the second half of<font color="#E5E5E5"> the input the</font>

149
00:06:53,090 --> 00:06:56,869
problem is that this test doesn't make

150
00:06:55,220 --> 00:06:58,510
absolutely no sense for<font color="#CCCCCC"> a graphical</font>

151
00:06:56,870 --> 00:07:00,800
application because you are trying<font color="#E5E5E5"> to</font>

152
00:06:58,510 --> 00:07:04,130
insert into<font color="#CCCCCC"> the application eat</font>

153
00:07:00,800 --> 00:07:05,419
graphical events that make no sense when

154
00:07:04,130 --> 00:07:06,950
you just open the application so

155
00:07:05,419 --> 00:07:08,630
basically we<font color="#E5E5E5"> are saying start the</font>

156
00:07:06,950 --> 00:07:10,820
application and<font color="#E5E5E5"> then type into the</font>

157
00:07:08,630 --> 00:07:13,159
search text box<font color="#CCCCCC"> okay when</font><font color="#E5E5E5"> you open the</font>

158
00:07:10,820 --> 00:07:15,020
application that window is not open the

159
00:07:13,160 --> 00:07:18,020
box is not there this test doesn't make

160
00:07:15,020 --> 00:07:20,210
sense and so when you<font color="#CCCCCC"> are trying</font><font color="#E5E5E5"> to</font>

161
00:07:18,020 --> 00:07:22,669
minimize the input log of a GUI

162
00:07:20,210 --> 00:07:25,700
application you generate lots and lots

163
00:07:22,669 --> 00:07:27,799
<font color="#E5E5E5">of tests like you see in the example for</font>

164
00:07:25,700 --> 00:07:29,150
the binary search on the<font color="#E5E5E5"> right generate</font>

165
00:07:27,800 --> 00:07:31,430
lots and lots<font color="#E5E5E5"> and tests that are not</font>

166
00:07:29,150 --> 00:07:34,400
feasible and so<font color="#E5E5E5"> that you shouldn't</font>

167
00:07:31,430 --> 00:07:37,729
perform them at all now if you were

168
00:07:34,400 --> 00:07:39,349
aware<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> hierarchy of graphical</font>

169
00:07:37,729 --> 00:07:40,880
components in<font color="#CCCCCC"> the in the in the</font>

170
00:07:39,350 --> 00:07:43,160
application meaning you know that there

171
00:07:40,880 --> 00:07:46,070
is the main window with a couple of

172
00:07:43,160 --> 00:07:49,220
menus each menu has some open some

173
00:07:46,070 --> 00:07:51,620
windows those windows have boxes and

174
00:07:49,220 --> 00:07:53,510
text boxes and buttons and so on if you

175
00:07:51,620 --> 00:07:56,870
are<font color="#CCCCCC"> aware of this hierarchy you can</font>

176
00:07:53,510 --> 00:07:59,169
start by testing first<font color="#CCCCCC"> only doing a</font>

177
00:07:56,870 --> 00:08:01,760
binary search on<font color="#CCCCCC"> the top level</font>

178
00:07:59,169 --> 00:08:05,030
components and then once you minimize

179
00:08:01,760 --> 00:08:07,760
those don't go on to the next<font color="#E5E5E5"> level and</font>

180
00:08:05,030 --> 00:08:10,729
so on and this has the<font color="#E5E5E5"> very nice feature</font>

181
00:08:07,760 --> 00:08:14,180
<font color="#E5E5E5">that it eliminates any tests that are</font>

182
00:08:10,729 --> 00:08:17,870
impossible so if you look<font color="#CCCCCC"> at the if you</font>

183
00:08:14,180 --> 00:08:20,030
take a<font color="#CCCCCC"> look</font><font color="#E5E5E5"> at our example it's a it's a</font>

184
00:08:17,870 --> 00:08:22,070
quite simple but this is a real bug that

185
00:08:20,030 --> 00:08:26,299
was<font color="#CCCCCC"> reported for this application so at</font>

186
00:08:22,070 --> 00:08:28,550
the first the first step we look at the

187
00:08:26,300 --> 00:08:30,440
top level window there we only have one

188
00:08:28,550 --> 00:08:32,209
<font color="#E5E5E5">component and for the second level we</font>

189
00:08:30,440 --> 00:08:34,039
are only have one component but then

190
00:08:32,208 --> 00:08:36,439
when we get to the<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the settings</font>

191
00:08:34,039 --> 00:08:38,330
<font color="#CCCCCC">window you can start doing the binary</font>

192
00:08:36,440 --> 00:08:40,190
search at that level<font color="#E5E5E5"> okay and then you</font>

193
00:08:38,330 --> 00:08:43,110
can immediately see that if you click

194
00:08:40,190 --> 00:08:47,519
channels we know<font color="#E5E5E5"> that</font>

195
00:08:43,110 --> 00:08:49,410
a big direction with the channels window

196
00:08:47,519 --> 00:08:51,990
the<font color="#CCCCCC"> search the selection of</font><font color="#E5E5E5"> the channel</font>

197
00:08:49,410 --> 00:08:53,939
so on is dependent on having selected

198
00:08:51,990 --> 00:08:56,490
the channels how do we<font color="#E5E5E5"> know</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> because</font>

199
00:08:53,940 --> 00:08:58,950
when we are recording the application we

200
00:08:56,490 --> 00:09:01,380
not only record the user input but we

201
00:08:58,950 --> 00:09:03,300
are aware of where that input was

202
00:09:01,380 --> 00:09:05,180
<font color="#E5E5E5">submitted to to which component and what</font>

203
00:09:03,300 --> 00:09:09,930
did<font color="#CCCCCC"> that trigger did it</font><font color="#E5E5E5"> open a window</font>

204
00:09:05,180 --> 00:09:12,810
did it open a menu<font color="#E5E5E5"> and so on</font><font color="#CCCCCC"> okay and</font>

205
00:09:09,930 --> 00:09:14,489
<font color="#E5E5E5">that's how we know which which graphical</font>

206
00:09:12,810 --> 00:09:17,729
components which widgets are dependent

207
00:09:14,490 --> 00:09:19,829
<font color="#E5E5E5">on each other and we are able to</font>

208
00:09:17,730 --> 00:09:22,500
understand<font color="#E5E5E5"> that it makes no sense on</font>

209
00:09:19,829 --> 00:09:25,920
trying to minimize the sequence of

210
00:09:22,500 --> 00:09:30,320
<font color="#E5E5E5">events 4 5 6 7 if you haven't clicked on</font>

211
00:09:25,920 --> 00:09:33,120
the channels component to open it so um

212
00:09:30,320 --> 00:09:35,579
and of course then when we try the

213
00:09:33,120 --> 00:09:38,790
second component at that level which is

214
00:09:35,579 --> 00:09:40,380
clicking on the local we realize aha in

215
00:09:38,790 --> 00:09:43,319
reality to have the bug you<font color="#CCCCCC"> just need to</font>

216
00:09:40,380 --> 00:09:45,060
<font color="#E5E5E5">click one and then second open TV</font>

217
00:09:43,320 --> 00:09:47,160
<font color="#CCCCCC">listing settings and click the locale</font>

218
00:09:45,060 --> 00:09:49,140
<font color="#CCCCCC">okay the other</font><font color="#E5E5E5"> thing that we do is that</font>

219
00:09:47,160 --> 00:09:52,100
<font color="#E5E5E5">once we have identified which are the</font>

220
00:09:49,140 --> 00:09:55,140
minimum widgets needed to crash the

221
00:09:52,100 --> 00:09:56,760
application we we look<font color="#E5E5E5"> into the events</font>

222
00:09:55,140 --> 00:09:59,399
that interacted with each one of them

223
00:09:56,760 --> 00:10:02,069
<font color="#E5E5E5">okay so when you were searching among</font>

224
00:09:59,399 --> 00:10:04,440
the widget<font color="#E5E5E5"> the text that was input in</font>

225
00:10:02,070 --> 00:10:06,180
that search box was not broken up<font color="#E5E5E5"> okay</font>

226
00:10:04,440 --> 00:10:10,380
we were considering that as a as a

227
00:10:06,180 --> 00:10:11,849
unique list of events a contiguous list

228
00:10:10,380 --> 00:10:13,920
of events that should not be<font color="#E5E5E5"> broken up</font>

229
00:10:11,850 --> 00:10:15,600
and<font color="#E5E5E5"> only once we have identified the</font>

230
00:10:13,920 --> 00:10:17,399
minimum leaves the widgets do we say

231
00:10:15,600 --> 00:10:19,290
<font color="#E5E5E5">okay now let's look at the text do you</font>

232
00:10:17,399 --> 00:10:22,410
really need all of those texts events in

233
00:10:19,290 --> 00:10:26,069
in there okay and with this hierarchical

234
00:10:22,410 --> 00:10:29,399
search we can do a much faster solution

235
00:10:26,070 --> 00:10:31,890
than just<font color="#E5E5E5"> doing a binary minimization of</font>

236
00:10:29,399 --> 00:10:35,220
a binary search trying to minimize the

237
00:10:31,890 --> 00:10:36,959
input<font color="#E5E5E5"> okay so to evaluate but there are</font>

238
00:10:35,220 --> 00:10:39,570
a lot more evaluation questions in the

239
00:10:36,959 --> 00:10:41,670
paper and I suggest you you take a<font color="#E5E5E5"> look</font>

240
00:10:39,570 --> 00:10:43,410
at<font color="#E5E5E5"> that but I'm</font><font color="#CCCCCC"> just going to</font><font color="#E5E5E5"> give you</font>

241
00:10:41,670 --> 00:10:45,510
three quick results so can you do this

242
00:10:43,410 --> 00:10:48,000
with real applications and real bugs how

243
00:10:45,510 --> 00:10:50,010
much<font color="#E5E5E5"> of the input is removed and can you</font>

244
00:10:48,000 --> 00:10:53,569
then complement this with an obfuscation

245
00:10:50,010 --> 00:10:56,750
system to further anonymize the input so

246
00:10:53,569 --> 00:10:58,189
we apply these 26 real world

247
00:10:56,750 --> 00:10:59,870
creations with real reported bugs

248
00:10:58,190 --> 00:11:02,120
extracted from the bug trackers of these

249
00:10:59,870 --> 00:11:04,340
applications to text editors<font color="#CCCCCC"> to email</font>

250
00:11:02,120 --> 00:11:06,050
clients one TV Guide browser and the

251
00:11:04,340 --> 00:11:07,760
password manager that was<font color="#E5E5E5"> developed by</font>

252
00:11:06,050 --> 00:11:10,010
us the<font color="#E5E5E5"> explanation why we added the</font>

253
00:11:07,760 --> 00:11:11,930
application developed by us is in the

254
00:11:10,010 --> 00:11:16,160
paper<font color="#E5E5E5"> okay and this is a quite</font>

255
00:11:11,930 --> 00:11:18,800
conservative evaluation we have a log of

256
00:11:16,160 --> 00:11:23,120
a thousand more or less thousand events

257
00:11:18,800 --> 00:11:26,449
<font color="#E5E5E5">for each</font><font color="#CCCCCC"> application now it</font><font color="#E5E5E5"> takes a</font>

258
00:11:23,120 --> 00:11:29,390
while to run<font color="#E5E5E5"> a GUI mean 12 to 43 minutes</font>

259
00:11:26,450 --> 00:11:32,570
for each one of these applications the

260
00:11:29,390 --> 00:11:35,270
main reason for this is that for Java

261
00:11:32,570 --> 00:11:37,610
which was what we use it here<font color="#E5E5E5"> it was</font>

262
00:11:35,270 --> 00:11:40,220
difficult to find a reliable way to

263
00:11:37,610 --> 00:11:43,850
inject events fast into the application

264
00:11:40,220 --> 00:11:45,860
so a lot of this time is injecting

265
00:11:43,850 --> 00:11:47,630
infants into the application with some

266
00:11:45,860 --> 00:11:49,370
time delay but you shouldn't worry<font color="#E5E5E5"> too</font>

267
00:11:47,630 --> 00:11:51,050
much about this because GUI means should

268
00:11:49,370 --> 00:11:53,810
be<font color="#CCCCCC"> run in the background</font><font color="#E5E5E5"> so the idea is</font>

269
00:11:51,050 --> 00:11:56,060
that your applications crash we say<font color="#E5E5E5"> that</font>

270
00:11:53,810 --> 00:11:58,310
maybe some interaction shows you that

271
00:11:56,060 --> 00:11:59,930
there<font color="#CCCCCC"> is</font><font color="#E5E5E5"> going to be an error report</font>

272
00:11:58,310 --> 00:12:01,609
being prepared and<font color="#E5E5E5"> later on you can show</font>

273
00:11:59,930 --> 00:12:04,400
the minimized error report to the user

274
00:12:01,610 --> 00:12:07,880
and<font color="#E5E5E5"> ask if she agrees in sending the</font>

275
00:12:04,400 --> 00:12:10,280
report ok how much sensitive in user

276
00:12:07,880 --> 00:12:13,460
input does it does remain here after we

277
00:12:10,280 --> 00:12:16,850
mean well here you<font color="#E5E5E5"> can see the results</font>

278
00:12:13,460 --> 00:12:19,730
<font color="#CCCCCC">for our tests we basically were able to</font>

279
00:12:16,850 --> 00:12:22,370
eliminate all of the<font color="#E5E5E5"> privacy sensitive</font>

280
00:12:19,730 --> 00:12:25,400
information from the input this these

281
00:12:22,370 --> 00:12:28,280
data is broken down in the piper and you

282
00:12:25,400 --> 00:12:29,959
can see exactly why we can see what was

283
00:12:28,280 --> 00:12:34,220
considered privacy sensitive information

284
00:12:29,960 --> 00:12:37,850
and there is<font color="#CCCCCC"> one case</font><font color="#E5E5E5"> that jumps which</font>

285
00:12:34,220 --> 00:12:39,530
is a Colombani mail client and all of

286
00:12:37,850 --> 00:12:41,750
<font color="#CCCCCC">that information that is remaining there</font>

287
00:12:39,530 --> 00:12:45,189
<font color="#E5E5E5">is because the bug</font><font color="#CCCCCC"> was caused by a file</font>

288
00:12:41,750 --> 00:12:50,360
that<font color="#E5E5E5"> was being read by the application</font>

289
00:12:45,190 --> 00:12:52,250
so it<font color="#E5E5E5"> wasn't</font><font color="#CCCCCC"> GUI events it was a comma</font>

290
00:12:50,360 --> 00:12:54,680
<font color="#CCCCCC">separated value file that was ring being</font>

291
00:12:52,250 --> 00:12:55,910
read by the application containing some

292
00:12:54,680 --> 00:12:58,489
configurations that<font color="#E5E5E5"> caused the</font>

293
00:12:55,910 --> 00:13:00,230
application to crash so then we thought

294
00:12:58,490 --> 00:13:05,209
okay can we do better can we<font color="#E5E5E5"> connect</font>

295
00:13:00,230 --> 00:13:07,800
these two an error to a novice caching

296
00:13:05,209 --> 00:13:09,810
system so basically<font color="#CCCCCC"> we are saying</font><font color="#E5E5E5"> that</font>

297
00:13:07,800 --> 00:13:12,719
the<font color="#E5E5E5"> components that are taking care</font><font color="#CCCCCC"> of</font>

298
00:13:09,810 --> 00:13:15,599
the anonymization are a minimization

299
00:13:12,720 --> 00:13:20,010
technique which is<font color="#CCCCCC"> GUI</font><font color="#E5E5E5"> mean and we try</font>

300
00:13:15,600 --> 00:13:21,720
<font color="#E5E5E5">to connect this to an obfuscation system</font>

301
00:13:20,010 --> 00:13:24,120
which was the one I<font color="#CCCCCC"> mentioned before</font><font color="#E5E5E5"> rip</font>

302
00:13:21,720 --> 00:13:27,899
that would have been developed<font color="#CCCCCC"> by us so</font>

303
00:13:24,120 --> 00:13:31,110
we ran reap on the minimized outputs

304
00:13:27,899 --> 00:13:33,420
coming from from<font color="#E5E5E5"> GUI mean for the two</font>

305
00:13:31,110 --> 00:13:36,660
tests that still have sensitive

306
00:13:33,420 --> 00:13:38,930
information in the error report and the

307
00:13:36,660 --> 00:13:41,490
results<font color="#CCCCCC"> that we got was that after</font>

308
00:13:38,930 --> 00:13:44,910
obfuscation there was no similarity

309
00:13:41,490 --> 00:13:48,149
between the original input input by the

310
00:13:44,910 --> 00:13:51,240
user and<font color="#CCCCCC"> the error report so no bite of</font>

311
00:13:48,149 --> 00:13:53,310
the input was equal<font color="#E5E5E5"> to the input and in</font>

312
00:13:51,240 --> 00:13:57,269
terms of information leakage leakage we

313
00:13:53,310 --> 00:14:01,410
had at<font color="#CCCCCC"> the end 0.3% leakage for Columbia</font>

314
00:13:57,269 --> 00:14:03,510
and 0.05 percent for JK keyring so in

315
00:14:01,410 --> 00:14:06,540
conclusion<font color="#E5E5E5"> group mean performs user</font>

316
00:14:03,510 --> 00:14:09,720
minimization for privacy it removes

317
00:14:06,540 --> 00:14:12,390
almost all of the sensitive user input

318
00:14:09,720 --> 00:14:14,250
and it can<font color="#CCCCCC"> be easily connected with an</font>

319
00:14:12,390 --> 00:14:16,740
input<font color="#E5E5E5"> obfuscation mechanism to further</font>

320
00:14:14,250 --> 00:14:19,700
improve privacy thank you<font color="#CCCCCC"> very much for</font>

321
00:14:16,740 --> 00:14:19,700
<font color="#E5E5E5">your time</font>

