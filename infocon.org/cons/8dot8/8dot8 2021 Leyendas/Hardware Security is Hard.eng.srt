1
00:00:52,010 --> 00:00:55,099
[Music]

2
00:02:21,120 --> 00:02:22,640
x-rays

3
00:02:22,640 --> 00:02:25,119
x-rays

4
00:02:27,920 --> 00:02:31,200
x-rays code explorer

5
00:02:34,840 --> 00:02:37,840
s

6
00:03:00,530 --> 00:03:02,840
[Music]

7
00:03:02,840 --> 00:03:05,840
foreign

8
00:03:34,570 --> 00:03:44,609
[Music]

9
00:03:44,840 --> 00:03:47,840
so

10
00:03:49,920 --> 00:03:52,400
i'm alex matrossov and i'm leading

11
00:03:52,400 --> 00:03:55,599
offensive security research at nvidia

12
00:03:55,599 --> 00:03:57,760
i'm mostly focused on the firmware and

13
00:03:57,760 --> 00:04:00,080
hardware research and my team make an

14
00:04:00,080 --> 00:04:02,879
effort for making video products secure

15
00:04:02,879 --> 00:04:04,799
especially on the hardware and firmware

16
00:04:04,799 --> 00:04:06,640
side across of the different product

17
00:04:06,640 --> 00:04:07,439
lines

18
00:04:07,439 --> 00:04:09,920
but today i want to focus on the

19
00:04:09,920 --> 00:04:11,680
hardware security

20
00:04:11,680 --> 00:04:14,959
is hard and how hardware

21
00:04:14,959 --> 00:04:17,600
boundaries define the platform security

22
00:04:17,600 --> 00:04:19,680
it's very interesting topic

23
00:04:19,680 --> 00:04:22,880
and i have much to say about this

24
00:04:22,880 --> 00:04:25,360
but before that i want to share about my

25
00:04:25,360 --> 00:04:27,199
experience actually

26
00:04:27,199 --> 00:04:28,880
as i mentioned i'm leading offensive

27
00:04:28,880 --> 00:04:30,800
security research at nvidia

28
00:04:30,800 --> 00:04:32,880
previously i've been a principal

29
00:04:32,880 --> 00:04:34,400
security researcher

30
00:04:34,400 --> 00:04:37,440
in uh other companies like scion sintel

31
00:04:37,440 --> 00:04:38,240
and eset

32
00:04:38,240 --> 00:04:40,880
but i'm doing security research many

33
00:04:40,880 --> 00:04:42,400
years and

34
00:04:42,400 --> 00:04:45,840
actually most of my career actually been

35
00:04:45,840 --> 00:04:46,560
focused

36
00:04:46,560 --> 00:04:49,360
on security research i did a lot of

37
00:04:49,360 --> 00:04:51,759
reverse engineering in the past focused

38
00:04:51,759 --> 00:04:52,479
on advanced

39
00:04:52,479 --> 00:04:55,759
malware and i can see actually how

40
00:04:55,759 --> 00:04:57,680
the reverse engineering technology is

41
00:04:57,680 --> 00:04:58,880
actually woven

42
00:04:58,880 --> 00:05:01,360
and how the life of the offensive

43
00:05:01,360 --> 00:05:03,360
researcher is getting easier

44
00:05:03,360 --> 00:05:06,160
we have a lot of uh interesting stuff

45
00:05:06,160 --> 00:05:08,720
get done already we have now with fancy

46
00:05:08,720 --> 00:05:09,600
father's

47
00:05:09,600 --> 00:05:12,400
memory sanitizers and other stuff but

48
00:05:12,400 --> 00:05:15,199
defensive side of course also not sleep

49
00:05:15,199 --> 00:05:17,600
and we have a lot of fancy mitigations

50
00:05:17,600 --> 00:05:18,720
which is make

51
00:05:18,720 --> 00:05:21,600
uh very interesting challenges to bypass

52
00:05:21,600 --> 00:05:22,080
it

53
00:05:22,080 --> 00:05:25,759
but let's talk about uh hardware and

54
00:05:25,759 --> 00:05:26,960
firmware side

55
00:05:26,960 --> 00:05:29,840
we have a lot of security products and

56
00:05:29,840 --> 00:05:31,680
industry focusing on

57
00:05:31,680 --> 00:05:35,440
uh upper stack like operating system and

58
00:05:35,440 --> 00:05:38,560
virtual machines and cloud but

59
00:05:38,560 --> 00:05:41,840
behind this actually we have a lot of uh

60
00:05:41,840 --> 00:05:44,720
things which is can be focused on the

61
00:05:44,720 --> 00:05:46,880
attacking firmware and the hardware

62
00:05:46,880 --> 00:05:48,800
and i would say a lot of modern

63
00:05:48,800 --> 00:05:50,160
persistence techniques

64
00:05:50,160 --> 00:05:52,160
especially focus focused on this

65
00:05:52,160 --> 00:05:54,080
particular points

66
00:05:54,080 --> 00:05:57,280
and security visibility point

67
00:05:57,280 --> 00:06:00,479
uh for the industry it's kind of like

68
00:06:00,479 --> 00:06:03,120
mostly focus it on the upper stack and

69
00:06:03,120 --> 00:06:04,319
the boot process

70
00:06:04,319 --> 00:06:08,400
but before the firmware actually close

71
00:06:08,400 --> 00:06:12,319
their execution passing uh

72
00:06:12,319 --> 00:06:14,400
passing the execution path for the

73
00:06:14,400 --> 00:06:15,680
bootloaders

74
00:06:15,680 --> 00:06:17,600
and we have a lot of challenges

75
00:06:17,600 --> 00:06:21,280
basically to make this uh

76
00:06:21,280 --> 00:06:24,639
down stack more secure and

77
00:06:24,639 --> 00:06:27,360
if we think about the types of the

78
00:06:27,360 --> 00:06:28,880
persistence

79
00:06:28,880 --> 00:06:32,080
we have a lot of things get done

80
00:06:32,080 --> 00:06:35,360
on the operating system level and a lot

81
00:06:35,360 --> 00:06:36,960
of

82
00:06:36,960 --> 00:06:40,240
modern uh endpoint solutions

83
00:06:40,240 --> 00:06:43,440
actually focused on

84
00:06:43,440 --> 00:06:46,240
many different things uh includes the

85
00:06:46,240 --> 00:06:48,560
bootloaders and boot sectors

86
00:06:48,560 --> 00:06:52,000
but i would say hardware and firmware

87
00:06:52,000 --> 00:06:54,800
currently the biggest blind spot being

88
00:06:54,800 --> 00:06:57,520
overlooked

89
00:06:57,919 --> 00:07:00,080
we don't have enough signals coming from

90
00:07:00,080 --> 00:07:02,160
the firmware and the hardware to measure

91
00:07:02,160 --> 00:07:05,199
actually it is uh as

92
00:07:05,199 --> 00:07:08,400
we do for the operating system

93
00:07:08,400 --> 00:07:11,120
and it's creating actually a lot of

94
00:07:11,120 --> 00:07:13,280
interesting points and concerns i've

95
00:07:13,280 --> 00:07:14,560
been talking

96
00:07:14,560 --> 00:07:18,000
about that in the last year in my talk

97
00:07:18,000 --> 00:07:20,800
the advanced threats evolution and risk

98
00:07:20,800 --> 00:07:22,479
researchers arm race

99
00:07:22,479 --> 00:07:25,759
because we actually

100
00:07:25,759 --> 00:07:28,560
have a lot of stuff coming from the

101
00:07:28,560 --> 00:07:29,280
hardware

102
00:07:29,280 --> 00:07:32,240
but we i don't see a lot of stuff coming

103
00:07:32,240 --> 00:07:34,160
from the defensive cycles

104
00:07:34,160 --> 00:07:38,000
because actually uh

105
00:07:38,000 --> 00:07:42,319
we need to focus on the solutions

106
00:07:42,319 --> 00:07:45,280
how we basically can prevent these kind

107
00:07:45,280 --> 00:07:46,240
of threats

108
00:07:46,240 --> 00:07:49,840
and actually detect them

109
00:07:50,080 --> 00:07:52,080
we have a three different worlds

110
00:07:52,080 --> 00:07:54,319
firmware hardware and operating system

111
00:07:54,319 --> 00:07:55,840
and it's actually separated

112
00:07:55,840 --> 00:07:57,840
we have a weak security policies

113
00:07:57,840 --> 00:07:59,199
transition between

114
00:07:59,199 --> 00:08:02,479
between of them and

115
00:08:02,479 --> 00:08:05,520
as a matthew green recently

116
00:08:05,520 --> 00:08:07,680
mentioned we have the most interesting

117
00:08:07,680 --> 00:08:09,039
problems in applied

118
00:08:09,039 --> 00:08:12,960
program cryptography right now and off

119
00:08:12,960 --> 00:08:16,080
involve involved deployments of the

120
00:08:16,080 --> 00:08:17,199
trusted hardware

121
00:08:17,199 --> 00:08:20,479
and it actually really defines

122
00:08:20,479 --> 00:08:24,080
we have a foundation of our security

123
00:08:24,080 --> 00:08:26,240
tied to the hardware and firmware but

124
00:08:26,240 --> 00:08:27,520
this foundation

125
00:08:27,520 --> 00:08:32,479
it's not protected properly

126
00:08:32,479 --> 00:08:35,599
so basically i want to say uh the

127
00:08:35,599 --> 00:08:37,519
hardware thread modeling

128
00:08:37,519 --> 00:08:41,120
have a lot of um interesting points

129
00:08:41,120 --> 00:08:44,240
which is actually gain my concerns so

130
00:08:44,240 --> 00:08:47,920
basically how we define the hardware

131
00:08:47,920 --> 00:08:50,880
threat modeling at the moment so

132
00:08:50,880 --> 00:08:52,560
basically we focus

133
00:08:52,560 --> 00:08:56,320
on all the components separately

134
00:08:56,320 --> 00:09:00,080
and also we not define the boundaries

135
00:09:00,080 --> 00:09:02,560
where the hardware passing control or

136
00:09:02,560 --> 00:09:04,480
interact with the firmware

137
00:09:04,480 --> 00:09:07,680
let's create very interesting concerns

138
00:09:07,680 --> 00:09:10,880
on how the tracker

139
00:09:10,880 --> 00:09:13,839
can basically attack the hardware from

140
00:09:13,839 --> 00:09:14,800
the firmware

141
00:09:14,800 --> 00:09:17,839
or opposite side so

142
00:09:17,839 --> 00:09:21,200
basically the threat model

143
00:09:21,200 --> 00:09:24,160
always focusing on something which is

144
00:09:24,160 --> 00:09:24,880
hardware

145
00:09:24,880 --> 00:09:28,959
or firmware but not together

146
00:09:29,120 --> 00:09:32,240
i see that a lot when

147
00:09:32,240 --> 00:09:35,600
basically people think on each tip

148
00:09:35,600 --> 00:09:37,760
separately on the platform we will be

149
00:09:37,760 --> 00:09:39,200
get there a bit later

150
00:09:39,200 --> 00:09:42,480
on the slides but it's exactly

151
00:09:42,480 --> 00:09:45,920
why we need to focus and redefine

152
00:09:45,920 --> 00:09:48,480
the boundaries and threat modeling focus

153
00:09:48,480 --> 00:09:50,720
it on the security boundaries across

154
00:09:50,720 --> 00:09:54,000
who platform nowadays it is hard to spot

155
00:09:54,000 --> 00:09:56,080
actually real boundaries between

156
00:09:56,080 --> 00:09:59,360
firmware and hardware because uh it's

157
00:09:59,360 --> 00:10:02,880
just a lot of connection points between

158
00:10:02,880 --> 00:10:05,680
between hardware and firmware exist on

159
00:10:05,680 --> 00:10:06,399
modern

160
00:10:06,399 --> 00:10:11,040
platforms and we really need to think

161
00:10:11,040 --> 00:10:12,880
on the hardware thread modeling and

162
00:10:12,880 --> 00:10:16,800
firmware true modeling together

163
00:10:17,519 --> 00:10:19,839
because the number of issues actually

164
00:10:19,839 --> 00:10:22,160
increasing every year and if you look on

165
00:10:22,160 --> 00:10:25,760
national vulnerability database with uh

166
00:10:25,760 --> 00:10:29,519
search uh query visa firmware keyword

167
00:10:29,519 --> 00:10:32,800
we already have almost the same amount

168
00:10:32,800 --> 00:10:34,800
of the issues reported

169
00:10:34,800 --> 00:10:38,800
tied to the firmware side as a last year

170
00:10:38,800 --> 00:10:41,839
so it is actually says a lot we

171
00:10:41,839 --> 00:10:44,839
have a really increase of the

172
00:10:44,839 --> 00:10:46,079
vulnerabilities

173
00:10:46,079 --> 00:10:48,959
on tied to the firmware because in many

174
00:10:48,959 --> 00:10:51,440
cases this attack surfaces

175
00:10:51,440 --> 00:10:54,480
it is actually easy target and

176
00:10:54,480 --> 00:10:57,760
overlooked by many years

177
00:10:57,760 --> 00:11:00,640
and we don't have much mitigation there

178
00:11:00,640 --> 00:11:01,279
and

179
00:11:01,279 --> 00:11:04,640
also think about usually hardware

180
00:11:04,640 --> 00:11:07,839
developed but why one company and

181
00:11:07,839 --> 00:11:10,399
in many cases the firmware can be

182
00:11:10,399 --> 00:11:12,720
written by the third party company

183
00:11:12,720 --> 00:11:15,519
so basically you have the chip which is

184
00:11:15,519 --> 00:11:17,200
general purpose chip

185
00:11:17,200 --> 00:11:19,440
can be used by the third parties for

186
00:11:19,440 --> 00:11:20,640
their products

187
00:11:20,640 --> 00:11:22,959
and this third part is writing the

188
00:11:22,959 --> 00:11:24,480
firmware for this chip

189
00:11:24,480 --> 00:11:26,160
that's means they have actually some

190
00:11:26,160 --> 00:11:28,240
control on the top

191
00:11:28,240 --> 00:11:31,200
level of the firmwares but all the

192
00:11:31,200 --> 00:11:32,160
bootrom

193
00:11:32,160 --> 00:11:34,640
and actually hardware security features

194
00:11:34,640 --> 00:11:35,760
controlled

195
00:11:35,760 --> 00:11:39,680
by vendor of the hardware chip

196
00:11:39,680 --> 00:11:42,640
and it is created a lot of weak points

197
00:11:42,640 --> 00:11:43,920
how the design

198
00:11:43,920 --> 00:11:47,519
can be go wrong and create

199
00:11:47,519 --> 00:11:50,079
new attack surfaces or possibilities for

200
00:11:50,079 --> 00:11:52,800
the attacker

201
00:11:53,440 --> 00:11:56,480
if we focus on the threat modeling

202
00:11:56,480 --> 00:11:58,880
and how the usual threat modeling is

203
00:11:58,880 --> 00:12:00,880
defined in the industry

204
00:12:00,880 --> 00:12:04,320
basically it focuses on analyzing the

205
00:12:04,320 --> 00:12:06,480
security requirements

206
00:12:06,480 --> 00:12:09,360
based on the platform diagrams and they

207
00:12:09,360 --> 00:12:11,680
try basically create

208
00:12:11,680 --> 00:12:14,399
the threat modeling based on the known

209
00:12:14,399 --> 00:12:14,959
threats

210
00:12:14,959 --> 00:12:18,480
and attack vectors and also

211
00:12:18,480 --> 00:12:20,720
sometimes requirements can be missed

212
00:12:20,720 --> 00:12:22,240
something or

213
00:12:22,240 --> 00:12:24,480
overlooked before the real silicon

214
00:12:24,480 --> 00:12:25,680
actually came

215
00:12:25,680 --> 00:12:27,839
on the table and you can really figure

216
00:12:27,839 --> 00:12:29,600
it out on the actual

217
00:12:29,600 --> 00:12:32,639
product not just think about security

218
00:12:32,639 --> 00:12:34,079
and requirements

219
00:12:34,079 --> 00:12:38,959
before the product gets released right

220
00:12:38,959 --> 00:12:41,360
it is hard to find the real security

221
00:12:41,360 --> 00:12:43,680
problems in the platform on diagram

222
00:12:43,680 --> 00:12:47,519
based only on requirements right

223
00:12:47,839 --> 00:12:51,040
also sometimes

224
00:12:51,040 --> 00:12:53,200
in the industry it's common when the

225
00:12:53,200 --> 00:12:55,600
vendors try to hide the firmware

226
00:12:55,600 --> 00:12:56,880
obfuscate

227
00:12:56,880 --> 00:13:00,480
or make it uh hard to find

228
00:13:00,480 --> 00:13:03,760
freely available online right or

229
00:13:03,760 --> 00:13:07,279
make the firmware hard to analyze remove

230
00:13:07,279 --> 00:13:09,279
the symbols and others

231
00:13:09,279 --> 00:13:13,120
and in many cases

232
00:13:13,120 --> 00:13:15,519
it is can create some difficulties for

233
00:13:15,519 --> 00:13:17,040
reverse engineering

234
00:13:17,040 --> 00:13:20,000
but it is it will never stop experience

235
00:13:20,000 --> 00:13:22,399
at reverse engineer to find the problems

236
00:13:22,399 --> 00:13:23,680
on this firmware

237
00:13:23,680 --> 00:13:26,880
so it will be raising the bar but

238
00:13:26,880 --> 00:13:31,040
really just a little it's why

239
00:13:31,040 --> 00:13:34,720
i believe uh

240
00:13:34,720 --> 00:13:38,160
it's no need to count this way of

241
00:13:38,160 --> 00:13:39,199
security

242
00:13:39,199 --> 00:13:42,399
for protect the platforms

243
00:13:42,399 --> 00:13:45,760
so not a binaries please

244
00:13:45,760 --> 00:13:49,440
open the specs and it will basically

245
00:13:49,440 --> 00:13:52,240
make your product more secure because

246
00:13:52,240 --> 00:13:53,920
overlooked problems

247
00:13:53,920 --> 00:13:56,160
can be spotted and reported by many

248
00:13:56,160 --> 00:13:58,880
researchers

249
00:14:01,600 --> 00:14:04,800
also i've been uh writing

250
00:14:04,800 --> 00:14:06,959
the book root kits and book kits with

251
00:14:06,959 --> 00:14:09,440
sergey brothers and eugene radeonov

252
00:14:09,440 --> 00:14:12,160
and i really like this piece of art so

253
00:14:12,160 --> 00:14:14,480
basically

254
00:14:14,480 --> 00:14:17,760
look on this kraken and this small boat

255
00:14:17,760 --> 00:14:20,480
with a person who tried to escape from

256
00:14:20,480 --> 00:14:21,920
this big kraken

257
00:14:21,920 --> 00:14:24,880
and it is usually security architects

258
00:14:24,880 --> 00:14:27,040
which is try to rethink

259
00:14:27,040 --> 00:14:29,279
uh of their threat modeling based on

260
00:14:29,279 --> 00:14:30,639
requirements because

261
00:14:30,639 --> 00:14:33,040
in many cases they can overlook a lot of

262
00:14:33,040 --> 00:14:33,920
threats

263
00:14:33,920 --> 00:14:36,880
and also if we not see all the

264
00:14:36,880 --> 00:14:39,199
boundaries interconnections between them

265
00:14:39,199 --> 00:14:40,560
and all paths

266
00:14:40,560 --> 00:14:44,160
how how their tracker can basically

267
00:14:44,160 --> 00:14:47,920
interact with some entity on the chip

268
00:14:47,920 --> 00:14:50,399
it is hard to really make these

269
00:14:50,399 --> 00:14:51,440
requirements

270
00:14:51,440 --> 00:14:55,760
requirements without the blind spots

271
00:14:55,839 --> 00:14:59,120
it's why basically we need

272
00:14:59,120 --> 00:15:01,600
uh hardware and firmware security

273
00:15:01,600 --> 00:15:02,480
defines

274
00:15:02,480 --> 00:15:06,000
all together not not uh

275
00:15:06,000 --> 00:15:09,040
hardware security it's not just

276
00:15:09,040 --> 00:15:12,079
not equal the sum of the boundaries

277
00:15:12,079 --> 00:15:15,360
it is really interconnection between all

278
00:15:15,360 --> 00:15:16,399
these boundaries

279
00:15:16,399 --> 00:15:18,880
all together we have a lot of different

280
00:15:18,880 --> 00:15:20,320
shapes on the platform

281
00:15:20,320 --> 00:15:22,880
but also these chips developed by

282
00:15:22,880 --> 00:15:24,240
different companies

283
00:15:24,240 --> 00:15:28,000
embedded controller tpms gpus network

284
00:15:28,000 --> 00:15:28,720
cards

285
00:15:28,720 --> 00:15:30,720
based management controller or power

286
00:15:30,720 --> 00:15:32,079
management units

287
00:15:32,079 --> 00:15:35,839
so it interconnects around the ufi

288
00:15:35,839 --> 00:15:39,040
system firmware but all these firmwares

289
00:15:39,040 --> 00:15:40,639
inside these chips

290
00:15:40,639 --> 00:15:43,759
also developed separately by

291
00:15:43,759 --> 00:15:45,920
third parties it is created a lot of

292
00:15:45,920 --> 00:15:48,320
concerns because basically

293
00:15:48,320 --> 00:15:51,120
we can't control all the boundaries in

294
00:15:51,120 --> 00:15:52,079
this case

295
00:15:52,079 --> 00:15:55,519
but in in the same way it is crossing

296
00:15:55,519 --> 00:15:56,480
the path

297
00:15:56,480 --> 00:15:59,680
as example like a network card

298
00:15:59,680 --> 00:16:02,399
have an option rom which is interconnect

299
00:16:02,399 --> 00:16:02,880
with

300
00:16:02,880 --> 00:16:06,000
uh with the main system firmware and it

301
00:16:06,000 --> 00:16:07,440
is can create

302
00:16:07,440 --> 00:16:10,639
a lot of places where the attacker can

303
00:16:10,639 --> 00:16:12,079
reuse this path

304
00:16:12,079 --> 00:16:14,320
for basically attack the system firmware

305
00:16:14,320 --> 00:16:15,440
or opposite

306
00:16:15,440 --> 00:16:17,040
attack from the system firmware the

307
00:16:17,040 --> 00:16:20,079
network card and persists there

308
00:16:20,079 --> 00:16:24,079
it's why i i believe we need

309
00:16:24,079 --> 00:16:28,560
to rethink the system platform security

310
00:16:28,560 --> 00:16:29,600
in the way

311
00:16:29,600 --> 00:16:34,720
when we think how the boundaries will be

312
00:16:34,839 --> 00:16:36,079
crossing

313
00:16:36,079 --> 00:16:39,680
example we have a mobile

314
00:16:39,680 --> 00:16:42,959
world where we have a wi-fi chip

315
00:16:42,959 --> 00:16:45,680
but in the same way we have a baseband

316
00:16:45,680 --> 00:16:46,320
chip

317
00:16:46,320 --> 00:16:49,120
but both communication communicated with

318
00:16:49,120 --> 00:16:50,959
application processor

319
00:16:50,959 --> 00:16:53,759
so in in in the mobile world we have

320
00:16:53,759 --> 00:16:55,600
this pretty similar problem

321
00:16:55,600 --> 00:16:58,880
where where best band chip can be one

322
00:16:58,880 --> 00:17:02,000
vendor wi-fi chip another vendor and

323
00:17:02,000 --> 00:17:04,720
application processor get done by the

324
00:17:04,720 --> 00:17:05,839
third vendor

325
00:17:05,839 --> 00:17:08,559
so the problem is the same but the

326
00:17:08,559 --> 00:17:10,480
solution it's also the same

327
00:17:10,480 --> 00:17:15,280
so we need have more open specification

328
00:17:15,280 --> 00:17:19,119
and think on the security

329
00:17:19,119 --> 00:17:22,799
as a as a one picture not

330
00:17:22,799 --> 00:17:26,720
different pictures for each chip

331
00:17:27,119 --> 00:17:29,760
the system state transition between

332
00:17:29,760 --> 00:17:32,000
firmware layers and security boundaries

333
00:17:32,000 --> 00:17:34,640
defined by hardware but frequently

334
00:17:34,640 --> 00:17:35,919
verified

335
00:17:35,919 --> 00:17:39,280
in the firmware so it is a create

336
00:17:39,280 --> 00:17:42,000
exactly the way where the boundaries is

337
00:17:42,000 --> 00:17:43,200
crossing

338
00:17:43,200 --> 00:17:46,240
but in many cases we not count this

339
00:17:46,240 --> 00:17:47,200
boundary

340
00:17:47,200 --> 00:17:49,200
where we're making the threat modeling

341
00:17:49,200 --> 00:17:51,760
around the boot process on the hardware

342
00:17:51,760 --> 00:17:55,760
because we say okay hardware boundaries

343
00:17:55,760 --> 00:17:56,720
define it

344
00:17:56,720 --> 00:17:59,200
inside the hardware it's making them

345
00:17:59,200 --> 00:18:02,480
more secure as example root of trust

346
00:18:02,480 --> 00:18:04,960
bake it inside the hardware but if the

347
00:18:04,960 --> 00:18:06,960
transition is insecured

348
00:18:06,960 --> 00:18:10,720
the secure boot can be broken

349
00:18:12,480 --> 00:18:15,600
i really like this example of um

350
00:18:15,600 --> 00:18:18,640
boot guard the technology developed by

351
00:18:18,640 --> 00:18:21,679
intel where we have basically

352
00:18:21,679 --> 00:18:25,039
uh following a boot process

353
00:18:25,039 --> 00:18:27,600
we have a cpu microcode which is

354
00:18:27,600 --> 00:18:29,280
basically verify

355
00:18:29,280 --> 00:18:32,400
boot guard acm uh acm

356
00:18:32,400 --> 00:18:35,280
is a small piece of code which is

357
00:18:35,280 --> 00:18:37,679
executed before reset vector in no

358
00:18:37,679 --> 00:18:39,440
convicted memory

359
00:18:39,440 --> 00:18:42,559
and acm with this authenticated code

360
00:18:42,559 --> 00:18:43,360
model

361
00:18:43,360 --> 00:18:47,200
so basically after a reset vector

362
00:18:47,200 --> 00:18:52,559
passed and bootguard actually verified

363
00:18:53,760 --> 00:18:57,360
ibb then ok manifest

364
00:18:57,360 --> 00:19:00,000
which is actually verified initial boot

365
00:19:00,000 --> 00:19:00,720
block

366
00:19:00,720 --> 00:19:03,120
and it's actually creating some

367
00:19:03,120 --> 00:19:04,960
transition of trust

368
00:19:04,960 --> 00:19:08,400
and after that

369
00:19:08,480 --> 00:19:11,600
initial boot block ibb verify

370
00:19:11,600 --> 00:19:16,080
other stages like dixie and bds

371
00:19:16,080 --> 00:19:18,399
but

372
00:19:20,559 --> 00:19:22,840
think about the transition of chain of

373
00:19:22,840 --> 00:19:24,240
trust

374
00:19:24,240 --> 00:19:26,960
it's kind of like a simplified picture

375
00:19:26,960 --> 00:19:27,440
but

376
00:19:27,440 --> 00:19:30,559
we have some part of this

377
00:19:30,559 --> 00:19:33,840
transition signed by intel but also we

378
00:19:33,840 --> 00:19:35,600
have fused

379
00:19:35,600 --> 00:19:38,720
key by oem vendor which is control

380
00:19:38,720 --> 00:19:42,400
actually ibb

381
00:19:42,400 --> 00:19:46,240
and other uh

382
00:19:47,039 --> 00:19:50,840
other stages after that so

383
00:19:50,840 --> 00:19:54,160
basically it is creating

384
00:19:54,160 --> 00:19:57,679
some really interesting situation

385
00:19:57,679 --> 00:20:01,919
where we splitting transition of trust

386
00:20:01,919 --> 00:20:04,880
between multiple vendors and another

387
00:20:04,880 --> 00:20:05,600
side

388
00:20:05,600 --> 00:20:08,960
we also have uh like

389
00:20:08,960 --> 00:20:12,640
uh really

390
00:20:12,640 --> 00:20:15,840
like security controlled by one vendor

391
00:20:15,840 --> 00:20:18,240
which is create the specification

392
00:20:18,240 --> 00:20:21,440
make it kind of obscure because it is

393
00:20:21,440 --> 00:20:21,760
not

394
00:20:21,760 --> 00:20:25,039
public but it's shared with some oem's

395
00:20:25,039 --> 00:20:26,080
vendors

396
00:20:26,080 --> 00:20:29,120
which is basically in many cases

397
00:20:29,120 --> 00:20:32,799
don't have proper security teams so

398
00:20:32,799 --> 00:20:36,400
and it's why in 2016 i found multiple

399
00:20:36,400 --> 00:20:37,760
problems in the

400
00:20:37,760 --> 00:20:40,240
implementation boot guard and presented

401
00:20:40,240 --> 00:20:42,000
at blackhead

402
00:20:42,000 --> 00:20:46,559
so uh you can find my uh

403
00:20:46,559 --> 00:20:48,960
slides modern secure boot attacks by

404
00:20:48,960 --> 00:20:50,799
passing hardware route of trust

405
00:20:50,799 --> 00:20:55,440
from blackhat asia and uh opcode 2019

406
00:20:55,440 --> 00:20:58,720
but also it's been part of research

407
00:20:58,720 --> 00:21:02,080
from 2016 blackhat vegas but look on

408
00:21:02,080 --> 00:21:03,520
this picture actually

409
00:21:03,520 --> 00:21:06,200
what's happening we have also some

410
00:21:06,200 --> 00:21:07,520
inconsistence

411
00:21:07,520 --> 00:21:10,559
of security features because think about

412
00:21:10,559 --> 00:21:13,280
we need to update many machines in our

413
00:21:13,280 --> 00:21:14,240
networks

414
00:21:14,240 --> 00:21:17,280
so in many cases we need to disable some

415
00:21:17,280 --> 00:21:19,280
of the security technologies which is

416
00:21:19,280 --> 00:21:20,000
make

417
00:21:20,000 --> 00:21:23,280
remote updates hard or sometimes

418
00:21:23,280 --> 00:21:25,919
even more harder when we have this

419
00:21:25,919 --> 00:21:28,080
diverse ecosystem with the hardware

420
00:21:28,080 --> 00:21:29,919
encryption

421
00:21:29,919 --> 00:21:33,280
with disk drive encryption

422
00:21:33,280 --> 00:21:36,000
from different vendors which is don't

423
00:21:36,000 --> 00:21:38,320
work together very properly and we need

424
00:21:38,320 --> 00:21:42,320
just disabled it sometimes right

425
00:21:43,600 --> 00:21:48,080
but if we back to uh

426
00:21:48,080 --> 00:21:51,919
to uh boot guard

427
00:21:51,919 --> 00:21:56,000
actually uh at my talk

428
00:21:56,000 --> 00:21:59,520
in uh offensive con and black hat asia

429
00:21:59,520 --> 00:22:02,159
i was found some problem which is

430
00:22:02,159 --> 00:22:03,200
actually been

431
00:22:03,200 --> 00:22:07,760
disabling uh boot guard ibb verification

432
00:22:07,760 --> 00:22:11,840
if we make some platform configuration

433
00:22:11,840 --> 00:22:15,200
flag available it will be basically

434
00:22:15,200 --> 00:22:18,559
create platform manufacturing mode uh

435
00:22:18,559 --> 00:22:21,120
this available which is basically

436
00:22:21,120 --> 00:22:22,960
disable verification

437
00:22:22,960 --> 00:22:25,760
and open the door for the attacker to

438
00:22:25,760 --> 00:22:26,559
bypass

439
00:22:26,559 --> 00:22:29,360
all the transition uh on the later boot

440
00:22:29,360 --> 00:22:31,679
stages of u5 firmware

441
00:22:31,679 --> 00:22:35,840
uh this is wrong

442
00:22:35,840 --> 00:22:39,440
with wrong without any verification

443
00:22:39,440 --> 00:22:40,240
actually it

444
00:22:40,240 --> 00:22:43,440
can be modified and then basically

445
00:22:43,440 --> 00:22:46,720
uh it will be no signal from the system

446
00:22:46,720 --> 00:22:50,400
the secure boot being uh not verified

447
00:22:50,400 --> 00:22:51,120
correctly

448
00:22:51,120 --> 00:22:54,640
any good stage so

449
00:22:54,640 --> 00:22:57,120
another interesting attack uh being

450
00:22:57,120 --> 00:22:59,440
reported by tremol hudson

451
00:22:59,440 --> 00:23:02,480
where he found uh

452
00:23:02,480 --> 00:23:05,360
time to use time to check with the spy

453
00:23:05,360 --> 00:23:06,320
flash

454
00:23:06,320 --> 00:23:10,000
where early boot stage uh use acm

455
00:23:10,000 --> 00:23:13,600
and acm actually read

456
00:23:13,600 --> 00:23:16,640
key manifest and other information

457
00:23:16,640 --> 00:23:20,320
from the spy flash so

458
00:23:20,320 --> 00:23:24,000
here is uh different phases where

459
00:23:24,000 --> 00:23:27,039
it is actually appears on the boot stage

460
00:23:27,039 --> 00:23:32,000
and where disable uh

461
00:23:32,000 --> 00:23:36,080
in non-invictate mode caches ram uh

462
00:23:36,080 --> 00:23:39,039
get done right so and we can see

463
00:23:39,039 --> 00:23:39,840
actually

464
00:23:39,840 --> 00:23:43,440
in it of dram and low tram

465
00:23:43,440 --> 00:23:45,679
in it model happening earlier so

466
00:23:45,679 --> 00:23:47,840
basically

467
00:23:47,840 --> 00:23:51,279
uh it is making some possibility for the

468
00:23:51,279 --> 00:23:52,320
attacker

469
00:23:52,320 --> 00:23:55,760
to to

470
00:23:55,760 --> 00:23:58,880
modify something before

471
00:23:58,880 --> 00:24:02,159
it will be verified and we can basically

472
00:24:02,159 --> 00:24:03,120
fake it

473
00:24:03,120 --> 00:24:05,919
this information and verification will

474
00:24:05,919 --> 00:24:07,679
be get

475
00:24:07,679 --> 00:24:11,039
exactly information the attacker wants

476
00:24:11,039 --> 00:24:15,200
but the system uh

477
00:24:15,600 --> 00:24:17,279
and it will be passed the system

478
00:24:17,279 --> 00:24:20,080
verification here is a github link

479
00:24:20,080 --> 00:24:23,200
where this this issue been fixed uh

480
00:24:23,200 --> 00:24:25,760
the interesting thing uh not many

481
00:24:25,760 --> 00:24:28,000
vendors actually applies this fix

482
00:24:28,000 --> 00:24:32,320
and this issue available broadly in the

483
00:24:32,320 --> 00:24:36,320
in the wild uh with the

484
00:24:36,320 --> 00:24:39,279
many vulnerable systems but it's it is

485
00:24:39,279 --> 00:24:41,520
needed physical access for the attacker

486
00:24:41,520 --> 00:24:42,799
to make this

487
00:24:42,799 --> 00:24:44,960
uh time to use time to check race

488
00:24:44,960 --> 00:24:46,880
condition

489
00:24:46,880 --> 00:24:51,120
attacked complexity of the modern

490
00:24:51,120 --> 00:24:52,799
firmware supply chain

491
00:24:52,799 --> 00:24:55,840
is very complex

492
00:24:55,840 --> 00:24:58,158
and

493
00:24:59,039 --> 00:25:02,159
not control it 100 percent by single

494
00:25:02,159 --> 00:25:03,440
hardware vendor

495
00:25:03,440 --> 00:25:06,080
it's why it's creating a lot of problems

496
00:25:06,080 --> 00:25:08,000
for holocaust system

497
00:25:08,000 --> 00:25:11,360
because we have one

498
00:25:11,360 --> 00:25:14,799
uh part of the code like intel reference

499
00:25:14,799 --> 00:25:16,720
code or edk2

500
00:25:16,720 --> 00:25:20,559
coming from uh from the one side

501
00:25:20,559 --> 00:25:23,120
we have a phoenix american mega trends

502
00:25:23,120 --> 00:25:24,400
or inside

503
00:25:24,400 --> 00:25:27,760
uh vendors of usual ufi

504
00:25:27,760 --> 00:25:30,000
frameworks for developing the firmware

505
00:25:30,000 --> 00:25:31,679
from another site

506
00:25:31,679 --> 00:25:34,880
but also we have part of the code which

507
00:25:34,880 --> 00:25:36,480
is developed by

508
00:25:36,480 --> 00:25:39,840
original manufacturer equipment

509
00:25:39,840 --> 00:25:43,840
so and also all this

510
00:25:43,840 --> 00:25:47,200
code need to be patched and the patch is

511
00:25:47,200 --> 00:25:49,440
coming from the different sources

512
00:25:49,440 --> 00:25:52,320
which is create a lot of inconsistency

513
00:25:52,320 --> 00:25:52,640
and

514
00:25:52,640 --> 00:25:56,240
i would say uh in in this in this way

515
00:25:56,240 --> 00:25:58,559
only apple actually control

516
00:25:58,559 --> 00:26:02,720
all all the way uh of their firmware

517
00:26:02,720 --> 00:26:05,120
updates

518
00:26:08,159 --> 00:26:11,360
what about good old days with operating

519
00:26:11,360 --> 00:26:12,799
system bootloaders

520
00:26:12,799 --> 00:26:15,279
so if you think about the legacy boot

521
00:26:15,279 --> 00:26:16,159
process

522
00:26:16,159 --> 00:26:18,320
we have the bias code which is passing

523
00:26:18,320 --> 00:26:20,240
control to master boot tractor

524
00:26:20,240 --> 00:26:24,559
boot record and bootstrap code like a

525
00:26:24,559 --> 00:26:28,320
volume boot record and initial

526
00:26:28,320 --> 00:26:31,360
platform loader so

527
00:26:31,360 --> 00:26:33,520
which is past actually control to boot

528
00:26:33,520 --> 00:26:36,080
manager

529
00:26:37,279 --> 00:26:41,760
and uh in uefi we have ufi firmware

530
00:26:41,760 --> 00:26:44,640
passed the control directly to ufi

531
00:26:44,640 --> 00:26:45,760
bootloader

532
00:26:45,760 --> 00:26:49,840
which is actually pass the control to

533
00:26:49,840 --> 00:26:50,960
win load

534
00:26:50,960 --> 00:26:54,880
efi so boot manager efi and wind loan

535
00:26:54,880 --> 00:27:06,960
controlled by the operating system

536
00:27:06,960 --> 00:27:09,919
but what secure boot will save us all

537
00:27:09,919 --> 00:27:12,240
right

538
00:27:16,080 --> 00:27:19,120
in many cases yes but

539
00:27:19,120 --> 00:27:22,720
uh also we can see

540
00:27:22,720 --> 00:27:26,159
how uh ufi ransomware actually appears

541
00:27:26,159 --> 00:27:27,600
recently which is just

542
00:27:27,600 --> 00:27:30,720
uh use patches for

543
00:27:30,720 --> 00:27:34,159
uh boot manager and wind load ufi

544
00:27:34,159 --> 00:27:37,080
which is actually create uh some

545
00:27:37,080 --> 00:27:38,480
possibilities

546
00:27:38,480 --> 00:27:41,120
to for the attacker to lock the system

547
00:27:41,120 --> 00:27:43,120
in the boot process but of course

548
00:27:43,120 --> 00:27:45,679
it will be also blocked by secure boot

549
00:27:45,679 --> 00:27:46,880
and it's mostly

550
00:27:46,880 --> 00:27:51,520
focused on on windows 7 system

551
00:27:51,520 --> 00:27:55,840
which is already quite rare

552
00:27:55,840 --> 00:27:59,279
applicable but still

553
00:27:59,279 --> 00:28:02,640
we have this inconsistency in signing

554
00:28:02,640 --> 00:28:04,480
process of the bootloader

555
00:28:04,480 --> 00:28:07,840
and if you remember

556
00:28:07,840 --> 00:28:10,240
it was few months ago the discussion

557
00:28:10,240 --> 00:28:11,120
around

558
00:28:11,120 --> 00:28:13,919
the signed bootloader by the kaspersky

559
00:28:13,919 --> 00:28:15,600
which is can be abused

560
00:28:15,600 --> 00:28:18,080
for basically loading the next stage

561
00:28:18,080 --> 00:28:19,200
bootloader

562
00:28:19,200 --> 00:28:23,520
modified by the attacker and

563
00:28:23,520 --> 00:28:27,520
actually uh this signature been reworked

564
00:28:27,520 --> 00:28:31,520
but it was not uh exactly

565
00:28:31,520 --> 00:28:34,320
uh patch it on all these systems it was

566
00:28:34,320 --> 00:28:34,880
just

567
00:28:34,880 --> 00:28:38,000
reworked and provided optional update by

568
00:28:38,000 --> 00:28:39,360
many vendors

569
00:28:39,360 --> 00:28:43,679
so what if cyanide

570
00:28:43,679 --> 00:28:47,200
bootloaders can be not trusted

571
00:28:47,200 --> 00:28:50,880
it is exactly actually

572
00:28:50,880 --> 00:28:54,880
why uh security industry learn

573
00:28:54,880 --> 00:28:58,080
a lot of lessons back to

574
00:28:58,080 --> 00:29:01,840
early 2000s when

575
00:29:01,840 --> 00:29:05,039
when we learn when the sign of binaries

576
00:29:05,039 --> 00:29:08,399
doesn't mean trusted but the same thing

577
00:29:08,399 --> 00:29:11,200
actually we need to think about on the

578
00:29:11,200 --> 00:29:12,000
bootloader

579
00:29:12,000 --> 00:29:15,440
side sign it not mean

580
00:29:15,440 --> 00:29:19,919
or not equal to be trusted

581
00:29:20,880 --> 00:29:24,720
also that's remind me my 16 100

582
00:29:24,720 --> 00:29:29,279
golden key issue where the vulnerability

583
00:29:29,279 --> 00:29:32,000
can be used for the feature bypass and

584
00:29:32,000 --> 00:29:34,159
attacker can install

585
00:29:34,159 --> 00:29:38,320
modified boot manager so and bypass

586
00:29:38,320 --> 00:29:41,600
secure boot uh on the windows

587
00:29:41,600 --> 00:29:45,840
so this uh this issue been presented

588
00:29:45,840 --> 00:29:49,279
in on the dif con at 2016

589
00:29:49,279 --> 00:29:51,840
and also you can find more information

590
00:29:51,840 --> 00:29:53,200
based on this link

591
00:29:53,200 --> 00:29:56,240
but it's pretty similar on the problem

592
00:29:56,240 --> 00:29:58,320
which is being discovered pretty

593
00:29:58,320 --> 00:29:59,279
recently

594
00:29:59,279 --> 00:30:02,640
so we blindly trust anything which is

595
00:30:02,640 --> 00:30:05,600
signed and come from the trusted source

596
00:30:05,600 --> 00:30:05,840
as

597
00:30:05,840 --> 00:30:09,200
example bootloaders or like firmware

598
00:30:09,200 --> 00:30:09,919
updates

599
00:30:09,919 --> 00:30:12,000
if you don't log them from the trusted

600
00:30:12,000 --> 00:30:13,919
website that's mean

601
00:30:13,919 --> 00:30:18,320
it's a trusted source right but

602
00:30:18,320 --> 00:30:21,840
also think about

603
00:30:21,840 --> 00:30:24,960
one more interesting vulnerability

604
00:30:24,960 --> 00:30:28,320
been recently spotted boot hall

605
00:30:28,320 --> 00:30:31,679
basically what happens

606
00:30:31,679 --> 00:30:34,960
if we have signed bootloader

607
00:30:34,960 --> 00:30:37,760
but this bootloader contains some

608
00:30:37,760 --> 00:30:39,520
vulnerabilities

609
00:30:39,520 --> 00:30:43,360
or inconsistency of

610
00:30:43,360 --> 00:30:46,640
the trusted chain so it's exactly what

611
00:30:46,640 --> 00:30:47,520
happens

612
00:30:47,520 --> 00:30:51,600
and also this kind of vulnerabilities

613
00:30:51,600 --> 00:30:55,279
can contain the way

614
00:30:55,279 --> 00:30:58,960
for uh by passing the clouds

615
00:30:58,960 --> 00:31:02,840
i mean cloud security because if we

616
00:31:02,840 --> 00:31:06,080
abuse the platform boot and persist

617
00:31:06,080 --> 00:31:07,440
inside the firmware

618
00:31:07,440 --> 00:31:10,880
we can go upper the stack and

619
00:31:10,880 --> 00:31:13,919
bypass many layers of security there

620
00:31:13,919 --> 00:31:16,799
so i would say virtual machines

621
00:31:16,799 --> 00:31:18,960
encryption memory isolation and memory

622
00:31:18,960 --> 00:31:21,360
encryption technologies really helps

623
00:31:21,360 --> 00:31:24,559
but it's not spread everywhere yet

624
00:31:24,559 --> 00:31:27,120
and it's also has a lot of limitations

625
00:31:27,120 --> 00:31:33,840
on older platforms

626
00:31:34,720 --> 00:31:37,840
so as we can see here is a grub

627
00:31:37,840 --> 00:31:41,120
issue which is allow to boot any

628
00:31:41,120 --> 00:31:42,240
bootloader

629
00:31:42,240 --> 00:31:44,640
on upper stage which is basically

630
00:31:44,640 --> 00:31:46,000
arbitrary controlled by

631
00:31:46,000 --> 00:31:49,440
the attacker in this case and

632
00:31:49,440 --> 00:31:52,799
it was spotted on hp proliant

633
00:31:52,799 --> 00:32:00,000
servers earlier this year

634
00:32:00,000 --> 00:32:01,840
the diversity of the open source

635
00:32:01,840 --> 00:32:03,519
ecosystem actually bring

636
00:32:03,519 --> 00:32:06,399
more inconsistency to the boot process

637
00:32:06,399 --> 00:32:08,000
on the late stages

638
00:32:08,000 --> 00:32:10,960
and many vendors which is doesn't have a

639
00:32:10,960 --> 00:32:12,880
proper security teams

640
00:32:12,880 --> 00:32:15,919
can recognize this problem

641
00:32:15,919 --> 00:32:19,360
or actually this sub supply chain make a

642
00:32:19,360 --> 00:32:20,720
lot of difficulties

643
00:32:20,720 --> 00:32:25,519
to patch these issues in the right

644
00:32:26,840 --> 00:32:28,240
timing

645
00:32:28,240 --> 00:32:30,399
think about on the embedded world we

646
00:32:30,399 --> 00:32:31,519
have a

647
00:32:31,519 --> 00:32:35,519
bootrom usually is usually baked inside

648
00:32:35,519 --> 00:32:37,760
the silicon and we have a multiple

649
00:32:37,760 --> 00:32:38,799
stages

650
00:32:38,799 --> 00:32:43,840
happens after that

651
00:32:44,240 --> 00:32:49,279
so what if

652
00:32:49,279 --> 00:32:52,640
one of these stages will be affected to

653
00:32:52,640 --> 00:32:54,799
the issue in the runtime

654
00:32:54,799 --> 00:32:57,519
so in many cases we have this transition

655
00:32:57,519 --> 00:32:58,480
of trust

656
00:32:58,480 --> 00:33:01,600
which is basically focus on

657
00:33:01,600 --> 00:33:04,720
uh bootrom inside the silicon which is

658
00:33:04,720 --> 00:33:06,320
verify the loader

659
00:33:06,320 --> 00:33:08,559
and then passing the control in runtime

660
00:33:08,559 --> 00:33:09,760
to the next stages

661
00:33:09,760 --> 00:33:13,360
loaders so in this case

662
00:33:13,360 --> 00:33:16,399
uh if it will be issue

663
00:33:16,399 --> 00:33:19,039
in the silicon boot rom so the attacker

664
00:33:19,039 --> 00:33:19,919
can bypass

665
00:33:19,919 --> 00:33:22,960
any upper layers but

666
00:33:22,960 --> 00:33:26,159
what if it will be issue on the next

667
00:33:26,159 --> 00:33:27,360
stage loader

668
00:33:27,360 --> 00:33:31,120
so if the issue can be uh exploited

669
00:33:31,120 --> 00:33:32,640
after verification

670
00:33:32,640 --> 00:33:36,080
or even on the upper layers so

671
00:33:36,080 --> 00:33:37,919
that's done right so because the

672
00:33:37,919 --> 00:33:40,000
transition already happens

673
00:33:40,000 --> 00:33:43,039
and after that the loader became the

674
00:33:43,039 --> 00:33:44,080
root of trust

675
00:33:44,080 --> 00:33:47,120
and after loader verifies the bootloader

676
00:33:47,120 --> 00:33:49,360
bootloader actually gets this transition

677
00:33:49,360 --> 00:33:52,799
of trust on their stage it's why

678
00:33:52,799 --> 00:33:55,360
it is important to have the consistency

679
00:33:55,360 --> 00:33:56,880
of the secure boot

680
00:33:56,880 --> 00:34:00,399
and also we need to

681
00:34:00,399 --> 00:34:06,000
make all this uh

682
00:34:06,000 --> 00:34:09,040
supply chain ecosystem for embedded

683
00:34:09,040 --> 00:34:10,159
bootloaders

684
00:34:10,159 --> 00:34:13,599
more consistent

685
00:34:16,960 --> 00:34:21,119
also what can go wrong right so

686
00:34:21,119 --> 00:34:24,239
with a silicon boot rom it's remind me

687
00:34:24,239 --> 00:34:26,399
a checkmate issue which has been

688
00:34:26,399 --> 00:34:28,000
recently found

689
00:34:28,000 --> 00:34:31,280
on bootrom of the apple devices

690
00:34:31,280 --> 00:34:35,199
but i will not go deep on it

691
00:34:35,199 --> 00:34:38,480
because it's not a topic of our talk

692
00:34:38,480 --> 00:34:41,918
but what i want to say it's why

693
00:34:41,918 --> 00:34:46,079
um hardware security

694
00:34:46,079 --> 00:34:49,040
can be very hard in this case this issue

695
00:34:49,040 --> 00:34:50,480
bake it in silicon

696
00:34:50,480 --> 00:34:53,199
it's hard to patch on other layers and

697
00:34:53,199 --> 00:34:53,599
then

698
00:34:53,599 --> 00:34:56,079
basically it will be stay forever in

699
00:34:56,079 --> 00:35:02,400
this device

700
00:35:02,400 --> 00:35:05,839
also another example

701
00:35:06,160 --> 00:35:10,000
it is at 2019 90

702
00:35:10,000 --> 00:35:14,320
which is basically csme intel sesame

703
00:35:14,320 --> 00:35:17,119
initialization stage issue basically

704
00:35:17,119 --> 00:35:18,400
what happens

705
00:35:18,400 --> 00:35:21,760
it is a very uh interesting issue

706
00:35:21,760 --> 00:35:24,960
when sesame turns

707
00:35:24,960 --> 00:35:28,320
on paging and maps from uh

708
00:35:28,320 --> 00:35:31,280
in very early stage and i am iomu

709
00:35:31,280 --> 00:35:32,480
basically

710
00:35:32,480 --> 00:35:35,920
memory isolation uh it's turned on too

711
00:35:35,920 --> 00:35:38,160
late and the attacker can remap this

712
00:35:38,160 --> 00:35:39,599
execution pages

713
00:35:39,599 --> 00:35:42,000
to arbitrary physical device even

714
00:35:42,000 --> 00:35:43,599
spyflash which is actually

715
00:35:43,599 --> 00:35:45,599
open the doors for the attacker to

716
00:35:45,599 --> 00:35:47,599
attack sesame

717
00:35:47,599 --> 00:35:50,960
it is very cool bug being spotted by

718
00:35:50,960 --> 00:35:53,200
positive technologies folks

719
00:35:53,200 --> 00:35:57,280
but also it is a example of the silicon

720
00:35:57,280 --> 00:35:58,160
bug which is

721
00:35:58,160 --> 00:36:00,960
actually hard to punch because it's been

722
00:36:00,960 --> 00:36:02,000
created

723
00:36:02,000 --> 00:36:05,359
in the part of the boot rom which is

724
00:36:05,359 --> 00:36:10,480
invictable and not can be touched

725
00:36:11,119 --> 00:36:15,359
it's why uh in many cases

726
00:36:15,359 --> 00:36:18,720
we need to see the full picture

727
00:36:18,720 --> 00:36:22,400
and all these transitions uh to

728
00:36:22,400 --> 00:36:26,400
to understand where we need to focus

729
00:36:26,400 --> 00:36:28,880
on security validation and verification

730
00:36:28,880 --> 00:36:29,520
because

731
00:36:29,520 --> 00:36:32,400
as offensive researcher i always try to

732
00:36:32,400 --> 00:36:34,000
find the weak spots

733
00:36:34,000 --> 00:36:36,880
and in many cases the big spots tied to

734
00:36:36,880 --> 00:36:41,839
the hardware

735
00:36:42,720 --> 00:36:46,000
the boot time software supply chain only

736
00:36:46,000 --> 00:36:46,640
increasing

737
00:36:46,640 --> 00:36:49,200
actually the complexity because if we

738
00:36:49,200 --> 00:36:50,560
have all these

739
00:36:50,560 --> 00:36:54,320
bootloaders uh from the open source

740
00:36:54,320 --> 00:36:56,400
it's very hard to fight because in many

741
00:36:56,400 --> 00:36:58,560
cases also third party vendors

742
00:36:58,560 --> 00:37:01,760
get modify them and provide

743
00:37:01,760 --> 00:37:05,200
their versions uh uh

744
00:37:05,200 --> 00:37:08,960
uh to the market so basically

745
00:37:08,960 --> 00:37:12,160
uh you can't uh control

746
00:37:12,160 --> 00:37:15,839
the supply chain when original

747
00:37:15,839 --> 00:37:18,880
uh version of u-boat or

748
00:37:18,880 --> 00:37:21,680
grub release something right you need to

749
00:37:21,680 --> 00:37:23,040
patch

750
00:37:23,040 --> 00:37:26,800
your own software based on your

751
00:37:26,800 --> 00:37:29,760
modifications

752
00:37:30,079 --> 00:37:33,839
i really like this picture from the talk

753
00:37:33,839 --> 00:37:34,800
of rob wood

754
00:37:34,800 --> 00:37:36,960
from the platform security summit last

755
00:37:36,960 --> 00:37:38,000
year

756
00:37:38,000 --> 00:37:40,400
which is talking about the complexity of

757
00:37:40,400 --> 00:37:41,920
the attack surface

758
00:37:41,920 --> 00:37:45,359
uh increasing uh on the operating system

759
00:37:45,359 --> 00:37:46,079
level

760
00:37:46,079 --> 00:37:49,599
but in the same thing it is decreasing

761
00:37:49,599 --> 00:37:52,560
on the firmware and the hardware level

762
00:37:52,560 --> 00:37:53,599
because

763
00:37:53,599 --> 00:37:58,320
we do have a lot of fancy mitigations

764
00:37:58,320 --> 00:38:01,359
on the software stacks but

765
00:38:01,359 --> 00:38:04,400
it is really limited on

766
00:38:04,400 --> 00:38:07,680
the down layers like firmware and

767
00:38:07,680 --> 00:38:10,240
hardware

768
00:38:10,880 --> 00:38:14,079
but what if root of trust will be baked

769
00:38:14,079 --> 00:38:15,280
in fpga

770
00:38:15,280 --> 00:38:19,040
or silicon

771
00:38:19,040 --> 00:38:22,000
uh it reminds me very interesting issue

772
00:38:22,000 --> 00:38:23,359
with uh

773
00:38:23,359 --> 00:38:25,680
finding from from the red balance

774
00:38:25,680 --> 00:38:27,440
security last year

775
00:38:27,440 --> 00:38:30,480
this cisco trusted on her where

776
00:38:30,480 --> 00:38:33,760
on the cisco devices root of trust

777
00:38:33,760 --> 00:38:36,880
being baked on the fpga

778
00:38:36,880 --> 00:38:39,760
and there find the found the way how

779
00:38:39,760 --> 00:38:42,720
they basically can

780
00:38:42,720 --> 00:38:46,720
attack and modify the bit stream

781
00:38:46,720 --> 00:38:49,520
and basically bypass the secure boot and

782
00:38:49,520 --> 00:38:49,839
may

783
00:38:49,839 --> 00:38:53,760
gain the persistence on on

784
00:38:53,760 --> 00:38:57,280
uh on the cisco routers and devices

785
00:38:57,280 --> 00:39:01,119
with trusted on her but on another way

786
00:39:01,119 --> 00:39:04,320
it was also a little bootloader on max

787
00:39:04,320 --> 00:39:05,680
10 fpgas from

788
00:39:05,680 --> 00:39:09,119
intel and it was interesting

789
00:39:09,119 --> 00:39:13,839
issue where the attacker can use

790
00:39:13,839 --> 00:39:17,920
race condition attack on on

791
00:39:17,920 --> 00:39:20,720
on the bootrom

792
00:39:22,800 --> 00:39:25,920
what about open silicon how it helps to

793
00:39:25,920 --> 00:39:27,520
reduce the risk

794
00:39:27,520 --> 00:39:30,400
actually it's create more transparency

795
00:39:30,400 --> 00:39:31,760
on one side

796
00:39:31,760 --> 00:39:36,880
but also how many of this transparency

797
00:39:36,880 --> 00:39:39,680
can be reused by the vendors in the

798
00:39:39,680 --> 00:39:42,960
right way

799
00:39:42,960 --> 00:39:46,560
so think about so we have a traditional

800
00:39:46,560 --> 00:39:48,240
route of trust

801
00:39:48,240 --> 00:39:51,280
on the embedded devices where

802
00:39:51,280 --> 00:39:54,400
in most of the cases

803
00:39:54,400 --> 00:39:58,480
the root of trust tied to bootrom

804
00:39:58,720 --> 00:40:01,839
i really like the concept of open titan

805
00:40:01,839 --> 00:40:04,960
where uh most of rtl

806
00:40:04,960 --> 00:40:08,079
code it's a transparent but on another

807
00:40:08,079 --> 00:40:08,960
side

808
00:40:08,960 --> 00:40:12,319
it is create a lot of complexity for

809
00:40:12,319 --> 00:40:14,720
uh for the developer to make this

810
00:40:14,720 --> 00:40:16,560
properly implemented

811
00:40:16,560 --> 00:40:21,040
and also supported on their devices

812
00:40:21,200 --> 00:40:23,520
you blindly trust anything which is

813
00:40:23,520 --> 00:40:25,599
based baked in silicon

814
00:40:25,599 --> 00:40:30,079
in many cases and also

815
00:40:30,079 --> 00:40:33,200
we trust blindly all our

816
00:40:33,200 --> 00:40:37,040
hardware think about

817
00:40:37,280 --> 00:40:39,760
but we have a risk five revolution

818
00:40:39,760 --> 00:40:41,040
coming right so

819
00:40:41,040 --> 00:40:44,240
and uh basically where we have all these

820
00:40:44,240 --> 00:40:45,920
open standards

821
00:40:45,920 --> 00:40:50,319
and what is actually concerning me

822
00:40:50,319 --> 00:40:53,520
it is currently we have a lot of

823
00:40:53,520 --> 00:40:56,480
actually silicon and rtl open cores

824
00:40:56,480 --> 00:40:58,560
available for the third parties

825
00:40:58,560 --> 00:41:01,599
and you basically can reuse a lot of

826
00:41:01,599 --> 00:41:05,119
design from the other vendors like

827
00:41:05,119 --> 00:41:08,400
nvidia or uh

828
00:41:08,400 --> 00:41:11,839
western digital it is available uh

829
00:41:11,839 --> 00:41:16,000
on open ver like uh this open rtl

830
00:41:16,000 --> 00:41:19,680
in verilog but problem here a lot of

831
00:41:19,680 --> 00:41:22,800
companies small companies can reuse this

832
00:41:22,800 --> 00:41:23,760
eyepiece

833
00:41:23,760 --> 00:41:27,040
without proper validation and it's

834
00:41:27,040 --> 00:41:28,480
basically create

835
00:41:28,480 --> 00:41:31,680
the silicon supply chain hell where

836
00:41:31,680 --> 00:41:34,560
we have on one side a lot of open source

837
00:41:34,560 --> 00:41:34,880
and

838
00:41:34,880 --> 00:41:38,160
transparent silicon but on another side

839
00:41:38,160 --> 00:41:40,960
it can be reused without proper

840
00:41:40,960 --> 00:41:43,760
validation

841
00:41:45,280 --> 00:41:48,880
also we have this problem with

842
00:41:48,880 --> 00:41:51,839
counterfeit devices and hardware implies

843
00:41:51,839 --> 00:41:53,760
it's actually not a rare thing

844
00:41:53,760 --> 00:41:57,040
as you can think about

845
00:41:57,040 --> 00:42:01,359
i really like uh recent f-secure labs

846
00:42:01,359 --> 00:42:05,040
uh report about uh counterfeit cisco

847
00:42:05,040 --> 00:42:06,079
devices

848
00:42:06,079 --> 00:42:09,680
with some open uh gtac pins

849
00:42:09,680 --> 00:42:12,240
and some pins for actually bypass all

850
00:42:12,240 --> 00:42:12,800
the

851
00:42:12,800 --> 00:42:15,119
trusted boot on the platform and many

852
00:42:15,119 --> 00:42:17,839
other things

853
00:42:19,359 --> 00:42:21,760
we really need to rethink meaning of

854
00:42:21,760 --> 00:42:24,240
hardware security in realities of modern

855
00:42:24,240 --> 00:42:25,599
threat models

856
00:42:25,599 --> 00:42:28,880
and as offensive researchers

857
00:42:28,880 --> 00:42:31,920
we need to focus on

858
00:42:31,920 --> 00:42:35,359
fixing uh the hardware trend

859
00:42:35,359 --> 00:42:37,760
modeling on the hardware right finding

860
00:42:37,760 --> 00:42:38,960
the issues

861
00:42:38,960 --> 00:42:42,160
and uh in many cases uh

862
00:42:42,160 --> 00:42:45,440
my threat model is different from the

863
00:42:45,440 --> 00:42:47,280
threat model which is think

864
00:42:47,280 --> 00:42:50,640
from the vendor side i would say in many

865
00:42:50,640 --> 00:42:52,480
cases my assessments

866
00:42:52,480 --> 00:42:55,200
on the platforms it's where the threat

867
00:42:55,200 --> 00:42:55,920
modeling

868
00:42:55,920 --> 00:42:59,839
meets the realities

869
00:43:00,240 --> 00:43:04,000
hardware security is hard but we need

870
00:43:04,000 --> 00:43:07,680
to make it's more secure in the hardware

871
00:43:07,680 --> 00:43:08,079
the

872
00:43:08,079 --> 00:43:11,680
hard way then thank you very much for

873
00:43:11,680 --> 00:43:12,000
your

874
00:43:12,000 --> 00:43:14,560
attention

875
00:43:21,760 --> 00:43:24,160
so we just had an excellent uh

876
00:43:24,160 --> 00:43:26,240
presentation by matrisof

877
00:43:26,240 --> 00:43:28,560
uh now we'll be answering some questions

878
00:43:28,560 --> 00:43:29,440
you guys just

879
00:43:29,440 --> 00:43:33,040
did so uh alex uh thanks for being here

880
00:43:33,040 --> 00:43:35,119
with us for the q a session

881
00:43:35,119 --> 00:43:38,079
uh my pleasure yeah you're welcome uh

882
00:43:38,079 --> 00:43:39,040
the first question

883
00:43:39,040 --> 00:43:42,240
is um how often uh

884
00:43:42,240 --> 00:43:46,240
sorry uh we have a question about

885
00:43:46,240 --> 00:43:48,560
uh we couldn't understand really well

886
00:43:48,560 --> 00:43:50,560
this question but i think the person is

887
00:43:50,560 --> 00:43:54,000
asking for uh supply chain controls for

888
00:43:54,000 --> 00:43:58,079
firmware in general if simplicity helps

889
00:43:58,079 --> 00:44:00,319
yeah i think it's actually a very good

890
00:44:00,319 --> 00:44:02,240
question and it's covered some of the

891
00:44:02,240 --> 00:44:03,680
thoughts from my talk

892
00:44:03,680 --> 00:44:07,520
so uh actually the problem is as example

893
00:44:07,520 --> 00:44:08,400
for ufi

894
00:44:08,400 --> 00:44:11,920
ecosystem and for x86 uh platforms

895
00:44:11,920 --> 00:44:13,040
firmware

896
00:44:13,040 --> 00:44:16,000
ecosystem is very complex and as example

897
00:44:16,000 --> 00:44:17,920
compared to the single

898
00:44:17,920 --> 00:44:20,560
arm chips it's it's much more simpler as

899
00:44:20,560 --> 00:44:22,079
example if you have uh

900
00:44:22,079 --> 00:44:24,240
one vendor like apple which has

901
00:44:24,240 --> 00:44:25,760
developed the hardware

902
00:44:25,760 --> 00:44:29,119
and also the firmware that supply chain

903
00:44:29,119 --> 00:44:31,760
uh much more simpler because the single

904
00:44:31,760 --> 00:44:32,480
vendor

905
00:44:32,480 --> 00:44:34,560
develops the firmwares and ship to the

906
00:44:34,560 --> 00:44:37,280
customers but if we talk about like

907
00:44:37,280 --> 00:44:38,960
usual case with

908
00:44:38,960 --> 00:44:42,480
x86 servers and uh client platforms

909
00:44:42,480 --> 00:44:44,960
it is like uh intel develop intel

910
00:44:44,960 --> 00:44:46,880
reference code for the firmware

911
00:44:46,880 --> 00:44:48,800
it's cheap for the third-party vendors

912
00:44:48,800 --> 00:44:51,839
like american mega trends or phoenix

913
00:44:51,839 --> 00:44:53,520
which has developed the firmware

914
00:44:53,520 --> 00:44:56,079
frameworks and these frameworks used by

915
00:44:56,079 --> 00:44:58,960
other vendors to develop their their

916
00:44:58,960 --> 00:45:01,359
firmwares and ship to the end customers

917
00:45:01,359 --> 00:45:03,920
and think about how many points of this

918
00:45:03,920 --> 00:45:05,200
supply chain

919
00:45:05,200 --> 00:45:07,280
you have and actually if vulnerability

920
00:45:07,280 --> 00:45:09,359
happens in intel reference code

921
00:45:09,359 --> 00:45:11,359
intel need to be responsible for this

922
00:45:11,359 --> 00:45:13,440
vulnerability if vulnerability happens

923
00:45:13,440 --> 00:45:13,760
in

924
00:45:13,760 --> 00:45:16,319
american megatrends or phoenix these

925
00:45:16,319 --> 00:45:19,119
guys should fix it but problem is also

926
00:45:19,119 --> 00:45:20,319
they have kind of like

927
00:45:20,319 --> 00:45:22,640
support time and as example if the

928
00:45:22,640 --> 00:45:23,359
systems

929
00:45:23,359 --> 00:45:25,359
uh for a particular vendor is out of

930
00:45:25,359 --> 00:45:26,960
support for this firmware

931
00:45:26,960 --> 00:45:29,920
so uh this issues will be stay forever

932
00:45:29,920 --> 00:45:32,160
so yeah it's very complicated but i hope

933
00:45:32,160 --> 00:45:35,280
in the future we can fix it

934
00:45:35,280 --> 00:45:37,599
excellent uh another one from alfredo

935
00:45:37,599 --> 00:45:38,319
diaz

936
00:45:38,319 --> 00:45:40,880
uh how often are the hacking threats

937
00:45:40,880 --> 00:45:43,040
that need a physical access

938
00:45:43,040 --> 00:45:46,400
to a computer oh that's an interesting

939
00:45:46,400 --> 00:45:46,960
question

940
00:45:46,960 --> 00:45:50,400
so i would say um

941
00:45:50,880 --> 00:45:53,440
usually actually if we talk about the

942
00:45:53,440 --> 00:45:54,160
actors

943
00:45:54,160 --> 00:45:57,440
uh threat actors they prefer

944
00:45:57,440 --> 00:46:00,400
uh remote attacks but if it is like a

945
00:46:00,400 --> 00:46:01,760
particular target

946
00:46:01,760 --> 00:46:04,079
as example you go into the conference

947
00:46:04,079 --> 00:46:05,280
and somehow you get

948
00:46:05,280 --> 00:46:07,920
uh interested by particular people and

949
00:46:07,920 --> 00:46:09,359
they want to attack you

950
00:46:09,359 --> 00:46:12,720
so you leave your laptop in the hotel

951
00:46:12,720 --> 00:46:15,839
so basically if they can get access to

952
00:46:15,839 --> 00:46:16,560
your room

953
00:46:16,560 --> 00:46:18,720
uh the physical access will be give a

954
00:46:18,720 --> 00:46:20,000
lot of uh

955
00:46:20,000 --> 00:46:22,880
possibilities uh for for attack your

956
00:46:22,880 --> 00:46:24,960
computer as example bypass

957
00:46:24,960 --> 00:46:28,319
login screen uh install some persistent

958
00:46:28,319 --> 00:46:31,760
uh implant to your firmware and

959
00:46:31,760 --> 00:46:34,160
etc it's a lot of steps can be done in

960
00:46:34,160 --> 00:46:34,960
this way

961
00:46:34,960 --> 00:46:37,680
also if uh back to the previous question

962
00:46:37,680 --> 00:46:39,200
about the supply chain

963
00:46:39,200 --> 00:46:41,440
so basically you have you buying the

964
00:46:41,440 --> 00:46:44,079
server let's say from amazon or whatever

965
00:46:44,079 --> 00:46:47,680
uh company so it's a long way

966
00:46:47,680 --> 00:46:49,920
before it's shipped to your data center

967
00:46:49,920 --> 00:46:51,680
or your office right so

968
00:46:51,680 --> 00:46:54,800
basically i would i would say um

969
00:46:54,800 --> 00:46:57,760
if you get any hardware uh and want to

970
00:46:57,760 --> 00:46:59,839
install in your data center make a

971
00:46:59,839 --> 00:47:02,079
simple provision and don't what original

972
00:47:02,079 --> 00:47:02,720
firmware

973
00:47:02,720 --> 00:47:06,240
and uh flash it directly to the hardware

974
00:47:06,240 --> 00:47:08,800
uh before you install uh this uh

975
00:47:08,800 --> 00:47:10,079
hardware to your data

976
00:47:10,079 --> 00:47:13,280
centers or if you get a new a new laptop

977
00:47:13,280 --> 00:47:15,760
so yes it is new but you don't know uh

978
00:47:15,760 --> 00:47:17,920
what happens on the way to you so

979
00:47:17,920 --> 00:47:20,240
uh be sure you have original firmware on

980
00:47:20,240 --> 00:47:21,119
this laptop

981
00:47:21,119 --> 00:47:23,200
uh make sure it is enough and malicious

982
00:47:23,200 --> 00:47:25,200
there yeah

983
00:47:25,200 --> 00:47:27,760
yeah so in in the first scenario i was

984
00:47:27,760 --> 00:47:28,480
wondering

985
00:47:28,480 --> 00:47:30,960
if you were invited to the kaspersky

986
00:47:30,960 --> 00:47:32,000
researchers

987
00:47:32,000 --> 00:47:34,480
invitation only conference you probably

988
00:47:34,480 --> 00:47:36,079
should be

989
00:47:36,079 --> 00:47:38,400
really concerned with that particular

990
00:47:38,400 --> 00:47:39,440
scenario i

991
00:47:39,440 --> 00:47:41,760
i would say i would concern with any

992
00:47:41,760 --> 00:47:43,359
conference which is

993
00:47:43,359 --> 00:47:46,000
security conferences it's not about the

994
00:47:46,000 --> 00:47:48,800
conference it's just about like uh

995
00:47:48,800 --> 00:47:51,520
who can uh yeah participate right so

996
00:47:51,520 --> 00:47:52,640
yeah and uh

997
00:47:52,640 --> 00:47:55,200
also this year we stayed remote right

998
00:47:55,200 --> 00:47:56,720
virtual conferences save

999
00:47:56,720 --> 00:48:00,559
us all yeah yeah i have friends that

1000
00:48:00,559 --> 00:48:01,440
they say that

1001
00:48:01,440 --> 00:48:03,440
you know they the best thing with

1002
00:48:03,440 --> 00:48:05,280
security conferences is that

1003
00:48:05,280 --> 00:48:07,200
you know don't take your machine there

1004
00:48:07,200 --> 00:48:08,400
leave it at home

1005
00:48:08,400 --> 00:48:11,520
so and i have well we have another

1006
00:48:11,520 --> 00:48:12,400
question here

1007
00:48:12,400 --> 00:48:15,119
um i think it's a follow-up question on

1008
00:48:15,119 --> 00:48:16,000
your answer

1009
00:48:16,000 --> 00:48:19,200
about supply chain attacks that is uh

1010
00:48:19,200 --> 00:48:21,680
but if if we need a company

1011
00:48:21,680 --> 00:48:24,079
to at least uh to make the chips and

1012
00:48:24,079 --> 00:48:25,040
firmwares

1013
00:48:25,040 --> 00:48:27,599
how can we feel safe nobody's spying on

1014
00:48:27,599 --> 00:48:30,160
us or controlling our data

1015
00:48:30,160 --> 00:48:32,319
so yes that's actually a very

1016
00:48:32,319 --> 00:48:34,880
interesting question because i would say

1017
00:48:34,880 --> 00:48:37,119
the hardware companies need to be more

1018
00:48:37,119 --> 00:48:38,319
transparent because

1019
00:48:38,319 --> 00:48:40,480
basically it's a lot of things which is

1020
00:48:40,480 --> 00:48:43,040
happening in silicon is just a black box

1021
00:48:43,040 --> 00:48:45,680
think about uh as example inter intel

1022
00:48:45,680 --> 00:48:46,640
microcode

1023
00:48:46,640 --> 00:48:49,839
uh it's providing

1024
00:48:49,839 --> 00:48:52,319
most of uh security features available

1025
00:48:52,319 --> 00:48:54,160
on the platform as example

1026
00:48:54,160 --> 00:48:56,319
uh it's even implementing some of the

1027
00:48:56,319 --> 00:48:57,520
route of trusts

1028
00:48:57,520 --> 00:49:00,720
tied to the platform so and

1029
00:49:00,720 --> 00:49:02,640
we don't have any understanding what

1030
00:49:02,640 --> 00:49:04,079
happening there we don't have any

1031
00:49:04,079 --> 00:49:05,040
provisioning just

1032
00:49:05,040 --> 00:49:08,240
intel control intel ship updates etc

1033
00:49:08,240 --> 00:49:10,319
so it's create a lot of complications

1034
00:49:10,319 --> 00:49:12,640
and concern it's not only about intel

1035
00:49:12,640 --> 00:49:13,359
it's about

1036
00:49:13,359 --> 00:49:15,599
any type of the silicon companies

1037
00:49:15,599 --> 00:49:16,800
usually try to be

1038
00:49:16,800 --> 00:49:21,359
more they try to be more restrict

1039
00:49:21,359 --> 00:49:24,559
restrictive to what they

1040
00:49:24,559 --> 00:49:27,839
share on the documentation and

1041
00:49:27,839 --> 00:49:30,480
i would say in this case we need kind of

1042
00:49:30,480 --> 00:49:32,160
like

1043
00:49:32,160 --> 00:49:33,839
gaining more transparency on the

1044
00:49:33,839 --> 00:49:35,520
hardware because it will

1045
00:49:35,520 --> 00:49:38,160
help us also to fight the future threats

1046
00:49:38,160 --> 00:49:39,839
because in current state

1047
00:49:39,839 --> 00:49:42,079
uh as example endpoint solutions have a

1048
00:49:42,079 --> 00:49:44,000
zero visibility on the firmware and

1049
00:49:44,000 --> 00:49:44,800
hardware

1050
00:49:44,800 --> 00:49:47,680
so it's creating huge room for the

1051
00:49:47,680 --> 00:49:49,599
persistent attacks which is happening on

1052
00:49:49,599 --> 00:49:50,720
that level

1053
00:49:50,720 --> 00:49:54,000
and as example collaboration between uh

1054
00:49:54,000 --> 00:49:55,920
the companies who developing security

1055
00:49:55,920 --> 00:49:58,000
solutions and the hardware vendors

1056
00:49:58,000 --> 00:50:00,319
to create this kind of like transparency

1057
00:50:00,319 --> 00:50:02,160
or some indicators

1058
00:50:02,160 --> 00:50:04,400
which we can gather from hardware and

1059
00:50:04,400 --> 00:50:05,760
firmware levels

1060
00:50:05,760 --> 00:50:09,359
it will be very helpful excellent uh

1061
00:50:09,359 --> 00:50:11,440
alfredo had another follow-up question

1062
00:50:11,440 --> 00:50:12,400
but i think you

1063
00:50:12,400 --> 00:50:14,800
somehow uh address it and then we have

1064
00:50:14,800 --> 00:50:15,599
our last

1065
00:50:15,599 --> 00:50:20,000
last question if you efi and secure boot

1066
00:50:20,000 --> 00:50:22,800
are not secure anymore what settings

1067
00:50:22,800 --> 00:50:23,440
features

1068
00:50:23,440 --> 00:50:26,000
or twos can we use to mitigate that

1069
00:50:26,000 --> 00:50:27,599
risks

1070
00:50:27,599 --> 00:50:30,559
um so it's actually a very hard question

1071
00:50:30,559 --> 00:50:31,040
because

1072
00:50:31,040 --> 00:50:34,160
i would say if the firmware is already

1073
00:50:34,160 --> 00:50:34,880
hacked

1074
00:50:34,880 --> 00:50:36,880
basically let's say the platform not

1075
00:50:36,880 --> 00:50:38,800
boots in one way right so it's the

1076
00:50:38,800 --> 00:50:40,000
stages of the good

1077
00:50:40,000 --> 00:50:43,119
process and between these stages it is a

1078
00:50:43,119 --> 00:50:45,520
transition of the chain of trust and as

1079
00:50:45,520 --> 00:50:47,599
example even if we have a breakage to

1080
00:50:47,599 --> 00:50:49,520
the hardware root of trust

1081
00:50:49,520 --> 00:50:51,839
it's make a transition to some of the

1082
00:50:51,839 --> 00:50:54,000
stages which is tied to the firmware and

1083
00:50:54,000 --> 00:50:54,960
it is already

1084
00:50:54,960 --> 00:50:58,079
only the software control uh uh

1085
00:50:58,079 --> 00:51:00,880
controlled and so basically the firmware

1086
00:51:00,880 --> 00:51:02,720
is controlled by the attacker

1087
00:51:02,720 --> 00:51:04,640
it's really hard to make this platform

1088
00:51:04,640 --> 00:51:06,000
secure i would say

1089
00:51:06,000 --> 00:51:08,319
it's almost impossible because the

1090
00:51:08,319 --> 00:51:09,119
transitions

1091
00:51:09,119 --> 00:51:12,240
on the later boot processes uh happens

1092
00:51:12,240 --> 00:51:15,040
inside the firmware and basically when

1093
00:51:15,040 --> 00:51:16,559
um

1094
00:51:16,559 --> 00:51:19,599
when the your operating system starts

1095
00:51:19,599 --> 00:51:23,200
and basically uh some

1096
00:51:23,200 --> 00:51:25,599
code injections which can happens in the

1097
00:51:25,599 --> 00:51:26,640
bootloaders

1098
00:51:26,640 --> 00:51:30,160
control it by uh by the firmware right

1099
00:51:30,160 --> 00:51:30,559
so

1100
00:51:30,559 --> 00:51:32,880
basically attacker have a full control

1101
00:51:32,880 --> 00:51:34,319
on the upper level

1102
00:51:34,319 --> 00:51:37,040
boot process and i would say uh yeah i

1103
00:51:37,040 --> 00:51:40,000
will not trust this system

1104
00:51:40,000 --> 00:51:43,280
yes so with this last question we just

1105
00:51:43,280 --> 00:51:45,920
uh finished matrizoff's uh presentation

1106
00:51:45,920 --> 00:51:46,880
here

1107
00:51:46,880 --> 00:51:50,800
at ocho pontoucho uh i do miss a lot

1108
00:51:50,800 --> 00:51:53,040
of physical events and you know because

1109
00:51:53,040 --> 00:51:55,760
of that i just figured out a way to

1110
00:51:55,760 --> 00:51:59,040
you know applause our speakers so thanks

1111
00:51:59,040 --> 00:52:04,240
a lot matt rozoff for being with us

1112
00:52:04,240 --> 00:52:06,480
yeah thank you very much i i really

1113
00:52:06,480 --> 00:52:08,800
appreciate invite for this conference

1114
00:52:08,800 --> 00:52:12,000
i i really want to make it physical

1115
00:52:12,000 --> 00:52:14,240
because i never been in chile but maybe

1116
00:52:14,240 --> 00:52:19,839
next year thank you guys it was awesome

1117
00:52:20,180 --> 00:52:23,270
[Music]

