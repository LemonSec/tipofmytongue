1
00:00:11,000 --> 00:00:14,119
[Music]

2
00:00:42,160 --> 00:00:45,840
hello everyone i hope my voice is loud

3
00:00:45,840 --> 00:00:47,840
and clear and it's audible

4
00:00:47,840 --> 00:00:49,760
uh without taking a lot of time i'll

5
00:00:49,760 --> 00:00:52,239
just jump right into a topic i'm sure

6
00:00:52,239 --> 00:00:54,640
you are very excited to hear about all

7
00:00:54,640 --> 00:00:57,360
the different topics in this conference

8
00:00:57,360 --> 00:00:58,480
and

9
00:00:58,480 --> 00:01:00,399
along with other speakers i'm sure this

10
00:01:00,399 --> 00:01:03,280
topic will also be very informative and

11
00:01:03,280 --> 00:01:05,519
in case you have any concerns and

12
00:01:05,519 --> 00:01:06,640
questions

13
00:01:06,640 --> 00:01:08,640
just feel free to reserve them for the

14
00:01:08,640 --> 00:01:10,840
last part wherein i'll answer all the

15
00:01:10,840 --> 00:01:13,200
questions i'm doing it remotely but

16
00:01:13,200 --> 00:01:14,799
doesn't mean that we cannot interact

17
00:01:14,799 --> 00:01:17,439
just feel free to bring all your queries

18
00:01:17,439 --> 00:01:19,920
or questions hold them back until we

19
00:01:19,920 --> 00:01:23,520
have a later on qna sessions so

20
00:01:23,520 --> 00:01:25,759
just let's get started so today's topic

21
00:01:25,759 --> 00:01:28,159
i'm taking is how we can secure the

22
00:01:28,159 --> 00:01:31,119
containers and kubernetes deployment for

23
00:01:31,119 --> 00:01:32,240
your next

24
00:01:32,240 --> 00:01:34,560
projects if you're working on any i'll

25
00:01:34,560 --> 00:01:36,720
be taking and discussing few best

26
00:01:36,720 --> 00:01:39,200
industry practices tools and what are

27
00:01:39,200 --> 00:01:41,360
the common differences between these two

28
00:01:41,360 --> 00:01:43,920
terms and other reference things which

29
00:01:43,920 --> 00:01:46,880
we quite often see when we are talking

30
00:01:46,880 --> 00:01:48,479
about these two terms

31
00:01:48,479 --> 00:01:50,320
so bear with me and

32
00:01:50,320 --> 00:01:52,399
let's get into the topic

33
00:01:52,399 --> 00:01:55,119
before we start as uh customary i

34
00:01:55,119 --> 00:01:57,840
answered like who am i i'll be saying

35
00:01:57,840 --> 00:02:00,320
that currently i'm working as senior

36
00:02:00,320 --> 00:02:02,079
manager with cloud risk advising with

37
00:02:02,079 --> 00:02:05,280
deloitte i'm based out of singapore i am

38
00:02:05,280 --> 00:02:07,600
i consider myself as blockchain defy and

39
00:02:07,600 --> 00:02:10,639
kubernetes enthusiast and i also do a

40
00:02:10,639 --> 00:02:12,959
lot of regular speaking and panelist

41
00:02:12,959 --> 00:02:14,959
sessions in various conferences around

42
00:02:14,959 --> 00:02:17,760
the globe uh i love teaching and

43
00:02:17,760 --> 00:02:19,360
building community and that's one of the

44
00:02:19,360 --> 00:02:20,640
reason i'm participating in the

45
00:02:20,640 --> 00:02:22,959
conferences as well to summarize i'll

46
00:02:22,959 --> 00:02:25,840
say that i'm engineer by qualification

47
00:02:25,840 --> 00:02:28,640
uh consultant by profession a hacker at

48
00:02:28,640 --> 00:02:31,360
heart and a researcher by passion

49
00:02:31,360 --> 00:02:33,040
i have been in industry for quite a

50
00:02:33,040 --> 00:02:34,959
while now and i've seen a lot of new

51
00:02:34,959 --> 00:02:36,560
technologies

52
00:02:36,560 --> 00:02:38,879
i started with a lot of new technologies

53
00:02:38,879 --> 00:02:41,360
and have been working in many so i'm

54
00:02:41,360 --> 00:02:43,519
quite excited and with this whole cyber

55
00:02:43,519 --> 00:02:45,760
security domain itself new

56
00:02:45,760 --> 00:02:48,080
new engineers coming inside researchers

57
00:02:48,080 --> 00:02:50,480
coming in the technology so i'm looking

58
00:02:50,480 --> 00:02:52,160
forward to contribute

59
00:02:52,160 --> 00:02:55,920
and make sure that this new domain of

60
00:02:55,920 --> 00:02:58,480
containers and kubernetes is something

61
00:02:58,480 --> 00:03:00,640
which is touched upon and is not

62
00:03:00,640 --> 00:03:02,959
something which is very new to everyone

63
00:03:02,959 --> 00:03:05,200
so i'll be sharing my thoughts on that

64
00:03:05,200 --> 00:03:06,640
in case you want to reach out to me

65
00:03:06,640 --> 00:03:08,640
after the my talk or any other questions

66
00:03:08,640 --> 00:03:10,959
you may have which is not clear during

67
00:03:10,959 --> 00:03:12,400
the session you can reach out to my

68
00:03:12,400 --> 00:03:14,480
socials i have shared my twitter

69
00:03:14,480 --> 00:03:16,080
linkedin which you can reach out to

70
00:03:16,080 --> 00:03:18,720
reach to nickel for all the gen z's if

71
00:03:18,720 --> 00:03:20,640
you are not on twitter or linkedin i

72
00:03:20,640 --> 00:03:22,319
also have shared my instagram you can

73
00:03:22,319 --> 00:03:24,400
reach out me there as well so let's get

74
00:03:24,400 --> 00:03:27,280
into the agenda next so in this session

75
00:03:27,280 --> 00:03:29,519
i'll be talking about the containers and

76
00:03:29,519 --> 00:03:31,280
the virtual machines what are the basic

77
00:03:31,280 --> 00:03:33,920
differences what we had talked about is

78
00:03:33,920 --> 00:03:36,480
this like is really containers something

79
00:03:36,480 --> 00:03:38,400
which is which will overtake the virtual

80
00:03:38,400 --> 00:03:40,400
machines or what are the benefits so

81
00:03:40,400 --> 00:03:42,720
i'll touch on those topics

82
00:03:42,720 --> 00:03:44,319
i'll also talk about the benefits of

83
00:03:44,319 --> 00:03:46,560
containers over the virtual machines

84
00:03:46,560 --> 00:03:48,959
then we'll talk about kubernetes and

85
00:03:48,959 --> 00:03:50,239
dockers like what are the key

86
00:03:50,239 --> 00:03:52,000
differences and why we are using these

87
00:03:52,000 --> 00:03:54,480
terms when we talk about the containers

88
00:03:54,480 --> 00:03:57,200
later we will see some best practices on

89
00:03:57,200 --> 00:03:59,280
secure deployments of containers and

90
00:03:59,280 --> 00:04:00,480
kubernetes

91
00:04:00,480 --> 00:04:01,280
uh

92
00:04:01,280 --> 00:04:03,280
in the last section of this talk i'll

93
00:04:03,280 --> 00:04:05,840
talk about the common tools which common

94
00:04:05,840 --> 00:04:07,439
tools and the players in the container

95
00:04:07,439 --> 00:04:10,480
security space right now and which you

96
00:04:10,480 --> 00:04:11,840
should be aware of

97
00:04:11,840 --> 00:04:13,519
uh i'm not

98
00:04:13,519 --> 00:04:14,959
like trying to

99
00:04:14,959 --> 00:04:17,519
name or particularly highlight any it's

100
00:04:17,519 --> 00:04:19,040
just something which i'm aware of and

101
00:04:19,040 --> 00:04:22,400
you should know who are the key players

102
00:04:22,400 --> 00:04:24,720
let's go to the first part which is

103
00:04:24,720 --> 00:04:27,680
virtual machines and the containers so

104
00:04:27,680 --> 00:04:29,440
as you might know that containers are

105
00:04:29,440 --> 00:04:31,520
like kind of a form of operating system

106
00:04:31,520 --> 00:04:34,160
virtualization a single container might

107
00:04:34,160 --> 00:04:36,320
be used to run anything from a small

108
00:04:36,320 --> 00:04:38,400
micro services or a software processes

109
00:04:38,400 --> 00:04:40,880
to a large application as well

110
00:04:40,880 --> 00:04:44,000
inside a container like there could be

111
00:04:44,000 --> 00:04:46,160
all the necessary executable binary

112
00:04:46,160 --> 00:04:48,720
codes libraries and configuration files

113
00:04:48,720 --> 00:04:51,520
which can be included and compared to

114
00:04:51,520 --> 00:04:53,360
any kind of a virtual machine or like a

115
00:04:53,360 --> 00:04:55,840
server virtualization approach which you

116
00:04:55,840 --> 00:04:57,280
normally see in a traditional

117
00:04:57,280 --> 00:05:00,160
environment it makes container more

118
00:05:00,160 --> 00:05:02,639
lightweight and portable so that is like

119
00:05:02,639 --> 00:05:04,560
one of the major reason if you see from

120
00:05:04,560 --> 00:05:06,560
this architecture diagram so if you see

121
00:05:06,560 --> 00:05:09,039
the basic building block here

122
00:05:09,039 --> 00:05:10,880
a lot of things remains the constant

123
00:05:10,880 --> 00:05:12,400
like for example in a virtual machine

124
00:05:12,400 --> 00:05:14,000
kind of environment we have

125
00:05:14,000 --> 00:05:16,479
infrastructure operating system which is

126
00:05:16,479 --> 00:05:18,080
being shared and then we have the

127
00:05:18,080 --> 00:05:20,080
hypervisor which has its own guest

128
00:05:20,080 --> 00:05:21,759
operating system and then for the

129
00:05:21,759 --> 00:05:23,360
libraries and applications which is

130
00:05:23,360 --> 00:05:25,360
running on the virtual machine in case

131
00:05:25,360 --> 00:05:27,120
of containers the

132
00:05:27,120 --> 00:05:29,039
sharing of the layer is also at the

133
00:05:29,039 --> 00:05:30,960
operating system so the host operating

134
00:05:30,960 --> 00:05:33,039
system layer is also being shared and

135
00:05:33,039 --> 00:05:34,800
then there is a container daemon which

136
00:05:34,800 --> 00:05:37,039
runs wherein all different kind of

137
00:05:37,039 --> 00:05:39,039
applications and libraries can run on

138
00:05:39,039 --> 00:05:41,120
that particular container daemon so in

139
00:05:41,120 --> 00:05:44,720
that case it makes it it it breaks the

140
00:05:44,720 --> 00:05:46,320
particular

141
00:05:46,320 --> 00:05:48,000
host operating system layer from the

142
00:05:48,000 --> 00:05:50,800
overall architecture that saves a lot of

143
00:05:50,800 --> 00:05:53,039
space and overhead from a container and

144
00:05:53,039 --> 00:05:54,320
that's why they are called more

145
00:05:54,320 --> 00:05:56,639
lightweight and like the reason why they

146
00:05:56,639 --> 00:05:58,479
are more portable so that's one of the

147
00:05:58,479 --> 00:06:00,240
reason from architecture basic

148
00:06:00,240 --> 00:06:02,560
architecture wise which

149
00:06:02,560 --> 00:06:05,199
which makes containers more handy or

150
00:06:05,199 --> 00:06:07,840
portable i'll be taking more details

151
00:06:07,840 --> 00:06:09,360
what like what are the key differences

152
00:06:09,360 --> 00:06:10,479
between virtual machines in the

153
00:06:10,479 --> 00:06:13,758
container in the next slides

154
00:06:13,840 --> 00:06:15,039
so

155
00:06:15,039 --> 00:06:17,280
as we see like a basic container jokes

156
00:06:17,280 --> 00:06:20,000
yeah so containers are just lightweight

157
00:06:20,000 --> 00:06:22,880
vms right yes definitely but that's not

158
00:06:22,880 --> 00:06:24,800
the only thing there are other reasons

159
00:06:24,800 --> 00:06:27,360
why we prefer containers over the

160
00:06:27,360 --> 00:06:29,520
virtual machines and what are they let's

161
00:06:29,520 --> 00:06:30,880
see them

162
00:06:30,880 --> 00:06:33,199
so i'll say that like these are few

163
00:06:33,199 --> 00:06:35,840
criterias which have been identified and

164
00:06:35,840 --> 00:06:37,360
we are comparing virtual machines and

165
00:06:37,360 --> 00:06:39,680
docker images or containers in this case

166
00:06:39,680 --> 00:06:42,479
under these areas so first from a os

167
00:06:42,479 --> 00:06:44,240
support perspective

168
00:06:44,240 --> 00:06:45,840
virtual machine as we have seen from a

169
00:06:45,840 --> 00:06:49,120
previous architecture it takes a lot of

170
00:06:49,120 --> 00:06:52,000
space wherein dockers contains less

171
00:06:52,000 --> 00:06:54,160
space

172
00:06:54,160 --> 00:06:55,919
from a boot up perspective like virtual

173
00:06:55,919 --> 00:06:57,759
machines takes a lot of time because of

174
00:06:57,759 --> 00:06:59,680
the operating system it has wherein

175
00:06:59,680 --> 00:07:01,440
dockers are very fast from a boot

176
00:07:01,440 --> 00:07:02,400
perspective

177
00:07:02,400 --> 00:07:04,560
from a performance perspective again

178
00:07:04,560 --> 00:07:06,800
because of the excessive size of the

179
00:07:06,800 --> 00:07:08,880
virtual machine it makes them like

180
00:07:08,880 --> 00:07:10,639
unstable from a performance perspective

181
00:07:10,639 --> 00:07:12,400
compared to docker

182
00:07:12,400 --> 00:07:14,880
scaling a virtual machine is definitely

183
00:07:14,880 --> 00:07:16,400
difficult to scale up because every time

184
00:07:16,400 --> 00:07:18,479
you need to consider a host os layer

185
00:07:18,479 --> 00:07:20,400
wherein in docker it's very easy to

186
00:07:20,400 --> 00:07:23,039
scale up and efficiency wise as well

187
00:07:23,039 --> 00:07:26,000
like docker being very easily scalable

188
00:07:26,000 --> 00:07:28,720
and portable makes it more efficient

189
00:07:28,720 --> 00:07:30,800
portability is something which we have

190
00:07:30,800 --> 00:07:32,800
seen from architecture that uh like

191
00:07:32,800 --> 00:07:35,120
virtual machines are less

192
00:07:35,120 --> 00:07:37,360
and have a lot of issues when we talks

193
00:07:37,360 --> 00:07:38,800
about the portability like from a

194
00:07:38,800 --> 00:07:40,720
dependency perspective wherein the

195
00:07:40,720 --> 00:07:43,199
docker main main feature of the docker

196
00:07:43,199 --> 00:07:45,680
is that it is a bit portable

197
00:07:45,680 --> 00:07:47,919
uh space allocation wise virtual machine

198
00:07:47,919 --> 00:07:50,160
like uh the data volumes can not be

199
00:07:50,160 --> 00:07:52,160
shared because everybody have their own

200
00:07:52,160 --> 00:07:55,039
operating systems and have os os data

201
00:07:55,039 --> 00:07:57,280
volumes wherein docker being like

202
00:07:57,280 --> 00:07:59,199
sharing the same operating system they

203
00:07:59,199 --> 00:08:01,599
have they can be they can easily share

204
00:08:01,599 --> 00:08:04,319
the same data volumes so this is like

205
00:08:04,319 --> 00:08:05,360
common

206
00:08:05,360 --> 00:08:08,800
um i'll say differences uh sometimes

207
00:08:08,800 --> 00:08:10,319
people also confuses container

208
00:08:10,319 --> 00:08:12,000
technologies with virtual machines or

209
00:08:12,000 --> 00:08:14,000
server virtualization technology

210
00:08:14,000 --> 00:08:14,720
but

211
00:08:14,720 --> 00:08:16,800
there are not much differences there are

212
00:08:16,800 --> 00:08:18,720
like it is completely different from the

213
00:08:18,720 --> 00:08:21,280
vms i'll say virtual machines on one

214
00:08:21,280 --> 00:08:23,599
case run on hypervisor environment where

215
00:08:23,599 --> 00:08:26,160
each virtual machine should include its

216
00:08:26,160 --> 00:08:28,080
own operating system as we have seen

217
00:08:28,080 --> 00:08:29,599
from the architecture

218
00:08:29,599 --> 00:08:31,840
and it should have its own binaries

219
00:08:31,840 --> 00:08:34,000
libraries and application file of course

220
00:08:34,000 --> 00:08:36,080
this will what it will do is it will

221
00:08:36,080 --> 00:08:38,240
consume a lot of memory space as we have

222
00:08:38,240 --> 00:08:39,599
seen from here

223
00:08:39,599 --> 00:08:41,279
where it like in case of

224
00:08:41,279 --> 00:08:43,599
containerization they share the same

225
00:08:43,599 --> 00:08:46,080
operating system or the kernels also

226
00:08:46,080 --> 00:08:48,720
sometimes which is very light in size

227
00:08:48,720 --> 00:08:51,440
and like just from example perspective

228
00:08:51,440 --> 00:08:53,839
it could be in just a megabyte and this

229
00:08:53,839 --> 00:08:55,920
means like the containers are very

230
00:08:55,920 --> 00:08:58,720
lightweight and can be used

231
00:08:58,720 --> 00:09:00,640
anywhere and it takes just a couple of

232
00:09:00,640 --> 00:09:02,720
seconds to start them so

233
00:09:02,720 --> 00:09:04,800
versus like the gigabytes of the virtual

234
00:09:04,800 --> 00:09:07,200
machines we just have like kind of

235
00:09:07,200 --> 00:09:09,680
megabytes of container images which can

236
00:09:09,680 --> 00:09:11,680
make our job easier so that's one of the

237
00:09:11,680 --> 00:09:13,760
reason why containers will be getting

238
00:09:13,760 --> 00:09:15,839
more popular right now

239
00:09:15,839 --> 00:09:17,760
and a lot of uh

240
00:09:17,760 --> 00:09:18,880
kind of

241
00:09:18,880 --> 00:09:21,040
industries are like going towards the

242
00:09:21,040 --> 00:09:24,320
containers as we move towards the cloud

243
00:09:24,320 --> 00:09:26,080
okay going to the next topic which is

244
00:09:26,080 --> 00:09:27,600
like we're talking about what are the

245
00:09:27,600 --> 00:09:30,880
benefits of the containers i have a lot

246
00:09:30,880 --> 00:09:32,959
but let me start with first like in

247
00:09:32,959 --> 00:09:35,519
simple words containers like makes

248
00:09:35,519 --> 00:09:37,519
building deploying and scaling cloud

249
00:09:37,519 --> 00:09:40,080
native application easier than ever like

250
00:09:40,080 --> 00:09:41,600
there's a best

251
00:09:41,600 --> 00:09:43,920
and the simplest i can put it on

252
00:09:43,920 --> 00:09:45,279
uh

253
00:09:45,279 --> 00:09:47,200
what does it mean is like

254
00:09:47,200 --> 00:09:49,200
for any cloud native developers like the

255
00:09:49,200 --> 00:09:51,279
biggest benefits of containers if i have

256
00:09:51,279 --> 00:09:54,880
to say could be that it like developers

257
00:09:54,880 --> 00:09:58,000
try to avoid as much as as much friction

258
00:09:58,000 --> 00:09:59,760
as possible when they are moving their

259
00:09:59,760 --> 00:10:01,440
code from like testing

260
00:10:01,440 --> 00:10:03,440
from a dev environment to a production

261
00:10:03,440 --> 00:10:05,600
environment as like when they package

262
00:10:05,600 --> 00:10:08,079
their application they

263
00:10:08,079 --> 00:10:10,160
they like it always comes with an error

264
00:10:10,160 --> 00:10:12,240
like this you see you have you might

265
00:10:12,240 --> 00:10:13,760
have heard about the typical problems

266
00:10:13,760 --> 00:10:16,079
that it runs on my system but not the

267
00:10:16,079 --> 00:10:18,160
other production system so those kind of

268
00:10:18,160 --> 00:10:20,320
issues can actually be

269
00:10:20,320 --> 00:10:22,720
solved easily wherein a developer can

270
00:10:22,720 --> 00:10:24,880
actually package their application code

271
00:10:24,880 --> 00:10:26,880
as a container and then can push that

272
00:10:26,880 --> 00:10:28,480
container image anywhere be it

273
00:10:28,480 --> 00:10:30,399
production deployment anywhere

274
00:10:30,399 --> 00:10:32,480
environment and it will definitely run

275
00:10:32,480 --> 00:10:34,640
because now you have packaging it in a

276
00:10:34,640 --> 00:10:37,120
container images so that's one of the

277
00:10:37,120 --> 00:10:39,040
major benefit that it eliminates that

278
00:10:39,040 --> 00:10:40,959
friction and that issue of for running

279
00:10:40,959 --> 00:10:43,440
it on on my system

280
00:10:43,440 --> 00:10:45,600
from next perspective i'll say that all

281
00:10:45,600 --> 00:10:47,440
the dependencies associated with

282
00:10:47,440 --> 00:10:49,360
application that are included within the

283
00:10:49,360 --> 00:10:52,000
container so this enables application to

284
00:10:52,000 --> 00:10:54,959
run very easily and identically across

285
00:10:54,959 --> 00:10:57,920
the virtual machine so you don't have to

286
00:10:57,920 --> 00:11:00,720
focus on individual applications and

287
00:11:00,720 --> 00:11:03,040
their dependencies it will

288
00:11:03,040 --> 00:11:04,800
like remove that

289
00:11:04,800 --> 00:11:06,959
barrier of dependencies and then make

290
00:11:06,959 --> 00:11:08,399
sure that your

291
00:11:08,399 --> 00:11:10,000
application is running over the virtual

292
00:11:10,000 --> 00:11:12,839
machine bare metal servers or wherever

293
00:11:12,839 --> 00:11:15,839
and doesn't mean only on the on-premises

294
00:11:15,839 --> 00:11:17,279
environment but even on the virtual

295
00:11:17,279 --> 00:11:19,040
clients or the public clouds environment

296
00:11:19,040 --> 00:11:21,760
as well so it make sure that your your

297
00:11:21,760 --> 00:11:23,600
application becomes a single source of

298
00:11:23,600 --> 00:11:26,560
truth for all the developers so that's

299
00:11:26,560 --> 00:11:29,600
another benefit i'll also say like uh

300
00:11:29,600 --> 00:11:32,640
containers take faster build time so

301
00:11:32,640 --> 00:11:35,680
like compared to any vms or anything the

302
00:11:35,680 --> 00:11:37,519
flexibility and the portability of

303
00:11:37,519 --> 00:11:40,079
containers enables developers to make

304
00:11:40,079 --> 00:11:43,440
huge gains on productivity and that was

305
00:11:43,440 --> 00:11:45,040
like previously very difficult to

306
00:11:45,040 --> 00:11:46,320
achieve when we were talking about the

307
00:11:46,320 --> 00:11:47,680
virtual machines and working in a

308
00:11:47,680 --> 00:11:49,279
virtual environment

309
00:11:49,279 --> 00:11:51,760
another benefit i'd say container has is

310
00:11:51,760 --> 00:11:54,639
the confidence uh which developers get

311
00:11:54,639 --> 00:11:55,600
when they are deploying their

312
00:11:55,600 --> 00:11:56,480
application

313
00:11:56,480 --> 00:11:58,959
because they know that this application

314
00:11:58,959 --> 00:12:01,120
whichever platform they are running is

315
00:12:01,120 --> 00:12:02,639
will be working because it is

316
00:12:02,639 --> 00:12:04,480
irrespective of an operating system

317
00:12:04,480 --> 00:12:06,320
layer so that's another thing which is

318
00:12:06,320 --> 00:12:08,959
very uh very important when we talk

319
00:12:08,959 --> 00:12:10,880
about the containers it removes that

320
00:12:10,880 --> 00:12:12,639
particular mindset between or that fear

321
00:12:12,639 --> 00:12:14,000
within the developers they feel more

322
00:12:14,000 --> 00:12:15,920
confident when writing new code or

323
00:12:15,920 --> 00:12:18,800
deploying building new application

324
00:12:18,800 --> 00:12:21,440
uh another thing i'll say the benefit

325
00:12:21,440 --> 00:12:23,360
would be that from a collaboration

326
00:12:23,360 --> 00:12:25,600
perspective like multiple teams can use

327
00:12:25,600 --> 00:12:27,760
the containers and they can work on the

328
00:12:27,760 --> 00:12:29,519
individual parts of the application

329
00:12:29,519 --> 00:12:31,839
without disrupting the code so because

330
00:12:31,839 --> 00:12:33,600
of the container based and the reason

331
00:12:33,600 --> 00:12:35,680
why this container is getting popular is

332
00:12:35,680 --> 00:12:38,320
because the application is not just now

333
00:12:38,320 --> 00:12:40,880
a single stack it's working on different

334
00:12:40,880 --> 00:12:42,560
different containers multiple container

335
00:12:42,560 --> 00:12:44,800
clusters will be running so

336
00:12:44,800 --> 00:12:46,399
if you want to redeploy if you want to

337
00:12:46,399 --> 00:12:48,560
make any changes within a code or any

338
00:12:48,560 --> 00:12:49,760
particular

339
00:12:49,760 --> 00:12:51,200
particular

340
00:12:51,200 --> 00:12:53,200
service you don't need to change the

341
00:12:53,200 --> 00:12:55,200
overall application you may just need to

342
00:12:55,200 --> 00:12:56,800
work on individual sections of that

343
00:12:56,800 --> 00:12:59,120
particular cluster container cluster and

344
00:12:59,120 --> 00:13:01,279
you can collaborate with different teams

345
00:13:01,279 --> 00:13:02,800
make sure that it is working not

346
00:13:02,800 --> 00:13:04,560
interrupting the overall function of the

347
00:13:04,560 --> 00:13:06,399
application so that's another

348
00:13:06,399 --> 00:13:08,399
important thing which i think is a very

349
00:13:08,399 --> 00:13:09,920
important part of

350
00:13:09,920 --> 00:13:12,959
containers and what makes them important

351
00:13:12,959 --> 00:13:15,839
um our typical question would be

352
00:13:15,839 --> 00:13:17,600
in short if i have to put summarize

353
00:13:17,600 --> 00:13:19,120
anything of this

354
00:13:19,120 --> 00:13:20,880
why containers and why they are

355
00:13:20,880 --> 00:13:22,800
important i'll say that

356
00:13:22,800 --> 00:13:24,720
it runs on any operating system be it

357
00:13:24,720 --> 00:13:27,440
linux windows or anywhere it runs

358
00:13:27,440 --> 00:13:30,160
anywhere like on-premises or cloud you

359
00:13:30,160 --> 00:13:32,639
choose where you want to run it it will

360
00:13:32,639 --> 00:13:35,600
any type of application architecture so

361
00:13:35,600 --> 00:13:36,959
if you are running in a traditional

362
00:13:36,959 --> 00:13:39,199
monolith applications definitely work

363
00:13:39,199 --> 00:13:41,440
and if you are working on a more modern

364
00:13:41,440 --> 00:13:43,040
modern application architecture like any

365
00:13:43,040 --> 00:13:45,120
micro services-based architecture

366
00:13:45,120 --> 00:13:46,800
containers are the best fit for these

367
00:13:46,800 --> 00:13:48,399
kind of architectures and it makes your

368
00:13:48,399 --> 00:13:49,760
life easier

369
00:13:49,760 --> 00:13:51,600
from a language perspective it supports

370
00:13:51,600 --> 00:13:53,440
any languages so that's another reason

371
00:13:53,440 --> 00:13:55,360
that why people

372
00:13:55,360 --> 00:13:57,279
prefer using containers when they are

373
00:13:57,279 --> 00:13:59,279
talking about the new modern app

374
00:13:59,279 --> 00:14:01,760
deployments app developments so these

375
00:14:01,760 --> 00:14:05,600
all makes containers very special like

376
00:14:05,600 --> 00:14:08,639
in any new iit architecture cloud native

377
00:14:08,639 --> 00:14:11,360
application still needs to be secured

378
00:14:11,360 --> 00:14:13,760
and container environments

379
00:14:13,760 --> 00:14:16,639
i feel will bring them a range of

380
00:14:16,639 --> 00:14:18,959
cyber security challenges involving like

381
00:14:18,959 --> 00:14:21,920
images container host all these kind of

382
00:14:21,920 --> 00:14:23,519
things which we had just talked about

383
00:14:23,519 --> 00:14:25,519
this all things

384
00:14:25,519 --> 00:14:27,839
definitely helps but it also becomes

385
00:14:27,839 --> 00:14:30,079
will come become some cyber security

386
00:14:30,079 --> 00:14:32,000
challenges as well so we have to talk

387
00:14:32,000 --> 00:14:33,680
about those cyber security challenges

388
00:14:33,680 --> 00:14:35,040
now

389
00:14:35,040 --> 00:14:36,800
so in the next few slides i'll talk

390
00:14:36,800 --> 00:14:39,519
about the cyber security challenges and

391
00:14:39,519 --> 00:14:42,480
what we like what kind of things

392
00:14:42,480 --> 00:14:44,399
people are using this for

393
00:14:44,399 --> 00:14:46,480
uh before i move towards the next topic

394
00:14:46,480 --> 00:14:48,399
which is like the kubernetes and the

395
00:14:48,399 --> 00:14:50,639
docker as you have seen from my slide i

396
00:14:50,639 --> 00:14:52,800
just want to talk about the few use

397
00:14:52,800 --> 00:14:55,279
cases of the containers like what

398
00:14:55,279 --> 00:14:57,839
currently organizations are using it so

399
00:14:57,839 --> 00:15:00,560
i think like the first major use cases

400
00:15:00,560 --> 00:15:03,680
is the lift and shift so basically right

401
00:15:03,680 --> 00:15:05,440
now a lot of organizations are using

402
00:15:05,440 --> 00:15:07,440
containers to migrate their existing

403
00:15:07,440 --> 00:15:10,160
application into the modern environment

404
00:15:10,160 --> 00:15:12,000
that is one of the classic example of

405
00:15:12,000 --> 00:15:15,199
lift and shift then i'm thinking i think

406
00:15:15,199 --> 00:15:17,519
the refactoring of existing applications

407
00:15:17,519 --> 00:15:20,880
like a lot of time uh if

408
00:15:20,880 --> 00:15:22,959
lift em shift is not possible but some

409
00:15:22,959 --> 00:15:24,320
part of the application can be

410
00:15:24,320 --> 00:15:26,480
refactored in a modern application that

411
00:15:26,480 --> 00:15:28,959
is another area where our organizations

412
00:15:28,959 --> 00:15:30,720
are considering

413
00:15:30,720 --> 00:15:33,680
the shift to containers uh for the new

414
00:15:33,680 --> 00:15:35,600
application i am hundred percent sure a

415
00:15:35,600 --> 00:15:37,120
lot of applications are completely

416
00:15:37,120 --> 00:15:38,880
hundred percent going towards a new

417
00:15:38,880 --> 00:15:40,800
container based native application so

418
00:15:40,800 --> 00:15:42,880
for any new application projects if you

419
00:15:42,880 --> 00:15:44,800
are developing a new application right

420
00:15:44,800 --> 00:15:47,759
from the scratch uh i what i see around

421
00:15:47,759 --> 00:15:49,120
in the industry is that they are going

422
00:15:49,120 --> 00:15:50,639
with the container native application

423
00:15:50,639 --> 00:15:52,880
that is the future definitely

424
00:15:52,880 --> 00:15:56,639
um for like a lot of time for from my

425
00:15:56,639 --> 00:15:58,240
environment perspective from a customer

426
00:15:58,240 --> 00:16:00,399
perspective in order to improve their

427
00:16:00,399 --> 00:16:02,399
customer experiences and like the

428
00:16:02,399 --> 00:16:04,639
support of other services like for a

429
00:16:04,639 --> 00:16:06,720
micro services based architecture that

430
00:16:06,720 --> 00:16:08,639
time also like distributed application

431
00:16:08,639 --> 00:16:11,440
and micro services are used which can

432
00:16:11,440 --> 00:16:14,720
actually isolate the deployment and

433
00:16:14,720 --> 00:16:16,880
whenever required it can scale up the

434
00:16:16,880 --> 00:16:18,800
individual container while building an

435
00:16:18,800 --> 00:16:20,959
application so that is another area

436
00:16:20,959 --> 00:16:22,880
which is being used where the containers

437
00:16:22,880 --> 00:16:24,959
are very popular

438
00:16:24,959 --> 00:16:27,600
uh from other perspective i see that uh

439
00:16:27,600 --> 00:16:29,440
like during the devops support like when

440
00:16:29,440 --> 00:16:33,279
we are talking about the ci cd the cicd

441
00:16:33,279 --> 00:16:35,360
pipelines and during the devops

442
00:16:35,360 --> 00:16:37,600
container technology is like something

443
00:16:37,600 --> 00:16:38,800
which is very

444
00:16:38,800 --> 00:16:41,600
uh which is very promising and it is

445
00:16:41,600 --> 00:16:43,920
streamlining the overall build test and

446
00:16:43,920 --> 00:16:46,000
deployment from the same container

447
00:16:46,000 --> 00:16:48,000
images so you don't have to

448
00:16:48,000 --> 00:16:50,720
uh rescan everything again and again you

449
00:16:50,720 --> 00:16:52,639
can like certify make the architecture

450
00:16:52,639 --> 00:16:54,560
immutable make your container images

451
00:16:54,560 --> 00:16:56,639
immutable so that is another benefit

452
00:16:56,639 --> 00:16:59,199
wherein like uh another use case i'll

453
00:16:59,199 --> 00:17:02,800
say organization using right now uh also

454
00:17:02,800 --> 00:17:05,439
apart from all these things deployments

455
00:17:05,439 --> 00:17:06,880
and

456
00:17:06,880 --> 00:17:08,480
the faster deployments and the cloud

457
00:17:08,480 --> 00:17:10,160
native architecture i think containers

458
00:17:10,160 --> 00:17:11,520
are also

459
00:17:11,520 --> 00:17:14,959
used a lot of time to deploy and support

460
00:17:14,959 --> 00:17:17,039
like similar processes from a background

461
00:17:17,039 --> 00:17:19,679
perspective like kind of etl functions

462
00:17:19,679 --> 00:17:21,599
or bad jobs for those kind of things

463
00:17:21,599 --> 00:17:23,919
also a lot of organizations are using

464
00:17:23,919 --> 00:17:25,280
containers now

465
00:17:25,280 --> 00:17:26,160
so

466
00:17:26,160 --> 00:17:28,880
from usage perspective

467
00:17:28,880 --> 00:17:29,760
from

468
00:17:29,760 --> 00:17:32,000
i'll say from from their functioning

469
00:17:32,000 --> 00:17:34,559
perspective containers definitely are

470
00:17:34,559 --> 00:17:36,960
very very good tools for the future for

471
00:17:36,960 --> 00:17:39,440
the technology but as i said earlier

472
00:17:39,440 --> 00:17:42,720
like all these new challenges as much as

473
00:17:42,720 --> 00:17:45,120
interesting these container environment

474
00:17:45,120 --> 00:17:46,960
seems they will definitely bring new

475
00:17:46,960 --> 00:17:49,520
cyber security challenges from images

476
00:17:49,520 --> 00:17:52,000
and containers host runtime these all

477
00:17:52,000 --> 00:17:54,320
orchestrations perspective so we need to

478
00:17:54,320 --> 00:17:56,559
be protected against all these new

479
00:17:56,559 --> 00:17:58,240
technologies and that's what we will be

480
00:17:58,240 --> 00:17:59,919
discussing in the few next upcoming

481
00:17:59,919 --> 00:18:01,840
slides

482
00:18:01,840 --> 00:18:04,559
so the next interesting topic is the

483
00:18:04,559 --> 00:18:07,039
docker and the kubernetes and how they

484
00:18:07,039 --> 00:18:09,360
do relate to the container so we talk

485
00:18:09,360 --> 00:18:10,720
about this

486
00:18:10,720 --> 00:18:12,400
containers and when whenever we talk

487
00:18:12,400 --> 00:18:13,919
about the containers i think two terms

488
00:18:13,919 --> 00:18:14,960
which are

489
00:18:14,960 --> 00:18:17,440
completely indifferentiatable is the

490
00:18:17,440 --> 00:18:20,160
docker and the kubernetes so today we

491
00:18:20,160 --> 00:18:21,840
will discuss what are the differences

492
00:18:21,840 --> 00:18:24,160
between the kubernetes and dockers and

493
00:18:24,160 --> 00:18:27,039
how do we plan to use them in there like

494
00:18:27,039 --> 00:18:29,520
uh from a container perspective

495
00:18:29,520 --> 00:18:32,160
so if you are like already using the

496
00:18:32,160 --> 00:18:33,760
container environment and you are

497
00:18:33,760 --> 00:18:36,559
familiar with you would have talked

498
00:18:36,559 --> 00:18:38,559
about this you would have heard about

499
00:18:38,559 --> 00:18:41,360
these two popular tools which we use to

500
00:18:41,360 --> 00:18:43,760
build and manage these containers these

501
00:18:43,760 --> 00:18:45,600
like the docker and the kubernetes of

502
00:18:45,600 --> 00:18:46,480
course

503
00:18:46,480 --> 00:18:48,480
docker is very popular runtime

504
00:18:48,480 --> 00:18:50,240
environment which is used to create

505
00:18:50,240 --> 00:18:53,039
build software containers it also uses

506
00:18:53,039 --> 00:18:55,280
docker images like kind of like your

507
00:18:55,280 --> 00:18:57,520
container images to deploy containerized

508
00:18:57,520 --> 00:19:00,559
application and it can it can or like

509
00:19:00,559 --> 00:19:02,559
any software in various environment you

510
00:19:02,559 --> 00:19:04,000
can use it from development to

511
00:19:04,000 --> 00:19:06,080
production or the testing environment

512
00:19:06,080 --> 00:19:07,760
docker is completely open source so

513
00:19:07,760 --> 00:19:10,000
that's one of the benefits and it can

514
00:19:10,000 --> 00:19:12,640
work on any environment including linux

515
00:19:12,640 --> 00:19:15,280
microsoft or like from on-premises or

516
00:19:15,280 --> 00:19:18,160
cloud-based same physical so a lot of

517
00:19:18,160 --> 00:19:20,160
positives when we talk about the docker

518
00:19:20,160 --> 00:19:21,600
from uh when we talk about the

519
00:19:21,600 --> 00:19:23,360
containerized application it can

520
00:19:23,360 --> 00:19:25,280
definitely get complicated when we

521
00:19:25,280 --> 00:19:26,960
increase the when we talk about the

522
00:19:26,960 --> 00:19:30,000
scalability or the increase in number of

523
00:19:30,000 --> 00:19:32,000
containers and specifically in the

524
00:19:32,000 --> 00:19:33,840
production environment where

525
00:19:33,840 --> 00:19:36,160
many might require 100 or thousands of

526
00:19:36,160 --> 00:19:38,960
separate containers so it is during that

527
00:19:38,960 --> 00:19:42,320
time continuing like the major runtime

528
00:19:42,320 --> 00:19:44,880
container runtime

529
00:19:44,880 --> 00:19:47,280
docker will definitely benefit and they

530
00:19:47,280 --> 00:19:50,320
will use tools to orchestrate and manage

531
00:19:50,320 --> 00:19:52,480
all these individual containers which

532
00:19:52,480 --> 00:19:54,240
are running in the operations so that's

533
00:19:54,240 --> 00:19:56,080
the time where in this stocker and the

534
00:19:56,080 --> 00:19:57,840
kubernetes are actually coming in the

535
00:19:57,840 --> 00:20:00,559
picture the these orchestrate your

536
00:20:00,559 --> 00:20:02,640
container

537
00:20:02,640 --> 00:20:05,039
container operations

538
00:20:05,039 --> 00:20:06,720
kubernetes is also something which is

539
00:20:06,720 --> 00:20:08,320
like orchestrate the operations of

540
00:20:08,320 --> 00:20:10,559
multiple containers and it works in

541
00:20:10,559 --> 00:20:12,960
harmony along with the containers

542
00:20:12,960 --> 00:20:15,440
it manages areas like

543
00:20:15,440 --> 00:20:17,280
using underlying infrastructure

544
00:20:17,280 --> 00:20:19,679
resources for containerized application

545
00:20:19,679 --> 00:20:23,120
such as uh amount of compute network or

546
00:20:23,120 --> 00:20:25,360
storage resources so these are like few

547
00:20:25,360 --> 00:20:27,840
areas which they works on they also have

548
00:20:27,840 --> 00:20:29,760
like orchestrations

549
00:20:29,760 --> 00:20:31,919
like this orchestration of kubernetes

550
00:20:31,919 --> 00:20:34,480
and docker swarm in this case they

551
00:20:34,480 --> 00:20:37,360
the major benefit of these are that it

552
00:20:37,360 --> 00:20:40,320
makes it makes it easier to automate and

553
00:20:40,320 --> 00:20:43,039
scale the container based workload so

554
00:20:43,039 --> 00:20:44,799
that during your live production

555
00:20:44,799 --> 00:20:47,280
environment it can satisfy or it can

556
00:20:47,280 --> 00:20:50,000
work based on the kind of environment we

557
00:20:50,000 --> 00:20:53,679
are having or the like the requirement

558
00:20:53,679 --> 00:20:55,280
application is having so that is one of

559
00:20:55,280 --> 00:20:58,320
the major in use of

560
00:20:58,320 --> 00:21:00,559
kubernetes and docker uh from a

561
00:21:00,559 --> 00:21:02,240
different perspective as as we are

562
00:21:02,240 --> 00:21:03,679
talking about the differences between

563
00:21:03,679 --> 00:21:05,919
the kubernetes and docker so docker is

564
00:21:05,919 --> 00:21:08,159
like a kind of uh platform but uh when

565
00:21:08,159 --> 00:21:10,159
we talk about the orchestration platform

566
00:21:10,159 --> 00:21:12,880
docker has its own docker swarm wherein

567
00:21:12,880 --> 00:21:15,280
kubernetes is an individual

568
00:21:15,280 --> 00:21:17,280
orchestration platform

569
00:21:17,280 --> 00:21:19,520
from now we'll compare the

570
00:21:19,520 --> 00:21:21,600
compared aqua swamp versus kubernetes

571
00:21:21,600 --> 00:21:23,760
under the five major areas

572
00:21:23,760 --> 00:21:25,760
the first one definitely is from a

573
00:21:25,760 --> 00:21:27,520
scaling or a scaling perspective when we

574
00:21:27,520 --> 00:21:30,240
talk about like how orchestration is

575
00:21:30,240 --> 00:21:31,360
important

576
00:21:31,360 --> 00:21:34,080
the major reason why

577
00:21:34,080 --> 00:21:35,039
like

578
00:21:35,039 --> 00:21:37,039
kubernetes being very popular out of

579
00:21:37,039 --> 00:21:38,799
docker swarm or any other orchestration

580
00:21:38,799 --> 00:21:40,400
like open shift and there are a few

581
00:21:40,400 --> 00:21:41,280
other

582
00:21:41,280 --> 00:21:42,159
uh

583
00:21:42,159 --> 00:21:43,440
docker

584
00:21:43,440 --> 00:21:45,200
sorry container orchestration platforms

585
00:21:45,200 --> 00:21:47,120
available in the market but out of them

586
00:21:47,120 --> 00:21:48,720
i say that

587
00:21:48,720 --> 00:21:50,720
the the most popular one is the

588
00:21:50,720 --> 00:21:52,320
kubernetes and one of the reason is

589
00:21:52,320 --> 00:21:54,720
because kubernetes supports auto scaling

590
00:21:54,720 --> 00:21:56,400
compared to others so that's one of the

591
00:21:56,400 --> 00:21:58,960
reason why a lot of developers or

592
00:21:58,960 --> 00:22:00,559
organizations when they move towards

593
00:22:00,559 --> 00:22:03,360
containers and orchestrations they

594
00:22:03,360 --> 00:22:05,360
tend towards the kubernetes from a

595
00:22:05,360 --> 00:22:07,760
community perspective i say honestly

596
00:22:07,760 --> 00:22:10,000
both have quite good community however

597
00:22:10,000 --> 00:22:12,400
kubernetes because of being more widely

598
00:22:12,400 --> 00:22:14,960
popular have a more active community

599
00:22:14,960 --> 00:22:18,240
uh from a clustering perspective like uh

600
00:22:18,240 --> 00:22:20,720
docker some it's pretty easy to start

601
00:22:20,720 --> 00:22:22,640
the cluster it has its own advantage

602
00:22:22,640 --> 00:22:24,640
wherein kubernetes is a bit complicated

603
00:22:24,640 --> 00:22:27,440
process wherein you need to identify the

604
00:22:27,440 --> 00:22:29,919
correct way which you want to operate

605
00:22:29,919 --> 00:22:32,880
like from cube ctl or maybe your utcd

606
00:22:32,880 --> 00:22:35,360
different different ways are there so

607
00:22:35,360 --> 00:22:36,080
the

608
00:22:36,080 --> 00:22:37,679
it's a bit difficult when it comes to

609
00:22:37,679 --> 00:22:40,400
cooperative but still it has its own

610
00:22:40,400 --> 00:22:43,039
advantages from a api capabilities

611
00:22:43,039 --> 00:22:45,200
perspective like docker swarm because

612
00:22:45,200 --> 00:22:47,360
it's a docker owned com products it is

613
00:22:47,360 --> 00:22:49,760
limited to only supporting the docker

614
00:22:49,760 --> 00:22:52,799
apis wherein the kubernetes is the

615
00:22:52,799 --> 00:22:54,799
reason is that it can it is not the

616
00:22:54,799 --> 00:22:57,919
agnostic to docker it can overcome your

617
00:22:57,919 --> 00:22:59,760
constraints of docker and docker dpis as

618
00:22:59,760 --> 00:23:01,200
well so that's another reason why it is

619
00:23:01,200 --> 00:23:03,360
being widely used

620
00:23:03,360 --> 00:23:04,320
um

621
00:23:04,320 --> 00:23:06,000
i'll say from a production deployment

622
00:23:06,000 --> 00:23:08,720
perspective like a lot of applications

623
00:23:08,720 --> 00:23:10,640
are not

624
00:23:10,640 --> 00:23:12,559
much deployed on dockers from when we

625
00:23:12,559 --> 00:23:14,960
talk about the kubernetes kubernetes is

626
00:23:14,960 --> 00:23:17,440
like deployed at various scale amongst

627
00:23:17,440 --> 00:23:19,679
organization and it is very popular as i

628
00:23:19,679 --> 00:23:21,600
say so it is like definitely one of the

629
00:23:21,600 --> 00:23:23,039
preferred choices

630
00:23:23,039 --> 00:23:25,120
uh a lot of organizations are actually

631
00:23:25,120 --> 00:23:28,480
using it uh from uh from

632
00:23:28,480 --> 00:23:30,159
like from an orchestration or managed

633
00:23:30,159 --> 00:23:31,840
services perspective as well when we

634
00:23:31,840 --> 00:23:33,919
talk about the cloud native so like in

635
00:23:33,919 --> 00:23:36,320
the next slide i have tried to compare

636
00:23:36,320 --> 00:23:37,039
the

637
00:23:37,039 --> 00:23:39,120
what are the current applications or

638
00:23:39,120 --> 00:23:40,080
current

639
00:23:40,080 --> 00:23:42,799
of current

640
00:23:43,039 --> 00:23:45,039
not just not the application but current

641
00:23:45,039 --> 00:23:47,279
uh

642
00:23:47,279 --> 00:23:48,480
current

643
00:23:48,480 --> 00:23:50,799
utilization of kubernetes and over the

644
00:23:50,799 --> 00:23:52,320
cloud department so when we talk about

645
00:23:52,320 --> 00:23:55,600
aws gcp and azure uh these are all like

646
00:23:55,600 --> 00:23:57,679
they all have their own managed services

647
00:23:57,679 --> 00:23:58,880
when it when we talk about the

648
00:23:58,880 --> 00:24:03,120
kubernetes so like aws has eks gcps gke

649
00:24:03,120 --> 00:24:06,240
and azure has aks and if you see

650
00:24:06,240 --> 00:24:09,279
like uh they a lot of

651
00:24:09,279 --> 00:24:10,960
clients are preferring the managed

652
00:24:10,960 --> 00:24:13,440
kubernetes service and across any

653
00:24:13,440 --> 00:24:15,919
platform you just see and that's one of

654
00:24:15,919 --> 00:24:18,080
the reason why i say that

655
00:24:18,080 --> 00:24:19,440
when we talk about the cloud native

656
00:24:19,440 --> 00:24:21,679
deployment these all technologies are

657
00:24:21,679 --> 00:24:23,760
very very useful

658
00:24:23,760 --> 00:24:27,520
only challenge for us is that

659
00:24:27,520 --> 00:24:30,080
the more promising they seem the more we

660
00:24:30,080 --> 00:24:32,080
have to be concerned about the security

661
00:24:32,080 --> 00:24:34,240
we need to know what are the cyber

662
00:24:34,240 --> 00:24:35,520
security

663
00:24:35,520 --> 00:24:38,000
challenges for these kind of deployments

664
00:24:38,000 --> 00:24:40,480
because these are very new we should not

665
00:24:40,480 --> 00:24:42,720
just deploy and then think about it it

666
00:24:42,720 --> 00:24:44,799
should not be an afterthought we should

667
00:24:44,799 --> 00:24:46,480
think about the security when we are

668
00:24:46,480 --> 00:24:49,200
trying to deploy it and we should follow

669
00:24:49,200 --> 00:24:50,720
the best practices so in the next

670
00:24:50,720 --> 00:24:52,640
section of the slides now we'll be

671
00:24:52,640 --> 00:24:54,320
focusing on the

672
00:24:54,320 --> 00:24:56,240
best practices when we talk about the

673
00:24:56,240 --> 00:24:58,960
deployments of this containers contain

674
00:24:58,960 --> 00:25:00,799
deploying the security securing

675
00:25:00,799 --> 00:25:04,000
containers and the kubernetes

676
00:25:04,000 --> 00:25:06,799
so here we are ready with our

677
00:25:06,799 --> 00:25:09,200
lightsabers let's go and secure these

678
00:25:09,200 --> 00:25:11,760
container deployments in the next ones

679
00:25:11,760 --> 00:25:14,320
so when we talk about the container

680
00:25:14,320 --> 00:25:17,600
security i think the major part i'll

681
00:25:17,600 --> 00:25:19,520
highlight is that there are six major

682
00:25:19,520 --> 00:25:22,400
areas where the different challenges are

683
00:25:22,400 --> 00:25:23,279
there

684
00:25:23,279 --> 00:25:25,520
and

685
00:25:25,840 --> 00:25:26,840
different

686
00:25:26,840 --> 00:25:29,520
uh paths are there when we talk about

687
00:25:29,520 --> 00:25:31,440
the container security when the

688
00:25:31,440 --> 00:25:33,360
different challenges uh first one i'll

689
00:25:33,360 --> 00:25:35,360
say is the open source supply chain risk

690
00:25:35,360 --> 00:25:38,240
after like these recent attacks when we

691
00:25:38,240 --> 00:25:40,880
talk about uh the supply chain attacks

692
00:25:40,880 --> 00:25:43,679
are getting more popular

693
00:25:43,679 --> 00:25:46,000
between the bad actors so this another

694
00:25:46,000 --> 00:25:47,440
very important is when we talk about the

695
00:25:47,440 --> 00:25:49,679
container security uh image and

696
00:25:49,679 --> 00:25:51,600
compliance risk host operating system

697
00:25:51,600 --> 00:25:53,760
risk risk in the registry where we have

698
00:25:53,760 --> 00:25:56,159
all the system images stored then the

699
00:25:56,159 --> 00:25:58,559
runtime or the network related risk and

700
00:25:58,559 --> 00:26:00,559
then the last would be the orchestration

701
00:26:00,559 --> 00:26:02,640
related risk like the platforms we are

702
00:26:02,640 --> 00:26:04,240
using we just talked about the docker

703
00:26:04,240 --> 00:26:06,720
swarm and the kubernetes so these

704
00:26:06,720 --> 00:26:09,440
platform which were using during our

705
00:26:09,440 --> 00:26:12,320
deployment these are have their own form

706
00:26:12,320 --> 00:26:14,320
of list so

707
00:26:14,320 --> 00:26:16,000
though from a challenges perspective of

708
00:26:16,000 --> 00:26:18,080
the risk perspective there are many

709
00:26:18,080 --> 00:26:20,720
containers we cannot just look at the

710
00:26:20,720 --> 00:26:22,799
bothers of the container we also have to

711
00:26:22,799 --> 00:26:25,440
see the untouched side from a security

712
00:26:25,440 --> 00:26:27,679
perspective and these all risk are

713
00:26:27,679 --> 00:26:30,799
important like what kind of different uh

714
00:26:30,799 --> 00:26:32,400
things would be there and what we have

715
00:26:32,400 --> 00:26:34,960
to secure and containers like

716
00:26:34,960 --> 00:26:36,640
specifically the users who are using the

717
00:26:36,640 --> 00:26:38,960
containers need to ensure that they have

718
00:26:38,960 --> 00:26:42,320
a purpose built full stack security to

719
00:26:42,320 --> 00:26:43,679
address like this vulnerability

720
00:26:43,679 --> 00:26:46,480
management compliance runtime protection

721
00:26:46,480 --> 00:26:48,080
and network security requirement of

722
00:26:48,080 --> 00:26:49,679
their application

723
00:26:49,679 --> 00:26:51,520
if they are not focusing on those areas

724
00:26:51,520 --> 00:26:53,360
it will be it will make their life very

725
00:26:53,360 --> 00:26:55,600
very difficult so this these are like

726
00:26:55,600 --> 00:26:58,240
the six areas which i feel are

727
00:26:58,240 --> 00:27:00,559
challenges from a security perspective

728
00:27:00,559 --> 00:27:02,720
in the next slide i'll talk about what

729
00:27:02,720 --> 00:27:04,400
should we do from a best practices so

730
00:27:04,400 --> 00:27:06,559
not just like identifying the challenges

731
00:27:06,559 --> 00:27:09,120
but from uh from a security perspective

732
00:27:09,120 --> 00:27:10,880
what should be our next steps what we

733
00:27:10,880 --> 00:27:14,400
need to do so let's see one by one

734
00:27:14,400 --> 00:27:17,840
uh to individually for everyone

735
00:27:17,840 --> 00:27:19,679
so talking about the image and the

736
00:27:19,679 --> 00:27:21,760
compliance risk i'll say that when we

737
00:27:21,760 --> 00:27:23,679
talk about the docker or container

738
00:27:23,679 --> 00:27:26,080
images we need to ensure that we have

739
00:27:26,080 --> 00:27:28,159
availability management tools present

740
00:27:28,159 --> 00:27:31,120
which scans the new images added to your

741
00:27:31,120 --> 00:27:33,279
registry or whenever our developer is

742
00:27:33,279 --> 00:27:35,440
trying to use any new images like uh

743
00:27:35,440 --> 00:27:37,039
docker based on any container images

744
00:27:37,039 --> 00:27:38,559
they should be scanned using a

745
00:27:38,559 --> 00:27:40,720
vulnerability management solution

746
00:27:40,720 --> 00:27:41,600
and

747
00:27:41,600 --> 00:27:43,760
if possible you should integrate these

748
00:27:43,760 --> 00:27:46,000
tools to your devops pipeline if you

749
00:27:46,000 --> 00:27:48,000
have a devops pipeline make sure that

750
00:27:48,000 --> 00:27:50,240
you have these tools integrated with

751
00:27:50,240 --> 00:27:52,399
your pipeline so that

752
00:27:52,399 --> 00:27:55,039
these new technologies are like whenever

753
00:27:55,039 --> 00:27:56,799
you're building any new pipeline or any

754
00:27:56,799 --> 00:27:59,279
new application you can use already

755
00:27:59,279 --> 00:28:02,000
white listed images from a previous scan

756
00:28:02,000 --> 00:28:05,279
make those images immutable as we say

757
00:28:05,279 --> 00:28:07,679
from architecture's perspective so that

758
00:28:07,679 --> 00:28:10,559
like that risk is minimized i'll also

759
00:28:10,559 --> 00:28:12,240
suggest that you should also implement

760
00:28:12,240 --> 00:28:13,919
some quality gates when we talk about

761
00:28:13,919 --> 00:28:14,960
the

762
00:28:14,960 --> 00:28:16,559
vulnerabilities from each stage

763
00:28:16,559 --> 00:28:18,640
perspective so not like just from a

764
00:28:18,640 --> 00:28:20,640
deployment stage but right from like the

765
00:28:20,640 --> 00:28:23,279
build test and deploy stages different

766
00:28:23,279 --> 00:28:25,200
different stages of your devops pipeline

767
00:28:25,200 --> 00:28:27,600
you should have some quality gates some

768
00:28:27,600 --> 00:28:30,240
checks which should ensure that your

769
00:28:30,240 --> 00:28:32,480
deployment or your images

770
00:28:32,480 --> 00:28:34,399
does not have any particular risk from a

771
00:28:34,399 --> 00:28:36,240
compliance perspective

772
00:28:36,240 --> 00:28:38,240
second i'll say from a registry

773
00:28:38,240 --> 00:28:40,159
perspective since containers are made of

774
00:28:40,159 --> 00:28:42,640
libraries binaries and application code

775
00:28:42,640 --> 00:28:44,640
it is critical for all the enterprises

776
00:28:44,640 --> 00:28:47,039
to establish like an official container

777
00:28:47,039 --> 00:28:49,600
registry in their organization and it

778
00:28:49,600 --> 00:28:51,440
will be like the first step of building

779
00:28:51,440 --> 00:28:53,600
the security i'll say and it will be a

780
00:28:53,600 --> 00:28:55,760
first step to their devsecours pipeline

781
00:28:55,760 --> 00:28:58,320
or devsecops journey because then

782
00:28:58,320 --> 00:29:00,240
they'll have the overall visibility of

783
00:29:00,240 --> 00:29:02,159
what images are being used they're not

784
00:29:02,159 --> 00:29:04,399
just like pulling their images runtime

785
00:29:04,399 --> 00:29:06,559
from the internet which will bring in

786
00:29:06,559 --> 00:29:09,200
the risk of let's say open source or the

787
00:29:09,200 --> 00:29:11,360
supply chain attacks from a completely

788
00:29:11,360 --> 00:29:12,399
unknown

789
00:29:12,399 --> 00:29:14,399
images and that's so a container

790
00:29:14,399 --> 00:29:16,159
registry what it does is it provides a

791
00:29:16,159 --> 00:29:18,640
convenient a centralized meaning of

792
00:29:18,640 --> 00:29:21,760
storing distributing application images

793
00:29:21,760 --> 00:29:23,360
a lot of application

794
00:29:23,360 --> 00:29:25,679
right now like can have like tens or

795
00:29:25,679 --> 00:29:27,200
thousands of images stored in their

796
00:29:27,200 --> 00:29:29,279
registries because register is like

797
00:29:29,279 --> 00:29:32,559
central and it is a way

798
00:29:32,559 --> 00:29:34,000
in which containerized environment

799
00:29:34,000 --> 00:29:36,240
operate it is very important for us to

800
00:29:36,240 --> 00:29:38,799
secure this registry as well so any kind

801
00:29:38,799 --> 00:29:40,640
of inclusion or vulnerabilities within

802
00:29:40,640 --> 00:29:43,440
the registry we should like

803
00:29:43,440 --> 00:29:46,640
know about it at as soon as possible and

804
00:29:46,640 --> 00:29:48,000
it provide us

805
00:29:48,000 --> 00:29:50,399
also an opportunity of compromising that

806
00:29:50,399 --> 00:29:52,399
particular application which is running

807
00:29:52,399 --> 00:29:55,039
so what we can do we can continuously

808
00:29:55,039 --> 00:29:57,679
monitor these registry registries for

809
00:29:57,679 --> 00:30:00,080
any changes in let's say any status of

810
00:30:00,080 --> 00:30:01,600
the vulnerabilities if there are new one

811
00:30:01,600 --> 00:30:03,200
abilities within the register we should

812
00:30:03,200 --> 00:30:05,279
know about it so continuous monitoring

813
00:30:05,279 --> 00:30:07,760
or a security scan should be there on

814
00:30:07,760 --> 00:30:09,360
the registries

815
00:30:09,360 --> 00:30:11,600
whenever we are pulling let's say new

816
00:30:11,600 --> 00:30:14,399
images from uh from anywhere it should

817
00:30:14,399 --> 00:30:16,480
be make sure that which we are pulling

818
00:30:16,480 --> 00:30:18,000
at the new images from our trusted

819
00:30:18,000 --> 00:30:20,399
sources and their security scan

820
00:30:20,399 --> 00:30:21,360
and

821
00:30:21,360 --> 00:30:24,640
also the i'll say that

822
00:30:24,640 --> 00:30:27,600
you should not like uh just for

823
00:30:27,600 --> 00:30:29,919
completely blindly follow this kind of

824
00:30:29,919 --> 00:30:32,240
practices of monitoring i'll also

825
00:30:32,240 --> 00:30:33,520
suggest that

826
00:30:33,520 --> 00:30:35,360
you should log down the server or the

827
00:30:35,360 --> 00:30:37,679
host registry using some secured access

828
00:30:37,679 --> 00:30:40,559
policy so having a good access policies

829
00:30:40,559 --> 00:30:42,000
or

830
00:30:42,000 --> 00:30:42,720
like

831
00:30:42,720 --> 00:30:44,480
having some kind of

832
00:30:44,480 --> 00:30:47,120
rule based access control metrics to who

833
00:30:47,120 --> 00:30:49,279
can access when what kind of things they

834
00:30:49,279 --> 00:30:51,360
can access that also helps when we talk

835
00:30:51,360 --> 00:30:54,000
about the registry and how we can reduce

836
00:30:54,000 --> 00:30:57,679
the risk related to the registries

837
00:30:57,679 --> 00:30:59,600
then going to the next one which is the

838
00:30:59,600 --> 00:31:02,080
orchestration related or like kubernetes

839
00:31:02,080 --> 00:31:04,000
and docker so container orchestration is

840
00:31:04,000 --> 00:31:07,760
definitely a process wherein it helps to

841
00:31:07,760 --> 00:31:10,080
enact or like make sure that you have

842
00:31:10,080 --> 00:31:12,559
proper access control to prevent the

843
00:31:12,559 --> 00:31:14,880
risk from over privileged accounts so a

844
00:31:14,880 --> 00:31:16,799
lot of them we can have some over

845
00:31:16,799 --> 00:31:19,279
privileged users accessing it and that

846
00:31:19,279 --> 00:31:22,399
can like relate issues to the network or

847
00:31:22,399 --> 00:31:23,919
some kind of like electoral movements

848
00:31:23,919 --> 00:31:25,440
over the network so

849
00:31:25,440 --> 00:31:28,640
by having proper im in cloud security

850
00:31:28,640 --> 00:31:31,039
and like some least privileges modern if

851
00:31:31,039 --> 00:31:32,559
you are following a defense in depth

852
00:31:32,559 --> 00:31:34,159
kind of a

853
00:31:34,159 --> 00:31:36,320
model what you can do is like in docker

854
00:31:36,320 --> 00:31:38,960
and kubernetes both you can explicitly

855
00:31:38,960 --> 00:31:41,440
white list and implement the security on

856
00:31:41,440 --> 00:31:43,600
the infrastructure teams and ensure that

857
00:31:43,600 --> 00:31:46,960
the users only perform command based on

858
00:31:46,960 --> 00:31:49,440
their appropriate roles they don't do

859
00:31:49,440 --> 00:31:51,679
anything which is beyond their roles so

860
00:31:51,679 --> 00:31:54,240
that kind of uh kind of

861
00:31:54,240 --> 00:31:55,919
identity and access management controls

862
00:31:55,919 --> 00:31:57,919
you can implement within your docker and

863
00:31:57,919 --> 00:32:00,159
your kubernetes so that's another good

864
00:32:00,159 --> 00:32:02,559
part also what you can do is you can

865
00:32:02,559 --> 00:32:04,640
also protect your port-to-port

866
00:32:04,640 --> 00:32:07,600
communication and limit your damages

867
00:32:07,600 --> 00:32:10,320
from the attackers by like removing the

868
00:32:10,320 --> 00:32:12,320
lateral movement through the environment

869
00:32:12,320 --> 00:32:14,320
so securing any kind of front-end

870
00:32:14,320 --> 00:32:16,960
services would be another step you can

871
00:32:16,960 --> 00:32:19,200
implement when we talk about the orchid

872
00:32:19,200 --> 00:32:21,600
orchestration related risk

873
00:32:21,600 --> 00:32:24,559
so this rather interesting uh risk which

874
00:32:24,559 --> 00:32:26,960
happens then from a network or an

875
00:32:26,960 --> 00:32:29,519
runtime perspective like containers all

876
00:32:29,519 --> 00:32:31,360
most of the times is like running in the

877
00:32:31,360 --> 00:32:33,600
runtime and we can identify new

878
00:32:33,600 --> 00:32:35,519
vulnerabilities in the containers

879
00:32:35,519 --> 00:32:37,919
runtime even if they have scan initially

880
00:32:37,919 --> 00:32:39,679
in a build stage there may be some

881
00:32:39,679 --> 00:32:41,519
runtime vulnerabilities which can come

882
00:32:41,519 --> 00:32:43,840
from a code so those kind of runtime

883
00:32:43,840 --> 00:32:46,720
scanning is also important and

884
00:32:46,720 --> 00:32:48,880
it is i'll say one of the most difficult

885
00:32:48,880 --> 00:32:50,960
part when it comes to container stack

886
00:32:50,960 --> 00:32:52,880
because like unlike the traditional

887
00:32:52,880 --> 00:32:55,440
security tools it is there is no nothing

888
00:32:55,440 --> 00:32:56,399
as of now

889
00:32:56,399 --> 00:32:58,080
that mature which is defined when we

890
00:32:58,080 --> 00:32:59,600
talk about the container continuous

891
00:32:59,600 --> 00:33:01,519
monitoring definitely now there are a

892
00:33:01,519 --> 00:33:03,200
few more tools but still like from a

893
00:33:03,200 --> 00:33:05,279
completeness perspective they are still

894
00:33:05,279 --> 00:33:08,640
uh i'll say in a trial ways trial basis

895
00:33:08,640 --> 00:33:10,960
uh i'll say like

896
00:33:10,960 --> 00:33:13,440
some organization should also leverage

897
00:33:13,440 --> 00:33:15,840
uh runtime protection random encryption

898
00:33:15,840 --> 00:33:17,519
of the containers that is one of the

899
00:33:17,519 --> 00:33:19,679
important key aspect because you know

900
00:33:19,679 --> 00:33:21,919
don't know where your container images

901
00:33:21,919 --> 00:33:24,399
may run so using a container

902
00:33:24,399 --> 00:33:26,320
runtime container encryption runtime

903
00:33:26,320 --> 00:33:29,519
container protections are definitely

904
00:33:29,519 --> 00:33:31,519
important they will help

905
00:33:31,519 --> 00:33:34,240
to ensure that you are compliant you are

906
00:33:34,240 --> 00:33:36,480
cyber safe and

907
00:33:36,480 --> 00:33:38,159
a lot of vendors are actually working in

908
00:33:38,159 --> 00:33:39,919
this particular domain as well when we

909
00:33:39,919 --> 00:33:42,080
talk about the runtime security of

910
00:33:42,080 --> 00:33:44,799
containers one i have in mind would be

911
00:33:44,799 --> 00:33:46,559
photonics they have this runtime

912
00:33:46,559 --> 00:33:49,120
encryption which is very critical when

913
00:33:49,120 --> 00:33:52,320
we talk about the container security so

914
00:33:52,320 --> 00:33:54,000
definitely these kind of new

915
00:33:54,000 --> 00:33:56,320
technologies these kind of new solutions

916
00:33:56,320 --> 00:33:57,679
are something which you should keep an

917
00:33:57,679 --> 00:34:00,000
eye on when we talk about the container

918
00:34:00,000 --> 00:34:02,399
deployments and how you can avoid those

919
00:34:02,399 --> 00:34:03,679
kind of risk

920
00:34:03,679 --> 00:34:05,360
from a host os perspective i would say

921
00:34:05,360 --> 00:34:08,079
that try to use minimalistic operating

922
00:34:08,079 --> 00:34:10,239
systems to reduce your attack services

923
00:34:10,239 --> 00:34:12,320
try to use uh

924
00:34:12,320 --> 00:34:13,520
kind of a

925
00:34:13,520 --> 00:34:16,000
hard coded or like kind of something

926
00:34:16,000 --> 00:34:18,800
which is already

927
00:34:18,800 --> 00:34:20,399
i'll say best

928
00:34:20,399 --> 00:34:22,960
compliant or limited functionality kind

929
00:34:22,960 --> 00:34:24,719
of operating system not something which

930
00:34:24,719 --> 00:34:27,760
has uh everything opened up so limited

931
00:34:27,760 --> 00:34:30,239
processes limited ports open so a

932
00:34:30,239 --> 00:34:32,320
hardened operating system is suggested

933
00:34:32,320 --> 00:34:33,760
when you should use

934
00:34:33,760 --> 00:34:35,679
also your operating system should

935
00:34:35,679 --> 00:34:38,719
undergo a continuous vulnerability scans

936
00:34:38,719 --> 00:34:40,719
so that anything which is detected at

937
00:34:40,719 --> 00:34:42,320
the corner level or maybe operating

938
00:34:42,320 --> 00:34:44,800
system level it should be flagged right

939
00:34:44,800 --> 00:34:46,560
from the start

940
00:34:46,560 --> 00:34:48,320
the last one i'll say is the open source

941
00:34:48,320 --> 00:34:51,119
supply chain risk so like uh tools like

942
00:34:51,119 --> 00:34:53,679
source code source composition analysis

943
00:34:53,679 --> 00:34:56,719
uh these kind of tools will be helping a

944
00:34:56,719 --> 00:34:59,359
lot made to uh to avoid these supply

945
00:34:59,359 --> 00:35:02,079
chain attacks so recently us also has

946
00:35:02,079 --> 00:35:03,680
released this

947
00:35:03,680 --> 00:35:06,560
bill wherein it has been made mandatory

948
00:35:06,560 --> 00:35:07,359
to

949
00:35:07,359 --> 00:35:09,520
have a software bill of materials for

950
00:35:09,520 --> 00:35:11,599
all the applications of the software so

951
00:35:11,599 --> 00:35:13,680
this will be something which will work

952
00:35:13,680 --> 00:35:16,400
on this area wherein you can have this

953
00:35:16,400 --> 00:35:19,440
remove the supply chain risk by knowing

954
00:35:19,440 --> 00:35:21,920
or using these source composition assist

955
00:35:21,920 --> 00:35:23,520
tools and

956
00:35:23,520 --> 00:35:25,119
checking from the vendor where you are

957
00:35:25,119 --> 00:35:27,520
buying these tools what is the

958
00:35:27,520 --> 00:35:29,520
software bill of materials so that you

959
00:35:29,520 --> 00:35:31,839
are like you have your own due diligence

960
00:35:31,839 --> 00:35:33,200
when it comes to the

961
00:35:33,200 --> 00:35:35,119
risk associated with it

962
00:35:35,119 --> 00:35:36,160
so

963
00:35:36,160 --> 00:35:38,960
i'll say this are some some of the

964
00:35:38,960 --> 00:35:41,440
uh situation wherein like how you can

965
00:35:41,440 --> 00:35:44,480
use and make sure your next containers

966
00:35:44,480 --> 00:35:46,960
when you are talking about are secured

967
00:35:46,960 --> 00:35:48,880
you make sure different different at

968
00:35:48,880 --> 00:35:50,320
different different levels of your

969
00:35:50,320 --> 00:35:52,320
pipeline or container deployment cycle

970
00:35:52,320 --> 00:35:54,160
you can implement these different

971
00:35:54,160 --> 00:35:56,560
security gates you need to ensure that

972
00:35:56,560 --> 00:35:58,640
you are protected your container

973
00:35:58,640 --> 00:36:00,960
containers applications are protected

974
00:36:00,960 --> 00:36:03,200
but this is just one part we also have

975
00:36:03,200 --> 00:36:05,839
to secure the orchestration that is your

976
00:36:05,839 --> 00:36:08,560
kubernetes so as the batman says we need

977
00:36:08,560 --> 00:36:11,040
to see about the kubernetes

978
00:36:11,040 --> 00:36:13,040
so from a kubernetes perspective i'll

979
00:36:13,040 --> 00:36:15,599
say that from the overall build deployer

980
00:36:15,599 --> 00:36:17,680
and pipeline uh there are basic things

981
00:36:17,680 --> 00:36:19,599
which we need to ensure like we have

982
00:36:19,599 --> 00:36:21,839
seen build deploy run already right now

983
00:36:21,839 --> 00:36:23,520
from a container perspective that you

984
00:36:23,520 --> 00:36:24,880
should scan the image you should

985
00:36:24,880 --> 00:36:26,960
remediate anything which you're finding

986
00:36:26,960 --> 00:36:28,560
you can see

987
00:36:28,560 --> 00:36:29,839
make sure that you have limited

988
00:36:29,839 --> 00:36:31,359
privileges running when you are trying

989
00:36:31,359 --> 00:36:33,280
to deploy that particular container

990
00:36:33,280 --> 00:36:36,000
images and then later on from a running

991
00:36:36,000 --> 00:36:37,440
like during a runtime perspective you

992
00:36:37,440 --> 00:36:39,839
should have a continuous monitoring you

993
00:36:39,839 --> 00:36:42,000
don't use like default name spaces or

994
00:36:42,000 --> 00:36:43,599
network settings those kind of things

995
00:36:43,599 --> 00:36:44,960
when you are trying to run that

996
00:36:44,960 --> 00:36:47,440
particular app contain images but from a

997
00:36:47,440 --> 00:36:49,839
kubernetes perspective i will say that

998
00:36:49,839 --> 00:36:51,680
updating the kubernetes very frequently

999
00:36:51,680 --> 00:36:54,079
whenever new releases are there is very

1000
00:36:54,079 --> 00:36:55,280
important

1001
00:36:55,280 --> 00:36:56,800
making sure your

1002
00:36:56,800 --> 00:36:59,200
api is secure because kubernetes is all

1003
00:36:59,200 --> 00:37:01,599
about the api server so securing your

1004
00:37:01,599 --> 00:37:05,200
kubernetes api is something which is

1005
00:37:05,200 --> 00:37:07,680
very important like you should know it

1006
00:37:07,680 --> 00:37:09,920
like uh though kubernetes has like

1007
00:37:09,920 --> 00:37:11,920
several built-in security advantages

1008
00:37:11,920 --> 00:37:15,040
like content names are usually replaced

1009
00:37:15,040 --> 00:37:16,800
not passed or updated which leads to

1010
00:37:16,800 --> 00:37:19,760
better version control it also increases

1011
00:37:19,760 --> 00:37:22,160
a lot of opportunity for exposure so

1012
00:37:22,160 --> 00:37:24,400
kubernetes like because it is relatively

1013
00:37:24,400 --> 00:37:27,440
new and complex technology and say

1014
00:37:27,440 --> 00:37:28,960
we don't have enough talent to fully

1015
00:37:28,960 --> 00:37:31,839
manage and secure it right now and that

1016
00:37:31,839 --> 00:37:34,320
makes it highly attractive to hackers

1017
00:37:34,320 --> 00:37:36,480
i'll say so whenever we are addressing

1018
00:37:36,480 --> 00:37:38,720
kubernetes security it is nearly

1019
00:37:38,720 --> 00:37:40,480
impossible to separate the kubernetes

1020
00:37:40,480 --> 00:37:42,079
cluster from the other layers of the

1021
00:37:42,079 --> 00:37:44,720
cloud computing and has these layers

1022
00:37:44,720 --> 00:37:47,040
like i'll say include not just the

1023
00:37:47,040 --> 00:37:49,119
application but also the code itself the

1024
00:37:49,119 --> 00:37:51,599
container images the kubernetes cluster

1025
00:37:51,599 --> 00:37:53,119
and as well as the cloud or the

1026
00:37:53,119 --> 00:37:55,440
networking layer which we have which we

1027
00:37:55,440 --> 00:37:57,680
always see when we are trying to prepare

1028
00:37:57,680 --> 00:37:59,839
so all these are different areas which

1029
00:37:59,839 --> 00:38:02,160
we needs to emphasize when we are

1030
00:38:02,160 --> 00:38:04,800
talking about securing the kubernetes

1031
00:38:04,800 --> 00:38:06,960
each layer of this like builds on the

1032
00:38:06,960 --> 00:38:09,440
previous layer so what makes us like

1033
00:38:09,440 --> 00:38:10,880
whenever we are trying to achieve a

1034
00:38:10,880 --> 00:38:13,200
difference in depth this make sure that

1035
00:38:13,200 --> 00:38:15,200
we have to make sure that each of these

1036
00:38:15,200 --> 00:38:17,680
layers we have to protect them at an

1037
00:38:17,680 --> 00:38:20,079
individual part so not just the code or

1038
00:38:20,079 --> 00:38:21,760
the container image of the kubernetes

1039
00:38:21,760 --> 00:38:24,160
cluster but we have to make sure that we

1040
00:38:24,160 --> 00:38:24,880
are

1041
00:38:24,880 --> 00:38:27,599
securing each of them at the individual

1042
00:38:27,599 --> 00:38:28,880
layer

1043
00:38:28,880 --> 00:38:30,240
so this something which we have to be

1044
00:38:30,240 --> 00:38:33,599
focused on okay so this is the next part

1045
00:38:33,599 --> 00:38:35,359
and in this section what i wanted to do

1046
00:38:35,359 --> 00:38:39,520
is i want to cover the overall flow of

1047
00:38:39,520 --> 00:38:41,760
cloud native application deployment in a

1048
00:38:41,760 --> 00:38:45,119
3d in a new modern devops pipeline so

1049
00:38:45,119 --> 00:38:46,400
like let's say if you are using a

1050
00:38:46,400 --> 00:38:48,880
kubernetes based orchestration to deploy

1051
00:38:48,880 --> 00:38:50,160
any new

1052
00:38:50,160 --> 00:38:52,720
website on the container what are the

1053
00:38:52,720 --> 00:38:54,320
different security checks which you have

1054
00:38:54,320 --> 00:38:56,880
to undergo along with the different

1055
00:38:56,880 --> 00:38:59,119
stages of the devos pipeline i want to

1056
00:38:59,119 --> 00:39:01,520
cover in this part whole flow like that

1057
00:39:01,520 --> 00:39:04,160
so i divided into three four stages

1058
00:39:04,160 --> 00:39:05,520
first let's see

1059
00:39:05,520 --> 00:39:07,359
like what you need to do when we talk

1060
00:39:07,359 --> 00:39:09,440
about the kubernetes security during

1061
00:39:09,440 --> 00:39:11,599
your build stage so right from a built

1062
00:39:11,599 --> 00:39:14,240
stage perspective i'll say you should

1063
00:39:14,240 --> 00:39:16,720
scan your image and the source code is

1064
00:39:16,720 --> 00:39:18,079
any application you are when you are

1065
00:39:18,079 --> 00:39:20,720
implementing like we normally do

1066
00:39:20,720 --> 00:39:23,440
various scanning tools like sas dash isd

1067
00:39:23,440 --> 00:39:24,480
sca

1068
00:39:24,480 --> 00:39:27,280
you also these all will ensure that your

1069
00:39:27,280 --> 00:39:30,000
code is as secure as possible uh i'll

1070
00:39:30,000 --> 00:39:33,040
also say though like you don't forget

1071
00:39:33,040 --> 00:39:36,320
to use open source code which is like um

1072
00:39:36,320 --> 00:39:38,480
like most of the most of them most of

1073
00:39:38,480 --> 00:39:39,680
your application may be using open

1074
00:39:39,680 --> 00:39:43,040
source code so what i'll say is like

1075
00:39:43,040 --> 00:39:44,960
you should have something to make sure

1076
00:39:44,960 --> 00:39:47,040
that your open source code is secure so

1077
00:39:47,040 --> 00:39:48,960
like a library checker or open source

1078
00:39:48,960 --> 00:39:50,960
checker os open source checker those

1079
00:39:50,960 --> 00:39:53,040
kind of things should be important

1080
00:39:53,040 --> 00:39:55,359
you should implement like

1081
00:39:55,359 --> 00:39:57,440
automate your workflows to ensure that

1082
00:39:57,440 --> 00:39:59,680
vulnerabilities are remediated as soon

1083
00:39:59,680 --> 00:40:02,560
as possible and code is secure also what

1084
00:40:02,560 --> 00:40:04,960
you can do is you can like

1085
00:40:04,960 --> 00:40:06,640
make sure that you are using the most

1086
00:40:06,640 --> 00:40:09,359
updated image available as it will be

1087
00:40:09,359 --> 00:40:11,680
most secure image available so destroy

1088
00:40:11,680 --> 00:40:14,400
anything which is outdated or it is like

1089
00:40:14,400 --> 00:40:16,400
really not possible to pass them so that

1090
00:40:16,400 --> 00:40:18,400
is something which you can do during

1091
00:40:18,400 --> 00:40:20,400
your build stage during your deployment

1092
00:40:20,400 --> 00:40:22,400
what you can do is uh first thing i'll

1093
00:40:22,400 --> 00:40:24,400
say is don't deploy images from unknown

1094
00:40:24,400 --> 00:40:27,440
sources don't do it if you don't know

1095
00:40:27,440 --> 00:40:30,640
the providence of any images where it

1096
00:40:30,640 --> 00:40:32,400
comes from you if you don't trust it

1097
00:40:32,400 --> 00:40:34,000
don't deploy it

1098
00:40:34,000 --> 00:40:36,000
do the scanning of the images during

1099
00:40:36,000 --> 00:40:38,400
that deployment you might have already

1100
00:40:38,400 --> 00:40:40,400
find the vulnerabilities since your

1101
00:40:40,400 --> 00:40:42,000
image was last scanned in development

1102
00:40:42,000 --> 00:40:44,480
but make sure that you are also doing a

1103
00:40:44,480 --> 00:40:46,960
continuous image scanning later after

1104
00:40:46,960 --> 00:40:48,960
the development stages as well

1105
00:40:48,960 --> 00:40:50,240
also use

1106
00:40:50,240 --> 00:40:52,560
image admission controls like

1107
00:40:52,560 --> 00:40:54,800
if any image violates your organization

1108
00:40:54,800 --> 00:40:56,960
security policies or prevent a container

1109
00:40:56,960 --> 00:40:58,880
from running it should

1110
00:40:58,880 --> 00:41:00,319
make sure that you need higher

1111
00:41:00,319 --> 00:41:02,240
privileges to make sure that it is

1112
00:41:02,240 --> 00:41:03,920
running with that particular privilege

1113
00:41:03,920 --> 00:41:05,839
so make sure that you have some kind of

1114
00:41:05,839 --> 00:41:08,000
a quality checks or control gates in

1115
00:41:08,000 --> 00:41:09,839
case any vulnerabilities are fine in

1116
00:41:09,839 --> 00:41:12,079
your pipeline so it should not go to the

1117
00:41:12,079 --> 00:41:13,839
deployment it should need additional

1118
00:41:13,839 --> 00:41:16,000
value of that

1119
00:41:16,000 --> 00:41:17,920
i also suggest that you should limit the

1120
00:41:17,920 --> 00:41:19,040
privileges

1121
00:41:19,040 --> 00:41:20,880
which are used by containers so don't

1122
00:41:20,880 --> 00:41:22,800
give or don't make sure that they are

1123
00:41:22,800 --> 00:41:24,319
running with the highest privileges make

1124
00:41:24,319 --> 00:41:25,680
sure that they follow the lease

1125
00:41:25,680 --> 00:41:28,400
privileges model that will really help

1126
00:41:28,400 --> 00:41:30,480
in securing your deployments

1127
00:41:30,480 --> 00:41:32,800
and i'll say that don't use your

1128
00:41:32,800 --> 00:41:36,560
defaults like use your defaults

1129
00:41:36,560 --> 00:41:38,319
when we talk about the r back or let's

1130
00:41:38,319 --> 00:41:41,520
say network policies so ignore or avoid

1131
00:41:41,520 --> 00:41:44,000
using the default configurations it will

1132
00:41:44,000 --> 00:41:46,079
not be a best decision you will make so

1133
00:41:46,079 --> 00:41:47,839
enable the rule based access control

1134
00:41:47,839 --> 00:41:49,040
which you have in the container

1135
00:41:49,040 --> 00:41:51,280
orchestration and it will help you to

1136
00:41:51,280 --> 00:41:53,599
regulate your access based on the roles

1137
00:41:53,599 --> 00:41:56,079
which your individual users or services

1138
00:41:56,079 --> 00:41:58,640
may have so that will be another good

1139
00:41:58,640 --> 00:42:00,400
best practices when we talk during the

1140
00:42:00,400 --> 00:42:02,560
deployment phase

1141
00:42:02,560 --> 00:42:04,319
but what happens like after the build

1142
00:42:04,319 --> 00:42:05,680
and the deploy the next phase is the

1143
00:42:05,680 --> 00:42:07,920
production and from the production also

1144
00:42:07,920 --> 00:42:10,640
we need to make sure that we have some

1145
00:42:10,640 --> 00:42:13,280
security checks there and what we can do

1146
00:42:13,280 --> 00:42:15,920
is we can scan images in the production

1147
00:42:15,920 --> 00:42:18,240
like as we have talked about earlier we

1148
00:42:18,240 --> 00:42:19,359
may have missed out some new

1149
00:42:19,359 --> 00:42:21,680
vulnerabilities during that time or

1150
00:42:21,680 --> 00:42:24,400
maybe some you are of like came during

1151
00:42:24,400 --> 00:42:26,319
after the deployment so to make sure

1152
00:42:26,319 --> 00:42:28,000
that we are meticulous we about to

1153
00:42:28,000 --> 00:42:29,839
continue scanning of our images that's

1154
00:42:29,839 --> 00:42:31,760
one of the important part what we can

1155
00:42:31,760 --> 00:42:34,240
also do is we can secure and inspect our

1156
00:42:34,240 --> 00:42:36,960
network using maybe a container firewall

1157
00:42:36,960 --> 00:42:39,119
which will like kind of apply any

1158
00:42:39,119 --> 00:42:41,280
network security

1159
00:42:41,280 --> 00:42:43,119
techniques to our cloud native

1160
00:42:43,119 --> 00:42:45,119
kubernetes environment so not just like

1161
00:42:45,119 --> 00:42:46,400
relying on the

1162
00:42:46,400 --> 00:42:48,319
traditional environment but using some

1163
00:42:48,319 --> 00:42:50,240
container firewall is also something

1164
00:42:50,240 --> 00:42:52,560
very important aspect which we can work

1165
00:42:52,560 --> 00:42:53,280
on

1166
00:42:53,280 --> 00:42:55,359
we can also like

1167
00:42:55,359 --> 00:42:57,920
make sure that our network graphics are

1168
00:42:57,920 --> 00:42:59,520
like creating

1169
00:42:59,520 --> 00:43:02,319
for network graphics is following and

1170
00:43:02,319 --> 00:43:05,359
like creating and defining the

1171
00:43:05,359 --> 00:43:07,839
creating like the network cluster

1172
00:43:07,839 --> 00:43:10,079
traffic basically is following or

1173
00:43:10,079 --> 00:43:11,920
working as per the policies we have

1174
00:43:11,920 --> 00:43:14,720
defined on the cluster if uh

1175
00:43:14,720 --> 00:43:17,359
if you are like if you are not able to

1176
00:43:17,359 --> 00:43:19,359
control those network accesses in and

1177
00:43:19,359 --> 00:43:21,680
out of the container applications that

1178
00:43:21,680 --> 00:43:23,440
is a red flag yeah

1179
00:43:23,440 --> 00:43:25,359
so make sure that we have that network

1180
00:43:25,359 --> 00:43:27,920
policy is defined at an orchestrator

1181
00:43:27,920 --> 00:43:29,280
level

1182
00:43:29,280 --> 00:43:31,680
also i'll say that you should establish

1183
00:43:31,680 --> 00:43:34,400
the security boundaries using namespaces

1184
00:43:34,400 --> 00:43:35,680
they will allow you to divide the

1185
00:43:35,680 --> 00:43:37,839
cluster resources between multiple users

1186
00:43:37,839 --> 00:43:40,400
so that is definitely google

1187
00:43:40,400 --> 00:43:43,680
uh from uh from a security policies for

1188
00:43:43,680 --> 00:43:45,839
the ports perspective i'll say like pods

1189
00:43:45,839 --> 00:43:47,440
are the smallest execution unit in

1190
00:43:47,440 --> 00:43:50,160
kubernetes and that's what are used to

1191
00:43:50,160 --> 00:43:52,480
organize your containers as well so what

1192
00:43:52,480 --> 00:43:54,319
you can do you can use pod security

1193
00:43:54,319 --> 00:43:55,839
policies

1194
00:43:55,839 --> 00:43:57,920
to address issues such as container

1195
00:43:57,920 --> 00:43:59,760
running as root and if they are running

1196
00:43:59,760 --> 00:44:01,440
with overproducers so those kind of

1197
00:44:01,440 --> 00:44:03,440
policies can be used using the port

1198
00:44:03,440 --> 00:44:05,680
security policies

1199
00:44:05,680 --> 00:44:08,960
what we also do i suggest is that

1200
00:44:08,960 --> 00:44:11,359
when you are replicating any pods or you

1201
00:44:11,359 --> 00:44:13,280
are trying to like

1202
00:44:13,280 --> 00:44:15,599
scale up using existing identical

1203
00:44:15,599 --> 00:44:18,400
behavior try to monitor analyze the pod

1204
00:44:18,400 --> 00:44:20,720
so that if you see anything abnormal

1205
00:44:20,720 --> 00:44:23,359
behavior within the normal behavior like

1206
00:44:23,359 --> 00:44:25,520
normal something which is going which is

1207
00:44:25,520 --> 00:44:28,480
not something as usual then you can

1208
00:44:28,480 --> 00:44:29,440
actually

1209
00:44:29,440 --> 00:44:31,440
flag it and investigate that particular

1210
00:44:31,440 --> 00:44:33,520
behavior so that in case of any kind of

1211
00:44:33,520 --> 00:44:35,200
breaches you know

1212
00:44:35,200 --> 00:44:37,119
where to look for and what to look for

1213
00:44:37,119 --> 00:44:39,040
so that is very important so make sure

1214
00:44:39,040 --> 00:44:40,720
that you analyze those parts for any

1215
00:44:40,720 --> 00:44:42,640
kind of abnormal behavior during the

1216
00:44:42,640 --> 00:44:45,760
deployments after the production

1217
00:44:45,760 --> 00:44:46,800
from a

1218
00:44:46,800 --> 00:44:48,880
kubernetes perspective itself like i say

1219
00:44:48,880 --> 00:44:50,960
that as in the previous slide i have

1220
00:44:50,960 --> 00:44:52,560
mentioned that you should update the

1221
00:44:52,560 --> 00:44:54,720
kubernetes very frequently so kubernetes

1222
00:44:54,720 --> 00:44:57,760
not only covers the like the only three

1223
00:44:57,760 --> 00:44:59,920
is the version you if you are not

1224
00:44:59,920 --> 00:45:01,839
updating kubernetes regularly what you

1225
00:45:01,839 --> 00:45:04,720
will miss is like on any new patches of

1226
00:45:04,720 --> 00:45:06,560
recently discussed were disclosed

1227
00:45:06,560 --> 00:45:08,319
vulnerabilities you should you will be

1228
00:45:08,319 --> 00:45:10,079
able to miss that so try to make sure

1229
00:45:10,079 --> 00:45:12,000
that every quarter you update your

1230
00:45:12,000 --> 00:45:14,400
kubernetes so that you don't expose your

1231
00:45:14,400 --> 00:45:16,720
organization i suggest quarterly is a

1232
00:45:16,720 --> 00:45:19,359
fair enough thing kubernetes api is

1233
00:45:19,359 --> 00:45:21,040
something which is a

1234
00:45:21,040 --> 00:45:23,359
very important part of this applications

1235
00:45:23,359 --> 00:45:26,640
uh this modern cloud native deployments

1236
00:45:26,640 --> 00:45:28,400
so make sure that you don't leave your

1237
00:45:28,400 --> 00:45:31,280
kubernetes api publicly exposed and it

1238
00:45:31,280 --> 00:45:33,599
should only allow access by an internal

1239
00:45:33,599 --> 00:45:35,839
network or a vpn it is very very

1240
00:45:35,839 --> 00:45:38,800
important so make sure that you

1241
00:45:38,800 --> 00:45:40,560
take care of those aspects when you are

1242
00:45:40,560 --> 00:45:43,760
deploying deploying your next

1243
00:45:43,760 --> 00:45:46,480
containers in the devops so just like

1244
00:45:46,480 --> 00:45:49,200
the major like on a high level i have

1245
00:45:49,200 --> 00:45:50,880
talked about what are the various things

1246
00:45:50,880 --> 00:45:53,040
you can do and it applies for all the

1247
00:45:53,040 --> 00:45:55,359
type of deployments like not just on the

1248
00:45:55,359 --> 00:45:58,400
aws as your gcp but any kind of cloud

1249
00:45:58,400 --> 00:46:00,800
you are using be it manage services or

1250
00:46:00,800 --> 00:46:01,599
be

1251
00:46:01,599 --> 00:46:03,440
you are the oh you are managing them

1252
00:46:03,440 --> 00:46:05,040
yourself but make sure that these are

1253
00:46:05,040 --> 00:46:06,800
few things which you are taking care

1254
00:46:06,800 --> 00:46:08,240
when you are deploying

1255
00:46:08,240 --> 00:46:11,119
using kubernetes your next

1256
00:46:11,119 --> 00:46:13,440
application

1257
00:46:13,440 --> 00:46:16,240
cool so let's go to the next one now we

1258
00:46:16,240 --> 00:46:18,800
talk about the diy part wherein what are

1259
00:46:18,800 --> 00:46:21,119
the some popular tools or the vendors

1260
00:46:21,119 --> 00:46:23,040
who are working on this container based

1261
00:46:23,040 --> 00:46:24,800
solutions when we talk about just from a

1262
00:46:24,800 --> 00:46:27,359
security perspective so

1263
00:46:27,359 --> 00:46:29,760
there are many like uh

1264
00:46:29,760 --> 00:46:31,760
in the last year itself like the

1265
00:46:31,760 --> 00:46:33,680
container security

1266
00:46:33,680 --> 00:46:36,240
has contained security solution that

1267
00:46:36,240 --> 00:46:38,240
organization can rely have grown from

1268
00:46:38,240 --> 00:46:39,920
like both capabilities and

1269
00:46:39,920 --> 00:46:43,200
sophistications like multi-fold

1270
00:46:43,200 --> 00:46:45,520
like regardless of what level of depth

1271
00:46:45,520 --> 00:46:46,960
of maturity

1272
00:46:46,960 --> 00:46:48,960
anyone has attained any organization has

1273
00:46:48,960 --> 00:46:51,200
attacked cloud security or like

1274
00:46:51,200 --> 00:46:53,440
container security specifically are

1275
00:46:53,440 --> 00:46:55,440
something which are more accessible than

1276
00:46:55,440 --> 00:46:59,119
ever container security solutions

1277
00:46:59,119 --> 00:47:01,280
which any organization will be required

1278
00:47:01,280 --> 00:47:03,599
to adopt there are many solutions like

1279
00:47:03,599 --> 00:47:04,960
as you can see from the slide itself

1280
00:47:04,960 --> 00:47:06,400
there are many

1281
00:47:06,400 --> 00:47:08,960
players out in the market right now but

1282
00:47:08,960 --> 00:47:10,960
what we are looking is the couple of

1283
00:47:10,960 --> 00:47:12,079
them so

1284
00:47:12,079 --> 00:47:14,720
in the next slide i just talked about

1285
00:47:14,720 --> 00:47:16,240
what are the key areas which you should

1286
00:47:16,240 --> 00:47:18,480
talk and what are the key players so

1287
00:47:18,480 --> 00:47:20,559
from from an area of perspective i will

1288
00:47:20,559 --> 00:47:22,160
say that

1289
00:47:22,160 --> 00:47:24,319
from a container security like container

1290
00:47:24,319 --> 00:47:26,800
monitoring container scanning and

1291
00:47:26,800 --> 00:47:29,440
container firewalls these are the three

1292
00:47:29,440 --> 00:47:32,880
major areas which are very fro from very

1293
00:47:32,880 --> 00:47:34,640
high light from a market perspective

1294
00:47:34,640 --> 00:47:36,319
which every of these vendors are

1295
00:47:36,319 --> 00:47:39,440
targeting so like the ability to monitor

1296
00:47:39,440 --> 00:47:41,760
your registry for vulnerabilities like

1297
00:47:41,760 --> 00:47:43,520
the same thing we are doing availability

1298
00:47:43,520 --> 00:47:45,760
assessment for container monitoring for

1299
00:47:45,760 --> 00:47:49,200
any cyber security or i.t related things

1300
00:47:49,200 --> 00:47:51,760
and making sure that we time stamp any

1301
00:47:51,760 --> 00:47:52,960
events which are occurring in the

1302
00:47:52,960 --> 00:47:54,720
containerized environment that's like

1303
00:47:54,720 --> 00:47:57,040
container monitoring from a container

1304
00:47:57,040 --> 00:47:58,800
scanning perspective like scanning all

1305
00:47:58,800 --> 00:48:00,880
the libraries and the container images

1306
00:48:00,880 --> 00:48:02,960
for any one liberty so doing a basic

1307
00:48:02,960 --> 00:48:04,800
vulnerability assessment

1308
00:48:04,800 --> 00:48:07,280
of the container images using the scans

1309
00:48:07,280 --> 00:48:08,880
that is like another tools which you

1310
00:48:08,880 --> 00:48:11,839
should have like press my aqua have it

1311
00:48:11,839 --> 00:48:14,480
container firewalls are something like

1312
00:48:14,480 --> 00:48:16,160
not from like uh

1313
00:48:16,160 --> 00:48:17,520
traditional

1314
00:48:17,520 --> 00:48:19,760
firewalls but like a container firewall

1315
00:48:19,760 --> 00:48:21,280
is something which will inspect and

1316
00:48:21,280 --> 00:48:23,760
protect all the traffic entering

1317
00:48:23,760 --> 00:48:26,000
and into your existing container as well

1318
00:48:26,000 --> 00:48:28,480
as like moving outside from the external

1319
00:48:28,480 --> 00:48:30,640
network or your legacy application so

1320
00:48:30,640 --> 00:48:32,480
most container firewall will run as a

1321
00:48:32,480 --> 00:48:34,720
sidecar so that they can enable that

1322
00:48:34,720 --> 00:48:38,240
network security to that to your to

1323
00:48:38,240 --> 00:48:39,599
other environments which they are

1324
00:48:39,599 --> 00:48:40,640
running on

1325
00:48:40,640 --> 00:48:42,480
apart from that you should have like

1326
00:48:42,480 --> 00:48:45,119
some there are other tools which

1327
00:48:45,119 --> 00:48:47,119
what they do is they do a configuration

1328
00:48:47,119 --> 00:48:49,599
assessment against the best compliance

1329
00:48:49,599 --> 00:48:53,440
or configurations like cis or nist so

1330
00:48:53,440 --> 00:48:55,680
these kind of compliance scans or the

1331
00:48:55,680 --> 00:48:58,319
policy scans are also done by a lot of

1332
00:48:58,319 --> 00:49:00,000
tools which are very important from a

1333
00:49:00,000 --> 00:49:02,240
compliance perspective so tools which

1334
00:49:02,240 --> 00:49:05,119
you see on the slides they do support

1335
00:49:05,119 --> 00:49:06,960
all these kind of different areas which

1336
00:49:06,960 --> 00:49:08,880
we talked about from a container secure

1337
00:49:08,880 --> 00:49:11,040
perspective and these are just few which

1338
00:49:11,040 --> 00:49:13,040
i am which i know of definitely there

1339
00:49:13,040 --> 00:49:15,520
will be many and

1340
00:49:15,520 --> 00:49:17,440
what you can do is you can start

1341
00:49:17,440 --> 00:49:19,440
exploring these like if you have never

1342
00:49:19,440 --> 00:49:21,359
heard about this you can start exploring

1343
00:49:21,359 --> 00:49:24,000
these to see which is best suited for

1344
00:49:24,000 --> 00:49:26,160
your organization for your application

1345
00:49:26,160 --> 00:49:28,960
for me i am quite comfortable with a few

1346
00:49:28,960 --> 00:49:30,480
of them so

1347
00:49:30,480 --> 00:49:31,920
just make sure that

1348
00:49:31,920 --> 00:49:33,440
you know about these tools when we are

1349
00:49:33,440 --> 00:49:35,520
talking about the container security of

1350
00:49:35,520 --> 00:49:38,880
the kubernetes security

1351
00:49:39,119 --> 00:49:42,319
okay so before i end this session i just

1352
00:49:42,319 --> 00:49:44,480
will want to say that kubernetes and

1353
00:49:44,480 --> 00:49:47,119
containers are like everywhere with

1354
00:49:47,119 --> 00:49:49,839
with their rising popularity security

1355
00:49:49,839 --> 00:49:52,160
should be a primary concern and not an

1356
00:49:52,160 --> 00:49:54,400
afterthought as i keep on repeating you

1357
00:49:54,400 --> 00:49:57,720
should not

1358
00:50:21,359 --> 00:50:23,920
how are you

1359
00:50:24,079 --> 00:50:26,960
i'm good how about you fine fine i have

1360
00:50:26,960 --> 00:50:29,200
a few questions for you

1361
00:50:29,200 --> 00:50:31,839
please please feel free to ask okay

1362
00:50:31,839 --> 00:50:33,839
what tool do you recommend for runtime

1363
00:50:33,839 --> 00:50:36,160
monitoring

1364
00:50:36,160 --> 00:50:37,680
sorry

1365
00:50:37,680 --> 00:50:40,079
what tool do you recommend for runtime

1366
00:50:40,079 --> 00:50:42,720
monitoring

1367
00:50:43,920 --> 00:50:46,800
i don't want to be like

1368
00:50:46,800 --> 00:50:48,880
just from a fairness perspective to all

1369
00:50:48,880 --> 00:50:50,800
the great tools out there in the market

1370
00:50:50,800 --> 00:50:53,040
i will not recommend anyone but as i

1371
00:50:53,040 --> 00:50:55,520
mentioned in my slides there are a lot

1372
00:50:55,520 --> 00:50:57,599
good players in the market like we have

1373
00:50:57,599 --> 00:51:00,240
prismacloud from palo alto we have

1374
00:51:00,240 --> 00:51:02,800
various others like we have aquasic for

1375
00:51:02,800 --> 00:51:04,960
from a tv perspective so there are a

1376
00:51:04,960 --> 00:51:06,800
couple of good tools out in the market

1377
00:51:06,800 --> 00:51:09,280
i'll say based on the use cases budget

1378
00:51:09,280 --> 00:51:11,599
and the kind of region you are based out

1379
00:51:11,599 --> 00:51:13,359
i suggest you should do a poc of the

1380
00:51:13,359 --> 00:51:15,680
tools

1381
00:51:16,240 --> 00:51:18,640
what do you recommend for container

1382
00:51:18,640 --> 00:51:21,598
runtime protection

1383
00:51:21,680 --> 00:51:23,520
again

1384
00:51:23,520 --> 00:51:26,640
okay so it's all mostly a common open

1385
00:51:26,640 --> 00:51:28,720
indication so i'll suggest like uh

1386
00:51:28,720 --> 00:51:30,640
considering the parallel i see polar

1387
00:51:30,640 --> 00:51:33,200
logo here also train micro i say apollo

1388
00:51:33,200 --> 00:51:35,040
2 has a good tool from a container

1389
00:51:35,040 --> 00:51:37,680
perspective prismacloud is there like

1390
00:51:37,680 --> 00:51:40,400
a whole cloud native tool so that's

1391
00:51:40,400 --> 00:51:42,400
something which i used uh i'm quite

1392
00:51:42,400 --> 00:51:44,960
familiar then we have other players like

1393
00:51:44,960 --> 00:51:47,200
from the similar to paul to the other

1394
00:51:47,200 --> 00:51:48,720
players in the market right now like

1395
00:51:48,720 --> 00:51:50,880
equals like has uh container security

1396
00:51:50,880 --> 00:51:53,119
tools like preview and cue pens those

1397
00:51:53,119 --> 00:51:54,960
kind of things so those are the good

1398
00:51:54,960 --> 00:51:56,720
tools in the market and similarly like

1399
00:51:56,720 --> 00:51:58,800
checkpoint and other vendors have so in

1400
00:51:58,800 --> 00:52:00,720
my slides i have shared few of the tools

1401
00:52:00,720 --> 00:52:03,040
which can be used for like for your

1402
00:52:03,040 --> 00:52:05,680
monitoring but as i said again like

1403
00:52:05,680 --> 00:52:08,240
uh i highly suggest that we it the all

1404
00:52:08,240 --> 00:52:10,400
the tools depend on like the kind of

1405
00:52:10,400 --> 00:52:12,319
complexity of your right infrastructure

1406
00:52:12,319 --> 00:52:13,200
so

1407
00:52:13,200 --> 00:52:15,280
having a deeper understanding speaking

1408
00:52:15,280 --> 00:52:16,960
with the integration team of these

1409
00:52:16,960 --> 00:52:20,000
vendors to make sure which tool best fit

1410
00:52:20,000 --> 00:52:21,760
your organization would be a better

1411
00:52:21,760 --> 00:52:25,440
approach than like taking my words

1412
00:52:26,400 --> 00:52:28,960
what are the recommendations in terms of

1413
00:52:28,960 --> 00:52:31,359
forensic terms when a machine get

1414
00:52:31,359 --> 00:52:34,880
compromised into a container context

1415
00:52:34,880 --> 00:52:37,599
oh wow very nice question i suggest like

1416
00:52:37,599 --> 00:52:39,119
from a forensics perspective it is

1417
00:52:39,119 --> 00:52:41,280
something which is like after the

1418
00:52:41,280 --> 00:52:43,680
incident has happened so somewhere like

1419
00:52:43,680 --> 00:52:45,680
your first parameter securities have

1420
00:52:45,680 --> 00:52:47,200
already failed and you

1421
00:52:47,200 --> 00:52:49,520
like the incident or the bad actors have

1422
00:52:49,520 --> 00:52:51,760
already successfully like penetrated

1423
00:52:51,760 --> 00:52:53,359
within your network or your container

1424
00:52:53,359 --> 00:52:55,920
images i think uh what you can do in

1425
00:52:55,920 --> 00:52:58,000
that case is the logs logs are your

1426
00:52:58,000 --> 00:52:59,920
friend in that case so whenever like

1427
00:52:59,920 --> 00:53:02,240
these kind of forensic investigations or

1428
00:53:02,240 --> 00:53:04,880
uh scram investigations are going on the

1429
00:53:04,880 --> 00:53:07,040
logs are very important so there are

1430
00:53:07,040 --> 00:53:08,880
various types of logs which you can

1431
00:53:08,880 --> 00:53:11,839
actually see or try to get into the

1432
00:53:11,839 --> 00:53:14,240
container one is your like operating

1433
00:53:14,240 --> 00:53:15,760
system or like a

1434
00:53:15,760 --> 00:53:18,800
simple os related logs from the

1435
00:53:18,800 --> 00:53:20,240
container second would be your

1436
00:53:20,240 --> 00:53:21,920
application related lock so if your

1437
00:53:21,920 --> 00:53:24,079
container is particularly running on any

1438
00:53:24,079 --> 00:53:26,240
particular application that application

1439
00:53:26,240 --> 00:53:28,559
logs would also be a very good idea when

1440
00:53:28,559 --> 00:53:30,480
you during your forensic investigation

1441
00:53:30,480 --> 00:53:32,480
and the third type of logs i suggest is

1442
00:53:32,480 --> 00:53:34,960
your network logs so a lot of times like

1443
00:53:34,960 --> 00:53:37,680
based on your graphics how the network

1444
00:53:37,680 --> 00:53:40,240
is being like accessed right from like

1445
00:53:40,240 --> 00:53:42,240
the ingress and the aqueous perspective

1446
00:53:42,240 --> 00:53:44,079
so the network logs also would be a very

1447
00:53:44,079 --> 00:53:45,839
important parameters when you are trying

1448
00:53:45,839 --> 00:53:49,040
to do your forensic investigations

1449
00:53:49,040 --> 00:53:50,800
and the last one

1450
00:53:50,800 --> 00:53:52,960
what are the recommendations

1451
00:53:52,960 --> 00:53:55,599
about patching multiple machine into a

1452
00:53:55,599 --> 00:53:58,400
container environment

1453
00:53:58,400 --> 00:53:59,680
sure

1454
00:53:59,680 --> 00:54:01,920
patching has actually has been a bit

1455
00:54:01,920 --> 00:54:03,680
easier when we talk about the category

1456
00:54:03,680 --> 00:54:06,319
images i have touched down it in my

1457
00:54:06,319 --> 00:54:08,480
slides as well so because of if you are

1458
00:54:08,480 --> 00:54:10,480
using orchestrations tools like say

1459
00:54:10,480 --> 00:54:12,480
kubernetes or docker swamp then that

1460
00:54:12,480 --> 00:54:14,640
case like patching a container would not

1461
00:54:14,640 --> 00:54:17,200
be a big issue also what you can do is

1462
00:54:17,200 --> 00:54:19,599
uh like i discussed in my slides as well

1463
00:54:19,599 --> 00:54:20,559
you can

1464
00:54:20,559 --> 00:54:23,440
go with uh white listed images or like

1465
00:54:23,440 --> 00:54:25,200
immutable architecture when you are

1466
00:54:25,200 --> 00:54:27,200
using a container images so what you

1467
00:54:27,200 --> 00:54:29,040
will do is you will scan one container

1468
00:54:29,040 --> 00:54:30,960
images and then you can make it as a

1469
00:54:30,960 --> 00:54:33,440
best baseline which would be used in

1470
00:54:33,440 --> 00:54:35,839
rest of the applications or your

1471
00:54:35,839 --> 00:54:37,520
development team so you can use that

1472
00:54:37,520 --> 00:54:39,920
particular method like patch one machine

1473
00:54:39,920 --> 00:54:41,680
or patch one container image and then

1474
00:54:41,680 --> 00:54:44,000
use that as a baseline tool for the

1475
00:54:44,000 --> 00:54:45,760
overall application development so that

1476
00:54:45,760 --> 00:54:48,240
would be a good strategy

1477
00:54:48,240 --> 00:54:49,359
okay

1478
00:54:49,359 --> 00:54:51,520
thanks very much for your time for your

1479
00:54:51,520 --> 00:54:54,880
knowledge again and for the time to

1480
00:54:54,880 --> 00:54:56,720
share with us

1481
00:54:56,720 --> 00:54:58,720
thank you very much

1482
00:54:58,720 --> 00:55:00,400
thank you so much to us pleasure

1483
00:55:00,400 --> 00:55:02,640
speaking with you thanks guys

1484
00:55:02,640 --> 00:55:06,680
nice see ya

1485
00:55:38,170 --> 00:55:41,209
[Music]

1486
00:56:43,040 --> 00:56:46,040
mediator

1487
00:56:48,260 --> 00:56:57,550
[Music]

1488
00:57:00,090 --> 00:57:03,219
[Music]

1489
00:57:32,799 --> 00:57:35,799
so

1490
00:57:37,010 --> 00:57:43,359
[Music]

1491
00:57:43,359 --> 00:57:46,359
um

1492
00:58:26,000 --> 00:58:29,000
oh

1493
00:58:37,200 --> 00:58:40,200
oh

1494
00:59:12,720 --> 00:59:14,799
you

