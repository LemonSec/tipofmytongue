1
00:00:06,170 --> 00:00:11,550
does it work

2
00:00:07,760 --> 00:00:12,960
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> hello everyone my name</font><font color="#CCCCCC"> is Alana</font>

3
00:00:11,550 --> 00:00:15,570
<font color="#CCCCCC">Devon Louis and I work as a security</font>

4
00:00:12,960 --> 00:00:16,859
<font color="#CCCCCC">researcher</font><font color="#E5E5E5"> at now secure</font><font color="#CCCCCC"> and also</font><font color="#E5E5E5"> the</font>

5
00:00:15,570 --> 00:00:19,890
creator of freedom which I'm going<font color="#E5E5E5"> to</font>

6
00:00:16,859 --> 00:00:22,410
<font color="#E5E5E5">show you a bit of today</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> what I'm</font>

7
00:00:19,890 --> 00:00:24,960
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about is</font><font color="#E5E5E5"> something that's</font>

8
00:00:22,410 --> 00:00:26,609
new in<font color="#CCCCCC"> frida probably the coolest new</font>

9
00:00:24,960 --> 00:00:29,330
thing in<font color="#CCCCCC"> Frida's since Frieda was</font>

10
00:00:26,609 --> 00:00:31,890
created and I think we should really

11
00:00:29,330 --> 00:00:33,629
integrate this in our to<font color="#E5E5E5"> Frieda and and</font>

12
00:00:31,890 --> 00:00:35,130
there are<font color="#E5E5E5"> some things with it I'm not</font>

13
00:00:33,630 --> 00:00:37,110
<font color="#CCCCCC">sure what people</font><font color="#E5E5E5"> will do</font><font color="#CCCCCC"> with it yet so</font>

14
00:00:35,130 --> 00:00:41,070
that's why I'm going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> just show some</font>

15
00:00:37,110 --> 00:00:42,989
<font color="#E5E5E5">demos and and get some ideas flowing</font>

16
00:00:41,070 --> 00:00:44,640
through your<font color="#E5E5E5"> heads and maybe there will</font>

17
00:00:42,989 --> 00:00:46,199
be contributions in the future<font color="#CCCCCC"> or</font><font color="#E5E5E5"> that's</font>

18
00:00:44,640 --> 00:00:51,719
<font color="#E5E5E5">my hope</font><font color="#CCCCCC"> anyway</font><font color="#E5E5E5"> that's the goal</font><font color="#CCCCCC"> of doing</font>

19
00:00:46,200 --> 00:00:53,250
<font color="#CCCCCC">it and but</font><font color="#E5E5E5"> before I do this some of you</font>

20
00:00:51,719 --> 00:00:55,350
are probably<font color="#E5E5E5"> not familiar with the</font><font color="#CCCCCC"> Freid</font>

21
00:00:53,250 --> 00:00:58,500
<font color="#CCCCCC">api so i'll</font><font color="#E5E5E5"> just spend</font><font color="#CCCCCC"> a few minutes on</font>

22
00:00:55,350 --> 00:00:59,809
on a quick introduction<font color="#CCCCCC"> oh yeah thank</font>

23
00:00:58,500 --> 00:01:03,269
you

24
00:00:59,809 --> 00:01:05,039
so essentially what Frieda is<font color="#E5E5E5"> is that</font>

25
00:01:03,270 --> 00:01:06,750
you have<font color="#E5E5E5"> this process</font><font color="#CCCCCC"> debug e</font><font color="#E5E5E5"> on the</font>

26
00:01:05,040 --> 00:01:09,409
right here where you want to run<font color="#CCCCCC"> some</font>

27
00:01:06,750 --> 00:01:12,920
code<font color="#E5E5E5"> inside inside of that process and</font>

28
00:01:09,409 --> 00:01:15,570
you<font color="#CCCCCC"> are the debugger on</font><font color="#E5E5E5"> the outside and</font>

29
00:01:12,920 --> 00:01:17,340
so what fear does is creates it

30
00:01:15,570 --> 00:01:19,110
allocates a<font color="#E5E5E5"> memory for a</font><font color="#CCCCCC"> so-called boots</font>

31
00:01:17,340 --> 00:01:21,810
<font color="#CCCCCC">wrapper inside there</font><font color="#E5E5E5"> are some code and</font>

32
00:01:19,110 --> 00:01:24,720
then<font color="#E5E5E5"> it creates a thread that runs that</font>

33
00:01:21,810 --> 00:01:27,900
code and that code then just loads the

34
00:01:24,720 --> 00:01:31,350
library from<font color="#E5E5E5"> the file system</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> maps</font>

35
00:01:27,900 --> 00:01:32,909
into memory depends on the OS and<font color="#E5E5E5"> that</font>

36
00:01:31,350 --> 00:01:36,658
establishes a communication channel back

37
00:01:32,909 --> 00:01:38,520
to<font color="#CCCCCC"> you and finally that allows you</font><font color="#E5E5E5"> to</font>

38
00:01:36,659 --> 00:01:41,430
tell it<font color="#CCCCCC"> over the communication</font><font color="#E5E5E5"> channel</font>

39
00:01:38,520 --> 00:01:43,020
please execute<font color="#E5E5E5"> this JavaScript and it</font>

40
00:01:41,430 --> 00:01:45,149
has a JavaScript interpreter inside and

41
00:01:43,020 --> 00:01:48,840
<font color="#E5E5E5">that allows you to</font><font color="#CCCCCC"> access a lot of API</font>

42
00:01:45,149 --> 00:01:54,329
to introspect and augment functionality

43
00:01:48,840 --> 00:01:57,390
and do many fun things<font color="#CCCCCC"> so</font><font color="#E5E5E5"> let's just</font>

44
00:01:54,329 --> 00:01:59,939
dive dive straight<font color="#E5E5E5"> into the code so</font>

45
00:01:57,390 --> 00:02:01,259
we're gonna for the sake of<font color="#CCCCCC"> keep</font>

46
00:01:59,939 --> 00:02:05,908
<font color="#CCCCCC">anything</font><font color="#E5E5E5"> simple we're</font><font color="#CCCCCC"> just gonna start</font>

47
00:02:01,259 --> 00:02:08,038
by writing a tiny program oops

48
00:02:05,909 --> 00:02:10,770
I'm not still not<font color="#E5E5E5"> used to this keyboard</font>

49
00:02:08,038 --> 00:02:20,730
<font color="#CCCCCC">bear with</font><font color="#E5E5E5"> me</font>

50
00:02:10,770 --> 00:02:25,140
so we'll have<font color="#CCCCCC"> our main function and</font>

51
00:02:20,730 --> 00:02:25,140
we're going<font color="#CCCCCC"> to have an infinite</font><font color="#E5E5E5"> loop</font><font color="#CCCCCC"> and</font>

52
00:02:26,400 --> 00:02:31,120
<font color="#CCCCCC">every second we're going</font><font color="#E5E5E5"> to call a</font>

53
00:02:28,270 --> 00:02:33,930
function<font color="#E5E5E5"> I'm gonna give</font><font color="#CCCCCC"> it an integer</font>

54
00:02:31,120 --> 00:02:36,370
and that's increasing every time and

55
00:02:33,930 --> 00:02:40,150
we're just<font color="#E5E5E5"> gonna sleep a</font><font color="#CCCCCC"> sec in</font><font color="#E5E5E5"> between</font>

56
00:02:36,370 --> 00:02:44,020
each call<font color="#E5E5E5"> and we're gonna we need uni</font>

57
00:02:40,150 --> 00:02:47,490
STD for sleep<font color="#E5E5E5"> yeah that's it</font>

58
00:02:44,020 --> 00:02:47,490
and of course me to write<font color="#E5E5E5"> this function</font>

59
00:02:49,290 --> 00:03:01,769
that's<font color="#E5E5E5"> an integer</font><font color="#CCCCCC"> N and it's just</font><font color="#E5E5E5"> gonna</font>

60
00:02:53,470 --> 00:03:09,340
print the number<font color="#CCCCCC"> standard out</font><font color="#E5E5E5"> all right</font>

61
00:03:01,770 --> 00:03:14,500
<font color="#CCCCCC">I</font><font color="#E5E5E5"> probably made a typo here</font>

62
00:03:09,340 --> 00:03:17,709
oops what<font color="#E5E5E5"> am i doing okay and then one</font>

63
00:03:14,500 --> 00:03:20,020
more<font color="#CCCCCC"> thing we should</font><font color="#E5E5E5"> probably also print</font>

64
00:03:17,709 --> 00:03:29,290
out where<font color="#E5E5E5"> F is in memory the function f</font>

65
00:03:20,020 --> 00:03:32,560
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we're calling okay we're ready so</font>

66
00:03:29,290 --> 00:03:33,850
if we<font color="#E5E5E5"> launch this count</font><font color="#CCCCCC"> base calling the</font>

67
00:03:32,560 --> 00:03:37,180
function every<font color="#CCCCCC"> time and it's printing</font>

68
00:03:33,850 --> 00:03:38,950
<font color="#E5E5E5">out the integer</font><font color="#CCCCCC"> that is given okay now</font>

69
00:03:37,180 --> 00:03:42,130
we're just gonna have<font color="#CCCCCC"> some fun with</font>

70
00:03:38,950 --> 00:03:46,690
<font color="#E5E5E5">Freda using the Python bindings so just</font>

71
00:03:42,130 --> 00:03:48,579
import Freda<font color="#CCCCCC"> and we're gonna attach to</font>

72
00:03:46,690 --> 00:03:53,590
the hello process we could also attach

73
00:03:48,580 --> 00:03:57,959
to it by<font color="#CCCCCC"> Pitts and then we're gonna tell</font>

74
00:03:53,590 --> 00:03:57,959
it<font color="#CCCCCC"> to</font><font color="#E5E5E5"> crate to load some JavaScript and</font>

75
00:03:58,170 --> 00:04:06,609
initially yeah maybe what we want to do

76
00:04:01,360 --> 00:04:08,200
is just yeah<font color="#E5E5E5"> we're gonna use actually</font><font color="#CCCCCC"> to</font>

77
00:04:06,610 --> 00:04:12,690
make this easier to read I'm just<font color="#CCCCCC"> going</font>

78
00:04:08,200 --> 00:04:12,690
<font color="#CCCCCC">to open</font><font color="#E5E5E5"> it from a file so</font>

79
00:04:15,520 --> 00:04:24,530
so the code we<font color="#E5E5E5"> want is here and we're</font>

80
00:04:21,560 --> 00:04:26,990
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> load the script and we don't</font>

81
00:04:24,530 --> 00:04:28,340
want this process<font color="#E5E5E5"> to exit</font><font color="#CCCCCC"> immediately we</font>

82
00:04:26,990 --> 00:04:37,250
want to keep<font color="#E5E5E5"> their lives or we're just</font>

83
00:04:28,340 --> 00:04:39,229
<font color="#E5E5E5">gonna lock and standard in yeah and then</font>

84
00:04:37,250 --> 00:04:42,290
we're<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> write this code that</font><font color="#CCCCCC"> we want</font>

85
00:04:39,230 --> 00:04:45,470
to<font color="#E5E5E5"> inject</font><font color="#CCCCCC"> so we write the new start a</font>

86
00:04:42,290 --> 00:04:48,130
new<font color="#E5E5E5"> file explorer</font><font color="#CCCCCC"> J s here</font><font color="#E5E5E5"> and we know</font>

87
00:04:45,470 --> 00:04:51,290
we<font color="#CCCCCC"> have a function at this address</font><font color="#E5E5E5"> here</font>

88
00:04:48,130 --> 00:04:53,990
<font color="#CCCCCC">so we're</font><font color="#E5E5E5"> gonna now hook it's created in</font>

89
00:04:51,290 --> 00:04:55,610
land hook so we get a<font color="#CCCCCC"> callback and keep</font>

90
00:04:53,990 --> 00:04:57,350
in<font color="#CCCCCC"> mind</font><font color="#E5E5E5"> that this</font><font color="#CCCCCC"> JavaScript is</font><font color="#E5E5E5"> going to</font>

91
00:04:55,610 --> 00:05:00,200
be loaded<font color="#CCCCCC"> inside</font><font color="#E5E5E5"> the other process so we</font>

92
00:04:57,350 --> 00:05:02,030
have full<font color="#CCCCCC"> access to memory and it's</font>

93
00:05:00,200 --> 00:05:05,060
called synchronously so we can<font color="#E5E5E5"> I even</font>

94
00:05:02,030 --> 00:05:06,020
change things but I'll get to<font color="#CCCCCC"> that so</font>

95
00:05:05,060 --> 00:05:10,010
we're using<font color="#CCCCCC"> eight the I called</font>

96
00:05:06,020 --> 00:05:12,710
interceptor<font color="#CCCCCC"> we tell</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> to attach</font><font color="#E5E5E5"> we give</font>

97
00:05:10,010 --> 00:05:14,090
it a pointer to<font color="#E5E5E5"> the function</font><font color="#CCCCCC"> it can be</font>

98
00:05:12,710 --> 00:05:16,489
any function<font color="#E5E5E5"> in memory doesn't have to</font>

99
00:05:14,090 --> 00:05:17,750
be exported all you<font color="#E5E5E5"> need to know is the</font>

100
00:05:16,490 --> 00:05:19,520
address he doesn't<font color="#E5E5E5"> even need to</font><font color="#CCCCCC"> know the</font>

101
00:05:17,750 --> 00:05:22,610
ABI<font color="#CCCCCC"> and number of</font><font color="#E5E5E5"> arguments</font><font color="#CCCCCC"> or anything</font>

102
00:05:19,520 --> 00:05:27,140
<font color="#E5E5E5">and we're going to define</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> on enter</font>

103
00:05:22,610 --> 00:05:31,730
<font color="#CCCCCC">and this gives us axis</font><font color="#E5E5E5"> the argument</font>

104
00:05:27,140 --> 00:05:36,229
access to the arguments so we can just<font color="#E5E5E5"> F</font>

105
00:05:31,730 --> 00:05:38,900
was called and then we could print<font color="#E5E5E5"> out</font>

106
00:05:36,230 --> 00:05:55,750
<font color="#E5E5E5">the argument the first</font><font color="#CCCCCC"> argument hasn't</font>

107
00:05:38,900 --> 00:05:57,510
<font color="#E5E5E5">in 32</font><font color="#CCCCCC"> and now now run this</font><font color="#E5E5E5"> and hopefully</font>

108
00:05:55,750 --> 00:06:00,990
<font color="#E5E5E5">yeah</font>

109
00:05:57,510 --> 00:06:03,180
so you see we're logging<font color="#CCCCCC"> f was</font><font color="#E5E5E5"> called</font>

110
00:06:00,990 --> 00:06:09,300
<font color="#E5E5E5">and the number of it so we're taking the</font>

111
00:06:03,180 --> 00:06:14,460
argument that<font color="#CCCCCC"> we're printing</font><font color="#E5E5E5"> it out okay</font>

112
00:06:09,300 --> 00:06:15,840
<font color="#E5E5E5">so what I</font><font color="#CCCCCC"> did</font><font color="#E5E5E5"> now it's yeah we'll figure</font>

113
00:06:14,460 --> 00:06:20,549
out<font color="#E5E5E5"> what the argument is</font>

114
00:06:15,840 --> 00:06:23,010
but anyway<font color="#E5E5E5"> it's that we have to write</font>

115
00:06:20,550 --> 00:06:26,190
this<font color="#E5E5E5"> Python this Python code is probably</font>

116
00:06:23,010 --> 00:06:27,990
<font color="#E5E5E5">a bit it's make sense if you're writing</font>

117
00:06:26,190 --> 00:06:29,700
a tool but maybe it's overkill for<font color="#E5E5E5"> this</font>

118
00:06:27,990 --> 00:06:32,270
example so we could use the<font color="#E5E5E5"> raffle at</font>

119
00:06:29,700 --> 00:06:37,680
<font color="#CCCCCC">Frida house so</font><font color="#E5E5E5"> you just you run Frida</font>

120
00:06:32,270 --> 00:06:41,370
<font color="#CCCCCC">and oops the name</font><font color="#E5E5E5"> of the process and a</font>

121
00:06:37,680 --> 00:06:44,460
script to load and here it is it's

122
00:06:41,370 --> 00:06:50,480
running<font color="#E5E5E5"> and the cool</font><font color="#CCCCCC"> thing now</font><font color="#E5E5E5"> is that</font>

123
00:06:44,460 --> 00:07:00,479
<font color="#E5E5E5">we</font><font color="#CCCCCC"> can actually go in here and change</font>

124
00:06:50,480 --> 00:07:03,060
the code<font color="#CCCCCC"> f was called</font><font color="#E5E5E5"> and save and it's</font>

125
00:07:00,480 --> 00:07:04,710
instantly updated so you can actually

126
00:07:03,060 --> 00:07:08,520
<font color="#E5E5E5">change things live</font>

127
00:07:04,710 --> 00:07:10,320
and when these scripts get unloaded<font color="#CCCCCC"> it</font>

128
00:07:08,520 --> 00:07:12,210
will revert all the hooks in memory and

129
00:07:10,320 --> 00:07:14,219
then when it loads again it's gonna

130
00:07:12,210 --> 00:07:18,770
apply new ones so that's<font color="#E5E5E5"> why that's how</font>

131
00:07:14,220 --> 00:07:21,030
you can like dynamically<font color="#CCCCCC"> explore well</font>

132
00:07:18,770 --> 00:07:22,469
observe things and realize you need to

133
00:07:21,030 --> 00:07:27,090
add<font color="#E5E5E5"> more logging in a certain way</font><font color="#CCCCCC"> and so</font>

134
00:07:22,470 --> 00:07:29,100
but this<font color="#E5E5E5"> is what's really easy now in</font>

135
00:07:27,090 --> 00:07:30,960
without you<font color="#E5E5E5"> Frida but I'm just showing</font>

136
00:07:29,100 --> 00:07:38,580
<font color="#CCCCCC">you</font><font color="#E5E5E5"> how how you would do it from the</font>

137
00:07:30,960 --> 00:07:41,640
bare metal<font color="#CCCCCC"> and yeah</font><font color="#E5E5E5"> I reloads another</font>

138
00:07:38,580 --> 00:07:45,659
thing you might want to do is we<font color="#E5E5E5"> could</font>

139
00:07:41,640 --> 00:07:50,010
change the argument<font color="#E5E5E5"> so</font><font color="#CCCCCC"> arg0</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> find a</font>

140
00:07:45,660 --> 00:07:54,240
pointer<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we could assign how about</font>

141
00:07:50,010 --> 00:07:56,280
1337 and if I do<font color="#E5E5E5"> that you</font><font color="#CCCCCC"> see that it</font>

142
00:07:54,240 --> 00:07:58,680
changes on the right now because<font color="#E5E5E5"> now</font>

143
00:07:56,280 --> 00:08:04,619
they function observes a new a<font color="#CCCCCC"> new</font>

144
00:07:58,680 --> 00:08:08,099
argument<font color="#E5E5E5"> and you could also yeah</font><font color="#CCCCCC"> of</font>

145
00:08:04,620 --> 00:08:15,629
course<font color="#CCCCCC"> take</font><font color="#E5E5E5"> the original</font><font color="#CCCCCC"> argument</font>

146
00:08:08,099 --> 00:08:25,180
and at<font color="#CCCCCC"> 9,000</font><font color="#E5E5E5"> - oops</font>

147
00:08:15,629 --> 00:08:28,960
captain yeah<font color="#CCCCCC"> pointer there we</font><font color="#E5E5E5"> go now the</font>

148
00:08:25,180 --> 00:08:30,400
<font color="#E5E5E5">number</font><font color="#CCCCCC"> permitted by 9000</font><font color="#E5E5E5"> we can remove</font>

149
00:08:28,960 --> 00:08:32,649
it<font color="#CCCCCC"> and it's back to normal</font>

150
00:08:30,400 --> 00:08:33,939
<font color="#CCCCCC">yes actually we're just modifying it</font>

151
00:08:32,649 --> 00:08:35,919
when it's calling the<font color="#E5E5E5"> function or</font>

152
00:08:33,940 --> 00:08:38,560
modifying the original<font color="#E5E5E5"> value on the</font>

153
00:08:35,919 --> 00:08:43,529
stack<font color="#E5E5E5"> of the coiler function that's why</font>

154
00:08:38,559 --> 00:08:45,729
it's back to normal<font color="#CCCCCC"> when I River</font><font color="#E5E5E5"> and</font>

155
00:08:43,529 --> 00:08:48,279
another thing is you can also replace

156
00:08:45,730 --> 00:08:50,560
functions<font color="#CCCCCC"> so in this case we know we</font>

157
00:08:48,279 --> 00:08:53,350
<font color="#CCCCCC">don't really</font><font color="#E5E5E5"> know this program</font><font color="#CCCCCC"> that</font>

158
00:08:50,560 --> 00:08:56,560
<font color="#CCCCCC">we're playing around</font><font color="#E5E5E5"> with so we know</font>

159
00:08:53,350 --> 00:08:59,290
that it's calling sleep<font color="#E5E5E5"> so we could then</font>

160
00:08:56,560 --> 00:09:02,410
<font color="#CCCCCC">go ahead an interceptor replace instead</font>

161
00:08:59,290 --> 00:09:08,500
and we need to find<font color="#E5E5E5"> the</font><font color="#CCCCCC"> address of the</font>

162
00:09:02,410 --> 00:09:12,790
sleep<font color="#E5E5E5"> function so we do mode you'll find</font>

163
00:09:08,500 --> 00:09:14,949
expert by name sleep and we need to now

164
00:09:12,790 --> 00:09:17,589
replace with something<font color="#E5E5E5"> so we need to</font>

165
00:09:14,949 --> 00:09:19,390
come to new native<font color="#CCCCCC"> callback that</font><font color="#E5E5E5"> will</font>

166
00:09:17,589 --> 00:09:21,699
allow<font color="#E5E5E5"> us to</font><font color="#CCCCCC"> get a callback from native</font>

167
00:09:19,390 --> 00:09:24,310
code<font color="#E5E5E5"> we just</font><font color="#CCCCCC"> need to declare the</font>

168
00:09:21,699 --> 00:09:30,569
signature and looking at the

169
00:09:24,310 --> 00:09:30,569
documentation of sleep<font color="#E5E5E5"> oops wrong one</font>

170
00:09:30,850 --> 00:09:37,170
it's returns to<font color="#E5E5E5"> you int and accept see</font>

171
00:09:34,180 --> 00:09:37,170
you in okay fine

172
00:09:38,160 --> 00:09:43,589
so we specify the argument the return

173
00:09:41,140 --> 00:09:48,640
type and<font color="#E5E5E5"> then an array of argument types</font>

174
00:09:43,589 --> 00:09:50,980
and here instead of actually we could

175
00:09:48,640 --> 00:09:53,980
call the<font color="#CCCCCC"> original sleep</font><font color="#E5E5E5"> but we</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> use</font>

176
00:09:50,980 --> 00:09:56,649
<font color="#E5E5E5">free does API to just sleep say 50</font>

177
00:09:53,980 --> 00:09:58,390
milliseconds whatever<font color="#E5E5E5"> whatever it's</font>

178
00:09:56,649 --> 00:10:01,209
given<font color="#CCCCCC"> its gonna</font><font color="#E5E5E5"> see 50 milliseconds</font>

179
00:09:58,390 --> 00:10:05,560
<font color="#E5E5E5">instead and if you pay attention</font><font color="#CCCCCC"> on the</font>

180
00:10:01,209 --> 00:10:11,140
right now when I save this<font color="#CCCCCC"> whoops</font>

181
00:10:05,560 --> 00:10:15,040
there's a typo yeah<font color="#E5E5E5"> interceptor</font>

182
00:10:11,140 --> 00:10:16,819
<font color="#E5E5E5">okay and now speeding up now we are</font>

183
00:10:15,040 --> 00:10:22,310
<font color="#E5E5E5">replacing sleep with our own</font>

184
00:10:16,820 --> 00:10:29,180
implementation we can<font color="#E5E5E5"> save it again and</font>

185
00:10:22,310 --> 00:10:32,060
<font color="#E5E5E5">it's back to normal and another thing</font>

186
00:10:29,180 --> 00:10:35,270
<font color="#CCCCCC">you might want to do is just a tip the</font>

187
00:10:32,060 --> 00:10:37,459
<font color="#E5E5E5">effect for fasting or interacting with</font>

188
00:10:35,270 --> 00:10:40,760
internal API is<font color="#CCCCCC"> that you can go</font><font color="#E5E5E5"> to call</font>

189
00:10:37,460 --> 00:10:43,250
<font color="#E5E5E5">functions so we could do a new native</font>

190
00:10:40,760 --> 00:10:44,900
function and we know<font color="#E5E5E5"> the</font><font color="#CCCCCC"> address of</font><font color="#E5E5E5"> the</font>

191
00:10:43,250 --> 00:10:46,460
function<font color="#CCCCCC"> because we print</font><font color="#E5E5E5"> it out in the</font>

192
00:10:44,900 --> 00:10:48,230
beginning<font color="#CCCCCC"> here</font><font color="#E5E5E5"> we could also use free</font>

193
00:10:46,460 --> 00:10:52,190
<font color="#E5E5E5">this API is to resolve this other ways</font>

194
00:10:48,230 --> 00:10:54,529
<font color="#E5E5E5">and we're gonna say</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> return type is</font>

195
00:10:52,190 --> 00:11:00,710
void<font color="#E5E5E5"> and has one in that's not arguing</font>

196
00:10:54,529 --> 00:11:07,279
or actually yanan and<font color="#E5E5E5"> we can just call</font>

197
00:11:00,710 --> 00:11:09,800
<font color="#CCCCCC">it say</font><font color="#E5E5E5"> yeah five times and if we scroll</font>

198
00:11:07,279 --> 00:11:15,200
<font color="#CCCCCC">to the bottom here and</font><font color="#E5E5E5"> I run this now</font>

199
00:11:09,800 --> 00:11:17,240
<font color="#E5E5E5">yeah you see five calls happen there so</font>

200
00:11:15,200 --> 00:11:22,570
this way you can<font color="#E5E5E5"> yeah you</font><font color="#CCCCCC"> can call into</font>

201
00:11:17,240 --> 00:11:22,570
<font color="#E5E5E5">API that's available to</font><font color="#CCCCCC"> this process and</font>

202
00:11:22,780 --> 00:11:26,660
yeah that's on there's ways you<font color="#CCCCCC"> can</font>

203
00:11:25,250 --> 00:11:27,970
communicate<font color="#CCCCCC"> with these</font><font color="#E5E5E5"> scripts but I'm</font>

204
00:11:26,660 --> 00:11:31,250
<font color="#CCCCCC">just gonna</font><font color="#E5E5E5"> cover that I guess</font>

205
00:11:27,970 --> 00:11:33,110
documentation covers as well<font color="#E5E5E5"> already</font><font color="#CCCCCC"> but</font>

206
00:11:31,250 --> 00:11:37,750
one thing I<font color="#CCCCCC"> should probably mention is</font>

207
00:11:33,110 --> 00:11:41,720
that you<font color="#CCCCCC"> can also interact with with</font>

208
00:11:37,750 --> 00:11:42,440
Objective C and<font color="#E5E5E5"> Java API is as fresh as</font>

209
00:11:41,720 --> 00:11:46,510
<font color="#E5E5E5">you said yesterday</font>

210
00:11:42,440 --> 00:11:46,510
<font color="#E5E5E5">so I'm just going</font><font color="#CCCCCC"> to show you</font>

211
00:11:54,089 --> 00:12:02,980
yeah let's use more interesting

212
00:11:57,069 --> 00:12:05,949
application like Twitter and<font color="#CCCCCC"> the organ</font>

213
00:12:02,980 --> 00:12:08,350
is the<font color="#CCCCCC"> rapper ologist and you</font><font color="#E5E5E5"> have like</font>

214
00:12:05,949 --> 00:12:09,609
objects<font color="#E5E5E5"> obviously classes stuff and so</font>

215
00:12:08,350 --> 00:12:13,689
on

216
00:12:09,610 --> 00:12:15,579
to access the classes in memory<font color="#E5E5E5"> and now</font>

217
00:12:13,689 --> 00:12:17,349
another<font color="#E5E5E5"> thing we could do is like for</font>

218
00:12:15,579 --> 00:12:20,920
example<font color="#E5E5E5"> we could see what kind of files</font>

219
00:12:17,350 --> 00:12:35,910
<font color="#E5E5E5">this application is opening by attaching</font>

220
00:12:20,920 --> 00:12:35,910
to<font color="#E5E5E5"> in to the open function arguments and</font>

221
00:12:36,540 --> 00:12:46,420
<font color="#CCCCCC">print out open and we can</font><font color="#E5E5E5"> now use</font>

222
00:12:43,749 --> 00:12:48,339
another API to read create the first

223
00:12:46,420 --> 00:12:52,259
argument<font color="#E5E5E5"> it's a pointer but we treated</font>

224
00:12:48,339 --> 00:12:52,259
as a we can read it out as a string

225
00:12:59,120 --> 00:13:09,960
oops<font color="#E5E5E5"> yeah and now if I retract with it</font>

226
00:13:03,690 --> 00:13:15,210
you'll see<font color="#CCCCCC"> that is calling</font><font color="#E5E5E5"> them a bunch</font>

227
00:13:09,960 --> 00:13:20,970
of times<font color="#E5E5E5"> here and now I was going to</font>

228
00:13:15,210 --> 00:13:25,290
show you<font color="#E5E5E5"> actually that we can also call</font>

229
00:13:20,970 --> 00:13:33,510
<font color="#CCCCCC">Objective C api's</font><font color="#E5E5E5"> so there's like</font>

230
00:13:25,290 --> 00:13:37,050
<font color="#E5E5E5">obviously classes how about there's an</font>

231
00:13:33,510 --> 00:13:39,290
NS speech synthesizer API<font color="#E5E5E5"> okay sounds</font>

232
00:13:37,050 --> 00:13:39,290
<font color="#E5E5E5">fun</font>

233
00:13:47,340 --> 00:13:54,420
<font color="#E5E5E5">okay and we're interacting with</font>

234
00:13:52,320 --> 00:14:00,630
<font color="#E5E5E5">objective-c code so we should have an NS</font>

235
00:13:54,420 --> 00:14:02,699
order release pool actually<font color="#CCCCCC"> we can</font>

236
00:14:00,630 --> 00:14:12,030
simplify that we can just<font color="#CCCCCC"> you obvious</font>

237
00:14:02,700 --> 00:14:16,860
<font color="#E5E5E5">noise yeah we can do</font><font color="#CCCCCC"> that sorry change</font>

238
00:14:12,030 --> 00:14:20,819
<font color="#E5E5E5">my my</font><font color="#CCCCCC"> yeah well do this so gonna do it</font>

239
00:14:16,860 --> 00:14:23,900
take the NS auto-release pool<font color="#CCCCCC"> lock it</font><font color="#E5E5E5"> in</font>

240
00:14:20,820 --> 00:14:26,960
it and then we're<font color="#E5E5E5"> gonna release</font><font color="#CCCCCC"> it</font>

241
00:14:23,900 --> 00:14:29,160
between here we can actually call<font color="#CCCCCC"> AP ice</font>

242
00:14:26,960 --> 00:14:31,560
<font color="#CCCCCC">you wouldn't have to do this if you did</font>

243
00:14:29,160 --> 00:14:33,780
<font color="#CCCCCC">obviously schedule on the main queue to</font>

244
00:14:31,560 --> 00:14:36,180
write to<font color="#CCCCCC"> schedules on code on the main</font>

245
00:14:33,780 --> 00:14:39,329
thread<font color="#E5E5E5"> but here we just need to set up</font>

246
00:14:36,180 --> 00:14:49,469
<font color="#E5E5E5">an object once and we can</font><font color="#CCCCCC"> use it so</font><font color="#E5E5E5"> we</font>

247
00:14:39,330 --> 00:14:53,570
want<font color="#E5E5E5"> to create our synthesizer</font><font color="#CCCCCC"> we look</font>

248
00:14:49,470 --> 00:14:53,570
at the<font color="#CCCCCC"> docks</font><font color="#E5E5E5"> to find out the API</font>

249
00:14:54,980 --> 00:15:03,630
<font color="#CCCCCC">actually I'm</font><font color="#E5E5E5"> gonna cheat a bit now and</font>

250
00:14:57,090 --> 00:15:13,939
look<font color="#E5E5E5"> at my notes so we don't spend too</font>

251
00:15:03,630 --> 00:15:19,649
much time on<font color="#CCCCCC"> this yeah</font><font color="#E5E5E5"> so</font>

252
00:15:13,939 --> 00:15:21,990
so we allocate an<font color="#CCCCCC"> init standard and then</font>

253
00:15:19,649 --> 00:15:26,069
we're<font color="#CCCCCC"> gonna get a voice ID</font><font color="#E5E5E5"> we want to</font>

254
00:15:21,990 --> 00:15:29,089
use<font color="#E5E5E5"> so we're just</font><font color="#CCCCCC"> going to</font><font color="#E5E5E5"> call in a</font>

255
00:15:26,069 --> 00:15:35,189
speech<font color="#CCCCCC"> synthesizer available voices</font>

256
00:15:29,089 --> 00:15:39,360
object at index<font color="#CCCCCC"> 2 for example 0 is</font>

257
00:15:35,189 --> 00:15:43,529
probably more safe<font color="#CCCCCC"> - and then we're</font>

258
00:15:39,360 --> 00:15:47,910
gonna tell the synth<font color="#E5E5E5"> to set voice voice</font>

259
00:15:43,529 --> 00:15:53,279
ID and then here when open is called to

260
00:15:47,910 --> 00:15:55,709
open a file<font color="#CCCCCC"> we can now ask the</font>

261
00:15:53,279 --> 00:16:04,889
synthesizer to start speaking something

262
00:15:55,709 --> 00:16:06,660
<font color="#E5E5E5">so self</font><font color="#CCCCCC"> start speaking string oh yeah</font>

263
00:16:04,889 --> 00:16:10,970
honey<font color="#E5E5E5"> maybe just a name of the file</font>

264
00:16:06,660 --> 00:16:10,969
extract<font color="#CCCCCC"> out in the</font><font color="#E5E5E5"> variable here</font>

265
00:16:15,520 --> 00:16:55,300
<font color="#E5E5E5">okay that's enough okay so that's the</font>

266
00:16:49,390 --> 00:16:56,800
<font color="#CCCCCC">frita basics onto the torque and yeah</font>

267
00:16:55,300 --> 00:16:59,740
I'm going to<font color="#E5E5E5"> talk about an API that's</font>

268
00:16:56,800 --> 00:17:02,709
<font color="#CCCCCC">been in Frieda for a long time it's a</font>

269
00:16:59,740 --> 00:17:05,260
<font color="#E5E5E5">cold stalker</font><font color="#CCCCCC"> it's all about code tracing</font>

270
00:17:02,710 --> 00:17:07,270
<font color="#E5E5E5">so what we get just before now is that</font>

271
00:17:05,260 --> 00:17:09,129
we we hooked with it<font color="#E5E5E5"> in line hooking</font>

272
00:17:07,270 --> 00:17:11,740
<font color="#CCCCCC">that means that the</font><font color="#E5E5E5"> original functions</font>

273
00:17:09,130 --> 00:17:13,870
are modified<font color="#E5E5E5"> you can also modify in the</font>

274
00:17:11,740 --> 00:17:18,010
middle of functions by a slightly

275
00:17:13,869 --> 00:17:19,569
<font color="#E5E5E5">different syntax but but essentially</font>

276
00:17:18,010 --> 00:17:21,430
you're<font color="#E5E5E5"> modifying the code in memory and</font>

277
00:17:19,569 --> 00:17:24,458
any<font color="#E5E5E5"> threat that's calling that code get</font>

278
00:17:21,430 --> 00:17:28,870
trapped or go into JavaScript or do what

279
00:17:24,459 --> 00:17:31,150
we want<font color="#CCCCCC"> but sometimes you might not</font><font color="#E5E5E5"> want</font>

280
00:17:28,870 --> 00:17:33,219
to do that<font color="#CCCCCC"> actually you don't</font><font color="#E5E5E5"> know what</font>

281
00:17:31,150 --> 00:17:35,680
kind of API is<font color="#E5E5E5"> are being used or what</font>

282
00:17:33,220 --> 00:17:37,960
code is<font color="#E5E5E5"> being used that's a use case for</font>

283
00:17:35,680 --> 00:17:39,250
stalker<font color="#CCCCCC"> which has some other nice</font>

284
00:17:37,960 --> 00:17:41,380
properties like not actually touching

285
00:17:39,250 --> 00:17:46,990
<font color="#CCCCCC">the code in memory so it's more stealth</font>

286
00:17:41,380 --> 00:17:48,280
<font color="#E5E5E5">in that sense</font><font color="#CCCCCC"> and there's how this</font>

287
00:17:46,990 --> 00:17:50,560
started<font color="#E5E5E5"> was</font><font color="#CCCCCC"> that I was reverse</font>

288
00:17:48,280 --> 00:17:52,540
engineering<font color="#CCCCCC"> Apple stuff</font><font color="#E5E5E5"> and they had a</font>

289
00:17:50,560 --> 00:17:55,120
nasty obfuscation scheme and I wanted

290
00:17:52,540 --> 00:17:57,940
<font color="#E5E5E5">the code tracer and the existing ones</font>

291
00:17:55,120 --> 00:18:00,330
were slow<font color="#E5E5E5"> so I wanted to avoid this</font>

292
00:17:57,940 --> 00:18:02,020
<font color="#CCCCCC">whole context switch</font><font color="#E5E5E5"> dance between</font><font color="#CCCCCC"> the</font>

293
00:18:00,330 --> 00:18:04,389
<font color="#CCCCCC">debugger</font><font color="#E5E5E5"> and the</font><font color="#CCCCCC"> debugger</font>

294
00:18:02,020 --> 00:18:07,330
<font color="#CCCCCC">I just wanted to do</font><font color="#E5E5E5"> it tracing in in</font>

295
00:18:04,390 --> 00:18:10,170
process<font color="#E5E5E5"> like pin and</font><font color="#CCCCCC"> annamaria but</font>

296
00:18:07,330 --> 00:18:13,689
actually<font color="#E5E5E5"> script suitable from JavaScript</font>

297
00:18:10,170 --> 00:18:16,660
<font color="#CCCCCC">and there should</font><font color="#E5E5E5"> be identical side</font>

298
00:18:13,690 --> 00:18:19,210
<font color="#E5E5E5">effects so that the program wouldn't be</font>

299
00:18:16,660 --> 00:18:20,710
able<font color="#E5E5E5"> to tell</font><font color="#CCCCCC"> that it's</font><font color="#E5E5E5"> not actually the</font>

300
00:18:19,210 --> 00:18:22,720
<font color="#CCCCCC">original code that's running because it</font>

301
00:18:20,710 --> 00:18:24,130
would<font color="#E5E5E5"> take the next instructions that</font>

302
00:18:22,720 --> 00:18:26,020
are<font color="#E5E5E5"> about to run I'm gonna explain this</font>

303
00:18:24,130 --> 00:18:27,350
more in detail<font color="#CCCCCC"> later but take the next</font>

304
00:18:26,020 --> 00:18:29,480
instructions and

305
00:18:27,350 --> 00:18:31,459
we<font color="#E5E5E5"> compile them dynamically to add the</font>

306
00:18:29,480 --> 00:18:32,870
instrumentation between them and but

307
00:18:31,460 --> 00:18:34,880
making sure<font color="#CCCCCC"> that they have the same side</font>

308
00:18:32,870 --> 00:18:36,229
effects<font color="#E5E5E5"> so if you're calling</font><font color="#CCCCCC"> your phone</font>

309
00:18:34,880 --> 00:18:38,210
<font color="#E5E5E5">if there is of call and</font><font color="#CCCCCC"> it will actually</font>

310
00:18:36,230 --> 00:18:40,400
<font color="#E5E5E5">push the same address on the on the</font>

311
00:18:38,210 --> 00:18:42,020
stack on x86<font color="#E5E5E5"> as if the original</font><font color="#CCCCCC"> code</font>

312
00:18:40,400 --> 00:18:44,350
have been<font color="#E5E5E5"> running</font><font color="#CCCCCC"> even</font><font color="#E5E5E5"> if the code</font>

313
00:18:42,020 --> 00:18:46,129
<font color="#E5E5E5">running is somewhere else in memory and</font>

314
00:18:44,350 --> 00:18:47,870
of course this<font color="#CCCCCC"> should be high</font>

315
00:18:46,130 --> 00:18:49,370
granularity<font color="#E5E5E5"> so you can actually combine</font>

316
00:18:47,870 --> 00:18:51,799
<font color="#E5E5E5">this with the inline hooking</font><font color="#CCCCCC"> that you</font>

317
00:18:49,370 --> 00:18:53,360
saw earlier<font color="#CCCCCC"> so we could whenever a</font>

318
00:18:51,799 --> 00:18:54,860
function<font color="#E5E5E5"> is called a certain function</font>

319
00:18:53,360 --> 00:18:56,780
<font color="#CCCCCC">that you know about</font><font color="#E5E5E5"> is called</font><font color="#CCCCCC"> you could</font>

320
00:18:54,860 --> 00:18:59,899
start tracing<font color="#E5E5E5"> from that point on until</font>

321
00:18:56,780 --> 00:19:02,570
it until it's<font color="#E5E5E5"> leaving that function that</font>

322
00:18:59,900 --> 00:19:04,669
<font color="#CCCCCC">way you can take an interesting private</font>

323
00:19:02,570 --> 00:19:06,789
<font color="#E5E5E5">API on an apple platform for</font><font color="#CCCCCC"> example and</font>

324
00:19:04,669 --> 00:19:09,350
<font color="#CCCCCC">just start stalking for that point and</font>

325
00:19:06,789 --> 00:19:11,840
and<font color="#CCCCCC"> you'll know</font><font color="#E5E5E5"> all the API</font><font color="#CCCCCC"> sits using</font>

326
00:19:09,350 --> 00:19:15,620
under the hood<font color="#E5E5E5"> through many whichever</font>

327
00:19:11,840 --> 00:19:22,820
libraries<font color="#E5E5E5"> is using and yeah let's just</font>

328
00:19:15,620 --> 00:19:25,428
try<font color="#E5E5E5"> to use this API</font><font color="#CCCCCC"> I guess we should</font>

329
00:19:22,820 --> 00:19:28,070
use a calculator<font color="#E5E5E5"> for this</font><font color="#CCCCCC"> I don't know</font>

330
00:19:25,429 --> 00:19:33,289
why but<font color="#E5E5E5"> I also use that it's a simple</font>

331
00:19:28,070 --> 00:19:36,470
program and we're<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> write some</font>

332
00:19:33,289 --> 00:19:40,879
slightly different code now quite

333
00:19:36,470 --> 00:19:42,919
different yeah we're gonna ask<font color="#E5E5E5"> the</font>

334
00:19:40,880 --> 00:19:46,520
process API<font color="#E5E5E5"> and</font><font color="#CCCCCC"> freida at you enumerate</font>

335
00:19:42,919 --> 00:19:54,490
all the<font color="#E5E5E5"> threads</font><font color="#CCCCCC"> all the threads</font><font color="#E5E5E5"> and each</font>

336
00:19:46,520 --> 00:19:56,360
thread we're gonna<font color="#E5E5E5"> run some code okay</font>

337
00:19:54,490 --> 00:20:04,580
<font color="#E5E5E5">and then we're going</font><font color="#CCCCCC"> to do stalker</font>

338
00:19:56,360 --> 00:20:06,199
follow this thread thread ID and then

339
00:20:04,580 --> 00:20:08,178
you have to tell it what<font color="#CCCCCC"> kind of events</font>

340
00:20:06,200 --> 00:20:11,179
you're interested in<font color="#E5E5E5"> so you could say</font>

341
00:20:08,179 --> 00:20:16,370
that<font color="#E5E5E5"> you're interested</font><font color="#CCCCCC"> in all the cold</font>

342
00:20:11,179 --> 00:20:19,030
instructions for example and then<font color="#E5E5E5"> you</font>

343
00:20:16,370 --> 00:20:23,809
have two<font color="#CCCCCC"> options you could get a</font>

344
00:20:19,030 --> 00:20:26,870
periodic dump of all the calls that

345
00:20:23,809 --> 00:20:28,370
<font color="#CCCCCC">happen all the function calls that's a</font>

346
00:20:26,870 --> 00:20:30,949
lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> data</font><font color="#CCCCCC"> but do</font><font color="#E5E5E5"> you get to them in</font>

347
00:20:28,370 --> 00:20:33,229
sequence<font color="#E5E5E5"> so and you also have the depth</font>

348
00:20:30,950 --> 00:20:34,549
of the calls and so on<font color="#CCCCCC"> and you have</font>

349
00:20:33,230 --> 00:20:36,590
<font color="#E5E5E5">another way which is</font><font color="#CCCCCC"> like a summary</font>

350
00:20:34,549 --> 00:20:38,929
which just tells<font color="#E5E5E5"> you the targets and the</font>

351
00:20:36,590 --> 00:20:40,189
number of times each was called<font color="#E5E5E5"> we could</font>

352
00:20:38,929 --> 00:20:43,310
start<font color="#E5E5E5"> with</font><font color="#CCCCCC"> a</font>

353
00:20:40,190 --> 00:20:45,350
<font color="#CCCCCC">than one</font><font color="#E5E5E5"> that's very verbose</font><font color="#CCCCCC"> so you</font>

354
00:20:43,310 --> 00:20:51,560
implement<font color="#E5E5E5"> on receive and you get some</font>

355
00:20:45,350 --> 00:20:55,850
more<font color="#E5E5E5"> events</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> and then this is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> raw</font>

356
00:20:51,560 --> 00:20:58,639
data<font color="#CCCCCC"> so binary</font><font color="#E5E5E5"> data so you could save it</font>

357
00:20:55,850 --> 00:21:00,110
for offline<font color="#E5E5E5"> parsing later or we could</font>

358
00:20:58,640 --> 00:21:04,100
parse it right away

359
00:21:00,110 --> 00:21:10,909
this so we parse them and now we can do

360
00:21:04,100 --> 00:21:12,639
for<font color="#CCCCCC"> each event maybe it's actually a</font>

361
00:21:10,910 --> 00:21:14,690
dumb thing<font color="#E5E5E5"> to do</font>

362
00:21:12,640 --> 00:21:18,020
<font color="#CCCCCC">esperate just comes to log the whole</font>

363
00:21:14,690 --> 00:21:22,700
thing<font color="#CCCCCC"> can be hard to read anyway</font><font color="#E5E5E5"> but</font>

364
00:21:18,020 --> 00:21:25,610
this this will be<font color="#E5E5E5"> faster so we're gonna</font>

365
00:21:22,700 --> 00:21:28,160
<font color="#E5E5E5">numerate all the</font><font color="#CCCCCC"> threads</font><font color="#E5E5E5"> follow each of</font>

366
00:21:25,610 --> 00:21:30,379
them and say that we're interested<font color="#E5E5E5"> in</font>

367
00:21:28,160 --> 00:21:41,510
<font color="#CCCCCC">call instructions and then every time we</font>

368
00:21:30,380 --> 00:21:44,390
get a batch we just<font color="#CCCCCC"> display it okay we</font>

369
00:21:41,510 --> 00:21:49,220
want to load<font color="#CCCCCC"> into calculator this script</font>

370
00:21:44,390 --> 00:21:50,410
here<font color="#E5E5E5"> okay and</font><font color="#CCCCCC"> I fell in fact</font><font color="#E5E5E5"> yeah there</font>

371
00:21:49,220 --> 00:21:54,980
we go

372
00:21:50,410 --> 00:21:58,790
the first batch<font color="#E5E5E5"> so you'll see you get</font>

373
00:21:54,980 --> 00:22:00,770
the type of the event<font color="#E5E5E5"> call you have</font><font color="#CCCCCC"> the</font>

374
00:21:58,790 --> 00:22:03,080
where the call is<font color="#CCCCCC"> in memory and the</font>

375
00:22:00,770 --> 00:22:05,540
target<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the call</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> the depth of the</font>

376
00:22:03,080 --> 00:22:14,270
stack<font color="#CCCCCC"> so you could then visualize this</font>

377
00:22:05,540 --> 00:22:16,010
and a lot of data though yeah<font color="#CCCCCC"> you can</font>

378
00:22:14,270 --> 00:22:19,340
actually use the application while it's

379
00:22:16,010 --> 00:22:22,040
tracing it<font color="#E5E5E5"> there is one thing to note</font>

380
00:22:19,340 --> 00:22:27,350
though that<font color="#E5E5E5"> this produces a lot of data</font>

381
00:22:22,040 --> 00:22:31,629
<font color="#E5E5E5">so you have on the story we have</font><font color="#CCCCCC"> a huge</font>

382
00:22:27,350 --> 00:22:38,199
<font color="#CCCCCC">size thing I forgot</font><font color="#E5E5E5"> let's go</font>

383
00:22:31,630 --> 00:22:42,290
here's API reference you huge capacity

384
00:22:38,200 --> 00:22:44,570
<font color="#CCCCCC">and that the</font><font color="#E5E5E5"> force</font><font color="#CCCCCC"> 216 384</font><font color="#E5E5E5"> event so you</font>

385
00:22:42,290 --> 00:22:47,300
can<font color="#E5E5E5"> bump that</font><font color="#CCCCCC"> if you need if you want</font><font color="#E5E5E5"> to</font>

386
00:22:44,570 --> 00:22:49,550
use more<font color="#E5E5E5"> memory and</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> just look if</font>

387
00:22:47,300 --> 00:22:51,980
the events you<font color="#CCCCCC"> got</font><font color="#E5E5E5"> there if you got 16</font>

388
00:22:49,550 --> 00:22:53,270
<font color="#E5E5E5">384 it means</font><font color="#CCCCCC"> it's probably good</font><font color="#E5E5E5"> it's</font>

389
00:22:51,980 --> 00:22:54,080
<font color="#E5E5E5">probably overflowed and you should set a</font>

390
00:22:53,270 --> 00:22:56,440
high

391
00:22:54,080 --> 00:22:59,928
and you can also control<font color="#CCCCCC"> how often</font><font color="#E5E5E5"> this</font>

392
00:22:56,440 --> 00:23:01,970
<font color="#E5E5E5">these events are drained</font><font color="#CCCCCC"> given to you</font>

393
00:22:59,929 --> 00:23:07,640
but<font color="#E5E5E5"> by default it's four</font><font color="#CCCCCC"> times per</font>

394
00:23:01,970 --> 00:23:11,059
second<font color="#E5E5E5"> okay so that's more or less the</font>

395
00:23:07,640 --> 00:23:14,059
<font color="#E5E5E5">basic</font><font color="#CCCCCC"> stalker API you</font><font color="#E5E5E5"> have all the</font>

396
00:23:11,059 --> 00:23:17,030
events<font color="#E5E5E5"> so you can notify</font><font color="#CCCCCC"> local</font>

397
00:23:14,059 --> 00:23:20,149
<font color="#E5E5E5">instructions</font><font color="#CCCCCC"> write instructions except</font>

398
00:23:17,030 --> 00:23:22,129
for every single<font color="#E5E5E5"> instruction you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> a</font>

399
00:23:20,150 --> 00:23:24,320
block which is<font color="#E5E5E5"> basic block level and</font>

400
00:23:22,130 --> 00:23:26,299
there you have compiled which is only

401
00:23:24,320 --> 00:23:28,220
the<font color="#CCCCCC"> first</font><font color="#E5E5E5"> time things well the first</font>

402
00:23:26,299 --> 00:23:32,870
time thinks something is compiled<font color="#E5E5E5"> so you</font>

403
00:23:28,220 --> 00:23:34,870
can use that for coverage<font color="#CCCCCC"> and yeah you</font>

404
00:23:32,870 --> 00:23:37,370
<font color="#E5E5E5">have one more feature and that's</font>

405
00:23:34,870 --> 00:23:41,719
something called<font color="#CCCCCC"> crawl probes</font><font color="#E5E5E5"> so you can</font>

406
00:23:37,370 --> 00:23:43,610
say<font color="#E5E5E5"> for the</font><font color="#CCCCCC"> a given called target get a</font>

407
00:23:41,720 --> 00:23:46,220
synchronous call back so you can look at

408
00:23:43,610 --> 00:23:48,428
<font color="#E5E5E5">the arguments and things like that and</font>

409
00:23:46,220 --> 00:23:50,480
I'm just<font color="#CCCCCC"> going to show</font><font color="#E5E5E5"> you a</font>

410
00:23:48,429 --> 00:23:53,299
<font color="#CCCCCC">proof-of-concept application built on</font>

411
00:23:50,480 --> 00:23:54,830
top of a traditional store<font color="#CCCCCC"> grape</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> so</font>

412
00:23:53,299 --> 00:23:57,770
we<font color="#E5E5E5"> haven't gotten to the new stuff yet</font>

413
00:23:54,830 --> 00:23:59,600
I'm<font color="#E5E5E5"> just I want</font><font color="#CCCCCC"> to read a</font><font color="#E5E5E5"> walk through</font>

414
00:23:57,770 --> 00:24:05,379
<font color="#E5E5E5">the</font><font color="#CCCCCC"> history</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> what you could do</font>

415
00:23:59,600 --> 00:24:10,549
<font color="#CCCCCC">previously so here I bought</font><font color="#E5E5E5"> a</font>

416
00:24:05,380 --> 00:24:11,960
<font color="#CCCCCC">proof-of-concept cute GUI that you could</font>

417
00:24:10,549 --> 00:24:13,460
select<font color="#E5E5E5"> the process</font><font color="#CCCCCC"> fraida gives you</font>

418
00:24:11,960 --> 00:24:17,860
access gives you a<font color="#E5E5E5"> process list that has</font>

419
00:24:13,460 --> 00:24:20,780
icons<font color="#E5E5E5"> even and then we get the threads</font>

420
00:24:17,860 --> 00:24:23,479
<font color="#E5E5E5">that we just used</font><font color="#CCCCCC"> that API so this the</font>

421
00:24:20,780 --> 00:24:25,129
same<font color="#CCCCCC"> thing is using and it's also using</font>

422
00:24:23,480 --> 00:24:27,530
<font color="#E5E5E5">Interceptor</font><font color="#CCCCCC"> attached that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> use to hook</font>

423
00:24:25,130 --> 00:24:30,610
functions earlier to hook a few

424
00:24:27,530 --> 00:24:34,520
strategic api's and then it tags these

425
00:24:30,610 --> 00:24:36,709
threads here with based on<font color="#E5E5E5"> what kind</font><font color="#CCCCCC"> of</font>

426
00:24:34,520 --> 00:24:38,179
API<font color="#E5E5E5"> is</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> calling so you could get an</font>

427
00:24:36,710 --> 00:24:40,520
<font color="#E5E5E5">idea of this thread is probably a file</font>

428
00:24:38,179 --> 00:24:44,539
and networking IPC threat and<font color="#E5E5E5"> so on and</font>

429
00:24:40,520 --> 00:24:48,918
then it<font color="#E5E5E5"> allows you</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> pick</font><font color="#E5E5E5"> a thread</font>

430
00:24:44,539 --> 00:24:51,169
and follow<font color="#CCCCCC"> which uses a stalker and then</font>

431
00:24:48,919 --> 00:24:52,610
you'll have the<font color="#CCCCCC"> coil live actually here</font>

432
00:24:51,169 --> 00:24:55,190
it's using<font color="#CCCCCC"> the call summary to get all</font>

433
00:24:52,610 --> 00:24:59,360
the summary<font color="#CCCCCC"> of the call destinations and</font>

434
00:24:55,190 --> 00:25:02,360
<font color="#CCCCCC">the</font><font color="#E5E5E5"> number of calls and and then you can</font>

435
00:24:59,360 --> 00:25:04,580
browse around<font color="#E5E5E5"> so that was the idea</font><font color="#CCCCCC"> and</font>

436
00:25:02,360 --> 00:25:07,219
then<font color="#E5E5E5"> you could add the coil probe which</font>

437
00:25:04,580 --> 00:25:10,730
is<font color="#E5E5E5"> the feature I talked about</font><font color="#CCCCCC"> in the end</font>

438
00:25:07,220 --> 00:25:14,180
and that is what you see there in the

439
00:25:10,730 --> 00:25:16,010
dump there and then you could tap<font color="#CCCCCC"> I</font>

440
00:25:14,180 --> 00:25:18,200
click on any<font color="#E5E5E5"> of those and change the</font>

441
00:25:16,010 --> 00:25:20,930
code<font color="#E5E5E5"> live so you could have like</font><font color="#CCCCCC"> you</font>

442
00:25:18,200 --> 00:25:22,280
look at arguments and yeah<font color="#CCCCCC"> so this was</font>

443
00:25:20,930 --> 00:25:23,990
<font color="#E5E5E5">like a reversing -</font><font color="#CCCCCC"> Oh Lord</font>

444
00:25:22,280 --> 00:25:25,970
the idea was to<font color="#E5E5E5"> show</font><font color="#CCCCCC"> that you</font><font color="#E5E5E5"> could</font>

445
00:25:23,990 --> 00:25:28,460
build<font color="#E5E5E5"> a camera tools it hasn't evolved</font>

446
00:25:25,970 --> 00:25:33,530
since then it just was just<font color="#CCCCCC"> a more like</font>

447
00:25:28,460 --> 00:25:35,270
a way to<font color="#E5E5E5"> show what's possible</font><font color="#CCCCCC"> I think we</font>

448
00:25:33,530 --> 00:25:36,590
should do<font color="#E5E5E5"> this I mean we should build</font>

449
00:25:35,270 --> 00:25:38,660
this kind<font color="#CCCCCC"> of cool</font><font color="#E5E5E5"> stuff</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> Frida</font>

450
00:25:36,590 --> 00:25:41,899
and<font color="#E5E5E5"> not have a hundred tools that don't</font>

451
00:25:38,660 --> 00:25:49,100
<font color="#E5E5E5">work but it's</font><font color="#CCCCCC"> just showing that it's</font>

452
00:25:41,900 --> 00:25:51,800
easy to<font color="#CCCCCC"> make</font><font color="#E5E5E5"> new tools and some weeks</font>

453
00:25:49,100 --> 00:25:57,370
before Arctic on<font color="#E5E5E5"> I was working on a bug</font>

454
00:25:51,800 --> 00:26:02,210
on<font color="#E5E5E5"> Android and I had a problem where</font>

455
00:25:57,370 --> 00:26:04,459
there was a some art the art<font color="#CCCCCC"> runtime on</font>

456
00:26:02,210 --> 00:26:06,170
<font color="#CCCCCC">Android has made internal api's</font><font color="#E5E5E5"> that's</font>

457
00:26:04,460 --> 00:26:08,870
are not exposed or they<font color="#E5E5E5"> actually four</font><font color="#CCCCCC"> of</font>

458
00:26:06,170 --> 00:26:12,830
their<font color="#CCCCCC"> in line in the</font><font color="#E5E5E5"> coal all the places</font>

459
00:26:08,870 --> 00:26:14,870
<font color="#CCCCCC">sequence plus classes temperatures but</font>

460
00:26:12,830 --> 00:26:17,540
there was<font color="#E5E5E5"> one</font><font color="#CCCCCC"> particular place in</font><font color="#E5E5E5"> the</font>

461
00:26:14,870 --> 00:26:19,010
code where there was<font color="#E5E5E5"> just one assignment</font>

462
00:26:17,540 --> 00:26:20,920
and nothing else happening so I could

463
00:26:19,010 --> 00:26:23,510
just<font color="#E5E5E5"> in theory take this function and</font>

464
00:26:20,920 --> 00:26:26,450
copy the whole contents but<font color="#CCCCCC"> I skip</font><font color="#E5E5E5"> the</font>

465
00:26:23,510 --> 00:26:27,710
construction in<font color="#E5E5E5"> the middle so if I was</font>

466
00:26:26,450 --> 00:26:29,840
<font color="#E5E5E5">thinking this</font><font color="#CCCCCC"> will be nice to</font><font color="#E5E5E5"> use</font>

467
00:26:27,710 --> 00:26:32,050
<font color="#CCCCCC">Frida's existing API is</font><font color="#E5E5E5"> for this because</font>

468
00:26:29,840 --> 00:26:34,040
it already has<font color="#E5E5E5"> API to generate code and</font>

469
00:26:32,050 --> 00:26:35,840
transform code so you<font color="#E5E5E5"> can take it from</font>

470
00:26:34,040 --> 00:26:39,379
take some code from<font color="#CCCCCC"> one location</font><font color="#E5E5E5"> in</font>

471
00:26:35,840 --> 00:26:40,790
memory<font color="#E5E5E5"> and dynamically translated so it</font>

472
00:26:39,380 --> 00:26:43,820
will<font color="#CCCCCC"> work in</font><font color="#E5E5E5"> another location</font><font color="#CCCCCC"> in memory</font>

473
00:26:40,790 --> 00:26:47,450
copy<font color="#E5E5E5"> its relocated so position dependent</font>

474
00:26:43,820 --> 00:26:53,629
instructions are adjusted<font color="#CCCCCC"> so I'm</font><font color="#E5E5E5"> just</font>

475
00:26:47,450 --> 00:26:56,710
<font color="#E5E5E5">going to show</font><font color="#CCCCCC"> that quickly so I'm</font>

476
00:26:53,630 --> 00:27:00,910
exposed to these<font color="#E5E5E5"> api's to JavaScript</font>

477
00:26:56,710 --> 00:27:00,910
<font color="#E5E5E5">it's just probably stop</font>

478
00:27:01,179 --> 00:27:14,519
and it looks a bit like this<font color="#CCCCCC"> so we could</font>

479
00:27:04,000 --> 00:27:16,390
take make have a page of memory and

480
00:27:14,519 --> 00:27:19,360
could have a code writer

481
00:27:16,390 --> 00:27:21,669
so<font color="#E5E5E5"> there's x86 writer if you're</font><font color="#CCCCCC"> in x86</font>

482
00:27:19,360 --> 00:27:31,360
that<font color="#E5E5E5"> arm 64</font><font color="#CCCCCC"> writer if you're an arm 64</font>

483
00:27:21,669 --> 00:27:42,610
processor song and now we can say we

484
00:27:31,360 --> 00:27:46,809
could put a move<font color="#E5E5E5"> reg reg you</font><font color="#CCCCCC"> 32 we want</font>

485
00:27:42,610 --> 00:27:49,449
to move to X a X that means<font color="#CCCCCC"> ax on 32-bit</font>

486
00:27:46,809 --> 00:27:52,590
<font color="#CCCCCC">are a X on 64 bits</font><font color="#E5E5E5"> allows you to write</font>

487
00:27:49,450 --> 00:27:56,399
some more<font color="#E5E5E5"> portable assembly code for x86</font>

488
00:27:52,590 --> 00:27:56,399
<font color="#E5E5E5">the number 42</font>

489
00:28:02,019 --> 00:28:10,960
<font color="#CCCCCC">to ask for</font><font color="#E5E5E5"> something after her</font>

490
00:28:15,900 --> 00:28:23,870
<font color="#E5E5E5">hmm no invalid arguments hmm</font>

491
00:28:33,660 --> 00:28:38,960
oh yeah<font color="#E5E5E5"> thanks nope</font>

492
00:28:41,840 --> 00:28:49,649
<font color="#E5E5E5">of course it would have worked if we use</font>

493
00:28:44,790 --> 00:28:53,930
<font color="#CCCCCC">EAX</font><font color="#E5E5E5"> and not yeah we actually</font><font color="#CCCCCC"> we could</font>

494
00:28:49,650 --> 00:28:57,090
just<font color="#E5E5E5"> put up to the whole register okay</font>

495
00:28:53,930 --> 00:29:01,560
<font color="#CCCCCC">we should probably</font><font color="#E5E5E5"> reset code</font><font color="#CCCCCC"> right</font>

496
00:28:57,090 --> 00:29:05,909
<font color="#CCCCCC">you're back to</font><font color="#E5E5E5"> the beginning okay we put</font>

497
00:29:01,560 --> 00:29:09,570
a movie ax<font color="#E5E5E5"> r ax for you</font><font color="#CCCCCC"> too and then we</font>

498
00:29:05,910 --> 00:29:11,880
could put<font color="#CCCCCC"> direct and</font><font color="#E5E5E5"> I can flush</font><font color="#CCCCCC"> it's</font>

499
00:29:09,570 --> 00:29:16,139
<font color="#E5E5E5">not</font><font color="#CCCCCC"> very necessary</font><font color="#E5E5E5"> in this case and now</font>

500
00:29:11,880 --> 00:29:18,630
we can<font color="#CCCCCC"> say create actually call this</font>

501
00:29:16,140 --> 00:29:26,730
<font color="#CCCCCC">function where we have the memory</font>

502
00:29:18,630 --> 00:29:35,280
protect it first<font color="#CCCCCC"> the page page size are</font>

503
00:29:26,730 --> 00:29:39,170
<font color="#CCCCCC">we a</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> W X and</font><font color="#E5E5E5"> then the page</font><font color="#CCCCCC"> I returns</font>

504
00:29:35,280 --> 00:29:42,629
an int and no arguments we can call<font color="#E5E5E5"> it</font>

505
00:29:39,170 --> 00:29:45,810
<font color="#E5E5E5">42 so that's how you can generate code</font>

506
00:29:42,630 --> 00:29:47,580
<font color="#CCCCCC">there's also an API then X is six</font>

507
00:29:45,810 --> 00:29:49,970
relocator to<font color="#E5E5E5"> relocate code from</font><font color="#CCCCCC"> one</font>

508
00:29:47,580 --> 00:29:53,370
location to another

509
00:29:49,970 --> 00:29:56,540
<font color="#CCCCCC">but yeah the next natural step done was</font>

510
00:29:53,370 --> 00:29:59,100
like yes<font color="#CCCCCC"> stalker I can do code tracing</font>

511
00:29:56,540 --> 00:30:01,620
<font color="#CCCCCC">but what if you could influence</font><font color="#E5E5E5"> the code</font>

512
00:29:59,100 --> 00:30:04,020
that is generating because now we have

513
00:30:01,620 --> 00:30:11,969
the building blocks<font color="#CCCCCC"> to do that as you</font>

514
00:30:04,020 --> 00:30:13,980
could<font color="#E5E5E5"> see</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can generate code so just</font>

515
00:30:11,970 --> 00:30:16,400
going<font color="#E5E5E5"> to show that we're gonna go back</font>

516
00:30:13,980 --> 00:30:16,400
<font color="#CCCCCC">to the calculator</font>

517
00:30:19,250 --> 00:30:27,120
and yeah we can<font color="#E5E5E5"> actually use the same</font>

518
00:30:23,730 --> 00:30:30,690
<font color="#E5E5E5">boilerplate but instead</font><font color="#CCCCCC"> of so we just</font>

519
00:30:27,120 --> 00:30:32,820
<font color="#E5E5E5">start a follow and the new thing here is</font>

520
00:30:30,690 --> 00:30:35,640
transformed so you can give it<font color="#CCCCCC"> a</font>

521
00:30:32,820 --> 00:30:38,700
<font color="#CCCCCC">function and this function will get</font>

522
00:30:35,640 --> 00:30:41,059
called on<font color="#E5E5E5"> every single basic block and</font>

523
00:30:38,700 --> 00:30:46,070
the default<font color="#CCCCCC"> implementation will just do</font>

524
00:30:41,059 --> 00:30:50,610
while if<font color="#E5E5E5"> you're</font><font color="#CCCCCC"> richer next</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> know</font>

525
00:30:46,070 --> 00:30:53,129
iterator<font color="#CCCCCC"> keep but that</font><font color="#E5E5E5"> just tells it</font>

526
00:30:50,610 --> 00:30:54,689
<font color="#E5E5E5">okay this instruction I want to keep it</font>

527
00:30:53,130 --> 00:30:56,100
<font color="#E5E5E5">if you don't call keep</font><font color="#CCCCCC"> it's kind</font><font color="#E5E5E5"> of</font>

528
00:30:54,690 --> 00:30:58,169
<font color="#CCCCCC">skipped</font><font color="#E5E5E5"> instruction so you can</font><font color="#CCCCCC"> actually</font>

529
00:30:56,100 --> 00:31:01,439
<font color="#E5E5E5">replace instructions with your own</font>

530
00:30:58,169 --> 00:31:05,100
instructions and another cool<font color="#CCCCCC"> thing here</font>

531
00:31:01,440 --> 00:31:06,809
<font color="#CCCCCC">is that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> get the instruction</font><font color="#E5E5E5"> when you</font>

532
00:31:05,100 --> 00:31:09,000
call next<font color="#E5E5E5"> and then you can look at it</font>

533
00:31:06,809 --> 00:31:10,860
and you<font color="#E5E5E5"> can put some code before the</font>

534
00:31:09,000 --> 00:31:13,260
original instruction or after<font color="#E5E5E5"> depending</font>

535
00:31:10,860 --> 00:31:14,610
on where you if you could do<font color="#E5E5E5"> that if you</font>

536
00:31:13,260 --> 00:31:19,020
add<font color="#E5E5E5"> the code</font><font color="#CCCCCC"> before</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> call keep or</font>

537
00:31:14,610 --> 00:31:20,309
after but I'm going to<font color="#E5E5E5"> show that so we</font>

538
00:31:19,020 --> 00:31:23,100
can just<font color="#E5E5E5"> start with this default</font>

539
00:31:20,309 --> 00:31:27,090
implementation but maybe we can<font color="#E5E5E5"> actually</font>

540
00:31:23,100 --> 00:31:31,219
show you the instruction so we're just

541
00:31:27,090 --> 00:31:31,220
<font color="#E5E5E5">gonna do assign</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> your variable</font>

542
00:31:40,269 --> 00:31:43,269
<font color="#E5E5E5">okay</font>

543
00:31:44,790 --> 00:31:49,460
and have<font color="#E5E5E5"> the calculator running</font>

544
00:31:54,250 --> 00:31:59,770
yeah<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> and there we</font><font color="#E5E5E5"> go lots of code</font>

545
00:31:57,039 --> 00:32:00,970
is being recompiled<font color="#CCCCCC"> that's it's running</font>

546
00:31:59,770 --> 00:32:05,020
and they finally interact with the

547
00:32:00,970 --> 00:32:06,549
calculator<font color="#E5E5E5"> should be a lot more so this</font>

548
00:32:05,020 --> 00:32:11,500
<font color="#E5E5E5">is the compilation process is happening</font>

549
00:32:06,549 --> 00:32:13,270
<font color="#CCCCCC">now</font><font color="#E5E5E5"> and I'm slowing you down a lot</font>

550
00:32:11,500 --> 00:32:18,940
<font color="#E5E5E5">because I</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> this console log in the</font>

551
00:32:13,270 --> 00:32:24,850
path<font color="#CCCCCC"> of it but what's so cool about</font><font color="#E5E5E5"> this</font>

552
00:32:18,940 --> 00:32:26,049
is that<font color="#CCCCCC"> you could you</font><font color="#E5E5E5"> could do like say</font>

553
00:32:24,850 --> 00:32:29,649
you're only interested in call

554
00:32:26,049 --> 00:32:31,809
instructions<font color="#E5E5E5"> that happen inside the</font>

555
00:32:29,650 --> 00:32:39,539
<font color="#E5E5E5">application itself and you could do like</font>

556
00:32:31,809 --> 00:32:39,539
a new module map and you<font color="#E5E5E5"> can filter that</font>

557
00:32:49,770 --> 00:32:58,860
<font color="#E5E5E5">so that if if the library where this</font>

558
00:32:54,010 --> 00:33:02,200
basic book is has calculator but up<font color="#E5E5E5"> in</font>

559
00:32:58,860 --> 00:33:05,678
<font color="#CCCCCC">this</font><font color="#E5E5E5"> path then we want to include it in</font>

560
00:33:02,200 --> 00:33:12,480
<font color="#E5E5E5">this module map here</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> that allows us</font>

561
00:33:05,679 --> 00:33:16,419
here in<font color="#E5E5E5"> this code to say if not app has</font>

562
00:33:12,480 --> 00:33:17,860
this instructions address actually<font color="#CCCCCC"> we</font>

563
00:33:16,419 --> 00:33:20,020
need<font color="#E5E5E5"> to get the instruction for the</font>

564
00:33:17,860 --> 00:33:27,100
first instruction so<font color="#CCCCCC"> we just</font><font color="#E5E5E5"> iterator</font>

565
00:33:20,020 --> 00:33:29,770
next year<font color="#CCCCCC"> so if it doesn't have it</font><font color="#E5E5E5"> well</font>

566
00:33:27,100 --> 00:33:32,549
we<font color="#E5E5E5"> just want to have like the default</font>

567
00:33:29,770 --> 00:33:32,549
<font color="#CCCCCC">implementation</font>

568
00:33:37,360 --> 00:33:41,800
<font color="#CCCCCC">we'll keep all</font><font color="#E5E5E5"> the instructions</font><font color="#CCCCCC"> and we</font>

569
00:33:39,560 --> 00:33:46,389
do nothing<font color="#E5E5E5"> else and then we just return</font>

570
00:33:41,800 --> 00:33:48,919
so we<font color="#E5E5E5"> have a default</font><font color="#CCCCCC"> implementation for</font>

571
00:33:46,390 --> 00:33:51,080
for non app code so we don't<font color="#E5E5E5"> have to</font>

572
00:33:48,920 --> 00:33:56,000
trace our instrument or care about<font color="#CCCCCC"> that</font>

573
00:33:51,080 --> 00:34:07,270
code and then we also<font color="#E5E5E5"> need to change</font>

574
00:33:56,000 --> 00:34:11,800
<font color="#E5E5E5">this into a do-while so I</font><font color="#CCCCCC"> keep</font><font color="#E5E5E5"> all our</font>

575
00:34:07,270 --> 00:34:15,530
instructions<font color="#E5E5E5"> now there should be a lot</font>

576
00:34:11,800 --> 00:34:22,100
less data<font color="#CCCCCC"> it's probably still</font><font color="#E5E5E5"> going to</font>

577
00:34:15,530 --> 00:34:24,169
be too much<font color="#E5E5E5"> we'll see now what about it</font>

578
00:34:22,100 --> 00:34:28,360
yeah so the calculator doesn't<font color="#CCCCCC"> have a</font>

579
00:34:24,168 --> 00:34:32,029
ton of code of its own so this makes<font color="#E5E5E5"> it</font>

580
00:34:28,360 --> 00:34:33,919
limits the search<font color="#E5E5E5"> space because now we</font>

581
00:34:32,030 --> 00:34:35,929
can<font color="#E5E5E5"> actually actually add some more</font>

582
00:34:33,918 --> 00:34:39,429
things<font color="#CCCCCC"> here like okay we got an</font>

583
00:34:35,929 --> 00:34:44,260
instruction<font color="#E5E5E5"> if this instructions</font>

584
00:34:39,429 --> 00:34:47,149
mnemonic it's red it's a ret instruction

585
00:34:44,260 --> 00:34:50,060
maybe we actually want to look at the

586
00:34:47,149 --> 00:34:53,239
<font color="#E5E5E5">return value hypothetically like it</font>

587
00:34:50,060 --> 00:34:56,120
might have<font color="#E5E5E5"> something in our X and what</font>

588
00:34:53,239 --> 00:34:58,100
is now with this iterator you can put

589
00:34:56,120 --> 00:35:02,900
move<font color="#E5E5E5"> right</font><font color="#CCCCCC"> bah bah bah you can add your</font>

590
00:34:58,100 --> 00:35:08,600
<font color="#CCCCCC">own</font><font color="#E5E5E5"> code anywhere but you can also put a</font>

591
00:35:02,900 --> 00:35:12,530
call out to<font color="#E5E5E5"> JavaScript so on</font><font color="#CCCCCC"> red</font><font color="#E5E5E5"> so just</font>

592
00:35:08,600 --> 00:35:15,910
<font color="#E5E5E5">hit</font><font color="#CCCCCC"> right there post call out on red</font><font color="#E5E5E5"> and</font>

593
00:35:12,530 --> 00:35:15,910
I'm defining an<font color="#CCCCCC"> on right here</font>

594
00:35:18,310 --> 00:35:30,950
and I'm logging<font color="#CCCCCC"> read context sorry our</font>

595
00:35:26,150 --> 00:35:32,870
<font color="#CCCCCC">PC so now anytime there's a</font><font color="#E5E5E5"> ret</font>

596
00:35:30,950 --> 00:35:35,899
instruction we put a<font color="#CCCCCC"> callback</font><font color="#E5E5E5"> into</font>

597
00:35:32,870 --> 00:35:38,060
JavaScript and this<font color="#CCCCCC"> would call out here</font>

598
00:35:35,900 --> 00:35:42,230
<font color="#E5E5E5">will actually</font><font color="#CCCCCC"> make sure to just</font><font color="#E5E5E5"> save</font>

599
00:35:38,060 --> 00:35:44,000
flags and registers and avoid the red

600
00:35:42,230 --> 00:35:47,000
zone<font color="#CCCCCC"> and so on so it takes care</font><font color="#E5E5E5"> of all</font>

601
00:35:44,000 --> 00:35:53,510
the<font color="#CCCCCC"> details so you can safely call</font><font color="#E5E5E5"> into</font>

602
00:35:47,000 --> 00:35:56,110
<font color="#E5E5E5">JavaScript so can</font><font color="#CCCCCC"> just restart</font><font color="#E5E5E5"> with this</font>

603
00:35:53,510 --> 00:35:56,110
I'll see what happens

604
00:35:56,320 --> 00:36:04,090
yeah<font color="#E5E5E5"> you see a bunch of calls now for</font>

605
00:36:00,410 --> 00:36:07,970
each call<font color="#CCCCCC"> instruction inside this and</font>

606
00:36:04,090 --> 00:36:16,100
then you could go<font color="#CCCCCC"> ahead and do</font><font color="#E5E5E5"> more fun</font>

607
00:36:07,970 --> 00:36:19,509
things like just to save<font color="#CCCCCC"> time I'm gonna</font>

608
00:36:16,100 --> 00:36:19,509
in this<font color="#CCCCCC"> coffees of code I wrote</font>

609
00:36:26,480 --> 00:36:36,840
yeah there we go<font color="#CCCCCC"> oh no not that I what</font>

610
00:36:32,700 --> 00:36:39,180
you<font color="#E5E5E5"> could imagine doing them</font><font color="#CCCCCC"> is you</font>

611
00:36:36,840 --> 00:36:44,430
could save this just<font color="#CCCCCC"> the flags</font><font color="#E5E5E5"> and then</font>

612
00:36:39,180 --> 00:36:52,919
you could save a register<font color="#CCCCCC"> and then see</font>

613
00:36:44,430 --> 00:36:54,930
here so I'm<font color="#E5E5E5"> just gonna reuse this code</font>

614
00:36:52,920 --> 00:37:04,440
so<font color="#E5E5E5"> yes you don't have to watch</font><font color="#CCCCCC"> me type</font>

615
00:36:54,930 --> 00:37:05,850
it so what<font color="#E5E5E5"> you can do is well we know</font>

616
00:37:04,440 --> 00:37:07,920
that<font color="#E5E5E5"> we're at the RET instruction so</font>

617
00:37:05,850 --> 00:37:09,750
it's probably<font color="#E5E5E5"> safe to modify flags</font><font color="#CCCCCC"> now</font>

618
00:37:07,920 --> 00:37:11,340
<font color="#CCCCCC">we're just gonna assume</font><font color="#E5E5E5"> that we could</font>

619
00:37:09,750 --> 00:37:15,900
save the flags<font color="#E5E5E5"> and</font><font color="#CCCCCC"> partner</font><font color="#E5E5E5"> and restore</font>

620
00:37:11,340 --> 00:37:19,640
them<font color="#CCCCCC"> so we're just going to compare EAX</font>

621
00:37:15,900 --> 00:37:23,760
<font color="#CCCCCC">260</font><font color="#E5E5E5"> and if it's below we go to no here</font>

622
00:37:19,640 --> 00:37:26,430
<font color="#CCCCCC">and if it's above 90 we also go to nope</font>

623
00:37:23,760 --> 00:37:28,800
so<font color="#E5E5E5"> if it's between 60 and 90 we actually</font>

624
00:37:26,430 --> 00:37:41,940
put the<font color="#CCCCCC"> code we call</font><font color="#E5E5E5"> into JavaScript</font>

625
00:37:28,800 --> 00:37:43,890
here<font color="#CCCCCC"> re X is this value</font><font color="#E5E5E5"> and one thing to</font>

626
00:37:41,940 --> 00:37:46,020
be careful about is<font color="#CCCCCC"> that you put code on</font>

627
00:37:43,890 --> 00:37:48,359
the right side of the key here<font color="#CCCCCC"> because</font>

628
00:37:46,020 --> 00:37:50,040
<font color="#E5E5E5">if if you put code after a</font><font color="#CCCCCC"> rect</font>

629
00:37:48,360 --> 00:37:53,010
instruction it doesn't make sense<font color="#CCCCCC"> and we</font>

630
00:37:50,040 --> 00:37:54,480
won't<font color="#E5E5E5"> be reached</font><font color="#CCCCCC"> so in this case it's a</font>

631
00:37:53,010 --> 00:37:56,160
ret instruction we put it<font color="#CCCCCC"> before that's</font>

632
00:37:54,480 --> 00:37:58,430
why we have the code<font color="#CCCCCC"> before</font><font color="#E5E5E5"> calling keep</font>

633
00:37:56,160 --> 00:37:58,430
here

634
00:38:05,349 --> 00:38:08,759
whoo yeah

635
00:38:10,710 --> 00:38:23,930
so we<font color="#E5E5E5"> don't see anything okay let's</font>

636
00:38:13,110 --> 00:38:23,930
<font color="#E5E5E5">adjust say three</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> ten</font>

637
00:38:32,270 --> 00:38:36,130
yeah<font color="#CCCCCC"> there</font><font color="#E5E5E5"> wasn't pipes</font>

638
00:38:40,859 --> 00:38:48,359
and now we can<font color="#E5E5E5"> bring</font><font color="#CCCCCC"> back the speech</font>

639
00:38:43,469 --> 00:38:54,180
synthesizer and make it<font color="#E5E5E5"> call out</font><font color="#CCCCCC"> the</font>

640
00:38:48,359 --> 00:38:56,538
return<font color="#E5E5E5"> values if you want to well let's</font>

641
00:38:54,180 --> 00:38:56,538
just do it

642
00:38:57,310 --> 00:39:00,570
[Music]

643
00:39:18,680 --> 00:39:26,080
well<font color="#E5E5E5"> just forgot a few things the</font>

644
00:39:23,510 --> 00:39:26,080
imports

645
00:39:36,710 --> 00:39:47,119
five five top five<font color="#E5E5E5"> top five</font>

646
00:39:43,089 --> 00:39:50,049
<font color="#CCCCCC">yep works</font><font color="#E5E5E5"> so you can combine many things</font>

647
00:39:47,119 --> 00:39:50,050
in interesting ways

648
00:39:55,060 --> 00:40:01,100
and I think<font color="#CCCCCC"> I'm running</font><font color="#E5E5E5"> low in town</font><font color="#CCCCCC"> so</font>

649
00:39:59,210 --> 00:40:04,610
I'm<font color="#E5E5E5"> just gonna now go</font><font color="#CCCCCC"> to the how the</font>

650
00:40:01,100 --> 00:40:07,100
things work<font color="#E5E5E5"> so the way stalker works is</font>

651
00:40:04,610 --> 00:40:11,150
that you<font color="#CCCCCC"> have</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> original code on the</font>

652
00:40:07,100 --> 00:40:15,710
<font color="#CCCCCC">left</font><font color="#E5E5E5"> it's at</font><font color="#CCCCCC"> 0 X thousand here 1</font><font color="#E5E5E5"> 0 0 0</font>

653
00:40:11,150 --> 00:40:18,980
and we take this code<font color="#E5E5E5"> and we recompile</font>

654
00:40:15,710 --> 00:40:21,140
<font color="#E5E5E5">it into this so we</font><font color="#CCCCCC"> keep this</font><font color="#E5E5E5"> a movie X</font>

655
00:40:18,980 --> 00:40:23,330
just<font color="#E5E5E5"> as</font><font color="#CCCCCC"> it is</font><font color="#E5E5E5"> and then we have a</font>

656
00:40:21,140 --> 00:40:24,920
prologue where we save stuff and then

657
00:40:23,330 --> 00:40:27,680
when you have an epilogue after but<font color="#CCCCCC"> it</font>

658
00:40:24,920 --> 00:40:30,800
<font color="#CCCCCC">between here we actually ask the stalker</font>

659
00:40:27,680 --> 00:40:32,779
to compile a target of the jump here<font color="#CCCCCC"> so</font>

660
00:40:30,800 --> 00:40:37,280
it's<font color="#E5E5E5"> 1 2</font><font color="#CCCCCC"> 3</font><font color="#E5E5E5"> 4 so good</font><font color="#CCCCCC"> as we stopped on</font>

661
00:40:32,780 --> 00:40:39,500
the<font color="#CCCCCC"> first branch instruction so that</font>

662
00:40:37,280 --> 00:40:40,990
will set a resume<font color="#E5E5E5"> a</font><font color="#CCCCCC"> variable</font><font color="#E5E5E5"> and ask and</font>

663
00:40:39,500 --> 00:40:44,290
it's gonna jump<font color="#E5E5E5"> to that afterwards</font>

664
00:40:40,990 --> 00:40:49,040
that's like more or<font color="#E5E5E5"> less how it works</font>

665
00:40:44,290 --> 00:40:54,800
<font color="#E5E5E5">and then this case then</font><font color="#CCCCCC"> we have</font><font color="#E5E5E5"> to now</font>

666
00:40:49,040 --> 00:40:57,380
another block<font color="#E5E5E5"> and well it's similar same</font>

667
00:40:54,800 --> 00:40:59,330
thing<font color="#CCCCCC"> but</font><font color="#E5E5E5"> this is really slow because</font>

668
00:40:57,380 --> 00:41:02,240
<font color="#CCCCCC">you're saving</font><font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of registers here in</font>

669
00:40:59,330 --> 00:41:03,380
the the prologue<font color="#E5E5E5"> and epilogue</font><font color="#CCCCCC"> having to</font>

670
00:41:02,240 --> 00:41:05,839
go in and look up if you already

671
00:41:03,380 --> 00:41:09,320
<font color="#E5E5E5">compiled this block and so on</font><font color="#CCCCCC"> so stalker</font>

672
00:41:05,840 --> 00:41:11,510
has some just in<font color="#E5E5E5"> time tricks where it</font>

673
00:41:09,320 --> 00:41:13,340
<font color="#CCCCCC">actually if you look at</font><font color="#E5E5E5"> the first block</font>

674
00:41:11,510 --> 00:41:18,140
here it's calling<font color="#CCCCCC"> the second block</font>

675
00:41:13,340 --> 00:41:20,330
jumping<font color="#E5E5E5"> to the second block and it can</font>

676
00:41:18,140 --> 00:41:21,980
<font color="#CCCCCC">then back patch</font><font color="#E5E5E5"> and just write a jump</font>

677
00:41:20,330 --> 00:41:25,549
directly to<font color="#E5E5E5"> the beginning of this one</font>

678
00:41:21,980 --> 00:41:26,750
<font color="#E5E5E5">the generating code for this</font><font color="#CCCCCC"> one so but</font>

679
00:41:25,550 --> 00:41:28,430
this assumes that the code isn't

680
00:41:26,750 --> 00:41:30,410
self-modifying<font color="#E5E5E5"> so you have a way to</font>

681
00:41:28,430 --> 00:41:32,899
<font color="#E5E5E5">control</font><font color="#CCCCCC"> that so you can set our to not</font>

682
00:41:30,410 --> 00:41:35,060
trust code to<font color="#E5E5E5"> change so we'll always go</font>

683
00:41:32,900 --> 00:41:38,480
and check if the code changed and<font color="#CCCCCC"> only</font>

684
00:41:35,060 --> 00:41:40,730
then reuse the code or if you<font color="#CCCCCC"> fail</font><font color="#E5E5E5"> to</font>

685
00:41:38,480 --> 00:41:43,430
trust the code a bit more than it<font color="#CCCCCC"> will</font>

686
00:41:40,730 --> 00:41:49,340
do it<font color="#CCCCCC"> after an attack</font><font color="#E5E5E5"> secure block</font>

687
00:41:43,430 --> 00:41:51,500
<font color="#E5E5E5">without change and that means that with</font>

688
00:41:49,340 --> 00:41:55,940
<font color="#E5E5E5">this trick and some inline caching</font>

689
00:41:51,500 --> 00:41:57,590
tricks we run<font color="#E5E5E5"> between 1 and</font><font color="#CCCCCC"> 2 X slow</font>

690
00:41:55,940 --> 00:42:00,350
down<font color="#E5E5E5"> the compared</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> original code</font>

691
00:41:57,590 --> 00:42:02,890
so it can run<font color="#E5E5E5"> really fast and only add a</font>

692
00:42:00,350 --> 00:42:05,029
few percent overhead<font color="#CCCCCC"> depends how much</font>

693
00:42:02,890 --> 00:42:07,529
<font color="#CCCCCC">call-outs you know how much</font>

694
00:42:05,030 --> 00:42:09,720
instrumentation you want but

695
00:42:07,530 --> 00:42:13,470
but that was<font color="#CCCCCC"> only recently that this</font>

696
00:42:09,720 --> 00:42:17,250
<font color="#E5E5E5">became</font><font color="#CCCCCC"> really much faster on x86 it was</font>

697
00:42:13,470 --> 00:42:18,859
about four times slower<font color="#CCCCCC"> because it only</font>

698
00:42:17,250 --> 00:42:22,230
implemented the back<font color="#E5E5E5"> the static effect</font>

699
00:42:18,860 --> 00:42:24,420
<font color="#E5E5E5">hashing trick but now it also has the</font>

700
00:42:22,230 --> 00:42:26,720
dynamic<font color="#E5E5E5"> like inline caches</font><font color="#CCCCCC"> that does</font>

701
00:42:24,420 --> 00:42:29,550
like<font color="#E5E5E5"> if it's a register it will or</font>

702
00:42:26,720 --> 00:42:31,520
register<font color="#CCCCCC"> a</font><font color="#E5E5E5"> memory location target and</font>

703
00:42:29,550 --> 00:42:33,270
it's going<font color="#E5E5E5"> to have some inland compares</font>

704
00:42:31,520 --> 00:42:37,350
<font color="#CCCCCC">where it's going</font><font color="#E5E5E5"> to fill out those</font>

705
00:42:33,270 --> 00:42:40,200
<font color="#CCCCCC">values as it's running and now it's that</font>

706
00:42:37,350 --> 00:42:43,259
<font color="#E5E5E5">maybe four times</font><font color="#CCCCCC"> of four times faster</font><font color="#E5E5E5"> an</font>

707
00:42:40,200 --> 00:42:45,810
<font color="#E5E5E5">arm 64 where it's also available it was</font>

708
00:42:43,260 --> 00:42:47,940
22 times slower<font color="#E5E5E5"> and now it's and then</font>

709
00:42:45,810 --> 00:42:50,880
after the static back<font color="#E5E5E5"> patching trick</font><font color="#CCCCCC"> its</font>

710
00:42:47,940 --> 00:42:55,440
<font color="#E5E5E5">was 2.2 times slower and after the</font>

711
00:42:50,880 --> 00:42:58,290
static dynamic<font color="#E5E5E5"> tricks</font><font color="#CCCCCC"> it's now also one</font>

712
00:42:55,440 --> 00:43:01,500
act 1<font color="#CCCCCC"> 2 2 X so it can run code</font><font color="#E5E5E5"> really</font>

713
00:42:58,290 --> 00:43:05,850
fast<font color="#CCCCCC"> so you</font><font color="#E5E5E5"> could I'm gonna show this</font>

714
00:43:01,500 --> 00:43:12,050
now<font color="#CCCCCC"> we could have a more complicated</font>

715
00:43:05,850 --> 00:43:12,049
example<font color="#CCCCCC"> like some app some game</font>

716
00:43:19,920 --> 00:43:34,849
actually no<font color="#E5E5E5"> pockets living and okay so</font>

717
00:43:30,630 --> 00:43:41,190
<font color="#CCCCCC">Freda the name</font><font color="#E5E5E5"> of this process</font>

718
00:43:34,849 --> 00:43:46,829
something with<font color="#CCCCCC"> road or the trip to can</font>

719
00:43:41,190 --> 00:43:48,630
load this explore<font color="#CCCCCC"> J's it's gonna be slow</font>

720
00:43:46,829 --> 00:43:50,839
in the beginning ever that should catch

721
00:43:48,630 --> 00:43:50,839
<font color="#CCCCCC">up</font>

722
00:43:55,619 --> 00:43:59,269
or it's gonna crash we'll see

723
00:44:05,240 --> 00:44:11,200
actually maybe the simplest speech

724
00:44:07,430 --> 00:44:11,200
synthesiser it's a bad<font color="#CCCCCC"> idea</font>

725
00:44:16,720 --> 00:44:24,520
let's just remove this code here<font color="#E5E5E5"> so for</font>

726
00:44:21,200 --> 00:44:24,520
the<font color="#CCCCCC"> rest instruction we printed</font>

727
00:44:34,809 --> 00:44:38,279
<font color="#E5E5E5">okay it's not that yet</font>

728
00:44:49,580 --> 00:44:53,220
so the thing is<font color="#E5E5E5"> it will be slow in the</font>

729
00:44:51,960 --> 00:44:56,820
<font color="#CCCCCC">beginning when it's compiling all the</font>

730
00:44:53,220 --> 00:44:58,410
<font color="#E5E5E5">codes and it's gonna speed up but this</font>

731
00:44:56,820 --> 00:45:03,240
part of the demo<font color="#CCCCCC"> is not very</font><font color="#E5E5E5"> well for</font>

732
00:44:58,410 --> 00:45:05,839
curves<font color="#E5E5E5"> it was last night very late let's</font>

733
00:45:03,240 --> 00:45:05,839
just try<font color="#CCCCCC"> to</font>

734
00:45:12,210 --> 00:45:17,480
<font color="#E5E5E5">I'll get it working no calculator</font>

735
00:45:14,579 --> 00:45:17,480
<font color="#CCCCCC">weather windy</font>

736
00:45:37,330 --> 00:45:46,529
[Music]

737
00:45:41,080 --> 00:45:46,529
yep<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> still alive that doesn't</font><font color="#CCCCCC"> like</font>

738
00:45:46,720 --> 00:45:59,578
now<font color="#CCCCCC"> this we're tracing all the threads</font>

739
00:45:49,150 --> 00:45:59,579
<font color="#CCCCCC">on this</font><font color="#E5E5E5"> still running anyway</font>

740
00:46:08,740 --> 00:46:23,149
any questions<font color="#CCCCCC"> hey</font><font color="#E5E5E5"> applications not to</font>

741
00:46:19,040 --> 00:46:26,420
refuse<font color="#CCCCCC"> there</font><font color="#E5E5E5"> are several ways</font>

742
00:46:23,150 --> 00:46:27,970
so the injection method is<font color="#CCCCCC"> RTL create</font>

743
00:46:26,420 --> 00:46:32,300
user thread or something<font color="#CCCCCC"> and forgot</font>

744
00:46:27,970 --> 00:46:33,680
<font color="#E5E5E5">there's but you can also use</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> there's</font>

745
00:46:32,300 --> 00:46:36,020
another thing in<font color="#E5E5E5"> free</font><font color="#CCCCCC"> air</font><font color="#E5E5E5"> called gadget</font>

746
00:46:33,680 --> 00:46:38,750
<font color="#E5E5E5">so you can somehow make the app load</font>

747
00:46:36,020 --> 00:46:39,800
that library<font color="#E5E5E5"> DLL and after that you</font><font color="#CCCCCC"> can</font>

748
00:46:38,750 --> 00:46:42,950
communicate<font color="#CCCCCC"> with that</font>

749
00:46:39,800 --> 00:46:45,619
so from<font color="#E5E5E5"> caramel and that's not explored</font>

750
00:46:42,950 --> 00:46:47,180
yet<font color="#E5E5E5"> oh you have to yeah</font>

751
00:46:45,619 --> 00:46:59,569
<font color="#E5E5E5">there will be some work to get into the</font>

752
00:46:47,180 --> 00:47:02,000
kernel I think hi can you hear me yeah

753
00:46:59,569 --> 00:47:03,410
yeah<font color="#E5E5E5"> so yeah it was very</font><font color="#CCCCCC"> interesting I'm</font>

754
00:47:02,000 --> 00:47:06,380
just trying to understand<font color="#CCCCCC"> how it works</font>

755
00:47:03,410 --> 00:47:08,750
<font color="#E5E5E5">so I understand that you recombine to</font>

756
00:47:06,380 --> 00:47:10,430
<font color="#E5E5E5">your own to your own code</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> that it</font>

757
00:47:08,750 --> 00:47:13,250
<font color="#E5E5E5">gets injected somewhere in the</font><font color="#CCCCCC"> binary</font>

758
00:47:10,430 --> 00:47:16,490
but then how do<font color="#E5E5E5"> you redirect from from</font>

759
00:47:13,250 --> 00:47:19,309
the let's say the<font color="#E5E5E5"> old code to the to the</font>

760
00:47:16,490 --> 00:47:21,020
patch code<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> I mean you're talking</font>

761
00:47:19,309 --> 00:47:25,040
<font color="#E5E5E5">about interceptor that I showed earlier</font>

762
00:47:21,020 --> 00:47:27,290
would like to open<font color="#CCCCCC"> other I guess any any</font>

763
00:47:25,040 --> 00:47:28,460
<font color="#E5E5E5">anything any probe that you make or the</font>

764
00:47:27,290 --> 00:47:30,440
the<font color="#CCCCCC"> stoker</font>

765
00:47:28,460 --> 00:47:32,059
<font color="#CCCCCC">I guess there is the old code running</font>

766
00:47:30,440 --> 00:47:36,170
<font color="#E5E5E5">and the one that you've recompiled and</font>

767
00:47:32,059 --> 00:47:38,299
<font color="#CCCCCC">rejected is it like just</font><font color="#E5E5E5"> a big jump from</font>

768
00:47:36,170 --> 00:47:41,240
from one to the other<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you just</font>

769
00:47:38,299 --> 00:47:44,119
patch how is it<font color="#E5E5E5"> so the way it works with</font>

770
00:47:41,240 --> 00:47:45,589
stalker stalker is very different from

771
00:47:44,119 --> 00:47:47,480
<font color="#CCCCCC">interceptor which I showed in the</font>

772
00:47:45,589 --> 00:47:48,710
beginning but<font color="#E5E5E5"> it's Interceptor modifies</font>

773
00:47:47,480 --> 00:47:50,450
it and just<font color="#E5E5E5"> right to jump in the</font>

774
00:47:48,710 --> 00:47:52,430
beginning of the<font color="#CCCCCC"> function and then it</font>

775
00:47:50,450 --> 00:47:55,220
has<font color="#E5E5E5"> already relocated the first</font>

776
00:47:52,430 --> 00:47:56,419
instructions that it over wrote<font color="#CCCCCC"> and it</font>

777
00:47:55,220 --> 00:47:58,459
also has some<font color="#E5E5E5"> tricks where it can jump</font>

778
00:47:56,420 --> 00:48:01,839
<font color="#E5E5E5">through a nearby elf or</font><font color="#CCCCCC"> mokou header if</font>

779
00:47:58,460 --> 00:48:05,299
there's not<font color="#E5E5E5"> enough space</font><font color="#CCCCCC"> for a jump in</font>

780
00:48:01,839 --> 00:48:07,730
some<font color="#E5E5E5"> tricks but stalker is different so</font>

781
00:48:05,299 --> 00:48:09,530
if you store another thread that you're

782
00:48:07,730 --> 00:48:12,859
not in and then it's just<font color="#E5E5E5"> gonna suspend</font>

783
00:48:09,530 --> 00:48:17,270
a thread<font color="#E5E5E5"> read registers take the program</font>

784
00:48:12,859 --> 00:48:19,640
<font color="#CCCCCC">counter register or IP and generate code</font>

785
00:48:17,270 --> 00:48:20,480
for what's there up until<font color="#E5E5E5"> the</font><font color="#CCCCCC"> first</font>

786
00:48:19,640 --> 00:48:23,060
branch

787
00:48:20,480 --> 00:48:26,150
like I showed you<font color="#E5E5E5"> and then it's gonna</font>

788
00:48:23,060 --> 00:48:27,920
replace the PC with the<font color="#E5E5E5"> instrumented</font>

789
00:48:26,150 --> 00:48:30,500
version and it's<font color="#E5E5E5"> gonna resume that</font>

790
00:48:27,920 --> 00:48:31,760
thread<font color="#CCCCCC"> and then when it gets</font><font color="#E5E5E5"> to the end</font>

791
00:48:30,500 --> 00:48:33,980
<font color="#CCCCCC">of the</font><font color="#E5E5E5"> basic block</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> gonna go into</font>

792
00:48:31,760 --> 00:48:36,320
<font color="#CCCCCC">storage generate more code and so on and</font>

793
00:48:33,980 --> 00:48:38,060
they're back the tricks<font color="#CCCCCC"> that I talked</font>

794
00:48:36,320 --> 00:48:39,560
about<font color="#E5E5E5"> will make it faster</font><font color="#CCCCCC"> so it will be</font>

795
00:48:38,060 --> 00:48:41,240
able<font color="#E5E5E5"> to go</font><font color="#CCCCCC"> directly between</font><font color="#E5E5E5"> blocks at</font>

796
00:48:39,560 --> 00:48:44,299
some point if you configure<font color="#E5E5E5"> it like that</font>

797
00:48:41,240 --> 00:48:47,689
however if<font color="#CCCCCC"> if you're tracing the current</font>

798
00:48:44,300 --> 00:48:49,520
thread<font color="#E5E5E5"> that's when it it will</font><font color="#CCCCCC"> actually</font>

799
00:48:47,690 --> 00:48:53,599
<font color="#E5E5E5">just look at the return address of the</font>

800
00:48:49,520 --> 00:48:56,930
function<font color="#CCCCCC"> and</font><font color="#E5E5E5"> January code for that for a</font>

801
00:48:53,599 --> 00:48:58,550
place to return address and<font color="#E5E5E5"> return so so</font>

802
00:48:56,930 --> 00:48:59,720
that way you<font color="#E5E5E5"> can combine it with in line</font>

803
00:48:58,550 --> 00:49:01,339
hooking so you could hook some

804
00:48:59,720 --> 00:49:06,230
interesting<font color="#E5E5E5"> API and then starts talking</font>

805
00:49:01,339 --> 00:49:07,670
synchronously itself<font color="#E5E5E5"> until you until it</font>

806
00:49:06,230 --> 00:49:10,760
<font color="#E5E5E5">leaves for example and then you</font><font color="#CCCCCC"> could</font>

807
00:49:07,670 --> 00:49:12,140
<font color="#CCCCCC">stops talking there</font><font color="#E5E5E5"> okay very</font>

808
00:49:10,760 --> 00:49:17,060
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> and I have another question</font>

809
00:49:12,140 --> 00:49:18,680
<font color="#CCCCCC">and</font><font color="#E5E5E5"> just say like what dependencies</font><font color="#CCCCCC"> does</font>

810
00:49:17,060 --> 00:49:22,279
your agent have like is it something

811
00:49:18,680 --> 00:49:24,379
<font color="#E5E5E5">that relies on</font><font color="#CCCCCC"> I don't know some some</font>

812
00:49:22,280 --> 00:49:26,630
libraries or<font color="#E5E5E5"> yeah I'm just thinking</font><font color="#CCCCCC"> how</font>

813
00:49:24,380 --> 00:49:29,990
hard<font color="#E5E5E5"> would it be to to inject this in a</font>

814
00:49:26,630 --> 00:49:32,480
running<font color="#CCCCCC"> kernel</font><font color="#E5E5E5"> for example we need some</font>

815
00:49:29,990 --> 00:49:34,040
work it tries to avoid<font color="#CCCCCC"> Lipsy</font>

816
00:49:32,480 --> 00:49:36,440
dependencies as much as possible<font color="#E5E5E5"> it has</font>

817
00:49:34,040 --> 00:49:39,410
<font color="#CCCCCC">some Lipsy dependencies of course but</font>

818
00:49:36,440 --> 00:49:42,619
the<font color="#E5E5E5"> long-term goal</font><font color="#CCCCCC"> is to</font><font color="#E5E5E5"> reduce that</font>

819
00:49:39,410 --> 00:49:44,390
<font color="#E5E5E5">more and</font><font color="#CCCCCC"> more so for now we have TLS</font>

820
00:49:42,619 --> 00:49:46,460
emulation so we emulate thread-local

821
00:49:44,390 --> 00:49:49,609
storage for<font color="#CCCCCC"> example so we don't have</font><font color="#E5E5E5"> to</font>

822
00:49:46,460 --> 00:49:52,040
call less api's to do that<font color="#E5E5E5"> on some</font>

823
00:49:49,609 --> 00:49:54,500
platforms<font color="#E5E5E5"> to avoid like reinforce the</font>

824
00:49:52,040 --> 00:49:57,740
issues if you hook the TLS API<font color="#E5E5E5"> for</font>

825
00:49:54,500 --> 00:50:00,500
example<font color="#CCCCCC"> so it's it's a</font><font color="#E5E5E5"> work in</font><font color="#CCCCCC"> progress</font>

826
00:49:57,740 --> 00:50:03,430
<font color="#E5E5E5">very much and the code load um is it is</font>

827
00:50:00,500 --> 00:50:03,430
it<font color="#E5E5E5"> your own or is it</font>

828
00:50:03,560 --> 00:50:07,339
you mean the injector or<font color="#CCCCCC"> a injectors oh</font>

829
00:50:05,720 --> 00:50:10,490
<font color="#E5E5E5">yeah I don't have the vocabulary</font><font color="#CCCCCC"> yeah</font>

830
00:50:07,339 --> 00:50:13,430
<font color="#E5E5E5">yeah it's my own it's but it has</font>

831
00:50:10,490 --> 00:50:15,200
different<font color="#E5E5E5"> implementations per OS Mac OS</font>

832
00:50:13,430 --> 00:50:16,700
and<font color="#CCCCCC"> iOS is the</font><font color="#E5E5E5"> most advanced because in</font>

833
00:50:15,200 --> 00:50:19,160
that case<font color="#CCCCCC"> we don't</font><font color="#E5E5E5"> actually touch the</font>

834
00:50:16,700 --> 00:50:22,040
file system we just<font color="#E5E5E5"> map directly into</font>

835
00:50:19,160 --> 00:50:23,480
the target process<font color="#E5E5E5"> so the target</font><font color="#CCCCCC"> process</font>

836
00:50:22,040 --> 00:50:25,520
can be sandbox it doesn't need to have

837
00:50:23,480 --> 00:50:28,280
file system access we can<font color="#E5E5E5"> just map</font>

838
00:50:25,520 --> 00:50:30,680
<font color="#E5E5E5">directly in so even</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> LD the dynamic</font>

839
00:50:28,280 --> 00:50:33,040
linker doesn't know<font color="#CCCCCC"> about</font><font color="#E5E5E5"> us what the</font>

840
00:50:30,680 --> 00:50:33,040
<font color="#CCCCCC">live way</font>

841
00:50:36,900 --> 00:50:40,410
<font color="#E5E5E5">all right thank you</font>

