1
00:00:00,030 --> 00:00:09,299
<font color="#E5E5E5">oh</font><font color="#CCCCCC"> yeah that's it</font><font color="#E5E5E5"> oh cool it works so</font>

2
00:00:05,299 --> 00:00:11,280
here is<font color="#CCCCCC"> travi travi scoot</font><font color="#E5E5E5"> spit</font><font color="#CCCCCC"> this way</font>

3
00:00:09,300 --> 00:00:13,309
this told was<font color="#CCCCCC"> not prepared I mean it was</font>

4
00:00:11,280 --> 00:00:16,108
not<font color="#E5E5E5"> supposed to be in the schedule but</font>

5
00:00:13,309 --> 00:00:17,279
<font color="#E5E5E5">he wanted to</font><font color="#CCCCCC"> make a talk so you're</font>

6
00:00:16,109 --> 00:00:20,279
<font color="#E5E5E5">welcome</font>

7
00:00:17,279 --> 00:00:23,448
<font color="#CCCCCC">he will be talking</font><font color="#E5E5E5"> about some magic</font>

8
00:00:20,279 --> 00:00:25,710
tricks in MIPS assembly<font color="#E5E5E5"> howdy</font>

9
00:00:23,449 --> 00:00:28,140
okay so there<font color="#E5E5E5"> are no slides for this</font>

10
00:00:25,710 --> 00:00:30,269
talk<font color="#E5E5E5"> but if you want to repeat the trick</font>

11
00:00:28,140 --> 00:00:32,520
afterward<font color="#E5E5E5"> you can find it</font><font color="#CCCCCC"> written as a</font>

12
00:00:30,269 --> 00:00:38,129
paper in proof of concept<font color="#CCCCCC"> to</font><font color="#E5E5E5"> get the</font>

13
00:00:32,520 --> 00:00:40,020
fuck out<font color="#E5E5E5"> 15 so we're all reverse</font>

14
00:00:38,129 --> 00:00:41,968
engineers here and we we take<font color="#E5E5E5"> things</font>

15
00:00:40,020 --> 00:00:46,469
apart but<font color="#E5E5E5"> sometimes it's also fun</font><font color="#CCCCCC"> to</font>

16
00:00:41,969 --> 00:00:48,000
fuck with reverse engineers so you know

17
00:00:46,469 --> 00:00:50,520
when you when you<font color="#E5E5E5"> have code and you're</font>

18
00:00:48,000 --> 00:00:53,010
<font color="#E5E5E5">in you're reversing it it would be nice</font>

19
00:00:50,520 --> 00:00:58,949
<font color="#CCCCCC">to be able</font><font color="#E5E5E5"> to write</font><font color="#CCCCCC"> code that</font><font color="#E5E5E5"> will not</font>

20
00:00:53,010 --> 00:01:02,070
work<font color="#E5E5E5"> in an emulator</font><font color="#CCCCCC"> and will</font><font color="#E5E5E5"> not read</font>

21
00:00:58,949 --> 00:01:04,860
correctly<font color="#CCCCCC"> in</font><font color="#E5E5E5"> this assembly</font><font color="#CCCCCC"> so in the</font>

22
00:01:02,070 --> 00:01:09,000
<font color="#E5E5E5">MIPS architecture there's this feature</font>

23
00:01:04,860 --> 00:01:11,369
called a branch delay slot<font color="#E5E5E5"> nips was</font>

24
00:01:09,000 --> 00:01:14,070
designed in an era when they were<font color="#E5E5E5"> really</font>

25
00:01:11,369 --> 00:01:16,380
<font color="#E5E5E5">optimistic and they thought that they</font>

26
00:01:14,070 --> 00:01:18,630
could remove all of the complexity from

27
00:01:16,380 --> 00:01:23,970
the chip and make it the compiler

28
00:01:18,630 --> 00:01:26,939
writers problem so nips has a pipeline

29
00:01:23,970 --> 00:01:29,670
they used to have<font color="#E5E5E5"> like two stages and</font>

30
00:01:26,939 --> 00:01:31,110
then it was<font color="#E5E5E5"> five</font><font color="#CCCCCC"> modern myths chips have</font>

31
00:01:29,670 --> 00:01:34,159
on the<font color="#E5E5E5"> order of an eighteen stage</font>

32
00:01:31,110 --> 00:01:36,299
pipeline<font color="#CCCCCC"> two of</font><font color="#E5E5E5"> which are optional and</font>

33
00:01:34,159 --> 00:01:40,460
this pipeline<font color="#E5E5E5"> allows multiple</font>

34
00:01:36,299 --> 00:01:43,110
instructions to run at<font color="#E5E5E5"> the same time so</font>

35
00:01:40,460 --> 00:01:47,189
when you write your assembly in order

36
00:01:43,110 --> 00:01:50,520
<font color="#E5E5E5">the CPU is actually queuing these up and</font>

37
00:01:47,189 --> 00:01:53,220
doing<font color="#E5E5E5"> pieces</font><font color="#CCCCCC"> of each instruction</font><font color="#E5E5E5"> in</font>

38
00:01:50,520 --> 00:01:55,470
parallel until<font color="#E5E5E5"> it hits a branch</font><font color="#CCCCCC"> when it</font>

39
00:01:53,220 --> 00:02:00,090
<font color="#E5E5E5">flushes that pipeline</font><font color="#CCCCCC"> to replace the</font>

40
00:01:55,470 --> 00:02:03,360
instructions with new ones<font color="#CCCCCC"> it's a little</font>

41
00:02:00,090 --> 00:02:05,219
bit of a waste<font color="#E5E5E5"> that these almost</font>

42
00:02:03,360 --> 00:02:07,000
executed<font color="#E5E5E5"> instructions that</font><font color="#CCCCCC"> are already</font>

43
00:02:05,219 --> 00:02:09,489
<font color="#E5E5E5">queued up in the pipeline get</font>

44
00:02:07,000 --> 00:02:11,230
the way but<font color="#E5E5E5"> that's necessary whenever</font>

45
00:02:09,490 --> 00:02:16,060
the branch prediction is wrong<font color="#E5E5E5"> and</font>

46
00:02:11,230 --> 00:02:17,380
that's<font color="#CCCCCC"> also necessary</font><font color="#E5E5E5"> whenever like the</font>

47
00:02:16,060 --> 00:02:20,140
<font color="#CCCCCC">safety</font><font color="#E5E5E5"> of changes for doing something</font>

48
00:02:17,380 --> 00:02:23,049
else like<font color="#CCCCCC"> a mode switch or or</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> sort</font>

49
00:02:20,140 --> 00:02:25,390
of a<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> so the designers came up with</font>

50
00:02:23,050 --> 00:02:28,420
a<font color="#E5E5E5"> simple rule they said whenever there</font>

51
00:02:25,390 --> 00:02:31,690
<font color="#CCCCCC">is a branch</font><font color="#E5E5E5"> such as a function call or</font>

52
00:02:28,420 --> 00:02:34,630
return we're<font color="#E5E5E5"> going to execute</font><font color="#CCCCCC"> the very</font>

53
00:02:31,690 --> 00:02:37,170
next instruction<font color="#CCCCCC"> after that branch or</font>

54
00:02:34,630 --> 00:02:42,100
return<font color="#E5E5E5"> so when you're reading MIPS code</font>

55
00:02:37,170 --> 00:02:43,958
<font color="#E5E5E5">or spark code</font><font color="#CCCCCC"> you'll see</font><font color="#E5E5E5"> in your</font><font color="#CCCCCC"> reverse</font>

56
00:02:42,100 --> 00:02:46,030
engineering tool that the function

57
00:02:43,959 --> 00:02:48,190
<font color="#E5E5E5">doesn't end on the last instruction it</font>

58
00:02:46,030 --> 00:02:50,200
doesn't end<font color="#E5E5E5"> on the return it actually</font>

59
00:02:48,190 --> 00:02:56,020
includes<font color="#E5E5E5"> the very next instruction</font><font color="#CCCCCC"> after</font>

60
00:02:50,200 --> 00:02:58,089
that now<font color="#E5E5E5"> the compiler will only insert</font>

61
00:02:56,020 --> 00:03:00,820
an instruction there if it's actually

62
00:02:58,090 --> 00:03:04,720
going<font color="#E5E5E5"> to be executed so as a reverse</font>

63
00:03:00,820 --> 00:03:06,609
engineer or as a student<font color="#E5E5E5"> reading the</font>

64
00:03:04,720 --> 00:03:10,690
<font color="#CCCCCC">Patterson and</font><font color="#E5E5E5"> Hennessy books on computer</font>

65
00:03:06,610 --> 00:03:13,570
architecture<font color="#CCCCCC"> you are are taught that the</font>

66
00:03:10,690 --> 00:03:15,910
instruction after the branch is executed

67
00:03:13,570 --> 00:03:19,989
<font color="#E5E5E5">and that's how I explain the the</font><font color="#CCCCCC"> rule to</font>

68
00:03:15,910 --> 00:03:22,859
you earlier<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> not quite true though</font>

69
00:03:19,989 --> 00:03:27,000
<font color="#E5E5E5">what actually happens is</font><font color="#CCCCCC"> that the</font>

70
00:03:22,860 --> 00:03:30,459
<font color="#E5E5E5">pipeline stage after</font><font color="#CCCCCC"> the return is</font>

71
00:03:27,000 --> 00:03:32,290
allowed to<font color="#CCCCCC"> finish executing</font><font color="#E5E5E5"> because it's</font>

72
00:03:30,459 --> 00:03:36,220
already<font color="#CCCCCC"> done everything but</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> it's</font>

73
00:03:32,290 --> 00:03:40,120
results back<font color="#E5E5E5"> into the registers and this</font>

74
00:03:36,220 --> 00:03:43,090
is a slightly<font color="#E5E5E5"> different thing</font><font color="#CCCCCC"> so you can</font>

75
00:03:40,120 --> 00:03:45,820
abuse<font color="#E5E5E5"> the difference between the rule of</font>

76
00:03:43,090 --> 00:03:49,239
thumb<font color="#E5E5E5"> which is that the next</font><font color="#CCCCCC"> instruction</font>

77
00:03:45,820 --> 00:03:51,549
is executed and the the physical

78
00:03:49,239 --> 00:03:54,540
<font color="#CCCCCC">behavior which is</font><font color="#E5E5E5"> that the next pipeline</font>

79
00:03:51,549 --> 00:03:57,730
stage<font color="#E5E5E5"> is allowed</font><font color="#CCCCCC"> to complete execution</font>

80
00:03:54,540 --> 00:04:01,450
<font color="#E5E5E5">the way that you can abuse this is you</font>

81
00:03:57,730 --> 00:04:04,660
can put<font color="#CCCCCC"> in an instruction which has a</font>

82
00:04:01,450 --> 00:04:08,380
hazard a hazard is when two<font color="#E5E5E5"> adjacent</font>

83
00:04:04,660 --> 00:04:11,530
instructions<font color="#E5E5E5"> use the same registers</font><font color="#CCCCCC"> the</font>

84
00:04:08,380 --> 00:04:14,079
return<font color="#CCCCCC"> instruction on MIPS uses the</font>

85
00:04:11,530 --> 00:04:17,440
<font color="#E5E5E5">program counter</font><font color="#CCCCCC"> and the link register</font><font color="#E5E5E5"> so</font>

86
00:04:14,079 --> 00:04:20,410
if you have<font color="#E5E5E5"> anything that that depends</font>

87
00:04:17,440 --> 00:04:22,570
<font color="#E5E5E5">upon their values</font>

88
00:04:20,410 --> 00:04:25,990
<font color="#CCCCCC">CPU will push it backward one pipeline</font>

89
00:04:22,570 --> 00:04:30,310
<font color="#E5E5E5">stage and replace and place like a no op</font>

90
00:04:25,990 --> 00:04:34,720
bubble<font color="#E5E5E5"> in between them so what you can</font>

91
00:04:30,310 --> 00:04:37,300
do is in regular 32-bit MIPS code<font color="#E5E5E5"> you</font>

92
00:04:34,720 --> 00:04:40,420
can put two returns<font color="#E5E5E5"> at the</font><font color="#CCCCCC"> end of each</font>

93
00:04:37,300 --> 00:04:44,050
function<font color="#CCCCCC"> and if you have two returns</font><font color="#E5E5E5"> on</font>

94
00:04:40,420 --> 00:04:47,620
a physical<font color="#E5E5E5"> MIPS chip what will happen is</font>

95
00:04:44,050 --> 00:04:51,250
that<font color="#E5E5E5"> at the</font><font color="#CCCCCC"> end of the function it hits</font>

96
00:04:47,620 --> 00:04:55,030
the return and then on physical<font color="#CCCCCC"> hardware</font>

97
00:04:51,250 --> 00:04:56,500
the second return instruction is pushed

98
00:04:55,030 --> 00:04:58,150
back a little bit<font color="#E5E5E5"> and there's a bubble</font>

99
00:04:56,500 --> 00:04:59,740
placed in<font color="#CCCCCC"> between so it's the bubble</font>

100
00:04:58,150 --> 00:05:02,260
<font color="#E5E5E5">that's allowed to</font><font color="#CCCCCC"> finish</font><font color="#E5E5E5"> executing</font>

101
00:04:59,740 --> 00:05:07,030
instead of the second return instruction

102
00:05:02,260 --> 00:05:09,280
on<font color="#CCCCCC"> qmo it doesn't behave that way on qmo</font>

103
00:05:07,030 --> 00:05:12,400
because instructions are emulated in

104
00:05:09,280 --> 00:05:15,669
order and there's no concept of<font color="#E5E5E5"> a</font>

105
00:05:12,400 --> 00:05:19,270
pipeline<font color="#CCCCCC"> gemo will always execute that</font>

106
00:05:15,670 --> 00:05:22,120
instruction after the branch<font color="#CCCCCC"> even if it</font>

107
00:05:19,270 --> 00:05:24,190
has a pipeline hazard<font color="#E5E5E5"> so by simply</font>

108
00:05:22,120 --> 00:05:26,050
doubling up the<font color="#E5E5E5"> return at the end</font><font color="#CCCCCC"> of</font>

109
00:05:24,190 --> 00:05:27,969
every function wherever<font color="#E5E5E5"> you see a</font>

110
00:05:26,050 --> 00:05:29,320
function<font color="#E5E5E5"> ending with</font><font color="#CCCCCC"> a know up</font><font color="#E5E5E5"> you can</font>

111
00:05:27,970 --> 00:05:32,880
<font color="#E5E5E5">just replace that with another return</font>

112
00:05:29,320 --> 00:05:35,680
<font color="#E5E5E5">that will break compatibility with</font><font color="#CCCCCC"> qmo</font>

113
00:05:32,880 --> 00:05:37,900
<font color="#CCCCCC">unfortunately it does this by crashing</font>

114
00:05:35,680 --> 00:05:41,050
and what you'd rather have<font color="#CCCCCC"> happen is</font>

115
00:05:37,900 --> 00:05:43,299
<font color="#E5E5E5">that you could discreetly sneakily</font>

116
00:05:41,050 --> 00:05:45,760
identify that<font color="#E5E5E5"> you're running on an</font>

117
00:05:43,300 --> 00:05:47,770
emulator<font color="#E5E5E5"> without crashing your program</font>

118
00:05:45,760 --> 00:05:50,469
or triggering<font color="#CCCCCC"> a fault or an</font><font color="#E5E5E5"> illegal</font>

119
00:05:47,770 --> 00:05:51,940
instruction so the way<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you can do</font>

120
00:05:50,470 --> 00:05:54,550
that is<font color="#CCCCCC"> that</font>

121
00:05:51,940 --> 00:05:57,490
<font color="#CCCCCC">Nitz chips like</font><font color="#E5E5E5"> ARM chips have two</font>

122
00:05:54,550 --> 00:06:00,190
different<font color="#E5E5E5"> instruction sets they have</font>

123
00:05:57,490 --> 00:06:02,680
regular MIPS which is called mips32 now

124
00:06:00,190 --> 00:06:06,460
and they also have an<font color="#E5E5E5"> abbreviated form</font>

125
00:06:02,680 --> 00:06:09,730
<font color="#E5E5E5">of MIPS called MIPS</font><font color="#CCCCCC"> sixteen mid sixteen</font>

126
00:06:06,460 --> 00:06:12,489
is like thumb<font color="#E5E5E5"> to arm and just like arm</font>

127
00:06:09,730 --> 00:06:15,550
and thumb<font color="#E5E5E5"> and unlike the shortened form</font>

128
00:06:12,490 --> 00:06:17,410
<font color="#CCCCCC">of PowerPC the least significant bit of</font>

129
00:06:15,550 --> 00:06:20,080
<font color="#CCCCCC">your program counter determines which</font>

130
00:06:17,410 --> 00:06:23,380
instructions that you're using<font color="#E5E5E5"> so</font><font color="#CCCCCC"> if you</font>

131
00:06:20,080 --> 00:06:25,359
use if you<font color="#E5E5E5"> if you branch to an odd</font>

132
00:06:23,380 --> 00:06:28,060
address if you<font color="#E5E5E5"> call an odd function</font>

133
00:06:25,360 --> 00:06:30,520
pointer<font color="#E5E5E5"> then you execute the code at</font>

134
00:06:28,060 --> 00:06:32,590
<font color="#CCCCCC">that address in MIPS sixteen mode and an</font>

135
00:06:30,520 --> 00:06:34,150
even address will execute that<font color="#E5E5E5"> code in</font>

136
00:06:32,590 --> 00:06:39,310
mips32 mode

137
00:06:34,150 --> 00:06:43,210
so in<font color="#E5E5E5"> nip 16</font><font color="#CCCCCC"> which is also a risk</font>

138
00:06:39,310 --> 00:06:45,970
instruction set<font color="#CCCCCC"> you have fixed with</font>

139
00:06:43,210 --> 00:06:52,780
16-bit<font color="#E5E5E5"> instructions which are variable</font>

140
00:06:45,970 --> 00:06:54,760
<font color="#E5E5E5">with what I mean by this is that even</font>

141
00:06:52,780 --> 00:06:57,669
<font color="#E5E5E5">though your assembler</font><font color="#CCCCCC"> or your</font>

142
00:06:54,760 --> 00:07:02,880
disassembler<font color="#E5E5E5"> will tell you that you that</font>

143
00:06:57,669 --> 00:07:04,690
say<font color="#E5E5E5"> a branch for example is</font><font color="#CCCCCC"> 2</font>

144
00:07:02,880 --> 00:07:07,630
instruction where it's long but it's

145
00:07:04,690 --> 00:07:10,180
it's 32 bits<font color="#E5E5E5"> wide instead of 16 it's</font>

146
00:07:07,630 --> 00:07:12,760
actually<font color="#E5E5E5"> two 16-bit instructions that</font>

147
00:07:10,180 --> 00:07:14,650
<font color="#CCCCCC">are next to each other and the way that</font>

148
00:07:12,760 --> 00:07:17,440
it works physically is that the first

149
00:07:14,650 --> 00:07:20,859
<font color="#E5E5E5">instruction hangs around in</font><font color="#CCCCCC"> the</font>

150
00:07:17,440 --> 00:07:22,719
instruction decoder<font color="#E5E5E5"> to change the</font>

151
00:07:20,860 --> 00:07:28,110
meaning<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the instruction that comes</font>

152
00:07:22,720 --> 00:07:32,229
after it<font color="#E5E5E5"> so for example if you have a an</font>

153
00:07:28,110 --> 00:07:34,570
ADD immediate<font color="#E5E5E5"> extended instruction this</font>

154
00:07:32,229 --> 00:07:36,789
adds some immediate bits to a register

155
00:07:34,570 --> 00:07:39,070
and the extended part means that<font color="#CCCCCC"> the</font>

156
00:07:36,789 --> 00:07:42,430
first word<font color="#E5E5E5"> contains additional in</font>

157
00:07:39,070 --> 00:07:46,570
immediate bits that are added on to your

158
00:07:42,430 --> 00:07:49,210
result<font color="#E5E5E5"> physically what happens is</font><font color="#CCCCCC"> that</font>

159
00:07:46,570 --> 00:07:51,039
the first instruction<font color="#CCCCCC"> hangs around in</font>

160
00:07:49,210 --> 00:07:52,710
<font color="#CCCCCC">the instruction decoder and allows a</font>

161
00:07:51,039 --> 00:07:54,820
bubble to move forward in the pipeline

162
00:07:52,710 --> 00:07:57,010
<font color="#CCCCCC">so that when the second instruction</font>

163
00:07:54,820 --> 00:07:59,950
arrives<font color="#E5E5E5"> in the instruction decoder its</font>

164
00:07:57,010 --> 00:08:03,099
meaning has<font color="#CCCCCC"> changed</font><font color="#E5E5E5"> now if you put one</font>

165
00:07:59,950 --> 00:08:06,969
<font color="#CCCCCC">of these wide instructions</font><font color="#E5E5E5"> into</font><font color="#CCCCCC"> the</font>

166
00:08:03,099 --> 00:08:12,159
branch<font color="#E5E5E5"> delay slot what happens well on</font>

167
00:08:06,970 --> 00:08:15,330
physical<font color="#E5E5E5"> hardware the decoding the</font>

168
00:08:12,160 --> 00:08:17,830
instruction decoder<font color="#E5E5E5"> takes the first word</font>

169
00:08:15,330 --> 00:08:20,409
allows<font color="#E5E5E5"> the bubble to move forward as it</font>

170
00:08:17,830 --> 00:08:22,330
changes<font color="#E5E5E5"> the the</font><font color="#CCCCCC"> word that</font><font color="#E5E5E5"> comes after so</font>

171
00:08:20,410 --> 00:08:24,760
when this isn't a branch delay slot in

172
00:08:22,330 --> 00:08:31,510
physical<font color="#CCCCCC"> hardware</font><font color="#E5E5E5"> only the bubble is</font>

173
00:08:24,760 --> 00:08:35,039
executed in<font color="#CCCCCC"> Q mu and in unita</font><font color="#E5E5E5"> prose</font>

174
00:08:31,510 --> 00:08:35,039
since we like to bash<font color="#E5E5E5"> Ida Pro here</font>

175
00:08:35,610 --> 00:08:40,300
because it's disassembling each

176
00:08:37,809 --> 00:08:43,689
instruction<font color="#E5E5E5"> and because all this</font>

177
00:08:40,299 --> 00:08:44,979
assembler writers learned on x86<font color="#E5E5E5"> where</font>

178
00:08:43,690 --> 00:08:47,510
it's<font color="#E5E5E5"> completely natural</font><font color="#CCCCCC"> to have</font><font color="#E5E5E5"> a</font>

179
00:08:44,980 --> 00:08:51,260
<font color="#CCCCCC">variable-width instruction</font>

180
00:08:47,510 --> 00:08:56,900
<font color="#E5E5E5">we'll believe that the wide instruction</font>

181
00:08:51,260 --> 00:08:58,580
is the final word<font color="#E5E5E5"> of the function</font><font color="#CCCCCC"> when</font>

182
00:08:56,900 --> 00:09:00,770
<font color="#E5E5E5">in fact it's completely ignored so if</font>

183
00:08:58,580 --> 00:09:02,690
you take an ADD immediate<font color="#E5E5E5"> extended</font>

184
00:09:00,770 --> 00:09:06,380
<font color="#CCCCCC">instruction at the</font><font color="#E5E5E5"> end to add just one</font>

185
00:09:02,690 --> 00:09:08,060
to your<font color="#E5E5E5"> return register and you have a</font>

186
00:09:06,380 --> 00:09:10,970
return<font color="#CCCCCC"> instruction before</font><font color="#E5E5E5"> that you have</font>

187
00:09:08,060 --> 00:09:13,910
a<font color="#E5E5E5"> six byte function that will return its</font>

188
00:09:10,970 --> 00:09:17,210
first<font color="#CCCCCC"> parameter on real hardware</font><font color="#E5E5E5"> or one</font>

189
00:09:13,910 --> 00:09:19,760
more than that<font color="#CCCCCC"> on an emulator</font><font color="#E5E5E5"> so you can</font>

190
00:09:17,210 --> 00:09:23,390
write MIPS code<font color="#E5E5E5"> using these tricks that</font>

191
00:09:19,760 --> 00:09:27,410
will do whatever malicious function you

192
00:09:23,390 --> 00:09:29,449
like inside<font color="#CCCCCC"> of say a home router but</font>

193
00:09:27,410 --> 00:09:32,120
<font color="#E5E5E5">when you try and take</font><font color="#CCCCCC"> that same code and</font>

194
00:09:29,450 --> 00:09:34,100
load it up in QA mo in order to trace it

195
00:09:32,120 --> 00:09:35,480
<font color="#E5E5E5">and debug it</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> reverse-engineer it it</font>

196
00:09:34,100 --> 00:09:42,470
can have completely different behavior

197
00:09:35,480 --> 00:09:45,850
<font color="#CCCCCC">than that nifty so like whenever</font><font color="#E5E5E5"> you</font>

198
00:09:42,470 --> 00:09:49,160
have these weird effects<font color="#E5E5E5"> inside of</font>

199
00:09:45,850 --> 00:09:51,260
inside a physical hardware<font color="#E5E5E5"> that</font>

200
00:09:49,160 --> 00:09:53,839
emulators don't need to get right in

201
00:09:51,260 --> 00:09:56,240
order<font color="#CCCCCC"> to run</font><font color="#E5E5E5"> code as is produced by</font>

202
00:09:53,840 --> 00:09:59,630
compilers<font color="#CCCCCC"> you wind up</font><font color="#E5E5E5"> with little edge</font>

203
00:09:56,240 --> 00:10:04,970
cases<font color="#E5E5E5"> that you can abuse in the case of</font>

204
00:09:59,630 --> 00:10:08,390
<font color="#E5E5E5">MIPS 16 nip 16 existed as an instruction</font>

205
00:10:04,970 --> 00:10:11,180
set for<font color="#E5E5E5"> quite a while before Linux</font>

206
00:10:08,390 --> 00:10:12,860
distributions<font color="#E5E5E5"> like open wrt would ever</font>

207
00:10:11,180 --> 00:10:15,140
compile with it because<font color="#E5E5E5"> the compilers</font>

208
00:10:12,860 --> 00:10:18,440
weren't reliable enough and unlike

209
00:10:15,140 --> 00:10:20,150
mips32<font color="#E5E5E5"> where the compilers regularly put</font>

210
00:10:18,440 --> 00:10:23,330
an instruction into the branch<font color="#E5E5E5"> delay</font>

211
00:10:20,150 --> 00:10:26,890
slot<font color="#CCCCCC"> MIPS 16 compiler will almost always</font>

212
00:10:23,330 --> 00:10:30,830
leave them as no ops<font color="#E5E5E5"> because it's not</font>

213
00:10:26,890 --> 00:10:34,760
confident enough<font color="#CCCCCC"> that they that they</font>

214
00:10:30,830 --> 00:10:37,100
will<font color="#E5E5E5"> work</font><font color="#CCCCCC"> you can also use these exposed</font>

215
00:10:34,760 --> 00:10:41,480
pipeline tricks in order<font color="#E5E5E5"> to make code</font>

216
00:10:37,100 --> 00:10:44,810
that runs on<font color="#E5E5E5"> on one revision of a chip</font>

217
00:10:41,480 --> 00:10:46,370
but<font color="#E5E5E5"> not on another</font><font color="#CCCCCC"> C you can use them to</font>

218
00:10:44,810 --> 00:10:50,030
say make code that will run<font color="#CCCCCC"> on a loom</font>

219
00:10:46,370 --> 00:10:52,460
<font color="#CCCCCC">son mips chip</font><font color="#E5E5E5"> from china but not the</font>

220
00:10:50,030 --> 00:10:56,810
imagination technologies mips chips that

221
00:10:52,460 --> 00:10:57,950
are<font color="#E5E5E5"> designed in the</font><font color="#CCCCCC"> West so that's a</font>

222
00:10:56,810 --> 00:11:01,449
nifty<font color="#E5E5E5"> little trick</font><font color="#CCCCCC"> and I thought I would</font>

223
00:10:57,950 --> 00:11:01,450
share it<font color="#CCCCCC"> with you</font><font color="#E5E5E5"> thank you kindly</font>

224
00:11:05,580 --> 00:11:12,410
[Applause]

225
00:11:06,790 --> 00:11:16,010
<font color="#CCCCCC">thanks dude</font><font color="#E5E5E5"> - a question</font><font color="#CCCCCC"> I have a</font>

226
00:11:12,410 --> 00:11:22,219
<font color="#CCCCCC">question if someone could please</font><font color="#E5E5E5"> get me</font>

227
00:11:16,010 --> 00:11:25,910
a bucket<font color="#E5E5E5"> about this big</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> enough ice</font>

228
00:11:22,220 --> 00:11:31,220
to<font color="#E5E5E5"> fill the bucket to the top and enough</font>

229
00:11:25,910 --> 00:11:34,880
<font color="#E5E5E5">water to wet the ice and I also need a</font>

230
00:11:31,220 --> 00:11:37,520
half kilogram of<font color="#E5E5E5"> salt and one of these</font>

231
00:11:34,880 --> 00:11:39,370
bottles<font color="#CCCCCC"> of</font><font color="#E5E5E5"> beer from the front</font><font color="#CCCCCC"> I would</font>

232
00:11:37,520 --> 00:11:45,189
<font color="#E5E5E5">appreciate that very much thank you</font>

233
00:11:39,370 --> 00:11:45,190
[Laughter]

