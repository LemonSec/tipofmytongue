1
00:00:00,439 --> 00:00:06,029
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> I'm going to talk about our to</font>

2
00:00:03,000 --> 00:00:08,370
<font color="#E5E5E5">Frieda which is obviously way to</font>

3
00:00:06,029 --> 00:00:10,139
integrate<font color="#CCCCCC"> our two and Frieda how many</font>

4
00:00:08,370 --> 00:00:17,009
people here doesn't<font color="#E5E5E5"> know anything about</font>

5
00:00:10,139 --> 00:00:18,979
freedom<font color="#E5E5E5"> okay try to squash and then time</font>

6
00:00:17,010 --> 00:00:23,460
<font color="#CCCCCC">Frieda in two slides I don't know if</font>

7
00:00:18,980 --> 00:00:25,439
it's it's<font color="#E5E5E5"> it it's enough</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> well</font><font color="#CCCCCC"> three</font>

8
00:00:23,460 --> 00:00:31,439
lights an open-source project<font color="#E5E5E5"> created by</font>

9
00:00:25,439 --> 00:00:34,710
<font color="#CCCCCC">Allah</font><font color="#E5E5E5"> which is their initial it was a</font>

10
00:00:31,439 --> 00:00:37,590
one-man<font color="#E5E5E5"> band but then now there's a</font>

11
00:00:34,710 --> 00:00:43,829
community<font color="#E5E5E5"> which is growing it's very</font>

12
00:00:37,590 --> 00:00:46,070
nice<font color="#CCCCCC"> what it does is just to allow the</font>

13
00:00:43,829 --> 00:00:49,440
<font color="#E5E5E5">dynamic analysis</font><font color="#CCCCCC"> of application by</font>

14
00:00:46,070 --> 00:00:53,280
injecting<font color="#E5E5E5"> a thread in an</font><font color="#CCCCCC"> application a</font>

15
00:00:49,440 --> 00:00:55,680
running<font color="#CCCCCC"> application in user space and</font>

16
00:00:53,280 --> 00:01:00,239
then spawn a<font color="#CCCCCC"> JavaScript engine</font><font color="#E5E5E5"> from</font>

17
00:00:55,680 --> 00:01:03,359
there<font color="#CCCCCC"> to endure you</font><font color="#E5E5E5"> have an agent which</font>

18
00:01:00,239 --> 00:01:05,309
is<font color="#CCCCCC"> a from</font><font color="#E5E5E5"> with which you can communicate</font>

19
00:01:03,359 --> 00:01:09,750
back and forth<font color="#E5E5E5"> with the application and</font>

20
00:01:05,309 --> 00:01:12,270
run instrumentations<font color="#E5E5E5"> on it the target</font>

21
00:01:09,750 --> 00:01:18,930
<font color="#CCCCCC">application may be also</font><font color="#E5E5E5"> on a mobile</font>

22
00:01:12,270 --> 00:01:22,320
device<font color="#CCCCCC"> this is the kind of things you</font>

23
00:01:18,930 --> 00:01:25,530
can you can do so from reading writing

24
00:01:22,320 --> 00:01:29,029
process<font color="#CCCCCC"> memory also</font><font color="#E5E5E5"> to manipulate the</font>

25
00:01:25,530 --> 00:01:32,990
metadata<font color="#E5E5E5"> of the binary</font><font color="#CCCCCC"> and access the</font>

26
00:01:29,030 --> 00:01:36,540
exported functions or debug symbols and

27
00:01:32,990 --> 00:01:40,470
you can interact<font color="#CCCCCC"> with native functions</font>

28
00:01:36,540 --> 00:01:43,860
<font color="#CCCCCC">both by calling them or maybe hooking</font>

29
00:01:40,470 --> 00:01:46,079
them to to<font color="#E5E5E5"> be called when</font><font color="#CCCCCC"> the when the a</font>

30
00:01:43,860 --> 00:01:48,740
function is<font color="#CCCCCC"> called</font><font color="#E5E5E5"> and you can</font>

31
00:01:46,079 --> 00:01:52,919
manipulate parameters at runtime<font color="#E5E5E5"> or</font>

32
00:01:48,740 --> 00:01:56,070
change the return<font color="#E5E5E5"> value with the</font>

33
00:01:52,920 --> 00:01:58,950
<font color="#CCCCCC">Interceptor or also you can also access</font>

34
00:01:56,070 --> 00:02:01,289
<font color="#E5E5E5">if the Objective C or Java</font><font color="#CCCCCC"> Runtime is</font>

35
00:01:58,950 --> 00:02:03,360
present you<font color="#E5E5E5"> can access that only the</font>

36
00:02:01,290 --> 00:02:08,250
list of all<font color="#E5E5E5"> the classes</font><font color="#CCCCCC"> and methods</font><font color="#E5E5E5"> and</font>

37
00:02:03,360 --> 00:02:12,180
you can both implement classes or<font color="#E5E5E5"> call</font>

38
00:02:08,250 --> 00:02:13,210
methods or instance classes or interact

39
00:02:12,180 --> 00:02:16,840
with them

40
00:02:13,210 --> 00:02:20,460
time<font color="#E5E5E5"> there's another component of</font><font color="#CCCCCC"> that</font>

41
00:02:16,840 --> 00:02:23,110
this<font color="#E5E5E5"> is the</font><font color="#CCCCCC"> stoker</font><font color="#E5E5E5"> which instead of</font>

42
00:02:20,460 --> 00:02:26,100
<font color="#E5E5E5">modify the code of the</font><font color="#CCCCCC"> applications in</font>

43
00:02:23,110 --> 00:02:30,700
order<font color="#E5E5E5"> to do some instrumentation it</font>

44
00:02:26,100 --> 00:02:32,859
hijacks<font color="#E5E5E5"> the thread into</font><font color="#CCCCCC"> a shadow copy of</font>

45
00:02:30,700 --> 00:02:35,109
it<font color="#CCCCCC"> a modified copy with all the</font>

46
00:02:32,860 --> 00:02:37,500
instrumentation so<font color="#E5E5E5"> we</font><font color="#CCCCCC"> are able</font><font color="#E5E5E5"> to do</font>

47
00:02:35,110 --> 00:02:40,780
things like<font color="#E5E5E5"> getting the list of all</font>

48
00:02:37,500 --> 00:02:44,920
machine code<font color="#E5E5E5"> instruction run and also</font>

49
00:02:40,780 --> 00:02:47,230
manipulate them<font color="#E5E5E5"> runtime</font><font color="#CCCCCC"> the idea is that</font>

50
00:02:44,920 --> 00:02:52,179
<font color="#E5E5E5">a</font><font color="#CCCCCC"> frida is a</font><font color="#E5E5E5"> framework you can build</font>

51
00:02:47,230 --> 00:02:52,840
things on top of<font color="#E5E5E5"> it and for duty for</font>

52
00:02:52,180 --> 00:02:54,600
doing that

53
00:02:52,840 --> 00:03:01,590
there are bindings in many languages

54
00:02:54,600 --> 00:03:04,810
mostly C or Python or<font color="#CCCCCC"> Swift</font><font color="#E5E5E5"> - maybe yeah</font>

55
00:03:01,590 --> 00:03:07,660
this is the breakdown<font color="#CCCCCC"> of</font><font color="#E5E5E5"> architectures</font>

56
00:03:04,810 --> 00:03:09,510
and operating system supported by

57
00:03:07,660 --> 00:03:13,299
<font color="#CCCCCC">freedom</font>

58
00:03:09,510 --> 00:03:15,760
obviously<font color="#E5E5E5"> this can be</font><font color="#CCCCCC"> grow this</font><font color="#E5E5E5"> is a</font>

59
00:03:13,300 --> 00:03:18,280
growing<font color="#E5E5E5"> list as soon as people add</font>

60
00:03:15,760 --> 00:03:21,399
support for an architectural interest

61
00:03:18,280 --> 00:03:23,500
because it's the<font color="#E5E5E5"> structure of</font><font color="#CCCCCC"> frida is</font>

62
00:03:21,400 --> 00:03:25,900
that there's the lower level which is

63
00:03:23,500 --> 00:03:28,330
machine dependent and then going<font color="#E5E5E5"> high to</font>

64
00:03:25,900 --> 00:03:31,300
the levels everything is portable so

65
00:03:28,330 --> 00:03:32,890
<font color="#E5E5E5">from JavaScript you can just</font><font color="#CCCCCC"> hook this</font>

66
00:03:31,300 --> 00:03:36,250
the functions in the<font color="#E5E5E5"> same way</font><font color="#CCCCCC"> in</font>

67
00:03:32,890 --> 00:03:38,920
depending<font color="#CCCCCC"> from there then the operating</font>

68
00:03:36,250 --> 00:03:42,930
<font color="#E5E5E5">system or architecture everything is</font>

69
00:03:38,920 --> 00:03:46,209
abstracted so for example when you<font color="#CCCCCC"> have</font>

70
00:03:42,930 --> 00:03:49,060
your code instrument in<font color="#E5E5E5"> Objective C on</font>

71
00:03:46,210 --> 00:03:58,030
Mac probably it would<font color="#E5E5E5"> work all the same</font>

72
00:03:49,060 --> 00:04:02,170
<font color="#CCCCCC">also on iOS or ok - Frida is implemented</font>

73
00:03:58,030 --> 00:04:05,260
as an<font color="#E5E5E5"> ILO</font><font color="#CCCCCC"> plugin naturally because since</font>

74
00:04:02,170 --> 00:04:07,839
Frida provides<font color="#E5E5E5"> readwrite access to the</font>

75
00:04:05,260 --> 00:04:10,690
to the process you<font color="#E5E5E5"> can just attach</font><font color="#CCCCCC"> to</font>

76
00:04:07,840 --> 00:04:14,560
<font color="#CCCCCC">process and open its memory like a</font>

77
00:04:10,690 --> 00:04:17,920
<font color="#E5E5E5">buffering</font><font color="#CCCCCC"> radar and so from there you</font>

78
00:04:14,560 --> 00:04:20,200
can use<font color="#E5E5E5"> the</font><font color="#CCCCCC"> regular</font><font color="#E5E5E5"> order comments so</font>

79
00:04:17,920 --> 00:04:21,880
you<font color="#E5E5E5"> can go and analyze functions and</font>

80
00:04:20,200 --> 00:04:23,820
<font color="#E5E5E5">this assembly stuff on the runtime</font>

81
00:04:21,880 --> 00:04:28,919
<font color="#CCCCCC">application the running</font>

82
00:04:23,820 --> 00:04:33,120
but also provides is a long<font color="#E5E5E5"> list of</font>

83
00:04:28,919 --> 00:04:39,030
comments<font color="#E5E5E5"> which</font><font color="#CCCCCC"> we're going</font><font color="#E5E5E5"> through these</font>

84
00:04:33,120 --> 00:04:43,860
<font color="#E5E5E5">now if</font><font color="#CCCCCC"> you're</font><font color="#E5E5E5"> ready</font><font color="#CCCCCC"> to provide</font><font color="#E5E5E5"> also more</font>

85
00:04:39,030 --> 00:04:48,299
features to<font color="#CCCCCC"> - or to leveraging the</font>

86
00:04:43,860 --> 00:04:52,320
freedom of functionalities so basically

87
00:04:48,300 --> 00:04:54,000
all<font color="#E5E5E5"> these features are aimed to do at</font>

88
00:04:52,320 --> 00:04:58,590
the<font color="#E5E5E5"> back of the application which is</font>

89
00:04:54,000 --> 00:05:01,349
<font color="#E5E5E5">without a debugger so scriptable and</font>

90
00:04:58,590 --> 00:05:06,150
also more stealthy than<font color="#E5E5E5"> the normal</font>

91
00:05:01,349 --> 00:05:14,039
debugging<font color="#CCCCCC"> you can install it using</font><font color="#E5E5E5"> our 2</font>

92
00:05:06,150 --> 00:05:17,400
p.m. or just clone it from get<font color="#CCCCCC"> ok to</font>

93
00:05:14,039 --> 00:05:22,860
start it up<font color="#CCCCCC"> you you</font><font color="#E5E5E5"> just have to use the</font>

94
00:05:17,400 --> 00:05:26,219
<font color="#CCCCCC">Frida your skin URL scheme and there are</font>

95
00:05:22,860 --> 00:05:28,409
two ways to<font color="#E5E5E5"> to to run it so you can</font>

96
00:05:26,220 --> 00:05:32,490
<font color="#E5E5E5">attach</font><font color="#CCCCCC"> to an existing process</font><font color="#E5E5E5"> by</font>

97
00:05:28,409 --> 00:05:34,979
specifying the<font color="#E5E5E5"> name or the pit or spawn</font>

98
00:05:32,490 --> 00:05:38,250
a process<font color="#E5E5E5"> by specifying the the full</font>

99
00:05:34,979 --> 00:05:41,849
path of<font color="#CCCCCC"> the process with arguments to</font><font color="#E5E5E5"> if</font>

100
00:05:38,250 --> 00:05:48,180
needed<font color="#E5E5E5"> and on the mobile device you have</font>

101
00:05:41,849 --> 00:05:50,969
<font color="#E5E5E5">to specify the package name when you</font>

102
00:05:48,180 --> 00:05:53,849
spawn a process with<font color="#E5E5E5"> Frida</font><font color="#CCCCCC"> the process</font>

103
00:05:50,970 --> 00:05:56,280
is suspended<font color="#CCCCCC"> because</font><font color="#E5E5E5"> it allows</font><font color="#CCCCCC"> to</font>

104
00:05:53,849 --> 00:05:58,229
instrument everything before the

105
00:05:56,280 --> 00:06:00,690
<font color="#CCCCCC">application even</font><font color="#E5E5E5"> has the chance to run</font>

106
00:05:58,229 --> 00:06:05,280
any code so you can bypass<font color="#E5E5E5"> also</font>

107
00:06:00,690 --> 00:06:08,880
detection of injection<font color="#E5E5E5"> or early things</font>

108
00:06:05,280 --> 00:06:11,130
that are needed<font color="#E5E5E5"> but when you have to</font>

109
00:06:08,880 --> 00:06:14,310
when the instrumentation<font color="#E5E5E5"> is done you can</font>

110
00:06:11,130 --> 00:06:17,070
just resume the process<font color="#E5E5E5"> the</font><font color="#CCCCCC"> comment to</font>

111
00:06:14,310 --> 00:06:19,979
do that<font color="#E5E5E5"> is VC you see that there's a</font>

112
00:06:17,070 --> 00:06:22,409
slash because<font color="#E5E5E5"> at the beginning</font><font color="#CCCCCC"> of all</font>

113
00:06:19,979 --> 00:06:28,250
the comments because<font color="#E5E5E5"> these</font><font color="#CCCCCC"> comments goes</font>

114
00:06:22,409 --> 00:06:31,770
through<font color="#CCCCCC"> they are</font><font color="#E5E5E5"> to free the</font><font color="#CCCCCC"> plug-in so</font>

115
00:06:28,250 --> 00:06:36,090
here I will<font color="#CCCCCC"> go through every comment</font><font color="#E5E5E5"> so</font>

116
00:06:31,770 --> 00:06:36,690
but to<font color="#E5E5E5"> avoid the you to fall asleep</font><font color="#CCCCCC"> I</font>

117
00:06:36,090 --> 00:06:39,960
<font color="#E5E5E5">will</font>

118
00:06:36,690 --> 00:06:47,910
make a quick<font color="#E5E5E5"> demo now and show</font><font color="#CCCCCC"> something</font>

119
00:06:39,960 --> 00:06:55,580
live so here I have<font color="#E5E5E5"> treated a plication</font>

120
00:06:47,910 --> 00:06:55,580
running on my Mac carried that or

121
00:06:55,640 --> 00:07:05,580
attached to<font color="#CCCCCC"> it</font>

122
00:06:57,270 --> 00:07:07,620
and I mean for<font color="#E5E5E5"> example I can here these</font>

123
00:07:05,580 --> 00:07:10,710
are<font color="#E5E5E5"> there are two</font><font color="#CCCCCC"> Frieda</font><font color="#E5E5E5"> comments</font>

124
00:07:07,620 --> 00:07:16,650
so with back slash question mark you get

125
00:07:10,710 --> 00:07:18,810
<font color="#E5E5E5">all the list of mostly all the list</font><font color="#CCCCCC"> for</font>

126
00:07:16,650 --> 00:07:21,419
example here we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> an objective-c</font>

127
00:07:18,810 --> 00:07:25,170
runtime<font color="#CCCCCC"> so we can for</font><font color="#E5E5E5"> example list or</font>

128
00:07:21,420 --> 00:07:27,150
classes<font color="#CCCCCC"> they</font><font color="#E5E5E5"> are many so because you</font>

129
00:07:25,170 --> 00:07:29,040
have<font color="#E5E5E5"> also</font><font color="#CCCCCC"> all the system classes and</font>

130
00:07:27,150 --> 00:07:32,130
<font color="#E5E5E5">everything but for example if I'm</font>

131
00:07:29,040 --> 00:07:33,960
interested<font color="#E5E5E5"> for example in only the</font><font color="#CCCCCC"> app</font>

132
00:07:32,130 --> 00:07:36,810
<font color="#CCCCCC">delegate I can use the great</font>

133
00:07:33,960 --> 00:07:38,909
functionality of radar<font color="#CCCCCC"> and just see</font>

134
00:07:36,810 --> 00:07:42,750
what's the name of<font color="#E5E5E5"> the app delegate</font>

135
00:07:38,910 --> 00:07:47,160
<font color="#E5E5E5">class if I want to see their methods</font>

136
00:07:42,750 --> 00:07:50,760
<font color="#E5E5E5">it's like specifying also</font><font color="#CCCCCC"> them</font><font color="#E5E5E5"> they cost</font>

137
00:07:47,160 --> 00:07:55,010
<font color="#CCCCCC">name to the icy common and here the list</font>

138
00:07:50,760 --> 00:07:59,280
of methods<font color="#CCCCCC"> for</font><font color="#E5E5E5"> example</font><font color="#CCCCCC"> if we will go to</font>

139
00:07:55,010 --> 00:08:10,200
the did finish launching method we can

140
00:07:59,280 --> 00:08:16,619
just analyze it and<font color="#CCCCCC"> go there can also</font>

141
00:08:10,200 --> 00:08:18,830
emulate stuff<font color="#E5E5E5"> can read anything</font><font color="#CCCCCC"> from</font>

142
00:08:16,620 --> 00:08:18,830
that

143
00:08:22,350 --> 00:08:25,130
yeah

144
00:08:28,349 --> 00:08:44,779
I can also do it<font color="#CCCCCC"> like this still feel</font>

145
00:08:36,089 --> 00:08:44,779
smaller yeah okay

146
00:08:50,820 --> 00:09:00,300
<font color="#E5E5E5">okay</font>

147
00:08:52,530 --> 00:09:02,310
so for example here<font color="#CCCCCC"> you read now</font><font color="#E5E5E5"> for</font>

148
00:09:00,300 --> 00:09:06,270
example here we<font color="#CCCCCC"> are</font><font color="#E5E5E5"> seeing</font><font color="#CCCCCC"> metal names</font>

149
00:09:02,310 --> 00:09:08,729
<font color="#E5E5E5">because of</font><font color="#CCCCCC"> emulations</font><font color="#E5E5E5"> but we can't see</font>

150
00:09:06,270 --> 00:09:12,689
the function which is<font color="#CCCCCC"> called</font><font color="#E5E5E5"> so for</font>

151
00:09:08,730 --> 00:09:15,780
<font color="#E5E5E5">example we can with the</font><font color="#CCCCCC"> I I common I can</font>

152
00:09:12,690 --> 00:09:18,690
import the imports<font color="#E5E5E5"> from a module for</font>

153
00:09:15,780 --> 00:09:22,170
example<font color="#CCCCCC"> them these are all</font><font color="#E5E5E5"> library is</font>

154
00:09:18,690 --> 00:09:26,130
loaded<font color="#E5E5E5"> with</font><font color="#CCCCCC"> il common the first one is</font>

155
00:09:22,170 --> 00:09:31,680
the<font color="#E5E5E5"> application module</font><font color="#CCCCCC"> I can just import</font>

156
00:09:26,130 --> 00:09:34,140
<font color="#E5E5E5">all the imports using this syntax so now</font>

157
00:09:31,680 --> 00:09:39,839
I can see that<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> calling the the</font>

158
00:09:34,140 --> 00:09:50,060
<font color="#E5E5E5">message the message send method</font><font color="#CCCCCC"> so if I</font>

159
00:09:39,840 --> 00:09:50,060
go<font color="#CCCCCC"> down</font><font color="#E5E5E5"> there I can see for example</font>

160
00:09:57,040 --> 00:10:03,699
that the<font color="#E5E5E5"> shared Twitter method is called</font>

161
00:09:59,910 --> 00:10:07,089
<font color="#CCCCCC">so I want to</font><font color="#E5E5E5"> see for example here you</font>

162
00:10:03,699 --> 00:10:09,519
<font color="#E5E5E5">can</font><font color="#CCCCCC"> see the method name</font><font color="#E5E5E5"> but we can do we</font>

163
00:10:07,089 --> 00:10:11,920
cannot know<font color="#CCCCCC"> the class because Objective</font>

164
00:10:09,519 --> 00:10:15,459
<font color="#E5E5E5">C is run is resolving the method</font><font color="#CCCCCC"> runtime</font>

165
00:10:11,920 --> 00:10:18,759
<font color="#E5E5E5">so one way to do that with freedom it's</font>

166
00:10:15,459 --> 00:10:21,008
just with the evil common we can just

167
00:10:18,759 --> 00:10:26,500
<font color="#E5E5E5">run freed our JavaScript code inside</font>

168
00:10:21,009 --> 00:10:32,259
this session<font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example I can do</font><font color="#CCCCCC"> ap</font>

169
00:10:26,500 --> 00:10:39,069
resolver API resolver<font color="#CCCCCC"> which to which you</font>

170
00:10:32,259 --> 00:10:41,589
can pass a query and resolve the method

171
00:10:39,069 --> 00:10:44,139
for<font color="#E5E5E5"> example we don't know if it's static</font>

172
00:10:41,589 --> 00:10:57,240
or not we don't<font color="#E5E5E5"> know the class name but</font>

173
00:10:44,139 --> 00:10:57,240
we know the name<font color="#CCCCCC"> and in this way typos</font>

174
00:10:58,380 --> 00:11:06,459
okay<font color="#E5E5E5"> we get that the class name from for</font>

175
00:11:03,880 --> 00:11:13,209
<font color="#E5E5E5">that method and we can just use this</font>

176
00:11:06,459 --> 00:11:16,119
information<font color="#E5E5E5"> and explore more these are</font>

177
00:11:13,209 --> 00:11:19,359
the method of the<font color="#CCCCCC"> Twitter object that</font>

178
00:11:16,120 --> 00:11:23,620
with<font color="#E5E5E5"> the class for example this is an</font>

179
00:11:19,360 --> 00:11:27,040
interesting signing with username<font color="#E5E5E5"> and</font>

180
00:11:23,620 --> 00:11:35,050
password for example<font color="#E5E5E5"> so you can just go</font>

181
00:11:27,040 --> 00:11:38,199
there<font color="#E5E5E5"> and so this is a way</font><font color="#CCCCCC"> to explore</font>

182
00:11:35,050 --> 00:11:40,660
the running application without<font color="#E5E5E5"> knowing</font>

183
00:11:38,199 --> 00:11:43,779
anything you can just<font color="#E5E5E5"> resolve things and</font>

184
00:11:40,660 --> 00:11:47,260
import the symbols<font color="#E5E5E5"> and make your way</font>

185
00:11:43,779 --> 00:11:52,560
through reversing it so this<font color="#CCCCCC"> is really</font>

186
00:11:47,260 --> 00:11:52,560
<font color="#E5E5E5">useful</font><font color="#CCCCCC"> to analyze application</font>

187
00:11:56,220 --> 00:12:05,980
for example here<font color="#CCCCCC"> gang is</font><font color="#E5E5E5"> calling in it</font>

188
00:12:00,490 --> 00:12:08,770
with<font color="#CCCCCC"> username and password we can use</font>

189
00:12:05,980 --> 00:12:11,290
again the<font color="#E5E5E5"> same method we used before</font><font color="#CCCCCC"> the</font>

190
00:12:08,770 --> 00:12:14,079
<font color="#E5E5E5">API resolver feature</font><font color="#CCCCCC"> Frieda</font><font color="#E5E5E5"> and get</font>

191
00:12:11,290 --> 00:12:18,630
which what's the class name<font color="#E5E5E5"> Twitter</font>

192
00:12:14,080 --> 00:12:23,550
<font color="#CCCCCC">count</font><font color="#E5E5E5"> so it is unity</font><font color="#CCCCCC"> a Twitter account</font>

193
00:12:18,630 --> 00:12:23,550
what other<font color="#CCCCCC"> initializes</font><font color="#E5E5E5"> as this class</font>

194
00:12:23,970 --> 00:12:35,950
<font color="#CCCCCC">this so for example we can just</font><font color="#E5E5E5"> what we</font>

195
00:12:31,090 --> 00:12:39,790
can<font color="#E5E5E5"> do is also tracing the coast</font><font color="#CCCCCC"> of</font>

196
00:12:35,950 --> 00:12:45,520
function<font color="#E5E5E5"> live so I can place a trace</font>

197
00:12:39,790 --> 00:12:53,980
point<font color="#E5E5E5"> here with the DTF</font><font color="#CCCCCC"> common i specify</font>

198
00:12:45,520 --> 00:12:58,060
<font color="#E5E5E5">the functional dress and you can specify</font>

199
00:12:53,980 --> 00:13:00,910
also the parameters so they are printed

200
00:12:58,060 --> 00:13:03,400
<font color="#E5E5E5">for example here it's</font><font color="#CCCCCC"> Objective C so the</font>

201
00:13:00,910 --> 00:13:06,430
first one<font color="#CCCCCC"> is the handle of the object</font>

202
00:13:03,400 --> 00:13:09,400
the second<font color="#E5E5E5"> one is this is a sistering</font>

203
00:13:06,430 --> 00:13:11,709
with<font color="#E5E5E5"> a with the metal name and then</font>

204
00:13:09,400 --> 00:13:13,930
there<font color="#CCCCCC"> are the parameters so is their</font>

205
00:13:11,710 --> 00:13:18,190
name and password<font color="#CCCCCC"> for example with we</font>

206
00:13:13,930 --> 00:13:23,439
need so<font color="#E5E5E5"> we set that and then we'll</font><font color="#CCCCCC"> go to</font>

207
00:13:18,190 --> 00:13:25,950
<font color="#CCCCCC">twitter and just add an account</font><font color="#E5E5E5"> for</font>

208
00:13:23,440 --> 00:13:25,950
<font color="#E5E5E5">example</font>

209
00:13:32,520 --> 00:13:37,470
and we see that<font color="#E5E5E5"> function is</font><font color="#CCCCCC"> cold and</font><font color="#E5E5E5"> the</font>

210
00:13:35,220 --> 00:13:43,680
parameters are printed here for example

211
00:13:37,470 --> 00:13:45,720
<font color="#E5E5E5">here is my password as you see this</font>

212
00:13:43,680 --> 00:13:48,589
tracing is not blocking<font color="#CCCCCC"> the road our</font>

213
00:13:45,720 --> 00:13:52,200
session but instead the output is<font color="#E5E5E5"> just</font>

214
00:13:48,589 --> 00:13:56,100
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> just printed but you can still run</font>

215
00:13:52,200 --> 00:13:58,589
common in this moment<font color="#E5E5E5"> this function is</font>

216
00:13:56,100 --> 00:14:00,690
still traced so if I call<font color="#E5E5E5"> it again it</font>

217
00:13:58,589 --> 00:14:03,140
will<font color="#E5E5E5"> print it</font><font color="#CCCCCC"> again if I'm not</font>

218
00:14:00,690 --> 00:14:08,690
<font color="#E5E5E5">interested</font><font color="#CCCCCC"> anymore I can do it</font><font color="#E5E5E5"> just like</font>

219
00:14:03,140 --> 00:14:08,689
this and every trace is<font color="#E5E5E5"> it's gone</font>

220
00:14:08,720 --> 00:14:25,170
so this is<font color="#E5E5E5"> a okay I can loose another</font>

221
00:14:15,360 --> 00:14:29,220
thing for<font color="#E5E5E5"> example I can in the app</font>

222
00:14:25,170 --> 00:14:32,449
delegate<font color="#E5E5E5"> class I saw before there's in</font>

223
00:14:29,220 --> 00:14:32,450
the<font color="#CCCCCC"> initialization</font>

224
00:14:42,889 --> 00:14:49,579
it was<font color="#E5E5E5"> calling something like switched</font>

225
00:14:46,160 --> 00:14:51,800
<font color="#CCCCCC">10-wheel identifier</font><font color="#E5E5E5"> so now I want to</font>

226
00:14:49,579 --> 00:14:55,339
<font color="#E5E5E5">call some</font><font color="#CCCCCC"> objective-c from there from</font>

227
00:14:51,800 --> 00:14:58,209
<font color="#E5E5E5">here and I want to do that so let's see</font>

228
00:14:55,339 --> 00:14:58,209
<font color="#E5E5E5">which class is this</font>

229
00:15:08,740 --> 00:15:12,240
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> TM team</font>

230
00:15:16,310 --> 00:15:21,439
let's see what static methods it has<font color="#E5E5E5"> so</font>

231
00:15:19,730 --> 00:15:24,410
for example it<font color="#CCCCCC"> has an interesting method</font>

232
00:15:21,440 --> 00:15:28,730
<font color="#E5E5E5">which is switch</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> temp</font><font color="#CCCCCC"> I want to switch</font>

233
00:15:24,410 --> 00:15:31,579
to<font color="#CCCCCC"> the dark term</font><font color="#E5E5E5"> for example so since</font>

234
00:15:28,730 --> 00:15:33,740
also it has a dark term method we can

235
00:15:31,580 --> 00:15:37,690
just try to do it<font color="#CCCCCC"> with to do it with</font>

236
00:15:33,740 --> 00:15:37,690
freedom<font color="#CCCCCC"> and see what happens</font>

237
00:15:44,490 --> 00:15:50,970
so for<font color="#CCCCCC"> example we can do just evil to</font>

238
00:15:48,510 --> 00:15:54,660
<font color="#E5E5E5">access all</font><font color="#CCCCCC"> the classes from Frieda</font><font color="#E5E5E5"> is</font>

239
00:15:50,970 --> 00:16:01,380
like the juicy object and then<font color="#CCCCCC"> you get</font>

240
00:15:54,660 --> 00:16:03,360
the class name and then I just<font color="#E5E5E5"> call this</font>

241
00:16:01,380 --> 00:16:08,090
method<font color="#E5E5E5"> which is a class</font><font color="#CCCCCC"> method so I</font>

242
00:16:03,360 --> 00:16:08,090
don't need<font color="#E5E5E5"> to allocate before okay</font>

243
00:16:17,670 --> 00:16:21,890
our classes yeah<font color="#CCCCCC"> thanks</font>

244
00:16:39,650 --> 00:16:44,810
<font color="#E5E5E5">okay that's the one</font><font color="#CCCCCC"> if I call it like</font>

245
00:16:42,350 --> 00:16:47,060
this<font color="#E5E5E5"> it will print only the handle but</font>

246
00:16:44,810 --> 00:16:50,660
<font color="#E5E5E5">actually there's an entire</font><font color="#CCCCCC"> objective-c</font>

247
00:16:47,060 --> 00:16:54,739
object there<font color="#E5E5E5"> so I can just hold</font><font color="#CCCCCC"> cold</font>

248
00:16:50,660 --> 00:16:59,350
stuff here<font color="#CCCCCC"> I can we have to call the</font>

249
00:16:54,740 --> 00:16:59,350
switch to<font color="#CCCCCC"> time with this parameter</font>

250
00:17:07,869 --> 00:17:10,859
sorry

251
00:17:27,579 --> 00:17:34,810
<font color="#E5E5E5">okay some crazy mess happened</font><font color="#CCCCCC"> but it's</font>

252
00:17:32,530 --> 00:17:37,990
because<font color="#E5E5E5"> probably I had to call that</font>

253
00:17:34,810 --> 00:17:43,870
<font color="#E5E5E5">method on the main thread</font><font color="#CCCCCC"> but it can be</font>

254
00:17:37,990 --> 00:17:48,100
worked<font color="#E5E5E5"> so okay</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> I go on with the</font>

255
00:17:43,870 --> 00:17:51,040
<font color="#CCCCCC">presentation now and going through the</font>

256
00:17:48,100 --> 00:17:56,590
comments<font color="#CCCCCC"> I will go fast on</font><font color="#E5E5E5"> the things we</font>

257
00:17:51,040 --> 00:18:02,560
<font color="#CCCCCC">already seen</font><font color="#E5E5E5"> so okay</font>

258
00:17:56,590 --> 00:18:05,620
oh nice<font color="#E5E5E5"> I didn't mention</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> in order</font>

259
00:18:02,560 --> 00:18:08,379
to get<font color="#CCCCCC"> rudder to disassembly with the</font>

260
00:18:05,620 --> 00:18:10,840
<font color="#CCCCCC">corrected texture you have</font><font color="#E5E5E5"> to tell him</font>

261
00:18:08,380 --> 00:18:13,390
<font color="#E5E5E5">was the</font><font color="#CCCCCC"> what's the right architecture</font>

262
00:18:10,840 --> 00:18:15,220
<font color="#E5E5E5">and</font><font color="#CCCCCC"> engine is and the common to do that</font>

263
00:18:13,390 --> 00:18:18,190
is this

264
00:18:15,220 --> 00:18:21,880
this takes this<font color="#CCCCCC"> information from Frieda</font>

265
00:18:18,190 --> 00:18:24,570
<font color="#E5E5E5">and make our to execute the commands</font>

266
00:18:21,880 --> 00:18:26,890
needed<font color="#E5E5E5"> to initialize the configuration</font>

267
00:18:24,570 --> 00:18:31,260
<font color="#E5E5E5">so that's the first thing you have to do</font>

268
00:18:26,890 --> 00:18:33,220
if you have to<font color="#CCCCCC"> disassemble it something</font>

269
00:18:31,260 --> 00:18:34,810
<font color="#E5E5E5">probably</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> will change in</font><font color="#CCCCCC"> future</font>

270
00:18:33,220 --> 00:18:39,910
<font color="#E5E5E5">because</font><font color="#CCCCCC"> will be nice</font><font color="#E5E5E5"> to do that</font>

271
00:18:34,810 --> 00:18:43,419
<font color="#E5E5E5">automatically so it's okay</font><font color="#CCCCCC"> this is to</font>

272
00:18:39,910 --> 00:18:46,030
<font color="#CCCCCC">list</font><font color="#E5E5E5"> the libraries</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> the commands is</font>

273
00:18:43,420 --> 00:18:47,980
not prefixed with anything but to send

274
00:18:46,030 --> 00:18:55,030
the comments<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have to prefix with the</font>

275
00:18:47,980 --> 00:18:58,900
backslash<font color="#E5E5E5"> or with equal</font><font color="#CCCCCC"> bank</font><font color="#E5E5E5"> prefix this</font>

276
00:18:55,030 --> 00:19:01,690
<font color="#E5E5E5">is for the imports you can list them or</font>

277
00:18:58,900 --> 00:19:05,470
<font color="#CCCCCC">just get rid our commands</font><font color="#E5E5E5"> and set flags</font>

278
00:19:01,690 --> 00:19:10,060
<font color="#E5E5E5">to set</font><font color="#CCCCCC"> flags for</font><font color="#E5E5E5"> you so you will have</font>

279
00:19:05,470 --> 00:19:17,890
<font color="#CCCCCC">there are flags</font><font color="#E5E5E5"> for each</font><font color="#CCCCCC"> CMAs</font><font color="#E5E5E5"> the same</font>

280
00:19:10,060 --> 00:19:20,639
with the exports<font color="#E5E5E5"> and also you can find</font><font color="#CCCCCC"> a</font>

281
00:19:17,890 --> 00:19:25,150
single symbol<font color="#CCCCCC"> on a library for example</font>

282
00:19:20,640 --> 00:19:28,360
<font color="#E5E5E5">here with the</font><font color="#CCCCCC"> open the open symbol is</font>

283
00:19:25,150 --> 00:19:32,320
<font color="#E5E5E5">exported by two libraries in probably</font>

284
00:19:28,360 --> 00:19:35,740
different stuff<font color="#E5E5E5"> and you can list all all</font>

285
00:19:32,320 --> 00:19:38,700
the exported opens or just get the one

286
00:19:35,740 --> 00:19:38,700
you're interested<font color="#E5E5E5"> in</font>

287
00:19:40,960 --> 00:19:46,700
they see comments we already saw that

288
00:19:43,580 --> 00:19:52,699
<font color="#E5E5E5">the</font><font color="#CCCCCC"> AAP comment is similar to I see but</font>

289
00:19:46,700 --> 00:19:56,090
for<font color="#E5E5E5"> Objective C protocols you can</font>

290
00:19:52,700 --> 00:19:59,779
<font color="#E5E5E5">resolve the the reverse is all the same</font>

291
00:19:56,090 --> 00:20:02,539
before you get you<font color="#E5E5E5"> you can say you can</font>

292
00:19:59,779 --> 00:20:05,600
<font color="#E5E5E5">ask what what symbol is</font><font color="#CCCCCC"> defined</font><font color="#E5E5E5"> at that</font>

293
00:20:02,539 --> 00:20:08,179
<font color="#E5E5E5">address but it works but it's a bit slow</font>

294
00:20:05,600 --> 00:20:10,789
because it everything is indicated in

295
00:20:08,179 --> 00:20:14,419
<font color="#E5E5E5">the reverse in the reverse direction so</font>

296
00:20:10,789 --> 00:20:17,240
oh yeah

297
00:20:14,419 --> 00:20:19,760
you can search stuff in memory<font color="#CCCCCC"> of the</font>

298
00:20:17,240 --> 00:20:25,940
<font color="#CCCCCC">process</font><font color="#E5E5E5"> and this is</font><font color="#CCCCCC"> a cool</font><font color="#E5E5E5"> I want to</font>

299
00:20:19,760 --> 00:20:29,240
show you for<font color="#CCCCCC"> example here I can</font><font color="#E5E5E5"> search</font>

300
00:20:25,940 --> 00:20:32,809
the memory<font color="#CCCCCC"> on Twitter and for example</font>

301
00:20:29,240 --> 00:20:47,779
<font color="#E5E5E5">find what's definite or is saying now on</font>

302
00:20:32,809 --> 00:20:52,490
the memory and<font color="#CCCCCC"> okay it</font><font color="#E5E5E5"> finds a bunch of</font>

303
00:20:47,779 --> 00:20:56,950
them because<font color="#E5E5E5"> there are the UI caches and</font>

304
00:20:52,490 --> 00:21:01,000
<font color="#E5E5E5">JSON objects and the HTTP</font><font color="#CCCCCC"> requests</font><font color="#E5E5E5"> so</font>

305
00:20:56,950 --> 00:21:04,490
but from<font color="#E5E5E5"> there it's it's nice you can do</font>

306
00:21:01,000 --> 00:21:06,230
you can search things and see in search

307
00:21:04,490 --> 00:21:09,500
<font color="#CCCCCC">for example</font><font color="#E5E5E5"> where these things are</font>

308
00:21:06,230 --> 00:21:18,830
referenced for example by searching<font color="#E5E5E5"> like</font>

309
00:21:09,500 --> 00:21:21,110
this<font color="#E5E5E5"> now I just use this common the</font>

310
00:21:18,830 --> 00:21:23,840
first one but you can also search for<font color="#E5E5E5"> a</font>

311
00:21:21,110 --> 00:21:26,870
value<font color="#E5E5E5"> with the and it will account for</font>

312
00:21:23,840 --> 00:21:28,610
the correct engine s so you can search

313
00:21:26,870 --> 00:21:33,289
pointers when there were<font color="#CCCCCC"> their</font>

314
00:21:28,610 --> 00:21:35,658
referenced and stuff it's<font color="#E5E5E5"> integrated</font>

315
00:21:33,289 --> 00:21:38,210
with<font color="#CCCCCC"> rudder search so you</font><font color="#E5E5E5"> will get flags</font>

316
00:21:35,659 --> 00:21:44,270
out of that you can configure it<font color="#CCCCCC"> with</font><font color="#E5E5E5"> a</font>

317
00:21:38,210 --> 00:21:46,630
normal evaluation<font color="#E5E5E5"> configuration from</font>

318
00:21:44,270 --> 00:21:48,830
radar but also it has<font color="#E5E5E5"> specific</font>

319
00:21:46,630 --> 00:21:51,159
configurations for example you can feel

320
00:21:48,830 --> 00:21:53,300
you can<font color="#E5E5E5"> restrict the search only to</font>

321
00:21:51,159 --> 00:21:55,850
memory

322
00:21:53,300 --> 00:21:58,790
memory chunks with with some permissions

323
00:21:55,850 --> 00:22:00,379
or in the current<font color="#CCCCCC"> the the range</font><font color="#E5E5E5"> the</font>

324
00:21:58,790 --> 00:22:05,440
memory range continuing the current

325
00:22:00,380 --> 00:22:09,770
offset<font color="#E5E5E5"> or filter by path if if available</font>

326
00:22:05,440 --> 00:22:15,470
now debugging<font color="#CCCCCC"> comments are the more</font>

327
00:22:09,770 --> 00:22:18,379
juicy stuff here<font color="#E5E5E5"> here to</font><font color="#CCCCCC"> all the debug</font>

328
00:22:15,470 --> 00:22:21,290
comments<font color="#E5E5E5"> start with the D to try trying</font>

329
00:22:18,380 --> 00:22:25,880
to be<font color="#E5E5E5"> consistent with the</font><font color="#CCCCCC"> we read our</font>

330
00:22:21,290 --> 00:22:30,260
comments you can just show the memory

331
00:22:25,880 --> 00:22:34,190
maps<font color="#E5E5E5"> and also to to find the the map</font>

332
00:22:30,260 --> 00:22:38,120
which contains the<font color="#CCCCCC"> current offset</font><font color="#E5E5E5"> you</font>

333
00:22:34,190 --> 00:22:42,710
can change page permissions or at<font color="#E5E5E5"> least</font>

334
00:22:38,120 --> 00:22:45,429
try to do it<font color="#CCCCCC"> you can i JAC execution</font>

335
00:22:42,710 --> 00:22:51,020
there are mainly two<font color="#E5E5E5"> two ways to do that</font>

336
00:22:45,430 --> 00:22:52,970
<font color="#CCCCCC">one</font><font color="#E5E5E5"> is to the</font><font color="#CCCCCC"> di comment which just</font>

337
00:22:51,020 --> 00:22:55,550
replaces the return value<font color="#E5E5E5"> of any</font>

338
00:22:52,970 --> 00:22:58,940
function<font color="#CCCCCC"> at address with the one</font><font color="#E5E5E5"> you're</font>

339
00:22:55,550 --> 00:23:01,550
you're specifying<font color="#E5E5E5"> or you can just go and</font>

340
00:22:58,940 --> 00:23:05,450
<font color="#CCCCCC">and patch</font><font color="#E5E5E5"> the code the interesting thing</font>

341
00:23:01,550 --> 00:23:08,240
here<font color="#CCCCCC"> is that this flag makes it possible</font>

342
00:23:05,450 --> 00:23:10,370
to patch code<font color="#E5E5E5"> also on architecture which</font>

343
00:23:08,240 --> 00:23:14,720
requires code signing<font color="#CCCCCC"> because it's using</font>

344
00:23:10,370 --> 00:23:22,100
<font color="#CCCCCC">the Frieda API which dynamically su</font>

345
00:23:14,720 --> 00:23:24,170
designed your<font color="#CCCCCC"> pixel code</font><font color="#E5E5E5"> you can</font>

346
00:23:22,100 --> 00:23:26,510
allocate stuff on the heap<font color="#CCCCCC"> that can be</font>

347
00:23:24,170 --> 00:23:28,730
useful for<font color="#E5E5E5"> example</font><font color="#CCCCCC"> when you have to</font>

348
00:23:26,510 --> 00:23:32,270
<font color="#CCCCCC">cause some</font><font color="#E5E5E5"> function from there and you</font>

349
00:23:28,730 --> 00:23:37,000
<font color="#CCCCCC">need</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> pass a pointer</font><font color="#E5E5E5"> to it for output</font>

350
00:23:32,270 --> 00:23:41,180
parameter so also for<font color="#CCCCCC"> Strings or stuff</font>

351
00:23:37,000 --> 00:23:43,160
<font color="#CCCCCC">the example</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> is that you can</font>

352
00:23:41,180 --> 00:23:45,890
allocate<font color="#E5E5E5"> a file name here and you get</font>

353
00:23:43,160 --> 00:23:48,710
<font color="#E5E5E5">the address of the location all these</font>

354
00:23:45,890 --> 00:23:51,500
allocations<font color="#E5E5E5"> are kept</font><font color="#CCCCCC"> or are kept</font><font color="#E5E5E5"> alive</font>

355
00:23:48,710 --> 00:23:53,900
kept alive so you should be allocate

356
00:23:51,500 --> 00:23:59,080
that<font color="#E5E5E5"> at some</font><font color="#CCCCCC"> point if you wish</font><font color="#E5E5E5"> with the</font>

357
00:23:53,900 --> 00:24:03,350
<font color="#E5E5E5">DMA</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> mean is common</font><font color="#CCCCCC"> here it's like just</font>

358
00:23:59,080 --> 00:24:04,970
allocating<font color="#E5E5E5"> a string and eight bytes then</font>

359
00:24:03,350 --> 00:24:08,419
it<font color="#E5E5E5"> writes</font>

360
00:24:04,970 --> 00:24:10,910
some funny<font color="#E5E5E5"> constant in the in the just</font>

361
00:24:08,420 --> 00:24:13,160
<font color="#E5E5E5">allocated pointer and you can see it</font>

362
00:24:10,910 --> 00:24:19,910
with other comments<font color="#E5E5E5"> that your comment</font>

363
00:24:13,160 --> 00:24:23,000
your data is there you can also inspect

364
00:24:19,910 --> 00:24:25,190
<font color="#E5E5E5">the</font><font color="#CCCCCC"> tracks the running threads</font><font color="#E5E5E5"> so you</font>

365
00:24:23,000 --> 00:24:28,270
<font color="#CCCCCC">can get the feed</font><font color="#E5E5E5"> you can get the</font>

366
00:24:25,190 --> 00:24:31,310
<font color="#CCCCCC">tragedy's</font><font color="#E5E5E5"> but you can also get the the</font>

367
00:24:28,270 --> 00:24:34,879
<font color="#E5E5E5">context of the threads and for example</font>

368
00:24:31,310 --> 00:24:39,050
see the registers value for every tribe

369
00:24:34,880 --> 00:24:41,210
<font color="#E5E5E5">and for example here is just taking the</font>

370
00:24:39,050 --> 00:24:50,149
stock pointer from the the second thread

371
00:24:41,210 --> 00:24:53,180
and printing was inside with<font color="#CCCCCC"> radar you</font>

372
00:24:50,150 --> 00:24:55,430
can<font color="#E5E5E5"> manipulate environment to both</font>

373
00:24:53,180 --> 00:25:00,590
overwrite existing variables and those

374
00:24:55,430 --> 00:25:02,720
<font color="#E5E5E5">to define new ones</font><font color="#CCCCCC"> you can just load the</font>

375
00:25:00,590 --> 00:25:06,980
library inside the running application

376
00:25:02,720 --> 00:25:11,390
for example<font color="#E5E5E5"> here it's like Inception</font>

377
00:25:06,980 --> 00:25:14,240
<font color="#CCCCCC">because we are</font><font color="#E5E5E5"> injecting a radar core</font>

378
00:25:11,390 --> 00:25:16,670
library in running<font color="#E5E5E5"> application and then</font>

379
00:25:14,240 --> 00:25:20,510
calling<font color="#E5E5E5"> commands inside that instance of</font>

380
00:25:16,670 --> 00:25:28,790
radar<font color="#E5E5E5"> so and getting out the result from</font>

381
00:25:20,510 --> 00:25:31,610
the memory yeah<font color="#E5E5E5"> this is how we call</font>

382
00:25:28,790 --> 00:25:34,430
functions<font color="#E5E5E5"> so for example you can pass</font>

383
00:25:31,610 --> 00:25:36,860
<font color="#E5E5E5">both an address or a symbol name for a</font>

384
00:25:34,430 --> 00:25:38,930
function here is<font color="#E5E5E5"> calling the stat</font>

385
00:25:36,860 --> 00:25:41,149
function which takes<font color="#E5E5E5"> two parameters one</font>

386
00:25:38,930 --> 00:25:44,110
<font color="#CCCCCC">is the filename and</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> other one is a</font>

387
00:25:41,150 --> 00:25:49,460
buffer which will hold<font color="#CCCCCC"> the result of the</font>

388
00:25:44,110 --> 00:25:51,080
order of the stat function so we locate

389
00:25:49,460 --> 00:25:53,630
them<font color="#CCCCCC"> on the hip</font><font color="#E5E5E5"> and then call the</font>

390
00:25:51,080 --> 00:25:55,939
function passing that pointers at this

391
00:25:53,630 --> 00:26:00,250
point we can<font color="#CCCCCC"> just inspect</font><font color="#E5E5E5"> the result</font>

392
00:25:55,940 --> 00:26:04,540
using<font color="#E5E5E5"> radar so here I define a naive</font>

393
00:26:00,250 --> 00:26:04,540
<font color="#CCCCCC">start format and printed</font>

394
00:26:08,340 --> 00:26:15,240
with the<font color="#E5E5E5"> DD common you</font><font color="#CCCCCC"> can manipulate</font>

395
00:26:11,220 --> 00:26:17,760
<font color="#CCCCCC">file descriptors</font><font color="#E5E5E5"> this is a</font><font color="#CCCCCC"> whole tour</font>

396
00:26:15,240 --> 00:26:20,790
direct output and input for example<font color="#CCCCCC"> if</font>

397
00:26:17,760 --> 00:26:22,860
<font color="#E5E5E5">you're debugging our application which</font>

398
00:26:20,790 --> 00:26:26,399
takes the password under standard input

399
00:26:22,860 --> 00:26:29,189
<font color="#E5E5E5">you can</font><font color="#CCCCCC"> do like that you spawn it</font><font color="#E5E5E5"> so the</font>

400
00:26:26,400 --> 00:26:32,550
process is suspended<font color="#CCCCCC"> well during</font><font color="#E5E5E5"> that</font>

401
00:26:29,190 --> 00:26:35,850
<font color="#E5E5E5">time you can</font><font color="#CCCCCC"> just open the output</font><font color="#E5E5E5"> file</font>

402
00:26:32,550 --> 00:26:37,889
<font color="#E5E5E5">the order stand of the input file and</font>

403
00:26:35,850 --> 00:26:41,340
<font color="#E5E5E5">then replace the file descriptor with</font>

404
00:26:37,890 --> 00:26:44,010
the<font color="#CCCCCC"> good yer so in this case is</font>

405
00:26:41,340 --> 00:26:47,639
redirecting LS output to a file but<font color="#E5E5E5"> we</font>

406
00:26:44,010 --> 00:26:51,960
can totally<font color="#E5E5E5"> do the opposite and take the</font>

407
00:26:47,640 --> 00:26:57,200
standard input<font color="#E5E5E5"> from file then you resume</font>

408
00:26:51,960 --> 00:27:00,900
<font color="#E5E5E5">the process and everything is going</font><font color="#CCCCCC"> pipe</font>

409
00:26:57,200 --> 00:27:04,230
<font color="#E5E5E5">there are we all ready so the</font><font color="#CCCCCC"> d TF</font>

410
00:27:00,900 --> 00:27:07,380
function<font color="#CCCCCC"> - tracing the cost functions</font>

411
00:27:04,230 --> 00:27:12,930
but<font color="#CCCCCC"> we can also trace instead of a</font>

412
00:27:07,380 --> 00:27:15,450
<font color="#CCCCCC">function just the just</font><font color="#E5E5E5"> an address which</font>

413
00:27:12,930 --> 00:27:18,500
<font color="#CCCCCC">can also not be a function</font><font color="#E5E5E5"> it can be in</font>

414
00:27:15,450 --> 00:27:22,200
the middle<font color="#CCCCCC"> of a function or can be in</font>

415
00:27:18,500 --> 00:27:25,470
anywhere<font color="#CCCCCC"> in this case it's as soon as</font>

416
00:27:22,200 --> 00:27:28,890
the<font color="#E5E5E5"> execution reaches the address you</font>

417
00:27:25,470 --> 00:27:32,510
will got the trace<font color="#CCCCCC"> by</font><font color="#E5E5E5"> default it will</font>

418
00:27:28,890 --> 00:27:35,910
get the back trace<font color="#E5E5E5"> but you can also</font>

419
00:27:32,510 --> 00:27:39,360
specify if<font color="#CCCCCC"> you want to print the content</font>

420
00:27:35,910 --> 00:27:41,430
of some registers at that point and all

421
00:27:39,360 --> 00:27:47,820
<font color="#E5E5E5">of these is</font><font color="#CCCCCC"> non-blocking like i showed</font>

422
00:27:41,430 --> 00:27:50,190
<font color="#E5E5E5">before</font><font color="#CCCCCC"> if you want to block</font><font color="#E5E5E5"> the</font>

423
00:27:47,820 --> 00:27:52,679
execution at some point we can use<font color="#CCCCCC"> the</font>

424
00:27:50,190 --> 00:27:55,290
bad points which are not real

425
00:27:52,680 --> 00:27:58,920
<font color="#CCCCCC">breakpoints</font><font color="#E5E5E5"> but are free the probes</font>

426
00:27:55,290 --> 00:28:02,159
which you place at some point<font color="#E5E5E5"> and when</font>

427
00:27:58,920 --> 00:28:07,620
<font color="#CCCCCC">the code execution reach that it will</font>

428
00:28:02,160 --> 00:28:10,470
wait<font color="#E5E5E5"> so this is non blocking flow rather</font>

429
00:28:07,620 --> 00:28:11,790
session but the<font color="#E5E5E5"> the thread of the</font>

430
00:28:10,470 --> 00:28:14,130
application which reaches that

431
00:28:11,790 --> 00:28:18,690
<font color="#E5E5E5">breakpoint is blocked so</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> example</font>

432
00:28:14,130 --> 00:28:19,890
here<font color="#E5E5E5"> where this example is on LS so if</font>

433
00:28:18,690 --> 00:28:22,380
you run LS

434
00:28:19,890 --> 00:28:26,790
just<font color="#E5E5E5"> we'll just</font><font color="#CCCCCC"> collects it at</font><font color="#E5E5E5"> the end</font>

435
00:28:22,380 --> 00:28:32,600
so<font color="#E5E5E5"> I put a breakpoint and exit and the</font>

436
00:28:26,790 --> 00:28:36,600
<font color="#CCCCCC">process</font><font color="#E5E5E5"> is is not exiting until I do</font><font color="#CCCCCC"> DC</font>

437
00:28:32,600 --> 00:28:39,240
<font color="#CCCCCC">this is useful when</font><font color="#E5E5E5"> you want to do some</font>

438
00:28:36,600 --> 00:28:41,250
analysis before<font color="#E5E5E5"> they for</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> the</font>

439
00:28:39,240 --> 00:28:47,910
<font color="#E5E5E5">program is exiting but you can press</font>

440
00:28:41,250 --> 00:28:54,930
breakpoints anywhere<font color="#E5E5E5"> okay this is a new</font>

441
00:28:47,910 --> 00:28:58,980
feature which we<font color="#E5E5E5"> added recently it</font>

442
00:28:54,930 --> 00:29:03,150
traces stuff<font color="#E5E5E5"> using the</font><font color="#CCCCCC"> stoker which</font>

443
00:28:58,980 --> 00:29:06,120
again is<font color="#E5E5E5"> a</font><font color="#CCCCCC"> way to hijack thread to a</font>

444
00:29:03,150 --> 00:29:09,600
<font color="#E5E5E5">modified copy of the of the code so</font><font color="#CCCCCC"> in</font>

445
00:29:06,120 --> 00:29:11,879
this way we can for<font color="#E5E5E5"> example you want to</font>

446
00:29:09,600 --> 00:29:14,969
<font color="#CCCCCC">know</font><font color="#E5E5E5"> what what gets executed when a</font>

447
00:29:11,880 --> 00:29:18,900
function is run<font color="#E5E5E5"> so everything you can</font>

448
00:29:14,970 --> 00:29:22,440
say<font color="#CCCCCC"> DSF that function and you will get</font>

449
00:29:18,900 --> 00:29:25,050
the entire this assembly or the<font color="#E5E5E5"> of the</font>

450
00:29:22,440 --> 00:29:27,270
all the code is run from<font color="#E5E5E5"> the beginning</font>

451
00:29:25,050 --> 00:29:29,159
to<font color="#E5E5E5"> the end of the function</font><font color="#CCCCCC"> but also the</font>

452
00:29:27,270 --> 00:29:32,370
<font color="#E5E5E5">function is colored by</font><font color="#CCCCCC"> the functions and</font>

453
00:29:29,160 --> 00:29:36,650
so on so it may<font color="#E5E5E5"> be huge but it may be</font>

454
00:29:32,370 --> 00:29:36,649
<font color="#E5E5E5">useful in some cases I want to show that</font>

455
00:29:37,040 --> 00:29:45,620
in<font color="#E5E5E5"> Linux this time maybe it's a bit</font>

456
00:29:43,290 --> 00:29:45,620
small

457
00:29:55,559 --> 00:30:00,530
<font color="#E5E5E5">okay</font>

458
00:29:57,950 --> 00:30:04,160
the perfect use case for this is the

459
00:30:00,530 --> 00:30:07,610
white box qualification from the risk

460
00:30:04,160 --> 00:30:11,240
your challenges because it's a highly

461
00:30:07,610 --> 00:30:13,219
obfuscated binary and if you like me<font color="#E5E5E5"> you</font>

462
00:30:11,240 --> 00:30:17,540
don't<font color="#E5E5E5"> know</font><font color="#CCCCCC"> anything</font><font color="#E5E5E5"> about cryptography</font>

463
00:30:13,220 --> 00:30:19,900
<font color="#CCCCCC">and a white box in particular</font><font color="#E5E5E5"> it's</font>

464
00:30:17,540 --> 00:30:23,000
useful to understand what's going<font color="#CCCCCC"> on</font>

465
00:30:19,900 --> 00:30:26,210
<font color="#CCCCCC">here the binary is taking the password</font>

466
00:30:23,000 --> 00:30:30,380
<font color="#E5E5E5">from</font><font color="#CCCCCC"> the first parameter</font><font color="#E5E5E5"> so I use our</font>

467
00:30:26,210 --> 00:30:33,559
<font color="#CCCCCC">two Freda</font><font color="#E5E5E5"> to spawn it the process is</font>

468
00:30:30,380 --> 00:30:35,410
suspended at this point<font color="#E5E5E5"> so but as soon</font>

469
00:30:33,559 --> 00:30:38,090
<font color="#E5E5E5">as I resume it it will exit because</font>

470
00:30:35,410 --> 00:30:42,559
<font color="#E5E5E5">everything is really fast so I just put</font>

471
00:30:38,090 --> 00:30:45,799
a breakpoint and exit here then<font color="#E5E5E5"> I want</font>

472
00:30:42,559 --> 00:30:47,720
to<font color="#E5E5E5"> stock the main function but I don't</font>

473
00:30:45,799 --> 00:30:54,639
know the address<font color="#E5E5E5"> in this case</font><font color="#CCCCCC"> is easy</font>

474
00:30:47,720 --> 00:30:57,650
because the the<font color="#E5E5E5"> the banner is not</font>

475
00:30:54,640 --> 00:31:02,299
dynamically relocated<font color="#E5E5E5"> at every execution</font>

476
00:30:57,650 --> 00:31:05,650
<font color="#E5E5E5">so for example we can just do this</font><font color="#CCCCCC"> and</font>

477
00:31:02,299 --> 00:31:05,650
get the<font color="#E5E5E5"> address of</font><font color="#CCCCCC"> main</font>

478
00:31:09,669 --> 00:31:14,650
we should configure<font color="#E5E5E5"> it a bit because we</font>

479
00:31:14,770 --> 00:31:25,940
<font color="#CCCCCC">want</font><font color="#E5E5E5"> to restrict the amount of code as</font>

480
00:31:18,440 --> 00:31:28,820
much as possible<font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example we</font><font color="#CCCCCC"> sulk</font>

481
00:31:25,940 --> 00:31:32,240
<font color="#E5E5E5">only</font><font color="#CCCCCC"> the code</font><font color="#E5E5E5"> coming from the app and</font>

482
00:31:28,820 --> 00:31:37,668
<font color="#E5E5E5">not from external libraries or any other</font>

483
00:31:32,240 --> 00:31:42,520
<font color="#E5E5E5">module and we want the instead of</font>

484
00:31:37,669 --> 00:31:46,429
<font color="#CCCCCC">compile ok this</font><font color="#E5E5E5"> is something</font><font color="#CCCCCC"> to say</font>

485
00:31:42,520 --> 00:31:50,030
<font color="#E5E5E5">store care event chooses the type</font><font color="#CCCCCC"> of</font>

486
00:31:46,429 --> 00:31:54,250
event you<font color="#E5E5E5"> want to stock</font><font color="#CCCCCC"> for example if</font>

487
00:31:50,030 --> 00:31:57,860
you choose<font color="#CCCCCC"> cold</font><font color="#E5E5E5"> you will get only calls</font>

488
00:31:54,250 --> 00:32:00,080
<font color="#CCCCCC">the same correct</font><font color="#E5E5E5"> exactly instead</font><font color="#CCCCCC"> will</font>

489
00:31:57,860 --> 00:32:04,159
will notify you for every single<font color="#E5E5E5"> machine</font>

490
00:32:00,080 --> 00:32:07,600
<font color="#E5E5E5">code instruction executed which may be</font>

491
00:32:04,160 --> 00:32:11,950
overwhelming<font color="#E5E5E5"> when there are many codes</font>

492
00:32:07,600 --> 00:32:14,800
very much<font color="#E5E5E5"> called running instead the the</font>

493
00:32:11,950 --> 00:32:18,550
<font color="#E5E5E5">block event happens every time a basic</font>

494
00:32:14,800 --> 00:32:20,290
block<font color="#CCCCCC"> is executed also if it's executed</font>

495
00:32:18,550 --> 00:32:23,830
more than one time so you<font color="#E5E5E5"> will get the</font>

496
00:32:20,290 --> 00:32:27,520
real order of execution<font color="#E5E5E5"> of every basic</font>

497
00:32:23,830 --> 00:32:29,980
block instead the compiled one is the is

498
00:32:27,520 --> 00:32:34,180
emitted only<font color="#E5E5E5"> when the the basic block is</font>

499
00:32:29,980 --> 00:32:43,420
executed the first<font color="#E5E5E5"> time we want block</font>

500
00:32:34,180 --> 00:32:50,340
here<font color="#CCCCCC"> so DTS f4 function</font><font color="#E5E5E5"> the dress is</font><font color="#CCCCCC"> the</font>

501
00:32:43,420 --> 00:32:50,340
main here<font color="#CCCCCC"> oh shit</font>

502
00:32:51,000 --> 00:33:02,040
<font color="#E5E5E5">then</font><font color="#CCCCCC"> the boom -</font><font color="#E5E5E5"> okay these are in this</font>

503
00:32:59,490 --> 00:33:04,230
moment the process<font color="#E5E5E5"> is suspended but when</font>

504
00:33:02,040 --> 00:33:13,889
I really should<font color="#E5E5E5"> this</font><font color="#CCCCCC"> comment it will</font><font color="#E5E5E5"> be</font>

505
00:33:04,230 --> 00:33:18,240
resumed automatically and after some

506
00:33:13,890 --> 00:33:25,740
<font color="#E5E5E5">point yeah we will get a shitload of</font>

507
00:33:18,240 --> 00:33:27,750
code but this<font color="#E5E5E5"> is good</font><font color="#CCCCCC"> because for</font>

508
00:33:25,740 --> 00:33:30,230
<font color="#CCCCCC">example I do that again now more</font>

509
00:33:27,750 --> 00:33:30,230
<font color="#CCCCCC">Fastlane</font>

510
00:33:40,000 --> 00:33:56,470
if you redirect<font color="#CCCCCC"> that for example to to</font>

511
00:33:45,759 --> 00:33:58,240
an editor<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can after</font><font color="#E5E5E5"> some seconds</font>

512
00:33:56,470 --> 00:34:01,840
yeah

513
00:33:58,240 --> 00:34:05,200
<font color="#E5E5E5">for example here in the zoom out view</font>

514
00:34:01,840 --> 00:34:08,259
here<font color="#E5E5E5"> you will see the trace of the</font>

515
00:34:05,200 --> 00:34:10,839
execution from from really both<font color="#E5E5E5"> but it's</font>

516
00:34:08,260 --> 00:34:14,109
enough to<font color="#E5E5E5"> understand the patterns for</font>

517
00:34:10,839 --> 00:34:18,009
<font color="#CCCCCC">example here is loading</font><font color="#E5E5E5"> very much stuff</font>

518
00:34:14,109 --> 00:34:22,690
from memory<font color="#E5E5E5"> is writing stuff and then at</font>

519
00:34:18,010 --> 00:34:27,879
some<font color="#E5E5E5"> point some repeating actions and</font>

520
00:34:22,690 --> 00:34:30,339
then these<font color="#E5E5E5"> long blocks long block there</font>

521
00:34:27,879 --> 00:34:33,960
are like a pattern<font color="#CCCCCC"> of long blocks</font><font color="#E5E5E5"> and</font>

522
00:34:30,339 --> 00:34:35,379
then after four long blocks<font color="#CCCCCC"> there is a</font>

523
00:34:33,960 --> 00:34:38,379
small one

524
00:34:35,379 --> 00:34:41,918
so the<font color="#CCCCCC"> end if you go down this stuff</font>

525
00:34:38,379 --> 00:34:44,440
repeats<font color="#CCCCCC"> ten times</font><font color="#E5E5E5"> so this is a huge</font>

526
00:34:41,918 --> 00:34:52,949
<font color="#CCCCCC">indicator what kind of crypto algorithm</font>

527
00:34:44,440 --> 00:34:52,950
is here<font color="#E5E5E5"> but yeah</font><font color="#CCCCCC"> I will not go on that</font>

528
00:34:54,780 --> 00:35:00,720
the other thing you<font color="#E5E5E5"> can do is the</font>

529
00:34:57,220 --> 00:35:04,750
instead<font color="#E5E5E5"> of just dumping all the assembly</font>

530
00:35:00,720 --> 00:35:08,020
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> put</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> information in the</font>

531
00:35:04,750 --> 00:35:11,380
existing<font color="#CCCCCC"> at rest in the trace s</font><font color="#E5E5E5"> DB</font><font color="#CCCCCC"> or</font>

532
00:35:08,020 --> 00:35:20,099
<font color="#CCCCCC">Aadhaar</font><font color="#E5E5E5"> and then get the results</font><font color="#CCCCCC"> with</font>

533
00:35:11,380 --> 00:35:20,099
the DT comments so<font color="#CCCCCC"> you can try it</font>

534
00:35:36,180 --> 00:35:43,290
in this way it<font color="#E5E5E5"> will generate the rudder</font>

535
00:35:41,130 --> 00:35:45,300
<font color="#CCCCCC">comments and with the dot at the</font>

536
00:35:43,290 --> 00:35:51,890
beginning we're executing that comments

537
00:35:45,300 --> 00:35:51,890
and the result of<font color="#E5E5E5"> that is that we're</font>

538
00:35:52,340 --> 00:35:57,170
taking that<font color="#CCCCCC"> into</font><font color="#E5E5E5"> the trace</font><font color="#CCCCCC"> s DB</font>

539
00:36:14,240 --> 00:36:17,649
after a few seconds

540
00:36:23,910 --> 00:36:28,940
the advantage of that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that at the end</font>

541
00:36:26,670 --> 00:36:31,950
<font color="#E5E5E5">of this process I will</font><font color="#CCCCCC"> get for example</font>

542
00:36:28,940 --> 00:36:35,120
<font color="#E5E5E5">statistics on how</font><font color="#CCCCCC"> many</font><font color="#E5E5E5"> times</font><font color="#CCCCCC"> that</font>

543
00:36:31,950 --> 00:36:39,210
<font color="#CCCCCC">address has been executed</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> free and</font>

544
00:36:35,120 --> 00:36:41,640
this is<font color="#CCCCCC"> better</font><font color="#E5E5E5"> than going in the in</font>

545
00:36:39,210 --> 00:36:46,560
<font color="#E5E5E5">sublime</font><font color="#CCCCCC"> text and see the repeating</font>

546
00:36:41,640 --> 00:36:50,250
patterns for<font color="#CCCCCC"> example with a</font><font color="#E5E5E5"> DT command</font>

547
00:36:46,560 --> 00:36:53,279
<font color="#E5E5E5">you will get for every address the times</font>

548
00:36:50,250 --> 00:36:58,250
it gets<font color="#E5E5E5"> executed</font><font color="#CCCCCC"> for example here</font>

549
00:36:53,280 --> 00:37:01,980
they're repeating<font color="#CCCCCC"> 16 times</font><font color="#E5E5E5"> or 36 times</font>

550
00:36:58,250 --> 00:37:05,820
and then you can also<font color="#CCCCCC"> DTD and just</font>

551
00:37:01,980 --> 00:37:08,460
disassemble everything<font color="#E5E5E5"> everything</font><font color="#CCCCCC"> that</font>

552
00:37:05,820 --> 00:37:12,330
has run for on the last<font color="#CCCCCC"> on the</font><font color="#E5E5E5"> last</font>

553
00:37:08,460 --> 00:37:14,790
session<font color="#E5E5E5"> so this is really useful</font><font color="#CCCCCC"> to</font>

554
00:37:12,330 --> 00:37:17,910
understand what's going<font color="#CCCCCC"> on when you have</font>

555
00:37:14,790 --> 00:37:21,120
obfuscated code<font color="#E5E5E5"> and you don't know how</font>

556
00:37:17,910 --> 00:37:25,700
to reverse<font color="#E5E5E5"> it by</font><font color="#CCCCCC"> hand</font><font color="#E5E5E5"> in a reasonable</font>

557
00:37:21,120 --> 00:37:25,700
time<font color="#E5E5E5"> okay</font>

558
00:37:35,760 --> 00:37:38,900
<font color="#E5E5E5">yep yep</font>

559
00:37:45,950 --> 00:37:52,730
yeah yeah<font color="#CCCCCC"> because in the in the first</font>

560
00:37:50,510 --> 00:37:54,310
<font color="#CCCCCC">round</font><font color="#E5E5E5"> that code</font><font color="#CCCCCC"> that this assembly</font><font color="#E5E5E5"> is</font>

561
00:37:52,730 --> 00:37:58,190
generated from<font color="#E5E5E5"> Frieda</font>

562
00:37:54,310 --> 00:38:01,310
so from inside the process we using<font color="#E5E5E5"> our</font>

563
00:37:58,190 --> 00:38:03,680
capstone instance injected by<font color="#E5E5E5"> Frieda</font>

564
00:38:01,310 --> 00:38:06,320
<font color="#E5E5E5">inside the process instead in the second</font>

565
00:38:03,680 --> 00:38:09,410
in the second example<font color="#E5E5E5"> the</font><font color="#CCCCCC"> disassembly is</font>

566
00:38:06,320 --> 00:38:11,570
<font color="#E5E5E5">done by radar</font><font color="#CCCCCC"> so what what we do in</font>

567
00:38:09,410 --> 00:38:13,940
Frieda in that case is just collect the

568
00:38:11,570 --> 00:38:16,700
addresses of all the<font color="#CCCCCC"> basic blocks</font>

569
00:38:13,940 --> 00:38:28,910
<font color="#E5E5E5">executed and then elaborate that in a</font>

570
00:38:16,700 --> 00:38:32,270
<font color="#CCCCCC">dark later I'm sorry</font>

571
00:38:28,910 --> 00:38:35,290
so let me<font color="#CCCCCC"> repeat I</font><font color="#E5E5E5"> am curious if</font><font color="#CCCCCC"> their</font>

572
00:38:32,270 --> 00:38:38,330
values we<font color="#CCCCCC"> are getting in this</font>

573
00:38:35,290 --> 00:38:41,509
<font color="#E5E5E5">disassembly what you are showing now on</font>

574
00:38:38,330 --> 00:38:44,390
the<font color="#E5E5E5"> screen if those values are the</font>

575
00:38:41,510 --> 00:38:46,970
runtime values<font color="#E5E5E5"> so no no no the values</font>

576
00:38:44,390 --> 00:38:49,790
are not<font color="#CCCCCC"> the runtime</font><font color="#E5E5E5"> okay because we are</font>

577
00:38:46,970 --> 00:38:52,730
<font color="#CCCCCC">just</font><font color="#E5E5E5"> this assembly at</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> address but</font>

578
00:38:49,790 --> 00:38:54,950
in a<font color="#E5E5E5"> different time so yeah yes this is</font>

579
00:38:52,730 --> 00:38:58,700
my<font color="#E5E5E5"> problem</font><font color="#CCCCCC"> so is it</font><font color="#E5E5E5"> possible to do it</font>

580
00:38:54,950 --> 00:39:01,310
<font color="#E5E5E5">runtime</font><font color="#CCCCCC"> to be possible yeah there are</font>

581
00:38:58,700 --> 00:39:04,430
ways to do that<font color="#CCCCCC"> they are</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> yet</font>

582
00:39:01,310 --> 00:39:09,980
implemented<font color="#E5E5E5"> not yet I think it's</font>

583
00:39:04,430 --> 00:39:16,460
possible<font color="#CCCCCC"> both by improving the the first</font>

584
00:39:09,980 --> 00:39:18,830
<font color="#E5E5E5">decimal you see so both are trying to</font>

585
00:39:16,460 --> 00:39:21,950
store also<font color="#E5E5E5"> the state of the registers</font>

586
00:39:18,830 --> 00:39:25,310
for<font color="#CCCCCC"> every instruction executed but that</font>

587
00:39:21,950 --> 00:39:28,490
may<font color="#E5E5E5"> be very</font><font color="#CCCCCC"> much data</font><font color="#E5E5E5"> to store yeah so I</font>

588
00:39:25,310 --> 00:39:31,340
think the<font color="#E5E5E5"> first version has to be yeah</font>

589
00:39:28,490 --> 00:39:34,759
another another kind of thing we<font color="#CCCCCC"> can do</font>

590
00:39:31,340 --> 00:39:38,000
is<font color="#E5E5E5"> just synchronously do that so for</font>

591
00:39:34,760 --> 00:39:40,510
<font color="#E5E5E5">example yeah every time an event is</font>

592
00:39:38,000 --> 00:39:46,700
emitted from<font color="#CCCCCC"> Frieda just block there</font><font color="#E5E5E5"> and</font>

593
00:39:40,510 --> 00:39:50,360
analyze<font color="#CCCCCC"> that that the values and then</font>

594
00:39:46,700 --> 00:39:54,669
let the<font color="#CCCCCC"> exhibition</font><font color="#E5E5E5"> proceed so that's</font>

595
00:39:50,360 --> 00:39:54,670
another<font color="#CCCCCC"> option thank you</font>

596
00:39:58,460 --> 00:40:09,480
<font color="#E5E5E5">okay we already saw that you saw</font><font color="#CCCCCC"> that</font>

597
00:40:03,059 --> 00:40:12,480
so now<font color="#E5E5E5"> a brief introduction or to extend</font>

598
00:40:09,480 --> 00:40:14,490
<font color="#CCCCCC">up to</font><font color="#E5E5E5"> freedom beyond what is currently</font>

599
00:40:12,480 --> 00:40:18,180
dying<font color="#E5E5E5"> doing</font>

600
00:40:14,490 --> 00:40:22,290
for example we already<font color="#E5E5E5"> saw which if</font>

601
00:40:18,180 --> 00:40:24,058
<font color="#E5E5E5">something is missing on the you need</font>

602
00:40:22,290 --> 00:40:28,099
some<font color="#CCCCCC"> Freda common which is not in our</font><font color="#E5E5E5"> to</font>

603
00:40:24,059 --> 00:40:31,640
freedom<font color="#E5E5E5"> you can just eval and execute it</font>

604
00:40:28,099 --> 00:40:35,339
<font color="#CCCCCC">it also</font><font color="#E5E5E5"> supports the</font><font color="#CCCCCC"> sacred style</font>

605
00:40:31,640 --> 00:40:38,670
<font color="#E5E5E5">scripting using Mjolnir which is a</font>

606
00:40:35,339 --> 00:40:40,558
library which basically<font color="#E5E5E5"> it's a</font>

607
00:40:38,670 --> 00:40:43,470
compatibility layer for<font color="#E5E5E5"> between the</font>

608
00:40:40,559 --> 00:40:47,730
cyclope syntax and<font color="#CCCCCC"> freida translating</font>

609
00:40:43,470 --> 00:40:50,098
that<font color="#E5E5E5"> to JavaScript</font><font color="#CCCCCC"> and but you have to</font>

610
00:40:47,730 --> 00:40:52,109
compile<font color="#E5E5E5"> it's not</font><font color="#CCCCCC"> enabled by</font><font color="#E5E5E5"> default</font><font color="#CCCCCC"> I</font>

611
00:40:50,099 --> 00:40:54,660
<font color="#E5E5E5">think we have to you have to compile the</font>

612
00:40:52,109 --> 00:40:59,848
plug-in with the proper flag<font color="#E5E5E5"> it's</font>

613
00:40:54,660 --> 00:41:02,848
described<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the make file you can</font><font color="#E5E5E5"> also</font>

614
00:40:59,849 --> 00:41:07,020
<font color="#E5E5E5">run JavaScript scripts you already have</font>

615
00:41:02,849 --> 00:41:09,480
for example<font color="#CCCCCC"> if you have scripts used to</font>

616
00:41:07,020 --> 00:41:10,380
running<font color="#CCCCCC"> Frida normally you can just load</font>

617
00:41:09,480 --> 00:41:15,420
<font color="#CCCCCC">it from here</font>

618
00:41:10,380 --> 00:41:20,309
with the dot common if you need some

619
00:41:15,420 --> 00:41:24,030
more full-featured stuff you can<font color="#E5E5E5"> just</font>

620
00:41:20,309 --> 00:41:26,760
write your<font color="#E5E5E5"> plugins here so plugins are</font>

621
00:41:24,030 --> 00:41:29,790
regular<font color="#CCCCCC"> javascript files that register</font>

622
00:41:26,760 --> 00:41:33,089
<font color="#E5E5E5">themselves with the with using this</font>

623
00:41:29,790 --> 00:41:36,480
global object so they<font color="#E5E5E5"> just</font><font color="#CCCCCC"> register</font>

624
00:41:33,089 --> 00:41:39,390
<font color="#E5E5E5">themselves with the name</font><font color="#CCCCCC"> and it's at</font>

625
00:41:36,480 --> 00:41:41,880
<font color="#E5E5E5">this point they are called back as as</font>

626
00:41:39,390 --> 00:41:43,770
soon as the user<font color="#CCCCCC"> types a</font><font color="#E5E5E5"> comment and the</font>

627
00:41:41,880 --> 00:41:47,730
plug-in<font color="#E5E5E5"> can choose to implement that</font>

628
00:41:43,770 --> 00:41:51,329
common for example<font color="#CCCCCC"> here it's the</font>

629
00:41:47,730 --> 00:41:54,059
resolver<font color="#E5E5E5"> we used using</font><font color="#CCCCCC"> eval in the</font>

630
00:41:51,329 --> 00:41:59,030
previous example here it's turned into<font color="#E5E5E5"> a</font>

631
00:41:54,059 --> 00:41:59,030
<font color="#CCCCCC">plug-in so I can show that</font>

632
00:42:01,980 --> 00:42:09,810
I can just float the<font color="#E5E5E5"> plugin which is in</font>

633
00:42:06,690 --> 00:42:12,359
this directory so it's just<font color="#E5E5E5"> dot and the</font>

634
00:42:09,810 --> 00:42:17,869
path<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> beginning at this point I</font>

635
00:42:12,359 --> 00:42:26,660
have there<font color="#E5E5E5"> is all common which will take</font>

636
00:42:17,869 --> 00:42:26,660
a query in the resolver syntax so like

637
00:42:32,750 --> 00:42:41,079
we can do like that<font color="#E5E5E5"> and have a nice</font>

638
00:42:36,020 --> 00:42:41,079
output<font color="#E5E5E5"> of of the resolver</font>

639
00:42:47,610 --> 00:42:55,020
<font color="#CCCCCC">the idea is that</font><font color="#E5E5E5"> you can do your stuff</font>

640
00:42:50,700 --> 00:42:57,359
on top of<font color="#E5E5E5"> that and those</font><font color="#CCCCCC"> own and share</font>

641
00:42:55,020 --> 00:43:00,750
it<font color="#CCCCCC"> with everyone or just</font><font color="#E5E5E5"> decide</font><font color="#CCCCCC"> to keep</font>

642
00:42:57,360 --> 00:43:02,880
it private<font color="#E5E5E5"> and the other way is to</font>

643
00:43:00,750 --> 00:43:06,150
extend<font color="#E5E5E5"> out</font><font color="#CCCCCC"> to freedom going to the</font>

644
00:43:02,880 --> 00:43:11,340
<font color="#CCCCCC">repository and in contributing because</font>

645
00:43:06,150 --> 00:43:14,220
it's a pretty simple<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> it's just</font>

646
00:43:11,340 --> 00:43:18,780
<font color="#CCCCCC">a C file for the IO plugin and a</font>

647
00:43:14,220 --> 00:43:23,600
JavaScript<font color="#CCCCCC"> file for the agent from its</font>

648
00:43:18,780 --> 00:43:23,600
it's<font color="#CCCCCC"> over</font><font color="#E5E5E5"> so if you have questions</font>

