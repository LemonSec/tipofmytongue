1
00:00:00,000 --> 00:00:03,800
[Music]

2
00:00:07,090 --> 00:01:10,910
[Music]

3
00:01:10,910 --> 00:01:13,410
[Applause]

4
00:01:13,410 --> 00:01:16,190
[Music]

5
00:01:16,190 --> 00:01:19,250
[Applause]

6
00:01:21,050 --> 00:01:24,158
[Music]

7
00:01:36,920 --> 00:01:48,979
[Music]

8
00:01:54,560 --> 00:02:14,289
[Music]

9
00:02:18,680 --> 00:03:04,360
[Music]

10
00:03:04,360 --> 00:03:06,850
[Applause]

11
00:03:06,850 --> 00:03:07,340
[Music]

12
00:03:07,340 --> 00:03:08,959
[Applause]

13
00:03:08,959 --> 00:03:11,959
so

14
00:03:14,500 --> 00:03:17,569
[Music]

15
00:03:21,060 --> 00:03:24,150
[Music]

16
00:03:25,040 --> 00:03:28,040
do

17
00:03:30,350 --> 00:03:43,809
[Music]

18
00:03:53,439 --> 00:03:56,439
do

19
00:04:00,600 --> 00:04:04,448
[Music]

20
00:04:14,630 --> 00:04:22,089
[Music]

21
00:04:25,270 --> 00:04:37,760
[Music]

22
00:04:42,340 --> 00:05:44,539
[Music]

23
00:05:49,030 --> 00:05:53,309
[Music]

24
00:06:02,190 --> 00:06:05,319
[Music]

25
00:06:14,800 --> 00:06:17,800
hello

26
00:06:22,240 --> 00:06:25,240
so

27
00:06:26,310 --> 00:06:32,640
[Music]

28
00:06:37,919 --> 00:06:40,919
do

29
00:06:49,650 --> 00:06:52,799
[Music]

30
00:06:53,680 --> 00:06:56,680
so

31
00:06:57,980 --> 00:07:16,779
[Music]

32
00:07:26,860 --> 00:07:55,100
[Music]

33
00:08:00,450 --> 00:08:20,739
[Music]

34
00:08:24,240 --> 00:08:27,240
now

35
00:08:36,400 --> 00:09:22,189
[Music]

36
00:09:29,760 --> 00:09:31,610
do

37
00:09:31,610 --> 00:09:48,320
[Music]

38
00:09:52,960 --> 00:10:18,109
[Music]

39
00:10:25,279 --> 00:10:28,279
so

40
00:10:32,720 --> 00:10:35,950
[Music]

41
00:10:47,470 --> 00:10:50,690
[Music]

42
00:10:54,580 --> 00:11:27,010
[Music]

43
00:11:30,420 --> 00:11:49,519
[Music]

44
00:11:49,519 --> 00:11:52,020
so

45
00:11:52,020 --> 00:12:13,350
[Music]

46
00:12:17,360 --> 00:12:20,360
do

47
00:12:21,510 --> 00:12:31,279
[Music]

48
00:12:31,279 --> 00:12:34,279
do

49
00:12:59,279 --> 00:13:02,100
so

50
00:13:02,100 --> 00:13:18,470
[Music]

51
00:13:24,570 --> 00:13:27,779
[Music]

52
00:13:31,960 --> 00:13:49,179
[Music]

53
00:13:52,790 --> 00:13:57,309
[Music]

54
00:14:00,430 --> 00:14:03,520
[Music]

55
00:14:06,800 --> 00:14:09,800
do

56
00:14:12,390 --> 00:14:15,909
[Music]

57
00:14:19,160 --> 00:15:18,079
[Music]

58
00:15:18,079 --> 00:15:19,090
so

59
00:15:19,090 --> 00:15:32,049
[Music]

60
00:15:36,000 --> 00:15:39,090
[Music]

61
00:15:45,530 --> 00:15:48,620
[Music]

62
00:15:51,200 --> 00:16:02,320
[Music]

63
00:16:02,320 --> 00:16:05,320
so

64
00:16:07,700 --> 00:16:11,289
[Music]

65
00:16:18,030 --> 00:16:46,169
[Music]

66
00:16:48,240 --> 00:16:51,379
[Music]

67
00:16:54,330 --> 00:17:09,569
[Music]

68
00:17:12,190 --> 00:17:25,039
[Music]

69
00:17:25,039 --> 00:17:28,039
so

70
00:17:30,980 --> 00:18:04,450
[Music]

71
00:18:05,750 --> 00:18:06,540
[Applause]

72
00:18:06,540 --> 00:18:13,240
[Music]

73
00:18:13,240 --> 00:18:15,190
[Applause]

74
00:18:15,190 --> 00:19:04,400
[Music]

75
00:19:04,400 --> 00:19:07,449
[Applause]

76
00:19:09,730 --> 00:19:12,769
[Applause]

77
00:19:15,070 --> 00:19:17,039
[Applause]

78
00:19:17,039 --> 00:19:20,039
right

79
00:19:24,090 --> 00:19:36,080
[Music]

80
00:19:36,080 --> 00:19:39,080
like

81
00:19:44,020 --> 00:19:52,379
[Music]

82
00:19:54,400 --> 00:19:57,400
um

83
00:19:58,330 --> 00:19:58,980
[Music]

84
00:19:58,980 --> 00:20:02,079
[Applause]

85
00:20:04,310 --> 00:20:05,680
[Applause]

86
00:20:05,680 --> 00:20:08,320
[Music]

87
00:20:08,320 --> 00:20:12,760
[Applause]

88
00:20:13,320 --> 00:20:14,970
[Music]

89
00:20:14,970 --> 00:20:15,000
[Applause]

90
00:20:15,000 --> 00:20:19,450
[Music]

91
00:20:19,450 --> 00:20:20,410
[Applause]

92
00:20:20,410 --> 00:20:46,559
[Music]

93
00:20:46,559 --> 00:20:49,559
foreign

94
00:20:54,080 --> 00:20:55,680
so

95
00:20:55,680 --> 00:21:06,000
[Music]

96
00:21:06,000 --> 00:21:07,960
[Applause]

97
00:21:07,960 --> 00:21:33,760
[Music]

98
00:21:33,760 --> 00:21:36,760
do

99
00:21:37,450 --> 00:21:40,539
[Applause]

100
00:21:41,690 --> 00:22:03,400
[Music]

101
00:22:03,400 --> 00:22:05,360
[Applause]

102
00:22:05,360 --> 00:22:14,080
[Music]

103
00:22:14,080 --> 00:22:15,920
[Applause]

104
00:22:15,920 --> 00:22:26,839
[Music]

105
00:22:33,360 --> 00:22:36,400
welcome back to r2con 2021

106
00:22:36,400 --> 00:22:38,799
this is the third day

107
00:22:38,799 --> 00:22:40,960
i hope you can

108
00:22:40,960 --> 00:22:42,720
watch all the streams from the previous

109
00:22:42,720 --> 00:22:45,039
days uh

110
00:22:45,039 --> 00:22:47,039
so yeah i think that volume is correct

111
00:22:47,039 --> 00:22:47,840
now

112
00:22:47,840 --> 00:22:49,679
sorry for the waiting i was doing some

113
00:22:49,679 --> 00:22:52,159
checks for the

114
00:22:52,159 --> 00:22:55,159
streaming

115
00:22:58,559 --> 00:23:01,440
so yeah let's begin

116
00:23:03,679 --> 00:23:06,799
hello articon this is uh unix rxjp would

117
00:23:06,799 --> 00:23:08,960
like to make a presentation about the

118
00:23:08,960 --> 00:23:12,559
debugging and bug fixing rotary 2 in the

119
00:23:12,559 --> 00:23:15,919
articon 2031 conference

120
00:23:15,919 --> 00:23:17,919
and this presentation is about how we

121
00:23:17,919 --> 00:23:21,360
can support our broader community and

122
00:23:21,360 --> 00:23:24,320
development by doing a systematic

123
00:23:24,320 --> 00:23:25,520
process

124
00:23:25,520 --> 00:23:28,400
testing and bug fixing and

125
00:23:28,400 --> 00:23:30,400
in this presentation i'd like to share

126
00:23:30,400 --> 00:23:33,520
my experience in doing such

127
00:23:33,520 --> 00:23:35,120
activities and

128
00:23:35,120 --> 00:23:37,840
this is uh the wrap up in the form of

129
00:23:37,840 --> 00:23:40,640
the presentation

130
00:23:40,640 --> 00:23:42,960
usually when i start

131
00:23:42,960 --> 00:23:45,520
any presentation i wrote about this

132
00:23:45,520 --> 00:23:47,760
disclaimer that uh this is also about

133
00:23:47,760 --> 00:23:50,720
the share back knowledge the fellow blue

134
00:23:50,720 --> 00:23:53,360
teams especially in the redder

135
00:23:53,360 --> 00:23:55,760
community dealing with the bugs and how

136
00:23:55,760 --> 00:23:57,600
to handle them properly

137
00:23:57,600 --> 00:24:00,240
and also helping with the test

138
00:24:00,240 --> 00:24:02,480
stock is not operational with no

139
00:24:02,480 --> 00:24:04,480
attributions and written

140
00:24:04,480 --> 00:24:05,919
as a

141
00:24:05,919 --> 00:24:08,960
educational basis contains the basic

142
00:24:08,960 --> 00:24:11,360
know-how of the writer's tools

143
00:24:11,360 --> 00:24:12,880
for the

144
00:24:12,880 --> 00:24:14,400
related topics

145
00:24:14,400 --> 00:24:15,360
and

146
00:24:15,360 --> 00:24:18,559
the material is based on the rather two

147
00:24:18,559 --> 00:24:20,880
organization research

148
00:24:20,880 --> 00:24:23,600
that we are doing and there is no data

149
00:24:23,600 --> 00:24:26,880
nor information from the other speaker

150
00:24:26,880 --> 00:24:28,400
well in the next slide we will start

151
00:24:28,400 --> 00:24:31,039
about the introductions

152
00:24:31,039 --> 00:24:32,640
first this presentation you are

153
00:24:32,640 --> 00:24:34,320
introduced to understand about the

154
00:24:34,320 --> 00:24:36,559
development side of the other team and

155
00:24:36,559 --> 00:24:37,279
uh

156
00:24:37,279 --> 00:24:40,080
how testing and bug fix playing a big

157
00:24:40,080 --> 00:24:41,600
roles in it

158
00:24:41,600 --> 00:24:44,240
and uh it will be explained also about

159
00:24:44,240 --> 00:24:46,400
how to handle the situation with the

160
00:24:46,400 --> 00:24:48,240
bugs

161
00:24:48,240 --> 00:24:50,480
and

162
00:24:50,799 --> 00:24:54,080
the handling of the rudder too and

163
00:24:54,080 --> 00:24:56,720
this is merely from the my experience in

164
00:24:56,720 --> 00:24:59,600
doing such activities

165
00:24:59,600 --> 00:25:01,440
so this is about myself

166
00:25:01,440 --> 00:25:03,039
as usual

167
00:25:03,039 --> 00:25:05,440
so recently i'm doing the pretty much of

168
00:25:05,440 --> 00:25:07,679
the testing in the rotary platforms to

169
00:25:07,679 --> 00:25:08,799
help the

170
00:25:08,799 --> 00:25:11,120
development teams to make

171
00:25:11,120 --> 00:25:13,200
more stable and

172
00:25:13,200 --> 00:25:16,320
systematic updating and foreign and so

173
00:25:16,320 --> 00:25:17,200
on

174
00:25:17,200 --> 00:25:18,960
you can read about this explanation

175
00:25:18,960 --> 00:25:21,440
later on and moving to the next slides

176
00:25:21,440 --> 00:25:23,600
um

177
00:25:23,600 --> 00:25:25,760
pretty much talks about the rotary

178
00:25:25,760 --> 00:25:27,679
environments in the previous

179
00:25:27,679 --> 00:25:30,480
presentation that i have in several

180
00:25:30,480 --> 00:25:32,559
conferences these are the lists for them

181
00:25:32,559 --> 00:25:35,679
so if you want to see later on

182
00:25:35,679 --> 00:25:39,120
this is a reference for you

183
00:25:39,120 --> 00:25:41,600
so we go to the why the testing is

184
00:25:41,600 --> 00:25:43,840
needed

185
00:25:43,840 --> 00:25:45,360
and then

186
00:25:45,360 --> 00:25:47,919
why does things needed and how

187
00:25:47,919 --> 00:25:49,840
testing is an important step for the

188
00:25:49,840 --> 00:25:51,679
stable release versions in the right

189
00:25:51,679 --> 00:25:53,679
array to development

190
00:25:53,679 --> 00:25:55,919
rather to development is defined by the

191
00:25:55,919 --> 00:25:57,760
set of the milestones

192
00:25:57,760 --> 00:26:00,080
and each mouse and explaining new base

193
00:26:00,080 --> 00:26:01,760
of features to be implemented in the

194
00:26:01,760 --> 00:26:03,120
next release

195
00:26:03,120 --> 00:26:06,480
and those based to be added with more

196
00:26:06,480 --> 00:26:08,400
and more features as long as the

197
00:26:08,400 --> 00:26:10,880
development for that base is continued

198
00:26:10,880 --> 00:26:11,919
while

199
00:26:11,919 --> 00:26:13,520
in the development

200
00:26:13,520 --> 00:26:15,440
the new gems and the new planning for

201
00:26:15,440 --> 00:26:17,600
the next milestone is

202
00:26:17,600 --> 00:26:20,400
actually planned and to be

203
00:26:20,400 --> 00:26:24,880
formed to the next milestones to go so

204
00:26:24,880 --> 00:26:26,240
for index

205
00:26:26,240 --> 00:26:29,440
example the latest rather to versions of

206
00:26:29,440 --> 00:26:31,039
five versions

207
00:26:31,039 --> 00:26:33,440
and it has been developed by the

208
00:26:33,440 --> 00:26:36,240
additional features four times hence the

209
00:26:36,240 --> 00:26:38,559
minor version is a version 4

210
00:26:38,559 --> 00:26:40,559
and has been maintained for the bug

211
00:26:40,559 --> 00:26:43,200
fixed like two times since the minor

212
00:26:43,200 --> 00:26:45,039
version released

213
00:26:45,039 --> 00:26:47,760
so this version

214
00:26:47,760 --> 00:26:50,080
means that

215
00:26:50,080 --> 00:26:51,360
it has the

216
00:26:51,360 --> 00:26:54,960
version a major five and a minor four

217
00:26:54,960 --> 00:26:57,600
and we had uh

218
00:26:57,600 --> 00:26:59,360
two times uh

219
00:26:59,360 --> 00:27:01,600
overall testing for the products for

220
00:27:01,600 --> 00:27:04,159
these minor versions so that is uh

221
00:27:04,159 --> 00:27:07,120
exactly where the testing are doing the

222
00:27:07,120 --> 00:27:09,439
job

223
00:27:10,960 --> 00:27:12,720
in this slide we will talk about the

224
00:27:12,720 --> 00:27:14,720
requirement for the testing exported to

225
00:27:14,720 --> 00:27:17,039
the many of the operating systems so we

226
00:27:17,039 --> 00:27:18,960
have to be careful in picking which kind

227
00:27:18,960 --> 00:27:21,520
of the target for the testing that can

228
00:27:21,520 --> 00:27:22,960
support the

229
00:27:22,960 --> 00:27:25,760
development and can actually pinching

230
00:27:25,760 --> 00:27:26,880
several

231
00:27:26,880 --> 00:27:29,279
anyone with a skill set that capable to

232
00:27:29,279 --> 00:27:31,760
do so

233
00:27:32,159 --> 00:27:35,360
and next the time is needed

234
00:27:35,360 --> 00:27:37,360
for the humans especially because of the

235
00:27:37,360 --> 00:27:40,480
tre uh ci is not uh taking so much time

236
00:27:40,480 --> 00:27:43,760
for the making results not as much as

237
00:27:43,760 --> 00:27:46,559
what the human does so i will explain in

238
00:27:46,559 --> 00:27:49,360
details about how the human resource

239
00:27:49,360 --> 00:27:51,760
during the time for the testing in this

240
00:27:51,760 --> 00:27:52,880
uh

241
00:27:52,880 --> 00:27:54,640
breakdown

242
00:27:54,640 --> 00:27:56,640
so for the generic platforms like the

243
00:27:56,640 --> 00:27:59,520
servers and the commonly used desktops

244
00:27:59,520 --> 00:28:02,640
overall uh doing the test for the new

245
00:28:02,640 --> 00:28:05,440
release is uh thinking about the one day

246
00:28:05,440 --> 00:28:06,880
like a non-stop

247
00:28:06,880 --> 00:28:09,120
testing for the whole days and then

248
00:28:09,120 --> 00:28:12,320
you can drop to sleep later on in next

249
00:28:12,320 --> 00:28:13,679
days

250
00:28:13,679 --> 00:28:14,840
and

251
00:28:14,840 --> 00:28:18,880
um it is supporting with the intel base

252
00:28:18,880 --> 00:28:22,320
or amd basis we can support with uh

253
00:28:22,320 --> 00:28:25,279
windows osx and linux platform for that

254
00:28:25,279 --> 00:28:26,080
uh

255
00:28:26,080 --> 00:28:28,720
cpus and thing will take like a whole

256
00:28:28,720 --> 00:28:30,799
day to do so because of the embedded

257
00:28:30,799 --> 00:28:33,679
platform here emblet platform cpu is a

258
00:28:33,679 --> 00:28:36,000
very very slow so

259
00:28:36,000 --> 00:28:38,640
mostly i'm doing that with the bare bone

260
00:28:38,640 --> 00:28:39,919
devices

261
00:28:39,919 --> 00:28:41,679
and

262
00:28:41,679 --> 00:28:44,399
maybe one cpu per day is the maximum

263
00:28:44,399 --> 00:28:48,479
speed that i can take

264
00:28:48,559 --> 00:28:51,760
time for doing so

265
00:28:52,320 --> 00:28:53,760
and lastly

266
00:28:53,760 --> 00:28:56,559
where there is a bug fix that needed to

267
00:28:56,559 --> 00:28:58,559
be done in the

268
00:28:58,559 --> 00:29:01,279
any kind of support that described above

269
00:29:01,279 --> 00:29:04,320
especially where for the ci

270
00:29:04,320 --> 00:29:06,399
it's a you can see the report is going

271
00:29:06,399 --> 00:29:09,200
like this is a quite uh details and in

272
00:29:09,200 --> 00:29:12,559
this uh screenshot you can see the

273
00:29:12,559 --> 00:29:15,840
report of the ci result which is using

274
00:29:15,840 --> 00:29:17,039
the

275
00:29:17,039 --> 00:29:19,919
integration with the github and

276
00:29:19,919 --> 00:29:22,960
it is having the

277
00:29:23,279 --> 00:29:24,559
mason be

278
00:29:24,559 --> 00:29:27,679
based for the building the packages and

279
00:29:27,679 --> 00:29:30,640
these are the results for the

280
00:29:30,640 --> 00:29:33,840
one test scheme

281
00:29:34,399 --> 00:29:35,919
and

282
00:29:35,919 --> 00:29:39,279
in the testing with ci there is a merit

283
00:29:39,279 --> 00:29:42,000
and there is also demerits for them

284
00:29:42,000 --> 00:29:44,159
and for the merit is a really faster

285
00:29:44,159 --> 00:29:45,200
check

286
00:29:45,200 --> 00:29:47,840
and it is a

287
00:29:47,840 --> 00:29:49,520
integrated to the

288
00:29:49,520 --> 00:29:51,600
development environment for example the

289
00:29:51,600 --> 00:29:54,080
github or any kind of the gits or others

290
00:29:54,080 --> 00:29:54,960
and

291
00:29:54,960 --> 00:29:56,880
it has the automation

292
00:29:56,880 --> 00:29:59,919
testing in the every or after merge of

293
00:29:59,919 --> 00:30:01,520
the new code

294
00:30:01,520 --> 00:30:03,279
and useful for the developer to

295
00:30:03,279 --> 00:30:05,840
instantly check or adjusting their works

296
00:30:05,840 --> 00:30:08,159
with a trial and error so that fast and

297
00:30:08,159 --> 00:30:10,640
then you can almost doing

298
00:30:10,640 --> 00:30:13,039
the checks for the uh either the build

299
00:30:13,039 --> 00:30:15,039
is going to be successful or not

300
00:30:15,039 --> 00:30:17,520
almost in the real time

301
00:30:17,520 --> 00:30:20,320
and the demo for that is first

302
00:30:20,320 --> 00:30:22,720
it's supporting only a limited specific

303
00:30:22,720 --> 00:30:24,480
built environment configuration of the

304
00:30:24,480 --> 00:30:28,000
platform only so uh if you are having

305
00:30:28,000 --> 00:30:29,279
like

306
00:30:29,279 --> 00:30:31,679
one os with having a multiple ways to

307
00:30:31,679 --> 00:30:33,679
set up or the build environments

308
00:30:33,679 --> 00:30:35,600
probably you have to

309
00:30:35,600 --> 00:30:36,960
to

310
00:30:36,960 --> 00:30:39,919
set that one os with a multiple ways

311
00:30:39,919 --> 00:30:42,240
also and that means that you have to

312
00:30:42,240 --> 00:30:45,279
prepare multiple uh ci environment for

313
00:30:45,279 --> 00:30:46,559
doing so

314
00:30:46,559 --> 00:30:48,000
and

315
00:30:48,000 --> 00:30:49,440
due to the uh

316
00:30:49,440 --> 00:30:51,360
supported and unsupported kind of the

317
00:30:51,360 --> 00:30:52,880
build method

318
00:30:52,880 --> 00:30:54,559
missing

319
00:30:54,559 --> 00:30:58,159
cir missing mostly the build bugs

320
00:30:58,159 --> 00:31:00,159
there is also another factors that

321
00:31:00,159 --> 00:31:02,080
developers tends to not maintaining

322
00:31:02,080 --> 00:31:04,480
their ci distribution much

323
00:31:04,480 --> 00:31:06,640
and uh since uh they have to prepare so

324
00:31:06,640 --> 00:31:09,200
many ci and they are probably too

325
00:31:09,200 --> 00:31:11,360
limited devices to support those ci

326
00:31:11,360 --> 00:31:12,799
environments

327
00:31:12,799 --> 00:31:14,399
and probably

328
00:31:14,399 --> 00:31:16,559
um summon

329
00:31:16,559 --> 00:31:19,519
human is uh for example like this can

330
00:31:19,519 --> 00:31:22,559
write a pocs can explain about the how

331
00:31:22,559 --> 00:31:25,600
the bug is actually uh happen and then

332
00:31:25,600 --> 00:31:28,799
the can propose about the fix into some

333
00:31:28,799 --> 00:31:30,640
kind of the uh

334
00:31:30,640 --> 00:31:32,799
proposals and uh

335
00:31:32,799 --> 00:31:35,760
etc etc so let's break down about that

336
00:31:35,760 --> 00:31:37,840
what the human can do with the end

337
00:31:37,840 --> 00:31:39,279
emirate like this

338
00:31:39,279 --> 00:31:42,080
the merit is a human can make a throat

339
00:31:42,080 --> 00:31:44,960
check than this as ci does

340
00:31:44,960 --> 00:31:47,919
and the the

341
00:31:47,919 --> 00:31:50,399
a person with many skill set probably

342
00:31:50,399 --> 00:31:52,399
can support many kind of the platform to

343
00:31:52,399 --> 00:31:53,279
check

344
00:31:53,279 --> 00:31:55,760
so uh the only problem is the resources

345
00:31:55,760 --> 00:31:58,159
and time for him to do that

346
00:31:58,159 --> 00:32:01,279
the second is uh human resources can uh

347
00:32:01,279 --> 00:32:04,399
can build a team to check with a bigger

348
00:32:04,399 --> 00:32:06,799
test platform resources the bigger scope

349
00:32:06,799 --> 00:32:08,720
of tests that can be performed

350
00:32:08,720 --> 00:32:10,000
so uh

351
00:32:10,000 --> 00:32:13,519
it it can be you know uh be a delegated

352
00:32:13,519 --> 00:32:16,320
test works and uh supporting to the many

353
00:32:16,320 --> 00:32:18,960
platforms to be maintained

354
00:32:18,960 --> 00:32:21,519
at almost the same times if the

355
00:32:21,519 --> 00:32:24,159
the resource is big enough

356
00:32:24,159 --> 00:32:25,760
so uh

357
00:32:25,760 --> 00:32:28,320
see i can do this the same stuff too but

358
00:32:28,320 --> 00:32:30,640
i don't think that they can

359
00:32:30,640 --> 00:32:33,440
doing a parallel like uh for operating

360
00:32:33,440 --> 00:32:35,679
system in the same times

361
00:32:35,679 --> 00:32:38,320
and uh

362
00:32:38,960 --> 00:32:41,519
human can cover testing for build bug

363
00:32:41,519 --> 00:32:43,519
fixes and troubleshooting too and we

364
00:32:43,519 --> 00:32:47,120
will explain later on in the next slides

365
00:32:47,120 --> 00:32:48,559
and

366
00:32:48,559 --> 00:32:51,919
the other the next one is a human

367
00:32:51,919 --> 00:32:53,279
capable to do

368
00:32:53,279 --> 00:32:54,960
quality control or the quality or

369
00:32:54,960 --> 00:32:57,200
assurance of the stable versions after

370
00:32:57,200 --> 00:32:57,919
the

371
00:32:57,919 --> 00:32:59,600
doing the thorough checks and uh

372
00:32:59,600 --> 00:33:01,600
thorough testings and then

373
00:33:01,600 --> 00:33:03,919
having

374
00:33:03,919 --> 00:33:04,640
no

375
00:33:04,640 --> 00:33:07,440
bugs or no regressions that being

376
00:33:07,440 --> 00:33:08,799
spotted

377
00:33:08,799 --> 00:33:11,919
the rate for that is a it needs so much

378
00:33:11,919 --> 00:33:14,720
dedications resource skill set is needed

379
00:33:14,720 --> 00:33:18,080
too and time time is as per explain the

380
00:33:18,080 --> 00:33:19,919
previous slide

381
00:33:19,919 --> 00:33:21,760
and testing by the human resources

382
00:33:21,760 --> 00:33:24,320
cannot be done instantly and needs a

383
00:33:24,320 --> 00:33:26,240
regularly planned

384
00:33:26,240 --> 00:33:28,559
in order to make a delegations and the

385
00:33:28,559 --> 00:33:30,960
coordination so uh

386
00:33:30,960 --> 00:33:33,279
needed to be planned exactly

387
00:33:33,279 --> 00:33:35,679
strategically about the

388
00:33:35,679 --> 00:33:39,440
how when and where to make a

389
00:33:39,440 --> 00:33:41,919
testing for the uh following the

390
00:33:41,919 --> 00:33:44,720
development process

391
00:33:44,720 --> 00:33:47,200
so in this slide i will try to explain

392
00:33:47,200 --> 00:33:49,440
to you about the one of the strategy

393
00:33:49,440 --> 00:33:53,600
that i am doing in the order to uh

394
00:33:53,600 --> 00:33:56,320
uh performing test process of uh of

395
00:33:56,320 --> 00:33:58,559
following the rudder two major version

396
00:33:58,559 --> 00:34:00,559
five so far

397
00:34:00,559 --> 00:34:03,440
so i made a kind of the other box in

398
00:34:03,440 --> 00:34:07,039
another vectors of the either the

399
00:34:07,039 --> 00:34:09,520
platforms or the architectures and so on

400
00:34:09,520 --> 00:34:11,839
and then the other three is a

401
00:34:11,839 --> 00:34:13,359
the place where

402
00:34:13,359 --> 00:34:16,079
i have to do the overall test of the

403
00:34:16,079 --> 00:34:18,839
products again

404
00:34:18,839 --> 00:34:21,520
and this is actually implemented in the

405
00:34:21,520 --> 00:34:24,399
version five and you can see uh the

406
00:34:24,399 --> 00:34:27,440
details uh based on the these uh release

407
00:34:27,440 --> 00:34:29,599
versions of the right array uh from the

408
00:34:29,599 --> 00:34:32,480
version uh five it has uh

409
00:34:32,480 --> 00:34:35,760
the recent one is a 5.4.2

410
00:34:35,760 --> 00:34:38,079
and we are starting this uh

411
00:34:38,079 --> 00:34:40,159
session uh from the

412
00:34:40,159 --> 00:34:41,359
version

413
00:34:41,359 --> 00:34:44,359
5.0.0

414
00:34:44,560 --> 00:34:46,320
and

415
00:34:46,320 --> 00:34:48,399
the roadmap for the stability and the

416
00:34:48,399 --> 00:34:52,079
portability in the radar ready 2 version

417
00:34:52,079 --> 00:34:53,079
until the

418
00:34:53,079 --> 00:34:56,879
5.4.0 goes like this in the testing

419
00:34:56,879 --> 00:34:58,400
circumstances

420
00:34:58,400 --> 00:35:00,240
so

421
00:35:00,240 --> 00:35:02,880
the version released five is happening

422
00:35:02,880 --> 00:35:03,760
and then

423
00:35:03,760 --> 00:35:06,800
i attacked this as a this color with the

424
00:35:06,800 --> 00:35:09,200
alert one let the development do the

425
00:35:09,200 --> 00:35:10,720
stuff for the

426
00:35:10,720 --> 00:35:12,400
improving and

427
00:35:12,400 --> 00:35:15,200
making plans for the additional features

428
00:35:15,200 --> 00:35:17,119
and then

429
00:35:17,119 --> 00:35:20,640
when the release version of the 5.1

430
00:35:20,640 --> 00:35:23,280
exists the feature additional

431
00:35:23,280 --> 00:35:27,040
stuff was added to the project and

432
00:35:27,040 --> 00:35:29,920
i also raised the alert too since there

433
00:35:29,920 --> 00:35:32,320
are plenty of the features that can

434
00:35:32,320 --> 00:35:33,280
affect

435
00:35:33,280 --> 00:35:35,280
other kind of the

436
00:35:35,280 --> 00:35:39,440
platforms uh users do and

437
00:35:39,440 --> 00:35:41,320
when the

438
00:35:41,320 --> 00:35:44,320
5.2.0 release and there there is a no

439
00:35:44,320 --> 00:35:46,720
testing what's going on until

440
00:35:46,720 --> 00:35:48,720
at that point so

441
00:35:48,720 --> 00:35:50,800
i was performing the test for the

442
00:35:50,800 --> 00:35:53,200
disaversions

443
00:35:53,200 --> 00:35:56,960
and it came up with a 5.2.1

444
00:35:56,960 --> 00:36:01,280
with is which was actually stable and it

445
00:36:01,280 --> 00:36:03,599
has a bug fix

446
00:36:03,599 --> 00:36:07,440
related uh result from the several tests

447
00:36:07,440 --> 00:36:08,560
that uh

448
00:36:08,560 --> 00:36:11,440
pancake is doing many works uh too for

449
00:36:11,440 --> 00:36:13,839
the testing and

450
00:36:13,839 --> 00:36:16,240
the full result is uh

451
00:36:16,240 --> 00:36:19,119
becoming the stable version of the

452
00:36:19,119 --> 00:36:21,440
5.2.1

453
00:36:21,440 --> 00:36:23,359
and

454
00:36:23,359 --> 00:36:27,200
again new arduino additional feature

455
00:36:27,200 --> 00:36:30,800
was uh develop and release and uh

456
00:36:30,800 --> 00:36:34,160
erase again the alert uh to be uh in

457
00:36:34,160 --> 00:36:36,079
this time is uh

458
00:36:36,079 --> 00:36:38,160
straight to the alert too because of uh

459
00:36:38,160 --> 00:36:41,280
there are some sensitive uh platform

460
00:36:41,280 --> 00:36:43,359
that actually being touched

461
00:36:43,359 --> 00:36:45,359
that time was uh

462
00:36:45,359 --> 00:36:49,119
making a bug for the other platform

463
00:36:49,119 --> 00:36:50,079
then

464
00:36:50,079 --> 00:36:54,560
we made another uh testing for that and

465
00:36:54,560 --> 00:36:57,560
the result is uh the version of the

466
00:36:57,560 --> 00:37:00,640
5.3.1 which is quite simple and it has

467
00:37:00,640 --> 00:37:01,440
no

468
00:37:01,440 --> 00:37:04,560
bug anymore and all clear at the time

469
00:37:04,560 --> 00:37:06,320
some kind of the

470
00:37:06,320 --> 00:37:09,200
changes there and then uh

471
00:37:09,200 --> 00:37:12,480
so we think it is needed to perform uh

472
00:37:12,480 --> 00:37:14,240
stable at that time but the one

473
00:37:14,240 --> 00:37:17,040
platforms cannot be pinned uh as quick

474
00:37:17,040 --> 00:37:18,800
as other platform

475
00:37:18,800 --> 00:37:22,480
so we leave it to the git for that under

476
00:37:22,480 --> 00:37:25,839
decision of the pancake and

477
00:37:25,839 --> 00:37:28,880
the development for fixing the one

478
00:37:28,880 --> 00:37:31,440
leftover platform is continue and the

479
00:37:31,440 --> 00:37:34,880
five point when the actual test that can

480
00:37:34,880 --> 00:37:38,480
be performed the strategy strategy looks

481
00:37:38,480 --> 00:37:41,920
work in this uh rather it to uh major

482
00:37:41,920 --> 00:37:43,520
version five so

483
00:37:43,520 --> 00:37:45,040
i think it will be good for the

484
00:37:45,040 --> 00:37:47,359
reference for the future too

485
00:37:47,359 --> 00:37:49,680
so the next slide is about the operating

486
00:37:49,680 --> 00:37:52,400
system used in the test

487
00:37:52,400 --> 00:37:54,480
so the supported operating system for

488
00:37:54,480 --> 00:37:56,720
the generic platforms are

489
00:37:56,720 --> 00:37:57,920
we are using

490
00:37:57,920 --> 00:37:59,839
osx linux

491
00:37:59,839 --> 00:38:04,400
bsd basis windows android and ios

492
00:38:04,400 --> 00:38:06,079
in this case you have to ask pancake for

493
00:38:06,079 --> 00:38:06,960
that

494
00:38:06,960 --> 00:38:09,280
and which is uh the supported os

495
00:38:09,280 --> 00:38:10,960
versions are

496
00:38:10,960 --> 00:38:13,359
long term supported operating systems

497
00:38:13,359 --> 00:38:15,839
and we don't test unsupported operating

498
00:38:15,839 --> 00:38:17,680
systems anymore

499
00:38:17,680 --> 00:38:19,520
and then the specific device or

500
00:38:19,520 --> 00:38:21,599
distributions that is having us uh

501
00:38:21,599 --> 00:38:23,359
specific operating systems can be

502
00:38:23,359 --> 00:38:24,800
supported too

503
00:38:24,800 --> 00:38:27,520
separately with a dedicated mentor if

504
00:38:27,520 --> 00:38:28,560
the

505
00:38:28,560 --> 00:38:31,119
main error is exist and for example like

506
00:38:31,119 --> 00:38:35,440
a gameboy react os sergey linux linux

507
00:38:35,440 --> 00:38:37,520
hobby is with uh

508
00:38:37,520 --> 00:38:39,680
exotic cpus

509
00:38:39,680 --> 00:38:43,040
like arduino and so on

510
00:38:43,359 --> 00:38:46,400
cpu architecture architecture so

511
00:38:46,400 --> 00:38:48,800
in this case i'm focusing for the most

512
00:38:48,800 --> 00:38:52,800
commonly used like intel md arm mips ppc

513
00:38:52,800 --> 00:38:54,079
and windows

514
00:38:54,079 --> 00:38:56,800
and most of them are supporting in the

515
00:38:56,800 --> 00:38:59,839
32 and 64.

516
00:38:59,839 --> 00:39:03,680
bits of platform of the cpus

517
00:39:06,000 --> 00:39:07,200
we are also

518
00:39:07,200 --> 00:39:10,000
doing the extension test for the uh

519
00:39:10,000 --> 00:39:14,079
arm m1 supporting the new osx and then

520
00:39:14,079 --> 00:39:15,839
we are having many kind of the

521
00:39:15,839 --> 00:39:18,320
experiment with the arm and currently we

522
00:39:18,320 --> 00:39:21,520
are well actually i have some boxes of

523
00:39:21,520 --> 00:39:24,480
the cortex and kirk with running with

524
00:39:24,480 --> 00:39:26,880
several operators operating system

525
00:39:26,880 --> 00:39:31,119
installed so it is done in that uh

526
00:39:31,119 --> 00:39:34,800
environments too and then uh also

527
00:39:34,800 --> 00:39:38,480
well uh me and pancake is having a

528
00:39:38,480 --> 00:39:40,400
solaris so

529
00:39:40,400 --> 00:39:42,560
we are doing data separately in this

530
00:39:42,560 --> 00:39:44,240
case is doing uh

531
00:39:44,240 --> 00:39:47,760
some uh custom versions

532
00:39:47,760 --> 00:39:49,440
on the bug

533
00:39:49,440 --> 00:39:52,800
and uh can be uh in one platforms or

534
00:39:52,800 --> 00:39:55,280
overall platforms that are supporting

535
00:39:55,280 --> 00:39:56,560
and can be installed with the right

536
00:39:56,560 --> 00:39:58,640
array with the common installation

537
00:39:58,640 --> 00:40:00,320
methods

538
00:40:00,320 --> 00:40:02,320
and we are doing the

539
00:40:02,320 --> 00:40:03,920
in the recent version five we are doing

540
00:40:03,920 --> 00:40:06,079
a stability and portability test which

541
00:40:06,079 --> 00:40:09,440
is actually started from the 4.5

542
00:40:09,440 --> 00:40:13,119
and it is a really uh

543
00:40:13,119 --> 00:40:16,160
pointing to the compatibility on the os

544
00:40:16,160 --> 00:40:18,400
architecture and the devices and for the

545
00:40:18,400 --> 00:40:21,200
devices it will be a case by case

546
00:40:21,200 --> 00:40:22,640
matters

547
00:40:22,640 --> 00:40:23,520
and

548
00:40:23,520 --> 00:40:26,079
this is actually quite new um is uh

549
00:40:26,079 --> 00:40:28,720
still under uh uh

550
00:40:28,720 --> 00:40:30,720
experiment or development which is a

551
00:40:30,720 --> 00:40:33,760
backup and restore uh for

552
00:40:33,760 --> 00:40:36,720
features of the testing

553
00:40:36,720 --> 00:40:39,280
environments that we are having

554
00:40:39,280 --> 00:40:41,680
and probably it will be a very good ways

555
00:40:41,680 --> 00:40:45,520
to be implemented as a plug-in or as a

556
00:40:45,520 --> 00:40:46,640
one of the

557
00:40:46,640 --> 00:40:48,960
main features in the rotary too

558
00:40:48,960 --> 00:40:52,560
we'll see about that

559
00:40:52,560 --> 00:40:54,480
now dealing with the r2 plugins there

560
00:40:54,480 --> 00:40:56,160
are two kind of the plugins here which

561
00:40:56,160 --> 00:40:57,359
is a one

562
00:40:57,359 --> 00:40:58,560
is uh

563
00:40:58,560 --> 00:41:01,520
actually uh plug is integrated uh

564
00:41:01,520 --> 00:41:04,480
with the rotary uh source code and uh

565
00:41:04,480 --> 00:41:06,480
actually uh compile

566
00:41:06,480 --> 00:41:09,359
together with a rather a package with

567
00:41:09,359 --> 00:41:11,440
example like

568
00:41:11,440 --> 00:41:14,160
compressions uh

569
00:41:14,160 --> 00:41:16,400
plugins and so on

570
00:41:16,400 --> 00:41:17,760
and

571
00:41:17,760 --> 00:41:21,119
those are also rgbm

572
00:41:21,119 --> 00:41:23,040
so you have to understand but have to

573
00:41:23,040 --> 00:41:25,280
know also about the how to backup your

574
00:41:25,280 --> 00:41:27,280
plugins and

575
00:41:27,280 --> 00:41:30,000
for more informations about the how

576
00:41:30,000 --> 00:41:33,040
plugin is integrated to the rather core

577
00:41:33,040 --> 00:41:35,760
components you have to seek those

578
00:41:35,760 --> 00:41:37,680
informations too before you are

579
00:41:37,680 --> 00:41:40,560
understanding about how to pin the bug

580
00:41:40,560 --> 00:41:42,960
so in that case you will need the

581
00:41:42,960 --> 00:41:45,119
informations about the plugin which is

582
00:41:45,119 --> 00:41:47,839
written in the archbook and that can be

583
00:41:47,839 --> 00:41:50,079
accessed online or you can see the

584
00:41:50,079 --> 00:41:53,920
reference in this slide later on

585
00:41:59,119 --> 00:42:01,680
okay we are here in the practical test

586
00:42:01,680 --> 00:42:05,680
and it has a two items first is

587
00:42:05,680 --> 00:42:07,280
explaining about the

588
00:42:07,280 --> 00:42:09,520
how to know the limitations of the

589
00:42:09,520 --> 00:42:12,640
router to end its environment so we can

590
00:42:12,640 --> 00:42:14,960
actually defer which one is bug and

591
00:42:14,960 --> 00:42:17,280
which one is not

592
00:42:17,280 --> 00:42:18,880
for the tester and then

593
00:42:18,880 --> 00:42:21,680
the other one is a testing in action so

594
00:42:21,680 --> 00:42:25,440
we will pick one case uh study for the

595
00:42:25,440 --> 00:42:27,359
testing in this case probably i will

596
00:42:27,359 --> 00:42:29,200
pick about the

597
00:42:29,200 --> 00:42:31,839
build test for understand it so uh you

598
00:42:31,839 --> 00:42:33,680
have to be careful with the stuff like

599
00:42:33,680 --> 00:42:36,079
uh in the debugging for example

600
00:42:36,079 --> 00:42:38,240
several system just doesn't support the

601
00:42:38,240 --> 00:42:40,319
software breakpoints instead using the

602
00:42:40,319 --> 00:42:42,480
hardware breakpoints especially where

603
00:42:42,480 --> 00:42:44,319
you're dealing with a much of the

604
00:42:44,319 --> 00:42:45,920
embedded or

605
00:42:45,920 --> 00:42:47,520
iot devices

606
00:42:47,520 --> 00:42:50,560
and some cpu probably have

607
00:42:50,560 --> 00:42:52,079
a

608
00:42:52,079 --> 00:42:53,920
limit

609
00:42:53,920 --> 00:42:56,880
for the usage of the uh hardware

610
00:42:56,880 --> 00:43:00,240
breakpoints for example in in the intel

611
00:43:00,240 --> 00:43:01,760
phones it has a

612
00:43:01,760 --> 00:43:04,160
four breakpoints for the hardware that

613
00:43:04,160 --> 00:43:05,680
can be used

614
00:43:05,680 --> 00:43:08,720
and that is a very important uh

615
00:43:08,720 --> 00:43:10,240
details that you have to understand

616
00:43:10,240 --> 00:43:12,000
beforehand

617
00:43:12,000 --> 00:43:14,800
written especially when you are in the

618
00:43:14,800 --> 00:43:17,280
middle of the debugging something

619
00:43:17,280 --> 00:43:18,880
and

620
00:43:18,880 --> 00:43:21,359
it has also with the emulation like acyl

621
00:43:21,359 --> 00:43:24,240
um so for example you cannot force acl

622
00:43:24,240 --> 00:43:27,599
to go backwards without setting the

623
00:43:27,599 --> 00:43:30,800
initiation of the starting point for the

624
00:43:30,800 --> 00:43:33,520
vm of the esl to start

625
00:43:33,520 --> 00:43:36,000
so uh that is a one

626
00:43:36,000 --> 00:43:38,960
tips that the one stuff that you need to

627
00:43:38,960 --> 00:43:41,839
understand and

628
00:43:41,839 --> 00:43:43,440
not only about the

629
00:43:43,440 --> 00:43:45,280
analysis but

630
00:43:45,280 --> 00:43:47,280
in the plugins also there are several

631
00:43:47,280 --> 00:43:49,280
limitations that you have to understand

632
00:43:49,280 --> 00:43:50,319
too

633
00:43:50,319 --> 00:43:51,839
for example

634
00:43:51,839 --> 00:43:55,280
in the r2dac plug-in you cannot run pdd

635
00:43:55,280 --> 00:43:56,000
on

636
00:43:56,000 --> 00:43:58,400
non-intel platforms like uh

637
00:43:58,400 --> 00:44:01,760
maps for example or uh ppcs because of

638
00:44:01,760 --> 00:44:03,599
it's just not supported for that

639
00:44:03,599 --> 00:44:04,880
platforms

640
00:44:04,880 --> 00:44:07,280
and for the artegidra i

641
00:44:07,280 --> 00:44:10,079
you just have to install arter guitar

642
00:44:10,079 --> 00:44:13,520
integration with the rather pm or else

643
00:44:13,520 --> 00:44:15,359
well you can compile the guitar probably

644
00:44:15,359 --> 00:44:18,079
you you you cannot make it uh integrate

645
00:44:18,079 --> 00:44:19,440
it with the uh

646
00:44:19,440 --> 00:44:22,079
rudder too if you don't set it up

647
00:44:22,079 --> 00:44:23,359
properly

648
00:44:23,359 --> 00:44:26,160
because of the integrations is a quite

649
00:44:26,160 --> 00:44:28,960
uh demonstrations uh first is about the

650
00:44:28,960 --> 00:44:31,359
uh build test the build tessa probably

651
00:44:31,359 --> 00:44:33,040
we will pick uh

652
00:44:33,040 --> 00:44:35,440
either a system-wide installation or use

653
00:44:35,440 --> 00:44:37,599
space probably uh

654
00:44:37,599 --> 00:44:39,680
i'm using systemwide mostly for the test

655
00:44:39,680 --> 00:44:42,240
so uh probably i'm gonna just doing that

656
00:44:42,240 --> 00:44:44,319
in the freebsd environment architecture

657
00:44:44,319 --> 00:44:46,079
binaries and uh

658
00:44:46,079 --> 00:44:48,640
debugging in talking about how it is

659
00:44:48,640 --> 00:44:52,000
started with the having the orods and

660
00:44:52,000 --> 00:44:55,040
lastly we'll do some testing of the asio

661
00:44:55,040 --> 00:44:57,520
and let's see whether uh

662
00:44:57,520 --> 00:45:00,800
can be performed quite well and

663
00:45:00,800 --> 00:45:02,800
also there is a

664
00:45:02,800 --> 00:45:05,040
test build reporting and that i would

665
00:45:05,040 --> 00:45:06,960
like to uh

666
00:45:06,960 --> 00:45:10,400
giving several examples for the

667
00:45:10,400 --> 00:45:13,200
reporting purpose and

668
00:45:13,200 --> 00:45:16,079
it will be shown in the in the screen

669
00:45:16,079 --> 00:45:17,440
after the

670
00:45:17,440 --> 00:45:18,640
testing

671
00:45:18,640 --> 00:45:21,119
stuff has been done so so let's get it

672
00:45:21,119 --> 00:45:23,359
done

673
00:45:24,079 --> 00:45:26,480
so always refer to the uh

674
00:45:26,480 --> 00:45:29,920
radare org github pages for the

675
00:45:29,920 --> 00:45:31,680
downloading of

676
00:45:31,680 --> 00:45:34,400
the new release version so uh all you

677
00:45:34,400 --> 00:45:37,280
have to do is go to the uh which version

678
00:45:37,280 --> 00:45:39,839
that has been released

679
00:45:39,839 --> 00:45:41,280
latest versions

680
00:45:41,280 --> 00:45:43,680
and scroll down to found

681
00:45:43,680 --> 00:45:46,319
the assets and found the source code for

682
00:45:46,319 --> 00:45:49,520
the installation for example in this one

683
00:45:49,520 --> 00:45:51,440
so after you pick the source code that

684
00:45:51,440 --> 00:45:54,000
you can download it to your installation

685
00:45:54,000 --> 00:45:56,720
platforms

686
00:45:58,640 --> 00:46:02,079
in this case i will do the uh free vsts

687
00:46:02,079 --> 00:46:05,359
thing for uh this one

688
00:46:05,359 --> 00:46:09,280
and it is uh using the 12.2 version

689
00:46:09,280 --> 00:46:12,720
which is actually currently are still

690
00:46:12,720 --> 00:46:15,920
listing yeah until the uh

691
00:46:15,920 --> 00:46:17,440
end of march of

692
00:46:17,440 --> 00:46:20,800
next year so it's quite good for doing

693
00:46:20,800 --> 00:46:23,280
the test

694
00:46:24,000 --> 00:46:27,599
then after the version is

695
00:46:27,599 --> 00:46:30,400
it and we can just start to download

696
00:46:30,400 --> 00:46:31,760
about the

697
00:46:31,760 --> 00:46:34,000
the package of the source code that we

698
00:46:34,000 --> 00:46:36,079
saw before in the github of the right

699
00:46:36,079 --> 00:46:38,079
array and all you have to do next is

700
00:46:38,079 --> 00:46:40,319
just

701
00:46:41,200 --> 00:46:43,440
extract the

702
00:46:43,440 --> 00:46:46,400
out of the box

703
00:46:47,680 --> 00:46:50,800
there you go it will be extracted just

704
00:46:50,800 --> 00:46:53,040
as per it is and

705
00:46:53,040 --> 00:46:56,000
all you have to do is uh

706
00:46:56,000 --> 00:46:58,400
well in my case i'd like to make sure

707
00:46:58,400 --> 00:47:01,040
this is a release version so

708
00:47:01,040 --> 00:47:02,160
i just

709
00:47:02,160 --> 00:47:04,640
renamed this into uh

710
00:47:04,640 --> 00:47:06,319
kind of the

711
00:47:06,319 --> 00:47:09,200
sd ways

712
00:47:09,200 --> 00:47:12,079
like this and i just go to this

713
00:47:12,079 --> 00:47:15,280
directories and just

714
00:47:15,280 --> 00:47:17,920
first i have to make sure whether this

715
00:47:17,920 --> 00:47:21,040
version has the previous uh rotary or

716
00:47:21,040 --> 00:47:24,079
not so oh it has the previous version so

717
00:47:24,079 --> 00:47:26,720
all we have to do right now is

718
00:47:26,720 --> 00:47:29,760
try to get rid of it by uh

719
00:47:29,760 --> 00:47:33,839
uninstalling the previous version first

720
00:47:34,640 --> 00:47:36,400
okay so the

721
00:47:36,400 --> 00:47:38,559
freebsd you have to

722
00:47:38,559 --> 00:47:39,920
really uh

723
00:47:39,920 --> 00:47:42,640
make sure that

724
00:47:42,640 --> 00:47:43,920
to use the

725
00:47:43,920 --> 00:47:45,119
gmake

726
00:47:45,119 --> 00:47:48,480
uh instead of the silang

727
00:47:48,480 --> 00:47:49,359
make

728
00:47:49,359 --> 00:47:51,640
to do the uh installation and

729
00:47:51,640 --> 00:47:54,160
uninstallation script so

730
00:47:54,160 --> 00:47:56,800
in this case uh we will do the gmaq for

731
00:47:56,800 --> 00:47:59,839
the uninstall or install or purging a

732
00:47:59,839 --> 00:48:01,599
router package

733
00:48:01,599 --> 00:48:04,559
installation of the new one

734
00:48:04,559 --> 00:48:06,640
after you uninstall and purge the

735
00:48:06,640 --> 00:48:09,280
previous version so you are very good to

736
00:48:09,280 --> 00:48:11,359
uh do the installation for the latest

737
00:48:11,359 --> 00:48:12,559
versions

738
00:48:12,559 --> 00:48:15,119
so all you have to do is you go to the

739
00:48:15,119 --> 00:48:18,000
main directories of the where the

740
00:48:18,000 --> 00:48:20,640
make file and the configure file are

741
00:48:20,640 --> 00:48:23,200
there and uh over there uh all you have

742
00:48:23,200 --> 00:48:26,079
to do is just write the one command and

743
00:48:26,079 --> 00:48:28,240
if

744
00:48:28,240 --> 00:48:30,319
the

745
00:48:30,319 --> 00:48:32,640
as you do are

746
00:48:32,640 --> 00:48:33,920
set uh

747
00:48:33,920 --> 00:48:36,960
well in your machines and uh

748
00:48:36,960 --> 00:48:38,160
you

749
00:48:38,160 --> 00:48:40,640
you will let the rather using that as

750
00:48:40,640 --> 00:48:43,280
you do for the installing the specific

751
00:48:43,280 --> 00:48:46,160
path uh for the library purpose

752
00:48:46,160 --> 00:48:48,319
so all you have to do is just run this

753
00:48:48,319 --> 00:48:52,160
command like this there we go

754
00:48:54,240 --> 00:48:56,160
this is actually the uh

755
00:48:56,160 --> 00:48:58,720
summary but what being installed right

756
00:48:58,720 --> 00:49:01,440
now it is showing the version of the

757
00:49:01,440 --> 00:49:04,440
5.4.2

758
00:49:05,599 --> 00:49:07,280
so here we go the installation is

759
00:49:07,280 --> 00:49:09,760
starting

760
00:49:10,160 --> 00:49:13,359
the compilation preparations is being

761
00:49:13,359 --> 00:49:16,759
start here

762
00:49:16,800 --> 00:49:20,000
so i will pose uh the process so we can

763
00:49:20,000 --> 00:49:20,880
just

764
00:49:20,880 --> 00:49:24,079
skip it until the end of the

765
00:49:24,079 --> 00:49:27,520
uh this building process

766
00:49:28,240 --> 00:49:29,200
there are

767
00:49:29,200 --> 00:49:31,839
several a warning there that uh

768
00:49:31,839 --> 00:49:33,520
probably came up so you don't have to

769
00:49:33,520 --> 00:49:35,280
worry about that uh

770
00:49:35,280 --> 00:49:38,720
as long as the error doesn't came up

771
00:49:38,720 --> 00:49:40,720
okay it looks like the installation that

772
00:49:40,720 --> 00:49:43,599
has been done so if you are seeing the

773
00:49:43,599 --> 00:49:46,319
messages like this meaning that the

774
00:49:46,319 --> 00:49:48,559
installation that has been done uh

775
00:49:48,559 --> 00:49:50,160
successfully

776
00:49:50,160 --> 00:49:53,040
so uh all you have to do uh depends on

777
00:49:53,040 --> 00:49:56,640
the your flavor of the tty you can copy

778
00:49:56,640 --> 00:49:59,280
paste about the what has been recorded

779
00:49:59,280 --> 00:50:03,200
in the screen or you can also pipe for

780
00:50:03,200 --> 00:50:06,960
every std out of the message that they

781
00:50:06,960 --> 00:50:11,280
generated during the compilation process

782
00:50:11,280 --> 00:50:13,200
so after you

783
00:50:13,200 --> 00:50:16,079
managed to get the uh installation lock

784
00:50:16,079 --> 00:50:18,480
yeah this is actually contains the

785
00:50:18,480 --> 00:50:20,720
information that you will need to

786
00:50:20,720 --> 00:50:24,079
uh re to to report if there is a bug is

787
00:50:24,079 --> 00:50:26,480
going on or the some things happen is

788
00:50:26,480 --> 00:50:29,680
that is a not as per plan

789
00:50:29,680 --> 00:50:30,800
so in this

790
00:50:30,800 --> 00:50:34,960
uh example this part which is uh

791
00:50:34,960 --> 00:50:36,800
we can see the

792
00:50:36,800 --> 00:50:40,079
the one with the final report is a very

793
00:50:40,079 --> 00:50:42,800
important one which is uh explaining you

794
00:50:42,800 --> 00:50:43,920
about the

795
00:50:43,920 --> 00:50:47,599
what kind of the installations and uh

796
00:50:47,599 --> 00:50:50,400
what kind of the stuff that actually uh

797
00:50:50,400 --> 00:50:52,720
being uh installed and being detected

798
00:50:52,720 --> 00:50:55,760
prior to your system right now

799
00:50:55,760 --> 00:50:58,079
and if you are having a problem please

800
00:50:58,079 --> 00:51:01,839
attach this uh report or at least uh

801
00:51:01,839 --> 00:51:04,559
this final report is quite important

802
00:51:04,559 --> 00:51:06,640
for the developer

803
00:51:06,640 --> 00:51:09,119
teams to actually

804
00:51:09,119 --> 00:51:14,000
study about how the system is installed

805
00:51:14,640 --> 00:51:17,359
and there is also uh

806
00:51:17,359 --> 00:51:18,720
another one

807
00:51:18,720 --> 00:51:21,119
other part which is

808
00:51:21,119 --> 00:51:23,200
uh explaining about the

809
00:51:23,200 --> 00:51:25,280
building environment

810
00:51:25,280 --> 00:51:28,079
and uh it is having a another of our

811
00:51:28,079 --> 00:51:29,920
report over here

812
00:51:29,920 --> 00:51:31,520
it is uh explaining what the what

813
00:51:31,520 --> 00:51:33,920
compare that you are using and and so on

814
00:51:33,920 --> 00:51:38,000
and so on then the installation is uh

815
00:51:38,000 --> 00:51:39,440
running

816
00:51:39,440 --> 00:51:42,000
and in this case uh the the capstone is

817
00:51:42,000 --> 00:51:43,599
in sulfurs

818
00:51:43,599 --> 00:51:46,400
being compiled here

819
00:51:46,400 --> 00:51:48,880
and then the components of the radar

820
00:51:48,880 --> 00:51:50,960
will be uh

821
00:51:50,960 --> 00:51:54,160
install afterwards

822
00:51:54,480 --> 00:51:57,119
so uh this is actually uh

823
00:51:57,119 --> 00:52:00,720
the source code that uh being uh uh

824
00:52:00,720 --> 00:52:04,160
fetched and used for the compilations

825
00:52:04,160 --> 00:52:06,960
which is uh having the main path of the

826
00:52:06,960 --> 00:52:10,000
library where the rotary

827
00:52:10,000 --> 00:52:14,240
source code is actually being placed

828
00:52:14,240 --> 00:52:16,319
and

829
00:52:16,319 --> 00:52:18,800
these are the final uh

830
00:52:18,800 --> 00:52:20,960
compilation stages which is uh

831
00:52:20,960 --> 00:52:22,800
generating uh

832
00:52:22,800 --> 00:52:26,480
the binary uh for the uh

833
00:52:26,480 --> 00:52:28,480
router reuse

834
00:52:28,480 --> 00:52:29,599
and

835
00:52:29,599 --> 00:52:31,839
as you can see most of the

836
00:52:31,839 --> 00:52:35,359
operations are using the gmac here not

837
00:52:35,359 --> 00:52:37,280
using the

838
00:52:37,280 --> 00:52:38,640
make

839
00:52:38,640 --> 00:52:41,440
the concept is using the acr for the

840
00:52:41,440 --> 00:52:44,160
installations and in the end the package

841
00:52:44,160 --> 00:52:45,760
is being

842
00:52:45,760 --> 00:52:49,839
installed and placed successfully

843
00:52:49,839 --> 00:52:52,000
so since we are okay with the

844
00:52:52,000 --> 00:52:54,160
installation so let's try with some

845
00:52:54,160 --> 00:52:55,839
basic taste that

846
00:52:55,839 --> 00:52:58,720
to check whether the

847
00:52:58,880 --> 00:53:01,599
this version is actually ready to use or

848
00:53:01,599 --> 00:53:04,400
not so some basic operations can be used

849
00:53:04,400 --> 00:53:06,559
for this purpose

850
00:53:06,559 --> 00:53:09,280
an example

851
00:53:10,000 --> 00:53:11,920
well first you want to be sure about the

852
00:53:11,920 --> 00:53:14,480
versions of the rotary stuff that you're

853
00:53:14,480 --> 00:53:18,079
using and then the let's see what the

854
00:53:18,079 --> 00:53:20,800
the plug-in components do well we don't

855
00:53:20,800 --> 00:53:23,680
have a miss about that and uh now we are

856
00:53:23,680 --> 00:53:25,599
having this

857
00:53:25,599 --> 00:53:28,720
then probably we would like to uh

858
00:53:28,720 --> 00:53:30,079
try to

859
00:53:30,079 --> 00:53:31,520
load the

860
00:53:31,520 --> 00:53:34,160
some binary for the test in bsd we have

861
00:53:34,160 --> 00:53:37,440
the test binary like this

862
00:53:37,440 --> 00:53:38,640
and

863
00:53:38,640 --> 00:53:42,640
check about the uh whether the uh

864
00:53:42,640 --> 00:53:44,960
architecture and

865
00:53:44,960 --> 00:53:47,599
every uh

866
00:53:47,599 --> 00:53:49,760
detections are

867
00:53:49,760 --> 00:53:52,000
in the right place

868
00:53:52,000 --> 00:53:54,319
this is correct

869
00:53:54,319 --> 00:53:57,119
and we are having the freebsd running

870
00:53:57,119 --> 00:54:01,280
here with amd's no problem

871
00:54:01,280 --> 00:54:02,800
and

872
00:54:02,800 --> 00:54:06,319
after that we can start with uh some

873
00:54:06,319 --> 00:54:08,800
several basic analysis

874
00:54:08,800 --> 00:54:11,119
for example

875
00:54:11,119 --> 00:54:13,200
sometimes it grasps in the previous

876
00:54:13,200 --> 00:54:14,400
versions

877
00:54:14,400 --> 00:54:18,000
we can see about the

878
00:54:18,319 --> 00:54:21,200
analyzing about the symbols and let's

879
00:54:21,200 --> 00:54:23,599
check whether the symbols are actually

880
00:54:23,599 --> 00:54:24,800
being

881
00:54:24,800 --> 00:54:25,680
fetched

882
00:54:25,680 --> 00:54:28,240
properly you can compare this result

883
00:54:28,240 --> 00:54:30,640
with another tools like uh

884
00:54:30,640 --> 00:54:33,520
object dom or redev or any kind of the

885
00:54:33,520 --> 00:54:36,000
tools that can confirm but the

886
00:54:36,000 --> 00:54:38,720
reading of the imports or export here

887
00:54:38,720 --> 00:54:41,760
are correct or not

888
00:54:41,760 --> 00:54:43,680
and

889
00:54:43,680 --> 00:54:46,799
we can increase about the analysis level

890
00:54:46,799 --> 00:54:50,319
and let's see what the function list

891
00:54:50,319 --> 00:54:52,400
stuff like that this is a quite

892
00:54:52,400 --> 00:54:54,960
important if you are going to

893
00:54:54,960 --> 00:54:58,400
use the analysis for the uh radare

894
00:54:58,400 --> 00:54:59,599
and

895
00:54:59,599 --> 00:55:03,839
let's start with these functions

896
00:55:03,839 --> 00:55:07,839
it is printed quite well

897
00:55:07,839 --> 00:55:10,240
for example

898
00:55:10,240 --> 00:55:12,160
let's see with a

899
00:55:12,160 --> 00:55:14,880
pdf command

900
00:55:14,880 --> 00:55:18,720
it can shows the string quite well so

901
00:55:18,720 --> 00:55:21,680
so currently we are in here i guess ah

902
00:55:21,680 --> 00:55:23,680
now not exactly

903
00:55:23,680 --> 00:55:24,880
we are

904
00:55:24,880 --> 00:55:28,000
in here so

905
00:55:30,559 --> 00:55:32,720
you may want to check

906
00:55:32,720 --> 00:55:33,520
some

907
00:55:33,520 --> 00:55:34,559
basic

908
00:55:34,559 --> 00:55:37,839
functions like pdc for example

909
00:55:37,839 --> 00:55:42,480
it has the pdco that can help people to

910
00:55:42,480 --> 00:55:44,079
analyze

911
00:55:44,079 --> 00:55:47,680
some assemblies at some points

912
00:55:47,680 --> 00:55:50,000
there are many ways that you want to

913
00:55:50,000 --> 00:55:52,480
check for example the

914
00:55:52,480 --> 00:55:54,880
dumping commands and then the

915
00:55:54,880 --> 00:55:56,640
search

916
00:55:56,640 --> 00:55:58,000
and

917
00:55:58,000 --> 00:56:00,880
search are sick

918
00:56:00,880 --> 00:56:03,200
or

919
00:56:03,200 --> 00:56:07,919
our history whether recorded or not

920
00:56:09,839 --> 00:56:11,920
and

921
00:56:11,920 --> 00:56:14,400
check interactions to the cell for

922
00:56:14,400 --> 00:56:16,799
example

923
00:56:16,799 --> 00:56:19,680
let's check about the

924
00:56:19,680 --> 00:56:24,640
it runs very good and let's see it here

925
00:56:24,640 --> 00:56:27,520
and let's see for example

926
00:56:27,520 --> 00:56:30,000
you are analyzing

927
00:56:30,000 --> 00:56:33,040
some kind of functions

928
00:56:33,040 --> 00:56:33,760
and

929
00:56:33,760 --> 00:56:36,079
like this

930
00:56:36,079 --> 00:56:37,839
and

931
00:56:37,839 --> 00:56:40,319
probably

932
00:56:40,319 --> 00:56:44,400
after you analyze so you want to

933
00:56:44,400 --> 00:56:48,559
pdf and you want to check the graph

934
00:56:48,559 --> 00:56:51,440
whether it's having the move commands

935
00:56:51,440 --> 00:56:54,240
stuff like that and

936
00:56:54,240 --> 00:56:55,839
there are many ways that you can do for

937
00:56:55,839 --> 00:56:58,559
the testing like a dumping with the

938
00:56:58,559 --> 00:57:02,000
these are result to another text files

939
00:57:02,000 --> 00:57:03,720
for example it's a

940
00:57:03,720 --> 00:57:05,839
attxt and

941
00:57:05,839 --> 00:57:07,040
you want to

942
00:57:07,040 --> 00:57:08,000
just

943
00:57:08,000 --> 00:57:11,359
write the a txt here

944
00:57:11,359 --> 00:57:14,160
and showing the same stuff

945
00:57:14,160 --> 00:57:17,680
so parsing is doing good so far

946
00:57:17,680 --> 00:57:20,799
for the basic testings

947
00:57:20,799 --> 00:57:23,599
now we can check for the visual mode

948
00:57:23,599 --> 00:57:26,400
starting with v commands and you can see

949
00:57:26,400 --> 00:57:27,680
this is the

950
00:57:27,680 --> 00:57:30,400
one that we usually see and now we can

951
00:57:30,400 --> 00:57:32,799
see whether

952
00:57:32,799 --> 00:57:34,960
the tabs are working

953
00:57:34,960 --> 00:57:37,760
well or not

954
00:57:38,319 --> 00:57:41,119
it shows the changing between the

955
00:57:41,119 --> 00:57:43,280
acl and the

956
00:57:43,280 --> 00:57:45,040
non-seo

957
00:57:45,040 --> 00:57:46,000
mode

958
00:57:46,000 --> 00:57:47,280
so

959
00:57:47,280 --> 00:57:49,119
so we can

960
00:57:49,119 --> 00:57:50,720
check whether the

961
00:57:50,720 --> 00:57:52,480
the visual mode

962
00:57:52,480 --> 00:57:55,280
are working well with some command that

963
00:57:55,280 --> 00:57:58,079
is only supporting in it

964
00:57:58,079 --> 00:57:59,839
for example i want to

965
00:57:59,839 --> 00:58:02,799
just make a flag in here with the name

966
00:58:02,799 --> 00:58:04,960
of the

967
00:58:04,960 --> 00:58:08,880
testing one

968
00:58:08,880 --> 00:58:09,760
and

969
00:58:09,760 --> 00:58:12,640
it's working so uh

970
00:58:12,640 --> 00:58:16,240
let's say uh commenting to uh

971
00:58:16,240 --> 00:58:20,079
any anywhere that i want to do like

972
00:58:20,079 --> 00:58:24,880
okay this one like this is a push

973
00:58:25,040 --> 00:58:28,400
okay it is working so that is no problem

974
00:58:28,400 --> 00:58:32,480
so far if you are pressing the o

975
00:58:32,480 --> 00:58:35,359
it's it should show about the

976
00:58:35,359 --> 00:58:38,960
exchange between the acl non-excel

977
00:58:38,960 --> 00:58:41,359
it is working for

978
00:58:41,359 --> 00:58:42,720
this

979
00:58:42,720 --> 00:58:43,920
visual

980
00:58:43,920 --> 00:58:46,240
mode

981
00:58:47,760 --> 00:58:49,520
and

982
00:58:49,520 --> 00:58:52,559
we can see the menu of the d for the

983
00:58:52,559 --> 00:58:55,040
analyzing something for example you want

984
00:58:55,040 --> 00:58:56,319
to

985
00:58:56,319 --> 00:59:00,799
change uh several blob into a strings

986
00:59:00,799 --> 00:59:02,640
it's just a matter of the parsing and

987
00:59:02,640 --> 00:59:04,799
reading so it doesn't you don't have to

988
00:59:04,799 --> 00:59:07,280
be worried so much about about

989
00:59:07,280 --> 00:59:09,200
something being ruined for example i

990
00:59:09,200 --> 00:59:11,920
want to set this as a string

991
00:59:11,920 --> 00:59:14,000
then it should

992
00:59:14,000 --> 00:59:16,160
looks like this

993
00:59:16,160 --> 00:59:20,319
well let's uh destroy this one too

994
00:59:20,319 --> 00:59:22,400
okay

995
00:59:22,400 --> 00:59:24,960
so we are making it a

996
00:59:24,960 --> 00:59:27,440
very horrible assembly now

997
00:59:27,440 --> 00:59:30,079
and the functions are working just fine

998
00:59:30,079 --> 00:59:32,960
so this is a kind of the testing for the

999
00:59:32,960 --> 00:59:35,760
uh visual mode and there are many tools

1000
00:59:35,760 --> 00:59:36,559
in the

1001
00:59:36,559 --> 00:59:37,680
visual mood

1002
00:59:37,680 --> 00:59:40,720
that can be done to for example

1003
00:59:40,720 --> 00:59:42,799
if you want to search something or you

1004
00:59:42,799 --> 00:59:46,759
want to highlight something

1005
00:59:46,960 --> 00:59:50,960
and setting for the ecls

1006
00:59:50,960 --> 00:59:51,839
well

1007
00:59:51,839 --> 00:59:55,200
in this case i'd like to return to the

1008
00:59:55,200 --> 00:59:58,240
entry 0

1009
00:59:58,799 --> 01:00:03,440
so just uh making sure that

1010
01:00:05,359 --> 01:00:10,400
i'm in the right place okay here we are

1011
01:00:13,280 --> 01:00:16,640
good so uh

1012
01:00:16,640 --> 01:00:18,960
in order to do the acl i have to

1013
01:00:18,960 --> 01:00:20,799
understand about the

1014
01:00:20,799 --> 01:00:23,440
current state of the acl

1015
01:00:23,440 --> 01:00:26,640
i will use this command just to

1016
01:00:26,640 --> 01:00:29,040
make sure that uh i'm not gonna ruin

1017
01:00:29,040 --> 01:00:30,319
anything

1018
01:00:30,319 --> 01:00:32,000
so uh

1019
01:00:32,000 --> 01:00:33,760
just checking

1020
01:00:33,760 --> 01:00:36,079
make sure the cast is uh

1021
01:00:36,079 --> 01:00:38,559
being set

1022
01:00:38,559 --> 01:00:42,720
and the setting for the issue can be

1023
01:00:42,720 --> 01:00:45,839
seen here it is a set to the true and

1024
01:00:45,839 --> 01:00:48,000
true because of we are playing with the

1025
01:00:48,000 --> 01:00:50,079
e

1026
01:00:50,079 --> 01:00:51,520
now we can

1027
01:00:51,520 --> 01:00:52,240
check

1028
01:00:52,240 --> 01:00:54,559
some several operations of the standard

1029
01:00:54,559 --> 01:00:58,960
aco like for example this command

1030
01:01:01,280 --> 01:01:04,000
this is actually the standard uh

1031
01:01:04,000 --> 01:01:07,680
operators for the asyl so it working

1032
01:01:07,680 --> 01:01:11,040
pretty well

1033
01:01:11,040 --> 01:01:12,480
probably we will

1034
01:01:12,480 --> 01:01:14,960
try to

1035
01:01:18,000 --> 01:01:19,520
start the

1036
01:01:19,520 --> 01:01:23,200
issue for the uh

1037
01:01:23,359 --> 01:01:26,319
virtual machine to start at the

1038
01:01:26,319 --> 01:01:29,040
initiated and starting from this point

1039
01:01:29,040 --> 01:01:32,160
and then probably would like to

1040
01:01:32,160 --> 01:01:34,400
let's check like this

1041
01:01:34,400 --> 01:01:36,720
supposed to be moving

1042
01:01:36,720 --> 01:01:39,720
oops

1043
01:01:43,040 --> 01:01:46,559
i have it dies hard

1044
01:01:46,559 --> 01:01:49,559
okay

1045
01:01:52,000 --> 01:01:55,119
it is going to the uh it goes to one two

1046
01:01:55,119 --> 01:01:58,240
and right now in is in here i think

1047
01:01:58,240 --> 01:02:00,799
three times so let's make sure that with

1048
01:02:00,799 --> 01:02:01,680
the

1049
01:02:01,680 --> 01:02:04,640
history command so this is a one two and

1050
01:02:04,640 --> 01:02:06,160
three

1051
01:02:06,160 --> 01:02:09,440
so that was why

1052
01:02:09,920 --> 01:02:12,480
i'm here right now like from here one

1053
01:02:12,480 --> 01:02:15,520
two and three okay good great it works

1054
01:02:15,520 --> 01:02:17,440
so

1055
01:02:17,440 --> 01:02:20,559
let's uh check about the uh

1056
01:02:20,559 --> 01:02:22,980
say i'm i just want to go here so

1057
01:02:22,980 --> 01:02:25,520
[Music]

1058
01:02:25,520 --> 01:02:28,000
in the asia it's supposed to be like

1059
01:02:28,000 --> 01:02:29,359
this

1060
01:02:29,359 --> 01:02:31,598
and

1061
01:02:32,000 --> 01:02:34,559
let's see okay it works

1062
01:02:34,559 --> 01:02:37,280
stepping is working so

1063
01:02:37,280 --> 01:02:40,000
i don't need this

1064
01:02:40,000 --> 01:02:42,559
eap anymore and

1065
01:02:42,559 --> 01:02:46,000
let's turn it off

1066
01:02:46,160 --> 01:02:47,039
then

1067
01:02:47,039 --> 01:02:50,079
probably uh the asl is working quite

1068
01:02:50,079 --> 01:02:52,640
well unless you want to make it further

1069
01:02:52,640 --> 01:02:55,359
check like uh

1070
01:02:55,359 --> 01:02:58,960
just want to make sure what the i o cash

1071
01:02:58,960 --> 01:03:01,680
whether is it still on

1072
01:03:01,680 --> 01:03:04,079
true so

1073
01:03:04,079 --> 01:03:07,760
let's write about the

1074
01:03:13,119 --> 01:03:15,680
so stuff like that it's supposed to be

1075
01:03:15,680 --> 01:03:17,680
written there

1076
01:03:17,680 --> 01:03:21,039
so let's see uh whether um

1077
01:03:21,039 --> 01:03:24,240
yep the repeat command is uh

1078
01:03:24,240 --> 01:03:26,079
actually uh

1079
01:03:26,079 --> 01:03:29,359
came up so let's see about the

1080
01:03:29,359 --> 01:03:33,359
what asl says about this

1081
01:03:33,760 --> 01:03:36,400
um okay

1082
01:03:36,400 --> 01:03:38,480
so i don't think there is a problem at

1083
01:03:38,480 --> 01:03:40,559
all with the asia

1084
01:03:40,559 --> 01:03:42,799
until this point i'm not so sure

1085
01:03:42,799 --> 01:03:44,480
probably conrad can

1086
01:03:44,480 --> 01:03:47,119
do the more testing

1087
01:03:47,119 --> 01:03:50,319
than me for the ac parts but uh from my

1088
01:03:50,319 --> 01:03:52,160
point of view there is no problem with

1089
01:03:52,160 --> 01:03:55,039
the acl engine this version this

1090
01:03:55,039 --> 01:03:56,559
uh platform

1091
01:03:56,559 --> 01:03:58,799
so how about the debugging debugging and

1092
01:03:58,799 --> 01:04:01,359
done instantly like if you are turning

1093
01:04:01,359 --> 01:04:03,680
this into uh

1094
01:04:03,680 --> 01:04:06,400
od commands and uh you can check it

1095
01:04:06,400 --> 01:04:08,319
directly to the

1096
01:04:08,319 --> 01:04:09,520
memory

1097
01:04:09,520 --> 01:04:10,839
after this

1098
01:04:10,839 --> 01:04:13,680
and let's see whether the reading is

1099
01:04:13,680 --> 01:04:17,359
going as per expected

1100
01:04:18,960 --> 01:04:22,000
i think the assembly setting is a little

1101
01:04:22,000 --> 01:04:25,720
bit weird so

1102
01:04:26,559 --> 01:04:30,240
so let's make sure

1103
01:04:30,240 --> 01:04:31,839
oops

1104
01:04:31,839 --> 01:04:35,279
it is a 64.

1105
01:04:38,400 --> 01:04:40,640
why it has the uh

1106
01:04:40,640 --> 01:04:45,279
register of the 32 bits here

1107
01:04:45,440 --> 01:04:48,079
we are at

1108
01:04:49,280 --> 01:04:52,559
you're in the first one

1109
01:04:53,119 --> 01:04:55,839
this one

1110
01:04:55,920 --> 01:04:58,720
is in the

1111
01:04:58,720 --> 01:05:02,680
also the first one

1112
01:05:10,640 --> 01:05:12,720
everything is in the first one this is

1113
01:05:12,720 --> 01:05:14,079
actually uh

1114
01:05:14,079 --> 01:05:16,319
the

1115
01:05:19,599 --> 01:05:23,839
current existing program so

1116
01:05:39,839 --> 01:05:42,960
now this is not good

1117
01:05:49,039 --> 01:05:52,400
stuck is crashed

1118
01:05:58,319 --> 01:06:00,400
yeah so uh

1119
01:06:00,400 --> 01:06:04,240
supposed to run like that

1120
01:06:04,240 --> 01:06:05,760
so i don't think there is a problem with

1121
01:06:05,760 --> 01:06:08,799
the debugging for this version so

1122
01:06:08,799 --> 01:06:12,400
can be uh considered as a

1123
01:06:12,400 --> 01:06:15,359
unbuggy version that was why uh

1124
01:06:15,359 --> 01:06:19,839
it was set as a stable versions

1125
01:06:22,400 --> 01:06:26,079
so it looks like it has no uh

1126
01:06:26,079 --> 01:06:28,400
flow at all in the

1127
01:06:28,400 --> 01:06:30,799
any uh

1128
01:06:30,799 --> 01:06:33,039
confirmation that we are doing with

1129
01:06:33,039 --> 01:06:34,720
these versions

1130
01:06:34,720 --> 01:06:38,160
so we done the interface static analysis

1131
01:06:38,160 --> 01:06:41,920
test debugging test and the initial test

1132
01:06:41,920 --> 01:06:44,640
and we have a good report in details

1133
01:06:44,640 --> 01:06:48,319
with this that it should

1134
01:06:48,319 --> 01:06:51,680
be saved somewhere as a reference

1135
01:06:51,680 --> 01:06:52,720
for us

1136
01:06:52,720 --> 01:06:55,359
for for in case

1137
01:06:55,359 --> 01:06:56,640
there is a

1138
01:06:56,640 --> 01:06:58,799
new uh features being added we want to

1139
01:06:58,799 --> 01:07:01,599
compare

1140
01:07:01,599 --> 01:07:02,960
so

1141
01:07:02,960 --> 01:07:04,799
this is it for

1142
01:07:04,799 --> 01:07:07,200
demonstration of the building for this

1143
01:07:07,200 --> 01:07:08,640
chapter

1144
01:07:08,640 --> 01:07:09,760
and

1145
01:07:09,760 --> 01:07:12,720
there are several uh built examples that

1146
01:07:12,720 --> 01:07:14,720
i'd like to show you

1147
01:07:14,720 --> 01:07:16,960
in this case is uh

1148
01:07:16,960 --> 01:07:19,760
using the deviant stretch for the

1149
01:07:19,760 --> 01:07:21,680
raspbian of the

1150
01:07:21,680 --> 01:07:23,760
arm

1151
01:07:23,760 --> 01:07:26,480
64 devices

1152
01:07:26,480 --> 01:07:28,799
and you can see it here these are the

1153
01:07:28,799 --> 01:07:32,160
configuration it was running well

1154
01:07:32,160 --> 01:07:35,200
collecting stuff like this for the uh

1155
01:07:35,200 --> 01:07:36,880
exotic

1156
01:07:36,880 --> 01:07:40,160
cpu is quite one of the good preference

1157
01:07:40,160 --> 01:07:41,119
for

1158
01:07:41,119 --> 01:07:44,559
many kind of the setup in the

1159
01:07:44,559 --> 01:07:46,799
iot devices or

1160
01:07:46,799 --> 01:07:50,079
the emitted environment

1161
01:07:50,079 --> 01:07:53,280
this one is for the arm hf installation

1162
01:07:53,280 --> 01:07:54,720
so

1163
01:07:54,720 --> 01:07:56,480
all of the uh

1164
01:07:56,480 --> 01:07:58,240
information is there

1165
01:07:58,240 --> 01:08:01,200
the processes and then the

1166
01:08:01,200 --> 01:08:05,200
the installations uh what uh

1167
01:08:05,200 --> 01:08:07,599
was detected and so on

1168
01:08:07,599 --> 01:08:11,119
and uh this uh actually being

1169
01:08:11,119 --> 01:08:14,319
recorded for the development

1170
01:08:14,319 --> 01:08:15,839
checks and

1171
01:08:15,839 --> 01:08:17,759
errors

1172
01:08:17,759 --> 01:08:20,238
that can be used for the

1173
01:08:20,238 --> 01:08:22,560
reference for the future

1174
01:08:22,560 --> 01:08:25,439
so let's go to the next uh so let's go

1175
01:08:25,439 --> 01:08:28,879
to the next chapter

1176
01:08:30,719 --> 01:08:34,238
oh yeah uh before i forgot uh there is a

1177
01:08:34,238 --> 01:08:37,600
things that i'd like to explain first

1178
01:08:37,600 --> 01:08:40,799
well this is the memo that i made

1179
01:08:40,799 --> 01:08:43,120
around january this year

1180
01:08:43,120 --> 01:08:46,120
when

1181
02:16:35,840 --> 02:16:37,920
you

