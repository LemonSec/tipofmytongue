1
00:00:01,490 --> 00:00:04,640
[Music]

2
00:00:07,850 --> 00:00:11,039
[Music]

3
00:00:30,360 --> 00:00:36,810
[Music]

4
00:00:40,110 --> 00:00:56,060
[Music]

5
00:00:58,750 --> 00:01:23,620
[Music]

6
00:01:35,580 --> 00:01:40,120
[Music]

7
00:01:53,759 --> 00:01:55,840
you

8
00:02:07,370 --> 00:02:11,439
[Music]

9
00:02:17,280 --> 00:02:20,280
so

10
00:02:38,240 --> 00:02:52,160
[Music]

11
00:02:52,160 --> 00:02:53,560
so

12
00:02:53,560 --> 00:03:08,480
[Music]

13
00:03:08,480 --> 00:03:11,480
so

14
00:03:25,690 --> 00:03:36,189
[Music]

15
00:03:38,630 --> 00:03:49,840
[Music]

16
00:03:54,970 --> 00:04:05,360
[Music]

17
00:04:20,720 --> 00:04:23,720
uh

18
00:04:46,800 --> 00:04:49,770
so

19
00:04:49,770 --> 00:05:07,779
[Music]

20
00:05:08,320 --> 00:05:11,320
me

21
00:05:13,650 --> 00:05:16,800
[Music]

22
00:05:16,800 --> 00:05:19,800
foreign

23
00:05:33,840 --> 00:05:37,029
[Music]

24
00:05:37,840 --> 00:05:39,919
you

25
00:05:40,310 --> 00:05:51,199
[Music]

26
00:05:51,199 --> 00:05:52,250
wow

27
00:05:52,250 --> 00:05:57,129
[Music]

28
00:06:01,280 --> 00:06:07,940
[Music]

29
00:06:12,230 --> 00:06:36,479
[Music]

30
00:06:36,479 --> 00:06:38,270
hmm

31
00:06:38,270 --> 00:06:53,628
[Music]

32
00:06:55,680 --> 00:07:12,980
[Music]

33
00:07:13,520 --> 00:07:16,520
mmm

34
00:07:17,039 --> 00:07:20,280
thank you

35
00:07:36,000 --> 00:07:39,000
so

36
00:07:41,380 --> 00:07:46,589
[Music]

37
00:07:50,730 --> 00:07:53,859
[Music]

38
00:07:54,319 --> 00:07:57,319
bye

39
00:08:01,570 --> 00:08:04,649
[Music]

40
00:08:12,720 --> 00:08:15,720
two

41
00:08:44,080 --> 00:08:47,080
so

42
00:08:53,750 --> 00:08:56,899
[Applause]

43
00:08:58,040 --> 00:09:01,189
[Music]

44
00:09:28,880 --> 00:09:31,880
my

45
00:09:36,910 --> 00:09:45,929
[Music]

46
00:09:48,760 --> 00:09:52,800
[Music]

47
00:09:52,800 --> 00:09:55,800
so

48
00:10:07,600 --> 00:10:10,600
my

49
00:10:11,830 --> 00:10:14,969
[Music]

50
00:10:23,519 --> 00:10:26,519
so

51
00:10:38,320 --> 00:10:41,320
so

52
00:10:45,230 --> 00:11:12,570
[Music]

53
00:11:20,640 --> 00:11:22,240
um

54
00:11:22,240 --> 00:11:30,630
[Music]

55
00:11:32,240 --> 00:11:35,060
ah

56
00:11:35,060 --> 00:11:46,459
[Music]

57
00:11:47,120 --> 00:11:50,120
so

58
00:11:51,270 --> 00:11:54,460
[Applause]

59
00:12:00,720 --> 00:12:03,720
hmm

60
00:12:06,350 --> 00:12:16,830
[Music]

61
00:12:20,000 --> 00:12:23,000
hey

62
00:12:28,210 --> 00:13:24,140
[Music]

63
00:13:25,360 --> 00:13:28,360
do

64
00:13:29,350 --> 00:13:57,870
[Music]

65
00:14:00,220 --> 00:14:27,169
[Music]

66
00:14:28,320 --> 00:14:31,320
my

67
00:14:32,700 --> 00:14:37,369
[Music]

68
00:14:42,070 --> 00:15:19,170
[Music]

69
00:15:19,170 --> 00:15:23,709
[Applause]

70
00:15:26,910 --> 00:15:30,639
[Music]

71
00:15:30,639 --> 00:15:32,190
do

72
00:15:32,190 --> 00:16:12,619
[Music]

73
00:16:29,040 --> 00:16:55,120
[Music]

74
00:16:55,120 --> 00:16:57,760
so

75
00:16:57,760 --> 00:17:32,320
[Music]

76
00:17:32,320 --> 00:17:35,070
uh

77
00:17:35,070 --> 00:17:50,559
[Music]

78
00:17:50,559 --> 00:17:53,559
so

79
00:17:56,410 --> 00:18:01,170
[Music]

80
00:18:02,799 --> 00:18:05,799
so

81
00:18:08,850 --> 00:18:14,709
[Music]

82
00:18:20,630 --> 00:18:23,669
[Music]

83
00:18:25,880 --> 00:18:32,080
[Music]

84
00:18:32,080 --> 00:18:35,080
so

85
00:18:37,280 --> 00:18:40,379
[Music]

86
00:18:44,110 --> 00:18:45,360
[Music]

87
00:18:45,360 --> 00:18:48,360
so

88
00:18:48,690 --> 00:19:06,230
[Music]

89
00:19:08,710 --> 00:19:18,279
[Music]

90
00:19:30,640 --> 00:19:33,640
do

91
00:19:50,799 --> 00:19:53,799
my

92
00:19:56,640 --> 00:19:59,640
so

93
00:20:04,160 --> 00:20:16,530
[Music]

94
00:20:16,530 --> 00:20:19,589
[Applause]

95
00:20:20,240 --> 00:20:22,600
uh

96
00:20:22,600 --> 00:20:29,759
[Music]

97
00:20:32,780 --> 00:20:57,510
[Music]

98
00:21:00,080 --> 00:21:23,119
[Music]

99
00:21:25,150 --> 00:21:52,130
[Music]

100
00:21:58,960 --> 00:22:01,960
uh

101
00:22:19,090 --> 00:22:24,720
[Music]

102
00:22:31,450 --> 00:22:47,249
[Music]

103
00:22:51,520 --> 00:23:01,580
[Music]

104
00:23:05,590 --> 00:24:08,409
[Music]

105
00:24:16,320 --> 00:24:57,599
[Music]

106
00:24:59,990 --> 00:25:08,760
[Music]

107
00:25:14,200 --> 00:25:18,509
[Music]

108
00:25:41,840 --> 00:25:43,918
you

109
00:25:52,250 --> 00:25:55,679
[Music]

110
00:25:55,679 --> 00:25:58,679
um

111
00:26:00,250 --> 00:26:07,499
[Music]

112
00:26:34,300 --> 00:26:52,739
[Music]

113
00:26:53,200 --> 00:26:54,680
so

114
00:26:54,680 --> 00:27:07,220
[Music]

115
00:27:09,840 --> 00:27:12,840
so

116
00:27:21,760 --> 00:27:32,259
[Music]

117
00:27:34,690 --> 00:27:45,910
[Music]

118
00:27:47,279 --> 00:27:50,279
uh

119
00:27:51,030 --> 00:28:31,149
[Music]

120
00:28:54,480 --> 00:28:55,600
and

121
00:28:55,600 --> 00:28:57,520
welcome back

122
00:28:57,520 --> 00:29:00,480
this is airtocon 2021 uh this is the

123
00:29:00,480 --> 00:29:01,679
second day

124
00:29:01,679 --> 00:29:04,159
of the conference i hope that everyone

125
00:29:04,159 --> 00:29:06,480
enjoyed yesterday it was a training day

126
00:29:06,480 --> 00:29:08,880
uh but this time we have

127
00:29:08,880 --> 00:29:10,720
so many presentations

128
00:29:10,720 --> 00:29:12,799
and we'll begin the day

129
00:29:12,799 --> 00:29:16,640
speaking with murphy so

130
00:29:16,640 --> 00:29:19,039
welcome alex suleim he will be talking

131
00:29:19,039 --> 00:29:20,960
about the art of freedom

132
00:29:20,960 --> 00:29:22,559
making some

133
00:29:22,559 --> 00:29:25,200
demos and examples showing how to use

134
00:29:25,200 --> 00:29:27,520
mainly for ios and android application

135
00:29:27,520 --> 00:29:28,960
analysis

136
00:29:28,960 --> 00:29:30,640
so

137
00:29:30,640 --> 00:29:33,200
hope you enjoy

138
00:29:33,679 --> 00:29:38,360
morphe that's your tire turn

139
00:30:22,480 --> 00:30:25,039
and i will present you uh an

140
00:30:25,039 --> 00:30:27,520
interference

141
00:30:27,600 --> 00:30:28,720
workshop

142
00:30:28,720 --> 00:30:31,279
uh it's it's more like a talk but the

143
00:30:31,279 --> 00:30:35,200
idea is just to make it practical so

144
00:30:35,200 --> 00:30:38,320
just to understand different use cases

145
00:30:38,320 --> 00:30:40,720
uh using nato friday in mobile

146
00:30:40,720 --> 00:30:42,960
environments in ios and

147
00:30:42,960 --> 00:30:44,320
and in android

148
00:30:44,320 --> 00:30:46,480
so

149
00:30:46,640 --> 00:30:49,640
enjoy

150
00:30:50,080 --> 00:30:52,480
so just a brief

151
00:30:52,480 --> 00:30:55,679
uh overview about who i am my name is

152
00:30:55,679 --> 00:30:57,440
alex i'm a security researcher at the

153
00:30:57,440 --> 00:30:58,720
tagaquil

154
00:30:58,720 --> 00:31:01,679
and i'm considered a mobile enthusiastic

155
00:31:01,679 --> 00:31:06,000
especially in ios but as well in android

156
00:31:06,000 --> 00:31:06,960
and

157
00:31:06,960 --> 00:31:08,240
i'm

158
00:31:08,240 --> 00:31:10,960
at the friday trainer as well

159
00:31:10,960 --> 00:31:12,399
uh

160
00:31:12,399 --> 00:31:14,080
we we did some

161
00:31:14,080 --> 00:31:15,039
some

162
00:31:15,039 --> 00:31:17,840
trainers related to it to friday in pass

163
00:31:17,840 --> 00:31:19,360
air2cons

164
00:31:19,360 --> 00:31:20,799
this year as well

165
00:31:20,799 --> 00:31:24,080
and just you have your my twitter handle

166
00:31:24,080 --> 00:31:26,240
and my github if you want to

167
00:31:26,240 --> 00:31:27,440
just

168
00:31:27,440 --> 00:31:30,000
get more information so this talk

169
00:31:30,000 --> 00:31:32,960
deviates just to to know more about that

170
00:31:32,960 --> 00:31:34,320
to freedom

171
00:31:34,320 --> 00:31:36,240
uh just uh

172
00:31:36,240 --> 00:31:38,799
explaining what is around different

173
00:31:38,799 --> 00:31:41,519
commands uh all commands and

174
00:31:41,519 --> 00:31:43,840
and new commands related to it to friday

175
00:31:43,840 --> 00:31:46,720
so we are going to show as well uh

176
00:31:46,720 --> 00:31:50,399
the new things that that we have

177
00:31:50,399 --> 00:31:52,559
and we are going to explain as well how

178
00:31:52,559 --> 00:31:55,360
to develop and to automate processes

179
00:31:55,360 --> 00:31:57,840
using it to frida are

180
00:31:57,840 --> 00:31:59,120
using

181
00:31:59,120 --> 00:32:00,880
the plugins and how to develop the

182
00:32:00,880 --> 00:32:04,000
plugins uh from from scratch so it's

183
00:32:04,000 --> 00:32:07,120
just an introductory

184
00:32:08,000 --> 00:32:10,080
presentation and they as well just to

185
00:32:10,080 --> 00:32:13,840
see different practical examples uh how

186
00:32:13,840 --> 00:32:16,000
to use that to friday in different

187
00:32:16,000 --> 00:32:18,640
environments and we are going to show

188
00:32:18,640 --> 00:32:20,880
different examples in ios and

189
00:32:20,880 --> 00:32:23,279
others as well in android

190
00:32:23,279 --> 00:32:24,799
and just at the end we have some

191
00:32:24,799 --> 00:32:29,600
surprise to to show that we will see

192
00:32:29,600 --> 00:32:31,840
so

193
00:32:31,919 --> 00:32:33,760
what is it to frida

194
00:32:33,760 --> 00:32:35,279
for those that

195
00:32:35,279 --> 00:32:36,799
already

196
00:32:36,799 --> 00:32:39,200
don't know it already one side radar too

197
00:32:39,200 --> 00:32:40,000
that

198
00:32:40,000 --> 00:32:41,120
all

199
00:32:41,120 --> 00:32:43,600
uh all people here we already know what

200
00:32:43,600 --> 00:32:44,960
it is

201
00:32:44,960 --> 00:32:48,640
and we have in the other side frida that

202
00:32:48,640 --> 00:32:50,240
you know that it's just

203
00:32:50,240 --> 00:32:53,200
the two walls the with the radar we have

204
00:32:53,200 --> 00:32:55,440
the the more the static wall world just

205
00:32:55,440 --> 00:32:57,440
analyzing binaries analyzing data

206
00:32:57,440 --> 00:32:59,919
structures

207
00:32:59,919 --> 00:33:02,320
and so on and then we have the more

208
00:33:02,320 --> 00:33:04,720
dynamic wall using frida

209
00:33:04,720 --> 00:33:07,120
in different environments in ios android

210
00:33:07,120 --> 00:33:08,840
windows

211
00:33:08,840 --> 00:33:12,320
linux and well you know that you can

212
00:33:12,320 --> 00:33:15,120
automate a lot of processes using 3d

213
00:33:15,120 --> 00:33:17,600
commands and as you already know or

214
00:33:17,600 --> 00:33:19,200
should already know

215
00:33:19,200 --> 00:33:21,279
freelance space mainly in

216
00:33:21,279 --> 00:33:24,240
javascript

217
00:33:24,240 --> 00:33:25,039
so

218
00:33:25,039 --> 00:33:28,799
why not to put the two walls together

219
00:33:28,799 --> 00:33:32,080
having the power of the static

220
00:33:32,080 --> 00:33:35,679
analysis that we have in brother and the

221
00:33:35,679 --> 00:33:38,320
all the poorness that frida has in the

222
00:33:38,320 --> 00:33:39,919
dynamic world

223
00:33:39,919 --> 00:33:42,720
and this is quite powerful especially in

224
00:33:42,720 --> 00:33:45,200
the in mobile environments

225
00:33:45,200 --> 00:33:46,960
because frida works pretty well in

226
00:33:46,960 --> 00:33:48,720
android and ios

227
00:33:48,720 --> 00:33:51,440
and allows us to just

228
00:33:51,440 --> 00:33:52,559
analyze

229
00:33:52,559 --> 00:33:55,200
all the information all the applications

230
00:33:55,200 --> 00:33:57,360
into the memory

231
00:33:57,360 --> 00:33:59,039
and just

232
00:33:59,039 --> 00:34:02,240
get it all the information

233
00:34:02,240 --> 00:34:04,960
from memory and just get it into our

234
00:34:04,960 --> 00:34:06,640
radar 2 session

235
00:34:06,640 --> 00:34:08,320
and just

236
00:34:08,320 --> 00:34:10,560
get all the features that we have in

237
00:34:10,560 --> 00:34:12,830
brother as all the analysis

238
00:34:12,830 --> 00:34:14,000
[Music]

239
00:34:14,000 --> 00:34:16,560
algorithms all the flags

240
00:34:16,560 --> 00:34:19,440
and how to for example print

241
00:34:19,440 --> 00:34:21,520
all the disassembly or for

242
00:34:21,520 --> 00:34:23,199
a good example as well it's how to use

243
00:34:23,199 --> 00:34:24,800
l2 frida

244
00:34:24,800 --> 00:34:27,918
uh to bring the disassembly from memory

245
00:34:27,918 --> 00:34:29,440
using ether grid

246
00:34:29,440 --> 00:34:32,800
given as well so it's a it's just a

247
00:34:32,800 --> 00:34:36,079
powerful tool as it in our radar wall in

248
00:34:36,079 --> 00:34:38,560
that case

249
00:34:39,199 --> 00:34:42,159
so how it's implemented is just we have

250
00:34:42,159 --> 00:34:45,119
a one-sided radar that is installed

251
00:34:45,119 --> 00:34:46,879
locally

252
00:34:46,879 --> 00:34:50,719
and it's written in c uh if

253
00:34:50,719 --> 00:34:51,839
you

254
00:34:51,839 --> 00:34:54,719
didn't do it just watch the

255
00:34:54,719 --> 00:34:56,879
the total yesterday that pancake did

256
00:34:56,879 --> 00:34:59,520
related to how to develop plugins in in

257
00:34:59,520 --> 00:35:02,560
radar 2 and you will see how

258
00:35:02,560 --> 00:35:05,119
it looks like and then

259
00:35:05,119 --> 00:35:07,119
uh we have the i o plugin that it

260
00:35:07,119 --> 00:35:09,440
communicates with a free agent that is

261
00:35:09,440 --> 00:35:11,680
written in javascript and that's the

262
00:35:11,680 --> 00:35:14,079
code that is then injected into the

263
00:35:14,079 --> 00:35:15,359
applications

264
00:35:15,359 --> 00:35:17,680
through the frida server and that's the

265
00:35:17,680 --> 00:35:18,800
way

266
00:35:18,800 --> 00:35:21,359
uh how it works and how it's implemented

267
00:35:21,359 --> 00:35:24,640
and the idea is just just to invoke from

268
00:35:24,640 --> 00:35:25,680
radar

269
00:35:25,680 --> 00:35:28,000
the rather air to free the plugin the

270
00:35:28,000 --> 00:35:32,640
idea is just to use the handler frida

271
00:35:32,640 --> 00:35:36,800
dot dot slash slash and that kind of url

272
00:35:36,800 --> 00:35:40,240
it's just what we use to invoke there to

273
00:35:40,240 --> 00:35:42,320
free the commands from the

274
00:35:42,320 --> 00:35:45,200
arrival session

275
00:35:45,200 --> 00:35:46,480
so

276
00:35:46,480 --> 00:35:48,880
just from living how to how to install

277
00:35:48,880 --> 00:35:50,160
the frida

278
00:35:50,160 --> 00:35:54,079
quite easy so just if we use r2pm

279
00:35:54,079 --> 00:35:56,640
uh just r2pm

280
00:35:56,640 --> 00:35:59,839
minus sc it's just to clean previous

281
00:35:59,839 --> 00:36:01,520
installations you will want just to

282
00:36:01,520 --> 00:36:02,960
upgrade the

283
00:36:02,960 --> 00:36:05,599
the installation using a new a newer

284
00:36:05,599 --> 00:36:08,640
version of it to frida and then with

285
00:36:08,640 --> 00:36:09,839
minus

286
00:36:09,839 --> 00:36:10,640
i

287
00:36:10,640 --> 00:36:12,480
we install the

288
00:36:12,480 --> 00:36:16,720
plugin and just compile the age as well

289
00:36:16,720 --> 00:36:17,599
and

290
00:36:17,599 --> 00:36:19,920
this is if we want to use it from a user

291
00:36:19,920 --> 00:36:22,560
perspective however if we want to

292
00:36:22,560 --> 00:36:24,320
develop

293
00:36:24,320 --> 00:36:26,800
new features in edufrida and we want to

294
00:36:26,800 --> 00:36:28,560
contribute to the

295
00:36:28,560 --> 00:36:29,920
um

296
00:36:29,920 --> 00:36:32,880
to the project the best uh way to

297
00:36:32,880 --> 00:36:34,960
install it is just using

298
00:36:34,960 --> 00:36:37,200
a make and make user install what it

299
00:36:37,200 --> 00:36:42,079
does is just create a sim link to the

300
00:36:42,079 --> 00:36:43,760
project installation

301
00:36:43,760 --> 00:36:44,880
and then

302
00:36:44,880 --> 00:36:47,280
we can just modify the project and just

303
00:36:47,280 --> 00:36:50,160
executing make we are going to use the

304
00:36:50,160 --> 00:36:52,079
updated version

305
00:36:52,079 --> 00:36:55,119
in that case

306
00:36:55,119 --> 00:36:57,359
so

307
00:36:57,520 --> 00:36:59,040
just uh

308
00:36:59,040 --> 00:37:01,280
how it works it's just

309
00:37:01,280 --> 00:37:02,160
uh

310
00:37:02,160 --> 00:37:04,640
in that case it's mainly oriented to

311
00:37:04,640 --> 00:37:06,400
mobile environments

312
00:37:06,400 --> 00:37:08,640
and the only thing that we

313
00:37:08,640 --> 00:37:10,560
we need now is just

314
00:37:10,560 --> 00:37:12,960
we have different mobile environments an

315
00:37:12,960 --> 00:37:15,040
android and an ios environment with

316
00:37:15,040 --> 00:37:18,880
frida installed inside the devices

317
00:37:18,880 --> 00:37:21,760
and then we have connected

318
00:37:21,760 --> 00:37:25,440
the devices into computers using a usb

319
00:37:25,440 --> 00:37:28,960
and then we are going to invoke etofrida

320
00:37:28,960 --> 00:37:31,200
using through the usb

321
00:37:31,200 --> 00:37:32,560
in that case

322
00:37:32,560 --> 00:37:34,480
just to identify the different devices

323
00:37:34,480 --> 00:37:38,320
that we have connected in our laptop

324
00:37:38,320 --> 00:37:43,119
uh we are going to use the r2r2 frida

325
00:37:43,119 --> 00:37:46,000
and with the with the usb and

326
00:37:46,000 --> 00:37:47,520
two slashes

327
00:37:47,520 --> 00:37:49,920
it's just going to print the different

328
00:37:49,920 --> 00:37:52,400
devices that we already have

329
00:37:52,400 --> 00:37:54,000
and then if we want to connect on a

330
00:37:54,000 --> 00:37:57,280
specific device we are going to put the

331
00:37:57,280 --> 00:37:59,920
device into the two slashes as we can

332
00:37:59,920 --> 00:38:03,359
see in the second dot

333
00:38:03,440 --> 00:38:06,320
we have different ways to interact with

334
00:38:06,320 --> 00:38:08,560
an application with that to freedom

335
00:38:08,560 --> 00:38:10,000
we have

336
00:38:10,000 --> 00:38:11,040
we can

337
00:38:11,040 --> 00:38:13,599
attach to a running process

338
00:38:13,599 --> 00:38:16,480
to uh uh that it's just

339
00:38:16,480 --> 00:38:17,839
we can

340
00:38:17,839 --> 00:38:20,400
we can use to attach to the process the

341
00:38:20,400 --> 00:38:24,400
piv or the application name

342
00:38:24,400 --> 00:38:25,200
or

343
00:38:25,200 --> 00:38:27,760
we we can just

344
00:38:27,760 --> 00:38:29,680
run the application again and just we

345
00:38:29,680 --> 00:38:31,440
can expand the application or we can

346
00:38:31,440 --> 00:38:32,880
launch the application what's the

347
00:38:32,880 --> 00:38:35,119
difference between them it's quite easy

348
00:38:35,119 --> 00:38:37,040
the difference is that if we spawn the

349
00:38:37,040 --> 00:38:39,119
application the application is going to

350
00:38:39,119 --> 00:38:40,480
be paused

351
00:38:40,480 --> 00:38:42,480
at the beginning of the application

352
00:38:42,480 --> 00:38:45,119
allow us to introduce all the frida

353
00:38:45,119 --> 00:38:46,640
hooks that we want at the beginning of

354
00:38:46,640 --> 00:38:47,520
the

355
00:38:47,520 --> 00:38:50,560
running the application running and then

356
00:38:50,560 --> 00:38:52,000
continue the execution of the

357
00:38:52,000 --> 00:38:54,320
application that is what we get with the

358
00:38:54,320 --> 00:38:55,760
spawn

359
00:38:55,760 --> 00:38:58,560
however with launch what we get is just

360
00:38:58,560 --> 00:38:59,760
automatically

361
00:38:59,760 --> 00:39:02,880
continues the application so it's just

362
00:39:02,880 --> 00:39:04,720
running an application and application

363
00:39:04,720 --> 00:39:07,200
is just continuing the

364
00:39:07,200 --> 00:39:10,560
to run in that case

365
00:39:12,640 --> 00:39:15,640
uh

366
00:39:15,760 --> 00:39:17,599
so here

367
00:39:17,599 --> 00:39:18,560
uh

368
00:39:18,560 --> 00:39:21,119
we have different examples

369
00:39:21,119 --> 00:39:24,320
and just uh with the

370
00:39:24,320 --> 00:39:28,160
command with the two dots dc command is

371
00:39:28,160 --> 00:39:29,200
just

372
00:39:29,200 --> 00:39:32,160
as explained before just what we need to

373
00:39:32,160 --> 00:39:35,440
execute to continue the execution of the

374
00:39:35,440 --> 00:39:37,280
of the application in

375
00:39:37,280 --> 00:39:40,000
in that case just just to resume the

376
00:39:40,000 --> 00:39:42,880
application

377
00:39:42,880 --> 00:39:44,480
so

378
00:39:44,480 --> 00:39:46,480
something new that we need we have to

379
00:39:46,480 --> 00:39:50,079
consider from previous years is that

380
00:39:50,079 --> 00:39:50,380
the

381
00:39:50,380 --> 00:39:52,079
[Music]

382
00:39:52,079 --> 00:39:53,280
the

383
00:39:53,280 --> 00:39:56,160
the contour slash

384
00:39:56,160 --> 00:39:58,800
command it's been deprecated

385
00:39:58,800 --> 00:40:03,359
and now we have to use the

386
00:40:03,359 --> 00:40:06,560
the column a command or the equal and

387
00:40:06,560 --> 00:40:08,560
exclamation mark

388
00:40:08,560 --> 00:40:09,680
command

389
00:40:09,680 --> 00:40:11,119
as a

390
00:40:11,119 --> 00:40:14,079
air-to-frida handlers in that case

391
00:40:14,079 --> 00:40:15,359
and just a

392
00:40:15,359 --> 00:40:19,119
a quick way to identify all the commands

393
00:40:19,119 --> 00:40:22,319
that we have in there to free the wall

394
00:40:22,319 --> 00:40:26,000
is just with the colon and the

395
00:40:26,000 --> 00:40:28,079
um

396
00:40:28,079 --> 00:40:30,079
question mark

397
00:40:30,079 --> 00:40:33,280
we are going to get all the commands and

398
00:40:33,280 --> 00:40:36,160
the help and how how to execute them and

399
00:40:36,160 --> 00:40:38,800
in this talk we are going to see some of

400
00:40:38,800 --> 00:40:41,040
them

401
00:40:41,680 --> 00:40:43,040
so

402
00:40:43,040 --> 00:40:45,200
just to begin the first thing that we we

403
00:40:45,200 --> 00:40:47,599
should do in an application is just

404
00:40:47,599 --> 00:40:48,560
to get

405
00:40:48,560 --> 00:40:50,480
basic information

406
00:40:50,480 --> 00:40:53,760
from the application so in that case

407
00:40:53,760 --> 00:40:56,400
this is an ios application

408
00:40:56,400 --> 00:40:57,280
and

409
00:40:57,280 --> 00:40:59,520
what we get with the

410
00:40:59,520 --> 00:41:01,920
command i in that case

411
00:41:01,920 --> 00:41:05,280
it's just uh for

412
00:41:05,280 --> 00:41:07,760
the the vandal application that

413
00:41:07,760 --> 00:41:08,560
we

414
00:41:08,560 --> 00:41:10,880
we are executing that case is demo

415
00:41:10,880 --> 00:41:13,280
objective c app

416
00:41:13,280 --> 00:41:15,680
and as well we have the home directory

417
00:41:15,680 --> 00:41:17,280
the temp directory and the back dell

418
00:41:17,280 --> 00:41:19,440
directory that are the directories that

419
00:41:19,440 --> 00:41:21,520
the application is using

420
00:41:21,520 --> 00:41:25,040
inside the ios device

421
00:41:25,040 --> 00:41:26,640
and this is a good way

422
00:41:26,640 --> 00:41:29,839
just to start to have for example

423
00:41:29,839 --> 00:41:33,119
what architecture where we are analyzing

424
00:41:33,119 --> 00:41:35,760
the if we are working in 52 bits or in

425
00:41:35,760 --> 00:41:37,359
64 bits

426
00:41:37,359 --> 00:41:39,920
and this kind of information

427
00:41:39,920 --> 00:41:41,119
that

428
00:41:41,119 --> 00:41:42,960
can help us to understand the

429
00:41:42,960 --> 00:41:45,599
environment in that case one

430
00:41:45,599 --> 00:41:48,880
new thing that we have as well is just

431
00:41:48,880 --> 00:41:51,200
with this command we can detect if the

432
00:41:51,200 --> 00:41:52,800
application have been compiled using

433
00:41:52,800 --> 00:41:55,359
shrift or only objective c in that case

434
00:41:55,359 --> 00:42:00,078
it's using the objective-c environment

435
00:42:00,880 --> 00:42:04,000
so uh

436
00:42:04,000 --> 00:42:07,359
we have some basics commands here to to

437
00:42:07,359 --> 00:42:08,480
understand

438
00:42:08,480 --> 00:42:11,280
the first thing is just to to send an

439
00:42:11,280 --> 00:42:13,040
alert to

440
00:42:13,040 --> 00:42:14,240
the application

441
00:42:14,240 --> 00:42:16,000
it's just with the with the first

442
00:42:16,000 --> 00:42:19,200
command just with the e command

443
00:42:19,200 --> 00:42:20,560
in uppercase

444
00:42:20,560 --> 00:42:23,040
and just and then the the title and then

445
00:42:23,040 --> 00:42:25,680
the message and this is going to create

446
00:42:25,680 --> 00:42:29,040
a new alert in in our ios application

447
00:42:29,040 --> 00:42:30,480
this is

448
00:42:30,480 --> 00:42:33,680
supported in ios only

449
00:42:33,680 --> 00:42:35,520
for the moment

450
00:42:35,520 --> 00:42:37,920
and this is just a

451
00:42:37,920 --> 00:42:39,520
good beginning to understand at least

452
00:42:39,520 --> 00:42:41,599
how it works and just to check that it's

453
00:42:41,599 --> 00:42:43,599
working as expected

454
00:42:43,599 --> 00:42:44,640
then

455
00:42:44,640 --> 00:42:46,640
uh we have different air-to-free

456
00:42:46,640 --> 00:42:48,400
commands native air to three commands

457
00:42:48,400 --> 00:42:50,640
that we are going to see

458
00:42:50,640 --> 00:42:51,839
right now

459
00:42:51,839 --> 00:42:54,720
however with eto frida we can work as

460
00:42:54,720 --> 00:42:57,839
well with frida scripts or with frida

461
00:42:57,839 --> 00:42:59,520
snippets even

462
00:42:59,520 --> 00:43:00,960
so we can

463
00:43:00,960 --> 00:43:01,839
just

464
00:43:01,839 --> 00:43:05,200
create our frida scripts or our friday

465
00:43:05,200 --> 00:43:08,560
code snippet and using edufrida

466
00:43:08,560 --> 00:43:11,040
this code can be executed

467
00:43:11,040 --> 00:43:14,240
using the eval command if it's just a

468
00:43:14,240 --> 00:43:16,319
free snippet or

469
00:43:16,319 --> 00:43:17,440
just the

470
00:43:17,440 --> 00:43:19,200
with the

471
00:43:19,200 --> 00:43:21,680
colon dot and just the

472
00:43:21,680 --> 00:43:24,319
path to the script we are going to

473
00:43:24,319 --> 00:43:27,200
execute this this friday script in that

474
00:43:27,200 --> 00:43:28,480
case

475
00:43:28,480 --> 00:43:29,839
and something to

476
00:43:29,839 --> 00:43:31,839
to have into account to take into

477
00:43:31,839 --> 00:43:33,440
account for

478
00:43:33,440 --> 00:43:35,599
for that to fit a wall as well it's just

479
00:43:35,599 --> 00:43:37,920
we are getting the powerness of radar as

480
00:43:37,920 --> 00:43:39,520
well and

481
00:43:39,520 --> 00:43:43,440
all the commands that ends with a

482
00:43:43,440 --> 00:43:44,800
j

483
00:43:44,800 --> 00:43:48,640
are getting the output with json

484
00:43:48,640 --> 00:43:49,920
or

485
00:43:49,920 --> 00:43:52,160
if it's ending with an asterisk at the

486
00:43:52,160 --> 00:43:52,839
end

487
00:43:52,839 --> 00:43:58,240
it's returning the output as r2 commands

488
00:43:58,240 --> 00:44:00,880
and this is quite useful if we want to

489
00:44:00,880 --> 00:44:03,839
for example update our auto session

490
00:44:03,839 --> 00:44:05,200
with

491
00:44:05,200 --> 00:44:08,240
the new information get from frida and

492
00:44:08,240 --> 00:44:10,560
this is quite useful we we're going to

493
00:44:10,560 --> 00:44:11,280
see

494
00:44:11,280 --> 00:44:14,400
in a couple of minutes

495
00:44:14,400 --> 00:44:16,960
and it's as you see just at the bottom

496
00:44:16,960 --> 00:44:18,400
of the

497
00:44:18,400 --> 00:44:19,839
of the slide

498
00:44:19,839 --> 00:44:21,839
it's just

499
00:44:21,839 --> 00:44:22,960
printing

500
00:44:22,960 --> 00:44:26,319
the commands and this with this dot it's

501
00:44:26,319 --> 00:44:27,119
just

502
00:44:27,119 --> 00:44:29,760
quite useful

503
00:44:30,640 --> 00:44:31,359
so

504
00:44:31,359 --> 00:44:33,839
now we are going to get more information

505
00:44:33,839 --> 00:44:35,839
from

506
00:44:35,839 --> 00:44:36,960
from the

507
00:44:36,960 --> 00:44:39,119
application and we can get our

508
00:44:39,119 --> 00:44:41,599
information the import information or

509
00:44:41,599 --> 00:44:43,760
the exports all the symbols and the

510
00:44:43,760 --> 00:44:45,760
difference is just with

511
00:44:45,760 --> 00:44:48,240
changing the the second character with

512
00:44:48,240 --> 00:44:52,400
an l an i an s or an e an uppercase e in

513
00:44:52,400 --> 00:44:54,560
that case and this is quite useful

514
00:44:54,560 --> 00:44:56,560
because we are going what we are going

515
00:44:56,560 --> 00:44:59,520
to do is just get this information load

516
00:44:59,520 --> 00:45:00,720
it into an

517
00:45:00,720 --> 00:45:03,359
into the earth session and then just use

518
00:45:03,359 --> 00:45:05,440
it for our analysis

519
00:45:05,440 --> 00:45:08,560
our deeper analysis

520
00:45:08,640 --> 00:45:11,599
this is quite uh helpful if we want to

521
00:45:11,599 --> 00:45:13,359
do this like

522
00:45:13,359 --> 00:45:14,240
uh

523
00:45:14,240 --> 00:45:16,720
automatically that is the

524
00:45:16,720 --> 00:45:18,880
with the init command

525
00:45:18,880 --> 00:45:21,200
we can just uh

526
00:45:21,200 --> 00:45:24,078
any analysis

527
00:45:25,200 --> 00:45:26,160
so

528
00:45:26,160 --> 00:45:27,920
just getting deeper

529
00:45:27,920 --> 00:45:29,760
we are

530
00:45:29,760 --> 00:45:30,839
talking

531
00:45:30,839 --> 00:45:32,079
we er

532
00:45:32,079 --> 00:45:35,119
about how we analyze applications

533
00:45:35,119 --> 00:45:37,200
but it's working as well for

534
00:45:37,200 --> 00:45:39,359
for android applications but it's quite

535
00:45:39,359 --> 00:45:41,040
simple

536
00:45:41,040 --> 00:45:42,720
uh in that case

537
00:45:42,720 --> 00:45:43,599
uh

538
00:45:43,599 --> 00:45:46,880
what we want is just get the

539
00:45:46,880 --> 00:45:49,839
if the classes information

540
00:45:49,839 --> 00:45:52,160
and

541
00:45:52,480 --> 00:45:54,640
this this information can be imported

542
00:45:54,640 --> 00:45:56,400
into the

543
00:45:56,400 --> 00:45:58,319
uh the r2 session

544
00:45:58,319 --> 00:46:01,280
we are going to see this uh

545
00:46:01,280 --> 00:46:04,000
in data linear example right now

546
00:46:04,000 --> 00:46:06,079
uh so i'm going to just explain maybe

547
00:46:06,079 --> 00:46:09,280
maybe better in the example

548
00:46:09,680 --> 00:46:11,359
and this is quite useful

549
00:46:11,359 --> 00:46:16,800
because it's a good way to access to the

550
00:46:16,800 --> 00:46:20,480
file system of our devices

551
00:46:20,480 --> 00:46:23,200
it's only we we only have super for the

552
00:46:23,200 --> 00:46:27,359
moment for ios but it's quite useful to

553
00:46:27,359 --> 00:46:28,720
mount

554
00:46:28,720 --> 00:46:32,160
the remote file system in that case for

555
00:46:32,160 --> 00:46:35,760
our ios in our edit session and we can

556
00:46:35,760 --> 00:46:39,040
navigate through it and even we can just

557
00:46:39,040 --> 00:46:40,640
download

558
00:46:40,640 --> 00:46:43,520
files from our ios device

559
00:46:43,520 --> 00:46:46,720
without using in that case sched so it's

560
00:46:46,720 --> 00:46:49,680
just our using only using airto frida we

561
00:46:49,680 --> 00:46:51,440
are able to access to the file system of

562
00:46:51,440 --> 00:46:54,079
the application and get the files from

563
00:46:54,079 --> 00:46:56,640
it so we can just get the info info

564
00:46:56,640 --> 00:46:58,960
please file to which is analyzed

565
00:46:58,960 --> 00:47:01,599
information for the application or

566
00:47:01,599 --> 00:47:03,680
all the information the sensitive

567
00:47:03,680 --> 00:47:05,599
information that any application can

568
00:47:05,599 --> 00:47:07,040
generate into

569
00:47:07,040 --> 00:47:09,440
their container can be downloaded only

570
00:47:09,440 --> 00:47:11,200
using uh

571
00:47:11,200 --> 00:47:14,240
this command that is just

572
00:47:14,240 --> 00:47:17,119
initializing the session within it and

573
00:47:17,119 --> 00:47:19,680
then just with ms

574
00:47:19,680 --> 00:47:22,720
you are going to have like a shell where

575
00:47:22,720 --> 00:47:26,240
you can just navigate through all the

576
00:47:26,240 --> 00:47:29,520
folders and then just with get we can do

577
00:47:29,520 --> 00:47:31,599
you can download all the files that you

578
00:47:31,599 --> 00:47:33,920
want

579
00:47:34,240 --> 00:47:37,200
so we are going to see

580
00:47:37,200 --> 00:47:40,240
uh an example about how to analyze an

581
00:47:40,240 --> 00:47:43,119
ios method using ato freedom

582
00:47:43,119 --> 00:47:45,280
and we are going to put in practice all

583
00:47:45,280 --> 00:47:46,720
the commands that i

584
00:47:46,720 --> 00:47:49,520
just explained

585
00:47:49,520 --> 00:47:51,040
so

586
00:47:51,040 --> 00:47:52,640
what we have here

587
00:47:52,640 --> 00:47:55,200
is just i have a

588
00:47:55,200 --> 00:47:57,040
an iphone with an application it's a

589
00:47:57,040 --> 00:47:59,359
custom application that is developed for

590
00:47:59,359 --> 00:48:02,880
for demo process and then we have a

591
00:48:02,880 --> 00:48:03,760
shell

592
00:48:03,760 --> 00:48:06,319
that we are going to

593
00:48:06,319 --> 00:48:07,440
uh

594
00:48:07,440 --> 00:48:09,760
launch the application

595
00:48:09,760 --> 00:48:11,760
as i told you

596
00:48:11,760 --> 00:48:14,800
we are going to use in that case launch

597
00:48:14,800 --> 00:48:16,960
top voice to resume the application i

598
00:48:16,960 --> 00:48:18,319
had to free that's going to resume

599
00:48:18,319 --> 00:48:20,960
application automatically we are going

600
00:48:20,960 --> 00:48:24,240
to connect to the device using the usb

601
00:48:24,240 --> 00:48:25,599
we can put

602
00:48:25,599 --> 00:48:27,440
a device

603
00:48:27,440 --> 00:48:28,480
here

604
00:48:28,480 --> 00:48:30,680
if we want

605
00:48:30,680 --> 00:48:33,599
a device id

606
00:48:33,599 --> 00:48:37,440
a device id or if we cannot if we

607
00:48:37,440 --> 00:48:40,160
don't put any device it's just getting

608
00:48:40,160 --> 00:48:43,440
the one connected by default

609
00:48:43,440 --> 00:48:44,960
and

610
00:48:44,960 --> 00:48:47,520
if we don't know the name of the

611
00:48:47,520 --> 00:48:48,559
application

612
00:48:48,559 --> 00:48:50,800
just

613
00:48:50,800 --> 00:48:53,520
with two slashes

614
00:48:53,520 --> 00:48:55,520
head to three that's going to print all

615
00:48:55,520 --> 00:48:57,760
the applications that we have installed

616
00:48:57,760 --> 00:49:00,480
in our device

617
00:49:00,480 --> 00:49:03,480
so

618
00:49:04,640 --> 00:49:06,880
just

619
00:49:06,880 --> 00:49:09,200
i'm going to

620
00:49:09,200 --> 00:49:12,240
execute the application

621
00:49:12,880 --> 00:49:17,760
as you saw the application just rerun it

622
00:49:17,760 --> 00:49:18,880
and then

623
00:49:18,880 --> 00:49:21,680
we are going to

624
00:49:23,599 --> 00:49:25,920
change

625
00:49:27,040 --> 00:49:28,559
some options

626
00:49:28,559 --> 00:49:30,800
but it's quite useful to improve the

627
00:49:30,800 --> 00:49:34,160
analysis of in that case for for ios

628
00:49:34,160 --> 00:49:36,160
and then just

629
00:49:36,160 --> 00:49:38,880
we are going to execute init

630
00:49:38,880 --> 00:49:39,680
so

631
00:49:39,680 --> 00:49:42,079
just automatically is sticking to the

632
00:49:42,079 --> 00:49:43,920
entry point

633
00:49:43,920 --> 00:49:47,119
the libraries are having already loaded

634
00:49:47,119 --> 00:49:49,040
and

635
00:49:49,040 --> 00:49:51,680
if i just execute

636
00:49:51,680 --> 00:49:54,400
this command we are going to see all the

637
00:49:54,400 --> 00:49:58,200
boards from the application

638
00:49:58,400 --> 00:49:59,839
and if

639
00:49:59,839 --> 00:50:02,079
i put

640
00:50:02,079 --> 00:50:04,559
the star at the end

641
00:50:04,559 --> 00:50:07,119
are printed as i said

642
00:50:07,119 --> 00:50:08,079
as

643
00:50:08,079 --> 00:50:10,319
air two commands

644
00:50:10,319 --> 00:50:11,200
so

645
00:50:11,200 --> 00:50:13,920
i got way to import this information

646
00:50:13,920 --> 00:50:16,079
into our session as flux

647
00:50:16,079 --> 00:50:18,800
you just put it a dot the beginning

648
00:50:18,800 --> 00:50:21,520
and we can do the same for

649
00:50:21,520 --> 00:50:23,359
the exports

650
00:50:23,359 --> 00:50:26,160
so

651
00:50:26,160 --> 00:50:28,399
now

652
00:50:28,480 --> 00:50:29,920
the next step

653
00:50:29,920 --> 00:50:33,040
now we we we have uh

654
00:50:33,040 --> 00:50:35,040
the earth session with the imports and

655
00:50:35,040 --> 00:50:37,440
the export information loaded into into

656
00:50:37,440 --> 00:50:39,839
session to current session and now we

657
00:50:39,839 --> 00:50:41,119
are going to see

658
00:50:41,119 --> 00:50:46,160
the different classes that we have in

659
00:50:46,160 --> 00:50:47,680
in the application

660
00:50:47,680 --> 00:50:52,240
as you can see we have a lot of classes

661
00:50:52,240 --> 00:50:54,640
because we are

662
00:50:54,640 --> 00:50:58,160
printing the classes the classes uh

663
00:50:58,160 --> 00:50:59,839
implemented by the application and all

664
00:50:59,839 --> 00:51:02,319
the classes imported by the application

665
00:51:02,319 --> 00:51:03,359
as well

666
00:51:03,359 --> 00:51:06,960
so a good way to just check

667
00:51:06,960 --> 00:51:09,440
the classes implemented by the

668
00:51:09,440 --> 00:51:11,680
application is just using this command

669
00:51:11,680 --> 00:51:14,960
that is i see the video at the end

670
00:51:14,960 --> 00:51:18,200
and just

671
00:51:22,640 --> 00:51:25,040
filtering by the num the name of the

672
00:51:25,040 --> 00:51:27,520
application

673
00:51:27,520 --> 00:51:29,040
so

674
00:51:29,040 --> 00:51:30,319
we can see

675
00:51:30,319 --> 00:51:33,839
here are the classes implemented

676
00:51:33,839 --> 00:51:37,280
by this application

677
00:51:37,280 --> 00:51:39,040
so now

678
00:51:39,040 --> 00:51:40,960
we are going to see

679
00:51:40,960 --> 00:51:42,960
the methods

680
00:51:42,960 --> 00:51:45,280
implemented by

681
00:51:45,280 --> 00:51:48,160
this this class

682
00:51:48,160 --> 00:51:51,839
that are are these ones in that case

683
00:51:51,839 --> 00:51:55,359
and another useful command is just if

684
00:51:55,359 --> 00:51:57,680
you use the star at the end of the of

685
00:51:57,680 --> 00:51:58,960
this command

686
00:51:58,960 --> 00:52:00,800
you're going to see

687
00:52:00,800 --> 00:52:03,440
the information as flux so

688
00:52:03,440 --> 00:52:06,640
this information can be as well imported

689
00:52:06,640 --> 00:52:08,319
into our

690
00:52:08,319 --> 00:52:10,319
earth session and this is quite useful

691
00:52:10,319 --> 00:52:12,880
if now we want to just

692
00:52:12,880 --> 00:52:15,880
use

693
00:52:18,160 --> 00:52:19,040
the

694
00:52:19,040 --> 00:52:20,800
the sick command

695
00:52:20,800 --> 00:52:22,640
using the flux to move around the

696
00:52:22,640 --> 00:52:24,960
application and then run the methods

697
00:52:24,960 --> 00:52:27,520
using the the names instead of just just

698
00:52:27,520 --> 00:52:30,520
pointers

699
00:52:36,160 --> 00:52:38,640
so we are going to move to to the easier

700
00:52:38,640 --> 00:52:41,279
rookie method

701
00:52:42,000 --> 00:52:43,680
analyze the function

702
00:52:43,680 --> 00:52:46,240
and with pvg we are going to print the

703
00:52:46,240 --> 00:52:47,839
disassembly

704
00:52:47,839 --> 00:52:49,280
uh

705
00:52:49,280 --> 00:52:52,240
using air to github

706
00:52:52,240 --> 00:52:53,280
this is

707
00:52:53,280 --> 00:52:55,119
quite powerful because what we are doing

708
00:52:55,119 --> 00:52:56,800
right now is just getting the

709
00:52:56,800 --> 00:52:59,040
disassembly from memory

710
00:52:59,040 --> 00:53:00,720
and

711
00:53:00,720 --> 00:53:01,839
just

712
00:53:01,839 --> 00:53:04,160
decompiling the information directly

713
00:53:04,160 --> 00:53:05,359
from memory

714
00:53:05,359 --> 00:53:07,200
this is quite useful in ios because as

715
00:53:07,200 --> 00:53:10,319
you know ios applications has a drm

716
00:53:10,319 --> 00:53:14,240
implemented that if we want to analyze

717
00:53:14,240 --> 00:53:15,760
the binary

718
00:53:15,760 --> 00:53:18,880
we need to decrypt the binary first

719
00:53:18,880 --> 00:53:20,800
however if we are using it to free that

720
00:53:20,800 --> 00:53:23,280
we are working very directly in memory

721
00:53:23,280 --> 00:53:25,520
so it's not needed to decrypt the

722
00:53:25,520 --> 00:53:27,119
process because

723
00:53:27,119 --> 00:53:28,480
everything is already

724
00:53:28,480 --> 00:53:30,480
memory so

725
00:53:30,480 --> 00:53:32,240
here we have the

726
00:53:32,240 --> 00:53:34,559
the method

727
00:53:34,559 --> 00:53:37,200
that it just

728
00:53:40,960 --> 00:53:42,720
it's just here

729
00:53:42,720 --> 00:53:45,680
ah however

730
00:53:54,000 --> 00:53:57,000
okay

731
00:53:58,880 --> 00:54:01,440
here in that case we can see that we

732
00:54:01,440 --> 00:54:03,680
have two different functions

733
00:54:03,680 --> 00:54:06,240
as we don't know what it is

734
00:54:06,240 --> 00:54:09,280
however if we print this pointer we can

735
00:54:09,280 --> 00:54:10,480
see

736
00:54:10,480 --> 00:54:12,319
that this is

737
00:54:12,319 --> 00:54:15,680
uh an string referencing to apt that is

738
00:54:15,680 --> 00:54:19,200
just a path typically used for

739
00:54:19,200 --> 00:54:20,800
generate detections

740
00:54:20,800 --> 00:54:22,240
so

741
00:54:22,240 --> 00:54:24,800
we are going to check

742
00:54:24,800 --> 00:54:26,720
what are these functions

743
00:54:26,720 --> 00:54:29,839
and how to analyze it so

744
00:54:29,839 --> 00:54:32,480
we are going to

745
00:54:32,480 --> 00:54:36,480
just analyze the function using the

746
00:54:36,480 --> 00:54:39,799
sl command

747
00:54:46,960 --> 00:54:50,160
just let me check

748
00:54:51,119 --> 00:54:53,440
ah here

749
00:54:53,440 --> 00:54:54,640
okay

750
00:54:54,640 --> 00:54:56,319
i forgot to

751
00:54:56,319 --> 00:54:58,558
just

752
00:54:58,720 --> 00:55:00,319
this command is just

753
00:55:00,319 --> 00:55:03,680
to improve the analysis and just

754
00:55:03,680 --> 00:55:06,640
executing

755
00:55:06,640 --> 00:55:07,360
ac

756
00:55:07,360 --> 00:55:10,530
[Music]

757
00:55:11,359 --> 00:55:13,119
exactly

758
00:55:13,119 --> 00:55:16,160
so we are going to use seal

759
00:55:16,160 --> 00:55:18,799
just different analyzing the decals

760
00:55:18,799 --> 00:55:21,359
analyzing the function and if we print

761
00:55:21,359 --> 00:55:23,200
it again

762
00:55:23,200 --> 00:55:24,240
yeah

763
00:55:24,240 --> 00:55:25,760
here we go

764
00:55:25,760 --> 00:55:28,160
we have

765
00:55:28,160 --> 00:55:30,799
we have resolved the the goals to this

766
00:55:30,799 --> 00:55:33,119
function so we already know that these

767
00:55:33,119 --> 00:55:35,280
functions that default

768
00:55:35,280 --> 00:55:38,960
so this access function is using

769
00:55:38,960 --> 00:55:40,640
this pointer

770
00:55:40,640 --> 00:55:42,799
that if we print what is this pointing

771
00:55:42,799 --> 00:55:44,720
it's just a string to see the

772
00:55:44,720 --> 00:55:46,079
application

773
00:55:46,079 --> 00:55:48,799
we what we have here is just a

774
00:55:48,799 --> 00:55:52,000
very simple way to check if a device is

775
00:55:52,000 --> 00:55:53,280
still broken

776
00:55:53,280 --> 00:55:56,000
checking if this file exists using

777
00:55:56,000 --> 00:55:57,200
access

778
00:55:57,200 --> 00:55:58,559
and

779
00:55:58,559 --> 00:56:00,319
if not

780
00:56:00,319 --> 00:56:03,839
if not exist it's just creating another

781
00:56:03,839 --> 00:56:05,839
checking using dlc

782
00:56:05,839 --> 00:56:08,640
the dlc image as a function for

783
00:56:08,640 --> 00:56:10,000
ios

784
00:56:10,000 --> 00:56:13,280
used to resolve

785
00:56:13,440 --> 00:56:16,559
to resolve functions

786
00:56:16,559 --> 00:56:20,079
and what we are resolving

787
00:56:20,079 --> 00:56:21,839
is

788
00:56:21,839 --> 00:56:24,640
the string stored in that address that

789
00:56:24,640 --> 00:56:26,640
is the the l stat

790
00:56:26,640 --> 00:56:27,440
so

791
00:56:27,440 --> 00:56:30,319
what we are doing is just executing else

792
00:56:30,319 --> 00:56:32,640
that

793
00:56:32,720 --> 00:56:34,799
as we can see here

794
00:56:34,799 --> 00:56:37,599
related to

795
00:56:37,599 --> 00:56:39,359
what it's

796
00:56:39,359 --> 00:56:42,640
stored here that is there

797
00:56:42,640 --> 00:56:46,000
so we are using elstat to check if this

798
00:56:46,000 --> 00:56:48,079
file exists into the system and if it

799
00:56:48,079 --> 00:56:50,480
exists it's just showing that the

800
00:56:50,480 --> 00:56:52,960
devices are working and if not

801
00:56:52,960 --> 00:56:55,280
so it's just checking checking that it

802
00:56:55,280 --> 00:56:56,480
so

803
00:56:56,480 --> 00:56:59,680
just to

804
00:56:59,680 --> 00:57:01,119
some

805
00:57:01,119 --> 00:57:03,440
different things that we can do as well

806
00:57:03,440 --> 00:57:05,119
this is from

807
00:57:05,119 --> 00:57:07,920
the air tool because we are analyzing

808
00:57:07,920 --> 00:57:10,240
the function using radar and getting

809
00:57:10,240 --> 00:57:12,640
information using using frida

810
00:57:12,640 --> 00:57:13,599
uh

811
00:57:13,599 --> 00:57:16,240
but we can do more

812
00:57:16,240 --> 00:57:19,280
things from in the dynamic world

813
00:57:19,280 --> 00:57:22,559
using it to freedom so one example is

814
00:57:22,559 --> 00:57:25,680
just we can call methods

815
00:57:25,680 --> 00:57:26,640
so

816
00:57:26,640 --> 00:57:28,400
as we saw

817
00:57:28,400 --> 00:57:31,040
we have

818
00:57:32,160 --> 00:57:34,319
the main controller

819
00:57:34,319 --> 00:57:37,040
and we have different methods and

820
00:57:37,040 --> 00:57:39,440
here we have a method that is changing

821
00:57:39,440 --> 00:57:40,400
the

822
00:57:40,400 --> 00:57:42,480
background of the old application or at

823
00:57:42,480 --> 00:57:44,880
least it seems to

824
00:57:44,880 --> 00:57:45,760
so

825
00:57:45,760 --> 00:57:49,040
something that we can do is just

826
00:57:49,040 --> 00:57:51,599
execute

827
00:57:53,680 --> 00:57:55,040
kfs

828
00:57:55,040 --> 00:57:56,960
sorry because

829
00:57:56,960 --> 00:58:00,160
i forgot to put the class name

830
00:58:00,160 --> 00:58:01,200
just to

831
00:58:01,200 --> 00:58:03,440
check what is the

832
00:58:03,440 --> 00:58:05,119
the method

833
00:58:05,119 --> 00:58:06,319
signature

834
00:58:06,319 --> 00:58:08,160
we can see that we have a pointer

835
00:58:08,160 --> 00:58:10,319
another pointer and an integer this

836
00:58:10,319 --> 00:58:12,480
integer is referenced

837
00:58:12,480 --> 00:58:14,960
to the

838
00:58:17,520 --> 00:58:20,640
to the first parameter of the method

839
00:58:20,640 --> 00:58:23,440
and these ones are referenced to this is

840
00:58:23,440 --> 00:58:25,119
referencing the class name and this is

841
00:58:25,119 --> 00:58:27,119
referencing the the method name this is

842
00:58:27,119 --> 00:58:30,480
how it works in india as well but

843
00:58:30,480 --> 00:58:33,200
always the first two arguments the first

844
00:58:33,200 --> 00:58:35,119
the first one is a reference to the

845
00:58:35,119 --> 00:58:36,640
class and the second one is a reference

846
00:58:36,640 --> 00:58:39,359
to the method name

847
00:58:39,359 --> 00:58:41,520
so

848
00:58:41,520 --> 00:58:43,599
just

849
00:58:43,599 --> 00:58:47,839
executing dxo like this is a method to

850
00:58:47,839 --> 00:58:51,839
call objectivity methods

851
00:58:52,799 --> 00:58:55,200
we can see

852
00:58:55,200 --> 00:58:57,280
how

853
00:58:57,280 --> 00:59:01,359
we can get this method

854
00:59:02,960 --> 00:59:04,880
and call it

855
00:59:04,880 --> 00:59:06,240
and just

856
00:59:06,240 --> 00:59:08,000
check the background

857
00:59:08,000 --> 00:59:09,520
as you can see

858
00:59:09,520 --> 00:59:10,960
right now

859
00:59:10,960 --> 00:59:13,200
just sending a

860
00:59:13,200 --> 00:59:15,760
an integer we are updating the

861
00:59:15,760 --> 00:59:18,319
application color

862
00:59:18,319 --> 00:59:20,480
so it's a good way and an easy way to

863
00:59:20,480 --> 00:59:22,880
interact with application methods only

864
00:59:22,880 --> 00:59:23,839
knowing

865
00:59:23,839 --> 00:59:25,359
the class name

866
00:59:25,359 --> 00:59:28,160
and the method name and just to

867
00:59:28,160 --> 00:59:30,160
understand the parameters we can use the

868
00:59:30,160 --> 00:59:32,480
efs

869
00:59:32,480 --> 00:59:35,440
retrofit command to just get the

870
00:59:35,440 --> 00:59:37,680
function signature and just interact

871
00:59:37,680 --> 00:59:40,078
from it

872
00:59:42,640 --> 00:59:44,160
cool

873
00:59:44,160 --> 00:59:47,839
let's continue with the

874
00:59:48,640 --> 00:59:51,440
with the slides

875
00:59:57,119 --> 01:00:00,400
so lights uh this is the dxo command

876
01:00:00,400 --> 01:00:01,359
that we

877
01:00:01,359 --> 01:00:03,359
have already used

878
01:00:03,359 --> 01:00:04,160
uh

879
01:00:04,160 --> 01:00:05,839
to just interact with the application

880
01:00:05,839 --> 01:00:08,400
and the efs command that the function

881
01:00:08,400 --> 01:00:10,480
signature and just understand how her

882
01:00:10,480 --> 01:00:12,839
application is

883
01:00:12,839 --> 01:00:15,359
implemented so

884
01:00:15,359 --> 01:00:18,079
from the dynamic wall

885
01:00:18,079 --> 01:00:20,079
we can now

886
01:00:20,079 --> 01:00:23,359
call so we can call a function we can

887
01:00:23,359 --> 01:00:25,839
interact with the functions

888
01:00:25,839 --> 01:00:28,000
however we need as well to understand

889
01:00:28,000 --> 01:00:30,559
and to monitor the applications itself

890
01:00:30,559 --> 01:00:32,559
so a good way to

891
01:00:32,559 --> 01:00:33,839
to understand

892
01:00:33,839 --> 01:00:35,119
when

893
01:00:35,119 --> 01:00:37,520
a specific function is called

894
01:00:37,520 --> 01:00:38,240
when

895
01:00:38,240 --> 01:00:40,599
[Music]

896
01:00:40,599 --> 01:00:44,319
a specific class is it's been used or

897
01:00:44,319 --> 01:00:45,119
not

898
01:00:45,119 --> 01:00:48,480
a good way just to tracing the code and

899
01:00:48,480 --> 01:00:51,040
with etofrida

900
01:00:51,040 --> 01:00:57,119
we have dtf that with etf we can trace a

901
01:00:57,119 --> 01:00:58,720
function calls

902
01:00:58,720 --> 01:01:01,599
and as well if we can define as an

903
01:01:01,599 --> 01:01:02,640
argument

904
01:01:02,640 --> 01:01:06,079
uh different parameters to just uh

905
01:01:06,079 --> 01:01:08,559
depending on the function signature just

906
01:01:08,559 --> 01:01:11,119
to print not only when the function is

907
01:01:11,119 --> 01:01:12,559
called

908
01:01:12,559 --> 01:01:16,079
uh but to print as well um

909
01:01:16,079 --> 01:01:18,480
the arguments that the

910
01:01:18,480 --> 01:01:20,079
method call is

911
01:01:20,079 --> 01:01:22,480
is using in that case

912
01:01:22,480 --> 01:01:25,040
uh so we can use dtf if we want to

913
01:01:25,040 --> 01:01:28,559
interact directly with pointers and and

914
01:01:28,559 --> 01:01:33,280
with the arguments or we can use dtr

915
01:01:33,280 --> 01:01:37,040
if what we want is just to print the

916
01:01:37,040 --> 01:01:40,000
the registers just

917
01:01:40,000 --> 01:01:42,720
when the function call it's called and

918
01:01:42,720 --> 01:01:44,880
this is quite useful when the you are we

919
01:01:44,880 --> 01:01:47,119
are interacting with

920
01:01:47,119 --> 01:01:49,839
with system calls on with

921
01:01:49,839 --> 01:01:51,839
low level functions

922
01:01:51,839 --> 01:01:53,839
that it's just passing all the

923
01:01:53,839 --> 01:01:57,039
information in in the registers and

924
01:01:57,039 --> 01:01:59,920
it's a good way to just

925
01:01:59,920 --> 01:02:02,559
quickly understand how

926
01:02:02,559 --> 01:02:04,400
all the information is passed and what

927
01:02:04,400 --> 01:02:07,839
kind of information is passed

928
01:02:08,640 --> 01:02:11,520
here we have

929
01:02:12,240 --> 01:02:13,280
the

930
01:02:13,280 --> 01:02:16,799
dtf and the ddr

931
01:02:16,799 --> 01:02:19,520
example of the same function

932
01:02:19,520 --> 01:02:21,359
as you can see the difference is that

933
01:02:21,359 --> 01:02:22,559
the you

934
01:02:22,559 --> 01:02:25,039
with etf you are seeing the output as an

935
01:02:25,039 --> 01:02:26,319
argument

936
01:02:26,319 --> 01:02:29,039
and with etr you are seeing the output

937
01:02:29,039 --> 01:02:33,680
as as registers as x0 x1 x2 and so on

938
01:02:33,680 --> 01:02:37,680
however uh because of using arm

939
01:02:37,680 --> 01:02:39,920
architectures you are passing parameters

940
01:02:39,920 --> 01:02:42,799
using the registers you can see this

941
01:02:42,799 --> 01:02:45,359
exactly the same information as

942
01:02:45,359 --> 01:02:48,740
as you can see in the slide and for ios

943
01:02:48,740 --> 01:02:51,440
[Music]

944
01:02:51,440 --> 01:02:52,640
i mean

945
01:02:52,640 --> 01:02:54,240
to just

946
01:02:54,240 --> 01:02:57,520
use dtf or ttr or any

947
01:02:57,520 --> 01:02:59,200
tracing command

948
01:02:59,200 --> 01:03:03,119
you need to use or a symbol name or

949
01:03:03,119 --> 01:03:05,440
a pointer to

950
01:03:05,440 --> 01:03:07,440
to to the function

951
01:03:07,440 --> 01:03:10,559
however in ios it's implemented like a

952
01:03:10,559 --> 01:03:12,160
helper

953
01:03:12,160 --> 01:03:15,200
that is the object dc helper

954
01:03:15,200 --> 01:03:17,839
that can allow us to resolve this

955
01:03:17,839 --> 01:03:21,920
information automatically so we can

956
01:03:21,920 --> 01:03:24,799
trace object dc functions using

957
01:03:24,799 --> 01:03:26,240
objective c

958
01:03:26,240 --> 01:03:28,400
a column and then the class name and

959
01:03:28,400 --> 01:03:31,839
then the method name

960
01:03:36,559 --> 01:03:38,400
so we are going to see

961
01:03:38,400 --> 01:03:39,839
[Music]

962
01:03:39,839 --> 01:03:41,520
an easy example

963
01:03:41,520 --> 01:03:42,880
when to use

964
01:03:42,880 --> 01:03:44,799
dtf

965
01:03:44,799 --> 01:03:47,440
as we already know some information some

966
01:03:47,440 --> 01:03:48,880
applications

967
01:03:48,880 --> 01:03:50,450
are implementing a

968
01:03:50,450 --> 01:03:52,559
[Music]

969
01:03:52,559 --> 01:03:54,799
certificate pinning to avoid to

970
01:03:54,799 --> 01:03:57,680
intercept the traffic

971
01:03:57,680 --> 01:03:59,280
of the application

972
01:03:59,280 --> 01:04:01,920
and just to understand what kind of

973
01:04:01,920 --> 01:04:05,200
information it's just

974
01:04:05,200 --> 01:04:07,280
sent between the application and the

975
01:04:07,280 --> 01:04:08,559
servers

976
01:04:08,559 --> 01:04:10,000
and

977
01:04:10,000 --> 01:04:11,839
there are a lot of different ways to

978
01:04:11,839 --> 01:04:13,680
just bypass the certificate printing

979
01:04:13,680 --> 01:04:14,559
checks

980
01:04:14,559 --> 01:04:18,559
however an easy way is just instead of

981
01:04:18,559 --> 01:04:21,359
having a proxy between

982
01:04:21,359 --> 01:04:23,440
the the device and

983
01:04:23,440 --> 01:04:25,440
and the server to get the the

984
01:04:25,440 --> 01:04:28,240
communications http requests and

985
01:04:28,240 --> 01:04:29,599
and so on

986
01:04:29,599 --> 01:04:31,760
uh instead of that

987
01:04:31,760 --> 01:04:32,559
uh

988
01:04:32,559 --> 01:04:34,960
we can get directly the information of

989
01:04:34,960 --> 01:04:36,720
all the http

990
01:04:36,720 --> 01:04:38,880
requests generated by the application

991
01:04:38,880 --> 01:04:41,680
directly from the

992
01:04:41,680 --> 01:04:44,000
from the method names and the method

993
01:04:44,000 --> 01:04:47,119
calls that it's been used

994
01:04:47,119 --> 01:04:47,790
so

995
01:04:47,790 --> 01:04:50,909
[Music]

996
01:04:52,839 --> 01:04:55,920
yeah i'm going to show you a quick

997
01:04:55,920 --> 01:04:59,280
example how to

998
01:04:59,920 --> 01:05:02,559
intercept

999
01:05:02,799 --> 01:05:05,039
communications of an application that in

1000
01:05:05,039 --> 01:05:07,280
that case is an application that i know

1001
01:05:07,280 --> 01:05:08,799
that it's implementing certificate

1002
01:05:08,799 --> 01:05:11,359
pinning so it's not

1003
01:05:11,359 --> 01:05:14,559
easy to put a

1004
01:05:14,559 --> 01:05:17,200
proxy like a burp or another

1005
01:05:17,200 --> 01:05:19,680
proxy

1006
01:05:19,920 --> 01:05:23,280
because it's just detecting the

1007
01:05:23,280 --> 01:05:24,400
it's just detecting that the

1008
01:05:24,400 --> 01:05:26,480
communication it's been tempered and

1009
01:05:26,480 --> 01:05:28,480
analyzed and it's just blocking all the

1010
01:05:28,480 --> 01:05:31,760
communications so uh a good way

1011
01:05:31,760 --> 01:05:34,839
and an easy way is just

1012
01:05:34,839 --> 01:05:36,799
to

1013
01:05:36,799 --> 01:05:39,440
monitor directly the

1014
01:05:39,440 --> 01:05:42,160
functions in that case the object is

1015
01:05:42,160 --> 01:05:44,640
functions that the application may use

1016
01:05:44,640 --> 01:05:46,960
to communicate with the servers and

1017
01:05:46,960 --> 01:05:49,359
print all the information stored in the

1018
01:05:49,359 --> 01:05:51,359
in the arguments and with that

1019
01:05:51,359 --> 01:05:55,839
we can monitor the urls used to

1020
01:05:55,839 --> 01:05:57,119
in the different communications of the

1021
01:05:57,119 --> 01:06:00,720
applications and even the content of the

1022
01:06:00,720 --> 01:06:02,640
body

1023
01:06:02,640 --> 01:06:06,400
of the request sent to the server

1024
01:06:06,400 --> 01:06:08,559
this is the how it's been done it's just

1025
01:06:08,559 --> 01:06:10,720
using the dtf

1026
01:06:10,720 --> 01:06:12,880
and the objective c

1027
01:06:12,880 --> 01:06:14,000
handler

1028
01:06:14,000 --> 01:06:16,880
and then this is the class name and this

1029
01:06:16,880 --> 01:06:18,880
is the method name

1030
01:06:18,880 --> 01:06:21,359
i'm using

1031
01:06:21,359 --> 01:06:23,200
just these characters

1032
01:06:23,200 --> 01:06:23,720
just to

1033
01:06:23,720 --> 01:06:26,790
[Music]

1034
01:06:27,760 --> 01:06:30,720
to just narrow the search and to avoid

1035
01:06:30,720 --> 01:06:33,039
having conflicts with with method names

1036
01:06:33,039 --> 01:06:35,440
that can can happen

1037
01:06:35,440 --> 01:06:38,079
and with the with these commands what we

1038
01:06:38,079 --> 01:06:39,359
are

1039
01:06:39,359 --> 01:06:42,400
doing is just configuring the

1040
01:06:42,400 --> 01:06:45,280
parameters is just a configuration of

1041
01:06:45,280 --> 01:06:46,480
the

1042
01:06:46,480 --> 01:06:47,680
agent

1043
01:06:47,680 --> 01:06:50,240
so we have different parameters that we

1044
01:06:50,240 --> 01:06:53,039
can we are going to show just right now

1045
01:06:53,039 --> 01:06:54,880
and with that we

1046
01:06:54,880 --> 01:06:55,839
we

1047
01:06:55,839 --> 01:06:58,880
we get the information with

1048
01:06:58,880 --> 01:07:02,079
json in json format and we are not going

1049
01:07:02,079 --> 01:07:04,240
to print the back trace because if not

1050
01:07:04,240 --> 01:07:09,759
it's just too much verbose the output

1051
01:07:10,880 --> 01:07:12,000
so

1052
01:07:12,000 --> 01:07:15,520
i'm just going to execute

1053
01:07:15,520 --> 01:07:16,960
the

1054
01:07:16,960 --> 01:07:18,079
script

1055
01:07:18,079 --> 01:07:20,240
as it is

1056
01:07:20,240 --> 01:07:22,880
application needs trigger it's launched

1057
01:07:22,880 --> 01:07:24,960
and now it's just printing all the

1058
01:07:24,960 --> 01:07:27,760
requests done by the application as you

1059
01:07:27,760 --> 01:07:30,079
can see the application is still working

1060
01:07:30,079 --> 01:07:32,000
so it's just getting the information

1061
01:07:32,000 --> 01:07:33,680
itself

1062
01:07:33,680 --> 01:07:35,440
and

1063
01:07:35,440 --> 01:07:36,880
we have

1064
01:07:36,880 --> 01:07:39,200
all the urls

1065
01:07:39,200 --> 01:07:42,160
just here

1066
01:07:42,160 --> 01:07:45,839
for example here we have another url

1067
01:07:45,839 --> 01:07:49,119
and it's a good way to get as well uh

1068
01:07:49,119 --> 01:07:52,480
bonald is in a quick way in that case

1069
01:07:52,480 --> 01:07:55,920
it seems like an api key that maybe you

1070
01:07:55,920 --> 01:07:58,960
just use for this application

1071
01:07:58,960 --> 01:08:00,400
and just

1072
01:08:00,400 --> 01:08:01,760
we can

1073
01:08:01,760 --> 01:08:04,480
get it only just executing the script

1074
01:08:04,480 --> 01:08:05,760
and just analyzing all the

1075
01:08:05,760 --> 01:08:07,839
communications just

1076
01:08:07,839 --> 01:08:09,119
choose it

1077
01:08:09,119 --> 01:08:11,839
from it

1078
01:08:13,920 --> 01:08:15,760
cool

1079
01:08:15,760 --> 01:08:19,480
getting back to the presentation

1080
01:08:27,279 --> 01:08:28,399
so

1081
01:08:28,399 --> 01:08:31,439
now we now we know how to

1082
01:08:31,439 --> 01:08:34,238
interact with the methods into an

1083
01:08:34,238 --> 01:08:37,839
application we know how to monitor the

1084
01:08:37,839 --> 01:08:41,439
method calls so we know when a method

1085
01:08:41,439 --> 01:08:42,799
it's

1086
01:08:42,799 --> 01:08:44,799
it's been called or not

1087
01:08:44,799 --> 01:08:45,679
now

1088
01:08:45,679 --> 01:08:47,759
what we are going to do just

1089
01:08:47,759 --> 01:08:49,759
we are going to modify

1090
01:08:49,759 --> 01:08:53,439
the behavior of the methods how how so

1091
01:08:53,439 --> 01:08:56,399
here we have different methods to modify

1092
01:08:56,399 --> 01:08:59,120
the return value of the methods and when

1093
01:08:59,120 --> 01:09:01,198
this is useful this is quite useful when

1094
01:09:01,198 --> 01:09:03,920
we are working with

1095
01:09:03,920 --> 01:09:07,279
security checks like antifreedo checks

1096
01:09:07,279 --> 01:09:09,600
with anti-routing checks

1097
01:09:09,600 --> 01:09:13,198
or a digital reject checks that

1098
01:09:13,198 --> 01:09:15,198
are just functions

1099
01:09:15,198 --> 01:09:17,040
making different checks into the system

1100
01:09:17,040 --> 01:09:19,439
and then just returning true or false

1101
01:09:19,439 --> 01:09:21,679
depending on

1102
01:09:21,679 --> 01:09:24,799
if the application is it's just broken

1103
01:09:24,799 --> 01:09:28,080
if the devices are working or not

1104
01:09:28,080 --> 01:09:30,880
so with these methods we

1105
01:09:30,880 --> 01:09:33,040
we can just modify the return value of

1106
01:09:33,040 --> 01:09:36,000
the of the functions quite quite easy as

1107
01:09:36,000 --> 01:09:38,158
you are going to see right now

1108
01:09:38,158 --> 01:09:40,799
and returning what we want

1109
01:09:40,799 --> 01:09:42,560
so we have

1110
01:09:42,560 --> 01:09:43,759
a

1111
01:09:43,759 --> 01:09:46,640
if we are using a 0 or a 1 into the

1112
01:09:46,640 --> 01:09:49,520
method we are returning zero or one or

1113
01:09:49,520 --> 01:09:52,960
as it's the same true or false

1114
01:09:52,960 --> 01:09:54,640
if we are using

1115
01:09:54,640 --> 01:09:56,159
the df

1116
01:09:56,159 --> 01:09:58,800
with the f at the end it's calling the

1117
01:09:58,800 --> 01:10:00,719
original method

1118
01:10:00,719 --> 01:10:02,480
without the f it's not calling the

1119
01:10:02,480 --> 01:10:04,960
original method so so what we are doing

1120
01:10:04,960 --> 01:10:06,480
is just

1121
01:10:06,480 --> 01:10:08,800
substituting the function called just

1122
01:10:08,800 --> 01:10:11,440
returning the value without calling the

1123
01:10:11,440 --> 01:10:12,880
original code

1124
01:10:12,880 --> 01:10:15,120
and with the f we are

1125
01:10:15,120 --> 01:10:18,000
actually executing the original code

1126
01:10:18,000 --> 01:10:20,560
and we can bring to nanite an arbitrary

1127
01:10:20,560 --> 01:10:24,800
integer or even a string before one

1128
01:10:27,600 --> 01:10:28,960
so

1129
01:10:28,960 --> 01:10:31,199
let's see a

1130
01:10:31,199 --> 01:10:34,719
practical case using the ai

1131
01:10:34,719 --> 01:10:37,920
just to bypass uh

1132
01:10:37,920 --> 01:10:39,679
routing checks

1133
01:10:39,679 --> 01:10:41,600
so now

1134
01:10:41,600 --> 01:10:45,199
i'm going to use an android device

1135
01:10:45,199 --> 01:10:46,880
i'm just connecting the

1136
01:10:46,880 --> 01:10:49,760
render device

1137
01:10:50,560 --> 01:10:52,880
and

1138
01:10:54,719 --> 01:10:57,040
yeah

1139
01:10:57,040 --> 01:10:59,120
you should see the already the android

1140
01:10:59,120 --> 01:11:00,719
device

1141
01:11:00,719 --> 01:11:02,480
and

1142
01:11:02,480 --> 01:11:04,880
here i'm going to

1143
01:11:04,880 --> 01:11:06,480
spot the

1144
01:11:06,480 --> 01:11:08,000
application

1145
01:11:08,000 --> 01:11:10,840
this application is just

1146
01:11:10,840 --> 01:11:14,560
for for testing purposes it's just

1147
01:11:14,560 --> 01:11:16,640
to check if the device

1148
01:11:16,640 --> 01:11:18,400
it's root or not it's different doing

1149
01:11:18,400 --> 01:11:19,760
different checks

1150
01:11:19,760 --> 01:11:22,320
and it's a good way to identify

1151
01:11:22,320 --> 01:11:25,360
which kind of checks uh your device it's

1152
01:11:25,360 --> 01:11:27,040
failing for typical

1153
01:11:27,040 --> 01:11:29,360
anti-rooting checks

1154
01:11:29,360 --> 01:11:30,560
so

1155
01:11:30,560 --> 01:11:32,800
um

1156
01:11:32,800 --> 01:11:35,120
here i have different checks that i'm

1157
01:11:35,120 --> 01:11:36,480
failing even

1158
01:11:36,480 --> 01:11:39,280
some native checks

1159
01:11:39,280 --> 01:11:41,760
so just

1160
01:11:41,760 --> 01:11:42,800
let's

1161
01:11:42,800 --> 01:11:47,360
finalize the application and see how

1162
01:11:47,360 --> 01:11:48,800
how

1163
01:11:48,800 --> 01:11:51,600
to bypass all the checks

1164
01:11:51,600 --> 01:11:53,520
so in android we have

1165
01:11:53,520 --> 01:11:55,600
the command ic as well

1166
01:11:55,600 --> 01:11:57,520
just to analyze the the classes

1167
01:11:57,520 --> 01:12:00,159
implemented

1168
01:12:01,760 --> 01:12:04,320
and just to narrow the search

1169
01:12:04,320 --> 01:12:07,120
we are going to

1170
01:12:07,679 --> 01:12:10,719
filter the results for root build

1171
01:12:10,719 --> 01:12:12,320
within the package name of the

1172
01:12:12,320 --> 01:12:14,400
application

1173
01:12:14,400 --> 01:12:16,560
so we have different classes

1174
01:12:16,560 --> 01:12:17,360
uh

1175
01:12:17,360 --> 01:12:19,920
this is the main class

1176
01:12:19,920 --> 01:12:20,800
so

1177
01:12:20,800 --> 01:12:24,560
we are going to copy and just print

1178
01:12:24,560 --> 01:12:28,960
the methods implemented into this class

1179
01:12:28,960 --> 01:12:31,199
so we can see

1180
01:12:31,199 --> 01:12:32,960
how

1181
01:12:32,960 --> 01:12:36,400
our different checks already implemented

1182
01:12:36,400 --> 01:12:40,480
checks so exists so binary

1183
01:12:40,480 --> 01:12:42,080
read write paths

1184
01:12:42,080 --> 01:12:44,640
magic's binary so there are different

1185
01:12:44,640 --> 01:12:45,679
checks

1186
01:12:45,679 --> 01:12:49,280
implemented in using java

1187
01:12:49,280 --> 01:12:53,760
and we are going to just bypass this

1188
01:12:53,760 --> 01:12:56,480
this checks using the di command

1189
01:12:56,480 --> 01:12:58,320
so

1190
01:12:58,320 --> 01:13:00,320
we are failing

1191
01:13:00,320 --> 01:13:03,199
in those four because this one as we can

1192
01:13:03,199 --> 01:13:05,440
see in the name it's native so

1193
01:13:05,440 --> 01:13:06,159
we

1194
01:13:06,159 --> 01:13:07,679
i'm pretty sure that it's not

1195
01:13:07,679 --> 01:13:10,159
implemented in java

1196
01:13:10,159 --> 01:13:11,360
and

1197
01:13:11,360 --> 01:13:13,360
for example

1198
01:13:13,360 --> 01:13:14,320
the

1199
01:13:14,320 --> 01:13:18,670
so exists referencing the the sub binary

1200
01:13:18,670 --> 01:13:20,480
[Music]

1201
01:13:20,480 --> 01:13:21,280
or

1202
01:13:21,280 --> 01:13:22,400
we have

1203
01:13:22,400 --> 01:13:23,760
the

1204
01:13:23,760 --> 01:13:25,520
the read write paths

1205
01:13:25,520 --> 01:13:27,760
just right here that it's failing as

1206
01:13:27,760 --> 01:13:28,560
well

1207
01:13:28,560 --> 01:13:29,760
so we need

1208
01:13:29,760 --> 01:13:30,840
to

1209
01:13:30,840 --> 01:13:33,840
just modify the written value of

1210
01:13:33,840 --> 01:13:35,760
different functions

1211
01:13:35,760 --> 01:13:38,159
that as you have seen

1212
01:13:38,159 --> 01:13:39,280
are written

1213
01:13:39,280 --> 01:13:41,199
returning boolean

1214
01:13:41,199 --> 01:13:42,800
mainly all of them

1215
01:13:42,800 --> 01:13:43,679
so

1216
01:13:43,679 --> 01:13:45,920
the only thing that we just need is just

1217
01:13:45,920 --> 01:13:48,239
executing the di command with zero at

1218
01:13:48,239 --> 01:13:51,120
the end just returning false

1219
01:13:51,120 --> 01:13:53,520
always it doesn't matter the device

1220
01:13:53,520 --> 01:13:56,159
doesn't matter the checks and we

1221
01:13:56,159 --> 01:13:58,000
remember that if we are executing with

1222
01:13:58,000 --> 01:14:00,400
the f we are calling the original

1223
01:14:00,400 --> 01:14:03,840
methods however now we don't want that

1224
01:14:03,840 --> 01:14:05,040
so just

1225
01:14:05,040 --> 01:14:08,560
return false and that's it

1226
01:14:08,560 --> 01:14:11,920
for android we have a handler

1227
01:14:11,920 --> 01:14:12,840
that is

1228
01:14:12,840 --> 01:14:15,440
java it's not implemented in all the

1229
01:14:15,440 --> 01:14:17,920
commands but it's implemented in this

1230
01:14:17,920 --> 01:14:18,960
one

1231
01:14:18,960 --> 01:14:23,199
and you can just have

1232
01:14:24,000 --> 01:14:24,800
the

1233
01:14:24,800 --> 01:14:25,920
package

1234
01:14:25,920 --> 01:14:29,840
name the class name

1235
01:14:29,840 --> 01:14:32,080
and

1236
01:14:34,239 --> 01:14:37,040
the method name

1237
01:14:37,600 --> 01:14:39,120
and

1238
01:14:39,120 --> 01:14:39,920
just

1239
01:14:39,920 --> 01:14:41,440
do the same for

1240
01:14:41,440 --> 01:14:44,000
all of them

1241
01:14:44,000 --> 01:14:45,679
just let me

1242
01:14:45,679 --> 01:14:47,199
copy this

1243
01:14:47,199 --> 01:14:50,559
just to be quicker

1244
01:14:50,640 --> 01:14:53,040
check

1245
01:14:54,080 --> 01:14:56,480
for

1246
01:15:06,960 --> 01:15:09,120
um

1247
01:15:09,120 --> 01:15:12,699
[Music]

1248
01:15:17,120 --> 01:15:19,600
and now we are going just to trigger

1249
01:15:19,600 --> 01:15:21,920
again

1250
01:15:22,080 --> 01:15:25,520
the checks we can see that automatically

1251
01:15:25,520 --> 01:15:29,360
when we are using the java handler is

1252
01:15:29,360 --> 01:15:32,560
let to frida is having java traces into

1253
01:15:32,560 --> 01:15:34,239
application just two

1254
01:15:34,239 --> 01:15:36,719
notifiers but the

1255
01:15:36,719 --> 01:15:39,360
the method it's been called

1256
01:15:39,360 --> 01:15:41,679
and then it's been modified

1257
01:15:41,679 --> 01:15:43,280
with with you

1258
01:15:43,280 --> 01:15:46,480
and as you can see all the java checks

1259
01:15:46,480 --> 01:15:49,120
have been easily bypassed and quickly

1260
01:15:49,120 --> 01:15:50,960
bypassed

1261
01:15:50,960 --> 01:15:52,880
so

1262
01:15:52,880 --> 01:15:54,719
we are going to just bypass the the

1263
01:15:54,719 --> 01:15:56,159
native checks

1264
01:15:56,159 --> 01:15:58,960
how how to do that so the first thing is

1265
01:15:58,960 --> 01:16:01,040
just we need to identify

1266
01:16:01,040 --> 01:16:03,440
where the native checks are implemented

1267
01:16:03,440 --> 01:16:04,640
normally

1268
01:16:04,640 --> 01:16:05,360
how

1269
01:16:05,360 --> 01:16:09,040
in android is it's it's working with gni

1270
01:16:09,040 --> 01:16:10,080
it's just

1271
01:16:10,080 --> 01:16:12,560
we have like a stop implemented in java

1272
01:16:12,560 --> 01:16:14,480
and then this is a stab it's loading a

1273
01:16:14,480 --> 01:16:16,880
library and this library is implementing

1274
01:16:16,880 --> 01:16:19,679
the the code itself

1275
01:16:19,679 --> 01:16:23,360
so we are going to check

1276
01:16:23,360 --> 01:16:25,280
the libraries and just to narrow the the

1277
01:16:25,280 --> 01:16:26,400
search

1278
01:16:26,400 --> 01:16:28,960
we are going to filter by check and here

1279
01:16:28,960 --> 01:16:30,640
we have

1280
01:16:30,640 --> 01:16:31,520
uh

1281
01:16:31,520 --> 01:16:33,360
the library that

1282
01:16:33,360 --> 01:16:35,679
is implementing all the logic

1283
01:16:35,679 --> 01:16:38,640
of the native checks

1284
01:16:38,719 --> 01:16:39,600
so

1285
01:16:39,600 --> 01:16:40,960
as you remember

1286
01:16:40,960 --> 01:16:42,560
with the star

1287
01:16:42,560 --> 01:16:44,880
we are going to load the libraries

1288
01:16:44,880 --> 01:16:47,760
information into the r2 session

1289
01:16:47,760 --> 01:16:51,040
with the dot idea at the beginning

1290
01:16:51,040 --> 01:16:53,760
and now we can just

1291
01:16:53,760 --> 01:16:55,520
jump

1292
01:16:55,520 --> 01:16:58,719
to the library code

1293
01:16:58,719 --> 01:17:00,800
once we are inside the

1294
01:17:00,800 --> 01:17:02,640
library code

1295
01:17:02,640 --> 01:17:05,120
we can

1296
01:17:05,440 --> 01:17:07,760
get all the imports and the export

1297
01:17:07,760 --> 01:17:10,560
information from from the library put it

1298
01:17:10,560 --> 01:17:13,920
into there to session

1299
01:17:14,840 --> 01:17:16,960
and we are going

1300
01:17:16,960 --> 01:17:18,239
to see

1301
01:17:18,239 --> 01:17:21,920
which exports has the library so because

1302
01:17:21,920 --> 01:17:22,719
the

1303
01:17:22,719 --> 01:17:26,159
the java the java is calling

1304
01:17:26,159 --> 01:17:28,400
the function the native function using

1305
01:17:28,400 --> 01:17:31,199
an export so

1306
01:17:31,199 --> 01:17:33,120
we have different exports

1307
01:17:33,120 --> 01:17:34,880
and this is maybe

1308
01:17:34,880 --> 01:17:38,239
suspicious because of the name

1309
01:17:41,920 --> 01:17:42,840
and

1310
01:17:42,840 --> 01:17:44,800
uh

1311
01:17:44,800 --> 01:17:48,960
we are going to jump to this code

1312
01:17:50,000 --> 01:17:51,679
okay

1313
01:17:51,679 --> 01:17:53,920
so

1314
01:17:54,640 --> 01:17:55,840
so now

1315
01:17:55,840 --> 01:17:58,840
what

1316
01:17:58,880 --> 01:18:01,280
i forgot

1317
01:18:01,280 --> 01:18:03,519
yeah

1318
01:18:04,000 --> 01:18:06,560
now okay

1319
01:18:06,560 --> 01:18:08,480
so now we are going to analyze the

1320
01:18:08,480 --> 01:18:10,480
function

1321
01:18:10,480 --> 01:18:12,239
using guessing as well to analyze the

1322
01:18:12,239 --> 01:18:14,080
function and just

1323
01:18:14,080 --> 01:18:19,360
using a together to print into this to

1324
01:18:19,440 --> 01:18:20,320
the

1325
01:18:20,320 --> 01:18:23,960
the compiler function

1326
01:18:29,280 --> 01:18:32,880
so it's triggering a little bit

1327
01:18:39,840 --> 01:18:43,120
and there we go so we have the czech

1328
01:18:43,120 --> 01:18:45,440
route

1329
01:18:46,000 --> 01:18:49,199
it's doing different things

1330
01:18:49,760 --> 01:18:52,000
and

1331
01:18:52,480 --> 01:18:54,719
as you can see there are different

1332
01:18:54,719 --> 01:18:57,199
function calls

1333
01:18:57,199 --> 01:18:59,440
so

1334
01:18:59,840 --> 01:19:02,400
we can see

1335
01:19:02,400 --> 01:19:05,799
for example

1336
01:19:09,400 --> 01:19:12,599
[Music]

1337
01:19:21,520 --> 01:19:22,880
let me check

1338
01:19:22,880 --> 01:19:25,360
this function

1339
01:19:25,360 --> 01:19:27,040
to see

1340
01:19:27,040 --> 01:19:30,080
what is implementing

1341
01:19:33,600 --> 01:19:37,520
we are analyzing the function as well

1342
01:19:37,520 --> 01:19:41,199
and we are going to print the

1343
01:19:43,360 --> 01:19:46,450
the function

1344
01:19:46,450 --> 01:19:50,000
[Music]

1345
01:19:55,600 --> 01:19:57,840
i don't know why

1346
01:19:57,840 --> 01:20:01,640
it's not

1347
01:20:16,840 --> 01:20:19,920
so i don't know why it's not

1348
01:20:19,920 --> 01:20:21,120
just

1349
01:20:21,120 --> 01:20:24,000
praying for the democrats

1350
01:20:24,000 --> 01:20:26,239
but

1351
01:20:29,600 --> 01:20:33,000
should have

1352
01:20:35,120 --> 01:20:36,880
uh

1353
01:20:36,880 --> 01:20:39,360
we should see a reference to this method

1354
01:20:39,360 --> 01:20:40,800
that it has a

1355
01:20:40,800 --> 01:20:42,960
like a reference

1356
01:20:42,960 --> 01:20:44,320
i don't know why

1357
01:20:44,320 --> 01:20:47,360
the grid is not printed as expected

1358
01:20:47,360 --> 01:20:49,600
but we are going to move to this

1359
01:20:49,600 --> 01:20:51,360
function and

1360
01:20:51,360 --> 01:20:54,560
to analyze the function as well

1361
01:20:54,560 --> 01:20:59,280
using gasil and we have our command

1362
01:20:59,280 --> 01:21:01,679
and we are going to print this assembly

1363
01:21:01,679 --> 01:21:04,000
okay

1364
01:21:04,719 --> 01:21:06,480
so this is another

1365
01:21:06,480 --> 01:21:08,800
function that is is doing something with

1366
01:21:08,800 --> 01:21:10,320
this function

1367
01:21:10,320 --> 01:21:13,199
storing in this variable and depending

1368
01:21:13,199 --> 01:21:15,120
of the value of this variable it's just

1369
01:21:15,120 --> 01:21:17,040
doing one thing or

1370
01:21:17,040 --> 01:21:18,560
the other

1371
01:21:18,560 --> 01:21:19,360
so

1372
01:21:19,360 --> 01:21:20,560
just to

1373
01:21:20,560 --> 01:21:22,400
autoname the functions

1374
01:21:22,400 --> 01:21:25,199
after an analysis this is a useful

1375
01:21:25,199 --> 01:21:27,760
command with its ain

1376
01:21:27,760 --> 01:21:29,360
so

1377
01:21:29,360 --> 01:21:33,280
if we execute again there to free the

1378
01:21:33,280 --> 01:21:35,120
either to give

1379
01:21:35,120 --> 01:21:36,480
the compiling

1380
01:21:36,480 --> 01:21:37,520
we are

1381
01:21:37,520 --> 01:21:39,920
renaming the function so now it's quite

1382
01:21:39,920 --> 01:21:42,320
easier to understand what the method is

1383
01:21:42,320 --> 01:21:44,800
doing so in that case it's just

1384
01:21:44,800 --> 01:21:46,239
calling the

1385
01:21:46,239 --> 01:21:47,920
open

1386
01:21:47,920 --> 01:21:50,960
of an argument

1387
01:21:50,960 --> 01:21:52,560
that it's just

1388
01:21:52,560 --> 01:21:55,920
calling the open method of this argument

1389
01:21:55,920 --> 01:21:57,520
and depending of

1390
01:21:57,520 --> 01:21:58,320
the

1391
01:21:58,320 --> 01:22:01,600
the value of the open just

1392
01:22:01,600 --> 01:22:03,840
what it does it's doing is just checking

1393
01:22:03,840 --> 01:22:06,719
if some file is existing into the system

1394
01:22:06,719 --> 01:22:08,840
or not

1395
01:22:08,840 --> 01:22:10,719
uh

1396
01:22:10,719 --> 01:22:11,920
it's just

1397
01:22:11,920 --> 01:22:14,400
printing a lock

1398
01:22:14,400 --> 01:22:15,199
or

1399
01:22:15,199 --> 01:22:17,440
printing another lock so what it's

1400
01:22:17,440 --> 01:22:18,639
printing

1401
01:22:18,639 --> 01:22:21,040
it's just

1402
01:22:21,040 --> 01:22:22,239
we can

1403
01:22:22,239 --> 01:22:25,638
just print

1404
01:22:25,679 --> 01:22:28,000
the the values

1405
01:22:28,000 --> 01:22:30,880
stored in the pointers

1406
01:22:30,880 --> 01:22:34,320
so we can see that

1407
01:22:34,719 --> 01:22:36,880
what it's doing is just checking

1408
01:22:36,880 --> 01:22:39,280
it's an anti-rooting checking and it's

1409
01:22:39,280 --> 01:22:40,719
just checking

1410
01:22:40,719 --> 01:22:42,880
if a specific file is present to the

1411
01:22:42,880 --> 01:22:45,120
system and depending on if it's present

1412
01:22:45,120 --> 01:22:47,440
or not just

1413
01:22:47,440 --> 01:22:50,400
returning a value or not and printing a

1414
01:22:50,400 --> 01:22:53,679
specific log for it

1415
01:22:53,679 --> 01:22:56,080
so just to bypass this

1416
01:22:56,080 --> 01:22:57,760
we can just

1417
01:22:57,760 --> 01:23:00,800
get this method and

1418
01:23:00,800 --> 01:23:04,600
and bypass it

1419
01:23:07,760 --> 01:23:10,000
so

1420
01:23:17,120 --> 01:23:18,880
here we have

1421
01:23:18,880 --> 01:23:21,679
a script

1422
01:23:21,679 --> 01:23:25,679
and i'm going to show you

1423
01:23:26,560 --> 01:23:29,280
that it's just

1424
01:23:29,679 --> 01:23:32,480
tracing the function just to check that

1425
01:23:32,480 --> 01:23:34,560
it's wrinkled

1426
01:23:34,560 --> 01:23:36,880
and then

1427
01:23:36,880 --> 01:23:39,199
modifying the the value what is doing

1428
01:23:39,199 --> 01:23:41,280
this method it's just getting the

1429
01:23:41,280 --> 01:23:43,840
exports and filtering by the exist

1430
01:23:43,840 --> 01:23:45,840
and then just getting the address in

1431
01:23:45,840 --> 01:23:47,679
that way

1432
01:23:47,679 --> 01:23:49,840
so

1433
01:23:50,080 --> 01:23:51,280
just

1434
01:23:51,280 --> 01:23:52,480
double check

1435
01:23:52,480 --> 01:23:54,800
this is the method that i'm just

1436
01:23:54,800 --> 01:23:58,000
actually modifying and tracing and if we

1437
01:23:58,000 --> 01:23:59,679
call again

1438
01:23:59,679 --> 01:24:00,840
the

1439
01:24:00,840 --> 01:24:04,639
application we can see

1440
01:24:04,639 --> 01:24:07,360
all the different arguments that did so

1441
01:24:07,360 --> 01:24:09,120
the different parts

1442
01:24:09,120 --> 01:24:11,920
verified by the application so so in

1443
01:24:11,920 --> 01:24:13,360
that case

1444
01:24:13,360 --> 01:24:16,320
another two binary different locations

1445
01:24:16,320 --> 01:24:19,280
of the sub binary

1446
01:24:20,000 --> 01:24:23,440
as you can see fail safe

1447
01:24:23,440 --> 01:24:25,679
so all the different memories

1448
01:24:25,679 --> 01:24:26,560
are

1449
01:24:26,560 --> 01:24:29,600
printed in the screen so we can see the

1450
01:24:29,600 --> 01:24:31,040
different paths

1451
01:24:31,040 --> 01:24:33,760
check by the application and then

1452
01:24:33,760 --> 01:24:37,600
how it's been bypassed just with the dig

1453
01:24:37,600 --> 01:24:38,800
recommend

1454
01:24:38,800 --> 01:24:41,360
put it into the the export function that

1455
01:24:41,360 --> 01:24:42,560
it's a

1456
01:24:42,560 --> 01:24:44,639
the one

1457
01:24:44,639 --> 01:24:46,080
checking the

1458
01:24:46,080 --> 01:24:49,840
the files using the open cisco

1459
01:24:49,840 --> 01:24:52,840
cool

1460
01:24:58,560 --> 01:25:00,880
so

1461
01:25:02,320 --> 01:25:06,239
this is what we already explained

1462
01:25:06,480 --> 01:25:08,000
we are going to talk

1463
01:25:08,000 --> 01:25:11,600
about r2 plugins so how to

1464
01:25:11,600 --> 01:25:12,639
the

1465
01:25:12,639 --> 01:25:14,239
all what we

1466
01:25:14,239 --> 01:25:16,800
did was just manually for analysis

1467
01:25:16,800 --> 01:25:19,360
purposes and using the smallest small

1468
01:25:19,360 --> 01:25:22,239
list pre scripts however if we want to

1469
01:25:22,239 --> 01:25:24,320
do something more complex

1470
01:25:24,320 --> 01:25:27,040
we need to do it

1471
01:25:27,040 --> 01:25:30,560
as a nerd to frida plugin

1472
01:25:31,440 --> 01:25:32,800
so

1473
01:25:32,800 --> 01:25:35,120
how it's working is just

1474
01:25:35,120 --> 01:25:37,440
uh

1475
01:25:39,679 --> 01:25:40,639
you

1476
01:25:40,639 --> 01:25:42,960
the plugin is implemented in javascript

1477
01:25:42,960 --> 01:25:44,560
the only thing that you have to consider

1478
01:25:44,560 --> 01:25:45,760
is just to

1479
01:25:45,760 --> 01:25:50,320
call the plugin register api to load the

1480
01:25:50,320 --> 01:25:53,120
the plugin to the to freedom

1481
01:25:53,120 --> 01:25:56,000
and then you can load the plugins using

1482
01:25:56,000 --> 01:25:56,800
the

1483
01:25:56,800 --> 01:25:58,400
dot

1484
01:25:58,400 --> 01:25:59,760
at the beginning

1485
01:25:59,760 --> 01:26:01,760
with the file name

1486
01:26:01,760 --> 01:26:03,360
and

1487
01:26:03,360 --> 01:26:04,490
it's just

1488
01:26:04,490 --> 01:26:05,600
[Music]

1489
01:26:05,600 --> 01:26:07,920
loading the plugins and you can list all

1490
01:26:07,920 --> 01:26:10,000
the plugins so

1491
01:26:10,000 --> 01:26:12,000
in in this

1492
01:26:12,000 --> 01:26:14,560
image you can see an example of how to

1493
01:26:14,560 --> 01:26:16,719
implement the typical hello world using

1494
01:26:16,719 --> 01:26:19,440
a net to frida

1495
01:26:19,440 --> 01:26:20,639
plugging

1496
01:26:20,639 --> 01:26:22,880
here we have the code

1497
01:26:22,880 --> 01:26:25,360
it's quite simple and can be used even

1498
01:26:25,360 --> 01:26:26,880
as a template

1499
01:26:26,880 --> 01:26:27,840
because

1500
01:26:27,840 --> 01:26:28,719
you

1501
01:26:28,719 --> 01:26:31,760
you have at the beginning and

1502
01:26:31,760 --> 01:26:35,679
an array and then uh is where your hash

1503
01:26:35,679 --> 01:26:36,400
where

1504
01:26:36,400 --> 01:26:37,760
where the

1505
01:26:37,760 --> 01:26:40,480
commands are defined then we are calling

1506
01:26:40,480 --> 01:26:42,320
the plugin register

1507
01:26:42,320 --> 01:26:43,600
api called

1508
01:26:43,600 --> 01:26:46,639
using as a parameter the commands

1509
01:26:46,639 --> 01:26:48,560
structure

1510
01:26:48,560 --> 01:26:50,480
to register the plugin

1511
01:26:50,480 --> 01:26:53,120
and what we are and then

1512
01:26:53,120 --> 01:26:55,120
we have all the functions

1513
01:26:55,120 --> 01:26:56,880
that are

1514
01:26:56,880 --> 01:26:57,600
uh

1515
01:26:57,600 --> 01:27:00,719
called when the command is used in that

1516
01:27:00,719 --> 01:27:03,440
case we have a function called hello

1517
01:27:03,440 --> 01:27:05,920
that is being used by a command called

1518
01:27:05,920 --> 01:27:07,520
hello as well

1519
01:27:07,520 --> 01:27:10,480
and as well we have the plugin

1520
01:27:10,480 --> 01:27:13,040
name that is used inside the plugin

1521
01:27:13,040 --> 01:27:15,360
register api that is called hello as

1522
01:27:15,360 --> 01:27:17,120
well

1523
01:27:17,120 --> 01:27:20,080
so just with this simple structure we

1524
01:27:20,080 --> 01:27:23,040
have a typical hello you need to freedom

1525
01:27:23,040 --> 01:27:23,920
uh

1526
01:27:23,920 --> 01:27:24,460
just to

1527
01:27:24,460 --> 01:27:26,159
[Music]

1528
01:27:26,159 --> 01:27:26,960
well

1529
01:27:26,960 --> 01:27:27,920
to

1530
01:27:27,920 --> 01:27:30,400
have it as a good template

1531
01:27:30,400 --> 01:27:33,440
to create your more complex uh plugins

1532
01:27:33,440 --> 01:27:34,159
for

1533
01:27:34,159 --> 01:27:35,840
freedom

1534
01:27:35,840 --> 01:27:37,520
this is a

1535
01:27:37,520 --> 01:27:40,880
a simple example just using the api

1536
01:27:40,880 --> 01:27:43,199
reserver for objective-c that is

1537
01:27:43,199 --> 01:27:47,280
implemented in the friday api for ios

1538
01:27:47,280 --> 01:27:50,000
and what we are doing here is just

1539
01:27:50,000 --> 01:27:53,040
implementing the command find inside to

1540
01:27:53,040 --> 01:27:55,440
fiddle just to look for

1541
01:27:55,440 --> 01:27:57,360
different

1542
01:27:57,360 --> 01:28:00,159
class names or method names depending on

1543
01:28:00,159 --> 01:28:02,880
how the expression is it's used as an

1544
01:28:02,880 --> 01:28:05,360
argument

1545
01:28:06,080 --> 01:28:08,800
we have another example that it's a

1546
01:28:08,800 --> 01:28:12,400
michael parser micro is the the

1547
01:28:12,400 --> 01:28:14,800
format of the ios

1548
01:28:14,800 --> 01:28:16,080
binaries

1549
01:28:16,080 --> 01:28:17,280
or or

1550
01:28:17,280 --> 01:28:20,080
mac it's the upper wall in the case

1551
01:28:20,080 --> 01:28:22,239
and uh

1552
01:28:22,239 --> 01:28:24,239
what we are doing is just

1553
01:28:24,239 --> 01:28:25,520
loading the

1554
01:28:25,520 --> 01:28:29,600
the plugin and then with the star we are

1555
01:28:29,600 --> 01:28:31,360
getting the output as

1556
01:28:31,360 --> 01:28:31,710
um

1557
01:28:31,710 --> 01:28:33,679
[Music]

1558
01:28:33,679 --> 01:28:35,120
as rather

1559
01:28:35,120 --> 01:28:36,239
commands

1560
01:28:36,239 --> 01:28:38,000
and these commands can be implemented as

1561
01:28:38,000 --> 01:28:40,480
flags in into the session so it's a good

1562
01:28:40,480 --> 01:28:41,600
way to

1563
01:28:41,600 --> 01:28:42,400
have

1564
01:28:42,400 --> 01:28:45,280
all the mac parts and having all the

1565
01:28:45,280 --> 01:28:46,960
flags updated

1566
01:28:46,960 --> 01:28:50,560
into your two session to finish session

1567
01:28:50,560 --> 01:28:52,400
quite easily

1568
01:28:52,400 --> 01:28:53,920
and here you have

1569
01:28:53,920 --> 01:28:56,400
the code it's bigger however you have

1570
01:28:56,400 --> 01:28:57,840
the snippet to

1571
01:28:57,840 --> 01:29:00,960
how to convert the output of the

1572
01:29:00,960 --> 01:29:03,600
of a of a function to earth of radar

1573
01:29:03,600 --> 01:29:06,239
commands that is just returning

1574
01:29:06,239 --> 01:29:08,000
the string as

1575
01:29:08,000 --> 01:29:12,560
as it did stating just here

1576
01:29:14,239 --> 01:29:17,600
so more complex examples of our two

1577
01:29:17,600 --> 01:29:20,080
plugins

1578
01:29:20,320 --> 01:29:21,840
we can

1579
01:29:21,840 --> 01:29:23,199
here we have

1580
01:29:23,199 --> 01:29:24,719
uh

1581
01:29:24,719 --> 01:29:28,080
is an example for for ios it's just uh

1582
01:29:28,080 --> 01:29:30,960
our url schema fuzzer

1583
01:29:30,960 --> 01:29:31,840
uh

1584
01:29:31,840 --> 01:29:33,040
it's just uh

1585
01:29:33,040 --> 01:29:35,280
it's it's nothing new it's something

1586
01:29:35,280 --> 01:29:37,120
that it's been

1587
01:29:37,120 --> 01:29:39,280
already implemented in frida and what i

1588
01:29:39,280 --> 01:29:40,719
did is just

1589
01:29:40,719 --> 01:29:43,679
get the code and import and just

1590
01:29:43,679 --> 01:29:45,600
update it to head to frida

1591
01:29:45,600 --> 01:29:47,920
as an example

1592
01:29:47,920 --> 01:29:50,480
let me show

1593
01:29:50,480 --> 01:29:55,280
a video of a demo executing this

1594
01:29:55,280 --> 01:29:58,159
this is here to freedom

1595
01:29:58,159 --> 01:30:01,159
script

1596
01:30:06,239 --> 01:30:07,120
okay

1597
01:30:07,120 --> 01:30:11,280
here i'm attaching to the springboard

1598
01:30:11,360 --> 01:30:14,560
and i'm just

1599
01:30:14,560 --> 01:30:17,520
importing the the plugin and fuzzing

1600
01:30:17,520 --> 01:30:19,040
the e-code

1601
01:30:19,040 --> 01:30:21,840
url schema

1602
01:30:22,239 --> 01:30:25,520
and just with the contact name 666 and

1603
01:30:25,520 --> 01:30:27,280
then in the message it's what i'm

1604
01:30:27,280 --> 01:30:29,520
putting as a fuzzing

1605
01:30:29,520 --> 01:30:30,639
string

1606
01:30:30,639 --> 01:30:32,400
and then i'm just calling the

1607
01:30:32,400 --> 01:30:36,320
application continuously the url schema

1608
01:30:36,320 --> 01:30:40,080
and just what i have to do is just wait

1609
01:30:40,080 --> 01:30:41,760
to

1610
01:30:41,760 --> 01:30:44,080
identify if the application

1611
01:30:44,080 --> 01:30:47,600
crash and if it crashes just check what

1612
01:30:47,600 --> 01:30:49,280
string describes application and just

1613
01:30:49,280 --> 01:30:52,400
analyze just a nice deeper

1614
01:30:52,400 --> 01:30:54,400
from it

1615
01:30:54,400 --> 01:30:56,400
and

1616
01:30:56,400 --> 01:30:57,840
and this is a

1617
01:30:57,840 --> 01:31:02,480
simple but useful example of a specific

1618
01:31:02,480 --> 01:31:05,120
use case to use a net to freedom command

1619
01:31:05,120 --> 01:31:07,440
a neutrophil plugin sorry

1620
01:31:07,440 --> 01:31:09,760
to implement something useful to

1621
01:31:09,760 --> 01:31:11,920
automate a complex

1622
01:31:11,920 --> 01:31:14,159
process for your

1623
01:31:14,159 --> 01:31:16,800
mobile apps analysis and this is an

1624
01:31:16,800 --> 01:31:19,520
example for ios but can be done for for

1625
01:31:19,520 --> 01:31:24,199
android as well using deep links

1626
01:31:30,960 --> 01:31:33,199
so

1627
01:31:33,360 --> 01:31:35,679
this is another example

1628
01:31:35,679 --> 01:31:36,590
that is a

1629
01:31:36,590 --> 01:31:37,920
[Music]

1630
01:31:37,920 --> 01:31:40,719
the surprise of the of this talk

1631
01:31:40,719 --> 01:31:43,520
that i just

1632
01:31:43,520 --> 01:31:45,679
deserve it from the end

1633
01:31:45,679 --> 01:31:47,520
uh and this is

1634
01:31:47,520 --> 01:31:48,960
uh

1635
01:31:48,960 --> 01:31:52,320
an ios uh application decrypter

1636
01:31:52,320 --> 01:31:53,040
that

1637
01:31:53,040 --> 01:31:55,920
as i told you before you know that ios

1638
01:31:55,920 --> 01:31:58,800
applications are improving the drm

1639
01:31:58,800 --> 01:32:00,239
to avoid

1640
01:32:00,239 --> 01:32:02,800
to be analyzed and you need to decrypt

1641
01:32:02,800 --> 01:32:05,679
the application before

1642
01:32:05,679 --> 01:32:07,280
put it into your

1643
01:32:07,280 --> 01:32:11,840
radar session to analyze it statically

1644
01:32:11,840 --> 01:32:13,120
to do that

1645
01:32:13,120 --> 01:32:16,400
there are a lot and of different tools

1646
01:32:16,400 --> 01:32:19,199
however i decided to implement the mind

1647
01:32:19,199 --> 01:32:20,480
using

1648
01:32:20,480 --> 01:32:21,600
uh

1649
01:32:21,600 --> 01:32:24,000
as a neto frida plugin

1650
01:32:24,000 --> 01:32:28,239
and it's just a small tool composed by a

1651
01:32:28,239 --> 01:32:30,000
network plugin

1652
01:32:30,000 --> 01:32:31,440
and a

1653
01:32:31,440 --> 01:32:34,000
python

1654
01:32:34,870 --> 01:32:36,480
[Music]

1655
01:32:36,480 --> 01:32:39,600
a python script that is using air to to

1656
01:32:39,600 --> 01:32:41,440
interact with

1657
01:32:41,440 --> 01:32:42,719
with the device

1658
01:32:42,719 --> 01:32:46,080
and it's only supporting 64bit

1659
01:32:46,080 --> 01:32:46,960
for

1660
01:32:46,960 --> 01:32:48,159
and

1661
01:32:48,159 --> 01:32:50,960
something good for for this that other

1662
01:32:50,960 --> 01:32:54,639
tools maybe have not is you don't need

1663
01:32:54,639 --> 01:32:59,280
ssh to put your ssh credentials

1664
01:32:59,760 --> 01:33:01,120
to download

1665
01:33:01,120 --> 01:33:02,960
the the bundle

1666
01:33:02,960 --> 01:33:07,600
so it's everything is done using frida

1667
01:33:07,600 --> 01:33:09,920
and using the

1668
01:33:09,920 --> 01:33:12,400
as i told you before it's using all the

1669
01:33:12,400 --> 01:33:13,679
i o

1670
01:33:13,679 --> 01:33:15,600
features to download all the content

1671
01:33:15,600 --> 01:33:16,880
from the application

1672
01:33:16,880 --> 01:33:18,480
and

1673
01:33:18,480 --> 01:33:20,960
what you can do is just downloading only

1674
01:33:20,960 --> 01:33:22,400
the binary

1675
01:33:22,400 --> 01:33:26,800
or if you want to generate the ipad file

1676
01:33:26,800 --> 01:33:29,440
you are using the whole app bundle you

1677
01:33:29,440 --> 01:33:32,560
can do it as well with miners i

1678
01:33:32,560 --> 01:33:35,679
so just to get it

1679
01:33:35,679 --> 01:33:37,440
the requirements it's quite easy it's

1680
01:33:37,440 --> 01:33:39,360
just a working device an ios your

1681
01:33:39,360 --> 01:33:41,520
working device rather to install it in

1682
01:33:41,520 --> 01:33:43,840
your local machine and free installing

1683
01:33:43,840 --> 01:33:45,120
the device

1684
01:33:45,120 --> 01:33:48,080
and then to install it you can just use

1685
01:33:48,080 --> 01:33:49,199
pip

1686
01:33:49,199 --> 01:33:51,360
we've installed r2 flash

1687
01:33:51,360 --> 01:33:53,199
or l2pm

1688
01:33:53,199 --> 01:33:56,000
minus ci air to flash

1689
01:33:56,000 --> 01:33:58,639
and with minus l you're listing all

1690
01:33:58,639 --> 01:34:01,199
applications of the device and just

1691
01:34:01,199 --> 01:34:04,560
putting the the app bundle

1692
01:34:04,560 --> 01:34:05,920
afterwards

1693
01:34:05,920 --> 01:34:07,040
you are

1694
01:34:07,040 --> 01:34:09,679
getting the

1695
01:34:09,760 --> 01:34:11,679
the application bundle

1696
01:34:11,679 --> 01:34:13,600
and downloading the content as well from

1697
01:34:13,600 --> 01:34:16,560
from memory in that case uh the autofill

1698
01:34:16,560 --> 01:34:18,880
plugin what it's doing is just

1699
01:34:18,880 --> 01:34:21,440
analyzing the application analyzing the

1700
01:34:21,440 --> 01:34:23,120
structures and applications and just

1701
01:34:23,120 --> 01:34:26,000
getting the decrypted part portion of

1702
01:34:26,000 --> 01:34:29,600
the code and just patching the binary

1703
01:34:29,600 --> 01:34:33,120
in in local

1704
01:34:33,120 --> 01:34:35,040
so just i have a

1705
01:34:35,040 --> 01:34:37,520
video just to

1706
01:34:37,520 --> 01:34:39,920
to end just a quick demonstration about

1707
01:34:39,920 --> 01:34:42,880
how it works

1708
01:34:44,480 --> 01:34:47,480
so

1709
01:34:52,239 --> 01:34:55,239
okay

1710
01:35:22,960 --> 01:35:23,840
just

1711
01:35:23,840 --> 01:35:27,080
like sorry

1712
01:35:45,199 --> 01:35:48,199
check

1713
01:35:58,230 --> 01:36:06,688
[Music]

1714
01:36:09,600 --> 01:36:11,840
okay

1715
01:36:46,719 --> 01:36:47,920
i don't know if

1716
01:36:47,920 --> 01:36:48,960
you can see

1717
01:36:48,960 --> 01:36:52,679
well the video

1718
01:36:53,520 --> 01:36:54,719
however

1719
01:36:54,719 --> 01:36:56,800
it's just

1720
01:36:56,800 --> 01:36:59,600
uh what you can see it's just how whole

1721
01:36:59,600 --> 01:37:01,840
application is being downloaded

1722
01:37:01,840 --> 01:37:04,000
and

1723
01:37:04,000 --> 01:37:07,600
the the ipad is created

1724
01:37:07,600 --> 01:37:11,920
i'm going to upload the videos so

1725
01:37:13,600 --> 01:37:17,280
you can check it afterwards

1726
01:37:17,280 --> 01:37:21,000
so just to finish

1727
01:37:26,480 --> 01:37:29,919
well this is how it looks like

1728
01:37:30,000 --> 01:37:32,239
and just to finish just say thanks to

1729
01:37:32,239 --> 01:37:35,119
all the people

1730
01:37:35,119 --> 01:37:37,119
that it's just helping to all these

1731
01:37:37,119 --> 01:37:39,040
projects to

1732
01:37:39,040 --> 01:37:41,760
to continue

1733
01:37:43,440 --> 01:37:45,679
all the references especially for the

1734
01:37:45,679 --> 01:37:48,400
source code of the orthoflex tools for

1735
01:37:48,400 --> 01:37:50,719
the plugins and examples that

1736
01:37:50,719 --> 01:37:51,840
i used

1737
01:37:51,840 --> 01:37:53,679
during this talk and different

1738
01:37:53,679 --> 01:37:56,080
references and videos

1739
01:37:56,080 --> 01:37:58,400
to learn more

1740
01:37:58,400 --> 01:37:59,760
to

1741
01:37:59,760 --> 01:38:03,280
there to free the world so

1742
01:38:03,280 --> 01:38:06,639
yeah now that's it thank you

1743
01:38:06,639 --> 01:38:09,520
sorry for for the video

1744
01:38:09,520 --> 01:38:10,560
and well

1745
01:38:10,560 --> 01:38:13,199
hope you enjoyed

1746
01:38:13,280 --> 01:38:16,920
now it's yours pancake

1747
01:38:23,119 --> 01:38:25,199
thanks alex

1748
01:38:25,199 --> 01:38:26,800
we're gonna make a

1749
01:38:26,800 --> 01:38:28,560
quick transition to the waiting scene

1750
01:38:28,560 --> 01:38:30,880
and then we'll start with a presentation

1751
01:38:30,880 --> 01:38:34,600
from captain banana

1752
01:38:36,870 --> 01:38:40,040
[Music]

1753
01:38:43,960 --> 01:38:52,500
[Music]

1754
01:38:53,679 --> 01:38:56,679
m

1755
01:39:19,440 --> 01:39:22,580
[Music]

1756
01:39:28,250 --> 01:39:31,369
[Music]

1757
01:39:32,880 --> 01:39:35,880
so

1758
01:39:37,370 --> 01:39:40,510
[Music]

1759
01:39:45,310 --> 01:40:15,439
[Music]

1760
01:40:19,450 --> 01:41:11,259
[Music]

1761
01:41:25,119 --> 01:41:27,440
hey yo what's up it's bananaman i hope

1762
01:41:27,440 --> 01:41:30,560
you all had a great trip to barcelona

1763
01:41:30,560 --> 01:41:33,119
today i'm talking about the intersection

1764
01:41:33,119 --> 01:41:38,239
of r2 frida mobile security and dildos

1765
01:41:38,239 --> 01:41:40,400
so i came across this pretty interesting

1766
01:41:40,400 --> 01:41:43,199
product it's called satisfier

1767
01:41:43,199 --> 01:41:46,880
and it's a dildo but with an app so you

1768
01:41:46,880 --> 01:41:47,760
can

1769
01:41:47,760 --> 01:41:50,239
connect to it using bluetooth and

1770
01:41:50,239 --> 01:41:52,880
control it

1771
01:41:52,880 --> 01:41:54,639
and there are quite a few people using

1772
01:41:54,639 --> 01:41:56,000
this app

1773
01:41:56,000 --> 01:41:59,119
it's mainly sold across europe

1774
01:41:59,119 --> 01:42:01,199
and a main feature is that you can add

1775
01:42:01,199 --> 01:42:02,960
friends in the app

1776
01:42:02,960 --> 01:42:05,760
and allow them to control your satisfier

1777
01:42:05,760 --> 01:42:08,400
remotely

1778
01:42:08,800 --> 01:42:11,199
and i wanted to see if i can pose as any

1779
01:42:11,199 --> 01:42:13,840
other user on the app and trick people

1780
01:42:13,840 --> 01:42:16,159
into allowing me to

1781
01:42:16,159 --> 01:42:19,360
control their devices

1782
01:42:21,520 --> 01:42:24,080
so i did all sorts of analysis on this

1783
01:42:24,080 --> 01:42:27,760
app i've decompiled it using cfr and did

1784
01:42:27,760 --> 01:42:29,760
some static analysis

1785
01:42:29,760 --> 01:42:32,719
and i've used burp to view the traffic

1786
01:42:32,719 --> 01:42:34,239
of this app

1787
01:42:34,239 --> 01:42:36,480
in combination with freida and the

1788
01:42:36,480 --> 01:42:39,199
universe the third pinning bypass to

1789
01:42:39,199 --> 01:42:43,239
actually see the traffic

1790
01:42:43,600 --> 01:42:46,880
authentication is handled using jwts in

1791
01:42:46,880 --> 01:42:48,159
this app

1792
01:42:48,159 --> 01:42:51,199
and upon starting the app it generates a

1793
01:42:51,199 --> 01:42:54,159
jwt and that's used to authenticate at

1794
01:42:54,159 --> 01:42:56,880
the server as an anonymous user before

1795
01:42:56,880 --> 01:42:59,440
logging in

1796
01:42:59,840 --> 01:43:02,639
and what's interesting is that

1797
01:43:02,639 --> 01:43:04,320
this jwt

1798
01:43:04,320 --> 01:43:06,800
actually has to be signed in order to be

1799
01:43:06,800 --> 01:43:08,960
accepted by the server

1800
01:43:08,960 --> 01:43:10,800
and the key used

1801
01:43:10,800 --> 01:43:13,199
during signing

1802
01:43:13,199 --> 01:43:16,400
is hard coded in a native library

1803
01:43:16,400 --> 01:43:18,159
so as you can see there's a function

1804
01:43:18,159 --> 01:43:20,400
called get release key

1805
01:43:20,400 --> 01:43:22,639
it's originating from this from this

1806
01:43:22,639 --> 01:43:25,119
library and

1807
01:43:25,119 --> 01:43:28,239
the key is being used in this call to

1808
01:43:28,239 --> 01:43:30,639
sign with

1809
01:43:30,639 --> 01:43:32,560
and that's basically the initial

1810
01:43:32,560 --> 01:43:35,360
authentication

1811
01:43:37,679 --> 01:43:40,719
now if you look at authentication you

1812
01:43:40,719 --> 01:43:41,520
see

1813
01:43:41,520 --> 01:43:43,600
quite some difference

1814
01:43:43,600 --> 01:43:46,639
the first one being the subject being

1815
01:43:46,639 --> 01:43:49,600
set to satisfier for unauthenticated

1816
01:43:49,600 --> 01:43:50,639
users

1817
01:43:50,639 --> 01:43:52,480
and the subject

1818
01:43:52,480 --> 01:43:55,360
being the username for authenticated

1819
01:43:55,360 --> 01:43:56,880
users

1820
01:43:56,880 --> 01:44:00,400
another difference is that the off

1821
01:44:00,400 --> 01:44:01,360
role

1822
01:44:01,360 --> 01:44:04,840
is set to anonymous client for anonymous

1823
01:44:04,840 --> 01:44:07,760
users and upon logging in you receive

1824
01:44:07,760 --> 01:44:10,239
the role user

1825
01:44:10,239 --> 01:44:12,960
and authenticated users also have

1826
01:44:12,960 --> 01:44:16,000
another attribute in their jwts called

1827
01:44:16,000 --> 01:44:19,400
user id

1828
01:44:22,560 --> 01:44:25,600
so i wanted to extract this signing key

1829
01:44:25,600 --> 01:44:29,119
and use it to make my own jwts for any

1830
01:44:29,119 --> 01:44:30,320
other user

1831
01:44:30,320 --> 01:44:31,920
and there are quite a few

1832
01:44:31,920 --> 01:44:34,800
ways to extract this key

1833
01:44:34,800 --> 01:44:37,840
the simplest one being just using r2

1834
01:44:37,840 --> 01:44:40,239
opening the shared library

1835
01:44:40,239 --> 01:44:41,199
and

1836
01:44:41,199 --> 01:44:43,199
disassembling the

1837
01:44:43,199 --> 01:44:45,440
get release key function

1838
01:44:45,440 --> 01:44:47,520
and as you can see

1839
01:44:47,520 --> 01:44:52,480
the key is embedded as a string constant

1840
01:44:53,360 --> 01:44:57,040
another way would be to use frida

1841
01:44:57,040 --> 01:44:59,440
a simple technique is just creating a

1842
01:44:59,440 --> 01:45:03,360
new instance of this jwt token builder

1843
01:45:03,360 --> 01:45:04,400
class

1844
01:45:04,400 --> 01:45:06,880
and just calling get release key and

1845
01:45:06,880 --> 01:45:10,239
printing the result

1846
01:45:10,960 --> 01:45:13,199
and another option is to

1847
01:45:13,199 --> 01:45:16,239
actually find the the exported functions

1848
01:45:16,239 --> 01:45:18,159
in the native library

1849
01:45:18,159 --> 01:45:22,480
and adding an on leaf hook to just print

1850
01:45:22,480 --> 01:45:26,959
the return value of the specific

1851
01:45:28,840 --> 01:45:31,920
function and of course you can just use

1852
01:45:31,920 --> 01:45:33,600
r2 freeda

1853
01:45:33,600 --> 01:45:36,000
here i'm attaching to a running android

1854
01:45:36,000 --> 01:45:37,040
app

1855
01:45:37,040 --> 01:45:38,159
and

1856
01:45:38,159 --> 01:45:40,719
i'm using the available modules the

1857
01:45:40,719 --> 01:45:43,600
shared library that i'm interested in is

1858
01:45:43,600 --> 01:45:46,480
called lib native lip

1859
01:45:46,480 --> 01:45:48,880
so i'm adding a trace point at a

1860
01:45:48,880 --> 01:45:53,199
specific location for the register x1

1861
01:45:53,199 --> 01:45:56,400
and i'm triggering jwt creation

1862
01:45:56,400 --> 01:45:58,400
and as you can see the

1863
01:45:58,400 --> 01:46:01,920
secret is being printed

1864
01:46:05,520 --> 01:46:08,800
so to actually use this key to forge our

1865
01:46:08,800 --> 01:46:11,800
jwt

1866
01:46:12,320 --> 01:46:14,400
you could use your own code

1867
01:46:14,400 --> 01:46:17,119
but i've decided to just let the android

1868
01:46:17,119 --> 01:46:20,159
app do the heavy lifting for me

1869
01:46:20,159 --> 01:46:22,560
so i've used reader to overload two

1870
01:46:22,560 --> 01:46:24,560
specific functions

1871
01:46:24,560 --> 01:46:27,119
the first one being claim

1872
01:46:27,119 --> 01:46:28,719
which is being used to add the

1873
01:46:28,719 --> 01:46:31,600
information which user is holding this

1874
01:46:31,600 --> 01:46:33,679
jwt

1875
01:46:33,679 --> 01:46:34,639
and

1876
01:46:34,639 --> 01:46:37,040
i'm changing it in a way that allows me

1877
01:46:37,040 --> 01:46:37,840
to

1878
01:46:37,840 --> 01:46:43,360
add a specific user id to this jwt

1879
01:46:43,520 --> 01:46:46,400
and another one being the set subject

1880
01:46:46,400 --> 01:46:49,760
that allows me to set the subject as the

1881
01:46:49,760 --> 01:46:54,920
specific username that i want to be

1882
01:46:56,960 --> 01:46:58,639
so then

1883
01:46:58,639 --> 01:47:01,679
if we want to pose as any user

1884
01:47:01,679 --> 01:47:02,800
we need

1885
01:47:02,800 --> 01:47:04,320
the user id

1886
01:47:04,320 --> 01:47:07,199
and luckily there's an api call you can

1887
01:47:07,199 --> 01:47:08,639
use

1888
01:47:08,639 --> 01:47:09,440
to

1889
01:47:09,440 --> 01:47:12,000
just search for a specific user using

1890
01:47:12,000 --> 01:47:13,360
the username

1891
01:47:13,360 --> 01:47:17,199
and the endpoint just returns the id

1892
01:47:17,199 --> 01:47:22,519
so the id is public and it's not secret

1893
01:47:22,800 --> 01:47:26,320
and then we can use the generated jwt

1894
01:47:26,320 --> 01:47:29,360
to for example change the account

1895
01:47:29,360 --> 01:47:30,560
description

1896
01:47:30,560 --> 01:47:34,159
which is like as the status you can set

1897
01:47:34,159 --> 01:47:37,600
and here i'm using the put request

1898
01:47:37,600 --> 01:47:40,400
my generator jwt

1899
01:47:40,400 --> 01:47:42,560
and i'm setting the description to

1900
01:47:42,560 --> 01:47:46,960
hacked and the api says okay that's fine

1901
01:47:46,960 --> 01:47:49,679
and then i've effectively changed the

1902
01:47:49,679 --> 01:47:52,159
description of another user

1903
01:47:52,159 --> 01:47:56,080
that i don't even have a password for

1904
01:47:56,960 --> 01:47:59,119
so which means

1905
01:47:59,119 --> 01:48:01,520
it is a server side issue

1906
01:48:01,520 --> 01:48:03,360
that has to be mitigated on the server

1907
01:48:03,360 --> 01:48:07,360
side so jwts for authenticated users

1908
01:48:07,360 --> 01:48:10,639
should be validated using another key

1909
01:48:10,639 --> 01:48:13,280
that's secret

1910
01:48:13,280 --> 01:48:16,400
and the app doesn't have to be changed

1911
01:48:16,400 --> 01:48:20,239
but it's always a strange thing to do

1912
01:48:20,239 --> 01:48:22,800
to add the signing key

1913
01:48:22,800 --> 01:48:23,520
to

1914
01:48:23,520 --> 01:48:25,600
to the app that's accessible for any

1915
01:48:25,600 --> 01:48:27,920
user

1916
01:48:29,040 --> 01:48:31,199
so what did we actually learn there are

1917
01:48:31,199 --> 01:48:33,760
many ways to use r2 and 3d to analyze

1918
01:48:33,760 --> 01:48:34,639
apps

1919
01:48:34,639 --> 01:48:37,440
and i found r2 frida 2 work really well

1920
01:48:37,440 --> 01:48:41,919
when reversing complex applications

1921
01:48:42,480 --> 01:48:44,320
so yeah that's it

1922
01:48:44,320 --> 01:48:45,600
i've also

1923
01:48:45,600 --> 01:48:47,600
published a blog post for this if you

1924
01:48:47,600 --> 01:48:48,800
want to read it

1925
01:48:48,800 --> 01:48:51,600
and i guess the issue was patched by the

1926
01:48:51,600 --> 01:48:52,639
vendor

1927
01:48:52,639 --> 01:48:54,719
after some back and forth

1928
01:48:54,719 --> 01:48:56,159
so yeah that's it

1929
01:48:56,159 --> 01:48:59,879
thanks for having me

1930
01:49:16,560 --> 01:49:18,360
hmm

1931
01:49:18,360 --> 01:49:33,709
[Music]

1932
01:49:35,770 --> 01:49:53,060
[Music]

1933
01:49:53,440 --> 01:49:56,440
mmm

1934
01:49:57,119 --> 01:50:00,360
thank you

1935
01:50:16,080 --> 01:50:19,080
so

1936
01:50:21,460 --> 01:50:26,670
[Music]

1937
01:50:30,810 --> 01:50:33,939
[Music]

1938
01:50:34,400 --> 01:50:37,400
bye

1939
01:50:38,000 --> 01:50:41,000
wow

1940
01:50:41,650 --> 01:50:44,740
[Music]

1941
01:50:52,800 --> 01:50:55,800
two

1942
01:51:33,830 --> 01:51:36,989
[Applause]

1943
01:51:37,470 --> 01:51:40,080
[Music]

1944
01:51:40,080 --> 01:51:43,080
do

1945
01:51:50,000 --> 01:51:53,000
my

1946
01:52:14,719 --> 01:52:17,719
this

1947
01:52:19,679 --> 01:52:22,679
them

1948
01:52:29,400 --> 01:52:38,429
[Music]

1949
01:52:41,250 --> 01:52:46,200
[Music]

1950
01:53:04,340 --> 01:53:07,459
[Music]

1951
01:53:13,440 --> 01:53:16,440
my

1952
01:53:19,170 --> 01:53:22,289
[Music]

1953
01:53:45,040 --> 01:53:48,040
so

1954
01:54:04,610 --> 01:54:18,800
[Music]

1955
01:54:18,800 --> 01:54:21,210
hmm

1956
01:54:21,210 --> 01:54:30,320
[Music]

1957
01:54:30,320 --> 01:54:33,320
my

1958
01:54:33,800 --> 01:54:53,859
[Music]

1959
01:54:54,960 --> 01:54:57,810
ah

1960
01:54:57,810 --> 01:55:12,400
[Music]

1961
01:55:14,010 --> 01:55:17,199
[Applause]

1962
01:55:23,440 --> 01:55:26,440
hmm

1963
01:55:29,090 --> 01:55:39,600
[Music]

1964
01:55:42,690 --> 01:55:46,809
[Music]

1965
01:55:48,239 --> 01:55:50,960
i'd like to talk about how chao chin

1966
01:55:50,960 --> 01:55:54,080
free more inter integrate with r2

1967
01:55:54,080 --> 01:55:56,560
and mostly i will focus on the details i

1968
01:55:56,560 --> 01:56:00,080
didn't cover in my last hi tv talk if

1969
01:56:00,080 --> 01:56:00,800
you

1970
01:56:00,800 --> 01:56:03,360
if you if you didn't didn't watch that

1971
01:56:03,360 --> 01:56:06,719
talk normal i will do a fast recap

1972
01:56:06,719 --> 01:56:10,000
so first of all the recap the in in the

1973
01:56:10,000 --> 01:56:13,440
last tv ams to 2021

1974
01:56:13,440 --> 01:56:16,800
i i did i did the talk on on when chile

1975
01:56:16,800 --> 01:56:19,360
meets right there too and and how how we

1976
01:56:19,360 --> 01:56:21,840
implement our symbolic execution based

1977
01:56:21,840 --> 01:56:25,599
on radar 2 and the cheating framework

1978
01:56:25,599 --> 01:56:27,599
and today i'd like to focus on some

1979
01:56:27,599 --> 01:56:30,239
interesting details and mostly you know

1980
01:56:30,239 --> 01:56:33,920
the black magic behind the whole thing

1981
01:56:33,920 --> 01:56:35,920
so fast recap of cheating framework

1982
01:56:35,920 --> 01:56:37,440
cheating provides almost the best

1983
01:56:37,440 --> 01:56:39,920
dynamic instrumentation experience for

1984
01:56:39,920 --> 01:56:41,840
example is system infumination and you

1985
01:56:41,840 --> 01:56:43,920
have flexible hook and snapshot and a

1986
01:56:43,920 --> 01:56:46,880
full control of the sandbox and so

1987
01:56:46,880 --> 01:56:48,159
what's next

1988
01:56:48,159 --> 01:56:50,800
so we thought we think for a long time

1989
01:56:50,800 --> 01:56:52,400
what what's the next of cheating

1990
01:56:52,400 --> 01:56:54,880
framework and our answer is we we have

1991
01:56:54,880 --> 01:56:57,679
to expand the ability to to analyze that

1992
01:56:57,679 --> 01:56:59,599
both dynamic analysis and static

1993
01:56:59,599 --> 01:57:02,400
analysis and the best and the the best

1994
01:57:02,400 --> 01:57:05,440
solution is to r2 since it's free you

1995
01:57:05,440 --> 01:57:08,080
know the free software is open source

1996
01:57:08,080 --> 01:57:10,159
and it's the best alternative not not at

1997
01:57:10,159 --> 01:57:11,360
the person

1998
01:57:11,360 --> 01:57:13,760
so also our first demo is symbolic

1999
01:57:13,760 --> 01:57:15,760
execution

2000
01:57:15,760 --> 01:57:19,360
so about r2 you know r2 is the swiss map

2001
01:57:19,360 --> 01:57:21,840
of the engine reverse engineering and

2002
01:57:21,840 --> 01:57:24,239
it's and but it also has almost the

2003
01:57:24,239 --> 01:57:26,400
steepest learning curve you have to

2004
01:57:26,400 --> 01:57:28,400
learn different command and

2005
01:57:28,400 --> 01:57:31,199
and and sometimes the source is your

2006
01:57:31,199 --> 01:57:34,000
best friends often or as often the case

2007
01:57:34,000 --> 01:57:36,000
i have to read the puzzle to know which

2008
01:57:36,000 --> 01:57:37,599
command i need

2009
01:57:37,599 --> 01:57:39,920
and i but you could find almost

2010
01:57:39,920 --> 01:57:41,760
everything yes everything you need for

2011
01:57:41,760 --> 01:57:44,239
security analysis for example you want

2012
01:57:44,239 --> 01:57:46,159
to design both instructions you want to

2013
01:57:46,159 --> 01:57:48,480
show the control flow and you could

2014
01:57:48,480 --> 01:57:51,360
debug and it also has tons of utilities

2015
01:57:51,360 --> 01:57:53,199
for example the question market method

2016
01:57:53,199 --> 01:57:56,400
rate and what we cheat what we cheating

2017
01:57:56,400 --> 01:57:58,960
team really focus on is the esl the

2018
01:57:58,960 --> 01:58:01,440
available streams intermediate language

2019
01:58:01,440 --> 01:58:03,760
and it uses reverse polish notation

2020
01:58:03,760 --> 01:58:06,000
designed for interpretation and suitable

2021
01:58:06,000 --> 01:58:08,400
physical execution

2022
01:58:08,400 --> 01:58:11,440
so first of all in unit you know r2 is

2023
01:58:11,440 --> 01:58:14,320
written in say in c language and the and

2024
01:58:14,320 --> 01:58:16,239
the cheating it is written in past

2025
01:58:16,239 --> 01:58:18,719
number so there needs a bridge

2026
01:58:18,719 --> 01:58:21,199
and and the existing solutions are to

2027
01:58:21,199 --> 01:58:23,760
pipe and r are long arctop was only

2028
01:58:23,760 --> 01:58:25,760
available passing binary at that time

2029
01:58:25,760 --> 01:58:28,639
but it required rather to be installed

2030
01:58:28,639 --> 01:58:31,280
in system-wide and we hope to minimize

2031
01:58:31,280 --> 01:58:35,040
the cheating installation to pip install

2032
01:58:35,040 --> 01:58:38,400
so we don't want user to to execute

2033
01:58:38,400 --> 01:58:41,199
various very commands to just to install

2034
01:58:41,199 --> 01:58:42,800
a dependency

2035
01:58:42,800 --> 01:58:43,760
so

2036
01:58:43,760 --> 01:58:44,480
so

2037
01:58:44,480 --> 01:58:47,280
so the archive not suitable for for the

2038
01:58:47,280 --> 01:58:49,840
direct use along with the other way is

2039
01:58:49,840 --> 01:58:52,719
running a passive interpreter in r2 and

2040
01:58:52,719 --> 01:58:55,199
it seems good but it backs to wrong

2041
01:58:55,199 --> 01:58:57,679
standalone and it's still system-wide r2

2042
01:58:57,679 --> 01:59:00,880
installation is required so i decided to

2043
01:59:00,880 --> 01:59:02,960
to reinvent the view

2044
01:59:02,960 --> 01:59:04,960
so i wrote a brand new bathroom binding

2045
01:59:04,960 --> 01:59:08,800
for r2 r2d 2d bar so how it works r2

2046
01:59:08,800 --> 01:59:11,440
headers is clean enough to do auto

2047
01:59:11,440 --> 01:59:13,119
generation for

2048
01:59:13,119 --> 01:59:15,599
almost every api is marked with our api

2049
01:59:15,599 --> 01:59:16,719
and the bindings are generally

2050
01:59:16,719 --> 01:59:19,520
automatically set up and the github ci

2051
01:59:19,520 --> 01:59:22,159
so in this talk i would cover

2052
01:59:22,159 --> 01:59:25,040
the the detail of this part

2053
01:59:25,040 --> 01:59:28,000
so connect so actually how it works we

2054
01:59:28,000 --> 01:59:30,480
have the header from red r2 and we

2055
01:59:30,480 --> 01:59:33,119
expect patency type bindings and the two

2056
01:59:33,119 --> 01:59:35,360
is c type slip two it's a bank and by

2057
01:59:35,360 --> 01:59:39,119
deploy and and it pass this the c hider

2058
01:59:39,119 --> 01:59:41,840
and the up to the ast and and produce

2059
01:59:41,840 --> 01:59:45,040
the passing script from the ast but it's

2060
01:59:45,040 --> 01:59:47,280
not actually maintained it has it has it

2061
01:59:47,280 --> 01:59:49,520
has many bugs and for example there are

2062
01:59:49,520 --> 01:59:53,119
many issues at risk to to fix some bugs

2063
01:59:53,119 --> 01:59:55,599
which we avoid which

2064
01:59:55,599 --> 01:59:57,840
which prevent the generation

2065
01:59:57,840 --> 02:00:01,840
and and and the that's all so so

2066
02:00:01,840 --> 02:00:04,080
uh with the box fixed and we could

2067
02:00:04,080 --> 02:00:06,159
generate the generate the python

2068
02:00:06,159 --> 02:00:08,960
bindings similarly no no so let's see

2069
02:00:08,960 --> 02:00:12,800
the real black magic first of off ru2

2070
02:00:12,800 --> 02:00:16,000
unlike other r2 modules it is managed by

2071
02:00:16,000 --> 02:00:18,800
multiple headers there there are no r2

2072
02:00:18,800 --> 02:00:21,760
api in in the hydra file as you can see

2073
02:00:21,760 --> 02:00:26,639
it is include ru2 i even are as a

2074
02:00:27,520 --> 02:00:30,560
sub headers but so c types we won't

2075
02:00:30,560 --> 02:00:33,440
generate symbols in included headers or

2076
02:00:33,440 --> 02:00:35,040
or for example

2077
02:00:35,040 --> 02:00:38,560
if if it did if you do generate symbols

2078
02:00:38,560 --> 02:00:41,520
indicator headers the headers like

2079
02:00:41,520 --> 02:00:44,719
like stdio and st will be also generated

2080
02:00:44,719 --> 02:00:46,960
so c types won't generate symbols in

2081
02:00:46,960 --> 02:00:48,800
included

2082
02:00:48,800 --> 02:00:51,040
headers so what's ours what's my

2083
02:00:51,040 --> 02:00:53,840
solution i do the do the expansion

2084
02:00:53,840 --> 02:00:56,239
manually like the standard c

2085
02:00:56,239 --> 02:00:59,520
preprocessor preprocessor and i applies

2086
02:00:59,520 --> 02:01:02,400
it at the unexpected header for example

2087
02:01:02,400 --> 02:01:05,040
here as you can see i generated a brand

2088
02:01:05,040 --> 02:01:08,960
new header are you two gin dot h

2089
02:01:08,960 --> 02:01:11,920
it is composed of all all these headers

2090
02:01:11,920 --> 02:01:14,000
just copy their content to this head

2091
02:01:14,000 --> 02:01:16,880
these headers by the by the cycles and

2092
02:01:16,880 --> 02:01:19,920
you can get this big file and generate

2093
02:01:19,920 --> 02:01:22,880
all symbols from this file

2094
02:01:22,880 --> 02:01:25,360
so so that that's do enough we still

2095
02:01:25,360 --> 02:01:28,239
have more black magic so after we

2096
02:01:28,239 --> 02:01:30,080
generate generate the bindings we have

2097
02:01:30,080 --> 02:01:32,400
to put everything together unfortunately

2098
02:01:32,400 --> 02:01:34,480
statistically designed to output a

2099
02:01:34,480 --> 02:01:36,800
single screen for example you have a you

2100
02:01:36,800 --> 02:01:38,960
have a header you have a source file it

2101
02:01:38,960 --> 02:01:41,599
just generate that that that script and

2102
02:01:41,599 --> 02:01:43,440
and you can only use with that script

2103
02:01:43,440 --> 02:01:45,599
you you but we would like a library you

2104
02:01:45,599 --> 02:01:47,360
know we want just the frequent you

2105
02:01:47,360 --> 02:01:49,440
import the bar and and you get

2106
02:01:49,440 --> 02:01:51,599
everything so we have to try to put

2107
02:01:51,599 --> 02:01:54,560
everything together so my solution is to

2108
02:01:54,560 --> 02:01:56,239
mangle output by

2109
02:01:56,239 --> 02:01:58,960
regular expression yeah it's 30 i know

2110
02:01:58,960 --> 02:02:01,679
it's 30 indeed but it's really it works

2111
02:02:01,679 --> 02:02:03,520
basically this is the only way i could

2112
02:02:03,520 --> 02:02:06,080
think about that that could solve the

2113
02:02:06,080 --> 02:02:09,119
problem and it gives each r module a

2114
02:02:09,119 --> 02:02:12,480
separate name space and and and i remove

2115
02:02:12,480 --> 02:02:15,199
the local parts generated for example

2116
02:02:15,199 --> 02:02:17,520
my my local path is generated and and

2117
02:02:17,520 --> 02:02:20,400
make it relative and i read the wrapper

2118
02:02:20,400 --> 02:02:22,480
to use the relative parts to load all

2119
02:02:22,480 --> 02:02:24,639
our lips

2120
02:02:24,639 --> 02:02:26,719
so the last blend match you know it's

2121
02:02:26,719 --> 02:02:29,360
messing well you you

2122
02:02:29,360 --> 02:02:31,360
you may you mean you may not imagine

2123
02:02:31,360 --> 02:02:33,679
what's the problem with method

2124
02:02:33,679 --> 02:02:35,360
so first of all we would like to cross

2125
02:02:35,360 --> 02:02:38,320
platform so i choose messen but it has

2126
02:02:38,320 --> 02:02:41,040
very quickly bug on mac os then here i

2127
02:02:41,040 --> 02:02:43,520
give it i give a link but basically in

2128
02:02:43,520 --> 02:02:45,840
summary you can't use relative paths to

2129
02:02:45,840 --> 02:02:48,400
refer dynamically on my um mess and

2130
02:02:48,400 --> 02:02:49,840
build libraries

2131
02:02:49,840 --> 02:02:52,000
so it's really frustrating you know i

2132
02:02:52,000 --> 02:02:53,920
tried many many times and finally i

2133
02:02:53,920 --> 02:02:56,000
found it's a backup medicine

2134
02:02:56,000 --> 02:02:58,639
so what's my solution and then not and

2135
02:02:58,639 --> 02:03:01,280
another black magic i pass the libraries

2136
02:03:01,280 --> 02:03:03,280
you know it's it's microphone it's a

2137
02:03:03,280 --> 02:03:05,440
macro files and they rewrite the

2138
02:03:05,440 --> 02:03:08,080
downloader path so it's the last blank

2139
02:03:08,080 --> 02:03:10,320
magic and put all this black met

2140
02:03:10,320 --> 02:03:12,800
together what you get in a working

2141
02:03:12,800 --> 02:03:15,280
artery bar a passive bindings

2142
02:03:15,280 --> 02:03:18,159
so that's our 2d bar and next i will

2143
02:03:18,159 --> 02:03:21,199
cover some details about how the simple

2144
02:03:21,199 --> 02:03:22,960
execution

2145
02:03:22,960 --> 02:03:24,239
implemented

2146
02:03:24,239 --> 02:03:25,199
so

2147
02:03:25,199 --> 02:03:28,239
i asked excuse the concept and ask the

2148
02:03:28,239 --> 02:03:30,719
concept and demo if if you uh if you are

2149
02:03:30,719 --> 02:03:32,880
from unfamiliar with this part you could

2150
02:03:32,880 --> 02:03:36,239
go to the hitbe uh hide youtube channel

2151
02:03:36,239 --> 02:03:39,360
and and understand my so my demo and and

2152
02:03:39,360 --> 02:03:42,159
some concept introduction so for for

2153
02:03:42,159 --> 02:03:44,480
today's talk i just start from the

2154
02:03:44,480 --> 02:03:46,880
difficulty so i could introduce the

2155
02:03:46,880 --> 02:03:48,000
details

2156
02:03:48,000 --> 02:03:49,920
so first of all the implementation is

2157
02:03:49,920 --> 02:03:52,639
much complex than expected artw itself

2158
02:03:52,639 --> 02:03:54,400
doesn't have memory

2159
02:03:54,400 --> 02:03:57,440
implemented so we have to do it our own

2160
02:03:57,440 --> 02:04:00,960
and also we can use r2 registers

2161
02:04:00,960 --> 02:04:03,040
implementation due to we have to store

2162
02:04:03,040 --> 02:04:05,760
symbolic values and as a result we did

2163
02:04:05,760 --> 02:04:09,040
the full re-implementation of esl no not

2164
02:04:09,040 --> 02:04:11,040
all the r2 is still responsible for the

2165
02:04:11,040 --> 02:04:13,840
design resemblance but the interpreter

2166
02:04:13,840 --> 02:04:16,960
is implemented by ro and it may become

2167
02:04:16,960 --> 02:04:19,119
another mullah engine to replace unicorn

2168
02:04:19,119 --> 02:04:21,520
i will discuss this later and the

2169
02:04:21,520 --> 02:04:24,560
symbolic execution is never suitably you

2170
02:04:24,560 --> 02:04:27,199
know sometimes really really slow since

2171
02:04:27,199 --> 02:04:29,920
you have to keep every state immutable

2172
02:04:29,920 --> 02:04:31,599
also i know there are many there are

2173
02:04:31,599 --> 02:04:34,320
many things optimized but but but in

2174
02:04:34,320 --> 02:04:36,719
theory you have to keep each state and

2175
02:04:36,719 --> 02:04:39,280
the state would be exploded for complex

2176
02:04:39,280 --> 02:04:42,000
function and make it acceptable slow

2177
02:04:42,000 --> 02:04:44,960
so let's see so some details first of

2178
02:04:44,960 --> 02:04:46,159
the memory

2179
02:04:46,159 --> 02:04:49,040
so why why would i like to re implement

2180
02:04:49,040 --> 02:04:50,480
memory

2181
02:04:50,480 --> 02:04:52,960
since we had so we would like the memory

2182
02:04:52,960 --> 02:04:56,079
that holds symbolic values and it should

2183
02:04:56,079 --> 02:04:58,159
support full clones since we since the

2184
02:04:58,159 --> 02:05:01,119
memory you know a memory object or the

2185
02:05:01,119 --> 02:05:03,360
memory of the stage should be immutable

2186
02:05:03,360 --> 02:05:04,880
and it also

2187
02:05:04,880 --> 02:05:08,159
it should support a memory map and a map

2188
02:05:08,159 --> 02:05:11,119
and the under under the implementation

2189
02:05:11,119 --> 02:05:13,520
so the um the memory itself is managed

2190
02:05:13,520 --> 02:05:14,880
by segments

2191
02:05:14,880 --> 02:05:17,599
so every time ever

2192
02:05:17,599 --> 02:05:20,079
i mean you couldn't just allocate a very

2193
02:05:20,079 --> 02:05:23,119
long array and and and allow user to

2194
02:05:23,119 --> 02:05:25,840
read values you have to you have to use

2195
02:05:25,840 --> 02:05:28,440
segments every time user writes a

2196
02:05:28,440 --> 02:05:30,320
rest to a

2197
02:05:30,320 --> 02:05:33,199
address you you allocate a new segment

2198
02:05:33,199 --> 02:05:35,520
just like the page tables but but i

2199
02:05:35,520 --> 02:05:38,560
implement a simpler version so it's

2200
02:05:38,560 --> 02:05:40,639
managed by segments every time user

2201
02:05:40,639 --> 02:05:42,719
writes to energize you

2202
02:05:42,719 --> 02:05:44,719
you create a segment and insert to

2203
02:05:44,719 --> 02:05:47,280
current segment array and

2204
02:05:47,280 --> 02:05:49,840
you know it's really complex that

2205
02:05:49,840 --> 02:05:52,400
expected for example when i insert the

2206
02:05:52,400 --> 02:05:54,719
segment i have to

2207
02:05:54,719 --> 02:05:58,079
have to check the overlap segment and

2208
02:05:58,079 --> 02:06:01,360
the merge emerge or merge segment or

2209
02:06:01,360 --> 02:06:04,159
delete some existing segment and replace

2210
02:06:04,159 --> 02:06:06,159
it with a new one so it's really really

2211
02:06:06,159 --> 02:06:07,599
complex

2212
02:06:07,599 --> 02:06:09,360
and the second implementation is the

2213
02:06:09,360 --> 02:06:12,000
register information again the reason is

2214
02:06:12,000 --> 02:06:14,639
that we would like the register to hold

2215
02:06:14,639 --> 02:06:17,520
the symbolic values and it also should

2216
02:06:17,520 --> 02:06:20,719
support fulcrum since we we need we need

2217
02:06:20,719 --> 02:06:24,000
an immutable copy for each state but but

2218
02:06:24,000 --> 02:06:26,320
but fortunately it's much simpler than

2219
02:06:26,320 --> 02:06:27,599
memory

2220
02:06:27,599 --> 02:06:30,320
and the most importantly we do a full

2221
02:06:30,320 --> 02:06:33,760
representation of the esl interpreter

2222
02:06:33,760 --> 02:06:36,320
so first first of all since we have

2223
02:06:36,320 --> 02:06:39,280
implemented the memory and registers so

2224
02:06:39,280 --> 02:06:42,560
it's impossible to use r2 implementation

2225
02:06:42,560 --> 02:06:44,560
and in orientation the the most

2226
02:06:44,560 --> 02:06:47,280
important part is how we handle symbolic

2227
02:06:47,280 --> 02:06:50,719
values when we encounter a branch

2228
02:06:50,719 --> 02:06:52,960
uh when we uh here here is a code

2229
02:06:52,960 --> 02:06:55,119
snippet when we we

2230
02:06:55,119 --> 02:06:57,599
encounter a branch for example if here

2231
02:06:57,599 --> 02:06:58,400
we

2232
02:06:58,400 --> 02:07:00,960
we ate the cut with the conditions to

2233
02:07:00,960 --> 02:07:02,000
the

2234
02:07:02,000 --> 02:07:04,480
conditions for example here source

2235
02:07:04,480 --> 02:07:07,360
source that equal to zero and

2236
02:07:07,360 --> 02:07:10,960
and then after we we we interpret

2237
02:07:10,960 --> 02:07:13,920
this macro code we we

2238
02:07:13,920 --> 02:07:16,800
searched the possible the possible pc

2239
02:07:16,800 --> 02:07:19,360
for example we just

2240
02:07:19,360 --> 02:07:22,719
we just ate the condition of the true in

2241
02:07:22,719 --> 02:07:25,040
this function we could search whether it

2242
02:07:25,040 --> 02:07:27,920
could be false or or other branch

2243
02:07:27,920 --> 02:07:28,719
so

2244
02:07:28,719 --> 02:07:31,520
in in this case yes also really a nest

2245
02:07:31,520 --> 02:07:34,320
reference and and i indeed i i learned

2246
02:07:34,320 --> 02:07:36,400
many symbolic execution knowledge from

2247
02:07:36,400 --> 02:07:39,840
esl so and still wait to our unique

2248
02:07:39,840 --> 02:07:44,000
automation on our side

2249
02:07:44,000 --> 02:07:47,040
so for future you may ask why you you

2250
02:07:47,040 --> 02:07:49,679
gave the talk uh simple education three

2251
02:07:49,679 --> 02:07:52,400
months ago why students don't you still

2252
02:07:52,400 --> 02:07:53,280
don't

2253
02:07:53,280 --> 02:07:55,760
make it public or open the store open

2254
02:07:55,760 --> 02:07:56,960
source

2255
02:07:56,960 --> 02:08:00,560
so basically the the symbol execution is

2256
02:08:00,560 --> 02:08:03,440
still in heavy development and what and

2257
02:08:03,440 --> 02:08:07,599
what uh and i was doing is unicorn two

2258
02:08:07,599 --> 02:08:10,639
yes so uh so

2259
02:08:10,639 --> 02:08:11,440
so

2260
02:08:11,440 --> 02:08:13,679
in order in order to

2261
02:08:13,679 --> 02:08:16,560
to release the symbolic execution we are

2262
02:08:16,560 --> 02:08:19,440
waiting for the unicor 2 to be released

2263
02:08:19,440 --> 02:08:21,840
and and then we may have the engine

2264
02:08:21,840 --> 02:08:25,119
module and we can introduce esl as a new

2265
02:08:25,119 --> 02:08:28,480
engine and and then we can implement the

2266
02:08:28,480 --> 02:08:31,599
symbolic execution based on the esl and

2267
02:08:31,599 --> 02:08:36,800
then we we have uh the better a better

2268
02:08:36,800 --> 02:08:38,400
collection of the

2269
02:08:38,400 --> 02:08:39,760
extension

2270
02:08:39,760 --> 02:08:42,239
and and you could and and for the for

2271
02:08:42,239 --> 02:08:43,360
the first

2272
02:08:43,360 --> 02:08:45,119
for the future steps sorry i have a

2273
02:08:45,119 --> 02:08:48,079
table here this is your future steps

2274
02:08:48,079 --> 02:08:50,159
firstly we would we just released the

2275
02:08:50,159 --> 02:08:52,960
evm and and the and i

2276
02:08:52,960 --> 02:08:55,599
and i'm i'm working on unicorn 2. yeah

2277
02:08:55,599 --> 02:08:57,520
it's a brand it's a brand new version of

2278
02:08:57,520 --> 02:09:01,360
unicorn 2. now not only i ate some

2279
02:09:01,360 --> 02:09:04,480
not only it is bumped to cumula a higher

2280
02:09:04,480 --> 02:09:07,280
qmi5 you know you know unicorn it uh

2281
02:09:07,280 --> 02:09:10,079
originally is based on cumin 2 which is

2282
02:09:10,079 --> 02:09:12,960
quite old and unicorn 2 is is based on

2283
02:09:12,960 --> 02:09:15,679
cumin phi and and also i ate

2284
02:09:15,679 --> 02:09:17,040
very uh

2285
02:09:17,040 --> 02:09:20,639
a lot of a lot of exciting features and

2286
02:09:20,639 --> 02:09:23,920
and also also yeah our cheating team uh

2287
02:09:23,920 --> 02:09:27,679
recently what is working on some some

2288
02:09:27,679 --> 02:09:31,119
sacred projects based on uc 2 and its

2289
02:09:31,119 --> 02:09:32,400
new features

2290
02:09:32,400 --> 02:09:34,960
and and then after after we release

2291
02:09:34,960 --> 02:09:37,199
usually two and they release this

2292
02:09:37,199 --> 02:09:40,159
security this secret project and we are

2293
02:09:40,159 --> 02:09:43,360
going to introduce esl as an alternative

2294
02:09:43,360 --> 02:09:46,560
engine to to unicorn i mean and and

2295
02:09:46,560 --> 02:09:48,880
after that after that we we could we

2296
02:09:48,880 --> 02:09:51,280
could introduce the the rest of our two

2297
02:09:51,280 --> 02:09:53,520
components uh to

2298
02:09:53,520 --> 02:09:54,960
to for example implement symbolic

2299
02:09:54,960 --> 02:09:57,520
execution and the various stack analysis

2300
02:09:57,520 --> 02:09:59,679
so so that's all the all the future

2301
02:09:59,679 --> 02:10:01,599
steps

2302
02:10:01,599 --> 02:10:04,079
and last for credits so first off the

2303
02:10:04,079 --> 02:10:06,079
rather rather two for the next project

2304
02:10:06,079 --> 02:10:07,840
and certainly for our truly bar

2305
02:10:07,840 --> 02:10:10,239
implementation is also for the reference

2306
02:10:10,239 --> 02:10:12,159
an anchor for the design reference these

2307
02:10:12,159 --> 02:10:14,320
these three for the excellent silver and

2308
02:10:14,320 --> 02:10:16,400
pancake for the timely health

2309
02:10:16,400 --> 02:10:20,679
so that's all thank you

2310
02:10:22,220 --> 02:10:27,120
[Music]

2311
02:10:32,550 --> 02:10:36,869
[Music]

2312
02:11:03,119 --> 02:11:06,119
me

2313
02:11:10,650 --> 02:11:16,179
[Music]

2314
02:11:18,610 --> 02:11:25,858
[Music]

2315
02:11:36,960 --> 02:11:39,960
um

2316
02:11:52,660 --> 02:12:09,920
[Music]

2317
02:12:09,920 --> 02:12:11,360
so

2318
02:12:11,360 --> 02:12:25,580
[Music]

2319
02:12:33,679 --> 02:12:35,840
foreign

2320
02:12:40,110 --> 02:12:50,608
[Music]

2321
02:12:53,050 --> 02:13:04,270
[Music]

2322
02:13:09,390 --> 02:13:14,260
[Music]

2323
02:13:16,710 --> 02:13:23,380
[Music]

2324
02:13:34,159 --> 02:13:37,159
hey

2325
02:13:47,599 --> 02:13:50,599
so

2326
02:14:02,639 --> 02:14:04,190
so

2327
02:14:04,190 --> 02:14:23,350
[Music]

2328
02:14:23,350 --> 02:14:26,439
[Applause]

2329
02:14:28,080 --> 02:14:31,199
[Music]

2330
02:14:31,199 --> 02:14:34,199
foreign

2331
02:14:35,720 --> 02:14:38,779
[Music]

2332
02:14:48,260 --> 02:14:51,479
[Music]

2333
02:14:52,000 --> 02:14:54,730
oh

2334
02:14:54,730 --> 02:15:11,549
[Music]

2335
02:15:15,700 --> 02:15:22,349
[Music]

2336
02:15:22,639 --> 02:15:25,639
my

2337
02:15:44,390 --> 02:15:59,649
[Music]

2338
02:16:26,450 --> 02:16:35,020
[Music]

2339
02:16:36,638 --> 02:16:39,638
so

2340
02:16:41,770 --> 02:16:47,840
[Music]

2341
02:16:47,840 --> 02:16:50,840
so

2342
02:16:51,110 --> 02:16:56,819
[Music]

2343
02:17:13,900 --> 02:17:24,398
[Music]

2344
02:17:26,840 --> 02:17:38,049
[Music]

2345
02:17:43,170 --> 02:17:48,049
[Music]

2346
02:17:50,490 --> 02:17:57,138
[Music]

2347
02:18:08,959 --> 02:18:11,959
uh

2348
02:18:34,959 --> 02:18:37,039
you

