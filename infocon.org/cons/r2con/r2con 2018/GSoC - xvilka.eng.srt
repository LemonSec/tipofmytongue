1
00:00:01,040 --> 00:00:08,519
right now it's a bit unusual talk we

2
00:00:04,920 --> 00:00:12,570
will<font color="#E5E5E5"> talk about our google Summer of</font>

3
00:00:08,519 --> 00:00:15,210
Code program<font color="#CCCCCC"> like a</font><font color="#E5E5E5"> few years</font><font color="#CCCCCC"> before</font><font color="#E5E5E5"> we</font>

4
00:00:12,570 --> 00:00:18,990
<font color="#CCCCCC">made this program bigger and bigger</font><font color="#E5E5E5"> and</font>

5
00:00:15,210 --> 00:00:23,039
this year we have five students<font color="#CCCCCC"> who did</font>

6
00:00:18,990 --> 00:00:25,669
a<font color="#E5E5E5"> wonderful job</font><font color="#CCCCCC"> and results of their</font>

7
00:00:23,039 --> 00:00:31,640
work you already<font color="#E5E5E5"> saw in a previous</font>

8
00:00:25,670 --> 00:00:36,239
previous talks so here<font color="#E5E5E5"> they will explain</font>

9
00:00:31,640 --> 00:00:38,940
<font color="#E5E5E5">what was the initial task and what</font>

10
00:00:36,239 --> 00:00:41,790
<font color="#CCCCCC">challenges and they will show exactly</font>

11
00:00:38,940 --> 00:00:48,230
what they<font color="#CCCCCC"> -</font><font color="#E5E5E5"> every talk with will will be</font>

12
00:00:41,790 --> 00:00:51,899
with a small<font color="#E5E5E5"> giemo so please listen and</font>

13
00:00:48,230 --> 00:00:57,890
they will talk<font color="#CCCCCC"> about their challenges</font>

14
00:00:51,899 --> 00:00:57,890
<font color="#E5E5E5">and that's it thank you</font>

15
00:01:17,790 --> 00:01:33,750
<font color="#E5E5E5">oh okay so hey okay so I'm</font><font color="#CCCCCC"> Phillip</font><font color="#E5E5E5"> also</font>

16
00:01:30,210 --> 00:01:38,940
known as<font color="#E5E5E5"> my new bro</font><font color="#CCCCCC"> and I worked on</font>

17
00:01:33,750 --> 00:01:41,690
<font color="#CCCCCC">cutter</font><font color="#E5E5E5"> and my my goal was to implement</font>

18
00:01:38,940 --> 00:01:46,890
or<font color="#E5E5E5"> report the</font><font color="#CCCCCC"> debugging of Grenada and</font>

19
00:01:41,690 --> 00:01:49,950
the<font color="#E5E5E5"> emulation to</font><font color="#CCCCCC"> cutter so it's a</font>

20
00:01:46,890 --> 00:01:55,020
feature<font color="#E5E5E5"> that everyone wishes that exists</font>

21
00:01:49,950 --> 00:01:57,479
and hopefully everyone will<font color="#CCCCCC"> enjoy it so</font>

22
00:01:55,020 --> 00:02:00,840
everyone<font color="#CCCCCC"> should know cutter by now</font>

23
00:01:57,479 --> 00:02:05,120
it's a rudder as we it supports a<font color="#E5E5E5"> lot of</font>

24
00:02:00,840 --> 00:02:07,260
<font color="#E5E5E5">rudderless features and it's very easily</font>

25
00:02:05,120 --> 00:02:10,289
<font color="#CCCCCC">all the</font><font color="#E5E5E5"> features could</font><font color="#CCCCCC"> be easily</font>

26
00:02:07,260 --> 00:02:15,230
integrated<font color="#E5E5E5"> just today</font><font color="#CCCCCC"> our two deck was</font>

27
00:02:10,289 --> 00:02:18,359
integrated you saw vlog and<font color="#E5E5E5"> tweet on it</font>

28
00:02:15,230 --> 00:02:20,609
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> open-source and developing cute and</font>

29
00:02:18,360 --> 00:02:23,820
you can go download it<font color="#E5E5E5"> now if you</font>

30
00:02:20,610 --> 00:02:25,860
haven't<font color="#E5E5E5"> and store it and all</font><font color="#CCCCCC"> this so</font>

31
00:02:23,820 --> 00:02:28,970
this is a<font color="#E5E5E5"> screenshot you want to use</font>

32
00:02:25,860 --> 00:02:37,230
screenshots because we like live demos

33
00:02:28,970 --> 00:02:42,269
<font color="#E5E5E5">it's much riskier so we have cutter here</font>

34
00:02:37,230 --> 00:02:43,340
<font color="#E5E5E5">yeah</font><font color="#CCCCCC"> and we just have we can open being</font>

35
00:02:42,269 --> 00:02:47,700
true

36
00:02:43,340 --> 00:02:55,680
sorry<font color="#E5E5E5"> yeah I'm just looking at the</font><font color="#CCCCCC"> side</font>

37
00:02:47,700 --> 00:02:57,540
<font color="#CCCCCC">if it's okay</font><font color="#E5E5E5"> okay so in Summer of Code</font>

38
00:02:55,680 --> 00:02:59,730
as I mentioned the<font color="#CCCCCC"> goal was to implement</font>

39
00:02:57,540 --> 00:03:02,280
debugging and<font color="#E5E5E5"> emulation features in</font>

40
00:02:59,730 --> 00:03:04,700
<font color="#CCCCCC">cutter</font><font color="#E5E5E5"> but before that there's some</font>

41
00:03:02,280 --> 00:03:08,040
<font color="#E5E5E5">other</font><font color="#CCCCCC"> things that</font><font color="#E5E5E5"> we needed to do</font>

42
00:03:04,700 --> 00:03:10,619
<font color="#E5E5E5">specifically</font><font color="#CCCCCC"> to allow for independent</font>

43
00:03:08,040 --> 00:03:13,620
<font color="#CCCCCC">six on the different</font><font color="#E5E5E5"> widgets so on the</font>

44
00:03:10,620 --> 00:03:15,959
graph widget and disassembly widget we

45
00:03:13,620 --> 00:03:19,920
would want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> look at different</font>

46
00:03:15,959 --> 00:03:22,140
functions<font color="#E5E5E5"> in</font><font color="#CCCCCC"> those widgets</font><font color="#E5E5E5"> and and then</font>

47
00:03:19,920 --> 00:03:25,079
the<font color="#E5E5E5"> debugging and actually emulation</font>

48
00:03:22,140 --> 00:03:27,238
support so<font color="#E5E5E5"> let's first look at the</font>

49
00:03:25,080 --> 00:03:29,819
independent<font color="#E5E5E5"> SIG's and how we can use it</font>

50
00:03:27,239 --> 00:03:34,260
in cutter so

51
00:03:29,819 --> 00:03:37,768
if you go to<font color="#CCCCCC"> Qatar here with we see here</font>

52
00:03:34,260 --> 00:03:41,640
the disassembly<font color="#CCCCCC"> and</font><font color="#E5E5E5"> a graph menu and we</font>

53
00:03:37,769 --> 00:03:44,370
forgot to<font color="#CCCCCC"> the graph menu can go into</font><font color="#E5E5E5"> the</font>

54
00:03:41,640 --> 00:03:49,159
main by the way<font color="#E5E5E5"> this is this is been</font>

55
00:03:44,370 --> 00:03:54,060
<font color="#E5E5E5">true sorry so you</font><font color="#CCCCCC"> can just sew our seek</font>

56
00:03:49,159 --> 00:03:58,200
<font color="#CCCCCC">rudder</font><font color="#E5E5E5"> AIESEC is on the clicking is</font>

57
00:03:54,060 --> 00:04:01,500
where we click so if we want<font color="#E5E5E5"> to fix the</font>

58
00:03:58,200 --> 00:04:04,290
sink<font color="#E5E5E5"> of this widget we just right click</font>

59
00:04:01,500 --> 00:04:06,750
<font color="#CCCCCC">and see it and</font><font color="#E5E5E5"> now in the disassembly we</font>

60
00:04:04,290 --> 00:04:10,709
can go anywhere<font color="#CCCCCC"> else</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> that function</font>

61
00:04:06,750 --> 00:04:14,400
will<font color="#E5E5E5"> stay there so we can go to to the</font>

62
00:04:10,709 --> 00:04:17,070
entry point<font color="#CCCCCC"> and if we go back to the</font>

63
00:04:14,400 --> 00:04:20,608
graph mode we're still in the main

64
00:04:17,070 --> 00:04:25,469
function<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so this is a lot of people</font>

65
00:04:20,608 --> 00:04:29,638
<font color="#E5E5E5">find is useful</font><font color="#CCCCCC"> I find it useful</font><font color="#E5E5E5"> what</font>

66
00:04:25,470 --> 00:04:31,889
else<font color="#E5E5E5"> we now allow for multiple panels of</font>

67
00:04:29,639 --> 00:04:35,400
<font color="#CCCCCC">the same widget</font><font color="#E5E5E5"> so we can have several</font>

68
00:04:31,889 --> 00:04:39,300
graph widgets<font color="#CCCCCC"> at the same time so let's</font>

69
00:04:35,400 --> 00:04:41,310
see how we do<font color="#CCCCCC"> this so we have</font><font color="#E5E5E5"> this graph</font>

70
00:04:39,300 --> 00:04:44,760
widget here we can just<font color="#CCCCCC"> go to</font><font color="#E5E5E5"> windows</font>

71
00:04:41,310 --> 00:04:48,659
add extra graph window<font color="#E5E5E5"> and we get an</font>

72
00:04:44,760 --> 00:04:52,199
<font color="#E5E5E5">extra referee</font><font color="#CCCCCC"> no here cut and we as all</font>

73
00:04:48,659 --> 00:04:55,979
windows in<font color="#CCCCCC"> cutter</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> detach them</font>

74
00:04:52,199 --> 00:04:57,630
and move<font color="#CCCCCC"> them around so and this seek is</font>

75
00:04:55,979 --> 00:05:00,990
also<font color="#CCCCCC"> independent from the other</font><font color="#E5E5E5"> one</font>

76
00:04:57,630 --> 00:05:03,810
so now we have<font color="#CCCCCC"> to main</font><font color="#E5E5E5"> we need to graph</font>

77
00:05:00,990 --> 00:05:08,370
widgets on the<font color="#E5E5E5"> main and you can just</font>

78
00:05:03,810 --> 00:05:16,500
look around<font color="#E5E5E5"> and analyzed as you go</font><font color="#CCCCCC"> ok</font>

79
00:05:08,370 --> 00:05:18,990
let's<font color="#CCCCCC"> see ok for the real debugging and</font>

80
00:05:16,500 --> 00:05:22,110
<font color="#E5E5E5">Malaysian as well as attaching we</font>

81
00:05:18,990 --> 00:05:26,520
implemented<font color="#CCCCCC"> some menus</font><font color="#E5E5E5"> specifically</font>

82
00:05:22,110 --> 00:05:31,949
these menu toolbar up here

83
00:05:26,520 --> 00:05:34,020
so there's a the the usual<font color="#E5E5E5"> debug play</font>

84
00:05:31,949 --> 00:05:36,240
button so you<font color="#E5E5E5"> can start debug such a</font>

85
00:05:34,020 --> 00:05:38,729
<font color="#E5E5E5">Malaysian</font><font color="#CCCCCC"> or actually attach to a</font>

86
00:05:36,240 --> 00:05:41,099
process so<font color="#E5E5E5"> you get these nice Vista</font>

87
00:05:38,729 --> 00:05:43,440
<font color="#E5E5E5">processes you</font><font color="#CCCCCC"> can filter by</font><font color="#E5E5E5"> Firefox or</font>

88
00:05:41,099 --> 00:05:46,050
something and<font color="#E5E5E5"> attach</font><font color="#CCCCCC"> to it</font>

89
00:05:43,440 --> 00:05:48,870
this is<font color="#E5E5E5"> stop debugging</font><font color="#CCCCCC"> continue</font><font color="#E5E5E5"> process</font>

90
00:05:46,050 --> 00:05:51,180
<font color="#E5E5E5">then we have these nice most people</font>

91
00:05:48,870 --> 00:05:53,280
don't like it<font color="#CCCCCC"> but I</font><font color="#E5E5E5"> actually like them</font>

92
00:05:51,180 --> 00:05:54,870
continue until mine continue until<font color="#E5E5E5"> call</font>

93
00:05:53,280 --> 00:05:58,289
<font color="#E5E5E5">and continue until cease call buttons</font>

94
00:05:54,870 --> 00:06:01,050
which<font color="#E5E5E5"> I find useful</font><font color="#CCCCCC"> the step step over</font>

95
00:05:58,289 --> 00:06:03,318
and step out<font color="#E5E5E5"> usual</font><font color="#CCCCCC"> buttons in the</font>

96
00:06:01,050 --> 00:06:07,560
debugger<font color="#E5E5E5"> so you can we</font><font color="#CCCCCC"> can try it</font>

97
00:06:03,319 --> 00:06:10,560
<font color="#CCCCCC">hopefully everything will go fine</font><font color="#E5E5E5"> fine</font>

98
00:06:07,560 --> 00:06:12,389
<font color="#CCCCCC">so we start debugging and we're on the</font>

99
00:06:10,560 --> 00:06:15,060
entry point<font color="#CCCCCC"> and you just continue</font><font color="#E5E5E5"> until</font>

100
00:06:12,389 --> 00:06:18,720
<font color="#E5E5E5">mine with this play button until</font><font color="#CCCCCC"> diem</font>

101
00:06:15,060 --> 00:06:23,159
and we reach the main<font color="#CCCCCC"> ok so and</font><font color="#E5E5E5"> then we</font>

102
00:06:18,720 --> 00:06:25,259
can just<font color="#E5E5E5"> step step step step step</font><font color="#CCCCCC"> and</font>

103
00:06:23,159 --> 00:06:31,050
then just to see<font color="#CCCCCC"> you over a call</font>

104
00:06:25,259 --> 00:06:36,750
step over yeah something weird<font color="#CCCCCC"> ok</font>

105
00:06:31,050 --> 00:06:40,440
demo effect<font color="#CCCCCC"> ok is the menu toolbar</font><font color="#E5E5E5"> the</font>

106
00:06:36,750 --> 00:06:42,810
context<font color="#E5E5E5"> menu as well so while debugging</font>

107
00:06:40,440 --> 00:06:46,440
we can right-click<font color="#E5E5E5"> and inspect some</font>

108
00:06:42,810 --> 00:06:49,250
stuff so we can<font color="#E5E5E5"> we have this little menu</font>

109
00:06:46,440 --> 00:06:52,199
debug and we can actually<font color="#E5E5E5"> add</font>

110
00:06:49,250 --> 00:06:56,000
<font color="#E5E5E5">breakpoints here or remove them also</font>

111
00:06:52,199 --> 00:07:03,210
with some shortcuts<font color="#CCCCCC"> ctrl V does the same</font>

112
00:06:56,000 --> 00:07:07,680
<font color="#E5E5E5">RF</font><font color="#CCCCCC"> to we can actually go</font><font color="#E5E5E5"> to these lines</font>

113
00:07:03,210 --> 00:07:12,210
so<font color="#E5E5E5"> continue until this line and also we</font>

114
00:07:07,680 --> 00:07:14,190
could define to go to the air IP so it

115
00:07:12,210 --> 00:07:19,758
set it here so it doesn't<font color="#E5E5E5"> continue just</font>

116
00:07:14,190 --> 00:07:19,759
<font color="#E5E5E5">change it to be there and</font><font color="#CCCCCC"> goes</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> ok</font>

117
00:07:20,599 --> 00:07:26,870
for the real widgets<font color="#E5E5E5"> so we have the</font>

118
00:07:23,940 --> 00:07:30,330
registers widget here<font color="#E5E5E5"> we see all the</font>

119
00:07:26,870 --> 00:07:32,969
registers on<font color="#E5E5E5"> the side we can go here and</font>

120
00:07:30,330 --> 00:07:37,258
<font color="#E5E5E5">change the registers so if we look at</font>

121
00:07:32,969 --> 00:07:41,219
<font color="#E5E5E5">our IP we can I don't</font><font color="#CCCCCC"> know</font>

122
00:07:37,259 --> 00:07:44,909
<font color="#CCCCCC">select this address here and go to</font><font color="#E5E5E5"> the</font>

123
00:07:41,219 --> 00:07:48,180
<font color="#E5E5E5">our IP and change it and just press</font>

124
00:07:44,909 --> 00:07:51,240
<font color="#E5E5E5">ENTER and each it goes there so</font><font color="#CCCCCC"> you can</font>

125
00:07:48,180 --> 00:07:54,589
<font color="#E5E5E5">just change the</font><font color="#CCCCCC"> registers here</font><font color="#E5E5E5"> and it</font>

126
00:07:51,240 --> 00:07:54,589
will change automatically

127
00:07:56,990 --> 00:08:01,980
we have the stack<font color="#E5E5E5"> widget here to look at</font>

128
00:08:01,380 --> 00:08:04,740
the stack

129
00:08:01,980 --> 00:08:10,140
<font color="#E5E5E5">you can seek to</font><font color="#CCCCCC"> these offset on the</font>

130
00:08:04,740 --> 00:08:13,920
<font color="#E5E5E5">stack or just add it to stack value</font><font color="#CCCCCC"> you</font>

131
00:08:10,140 --> 00:08:18,810
<font color="#CCCCCC">has some colors still for</font><font color="#E5E5E5"> the support on</font>

132
00:08:13,920 --> 00:08:22,440
colors would<font color="#E5E5E5"> be nice or</font><font color="#CCCCCC"> else the</font>

133
00:08:18,810 --> 00:08:24,630
<font color="#E5E5E5">breakpoints registers so actually</font>

134
00:08:22,440 --> 00:08:31,230
<font color="#E5E5E5">previously I added this</font><font color="#CCCCCC"> breakpoint</font>

135
00:08:24,630 --> 00:08:35,909
somewhere and so it's<font color="#E5E5E5"> there added on the</font>

136
00:08:31,230 --> 00:08:37,710
<font color="#E5E5E5">breakpoint list and I can add new</font>

137
00:08:35,909 --> 00:08:46,530
<font color="#E5E5E5">breakpoints so I could add the</font>

138
00:08:37,710 --> 00:08:50,040
breakpoint at somewhere else and it adds

139
00:08:46,530 --> 00:08:57,089
there or delete all the breakpoints<font color="#CCCCCC"> also</font>

140
00:08:50,040 --> 00:09:03,329
toggle<font color="#CCCCCC"> the breakpoint we try to</font><font color="#E5E5E5"> okay the</font>

141
00:08:57,090 --> 00:09:06,930
<font color="#E5E5E5">back trace menu shows all your batteries</font>

142
00:09:03,330 --> 00:09:10,320
and you can actually<font color="#E5E5E5"> as all the menus</font>

143
00:09:06,930 --> 00:09:13,290
you<font color="#CCCCCC"> can just go to windows and on</font><font color="#E5E5E5"> the</font>

144
00:09:10,320 --> 00:09:20,690
debug submenu you get all the registers

145
00:09:13,290 --> 00:09:20,689
for<font color="#CCCCCC"> the debug windows</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> batteries</font>

146
00:09:22,550 --> 00:09:28,530
register references menu<font color="#E5E5E5"> you can look at</font>

147
00:09:26,040 --> 00:09:31,050
the registers and<font color="#E5E5E5"> copy the register</font>

148
00:09:28,530 --> 00:09:35,250
value of the register reference<font color="#E5E5E5"> and as</font>

149
00:09:31,050 --> 00:09:37,859
the you<font color="#CCCCCC"> also saw these registers menu</font>

150
00:09:35,250 --> 00:09:40,590
<font color="#E5E5E5">before but here we have a list</font><font color="#CCCCCC"> of</font>

151
00:09:37,860 --> 00:09:44,280
registers we can filter by some

152
00:09:40,590 --> 00:09:46,980
registers this could be useful in in

153
00:09:44,280 --> 00:09:48,900
architectures with a huge number<font color="#CCCCCC"> of</font>

154
00:09:46,980 --> 00:09:52,170
registers you want to filter<font color="#CCCCCC"> by some</font>

155
00:09:48,900 --> 00:09:57,110
type of registers or something

156
00:09:52,170 --> 00:10:03,469
and finally can look at the memory<font color="#CCCCCC"> Maps</font>

157
00:09:57,110 --> 00:10:07,980
as usual and just seek to the stack or

158
00:10:03,470 --> 00:10:12,960
<font color="#CCCCCC">to these map members</font><font color="#E5E5E5"> okay</font>

159
00:10:07,980 --> 00:10:17,220
so we can actually<font color="#E5E5E5"> look at binary that</font>

160
00:10:12,960 --> 00:10:21,480
shark is showed you on the on this

161
00:10:17,220 --> 00:10:26,190
<font color="#E5E5E5">presentation of</font><font color="#CCCCCC"> off cutter</font><font color="#E5E5E5"> so let's look</font>

162
00:10:21,480 --> 00:10:30,180
at these binary<font color="#E5E5E5"> by</font><font color="#CCCCCC"> megabits thank</font><font color="#E5E5E5"> you</font>

163
00:10:26,190 --> 00:10:34,080
<font color="#E5E5E5">megabits for the binary</font><font color="#CCCCCC"> and we can</font>

164
00:10:30,180 --> 00:10:39,079
<font color="#E5E5E5">actually this beginner so we can just go</font>

165
00:10:34,080 --> 00:10:42,540
to<font color="#CCCCCC"> main as well and if you remember it</font>

166
00:10:39,080 --> 00:10:44,070
asks you<font color="#CCCCCC"> for an input and then</font><font color="#E5E5E5"> depending</font>

167
00:10:42,540 --> 00:10:46,709
on whether you are input satisfy

168
00:10:44,070 --> 00:10:49,230
something<font color="#CCCCCC"> it will</font><font color="#E5E5E5"> say success or wrong</font>

169
00:10:46,710 --> 00:10:53,670
argument<font color="#CCCCCC"> and this function</font><font color="#E5E5E5"> was done in</font>

170
00:10:49,230 --> 00:10:55,530
<font color="#CCCCCC">is sim beat</font><font color="#E5E5E5"> okay and we can imagine if</font>

171
00:10:53,670 --> 00:10:59,069
we don't know if this<font color="#CCCCCC"> is malware</font><font color="#E5E5E5"> or</font>

172
00:10:55,530 --> 00:11:02,850
something we just want to emulate<font color="#E5E5E5"> a part</font>

173
00:10:59,070 --> 00:11:06,440
<font color="#E5E5E5">of the code we can just look at this so</font>

174
00:11:02,850 --> 00:11:09,420
this<font color="#CCCCCC"> seems like it's copying</font><font color="#E5E5E5"> and then</font>

175
00:11:06,440 --> 00:11:11,670
there's this string here there's an

176
00:11:09,420 --> 00:11:14,550
operation<font color="#E5E5E5"> rotating and and it compares</font>

177
00:11:11,670 --> 00:11:17,189
<font color="#CCCCCC">with that with</font><font color="#E5E5E5"> our argument so you can</font>

178
00:11:14,550 --> 00:11:18,810
just instead<font color="#CCCCCC"> of doing calculations we</font>

179
00:11:17,190 --> 00:11:21,300
are lazy we don't know what<font color="#CCCCCC"> these</font><font color="#E5E5E5"> does</font>

180
00:11:18,810 --> 00:11:30,319
<font color="#E5E5E5">you can just start emulating the code</font>

181
00:11:21,300 --> 00:11:30,319
here<font color="#E5E5E5"> and start emulation and</font>

182
00:11:35,500 --> 00:11:45,140
you can start the emulation<font color="#CCCCCC"> okay so we</font>

183
00:11:41,390 --> 00:11:56,180
<font color="#CCCCCC">are</font><font color="#E5E5E5"> here we</font><font color="#CCCCCC"> can just</font><font color="#E5E5E5"> step step step okay</font>

184
00:11:45,140 --> 00:12:01,520
and after the push if we step<font color="#E5E5E5"> okay Devo</font>

185
00:11:56,180 --> 00:12:04,239
<font color="#E5E5E5">effect</font><font color="#CCCCCC"> oh this is nice okay let's test</font>

186
00:12:01,520 --> 00:12:04,240
<font color="#E5E5E5">it</font><font color="#CCCCCC"> today</font>

187
00:12:11,160 --> 00:12:14,850
let's try with<font color="#CCCCCC"> them</font>

188
00:12:27,170 --> 00:12:34,680
so I'm just debugging now<font color="#E5E5E5"> and putting a</font>

189
00:12:31,079 --> 00:12:38,550
breakpoint there before the call to the

190
00:12:34,680 --> 00:12:42,569
rotation and so I'll<font color="#E5E5E5"> just continue and</font>

191
00:12:38,550 --> 00:12:44,910
it stops<font color="#CCCCCC"> because I didn't give any</font>

192
00:12:42,569 --> 00:12:46,949
<font color="#E5E5E5">argument that's fine actually because I</font>

193
00:12:44,910 --> 00:12:49,620
forgot<font color="#E5E5E5"> to show you another feature so if</font>

194
00:12:46,949 --> 00:12:53,130
you go<font color="#E5E5E5"> to the Preferences menu</font><font color="#CCCCCC"> there's a</font>

195
00:12:49,620 --> 00:12:54,839
deep<font color="#E5E5E5"> except a debug submenu</font><font color="#CCCCCC"> and you can</font>

196
00:12:53,130 --> 00:12:57,449
provide the arguments to<font color="#E5E5E5"> the program</font>

197
00:12:54,839 --> 00:13:02,069
here<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> just to give a flag</font><font color="#CCCCCC"> AHA</font>

198
00:12:57,449 --> 00:13:04,949
<font color="#E5E5E5">and let's see what happens now so it</font>

199
00:13:02,069 --> 00:13:11,160
<font color="#E5E5E5">should run the program now with this new</font>

200
00:13:04,949 --> 00:13:13,170
argument<font color="#CCCCCC"> okay and if we continue it</font>

201
00:13:11,160 --> 00:13:17,730
stopped at our breakpoint<font color="#E5E5E5"> it's fine and</font>

202
00:13:13,170 --> 00:13:19,800
if we step now<font color="#CCCCCC"> ok so our argument</font><font color="#E5E5E5"> is</font>

203
00:13:17,730 --> 00:13:22,019
actually was pushed before

204
00:13:19,800 --> 00:13:23,699
and as megabits which was the string

205
00:13:22,019 --> 00:13:26,490
<font color="#E5E5E5">that</font><font color="#CCCCCC"> sit in here</font>

206
00:13:23,699 --> 00:13:29,609
<font color="#E5E5E5">pushed to the stack as</font><font color="#CCCCCC"> well okay so if</font>

207
00:13:26,490 --> 00:13:34,110
<font color="#E5E5E5">we just go to the to the line after</font><font color="#CCCCCC"> the</font>

208
00:13:29,610 --> 00:13:38,519
<font color="#CCCCCC">rotation</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can just divide continue</font>

209
00:13:34,110 --> 00:13:41,069
until this line<font color="#E5E5E5"> and refresh our stack we</font>

210
00:13:38,519 --> 00:13:46,199
<font color="#E5E5E5">actually see that actually perform the</font>

211
00:13:41,069 --> 00:13:57,569
rotation<font color="#E5E5E5"> and we can now use</font><font color="#CCCCCC"> it to to</font>

212
00:13:46,199 --> 00:14:00,240
solve our<font color="#E5E5E5"> problem</font><font color="#CCCCCC"> ok ok what</font><font color="#E5E5E5"> major</font>

213
00:13:57,569 --> 00:14:03,349
issues or what issues I faced while

214
00:14:00,240 --> 00:14:08,790
doing this<font color="#E5E5E5"> so as you noticed just now</font>

215
00:14:03,350 --> 00:14:12,269
the stdio<font color="#E5E5E5"> is still on the console so</font>

216
00:14:08,790 --> 00:14:15,599
this is because on how we<font color="#E5E5E5"> handled the</font>

217
00:14:12,269 --> 00:14:18,170
<font color="#CCCCCC">radare functionalities in</font><font color="#E5E5E5"> cutter so we</font>

218
00:14:15,600 --> 00:14:22,050
<font color="#CCCCCC">have a single</font><font color="#E5E5E5"> thread in cutter and we</font>

219
00:14:18,170 --> 00:14:26,689
actually natively<font color="#E5E5E5"> have</font><font color="#CCCCCC"> rather inside and</font>

220
00:14:22,050 --> 00:14:34,559
so to<font color="#E5E5E5"> handle the stdio</font>

221
00:14:26,689 --> 00:14:35,339
<font color="#E5E5E5">if the program is having STD in asking</font>

222
00:14:34,559 --> 00:14:40,709
for<font color="#CCCCCC"> it</font>

223
00:14:35,340 --> 00:14:44,120
<font color="#E5E5E5">it it will block cutter so if you do a</font>

224
00:14:40,710 --> 00:14:46,860
CD<font color="#E5E5E5"> in it's still not working but</font>

225
00:14:44,120 --> 00:14:48,990
recently<font color="#CCCCCC"> flocking had</font><font color="#E5E5E5"> the nice idea how</font>

226
00:14:46,860 --> 00:14:52,130
to solve this<font color="#E5E5E5"> and probably</font><font color="#CCCCCC"> it should be</font>

227
00:14:48,990 --> 00:14:55,410
fixed<font color="#E5E5E5"> very soon</font>

228
00:14:52,130 --> 00:14:58,080
another problem<font color="#E5E5E5"> was with bit race so if</font>

229
00:14:55,410 --> 00:15:02,579
you don't<font color="#CCCCCC"> help it</font><font color="#E5E5E5"> race only allows so to</font>

230
00:14:58,080 --> 00:15:06,210
a debugging<font color="#CCCCCC"> a process being debugged</font>

231
00:15:02,580 --> 00:15:09,090
<font color="#E5E5E5">only and allows for</font><font color="#CCCCCC"> a trace to trace it</font>

232
00:15:06,210 --> 00:15:11,760
a tracer to trace it trace the tread<font color="#E5E5E5"> and</font>

233
00:15:09,090 --> 00:15:16,250
<font color="#CCCCCC">so in a multiple thread that</font><font color="#E5E5E5"> the</font>

234
00:15:11,760 --> 00:15:19,260
environment like<font color="#E5E5E5"> you like cutter if</font>

235
00:15:16,250 --> 00:15:21,420
<font color="#E5E5E5">several threads are asking the process</font>

236
00:15:19,260 --> 00:15:23,460
for their addresses it won't give them

237
00:15:21,420 --> 00:15:26,819
<font color="#E5E5E5">the registers because only one</font><font color="#CCCCCC"> thread</font>

238
00:15:23,460 --> 00:15:30,990
can<font color="#E5E5E5"> debug it</font><font color="#CCCCCC"> and so also for him with</font>

239
00:15:26,820 --> 00:15:33,540
this<font color="#E5E5E5"> bit trace</font><font color="#CCCCCC"> wrapper</font><font color="#E5E5E5"> allows us to</font>

240
00:15:30,990 --> 00:15:36,710
actually<font color="#E5E5E5"> do this and it should be</font>

241
00:15:33,540 --> 00:15:41,189
<font color="#E5E5E5">included in cutter</font><font color="#CCCCCC"> very soon as well</font>

242
00:15:36,710 --> 00:15:44,160
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> so what else</font><font color="#CCCCCC"> did</font><font color="#E5E5E5"> I do during the</font>

243
00:15:41,190 --> 00:15:46,800
<font color="#CCCCCC">g-shock</font><font color="#E5E5E5"> so we all know</font><font color="#CCCCCC"> well as</font><font color="#E5E5E5"> well and</font>

244
00:15:44,160 --> 00:15:48,569
in the<font color="#E5E5E5"> last part of the</font><font color="#CCCCCC"> ji-suk I</font>

245
00:15:46,800 --> 00:15:48,930
implemented<font color="#E5E5E5"> some features</font><font color="#CCCCCC"> in as well as</font>

246
00:15:48,570 --> 00:15:54,480
well

247
00:15:48,930 --> 00:15:56,489
so now breakpoints<font color="#E5E5E5"> also working as</font><font color="#CCCCCC"> ill</font>

248
00:15:54,480 --> 00:15:58,860
<font color="#CCCCCC">so if you continue as well the execution</font>

249
00:15:56,490 --> 00:16:03,330
<font color="#E5E5E5">it will stop in your regular breakpoints</font>

250
00:15:58,860 --> 00:16:06,360
that you introduced in<font color="#E5E5E5"> rather okay we</font>

251
00:16:03,330 --> 00:16:09,450
also added<font color="#CCCCCC"> these AEC see continued until</font>

252
00:16:06,360 --> 00:16:12,570
call in a<font color="#E5E5E5"> zeal which could be</font><font color="#CCCCCC"> useful and</font>

253
00:16:09,450 --> 00:16:14,430
it was nice to<font color="#CCCCCC"> introduce this we had</font>

254
00:16:12,570 --> 00:16:17,820
these<font color="#E5E5E5"> continued until his call continue</font>

255
00:16:14,430 --> 00:16:20,280
until main or address we added also

256
00:16:17,820 --> 00:16:24,600
<font color="#CCCCCC">continue until call to the</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> sealed</font>

257
00:16:20,280 --> 00:16:27,240
execution<font color="#CCCCCC"> and finally since</font><font color="#E5E5E5"> sometimes</font>

258
00:16:24,600 --> 00:16:29,910
the<font color="#CCCCCC"> Ezreal execution would not would</font>

259
00:16:27,240 --> 00:16:34,890
<font color="#CCCCCC">slide on invalid instructions forever</font><font color="#E5E5E5"> we</font>

260
00:16:29,910 --> 00:16:37,350
<font color="#E5E5E5">added and</font><font color="#CCCCCC"> variable to to break execution</font>

261
00:16:34,890 --> 00:16:39,750
of<font color="#CCCCCC"> as ill</font><font color="#E5E5E5"> on invalid variables so you</font>

262
00:16:37,350 --> 00:16:43,980
can just do<font color="#E5E5E5"> this</font><font color="#CCCCCC"> and it will stop</font>

263
00:16:39,750 --> 00:16:45,900
execution as you reach it<font color="#E5E5E5"> okay</font>

264
00:16:43,980 --> 00:16:49,110
<font color="#E5E5E5">I'd like to thank you all</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the</font>

265
00:16:45,900 --> 00:16:52,050
<font color="#CCCCCC">attention and</font><font color="#E5E5E5"> my mentors on this project</font>

266
00:16:49,110 --> 00:17:01,380
<font color="#CCCCCC">Sark is Florian</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> machen</font><font color="#E5E5E5"> so thank you</font>

267
00:16:52,050 --> 00:17:03,800
all<font color="#CCCCCC"> for the support so if there's any</font>

268
00:17:01,380 --> 00:17:03,800
questions

269
00:17:12,440 --> 00:17:24,050
hello<font color="#CCCCCC"> I is the the</font><font color="#E5E5E5"> bagger also supported</font>

270
00:17:19,560 --> 00:17:27,960
on other<font color="#CCCCCC"> architectures that</font><font color="#E5E5E5"> are not x85</font>

271
00:17:24,050 --> 00:17:31,020
x86 paste<font color="#E5E5E5"> so depending on the plug-in</font>

272
00:17:27,960 --> 00:17:34,890
you use this is a radar s debugger<font color="#E5E5E5"> right</font>

273
00:17:31,020 --> 00:17:36,950
so if you use their<font color="#CCCCCC"> plugins this</font><font color="#E5E5E5"> is the</font>

274
00:17:34,890 --> 00:17:40,230
plug-in<font color="#CCCCCC"> I show you is the native Linux</font>

275
00:17:36,950 --> 00:17:43,070
<font color="#E5E5E5">debugging</font><font color="#CCCCCC"> plugin so depends</font><font color="#E5E5E5"> on what you</font>

276
00:17:40,230 --> 00:17:47,490
use<font color="#CCCCCC"> okay thank you</font><font color="#E5E5E5"> yeah</font>

277
00:17:43,070 --> 00:17:49,550
any other question<font color="#CCCCCC"> okay thank you</font><font color="#E5E5E5"> thank</font>

278
00:17:47,490 --> 00:17:49,550
you

279
00:17:50,090 --> 00:17:53,349
[Applause]

280
00:18:38,960 --> 00:18:43,260
yeah

281
00:18:40,450 --> 00:18:43,260
just

282
00:19:24,669 --> 00:19:32,990
<font color="#E5E5E5">okay so hi</font><font color="#CCCCCC"> guys</font><font color="#E5E5E5"> I'm look at Myrtle now</font><font color="#CCCCCC"> a</font>

283
00:19:29,480 --> 00:19:35,809
college<font color="#E5E5E5"> student from Rome and I would</font>

284
00:19:32,990 --> 00:19:37,490
like<font color="#E5E5E5"> to talk about what I did in those</font>

285
00:19:35,809 --> 00:19:41,059
<font color="#E5E5E5">three months for</font><font color="#CCCCCC"> the google</font><font color="#E5E5E5"> Summer of</font>

286
00:19:37,490 --> 00:19:44,030
Code<font color="#E5E5E5"> my original task was the console</font>

287
00:19:41,059 --> 00:19:46,820
interface improvements<font color="#CCCCCC"> I had a lot of</font>

288
00:19:44,030 --> 00:19:49,850
things to do<font color="#CCCCCC"> but yeah I</font><font color="#E5E5E5"> didn't</font><font color="#CCCCCC"> manage to</font>

289
00:19:46,820 --> 00:19:54,020
do anything<font color="#E5E5E5"> what did I really spend time</font>

290
00:19:49,850 --> 00:19:56,719
on was graphs<font color="#E5E5E5"> and</font><font color="#CCCCCC"> Unicode and</font><font color="#E5E5E5"> a lot of</font>

291
00:19:54,020 --> 00:19:58,929
<font color="#CCCCCC">other small</font><font color="#E5E5E5"> fixes for the interface</font>

292
00:19:56,720 --> 00:20:02,000
<font color="#E5E5E5">which I'll show you in</font><font color="#CCCCCC"> a minute</font>

293
00:19:58,929 --> 00:20:05,150
let's start from<font color="#E5E5E5"> the graphs I worked on</font>

294
00:20:02,000 --> 00:20:08,840
the AG<font color="#E5E5E5"> Commons that they are the common</font>

295
00:20:05,150 --> 00:20:11,299
<font color="#E5E5E5">Sutro graphs in a common line</font><font color="#CCCCCC"> the</font>

296
00:20:08,840 --> 00:20:15,139
problem is<font color="#E5E5E5"> that this day all the AG help</font>

297
00:20:11,299 --> 00:20:19,940
<font color="#E5E5E5">it was a bit confusing</font><font color="#CCCCCC"> and unconscious</font>

298
00:20:15,140 --> 00:20:22,580
<font color="#E5E5E5">tent so we managed to find</font><font color="#CCCCCC"> the new</font>

299
00:20:19,940 --> 00:20:25,340
syntax<font color="#CCCCCC"> which is</font><font color="#E5E5E5"> a G then letter</font>

300
00:20:22,580 --> 00:20:27,740
specifying which kind of<font color="#E5E5E5"> graph you want</font>

301
00:20:25,340 --> 00:20:30,668
to draw and another letter specifying

302
00:20:27,740 --> 00:20:34,760
which what were format we<font color="#E5E5E5"> want to be</font>

303
00:20:30,669 --> 00:20:37,220
printed<font color="#CCCCCC"> in to the available graph types</font>

304
00:20:34,760 --> 00:20:40,100
and output formats are shown in<font color="#E5E5E5"> this</font>

305
00:20:37,220 --> 00:20:42,590
table<font color="#E5E5E5"> and yeah most of my work</font><font color="#CCCCCC"> was</font>

306
00:20:40,100 --> 00:20:45,850
making sure that<font color="#CCCCCC"> every graph type was</font>

307
00:20:42,590 --> 00:20:48,500
compatible<font color="#E5E5E5"> with every output format and</font>

308
00:20:45,850 --> 00:20:54,439
here you can see<font color="#E5E5E5"> some</font><font color="#CCCCCC"> examples some</font>

309
00:20:48,500 --> 00:20:59,150
<font color="#CCCCCC">examples on how</font><font color="#E5E5E5"> you can use this and the</font>

310
00:20:54,440 --> 00:21:02,780
result is that the new<font color="#E5E5E5"> AG helper is is</font>

311
00:20:59,150 --> 00:21:06,440
this<font color="#E5E5E5"> one which</font><font color="#CCCCCC"> is a</font><font color="#E5E5E5"> bit longer</font><font color="#CCCCCC"> but in my</font>

312
00:21:02,780 --> 00:21:09,580
opinion<font color="#E5E5E5"> it's better bit more consistent</font>

313
00:21:06,440 --> 00:21:13,309
and easier especially for<font color="#E5E5E5"> beginners</font><font color="#CCCCCC"> I</font>

314
00:21:09,580 --> 00:21:15,710
also worked<font color="#E5E5E5"> on improving the rendering</font>

315
00:21:13,309 --> 00:21:17,990
of jump tables in graphs<font color="#CCCCCC"> because before</font>

316
00:21:15,710 --> 00:21:21,020
<font color="#E5E5E5">if you had a jump</font><font color="#CCCCCC"> table in the graph it</font>

317
00:21:17,990 --> 00:21:22,669
rendered like this which resembles a bit

318
00:21:21,020 --> 00:21:26,000
<font color="#E5E5E5">a mother painting or something like that</font>

319
00:21:22,669 --> 00:21:29,450
<font color="#E5E5E5">which</font><font color="#CCCCCC"> is yeah it's beautiful but not</font>

320
00:21:26,000 --> 00:21:31,820
very functional<font color="#CCCCCC"> and now the same jump</font>

321
00:21:29,450 --> 00:21:33,650
jump<font color="#E5E5E5"> table is shown like this which is</font>

322
00:21:31,820 --> 00:21:38,689
<font color="#CCCCCC">more compact and</font>

323
00:21:33,650 --> 00:21:40,490
bit more readable<font color="#E5E5E5"> and mostly that's it</font>

324
00:21:38,690 --> 00:21:43,520
<font color="#CCCCCC">let's talk about now</font>

325
00:21:40,490 --> 00:21:47,750
utf-8<font color="#CCCCCC"> what's utf-8</font><font color="#E5E5E5"> with the fit is a way</font>

326
00:21:43,520 --> 00:21:51,020
<font color="#E5E5E5">of encoding</font><font color="#CCCCCC"> Unicode Carter's</font><font color="#E5E5E5"> he it gives</font>

327
00:21:47,750 --> 00:21:54,200
us four different ways of encoding a

328
00:21:51,020 --> 00:21:57,920
<font color="#E5E5E5">Carter by using from one to four bytes</font>

329
00:21:54,200 --> 00:22:00,380
<font color="#E5E5E5">and you can see that the how many bytes</font>

330
00:21:57,920 --> 00:22:02,960
are<font color="#CCCCCC"> going to use is indicated by the</font>

331
00:22:00,380 --> 00:22:05,150
number<font color="#CCCCCC"> of ones on the first</font><font color="#E5E5E5"> byte if</font>

332
00:22:02,960 --> 00:22:08,210
there is only<font color="#E5E5E5"> at</font><font color="#CCCCCC"> zero we encode</font><font color="#E5E5E5"> the</font>

333
00:22:05,150 --> 00:22:09,530
Carter on using only one byte but if

334
00:22:08,210 --> 00:22:12,820
there<font color="#E5E5E5"> are more for</font><font color="#CCCCCC"> example if they're</font>

335
00:22:09,530 --> 00:22:15,470
true we are using two bytes and<font color="#E5E5E5"> so on</font>

336
00:22:12,820 --> 00:22:20,240
<font color="#CCCCCC">utf-8 is the most common way of encoding</font>

337
00:22:15,470 --> 00:22:23,780
<font color="#CCCCCC">Unicode mostly for those two reasons the</font>

338
00:22:20,240 --> 00:22:27,110
<font color="#CCCCCC">first one being that if you if we we use</font>

339
00:22:23,780 --> 00:22:29,600
all the<font color="#E5E5E5"> four bytes we have up to 21 bits</font>

340
00:22:27,110 --> 00:22:32,600
for the encoding which is enough for<font color="#CCCCCC"> the</font>

341
00:22:29,600 --> 00:22:36,110
whole<font color="#E5E5E5"> Unicode the range of</font><font color="#CCCCCC"> codepoints</font>

342
00:22:32,600 --> 00:22:40,399
and also under most very important thing

343
00:22:36,110 --> 00:22:43,459
is that if<font color="#E5E5E5"> we encode the plain English</font>

344
00:22:40,400 --> 00:22:45,970
<font color="#E5E5E5">file using utf-8</font><font color="#CCCCCC"> the size of the file</font>

345
00:22:43,460 --> 00:22:50,960
will<font color="#E5E5E5"> not increase in fact because the</font>

346
00:22:45,970 --> 00:22:55,450
standard risky<font color="#E5E5E5"> cutters are all shown are</font>

347
00:22:50,960 --> 00:22:59,000
all<font color="#E5E5E5"> encoded using only one byte and</font>

348
00:22:55,450 --> 00:23:03,820
let's see an example<font color="#CCCCCC"> on</font><font color="#E5E5E5"> how encoding</font>

349
00:22:59,000 --> 00:23:06,950
works let's encode the sign for the<font color="#CCCCCC"> sent</font>

350
00:23:03,820 --> 00:23:10,520
we have to look up on the<font color="#E5E5E5"> Unicode tables</font>

351
00:23:06,950 --> 00:23:13,550
<font color="#CCCCCC">its codepoint which is a HM we convert</font>

352
00:23:10,520 --> 00:23:18,139
it to binary<font color="#E5E5E5"> and we see that we have to</font>

353
00:23:13,550 --> 00:23:20,090
use 8 bits<font color="#E5E5E5"> and so looking</font><font color="#CCCCCC"> here we can</font>

354
00:23:18,140 --> 00:23:23,900
see<font color="#E5E5E5"> that one byte is not enough we</font><font color="#CCCCCC"> have</font>

355
00:23:20,090 --> 00:23:27,679
<font color="#CCCCCC">to use two and as soon this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font>

356
00:23:23,900 --> 00:23:30,350
<font color="#E5E5E5">result</font><font color="#CCCCCC"> another example with a Euro sign</font>

357
00:23:27,680 --> 00:23:32,740
the<font color="#CCCCCC"> Euro</font><font color="#E5E5E5"> Simon has a coda point which is</font>

358
00:23:30,350 --> 00:23:37,010
much higher<font color="#E5E5E5"> it's true oh I see</font>

359
00:23:32,740 --> 00:23:41,540
so we need 14 bits to encode it<font color="#E5E5E5"> and in</font>

360
00:23:37,010 --> 00:23:44,090
interfaith that means<font color="#CCCCCC"> 3 bytes and said</font>

361
00:23:41,540 --> 00:23:44,750
it like<font color="#E5E5E5"> this it's it's a very</font><font color="#CCCCCC"> simple</font>

362
00:23:44,090 --> 00:23:46,820
actually

363
00:23:44,750 --> 00:23:48,169
doesn't seem complicated<font color="#E5E5E5"> but when we are</font>

364
00:23:46,820 --> 00:23:50,119
<font color="#E5E5E5">going to implement</font>

365
00:23:48,169 --> 00:23:52,220
to implement<font color="#CCCCCC"> the</font><font color="#E5E5E5"> support read we find</font>

366
00:23:50,119 --> 00:23:54,320
that there are<font color="#E5E5E5"> a lot of problems</font><font color="#CCCCCC"> let's</font>

367
00:23:52,220 --> 00:23:58,580
start from<font color="#E5E5E5"> the first</font><font color="#CCCCCC"> obvious obvious one</font>

368
00:23:54,320 --> 00:24:00,918
is the<font color="#CCCCCC"> fact</font><font color="#E5E5E5"> that we don't know if a</font>

369
00:23:58,580 --> 00:24:05,389
<font color="#E5E5E5">character</font><font color="#CCCCCC"> we not have the grantee that a</font>

370
00:24:00,919 --> 00:24:08,029
<font color="#E5E5E5">Carter is a single bite</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> that this</font>

371
00:24:05,389 --> 00:24:12,228
<font color="#E5E5E5">means that if I have a string I want to</font>

372
00:24:08,029 --> 00:24:14,210
print and there are some<font color="#E5E5E5"> UTF utf-8</font>

373
00:24:12,229 --> 00:24:18,289
<font color="#CCCCCC">carter's inside this thing</font>

374
00:24:14,210 --> 00:24:21,139
the the<font color="#E5E5E5"> bite number</font><font color="#CCCCCC"> 10</font><font color="#E5E5E5"> will not be</font>

375
00:24:18,289 --> 00:24:24,799
rendered<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the 10th</font><font color="#E5E5E5"> cell of the</font>

376
00:24:21,139 --> 00:24:28,279
terminal we just don't<font color="#E5E5E5"> know and another</font>

377
00:24:24,799 --> 00:24:30,918
<font color="#E5E5E5">problem is</font><font color="#CCCCCC"> that C string functions do</font>

378
00:24:28,279 --> 00:24:34,549
<font color="#E5E5E5">not know about utf-8 and so the result</font>

379
00:24:30,919 --> 00:24:36,979
is<font color="#E5E5E5"> that the second string is longer than</font>

380
00:24:34,549 --> 00:24:41,539
the first one because<font color="#E5E5E5"> as we saw the the</font>

381
00:24:36,979 --> 00:24:43,159
Euro sign uses<font color="#E5E5E5"> three bytes so so the</font>

382
00:24:41,539 --> 00:24:45,679
result of this is<font color="#CCCCCC"> that only auto</font>

383
00:24:43,159 --> 00:24:48,169
<font color="#E5E5E5">collisions</font><font color="#CCCCCC"> in the canvas were messed up</font>

384
00:24:45,679 --> 00:24:49,940
<font color="#E5E5E5">if there was a utf-8 character because</font>

385
00:24:48,169 --> 00:24:55,279
there were those invisible control bytes

386
00:24:49,940 --> 00:24:59,179
for utf-8 to solve this<font color="#E5E5E5"> I had to</font>

387
00:24:55,279 --> 00:25:03,019
implement<font color="#E5E5E5"> almost all of the canvas code</font>

388
00:24:59,179 --> 00:25:04,820
<font color="#E5E5E5">to to support for checking for those</font>

389
00:25:03,019 --> 00:25:07,580
<font color="#CCCCCC">invisible characters and take into</font>

390
00:25:04,820 --> 00:25:10,879
<font color="#E5E5E5">account for</font><font color="#CCCCCC"> them when moving</font><font color="#E5E5E5"> a cursor or</font>

391
00:25:07,580 --> 00:25:14,080
writing<font color="#CCCCCC"> something and also to support</font>

392
00:25:10,879 --> 00:25:18,199
dynamic<font color="#E5E5E5"> length lines in the canvas</font>

393
00:25:14,080 --> 00:25:22,070
<font color="#E5E5E5">because well it to fit cultures could be</font>

394
00:25:18,200 --> 00:25:22,940
more bytes<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> needed more</font><font color="#E5E5E5"> space to to</font>

395
00:25:22,070 --> 00:25:27,559
support<font color="#CCCCCC"> for them</font>

396
00:25:22,940 --> 00:25:31,729
another problem with utf-8 is that some

397
00:25:27,559 --> 00:25:34,309
you decode languages have full width

398
00:25:31,729 --> 00:25:37,429
<font color="#E5E5E5">chart sets that means that they'll</font>

399
00:25:34,309 --> 00:25:39,710
<font color="#E5E5E5">Carter occupy</font><font color="#CCCCCC"> two cells instead</font><font color="#E5E5E5"> of one</font>

400
00:25:37,429 --> 00:25:42,739
as you<font color="#CCCCCC"> can see from</font><font color="#E5E5E5"> the image data</font>

401
00:25:39,710 --> 00:25:45,739
that's Chinese string and each<font color="#E5E5E5"> Carter's</font>

402
00:25:42,739 --> 00:25:49,249
each character is<font color="#CCCCCC"> true cells</font><font color="#E5E5E5"> instead of</font>

403
00:25:45,739 --> 00:25:51,799
one<font color="#E5E5E5"> and this is a problem again for</font>

404
00:25:49,249 --> 00:25:54,109
example<font color="#CCCCCC"> if you see</font><font color="#E5E5E5"> that in old version</font>

405
00:25:51,799 --> 00:25:57,200
of<font color="#CCCCCC"> Rada</font><font color="#E5E5E5"> if you insert the Chinese common</font>

406
00:25:54,109 --> 00:25:59,509
in<font color="#E5E5E5"> the graph it would be a bit messed up</font>

407
00:25:57,200 --> 00:26:01,400
both the line on which insert the

408
00:25:59,509 --> 00:26:03,320
comment but also the

409
00:26:01,400 --> 00:26:06,800
below and many other<font color="#E5E5E5"> things in graph</font>

410
00:26:03,320 --> 00:26:09,620
were not working<font color="#E5E5E5"> correctly</font><font color="#CCCCCC"> and so for to</font>

411
00:26:06,800 --> 00:26:12,080
<font color="#E5E5E5">solve this every time you</font><font color="#CCCCCC"> insert an OT</font>

412
00:26:09,620 --> 00:26:15,260
<font color="#CCCCCC">fate cutter</font><font color="#E5E5E5"> we need to calculate its</font>

413
00:26:12,080 --> 00:26:17,510
<font color="#E5E5E5">codepoint and look up on the unicode</font>

414
00:26:15,260 --> 00:26:20,350
table if it's a<font color="#CCCCCC"> full-width chart set or</font>

415
00:26:17,510 --> 00:26:22,340
<font color="#CCCCCC">not and take</font><font color="#E5E5E5"> into account this</font>

416
00:26:20,350 --> 00:26:22,969
unfortunately<font color="#E5E5E5"> the</font><font color="#CCCCCC"> problem are not</font>

417
00:26:22,340 --> 00:26:26,959
finished

418
00:26:22,970 --> 00:26:29,990
there are<font color="#E5E5E5"> unicode cutters that</font><font color="#CCCCCC"> key can</font>

419
00:26:26,960 --> 00:26:31,250
be combined together<font color="#E5E5E5"> to show very</font>

420
00:26:29,990 --> 00:26:33,530
complex<font color="#CCCCCC"> cutters</font>

421
00:26:31,250 --> 00:26:36,650
<font color="#CCCCCC">i will show you in a minute</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> i mean</font>

422
00:26:33,530 --> 00:26:40,070
<font color="#E5E5E5">you can try it</font><font color="#CCCCCC"> on your</font><font color="#E5E5E5"> own</font><font color="#CCCCCC"> on the</font>

423
00:26:36,650 --> 00:26:43,520
terminal if<font color="#E5E5E5"> you write printf</font><font color="#CCCCCC"> you can</font>

424
00:26:40,070 --> 00:26:47,480
specify it or print a<font color="#CCCCCC"> unicode character</font>

425
00:26:43,520 --> 00:26:50,150
using<font color="#E5E5E5"> slash</font><font color="#CCCCCC"> shoe and then by writing the</font>

426
00:26:47,480 --> 00:26:54,100
code a point of the<font color="#CCCCCC"> cutter for</font><font color="#E5E5E5"> example</font>

427
00:26:50,150 --> 00:26:58,340
if I write<font color="#E5E5E5"> to OAC that's the Euro sign</font>

428
00:26:54,100 --> 00:27:01,750
<font color="#E5E5E5">okay but for</font><font color="#CCCCCC"> example there are some</font>

429
00:26:58,340 --> 00:27:06,470
<font color="#E5E5E5">characters which behave strangely like</font><font color="#CCCCCC"> a</font>

430
00:27:01,750 --> 00:27:10,070
<font color="#CCCCCC">3-3-7 which is like a slash but we will</font>

431
00:27:06,470 --> 00:27:15,740
see<font color="#E5E5E5"> that if</font><font color="#CCCCCC"> we print the Euro sign just</font>

432
00:27:10,070 --> 00:27:19,399
before the slash we get a slashed<font color="#E5E5E5"> Euro</font>

433
00:27:15,740 --> 00:27:22,250
sign but it's not in here there<font color="#E5E5E5"> are many</font>

434
00:27:19,400 --> 00:27:26,420
things<font color="#E5E5E5"> that can</font><font color="#CCCCCC"> go wrong</font><font color="#E5E5E5"> like for</font>

435
00:27:22,250 --> 00:27:31,070
<font color="#CCCCCC">example there are these SS Euro sign we</font>

436
00:27:26,420 --> 00:27:38,830
can also do double underline double

437
00:27:31,070 --> 00:27:47,000
slash<font color="#CCCCCC"> to Euro sign</font><font color="#E5E5E5"> and this thing if we</font>

438
00:27:38,830 --> 00:27:49,760
if we<font color="#E5E5E5"> see how many bytes we used we see</font>

439
00:27:47,000 --> 00:27:54,590
that only<font color="#CCCCCC"> to</font><font color="#E5E5E5"> write one character we use</font>

440
00:27:49,760 --> 00:27:56,960
the<font color="#CCCCCC"> nine bytes so it is a deal it is a</font>

441
00:27:54,590 --> 00:27:59,740
bit difficult<font color="#E5E5E5"> there is still not</font><font color="#CCCCCC"> so</font>

442
00:27:56,960 --> 00:28:02,870
solution<font color="#CCCCCC"> for this problem because</font><font color="#E5E5E5"> well</font>

443
00:27:59,740 --> 00:28:04,790
there are many things<font color="#E5E5E5"> to</font><font color="#CCCCCC"> check and it</font>

444
00:28:02,870 --> 00:28:07,520
wasn't<font color="#CCCCCC"> a me impurity issue but</font><font color="#E5E5E5"> it's</font>

445
00:28:04,790 --> 00:28:11,149
future<font color="#E5E5E5"> work I will work on trying to</font>

446
00:28:07,520 --> 00:28:13,010
find<font color="#E5E5E5"> a solution</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> we haven't still</font>

447
00:28:11,150 --> 00:28:15,470
finish<font color="#E5E5E5"> another thing is that there are</font>

448
00:28:13,010 --> 00:28:19,310
some languages<font color="#CCCCCC"> that are</font><font color="#E5E5E5"> written right</font>

449
00:28:15,470 --> 00:28:21,460
like<font color="#CCCCCC"> Hebrew version and so on and this</font>

450
00:28:19,310 --> 00:28:24,409
<font color="#CCCCCC">is another issue we can solve because</font>

451
00:28:21,460 --> 00:28:27,860
most of the terminal emulators<font color="#E5E5E5"> do not</font>

452
00:28:24,410 --> 00:28:31,460
support right-to-left<font color="#E5E5E5"> so here we are we</font>

453
00:28:27,860 --> 00:28:35,449
are<font color="#E5E5E5"> bound to wait for for</font><font color="#CCCCCC"> this report</font>

454
00:28:31,460 --> 00:28:38,720
but enough talk<font color="#E5E5E5"> enough with talking</font>

455
00:28:35,450 --> 00:28:42,230
<font color="#E5E5E5">about text encoding which is boring for</font>

456
00:28:38,720 --> 00:28:45,740
<font color="#CCCCCC">everyone let's switch to</font><font color="#E5E5E5"> fancy stuff the</font>

457
00:28:42,230 --> 00:28:47,330
<font color="#E5E5E5">auto completion widget which is which is</font>

458
00:28:45,740 --> 00:28:49,220
mostly<font color="#CCCCCC"> eye-candy</font>

459
00:28:47,330 --> 00:28:51,439
<font color="#E5E5E5">engine is another way to do auto</font>

460
00:28:49,220 --> 00:28:55,460
completion in visual mode<font color="#E5E5E5"> it is a</font>

461
00:28:51,440 --> 00:28:57,500
completely<font color="#E5E5E5"> copied from whim and yeah</font>

462
00:28:55,460 --> 00:29:02,750
because<font color="#E5E5E5"> all user interfaces are copied</font>

463
00:28:57,500 --> 00:29:04,550
<font color="#CCCCCC">from other things and well the</font><font color="#E5E5E5"> only</font>

464
00:29:02,750 --> 00:29:07,400
drawback<font color="#CCCCCC"> is that it only works in visual</font>

465
00:29:04,550 --> 00:29:11,740
mode for now we we<font color="#E5E5E5"> are trying to</font>

466
00:29:07,400 --> 00:29:16,490
implement it<font color="#E5E5E5"> also</font><font color="#CCCCCC"> in the common line but</font>

467
00:29:11,740 --> 00:29:19,070
future<font color="#E5E5E5"> work I'll show you how that works</font>

468
00:29:16,490 --> 00:29:22,430
<font color="#CCCCCC">we just</font><font color="#E5E5E5"> open a file and go</font><font color="#CCCCCC"> to visual</font>

469
00:29:19,070 --> 00:29:25,189
<font color="#E5E5E5">mode then with the aoki we can bring up</font>

470
00:29:22,430 --> 00:29:28,460
<font color="#E5E5E5">the offset prompt and then by just</font>

471
00:29:25,190 --> 00:29:31,870
<font color="#CCCCCC">typing</font><font color="#E5E5E5"> tab we have this widget which can</font>

472
00:29:28,460 --> 00:29:36,440
be scrolled<font color="#E5E5E5"> and weaves just like Miam</font>

473
00:29:31,870 --> 00:29:38,750
<font color="#CCCCCC">the</font><font color="#E5E5E5"> only improvement of the auto</font>

474
00:29:36,440 --> 00:29:41,390
completion that were there before is

475
00:29:38,750 --> 00:29:44,720
that<font color="#E5E5E5"> now you can</font><font color="#CCCCCC"> autocomplete as you</font>

476
00:29:41,390 --> 00:29:49,460
type<font color="#CCCCCC"> you don't need to press tab each</font>

477
00:29:44,720 --> 00:29:52,070
time and it works<font color="#CCCCCC"> it also works in the</font>

478
00:29:49,460 --> 00:29:55,670
graph<font color="#E5E5E5"> in panels</font><font color="#CCCCCC"> I think there is</font><font color="#E5E5E5"> also</font>

479
00:29:52,070 --> 00:30:03,070
support<font color="#CCCCCC"> for for file opening completion</font>

480
00:29:55,670 --> 00:30:07,310
<font color="#E5E5E5">yeah there is and yeah</font><font color="#CCCCCC"> that's mostly it</font>

481
00:30:03,070 --> 00:30:15,520
<font color="#E5E5E5">some you know stuff</font><font color="#CCCCCC"> that I did is</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> Lea</font>

482
00:30:07,310 --> 00:30:19,879
dot lines let me show you let's go here

483
00:30:15,520 --> 00:30:21,920
<font color="#CCCCCC">to make you a nice example</font><font color="#E5E5E5"> so to have</font>

484
00:30:19,880 --> 00:30:26,320
dot lines in the graph<font color="#CCCCCC"> you have to</font>

485
00:30:21,920 --> 00:30:26,320
<font color="#CCCCCC">enable you utf-8</font>

486
00:30:27,520 --> 00:30:36,639
and also<font color="#CCCCCC"> nimble variable called</font><font color="#E5E5E5"> graph</font>

487
00:30:30,670 --> 00:30:40,930
dot dot<font color="#E5E5E5"> EDA and conditional branches</font>

488
00:30:36,640 --> 00:30:44,680
will<font color="#E5E5E5"> be shown dotted and backward edges</font>

489
00:30:40,930 --> 00:30:47,680
will<font color="#CCCCCC"> be shown as dashed that could be</font>

490
00:30:44,680 --> 00:30:51,250
useful to spot loops or backward<font color="#CCCCCC"> jump</font>

491
00:30:47,680 --> 00:30:55,290
<font color="#CCCCCC">ease jumps and instead</font><font color="#E5E5E5"> normal edges</font>

492
00:30:51,250 --> 00:30:58,810
<font color="#CCCCCC">known condition ones will not be</font><font color="#E5E5E5"> dot in</font>

493
00:30:55,290 --> 00:31:01,149
other things are yeah I worked on

494
00:30:58,810 --> 00:31:03,490
folding<font color="#E5E5E5"> some flags that were cluttering</font>

495
00:31:01,150 --> 00:31:05,650
<font color="#E5E5E5">too much of the screen space of this</font>

496
00:31:03,490 --> 00:31:09,940
assembly<font color="#E5E5E5"> like the</font><font color="#CCCCCC"> cross-references cloud</font>

497
00:31:05,650 --> 00:31:13,390
<font color="#E5E5E5">flats or the cases floods in case of</font>

498
00:31:09,940 --> 00:31:15,760
jump tables<font color="#CCCCCC"> I worked on</font><font color="#E5E5E5"> claw rising many</font>

499
00:31:13,390 --> 00:31:19,600
comments and<font color="#E5E5E5"> improving a bit color</font>

500
00:31:15,760 --> 00:31:23,530
palettes<font color="#CCCCCC"> I worked on showing Unicode</font>

501
00:31:19,600 --> 00:31:28,740
strings<font color="#E5E5E5"> real universe things in the</font>

502
00:31:23,530 --> 00:31:33,670
assembly<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> this happened a few</font><font color="#CCCCCC"> times</font>

503
00:31:28,740 --> 00:31:37,090
<font color="#CCCCCC">also</font><font color="#E5E5E5"> yeah now you can load signatures</font>

504
00:31:33,670 --> 00:31:40,750
signatures<font color="#E5E5E5"> using the asterisk</font><font color="#CCCCCC"> glob</font><font color="#E5E5E5"> which</font>

505
00:31:37,090 --> 00:31:44,740
is which<font color="#E5E5E5"> just recursively searches in</font>

506
00:31:40,750 --> 00:31:48,250
the<font color="#E5E5E5"> directory</font><font color="#CCCCCC"> 3 for signatures and yeah</font>

507
00:31:44,740 --> 00:31:52,780
many many small things<font color="#E5E5E5"> and bugs in the</font>

508
00:31:48,250 --> 00:31:55,890
interfaces<font color="#CCCCCC"> I would like</font><font color="#E5E5E5"> to thank a lot</font>

509
00:31:52,780 --> 00:31:58,930
<font color="#CCCCCC">my mentors which helped me a lot and</font>

510
00:31:55,890 --> 00:32:02,320
improved very<font color="#CCCCCC"> much</font><font color="#E5E5E5"> thanks to</font><font color="#CCCCCC"> the tips</font>

511
00:31:58,930 --> 00:32:04,860
and<font color="#E5E5E5"> in the whole data community</font><font color="#CCCCCC"> I had a</font>

512
00:32:02,320 --> 00:32:08,730
lot of fun a lot<font color="#CCCCCC"> of fun this summer</font>

513
00:32:04,860 --> 00:32:08,729
<font color="#E5E5E5">thank you thank you</font>

514
00:32:10,190 --> 00:32:17,059
[Applause]

515
00:32:13,759 --> 00:32:17,059
any question

516
00:32:26,429 --> 00:32:30,149
since you've copied the<font color="#CCCCCC"> v-mount to</font>

517
00:32:28,529 --> 00:32:34,950
completion<font color="#E5E5E5"> do you think it will be easy</font>

518
00:32:30,149 --> 00:32:37,978
<font color="#E5E5E5">to copy also like writing</font><font color="#CCCCCC"> tangey</font><font color="#E5E5E5"> and</font>

519
00:32:34,950 --> 00:32:40,519
going down<font color="#E5E5E5"> ten times</font><font color="#CCCCCC"> because they tend</font>

520
00:32:37,979 --> 00:32:46,950
to the death all<font color="#CCCCCC"> the time in visual mode</font>

521
00:32:40,519 --> 00:32:50,070
you are<font color="#E5E5E5"> talking about</font><font color="#CCCCCC"> oh yeah but yeah I</font>

522
00:32:46,950 --> 00:32:54,320
<font color="#CCCCCC">think it would be</font><font color="#E5E5E5"> possible yeah</font><font color="#CCCCCC"> okay</font>

523
00:32:50,070 --> 00:32:57,200
<font color="#CCCCCC">could be a nice feeder</font><font color="#E5E5E5"> okay thanks</font>

524
00:32:54,320 --> 00:33:00,299
right now the numbers are<font color="#CCCCCC"> used for</font>

525
00:32:57,200 --> 00:33:02,669
<font color="#CCCCCC">hotkeys they're following jams and so on</font>

526
00:33:00,299 --> 00:33:05,039
<font color="#E5E5E5">they can be</font><font color="#CCCCCC"> used for something</font><font color="#E5E5E5"> the</font>

527
00:33:02,669 --> 00:33:09,049
specific amount<font color="#E5E5E5"> of times the</font><font color="#CCCCCC"> next</font><font color="#E5E5E5"> page</font>

528
00:33:05,039 --> 00:33:09,049
<font color="#E5E5E5">or something like that more questions</font>

529
00:33:09,710 --> 00:33:19,359
<font color="#E5E5E5">okay thanks</font>

530
00:33:12,540 --> 00:33:19,359
[Applause]

531
00:33:55,820 --> 00:34:03,530
hello<font color="#E5E5E5"> yeah yeah</font>

532
00:34:14,339 --> 00:34:17,339
yeah

533
00:34:23,219 --> 00:34:29,219
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> hello everyone so today</font><font color="#CCCCCC"> I'll be</font>

534
00:34:26,909 --> 00:34:33,030
speaking on<font color="#CCCCCC"> my G sock work that's type</font>

535
00:34:29,219 --> 00:34:37,168
inference<font color="#CCCCCC"> so I will</font><font color="#E5E5E5"> introduce myself so</font>

536
00:34:33,030 --> 00:34:39,720
I<font color="#CCCCCC"> am save Ramakrishnan</font><font color="#E5E5E5"> also known as</font>

537
00:34:37,168 --> 00:34:43,109
save Rama and<font color="#E5E5E5"> Gita</font><font color="#CCCCCC"> band Twitter</font><font color="#E5E5E5"> I'm</font>

538
00:34:39,719 --> 00:34:45,209
finally<font color="#E5E5E5"> a graduate from India and I'm</font>

539
00:34:43,109 --> 00:34:48,480
mainly interested in binary exploitation

540
00:34:45,210 --> 00:34:52,859
and reversing so before<font color="#CCCCCC"> starting the</font>

541
00:34:48,480 --> 00:34:54,210
talk<font color="#E5E5E5"> I will summarize my summaries the</font>

542
00:34:52,859 --> 00:34:54,750
<font color="#CCCCCC">tasks</font><font color="#E5E5E5"> that I have done during this</font>

543
00:34:54,210 --> 00:34:57,380
summer

544
00:34:54,750 --> 00:35:00,300
so apart from type inference<font color="#CCCCCC"> I've also</font>

545
00:34:57,380 --> 00:35:03,630
improved the user-defined types in<font color="#CCCCCC"> order</font>

546
00:35:00,300 --> 00:35:06,060
<font color="#CCCCCC">to</font><font color="#E5E5E5"> in which have implemented a structure</font>

547
00:35:03,630 --> 00:35:09,839
offset propagation and handling nested

548
00:35:06,060 --> 00:35:14,250
structures<font color="#E5E5E5"> also</font><font color="#CCCCCC"> improve</font><font color="#E5E5E5"> the support for</font>

549
00:35:09,839 --> 00:35:16,890
enum and unions<font color="#E5E5E5"> so first let me tell</font>

550
00:35:14,250 --> 00:35:20,640
tell you how types are handled

551
00:35:16,890 --> 00:35:23,150
internally by<font color="#E5E5E5"> r-two so we use for</font>

552
00:35:20,640 --> 00:35:26,040
passing the type we<font color="#E5E5E5"> use the TCC engine</font>

553
00:35:23,150 --> 00:35:29,490
<font color="#E5E5E5">you can load the types from a header</font>

554
00:35:26,040 --> 00:35:32,310
file or from<font color="#E5E5E5"> a string it will parse it</font>

555
00:35:29,490 --> 00:35:35,819
and<font color="#E5E5E5"> source them in</font><font color="#CCCCCC"> SDB so here you</font><font color="#E5E5E5"> can</font>

556
00:35:32,310 --> 00:35:37,890
see<font color="#E5E5E5"> a simple example of how</font><font color="#CCCCCC"> installed so</font>

557
00:35:35,819 --> 00:35:41,279
it contains the name of the type the

558
00:35:37,890 --> 00:35:43,640
format specifier and<font color="#E5E5E5"> sizing bits also</font>

559
00:35:41,280 --> 00:35:46,890
all the type related commands are

560
00:35:43,640 --> 00:35:51,900
managed under<font color="#CCCCCC"> T namespace in r2 and</font><font color="#E5E5E5"> so</font>

561
00:35:46,890 --> 00:35:54,390
most of you<font color="#CCCCCC"> have known that so</font><font color="#E5E5E5"> I'll tell</font>

562
00:35:51,900 --> 00:35:57,119
<font color="#CCCCCC">you shortly</font><font color="#E5E5E5"> how sucker officer</font>

563
00:35:54,390 --> 00:35:59,879
propagation works<font color="#CCCCCC"> so before my</font>

564
00:35:57,119 --> 00:36:02,520
implementation<font color="#E5E5E5"> the user was able</font><font color="#CCCCCC"> to load</font>

565
00:35:59,880 --> 00:36:04,710
these structures in<font color="#CCCCCC"> r2</font><font color="#E5E5E5"> but in order to</font>

566
00:36:02,520 --> 00:36:07,530
<font color="#CCCCCC">integrate it with the disassembly output</font>

567
00:36:04,710 --> 00:36:09,630
the user had<font color="#CCCCCC"> to manually link</font><font color="#E5E5E5"> each and</font>

568
00:36:07,530 --> 00:36:12,300
every structure<font color="#E5E5E5"> members with the</font>

569
00:36:09,630 --> 00:36:15,329
<font color="#CCCCCC">instruction of</font><font color="#E5E5E5"> offset</font><font color="#CCCCCC"> mm</font><font color="#E5E5E5"> which was very</font>

570
00:36:12,300 --> 00:36:17,880
tedious<font color="#E5E5E5"> process but</font><font color="#CCCCCC"> now the user</font><font color="#E5E5E5"> just</font>

571
00:36:15,329 --> 00:36:20,640
has to link this truck with its base

572
00:36:17,880 --> 00:36:23,220
address<font color="#E5E5E5"> we automatically start emulating</font>

573
00:36:20,640 --> 00:36:26,970
the function and resolve all<font color="#CCCCCC"> their</font>

574
00:36:23,220 --> 00:36:29,629
structure members so I will show<font color="#E5E5E5"> you a</font>

575
00:36:26,970 --> 00:36:29,629
<font color="#E5E5E5">quick demo</font>

576
00:36:44,660 --> 00:36:50,600
so this is the simple<font color="#E5E5E5"> C source code</font><font color="#CCCCCC"> so</font>

577
00:36:47,900 --> 00:36:54,980
it uses<font color="#E5E5E5"> a struct and copies a few</font>

578
00:36:50,600 --> 00:36:58,750
strings<font color="#CCCCCC"> so let</font><font color="#E5E5E5"> me load the structure so</font>

579
00:36:54,980 --> 00:37:01,400
I have already created<font color="#CCCCCC"> the header file</font>

580
00:36:58,750 --> 00:37:03,500
<font color="#E5E5E5">so it contains a simply struct</font>

581
00:37:01,400 --> 00:37:06,940
so for loading<font color="#E5E5E5"> the structure in r2 you</font>

582
00:37:03,500 --> 00:37:11,210
have to use tio command followed by<font color="#CCCCCC"> the</font>

583
00:37:06,940 --> 00:37:13,130
file name so it's loaded<font color="#E5E5E5"> and for listing</font>

584
00:37:11,210 --> 00:37:16,610
all the loaded structure<font color="#E5E5E5"> you need to use</font>

585
00:37:13,130 --> 00:37:22,160
<font color="#CCCCCC">TS command so it's one structure has</font>

586
00:37:16,610 --> 00:37:34,430
<font color="#CCCCCC">been loaded so now we</font><font color="#E5E5E5"> look at the the</font>

587
00:37:22,160 --> 00:37:36,670
disassembly so yeah<font color="#CCCCCC"> so it has so</font><font color="#E5E5E5"> you can</font>

588
00:37:34,430 --> 00:37:39,770
see that<font color="#E5E5E5"> these strings are copied</font><font color="#CCCCCC"> to the</font>

589
00:37:36,670 --> 00:37:42,680
structure but it's not very<font color="#E5E5E5"> clear</font><font color="#CCCCCC"> so</font>

590
00:37:39,770 --> 00:37:45,920
let's first<font color="#E5E5E5"> find the base address for</font>

591
00:37:42,680 --> 00:37:49,990
the structure<font color="#E5E5E5"> so let me first initialize</font>

592
00:37:45,920 --> 00:37:49,990
the es il

593
00:37:56,790 --> 00:38:07,290
and and step through<font color="#E5E5E5"> few in sections and</font>

594
00:38:03,350 --> 00:38:10,799
we can see<font color="#E5E5E5"> that the local</font><font color="#CCCCCC"> Ichiro hits</font><font color="#E5E5E5"> is</font>

595
00:38:07,290 --> 00:38:13,529
<font color="#E5E5E5">the local variable that's holding the</font>

596
00:38:10,800 --> 00:38:16,770
address for the structure so the<font color="#E5E5E5"> RX</font>

597
00:38:13,530 --> 00:38:18,990
address now contains<font color="#CCCCCC"> the base address</font>

598
00:38:16,770 --> 00:38:35,940
<font color="#E5E5E5">for the structure now we will link that</font>

599
00:38:18,990 --> 00:38:39,229
<font color="#E5E5E5">with our structure oh</font><font color="#CCCCCC"> okay it's</font>

600
00:38:35,940 --> 00:38:42,150
loaded<font color="#E5E5E5"> and now you can see that the</font>

601
00:38:39,230 --> 00:38:43,950
variable<font color="#E5E5E5"> type has</font><font color="#CCCCCC"> been strained</font><font color="#E5E5E5"> to</font>

602
00:38:42,150 --> 00:38:47,750
<font color="#CCCCCC">attend to start and name has been</font>

603
00:38:43,950 --> 00:38:51,000
changed<font color="#CCCCCC"> and also</font><font color="#E5E5E5"> you can see that here</font>

604
00:38:47,750 --> 00:38:53,490
<font color="#E5E5E5">the structure member have</font><font color="#CCCCCC"> been resolved</font>

605
00:38:51,000 --> 00:38:58,770
<font color="#CCCCCC">so you can see</font><font color="#E5E5E5"> a lot of places where</font>

606
00:38:53,490 --> 00:39:01,500
it's<font color="#E5E5E5"> resolved</font><font color="#CCCCCC"> I don't know it's due to</font>

607
00:38:58,770 --> 00:39:04,170
<font color="#E5E5E5">VM and cannot see properly but you can</font>

608
00:39:01,500 --> 00:39:07,710
see a lot<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> structure member has</font>

609
00:39:04,170 --> 00:39:11,660
been<font color="#E5E5E5"> resolved so that's it for the</font>

610
00:39:07,710 --> 00:39:15,540
structure of<font color="#E5E5E5"> set propagation so now</font>

611
00:39:11,660 --> 00:39:17,759
let's move<font color="#E5E5E5"> to</font><font color="#CCCCCC"> our interesting topic so</font>

612
00:39:15,540 --> 00:39:20,910
this is the the main<font color="#E5E5E5"> task that I was</font>

613
00:39:17,760 --> 00:39:23,010
working<font color="#CCCCCC"> on so that's</font><font color="#E5E5E5"> type propagation so</font>

614
00:39:20,910 --> 00:39:25,470
let me first tell<font color="#CCCCCC"> you what</font><font color="#E5E5E5"> I was trying</font>

615
00:39:23,010 --> 00:39:28,230
to<font color="#CCCCCC"> achieve</font><font color="#E5E5E5"> so here you have a simple C</font>

616
00:39:25,470 --> 00:39:31,169
source code<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you have</font><font color="#E5E5E5"> its disassembly</font>

617
00:39:28,230 --> 00:39:35,790
but the type of<font color="#E5E5E5"> variable is default int</font>

618
00:39:31,170 --> 00:39:39,180
which is very boring<font color="#CCCCCC"> so let us now try</font>

619
00:39:35,790 --> 00:39:41,759
to<font color="#CCCCCC"> achieve something</font><font color="#E5E5E5"> that's closer to</font>

620
00:39:39,180 --> 00:39:45,200
<font color="#E5E5E5">the C source</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> so we try</font><font color="#CCCCCC"> to infer the</font>

621
00:39:41,760 --> 00:39:48,330
type of variable<font color="#E5E5E5"> so here we have the</font>

622
00:39:45,200 --> 00:39:50,910
type of variable inferred<font color="#E5E5E5"> so this is</font>

623
00:39:48,330 --> 00:39:53,880
what we are trying<font color="#CCCCCC"> to achieve so we will</font>

624
00:39:50,910 --> 00:39:56,730
see the techniques that that has been

625
00:39:53,880 --> 00:39:59,130
used<font color="#E5E5E5"> so basically here we have two</font>

626
00:39:56,730 --> 00:40:01,650
approaches so one is<font color="#CCCCCC"> using static</font>

627
00:39:59,130 --> 00:40:04,530
analysis<font color="#E5E5E5"> so where you need to generate</font>

628
00:40:01,650 --> 00:40:07,920
lot of constraints<font color="#E5E5E5"> based on instruction</font>

629
00:40:04,530 --> 00:40:10,320
<font color="#E5E5E5">access pattern and and then use a</font>

630
00:40:07,920 --> 00:40:10,680
constraint<font color="#E5E5E5"> solver to infer</font><font color="#CCCCCC"> the type of</font>

631
00:40:10,320 --> 00:40:13,050
<font color="#E5E5E5">way</font>

632
00:40:10,680 --> 00:40:15,899
and another one<font color="#E5E5E5"> is using</font><font color="#CCCCCC"> dynamic</font>

633
00:40:13,050 --> 00:40:19,380
analysis where you<font color="#CCCCCC"> follow the execution</font>

634
00:40:15,900 --> 00:40:21,990
<font color="#E5E5E5">path and</font><font color="#CCCCCC"> analyze the value stored</font><font color="#E5E5E5"> in the</font>

635
00:40:19,380 --> 00:40:24,420
<font color="#E5E5E5">variable</font><font color="#CCCCCC"> the memory accessed and such to</font>

636
00:40:21,990 --> 00:40:25,950
infer<font color="#E5E5E5"> the type of variable but there are</font>

637
00:40:24,420 --> 00:40:28,440
<font color="#E5E5E5">a few problems with both these</font>

638
00:40:25,950 --> 00:40:30,299
techniques<font color="#E5E5E5"> so the static analysis</font>

639
00:40:28,440 --> 00:40:34,500
require constraint solvers<font color="#E5E5E5"> which is a</font>

640
00:40:30,300 --> 00:40:37,140
very slow<font color="#CCCCCC"> and heavy</font><font color="#E5E5E5"> so I know we didn't</font>

641
00:40:34,500 --> 00:40:39,270
prefer<font color="#E5E5E5"> to use constraint solvers and the</font>

642
00:40:37,140 --> 00:40:41,279
dynamic analysis has a very poor path

643
00:40:39,270 --> 00:40:43,770
coverage because it's<font color="#E5E5E5"> following the</font>

644
00:40:41,280 --> 00:40:47,310
execution path<font color="#E5E5E5"> so I came</font><font color="#CCCCCC"> up with</font><font color="#E5E5E5"> the</font>

645
00:40:43,770 --> 00:40:50,850
<font color="#CCCCCC">solution</font><font color="#E5E5E5"> using emulation</font><font color="#CCCCCC"> it's very</font>

646
00:40:47,310 --> 00:40:53,640
similar to<font color="#E5E5E5"> the dynamic approach but the</font>

647
00:40:50,850 --> 00:40:56,130
only<font color="#CCCCCC"> difference is we manually emulate</font>

648
00:40:53,640 --> 00:40:58,170
the function block<font color="#E5E5E5"> by block and this</font>

649
00:40:56,130 --> 00:41:01,770
keep the nonlinear instruction like jump

650
00:40:58,170 --> 00:41:05,400
<font color="#E5E5E5">and such</font><font color="#CCCCCC"> so this is a simple</font>

651
00:41:01,770 --> 00:41:09,509
<font color="#E5E5E5">architectural design so the first step</font>

652
00:41:05,400 --> 00:41:12,510
involves the variable recovery<font color="#E5E5E5"> so this</font>

653
00:41:09,510 --> 00:41:15,420
was a task<font color="#E5E5E5"> that was done</font><font color="#CCCCCC"> during gzip</font>

654
00:41:12,510 --> 00:41:18,450
2016 thanks to our coder<font color="#CCCCCC"> it was his work</font>

655
00:41:15,420 --> 00:41:20,670
<font color="#E5E5E5">and the next step involves propagating</font>

656
00:41:18,450 --> 00:41:23,669
the type using function signatures and

657
00:41:20,670 --> 00:41:26,400
the remaining<font color="#E5E5E5"> few step focuses on</font>

658
00:41:23,670 --> 00:41:30,300
improve the inference of type so<font color="#E5E5E5"> we look</font>

659
00:41:26,400 --> 00:41:33,420
<font color="#E5E5E5">at each</font><font color="#CCCCCC"> one of them in detail</font><font color="#E5E5E5"> so this is</font>

660
00:41:30,300 --> 00:41:36,900
the in function signature<font color="#E5E5E5"> what we try to</font>

661
00:41:33,420 --> 00:41:39,330
do is we emulate<font color="#E5E5E5"> the function until we</font>

662
00:41:36,900 --> 00:41:41,780
reach<font color="#E5E5E5"> a call to a known</font><font color="#CCCCCC"> function like</font>

663
00:41:39,330 --> 00:41:44,970
Lib C functions and then<font color="#E5E5E5"> we try to</font>

664
00:41:41,780 --> 00:41:47,460
propagate<font color="#E5E5E5"> the argument types in backward</font>

665
00:41:44,970 --> 00:41:50,040
fashion and its return<font color="#E5E5E5"> type in a fault</font>

666
00:41:47,460 --> 00:41:53,100
fashion so I show you<font color="#E5E5E5"> an example that</font>

667
00:41:50,040 --> 00:41:55,860
<font color="#E5E5E5">will clearly</font><font color="#CCCCCC"> picturise this concept</font><font color="#E5E5E5"> so</font>

668
00:41:53,100 --> 00:41:57,930
here we have a string cat function<font color="#E5E5E5"> so</font>

669
00:41:55,860 --> 00:42:02,040
all you know that<font color="#CCCCCC"> it</font><font color="#E5E5E5"> takes two arguments</font>

670
00:41:57,930 --> 00:42:06,299
of<font color="#CCCCCC"> both strings now what we try to do is</font>

671
00:42:02,040 --> 00:42:08,940
we look the calling<font color="#CCCCCC"> convention and</font>

672
00:42:06,300 --> 00:42:11,130
locate the arguments so here<font color="#CCCCCC"> are</font><font color="#E5E5E5"> D a</font>

673
00:42:08,940 --> 00:42:13,770
<font color="#E5E5E5">resistor will contain the first</font><font color="#CCCCCC"> argument</font>

674
00:42:11,130 --> 00:42:15,930
<font color="#E5E5E5">so now we you know that the ID a</font>

675
00:42:13,770 --> 00:42:19,500
<font color="#E5E5E5">register will contain the address</font><font color="#CCCCCC"> to</font>

676
00:42:15,930 --> 00:42:22,470
string<font color="#E5E5E5"> now we recursively follow the</font>

677
00:42:19,500 --> 00:42:24,520
source registers<font color="#CCCCCC"> until we</font><font color="#E5E5E5"> reach a</font>

678
00:42:22,470 --> 00:42:27,430
variable<font color="#E5E5E5"> so if you see</font>

679
00:42:24,520 --> 00:42:30,400
here the<font color="#E5E5E5"> the source of</font><font color="#CCCCCC"> idea</font><font color="#E5E5E5"> distance</font>

680
00:42:27,430 --> 00:42:33,250
<font color="#E5E5E5">coming from our X and the</font><font color="#CCCCCC"> rx source is</font>

681
00:42:30,400 --> 00:42:37,480
coming<font color="#E5E5E5"> from the variable local</font><font color="#CCCCCC"> 8/8</font><font color="#E5E5E5"> so we</font>

682
00:42:33,250 --> 00:42:40,660
<font color="#CCCCCC">stop there</font><font color="#E5E5E5"> so we change its type and</font>

683
00:42:37,480 --> 00:42:45,040
rename it<font color="#E5E5E5"> so similarly we do this for n</font>

684
00:42:40,660 --> 00:42:47,020
<font color="#E5E5E5">arguments so this is what backward</font>

685
00:42:45,040 --> 00:42:50,020
propagation is now I will show<font color="#E5E5E5"> you how a</font>

686
00:42:47,020 --> 00:42:52,240
fault propagation happens<font color="#E5E5E5"> so here it's</font>

687
00:42:50,020 --> 00:42:54,880
an another<font color="#E5E5E5"> example</font><font color="#CCCCCC"> of string length</font>

688
00:42:52,240 --> 00:42:58,359
function<font color="#E5E5E5"> so it takes a string as</font>

689
00:42:54,880 --> 00:42:59,860
argument and returns the size of it<font color="#CCCCCC"> so</font>

690
00:42:58,360 --> 00:43:04,000
here again you<font color="#E5E5E5"> look for the calling</font>

691
00:42:59,860 --> 00:43:06,490
<font color="#E5E5E5">convention</font><font color="#CCCCCC"> so we know that the EAX</font>

692
00:43:04,000 --> 00:43:09,600
register contains the return value<font color="#CCCCCC"> here</font>

693
00:43:06,490 --> 00:43:11,890
we try to recursively<font color="#E5E5E5"> follow the</font>

694
00:43:09,600 --> 00:43:14,500
destination registers until we reach a

695
00:43:11,890 --> 00:43:18,089
variable but here we are lucky that<font color="#E5E5E5"> it's</font>

696
00:43:14,500 --> 00:43:22,420
<font color="#CCCCCC">immediately a local variable so we just</font>

697
00:43:18,090 --> 00:43:25,240
infer the type and change its<font color="#E5E5E5"> name so</font>

698
00:43:22,420 --> 00:43:27,820
but<font color="#E5E5E5"> actually there are few scenarios</font>

699
00:43:25,240 --> 00:43:29,470
where<font color="#E5E5E5"> you don't have a call</font><font color="#CCCCCC"> to known</font>

700
00:43:27,820 --> 00:43:31,930
function like printers and scanners so

701
00:43:29,470 --> 00:43:33,700
it won't be possible to<font color="#E5E5E5"> infer the type</font>

702
00:43:31,930 --> 00:43:37,330
of variable always<font color="#E5E5E5"> using this technique</font>

703
00:43:33,700 --> 00:43:40,000
<font color="#E5E5E5">so the upcoming few techniques will</font>

704
00:43:37,330 --> 00:43:42,400
handle this scenario so first is flat

705
00:43:40,000 --> 00:43:44,590
space analysis<font color="#E5E5E5"> it's actually a fancy</font>

706
00:43:42,400 --> 00:43:48,460
name that I have given<font color="#E5E5E5"> so it's nothing</font>

707
00:43:44,590 --> 00:43:51,370
<font color="#E5E5E5">but here the</font><font color="#CCCCCC"> r2 does the hard job for</font><font color="#E5E5E5"> us</font>

708
00:43:48,460 --> 00:43:53,080
<font color="#CCCCCC">already</font><font color="#E5E5E5"> so it passes all the</font><font color="#CCCCCC"> hard coded</font>

709
00:43:51,370 --> 00:43:56,109
strings<font color="#E5E5E5"> in the binary</font><font color="#CCCCCC"> and puts them in</font>

710
00:43:53,080 --> 00:43:57,040
the<font color="#E5E5E5"> STR flag space so we just do the</font>

711
00:43:56,110 --> 00:44:00,250
easy<font color="#E5E5E5"> job</font>

712
00:43:57,040 --> 00:44:04,000
so we look for this<font color="#E5E5E5"> pattern and try to</font>

713
00:44:00,250 --> 00:44:08,380
infer the<font color="#E5E5E5"> type of variable ask a star so</font>

714
00:44:04,000 --> 00:44:10,330
if<font color="#CCCCCC"> address is loaded from STR flag space</font>

715
00:44:08,380 --> 00:44:12,670
and move to a variable<font color="#E5E5E5"> so that's the</font>

716
00:44:10,330 --> 00:44:15,610
pattern<font color="#E5E5E5"> here</font><font color="#CCCCCC"> so I'll</font><font color="#E5E5E5"> just show</font><font color="#CCCCCC"> you a</font>

717
00:44:12,670 --> 00:44:19,080
quick<font color="#E5E5E5"> demo of</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> and the commands to</font>

718
00:44:15,610 --> 00:44:19,080
<font color="#CCCCCC">be used so</font>

719
00:44:25,220 --> 00:44:31,439
<font color="#CCCCCC">here I say said there</font><font color="#E5E5E5"> is no call to</font><font color="#CCCCCC"> any</font>

720
00:44:29,040 --> 00:44:33,480
<font color="#CCCCCC">function so if we have</font><font color="#E5E5E5"> just followed the</font>

721
00:44:31,440 --> 00:44:37,280
first technique it<font color="#CCCCCC"> will be impossible to</font>

722
00:44:33,480 --> 00:44:41,420
infer the<font color="#E5E5E5"> type of variable so but</font>

723
00:44:37,280 --> 00:44:44,570
luckily we have the this<font color="#E5E5E5"> pattern here</font><font color="#CCCCCC"> so</font>

724
00:44:41,420 --> 00:44:48,570
we will<font color="#E5E5E5"> try</font><font color="#CCCCCC"> to infer type</font><font color="#E5E5E5"> of variable so</font>

725
00:44:44,570 --> 00:44:52,440
my whole work is in place under this

726
00:44:48,570 --> 00:44:58,520
command that's<font color="#CCCCCC"> FTA so you just run this</font>

727
00:44:52,440 --> 00:44:58,520
and now we will<font color="#CCCCCC"> will see we can see that</font>

728
00:44:58,940 --> 00:45:08,510
so the type of<font color="#E5E5E5"> this two variables has</font>

729
00:45:02,910 --> 00:45:08,509
been in for a scare star<font color="#E5E5E5"> that's it and</font>

730
00:45:09,109 --> 00:45:18,619
actually I<font color="#CCCCCC"> close the</font><font color="#E5E5E5"> presentation</font>

731
00:45:38,520 --> 00:45:44,900
it's actually<font color="#CCCCCC"> really</font><font color="#E5E5E5"> slow yeah</font>

732
00:45:57,430 --> 00:46:05,540
so there's the next technique<font color="#E5E5E5"> so the aim</font>

733
00:46:03,230 --> 00:46:10,040
of this technique<font color="#E5E5E5"> is to invert the sign</font>

734
00:46:05,540 --> 00:46:12,980
of the variable<font color="#E5E5E5"> so here we try to look</font>

735
00:46:10,040 --> 00:46:15,740
<font color="#CCCCCC">for a compare in section and then we</font>

736
00:46:12,980 --> 00:46:18,380
look the look for<font color="#E5E5E5"> its consecutive jump</font>

737
00:46:15,740 --> 00:46:20,299
in sections<font color="#E5E5E5"> so for example if we have an</font>

738
00:46:18,380 --> 00:46:24,080
instruction<font color="#CCCCCC"> like jump above jump below</font>

739
00:46:20,300 --> 00:46:26,540
<font color="#CCCCCC">we infer</font><font color="#E5E5E5"> its type as unsigned and if you</font>

740
00:46:24,080 --> 00:46:28,670
have the instruction like jump greater

741
00:46:26,540 --> 00:46:33,860
than or jump less than being for its

742
00:46:28,670 --> 00:46:37,700
type<font color="#E5E5E5"> assigned so and the next technique</font>

743
00:46:33,860 --> 00:46:40,040
that's<font color="#E5E5E5"> caller to</font><font color="#CCCCCC"> Kali type propagation</font>

744
00:46:37,700 --> 00:46:43,009
actually this is very useful<font color="#E5E5E5"> because it</font>

745
00:46:40,040 --> 00:46:45,830
induces<font color="#E5E5E5"> a chain like effect so we have</font>

746
00:46:43,010 --> 00:46:48,620
the type propagation propagating through

747
00:46:45,830 --> 00:46:51,860
many functions<font color="#E5E5E5"> so here we what we try to</font>

748
00:46:48,620 --> 00:46:53,930
do is we store the argument if<font color="#CCCCCC"> a</font>

749
00:46:51,860 --> 00:46:56,000
user-defined<font color="#CCCCCC"> function is called</font><font color="#E5E5E5"> and when</font>

750
00:46:53,930 --> 00:46:59,419
the analysis reaches the<font color="#CCCCCC"> collie function</font>

751
00:46:56,000 --> 00:47:02,980
<font color="#E5E5E5">we propagate them</font><font color="#CCCCCC"> now I'll quickly show</font>

752
00:46:59,420 --> 00:47:02,980
you an example<font color="#E5E5E5"> for this</font>

753
00:47:14,109 --> 00:47:20,660
so actually everybody<font color="#CCCCCC"> I</font><font color="#E5E5E5"> have been</font>

754
00:47:17,990 --> 00:47:23,209
thinking<font color="#CCCCCC"> that</font><font color="#E5E5E5"> three</font><font color="#CCCCCC"> years is very scary</font>

755
00:47:20,660 --> 00:47:27,609
but it's not actually the FDA is

756
00:47:23,210 --> 00:47:34,430
included in this<font color="#CCCCCC"> 3a so please try 3a</font><font color="#E5E5E5"> so</font>

757
00:47:27,609 --> 00:47:37,009
that's it<font color="#E5E5E5"> so now I'll show</font><font color="#CCCCCC"> you so we</font>

758
00:47:34,430 --> 00:47:38,779
have<font color="#CCCCCC"> a all to our own function that's</font>

759
00:47:37,010 --> 00:47:42,410
<font color="#E5E5E5">user-defined function and it has your</font>

760
00:47:38,780 --> 00:47:43,970
arguments<font color="#CCCCCC"> but due to our type inference</font>

761
00:47:42,410 --> 00:47:47,450
technique we would have inferred<font color="#CCCCCC"> the</font>

762
00:47:43,970 --> 00:47:50,118
type of the local<font color="#E5E5E5"> xx and the another s</font>

763
00:47:47,450 --> 00:47:51,919
<font color="#CCCCCC">with the variable s so it will be useful</font>

764
00:47:50,119 --> 00:48:04,609
if you have<font color="#E5E5E5"> if we propagate this to the</font>

765
00:47:51,920 --> 00:48:08,210
function<font color="#CCCCCC"> our function so so here you can</font>

766
00:48:04,609 --> 00:48:13,220
see that the type of arguments have been

767
00:48:08,210 --> 00:48:15,859
propagated and also the arguments<font color="#E5E5E5"> have</font>

768
00:48:13,220 --> 00:48:18,589
been<font color="#CCCCCC"> moved</font><font color="#E5E5E5"> to a local variable so even</font>

769
00:48:15,859 --> 00:48:21,710
that local variable has its type

770
00:48:18,589 --> 00:48:23,750
inferred<font color="#E5E5E5"> that</font><font color="#CCCCCC"> means I propagated so this</font>

771
00:48:21,710 --> 00:48:27,200
is the caller to<font color="#CCCCCC"> Cali type function</font>

772
00:48:23,750 --> 00:48:31,300
propagation and now you look at the next

773
00:48:27,200 --> 00:48:37,160
technique<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> this is the last one</font>

774
00:48:31,300 --> 00:48:38,990
<font color="#CCCCCC">so here what we try to do is we extract</font>

775
00:48:37,160 --> 00:48:41,509
the format<font color="#E5E5E5"> string from function like</font>

776
00:48:38,990 --> 00:48:46,310
printf and scanf<font color="#E5E5E5"> and then use the format</font>

777
00:48:41,510 --> 00:48:48,800
specifier to<font color="#E5E5E5"> infer</font><font color="#CCCCCC"> the type</font><font color="#E5E5E5"> many</font><font color="#CCCCCC"> typing</font>

778
00:48:46,310 --> 00:48:50,900
<font color="#CCCCCC">sense system actually neglect this thing</font>

779
00:48:48,800 --> 00:48:56,390
but this may<font color="#E5E5E5"> be useful in</font><font color="#CCCCCC"> many scenarios</font>

780
00:48:50,900 --> 00:48:59,470
<font color="#CCCCCC">so we use that and we'll be better</font><font color="#E5E5E5"> than</font>

781
00:48:56,390 --> 00:49:04,359
<font color="#CCCCCC">Ida</font><font color="#E5E5E5"> actually there are many scenarios</font><font color="#CCCCCC"> I</font>

782
00:48:59,470 --> 00:49:04,359
know I cannot show<font color="#CCCCCC"> that so</font>

783
00:49:08,000 --> 00:49:14,490
so yeah so here we<font color="#CCCCCC"> actually have a</font>

784
00:49:11,900 --> 00:49:18,930
format<font color="#CCCCCC"> string containing personally</font><font color="#E5E5E5"> this</font>

785
00:49:14,490 --> 00:49:20,910
and person is LD so we try to<font color="#CCCCCC"> know with</font>

786
00:49:18,930 --> 00:49:23,629
this information we try to infer<font color="#CCCCCC"> the</font>

787
00:49:20,910 --> 00:49:26,940
type of<font color="#E5E5E5"> variables or local</font><font color="#CCCCCC"> ten</font><font color="#E5E5E5"> hats</font><font color="#CCCCCC"> has</font>

788
00:49:23,630 --> 00:49:30,240
the type a star star and the local

789
00:49:26,940 --> 00:49:36,030
attach has the type as long<font color="#CCCCCC"> end so</font>

790
00:49:30,240 --> 00:49:39,200
that's it and so now<font color="#E5E5E5"> lastly I</font><font color="#CCCCCC"> like to</font>

791
00:49:36,030 --> 00:49:40,620
discuss a new feature have been

792
00:49:39,200 --> 00:49:45,240
introduced

793
00:49:40,620 --> 00:49:47,490
that's constraint type<font color="#E5E5E5"> support so the</font>

794
00:49:45,240 --> 00:49:51,750
aim of<font color="#E5E5E5"> this is to</font><font color="#CCCCCC"> calculate the range of</font>

795
00:49:47,490 --> 00:49:53,490
the variable<font color="#CCCCCC"> so it may be useful</font><font color="#E5E5E5"> in many</font>

796
00:49:51,750 --> 00:49:56,310
<font color="#CCCCCC">scenarios like</font><font color="#E5E5E5"> some system calls or</font>

797
00:49:53,490 --> 00:50:00,270
<font color="#E5E5E5">known to</font><font color="#CCCCCC"> return</font><font color="#E5E5E5"> a specific range of</font>

798
00:49:56,310 --> 00:50:03,690
values and also<font color="#E5E5E5"> you can infer the for</font>

799
00:50:00,270 --> 00:50:07,080
loop which the counters that's a member

800
00:50:03,690 --> 00:50:09,870
<font color="#E5E5E5">may be the I the counter has variable</font>

801
00:50:07,080 --> 00:50:13,230
from<font color="#E5E5E5"> 0 to 10 so you can easily check</font>

802
00:50:09,870 --> 00:50:14,790
that<font color="#E5E5E5"> so here we try to do is we look for</font>

803
00:50:13,230 --> 00:50:16,890
<font color="#E5E5E5">again you look for the compare in</font>

804
00:50:14,790 --> 00:50:19,370
section and check the exit<font color="#CCCCCC"> status for</font>

805
00:50:16,890 --> 00:50:24,270
the both the<font color="#E5E5E5"> branches and negate the</font>

806
00:50:19,370 --> 00:50:32,279
range<font color="#E5E5E5"> accordingly and so that thing but</font>

807
00:50:24,270 --> 00:50:35,130
I<font color="#E5E5E5"> will show you again a demo for this so</font>

808
00:50:32,280 --> 00:50:38,820
actually this is<font color="#E5E5E5"> not well tested so it's</font>

809
00:50:35,130 --> 00:50:45,210
<font color="#E5E5E5">a so you need to enable a config</font>

810
00:50:38,820 --> 00:50:47,370
variable<font color="#E5E5E5"> so that's under so this is a</font>

811
00:50:45,210 --> 00:50:57,360
false by<font color="#CCCCCC"> default so</font><font color="#E5E5E5"> you need to enable</font>

812
00:50:47,370 --> 00:51:03,150
<font color="#E5E5E5">this and then run our analysis and so we</font>

813
00:50:57,360 --> 00:51:07,500
have a function like range small so here

814
00:51:03,150 --> 00:51:14,970
you can see that the this variable range

815
00:51:07,500 --> 00:51:17,300
is being inferred<font color="#CCCCCC"> so that's it so there</font>

816
00:51:14,970 --> 00:51:19,669
<font color="#E5E5E5">are still many work that has to be done</font>

817
00:51:17,300 --> 00:51:21,950
<font color="#E5E5E5">so</font>

818
00:51:19,670 --> 00:51:24,109
the constraint type<font color="#CCCCCC"> support that I have</font>

819
00:51:21,950 --> 00:51:27,319
just<font color="#E5E5E5"> shown needs a lot of improvement</font>

820
00:51:24,109 --> 00:51:29,930
and a lot of<font color="#E5E5E5"> testing has to be done in</font>

821
00:51:27,319 --> 00:51:31,819
the type inference<font color="#CCCCCC"> system</font><font color="#E5E5E5"> so currently</font><font color="#CCCCCC"> I</font>

822
00:51:29,930 --> 00:51:35,089
have<font color="#E5E5E5"> tested</font><font color="#CCCCCC"> only</font><font color="#E5E5E5"> for few architecture</font>

823
00:51:31,819 --> 00:51:40,729
like x86 or<font color="#E5E5E5"> MIPS</font><font color="#CCCCCC"> it still needs</font><font color="#E5E5E5"> to be</font>

824
00:51:35,089 --> 00:51:43,459
<font color="#E5E5E5">tested for many binaries</font><font color="#CCCCCC"> so and</font><font color="#E5E5E5"> also we</font>

825
00:51:40,729 --> 00:51:46,189
are<font color="#CCCCCC"> planning</font><font color="#E5E5E5"> to parse the type</font>

826
00:51:43,459 --> 00:51:47,690
<font color="#E5E5E5">information from dwarf and PDB and</font>

827
00:51:46,190 --> 00:51:51,170
integrate it with<font color="#CCCCCC"> the type inference</font>

828
00:51:47,690 --> 00:51:53,839
system<font color="#E5E5E5"> so yeah that's it and now I would</font>

829
00:51:51,170 --> 00:51:55,789
<font color="#E5E5E5">like to thanks my mentors pancake</font><font color="#CCCCCC"> cake</font>

830
00:51:53,839 --> 00:51:57,499
silica and my<font color="#CCCCCC"> Jean and others like cod</font>

831
00:51:55,789 --> 00:52:01,369
coder and<font color="#E5E5E5"> all other who have supported</font>

832
00:51:57,499 --> 00:52:04,779
<font color="#E5E5E5">me in</font><font color="#CCCCCC"> g-shock</font><font color="#E5E5E5"> so that's it thank</font><font color="#CCCCCC"> you and</font>

833
00:52:01,369 --> 00:52:07,929
if you guys have any<font color="#E5E5E5"> questions</font>

834
00:52:04,780 --> 00:52:07,929
[Applause]

835
00:52:10,580 --> 00:52:16,770
<font color="#CCCCCC">universum doesn't work</font><font color="#E5E5E5"> one question if I</font>

836
00:52:15,480 --> 00:52:18,570
understood correctly when you<font color="#E5E5E5"> do</font>

837
00:52:16,770 --> 00:52:21,119
<font color="#E5E5E5">backwards propagation basically you wait</font>

838
00:52:18,570 --> 00:52:23,490
for a call to<font color="#E5E5E5"> a certain hang a specific</font>

839
00:52:21,119 --> 00:52:25,349
function<font color="#CCCCCC"> unknown arguments right the</font>

840
00:52:23,490 --> 00:52:27,180
<font color="#CCCCCC">type</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> elements</font><font color="#E5E5E5"> and then</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> do like</font>

841
00:52:25,349 --> 00:52:29,580
backwards<font color="#CCCCCC"> you try to find</font><font color="#E5E5E5"> what's local</font>

842
00:52:27,180 --> 00:52:30,930
and<font color="#E5E5E5"> what is how to register</font><font color="#CCCCCC"> or whatever</font>

843
00:52:29,580 --> 00:52:33,000
can<font color="#CCCCCC"> you explain a</font><font color="#E5E5E5"> bit</font><font color="#CCCCCC"> more how do you</font>

844
00:52:30,930 --> 00:52:35,910
approach this this<font color="#E5E5E5"> backwards propagation</font>

845
00:52:33,000 --> 00:52:38,660
is like you safe<font color="#CCCCCC"> Estates you do like</font>

846
00:52:35,910 --> 00:52:42,779
<font color="#E5E5E5">Gary emulate the function we have the</font>

847
00:52:38,660 --> 00:52:45,598
<font color="#CCCCCC">values stored</font><font color="#E5E5E5"> in a database</font><font color="#CCCCCC"> s DB</font>

848
00:52:42,780 --> 00:52:47,670
so we can have each and every state that

849
00:52:45,599 --> 00:52:50,430
has<font color="#CCCCCC"> been okay it's stored</font>

850
00:52:47,670 --> 00:52:57,170
so we then and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> Jack</font><font color="#E5E5E5"> what powers in</font>

851
00:52:50,430 --> 00:52:57,169
this yes<font color="#CCCCCC"> okay another question</font>

852
00:53:02,300 --> 00:53:07,050
thank you for<font color="#CCCCCC"> representation and my</font>

853
00:53:05,220 --> 00:53:12,480
question would be if I understand it

854
00:53:07,050 --> 00:53:17,250
correctly you<font color="#E5E5E5"> are emulate the function</font>

855
00:53:12,480 --> 00:53:19,440
by a linear trace<font color="#E5E5E5"> yeah so you do not</font>

856
00:53:17,250 --> 00:53:26,460
propagate<font color="#E5E5E5"> type information across</font>

857
00:53:19,440 --> 00:53:28,800
branches<font color="#E5E5E5"> is that correct</font><font color="#CCCCCC"> I know we do</font>

858
00:53:26,460 --> 00:53:32,460
linearly and then emulate<font color="#E5E5E5"> each and every</font>

859
00:53:28,800 --> 00:53:37,230
block by block I mean every block that

860
00:53:32,460 --> 00:53:39,750
<font color="#E5E5E5">this in the function so the jump jump is</font>

861
00:53:37,230 --> 00:53:42,120
<font color="#CCCCCC">being skipped</font><font color="#E5E5E5"> but still we emulate every</font>

862
00:53:39,750 --> 00:53:45,660
block so that<font color="#E5E5E5"> path has</font><font color="#CCCCCC"> been covered</font><font color="#E5E5E5"> that</font>

863
00:53:42,120 --> 00:53:49,279
<font color="#CCCCCC">will be covered oh yeah so</font><font color="#E5E5E5"> it is in some</font>

864
00:53:45,660 --> 00:53:58,500
way<font color="#CCCCCC"> about</font><font color="#E5E5E5"> our path sensitive yeah yes</font>

865
00:53:49,280 --> 00:54:00,990
<font color="#E5E5E5">okay and oh I would ask well what is the</font>

866
00:53:58,500 --> 00:54:04,400
biggest biggest binary that you tried to

867
00:54:00,990 --> 00:54:07,799
infer types for so I cried the red deck

868
00:54:04,400 --> 00:54:10,290
<font color="#E5E5E5">regression report so they have many</font>

869
00:54:07,800 --> 00:54:12,590
binaries<font color="#E5E5E5"> so in many architectures or</font>

870
00:54:10,290 --> 00:54:16,950
<font color="#CCCCCC">I've tried them</font><font color="#E5E5E5"> it's around 1 MB I think</font>

871
00:54:12,590 --> 00:54:26,350
also one megabyte yeah yeah oh<font color="#CCCCCC"> ok</font>

872
00:54:16,950 --> 00:54:33,669
thank<font color="#E5E5E5"> you I know</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> question</font><font color="#CCCCCC"> thanks</font>

873
00:54:26,350 --> 00:54:33,670
[Applause]

874
00:55:50,570 --> 00:55:57,530
hello<font color="#E5E5E5"> thank you for inviting me I'm sure</font>

875
00:55:54,140 --> 00:56:00,830
he'll<font color="#CCCCCC"> cry I</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> career I'd work</font>

876
00:55:57,530 --> 00:56:03,020
to talk<font color="#E5E5E5"> about my</font><font color="#CCCCCC"> ji-sook</font><font color="#E5E5E5"> works</font><font color="#CCCCCC"> I worked</font>

877
00:56:00,830 --> 00:56:06,080
on<font color="#CCCCCC"> the</font><font color="#E5E5E5"> comparable back-end which emits</font>

878
00:56:03,020 --> 00:56:08,570
pseudo C code<font color="#E5E5E5"> from binary also</font>

879
00:56:06,080 --> 00:56:12,140
implemented<font color="#E5E5E5"> the</font><font color="#CCCCCC"> integration with radar</font>

880
00:56:08,570 --> 00:56:14,270
<font color="#E5E5E5">to throw there are a lot with</font><font color="#CCCCCC"> that the</font>

881
00:56:12,140 --> 00:56:14,540
compiler<font color="#E5E5E5"> and the integration works fine</font>

882
00:56:14,270 --> 00:56:17,540
now

883
00:56:14,540 --> 00:56:19,700
are you should know<font color="#E5E5E5"> radical is different</font>

884
00:56:17,540 --> 00:56:23,330
from the compiler different to the

885
00:56:19,700 --> 00:56:25,399
<font color="#E5E5E5">compare of from</font><font color="#CCCCCC"> r2 deck and Iraq shirt I</font>

886
00:56:23,330 --> 00:56:29,319
tried<font color="#E5E5E5"> I've dragged to show you the</font>

887
00:56:25,400 --> 00:56:29,320
current status of radical

888
00:56:36,730 --> 00:56:40,980
can you see our<font color="#E5E5E5"> whoops</font>

889
00:56:47,400 --> 00:56:53,940
these are the command these are the

890
00:56:50,670 --> 00:57:00,349
commands<font color="#E5E5E5"> and we can load a binary by</font>

891
00:56:53,940 --> 00:57:03,349
Royal Command<font color="#E5E5E5"> under let's load some</font>

892
00:57:00,349 --> 00:57:03,349
binary

893
00:57:06,700 --> 00:57:13,060
and the comparison<font color="#CCCCCC"> is done by the</font>

894
00:57:09,100 --> 00:57:18,850
<font color="#E5E5E5">compare comment before that</font><font color="#CCCCCC"> which</font><font color="#E5E5E5"> is the</font>

895
00:57:13,060 --> 00:57:24,220
available function these are<font color="#CCCCCC"> the</font>

896
00:57:18,850 --> 00:57:30,580
available functions<font color="#E5E5E5"> and now</font><font color="#CCCCCC"> let's talk</font>

897
00:57:24,220 --> 00:57:35,589
<font color="#CCCCCC">about</font><font color="#E5E5E5"> main function</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> is that the</font>

898
00:57:30,580 --> 00:57:41,560
<font color="#CCCCCC">compare the result and</font><font color="#E5E5E5"> the original</font>

899
00:57:35,590 --> 00:57:44,620
source code<font color="#E5E5E5"> is like this you can see all</font>

900
00:57:41,560 --> 00:57:49,060
the result is the<font color="#CCCCCC"> comparator</font><font color="#E5E5E5"> is almost</font>

901
00:57:44,620 --> 00:57:57,299
succeeded and let's<font color="#E5E5E5"> just try other</font>

902
00:57:49,060 --> 00:57:57,299
examples<font color="#E5E5E5"> now</font><font color="#CCCCCC"> there's our for loop</font><font color="#E5E5E5"> and</font>

903
00:57:58,290 --> 00:58:06,360
this function<font color="#CCCCCC"> calculated</font><font color="#E5E5E5"> sum of 0 to</font><font color="#CCCCCC"> 10</font>

904
00:58:04,150 --> 00:58:06,360
9

905
00:58:25,830 --> 00:58:34,710
<font color="#CCCCCC">yes sir</font><font color="#E5E5E5"> here is the result and you can</font>

906
00:58:29,550 --> 00:58:38,310
see the lip of concern<font color="#E5E5E5"> of rupees</font><font color="#CCCCCC"> to me</font>

907
00:58:34,710 --> 00:58:43,260
<font color="#CCCCCC">Siri this is</font><font color="#E5E5E5"> our this</font><font color="#CCCCCC"> is for future</font><font color="#E5E5E5"> work</font>

908
00:58:38,310 --> 00:58:50,630
but so the result is<font color="#E5E5E5"> almost correct</font><font color="#CCCCCC"> you</font>

909
00:58:43,260 --> 00:58:57,410
can yeah this is<font color="#E5E5E5"> our generic code and</font>

910
00:58:50,630 --> 00:58:57,410
this one is<font color="#CCCCCC"> a result the truth</font>

911
00:59:02,320 --> 00:59:08,620
and these are the<font color="#CCCCCC"> read created works our</font>

912
00:59:05,650 --> 00:59:11,160
<font color="#E5E5E5">to deck is written by JavaScript and it</font>

913
00:59:08,620 --> 00:59:14,890
supports various architectures and

914
00:59:11,160 --> 00:59:17,339
<font color="#E5E5E5">reticle is written by</font><font color="#CCCCCC"> steepest</font><font color="#E5E5E5"> pass this</font>

915
00:59:14,890 --> 00:59:21,690
to<font color="#CCCCCC"> Kampala is based on a European</font><font color="#E5E5E5"> and</font>

916
00:59:17,340 --> 00:59:25,030
some some apricots are implemented in it

917
00:59:21,690 --> 00:59:25,750
radical is implemented by rust and the

918
00:59:25,030 --> 00:59:31,090
<font color="#E5E5E5">impetus</font>

919
00:59:25,750 --> 00:59:41,770
yes<font color="#CCCCCC"> hire others or this or this</font><font color="#E5E5E5"> assembly</font>

920
00:59:31,090 --> 00:59:44,710
language under radical is sorry yes<font color="#CCCCCC"> il</font>

921
00:59:41,770 --> 00:59:47,140
is intermediate<font color="#CCCCCC"> language of radical and</font>

922
00:59:44,710 --> 00:59:49,450
the radical is available for various

923
00:59:47,140 --> 00:59:52,150
various architectures as long as<font color="#E5E5E5"> ESI</font>

924
00:59:49,450 --> 00:59:55,689
supports it means we don't have<font color="#E5E5E5"> to</font><font color="#CCCCCC"> write</font>

925
00:59:52,150 --> 00:59:58,750
<font color="#CCCCCC">: radical to support new architectures</font>

926
00:59:55,690 --> 01:00:01,920
<font color="#E5E5E5">and you should have to write but you</font>

927
00:59:58,750 --> 01:00:06,700
<font color="#CCCCCC">should have to write a translator</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> efi</font>

928
01:00:01,920 --> 01:00:10,330
and these are<font color="#CCCCCC"> to project</font><font color="#E5E5E5"> there are two</font>

929
01:00:06,700 --> 01:00:13,330
<font color="#E5E5E5">projects related to radical radical is</font>

930
01:00:10,330 --> 01:00:16,090
library<font color="#E5E5E5"> for binary analysis and the</font>

931
01:00:13,330 --> 01:00:20,200
compilation<font color="#E5E5E5"> and radicalism user</font>

932
01:00:16,090 --> 01:00:23,320
interface for using radical<font color="#CCCCCC"> ape and the</font>

933
01:00:20,200 --> 01:00:25,930
<font color="#E5E5E5">radical</font><font color="#CCCCCC"> it is designed not only for the</font>

934
01:00:23,320 --> 01:00:29,230
compilation<font color="#E5E5E5"> but but also for designed</font>

935
01:00:25,930 --> 01:00:34,149
for<font color="#CCCCCC"> design designs that</font><font color="#E5E5E5"> people can write</font>

936
01:00:29,230 --> 01:00:38,820
their<font color="#E5E5E5"> own analysis I will explain the</font>

937
01:00:34,150 --> 01:00:41,590
<font color="#E5E5E5">design of radical recent ESL</font><font color="#CCCCCC"> to and</font>

938
01:00:38,820 --> 01:00:46,450
function name and<font color="#E5E5E5"> string tables to</font>

939
01:00:41,590 --> 01:00:50,350
radical with<font color="#E5E5E5"> our</font><font color="#CCCCCC"> teapot and radical uses</font>

940
01:00:46,450 --> 01:00:53,350
the<font color="#CCCCCC"> information in three stages first</font>

941
01:00:50,350 --> 01:00:57,130
<font color="#E5E5E5">stages is first</font><font color="#CCCCCC"> stages</font><font color="#E5E5E5"> too low the</font>

942
01:00:53,350 --> 01:01:00,100
binary and radical constructs its

943
01:00:57,130 --> 01:01:03,190
internal representation<font color="#E5E5E5"> and the second</font>

944
01:01:00,100 --> 01:01:06,580
stage<font color="#E5E5E5"> is for doing</font><font color="#CCCCCC"> analysis this stage</font>

945
01:01:03,190 --> 01:01:10,120
is optional because<font color="#E5E5E5"> what we have to do</font>

946
01:01:06,580 --> 01:01:13,540
is done at first stage the third<font color="#E5E5E5"> stage</font>

947
01:01:10,120 --> 01:01:16,058
<font color="#E5E5E5">is</font><font color="#CCCCCC"> the two compilation stage which we</font>

948
01:01:13,540 --> 01:01:20,680
use heuristics<font color="#CCCCCC"> to recover</font>

949
01:01:16,059 --> 01:01:23,849
<font color="#E5E5E5">code from internal representation and we</font>

950
01:01:20,680 --> 01:01:27,368
applied control flow graph<font color="#E5E5E5"> we applied</font>

951
01:01:23,849 --> 01:01:30,910
control flow structure in heroism this

952
01:01:27,369 --> 01:01:34,239
is implemented<font color="#E5E5E5"> by</font><font color="#CCCCCC"> agent person</font><font color="#E5E5E5"> one he's</font>

953
01:01:30,910 --> 01:01:37,930
also Disick<font color="#CCCCCC"> student this year he will</font>

954
01:01:34,239 --> 01:01:40,329
<font color="#E5E5E5">talk after my</font><font color="#CCCCCC"> presentation and left to</font>

955
01:01:37,930 --> 01:01:43,149
figure<font color="#E5E5E5"> is the state of radical before</font>

956
01:01:40,329 --> 01:01:46,119
<font color="#E5E5E5">jisuk and the right one</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> after his</font>

957
01:01:43,150 --> 01:01:48,759
talk<font color="#E5E5E5"> you can see function we can see</font>

958
01:01:46,119 --> 01:01:53,619
functions which emits<font color="#CCCCCC"> C code from logic</font>

959
01:01:48,759 --> 01:01:56,410
we are implemented<font color="#E5E5E5"> my works are</font>

960
01:01:53,619 --> 01:01:59,769
recovering see like expressions from<font color="#E5E5E5"> IR</font>

961
01:01:56,410 --> 01:02:04,859
and recovering<font color="#E5E5E5"> sugar</font><font color="#CCCCCC"> silicon from see</font>

962
01:01:59,769 --> 01:02:07,660
like<font color="#CCCCCC"> CFD what is IR or radical is</font>

963
01:02:04,859 --> 01:02:11,680
assembly like language<font color="#E5E5E5"> it's generated</font>

964
01:02:07,660 --> 01:02:15,910
from yes<font color="#E5E5E5"> iron and it is also</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> a safe</font>

965
01:02:11,680 --> 01:02:20,348
form this<font color="#E5E5E5"> tyre is used entire nurse's in</font>

966
01:02:15,910 --> 01:02:22,749
radical and see like CFC means control

967
01:02:20,349 --> 01:02:26,319
flow graph with expression of<font color="#CCCCCC"> C</font>

968
01:02:22,749 --> 01:02:30,218
<font color="#E5E5E5">languages the difference between IR and</font>

969
01:02:26,319 --> 01:02:34,359
selects<font color="#CCCCCC"> these expression ever</font>

970
01:02:30,219 --> 01:02:37,229
expressions of ir a-- converted<font color="#E5E5E5"> and</font>

971
01:02:34,359 --> 01:02:40,089
<font color="#CCCCCC">civic expressions and destroyed two</font>

972
01:02:37,229 --> 01:02:43,239
<font color="#E5E5E5">instructions of</font><font color="#CCCCCC"> ir</font><font color="#E5E5E5"> a--</font>

973
01:02:40,089 --> 01:02:49,749
equal balance to one one assignments of

974
01:02:43,239 --> 01:02:56,019
<font color="#CCCCCC">civic CFC above one is</font><font color="#E5E5E5"> there are code</font>

975
01:02:49,749 --> 01:02:58,359
<font color="#E5E5E5">one assignment of CX CFC</font><font color="#CCCCCC"> he has here is</font>

976
01:02:56,019 --> 01:03:02,348
how i recovers selects expressions from

977
01:02:58,359 --> 01:03:06,279
ir<font color="#E5E5E5"> since select CFC has the same</font>

978
01:03:02,349 --> 01:03:11,949
structure to CFC of ir we just copy the

979
01:03:06,279 --> 01:03:15,819
graph the expression of ir is the is<font color="#CCCCCC"> 3 a</font>

980
01:03:11,949 --> 01:03:18,579
dress code and we can<font color="#E5E5E5"> recover the</font>

981
01:03:15,819 --> 01:03:21,910
expressions by constructing<font color="#E5E5E5"> expressions</font>

982
01:03:18,579 --> 01:03:24,939
expression trees in destroyed left

983
01:03:21,910 --> 01:03:26,500
expressions are parts of higher these

984
01:03:24,939 --> 01:03:29,618
are be<font color="#CCCCCC"> TOA</font><font color="#E5E5E5"> and the</font>

985
01:03:26,500 --> 01:03:33,310
and operation these<font color="#E5E5E5"> are combined to</font>

986
01:03:29,619 --> 01:03:37,960
really like the light figure this can be

987
01:03:33,310 --> 01:03:42,220
seen as<font color="#CCCCCC"> as I was one of</font><font color="#E5E5E5"> Ch CST</font>

988
01:03:37,960 --> 01:03:46,950
expression this<font color="#CCCCCC"> is the way to translate</font>

989
01:03:42,220 --> 01:03:49,419
<font color="#CCCCCC">pseudo C code from Selig CFC</font><font color="#E5E5E5"> no</font><font color="#CCCCCC"> lips</font>

990
01:03:46,950 --> 01:03:51,790
looked look<font color="#CCCCCC"> sorry</font>

991
01:03:49,420 --> 01:03:55,330
no lip structures are recovered<font color="#E5E5E5"> in this</font>

992
01:03:51,790 --> 01:03:58,480
stage<font color="#E5E5E5"> restructuring is done by a chain</font>

993
01:03:55,330 --> 01:04:00,420
person one<font color="#CCCCCC"> the deku the comparison</font><font color="#E5E5E5"> is</font>

994
01:03:58,480 --> 01:04:04,770
done by translating<font color="#E5E5E5"> each i/o</font>

995
01:04:00,420 --> 01:04:07,570
instructions to<font color="#CCCCCC"> seek out other</font><font color="#E5E5E5"> addresses</font>

996
01:04:04,770 --> 01:04:10,420
assignments<font color="#E5E5E5"> to as dust you can go out</font>

997
01:04:07,570 --> 01:04:16,690
now<font color="#E5E5E5"> we</font><font color="#CCCCCC"> live with only assignments to</font>

998
01:04:10,420 --> 01:04:20,140
memory register<font color="#CCCCCC"> wiser sorry</font><font color="#E5E5E5"> register</font>

999
01:04:16,690 --> 01:04:25,150
<font color="#CCCCCC">bells are not considered as variables in</font>

1000
01:04:20,140 --> 01:04:27,129
other words<font color="#E5E5E5"> I assume it'll only I assume</font>

1001
01:04:25,150 --> 01:04:29,920
it's only temporary<font color="#CCCCCC"> bodies are stored in</font>

1002
01:04:27,130 --> 01:04:33,160
registers these assumptions are

1003
01:04:29,920 --> 01:04:37,540
sometimes<font color="#E5E5E5"> cause problems</font><font color="#CCCCCC"> in the</font><font color="#E5E5E5"> result</font>

1004
01:04:33,160 --> 01:04:43,210
<font color="#E5E5E5">because some some binary</font><font color="#CCCCCC"> uses uses</font>

1005
01:04:37,540 --> 01:04:45,400
<font color="#CCCCCC">registered variables torrent is since</font>

1006
01:04:43,210 --> 01:04:47,830
since I was a beginner of<font color="#E5E5E5"> program</font>

1007
01:04:45,400 --> 01:04:52,119
analysis I had to study compiler

1008
01:04:47,830 --> 01:04:54,250
optimization and binary analysis also<font color="#E5E5E5"> we</font>

1009
01:04:52,119 --> 01:04:57,220
had<font color="#E5E5E5"> to make sure there is no conflict</font>

1010
01:04:54,250 --> 01:04:59,170
between<font color="#CCCCCC"> agent passing ones and my work</font>

1011
01:04:57,220 --> 01:05:02,589
<font color="#E5E5E5">because</font><font color="#CCCCCC"> we are working</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> same</font>

1012
01:04:59,170 --> 01:05:05,950
project I think few people write the

1013
01:05:02,589 --> 01:05:08,589
compiler in the world so it was hard to

1014
01:05:05,950 --> 01:05:12,879
<font color="#E5E5E5">gather information how to</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> compile and</font>

1015
01:05:08,589 --> 01:05:15,400
<font color="#E5E5E5">see how to implement the Campania there</font>

1016
01:05:12,880 --> 01:05:18,160
are<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of students</font><font color="#E5E5E5"> in project for</font><font color="#CCCCCC"> fast</font>

1017
01:05:15,400 --> 01:05:22,030
release<font color="#E5E5E5"> we can see the remaining tasks</font>

1018
01:05:18,160 --> 01:05:25,149
in this URL<font color="#CCCCCC"> and</font><font color="#E5E5E5"> that's right</font><font color="#CCCCCC"> some others</font>

1019
01:05:22,030 --> 01:05:28,060
is harvest<font color="#E5E5E5"> bugs and radical live needs</font>

1020
01:05:25,150 --> 01:05:31,390
to provide stable<font color="#E5E5E5"> IPS so that everyone</font>

1021
01:05:28,060 --> 01:05:35,230
can write<font color="#E5E5E5"> their own analysis we also</font>

1022
01:05:31,390 --> 01:05:37,450
have to write the documentation here is

1023
01:05:35,230 --> 01:05:39,520
<font color="#E5E5E5">my</font><font color="#CCCCCC"> commits graph you can see I have</font>

1024
01:05:37,450 --> 01:05:40,480
constantly committed during<font color="#E5E5E5"> the Chuseok</font>

1025
01:05:39,520 --> 01:05:43,310
period

1026
01:05:40,480 --> 01:05:45,730
this is the end<font color="#E5E5E5"> of my presentation thank</font>

1027
01:05:43,310 --> 01:05:45,730
you for<font color="#E5E5E5"> listening</font>

1028
01:05:46,470 --> 01:06:05,419
[Applause]

1029
01:05:52,120 --> 01:06:12,160
do you have any question hello and thank

1030
01:06:05,420 --> 01:06:14,330
<font color="#E5E5E5">you I would</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> to ask if your or your</font>

1031
01:06:12,160 --> 01:06:20,359
internal representation there are the

1032
01:06:14,330 --> 01:06:21,940
key<font color="#CCCCCC"> L supports types</font><font color="#E5E5E5"> oh not yet</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

1033
01:06:20,360 --> 01:06:26,200
our<font color="#E5E5E5"> future work</font>

1034
01:06:21,940 --> 01:06:30,470
this is our two days for<font color="#CCCCCC"> fast release so</font>

1035
01:06:26,200 --> 01:06:35,990
it might<font color="#CCCCCC"> be it might be done yeah yeah</font>

1036
01:06:30,470 --> 01:06:45,950
yeah<font color="#E5E5E5"> I guess yes</font><font color="#CCCCCC"> then another</font><font color="#E5E5E5"> question</font>

1037
01:06:35,990 --> 01:06:50,689
<font color="#E5E5E5">would be I suppose the control for</font>

1038
01:06:45,950 --> 01:07:00,020
structuring is the next person's<font color="#E5E5E5"> yes yes</font>

1039
01:06:50,690 --> 01:07:08,300
yeah<font color="#CCCCCC"> that case yeah that's all any other</font>

1040
01:07:00,020 --> 01:07:13,759
question because types<font color="#E5E5E5"> currently already</font>

1041
01:07:08,300 --> 01:07:18,160
result in Arad<font color="#CCCCCC"> RA so future radical work</font>

1042
01:07:13,760 --> 01:07:18,160
will include synchronization with retire

1043
01:07:19,510 --> 01:07:22,510
<font color="#CCCCCC">Thanks</font>

1044
01:07:23,750 --> 01:07:31,149
[Applause]

1045
01:08:41,750 --> 01:08:49,520
so hello<font color="#E5E5E5"> everyone i'm michael zhang</font><font color="#CCCCCC"> i'm</font>

1046
01:08:47,720 --> 01:08:52,340
<font color="#CCCCCC">asian</font><font color="#E5E5E5"> person</font><font color="#CCCCCC"> one on github and telegram</font>

1047
01:08:49,520 --> 01:08:54,680
<font color="#CCCCCC">i am a second-year</font><font color="#E5E5E5"> CS major university</font><font color="#CCCCCC"> i</font>

1048
01:08:52,340 --> 01:08:59,360
use<font color="#CCCCCC"> our through the places yet sometimes</font>

1049
01:08:54,680 --> 01:09:02,450
<font color="#E5E5E5">well</font><font color="#CCCCCC"> I use aren't you to play</font><font color="#E5E5E5"> CPF</font>

1050
01:08:59,359 --> 01:09:05,029
sometimes and I like compilers<font color="#E5E5E5"> so this</font>

1051
01:09:02,450 --> 01:09:08,750
<font color="#E5E5E5">Summer of Code</font><font color="#CCCCCC"> I worked on</font><font color="#E5E5E5"> control flow</font>

1052
01:09:05,029 --> 01:09:11,710
<font color="#CCCCCC">structuring for ronica</font><font color="#E5E5E5"> so as</font><font color="#CCCCCC"> you just</font>

1053
01:09:08,750 --> 01:09:14,359
<font color="#CCCCCC">mentioned right I go</font>

1054
01:09:11,710 --> 01:09:16,399
we start with ISIL and<font color="#E5E5E5"> then we can write</font>

1055
01:09:14,359 --> 01:09:18,710
<font color="#E5E5E5">that into our own internal IR and then</font>

1056
01:09:16,399 --> 01:09:21,740
we can write<font color="#E5E5E5"> that into</font><font color="#CCCCCC"> C C F G</font><font color="#E5E5E5"> and then</font>

1057
01:09:18,710 --> 01:09:25,010
the<font color="#E5E5E5"> control flow graph then say</font><font color="#CCCCCC"> C ast</font>

1058
01:09:21,740 --> 01:09:26,450
and my part comes here we can breathing

1059
01:09:25,010 --> 01:09:29,180
from control kilogram<font color="#CCCCCC"> to win the</font>

1060
01:09:26,450 --> 01:09:31,910
<font color="#CCCCCC">obsessed abstract</font><font color="#E5E5E5"> syntax tree so this</font>

1061
01:09:29,180 --> 01:09:34,220
summer most of my work was<font color="#CCCCCC"> based on this</font>

1062
01:09:31,910 --> 01:09:35,510
2015 paper titled no more<font color="#E5E5E5"> goatees</font><font color="#CCCCCC"> d</font>

1063
01:09:34,220 --> 01:09:37,130
compilation using power than the<font color="#CCCCCC"> pending</font>

1064
01:09:35,510 --> 01:09:39,530
control flow structuring hence me ethics

1065
01:09:37,130 --> 01:09:41,330
<font color="#E5E5E5">ring semantics</font><font color="#CCCCCC"> preserving off the four</font>

1066
01:09:39,529 --> 01:09:44,059
transformations<font color="#CCCCCC"> which I will call no</font>

1067
01:09:41,330 --> 01:09:45,920
more<font color="#CCCCCC"> goat youth from now on and yeah</font>

1068
01:09:44,060 --> 01:09:48,440
most of this<font color="#E5E5E5"> talk is</font><font color="#CCCCCC"> just based on that</font>

1069
01:09:45,920 --> 01:09:50,990
paper<font color="#E5E5E5"> so</font><font color="#CCCCCC"> what is control</font><font color="#E5E5E5"> flow</font>

1070
01:09:48,439 --> 01:09:52,790
structuring so when you<font color="#E5E5E5"> d compile a</font>

1071
01:09:50,990 --> 01:09:54,889
binary you get about a control flow

1072
01:09:52,790 --> 01:09:56,570
graph that looks like this<font color="#E5E5E5"> and unless</font>

1073
01:09:54,890 --> 01:09:58,370
you've stared that control flow graphs

1074
01:09:56,570 --> 01:10:01,340
for like<font color="#CCCCCC"> ten</font><font color="#E5E5E5"> years or something</font><font color="#CCCCCC"> this</font>

1075
01:09:58,370 --> 01:10:03,260
doesn't really<font color="#CCCCCC"> make that</font><font color="#E5E5E5"> much sense but</font>

1076
01:10:01,340 --> 01:10:05,360
so control flow structuring turns that

1077
01:10:03,260 --> 01:10:08,240
into<font color="#CCCCCC"> a control flow represented by if</font>

1078
01:10:05,360 --> 01:10:10,070
statements or<font color="#E5E5E5"> loops and for most people</font>

1079
01:10:08,240 --> 01:10:14,090
this is<font color="#E5E5E5"> much more readable than this</font>

1080
01:10:10,070 --> 01:10:19,190
so only<font color="#CCCCCC"> write the compiler we want want</font>

1081
01:10:14,090 --> 01:10:21,260
<font color="#E5E5E5">our output to look more</font><font color="#CCCCCC"> like this so</font>

1082
01:10:19,190 --> 01:10:23,030
most thing compilers achieve this by

1083
01:10:21,260 --> 01:10:25,610
<font color="#CCCCCC">using what's called structural analysis</font>

1084
01:10:23,030 --> 01:10:27,080
<font color="#E5E5E5">and this is basically</font><font color="#CCCCCC"> just paradigm</font>

1085
01:10:25,610 --> 01:10:30,080
matching on sub graphs against a

1086
01:10:27,080 --> 01:10:32,900
predefined set<font color="#CCCCCC"> of existing patterns for</font>

1087
01:10:30,080 --> 01:10:34,490
loops or for if-else<font color="#E5E5E5"> statements and this</font>

1088
01:10:32,900 --> 01:10:39,080
<font color="#E5E5E5">is used by</font><font color="#CCCCCC"> heck scenario our deck</font><font color="#E5E5E5"> and</font>

1089
01:10:34,490 --> 01:10:41,960
<font color="#CCCCCC">basically every other decompiler so as a</font>

1090
01:10:39,080 --> 01:10:44,840
short example the control<font color="#CCCCCC"> flow graph I</font>

1091
01:10:41,960 --> 01:10:46,670
just showed<font color="#E5E5E5"> structural analysis will see</font>

1092
01:10:44,840 --> 01:10:48,680
that this<font color="#E5E5E5"> looks like a while</font><font color="#CCCCCC"> loop</font><font color="#E5E5E5"> and so</font>

1093
01:10:46,670 --> 01:10:50,210
it turns that into a while loop and then

1094
01:10:48,680 --> 01:10:51,160
it sees<font color="#CCCCCC"> that these two</font><font color="#E5E5E5"> nodes look like</font>

1095
01:10:50,210 --> 01:10:52,750
<font color="#E5E5E5">in it</font>

1096
01:10:51,160 --> 01:10:54,340
so it turns into an if statement<font color="#E5E5E5"> and</font>

1097
01:10:52,750 --> 01:10:57,520
then this is<font color="#CCCCCC"> just a note followed</font><font color="#E5E5E5"> by</font>

1098
01:10:54,340 --> 01:11:00,610
another note so that's trivial

1099
01:10:57,520 --> 01:11:02,950
except<font color="#E5E5E5"> that structural analysis just</font>

1100
01:11:00,610 --> 01:11:05,679
doesn't work<font color="#E5E5E5"> for arbitrary graphs for</font>

1101
01:11:02,950 --> 01:11:12,940
<font color="#E5E5E5">example this graph over here</font><font color="#CCCCCC"> there's no</font>

1102
01:11:05,680 --> 01:11:15,160
pattern<font color="#E5E5E5"> that and there's no</font><font color="#CCCCCC"> pattern that</font>

1103
01:11:12,940 --> 01:11:16,719
like<font color="#CCCCCC"> a false statement there's no</font>

1104
01:11:15,160 --> 01:11:19,480
<font color="#E5E5E5">apparent if-else statements or loops or</font>

1105
01:11:16,720 --> 01:11:21,280
any combination can produce this control

1106
01:11:19,480 --> 01:11:24,669
flow graph<font color="#CCCCCC"> exactly</font><font color="#E5E5E5"> it looks</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> maybe</font>

1107
01:11:21,280 --> 01:11:26,259
this part these three<font color="#E5E5E5"> nodes</font><font color="#CCCCCC"> looked</font><font color="#E5E5E5"> like</font>

1108
01:11:24,670 --> 01:11:27,310
<font color="#E5E5E5">it could be part</font><font color="#CCCCCC"> of an if-else statement</font>

1109
01:11:26,260 --> 01:11:28,960
<font color="#E5E5E5">but then there's this edge here</font><font color="#CCCCCC"> that</font>

1110
01:11:27,310 --> 01:11:32,020
<font color="#E5E5E5">jumps into the middle of that so that</font>

1111
01:11:28,960 --> 01:11:33,850
won't<font color="#E5E5E5"> work</font><font color="#CCCCCC"> and so most d compilers will</font>

1112
01:11:32,020 --> 01:11:35,110
insert a go-to statement<font color="#CCCCCC"> they'll replace</font>

1113
01:11:33,850 --> 01:11:40,330
one of<font color="#E5E5E5"> these edges with a ghost</font><font color="#CCCCCC"> u</font>

1114
01:11:35,110 --> 01:11:42,549
statement and<font color="#CCCCCC"> just move</font><font color="#E5E5E5"> on but it would</font>

1115
01:11:40,330 --> 01:11:44,800
<font color="#E5E5E5">be nice if we can have output that has</font>

1116
01:11:42,550 --> 01:11:46,420
<font color="#CCCCCC">zero gothe use so that's</font><font color="#E5E5E5"> for pattern</font>

1117
01:11:44,800 --> 01:11:48,610
independent control flow structuring

1118
01:11:46,420 --> 01:11:52,150
comes in and this<font color="#CCCCCC"> is what really</font><font color="#E5E5E5"> when</font>

1119
01:11:48,610 --> 01:11:54,370
rather<font color="#CCCCCC"> it go so as a motivating example</font>

1120
01:11:52,150 --> 01:11:56,920
here is a very complicated control flow

1121
01:11:54,370 --> 01:11:59,860
graph<font color="#E5E5E5"> you can see this</font><font color="#CCCCCC"> section is the</font>

1122
01:11:56,920 --> 01:12:01,630
small graph I showed earlier<font color="#E5E5E5"> here is a</font>

1123
01:11:59,860 --> 01:12:04,860
while loop<font color="#CCCCCC"> with a break statement here</font>

1124
01:12:01,630 --> 01:12:09,130
is another while loop with a very weird

1125
01:12:04,860 --> 01:12:11,889
condition so<font color="#CCCCCC"> hex race will be compile</font>

1126
01:12:09,130 --> 01:12:13,780
this as this spaghetti mess of<font color="#E5E5E5"> go</font>

1127
01:12:11,890 --> 01:12:15,700
<font color="#E5E5E5">through statements</font><font color="#CCCCCC"> like up here</font><font color="#E5E5E5"> it's</font>

1128
01:12:13,780 --> 01:12:18,400
<font color="#CCCCCC">maybe readable but here we have a loop</font>

1129
01:12:15,700 --> 01:12:22,030
and if and a jump outside<font color="#E5E5E5"> of the loop</font>

1130
01:12:18,400 --> 01:12:23,980
<font color="#E5E5E5">and then after the loop we have another</font>

1131
01:12:22,030 --> 01:12:25,809
jump in back into<font color="#CCCCCC"> the</font><font color="#E5E5E5"> loop and</font>

1132
01:12:23,980 --> 01:12:29,820
<font color="#E5E5E5">continuing the loop like this this is</font>

1133
01:12:25,810 --> 01:12:32,050
<font color="#CCCCCC">just completely</font><font color="#E5E5E5"> undone</font><font color="#CCCCCC"> size ripple but</font>

1134
01:12:29,820 --> 01:12:34,509
with the algorithm<font color="#E5E5E5"> described in the</font><font color="#CCCCCC"> know</font>

1135
01:12:32,050 --> 01:12:38,220
more go<font color="#CCCCCC"> to use paper</font><font color="#E5E5E5"> we can</font><font color="#CCCCCC"> have output</font>

1136
01:12:34,510 --> 01:12:46,200
that<font color="#E5E5E5"> has zero go</font><font color="#CCCCCC"> to x'</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> so nice</font>

1137
01:12:38,220 --> 01:12:46,200
<font color="#E5E5E5">so let's do a live demo</font><font color="#CCCCCC"> so</font>

1138
01:12:48,430 --> 01:13:09,830
here we have a binary and smaller<font color="#E5E5E5"> here</font>

1139
01:13:07,850 --> 01:13:14,420
you can see that<font color="#E5E5E5"> this control photograph</font>

1140
01:13:09,830 --> 01:13:20,720
is in fact this control photograph kind

1141
01:13:14,420 --> 01:13:22,280
of mostly right<font color="#CCCCCC"> now this this so this</font>

1142
01:13:20,720 --> 01:13:32,870
this binary<font color="#E5E5E5"> has the same control flow</font>

1143
01:13:22,280 --> 01:13:38,139
graph<font color="#E5E5E5"> as this example and if we</font>

1144
01:13:32,870 --> 01:13:40,610
decompile this with our<font color="#E5E5E5"> two deck it just</font>

1145
01:13:38,140 --> 01:13:43,070
doesn't<font color="#E5E5E5"> it</font><font color="#CCCCCC"> just gives up that's</font>

1146
01:13:40,610 --> 01:13:45,139
basically<font color="#E5E5E5"> it there's</font><font color="#CCCCCC"> goatees</font><font color="#E5E5E5"> everywhere</font>

1147
01:13:43,070 --> 01:13:48,969
there's like<font color="#E5E5E5"> oops</font>

1148
01:13:45,140 --> 01:13:52,070
both use inside<font color="#CCCCCC"> of your while loops</font><font color="#E5E5E5"> it</font>

1149
01:13:48,970 --> 01:13:54,440
<font color="#CCCCCC">architect tries to have its output</font>

1150
01:13:52,070 --> 01:13:56,269
remained fairly similar<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

1151
01:13:54,440 --> 01:13:57,889
disassembly so it won't try<font color="#CCCCCC"> to reorder</font>

1152
01:13:56,270 --> 01:14:02,050
<font color="#E5E5E5">blocks in order to avoid goto statements</font>

1153
01:13:57,890 --> 01:14:08,210
<font color="#E5E5E5">but this is quite confusing to</font><font color="#CCCCCC"> look at</font>

1154
01:14:02,050 --> 01:14:10,360
so<font color="#CCCCCC"> we can see what red Dex</font><font color="#E5E5E5"> thinks of</font>

1155
01:14:08,210 --> 01:14:10,360
this

1156
01:14:25,719 --> 01:14:39,760
so here is<font color="#E5E5E5"> our function oops</font>

1157
01:14:34,830 --> 01:14:42,730
and you can see it has reduced a lot<font color="#E5E5E5"> of</font>

1158
01:14:39,760 --> 01:14:44,920
<font color="#CCCCCC">arenas successfully produced control</font>

1159
01:14:42,730 --> 01:14:49,839
structure control flow for most of the

1160
01:14:44,920 --> 01:14:53,500
function<font color="#E5E5E5"> however here</font><font color="#CCCCCC"> you can see at the</font>

1161
01:14:49,840 --> 01:14:55,750
<font color="#E5E5E5">end there</font><font color="#CCCCCC"> is a while loop whose body</font>

1162
01:14:53,500 --> 01:14:58,000
ends with a go<font color="#E5E5E5"> through statement so this</font>

1163
01:14:55,750 --> 01:15:01,480
<font color="#E5E5E5">is this loop this entirely useless and</font>

1164
01:14:58,000 --> 01:15:04,030
<font color="#CCCCCC">that jumps path that goes go</font><font color="#E5E5E5"> that jumps</font>

1165
01:15:01,480 --> 01:15:06,639
<font color="#E5E5E5">up back inside</font><font color="#CCCCCC"> of this</font><font color="#E5E5E5"> loop which is</font>

1166
01:15:04,030 --> 01:15:11,679
very<font color="#E5E5E5"> confusing and also another</font><font color="#CCCCCC"> thing</font>

1167
01:15:06,640 --> 01:15:13,989
<font color="#CCCCCC">right</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> has done is notice in this</font>

1168
01:15:11,680 --> 01:15:19,300
control flow graph<font color="#E5E5E5"> all of</font><font color="#CCCCCC"> the edges go</font>

1169
01:15:13,989 --> 01:15:21,580
to this exit<font color="#CCCCCC"> node node 9</font><font color="#E5E5E5"> red tag has</font>

1170
01:15:19,300 --> 01:15:27,910
actually duplicated<font color="#E5E5E5"> that node several</font>

1171
01:15:21,580 --> 01:15:30,730
<font color="#E5E5E5">times yeah is</font><font color="#CCCCCC"> this duplicated that</font><font color="#E5E5E5"> note</font>

1172
01:15:27,910 --> 01:15:33,519
several<font color="#E5E5E5"> times which does produce</font><font color="#CCCCCC"> better</font>

1173
01:15:30,730 --> 01:15:38,218
control flow or better structured<font color="#E5E5E5"> I'll</font>

1174
01:15:33,520 --> 01:15:42,930
put but it's still there<font color="#CCCCCC"> still go to use</font>

1175
01:15:38,219 --> 01:15:42,930
but if we use<font color="#CCCCCC"> rod</font>

1176
01:15:54,670 --> 01:16:02,800
<font color="#E5E5E5">you can see we have the output as</font>

1177
01:15:58,630 --> 01:16:05,560
described here<font color="#CCCCCC"> if this</font><font color="#E5E5E5"> if statement got</font>

1178
01:16:02,800 --> 01:16:10,120
flipped<font color="#E5E5E5"> and this is so this is the loop</font>

1179
01:16:05,560 --> 01:16:14,050
from<font color="#E5E5E5"> the beginning and here we have this</font>

1180
01:16:10,120 --> 01:16:17,290
<font color="#CCCCCC">section for the if</font><font color="#E5E5E5"> if-else we have if it</font>

1181
01:16:14,050 --> 01:16:24,540
felts followed by loop followed<font color="#E5E5E5"> by the</font>

1182
01:16:17,290 --> 01:16:29,260
state<font color="#E5E5E5"> okay so how does this work</font>

1183
01:16:24,540 --> 01:16:31,239
so the algorithm<font color="#CCCCCC"> first we threw that</font>

1184
01:16:29,260 --> 01:16:34,179
<font color="#E5E5E5">first search of the entire control flow</font>

1185
01:16:31,239 --> 01:16:37,959
graph to<font color="#E5E5E5"> find back edges and then we</font>

1186
01:16:34,179 --> 01:16:39,370
<font color="#CCCCCC">save the order of the</font><font color="#E5E5E5"> node safe</font><font color="#CCCCCC"> the post</font>

1187
01:16:37,960 --> 01:16:42,460
ordering of the notes and then<font color="#CCCCCC"> iterate</font>

1188
01:16:39,370 --> 01:16:45,390
over<font color="#E5E5E5"> that and for each node if this is</font>

1189
01:16:42,460 --> 01:16:48,449
the<font color="#CCCCCC"> destiny</font><font color="#E5E5E5"> destination of a</font><font color="#CCCCCC"> package we</font>

1190
01:16:45,390 --> 01:16:51,310
this in this<font color="#E5E5E5"> region is a loop</font><font color="#CCCCCC"> otherwise</font>

1191
01:16:48,449 --> 01:16:52,570
there's no back edges and if the

1192
01:16:51,310 --> 01:16:53,800
<font color="#CCCCCC">southern</font><font color="#E5E5E5"> that was</font><font color="#CCCCCC"> dominated by this node</font>

1193
01:16:52,570 --> 01:16:55,690
has<font color="#E5E5E5"> a single successor research</font>

1194
01:16:53,800 --> 01:16:56,800
structure<font color="#E5E5E5"> this region otherwise we</font>

1195
01:16:55,690 --> 01:16:59,230
continue<font color="#E5E5E5"> right there anything this is</font>

1196
01:16:56,800 --> 01:17:04,510
<font color="#E5E5E5">just</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot of</font><font color="#CCCCCC"> words that</font><font color="#E5E5E5"> describe making</font>

1197
01:16:59,230 --> 01:17:06,639
these gray<font color="#CCCCCC"> boxes basically</font><font color="#E5E5E5"> so for each</font>

1198
01:17:04,510 --> 01:17:08,290
acyclic region we compute the reaching

1199
01:17:06,640 --> 01:17:09,670
condition for the each node and<font color="#CCCCCC"> then we</font>

1200
01:17:08,290 --> 01:17:12,519
move<font color="#E5E5E5"> all the graphs in your grass refine</font>

1201
01:17:09,670 --> 01:17:13,660
it we make an ast node and<font color="#E5E5E5"> extract the</font>

1202
01:17:12,520 --> 01:17:15,489
placated<font color="#E5E5E5"> conditions so what's to</font>

1203
01:17:13,660 --> 01:17:19,000
actually look like<font color="#E5E5E5"> so here's that</font>

1204
01:17:15,489 --> 01:17:20,468
control flow graph from earlier<font color="#E5E5E5"> so we</font>

1205
01:17:19,000 --> 01:17:21,790
<font color="#E5E5E5">compute the reaching conditions for each</font>

1206
01:17:20,469 --> 01:17:23,050
node so the first know there's<font color="#E5E5E5"> always</font>

1207
01:17:21,790 --> 01:17:26,800
<font color="#E5E5E5">reached so it has a reaching condition</font>

1208
01:17:23,050 --> 01:17:28,810
of true<font color="#CCCCCC"> this node was on the false</font>

1209
01:17:26,800 --> 01:17:31,150
branch of this first note so it gets a

1210
01:17:28,810 --> 01:17:32,320
reaching condition of not<font color="#CCCCCC"> c1 this was on</font>

1211
01:17:31,150 --> 01:17:34,929
the true branch so it gets a region

1212
01:17:32,320 --> 01:17:37,299
condition of<font color="#E5E5E5"> C 1 this</font><font color="#CCCCCC"> is reached by this</font>

1213
01:17:34,929 --> 01:17:42,850
<font color="#E5E5E5">node and this node so</font><font color="#CCCCCC"> it gets an or of</font>

1214
01:17:37,300 --> 01:17:45,239
the<font color="#E5E5E5"> reach ignitions of both so this so C</font>

1215
01:17:42,850 --> 01:17:48,219
1 naught C<font color="#CCCCCC"> naught</font><font color="#E5E5E5"> C 1 this down here and</font>

1216
01:17:45,239 --> 01:17:51,428
this was on<font color="#E5E5E5"> the false branch of C 2 so</font>

1217
01:17:48,219 --> 01:17:53,469
this<font color="#E5E5E5"> is actually C 1 or</font><font color="#CCCCCC"> R so this</font><font color="#E5E5E5"> is</font>

1218
01:17:51,429 --> 01:17:56,050
actually C 1 and not C 2 but we simply

1219
01:17:53,469 --> 01:17:58,600
that simplifies down to not<font color="#E5E5E5"> C 1 or not C</font>

1220
01:17:56,050 --> 01:18:00,429
2 and then this<font color="#E5E5E5"> node</font><font color="#CCCCCC"> is reached</font><font color="#E5E5E5"> only if</font>

1221
01:17:58,600 --> 01:18:03,400
we take<font color="#CCCCCC"> the true branch of both nodes so</font>

1222
01:18:00,429 --> 01:18:05,040
it's C 1 and C 2 and then this node has

1223
01:18:03,400 --> 01:18:07,509
<font color="#CCCCCC">to</font>

1224
01:18:05,040 --> 01:18:12,460
so we<font color="#CCCCCC"> or</font><font color="#E5E5E5"> their conditions together and</font>

1225
01:18:07,510 --> 01:18:14,470
get true and then we notice that these

1226
01:18:12,460 --> 01:18:17,230
two nodes have opposite reaching

1227
01:18:14,470 --> 01:18:21,340
conditions so we can combine<font color="#E5E5E5"> them into</font>

1228
01:18:17,230 --> 01:18:23,860
<font color="#CCCCCC">an if-else statement</font><font color="#E5E5E5"> and then there's no</font>

1229
01:18:21,340 --> 01:18:26,110
<font color="#CCCCCC">more</font><font color="#E5E5E5"> there's no more refinements we can</font>

1230
01:18:23,860 --> 01:18:29,799
<font color="#CCCCCC">do with this graph and so we just take</font>

1231
01:18:26,110 --> 01:18:34,000
every code<font color="#E5E5E5"> node and surround surround it</font>

1232
01:18:29,800 --> 01:18:36,760
with<font color="#E5E5E5"> its reach and condition and just</font>

1233
01:18:34,000 --> 01:18:38,890
put them together into a<font color="#E5E5E5"> sequence and</font>

1234
01:18:36,760 --> 01:18:40,210
then we<font color="#CCCCCC"> notice we have C 1 here and C 1</font>

1235
01:18:38,890 --> 01:18:43,180
here

1236
01:18:40,210 --> 01:18:45,730
so you extract that to a<font color="#E5E5E5"> boolean</font>

1237
01:18:43,180 --> 01:18:50,080
<font color="#CCCCCC">variable and use</font><font color="#E5E5E5"> that in</font><font color="#CCCCCC"> both places in</font>

1238
01:18:45,730 --> 01:18:53,589
case because this<font color="#CCCCCC"> rc1 sure</font><font color="#E5E5E5"> they've only</font>

1239
01:18:50,080 --> 01:18:56,320
been evaluated once here but in this<font color="#E5E5E5"> ast</font>

1240
01:18:53,590 --> 01:18:58,330
it is possible that<font color="#E5E5E5"> in one could</font><font color="#CCCCCC"> have</font>

1241
01:18:56,320 --> 01:19:01,599
modified the variables used<font color="#E5E5E5"> in this</font>

1242
01:18:58,330 --> 01:19:03,370
condition so we<font color="#E5E5E5"> be duplicated and</font>

1243
01:19:01,600 --> 01:19:05,410
extracted above this statement<font color="#E5E5E5"> so that</font>

1244
01:19:03,370 --> 01:19:13,510
<font color="#CCCCCC">we know</font><font color="#E5E5E5"> that these</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> are going to be</font>

1245
01:19:05,410 --> 01:19:16,630
the same<font color="#E5E5E5"> so yeah</font><font color="#CCCCCC"> do this</font><font color="#E5E5E5"> and your cyclic</font>

1246
01:19:13,510 --> 01:19:18,340
regions<font color="#CCCCCC"> it's a bit more complicated</font><font color="#E5E5E5"> and</font>

1247
01:19:16,630 --> 01:19:22,570
we're<font color="#E5E5E5"> running low on time</font><font color="#CCCCCC"> so I'm</font><font color="#E5E5E5"> going</font>

1248
01:19:18,340 --> 01:19:25,150
<font color="#CCCCCC">to just skip all</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> this I guess it's</font>

1249
01:19:22,570 --> 01:19:33,250
<font color="#CCCCCC">not that important and then we once</font>

1250
01:19:25,150 --> 01:19:35,920
we've loop<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right so we replaced all</font>

1251
01:19:33,250 --> 01:19:38,530
the we we've previously<font color="#E5E5E5"> replaced all the</font>

1252
01:19:35,920 --> 01:19:39,820
<font color="#E5E5E5">exits of</font><font color="#CCCCCC"> the loop with break and so that</font>

1253
01:19:38,530 --> 01:19:41,620
effectively<font color="#E5E5E5"> turns the loop into an</font>

1254
01:19:39,820 --> 01:19:42,910
infinite<font color="#CCCCCC"> loop as far as the ast as far</font>

1255
01:19:41,620 --> 01:19:44,860
as the control<font color="#E5E5E5"> flow graph is concerned</font>

1256
01:19:42,910 --> 01:19:47,019
so we put the body of the loop in an

1257
01:19:44,860 --> 01:19:49,960
infinite in an infinite<font color="#E5E5E5"> loop and then</font>

1258
01:19:47,020 --> 01:19:52,840
refine<font color="#E5E5E5"> the</font><font color="#CCCCCC"> AST with this</font><font color="#E5E5E5"> giant pile of</font>

1259
01:19:49,960 --> 01:19:54,610
rules<font color="#CCCCCC"> the mathematical notation here</font><font color="#E5E5E5"> is</font>

1260
01:19:52,840 --> 01:19:56,560
<font color="#CCCCCC">a bit complicated so</font><font color="#E5E5E5"> it would be clear</font>

1261
01:19:54,610 --> 01:19:59,490
to<font color="#E5E5E5"> just walk through an example</font><font color="#CCCCCC"> and here</font>

1262
01:19:56,560 --> 01:20:02,350
is the<font color="#E5E5E5"> region r1 from the example above</font>

1263
01:19:59,490 --> 01:20:05,349
our<font color="#E5E5E5"> example previously and we see we</font>

1264
01:20:02,350 --> 01:20:07,120
have<font color="#CCCCCC"> an infinite loop whose</font><font color="#E5E5E5"> body is just</font>

1265
01:20:05,350 --> 01:20:10,870
an if-else statement and so we can

1266
01:20:07,120 --> 01:20:12,730
change that to<font color="#E5E5E5"> B we can change the if</font>

1267
01:20:10,870 --> 01:20:16,630
branch<font color="#E5E5E5"> of the if statement into just a</font>

1268
01:20:12,730 --> 01:20:17,320
separate loop and then<font color="#E5E5E5"> we see we have an</font>

1269
01:20:16,630 --> 01:20:19,449
<font color="#CCCCCC">infinite loop</font>

1270
01:20:17,320 --> 01:20:21,309
<font color="#E5E5E5">who's Bonnie's last payment is a</font>

1271
01:20:19,449 --> 01:20:26,428
conditional break<font color="#E5E5E5"> and so we can turn</font>

1272
01:20:21,310 --> 01:20:29,770
that<font color="#CCCCCC"> into a do-while loop and that's it</font>

1273
01:20:26,429 --> 01:20:31,510
<font color="#CCCCCC">I'd like to thank crew for working on</font>

1274
01:20:29,770 --> 01:20:33,130
<font color="#E5E5E5">the rest of the decompiler so I could do</font>

1275
01:20:31,510 --> 01:20:34,869
<font color="#E5E5E5">control flow structuring without</font>

1276
01:20:33,130 --> 01:20:38,790
worrying about everything<font color="#E5E5E5"> else</font>

1277
01:20:34,869 --> 01:20:42,389
solution 94<font color="#CCCCCC"> to maybe D and X</font><font color="#E5E5E5"> polka or</font>

1278
01:20:38,790 --> 01:20:42,389
mentoring me this summer

1279
01:20:46,500 --> 01:20:53,159
[Applause]

1280
01:20:58,849 --> 01:21:07,709
hello and thank<font color="#CCCCCC"> you first off like</font><font color="#E5E5E5"> I am</font>

1281
01:21:04,320 --> 01:21:10,768
writing<font color="#E5E5E5"> currently this same algorithm</font>

1282
01:21:07,709 --> 01:21:16,070
for a different decompiler so<font color="#CCCCCC"> I would</font>

1283
01:21:10,769 --> 01:21:19,079
like<font color="#E5E5E5"> to ask of how do you plan on</font>

1284
01:21:16,070 --> 01:21:23,219
simplifying reaching conditions because

1285
01:21:19,079 --> 01:21:27,018
even for<font color="#CCCCCC"> a this very simple CFG you</font>

1286
01:21:23,219 --> 01:21:32,760
ended up with<font color="#E5E5E5"> well let's say large</font>

1287
01:21:27,019 --> 01:21:35,280
reaching conditions for<font color="#CCCCCC"> all for</font><font color="#E5E5E5"> the</font>

1288
01:21:32,760 --> 01:21:36,419
binary<font color="#E5E5E5"> that you demoed for this this</font>

1289
01:21:35,280 --> 01:21:39,409
whole graph<font color="#CCCCCC"> yes</font>

1290
01:21:36,419 --> 01:21:42,539
<font color="#CCCCCC">region conditions are</font><font color="#E5E5E5"> only per region</font><font color="#CCCCCC"> oh</font>

1291
01:21:39,409 --> 01:21:46,648
<font color="#E5E5E5">okay even though even if even if</font><font color="#CCCCCC"> the</font>

1292
01:21:42,539 --> 01:21:51,839
region is relatively compact<font color="#E5E5E5"> the region</font>

1293
01:21:46,649 --> 01:21:56,030
conditions will end up large that has

1294
01:21:51,839 --> 01:22:00,510
not been my<font color="#CCCCCC"> experience with testing this</font>

1295
01:21:56,030 --> 01:22:02,999
<font color="#CCCCCC">oh so you do</font><font color="#E5E5E5"> not plan on using any kind</font>

1296
01:22:00,510 --> 01:22:05,760
of method<font color="#E5E5E5"> to simplify</font><font color="#CCCCCC"> you simplify it</font>

1297
01:22:02,999 --> 01:22:09,329
slightly<font color="#CCCCCC"> right</font><font color="#E5E5E5"> cuz this technically</font>

1298
01:22:05,760 --> 01:22:11,010
should be not seen 1 or<font color="#E5E5E5"> C 1 and not</font><font color="#CCCCCC"> C 2</font>

1299
01:22:09,329 --> 01:22:12,599
but<font color="#E5E5E5"> we simplify</font><font color="#CCCCCC"> that now that just</font><font color="#E5E5E5"> not</font>

1300
01:22:11,010 --> 01:22:14,550
<font color="#E5E5E5">seeing one</font><font color="#CCCCCC"> or not</font><font color="#E5E5E5"> C 2 so we do some</font>

1301
01:22:12,599 --> 01:22:20,849
simple you some basic simplifications

1302
01:22:14,550 --> 01:22:25,169
but not nothing to advance<font color="#E5E5E5"> oh okay then</font>

1303
01:22:20,849 --> 01:22:29,219
I would like to ask how<font color="#CCCCCC"> many how many</font><font color="#E5E5E5"> of</font>

1304
01:22:25,169 --> 01:22:32,249
the rewriting<font color="#E5E5E5"> rules for loops</font>

1305
01:22:29,219 --> 01:22:34,469
do you have implemented in<font color="#CCCCCC"> Radek</font><font color="#E5E5E5"> oh we</font>

1306
01:22:32,249 --> 01:22:38,188
have all of<font color="#CCCCCC"> them</font><font color="#E5E5E5"> well</font>

1307
01:22:34,469 --> 01:22:40,949
like the most<font color="#E5E5E5"> all of them start with if</font>

1308
01:22:38,189 --> 01:22:43,309
<font color="#E5E5E5">L is an endless loop and endlessly</font>

1309
01:22:40,949 --> 01:22:46,320
endlessly -<font color="#CCCCCC"> they bind</font><font color="#E5E5E5"> the scoop so</font>

1310
01:22:43,309 --> 01:22:48,719
basically you just match on the body<font color="#E5E5E5"> and</font>

1311
01:22:46,320 --> 01:22:50,308
if<font color="#E5E5E5"> the last like this one if the first</font>

1312
01:22:48,719 --> 01:22:53,449
one<font color="#E5E5E5"> is a</font><font color="#CCCCCC"> brave and I</font><font color="#E5E5E5"> live with the last</font>

1313
01:22:50,309 --> 01:22:53,449
<font color="#E5E5E5">one is a break it to do a while loop</font>

1314
01:22:57,089 --> 01:23:14,260
yeah<font color="#E5E5E5"> thank you any other question</font>

1315
01:23:02,999 --> 01:23:16,148
thank you<font color="#E5E5E5"> so I should say that we have a</font>

1316
01:23:14,260 --> 01:23:18,429
dedicated<font color="#E5E5E5"> channel for</font><font color="#CCCCCC"> unequal</font>

1317
01:23:16,149 --> 01:23:23,699
development and testing so if<font color="#E5E5E5"> you're</font>

1318
01:23:18,429 --> 01:23:23,699
<font color="#E5E5E5">interested in being us on</font><font color="#CCCCCC"> our channel</font>

