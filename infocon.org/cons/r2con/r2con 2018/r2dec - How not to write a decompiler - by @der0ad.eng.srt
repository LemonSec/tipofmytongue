1
00:00:00,199 --> 00:00:10,230
<font color="#E5E5E5">all right sorry so next also</font><font color="#CCCCCC"> our two</font>

2
00:00:06,779 --> 00:00:14,240
deck<font color="#CCCCCC"> I'm Joe behind integrity I work for</font>

3
00:00:10,230 --> 00:00:19,590
and yes<font color="#CCCCCC"> and I brought this tool which is</font>

4
00:00:14,240 --> 00:00:22,560
the compiler for<font color="#CCCCCC"> rod re so first of all</font>

5
00:00:19,590 --> 00:00:25,560
<font color="#E5E5E5">I will release a</font><font color="#CCCCCC"> new version</font><font color="#E5E5E5"> after the</font>

6
00:00:22,560 --> 00:00:30,538
<font color="#CCCCCC">tolk he has a bunch of feature</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> I</font>

7
00:00:25,560 --> 00:00:33,870
will show today<font color="#CCCCCC"> I hope some</font><font color="#E5E5E5"> people will</font>

8
00:00:30,539 --> 00:00:36,989
like<font color="#E5E5E5"> it and if you</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> it and want</font><font color="#CCCCCC"> to</font>

9
00:00:33,870 --> 00:00:41,309
<font color="#CCCCCC">improve it</font><font color="#E5E5E5"> please do</font><font color="#CCCCCC"> I also want to</font>

10
00:00:36,989 --> 00:00:46,169
thank this guy<font color="#E5E5E5"> le chien that</font><font color="#CCCCCC"> helping me</font>

11
00:00:41,309 --> 00:00:49,070
on<font color="#E5E5E5"> writer</font><font color="#CCCCCC"> rewriting decor and he be the</font>

12
00:00:46,170 --> 00:00:51,629
main<font color="#E5E5E5"> amazing job with</font><font color="#CCCCCC"> the x86</font>

13
00:00:49,070 --> 00:00:54,000
<font color="#E5E5E5">implementation for detection and and</font>

14
00:00:51,629 --> 00:00:56,699
stuff<font color="#CCCCCC"> I also want to</font><font color="#E5E5E5"> thank all the</font>

15
00:00:54,000 --> 00:01:00,359
<font color="#CCCCCC">contributors of Firdous and during this</font>

16
00:00:56,699 --> 00:01:03,480
project<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have been a lot even just</font>

17
00:01:00,359 --> 00:01:05,820
opening an issue was super super<font color="#E5E5E5"> nice</font>

18
00:01:03,480 --> 00:01:10,380
<font color="#E5E5E5">because it means that some people</font><font color="#CCCCCC"> are</font>

19
00:01:05,820 --> 00:01:11,970
<font color="#E5E5E5">using so so I wonder spend whatever 32</font>

20
00:01:10,380 --> 00:01:14,850
is but I will<font color="#E5E5E5"> explain what are two</font>

21
00:01:11,970 --> 00:01:17,450
decades<font color="#E5E5E5"> our deck is just</font><font color="#CCCCCC"> a plugging it's</font>

22
00:01:14,850 --> 00:01:21,259
a mostly<font color="#E5E5E5"> written JavaScript if has</font>

23
00:01:17,450 --> 00:01:24,979
analytical running with its own

24
00:01:21,259 --> 00:01:27,689
JavaScript<font color="#E5E5E5"> embedded JavaScript engine</font>

25
00:01:24,979 --> 00:01:31,280
<font color="#CCCCCC">what it does it tries to convert the</font>

26
00:01:27,689 --> 00:01:35,460
assembly to some safe decoder or some

27
00:01:31,280 --> 00:01:37,610
just<font color="#E5E5E5"> tries to it's not perfect so you</font>

28
00:01:35,460 --> 00:01:40,649
see something wrong just report<font color="#E5E5E5"> it and</font>

29
00:01:37,610 --> 00:01:46,070
what it does<font color="#E5E5E5"> extend our to functionality</font>

30
00:01:40,650 --> 00:01:48,780
technically<font color="#CCCCCC"> our tool does have some 7c</font>

31
00:01:46,070 --> 00:01:53,880
brighter if you<font color="#E5E5E5"> want to call</font><font color="#CCCCCC"> it this</font><font color="#E5E5E5"> way</font>

32
00:01:48,780 --> 00:01:56,640
but<font color="#E5E5E5"> it's not</font><font color="#CCCCCC"> okay nor writing good</font><font color="#E5E5E5"> what</font>

33
00:01:53,880 --> 00:01:58,350
<font color="#E5E5E5">we working good so this I brought this</font>

34
00:01:56,640 --> 00:02:01,259
<font color="#E5E5E5">one just</font><font color="#CCCCCC"> because I want to make</font>

35
00:01:58,350 --> 00:02:05,130
something that<font color="#E5E5E5"> works slightly better on</font>

36
00:02:01,259 --> 00:02:08,538
<font color="#E5E5E5">that</font><font color="#CCCCCC"> so little</font><font color="#E5E5E5"> bit of history so what</font><font color="#CCCCCC"> I</font>

37
00:02:05,130 --> 00:02:14,489
have is I started<font color="#E5E5E5"> this project in May</font>

38
00:02:08,538 --> 00:02:17,099
2017<font color="#CCCCCC"> it was pretty different I</font><font color="#E5E5E5"> decided</font>

39
00:02:14,489 --> 00:02:21,030
to<font color="#E5E5E5"> use the common apart approach to the</font>

40
00:02:17,099 --> 00:02:24,179
the compiler problem so you have one

41
00:02:21,030 --> 00:02:27,629
<font color="#E5E5E5">plug-in per each architecture which</font>

42
00:02:24,180 --> 00:02:31,110
wasn't<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> to implement and was trying</font>

43
00:02:27,629 --> 00:02:33,959
not<font color="#E5E5E5"> the Lyndsey just was too hard</font>

44
00:02:31,110 --> 00:02:36,060
because every each time you have<font color="#E5E5E5"> to redo</font>

45
00:02:33,959 --> 00:02:41,220
each<font color="#CCCCCC"> stuff so it's a nice this</font><font color="#E5E5E5"> loop and</font>

46
00:02:36,060 --> 00:02:45,390
stuff<font color="#CCCCCC"> wasn't kind of not okay but he had</font>

47
00:02:41,220 --> 00:02:48,180
also several<font color="#CCCCCC"> Pro pros on the</font><font color="#E5E5E5"> this</font>

48
00:02:45,390 --> 00:02:49,920
approach then I did the first serve

49
00:02:48,180 --> 00:02:53,190
right and the second<font color="#E5E5E5"> right the previous</font>

50
00:02:49,920 --> 00:02:55,349
mode and I've decided to<font color="#E5E5E5"> take a deep</font>

51
00:02:53,190 --> 00:02:56,879
<font color="#CCCCCC">roach in a different way so what I</font>

52
00:02:55,349 --> 00:03:00,690
wanted<font color="#E5E5E5"> was something</font><font color="#CCCCCC"> that was a</font>

53
00:02:56,879 --> 00:03:04,370
completely independent<font color="#E5E5E5"> from the dot data</font>

54
00:03:00,690 --> 00:03:07,140
that I had I<font color="#E5E5E5"> wanted to be able to add a</font>

55
00:03:04,370 --> 00:03:10,349
new architecture in easy way without

56
00:03:07,140 --> 00:03:15,779
stressing too much on how<font color="#CCCCCC"> the</font><font color="#E5E5E5"> analogy</font>

57
00:03:10,349 --> 00:03:17,429
looked works and other particular points

58
00:03:15,780 --> 00:03:19,530
that you might have to implement it

59
00:03:17,430 --> 00:03:22,260
during the implantation<font color="#E5E5E5"> in your key</font>

60
00:03:19,530 --> 00:03:24,269
texture<font color="#CCCCCC"> I also didn't want to handle any</font>

61
00:03:22,260 --> 00:03:26,599
type<font color="#CCCCCC"> of binary</font><font color="#E5E5E5"> I just want to have data</font>

62
00:03:24,269 --> 00:03:31,489
<font color="#E5E5E5">from our to you and use it as it is and</font>

63
00:03:26,599 --> 00:03:34,409
I<font color="#CCCCCC"> won't so want to have some nice user</font>

64
00:03:31,489 --> 00:03:36,360
and say support<font color="#E5E5E5"> when there is something</font>

65
00:03:34,409 --> 00:03:40,470
wrong you<font color="#CCCCCC"> just do something and</font>

66
00:03:36,360 --> 00:03:44,209
magically<font color="#E5E5E5"> you can just submit the</font><font color="#CCCCCC"> data</font>

67
00:03:40,470 --> 00:03:48,080
without having<font color="#E5E5E5"> to share the binary or</font>

68
00:03:44,209 --> 00:03:50,010
having<font color="#CCCCCC"> issue with that</font><font color="#E5E5E5"> and I also did</font>

69
00:03:48,080 --> 00:03:53,069
<font color="#E5E5E5">transition because the first</font>

70
00:03:50,010 --> 00:03:55,170
<font color="#E5E5E5">implementation used</font><font color="#CCCCCC"> no</font><font color="#E5E5E5"> genius</font><font color="#CCCCCC"> but then</font>

71
00:03:53,069 --> 00:03:57,450
<font color="#CCCCCC">people told me</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> it wasn't okay</font>

72
00:03:55,170 --> 00:03:59,849
<font color="#CCCCCC">because the nucleus</font><font color="#E5E5E5"> is big and maybe you</font>

73
00:03:57,450 --> 00:04:02,609
don't<font color="#E5E5E5"> want to</font><font color="#CCCCCC"> install on your smart</font>

74
00:03:59,849 --> 00:04:05,250
<font color="#CCCCCC">phone or</font><font color="#E5E5E5"> whatever then I change it to</font>

75
00:04:02,610 --> 00:04:08,610
<font color="#E5E5E5">duct tape which is the core that I use</font>

76
00:04:05,250 --> 00:04:11,340
for running my<font color="#E5E5E5"> JavaScript code and it's</font>

77
00:04:08,610 --> 00:04:13,650
super<font color="#E5E5E5"> nice because you can script stuff</font>

78
00:04:11,340 --> 00:04:16,709
and add some cause<font color="#CCCCCC"> to</font><font color="#E5E5E5"> secrecy</font>

79
00:04:13,650 --> 00:04:20,040
cold so I can directly<font color="#E5E5E5"> Nicole</font><font color="#CCCCCC"> our two</font>

80
00:04:16,709 --> 00:04:23,280
libraries natively without even do you

81
00:04:20,040 --> 00:04:24,680
have to touch<font color="#E5E5E5"> the</font><font color="#CCCCCC"> ER I</font><font color="#E5E5E5"> don't stand there</font>

82
00:04:23,280 --> 00:04:27,960
are<font color="#CCCCCC"> you and stuff</font>

83
00:04:24,680 --> 00:04:29,520
so what support it has it has<font color="#CCCCCC"> arm</font>

84
00:04:27,960 --> 00:04:33,479
<font color="#CCCCCC">support AVR</font><font color="#E5E5E5"> needs</font>

85
00:04:29,520 --> 00:04:38,849
<font color="#E5E5E5">Motorola</font><font color="#CCCCCC"> Power PC</font><font color="#E5E5E5"> spark</font><font color="#CCCCCC"> v8 60 renesis</font>

86
00:04:33,480 --> 00:04:42,300
was<font color="#E5E5E5"> banned x86 of course</font><font color="#CCCCCC"> forearm I will</font>

87
00:04:38,850 --> 00:04:44,070
add soon or later<font color="#E5E5E5"> the arm 64 support</font>

88
00:04:42,300 --> 00:04:46,370
<font color="#E5E5E5">sorry about that but I</font>

89
00:04:44,070 --> 00:04:49,830
during the right I didn't have time to

90
00:04:46,370 --> 00:04:53,130
<font color="#CCCCCC">port</font><font color="#E5E5E5"> also that one and</font><font color="#CCCCCC"> for was there</font><font color="#E5E5E5"> is</font>

91
00:04:49,830 --> 00:04:56,460
some weeks is not<font color="#E5E5E5"> completely working but</font>

92
00:04:53,130 --> 00:04:59,360
you will<font color="#E5E5E5"> still have</font><font color="#CCCCCC"> some nice</font><font color="#E5E5E5"> output if</font>

93
00:04:56,460 --> 00:05:02,700
the<font color="#CCCCCC"> buy is not</font><font color="#E5E5E5"> too much up and</font>

94
00:04:59,360 --> 00:05:06,120
x86 right now is the has the most

95
00:05:02,700 --> 00:05:09,150
support<font color="#E5E5E5"> because of</font><font color="#CCCCCC"> the work of the</font><font color="#E5E5E5"> other</font>

96
00:05:06,120 --> 00:05:10,920
guy<font color="#E5E5E5"> so how to install it you just run</font>

97
00:05:09,150 --> 00:05:15,450
<font color="#CCCCCC">our 2 p.m. install our two deck</font><font color="#E5E5E5"> and</font>

98
00:05:10,920 --> 00:05:18,360
that's<font color="#E5E5E5"> all</font><font color="#CCCCCC"> just 2 points for</font><font color="#E5E5E5"> Windows</font>

99
00:05:15,450 --> 00:05:20,820
user<font color="#E5E5E5"> you</font><font color="#CCCCCC"> won't have our</font><font color="#E5E5E5"> 2 p.m. because</font>

100
00:05:18,360 --> 00:05:24,180
up 2 p.m. is written<font color="#CCCCCC"> in bash and is just</font>

101
00:05:20,820 --> 00:05:26,370
a script people are rewriting it<font color="#CCCCCC"> in go</font>

102
00:05:24,180 --> 00:05:28,890
so once that<font color="#E5E5E5"> will be available</font><font color="#CCCCCC"> you can</font>

103
00:05:26,370 --> 00:05:31,650
also launch it in the meantime you<font color="#CCCCCC"> can</font>

104
00:05:28,890 --> 00:05:35,099
<font color="#CCCCCC">just run make</font><font color="#E5E5E5"> into there is a folder</font>

105
00:05:31,650 --> 00:05:37,560
<font color="#CCCCCC">let's name P</font><font color="#E5E5E5"> just run making that folder</font>

106
00:05:35,100 --> 00:05:40,920
in magically installs or<font color="#CCCCCC"> r2 r2 deck for</font>

107
00:05:37,560 --> 00:05:43,530
<font color="#CCCCCC">Windows</font><font color="#E5E5E5"> and if each time</font><font color="#CCCCCC"> you update your</font>

108
00:05:40,920 --> 00:05:45,870
version of r2 please also rerun<font color="#E5E5E5"> our 2</font>

109
00:05:43,530 --> 00:05:48,570
p.m. install again because there<font color="#E5E5E5"> will be</font>

110
00:05:45,870 --> 00:05:53,070
mismatch between libraries<font color="#E5E5E5"> and the r2</font>

111
00:05:48,570 --> 00:05:56,070
won't load<font color="#E5E5E5"> debugging so how to use it so</font>

112
00:05:53,070 --> 00:05:59,250
<font color="#E5E5E5">you have you just run your</font><font color="#CCCCCC"> retiree</font>

113
00:05:56,070 --> 00:06:01,020
<font color="#E5E5E5">session with your favorite binary you</font>

114
00:05:59,250 --> 00:06:02,610
just analyze<font color="#CCCCCC"> it whatever</font><font color="#E5E5E5"> you want you</font>

115
00:06:01,020 --> 00:06:04,650
can<font color="#CCCCCC"> just manage</font><font color="#E5E5E5"> the function or</font><font color="#CCCCCC"> the</font>

116
00:06:02,610 --> 00:06:07,170
whole binary<font color="#E5E5E5"> and then you answer just</font>

117
00:06:04,650 --> 00:06:09,840
PDD<font color="#CCCCCC"> PDD is the commentary called</font>

118
00:06:07,170 --> 00:06:12,990
<font color="#CCCCCC">architec and it</font><font color="#E5E5E5"> might be</font><font color="#CCCCCC"> output</font><font color="#E5E5E5"> some</font>

119
00:06:09,840 --> 00:06:17,510
self decoder<font color="#E5E5E5"> it will be improving</font><font color="#CCCCCC"> in the</font>

120
00:06:12,990 --> 00:06:21,930
future<font color="#E5E5E5"> but that's like an example so</font>

121
00:06:17,510 --> 00:06:24,330
there are it has some<font color="#CCCCCC"> gets some</font>

122
00:06:21,930 --> 00:06:26,640
arguments if you can you<font color="#E5E5E5"> can pass them</font>

123
00:06:24,330 --> 00:06:29,370
like this<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you will have assembly bug</font>

124
00:06:26,640 --> 00:06:31,740
<font color="#E5E5E5">blocks</font><font color="#CCCCCC"> colors or</font><font color="#E5E5E5"> cars and stuff you can</font>

125
00:06:29,370 --> 00:06:32,670
override the settings that<font color="#CCCCCC"> you might</font>

126
00:06:31,740 --> 00:06:35,670
have

127
00:06:32,670 --> 00:06:41,690
on your laptop during the session or you

128
00:06:35,670 --> 00:06:45,060
<font color="#CCCCCC">can just use the fastest sorry the</font>

129
00:06:41,690 --> 00:06:47,969
<font color="#CCCCCC">simplified short form which is D for</font>

130
00:06:45,060 --> 00:06:51,510
example PDA to print assembly<font color="#E5E5E5"> PTT beat</font>

131
00:06:47,970 --> 00:06:54,720
you just<font color="#CCCCCC"> see the</font><font color="#E5E5E5"> Scopes</font><font color="#CCCCCC"> PDI we will see</font>

132
00:06:51,510 --> 00:06:57,570
<font color="#E5E5E5">later generate the issues and that's all</font>

133
00:06:54,720 --> 00:07:00,420
<font color="#E5E5E5">so and you can also combine them</font><font color="#CCCCCC"> so you</font>

134
00:06:57,570 --> 00:07:02,340
can have<font color="#CCCCCC"> like PD de and assembly and I</font>

135
00:07:00,420 --> 00:07:04,860
<font color="#E5E5E5">don't</font><font color="#CCCCCC"> castes if you want to see all the</font>

136
00:07:02,340 --> 00:07:08,250
cast like if it's going<font color="#E5E5E5"> to catch</font>

137
00:07:04,860 --> 00:07:14,910
something<font color="#CCCCCC"> from I</font><font color="#E5E5E5"> don't know 8-bit 16-bit</font>

138
00:07:08,250 --> 00:07:18,360
and whatever<font color="#CCCCCC"> you can also use what is</font>

139
00:07:14,910 --> 00:07:21,180
called<font color="#E5E5E5"> in</font><font color="#CCCCCC"> r2</font><font color="#E5E5E5"> available variables so if</font>

140
00:07:18,360 --> 00:07:24,000
you do eat space and something<font color="#E5E5E5"> you</font><font color="#CCCCCC"> will</font>

141
00:07:21,180 --> 00:07:26,180
get all the configuration with<font color="#E5E5E5"> a heart</font>

142
00:07:24,000 --> 00:07:29,610
<font color="#E5E5E5">attack you also get the r2 deck</font><font color="#CCCCCC"> ones</font>

143
00:07:26,180 --> 00:07:32,520
which<font color="#CCCCCC"> means that you can script them in</font>

144
00:07:29,610 --> 00:07:35,670
2d or<font color="#E5E5E5"> rather it to see file it will</font>

145
00:07:32,520 --> 00:07:37,919
magically<font color="#E5E5E5"> automatically load during the</font>

146
00:07:35,670 --> 00:07:39,750
session so if<font color="#E5E5E5"> we do just PDT and you</font>

147
00:07:37,920 --> 00:07:42,120
have it enabled<font color="#CCCCCC"> I don't know</font><font color="#E5E5E5"> the</font>

148
00:07:39,750 --> 00:07:45,780
assembly one you will just see assembly

149
00:07:42,120 --> 00:07:49,200
<font color="#E5E5E5">next</font><font color="#CCCCCC"> to the South</font><font color="#E5E5E5"> Dakota so is quite</font>

150
00:07:45,780 --> 00:07:51,809
useful<font color="#CCCCCC"> and you can also use the screen</font>

151
00:07:49,200 --> 00:07:54,390
color and the<font color="#E5E5E5"> screen HTML so if you have</font>

152
00:07:51,810 --> 00:07:56,430
one<font color="#E5E5E5"> of those to enable you can just copy</font>

153
00:07:54,390 --> 00:07:59,099
<font color="#E5E5E5">and paste</font><font color="#CCCCCC"> like for example</font><font color="#E5E5E5"> HTML code</font>

154
00:07:56,430 --> 00:08:02,520
directly to whatever you want<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you can</font>

155
00:07:59,100 --> 00:08:05,700
just dump stuff<font color="#E5E5E5"> so how to generate an</font>

156
00:08:02,520 --> 00:08:09,620
issue so you<font color="#CCCCCC"> and I</font><font color="#E5E5E5"> something and it</font>

157
00:08:05,700 --> 00:08:12,120
crash as<font color="#CCCCCC"> it</font><font color="#E5E5E5"> crush you also get a nice</font>

158
00:08:09,620 --> 00:08:15,750
message telling you<font color="#E5E5E5"> always crash please</font>

159
00:08:12,120 --> 00:08:18,810
send the report<font color="#E5E5E5"> and you just run</font><font color="#CCCCCC"> PDR the</font>

160
00:08:15,750 --> 00:08:21,300
<font color="#CCCCCC">DI will generate a big JSON</font><font color="#E5E5E5"> and that</font>

161
00:08:18,810 --> 00:08:23,790
JSON is just copy and paste or just pipe

162
00:08:21,300 --> 00:08:25,080
to a file and upload to<font color="#CCCCCC"> it to get up</font>

163
00:08:23,790 --> 00:08:28,650
<font color="#E5E5E5">with easy</font>

164
00:08:25,080 --> 00:08:31,289
<font color="#E5E5E5">nothing's too fancy and</font><font color="#CCCCCC"> they had</font>

165
00:08:28,650 --> 00:08:33,780
somebody that<font color="#E5E5E5"> asked me if it contains</font>

166
00:08:31,290 --> 00:08:35,640
user information no it doesn't<font color="#CCCCCC"> it just</font>

167
00:08:33,780 --> 00:08:38,280
<font color="#CCCCCC">contains the</font><font color="#E5E5E5"> binary information so</font>

168
00:08:35,640 --> 00:08:40,559
whatever is your<font color="#CCCCCC"> user name</font><font color="#E5E5E5"> and such</font>

169
00:08:38,280 --> 00:08:43,319
things<font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> care</font><font color="#E5E5E5"> it is not in there</font>

170
00:08:40,559 --> 00:08:44,660
<font color="#CCCCCC">but you can just check</font><font color="#E5E5E5"> it by yourself if</font>

171
00:08:43,320 --> 00:08:48,110
you<font color="#E5E5E5"> think</font>

172
00:08:44,660 --> 00:08:50,329
and how to debug so<font color="#CCCCCC"> techne as i said</font>

173
00:08:48,110 --> 00:08:51,860
when<font color="#CCCCCC"> the crush is just</font><font color="#E5E5E5"> crush you just</font>

174
00:08:50,329 --> 00:08:53,989
say oh and<font color="#CCCCCC"> pry</font><font color="#E5E5E5"> up crushed</font>

175
00:08:51,860 --> 00:08:56,540
<font color="#E5E5E5">please sir about</font><font color="#CCCCCC"> the bug</font><font color="#E5E5E5"> but if we want</font>

176
00:08:53,990 --> 00:09:02,560
to<font color="#E5E5E5"> debug it and</font><font color="#CCCCCC"> make a patch please use</font>

177
00:08:56,540 --> 00:09:06,740
this<font color="#CCCCCC"> - - - debug feature</font><font color="#E5E5E5"> sorry -</font><font color="#CCCCCC"> debug</font>

178
00:09:02,560 --> 00:09:09,709
argument which will show you the<font color="#CCCCCC"> where</font>

179
00:09:06,740 --> 00:09:11,870
is crushing right<font color="#E5E5E5"> now is not telling you</font>

180
00:09:09,709 --> 00:09:14,119
which in from which file is crushing but

181
00:09:11,870 --> 00:09:16,819
is telling you the line because I

182
00:09:14,120 --> 00:09:19,129
evaluate the strings and without<font color="#E5E5E5"> telling</font>

183
00:09:16,819 --> 00:09:21,349
how which file is and I'm trying to

184
00:09:19,129 --> 00:09:23,360
patch this<font color="#CCCCCC"> so</font><font color="#E5E5E5"> maybe in the future we</font>

185
00:09:21,350 --> 00:09:26,449
also tell which<font color="#CCCCCC"> files from crashing from</font>

186
00:09:23,360 --> 00:09:28,189
but it so you can just<font color="#CCCCCC"> search for the</font>

187
00:09:26,449 --> 00:09:30,139
name<font color="#E5E5E5"> of the variable that is crushing</font>

188
00:09:28,189 --> 00:09:32,750
<font color="#E5E5E5">because</font><font color="#CCCCCC"> it will tell you and</font><font color="#E5E5E5"> you can</font>

189
00:09:30,139 --> 00:09:35,660
<font color="#CCCCCC">just search for</font><font color="#E5E5E5"> the line also so you</font>

190
00:09:32,750 --> 00:09:37,699
will can<font color="#E5E5E5"> you can just do cross reference</font>

191
00:09:35,660 --> 00:09:40,420
just<font color="#E5E5E5"> to understand where is crushing or</font>

192
00:09:37,699 --> 00:09:53,000
you can just<font color="#E5E5E5"> go</font><font color="#CCCCCC"> with printers and stuff</font>

193
00:09:40,420 --> 00:09:58,519
so I have<font color="#E5E5E5"> demo</font><font color="#CCCCCC"> simple one</font><font color="#E5E5E5"> so as I said I</font>

194
00:09:53,000 --> 00:10:02,779
load<font color="#E5E5E5"> my nice binary analyze it then I</font>

195
00:09:58,519 --> 00:10:15,430
<font color="#E5E5E5">say ok ok let's analyze the main so I</font>

196
00:10:02,779 --> 00:10:19,329
<font color="#E5E5E5">launch BDD oh</font><font color="#CCCCCC"> it's not ok yeah ok</font><font color="#E5E5E5"> so</font>

197
00:10:15,430 --> 00:10:22,729
what you will<font color="#CCCCCC"> see you</font><font color="#E5E5E5"> will see</font><font color="#CCCCCC"> it's nice</font>

198
00:10:19,329 --> 00:10:24,290
<font color="#E5E5E5">server code</font><font color="#CCCCCC"> thump</font><font color="#E5E5E5"> so from the binary for</font>

199
00:10:22,730 --> 00:10:27,019
example you can see<font color="#E5E5E5"> oh there is a</font>

200
00:10:24,290 --> 00:10:30,439
cannery so there is<font color="#CCCCCC"> checking this</font>

201
00:10:27,019 --> 00:10:33,259
crushing or stuff for<font color="#E5E5E5"> example is you can</font>

202
00:10:30,439 --> 00:10:35,779
see that<font color="#CCCCCC"> is trying to</font><font color="#E5E5E5"> get the time and</font>

203
00:10:33,259 --> 00:10:38,870
this<font color="#E5E5E5"> is changing</font><font color="#CCCCCC"> the time</font><font color="#E5E5E5"> into local</font>

204
00:10:35,779 --> 00:10:42,319
time to get some data and is checking

205
00:10:38,870 --> 00:10:46,009
<font color="#E5E5E5">then later</font><font color="#CCCCCC"> on is</font><font color="#E5E5E5"> checking if the data is</font>

206
00:10:42,319 --> 00:10:49,189
equals to<font color="#E5E5E5"> 0 X 27</font><font color="#CCCCCC"> and you get like a</font>

207
00:10:46,009 --> 00:10:49,670
printf<font color="#E5E5E5"> we saying or</font><font color="#CCCCCC"> to Karthik intime or</font>

208
00:10:49,189 --> 00:10:52,250
nope

209
00:10:49,670 --> 00:10:55,639
and here like for example you can see

210
00:10:52,250 --> 00:10:57,370
<font color="#CCCCCC">where's the canary check if the function</font>

211
00:10:55,639 --> 00:11:00,010
has<font color="#E5E5E5"> failed</font>

212
00:10:57,370 --> 00:11:02,560
so<font color="#E5E5E5"> really simple stuff and for example</font>

213
00:11:00,010 --> 00:11:13,410
<font color="#E5E5E5">if you is crushing you as I said</font><font color="#CCCCCC"> before</font>

214
00:11:02,560 --> 00:11:13,410
<font color="#E5E5E5">you just</font><font color="#CCCCCC"> call PDI</font><font color="#E5E5E5"> up and you get this</font>

215
00:11:13,620 --> 00:11:20,020
this big JSON<font color="#E5E5E5"> file that's the one you</font>

216
00:11:17,920 --> 00:11:22,270
have<font color="#E5E5E5"> to report and</font><font color="#CCCCCC"> eat up</font><font color="#E5E5E5"> just without</font>

217
00:11:20,020 --> 00:11:24,790
just with this<font color="#E5E5E5"> I can patch what</font>

218
00:11:22,270 --> 00:11:30,760
everybody you have so it's quite nice

219
00:11:24,790 --> 00:11:34,209
it's a<font color="#E5E5E5"> nice feature so</font><font color="#CCCCCC"> design so</font>

220
00:11:30,760 --> 00:11:39,850
normally when you<font color="#E5E5E5"> design</font><font color="#CCCCCC"> the compiler</font>

221
00:11:34,210 --> 00:11:43,330
<font color="#E5E5E5">you want to have you want</font><font color="#CCCCCC"> to do some</font>

222
00:11:39,850 --> 00:11:46,960
optimization and stuff<font color="#E5E5E5"> so each time you</font>

223
00:11:43,330 --> 00:11:49,380
<font color="#CCCCCC">use a</font><font color="#E5E5E5"> right one you will</font><font color="#CCCCCC"> have a plugin</font>

224
00:11:46,960 --> 00:11:52,300
<font color="#E5E5E5">for as I said for each architecture</font>

225
00:11:49,380 --> 00:11:55,930
which we will have its own analysis loop

226
00:11:52,300 --> 00:11:58,449
its own way<font color="#E5E5E5"> to pass machine code</font><font color="#CCCCCC"> you</font>

227
00:11:55,930 --> 00:12:01,510
will have<font color="#CCCCCC"> a width try to optimize</font><font color="#E5E5E5"> the</font>

228
00:11:58,450 --> 00:12:03,310
code and evils<font color="#E5E5E5"> sometimes also try to do</font>

229
00:12:01,510 --> 00:12:06,490
some<font color="#E5E5E5"> verification like if you have like</font>

230
00:12:03,310 --> 00:12:09,280
<font color="#CCCCCC">a</font><font color="#E5E5E5"> bunch of registers</font><font color="#CCCCCC"> that is I don't</font>

231
00:12:06,490 --> 00:12:10,990
<font color="#E5E5E5">know loading stuff but never used then</font>

232
00:12:09,280 --> 00:12:15,310
maybe you can<font color="#E5E5E5"> just</font><font color="#CCCCCC"> remove it</font><font color="#E5E5E5"> and</font>

233
00:12:10,990 --> 00:12:17,670
optimize the code<font color="#E5E5E5"> by doing that this was</font>

234
00:12:15,310 --> 00:12:20,319
the original<font color="#E5E5E5"> as I said the</font><font color="#CCCCCC"> original</font>

235
00:12:17,670 --> 00:12:23,050
implementation<font color="#E5E5E5"> at the head but then</font>

236
00:12:20,320 --> 00:12:24,640
later on I changed<font color="#E5E5E5"> so the new design</font><font color="#CCCCCC"> as</font>

237
00:12:23,050 --> 00:12:27,219
I said<font color="#CCCCCC"> is different so it's a script</font>

238
00:12:24,640 --> 00:12:29,830
<font color="#E5E5E5">based because it divides</font><font color="#CCCCCC"> a recompiling</font>

239
00:12:27,220 --> 00:12:32,800
<font color="#CCCCCC">or completion</font><font color="#E5E5E5"> so in the same</font><font color="#CCCCCC"> session if</font>

240
00:12:29,830 --> 00:12:34,570
you<font color="#CCCCCC"> have a bug</font><font color="#E5E5E5"> you can just patch it on</font>

241
00:12:32,800 --> 00:12:35,949
<font color="#E5E5E5">your in the file and</font><font color="#CCCCCC"> just in JavaScript</font>

242
00:12:34,570 --> 00:12:38,410
file<font color="#CCCCCC"> and just to rerun</font><font color="#E5E5E5"> the comment that</font>

243
00:12:35,950 --> 00:12:41,950
<font color="#E5E5E5">without</font><font color="#CCCCCC"> even have to close the r2</font>

244
00:12:38,410 --> 00:12:43,719
session and magically will run and it

245
00:12:41,950 --> 00:12:45,940
doesn't have<font color="#E5E5E5"> to pass binary so I don't</font>

246
00:12:43,720 --> 00:12:49,209
care<font color="#CCCCCC"> actually just provide me</font><font color="#E5E5E5"> all the</font>

247
00:12:45,940 --> 00:12:51,339
information<font color="#CCCCCC"> so it just works</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> I've</font>

248
00:12:49,209 --> 00:12:54,430
implemented with a called generic

249
00:12:51,339 --> 00:12:56,770
operation or the<font color="#E5E5E5"> in code is called base</font>

250
00:12:54,430 --> 00:12:59,500
<font color="#E5E5E5">it's it provides all the basic</font>

251
00:12:56,770 --> 00:13:01,870
information<font color="#E5E5E5"> I'm sorry operation like add</font>

252
00:12:59,500 --> 00:13:05,920
subtract multiply divide or date or<font color="#E5E5E5"> an</font>

253
00:13:01,870 --> 00:13:09,160
assign or something<font color="#CCCCCC"> it also includes</font>

254
00:13:05,920 --> 00:13:10,469
generic control flow analysis then I

255
00:13:09,160 --> 00:13:13,980
will show later

256
00:13:10,470 --> 00:13:15,750
<font color="#E5E5E5">we'll do them but essentially you</font><font color="#CCCCCC"> will</font>

257
00:13:13,980 --> 00:13:19,410
you don't<font color="#CCCCCC"> have to care about</font><font color="#E5E5E5"> this you</font>

258
00:13:15,750 --> 00:13:21,600
just throw your<font color="#E5E5E5"> implementation</font><font color="#CCCCCC"> there you</font>

259
00:13:19,410 --> 00:13:24,540
just say which instruction is at what<font color="#CCCCCC"> is</font>

260
00:13:21,600 --> 00:13:27,560
<font color="#CCCCCC">doing and</font><font color="#E5E5E5"> then magically works so which</font>

261
00:13:24,540 --> 00:13:30,449
in which<font color="#E5E5E5"> means that you also include the</font>

262
00:13:27,560 --> 00:13:32,219
optimization so you just run something

263
00:13:30,450 --> 00:13:34,710
<font color="#E5E5E5">and magically you also have done so we</font>

264
00:13:32,220 --> 00:13:37,770
don't have to care too much<font color="#CCCCCC"> and as I</font>

265
00:13:34,710 --> 00:13:44,190
said has a nice feature to reproduce

266
00:13:37,770 --> 00:13:46,590
<font color="#E5E5E5">issues so</font><font color="#CCCCCC"> PDI how</font><font color="#E5E5E5"> how it works</font><font color="#CCCCCC"> so for</font>

267
00:13:44,190 --> 00:13:49,080
<font color="#E5E5E5">example for a generic instruction you</font>

268
00:13:46,590 --> 00:13:51,840
have<font color="#E5E5E5"> literally have a mnemonic number</font>

269
00:13:49,080 --> 00:13:54,570
<font color="#E5E5E5">under one</font><font color="#CCCCCC"> operon to you whatever</font><font color="#E5E5E5"> so for</font>

270
00:13:51,840 --> 00:13:57,900
<font color="#E5E5E5">example for the x86 you have a drugs ten</font>

271
00:13:54,570 --> 00:13:59,880
so it<font color="#E5E5E5"> which means that you have rocks as</font>

272
00:13:57,900 --> 00:14:03,930
the same source which<font color="#CCCCCC"> has the flux</font>

273
00:13:59,880 --> 00:14:06,570
<font color="#E5E5E5">itself for source and you add ten how it</font>

274
00:14:03,930 --> 00:14:08,870
explains<font color="#E5E5E5"> is written then on the in the</font>

275
00:14:06,570 --> 00:14:11,670
code<font color="#E5E5E5"> you have base add and the operand</font>

276
00:14:08,870 --> 00:14:14,910
0.01 which<font color="#E5E5E5"> where operand</font><font color="#CCCCCC"> zero is rocks</font>

277
00:14:11,670 --> 00:14:17,520
and operon once then on rensis for

278
00:14:14,910 --> 00:14:21,390
example you will<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to read twenty</font>

279
00:14:17,520 --> 00:14:25,230
eight or ten<font color="#E5E5E5"> or seven in the resonance</font>

280
00:14:21,390 --> 00:14:27,060
assembly you<font color="#CCCCCC"> will have the</font><font color="#E5E5E5"> energy serve</font>

281
00:14:25,230 --> 00:14:28,980
in<font color="#CCCCCC"> swap so the last one is</font><font color="#E5E5E5"> the</font>

282
00:14:27,060 --> 00:14:31,380
<font color="#E5E5E5">destination the first one is the last</font>

283
00:14:28,980 --> 00:14:34,050
<font color="#E5E5E5">operand so you just</font><font color="#CCCCCC"> walk them and you</font>

284
00:14:31,380 --> 00:14:37,280
will get your nice output<font color="#E5E5E5"> and for</font>

285
00:14:34,050 --> 00:14:42,630
<font color="#E5E5E5">example on MIPS</font><font color="#CCCCCC"> you will have like</font><font color="#E5E5E5"> as</font>

286
00:14:37,280 --> 00:14:46,350
<font color="#CCCCCC">zero</font><font color="#E5E5E5"> T 3 and 0 on</font><font color="#CCCCCC"> in the end and</font><font color="#E5E5E5"> they</font>

287
00:14:42,630 --> 00:14:49,260
will do is magically will just generate

288
00:14:46,350 --> 00:14:52,560
<font color="#E5E5E5">the optimized code because if you end of</font>

289
00:14:49,260 --> 00:14:56,790
course<font color="#E5E5E5"> this T 3 with 0 you will get 0</font>

290
00:14:52,560 --> 00:14:59,609
which means a<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> equals to 0 and you have</font>

291
00:14:56,790 --> 00:15:03,410
<font color="#E5E5E5">like this</font><font color="#CCCCCC"> week so so for example my x86</font>

292
00:14:59,610 --> 00:15:06,690
when you to observe<font color="#E5E5E5"> if the</font><font color="#CCCCCC"> sort of rocks</font>

293
00:15:03,410 --> 00:15:10,770
with itself<font color="#E5E5E5"> we will just do rocks</font><font color="#CCCCCC"> equals</font>

294
00:15:06,690 --> 00:15:12,780
<font color="#E5E5E5">0 so these critics are also included so</font>

295
00:15:10,770 --> 00:15:15,030
these are an optimization that<font color="#CCCCCC"> it was</font>

296
00:15:12,780 --> 00:15:18,030
talking<font color="#CCCCCC"> about so for</font><font color="#E5E5E5"> example for</font><font color="#CCCCCC"> odd if</font>

297
00:15:15,030 --> 00:15:20,790
the<font color="#CCCCCC"> destination is equals to a and</font><font color="#E5E5E5"> B is</font>

298
00:15:18,030 --> 00:15:22,800
<font color="#CCCCCC">1 you have this nation plus plus if this</font>

299
00:15:20,790 --> 00:15:25,740
<font color="#E5E5E5">change is just equals to a you do</font>

300
00:15:22,800 --> 00:15:29,339
this<font color="#CCCCCC"> nice plus equals to</font><font color="#E5E5E5"> B and the same</font>

301
00:15:25,740 --> 00:15:32,190
not<font color="#CCCCCC"> D non-optimized</font><font color="#E5E5E5"> formed and later</font><font color="#CCCCCC"> for</font>

302
00:15:29,339 --> 00:15:34,560
<font color="#E5E5E5">example</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> you if you have a B that</font><font color="#CCCCCC"> are</font>

303
00:15:32,190 --> 00:15:37,200
<font color="#CCCCCC">the same that this</font><font color="#E5E5E5"> nation</font><font color="#CCCCCC"> is zero if you</font>

304
00:15:34,560 --> 00:15:38,989
have a or b 0 and then this<font color="#CCCCCC"> nation is</font>

305
00:15:37,200 --> 00:15:42,720
<font color="#CCCCCC">the opposite number</font>

306
00:15:38,990 --> 00:15:45,390
so how control<font color="#E5E5E5"> first works</font><font color="#CCCCCC"> so this is</font>

307
00:15:42,720 --> 00:15:47,310
how<font color="#E5E5E5"> that I detect controls is not just</font>

308
00:15:45,390 --> 00:15:49,860
that this is a simplification of the

309
00:15:47,310 --> 00:15:54,079
whole loop but essentially<font color="#E5E5E5"> for example</font>

310
00:15:49,860 --> 00:15:57,690
for a while<font color="#E5E5E5"> you will have like this nice</font>

311
00:15:54,079 --> 00:16:00,599
<font color="#E5E5E5">output so you have the your other</font><font color="#CCCCCC"> 0 you</font>

312
00:15:57,690 --> 00:16:02,160
<font color="#CCCCCC">nanak and</font><font color="#E5E5E5"> blah blah blah and at a</font>

313
00:16:00,600 --> 00:16:04,170
<font color="#CCCCCC">certain time you</font><font color="#E5E5E5"> have this jump at</font>

314
00:16:02,160 --> 00:16:06,329
others through which jump to address<font color="#E5E5E5"> 9</font>

315
00:16:04,170 --> 00:16:08,490
and then a to the<font color="#CCCCCC"> address 9 you have a</font>

316
00:16:06,329 --> 00:16:11,969
conditional branch you might also have

317
00:16:08,490 --> 00:16:16,079
<font color="#E5E5E5">an e conditional job but it's either way</font>

318
00:16:11,970 --> 00:16:18,540
fine so what it means<font color="#CCCCCC"> what</font><font color="#E5E5E5"> is a certain</font>

319
00:16:16,079 --> 00:16:20,370
need to understand that since he's

320
00:16:18,540 --> 00:16:22,339
jumping back or<font color="#E5E5E5"> is jump</font><font color="#CCCCCC"> into the same</font>

321
00:16:20,370 --> 00:16:25,589
position<font color="#CCCCCC"> even means that this is a loop</font>

322
00:16:22,339 --> 00:16:27,990
<font color="#CCCCCC">because the execution is a from top to</font>

323
00:16:25,589 --> 00:16:31,589
bottom<font color="#CCCCCC"> so</font><font color="#E5E5E5"> it means</font><font color="#CCCCCC"> that he's going back</font>

324
00:16:27,990 --> 00:16:34,529
we<font color="#CCCCCC"> will reiterate</font><font color="#E5E5E5"> and if he if I see</font>

325
00:16:31,589 --> 00:16:37,670
<font color="#CCCCCC">like a pattern well is</font><font color="#E5E5E5"> going after</font><font color="#CCCCCC"> the</font>

326
00:16:34,529 --> 00:16:41,070
<font color="#CCCCCC">first</font><font color="#E5E5E5"> jump</font><font color="#CCCCCC"> it means that this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a while</font>

327
00:16:37,670 --> 00:16:44,610
usually you<font color="#E5E5E5"> won't fight just while as</font>

328
00:16:41,070 --> 00:16:47,130
<font color="#E5E5E5">you write in C you will do the compiler</font>

329
00:16:44,610 --> 00:16:50,160
we<font color="#CCCCCC"> optimize</font><font color="#E5E5E5"> it in to do loop in do-while</font>

330
00:16:47,130 --> 00:16:52,230
so sometimes you will find<font color="#E5E5E5"> in the code</font>

331
00:16:50,160 --> 00:16:57,439
in the compiled<font color="#CCCCCC"> code do Wiles</font><font color="#E5E5E5"> sometimes</font>

332
00:16:52,230 --> 00:17:01,020
you find<font color="#CCCCCC"> Wiles depends on</font><font color="#E5E5E5"> T on</font><font color="#CCCCCC"> the</font>

333
00:16:57,440 --> 00:17:03,420
<font color="#E5E5E5">analysis</font><font color="#CCCCCC"> that I've done and how it</font>

334
00:17:01,020 --> 00:17:08,129
behaves<font color="#CCCCCC"> the code</font><font color="#E5E5E5"> itself so what</font>

335
00:17:03,420 --> 00:17:10,349
<font color="#CCCCCC">Immunization are tricky to get for if f</font>

336
00:17:08,130 --> 00:17:13,650
for<font color="#E5E5E5"> example is a different</font>

337
00:17:10,349 --> 00:17:17,129
so usually and see you do if a I don't

338
00:17:13,650 --> 00:17:19,589
<font color="#E5E5E5">is greater than B and it means that</font><font color="#CCCCCC"> to</font>

339
00:17:17,130 --> 00:17:22,500
get inside the block<font color="#E5E5E5"> you will have you</font>

340
00:17:19,589 --> 00:17:24,418
<font color="#CCCCCC">will</font><font color="#E5E5E5"> the condition needs to be true in</font>

341
00:17:22,500 --> 00:17:27,059
<font color="#E5E5E5">the assembly it's not</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> true is</font><font color="#CCCCCC"> not that</font>

342
00:17:24,419 --> 00:17:30,510
like that you will<font color="#E5E5E5"> have the conditional</font>

343
00:17:27,059 --> 00:17:33,330
<font color="#E5E5E5">branch and branch says oh if a is I</font>

344
00:17:30,510 --> 00:17:35,190
don't<font color="#E5E5E5"> know less than less equal to B you</font>

345
00:17:33,330 --> 00:17:35,770
have to<font color="#E5E5E5"> jump it means</font><font color="#CCCCCC"> we have to skip</font>

346
00:17:35,190 --> 00:17:39,190
the<font color="#E5E5E5"> block</font>

347
00:17:35,770 --> 00:17:41,470
which the<font color="#CCCCCC"> compiling</font><font color="#E5E5E5"> the completion</font><font color="#CCCCCC"> means</font>

348
00:17:39,190 --> 00:17:44,620
that<font color="#CCCCCC"> oh there's</font><font color="#E5E5E5"> a dozen</font><font color="#CCCCCC"> if but the</font>

349
00:17:41,470 --> 00:17:47,230
<font color="#E5E5E5">condition is inverted and if at the end</font>

350
00:17:44,620 --> 00:17:49,090
<font color="#E5E5E5">of the if there is a jumpers and that is</font>

351
00:17:47,230 --> 00:17:51,610
keeping some other blocks that comes

352
00:17:49,090 --> 00:17:55,230
later<font color="#CCCCCC"> it means that the block that is</font>

353
00:17:51,610 --> 00:17:57,639
<font color="#E5E5E5">later on is that</font><font color="#CCCCCC"> the ass</font><font color="#E5E5E5"> block so and</font>

354
00:17:55,230 --> 00:17:58,830
but I'm quite<font color="#E5E5E5"> sure</font><font color="#CCCCCC"> that everybody does</font>

355
00:17:57,640 --> 00:18:04,000
that

356
00:17:58,830 --> 00:18:05,580
so how<font color="#E5E5E5"> to extend our</font><font color="#CCCCCC"> to deck so</font><font color="#E5E5E5"> you need</font>

357
00:18:04,000 --> 00:18:08,049
to<font color="#E5E5E5"> know first of all</font><font color="#CCCCCC"> that there is a</font>

358
00:18:05,580 --> 00:18:11,199
path that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> to do</font><font color="#CCCCCC"> search for</font>

359
00:18:08,049 --> 00:18:15,279
which is usually local<font color="#CCCCCC"> Sharad</font><font color="#E5E5E5"> re are</font><font color="#CCCCCC"> two</font>

360
00:18:11,200 --> 00:18:17,230
p.m. get<font color="#CCCCCC"> our two</font><font color="#E5E5E5"> deck</font><font color="#CCCCCC"> jeaious you also</font>

361
00:18:15,279 --> 00:18:19,899
<font color="#E5E5E5">need to know</font><font color="#CCCCCC"> that under</font><font color="#E5E5E5"> that path there</font>

362
00:18:17,230 --> 00:18:22,090
is<font color="#CCCCCC"> libtech arc where and that's where</font>

363
00:18:19,899 --> 00:18:24,879
you have<font color="#CCCCCC"> to place your</font><font color="#E5E5E5"> new york attack</font>

364
00:18:22,090 --> 00:18:27,490
sure<font color="#E5E5E5"> and you also have to add the name</font>

365
00:18:24,880 --> 00:18:31,059
of<font color="#E5E5E5"> the new york attack shown under the</font>

366
00:18:27,490 --> 00:18:33,940
acts acts against file and in<font color="#E5E5E5"> the names</font>

367
00:18:31,059 --> 00:18:39,490
has to match with<font color="#CCCCCC"> the command</font><font color="#E5E5E5"> e space</font>

368
00:18:33,940 --> 00:18:41,140
<font color="#E5E5E5">ASM dot arch</font><font color="#CCCCCC"> onward re</font><font color="#E5E5E5"> why because</font><font color="#CCCCCC"> i use</font>

369
00:18:39,490 --> 00:18:43,210
<font color="#E5E5E5">that to detect which architecture you</font>

370
00:18:41,140 --> 00:18:43,750
are using<font color="#E5E5E5"> so if it doesn't</font><font color="#CCCCCC"> match the</font>

371
00:18:43,210 --> 00:18:47,320
<font color="#E5E5E5">same</font>

372
00:18:43,750 --> 00:18:50,470
<font color="#E5E5E5">i cannot support it</font>

373
00:18:47,320 --> 00:18:52,510
another thing is you have to<font color="#E5E5E5"> give a look</font>

374
00:18:50,470 --> 00:18:54,340
at<font color="#CCCCCC"> also to the developer md file it's</font>

375
00:18:52,510 --> 00:18:57,760
included in<font color="#E5E5E5"> the same folder or you can</font>

376
00:18:54,340 --> 00:19:01,199
find it on<font color="#CCCCCC"> the tartars</font><font color="#E5E5E5"> and get up</font><font color="#CCCCCC"> that</font>

377
00:18:57,760 --> 00:19:04,799
includes the template for<font color="#E5E5E5"> the basic</font>

378
00:19:01,200 --> 00:19:07,870
architecture that<font color="#CCCCCC"> will show</font><font color="#E5E5E5"> later and</font>

379
00:19:04,799 --> 00:19:10,690
you have to know so<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you cannot use</font>

380
00:19:07,870 --> 00:19:14,020
outside<font color="#E5E5E5"> the r2 till the underscore</font>

381
00:19:10,690 --> 00:19:17,080
underscore internal functions and<font color="#CCCCCC"> the</font>

382
00:19:14,020 --> 00:19:20,860
<font color="#E5E5E5">also</font><font color="#CCCCCC"> gr2 CMD</font><font color="#E5E5E5"> why because</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> don't want to</font>

383
00:19:17,080 --> 00:19:23,049
rely on<font color="#E5E5E5"> not to itself in me which what</font>

384
00:19:20,860 --> 00:19:26,408
<font color="#E5E5E5">it means it means that if there is some</font>

385
00:19:23,049 --> 00:19:28,270
<font color="#E5E5E5">data that</font><font color="#CCCCCC"> i haven't it means that is it</font>

386
00:19:26,409 --> 00:19:30,700
may be also required for<font color="#CCCCCC"> other</font>

387
00:19:28,270 --> 00:19:32,860
architectures so what I do is just

388
00:19:30,700 --> 00:19:35,710
prefetch all the information and<font color="#E5E5E5"> then</font>

389
00:19:32,860 --> 00:19:38,020
<font color="#E5E5E5">analyze them later and the</font><font color="#CCCCCC"> analysis</font><font color="#E5E5E5"> in</font>

390
00:19:35,710 --> 00:19:40,450
this<font color="#E5E5E5"> way I can</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> use the for</font><font color="#CCCCCC"> example</font>

391
00:19:38,020 --> 00:19:43,299
<font color="#CCCCCC">DJ zone that</font><font color="#E5E5E5"> I've shown before with VDD</font>

392
00:19:40,450 --> 00:19:46,330
I and that do<font color="#E5E5E5"> not rely completely on</font><font color="#CCCCCC"> r2</font>

393
00:19:43,299 --> 00:19:48,309
so r2 will be called<font color="#E5E5E5"> just for</font><font color="#CCCCCC"> getting</font>

394
00:19:46,330 --> 00:19:49,990
fetching the old<font color="#E5E5E5"> information then later</font>

395
00:19:48,309 --> 00:19:52,210
on

396
00:19:49,990 --> 00:19:55,000
there's also the<font color="#CCCCCC"> concept of context so</font>

397
00:19:52,210 --> 00:19:56,920
<font color="#CCCCCC">you will have a JSON object</font><font color="#E5E5E5"> where you</font>

398
00:19:55,000 --> 00:20:00,580
can that you can<font color="#E5E5E5"> use and feel with</font>

399
00:19:56,920 --> 00:20:03,120
whatever<font color="#E5E5E5"> you</font><font color="#CCCCCC"> need for I use it a lot for</font>

400
00:20:00,580 --> 00:20:05,199
<font color="#CCCCCC">example for analyzing</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> other</font>

401
00:20:03,120 --> 00:20:08,129
<font color="#E5E5E5">conditions</font><font color="#CCCCCC"> if you have a condition</font>

402
00:20:05,200 --> 00:20:10,570
<font color="#E5E5E5">usually you have an instruction</font><font color="#CCCCCC"> that</font>

403
00:20:08,130 --> 00:20:12,790
tries to<font color="#E5E5E5"> understand like to compare them</font>

404
00:20:10,570 --> 00:20:14,679
so I come to compare for<font color="#E5E5E5"> example a and</font><font color="#CCCCCC"> B</font>

405
00:20:12,790 --> 00:20:17,020
and the later on<font color="#E5E5E5"> you will have a</font>

406
00:20:14,680 --> 00:20:18,610
condition<font color="#CCCCCC"> jamb saying oh it's if the</font>

407
00:20:17,020 --> 00:20:21,280
condition that you<font color="#E5E5E5"> see you</font><font color="#CCCCCC"> analyze</font>

408
00:20:18,610 --> 00:20:23,229
<font color="#CCCCCC">before is I don't</font><font color="#E5E5E5"> know great and then</font>

409
00:20:21,280 --> 00:20:25,690
something it's great<font color="#E5E5E5"> and then then</font>

410
00:20:23,230 --> 00:20:29,560
please jump to this<font color="#CCCCCC"> address so you can</font>

411
00:20:25,690 --> 00:20:31,630
<font color="#E5E5E5">use the context by by defining all the</font>

412
00:20:29,560 --> 00:20:34,840
information and<font color="#E5E5E5"> then later</font><font color="#CCCCCC"> on using</font><font color="#E5E5E5"> on</font>

413
00:20:31,630 --> 00:20:37,500
the maybe the<font color="#E5E5E5"> next instruction so how</font>

414
00:20:34,840 --> 00:20:42,040
the<font color="#E5E5E5"> template looks like you have</font>

415
00:20:37,500 --> 00:20:44,080
<font color="#E5E5E5">especially as you say but you</font><font color="#CCCCCC"> have the</font>

416
00:20:42,040 --> 00:20:47,200
<font color="#E5E5E5">mystery of magic object which is base</font>

417
00:20:44,080 --> 00:20:49,240
variable and<font color="#CCCCCC"> extra-extra</font><font color="#E5E5E5"> is something</font>

418
00:20:47,200 --> 00:20:52,120
<font color="#E5E5E5">that is not really</font><font color="#CCCCCC"> needed but</font><font color="#E5E5E5"> it has</font>

419
00:20:49,240 --> 00:20:55,810
some nice function like is this<font color="#CCCCCC"> a string</font>

420
00:20:52,120 --> 00:20:58,479
or not<font color="#E5E5E5"> variable it contains all the</font>

421
00:20:55,810 --> 00:21:01,060
<font color="#CCCCCC">information that</font><font color="#E5E5E5"> you have to you can use</font>

422
00:20:58,480 --> 00:21:04,810
<font color="#CCCCCC">actually to define like for example oh</font>

423
00:21:01,060 --> 00:21:08,530
this part this is<font color="#CCCCCC"> a instruction to use</font>

424
00:21:04,810 --> 00:21:10,780
pointers<font color="#CCCCCC"> so if the register is used and</font>

425
00:21:08,530 --> 00:21:12,639
please<font color="#CCCCCC"> convert this register to a</font>

426
00:21:10,780 --> 00:21:15,370
pointer<font color="#CCCCCC"> so you would</font><font color="#E5E5E5"> make an</font><font color="#CCCCCC"> object</font>

427
00:21:12,640 --> 00:21:17,920
which could be<font color="#CCCCCC"> like for example</font><font color="#E5E5E5"> a</font>

428
00:21:15,370 --> 00:21:21,729
variable dot pointer and they will just

429
00:21:17,920 --> 00:21:24,700
make it<font color="#CCCCCC"> return this magic object</font><font color="#E5E5E5"> we can</font>

430
00:21:21,730 --> 00:21:28,000
<font color="#E5E5E5">give</font><font color="#CCCCCC"> to the base</font><font color="#E5E5E5"> object that we will see</font>

431
00:21:24,700 --> 00:21:32,230
later<font color="#CCCCCC"> so in the structure you</font><font color="#E5E5E5"> also have</font>

432
00:21:28,000 --> 00:21:35,530
base<font color="#E5E5E5"> as I said is the generics operation</font>

433
00:21:32,230 --> 00:21:37,930
that you can use and then you have the

434
00:21:35,530 --> 00:21:40,990
<font color="#CCCCCC">pre</font><font color="#E5E5E5"> analysis and personalized functions</font>

435
00:21:37,930 --> 00:21:43,920
which I can be used to change<font color="#E5E5E5"> the data</font>

436
00:21:40,990 --> 00:21:48,280
before<font color="#E5E5E5"> getting into the analysis loop or</font>

437
00:21:43,920 --> 00:21:51,070
do some post analysis stuff for reasons

438
00:21:48,280 --> 00:21:52,810
I<font color="#CCCCCC"> don't know</font><font color="#E5E5E5"> you have the local</font><font color="#CCCCCC"> varsa</font>

439
00:21:51,070 --> 00:21:55,330
which<font color="#E5E5E5"> is another function that it</font>

440
00:21:52,810 --> 00:21:58,210
requires<font color="#CCCCCC"> to return an array of things</font>

441
00:21:55,330 --> 00:22:00,879
you can return all the information<font color="#CCCCCC"> that</font>

442
00:21:58,210 --> 00:22:02,850
you might<font color="#E5E5E5"> need</font><font color="#CCCCCC"> for like for example</font><font color="#E5E5E5"> if</font>

443
00:22:00,880 --> 00:22:05,350
you have defined some

444
00:22:02,850 --> 00:22:08,020
some local variables<font color="#CCCCCC"> and</font><font color="#E5E5E5"> say oh this is</font>

445
00:22:05,350 --> 00:22:10,719
<font color="#E5E5E5">a local</font><font color="#CCCCCC"> variable just drop in there and</font>

446
00:22:08,020 --> 00:22:13,690
magically as I<font color="#E5E5E5"> said as a show</font><font color="#CCCCCC"> before you</font>

447
00:22:10,720 --> 00:22:16,810
<font color="#CCCCCC">will</font><font color="#E5E5E5"> have at</font><font color="#CCCCCC"> the beginning of the</font><font color="#E5E5E5"> of the</font>

448
00:22:13,690 --> 00:22:21,070
<font color="#CCCCCC">compilation</font><font color="#E5E5E5"> all the function sorry all</font>

449
00:22:16,810 --> 00:22:24,639
the local<font color="#CCCCCC"> variables define like</font><font color="#E5E5E5"> int I</font>

450
00:22:21,070 --> 00:22:27,790
equals<font color="#CCCCCC"> zero I do the</font><font color="#E5E5E5"> same for global</font>

451
00:22:24,640 --> 00:22:32,140
variables and so we will<font color="#E5E5E5"> be shown</font>

452
00:22:27,790 --> 00:22:34,389
<font color="#E5E5E5">outside the</font><font color="#CCCCCC"> the likely</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> C you will</font>

453
00:22:32,140 --> 00:22:36,430
<font color="#E5E5E5">have the global variable then there will</font>

454
00:22:34,390 --> 00:22:39,370
<font color="#CCCCCC">be shown on</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> Condor completion if you</font>

455
00:22:36,430 --> 00:22:41,230
feel that array for<font color="#CCCCCC"> the same for goes</font>

456
00:22:39,370 --> 00:22:44,169
<font color="#E5E5E5">for arguments that arguments is the</font>

457
00:22:41,230 --> 00:22:46,170
function argument that you have a<font color="#CCCCCC"> yeren</font>

458
00:22:44,170 --> 00:22:50,140
so if you are noticing<font color="#CCCCCC"> I don't know</font>

459
00:22:46,170 --> 00:22:53,200
function called foo and<font color="#E5E5E5"> he has a bunch</font>

460
00:22:50,140 --> 00:22:55,210
of arguments<font color="#E5E5E5"> you can just drop them</font>

461
00:22:53,200 --> 00:22:57,610
there<font color="#E5E5E5"> and maybe you will say foo</font>

462
00:22:55,210 --> 00:23:02,530
requires to get<font color="#CCCCCC"> input off</font><font color="#E5E5E5"> I don't know</font>

463
00:22:57,610 --> 00:23:04,870
an integer and a char and returns is the

464
00:23:02,530 --> 00:23:07,090
return type of the function<font color="#E5E5E5"> so if you if</font>

465
00:23:04,870 --> 00:23:09,459
you during<font color="#E5E5E5"> the nicest you say oh we are</font>

466
00:23:07,090 --> 00:23:12,010
they modifying<font color="#CCCCCC"> I</font><font color="#E5E5E5"> didn't know for</font><font color="#CCCCCC"> example</font>

467
00:23:09,460 --> 00:23:17,740
<font color="#E5E5E5">next 86 rocks and that we are never</font>

468
00:23:12,010 --> 00:23:21,340
never<font color="#E5E5E5"> restoring it</font><font color="#CCCCCC"> oh maybe it's I</font><font color="#E5E5E5"> don't</font>

469
00:23:17,740 --> 00:23:24,760
a 64-bit value<font color="#E5E5E5"> so you change it and even</font>

470
00:23:21,340 --> 00:23:26,770
magically do<font color="#E5E5E5"> these will say during the</font>

471
00:23:24,760 --> 00:23:30,970
<font color="#E5E5E5">computation</font><font color="#CCCCCC"> oh this is the function foo</font>

472
00:23:26,770 --> 00:23:32,860
that returns<font color="#CCCCCC"> a 64-bit value</font><font color="#E5E5E5"> so that's</font>

473
00:23:30,970 --> 00:23:34,750
<font color="#CCCCCC">the this is the most interesting</font><font color="#E5E5E5"> one so</font>

474
00:23:32,860 --> 00:23:36,310
you have<font color="#CCCCCC"> the instructions</font><font color="#E5E5E5"> so you</font><font color="#CCCCCC"> fill</font>

475
00:23:34,750 --> 00:23:38,590
this for<font color="#CCCCCC"> each</font><font color="#E5E5E5"> instruction of the</font>

476
00:23:36,310 --> 00:23:42,250
architecture<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you define and you</font>

477
00:23:38,590 --> 00:23:45,280
return the base object<font color="#E5E5E5"> and by saying oh</font>

478
00:23:42,250 --> 00:23:48,520
you<font color="#CCCCCC"> have the base and which is an ED</font>

479
00:23:45,280 --> 00:23:50,770
<font color="#E5E5E5">this case and it gets input of the first</font>

480
00:23:48,520 --> 00:23:53,920
<font color="#E5E5E5">operand the second with the second one</font>

481
00:23:50,770 --> 00:23:58,270
and third one<font color="#E5E5E5"> and it will just return</font>

482
00:23:53,920 --> 00:24:01,210
the all the<font color="#CCCCCC"> optimization and stuff then</font>

483
00:23:58,270 --> 00:24:05,590
you have the person one<font color="#E5E5E5"> person is the</font>

484
00:24:01,210 --> 00:24:08,230
common<font color="#E5E5E5"> that is used to pass the assembly</font>

485
00:24:05,590 --> 00:24:13,389
code<font color="#E5E5E5"> so usually you will have a string</font>

486
00:24:08,230 --> 00:24:15,860
which says I<font color="#CCCCCC"> don't know</font><font color="#E5E5E5"> add rocks</font><font color="#CCCCCC"> ten</font>

487
00:24:13,390 --> 00:24:19,130
and then what you want<font color="#E5E5E5"> to do</font>

488
00:24:15,860 --> 00:24:21,020
just<font color="#E5E5E5"> spit it into</font><font color="#CCCCCC"> tokens and maybe do</font>

489
00:24:19,130 --> 00:24:24,290
some<font color="#E5E5E5"> analysis</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> because like</font><font color="#CCCCCC"> we</font>

490
00:24:21,020 --> 00:24:26,570
<font color="#CCCCCC">simple in their X in X 66 you have you</font>

491
00:24:24,290 --> 00:24:30,379
know<font color="#CCCCCC"> pointers that are defined with</font><font color="#E5E5E5"> a</font>

492
00:24:26,570 --> 00:24:34,549
word or word or whatever<font color="#E5E5E5"> before or there</font>

493
00:24:30,380 --> 00:24:37,190
are some brackets<font color="#E5E5E5"> so you will know</font><font color="#CCCCCC"> that</font>

494
00:24:34,549 --> 00:24:40,580
those are pointers and you just want<font color="#CCCCCC"> to</font>

495
00:24:37,190 --> 00:24:43,720
make<font color="#E5E5E5"> it more complete so you can just</font>

496
00:24:40,580 --> 00:24:47,419
drop under OPD any object<font color="#CCCCCC"> you like and</font>

497
00:24:43,720 --> 00:24:50,860
it will be fine<font color="#CCCCCC"> and the unimportant</font>

498
00:24:47,420 --> 00:24:54,110
point is that it has to have the name

499
00:24:50,860 --> 00:24:57,830
<font color="#CCCCCC">keyword because</font><font color="#E5E5E5"> it's used to analyze</font>

500
00:24:54,110 --> 00:25:01,090
later<font color="#CCCCCC"> the instruction by fetching</font><font color="#E5E5E5"> the</font>

501
00:24:57,830 --> 00:25:04,100
name from the instructions above

502
00:25:01,090 --> 00:25:07,070
<font color="#E5E5E5">structure and then</font><font color="#CCCCCC"> you have the context</font>

503
00:25:04,100 --> 00:25:08,570
functions which is the<font color="#E5E5E5"> context sorry is</font>

504
00:25:07,070 --> 00:25:10,970
the function that returns the<font color="#E5E5E5"> context</font>

505
00:25:08,570 --> 00:25:12,830
object<font color="#CCCCCC"> it is used just once at the</font>

506
00:25:10,970 --> 00:25:14,660
<font color="#CCCCCC">beginning and then you will have the</font>

507
00:25:12,830 --> 00:25:18,230
nice<font color="#E5E5E5"> object</font><font color="#CCCCCC"> that you'd like</font><font color="#E5E5E5"> to have</font>

508
00:25:14,660 --> 00:25:20,240
doing the computation

509
00:25:18,230 --> 00:25:22,820
another thing is the instruction object

510
00:25:20,240 --> 00:25:26,600
which is<font color="#E5E5E5"> the one that you can</font><font color="#CCCCCC"> see here</font>

511
00:25:22,820 --> 00:25:28,490
so this variable<font color="#CCCCCC"> instr is actually at</font>

512
00:25:26,600 --> 00:25:31,549
this object<font color="#CCCCCC"> it contains like the</font>

513
00:25:28,490 --> 00:25:34,250
location<font color="#E5E5E5"> of the current instruction if</font>

514
00:25:31,549 --> 00:25:36,530
it jumps it contains the jump point

515
00:25:34,250 --> 00:25:38,900
it contains the assembly line<font color="#E5E5E5"> the</font>

516
00:25:36,530 --> 00:25:40,639
original assembly line has an array<font color="#CCCCCC"> of</font>

517
00:25:38,900 --> 00:25:43,040
strings<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> have want to</font><font color="#E5E5E5"> add some</font>

518
00:25:40,640 --> 00:25:44,860
comments<font color="#CCCCCC"> because</font><font color="#E5E5E5"> I don't know it has</font><font color="#CCCCCC"> is</font>

519
00:25:43,040 --> 00:25:47,960
<font color="#CCCCCC">a special instruction that you want to</font>

520
00:25:44,860 --> 00:25:50,209
know to the user that has it does

521
00:25:47,960 --> 00:25:54,080
something<font color="#E5E5E5"> special specifically you can</font>

522
00:25:50,210 --> 00:25:57,820
<font color="#E5E5E5">add</font><font color="#CCCCCC"> a comment</font><font color="#E5E5E5"> you will have the code one</font>

523
00:25:54,080 --> 00:26:01,970
which<font color="#E5E5E5"> is</font><font color="#CCCCCC"> there the value that is used to</font>

524
00:25:57,820 --> 00:26:04,189
this assign to the function so for

525
00:26:01,970 --> 00:26:08,510
<font color="#E5E5E5">example</font><font color="#CCCCCC"> one is</font><font color="#E5E5E5"> called add and the</font>

526
00:26:04,190 --> 00:26:11,150
returns with this base add object that<font color="#E5E5E5"> D</font>

527
00:26:08,510 --> 00:26:13,100
read the original value will be<font color="#E5E5E5"> inserted</font>

528
00:26:11,150 --> 00:26:17,090
into<font color="#CCCCCC"> this variable</font><font color="#E5E5E5"> you have the pass</font>

529
00:26:13,100 --> 00:26:20,418
<font color="#CCCCCC">passed object which is the what is the</font>

530
00:26:17,090 --> 00:26:22,370
variable<font color="#E5E5E5"> that is used sorry is assigned</font>

531
00:26:20,419 --> 00:26:25,940
<font color="#CCCCCC">to the value that is returned by this</font>

532
00:26:22,370 --> 00:26:28,309
<font color="#E5E5E5">departure function and you have</font><font color="#CCCCCC"> the</font>

533
00:26:25,940 --> 00:26:29,590
valid the one<font color="#E5E5E5"> with a boolean if during</font>

534
00:26:28,309 --> 00:26:31,990
<font color="#E5E5E5">the computation you know that the</font>

535
00:26:29,590 --> 00:26:34,959
variable doesn't<font color="#CCCCCC"> need to be shown</font><font color="#E5E5E5"> you</font>

536
00:26:31,990 --> 00:26:37,779
just<font color="#E5E5E5"> set it</font><font color="#CCCCCC"> to false</font><font color="#E5E5E5"> and magically want</font>

537
00:26:34,960 --> 00:26:39,789
to be shown<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> the string</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> the</font>

538
00:26:37,779 --> 00:26:41,590
<font color="#E5E5E5">string is used for</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> one you have</font>

539
00:26:39,789 --> 00:26:43,750
<font color="#E5E5E5">I don't know a lot through pointer and</font>

540
00:26:41,590 --> 00:26:45,820
you know that pointer is<font color="#CCCCCC"> pointing to a</font>

541
00:26:43,750 --> 00:26:49,120
string the are two that<font color="#E5E5E5"> will magically</font>

542
00:26:45,820 --> 00:26:51,428
<font color="#E5E5E5">to all the cross-reference and just drop</font>

543
00:26:49,120 --> 00:26:53,559
the e string<font color="#E5E5E5"> inside there so if you know</font>

544
00:26:51,429 --> 00:26:55,630
<font color="#E5E5E5">that that's a string and it's</font><font color="#CCCCCC"> a located</font>

545
00:26:53,559 --> 00:26:57,460
<font color="#E5E5E5">then just drop you just</font><font color="#CCCCCC"> changed for</font>

546
00:26:55,630 --> 00:27:00,760
example<font color="#CCCCCC"> the assignment instead of the</font>

547
00:26:57,460 --> 00:27:02,549
<font color="#E5E5E5">pointer with the string itself</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> you</font>

548
00:27:00,760 --> 00:27:06,549
have the function<font color="#CCCCCC"> this is conditional</font>

549
00:27:02,549 --> 00:27:08,200
you just say which what<font color="#CCCCCC"> is a and B and</font>

550
00:27:06,549 --> 00:27:12,070
the which type<font color="#CCCCCC"> of condition I</font><font color="#E5E5E5"> don't know</font>

551
00:27:08,200 --> 00:27:15,190
less greater or whatever and when the

552
00:27:12,070 --> 00:27:17,408
analysis look<font color="#E5E5E5"> we'll be working on it</font>

553
00:27:15,190 --> 00:27:20,460
<font color="#CCCCCC">we'll just change it to whatever control</font>

554
00:27:17,409 --> 00:27:23,409
will be<font color="#CCCCCC"> an a scene and D condition and</font>

555
00:27:20,460 --> 00:27:25,000
if you sometimes<font color="#E5E5E5"> happen that you have</font>

556
00:27:23,409 --> 00:27:26,710
some bad jumps<font color="#E5E5E5"> like for example for</font>

557
00:27:25,000 --> 00:27:29,559
<font color="#E5E5E5">calls and you</font><font color="#CCCCCC"> know that</font><font color="#E5E5E5"> calls is not</font>

558
00:27:26,710 --> 00:27:31,929
technical jump in that case<font color="#E5E5E5"> because it's</font>

559
00:27:29,559 --> 00:27:35,590
just calling<font color="#CCCCCC"> a function and you want the</font>

560
00:27:31,929 --> 00:27:37,630
one who messed<font color="#E5E5E5"> up</font><font color="#CCCCCC"> the net accumulation</font>

561
00:27:35,590 --> 00:27:41,289
you just call this one and magically<font color="#E5E5E5"> the</font>

562
00:27:37,630 --> 00:27:47,350
pointer<font color="#E5E5E5"> sorry of the jump value will be</font>

563
00:27:41,289 --> 00:27:49,029
gone and one more<font color="#E5E5E5"> thing is usually you</font>

564
00:27:47,350 --> 00:27:51,629
will you might have some in some

565
00:27:49,029 --> 00:27:53,980
marketers or some really<font color="#E5E5E5"> complex</font>

566
00:27:51,630 --> 00:27:55,419
instructions like for example<font color="#CCCCCC"> on PowerPC</font>

567
00:27:53,980 --> 00:27:58,899
there is this<font color="#CCCCCC"> date left</font><font color="#E5E5E5"> world</font>

568
00:27:55,419 --> 00:28:01,480
<font color="#CCCCCC">immediately then masks</font><font color="#E5E5E5"> insert this is</font><font color="#CCCCCC"> a</font>

569
00:27:58,899 --> 00:28:04,600
really up<font color="#E5E5E5"> in the instruction is</font>

570
00:28:01,480 --> 00:28:06,760
what it does is he has<font color="#CCCCCC"> a bunch of inputs</font>

571
00:28:04,600 --> 00:28:09,100
like<font color="#CCCCCC"> a destination</font><font color="#E5E5E5"> source the shift</font>

572
00:28:06,760 --> 00:28:12,250
<font color="#CCCCCC">number</font><font color="#E5E5E5"> they must begin the mask and</font>

573
00:28:09,100 --> 00:28:14,350
which are odd numbers<font color="#E5E5E5"> from them from</font>

574
00:28:12,250 --> 00:28:17,500
<font color="#CCCCCC">math convenient from mask and</font><font color="#E5E5E5"> you get a</font>

575
00:28:14,350 --> 00:28:19,330
mask<font color="#E5E5E5"> and what it does</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> Russian is</font>

576
00:28:17,500 --> 00:28:21,220
that<font color="#CCCCCC"> this mask it goes in and with</font>

577
00:28:19,330 --> 00:28:23,470
destination and it goes everything<font color="#E5E5E5"> goes</font>

578
00:28:21,220 --> 00:28:27,399
<font color="#E5E5E5">in or with the result of the year that</font>

579
00:28:23,470 --> 00:28:30,549
left<font color="#E5E5E5"> in instruction and</font><font color="#CCCCCC"> the that goes</font>

580
00:28:27,399 --> 00:28:35,459
also<font color="#E5E5E5"> in mask so how do you define</font><font color="#CCCCCC"> this</font>

581
00:28:30,549 --> 00:28:38,770
in<font color="#E5E5E5"> our to deck you use the based compost</font>

582
00:28:35,460 --> 00:28:42,640
<font color="#E5E5E5">object so what it does you define an</font>

583
00:28:38,770 --> 00:28:43,360
array of<font color="#CCCCCC"> base objects so for example in</font>

584
00:28:42,640 --> 00:28:47,850
this<font color="#E5E5E5"> case</font>

585
00:28:43,360 --> 00:28:50,139
you have the<font color="#E5E5E5"> rotary left</font><font color="#CCCCCC"> as the first</font>

586
00:28:47,850 --> 00:28:53,590
instruction<font color="#E5E5E5"> that it</font><font color="#CCCCCC"> would be evaluated</font>

587
00:28:50,139 --> 00:28:57,488
<font color="#CCCCCC">so I create a</font><font color="#E5E5E5"> variable that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> named</font>

588
00:28:53,590 --> 00:29:02,980
local and a number<font color="#E5E5E5"> and will be given as</font>

589
00:28:57,489 --> 00:29:05,649
the destination of the rotation<font color="#E5E5E5"> then you</font>

590
00:29:02,980 --> 00:29:08,379
will<font color="#E5E5E5"> have the source and the source</font>

591
00:29:05,649 --> 00:29:11,738
register and the number of bits<font color="#E5E5E5"> that you</font>

592
00:29:08,379 --> 00:29:14,709
want to shift<font color="#E5E5E5"> up and I will define this</font>

593
00:29:11,739 --> 00:29:18,700
is our debt left of 32 bits<font color="#CCCCCC"> so just to</font>

594
00:29:14,710 --> 00:29:21,759
<font color="#E5E5E5">be sure that I not forget something then</font>

595
00:29:18,700 --> 00:29:25,359
you will have the base end and which

596
00:29:21,759 --> 00:29:27,669
goes from value value 0<font color="#CCCCCC"> and then the</font>

597
00:29:25,359 --> 00:29:30,279
mask<font color="#CCCCCC"> so I'm just following this</font>

598
00:29:27,669 --> 00:29:32,460
structure and you<font color="#E5E5E5"> redefine them by using</font>

599
00:29:30,279 --> 00:29:37,840
<font color="#E5E5E5">just the base operation operations and</font>

600
00:29:32,460 --> 00:29:39,820
this<font color="#E5E5E5"> ops array will be given as input as</font>

601
00:29:37,840 --> 00:29:41,529
<font color="#E5E5E5">the base</font><font color="#CCCCCC"> composed and during the</font>

602
00:29:39,820 --> 00:29:43,359
compilation time when they will be

603
00:29:41,529 --> 00:29:45,399
printed everything<font color="#CCCCCC"> will be there so you</font>

604
00:29:43,359 --> 00:29:51,639
<font color="#E5E5E5">will see it</font><font color="#CCCCCC"> I rotate left the end and</font><font color="#E5E5E5"> a</font>

605
00:29:45,399 --> 00:29:53,918
<font color="#E5E5E5">door and that's all</font><font color="#CCCCCC"> so thanks questions</font>

606
00:29:51,639 --> 00:29:56,469
<font color="#E5E5E5">so if you</font><font color="#CCCCCC"> have questions I'm really</font>

607
00:29:53,919 --> 00:29:59,249
happy to answer them<font color="#CCCCCC"> if you don't and</font>

608
00:29:56,470 --> 00:30:02,109
you may have later<font color="#E5E5E5"> on just find me</font>

609
00:29:59,249 --> 00:30:05,020
<font color="#E5E5E5">during the conference and I will be more</font>

610
00:30:02,109 --> 00:30:13,339
<font color="#E5E5E5">than</font><font color="#CCCCCC"> happy to</font><font color="#E5E5E5"> answer you</font><font color="#CCCCCC"> Thanks</font>

611
00:30:05,020 --> 00:30:13,339
[Applause]

612
00:30:13,630 --> 00:30:20,679
questions<font color="#E5E5E5"> nope</font><font color="#CCCCCC"> okay yep</font>

613
00:30:25,220 --> 00:30:27,879
yes

614
00:30:34,110 --> 00:30:43,409
so<font color="#CCCCCC"> retic is a really awesome</font><font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> so</font>

615
00:30:39,480 --> 00:30:45,780
he's asking essentially what is the

616
00:30:43,410 --> 00:30:49,590
difference between our<font color="#CCCCCC"> two deck and red</font>

617
00:30:45,780 --> 00:30:53,990
deck<font color="#E5E5E5"> did the compiler so the difference</font>

618
00:30:49,590 --> 00:30:57,419
is huge<font color="#CCCCCC"> it means that red deck is</font>

619
00:30:53,990 --> 00:31:00,660
analyzing stuff by itself it has<font color="#CCCCCC"> to</font><font color="#E5E5E5"> give</font>

620
00:30:57,420 --> 00:31:03,510
some data<font color="#E5E5E5"> it can</font><font color="#CCCCCC"> analyses the binaries</font>

621
00:31:00,660 --> 00:31:06,150
also so we<font color="#E5E5E5"> can have I think it has</font><font color="#CCCCCC"> but</font>

622
00:31:03,510 --> 00:31:09,570
<font color="#CCCCCC">the</font><font color="#E5E5E5"> drop zone so</font><font color="#CCCCCC"> it does a</font><font color="#E5E5E5"> bunch of</font>

623
00:31:06,150 --> 00:31:11,700
things<font color="#E5E5E5"> and it</font><font color="#CCCCCC"> just don't</font><font color="#E5E5E5"> does that he</font>

624
00:31:09,570 --> 00:31:16,590
what he has is has it has an engine

625
00:31:11,700 --> 00:31:18,930
behind<font color="#E5E5E5"> which is essentially analyzing</font>

626
00:31:16,590 --> 00:31:21,959
the instruction changing them<font color="#CCCCCC"> to some</font>

627
00:31:18,930 --> 00:31:24,690
microbes and then<font color="#E5E5E5"> analyzing microbes and</font>

628
00:31:21,960 --> 00:31:27,660
the output of the analysis of those

629
00:31:24,690 --> 00:31:31,740
microbes is used to output all the file

630
00:31:27,660 --> 00:31:35,310
and he is<font color="#E5E5E5"> kinda better</font><font color="#CCCCCC"> than red deck is</font>

631
00:31:31,740 --> 00:31:37,770
<font color="#CCCCCC">heir to deck itself but in a specific</font>

632
00:31:35,310 --> 00:31:38,929
way with me what I'm saying<font color="#CCCCCC"> trends to</font>

633
00:31:37,770 --> 00:31:42,690
say is<font color="#CCCCCC"> just</font>

634
00:31:38,930 --> 00:31:45,290
<font color="#CCCCCC">retic is truly the combined stuff</font><font color="#E5E5E5"> and it</font>

635
00:31:42,690 --> 00:31:49,560
tries to output some really useful

636
00:31:45,290 --> 00:31:53,460
<font color="#CCCCCC">compound</font><font color="#E5E5E5"> comparable C code and it also</font>

637
00:31:49,560 --> 00:31:56,070
has like some specific<font color="#E5E5E5"> internal TM</font>

638
00:31:53,460 --> 00:31:58,470
optimization like<font color="#E5E5E5"> if you have a register</font>

639
00:31:56,070 --> 00:32:00,960
<font color="#CCCCCC">that is used multiple times it will</font><font color="#E5E5E5"> just</font>

640
00:31:58,470 --> 00:32:03,030
come n these I don't<font color="#E5E5E5"> tell registry set</font>

641
00:32:00,960 --> 00:32:06,660
to<font color="#CCCCCC"> 0 it will just use the 0 itself</font>

642
00:32:03,030 --> 00:32:10,410
without showing the register<font color="#CCCCCC"> and it has</font>

643
00:32:06,660 --> 00:32:13,350
like you<font color="#CCCCCC"> know if you have like register</font>

644
00:32:10,410 --> 00:32:15,390
set to<font color="#E5E5E5"> 0 and then an ad that</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> 0</font>

645
00:32:13,350 --> 00:32:19,370
itself will be used<font color="#E5E5E5"> for ad yet so it's</font>

646
00:32:15,390 --> 00:32:23,520
just moving stuff and doing really some

647
00:32:19,370 --> 00:32:26,100
magic<font color="#E5E5E5"> quicksand on the the compilation</font>

648
00:32:23,520 --> 00:32:28,230
<font color="#E5E5E5">the completion itself are too dark</font><font color="#CCCCCC"> it</font>

649
00:32:26,100 --> 00:32:30,959
was not this designed to be like that

650
00:32:28,230 --> 00:32:32,490
not that complexity<font color="#E5E5E5"> not this type of</font>

651
00:32:30,960 --> 00:32:34,800
complexity<font color="#E5E5E5"> because it's running</font><font color="#CCCCCC"> on</font>

652
00:32:32,490 --> 00:32:38,370
JavaScript and<font color="#E5E5E5"> you cannot handle too</font>

653
00:32:34,800 --> 00:32:40,860
much<font color="#E5E5E5"> data</font><font color="#CCCCCC"> but it</font><font color="#E5E5E5"> was designed to be to</font>

654
00:32:38,370 --> 00:32:42,600
output something that for example<font color="#E5E5E5"> if you</font>

655
00:32:40,860 --> 00:32:43,139
don't<font color="#E5E5E5"> know and a specific architecture</font>

656
00:32:42,600 --> 00:32:46,320
and<font color="#E5E5E5"> right</font>

657
00:32:43,140 --> 00:32:49,170
<font color="#E5E5E5">up to that supports it</font><font color="#CCCCCC"> you can use</font><font color="#E5E5E5"> it to</font>

658
00:32:46,320 --> 00:32:51,240
compare<font color="#E5E5E5"> it or with the Adhan</font><font color="#CCCCCC"> off with</font>

659
00:32:49,170 --> 00:32:53,850
<font color="#E5E5E5">assembly to</font><font color="#CCCCCC"> PD da</font>

660
00:32:51,240 --> 00:32:55,680
<font color="#E5E5E5">so you will get like for example for the</font>

661
00:32:53,850 --> 00:32:59,070
<font color="#E5E5E5"> up instruction that is shown</font>

662
00:32:55,680 --> 00:33:03,510
before so for<font color="#CCCCCC"> this one since you</font><font color="#E5E5E5"> might</font>

663
00:32:59,070 --> 00:33:05,370
<font color="#E5E5E5">not know what RL</font><font color="#CCCCCC"> why my is</font><font color="#E5E5E5"> you will just</font>

664
00:33:03,510 --> 00:33:06,870
see that<font color="#CCCCCC"> oh it's the code is the</font>

665
00:33:05,370 --> 00:33:09,209
compiled in that way or and now I

666
00:33:06,870 --> 00:33:12,030
understand<font color="#E5E5E5"> what it is maybe</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> will make</font>

667
00:33:09,210 --> 00:33:14,670
more sense<font color="#CCCCCC"> so from my point of view will</font>

668
00:33:12,030 --> 00:33:16,830
be<font color="#E5E5E5"> like more a tool that</font><font color="#CCCCCC"> you can use to</font>

669
00:33:14,670 --> 00:33:19,290
the compiled stuff if you want I'm<font color="#E5E5E5"> okay</font>

670
00:33:16,830 --> 00:33:21,810
or to<font color="#CCCCCC"> just see</font><font color="#E5E5E5"> all I don't</font><font color="#CCCCCC"> know what it</font>

671
00:33:19,290 --> 00:33:24,270
<font color="#E5E5E5">means and r2 maybe it doesn't have the</font>

672
00:33:21,810 --> 00:33:27,300
<font color="#E5E5E5">are</font><font color="#CCCCCC"> deep-set though implemented and</font>

673
00:33:24,270 --> 00:33:29,490
maybe mine<font color="#E5E5E5"> has app for reasons and you</font>

674
00:33:27,300 --> 00:33:30,840
can<font color="#CCCCCC"> just check it but if you see</font>

675
00:33:29,490 --> 00:33:34,910
<font color="#E5E5E5">something like</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> please report also</font>

676
00:33:30,840 --> 00:33:34,909
<font color="#E5E5E5">to debug to r2 for radar</font>

677
00:33:41,770 --> 00:33:48,760
<font color="#E5E5E5">oh yeah oh yeah</font><font color="#CCCCCC"> oh great another</font>

678
00:33:45,970 --> 00:33:51,460
<font color="#E5E5E5">question I would have is some</font>

679
00:33:48,760 --> 00:33:53,530
architectures<font color="#CCCCCC"> have control specific</font>

680
00:33:51,460 --> 00:33:57,880
instructions like for example<font color="#E5E5E5"> hardware</font>

681
00:33:53,530 --> 00:34:00,520
loops<font color="#E5E5E5"> yes</font><font color="#CCCCCC"> uh if there is such an</font>

682
00:33:57,880 --> 00:34:02,890
instruction<font color="#E5E5E5"> it most likely will not</font>

683
00:34:00,520 --> 00:34:06,730
produce<font color="#E5E5E5"> the kind of</font><font color="#CCCCCC"> pattern that</font><font color="#E5E5E5"> usually</font>

684
00:34:02,890 --> 00:34:11,440
loops have like the jump and stuff like

685
00:34:06,730 --> 00:34:15,369
<font color="#E5E5E5">that how do you have any concept</font><font color="#CCCCCC"> of how</font>

686
00:34:11,440 --> 00:34:16,929
<font color="#CCCCCC">Art Attack</font><font color="#E5E5E5"> will handle these okay so for</font>

687
00:34:15,369 --> 00:34:20,139
<font color="#CCCCCC">example I</font><font color="#E5E5E5"> would make an example for this</font>

688
00:34:16,929 --> 00:34:22,810
case<font color="#CCCCCC"> this</font><font color="#E5E5E5"> case for example I found</font><font color="#CCCCCC"> that</font>

689
00:34:20,139 --> 00:34:25,300
like you know<font color="#CCCCCC"> your necks</font><font color="#E5E5E5"> 86 there are</font>

690
00:34:22,810 --> 00:34:28,659
some string operation that does<font color="#CCCCCC"> a for</font>

691
00:34:25,300 --> 00:34:31,419
<font color="#E5E5E5">example comparison or I</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> initialize</font>

692
00:34:28,659 --> 00:34:34,619
some memory data and it's just one line

693
00:34:31,418 --> 00:34:37,359
big line of instruction and you<font color="#E5E5E5"> can</font>

694
00:34:34,619 --> 00:34:39,879
relate<font color="#E5E5E5"> that instruction by using a loop</font>

695
00:34:37,360 --> 00:34:43,389
as you<font color="#E5E5E5"> said but</font><font color="#CCCCCC"> that instruction itself</font>

696
00:34:39,879 --> 00:34:46,418
isn't<font color="#CCCCCC"> jumping anywhere so how to emulate</font>

697
00:34:43,389 --> 00:34:48,310
<font color="#CCCCCC">that on our to deck</font><font color="#E5E5E5"> so the the only</font><font color="#CCCCCC"> way</font>

698
00:34:46,418 --> 00:34:50,560
to emulate<font color="#CCCCCC"> that is just saying</font><font color="#E5E5E5"> that it's</font>

699
00:34:48,310 --> 00:34:54,040
<font color="#CCCCCC">jumping on itself</font><font color="#E5E5E5"> in that way you will</font>

700
00:34:50,560 --> 00:34:56,710
know that is a after<font color="#CCCCCC"> that we know that</font>

701
00:34:54,040 --> 00:34:59,560
is a loop because<font color="#E5E5E5"> jumping on itself is</font>

702
00:34:56,710 --> 00:35:02,320
<font color="#CCCCCC">the loop</font><font color="#E5E5E5"> and you</font><font color="#CCCCCC"> can use then</font><font color="#E5E5E5"> later on</font>

703
00:34:59,560 --> 00:35:06,130
<font color="#E5E5E5">the</font><font color="#CCCCCC"> composer object you define a more</font>

704
00:35:02,320 --> 00:35:09,520
see like the competition where<font color="#E5E5E5"> you can</font>

705
00:35:06,130 --> 00:35:12,760
<font color="#E5E5E5">define</font><font color="#CCCCCC"> like variables and stuff say oh</font>

706
00:35:09,520 --> 00:35:16,210
you you get this register this register

707
00:35:12,760 --> 00:35:19,570
<font color="#CCCCCC">is used</font><font color="#E5E5E5"> as a pointer you just move the</font>

708
00:35:16,210 --> 00:35:22,090
<font color="#E5E5E5">pointer by one each</font><font color="#CCCCCC"> time and this</font><font color="#E5E5E5"> time</font>

709
00:35:19,570 --> 00:35:25,090
<font color="#E5E5E5">you just compare it</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> another pointer</font>

710
00:35:22,090 --> 00:35:27,400
so<font color="#CCCCCC"> technique it's</font><font color="#E5E5E5"> feasible</font><font color="#CCCCCC"> because the</font>

711
00:35:25,090 --> 00:35:29,770
guy<font color="#E5E5E5"> that has implemented x86 for example</font>

712
00:35:27,400 --> 00:35:32,020
has done this is as asking me the same

713
00:35:29,770 --> 00:35:34,570
question<font color="#E5E5E5"> and I told you how to fix this</font>

714
00:35:32,020 --> 00:35:37,060
<font color="#CCCCCC">and we</font><font color="#E5E5E5"> have now now have some support</font>

715
00:35:34,570 --> 00:35:39,640
for<font color="#E5E5E5"> those type of string operations so</font>

716
00:35:37,060 --> 00:35:44,290
it's quite nice<font color="#CCCCCC"> to also</font><font color="#E5E5E5"> have this</font>

717
00:35:39,640 --> 00:35:49,180
feature inside our<font color="#E5E5E5"> up to deck any other</font>

718
00:35:44,290 --> 00:35:54,790
question is there<font color="#CCCCCC"> any one if not</font><font color="#E5E5E5"> I will</font>

719
00:35:49,180 --> 00:35:58,660
ask another<font color="#E5E5E5"> one okay</font>

720
00:35:54,790 --> 00:36:02,730
<font color="#E5E5E5">red deck and I think hex racin ID as</font>

721
00:35:58,660 --> 00:36:05,140
well<font color="#CCCCCC"> when they cannot structure</font><font color="#E5E5E5"> a</font>

722
00:36:02,730 --> 00:36:08,800
function properly like the control

723
00:36:05,140 --> 00:36:13,450
control<font color="#CCCCCC"> fo they resort to labels and go</font>

724
00:36:08,800 --> 00:36:15,040
twos<font color="#E5E5E5"> yes</font><font color="#CCCCCC"> oh how</font><font color="#E5E5E5"> does our</font><font color="#CCCCCC"> two duck handle</font>

725
00:36:13,450 --> 00:36:16,660
<font color="#CCCCCC">the</font><font color="#E5E5E5"> situation</font><font color="#CCCCCC"> well</font><font color="#E5E5E5"> I do the same because</font>

726
00:36:15,040 --> 00:36:19,660
<font color="#E5E5E5">there is another way</font><font color="#CCCCCC"> to define them so</font>

727
00:36:16,660 --> 00:36:22,299
if<font color="#CCCCCC"> you have like some freaky</font><font color="#E5E5E5"> optimized</font>

728
00:36:19,660 --> 00:36:25,779
code that does really some jumps that<font color="#E5E5E5"> he</font>

729
00:36:22,300 --> 00:36:28,810
cannot be defined in anything<font color="#E5E5E5"> else that</font>

730
00:36:25,780 --> 00:36:32,580
jumps like go twos and labels<font color="#CCCCCC"> I do the</font>

731
00:36:28,810 --> 00:36:36,520
<font color="#E5E5E5">same and if you have like also some</font>

732
00:36:32,580 --> 00:36:38,560
strange<font color="#E5E5E5"> operation like</font><font color="#CCCCCC"> an arm</font><font color="#E5E5E5"> buddy you</font>

733
00:36:36,520 --> 00:36:40,870
can do like<font color="#CCCCCC"> ad only</font><font color="#E5E5E5"> if there is a</font>

734
00:36:38,560 --> 00:36:43,420
condition<font color="#E5E5E5"> also those will be translate</font>

735
00:36:40,870 --> 00:36:46,720
can be<font color="#E5E5E5"> easily translated into</font><font color="#CCCCCC"> if-else</font>

736
00:36:43,420 --> 00:36:48,790
and<font color="#CCCCCC"> Jabez just</font><font color="#E5E5E5"> negate in</font><font color="#CCCCCC"> there do the</font>

737
00:36:46,720 --> 00:36:52,000
condition itself so if it is you<font color="#E5E5E5"> know</font>

738
00:36:48,790 --> 00:36:54,700
another with a negative check you just

739
00:36:52,000 --> 00:36:59,320
<font color="#CCCCCC">say</font><font color="#E5E5E5"> is equal and everything will</font><font color="#CCCCCC"> be</font>

740
00:36:54,700 --> 00:37:03,850
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> okay</font>

741
00:36:59,320 --> 00:37:07,740
I don't know the time but that's all

742
00:37:03,850 --> 00:37:11,049
thank<font color="#CCCCCC"> you so much thanks again and</font>

743
00:37:07,740 --> 00:37:13,089
please<font color="#E5E5E5"> do you some contribution on the</font>

744
00:37:11,050 --> 00:37:16,110
project if you<font color="#E5E5E5"> like and if you like</font><font color="#CCCCCC"> also</font>

745
00:37:13,090 --> 00:37:20,679
please use<font color="#CCCCCC"> it</font><font color="#E5E5E5"> thank you</font>

746
00:37:16,110 --> 00:37:20,679
[Applause]

