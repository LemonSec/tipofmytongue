1
00:00:00,000 --> 00:00:05,730
<font color="#E5E5E5">hi everyone</font><font color="#CCCCCC"> I would like</font><font color="#E5E5E5"> to in this talk</font>

2
00:00:04,019 --> 00:00:09,570
present<font color="#E5E5E5"> you a small plugin that I wrote</font>

3
00:00:05,730 --> 00:00:12,179
which is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> rat to VMI and what VMI aims</font>

4
00:00:09,570 --> 00:00:16,289
to transform what<font color="#CCCCCC"> r2</font><font color="#E5E5E5"> into hypervisor</font>

5
00:00:12,179 --> 00:00:18,270
<font color="#CCCCCC">level debugger</font><font color="#E5E5E5"> as you can see so the</font>

6
00:00:16,289 --> 00:00:20,640
goal of<font color="#E5E5E5"> this project is to overcome the</font>

7
00:00:18,270 --> 00:00:24,420
current limitations of our existing

8
00:00:20,640 --> 00:00:26,130
tools and also<font color="#E5E5E5"> to build in the future</font>

9
00:00:24,420 --> 00:00:29,189
stealth<font color="#E5E5E5"> cross-platform</font>

10
00:00:26,130 --> 00:00:31,410
and<font color="#E5E5E5"> full system analyzes debugger based</font>

11
00:00:29,189 --> 00:00:37,110
on the flexibility<font color="#E5E5E5"> or without you so</font>

12
00:00:31,410 --> 00:00:39,780
kind<font color="#E5E5E5"> of a</font><font color="#CCCCCC"> huge ambition but</font><font color="#E5E5E5"> ok</font><font color="#CCCCCC"> but first</font>

13
00:00:37,110 --> 00:00:43,890
<font color="#E5E5E5">Who am I</font><font color="#CCCCCC"> I'm a researcher currently at</font>

14
00:00:39,780 --> 00:00:46,920
f-secure working on<font color="#CCCCCC"> mara behavioral</font>

15
00:00:43,890 --> 00:00:48,510
analysis<font color="#CCCCCC"> and in this context</font><font color="#E5E5E5"> I've been</font>

16
00:00:46,920 --> 00:00:51,449
working on maintaining<font color="#E5E5E5"> the nitro</font>

17
00:00:48,510 --> 00:00:54,089
framework so nitro is<font color="#E5E5E5"> kayvyun based</font>

18
00:00:51,449 --> 00:00:57,809
<font color="#E5E5E5">virtual machine fiction framework that</font>

19
00:00:54,090 --> 00:01:01,230
will intercept<font color="#E5E5E5"> system calls in the VM</font>

20
00:00:57,809 --> 00:01:04,500
and trap them<font color="#E5E5E5"> and the framework itself</font>

21
00:01:01,230 --> 00:01:07,289
<font color="#E5E5E5">we reconstruct the siskel high-level</font>

22
00:01:04,500 --> 00:01:10,380
context by correct by introspecting the

23
00:01:07,290 --> 00:01:12,390
guest and currently<font color="#E5E5E5"> out of</font><font color="#CCCCCC"> secure we are</font>

24
00:01:10,380 --> 00:01:16,408
interested by new ways to<font color="#E5E5E5"> do some boxing</font>

25
00:01:12,390 --> 00:01:18,990
<font color="#E5E5E5">and we are we are interested</font><font color="#CCCCCC"> in to</font>

26
00:01:16,409 --> 00:01:23,580
integrating nitro<font color="#CCCCCC"> as</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> plug-in into our</font>

27
00:01:18,990 --> 00:01:26,220
<font color="#CCCCCC">some boxing solutions so and this whole</font>

28
00:01:23,580 --> 00:01:29,250
work on nitro led me to create a VM via

29
00:01:26,220 --> 00:01:32,070
my community<font color="#E5E5E5"> organizations on github in</font>

30
00:01:29,250 --> 00:01:36,570
order<font color="#E5E5E5"> to see what was missing</font><font color="#CCCCCC"> and to</font>

31
00:01:32,070 --> 00:01:40,408
help create<font color="#E5E5E5"> defined an official</font><font color="#CCCCCC"> and save</font>

32
00:01:36,570 --> 00:01:42,869
<font color="#CCCCCC">emi interface on on</font><font color="#E5E5E5"> k vm and the work</font>

33
00:01:40,409 --> 00:01:44,549
I've done<font color="#E5E5E5"> on this led me</font><font color="#CCCCCC"> to question</font>

34
00:01:42,869 --> 00:01:47,759
myself on the debuggers the state of our

35
00:01:44,549 --> 00:01:49,549
debuggers<font color="#E5E5E5"> and can we apply</font><font color="#CCCCCC"> vmi on the</font>

36
00:01:47,759 --> 00:01:53,340
debuggers

37
00:01:49,549 --> 00:01:54,960
so the first question<font color="#E5E5E5"> is say is why why</font>

38
00:01:53,340 --> 00:01:56,820
do you want<font color="#E5E5E5"> to create a hypervisor level</font>

39
00:01:54,960 --> 00:01:59,548
<font color="#CCCCCC">the barriers</font><font color="#E5E5E5"> we have we have plenty of</font>

40
00:01:56,820 --> 00:02:01,408
tools<font color="#E5E5E5"> today to do tracing let's say you</font>

41
00:01:59,549 --> 00:02:02,579
cannot<font color="#CCCCCC"> learn the userland</font><font color="#E5E5E5"> why do you</font>

42
00:02:01,409 --> 00:02:07,099
want to<font color="#E5E5E5"> create this new kind of</font>

43
00:02:02,579 --> 00:02:10,949
debuggers first<font color="#CCCCCC"> from</font><font color="#E5E5E5"> you have is</font><font color="#CCCCCC"> that</font>

44
00:02:07,099 --> 00:02:13,330
<font color="#CCCCCC">debuggers ads are noisy a debugger will</font>

45
00:02:10,949 --> 00:02:15,130
always modify the execution environment

46
00:02:13,330 --> 00:02:18,550
of the<font color="#CCCCCC"> D buggy and</font><font color="#E5E5E5"> you cannot avoid that</font>

47
00:02:15,130 --> 00:02:22,510
<font color="#CCCCCC">it's sort of an an observer effect that</font>

48
00:02:18,550 --> 00:02:24,490
is<font color="#E5E5E5"> unavoidable so usually in most cases</font>

49
00:02:22,510 --> 00:02:25,269
it's not<font color="#E5E5E5"> a problem</font><font color="#CCCCCC"> until</font><font color="#E5E5E5"> you have to</font>

50
00:02:24,490 --> 00:02:29,440
deal<font color="#CCCCCC"> with margles</font>

51
00:02:25,270 --> 00:02:31,300
and the main<font color="#E5E5E5"> problem here is that on one</font>

52
00:02:29,440 --> 00:02:33,130
<font color="#CCCCCC">side you have Marvel's</font><font color="#E5E5E5"> that they want to</font>

53
00:02:31,300 --> 00:02:34,870
be analyzed<font color="#CCCCCC"> on the other</font><font color="#E5E5E5"> side you have</font>

54
00:02:33,130 --> 00:02:37,630
<font color="#E5E5E5">the operating system</font><font color="#CCCCCC"> debating api's</font>

55
00:02:34,870 --> 00:02:39,820
which<font color="#CCCCCC"> have</font><font color="#E5E5E5"> are never been designed to be</font>

56
00:02:37,630 --> 00:02:41,670
<font color="#E5E5E5">stealth in the first place and you</font>

57
00:02:39,820 --> 00:02:44,700
cannot mix them together

58
00:02:41,670 --> 00:02:48,700
so the more complex<font color="#E5E5E5"> to my</font><font color="#CCCCCC"> realm the more</font>

59
00:02:44,700 --> 00:02:50,709
<font color="#E5E5E5">untidy bug you will have of course so</font>

60
00:02:48,700 --> 00:02:54,070
just a quick<font color="#E5E5E5"> slide to show</font><font color="#CCCCCC"> you how easy</font>

61
00:02:50,710 --> 00:02:56,170
it<font color="#E5E5E5"> is to debugger in Windows</font><font color="#CCCCCC"> you can</font>

62
00:02:54,070 --> 00:03:00,329
<font color="#E5E5E5">check you can call</font><font color="#CCCCCC"> ugly the windows API</font>

63
00:02:56,170 --> 00:03:03,339
<font color="#CCCCCC">you can scan some memory structures or</font>

64
00:03:00,330 --> 00:03:04,930
you have<font color="#E5E5E5"> some</font><font color="#CCCCCC"> Siskel's</font><font color="#E5E5E5"> which will have a</font>

65
00:03:03,340 --> 00:03:08,020
different<font color="#CCCCCC"> behavior read where you are</font>

66
00:03:04,930 --> 00:03:10,060
being debugged<font color="#CCCCCC"> or not so detecting the</font>

67
00:03:08,020 --> 00:03:12,010
deeper debugger<font color="#E5E5E5"> windows is true it's</font>

68
00:03:10,060 --> 00:03:13,750
<font color="#E5E5E5">River it's really easy and the</font>

69
00:03:12,010 --> 00:03:16,420
consequence of that is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> Marineris</font>

70
00:03:13,750 --> 00:03:19,750
analysts will have to spend<font color="#E5E5E5"> an extra</font>

71
00:03:16,420 --> 00:03:21,820
time to do anti anti debug and this is<font color="#CCCCCC"> x</font>

72
00:03:19,750 --> 00:03:23,830
<font color="#CCCCCC">all</font><font color="#E5E5E5"> the world the diversity of the tools</font>

73
00:03:21,820 --> 00:03:26,590
they are<font color="#E5E5E5"> using</font><font color="#CCCCCC"> so in the end it's kind</font>

74
00:03:23,830 --> 00:03:28,480
<font color="#CCCCCC">of a nightmare</font><font color="#E5E5E5"> to maintain but it's not</font>

75
00:03:26,590 --> 00:03:31,660
the only<font color="#E5E5E5"> problem we have another problem</font>

76
00:03:28,480 --> 00:03:35,530
<font color="#E5E5E5">which</font><font color="#CCCCCC"> is that today</font><font color="#E5E5E5"> our debuggers have</font>

77
00:03:31,660 --> 00:03:37,299
an incomplete<font color="#E5E5E5"> view of the system</font><font color="#CCCCCC"> the</font>

78
00:03:35,530 --> 00:03:40,209
picture you are<font color="#CCCCCC"> seeing right now is</font><font color="#E5E5E5"> the</font>

79
00:03:37,300 --> 00:03:44,080
new security<font color="#E5E5E5"> model of Windows 10 Windows</font>

80
00:03:40,209 --> 00:03:45,850
10 uses virtualization based security<font color="#CCCCCC"> so</font>

81
00:03:44,080 --> 00:03:48,940
it is isolating<font color="#E5E5E5"> two different</font>

82
00:03:45,850 --> 00:03:51,430
environments<font color="#CCCCCC"> and isolating the normal</font>

83
00:03:48,940 --> 00:03:54,430
kernel from the secure kernel which<font color="#E5E5E5"> is</font>

84
00:03:51,430 --> 00:03:57,130
the virtual secure mode now the question

85
00:03:54,430 --> 00:03:59,830
is how<font color="#CCCCCC"> do we debug is Mysterio's secure</font>

86
00:03:57,130 --> 00:04:02,950
kernel the answer is that<font color="#CCCCCC"> there is no</font>

87
00:03:59,830 --> 00:04:06,220
easy<font color="#CCCCCC"> way to do</font><font color="#E5E5E5"> it and this</font><font color="#CCCCCC"> is just</font><font color="#E5E5E5"> an</font>

88
00:04:02,950 --> 00:04:08,440
example<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> also cite a magic word</font>

89
00:04:06,220 --> 00:04:10,750
<font color="#E5E5E5">which is protecting the Connor against</font>

90
00:04:08,440 --> 00:04:14,890
modifications<font color="#E5E5E5"> and if you try to</font><font color="#CCCCCC"> hook</font>

91
00:04:10,750 --> 00:04:17,079
into the kernel<font color="#E5E5E5"> your debugger will be</font>

92
00:04:14,890 --> 00:04:19,358
killed and<font color="#CCCCCC"> the operating system will</font>

93
00:04:17,079 --> 00:04:21,640
crash so these are just two<font color="#CCCCCC"> examples</font><font color="#E5E5E5"> to</font>

94
00:04:19,358 --> 00:04:25,270
show that<font color="#E5E5E5"> today our</font><font color="#CCCCCC"> operating systems</font>

95
00:04:21,640 --> 00:04:26,590
have<font color="#CCCCCC"> become become so complex that the</font>

96
00:04:25,270 --> 00:04:29,919
<font color="#CCCCCC">deeper girls</font><font color="#E5E5E5"> are fight</font>

97
00:04:26,590 --> 00:04:35,859
against the<font color="#E5E5E5"> security features and of</font>

98
00:04:29,919 --> 00:04:37,539
course they<font color="#E5E5E5"> are losing the fight so the</font>

99
00:04:35,860 --> 00:04:41,290
solution will<font color="#E5E5E5"> be to</font><font color="#CCCCCC"> move through the</font>

100
00:04:37,540 --> 00:04:43,360
<font color="#CCCCCC">ring below</font><font color="#E5E5E5"> zero ring minus one so move</font>

101
00:04:41,290 --> 00:04:45,280
the<font color="#E5E5E5"> whole debugging process to the</font>

102
00:04:43,360 --> 00:04:48,040
hypervisor<font color="#E5E5E5"> what we will gain</font><font color="#CCCCCC"> from that</font>

103
00:04:45,280 --> 00:04:49,510
is that<font color="#CCCCCC"> we can</font><font color="#E5E5E5"> achieve stealth</font><font color="#CCCCCC"> because</font>

104
00:04:48,040 --> 00:04:51,760
we will<font color="#E5E5E5"> not use the operating system</font>

105
00:04:49,510 --> 00:04:53,860
debug API<font color="#E5E5E5"> of course this will bring a</font>

106
00:04:51,760 --> 00:04:57,159
<font color="#CCCCCC">lot of</font><font color="#E5E5E5"> challenges it's very easy to say</font>

107
00:04:53,860 --> 00:04:59,680
that<font color="#E5E5E5"> but I will cover that</font><font color="#CCCCCC"> later and the</font>

108
00:04:57,160 --> 00:05:02,169
<font color="#CCCCCC">bonus is</font><font color="#E5E5E5"> that we can</font><font color="#CCCCCC"> use invisible</font><font color="#E5E5E5"> break</font>

109
00:04:59,680 --> 00:05:04,900
<font color="#E5E5E5">points using</font><font color="#CCCCCC"> apt violations</font>

110
00:05:02,169 --> 00:05:07,270
so<font color="#E5E5E5"> the second translation</font><font color="#CCCCCC"> layer of the</font>

111
00:05:04,900 --> 00:05:09,580
page tables and the second benefit is

112
00:05:07,270 --> 00:05:11,590
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we can have</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> full system</font><font color="#CCCCCC"> analysis</font>

113
00:05:09,580 --> 00:05:13,630
since the hypervisor<font color="#CCCCCC"> is in control</font><font color="#E5E5E5"> of</font>

114
00:05:11,590 --> 00:05:16,810
<font color="#E5E5E5">everything</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> has the full access to</font>

115
00:05:13,630 --> 00:05:18,729
the halwa<font color="#E5E5E5"> state</font><font color="#CCCCCC"> you can see everything</font>

116
00:05:16,810 --> 00:05:19,930
and<font color="#E5E5E5"> you can also debug the kernel so you</font>

117
00:05:18,729 --> 00:05:22,479
have a kernel<font color="#E5E5E5"> debugger</font><font color="#CCCCCC"> on top of that</font>

118
00:05:19,930 --> 00:05:24,850
and<font color="#E5E5E5"> Venise you can debug bootloaders of</font>

119
00:05:22,479 --> 00:05:27,580
course<font color="#CCCCCC"> you teabagger is not available at</font>

120
00:05:24,850 --> 00:05:29,800
the re-sequence of the boot process so

121
00:05:27,580 --> 00:05:32,590
you can<font color="#CCCCCC"> debug</font><font color="#E5E5E5"> yeah</font>

122
00:05:29,800 --> 00:05:35,260
boot loaders basically it's<font color="#E5E5E5"> not the only</font>

123
00:05:32,590 --> 00:05:38,409
benefit<font color="#E5E5E5"> another benefit is</font><font color="#CCCCCC"> that you will</font>

124
00:05:35,260 --> 00:05:40,360
have<font color="#E5E5E5"> you can have</font><font color="#CCCCCC"> zero configuration for</font>

125
00:05:38,410 --> 00:05:43,030
debugging<font color="#CCCCCC"> I don't want to have any</font>

126
00:05:40,360 --> 00:05:45,280
remote debug agent<font color="#E5E5E5"> or stab in my VM I</font>

127
00:05:43,030 --> 00:05:47,919
want to be agentless so I don't want to

128
00:05:45,280 --> 00:05:50,409
<font color="#CCCCCC">have to configure</font><font color="#E5E5E5"> and set up</font><font color="#CCCCCC"> my VM so to</font>

129
00:05:47,919 --> 00:05:53,260
set the zero<font color="#CCCCCC"> table or to</font><font color="#E5E5E5"> change the</font>

130
00:05:50,410 --> 00:05:56,740
server configuration<font color="#CCCCCC"> to to install an</font>

131
00:05:53,260 --> 00:05:58,479
agent<font color="#E5E5E5"> visit Lee and also I want to be</font>

132
00:05:56,740 --> 00:06:00,940
able<font color="#E5E5E5"> to do on the fly debugging so I</font>

133
00:05:58,479 --> 00:06:04,270
don't want to have to reboot my<font color="#E5E5E5"> VM to</font>

134
00:06:00,940 --> 00:06:08,110
debug it and<font color="#CCCCCC"> just debug it and consider</font>

135
00:06:04,270 --> 00:06:10,599
debugging on the fly<font color="#CCCCCC"> and finally latest</font>

136
00:06:08,110 --> 00:06:14,500
benefit is that<font color="#CCCCCC"> our rack to</font><font color="#E5E5E5"> achieve this</font>

137
00:06:10,599 --> 00:06:16,479
<font color="#CCCCCC">hotspot from</font><font color="#E5E5E5"> the burger so you will be</font>

138
00:06:14,500 --> 00:06:19,270
able<font color="#CCCCCC"> to use your debugger</font><font color="#E5E5E5"> on top of</font>

139
00:06:16,479 --> 00:06:22,150
Linux Windows and Mac OS<font color="#CCCCCC"> and</font><font color="#E5E5E5"> be able</font><font color="#CCCCCC"> to</font>

140
00:06:19,270 --> 00:06:25,419
debug the<font color="#E5E5E5"> kernel of each one</font><font color="#CCCCCC"> of them so</font>

141
00:06:22,150 --> 00:06:27,280
it quite so to arrive and OS agnostic

142
00:06:25,419 --> 00:06:31,260
debugger so it's quite an<font color="#CCCCCC"> interesting</font>

143
00:06:27,280 --> 00:06:33,789
<font color="#E5E5E5">idea and I would like to</font><font color="#CCCCCC"> build</font><font color="#E5E5E5"> that tool</font>

144
00:06:31,260 --> 00:06:36,190
but now let's distribute the projects

145
00:06:33,789 --> 00:06:37,930
<font color="#E5E5E5">that</font><font color="#CCCCCC"> are already existing I</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> tried</font>

146
00:06:36,190 --> 00:06:38,729
to implement this idea<font color="#E5E5E5"> of using a</font>

147
00:06:37,930 --> 00:06:42,960
<font color="#E5E5E5">hypervisor</font>

148
00:06:38,729 --> 00:06:45,180
<font color="#E5E5E5">as a debugger so I split this into two</font>

149
00:06:42,960 --> 00:06:47,580
categories<font color="#CCCCCC"> first I'll say you</font><font color="#E5E5E5"> have</font>

150
00:06:45,180 --> 00:06:49,559
hypervisor based debugger<font color="#E5E5E5"> well the whole</font>

151
00:06:47,580 --> 00:06:53,039
idea<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> the debugger is built</font>

152
00:06:49,559 --> 00:06:54,809
<font color="#E5E5E5">inside a tiny a hypervisor</font><font color="#CCCCCC"> that we're</font>

153
00:06:53,039 --> 00:06:55,169
<font color="#E5E5E5">going to be</font><font color="#CCCCCC"> to vo tries to the operating</font>

154
00:06:54,809 --> 00:06:57,509
<font color="#E5E5E5">system</font>

155
00:06:55,169 --> 00:07:00,659
so the first example is hyper<font color="#CCCCCC"> dbg in</font>

156
00:06:57,509 --> 00:07:02,520
2010 the ideas that<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have to</font>

157
00:07:00,659 --> 00:07:04,409
compile in started driver<font color="#CCCCCC"> on your</font><font color="#E5E5E5"> on</font>

158
00:07:02,520 --> 00:07:07,229
your<font color="#E5E5E5"> operating system and when you load</font>

159
00:07:04,409 --> 00:07:08,849
it<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have a thin layer virtualization</font>

160
00:07:07,229 --> 00:07:12,870
<font color="#E5E5E5">that will get rise your pointing system</font>

161
00:07:08,849 --> 00:07:14,550
<font color="#E5E5E5">and if you press f12 you have access to</font>

162
00:07:12,870 --> 00:07:16,289
a<font color="#E5E5E5"> text-based interface which will be</font>

163
00:07:14,550 --> 00:07:18,629
your debugger so<font color="#E5E5E5"> it quite it's quite</font>

164
00:07:16,289 --> 00:07:20,300
<font color="#E5E5E5">nice no Cyril cable involved and</font>

165
00:07:18,629 --> 00:07:22,889
<font color="#E5E5E5">everything happens on the same machine</font>

166
00:07:20,300 --> 00:07:26,159
<font color="#CCCCCC">and then later on</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> pearls</font><font color="#CCCCCC"> dbg</font>

167
00:07:22,889 --> 00:07:28,409
which in more recent 2017<font color="#CCCCCC"> in</font><font color="#E5E5E5"> this case</font>

168
00:07:26,159 --> 00:07:30,990
the<font color="#E5E5E5"> hypervisor is built into</font><font color="#CCCCCC"> a file</font>

169
00:07:28,409 --> 00:07:34,379
module so<font color="#E5E5E5"> you have to load this EFI boot</font>

170
00:07:30,990 --> 00:07:37,050
loader<font color="#CCCCCC"> using either a pixie boot or a</font>

171
00:07:34,379 --> 00:07:38,999
USB stick<font color="#E5E5E5"> and it's acting has the</font>

172
00:07:37,050 --> 00:07:41,999
<font color="#CCCCCC">client-server mode</font><font color="#E5E5E5"> so you need</font><font color="#CCCCCC"> two</font>

173
00:07:38,999 --> 00:07:46,919
physical<font color="#E5E5E5"> machine to debug to debug Java</font>

174
00:07:41,999 --> 00:07:48,899
run and it can work in a vm<font color="#E5E5E5"> it can work</font>

175
00:07:46,919 --> 00:07:52,020
on<font color="#E5E5E5"> VMware Workstation but is the only</font>

176
00:07:48,899 --> 00:07:54,029
<font color="#E5E5E5">hypervisor</font><font color="#CCCCCC"> that support</font><font color="#E5E5E5"> pros dbg because</font>

177
00:07:52,020 --> 00:07:55,909
the<font color="#CCCCCC"> dart</font><font color="#E5E5E5"> they've done an</font><font color="#CCCCCC"> incredible work</font>

178
00:07:54,029 --> 00:07:59,999
to support nested virtualization<font color="#E5E5E5"> that</font>

179
00:07:55,909 --> 00:08:01,498
positivity works<font color="#E5E5E5"> inside of it the</font>

180
00:07:59,999 --> 00:08:03,479
<font color="#CCCCCC">primary half with these debuggers</font><font color="#E5E5E5"> is</font>

181
00:08:01,499 --> 00:08:06,300
that there have been made to debug a

182
00:08:03,479 --> 00:08:08,128
real hardware and never designed<font color="#E5E5E5"> to work</font>

183
00:08:06,300 --> 00:08:09,360
with virtual machines<font color="#CCCCCC"> so</font><font color="#E5E5E5"> they don't</font>

184
00:08:08,129 --> 00:08:13,529
<font color="#CCCCCC">really fit my use case</font><font color="#E5E5E5"> unfortunately</font>

185
00:08:09,360 --> 00:08:16,199
<font color="#CCCCCC">they</font><font color="#E5E5E5"> are interesting but not for me a</font>

186
00:08:13,529 --> 00:08:18,990
second<font color="#CCCCCC"> category</font><font color="#E5E5E5"> I would say is VMI based</font>

187
00:08:16,199 --> 00:08:20,399
debugger<font color="#E5E5E5"> so in this case you</font><font color="#CCCCCC"> are using</font>

188
00:08:18,990 --> 00:08:23,009
<font color="#CCCCCC">an existing</font><font color="#E5E5E5"> hypervisor</font>

189
00:08:20,399 --> 00:08:25,889
<font color="#E5E5E5">and you try to build if you my API is</font>

190
00:08:23,009 --> 00:08:29,249
<font color="#CCCCCC">Intuit to introspect the guest first</font>

191
00:08:25,889 --> 00:08:32,399
example I have is<font color="#CCCCCC"> Dallas pari box</font><font color="#E5E5E5"> to</font>

192
00:08:29,249 --> 00:08:37,199
<font color="#CCCCCC">recent 2017 so then instrument take the</font>

193
00:08:32,399 --> 00:08:39,690
whole<font color="#CCCCCC"> game I browser that's the</font><font color="#E5E5E5"> whole</font>

194
00:08:37,198 --> 00:08:42,598
they build dynamic instrumentation

195
00:08:39,690 --> 00:08:45,269
engine inside it so you have plenty of

196
00:08:42,599 --> 00:08:48,480
Python callbacks<font color="#CCCCCC"> that you can work</font><font color="#E5E5E5"> upon</font>

197
00:08:45,269 --> 00:08:51,300
<font color="#E5E5E5">like each time a block is</font><font color="#CCCCCC"> being entered</font>

198
00:08:48,480 --> 00:08:52,620
<font color="#E5E5E5">or exited or if a process</font><font color="#CCCCCC"> is being</font>

199
00:08:51,300 --> 00:08:54,300
treated<font color="#E5E5E5"> or remove</font>

200
00:08:52,620 --> 00:08:56,400
you can set a callback<font color="#E5E5E5"> on top of that so</font>

201
00:08:54,300 --> 00:08:58,620
it's really really<font color="#CCCCCC"> useful program is</font>

202
00:08:56,400 --> 00:09:01,439
like<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> emulation based</font><font color="#CCCCCC"> I would like</font>

203
00:08:58,620 --> 00:09:05,160
to have<font color="#CCCCCC"> hot rod transition and run an</font>

204
00:09:01,440 --> 00:09:07,740
almost<font color="#E5E5E5"> normal speed</font><font color="#CCCCCC"> and the second</font>

205
00:09:05,160 --> 00:09:12,750
<font color="#CCCCCC">project</font><font color="#E5E5E5"> interesting was the fire hi</font><font color="#CCCCCC"> are</font>

206
00:09:07,740 --> 00:09:15,900
<font color="#E5E5E5">VMI so they instrumented</font><font color="#CCCCCC"> KVM and added</font>

207
00:09:12,750 --> 00:09:18,720
<font color="#CCCCCC">VMI</font><font color="#E5E5E5"> api's in</font><font color="#CCCCCC"> KVM to be able</font><font color="#E5E5E5"> to do single</font>

208
00:09:15,900 --> 00:09:22,199
step and<font color="#E5E5E5"> had bright points and also they</font>

209
00:09:18,720 --> 00:09:25,830
leveraged a recall as a debugger<font color="#E5E5E5"> and use</font>

210
00:09:22,200 --> 00:09:27,720
the interactive Python shell so it's

211
00:09:25,830 --> 00:09:29,700
interesting because<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can exploit her</font>

212
00:09:27,720 --> 00:09:32,580
structures in real time and<font color="#CCCCCC"> you have an</font>

213
00:09:29,700 --> 00:09:34,110
interactive<font color="#E5E5E5"> debugger on top of it the</font>

214
00:09:32,580 --> 00:09:37,500
main primary I have with this<font color="#CCCCCC"> project is</font>

215
00:09:34,110 --> 00:09:39,390
that<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> KVM only and second the</font>

216
00:09:37,500 --> 00:09:41,220
maintainability because all<font color="#E5E5E5"> this</font>

217
00:09:39,390 --> 00:09:42,960
modification<font color="#E5E5E5"> has been done on</font><font color="#CCCCCC"> KVM</font><font color="#E5E5E5"> I'm</font>

218
00:09:41,220 --> 00:09:45,630
not sure<font color="#CCCCCC"> that I</font><font color="#E5E5E5"> would be going to be</font>

219
00:09:42,960 --> 00:09:47,370
<font color="#E5E5E5">merged upstream one day and second they</font>

220
00:09:45,630 --> 00:09:50,250
<font color="#E5E5E5">are</font><font color="#CCCCCC"> leveraging</font><font color="#E5E5E5"> recall as the debugger</font>

221
00:09:47,370 --> 00:09:52,260
<font color="#E5E5E5">and recall is a memory forensic tool and</font>

222
00:09:50,250 --> 00:09:57,060
I would like<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> the control use the</font>

223
00:09:52,260 --> 00:09:59,010
debugger instead so now that we<font color="#E5E5E5"> have</font>

224
00:09:57,060 --> 00:10:00,810
seen all of<font color="#CCCCCC"> these existing</font><font color="#E5E5E5"> projects what</font>

225
00:09:59,010 --> 00:10:03,480
can we do now what can<font color="#E5E5E5"> we do for the</font>

226
00:10:00,810 --> 00:10:09,449
design of our debugger<font color="#CCCCCC"> what can we do</font>

227
00:10:03,480 --> 00:10:11,730
from<font color="#CCCCCC"> here so for the design what</font><font color="#E5E5E5"> I would</font>

228
00:10:09,450 --> 00:10:14,220
<font color="#E5E5E5">like to have is I would like to keep the</font>

229
00:10:11,730 --> 00:10:19,140
<font color="#CCCCCC">VM my approach and I would like</font><font color="#E5E5E5"> to</font>

230
00:10:14,220 --> 00:10:22,560
<font color="#E5E5E5">improve our VM I actually</font><font color="#CCCCCC"> this is</font><font color="#E5E5E5"> our</font>

231
00:10:19,140 --> 00:10:24,210
<font color="#CCCCCC">PMI you have recall and little part</font>

232
00:10:22,560 --> 00:10:26,099
which is the debugger<font color="#CCCCCC"> the custom</font>

233
00:10:24,210 --> 00:10:29,520
modifications and they are<font color="#E5E5E5"> talking with</font>

234
00:10:26,100 --> 00:10:31,980
<font color="#CCCCCC">KVM to instrument it their</font><font color="#E5E5E5"> portion that</font>

235
00:10:29,520 --> 00:10:34,110
you<font color="#E5E5E5"> reach is doing the opposite so I</font>

236
00:10:31,980 --> 00:10:36,030
would like<font color="#E5E5E5"> to take a good deep</font><font color="#CCCCCC"> ogre or</font>

237
00:10:34,110 --> 00:10:37,830
reverse<font color="#CCCCCC"> engineer</font><font color="#E5E5E5"> framework and add</font><font color="#CCCCCC"> a</font>

238
00:10:36,030 --> 00:10:40,050
<font color="#E5E5E5">small introspection layer on top</font><font color="#CCCCCC"> of it</font>

239
00:10:37,830 --> 00:10:41,460
<font color="#E5E5E5">to talk with the hypervisor and</font><font color="#CCCCCC"> the</font>

240
00:10:40,050 --> 00:10:44,040
second modification<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that I would like</font>

241
00:10:41,460 --> 00:10:45,990
<font color="#CCCCCC">to have an obstruction the hypervisor</font>

242
00:10:44,040 --> 00:10:48,660
vmi<font color="#E5E5E5"> abstraction</font><font color="#CCCCCC"> to talk to the</font>

243
00:10:45,990 --> 00:10:51,660
<font color="#E5E5E5">hypervisor so I can support multiple</font>

244
00:10:48,660 --> 00:10:54,719
hypervisor<font color="#E5E5E5"> in the future so for</font><font color="#CCCCCC"> the long</font>

245
00:10:51,660 --> 00:10:59,370
<font color="#E5E5E5">term the question is like how I can have</font>

246
00:10:54,720 --> 00:11:02,820
this support for hypervisor<font color="#E5E5E5"> agnostically</font>

247
00:10:59,370 --> 00:11:05,480
<font color="#E5E5E5">we only have live via my BMI is think of</font>

248
00:11:02,820 --> 00:11:08,600
<font color="#E5E5E5">it as the VMI abstraction layer</font>

249
00:11:05,480 --> 00:11:12,230
it's<font color="#E5E5E5"> it takes</font><font color="#CCCCCC"> a lot of</font><font color="#E5E5E5"> low-level details</font>

250
00:11:08,600 --> 00:11:14,089
like<font color="#CCCCCC"> processing</font><font color="#E5E5E5"> the page tables</font><font color="#CCCCCC"> and also</font>

251
00:11:12,230 --> 00:11:16,040
<font color="#E5E5E5">offers</font><font color="#CCCCCC"> the basic some basic</font>

252
00:11:14,089 --> 00:11:18,440
introspection<font color="#E5E5E5"> like</font><font color="#CCCCCC"> translating</font><font color="#E5E5E5"> is simple</font>

253
00:11:16,040 --> 00:11:21,800
to a virtual address<font color="#E5E5E5"> bypass by parsing</font>

254
00:11:18,440 --> 00:11:23,810
the<font color="#CCCCCC"> px</font><font color="#E5E5E5"> both tables so currently the</font>

255
00:11:21,800 --> 00:11:25,670
<font color="#E5E5E5">support is that</font><font color="#CCCCCC"> xn is</font><font color="#E5E5E5"> fully supported</font>

256
00:11:23,810 --> 00:11:29,000
you can<font color="#CCCCCC"> create registers the memory and</font>

257
00:11:25,670 --> 00:11:30,439
<font color="#E5E5E5">you have</font><font color="#CCCCCC"> hardware events and</font><font color="#E5E5E5"> KVM is a</font>

258
00:11:29,000 --> 00:11:32,330
bit<font color="#E5E5E5"> behind it because there is no</font>

259
00:11:30,440 --> 00:11:34,760
<font color="#E5E5E5">hardware even support but thanks to</font>

260
00:11:32,330 --> 00:11:37,460
<font color="#CCCCCC">BitDefender they have done amazing</font>

261
00:11:34,760 --> 00:11:42,529
patches for this<font color="#CCCCCC"> i think</font><font color="#E5E5E5"> it will come on</font>

262
00:11:37,460 --> 00:11:45,310
soon so the final architecture<font color="#E5E5E5"> for my</font>

263
00:11:42,529 --> 00:11:49,790
project is that<font color="#E5E5E5"> I will use</font><font color="#CCCCCC"> Radha to</font>

264
00:11:45,310 --> 00:11:53,150
using the<font color="#E5E5E5"> treat to VMI plugins</font><font color="#CCCCCC"> io and</font>

265
00:11:49,790 --> 00:11:55,130
debug<font color="#E5E5E5"> so the IO plugins will initialize</font>

266
00:11:53,150 --> 00:11:56,810
the p.m. I access the memory into

267
00:11:55,130 --> 00:11:59,150
registers and the debug<font color="#CCCCCC"> plugin will deal</font>

268
00:11:56,810 --> 00:12:00,770
<font color="#CCCCCC">with the hardware events to attach your</font>

269
00:11:59,150 --> 00:12:03,380
process<font color="#E5E5E5"> to single step</font><font color="#CCCCCC"> and set</font>

270
00:12:00,770 --> 00:12:06,980
breakpoints<font color="#E5E5E5"> so to use it you will use</font>

271
00:12:03,380 --> 00:12:11,900
<font color="#CCCCCC">radar</font><font color="#E5E5E5"> totality and using a URL with a VM</font>

272
00:12:06,980 --> 00:12:18,620
I set the<font color="#CCCCCC"> VM name and the process name</font>

273
00:12:11,900 --> 00:12:21,410
or PID now challenging question<font color="#E5E5E5"> how do</font>

274
00:12:18,620 --> 00:12:24,350
you<font color="#E5E5E5"> implement such a thing you</font><font color="#CCCCCC"> have to</font>

275
00:12:21,410 --> 00:12:26,029
remember<font color="#E5E5E5"> that debugging</font><font color="#CCCCCC"> is a set of API</font>

276
00:12:24,350 --> 00:12:28,760
which is<font color="#E5E5E5"> also of course provided by the</font>

277
00:12:26,029 --> 00:12:30,380
operating<font color="#CCCCCC"> system this is an example of</font>

278
00:12:28,760 --> 00:12:34,790
<font color="#E5E5E5">Windows</font><font color="#CCCCCC"> if you want to</font><font color="#E5E5E5"> create the</font>

279
00:12:30,380 --> 00:12:37,070
program<font color="#CCCCCC"> window Svante you you create a</font>

280
00:12:34,790 --> 00:12:40,910
process<font color="#E5E5E5"> and you set the debug process</font>

281
00:12:37,070 --> 00:12:42,800
flag and you wait for<font color="#CCCCCC"> the</font><font color="#E5E5E5"> kernel to send</font>

282
00:12:40,910 --> 00:12:46,100
you some debug events interesting<font color="#CCCCCC"> deeper</font>

283
00:12:42,800 --> 00:12:47,660
<font color="#CCCCCC">givens the</font><font color="#E5E5E5"> promise that in our case the</font>

284
00:12:46,100 --> 00:12:50,630
OS<font color="#E5E5E5"> the operating system will not</font>

285
00:12:47,660 --> 00:12:53,870
cooperate with<font color="#CCCCCC"> our debugger we are alone</font>

286
00:12:50,630 --> 00:12:58,220
<font color="#CCCCCC">on our</font><font color="#E5E5E5"> own and</font><font color="#CCCCCC"> we have to rely on upper</font>

287
00:12:53,870 --> 00:13:01,700
<font color="#E5E5E5">stuff so what do we</font><font color="#CCCCCC"> have let's do the</font>

288
00:12:58,220 --> 00:13:04,070
inventory<font color="#E5E5E5"> of what what we have we have</font>

289
00:13:01,700 --> 00:13:06,470
<font color="#E5E5E5">the VM a hardware state we have an</font>

290
00:13:04,070 --> 00:13:09,320
introspection layer and we have our

291
00:13:06,470 --> 00:13:11,360
knowledge<font color="#E5E5E5"> of open system internals what</font>

292
00:13:09,320 --> 00:13:11,810
can we build from that from the hardware

293
00:13:11,360 --> 00:13:13,520
<font color="#CCCCCC">States</font>

294
00:13:11,810 --> 00:13:17,329
I can query the registers<font color="#CCCCCC"> and the</font>

295
00:13:13,520 --> 00:13:18,810
physical memory<font color="#E5E5E5"> and also I can listen to</font>

296
00:13:17,329 --> 00:13:20,880
<font color="#CCCCCC">the memory access</font><font color="#E5E5E5"> even</font>

297
00:13:18,810 --> 00:13:23,339
to the interrupts interrupts<font color="#E5E5E5"> and also</font>

298
00:13:20,880 --> 00:13:24,930
some registers being<font color="#CCCCCC"> accessed on special</font>

299
00:13:23,340 --> 00:13:28,920
<font color="#E5E5E5">registers that lack control registers</font>

300
00:13:24,930 --> 00:13:31,439
<font color="#E5E5E5">from this I can</font><font color="#CCCCCC"> build break points from</font>

301
00:13:28,920 --> 00:13:33,599
the hypervisor regarding the

302
00:13:31,440 --> 00:13:36,110
introspection layer I<font color="#E5E5E5"> can extract kernel</font>

303
00:13:33,600 --> 00:13:39,089
symbols and interesting color structures

304
00:13:36,110 --> 00:13:41,339
also<font color="#E5E5E5"> offsets I want to access some some</font>

305
00:13:39,089 --> 00:13:44,520
offsets in memory and I can rebuild my

306
00:13:41,339 --> 00:13:49,890
semantic context on top of it and using

307
00:13:44,520 --> 00:13:51,720
<font color="#CCCCCC">your internals</font><font color="#E5E5E5"> I can they'd use where</font>

308
00:13:49,890 --> 00:13:54,449
the processes are in memory the process

309
00:13:51,720 --> 00:13:57,210
is the<font color="#CCCCCC"> frets and also what are the</font>

310
00:13:54,450 --> 00:13:59,670
kernel<font color="#E5E5E5"> API is involved in the process in</font>

311
00:13:57,210 --> 00:14:04,529
<font color="#CCCCCC">the process creation</font><font color="#E5E5E5"> I'm going to mix</font>

312
00:13:59,670 --> 00:14:07,770
all<font color="#E5E5E5"> of that</font><font color="#CCCCCC"> to create my debugger</font><font color="#E5E5E5"> so how</font>

313
00:14:04,529 --> 00:14:09,600
do<font color="#CCCCCC"> we</font><font color="#E5E5E5"> implement attaching to an existing</font>

314
00:14:07,770 --> 00:14:15,810
<font color="#CCCCCC">process how to implement this understand</font>

315
00:14:09,600 --> 00:14:18,000
<font color="#CCCCCC">attach ready bug</font><font color="#E5E5E5"> and a PID or first idea</font>

316
00:14:15,810 --> 00:14:20,339
is<font color="#E5E5E5"> that I will listen to the move to see</font>

317
00:14:18,000 --> 00:14:23,010
<font color="#E5E5E5">our free event so see our free is the</font>

318
00:14:20,339 --> 00:14:25,950
control register which hold<font color="#E5E5E5"> the physical</font>

319
00:14:23,010 --> 00:14:28,050
address<font color="#E5E5E5"> of a</font><font color="#CCCCCC"> processed first page</font>

320
00:14:25,950 --> 00:14:30,330
directory<font color="#E5E5E5"> so you can use it as a unique</font>

321
00:14:28,050 --> 00:14:32,130
<font color="#E5E5E5">identifier</font><font color="#CCCCCC"> for process each time I</font>

322
00:14:30,330 --> 00:14:34,290
receive free and comparing into the

323
00:14:32,130 --> 00:14:37,980
process list to see it which processes

324
00:14:34,290 --> 00:14:39,540
<font color="#CCCCCC">it match it</font><font color="#E5E5E5"> mashes and then checking</font><font color="#CCCCCC"> for</font>

325
00:14:37,980 --> 00:14:43,230
my<font color="#CCCCCC"> targeted PID and if it is the same</font>

326
00:14:39,540 --> 00:14:46,680
I've intercepted my process and hooray

327
00:14:43,230 --> 00:14:47,220
<font color="#CCCCCC">I have</font><font color="#E5E5E5"> intercepted a process but it's</font>

328
00:14:46,680 --> 00:14:50,219
not done yet

329
00:14:47,220 --> 00:14:52,470
<font color="#E5E5E5">because where am</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> I'm somewhere inside</font>

330
00:14:50,220 --> 00:14:55,320
the window<font color="#E5E5E5"> schedule because this means</font>

331
00:14:52,470 --> 00:14:55,980
the process was being scheduled so it's

332
00:14:55,320 --> 00:14:58,770
a good start

333
00:14:55,980 --> 00:15:03,480
<font color="#E5E5E5">but to continue</font><font color="#CCCCCC"> we need to build the</font>

334
00:14:58,770 --> 00:15:05,370
introspection layer<font color="#E5E5E5"> so how do you build</font>

335
00:15:03,480 --> 00:15:07,380
this introspection<font color="#CCCCCC"> layer you</font><font color="#E5E5E5"> have</font>

336
00:15:05,370 --> 00:15:09,320
multiple<font color="#CCCCCC"> solutions</font><font color="#E5E5E5"> first I'm going to</font>

337
00:15:07,380 --> 00:15:13,439
<font color="#E5E5E5">use reco records man interesting because</font>

338
00:15:09,320 --> 00:15:14,940
it's maintained its fetch is

339
00:15:13,440 --> 00:15:17,610
automatically<font color="#E5E5E5"> the debug symbols from</font>

340
00:15:14,940 --> 00:15:20,190
Microsoft and it has a good API to

341
00:15:17,610 --> 00:15:23,070
script on top of it so<font color="#CCCCCC"> the</font><font color="#E5E5E5"> first</font>

342
00:15:20,190 --> 00:15:26,010
<font color="#CCCCCC">solution I will have a harvest you load</font>

343
00:15:23,070 --> 00:15:30,110
a full Python interpreter into my<font color="#E5E5E5"> plugin</font>

344
00:15:26,010 --> 00:15:32,420
so coracle functions<font color="#E5E5E5"> using Python</font><font color="#CCCCCC"> C API</font>

345
00:15:30,110 --> 00:15:34,010
<font color="#E5E5E5">it's interesting but</font>

346
00:15:32,420 --> 00:15:36,889
you have to write a lot of code a lot<font color="#E5E5E5"> of</font>

347
00:15:34,010 --> 00:15:38,500
boilerplate code just<font color="#E5E5E5"> to call it so I'm</font>

348
00:15:36,889 --> 00:15:43,639
not<font color="#CCCCCC"> really interested in</font><font color="#E5E5E5"> this solution</font>

349
00:15:38,500 --> 00:15:46,700
solution<font color="#CCCCCC"> to would</font><font color="#E5E5E5"> be to run a small RPC</font>

350
00:15:43,639 --> 00:15:48,740
endpoint and<font color="#CCCCCC"> lottery core inside it and</font>

351
00:15:46,700 --> 00:15:51,589
<font color="#CCCCCC">communicate with Jason messages</font><font color="#E5E5E5"> with the</font>

352
00:15:48,740 --> 00:15:54,320
<font color="#CCCCCC">rat</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> VMI plug-in it might be a good</font>

353
00:15:51,589 --> 00:15:55,940
<font color="#E5E5E5">solution</font><font color="#CCCCCC"> for the future</font><font color="#E5E5E5"> but in the</font>

354
00:15:54,320 --> 00:15:58,760
meantime I was interested<font color="#E5E5E5"> by doing by</font>

355
00:15:55,940 --> 00:16:02,149
funding<font color="#E5E5E5"> that's the middle</font><font color="#CCCCCC"> ground and</font><font color="#E5E5E5"> I'm</font>

356
00:15:58,760 --> 00:16:05,149
commentator for solution so I'm loading

357
00:16:02,149 --> 00:16:09,829
the current symbols from<font color="#CCCCCC"> lip VMI I</font>

358
00:16:05,149 --> 00:16:12,560
created these symbols<font color="#E5E5E5"> command this</font><font color="#CCCCCC"> will</font>

359
00:16:09,829 --> 00:16:15,050
parse record profile predefined that

360
00:16:12,560 --> 00:16:18,199
contains all<font color="#E5E5E5"> the symbols and offset for</font>

361
00:16:15,050 --> 00:16:22,519
the kernel<font color="#E5E5E5"> and load them into</font><font color="#CCCCCC"> rada to</font>

362
00:16:18,199 --> 00:16:25,760
into the flag space<font color="#E5E5E5"> or Radha</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> and a</font>

363
00:16:22,519 --> 00:16:28,579
side of<font color="#E5E5E5"> that I can run a interactive</font>

364
00:16:25,760 --> 00:16:30,260
session with reco using a new<font color="#E5E5E5"> address</font>

365
00:16:28,579 --> 00:16:33,019
space which<font color="#E5E5E5"> is the VMI address space and</font>

366
00:16:30,260 --> 00:16:35,930
this one is<font color="#E5E5E5"> going to work on top of</font><font color="#CCCCCC"> the</font>

367
00:16:33,019 --> 00:16:38,089
<font color="#CCCCCC">PMI</font><font color="#E5E5E5"> to directly work on the physical</font>

368
00:16:35,930 --> 00:16:40,880
memory of the guest<font color="#CCCCCC"> so here I'm working</font>

369
00:16:38,089 --> 00:16:42,410
working<font color="#E5E5E5"> on my VM</font><font color="#CCCCCC"> there's new memory time</font>

370
00:16:40,880 --> 00:16:45,290
I'm<font color="#E5E5E5"> not really working on the physical</font>

371
00:16:42,410 --> 00:16:50,149
memory<font color="#E5E5E5"> and I can run PS list in an</font>

372
00:16:45,290 --> 00:16:52,670
interactive<font color="#E5E5E5"> way so that I have some</font>

373
00:16:50,149 --> 00:16:54,470
introspection cavities I can focus on

374
00:16:52,670 --> 00:16:56,390
<font color="#E5E5E5">attaching to a new process because</font>

375
00:16:54,470 --> 00:16:59,029
remember<font color="#E5E5E5"> that my main goal is</font><font color="#CCCCCC"> to do</font>

376
00:16:56,390 --> 00:17:00,529
Mariana<font color="#CCCCCC"> rises right so I want to</font>

377
00:16:59,029 --> 00:17:06,319
intercept<font color="#CCCCCC"> a process when it is</font><font color="#E5E5E5"> being</font>

378
00:17:00,529 --> 00:17:12,040
created<font color="#CCCCCC"> so how do you implement</font><font color="#E5E5E5"> and also</font>

379
00:17:06,319 --> 00:17:14,540
<font color="#E5E5E5">attach in the case of a new process you</font>

380
00:17:12,040 --> 00:17:16,309
just you just<font color="#CCCCCC"> have to find</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> C or C</font>

381
00:17:14,540 --> 00:17:18,500
<font color="#CCCCCC">are free that doesn't it get</font><font color="#E5E5E5"> exist in</font>

382
00:17:16,309 --> 00:17:20,389
the<font color="#CCCCCC"> current process</font><font color="#E5E5E5"> list you you check</font>

383
00:17:18,500 --> 00:17:25,520
every time and if it<font color="#E5E5E5"> doesn't</font><font color="#CCCCCC"> exist well</font>

384
00:17:20,390 --> 00:17:27,020
it's a new process being scheduled so

385
00:17:25,520 --> 00:17:29,629
now the question<font color="#CCCCCC"> is how do you access</font>

386
00:17:27,020 --> 00:17:32,929
the entry point<font color="#E5E5E5"> of this process</font><font color="#CCCCCC"> that's</font>

387
00:17:29,630 --> 00:17:34,850
<font color="#E5E5E5">another problem but we have Windows</font>

388
00:17:32,929 --> 00:17:38,840
internals to<font color="#E5E5E5"> help us and our unrest</font>

389
00:17:34,850 --> 00:17:41,750
<font color="#CCCCCC">internal</font><font color="#E5E5E5"> knowledge so how does the</font>

390
00:17:38,840 --> 00:17:44,360
<font color="#CCCCCC">process is</font><font color="#E5E5E5"> being created on Windows it's</font>

391
00:17:41,750 --> 00:17:45,980
<font color="#CCCCCC">a it's</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> two-step process with</font><font color="#CCCCCC"> ads</font>

392
00:17:44,360 --> 00:17:48,928
<font color="#CCCCCC">it's a simplification but</font>

393
00:17:45,980 --> 00:17:51,090
first I'm going to<font color="#CCCCCC"> call this API and the</font>

394
00:17:48,929 --> 00:17:52,620
create user process and this one is

395
00:17:51,090 --> 00:17:55,320
<font color="#CCCCCC">repeated</font><font color="#E5E5E5"> responsible to create the</font>

396
00:17:52,620 --> 00:17:58,469
important canal structures like the e

397
00:17:55,320 --> 00:18:00,720
process and the fret and then<font color="#CCCCCC"> is</font><font color="#E5E5E5"> going</font>

398
00:17:58,470 --> 00:18:05,640
<font color="#E5E5E5">to add them into the kernel process list</font>

399
00:18:00,720 --> 00:18:09,360
<font color="#E5E5E5">and the phase two is that this process</font>

400
00:18:05,640 --> 00:18:11,549
<font color="#E5E5E5">is one day going to</font><font color="#CCCCCC"> be scheduled</font><font color="#E5E5E5"> and on</font>

401
00:18:09,360 --> 00:18:12,750
this it<font color="#E5E5E5"> will</font><font color="#CCCCCC"> start on this</font><font color="#E5E5E5"> function</font>

402
00:18:11,549 --> 00:18:14,850
that's going<font color="#E5E5E5"> to continue the</font>

403
00:18:12,750 --> 00:18:17,360
initialization of<font color="#CCCCCC"> the process address</font>

404
00:18:14,850 --> 00:18:21,059
space<font color="#E5E5E5"> to</font><font color="#CCCCCC"> load all the dll's in memory</font>

405
00:18:17,360 --> 00:18:24,658
<font color="#E5E5E5">and who switch to R in free</font><font color="#CCCCCC"> to user</font>

406
00:18:21,059 --> 00:18:31,080
context<font color="#E5E5E5"> and then to finally call finally</font>

407
00:18:24,659 --> 00:18:32,130
the entry point but now how do<font color="#E5E5E5"> you get</font>

408
00:18:31,080 --> 00:18:35,010
to the entry point

409
00:18:32,130 --> 00:18:37,850
what you want to do<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> is to</font><font color="#E5E5E5"> read</font>

410
00:18:35,010 --> 00:18:40,980
<font color="#E5E5E5">this wind for you to start address field</font>

411
00:18:37,850 --> 00:18:44,189
<font color="#E5E5E5">this field is being populated during the</font>

412
00:18:40,980 --> 00:18:46,440
call to<font color="#CCCCCC"> end epsp allocate thread and it</font>

413
00:18:44,190 --> 00:18:47,399
contains<font color="#E5E5E5"> the entry point of our process</font>

414
00:18:46,440 --> 00:18:51,510
in<font color="#E5E5E5"> New Zealand</font>

415
00:18:47,399 --> 00:18:53,549
<font color="#E5E5E5">and we know that when we reach</font><font color="#CCCCCC"> case top</font>

416
00:18:51,510 --> 00:18:56,250
use of thread we know that this<font color="#CCCCCC"> fill</font><font color="#E5E5E5"> has</font>

417
00:18:53,549 --> 00:18:58,350
been populated<font color="#E5E5E5"> and is</font><font color="#CCCCCC"> available so the</font>

418
00:18:56,250 --> 00:19:01,620
solution I had was<font color="#CCCCCC"> to</font><font color="#E5E5E5"> let's break on</font>

419
00:18:58,350 --> 00:19:03,449
this function<font color="#E5E5E5"> then</font><font color="#CCCCCC"> you can parse</font><font color="#E5E5E5"> they'll</font>

420
00:19:01,620 --> 00:19:05,850
<font color="#E5E5E5">process the</font><font color="#CCCCCC"> leaf read and read this</font>

421
00:19:03,450 --> 00:19:07,470
<font color="#E5E5E5">field and when it's</font><font color="#CCCCCC"> one it's very you</font>

422
00:19:05,850 --> 00:19:10,820
<font color="#CCCCCC">can break down</font><font color="#E5E5E5"> the approach entry point</font>

423
00:19:07,470 --> 00:19:15,390
continue and we<font color="#E5E5E5"> reach the entry point</font>

424
00:19:10,820 --> 00:19:17,970
<font color="#CCCCCC">that's not</font><font color="#E5E5E5"> it didn't work because this</font>

425
00:19:15,390 --> 00:19:20,460
address is not mapped<font color="#CCCCCC"> yet and that's one</font>

426
00:19:17,970 --> 00:19:23,100
of the quirks<font color="#E5E5E5"> of the problem of</font><font color="#CCCCCC"> libya my</font>

427
00:19:20,460 --> 00:19:26,159
exam<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> only set memory access</font>

428
00:19:23,100 --> 00:19:30,418
events<font color="#CCCCCC"> only if the page</font><font color="#E5E5E5"> has been mapped</font>

429
00:19:26,159 --> 00:19:35,190
in memory it corresponds<font color="#CCCCCC"> to a physical</font>

430
00:19:30,419 --> 00:19:37,770
frame so from<font color="#E5E5E5"> that what can we do</font><font color="#CCCCCC"> we can</font>

431
00:19:35,190 --> 00:19:40,200
<font color="#CCCCCC">try</font><font color="#E5E5E5"> to use</font><font color="#CCCCCC"> the page fault handler and</font>

432
00:19:37,770 --> 00:19:44,610
watch<font color="#E5E5E5"> multiple times if the page is</font>

433
00:19:40,200 --> 00:19:46,169
mapped<font color="#CCCCCC"> you can single step</font><font color="#E5E5E5"> until during</font>

434
00:19:44,610 --> 00:19:48,809
free watch for page<font color="#CCCCCC"> two modifications</font>

435
00:19:46,169 --> 00:19:51,330
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is all the things that have tried</font>

436
00:19:48,809 --> 00:19:52,590
and I'm still<font color="#E5E5E5"> trying it's a bit</font>

437
00:19:51,330 --> 00:19:56,699
complicated because the<font color="#E5E5E5"> guest sometimes</font>

438
00:19:52,590 --> 00:19:58,250
freezes<font color="#E5E5E5"> or crashes what's the status of</font>

439
00:19:56,700 --> 00:20:01,370
<font color="#E5E5E5">my debugger to the</font>

440
00:19:58,250 --> 00:20:03,920
what<font color="#E5E5E5"> I have is I can intercept process</font>

441
00:20:01,370 --> 00:20:06,889
by name or PID<font color="#E5E5E5"> single step</font><font color="#CCCCCC"> the process</font>

442
00:20:03,920 --> 00:20:10,610
<font color="#E5E5E5">execution</font><font color="#CCCCCC"> set some memory</font><font color="#E5E5E5"> breakpoints if</font>

443
00:20:06,890 --> 00:20:12,980
the page is mapped and load can<font color="#E5E5E5"> add</font>

444
00:20:10,610 --> 00:20:15,590
symbols<font color="#E5E5E5"> only and all of that on top of</font>

445
00:20:12,980 --> 00:20:18,290
the rudder to<font color="#E5E5E5"> interface the</font><font color="#CCCCCC"> issues have</font>

446
00:20:15,590 --> 00:20:20,199
<font color="#E5E5E5">to solve is</font><font color="#CCCCCC"> to force a potential this</font><font color="#E5E5E5"> in</font>

447
00:20:18,290 --> 00:20:25,670
process have to find the thread context

448
00:20:20,200 --> 00:20:27,650
<font color="#CCCCCC">I have to debug the</font><font color="#E5E5E5"> VMI state and over</font>

449
00:20:25,670 --> 00:20:30,470
<font color="#CCCCCC">issue in</font><font color="#E5E5E5"> introspection</font><font color="#CCCCCC"> I have to solve</font>

450
00:20:27,650 --> 00:20:41,560
<font color="#E5E5E5">that's for the future so now let's</font>

451
00:20:30,470 --> 00:20:41,560
switch<font color="#CCCCCC"> to the demo that's better</font>

452
00:20:42,370 --> 00:20:59,149
<font color="#CCCCCC">okay operative in my here and this is my</font>

453
00:20:49,580 --> 00:21:02,480
VM<font color="#E5E5E5"> so what I'm going to do is to run the</font>

454
00:20:59,150 --> 00:21:07,670
<font color="#E5E5E5">plug-in on this VM and I want to accept</font>

455
00:21:02,480 --> 00:21:10,100
exploded<font color="#E5E5E5"> Exe okay so I have interested</font>

456
00:21:07,670 --> 00:21:14,120
multiple process means log on and

457
00:21:10,100 --> 00:21:17,510
<font color="#E5E5E5">finally explore that</font><font color="#CCCCCC"> exe so the the VM</font>

458
00:21:14,120 --> 00:21:19,850
now is post<font color="#CCCCCC"> you</font><font color="#E5E5E5"> are of</font><font color="#CCCCCC"> course inside</font><font color="#E5E5E5"> the</font>

459
00:21:17,510 --> 00:21:22,790
window<font color="#E5E5E5"> schedule because the rest has to</font>

460
00:21:19,850 --> 00:21:27,439
<font color="#CCCCCC">be implemented but what you can do is to</font>

461
00:21:22,790 --> 00:21:29,510
load the symbols like this and you have

462
00:21:27,440 --> 00:21:33,380
<font color="#E5E5E5">access</font><font color="#CCCCCC"> to read the whole outer space of</font>

463
00:21:29,510 --> 00:21:35,450
Rico and all<font color="#E5E5E5"> the symbols</font><font color="#CCCCCC"> and what I can</font>

464
00:21:33,380 --> 00:21:37,850
do is to add a breakpoint on<font color="#CCCCCC"> ng</font><font color="#E5E5E5"> open</font>

465
00:21:35,450 --> 00:21:42,440
file for<font color="#CCCCCC"> example and let's say continue</font>

466
00:21:37,850 --> 00:21:45,879
to execution<font color="#E5E5E5"> so now already okay so</font><font color="#CCCCCC"> i</font>

467
00:21:42,440 --> 00:21:50,570
have<font color="#E5E5E5"> intercepted a call to ng open file</font>

468
00:21:45,880 --> 00:21:53,660
<font color="#CCCCCC">and if you disassemble</font><font color="#E5E5E5"> you can see that</font>

469
00:21:50,570 --> 00:21:59,480
we<font color="#CCCCCC"> are here at oracle and</font><font color="#E5E5E5"> he</font><font color="#CCCCCC"> opened file</font>

470
00:21:53,660 --> 00:22:02,090
and you can<font color="#CCCCCC"> single-step the execution up</font>

471
00:21:59,480 --> 00:22:05,350
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> i can</font><font color="#E5E5E5"> synchro step the execution</font>

472
00:22:02,090 --> 00:22:09,649
<font color="#E5E5E5">that's the state where</font><font color="#CCCCCC"> i am today</font>

473
00:22:05,350 --> 00:22:16,760
<font color="#CCCCCC">and now another short demo</font>

474
00:22:09,650 --> 00:22:21,730
and I have<font color="#CCCCCC"> what I will show using rattle</font>

475
00:22:16,760 --> 00:22:30,610
pipe<font color="#E5E5E5"> on top of the debugger</font><font color="#CCCCCC"> no</font><font color="#E5E5E5"> not here</font>

476
00:22:21,730 --> 00:22:30,610
thank you<font color="#E5E5E5"> okay</font>

477
00:22:35,170 --> 00:22:40,540
<font color="#E5E5E5">okay so here I'm running</font><font color="#CCCCCC"> a script</font><font color="#E5E5E5"> which</font>

478
00:22:38,270 --> 00:22:42,710
is watching the Siskel's<font color="#E5E5E5"> and</font>

479
00:22:40,540 --> 00:22:44,178
intercepting and he opened fire so first

480
00:22:42,710 --> 00:22:46,160
is running the VM address space<font color="#CCCCCC"> we've</font>

481
00:22:44,179 --> 00:22:50,840
recall to extract the z-score table

482
00:22:46,160 --> 00:22:55,070
dynamically<font color="#CCCCCC"> it's going to find for the</font>

483
00:22:50,840 --> 00:22:58,250
<font color="#CCCCCC">NT</font><font color="#E5E5E5"> Open File address set a breakpoint on</font>

484
00:22:55,070 --> 00:23:00,080
top of it and watch<font color="#CCCCCC"> an each time there</font>

485
00:22:58,250 --> 00:23:03,190
is<font color="#CCCCCC"> a cisco is going to preach</font><font color="#E5E5E5"> print a</font>

486
00:23:00,080 --> 00:23:05,600
parameter associated to the to the file

487
00:23:03,190 --> 00:23:07,790
so<font color="#E5E5E5"> here</font><font color="#CCCCCC"> i'm</font><font color="#E5E5E5"> starting is product</font><font color="#CCCCCC"> X Z and</font>

488
00:23:05,600 --> 00:23:12,409
you can see that inside intercepting<font color="#E5E5E5"> and</font>

489
00:23:07,790 --> 00:23:14,120
<font color="#CCCCCC">Japan file and printing the parameter so</font>

490
00:23:12,410 --> 00:23:16,010
<font color="#CCCCCC">why it's low it's because I'm</font><font color="#E5E5E5"> implanted</font>

491
00:23:14,120 --> 00:23:21,080
them in the breakpoints<font color="#E5E5E5"> in kind of a</font>

492
00:23:16,010 --> 00:23:22,460
<font color="#CCCCCC">naive way where I am think</font><font color="#E5E5E5"> setting</font><font color="#CCCCCC"> the</font>

493
00:23:21,080 --> 00:23:24,350
breakpoints at the granularity<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the</font>

494
00:23:22,460 --> 00:23:26,300
memory page<font color="#E5E5E5"> so each time there is</font><font color="#CCCCCC"> memory</font>

495
00:23:24,350 --> 00:23:30,709
access on the memory page I'm getting on

496
00:23:26,300 --> 00:23:32,990
<font color="#CCCCCC">events and going back into the VM but</font>

497
00:23:30,710 --> 00:23:37,480
now I stand<font color="#E5E5E5"> there is a</font><font color="#CCCCCC"> Cisco I can print</font>

498
00:23:32,990 --> 00:23:37,480
the the file<font color="#E5E5E5"> associated to it</font>

499
00:23:41,310 --> 00:23:50,269
[Applause]

500
00:23:47,860 --> 00:23:52,580
so now to come to give a conclusion

501
00:23:50,269 --> 00:23:55,490
really<font color="#E5E5E5"> quick what is</font><font color="#CCCCCC"> the future for this</font>

502
00:23:52,580 --> 00:23:57,350
<font color="#CCCCCC">project first</font><font color="#E5E5E5"> is to do more analysis of</font>

503
00:23:55,490 --> 00:23:59,179
<font color="#E5E5E5">course I would like to mix two</font>

504
00:23:57,350 --> 00:24:02,719
interesting<font color="#CCCCCC"> stead of sand boxes using</font>

505
00:23:59,179 --> 00:24:04,600
VMI<font color="#E5E5E5"> and my interactive reverse an</font>

506
00:24:02,720 --> 00:24:06,710
interactive reverse<font color="#CCCCCC"> enjoining</font><font color="#E5E5E5"> framework</font>

507
00:24:04,600 --> 00:24:08,389
<font color="#E5E5E5">the sandbox will just be dealing</font><font color="#CCCCCC"> with</font>

508
00:24:06,710 --> 00:24:10,879
extracting the classified<font color="#E5E5E5"> information</font>

509
00:24:08,389 --> 00:24:12,110
<font color="#CCCCCC">while</font><font color="#E5E5E5"> giving to the analyst the</font>

510
00:24:10,879 --> 00:24:14,000
possibility to<font color="#E5E5E5"> have a fine-grained</font>

511
00:24:12,110 --> 00:24:15,979
control over the<font color="#CCCCCC"> execution of the</font>

512
00:24:14,000 --> 00:24:17,389
Marrero<font color="#E5E5E5"> and inspect everything that's</font>

513
00:24:15,980 --> 00:24:19,039
happening memory extract the keys I

514
00:24:17,389 --> 00:24:20,418
don't know all the plastic on<font color="#CCCCCC"> staff that</font>

515
00:24:19,039 --> 00:24:23,539
<font color="#E5E5E5">you have</font><font color="#CCCCCC"> to deal with while being</font>

516
00:24:20,419 --> 00:24:25,519
stealth<font color="#E5E5E5"> and of course it's a</font>

517
00:24:23,539 --> 00:24:28,460
multi-purpose<font color="#E5E5E5"> cross-platform</font><font color="#CCCCCC"> full-system</font>

518
00:24:25,519 --> 00:24:34,070
<font color="#E5E5E5">debugger so have fun just try it and</font>

519
00:24:28,460 --> 00:24:35,419
build<font color="#E5E5E5"> your use case on top of it so</font>

520
00:24:34,070 --> 00:24:38,570
thank<font color="#E5E5E5"> you</font><font color="#CCCCCC"> to the whole</font><font color="#E5E5E5"> of these people</font>

521
00:24:35,419 --> 00:24:39,860
don't<font color="#E5E5E5"> cake</font><font color="#CCCCCC"> Maxim MoMA Thomas from Libya</font>

522
00:24:38,570 --> 00:24:41,899
<font color="#CCCCCC">my</font><font color="#E5E5E5"> Michael</font><font color="#CCCCCC"> Cohen which helped</font><font color="#E5E5E5"> me</font>

523
00:24:39,860 --> 00:24:44,840
integrated<font color="#E5E5E5"> the</font><font color="#CCCCCC"> VMI address space</font><font color="#E5E5E5"> into</font>

524
00:24:41,899 --> 00:24:49,370
Rico and<font color="#CCCCCC"> a lexicon of enough from</font>

525
00:24:44,840 --> 00:24:50,990
<font color="#E5E5E5">f-secure window scanner team and I'm</font>

526
00:24:49,370 --> 00:24:53,469
available for<font color="#CCCCCC"> your questions thank you</font>

527
00:24:50,990 --> 00:24:53,470
<font color="#CCCCCC">for attention</font>

528
00:24:56,800 --> 00:25:05,550
I have a question Mizuki here here here

529
00:25:02,470 --> 00:25:10,660
yeah I can hear<font color="#CCCCCC"> you</font><font color="#E5E5E5"> sorry</font>

530
00:25:05,550 --> 00:25:13,600
nobody I know I know little<font color="#E5E5E5"> hole</font>

531
00:25:10,660 --> 00:25:15,700
question um<font color="#CCCCCC"> I like you so much this</font>

532
00:25:13,600 --> 00:25:19,870
<font color="#E5E5E5">hypervisor and stuff</font><font color="#CCCCCC"> and you know I have</font>

533
00:25:15,700 --> 00:25:21,880
experienced a box<font color="#CCCCCC"> well</font><font color="#E5E5E5"> and this this one</font>

534
00:25:19,870 --> 00:25:25,120
I have<font color="#E5E5E5"> one stuff</font><font color="#CCCCCC"> one question that is</font>

535
00:25:21,880 --> 00:25:28,420
<font color="#E5E5E5">coming to my mind the preliminary I saw</font>

536
00:25:25,120 --> 00:25:31,899
with<font color="#E5E5E5"> hyperdrive sure</font><font color="#CCCCCC"> is a lot of noise</font>

537
00:25:28,420 --> 00:25:33,970
<font color="#CCCCCC">the tile</font><font color="#E5E5E5"> you have to avoid it I mean</font>

538
00:25:31,900 --> 00:25:35,770
you're analyzing one malware for example

539
00:25:33,970 --> 00:25:37,810
and you<font color="#CCCCCC"> have to avoid a lot of Windows</font>

540
00:25:35,770 --> 00:25:40,389
<font color="#E5E5E5">events that may be unrelated to the my</font>

541
00:25:37,810 --> 00:25:43,510
work situation itself<font color="#CCCCCC"> so what do you</font>

542
00:25:40,390 --> 00:25:46,090
think is<font color="#E5E5E5"> a photo line what you think</font><font color="#CCCCCC"> is</font>

543
00:25:43,510 --> 00:25:49,210
<font color="#CCCCCC">a bad approach</font><font color="#E5E5E5"> we will have to to work</font>

544
00:25:46,090 --> 00:25:51,340
to avoid this<font color="#E5E5E5"> kind of</font><font color="#CCCCCC"> establish for</font>

545
00:25:49,210 --> 00:25:53,770
example<font color="#E5E5E5"> I I thought in great like some</font>

546
00:25:51,340 --> 00:25:55,000
some<font color="#CCCCCC"> Whitely student stuff or stuff like</font>

547
00:25:53,770 --> 00:25:57,100
that<font color="#E5E5E5"> what</font><font color="#CCCCCC"> do you think about</font><font color="#E5E5E5"> that</font>

548
00:25:55,000 --> 00:25:59,770
<font color="#CCCCCC">I didn't explode it this topic with</font>

549
00:25:57,100 --> 00:26:02,110
interesting question<font color="#CCCCCC"> I think this is the</font>

550
00:25:59,770 --> 00:26:04,480
<font color="#CCCCCC">the work of the</font><font color="#E5E5E5"> Sun boxes themselves to</font>

551
00:26:02,110 --> 00:26:06,280
filter<font color="#E5E5E5"> out this kind</font><font color="#CCCCCC"> of noise here I</font>

552
00:26:04,480 --> 00:26:09,280
think I'm just<font color="#E5E5E5"> building the debugger so</font>

553
00:26:06,280 --> 00:26:11,200
to help in an interactive analysis<font color="#CCCCCC"> but</font>

554
00:26:09,280 --> 00:26:14,530
it's more<font color="#CCCCCC"> of a question for the</font><font color="#E5E5E5"> Sun</font>

555
00:26:11,200 --> 00:26:15,730
boxes themselves<font color="#CCCCCC"> I don't have the</font><font color="#E5E5E5"> right</font>

556
00:26:14,530 --> 00:26:21,190
<font color="#E5E5E5">answer for you right</font><font color="#CCCCCC"> now</font>

557
00:26:15,730 --> 00:26:22,750
I don't know yeah<font color="#E5E5E5"> it's a hard work you</font>

558
00:26:21,190 --> 00:26:27,400
have<font color="#E5E5E5"> also worked on this on this</font><font color="#CCCCCC"> topic I</font>

559
00:26:22,750 --> 00:26:31,990
guess we could work<font color="#CCCCCC"> a new</font><font color="#E5E5E5"> solution I</font>

560
00:26:27,400 --> 00:26:33,730
don't know yes congratulation for<font color="#E5E5E5"> your</font>

561
00:26:31,990 --> 00:26:35,920
talk I<font color="#CCCCCC"> liked it a lot</font><font color="#E5E5E5"> and it was quite</font>

562
00:26:33,730 --> 00:26:39,100
<font color="#E5E5E5">interesting and I had two questions</font><font color="#CCCCCC"> and</font>

563
00:26:35,920 --> 00:26:41,530
the<font color="#CCCCCC"> first one was in</font><font color="#E5E5E5"> the example in the</font>

564
00:26:39,100 --> 00:26:45,520
demo<font color="#CCCCCC"> that you show that you were tracing</font>

565
00:26:41,530 --> 00:26:47,560
in the open file yes you're you're able

566
00:26:45,520 --> 00:26:50,530
to<font color="#E5E5E5"> actually trace only one function or</font>

567
00:26:47,560 --> 00:26:53,169
you<font color="#E5E5E5"> can trace simultaneously various</font>

568
00:26:50,530 --> 00:26:55,000
functions is there any limit on<font color="#E5E5E5"> that</font><font color="#CCCCCC"> no</font>

569
00:26:53,170 --> 00:26:56,920
it's<font color="#E5E5E5"> just you said to the breakpoint on</font>

570
00:26:55,000 --> 00:26:58,180
<font color="#E5E5E5">another function and you</font><font color="#CCCCCC"> can of course</font>

571
00:26:56,920 --> 00:27:00,160
trace it

572
00:26:58,180 --> 00:27:02,830
I'm attaching to only one process but

573
00:27:00,160 --> 00:27:05,380
maybe in the<font color="#E5E5E5"> future we can attach to</font><font color="#CCCCCC"> all</font>

574
00:27:02,830 --> 00:27:07,510
the process at<font color="#E5E5E5"> the same time we can have</font>

575
00:27:05,380 --> 00:27:09,299
this kind<font color="#CCCCCC"> of system</font><font color="#E5E5E5"> but yeah you can set</font>

576
00:27:07,510 --> 00:27:11,759
the breakpoints anywhere memory as

577
00:27:09,299 --> 00:27:14,429
it's mapped<font color="#E5E5E5"> of course and another</font>

578
00:27:11,759 --> 00:27:16,409
question<font color="#E5E5E5"> I had you were hooking well</font>

579
00:27:14,429 --> 00:27:18,960
touching to<font color="#E5E5E5"> the process you see in the</font>

580
00:27:16,409 --> 00:27:21,119
<font color="#E5E5E5">process name yeah</font><font color="#CCCCCC"> well what will</font><font color="#E5E5E5"> happen</font>

581
00:27:18,960 --> 00:27:25,080
if you if you're<font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to attach like</font>

582
00:27:21,119 --> 00:27:27,209
without now in the process ID<font color="#E5E5E5"> you try to</font>

583
00:27:25,080 --> 00:27:28,739
touch and there's two explorers<font color="#CCCCCC"> you have</font>

584
00:27:27,210 --> 00:27:31,619
to choose them<font color="#CCCCCC"> manually you</font><font color="#E5E5E5"> can filter</font>

585
00:27:28,739 --> 00:27:33,570
<font color="#E5E5E5">by the PID also okay but that's</font><font color="#CCCCCC"> alright</font>

586
00:27:31,619 --> 00:27:34,949
we can do and improve<font color="#E5E5E5"> its of course</font><font color="#CCCCCC"> okay</font>

587
00:27:33,570 --> 00:27:42,629
that was just<font color="#CCCCCC"> the beginning</font>

588
00:27:34,950 --> 00:27:45,679
okay that was<font color="#E5E5E5"> it thank you</font><font color="#CCCCCC"> okay yes you</font>

589
00:27:42,629 --> 00:27:48,959
said it was<font color="#E5E5E5"> possible for</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> Linux also</font>

590
00:27:45,679 --> 00:27:51,720
for Linux<font color="#E5E5E5"> yeah I only worked for Windows</font>

591
00:27:48,960 --> 00:27:53,549
<font color="#E5E5E5">right now you know so</font><font color="#CCCCCC"> it this way to</font>

592
00:27:51,720 --> 00:27:55,019
assess it but yeah in<font color="#CCCCCC"> the</font><font color="#E5E5E5"> future I</font><font color="#CCCCCC"> would</font>

593
00:27:53,549 --> 00:27:57,720
<font color="#CCCCCC">like to have a cuspid</font><font color="#E5E5E5"> for debugger and</font>

594
00:27:55,019 --> 00:28:00,869
be able<font color="#E5E5E5"> to intercept processes in Linux</font>

595
00:27:57,720 --> 00:28:03,629
and Mac OS<font color="#E5E5E5"> of course in your point of</font>

596
00:28:00,869 --> 00:28:06,149
view<font color="#CCCCCC"> what</font><font color="#E5E5E5"> will be the challenge</font><font color="#CCCCCC"> that if</font>

597
00:28:03,629 --> 00:28:07,609
we<font color="#E5E5E5"> implement this for the Linux</font><font color="#CCCCCC"> platform</font>

598
00:28:06,149 --> 00:28:09,988
<font color="#CCCCCC">it's to build an introspection layer</font>

599
00:28:07,609 --> 00:28:11,999
<font color="#CCCCCC">here I have a lot of facilities because</font>

600
00:28:09,989 --> 00:28:13,799
I'm using reco<font color="#E5E5E5"> and recall is fetching</font>

601
00:28:11,999 --> 00:28:15,749
the<font color="#E5E5E5"> bidipis from the Microsoft servers</font>

602
00:28:13,799 --> 00:28:17,429
<font color="#E5E5E5">and and there is only one Microsoft</font>

603
00:28:15,749 --> 00:28:20,190
server for all of it if you<font color="#CCCCCC"> think about</font>

604
00:28:17,429 --> 00:28:21,989
Linux in the problem here is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> it's</font>

605
00:28:20,190 --> 00:28:23,629
an<font color="#CCCCCC"> open source</font><font color="#E5E5E5"> project</font><font color="#CCCCCC"> so you never know</font>

606
00:28:21,989 --> 00:28:26,909
<font color="#E5E5E5">what</font><font color="#CCCCCC"> kind of kernel you are</font><font color="#E5E5E5"> dealing with</font>

607
00:28:23,629 --> 00:28:29,219
you<font color="#E5E5E5"> can never just just fetch the</font>

608
00:28:26,909 --> 00:28:31,590
symbols<font color="#CCCCCC"> right away from one server it's</font>

609
00:28:29,220 --> 00:28:33,239
<font color="#E5E5E5">impossible so building you an</font>

610
00:28:31,590 --> 00:28:34,980
introspection layer for<font color="#E5E5E5"> Linux is going</font>

611
00:28:33,239 --> 00:28:37,559
to be a bit more<font color="#E5E5E5"> challenging</font><font color="#CCCCCC"> than</font>

612
00:28:34,980 --> 00:28:40,169
<font color="#E5E5E5">Windows and the funny</font><font color="#CCCCCC"> thing is</font><font color="#E5E5E5"> that</font>

613
00:28:37,559 --> 00:28:43,440
introspecting<font color="#E5E5E5"> open-source system is more</font>

614
00:28:40,169 --> 00:28:55,139
<font color="#E5E5E5">difficult than</font><font color="#CCCCCC"> close</font><font color="#E5E5E5"> to systems</font><font color="#CCCCCC"> ok thank</font>

615
00:28:43,440 --> 00:28:58,070
you<font color="#E5E5E5"> very</font><font color="#CCCCCC"> much more</font><font color="#E5E5E5"> questions thank you</font>

616
00:28:55,139 --> 00:28:58,070
<font color="#E5E5E5">very much thank you</font>

617
00:28:59,270 --> 00:29:01,330
you

