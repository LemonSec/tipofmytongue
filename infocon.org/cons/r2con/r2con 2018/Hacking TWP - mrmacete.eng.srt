1
00:00:00,150 --> 00:00:03,929
[Music]

2
00:00:00,589 --> 00:00:09,510
I'm<font color="#E5E5E5"> Francesca</font><font color="#CCCCCC"> Tamaki that's those are my</font>

3
00:00:03,929 --> 00:00:14,009
handles and yeah that's pretty much<font color="#CCCCCC"> a</font>

4
00:00:09,510 --> 00:00:17,939
spoiler of what the kind<font color="#E5E5E5"> of stuff we can</font>

5
00:00:14,009 --> 00:00:21,449
<font color="#E5E5E5">do basically a wrote</font><font color="#CCCCCC"> an i/o plugin for</font>

6
00:00:17,940 --> 00:00:24,390
<font color="#E5E5E5">radar in order to be able</font><font color="#CCCCCC"> to see and</font>

7
00:00:21,449 --> 00:00:28,680
manipulate the data files of the game

8
00:00:24,390 --> 00:00:31,080
and in this talk I will show both<font color="#E5E5E5"> the</font>

9
00:00:28,680 --> 00:00:35,309
thought process<font color="#CCCCCC"> behind the reversing</font><font color="#E5E5E5"> of</font>

10
00:00:31,080 --> 00:00:41,070
the of it and also the<font color="#CCCCCC"> design of the are</font>

11
00:00:35,309 --> 00:00:43,199
you plugging<font color="#CCCCCC"> so FEMA wit</font><font color="#E5E5E5"> Park is made by</font>

12
00:00:41,070 --> 00:00:48,000
the same guys<font color="#CCCCCC"> which worked on the</font>

13
00:00:43,200 --> 00:00:49,879
original<font color="#E5E5E5"> Lucasfilm adventure games back</font>

14
00:00:48,000 --> 00:00:54,320
in<font color="#CCCCCC"> the</font><font color="#E5E5E5"> eighties but has been released</font>

15
00:00:49,879 --> 00:00:57,750
<font color="#CCCCCC">the last year like in like an indie game</font>

16
00:00:54,320 --> 00:01:02,370
<font color="#E5E5E5">if you don't know hit you can go there</font>

17
00:00:57,750 --> 00:01:04,949
<font color="#E5E5E5">and get it</font><font color="#CCCCCC"> I bought</font><font color="#E5E5E5"> it twice because I</font>

18
00:01:02,370 --> 00:01:08,580
needed<font color="#E5E5E5"> to understand</font><font color="#CCCCCC"> what changes</font><font color="#E5E5E5"> across</font>

19
00:01:04,949 --> 00:01:12,270
different platforms<font color="#CCCCCC"> it's available for a</font>

20
00:01:08,580 --> 00:01:16,140
lot<font color="#E5E5E5"> of platforms including consoles and</font>

21
00:01:12,270 --> 00:01:22,320
mobile<font color="#E5E5E5"> I bought only the Mac OS versions</font>

22
00:01:16,140 --> 00:01:25,080
for steam and<font color="#CCCCCC"> the standalone one so</font>

23
00:01:22,320 --> 00:01:29,130
we're focus focus on the data files of

24
00:01:25,080 --> 00:01:32,390
the game<font color="#E5E5E5"> which contain all the resources</font>

25
00:01:29,130 --> 00:01:36,079
of the game but<font color="#CCCCCC"> also some of the logic</font>

26
00:01:32,390 --> 00:01:41,640
<font color="#CCCCCC">they are obfuscated obviously but</font>

27
00:01:36,079 --> 00:01:45,059
fortunately it's not<font color="#E5E5E5"> so hard</font><font color="#CCCCCC"> there those</font>

28
00:01:41,640 --> 00:01:48,570
are packet files which are found in<font color="#E5E5E5"> the</font>

29
00:01:45,060 --> 00:01:52,950
<font color="#CCCCCC">games data folder so the first thing</font>

30
00:01:48,570 --> 00:01:55,740
I'll show<font color="#E5E5E5"> you is how to find out where</font>

31
00:01:52,950 --> 00:02:00,079
the loading<font color="#E5E5E5"> code is and where the the</font>

32
00:01:55,740 --> 00:02:03,079
<font color="#E5E5E5">obfuscation happens so I have here</font>

33
00:02:00,079 --> 00:02:03,079
probably

34
00:02:07,570 --> 00:02:13,700
yeah

35
00:02:10,060 --> 00:02:19,130
have a couple<font color="#CCCCCC"> of terminals here</font><font color="#E5E5E5"> okay so</font>

36
00:02:13,700 --> 00:02:27,140
in one tab<font color="#CCCCCC"> I will show the</font><font color="#E5E5E5"> I will spawn</font>

37
00:02:19,130 --> 00:02:32,420
the<font color="#E5E5E5"> game using your to freedom</font><font color="#CCCCCC"> so that</font>

38
00:02:27,140 --> 00:02:35,839
we can see where the things are loaded

39
00:02:32,420 --> 00:02:38,059
<font color="#E5E5E5">in the other tab I will</font><font color="#CCCCCC"> load the</font><font color="#E5E5E5"> the</font>

40
00:02:35,840 --> 00:02:42,740
executable<font color="#E5E5E5"> so we can analyze</font><font color="#CCCCCC"> it</font>

41
00:02:38,060 --> 00:02:46,190
statically with our<font color="#E5E5E5"> - I'll do that now</font>

42
00:02:42,740 --> 00:02:51,010
because<font color="#E5E5E5"> so that it runs some emulation</font>

43
00:02:46,190 --> 00:02:56,450
<font color="#E5E5E5">while we're doing the dynamic stuff and</font>

44
00:02:51,010 --> 00:03:00,500
so the game has<font color="#CCCCCC"> been spawned we don't</font>

45
00:02:56,450 --> 00:03:03,049
see it yet because<font color="#E5E5E5"> it's suspended so we</font>

46
00:03:00,500 --> 00:03:07,990
can<font color="#E5E5E5"> apply early instrumentation with</font>

47
00:03:03,050 --> 00:03:13,280
<font color="#E5E5E5">freedom</font><font color="#CCCCCC"> and I'm going to</font><font color="#E5E5E5"> trace if open</font>

48
00:03:07,990 --> 00:03:17,320
<font color="#E5E5E5">that's a normal</font><font color="#CCCCCC"> Road in</font><font color="#E5E5E5"> karbala</font><font color="#CCCCCC"> in this</font>

49
00:03:13,280 --> 00:03:20,870
way<font color="#CCCCCC"> I</font><font color="#E5E5E5"> can tell her to</font><font color="#CCCCCC"> Frida that we want</font>

50
00:03:17,320 --> 00:03:25,970
<font color="#E5E5E5">to see also</font><font color="#CCCCCC"> the a</font><font color="#E5E5E5"> first parameter of the</font>

51
00:03:20,870 --> 00:03:29,420
function as a string<font color="#CCCCCC"> now the</font><font color="#E5E5E5"> process is</font>

52
00:03:25,970 --> 00:03:32,140
<font color="#E5E5E5">still suspended but if I resume it it</font>

53
00:03:29,420 --> 00:03:36,018
will start to spit out stuck traces and

54
00:03:32,140 --> 00:03:40,660
<font color="#E5E5E5">define name so we're seeing that it's</font>

55
00:03:36,019 --> 00:03:44,140
calling F open<font color="#E5E5E5"> enormous amount of times</font>

56
00:03:40,660 --> 00:03:48,340
and that's<font color="#E5E5E5"> because this file contains</font>

57
00:03:44,140 --> 00:03:52,208
<font color="#E5E5E5">it's like</font><font color="#CCCCCC"> five hundred</font><font color="#E5E5E5"> megabyte files</font>

58
00:03:48,340 --> 00:03:55,010
which contains thousands of<font color="#E5E5E5"> resources so</font>

59
00:03:52,209 --> 00:03:57,680
apparently every time it needs to load

60
00:03:55,010 --> 00:04:01,370
something it will open<font color="#E5E5E5"> and do something</font>

61
00:03:57,680 --> 00:04:03,890
so those stack traces<font color="#E5E5E5"> look almost all</font>

62
00:04:01,370 --> 00:04:05,600
the same but at some point<font color="#CCCCCC"> yeah the game</font>

63
00:04:03,890 --> 00:04:08,988
is<font color="#E5E5E5"> starting up but we are slowing it</font>

64
00:04:05,600 --> 00:04:11,000
down a bit<font color="#E5E5E5"> for the instrumentation</font><font color="#CCCCCC"> now</font>

65
00:04:08,989 --> 00:04:15,110
the structure is changed but it's still

66
00:04:11,000 --> 00:04:17,870
loading so just wait for<font color="#E5E5E5"> it</font><font color="#CCCCCC"> to finish</font>

67
00:04:15,110 --> 00:04:23,210
<font color="#CCCCCC">it's not will</font><font color="#E5E5E5"> not take too long</font>

68
00:04:17,870 --> 00:04:25,400
and yeah pretty<font color="#E5E5E5"> much</font><font color="#CCCCCC"> the same stack</font>

69
00:04:23,210 --> 00:04:27,760
trace<font color="#CCCCCC"> at some point it will start to</font>

70
00:04:25,400 --> 00:04:39,948
load<font color="#CCCCCC"> also other stuff which is</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> our</font>

71
00:04:27,760 --> 00:04:44,120
<font color="#E5E5E5">GG</font><font color="#CCCCCC"> pocket file almost there okay so</font><font color="#E5E5E5"> okay</font>

72
00:04:39,949 --> 00:04:52,430
so it finished<font color="#E5E5E5"> now I want to find the</font>

73
00:04:44,120 --> 00:04:56,840
<font color="#E5E5E5">first one which is this so this</font><font color="#CCCCCC"> is the</font>

74
00:04:52,430 --> 00:05:01,940
<font color="#E5E5E5">first time it calls these F open with</font>

75
00:04:56,840 --> 00:05:05,260
<font color="#CCCCCC">that file</font><font color="#E5E5E5"> and yeah</font><font color="#CCCCCC"> just focus on the</font>

76
00:05:01,940 --> 00:05:17,930
first two entries<font color="#E5E5E5"> of the stack trace</font>

77
00:05:05,260 --> 00:05:20,120
remember those offsets now for what we

78
00:05:17,930 --> 00:05:22,430
can do with that<font color="#E5E5E5"> to freedom now thanks</font>

79
00:05:20,120 --> 00:05:27,680
to<font color="#CCCCCC"> a recent addition by pancake is doing</font>

80
00:05:22,430 --> 00:05:29,690
this in<font color="#CCCCCC"> this way we can display the Col</font>

81
00:05:27,680 --> 00:05:33,050
graph based on the<font color="#CCCCCC"> combination of all</font>

82
00:05:29,690 --> 00:05:35,710
those stack traces and<font color="#E5E5E5"> so you can see</font>

83
00:05:33,050 --> 00:05:38,620
there there's a the F open<font color="#E5E5E5"> and here</font>

84
00:05:35,710 --> 00:05:41,960
there<font color="#E5E5E5"> are there's</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> first entry</font><font color="#CCCCCC"> of our</font>

85
00:05:38,620 --> 00:05:44,680
stack trace<font color="#E5E5E5"> and this</font><font color="#CCCCCC"> is the second</font><font color="#E5E5E5"> one</font>

86
00:05:41,960 --> 00:05:49,250
so we're interesting in the in those two

87
00:05:44,680 --> 00:05:51,139
<font color="#E5E5E5">so in the other tab the analysis is</font>

88
00:05:49,250 --> 00:05:53,960
<font color="#CCCCCC">finished so we have just analyzed all</font>

89
00:05:51,139 --> 00:05:56,080
functions and emulated<font color="#E5E5E5"> so we can find</font>

90
00:05:53,960 --> 00:06:03,770
<font color="#CCCCCC">references but let's seek to the first</font>

91
00:05:56,080 --> 00:06:06,740
<font color="#E5E5E5">offset here so indeed it's calling F</font>

92
00:06:03,770 --> 00:06:07,960
open<font color="#E5E5E5"> and yeah let's follow this code</font>

93
00:06:06,740 --> 00:06:14,539
real quick

94
00:06:07,960 --> 00:06:18,229
<font color="#E5E5E5">so after F open it will F sick and then</font>

95
00:06:14,539 --> 00:06:21,800
after the F<font color="#E5E5E5"> sick will unlock a buffer</font>

96
00:06:18,229 --> 00:06:24,050
<font color="#E5E5E5">and then call F read so and this happens</font>

97
00:06:21,800 --> 00:06:27,770
every single<font color="#CCCCCC"> time it's calling F open so</font>

98
00:06:24,050 --> 00:06:29,810
<font color="#CCCCCC">that means that here it defines what</font>

99
00:06:27,770 --> 00:06:33,409
part of<font color="#E5E5E5"> the file</font>

100
00:06:29,810 --> 00:06:38,980
it wants so basically those buffer will

101
00:06:33,410 --> 00:06:41,980
contain our<font color="#E5E5E5"> single resource</font><font color="#CCCCCC"> if we go on</font>

102
00:06:38,980 --> 00:06:41,980
<font color="#CCCCCC">okay</font>

103
00:06:44,340 --> 00:06:47,469
[Music]

104
00:06:50,240 --> 00:07:06,930
sorry not<font color="#E5E5E5"> bf</font><font color="#CCCCCC"> clothes</font><font color="#E5E5E5"> okay so after free</font>

105
00:06:56,250 --> 00:07:10,910
<font color="#CCCCCC">okay here yeah</font><font color="#E5E5E5"> we can see oops okay this</font>

106
00:07:06,930 --> 00:07:14,430
one<font color="#CCCCCC"> what happens after the free is this</font>

107
00:07:10,910 --> 00:07:17,700
if you're familiar with<font color="#CCCCCC"> C++</font><font color="#E5E5E5"> reversing</font>

108
00:07:14,430 --> 00:07:22,800
<font color="#E5E5E5">you can spot that he is here it's</font>

109
00:07:17,700 --> 00:07:26,070
constructing a<font color="#CCCCCC"> a</font><font color="#E5E5E5"> C++ object because here</font>

110
00:07:22,800 --> 00:07:28,950
is<font color="#E5E5E5"> reading a pointer which is a and</font>

111
00:07:26,070 --> 00:07:32,750
adding<font color="#E5E5E5"> 10 and storing here that</font><font color="#CCCCCC"> means</font>

112
00:07:28,950 --> 00:07:41,070
<font color="#E5E5E5">that</font><font color="#CCCCCC"> savvy table and so we can quickly</font>

113
00:07:32,750 --> 00:07:42,630
show this<font color="#E5E5E5"> okay so this is the actual we</font>

114
00:07:41,070 --> 00:07:44,670
table with all<font color="#CCCCCC"> the methods we are not</font>

115
00:07:42,630 --> 00:07:47,100
<font color="#CCCCCC">interesting</font><font color="#E5E5E5"> in this now but we can see</font>

116
00:07:44,670 --> 00:07:49,320
that<font color="#E5E5E5"> they are also other metadata like</font>

117
00:07:47,100 --> 00:07:52,640
for example<font color="#E5E5E5"> the class name here so this</font>

118
00:07:49,320 --> 00:07:56,400
<font color="#E5E5E5">GG data class is the</font><font color="#CCCCCC"> C++ class which</font>

119
00:07:52,640 --> 00:07:59,789
represents the abstract resource which

120
00:07:56,400 --> 00:08:06,169
is<font color="#E5E5E5"> contained on the packet file so now</font>

121
00:07:59,790 --> 00:08:06,170
<font color="#E5E5E5">let's go to see the second function and</font>

122
00:08:07,820 --> 00:08:16,680
so yeah after after calling this

123
00:08:13,890 --> 00:08:18,900
function<font color="#CCCCCC"> which just we just saw</font><font color="#E5E5E5"> that</font>

124
00:08:16,680 --> 00:08:27,530
creates an object<font color="#CCCCCC"> oh yeah I forgot</font>

125
00:08:18,900 --> 00:08:27,530
something<font color="#CCCCCC"> we have to see</font><font color="#E5E5E5"> that here</font>

126
00:08:31,419 --> 00:08:39,319
yeah<font color="#E5E5E5"> here after setting the</font><font color="#CCCCCC"> V table it</font>

127
00:08:35,870 --> 00:08:42,740
sets also<font color="#E5E5E5"> other fields</font><font color="#CCCCCC"> those two are</font>

128
00:08:39,320 --> 00:08:46,130
interesting because<font color="#CCCCCC"> at offset 18x a</font>

129
00:08:42,740 --> 00:08:48,920
decimal there's the buffer<font color="#E5E5E5"> the pointer</font>

130
00:08:46,130 --> 00:08:51,020
to<font color="#E5E5E5"> the buffer itself and at offset 20</font>

131
00:08:48,920 --> 00:08:53,000
there's the size of the buffer<font color="#CCCCCC"> so we</font>

132
00:08:51,020 --> 00:09:01,579
have to remember this<font color="#CCCCCC"> stuff throughout</font>

133
00:08:53,000 --> 00:09:08,900
all the talk let's seek again to the

134
00:09:01,580 --> 00:09:11,540
second function okay<font color="#CCCCCC"> so after calling</font>

135
00:09:08,900 --> 00:09:14,390
our function which returns actually<font color="#CCCCCC"> the</font>

136
00:09:11,540 --> 00:09:21,410
<font color="#CCCCCC">debt object if everything</font><font color="#E5E5E5"> goes well is</font>

137
00:09:14,390 --> 00:09:24,620
returned here so if it's<font color="#E5E5E5"> not now I mean</font>

138
00:09:21,410 --> 00:09:27,290
it does some stuff<font color="#E5E5E5"> and then does this so</font>

139
00:09:24,620 --> 00:09:29,660
<font color="#E5E5E5">its success in here the size of the</font>

140
00:09:27,290 --> 00:09:33,680
buffer<font color="#E5E5E5"> here is accessing the buffer</font>

141
00:09:29,660 --> 00:09:36,170
pointer itself<font color="#E5E5E5"> and here we can see</font>

142
00:09:33,680 --> 00:09:41,469
that's<font color="#E5E5E5"> already obfuscated stuff right</font>

143
00:09:36,170 --> 00:09:44,449
<font color="#E5E5E5">away</font><font color="#CCCCCC"> so what does here is accessing</font><font color="#E5E5E5"> the</font>

144
00:09:41,470 --> 00:09:47,870
this global variable here reading<font color="#E5E5E5"> it</font>

145
00:09:44,450 --> 00:09:53,120
bite by<font color="#CCCCCC"> bite</font><font color="#E5E5E5"> it turns out this that's a</font>

146
00:09:47,870 --> 00:09:55,850
16 byte<font color="#CCCCCC"> hard coded array which looks</font>

147
00:09:53,120 --> 00:10:00,410
<font color="#E5E5E5">random stuff but it's not because it's a</font>

148
00:09:55,850 --> 00:10:03,410
<font color="#E5E5E5">coded so and it's exerting the content</font>

149
00:10:00,410 --> 00:10:06,469
of the buffer<font color="#E5E5E5"> this is only one byte but</font>

150
00:10:03,410 --> 00:10:08,719
then there's there's a loop here<font color="#CCCCCC"> which</font>

151
00:10:06,470 --> 00:10:11,240
does pretty<font color="#CCCCCC"> much</font><font color="#E5E5E5"> the same stuff there's</font>

152
00:10:08,720 --> 00:10:15,350
also a constant here<font color="#CCCCCC"> hard-coded which is</font>

153
00:10:11,240 --> 00:10:18,410
get<font color="#CCCCCC"> we'd gets multiplied by the index of</font>

154
00:10:15,350 --> 00:10:21,380
<font color="#E5E5E5">the byte inside the buffer so but we</font>

155
00:10:18,410 --> 00:10:24,980
will see<font color="#E5E5E5"> that in the in left now so</font>

156
00:10:21,380 --> 00:10:28,930
that's so we found where<font color="#CCCCCC"> it opens the</font>

157
00:10:24,980 --> 00:10:32,959
file and where the<font color="#E5E5E5"> deification logic is</font>

158
00:10:28,930 --> 00:10:36,529
so now let's focus<font color="#E5E5E5"> on the obfuscated so</font>

159
00:10:32,959 --> 00:10:38,619
basically<font color="#E5E5E5"> and</font><font color="#CCCCCC"> each chunks is a chunk is</font>

160
00:10:36,529 --> 00:10:43,220
the obfuscated independently that means

161
00:10:38,620 --> 00:10:45,690
chunks for me<font color="#CCCCCC"> are the single resources</font>

162
00:10:43,220 --> 00:10:48,330
which are<font color="#E5E5E5"> parked in the</font><font color="#CCCCCC"> file</font>

163
00:10:45,690 --> 00:10:53,640
they are<font color="#E5E5E5"> obfuscated independently it</font>

164
00:10:48,330 --> 00:10:56,220
means that every chunk has<font color="#E5E5E5"> a parameter</font>

165
00:10:53,640 --> 00:10:58,439
which changes for<font color="#E5E5E5"> every resource so you</font>

166
00:10:56,220 --> 00:11:01,080
can't just<font color="#CCCCCC"> unab FISC ate all the file</font>

167
00:10:58,440 --> 00:11:04,080
but you<font color="#E5E5E5"> have to deep fist get the single</font>

168
00:11:01,080 --> 00:11:07,080
<font color="#E5E5E5">chunks and what changes is just the</font><font color="#CCCCCC"> size</font>

169
00:11:04,080 --> 00:11:09,270
because<font color="#E5E5E5"> it depends on the size</font><font color="#CCCCCC"> of the</font>

170
00:11:07,080 --> 00:11:12,420
chunk<font color="#E5E5E5"> the other two parameters are</font>

171
00:11:09,270 --> 00:11:15,840
constant across<font color="#CCCCCC"> all the chunks</font><font color="#E5E5E5"> and are</font>

172
00:11:12,420 --> 00:11:19,349
the two we<font color="#E5E5E5"> already saw so</font><font color="#CCCCCC"> there is a 16</font>

173
00:11:15,840 --> 00:11:22,380
bytes array and<font color="#E5E5E5"> the constant</font><font color="#CCCCCC"> those are</font>

174
00:11:19,350 --> 00:11:24,480
the same again across<font color="#CCCCCC"> the</font><font color="#E5E5E5"> chunks but can</font>

175
00:11:22,380 --> 00:11:27,390
change<font color="#CCCCCC"> across different versions of the</font>

176
00:11:24,480 --> 00:11:31,170
game<font color="#CCCCCC"> and across platform so for example</font>

177
00:11:27,390 --> 00:11:35,370
Mac OS standalone and Mac OS steam<font color="#E5E5E5"> may</font>

178
00:11:31,170 --> 00:11:37,770
have different parameters<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> there</font>

179
00:11:35,370 --> 00:11:40,380
was an early proof of concept for<font color="#E5E5E5"> the</font>

180
00:11:37,770 --> 00:11:43,020
obfuscated in these files on github

181
00:11:40,380 --> 00:11:45,750
that I<font color="#E5E5E5"> used as a starting point</font><font color="#CCCCCC"> for this</font>

182
00:11:43,020 --> 00:11:51,060
but it<font color="#E5E5E5"> was incomplete because</font><font color="#CCCCCC"> the</font>

183
00:11:45,750 --> 00:11:56,220
abstraction is wrong<font color="#E5E5E5"> so the deification</font>

184
00:11:51,060 --> 00:11:58,859
works like this so in the<font color="#E5E5E5"> red bytes</font><font color="#CCCCCC"> at</font>

185
00:11:56,220 --> 00:12:01,430
the top are<font color="#CCCCCC"> the obfuscated bytes you can</font>

186
00:11:58,860 --> 00:12:04,740
find in the file<font color="#E5E5E5"> instead the green ones</font>

187
00:12:01,430 --> 00:12:06,810
<font color="#CCCCCC">did you skated ones</font><font color="#E5E5E5"> consumed by the game</font>

188
00:12:04,740 --> 00:12:08,970
<font color="#E5E5E5">in the middle</font><font color="#CCCCCC"> there's the</font><font color="#E5E5E5"> this</font>

189
00:12:06,810 --> 00:12:11,640
obfuscation algorithm which basically is

190
00:12:08,970 --> 00:12:13,410
very<font color="#E5E5E5"> simple is everybody's ex-ored with</font>

191
00:12:11,640 --> 00:12:16,830
the previous one except the first which

192
00:12:13,410 --> 00:12:18,719
is<font color="#CCCCCC"> exhorted for day</font><font color="#E5E5E5"> with the last byte</font>

193
00:12:16,830 --> 00:12:22,980
of<font color="#CCCCCC"> the size of the chunk that's</font><font color="#E5E5E5"> why</font>

194
00:12:18,720 --> 00:12:26,700
every child<font color="#E5E5E5"> is different</font><font color="#CCCCCC"> the second step</font>

195
00:12:22,980 --> 00:12:29,250
is to<font color="#E5E5E5"> XOR it for with the 16 bytes key</font>

196
00:12:26,700 --> 00:12:32,730
but since it's<font color="#E5E5E5"> only 16 months it gets</font>

197
00:12:29,250 --> 00:12:36,720
repeated<font color="#E5E5E5"> but to not repeat the key every</font>

198
00:12:32,730 --> 00:12:39,270
<font color="#E5E5E5">time the same</font><font color="#CCCCCC"> it also occurs each of the</font>

199
00:12:36,720 --> 00:12:44,730
key bytes with this multiplied constant

200
00:12:39,270 --> 00:12:48,540
by the index<font color="#E5E5E5"> so and yeah it's completely</font>

201
00:12:44,730 --> 00:12:50,430
reversible<font color="#E5E5E5"> and it's interesting to</font><font color="#CCCCCC"> note</font>

202
00:12:48,540 --> 00:12:54,959
that<font color="#E5E5E5"> each each of</font><font color="#CCCCCC"> few skated by it</font>

203
00:12:50,430 --> 00:12:57,900
depends on the previous obfuscated byte

204
00:12:54,960 --> 00:13:02,100
so the<font color="#E5E5E5"> structure the GG Park file is</font>

205
00:12:57,900 --> 00:13:06,020
this<font color="#E5E5E5"> so the red stuff is obfuscated</font><font color="#CCCCCC"> at</font>

206
00:13:02,100 --> 00:13:08,940
the beginning there are<font color="#E5E5E5"> clear clear text</font>

207
00:13:06,020 --> 00:13:12,480
integers<font color="#E5E5E5"> were representing the offset of</font>

208
00:13:08,940 --> 00:13:17,340
<font color="#CCCCCC">the index</font><font color="#E5E5E5"> and file and the size of the</font>

209
00:13:12,480 --> 00:13:21,440
<font color="#E5E5E5">index which is</font><font color="#CCCCCC"> dictionary which</font><font color="#E5E5E5"> is third</font>

210
00:13:17,340 --> 00:13:24,360
at<font color="#CCCCCC"> the end of the file</font><font color="#E5E5E5"> it's a binary</font>

211
00:13:21,440 --> 00:13:27,800
encoded in a proprietary format here

212
00:13:24,360 --> 00:13:33,710
which is compatible with<font color="#E5E5E5"> JSON</font><font color="#CCCCCC"> one to one</font>

213
00:13:27,800 --> 00:13:33,709
but<font color="#E5E5E5"> it's binary so I had to reverse that</font>

214
00:13:34,220 --> 00:13:41,420
the you plug-in performs the deification

215
00:13:38,220 --> 00:13:44,460
<font color="#CCCCCC">and obfuscation</font><font color="#E5E5E5"> and you can modify a</font>

216
00:13:41,420 --> 00:13:49,280
<font color="#CCCCCC">thing and you can discover what's inside</font>

217
00:13:44,460 --> 00:13:49,280
<font color="#CCCCCC">that source</font><font color="#E5E5E5"> code of the</font><font color="#CCCCCC"> plug-in is there</font>

218
00:13:50,240 --> 00:13:59,580
okay so<font color="#E5E5E5"> these the Deo plug-in in general</font>

219
00:13:55,950 --> 00:14:01,530
<font color="#E5E5E5">creates an abstraction</font><font color="#CCCCCC"> to the user of</font>

220
00:13:59,580 --> 00:14:04,050
<font color="#E5E5E5">what</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the data in this case</font>

221
00:14:01,530 --> 00:14:06,689
<font color="#E5E5E5">the the</font><font color="#CCCCCC"> red stripe at the bottom is the</font>

222
00:14:04,050 --> 00:14:08,880
obfuscated file as it is on disk<font color="#E5E5E5"> the red</font>

223
00:14:06,690 --> 00:14:10,920
stripe at the top<font color="#E5E5E5"> they had a green</font>

224
00:14:08,880 --> 00:14:14,370
stripe at the top is<font color="#E5E5E5"> D it's what the</font>

225
00:14:10,920 --> 00:14:20,060
user sees but that's an abstraction

226
00:14:14,370 --> 00:14:24,930
because<font color="#CCCCCC"> their plug-in</font><font color="#E5E5E5"> is asked for read</font>

227
00:14:20,060 --> 00:14:28,439
in a block by block so it's random<font color="#E5E5E5"> but</font>

228
00:14:24,930 --> 00:14:30,569
<font color="#CCCCCC">we have to know which are the</font><font color="#E5E5E5"> chunks</font>

229
00:14:28,440 --> 00:14:33,750
involved because the infestation depends

230
00:14:30,570 --> 00:14:37,640
on that<font color="#E5E5E5"> and but the user then will note</font>

231
00:14:33,750 --> 00:14:40,890
not is it<font color="#E5E5E5"> so it's like a continuous</font>

232
00:14:37,640 --> 00:14:44,930
stream of clear text which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> not there</font>

233
00:14:40,890 --> 00:14:49,050
actually<font color="#E5E5E5"> and that's true for</font><font color="#CCCCCC"> all plugins</font>

234
00:14:44,930 --> 00:14:52,979
<font color="#CCCCCC">the same exactly the same reason reason</font>

235
00:14:49,050 --> 00:14:56,939
<font color="#CCCCCC">meant here</font><font color="#E5E5E5"> I applied it to like the</font><font color="#CCCCCC"> D</font>

236
00:14:52,980 --> 00:14:59,520
<font color="#CCCCCC">yld cache for us so you have to rebase</font>

237
00:14:56,940 --> 00:15:02,580
pointer on<font color="#E5E5E5"> the fly</font><font color="#CCCCCC"> so you do the same</font>

238
00:14:59,520 --> 00:15:04,949
<font color="#CCCCCC">yeah you have an index look up what what</font>

239
00:15:02,580 --> 00:15:07,980
are<font color="#E5E5E5"> the chunks involved and</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> fish get</font>

240
00:15:04,950 --> 00:15:08,850
the piece you<font color="#E5E5E5"> want the only trick</font><font color="#CCCCCC"> here</font>

241
00:15:07,980 --> 00:15:10,380
is<font color="#E5E5E5"> that</font>

242
00:15:08,850 --> 00:15:12,990
if we don't obfuscate it<font color="#E5E5E5"> from the</font>

243
00:15:10,380 --> 00:15:14,910
beginning<font color="#CCCCCC"> we</font><font color="#E5E5E5"> have to read the</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> the</font>

244
00:15:12,990 --> 00:15:19,620
<font color="#E5E5E5">obfuscated by that the opposite</font><font color="#CCCCCC"> minus</font>

245
00:15:14,910 --> 00:15:21,420
one from<font color="#CCCCCC"> the file directly because</font><font color="#E5E5E5"> every</font>

246
00:15:19,620 --> 00:15:24,389
obfuscated byte depends on the previous

247
00:15:21,420 --> 00:15:27,269
<font color="#CCCCCC">one for writing is pretty</font><font color="#E5E5E5"> much the same</font>

248
00:15:24,389 --> 00:15:29,250
the<font color="#CCCCCC"> only thing that changes is that you</font>

249
00:15:27,269 --> 00:15:31,709
can't<font color="#E5E5E5"> just stop writing at</font><font color="#CCCCCC"> the end of</font>

250
00:15:29,250 --> 00:15:34,079
the block<font color="#CCCCCC"> the new plugin wants to write</font>

251
00:15:31,709 --> 00:15:37,589
you have<font color="#CCCCCC"> to go right</font><font color="#E5E5E5"> until the</font><font color="#CCCCCC"> end of</font>

252
00:15:34,079 --> 00:15:40,019
the chunk<font color="#E5E5E5"> again because every obfuscated</font>

253
00:15:37,589 --> 00:15:42,120
bite depends on the previous<font color="#CCCCCC"> one so</font><font color="#E5E5E5"> even</font>

254
00:15:40,019 --> 00:15:48,690
if the real content is not change it the

255
00:15:42,120 --> 00:15:51,720
<font color="#E5E5E5">FISC action will change for inserting</font>

256
00:15:48,690 --> 00:15:55,079
<font color="#E5E5E5">bytes</font><font color="#CCCCCC"> it's a bit of a mess because</font>

257
00:15:51,720 --> 00:15:57,029
problem is obfuscation depends on the

258
00:15:55,079 --> 00:16:02,849
size and<font color="#E5E5E5"> we</font><font color="#CCCCCC"> are actually</font><font color="#E5E5E5"> changing</font><font color="#CCCCCC"> the</font>

259
00:15:57,029 --> 00:16:08,610
size but<font color="#E5E5E5"> and yeah also what happens is</font>

260
00:16:02,850 --> 00:16:13,740
that the core<font color="#CCCCCC"> of radar actually performs</font>

261
00:16:08,610 --> 00:16:17,180
<font color="#E5E5E5">the shift after calling the hour resize</font>

262
00:16:13,740 --> 00:16:21,060
function in the<font color="#E5E5E5"> a plugin so there is no</font>

263
00:16:17,180 --> 00:16:23,579
notification when the the shift<font color="#E5E5E5"> is</font>

264
00:16:21,060 --> 00:16:27,839
finished<font color="#E5E5E5"> so I made a hack</font><font color="#CCCCCC"> which is to</font>

265
00:16:23,579 --> 00:16:30,449
<font color="#E5E5E5">listen for</font><font color="#CCCCCC"> the first write on the last</font>

266
00:16:27,839 --> 00:16:32,279
chunk after the size so that's the

267
00:16:30,449 --> 00:16:36,870
<font color="#E5E5E5">moment in</font><font color="#CCCCCC"> which</font><font color="#E5E5E5"> the shift is finished</font>

268
00:16:32,279 --> 00:16:39,209
and that's<font color="#E5E5E5"> needed because after updating</font>

269
00:16:36,870 --> 00:16:41,519
the offset in size it's<font color="#E5E5E5"> a real biscuit</font>

270
00:16:39,209 --> 00:16:44,160
<font color="#E5E5E5">all the thing when the shift is finished</font>

271
00:16:41,519 --> 00:16:46,410
we have to rebuild<font color="#E5E5E5"> the index at</font><font color="#CCCCCC"> the end</font>

272
00:16:44,160 --> 00:16:50,279
of the<font color="#E5E5E5"> file and also rebuild the flags</font>

273
00:16:46,410 --> 00:16:53,339
because<font color="#E5E5E5"> there's a really thin being</font>

274
00:16:50,279 --> 00:16:55,860
<font color="#CCCCCC">plug-in which only</font><font color="#E5E5E5"> does the flags for a</font>

275
00:16:53,339 --> 00:16:59,279
flag for each of the chunks<font color="#CCCCCC"> so we have</font>

276
00:16:55,860 --> 00:17:05,630
to call the<font color="#E5E5E5"> the core plug-in from the a</font>

277
00:16:59,279 --> 00:17:08,069
<font color="#E5E5E5">plug-in</font><font color="#CCCCCC"> that's a bit</font><font color="#E5E5E5"> nice but it works</font>

278
00:17:05,630 --> 00:17:13,140
for<font color="#E5E5E5"> deleting</font><font color="#CCCCCC"> byte it's pretty much the</font>

279
00:17:08,069 --> 00:17:15,270
same<font color="#CCCCCC"> but here it's</font><font color="#E5E5E5"> the opposite so when</font>

280
00:17:13,140 --> 00:17:17,429
we<font color="#E5E5E5"> get called from</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> airplane when</font>

281
00:17:15,270 --> 00:17:20,429
<font color="#E5E5E5">they</font><font color="#CCCCCC"> do plug in get called for</font><font color="#E5E5E5"> the</font>

282
00:17:17,429 --> 00:17:22,010
resize<font color="#CCCCCC"> callback the shift has been</font>

283
00:17:20,429 --> 00:17:24,020
<font color="#E5E5E5">already</font>

284
00:17:22,010 --> 00:17:28,190
we happened<font color="#E5E5E5"> so what happens is</font><font color="#CCCCCC"> that our</font>

285
00:17:24,020 --> 00:17:30,800
index is<font color="#CCCCCC"> a has an offset</font><font color="#E5E5E5"> so the contents</font>

286
00:17:28,190 --> 00:17:35,120
are already changed but the boundaries

287
00:17:30,800 --> 00:17:38,300
<font color="#CCCCCC">of the chunk are wrong</font><font color="#E5E5E5"> so happy just now</font>

288
00:17:35,120 --> 00:17:39,919
<font color="#CCCCCC">here we just have to update it so the</font>

289
00:17:38,300 --> 00:17:48,620
shift<font color="#E5E5E5"> already happened so we can rebuild</font>

290
00:17:39,920 --> 00:17:51,050
<font color="#E5E5E5">the index right away</font><font color="#CCCCCC"> here's the here are</font>

291
00:17:48,620 --> 00:17:54,649
the thing<font color="#E5E5E5"> things you can find in those</font>

292
00:17:51,050 --> 00:17:57,290
data files<font color="#CCCCCC"> so besides regular resources</font>

293
00:17:54,650 --> 00:18:00,230
like King<font color="#E5E5E5"> G's and music and sound</font>

294
00:17:57,290 --> 00:18:03,020
<font color="#E5E5E5">effects you can find also</font><font color="#CCCCCC"> lip-sync</font>

295
00:18:00,230 --> 00:18:06,980
<font color="#E5E5E5">metadata which is cool because they use</font>

296
00:18:03,020 --> 00:18:12,070
an open source thing to do that<font color="#CCCCCC"> the</font>

297
00:18:06,980 --> 00:18:17,530
fonts and also those which are scripts

298
00:18:12,070 --> 00:18:20,629
it's game logic those wimpy thing<font color="#E5E5E5"> are</font>

299
00:18:17,530 --> 00:18:22,730
uses the same format of the index so

300
00:18:20,630 --> 00:18:26,120
that<font color="#CCCCCC"> it's the it's that</font><font color="#E5E5E5"> kind of binary</font>

301
00:18:22,730 --> 00:18:30,430
<font color="#E5E5E5">dictionary and so I made a comment</font><font color="#CCCCCC"> to</font>

302
00:18:26,120 --> 00:18:30,429
convert that to JSON from<font color="#E5E5E5"> real time</font>

303
00:18:30,820 --> 00:18:39,169
problem is those logic file the<font color="#CCCCCC"> Binet</font>

304
00:18:35,090 --> 00:18:43,730
files are<font color="#E5E5E5"> have a second</font><font color="#CCCCCC"> path of</font>

305
00:18:39,170 --> 00:18:45,410
obfuscation<font color="#E5E5E5"> so what happens is that if</font>

306
00:18:43,730 --> 00:18:48,470
you don't do the second path

307
00:18:45,410 --> 00:18:53,600
what what I saw it<font color="#E5E5E5"> was just an</font>

308
00:18:48,470 --> 00:18:57,530
unpleasant<font color="#E5E5E5"> high entropy blob</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> I had</font>

309
00:18:53,600 --> 00:19:00,320
no<font color="#CCCCCC"> idea how to how to understand what's</font>

310
00:18:57,530 --> 00:19:03,050
going<font color="#CCCCCC"> on but I know I knew that they're</font>

311
00:19:00,320 --> 00:19:06,169
using this query language because it's

312
00:19:03,050 --> 00:19:08,899
public<font color="#E5E5E5"> knowledge which is a scripting</font>

313
00:19:06,170 --> 00:19:12,020
language<font color="#E5E5E5"> but I expected it to</font><font color="#CCCCCC"> be like</font>

314
00:19:08,900 --> 00:19:12,650
<font color="#E5E5E5">binary representation like bytecode or</font>

315
00:19:12,020 --> 00:19:15,170
something

316
00:19:12,650 --> 00:19:18,110
but I didn't know so what I<font color="#E5E5E5"> did is</font><font color="#CCCCCC"> to</font>

317
00:19:15,170 --> 00:19:22,550
inject<font color="#E5E5E5"> arrows so now I can read them</font>

318
00:19:18,110 --> 00:19:25,100
<font color="#CCCCCC">write stuff I I used the plug-in to just</font>

319
00:19:22,550 --> 00:19:28,100
write random data inside this<font color="#CCCCCC"> Bennett</font>

320
00:19:25,100 --> 00:19:30,770
and<font color="#CCCCCC"> feed the results to</font><font color="#E5E5E5"> the game and</font>

321
00:19:28,100 --> 00:19:33,139
what happens is surprising because<font color="#E5E5E5"> the</font>

322
00:19:30,770 --> 00:19:34,899
arrows I got I googled for them and

323
00:19:33,140 --> 00:19:38,299
there was like

324
00:19:34,899 --> 00:19:40,820
compilation error so<font color="#E5E5E5"> it turns out the</font>

325
00:19:38,299 --> 00:19:46,210
squirrel scripts<font color="#E5E5E5"> are represented as</font>

326
00:19:40,820 --> 00:19:50,360
source code inside so yeah that's that

327
00:19:46,210 --> 00:19:52,519
<font color="#E5E5E5">disclaimer</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> spoiler because after</font><font color="#CCCCCC"> I'd</font>

328
00:19:50,360 --> 00:19:57,139
managed<font color="#CCCCCC"> to do the second pacifist</font>

329
00:19:52,519 --> 00:19:59,539
occasion I I found this which is inside

330
00:19:57,139 --> 00:20:02,209
the<font color="#CCCCCC"> SCADA file so they actually</font><font color="#E5E5E5"> expect</font>

331
00:19:59,539 --> 00:20:05,269
that to be<font color="#E5E5E5"> duplicated at some point but</font>

332
00:20:02,210 --> 00:20:07,820
the interesting thing<font color="#E5E5E5"> is that in the</font>

333
00:20:05,269 --> 00:20:09,440
first<font color="#E5E5E5"> version there wasn't any they</font>

334
00:20:07,820 --> 00:20:17,950
probably added after<font color="#E5E5E5"> I published this</font>

335
00:20:09,440 --> 00:20:22,100
but not sure yeah<font color="#CCCCCC"> so this</font><font color="#E5E5E5"> query</font>

336
00:20:17,950 --> 00:20:25,460
<font color="#E5E5E5">scripting is an open source so if you go</font>

337
00:20:22,100 --> 00:20:28,519
<font color="#E5E5E5">to github you can find that there's only</font>

338
00:20:25,460 --> 00:20:32,240
one<font color="#E5E5E5"> place in which they</font><font color="#CCCCCC"> actually read</font>

339
00:20:28,519 --> 00:20:34,279
the source code<font color="#E5E5E5"> bytes in order to</font>

340
00:20:32,240 --> 00:20:38,120
compile them it's the<font color="#CCCCCC"> lecture</font><font color="#E5E5E5"> funk</font>

341
00:20:34,279 --> 00:20:41,600
<font color="#CCCCCC">relaxer class in the next method so the</font>

342
00:20:38,120 --> 00:20:43,399
next step is to find where this stuff is

343
00:20:41,600 --> 00:20:47,629
<font color="#E5E5E5">because probably there's where they</font>

344
00:20:43,399 --> 00:20:50,209
plugged in<font color="#CCCCCC"> their Fisk</font><font color="#E5E5E5"> Asian pass yeah</font>

345
00:20:47,629 --> 00:20:52,459
yeah<font color="#CCCCCC"> the read F function</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> it's</font>

346
00:20:50,210 --> 00:20:54,950
not a method<font color="#E5E5E5"> but it's a function which</font>

347
00:20:52,460 --> 00:20:57,080
is<font color="#E5E5E5"> can be passed from the outside so</font>

348
00:20:54,950 --> 00:20:59,029
probably there's another place in which

349
00:20:57,080 --> 00:21:03,259
the efficient can happen<font color="#E5E5E5"> but we don't</font>

350
00:20:59,029 --> 00:21:09,549
know<font color="#E5E5E5"> yet so let's find the</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> lecture</font>

351
00:21:03,259 --> 00:21:09,549
here<font color="#E5E5E5"> so here's</font><font color="#CCCCCC"> this crew source code</font>

352
00:21:09,879 --> 00:21:23,800
yeah<font color="#CCCCCC"> this is the next function</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> are</font>

353
00:21:14,659 --> 00:21:27,490
interested in so let's go to the this

354
00:21:23,800 --> 00:21:31,389
and<font color="#E5E5E5"> sick</font><font color="#CCCCCC"> so let's see if there's a</font>

355
00:21:27,490 --> 00:21:35,410
symbol probably not

356
00:21:31,390 --> 00:21:39,160
let's see if there's a method<font color="#E5E5E5"> name</font><font color="#CCCCCC"> there</font>

357
00:21:35,410 --> 00:21:41,950
are some but it's not our so let's see

358
00:21:39,160 --> 00:21:55,870
if<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have at least the invalid</font>

359
00:21:41,950 --> 00:21:58,330
character string nope so yeah<font color="#E5E5E5"> so the</font>

360
00:21:55,870 --> 00:22:00,040
next step is let's<font color="#CCCCCC"> find the usages</font><font color="#E5E5E5"> so</font>

361
00:21:58,330 --> 00:22:02,830
maybe they change<font color="#CCCCCC"> it this source code</font>

362
00:22:00,040 --> 00:22:04,780
but<font color="#E5E5E5"> let's</font><font color="#CCCCCC"> find</font><font color="#E5E5E5"> the usages of next so</font>

363
00:22:02,830 --> 00:22:07,720
it's easy because there's a macro here

364
00:22:04,780 --> 00:22:10,629
which is called the shitload of times

365
00:22:07,720 --> 00:22:13,870
here so<font color="#CCCCCC"> we can</font><font color="#E5E5E5"> just find like a string</font>

366
00:22:10,630 --> 00:22:17,850
near to one of these usages<font color="#CCCCCC"> and see if</font>

367
00:22:13,870 --> 00:22:21,550
<font color="#E5E5E5">we are lucky</font><font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example let's find a</font>

368
00:22:17,850 --> 00:22:23,139
random like this unexpected character

369
00:22:21,550 --> 00:22:27,840
control<font color="#E5E5E5"> okay</font>

370
00:22:23,140 --> 00:22:27,840
it's next<font color="#E5E5E5"> it's near call to that so</font>

371
00:22:32,299 --> 00:22:48,480
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> is there so let's see if there's</font><font color="#CCCCCC"> a</font>

372
00:22:36,000 --> 00:22:50,690
reference<font color="#CCCCCC"> that why this way yeah</font><font color="#E5E5E5"> there's</font>

373
00:22:48,480 --> 00:22:59,610
a reference<font color="#E5E5E5"> in it's only one</font><font color="#CCCCCC"> it's cool</font>

374
00:22:50,690 --> 00:23:03,720
there okay<font color="#E5E5E5"> so yeah this</font><font color="#CCCCCC"> is probably</font><font color="#E5E5E5"> is</font>

375
00:22:59,610 --> 00:23:06,120
this is this thing let's see if we can

376
00:23:03,720 --> 00:23:09,720
find a similar stuff near another string

377
00:23:06,120 --> 00:23:13,129
just<font color="#E5E5E5"> to be sure like new line in a</font>

378
00:23:09,720 --> 00:23:13,130
common in a constant

379
00:23:21,700 --> 00:23:26,130
same process<font color="#CCCCCC"> let's find the reference</font>

380
00:23:29,730 --> 00:23:38,380
constant<font color="#E5E5E5"> yeah so the stuff is here again</font>

381
00:23:35,830 --> 00:23:41,350
<font color="#CCCCCC">so basically</font><font color="#E5E5E5"> what happens is that</font>

382
00:23:38,380 --> 00:23:44,770
<font color="#E5E5E5">probably that next method</font><font color="#CCCCCC"> gets in line</font>

383
00:23:41,350 --> 00:23:48,159
<font color="#E5E5E5">so we</font><font color="#CCCCCC"> can find that thing number of</font>

384
00:23:44,770 --> 00:23:51,220
<font color="#E5E5E5">times and this source code slightly</font>

385
00:23:48,160 --> 00:23:53,500
<font color="#E5E5E5">changed it but we can recognize some</font>

386
00:23:51,220 --> 00:23:56,140
similarity<font color="#E5E5E5"> for example this could</font><font color="#CCCCCC"> be the</font>

387
00:23:53,500 --> 00:23:58,740
call to the read F function<font color="#E5E5E5"> so this</font>

388
00:23:56,140 --> 00:24:03,100
likely getting<font color="#E5E5E5"> a bite from the</font>

389
00:23:58,740 --> 00:24:06,820
<font color="#E5E5E5">obfuscated input and here it's using</font>

390
00:24:03,100 --> 00:24:09,280
those funny<font color="#CCCCCC"> gobble variables</font><font color="#E5E5E5"> and there's</font>

391
00:24:06,820 --> 00:24:12,418
also an<font color="#CCCCCC"> XOR</font><font color="#E5E5E5"> so probably we found the</font>

392
00:24:09,280 --> 00:24:16,059
beautification<font color="#CCCCCC"> so let's just look at</font><font color="#E5E5E5"> it</font>

393
00:24:12,419 --> 00:24:19,090
<font color="#E5E5E5">more deeply</font><font color="#CCCCCC"> so here is reading a pointer</font>

394
00:24:16,059 --> 00:24:21,970
from<font color="#E5E5E5"> a global variable testing which is</font>

395
00:24:19,090 --> 00:24:24,610
<font color="#E5E5E5">not now and then it's reading another</font><font color="#CCCCCC"> I</font>

396
00:24:21,970 --> 00:24:26,830
need an integer<font color="#E5E5E5"> 32-bit integer from a</font>

397
00:24:24,610 --> 00:24:29,500
global<font color="#CCCCCC"> variable incrementing</font><font color="#E5E5E5"> it and</font>

398
00:24:26,830 --> 00:24:34,629
updating<font color="#CCCCCC"> it and then it's dividing that</font>

399
00:24:29,500 --> 00:24:37,570
for another global 32-bit integer and

400
00:24:34,630 --> 00:24:41,049
taking the remainder<font color="#CCCCCC"> and that's used to</font>

401
00:24:37,570 --> 00:24:43,780
index this first<font color="#CCCCCC"> pointer here so</font>

402
00:24:41,049 --> 00:24:47,590
probably<font color="#E5E5E5"> this is the</font><font color="#CCCCCC"> table this is a</font>

403
00:24:43,780 --> 00:24:50,379
table<font color="#E5E5E5"> and this is a counter</font><font color="#CCCCCC"> and this is</font>

404
00:24:47,590 --> 00:24:55,530
the size of the table<font color="#E5E5E5"> because</font><font color="#CCCCCC"> it's going</font>

405
00:24:50,380 --> 00:24:55,530
<font color="#E5E5E5">around it so we</font><font color="#CCCCCC"> can name the things here</font>

406
00:24:55,590 --> 00:25:10,418
<font color="#E5E5E5">like soap fist kitchen table</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> this</font>

407
00:25:04,049 --> 00:25:19,540
so we know<font color="#CCCCCC"> that like sophistication size</font>

408
00:25:10,419 --> 00:25:23,320
is probably this like<font color="#E5E5E5"> submission let's</font>

409
00:25:19,540 --> 00:25:30,399
call it counter this thing which gets

410
00:25:23,320 --> 00:25:35,760
incremented all the time so now we know

411
00:25:30,400 --> 00:25:35,760
this<font color="#E5E5E5"> let's see if we get this pointer</font>

412
00:25:36,170 --> 00:25:42,720
it's known so probably some where it

413
00:25:39,720 --> 00:25:45,230
gets initialized at<font color="#CCCCCC"> runtime let's find</font>

414
00:25:42,720 --> 00:25:48,570
it so it's<font color="#E5E5E5"> fine references to this I</font>

415
00:25:45,230 --> 00:25:50,850
expect<font color="#CCCCCC"> them to</font><font color="#E5E5E5"> be a lot because it's in</font>

416
00:25:48,570 --> 00:25:54,840
line so probably<font color="#E5E5E5"> there's a lot but</font>

417
00:25:50,850 --> 00:25:56,429
fortunately every reference<font color="#E5E5E5"> except the</font>

418
00:25:54,840 --> 00:25:59,310
first it's just<font color="#CCCCCC"> reading it</font>

419
00:25:56,430 --> 00:26:02,100
the first one is assigning it so

420
00:25:59,310 --> 00:26:06,810
<font color="#E5E5E5">probably this</font><font color="#CCCCCC"> is happens in the</font>

421
00:26:02,100 --> 00:26:09,179
initialization<font color="#CCCCCC"> so let's go there</font><font color="#E5E5E5"> so yeah</font>

422
00:26:06,810 --> 00:26:12,540
we found a function that<font color="#E5E5E5"> takes three</font>

423
00:26:09,180 --> 00:26:14,580
arguments and use them for<font color="#CCCCCC"> initialize</font>

424
00:26:12,540 --> 00:26:18,810
those three global variables so we<font color="#E5E5E5"> can</font>

425
00:26:14,580 --> 00:26:25,350
<font color="#E5E5E5">use the we can define the type of the</font>

426
00:26:18,810 --> 00:26:32,700
function<font color="#E5E5E5"> where</font><font color="#CCCCCC"> we are here</font><font color="#E5E5E5"> so like</font><font color="#CCCCCC"> Asian</font>

427
00:26:25,350 --> 00:26:36,080
it's just like<font color="#E5E5E5"> C so table the first one</font>

428
00:26:32,700 --> 00:26:40,260
is the table<font color="#E5E5E5"> the second one is the size</font>

429
00:26:36,080 --> 00:26:44,879
which is<font color="#CCCCCC"> 32-bit and the third one is the</font>

430
00:26:40,260 --> 00:26:50,100
counter<font color="#E5E5E5"> and now we define the</font><font color="#CCCCCC"> function</font>

431
00:26:44,880 --> 00:26:56,730
hold like this<font color="#CCCCCC"> we can name this function</font>

432
00:26:50,100 --> 00:27:04,230
the<font color="#E5E5E5"> same name and we have to realize</font>

433
00:26:56,730 --> 00:27:07,020
that<font color="#E5E5E5"> so here our prototype the arguments</font>

434
00:27:04,230 --> 00:27:11,370
are called<font color="#E5E5E5"> like we told him and here</font>

435
00:27:07,020 --> 00:27:14,520
comments to confirm that this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the</font>

436
00:27:11,370 --> 00:27:16,590
thing<font color="#CCCCCC"> so but we don't know which that</font>

437
00:27:14,520 --> 00:27:19,100
are used to initialize this so let's<font color="#E5E5E5"> go</font>

438
00:27:16,590 --> 00:27:22,850
to see where it's cold

439
00:27:19,100 --> 00:27:26,669
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> so the first argument is</font><font color="#CCCCCC"> just a</font>

440
00:27:22,850 --> 00:27:30,030
hard coded pointer this<font color="#E5E5E5"> which is the</font>

441
00:27:26,670 --> 00:27:32,820
table probably<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> the size and the</font>

442
00:27:30,030 --> 00:27:36,510
counter<font color="#E5E5E5"> if you remember the opposite</font><font color="#CCCCCC"> xx</font>

443
00:27:32,820 --> 00:27:39,899
you remember it's the size<font color="#E5E5E5"> of the buffer</font>

444
00:27:36,510 --> 00:27:44,460
<font color="#E5E5E5">so basically the table is the</font><font color="#CCCCCC"> same for</font>

445
00:27:39,900 --> 00:27:48,299
<font color="#CCCCCC">all resources</font><font color="#E5E5E5"> but the FISC action starts</font>

446
00:27:44,460 --> 00:27:51,179
at offset<font color="#E5E5E5"> like the size of the channel</font>

447
00:27:48,299 --> 00:27:55,489
so that slightly<font color="#E5E5E5"> changes for every</font>

448
00:27:51,179 --> 00:28:09,599
resource we<font color="#CCCCCC"> can also print the table</font>

449
00:27:55,489 --> 00:28:11,940
which<font color="#E5E5E5"> is very useful yeah this is so by</font>

450
00:28:09,599 --> 00:28:16,109
using this knowledge<font color="#CCCCCC"> it's possible</font><font color="#E5E5E5"> to</font>

451
00:28:11,940 --> 00:28:19,619
Jim Fisk<font color="#CCCCCC"> eight also the</font><font color="#E5E5E5"> Discworld source</font>

452
00:28:16,109 --> 00:28:21,749
code<font color="#E5E5E5"> so yeah that's the same thing we</font>

453
00:28:19,619 --> 00:28:24,269
just<font color="#CCCCCC"> these those are the similarities</font>

454
00:28:21,749 --> 00:28:27,299
<font color="#E5E5E5">between the source code and</font><font color="#CCCCCC"> the inline</font>

455
00:28:24,269 --> 00:28:29,729
function we<font color="#CCCCCC"> just found so they choose to</font>

456
00:28:27,299 --> 00:28:35,789
<font color="#E5E5E5">actually change the next</font><font color="#CCCCCC"> method instead</font>

457
00:28:29,729 --> 00:28:38,669
<font color="#CCCCCC">of using the the callback we</font><font color="#E5E5E5"> already</font>

458
00:28:35,789 --> 00:28:43,109
talked about this so let's<font color="#E5E5E5"> keep it again</font>

459
00:28:38,669 --> 00:28:48,589
okay<font color="#CCCCCC"> so now we can see actually what's</font>

460
00:28:43,109 --> 00:28:55,109
inside that that resource files<font color="#CCCCCC"> I can</font>

461
00:28:48,589 --> 00:29:02,519
see<font color="#E5E5E5"> anything</font><font color="#CCCCCC"> ok so to use the</font><font color="#E5E5E5"> plug-in</font>

462
00:28:55,109 --> 00:29:04,439
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can use the</font><font color="#E5E5E5"> GG pack protocol and it</font>

463
00:29:02,519 --> 00:29:06,299
will open<font color="#CCCCCC"> the file</font><font color="#E5E5E5"> I will open it</font><font color="#CCCCCC"> in</font>

464
00:29:04,440 --> 00:29:12,779
<font color="#E5E5E5">write mode because we are going</font><font color="#CCCCCC"> to</font>

465
00:29:06,299 --> 00:29:18,259
<font color="#E5E5E5">change it</font><font color="#CCCCCC"> so it will take some</font><font color="#E5E5E5"> seconds</font>

466
00:29:12,779 --> 00:29:22,499
because<font color="#E5E5E5"> it's like</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> if we go vision</font>

467
00:29:18,259 --> 00:29:24,239
<font color="#E5E5E5">you can see here are the flags one for</font>

468
00:29:22,499 --> 00:29:26,999
every<font color="#E5E5E5"> file which is there</font>

469
00:29:24,239 --> 00:29:34,250
so for<font color="#E5E5E5"> example this is</font><font color="#CCCCCC"> squirrel</font><font color="#E5E5E5"> source</font>

470
00:29:26,999 --> 00:29:37,390
code<font color="#CCCCCC"> it's it looks very</font><font color="#E5E5E5"> bad ok it's like</font>

471
00:29:34,250 --> 00:29:37,390
[Applause]

472
00:29:40,169 --> 00:29:46,270
and yeah there are every kind of things

473
00:29:43,029 --> 00:29:48,789
<font color="#E5E5E5">for</font><font color="#CCCCCC"> example this Wimpy is those kind of</font>

474
00:29:46,270 --> 00:29:53,200
binary dictionary which<font color="#CCCCCC"> is like</font><font color="#E5E5E5"> exactly</font>

475
00:29:48,789 --> 00:29:59,500
<font color="#CCCCCC">like the index</font><font color="#E5E5E5"> you can do like this</font><font color="#CCCCCC"> and</font>

476
00:29:53,200 --> 00:30:02,710
show the<font color="#E5E5E5"> JSON representation with yeah</font>

477
00:29:59,500 --> 00:30:05,020
<font color="#E5E5E5">so basically you have control of a lot</font>

478
00:30:02,710 --> 00:30:08,890
<font color="#E5E5E5">of stuff here</font><font color="#CCCCCC"> just to experiment</font><font color="#E5E5E5"> and</font>

479
00:30:05,020 --> 00:30:12,190
<font color="#E5E5E5">hack and if you install this plug-in</font>

480
00:30:08,890 --> 00:30:14,320
using our<font color="#CCCCCC"> two p.m. there are</font><font color="#E5E5E5"> two scripts</font>

481
00:30:12,190 --> 00:30:17,169
which come for free<font color="#E5E5E5"> which are</font><font color="#CCCCCC"> Gigi</font>

482
00:30:14,320 --> 00:30:21,010
import and Gigi export<font color="#E5E5E5"> for example now</font>

483
00:30:17,169 --> 00:30:28,390
<font color="#E5E5E5">we can run the</font><font color="#CCCCCC"> Gigi export which</font>

484
00:30:21,010 --> 00:30:34,830
basically experts<font color="#CCCCCC"> every resource</font><font color="#E5E5E5"> into a</font>

485
00:30:28,390 --> 00:30:34,830
directory<font color="#E5E5E5"> of your choice yes</font>

486
00:30:37,799 --> 00:30:49,510
so I can just call experts

487
00:30:43,049 --> 00:30:52,899
sorry I'm a very bad typist<font color="#E5E5E5"> and this</font>

488
00:30:49,510 --> 00:30:55,539
will dump everything<font color="#CCCCCC"> so basically if</font><font color="#E5E5E5"> you</font>

489
00:30:52,899 --> 00:30:57,459
<font color="#CCCCCC">want</font><font color="#E5E5E5"> to change something</font><font color="#CCCCCC"> the you can</font>

490
00:30:55,539 --> 00:31:01,029
<font color="#E5E5E5">just dump</font><font color="#CCCCCC"> everything in search the</font>

491
00:30:57,460 --> 00:31:03,340
things you're interested in change<font color="#CCCCCC"> thing</font>

492
00:31:01,029 --> 00:31:09,460
<font color="#E5E5E5">and import it back with the second</font>

493
00:31:03,340 --> 00:31:13,809
<font color="#CCCCCC">script now let's let's finish this</font><font color="#E5E5E5"> it</font>

494
00:31:09,460 --> 00:31:21,010
will<font color="#E5E5E5"> not take too</font><font color="#CCCCCC"> long ok if you go to</font>

495
00:31:13,809 --> 00:31:24,520
<font color="#CCCCCC">day out resources</font><font color="#E5E5E5"> you can see here</font>

496
00:31:21,010 --> 00:31:29,740
there's a lot<font color="#E5E5E5"> lot of</font><font color="#CCCCCC"> things like</font><font color="#E5E5E5"> you</font>

497
00:31:24,520 --> 00:31:34,799
<font color="#CCCCCC">know resources</font><font color="#E5E5E5"> so what I did I did my</font>

498
00:31:29,740 --> 00:31:40,240
homework and created a modified resource

499
00:31:34,799 --> 00:31:42,460
dusting of my shitty art skills<font color="#E5E5E5"> and yeah</font>

500
00:31:40,240 --> 00:31:45,640
but it's a surprise

501
00:31:42,460 --> 00:31:53,020
<font color="#E5E5E5">don't show</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> and now I can</font><font color="#CCCCCC"> import my</font>

502
00:31:45,640 --> 00:32:01,630
modified resource using this the<font color="#CCCCCC"> gg</font>

503
00:31:53,020 --> 00:32:04,260
import script<font color="#CCCCCC"> just takes a file which is</font>

504
00:32:01,630 --> 00:32:10,300
I<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> remember the name actually</font><font color="#CCCCCC"> so</font>

505
00:32:04,260 --> 00:32:13,360
which is this so if the file<font color="#E5E5E5"> has the</font>

506
00:32:10,300 --> 00:32:16,659
<font color="#E5E5E5">same name</font><font color="#CCCCCC"> of a file which is found in</font>

507
00:32:13,360 --> 00:32:19,409
<font color="#E5E5E5">the in the GG</font><font color="#CCCCCC"> pack file it will replace</font>

508
00:32:16,660 --> 00:32:22,660
<font color="#CCCCCC">it so it taking</font><font color="#E5E5E5"> into account also</font>

509
00:32:19,410 --> 00:32:27,580
<font color="#E5E5E5">difference of size it does the insertion</font>

510
00:32:22,660 --> 00:32:30,580
deletion<font color="#E5E5E5"> writing so it's shifting up by</font>

511
00:32:27,580 --> 00:32:32,620
those bytes<font color="#E5E5E5"> that</font><font color="#CCCCCC"> that's because my</font>

512
00:32:30,580 --> 00:32:34,840
modified resource is slightly bigger

513
00:32:32,620 --> 00:32:37,840
<font color="#CCCCCC">than the original it will take some time</font>

514
00:32:34,840 --> 00:32:41,350
because it's rebuilding<font color="#E5E5E5"> the index and</font>

515
00:32:37,840 --> 00:32:45,090
shifting everything 500 megabytes<font color="#E5E5E5"> so</font><font color="#CCCCCC"> it</font>

516
00:32:41,350 --> 00:32:45,090
will take some few seconds

517
00:32:51,490 --> 00:33:00,460
yes<font color="#E5E5E5"> it's it's a key</font><font color="#CCCCCC"> it's used like these</font>

518
00:32:55,840 --> 00:33:07,840
<font color="#E5E5E5">also in the engine</font><font color="#CCCCCC"> so it's a it's a</font>

519
00:33:00,460 --> 00:33:12,130
proper dictionary so<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so we modified</font>

520
00:33:07,840 --> 00:33:14,050
the file we can just copy it<font color="#E5E5E5"> back in the</font>

521
00:33:12,130 --> 00:33:18,450
game<font color="#E5E5E5"> and if I</font><font color="#CCCCCC"> prayed the demo gods</font>

522
00:33:14,050 --> 00:33:23,169
enough we can see that

523
00:33:18,450 --> 00:33:29,130
<font color="#CCCCCC">let's try oh yeah I have to close the</font>

524
00:33:23,170 --> 00:33:37,470
<font color="#CCCCCC">game because it's spawned by Frieda</font><font color="#E5E5E5"> okay</font>

525
00:33:29,130 --> 00:33:45,060
<font color="#E5E5E5">we open</font><font color="#CCCCCC"> it now it's very fast the game</font>

526
00:33:37,470 --> 00:33:45,060
and<font color="#E5E5E5"> actually rather</font><font color="#CCCCCC"> con 1987</font>

527
00:33:54,040 --> 00:34:02,420
in theory<font color="#E5E5E5"> I could have also have changed</font>

528
00:33:57,950 --> 00:34:04,730
the subtitles<font color="#E5E5E5"> but I didn't do that</font>

529
00:34:02,420 --> 00:34:07,220
let's find pancake<font color="#E5E5E5"> no there's no funky</font>

530
00:34:04,730 --> 00:34:13,550
<font color="#E5E5E5">in 1987</font><font color="#CCCCCC"> oh</font><font color="#E5E5E5"> hey probably he's the kid</font>

531
00:34:07,220 --> 00:34:21,940
<font color="#E5E5E5">he's the</font><font color="#CCCCCC"> Batman kid</font><font color="#E5E5E5"> in the 1987 so okay</font>

532
00:34:13,550 --> 00:34:21,940
<font color="#E5E5E5">that's it please ask me two questions</font>

533
00:34:28,100 --> 00:34:41,060
[Applause]

534
00:34:30,730 --> 00:34:44,000
questions hi thanks<font color="#E5E5E5"> for</font><font color="#CCCCCC"> a really</font><font color="#E5E5E5"> cool</font>

535
00:34:41,060 --> 00:34:46,730
presentation<font color="#E5E5E5"> this is a question I did</font>

536
00:34:44,000 --> 00:34:48,409
also<font color="#E5E5E5"> yesterday sorry if it's a repeated</font>

537
00:34:46,730 --> 00:34:51,199
<font color="#E5E5E5">volume so a very cool use about this</font>

538
00:34:48,409 --> 00:34:53,270
<font color="#E5E5E5">this thing is how long did you</font><font color="#CCCCCC"> spend on</font>

539
00:34:51,199 --> 00:34:55,549
investigating<font color="#E5E5E5"> and getting this result</font>

540
00:34:53,270 --> 00:34:59,030
<font color="#E5E5E5">the equivalent of a couple of weekends</font>

541
00:34:55,550 --> 00:35:00,770
yeah<font color="#E5E5E5"> it's not hard I mean it's not I'm</font>

542
00:34:59,030 --> 00:35:03,920
not<font color="#E5E5E5"> dealing with malware I'm not dealing</font>

543
00:35:00,770 --> 00:35:05,900
with games by a big corporation<font color="#CCCCCC"> which</font>

544
00:35:03,920 --> 00:35:08,979
are indistinguishable from malware like

545
00:35:05,900 --> 00:35:08,979
[Music]

546
00:35:09,190 --> 00:35:22,560
<font color="#E5E5E5">okay thanks any other question Thanks</font>

547
00:35:21,620 --> 00:35:31,420
thank you

548
00:35:22,560 --> 00:35:31,420
[Applause]

