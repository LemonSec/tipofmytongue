1
00:00:03,259 --> 00:00:09,780
hello everyone my name is<font color="#CCCCCC"> Fedor</font><font color="#E5E5E5"> Sakura</font>

2
00:00:06,870 --> 00:00:14,849
<font color="#CCCCCC">and I'm here to talk</font><font color="#E5E5E5"> about the etherium</font>

3
00:00:09,780 --> 00:00:16,740
and<font color="#E5E5E5"> it's smart contracts</font><font color="#CCCCCC"> so the</font><font color="#E5E5E5"> agenda</font>

4
00:00:14,849 --> 00:00:20,250
<font color="#CCCCCC">of my talk</font><font color="#E5E5E5"> today</font><font color="#CCCCCC"> is the following</font>

5
00:00:16,740 --> 00:00:22,259
<font color="#CCCCCC">first</font><font color="#E5E5E5"> I'll talk a</font><font color="#CCCCCC"> bit about me</font><font color="#E5E5E5"> then a</font>

6
00:00:20,250 --> 00:00:25,470
bit about the theorem and how it works

7
00:00:22,260 --> 00:00:29,550
<font color="#E5E5E5">and then we'll jump to smart contracts</font>

8
00:00:25,470 --> 00:00:31,919
and their internals<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> I'll cover</font>

9
00:00:29,550 --> 00:00:34,950
a bit how I implemented<font color="#E5E5E5"> support in radar</font>

10
00:00:31,920 --> 00:00:38,610
<font color="#CCCCCC">e2 for aetherium reverse engineering</font><font color="#E5E5E5"> and</font>

11
00:00:34,950 --> 00:00:41,540
debugging<font color="#CCCCCC"> and then a bit about the</font>

12
00:00:38,610 --> 00:00:45,480
<font color="#E5E5E5">future work and what can</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> improved</font><font color="#CCCCCC"> so</font>

13
00:00:41,540 --> 00:00:47,219
about me<font color="#CCCCCC"> those</font><font color="#E5E5E5"> of you who develop radar</font>

14
00:00:45,480 --> 00:00:49,769
you probably know me by my github

15
00:00:47,219 --> 00:00:54,300
handles it's<font color="#CCCCCC"> fun techie</font><font color="#E5E5E5"> or man techie in</font>

16
00:00:49,770 --> 00:00:56,789
<font color="#CCCCCC">Leeds on Twitter I mostly write code in</font>

17
00:00:54,300 --> 00:00:59,239
C or<font color="#E5E5E5"> golang or whatever system</font>

18
00:00:56,789 --> 00:01:03,989
<font color="#E5E5E5">development stuff you may find it's</font>

19
00:00:59,239 --> 00:01:06,630
networking<font color="#CCCCCC"> exfill</font><font color="#E5E5E5"> Cabret meter reader</font><font color="#CCCCCC"> I</font>

20
00:01:03,989 --> 00:01:08,460
think like five<font color="#CCCCCC"> years ago</font><font color="#E5E5E5"> and mostly</font>

21
00:01:06,630 --> 00:01:11,610
I've been implementing new architectures

22
00:01:08,460 --> 00:01:13,250
embedded stuff some Hitachi processors

23
00:01:11,610 --> 00:01:15,509
stuff like that

24
00:01:13,250 --> 00:01:17,820
but I made a living working<font color="#E5E5E5"> in</font>

25
00:01:15,509 --> 00:01:21,659
information security<font color="#E5E5E5"> and since</font><font color="#CCCCCC"> recently</font>

26
00:01:17,820 --> 00:01:24,119
in crypto and it's not a surprise that

27
00:01:21,659 --> 00:01:31,770
now I'm<font color="#CCCCCC"> unemployed</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> I've declared</font>

28
00:01:24,119 --> 00:01:34,229
<font color="#CCCCCC">bankruptcy so now</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> etherium I don't</font>

29
00:01:31,770 --> 00:01:36,449
see you quite clearly<font color="#E5E5E5"> because the light</font>

30
00:01:34,229 --> 00:01:38,850
is so<font color="#CCCCCC"> sharp but I would really like if</font>

31
00:01:36,450 --> 00:01:42,869
those<font color="#CCCCCC"> of you who know what the theorem</font>

32
00:01:38,850 --> 00:01:46,889
is or those of you who have cash in<font color="#CCCCCC"> if</font>

33
00:01:42,869 --> 00:01:50,399
<font color="#CCCCCC">they're raise</font><font color="#E5E5E5"> your hands</font><font color="#CCCCCC"> please alright</font>

34
00:01:46,890 --> 00:01:58,820
good and<font color="#E5E5E5"> probably some of you know how</font>

35
00:01:50,399 --> 00:02:05,750
<font color="#E5E5E5">aetherium smart contracts work</font><font color="#CCCCCC"> okay nice</font>

36
00:01:58,820 --> 00:02:07,548
so what if he<font color="#CCCCCC"> really is</font><font color="#E5E5E5"> its definition</font>

37
00:02:05,750 --> 00:02:09,830
from the<font color="#CCCCCC"> Wikipedia is</font><font color="#E5E5E5"> a distributed</font>

38
00:02:07,549 --> 00:02:11,450
blockchain based computing platform<font color="#E5E5E5"> and</font>

39
00:02:09,830 --> 00:02:14,480
operating system featuring smart

40
00:02:11,450 --> 00:02:17,000
contract<font color="#E5E5E5"> functionality and it's</font>

41
00:02:14,480 --> 00:02:19,040
interesting<font color="#E5E5E5"> that most people perceive</font><font color="#CCCCCC"> a</font>

42
00:02:17,000 --> 00:02:20,959
<font color="#CCCCCC">theorem to be exactly</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> and yesterday</font>

43
00:02:19,040 --> 00:02:23,420
<font color="#E5E5E5">at the restaurant I've been</font><font color="#CCCCCC"> talking to X</font>

44
00:02:20,959 --> 00:02:27,440
Wilker and that's exactly what he<font color="#E5E5E5"> said</font>

45
00:02:23,420 --> 00:02:29,988
so but<font color="#E5E5E5"> in what actually a theorem is</font>

46
00:02:27,440 --> 00:02:33,079
well it's often referred<font color="#CCCCCC"> to as a</font>

47
00:02:29,989 --> 00:02:35,920
blockchain 2.0<font color="#E5E5E5"> or if you have ever</font>

48
00:02:33,079 --> 00:02:39,799
installed meta<font color="#CCCCCC"> masks</font><font color="#E5E5E5"> they call it web</font>

49
00:02:35,920 --> 00:02:43,089
3.0<font color="#E5E5E5"> all the hype but actually what it is</font>

50
00:02:39,799 --> 00:02:46,129
it's a lot<font color="#CCCCCC"> of peer-to-peer networking</font>

51
00:02:43,090 --> 00:02:48,980
that exchanges<font color="#E5E5E5"> transactions and events</font>

52
00:02:46,129 --> 00:02:52,250
on the<font color="#CCCCCC"> ethereal network and the turing</font>

53
00:02:48,980 --> 00:02:54,109
<font color="#CCCCCC">complete virtual</font><font color="#E5E5E5"> machine well both of</font>

54
00:02:52,250 --> 00:02:57,799
<font color="#CCCCCC">those parts</font><font color="#E5E5E5"> are really interesting</font><font color="#CCCCCC"> I</font>

55
00:02:54,110 --> 00:03:00,110
have researched<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> the VM so now now</font><font color="#E5E5E5"> I</font>

56
00:02:57,799 --> 00:03:01,700
<font color="#E5E5E5">am talking about that but now I'm</font>

57
00:03:00,110 --> 00:03:05,660
researching the peer-to-peer stuff<font color="#E5E5E5"> it's</font>

58
00:03:01,700 --> 00:03:08,810
also quite interesting<font color="#CCCCCC"> you can probably</font>

59
00:03:05,660 --> 00:03:11,180
take a look<font color="#E5E5E5"> and there's also some money</font>

60
00:03:08,810 --> 00:03:13,400
inside I<font color="#E5E5E5"> think the total</font><font color="#CCCCCC"> Micmac had kept</font>

61
00:03:11,180 --> 00:03:16,579
for<font color="#CCCCCC"> etherium right now is some thirty</font>

62
00:03:13,400 --> 00:03:19,000
billion<font color="#E5E5E5"> dollars something like that and</font>

63
00:03:16,579 --> 00:03:21,680
if you put<font color="#CCCCCC"> those</font><font color="#E5E5E5"> two things together</font>

64
00:03:19,000 --> 00:03:26,660
<font color="#CCCCCC">that makes</font><font color="#E5E5E5"> the research</font><font color="#CCCCCC"> of a theorem</font>

65
00:03:21,680 --> 00:03:30,470
quite interesting<font color="#CCCCCC"> there have</font><font color="#E5E5E5"> been a lot</font>

66
00:03:26,660 --> 00:03:32,150
of known hacks<font color="#E5E5E5"> in the etherium ecosystem</font>

67
00:03:30,470 --> 00:03:33,980
recently well the most known<font color="#CCCCCC"> and the</font>

68
00:03:32,150 --> 00:03:36,169
<font color="#CCCCCC">most recent hack is the</font><font color="#E5E5E5"> parity freeze</font>

69
00:03:33,980 --> 00:03:41,090
where<font color="#E5E5E5"> a logic error in the</font><font color="#CCCCCC"> multi-sig</font>

70
00:03:36,169 --> 00:03:43,549
wallet has led to four hundred million

71
00:03:41,090 --> 00:03:44,810
dollars<font color="#CCCCCC"> freezed on the fearing</font>

72
00:03:43,549 --> 00:03:48,380
blockchain<font color="#E5E5E5"> forever</font>

73
00:03:44,810 --> 00:03:51,200
well<font color="#CCCCCC"> multisig wallet is also a</font><font color="#E5E5E5"> smart</font>

74
00:03:48,380 --> 00:03:54,950
contract<font color="#E5E5E5"> so it's probably interesting</font>

75
00:03:51,200 --> 00:03:57,560
<font color="#E5E5E5">investigating that also</font>

76
00:03:54,950 --> 00:03:59,660
yeah the multi-sig also led to<font color="#E5E5E5"> thirty</font>

77
00:03:57,560 --> 00:04:05,879
<font color="#E5E5E5">three billion</font><font color="#CCCCCC"> thirty three million</font>

78
00:03:59,660 --> 00:04:08,410
dollars stolen<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> dare hack</font><font color="#E5E5E5"> which</font>

79
00:04:05,879 --> 00:04:10,720
led<font color="#CCCCCC"> to heart aetherium so you</font>

80
00:04:08,410 --> 00:04:13,870
know there are two<font color="#CCCCCC"> ethereal if you don't</font>

81
00:04:10,720 --> 00:04:18,880
classic and theorem that also led to

82
00:04:13,870 --> 00:04:21,340
<font color="#CCCCCC">seventy million dollars stolen</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so</font>

83
00:04:18,880 --> 00:04:26,080
what<font color="#CCCCCC"> are smart contracts and what how</font>

84
00:04:21,339 --> 00:04:28,630
does<font color="#CCCCCC"> their bytecode work smart contracts</font>

85
00:04:26,080 --> 00:04:31,960
are intended to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> a digitized version</font>

86
00:04:28,630 --> 00:04:34,600
of<font color="#CCCCCC"> real-world</font><font color="#E5E5E5"> contracts</font><font color="#CCCCCC"> they are</font>

87
00:04:31,960 --> 00:04:37,060
intended to simplify<font color="#CCCCCC"> your life whenever</font>

88
00:04:34,600 --> 00:04:41,440
you<font color="#E5E5E5"> are I don't know buying something or</font>

89
00:04:37,060 --> 00:04:45,220
doing complex legal<font color="#E5E5E5"> transactions like</font>

90
00:04:41,440 --> 00:04:49,990
<font color="#CCCCCC">probably buying a car</font><font color="#E5E5E5"> when you have to</font>

91
00:04:45,220 --> 00:04:52,750
go to multiple<font color="#E5E5E5"> government institutes to</font>

92
00:04:49,990 --> 00:04:55,660
<font color="#E5E5E5">register it and to pay your taxes and so</font>

93
00:04:52,750 --> 00:04:59,410
on<font color="#E5E5E5"> or you're probably</font><font color="#CCCCCC"> doing your job and</font>

94
00:04:55,660 --> 00:05:03,880
you<font color="#E5E5E5"> want your employer</font><font color="#CCCCCC"> to pay you in a</font>

95
00:04:59,410 --> 00:05:07,090
more<font color="#CCCCCC"> transparent way and a theorem uses</font>

96
00:05:03,880 --> 00:05:09,580
languages to describe the logic of those

97
00:05:07,090 --> 00:05:15,099
contracts and different languages exist

98
00:05:09,580 --> 00:05:18,010
<font color="#CCCCCC">and every one of them is translated to</font>

99
00:05:15,100 --> 00:05:23,440
<font color="#CCCCCC">etherium bytecode which runs</font><font color="#E5E5E5"> in the</font>

100
00:05:18,010 --> 00:05:24,880
<font color="#E5E5E5">virtual machine the runtime is the</font>

101
00:05:23,440 --> 00:05:27,099
<font color="#E5E5E5">etherion virtual machine and it's</font>

102
00:05:24,880 --> 00:05:28,840
specified<font color="#E5E5E5"> in the yellow paper by a</font>

103
00:05:27,099 --> 00:05:31,810
<font color="#CCCCCC">Vitalik</font><font color="#E5E5E5"> pattern which is</font><font color="#CCCCCC"> the official</font>

104
00:05:28,840 --> 00:05:33,909
<font color="#CCCCCC">specification of a theorem its internals</font>

105
00:05:31,810 --> 00:05:36,280
<font color="#E5E5E5">its protocols the way it works the</font><font color="#CCCCCC"> way</font>

106
00:05:33,910 --> 00:05:38,830
the<font color="#E5E5E5"> mining is happening and so on and so</font>

107
00:05:36,280 --> 00:05:43,299
forth well actually it's a<font color="#CCCCCC"> stack-based</font>

108
00:05:38,830 --> 00:05:46,570
<font color="#E5E5E5">machine</font><font color="#CCCCCC"> probably it's very similar to</font>

109
00:05:43,300 --> 00:05:51,539
<font color="#E5E5E5">Java in a way when I implemented the</font>

110
00:05:46,570 --> 00:05:55,360
radar support for<font color="#CCCCCC"> aetherium I took a lot</font>

111
00:05:51,539 --> 00:05:57,520
from the code of Java<font color="#CCCCCC"> I think because</font>

112
00:05:55,360 --> 00:06:02,860
they're similar<font color="#E5E5E5"> Indian</font><font color="#CCCCCC"> tech based</font>

113
00:05:57,520 --> 00:06:07,150
<font color="#E5E5E5">machines</font><font color="#CCCCCC"> the code is always run as</font>

114
00:06:02,860 --> 00:06:10,000
intended so multiple - and anyone<font color="#E5E5E5"> on the</font>

115
00:06:07,150 --> 00:06:11,888
<font color="#CCCCCC">network can rerun</font><font color="#E5E5E5"> any transaction that</font>

116
00:06:10,000 --> 00:06:16,030
<font color="#E5E5E5">has happened before or is submitted to</font>

117
00:06:11,889 --> 00:06:17,139
<font color="#CCCCCC">the network</font><font color="#E5E5E5"> to verify it so we always</font>

118
00:06:16,030 --> 00:06:20,318
know

119
00:06:17,139 --> 00:06:22,979
the desired output<font color="#E5E5E5"> if the</font><font color="#CCCCCC"> virtual</font>

120
00:06:20,319 --> 00:06:26,889
machine sticks to the specification<font color="#CCCCCC"> and</font>

121
00:06:22,979 --> 00:06:29,258
<font color="#CCCCCC">the code will always terminate that's an</font>

122
00:06:26,889 --> 00:06:32,319
important<font color="#CCCCCC"> thing because</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> lot of people</font>

123
00:06:29,259 --> 00:06:34,840
<font color="#E5E5E5">say that blockchain 2.0 differs from</font>

124
00:06:32,319 --> 00:06:37,030
blockchain 1.0 because a theorem and

125
00:06:34,840 --> 00:06:39,340
blockchain<font color="#E5E5E5"> is like it have during</font>

126
00:06:37,030 --> 00:06:43,359
complete smart contracts<font color="#E5E5E5"> well two</font>

127
00:06:39,340 --> 00:06:46,179
incompleteness<font color="#E5E5E5"> is not a bit</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> because in</font>

128
00:06:43,360 --> 00:06:49,090
any<font color="#E5E5E5"> way you cannot run an infinite loop</font>

129
00:06:46,180 --> 00:06:50,949
that will never terminate<font color="#E5E5E5"> each execution</font>

130
00:06:49,090 --> 00:06:54,280
of<font color="#CCCCCC"> if you're in transactions terminates</font>

131
00:06:50,949 --> 00:06:59,409
in<font color="#E5E5E5"> some time now let's take a look at</font>

132
00:06:54,280 --> 00:07:02,289
the example solidity<font color="#CCCCCC"> is one of the most</font>

133
00:06:59,409 --> 00:07:05,979
widely<font color="#CCCCCC"> used languages</font><font color="#E5E5E5"> for creating smart</font>

134
00:07:02,289 --> 00:07:11,259
contracts<font color="#CCCCCC"> it's basically a</font><font color="#E5E5E5"> JavaScript</font>

135
00:07:05,979 --> 00:07:14,860
like language<font color="#CCCCCC"> it differs from JavaScript</font>

136
00:07:11,259 --> 00:07:19,029
<font color="#E5E5E5">in a way that it has types and some</font>

137
00:07:14,860 --> 00:07:21,610
<font color="#E5E5E5">theorem specific keywords but basically</font>

138
00:07:19,029 --> 00:07:24,909
it's the<font color="#E5E5E5"> code like this which has some</font>

139
00:07:21,610 --> 00:07:26,800
functions which<font color="#E5E5E5"> are called bio</font>

140
00:07:24,909 --> 00:07:31,210
transactions it has no<font color="#CCCCCC"> single entry</font>

141
00:07:26,800 --> 00:07:33,659
<font color="#CCCCCC">point and it's compiled</font><font color="#E5E5E5"> and it's stored</font>

142
00:07:31,210 --> 00:07:37,919
in the blockchain which<font color="#CCCCCC"> is a global</font>

143
00:07:33,659 --> 00:07:41,620
distributed database available<font color="#E5E5E5"> to anyone</font>

144
00:07:37,919 --> 00:07:46,628
so here is an example<font color="#E5E5E5"> about how their</font>

145
00:07:41,620 --> 00:07:50,889
ABI<font color="#E5E5E5"> of the compiled contract works we</font>

146
00:07:46,629 --> 00:07:54,789
can<font color="#E5E5E5"> ask the solidity compiler to output</font>

147
00:07:50,889 --> 00:07:57,789
the ABI<font color="#CCCCCC"> for our contract for us</font><font color="#E5E5E5"> so it's</font>

148
00:07:54,789 --> 00:08:00,878
<font color="#CCCCCC">actually a JSON file where each method</font>

149
00:07:57,789 --> 00:08:06,120
<font color="#E5E5E5">in the contract is described with its</font>

150
00:08:00,879 --> 00:08:08,919
parameters and its outputs<font color="#E5E5E5"> its name and</font>

151
00:08:06,120 --> 00:08:10,930
different different<font color="#E5E5E5"> properties which are</font>

152
00:08:08,919 --> 00:08:14,080
<font color="#CCCCCC">aetherium specific like</font><font color="#E5E5E5"> whether it is</font>

153
00:08:10,930 --> 00:08:15,879
<font color="#CCCCCC">payable or</font><font color="#E5E5E5"> it is it doesn't mutate the</font>

154
00:08:14,080 --> 00:08:18,460
state of the contract<font color="#E5E5E5"> or if it's</font>

155
00:08:15,879 --> 00:08:24,279
constant<font color="#CCCCCC"> if it's a function or anything</font>

156
00:08:18,460 --> 00:08:27,609
else<font color="#E5E5E5"> and</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> and the contract itself</font>

157
00:08:24,279 --> 00:08:30,459
is compiled<font color="#E5E5E5"> to bytecode</font><font color="#CCCCCC"> also by the</font>

158
00:08:27,610 --> 00:08:30,790
solidity compiler<font color="#CCCCCC"> and basically what it</font>

159
00:08:30,459 --> 00:08:36,280
<font color="#E5E5E5">is</font>

160
00:08:30,790 --> 00:08:37,930
it's string<font color="#CCCCCC"> al hex encoded bytecode well</font>

161
00:08:36,280 --> 00:08:42,150
that looks<font color="#E5E5E5"> like that if you compile</font><font color="#CCCCCC"> it</font>

162
00:08:37,929 --> 00:08:42,150
<font color="#E5E5E5">by the compiler is just</font><font color="#CCCCCC"> the hex string</font>

163
00:08:43,380 --> 00:08:48,490
and its execution<font color="#E5E5E5"> will always start</font><font color="#CCCCCC"> from</font>

164
00:08:46,450 --> 00:08:53,040
<font color="#E5E5E5">the first byte and as</font><font color="#CCCCCC"> EV has</font><font color="#E5E5E5"> already</font>

165
00:08:48,490 --> 00:08:55,780
<font color="#CCCCCC">pointed out when the transaction is cold</font>

166
00:08:53,040 --> 00:09:05,949
<font color="#E5E5E5">it has some input parameters which are</font>

167
00:08:55,780 --> 00:09:09,900
encoded<font color="#CCCCCC"> accordingly to the</font><font color="#E5E5E5"> ABI</font><font color="#CCCCCC"> the most</font>

168
00:09:05,950 --> 00:09:13,120
<font color="#E5E5E5">widely used ID for solidity contract is</font>

169
00:09:09,900 --> 00:09:17,350
the<font color="#CCCCCC"> remick's by the theorem foundation</font>

170
00:09:13,120 --> 00:09:20,080
it<font color="#E5E5E5"> has it's a web-based development</font>

171
00:09:17,350 --> 00:09:21,730
<font color="#E5E5E5">environment that has all the things you</font>

172
00:09:20,080 --> 00:09:24,580
need it has the editor compiler and

173
00:09:21,730 --> 00:09:27,700
debugger<font color="#CCCCCC"> and</font><font color="#E5E5E5"> even the embedded VM to run</font>

174
00:09:24,580 --> 00:09:30,160
your code and test it<font color="#CCCCCC"> I'm talking about</font>

175
00:09:27,700 --> 00:09:32,410
this<font color="#CCCCCC"> because I want to kind of walk</font>

176
00:09:30,160 --> 00:09:35,230
<font color="#CCCCCC">through contract with creation to</font>

177
00:09:32,410 --> 00:09:36,100
bytecode<font color="#E5E5E5"> and then from byte</font><font color="#CCCCCC"> code to</font>

178
00:09:35,230 --> 00:09:38,350
reversing it

179
00:09:36,100 --> 00:09:40,450
so you just understand what's going<font color="#CCCCCC"> on</font>

180
00:09:38,350 --> 00:09:42,700
<font color="#E5E5E5">so here's our contract</font><font color="#CCCCCC"> that would it</font>

181
00:09:40,450 --> 00:09:48,430
would<font color="#E5E5E5"> how it would look</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> on the</font>

182
00:09:42,700 --> 00:09:51,180
<font color="#E5E5E5">theorem</font><font color="#CCCCCC"> remick's</font><font color="#E5E5E5"> debugging</font><font color="#CCCCCC"> and ID so</font>

183
00:09:48,430 --> 00:09:53,560
when you deploy<font color="#CCCCCC"> it in the etherium</font>

184
00:09:51,180 --> 00:09:57,939
<font color="#CCCCCC">remyxx it will look like</font><font color="#E5E5E5"> that you can</font>

185
00:09:53,560 --> 00:10:00,280
<font color="#E5E5E5">use</font><font color="#CCCCCC"> different VMs</font><font color="#E5E5E5"> for testing you</font><font color="#CCCCCC"> can</font>

186
00:09:57,940 --> 00:10:03,670
connect to<font color="#E5E5E5"> the node on</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> main network</font>

187
00:10:00,280 --> 00:10:06,010
you can use<font color="#CCCCCC"> the embedded javascript</font><font color="#E5E5E5"> vm</font>

188
00:10:03,670 --> 00:10:08,020
but as soon as you deploy the contract

189
00:10:06,010 --> 00:10:11,200
<font color="#E5E5E5">as you may see there is a list of</font>

190
00:10:08,020 --> 00:10:13,600
<font color="#CCCCCC">methods you can use</font><font color="#E5E5E5"> to send transactions</font>

191
00:10:11,200 --> 00:10:16,060
to it so down<font color="#E5E5E5"> at the bottom of the</font>

192
00:10:13,600 --> 00:10:22,450
screen there's the<font color="#E5E5E5"> set a method which</font>

193
00:10:16,060 --> 00:10:25,119
takes you<font color="#CCCCCC"> into 2356 operant one so</font>

194
00:10:22,450 --> 00:10:30,010
you'll be<font color="#E5E5E5"> calling that</font><font color="#CCCCCC"> if you want to</font>

195
00:10:25,120 --> 00:10:31,900
<font color="#E5E5E5">test your contract and</font><font color="#CCCCCC"> it also has when</font>

196
00:10:30,010 --> 00:10:34,990
the when the<font color="#E5E5E5"> transaction is sent it has</font>

197
00:10:31,900 --> 00:10:39,990
a lot of<font color="#E5E5E5"> stuff in it it</font><font color="#CCCCCC"> has the</font><font color="#E5E5E5"> hashes</font>

198
00:10:34,990 --> 00:10:42,850
it has the<font color="#E5E5E5"> input data and it has</font>

199
00:10:39,990 --> 00:10:44,050
different parameters how much<font color="#E5E5E5"> guess was</font>

200
00:10:42,850 --> 00:10:47,200
spent when distance'

201
00:10:44,050 --> 00:10:49,779
was executed<font color="#E5E5E5"> but we are particularly</font>

202
00:10:47,200 --> 00:10:52,390
interested<font color="#E5E5E5"> when reversing and debugging</font>

203
00:10:49,779 --> 00:10:57,450
<font color="#CCCCCC">aetherium</font><font color="#E5E5E5"> contracts on</font><font color="#CCCCCC"> the input field</font>

204
00:10:52,390 --> 00:11:01,959
<font color="#E5E5E5">that's cropped here</font><font color="#CCCCCC"> I don't know why but</font>

205
00:10:57,450 --> 00:11:05,800
as you see it's some hash like value so

206
00:11:01,959 --> 00:11:09,430
if we go to debugging we can see<font color="#CCCCCC"> it</font>

207
00:11:05,800 --> 00:11:11,500
unfolded<font color="#E5E5E5"> what that is</font><font color="#CCCCCC"> is some string</font>

208
00:11:09,430 --> 00:11:14,140
<font color="#E5E5E5">with hash like</font><font color="#CCCCCC"> four bytes in the</font>

209
00:11:11,500 --> 00:11:18,060
beginning and if we call our set a

210
00:11:14,140 --> 00:11:20,680
method with an argument<font color="#E5E5E5"> of 42 42 will be</font>

211
00:11:18,060 --> 00:11:23,140
encoded in<font color="#E5E5E5"> the end of the string that's</font>

212
00:11:20,680 --> 00:11:25,719
actually how<font color="#CCCCCC"> there are whole ABI</font>

213
00:11:23,140 --> 00:11:35,040
<font color="#E5E5E5">encoding for calling smart contracts</font>

214
00:11:25,720 --> 00:11:38,529
methods work works now<font color="#CCCCCC"> to the byte code</font>

215
00:11:35,040 --> 00:11:41,890
theorem as I've said it's<font color="#CCCCCC"> stack based</font>

216
00:11:38,529 --> 00:11:46,120
machine<font color="#CCCCCC"> it's I</font><font color="#E5E5E5"> think for</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> even</font>

217
00:11:41,890 --> 00:11:50,430
because the memory and the stack and the

218
00:11:46,120 --> 00:11:54,459
storage<font color="#CCCCCC"> separated</font><font color="#E5E5E5"> from the code memory</font>

219
00:11:50,430 --> 00:11:56,680
<font color="#CCCCCC">and during runtime data is stored</font><font color="#E5E5E5"> in</font>

220
00:11:54,459 --> 00:11:59,560
memory<font color="#CCCCCC"> or</font><font color="#E5E5E5"> in the stack and the permanent</font>

221
00:11:56,680 --> 00:12:03,010
storage which<font color="#CCCCCC"> lives on</font><font color="#E5E5E5"> blockchain</font><font color="#CCCCCC"> and</font>

222
00:11:59,560 --> 00:12:05,500
survives<font color="#CCCCCC"> through different executions of</font>

223
00:12:03,010 --> 00:12:08,230
<font color="#CCCCCC">the smart contracts method</font><font color="#E5E5E5"> well it's</font><font color="#CCCCCC"> in</font>

224
00:12:05,500 --> 00:12:10,839
the storage so here's a simple<font color="#CCCCCC"> example</font>

225
00:12:08,230 --> 00:12:15,820
of how<font color="#CCCCCC"> a stack-based</font><font color="#E5E5E5"> machine works</font><font color="#CCCCCC"> you</font>

226
00:12:10,839 --> 00:12:17,140
probably all know how that<font color="#CCCCCC"> goes now the</font>

227
00:12:15,820 --> 00:12:22,000
flow control<font color="#CCCCCC"> is done</font><font color="#E5E5E5"> pretty</font>

228
00:12:17,140 --> 00:12:23,890
conventionally is well all the jumps and

229
00:12:22,000 --> 00:12:27,310
<font color="#E5E5E5">all the calls inside the smart contract</font>

230
00:12:23,890 --> 00:12:30,480
<font color="#CCCCCC">code down</font><font color="#E5E5E5"> with the jump instructions</font>

231
00:12:27,310 --> 00:12:34,180
because call instructions they from

232
00:12:30,480 --> 00:12:36,610
<font color="#E5E5E5">quite a different task in the theorem</font>

233
00:12:34,180 --> 00:12:37,109
<font color="#E5E5E5">and all the beginnings of the basic</font>

234
00:12:36,610 --> 00:12:39,430
blocks

235
00:12:37,110 --> 00:12:43,240
<font color="#CCCCCC">begin with</font><font color="#E5E5E5"> the jump test instruction</font>

236
00:12:39,430 --> 00:12:47,949
that's basically nope which marks the

237
00:12:43,240 --> 00:12:51,720
valid beginning of basic block so I

238
00:12:47,949 --> 00:12:55,540
<font color="#CCCCCC">presume it's some kind of control</font><font color="#E5E5E5"> flow</font>

239
00:12:51,720 --> 00:12:57,430
graph integrity thing<font color="#E5E5E5"> so if the virtual</font>

240
00:12:55,540 --> 00:13:00,819
machine sees that the jump

241
00:12:57,430 --> 00:13:02,920
to some point<font color="#E5E5E5"> where is no jump</font><font color="#CCCCCC"> Destin</font>

242
00:13:00,820 --> 00:13:06,330
struction that's the violation<font color="#E5E5E5"> so it I</font>

243
00:13:02,920 --> 00:13:09,130
think<font color="#E5E5E5"> that will terminate the execution</font>

244
00:13:06,330 --> 00:13:13,180
<font color="#E5E5E5">so as you see here's an example</font><font color="#CCCCCC"> blah</font>

245
00:13:09,130 --> 00:13:15,640
<font color="#CCCCCC">blah blah and</font><font color="#E5E5E5"> at some point we push the</font>

246
00:13:13,180 --> 00:13:19,750
address we want to<font color="#E5E5E5"> jump</font><font color="#CCCCCC"> to and jump to</font>

247
00:13:15,640 --> 00:13:21,670
it<font color="#CCCCCC"> and at</font><font color="#E5E5E5"> the address 0 X</font><font color="#CCCCCC"> 2 it's</font><font color="#E5E5E5"> the</font>

248
00:13:19,750 --> 00:13:26,200
jump jump test<font color="#CCCCCC"> instructions so here's</font>

249
00:13:21,670 --> 00:13:28,180
our loop<font color="#E5E5E5"> will be going on</font><font color="#CCCCCC"> so there</font><font color="#E5E5E5"> are</font>

250
00:13:26,200 --> 00:13:29,740
two types<font color="#E5E5E5"> instructions the normal</font>

251
00:13:28,180 --> 00:13:32,160
instructions you always find in a

252
00:13:29,740 --> 00:13:36,520
<font color="#CCCCCC">stack-based machine which do arithmetics</font>

253
00:13:32,160 --> 00:13:38,829
control for whatever<font color="#CCCCCC"> and there are also</font>

254
00:13:36,520 --> 00:13:42,670
a<font color="#CCCCCC"> different specific</font><font color="#E5E5E5"> instructions which</font>

255
00:13:38,830 --> 00:13:44,980
are load your data<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> transaction</font>

256
00:13:42,670 --> 00:13:48,550
inputs into<font color="#CCCCCC"> the virtual</font><font color="#E5E5E5"> machine address</font>

257
00:13:44,980 --> 00:13:52,150
space which call other transactions<font color="#E5E5E5"> for</font>

258
00:13:48,550 --> 00:13:54,400
example :<font color="#CCCCCC"> cocoa delegate</font><font color="#E5E5E5"> call they</font>

259
00:13:52,150 --> 00:13:58,270
actually will be performing calls to

260
00:13:54,400 --> 00:14:00,910
other contracts on the<font color="#E5E5E5"> chain</font><font color="#CCCCCC"> the revert</font>

261
00:13:58,270 --> 00:14:05,680
will terminate your execution and return

262
00:14:00,910 --> 00:14:07,390
the funds to<font color="#CCCCCC"> you</font><font color="#E5E5E5"> in case of in case of a</font>

263
00:14:05,680 --> 00:14:13,089
failure

264
00:14:07,390 --> 00:14:16,750
the suicide will drop<font color="#E5E5E5"> your contract and</font>

265
00:14:13,090 --> 00:14:18,940
kill it<font color="#CCCCCC"> from the web</font><font color="#E5E5E5"> and that's one</font><font color="#CCCCCC"> of</font>

266
00:14:16,750 --> 00:14:21,010
the instructions that<font color="#E5E5E5"> rise serious</font>

267
00:14:18,940 --> 00:14:28,690
security concerns<font color="#E5E5E5"> I</font><font color="#CCCCCC"> think it has been</font>

268
00:14:21,010 --> 00:14:31,870
<font color="#E5E5E5">used to freeze the 44</font><font color="#CCCCCC"> 400</font><font color="#E5E5E5"> million</font>

269
00:14:28,690 --> 00:14:35,230
dollars<font color="#E5E5E5"> in the recent parity attack when</font>

270
00:14:31,870 --> 00:14:38,320
<font color="#CCCCCC">the sum of the contract was suicided and</font>

271
00:14:35,230 --> 00:14:38,320
[Music]

272
00:14:38,670 --> 00:14:44,410
now let's<font color="#CCCCCC"> look at take a look at how it</font>

273
00:14:41,350 --> 00:14:45,850
looks<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the read Aria the code always</font>

274
00:14:44,410 --> 00:14:49,689
starts from<font color="#E5E5E5"> the very</font><font color="#CCCCCC"> beginning from the</font>

275
00:14:45,850 --> 00:14:51,360
<font color="#E5E5E5">zero byte</font><font color="#CCCCCC"> the first instructions the</font>

276
00:14:49,690 --> 00:14:53,800
they<font color="#CCCCCC"> are the preamble which is</font>

277
00:14:51,360 --> 00:14:56,740
relatively<font color="#CCCCCC"> the same for any smart</font>

278
00:14:53,800 --> 00:14:59,530
contract well it's what it<font color="#CCCCCC"> does it loads</font>

279
00:14:56,740 --> 00:15:02,910
the<font color="#CCCCCC"> data from</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> input into the memory</font>

280
00:14:59,530 --> 00:15:08,370
<font color="#E5E5E5">of the virtual machine and it does some</font>

281
00:15:02,910 --> 00:15:10,930
initialization<font color="#CCCCCC"> well the first</font>

282
00:15:08,370 --> 00:15:18,070
instructions they initialize the

283
00:15:10,930 --> 00:15:22,239
<font color="#E5E5E5">Marie and store initializes it and call</font>

284
00:15:18,070 --> 00:15:24,610
<font color="#E5E5E5">that data size returns the length of the</font>

285
00:15:22,240 --> 00:15:29,310
<font color="#CCCCCC">input data</font><font color="#E5E5E5"> we have been called with and</font>

286
00:15:24,610 --> 00:15:35,589
as you see if it<font color="#E5E5E5"> is less than</font><font color="#CCCCCC"> four</font><font color="#E5E5E5"> we</font>

287
00:15:29,310 --> 00:15:37,810
jump some location yet unknown<font color="#CCCCCC"> but if</font>

288
00:15:35,589 --> 00:15:42,070
the input is longer than four then we

289
00:15:37,810 --> 00:15:45,099
continue our<font color="#E5E5E5"> execution now as I've said</font>

290
00:15:42,070 --> 00:15:48,730
<font color="#E5E5E5">this code will load</font><font color="#CCCCCC"> their data</font><font color="#E5E5E5"> into the</font>

291
00:15:45,100 --> 00:15:50,830
memory<font color="#E5E5E5"> and now the interesting part is</font>

292
00:15:48,730 --> 00:15:57,360
what happens next<font color="#E5E5E5"> we take our input</font>

293
00:15:50,830 --> 00:15:58,600
string and we end it with the mask<font color="#CCCCCC"> 0x</font>

294
00:15:57,360 --> 00:16:01,870
<font color="#E5E5E5">ffffff</font>

295
00:15:58,600 --> 00:16:05,470
and if you remember<font color="#E5E5E5"> how the input looked</font>

296
00:16:01,870 --> 00:16:10,060
in the<font color="#CCCCCC"> remick's debugger</font><font color="#E5E5E5"> the first four</font>

297
00:16:05,470 --> 00:16:13,330
bytes are some hash function<font color="#CCCCCC"> so what the</font>

298
00:16:10,060 --> 00:16:17,949
code does is takes that<font color="#E5E5E5"> 4 bytes hash</font>

299
00:16:13,330 --> 00:16:20,110
<font color="#E5E5E5">from the first from the</font><font color="#CCCCCC"> input data now</font>

300
00:16:17,950 --> 00:16:23,920
<font color="#E5E5E5">that hash is a signature of the</font><font color="#CCCCCC"> method</font>

301
00:16:20,110 --> 00:16:27,100
we are<font color="#CCCCCC"> calling and actually that</font><font color="#E5E5E5"> 4 bytes</font>

302
00:16:23,920 --> 00:16:29,829
<font color="#E5E5E5">the first</font><font color="#CCCCCC"> 4 bytes of there I don't know</font>

303
00:16:27,100 --> 00:16:34,330
how to<font color="#E5E5E5"> pronounce this hash function get</font>

304
00:16:29,830 --> 00:16:37,480
get sick but whatever<font color="#CCCCCC"> if you know</font><font color="#E5E5E5"> just</font>

305
00:16:34,330 --> 00:16:41,230
tell me of their function signature<font color="#E5E5E5"> so</font>

306
00:16:37,480 --> 00:16:47,339
if you compute this hash of the set a

307
00:16:41,230 --> 00:16:50,589
with one<font color="#E5E5E5"> parameter</font><font color="#CCCCCC"> unsigned int 2056</font><font color="#E5E5E5"> and</font>

308
00:16:47,339 --> 00:16:53,200
take the<font color="#CCCCCC"> 4 bytes you will see that it</font>

309
00:16:50,589 --> 00:16:56,829
<font color="#E5E5E5">equals those bytes we are comparing the</font>

310
00:16:53,200 --> 00:16:59,440
<font color="#CCCCCC">first four bytes</font><font color="#E5E5E5"> of our inputs in the</font>

311
00:16:56,829 --> 00:17:02,829
code<font color="#CCCCCC"> of the smart contracts and well if</font>

312
00:16:59,440 --> 00:17:09,069
it is<font color="#E5E5E5"> equal to</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> we want we continue</font>

313
00:17:02,829 --> 00:17:11,709
our execution<font color="#E5E5E5"> as intended but if not the</font>

314
00:17:09,069 --> 00:17:15,819
if our contract has been<font color="#E5E5E5"> called with</font>

315
00:17:11,709 --> 00:17:20,280
<font color="#CCCCCC">some rubbish data or some hash that</font><font color="#E5E5E5"> it</font>

316
00:17:15,819 --> 00:17:20,280
doesn't know<font color="#CCCCCC"> if</font><font color="#E5E5E5"> the execution terminates</font>

317
00:17:21,670 --> 00:17:27,490
there are also some other checks<font color="#E5E5E5"> done</font>

318
00:17:24,959 --> 00:17:29,920
<font color="#E5E5E5">before we start actually executing our</font>

319
00:17:27,490 --> 00:17:32,530
method in the smart contract<font color="#CCCCCC"> they will</font>

320
00:17:29,920 --> 00:17:37,030
be better seen on the next slides where

321
00:17:32,530 --> 00:17:40,120
there's a CFG output from radar<font color="#E5E5E5"> but at</font>

322
00:17:37,030 --> 00:17:44,800
some point<font color="#E5E5E5"> we arrive in the smart</font>

323
00:17:40,120 --> 00:17:48,489
contract<font color="#E5E5E5"> methods that actually adds 42</font>

324
00:17:44,800 --> 00:17:50,980
<font color="#E5E5E5">to the input parameter and stores it</font>

325
00:17:48,490 --> 00:17:52,930
<font color="#E5E5E5">into the permanent storage so as you may</font>

326
00:17:50,980 --> 00:17:55,780
see is<font color="#E5E5E5"> quite clear from the code that</font>

327
00:17:52,930 --> 00:17:59,170
<font color="#E5E5E5">that's exactly what happens</font><font color="#CCCCCC"> and in the</font>

328
00:17:55,780 --> 00:18:02,050
end the result is stored with<font color="#E5E5E5"> a store</font>

329
00:17:59,170 --> 00:18:07,630
instruction<font color="#E5E5E5"> to the smart contract</font>

330
00:18:02,050 --> 00:18:10,178
storage now<font color="#CCCCCC"> the</font><font color="#E5E5E5"> theorem yellow paper is</font>

331
00:18:07,630 --> 00:18:14,800
quite<font color="#E5E5E5"> different</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> regular</font><font color="#E5E5E5"> data</font>

332
00:18:10,179 --> 00:18:18,220
<font color="#CCCCCC">sheet on any controller you may find or</font>

333
00:18:14,800 --> 00:18:21,669
any processor arm whatever<font color="#E5E5E5"> when you</font>

334
00:18:18,220 --> 00:18:23,350
implement<font color="#CCCCCC"> its disassemble</font><font color="#E5E5E5"> or assembler</font>

335
00:18:21,670 --> 00:18:26,590
<font color="#E5E5E5">or try to figure out what's going</font><font color="#CCCCCC"> on</font>

336
00:18:23,350 --> 00:18:28,540
<font color="#E5E5E5">you'll be</font><font color="#CCCCCC"> dealing with some</font><font color="#E5E5E5"> information</font>

337
00:18:26,590 --> 00:18:33,939
which looks like<font color="#E5E5E5"> this it has</font><font color="#CCCCCC"> a lot of</font>

338
00:18:28,540 --> 00:18:40,960
<font color="#CCCCCC">math</font><font color="#E5E5E5"> in it unlike your normal data</font>

339
00:18:33,940 --> 00:18:43,540
sheets now<font color="#E5E5E5"> how I implemented their</font>

340
00:18:40,960 --> 00:18:50,170
support for reversing<font color="#E5E5E5"> these smart</font>

341
00:18:43,540 --> 00:18:53,470
contracts in<font color="#CCCCCC"> vidura well the</font><font color="#E5E5E5"> disassembly</font>

342
00:18:50,170 --> 00:18:59,350
<font color="#E5E5E5">plug-in is quite straightforward</font><font color="#CCCCCC"> the</font>

343
00:18:53,470 --> 00:19:02,230
<font color="#CCCCCC">opcodes just one byte instructions that</font>

344
00:18:59,350 --> 00:19:05,469
<font color="#E5E5E5">rarely take some arguments because the</font>

345
00:19:02,230 --> 00:19:08,860
machine<font color="#E5E5E5"> is</font><font color="#CCCCCC"> steak</font><font color="#E5E5E5"> based actually there</font>

346
00:19:05,470 --> 00:19:10,540
has been some work<font color="#E5E5E5"> done before</font><font color="#CCCCCC"> me on</font>

347
00:19:08,860 --> 00:19:13,479
those plugins

348
00:19:10,540 --> 00:19:16,690
I<font color="#CCCCCC"> guess implemented by a pancake</font><font color="#E5E5E5"> but I</font>

349
00:19:13,480 --> 00:19:21,820
<font color="#E5E5E5">just fixed the stuff in there</font><font color="#CCCCCC"> so it</font>

350
00:19:16,690 --> 00:19:23,470
disassembles<font color="#E5E5E5"> contracts correctly</font><font color="#CCCCCC"> so it's</font>

351
00:19:21,820 --> 00:19:24,820
<font color="#CCCCCC">just you fell off all the old</font><font color="#E5E5E5"> paper and</font>

352
00:19:23,470 --> 00:19:28,690
try to understand things going<font color="#CCCCCC"> over</font>

353
00:19:24,820 --> 00:19:30,700
<font color="#E5E5E5">there and you'll be good to go so the</font>

354
00:19:28,690 --> 00:19:31,960
analysis<font color="#E5E5E5"> plug-in is quite a bit tricky</font>

355
00:19:30,700 --> 00:19:34,560
because<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> dealing</font><font color="#CCCCCC"> with a stack based</font>

356
00:19:31,960 --> 00:19:38,500
machine so

357
00:19:34,560 --> 00:19:40,870
all jumps and all the<font color="#E5E5E5"> operands are taken</font>

358
00:19:38,500 --> 00:19:43,720
from the stack<font color="#CCCCCC"> so</font><font color="#E5E5E5"> we have to somehow</font>

359
00:19:40,870 --> 00:19:48,820
cleverly compute them to know the

360
00:19:43,720 --> 00:19:51,130
destination<font color="#E5E5E5"> addresses but quite often in</font>

361
00:19:48,820 --> 00:19:53,200
<font color="#CCCCCC">the theory embed code</font><font color="#E5E5E5"> the push</font>

362
00:19:51,130 --> 00:19:55,420
instructions precede the jump

363
00:19:53,200 --> 00:19:58,150
instructions so<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> just take the</font>

364
00:19:55,420 --> 00:20:01,990
operand from them and say<font color="#E5E5E5"> that's your</font>

365
00:19:58,150 --> 00:20:04,870
destination address<font color="#CCCCCC"> it's it</font><font color="#E5E5E5"> doesn't work</font>

366
00:20:01,990 --> 00:20:08,470
in<font color="#E5E5E5"> every</font><font color="#CCCCCC"> case</font><font color="#E5E5E5"> because as we will see</font>

367
00:20:04,870 --> 00:20:13,449
<font color="#E5E5E5">further there</font><font color="#CCCCCC"> are examples where</font><font color="#E5E5E5"> that's</font>

368
00:20:08,470 --> 00:20:20,290
<font color="#E5E5E5">not true</font><font color="#CCCCCC"> but for I</font><font color="#E5E5E5"> think 80%</font><font color="#CCCCCC"> of calls</font>

369
00:20:13,450 --> 00:20:24,400
and jumps that's that's true now how

370
00:20:20,290 --> 00:20:24,760
it's worked as<font color="#E5E5E5"> I implemented it in</font><font color="#CCCCCC"> radar</font>

371
00:20:24,400 --> 00:20:27,550
<font color="#CCCCCC">eeeh</font>

372
00:20:24,760 --> 00:20:35,080
Oh<font color="#E5E5E5"> quite good it's understandable what's</font>

373
00:20:27,550 --> 00:20:37,600
going on<font color="#E5E5E5"> but the only thing that</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> the</font>

374
00:20:35,080 --> 00:20:40,179
<font color="#CCCCCC">drawback as you may see</font><font color="#E5E5E5"> radar the</font>

375
00:20:37,600 --> 00:20:43,469
<font color="#E5E5E5">etherium uses quite long operands in</font>

376
00:20:40,180 --> 00:20:48,730
fact most of the time it operates on<font color="#E5E5E5"> the</font>

377
00:20:43,470 --> 00:20:50,860
<font color="#E5E5E5">32 bytes numbers so there's a push</font><font color="#CCCCCC"> 2029</font>

378
00:20:48,730 --> 00:20:53,500
instruction<font color="#E5E5E5"> that pushes</font><font color="#CCCCCC"> a 29 byte</font>

379
00:20:50,860 --> 00:20:57,790
operand to the stack<font color="#E5E5E5"> and obviously it's</font>

380
00:20:53,500 --> 00:21:00,220
<font color="#E5E5E5">not displayed correctly</font><font color="#CCCCCC"> I have yet to</font>

381
00:20:57,790 --> 00:21:07,409
find out how<font color="#E5E5E5"> to display that correctly</font>

382
00:21:00,220 --> 00:21:11,380
in radar<font color="#CCCCCC"> so it's part of the future work</font>

383
00:21:07,410 --> 00:21:13,270
now the control flow graph looks like

384
00:21:11,380 --> 00:21:16,570
<font color="#E5E5E5">this</font><font color="#CCCCCC"> thankfully we have a nice</font>

385
00:21:13,270 --> 00:21:21,760
resolution<font color="#E5E5E5"> so it's seen clearly what's</font>

386
00:21:16,570 --> 00:21:27,970
going<font color="#CCCCCC"> on as I've said the first basic</font>

387
00:21:21,760 --> 00:21:32,860
block is finding<font color="#E5E5E5"> out the length of the</font>

388
00:21:27,970 --> 00:21:34,750
<font color="#CCCCCC">input data the second</font><font color="#E5E5E5"> basic block is the</font>

389
00:21:32,860 --> 00:21:36,729
function dispatcher that<font color="#E5E5E5"> will dispatch</font>

390
00:21:34,750 --> 00:21:38,770
your calls to the further code in the

391
00:21:36,730 --> 00:21:43,810
contract based on the signature<font color="#CCCCCC"> their</font>

392
00:21:38,770 --> 00:21:46,139
hash signature<font color="#E5E5E5"> and in any case if the</font>

393
00:21:43,810 --> 00:21:50,100
smart<font color="#E5E5E5"> contract execution fails and</font>

394
00:21:46,140 --> 00:21:51,840
any step at this point<font color="#E5E5E5"> we</font><font color="#CCCCCC"> arrive in this</font>

395
00:21:50,100 --> 00:21:54,418
small basic block which<font color="#CCCCCC"> reverses the</font>

396
00:21:51,840 --> 00:21:59,370
execution but<font color="#E5E5E5"> if not if everything is</font>

397
00:21:54,419 --> 00:22:07,080
successful we go on and at some point we

398
00:21:59,370 --> 00:22:10,860
execute our methods and jump<font color="#E5E5E5"> somewhere</font>

399
00:22:07,080 --> 00:22:13,769
and stop the execution now to the

400
00:22:10,860 --> 00:22:16,678
interesting stuff<font color="#CCCCCC"> how to implement the</font>

401
00:22:13,769 --> 00:22:18,840
<font color="#E5E5E5">i/o</font><font color="#CCCCCC"> plugin because it kind of you</font><font color="#E5E5E5"> know</font>

402
00:22:16,679 --> 00:22:22,320
each<font color="#E5E5E5"> and every contract leaves on the</font>

403
00:22:18,840 --> 00:22:24,539
chain and it doesn't necessarily leave

404
00:22:22,320 --> 00:22:27,539
on your file<font color="#CCCCCC"> system</font><font color="#E5E5E5"> so it would be</font>

405
00:22:24,539 --> 00:22:29,399
illogical things to ask<font color="#E5E5E5"> the etherium</font>

406
00:22:27,539 --> 00:22:34,260
itself to provide the<font color="#E5E5E5"> code of the</font>

407
00:22:29,399 --> 00:22:36,658
contract<font color="#CCCCCC"> it turns</font><font color="#E5E5E5"> out that go</font><font color="#CCCCCC"> aetherium</font>

408
00:22:34,260 --> 00:22:41,370
and<font color="#E5E5E5"> other implementations such as parity</font>

409
00:22:36,659 --> 00:22:46,080
<font color="#E5E5E5">and</font><font color="#CCCCCC"> cpp etherium they provide you with a</font>

410
00:22:41,370 --> 00:22:47,908
set of<font color="#E5E5E5"> RPC interfaces which do a lot of</font>

411
00:22:46,080 --> 00:22:52,529
<font color="#E5E5E5">interesting stuff for instance you can</font>

412
00:22:47,909 --> 00:22:56,130
call the<font color="#E5E5E5"> theorem get code</font><font color="#CCCCCC"> here's an</font>

413
00:22:52,529 --> 00:22:59,309
<font color="#E5E5E5">example with curl that just returns you</font>

414
00:22:56,130 --> 00:23:04,169
a JSON document<font color="#CCCCCC"> with the whole byte code</font>

415
00:22:59,309 --> 00:23:06,299
of the contract if<font color="#CCCCCC"> asked for</font><font color="#E5E5E5"> there with</font>

416
00:23:04,169 --> 00:23:11,880
the address with a hash address of that

417
00:23:06,299 --> 00:23:14,070
<font color="#E5E5E5">contract so just bring the lip curl and</font>

418
00:23:11,880 --> 00:23:16,409
<font color="#E5E5E5">JSON parser into the i/o</font><font color="#CCCCCC"> plug-in that's</font>

419
00:23:14,070 --> 00:23:18,779
<font color="#E5E5E5">why my plugins they live in</font><font color="#CCCCCC"> red are two</font>

420
00:23:16,409 --> 00:23:23,460
extras<font color="#CCCCCC"> because they add external</font>

421
00:23:18,779 --> 00:23:27,409
dependencies and now we can talk to the

422
00:23:23,460 --> 00:23:30,960
node using<font color="#E5E5E5"> the</font><font color="#CCCCCC"> IAP again</font><font color="#E5E5E5"> of red</font><font color="#CCCCCC"> aria now</font>

423
00:23:27,409 --> 00:23:33,659
<font color="#E5E5E5">example is here the if you are using</font>

424
00:23:30,960 --> 00:23:38,850
that<font color="#E5E5E5"> example is valid if you're using</font>

425
00:23:33,659 --> 00:23:42,240
<font color="#CCCCCC">your local</font><font color="#E5E5E5"> node you connect to e vm : /</font>

426
00:23:38,850 --> 00:23:47,158
<font color="#CCCCCC">/ localhost port and the address of your</font>

427
00:23:42,240 --> 00:23:48,929
contract<font color="#E5E5E5"> and there it or a reads the</font>

428
00:23:47,159 --> 00:23:51,330
contract code for you it's quite<font color="#E5E5E5"> handy</font>

429
00:23:48,929 --> 00:23:53,840
<font color="#CCCCCC">well if that's not</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> case you may</font>

430
00:23:51,330 --> 00:23:57,029
probably use<font color="#CCCCCC"> publically available</font>

431
00:23:53,840 --> 00:23:58,830
<font color="#CCCCCC">aetherium nodes</font><font color="#E5E5E5"> but I'm not sure if all</font>

432
00:23:57,029 --> 00:24:03,149
<font color="#CCCCCC">of them expose the</font>

433
00:23:58,830 --> 00:24:06,980
necessary interfaces<font color="#CCCCCC"> now the most</font>

434
00:24:03,149 --> 00:24:11,549
interesting part is the debugging<font color="#E5E5E5"> plugin</font>

435
00:24:06,980 --> 00:24:15,679
aphelion virtual machine has<font color="#E5E5E5"> no known to</font>

436
00:24:11,549 --> 00:24:19,350
everyone<font color="#E5E5E5"> interfaces like gdb int or data</font>

437
00:24:15,679 --> 00:24:23,549
whatsoever<font color="#E5E5E5"> and you cannot actually trace</font>

438
00:24:19,350 --> 00:24:26,070
their life execution of transaction like

439
00:24:23,549 --> 00:24:28,350
<font color="#E5E5E5">you do with the normal processes or your</font>

440
00:24:26,070 --> 00:24:29,220
firmware<font color="#E5E5E5"> or whatever you're working</font><font color="#CCCCCC"> with</font>

441
00:24:28,350 --> 00:24:34,309
in normal life

442
00:24:29,220 --> 00:24:36,899
but you actually can also call an

443
00:24:34,309 --> 00:24:39,240
procedure<font color="#CCCCCC"> call which will return the</font>

444
00:24:36,899 --> 00:24:42,178
trace of any transaction that has ever

445
00:24:39,240 --> 00:24:45,389
happened on the blockchain<font color="#CCCCCC"> it's called a</font>

446
00:24:42,179 --> 00:24:47,970
debug.trace transaction and what it

447
00:24:45,389 --> 00:24:51,240
returns is a long run<font color="#E5E5E5"> long a trace of</font>

448
00:24:47,970 --> 00:24:55,289
<font color="#CCCCCC">this transaction</font><font color="#E5E5E5"> where each each field</font>

449
00:24:51,240 --> 00:24:57,299
is the complete dump<font color="#E5E5E5"> of the state of</font><font color="#CCCCCC"> the</font>

450
00:24:55,289 --> 00:25:00,840
<font color="#CCCCCC">virtual machine during the execution of</font>

451
00:24:57,299 --> 00:25:04,019
that<font color="#E5E5E5"> instruction so for the first</font>

452
00:25:00,840 --> 00:25:06,000
<font color="#CCCCCC">instruction in our smart contract</font><font color="#E5E5E5"> the</font>

453
00:25:04,019 --> 00:25:09,059
trace will<font color="#E5E5E5"> be the following</font><font color="#CCCCCC"> it's a push</font>

454
00:25:06,000 --> 00:25:12,000
instruction the program<font color="#CCCCCC"> counter is</font><font color="#E5E5E5"> 0 the</font>

455
00:25:09,059 --> 00:25:13,950
<font color="#E5E5E5">second storage are empty at the time the</font>

456
00:25:12,000 --> 00:25:19,649
memory<font color="#E5E5E5"> is not initialized</font><font color="#CCCCCC"> and that</font>

457
00:25:13,950 --> 00:25:23,519
instruction cost you three guess it has

458
00:25:19,649 --> 00:25:26,879
it had no errors so basically you take

459
00:25:23,519 --> 00:25:30,539
this long document and what you do in

460
00:25:26,880 --> 00:25:34,980
the radar<font color="#CCCCCC"> plugin you read this whole</font>

461
00:25:30,539 --> 00:25:38,100
<font color="#CCCCCC">document you</font><font color="#E5E5E5"> just implement the API for</font>

462
00:25:34,980 --> 00:25:41,789
the main radar code which provides you

463
00:25:38,100 --> 00:25:44,370
with ability to<font color="#CCCCCC"> set breakpoints</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> stop</font>

464
00:25:41,789 --> 00:25:46,070
or continue your execution and<font color="#E5E5E5"> so on all</font>

465
00:25:44,370 --> 00:25:50,340
the<font color="#CCCCCC"> stuff</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> debugging</font><font color="#CCCCCC"> plugin does</font>

466
00:25:46,070 --> 00:25:57,330
but what<font color="#CCCCCC"> actually does</font><font color="#E5E5E5"> it's not</font><font color="#CCCCCC"> the live</font>

467
00:25:50,340 --> 00:26:03,029
trace is the<font color="#E5E5E5"> just scrolling and</font><font color="#CCCCCC"> to and</font>

468
00:25:57,330 --> 00:26:06,799
forth through this large<font color="#E5E5E5"> JSON trace now</font>

469
00:26:03,029 --> 00:26:06,799
on to<font color="#E5E5E5"> the future work</font>

470
00:26:07,460 --> 00:26:13,999
I think that the nature<font color="#CCCCCC"> of aetherium</font>

471
00:26:10,870 --> 00:26:18,199
virtual<font color="#CCCCCC"> machine suggests that a seal</font>

472
00:26:13,999 --> 00:26:21,320
might be very promising<font color="#E5E5E5"> since we can</font>

473
00:26:18,200 --> 00:26:23,659
<font color="#E5E5E5">actually emulate anything to any point</font>

474
00:26:21,320 --> 00:26:27,379
in the execution<font color="#E5E5E5"> of smart</font><font color="#CCCCCC"> contract</font><font color="#E5E5E5"> since</font>

475
00:26:23,659 --> 00:26:31,669
it will<font color="#E5E5E5"> always terminate</font><font color="#CCCCCC"> and that's a</font>

476
00:26:27,379 --> 00:26:33,039
definite fact<font color="#E5E5E5"> I think that my future</font>

477
00:26:31,669 --> 00:26:36,440
<font color="#E5E5E5">work will definitely include</font>

478
00:26:33,039 --> 00:26:40,429
<font color="#E5E5E5">implementing the the compiler in this or</font>

479
00:26:36,440 --> 00:26:44,570
<font color="#E5E5E5">that manner I am thinking about our</font><font color="#CCCCCC"> two</font>

480
00:26:40,429 --> 00:26:47,509
deck<font color="#E5E5E5"> but probably red deck because and</font>

481
00:26:44,570 --> 00:26:49,490
why is<font color="#CCCCCC"> it usable</font><font color="#E5E5E5"> because some of the</font>

482
00:26:47,509 --> 00:26:52,730
recent researches show that probably

483
00:26:49,490 --> 00:26:58,759
around<font color="#E5E5E5"> 70% of smart contracts in the</font>

484
00:26:52,730 --> 00:27:01,990
etherium like<font color="#E5E5E5"> the source code so we can</font>

485
00:26:58,759 --> 00:27:07,669
just kind<font color="#E5E5E5"> of</font><font color="#CCCCCC"> D compile them if necessary</font>

486
00:27:01,990 --> 00:27:09,940
<font color="#E5E5E5">and one of the really needed stuff that</font>

487
00:27:07,669 --> 00:27:12,950
has<font color="#CCCCCC"> been asked by many</font><font color="#E5E5E5"> people</font>

488
00:27:09,940 --> 00:27:15,710
participating in CTF the<font color="#CCCCCC"> etherion base</font>

489
00:27:12,950 --> 00:27:18,080
<font color="#E5E5E5">leaves is there support for 32 byte</font>

490
00:27:15,710 --> 00:27:23,240
operands<font color="#E5E5E5"> because it's a serious issue</font>

491
00:27:18,080 --> 00:27:27,408
for<font color="#E5E5E5"> them and I think that</font><font color="#CCCCCC"> better jump</font>

492
00:27:23,240 --> 00:27:33,590
call and return destination address

493
00:27:27,409 --> 00:27:36,559
<font color="#E5E5E5">computation now there are some</font><font color="#CCCCCC"> useful</font>

494
00:27:33,590 --> 00:27:38,600
<font color="#CCCCCC">links</font><font color="#E5E5E5"> for you if you are interested if</font>

495
00:27:36,559 --> 00:27:40,700
my talk<font color="#E5E5E5"> interested you in further</font>

496
00:27:38,600 --> 00:27:43,158
<font color="#E5E5E5">researching the security of smart</font>

497
00:27:40,700 --> 00:27:48,200
contracts and<font color="#E5E5E5"> the internals now there's</font>

498
00:27:43,159 --> 00:27:51,470
going on a great blog series by<font color="#CCCCCC"> its</font>

499
00:27:48,200 --> 00:27:54,649
<font color="#CCCCCC">apple in in their blog but</font><font color="#E5E5E5"> you can also</font>

500
00:27:51,470 --> 00:27:56,990
read my posts about implementations<font color="#CCCCCC"> and</font>

501
00:27:54,649 --> 00:28:00,469
the internals of the theorem<font color="#CCCCCC"> are smart</font>

502
00:27:56,990 --> 00:28:04,249
contracts<font color="#E5E5E5"> at my medium for those of you</font>

503
00:28:00,470 --> 00:28:08,149
who love<font color="#CCCCCC"> CD f's</font><font color="#E5E5E5"> there's really nice</font>

504
00:28:04,249 --> 00:28:11,629
really<font color="#E5E5E5"> nice</font><font color="#CCCCCC"> CDF called Evernote</font><font color="#E5E5E5"> also by</font>

505
00:28:08,149 --> 00:28:19,899
<font color="#CCCCCC">settlement solutions right now it has</font>

506
00:28:11,629 --> 00:28:19,899
around<font color="#CCCCCC"> 19 jeopardy like tasks and if you</font>

507
00:28:20,150 --> 00:28:24,799
exploit all<font color="#CCCCCC"> the vulnerabilities</font><font color="#E5E5E5"> your pub</font>

508
00:28:22,429 --> 00:28:30,380
<font color="#E5E5E5">will be an expert on smart contract</font>

509
00:28:24,799 --> 00:28:39,260
security<font color="#CCCCCC"> also the</font><font color="#E5E5E5"> yellow paper the API</font>

510
00:28:30,380 --> 00:28:42,309
specification and all the rest<font color="#CCCCCC"> so that's</font>

511
00:28:39,260 --> 00:28:45,679
all for today<font color="#CCCCCC"> I would like to</font><font color="#E5E5E5"> thank you</font>

512
00:28:42,309 --> 00:28:49,428
<font color="#CCCCCC">thank for the radar team and pancake for</font>

513
00:28:45,679 --> 00:28:51,980
this great conference and I would<font color="#E5E5E5"> really</font>

514
00:28:49,429 --> 00:28:56,539
love to<font color="#E5E5E5"> hear your questions</font><font color="#CCCCCC"> and the best</font>

515
00:28:51,980 --> 00:29:00,830
question<font color="#CCCCCC"> receives beer I think it's some</font>

516
00:28:56,539 --> 00:29:03,520
honeydew<font color="#CCCCCC"> I don't know</font><font color="#E5E5E5"> organic please</font>

517
00:29:00,830 --> 00:29:03,520
<font color="#E5E5E5">questions</font>

518
00:29:03,900 --> 00:29:11,789
[Applause]

519
00:29:16,480 --> 00:29:21,070
<font color="#E5E5E5">okay</font>

520
00:29:17,600 --> 00:29:26,369
no one gets a beer<font color="#E5E5E5"> thanks a lot</font>

521
00:29:21,070 --> 00:29:26,369
[Applause]

