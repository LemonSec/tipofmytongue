1
00:00:05,270 --> 00:00:12,889
<font color="#E5E5E5">okay could</font><font color="#CCCCCC"> you hear me</font><font color="#E5E5E5"> okay</font>

2
00:00:08,069 --> 00:00:15,960
<font color="#CCCCCC">perfect</font><font color="#E5E5E5"> so I want</font><font color="#CCCCCC"> to talk a</font><font color="#E5E5E5"> little about</font>

3
00:00:12,889 --> 00:00:18,990
<font color="#CCCCCC">resurrecting the</font><font color="#E5E5E5"> dumb fuzzing with a</font>

4
00:00:15,960 --> 00:00:21,210
little help of disassembler for me it's

5
00:00:18,990 --> 00:00:24,119
a<font color="#E5E5E5"> kind of new experience because all my</font>

6
00:00:21,210 --> 00:00:25,859
talks before<font color="#E5E5E5"> like for all my years in</font>

7
00:00:24,119 --> 00:00:29,490
the security<font color="#E5E5E5"> community was about</font>

8
00:00:25,859 --> 00:00:31,859
<font color="#E5E5E5">researchers or at least trainings but</font>

9
00:00:29,490 --> 00:00:34,079
today I will<font color="#CCCCCC"> talk</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> tool tool by</font>

10
00:00:31,859 --> 00:00:36,149
developed by<font color="#CCCCCC"> myself</font><font color="#E5E5E5"> so it's a</font><font color="#CCCCCC"> little</font>

11
00:00:34,079 --> 00:00:42,600
nervous<font color="#CCCCCC"> for me don't punch me in the</font>

12
00:00:36,149 --> 00:00:44,910
face too much and so Who am<font color="#E5E5E5"> I I work as</font>

13
00:00:42,600 --> 00:00:47,670
a security<font color="#CCCCCC"> consultant for ie</font><font color="#E5E5E5"> active</font><font color="#CCCCCC"> a</font>

14
00:00:44,910 --> 00:00:49,769
whole PhD in the<font color="#E5E5E5"> past I work as</font>

15
00:00:47,670 --> 00:00:51,960
assistant<font color="#CCCCCC"> professor at st. Petersburg</font>

16
00:00:49,770 --> 00:00:54,510
<font color="#CCCCCC">Electric</font><font color="#E5E5E5"> Technical University in</font>

17
00:00:51,960 --> 00:00:55,890
computer science and security<font color="#E5E5E5"> and a</font>

18
00:00:54,510 --> 00:00:58,739
small disclaimer<font color="#E5E5E5"> because it's open</font>

19
00:00:55,890 --> 00:01:00,390
<font color="#E5E5E5">source project</font><font color="#CCCCCC"> it's my pet project this</font>

20
00:00:58,739 --> 00:01:03,739
<font color="#E5E5E5">work has no connection</font><font color="#CCCCCC"> with my current</font>

21
00:01:00,390 --> 00:01:09,479
employee<font color="#E5E5E5"> I active so just for sake of</font>

22
00:01:03,739 --> 00:01:10,259
saved us<font color="#CCCCCC"> and here is the</font><font color="#E5E5E5"> agenda</font><font color="#CCCCCC"> it's</font>

23
00:01:09,479 --> 00:01:13,380
very simple

24
00:01:10,260 --> 00:01:17,060
why create<font color="#CCCCCC"> another father because</font>

25
00:01:13,380 --> 00:01:19,500
everybody need to<font color="#E5E5E5"> write his father once</font>

26
00:01:17,060 --> 00:01:24,060
but anyway let's<font color="#E5E5E5"> discuss it</font>

27
00:01:19,500 --> 00:01:27,360
so what's alums is about<font color="#E5E5E5"> and lumps</font>

28
00:01:24,060 --> 00:01:30,299
<font color="#CCCCCC">Android are so why this talk</font><font color="#E5E5E5"> is here I</font>

29
00:01:27,360 --> 00:01:33,240
need<font color="#CCCCCC"> some</font><font color="#E5E5E5"> basement otherwise pancake</font>

30
00:01:30,299 --> 00:01:35,579
will be<font color="#CCCCCC"> angry</font><font color="#E5E5E5"> sir</font>

31
00:01:33,240 --> 00:01:39,149
first I'm<font color="#CCCCCC"> not a developer</font><font color="#E5E5E5"> and never have</font>

32
00:01:35,579 --> 00:01:40,949
<font color="#E5E5E5">been a good developer and you see there</font>

33
00:01:39,150 --> 00:01:43,729
<font color="#E5E5E5">is a difference between</font><font color="#CCCCCC"> real</font><font color="#E5E5E5"> software</font>

34
00:01:40,950 --> 00:01:47,899
developer like you see on<font color="#CCCCCC"> this picture</font>

35
00:01:43,729 --> 00:01:49,860
<font color="#CCCCCC">who writes in C and uses VI of him</font><font color="#E5E5E5"> and</font>

36
00:01:47,899 --> 00:01:52,880
<font color="#E5E5E5">myself when I'm trying</font><font color="#CCCCCC"> to develop</font>

37
00:01:49,860 --> 00:01:58,200
<font color="#CCCCCC">something when I'm using air lunk</font><font color="#E5E5E5"> and</font>

38
00:01:52,880 --> 00:02:00,210
<font color="#CCCCCC">write in using</font><font color="#E5E5E5"> Visual Studio code but as</font>

39
00:01:58,200 --> 00:02:04,290
<font color="#E5E5E5">I've said everyone should write his own</font>

40
00:02:00,210 --> 00:02:06,750
father<font color="#E5E5E5"> that's every security researcher</font>

41
00:02:04,290 --> 00:02:10,530
security engineer at some point<font color="#CCCCCC"> fright</font>

42
00:02:06,750 --> 00:02:11,930
<font color="#E5E5E5">his father so let's recap something</font>

43
00:02:10,530 --> 00:02:14,769
about fuzzing

44
00:02:11,930 --> 00:02:18,590
currently there are three<font color="#E5E5E5"> possible</font>

45
00:02:14,769 --> 00:02:20,329
approaches for<font color="#E5E5E5"> fuzzy its generation</font>

46
00:02:18,590 --> 00:02:22,689
based when we have some grammar and

47
00:02:20,329 --> 00:02:25,129
based on the grammar we generate samples

48
00:02:22,689 --> 00:02:28,120
<font color="#CCCCCC">its Malaysian based when we have some</font>

49
00:02:25,129 --> 00:02:32,078
sample and using mutation we<font color="#CCCCCC"> mutated</font>

50
00:02:28,120 --> 00:02:34,760
<font color="#E5E5E5">somehow randomly and it's behavioral</font>

51
00:02:32,079 --> 00:02:36,859
either generation or mutation like

52
00:02:34,760 --> 00:02:40,340
American<font color="#CCCCCC"> fuzzy lot</font><font color="#E5E5E5"> which is</font><font color="#CCCCCC"> a perfect</font>

53
00:02:36,859 --> 00:02:45,609
software which I use<font color="#E5E5E5"> on almost every</font>

54
00:02:40,340 --> 00:02:49,030
project which actually<font color="#E5E5E5"> do the thing like</font>

55
00:02:45,609 --> 00:02:53,060
<font color="#E5E5E5">mutate or generate something and then</font>

56
00:02:49,030 --> 00:02:55,670
check how much code was covered and then

57
00:02:53,060 --> 00:03:00,650
mutate again<font color="#E5E5E5"> cover another part of the</font>

58
00:02:55,670 --> 00:03:03,470
code<font color="#E5E5E5"> and so on</font><font color="#CCCCCC"> and why why we need</font>

59
00:03:00,650 --> 00:03:05,959
another<font color="#CCCCCC"> father</font><font color="#E5E5E5"> except that everyone</font>

60
00:03:03,470 --> 00:03:09,230
should write one so it's all about

61
00:03:05,959 --> 00:03:11,180
complexity<font color="#E5E5E5"> with simplicity because</font><font color="#CCCCCC"> I</font>

62
00:03:09,230 --> 00:03:13,730
<font color="#CCCCCC">very love this comic and this is true</font>

63
00:03:11,180 --> 00:03:15,680
because<font color="#E5E5E5"> what usually happens if you</font>

64
00:03:13,730 --> 00:03:18,619
<font color="#E5E5E5">spend on the father more than one week</font>

65
00:03:15,680 --> 00:03:24,230
in<font color="#E5E5E5"> writing it usually fails that happens</font>

66
00:03:18,620 --> 00:03:28,879
for me most of the<font color="#CCCCCC"> time you could either</font>

67
00:03:24,230 --> 00:03:31,548
wrote some<font color="#E5E5E5"> very specific</font><font color="#CCCCCC"> buzzer and use</font>

68
00:03:28,879 --> 00:03:33,560
it and found one bug<font color="#E5E5E5"> or you could</font><font color="#CCCCCC"> lunch</font>

69
00:03:31,549 --> 00:03:35,449
<font color="#CCCCCC">dump</font><font color="#E5E5E5"> father from the first second and</font>

70
00:03:33,560 --> 00:03:38,540
found five bucks and you will be a noob

71
00:03:35,449 --> 00:03:39,260
and<font color="#E5E5E5"> I am a noob yes I I discover a lot</font>

72
00:03:38,540 --> 00:03:43,760
of<font color="#E5E5E5"> bugs</font>

73
00:03:39,260 --> 00:03:45,858
most of my CVS or<font color="#E5E5E5"> ics-cert CVS were</font>

74
00:03:43,760 --> 00:03:48,888
discovered using dumb father so<font color="#CCCCCC"> I'm a no</font>

75
00:03:45,859 --> 00:03:51,139
<font color="#E5E5E5">problem</font><font color="#CCCCCC"> I'm probably</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> the thing is</font>

76
00:03:48,889 --> 00:03:55,250
what dumb father are you<font color="#E5E5E5"> using and how</font>

77
00:03:51,139 --> 00:03:59,479
smart<font color="#E5E5E5"> these dumb father read so I'm sure</font>

78
00:03:55,250 --> 00:04:02,299
everybody uses<font color="#E5E5E5"> and</font><font color="#CCCCCC"> no</font><font color="#E5E5E5"> rhythm so</font><font color="#CCCCCC"> how</font><font color="#E5E5E5"> much</font>

79
00:03:59,479 --> 00:04:07,849
people<font color="#E5E5E5"> in</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> audience don't know</font><font color="#CCCCCC"> were</font>

80
00:04:02,299 --> 00:04:10,220
<font color="#CCCCCC">Adamson</font><font color="#E5E5E5"> a lot of guys that's bad</font><font color="#CCCCCC"> your</font>

81
00:04:07,849 --> 00:04:14,540
are underestimate the power of them

82
00:04:10,220 --> 00:04:16,519
fuzzing so random<font color="#CCCCCC"> cell is actually a</font>

83
00:04:14,540 --> 00:04:20,659
test case generator for a business

84
00:04:16,519 --> 00:04:23,360
testing as stated by his author alcohol

85
00:04:20,659 --> 00:04:25,620
and it's a<font color="#E5E5E5"> motivational based</font><font color="#CCCCCC"> fuzzing</font>

86
00:04:23,360 --> 00:04:28,740
<font color="#E5E5E5">you send something to</font><font color="#CCCCCC"> redeem</font><font color="#E5E5E5"> say</font><font color="#CCCCCC"> in</font>

87
00:04:25,620 --> 00:04:31,470
and you will get<font color="#E5E5E5"> something weird on the</font>

88
00:04:28,740 --> 00:04:34,590
output<font color="#E5E5E5"> some mutation of</font><font color="#CCCCCC"> the input which</font>

89
00:04:31,470 --> 00:04:37,440
looks<font color="#CCCCCC"> like the</font><font color="#E5E5E5"> input but differs and you</font>

90
00:04:34,590 --> 00:04:40,469
if you send these data to target<font color="#E5E5E5"> and</font>

91
00:04:37,440 --> 00:04:42,300
target is not<font color="#E5E5E5"> perfectly written and no</font>

92
00:04:40,470 --> 00:04:44,340
<font color="#E5E5E5">software is perfectly written there is</font>

93
00:04:42,300 --> 00:04:47,660
some probability<font color="#CCCCCC"> that it will</font><font color="#E5E5E5"> be a crash</font>

94
00:04:44,340 --> 00:04:51,479
or some unexpected<font color="#E5E5E5"> behavior or whatever</font>

95
00:04:47,660 --> 00:04:55,260
so we have this magnificent tool and we

96
00:04:51,479 --> 00:04:57,900
used it for<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> nine years</font><font color="#E5E5E5"> already</font>

97
00:04:55,260 --> 00:05:00,780
<font color="#E5E5E5">because our</font><font color="#CCCCCC"> damn sighting</font><font color="#E5E5E5"> to sound</font><font color="#CCCCCC"> 9 or</font>

98
00:04:57,900 --> 00:05:03,979
2010<font color="#E5E5E5"> why we need another tool the</font>

99
00:05:00,780 --> 00:05:08,369
problem that<font color="#CCCCCC"> Radames ax is a standalone</font>

100
00:05:03,979 --> 00:05:10,919
<font color="#CCCCCC">linux</font><font color="#E5E5E5"> comment like</font><font color="#CCCCCC"> linux program which</font>

101
00:05:08,370 --> 00:05:14,400
<font color="#E5E5E5">actually accepts data on the input and</font>

102
00:05:10,919 --> 00:05:17,909
output<font color="#E5E5E5"> either on in socket or to the</font>

103
00:05:14,400 --> 00:05:19,950
study<font color="#E5E5E5"> instead out or to file so every</font>

104
00:05:17,910 --> 00:05:22,620
time when<font color="#CCCCCC"> you need to fast some big</font>

105
00:05:19,950 --> 00:05:25,440
target or<font color="#CCCCCC"> facet fast</font><font color="#E5E5E5"> you need to pipe</font>

106
00:05:22,620 --> 00:05:27,330
<font color="#CCCCCC">Redemption</font><font color="#E5E5E5"> you call it in a pipe you</font><font color="#CCCCCC"> run</font>

107
00:05:25,440 --> 00:05:31,380
<font color="#CCCCCC">in your instance</font><font color="#E5E5E5"> and it's very slow</font>

108
00:05:27,330 --> 00:05:33,690
<font color="#E5E5E5">especially for</font><font color="#CCCCCC"> example once I</font><font color="#E5E5E5"> need to</font>

109
00:05:31,380 --> 00:05:36,150
many years<font color="#E5E5E5"> ago like five years ago</font>

110
00:05:33,690 --> 00:05:38,969
I need to do some mutational fuzzing

111
00:05:36,150 --> 00:05:40,650
inside the Android application<font color="#CCCCCC"> so</font>

112
00:05:38,970 --> 00:05:43,380
actually it was a Android provider

113
00:05:40,650 --> 00:05:46,560
<font color="#CCCCCC">father</font><font color="#E5E5E5"> so what I've done I've wrote the</font>

114
00:05:43,380 --> 00:05:50,039
script in Python which lunch

115
00:05:46,560 --> 00:05:51,930
Radames on the laptop and<font color="#E5E5E5"> then send</font>

116
00:05:50,039 --> 00:05:55,349
<font color="#CCCCCC">results back to the</font><font color="#E5E5E5"> Android and it was a</font>

117
00:05:51,930 --> 00:05:56,849
nightmare<font color="#CCCCCC"> so at some point</font><font color="#E5E5E5"> everybody</font>

118
00:05:55,349 --> 00:06:01,320
thought about a great idea

119
00:05:56,849 --> 00:06:01,860
let's fork<font color="#CCCCCC"> Redemption what's the</font><font color="#E5E5E5"> problem</font>

120
00:06:01,320 --> 00:06:04,440
here

121
00:06:01,860 --> 00:06:07,950
Radames<font color="#CCCCCC"> E is written in all</font><font color="#E5E5E5"> Lisp which</font>

122
00:06:04,440 --> 00:06:09,570
is a dialect<font color="#E5E5E5"> of skin</font><font color="#CCCCCC"> of your dialect</font>

123
00:06:07,950 --> 00:06:12,810
Radames<font color="#E5E5E5"> it uses a lot</font><font color="#CCCCCC"> of lazy</font>

124
00:06:09,570 --> 00:06:16,080
<font color="#CCCCCC">evaluations which makes</font><font color="#E5E5E5"> forking it more</font>

125
00:06:12,810 --> 00:06:19,380
and<font color="#E5E5E5"> more complex and also</font><font color="#CCCCCC"> Adam say the</font>

126
00:06:16,080 --> 00:06:21,960
<font color="#E5E5E5">oldest views funny language because this</font>

127
00:06:19,380 --> 00:06:24,110
thing is evaluated lazy evaluation also

128
00:06:21,960 --> 00:06:27,150
<font color="#E5E5E5">there is lambda also</font><font color="#CCCCCC"> there is another</font>

129
00:06:24,110 --> 00:06:30,710
<font color="#CCCCCC">Unicode symbol so using Unicode symbol</font>

130
00:06:27,150 --> 00:06:32,250
as a language constructions it's so cool

131
00:06:30,710 --> 00:06:35,099
actually

132
00:06:32,250 --> 00:06:37,540
I love<font color="#E5E5E5"> her</font><font color="#CCCCCC"> damson really love but I</font>

133
00:06:35,099 --> 00:06:41,020
don't<font color="#CCCCCC"> like this thing</font>

134
00:06:37,540 --> 00:06:44,590
and<font color="#E5E5E5"> ask Anton Anton</font><font color="#CCCCCC"> try to for credenza</font>

135
00:06:41,020 --> 00:06:46,870
I think he<font color="#E5E5E5"> also don't like it so one</font>

136
00:06:44,590 --> 00:06:50,070
does not simply embedded I'm seeing his

137
00:06:46,870 --> 00:06:53,590
project because it's really really<font color="#CCCCCC"> hard</font>

138
00:06:50,070 --> 00:06:57,370
<font color="#CCCCCC">so and if you for credenza what you want</font>

139
00:06:53,590 --> 00:07:00,549
to add it<font color="#E5E5E5"> of course making integration</font>

140
00:06:57,370 --> 00:07:04,570
with father easier making work<font color="#CCCCCC"> as a</font>

141
00:07:00,550 --> 00:07:07,120
proxy<font color="#CCCCCC"> or servant make it extendable</font>

142
00:07:04,570 --> 00:07:09,909
because adding<font color="#CCCCCC"> in human through</font><font color="#E5E5E5"> Adam say</font>

143
00:07:07,120 --> 00:07:12,430
<font color="#E5E5E5">is a</font><font color="#CCCCCC"> help adding more patterns</font><font color="#E5E5E5"> adding</font>

144
00:07:09,910 --> 00:07:14,920
some logging generation based extensions

145
00:07:12,430 --> 00:07:16,420
<font color="#E5E5E5">and of course</font><font color="#CCCCCC"> Rodham say is single</font>

146
00:07:14,920 --> 00:07:20,080
threaded<font color="#CCCCCC"> we should make it</font>

147
00:07:16,420 --> 00:07:23,050
<font color="#CCCCCC">multi-threaded honestly I faced this</font>

148
00:07:20,080 --> 00:07:24,640
problem<font color="#CCCCCC"> for</font><font color="#E5E5E5"> years ago I think almost</font>

149
00:07:23,050 --> 00:07:27,820
four years<font color="#E5E5E5"> ago because</font><font color="#CCCCCC"> I think it was</font>

150
00:07:24,640 --> 00:07:32,440
end of August 2014<font color="#CCCCCC"> when I need</font><font color="#E5E5E5"> to fuss</font>

151
00:07:27,820 --> 00:07:35,080
around 100<font color="#E5E5E5"> components for 700 plus</font>

152
00:07:32,440 --> 00:07:36,820
<font color="#CCCCCC">Industrial field</font><font color="#E5E5E5"> devices and I have only</font>

153
00:07:35,080 --> 00:07:40,750
<font color="#CCCCCC">two months</font><font color="#E5E5E5"> on this project and I was</font>

154
00:07:36,820 --> 00:07:42,099
like how to do it so and when I wrote

155
00:07:40,750 --> 00:07:44,170
the first<font color="#E5E5E5"> prototype of</font><font color="#CCCCCC"> fuzzer</font>

156
00:07:42,100 --> 00:07:48,010
infrastructure<font color="#E5E5E5"> I saw the speed the speed</font>

157
00:07:44,170 --> 00:07:49,750
<font color="#E5E5E5">was awful so I</font><font color="#CCCCCC"> was really tired of</font>

158
00:07:48,010 --> 00:07:53,440
<font color="#E5E5E5">forking Radames</font>

159
00:07:49,750 --> 00:07:56,620
<font color="#E5E5E5">every time I mean forking in case of</font>

160
00:07:53,440 --> 00:07:59,800
calling fork function in C so I've just

161
00:07:56,620 --> 00:08:01,960
forked<font color="#E5E5E5"> Radames as approach as a project</font>

162
00:07:59,800 --> 00:08:06,100
to Erlang language<font color="#E5E5E5"> and implement it as a</font>

163
00:08:01,960 --> 00:08:09,130
service why not<font color="#CCCCCC"> C because it's</font>

164
00:08:06,100 --> 00:08:12,250
impossible<font color="#CCCCCC"> to</font><font color="#E5E5E5"> many lazy evaluations why</font>

165
00:08:09,130 --> 00:08:15,690
not a camel<font color="#E5E5E5"> I've tried really guys I've</font>

166
00:08:12,250 --> 00:08:19,840
tried but vodka a camel is very strict

167
00:08:15,690 --> 00:08:22,510
<font color="#E5E5E5">language in case of typing and Radames</font>

168
00:08:19,840 --> 00:08:25,090
is very<font color="#CCCCCC"> unstretched in case of typing so</font>

169
00:08:22,510 --> 00:08:28,599
create<font color="#E5E5E5"> after a couple of days trying</font><font color="#CCCCCC"> to</font>

170
00:08:25,090 --> 00:08:32,020
<font color="#E5E5E5">describe only one mutation using types</font>

171
00:08:28,600 --> 00:08:34,930
and when the<font color="#E5E5E5"> project doesn't compile at</font>

172
00:08:32,020 --> 00:08:37,750
all<font color="#E5E5E5"> so it just don't compile</font><font color="#CCCCCC"> because too</font>

173
00:08:34,929 --> 00:08:42,159
many type problems<font color="#E5E5E5"> and I stopped and</font>

174
00:08:37,750 --> 00:08:45,520
<font color="#CCCCCC">then I</font><font color="#E5E5E5"> said what</font><font color="#CCCCCC"> I'm I rewrote it to</font>

175
00:08:42,159 --> 00:08:49,140
Erlang<font color="#CCCCCC"> why not elixir</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> - in 2014</font>

176
00:08:45,520 --> 00:08:49,140
<font color="#E5E5E5">there were no elixir</font>

177
00:08:49,170 --> 00:08:55,319
now maybe if I do it<font color="#CCCCCC"> now I will rewrite</font>

178
00:08:52,800 --> 00:08:55,829
it<font color="#E5E5E5"> in</font><font color="#CCCCCC"> elixir</font><font color="#E5E5E5"> but the evil was already</font>

179
00:08:55,320 --> 00:08:59,550
done

180
00:08:55,830 --> 00:09:01,350
so it's an<font color="#E5E5E5"> airlock</font><font color="#CCCCCC"> sorry guys so but the</font>

181
00:08:59,550 --> 00:09:06,449
result was<font color="#E5E5E5"> pretty successful because I</font>

182
00:09:01,350 --> 00:09:08,190
found like<font color="#CCCCCC"> 4 500 field</font><font color="#E5E5E5"> devices were</font>

183
00:09:06,450 --> 00:09:09,840
vulnerable to<font color="#E5E5E5"> various memory corruptions</font>

184
00:09:08,190 --> 00:09:12,330
Daniel of services and<font color="#E5E5E5"> XML parsing</font>

185
00:09:09,840 --> 00:09:15,060
problems and<font color="#E5E5E5"> these all these bugs were</font>

186
00:09:12,330 --> 00:09:19,110
found only by<font color="#CCCCCC"> dumb fuzzing</font><font color="#E5E5E5"> because I</font>

187
00:09:15,060 --> 00:09:22,109
<font color="#CCCCCC">don't</font><font color="#E5E5E5"> have more time</font><font color="#CCCCCC"> for them and I</font><font color="#E5E5E5"> need</font>

188
00:09:19,110 --> 00:09:26,130
like<font color="#E5E5E5"> some kind of fair</font><font color="#CCCCCC"> coverage for each</font>

189
00:09:22,110 --> 00:09:30,750
<font color="#E5E5E5">component so that's how our</font><font color="#CCCCCC"> lumps I was</font>

190
00:09:26,130 --> 00:09:34,980
born and before<font color="#CCCCCC"> I</font><font color="#E5E5E5"> will show you the tool</font>

191
00:09:30,750 --> 00:09:36,770
<font color="#E5E5E5">let me just speak a little about roms</font>

192
00:09:34,980 --> 00:09:39,780
versus<font color="#E5E5E5"> randoms a compability</font>

193
00:09:36,770 --> 00:09:41,490
<font color="#E5E5E5">compatibility so most of basic patterns</font>

194
00:09:39,780 --> 00:09:44,310
and mutations from<font color="#CCCCCC"> adamson works in the</font>

195
00:09:41,490 --> 00:09:47,280
same<font color="#CCCCCC"> way in a lump sum</font><font color="#E5E5E5"> and their lumps</font>

196
00:09:44,310 --> 00:09:49,709
<font color="#CCCCCC">the</font><font color="#E5E5E5"> users common style common line</font>

197
00:09:47,280 --> 00:09:51,689
syntax and style mostly compatible<font color="#CCCCCC"> to</font>

198
00:09:49,710 --> 00:09:54,450
<font color="#CCCCCC">adamson in most wishes but better</font>

199
00:09:51,690 --> 00:09:56,850
consult<font color="#E5E5E5"> the documentation first but</font><font color="#CCCCCC"> i'm</font>

200
00:09:54,450 --> 00:09:58,800
trying<font color="#CCCCCC"> to</font><font color="#E5E5E5"> keeping the</font><font color="#CCCCCC"> compatibility so</font>

201
00:09:56,850 --> 00:10:00,690
in your user<font color="#CCCCCC"> over lambda</font><font color="#E5E5E5"> who used random</font>

202
00:09:58,800 --> 00:10:04,140
said before could just start from

203
00:10:00,690 --> 00:10:05,970
scratch<font color="#E5E5E5"> the only big difference from the</font>

204
00:10:04,140 --> 00:10:09,270
basic mutations that are<font color="#E5E5E5"> in random</font>

205
00:10:05,970 --> 00:10:12,630
<font color="#E5E5E5">sinner alum</font><font color="#CCCCCC"> C is in XML because</font><font color="#E5E5E5"> Radames</font>

206
00:10:09,270 --> 00:10:15,000
is using XML parser<font color="#E5E5E5"> alums are using sgml</font>

207
00:10:12,630 --> 00:10:18,600
<font color="#CCCCCC">for parse parser</font><font color="#E5E5E5"> and faster</font>

208
00:10:15,000 --> 00:10:21,270
why because I faced a<font color="#E5E5E5"> lot of languages</font>

209
00:10:18,600 --> 00:10:23,520
<font color="#E5E5E5">that are not XML compatible they looks</font>

210
00:10:21,270 --> 00:10:27,210
<font color="#E5E5E5">like XML but they are not XML grammar</font>

211
00:10:23,520 --> 00:10:31,079
compatible so I've used more generic

212
00:10:27,210 --> 00:10:33,780
grammar and recognizer<font color="#CCCCCC"> HTML and their</font>

213
00:10:31,080 --> 00:10:35,850
<font color="#CCCCCC">lumps implements a lot more features so</font>

214
00:10:33,780 --> 00:10:38,939
the installation<font color="#E5E5E5"> is</font><font color="#CCCCCC"> really simple you</font>

215
00:10:35,850 --> 00:10:41,490
<font color="#CCCCCC">just</font><font color="#E5E5E5"> install</font><font color="#CCCCCC"> GG CC make a neuro-link</font>

216
00:10:38,940 --> 00:10:46,290
with some components then you<font color="#E5E5E5"> clone then</font>

217
00:10:41,490 --> 00:10:48,740
you make and here it is working<font color="#CCCCCC"> so let's</font>

218
00:10:46,290 --> 00:10:48,740
see

219
00:10:53,010 --> 00:11:04,089
and<font color="#E5E5E5"> you know is this okay should be so</font>

220
00:10:59,220 --> 00:11:07,630
if you run it like in this way you will

221
00:11:04,089 --> 00:11:13,600
<font color="#E5E5E5">see nothing</font><font color="#CCCCCC"> because it's a application</font>

222
00:11:07,630 --> 00:11:20,709
<font color="#E5E5E5">that waits for some input</font><font color="#CCCCCC"> so let's try</font>

223
00:11:13,600 --> 00:11:27,190
it<font color="#E5E5E5"> in this way and yeah so it's kind of</font>

224
00:11:20,709 --> 00:11:31,479
<font color="#E5E5E5">this it prepares so this is</font><font color="#CCCCCC"> really cool</font>

225
00:11:27,190 --> 00:11:36,010
<font color="#CCCCCC">like everyone done 2018 so you see it's</font>

226
00:11:31,480 --> 00:11:38,649
just how it to do it first<font color="#E5E5E5"> it replace</font>

227
00:11:36,010 --> 00:11:43,240
<font color="#E5E5E5">two with one then it replace C with</font>

228
00:11:38,649 --> 00:11:45,850
another character<font color="#CCCCCC"> and he still keep the</font>

229
00:11:43,240 --> 00:11:50,170
same form<font color="#E5E5E5"> so this is how mutational face</font>

230
00:11:45,850 --> 00:11:56,880
but<font color="#E5E5E5"> fuzzing works and it lumps a tries</font>

231
00:11:50,170 --> 00:11:56,880
to keep the original of the fuzzing<font color="#CCCCCC"> and</font>

232
00:11:57,480 --> 00:12:05,680
is it mine<font color="#E5E5E5"> might be better</font><font color="#CCCCCC"> I remove my</font>

233
00:12:02,410 --> 00:12:09,550
phone from<font color="#CCCCCC"> your pocket okay</font>

234
00:12:05,680 --> 00:12:12,550
<font color="#E5E5E5">so also you have like output it to a</font>

235
00:12:09,550 --> 00:12:20,109
file and in the file you will see<font color="#E5E5E5"> some</font>

236
00:12:12,550 --> 00:12:24,670
output also<font color="#E5E5E5"> you could like generate two</font>

237
00:12:20,110 --> 00:12:27,910
or<font color="#E5E5E5"> five and so on and then you could</font>

238
00:12:24,670 --> 00:12:35,110
output it in different<font color="#CCCCCC"> files like our</font>

239
00:12:27,910 --> 00:12:36,819
percentage and<font color="#E5E5E5"> txt and then you will see</font>

240
00:12:35,110 --> 00:12:39,820
these all files that<font color="#E5E5E5"> were generated</font>

241
00:12:36,820 --> 00:12:43,560
there<font color="#E5E5E5"> we can the size this</font><font color="#CCCCCC"> is big yeah</font>

242
00:12:39,820 --> 00:12:49,750
but it's a notational father it's

243
00:12:43,560 --> 00:12:53,469
nonlinear in this way<font color="#CCCCCC"> also</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> example</font>

244
00:12:49,750 --> 00:12:55,899
if you want<font color="#E5E5E5"> to see what</font><font color="#CCCCCC"> actually happens</font>

245
00:12:53,470 --> 00:12:58,360
you could<font color="#E5E5E5"> use various commands for</font>

246
00:12:55,899 --> 00:13:00,970
<font color="#E5E5E5">example this this one first gives you</font>

247
00:12:58,360 --> 00:13:03,670
the random seed that<font color="#E5E5E5"> was used the</font><font color="#CCCCCC"> same</font>

248
00:13:00,970 --> 00:13:06,470
<font color="#E5E5E5">as in Radames</font><font color="#CCCCCC"> and output and then if you</font>

249
00:13:03,670 --> 00:13:10,219
want<font color="#E5E5E5"> to repeat the result you just</font><font color="#CCCCCC"> use</font>

250
00:13:06,470 --> 00:13:14,750
and you will repeat<font color="#E5E5E5"> this result forever</font>

251
00:13:10,220 --> 00:13:16,640
like because<font color="#CCCCCC"> you selected the seed if</font>

252
00:13:14,750 --> 00:13:20,240
you want to be<font color="#E5E5E5"> more specific</font><font color="#CCCCCC"> you could</font>

253
00:13:16,640 --> 00:13:23,030
use<font color="#E5E5E5"> output</font><font color="#CCCCCC"> of the metadata</font><font color="#E5E5E5"> which gives</font>

254
00:13:20,240 --> 00:13:25,280
you actually the way how this result

255
00:13:23,030 --> 00:13:31,360
<font color="#E5E5E5">this is</font><font color="#CCCCCC"> not good result let's do this</font>

256
00:13:25,280 --> 00:13:34,640
result<font color="#E5E5E5"> like how this was got so first it</font>

257
00:13:31,360 --> 00:13:38,180
tries<font color="#CCCCCC"> to insert some UTF and it fails</font>

258
00:13:34,640 --> 00:13:41,030
<font color="#E5E5E5">and then it tries</font><font color="#CCCCCC"> sgml and it fails then</font>

259
00:13:38,180 --> 00:13:44,150
it<font color="#E5E5E5"> actually remove some stuff then it</font>

260
00:13:41,030 --> 00:13:46,069
dropped some<font color="#E5E5E5"> bite then it tries to do</font>

261
00:13:44,150 --> 00:13:48,319
some mutations they all<font color="#CCCCCC"> fail</font><font color="#E5E5E5"> and in the</font>

262
00:13:46,070 --> 00:13:51,320
end he<font color="#CCCCCC"> mutated</font><font color="#E5E5E5"> some number</font><font color="#CCCCCC"> so actually</font>

263
00:13:48,320 --> 00:13:56,480
we should yeah it's converted 2008 18

264
00:13:51,320 --> 00:14:02,740
2000 to 2019<font color="#CCCCCC"> so here you could analyze</font>

265
00:13:56,480 --> 00:14:02,740
<font color="#E5E5E5">what mutations were done also</font><font color="#CCCCCC"> if you</font>

266
00:14:03,910 --> 00:14:17,510
like you could output to the<font color="#E5E5E5"> whatever</font>

267
00:14:15,220 --> 00:14:25,040
<font color="#E5E5E5">for example you could do like this</font>

268
00:14:17,510 --> 00:14:28,580
<font color="#E5E5E5">or you could do like this and it should</font>

269
00:14:25,040 --> 00:14:30,920
<font color="#CCCCCC">work yeah in</font><font color="#E5E5E5"> this case to get</font><font color="#CCCCCC"> the proper</font>

270
00:14:28,580 --> 00:14:31,580
one you should remove of course -<font color="#CCCCCC"> ah</font>

271
00:14:30,920 --> 00:14:38,390
sorry

272
00:14:31,580 --> 00:14:41,930
-<font color="#CCCCCC"> sin month yeah</font><font color="#E5E5E5"> it'll</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> so let's</font>

273
00:14:38,390 --> 00:14:45,980
remove this and also<font color="#E5E5E5"> you could specify</font>

274
00:14:41,930 --> 00:14:52,760
any other output so if we will look at

275
00:14:45,980 --> 00:14:55,880
the possible outputs here<font color="#E5E5E5"> you could see</font>

276
00:14:52,760 --> 00:15:00,020
<font color="#E5E5E5">that it could</font><font color="#CCCCCC"> be raw output like we</font>

277
00:14:55,880 --> 00:15:01,970
could output<font color="#E5E5E5"> to the raw packet which</font>

278
00:15:00,020 --> 00:15:05,090
will be embedded<font color="#E5E5E5"> in the ethernet packet</font>

279
00:15:01,970 --> 00:15:07,010
we also could output<font color="#CCCCCC"> at the IP level</font><font color="#E5E5E5"> so</font>

280
00:15:05,090 --> 00:15:10,220
you could fast<font color="#CCCCCC"> OSPF for example and I</font>

281
00:15:07,010 --> 00:15:13,010
used it<font color="#E5E5E5"> to</font><font color="#CCCCCC"> fast OSPF</font><font color="#E5E5E5"> you could output to</font>

282
00:15:10,220 --> 00:15:15,800
<font color="#CCCCCC">HTTP also specify whether</font><font color="#E5E5E5"> it will</font><font color="#CCCCCC"> be get</font>

283
00:15:13,010 --> 00:15:18,710
a post and<font color="#E5E5E5"> the form the parameters</font><font color="#CCCCCC"> the</font>

284
00:15:15,800 --> 00:15:19,540
headers<font color="#E5E5E5"> for example using this form you</font>

285
00:15:18,710 --> 00:15:21,820
<font color="#E5E5E5">could specify the</font>

286
00:15:19,540 --> 00:15:24,790
<font color="#E5E5E5">heather's even the headers that will</font>

287
00:15:21,820 --> 00:15:28,000
will<font color="#CCCCCC"> be</font><font color="#E5E5E5"> in doubt go</font><font color="#CCCCCC"> enquiry it could be</font>

288
00:15:24,790 --> 00:15:36,449
also a server<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example you</font><font color="#E5E5E5"> could use</font>

289
00:15:28,000 --> 00:15:46,959
<font color="#CCCCCC">like this Michael let me use date and</font>

290
00:15:36,449 --> 00:15:49,599
then if<font color="#E5E5E5"> I connect to local host and then</font>

291
00:15:46,959 --> 00:15:53,349
type something<font color="#CCCCCC"> I will get something that</font>

292
00:15:49,600 --> 00:15:56,649
was rotated by alums<font color="#CCCCCC"> so you could use it</font>

293
00:15:53,350 --> 00:15:58,569
<font color="#CCCCCC">in any way</font><font color="#E5E5E5"> you want with any output and</font>

294
00:15:56,649 --> 00:15:59,290
input<font color="#CCCCCC"> it's not</font><font color="#E5E5E5"> just limited and in</font>

295
00:15:58,569 --> 00:16:01,870
Radames

296
00:15:59,290 --> 00:16:03,610
so actually it's like a tool that just

297
00:16:01,870 --> 00:16:07,690
<font color="#CCCCCC">ready</font><font color="#E5E5E5"> from scratch and you need one</font>

298
00:16:03,610 --> 00:16:11,980
<font color="#CCCCCC">minute to start fuzzing the next thing</font>

299
00:16:07,690 --> 00:16:16,690
is our lumps as a service<font color="#CCCCCC"> what you could</font>

300
00:16:11,980 --> 00:16:19,269
do is to run<font color="#E5E5E5"> it as a service so actually</font>

301
00:16:16,690 --> 00:16:24,209
you specify the end point<font color="#E5E5E5"> where it will</font>

302
00:16:19,269 --> 00:16:29,470
listen and I specify logging also and

303
00:16:24,209 --> 00:16:40,239
<font color="#CCCCCC">then I could go</font><font color="#E5E5E5"> I think</font><font color="#CCCCCC"> create another</font>

304
00:16:29,470 --> 00:16:45,760
window<font color="#CCCCCC"> and then there are a lot of</font><font color="#E5E5E5"> coins</font>

305
00:16:40,240 --> 00:16:48,569
<font color="#E5E5E5">for</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> it could</font><font color="#CCCCCC"> be used from node.js</font>

306
00:16:45,760 --> 00:16:51,850
from<font color="#E5E5E5"> Python from C sharp</font><font color="#CCCCCC"> and from Freida</font>

307
00:16:48,569 --> 00:16:59,139
<font color="#E5E5E5">so first let's try</font><font color="#CCCCCC"> python</font>

308
00:16:51,850 --> 00:17:03,130
so it's Python 2.7<font color="#E5E5E5"> like this and you may</font>

309
00:16:59,139 --> 00:17:06,689
see here sorry that<font color="#CCCCCC"> father accepts some</font>

310
00:17:03,130 --> 00:17:09,369
data and<font color="#E5E5E5"> doing some fuzzing and also</font>

311
00:17:06,689 --> 00:17:12,400
records<font color="#CCCCCC"> everything</font><font color="#E5E5E5"> so it's very handy</font>

312
00:17:09,369 --> 00:17:15,698
<font color="#E5E5E5">now if you need and how it is done</font><font color="#CCCCCC"> I</font>

313
00:17:12,400 --> 00:17:16,510
<font color="#E5E5E5">will not use no no because pancake will</font>

314
00:17:15,699 --> 00:17:22,959
be angry<font color="#CCCCCC"> at me</font>

315
00:17:16,510 --> 00:17:26,679
<font color="#E5E5E5">so I will</font><font color="#CCCCCC"> use and vim yeah so it's very</font>

316
00:17:22,959 --> 00:17:29,890
<font color="#E5E5E5">easy we</font><font color="#CCCCCC"> just create an HTTP query</font><font color="#E5E5E5"> HTTP</font>

317
00:17:26,679 --> 00:17:32,450
<font color="#E5E5E5">POST query to</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> address</font>

318
00:17:29,890 --> 00:17:34,580
<font color="#E5E5E5">this is endpoint</font><font color="#CCCCCC"> undress to this you</font>

319
00:17:32,450 --> 00:17:38,090
right<font color="#CCCCCC"> we set content type as</font>

320
00:17:34,580 --> 00:17:39,769
application/octet-stream<font color="#E5E5E5"> and we put the</font>

321
00:17:38,090 --> 00:17:44,600
data<font color="#E5E5E5"> that we</font><font color="#CCCCCC"> want to</font><font color="#E5E5E5"> fast in the body</font>

322
00:17:39,769 --> 00:17:52,669
and that's all and similarly you could

323
00:17:44,600 --> 00:17:55,309
do it<font color="#E5E5E5"> using not client yeah you see this</font>

324
00:17:52,669 --> 00:17:59,299
is<font color="#E5E5E5"> how</font><font color="#CCCCCC"> it works also you may have</font><font color="#E5E5E5"> a</font>

325
00:17:55,309 --> 00:18:01,639
<font color="#CCCCCC">question how to pass some arguments to</font>

326
00:17:59,299 --> 00:18:04,809
the<font color="#CCCCCC"> father</font><font color="#E5E5E5"> if it running as a service</font>

327
00:18:01,639 --> 00:18:08,510
like seed or some specific<font color="#CCCCCC"> parameters</font>

328
00:18:04,809 --> 00:18:11,450
<font color="#CCCCCC">that could be done over JSON and point</font>

329
00:18:08,510 --> 00:18:13,820
<font color="#E5E5E5">so</font><font color="#CCCCCC"> alumna has twin points the plain HTTP</font>

330
00:18:11,450 --> 00:18:16,580
which is very simple<font color="#CCCCCC"> you</font><font color="#E5E5E5"> could do it you</font>

331
00:18:13,820 --> 00:18:19,908
<font color="#CCCCCC">could even use</font><font color="#E5E5E5"> curl for it so just for</font>

332
00:18:16,580 --> 00:18:24,230
handy<font color="#E5E5E5"> stuff where you send in body and</font>

333
00:18:19,909 --> 00:18:32,980
you get the mutation<font color="#E5E5E5"> again in body</font>

334
00:18:24,230 --> 00:18:38,720
this is JSON<font color="#CCCCCC"> endpoint so how it works</font><font color="#E5E5E5"> it</font>

335
00:18:32,980 --> 00:18:41,600
it<font color="#E5E5E5"> sends an JSON object to the father</font>

336
00:18:38,720 --> 00:18:46,179
<font color="#CCCCCC">actually it has data field when you</font>

337
00:18:41,600 --> 00:18:50,289
embed base64 encoded data you have seed

338
00:18:46,179 --> 00:18:52,820
for example if you want and<font color="#E5E5E5"> you could</font>

339
00:18:50,289 --> 00:18:55,250
send other parameters<font color="#CCCCCC"> like pattern or</font>

340
00:18:52,820 --> 00:19:00,110
<font color="#E5E5E5">whatever and it's really really</font><font color="#CCCCCC"> easy</font>

341
00:18:55,250 --> 00:19:04,610
<font color="#E5E5E5">it's just just a HTTP query with</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> JSON</font>

342
00:19:00,110 --> 00:19:06,590
in the body and<font color="#CCCCCC"> that's all</font><font color="#E5E5E5"> so on we</font>

343
00:19:04,610 --> 00:19:09,769
could<font color="#E5E5E5"> check and here it will return the</font>

344
00:19:06,590 --> 00:19:11,779
same<font color="#E5E5E5"> results because</font><font color="#CCCCCC"> we set</font><font color="#E5E5E5"> the seed to</font>

345
00:19:09,769 --> 00:19:20,120
one constant so result will be the

346
00:19:11,779 --> 00:19:22,779
<font color="#E5E5E5">constant so let's get back here and</font>

347
00:19:20,120 --> 00:19:29,779
[Music]

348
00:19:22,779 --> 00:19:31,610
always so<font color="#E5E5E5"> also you could use c-sharp</font>

349
00:19:29,779 --> 00:19:34,580
<font color="#E5E5E5">I will not demonstrate the shop code to</font>

350
00:19:31,610 --> 00:19:37,580
save time<font color="#CCCCCC"> and also not</font><font color="#E5E5E5"> I can reach the</font>

351
00:19:34,580 --> 00:19:40,428
audience<font color="#E5E5E5"> but you could use dotnet dotnet</font>

352
00:19:37,580 --> 00:19:44,059
or.net<font color="#E5E5E5"> core the example on the github</font>

353
00:19:40,429 --> 00:19:46,250
<font color="#E5E5E5">allows you to do it</font><font color="#CCCCCC"> also there</font><font color="#E5E5E5"> is a</font>

354
00:19:44,059 --> 00:19:48,889
docker image so<font color="#E5E5E5"> you just build the</font>

355
00:19:46,250 --> 00:19:55,450
<font color="#E5E5E5">docker image from this docker file and</font>

356
00:19:48,889 --> 00:19:57,709
then<font color="#CCCCCC"> just forward the port 1 771</font><font color="#E5E5E5"> to the</font>

357
00:19:55,450 --> 00:20:00,350
<font color="#E5E5E5">just</font><font color="#CCCCCC"> forward</font><font color="#E5E5E5"> the port to your host</font>

358
00:19:57,710 --> 00:20:02,779
system and then<font color="#E5E5E5"> just try it and it will</font>

359
00:20:00,350 --> 00:20:06,678
<font color="#CCCCCC">work the</font><font color="#E5E5E5"> same</font><font color="#CCCCCC"> the reason why I don't</font>

360
00:20:02,779 --> 00:20:09,620
<font color="#E5E5E5">like to</font><font color="#CCCCCC"> use docker</font><font color="#E5E5E5"> here and I'm not</font>

361
00:20:06,679 --> 00:20:12,320
recommending<font color="#CCCCCC"> it</font><font color="#E5E5E5"> because Iran is very</font>

362
00:20:09,620 --> 00:20:16,370
memory hungry<font color="#E5E5E5"> so your docker image will</font>

363
00:20:12,320 --> 00:20:18,320
need a<font color="#E5E5E5"> lot of memory but just for</font>

364
00:20:16,370 --> 00:20:21,979
testing<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> but if you will need</font>

365
00:20:18,320 --> 00:20:25,220
like do more than 1,000 requests per

366
00:20:21,980 --> 00:20:29,059
second then probably<font color="#E5E5E5"> it will just crush</font>

367
00:20:25,220 --> 00:20:32,659
because<font color="#E5E5E5"> of memory</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> not enough</font><font color="#CCCCCC"> memory</font>

368
00:20:29,059 --> 00:20:34,908
and the third node so we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> standalone</font>

369
00:20:32,659 --> 00:20:39,200
<font color="#E5E5E5">mode we have service mode and there is a</font>

370
00:20:34,909 --> 00:20:45,260
third node<font color="#E5E5E5"> it's a proxy</font><font color="#CCCCCC"> let me show you</font>

371
00:20:39,200 --> 00:20:50,750
how it works<font color="#E5E5E5"> as a proxy so let me run</font>

372
00:20:45,260 --> 00:20:54,350
some server<font color="#E5E5E5"> and then we will try to</font>

373
00:20:50,750 --> 00:20:59,840
connect<font color="#E5E5E5"> to it so now I'm getting</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> the</font>

374
00:20:54,350 --> 00:21:03,139
same result<font color="#E5E5E5"> but then I could run just a</font>

375
00:20:59,840 --> 00:21:06,769
second<font color="#E5E5E5"> okey now let me run it from here</font>

376
00:21:03,139 --> 00:21:12,320
<font color="#CCCCCC">I could run a real um say the proxy</font><font color="#E5E5E5"> so</font>

377
00:21:06,769 --> 00:21:15,559
what I need<font color="#E5E5E5"> is I said TCP the</font><font color="#CCCCCC"> endpoint</font>

378
00:21:12,320 --> 00:21:18,439
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> that will be listening</font><font color="#E5E5E5"> and the</font>

379
00:21:15,559 --> 00:21:21,080
endpoint<font color="#CCCCCC"> that where we will connect and</font>

380
00:21:18,440 --> 00:21:24,110
then probabilities probability of

381
00:21:21,080 --> 00:21:27,049
mutating data from server to client<font color="#E5E5E5"> and</font>

382
00:21:24,110 --> 00:21:27,330
<font color="#E5E5E5">probability of mutating data from client</font>

383
00:21:27,049 --> 00:21:29,580
<font color="#CCCCCC">to</font>

384
00:21:27,330 --> 00:21:34,050
so you could<font color="#CCCCCC"> pass either one side or</font>

385
00:21:29,580 --> 00:21:37,139
another<font color="#E5E5E5"> side or both so it's</font><font color="#CCCCCC"> kinda like</font>

386
00:21:34,050 --> 00:21:42,270
<font color="#CCCCCC">this</font><font color="#E5E5E5"> if I'm not mistaken yeah now it</font>

387
00:21:37,140 --> 00:21:49,560
works and now<font color="#CCCCCC"> if we will oops</font>

388
00:21:42,270 --> 00:21:53,190
<font color="#CCCCCC">d my effect it crashed now</font><font color="#E5E5E5"> ah</font><font color="#CCCCCC"> I just</font>

389
00:21:49,560 --> 00:22:02,310
crushed it<font color="#E5E5E5"> okay I mean I</font><font color="#CCCCCC"> just closed the</font>

390
00:21:53,190 --> 00:22:10,700
<font color="#E5E5E5">tab with simple HTTP server so let me</font>

391
00:22:02,310 --> 00:22:10,700
rerun it<font color="#CCCCCC"> myself</font>

392
00:22:13,140 --> 00:22:22,190
oh my god now please Python demo<font color="#E5E5E5"> effect</font>

393
00:22:21,180 --> 00:22:31,380
sorry

394
00:22:22,190 --> 00:22:36,170
<font color="#E5E5E5">okay now it where is yeah yeah yeah it</font>

395
00:22:31,380 --> 00:22:39,510
kind of this<font color="#E5E5E5"> okay ah here it is okay</font>

396
00:22:36,170 --> 00:22:41,690
<font color="#E5E5E5">it's running action so we tried to cheat</font>

397
00:22:39,510 --> 00:22:41,690
<font color="#CCCCCC">me</font>

398
00:22:45,010 --> 00:22:53,210
yeah yeah<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> just I'm just create a</font>

399
00:22:50,840 --> 00:22:57,290
loop<font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> so it's</font><font color="#E5E5E5"> kind of this thinking</font>

400
00:22:53,210 --> 00:22:59,990
<font color="#E5E5E5">so as you can</font><font color="#CCCCCC"> see it and if I add like</font>

401
00:22:57,290 --> 00:23:02,030
<font color="#CCCCCC">minus e it</font><font color="#E5E5E5"> will look it better</font><font color="#CCCCCC"> so it</font>

402
00:22:59,990 --> 00:23:05,840
<font color="#E5E5E5">also try to imitate the</font><font color="#CCCCCC"> fields and</font>

403
00:23:02,030 --> 00:23:08,059
everything<font color="#CCCCCC"> so basically it's</font><font color="#E5E5E5"> I'm using</font>

404
00:23:05,840 --> 00:23:10,790
it every time<font color="#E5E5E5"> I face some</font><font color="#CCCCCC"> network</font>

405
00:23:08,059 --> 00:23:14,210
service because what you typically face

406
00:23:10,790 --> 00:23:15,918
in the real work<font color="#E5E5E5"> you have some client</font>

407
00:23:14,210 --> 00:23:17,780
you<font color="#CCCCCC"> have some service</font><font color="#E5E5E5"> and you don't have</font>

408
00:23:15,919 --> 00:23:19,940
time<font color="#CCCCCC"> to analyze the protocol or at least</font>

409
00:23:17,780 --> 00:23:21,740
you have it<font color="#E5E5E5"> but first you can</font><font color="#CCCCCC"> start</font><font color="#E5E5E5"> the</font>

410
00:23:19,940 --> 00:23:23,660
father and then<font color="#CCCCCC"> you could</font><font color="#E5E5E5"> start</font>

411
00:23:21,740 --> 00:23:25,940
analyzing the protocol<font color="#E5E5E5"> and by the end</font>

412
00:23:23,660 --> 00:23:28,250
<font color="#E5E5E5">you find in the binary where the hell</font>

413
00:23:25,940 --> 00:23:34,850
this protocol parser<font color="#CCCCCC"> maybe you will have</font>

414
00:23:28,250 --> 00:23:41,350
<font color="#CCCCCC">some</font><font color="#E5E5E5"> crashes so and it's just just one</font>

415
00:23:34,850 --> 00:23:44,659
line so you specify<font color="#E5E5E5"> from</font><font color="#CCCCCC"> here to there</font>

416
00:23:41,350 --> 00:23:51,980
<font color="#E5E5E5">where to listen where to connect and</font>

417
00:23:44,660 --> 00:23:55,669
those<font color="#CCCCCC"> are their probabilities so let's</font>

418
00:23:51,980 --> 00:23:57,140
continue documentation<font color="#E5E5E5"> so as every good</font>

419
00:23:55,669 --> 00:23:58,210
<font color="#E5E5E5">open source tool there is</font><font color="#CCCCCC"> no</font>

420
00:23:57,140 --> 00:24:01,490
documentation

421
00:23:58,210 --> 00:24:04,310
actually there is<font color="#E5E5E5"> it's on</font>

422
00:24:01,490 --> 00:24:07,190
and github<font color="#CCCCCC"> and it gives you the basics</font>

423
00:24:04,310 --> 00:24:09,050
<font color="#E5E5E5">like the same I'm explaining to you I</font>

424
00:24:07,190 --> 00:24:11,540
don't<font color="#E5E5E5"> have time to write a proper</font>

425
00:24:09,050 --> 00:24:14,600
documentation but it's<font color="#CCCCCC"> pretty big like</font>

426
00:24:11,540 --> 00:24:17,210
it describes all<font color="#CCCCCC"> the stuff like how to</font>

427
00:24:14,600 --> 00:24:21,230
run what<font color="#CCCCCC"> mounts what options</font><font color="#E5E5E5"> so what</font>

428
00:24:17,210 --> 00:24:27,770
else do you<font color="#E5E5E5"> need and also there</font><font color="#CCCCCC"> is a</font>

429
00:24:21,230 --> 00:24:31,880
<font color="#E5E5E5">help so there are plenty of options</font>

430
00:24:27,770 --> 00:24:34,460
<font color="#CCCCCC">please don't no good description I think</font>

431
00:24:31,880 --> 00:24:36,410
<font color="#CCCCCC">maybe not good and there</font><font color="#E5E5E5"> is also a list</font>

432
00:24:34,460 --> 00:24:39,020
of<font color="#E5E5E5"> all possible mutations patterns</font>

433
00:24:36,410 --> 00:24:42,140
generators inputs outputs whatever is

434
00:24:39,020 --> 00:24:44,240
used so you could and they are a<font color="#CCCCCC"> little</font>

435
00:24:42,140 --> 00:24:49,430
it is<font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bigger than in random so</font>

436
00:24:44,240 --> 00:24:53,660
like twice a bigger<font color="#CCCCCC"> kind of this so yeah</font>

437
00:24:49,430 --> 00:24:59,290
a word about architecture so we have

438
00:24:53,660 --> 00:25:02,510
<font color="#E5E5E5">seven basic blocks</font><font color="#CCCCCC"> input and output</font>

439
00:24:59,290 --> 00:25:06,379
<font color="#E5E5E5">which could receive</font><font color="#CCCCCC"> from generators</font>

440
00:25:02,510 --> 00:25:09,170
I mean sockets<font color="#E5E5E5"> or files or a studio</font><font color="#CCCCCC"> a</font>

441
00:25:06,380 --> 00:25:12,530
service and proxy<font color="#E5E5E5"> then the data goes to</font>

442
00:25:09,170 --> 00:25:14,930
<font color="#CCCCCC">predicting patterns predicting patterns</font>

443
00:25:12,530 --> 00:25:17,180
try to understand what the kind of<font color="#E5E5E5"> the</font>

444
00:25:14,930 --> 00:25:19,280
data would<font color="#CCCCCC"> have so maybe we could use</font>

445
00:25:17,180 --> 00:25:21,860
some<font color="#E5E5E5"> heuristics there for example one of</font>

446
00:25:19,280 --> 00:25:25,220
predicting packets<font color="#E5E5E5"> patterns is skipper</font>

447
00:25:21,860 --> 00:25:27,469
<font color="#E5E5E5">but actually what it</font><font color="#CCCCCC"> is doing is just</font>

448
00:25:25,220 --> 00:25:29,450
detect whether there is some<font color="#CCCCCC"> heater of</font>

449
00:25:27,470 --> 00:25:32,390
the packet<font color="#E5E5E5"> which is constant and tried</font>

450
00:25:29,450 --> 00:25:35,120
<font color="#CCCCCC">to prevent mutating of it</font><font color="#E5E5E5"> so we will</font>

451
00:25:32,390 --> 00:25:39,380
mutate on the body<font color="#E5E5E5"> another this</font><font color="#CCCCCC"> is sizer</font>

452
00:25:35,120 --> 00:25:41,899
<font color="#E5E5E5">it detects the size inside packet if it</font>

453
00:25:39,380 --> 00:25:44,480
finds some field that could<font color="#E5E5E5"> be the sizer</font>

454
00:25:41,900 --> 00:25:47,780
of the body<font color="#E5E5E5"> then it mutates the body and</font>

455
00:25:44,480 --> 00:25:52,780
fix the sizer<font color="#E5E5E5"> so in this way it also</font>

456
00:25:47,780 --> 00:25:55,760
works<font color="#E5E5E5"> with</font><font color="#CCCCCC"> the packets with embedded</font>

457
00:25:52,780 --> 00:25:58,970
<font color="#CCCCCC">sizers and also it works with the packet</font>

458
00:25:55,760 --> 00:26:01,010
with hierarchy so where one packet have

459
00:25:58,970 --> 00:26:04,700
sizer inside the respected that<font color="#CCCCCC"> have</font>

460
00:26:01,010 --> 00:26:06,860
sizer<font color="#E5E5E5"> it will not work</font><font color="#CCCCCC"> very good</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> you</font>

461
00:26:04,700 --> 00:26:08,720
<font color="#E5E5E5">have hierarchy more than three but I</font>

462
00:26:06,860 --> 00:26:12,649
think with<font color="#E5E5E5"> three it works out perfectly</font>

463
00:26:08,720 --> 00:26:14,809
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> also there are some models like</font>

464
00:26:12,650 --> 00:26:17,120
trying<font color="#E5E5E5"> to detect</font><font color="#CCCCCC"> CRC but they're not</font>

465
00:26:14,809 --> 00:26:21,860
good<font color="#E5E5E5"> there's still not in production</font>

466
00:26:17,120 --> 00:26:25,219
<font color="#CCCCCC">only in death and dilib so it will and</font>

467
00:26:21,860 --> 00:26:26,809
<font color="#E5E5E5">base64 and I think when</font><font color="#CCCCCC"> I have time I</font>

468
00:26:25,220 --> 00:26:28,820
just<font color="#E5E5E5"> publish</font><font color="#CCCCCC"> it because</font><font color="#E5E5E5"> they're working</font>

469
00:26:26,809 --> 00:26:34,190
<font color="#CCCCCC">I think they are more</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> less stable and</font>

470
00:26:28,820 --> 00:26:36,740
<font color="#E5E5E5">ready to to publish</font><font color="#CCCCCC"> mo tating patterns</font>

471
00:26:34,190 --> 00:26:38,870
<font color="#E5E5E5">they are selecting how the mutaters</font>

472
00:26:36,740 --> 00:26:40,940
actually will be<font color="#E5E5E5"> applied so</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> will be</font>

473
00:26:38,870 --> 00:26:44,268
one rotation<font color="#CCCCCC"> or it will be a series of</font>

474
00:26:40,940 --> 00:26:47,059
one mutation<font color="#CCCCCC"> or it will be set of random</font>

475
00:26:44,269 --> 00:26:49,700
different notations the<font color="#CCCCCC"> Monta terse</font>

476
00:26:47,059 --> 00:26:52,009
itself<font color="#E5E5E5"> it's different motors that do</font>

477
00:26:49,700 --> 00:26:54,590
<font color="#E5E5E5">something with the received</font><font color="#CCCCCC"> data from</font>

478
00:26:52,009 --> 00:26:57,259
<font color="#E5E5E5">just changing numbers changing digits</font>

479
00:26:54,590 --> 00:26:59,240
<font color="#E5E5E5">like it could be if it detects that</font>

480
00:26:57,259 --> 00:27:04,129
<font color="#E5E5E5">there is a number in</font><font color="#CCCCCC"> ASCII it will try</font>

481
00:26:59,240 --> 00:27:07,249
to make<font color="#E5E5E5"> it negative or very big or</font>

482
00:27:04,129 --> 00:27:11,799
whatever<font color="#E5E5E5"> if it detects text it will try</font>

483
00:27:07,249 --> 00:27:15,350
to<font color="#E5E5E5"> insert special symbols or UTF or</font>

484
00:27:11,799 --> 00:27:18,049
print characters so typical

485
00:27:15,350 --> 00:27:22,248
Radames<font color="#E5E5E5"> style also</font><font color="#CCCCCC"> the same with</font><font color="#E5E5E5"> binary</font>

486
00:27:18,049 --> 00:27:25,460
<font color="#CCCCCC">DS arnott and additions</font><font color="#E5E5E5"> so typically a</font>

487
00:27:22,249 --> 00:27:27,679
<font color="#E5E5E5">random see is more text oriented lump</font>

488
00:27:25,460 --> 00:27:29,840
sum or<font color="#E5E5E5"> text and binary oriented if it</font>

489
00:27:27,679 --> 00:27:32,240
detects<font color="#CCCCCC"> that it's binary it will try to</font>

490
00:27:29,840 --> 00:27:35,029
<font color="#E5E5E5">find some meaningful numbers and those</font>

491
00:27:32,240 --> 00:27:36,740
applied the<font color="#E5E5E5"> notations to them sometimes</font>

492
00:27:35,029 --> 00:27:38,509
not very<font color="#E5E5E5"> successful sometimes it's very</font>

493
00:27:36,740 --> 00:27:40,730
successful<font color="#CCCCCC"> in working</font><font color="#E5E5E5"> solely depends of</font>

494
00:27:38,509 --> 00:27:43,009
course<font color="#E5E5E5"> it's all about random and outputs</font>

495
00:27:40,730 --> 00:27:46,340
when data goes back

496
00:27:43,009 --> 00:27:49,850
also there is locking system and

497
00:27:46,340 --> 00:27:52,009
monitoring<font color="#E5E5E5"> the logging is locks</font>

498
00:27:49,850 --> 00:27:54,459
<font color="#CCCCCC">everything that was going on</font><font color="#E5E5E5"> including</font>

499
00:27:52,009 --> 00:27:56,720
input data<font color="#E5E5E5"> and output</font><font color="#CCCCCC"> data and</font>

500
00:27:54,460 --> 00:27:59,649
monitoring which actually you could<font color="#E5E5E5"> use</font>

501
00:27:56,720 --> 00:28:03,110
<font color="#CCCCCC">to monitor</font><font color="#E5E5E5"> and restart the target and</font>

502
00:27:59,649 --> 00:28:07,158
there are external<font color="#E5E5E5"> models actually they</font>

503
00:28:03,110 --> 00:28:08,299
could<font color="#CCCCCC"> be applied at two points first you</font>

504
00:28:07,159 --> 00:28:10,460
could use custom mutator

505
00:28:08,299 --> 00:28:12,440
if you need it<font color="#E5E5E5"> or you could use custom</font>

506
00:28:10,460 --> 00:28:17,389
post processor and<font color="#E5E5E5"> we will discuss</font><font color="#CCCCCC"> them</font>

507
00:28:12,440 --> 00:28:21,279
<font color="#E5E5E5">a little later so small world</font>

508
00:28:17,389 --> 00:28:26,219
on them advanced patterns and mutators

509
00:28:21,279 --> 00:28:29,530
<font color="#CCCCCC">mmm ok</font><font color="#E5E5E5"> show an</font><font color="#CCCCCC"> example</font>

510
00:28:26,220 --> 00:28:38,800
so actually let<font color="#CCCCCC"> me first show it using</font>

511
00:28:29,530 --> 00:28:41,230
<font color="#CCCCCC">xxd so this is sorry so this is a some</font>

512
00:28:38,800 --> 00:28:43,629
packet and<font color="#CCCCCC"> you can see that this is a</font>

513
00:28:41,230 --> 00:28:46,170
sizer<font color="#CCCCCC"> actually this is a sizer which</font>

514
00:28:43,630 --> 00:28:49,570
specifies<font color="#CCCCCC"> the</font><font color="#E5E5E5"> size of this block and</font>

515
00:28:46,170 --> 00:28:52,720
here is the header of the<font color="#E5E5E5"> packet here is</font>

516
00:28:49,570 --> 00:28:56,350
the tail<font color="#E5E5E5"> and then we could</font><font color="#CCCCCC"> just apply</font><font color="#E5E5E5"> a</font>

517
00:28:52,720 --> 00:29:01,570
lump<font color="#E5E5E5"> secure it and specify</font><font color="#CCCCCC"> for example</font>

518
00:28:56,350 --> 00:29:04,480
<font color="#CCCCCC">sizer</font><font color="#E5E5E5"> pattern and use X 60 and</font><font color="#CCCCCC"> you can</font>

519
00:29:01,570 --> 00:29:08,470
see that actually<font color="#CCCCCC"> it added some stuff</font>

520
00:29:04,480 --> 00:29:13,210
here<font color="#CCCCCC"> so the packet body was mutated but</font>

521
00:29:08,470 --> 00:29:19,150
it also correctly<font color="#E5E5E5"> updated the sizer if</font>

522
00:29:13,210 --> 00:29:21,640
we will ask random so to explain then

523
00:29:19,150 --> 00:29:23,650
you can see<font color="#E5E5E5"> that here the</font><font color="#CCCCCC"> sizer pattern</font>

524
00:29:21,640 --> 00:29:29,530
was worked and it detected that the

525
00:29:23,650 --> 00:29:33,250
sizer has size of<font color="#E5E5E5"> 8 it Valley is 25</font>

526
00:29:29,530 --> 00:29:36,910
bytes it starts on<font color="#E5E5E5"> 3 and ends on 29 so</font>

527
00:29:33,250 --> 00:29:39,640
it's just as we expected so<font color="#CCCCCC"> that's was</font>

528
00:29:36,910 --> 00:29:42,550
<font color="#E5E5E5">our original packet so</font><font color="#CCCCCC"> The Cider work</font>

529
00:29:39,640 --> 00:29:46,059
are really really good<font color="#E5E5E5"> I mean that works</font>

530
00:29:42,550 --> 00:29:49,419
from the beginning<font color="#CCCCCC"> of</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> Lum cell so</font>

531
00:29:46,059 --> 00:29:52,030
it's it's<font color="#E5E5E5"> pretty good skipper works the</font>

532
00:29:49,420 --> 00:29:56,140
<font color="#E5E5E5">worse sometimes</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> just don't understand</font>

533
00:29:52,030 --> 00:29:59,559
what to skip some form of detectors are

534
00:29:56,140 --> 00:30:02,770
a little<font color="#E5E5E5"> weird so I will show you how</font>

535
00:29:59,559 --> 00:30:04,960
it's<font color="#E5E5E5"> going now so we have</font><font color="#CCCCCC"> stable sizer</font>

536
00:30:02,770 --> 00:30:09,309
<font color="#E5E5E5">and skipper I think and</font><font color="#CCCCCC"> those ASCII and</font>

537
00:30:04,960 --> 00:30:11,890
sgml predictors<font color="#E5E5E5"> and experimental base64</font>

538
00:30:09,309 --> 00:30:14,230
<font color="#E5E5E5">CRC compress data in JSON</font><font color="#CCCCCC"> and I have</font>

539
00:30:11,890 --> 00:30:18,120
planned<font color="#E5E5E5"> also the common format detector</font>

540
00:30:14,230 --> 00:30:20,770
something unifying some common formats

541
00:30:18,120 --> 00:30:22,809
<font color="#CCCCCC">x500</font><font color="#E5E5E5"> because you need</font><font color="#CCCCCC"> it for</font><font color="#E5E5E5"> the</font>

542
00:30:20,770 --> 00:30:26,200
certificates and stuff and<font color="#CCCCCC"> all</font><font color="#E5E5E5"> the</font>

543
00:30:22,809 --> 00:30:27,990
hierarchical data<font color="#E5E5E5"> and those are</font><font color="#CCCCCC"> their</font>

544
00:30:26,200 --> 00:30:30,610
compressed data<font color="#E5E5E5"> other</font>

545
00:30:27,990 --> 00:30:32,950
algorithms rather than sleep but<font color="#CCCCCC"> this</font>

546
00:30:30,610 --> 00:30:35,678
are all<font color="#E5E5E5"> implants</font><font color="#CCCCCC"> I think the second</font>

547
00:30:32,950 --> 00:30:37,390
column should<font color="#CCCCCC"> be integrated</font><font color="#E5E5E5"> by the end</font>

548
00:30:35,679 --> 00:30:41,150
of the year

549
00:30:37,390 --> 00:30:42,740
the thing how I develop<font color="#CCCCCC"> alum say is two</font>

550
00:30:41,150 --> 00:30:45,620
branches<font color="#E5E5E5"> because I'm the only one</font>

551
00:30:42,740 --> 00:30:47,630
developer<font color="#E5E5E5"> I have stable branch which</font>

552
00:30:45,620 --> 00:30:48,080
should work like you download<font color="#CCCCCC"> it</font><font color="#E5E5E5"> and it</font>

553
00:30:47,630 --> 00:30:51,380
worked

554
00:30:48,080 --> 00:30:53,570
sometimes<font color="#E5E5E5"> it crashes but it work and I</font>

555
00:30:51,380 --> 00:30:57,920
have development<font color="#E5E5E5"> branch which is private</font>

556
00:30:53,570 --> 00:31:00,110
<font color="#E5E5E5">but the there are a little of code</font>

557
00:30:57,920 --> 00:31:02,210
changes in the main tree<font color="#E5E5E5"> like almost</font>

558
00:31:00,110 --> 00:31:05,240
nothing<font color="#CCCCCC"> or like couple of lines which</font>

559
00:31:02,210 --> 00:31:06,860
are easily ported and<font color="#E5E5E5"> most of the</font>

560
00:31:05,240 --> 00:31:09,080
development<font color="#E5E5E5"> done with the external</font>

561
00:31:06,860 --> 00:31:11,629
models<font color="#E5E5E5"> and once external model working I</font>

562
00:31:09,080 --> 00:31:12,020
just<font color="#CCCCCC"> put it in the main tree</font><font color="#E5E5E5"> and we are</font>

563
00:31:11,630 --> 00:31:17,270
done

564
00:31:12,020 --> 00:31:20,150
it's integrated about logging and

565
00:31:17,270 --> 00:31:23,720
monitoring<font color="#E5E5E5"> logging is very simple you</font>

566
00:31:20,150 --> 00:31:26,930
<font color="#E5E5E5">could specify is with minus L option and</font>

567
00:31:23,720 --> 00:31:30,890
you could log to study<font color="#CCCCCC"> instead out there</font>

568
00:31:26,930 --> 00:31:33,860
<font color="#CCCCCC">to file in text or CSV format to naziha</font>

569
00:31:30,890 --> 00:31:37,490
no sequel<font color="#E5E5E5"> Erlang in memory database if</font>

570
00:31:33,860 --> 00:31:39,649
you want some<font color="#E5E5E5"> to log a</font><font color="#CCCCCC"> lot of data</font><font color="#E5E5E5"> it</font>

571
00:31:37,490 --> 00:31:42,860
<font color="#E5E5E5">could be useful or to syslog if you want</font>

572
00:31:39,650 --> 00:31:45,740
remote logging<font color="#E5E5E5"> monitoring could be now</font>

573
00:31:42,860 --> 00:31:50,030
done via three possible monitors<font color="#E5E5E5"> its c</font>

574
00:31:45,740 --> 00:31:52,880
<font color="#E5E5E5">DB microsoft c DB plugin for windows</font>

575
00:31:50,030 --> 00:31:58,370
system<font color="#CCCCCC"> its logcat a DB for Android and</font>

576
00:31:52,880 --> 00:32:01,310
it's r2<font color="#E5E5E5"> for</font><font color="#CCCCCC"> OSX</font><font color="#E5E5E5"> and Linux</font><font color="#CCCCCC"> and before</font>

577
00:31:58,370 --> 00:32:02,870
<font color="#CCCCCC">going to monitors let's discuss external</font>

578
00:32:01,310 --> 00:32:05,629
<font color="#E5E5E5">models or let's cook some pancakes</font>

579
00:32:02,870 --> 00:32:11,360
<font color="#E5E5E5">actually let's create a mutation</font>

580
00:32:05,630 --> 00:32:14,680
imitator<font color="#CCCCCC"> that will embed the data inside</font>

581
00:32:11,360 --> 00:32:19,490
<font color="#E5E5E5">pancake tag why not</font>

582
00:32:14,680 --> 00:32:22,780
so let's do it<font color="#CCCCCC"> like I will embed radar</font>

583
00:32:19,490 --> 00:32:22,780
in pancake

584
00:32:23,900 --> 00:32:31,040
sorry<font color="#E5E5E5"> round</font><font color="#CCCCCC"> r2</font><font color="#E5E5E5"> and so I've already this</font>

585
00:32:28,970 --> 00:32:35,930
have this<font color="#E5E5E5"> model it's called external</font>

586
00:32:31,040 --> 00:32:43,700
muta and and it's part of the examples

587
00:32:35,930 --> 00:32:45,950
<font color="#E5E5E5">and here it is so yeah once it tries</font><font color="#CCCCCC"> to</font>

588
00:32:43,700 --> 00:32:49,010
apply<font color="#E5E5E5"> it in a different ways so you see</font>

589
00:32:45,950 --> 00:32:50,610
sometimes<font color="#E5E5E5"> it creates like this because</font>

590
00:32:49,010 --> 00:32:52,140
it skips something

591
00:32:50,610 --> 00:32:54,449
<font color="#E5E5E5">and start this is a skipper pattern</font>

592
00:32:52,140 --> 00:32:56,190
working<font color="#E5E5E5"> you see skipper</font><font color="#CCCCCC"> pattern</font>

593
00:32:54,450 --> 00:32:59,130
sometimes<font color="#CCCCCC"> is just crazy it thinks that</font>

594
00:32:56,190 --> 00:33:02,100
<font color="#CCCCCC">rod r2 is a packet and RI is</font><font color="#E5E5E5"> just a</font>

595
00:32:59,130 --> 00:33:04,350
header on<font color="#CCCCCC"> the</font><font color="#E5E5E5"> ticket but because it's</font>

596
00:33:02,100 --> 00:33:06,120
too<font color="#E5E5E5"> small the more data you supply the</font>

597
00:33:04,350 --> 00:33:08,610
better it works of<font color="#CCCCCC"> course</font><font color="#E5E5E5"> because the</font>

598
00:33:06,120 --> 00:33:12,689
less data<font color="#E5E5E5"> heuristics and doesn't work</font>

599
00:33:08,610 --> 00:33:16,219
<font color="#E5E5E5">well on small data and how</font><font color="#CCCCCC"> we actually</font>

600
00:33:12,690 --> 00:33:26,340
<font color="#E5E5E5">he could be written</font>

601
00:33:16,220 --> 00:33:31,440
no<font color="#CCCCCC"> extra so it's kind of this actually</font>

602
00:33:26,340 --> 00:33:33,510
every model have name should expert for

603
00:33:31,440 --> 00:33:35,660
functions which is capabilities

604
00:33:33,510 --> 00:33:39,090
mutations post and<font color="#CCCCCC"> fuzzer</font>

605
00:33:35,660 --> 00:33:42,990
<font color="#E5E5E5">in this case because it's</font><font color="#CCCCCC"> limitation</font><font color="#E5E5E5"> all</font>

606
00:33:39,090 --> 00:33:44,970
this function are just doing nothing

607
00:33:42,990 --> 00:33:48,240
<font color="#E5E5E5">capabilities expert that this is a</font>

608
00:33:44,970 --> 00:33:51,330
<font color="#E5E5E5">mutation model and then we create a new</font>

609
00:33:48,240 --> 00:33:53,990
mutation with priority to our function

610
00:33:51,330 --> 00:33:53,990
make pancake

611
00:33:54,360 --> 00:34:00,629
the short name and the<font color="#CCCCCC"> description</font><font color="#E5E5E5"> and</font>

612
00:33:57,150 --> 00:34:03,090
then we just created like<font color="#CCCCCC"> this</font><font color="#E5E5E5"> and</font>

613
00:34:00,630 --> 00:34:05,130
actually<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is a mutation</font><font color="#E5E5E5"> so I don't</font>

614
00:34:03,090 --> 00:34:07,620
know how many<font color="#E5E5E5"> people here knows</font><font color="#CCCCCC"> are long</font>

615
00:34:05,130 --> 00:34:10,530
but<font color="#CCCCCC"> if</font><font color="#E5E5E5"> you know are long</font><font color="#CCCCCC"> mmm it's very</font>

616
00:34:07,620 --> 00:34:12,540
simple to embed<font color="#E5E5E5"> something here so if you</font>

617
00:34:10,530 --> 00:34:12,960
need<font color="#E5E5E5"> some</font><font color="#CCCCCC"> specific mutation it's</font><font color="#E5E5E5"> really</font>

618
00:34:12,540 --> 00:34:17,820
easy

619
00:34:12,960 --> 00:34:25,409
other possible thing is for example<font color="#E5E5E5"> if</font>

620
00:34:17,820 --> 00:34:28,650
you need<font color="#E5E5E5"> the custom post processor for</font>

621
00:34:25,409 --> 00:34:31,980
example<font color="#CCCCCC"> for an HTTP protocol</font><font color="#E5E5E5"> you will</font>

622
00:34:28,650 --> 00:34:38,010
<font color="#E5E5E5">need to fix the CRC</font><font color="#CCCCCC"> when the packet is</font>

623
00:34:31,980 --> 00:34:40,920
ready so you just like on post<font color="#CCCCCC"> function</font>

624
00:34:38,010 --> 00:34:42,690
<font color="#E5E5E5">you call the specific function fax a fix</font>

625
00:34:40,920 --> 00:34:45,510
checksum and<font color="#E5E5E5"> here you write the code</font><font color="#CCCCCC"> to</font>

626
00:34:42,690 --> 00:34:49,470
fix<font color="#E5E5E5"> the checksum so it's very very</font><font color="#CCCCCC"> easy</font>

627
00:34:45,510 --> 00:34:52,650
and the same<font color="#E5E5E5"> I've done for IP when I</font>

628
00:34:49,469 --> 00:35:01,399
fast<font color="#E5E5E5"> IP on packets against embedded</font>

629
00:34:52,650 --> 00:35:04,920
system and those how you could tweak the

630
00:35:01,400 --> 00:35:07,980
fuzzy<font color="#CCCCCC"> there</font><font color="#E5E5E5"> are several options let's</font>

631
00:35:04,920 --> 00:35:11,310
start with a stent option so imagine

632
00:35:07,980 --> 00:35:14,160
that you need you<font color="#E5E5E5"> fast some complex</font>

633
00:35:11,310 --> 00:35:16,110
protocol<font color="#E5E5E5"> and you don't and the first</font>

634
00:35:14,160 --> 00:35:19,100
stage of the protocol is authentication

635
00:35:16,110 --> 00:35:21,600
<font color="#E5E5E5">so you want the authentication to be</font>

636
00:35:19,100 --> 00:35:24,150
correctly passed<font color="#E5E5E5"> you could use two</font>

637
00:35:21,600 --> 00:35:25,980
parameters first is a stamp which

638
00:35:24,150 --> 00:35:27,900
actually the coefficient<font color="#E5E5E5"> that will</font>

639
00:35:25,980 --> 00:35:31,170
increase the<font color="#CCCCCC"> probability of fuzzing on</font>

640
00:35:27,900 --> 00:35:32,580
every<font color="#E5E5E5"> next step so you</font><font color="#CCCCCC"> could</font><font color="#E5E5E5"> start with</font>

641
00:35:31,170 --> 00:35:34,530
something<font color="#CCCCCC"> really small and then you</font>

642
00:35:32,580 --> 00:35:37,410
<font color="#E5E5E5">increase increase increase increase and</font>

643
00:35:34,530 --> 00:35:40,140
then in the end you<font color="#E5E5E5"> start fuzzing every</font>

644
00:35:37,410 --> 00:35:44,220
packet<font color="#E5E5E5"> and then next connection it is</font>

645
00:35:40,140 --> 00:35:46,410
repeated another possible<font color="#CCCCCC"> way is to do</font>

646
00:35:44,220 --> 00:35:48,089
<font color="#E5E5E5">it is bypass option where you could</font>

647
00:35:46,410 --> 00:35:50,460
bypass first<font color="#E5E5E5"> five packet and start</font>

648
00:35:48,090 --> 00:35:52,980
fuzzing on the six packet circuits very

649
00:35:50,460 --> 00:35:57,360
handy<font color="#E5E5E5"> also you could change the block</font>

650
00:35:52,980 --> 00:35:58,619
scale this is a minimum block scale<font color="#E5E5E5"> from</font>

651
00:35:57,360 --> 00:36:01,950
which

652
00:35:58,619 --> 00:36:03,839
<font color="#E5E5E5">alum</font><font color="#CCCCCC"> saying is cuts</font><font color="#E5E5E5"> so if it receives</font>

653
00:36:01,950 --> 00:36:06,359
some data

654
00:36:03,839 --> 00:36:10,229
it cuts<font color="#E5E5E5"> it's in a small data blocks and</font>

655
00:36:06,359 --> 00:36:12,058
the minimum size<font color="#E5E5E5"> is 256 so the way how</font>

656
00:36:10,229 --> 00:36:16,218
to make skipper works better<font color="#E5E5E5"> you could</font>

657
00:36:12,059 --> 00:36:19,079
set box<font color="#E5E5E5"> size here like</font><font color="#CCCCCC"> 2 and it start or</font>

658
00:36:16,219 --> 00:36:21,089
<font color="#E5E5E5">3 and it start to work it with a very</font>

659
00:36:19,079 --> 00:36:24,450
small<font color="#E5E5E5"> data so it will not actually work</font>

660
00:36:21,089 --> 00:36:27,058
it<font color="#CCCCCC"> just pass</font><font color="#E5E5E5"> it to mutator but that's</font>

661
00:36:24,450 --> 00:36:32,239
not a good solution<font color="#E5E5E5"> but it could be in</font>

662
00:36:27,059 --> 00:36:39,089
some<font color="#E5E5E5"> area so this is very flexible</font>

663
00:36:32,239 --> 00:36:41,999
other possible<font color="#E5E5E5"> stuff is related to the</font>

664
00:36:39,089 --> 00:36:44,430
performance<font color="#E5E5E5"> first</font><font color="#CCCCCC"> is sleep so actually</font>

665
00:36:41,999 --> 00:36:46,468
if you<font color="#CCCCCC"> have target that he does not</font>

666
00:36:44,430 --> 00:36:48,149
accept too much<font color="#E5E5E5"> data for example it's</font>

667
00:36:46,469 --> 00:36:50,219
some rewritten by the device that will

668
00:36:48,150 --> 00:36:53,339
just freeze if you send<font color="#E5E5E5"> more</font><font color="#CCCCCC"> than 2</font>

669
00:36:50,219 --> 00:36:56,549
packets in second so I saw<font color="#E5E5E5"> that devices</font>

670
00:36:53,339 --> 00:37:00,479
believe me they are real<font color="#E5E5E5"> so you said the</font>

671
00:36:56,549 --> 00:37:04,049
sleep in like 100<font color="#E5E5E5"> to 1000 milliseconds</font>

672
00:37:00,479 --> 00:37:05,759
and everything is working and<font color="#E5E5E5"> to</font>

673
00:37:04,049 --> 00:37:08,249
performance you<font color="#E5E5E5"> could change max</font><font color="#CCCCCC"> running</font>

674
00:37:05,759 --> 00:37:13,559
time so you could limit the fuzzing<font color="#E5E5E5"> to</font>

675
00:37:08,249 --> 00:37:15,419
some value<font color="#E5E5E5"> now it's 30 seconds no data</font>

676
00:37:13,559 --> 00:37:17,339
could<font color="#E5E5E5"> be motivated more than 30 seconds</font>

677
00:37:15,420 --> 00:37:20,420
<font color="#E5E5E5">but you could set it</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> 5 seconds and</font>

678
00:37:17,339 --> 00:37:23,219
<font color="#E5E5E5">then</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> worker will be just killed and</font>

679
00:37:20,420 --> 00:37:26,369
<font color="#E5E5E5">father will just return the data as it</font>

680
00:37:23,219 --> 00:37:28,710
without<font color="#E5E5E5"> falling and also you can specify</font>

681
00:37:26,369 --> 00:37:31,799
a number<font color="#E5E5E5"> of workers typically it's like</font>

682
00:37:28,710 --> 00:37:37,229
10 but you<font color="#E5E5E5"> could set 100</font><font color="#CCCCCC"> and if you have</font>

683
00:37:31,799 --> 00:37:40,819
like 128 gig<font color="#E5E5E5"> Assaf ROM you could set 200</font>

684
00:37:37,229 --> 00:37:46,468
<font color="#E5E5E5">and get a very good</font><font color="#CCCCCC"> performance but it's</font>

685
00:37:40,819 --> 00:37:49,969
it depends on<font color="#E5E5E5"> you also</font><font color="#CCCCCC"> a lump sir has</font>

686
00:37:46,469 --> 00:37:49,969
the thing that called

687
00:37:50,070 --> 00:37:57,900
and but<font color="#E5E5E5"> debugger so actually it's a</font>

688
00:37:52,500 --> 00:38:01,340
normal lung interface for<font color="#E5E5E5"> profiling but</font>

689
00:37:57,900 --> 00:38:05,130
<font color="#E5E5E5">it's I do a trick connected it to the</font>

690
00:38:01,340 --> 00:38:07,050
<font color="#E5E5E5">lumps or so you could see the workers</font>

691
00:38:05,130 --> 00:38:09,020
<font color="#CCCCCC">that are now you</font><font color="#E5E5E5"> know working and the</font>

692
00:38:07,050 --> 00:38:14,250
processes and<font color="#E5E5E5"> that makes debugging</font>

693
00:38:09,020 --> 00:38:15,810
<font color="#E5E5E5">really really handy if you are not</font>

694
00:38:14,250 --> 00:38:19,920
understanding<font color="#CCCCCC"> what is going</font><font color="#E5E5E5"> on but this</font>

695
00:38:15,810 --> 00:38:20,790
<font color="#E5E5E5">is a standard like a long profiler but</font>

696
00:38:19,920 --> 00:38:23,790
I'm running it

697
00:38:20,790 --> 00:38:27,600
not from<font color="#CCCCCC"> there long process but</font><font color="#E5E5E5"> inside</font>

698
00:38:23,790 --> 00:38:29,310
the lumps of process<font color="#E5E5E5"> so that's</font><font color="#CCCCCC"> Wow but</font>

699
00:38:27,600 --> 00:38:36,440
you<font color="#E5E5E5"> might want to use this function if</font>

700
00:38:29,310 --> 00:38:40,680
<font color="#CCCCCC">you are debugging</font><font color="#E5E5E5"> something so and I</font>

701
00:38:36,440 --> 00:38:42,690
think<font color="#E5E5E5"> let's talk about limitations so</font>

702
00:38:40,680 --> 00:38:45,210
<font color="#E5E5E5">minimum recommended run to run on</font>

703
00:38:42,690 --> 00:38:47,280
Windows<font color="#E5E5E5"> is</font><font color="#CCCCCC"> four gigas if you have less</font>

704
00:38:45,210 --> 00:38:49,710
<font color="#CCCCCC">than four biggest</font><font color="#E5E5E5"> in your Windows</font><font color="#CCCCCC"> system</font>

705
00:38:47,280 --> 00:38:52,980
<font color="#E5E5E5">forget</font><font color="#CCCCCC"> about running</font><font color="#E5E5E5"> or lumps it will</font>

706
00:38:49,710 --> 00:38:55,260
fail because<font color="#CCCCCC"> rank is very memory hungry</font>

707
00:38:52,980 --> 00:38:58,170
<font color="#E5E5E5">and on Windows it's like triple memory</font>

708
00:38:55,260 --> 00:38:59,760
<font color="#E5E5E5">hungry because of an optimizing but you</font>

709
00:38:58,170 --> 00:39:03,180
can have a lot of around<font color="#CCCCCC"> me you will not</font>

710
00:38:59,760 --> 00:39:07,620
like notice any drops in performance

711
00:39:03,180 --> 00:39:09,180
like<font color="#CCCCCC"> 80 is perfect also</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> UNIX</font>

712
00:39:07,620 --> 00:39:13,080
<font color="#E5E5E5">platforms say you could not use</font>

713
00:39:09,180 --> 00:39:15,740
ampersand<font color="#E5E5E5"> symbol like this one you know</font>

714
00:39:13,080 --> 00:39:18,540
whether you see any this one if you run

715
00:39:15,740 --> 00:39:21,180
along with<font color="#E5E5E5"> this symbol</font><font color="#CCCCCC"> that will freeze</font>

716
00:39:18,540 --> 00:39:25,380
and zombify<font color="#E5E5E5"> so actually</font><font color="#CCCCCC"> it will need</font><font color="#E5E5E5"> to</font>

717
00:39:21,180 --> 00:39:28,020
kill<font color="#E5E5E5"> it that's not good so I was</font>

718
00:39:25,380 --> 00:39:30,540
fighting how to avoid this<font color="#E5E5E5"> failed</font><font color="#CCCCCC"> so</font>

719
00:39:28,020 --> 00:39:33,210
actually I what I've done is added a

720
00:39:30,540 --> 00:39:34,920
special<font color="#E5E5E5"> option - D - detach</font><font color="#CCCCCC"> so if you</font>

721
00:39:33,210 --> 00:39:38,310
want<font color="#E5E5E5"> to run it in</font><font color="#CCCCCC"> foreground</font><font color="#E5E5E5"> as a</font>

722
00:39:34,920 --> 00:39:40,800
service<font color="#CCCCCC"> you just run it with - D</font><font color="#E5E5E5"> - demo</font>

723
00:39:38,310 --> 00:39:41,580
no - detach<font color="#E5E5E5"> so</font><font color="#CCCCCC"> like old-fashioned</font>

724
00:39:40,800 --> 00:39:45,600
unix-style

725
00:39:41,580 --> 00:39:47,850
<font color="#E5E5E5">and also IP and draw outputs doesn't</font>

726
00:39:45,600 --> 00:39:49,740
work on<font color="#CCCCCC"> Windows and</font><font color="#E5E5E5"> raw output is not</font>

727
00:39:47,850 --> 00:39:53,970
working on<font color="#CCCCCC"> rs6 this</font><font color="#E5E5E5"> is a platform</font>

728
00:39:49,740 --> 00:39:55,620
limitations nothing I could do except

729
00:39:53,970 --> 00:39:56,790
writing a separate driver for Windows

730
00:39:55,620 --> 00:39:59,910
maybe I will

731
00:39:56,790 --> 00:40:01,830
<font color="#CCCCCC">ah let's talk about integration</font><font color="#E5E5E5"> with</font>

732
00:39:59,910 --> 00:40:05,279
friendly

733
00:40:01,830 --> 00:40:09,450
and<font color="#CCCCCC"> with free day</font><font color="#E5E5E5"> it's pretty easy</font>

734
00:40:05,280 --> 00:40:15,330
<font color="#E5E5E5">mmm because let</font><font color="#CCCCCC"> me show you let me</font><font color="#E5E5E5"> run</font>

735
00:40:09,450 --> 00:40:26,129
first<font color="#CCCCCC"> it as a service and then let me</font>

736
00:40:15,330 --> 00:40:31,160
find some window<font color="#E5E5E5"> so here we want to what</font>

737
00:40:26,130 --> 00:40:31,160
we<font color="#CCCCCC"> want to do</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> is we want to</font>

738
00:40:31,250 --> 00:40:39,360
intercept<font color="#E5E5E5"> and fast</font><font color="#CCCCCC"> the returning value</font>

739
00:40:34,350 --> 00:40:44,520
of my<font color="#CCCCCC"> Esther CPI function</font><font color="#E5E5E5"> so why you</font>

740
00:40:39,360 --> 00:40:47,730
need it<font color="#E5E5E5"> it's a typical thing</font><font color="#CCCCCC"> that in for</font>

741
00:40:44,520 --> 00:40:50,610
<font color="#E5E5E5">example is you have some custom client</font>

742
00:40:47,730 --> 00:40:52,860
<font color="#E5E5E5">level of encryption and you want to fast</font>

743
00:40:50,610 --> 00:40:55,680
what's inside<font color="#CCCCCC"> that encryption not the</font>

744
00:40:52,860 --> 00:40:58,380
encrypted<font color="#CCCCCC"> string</font><font color="#E5E5E5"> so you just use</font><font color="#CCCCCC"> frida</font>

745
00:40:55,680 --> 00:41:02,580
to output it now you could integrate it

746
00:40:58,380 --> 00:41:10,800
with<font color="#E5E5E5"> a</font><font color="#CCCCCC"> ram so like in a way</font><font color="#E5E5E5"> of so</font><font color="#CCCCCC"> Python</font>

747
00:41:02,580 --> 00:41:13,440
3 yeah<font color="#E5E5E5"> so now you could see</font><font color="#CCCCCC"> that it just</font>

748
00:41:10,800 --> 00:41:16,140
<font color="#E5E5E5">gets the result from</font><font color="#CCCCCC"> Frieda</font><font color="#E5E5E5"> and then</font>

749
00:41:13,440 --> 00:41:18,180
fuzz it and in that window you can see

750
00:41:16,140 --> 00:41:23,029
<font color="#E5E5E5">that</font><font color="#CCCCCC"> actually it's fuzzing it</font><font color="#E5E5E5"> received</font>

751
00:41:18,180 --> 00:41:27,029
<font color="#E5E5E5">some data and modify it so how it works</font>

752
00:41:23,030 --> 00:41:30,140
the example<font color="#CCCCCC"> is</font><font color="#E5E5E5"> just to confirm free</font>

753
00:41:27,030 --> 00:41:33,090
decide so what I'm doing<font color="#E5E5E5"> is just sending</font>

754
00:41:30,140 --> 00:41:37,020
data to<font color="#E5E5E5"> the parent Python script and</font>

755
00:41:33,090 --> 00:41:44,310
receiving the<font color="#E5E5E5"> data again</font><font color="#CCCCCC"> on the</font><font color="#E5E5E5"> event</font>

756
00:41:37,020 --> 00:41:47,040
<font color="#E5E5E5">and for the for the</font><font color="#CCCCCC"> python</font><font color="#E5E5E5"> script</font><font color="#CCCCCC"> i just</font>

757
00:41:44,310 --> 00:41:50,790
implement<font color="#E5E5E5"> function call</font><font color="#CCCCCC"> answer we just</font>

758
00:41:47,040 --> 00:41:53,340
<font color="#CCCCCC">do an HTTP POST with data and get back</font>

759
00:41:50,790 --> 00:41:56,000
the<font color="#CCCCCC"> result and you don't need</font><font color="#E5E5E5"> to run</font>

760
00:41:53,340 --> 00:41:58,680
<font color="#E5E5E5">random so here you could</font><font color="#CCCCCC"> just use HTTP</font>

761
00:41:56,000 --> 00:42:00,750
the most common<font color="#CCCCCC"> an interesting thing</font>

762
00:41:58,680 --> 00:42:04,410
here<font color="#E5E5E5"> and on message</font><font color="#CCCCCC"> I call this function</font>

763
00:42:00,750 --> 00:42:07,530
<font color="#E5E5E5">that's that's it</font><font color="#CCCCCC"> why you want to</font><font color="#E5E5E5"> use a</font>

764
00:42:04,410 --> 00:42:09,299
<font color="#E5E5E5">lamps in service mode is if you have a</font>

765
00:42:07,530 --> 00:42:12,330
Chromebook and then you have a server

766
00:42:09,300 --> 00:42:13,670
<font color="#E5E5E5">you put a lamp so there and call it from</font>

767
00:42:12,330 --> 00:42:17,598
your Chromebook

768
00:42:13,670 --> 00:42:20,660
and on the server<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you could do it</font>

769
00:42:17,599 --> 00:42:23,569
like put it<font color="#E5E5E5"> on one server</font><font color="#CCCCCC"> and then many</font>

770
00:42:20,660 --> 00:42:27,339
<font color="#CCCCCC">people use this</font><font color="#E5E5E5"> because every</font><font color="#CCCCCC"> fussing is</font>

771
00:42:23,569 --> 00:42:28,540
distinctive unless you specify the

772
00:42:27,340 --> 00:42:33,020
[Music]

773
00:42:28,540 --> 00:42:36,529
fuzzing<font color="#E5E5E5"> ID which which allows you to</font>

774
00:42:33,020 --> 00:42:37,220
<font color="#CCCCCC">work</font><font color="#E5E5E5"> with monitoring</font><font color="#CCCCCC"> and do some evil</font>

775
00:42:36,530 --> 00:42:39,440
talkable

776
00:42:37,220 --> 00:42:42,230
<font color="#E5E5E5">right now about</font><font color="#CCCCCC"> it do some fuzzing based</font>

777
00:42:39,440 --> 00:42:44,660
on the previous<font color="#E5E5E5"> states but in a normal</font>

778
00:42:42,230 --> 00:42:47,780
mode<font color="#CCCCCC"> of fuzzing our distinct</font><font color="#E5E5E5"> of each</font>

779
00:42:44,660 --> 00:42:50,629
other<font color="#E5E5E5"> so it's just you could use a lot</font>

780
00:42:47,780 --> 00:42:53,240
of users<font color="#E5E5E5"> to work with one server and do</font>

781
00:42:50,630 --> 00:42:56,420
it very<font color="#E5E5E5"> efficiently as fast as your</font>

782
00:42:53,240 --> 00:43:00,140
network<font color="#CCCCCC"> allow you and the rom on your</font>

783
00:42:56,420 --> 00:43:02,569
server<font color="#E5E5E5"> and the integration with radar</font>

784
00:43:00,140 --> 00:43:10,848
which is<font color="#E5E5E5"> not working</font><font color="#CCCCCC"> and I'll explain</font>

785
00:43:02,569 --> 00:43:14,150
why let me find<font color="#CCCCCC"> yeah this is it so what</font>

786
00:43:10,849 --> 00:43:21,559
I'm actually fuzzing here is this small

787
00:43:14,150 --> 00:43:23,180
program which is a single threaded<font color="#E5E5E5"> TCP</font>

788
00:43:21,559 --> 00:43:26,720
server that just<font color="#CCCCCC"> tooks</font>

789
00:43:23,180 --> 00:43:30,109
if you send him my name<font color="#E5E5E5"> is Alex</font><font color="#CCCCCC"> it will</font>

790
00:43:26,720 --> 00:43:33,649
say<font color="#E5E5E5"> hello Alex and of course if you send</font>

791
00:43:30,109 --> 00:43:35,930
something<font color="#E5E5E5"> really big because this server</font>

792
00:43:33,650 --> 00:43:38,690
is really badly written

793
00:43:35,930 --> 00:43:41,890
I run<font color="#CCCCCC"> nano pancake will be angry but he</font>

794
00:43:38,690 --> 00:43:45,109
<font color="#E5E5E5">already will</font><font color="#CCCCCC"> be angry</font><font color="#E5E5E5"> after this demo</font><font color="#CCCCCC"> so</font>

795
00:43:41,890 --> 00:43:50,029
it doing it really<font color="#CCCCCC"> weird</font><font color="#E5E5E5"> so we could</font>

796
00:43:45,109 --> 00:43:54,460
fuzz it like on<font color="#E5E5E5"> the several iterations</font>

797
00:43:50,030 --> 00:43:59,150
it will crash<font color="#E5E5E5"> so what happened if if I I</font>

798
00:43:54,460 --> 00:44:03,920
could do fuzzy like this<font color="#CCCCCC"> so I</font><font color="#E5E5E5"> send my</font>

799
00:43:59,150 --> 00:44:07,240
name is Sergio and select monitor<font color="#E5E5E5"> with</font>

800
00:44:03,920 --> 00:44:10,970
<font color="#E5E5E5">capital option so monitor will be radar</font>

801
00:44:07,240 --> 00:44:13,640
<font color="#CCCCCC">then it</font><font color="#E5E5E5"> will run this application and it</font>

802
00:44:10,970 --> 00:44:16,250
will<font color="#E5E5E5"> execute this after much script</font>

803
00:44:13,640 --> 00:44:18,109
actually<font color="#CCCCCC"> this</font><font color="#E5E5E5"> script just kills the</font>

804
00:44:16,250 --> 00:44:19,700
radar because sometimes<font color="#CCCCCC"> or there is</font>

805
00:44:18,109 --> 00:44:22,040
freezing but you could select<font color="#E5E5E5"> any after</font>

806
00:44:19,700 --> 00:44:23,960
action<font color="#E5E5E5"> so this action will happen after</font>

807
00:44:22,040 --> 00:44:25,790
the application is crash you could do

808
00:44:23,960 --> 00:44:26,900
nothing<font color="#E5E5E5"> you could like dump something</font>

809
00:44:25,790 --> 00:44:31,880
<font color="#CCCCCC">you can do anyone</font>

810
00:44:26,900 --> 00:44:36,789
anything<font color="#E5E5E5"> and then let me run the server</font>

811
00:44:31,880 --> 00:44:39,500
again and let me<font color="#CCCCCC"> run fuzzing and</font>

812
00:44:36,789 --> 00:44:42,859
actually it crashed<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> may notice</font>

813
00:44:39,500 --> 00:44:47,029
it<font color="#E5E5E5"> because here you</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> see that</font><font color="#CCCCCC"> rudder</font>

814
00:44:42,859 --> 00:44:50,210
<font color="#E5E5E5">is attached then there were like six</font>

815
00:44:47,029 --> 00:44:52,520
cycles of iteration<font color="#E5E5E5"> and then the crash</font>

816
00:44:50,210 --> 00:44:54,410
was detected<font color="#E5E5E5"> why the crash was detected</font>

817
00:44:52,520 --> 00:44:57,529
because<font color="#E5E5E5"> the back trace is something</font>

818
00:44:54,410 --> 00:45:00,348
<font color="#E5E5E5">really weird the problem is that</font>

819
00:44:57,529 --> 00:45:02,270
whatever lungs to do in this situation

820
00:45:00,349 --> 00:45:04,339
it could save the<font color="#CCCCCC"> back trace preserve</font>

821
00:45:02,270 --> 00:45:07,359
the back trace calculate the addresses

822
00:45:04,339 --> 00:45:12,470
and then adapt<font color="#E5E5E5"> if this back trace</font>

823
00:45:07,359 --> 00:45:15,339
happens<font color="#CCCCCC"> too far too much like there are</font>

824
00:45:12,470 --> 00:45:19,640
several same back traces<font color="#E5E5E5"> it will try to</font>

825
00:45:15,339 --> 00:45:21,288
exclude some mutations to<font color="#E5E5E5"> find another</font>

826
00:45:19,640 --> 00:45:24,400
crashes<font color="#E5E5E5"> because what's the problem with</font>

827
00:45:21,289 --> 00:45:30,380
the fuzzing<font color="#E5E5E5"> damn fuzzing if you hit some</font>

828
00:45:24,400 --> 00:45:33,140
<font color="#E5E5E5">very common error pretty fast like on</font>

829
00:45:30,380 --> 00:45:35,839
the<font color="#E5E5E5"> first several hits other errors and</font>

830
00:45:33,140 --> 00:45:37,730
issues could<font color="#CCCCCC"> be hidden so a Lancet tries</font>

831
00:45:35,839 --> 00:45:40,308
to remove these mutations<font color="#E5E5E5"> and using</font>

832
00:45:37,730 --> 00:45:43,609
other mutations<font color="#E5E5E5"> but because the</font><font color="#CCCCCC"> back</font>

833
00:45:40,309 --> 00:45:46,369
<font color="#CCCCCC">trace size is zero and this</font><font color="#E5E5E5"> is because</font>

834
00:45:43,609 --> 00:45:47,119
<font color="#E5E5E5">for strange reason rather debugging is</font>

835
00:45:46,369 --> 00:45:53,839
not working

836
00:45:47,119 --> 00:45:55,970
<font color="#CCCCCC">thank you pancake and this is actually</font><font color="#E5E5E5"> I</font>

837
00:45:53,839 --> 00:45:59,630
will<font color="#CCCCCC"> show you that this is rather</font>

838
00:45:55,970 --> 00:46:06,410
problem<font color="#E5E5E5"> I'm sorry because</font><font color="#CCCCCC"> if I run it</font>

839
00:45:59,630 --> 00:46:12,170
with our<font color="#E5E5E5"> true - D DC</font><font color="#CCCCCC"> let me close this</font>

840
00:46:06,410 --> 00:46:15,140
thing<font color="#E5E5E5"> and then if I like send a crash</font>

841
00:46:12,170 --> 00:46:22,670
sequence<font color="#E5E5E5"> then it shows process finished</font>

842
00:46:15,140 --> 00:46:28,520
but<font color="#CCCCCC"> DB T shows garbage and the I don't</font>

843
00:46:22,670 --> 00:46:32,410
<font color="#CCCCCC">remember the register the I</font><font color="#E5E5E5"> yeah there I</font>

844
00:46:28,520 --> 00:46:32,410
<font color="#E5E5E5">is empty deal with it</font>

845
00:46:33,470 --> 00:46:39,720
yeah<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> I was a</font><font color="#E5E5E5"> little burned this</font>

846
00:46:36,780 --> 00:46:41,609
morning<font color="#E5E5E5"> and last week when I realized</font>

847
00:46:39,720 --> 00:46:43,919
that<font color="#E5E5E5"> this</font><font color="#CCCCCC"> diamond</font><font color="#E5E5E5"> will not work so</font><font color="#CCCCCC"> sorry</font>

848
00:46:41,609 --> 00:46:49,170
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> why I put everything on</font><font color="#CCCCCC"> pancake</font>

849
00:46:43,920 --> 00:46:52,680
now I'm happy so you should<font color="#E5E5E5"> never allow</font>

850
00:46:49,170 --> 00:46:55,710
me to do it before<font color="#CCCCCC"> G so I will just go</font>

851
00:46:52,680 --> 00:46:59,520
to train and<font color="#CCCCCC"> never do</font><font color="#E5E5E5"> this talk and this</font>

852
00:46:55,710 --> 00:47:02,640
is what will be<font color="#CCCCCC"> never</font><font color="#E5E5E5"> uncovered</font><font color="#CCCCCC"> I'm</font>

853
00:46:59,520 --> 00:47:08,070
finishing some statistics on usage<font color="#CCCCCC"> so I</font>

854
00:47:02,640 --> 00:47:10,650
used my tool in some researches 31<font color="#CCCCCC"> bucks</font>

855
00:47:08,070 --> 00:47:13,560
in industrial detail components<font color="#E5E5E5"> 23</font><font color="#CCCCCC"> plus</font>

856
00:47:10,650 --> 00:47:15,660
<font color="#E5E5E5">4 in mobile SCADA applications 11 bucks</font>

857
00:47:13,560 --> 00:47:17,640
in mobile antivirus applications<font color="#CCCCCC"> they</font>

858
00:47:15,660 --> 00:47:18,170
<font color="#CCCCCC">are all public researches you can find</font>

859
00:47:17,640 --> 00:47:21,060
them

860
00:47:18,170 --> 00:47:22,830
I'm just don't want<font color="#E5E5E5"> to refer them</font>

861
00:47:21,060 --> 00:47:27,720
because this<font color="#E5E5E5"> is unconnected</font><font color="#CCCCCC"> to any</font>

862
00:47:22,830 --> 00:47:29,700
vendor talk for the industry I'm using

863
00:47:27,720 --> 00:47:32,129
it on<font color="#CCCCCC"> my current</font><font color="#E5E5E5"> work I use it on</font><font color="#CCCCCC"> my</font>

864
00:47:29,700 --> 00:47:34,410
previous works when I worked as a pen

865
00:47:32,130 --> 00:47:37,430
tester<font color="#CCCCCC"> what</font><font color="#E5E5E5"> I work and as a security and</font>

866
00:47:34,410 --> 00:47:41,910
QR engineers<font color="#E5E5E5"> more than 200 bucks found</font>

867
00:47:37,430 --> 00:47:44,399
<font color="#E5E5E5">for during four</font><font color="#CCCCCC"> years</font><font color="#E5E5E5"> I think that's</font>

868
00:47:41,910 --> 00:47:48,690
that's a good<font color="#E5E5E5"> result for a father</font><font color="#CCCCCC"> it's a</font>

869
00:47:44,400 --> 00:47:50,820
good result<font color="#CCCCCC"> and I'm using this tool</font>

870
00:47:48,690 --> 00:47:54,090
because it's the first tool I'm used

871
00:47:50,820 --> 00:47:56,910
with any project<font color="#CCCCCC"> like I got the device</font>

872
00:47:54,090 --> 00:47:59,160
or a software<font color="#CCCCCC"> I understand how to fast</font>

873
00:47:56,910 --> 00:48:00,509
<font color="#E5E5E5">that's like in the first half an hour</font>

874
00:47:59,160 --> 00:48:02,310
because<font color="#CCCCCC"> you need to understand how to</font>

875
00:48:00,510 --> 00:48:04,290
<font color="#E5E5E5">run software or device which usually</font>

876
00:48:02,310 --> 00:48:05,759
happens<font color="#E5E5E5"> then I start father and I do</font>

877
00:48:04,290 --> 00:48:08,390
reverse engineering<font color="#CCCCCC"> on source code</font>

878
00:48:05,760 --> 00:48:11,670
analysis and while I do it<font color="#E5E5E5"> sometimes</font>

879
00:48:08,390 --> 00:48:14,339
<font color="#E5E5E5">some</font><font color="#CCCCCC"> crisis appears</font><font color="#E5E5E5"> and that's I think</font>

880
00:48:11,670 --> 00:48:16,940
the most effective scheme if you have

881
00:48:14,340 --> 00:48:19,410
two<font color="#CCCCCC"> or three</font><font color="#E5E5E5"> weeks on project and</font>

882
00:48:16,940 --> 00:48:20,850
sometimes<font color="#E5E5E5"> in the industry you have two</font>

883
00:48:19,410 --> 00:48:22,859
or three<font color="#CCCCCC"> weeks in</font><font color="#E5E5E5"> a project if you have</font>

884
00:48:20,850 --> 00:48:25,589
half a year of course you could design

885
00:48:22,859 --> 00:48:27,869
your<font color="#CCCCCC"> own</font><font color="#E5E5E5"> super cool father based on</font>

886
00:48:25,590 --> 00:48:30,480
<font color="#E5E5E5">general and generational approach or you</font>

887
00:48:27,869 --> 00:48:32,490
could try to use<font color="#CCCCCC"> AFL for the network</font>

888
00:48:30,480 --> 00:48:33,960
applications which is<font color="#CCCCCC"> a nightmare</font>

889
00:48:32,490 --> 00:48:36,240
or for embedded which is a<font color="#E5E5E5"> double</font>

890
00:48:33,960 --> 00:48:38,520
nightmare<font color="#E5E5E5"> otherwise stick to the</font><font color="#CCCCCC"> dumped</font>

891
00:48:36,240 --> 00:48:41,189
fuzzing it helps if<font color="#E5E5E5"> you want to</font>

892
00:48:38,520 --> 00:48:42,930
contribute<font color="#CCCCCC"> just use it</font><font color="#E5E5E5"> report</font><font color="#CCCCCC"> bugs</font><font color="#E5E5E5"> if</font>

893
00:48:41,190 --> 00:48:44,760
<font color="#E5E5E5">your</font><font color="#CCCCCC"> report box please attach fuzzing</font>

894
00:48:42,930 --> 00:48:47,850
input and<font color="#CCCCCC"> loss it takes</font>

895
00:48:44,760 --> 00:48:50,160
file when<font color="#CCCCCC"> alarm sir</font><font color="#E5E5E5"> crashes it uses</font>

896
00:48:47,850 --> 00:48:54,029
<font color="#CCCCCC">eight grades file called last seed which</font>

897
00:48:50,160 --> 00:48:57,270
actually contains<font color="#E5E5E5"> the random seed and if</font>

898
00:48:54,030 --> 00:49:01,110
you just give me<font color="#E5E5E5"> the input</font><font color="#CCCCCC"> I will not be</font>

899
00:48:57,270 --> 00:49:03,180
able<font color="#CCCCCC"> to fix bug because</font><font color="#E5E5E5"> without the seed</font>

900
00:49:01,110 --> 00:49:04,680
there will be a probability<font color="#E5E5E5"> that this</font>

901
00:49:03,180 --> 00:49:07,319
bug will never happen<font color="#CCCCCC"> with the city</font>

902
00:49:04,680 --> 00:49:10,410
input all happen in<font color="#E5E5E5"> next 1</font><font color="#CCCCCC"> million</font><font color="#E5E5E5"> 1</font>

903
00:49:07,320 --> 00:49:13,770
billion<font color="#CCCCCC"> year so you know I</font><font color="#E5E5E5"> need a seed a</font>

904
00:49:10,410 --> 00:49:16,710
seed is what specifying how the<font color="#E5E5E5"> lumps</font>

905
00:49:13,770 --> 00:49:20,280
are made its way on notating it and

906
00:49:16,710 --> 00:49:23,130
<font color="#CCCCCC">crushing in the end a screw features the</font>

907
00:49:20,280 --> 00:49:25,350
<font color="#CCCCCC">request</font><font color="#E5E5E5"> and if there are any skilled</font>

908
00:49:23,130 --> 00:49:26,760
<font color="#E5E5E5">wrong developers that wanted</font><font color="#CCCCCC"> to</font>

909
00:49:25,350 --> 00:49:30,509
<font color="#E5E5E5">contribute I will be very</font><font color="#CCCCCC"> happy</font>

910
00:49:26,760 --> 00:49:33,390
I want to thank<font color="#E5E5E5"> Aki Helen the author of</font>

911
00:49:30,510 --> 00:49:35,400
<font color="#CCCCCC">her dumpster from an efficient tool</font><font color="#E5E5E5"> Adam</font>

912
00:49:33,390 --> 00:49:38,400
crane for really useful advices on

913
00:49:35,400 --> 00:49:40,920
<font color="#E5E5E5">puzzle design and pancake and the whole</font>

914
00:49:38,400 --> 00:49:43,470
<font color="#CCCCCC">r2 community for the great inspiration</font>

915
00:49:40,920 --> 00:49:46,410
<font color="#E5E5E5">on doing open source products and that</font>

916
00:49:43,470 --> 00:49:49,939
<font color="#E5E5E5">was actually why I decided to publish it</font>

917
00:49:46,410 --> 00:49:52,470
finally as an open<font color="#E5E5E5"> source project like</font>

918
00:49:49,940 --> 00:49:55,580
inspiration from pancake<font color="#E5E5E5"> from Allah and</font>

919
00:49:52,470 --> 00:50:05,310
all<font color="#E5E5E5"> of you thank</font><font color="#CCCCCC"> you any questions</font>

920
00:49:55,580 --> 00:50:05,310
[Applause]

921
00:50:06,609 --> 00:50:11,660
questions nobody<font color="#E5E5E5"> using fuzzers no</font>

922
00:50:10,549 --> 00:50:13,670
questions<font color="#CCCCCC"> yeah I do</font>

923
00:50:11,660 --> 00:50:16,819
some<font color="#CCCCCC"> questions but I was trying to fix</font>

924
00:50:13,670 --> 00:50:17,660
the back now<font color="#E5E5E5"> yes I had time before it's</font>

925
00:50:16,819 --> 00:50:25,279
almost fix it

926
00:50:17,660 --> 00:50:27,649
wait so one of the things that they<font color="#E5E5E5"> find</font>

927
00:50:25,279 --> 00:50:30,980
out when I'm doing fighting<font color="#E5E5E5"> but mainly</font>

928
00:50:27,650 --> 00:50:34,910
by hand<font color="#CCCCCC"> because I I do my own specific</font>

929
00:50:30,980 --> 00:50:37,039
<font color="#E5E5E5">phasers</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> fragmentation because many</font>

930
00:50:34,910 --> 00:50:38,680
clients doesn't handle fragmentation

931
00:50:37,039 --> 00:50:41,390
properly because<font color="#E5E5E5"> they expect to get the</font>

932
00:50:38,680 --> 00:50:43,519
answer in a single packet<font color="#E5E5E5"> but if you</font>

933
00:50:41,390 --> 00:50:45,558
answer<font color="#E5E5E5"> with different delays like</font>

934
00:50:43,519 --> 00:50:46,910
<font color="#E5E5E5">because the client is doing some time</font>

935
00:50:45,559 --> 00:50:49,309
out in<font color="#E5E5E5"> the packets and you send a</font>

936
00:50:46,910 --> 00:50:52,220
<font color="#E5E5E5">different packet sizes and then you</font>

937
00:50:49,309 --> 00:50:55,400
fragment is that and so on<font color="#CCCCCC"> end up</font>

938
00:50:52,220 --> 00:50:58,189
scratching do you have plans to<font color="#E5E5E5"> support</font>

939
00:50:55,400 --> 00:51:01,190
it<font color="#CCCCCC"> uh yeah it</font><font color="#E5E5E5"> is not supported</font><font color="#CCCCCC"> yet I</font>

940
00:50:58,190 --> 00:51:03,559
have some thoughts<font color="#E5E5E5"> connected with the</font>

941
00:51:01,190 --> 00:51:07,400
sizer<font color="#CCCCCC"> patent</font><font color="#E5E5E5"> so maybe</font><font color="#CCCCCC"> sighs a patent</font>

942
00:51:03,559 --> 00:51:10,730
could have some feedback<font color="#E5E5E5"> and after some</font>

943
00:51:07,400 --> 00:51:13,009
<font color="#CCCCCC">time after some learning</font><font color="#E5E5E5"> I will try to</font>

944
00:51:10,730 --> 00:51:15,680
wait more but<font color="#E5E5E5"> actually you could also</font>

945
00:51:13,009 --> 00:51:18,710
use the delay sometimes delay works<font color="#E5E5E5"> also</font>

946
00:51:15,680 --> 00:51:21,230
<font color="#CCCCCC">a Lance of working its if you limit the</font>

947
00:51:18,710 --> 00:51:22,759
<font color="#CCCCCC">fuzzing time and those exclude</font><font color="#E5E5E5"> heavy</font>

948
00:51:21,230 --> 00:51:25,130
<font color="#CCCCCC">imitation like you know that</font><font color="#E5E5E5"> this is a</font>

949
00:51:22,759 --> 00:51:28,339
binary<font color="#E5E5E5"> data without XML just remove</font>

950
00:51:25,130 --> 00:51:31,099
<font color="#E5E5E5">heavy</font><font color="#CCCCCC"> notations sometimes even for</font>

951
00:51:28,339 --> 00:51:36,019
fragments<font color="#E5E5E5"> it works well like if you run</font>

952
00:51:31,099 --> 00:51:38,359
with no mutation it<font color="#CCCCCC"> works the timing the</font>

953
00:51:36,019 --> 00:51:41,569
demos are really really<font color="#E5E5E5"> small so the</font>

954
00:51:38,359 --> 00:51:44,269
server will never<font color="#CCCCCC"> notice it if you add</font>

955
00:51:41,569 --> 00:51:47,299
some<font color="#E5E5E5"> easy mutations like soaring or</font>

956
00:51:44,269 --> 00:51:50,058
ASCII or<font color="#E5E5E5"> numeric one and exclude the</font>

957
00:51:47,299 --> 00:51:51,920
huge patterns like<font color="#E5E5E5"> a little tuning it</font>

958
00:51:50,059 --> 00:51:53,660
<font color="#E5E5E5">also help if you see that it's not</font>

959
00:51:51,920 --> 00:51:56,869
<font color="#CCCCCC">working like it's constant disconnect</font>

960
00:51:53,660 --> 00:52:01,460
but actually I haven't seen<font color="#E5E5E5"> this problem</font>

961
00:51:56,869 --> 00:52:04,119
really really yes<font color="#CCCCCC"> ah so</font><font color="#E5E5E5"> it's a couple of</font>

962
00:52:01,460 --> 00:52:08,290
times<font color="#E5E5E5"> removing of</font><font color="#CCCCCC"> heavy imitation help</font>

963
00:52:04,119 --> 00:52:10,690
<font color="#E5E5E5">when I try to do it using in past using</font>

964
00:52:08,290 --> 00:52:13,180
random cell<font color="#E5E5E5"> calling random</font><font color="#CCCCCC"> sir</font><font color="#E5E5E5"> from a</font>

965
00:52:10,690 --> 00:52:16,840
pipe<font color="#CCCCCC"> it doesn't work because it's too</font>

966
00:52:13,180 --> 00:52:20,799
slow<font color="#E5E5E5"> but yes this is</font><font color="#CCCCCC"> the thing that but</font>

967
00:52:16,840 --> 00:52:25,870
it's a<font color="#E5E5E5"> really</font><font color="#CCCCCC"> mm</font><font color="#E5E5E5"> hard to fix actually</font>

968
00:52:20,800 --> 00:52:28,750
because it's like I think inventing<font color="#CCCCCC"> AI</font>

969
00:52:25,870 --> 00:52:30,910
is more easier than this because

970
00:52:28,750 --> 00:52:34,570
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> to do it you need their I eye</font>

971
00:52:30,910 --> 00:52:36,700
that<font color="#E5E5E5"> could predict stuff</font><font color="#CCCCCC"> so you need the</font>

972
00:52:34,570 --> 00:52:39,190
fully predict to get rid of this<font color="#CCCCCC"> problem</font>

973
00:52:36,700 --> 00:52:42,250
completely<font color="#CCCCCC"> but for most systems</font>

974
00:52:39,190 --> 00:52:44,440
<font color="#CCCCCC">especially when those sockets well they</font>

975
00:52:42,250 --> 00:52:46,510
always<font color="#CCCCCC"> love to do fragmentation like</font>

976
00:52:44,440 --> 00:52:50,440
removing having mutation helps in<font color="#CCCCCC"> ninety</font>

977
00:52:46,510 --> 00:52:53,260
<font color="#CCCCCC">percent of the case that's other</font>

978
00:52:50,440 --> 00:52:57,580
questions that I have<font color="#E5E5E5"> I was missing also</font>

979
00:52:53,260 --> 00:53:00,810
<font color="#E5E5E5">the JSON stream logging that's why I</font>

980
00:52:57,580 --> 00:53:04,140
don't<font color="#CCCCCC"> like Jason but I will add</font><font color="#E5E5E5"> it</font>

981
00:53:00,810 --> 00:53:07,540
because<font color="#CCCCCC"> I</font><font color="#E5E5E5"> will probably cook</font><font color="#CCCCCC"> no JJ's</font>

982
00:53:04,140 --> 00:53:10,330
service receiving the<font color="#E5E5E5"> JSON stream</font>

983
00:53:07,540 --> 00:53:12,520
messages to process<font color="#E5E5E5"> and then filter that</font>

984
00:53:10,330 --> 00:53:15,850
data to generate<font color="#E5E5E5"> some other blocks with</font>

985
00:53:12,520 --> 00:53:20,020
a it's a nice<font color="#CCCCCC"> idea</font><font color="#E5E5E5"> feel</font><font color="#CCCCCC"> very feel the</font>

986
00:53:15,850 --> 00:53:25,509
<font color="#E5E5E5">feature</font><font color="#CCCCCC"> requests under github</font><font color="#E5E5E5"> and also</font>

987
00:53:20,020 --> 00:53:27,880
<font color="#E5E5E5">last one this a little bit to the shower</font>

988
00:53:25,510 --> 00:53:31,570
talk<font color="#CCCCCC"> when I saw it but</font><font color="#E5E5E5"> it was like</font>

989
00:53:27,880 --> 00:53:34,810
evolution<font color="#CCCCCC"> rotator and so I</font><font color="#E5E5E5"> were thinking</font>

990
00:53:31,570 --> 00:53:38,880
<font color="#E5E5E5">in in having support for rotating</font><font color="#CCCCCC"> this</font>

991
00:53:34,810 --> 00:53:41,440
<font color="#CCCCCC">assembly so assembly code for passing</font>

992
00:53:38,880 --> 00:53:43,540
similar<font color="#E5E5E5"> programs so</font><font color="#CCCCCC"> fasting compilers</font>

993
00:53:41,440 --> 00:53:47,320
<font color="#E5E5E5">facing assemblers but also</font><font color="#CCCCCC"> facing an</font>

994
00:53:43,540 --> 00:53:48,970
<font color="#CCCCCC">Isis tools and yeah you</font><font color="#E5E5E5"> could know if</font>

995
00:53:47,320 --> 00:53:51,040
you have a<font color="#E5E5E5"> like</font><font color="#CCCCCC"> row binary you could</font>

996
00:53:48,970 --> 00:53:52,839
supply and it will try to do<font color="#CCCCCC"> something</font>

997
00:53:51,040 --> 00:53:55,480
<font color="#E5E5E5">but now it's not like adapted to the</font>

998
00:53:52,840 --> 00:54:01,340
binary<font color="#E5E5E5"> code</font><font color="#CCCCCC"> yep</font><font color="#E5E5E5"> not being fully done</font>

999
00:53:55,480 --> 00:54:04,820
like<font color="#CCCCCC"> fully don't I once fast one</font>

1000
00:54:01,340 --> 00:54:07,970
microprocessor microcontroller with some

1001
00:54:04,820 --> 00:54:10,190
success<font color="#CCCCCC"> so it works if you do it fully</font>

1002
00:54:07,970 --> 00:54:12,049
<font color="#CCCCCC">dumped but of course it will not work</font>

1003
00:54:10,190 --> 00:54:14,420
against into because<font color="#CCCCCC"> until it's very</font>

1004
00:54:12,050 --> 00:54:16,670
<font color="#CCCCCC">well tested</font><font color="#E5E5E5"> already</font><font color="#CCCCCC"> but against</font>

1005
00:54:14,420 --> 00:54:20,750
<font color="#CCCCCC">something not popular</font><font color="#E5E5E5"> you could try it</font>

1006
00:54:16,670 --> 00:54:23,750
<font color="#CCCCCC">and if you you try it and get some</font>

1007
00:54:20,750 --> 00:54:25,910
results<font color="#CCCCCC"> shut no</font><font color="#E5E5E5"> yeah instruction</font>

1008
00:54:23,750 --> 00:54:28,070
<font color="#CCCCCC">assemblers are</font><font color="#E5E5E5"> pretty cool</font><font color="#CCCCCC"> at the things</font>

1009
00:54:25,910 --> 00:54:29,480
<font color="#E5E5E5">that you end up like having to write</font>

1010
00:54:28,070 --> 00:54:33,020
<font color="#E5E5E5">everything inside the same process we</font>

1011
00:54:29,480 --> 00:54:34,880
have you need some<font color="#E5E5E5"> more performance yeah</font>

1012
00:54:33,020 --> 00:54:36,860
but the end<font color="#E5E5E5"> the end you</font><font color="#CCCCCC"> just want to</font>

1013
00:54:34,880 --> 00:54:38,090
<font color="#E5E5E5">stick to some specific instructions</font><font color="#CCCCCC"> that</font>

1014
00:54:36,860 --> 00:54:40,100
<font color="#E5E5E5">are in the finite or they are not</font>

1015
00:54:38,090 --> 00:54:41,270
specified by the vendor so you want to

1016
00:54:40,100 --> 00:54:44,660
compare<font color="#CCCCCC"> that with different</font>

1017
00:54:41,270 --> 00:54:47,030
<font color="#E5E5E5">implementations of the CPU and yeah nice</font>

1018
00:54:44,660 --> 00:54:51,859
idea<font color="#E5E5E5"> and</font><font color="#CCCCCC"> also what could be done it</font>

1019
00:54:47,030 --> 00:54:53,660
could be just if we could add a comment

1020
00:54:51,860 --> 00:54:55,840
rather let's<font color="#CCCCCC"> actually read some block</font>

1021
00:54:53,660 --> 00:55:01,009
since<font color="#E5E5E5"> they're lumps and writing back</font>

1022
00:54:55,840 --> 00:55:03,470
<font color="#E5E5E5">yeah good</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> so yeah I will</font><font color="#CCCCCC"> ping you</font>

1023
00:55:01,010 --> 00:55:05,300
later when I fix<font color="#E5E5E5"> that</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> thank you</font>

1024
00:55:03,470 --> 00:55:08,629
this is just a<font color="#E5E5E5"> Magus if</font><font color="#CCCCCC"> icky so it it</font>

1025
00:55:05,300 --> 00:55:11,900
works<font color="#E5E5E5"> fine in Linux and</font><font color="#CCCCCC"> uh anyway so I</font>

1026
00:55:08,630 --> 00:55:12,320
was<font color="#CCCCCC"> just unlucky of using</font><font color="#E5E5E5"> work</font><font color="#CCCCCC"> that's</font>

1027
00:55:11,900 --> 00:55:16,670
<font color="#E5E5E5">okay</font>

1028
00:55:12,320 --> 00:55:19,100
very much so any other question<font color="#E5E5E5"> hi can</font>

1029
00:55:16,670 --> 00:55:20,960
you<font color="#E5E5E5"> name some of the libraries or tool</font>

1030
00:55:19,100 --> 00:55:26,630
<font color="#E5E5E5">where you found</font><font color="#CCCCCC"> bullying abilities or</font>

1031
00:55:20,960 --> 00:55:31,300
<font color="#E5E5E5">crashes</font><font color="#CCCCCC"> so for example I</font><font color="#E5E5E5"> don't want to</font>

1032
00:55:26,630 --> 00:55:34,520
go specific when there's admit all like

1033
00:55:31,300 --> 00:55:40,310
what was<font color="#E5E5E5"> found in the first research</font>

1034
00:55:34,520 --> 00:55:43,270
done with<font color="#CCCCCC"> alum sigh it was</font><font color="#E5E5E5"> buffer</font>

1035
00:55:40,310 --> 00:55:47,480
overflows and memory corruptions in<font color="#CCCCCC"> abb</font>

1036
00:55:43,270 --> 00:55:51,340
libraries in libraries<font color="#E5E5E5"> from and then</font>

1037
00:55:47,480 --> 00:55:55,730
<font color="#CCCCCC">Bradley in libraries</font><font color="#E5E5E5"> from I think</font>

1038
00:55:51,340 --> 00:55:59,420
<font color="#E5E5E5">Anderson Hauser</font><font color="#CCCCCC"> and I think it was</font>

1039
00:55:55,730 --> 00:56:03,490
Simmons it was very long time ago<font color="#E5E5E5"> so for</font>

1040
00:55:59,420 --> 00:56:08,980
the recent findings

1041
00:56:03,490 --> 00:56:08,979
I've just was curious<font color="#E5E5E5"> and first some</font>

1042
00:56:09,190 --> 00:56:19,329
age 50<font color="#E5E5E5"> so it's a high</font><font color="#CCCCCC"> frequency trading</font>

1043
00:56:13,599 --> 00:56:22,059
library like<font color="#CCCCCC"> ii ii hip overflow but it's</font>

1044
00:56:19,329 --> 00:56:25,450
still not fixed<font color="#CCCCCC"> so could not</font><font color="#E5E5E5"> just tell</font>

1045
00:56:22,059 --> 00:56:28,270
<font color="#CCCCCC">your the name but there are little age</font>

1046
00:56:25,450 --> 00:56:31,270
<font color="#E5E5E5">50</font><font color="#CCCCCC"> library so maybe you could</font><font color="#E5E5E5"> find it</font>

1047
00:56:28,270 --> 00:56:33,690
<font color="#E5E5E5">and do you think they implemented their</font>

1048
00:56:31,270 --> 00:56:37,240
own parser and this because this<font color="#CCCCCC"> is</font>

1049
00:56:33,690 --> 00:56:40,270
because you never implement parser by

1050
00:56:37,240 --> 00:56:41,919
itself<font color="#E5E5E5"> well I have sgml parser</font>

1051
00:56:40,270 --> 00:56:45,910
implemented by itself and it<font color="#CCCCCC"> crashes</font>

1052
00:56:41,920 --> 00:56:49,450
constantly so and I'm<font color="#E5E5E5"> not a software</font>

1053
00:56:45,910 --> 00:56:52,118
developer yeah but I<font color="#E5E5E5"> haven't seen parser</font>

1054
00:56:49,450 --> 00:56:54,129
implemented well from the<font color="#E5E5E5"> first second</font>

1055
00:56:52,119 --> 00:56:59,400
unless it's written<font color="#E5E5E5"> in Haskell or come</font>

1056
00:56:54,130 --> 00:57:02,819
<font color="#E5E5E5">on maybe kind of this</font><font color="#CCCCCC"> Thanks</font><font color="#E5E5E5"> thank you</font>

1057
00:56:59,400 --> 00:57:02,819
any no question

1058
00:57:05,900 --> 00:57:08,529
what

1059
00:57:13,820 --> 00:57:21,750
did you try to<font color="#E5E5E5"> fast</font><font color="#CCCCCC"> along side</font><font color="#E5E5E5"> with</font>

1060
00:57:17,070 --> 00:57:24,240
<font color="#E5E5E5">itself yes of course that's how one of</font>

1061
00:57:21,750 --> 00:57:26,670
the<font color="#CCCCCC"> tests working but now it's</font><font color="#E5E5E5"> not</font>

1062
00:57:24,240 --> 00:57:30,180
<font color="#E5E5E5">working very well because now it crashes</font>

1063
00:57:26,670 --> 00:57:35,430
more<font color="#E5E5E5"> because of some internal problems</font>

1064
00:57:30,180 --> 00:57:37,169
with incompatible<font color="#CCCCCC"> of some parts</font><font color="#E5E5E5"> so it</font>

1065
00:57:35,430 --> 00:57:38,910
<font color="#E5E5E5">sometimes crashes also</font><font color="#CCCCCC"> it sometimes</font>

1066
00:57:37,170 --> 00:57:40,560
crashes on<font color="#CCCCCC"> the</font><font color="#E5E5E5"> bad user input in the</font>

1067
00:57:38,910 --> 00:57:43,140
<font color="#E5E5E5">comment</font><font color="#CCCCCC"> line but it's</font><font color="#E5E5E5"> not like a crash</font>

1068
00:57:40,560 --> 00:57:46,529
<font color="#E5E5E5">it's I'm</font><font color="#CCCCCC"> just too lazy</font><font color="#E5E5E5"> to write a proper</font>

1069
00:57:43,140 --> 00:57:49,170
<font color="#CCCCCC">Handler</font><font color="#E5E5E5"> it just writes an error and then</font>

1070
00:57:46,530 --> 00:57:51,600
throw a<font color="#CCCCCC"> crashes yeah</font><font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> count it as</font>

1071
00:57:49,170 --> 00:57:55,440
a crash because there are so<font color="#CCCCCC"> little</font>

1072
00:57:51,600 --> 00:57:57,690
community now so I don't<font color="#CCCCCC"> bother</font><font color="#E5E5E5"> to work</font>

1073
00:57:55,440 --> 00:58:00,300
on it I could<font color="#CCCCCC"> work on more useful stuff</font>

1074
00:57:57,690 --> 00:58:06,720
<font color="#CCCCCC">once the community will be</font><font color="#E5E5E5"> bigger I will</font>

1075
00:58:00,300 --> 00:58:11,100
try to fix<font color="#E5E5E5"> it okay I can I ask how why</font>

1076
00:58:06,720 --> 00:58:15,480
it consumes so many memory because it's

1077
00:58:11,100 --> 00:58:18,240
functional<font color="#CCCCCC"> and the way how along</font><font color="#E5E5E5"> virtual</font>

1078
00:58:15,480 --> 00:58:20,280
machine is working<font color="#E5E5E5"> it delayed garbage</font>

1079
00:58:18,240 --> 00:58:22,470
collector<font color="#E5E5E5"> so sometimes when</font><font color="#CCCCCC"> it's</font>

1080
00:58:20,280 --> 00:58:25,230
<font color="#E5E5E5">received too much data</font><font color="#CCCCCC"> to mutate it</font>

1081
00:58:22,470 --> 00:58:27,109
consumes the<font color="#E5E5E5"> maximum data before the</font>

1082
00:58:25,230 --> 00:58:31,410
<font color="#E5E5E5">garbage collector started to work and</font>

1083
00:58:27,110 --> 00:58:33,360
that's<font color="#E5E5E5"> the</font><font color="#CCCCCC"> thing</font><font color="#E5E5E5"> if you like limit the</font>

1084
00:58:31,410 --> 00:58:35,279
speed the garbage collector<font color="#CCCCCC"> will free</font>

1085
00:58:33,360 --> 00:58:37,310
the<font color="#CCCCCC"> memory and it consumes it's not</font><font color="#E5E5E5"> it's</font>

1086
00:58:35,280 --> 00:58:39,450
a small<font color="#E5E5E5"> problem of her long</font><font color="#CCCCCC"> vm</font>

1087
00:58:37,310 --> 00:58:41,549
especially on<font color="#E5E5E5"> windows and windows</font>

1088
00:58:39,450 --> 00:58:46,799
garbage collector<font color="#CCCCCC"> is the nightmare in me</font>

1089
00:58:41,550 --> 00:58:48,480
so but that<font color="#E5E5E5"> was the expected problem</font>

1090
00:58:46,800 --> 00:58:51,980
when I started this project I expected

1091
00:58:48,480 --> 00:58:56,010
this problem it's not<font color="#E5E5E5"> a</font><font color="#CCCCCC"> problem</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> me I</font>

1092
00:58:51,980 --> 00:58:59,790
could give<font color="#CCCCCC"> 8 gigas of working</font><font color="#E5E5E5"> for it and</font>

1093
00:58:56,010 --> 00:59:02,450
I'm<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so if you</font><font color="#CCCCCC"> have 8 gigabytes</font><font color="#E5E5E5"> it</font>

1094
00:58:59,790 --> 00:59:05,550
works pretty well<font color="#E5E5E5"> on every machine</font>

1095
00:59:02,450 --> 00:59:08,460
<font color="#CCCCCC">because it has some limits</font><font color="#E5E5E5"> I just don't</font>

1096
00:59:05,550 --> 00:59:10,710
want<font color="#E5E5E5"> because I could implement more like</font>

1097
00:59:08,460 --> 00:59:12,210
restrictions in itself and the<font color="#CCCCCC"> waits for</font>

1098
00:59:10,710 --> 00:59:13,980
the garbage collector but actually it

1099
00:59:12,210 --> 00:59:15,750
will drop<font color="#E5E5E5"> the performance I don't</font>

1100
00:59:13,980 --> 00:59:17,820
sometimes<font color="#E5E5E5"> here</font>

1101
00:59:15,750 --> 00:59:20,730
<font color="#E5E5E5">it's compromise between</font><font color="#CCCCCC"> performance and</font>

1102
00:59:17,820 --> 00:59:24,000
<font color="#E5E5E5">memory consumptions I think for me</font>

1103
00:59:20,730 --> 00:59:27,110
performance is<font color="#E5E5E5"> always the priority</font><font color="#CCCCCC"> yes</font>

1104
00:59:24,000 --> 00:59:27,110
<font color="#E5E5E5">really with</font>

1105
00:59:27,480 --> 00:59:32,170
we were running<font color="#E5E5E5"> Erlang on the server in</font>

1106
00:59:29,920 --> 00:59:34,060
the previous<font color="#E5E5E5"> startup and our experience</font>

1107
00:59:32,170 --> 00:59:37,420
<font color="#E5E5E5">was that since the garbage collection is</font>

1108
00:59:34,060 --> 00:59:38,950
per process<font color="#E5E5E5"> yeah and it it's so lazy it</font>

1109
00:59:37,420 --> 00:59:42,000
will not start<font color="#E5E5E5"> but garbage collecting</font>

1110
00:59:38,950 --> 00:59:45,129
until<font color="#E5E5E5"> it's run out</font><font color="#CCCCCC"> of memory</font><font color="#E5E5E5"> yeah</font>

1111
00:59:42,000 --> 00:59:47,950
implementing is like every X messages<font color="#CCCCCC"> we</font>

1112
00:59:45,130 --> 00:59:49,990
with GC voluntarily and that would solve

1113
00:59:47,950 --> 00:59:52,990
the<font color="#CCCCCC"> problem but at the expense of yeah</font>

1114
00:59:49,990 --> 00:59:55,720
yeah yeah<font color="#E5E5E5"> actually if you run it with</font>

1115
00:59:52,990 --> 00:59:58,000
<font color="#CCCCCC">minus D option in the back mode it will</font>

1116
00:59:55,720 --> 01:00:00,060
manually call the garbage<font color="#E5E5E5"> collection at</font>

1117
00:59:58,000 --> 01:00:04,150
some point<font color="#CCCCCC"> because otherwise the</font>

1118
01:00:00,060 --> 01:00:07,570
profiler<font color="#E5E5E5"> doesn't work but I calculated</font>

1119
01:00:04,150 --> 01:00:10,420
<font color="#E5E5E5">so the drop in performance I've</font>

1120
01:00:07,570 --> 01:00:12,370
estimated because it's a father is

1121
01:00:10,420 --> 01:00:16,720
<font color="#E5E5E5">really hard to</font><font color="#CCCCCC"> estimate the performance</font>

1122
01:00:12,370 --> 01:00:18,520
<font color="#E5E5E5">but for example the difference of the</font>

1123
01:00:16,720 --> 01:00:21,669
performance on<font color="#E5E5E5"> heavy mutations between</font>

1124
01:00:18,520 --> 01:00:24,670
their<font color="#CCCCCC"> lamps in Radames is just too so</font>

1125
01:00:21,670 --> 01:00:25,360
<font color="#CCCCCC">Radames</font><font color="#E5E5E5"> is twice faster</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> actually if</font>

1126
01:00:24,670 --> 01:00:29,310
you<font color="#E5E5E5"> run</font>

1127
01:00:25,360 --> 01:00:32,020
Radames by piping it you lost all this

1128
01:00:29,310 --> 01:00:34,240
speed so it's more efficient to<font color="#E5E5E5"> call</font>

1129
01:00:32,020 --> 01:00:36,250
<font color="#E5E5E5">over a</font><font color="#CCCCCC"> network</font><font color="#E5E5E5"> to air</font><font color="#CCCCCC"> Lampson</font><font color="#E5E5E5"> but if you</font>

1130
01:00:34,240 --> 01:00:38,680
I increment<font color="#E5E5E5"> like a constant garbage</font>

1131
01:00:36,250 --> 01:00:43,630
collection<font color="#E5E5E5"> characters</font><font color="#CCCCCC"> the coefficient is</font>

1132
01:00:38,680 --> 01:00:46,080
4<font color="#E5E5E5"> and 6 which is um I think I could</font><font color="#CCCCCC"> not</font>

1133
01:00:43,630 --> 01:00:49,600
<font color="#E5E5E5">allow it and now the memory is cheap</font>

1134
01:00:46,080 --> 01:00:51,970
yeah so my impression<font color="#E5E5E5"> is that you're</font>

1135
01:00:49,600 --> 01:00:55,000
<font color="#E5E5E5">supposed to decide when you want</font><font color="#CCCCCC"> to</font>

1136
01:00:51,970 --> 01:00:57,640
garbage collector yeah<font color="#CCCCCC"> yes there are</font>

1137
01:00:55,000 --> 01:00:59,800
some yes<font color="#E5E5E5"> I have the internal dispatcher</font>

1138
01:00:57,640 --> 01:01:03,759
<font color="#E5E5E5">that manages</font><font color="#CCCCCC"> the process</font><font color="#E5E5E5"> and if you'd</font>

1139
01:00:59,800 --> 01:01:07,660
see that if it<font color="#CCCCCC"> is like II don't state in</font>

1140
01:01:03,760 --> 01:01:09,340
a service<font color="#E5E5E5"> then it tries to call garbage</font>

1141
01:01:07,660 --> 01:01:12,580
collector but<font color="#CCCCCC"> the</font><font color="#E5E5E5"> nature of the father</font>

1142
01:01:09,340 --> 01:01:14,500
<font color="#E5E5E5">if you do fuzzing there is no idle time</font>

1143
01:01:12,580 --> 01:01:24,370
there<font color="#E5E5E5"> are requests requests requests and</font>

1144
01:01:14,500 --> 01:01:25,420
requests<font color="#E5E5E5"> yeah any question ok thank you</font>

1145
01:01:24,370 --> 01:01:30,199
thank you

1146
01:01:25,420 --> 01:01:30,199
[Applause]

