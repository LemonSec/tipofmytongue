1
00:00:00,420 --> 00:00:05,640
hey everybody my name is Matt Brooks<font color="#E5E5E5"> I'm</font>

2
00:00:04,049 --> 00:00:08,450
a research<font color="#CCCCCC"> fellow with</font><font color="#E5E5E5"> a group called</font>

3
00:00:05,640 --> 00:00:11,580
<font color="#CCCCCC">the citizen lab I'm also the overseas</font>

4
00:00:08,450 --> 00:00:15,570
<font color="#CCCCCC">sock lead for the sake of a large energy</font>

5
00:00:11,580 --> 00:00:18,539
<font color="#E5E5E5">company</font><font color="#CCCCCC"> the citizen lab is a group that</font>

6
00:00:15,570 --> 00:00:20,520
focuses on researching a wide range of

7
00:00:18,539 --> 00:00:22,859
issues regarding<font color="#E5E5E5"> and in the freedoms</font>

8
00:00:20,520 --> 00:00:24,990
digital rights but specifically I focus

9
00:00:22,859 --> 00:00:26,910
<font color="#E5E5E5">on looking at targeted</font><font color="#CCCCCC"> malware</font>

10
00:00:24,990 --> 00:00:30,179
intrusions<font color="#E5E5E5"> that affect civil society</font>

11
00:00:26,910 --> 00:00:32,910
organizations<font color="#E5E5E5"> so groups like journalists</font>

12
00:00:30,179 --> 00:00:36,360
activists<font color="#CCCCCC"> religious religious</font><font color="#E5E5E5"> Mathew</font>

13
00:00:32,910 --> 00:00:38,459
minorities<font color="#E5E5E5"> so whenever you know I'm</font>

14
00:00:36,360 --> 00:00:41,809
doing<font color="#E5E5E5"> that work I've started to really</font>

15
00:00:38,460 --> 00:00:44,399
<font color="#E5E5E5">embrace using</font><font color="#CCCCCC"> word</font><font color="#E5E5E5"> air or</font><font color="#CCCCCC"> artoo</font>

16
00:00:41,809 --> 00:00:46,230
most of the code<font color="#CCCCCC"> that I look at is what</font>

17
00:00:44,399 --> 00:00:49,559
I call a<font color="#E5E5E5"> kind of Chinese Nexus malware</font>

18
00:00:46,230 --> 00:00:51,690
<font color="#CCCCCC">that is being</font><font color="#E5E5E5"> used against the Tibetan</font>

19
00:00:49,559 --> 00:00:55,680
diaspora<font color="#E5E5E5"> so it means most of the code</font>

20
00:00:51,690 --> 00:00:58,500
<font color="#CCCCCC">that I look at is 32-bit</font><font color="#E5E5E5"> x86 and plants</font>

21
00:00:55,680 --> 00:01:02,550
<font color="#E5E5E5">that are written and compiled in</font>

22
00:00:58,500 --> 00:01:04,199
Microsoft's Visual Studio<font color="#E5E5E5"> and so in that</font>

23
00:01:02,550 --> 00:01:06,750
case you know<font color="#E5E5E5"> whatever I start looking</font>

24
00:01:04,199 --> 00:01:08,700
at a new file<font color="#E5E5E5"> I want to spend as much</font>

25
00:01:06,750 --> 00:01:10,619
<font color="#CCCCCC">time</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> possible on the developer</font>

26
00:01:08,700 --> 00:01:13,530
written functions<font color="#E5E5E5"> I don't want to have</font>

27
00:01:10,619 --> 00:01:15,320
to<font color="#E5E5E5"> spend time</font><font color="#CCCCCC"> looking at library code</font>

28
00:01:13,530 --> 00:01:17,759
that's been linked in statically

29
00:01:15,320 --> 00:01:20,008
<font color="#E5E5E5">unfortunately outside of using Ida Pro</font>

30
00:01:17,759 --> 00:01:22,890
that's<font color="#E5E5E5"> a bit harder</font><font color="#CCCCCC"> than it sounds and</font>

31
00:01:20,009 --> 00:01:25,560
<font color="#CCCCCC">so we'll walk through what that</font><font color="#E5E5E5"> looks</font>

32
00:01:22,890 --> 00:01:27,689
like so<font color="#E5E5E5"> I'm gonna split the talk into</font>

33
00:01:25,560 --> 00:01:29,460
three parts<font color="#CCCCCC"> I'll give an</font><font color="#E5E5E5"> overview about</font>

34
00:01:27,689 --> 00:01:31,770
<font color="#E5E5E5">you know what the problem is that I'm</font>

35
00:01:29,460 --> 00:01:34,470
looking at<font color="#E5E5E5"> I'll talk about some</font><font color="#CCCCCC"> of the</font>

36
00:01:31,770 --> 00:01:36,990
implementations<font color="#E5E5E5"> that I've built</font><font color="#CCCCCC"> using</font>

37
00:01:34,470 --> 00:01:39,450
the<font color="#CCCCCC"> are two pipe</font><font color="#E5E5E5"> API and then we'll see</font>

38
00:01:36,990 --> 00:01:41,158
some applications where I've been<font color="#CCCCCC"> able</font>

39
00:01:39,450 --> 00:01:45,360
to use a signature format with pretty

40
00:01:41,159 --> 00:01:48,689
<font color="#E5E5E5">good success so first getting into</font><font color="#CCCCCC"> the</font>

41
00:01:45,360 --> 00:01:51,030
overview to set this up I kind<font color="#E5E5E5"> of built</font>

42
00:01:48,689 --> 00:01:53,369
an experiment<font color="#CCCCCC"> so I set up an old</font><font color="#E5E5E5"> windows</font>

43
00:01:51,030 --> 00:01:57,240
development<font color="#E5E5E5"> environment I went old for</font>

44
00:01:53,369 --> 00:01:58,979
two reasons one<font color="#CCCCCC"> you know it's something</font>

45
00:01:57,240 --> 00:02:01,380
<font color="#CCCCCC">that some of the malware developers that</font>

46
00:01:58,979 --> 00:02:04,590
I see are still using environments to do

47
00:02:01,380 --> 00:02:08,220
<font color="#E5E5E5">this old</font><font color="#CCCCCC"> you know - I'm not looking</font><font color="#E5E5E5"> at a</font>

48
00:02:04,590 --> 00:02:10,348
version<font color="#E5E5E5"> of Visual Studio that so new</font>

49
00:02:08,220 --> 00:02:13,150
that you know some of<font color="#CCCCCC"> the tools that</font>

50
00:02:10,348 --> 00:02:15,488
<font color="#CCCCCC">claim to</font><font color="#E5E5E5"> have signatures built in</font>

51
00:02:13,150 --> 00:02:17,049
<font color="#E5E5E5">aren't</font><font color="#CCCCCC"> gonna recognize them yet</font><font color="#E5E5E5"> so you</font>

52
00:02:15,489 --> 00:02:18,569
know these<font color="#E5E5E5"> are our older environments</font>

53
00:02:17,049 --> 00:02:21,280
that<font color="#E5E5E5"> have been in play</font><font color="#CCCCCC"> for a long time</font>

54
00:02:18,569 --> 00:02:23,738
in<font color="#E5E5E5"> this case all I wanted to do was</font>

55
00:02:21,280 --> 00:02:27,220
write and compile the standard<font color="#E5E5E5"> hello</font>

56
00:02:23,739 --> 00:02:28,750
<font color="#E5E5E5">world program and in this case</font><font color="#CCCCCC"> I did in</font>

57
00:02:27,220 --> 00:02:31,900
the visual studio<font color="#CCCCCC"> I left</font>

58
00:02:28,750 --> 00:02:34,540
all<font color="#CCCCCC"> of the settings as default the</font><font color="#E5E5E5"> only</font>

59
00:02:31,900 --> 00:02:37,629
thing I<font color="#E5E5E5"> changed is that I compiled the</font>

60
00:02:34,540 --> 00:02:40,060
code as see instead of<font color="#CCCCCC"> C++ and I also</font>

61
00:02:37,629 --> 00:02:43,480
<font color="#E5E5E5">compiled in release mode and didn't use</font>

62
00:02:40,060 --> 00:02:45,220
debug mode<font color="#CCCCCC"> it's will avoid the bias</font><font color="#E5E5E5"> of</font>

63
00:02:43,480 --> 00:02:47,649
all the code<font color="#E5E5E5"> that</font><font color="#CCCCCC"> gets added in whenever</font>

64
00:02:45,220 --> 00:02:48,760
<font color="#E5E5E5">you do compile in debug</font><font color="#CCCCCC"> mode which is</font>

65
00:02:47,650 --> 00:02:52,060
kind of<font color="#E5E5E5"> a separate version of this</font>

66
00:02:48,760 --> 00:02:53,649
<font color="#E5E5E5">problem</font><font color="#CCCCCC"> so with the executable here I</font>

67
00:02:52,060 --> 00:02:56,139
wanted<font color="#E5E5E5"> to</font><font color="#CCCCCC"> show what it looks like in a</font>

68
00:02:53,650 --> 00:03:00,250
<font color="#E5E5E5">couple of different disassemblers as you</font>

69
00:02:56,139 --> 00:03:03,760
might see it so first<font color="#E5E5E5"> jumping back into</font>

70
00:03:00,250 --> 00:03:05,500
the older version of<font color="#CCCCCC"> IDA</font><font color="#E5E5E5"> free you know</font>

71
00:03:03,760 --> 00:03:08,409
<font color="#E5E5E5">using the the source code on the left</font>

72
00:03:05,500 --> 00:03:10,299
here on<font color="#CCCCCC"> the right is what you get</font><font color="#E5E5E5"> so the</font>

73
00:03:08,409 --> 00:03:12,429
older version of<font color="#CCCCCC"> IDA free at least</font>

74
00:03:10,299 --> 00:03:14,680
<font color="#E5E5E5">recognizes the main function which is</font>

75
00:03:12,430 --> 00:03:17,440
good you can<font color="#E5E5E5"> see the hello world string</font>

76
00:03:14,680 --> 00:03:19,180
that's pushed<font color="#CCCCCC"> on to the stack and then</font>

77
00:03:17,440 --> 00:03:21,910
you see a call to an unrecognized

78
00:03:19,180 --> 00:03:24,699
function now for those who<font color="#CCCCCC"> are used to</font>

79
00:03:21,910 --> 00:03:27,489
<font color="#CCCCCC">using</font><font color="#E5E5E5"> Ida you know or using it kind of</font>

80
00:03:24,699 --> 00:03:29,769
impaired with with<font color="#E5E5E5"> r2 a lot of people</font>

81
00:03:27,489 --> 00:03:31,810
expect it to recognize<font color="#E5E5E5"> standard library</font>

82
00:03:29,769 --> 00:03:34,680
code<font color="#E5E5E5"> so you would</font><font color="#CCCCCC"> expect it to recognize</font>

83
00:03:31,810 --> 00:03:36,760
<font color="#CCCCCC">that printf function</font><font color="#E5E5E5"> now in this case</font>

84
00:03:34,680 --> 00:03:39,699
<font color="#E5E5E5">you can see the function</font><font color="#CCCCCC"> is still</font>

85
00:03:36,760 --> 00:03:42,519
unrecognized<font color="#E5E5E5"> and if you jump so the</font>

86
00:03:39,699 --> 00:03:44,859
screen shot down below that is if you

87
00:03:42,519 --> 00:03:47,290
jump<font color="#CCCCCC"> into the</font><font color="#E5E5E5"> disassembly for that</font>

88
00:03:44,859 --> 00:03:49,479
supposedly unknown function you know you

89
00:03:47,290 --> 00:03:51,668
start<font color="#CCCCCC"> to see</font><font color="#E5E5E5"> some calls to exception</font>

90
00:03:49,479 --> 00:03:55,030
handlers<font color="#CCCCCC"> to error handlers and that kind</font>

91
00:03:51,669 --> 00:03:57,069
of stuff now with experience<font color="#E5E5E5"> you know</font>

92
00:03:55,030 --> 00:03:59,739
you can take<font color="#E5E5E5"> a look at this disassembly</font>

93
00:03:57,069 --> 00:04:01,510
<font color="#E5E5E5">and you know if you know what the object</font>

94
00:03:59,739 --> 00:04:03,970
<font color="#E5E5E5">of the hello world program is you know</font>

95
00:04:01,510 --> 00:04:07,750
<font color="#CCCCCC">that</font><font color="#E5E5E5"> that call is likely going to be</font>

96
00:04:03,970 --> 00:04:08,829
print<font color="#E5E5E5"> because that's the goal</font><font color="#CCCCCC"> also if</font>

97
00:04:07,750 --> 00:04:10,930
you were<font color="#E5E5E5"> to start looking at the</font>

98
00:04:08,829 --> 00:04:12,760
instruction<font color="#CCCCCC"> you just see that a lot of</font>

99
00:04:10,930 --> 00:04:14,409
<font color="#E5E5E5">the calls are prefixed with the</font>

100
00:04:12,760 --> 00:04:17,978
underscores which are typically reserved

101
00:04:14,409 --> 00:04:19,719
for internal calls then you would start

102
00:04:17,978 --> 00:04:21,940
<font color="#CCCCCC">to realize</font><font color="#E5E5E5"> okay maybe this is a</font><font color="#CCCCCC"> library</font>

103
00:04:19,720 --> 00:04:25,000
function<font color="#E5E5E5"> now imagine a different</font>

104
00:04:21,940 --> 00:04:26,469
<font color="#E5E5E5">scenario where you're a mid-level kind</font>

105
00:04:25,000 --> 00:04:28,720
of sake analyst or a new Reese

106
00:04:26,470 --> 00:04:30,220
who's<font color="#E5E5E5"> just starting out maybe you're</font>

107
00:04:28,720 --> 00:04:32,530
somebody<font color="#E5E5E5"> who can read</font>

108
00:04:30,220 --> 00:04:37,120
you know<font color="#CCCCCC"> behavioural malware</font><font color="#E5E5E5"> analysis</font>

109
00:04:32,530 --> 00:04:39,400
reports<font color="#E5E5E5"> you know some of the basic win32</font>

110
00:04:37,120 --> 00:04:40,990
<font color="#CCCCCC">api calls and</font><font color="#E5E5E5"> malware will use but</font>

111
00:04:39,400 --> 00:04:43,090
you're just<font color="#CCCCCC"> starting to try to get into</font>

112
00:04:40,990 --> 00:04:44,740
understand<font color="#E5E5E5"> you know disassembly and</font>

113
00:04:43,090 --> 00:04:47,650
<font color="#CCCCCC">imagine that the stream wasn't</font><font color="#E5E5E5"> hello</font>

114
00:04:44,740 --> 00:04:50,050
world you know so<font color="#E5E5E5"> think about</font><font color="#CCCCCC"> now either</font>

115
00:04:47,650 --> 00:04:52,210
<font color="#E5E5E5">the time you're about to lose</font><font color="#CCCCCC"> reversing</font>

116
00:04:50,050 --> 00:04:53,350
this function or the time that<font color="#CCCCCC"> you know</font>

117
00:04:52,210 --> 00:04:57,359
<font color="#E5E5E5">the confusion that you're about to</font>

118
00:04:53,350 --> 00:05:00,310
undergo figuring out what's going on

119
00:04:57,360 --> 00:05:02,040
fast<font color="#E5E5E5"> forward to the newer version of</font><font color="#CCCCCC"> ida</font>

120
00:05:00,310 --> 00:05:05,110
free that was<font color="#E5E5E5"> released earlier</font><font color="#CCCCCC"> this year</font>

121
00:05:02,040 --> 00:05:07,270
<font color="#E5E5E5">different scenario</font><font color="#CCCCCC"> in this case main</font>

122
00:05:05,110 --> 00:05:09,310
wasn't even<font color="#E5E5E5"> recognized all you get is</font>

123
00:05:07,270 --> 00:05:12,010
being dropped in right at the<font color="#E5E5E5"> entry</font>

124
00:05:09,310 --> 00:05:13,720
<font color="#E5E5E5">point</font><font color="#CCCCCC"> and so you have to step through a</font>

125
00:05:12,010 --> 00:05:16,060
bunch of compiler generated<font color="#CCCCCC"> their</font>

126
00:05:13,720 --> 00:05:17,770
compiler added code<font color="#E5E5E5"> before you even get</font>

127
00:05:16,060 --> 00:05:20,260
to<font color="#E5E5E5"> something that</font><font color="#CCCCCC"> looks like a main</font>

128
00:05:17,770 --> 00:05:22,539
function<font color="#E5E5E5"> so in this case</font><font color="#CCCCCC"> again you</font><font color="#E5E5E5"> can</font>

129
00:05:20,260 --> 00:05:25,120
see the hello world string that gets

130
00:05:22,540 --> 00:05:27,460
pushed<font color="#E5E5E5"> onto the stack and then call to</font>

131
00:05:25,120 --> 00:05:29,860
an unrecognized function now in this

132
00:05:27,460 --> 00:05:32,950
case if you look<font color="#E5E5E5"> at the function listing</font>

133
00:05:29,860 --> 00:05:34,360
for the things<font color="#E5E5E5"> that</font><font color="#CCCCCC"> Aida's analysis</font>

134
00:05:32,950 --> 00:05:36,550
picked up in this case you can see that

135
00:05:34,360 --> 00:05:39,700
<font color="#E5E5E5">none of those were recognized by</font><font color="#CCCCCC"> the</font>

136
00:05:36,550 --> 00:05:42,510
standard signatures<font color="#CCCCCC"> that people expect</font>

137
00:05:39,700 --> 00:05:44,169
to work<font color="#E5E5E5"> whenever you're using item</font>

138
00:05:42,510 --> 00:05:46,120
<font color="#CCCCCC">unfortunately you know if you remember</font>

139
00:05:44,169 --> 00:05:48,070
looking at the source code<font color="#CCCCCC"> here</font><font color="#E5E5E5"> you'll</font>

140
00:05:46,120 --> 00:05:49,810
see I didn't implement<font color="#E5E5E5"> any functions of</font>

141
00:05:48,070 --> 00:05:52,210
my own<font color="#E5E5E5"> you know all I did was call a</font>

142
00:05:49,810 --> 00:05:54,010
single<font color="#CCCCCC"> library function with inside main</font>

143
00:05:52,210 --> 00:05:56,320
meaning the rest of the functions that

144
00:05:54,010 --> 00:05:58,330
are included<font color="#E5E5E5"> here</font><font color="#CCCCCC"> are compiler generated</font>

145
00:05:56,320 --> 00:06:00,430
code so if you<font color="#E5E5E5"> think back to the</font>

146
00:05:58,330 --> 00:06:03,609
<font color="#E5E5E5">scenario that we just described a minute</font>

147
00:06:00,430 --> 00:06:05,620
ago still<font color="#E5E5E5"> you know really confusing for</font>

148
00:06:03,610 --> 00:06:09,300
<font color="#E5E5E5">somebody who's trying to to get into the</font>

149
00:06:05,620 --> 00:06:11,500
game<font color="#CCCCCC"> just to explore</font><font color="#E5E5E5"> a couple of other</font>

150
00:06:09,300 --> 00:06:13,200
<font color="#E5E5E5">disassemblers you know binary ninja is</font>

151
00:06:11,500 --> 00:06:15,460
one that's<font color="#E5E5E5"> gaining a lot of popularity</font>

152
00:06:13,200 --> 00:06:17,440
<font color="#CCCCCC">if you load this</font><font color="#E5E5E5"> up in there again</font>

153
00:06:15,460 --> 00:06:19,930
you're gonna get<font color="#E5E5E5"> unrecognized main</font>

154
00:06:17,440 --> 00:06:21,700
function you get dumped in at the entry

155
00:06:19,930 --> 00:06:24,100
<font color="#CCCCCC">point and then a</font><font color="#E5E5E5"> bunch of other</font>

156
00:06:21,700 --> 00:06:27,130
functions<font color="#CCCCCC"> that are</font><font color="#E5E5E5"> completely unrelated</font>

157
00:06:24,100 --> 00:06:29,740
<font color="#E5E5E5">to what the malware developer what the</font>

158
00:06:27,130 --> 00:06:32,950
programmer was trying to do and in

159
00:06:29,740 --> 00:06:36,099
<font color="#E5E5E5">hopper</font><font color="#CCCCCC"> you get the same now if we had</font>

160
00:06:32,950 --> 00:06:37,659
<font color="#E5E5E5">loaded this up into</font><font color="#CCCCCC"> r2 we would have you</font>

161
00:06:36,099 --> 00:06:39,400
know<font color="#E5E5E5"> it kind of showed</font><font color="#CCCCCC"> the same thing as</font>

162
00:06:37,660 --> 00:06:40,270
the<font color="#E5E5E5"> first the older I to free version so</font>

163
00:06:39,400 --> 00:06:42,039
<font color="#E5E5E5">r2 will wreck</font>

164
00:06:40,270 --> 00:06:44,469
it's<font color="#E5E5E5"> Maine for you but you're still</font>

165
00:06:42,040 --> 00:06:47,170
<font color="#E5E5E5">going to see a bunch of functions that</font>

166
00:06:44,470 --> 00:06:50,200
<font color="#E5E5E5">are added by the compiler by Visual</font>

167
00:06:47,170 --> 00:06:51,850
<font color="#E5E5E5">Studio that go unmatched</font><font color="#CCCCCC"> so you know</font>

168
00:06:50,200 --> 00:06:54,250
with experience<font color="#E5E5E5"> that may or may</font><font color="#CCCCCC"> not be</font>

169
00:06:51,850 --> 00:06:58,660
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> but it still kind of presents itself</font>

170
00:06:54,250 --> 00:07:01,780
as a problem<font color="#CCCCCC"> lastly if we do jump to the</font>

171
00:06:58,660 --> 00:07:06,250
pay<font color="#CCCCCC"> version of a vital pro</font><font color="#E5E5E5"> so you know</font>

172
00:07:01,780 --> 00:07:07,900
if you have $1,400 $1,400<font color="#CCCCCC"> to spend you</font>

173
00:07:06,250 --> 00:07:10,770
can see we do get a<font color="#E5E5E5"> recognized main</font>

174
00:07:07,900 --> 00:07:14,049
function<font color="#CCCCCC"> and a</font><font color="#E5E5E5"> recognized print function</font>

175
00:07:10,770 --> 00:07:18,430
<font color="#CCCCCC">you know so everything is everything</font><font color="#E5E5E5"> is</font>

176
00:07:14,050 --> 00:07:19,570
good<font color="#CCCCCC"> so this is you know kind of the</font>

177
00:07:18,430 --> 00:07:22,000
problem<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I'm looking at is that</font>

178
00:07:19,570 --> 00:07:23,650
<font color="#E5E5E5">again whenever I</font><font color="#CCCCCC"> get a new file</font><font color="#E5E5E5"> that I'm</font>

179
00:07:22,000 --> 00:07:26,590
looking<font color="#E5E5E5"> at</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> want to maximize my</font>

180
00:07:23,650 --> 00:07:28,419
<font color="#E5E5E5">productivity so I want</font><font color="#CCCCCC"> to spend time</font>

181
00:07:26,590 --> 00:07:31,090
<font color="#E5E5E5">looking at the functions that were built</font>

182
00:07:28,420 --> 00:07:33,190
by<font color="#E5E5E5"> the malware developer not the</font>

183
00:07:31,090 --> 00:07:36,760
functions that are added in by a

184
00:07:33,190 --> 00:07:38,650
compiler in this case you know there are

185
00:07:36,760 --> 00:07:40,210
tons of different library code that

186
00:07:38,650 --> 00:07:42,549
<font color="#E5E5E5">might end up in the file that is</font>

187
00:07:40,210 --> 00:07:44,080
compiled by<font color="#CCCCCC"> visual studio</font><font color="#E5E5E5"> you know so</font>

188
00:07:42,550 --> 00:07:45,250
there are<font color="#E5E5E5"> tons of different versions of</font>

189
00:07:44,080 --> 00:07:48,820
the visual C runtime

190
00:07:45,250 --> 00:07:49,990
and the visual<font color="#CCCCCC"> C++ runtime</font><font color="#E5E5E5"> aside from</font>

191
00:07:48,820 --> 00:07:52,240
that once you start<font color="#CCCCCC"> thinking about</font>

192
00:07:49,990 --> 00:07:54,820
<font color="#CCCCCC">Microsoft's foundational classes or</font>

193
00:07:52,240 --> 00:07:57,640
active template libraries<font color="#E5E5E5"> tons of other</font>

194
00:07:54,820 --> 00:08:00,070
library<font color="#E5E5E5"> code</font><font color="#CCCCCC"> that might</font><font color="#E5E5E5"> get included you</font>

195
00:07:57,640 --> 00:08:03,550
know that space<font color="#CCCCCC"> for the functions</font><font color="#E5E5E5"> that</font>

196
00:08:00,070 --> 00:08:05,909
get<font color="#CCCCCC"> added</font><font color="#E5E5E5"> kind of expands now if you</font>

197
00:08:03,550 --> 00:08:08,530
think<font color="#CCCCCC"> about expanding</font><font color="#E5E5E5"> even further</font>

198
00:08:05,910 --> 00:08:11,050
<font color="#CCCCCC">OpenSSL sequel lights</font>

199
00:08:08,530 --> 00:08:14,049
<font color="#E5E5E5">Zillah different compression libraries</font>

200
00:08:11,050 --> 00:08:15,820
all these can end up you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> Maur</font>

201
00:08:14,050 --> 00:08:17,980
developers can<font color="#CCCCCC"> use them statically</font>

202
00:08:15,820 --> 00:08:19,719
<font color="#CCCCCC">linked code</font><font color="#E5E5E5"> that will end up inside your</font>

203
00:08:17,980 --> 00:08:23,050
malware sample and you know even

204
00:08:19,720 --> 00:08:24,910
<font color="#CCCCCC">Borland's Delfy still something that</font><font color="#E5E5E5"> you</font>

205
00:08:23,050 --> 00:08:27,580
know we have to care<font color="#CCCCCC"> about</font><font color="#E5E5E5"> and so in</font>

206
00:08:24,910 --> 00:08:29,560
this case<font color="#CCCCCC"> I want</font><font color="#E5E5E5"> to be able</font><font color="#CCCCCC"> to kind of</font>

207
00:08:27,580 --> 00:08:31,900
have<font color="#E5E5E5"> a</font><font color="#CCCCCC"> little more</font><font color="#E5E5E5"> control over the</font>

208
00:08:29,560 --> 00:08:34,090
functions that<font color="#E5E5E5"> I can write signatures</font>

209
00:08:31,900 --> 00:08:36,699
<font color="#E5E5E5">for and build out without having</font><font color="#CCCCCC"> a</font>

210
00:08:34,090 --> 00:08:39,520
dependence on<font color="#CCCCCC"> items</font><font color="#E5E5E5"> for technology</font><font color="#CCCCCC"> I</font>

211
00:08:36,700 --> 00:08:43,810
want<font color="#CCCCCC"> to be able to do this in a</font><font color="#E5E5E5"> more</font>

212
00:08:39,520 --> 00:08:46,300
freely<font color="#E5E5E5"> or open solution so to</font><font color="#CCCCCC"> jump</font><font color="#E5E5E5"> into</font>

213
00:08:43,809 --> 00:08:48,609
some of<font color="#CCCCCC"> the implementations first I do</font>

214
00:08:46,300 --> 00:08:50,500
want<font color="#CCCCCC"> to talk a little</font><font color="#E5E5E5"> bit about Ida's</font>

215
00:08:48,610 --> 00:08:52,280
flirt signature technology just<font color="#E5E5E5"> because</font>

216
00:08:50,500 --> 00:08:54,590
that's<font color="#E5E5E5"> one that</font>

217
00:08:52,280 --> 00:08:55,520
exists and you know has been used<font color="#CCCCCC"> for a</font>

218
00:08:54,590 --> 00:08:57,830
long<font color="#E5E5E5"> time</font>

219
00:08:55,520 --> 00:09:01,010
and it is a good approach to<font color="#CCCCCC"> the problem</font>

220
00:08:57,830 --> 00:09:02,930
<font color="#E5E5E5">so the documentation for this is</font>

221
00:09:01,010 --> 00:09:04,220
<font color="#CCCCCC">available online</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> you know this is is</font>

222
00:09:02,930 --> 00:09:07,489
<font color="#CCCCCC">my understanding of</font><font color="#E5E5E5"> what they're</font><font color="#CCCCCC"> trying</font>

223
00:09:04,220 --> 00:09:08,810
to do the first<font color="#CCCCCC"> step</font><font color="#E5E5E5"> given you know a</font>

224
00:09:07,490 --> 00:09:11,390
library<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you're trying to build</font>

225
00:09:08,810 --> 00:09:13,880
these signatures for<font color="#E5E5E5"> is that I just</font>

226
00:09:11,390 --> 00:09:16,460
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to take that and basically look at</font>

227
00:09:13,880 --> 00:09:20,600
<font color="#E5E5E5">the first 32 bytes for every signature</font>

228
00:09:16,460 --> 00:09:22,760
and mask out variant bytes so<font color="#CCCCCC"> bytes set</font>

229
00:09:20,600 --> 00:09:24,110
represent you know relative memory

230
00:09:22,760 --> 00:09:24,740
addresses and that kind of stuff that

231
00:09:24,110 --> 00:09:28,580
<font color="#CCCCCC">may change</font>

232
00:09:24,740 --> 00:09:30,230
they'll mask out<font color="#CCCCCC"> so the bytes that that</font>

233
00:09:28,580 --> 00:09:32,270
you're considering or<font color="#CCCCCC"> liqueur bytes to</font>

234
00:09:30,230 --> 00:09:33,680
<font color="#CCCCCC">the function</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> in that case</font><font color="#E5E5E5"> we'll</font>

235
00:09:32,270 --> 00:09:35,750
store them in a tree<font color="#E5E5E5"> based structure</font>

236
00:09:33,680 --> 00:09:37,520
<font color="#E5E5E5">that way you're not saving you know the</font>

237
00:09:35,750 --> 00:09:40,040
same bytes over<font color="#E5E5E5"> and over so if you think</font>

238
00:09:37,520 --> 00:09:41,960
like function prologues that you might

239
00:09:40,040 --> 00:09:44,209
see at<font color="#E5E5E5"> the start of the function</font>

240
00:09:41,960 --> 00:09:45,710
you know those may be<font color="#E5E5E5"> the same for every</font>

241
00:09:44,210 --> 00:09:48,590
<font color="#CCCCCC">function so there's no need to store</font>

242
00:09:45,710 --> 00:09:50,330
them<font color="#E5E5E5"> each time and so they</font><font color="#CCCCCC"> store it in a</font>

243
00:09:48,590 --> 00:09:52,190
tree<font color="#E5E5E5"> based structure and then</font><font color="#CCCCCC"> we'll</font>

244
00:09:50,330 --> 00:09:55,010
branch out where the bytes start to

245
00:09:52,190 --> 00:09:57,110
change<font color="#E5E5E5"> for each</font><font color="#CCCCCC"> function</font><font color="#E5E5E5"> after</font><font color="#CCCCCC"> that</font>

246
00:09:55,010 --> 00:09:59,470
<font color="#E5E5E5">using the Sigma tool they'll process</font>

247
00:09:57,110 --> 00:10:01,630
those<font color="#CCCCCC"> patterns</font><font color="#E5E5E5"> and what they do is</font>

248
00:09:59,470 --> 00:10:06,290
moving away from that<font color="#E5E5E5"> tree structure</font>

249
00:10:01,630 --> 00:10:08,420
they<font color="#E5E5E5"> will store more of a bit array that</font>

250
00:10:06,290 --> 00:10:10,010
represents where<font color="#CCCCCC"> the different bytes</font>

251
00:10:08,420 --> 00:10:11,599
have changed and<font color="#E5E5E5"> then they'll store the</font>

252
00:10:10,010 --> 00:10:13,970
values of the bytes<font color="#E5E5E5"> that have changed</font>

253
00:10:11,600 --> 00:10:16,820
<font color="#CCCCCC">and then after that the signature files</font>

254
00:10:13,970 --> 00:10:18,890
are compressed now whenever<font color="#E5E5E5"> you load a</font>

255
00:10:16,820 --> 00:10:21,440
<font color="#CCCCCC">new file up inside of</font><font color="#E5E5E5"> the way that it</font>

256
00:10:18,890 --> 00:10:23,030
decides which signatures to load are

257
00:10:21,440 --> 00:10:25,870
based on the bytes of<font color="#E5E5E5"> the entry point</font>

258
00:10:23,030 --> 00:10:27,800
<font color="#CCCCCC">and so it'll use special signature files</font>

259
00:10:25,870 --> 00:10:30,740
<font color="#E5E5E5">look at the bytes</font><font color="#CCCCCC"> at the entry point</font>

260
00:10:27,800 --> 00:10:32,839
<font color="#CCCCCC">decide what type of environment that</font>

261
00:10:30,740 --> 00:10:35,360
program was compiled in and then we'll

262
00:10:32,840 --> 00:10:38,150
apply<font color="#E5E5E5"> the</font><font color="#CCCCCC"> christ' integers after the</font>

263
00:10:35,360 --> 00:10:40,280
fact<font color="#E5E5E5"> you know if you want to either use</font>

264
00:10:38,150 --> 00:10:42,290
<font color="#CCCCCC">your own or change something you can</font>

265
00:10:40,280 --> 00:10:44,360
<font color="#E5E5E5">apply different signature set but again</font>

266
00:10:42,290 --> 00:10:49,240
that requires<font color="#E5E5E5"> having</font><font color="#CCCCCC"> two paid tools that</font>

267
00:10:44,360 --> 00:10:49,240
are<font color="#E5E5E5"> required to build those signatures</font>

268
00:10:49,630 --> 00:10:54,710
so earlier this<font color="#E5E5E5"> year I started exploring</font>

269
00:10:52,730 --> 00:10:57,680
kind of the power of using<font color="#CCCCCC"> our two pipe</font>

270
00:10:54,710 --> 00:10:59,750
<font color="#CCCCCC">I had you know I've</font><font color="#E5E5E5"> been using the</font><font color="#CCCCCC"> our</font>

271
00:10:57,680 --> 00:11:01,930
<font color="#E5E5E5">two utilities for a while I've been</font>

272
00:10:59,750 --> 00:11:04,210
<font color="#CCCCCC">using our two</font>

273
00:11:01,930 --> 00:11:06,939
a more static<font color="#E5E5E5"> analysis tool really liked</font>

274
00:11:04,210 --> 00:11:10,330
it a lot<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so I started to explore the</font>

275
00:11:06,940 --> 00:11:12,640
<font color="#E5E5E5">r2 pipe and it's fantastic</font><font color="#CCCCCC"> so there's a</font>

276
00:11:10,330 --> 00:11:14,920
repository<font color="#CCCCCC"> that I have on github that I</font>

277
00:11:12,640 --> 00:11:16,500
call our<font color="#CCCCCC"> to kit and it's just a bunch</font><font color="#E5E5E5"> of</font>

278
00:11:14,920 --> 00:11:19,750
different<font color="#CCCCCC"> scripts that I've put together</font>

279
00:11:16,500 --> 00:11:22,510
<font color="#CCCCCC">that</font><font color="#E5E5E5"> make looking at malware within our</font>

280
00:11:19,750 --> 00:11:25,959
to easier<font color="#E5E5E5"> and so in this case one of</font>

281
00:11:22,510 --> 00:11:28,990
them is<font color="#CCCCCC"> cigs</font><font color="#E5E5E5"> dot</font><font color="#CCCCCC"> Pi which is a script</font>

282
00:11:25,959 --> 00:11:30,550
that<font color="#E5E5E5"> I've built to kind of rebuilt some</font>

283
00:11:28,990 --> 00:11:34,899
functionality that's similar to flirt

284
00:11:30,550 --> 00:11:36,579
that's similar to flirt that'll allow me

285
00:11:34,899 --> 00:11:38,890
to rename functions and<font color="#CCCCCC"> recognize</font>

286
00:11:36,580 --> 00:11:41,140
functions automatically after<font color="#E5E5E5"> playing</font>

287
00:11:38,890 --> 00:11:43,839
<font color="#E5E5E5">around a little bit I came up with an</font>

288
00:11:41,140 --> 00:11:45,550
implementation<font color="#CCCCCC"> that I finally liked</font><font color="#E5E5E5"> so</font>

289
00:11:43,839 --> 00:11:48,790
for every different<font color="#E5E5E5"> type of signature I</font>

290
00:11:45,550 --> 00:11:51,160
want to build<font color="#CCCCCC"> as long as the</font><font color="#E5E5E5"> output</font><font color="#CCCCCC"> of</font>

291
00:11:48,790 --> 00:11:53,920
the algorithm can be<font color="#E5E5E5"> output string that</font>

292
00:11:51,160 --> 00:11:55,899
can<font color="#E5E5E5"> be hashed</font><font color="#CCCCCC"> I can build</font><font color="#E5E5E5"> that as a</font>

293
00:11:53,920 --> 00:11:57,490
generator and then I can make<font color="#E5E5E5"> and match</font>

294
00:11:55,899 --> 00:11:59,770
accordingly<font color="#CCCCCC"> and we'll</font><font color="#E5E5E5"> walk</font><font color="#CCCCCC"> through some</font>

295
00:11:57,490 --> 00:12:01,420
<font color="#E5E5E5">of the code snippets for what that looks</font>

296
00:11:59,770 --> 00:12:03,279
like<font color="#E5E5E5"> I've come up</font><font color="#CCCCCC"> with three different</font>

297
00:12:01,420 --> 00:12:05,920
signature types that<font color="#E5E5E5"> I'm using so far</font>

298
00:12:03,279 --> 00:12:09,010
<font color="#CCCCCC">the</font><font color="#E5E5E5"> first is based off of</font><font color="#CCCCCC"> read Ayers</font>

299
00:12:05,920 --> 00:12:10,719
<font color="#E5E5E5">native signature format which has been</font>

300
00:12:09,010 --> 00:12:12,760
<font color="#E5E5E5">great and then the other two</font><font color="#CCCCCC"> are a</font>

301
00:12:10,720 --> 00:12:15,220
little more<font color="#E5E5E5"> experimental one of them is</font>

302
00:12:12,760 --> 00:12:17,040
<font color="#CCCCCC">dealing with string sets so the strings</font>

303
00:12:15,220 --> 00:12:19,630
that<font color="#CCCCCC"> are referenced</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> given function</font>

304
00:12:17,040 --> 00:12:23,439
<font color="#E5E5E5">and then</font><font color="#CCCCCC"> also call chained gadgets which</font>

305
00:12:19,630 --> 00:12:25,589
are<font color="#E5E5E5"> combinations of when 32 API calls</font>

306
00:12:23,440 --> 00:12:30,010
that<font color="#CCCCCC"> you might see in a</font><font color="#E5E5E5"> given function</font>

307
00:12:25,589 --> 00:12:31,390
<font color="#E5E5E5">so we'll</font><font color="#CCCCCC"> talk about each of these so</font>

308
00:12:30,010 --> 00:12:33,160
first just to<font color="#E5E5E5"> look a little bit about</font>

309
00:12:31,390 --> 00:12:34,900
the the structure<font color="#CCCCCC"> of the file that I</font>

310
00:12:33,160 --> 00:12:36,850
wrote you can see there's a<font color="#E5E5E5"> couple of</font>

311
00:12:34,900 --> 00:12:39,550
different main classes in there

312
00:12:36,850 --> 00:12:41,620
so first the matcher class is what will

313
00:12:39,550 --> 00:12:45,250
end<font color="#E5E5E5"> up being used if you're inside an r2</font>

314
00:12:41,620 --> 00:12:47,290
session against a<font color="#CCCCCC"> target file again</font><font color="#E5E5E5"> this</font>

315
00:12:45,250 --> 00:12:49,540
is<font color="#E5E5E5"> going to take a location of</font>

316
00:12:47,290 --> 00:12:51,279
signatures and is going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> match them</font>

317
00:12:49,540 --> 00:12:54,849
within<font color="#E5E5E5"> the session so it's kind of like</font>

318
00:12:51,279 --> 00:12:57,939
doing<font color="#E5E5E5"> a you know</font><font color="#CCCCCC"> Auto analysis within</font><font color="#E5E5E5"> a</font>

319
00:12:54,850 --> 00:13:00,670
new target<font color="#E5E5E5"> file using our to the maker</font>

320
00:12:57,940 --> 00:13:03,760
class<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> flipside if I'm making new</font>

321
00:13:00,670 --> 00:13:05,800
signatures against<font color="#E5E5E5"> new library code the</font>

322
00:13:03,760 --> 00:13:09,430
maker class is what will<font color="#E5E5E5"> get called and</font>

323
00:13:05,800 --> 00:13:11,670
again it'll<font color="#E5E5E5"> take a given location of you</font>

324
00:13:09,430 --> 00:13:15,400
know either one<font color="#CCCCCC"> or many</font><font color="#E5E5E5"> different</font>

325
00:13:11,670 --> 00:13:15,699
library<font color="#E5E5E5"> shared libraries and will parse</font>

326
00:13:15,400 --> 00:13:17,410
through

327
00:13:15,699 --> 00:13:21,069
functions of<font color="#CCCCCC"> each of those libraries and</font>

328
00:13:17,410 --> 00:13:24,009
build the signatures given the signature

329
00:13:21,069 --> 00:13:25,540
type<font color="#CCCCCC"> that I want to</font><font color="#E5E5E5"> build and then after</font>

330
00:13:24,009 --> 00:13:27,369
that<font color="#E5E5E5"> you know on both sides the</font>

331
00:13:25,540 --> 00:13:29,498
generator class is used<font color="#E5E5E5"> and for every</font>

332
00:13:27,369 --> 00:13:31,809
new signature<font color="#E5E5E5"> type that I just I don't</font>

333
00:13:29,499 --> 00:13:34,299
<font color="#E5E5E5">want to build</font><font color="#CCCCCC"> I just need to build</font><font color="#E5E5E5"> a</font>

334
00:13:31,809 --> 00:13:35,949
subclass of generator<font color="#E5E5E5"> and then based on</font>

335
00:13:34,299 --> 00:13:37,689
<font color="#E5E5E5">the extension or type that I pass it</font>

336
00:13:35,949 --> 00:13:40,059
<font color="#E5E5E5">that's the algorithm that's going</font><font color="#CCCCCC"> to be</font>

337
00:13:37,689 --> 00:13:41,730
used so you know<font color="#E5E5E5"> even though I have</font>

338
00:13:40,059 --> 00:13:45,129
different<font color="#E5E5E5"> string types that are there I</font>

339
00:13:41,730 --> 00:13:47,739
kind<font color="#E5E5E5"> of you know can do a lot</font><font color="#CCCCCC"> of this</font>

340
00:13:45,129 --> 00:13:51,220
work in uniform<font color="#CCCCCC"> which has been</font><font color="#E5E5E5"> pretty</font>

341
00:13:47,739 --> 00:13:54,040
helpful<font color="#CCCCCC"> so for those</font><font color="#E5E5E5"> who</font><font color="#CCCCCC"> aren't familiar</font>

342
00:13:51,220 --> 00:13:55,809
<font color="#E5E5E5">with</font><font color="#CCCCCC"> our two signature capability</font>

343
00:13:54,040 --> 00:13:58,748
you know I'll walk<font color="#CCCCCC"> through just the the</font>

344
00:13:55,809 --> 00:14:00,459
basics<font color="#E5E5E5"> of what signatures are so this is</font>

345
00:13:58,749 --> 00:14:02,470
a function and<font color="#CCCCCC"> this isn't a library</font>

346
00:14:00,459 --> 00:14:04,748
<font color="#CCCCCC">function this is a function from an</font>

347
00:14:02,470 --> 00:14:07,239
older malware family called PC<font color="#E5E5E5"> client</font>

348
00:14:04,749 --> 00:14:10,660
the source code for<font color="#CCCCCC"> this is up on github</font>

349
00:14:07,239 --> 00:14:11,980
<font color="#E5E5E5">it's part of a repository by developer</font>

350
00:14:10,660 --> 00:14:14,319
that<font color="#E5E5E5"> has</font><font color="#CCCCCC"> a couple of</font><font color="#E5E5E5"> different</font><font color="#CCCCCC"> malware</font>

351
00:14:11,980 --> 00:14:16,119
families in there<font color="#E5E5E5"> it also has the</font>

352
00:14:14,319 --> 00:14:18,519
compiled code<font color="#E5E5E5"> so it makes it really nice</font>

353
00:14:16,119 --> 00:14:22,539
<font color="#CCCCCC">to use for a source to binary</font>

354
00:14:18,519 --> 00:14:26,019
comparisons now in this case this is<font color="#CCCCCC"> a</font>

355
00:14:22,539 --> 00:14:29,109
function that<font color="#CCCCCC"> is</font><font color="#E5E5E5"> going to take binary</font>

356
00:14:26,019 --> 00:14:30,910
coded decimal and convert it to<font color="#E5E5E5"> ask now</font>

357
00:14:29,109 --> 00:14:32,739
if you google<font color="#CCCCCC"> how to do this</font><font color="#E5E5E5"> you know</font>

358
00:14:30,910 --> 00:14:34,569
between<font color="#CCCCCC"> Stack Overflow Stack Exchange</font>

359
00:14:32,739 --> 00:14:38,139
<font color="#E5E5E5">you can find a bunch of different</font><font color="#CCCCCC"> ways</font>

360
00:14:34,569 --> 00:14:39,669
<font color="#E5E5E5">to</font><font color="#CCCCCC"> perform this task so let's say you</font>

361
00:14:38,139 --> 00:14:41,439
know you were looking<font color="#CCCCCC"> at this in a</font>

362
00:14:39,669 --> 00:14:43,989
malware sample and you thought<font color="#E5E5E5"> that</font><font color="#CCCCCC"> this</font>

363
00:14:41,439 --> 00:14:47,069
was a pretty unique implementation one

364
00:14:43,989 --> 00:14:49,569
that you<font color="#E5E5E5"> wanted to build a signature for</font>

365
00:14:47,069 --> 00:14:52,118
within the<font color="#E5E5E5"> r2 session</font>

366
00:14:49,569 --> 00:14:56,799
so first the command you'll run will be

367
00:14:52,119 --> 00:14:58,839
<font color="#E5E5E5">Z AF so signatures add a function and</font>

368
00:14:56,799 --> 00:15:00,279
I'll add the function name and the name

369
00:14:58,839 --> 00:15:02,439
of<font color="#CCCCCC"> the signature that</font><font color="#E5E5E5"> I want to create</font>

370
00:15:00,279 --> 00:15:04,209
and then after you create<font color="#E5E5E5"> that if you</font>

371
00:15:02,439 --> 00:15:06,998
want to view it<font color="#CCCCCC"> you can just use the Zed</font>

372
00:15:04,209 --> 00:15:08,529
command<font color="#CCCCCC"> in this case you can see the</font>

373
00:15:06,999 --> 00:15:12,039
different components<font color="#CCCCCC"> that are included</font>

374
00:15:08,529 --> 00:15:14,829
<font color="#E5E5E5">in each signature so I have the bytes</font>

375
00:15:12,039 --> 00:15:17,039
<font color="#E5E5E5">and again you can see bytes and you can</font>

376
00:15:14,829 --> 00:15:19,779
see<font color="#CCCCCC"> places where the bytes are masked</font>

377
00:15:17,039 --> 00:15:22,660
<font color="#E5E5E5">graph data and then offset information</font>

378
00:15:19,779 --> 00:15:24,879
so for the purposes of<font color="#CCCCCC"> what I'm doing</font>

379
00:15:22,660 --> 00:15:26,270
matching wise<font color="#CCCCCC"> I really only want to</font><font color="#E5E5E5"> pay</font>

380
00:15:24,879 --> 00:15:28,190
<font color="#CCCCCC">attention</font><font color="#E5E5E5"> to</font>

381
00:15:26,270 --> 00:15:30,470
the<font color="#CCCCCC"> bikes component and so in</font><font color="#E5E5E5"> this case</font>

382
00:15:28,190 --> 00:15:32,870
again<font color="#CCCCCC"> our two signatures capability goes</font>

383
00:15:30,470 --> 00:15:35,480
ahead and handles<font color="#E5E5E5"> that masking for us so</font>

384
00:15:32,870 --> 00:15:37,850
for relative memory offsets<font color="#E5E5E5"> for</font><font color="#CCCCCC"> bytes</font>

385
00:15:35,480 --> 00:15:41,000
<font color="#E5E5E5">that may change those bytes get masked</font>

386
00:15:37,850 --> 00:15:42,770
out<font color="#CCCCCC"> the bytes that remain or the opcodes</font>

387
00:15:41,000 --> 00:15:45,440
that are representative<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

388
00:15:42,770 --> 00:15:49,550
instructions relevant constants<font color="#E5E5E5"> and that</font>

389
00:15:45,440 --> 00:15:52,100
kind of stuff<font color="#CCCCCC"> so whenever I started</font>

390
00:15:49,550 --> 00:15:55,250
<font color="#E5E5E5">exploring this</font><font color="#CCCCCC"> I thought okay if I</font><font color="#E5E5E5"> just</font>

391
00:15:52,100 --> 00:15:56,750
build the signatures for all the

392
00:15:55,250 --> 00:15:58,340
different versions<font color="#E5E5E5"> of you know the</font>

393
00:15:56,750 --> 00:15:59,990
library<font color="#CCCCCC"> code that I</font><font color="#E5E5E5"> want to write six</font>

394
00:15:58,340 --> 00:16:02,240
<font color="#E5E5E5">for that should be fine</font>

395
00:15:59,990 --> 00:16:05,420
you know the capability is built<font color="#E5E5E5"> and so</font>

396
00:16:02,240 --> 00:16:06,920
<font color="#E5E5E5">whenever I started</font><font color="#CCCCCC"> I built</font><font color="#E5E5E5"> signatures</font>

397
00:16:05,420 --> 00:16:09,650
for<font color="#E5E5E5"> a couple of different versions of</font>

398
00:16:06,920 --> 00:16:11,780
the C runs<font color="#E5E5E5"> on and whenever I was you</font>

399
00:16:09,650 --> 00:16:14,510
know working against a target<font color="#CCCCCC"> file</font><font color="#E5E5E5"> in an</font>

400
00:16:11,780 --> 00:16:15,770
r2 session<font color="#CCCCCC"> you</font><font color="#E5E5E5"> know I would just pick up</font>

401
00:16:14,510 --> 00:16:18,350
the<font color="#CCCCCC"> write signature so I thought I</font>

402
00:16:15,770 --> 00:16:21,410
needed run that and matching worked

403
00:16:18,350 --> 00:16:24,500
pretty well so the process time was fine

404
00:16:21,410 --> 00:16:26,089
the output wasn't too big and the time

405
00:16:24,500 --> 00:16:28,160
that<font color="#CCCCCC"> I spent matching was pretty</font>

406
00:16:26,090 --> 00:16:30,490
acceptable<font color="#E5E5E5"> I mean it wasn't you know</font>

407
00:16:28,160 --> 00:16:33,050
anything innocent but<font color="#E5E5E5"> it was it was fine</font>

408
00:16:30,490 --> 00:16:36,740
<font color="#E5E5E5">now once I started trying to expand that</font>

409
00:16:33,050 --> 00:16:38,689
into<font color="#E5E5E5"> more versions of the C runtime or</font>

410
00:16:36,740 --> 00:16:40,310
once I started adding like<font color="#CCCCCC"> Microsoft's</font>

411
00:16:38,690 --> 00:16:45,320
foundational classes which is<font color="#CCCCCC"> a really</font>

412
00:16:40,310 --> 00:16:47,599
<font color="#E5E5E5">large library performance started to get</font>

413
00:16:45,320 --> 00:16:49,610
a little<font color="#E5E5E5"> bit it wasn't what I was</font>

414
00:16:47,600 --> 00:16:51,410
<font color="#CCCCCC">looking for let's put it that way in</font>

415
00:16:49,610 --> 00:16:53,180
this case you know just<font color="#E5E5E5"> processing or</font>

416
00:16:51,410 --> 00:16:55,339
building the signatures for the<font color="#E5E5E5"> large</font>

417
00:16:53,180 --> 00:16:57,170
libraries I was taking a while the

418
00:16:55,340 --> 00:16:59,300
output<font color="#CCCCCC"> was massive</font><font color="#E5E5E5"> and whenever I</font>

419
00:16:57,170 --> 00:17:01,520
started trying<font color="#E5E5E5"> to match this library</font>

420
00:16:59,300 --> 00:17:03,199
code against the target<font color="#CCCCCC"> even the</font>

421
00:17:01,520 --> 00:17:05,569
matching performance was taking<font color="#E5E5E5"> longer</font>

422
00:17:03,200 --> 00:17:08,720
than<font color="#E5E5E5"> I was willing</font><font color="#CCCCCC"> to wait</font><font color="#E5E5E5"> so I needed</font>

423
00:17:05,569 --> 00:17:11,089
<font color="#E5E5E5">you know a shorter way something to</font>

424
00:17:08,720 --> 00:17:14,540
increase<font color="#E5E5E5"> the performance here I'm not an</font>

425
00:17:11,089 --> 00:17:16,458
r2 core developer maybe one day but you

426
00:17:14,540 --> 00:17:17,690
<font color="#CCCCCC">know</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> been exploring the pipe and so I</font>

427
00:17:16,459 --> 00:17:21,260
thought there<font color="#E5E5E5"> was</font><font color="#CCCCCC"> something I could do</font>

428
00:17:17,690 --> 00:17:24,410
still with<font color="#CCCCCC"> that</font><font color="#E5E5E5"> so what I decided on was</font>

429
00:17:21,260 --> 00:17:26,300
taking that signatures<font color="#E5E5E5"> output the bytes</font>

430
00:17:24,410 --> 00:17:30,530
that<font color="#CCCCCC"> we saw here because it</font><font color="#E5E5E5"> is just a</font>

431
00:17:26,300 --> 00:17:33,680
string hashing it<font color="#CCCCCC"> once I hash it if I</font>

432
00:17:30,530 --> 00:17:35,930
handle the matching outside<font color="#E5E5E5"> of our</font><font color="#CCCCCC"> to</font>

433
00:17:33,680 --> 00:17:37,670
native code<font color="#CCCCCC"> it just</font><font color="#E5E5E5"> becomes a set lookup</font>

434
00:17:35,930 --> 00:17:40,179
in Python<font color="#E5E5E5"> which is a really quick</font>

435
00:17:37,670 --> 00:17:42,879
operation so

436
00:17:40,179 --> 00:17:44,529
<font color="#CCCCCC">I put the</font><font color="#E5E5E5"> code together and started that</font>

437
00:17:42,879 --> 00:17:46,719
approach so I took all of the

438
00:17:44,529 --> 00:17:49,690
redistributable libraries<font color="#E5E5E5"> from Visual</font>

439
00:17:46,720 --> 00:17:52,629
<font color="#E5E5E5">Studio</font><font color="#CCCCCC"> that I had at the time so I</font><font color="#E5E5E5"> went</font>

440
00:17:49,690 --> 00:17:54,879
from<font color="#CCCCCC"> version 6 to 14</font><font color="#E5E5E5"> and ran the code</font>

441
00:17:52,629 --> 00:17:56,918
over that and generated signatures<font color="#CCCCCC"> and I</font>

442
00:17:54,879 --> 00:17:59,230
would start at the oldest library<font color="#CCCCCC"> and</font>

443
00:17:56,919 --> 00:18:00,820
move up to<font color="#CCCCCC"> the newest one and then</font>

444
00:17:59,230 --> 00:18:03,519
against target files<font color="#E5E5E5"> I would start to</font>

445
00:18:00,820 --> 00:18:05,259
use<font color="#CCCCCC"> that and the processing time took</font>

446
00:18:03,519 --> 00:18:08,350
about an hour so you<font color="#E5E5E5"> know definitely</font>

447
00:18:05,259 --> 00:18:11,980
still an upfront cost<font color="#E5E5E5"> however</font><font color="#CCCCCC"> the output</font>

448
00:18:08,350 --> 00:18:13,449
<font color="#E5E5E5">was much smaller and matching in a</font>

449
00:18:11,980 --> 00:18:17,049
session against a target<font color="#E5E5E5"> file was</font>

450
00:18:13,450 --> 00:18:18,070
<font color="#CCCCCC">near-instant which was great</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> to</font>

451
00:18:17,049 --> 00:18:20,320
keep<font color="#CCCCCC"> going and</font><font color="#E5E5E5"> get</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> little bit</font>

452
00:18:18,070 --> 00:18:22,960
adventurous<font color="#CCCCCC"> I tried to expand that</font>

453
00:18:20,320 --> 00:18:26,259
approach so I took<font color="#E5E5E5"> the entire</font><font color="#CCCCCC"> system32</font>

454
00:18:22,960 --> 00:18:28,119
directory of a clean XP install grabbed

455
00:18:26,259 --> 00:18:29,830
all<font color="#E5E5E5"> the library code out of that which</font>

456
00:18:28,119 --> 00:18:32,139
was I<font color="#CCCCCC"> think it's</font><font color="#E5E5E5"> over a</font><font color="#CCCCCC"> hundred</font>

457
00:18:29,830 --> 00:18:34,689
different libraries<font color="#E5E5E5"> we're in the</font>

458
00:18:32,139 --> 00:18:35,979
processing which again<font color="#E5E5E5"> two hours</font><font color="#CCCCCC"> so</font>

459
00:18:34,690 --> 00:18:38,289
there's definitely<font color="#E5E5E5"> that upfront cost</font>

460
00:18:35,980 --> 00:18:41,559
<font color="#E5E5E5">however when I started even trying to</font>

461
00:18:38,289 --> 00:18:43,210
match on<font color="#E5E5E5"> those signatures the matching</font>

462
00:18:41,559 --> 00:18:45,249
was still near instant<font color="#E5E5E5"> and the size of</font>

463
00:18:43,210 --> 00:18:46,960
the output<font color="#E5E5E5"> was still pretty acceptable</font>

464
00:18:45,249 --> 00:18:48,789
<font color="#E5E5E5">so I was happy with</font><font color="#CCCCCC"> the performance</font>

465
00:18:46,960 --> 00:18:52,539
overall anything<font color="#CCCCCC"> dope working pretty</font>

466
00:18:48,789 --> 00:18:55,450
well<font color="#CCCCCC"> so taking a look at at what this</font>

467
00:18:52,539 --> 00:18:57,399
<font color="#E5E5E5">looks</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> in the pipe here</font><font color="#CCCCCC"> if you</font>

468
00:18:55,450 --> 00:18:59,110
<font color="#E5E5E5">remember I</font><font color="#CCCCCC"> said for every</font><font color="#E5E5E5"> signature type</font>

469
00:18:57,399 --> 00:19:02,229
<font color="#E5E5E5">that I wanted to build all I needed</font><font color="#CCCCCC"> to</font>

470
00:18:59,110 --> 00:19:04,508
<font color="#CCCCCC">do was build a subclass of</font><font color="#E5E5E5"> the generator</font>

471
00:19:02,230 --> 00:19:06,990
class that I put in and so<font color="#E5E5E5"> in this case</font>

472
00:19:04,509 --> 00:19:09,179
<font color="#E5E5E5">I'll start at the first pipe command</font>

473
00:19:06,990 --> 00:19:11,139
<font color="#E5E5E5">remember in the first talk they</font>

474
00:19:09,179 --> 00:19:14,230
<font color="#CCCCCC">described the difference</font><font color="#E5E5E5"> between using</font>

475
00:19:11,139 --> 00:19:16,600
command and command<font color="#E5E5E5"> J so everything I'm</font>

476
00:19:14,230 --> 00:19:19,419
<font color="#CCCCCC">doing here</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> working with JSON so I'll</font>

477
00:19:16,600 --> 00:19:23,889
use the command J command<font color="#E5E5E5"> for the pipe</font>

478
00:19:19,419 --> 00:19:26,289
<font color="#E5E5E5">and so first the AFL J command</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> an</font>

479
00:19:23,889 --> 00:19:27,969
analysis command for the functions<font color="#CCCCCC"> I'm</font>

480
00:19:26,289 --> 00:19:31,360
getting a list<font color="#E5E5E5"> and returning them in</font>

481
00:19:27,970 --> 00:19:33,399
<font color="#E5E5E5">JSON so an easy way</font><font color="#CCCCCC"> to get the full list</font>

482
00:19:31,360 --> 00:19:36,908
<font color="#CCCCCC">of</font><font color="#E5E5E5"> all to recognize functions from</font>

483
00:19:33,399 --> 00:19:38,369
<font color="#CCCCCC">within a binary after that</font><font color="#E5E5E5"> jump up here</font>

484
00:19:36,909 --> 00:19:40,899
so<font color="#E5E5E5"> I'll iterate through</font><font color="#CCCCCC"> the functions</font>

485
00:19:38,369 --> 00:19:42,369
<font color="#E5E5E5">and I'll issue that first command that</font>

486
00:19:40,899 --> 00:19:45,149
we<font color="#E5E5E5"> saw in the last slide</font><font color="#CCCCCC"> so I'll go</font>

487
00:19:42,369 --> 00:19:49,299
<font color="#CCCCCC">ahead and signature add function and</font>

488
00:19:45,149 --> 00:19:51,399
<font color="#CCCCCC">then after that remember just said would</font>

489
00:19:49,299 --> 00:19:53,440
view the function so<font color="#CCCCCC"> that</font><font color="#E5E5E5"> J</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> going to</font>

490
00:19:51,399 --> 00:19:56,529
get me the signature back

491
00:19:53,440 --> 00:19:58,269
JSON format after that I'll grab the

492
00:19:56,529 --> 00:20:00,909
bytes<font color="#E5E5E5"> and then again I'm</font><font color="#CCCCCC"> just hashing</font>

493
00:19:58,269 --> 00:20:02,860
them<font color="#CCCCCC"> and then if</font><font color="#E5E5E5"> that hash isn't</font>

494
00:20:00,909 --> 00:20:06,340
something<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I've already</font><font color="#E5E5E5"> seen</font><font color="#CCCCCC"> I'll</font>

495
00:20:02,860 --> 00:20:07,840
add it into<font color="#E5E5E5"> a dictionary</font><font color="#CCCCCC"> I clear out</font><font color="#E5E5E5"> the</font>

496
00:20:06,340 --> 00:20:09,250
signatures<font color="#E5E5E5"> out for that that way I make</font>

497
00:20:07,840 --> 00:20:11,139
sure<font color="#CCCCCC"> that I'm only</font><font color="#E5E5E5"> dealing with</font><font color="#CCCCCC"> one of</font>

498
00:20:09,250 --> 00:20:14,230
the time and then once the whole process

499
00:20:11,139 --> 00:20:16,870
<font color="#E5E5E5">is done</font><font color="#CCCCCC"> I'll return hashes so you know</font>

500
00:20:14,230 --> 00:20:19,389
using<font color="#CCCCCC"> our to pipe this whole process of</font>

501
00:20:16,870 --> 00:20:21,340
iterating through and creating

502
00:20:19,389 --> 00:20:28,299
<font color="#E5E5E5">everything I need has been incredibly</font>

503
00:20:21,340 --> 00:20:30,459
easy<font color="#CCCCCC"> really enjoying the r-25 API</font><font color="#E5E5E5"> moving</font>

504
00:20:28,299 --> 00:20:33,700
<font color="#E5E5E5">into some of the more experimental types</font>

505
00:20:30,460 --> 00:20:35,500
so we<font color="#CCCCCC"> now think</font><font color="#E5E5E5"> about string</font><font color="#CCCCCC"> set hashes</font>

506
00:20:33,700 --> 00:20:37,090
sometimes a malware sample will come

507
00:20:35,500 --> 00:20:39,279
<font color="#E5E5E5">across my desk and just by</font><font color="#CCCCCC"> looking</font><font color="#E5E5E5"> at</font>

508
00:20:37,090 --> 00:20:42,490
the strings<font color="#E5E5E5"> it's really obvious that</font>

509
00:20:39,279 --> 00:20:44,440
<font color="#E5E5E5">there is you</font><font color="#CCCCCC"> know additional</font><font color="#E5E5E5"> library</font>

510
00:20:42,490 --> 00:20:46,269
code the statically linked and so this

511
00:20:44,440 --> 00:20:49,000
was from an our sample I<font color="#E5E5E5"> was looking at</font>

512
00:20:46,269 --> 00:20:51,070
last year<font color="#CCCCCC"> now in some cases</font><font color="#E5E5E5"> the malware</font>

513
00:20:49,000 --> 00:20:52,809
developer is nice<font color="#CCCCCC"> its internal name for</font>

514
00:20:51,070 --> 00:20:56,620
the<font color="#E5E5E5"> DLL kind of gave</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> away</font>

515
00:20:52,809 --> 00:20:59,168
sequel<font color="#CCCCCC"> 83 you can see all the references</font>

516
00:20:56,620 --> 00:21:01,439
<font color="#CCCCCC">to sequel</font><font color="#E5E5E5"> lights and then other strings</font>

517
00:20:59,169 --> 00:21:04,419
that<font color="#CCCCCC"> are referencing database operations</font>

518
00:21:01,440 --> 00:21:06,460
now in this<font color="#E5E5E5"> case you know there are tons</font>

519
00:21:04,419 --> 00:21:09,750
<font color="#E5E5E5">of different ways that sequel light can</font>

520
00:21:06,460 --> 00:21:11,950
be added statically and so using

521
00:21:09,750 --> 00:21:14,289
<font color="#CCCCCC">signature like a byte based approach</font>

522
00:21:11,950 --> 00:21:15,879
wasn't<font color="#E5E5E5"> going to work</font><font color="#CCCCCC"> for this</font><font color="#E5E5E5"> however</font>

523
00:21:14,289 --> 00:21:17,740
<font color="#CCCCCC">you know once</font><font color="#E5E5E5"> you start</font><font color="#CCCCCC"> looking through</font>

524
00:21:15,879 --> 00:21:19,029
the functions just<font color="#E5E5E5"> based on the</font>

525
00:21:17,740 --> 00:21:20,590
reference strings you<font color="#CCCCCC"> can start to</font>

526
00:21:19,029 --> 00:21:22,629
identify<font color="#E5E5E5"> the functions that are library</font>

527
00:21:20,590 --> 00:21:27,158
code and so what I wanted<font color="#E5E5E5"> to do is kind</font>

528
00:21:22,629 --> 00:21:28,600
<font color="#CCCCCC">of exploit that fact you know just again</font>

529
00:21:27,159 --> 00:21:31,750
more detail what I'm talking about

530
00:21:28,600 --> 00:21:34,209
if you run<font color="#E5E5E5"> command so this is I'm</font>

531
00:21:31,750 --> 00:21:37,179
<font color="#E5E5E5">printing the disassembly summary for a</font>

532
00:21:34,210 --> 00:21:38,860
function the<font color="#CCCCCC"> PD SF command</font><font color="#E5E5E5"> and so you</font>

533
00:21:37,179 --> 00:21:40,299
can see<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of a condensed version of</font>

534
00:21:38,860 --> 00:21:42,610
the<font color="#CCCCCC"> function</font><font color="#E5E5E5"> here so</font><font color="#CCCCCC"> this will ignore</font>

535
00:21:40,299 --> 00:21:44,470
<font color="#E5E5E5">you</font><font color="#CCCCCC"> know a bunch of the disassembly and</font>

536
00:21:42,610 --> 00:21:46,269
just show<font color="#E5E5E5"> you kind of the call pattern</font>

537
00:21:44,470 --> 00:21:48,490
<font color="#E5E5E5">and the strings that are referenced</font><font color="#CCCCCC"> and</font>

538
00:21:46,269 --> 00:21:50,620
so it's these combination of strings

539
00:21:48,490 --> 00:21:54,070
<font color="#E5E5E5">that I'm</font><font color="#CCCCCC"> talking about joining together</font>

540
00:21:50,620 --> 00:21:55,750
and then hashing if this<font color="#E5E5E5"> approach were</font>

541
00:21:54,070 --> 00:21:57,668
<font color="#E5E5E5">standalone you know the hashing part is</font>

542
00:21:55,750 --> 00:21:59,799
a little<font color="#CCCCCC"> over the top but it's because I</font>

543
00:21:57,669 --> 00:22:01,869
can do everything<font color="#E5E5E5"> in a uniform format</font>

544
00:21:59,799 --> 00:22:04,389
<font color="#E5E5E5">that I just go ahead and use the exact</font>

545
00:22:01,869 --> 00:22:07,439
<font color="#E5E5E5">same generation pattern that I did for</font>

546
00:22:04,389 --> 00:22:11,020
the signature hashes

547
00:22:07,440 --> 00:22:13,660
and so again<font color="#E5E5E5"> a separate generator</font>

548
00:22:11,020 --> 00:22:16,180
<font color="#CCCCCC">subclass whenever we</font><font color="#E5E5E5"> look in the method</font>

549
00:22:13,660 --> 00:22:18,370
<font color="#E5E5E5">instead</font><font color="#CCCCCC"> of getting a list</font><font color="#E5E5E5"> of all the</font>

550
00:22:16,180 --> 00:22:21,060
<font color="#CCCCCC">functions this time I start with the</font>

551
00:22:18,370 --> 00:22:24,189
list of<font color="#E5E5E5"> all</font><font color="#CCCCCC"> the strings so I is for info</font>

552
00:22:21,060 --> 00:22:25,600
<font color="#CCCCCC">Zed Zed will get you all the strings a</font>

553
00:22:24,190 --> 00:22:28,570
single<font color="#E5E5E5"> Zed is going to get you the</font>

554
00:22:25,600 --> 00:22:30,550
strings and kind of<font color="#CCCCCC"> the data section</font><font color="#E5E5E5"> Zed</font>

555
00:22:28,570 --> 00:22:33,250
Zed<font color="#E5E5E5"> is all of them and then J I'm</font>

556
00:22:30,550 --> 00:22:35,740
getting<font color="#E5E5E5"> those back in JSON</font><font color="#CCCCCC"> I'll go ahead</font>

557
00:22:33,250 --> 00:22:38,320
and jump through<font color="#CCCCCC"> and iterate through</font>

558
00:22:35,740 --> 00:22:41,710
<font color="#CCCCCC">each string if</font><font color="#E5E5E5"> it's type that I'm</font>

559
00:22:38,320 --> 00:22:43,270
<font color="#E5E5E5">considering ax TJ I will it's an</font>

560
00:22:41,710 --> 00:22:46,330
analysis<font color="#E5E5E5"> command I'm getting the cross</font>

561
00:22:43,270 --> 00:22:47,770
references to<font color="#CCCCCC"> that string</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> then I</font>

562
00:22:46,330 --> 00:22:49,899
loop through<font color="#CCCCCC"> them and</font><font color="#E5E5E5"> if the cross</font>

563
00:22:47,770 --> 00:22:53,200
<font color="#E5E5E5">reference is from a function I'll add</font>

564
00:22:49,900 --> 00:22:55,030
<font color="#E5E5E5">that into into</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> dictionary</font>

565
00:22:53,200 --> 00:22:59,260
after that I'll loop through that

566
00:22:55,030 --> 00:23:00,850
dictionary<font color="#CCCCCC"> go ahead and hash the strings</font>

567
00:22:59,260 --> 00:23:03,460
once I join<font color="#CCCCCC"> them together</font><font color="#E5E5E5"> and then</font>

568
00:23:00,850 --> 00:23:05,770
<font color="#CCCCCC">return</font><font color="#E5E5E5"> those hashes</font><font color="#CCCCCC"> so you know again</font>

569
00:23:03,460 --> 00:23:07,780
<font color="#E5E5E5">this is a pretty experimental method but</font>

570
00:23:05,770 --> 00:23:09,430
as I started thinking<font color="#E5E5E5"> about the way that</font>

571
00:23:07,780 --> 00:23:11,649
<font color="#E5E5E5">I was identifying sequel like code</font>

572
00:23:09,430 --> 00:23:14,310
anyways<font color="#CCCCCC"> you know I thought the method</font>

573
00:23:11,650 --> 00:23:16,930
made sense and it's worked pretty<font color="#E5E5E5"> well</font>

574
00:23:14,310 --> 00:23:18,970
<font color="#E5E5E5">the last method that I was hoping to</font>

575
00:23:16,930 --> 00:23:20,320
<font color="#E5E5E5">have finished before</font><font color="#CCCCCC"> this talk</font><font color="#E5E5E5"> but</font>

576
00:23:18,970 --> 00:23:21,790
<font color="#E5E5E5">unfortunately life got in the way so</font>

577
00:23:20,320 --> 00:23:23,710
we'll pop this in<font color="#CCCCCC"> the future work</font>

578
00:23:21,790 --> 00:23:26,530
session that I can start on<font color="#E5E5E5"> as soon as I</font>

579
00:23:23,710 --> 00:23:29,320
get<font color="#E5E5E5"> back home</font><font color="#CCCCCC"> is looking at call chain</font>

580
00:23:26,530 --> 00:23:31,990
hashes so<font color="#CCCCCC"> again an experimental method</font>

581
00:23:29,320 --> 00:23:35,230
that it's pretty<font color="#E5E5E5"> similar to string sets</font>

582
00:23:31,990 --> 00:23:38,170
and in this<font color="#E5E5E5"> case you know if we look at</font>

583
00:23:35,230 --> 00:23:41,380
again<font color="#CCCCCC"> pds</font><font color="#E5E5E5"> F so I'm printing the</font>

584
00:23:38,170 --> 00:23:43,270
disassembly summary for the function<font color="#E5E5E5"> and</font>

585
00:23:41,380 --> 00:23:45,070
if you<font color="#E5E5E5"> take a look at this you know</font><font color="#CCCCCC"> you</font>

586
00:23:43,270 --> 00:23:47,980
<font color="#E5E5E5">can see if you look at the calls for</font>

587
00:23:45,070 --> 00:23:50,320
that function<font color="#E5E5E5"> it's not calling</font><font color="#CCCCCC"> you know</font>

588
00:23:47,980 --> 00:23:51,910
anything that's<font color="#E5E5E5"> statically linked it's</font>

589
00:23:50,320 --> 00:23:53,889
not calling any other developer

590
00:23:51,910 --> 00:23:56,620
functions<font color="#E5E5E5"> it's just calling three</font>

591
00:23:53,890 --> 00:23:58,900
functions<font color="#E5E5E5"> that are imports that</font><font color="#CCCCCC"> are used</font>

592
00:23:56,620 --> 00:24:01,810
to interact or query the Windows

593
00:23:58,900 --> 00:24:03,430
<font color="#E5E5E5">registry so in this case you know</font>

594
00:24:01,810 --> 00:24:05,080
without spending time walking<font color="#E5E5E5"> through</font>

595
00:24:03,430 --> 00:24:07,690
<font color="#E5E5E5">each different instruction you kind of</font>

596
00:24:05,080 --> 00:24:09,600
know what<font color="#CCCCCC"> the function is doing the</font>

597
00:24:07,690 --> 00:24:12,130
<font color="#E5E5E5">bottom screenshot I have here are some</font>

598
00:24:09,600 --> 00:24:13,810
<font color="#CCCCCC">of the</font><font color="#E5E5E5"> more commonly known what I call</font>

599
00:24:12,130 --> 00:24:16,090
gadgets that you<font color="#CCCCCC"> can look for in a</font>

600
00:24:13,810 --> 00:24:18,280
function so numerating processes

601
00:24:16,090 --> 00:24:19,959
searching files<font color="#E5E5E5"> each of these things has</font>

602
00:24:18,280 --> 00:24:22,750
<font color="#E5E5E5">a set</font>

603
00:24:19,960 --> 00:24:25,000
of win32<font color="#CCCCCC"> api calls</font><font color="#E5E5E5"> that you expect</font><font color="#CCCCCC"> to</font>

604
00:24:22,750 --> 00:24:27,580
see<font color="#E5E5E5"> together now these are some of the</font>

605
00:24:25,000 --> 00:24:29,890
<font color="#E5E5E5">easy ones</font><font color="#CCCCCC"> working on</font><font color="#E5E5E5"> code right now</font>

606
00:24:27,580 --> 00:24:33,010
<font color="#E5E5E5">that's kind of my start for this which</font>

607
00:24:29,890 --> 00:24:34,900
is<font color="#E5E5E5"> designed</font><font color="#CCCCCC"> to loop through you know</font>

608
00:24:33,010 --> 00:24:36,879
larger directories of files<font color="#E5E5E5"> and kind of</font>

609
00:24:34,900 --> 00:24:39,640
aggregates<font color="#E5E5E5"> different function call</font>

610
00:24:36,880 --> 00:24:42,220
chains<font color="#CCCCCC"> to find either</font><font color="#E5E5E5"> edge cases or</font>

611
00:24:39,640 --> 00:24:44,470
other useful gadgets that<font color="#E5E5E5"> maybe weren't</font>

612
00:24:42,220 --> 00:24:46,720
coming to my mind<font color="#E5E5E5"> so I can get all those</font>

613
00:24:44,470 --> 00:24:51,760
<font color="#CCCCCC">things together before I keep</font><font color="#E5E5E5"> working</font><font color="#CCCCCC"> to</font>

614
00:24:46,720 --> 00:24:53,770
<font color="#E5E5E5">build the generator now to move on and</font>

615
00:24:51,760 --> 00:24:56,020
see just<font color="#E5E5E5"> a little bit about how</font><font color="#CCCCCC"> some of</font>

616
00:24:53,770 --> 00:24:57,730
these have<font color="#CCCCCC"> been applied yeah I thought</font>

617
00:24:56,020 --> 00:24:59,500
about<font color="#E5E5E5"> applying these earlier this year</font>

618
00:24:57,730 --> 00:25:00,810
at the citizen lab we're working on a

619
00:24:59,500 --> 00:25:04,050
case

620
00:25:00,810 --> 00:25:06,220
again<font color="#E5E5E5"> campaign that we tracked that</font><font color="#CCCCCC"> was</font>

621
00:25:04,050 --> 00:25:09,220
targeting<font color="#CCCCCC"> a bunch of different groups</font>

622
00:25:06,220 --> 00:25:11,650
<font color="#E5E5E5">within the Tibetan diaspora now most of</font>

623
00:25:09,220 --> 00:25:13,750
the tools that the actors behind<font color="#E5E5E5"> this</font>

624
00:25:11,650 --> 00:25:15,490
<font color="#E5E5E5">campaign we're</font><font color="#CCCCCC"> using you know we're</font>

625
00:25:13,750 --> 00:25:18,310
pretty simple a lot of them stemmed from

626
00:25:15,490 --> 00:25:20,200
openly available implementations<font color="#CCCCCC"> but</font>

627
00:25:18,310 --> 00:25:23,020
<font color="#CCCCCC">there were two versions of a really</font>

628
00:25:20,200 --> 00:25:24,760
basic powershell dropper<font color="#CCCCCC"> that gave me a</font>

629
00:25:23,020 --> 00:25:26,710
good<font color="#E5E5E5"> comparison point here because it</font>

630
00:25:24,760 --> 00:25:29,620
looked like<font color="#CCCCCC"> the</font><font color="#E5E5E5"> developer had compiled</font>

631
00:25:26,710 --> 00:25:32,620
them in two<font color="#E5E5E5"> different</font><font color="#CCCCCC"> versions are two</font>

632
00:25:29,620 --> 00:25:34,840
different in element environments<font color="#E5E5E5"> so if</font>

633
00:25:32,620 --> 00:25:37,840
we look<font color="#E5E5E5"> at the first dropper</font><font color="#CCCCCC"> this was</font>

634
00:25:34,840 --> 00:25:40,090
compiled on 15<font color="#CCCCCC"> january if you look at</font>

635
00:25:37,840 --> 00:25:41,820
the<font color="#CCCCCC"> pdb path i make the joke that</font><font color="#E5E5E5"> he was</font>

636
00:25:40,090 --> 00:25:44,500
at work<font color="#CCCCCC"> when he was</font><font color="#E5E5E5"> building this one</font>

637
00:25:41,820 --> 00:25:46,030
because the the second one<font color="#E5E5E5"> we'll see</font>

638
00:25:44,500 --> 00:25:47,350
here was on an older development

639
00:25:46,030 --> 00:25:49,420
environment so<font color="#CCCCCC"> that must</font><font color="#E5E5E5"> have been his</font>

640
00:25:47,350 --> 00:25:51,879
<font color="#E5E5E5">home environment</font><font color="#CCCCCC"> you know he was using</font>

641
00:25:49,420 --> 00:25:54,880
<font color="#CCCCCC">the new tools at work and if you look at</font>

642
00:25:51,880 --> 00:25:57,400
versions of the Microsoft<font color="#E5E5E5"> Visual C</font>

643
00:25:54,880 --> 00:26:02,140
runtime<font color="#CCCCCC"> that he's linked to you know</font>

644
00:25:57,400 --> 00:26:04,360
version 11 is Visual Studio 2012<font color="#E5E5E5"> if we</font>

645
00:26:02,140 --> 00:26:05,800
parse out the<font color="#E5E5E5"> PE header just to kind of</font>

646
00:26:04,360 --> 00:26:08,949
collaborate<font color="#E5E5E5"> that we can see that the</font>

647
00:26:05,800 --> 00:26:11,830
major linker again version 11<font color="#CCCCCC"> so pretty</font>

648
00:26:08,950 --> 00:26:15,220
consistent there once I loaded this<font color="#E5E5E5"> up</font>

649
00:26:11,830 --> 00:26:18,820
into<font color="#CCCCCC"> r2</font><font color="#E5E5E5"> and used the signatures that</font><font color="#CCCCCC"> I</font>

650
00:26:15,220 --> 00:26:21,520
<font color="#CCCCCC">had built you can see I'm already</font>

651
00:26:18,820 --> 00:26:24,310
matching a library<font color="#E5E5E5"> code down to the</font>

652
00:26:21,520 --> 00:26:25,420
<font color="#E5E5E5">right version you know which has been it</font>

653
00:26:24,310 --> 00:26:26,050
<font color="#E5E5E5">was actually a little bit</font><font color="#CCCCCC"> better</font><font color="#E5E5E5"> than I</font>

654
00:26:25,420 --> 00:26:28,930
expected

655
00:26:26,050 --> 00:26:30,310
so you know the signatures had worked

656
00:26:28,930 --> 00:26:32,500
<font color="#E5E5E5">when I went in and</font><font color="#CCCCCC"> started comparing</font>

657
00:26:30,310 --> 00:26:33,520
these it was definitely the output<font color="#CCCCCC"> that</font>

658
00:26:32,500 --> 00:26:38,080
I expected<font color="#CCCCCC"> it's down</font>

659
00:26:33,520 --> 00:26:40,450
<font color="#E5E5E5">to the right visual studio version fast</font>

660
00:26:38,080 --> 00:26:42,310
forward<font color="#E5E5E5"> two weeks</font><font color="#CCCCCC"> you know</font><font color="#E5E5E5"> again I said</font>

661
00:26:40,450 --> 00:26:44,950
<font color="#E5E5E5">we came across another version of</font>

662
00:26:42,310 --> 00:26:47,260
basically the<font color="#E5E5E5"> same sample</font><font color="#CCCCCC"> in this case</font>

663
00:26:44,950 --> 00:26:50,380
if you look<font color="#E5E5E5"> at the debug path a homeboy</font>

664
00:26:47,260 --> 00:26:52,690
jump back to<font color="#CCCCCC"> Visual Studio 2005</font><font color="#E5E5E5"> or at</font>

665
00:26:50,380 --> 00:26:54,100
least set that in the default and if you

666
00:26:52,690 --> 00:26:58,000
look at the libraries that he's linked

667
00:26:54,100 --> 00:27:01,330
to version<font color="#CCCCCC"> 8 corresponds to Visual</font>

668
00:26:58,000 --> 00:27:03,550
Studio 2005<font color="#CCCCCC"> in this case</font><font color="#E5E5E5"> again if we</font>

669
00:27:01,330 --> 00:27:07,600
parse out<font color="#CCCCCC"> the PE header</font><font color="#E5E5E5"> and take a look</font>

670
00:27:03,550 --> 00:27:10,389
the linker version is<font color="#E5E5E5"> still 8 so all all</font>

671
00:27:07,600 --> 00:27:13,030
checks out<font color="#CCCCCC"> and as I start matching</font><font color="#E5E5E5"> on</font>

672
00:27:10,390 --> 00:27:15,190
things<font color="#E5E5E5"> going</font><font color="#CCCCCC"> back to</font><font color="#E5E5E5"> in the older</font>

673
00:27:13,030 --> 00:27:18,220
versions of<font color="#E5E5E5"> Microsoft's foundational</font>

674
00:27:15,190 --> 00:27:20,740
classes so again between<font color="#CCCCCC"> two basically</font>

675
00:27:18,220 --> 00:27:23,440
<font color="#E5E5E5">similar versions of the same</font><font color="#CCCCCC"> codebase</font>

676
00:27:20,740 --> 00:27:26,980
I'm already<font color="#CCCCCC"> able to match out</font><font color="#E5E5E5"> library</font>

677
00:27:23,440 --> 00:27:30,730
functions<font color="#E5E5E5"> down to the right the right</font>

678
00:27:26,980 --> 00:27:36,750
versions of different<font color="#CCCCCC"> libraries oh</font><font color="#E5E5E5"> sweet</font>

679
00:27:30,730 --> 00:27:39,580
thank<font color="#E5E5E5"> you jumping ahead</font><font color="#CCCCCC"> to see the</font>

680
00:27:36,750 --> 00:27:41,530
string<font color="#E5E5E5"> set</font><font color="#CCCCCC"> signature</font><font color="#E5E5E5"> supplied this was</font>

681
00:27:39,580 --> 00:27:43,870
<font color="#E5E5E5">the case a friend of mine in Hong</font><font color="#CCCCCC"> Kong</font>

682
00:27:41,530 --> 00:27:45,700
<font color="#E5E5E5">last year afforded me this was a copy of</font>

683
00:27:43,870 --> 00:27:47,860
a spear<font color="#CCCCCC"> phishing message that was used</font>

684
00:27:45,700 --> 00:27:50,290
<font color="#CCCCCC">just before</font><font color="#E5E5E5"> the chief executive election</font>

685
00:27:47,860 --> 00:27:51,909
in Hong<font color="#CCCCCC"> Kong</font><font color="#E5E5E5"> last year that was</font>

686
00:27:50,290 --> 00:27:55,300
targeting<font color="#E5E5E5"> members</font><font color="#CCCCCC"> of the pro-democracy</font>

687
00:27:51,910 --> 00:27:56,890
movement in Hong<font color="#CCCCCC"> Kong</font><font color="#E5E5E5"> now had potential</font>

688
00:27:55,300 --> 00:27:59,290
<font color="#E5E5E5">victim click the link here</font><font color="#CCCCCC"> which</font><font color="#E5E5E5"> looks</font>

689
00:27:56,890 --> 00:28:00,250
like<font color="#E5E5E5"> it's a document this actually</font>

690
00:27:59,290 --> 00:28:02,350
walked through a pretty lengthy

691
00:28:00,250 --> 00:28:03,970
infection chain but the final payload

692
00:28:02,350 --> 00:28:05,649
was the one that<font color="#CCCCCC"> I</font><font color="#E5E5E5"> was talking</font><font color="#CCCCCC"> about</font>

693
00:28:03,970 --> 00:28:10,600
that<font color="#CCCCCC"> had a</font><font color="#E5E5E5"> bunch of sequel like code</font>

694
00:28:05,650 --> 00:28:12,280
that was compiled and so it was a much

695
00:28:10,600 --> 00:28:15,429
larger payload whenever I<font color="#E5E5E5"> loaded that up</font>

696
00:28:12,280 --> 00:28:18,010
<font color="#CCCCCC">and used the strengths that</font><font color="#E5E5E5"> hash as I</font>

697
00:28:15,430 --> 00:28:20,230
<font color="#E5E5E5">built you can see all of the sequel Lite</font>

698
00:28:18,010 --> 00:28:22,390
library<font color="#E5E5E5"> codes that I matched up again</font>

699
00:28:20,230 --> 00:28:24,370
down to<font color="#E5E5E5"> the version number so the way</font>

700
00:28:22,390 --> 00:28:25,930
<font color="#CCCCCC">that I'm doing this</font><font color="#E5E5E5"> is whenever I start</font>

701
00:28:24,370 --> 00:28:28,239
generating signatures I start from the

702
00:28:25,930 --> 00:28:30,390
oldest version<font color="#E5E5E5"> and move forward so if a</font>

703
00:28:28,240 --> 00:28:32,650
function hasn't changed across versions

704
00:28:30,390 --> 00:28:34,390
<font color="#CCCCCC">the signature you'll see would be</font><font color="#E5E5E5"> for</font>

705
00:28:32,650 --> 00:28:36,550
the oldest version<font color="#E5E5E5"> where that exists so</font>

706
00:28:34,390 --> 00:28:38,740
<font color="#CCCCCC">I was able</font><font color="#E5E5E5"> to match out a ton of</font>

707
00:28:36,550 --> 00:28:41,290
<font color="#E5E5E5">different functions that</font><font color="#CCCCCC"> we're gonna</font><font color="#E5E5E5"> end</font>

708
00:28:38,740 --> 00:28:43,000
up<font color="#E5E5E5"> being library code anyways</font><font color="#CCCCCC"> that no</font>

709
00:28:41,290 --> 00:28:45,490
other tool that<font color="#E5E5E5"> I had access</font><font color="#CCCCCC"> to was</font>

710
00:28:43,000 --> 00:28:47,200
<font color="#E5E5E5">going to be able to match now</font><font color="#CCCCCC"> I</font>

711
00:28:45,490 --> 00:28:47,410
highlighted some<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the function sizes</font>

712
00:28:47,200 --> 00:28:48,760
<font color="#E5E5E5">he</font>

713
00:28:47,410 --> 00:28:51,940
because you see some<font color="#E5E5E5"> of them are small</font>

714
00:28:48,760 --> 00:28:53,710
like<font color="#E5E5E5"> 42 bytes 52 bytes and these are</font>

715
00:28:51,940 --> 00:28:57,160
some<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the edge cases that I need to</font>

716
00:28:53,710 --> 00:28:58,540
<font color="#E5E5E5">consider these are you know smaller</font>

717
00:28:57,160 --> 00:29:00,100
<font color="#CCCCCC">functions that really only have one</font>

718
00:28:58,540 --> 00:29:03,100
<font color="#E5E5E5">string that they're cross-referencing</font>

719
00:29:00,100 --> 00:29:05,230
now in this case because<font color="#CCCCCC"> I'm working</font>

720
00:29:03,100 --> 00:29:06,730
against a<font color="#E5E5E5"> single sample with a single</font>

721
00:29:05,230 --> 00:29:09,070
set of library code

722
00:29:06,730 --> 00:29:11,980
I knew that my match is<font color="#E5E5E5"> okay but if I</font>

723
00:29:09,070 --> 00:29:15,040
try<font color="#CCCCCC"> to expand this programmatically you</font>

724
00:29:11,980 --> 00:29:17,350
know matching a library<font color="#E5E5E5"> code just based</font>

725
00:29:15,040 --> 00:29:18,760
<font color="#E5E5E5">on a</font><font color="#CCCCCC"> single string</font><font color="#E5E5E5"> isn't quite a sound</font>

726
00:29:17,350 --> 00:29:21,129
approach<font color="#CCCCCC"> so there's definitely</font><font color="#E5E5E5"> some</font>

727
00:29:18,760 --> 00:29:23,080
<font color="#E5E5E5">stuff that I need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> think</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> there</font>

728
00:29:21,130 --> 00:29:25,540
and<font color="#E5E5E5"> some edge</font><font color="#CCCCCC"> cases to explore</font><font color="#E5E5E5"> but</font>

729
00:29:23,080 --> 00:29:28,629
overall the approach<font color="#E5E5E5"> works quite well</font>

730
00:29:25,540 --> 00:29:30,460
and<font color="#E5E5E5"> I was able to</font><font color="#CCCCCC"> kind of ignore having</font>

731
00:29:28,630 --> 00:29:33,450
to really<font color="#E5E5E5"> look at this code in depth and</font>

732
00:29:30,460 --> 00:29:35,710
just recognize and see where it was used

733
00:29:33,450 --> 00:29:37,840
and again<font color="#E5E5E5"> just to</font><font color="#CCCCCC"> show the stuff that</font>

734
00:29:35,710 --> 00:29:39,190
<font color="#E5E5E5">I'm matching on this is one of the</font>

735
00:29:37,840 --> 00:29:41,560
functions that I<font color="#E5E5E5"> match so it was in the</font>

736
00:29:39,190 --> 00:29:43,780
malware payload<font color="#E5E5E5"> and then this is the</font>

737
00:29:41,560 --> 00:29:46,480
same<font color="#E5E5E5"> function summary from the sequel</font>

738
00:29:43,780 --> 00:29:49,149
<font color="#E5E5E5">like three library so again doing this</font>

739
00:29:46,480 --> 00:29:52,240
using<font color="#CCCCCC"> PDS F so print the disassembly</font>

740
00:29:49,150 --> 00:29:54,520
summary for the function<font color="#CCCCCC"> and you can see</font>

741
00:29:52,240 --> 00:29:56,080
the strings<font color="#CCCCCC"> that I'm talking about here</font>

742
00:29:54,520 --> 00:29:58,900
<font color="#CCCCCC">so it's</font><font color="#E5E5E5"> just combining those in</font><font color="#CCCCCC"> hashing</font>

743
00:29:56,080 --> 00:30:01,899
<font color="#CCCCCC">though it may be a better</font><font color="#E5E5E5"> approach</font><font color="#CCCCCC"> to</font>

744
00:29:58,900 --> 00:30:04,600
use kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> a mask or sanitized output</font>

745
00:30:01,900 --> 00:30:05,980
of the entire PDS output<font color="#E5E5E5"> that might be</font>

746
00:30:04,600 --> 00:30:08,230
<font color="#E5E5E5">something that I consider</font><font color="#CCCCCC"> as I</font><font color="#E5E5E5"> start</font>

747
00:30:05,980 --> 00:30:10,300
working<font color="#E5E5E5"> on the edge</font><font color="#CCCCCC"> cases but</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> now</font>

748
00:30:08,230 --> 00:30:12,760
<font color="#E5E5E5">you know with the small domain that I'm</font>

749
00:30:10,300 --> 00:30:17,020
working in just the string sets and it

750
00:30:12,760 --> 00:30:18,580
worked<font color="#E5E5E5"> pretty well so you know I'm</font>

751
00:30:17,020 --> 00:30:20,950
definitely<font color="#E5E5E5"> not</font><font color="#CCCCCC"> ready to stand</font><font color="#E5E5E5"> up here</font>

752
00:30:18,580 --> 00:30:22,840
<font color="#CCCCCC">and say you know the approach is perfect</font>

753
00:30:20,950 --> 00:30:25,720
<font color="#E5E5E5">you know built something that's better</font>

754
00:30:22,840 --> 00:30:28,240
than flirt<font color="#CCCCCC"> not even</font><font color="#E5E5E5"> close but I think</font>

755
00:30:25,720 --> 00:30:29,830
the approach is still pretty sound<font color="#CCCCCC"> and</font>

756
00:30:28,240 --> 00:30:31,960
it's one that's<font color="#CCCCCC"> open it's one that I'm</font>

757
00:30:29,830 --> 00:30:33,820
really<font color="#E5E5E5"> happy about and one that I'm</font>

758
00:30:31,960 --> 00:30:36,430
<font color="#E5E5E5">going to keep jamming on so some of the</font>

759
00:30:33,820 --> 00:30:39,189
<font color="#E5E5E5">future</font><font color="#CCCCCC"> work that</font><font color="#E5E5E5"> I have you know one is</font>

760
00:30:36,430 --> 00:30:41,110
kind of handling better names<font color="#E5E5E5"> for</font>

761
00:30:39,190 --> 00:30:42,940
library functions that aren't exported

762
00:30:41,110 --> 00:30:45,219
because whenever I'm loading these up to

763
00:30:42,940 --> 00:30:47,290
generate<font color="#E5E5E5"> the signatures right now I'm</font>

764
00:30:45,220 --> 00:30:50,200
not<font color="#E5E5E5"> handling like debug</font><font color="#CCCCCC"> information well</font>

765
00:30:47,290 --> 00:30:52,840
or anything<font color="#CCCCCC"> so for functions</font><font color="#E5E5E5"> that are</font>

766
00:30:50,200 --> 00:30:54,910
exported those get named<font color="#E5E5E5"> anything else</font>

767
00:30:52,840 --> 00:30:56,649
<font color="#E5E5E5">the signature is more of kind</font><font color="#CCCCCC"> of</font>

768
00:30:54,910 --> 00:30:58,429
treating<font color="#E5E5E5"> it like a tag the fact that</font>

769
00:30:56,650 --> 00:31:00,980
<font color="#E5E5E5">it's live</font>

770
00:30:58,429 --> 00:31:02,840
for the signature hashes because you

771
00:31:00,980 --> 00:31:05,029
know I<font color="#E5E5E5"> am really happy with that one</font>

772
00:31:02,840 --> 00:31:07,459
that's<font color="#E5E5E5"> not as experimental I'm looking</font>

773
00:31:05,029 --> 00:31:09,470
to expand<font color="#E5E5E5"> you know some of</font><font color="#CCCCCC"> the</font>

774
00:31:07,460 --> 00:31:11,090
signatures that<font color="#CCCCCC"> I have available so a</font>

775
00:31:09,470 --> 00:31:15,230
couple<font color="#E5E5E5"> of newer versions of Visual</font>

776
00:31:11,090 --> 00:31:17,809
<font color="#E5E5E5">Studio and</font><font color="#CCCCCC"> then moving into you know</font>

777
00:31:15,230 --> 00:31:19,970
<font color="#E5E5E5">also looking at debug versus release</font>

778
00:31:17,809 --> 00:31:22,360
mode<font color="#E5E5E5"> whenever the compiled</font><font color="#CCCCCC"> code just</font><font color="#E5E5E5"> to</font>

779
00:31:19,970 --> 00:31:24,559
see if there's something<font color="#E5E5E5"> I can do there</font>

780
00:31:22,360 --> 00:31:26,418
after that finishing up the call<font color="#E5E5E5"> chains</font>

781
00:31:24,559 --> 00:31:29,080
work<font color="#E5E5E5"> so you know before I build that</font>

782
00:31:26,419 --> 00:31:31,580
generator I want to spend some<font color="#CCCCCC"> time</font>

783
00:31:29,080 --> 00:31:33,168
<font color="#E5E5E5">analyzing different function level call</font>

784
00:31:31,580 --> 00:31:35,210
chains that<font color="#E5E5E5"> you see within malware</font>

785
00:31:33,169 --> 00:31:38,149
there's a lot of academic<font color="#CCCCCC"> work</font><font color="#E5E5E5"> in this</font>

786
00:31:35,210 --> 00:31:40,789
<font color="#CCCCCC">space but most of it is focused on using</font>

787
00:31:38,149 --> 00:31:43,340
all of the win32<font color="#E5E5E5"> API calls that you'll</font>

788
00:31:40,789 --> 00:31:46,429
see across<font color="#E5E5E5"> an entire binary to classify</font>

789
00:31:43,340 --> 00:31:47,928
it as far<font color="#CCCCCC"> as I'm aware and if you know</font>

790
00:31:46,429 --> 00:31:50,269
<font color="#E5E5E5">something else I'd love to talk about it</font>

791
00:31:47,929 --> 00:31:52,309
there's not<font color="#E5E5E5"> a lot of work done looking</font>

792
00:31:50,269 --> 00:31:55,179
<font color="#E5E5E5">at this at the function level</font><font color="#CCCCCC"> kind of in</font>

793
00:31:52,309 --> 00:31:57,110
aggregate so finishing<font color="#E5E5E5"> up some of</font><font color="#CCCCCC"> that</font>

794
00:31:55,179 --> 00:31:59,210
as I<font color="#E5E5E5"> mentioned</font><font color="#CCCCCC"> with the</font><font color="#E5E5E5"> smaller</font>

795
00:31:57,110 --> 00:32:01,189
functions<font color="#E5E5E5"> or with the call chains I need</font>

796
00:31:59,210 --> 00:32:03,559
to spend some<font color="#CCCCCC"> time</font><font color="#E5E5E5"> polishing off the</font>

797
00:32:01,190 --> 00:32:06,320
edge<font color="#E5E5E5"> cases and then I'd like to</font><font color="#CCCCCC"> move</font>

798
00:32:03,559 --> 00:32:07,820
this<font color="#E5E5E5"> and package it outside</font><font color="#CCCCCC"> of the</font>

799
00:32:06,320 --> 00:32:10,580
repository<font color="#CCCCCC"> that I have it in right</font><font color="#E5E5E5"> now</font>

800
00:32:07,820 --> 00:32:12,620
right now<font color="#E5E5E5"> the</font><font color="#CCCCCC"> SIG's</font><font color="#E5E5E5"> dot PI script is</font>

801
00:32:10,580 --> 00:32:14,840
coupled with another utility script that

802
00:32:12,620 --> 00:32:16,639
<font color="#E5E5E5">I have in there and things are</font><font color="#CCCCCC"> again</font>

803
00:32:14,840 --> 00:32:18,320
<font color="#E5E5E5">kind</font><font color="#CCCCCC"> of coupled together but I would</font>

804
00:32:16,639 --> 00:32:20,719
like to<font color="#E5E5E5"> split this off as a separate</font>

805
00:32:18,320 --> 00:32:23,840
<font color="#CCCCCC">project maybe</font><font color="#E5E5E5"> get a package within the</font>

806
00:32:20,720 --> 00:32:26,149
r2 package manager<font color="#E5E5E5"> and also write the</font>

807
00:32:23,840 --> 00:32:28,699
<font color="#E5E5E5">code to so that people who are using</font>

808
00:32:26,149 --> 00:32:31,908
<font color="#E5E5E5">either binary ninja hopper or other</font>

809
00:32:28,700 --> 00:32:33,559
disassemblers can get<font color="#E5E5E5"> a scripted output</font>

810
00:32:31,909 --> 00:32:35,480
for their disassembler<font color="#E5E5E5"> or choice and</font>

811
00:32:33,559 --> 00:32:41,260
load that<font color="#CCCCCC"> up</font><font color="#E5E5E5"> in there and not</font><font color="#CCCCCC"> just keep</font>

812
00:32:35,480 --> 00:32:43,730
this<font color="#E5E5E5"> only</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> or two</font><font color="#CCCCCC"> and then lastly</font>

813
00:32:41,260 --> 00:32:46,669
compatibility with Python<font color="#E5E5E5"> 3 I just</font><font color="#CCCCCC"> write</font>

814
00:32:43,730 --> 00:32:48,320
<font color="#E5E5E5">to</font><font color="#CCCCCC"> 7 off the top of my head</font><font color="#E5E5E5"> and I know</font>

815
00:32:46,669 --> 00:32:50,600
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> many in the room that will</font>

816
00:32:48,320 --> 00:32:52,490
absolutely<font color="#E5E5E5"> hate you for that so</font><font color="#CCCCCC"> I</font>

817
00:32:50,600 --> 00:32:56,178
promise<font color="#E5E5E5"> I'll get better</font><font color="#CCCCCC"> thinking about</font>

818
00:32:52,490 --> 00:32:58,130
Python 3<font color="#E5E5E5"> and so that's that's all the</font>

819
00:32:56,179 --> 00:32:59,960
content<font color="#E5E5E5"> that I had put together to talk</font>

820
00:32:58,130 --> 00:33:02,870
<font color="#CCCCCC">about</font><font color="#E5E5E5"> I know we're</font><font color="#CCCCCC"> trying</font><font color="#E5E5E5"> to I think</font>

821
00:32:59,960 --> 00:33:04,130
<font color="#CCCCCC">gain</font><font color="#E5E5E5"> upon some time here also fears</font>

822
00:33:02,870 --> 00:33:07,039
about<font color="#E5E5E5"> said and then it's left on the</font>

823
00:33:04,130 --> 00:33:07,760
clock so with that<font color="#E5E5E5"> the code is</font><font color="#CCCCCC"> available</font>

824
00:33:07,039 --> 00:33:09,408
on github

825
00:33:07,760 --> 00:33:11,160
<font color="#CCCCCC">I'm around here for the rest</font><font color="#E5E5E5"> of the day</font>

826
00:33:09,409 --> 00:33:14,190
to talk<font color="#CCCCCC"> I won't be</font><font color="#E5E5E5"> here tomorrow I</font>

827
00:33:11,160 --> 00:33:15,360
to fly back home<font color="#CCCCCC"> so if you want</font><font color="#E5E5E5"> to talk</font>

828
00:33:14,190 --> 00:33:17,940
<font color="#CCCCCC">about the approach shell or if you've</font>

829
00:33:15,360 --> 00:33:19,219
got<font color="#E5E5E5"> feedback or tips at some point today</font>

830
00:33:17,940 --> 00:33:22,410
I'd love to have a conversation<font color="#E5E5E5"> so</font>

831
00:33:19,220 --> 00:33:30,110
<font color="#E5E5E5">that's it</font>

832
00:33:22,410 --> 00:33:32,760
[Applause]

833
00:33:30,110 --> 00:33:33,810
we can I didn't know if you were<font color="#E5E5E5"> trying</font>

834
00:33:32,760 --> 00:33:37,080
<font color="#E5E5E5">to make</font><font color="#CCCCCC"> time that</font><font color="#E5E5E5"> go</font>

835
00:33:33,810 --> 00:33:39,230
I have a question Matt um I really love

836
00:33:37,080 --> 00:33:43,350
the talk<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> really</font><font color="#CCCCCC"> interesting</font>

837
00:33:39,230 --> 00:33:45,600
<font color="#CCCCCC">this addition</font><font color="#E5E5E5"> to the rather project</font><font color="#CCCCCC"> its</font>

838
00:33:43,350 --> 00:33:47,909
citizen lab<font color="#E5E5E5"> doing some</font><font color="#CCCCCC"> large-scale</font>

839
00:33:45,600 --> 00:33:50,240
<font color="#E5E5E5">analysis on big data sets of binaries at</font>

840
00:33:47,910 --> 00:33:53,310
the moment<font color="#E5E5E5"> yes</font><font color="#CCCCCC"> I guess could be AG nice</font>

841
00:33:50,240 --> 00:33:56,370
nice you know idea to have a leak<font color="#CCCCCC"> it</font>

842
00:33:53,310 --> 00:33:57,840
would ask yeah we<font color="#CCCCCC"> are</font><font color="#E5E5E5"> we're not doing</font>

843
00:33:56,370 --> 00:34:00,149
that it's definitely<font color="#CCCCCC"> on the list of</font>

844
00:33:57,840 --> 00:34:01,679
stuff that<font color="#E5E5E5"> we'd like</font><font color="#CCCCCC"> to focus</font><font color="#E5E5E5"> on the</font>

845
00:34:00,150 --> 00:34:04,760
list of development tasks that we have

846
00:34:01,680 --> 00:34:07,050
is<font color="#E5E5E5"> I'll say large to say the least</font>

847
00:34:04,760 --> 00:34:09,139
<font color="#CCCCCC">so no it's</font><font color="#E5E5E5"> not something we're</font><font color="#CCCCCC"> doing at</font>

848
00:34:07,050 --> 00:34:13,080
the moment<font color="#CCCCCC"> but it would be it would be a</font>

849
00:34:09,139 --> 00:34:16,560
<font color="#E5E5E5">scenario and you have a lot that's a</font><font color="#CCCCCC"> big</font>

850
00:34:13,080 --> 00:34:18,150
<font color="#CCCCCC">tattoo</font><font color="#E5E5E5"> set and you</font><font color="#CCCCCC"> kind of combine this</font>

851
00:34:16,560 --> 00:34:20,400
<font color="#E5E5E5">implementation that you did with elastic</font>

852
00:34:18,150 --> 00:34:22,830
search for<font color="#E5E5E5"> example on yeah it's easy to</font>

853
00:34:20,400 --> 00:34:24,270
you know<font color="#E5E5E5"> figure out what what what</font><font color="#CCCCCC"> do</font>

854
00:34:22,830 --> 00:34:26,219
you<font color="#E5E5E5"> have to pay attention</font><font color="#CCCCCC"> for you know</font>

855
00:34:24,270 --> 00:34:27,300
<font color="#E5E5E5">sure for sure</font><font color="#CCCCCC"> yeah it's not something</font>

856
00:34:26,219 --> 00:34:34,790
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we're doing at the moment though</font>

857
00:34:27,300 --> 00:34:34,790
Congrats more questions

858
00:34:41,389 --> 00:34:49,900
<font color="#E5E5E5">oh thank you I would</font><font color="#CCCCCC"> like to ask you</font>

859
00:34:46,429 --> 00:34:52,520
mentioned<font color="#CCCCCC"> coal chains and trying to</font>

860
00:34:49,900 --> 00:34:56,060
classify ourselves you<font color="#E5E5E5"> know make</font>

861
00:34:52,520 --> 00:34:59,900
signatures from<font color="#E5E5E5"> coal chains are you</font>

862
00:34:56,060 --> 00:35:02,390
aware of the<font color="#E5E5E5"> concept of system called</font>

863
00:34:59,900 --> 00:35:04,160
<font color="#E5E5E5">dependency graphs or all generally</font>

864
00:35:02,390 --> 00:35:05,660
dependency graphs tainted<font color="#E5E5E5"> Alice's and</font>

865
00:35:04,160 --> 00:35:07,520
<font color="#E5E5E5">stuff like that that's a negative</font>

866
00:35:05,660 --> 00:35:10,460
ghostrider<font color="#E5E5E5"> but if you'd</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> to teach me</font>

867
00:35:07,520 --> 00:35:13,930
I'm<font color="#E5E5E5"> happy to learn yeah well basically</font>

868
00:35:10,460 --> 00:35:17,380
it's a graph<font color="#CCCCCC"> graph lag approach which in</font>

869
00:35:13,930 --> 00:35:20,149
investigates the dependencies between

870
00:35:17,380 --> 00:35:23,120
for example system calls or library

871
00:35:20,150 --> 00:35:26,060
calls and stuff like that and it can<font color="#E5E5E5"> be</font>

872
00:35:23,120 --> 00:35:32,540
<font color="#CCCCCC">done on the function level because</font>

873
00:35:26,060 --> 00:35:35,360
there's no reason<font color="#CCCCCC"> not to and it's</font><font color="#E5E5E5"> like</font>

874
00:35:32,540 --> 00:35:38,200
it's a it's<font color="#CCCCCC"> a bit more why I'm</font>

875
00:35:35,360 --> 00:35:41,300
<font color="#CCCCCC">mentioning that</font><font color="#E5E5E5"> it's a bit more</font>

876
00:35:38,200 --> 00:35:45,439
resilient<font color="#E5E5E5"> against the obvious occasions</font>

877
00:35:41,300 --> 00:35:48,310
<font color="#E5E5E5">okay so</font><font color="#CCCCCC"> well</font><font color="#E5E5E5"> since you mention since</font>

878
00:35:45,440 --> 00:35:52,010
<font color="#E5E5E5">mentioned call chains</font><font color="#CCCCCC"> are it's very</font>

879
00:35:48,310 --> 00:35:55,220
<font color="#CCCCCC">similar to de about</font><font color="#E5E5E5"> instead of like a</font>

880
00:35:52,010 --> 00:35:58,010
chain<font color="#E5E5E5"> it's more it's more of like</font><font color="#CCCCCC"> a tree</font>

881
00:35:55,220 --> 00:35:59,240
or<font color="#CCCCCC"> a graph</font><font color="#E5E5E5"> okay no it's not</font><font color="#CCCCCC"> something</font>

882
00:35:58,010 --> 00:36:00,830
<font color="#E5E5E5">that I'm familiar</font><font color="#CCCCCC"> with but it's</font>

883
00:35:59,240 --> 00:36:02,060
definitely an approach<font color="#E5E5E5"> that all spent</font>

884
00:36:00,830 --> 00:36:07,490
some time looking<font color="#E5E5E5"> at if it's something</font>

885
00:36:02,060 --> 00:36:09,380
<font color="#CCCCCC">that</font><font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> sure I'm sure</font><font color="#E5E5E5"> that if you or I</font>

886
00:36:07,490 --> 00:36:17,089
know<font color="#E5E5E5"> that there's been some research</font>

887
00:36:09,380 --> 00:36:22,550
done on<font color="#CCCCCC"> that on</font><font color="#E5E5E5"> I think it</font><font color="#CCCCCC"> was oh</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> know</font>

888
00:36:17,090 --> 00:36:24,290
<font color="#E5E5E5">Berkeley</font><font color="#CCCCCC"> oh the</font><font color="#E5E5E5"> the Berkeley secure</font>

889
00:36:22,550 --> 00:36:28,820
security<font color="#CCCCCC"> globs</font><font color="#E5E5E5"> and okay</font>

890
00:36:24,290 --> 00:36:30,170
so I'm sure you could<font color="#E5E5E5"> find some</font><font color="#CCCCCC"> kind of</font>

891
00:36:28,820 --> 00:36:33,220
research there for sure

892
00:36:30,170 --> 00:36:33,220
thanks I<font color="#E5E5E5"> appreciate it</font>

893
00:36:40,630 --> 00:36:45,050
anything<font color="#E5E5E5"> else anyone else</font><font color="#CCCCCC"> I can only see</font>

894
00:36:43,520 --> 00:36:51,320
part<font color="#E5E5E5"> of this I can't see everything up</font>

895
00:36:45,050 --> 00:36:53,869
there it's bright yep which a please

896
00:36:51,320 --> 00:36:56,510
reconsider<font color="#CCCCCC"> again to use the fight on</font>

897
00:36:53,869 --> 00:36:58,609
<font color="#E5E5E5">three please yeah absolutely well it's</font>

898
00:36:56,510 --> 00:37:00,440
just one comes to my native<font color="#CCCCCC"> Lee and the</font>

899
00:36:58,609 --> 00:37:02,000
other I'm like I know there's<font color="#E5E5E5"> something</font>

900
00:37:00,440 --> 00:37:05,060
I'm<font color="#CCCCCC"> supposed</font><font color="#E5E5E5"> to do here</font>

901
00:37:02,000 --> 00:37:07,550
 I'll do it later I will spend<font color="#E5E5E5"> some</font>

902
00:37:05,060 --> 00:37:10,630
dedicated<font color="#E5E5E5"> time and get everything</font>

903
00:37:07,550 --> 00:37:10,630
compliant<font color="#CCCCCC"> I promise</font>

904
00:37:11,960 --> 00:37:17,880
[Applause]

