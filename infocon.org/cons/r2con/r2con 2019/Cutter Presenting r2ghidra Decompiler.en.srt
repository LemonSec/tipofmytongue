1
00:00:00,030 --> 00:00:05,279
can you wave me welcome everyone

2
00:00:03,360 --> 00:00:07,589
good morning thank you for attending to

3
00:00:05,279 --> 00:00:08,400
our talk today we are going to talk

4
00:00:07,589 --> 00:00:10,019
about Qatar

5
00:00:08,400 --> 00:00:13,230
I guess that most of you are familiar

6
00:00:10,019 --> 00:00:14,969
with Qatar and if now well now it's a

7
00:00:13,230 --> 00:00:16,680
good time to do so

8
00:00:14,969 --> 00:00:20,539
Qatar is the graphic user interface of

9
00:00:16,680 --> 00:00:22,619
run or - it's the official one and the

10
00:00:20,539 --> 00:00:24,750
in this talk we will show you some of

11
00:00:22,619 --> 00:00:27,150
its features we'll show demos and we

12
00:00:24,750 --> 00:00:29,640
will also share what we did in the last

13
00:00:27,150 --> 00:00:32,098
year since last our - cone I will also

14
00:00:29,640 --> 00:00:35,250
show you what we are planning to do next

15
00:00:32,098 --> 00:00:36,328
in our roadmap and we also have a really

16
00:00:35,250 --> 00:00:38,520
big surprise for you today

17
00:00:36,329 --> 00:00:40,680
and that we introduced in the release

18
00:00:38,520 --> 00:00:42,600
that we are releasing today a new

19
00:00:40,680 --> 00:00:45,629
version of Qatar but before we start let

20
00:00:42,600 --> 00:00:47,670
us introduce ourselves my name is ty

21
00:00:45,629 --> 00:00:49,980
Cohen some of you may already know me by

22
00:00:47,670 --> 00:00:51,510
my nickname megabits I'm a reverse

23
00:00:49,980 --> 00:00:54,120
engineer and the marvel researcher in a

24
00:00:51,510 --> 00:00:58,949
checkpoint research I'm a contributor to

25
00:00:54,120 --> 00:01:01,858
root out - and maintainer of Qatar I hi

26
00:00:58,949 --> 00:01:04,649
I'm auntie Beauty also known as sharkus

27
00:01:01,859 --> 00:01:06,930
I'm an IT student in a French

28
00:01:04,650 --> 00:01:09,110
engineering school called ensimag and

29
00:01:06,930 --> 00:01:11,460
I'm also part of the gree hack

30
00:01:09,110 --> 00:01:13,950
conference which is in French

31
00:01:11,460 --> 00:01:16,439
international IT security conference

32
00:01:13,950 --> 00:01:18,689
held in Grenoble and yeah I'm part of

33
00:01:16,439 --> 00:01:23,880
the organization and I'm here since the

34
00:01:18,689 --> 00:01:26,820
beginning of the project of Qatar so my

35
00:01:23,880 --> 00:01:30,408
name is Florian Mackay I'm a computer

36
00:01:26,820 --> 00:01:33,809
security computer science student at the

37
00:01:30,409 --> 00:01:37,170
technological university of munich i

38
00:01:33,810 --> 00:01:38,600
also recently released Chiaki maybe some

39
00:01:37,170 --> 00:01:40,710
of you know it it's an open-source

40
00:01:38,600 --> 00:01:43,350
implementation of the PlayStation 4

41
00:01:40,710 --> 00:01:47,369
remote play protocol and this was

42
00:01:43,350 --> 00:01:49,439
basically used reversed using kata as

43
00:01:47,369 --> 00:01:52,560
the primary tool and I've been

44
00:01:49,439 --> 00:01:56,329
contributing to kata since basically the

45
00:01:52,560 --> 00:01:56,329
beginning when it was still light Oh

46
00:01:57,659 --> 00:02:03,549
cool so what is cutter more accurately

47
00:02:01,630 --> 00:02:05,860
what cutter is not well cutter is not a

48
00:02:03,549 --> 00:02:08,610
replacement for without - cutter was

49
00:02:05,860 --> 00:02:11,440
designed and developed for people who

50
00:02:08,610 --> 00:02:13,120
let's say fine without - maybe not that

51
00:02:11,440 --> 00:02:16,329
intuitive or they are not so comfortable

52
00:02:13,120 --> 00:02:18,040
with the command line and cutter was

53
00:02:16,330 --> 00:02:20,080
designed for people who prefer gray

54
00:02:18,040 --> 00:02:24,429
plication there are people like this I

55
00:02:20,080 --> 00:02:25,840
confess I am I prefer go applications so

56
00:02:24,430 --> 00:02:29,709
it's basically a graphic user interface

57
00:02:25,840 --> 00:02:30,970
around what are - and for those of you

58
00:02:29,709 --> 00:02:35,110
who don't know this is our cutter looks

59
00:02:30,970 --> 00:02:38,680
like basically modern UI widget based

60
00:02:35,110 --> 00:02:40,360
with many features so this is the cutter

61
00:02:38,680 --> 00:02:42,630
we are talking about today

62
00:02:40,360 --> 00:02:45,430
but without going too deep into details

63
00:02:42,630 --> 00:02:48,579
cutter is a cross-platform reverse

64
00:02:45,430 --> 00:02:51,519
engineering framework it runs on Windows

65
00:02:48,580 --> 00:02:53,170
and Mac and on Linux and whenever we

66
00:02:51,519 --> 00:02:55,300
implement new feature we are trying to

67
00:02:53,170 --> 00:02:57,850
make sure that the future is compatible

68
00:02:55,300 --> 00:02:59,500
with these three operating systems so

69
00:02:57,850 --> 00:03:03,100
basically you can use cutter on your

70
00:02:59,500 --> 00:03:05,500
favorite operating system cutter is

71
00:03:03,100 --> 00:03:08,079
written in C++ using the Qt framework

72
00:03:05,500 --> 00:03:11,410
this is what allows us to have the

73
00:03:08,079 --> 00:03:13,269
modern you are you just so and cutter is

74
00:03:11,410 --> 00:03:15,220
powered by radar - that means that

75
00:03:13,269 --> 00:03:17,890
cutter cannot operate without it

76
00:03:15,220 --> 00:03:20,850
basically cutter underline is executing

77
00:03:17,890 --> 00:03:25,839
without two commands and what I do api's

78
00:03:20,850 --> 00:03:29,500
so yeah it executes the command you you

79
00:03:25,840 --> 00:03:31,480
are familiar with from what a - and

80
00:03:29,500 --> 00:03:35,049
although cutter is relatively new

81
00:03:31,480 --> 00:03:38,380
project it also it already have a very

82
00:03:35,049 --> 00:03:41,170
big community thousands of reverse

83
00:03:38,380 --> 00:03:43,930
engineers using cutter on a daily basis

84
00:03:41,170 --> 00:03:46,238
and for those of you who prefer numbers

85
00:03:43,930 --> 00:03:50,500
cutter releases were downloaded more

86
00:03:46,239 --> 00:03:53,530
than 160,000 times so 160,000 times that

87
00:03:50,500 --> 00:03:56,560
that's a lot and and that makes us very

88
00:03:53,530 --> 00:03:58,359
happy and we hope that more and more

89
00:03:56,560 --> 00:04:00,670
people will start to use Carter as

90
00:03:58,359 --> 00:04:02,590
because it becomes a real alternative

91
00:04:00,670 --> 00:04:08,250
for other graphic user interface is just

92
00:04:02,590 --> 00:04:10,700
such as either binary ninja so every

93
00:04:08,250 --> 00:04:14,739
perfect user interface

94
00:04:10,700 --> 00:04:17,060
we need to have some basic features and

95
00:04:14,739 --> 00:04:18,680
I will show you some of the basic

96
00:04:17,060 --> 00:04:22,340
features and and you'll see next in the

97
00:04:18,680 --> 00:04:24,020
demo many more so start with a graph of

98
00:04:22,340 --> 00:04:26,270
a graph view of cutter basically

99
00:04:24,020 --> 00:04:30,680
basically lets you view the flow of a

100
00:04:26,270 --> 00:04:34,190
function in an interactive way you can

101
00:04:30,680 --> 00:04:36,200
see that each each node and graph is

102
00:04:34,190 --> 00:04:38,479
basically a basic block in the function

103
00:04:36,200 --> 00:04:41,800
and you can rename functions using the

104
00:04:38,479 --> 00:04:44,630
graph view you can add comments you can

105
00:04:41,800 --> 00:04:48,260
jump between different functions and

106
00:04:44,630 --> 00:04:51,790
addresses but even more basic than graph

107
00:04:48,260 --> 00:04:55,120
is the linear disassembly view this view

108
00:04:51,790 --> 00:04:57,200
lets you see the Assembly of a program

109
00:04:55,120 --> 00:04:59,630
function of the function and and

110
00:04:57,200 --> 00:05:01,010
similarly to graph it you can jump

111
00:04:59,630 --> 00:05:03,320
around navigate between function and

112
00:05:01,010 --> 00:05:05,510
undresses you can add comments rename

113
00:05:03,320 --> 00:05:07,280
functions you can apply structures yes

114
00:05:05,510 --> 00:05:09,590
we have structures in supporting cutter

115
00:05:07,280 --> 00:05:13,690
you can apply types change immediate

116
00:05:09,590 --> 00:05:16,789
based etc it's a very powerful and basic

117
00:05:13,690 --> 00:05:18,889
view that we have in cutter and other

118
00:05:16,789 --> 00:05:22,659
basic view that every decent binary

119
00:05:18,889 --> 00:05:26,060
analysis tool has is DX amp widget

120
00:05:22,660 --> 00:05:28,550
basically lets you view the binary the X

121
00:05:26,060 --> 00:05:30,500
part of the binary and when one of the

122
00:05:28,550 --> 00:05:32,570
key features that we have in the X dump

123
00:05:30,500 --> 00:05:34,820
which by the way we did a very big

124
00:05:32,570 --> 00:05:37,520
factor in for it in the last year is

125
00:05:34,820 --> 00:05:39,770
this side panel you see on the right it

126
00:05:37,520 --> 00:05:42,229
will responses to selected bites that

127
00:05:39,770 --> 00:05:43,760
you are selecting on the X dump and give

128
00:05:42,229 --> 00:05:45,979
you can give you information about the

129
00:05:43,760 --> 00:05:49,039
selected bites like the md5 of them or

130
00:05:45,979 --> 00:05:50,780
the sha-1 it also gives you the entropy

131
00:05:49,039 --> 00:05:52,280
of the selected bites which is great if

132
00:05:50,780 --> 00:05:56,479
you're working with compressed data or

133
00:05:52,280 --> 00:05:58,190
with a packed binary and another cool

134
00:05:56,479 --> 00:06:00,830
feature is that when you select bites

135
00:05:58,190 --> 00:06:03,260
you can easily export it to as a byte

136
00:06:00,830 --> 00:06:05,180
array or list of bytes to your favorite

137
00:06:03,260 --> 00:06:08,120
programming language so it's a C Python

138
00:06:05,180 --> 00:06:10,250
JavaScript whatever and so if I write a

139
00:06:08,120 --> 00:06:13,190
Python script to do something I can

140
00:06:10,250 --> 00:06:16,539
easily select bytes and copy them to to

141
00:06:13,190 --> 00:06:21,229
the script just one click

142
00:06:16,539 --> 00:06:22,909
unless although cutter is implementing

143
00:06:21,229 --> 00:06:24,229
many features formula to it does not

144
00:06:22,909 --> 00:06:28,250
implement

145
00:06:24,230 --> 00:06:32,240
all of them so because there are so many

146
00:06:28,250 --> 00:06:33,950
and and if you want to execute order to

147
00:06:32,240 --> 00:06:36,350
command straight for cutter you can do

148
00:06:33,950 --> 00:06:39,440
it it's it's very intuitive it's very

149
00:06:36,350 --> 00:06:40,610
easy so say you have you want to use our

150
00:06:39,440 --> 00:06:42,800
other two commands that are not

151
00:06:40,610 --> 00:06:44,360
supported the I think cutter it's a it's

152
00:06:42,800 --> 00:06:45,920
a great option also if you have some

153
00:06:44,360 --> 00:06:47,780
tasks that you can do faster from the

154
00:06:45,920 --> 00:06:52,130
command line it's basically a command

155
00:06:47,780 --> 00:06:54,679
line for order 2 so these are the basic

156
00:06:52,130 --> 00:06:56,540
basic widgets that we have but we have a

157
00:06:54,680 --> 00:07:00,230
lot more you see some of the in the demo

158
00:06:56,540 --> 00:07:01,790
coming soon but let's quickly go through

159
00:07:00,230 --> 00:07:04,520
some of the things that we did in the

160
00:07:01,790 --> 00:07:06,860
last year in cutter since our last hour

161
00:07:04,520 --> 00:07:08,750
to code first of all and maybe most

162
00:07:06,860 --> 00:07:10,850
important we added a plug-in support for

163
00:07:08,750 --> 00:07:15,110
cutter now we can extend cutter with

164
00:07:10,850 --> 00:07:16,760
with Python or C++ plugins we hope that

165
00:07:15,110 --> 00:07:19,930
you and the community will write more

166
00:07:16,760 --> 00:07:22,610
plug-ins for cutter it's quite intuitive

167
00:07:19,930 --> 00:07:24,350
we hope that you will help us maybe port

168
00:07:22,610 --> 00:07:27,770
some of the popular plugins from either

169
00:07:24,350 --> 00:07:30,860
binary ninja or whatever to 2 cutter and

170
00:07:27,770 --> 00:07:34,580
it will be awesome also thanks to Van

171
00:07:30,860 --> 00:07:36,020
elope we added a graph overview it's one

172
00:07:34,580 --> 00:07:37,940
of the most requested features for

173
00:07:36,020 --> 00:07:41,570
cutter in the last year and this

174
00:07:37,940 --> 00:07:44,990
basically lets you view the view complex

175
00:07:41,570 --> 00:07:47,659
graph in in an easy way and navigate

176
00:07:44,990 --> 00:07:50,120
inside them great for detecting crypto

177
00:07:47,660 --> 00:07:51,770
algorithms and stuff like this as I said

178
00:07:50,120 --> 00:07:54,110
before we did a big refactoring for the

179
00:07:51,770 --> 00:07:57,680
excellent widget and now is much faster

180
00:07:54,110 --> 00:08:00,140
and easier to use we still have a lot of

181
00:07:57,680 --> 00:08:03,020
things to do that we want to implement

182
00:08:00,140 --> 00:08:06,260
such as the WI command for that too so

183
00:08:03,020 --> 00:08:09,560
you can rotate bytes or do math and

184
00:08:06,260 --> 00:08:12,260
crypto operations on unselect bytes we

185
00:08:09,560 --> 00:08:14,210
also have a new team editor that you can

186
00:08:12,260 --> 00:08:19,099
customize cutter with it it's very

187
00:08:14,210 --> 00:08:20,510
intuitive UI to customize our cutter

188
00:08:19,100 --> 00:08:22,160
looks like after this assembly looks

189
00:08:20,510 --> 00:08:23,810
like and you can share the team's you

190
00:08:22,160 --> 00:08:27,440
created with the community and please do

191
00:08:23,810 --> 00:08:29,330
so also thanks to a lot of good people

192
00:08:27,440 --> 00:08:32,840
cutter interface is now translated to

193
00:08:29,330 --> 00:08:35,990
many languages including Dutch Russian

194
00:08:32,840 --> 00:08:38,080
and more and we and we hope that more

195
00:08:35,990 --> 00:08:41,210
people will will help us too

196
00:08:38,080 --> 00:08:45,080
translator interface two more languages

197
00:08:41,210 --> 00:08:48,890
and so we can reach more people like for

198
00:08:45,080 --> 00:08:52,280
example Chinese or Arabic would be great

199
00:08:48,890 --> 00:08:54,710
and last last one in the last year we

200
00:08:52,280 --> 00:08:58,130
worked a lot on the stability of culture

201
00:08:54,710 --> 00:08:58,640
and we want the users of Qatar to trust

202
00:08:58,130 --> 00:09:02,030
it

203
00:08:58,640 --> 00:09:04,580
to do what it claims it can do and this

204
00:09:02,030 --> 00:09:07,520
is why we invested a lot of efforts in

205
00:09:04,580 --> 00:09:12,080
fixing bugs and and making sure that

206
00:09:07,520 --> 00:09:14,120
everything is working fast we actually

207
00:09:12,080 --> 00:09:16,000
prefer to introduce less features but

208
00:09:14,120 --> 00:09:18,590
making sure they're stable instead of

209
00:09:16,000 --> 00:09:21,830
introducing a lot of features that some

210
00:09:18,590 --> 00:09:24,760
of them may be useless or maybe on a PLC

211
00:09:21,830 --> 00:09:28,220
level and not baked yet fully backed yet

212
00:09:24,760 --> 00:09:31,880
so this is what some of what we did in

213
00:09:28,220 --> 00:09:34,420
the in the last last year and now it's

214
00:09:31,880 --> 00:09:34,420
demo time

215
00:09:43,820 --> 00:09:46,420
nice

216
00:09:55,480 --> 00:09:58,480
yeah

217
00:10:05,170 --> 00:10:12,349
all right so I will show you a bit are

218
00:10:08,779 --> 00:10:17,330
the ideology of Qatar and how you can

219
00:10:12,350 --> 00:10:21,560
start with it so for example we have

220
00:10:17,330 --> 00:10:23,570
well let's me reset the so this is the

221
00:10:21,560 --> 00:10:26,420
Welcome the welcoming the greeting page

222
00:10:23,570 --> 00:10:29,510
of Qatar I didn't send it didn't change

223
00:10:26,420 --> 00:10:31,149
much since previous releases but

224
00:10:29,510 --> 00:10:34,010
basically here you will find all the

225
00:10:31,149 --> 00:10:35,959
important information about your file so

226
00:10:34,010 --> 00:10:38,300
for example if you have no idea what

227
00:10:35,959 --> 00:10:39,770
kind of father this is this page will

228
00:10:38,300 --> 00:10:43,219
tell you the architecture of the file

229
00:10:39,770 --> 00:10:46,490
the file formats and many useful

230
00:10:43,220 --> 00:10:51,589
information on the left you can find the

231
00:10:46,490 --> 00:10:54,740
functions list so yes sorry wrong page

232
00:10:51,589 --> 00:10:57,589
so this is where you can find all the

233
00:10:54,740 --> 00:10:59,630
functions of your binary and basically

234
00:10:57,589 --> 00:11:03,440
you can just double click on them to

235
00:10:59,630 --> 00:11:06,020
just change the seek to it the seek

236
00:11:03,440 --> 00:11:07,910
which is a current location so basically

237
00:11:06,020 --> 00:11:09,980
the ideology behind Qatar is that

238
00:11:07,910 --> 00:11:12,500
anything that is possible should be

239
00:11:09,980 --> 00:11:14,330
accessible through through with the

240
00:11:12,500 --> 00:11:16,040
mouse so for example if you're

241
00:11:14,330 --> 00:11:18,050
interested interested in something or

242
00:11:16,040 --> 00:11:19,969
looking for something you can just click

243
00:11:18,050 --> 00:11:23,089
the windows menu on the top of the

244
00:11:19,970 --> 00:11:25,820
window and go and well everything you

245
00:11:23,089 --> 00:11:28,160
you might that is implemented is in

246
00:11:25,820 --> 00:11:30,920
Qatar can be find and can be found in

247
00:11:28,160 --> 00:11:34,010
this specific menu so if you're for

248
00:11:30,920 --> 00:11:35,900
example interested in two strings well

249
00:11:34,010 --> 00:11:38,839
you can just click on it on this menu

250
00:11:35,900 --> 00:11:40,670
and you will have a a new widget which

251
00:11:38,839 --> 00:11:43,060
will pop up and show you all the

252
00:11:40,670 --> 00:11:45,290
interesting strains in the binary

253
00:11:43,060 --> 00:11:47,300
another important menu is the

254
00:11:45,290 --> 00:11:50,900
Preferences menu which will show you

255
00:11:47,300 --> 00:11:53,839
many customization options that are

256
00:11:50,900 --> 00:11:55,430
available in radar - and if you don't

257
00:11:53,839 --> 00:11:58,610
know them well at least we try to

258
00:11:55,430 --> 00:12:00,680
display as much as possible so there are

259
00:11:58,610 --> 00:12:02,570
there are many of them and you can try

260
00:12:00,680 --> 00:12:06,529
to play with it see how it reacts with

261
00:12:02,570 --> 00:12:08,540
the interface yeah we also have now a

262
00:12:06,529 --> 00:12:10,910
cool theme editor so basically you can

263
00:12:08,540 --> 00:12:13,089
just create a new theme let's say my

264
00:12:10,910 --> 00:12:16,839
awesomes oh it's not

265
00:12:13,089 --> 00:12:21,119
nevermind see and now you can edit the

266
00:12:16,839 --> 00:12:23,859
theme and you can select the different

267
00:12:21,119 --> 00:12:26,199
options and it will just highlight them

268
00:12:23,859 --> 00:12:28,269
in the preview so for example if I want

269
00:12:26,199 --> 00:12:30,429
to change the color of the coal of the

270
00:12:28,269 --> 00:12:38,199
coal you can just change it and it

271
00:12:30,429 --> 00:12:41,709
reacts correctly no yeah sorry the

272
00:12:38,199 --> 00:12:45,488
resolution is a bit slow is it low

273
00:12:41,709 --> 00:12:48,549
alright now as I said everything that

274
00:12:45,489 --> 00:12:50,439
should be should be usable with the

275
00:12:48,549 --> 00:12:51,879
mouse so if you want to interact with an

276
00:12:50,439 --> 00:12:53,889
instruction inside the disassembly

277
00:12:51,879 --> 00:12:55,649
window you can just right click and here

278
00:12:53,889 --> 00:12:57,609
in this menu you will have all the

279
00:12:55,649 --> 00:13:01,029
possibilities you can do with this

280
00:12:57,609 --> 00:13:03,639
instruction so for example I don't know

281
00:13:01,029 --> 00:13:05,139
if I want to rename this variable here I

282
00:13:03,639 --> 00:13:07,599
can just right click on it and type

283
00:13:05,139 --> 00:13:09,789
retype function local variables and I

284
00:13:07,599 --> 00:13:12,789
can do a fancy name and then it will

285
00:13:09,789 --> 00:13:15,639
just update everything and this also

286
00:13:12,789 --> 00:13:17,859
works like everywhere in every widgets

287
00:13:15,639 --> 00:13:19,779
so for example it farms in the string

288
00:13:17,859 --> 00:13:21,459
widget and I found an interesting string

289
00:13:19,779 --> 00:13:24,129
for example this one which is called

290
00:13:21,459 --> 00:13:26,949
success then I can just right click on

291
00:13:24,129 --> 00:13:29,079
it and see what's available there so for

292
00:13:26,949 --> 00:13:31,508
example I can show it in a new hex dump

293
00:13:29,079 --> 00:13:33,789
and it will pop a new hexton window

294
00:13:31,509 --> 00:13:36,579
which will show you the string right

295
00:13:33,789 --> 00:13:38,859
here as well I can just right click on

296
00:13:36,579 --> 00:13:40,089
it and just show the cross references to

297
00:13:38,859 --> 00:13:42,189
this drink so I can know where is

298
00:13:40,089 --> 00:13:44,079
actually used in the binary and then I

299
00:13:42,189 --> 00:13:45,759
can just double click on it and it will

300
00:13:44,079 --> 00:13:50,019
update my current position in the binary

301
00:13:45,759 --> 00:13:54,690
you can also press space to have the

302
00:13:50,019 --> 00:13:58,620
graph view oh well yes

303
00:13:54,690 --> 00:14:00,629
so here I can check where the string is

304
00:13:58,620 --> 00:14:03,240
actually used and it's used right after

305
00:14:00,629 --> 00:14:05,100
a function which is this one now I can

306
00:14:03,240 --> 00:14:07,230
double click on it like an idle you

307
00:14:05,100 --> 00:14:09,180
would do and I can see that it's doing a

308
00:14:07,230 --> 00:14:12,329
string compare a string copy sorry and

309
00:14:09,180 --> 00:14:14,609
then it will execute some rot13 so

310
00:14:12,329 --> 00:14:18,209
another cool feature we haven't cut her

311
00:14:14,610 --> 00:14:21,079
and we can use here is emulation so you

312
00:14:18,209 --> 00:14:23,969
can start the emulation here and

313
00:14:21,079 --> 00:14:25,739
everything is broken well let me just

314
00:14:23,970 --> 00:14:28,699
close this alright here we go

315
00:14:25,740 --> 00:14:32,939
so I'm starting the emulation here

316
00:14:28,699 --> 00:14:33,180
alright and so you can see on the top

317
00:14:32,939 --> 00:14:35,730
right

318
00:14:33,180 --> 00:14:38,160
it's my stack view and on the bottom

319
00:14:35,730 --> 00:14:41,220
right is my registers value so now I can

320
00:14:38,160 --> 00:14:44,670
just step over the function and right

321
00:14:41,220 --> 00:14:46,740
before the call I can see what arguments

322
00:14:44,670 --> 00:14:48,269
are given to this function and if I just

323
00:14:46,740 --> 00:14:50,100
step over the function I can see even

324
00:14:48,269 --> 00:14:53,189
the result of the function which is the

325
00:14:50,100 --> 00:14:55,649
rot13 string that was passed this

326
00:14:53,189 --> 00:14:57,839
function a limitation of this obviously

327
00:14:55,649 --> 00:15:00,300
is that it doesn't emulate libraries so

328
00:14:57,839 --> 00:15:04,740
you cannot emulate the string copy cool

329
00:15:00,300 --> 00:15:06,959
but yeah that's wrap that wraps it up I

330
00:15:04,740 --> 00:15:09,089
guess we'll see more demonstration later

331
00:15:06,959 --> 00:15:12,410
but now I'm gonna let Florin show you

332
00:15:09,089 --> 00:15:12,410
some fancy stuff he did

333
00:15:30,630 --> 00:15:36,720
all right so now it's time for the

334
00:15:33,940 --> 00:15:36,720
surprise

335
00:15:52,430 --> 00:15:57,500
okay so you might have heard of this

336
00:15:55,430 --> 00:16:02,150
little program called Deidre which has

337
00:15:57,500 --> 00:16:04,670
been recently released by the NSA if you

338
00:16:02,150 --> 00:16:06,980
don't know it's it's a well reverse

339
00:16:04,670 --> 00:16:09,770
engineering framework which does a lot

340
00:16:06,980 --> 00:16:12,380
of similar things to r2 so if you

341
00:16:09,770 --> 00:16:14,150
compare the two tools well it has a user

342
00:16:12,380 --> 00:16:16,070
interface like we do it's a bit awkward

343
00:16:14,150 --> 00:16:17,420
in my opinion but well that's a matter

344
00:16:16,070 --> 00:16:20,810
of taste

345
00:16:17,420 --> 00:16:24,319
but overall it's does a lot of the same

346
00:16:20,810 --> 00:16:26,209
things that are - can do so I'm pretty

347
00:16:24,320 --> 00:16:27,680
sure you can find things that are better

348
00:16:26,210 --> 00:16:29,420
than r2 and things that are better in

349
00:16:27,680 --> 00:16:31,219
gear um but there is one feature that

350
00:16:29,420 --> 00:16:35,060
we're going to concentrate on today that

351
00:16:31,220 --> 00:16:36,380
are - doesn't yet have like this and

352
00:16:35,060 --> 00:16:37,569
this is what you can see here it's the

353
00:16:36,380 --> 00:16:40,460
decompiler

354
00:16:37,570 --> 00:16:42,830
so as you can already see from this

355
00:16:40,460 --> 00:16:49,970
small example it can produce some pretty

356
00:16:42,830 --> 00:16:53,870
nice exam as results now Kirra itself is

357
00:16:49,970 --> 00:16:55,670
written in java but if you take a look

358
00:16:53,870 --> 00:16:58,460
at the source code of kitra then you can

359
00:16:55,670 --> 00:17:00,410
notice the decompiler part is completely

360
00:16:58,460 --> 00:17:04,190
separate of it and it's entirely written

361
00:17:00,410 --> 00:17:05,329
in C++ and actually this is how guitro

362
00:17:04,190 --> 00:17:08,930
uses the decompiler

363
00:17:05,329 --> 00:17:12,050
so the C++ part is compiled into an

364
00:17:08,930 --> 00:17:13,880
executable it's not used with with J and

365
00:17:12,050 --> 00:17:17,480
I on some bindings it's really just an

366
00:17:13,880 --> 00:17:21,560
executable and guitro by itself starts

367
00:17:17,480 --> 00:17:25,900
this executable then it just uses some

368
00:17:21,560 --> 00:17:28,490
XML based protocol on SD out a CD in to

369
00:17:25,900 --> 00:17:30,440
communicate with the executable so it

370
00:17:28,490 --> 00:17:33,220
says just okay please decompile this

371
00:17:30,440 --> 00:17:35,480
function and then the decompile

372
00:17:33,220 --> 00:17:38,870
executable does its stuff and returns

373
00:17:35,480 --> 00:17:39,470
the function in this protocol and while

374
00:17:38,870 --> 00:17:42,409
it's working

375
00:17:39,470 --> 00:17:44,840
it also queries some stuff like if it

376
00:17:42,410 --> 00:17:47,240
wants to know where what what is at a

377
00:17:44,840 --> 00:17:49,760
certain offset for the recompilation

378
00:17:47,240 --> 00:17:53,930
output it just asks Kedron it returns

379
00:17:49,760 --> 00:17:56,000
that so that's how this works but

380
00:17:53,930 --> 00:17:58,420
actually you can do even more with this

381
00:17:56,000 --> 00:18:00,770
decompiler they even have a little

382
00:17:58,420 --> 00:18:02,540
command-line interface built into it

383
00:18:00,770 --> 00:18:04,370
that you can't normally use if you just

384
00:18:02,540 --> 00:18:05,250
download key dro but you if you build it

385
00:18:04,370 --> 00:18:07,560
you can

386
00:18:05,250 --> 00:18:11,180
and make that work and it kind of works

387
00:18:07,560 --> 00:18:14,399
like like a mini r2 you can imagine that

388
00:18:11,180 --> 00:18:17,760
um you can just open the binary and then

389
00:18:14,400 --> 00:18:19,860
you can D compile it and this works

390
00:18:17,760 --> 00:18:21,379
completely independent of the the whole

391
00:18:19,860 --> 00:18:25,439
job lucky-draw it has its own

392
00:18:21,380 --> 00:18:29,160
disassembler with slay so it can work

393
00:18:25,440 --> 00:18:32,490
completely independent so because it's

394
00:18:29,160 --> 00:18:35,700
c++ c++ and c can be very nicely

395
00:18:32,490 --> 00:18:37,860
is it integrated into together so you

396
00:18:35,700 --> 00:18:39,870
probably already guessed that but now

397
00:18:37,860 --> 00:18:44,659
we're going to introduce the r2d2 LT

398
00:18:39,870 --> 00:18:44,659
compiler so

399
00:18:49,000 --> 00:19:01,790
okay now I'm just going to sorry alright

400
00:18:57,280 --> 00:19:04,490
so you can use the D compiler from from

401
00:19:01,790 --> 00:19:08,230
our tomb just as well but I'm going to

402
00:19:04,490 --> 00:19:11,230
do a little demo in Qatar right here

403
00:19:08,230 --> 00:19:11,230
seeing

404
00:19:30,030 --> 00:19:38,760
so this is a little binary if prepared

405
00:19:34,320 --> 00:19:41,200
yeah that's the main function so now in

406
00:19:38,760 --> 00:19:45,000
kata you have this pseudocode widget

407
00:19:41,200 --> 00:19:48,670
which we already have for some time and

408
00:19:45,000 --> 00:19:50,440
now you can also select kitra from down

409
00:19:48,670 --> 00:19:54,429
here you have our deck and we also have

410
00:19:50,440 --> 00:19:56,980
Kira so there you can see that you

411
00:19:54,429 --> 00:20:01,330
compilation when I just changed the

412
00:19:56,980 --> 00:20:04,990
function it automatically changes my the

413
00:20:01,330 --> 00:20:09,010
decomposed function here as well so

414
00:20:04,990 --> 00:20:10,840
let's take a look at this binary now you

415
00:20:09,010 --> 00:20:14,559
can see there's a function called arrow

416
00:20:10,840 --> 00:20:16,330
pause and it's passed these two power

417
00:20:14,559 --> 00:20:19,570
map parameters from Maine which are of

418
00:20:16,330 --> 00:20:26,189
course oxy and are green and another one

419
00:20:19,570 --> 00:20:31,570
so let's take a look at this okay now

420
00:20:26,190 --> 00:20:33,429
let's make yeah that's fine

421
00:20:31,570 --> 00:20:36,460
so this is the graph and this is the

422
00:20:33,429 --> 00:20:38,519
compiled code comes from Akira you can

423
00:20:36,460 --> 00:20:41,440
see down here we have a jump table and

424
00:20:38,519 --> 00:20:45,519
it even has resolved that into a nice

425
00:20:41,440 --> 00:20:49,479
switch case statement and up here you

426
00:20:45,519 --> 00:20:52,779
have a lot of code so this already works

427
00:20:49,479 --> 00:20:54,669
pretty it looks pretty nice but it's

428
00:20:52,779 --> 00:20:58,210
also cool about this is that we don't

429
00:20:54,669 --> 00:21:01,869
just display the code but it also knows

430
00:20:58,210 --> 00:21:03,970
the location of these statements inside

431
00:21:01,869 --> 00:21:05,738
the code so if I wanted to see okay

432
00:21:03,970 --> 00:21:07,509
where is this this melech happening in

433
00:21:05,739 --> 00:21:10,149
the actual code I can just click it or

434
00:21:07,509 --> 00:21:13,299
like the string compare and then we will

435
00:21:10,149 --> 00:21:15,879
just synchronize the seek between the

436
00:21:13,299 --> 00:21:17,649
regular disassembly and the decompile

437
00:21:15,879 --> 00:21:19,449
code and the same works the other way

438
00:21:17,649 --> 00:21:24,099
around so I just click here and I see

439
00:21:19,450 --> 00:21:26,590
this is done okay so you can already use

440
00:21:24,099 --> 00:21:28,869
it like this but if we take a look at

441
00:21:26,590 --> 00:21:31,149
this part of the code for example we

442
00:21:28,869 --> 00:21:33,129
have a lot of pointer dereferencing and

443
00:21:31,149 --> 00:21:34,658
stuff like that so it's really hard to

444
00:21:33,129 --> 00:21:37,059
see what's going on and the same thing

445
00:21:34,659 --> 00:21:40,869
is true well it's a it's a bit more

446
00:21:37,059 --> 00:21:43,779
readable here but it's even there it's

447
00:21:40,869 --> 00:21:48,699
still hard to really see what's going on

448
00:21:43,779 --> 00:21:51,879
there so what we can do is let's say we

449
00:21:48,700 --> 00:21:56,710
have we know that this argument here

450
00:21:51,879 --> 00:21:58,418
okay is off the point of the type of

451
00:21:56,710 --> 00:22:01,269
some struct and we have to reverse this

452
00:21:58,419 --> 00:22:06,759
by just looking at other parts of the

453
00:22:01,269 --> 00:22:12,509
code so let me just go into the types

454
00:22:06,759 --> 00:22:12,509
widgets and I can load some types here

455
00:22:12,840 --> 00:22:16,259
prepared those already

456
00:22:18,280 --> 00:22:23,420
so I'm just gonna load some struts in

457
00:22:20,570 --> 00:22:29,810
here this is just your struts in it you

458
00:22:23,420 --> 00:22:32,810
know here and then I kind of just take

459
00:22:29,810 --> 00:22:38,950
this variable so let's say I know this

460
00:22:32,810 --> 00:22:44,870
is off point of right pointer and let's

461
00:22:38,950 --> 00:22:47,210
that's College right and now look

462
00:22:44,870 --> 00:22:49,040
closely at the decompile code how this

463
00:22:47,210 --> 00:22:50,990
will change so right now we have a lot

464
00:22:49,040 --> 00:22:53,540
of pointer costs and stuff like that so

465
00:22:50,990 --> 00:22:57,920
if I play the struct you can see it

466
00:22:53,540 --> 00:23:01,580
automatically resolves all the the

467
00:22:57,920 --> 00:23:05,900
struct members with all the D references

468
00:23:01,580 --> 00:23:07,879
and it all looks nice and the same thing

469
00:23:05,900 --> 00:23:09,980
as possible so here I have this

470
00:23:07,880 --> 00:23:13,400
ambassador is an enum so it even

471
00:23:09,980 --> 00:23:20,500
resolves these and you can see the same

472
00:23:13,400 --> 00:23:24,290
down here in the switch statement okay

473
00:23:20,500 --> 00:23:27,440
so this makes this this all decompiler

474
00:23:24,290 --> 00:23:29,840
quite quite useful because you can

475
00:23:27,440 --> 00:23:33,770
define a lot of the structs and resolve

476
00:23:29,840 --> 00:23:44,270
the entire code so it makes it much more

477
00:23:33,770 --> 00:23:47,360
readable in the end okay now as I've

478
00:23:44,270 --> 00:23:50,690
mentioned we don't we don't run any kind

479
00:23:47,360 --> 00:23:52,850
of Java Diedre so you don't need you

480
00:23:50,690 --> 00:23:55,310
don't need get read all to use this this

481
00:23:52,850 --> 00:23:59,800
is all self-contained inside one single

482
00:23:55,310 --> 00:23:59,800
or two plug-in and the cutter part of it

483
00:24:09,490 --> 00:24:16,529
so you are probably wondering when can

484
00:24:12,970 --> 00:24:19,240
you use this the answer is right now

485
00:24:16,529 --> 00:24:21,399
this is the github repository we've just

486
00:24:19,240 --> 00:24:23,260
published it this morning so you can

487
00:24:21,399 --> 00:24:26,289
just pull the code there and build it if

488
00:24:23,260 --> 00:24:29,080
you're using r2 you can also install it

489
00:24:26,289 --> 00:24:32,080
from our TPM so just type this in and it

490
00:24:29,080 --> 00:24:36,330
will work and we will also release kata

491
00:24:32,080 --> 00:24:40,120
1.9 just right now we just have to put

492
00:24:36,330 --> 00:24:42,730
publish for that and all our builds on

493
00:24:40,120 --> 00:24:44,739
windows linux and mac OS also contain

494
00:24:42,730 --> 00:24:48,690
this decompose you can just download it

495
00:24:44,740 --> 00:24:48,690
and use it as you've seen right now

496
00:24:57,170 --> 00:25:04,260
all right thank you foreign so now

497
00:25:00,420 --> 00:25:05,670
what's next in a cutter world so there

498
00:25:04,260 --> 00:25:08,160
are actually many things we want to do

499
00:25:05,670 --> 00:25:11,340
next the first one that is very

500
00:25:08,160 --> 00:25:15,030
demanding demanded by you users people

501
00:25:11,340 --> 00:25:18,240
using cutter is the debugger yeah indeed

502
00:25:15,030 --> 00:25:20,280
we have started to work on this last

503
00:25:18,240 --> 00:25:24,410
year we present google Summer of Code

504
00:25:20,280 --> 00:25:26,550
someone which implemented it in Qatar

505
00:25:24,410 --> 00:25:28,860
right now it's still a work in progress

506
00:25:26,550 --> 00:25:32,040
because we still have like issues to

507
00:25:28,860 --> 00:25:34,020
take care of for example if you start to

508
00:25:32,040 --> 00:25:36,570
if you try to debug some position

509
00:25:34,020 --> 00:25:39,360
independent executables with Qatar it

510
00:25:36,570 --> 00:25:41,129
might just not work so for now all of

511
00:25:39,360 --> 00:25:44,250
this project is in a separate branch

512
00:25:41,130 --> 00:25:45,210
that we will try to focus on in the in

513
00:25:44,250 --> 00:25:48,450
the next month

514
00:25:45,210 --> 00:25:51,570
so hopefully you will be able to debug

515
00:25:48,450 --> 00:25:54,360
from Qatar another important thing is

516
00:25:51,570 --> 00:25:56,070
the projects so right now Qatar doesn't

517
00:25:54,360 --> 00:25:58,620
have any projects so if you start a

518
00:25:56,070 --> 00:26:01,320
heavy reverse engineering session and

519
00:25:58,620 --> 00:26:03,270
you just want to take later or share

520
00:26:01,320 --> 00:26:06,780
with a friend well you cannot do it

521
00:26:03,270 --> 00:26:09,870
because there's no projects you can no

522
00:26:06,780 --> 00:26:12,389
projects so yeah we also need to work on

523
00:26:09,870 --> 00:26:14,909
this so you can just save it load again

524
00:26:12,390 --> 00:26:19,500
and everything so yet to have a better

525
00:26:14,910 --> 00:26:21,510
user experience you might know the art

526
00:26:19,500 --> 00:26:24,900
to package manager as we just mentioned

527
00:26:21,510 --> 00:26:29,340
earlier we want to also integrate this

528
00:26:24,900 --> 00:26:32,670
so it would be able to load to yet to

529
00:26:29,340 --> 00:26:35,189
download cutter plug-in as well and show

530
00:26:32,670 --> 00:26:37,530
you all of this in a fancy clickable

531
00:26:35,190 --> 00:26:39,420
interface since cutter is using the

532
00:26:37,530 --> 00:26:43,559
mouse well this should also use the

533
00:26:39,420 --> 00:26:46,830
mouse I guess something else in the past

534
00:26:43,559 --> 00:26:49,290
we were using a Jupiter to have a fancy

535
00:26:46,830 --> 00:26:51,840
Python console so you could just scrip

536
00:26:49,290 --> 00:26:54,330
cutter from from a from cutter the

537
00:26:51,840 --> 00:26:56,730
problem with this approach was that we

538
00:26:54,330 --> 00:27:01,080
were using the cute web engine since

539
00:26:56,730 --> 00:27:02,850
Jupiter is something web-based so we

540
00:27:01,080 --> 00:27:05,340
removed it for obvious reasons because

541
00:27:02,850 --> 00:27:07,139
it's like basically just bonding chrome

542
00:27:05,340 --> 00:27:08,820
inside cutter and we don't really want

543
00:27:07,140 --> 00:27:09,210
to do this because it increases the

544
00:27:08,820 --> 00:27:12,120
binary

545
00:27:09,210 --> 00:27:14,159
sighs for nothing so yeah this is

546
00:27:12,120 --> 00:27:16,408
something we want to focus on as well

547
00:27:14,159 --> 00:27:19,260
have a proper ipython console and

548
00:27:16,409 --> 00:27:21,659
talking about this well we also want to

549
00:27:19,260 --> 00:27:24,510
improve our API because many people

550
00:27:21,659 --> 00:27:26,610
start using cutter to automate reverse

551
00:27:24,510 --> 00:27:30,000
engineering tasks in their daily job and

552
00:27:26,610 --> 00:27:33,120
basically we want to have something like

553
00:27:30,000 --> 00:27:36,270
a proper API not just so you don't have

554
00:27:33,120 --> 00:27:40,520
to learn radar - comments - to use the

555
00:27:36,270 --> 00:27:43,710
API but actually just use something more

556
00:27:40,520 --> 00:27:46,529
understand understandable and all of

557
00:27:43,710 --> 00:27:48,390
this can only come thanks to a proper

558
00:27:46,529 --> 00:27:50,940
documentation and this is also what we

559
00:27:48,390 --> 00:27:52,860
want to focus on in the next month to

560
00:27:50,940 --> 00:27:55,649
improve really improve greatly improve

561
00:27:52,860 --> 00:28:00,330
the documentation for a cutter and yeah

562
00:27:55,649 --> 00:28:02,340
that's it as you might have seen or

563
00:28:00,330 --> 00:28:05,879
maybe not we also have a new fancy

564
00:28:02,340 --> 00:28:07,649
website thanks to megabits here so on

565
00:28:05,880 --> 00:28:08,850
this website you can download cutter for

566
00:28:07,649 --> 00:28:10,918
your platform

567
00:28:08,850 --> 00:28:13,350
browse the source code and find the

568
00:28:10,919 --> 00:28:17,520
documentation and community links so

569
00:28:13,350 --> 00:28:19,590
take a look at it and I would like we

570
00:28:17,520 --> 00:28:23,908
would like to thank all our contributors

571
00:28:19,590 --> 00:28:26,850
who made this possible so many of them

572
00:28:23,909 --> 00:28:28,980
are contributing to character regularly

573
00:28:26,850 --> 00:28:33,928
or not and yeah we want to give them a

574
00:28:28,980 --> 00:28:35,909
big warm thank you for for this and if

575
00:28:33,929 --> 00:28:37,980
you want to be on this screenshot on

576
00:28:35,909 --> 00:28:39,570
this slide next year just come to us

577
00:28:37,980 --> 00:28:41,669
we're nice and we're funny I guess

578
00:28:39,570 --> 00:28:45,210
so don't hesitate to contact us and

579
00:28:41,669 --> 00:28:48,840
contribute together and yeah I would

580
00:28:45,210 --> 00:28:52,169
also like to thanks especially our

581
00:28:48,840 --> 00:28:54,959
development team and and all those

582
00:28:52,169 --> 00:28:57,840
people in this slides who made who work

583
00:28:54,960 --> 00:28:59,460
on Qatar on a daily basis so thanks to

584
00:28:57,840 --> 00:29:06,539
them

585
00:28:59,460 --> 00:29:08,799
[Laughter]

586
00:29:06,539 --> 00:29:10,270
now as I said if you're interested in

587
00:29:08,799 --> 00:29:13,090
the project just thought is it day to

588
00:29:10,270 --> 00:29:15,250
come to us contact us on telegram or

589
00:29:13,090 --> 00:29:16,809
anything we're always looking for more

590
00:29:15,250 --> 00:29:19,380
people to join the team because there's

591
00:29:16,809 --> 00:29:23,649
this is a huge amount of work to do and

592
00:29:19,380 --> 00:29:25,450
yeah just come to us now if you have any

593
00:29:23,650 --> 00:29:28,110
question we'd be glad to answer any of

594
00:29:25,450 --> 00:29:28,110
them thank you

595
00:29:30,450 --> 00:29:35,150
[Laughter]

596
00:29:42,230 --> 00:29:57,680
if it what what exactly do you mean by

597
00:29:55,400 --> 00:30:05,000
limitations or what do you what you want

598
00:29:57,680 --> 00:30:09,520
to do so yeah basically we can use

599
00:30:05,000 --> 00:30:13,160
everything that the decompiler offers we

600
00:30:09,520 --> 00:30:17,120
need some ways to get this information

601
00:30:13,160 --> 00:30:19,400
over from a 2 to the D compiler so we to

602
00:30:17,120 --> 00:30:20,719
implement this nicely we also need to

603
00:30:19,400 --> 00:30:23,360
have these features in r2

604
00:30:20,720 --> 00:30:25,340
before so for example in our tube we

605
00:30:23,360 --> 00:30:27,860
don't have or at least as far as I know

606
00:30:25,340 --> 00:30:30,110
we don't specify return types for

607
00:30:27,860 --> 00:30:32,570
functions so that's something we don't

608
00:30:30,110 --> 00:30:36,260
have but as soon as we have that then

609
00:30:32,570 --> 00:30:39,220
it's just really trivial to give that to

610
00:30:36,260 --> 00:30:39,220
the D compiler

611
00:30:44,310 --> 00:30:54,750
yeah please I don't know one I saw some

612
00:30:51,690 --> 00:30:58,290
well Brady true mailbox in the D

613
00:30:54,750 --> 00:31:02,580
compiler code and I got no response to

614
00:30:58,290 --> 00:31:05,550
my PRS so far so I don't know but no

615
00:31:02,580 --> 00:31:14,909
back to us so far yeah you still you

616
00:31:05,550 --> 00:31:19,680
still have a yeah so like what a really

617
00:31:14,910 --> 00:31:24,030
meant was are there anything that we

618
00:31:19,680 --> 00:31:29,550
can't do using giedrius plugin that gira

619
00:31:24,030 --> 00:31:33,480
itself can do no actually the so right

620
00:31:29,550 --> 00:31:35,129
now maybe yes but it's if Gibbler can do

621
00:31:33,480 --> 00:31:37,950
something with the decompiler then we

622
00:31:35,130 --> 00:31:42,150
can do it too we have we have the whole

623
00:31:37,950 --> 00:31:44,220
source actually the interface that

624
00:31:42,150 --> 00:31:46,860
Chitra implements of the decompile that

625
00:31:44,220 --> 00:31:49,470
doesn't even cover 100% of the the

626
00:31:46,860 --> 00:31:52,409
interface that the compiler offers so

627
00:31:49,470 --> 00:31:54,090
yeah it looks like this was initially

628
00:31:52,410 --> 00:31:56,520
some separate project from Ghidorah

629
00:31:54,090 --> 00:32:01,709
itself and it was just a to get at some

630
00:31:56,520 --> 00:32:05,940
point yeah any other questions okay

631
00:32:01,710 --> 00:32:08,970
final question can you show how to use

632
00:32:05,940 --> 00:32:11,520
the Sidra the compiler from our - yeah

633
00:32:08,970 --> 00:32:15,770
sure and also share with the code and

634
00:32:11,520 --> 00:32:15,770
how to install it with r2p and so on

635
00:32:17,180 --> 00:32:20,180
Thanks

636
00:32:39,040 --> 00:32:44,770
[Music]

637
00:32:41,610 --> 00:32:47,699
binary so in or two if you have it

638
00:32:44,770 --> 00:32:52,720
installed you can just use the pdj PDG

639
00:32:47,700 --> 00:32:56,380
command and from there you you have

640
00:32:52,720 --> 00:32:59,170
access to the decompiler let's say we go

641
00:32:56,380 --> 00:33:01,930
and go to this main function analyze you

642
00:32:59,170 --> 00:33:03,790
need analysis for this to work and then

643
00:33:01,930 --> 00:33:05,530
you can just call PDG and it will

644
00:33:03,790 --> 00:33:08,290
decompose the first one takes a little

645
00:33:05,530 --> 00:33:13,690
while but after that it's really fast so

646
00:33:08,290 --> 00:33:17,470
that's how it works in r2 to install it

647
00:33:13,690 --> 00:33:22,830
you just need set or 2:00 p.m. you just

648
00:33:17,470 --> 00:33:27,280
type in our 2:00 p.m. - aya or - duck

649
00:33:22,830 --> 00:33:30,669
and then it will fetch it builds the

650
00:33:27,280 --> 00:33:32,200
plugin so that's all you need you aside

651
00:33:30,670 --> 00:33:36,390
you don't need guitro you just use this

652
00:33:32,200 --> 00:33:36,390
and it builds everything self-contained

653
00:33:44,270 --> 00:34:00,420
any other questions yes about the speed

654
00:33:55,010 --> 00:34:02,430
I didn't do any measurements so I would

655
00:34:00,420 --> 00:34:06,900
imagine it to be pretty much the same

656
00:34:02,430 --> 00:34:08,159
okay what about the stability well yeah

657
00:34:06,900 --> 00:34:11,280
that's that's a good point

658
00:34:08,159 --> 00:34:13,409
so because we run the the decompile that

659
00:34:11,280 --> 00:34:15,090
it's all inside this r2 plugin and runs

660
00:34:13,409 --> 00:34:17,700
in the same process so if the decompiler

661
00:34:15,090 --> 00:34:20,760
sec falls then r2 is just sec falls

662
00:34:17,699 --> 00:34:24,029
that's unfortunately how it is if you

663
00:34:20,760 --> 00:34:26,340
run it in gira itself if the decompile

664
00:34:24,030 --> 00:34:28,409
executable sec Falls then it you will

665
00:34:26,340 --> 00:34:30,659
just just the d compiler will die and

666
00:34:28,409 --> 00:34:35,100
you still have Piedra so that's that's a

667
00:34:30,659 --> 00:34:37,560
good point there for now I haven't found

668
00:34:35,100 --> 00:34:40,500
any major issues in the decomp allah

669
00:34:37,560 --> 00:34:42,690
accept from from some uninitialized

670
00:34:40,500 --> 00:34:45,090
stuff where I was getting unpredictable

671
00:34:42,690 --> 00:34:48,270
output but I was able to fix that so

672
00:34:45,090 --> 00:34:49,830
yeah looks good just for you for

673
00:34:48,270 --> 00:34:51,870
information to everyone I think I read

674
00:34:49,830 --> 00:34:54,080
yesterday night that it was all support

675
00:34:51,870 --> 00:34:56,969
to to either so you have either with

676
00:34:54,080 --> 00:34:59,480
exactly yeah I've seen that too what

677
00:34:56,969 --> 00:35:01,680
they are doing is pretty similar to the

678
00:34:59,480 --> 00:35:03,060
plug-in from pancake so they're just

679
00:35:01,680 --> 00:35:04,710
running a headless kitra and then

680
00:35:03,060 --> 00:35:08,690
holding the G composite which is kind of

681
00:35:04,710 --> 00:35:11,610
well so the capital one is way faster

682
00:35:08,690 --> 00:35:14,310
not necessarily faster yeah maybe a bit

683
00:35:11,610 --> 00:35:18,450
because it has doesn't have to do so

684
00:35:14,310 --> 00:35:21,120
many information transmitting but the

685
00:35:18,450 --> 00:35:23,040
point is more that you can just much

686
00:35:21,120 --> 00:35:26,100
more deeply integrate this we just don't

687
00:35:23,040 --> 00:35:27,570
have deidre in between we just can feed

688
00:35:26,100 --> 00:35:28,170
all the information right to the

689
00:35:27,570 --> 00:35:30,120
decompiler

690
00:35:28,170 --> 00:35:32,970
in the way that it needs it right from

691
00:35:30,120 --> 00:35:35,490
r2 so that makes it much more powerful

692
00:35:32,970 --> 00:35:39,169
with what the types and so on well thank

693
00:35:35,490 --> 00:35:49,490
you yeah thanks yeah

694
00:35:39,170 --> 00:35:50,510
oh the microphone says oh yeah much

695
00:35:49,490 --> 00:35:53,209
better

696
00:35:50,510 --> 00:35:56,869
so with Qatar we saw that you can

697
00:35:53,210 --> 00:35:58,640
implement a type and the B compiler the

698
00:35:56,869 --> 00:36:00,650
pseudocode itself would change this is

699
00:35:58,640 --> 00:36:03,529
the same apply for r2 or is there some

700
00:36:00,650 --> 00:36:06,099
extra symbol replacement oh this is all

701
00:36:03,530 --> 00:36:13,540
just using the r2 functionality okay

702
00:36:06,099 --> 00:36:16,010
thank you oh hello do you plan on

703
00:36:13,540 --> 00:36:21,619
collaborating with the Dedra developers

704
00:36:16,010 --> 00:36:25,369
on the the decompile the compiler fixing

705
00:36:21,619 --> 00:36:29,839
bugs adding features that would benefit

706
00:36:25,369 --> 00:36:32,059
Qatar and r2 well maybe so I personally

707
00:36:29,839 --> 00:36:34,279
don't plan to do huge contribution to

708
00:36:32,059 --> 00:36:35,660
contributions to the compar but for

709
00:36:34,280 --> 00:36:40,910
example there are some things where it

710
00:36:35,660 --> 00:36:43,040
does a variable plus equals minus or a

711
00:36:40,910 --> 00:36:44,808
negative value which could be made much

712
00:36:43,040 --> 00:36:47,890
nice as or small things like that I

713
00:36:44,809 --> 00:36:51,290
think we might submit patches like that

714
00:36:47,890 --> 00:36:57,529
in the long run but ya know no huge

715
00:36:51,290 --> 00:37:00,099
plans for that thank you any other

716
00:36:57,530 --> 00:37:00,099
questions

717
00:37:00,380 --> 00:37:09,349
back here do you plan to implement

718
00:37:05,499 --> 00:37:11,930
mapping of decompiled lines to assembler

719
00:37:09,349 --> 00:37:23,839
yeah I've shown that we already have

720
00:37:11,930 --> 00:37:26,288
that one moment what I have no idea how

721
00:37:23,839 --> 00:37:26,288
to use that

722
00:37:33,630 --> 00:37:36,709
[Music]

723
00:37:39,279 --> 00:37:43,059
yeah that's just is that

724
00:37:48,730 --> 00:37:57,880
yeah so if I is another function go so

725
00:37:54,500 --> 00:38:03,260
here you have the it really knows what

726
00:37:57,880 --> 00:38:10,599
instruction corresponds to which thing

727
00:38:03,260 --> 00:38:13,400
here and you even have yeah yeah yeah

728
00:38:10,599 --> 00:38:16,160
there's a lot of stuff in yeah

729
00:38:13,400 --> 00:38:18,290
even inside one single line here you

730
00:38:16,160 --> 00:38:21,890
have two comparisons in one decompile

731
00:38:18,290 --> 00:38:24,410
line let's go to the closer here and you

732
00:38:21,890 --> 00:38:26,118
can see when I click here it's something

733
00:38:24,410 --> 00:38:29,470
else then I want to click here so it

734
00:38:26,119 --> 00:38:32,470
even knows that this is a different

735
00:38:29,470 --> 00:38:32,470
offset

736
00:38:38,460 --> 00:38:44,830
what discrepancies are there between the

737
00:38:41,970 --> 00:38:49,060
instruction sets the the gaiter compiler

738
00:38:44,830 --> 00:38:56,310
supports and that are two supports well

739
00:38:49,060 --> 00:39:01,440
so the get rody Kampala uses sleigh for

740
00:38:56,310 --> 00:39:01,440
me just yeah that's going to cut again

741
00:39:05,310 --> 00:39:12,130
and basically you can use anything that

742
00:39:09,580 --> 00:39:14,259
sleigh support and that are two supports

743
00:39:12,130 --> 00:39:17,440
as well and we just do some mapping

744
00:39:14,260 --> 00:39:19,600
between our the currently loaded or to

745
00:39:17,440 --> 00:39:23,020
plug in for the architecture and get

746
00:39:19,600 --> 00:39:25,150
wrong one and if you want to see what's

747
00:39:23,020 --> 00:39:28,330
supported right now but by the the

748
00:39:25,150 --> 00:39:30,400
compiler can just type in PD GS and this

749
00:39:28,330 --> 00:39:32,020
is the list that is bundled right now

750
00:39:30,400 --> 00:39:35,710
but you can use basically anything that

751
00:39:32,020 --> 00:39:41,020
is supported by sleigh so this is this

752
00:39:35,710 --> 00:39:43,330
is the list if there is some some issue

753
00:39:41,020 --> 00:39:45,400
with the mapping so for example you at

754
00:39:43,330 --> 00:39:48,220
your own architecture and we don't have

755
00:39:45,400 --> 00:39:54,940
the mapping yet then you can we have

756
00:39:48,220 --> 00:39:56,770
this R to get your variable they can set

757
00:39:54,940 --> 00:39:58,990
to anything so I just took this or

758
00:39:56,770 --> 00:40:01,030
whatever and then you can manually set

759
00:39:58,990 --> 00:40:04,080
this architecture so it basically can

760
00:40:01,030 --> 00:40:04,080
support anything you want

761
00:40:06,299 --> 00:40:10,140
any other questions

762
00:40:12,840 --> 00:40:17,210
okay then thank you very much

