1
00:00:00,060 --> 00:00:06,000
can everyone hear me okay yep

2
00:00:03,120 --> 00:00:08,219
so hey everyone thanks for inviting me

3
00:00:06,000 --> 00:00:10,410
to be here first time at Arctic on first

4
00:00:08,220 --> 00:00:11,969
time speaking so thank you to everyone

5
00:00:10,410 --> 00:00:13,110
organizing the conference already even

6
00:00:11,969 --> 00:00:16,560
with the trainings this has been awesome

7
00:00:13,110 --> 00:00:18,750
so yeah this was gonna be like a 20

8
00:00:16,560 --> 00:00:20,009
minute presentation and with all of the

9
00:00:18,750 --> 00:00:22,410
movement and stuff we're gonna try and

10
00:00:20,010 --> 00:00:23,609
speak a little bit slower I was trying

11
00:00:22,410 --> 00:00:25,680
desperately to get as much information

12
00:00:23,609 --> 00:00:27,510
in and speak really fast so I could tell

13
00:00:25,680 --> 00:00:30,929
you a lot of stuff but and now I can

14
00:00:27,510 --> 00:00:34,079
slow down and speak slowly so yeah today

15
00:00:30,929 --> 00:00:36,899
we're gonna look at using r2 and r2

16
00:00:34,079 --> 00:00:39,000
frida to analyze some protected iOS apps

17
00:00:36,899 --> 00:00:42,059
and I'm kind of speaking about a really

18
00:00:39,000 --> 00:00:43,769
narrow concept not everything to do with

19
00:00:42,059 --> 00:00:45,329
protected iOS apps I'm not really

20
00:00:43,770 --> 00:00:47,280
delving into obfuscation and things like

21
00:00:45,329 --> 00:00:50,430
that but at least showing you something

22
00:00:47,280 --> 00:00:52,949
that is not new but isn't really that

23
00:00:50,430 --> 00:00:54,660
well documented and some people ask me

24
00:00:52,949 --> 00:00:56,339
this question a lot and when they're

25
00:00:54,660 --> 00:01:00,718
looking at apps so I figured it would be

26
00:00:56,340 --> 00:01:03,210
nice to share it with you so the idea is

27
00:01:00,719 --> 00:01:04,680
basically like me a few years ago I

28
00:01:03,210 --> 00:01:07,140
don't know how to drink from the glass

29
00:01:04,680 --> 00:01:08,880
and use r2 and r2 frida or hookah

30
00:01:07,140 --> 00:01:11,220
Cisco's or anything like that so I

31
00:01:08,880 --> 00:01:13,080
figured rather than just figure it out

32
00:01:11,220 --> 00:01:15,298
and keep it to myself now maybe I can

33
00:01:13,080 --> 00:01:16,740
share some information and help you so

34
00:01:15,299 --> 00:01:18,060
this is kind of like a little bit of a

35
00:01:16,740 --> 00:01:20,009
journey so I'm just gonna talk a little

36
00:01:18,060 --> 00:01:23,220
bit about how this was happening before

37
00:01:20,009 --> 00:01:25,189
with substrate and you know arm 32 and

38
00:01:23,220 --> 00:01:27,570
how we were doing things in the past and

39
00:01:25,189 --> 00:01:30,029
you know writing things down on pencil

40
00:01:27,570 --> 00:01:32,189
and paper and you know making mistakes

41
00:01:30,030 --> 00:01:34,680
with addresses and messing the the

42
00:01:32,189 --> 00:01:36,240
application up so yeah basically like a

43
00:01:34,680 --> 00:01:37,590
journey from being a total idiot to

44
00:01:36,240 --> 00:01:42,929
slightly less of an idiot

45
00:01:37,590 --> 00:01:45,240
so that's the idea right so yeah mainly

46
00:01:42,930 --> 00:01:46,710
we're going to talk about 64-bit iOS but

47
00:01:45,240 --> 00:01:49,079
as I said there is a little bit towards

48
00:01:46,710 --> 00:01:52,320
the beginning where we talk about arm 32

49
00:01:49,079 --> 00:01:53,369
and predominantly other than maybe like

50
00:01:52,320 --> 00:01:54,710
two slides I'm going to talk about

51
00:01:53,369 --> 00:01:58,070
Cisco's

52
00:01:54,710 --> 00:02:02,189
so is everyone aware of how Cisco's work

53
00:01:58,070 --> 00:02:04,350
anyone who's not familiar okay good so

54
00:02:02,189 --> 00:02:06,508
yeah I mean on iOS they're no different

55
00:02:04,350 --> 00:02:08,329
than other platforms but what's

56
00:02:06,509 --> 00:02:10,649
happening is of applications will use

57
00:02:08,330 --> 00:02:12,480
inline assembly to invoke system calls

58
00:02:10,649 --> 00:02:13,769
to circumvent the standard library so

59
00:02:12,480 --> 00:02:15,720
that when we're using

60
00:02:13,769 --> 00:02:18,329
to try and intercept various library

61
00:02:15,720 --> 00:02:21,000
calls then we we don't get to see what

62
00:02:18,329 --> 00:02:22,290
the apps doing so furthermore we're

63
00:02:21,000 --> 00:02:24,209
gonna talk a little bit about automation

64
00:02:22,290 --> 00:02:25,798
right so using our two pipe and maybe

65
00:02:24,209 --> 00:02:28,260
even some octave 3d plugins towards the

66
00:02:25,799 --> 00:02:30,090
end so that you can do this stuff faster

67
00:02:28,260 --> 00:02:32,578
without actually having to spend a lot

68
00:02:30,090 --> 00:02:34,110
of time manually the other thing is

69
00:02:32,579 --> 00:02:35,819
probably most of this applies to Android

70
00:02:34,110 --> 00:02:37,860
but the caveat is I don't do anything

71
00:02:35,819 --> 00:02:40,708
with Android so the native layer like

72
00:02:37,860 --> 00:02:42,959
there's a lot of similarities but yeah I

73
00:02:40,709 --> 00:02:44,819
mean geo speaking later he does way more

74
00:02:42,959 --> 00:02:46,950
Android than I am so go see him he's

75
00:02:44,819 --> 00:02:47,819
more of an expert so some of the reason

76
00:02:46,950 --> 00:02:49,738
why we're doing this stuff obviously

77
00:02:47,819 --> 00:02:51,480
like all of you we do this for fun or

78
00:02:49,739 --> 00:02:53,220
sometimes we're paid or sometimes you

79
00:02:51,480 --> 00:02:55,980
read you of Annie's blog and get jealous

80
00:02:53,220 --> 00:02:58,650
and want to learn like him so go see his

81
00:02:55,980 --> 00:02:59,849
talk and yeah basically just finding

82
00:02:58,650 --> 00:03:01,829
this stuff takes way too long and

83
00:02:59,849 --> 00:03:03,929
bypassing it can take even longer and

84
00:03:01,829 --> 00:03:06,150
it's just a pain in the ass so if we can

85
00:03:03,930 --> 00:03:07,379
use some automation then we can we can

86
00:03:06,150 --> 00:03:12,030
actually get to the more interesting

87
00:03:07,379 --> 00:03:13,709
stuff quicker so yeah other than Cisco's

88
00:03:12,030 --> 00:03:16,470
some examples of things that are

89
00:03:13,709 --> 00:03:17,970
typically happening in apps usually they

90
00:03:16,470 --> 00:03:19,319
try and stop us from instrument in the

91
00:03:17,970 --> 00:03:21,209
app in a number of different ways so

92
00:03:19,319 --> 00:03:22,738
looking for things on the filesystem is

93
00:03:21,209 --> 00:03:24,329
the obvious one so on jailbroken devices

94
00:03:22,739 --> 00:03:26,069
or devices where we have things like

95
00:03:24,329 --> 00:03:28,440
Freda president or substrate present

96
00:03:26,069 --> 00:03:30,149
there is you know residual artifacts

97
00:03:28,440 --> 00:03:32,129
that are there on the filesystem that

98
00:03:30,150 --> 00:03:34,139
they can pick up and obviously they're

99
00:03:32,129 --> 00:03:38,608
doing this with common API is like stat

100
00:03:34,139 --> 00:03:40,440
open and access and so on you can also

101
00:03:38,609 --> 00:03:42,389
look for these things in memory so

102
00:03:40,440 --> 00:03:44,010
really common again like loop over all

103
00:03:42,389 --> 00:03:46,199
of the libraries that are loaded in the

104
00:03:44,010 --> 00:03:48,530
process space look for the name Freda

105
00:03:46,199 --> 00:03:51,449
really basic check but many people do it

106
00:03:48,530 --> 00:03:53,849
and then you know depending on which

107
00:03:51,449 --> 00:03:55,410
platform and how you're using Freda and

108
00:03:53,849 --> 00:03:57,569
it's not always going to appear there so

109
00:03:55,410 --> 00:04:00,120
that there are some tricks to identify

110
00:03:57,569 --> 00:04:03,108
the the Freda pass in the memory regions

111
00:04:00,120 --> 00:04:07,019
without actually using the D while the

112
00:04:03,109 --> 00:04:09,780
image iterations so the other thing you

113
00:04:07,019 --> 00:04:11,669
can do is you can be looking for

114
00:04:09,780 --> 00:04:14,190
artifacts or evidence of Frida across

115
00:04:11,669 --> 00:04:15,930
memory so strings or some kind of

116
00:04:14,190 --> 00:04:17,310
fingerprinting of Frida our substrate

117
00:04:15,930 --> 00:04:19,228
that you might be looking for so again

118
00:04:17,310 --> 00:04:23,490
this is really common in in various

119
00:04:19,228 --> 00:04:25,320
applications and then there's this thing

120
00:04:23,490 --> 00:04:26,320
which some many people in the room

121
00:04:25,320 --> 00:04:29,380
probably are familiar

122
00:04:26,320 --> 00:04:34,060
and many people might not be so on Mac

123
00:04:29,380 --> 00:04:36,040
OS and I actually have this flag in the

124
00:04:34,060 --> 00:04:39,130
or environment variable where you can

125
00:04:36,040 --> 00:04:40,630
use it to preload libraries so it's

126
00:04:39,130 --> 00:04:42,880
called D while the insert libraries and

127
00:04:40,630 --> 00:04:45,310
in the linker they have some code that

128
00:04:42,880 --> 00:04:46,630
says if you have a segment and section

129
00:04:45,310 --> 00:04:48,820
with the name underscore underscore

130
00:04:46,630 --> 00:04:51,159
restrict then you ignore the environment

131
00:04:48,820 --> 00:04:53,680
variable so I'll show you an example of

132
00:04:51,160 --> 00:04:54,790
this on Mac in a second but yeah the

133
00:04:53,680 --> 00:04:57,010
first time I was looking at this was

134
00:04:54,790 --> 00:04:58,930
even pre Frieda and even in my

135
00:04:57,010 --> 00:05:00,670
constructor of my hoots the basic log

136
00:04:58,930 --> 00:05:01,840
statements weren't even there and you

137
00:05:00,670 --> 00:05:03,070
know I was pulling my hair out like I

138
00:05:01,840 --> 00:05:05,469
mean this should work if that's nothing

139
00:05:03,070 --> 00:05:07,690
complicated but my libraries weren't

140
00:05:05,470 --> 00:05:09,010
even being injected so yeah I lost way

141
00:05:07,690 --> 00:05:10,360
too much time on that one but it's

142
00:05:09,010 --> 00:05:12,940
really simple now that you read about it

143
00:05:10,360 --> 00:05:16,390
so if you want to do it you can compile

144
00:05:12,940 --> 00:05:17,770
with clang or GCC or whatever and add

145
00:05:16,390 --> 00:05:19,270
the sections they don't need to contain

146
00:05:17,770 --> 00:05:21,789
anything they can be empty but in this

147
00:05:19,270 --> 00:05:23,830
case using our two we just print the

148
00:05:21,790 --> 00:05:28,240
bicep in the section and you can see

149
00:05:23,830 --> 00:05:30,580
says hello article 2019 and then the

150
00:05:28,240 --> 00:05:32,740
last thing is which again is very common

151
00:05:30,580 --> 00:05:34,620
many of the the products that the Ross

152
00:05:32,740 --> 00:05:38,080
products and stuff they're looking for

153
00:05:34,620 --> 00:05:39,940
identification of tampering to memory so

154
00:05:38,080 --> 00:05:42,210
looking for any kind of alterations to

155
00:05:39,940 --> 00:05:44,980
the code so check something of the code

156
00:05:42,210 --> 00:05:46,780
sometimes running in other threads they

157
00:05:44,980 --> 00:05:48,100
look for evidence of repackaging in case

158
00:05:46,780 --> 00:05:50,979
maybe we're not even using jailbroken

159
00:05:48,100 --> 00:05:53,590
devices and then looking for certain

160
00:05:50,980 --> 00:05:54,880
trampolines inside target functions so

161
00:05:53,590 --> 00:05:57,780
they can be in the standard library or

162
00:05:54,880 --> 00:06:02,770
even in in their own functions as well

163
00:05:57,780 --> 00:06:05,039
so as an example of the restrict section

164
00:06:02,770 --> 00:06:07,570
you know if you look at various

165
00:06:05,040 --> 00:06:09,820
applications on both iOS and Mac you'll

166
00:06:07,570 --> 00:06:12,159
find this so here we have iTunes on the

167
00:06:09,820 --> 00:06:15,120
Mac and if we print out with our tooth

168
00:06:12,160 --> 00:06:18,060
with Robin to get the all of the

169
00:06:15,120 --> 00:06:20,950
sections we can see here we have

170
00:06:18,060 --> 00:06:22,480
restrict and if we try and use Frieda

171
00:06:20,950 --> 00:06:23,860
with the process it tells us that we can

172
00:06:22,480 --> 00:06:25,720
and if you go ahead and remove that

173
00:06:23,860 --> 00:06:28,210
section then you can attach and so on

174
00:06:25,720 --> 00:06:29,920
yeah really basic ones you know about it

175
00:06:28,210 --> 00:06:32,710
but yeah if you don't know about it can

176
00:06:29,920 --> 00:06:34,900
cause a lot of pain so I'm gonna try not

177
00:06:32,710 --> 00:06:36,159
to offend although here I'm gonna try

178
00:06:34,900 --> 00:06:37,810
and talk a little bit about how this

179
00:06:36,160 --> 00:06:40,030
works but not specific to freedom but

180
00:06:37,810 --> 00:06:40,520
also with substrate so the basic idea

181
00:06:40,030 --> 00:06:41,929
again

182
00:06:40,520 --> 00:06:44,599
many people in the room will be familiar

183
00:06:41,930 --> 00:06:46,940
but under regular circumstances your

184
00:06:44,599 --> 00:06:49,430
application calls functional in in the

185
00:06:46,940 --> 00:06:52,400
standard library let's say access the

186
00:06:49,430 --> 00:06:54,949
function runs does a wiggle and then

187
00:06:52,400 --> 00:06:57,940
execution comes back for answers fairly

188
00:06:54,949 --> 00:07:00,229
fairly simple so if we use some kind of

189
00:06:57,940 --> 00:07:02,990
hooking tool that uses trampolines then

190
00:07:00,229 --> 00:07:04,789
what happens is the diagram might look a

191
00:07:02,990 --> 00:07:07,400
little bit weird but we have some kind

192
00:07:04,789 --> 00:07:09,349
of replacement of some instructions in

193
00:07:07,400 --> 00:07:11,239
the target function which is going to

194
00:07:09,349 --> 00:07:14,389
hijack execution and run some

195
00:07:11,240 --> 00:07:16,340
replacement code so when we when the

196
00:07:14,389 --> 00:07:18,560
application now calls the the function

197
00:07:16,340 --> 00:07:20,659
in the standard library executions pass

198
00:07:18,560 --> 00:07:22,610
to us and then optionally we can either

199
00:07:20,659 --> 00:07:24,349
we can replace the functionality and

200
00:07:22,610 --> 00:07:25,699
never call the original or we might you

201
00:07:24,349 --> 00:07:27,680
know call the original if we don't want

202
00:07:25,699 --> 00:07:30,909
to try and re-implement whatever it was

203
00:07:27,680 --> 00:07:33,349
that they did and then funfun finally a

204
00:07:30,909 --> 00:07:35,539
execution goes back to the app so really

205
00:07:33,349 --> 00:07:38,479
like hand-wavy sort a basic example of

206
00:07:35,539 --> 00:07:40,580
how this stuff works but why is that

207
00:07:38,479 --> 00:07:43,250
interesting well because many

208
00:07:40,580 --> 00:07:46,008
applications actually detect this so as

209
00:07:43,250 --> 00:07:47,240
an example with RT Freda you can ignore

210
00:07:46,009 --> 00:07:49,909
the first command now you don't actually

211
00:07:47,240 --> 00:07:51,590
need to import the information anymore I

212
00:07:49,909 --> 00:07:53,330
think pancake last week made some

213
00:07:51,590 --> 00:07:55,638
changes to automatically do this which

214
00:07:53,330 --> 00:07:57,859
is awesome so if we print out two

215
00:07:55,639 --> 00:08:01,849
instructions at the address of open you

216
00:07:57,860 --> 00:08:03,759
can see we have some arm 64 store a pair

217
00:08:01,849 --> 00:08:06,259
of registers and some move instruction

218
00:08:03,759 --> 00:08:08,960
and if you use the backslash di one

219
00:08:06,259 --> 00:08:11,360
command in R two frite you replace the

220
00:08:08,960 --> 00:08:13,638
return value of the of the function so

221
00:08:11,360 --> 00:08:16,360
in this case we've we want to alter the

222
00:08:13,639 --> 00:08:18,919
the function to return one and it uses

223
00:08:16,360 --> 00:08:21,319
Interceptor underneath and now if we

224
00:08:18,919 --> 00:08:24,500
print out the first two instructions we

225
00:08:21,319 --> 00:08:27,380
can see these have changed right so in

226
00:08:24,500 --> 00:08:30,229
in the red circle you can see some up

227
00:08:27,380 --> 00:08:32,659
codes and if this has been detected even

228
00:08:30,229 --> 00:08:35,718
substrate and for a while and as I say

229
00:08:32,659 --> 00:08:38,088
many products do this and here from even

230
00:08:35,719 --> 00:08:40,190
from a white paper in 2016 from Vincent

231
00:08:38,089 --> 00:08:43,399
tan he shows like a really basic example

232
00:08:40,190 --> 00:08:45,170
of identification of these up codes so

233
00:08:43,399 --> 00:08:46,820
you pass a function pointer and check

234
00:08:45,170 --> 00:08:48,319
for the up codes and if you find them

235
00:08:46,820 --> 00:08:52,420
then you know someone's tampering with

236
00:08:48,320 --> 00:08:56,660
it so again very common practice now

237
00:08:52,420 --> 00:08:59,240
so much of Lib system is exposed file

238
00:08:56,660 --> 00:09:01,120
system calls obviously so typical

239
00:08:59,240 --> 00:09:03,530
interaction as a developer you make a

240
00:09:01,120 --> 00:09:05,210
function call under standard library and

241
00:09:03,530 --> 00:09:08,120
standard library invokes a system call

242
00:09:05,210 --> 00:09:09,680
and on iOS there is in excess of 400 I

243
00:09:08,120 --> 00:09:11,000
think I'm not a Windows guy but I was

244
00:09:09,680 --> 00:09:13,489
reading there's like in excess of a

245
00:09:11,000 --> 00:09:15,020
thousand so different platforms

246
00:09:13,490 --> 00:09:17,540
obviously operate in different ways but

247
00:09:15,020 --> 00:09:19,310
you know here the numbers exceed I think

248
00:09:17,540 --> 00:09:22,010
even 500 but they're around

249
00:09:19,310 --> 00:09:23,780
I think 400 unique but you can print

250
00:09:22,010 --> 00:09:25,730
these pretty easily so there's tools out

251
00:09:23,780 --> 00:09:27,290
there like Joker which is another open

252
00:09:25,730 --> 00:09:28,820
source where you can print out the

253
00:09:27,290 --> 00:09:31,880
system call table if you pass it in iOS

254
00:09:28,820 --> 00:09:35,480
firmware and thanks to mr. machete who's

255
00:09:31,880 --> 00:09:37,160
somewhere here I think r2 can also do

256
00:09:35,480 --> 00:09:40,040
this so now if you if you give are to a

257
00:09:37,160 --> 00:09:43,189
decompressed kernel image you can go

258
00:09:40,040 --> 00:09:44,449
ahead and analyze it as well and do many

259
00:09:43,190 --> 00:09:48,400
more things but you can get the system

260
00:09:44,450 --> 00:09:51,430
called a table or the trap table as well

261
00:09:48,400 --> 00:09:53,780
so r2 also has some of this built-in via

262
00:09:51,430 --> 00:09:56,000
some internal commands so you can use

263
00:09:53,780 --> 00:09:58,040
like the a s commands for accessing

264
00:09:56,000 --> 00:10:00,740
information about the system calls so

265
00:09:58,040 --> 00:10:04,099
you can do like both lookups by name and

266
00:10:00,740 --> 00:10:06,110
the inverse by by number so you can for

267
00:10:04,100 --> 00:10:07,550
example like a P trace or read or socket

268
00:10:06,110 --> 00:10:10,100
or whatever is that you're looking for

269
00:10:07,550 --> 00:10:16,400
or if you want you know a list of these

270
00:10:10,100 --> 00:10:21,700
you can use ASL as well so how this

271
00:10:16,400 --> 00:10:24,949
works on iOS on iOS the instruction for

272
00:10:21,700 --> 00:10:26,450
supervisor calls is as we see oh it's 84

273
00:10:24,950 --> 00:10:29,690
system calls and on Android you think

274
00:10:26,450 --> 00:10:31,280
SBC 0 and it falls likes that follows

275
00:10:29,690 --> 00:10:34,220
the standard like calling convention for

276
00:10:31,280 --> 00:10:35,839
functions so X 0 through X 7 is gonna

277
00:10:34,220 --> 00:10:38,120
hold your first arguments and then

278
00:10:35,840 --> 00:10:39,920
thereafter the arguments will be on the

279
00:10:38,120 --> 00:10:41,360
stack but what we really care about is

280
00:10:39,920 --> 00:10:43,550
that the system call number that's being

281
00:10:41,360 --> 00:10:45,230
used there's gonna be in X 16 register

282
00:10:43,550 --> 00:10:46,459
and again I'm not an Android guy so it

283
00:10:45,230 --> 00:10:49,130
could be wrong but I think it's X 12 or

284
00:10:46,460 --> 00:10:51,320
something like that so basically if we

285
00:10:49,130 --> 00:10:53,000
have this call here to socket what would

286
00:10:51,320 --> 00:10:56,390
happen you know if we wanted to call

287
00:10:53,000 --> 00:10:59,660
this we would have our constants they

288
00:10:56,390 --> 00:11:01,760
can go in the registers and we can look

289
00:10:59,660 --> 00:11:03,439
up with our to the system call number

290
00:11:01,760 --> 00:11:06,259
for socket which in this case in

291
00:11:03,440 --> 00:11:08,749
hexadecimal is 6 1 and then if we go

292
00:11:06,259 --> 00:11:12,439
and called the instruction then we can

293
00:11:08,749 --> 00:11:13,910
you know we can make that happen so this

294
00:11:12,439 --> 00:11:16,160
is the way it works and knowing that we

295
00:11:13,910 --> 00:11:18,699
can start to build some tooling to to

296
00:11:16,160 --> 00:11:21,069
find out what's happening and identify

297
00:11:18,699 --> 00:11:23,599
what the applications are checking for

298
00:11:21,069 --> 00:11:25,910
and the trouble was in the beginning the

299
00:11:23,600 --> 00:11:28,459
way I was doing this was analyzing the

300
00:11:25,910 --> 00:11:30,079
application and like hopper and you know

301
00:11:28,459 --> 00:11:32,748
going through finding these things by

302
00:11:30,079 --> 00:11:34,878
searching for the mnemonics one by one

303
00:11:32,749 --> 00:11:37,039
and writing down the address and I'm 32

304
00:11:34,879 --> 00:11:39,019
and putting on some paper and then

305
00:11:37,039 --> 00:11:40,669
putting into some substrate code and you

306
00:11:39,019 --> 00:11:42,499
had to compile it and then the

307
00:11:40,669 --> 00:11:44,478
application crashed because you made an

308
00:11:42,499 --> 00:11:45,559
error with one of the addresses or one

309
00:11:44,479 --> 00:11:46,939
of the addresses that was actually

310
00:11:45,559 --> 00:11:48,919
Petrus he put it in the socket

311
00:11:46,939 --> 00:11:51,919
you know array so you hooked it like a

312
00:11:48,919 --> 00:11:53,779
socket call so this was a real nightmare

313
00:11:51,919 --> 00:11:55,819
but it was all I knew and I was still

314
00:11:53,779 --> 00:11:58,699
learning this stuff so it was really

315
00:11:55,819 --> 00:12:00,919
painful so back in the beginning had

316
00:11:58,699 --> 00:12:03,319
some really basic hopper scripts to just

317
00:12:00,919 --> 00:12:06,829
go through and find the SVC oxa T's

318
00:12:03,319 --> 00:12:08,689
print out the addresses but this was

319
00:12:06,829 --> 00:12:10,309
like five years ago and even Freda has

320
00:12:08,689 --> 00:12:13,459
been around longer but I wasn't really

321
00:12:10,309 --> 00:12:15,139
aware or using it but the trouble is

322
00:12:13,459 --> 00:12:16,488
this is just I have no patience for this

323
00:12:15,139 --> 00:12:18,199
now that I know like the better way of

324
00:12:16,489 --> 00:12:21,589
doing I'm like I don't even like to

325
00:12:18,199 --> 00:12:23,689
admit I was doing it this way so the

326
00:12:21,589 --> 00:12:25,309
trouble is like in that context I was

327
00:12:23,689 --> 00:12:27,469
printing out like a list of addresses

328
00:12:25,309 --> 00:12:30,019
with no information I have no idea what

329
00:12:27,470 --> 00:12:33,799
the system calls were it was just a nar

330
00:12:30,019 --> 00:12:36,529
betray list of offsets so I was going

331
00:12:33,799 --> 00:12:38,869
again by each one and tools like hopper

332
00:12:36,529 --> 00:12:40,850
or I done just looking for move

333
00:12:38,869 --> 00:12:41,809
instructions to see the value going in

334
00:12:40,850 --> 00:12:43,669
and then obviously as apps are

335
00:12:41,809 --> 00:12:47,059
obfuscated you can't really see that too

336
00:12:43,669 --> 00:12:48,649
easily so you know this was a bit of a

337
00:12:47,059 --> 00:12:51,019
problem but then we figured like yeah we

338
00:12:48,649 --> 00:12:52,549
could use substrate to hook these right

339
00:12:51,019 --> 00:12:54,230
so anyone who's written substrate hooks

340
00:12:52,549 --> 00:12:56,600
I figured like yeah we can just go ahead

341
00:12:54,230 --> 00:12:58,220
and do this but it doesn't really

342
00:12:56,600 --> 00:13:01,009
support out of the box

343
00:12:58,220 --> 00:13:02,569
hooking of like just an off set or an

344
00:13:01,009 --> 00:13:03,819
instruction you have to have a valid

345
00:13:02,569 --> 00:13:07,368
function at that address

346
00:13:03,819 --> 00:13:09,919
so some people I was working with they

347
00:13:07,369 --> 00:13:12,409
came up with a sort of hacky well a very

348
00:13:09,919 --> 00:13:14,839
happy workaround but basically just

349
00:13:12,409 --> 00:13:17,809
using the MS fook function of substrate

350
00:13:14,839 --> 00:13:19,889
but then changing some instructions to

351
00:13:17,809 --> 00:13:23,339
make it work and so

352
00:13:19,889 --> 00:13:25,889
again I'm 32 but not armed 64 so this

353
00:13:23,339 --> 00:13:28,350
was again allowed us to now hook all of

354
00:13:25,889 --> 00:13:29,459
those and replace the functionality so

355
00:13:28,350 --> 00:13:31,549
we could now see everything they were

356
00:13:29,459 --> 00:13:34,018
doing with access and socket and so on

357
00:13:31,549 --> 00:13:35,850
and then we ended up having like huge

358
00:13:34,019 --> 00:13:38,009
sets of hooks for all of the standard

359
00:13:35,850 --> 00:13:40,109
library all of the things that we know

360
00:13:38,009 --> 00:13:42,989
from do break detections or Annie

361
00:13:40,109 --> 00:13:45,119
tampering and then we had like these

362
00:13:42,989 --> 00:13:47,689
arrays again which I was popular in

363
00:13:45,119 --> 00:13:49,829
manually for Pete Ray's clothes reads

364
00:13:47,689 --> 00:13:51,660
and then we were looping over those and

365
00:13:49,829 --> 00:13:55,199
calling the patching all of them one by

366
00:13:51,660 --> 00:13:57,719
one so this was fine like when

367
00:13:55,199 --> 00:13:59,309
applications had like you know 10 to 50

368
00:13:57,720 --> 00:14:00,899
Cisco's like going through manually

369
00:13:59,309 --> 00:14:02,939
doing it one by one it's like only a

370
00:14:00,899 --> 00:14:05,429
small small effort but still too much

371
00:14:02,939 --> 00:14:07,410
effort but apps now have like thousands

372
00:14:05,429 --> 00:14:09,689
like so many have like several hundred

373
00:14:07,410 --> 00:14:11,399
or even in excess of 2,000 there

374
00:14:09,689 --> 00:14:15,569
depending on what kind of product is in

375
00:14:11,399 --> 00:14:17,399
use or how paranoid they are and so I

376
00:14:15,569 --> 00:14:18,118
figured like okay if I could do this at

377
00:14:17,399 --> 00:14:19,829
runtime

378
00:14:18,119 --> 00:14:21,959
even in substrate if I could figure out

379
00:14:19,829 --> 00:14:24,029
the system call number at runtime that I

380
00:14:21,959 --> 00:14:25,559
don't need to manually figure out which

381
00:14:24,029 --> 00:14:27,809
ones which I don't need to put them into

382
00:14:25,559 --> 00:14:31,439
different arrays and do all this clumsy

383
00:14:27,809 --> 00:14:34,738
stuff I could get it at runtime trouble

384
00:14:31,439 --> 00:14:37,469
is if you remember what happens when we

385
00:14:34,739 --> 00:14:39,869
replace a function with interceptor the

386
00:14:37,470 --> 00:14:42,929
the register that holds the system call

387
00:14:39,869 --> 00:14:44,699
number is used during that process so

388
00:14:42,929 --> 00:14:48,029
the the system call number is actually

389
00:14:44,699 --> 00:14:49,169
no longer there so we have to do it in a

390
00:14:48,029 --> 00:14:50,389
couple of different ways so there's a

391
00:14:49,169 --> 00:14:52,499
number of ways you can get around this

392
00:14:50,389 --> 00:14:54,389
and it's the same for substrate and

393
00:14:52,499 --> 00:14:57,119
freida and on iOS I think on Android

394
00:14:54,389 --> 00:14:58,709
it's actually okay so I started getting

395
00:14:57,119 --> 00:15:00,389
all crazy again late at night thinking

396
00:14:58,709 --> 00:15:02,399
yeah I'll write some hopper script that

397
00:15:00,389 --> 00:15:03,809
generates a debugger script that you

398
00:15:02,399 --> 00:15:06,059
know breakpoints and prints out the

399
00:15:03,809 --> 00:15:08,910
value at runtime and then I can put it

400
00:15:06,059 --> 00:15:10,829
into Frida script and eventually I ended

401
00:15:08,910 --> 00:15:12,238
up just changing some Frida source so

402
00:15:10,829 --> 00:15:14,128
don't use this because it broke a bunch

403
00:15:12,239 --> 00:15:16,439
of stuff it was accepted and then

404
00:15:14,129 --> 00:15:19,410
immediately discarded because my ideas

405
00:15:16,439 --> 00:15:22,289
are crazy so basically I just changed

406
00:15:19,410 --> 00:15:24,539
all of the usage of X 16 to X 18 since

407
00:15:22,289 --> 00:15:28,189
it's meant to be like an unused register

408
00:15:24,539 --> 00:15:30,379
but me is used it turns out

409
00:15:28,190 --> 00:15:33,170
so we have some other ideas we were

410
00:15:30,379 --> 00:15:35,300
speaking just a second ago there and mr.

411
00:15:33,170 --> 00:15:37,969
mr. machete about other ideas we could

412
00:15:35,300 --> 00:15:39,290
maybe do that which will I guess talk

413
00:15:37,970 --> 00:15:40,790
about after the conference but yeah

414
00:15:39,290 --> 00:15:42,290
there there are other ways of doing it

415
00:15:40,790 --> 00:15:45,079
you can use soccer for example as we'll

416
00:15:42,290 --> 00:15:46,490
see but then the other problem is like I

417
00:15:45,079 --> 00:15:48,560
don't have time for all of this like I

418
00:15:46,490 --> 00:15:50,689
don't I don't want to install an app run

419
00:15:48,560 --> 00:15:52,729
a tracer at runtime and even some of the

420
00:15:50,689 --> 00:15:54,349
system girls might not even run so I

421
00:15:52,730 --> 00:15:56,079
figured like okay let's go back to the

422
00:15:54,350 --> 00:15:59,569
drawing board do this statically and

423
00:15:56,079 --> 00:16:02,689
colleague at the time I do he was our to

424
00:15:59,569 --> 00:16:04,399
Khan and he came back and he was doing

425
00:16:02,689 --> 00:16:07,069
the CTF internally and I never use our -

426
00:16:04,399 --> 00:16:08,620
up until just after last hour - Khan so

427
00:16:07,069 --> 00:16:11,628
I was like okay this looks like way more

428
00:16:08,620 --> 00:16:14,269
extensible and and pluggable for what I

429
00:16:11,629 --> 00:16:15,680
want to do so I figured that if I can

430
00:16:14,269 --> 00:16:17,120
scan the app statically and find out

431
00:16:15,680 --> 00:16:18,189
most of the stuff then that would be

432
00:16:17,120 --> 00:16:21,139
ideal

433
00:16:18,189 --> 00:16:22,730
so yeah I'm still learning so again many

434
00:16:21,139 --> 00:16:24,589
people in the room use r2 a lot more

435
00:16:22,730 --> 00:16:27,230
than I do but yeah you can find the

436
00:16:24,589 --> 00:16:28,550
system calls in a binary with /a s it

437
00:16:27,230 --> 00:16:31,819
will tell you which system call it is

438
00:16:28,550 --> 00:16:34,969
which is handy and we can also use the

439
00:16:31,819 --> 00:16:36,860
slash eighty command to give some

440
00:16:34,970 --> 00:16:37,970
instruction types and get information

441
00:16:36,860 --> 00:16:40,639
there as well but if you look at the

442
00:16:37,970 --> 00:16:43,610
count there is some variance right so we

443
00:16:40,639 --> 00:16:46,130
can see there's a little bit of context

444
00:16:43,610 --> 00:16:47,600
when we use slash yes but when we use

445
00:16:46,130 --> 00:16:48,889
slash eighty we get more but we don't

446
00:16:47,600 --> 00:16:50,509
obviously know which system call it is

447
00:16:48,889 --> 00:16:53,120
the other thing is I don't really want

448
00:16:50,509 --> 00:16:54,589
to analyze the whole binary because

449
00:16:53,120 --> 00:16:57,410
since in large obfuscated binaries it

450
00:16:54,589 --> 00:16:58,730
takes too long so and the last thing is

451
00:16:57,410 --> 00:16:59,959
towards the end when we do this at

452
00:16:58,730 --> 00:17:01,670
runtime and we don't really need to look

453
00:16:59,959 --> 00:17:03,469
by mnemonics we can look for the op

454
00:17:01,670 --> 00:17:06,289
codes which as you can see with the

455
00:17:03,470 --> 00:17:08,510
timing is significantly faster right so

456
00:17:06,289 --> 00:17:10,129
this was just in a small application but

457
00:17:08,510 --> 00:17:12,250
in bigger applications it can take like

458
00:17:10,130 --> 00:17:15,230
15-20 minutes when it's searching so

459
00:17:12,250 --> 00:17:17,990
obviously doing it in you know a smaller

460
00:17:15,230 --> 00:17:20,360
factor of rounds is much much more

461
00:17:17,990 --> 00:17:21,829
appealing so I started to build this

462
00:17:20,359 --> 00:17:24,109
tooling based on our to pipe which

463
00:17:21,829 --> 00:17:25,908
hasn't seen the light of day yet because

464
00:17:24,109 --> 00:17:28,428
it's really messy and has missing

465
00:17:25,909 --> 00:17:30,620
features but basically you can give it

466
00:17:28,429 --> 00:17:32,900
an iOS app it will go through look at

467
00:17:30,620 --> 00:17:35,658
the main binary figure out all of the

468
00:17:32,900 --> 00:17:37,640
linked libraries and basically

469
00:17:35,659 --> 00:17:39,500
recursively scan them all identify where

470
00:17:37,640 --> 00:17:41,090
all these things are used and for some

471
00:17:39,500 --> 00:17:41,600
stupid reason I decided would be a great

472
00:17:41,090 --> 00:17:45,530
idea to

473
00:17:41,600 --> 00:17:48,830
create an XML output and surf Jason so

474
00:17:45,530 --> 00:17:50,960
I'll show you a quick example I have a

475
00:17:48,830 --> 00:17:53,389
crack mean we scan it with the tool very

476
00:17:50,960 --> 00:17:57,140
fast we're also doing some signature

477
00:17:53,390 --> 00:17:59,299
matching for various products and then

478
00:17:57,140 --> 00:18:02,570
we get like some information so here we

479
00:17:59,299 --> 00:18:04,668
can see there's retrace X access and I

480
00:18:02,570 --> 00:18:06,020
the tool even you can feed that back in

481
00:18:04,669 --> 00:18:07,429
and it automatically hooks them all and

482
00:18:06,020 --> 00:18:08,900
freida all the system calls get hooked

483
00:18:07,429 --> 00:18:11,000
and it traces everything that's

484
00:18:08,900 --> 00:18:13,610
happening so that was like the first

485
00:18:11,000 --> 00:18:16,190
approach that I went down works fine but

486
00:18:13,610 --> 00:18:17,918
again it could be better in obfuscated

487
00:18:16,190 --> 00:18:20,059
apps sometimes I wasn't able to see the

488
00:18:17,919 --> 00:18:21,830
the system call number especially

489
00:18:20,059 --> 00:18:23,570
because I hadn't done the analysis

490
00:18:21,830 --> 00:18:25,309
because again I want to do as fast as

491
00:18:23,570 --> 00:18:27,620
possible so I figured like maybe I'll

492
00:18:25,309 --> 00:18:29,690
use Eisel and Kandra was saying already

493
00:18:27,620 --> 00:18:31,580
don't use IO cash equals true so I'm

494
00:18:29,690 --> 00:18:33,890
gonna have to change this so yeah I'm

495
00:18:31,580 --> 00:18:36,408
still learning but yeah basically we can

496
00:18:33,890 --> 00:18:38,840
use e so we jump back probably more than

497
00:18:36,409 --> 00:18:41,990
is necessary but just seek back and then

498
00:18:38,840 --> 00:18:44,030
set up the emulation and go ahead and

499
00:18:41,990 --> 00:18:45,620
emulate until that point and you can see

500
00:18:44,030 --> 00:18:47,000
here before when we get the system call

501
00:18:45,620 --> 00:18:49,699
number it's nothing and then afterwards

502
00:18:47,000 --> 00:18:52,159
we can see it's SS CTL which is for anti

503
00:18:49,700 --> 00:18:55,159
debug or for many things but probably

504
00:18:52,159 --> 00:18:57,140
front et buggin so we built this in and

505
00:18:55,159 --> 00:18:59,270
looks something like this really bad

506
00:18:57,140 --> 00:19:03,020
Python code as a trend when you look at

507
00:18:59,270 --> 00:19:05,150
my code and basically it works it runs

508
00:19:03,020 --> 00:19:07,629
everything all of my hockey print

509
00:19:05,150 --> 00:19:09,950
statements are now commented out so nice

510
00:19:07,630 --> 00:19:13,250
and the result is we get something like

511
00:19:09,950 --> 00:19:16,429
this so different applets the CTL but we

512
00:19:13,250 --> 00:19:18,799
can now see there was a call to the

513
00:19:16,429 --> 00:19:20,390
system call forget pit and we annotated

514
00:19:18,799 --> 00:19:22,190
to say that we emigrated with ezel so if

515
00:19:20,390 --> 00:19:23,780
we wanted to extend this and use unicorn

516
00:19:22,190 --> 00:19:30,260
or something different then we can do

517
00:19:23,780 --> 00:19:33,168
that as well so yeah moving one step

518
00:19:30,260 --> 00:19:35,600
better we can do this with our T Frieda

519
00:19:33,169 --> 00:19:36,950
and we can also use our T pipe with our

520
00:19:35,600 --> 00:19:38,330
T Frieda which if you were in the

521
00:19:36,950 --> 00:19:39,580
training the other day you would find

522
00:19:38,330 --> 00:19:44,020
out from the last part of the

523
00:19:39,580 --> 00:19:46,129
presentation so again you can ignore the

524
00:19:44,020 --> 00:19:46,520
backslash I asterisk it's no longer

525
00:19:46,130 --> 00:19:49,130
needed

526
00:19:46,520 --> 00:19:50,418
but here we basically want to search for

527
00:19:49,130 --> 00:19:51,710
the main binary because it's a correct

528
00:19:50,419 --> 00:19:54,590
me that I wrote for the training so I

529
00:19:51,710 --> 00:19:55,399
know it's not in any other libraries so

530
00:19:54,590 --> 00:19:57,519
with back

531
00:19:55,399 --> 00:20:00,529
diem we can get the the maps for the

532
00:19:57,519 --> 00:20:03,499
current loaded process and I just want

533
00:20:00,529 --> 00:20:06,109
to filter by an executable region and

534
00:20:03,499 --> 00:20:08,960
then we can seek to that location and

535
00:20:06,109 --> 00:20:11,899
use dot backslash f4 slash which will

536
00:20:08,960 --> 00:20:14,149
set all of the search parameters in the

537
00:20:11,899 --> 00:20:18,408
environment variables of r2 to the

538
00:20:14,149 --> 00:20:21,529
current image that we're currently seek

539
00:20:18,409 --> 00:20:22,729
to so here when we do back slash forward

540
00:20:21,529 --> 00:20:25,059
slash you can see all of the search

541
00:20:22,729 --> 00:20:28,820
parameters are the same boundaries of

542
00:20:25,059 --> 00:20:30,889
the code block and now if we if we want

543
00:20:28,820 --> 00:20:33,678
we can go ahead and use a back slash

544
00:20:30,889 --> 00:20:37,549
four slash X to search for taxpayers and

545
00:20:33,679 --> 00:20:40,909
we can use the assembler functionalities

546
00:20:37,549 --> 00:20:43,399
of r2 to actually even get us the up

547
00:20:40,909 --> 00:20:46,909
codes for the SVC instructions so I mean

548
00:20:43,399 --> 00:20:49,099
not that it's hard to remember the the

549
00:20:46,909 --> 00:20:50,389
up codes but you know if you if like me

550
00:20:49,099 --> 00:20:51,529
you're doing a lot of stuff and you want

551
00:20:50,389 --> 00:20:54,109
to search for different things you can

552
00:20:51,529 --> 00:20:55,429
just chain the commands really nice and

553
00:20:54,109 --> 00:20:58,339
we search only in that region and we

554
00:20:55,429 --> 00:21:00,950
find 63 hits so in challenge one of the

555
00:20:58,339 --> 00:21:03,200
crack knee spoilers in case you want to

556
00:21:00,950 --> 00:21:04,519
do it at home but challenge one is using

557
00:21:03,200 --> 00:21:07,759
the standard library and challenge two

558
00:21:04,519 --> 00:21:13,190
is similar but with system calls so here

559
00:21:07,759 --> 00:21:15,859
we have 63 matches so with that we can

560
00:21:13,190 --> 00:21:17,809
use other commands so for example in our

561
00:21:15,859 --> 00:21:20,960
two frite you can use backslash DTR

562
00:21:17,809 --> 00:21:23,779
which will trace registers a particular

563
00:21:20,960 --> 00:21:25,580
given address so like other

564
00:21:23,779 --> 00:21:29,839
functionality bar two you can use the

565
00:21:25,580 --> 00:21:32,899
erase so we can say let's trace the the

566
00:21:29,839 --> 00:21:35,359
current address with x0 register to

567
00:21:32,899 --> 00:21:36,619
print out all of the hits right so for

568
00:21:35,359 --> 00:21:39,799
each of those we want to find out what's

569
00:21:36,619 --> 00:21:41,599
the next 0 and the reason we chose x0 in

570
00:21:39,799 --> 00:21:44,349
this case is because those system calls

571
00:21:41,599 --> 00:21:48,589
are accessed and I think else that which

572
00:21:44,349 --> 00:21:50,299
the x0 is the file path so when we do

573
00:21:48,589 --> 00:21:52,908
that what happens in our two frite is we

574
00:21:50,299 --> 00:21:54,139
can see the the the path that's being

575
00:21:52,909 --> 00:21:56,179
searched for so they're looking for

576
00:21:54,139 --> 00:21:59,379
Cydia and in the correct me I say they

577
00:21:56,179 --> 00:22:02,450
me I'm looking for Cydia and I find it

578
00:21:59,379 --> 00:22:03,559
so you know if this was a real app we

579
00:22:02,450 --> 00:22:05,629
could see the paths that they're being

580
00:22:03,559 --> 00:22:07,849
searched for although searching like

581
00:22:05,629 --> 00:22:08,899
this with tracing on all the hits isn't

582
00:22:07,849 --> 00:22:09,799
really gonna work because they're gonna

583
00:22:08,899 --> 00:22:12,559
be different system call

584
00:22:09,799 --> 00:22:15,918
but we can again we'll get to be more

585
00:22:12,559 --> 00:22:17,418
creative than that so the other thing is

586
00:22:15,919 --> 00:22:21,379
you can do this with stalker so without

587
00:22:17,419 --> 00:22:23,059
having to make changes to Frida you can

588
00:22:21,379 --> 00:22:26,689
use stalker because stalker is less

589
00:22:23,059 --> 00:22:29,059
invasive so here what I did was I dumped

590
00:22:26,690 --> 00:22:32,779
all the system calls into a dictionary

591
00:22:29,059 --> 00:22:34,009
in the JavaScript for I think iOS 12 but

592
00:22:32,779 --> 00:22:37,369
they don't really change all that often

593
00:22:34,009 --> 00:22:41,149
but once I have them there I can trace

594
00:22:37,369 --> 00:22:43,789
functionality and it's very slow but it

595
00:22:41,149 --> 00:22:45,258
works so I'm tracing all instructions

596
00:22:43,789 --> 00:22:48,289
and if if I see

597
00:22:45,259 --> 00:22:50,149
SVC then and it's also part of the the

598
00:22:48,289 --> 00:22:51,529
main app so you might want to do it for

599
00:22:50,149 --> 00:22:54,649
other libraries as well but for here I'm

600
00:22:51,529 --> 00:22:57,529
just living it to the main app if I see

601
00:22:54,649 --> 00:22:59,840
an SVC instruction then I call out to

602
00:22:57,529 --> 00:23:01,070
some other functionality so over on the

603
00:22:59,840 --> 00:23:07,939
right hand side you can see what I'm

604
00:23:01,070 --> 00:23:10,759
doing my my code basically gets the the

605
00:23:07,940 --> 00:23:13,340
value of the program counter just in

606
00:23:10,759 --> 00:23:16,009
case I want to print that out to see

607
00:23:13,340 --> 00:23:18,168
where it is you could also work out the

608
00:23:16,009 --> 00:23:20,299
address static the static address if you

609
00:23:18,169 --> 00:23:22,100
want to feed this into our to scripts

610
00:23:20,299 --> 00:23:23,989
offline to add comments or annotations

611
00:23:22,100 --> 00:23:26,779
or anything like that as well which I'm

612
00:23:23,989 --> 00:23:30,320
currently adding now and but also we can

613
00:23:26,779 --> 00:23:31,730
parse the the register value of X 16 and

614
00:23:30,320 --> 00:23:34,340
we can look it up in the dictionary so

615
00:23:31,730 --> 00:23:36,169
now we can create some switch cases or

616
00:23:34,340 --> 00:23:38,209
anything to handle access pete-r a

617
00:23:36,169 --> 00:23:42,679
socket or anything else right so now we

618
00:23:38,210 --> 00:23:44,149
can be more Krave so in frida itself not

619
00:23:42,679 --> 00:23:46,700
an hour to freedom in frida here's an

620
00:23:44,149 --> 00:23:48,168
example of that working so on the cracka

621
00:23:46,700 --> 00:23:51,230
me if you use the stalker based approach

622
00:23:48,169 --> 00:23:52,789
we can see all of the access calls and

623
00:23:51,230 --> 00:23:56,210
we can see all of the file paths that

624
00:23:52,789 --> 00:23:58,730
are being searched for and furthermore

625
00:23:56,210 --> 00:24:01,759
if we want to bypass those checks we can

626
00:23:58,730 --> 00:24:03,830
just use the Frida api's to replace the

627
00:24:01,759 --> 00:24:07,489
string with a file path that doesn't

628
00:24:03,830 --> 00:24:08,928
exist with the caveat that obviously you

629
00:24:07,489 --> 00:24:10,759
could have red herrings and stuff so if

630
00:24:08,929 --> 00:24:13,159
you replace everything then again they

631
00:24:10,759 --> 00:24:15,379
might still pick you up but you can see

632
00:24:13,159 --> 00:24:18,340
here we have the flag for the second

633
00:24:15,379 --> 00:24:18,340
part of the correct name so

634
00:24:19,259 --> 00:24:25,149
so basically the next steps were okay we

635
00:24:23,079 --> 00:24:28,178
can do this in stalker we can script

636
00:24:25,149 --> 00:24:30,158
this stuff but you know I was looking in

637
00:24:28,179 --> 00:24:31,449
the last few weeks to see that you can

638
00:24:30,159 --> 00:24:33,699
actually write plug-ins for our two

639
00:24:31,449 --> 00:24:35,079
frite so I figured okay like if I can

640
00:24:33,699 --> 00:24:36,940
write a plugin that will do this easily

641
00:24:35,079 --> 00:24:38,739
I don't have to worry about chaining the

642
00:24:36,940 --> 00:24:40,389
different commands or if I want to

643
00:24:38,739 --> 00:24:41,709
replace certain system calls I can put

644
00:24:40,389 --> 00:24:44,258
that all into a plug-in and make it like

645
00:24:41,709 --> 00:24:46,149
really easy to use so commands will

646
00:24:44,259 --> 00:24:47,739
probably change again it's really messed

647
00:24:46,149 --> 00:24:50,289
up code right now but you can use like

648
00:24:47,739 --> 00:24:53,229
backslash st F to find them all you can

649
00:24:50,289 --> 00:24:54,908
stock all of them with s to print out

650
00:24:53,229 --> 00:24:56,079
what all the system calls are and with T

651
00:24:54,909 --> 00:24:57,940
that's where I'm starting to build a

652
00:24:56,079 --> 00:24:59,229
logic in to allow you to put like

653
00:24:57,940 --> 00:25:01,929
blacklist of files that you want to

654
00:24:59,229 --> 00:25:04,089
replace so we can actually start to do

655
00:25:01,929 --> 00:25:05,440
more so again like just like in the

656
00:25:04,089 --> 00:25:06,940
previous example we're now calling it

657
00:25:05,440 --> 00:25:10,209
from within the plug-in in our to Frieda

658
00:25:06,940 --> 00:25:14,319
with backslash STS and you know you see

659
00:25:10,209 --> 00:25:16,479
the output from the from the script so

660
00:25:14,319 --> 00:25:20,408
it's really easy actually um I don't

661
00:25:16,479 --> 00:25:22,329
really like JavaScript sorry

662
00:25:20,409 --> 00:25:24,009
so I even I have a buddy who's like

663
00:25:22,329 --> 00:25:27,279
really hardcore JavaScript I'm like dude

664
00:25:24,009 --> 00:25:30,159
what the is a promise so I'm trying

665
00:25:27,279 --> 00:25:31,809
to call to to our to Freder host

666
00:25:30,159 --> 00:25:33,459
commands and it was just hanging and

667
00:25:31,809 --> 00:25:35,979
he's like yeah did you have to chain the

668
00:25:33,459 --> 00:25:38,589
promises okay sorry

669
00:25:35,979 --> 00:25:41,319
so basically you can register command

670
00:25:38,589 --> 00:25:42,759
handlers for different commands in this

671
00:25:41,319 --> 00:25:45,940
case I just have one and I have

672
00:25:42,759 --> 00:25:47,409
arguments that I passed to it and the

673
00:25:45,940 --> 00:25:51,489
code looked way nicer than this but

674
00:25:47,409 --> 00:25:54,069
stalker relies on duct tape or at least

675
00:25:51,489 --> 00:25:56,139
currently there's some problems with VA

676
00:25:54,069 --> 00:25:57,639
in our to Frieda and our VA is the

677
00:25:56,139 --> 00:25:59,708
default and Artefill

678
00:25:57,639 --> 00:26:01,119
so if we want to use talker we need to

679
00:25:59,709 --> 00:26:03,429
turn that off and then I had to like

680
00:26:01,119 --> 00:26:06,849
find some website that was gonna convert

681
00:26:03,429 --> 00:26:08,979
my syntax to something old-school so

682
00:26:06,849 --> 00:26:11,559
it's still not too bad but yeah it was

683
00:26:08,979 --> 00:26:13,389
looking there so yeah here we can use

684
00:26:11,559 --> 00:26:15,789
the commands that we know from our -

685
00:26:13,389 --> 00:26:18,248
like PA that we're using the previous

686
00:26:15,789 --> 00:26:20,649
example so we can say PA with the

687
00:26:18,249 --> 00:26:22,719
mnemonics and we can get the the opcodes

688
00:26:20,649 --> 00:26:25,389
and then we can go through look for

689
00:26:22,719 --> 00:26:27,059
executable code regions we can go ahead

690
00:26:25,389 --> 00:26:29,728
and search for the system calls and

691
00:26:27,059 --> 00:26:32,290
populate them in some JavaScript objects

692
00:26:29,729 --> 00:26:34,390
and the result of that is

693
00:26:32,290 --> 00:26:35,680
now like we did before we have a plug in

694
00:26:34,390 --> 00:26:37,900
where we can find the bypass all of

695
00:26:35,680 --> 00:26:40,390
these again really basic functionality

696
00:26:37,900 --> 00:26:43,660
for now but maybe we can we can make it

697
00:26:40,390 --> 00:26:45,070
better going forward the other thing

698
00:26:43,660 --> 00:26:47,320
that I said I would

699
00:26:45,070 --> 00:26:50,409
I mentioned pancake worked on this I

700
00:26:47,320 --> 00:26:53,020
think a month ago or something but

701
00:26:50,410 --> 00:26:55,900
there's also the option to inject as

702
00:26:53,020 --> 00:26:58,570
code using a free day as well so you can

703
00:26:55,900 --> 00:27:01,120
use this code here to inject system

704
00:26:58,570 --> 00:27:03,700
calls and and invoke the functionality

705
00:27:01,120 --> 00:27:08,949
if you want to so you can you can also

706
00:27:03,700 --> 00:27:11,580
do that so what's next

707
00:27:08,950 --> 00:27:14,920
keep writing bad code and hope it works

708
00:27:11,580 --> 00:27:17,740
but yeah we can get very far using our

709
00:27:14,920 --> 00:27:20,380
two pipe one of the limitations I've

710
00:27:17,740 --> 00:27:22,510
found so far with writing our to Frieda

711
00:27:20,380 --> 00:27:24,250
plugin is I wanted to just use the

712
00:27:22,510 --> 00:27:26,590
commands that I was using before like

713
00:27:24,250 --> 00:27:28,780
the you know backslash 4 /x to search

714
00:27:26,590 --> 00:27:30,340
for the the bytes and you can do it with

715
00:27:28,780 --> 00:27:31,660
the the Frieda you know I could do it

716
00:27:30,340 --> 00:27:33,159
with Frieda but you know I figured if

717
00:27:31,660 --> 00:27:36,580
that if that logics already built in I

718
00:27:33,160 --> 00:27:39,430
can just reuse it so you know I had to

719
00:27:36,580 --> 00:27:40,870
use both Frieda code as well as running

720
00:27:39,430 --> 00:27:43,480
our two commands which is probably the

721
00:27:40,870 --> 00:27:45,370
neat way of doing it but with our two

722
00:27:43,480 --> 00:27:48,250
pipe you can obviously make use of the

723
00:27:45,370 --> 00:27:51,189
arterial commands as well so it's quite

724
00:27:48,250 --> 00:27:53,260
quite a bit more extensible for me and

725
00:27:51,190 --> 00:27:55,600
also I don't have to worry too much

726
00:27:53,260 --> 00:27:58,540
about the JavaScript side because I can

727
00:27:55,600 --> 00:28:01,409
use Python so the next steps for me is

728
00:27:58,540 --> 00:28:04,659
to try and identify different detections

729
00:28:01,410 --> 00:28:06,580
different products there's a tool out

730
00:28:04,660 --> 00:28:09,520
there I do and some others work on it

731
00:28:06,580 --> 00:28:11,050
called apk ID so I figured like there's

732
00:28:09,520 --> 00:28:13,360
no iOS equivalent maybe it'd be good to

733
00:28:11,050 --> 00:28:15,100
work on something like that but then

734
00:28:13,360 --> 00:28:17,919
also for these things to create some

735
00:28:15,100 --> 00:28:19,330
kind of mappings to help you work out

736
00:28:17,920 --> 00:28:21,400
offline so as I say maybe adding some

737
00:28:19,330 --> 00:28:24,760
comments and our two offline to show you

738
00:28:21,400 --> 00:28:27,190
what the system called number was what

739
00:28:24,760 --> 00:28:29,650
the arguments were maybe if you can't

740
00:28:27,190 --> 00:28:30,910
find it through them easily and also

741
00:28:29,650 --> 00:28:32,260
creating some graphs that will help you

742
00:28:30,910 --> 00:28:33,340
figure out where things are so when

743
00:28:32,260 --> 00:28:34,810
you're looking at really complicated

744
00:28:33,340 --> 00:28:36,040
apps often you're working through the

745
00:28:34,810 --> 00:28:37,389
back faces and then you hook those

746
00:28:36,040 --> 00:28:40,060
things and then you see what they call

747
00:28:37,390 --> 00:28:42,490
and again we can automate a lot of this

748
00:28:40,060 --> 00:28:45,250
stuff so that's that's the plan

749
00:28:42,490 --> 00:28:46,060
so yeah ideally I want to have two

750
00:28:45,250 --> 00:28:47,800
options either

751
00:28:46,060 --> 00:28:49,840
scan and get as much information offline

752
00:28:47,800 --> 00:28:53,919
as I can but if I have to run the app

753
00:28:49,840 --> 00:28:54,970
which is becoming more common then I can

754
00:28:53,920 --> 00:28:58,660
run the app and I can trace everything

755
00:28:54,970 --> 00:29:00,070
at runtime the other thing is to show

756
00:28:58,660 --> 00:29:01,690
the example of how this will work at

757
00:29:00,070 --> 00:29:03,810
some point as I say I need to make it

758
00:29:01,690 --> 00:29:07,570
neater and there's a few things missing

759
00:29:03,810 --> 00:29:10,510
but also I think geo is going to talk a

760
00:29:07,570 --> 00:29:11,919
lot about dwarf which is a like a

761
00:29:10,510 --> 00:29:14,410
debugger built on top of Frieda with

762
00:29:11,920 --> 00:29:16,780
many many other capabilities and he's

763
00:29:14,410 --> 00:29:18,310
also now making it extensible to write

764
00:29:16,780 --> 00:29:20,710
agents and again it should be pretty

765
00:29:18,310 --> 00:29:22,750
easy to add something like this across

766
00:29:20,710 --> 00:29:25,420
platform for for dwarf although he might

767
00:29:22,750 --> 00:29:28,180
even have that already so yeah that's

768
00:29:25,420 --> 00:29:30,670
that's it for what's next

769
00:29:28,180 --> 00:29:33,820
I have screenshots I can show you a demo

770
00:29:30,670 --> 00:29:38,220
if if we have time I guess we definitely

771
00:29:33,820 --> 00:29:38,220
have time so let me go ahead and do that

772
00:29:40,680 --> 00:29:53,310
so how do I do this without taking a

773
00:29:43,630 --> 00:29:53,310
video of myself okay

774
00:29:53,659 --> 00:29:56,659
so

775
00:29:57,570 --> 00:30:14,429
let's go here and yeah let's go shall we

776
00:30:10,470 --> 00:30:14,430
just make sure I have the thing

777
00:30:22,400 --> 00:30:39,170
okay so yeah basically I can show you

778
00:30:25,930 --> 00:30:43,370
the the plugin we can go here yeah so if

779
00:30:39,170 --> 00:30:57,710
we take a look at the code let's look at

780
00:30:43,370 --> 00:31:00,800
the the new code I guess so again we

781
00:30:57,710 --> 00:31:02,960
have dictionary the plan is we can use

782
00:31:00,800 --> 00:31:04,370
that from the a s command so we don't

783
00:31:02,960 --> 00:31:07,880
actually need to do that but again I'm

784
00:31:04,370 --> 00:31:11,540
lazy I haven't got around to it so yeah

785
00:31:07,880 --> 00:31:14,540
we have some commands here to handle the

786
00:31:11,540 --> 00:31:15,800
different arguments that the the we as

787
00:31:14,540 --> 00:31:17,270
users are going to want to use whether

788
00:31:15,800 --> 00:31:21,590
we're finding them tracing them or doing

789
00:31:17,270 --> 00:31:23,840
other things we are trying to add some

790
00:31:21,590 --> 00:31:29,300
support for Android but as I say I'm not

791
00:31:23,840 --> 00:31:32,990
an Android person so I'm not a cyborg so

792
00:31:29,300 --> 00:31:35,659
here we have the code which calls the

793
00:31:32,990 --> 00:31:39,530
are two commands to to get the the op

794
00:31:35,660 --> 00:31:41,870
codes like we showed and down here if we

795
00:31:39,530 --> 00:31:45,530
want this talk we call the stalks this

796
00:31:41,870 --> 00:31:49,580
calls function and if I jump to this I

797
00:31:45,530 --> 00:31:54,649
can show you what that looks like okay

798
00:31:49,580 --> 00:31:56,629
here so again right now we I'm just

799
00:31:54,650 --> 00:31:59,240
creating a PLC so it's limited to the

800
00:31:56,630 --> 00:32:00,860
app region but super simple to to fix

801
00:31:59,240 --> 00:32:02,330
and when you're finding them it it

802
00:32:00,860 --> 00:32:04,189
creates a mapping for all of the

803
00:32:02,330 --> 00:32:06,889
libraries in memory and shows you which

804
00:32:04,190 --> 00:32:10,640
ones belong to which so we can easily

805
00:32:06,890 --> 00:32:12,920
leverage that going forward and yeah if

806
00:32:10,640 --> 00:32:15,380
we if we find one then we're just going

807
00:32:12,920 --> 00:32:17,870
to go ahead and print it out but as I

808
00:32:15,380 --> 00:32:19,790
say maybe we can import that information

809
00:32:17,870 --> 00:32:21,590
into our to offline so we can create

810
00:32:19,790 --> 00:32:23,090
some scripts to create comments and

811
00:32:21,590 --> 00:32:26,750
flags and other things that will help us

812
00:32:23,090 --> 00:32:28,580
when we're analyzing this statically so

813
00:32:26,750 --> 00:32:30,700
really basic stuff but let's go ahead

814
00:32:28,580 --> 00:32:37,189
and run it

815
00:32:30,700 --> 00:32:49,160
let's just make sure that lets go strong

816
00:32:37,190 --> 00:32:56,090
I guess be okay so I think I remember

817
00:32:49,160 --> 00:32:57,740
correctly so what happens in the crack

818
00:32:56,090 --> 00:33:00,169
me if you want to play along at home if

819
00:32:57,740 --> 00:33:02,440
you have an iPhone device when we spawn

820
00:33:00,170 --> 00:33:06,020
with Freda or two Freda obviously the

821
00:33:02,440 --> 00:33:07,550
application is running but in like 15

822
00:33:06,020 --> 00:33:09,740
seconds the OS is gonna kill us because

823
00:33:07,550 --> 00:33:13,100
yeah the application hasn't been resumed

824
00:33:09,740 --> 00:33:14,600
and it says yeah times I so we can

825
00:33:13,100 --> 00:33:16,389
resume it and what's gonna happen is the

826
00:33:14,600 --> 00:33:18,830
application is gonna detect us and

827
00:33:16,390 --> 00:33:21,110
self-destruct again fairly common when

828
00:33:18,830 --> 00:33:25,399
you're analyzing apps like this but what

829
00:33:21,110 --> 00:33:30,409
we can do we can import challenge one

830
00:33:25,400 --> 00:33:35,450
and we can go ahead and resume so now we

831
00:33:30,410 --> 00:33:38,840
see some cold wait now the application

832
00:33:35,450 --> 00:33:46,490
opposite doesn't rise so challenge one

833
00:33:38,840 --> 00:33:48,320
is fairly fairly easy nice trying to use

834
00:33:46,490 --> 00:33:51,320
a laptop when it's slanted away from you

835
00:33:48,320 --> 00:33:53,300
so yeah basic example we have a

836
00:33:51,320 --> 00:33:56,750
blacklist based on the tracing that we

837
00:33:53,300 --> 00:33:58,580
did of some files and we with Frida

838
00:33:56,750 --> 00:34:01,580
we're hooking access and we're also

839
00:33:58,580 --> 00:34:03,770
hooking else that it's not really that

840
00:34:01,580 --> 00:34:06,590
horrible because instead of using args

841
00:34:03,770 --> 00:34:08,659
I'm using x0 just yeah because I'm lazy

842
00:34:06,590 --> 00:34:09,710
or because I want to look cool I don't

843
00:34:08,659 --> 00:34:12,919
know

844
00:34:09,710 --> 00:34:14,300
so yeah challenge one is really easy and

845
00:34:12,918 --> 00:34:17,089
now obviously if we go to challenge two

846
00:34:14,300 --> 00:34:18,409
is gonna crash again right so we go to

847
00:34:17,090 --> 00:34:20,510
challenge two it gives us like a two

848
00:34:18,409 --> 00:34:23,710
second timer and yeah applications dead

849
00:34:20,510 --> 00:34:26,389
right so let's go ahead and restart and

850
00:34:23,710 --> 00:34:30,649
let's go for challenge one again and

851
00:34:26,389 --> 00:34:33,169
let's resume so we be challenge one and

852
00:34:30,649 --> 00:34:37,719
now if we want to what we can do I've

853
00:34:33,168 --> 00:34:37,719
put together some commands already

854
00:34:38,280 --> 00:34:43,300
so if we want if we wanted to automate

855
00:34:41,739 --> 00:34:46,029
this we can either batch ups of commands

856
00:34:43,300 --> 00:34:49,270
and pass them in with - I and it will

857
00:34:46,030 --> 00:34:50,619
run all of those are two commands or we

858
00:34:49,270 --> 00:34:52,179
could put it into our two pipe or we

859
00:34:50,619 --> 00:34:53,290
could put into a plugin so here all of

860
00:34:52,179 --> 00:34:55,540
the commands I showed earlier we have

861
00:34:53,290 --> 00:34:57,880
them batched up to automatically bypass

862
00:34:55,540 --> 00:35:03,339
challenge - so I'll show you this one

863
00:34:57,880 --> 00:35:06,430
first so let's go ahead and actually let

864
00:35:03,339 --> 00:35:10,990
me change something real quick pancakes

865
00:35:06,430 --> 00:35:13,270
gonna hate me I'm gonna use now so let's

866
00:35:10,990 --> 00:35:22,839
go ahead and do find the RT so I just

867
00:35:13,270 --> 00:35:25,119
want to import a challenge one okay so

868
00:35:22,839 --> 00:35:29,230
let's go ahead and run that and we can

869
00:35:25,119 --> 00:35:32,619
say - I and do find or - so let's go

870
00:35:29,230 --> 00:35:34,660
ahead and run the app spawn it again now

871
00:35:32,619 --> 00:35:36,460
we can see we have the blessing of

872
00:35:34,660 --> 00:35:39,609
Clippy right it doesn't work if you

873
00:35:36,460 --> 00:35:42,849
don't use Clippy so here we bypass

874
00:35:39,609 --> 00:35:46,328
challenge 1 and then we need to resume

875
00:35:42,849 --> 00:35:50,530
the app and now obviously we can see

876
00:35:46,329 --> 00:35:53,260
some other stuff okay and what's gonna

877
00:35:50,530 --> 00:35:58,780
happen is if we go to challenge two we

878
00:35:53,260 --> 00:35:59,800
should be the challenge so here you can

879
00:35:58,780 --> 00:36:04,030
see it says it's going to self-destruct

880
00:35:59,800 --> 00:36:07,720
but it doesn't and if if I search for X

881
00:36:04,030 --> 00:36:10,210
0 : we can see the flag but also we can

882
00:36:07,720 --> 00:36:11,500
tap through there's freedich detection

883
00:36:10,210 --> 00:36:13,930
there's jailbreak detection there's

884
00:36:11,500 --> 00:36:17,290
various other stuff so we can do all of

885
00:36:13,930 --> 00:36:20,290
this I'm from within within the the

886
00:36:17,290 --> 00:36:24,579
batch script but also if we want to if I

887
00:36:20,290 --> 00:36:27,310
tap back out to let me let me restart

888
00:36:24,579 --> 00:36:31,300
just for cleanliness so let's say

889
00:36:27,310 --> 00:36:36,359
challenge 1 again and let's resume and

890
00:36:31,300 --> 00:36:36,359
then if we want we can go yes 5

891
00:36:39,230 --> 00:36:43,260
so let's go ahead and import the plugin

892
00:36:41,430 --> 00:36:49,259
and now we can go ahead and use the

893
00:36:43,260 --> 00:36:52,110
command and so we can do like back slash

894
00:36:49,260 --> 00:36:53,700
SDF it will go through and as I say

895
00:36:52,110 --> 00:36:55,620
recursively look for everything but you

896
00:36:53,700 --> 00:36:57,500
don't really want everything necessarily

897
00:36:55,620 --> 00:36:59,310
and again it's hacky so there's some

898
00:36:57,500 --> 00:37:01,790
JavaScript objects because I don't know

899
00:36:59,310 --> 00:37:01,790
what I'm doing

900
00:37:02,130 --> 00:37:08,880
so here if we want to go ahead and for

901
00:37:05,070 --> 00:37:10,290
example trace we can run stalker now and

902
00:37:08,880 --> 00:37:11,550
we'll go ahead and run the challenge you

903
00:37:10,290 --> 00:37:15,420
see it's a little bit slower with soccer

904
00:37:11,550 --> 00:37:17,820
but let's give it a try and again this

905
00:37:15,420 --> 00:37:19,350
is just a crack me so you know using

906
00:37:17,820 --> 00:37:21,210
this in relapse it's gonna take take

907
00:37:19,350 --> 00:37:23,610
some time to get it working but let's go

908
00:37:21,210 --> 00:37:28,560
ahead and give this some seconds yeah I

909
00:37:23,610 --> 00:37:32,790
know why it's not working so again I was

910
00:37:28,560 --> 00:37:37,759
saying stalker has some issues right now

911
00:37:32,790 --> 00:37:41,460
with VA and if we if we load up with r2

912
00:37:37,760 --> 00:37:46,770
and yeah I'm gonna have to kill this

913
00:37:41,460 --> 00:37:51,480
somewhere okay looks like it's fine okay

914
00:37:46,770 --> 00:37:54,180
so if if you want you can do like this

915
00:37:51,480 --> 00:37:57,660
and you can see the run time is VA in

916
00:37:54,180 --> 00:38:01,560
free debt defaults to duct-tape so we

917
00:37:57,660 --> 00:38:02,759
have some problems here so yeah we'll

918
00:38:01,560 --> 00:38:05,730
let it do its thing it's going to

919
00:38:02,760 --> 00:38:08,070
destroy itself so if we want to to go

920
00:38:05,730 --> 00:38:10,690
ahead and do that then I think I

921
00:38:08,070 --> 00:38:13,979
remember the command

922
00:38:10,690 --> 00:38:13,979
[Music]

923
00:38:17,760 --> 00:38:28,390
yeah so let's go ahead and do this and

924
00:38:25,510 --> 00:38:31,480
yeah we can just go here so if we set

925
00:38:28,390 --> 00:38:31,960
this environment variable now to let's

926
00:38:31,480 --> 00:38:34,420
see

927
00:38:31,960 --> 00:38:35,890
disable v8 2-1 and we're gonna go ahead

928
00:38:34,420 --> 00:38:37,300
and spawn the application again we still

929
00:38:35,890 --> 00:38:39,609
have the the commands being passed in

930
00:38:37,300 --> 00:38:40,390
but we could go ahead and take the mouse

931
00:38:39,610 --> 00:38:45,490
since we're going to do it with the

932
00:38:40,390 --> 00:38:48,240
plugin so here we need to go ahead and

933
00:38:45,490 --> 00:38:53,589
import challenge 1 again we can resume

934
00:38:48,240 --> 00:38:58,359
click OK now if we if we want to we can

935
00:38:53,590 --> 00:39:00,820
import the plug-in and we have the

936
00:38:58,360 --> 00:39:02,290
commands again so just same as before we

937
00:39:00,820 --> 00:39:04,540
can still search that's not the problem

938
00:39:02,290 --> 00:39:06,220
it's one we want to go ahead and run

939
00:39:04,540 --> 00:39:08,259
stalker so now you see doesn't hang on

940
00:39:06,220 --> 00:39:09,609
the first threat we have some more

941
00:39:08,260 --> 00:39:19,030
information so let's go ahead and go to

942
00:39:09,610 --> 00:39:21,570
challenge two okay so now we can see

943
00:39:19,030 --> 00:39:25,450
that some access calls were called and

944
00:39:21,570 --> 00:39:27,340
let's go try one more time and let's do

945
00:39:25,450 --> 00:39:29,129
challenge one again so this is just to

946
00:39:27,340 --> 00:39:31,750
trace the system calls that are running

947
00:39:29,130 --> 00:39:34,780
but if we want to implement the bypasses

948
00:39:31,750 --> 00:39:37,240
we did a second ago we can use the final

949
00:39:34,780 --> 00:39:40,780
command so let's go ahead and run this

950
00:39:37,240 --> 00:39:43,540
is gold tracer so in this case I think

951
00:39:40,780 --> 00:39:46,480
we run STS right otherwise my god Brooke

952
00:39:43,540 --> 00:39:49,180
yeah okay it's fine so this time we run

953
00:39:46,480 --> 00:39:51,130
as st with t to say we actually want to

954
00:39:49,180 --> 00:39:54,549
trace and to do more stuff than just

955
00:39:51,130 --> 00:39:56,200
trace as you can see the syntax doesn't

956
00:39:54,550 --> 00:40:02,920
really make sense yeah but we'll figure

957
00:39:56,200 --> 00:40:07,000
out so yeah ok still died bad demo but

958
00:40:02,920 --> 00:40:09,430
yeah basically um the idea is we can go

959
00:40:07,000 --> 00:40:10,750
ahead and build in black lists and for

960
00:40:09,430 --> 00:40:14,379
common things these exists on many

961
00:40:10,750 --> 00:40:15,880
platforms so if you go looking around

962
00:40:14,380 --> 00:40:18,610
white papers and get happy you'll find

963
00:40:15,880 --> 00:40:21,310
lots of examples of you know Annie Jo

964
00:40:18,610 --> 00:40:22,840
breaking Annie tampering and we can go

965
00:40:21,310 --> 00:40:24,759
ahead and start populating some kind of

966
00:40:22,840 --> 00:40:27,460
knowledge base of this stuff and then

967
00:40:24,760 --> 00:40:29,110
pass it in here so yeah I mean it's demo

968
00:40:27,460 --> 00:40:30,430
is not exactly working I mean I was

969
00:40:29,110 --> 00:40:31,840
working on this stuff right up until the

970
00:40:30,430 --> 00:40:33,730
end of last week so

971
00:40:31,840 --> 00:40:35,590
but yeah you get the idea so the idea is

972
00:40:33,730 --> 00:40:37,660
we need a little bit of time to make

973
00:40:35,590 --> 00:40:40,750
this work better on iOS and then we need

974
00:40:37,660 --> 00:40:43,470
some Android people to to come help so

975
00:40:40,750 --> 00:40:46,470
yeah I guess that's that's everything

976
00:40:43,470 --> 00:40:46,470
yeah

977
00:40:52,630 --> 00:41:08,590
any questions well thank you for your

978
00:41:06,670 --> 00:41:10,360
presentation and I want to tell you that

979
00:41:08,590 --> 00:41:11,920
I will be doing the Android part so I

980
00:41:10,360 --> 00:41:15,340
already tested and it was more or less

981
00:41:11,920 --> 00:41:19,950
working but I think I bought it in one

982
00:41:15,340 --> 00:41:19,950
week or so so no worries nice thank you

983
00:41:28,299 --> 00:41:33,680
thank you thank you yeah it's an

984
00:41:32,119 --> 00:41:36,349
interesting journey thank you for

985
00:41:33,680 --> 00:41:39,649
sharing only one question during your

986
00:41:36,349 --> 00:41:43,670
journey why you did not considered al LD

987
00:41:39,650 --> 00:41:45,650
be scripting yeah I mean I did I was

988
00:41:43,670 --> 00:41:47,240
doing a lot of stuff in our DB and even

989
00:41:45,650 --> 00:41:49,250
as you say it like halfway through I

990
00:41:47,240 --> 00:41:51,740
figured like let's just create some l DB

991
00:41:49,250 --> 00:41:53,720
scripts to do this and even some

992
00:41:51,740 --> 00:41:55,339
colleagues working with where I show

993
00:41:53,720 --> 00:41:58,368
them this stuff they are doing the same

994
00:41:55,339 --> 00:42:00,319
stuff in ello to be just preference I'm

995
00:41:58,369 --> 00:42:03,079
not I'm not opposed to using a debugger

996
00:42:00,319 --> 00:42:06,109
but yeah I mean I'd rather do stuff

997
00:42:03,079 --> 00:42:08,720
which is more extensible and I can

998
00:42:06,109 --> 00:42:11,900
change things on the fly and yeah for me

999
00:42:08,720 --> 00:42:14,269
I prefer it but ya know no real reason I

1000
00:42:11,900 --> 00:42:17,059
guess you could do all of this the same

1001
00:42:14,269 --> 00:42:20,089
way but for me just prefer using tools

1002
00:42:17,059 --> 00:42:29,049
like Frida and Artie Frida so yeah thank

1003
00:42:20,089 --> 00:42:29,049
you for questions okay thanks

