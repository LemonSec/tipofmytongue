1
00:00:00,060 --> 00:00:03,520
[Music]

2
00:00:03,520 --> 00:00:04,960
hello and good evening

3
00:00:04,960 --> 00:00:07,600
welcome back to our daily session of

4
00:00:07,600 --> 00:00:09,280
international conference

5
00:00:09,280 --> 00:00:12,559
hosted by team shakti and america mirtha

6
00:00:12,559 --> 00:00:14,000
university

7
00:00:14,000 --> 00:00:15,920
i'm punima and i will be your host for

8
00:00:15,920 --> 00:00:17,760
the session

9
00:00:17,760 --> 00:00:20,480
so moving on we have here with us ms

10
00:00:20,480 --> 00:00:22,400
priyadarshini krishnan engineering

11
00:00:22,400 --> 00:00:23,199
manager

12
00:00:23,199 --> 00:00:26,880
at american megatrends international

13
00:00:26,880 --> 00:00:31,119
uh hello priyadashni and welcome

14
00:00:35,440 --> 00:00:38,559
thanks for the introduction

15
00:00:40,480 --> 00:00:44,000
i prior to

16
00:00:44,000 --> 00:00:47,840
this she has been focusing

17
00:00:47,840 --> 00:00:50,000
on developing tools she holds a

18
00:00:50,000 --> 00:00:52,160
bachelor's degree in computer science

19
00:00:52,160 --> 00:00:54,879
and engineering for madras university

20
00:00:54,879 --> 00:00:58,239
and today she is here with us to give a

21
00:00:58,239 --> 00:01:00,239
session centered all around firmware

22
00:01:00,239 --> 00:01:01,520
security

23
00:01:01,520 --> 00:01:03,760
so without any further delay over to you

24
00:01:03,760 --> 00:01:05,920
miss priyadushni

25
00:01:05,920 --> 00:01:08,159
thanks purnima you saved my introduction

26
00:01:08,159 --> 00:01:10,840
time thank you thanks for that wonderful

27
00:01:10,840 --> 00:01:12,880
introduction

28
00:01:12,880 --> 00:01:15,439
hello everyone a very good afternoon to

29
00:01:15,439 --> 00:01:16,560
everyone

30
00:01:16,560 --> 00:01:18,479
so i'm priya dashney krishnan

31
00:01:18,479 --> 00:01:21,680
engineering project manager at ami

32
00:01:21,680 --> 00:01:24,000
so on behalf of ami i take this

33
00:01:24,000 --> 00:01:24,880
opportunity

34
00:01:24,880 --> 00:01:27,360
and thank the entire crew of shakthikhan

35
00:01:27,360 --> 00:01:28,960
for providing us this wonderful

36
00:01:28,960 --> 00:01:30,720
opportunity

37
00:01:30,720 --> 00:01:33,280
so today my session will be mostly

38
00:01:33,280 --> 00:01:33,759
around

39
00:01:33,759 --> 00:01:37,280
firmware security so about myself

40
00:01:37,280 --> 00:01:40,960
purnima has covered so i completed my

41
00:01:40,960 --> 00:01:42,479
bachelor's in computer science and

42
00:01:42,479 --> 00:01:44,479
engineering from madras university

43
00:01:44,479 --> 00:01:48,000
back in 2004 and then i joined ami

44
00:01:48,000 --> 00:01:49,920
and i've been associated with ami for

45
00:01:49,920 --> 00:01:51,759
the past 16 years

46
00:01:51,759 --> 00:01:54,159
so i have been into various development

47
00:01:54,159 --> 00:01:54,799
roles

48
00:01:54,799 --> 00:01:57,600
right from a system software engineer i

49
00:01:57,600 --> 00:01:59,600
started writing applications

50
00:01:59,600 --> 00:02:02,719
that was around firmware development so

51
00:02:02,719 --> 00:02:04,719
writing new environments for firmware

52
00:02:04,719 --> 00:02:06,640
development debuggers for firmware

53
00:02:06,640 --> 00:02:07,680
development

54
00:02:07,680 --> 00:02:10,000
so my entire experience is around

55
00:02:10,000 --> 00:02:12,239
developing tools and utilities for

56
00:02:12,239 --> 00:02:13,599
firmware development

57
00:02:13,599 --> 00:02:15,680
for the past few years we have been

58
00:02:15,680 --> 00:02:17,520
working on implementing security

59
00:02:17,520 --> 00:02:20,640
solutions for firmware and software

60
00:02:20,640 --> 00:02:23,440
so with those experiences we'll have our

61
00:02:23,440 --> 00:02:25,120
session where we look at

62
00:02:25,120 --> 00:02:27,760
firmware the need for firmware security

63
00:02:27,760 --> 00:02:28,400
and

64
00:02:28,400 --> 00:02:31,840
implementing firmware security solutions

65
00:02:31,840 --> 00:02:37,840
let me share my presentation

66
00:02:42,310 --> 00:02:50,300
[Music]

67
00:02:51,920 --> 00:02:55,120
so is my presentation visible

68
00:02:55,120 --> 00:02:59,360
yes your presentation is okay

69
00:03:00,319 --> 00:03:03,519
so the agenda for this session is a

70
00:03:03,519 --> 00:03:06,159
introduction what is firmware and the

71
00:03:06,159 --> 00:03:08,239
need for firmware security

72
00:03:08,239 --> 00:03:10,239
and then i'll go through some of our

73
00:03:10,239 --> 00:03:11,599
security products

74
00:03:11,599 --> 00:03:13,280
so the reason why i go through these

75
00:03:13,280 --> 00:03:15,920
security products is with these products

76
00:03:15,920 --> 00:03:18,159
i'll explain the concepts behind

77
00:03:18,159 --> 00:03:21,840
implementing firmware security

78
00:03:22,000 --> 00:03:24,640
so before i start i'll give a brief

79
00:03:24,640 --> 00:03:25,360
introduction

80
00:03:25,360 --> 00:03:28,599
of ami and what we do at ami founded in

81
00:03:28,599 --> 00:03:29,760
1985

82
00:03:29,760 --> 00:03:32,720
and we are known worldwide for ami bios

83
00:03:32,720 --> 00:03:33,360
the mission

84
00:03:33,360 --> 00:03:36,159
of us ami is power manage and secure the

85
00:03:36,159 --> 00:03:38,239
words digital infrastructure

86
00:03:38,239 --> 00:03:40,000
we have offices in seven different

87
00:03:40,000 --> 00:03:41,280
countries worldwide

88
00:03:41,280 --> 00:03:43,040
and we have roughly around thousand five

89
00:03:43,040 --> 00:03:44,400
hundred employees

90
00:03:44,400 --> 00:03:46,799
our unique and broad expertise isn't

91
00:03:46,799 --> 00:03:47,519
firmware

92
00:03:47,519 --> 00:03:50,239
so right from firmware development to

93
00:03:50,239 --> 00:03:52,080
security solutions

94
00:03:52,080 --> 00:03:55,760
network and storage management tools

95
00:03:55,760 --> 00:03:59,439
so that's what we do at ami

96
00:03:59,599 --> 00:04:03,439
about me i covered this firmware

97
00:04:03,439 --> 00:04:05,439
so i hope all of you know what a

98
00:04:05,439 --> 00:04:06,560
firmware is

99
00:04:06,560 --> 00:04:08,239
but still i'll go with a small

100
00:04:08,239 --> 00:04:11,200
introduction on what a firmware is

101
00:04:11,200 --> 00:04:13,840
so in layman's term if we have to see

102
00:04:13,840 --> 00:04:15,360
what a firmware is

103
00:04:15,360 --> 00:04:18,639
it is known as software for hardware

104
00:04:18,639 --> 00:04:21,040
so it is a low level software found in

105
00:04:21,040 --> 00:04:22,079
the system

106
00:04:22,079 --> 00:04:25,040
it facilitates the communication between

107
00:04:25,040 --> 00:04:26,320
other devices

108
00:04:26,320 --> 00:04:28,720
and is responsible for the basic input

109
00:04:28,720 --> 00:04:30,320
and output tasks

110
00:04:30,320 --> 00:04:32,880
basically firmware is the software that

111
00:04:32,880 --> 00:04:35,520
powers your system's hardware

112
00:04:35,520 --> 00:04:37,919
so the typical examples that come to our

113
00:04:37,919 --> 00:04:39,840
mind when we talk about firmware

114
00:04:39,840 --> 00:04:42,800
are embedded systems computer consumer

115
00:04:42,800 --> 00:04:44,800
appliances computers and computer

116
00:04:44,800 --> 00:04:46,240
peripherals

117
00:04:46,240 --> 00:04:49,120
today the two main firmware components

118
00:04:49,120 --> 00:04:49,440
that

119
00:04:49,440 --> 00:04:53,280
i'll be touching upon are bios and bmc

120
00:04:53,280 --> 00:04:56,560
bios bios is a software that resides in

121
00:04:56,560 --> 00:04:58,160
a non-volatile rom chip

122
00:04:58,160 --> 00:05:00,240
in your motherboard and that is the

123
00:05:00,240 --> 00:05:02,080
first thing that comes to life when you

124
00:05:02,080 --> 00:05:03,840
power on a computer

125
00:05:03,840 --> 00:05:07,120
the basic responsibilities of a bios is

126
00:05:07,120 --> 00:05:09,360
initialization of various components in

127
00:05:09,360 --> 00:05:10,400
your motherboard

128
00:05:10,400 --> 00:05:12,479
and this component hands over the

129
00:05:12,479 --> 00:05:15,360
control to the operating system

130
00:05:15,360 --> 00:05:18,720
next one is bmc bmc is baseboard

131
00:05:18,720 --> 00:05:21,039
management controller it is basically a

132
00:05:21,039 --> 00:05:22,560
service processor

133
00:05:22,560 --> 00:05:24,880
and capable of monitoring the physical

134
00:05:24,880 --> 00:05:25,919
state of servers

135
00:05:25,919 --> 00:05:28,960
computers or other hardware devices it

136
00:05:28,960 --> 00:05:30,880
also has sensors with it

137
00:05:30,880 --> 00:05:32,880
and these sensors are capable of

138
00:05:32,880 --> 00:05:34,800
measuring parameters such as power

139
00:05:34,800 --> 00:05:35,360
supply

140
00:05:35,360 --> 00:05:38,880
fan speed and temperature so bmc

141
00:05:38,880 --> 00:05:41,199
majorly helps us to monitor a large

142
00:05:41,199 --> 00:05:42,320
number of devices

143
00:05:42,320 --> 00:05:44,800
remotely and it thereby reduces the

144
00:05:44,800 --> 00:05:46,639
operating cost

145
00:05:46,639 --> 00:05:50,720
so this is the basic on firmware

146
00:05:50,960 --> 00:05:54,400
why we need firmware security so let's

147
00:05:54,400 --> 00:05:55,680
go back seven years

148
00:05:55,680 --> 00:05:59,199
or eight years so those times

149
00:05:59,199 --> 00:06:02,319
if you want to develop a firmware it was

150
00:06:02,319 --> 00:06:03,919
not very common

151
00:06:03,919 --> 00:06:06,960
so then the firmware developers or

152
00:06:06,960 --> 00:06:09,280
the people who understand firmware was

153
00:06:09,280 --> 00:06:10,960
very limited

154
00:06:10,960 --> 00:06:14,240
considered a very difficult task

155
00:06:14,240 --> 00:06:17,919
so firmware development or

156
00:06:17,919 --> 00:06:20,000
what a firmware does these things were

157
00:06:20,000 --> 00:06:22,080
considered very difficult

158
00:06:22,080 --> 00:06:25,199
that was seven years back fast forward

159
00:06:25,199 --> 00:06:26,160
now

160
00:06:26,160 --> 00:06:29,039
firmware development is as easy as any

161
00:06:29,039 --> 00:06:29,440
other

162
00:06:29,440 --> 00:06:33,520
writing any other software program so

163
00:06:33,520 --> 00:06:36,479
with firmware development becoming more

164
00:06:36,479 --> 00:06:37,919
and more easier

165
00:06:37,919 --> 00:06:39,840
the firmware attacks are becoming more

166
00:06:39,840 --> 00:06:42,800
and more common

167
00:06:42,800 --> 00:06:46,160
so what happens when your firmware gets

168
00:06:46,160 --> 00:06:47,759
attacked

169
00:06:47,759 --> 00:06:50,639
so your unsecured firmware leaves your

170
00:06:50,639 --> 00:06:51,280
platform

171
00:06:51,280 --> 00:06:53,520
extremely vulnerable to low level

172
00:06:53,520 --> 00:06:55,520
attacks

173
00:06:55,520 --> 00:06:58,160
so without the proper firmware security

174
00:06:58,160 --> 00:06:59,840
measures in place

175
00:06:59,840 --> 00:07:02,720
industries or let's take sensitive

176
00:07:02,720 --> 00:07:04,800
organizations like militaries or

177
00:07:04,800 --> 00:07:07,199
critical government sectors

178
00:07:07,199 --> 00:07:09,120
without proper firmware security

179
00:07:09,120 --> 00:07:10,400
measures in place

180
00:07:10,400 --> 00:07:12,400
these sectors are leaving their

181
00:07:12,400 --> 00:07:15,199
sensitive or classified data vulnerable

182
00:07:15,199 --> 00:07:19,120
to theft alteration and deletion

183
00:07:19,120 --> 00:07:21,360
so if you attack and get hold of a

184
00:07:21,360 --> 00:07:22,319
platform

185
00:07:22,319 --> 00:07:24,400
then it means that the entire platform

186
00:07:24,400 --> 00:07:25,599
is compromised

187
00:07:25,599 --> 00:07:28,560
nothing you run anything you run on that

188
00:07:28,560 --> 00:07:29,599
platform

189
00:07:29,599 --> 00:07:33,120
is not secure anymore

190
00:07:33,199 --> 00:07:35,840
and compromised firmware is also very

191
00:07:35,840 --> 00:07:37,280
impossible to detect

192
00:07:37,280 --> 00:07:40,160
without any specialized hardware so if

193
00:07:40,160 --> 00:07:42,639
we look at some of the recent research

194
00:07:42,639 --> 00:07:44,960
done by the information systems audit

195
00:07:44,960 --> 00:07:46,720
and control association

196
00:07:46,720 --> 00:07:49,440
the results are literally very shocking

197
00:07:49,440 --> 00:07:52,080
so 70 percent of the enterprises that

198
00:07:52,080 --> 00:07:55,039
participated in this research

199
00:07:55,039 --> 00:07:57,599
they do not emphasize hardware or

200
00:07:57,599 --> 00:07:59,440
firmware security during their life

201
00:07:59,440 --> 00:08:00,639
cycle management

202
00:08:00,639 --> 00:08:02,720
and they feel unprepared to deal with

203
00:08:02,720 --> 00:08:04,240
the attacker

204
00:08:04,240 --> 00:08:07,840
50 of the enterprises that do emphasize

205
00:08:07,840 --> 00:08:10,319
on the hardware or firmware security

206
00:08:10,319 --> 00:08:11,039
during their

207
00:08:11,039 --> 00:08:13,599
cycle management they report at least

208
00:08:13,599 --> 00:08:14,720
one incident of

209
00:08:14,720 --> 00:08:18,000
malware infected firmware eight percent

210
00:08:18,000 --> 00:08:18,479
of the

211
00:08:18,479 --> 00:08:21,199
enterprises only feel they are fully

212
00:08:21,199 --> 00:08:24,000
prepared for a firmware related attack

213
00:08:24,000 --> 00:08:26,240
there were also other major findings

214
00:08:26,240 --> 00:08:27,759
with this research

215
00:08:27,759 --> 00:08:30,800
fewer than one in four enterprises fully

216
00:08:30,800 --> 00:08:33,039
include firmware in their processes and

217
00:08:33,039 --> 00:08:34,559
procedures

218
00:08:34,559 --> 00:08:36,958
more than one and three enterprises are

219
00:08:36,958 --> 00:08:39,039
not even monitoring or measuring or

220
00:08:39,039 --> 00:08:40,000
collecting firmware

221
00:08:40,000 --> 00:08:42,320
data and they don't even know if their

222
00:08:42,320 --> 00:08:44,399
enterprise is doing so

223
00:08:44,399 --> 00:08:47,600
so firmware security

224
00:08:47,600 --> 00:08:50,560
is has started to be considered by

225
00:08:50,560 --> 00:08:51,360
enterprises

226
00:08:51,360 --> 00:08:55,279
only now

227
00:08:55,279 --> 00:08:58,399
so we saw why we need firmware security

228
00:08:58,399 --> 00:09:00,320
now how do we know that our platform is

229
00:09:00,320 --> 00:09:01,760
secure

230
00:09:01,760 --> 00:09:04,880
that's the next step right

231
00:09:05,760 --> 00:09:08,000
so the firmware that we talked about

232
00:09:08,000 --> 00:09:10,640
bios or bmc these are almost

233
00:09:10,640 --> 00:09:12,720
uh the first pieces of code that get

234
00:09:12,720 --> 00:09:15,440
executed in your platform

235
00:09:15,440 --> 00:09:18,000
so we have to make sure that the

236
00:09:18,000 --> 00:09:19,680
platform is trusted

237
00:09:19,680 --> 00:09:22,959
so this means that even before the bios

238
00:09:22,959 --> 00:09:24,800
in bmc takes control

239
00:09:24,800 --> 00:09:27,920
we need something in place that ensures

240
00:09:27,920 --> 00:09:30,880
that both this bios and bmc or any other

241
00:09:30,880 --> 00:09:31,760
firmware

242
00:09:31,760 --> 00:09:34,959
that gets control is trusted so it is

243
00:09:34,959 --> 00:09:37,120
essential for every platform to be

244
00:09:37,120 --> 00:09:40,080
trusted at boot time be it data center

245
00:09:40,080 --> 00:09:43,839
or be it any enterprise environment

246
00:09:43,839 --> 00:09:46,160
so what do we mean by trust platform

247
00:09:46,160 --> 00:09:47,440
trust requires

248
00:09:47,440 --> 00:09:50,480
validated firmware by firmware i mean

249
00:09:50,480 --> 00:09:53,360
all firmware

250
00:09:53,920 --> 00:09:55,839
are you aware of all the firmware

251
00:09:55,839 --> 00:09:57,279
running on your platform

252
00:09:57,279 --> 00:10:00,480
i just said to dmc and bios there are

253
00:10:00,480 --> 00:10:02,560
many other firmwares that are running on

254
00:10:02,560 --> 00:10:05,279
your platform let's take some examples

255
00:10:05,279 --> 00:10:07,040
the network interface nic card

256
00:10:07,040 --> 00:10:09,360
that has a firmware in it the psu the

257
00:10:09,360 --> 00:10:11,680
power supply unit that has a firmware

258
00:10:11,680 --> 00:10:13,360
and there might be even some

259
00:10:13,360 --> 00:10:15,120
non-volatile dimms that are there in

260
00:10:15,120 --> 00:10:16,800
your platform that has a firmware

261
00:10:16,800 --> 00:10:18,000
running in it

262
00:10:18,000 --> 00:10:20,560
so how do we make sure that all this

263
00:10:20,560 --> 00:10:22,640
firmware running inside our platform

264
00:10:22,640 --> 00:10:25,199
is secure

265
00:10:26,240 --> 00:10:28,720
and also with the recent developments in

266
00:10:28,720 --> 00:10:31,040
the industry in the security industry

267
00:10:31,040 --> 00:10:33,200
the firmware security trends are also

268
00:10:33,200 --> 00:10:35,120
changing very faster

269
00:10:35,120 --> 00:10:37,279
so the use of firmware in the data

270
00:10:37,279 --> 00:10:39,519
center has increased as the platforms

271
00:10:39,519 --> 00:10:41,760
are becoming more and more complex

272
00:10:41,760 --> 00:10:43,920
there are a lot a lot lot of individual

273
00:10:43,920 --> 00:10:45,760
components that require their own

274
00:10:45,760 --> 00:10:46,720
firmware

275
00:10:46,720 --> 00:10:49,279
now with this increase in the firmware

276
00:10:49,279 --> 00:10:51,120
there also comes an increase in the

277
00:10:51,120 --> 00:10:52,240
attack surface

278
00:10:52,240 --> 00:10:55,120
so all these increases it drives the

279
00:10:55,120 --> 00:10:55,839
interest in

280
00:10:55,839 --> 00:10:59,279
firmware security now when we are going

281
00:10:59,279 --> 00:11:00,320
to implement

282
00:11:00,320 --> 00:11:02,720
firmware security or we have firmware

283
00:11:02,720 --> 00:11:03,760
integrity

284
00:11:03,760 --> 00:11:05,600
all this gets important but the

285
00:11:05,600 --> 00:11:06,959
underlying thing is

286
00:11:06,959 --> 00:11:09,040
we need a deep understanding on the

287
00:11:09,040 --> 00:11:10,800
firmware development

288
00:11:10,800 --> 00:11:13,440
without understanding our firmware is

289
00:11:13,440 --> 00:11:15,680
implemented there is no way you can

290
00:11:15,680 --> 00:11:17,839
implement a security solution for that

291
00:11:17,839 --> 00:11:20,320
firmware

292
00:11:24,640 --> 00:11:27,760
now when we talk about data centers

293
00:11:27,760 --> 00:11:30,000
obviously cloud deployment comes into

294
00:11:30,000 --> 00:11:31,040
the picture

295
00:11:31,040 --> 00:11:33,839
and cloud security also becomes a top

296
00:11:33,839 --> 00:11:36,000
priority for adoption

297
00:11:36,000 --> 00:11:38,320
when we spoke to different enterprises

298
00:11:38,320 --> 00:11:40,160
when there was a research conducted with

299
00:11:40,160 --> 00:11:42,320
different enterprises and

300
00:11:42,320 --> 00:11:44,800
discussions on the barriers and concerns

301
00:11:44,800 --> 00:11:47,200
for implementing a cloud solution

302
00:11:47,200 --> 00:11:49,920
so the top barriers that came up in the

303
00:11:49,920 --> 00:11:51,839
research for cloud adoption

304
00:11:51,839 --> 00:11:54,880
was basically security risks data loss

305
00:11:54,880 --> 00:11:56,000
and leakage risk

306
00:11:56,000 --> 00:11:58,959
and legal and regulatory complaints and

307
00:11:58,959 --> 00:12:00,639
when they were asked about the major

308
00:12:00,639 --> 00:12:02,320
security concerns

309
00:12:02,320 --> 00:12:04,760
data loss and leakage data privacy

310
00:12:04,760 --> 00:12:06,000
confidentiality

311
00:12:06,000 --> 00:12:08,240
these were some of the major factors

312
00:12:08,240 --> 00:12:09,200
that came up

313
00:12:09,200 --> 00:12:11,920
for adopting cloud solutions and cloud

314
00:12:11,920 --> 00:12:14,479
security

315
00:12:16,399 --> 00:12:18,399
so when we talk about security these

316
00:12:18,399 --> 00:12:20,720
three terms always come into picture

317
00:12:20,720 --> 00:12:23,920
integrity attestation and assurance so

318
00:12:23,920 --> 00:12:26,320
we know the definition of these terms

319
00:12:26,320 --> 00:12:28,160
from an information security point of

320
00:12:28,160 --> 00:12:29,440
view so

321
00:12:29,440 --> 00:12:32,000
integrity in information security point

322
00:12:32,000 --> 00:12:34,160
of view data integrity means

323
00:12:34,160 --> 00:12:36,639
maintaining and assuring the accuracy of

324
00:12:36,639 --> 00:12:37,200
data

325
00:12:37,200 --> 00:12:40,560
over its entire lifecycle in the context

326
00:12:40,560 --> 00:12:41,440
of platform

327
00:12:41,440 --> 00:12:43,760
platform integrity means that the

328
00:12:43,760 --> 00:12:45,120
platform firmware

329
00:12:45,120 --> 00:12:47,920
and software has not been modified in

330
00:12:47,920 --> 00:12:51,040
any unauthorized or undetected manner

331
00:12:51,040 --> 00:12:53,680
attestation in the context of platform

332
00:12:53,680 --> 00:12:55,680
attestation means the process

333
00:12:55,680 --> 00:12:58,000
of validating that the platform is

334
00:12:58,000 --> 00:12:58,959
trusted

335
00:12:58,959 --> 00:13:02,240
and it maintains its integrity assurance

336
00:13:02,240 --> 00:13:03,839
is basically a declaration

337
00:13:03,839 --> 00:13:06,480
intended to give confidence so again in

338
00:13:06,480 --> 00:13:08,399
the context of a platform

339
00:13:08,399 --> 00:13:10,560
assurance means providing the confidence

340
00:13:10,560 --> 00:13:12,320
that the platform components are

341
00:13:12,320 --> 00:13:14,959
authentic

342
00:13:15,600 --> 00:13:18,079
so i explained what a firmware is why we

343
00:13:18,079 --> 00:13:19,600
need firmware security

344
00:13:19,600 --> 00:13:22,639
now let's go over

345
00:13:22,639 --> 00:13:25,200
some of our products where i'll explain

346
00:13:25,200 --> 00:13:27,360
you the concepts on how these products

347
00:13:27,360 --> 00:13:29,600
implement security solutions

348
00:13:29,600 --> 00:13:31,839
so the first one is clips this is a

349
00:13:31,839 --> 00:13:36,320
cloud environment for firmware signing

350
00:13:37,760 --> 00:13:42,399
so up until a few years ago

351
00:13:42,399 --> 00:13:45,199
firmware source code were signed with

352
00:13:45,199 --> 00:13:46,240
keys

353
00:13:46,240 --> 00:13:48,800
and the keys were also kept along with

354
00:13:48,800 --> 00:13:50,880
the firmware source code

355
00:13:50,880 --> 00:13:53,600
so storing the keys along with the

356
00:13:53,600 --> 00:13:55,519
source code they are meant to protect

357
00:13:55,519 --> 00:13:58,720
is a sure way for an attacker so that's

358
00:13:58,720 --> 00:13:59,360
where

359
00:13:59,360 --> 00:14:01,680
we implemented a clep solution which is

360
00:14:01,680 --> 00:14:03,920
a cloud environment solution

361
00:14:03,920 --> 00:14:06,560
where we separate both the keys and the

362
00:14:06,560 --> 00:14:08,000
firmware which is going to be

363
00:14:08,000 --> 00:14:10,959
signed with the keys

364
00:14:11,199 --> 00:14:15,040
so i i hope you guys know what a hsm is

365
00:14:15,040 --> 00:14:18,000
in case for people who don't know hsm is

366
00:14:18,000 --> 00:14:19,920
a hardware security module

367
00:14:19,920 --> 00:14:22,399
it's a physical computing device that

368
00:14:22,399 --> 00:14:25,279
safeguards and manages digital keys

369
00:14:25,279 --> 00:14:27,120
and it performs encryption and

370
00:14:27,120 --> 00:14:28,880
decryption functions for

371
00:14:28,880 --> 00:14:31,600
digital signatures and it has strong

372
00:14:31,600 --> 00:14:33,760
authentication and other cryptographic

373
00:14:33,760 --> 00:14:34,720
functions

374
00:14:34,720 --> 00:14:36,800
basically it comes in the form of a

375
00:14:36,800 --> 00:14:38,959
plug-in card or an external device you

376
00:14:38,959 --> 00:14:40,320
can attach it to your

377
00:14:40,320 --> 00:14:43,600
computer or a network server

378
00:14:43,600 --> 00:14:46,320
uh there are cloud hsms available

379
00:14:46,320 --> 00:14:47,920
basically it is a hsm

380
00:14:47,920 --> 00:14:50,399
that is hosted in a cloud environment

381
00:14:50,399 --> 00:14:51,920
more and more leading names in the

382
00:14:51,920 --> 00:14:54,079
industry like google amazon

383
00:14:54,079 --> 00:14:56,880
are coming up with their cloud hsm which

384
00:14:56,880 --> 00:14:59,440
you can subscribe and make use of

385
00:14:59,440 --> 00:15:01,120
it and you use the encryption and

386
00:15:01,120 --> 00:15:02,800
cryptographic functions

387
00:15:02,800 --> 00:15:06,079
provided by the hsm and for your own

388
00:15:06,079 --> 00:15:10,079
application development that is hsm

389
00:15:10,079 --> 00:15:12,560
now we will see how a firmware signing

390
00:15:12,560 --> 00:15:14,480
happens so the first step

391
00:15:14,480 --> 00:15:16,720
for a security implementation is you

392
00:15:16,720 --> 00:15:19,040
need to first sign your firmware

393
00:15:19,040 --> 00:15:21,120
and then we will have the next steps

394
00:15:21,120 --> 00:15:23,120
where we validate whether the firmware

395
00:15:23,120 --> 00:15:25,040
is trusted or not

396
00:15:25,040 --> 00:15:28,079
so the first step is signing so in this

397
00:15:28,079 --> 00:15:30,000
example let's take that the project

398
00:15:30,000 --> 00:15:31,759
source code is built

399
00:15:31,759 --> 00:15:35,360
here the project is bios so i have a

400
00:15:35,360 --> 00:15:36,560
bios source

401
00:15:36,560 --> 00:15:38,959
and i am building the bios source so the

402
00:15:38,959 --> 00:15:43,120
output of this is a binary bios image

403
00:15:43,120 --> 00:15:45,519
so this binary bios image needs to be

404
00:15:45,519 --> 00:15:46,720
signed

405
00:15:46,720 --> 00:15:48,880
only the signed binary image can be

406
00:15:48,880 --> 00:15:50,880
further processed to verify whether it

407
00:15:50,880 --> 00:15:54,160
is trusted or not

408
00:15:54,160 --> 00:15:57,199
so in order to proceed for signing

409
00:15:57,199 --> 00:15:59,839
what we do is we take key parts of the

410
00:15:59,839 --> 00:16:00,720
binary

411
00:16:00,720 --> 00:16:02,639
they are measured and described by

412
00:16:02,639 --> 00:16:05,120
hashes

413
00:16:05,839 --> 00:16:08,320
and the next step is we take these

414
00:16:08,320 --> 00:16:09,440
hashes

415
00:16:09,440 --> 00:16:12,480
and then go through a signing process so

416
00:16:12,480 --> 00:16:13,920
in this signing process

417
00:16:13,920 --> 00:16:17,759
we have shown a cloud hsm in place

418
00:16:17,759 --> 00:16:20,800
so the private key always remains within

419
00:16:20,800 --> 00:16:22,079
the cloud hsm

420
00:16:22,079 --> 00:16:24,560
it doesn't come out of the cloud hsm at

421
00:16:24,560 --> 00:16:26,000
all so that's the

422
00:16:26,000 --> 00:16:28,959
strength of the hsn so we use the

423
00:16:28,959 --> 00:16:30,079
private key

424
00:16:30,079 --> 00:16:34,399
we sign the hash and we create a

425
00:16:34,839 --> 00:16:36,959
signature

426
00:16:36,959 --> 00:16:39,759
now the public key and the signature

427
00:16:39,759 --> 00:16:43,680
gets embedded into the firmware

428
00:16:45,199 --> 00:16:47,600
so from now on when we are going to

429
00:16:47,600 --> 00:16:50,079
verify whether the firmware is authentic

430
00:16:50,079 --> 00:16:52,160
or not we are going to take this

431
00:16:52,160 --> 00:16:54,399
signature and we are going to verify for

432
00:16:54,399 --> 00:16:57,199
its authenticity

433
00:16:57,199 --> 00:16:59,120
so this is how a firmware signing

434
00:16:59,120 --> 00:17:01,759
typically happens

435
00:17:01,759 --> 00:17:04,079
so now that we we saw how the firmware

436
00:17:04,079 --> 00:17:04,880
is signed

437
00:17:04,880 --> 00:17:08,160
we will see how this signed firmware is

438
00:17:08,160 --> 00:17:10,240
used and it's validated

439
00:17:10,240 --> 00:17:13,359
so platfire is one such product which

440
00:17:13,359 --> 00:17:16,240
provides platform firmware resilience so

441
00:17:16,240 --> 00:17:17,679
it provides a secure

442
00:17:17,679 --> 00:17:21,119
route of trust solution

443
00:17:21,119 --> 00:17:24,160
so what is a root of trust root of trust

444
00:17:24,160 --> 00:17:28,000
is basically a set of functions

445
00:17:28,000 --> 00:17:30,320
that is always trusted by the computer's

446
00:17:30,320 --> 00:17:32,000
operating system

447
00:17:32,000 --> 00:17:33,919
so root of trust is a cryptographic

448
00:17:33,919 --> 00:17:35,760
platform security solution

449
00:17:35,760 --> 00:17:37,520
that is used to validate the boot

450
00:17:37,520 --> 00:17:40,240
process and it ensures that the system's

451
00:17:40,240 --> 00:17:41,840
firmware is intact

452
00:17:41,840 --> 00:17:44,000
and it attests that the firmware has not

453
00:17:44,000 --> 00:17:46,559
been tampered with

454
00:17:46,559 --> 00:17:50,000
so by placing this route of trust into a

455
00:17:50,000 --> 00:17:52,400
immutable region on a physical chip

456
00:17:52,400 --> 00:17:53,039
takes it

457
00:17:53,039 --> 00:17:55,760
one step further which means hardware

458
00:17:55,760 --> 00:17:56,799
route of trust

459
00:17:56,799 --> 00:17:59,120
so hardware route of trust strengthens

460
00:17:59,120 --> 00:18:00,000
the system

461
00:18:00,000 --> 00:18:02,799
security even more and it protects the

462
00:18:02,799 --> 00:18:03,600
platform

463
00:18:03,600 --> 00:18:06,559
from booting with unauthorized firmware

464
00:18:06,559 --> 00:18:08,240
so it protects the firmware from

465
00:18:08,240 --> 00:18:10,400
unauthorized modification

466
00:18:10,400 --> 00:18:13,200
if unauthorized modification has

467
00:18:13,200 --> 00:18:15,679
happened it detects that modification

468
00:18:15,679 --> 00:18:18,080
and it recovers from unauthorized

469
00:18:18,080 --> 00:18:21,280
modification of the firmware

470
00:18:21,280 --> 00:18:24,880
so how do we do that so here

471
00:18:24,880 --> 00:18:28,160
there is an fpga fpga is basically

472
00:18:28,160 --> 00:18:30,240
field programmable gate arrays it's an

473
00:18:30,240 --> 00:18:32,320
ic which can be programmed after

474
00:18:32,320 --> 00:18:33,919
manufacturing

475
00:18:33,919 --> 00:18:37,280
in this example we have a lattice fpga

476
00:18:37,280 --> 00:18:40,840
this lattice fpga provides runtime spi

477
00:18:40,840 --> 00:18:43,840
monitoring

478
00:18:44,000 --> 00:18:47,360
so let's take i have the bios here

479
00:18:47,360 --> 00:18:50,400
i'm powering on the system so now

480
00:18:50,400 --> 00:18:54,640
what happens is so we have a hash

481
00:18:54,640 --> 00:18:57,039
so this hash is generated similar to the

482
00:18:57,039 --> 00:18:58,720
signing process i explained

483
00:18:58,720 --> 00:19:01,520
in the previous slide so this hash goes

484
00:19:01,520 --> 00:19:03,120
to the fpga

485
00:19:03,120 --> 00:19:06,880
fpga already has a share already has

486
00:19:06,880 --> 00:19:09,200
a known good configuration available

487
00:19:09,200 --> 00:19:10,640
with it

488
00:19:10,640 --> 00:19:13,840
so it compares and it detects whether

489
00:19:13,840 --> 00:19:14,640
this hash

490
00:19:14,640 --> 00:19:18,000
is valid if it's not valid it is going

491
00:19:18,000 --> 00:19:18,480
to

492
00:19:18,480 --> 00:19:21,360
recover so it already has a golden image

493
00:19:21,360 --> 00:19:23,360
copy available with this

494
00:19:23,360 --> 00:19:26,320
the golden image is basically a trusted

495
00:19:26,320 --> 00:19:28,559
image

496
00:19:28,559 --> 00:19:31,280
so it re-flashes the golden image into

497
00:19:31,280 --> 00:19:32,400
the bmc

498
00:19:32,400 --> 00:19:34,640
thereby the bmc goes into a trusted

499
00:19:34,640 --> 00:19:35,600
state

500
00:19:35,600 --> 00:19:37,840
now the bios the same process is

501
00:19:37,840 --> 00:19:39,520
followed for bios also

502
00:19:39,520 --> 00:19:42,400
it sends its hash the fpga determines

503
00:19:42,400 --> 00:19:44,880
whether the hash is valid or not

504
00:19:44,880 --> 00:19:47,840
if it's not valid again the golden copy

505
00:19:47,840 --> 00:19:48,880
that it has

506
00:19:48,880 --> 00:19:51,600
is flashed into the bios thereby the

507
00:19:51,600 --> 00:19:52,559
bios gets

508
00:19:52,559 --> 00:19:55,919
trusted only when both these pieces

509
00:19:55,919 --> 00:19:57,120
become trusted

510
00:19:57,120 --> 00:19:59,919
the system goes on to boot and it gets

511
00:19:59,919 --> 00:20:01,760
powered on then the control goes to

512
00:20:01,760 --> 00:20:03,670
operating systems

513
00:20:03,670 --> 00:20:05,280
[Music]

514
00:20:05,280 --> 00:20:07,679
so that's how we protect a platform at

515
00:20:07,679 --> 00:20:10,480
the boot stage

516
00:20:11,039 --> 00:20:14,799
so we spoke how a firmware can be signed

517
00:20:14,799 --> 00:20:17,520
and how a platform can be validated for

518
00:20:17,520 --> 00:20:18,480
its trust

519
00:20:18,480 --> 00:20:21,200
now let's go a step further how do we

520
00:20:21,200 --> 00:20:22,640
implement these solutions

521
00:20:22,640 --> 00:20:26,080
in a data center so true is one such

522
00:20:26,080 --> 00:20:27,440
product of us

523
00:20:27,440 --> 00:20:31,360
that provides data center uh security

524
00:20:31,360 --> 00:20:33,760
so provided providing trusted

525
00:20:33,760 --> 00:20:36,640
environment for cloud executions

526
00:20:36,640 --> 00:20:39,120
so this product uses intel security

527
00:20:39,120 --> 00:20:40,000
technologies

528
00:20:40,000 --> 00:20:42,480
and intel security libraries that are

529
00:20:42,480 --> 00:20:44,770
targeted for data centers

530
00:20:44,770 --> 00:20:46,720
[Music]

531
00:20:46,720 --> 00:20:49,360
so when we talk about data centers there

532
00:20:49,360 --> 00:20:49,760
are

533
00:20:49,760 --> 00:20:51,520
this is a typical data center

534
00:20:51,520 --> 00:20:54,480
environment we have workloads

535
00:20:54,480 --> 00:20:58,000
workloads are nothing but an application

536
00:20:58,000 --> 00:21:00,400
or a service deployed on the cloud and

537
00:21:00,400 --> 00:21:02,320
these are the compute nodes

538
00:21:02,320 --> 00:21:04,400
where the workloads will have to be

539
00:21:04,400 --> 00:21:06,000
executed

540
00:21:06,000 --> 00:21:08,480
so let's just say we have a sensitive

541
00:21:08,480 --> 00:21:10,640
workload by sensitive work cloud

542
00:21:10,640 --> 00:21:13,440
i mean a workload which has sensitive

543
00:21:13,440 --> 00:21:15,679
information for example

544
00:21:15,679 --> 00:21:18,000
an application that processes the other

545
00:21:18,000 --> 00:21:20,559
information that's a sensitive workload

546
00:21:20,559 --> 00:21:23,120
so we cannot run this workload on any

547
00:21:23,120 --> 00:21:23,840
node

548
00:21:23,840 --> 00:21:25,760
we have to make sure that the compute

549
00:21:25,760 --> 00:21:27,520
node is trusted first

550
00:21:27,520 --> 00:21:31,120
before executing our sensitive workload

551
00:21:31,120 --> 00:21:33,039
right so how do we assure that the

552
00:21:33,039 --> 00:21:36,000
workloads are secure

553
00:21:36,000 --> 00:21:39,039
so we will implement a platform security

554
00:21:39,039 --> 00:21:39,760
server

555
00:21:39,760 --> 00:21:42,080
and the job of this platform security

556
00:21:42,080 --> 00:21:42,880
server

557
00:21:42,880 --> 00:21:46,240
is to trust all the servers status

558
00:21:46,240 --> 00:21:48,400
it tracks the trust status of all the

559
00:21:48,400 --> 00:21:49,280
servers

560
00:21:49,280 --> 00:21:51,840
and it also tracks the location status

561
00:21:51,840 --> 00:21:52,960
of the servers

562
00:21:52,960 --> 00:21:55,120
why we are tracking the location status

563
00:21:55,120 --> 00:21:59,840
i'll come to it in a little bit

564
00:22:01,360 --> 00:22:04,480
so let's take a small example i have

565
00:22:04,480 --> 00:22:07,200
a different uh workloads here the

566
00:22:07,200 --> 00:22:08,240
workloads

567
00:22:08,240 --> 00:22:10,400
with exclamation mark means that they

568
00:22:10,400 --> 00:22:12,799
are sensitive workloads they can be run

569
00:22:12,799 --> 00:22:15,120
only on trusted nodes

570
00:22:15,120 --> 00:22:17,760
and there is something called as tpm

571
00:22:17,760 --> 00:22:19,039
here

572
00:22:19,039 --> 00:22:22,000
so what is a tpm a tpm is trusted

573
00:22:22,000 --> 00:22:22,960
platform module

574
00:22:22,960 --> 00:22:25,440
it's a computer chip that can securely

575
00:22:25,440 --> 00:22:27,840
store artifacts that are used to

576
00:22:27,840 --> 00:22:31,200
authenticate your platform so a tpm can

577
00:22:31,200 --> 00:22:33,840
be used to store platform measurements

578
00:22:33,840 --> 00:22:36,080
and it helps to ensure that the platform

579
00:22:36,080 --> 00:22:38,159
remains trustworthy

580
00:22:38,159 --> 00:22:40,880
basically it collects the hashes from

581
00:22:40,880 --> 00:22:42,880
all the different firmware components in

582
00:22:42,880 --> 00:22:43,919
your computer

583
00:22:43,919 --> 00:22:47,200
and stores it so there is a trust agent

584
00:22:47,200 --> 00:22:49,520
this is nothing but a small service

585
00:22:49,520 --> 00:22:51,440
the job of this trust agent is to

586
00:22:51,440 --> 00:22:52,640
collect the current

587
00:22:52,640 --> 00:22:55,919
tpm hash information from tpm

588
00:22:55,919 --> 00:22:58,320
and then it gives it to the platform

589
00:22:58,320 --> 00:23:01,360
security server

590
00:23:02,400 --> 00:23:06,000
now with this hash information

591
00:23:06,000 --> 00:23:08,640
the security server already has a known

592
00:23:08,640 --> 00:23:10,559
good configuration with it

593
00:23:10,559 --> 00:23:12,960
so it is going to compare both of them

594
00:23:12,960 --> 00:23:14,880
and it is going to determine the trust

595
00:23:14,880 --> 00:23:16,000
status

596
00:23:16,000 --> 00:23:18,480
only when the status is trusted the

597
00:23:18,480 --> 00:23:20,480
sensitive workloads are going to get

598
00:23:20,480 --> 00:23:23,440
executed the other workloads the ones

599
00:23:23,440 --> 00:23:23,760
with

600
00:23:23,760 --> 00:23:26,000
tick marks that mean that they they

601
00:23:26,000 --> 00:23:28,240
don't have any sensitive information

602
00:23:28,240 --> 00:23:31,360
so they can be run on any computer

603
00:23:31,360 --> 00:23:33,840
any compute nodes they don't need to be

604
00:23:33,840 --> 00:23:37,840
run specifically on a trusted server

605
00:23:43,840 --> 00:23:47,039
so in the last slide i said that the

606
00:23:47,039 --> 00:23:48,720
security server will

607
00:23:48,720 --> 00:23:51,440
will also have and track the location

608
00:23:51,440 --> 00:23:53,039
status of the server

609
00:23:53,039 --> 00:23:55,760
the reason for that is data sovereignity

610
00:23:55,760 --> 00:23:56,080
this

611
00:23:56,080 --> 00:23:57,840
is one of the legal regulatory

612
00:23:57,840 --> 00:23:59,679
complaints when it comes to

613
00:23:59,679 --> 00:24:02,880
cloud solutions so basically certain

614
00:24:02,880 --> 00:24:04,000
countries have these

615
00:24:04,000 --> 00:24:06,880
regulations like their regional data

616
00:24:06,880 --> 00:24:08,240
cannot be processed

617
00:24:08,240 --> 00:24:11,039
outside their region so when you deploy

618
00:24:11,039 --> 00:24:12,240
a cloud solution

619
00:24:12,240 --> 00:24:14,960
you have to ensure that the data the

620
00:24:14,960 --> 00:24:17,200
regional data that is processed

621
00:24:17,200 --> 00:24:20,400
is inside their region so it has to be

622
00:24:20,400 --> 00:24:20,720
done

623
00:24:20,720 --> 00:24:22,880
on a server cloud server that is

624
00:24:22,880 --> 00:24:25,200
deployed inside their region

625
00:24:25,200 --> 00:24:28,720
so that becomes very difficult without

626
00:24:28,720 --> 00:24:32,159
geo tagging so geo tagging the servers

627
00:24:32,159 --> 00:24:34,240
means that you tag that particular

628
00:24:34,240 --> 00:24:35,520
server with that

629
00:24:35,520 --> 00:24:39,200
specific region identifier so with that

630
00:24:39,200 --> 00:24:41,520
when you have your workloads you can

631
00:24:41,520 --> 00:24:43,279
ensure that your workload

632
00:24:43,279 --> 00:24:48,000
is executed only inside that region

633
00:24:48,000 --> 00:24:51,200
so the physical security server

634
00:24:51,200 --> 00:24:53,279
the platform security server that i

635
00:24:53,279 --> 00:24:55,360
explained in the earlier state

636
00:24:55,360 --> 00:24:58,480
will is capable of doing this

637
00:24:58,480 --> 00:25:01,600
so for example this workload has to be

638
00:25:01,600 --> 00:25:01,919
run

639
00:25:01,919 --> 00:25:03,840
only in a server that is hosted in

640
00:25:03,840 --> 00:25:05,360
united states

641
00:25:05,360 --> 00:25:07,840
so the platform security server ensures

642
00:25:07,840 --> 00:25:10,240
that the location status of the server

643
00:25:10,240 --> 00:25:14,159
matches with the geo tag of the workload

644
00:25:14,159 --> 00:25:16,720
so if a european union workload has to

645
00:25:16,720 --> 00:25:17,279
be run

646
00:25:17,279 --> 00:25:19,919
it will not be run in the united states

647
00:25:19,919 --> 00:25:20,559
server

648
00:25:20,559 --> 00:25:23,200
even though the platform is trusted so

649
00:25:23,200 --> 00:25:25,200
similarly the workloads

650
00:25:25,200 --> 00:25:27,440
pertaining to their region will be

651
00:25:27,440 --> 00:25:28,720
executed only

652
00:25:28,720 --> 00:25:32,559
in their regional servers

653
00:25:34,240 --> 00:25:36,480
so who benefits from these firmware

654
00:25:36,480 --> 00:25:38,320
security solutions

655
00:25:38,320 --> 00:25:41,200
i would say everyone benefits so people

656
00:25:41,200 --> 00:25:43,039
who are looking to make their systems

657
00:25:43,039 --> 00:25:45,679
resilient from supply chain attacks

658
00:25:45,679 --> 00:25:48,640
and the people who want to attest

659
00:25:48,640 --> 00:25:50,320
starting from the hardware

660
00:25:50,320 --> 00:25:53,279
all the level up to operating system

661
00:25:53,279 --> 00:25:55,200
cloud service providers

662
00:25:55,200 --> 00:25:57,520
data centers equipment without a

663
00:25:57,520 --> 00:25:58,960
hardware route of trust

664
00:25:58,960 --> 00:26:01,200
are exposed to platform firmware attacks

665
00:26:01,200 --> 00:26:03,600
and they risk the security and privacy

666
00:26:03,600 --> 00:26:05,520
of their customer inves

667
00:26:05,520 --> 00:26:08,720
information and enterprise environments

668
00:26:08,720 --> 00:26:10,559
with security conscious i.t

669
00:26:10,559 --> 00:26:11,919
professionals

670
00:26:11,919 --> 00:26:14,000
so enterprise environments that are

671
00:26:14,000 --> 00:26:16,240
exposed to platform firmware attacks

672
00:26:16,240 --> 00:26:18,159
risks the integrity of personal and

673
00:26:18,159 --> 00:26:24,960
preparatory information

674
00:26:24,960 --> 00:26:28,320
so that's all i have i hope i have given

675
00:26:28,320 --> 00:26:30,559
you a glimpse into the world of firmware

676
00:26:30,559 --> 00:26:39,840
and firmware security

677
00:26:41,679 --> 00:26:43,600
thanks again thanks for this wonderful

678
00:26:43,600 --> 00:26:46,639
opportunity given

679
00:26:49,120 --> 00:26:52,559
thank you and thank you for the

680
00:26:52,559 --> 00:26:55,840
knowledge that you just shared us

681
00:26:58,559 --> 00:27:02,159
so we have a question here uh it's like

682
00:27:02,159 --> 00:27:04,400
are those validations done better in a

683
00:27:04,400 --> 00:27:05,360
software than

684
00:27:05,360 --> 00:27:10,320
firmware like especially for a region

685
00:27:10,880 --> 00:27:14,080
okay uh basically the uh data

686
00:27:14,080 --> 00:27:16,880
sovereignty regulations that i explained

687
00:27:16,880 --> 00:27:19,279
is basically done at a software level

688
00:27:19,279 --> 00:27:22,880
it's not at a firmware level

689
00:27:24,000 --> 00:27:26,000
uh other than that if you talk about

690
00:27:26,000 --> 00:27:27,679
general validations uh

691
00:27:27,679 --> 00:27:29,360
these are two different things software

692
00:27:29,360 --> 00:27:30,960
and firmware

693
00:27:30,960 --> 00:27:33,200
the first step is a validation of the

694
00:27:33,200 --> 00:27:34,000
firmware

695
00:27:34,000 --> 00:27:35,679
so you make sure that your firmware is

696
00:27:35,679 --> 00:27:37,039
secure first

697
00:27:37,039 --> 00:27:39,440
without that as i said anything you run

698
00:27:39,440 --> 00:27:41,120
on top of an unsecure firmware is

699
00:27:41,120 --> 00:27:42,159
unsecured

700
00:27:42,159 --> 00:27:44,320
so even though you have thousands of

701
00:27:44,320 --> 00:27:47,200
security measures put into your software

702
00:27:47,200 --> 00:27:49,120
it's not valid if your firmware is not

703
00:27:49,120 --> 00:27:51,520
secure

704
00:27:53,810 --> 00:27:57,050
[Music]

705
00:28:00,320 --> 00:28:02,720
thank you and uh if we have more

706
00:28:02,720 --> 00:28:05,039
questions uh please do post it here

707
00:28:05,039 --> 00:28:07,760
in either in the twin a window or in the

708
00:28:07,760 --> 00:28:10,559
chat window

709
00:28:14,320 --> 00:28:17,279
so we have a this question is like uh

710
00:28:17,279 --> 00:28:19,200
you need to keep a firmware validation

711
00:28:19,200 --> 00:28:20,799
before software validation

712
00:28:20,799 --> 00:28:23,918
like do we have to keep

713
00:28:25,039 --> 00:28:28,880
um as i said firmware validation is

714
00:28:28,880 --> 00:28:30,399
something different and software

715
00:28:30,399 --> 00:28:33,360
validation is something different

716
00:28:33,360 --> 00:28:35,039
so you can implement a software

717
00:28:35,039 --> 00:28:37,200
validation without implementing firmware

718
00:28:37,200 --> 00:28:39,760
security measures

719
00:28:39,760 --> 00:28:41,520
you can implement firmware security

720
00:28:41,520 --> 00:28:43,360
measures without software validation

721
00:28:43,360 --> 00:28:45,279
also

722
00:28:45,279 --> 00:28:48,159
so firmware security is basically to

723
00:28:48,159 --> 00:28:52,480
make sure that your firmware is trusted

724
00:28:52,480 --> 00:28:54,799
and then you can have as many additional

725
00:28:54,799 --> 00:28:55,840
validations

726
00:28:55,840 --> 00:28:59,040
that you want in your software

727
00:28:59,040 --> 00:29:02,579
[Music]

728
00:29:05,110 --> 00:29:13,069
[Music]

729
00:29:16,730 --> 00:29:20,089
[Music]

730
00:29:20,240 --> 00:29:22,799
so i think these are the questions we

731
00:29:22,799 --> 00:29:24,000
have so far

732
00:29:24,000 --> 00:29:26,240
and thank you so much for patiently

733
00:29:26,240 --> 00:29:28,159
answering all the questions which our

734
00:29:28,159 --> 00:29:31,200
participants had posted and

735
00:29:31,200 --> 00:29:34,640
uh it's it's like honestly uh i mean

736
00:29:34,640 --> 00:29:37,120
thanks a lot for you know sharing your

737
00:29:37,120 --> 00:29:38,399
knowledge regarding the firmware

738
00:29:38,399 --> 00:29:39,600
security

739
00:29:39,600 --> 00:29:41,919
like uh what are the different attacks

740
00:29:41,919 --> 00:29:43,200
and uh

741
00:29:43,200 --> 00:29:45,120
and the different needs of for firmware

742
00:29:45,120 --> 00:29:46,799
security

743
00:29:46,799 --> 00:29:49,360
uh and also we had looked into like the

744
00:29:49,360 --> 00:29:51,360
first steps for implementing the

745
00:29:51,360 --> 00:29:53,919
firmware security as well as ami's

746
00:29:53,919 --> 00:29:55,520
contribution towards the

747
00:29:55,520 --> 00:29:58,640
security solutions and all

748
00:29:58,640 --> 00:30:02,080
so once again uh on behalf of all

749
00:30:02,080 --> 00:30:04,480
our uh like from on behalf of our team

750
00:30:04,480 --> 00:30:05,919
shakti as well as

751
00:30:05,919 --> 00:30:08,799
uh amarita vishwatya freedom we would

752
00:30:08,799 --> 00:30:09,440
like to

753
00:30:09,440 --> 00:30:11,760
thank you a lot and as well as we

754
00:30:11,760 --> 00:30:13,440
honestly do look forward

755
00:30:13,440 --> 00:30:16,559
your uh your uh i mean we

756
00:30:16,559 --> 00:30:19,360
hope you will join us for uh further

757
00:30:19,360 --> 00:30:20,399
future sessions

758
00:30:20,399 --> 00:30:23,840
also yeah thank you thank you so as i

759
00:30:23,840 --> 00:30:25,760
said this is a whole new world

760
00:30:25,760 --> 00:30:27,840
uh most of you might have worked on

761
00:30:27,840 --> 00:30:29,279
firmware already

762
00:30:29,279 --> 00:30:32,159
but this is a different world of where

763
00:30:32,159 --> 00:30:33,120
you have uh

764
00:30:33,120 --> 00:30:35,360
firmware and firmware development and

765
00:30:35,360 --> 00:30:37,919
the security measures to be implemented

766
00:30:37,919 --> 00:30:39,360
in a firmware

767
00:30:39,360 --> 00:30:42,240
so uh yeah i would definitely be looking

768
00:30:42,240 --> 00:30:43,360
forward to

769
00:30:43,360 --> 00:30:45,279
participate in any of the future

770
00:30:45,279 --> 00:30:46,559
sessions and

771
00:30:46,559 --> 00:30:48,880
if you have any doubts or anything

772
00:30:48,880 --> 00:30:52,480
please feel free to contact

773
00:30:53,520 --> 00:30:55,279
sure thank you i'm pretty sure many of

774
00:30:55,279 --> 00:30:57,919
our participants will be interested in

775
00:30:57,919 --> 00:30:59,120
contacting with you for

776
00:30:59,120 --> 00:31:02,158
the further details and all

777
00:31:02,399 --> 00:31:05,840
thank you

