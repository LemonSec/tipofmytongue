1
00:00:00,829 --> 00:00:09,360
so it's<font color="#CCCCCC"> an early</font><font color="#E5E5E5"> stuff everyone I guess</font>

2
00:00:04,430 --> 00:00:12,030
anyway so yeah I'm<font color="#CCCCCC"> samuelson I'm a</font>

3
00:00:09,360 --> 00:00:15,209
security systems engineer with last seen

4
00:00:12,030 --> 00:00:16,770
in Sydney and here to talk about logging

5
00:00:15,210 --> 00:00:18,840
lots of events yesterday there was a

6
00:00:16,770 --> 00:00:20,669
bunch<font color="#E5E5E5"> of talks that produced lots of</font>

7
00:00:18,840 --> 00:00:24,140
events so hopefully there's a few

8
00:00:20,670 --> 00:00:27,180
takeaways here that you can use and

9
00:00:24,140 --> 00:00:29,250
ultimately its CEO dr i'm just<font color="#E5E5E5"> going to</font>

10
00:00:27,180 --> 00:00:32,729
focus on really<font color="#E5E5E5"> the</font><font color="#CCCCCC"> high-level things</font>

11
00:00:29,250 --> 00:00:34,440
that we've learned over the last year or

12
00:00:32,729 --> 00:00:40,199
so of building a logging platform for

13
00:00:34,440 --> 00:00:42,379
<font color="#E5E5E5">atlassian so yeah we went through a</font>

14
00:00:40,200 --> 00:00:45,239
process where we eventually moved from

15
00:00:42,379 --> 00:00:47,760
lots of disparate teams doing different

16
00:00:45,239 --> 00:00:50,430
things to focusing our effort on a

17
00:00:47,760 --> 00:00:52,530
single solution basically boiled down to

18
00:00:50,430 --> 00:00:55,710
a few things we wanted information<font color="#E5E5E5"> or</font>

19
00:00:52,530 --> 00:00:57,690
data<font color="#E5E5E5"> from our logs we wanted logs really</font>

20
00:00:55,710 --> 00:00:58,829
quickly ideally in real time but<font color="#CCCCCC"> if it's</font>

21
00:00:57,690 --> 00:01:02,339
<font color="#E5E5E5">not real time then close enough that</font>

22
00:00:58,829 --> 00:01:04,890
would be the ideal we wanted a lot of

23
00:01:02,340 --> 00:01:07,830
logs right this was the solutions for

24
00:01:04,890 --> 00:01:10,890
the entire company we wanted to siphon

25
00:01:07,830 --> 00:01:12,740
up logs from microservices and big data

26
00:01:10,890 --> 00:01:15,060
centers stuff from everywhere and

27
00:01:12,740 --> 00:01:16,189
ideally we didn't want<font color="#E5E5E5"> to lose any logs</font>

28
00:01:15,060 --> 00:01:18,450
because<font color="#E5E5E5"> that's pretty important</font>

29
00:01:16,189 --> 00:01:21,419
particularly<font color="#E5E5E5"> if these</font><font color="#CCCCCC"> things contain</font>

30
00:01:18,450 --> 00:01:23,189
events that<font color="#E5E5E5"> you actually care about so</font>

31
00:01:21,420 --> 00:01:25,500
let's take<font color="#E5E5E5"> a step back look at log</font>

32
00:01:23,189 --> 00:01:28,169
events are usually data they<font color="#CCCCCC"> usually</font>

33
00:01:25,500 --> 00:01:30,360
look something like this<font color="#CCCCCC"> and I don't</font>

34
00:01:28,170 --> 00:01:32,250
<font color="#CCCCCC">really like these type of logs</font><font color="#E5E5E5"> they're</font>

35
00:01:30,360 --> 00:01:34,740
unstructured I don't know if these IPS

36
00:01:32,250 --> 00:01:36,570
source or destination which of these

37
00:01:34,740 --> 00:01:38,039
ports are actually source and

38
00:01:36,570 --> 00:01:41,520
destination ports are they strings or

39
00:01:38,040 --> 00:01:44,040
integers it's a nightmare so you figure

40
00:01:41,520 --> 00:01:46,140
it out using an ancient I didn't<font color="#E5E5E5"> realize</font>

41
00:01:44,040 --> 00:01:49,100
this was like coined in the 60s for

42
00:01:46,140 --> 00:01:51,810
databases anyway we still do it for logs

43
00:01:49,100 --> 00:01:53,548
using regular expressions and they're

44
00:01:51,810 --> 00:01:56,790
not too bad that one seems<font color="#E5E5E5"> pretty</font>

45
00:01:53,549 --> 00:01:58,229
reasonable this one may be<font color="#E5E5E5"> slightly less</font>

46
00:01:56,790 --> 00:01:59,850
reasonable sometimes you can do

47
00:01:58,229 --> 00:02:02,549
validation because these fields may be

48
00:01:59,850 --> 00:02:03,899
contained decent data actually they look

49
00:02:02,549 --> 00:02:05,579
more<font color="#E5E5E5"> like this though because the top</font>

50
00:02:03,899 --> 00:02:09,060
one is the email RFC and<font color="#CCCCCC"> the bottom one</font>

51
00:02:05,579 --> 00:02:12,329
<font color="#CCCCCC">is the ipv6 and ipv4 rfcs it's a</font>

52
00:02:09,060 --> 00:02:13,319
nightmare so I don't<font color="#CCCCCC"> really</font><font color="#E5E5E5"> like</font>

53
00:02:12,330 --> 00:02:15,390
<font color="#E5E5E5">unstructured logs</font>

54
00:02:13,319 --> 00:02:17,939
if you haven't<font color="#E5E5E5"> guessed by now they</font>

55
00:02:15,390 --> 00:02:19,319
require<font color="#CCCCCC"> ETL the hard to validate because</font>

56
00:02:17,939 --> 00:02:22,260
if someone<font color="#E5E5E5"> just changes the way that</font>

57
00:02:19,319 --> 00:02:23,849
<font color="#CCCCCC">that you know</font><font color="#E5E5E5"> started logging and source</font>

58
00:02:22,260 --> 00:02:26,969
and destination happen to switch in the

59
00:02:23,849 --> 00:02:29,488
last release your logs are basically

60
00:02:26,969 --> 00:02:31,108
useless now and if you're<font color="#E5E5E5"> looking at</font>

61
00:02:29,489 --> 00:02:32,609
<font color="#E5E5E5">this thing you've just restored it out</font>

62
00:02:31,109 --> 00:02:33,810
of some cold storage somewhere and

63
00:02:32,609 --> 00:02:35,519
<font color="#E5E5E5">you're looking</font><font color="#CCCCCC"> at this event there's no</font>

64
00:02:33,810 --> 00:02:37,829
context around it you've just got a

65
00:02:35,519 --> 00:02:40,230
bunch<font color="#E5E5E5"> of strings that don't really mean</font>

66
00:02:37,829 --> 00:02:42,780
much so I<font color="#E5E5E5"> prefer my logs to be</font>

67
00:02:40,230 --> 00:02:45,268
information ideally like this I'm pretty

68
00:02:42,780 --> 00:02:48,510
biased with Jason but it's great right

69
00:02:45,269 --> 00:02:50,040
like<font color="#E5E5E5"> you've got clear integer types for</font>

70
00:02:48,510 --> 00:02:52,500
<font color="#E5E5E5">a source and destination ports you can</font>

71
00:02:50,040 --> 00:02:54,358
see<font color="#CCCCCC"> ip's the entire thing is a key value</font>

72
00:02:52,500 --> 00:02:56,909
<font color="#E5E5E5">store and if you pull this out</font><font color="#CCCCCC"> of</font>

73
00:02:54,359 --> 00:03:00,359
glacier you<font color="#CCCCCC"> still know what the event is</font>

74
00:02:56,909 --> 00:03:02,638
trying to tell you so structured logs

75
00:03:00,359 --> 00:03:04,739
<font color="#CCCCCC">are there parts by the source and</font>

76
00:03:02,639 --> 00:03:06,299
ideally if<font color="#E5E5E5"> you have a decent logging</font>

77
00:03:04,739 --> 00:03:07,459
library<font color="#E5E5E5"> you're not even using regular</font>

78
00:03:06,299 --> 00:03:11,189
expressions because it just produces

79
00:03:07,459 --> 00:03:13,620
logs in JSON format for you and the

80
00:03:11,189 --> 00:03:15,299
crucial<font color="#E5E5E5"> part with JSON is you can</font>

81
00:03:13,620 --> 00:03:17,669
validate it you can write schemas for

82
00:03:15,299 --> 00:03:19,590
this which we've actually done and we

83
00:03:17,669 --> 00:03:21,659
can<font color="#CCCCCC"> then say things like if you're</font>

84
00:03:19,590 --> 00:03:23,459
producing log events that don't have

85
00:03:21,659 --> 00:03:24,870
time stamps or host fields we're not

86
00:03:23,459 --> 00:03:27,509
even<font color="#E5E5E5"> going to accept that in the logging</font>

87
00:03:24,870 --> 00:03:29,489
infrastructure go back and fix that

88
00:03:27,509 --> 00:03:31,198
before you send it<font color="#CCCCCC"> to us again and it</font>

89
00:03:29,489 --> 00:03:32,729
creates a decent loop with developers

90
00:03:31,199 --> 00:03:37,709
sometimes confusing but it ultimately

91
00:03:32,729 --> 00:03:41,250
means that we have<font color="#E5E5E5"> quite rich events the</font>

92
00:03:37,709 --> 00:03:43,470
downside I mean it's a downside so some

93
00:03:41,250 --> 00:03:45,209
people I guess but<font color="#E5E5E5"> you do have to log</font>

94
00:03:43,470 --> 00:03:47,459
the entire key value structure right

95
00:03:45,209 --> 00:03:49,979
like<font color="#CCCCCC"> it's JSON so you have to now carry</font>

96
00:03:47,459 --> 00:03:52,439
a bunch of field headers and if your

97
00:03:49,979 --> 00:03:54,720
message is like a<font color="#E5E5E5"> one-character</font><font color="#CCCCCC"> omit for</font>

98
00:03:52,439 --> 00:03:57,060
a stat log event now you have<font color="#CCCCCC"> all this</font>

99
00:03:54,720 --> 00:03:58,949
packaging around it but<font color="#E5E5E5"> if you're</font>

100
00:03:57,060 --> 00:04:01,769
dumping like stack traces then Jason

101
00:03:58,949 --> 00:04:04,979
doesn't really add much overhead so big

102
00:04:01,769 --> 00:04:07,139
takeaway I think logging in JSON and

103
00:04:04,979 --> 00:04:09,030
structured logging was definitely

104
00:04:07,139 --> 00:04:10,650
something that I didn't consider before

105
00:04:09,030 --> 00:04:12,419
I started on the logging project but

106
00:04:10,650 --> 00:04:14,069
something that going forwards I would

107
00:04:12,419 --> 00:04:17,789
<font color="#E5E5E5">absolutely start with structured looking</font>

108
00:04:14,069 --> 00:04:19,889
first so that was a bit on logging let's

109
00:04:17,789 --> 00:04:21,449
talk about infrastructure that's near

110
00:04:19,889 --> 00:04:23,820
and<font color="#E5E5E5"> dear to my heart as a systems</font>

111
00:04:21,449 --> 00:04:25,800
engineer and<font color="#CCCCCC"> remotes this log is a thing</font>

112
00:04:23,820 --> 00:04:28,080
that hopefully all<font color="#CCCCCC"> of you</font><font color="#E5E5E5"> are doing</font>

113
00:04:25,800 --> 00:04:29,250
probably look something like<font color="#CCCCCC"> this you</font>

114
00:04:28,080 --> 00:04:30,449
know you have<font color="#E5E5E5"> different teams with</font>

115
00:04:29,250 --> 00:04:31,830
different infrastructure they're all

116
00:04:30,449 --> 00:04:33,659
producing logs somewhere they're

117
00:04:31,830 --> 00:04:35,128
shipping them via some agents and

118
00:04:33,659 --> 00:04:36,900
eventually they're getting two teams and

119
00:04:35,129 --> 00:04:38,840
<font color="#CCCCCC">they probably have different ways of</font>

120
00:04:36,900 --> 00:04:41,060
analyzing logs like so<font color="#CCCCCC"> i'm using</font>

121
00:04:38,840 --> 00:04:43,619
<font color="#CCCCCC">elasticsearch i'm using splunk</font>

122
00:04:41,060 --> 00:04:45,030
eventually though some other team comes

123
00:04:43,620 --> 00:04:46,590
along they set up their log stash for

124
00:04:45,030 --> 00:04:48,419
order and<font color="#E5E5E5"> it's great but the log stash</font>

125
00:04:46,590 --> 00:04:52,169
forward is actually misconfigured and

126
00:04:48,419 --> 00:04:53,729
now you develop a bunch<font color="#E5E5E5"> of logs but yeah</font>

127
00:04:52,169 --> 00:04:55,289
that probably happened to you at some

128
00:04:53,729 --> 00:04:56,750
point security seems like hey I want<font color="#E5E5E5"> to</font>

129
00:04:55,289 --> 00:04:59,759
know what's<font color="#CCCCCC"> going on with</font><font color="#E5E5E5"> these logs and</font>

130
00:04:56,750 --> 00:05:02,219
actually<font color="#E5E5E5"> they never arrived looking</font>

131
00:04:59,759 --> 00:05:05,610
closer at log aggregators as in these

132
00:05:02,219 --> 00:05:07,409
components you know you could say<font color="#CCCCCC"> that</font>

133
00:05:05,610 --> 00:05:09,000
this second tier is basically your<font color="#E5E5E5"> log</font>

134
00:05:07,409 --> 00:05:10,680
aggregators right no one<font color="#E5E5E5"> wants to</font>

135
00:05:09,000 --> 00:05:12,629
configure a hundred different log

136
00:05:10,680 --> 00:05:14,009
aggregators you just call it logs<font color="#CCCCCC"> that</font>

137
00:05:12,629 --> 00:05:16,740
<font color="#CCCCCC">atlassian calm and you point everything</font>

138
00:05:14,009 --> 00:05:19,139
at that it's great see ya if this was

139
00:05:16,740 --> 00:05:20,669
logs atlassian<font color="#E5E5E5"> calm we have this one log</font>

140
00:05:19,139 --> 00:05:22,770
stash instance where we've got a<font color="#E5E5E5"> bunch</font>

141
00:05:20,669 --> 00:05:25,680
of sources and<font color="#CCCCCC"> in UDP traffic to it and</font>

142
00:05:22,770 --> 00:05:27,419
it probably has<font color="#CCCCCC"> to cash it somewhere so</font>

143
00:05:25,680 --> 00:05:29,580
<font color="#E5E5E5">it's got this faithful you know either</font>

144
00:05:27,419 --> 00:05:32,190
in memory or on disk you but if you're

145
00:05:29,580 --> 00:05:34,289
<font color="#E5E5E5">in the cloud you know it's pretty prone</font>

146
00:05:32,190 --> 00:05:35,699
to<font color="#CCCCCC"> failure like ec2 will just come along</font>

147
00:05:34,289 --> 00:05:38,580
<font color="#E5E5E5">and be like hey your disk is failed</font>

148
00:05:35,699 --> 00:05:40,949
today sorry about that and the<font color="#CCCCCC"> really</font>

149
00:05:38,580 --> 00:05:43,889
insidious scenario here is that say

150
00:05:40,949 --> 00:05:45,840
elasticsearch is blocking and then it

151
00:05:43,889 --> 00:05:48,300
blocks for a while logstash grant

152
00:05:45,840 --> 00:05:51,388
forward logs it starts blocking logstash

153
00:05:48,300 --> 00:05:53,819
then ohms lose its memory state or it

154
00:05:51,389 --> 00:05:55,349
starts<font color="#CCCCCC"> blocking as well and then</font>

155
00:05:53,819 --> 00:05:56,669
<font color="#CCCCCC">eventually you have</font><font color="#E5E5E5"> asked this log start</font>

156
00:05:55,349 --> 00:06:00,000
freaking out because it can't forward

157
00:05:56,669 --> 00:06:02,068
sources off the actual sources it's a

158
00:06:00,000 --> 00:06:07,520
bit of a nightmare so my other beef

159
00:06:02,069 --> 00:06:09,990
obviously is log aggregators so I really

160
00:06:07,520 --> 00:06:12,299
would encourage moving away from that

161
00:06:09,990 --> 00:06:16,229
that infrastructure and that sort of

162
00:06:12,300 --> 00:06:18,659
architecture what we've<font color="#CCCCCC"> done</font><font color="#E5E5E5"> is it to do</font>

163
00:06:16,229 --> 00:06:21,419
that recapping the pain points we found

164
00:06:18,659 --> 00:06:23,250
if you have lots of log aggregators

165
00:06:21,419 --> 00:06:24,990
they're generally in different states

166
00:06:23,250 --> 00:06:26,340
right some teams will scale<font color="#CCCCCC"> the muck</font>

167
00:06:24,990 --> 00:06:27,900
they'll<font color="#E5E5E5"> be like this log aggregator can</font>

168
00:06:26,340 --> 00:06:29,969
handle<font color="#E5E5E5"> 100,000 events per second that's</font>

169
00:06:27,900 --> 00:06:32,068
great the team next door like it can

170
00:06:29,969 --> 00:06:35,130
handle 50 events per second and then it

171
00:06:32,069 --> 00:06:36,899
spikes and falls<font color="#E5E5E5"> over so reliabilities</font>

172
00:06:35,130 --> 00:06:37,680
hit and miss with aggregators if you've

173
00:06:36,899 --> 00:06:40,919
left it

174
00:06:37,680 --> 00:06:42,560
different teams and scaling them is hard

175
00:06:40,919 --> 00:06:44,969
because you know if you're<font color="#E5E5E5"> dealing with</font>

176
00:06:42,560 --> 00:06:47,009
one set of<font color="#CCCCCC"> log egra Gators you can</font>

177
00:06:44,970 --> 00:06:50,360
generally<font color="#E5E5E5"> manage that but across</font><font color="#CCCCCC"> the</font>

178
00:06:47,009 --> 00:06:53,639
board it's a<font color="#CCCCCC"> hit-and-miss</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> F scale and</font>

179
00:06:50,360 --> 00:06:55,020
delivery time is you know something<font color="#E5E5E5"> that</font>

180
00:06:53,639 --> 00:06:57,270
got touched on a couple of talks

181
00:06:55,020 --> 00:06:59,159
yesterday you know one team might say

182
00:06:57,270 --> 00:07:01,109
laga aggregators suck i'm just<font color="#E5E5E5"> going to</font>

183
00:06:59,160 --> 00:07:02,880
batch everything the s3 once a day but

184
00:07:01,110 --> 00:07:04,259
<font color="#CCCCCC">that's great</font><font color="#E5E5E5"> for a security team he's</font>

185
00:07:02,880 --> 00:07:07,110
like hey I want events from an hour<font color="#E5E5E5"> ago</font>

186
00:07:04,259 --> 00:07:10,530
just wait 25 hours until we<font color="#CCCCCC"> bash at the</font>

187
00:07:07,110 --> 00:07:12,900
<font color="#CCCCCC">s3 things</font><font color="#E5E5E5"> uh-huh so yeah we built</font>

188
00:07:10,530 --> 00:07:16,590
logging as a service this<font color="#CCCCCC"> is a project</font>

189
00:07:12,900 --> 00:07:19,320
that started to basically collect all

190
00:07:16,590 --> 00:07:21,989
the logs<font color="#CCCCCC"> atlassian everything from like</font>

191
00:07:19,320 --> 00:07:24,840
I said our micro services through to the

192
00:07:21,990 --> 00:07:27,060
data since applications and everything

193
00:07:24,840 --> 00:07:30,630
in between you know network engineering

194
00:07:27,060 --> 00:07:32,190
kit any log you can<font color="#E5E5E5"> think of the big</font>

195
00:07:30,630 --> 00:07:34,320
difference from what we had previously

196
00:07:32,190 --> 00:07:36,780
was that we centralized everything we

197
00:07:34,320 --> 00:07:38,280
and i say<font color="#E5E5E5"> this honestly in the platform</font>

198
00:07:36,780 --> 00:07:41,070
<font color="#E5E5E5">as a service team where i was initially</font>

199
00:07:38,280 --> 00:07:43,169
we had seven log in clusters all running

200
00:07:41,070 --> 00:07:45,719
<font color="#CCCCCC">the elk stack all in various different</font>

201
00:07:43,169 --> 00:07:49,049
forms and it was horrible so we built

202
00:07:45,720 --> 00:07:51,120
one massive cluster instead what we'll

203
00:07:49,050 --> 00:07:53,370
get<font color="#E5E5E5"> to that and the big difference was</font>

204
00:07:51,120 --> 00:07:55,610
we implemented the data pipeline<font color="#CCCCCC"> I'll</font>

205
00:07:53,370 --> 00:07:58,760
also<font color="#E5E5E5"> get to that and the final part was</font>

206
00:07:55,610 --> 00:08:02,210
what we really did<font color="#CCCCCC"> was separate our</font>

207
00:07:58,760 --> 00:08:05,820
logging infrastructure and platform from

208
00:08:02,210 --> 00:08:07,680
applications that produce logs so this

209
00:08:05,820 --> 00:08:09,690
was a team that was focused on just

210
00:08:07,680 --> 00:08:12,199
solving the problem of how do we store

211
00:08:09,690 --> 00:08:16,289
and analyze logs as quickly as<font color="#CCCCCC"> possible</font>

212
00:08:12,199 --> 00:08:17,789
so they<font color="#E5E5E5"> built a pipeline based on AWS</font>

213
00:08:16,289 --> 00:08:21,449
<font color="#CCCCCC">Kinesis streams and a bunch of</font>

214
00:08:17,789 --> 00:08:23,070
microservices consuming these streams we

215
00:08:21,449 --> 00:08:25,349
still use log stash and<font color="#E5E5E5"> fluency</font><font color="#CCCCCC"> in</font>

216
00:08:23,070 --> 00:08:27,389
different aggregators but difference

217
00:08:25,349 --> 00:08:29,729
here is that teams manage these

218
00:08:27,389 --> 00:08:32,510
aggregators themselves and they submit

219
00:08:29,729 --> 00:08:35,279
to a single<font color="#CCCCCC"> Kinesis stream in</font><font color="#E5E5E5"> the cloud</font>

220
00:08:32,510 --> 00:08:37,309
what this means is we have a single

221
00:08:35,279 --> 00:08:39,360
<font color="#E5E5E5">point of entry into our log platform</font>

222
00:08:37,309 --> 00:08:40,649
<font color="#E5E5E5">downstream from that is a processing</font>

223
00:08:39,360 --> 00:08:43,079
service this<font color="#CCCCCC"> is the thing that's</font>

224
00:08:40,649 --> 00:08:45,240
validating<font color="#CCCCCC"> JSON schemers for us throws</font>

225
00:08:43,078 --> 00:08:47,160
out logs that are bad and actually then

226
00:08:45,240 --> 00:08:49,440
passes them on to

227
00:08:47,160 --> 00:08:51,269
effectively many downstream streams

228
00:08:49,440 --> 00:08:54,420
these streams are effectively

229
00:08:51,269 --> 00:08:57,420
multiplexed so<font color="#E5E5E5"> for streams that care</font>

230
00:08:54,420 --> 00:08:59,099
about it we give them everything<font color="#E5E5E5"> 1214</font>

231
00:08:57,420 --> 00:09:00,628
streams that don't care<font color="#E5E5E5"> they'll receive</font>

232
00:08:59,100 --> 00:09:03,360
a filtered set of events that are

233
00:09:00,629 --> 00:09:05,430
perhaps just zip can live or analytics

234
00:09:03,360 --> 00:09:06,990
folks or some other type of log and then

235
00:09:05,430 --> 00:09:08,609
finally there's another set<font color="#E5E5E5"> of micro</font>

236
00:09:06,990 --> 00:09:11,389
services that will actually apply

237
00:09:08,610 --> 00:09:13,980
specific logic to get them into

238
00:09:11,389 --> 00:09:16,920
<font color="#E5E5E5">elasticsearch or Zipkin or whatever that</font>

239
00:09:13,980 --> 00:09:19,439
log format our needs to be at the final

240
00:09:16,920 --> 00:09:21,689
destination<font color="#CCCCCC"> but crucially it's not the</font>

241
00:09:19,439 --> 00:09:23,310
same logic as the processing service so

242
00:09:21,689 --> 00:09:26,089
<font color="#E5E5E5">we'd get to decouple everything along</font>

243
00:09:23,310 --> 00:09:30,000
the way so I<font color="#E5E5E5"> mentioned data fly planes</font>

244
00:09:26,089 --> 00:09:31,949
is too in my opinion<font color="#E5E5E5"> that I mean I'm</font>

245
00:09:30,000 --> 00:09:34,980
fairly new to it there's probably many

246
00:09:31,949 --> 00:09:37,109
more it's something<font color="#E5E5E5"> that I hope to share</font>

247
00:09:34,980 --> 00:09:38,970
with you guys because it was really not

248
00:09:37,110 --> 00:09:40,860
something I knew about<font color="#E5E5E5"> them so I started</font>

249
00:09:38,970 --> 00:09:43,769
on this project the first one obviously

250
00:09:40,860 --> 00:09:46,170
is AWS Kinesis streams I'm biased

251
00:09:43,769 --> 00:09:48,089
because this is what we use we primarily

252
00:09:46,170 --> 00:09:50,639
use<font color="#CCCCCC"> canisius streams because our</font>

253
00:09:48,089 --> 00:09:53,790
computers in easy<font color="#E5E5E5"> to so we may as well</font>

254
00:09:50,639 --> 00:09:55,380
do<font color="#CCCCCC"> that but you</font><font color="#E5E5E5"> know that's what the</font>

255
00:09:53,790 --> 00:09:57,630
product spiel says sounds<font color="#E5E5E5"> pretty good</font>

256
00:09:55,380 --> 00:09:59,279
from a log in perspective if you need to

257
00:09:57,630 --> 00:10:03,449
build<font color="#E5E5E5"> it yourself there's a patchy Kafka</font>

258
00:09:59,279 --> 00:10:05,160
incredibly similar architecture<font color="#E5E5E5"> it's</font>

259
00:10:03,449 --> 00:10:08,189
bill seems like a pretty ideal scenario

260
00:10:05,160 --> 00:10:10,889
for logs as well and if<font color="#E5E5E5"> we look at a</font>

261
00:10:08,189 --> 00:10:15,089
stream shout out to<font color="#E5E5E5"> Fabrizio for this</font>

262
00:10:10,889 --> 00:10:17,009
article his logs here this diagram<font color="#CCCCCC"> is</font>

263
00:10:15,089 --> 00:10:19,220
among the best i could find to describe

264
00:10:17,009 --> 00:10:22,439
what a stream is actually looking<font color="#E5E5E5"> like</font>

265
00:10:19,220 --> 00:10:23,790
there's a lot going on on this slide we

266
00:10:22,439 --> 00:10:26,160
have producers on<font color="#CCCCCC"> the far right-hand</font>

267
00:10:23,790 --> 00:10:28,019
side that are producing log events they

268
00:10:26,160 --> 00:10:29,910
randomly select the partition key each

269
00:10:28,019 --> 00:10:32,040
time they want to write this<font color="#E5E5E5"> event to</font>

270
00:10:29,910 --> 00:10:34,259
<font color="#CCCCCC">the stream what a partition key is is</font>

271
00:10:32,040 --> 00:10:36,930
basically just a map of these three

272
00:10:34,259 --> 00:10:39,480
stripper well three shards in the stream

273
00:10:36,930 --> 00:10:41,399
so a<font color="#CCCCCC"> shard is a fixed right unit it</font>

274
00:10:39,480 --> 00:10:43,769
either accepts a thousand events per

275
00:10:41,399 --> 00:10:45,509
second or one<font color="#CCCCCC"> Meg of data per second and</font>

276
00:10:43,769 --> 00:10:48,000
it gives you a really easy way of

277
00:10:45,509 --> 00:10:50,790
scaling the stream like if I have for

278
00:10:48,000 --> 00:10:52,980
<font color="#E5E5E5">Meg of four make a second worth of logs</font>

279
00:10:50,790 --> 00:10:54,629
I need another<font color="#CCCCCC"> shot and it basically</font>

280
00:10:52,980 --> 00:10:57,600
means that i can then divide it<font color="#CCCCCC"> twenty</font>

281
00:10:54,629 --> 00:10:59,470
<font color="#CCCCCC">five percent</font><font color="#E5E5E5"> between each shud an events</font>

282
00:10:57,600 --> 00:11:01,960
flow right to left I'm can

283
00:10:59,470 --> 00:11:03,460
but<font color="#CCCCCC"> whatever that's on the left-hand</font>

284
00:11:01,960 --> 00:11:06,610
side you can see<font color="#E5E5E5"> that a trim verizon</font>

285
00:11:03,460 --> 00:11:08,500
this trim<font color="#E5E5E5"> horizon is crucial in the way</font>

286
00:11:06,610 --> 00:11:11,410
the stream behaves because producers

287
00:11:08,500 --> 00:11:13,720
events that come in actually<font color="#E5E5E5"> exist in</font>

288
00:11:11,410 --> 00:11:15,790
<font color="#E5E5E5">this stream forever until they hit the</font>

289
00:11:13,720 --> 00:11:17,920
trim verizon if the trim verizon is set

290
00:11:15,790 --> 00:11:20,500
to seven days they'll exist in the

291
00:11:17,920 --> 00:11:22,930
stream for seven days what it<font color="#CCCCCC"> means is</font>

292
00:11:20,500 --> 00:11:24,640
that for consumers they can

293
00:11:22,930 --> 00:11:26,410
independently choose their position in

294
00:11:24,640 --> 00:11:28,449
the stream obviously they start at the

295
00:11:26,410 --> 00:11:31,240
trim verizon seven days<font color="#E5E5E5"> ago and they</font>

296
00:11:28,450 --> 00:11:33,670
read their way left<font color="#E5E5E5"> to right what that</font>

297
00:11:31,240 --> 00:11:36,070
means is for a consumer who's behind and

298
00:11:33,670 --> 00:11:38,290
processing slowly they'll eventually get

299
00:11:36,070 --> 00:11:39,640
through this backlog but for consumers

300
00:11:38,290 --> 00:11:41,829
that are processing incredibly quickly

301
00:11:39,640 --> 00:11:44,050
they're<font color="#E5E5E5"> basically sitting right at the</font>

302
00:11:41,830 --> 00:11:46,350
front end behind the producers and

303
00:11:44,050 --> 00:11:48,790
consuming events in real time so<font color="#CCCCCC"> it</font>

304
00:11:46,350 --> 00:11:51,750
<font color="#E5E5E5">means that you can accept the delay</font>

305
00:11:48,790 --> 00:11:54,010
without losing data you're you know

306
00:11:51,750 --> 00:11:55,840
effectively<font color="#E5E5E5"> the impact of something</font>

307
00:11:54,010 --> 00:11:58,360
slowing down or going offline for a

308
00:11:55,840 --> 00:12:00,430
minute or<font color="#CCCCCC"> two is</font><font color="#E5E5E5"> now you're just behind</font>

309
00:11:58,360 --> 00:12:02,020
you haven't actually lost anything<font color="#E5E5E5"> it</font>

310
00:12:00,430 --> 00:12:05,890
<font color="#E5E5E5">sits in the stream until you have a</font>

311
00:12:02,020 --> 00:12:07,510
chance to catch<font color="#E5E5E5"> up on it so yeah that's</font>

312
00:12:05,890 --> 00:12:10,480
a high level for the<font color="#CCCCCC"> Kinesis</font>

313
00:12:07,510 --> 00:12:12,939
architecture looking closely at what we

314
00:12:10,480 --> 00:12:14,740
<font color="#E5E5E5">did this is incredibly simplified that</font>

315
00:12:12,940 --> 00:12:17,800
didn't take us a year to build this but

316
00:12:14,740 --> 00:12:19,570
whatever we have events being created

317
00:12:17,800 --> 00:12:22,420
all across the Atlanta structure

318
00:12:19,570 --> 00:12:25,360
everything produces events sends it to

319
00:12:22,420 --> 00:12:27,060
the lab pipeline<font color="#E5E5E5"> and then as I said we</font>

320
00:12:25,360 --> 00:12:29,730
multiplex those out to different places

321
00:12:27,060 --> 00:12:32,439
one of those this cold storage like

322
00:12:29,730 --> 00:12:34,170
basically it just hits s3 we park all

323
00:12:32,440 --> 00:12:36,550
the<font color="#CCCCCC"> json there and then the other</font>

324
00:12:34,170 --> 00:12:38,949
scenario is we<font color="#E5E5E5"> just copy the logs into</font>

325
00:12:36,550 --> 00:12:43,150
elasticsearch give them to developers to

326
00:12:38,950 --> 00:12:45,940
look out fire<font color="#CCCCCC"> cabana that's great there</font>

327
00:12:43,150 --> 00:12:48,010
is a service here called the tailing

328
00:12:45,940 --> 00:12:49,420
service for a<font color="#E5E5E5"> particular developer he</font>

329
00:12:48,010 --> 00:12:51,610
doesn't want<font color="#CCCCCC"> to see a</font><font color="#E5E5E5"> hundred thousand</font>

330
00:12:49,420 --> 00:12:53,260
events<font color="#E5E5E5"> from the entire infrastructure he</font>

331
00:12:51,610 --> 00:12:55,930
just wants to see the 20 events from his

332
00:12:53,260 --> 00:12:58,090
microservice the tailing service is also

333
00:12:55,930 --> 00:13:01,270
<font color="#CCCCCC">consuming from the stream in the same</font>

334
00:12:58,090 --> 00:13:03,400
way it's<font color="#CCCCCC"> just another consumer but it's</font>

335
00:13:01,270 --> 00:13:06,520
only reading this what the events that

336
00:13:03,400 --> 00:13:08,199
it cares about crucially the events<font color="#E5E5E5"> that</font>

337
00:13:06,520 --> 00:13:10,510
are being created<font color="#E5E5E5"> they only</font><font color="#CCCCCC"> happened</font>

338
00:13:08,200 --> 00:13:12,940
<font color="#E5E5E5">once we didn't actually replicate</font>

339
00:13:10,510 --> 00:13:14,710
copy them anywhere they just sit in the

340
00:13:12,940 --> 00:13:18,310
stream and we have multiple subscribers

341
00:13:14,710 --> 00:13:19,930
so it's very much<font color="#CCCCCC"> pub/sub it</font><font color="#E5E5E5"> also means</font>

342
00:13:18,310 --> 00:13:21,520
that<font color="#E5E5E5"> we can choose the right to link for</font>

343
00:13:19,930 --> 00:13:23,709
<font color="#E5E5E5">the right job so if we want to just go</font>

344
00:13:21,520 --> 00:13:26,319
ahead and replace a component we can do

345
00:13:23,710 --> 00:13:28,660
<font color="#E5E5E5">that</font><font color="#CCCCCC"> we didn't actually change much at</font>

346
00:13:26,320 --> 00:13:30,880
all and you know sounds like<font color="#CCCCCC"> a big deal</font>

347
00:13:28,660 --> 00:13:34,300
<font color="#CCCCCC">to just rip out elasticsearch replace it</font>

348
00:13:30,880 --> 00:13:36,370
with splunk we didn't actually impact

349
00:13:34,300 --> 00:13:38,020
any of the log sources across the

350
00:13:36,370 --> 00:13:40,480
company this was crucial because it took

351
00:13:38,020 --> 00:13:41,800
us<font color="#CCCCCC"> like 12 months to get a few thousand</font>

352
00:13:40,480 --> 00:13:45,310
agents configured across the

353
00:13:41,800 --> 00:13:48,160
infrastructure so then once that was

354
00:13:45,310 --> 00:13:50,770
done you can<font color="#CCCCCC"> just drop</font><font color="#E5E5E5"> in yeah well get</font>

355
00:13:48,160 --> 00:13:52,569
<font color="#E5E5E5">rid of elasticsearch put in</font><font color="#CCCCCC"> splunk yeah</font>

356
00:13:50,770 --> 00:13:55,270
that wasn't<font color="#E5E5E5"> really a big deal because</font>

357
00:13:52,570 --> 00:13:58,270
everything was always sending its logs

358
00:13:55,270 --> 00:14:01,480
to<font color="#CCCCCC"> canisius stream like a</font><font color="#E5E5E5"> single Kenisha</font>

359
00:13:58,270 --> 00:14:02,590
stream and<font color="#CCCCCC"> Kinesis can scale so</font><font color="#E5E5E5"> we don't</font>

360
00:14:01,480 --> 00:14:04,270
have to care too much but<font color="#CCCCCC"> that</font>

361
00:14:02,590 --> 00:14:07,960
decoupling meant that that was actually

362
00:14:04,270 --> 00:14:11,410
<font color="#E5E5E5">quite easy so the takeaways as far as</font>

363
00:14:07,960 --> 00:14:14,770
that architecture goes yeah I would

364
00:14:11,410 --> 00:14:17,199
basically call it out as<font color="#CCCCCC"> Kinesis means</font>

365
00:14:14,770 --> 00:14:19,840
that<font color="#CCCCCC"> our data lost because of incidents</font>

366
00:14:17,200 --> 00:14:21,940
of maintenance or you know<font color="#E5E5E5"> anything</font><font color="#CCCCCC"> that</font>

367
00:14:19,840 --> 00:14:25,420
really has a chance to impact your

368
00:14:21,940 --> 00:14:27,490
logging processing<font color="#CCCCCC"> Kinesis was a massive</font>

369
00:14:25,420 --> 00:14:29,620
help there<font color="#E5E5E5"> and it's elastic right like</font>

370
00:14:27,490 --> 00:14:31,810
when we started out this stream was much

371
00:14:29,620 --> 00:14:34,330
smaller but it's the<font color="#E5E5E5"> same stream that it</font>

372
00:14:31,810 --> 00:14:36,250
was 12 months<font color="#CCCCCC"> ago that it is today it's</font>

373
00:14:34,330 --> 00:14:38,710
just much bigger as many more shots you

374
00:14:36,250 --> 00:14:40,630
<font color="#CCCCCC">know Ishod now he's dealing with maybe</font>

375
00:14:38,710 --> 00:14:41,950
two percent load previously I was

376
00:14:40,630 --> 00:14:43,630
dealing with<font color="#E5E5E5"> twenty percent of the loop</font>

377
00:14:41,950 --> 00:14:46,930
and there's many consumers for the

378
00:14:43,630 --> 00:14:49,300
stream so if you<font color="#E5E5E5"> need to</font><font color="#CCCCCC"> just drop</font>

379
00:14:46,930 --> 00:14:51,099
<font color="#CCCCCC">something out or replace a tool or build</font>

380
00:14:49,300 --> 00:14:54,010
a custom tools specifically for thing

381
00:14:51,100 --> 00:14:54,850
you can do that without impacting any of

382
00:14:54,010 --> 00:14:58,960
you the things that are actually

383
00:14:54,850 --> 00:15:00,970
<font color="#E5E5E5">producing logs so I thought quickly</font>

384
00:14:58,960 --> 00:15:02,260
about swamp I'm sorry from getting

385
00:15:00,970 --> 00:15:06,010
through this pretty quickly but we're

386
00:15:02,260 --> 00:15:08,470
<font color="#CCCCCC">behind on time so yes one there was a</font>

387
00:15:06,010 --> 00:15:09,520
bit<font color="#E5E5E5"> of talk of it yesterday you would</font>

388
00:15:08,470 --> 00:15:12,370
say how does it fit<font color="#CCCCCC"> into this</font>

389
00:15:09,520 --> 00:15:14,970
architecture basically like this we have

390
00:15:12,370 --> 00:15:17,200
a downstream stream in this case this is

391
00:15:14,970 --> 00:15:19,270
everything has been replicated<font color="#CCCCCC"> into the</font>

392
00:15:17,200 --> 00:15:22,370
<font color="#CCCCCC">splunk stream it has its</font><font color="#E5E5E5"> own micro</font>

393
00:15:19,270 --> 00:15:24,620
service that's processing logs and we

394
00:15:22,370 --> 00:15:26,990
in the early days<font color="#E5E5E5"> in the first spike we</font>

395
00:15:24,620 --> 00:15:31,000
had the HTTP event collector which is a

396
00:15:26,990 --> 00:15:34,700
relatively new<font color="#E5E5E5"> component for splunk it's</font>

397
00:15:31,000 --> 00:15:38,150
basically a HTTP endpoint<font color="#E5E5E5"> that accepts</font>

398
00:15:34,700 --> 00:15:39,830
<font color="#E5E5E5">JSON just raw JSON so what this spawn</font>

399
00:15:38,150 --> 00:15:41,990
congestion service does this takes a

400
00:15:39,830 --> 00:15:44,000
batch out of<font color="#CCCCCC"> Kinesis shovels with across</font>

401
00:15:41,990 --> 00:15:46,400
that way and we had a forwarding tier

402
00:15:44,000 --> 00:15:49,190
here which was pretty disastrous because

403
00:15:46,400 --> 00:15:51,709
<font color="#CCCCCC">splunk tcp load balancing</font><font color="#E5E5E5"> I'm not</font><font color="#CCCCCC"> sure</font>

404
00:15:49,190 --> 00:15:53,900
if you guys are have used it it's

405
00:15:51,710 --> 00:15:56,810
atrocious we had like<font color="#E5E5E5"> 20 indexes here</font>

406
00:15:53,900 --> 00:15:58,880
and the forwarding tier which is<font color="#E5E5E5"> getting</font>

407
00:15:56,810 --> 00:16:01,010
nice and we load balance data would then

408
00:15:58,880 --> 00:16:03,380
pick one out of 20 indexes and just

409
00:16:01,010 --> 00:16:04,970
smash that one so we eventually decided

410
00:16:03,380 --> 00:16:07,700
the better option was to get<font color="#CCCCCC"> rid of that</font>

411
00:16:04,970 --> 00:16:09,350
<font color="#E5E5E5">floating tier entirely run the HTTP</font>

412
00:16:07,700 --> 00:16:10,880
event collector<font color="#E5E5E5"> on each of the indexes</font>

413
00:16:09,350 --> 00:16:13,730
just parking here you'll<font color="#CCCCCC"> be in front</font><font color="#E5E5E5"> of</font>

414
00:16:10,880 --> 00:16:15,200
it and what<font color="#CCCCCC"> that meant is that we're no</font>

415
00:16:13,730 --> 00:16:16,910
longer using round-robin for load

416
00:16:15,200 --> 00:16:19,370
balancing but we're using HP<font color="#CCCCCC"> Lee's</font>

417
00:16:16,910 --> 00:16:21,620
connections and now our individual

418
00:16:19,370 --> 00:16:24,950
stream rate per indexer is like five<font color="#E5E5E5"> Meg</font>

419
00:16:21,620 --> 00:16:27,080
so you have 20 indexes that are quite

420
00:16:24,950 --> 00:16:30,140
nicely loaded and they all continue to

421
00:16:27,080 --> 00:16:31,930
run the HTTP event collector overhead on

422
00:16:30,140 --> 00:16:34,189
the<font color="#CCCCCC"> edge to be event collector though is</font>

423
00:16:31,930 --> 00:16:36,109
basically nothing like compared<font color="#CCCCCC"> to your</font>

424
00:16:34,190 --> 00:16:39,290
pausing cues that you deal with in<font color="#E5E5E5"> TCP</font>

425
00:16:36,110 --> 00:16:41,300
it was<font color="#E5E5E5"> great times so if you need to</font>

426
00:16:39,290 --> 00:16:43,910
scale<font color="#E5E5E5"> more it's pretty easy just spin up</font>

427
00:16:41,300 --> 00:16:45,680
more clusters more<font color="#E5E5E5"> Aziz and you'll be</font>

428
00:16:43,910 --> 00:16:49,640
architecture everything basically

429
00:16:45,680 --> 00:16:52,459
remains the same so<font color="#E5E5E5"> we got pretty fast</font>

430
00:16:49,640 --> 00:16:54,800
with this in testing because the stream

431
00:16:52,459 --> 00:16:56,839
contains 24 hours worth of data we have

432
00:16:54,800 --> 00:16:59,180
to read 24 hours when we first boot up

433
00:16:56,839 --> 00:17:03,020
which was a really good chance to sort

434
00:16:59,180 --> 00:17:05,659
of stretch the system we in aggregate

435
00:17:03,020 --> 00:17:07,010
exceeded 250,000 events per second the

436
00:17:05,660 --> 00:17:08,600
baseline<font color="#CCCCCC"> that we were targeting was a</font>

437
00:17:07,010 --> 00:17:11,839
lot lower than that so we have a pretty

438
00:17:08,599 --> 00:17:14,000
healthy<font color="#E5E5E5"> ceiling there and you know kind</font>

439
00:17:11,839 --> 00:17:15,919
<font color="#E5E5E5">of anecdote but an individual indexer</font>

440
00:17:14,000 --> 00:17:17,569
instance was able to achieve something

441
00:17:15,920 --> 00:17:19,819
like eighty thousand events<font color="#CCCCCC"> per second</font>

442
00:17:17,569 --> 00:17:22,220
we were never getting close to that if

443
00:17:19,819 --> 00:17:24,589
we're using<font color="#E5E5E5"> TCP but using the HTML</font>

444
00:17:22,220 --> 00:17:27,800
collector gave us some pretty good legs

445
00:17:24,589 --> 00:17:30,040
we store a lot it's kind<font color="#E5E5E5"> of easier</font>

446
00:17:27,800 --> 00:17:34,010
written like this<font color="#E5E5E5"> maybe the talks</font>

447
00:17:30,040 --> 00:17:35,360
whatever but yeah basically the work

448
00:17:34,010 --> 00:17:37,270
that we've done to get to this point

449
00:17:35,360 --> 00:17:41,080
in implementing<font color="#CCCCCC"> the logging streams and</font>

450
00:17:37,270 --> 00:17:43,370
different<font color="#E5E5E5"> micro services that</font><font color="#CCCCCC"> part logs</font>

451
00:17:41,080 --> 00:17:45,590
it meant getting to this number was

452
00:17:43,370 --> 00:17:47,389
pretty hard work but getting to<font color="#E5E5E5"> the next</font>

453
00:17:45,590 --> 00:17:49,870
trillion events it's pretty<font color="#E5E5E5"> easy like</font>

454
00:17:47,390 --> 00:17:53,000
it's just<font color="#CCCCCC"> the unit of scale thing now</font>

455
00:17:49,870 --> 00:17:54,889
we're in a position where if we<font color="#E5E5E5"> need to</font>

456
00:17:53,000 --> 00:17:56,690
replace components or change it that's

457
00:17:54,890 --> 00:17:58,160
not a scary thing anymore it's something

458
00:17:56,690 --> 00:17:59,900
that a single team within the company

459
00:17:58,160 --> 00:18:01,309
can actually deal with meanwhile<font color="#CCCCCC"> the</font>

460
00:17:59,900 --> 00:18:03,020
rest of the company is able to just

461
00:18:01,309 --> 00:18:05,178
continue to<font color="#E5E5E5"> produce logs in the exact</font>

462
00:18:03,020 --> 00:18:06,889
same way and you know if you spin up a

463
00:18:05,179 --> 00:18:09,919
new tool that doesn't particularly

464
00:18:06,890 --> 00:18:12,559
change anything so<font color="#CCCCCC"> I think we've come a</font>

465
00:18:09,919 --> 00:18:15,679
good way with logging you know we went

466
00:18:12,559 --> 00:18:17,540
from a solution that was basically tied

467
00:18:15,679 --> 00:18:19,309
up in the security intelligence team to

468
00:18:17,540 --> 00:18:22,070
now exporting that to the entire company

469
00:18:19,309 --> 00:18:24,200
so<font color="#CCCCCC"> we now have teams</font><font color="#E5E5E5"> that are everywhere</font>

470
00:18:22,070 --> 00:18:26,210
from growth and product teams security

471
00:18:24,200 --> 00:18:28,190
<font color="#E5E5E5">teams business teams everyone is taking</font>

472
00:18:26,210 --> 00:18:31,700
<font color="#CCCCCC">advantage of this real-time streaming</font>

473
00:18:28,190 --> 00:18:33,860
pipeline for log events and ultimately

474
00:18:31,700 --> 00:18:36,320
the risk of losing data now it's

475
00:18:33,860 --> 00:18:40,309
entirely mitigated because<font color="#CCCCCC"> knie streams</font>

476
00:18:36,320 --> 00:18:41,899
can cash a week of data so from incident

477
00:18:40,309 --> 00:18:44,500
maturity perspective we're in a pretty

478
00:18:41,900 --> 00:18:48,610
good place as far as the summary goes

479
00:18:44,500 --> 00:18:52,340
yeah these are<font color="#E5E5E5"> the real takeaways for me</font>

480
00:18:48,610 --> 00:18:54,260
use JSON if you have a chance to kill

481
00:18:52,340 --> 00:18:56,959
off syslog because no one likes<font color="#E5E5E5"> writing</font>

482
00:18:54,260 --> 00:18:59,480
regular expressions for it<font color="#CCCCCC"> um the</font><font color="#E5E5E5"> big</font>

483
00:18:56,960 --> 00:19:03,770
grin there is that you can enforce clean

484
00:18:59,480 --> 00:19:07,070
set of fields definitely if<font color="#CCCCCC"> you can use</font>

485
00:19:03,770 --> 00:19:09,410
a pipeline it forms a good abstraction

486
00:19:07,070 --> 00:19:11,270
layer between your consumers of events

487
00:19:09,410 --> 00:19:13,929
and producers so that you can have<font color="#CCCCCC"> a</font>

488
00:19:11,270 --> 00:19:17,720
chance to drop things in and out and

489
00:19:13,929 --> 00:19:20,299
yeah a data pipeline will give you a

490
00:19:17,720 --> 00:19:22,880
pretty<font color="#E5E5E5"> nice way of dealing with data</font>

491
00:19:20,299 --> 00:19:26,570
loss well addressing data loss by not

492
00:19:22,880 --> 00:19:28,730
having to do it this architecture that

493
00:19:26,570 --> 00:19:30,620
I've described briefly has scaled pretty

494
00:19:28,730 --> 00:19:33,080
well for us it's taken a long time to

495
00:19:30,620 --> 00:19:35,270
get here but yeah I think<font color="#E5E5E5"> being</font><font color="#CCCCCC"> able to</font>

496
00:19:33,080 --> 00:19:39,080
hit a trillion events in storage and 400

497
00:19:35,270 --> 00:19:43,190
t like that mainly awss work but that's

498
00:19:39,080 --> 00:19:44,510
a pretty good set of growth for us h2b

499
00:19:43,190 --> 00:19:47,390
event collector if you're worried about

500
00:19:44,510 --> 00:19:47,900
using it in<font color="#CCCCCC"> splunk take it from me</font><font color="#E5E5E5"> it</font>

501
00:19:47,390 --> 00:19:50,720
works

502
00:19:47,900 --> 00:19:52,640
it's pretty awesome the<font color="#E5E5E5"> h-2b have been</font>

503
00:19:50,720 --> 00:19:54,890
collected<font color="#CCCCCC"> a team at splunk of actually</font>

504
00:19:52,640 --> 00:19:56,630
doing really good work there and yet if

505
00:19:54,890 --> 00:19:59,230
you<font color="#E5E5E5"> need to look at a log pipeline</font>

506
00:19:56,630 --> 00:20:01,270
definitely check<font color="#E5E5E5"> out kinesis or Kafka</font>

507
00:19:59,230 --> 00:20:04,210
here's some homework to take away

508
00:20:01,270 --> 00:20:06,860
there's a talk from<font color="#CCCCCC"> San Francisco</font>

509
00:20:04,210 --> 00:20:11,530
elastic on last year sam dated a lot of

510
00:20:06,860 --> 00:20:15,070
the work on the elastic search side and

511
00:20:11,530 --> 00:20:18,410
yet it's well worth looking into that

512
00:20:15,070 --> 00:20:21,970
failing that<font color="#CCCCCC"> yelp and</font><font color="#E5E5E5"> apache</font><font color="#CCCCCC"> kafka is</font>

513
00:20:18,410 --> 00:20:25,640
well so<font color="#E5E5E5"> yelp do a lot with apache</font><font color="#CCCCCC"> Casca</font>

514
00:20:21,970 --> 00:20:28,970
so enrico did a talk<font color="#CCCCCC"> at in berlin on</font>

515
00:20:25,640 --> 00:20:31,850
that check it out I'm out of time but if

516
00:20:28,970 --> 00:20:36,610
there's any questions cool five minutes

517
00:20:31,850 --> 00:20:36,610
for questions hit<font color="#CCCCCC"> me yes sir</font>

518
00:20:40,320 --> 00:20:44,409
yeah so the the difference in this

519
00:20:42,790 --> 00:20:46,629
architecture is we're<font color="#CCCCCC"> not using splunk</font>

520
00:20:44,410 --> 00:20:48,370
forwarders at all instead we use

521
00:20:46,630 --> 00:20:50,410
<font color="#CCCCCC">swimming dior logstash depending on what</font>

522
00:20:48,370 --> 00:20:52,059
the<font color="#E5E5E5"> teams want to do or if the</font>

523
00:20:50,410 --> 00:20:53,740
application is doing it natively they

524
00:20:52,059 --> 00:20:56,590
can do that too as long<font color="#CCCCCC"> as it supports</font>

525
00:20:53,740 --> 00:20:58,150
getting it into<font color="#CCCCCC"> Kinesis somehow so yeah</font>

526
00:20:56,590 --> 00:21:01,270
there's definitely<font color="#E5E5E5"> plug-ins for log</font>

527
00:20:58,150 --> 00:21:03,030
stash and plenty but if you have

528
00:21:01,270 --> 00:21:06,150
something<font color="#E5E5E5"> else than that</font><font color="#CCCCCC"> would work too</font>

529
00:21:03,030 --> 00:21:06,149
yes sir

530
00:21:10,170 --> 00:21:15,660
time with you again

531
00:21:17,559 --> 00:21:22,489
yeah I<font color="#CCCCCC"> mean as you've seen we've gone</font>

532
00:21:19,970 --> 00:21:25,249
through a evolutionary process with it

533
00:21:22,489 --> 00:21:27,649
the<font color="#CCCCCC"> Kinesis and data pipeline part</font>

534
00:21:25,249 --> 00:21:29,450
really meant<font color="#CCCCCC"> that we can make a change</font>

535
00:21:27,649 --> 00:21:31,699
later on if we need to<font color="#E5E5E5"> like we went from</font>

536
00:21:29,450 --> 00:21:34,399
an elk cluster that wasn't really

537
00:21:31,700 --> 00:21:35,809
scaling to ask want cluster but three

538
00:21:34,399 --> 00:21:37,518
years<font color="#E5E5E5"> from now if we need to go to a</font>

539
00:21:35,809 --> 00:21:39,289
<font color="#E5E5E5">gray log cluster we can still do that</font>

540
00:21:37,519 --> 00:21:41,119
all the front ends will stay the same

541
00:21:39,289 --> 00:21:42,830
which<font color="#CCCCCC"> is you know when that's tens of</font>

542
00:21:41,119 --> 00:21:49,658
thousands of endpoints that's a huge

543
00:21:42,830 --> 00:21:49,658
wing anyone else

544
00:21:49,860 --> 00:21:53,580
cool thanks very much for having me I'm

545
00:21:52,140 --> 00:21:56,550
sorry<font color="#E5E5E5"> about the</font><font color="#CCCCCC"> accident it's australia</font>

546
00:21:53,580 --> 00:22:03,149
day but i'm sure you can put up<font color="#CCCCCC"> with it</font>

547
00:21:56,550 --> 00:22:03,149
[Applause]

