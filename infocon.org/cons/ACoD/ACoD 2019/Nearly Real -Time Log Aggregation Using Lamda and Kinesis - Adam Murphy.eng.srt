1
00:00:00,030 --> 00:00:06,810
great<font color="#E5E5E5"> success you guys hear me</font>

2
00:00:03,890 --> 00:00:10,650
okay cool

3
00:00:06,810 --> 00:00:13,829
well I'm Adam Murphy<font color="#CCCCCC"> the automation lead</font>

4
00:00:10,650 --> 00:00:16,289
for the<font color="#E5E5E5"> okay the automation lead for the</font>

5
00:00:13,830 --> 00:00:18,779
security team at one medical and one

6
00:00:16,289 --> 00:00:20,609
<font color="#CCCCCC">medical is a primary care organization</font>

7
00:00:18,779 --> 00:00:22,198
who is implementing<font color="#E5E5E5"> both process and</font>

8
00:00:20,609 --> 00:00:26,910
technology with the aim of reducing the

9
00:00:22,199 --> 00:00:29,189
total<font color="#E5E5E5"> cost of care</font><font color="#CCCCCC"> well we're a</font>

10
00:00:26,910 --> 00:00:32,850
relatively<font color="#E5E5E5"> new security team at one</font>

11
00:00:29,189 --> 00:00:35,219
<font color="#E5E5E5">medical and we have logs for sure</font>

12
00:00:32,850 --> 00:00:39,480
but they're kind of scattered<font color="#CCCCCC"> all over</font>

13
00:00:35,219 --> 00:00:43,770
the<font color="#E5E5E5"> place</font><font color="#CCCCCC"> and this this diagram really</font>

14
00:00:39,480 --> 00:00:46,489
<font color="#E5E5E5">doesn't do the problem any justice</font><font color="#CCCCCC"> so we</font>

15
00:00:43,770 --> 00:00:50,039
have logs<font color="#E5E5E5"> they're all over the place</font><font color="#CCCCCC"> and</font>

16
00:00:46,489 --> 00:00:52,468
when an incident responder needs to go

17
00:00:50,039 --> 00:00:54,390
out and you know<font color="#E5E5E5"> piece together the the</font>

18
00:00:52,469 --> 00:00:56,760
scenario<font color="#CCCCCC"> for an</font><font color="#E5E5E5"> incident they have to go</font>

19
00:00:54,390 --> 00:00:59,879
<font color="#CCCCCC">around</font><font color="#E5E5E5"> to all these different tools</font><font color="#CCCCCC"> that</font>

20
00:00:56,760 --> 00:01:03,329
have varying interfaces and different

21
00:00:59,879 --> 00:01:05,188
ways of accessing<font color="#E5E5E5"> that information</font><font color="#CCCCCC"> so</font>

22
00:01:03,329 --> 00:01:07,590
during the<font color="#E5E5E5"> course of an incident this</font>

23
00:01:05,188 --> 00:01:09,059
isn't really good<font color="#CCCCCC"> for our resolution</font>

24
00:01:07,590 --> 00:01:12,420
times and it contributes<font color="#E5E5E5"> to engineer</font>

25
00:01:09,060 --> 00:01:16,350
fatigue so we need to<font color="#E5E5E5"> start pulling us</font>

26
00:01:12,420 --> 00:01:19,380
all together<font color="#CCCCCC"> real-time</font><font color="#E5E5E5"> was never an</font>

27
00:01:16,350 --> 00:01:21,030
original goal<font color="#E5E5E5"> of this system but as we</font>

28
00:01:19,380 --> 00:01:22,890
were developing<font color="#CCCCCC"> a prototype we've we</font>

29
00:01:21,030 --> 00:01:24,600
<font color="#CCCCCC">realize</font><font color="#E5E5E5"> we were pretty closed with three</font>

30
00:01:22,890 --> 00:01:27,930
second event availability at our

31
00:01:24,600 --> 00:01:30,990
destinations<font color="#CCCCCC"> but what were our design</font>

32
00:01:27,930 --> 00:01:32,549
goals<font color="#E5E5E5"> well</font><font color="#CCCCCC"> foremost we wanted to</font><font color="#E5E5E5"> ensure</font>

33
00:01:30,990 --> 00:01:35,280
that there would be a low barrier for

34
00:01:32,549 --> 00:01:37,680
adoption this past fall<font color="#E5E5E5"> one</font><font color="#CCCCCC"> medical</font>

35
00:01:35,280 --> 00:01:39,180
received a new<font color="#E5E5E5"> round of funding with the</font>

36
00:01:37,680 --> 00:01:41,880
intent of doubling our clinical

37
00:01:39,180 --> 00:01:45,479
footprint so needless to<font color="#E5E5E5"> say we're</font>

38
00:01:41,880 --> 00:01:47,009
hiring so<font color="#E5E5E5"> everybody's becoming quite</font>

39
00:01:45,479 --> 00:01:52,408
<font color="#E5E5E5">busy you know trying to meet their</font>

40
00:01:47,009 --> 00:01:53,790
<font color="#E5E5E5">quarterly targets and but we need we</font>

41
00:01:52,409 --> 00:01:55,649
<font color="#CCCCCC">need the help of our sister teams in</font>

42
00:01:53,790 --> 00:01:59,790
order<font color="#E5E5E5"> to pull this off you know they're</font>

43
00:01:55,649 --> 00:02:01,649
the<font color="#CCCCCC"> ones with</font><font color="#E5E5E5"> the logs so when we</font><font color="#CCCCCC"> are</font>

44
00:01:59,790 --> 00:02:02,939
fortunate<font color="#E5E5E5"> enough to get their time we</font>

45
00:02:01,649 --> 00:02:05,729
want to make sure<font color="#CCCCCC"> that we're using it</font>

46
00:02:02,939 --> 00:02:07,169
wisely<font color="#CCCCCC"> you know ideally</font><font color="#E5E5E5"> you know in time</font>

47
00:02:05,729 --> 00:02:09,780
we<font color="#E5E5E5"> would</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> this entire process</font>

48
00:02:07,170 --> 00:02:12,180
automated<font color="#CCCCCC"> and the provisioning process</font>

49
00:02:09,780 --> 00:02:15,379
itself<font color="#E5E5E5"> would generate everything that</font>

50
00:02:12,180 --> 00:02:15,379
would<font color="#E5E5E5"> be</font><font color="#CCCCCC"> required for</font><font color="#E5E5E5"> integration</font>

51
00:02:15,860 --> 00:02:21,750
so we're not going<font color="#CCCCCC"> to know</font><font color="#E5E5E5"> up</font><font color="#CCCCCC"> front</font>

52
00:02:18,480 --> 00:02:23,760
<font color="#E5E5E5">everything</font><font color="#CCCCCC"> that everybody's</font><font color="#E5E5E5"> logging to</font>

53
00:02:21,750 --> 00:02:26,670
so we want to be a bit<font color="#CCCCCC"> flexible</font><font color="#E5E5E5"> with</font>

54
00:02:23,760 --> 00:02:28,709
with<font color="#CCCCCC"> our design requirements</font><font color="#E5E5E5"> so whenever</font>

55
00:02:26,670 --> 00:02:32,480
we choose solutions we want to make sure

56
00:02:28,709 --> 00:02:32,480
<font color="#CCCCCC">that they're environmentally agnostic</font>

57
00:02:32,599 --> 00:02:36,899
<font color="#CCCCCC">I'm the only</font><font color="#E5E5E5"> person on the core</font>

58
00:02:34,950 --> 00:02:39,238
implementation<font color="#E5E5E5"> team at this time so it's</font>

59
00:02:36,900 --> 00:02:45,209
<font color="#CCCCCC">actually in my</font><font color="#E5E5E5"> best interest to offload</font>

60
00:02:39,239 --> 00:02:47,549
as much human<font color="#CCCCCC"> tasks as possible and we</font>

61
00:02:45,209 --> 00:02:50,599
definitely have<font color="#E5E5E5"> all these logs and we've</font>

62
00:02:47,549 --> 00:02:54,180
structured our project in such a way to

63
00:02:50,599 --> 00:02:56,668
to kind of get the most bang for our

64
00:02:54,180 --> 00:02:58,650
buck if you will<font color="#CCCCCC"> one when we're</font>

65
00:02:56,669 --> 00:03:00,750
<font color="#E5E5E5">onboarding so if we have this really</font>

66
00:02:58,650 --> 00:03:04,169
easy process<font color="#E5E5E5"> of onboarding plus you know</font>

67
00:03:00,750 --> 00:03:06,329
we start with<font color="#E5E5E5"> our highest impact of</font>

68
00:03:04,169 --> 00:03:08,159
vlogs<font color="#CCCCCC"> we're going to</font><font color="#E5E5E5"> do a mass volume</font>

69
00:03:06,329 --> 00:03:11,370
<font color="#E5E5E5">rather quickly and the system needs to</font>

70
00:03:08,159 --> 00:03:13,620
<font color="#E5E5E5">be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to cope and while we're</font><font color="#CCCCCC"> on the</font>

71
00:03:11,370 --> 00:03:15,359
topic of<font color="#E5E5E5"> being</font><font color="#CCCCCC"> able to</font><font color="#E5E5E5"> cope</font><font color="#CCCCCC"> you know</font><font color="#E5E5E5"> the</font>

72
00:03:13,620 --> 00:03:19,220
system<font color="#CCCCCC"> also needs</font><font color="#E5E5E5"> to be able to survive</font>

73
00:03:15,359 --> 00:03:19,220
failures and protect our data integrity

74
00:03:19,280 --> 00:03:26,150
<font color="#CCCCCC">and storage is teep so where possible we</font>

75
00:03:24,750 --> 00:03:28,709
should store<font color="#CCCCCC"> everything forever</font>

76
00:03:26,150 --> 00:03:31,919
and since we're a<font color="#E5E5E5"> health care</font>

77
00:03:28,709 --> 00:03:34,169
<font color="#E5E5E5">organization</font><font color="#CCCCCC"> we need to be mindful</font><font color="#E5E5E5"> of</font>

78
00:03:31,919 --> 00:03:36,180
compliance<font color="#CCCCCC"> we do our best to ensure</font><font color="#E5E5E5"> that</font>

79
00:03:34,169 --> 00:03:38,400
<font color="#E5E5E5">patient data doesn't end up on our logs</font>

80
00:03:36,180 --> 00:03:41,970
but of course we have to be<font color="#E5E5E5"> prepared</font><font color="#CCCCCC"> for</font>

81
00:03:38,400 --> 00:03:43,620
<font color="#E5E5E5">that eventuality so we completed this</font>

82
00:03:41,970 --> 00:03:45,900
<font color="#CCCCCC">prototype over</font><font color="#E5E5E5"> the summer I think</font><font color="#CCCCCC"> it</font>

83
00:03:43,620 --> 00:03:49,159
<font color="#E5E5E5">took</font><font color="#CCCCCC"> me</font><font color="#E5E5E5"> about two months</font><font color="#CCCCCC"> give or take a</font>

84
00:03:45,900 --> 00:03:51,629
couple<font color="#CCCCCC"> of weeks to pull</font><font color="#E5E5E5"> it all together</font>

85
00:03:49,159 --> 00:03:54,510
<font color="#CCCCCC">this is what our overall dataflow</font>

86
00:03:51,629 --> 00:03:57,298
concept<font color="#E5E5E5"> looks like so I'll walk</font><font color="#CCCCCC"> through</font>

87
00:03:54,510 --> 00:04:00,769
each of<font color="#CCCCCC"> these components and how each</font>

88
00:03:57,299 --> 00:04:05,400
<font color="#CCCCCC">maps back to our original</font><font color="#E5E5E5"> design</font><font color="#CCCCCC"> targets</font>

89
00:04:00,769 --> 00:04:08,449
so fluency is a complete and pluggable

90
00:04:05,400 --> 00:04:11,220
aggregation system<font color="#E5E5E5"> in and of itself so</font>

91
00:04:08,449 --> 00:04:13,650
and it's also<font color="#E5E5E5"> based in Ruby which makes</font>

92
00:04:11,220 --> 00:04:15,209
it pretty environmentally agnostic<font color="#E5E5E5"> you</font>

93
00:04:13,650 --> 00:04:17,030
should be able<font color="#E5E5E5"> to get it</font><font color="#CCCCCC"> to run</font><font color="#E5E5E5"> anywhere</font>

94
00:04:15,209 --> 00:04:19,649
you can<font color="#E5E5E5"> get the Ruby interpreter to run</font>

95
00:04:17,029 --> 00:04:24,929
this<font color="#E5E5E5"> is also slowed that somebody else</font>

96
00:04:19,649 --> 00:04:26,520
maintains but even though somebody<font color="#E5E5E5"> else</font>

97
00:04:24,930 --> 00:04:27,960
maintains it it's still<font color="#CCCCCC"> a lot of</font>

98
00:04:26,520 --> 00:04:30,030
<font color="#E5E5E5">endpoints to have to make</font>

99
00:04:27,960 --> 00:04:33,330
so we're gonna have to<font color="#E5E5E5"> be good at this</font>

100
00:04:30,030 --> 00:04:36,419
<font color="#E5E5E5">now</font><font color="#CCCCCC"> treasure</font><font color="#E5E5E5"> data</font><font color="#CCCCCC"> the producers of the</font>

101
00:04:33,330 --> 00:04:39,180
<font color="#CCCCCC">fluency software they generate they</font>

102
00:04:36,419 --> 00:04:41,460
generate packages for<font color="#CCCCCC"> Windows Red Hat</font>

103
00:04:39,180 --> 00:04:44,550
and Debian basis they have docker

104
00:04:41,460 --> 00:04:47,729
containers<font color="#CCCCCC"> and it's also available as a</font>

105
00:04:44,550 --> 00:04:49,919
ruby gem<font color="#E5E5E5"> the plugins for fluency are</font>

106
00:04:47,729 --> 00:04:53,520
available as ruby gems themselves and

107
00:04:49,919 --> 00:04:57,270
the out<font color="#E5E5E5"> Kinesis plugin for aw</font><font color="#CCCCCC"> by AWS</font>

108
00:04:53,520 --> 00:04:59,250
labs<font color="#E5E5E5"> is one of them so fluent</font><font color="#CCCCCC"> ii will</font>

109
00:04:57,270 --> 00:05:03,840
buffer and retry by default should

110
00:04:59,250 --> 00:05:06,389
<font color="#E5E5E5">upstream connectivity be lost and it's</font>

111
00:05:03,840 --> 00:05:10,500
also<font color="#E5E5E5"> highly configurable</font><font color="#CCCCCC"> it can pose</font>

112
00:05:06,389 --> 00:05:12,539
<font color="#E5E5E5">most log types</font><font color="#CCCCCC"> just uh</font><font color="#E5E5E5"> just by default</font>

113
00:05:10,500 --> 00:05:15,660
but in case you run into<font color="#CCCCCC"> his custom</font>

114
00:05:12,539 --> 00:05:17,430
scenario<font color="#E5E5E5"> you can also use a</font><font color="#CCCCCC"> regular</font>

115
00:05:15,660 --> 00:05:20,360
expression labels which is the syntax

116
00:05:17,430 --> 00:05:24,270
that<font color="#E5E5E5"> they use for transformation</font><font color="#CCCCCC"> and</font>

117
00:05:20,360 --> 00:05:27,110
being highly configurable<font color="#CCCCCC"> a system only</font>

118
00:05:24,270 --> 00:05:29,818
<font color="#CCCCCC">has so many resources available to</font><font color="#E5E5E5"> it so</font>

119
00:05:27,110 --> 00:05:32,460
it<font color="#E5E5E5"> is</font><font color="#CCCCCC"> possible to</font><font color="#E5E5E5"> configure fluent</font><font color="#CCCCCC"> d--</font>

120
00:05:29,819 --> 00:05:34,409
into a situation where<font color="#E5E5E5"> it</font><font color="#CCCCCC"> would overrun</font>

121
00:05:32,460 --> 00:05:37,830
those resources causing an entire<font color="#E5E5E5"> system</font>

122
00:05:34,409 --> 00:05:39,599
to<font color="#E5E5E5"> lose its mind so but since fluent is</font>

123
00:05:37,830 --> 00:05:41,430
highly configurable<font color="#CCCCCC"> there are a lot of</font>

124
00:05:39,599 --> 00:05:46,080
<font color="#CCCCCC">options to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> mitigate</font><font color="#E5E5E5"> these</font>

125
00:05:41,430 --> 00:05:48,419
risks so fluency also allows<font color="#CCCCCC"> us to get</font>

126
00:05:46,080 --> 00:05:50,250
<font color="#CCCCCC">into our</font><font color="#E5E5E5"> base message object</font><font color="#CCCCCC"> so we're</font>

127
00:05:48,419 --> 00:05:52,830
going<font color="#CCCCCC"> from our unstructured data into</font>

128
00:05:50,250 --> 00:05:56,430
<font color="#CCCCCC">our semi structured data and we our</font>

129
00:05:52,830 --> 00:05:58,800
system only<font color="#E5E5E5"> requires</font><font color="#CCCCCC"> dat upload for tags</font>

130
00:05:56,430 --> 00:06:02,039
to be<font color="#CCCCCC"> in our json object</font><font color="#E5E5E5"> and that is</font>

131
00:05:58,800 --> 00:06:04,169
time which is a valid<font color="#CCCCCC"> timestamp which is</font>

132
00:06:02,039 --> 00:06:08,250
<font color="#CCCCCC">parsable</font><font color="#E5E5E5"> by pythons date util utility</font>

133
00:06:04,169 --> 00:06:10,198
library and an event tag which<font color="#CCCCCC"> is a dot</font>

134
00:06:08,250 --> 00:06:13,020
notation hierarchical data type

135
00:06:10,199 --> 00:06:15,659
indicator the<font color="#CCCCCC"> hostname which is simply</font>

136
00:06:13,020 --> 00:06:19,380
where the message<font color="#CCCCCC"> came from</font><font color="#E5E5E5"> and of</font>

137
00:06:15,659 --> 00:06:22,889
course<font color="#E5E5E5"> the contents of the message</font><font color="#CCCCCC"> so</font>

138
00:06:19,380 --> 00:06:24,930
let's<font color="#E5E5E5"> revisit the diagram just once more</font>

139
00:06:22,889 --> 00:06:27,449
so so we know where we're at

140
00:06:24,930 --> 00:06:31,169
<font color="#CCCCCC">so talk about</font><font color="#E5E5E5"> Kinesis data streams for</font>

141
00:06:27,449 --> 00:06:33,060
aggregation<font color="#E5E5E5"> so once you've worked out</font>

142
00:06:31,169 --> 00:06:34,889
the initial clients<font color="#E5E5E5"> this process</font>

143
00:06:33,060 --> 00:06:38,070
<font color="#E5E5E5">actually becomes repeatable to the point</font>

144
00:06:34,889 --> 00:06:39,839
of being programmatic and since there's

145
00:06:38,070 --> 00:06:41,760
a<font color="#E5E5E5"> Kinesis SDK available</font><font color="#CCCCCC"> for most</font>

146
00:06:39,839 --> 00:06:46,050
language that makes it pretty<font color="#CCCCCC"> and</font><font color="#E5E5E5"> by</font>

147
00:06:41,760 --> 00:06:48,480
<font color="#E5E5E5">immensely agnostic</font><font color="#CCCCCC"> and with a degree s</font>

148
00:06:46,050 --> 00:06:50,310
worrying about most of the<font color="#E5E5E5"> upkeep of the</font>

149
00:06:48,480 --> 00:06:56,280
<font color="#CCCCCC">servants itself I only have to concern</font>

150
00:06:50,310 --> 00:06:58,920
myself with the data<font color="#E5E5E5"> and</font><font color="#CCCCCC"> Kinesis also</font>

151
00:06:56,280 --> 00:07:01,950
stores records for up to<font color="#E5E5E5"> seven days it's</font>

152
00:06:58,920 --> 00:07:04,050
a<font color="#CCCCCC"> time-based queue and the point at</font>

153
00:07:01,950 --> 00:07:08,340
<font color="#E5E5E5">which and record ages out is called the</font>

154
00:07:04,050 --> 00:07:10,530
trim horizon<font color="#CCCCCC"> and of course the scaling</font>

155
00:07:08,340 --> 00:07:13,260
is<font color="#CCCCCC"> just as simple as</font><font color="#E5E5E5"> adding and removing</font>

156
00:07:10,530 --> 00:07:15,840
shards<font color="#CCCCCC"> which</font><font color="#E5E5E5"> this actually pairs up</font>

157
00:07:13,260 --> 00:07:18,150
incredibly nicely<font color="#E5E5E5"> with</font><font color="#CCCCCC"> lambda</font><font color="#E5E5E5"> which</font>

158
00:07:15,840 --> 00:07:20,489
<font color="#E5E5E5">we'll go</font><font color="#CCCCCC"> over more</font><font color="#E5E5E5"> in just a minute but</font>

159
00:07:18,150 --> 00:07:23,130
as you're doing<font color="#E5E5E5"> all this you need to be</font>

160
00:07:20,490 --> 00:07:24,960
<font color="#E5E5E5">you mean to need to be mindful of how</font>

161
00:07:23,130 --> 00:07:27,090
<font color="#CCCCCC">much data you're actually</font><font color="#E5E5E5"> putting in</font>

162
00:07:24,960 --> 00:07:29,729
<font color="#E5E5E5">your streams</font><font color="#CCCCCC"> one of the things you have</font>

163
00:07:27,090 --> 00:07:32,130
<font color="#E5E5E5">to be worried</font><font color="#CCCCCC"> about is your</font><font color="#E5E5E5"> throughput</font>

164
00:07:29,730 --> 00:07:35,280
limits and once you start<font color="#E5E5E5"> triggering</font>

165
00:07:32,130 --> 00:07:37,469
throughput limit errors<font color="#CCCCCC"> it becomes a</font>

166
00:07:35,280 --> 00:07:39,450
little bit hopeless<font color="#CCCCCC"> so you want</font><font color="#E5E5E5"> to make</font>

167
00:07:37,470 --> 00:07:42,420
<font color="#CCCCCC">sure that your consumers</font><font color="#E5E5E5"> and producers</font>

168
00:07:39,450 --> 00:07:45,200
are<font color="#CCCCCC"> self-regulating</font><font color="#E5E5E5"> this took us a</font>

169
00:07:42,420 --> 00:07:47,790
little<font color="#E5E5E5"> bit of time to figure</font><font color="#CCCCCC"> out</font><font color="#E5E5E5"> because</font>

170
00:07:45,200 --> 00:07:50,370
while it's very<font color="#CCCCCC"> well</font><font color="#E5E5E5"> documented what</font>

171
00:07:47,790 --> 00:07:53,070
these limits are<font color="#CCCCCC"> there</font><font color="#E5E5E5"> aren't really a</font>

172
00:07:50,370 --> 00:07:56,100
whole<font color="#CCCCCC"> lot of real-world examples on how</font>

173
00:07:53,070 --> 00:07:58,380
<font color="#E5E5E5">to do this</font><font color="#CCCCCC"> and making</font><font color="#E5E5E5"> it a little bit</font>

174
00:07:56,100 --> 00:08:00,420
more difficult<font color="#CCCCCC"> for us</font><font color="#E5E5E5"> most of that</font>

175
00:07:58,380 --> 00:08:04,680
documentation is about either the<font color="#E5E5E5"> core</font>

176
00:08:00,420 --> 00:08:06,510
AWS<font color="#E5E5E5"> API or something called the Kinesis</font>

177
00:08:04,680 --> 00:08:08,940
producer and consumer libraries which

178
00:08:06,510 --> 00:08:14,730
are additional abstractions<font color="#E5E5E5"> on top of</font>

179
00:08:08,940 --> 00:08:17,760
the API<font color="#E5E5E5"> for</font><font color="#CCCCCC"> form or usability but we're</font>

180
00:08:14,730 --> 00:08:21,150
using Python 3 and the available SDK is

181
00:08:17,760 --> 00:08:22,830
boto 3 and it makes<font color="#E5E5E5"> trying to</font>

182
00:08:21,150 --> 00:08:25,919
<font color="#E5E5E5">cross-reference</font><font color="#CCCCCC"> those materials just</font><font color="#E5E5E5"> a</font>

183
00:08:22,830 --> 00:08:28,409
little bit tricky<font color="#CCCCCC"> but</font><font color="#E5E5E5"> in time it</font><font color="#CCCCCC"> did</font>

184
00:08:25,920 --> 00:08:30,300
become obvious that<font color="#CCCCCC"> all of our producers</font>

185
00:08:28,410 --> 00:08:34,229
<font color="#CCCCCC">and our consumers would have to be</font>

186
00:08:30,300 --> 00:08:37,700
responsible for<font color="#E5E5E5"> themselves</font><font color="#CCCCCC"> and we we</font>

187
00:08:34,229 --> 00:08:40,919
<font color="#CCCCCC">actually ran into another</font><font color="#E5E5E5"> issue of</font>

188
00:08:37,700 --> 00:08:43,380
throughput aside<font color="#CCCCCC"> we didn't actually know</font>

189
00:08:40,919 --> 00:08:44,910
<font color="#E5E5E5">what our initial prototype data sizes</font>

190
00:08:43,380 --> 00:08:47,520
we're going to be so we just start

191
00:08:44,910 --> 00:08:51,030
<font color="#E5E5E5">throwing data at</font><font color="#CCCCCC"> our data streams which</font>

192
00:08:47,520 --> 00:08:53,160
is the beginning<font color="#CCCCCC"> of the chaos so but so</font>

193
00:08:51,030 --> 00:08:55,589
we tried scaling our streams but there's

194
00:08:53,160 --> 00:08:57,569
actually<font color="#E5E5E5"> a</font><font color="#CCCCCC"> two scaling operations</font>

195
00:08:55,590 --> 00:09:00,270
per day<font color="#E5E5E5"> so while we're trying to balance</font>

196
00:08:57,570 --> 00:09:03,570
<font color="#E5E5E5">out</font><font color="#CCCCCC"> our stream and you know</font><font color="#E5E5E5"> quash all</font>

197
00:09:00,270 --> 00:09:06,150
these<font color="#E5E5E5"> errors</font><font color="#CCCCCC"> we can't actually size the</font>

198
00:09:03,570 --> 00:09:08,310
stream appropriately<font color="#E5E5E5"> to to get past it</font>

199
00:09:06,150 --> 00:09:10,709
<font color="#CCCCCC">to learn</font><font color="#E5E5E5"> what our next problems are</font>

200
00:09:08,310 --> 00:09:13,349
going<font color="#CCCCCC"> to be but we actually pleaded</font><font color="#E5E5E5"> very</font>

201
00:09:10,710 --> 00:09:15,180
much with AWS<font color="#E5E5E5"> support and</font><font color="#CCCCCC"> eventually</font>

202
00:09:13,350 --> 00:09:18,410
they<font color="#E5E5E5"> gave us 10 scaling operations per</font>

203
00:09:15,180 --> 00:09:20,910
day which<font color="#E5E5E5"> solve the problem pretty quick</font>

204
00:09:18,410 --> 00:09:24,620
<font color="#CCCCCC">but some of the</font><font color="#E5E5E5"> problems</font><font color="#CCCCCC"> that we</font><font color="#E5E5E5"> were</font>

205
00:09:20,910 --> 00:09:29,520
<font color="#CCCCCC">running into</font><font color="#E5E5E5"> were problems of</font><font color="#CCCCCC"> scale so</font>

206
00:09:24,620 --> 00:09:32,339
<font color="#E5E5E5">we enhanced a</font><font color="#CCCCCC"> fan-out</font><font color="#E5E5E5"> was a relatively</font>

207
00:09:29,520 --> 00:09:36,569
<font color="#E5E5E5">new feature and we we haven't exactly</font>

208
00:09:32,339 --> 00:09:39,029
implemented this portion yet<font color="#E5E5E5"> but we are</font>

209
00:09:36,570 --> 00:09:42,060
setting up to<font color="#CCCCCC"> both</font><font color="#E5E5E5"> develop and test its</font>

210
00:09:39,029 --> 00:09:44,550
scale using multiple consumers<font color="#E5E5E5"> so all of</font>

211
00:09:42,060 --> 00:09:46,109
our streams<font color="#E5E5E5"> are production but the</font>

212
00:09:44,550 --> 00:09:49,829
processors that<font color="#E5E5E5"> we attach to those</font>

213
00:09:46,110 --> 00:09:52,350
streams<font color="#E5E5E5"> are our environment specific</font>

214
00:09:49,830 --> 00:09:55,560
<font color="#E5E5E5">this methodology doesn't work across the</font>

215
00:09:52,350 --> 00:10:02,640
counts<font color="#E5E5E5"> so we we end up provisioning our</font>

216
00:09:55,560 --> 00:10:04,890
environments by<font color="#CCCCCC"> VPC so and he has</font>

217
00:10:02,640 --> 00:10:06,150
<font color="#E5E5E5">fan-out actually offers us another</font>

218
00:10:04,890 --> 00:10:10,740
opportunity as<font color="#E5E5E5"> well</font>

219
00:10:06,150 --> 00:10:16,140
<font color="#E5E5E5">so now we usually transform for a</font>

220
00:10:10,740 --> 00:10:20,339
destination<font color="#E5E5E5"> and we write to all of our</font>

221
00:10:16,140 --> 00:10:23,550
destinations simultaneously so why<font color="#CCCCCC"> not</font>

222
00:10:20,339 --> 00:10:25,950
<font color="#E5E5E5">put enhanced fan-out</font><font color="#CCCCCC"> at the start of the</font>

223
00:10:23,550 --> 00:10:28,650
stream so<font color="#CCCCCC"> that we can create sort</font><font color="#E5E5E5"> of a</font>

224
00:10:25,950 --> 00:10:33,230
many several<font color="#CCCCCC"> many to one relationships</font>

225
00:10:28,650 --> 00:10:36,089
from our sources<font color="#E5E5E5"> to our destinations now</font>

226
00:10:33,230 --> 00:10:40,050
let's talk about lambda<font color="#E5E5E5"> just a little</font>

227
00:10:36,089 --> 00:10:41,610
bit here<font color="#CCCCCC"> so from the</font><font color="#E5E5E5"> last couple</font><font color="#CCCCCC"> slides</font>

228
00:10:40,050 --> 00:10:43,740
you might think that that's<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of</font>

229
00:10:41,610 --> 00:10:46,250
lambdas to manage and of course you're

230
00:10:43,740 --> 00:10:49,050
right<font color="#E5E5E5"> but it doesn't really have to</font><font color="#CCCCCC"> be</font>

231
00:10:46,250 --> 00:10:50,940
you<font color="#E5E5E5"> can you can worry about the</font>

232
00:10:49,050 --> 00:10:53,520
containers but you can pack all the

233
00:10:50,940 --> 00:10:55,260
source into<font color="#CCCCCC"> a single file you'll see</font>

234
00:10:53,520 --> 00:10:57,870
<font color="#CCCCCC">here in a moment</font><font color="#E5E5E5"> that we're not</font><font color="#CCCCCC"> really</font>

235
00:10:55,260 --> 00:11:04,350
<font color="#CCCCCC">concerned about taking too long to</font>

236
00:10:57,870 --> 00:11:06,000
<font color="#E5E5E5">process but the container itself has the</font>

237
00:11:04,350 --> 00:11:07,290
entry point configurable and you can put

238
00:11:06,000 --> 00:11:09,450
environment variables around<font color="#E5E5E5"> your</font>

239
00:11:07,290 --> 00:11:12,089
container

240
00:11:09,450 --> 00:11:13,560
and as I was<font color="#E5E5E5"> mentioning earlier</font><font color="#CCCCCC"> we scale</font>

241
00:11:12,090 --> 00:11:16,500
<font color="#CCCCCC">up and down</font><font color="#E5E5E5"> with shards on our data</font>

242
00:11:13,560 --> 00:11:17,969
streams<font color="#E5E5E5"> and the concurrency or the</font>

243
00:11:16,500 --> 00:11:20,130
number of simultaneous lambda

244
00:11:17,970 --> 00:11:23,820
<font color="#E5E5E5">invocations that you can have at one</font>

245
00:11:20,130 --> 00:11:25,439
time<font color="#E5E5E5"> scales to match these streams that</font>

246
00:11:23,820 --> 00:11:29,070
<font color="#E5E5E5">are</font><font color="#CCCCCC"> being consumed</font><font color="#E5E5E5"> so this just</font>

247
00:11:25,440 --> 00:11:31,380
automatically happens with<font color="#CCCCCC"> lambda but we</font>

248
00:11:29,070 --> 00:11:33,450
also decided<font color="#CCCCCC"> that our lambdas</font><font color="#E5E5E5"> are going</font>

249
00:11:31,380 --> 00:11:35,460
to have<font color="#E5E5E5"> another function</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> are going</font>

250
00:11:33,450 --> 00:11:40,310
<font color="#CCCCCC">to rate and filter the data</font><font color="#E5E5E5"> for hot</font>

251
00:11:35,460 --> 00:11:43,800
storage<font color="#E5E5E5"> so we call this process</font>

252
00:11:40,310 --> 00:11:46,560
<font color="#CCCCCC">determining the events fidelity</font><font color="#E5E5E5"> and our</font>

253
00:11:43,800 --> 00:11:50,430
goal with with<font color="#E5E5E5"> this with this mechanism</font>

254
00:11:46,560 --> 00:11:52,589
<font color="#E5E5E5">is to focus the data for hot storage</font>

255
00:11:50,430 --> 00:11:54,449
because right now if we go all<font color="#CCCCCC"> the way</font>

256
00:11:52,590 --> 00:11:56,520
back<font color="#E5E5E5"> to the beginning</font><font color="#CCCCCC"> like we have data</font>

257
00:11:54,450 --> 00:11:58,230
everywhere<font color="#CCCCCC"> and in that data there is</font>

258
00:11:56,520 --> 00:12:00,750
going to<font color="#CCCCCC"> be a lot of</font><font color="#E5E5E5"> clutter so we want</font>

259
00:11:58,230 --> 00:12:02,220
to spend<font color="#E5E5E5"> a lot a bit</font><font color="#CCCCCC"> of time going</font>

260
00:12:00,750 --> 00:12:07,140
through<font color="#E5E5E5"> and really becoming intimate</font>

261
00:12:02,220 --> 00:12:12,390
<font color="#E5E5E5">with what we're collecting so moving</font>

262
00:12:07,140 --> 00:12:14,939
from<font color="#E5E5E5"> just the Kinesis</font><font color="#CCCCCC"> API</font><font color="#E5E5E5"> and into and</font>

263
00:12:12,390 --> 00:12:17,370
into a<font color="#CCCCCC"> lambda the data is actually a</font>

264
00:12:14,940 --> 00:12:19,500
little<font color="#E5E5E5"> bit different so there is a</font>

265
00:12:17,370 --> 00:12:22,710
trigger envelope<font color="#E5E5E5"> around the Kinesis data</font>

266
00:12:19,500 --> 00:12:24,570
and the<font color="#E5E5E5"> Kinesis data is the the kinesin</font>

267
00:12:22,710 --> 00:12:26,040
<font color="#CCCCCC">Kinesis envelope</font><font color="#E5E5E5"> it's a little bit</font>

268
00:12:24,570 --> 00:12:27,870
different as well

269
00:12:26,040 --> 00:12:31,140
<font color="#E5E5E5">it once you get to the actual data</font>

270
00:12:27,870 --> 00:12:32,880
itself<font color="#E5E5E5"> it's the same but</font><font color="#CCCCCC"> you're you</font>

271
00:12:31,140 --> 00:12:34,080
that's gonna<font color="#E5E5E5"> probably trip you up in the</font>

272
00:12:32,880 --> 00:12:36,240
beginning<font color="#CCCCCC"> if you decide to take on</font>

273
00:12:34,080 --> 00:12:39,330
<font color="#E5E5E5">something like this you can grab a</font>

274
00:12:36,240 --> 00:12:43,520
sample sample<font color="#E5E5E5"> object for your</font>

275
00:12:39,330 --> 00:12:43,520
<font color="#E5E5E5">development testing from the lambda UI</font>

276
00:12:44,090 --> 00:12:50,330
<font color="#CCCCCC">so this one was a hard lesson to learn</font>

277
00:12:46,440 --> 00:12:53,790
<font color="#E5E5E5">capture</font><font color="#CCCCCC"> and handle every error</font><font color="#E5E5E5"> so if</font>

278
00:12:50,330 --> 00:12:56,610
your lambda<font color="#E5E5E5"> fails it will retry the</font>

279
00:12:53,790 --> 00:12:59,010
batch<font color="#E5E5E5"> and this reset this sets the stage</font>

280
00:12:56,610 --> 00:13:01,530
for data duplication<font color="#CCCCCC"> now there are cases</font>

281
00:12:59,010 --> 00:13:04,439
<font color="#CCCCCC">where</font><font color="#E5E5E5"> you it is okay to let the land</font>

282
00:13:01,530 --> 00:13:06,569
that<font color="#E5E5E5"> lambda fail but you have to accept</font>

283
00:13:04,440 --> 00:13:10,080
<font color="#E5E5E5">that</font><font color="#CCCCCC"> it is going</font><font color="#E5E5E5"> to retry the entire</font>

284
00:13:06,570 --> 00:13:12,390
batch<font color="#E5E5E5"> and not every error is</font><font color="#CCCCCC"> going to</font><font color="#E5E5E5"> be</font>

285
00:13:10,080 --> 00:13:14,880
yours as we were<font color="#E5E5E5"> starting</font><font color="#CCCCCC"> to round the</font>

286
00:13:12,390 --> 00:13:18,720
corner and<font color="#E5E5E5"> really get our errors handled</font>

287
00:13:14,880 --> 00:13:20,760
ourselves<font color="#E5E5E5"> the</font><font color="#CCCCCC"> kinis of service itself</font>

288
00:13:18,720 --> 00:13:22,589
started to spewing its own internal

289
00:13:20,760 --> 00:13:28,329
errors

290
00:13:22,589 --> 00:13:33,009
but when<font color="#E5E5E5"> we so as your uh last night</font>

291
00:13:28,329 --> 00:13:34,868
<font color="#E5E5E5">place here right okay</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> while you're</font>

292
00:13:33,009 --> 00:13:36,459
<font color="#E5E5E5">setting up to you capture and handle</font>

293
00:13:34,869 --> 00:13:40,059
your<font color="#E5E5E5"> errors this is a good point to</font>

294
00:13:36,459 --> 00:13:42,758
instrument<font color="#CCCCCC"> from deeper debugging you're</font>

295
00:13:40,059 --> 00:13:44,230
not going<font color="#E5E5E5"> to wait</font><font color="#CCCCCC"> you're going</font><font color="#E5E5E5"> to want</font>

296
00:13:42,759 --> 00:13:47,139
to<font color="#E5E5E5"> know what's happening</font><font color="#CCCCCC"> inside your</font>

297
00:13:44,230 --> 00:13:48,999
lambda<font color="#E5E5E5"> and</font><font color="#CCCCCC"> eight AOS unfortunately is</font>

298
00:13:47,139 --> 00:13:51,100
<font color="#CCCCCC">very little help so you</font><font color="#E5E5E5"> can get some</font>

299
00:13:48,999 --> 00:13:52,600
<font color="#CCCCCC">very</font><font color="#E5E5E5"> high level metrics but if you want</font>

300
00:13:51,100 --> 00:13:54,730
the detailed information<font color="#CCCCCC"> about what's</font>

301
00:13:52,600 --> 00:13:56,139
<font color="#CCCCCC">going</font><font color="#E5E5E5"> on inside your function</font><font color="#CCCCCC"> you're</font>

302
00:13:54,730 --> 00:14:00,639
going<font color="#CCCCCC"> to need to provide that yourself</font>

303
00:13:56,139 --> 00:14:02,529
<font color="#E5E5E5">and also the lambdas execution</font><font color="#CCCCCC"> roll is</font>

304
00:14:00,639 --> 00:14:04,360
<font color="#E5E5E5">going to need to be updated</font><font color="#CCCCCC"> to allow</font>

305
00:14:02,529 --> 00:14:05,949
<font color="#E5E5E5">interaction with services</font><font color="#CCCCCC"> like cloud</font>

306
00:14:04,360 --> 00:14:12,999
watch to help collect<font color="#CCCCCC"> these logs and</font>

307
00:14:05,949 --> 00:14:16,269
metrics<font color="#CCCCCC"> code so this is a bit of what</font>

308
00:14:12,999 --> 00:14:18,129
I'm<font color="#E5E5E5"> talking about with with lambda</font>

309
00:14:16,269 --> 00:14:21,220
function this this is our<font color="#CCCCCC"> spam Splunk</font>

310
00:14:18,129 --> 00:14:23,410
<font color="#E5E5E5">pan</font><font color="#CCCCCC"> OS Handler</font><font color="#E5E5E5"> and you can see the very</font>

311
00:14:21,220 --> 00:14:25,480
<font color="#CCCCCC">top line is a capture</font><font color="#E5E5E5"> of time time and</font>

312
00:14:23,410 --> 00:14:28,689
we do something<font color="#CCCCCC"> very similar at</font><font color="#E5E5E5"> the</font>

313
00:14:25,480 --> 00:14:31,869
bottom and this is<font color="#E5E5E5"> the</font><font color="#CCCCCC"> rate limiting</font><font color="#E5E5E5"> our</font>

314
00:14:28,689 --> 00:14:35,980
batch sizes are<font color="#E5E5E5"> roughly 500</font><font color="#CCCCCC"> records</font>

315
00:14:31,869 --> 00:14:37,899
which which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the maximum put records</font>

316
00:14:35,980 --> 00:14:40,449
<font color="#E5E5E5">request that you can have on the Kinesis</font>

317
00:14:37,899 --> 00:14:44,290
<font color="#E5E5E5">api so</font><font color="#CCCCCC"> we only take</font><font color="#E5E5E5"> what we can</font><font color="#CCCCCC"> no we</font>

318
00:14:40,449 --> 00:14:46,389
can process on a single call<font color="#CCCCCC"> and the</font>

319
00:14:44,290 --> 00:14:48,790
second line<font color="#CCCCCC"> down from the top actually</font>

320
00:14:46,389 --> 00:14:51,040
the<font color="#CCCCCC"> within the function is the</font>

321
00:14:48,790 --> 00:14:53,769
initializing the list of records<font color="#E5E5E5"> you're</font>

322
00:14:51,040 --> 00:14:56,769
going to post<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> Canisius</font><font color="#CCCCCC"> api</font><font color="#E5E5E5"> so</font>

323
00:14:53,769 --> 00:14:58,540
it's simple for<font color="#CCCCCC"> loop</font><font color="#E5E5E5"> and we generate</font>

324
00:14:56,769 --> 00:15:03,040
this thing called a hash<font color="#CCCCCC"> key now hash</font>

325
00:14:58,540 --> 00:15:04,809
key gets assigned<font color="#E5E5E5"> a couple lines down to</font>

326
00:15:03,040 --> 00:15:06,849
<font color="#E5E5E5">this partition key and the record</font>

327
00:15:04,809 --> 00:15:08,049
envelope so<font color="#CCCCCC"> you as you're building an of</font>

328
00:15:06,850 --> 00:15:10,929
<font color="#E5E5E5">record itself you're building an</font>

329
00:15:08,049 --> 00:15:13,809
envelope for that<font color="#E5E5E5"> record</font><font color="#CCCCCC"> the hash key</font>

330
00:15:10,929 --> 00:15:15,459
determines which shard<font color="#E5E5E5"> this</font><font color="#CCCCCC"> records</font>

331
00:15:13,809 --> 00:15:17,290
<font color="#E5E5E5">going to be written</font><font color="#CCCCCC"> to so for every</font>

332
00:15:15,459 --> 00:15:18,969
record we generate this random hash key

333
00:15:17,290 --> 00:15:24,368
to make sure<font color="#CCCCCC"> that we're writing evenly</font>

334
00:15:18,970 --> 00:15:27,699
across all<font color="#E5E5E5"> our shards</font><font color="#CCCCCC"> all the time</font><font color="#E5E5E5"> keep</font>

335
00:15:24,369 --> 00:15:29,049
going down<font color="#E5E5E5"> so right here in the middle</font>

336
00:15:27,699 --> 00:15:31,419
this<font color="#CCCCCC"> is our put records request and</font>

337
00:15:29,049 --> 00:15:33,730
notice I said capture every error but

338
00:15:31,419 --> 00:15:35,829
I'm not capturing<font color="#E5E5E5"> any errors</font><font color="#CCCCCC"> that happen</font>

339
00:15:33,730 --> 00:15:36,250
with this<font color="#E5E5E5"> so there</font><font color="#CCCCCC"> are some cases</font><font color="#E5E5E5"> where</font>

340
00:15:35,829 --> 00:15:38,620
<font color="#CCCCCC">we</font>

341
00:15:36,250 --> 00:15:41,320
<font color="#E5E5E5">be okay</font><font color="#CCCCCC"> for your lambda for the furthest</font>

342
00:15:38,620 --> 00:15:43,180
to fail so the exception that<font color="#E5E5E5"> gets</font>

343
00:15:41,320 --> 00:15:46,000
raised from this is an actual is

344
00:15:43,180 --> 00:15:48,250
actually a core API call<font color="#E5E5E5"> so if this</font>

345
00:15:46,000 --> 00:15:52,330
<font color="#E5E5E5">entire thing fails</font><font color="#CCCCCC"> it's okay to retry</font>

346
00:15:48,250 --> 00:15:55,960
the batch<font color="#E5E5E5"> and mentioning processing all</font>

347
00:15:52,330 --> 00:15:57,550
the<font color="#CCCCCC"> errors so</font><font color="#E5E5E5"> you check the</font><font color="#CCCCCC"> envelope for</font>

348
00:15:55,960 --> 00:16:00,370
<font color="#CCCCCC">the failed record count and you</font><font color="#E5E5E5"> can</font>

349
00:15:57,550 --> 00:16:01,959
<font color="#E5E5E5">continue down</font><font color="#CCCCCC"> and you notice</font>

350
00:16:00,370 --> 00:16:04,180
well failed record count<font color="#E5E5E5"> is greater than</font>

351
00:16:01,960 --> 00:16:05,740
<font color="#E5E5E5">zero</font><font color="#CCCCCC"> you know</font><font color="#E5E5E5"> once you start getting</font>

352
00:16:04,180 --> 00:16:07,180
<font color="#E5E5E5">errors in your batch you want to make</font>

353
00:16:05,740 --> 00:16:10,720
<font color="#CCCCCC">sure you process them until there are</font>

354
00:16:07,180 --> 00:16:12,939
none<font color="#CCCCCC"> left because then you would have a</font>

355
00:16:10,720 --> 00:16:15,630
partial failure in your<font color="#E5E5E5"> batch and then</font>

356
00:16:12,940 --> 00:16:20,350
<font color="#E5E5E5">again duplicate records or</font><font color="#CCCCCC"> even worse</font>

357
00:16:15,630 --> 00:16:23,490
<font color="#CCCCCC">missing missing records is that</font><font color="#E5E5E5"> it is</font>

358
00:16:20,350 --> 00:16:28,540
<font color="#E5E5E5">--slide yeah</font><font color="#CCCCCC"> that's it for this light</font>

359
00:16:23,490 --> 00:16:33,700
<font color="#CCCCCC">okay so let's talk a</font><font color="#E5E5E5"> bit fire hose just</font>

360
00:16:28,540 --> 00:16:35,530
a little bit here<font color="#CCCCCC"> so fire hose scales</font>

361
00:16:33,700 --> 00:16:37,510
automatically for<font color="#E5E5E5"> the data size and it</font>

362
00:16:35,530 --> 00:16:40,180
simplifies<font color="#CCCCCC"> the</font><font color="#E5E5E5"> delivery to destinations</font>

363
00:16:37,510 --> 00:16:42,460
there's why we're considering it<font color="#E5E5E5"> the</font>

364
00:16:40,180 --> 00:16:44,439
delivery<font color="#CCCCCC"> stream consumers tend</font><font color="#E5E5E5"> to be</font>

365
00:16:42,460 --> 00:16:46,660
more adaptable to<font color="#E5E5E5"> scaling operations as</font>

366
00:16:44,440 --> 00:16:49,510
well we didn't initially explore this

367
00:16:46,660 --> 00:16:51,400
<font color="#E5E5E5">because being in</font><font color="#CCCCCC"> healthcare go back to</font>

368
00:16:49,510 --> 00:16:55,630
the beginning<font color="#E5E5E5"> HIPAA is a thing</font>

369
00:16:51,400 --> 00:16:57,670
so in<font color="#CCCCCC"> healthcare if you have external</font>

370
00:16:55,630 --> 00:16:59,050
services that you<font color="#CCCCCC"> need to be</font><font color="#E5E5E5"> secure they</font>

371
00:16:57,670 --> 00:17:01,329
need to be wrapped<font color="#E5E5E5"> in something called a</font>

372
00:16:59,050 --> 00:17:04,839
business<font color="#E5E5E5"> associate agreement or a</font><font color="#CCCCCC"> BA a</font>

373
00:17:01,330 --> 00:17:06,339
and<font color="#E5E5E5"> a</font><font color="#CCCCCC"> TRS is actually</font><font color="#E5E5E5"> starting to get</font>

374
00:17:04,839 --> 00:17:07,740
really<font color="#E5E5E5"> good at this but not everything</font>

375
00:17:06,339 --> 00:17:11,560
is on it

376
00:17:07,740 --> 00:17:14,680
data firehose was added to the BAA<font color="#E5E5E5"> just</font>

377
00:17:11,560 --> 00:17:16,770
<font color="#CCCCCC">ahead of reinvent this past year so now</font>

378
00:17:14,680 --> 00:17:19,390
we're starting<font color="#CCCCCC"> to</font><font color="#E5E5E5"> look into it</font><font color="#CCCCCC"> and</font>

379
00:17:16,770 --> 00:17:21,939
although we know we just sort of built

380
00:17:19,390 --> 00:17:23,980
our own<font color="#CCCCCC"> it makes sense</font><font color="#E5E5E5"> for this</font><font color="#CCCCCC"> to to</font>

381
00:17:21,939 --> 00:17:25,329
pivot<font color="#E5E5E5"> and try to work</font><font color="#CCCCCC"> it in because we</font>

382
00:17:23,980 --> 00:17:30,760
we still<font color="#E5E5E5"> have a lot of destination</font>

383
00:17:25,329 --> 00:17:34,540
issues and the promise of<font color="#E5E5E5"> firehose</font><font color="#CCCCCC"> sets</font>

384
00:17:30,760 --> 00:17:37,510
us up for a better<font color="#E5E5E5"> success in and also</font>

385
00:17:34,540 --> 00:17:40,570
<font color="#E5E5E5">reduces my overhead</font><font color="#CCCCCC"> it also sets the</font>

386
00:17:37,510 --> 00:17:43,390
<font color="#E5E5E5">stage for other destinations so right</font>

387
00:17:40,570 --> 00:17:46,178
now we're<font color="#E5E5E5"> just posting to s3</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> into</font>

388
00:17:43,390 --> 00:17:48,790
<font color="#CCCCCC">Splunk</font><font color="#E5E5E5"> but this also sets</font><font color="#CCCCCC"> to stage</font><font color="#E5E5E5"> for</font>

389
00:17:46,179 --> 00:17:49,779
elastic MapReduce<font color="#CCCCCC"> athena</font><font color="#E5E5E5"> and elastic</font>

390
00:17:48,790 --> 00:17:52,360
search

391
00:17:49,779 --> 00:17:56,860
as<font color="#E5E5E5"> additional tools for for incident</font>

392
00:17:52,360 --> 00:17:59,649
responders and the ETL<font color="#E5E5E5"> is still in a</font>

393
00:17:56,860 --> 00:18:03,850
lambda<font color="#CCCCCC"> and it still works the same as in</font>

394
00:17:59,649 --> 00:18:05,559
the the data streams model<font color="#CCCCCC"> but they they</font>

395
00:18:03,850 --> 00:18:08,259
make the<font color="#E5E5E5"> Association directly with the</font>

396
00:18:05,559 --> 00:18:16,658
<font color="#CCCCCC">firehose interfaces instead of setting</font>

397
00:18:08,259 --> 00:18:19,269
up the land of triggers manually<font color="#CCCCCC"> so from</font>

398
00:18:16,659 --> 00:18:23,110
from<font color="#CCCCCC"> our exercise if I had to boil this</font>

399
00:18:19,269 --> 00:18:24,909
down<font color="#CCCCCC"> in just a few</font><font color="#E5E5E5"> data points I would</font>

400
00:18:23,110 --> 00:18:26,889
say that you know fluent D<font color="#E5E5E5"> on boards</font>

401
00:18:24,909 --> 00:18:30,100
clients fairly easily this this is this

402
00:18:26,889 --> 00:18:32,529
<font color="#E5E5E5">is why it was</font><font color="#CCCCCC"> made such a big made such</font>

403
00:18:30,100 --> 00:18:35,590
sense for us<font color="#E5E5E5"> for our initial boarding</font>

404
00:18:32,529 --> 00:18:38,590
targets we're standing<font color="#E5E5E5"> up like HTTP</font>

405
00:18:35,590 --> 00:18:41,769
endpoints syslog endpoints<font color="#CCCCCC"> you know</font>

406
00:18:38,590 --> 00:18:43,269
fluent forwarder endpoints<font color="#CCCCCC"> because this</font>

407
00:18:41,769 --> 00:18:44,950
this<font color="#E5E5E5"> is how we can get the bulk of our</font>

408
00:18:43,269 --> 00:18:47,970
data the quickest is you know just

409
00:18:44,950 --> 00:18:50,950
making<font color="#E5E5E5"> sure that it's just point and go</font>

410
00:18:47,970 --> 00:18:52,690
<font color="#CCCCCC">so data and data streams they provide</font>

411
00:18:50,950 --> 00:18:54,909
both a reliable transport<font color="#E5E5E5"> and a</font>

412
00:18:52,690 --> 00:18:56,820
<font color="#CCCCCC">short-term secure storage one thing I</font>

413
00:18:54,909 --> 00:19:01,059
didn't mention<font color="#E5E5E5"> earlier</font><font color="#CCCCCC"> is that the day</font>

414
00:18:56,820 --> 00:19:02,889
about the data streams is that that<font color="#CCCCCC"> v</font>

415
00:19:01,059 --> 00:19:04,539
it's just pretty<font color="#E5E5E5"> much like Kafka so</font>

416
00:19:02,889 --> 00:19:08,709
those records do get<font color="#E5E5E5"> written</font><font color="#CCCCCC"> to disk and</font>

417
00:19:04,539 --> 00:19:10,210
that<font color="#E5E5E5"> storage is encrypted which makes</font>

418
00:19:08,710 --> 00:19:13,480
makes it even more<font color="#E5E5E5"> ideal for</font><font color="#CCCCCC"> this</font>

419
00:19:10,210 --> 00:19:15,789
<font color="#CCCCCC">situation</font><font color="#E5E5E5"> those producers in</font><font color="#CCCCCC"> sumer</font>

420
00:19:13,480 --> 00:19:18,460
producers and consumers definitely need

421
00:19:15,789 --> 00:19:20,379
to self-regulate<font color="#CCCCCC"> this is this was</font>

422
00:19:18,460 --> 00:19:22,750
<font color="#CCCCCC">actually one of the biggest time syncs</font>

423
00:19:20,379 --> 00:19:26,469
for us was<font color="#CCCCCC"> getting this regulation</font>

424
00:19:22,750 --> 00:19:27,970
settled<font color="#CCCCCC"> and of course</font><font color="#E5E5E5"> handle all your</font>

425
00:19:26,470 --> 00:19:33,730
<font color="#E5E5E5">errors and instrument for just</font>

426
00:19:27,970 --> 00:19:36,820
inspection this<font color="#E5E5E5"> is actually a pretty</font><font color="#CCCCCC"> big</font>

427
00:19:33,730 --> 00:19:40,000
undertaking<font color="#E5E5E5"> and you know starting from</font>

428
00:19:36,820 --> 00:19:41,620
nothing<font color="#CCCCCC"> or aggregating nothing has</font>

429
00:19:40,000 --> 00:19:43,389
allowed<font color="#CCCCCC"> us an opportunity</font><font color="#E5E5E5"> to take on a</font>

430
00:19:41,620 --> 00:19:46,779
<font color="#E5E5E5">project like this</font><font color="#CCCCCC"> and what this is</font>

431
00:19:43,389 --> 00:19:49,570
really<font color="#CCCCCC"> is and some of you may recognize</font>

432
00:19:46,779 --> 00:19:52,269
this this is the beginning<font color="#CCCCCC"> of our data</font>

433
00:19:49,570 --> 00:19:54,009
science platform<font color="#E5E5E5"> and for those</font><font color="#CCCCCC"> of you</font>

434
00:19:52,269 --> 00:19:57,159
who have taken on data science projects

435
00:19:54,009 --> 00:19:59,529
<font color="#E5E5E5">you know that the bulk of what you're</font>

436
00:19:57,159 --> 00:20:01,480
you're fighting is both getting your

437
00:19:59,529 --> 00:20:04,809
data and getting<font color="#E5E5E5"> it into the</font><font color="#CCCCCC"> right form</font>

438
00:20:01,480 --> 00:20:08,590
so that<font color="#E5E5E5"> you can feed</font><font color="#CCCCCC"> it into</font><font color="#E5E5E5"> your models</font>

439
00:20:04,809 --> 00:20:10,678
and with that<font color="#CCCCCC"> I will open</font><font color="#E5E5E5"> up</font><font color="#CCCCCC"> for</font>

440
00:20:08,590 --> 00:20:10,678
questions

441
00:20:16,869 --> 00:20:23,259
currently we<font color="#E5E5E5"> only have about</font><font color="#CCCCCC"> ten gigs of</font>

442
00:20:20,590 --> 00:20:26,199
data flowing<font color="#E5E5E5"> through this system our</font>

443
00:20:23,259 --> 00:20:27,940
<font color="#CCCCCC">Splunk license is 20 gigabytes so we've</font>

444
00:20:26,200 --> 00:20:31,179
<font color="#E5E5E5">actually we've gone and artificially</font>

445
00:20:27,940 --> 00:20:33,489
limited<font color="#CCCCCC"> ourselves</font><font color="#E5E5E5"> to so that we're</font>

446
00:20:31,179 --> 00:20:38,429
forced actually to<font color="#E5E5E5"> go back and write all</font>

447
00:20:33,489 --> 00:20:40,840
those<font color="#E5E5E5"> filters so no not not big yet but</font>

448
00:20:38,429 --> 00:20:43,289
next time<font color="#E5E5E5"> I present on this topic we</font>

449
00:20:40,840 --> 00:20:43,289
probably will

450
00:20:54,499 --> 00:21:01,909
the question is are we working with

451
00:20:56,659 --> 00:21:03,860
<font color="#E5E5E5">anybody corporate so specifically AWS</font><font color="#CCCCCC"> so</font>

452
00:21:01,909 --> 00:21:07,580
we we<font color="#CCCCCC"> actually have been working with</font>

453
00:21:03,860 --> 00:21:09,229
AWS<font color="#CCCCCC"> a little closely not too closely</font>

454
00:21:07,580 --> 00:21:11,178
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> very interested in what we're</font>

455
00:21:09,230 --> 00:21:13,159
doing<font color="#E5E5E5"> especially since it's targeted</font>

456
00:21:11,179 --> 00:21:15,340
towards<font color="#CCCCCC"> healthcare</font><font color="#E5E5E5"> and that's a big push</font>

457
00:21:13,159 --> 00:21:18,590
<font color="#CCCCCC">for them right</font><font color="#E5E5E5"> now</font>

458
00:21:15,340 --> 00:21:20,990
<font color="#E5E5E5">but I don't know we we haven't talked to</font>

459
00:21:18,590 --> 00:21:23,119
<font color="#E5E5E5">them</font><font color="#CCCCCC"> maybe a couple</font><font color="#E5E5E5"> months or so so it's</font>

460
00:21:20,990 --> 00:21:25,690
<font color="#E5E5E5">our</font><font color="#CCCCCC"> engagement with them directly</font><font color="#E5E5E5"> is</font>

461
00:21:23,119 --> 00:21:25,689
kind<font color="#E5E5E5"> of cooled off</font>

462
00:21:40,940 --> 00:21:48,389
yeah<font color="#CCCCCC"> so then the question is why not</font>

463
00:21:45,299 --> 00:21:53,399
<font color="#E5E5E5">just our</font><font color="#CCCCCC"> sis login be done with this</font>

464
00:21:48,389 --> 00:21:56,789
well<font color="#CCCCCC"> syslog isn't always going to</font><font color="#E5E5E5"> fit</font><font color="#CCCCCC"> on</font>

465
00:21:53,399 --> 00:21:58,768
a system<font color="#E5E5E5"> one portion of this system is</font>

466
00:21:56,789 --> 00:22:01,740
our Active Directory logs<font color="#CCCCCC"> that we're</font>

467
00:21:58,769 --> 00:22:04,559
getting and<font color="#E5E5E5"> we could have put a syslog</font>

468
00:22:01,740 --> 00:22:07,620
agent on there<font color="#CCCCCC"> but we feel that this is</font>

469
00:22:04,559 --> 00:22:09,690
<font color="#E5E5E5">far</font><font color="#CCCCCC"> more reliable because when you fire</font>

470
00:22:07,620 --> 00:22:11,789
off<font color="#CCCCCC"> for syslog most of those are</font>

471
00:22:09,690 --> 00:22:14,090
implementations<font color="#CCCCCC"> are generally UDP even</font>

472
00:22:11,789 --> 00:22:17,460
though there are<font color="#E5E5E5"> TCP options available</font>

473
00:22:14,090 --> 00:22:19,860
<font color="#CCCCCC">so you're right there at</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> e-myth</font>

474
00:22:17,460 --> 00:22:23,460
you're setting<font color="#CCCCCC"> yourself up for data loss</font>

475
00:22:19,860 --> 00:22:25,860
<font color="#CCCCCC">so we we figured that</font><font color="#E5E5E5"> sure we can set up</font>

476
00:22:23,460 --> 00:22:29,129
<font color="#E5E5E5">syslog endpoints but let's try and</font>

477
00:22:25,860 --> 00:22:31,189
minimize those unreliable passes so that

478
00:22:29,129 --> 00:22:41,250
we can again protect that data integrity

479
00:22:31,190 --> 00:22:43,850
and not be missing any of our data<font color="#E5E5E5"> all</font>

480
00:22:41,250 --> 00:22:43,850
<font color="#E5E5E5">right thank</font><font color="#CCCCCC"> you</font>

481
00:22:44,010 --> 00:22:48,490
[Applause]

