1
00:00:00,000 --> 00:00:06,629
<font color="#E5E5E5">okay getting an early</font><font color="#CCCCCC"> start on this I</font>

2
00:00:02,159 --> 00:00:08,340
<font color="#E5E5E5">guess so good morning</font><font color="#CCCCCC"> um I know that the</font>

3
00:00:06,629 --> 00:00:10,739
<font color="#E5E5E5">title of this talk</font><font color="#CCCCCC"> is a little bit of a</font>

4
00:00:08,340 --> 00:00:12,870
mouthful<font color="#CCCCCC"> a lot of this</font><font color="#E5E5E5"> is going to be</font>

5
00:00:10,740 --> 00:00:16,590
about why this<font color="#E5E5E5"> is important as much as</font>

6
00:00:12,870 --> 00:00:19,680
what this<font color="#E5E5E5"> means</font><font color="#CCCCCC"> to say in many</font><font color="#E5E5E5"> parts</font>

7
00:00:16,590 --> 00:00:23,460
how can it<font color="#CCCCCC"> be</font><font color="#E5E5E5"> concise what do we mean by</font>

8
00:00:19,680 --> 00:00:25,320
concise in this context and what is more

9
00:00:23,460 --> 00:00:26,550
complex than<font color="#E5E5E5"> deterministic context-free</font>

10
00:00:25,320 --> 00:00:28,769
and why does that matter<font color="#E5E5E5"> are all</font>

11
00:00:26,550 --> 00:00:30,330
questions<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I hope to answer and so</font>

12
00:00:28,769 --> 00:00:32,098
if you've<font color="#CCCCCC"> been</font><font color="#E5E5E5"> following at</font><font color="#CCCCCC"> all the</font>

13
00:00:30,330 --> 00:00:34,469
research that's<font color="#CCCCCC"> been coming</font><font color="#E5E5E5"> out of out</font>

14
00:00:32,098 --> 00:00:35,790
<font color="#CCCCCC">of language theoretic security which is</font>

15
00:00:34,469 --> 00:00:37,590
<font color="#E5E5E5">an initiative that was largely</font>

16
00:00:35,790 --> 00:00:39,530
spearheaded by Sergey<font color="#CCCCCC"> Broadus emeritus</font>

17
00:00:37,590 --> 00:00:41,700
Patterson<font color="#CCCCCC"> Lenz Assen and several others</font>

18
00:00:39,530 --> 00:00:44,930
you might<font color="#E5E5E5"> have noticed that earlier</font><font color="#CCCCCC"> this</font>

19
00:00:41,700 --> 00:00:47,100
year<font color="#E5E5E5"> we published a taxonomy of</font>

20
00:00:44,930 --> 00:00:49,410
essentially root causes of<font color="#CCCCCC"> parser</font>

21
00:00:47,100 --> 00:00:53,489
vulnerability<font color="#E5E5E5"> so we took a little bit of</font>

22
00:00:49,410 --> 00:00:57,360
<font color="#E5E5E5">beef with with existing sort of cwe's</font>

23
00:00:53,489 --> 00:01:00,089
around around<font color="#CCCCCC"> how we deal with broken</font>

24
00:00:57,360 --> 00:01:01,949
parsers<font color="#CCCCCC"> and applications this is</font>

25
00:01:00,090 --> 00:01:04,110
gathered mostly from existing research

26
00:01:01,949 --> 00:01:05,939
in the area and is essentially just a

27
00:01:04,110 --> 00:01:07,500
systemization of previous papers all of

28
00:01:05,939 --> 00:01:10,380
which are<font color="#E5E5E5"> available at Lane tech org</font>

29
00:01:07,500 --> 00:01:12,119
um<font color="#E5E5E5"> the one that I've highlighted today</font>

30
00:01:10,380 --> 00:01:14,009
is actually<font color="#CCCCCC"> the one that's given us the</font>

31
00:01:12,119 --> 00:01:17,040
most pushback<font color="#E5E5E5"> and so I thought that I'd</font>

32
00:01:14,010 --> 00:01:18,810
take the<font color="#CCCCCC"> opportunity to explain on the</font>

33
00:01:17,040 --> 00:01:20,520
<font color="#E5E5E5">record exactly what it is</font><font color="#CCCCCC"> that we</font><font color="#E5E5E5"> mean</font>

34
00:01:18,810 --> 00:01:24,780
by this<font color="#E5E5E5"> why it's important</font><font color="#CCCCCC"> why it can be</font>

35
00:01:20,520 --> 00:01:26,810
<font color="#E5E5E5">done um it follows very</font><font color="#CCCCCC"> closely as I</font>

36
00:01:24,780 --> 00:01:28,979
mentioned in a previous<font color="#E5E5E5"> talk on this</font>

37
00:01:26,810 --> 00:01:30,659
very very<font color="#E5E5E5"> very few parser</font>

38
00:01:28,979 --> 00:01:32,130
vulnerabilities actually fall into<font color="#E5E5E5"> just</font>

39
00:01:30,659 --> 00:01:34,439
one of these categories most<font color="#E5E5E5"> of them</font>

40
00:01:32,130 --> 00:01:36,899
have multiple connotations and in

41
00:01:34,439 --> 00:01:37,949
particular<font color="#E5E5E5"> this concept</font><font color="#CCCCCC"> of an input</font>

42
00:01:36,900 --> 00:01:41,250
language being greater than

43
00:01:37,950 --> 00:01:44,369
deterministic context-free is very much

44
00:01:41,250 --> 00:01:46,020
associated with shotgun parsers<font color="#E5E5E5"> so again</font>

45
00:01:44,369 --> 00:01:49,470
if you've been following our research it

46
00:01:46,020 --> 00:01:52,740
will become readily<font color="#E5E5E5"> apparent why this as</font>

47
00:01:49,470 --> 00:01:55,140
well as that<font color="#E5E5E5"> are critical</font><font color="#CCCCCC"> oh</font><font color="#E5E5E5"> why exactly</font>

48
00:01:52,740 --> 00:01:57,479
do we<font color="#E5E5E5"> want deterministic context-free</font>

49
00:01:55,140 --> 00:02:00,840
well deterministic context-free is a

50
00:01:57,479 --> 00:02:02,549
class of languages<font color="#E5E5E5"> it kind of falls in</font>

51
00:02:00,840 --> 00:02:05,490
between<font color="#E5E5E5"> on the Chomsky hierarchy it's</font>

52
00:02:02,549 --> 00:02:07,860
right<font color="#E5E5E5"> below context-free it simply means</font>

53
00:02:05,490 --> 00:02:11,490
<font color="#E5E5E5">a context-free grammar that you can can</font>

54
00:02:07,860 --> 00:02:13,860
parse and generate deterministically<font color="#E5E5E5"> um</font>

55
00:02:11,490 --> 00:02:17,490
this particular class of<font color="#E5E5E5"> languages is</font>

56
00:02:13,860 --> 00:02:19,590
<font color="#E5E5E5">the</font><font color="#CCCCCC"> most powerful class of</font><font color="#E5E5E5"> languages for</font>

57
00:02:17,490 --> 00:02:21,720
which we can solve a number of problems

58
00:02:19,590 --> 00:02:23,400
general equivalence is one of the main

59
00:02:21,720 --> 00:02:25,830
<font color="#E5E5E5">ones here which means that you can tell</font>

60
00:02:23,400 --> 00:02:27,450
that<font color="#CCCCCC"> two parsers or in fact</font><font color="#E5E5E5"> more</font>

61
00:02:25,830 --> 00:02:30,210
formally<font color="#E5E5E5"> two grammars but in effect</font><font color="#CCCCCC"> in</font>

62
00:02:27,450 --> 00:02:32,310
practice<font color="#E5E5E5"> two parsers are equivalent for</font>

63
00:02:30,210 --> 00:02:34,950
any any of these classes<font color="#CCCCCC"> of languages</font>

64
00:02:32,310 --> 00:02:37,020
another point is<font color="#E5E5E5"> that</font><font color="#CCCCCC"> there decidable</font>

65
00:02:34,950 --> 00:02:38,730
<font color="#E5E5E5">which means that in a finite</font><font color="#CCCCCC"> amount of</font>

66
00:02:37,020 --> 00:02:40,710
time<font color="#E5E5E5"> or at least a known amount of time</font>

67
00:02:38,730 --> 00:02:43,109
we can figure out whether<font color="#E5E5E5"> a</font><font color="#CCCCCC"> giving</font>

68
00:02:40,710 --> 00:02:45,390
string is in the language<font color="#E5E5E5"> and valid or</font>

69
00:02:43,110 --> 00:02:46,830
out of the<font color="#E5E5E5"> language and not valid and</font>

70
00:02:45,390 --> 00:02:48,420
then the third<font color="#E5E5E5"> point which is what I'm</font>

71
00:02:46,830 --> 00:02:50,160
going to cover<font color="#E5E5E5"> today which is</font><font color="#CCCCCC"> that they</font>

72
00:02:48,420 --> 00:02:53,730
are<font color="#CCCCCC"> actually sufficiently complex for</font>

73
00:02:50,160 --> 00:02:55,650
general use<font color="#CCCCCC"> and if you go any higher</font>

74
00:02:53,730 --> 00:02:57,450
than<font color="#CCCCCC"> this and you end</font><font color="#E5E5E5"> up with</font><font color="#CCCCCC"> more</font>

75
00:02:55,650 --> 00:03:00,120
complex languages which I'll get into in

76
00:02:57,450 --> 00:03:02,519
<font color="#CCCCCC">a little</font><font color="#E5E5E5"> bit then it becomes impossible</font>

77
00:03:00,120 --> 00:03:04,590
<font color="#E5E5E5">to decide especially decidability in</font>

78
00:03:02,520 --> 00:03:06,090
general<font color="#E5E5E5"> equivalents and we find that on</font>

79
00:03:04,590 --> 00:03:07,890
the<font color="#E5E5E5"> whole these tend</font><font color="#CCCCCC"> to be</font><font color="#E5E5E5"> the locus of</font>

80
00:03:06,090 --> 00:03:09,240
bugs now it's important to<font color="#E5E5E5"> remember as</font>

81
00:03:07,890 --> 00:03:12,720
well<font color="#CCCCCC"> that this refers to the</font><font color="#E5E5E5"> language</font>

82
00:03:09,240 --> 00:03:14,670
<font color="#CCCCCC">that defines</font><font color="#E5E5E5"> your protocol your data</font>

83
00:03:12,720 --> 00:03:15,990
interchange format between<font color="#E5E5E5"> various files</font>

84
00:03:14,670 --> 00:03:17,730
this is<font color="#E5E5E5"> absolutely nothing to do with</font>

85
00:03:15,990 --> 00:03:19,680
<font color="#E5E5E5">what language you program</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> of course</font>

86
00:03:17,730 --> 00:03:21,179
nobody<font color="#E5E5E5"> is advocating that you use non</font>

87
00:03:19,680 --> 00:03:22,350
turing-complete programming languages

88
00:03:21,180 --> 00:03:23,780
<font color="#CCCCCC">for general-purpose</font><font color="#E5E5E5"> programming that</font>

89
00:03:22,350 --> 00:03:26,790
would just be<font color="#CCCCCC"> C</font><font color="#E5E5E5"> and it wouldn't help</font>

90
00:03:23,780 --> 00:03:28,290
this<font color="#E5E5E5"> is mostly</font><font color="#CCCCCC"> about making sure</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> we</font>

91
00:03:26,790 --> 00:03:30,480
<font color="#CCCCCC">don't have a lot of purser bugs and this</font>

92
00:03:28,290 --> 00:03:32,970
<font color="#E5E5E5">is actually really important I'm sorry</font>

93
00:03:30,480 --> 00:03:35,850
to recap so much but we did a short

94
00:03:32,970 --> 00:03:37,740
survey of OpenSSL bugs in the<font color="#E5E5E5"> preceding</font>

95
00:03:35,850 --> 00:03:40,859
year or so<font color="#CCCCCC"> before we published our last</font>

96
00:03:37,740 --> 00:03:42,360
paper and we<font color="#E5E5E5"> found that the over</font><font color="#CCCCCC"> 2/3 of</font>

97
00:03:40,860 --> 00:03:44,640
<font color="#E5E5E5">them were actually parser bugs and not</font>

98
00:03:42,360 --> 00:03:46,290
cryptography bugs and we wondered surely

99
00:03:44,640 --> 00:03:49,200
there must be<font color="#E5E5E5"> something</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we can do</font>

100
00:03:46,290 --> 00:03:50,700
<font color="#E5E5E5">to see to</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> that the</font><font color="#CCCCCC"> locust of</font><font color="#E5E5E5"> bugs and</font>

101
00:03:49,200 --> 00:03:52,170
<font color="#E5E5E5">the project is actually things</font><font color="#CCCCCC"> that are</font>

102
00:03:50,700 --> 00:03:54,420
related<font color="#CCCCCC"> in some way to what it's trying</font>

103
00:03:52,170 --> 00:03:55,290
to<font color="#CCCCCC"> accomplish</font><font color="#E5E5E5"> not ancillary</font><font color="#CCCCCC"> things for</font>

104
00:03:54,420 --> 00:03:58,799
which there<font color="#CCCCCC"> are</font><font color="#E5E5E5"> general-purpose</font>

105
00:03:55,290 --> 00:04:00,660
methodologies so what we proposed is a

106
00:03:58,800 --> 00:04:03,570
software engineering methodology<font color="#CCCCCC"> that</font>

107
00:04:00,660 --> 00:04:04,829
<font color="#E5E5E5">allows</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> to prevent these sorts of</font>

108
00:04:03,570 --> 00:04:07,470
vulnerabilities from occurring in<font color="#E5E5E5"> the</font>

109
00:04:04,830 --> 00:04:08,940
<font color="#E5E5E5">first</font><font color="#CCCCCC"> place and what I mean again the</font>

110
00:04:07,470 --> 00:04:10,440
thing that has<font color="#E5E5E5"> been most contentious and</font>

111
00:04:08,940 --> 00:04:12,420
difficult to implement<font color="#CCCCCC"> is this concept</font>

112
00:04:10,440 --> 00:04:14,459
<font color="#E5E5E5">of deterministic context-free because</font>

113
00:04:12,420 --> 00:04:16,079
simply not a lot of<font color="#E5E5E5"> people understand</font>

114
00:04:14,459 --> 00:04:17,940
why that<font color="#CCCCCC"> is and it's important that for</font>

115
00:04:16,079 --> 00:04:19,229
a piece of<font color="#E5E5E5"> security to be usable</font><font color="#CCCCCC"> it be</font>

116
00:04:17,940 --> 00:04:21,029
<font color="#CCCCCC">understood both by security</font>

117
00:04:19,230 --> 00:04:21,840
practitioners and by developers exactly

118
00:04:21,029 --> 00:04:26,789
how you implement

119
00:04:21,839 --> 00:04:28,198
<font color="#E5E5E5">um so in any event</font><font color="#CCCCCC"> this is</font><font color="#E5E5E5"> what we think</font>

120
00:04:26,790 --> 00:04:29,699
of<font color="#E5E5E5"> as</font><font color="#CCCCCC"> a deterministic context-free</font>

121
00:04:28,199 --> 00:04:31,889
language from the<font color="#CCCCCC"> practitioners</font>

122
00:04:29,699 --> 00:04:33,449
standpoint from an academic<font color="#E5E5E5"> standpoint</font>

123
00:04:31,889 --> 00:04:36,350
it's very<font color="#CCCCCC"> different but</font><font color="#E5E5E5"> it does</font>

124
00:04:33,449 --> 00:04:38,490
<font color="#E5E5E5">essentially reduce to these things um</font>

125
00:04:36,350 --> 00:04:40,470
<font color="#E5E5E5">essentially the key feature that</font><font color="#CCCCCC"> we're</font>

126
00:04:38,490 --> 00:04:42,960
<font color="#CCCCCC">looking for is that</font><font color="#E5E5E5"> validity of a</font>

127
00:04:40,470 --> 00:04:46,139
protocol message is only ever determined

128
00:04:42,960 --> 00:04:47,820
based on based on<font color="#E5E5E5"> a context</font><font color="#CCCCCC"> that's</font>

129
00:04:46,139 --> 00:04:49,650
<font color="#CCCCCC">established along some nested hierarchy</font>

130
00:04:47,820 --> 00:04:52,080
<font color="#E5E5E5">what this means is that you can't say</font>

131
00:04:49,650 --> 00:04:53,609
<font color="#E5E5E5">well parse the whole document and then</font>

132
00:04:52,080 --> 00:04:56,940
correlate these two pieces within<font color="#E5E5E5"> the</font>

133
00:04:53,610 --> 00:04:58,919
document<font color="#E5E5E5"> that</font><font color="#CCCCCC"> do not nest</font><font color="#E5E5E5"> and then see</font>

134
00:04:56,940 --> 00:05:00,870
that<font color="#CCCCCC"> they match up</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> your validity you</font>

135
00:04:58,919 --> 00:05:02,520
can't do that it turns<font color="#E5E5E5"> out</font><font color="#CCCCCC"> that when you</font>

136
00:05:00,870 --> 00:05:04,979
<font color="#E5E5E5">do that it becomes</font><font color="#CCCCCC"> impossible</font><font color="#E5E5E5"> to prove</font>

137
00:05:02,520 --> 00:05:06,750
<font color="#E5E5E5">those parsers you'll just have to</font>

138
00:05:04,979 --> 00:05:10,770
believe<font color="#E5E5E5"> me this is only a half hour talk</font>

139
00:05:06,750 --> 00:05:12,090
<font color="#E5E5E5">um it also means languages that we could</font>

140
00:05:10,770 --> 00:05:13,740
process<font color="#E5E5E5"> with the deterministic pushdown</font>

141
00:05:12,090 --> 00:05:16,669
automaton which is another one<font color="#CCCCCC"> of those</font>

142
00:05:13,740 --> 00:05:19,080
annoying formalisms what that means is<font color="#E5E5E5"> a</font>

143
00:05:16,669 --> 00:05:21,060
given a<font color="#E5E5E5"> finite amount of state and a</font>

144
00:05:19,080 --> 00:05:23,070
stack<font color="#E5E5E5"> that is potentially unbounded</font>

145
00:05:21,060 --> 00:05:25,350
<font color="#E5E5E5">although no real stack is given those</font>

146
00:05:23,070 --> 00:05:27,750
<font color="#CCCCCC">two things you can parse this protocol</font>

147
00:05:25,350 --> 00:05:29,100
<font color="#E5E5E5">and you don't have potentially an</font>

148
00:05:27,750 --> 00:05:30,900
infinite accretion of<font color="#CCCCCC"> state</font><font color="#E5E5E5"> that you</font>

149
00:05:29,100 --> 00:05:33,780
might assemble that can't be put<font color="#E5E5E5"> onto a</font>

150
00:05:30,900 --> 00:05:35,310
stack<font color="#CCCCCC"> and popped off</font><font color="#E5E5E5"> orderly it means</font><font color="#CCCCCC"> a</font>

151
00:05:33,780 --> 00:05:38,159
language that<font color="#E5E5E5"> is similar in complexity</font>

152
00:05:35,310 --> 00:05:40,320
to matching<font color="#E5E5E5"> balanced friends but but no</font>

153
00:05:38,160 --> 00:05:43,050
more complex than<font color="#E5E5E5"> this so for example</font>

154
00:05:40,320 --> 00:05:45,360
XML tags<font color="#E5E5E5"> as long as those XML tags are</font>

155
00:05:43,050 --> 00:05:47,099
properly nested<font color="#CCCCCC"> and don't have cross</font>

156
00:05:45,360 --> 00:05:49,560
references and external<font color="#E5E5E5"> entities and</font>

157
00:05:47,099 --> 00:05:51,840
weird imports of document type data and

158
00:05:49,560 --> 00:05:54,690
maybe<font color="#E5E5E5"> XML is a bad example that</font>

159
00:05:51,840 --> 00:05:56,130
certainly JSON JSON does tend to<font color="#CCCCCC"> follow</font>

160
00:05:54,690 --> 00:05:58,169
this I'll get into<font color="#E5E5E5"> a little</font><font color="#CCCCCC"> bit more why</font>

161
00:05:56,130 --> 00:06:00,570
that's not enough<font color="#E5E5E5"> but</font><font color="#CCCCCC"> these are the</font>

162
00:05:58,169 --> 00:06:04,469
features<font color="#CCCCCC"> that we look at also</font><font color="#E5E5E5"> it happens</font>

163
00:06:00,570 --> 00:06:08,340
that<font color="#CCCCCC"> DNS</font><font color="#E5E5E5"> and associated associated</font>

164
00:06:04,470 --> 00:06:09,960
grammars<font color="#CCCCCC"> BBN F and a</font><font color="#E5E5E5"> DNS also tend to</font>

165
00:06:08,340 --> 00:06:12,030
<font color="#E5E5E5">generate languages that fall within this</font>

166
00:06:09,960 --> 00:06:14,370
class<font color="#E5E5E5"> so if your protocol can be</font>

167
00:06:12,030 --> 00:06:16,650
<font color="#CCCCCC">specified that way as in with an RFC</font>

168
00:06:14,370 --> 00:06:17,910
<font color="#E5E5E5">you're fairly close one of the things</font>

169
00:06:16,650 --> 00:06:19,590
that I'd<font color="#CCCCCC"> like to</font><font color="#E5E5E5"> highlight there</font><font color="#CCCCCC"> as well</font>

170
00:06:17,910 --> 00:06:21,389
before<font color="#CCCCCC"> I continue is that a lot of</font><font color="#E5E5E5"> the</font>

171
00:06:19,590 --> 00:06:24,000
times when we<font color="#E5E5E5"> do specify protocols using</font>

172
00:06:21,389 --> 00:06:26,520
<font color="#CCCCCC">a formal structure</font><font color="#E5E5E5"> like a</font><font color="#CCCCCC"> B</font><font color="#E5E5E5"> NS we tend</font>

173
00:06:24,000 --> 00:06:28,050
to<font color="#E5E5E5"> include little you know angle</font>

174
00:06:26,520 --> 00:06:30,870
bracketed remarks in there that say

175
00:06:28,050 --> 00:06:32,729
check some of<font color="#E5E5E5"> that it turns out that</font>

176
00:06:30,870 --> 00:06:33,780
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> okay and that's that's one of</font>

177
00:06:32,729 --> 00:06:35,109
the things I'll be<font color="#E5E5E5"> following in the</font>

178
00:06:33,780 --> 00:06:38,198
coming<font color="#E5E5E5"> slides</font>

179
00:06:35,110 --> 00:06:39,150
so should<font color="#CCCCCC"> recap again why this is</font>

180
00:06:38,199 --> 00:06:41,979
important

181
00:06:39,150 --> 00:06:45,280
previously I just did a search<font color="#CCCCCC"> for four</font>

182
00:06:41,979 --> 00:06:47,590
bugs that had to do with with<font color="#E5E5E5"> cycles</font>

183
00:06:45,280 --> 00:06:51,008
unbounded cycles unbounded recursion in

184
00:06:47,590 --> 00:06:53,619
protocol parsing<font color="#CCCCCC"> we found these</font><font color="#E5E5E5"> it also</font>

185
00:06:51,009 --> 00:06:55,599
happens that<font color="#E5E5E5"> the hijacking of the</font>

186
00:06:53,620 --> 00:06:57,849
etherium<font color="#E5E5E5"> dowel falls into</font><font color="#CCCCCC"> this there are</font>

187
00:06:55,599 --> 00:07:00,520
many bugs<font color="#E5E5E5"> and the one thing</font><font color="#CCCCCC"> that all of</font>

188
00:06:57,849 --> 00:07:02,830
<font color="#E5E5E5">these bugs that are cited in this way</font>

189
00:07:00,520 --> 00:07:05,530
have in common<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that the structures</font>

190
00:07:02,830 --> 00:07:07,750
let that what you'll see there<font color="#E5E5E5"> it's</font>

191
00:07:05,530 --> 00:07:10,059
<font color="#E5E5E5">possible to generate</font><font color="#CCCCCC"> a document in</font><font color="#E5E5E5"> which</font>

192
00:07:07,750 --> 00:07:11,349
there is<font color="#CCCCCC"> sure</font><font color="#E5E5E5"> some overarching</font><font color="#CCCCCC"> elements</font>

193
00:07:10,060 --> 00:07:14,289
but within<font color="#E5E5E5"> it there are three</font>

194
00:07:11,349 --> 00:07:16,840
<font color="#CCCCCC">non-hierarchical elements which which</font>

195
00:07:14,289 --> 00:07:19,449
cycle in this<font color="#E5E5E5"> way and things will happen</font>

196
00:07:16,840 --> 00:07:21,818
like for example<font color="#CCCCCC"> adobe PDF</font><font color="#E5E5E5"> parser will</font>

197
00:07:19,449 --> 00:07:24,639
happily try to generate an infinite

198
00:07:21,819 --> 00:07:27,250
index simply because something refers to

199
00:07:24,639 --> 00:07:29,020
its<font color="#E5E5E5"> current which</font><font color="#CCCCCC"> thread again</font><font color="#E5E5E5"> refers to</font>

200
00:07:27,250 --> 00:07:33,310
its<font color="#E5E5E5"> child and it just keeps</font><font color="#CCCCCC"> going back</font>

201
00:07:29,020 --> 00:07:35,560
<font color="#CCCCCC">and forth</font><font color="#E5E5E5"> so it is this</font><font color="#CCCCCC"> this structure</font>

202
00:07:33,310 --> 00:07:37,840
<font color="#E5E5E5">that</font><font color="#CCCCCC"> is responsible</font><font color="#E5E5E5"> for listing our</font>

203
00:07:35,560 --> 00:07:40,569
protocol away from at worst

204
00:07:37,840 --> 00:07:42,190
deterministic context-free<font color="#E5E5E5"> into at best</font>

205
00:07:40,569 --> 00:07:43,900
<font color="#E5E5E5">context-sensitive which is one level</font>

206
00:07:42,190 --> 00:07:46,060
<font color="#CCCCCC">above</font><font color="#E5E5E5"> in the Chomsky hierarchy and all</font>

207
00:07:43,900 --> 00:07:47,679
of the formalisms around proving<font color="#E5E5E5"> that</font>

208
00:07:46,060 --> 00:07:50,259
the parsing<font color="#E5E5E5"> of it will ever terminates</font>

209
00:07:47,680 --> 00:07:51,370
or can be determined valid or not<font color="#CCCCCC"> or can</font>

210
00:07:50,259 --> 00:07:55,150
be equivalent<font color="#CCCCCC"> to go out the window you</font>

211
00:07:51,370 --> 00:07:56,650
simply can't do them so we<font color="#CCCCCC"> proposed in</font>

212
00:07:55,150 --> 00:07:58,719
language theoretic security that<font color="#E5E5E5"> this</font>

213
00:07:56,650 --> 00:07:59,888
listing is<font color="#E5E5E5"> kind of a problem in much</font><font color="#CCCCCC"> the</font>

214
00:07:58,719 --> 00:08:02,610
<font color="#CCCCCC">same way that</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> these thunderstorms</font>

215
00:07:59,889 --> 00:08:04,960
<font color="#E5E5E5">will flip an airplane over if it's all</font>

216
00:08:02,610 --> 00:08:09,520
these sorts of things<font color="#E5E5E5"> will tend to cause</font>

217
00:08:04,960 --> 00:08:11,680
your program to crash so we wonder as

218
00:08:09,520 --> 00:08:13,479
well with respect<font color="#CCCCCC"> to language theoretic</font>

219
00:08:11,680 --> 00:08:16,960
security why it is that<font color="#CCCCCC"> there are so</font>

220
00:08:13,479 --> 00:08:19,180
many<font color="#E5E5E5"> bugs</font><font color="#CCCCCC"> in software well know you I</font>

221
00:08:16,960 --> 00:08:20,830
see a lot of grimacing<font color="#E5E5E5"> no it's simply</font>

222
00:08:19,180 --> 00:08:22,990
<font color="#E5E5E5">not the</font><font color="#CCCCCC"> case</font><font color="#E5E5E5"> it's not because</font>

223
00:08:20,830 --> 00:08:25,810
programmers<font color="#E5E5E5"> are careless</font><font color="#CCCCCC"> it's not</font>

224
00:08:22,990 --> 00:08:27,759
because they're foolish it's because

225
00:08:25,810 --> 00:08:28,900
more often<font color="#CCCCCC"> than not the specification</font>

226
00:08:27,759 --> 00:08:30,729
<font color="#E5E5E5">that they're trying to implement sets</font>

227
00:08:28,900 --> 00:08:32,890
them up for<font color="#E5E5E5"> failure because</font><font color="#CCCCCC"> it's things</font>

228
00:08:30,729 --> 00:08:35,500
<font color="#CCCCCC">like</font><font color="#E5E5E5"> too ambiguous or too complicated</font>

229
00:08:32,890 --> 00:08:37,140
<font color="#CCCCCC">and it has</font><font color="#E5E5E5"> these problems where</font><font color="#CCCCCC"> it's not</font>

230
00:08:35,500 --> 00:08:40,059
amenable<font color="#E5E5E5"> to formal verifiability</font>

231
00:08:37,140 --> 00:08:41,770
and it's also not<font color="#E5E5E5"> amenable</font><font color="#CCCCCC"> to mechanical</font>

232
00:08:40,059 --> 00:08:43,510
verifiability<font color="#E5E5E5"> of the type</font><font color="#CCCCCC"> that we hope</font>

233
00:08:41,770 --> 00:08:45,430
in the<font color="#CCCCCC"> future will be provided</font><font color="#E5E5E5"> by static</font>

234
00:08:43,510 --> 00:08:48,430
code analysis<font color="#CCCCCC"> tools which is why we're</font>

235
00:08:45,430 --> 00:08:50,979
proposing this<font color="#E5E5E5"> as</font><font color="#CCCCCC"> a cwe and</font>

236
00:08:48,430 --> 00:08:52,510
we also wonder also<font color="#E5E5E5"> the previous</font>

237
00:08:50,980 --> 00:08:54,040
examples that<font color="#E5E5E5"> I cited a couple</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> slides</font>

238
00:08:52,510 --> 00:08:56,410
<font color="#E5E5E5">ago were all about denial of service</font>

239
00:08:54,040 --> 00:08:58,480
attacks<font color="#E5E5E5"> it's not just about denial of</font>

240
00:08:56,410 --> 00:09:00,310
service attacks<font color="#E5E5E5"> I'll mention again</font><font color="#CCCCCC"> the</font>

241
00:08:58,480 --> 00:09:03,310
<font color="#E5E5E5">etherium</font><font color="#CCCCCC"> Gao hijacking the example</font>

242
00:09:00,310 --> 00:09:05,229
<font color="#CCCCCC">whereby</font><font color="#E5E5E5"> general recursion in a known</font>

243
00:09:03,310 --> 00:09:07,750
turing-complete<font color="#E5E5E5"> smart contract</font><font color="#CCCCCC"> language</font>

244
00:09:05,230 --> 00:09:09,850
was essentially used to steal all<font color="#CCCCCC"> of the</font>

245
00:09:07,750 --> 00:09:13,570
money<font color="#CCCCCC"> out of mysterium blockchain</font>

246
00:09:09,850 --> 00:09:15,160
contract<font color="#E5E5E5"> structure without any computer</font>

247
00:09:13,570 --> 00:09:16,390
system<font color="#E5E5E5"> being able to see that this was</font>

248
00:09:15,160 --> 00:09:17,890
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to happen</font><font color="#E5E5E5"> or any</font><font color="#CCCCCC"> human really</font>

249
00:09:16,390 --> 00:09:20,140
<font color="#E5E5E5">being able to anticipate this in a</font>

250
00:09:17,890 --> 00:09:22,960
<font color="#E5E5E5">general sense</font><font color="#CCCCCC"> it was bound to</font><font color="#E5E5E5"> happen</font>

251
00:09:20,140 --> 00:09:25,810
eventually<font color="#CCCCCC"> we also saw</font><font color="#E5E5E5"> in many many many</font>

252
00:09:22,960 --> 00:09:27,730
papers<font color="#E5E5E5"> published weird machines a weird</font>

253
00:09:25,810 --> 00:09:30,459
machine<font color="#E5E5E5"> is a term</font><font color="#CCCCCC"> that I believe</font><font color="#E5E5E5"> Sergey</font>

254
00:09:27,730 --> 00:09:32,470
broadest coined which which has to do

255
00:09:30,460 --> 00:09:34,270
<font color="#E5E5E5">with kind of an unintentional structure</font>

256
00:09:32,470 --> 00:09:39,550
of<font color="#E5E5E5"> computation that exists within a</font>

257
00:09:34,270 --> 00:09:42,400
program<font color="#E5E5E5"> tend to have a hand-in-hand sort</font>

258
00:09:39,550 --> 00:09:43,839
of relationship<font color="#E5E5E5"> with exploits um so what</font>

259
00:09:42,400 --> 00:09:45,400
we're trying<font color="#E5E5E5"> to do with</font><font color="#CCCCCC"> respect</font><font color="#E5E5E5"> to this</font>

260
00:09:43,840 --> 00:09:46,930
recommendation<font color="#CCCCCC"> of keeping</font><font color="#E5E5E5"> your parsers</font>

261
00:09:45,400 --> 00:09:48,970
<font color="#E5E5E5">to know more complex than deterministic</font>

262
00:09:46,930 --> 00:09:50,439
context-free<font color="#E5E5E5"> is to minimize parser</font>

263
00:09:48,970 --> 00:09:52,030
complexity we're taking the Turing

264
00:09:50,440 --> 00:09:53,560
machine away<font color="#E5E5E5"> because we</font><font color="#CCCCCC"> don't want</font><font color="#E5E5E5"> to</font>

265
00:09:52,030 --> 00:09:55,689
give the attacker a Turing machine and

266
00:09:53,560 --> 00:09:57,520
our parser is our first line of defense

267
00:09:55,690 --> 00:09:59,500
again with<font color="#E5E5E5"> respect to avoiding shotgun</font>

268
00:09:57,520 --> 00:10:02,560
parsers it means that we have<font color="#CCCCCC"> a very</font>

269
00:09:59,500 --> 00:10:05,080
<font color="#CCCCCC">discrete boundary in comes the input and</font>

270
00:10:02,560 --> 00:10:08,319
if the input<font color="#CCCCCC"> is</font><font color="#E5E5E5"> untoward the parser says</font>

271
00:10:05,080 --> 00:10:13,360
<font color="#CCCCCC">no pasaran</font><font color="#E5E5E5"> we're just going to reject</font>

272
00:10:08,320 --> 00:10:14,860
this so it's a tall order<font color="#E5E5E5"> reducing the</font>

273
00:10:13,360 --> 00:10:18,100
complexity of<font color="#E5E5E5"> our input languages is</font>

274
00:10:14,860 --> 00:10:19,540
something that has it's a very strong

275
00:10:18,100 --> 00:10:21,400
counter<font color="#CCCCCC"> currents to what we spent most</font>

276
00:10:19,540 --> 00:10:23,439
of the<font color="#CCCCCC"> night he is doing</font><font color="#E5E5E5"> when we started</font>

277
00:10:21,400 --> 00:10:26,920
introducing<font color="#E5E5E5"> a lot of active content like</font>

278
00:10:23,440 --> 00:10:30,100
<font color="#E5E5E5">flash and like Adobe Acrobat and like</font>

279
00:10:26,920 --> 00:10:31,780
<font color="#CCCCCC">JavaScript immediately we found that our</font>

280
00:10:30,100 --> 00:10:33,610
content became a lot more<font color="#CCCCCC"> rich there was</font>

281
00:10:31,780 --> 00:10:36,850
<font color="#E5E5E5">a whole world of</font><font color="#CCCCCC"> things that we could do</font>

282
00:10:33,610 --> 00:10:38,980
with with<font color="#E5E5E5"> XML and DT DS and infinite</font>

283
00:10:36,850 --> 00:10:43,210
extensibility of<font color="#CCCCCC"> x.509 and all of</font><font color="#E5E5E5"> this</font>

284
00:10:38,980 --> 00:10:44,770
stuff<font color="#E5E5E5"> but we find that now that we've</font>

285
00:10:43,210 --> 00:10:46,120
developed<font color="#E5E5E5"> our engineering practice more</font>

286
00:10:44,770 --> 00:10:47,710
<font color="#E5E5E5">and more there's a common kernel of</font>

287
00:10:46,120 --> 00:10:49,120
things that we tend to<font color="#E5E5E5"> see occur over</font>

288
00:10:47,710 --> 00:10:51,370
and over<font color="#E5E5E5"> and over again in protocols</font>

289
00:10:49,120 --> 00:10:52,960
that<font color="#E5E5E5"> we definitely</font><font color="#CCCCCC"> need to</font><font color="#E5E5E5"> do and then</font>

290
00:10:51,370 --> 00:10:55,630
<font color="#E5E5E5">there's all of these other</font><font color="#CCCCCC"> things that</font>

291
00:10:52,960 --> 00:10:57,670
represent<font color="#E5E5E5"> huge complexity and have in</font>

292
00:10:55,630 --> 00:10:59,020
the past led to<font color="#E5E5E5"> vulnerability which is</font>

293
00:10:57,670 --> 00:11:00,430
why I chose<font color="#CCCCCC"> the examples that</font><font color="#E5E5E5"> I just</font>

294
00:10:59,020 --> 00:11:01,699
<font color="#E5E5E5">chose of how it is that we kept lifting</font>

295
00:11:00,430 --> 00:11:05,358
<font color="#CCCCCC">ourselves above</font><font color="#E5E5E5"> this</font>

296
00:11:01,699 --> 00:11:09,290
<font color="#E5E5E5">um people</font><font color="#CCCCCC"> ask</font><font color="#E5E5E5"> me this a lot ultimately</font>

297
00:11:05,359 --> 00:11:11,239
the answer<font color="#E5E5E5"> is well kind of we have</font><font color="#CCCCCC"> a lot</font>

298
00:11:09,290 --> 00:11:14,329
<font color="#CCCCCC">of walking back to do and this</font><font color="#E5E5E5"> is just</font>

299
00:11:11,239 --> 00:11:16,730
one part of<font color="#E5E5E5"> that and I hope that in the</font>

300
00:11:14,329 --> 00:11:18,469
future<font color="#E5E5E5"> people</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> propose new new</font>

301
00:11:16,730 --> 00:11:20,179
protocols that follow this

302
00:11:18,470 --> 00:11:22,040
<font color="#CCCCCC">recommendation</font><font color="#E5E5E5"> and avoid that type</font><font color="#CCCCCC"> of</font>

303
00:11:20,179 --> 00:11:23,988
complexity avoid general-purpose

304
00:11:22,040 --> 00:11:25,488
computing<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you can just kind of</font>

305
00:11:23,989 --> 00:11:28,359
voiced on other people before<font color="#E5E5E5"> they can</font>

306
00:11:25,489 --> 00:11:32,029
tell whether it's right to<font color="#E5E5E5"> do it or not</font>

307
00:11:28,359 --> 00:11:33,949
so of course these notions<font color="#E5E5E5"> on you see</font>

308
00:11:32,029 --> 00:11:36,829
here the<font color="#CCCCCC"> postel principle all kinds of</font>

309
00:11:33,949 --> 00:11:39,469
other<font color="#CCCCCC"> things</font><font color="#E5E5E5"> we we have to be careful</font><font color="#CCCCCC"> to</font>

310
00:11:36,829 --> 00:11:40,160
ensure<font color="#E5E5E5"> that although we can't get rid</font><font color="#CCCCCC"> of</font>

311
00:11:39,470 --> 00:11:42,439
them today

312
00:11:40,160 --> 00:11:43,850
<font color="#E5E5E5">we don't perpetuate</font><font color="#CCCCCC"> these problems a</font>

313
00:11:42,439 --> 00:11:45,230
<font color="#CCCCCC">Bigfoot is</font><font color="#E5E5E5"> this abstraction and</font>

314
00:11:43,850 --> 00:11:46,639
dependency injection are another one<font color="#E5E5E5"> I'd</font>

315
00:11:45,230 --> 00:11:48,079
like<font color="#CCCCCC"> to</font><font color="#E5E5E5"> specifically call out because</font>

316
00:11:46,639 --> 00:11:52,279
they generally<font color="#E5E5E5"> lift</font><font color="#CCCCCC"> Yuja turing</font>

317
00:11:48,079 --> 00:11:54,439
completeness<font color="#CCCCCC"> um so yeah</font><font color="#E5E5E5"> like these these</font>

318
00:11:52,279 --> 00:11:55,639
things<font color="#CCCCCC"> have continuously been problems</font>

319
00:11:54,439 --> 00:11:58,419
and they will continue to be<font color="#E5E5E5"> problems</font>

320
00:11:55,639 --> 00:12:00,649
<font color="#E5E5E5">until we solve the</font><font color="#CCCCCC"> specific problem and</font>

321
00:11:58,419 --> 00:12:02,449
this thing where the input language is

322
00:12:00,649 --> 00:12:04,160
above deterministic context-free is

323
00:12:02,449 --> 00:12:06,649
actually a common<font color="#E5E5E5"> recurring theme in all</font>

324
00:12:04,160 --> 00:12:10,910
of them um I already<font color="#E5E5E5"> went through that</font>

325
00:12:06,649 --> 00:12:12,139
example but essentially<font color="#E5E5E5"> again if we</font>

326
00:12:10,910 --> 00:12:14,719
don't do this<font color="#E5E5E5"> it won't be amenable to</font>

327
00:12:12,139 --> 00:12:16,609
computational solutions<font color="#CCCCCC"> um so here's the</font>

328
00:12:14,720 --> 00:12:18,470
standard<font color="#CCCCCC"> of proof for whether</font><font color="#E5E5E5"> we can</font>

329
00:12:16,609 --> 00:12:20,629
tell if an input language is safe based

330
00:12:18,470 --> 00:12:22,519
on this criterion alone<font color="#E5E5E5"> remembering that</font>

331
00:12:20,629 --> 00:12:26,779
there are six others<font color="#E5E5E5"> in the previous</font>

332
00:12:22,519 --> 00:12:28,309
work<font color="#CCCCCC"> um</font><font color="#E5E5E5"> that all of the idioms that</font><font color="#CCCCCC"> are</font>

333
00:12:26,779 --> 00:12:30,859
within<font color="#E5E5E5"> it are within deterministic</font>

334
00:12:28,309 --> 00:12:33,649
context-free<font color="#E5E5E5"> and that there is closure</font>

335
00:12:30,859 --> 00:12:35,509
<font color="#E5E5E5">under under the accretion of these</font>

336
00:12:33,649 --> 00:12:36,829
idioms<font color="#CCCCCC"> into the protocols</font><font color="#E5E5E5"> so the way</font>

337
00:12:35,509 --> 00:12:38,299
that<font color="#CCCCCC"> they're used doesn't end up</font>

338
00:12:36,829 --> 00:12:39,349
creating some<font color="#E5E5E5"> kind of implicit cross</font>

339
00:12:38,299 --> 00:12:43,669
reference or<font color="#CCCCCC"> something that would look</font>

340
00:12:39,350 --> 00:12:45,410
the language the idiomatic field<font color="#E5E5E5"> should</font>

341
00:12:43,669 --> 00:12:47,929
simplify that proof may occur only once

342
00:12:45,410 --> 00:12:50,480
<font color="#E5E5E5">in the context and the data upon</font><font color="#CCCCCC"> which</font>

343
00:12:47,929 --> 00:12:53,629
it relates to<font color="#E5E5E5"> for validity is within</font><font color="#CCCCCC"> DCF</font>

344
00:12:50,480 --> 00:12:55,519
so in other words if it does not in and

345
00:12:53,629 --> 00:12:57,319
<font color="#CCCCCC">of itself create</font><font color="#E5E5E5"> those patterns</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we</font>

346
00:12:55,519 --> 00:13:01,279
cited in<font color="#E5E5E5"> one of the previous slides and</font>

347
00:12:57,319 --> 00:13:03,799
it can be computed<font color="#E5E5E5"> by a finite state</font>

348
00:13:01,279 --> 00:13:05,779
machine that<font color="#E5E5E5"> has a stack then we're all</font>

349
00:13:03,799 --> 00:13:07,129
right to use<font color="#E5E5E5"> it so</font><font color="#CCCCCC"> let's</font><font color="#E5E5E5"> not briefly see</font>

350
00:13:05,779 --> 00:13:08,899
if there<font color="#E5E5E5"> are a few things that we can</font>

351
00:13:07,129 --> 00:13:10,970
find<font color="#E5E5E5"> within deterministic context-free I</font>

352
00:13:08,899 --> 00:13:14,339
<font color="#E5E5E5">promise that I'll keep this short</font><font color="#CCCCCC"> these</font>

353
00:13:10,970 --> 00:13:16,740
<font color="#E5E5E5">are essentially proofs but I've</font>

354
00:13:14,339 --> 00:13:19,829
try to make them comprehensible without

355
00:13:16,740 --> 00:13:21,089
too much formalism so the first one that

356
00:13:19,829 --> 00:13:23,310
I<font color="#E5E5E5"> would like to point out is protocol</font>

357
00:13:21,089 --> 00:13:25,230
<font color="#E5E5E5">state protocol state is something that</font>

358
00:13:23,310 --> 00:13:27,388
we run into<font color="#E5E5E5"> a lot almost every protocol</font>

359
00:13:25,230 --> 00:13:29,100
has state and we wonder well it's<font color="#E5E5E5"> very</font>

360
00:13:27,389 --> 00:13:32,160
<font color="#E5E5E5">hard to</font><font color="#CCCCCC"> read a regular expression or</font>

361
00:13:29,100 --> 00:13:34,709
it's very<font color="#E5E5E5"> hard to write</font><font color="#CCCCCC"> DNS that gives</font>

362
00:13:32,160 --> 00:13:36,600
the protocol state but we can do<font color="#E5E5E5"> a spec</font>

363
00:13:34,709 --> 00:13:38,309
<font color="#E5E5E5">proof here to show</font><font color="#CCCCCC"> that in fact protocol</font>

364
00:13:36,600 --> 00:13:41,069
<font color="#E5E5E5">state is perfectly acceptable and</font>

365
00:13:38,309 --> 00:13:43,019
retains your<font color="#E5E5E5"> access to the tooling</font><font color="#CCCCCC"> that</font>

366
00:13:41,069 --> 00:13:45,779
we can develop around<font color="#E5E5E5"> these types of</font>

367
00:13:43,019 --> 00:13:48,059
<font color="#E5E5E5">simple protocol</font><font color="#CCCCCC"> um so we let P be a</font>

368
00:13:45,779 --> 00:13:50,399
stateful protocol we include the the

369
00:13:48,059 --> 00:13:51,509
<font color="#CCCCCC">context</font><font color="#E5E5E5"> that it sits in context tree is</font>

370
00:13:50,399 --> 00:13:53,490
in this<font color="#E5E5E5"> respect a little bit of a</font>

371
00:13:51,509 --> 00:13:55,110
misnomer it simply means<font color="#E5E5E5"> the context is</font>

372
00:13:53,490 --> 00:13:56,240
only<font color="#E5E5E5"> hard call not that there is no</font>

373
00:13:55,110 --> 00:13:59,249
context at all

374
00:13:56,240 --> 00:14:00,779
so we can take<font color="#E5E5E5"> this this context in</font>

375
00:13:59,249 --> 00:14:02,069
which the packet is being parsed<font color="#E5E5E5"> and</font>

376
00:14:00,779 --> 00:14:05,610
treated as though it we're in

377
00:14:02,069 --> 00:14:10,199
encapsulating element<font color="#CCCCCC"> um then we can</font>

378
00:14:05,610 --> 00:14:11,850
simply do<font color="#E5E5E5"> this we can say we'll draw up</font>

379
00:14:10,199 --> 00:14:15,029
a state<font color="#CCCCCC"> machine using our</font><font color="#E5E5E5"> existing</font>

380
00:14:11,850 --> 00:14:19,410
<font color="#E5E5E5">protocol 15 from these previous states s</font>

381
00:14:15,029 --> 00:14:21,569
<font color="#E5E5E5">and then we'll simply add the the</font>

382
00:14:19,410 --> 00:14:24,750
validity of the message to<font color="#CCCCCC"> this we'll</font>

383
00:14:21,569 --> 00:14:28,740
construct<font color="#E5E5E5"> a new state machine</font><font color="#CCCCCC"> that that</font>

384
00:14:24,750 --> 00:14:30,329
essentially adds<font color="#CCCCCC"> arrows to a reject</font>

385
00:14:28,740 --> 00:14:32,129
<font color="#CCCCCC">state for all of the messages that are</font>

386
00:14:30,329 --> 00:14:34,500
<font color="#E5E5E5">not valid given our current server state</font>

387
00:14:32,129 --> 00:14:38,309
and there we have it<font color="#E5E5E5"> we've just shown by</font>

388
00:14:34,500 --> 00:14:41,189
construction that it happens<font color="#E5E5E5"> that this</font>

389
00:14:38,309 --> 00:14:44,639
<font color="#CCCCCC">is just me</font><font color="#E5E5E5"> citing exactly how you do</font>

390
00:14:41,189 --> 00:14:47,279
that construction draw those arrows in a

391
00:14:44,639 --> 00:14:49,170
formal way<font color="#E5E5E5"> we can see that having a</font>

392
00:14:47,279 --> 00:14:51,449
protocol state alone isn't enough to

393
00:14:49,170 --> 00:14:53,729
<font color="#E5E5E5">lift the language above even potentially</font>

394
00:14:51,449 --> 00:14:55,589
regular<font color="#E5E5E5"> it is just a finite state</font>

395
00:14:53,730 --> 00:14:58,170
automaton because the protocol state

396
00:14:55,589 --> 00:15:00,240
machine is a finite<font color="#E5E5E5"> state automaton if</font>

397
00:14:58,170 --> 00:15:03,120
it's not then<font color="#E5E5E5"> unfortunately this doesn't</font>

398
00:15:00,240 --> 00:15:05,100
<font color="#E5E5E5">work it's important to note that this</font>

399
00:15:03,120 --> 00:15:06,750
didn't even<font color="#CCCCCC"> change our actual protocol</font>

400
00:15:05,100 --> 00:15:09,300
specification there is a large<font color="#CCCCCC"> family of</font>

401
00:15:06,750 --> 00:15:11,699
<font color="#CCCCCC">protocols that do</font><font color="#E5E5E5"> not need to be revised</font>

402
00:15:09,300 --> 00:15:13,620
with respect to this<font color="#CCCCCC"> recommendation we</font>

403
00:15:11,699 --> 00:15:17,729
<font color="#CCCCCC">need</font><font color="#E5E5E5"> to only zero in on those particular</font>

404
00:15:13,620 --> 00:15:19,259
<font color="#CCCCCC">things that would list</font><font color="#E5E5E5"> the language so</font>

405
00:15:17,730 --> 00:15:22,110
if for<font color="#E5E5E5"> example the protocol state</font>

406
00:15:19,259 --> 00:15:24,089
machine were able to force you to<font color="#E5E5E5"> look</font>

407
00:15:22,110 --> 00:15:25,740
back an arbitrary<font color="#CCCCCC"> number of</font><font color="#E5E5E5"> packets to</font>

408
00:15:24,089 --> 00:15:27,720
see previously whether your current

409
00:15:25,740 --> 00:15:30,120
<font color="#E5E5E5">element is valid rather than</font>

410
00:15:27,720 --> 00:15:32,850
to keep that protocol state<font color="#E5E5E5"> finite</font>

411
00:15:30,120 --> 00:15:34,800
within the<font color="#E5E5E5"> machine and it didn't allow</font>

412
00:15:32,850 --> 00:15:36,480
you to put<font color="#E5E5E5"> that into a stack like thing</font>

413
00:15:34,800 --> 00:15:38,758
<font color="#E5E5E5">rather it intended that</font><font color="#CCCCCC"> you keep on</font><font color="#E5E5E5"> the</font>

414
00:15:36,480 --> 00:15:41,459
infinite<font color="#CCCCCC"> lengthy index</font><font color="#E5E5E5"> then it would not</font>

415
00:15:38,759 --> 00:15:44,399
<font color="#CCCCCC">work and we would hypothesize that that</font>

416
00:15:41,459 --> 00:15:46,529
would be a<font color="#CCCCCC"> locust of bugs</font><font color="#E5E5E5"> um we see as</font>

417
00:15:44,399 --> 00:15:49,579
well<font color="#E5E5E5"> with respect to authorization um</font>

418
00:15:46,529 --> 00:15:51,720
this is my<font color="#E5E5E5"> next</font><font color="#CCCCCC"> example by the way</font>

419
00:15:49,579 --> 00:15:52,949
<font color="#E5E5E5">authorization is not specifically</font>

420
00:15:51,720 --> 00:15:55,589
guaranteed to be deterministic

421
00:15:52,949 --> 00:15:57,449
context-free<font color="#E5E5E5"> and in fact I have a number</font>

422
00:15:55,589 --> 00:15:59,970
<font color="#E5E5E5">of examples where non deterministic</font>

423
00:15:57,449 --> 00:16:02,609
context-free authorization has resulted

424
00:15:59,970 --> 00:16:04,920
in authorization by<font color="#CCCCCC"> parties these</font>

425
00:16:02,610 --> 00:16:07,170
<font color="#E5E5E5">examples are Android master key and</font><font color="#CCCCCC"> PKI</font>

426
00:16:04,920 --> 00:16:08,339
<font color="#CCCCCC">layer-cake both of them very different</font>

427
00:16:07,170 --> 00:16:11,430
in the interest of time I'll only

428
00:16:08,339 --> 00:16:13,980
<font color="#E5E5E5">discuss Android master key if you recall</font>

429
00:16:11,430 --> 00:16:17,519
this was<font color="#CCCCCC"> a vulnerability</font><font color="#E5E5E5"> whereby an</font>

430
00:16:13,980 --> 00:16:19,560
Android app is essentially a zip file

431
00:16:17,519 --> 00:16:22,430
and<font color="#E5E5E5"> it contains a manifest there were</font>

432
00:16:19,560 --> 00:16:25,560
two different parsers<font color="#CCCCCC"> um one of</font><font color="#E5E5E5"> them</font>

433
00:16:22,430 --> 00:16:27,479
looked aside in one direction<font color="#E5E5E5"> forward to</font>

434
00:16:25,560 --> 00:16:28,829
the first manifest and the other one

435
00:16:27,480 --> 00:16:30,750
looked in direction to the second

436
00:16:28,829 --> 00:16:32,339
manifest the two parsers had two

437
00:16:30,750 --> 00:16:34,529
<font color="#E5E5E5">different functions the</font><font color="#CCCCCC"> first one</font>

438
00:16:32,339 --> 00:16:36,329
<font color="#E5E5E5">essentially was to</font><font color="#CCCCCC"> determine whether the</font>

439
00:16:34,529 --> 00:16:37,620
manifest was valid<font color="#E5E5E5"> and the second one to</font>

440
00:16:36,329 --> 00:16:39,569
<font color="#CCCCCC">determine whether the package matched</font>

441
00:16:37,620 --> 00:16:41,730
the manifest<font color="#E5E5E5"> so the attacker could</font>

442
00:16:39,569 --> 00:16:44,639
tribulus simply<font color="#E5E5E5"> generates or take a</font>

443
00:16:41,730 --> 00:16:47,879
valid manifest<font color="#E5E5E5"> tack it on to the front</font>

444
00:16:44,639 --> 00:16:49,350
and then make a new<font color="#CCCCCC"> invalid Lee</font><font color="#E5E5E5"> sign to</font>

445
00:16:47,879 --> 00:16:51,420
manifest that actually correspond to

446
00:16:49,350 --> 00:16:53,160
what was in the jar<font color="#CCCCCC"> jacket</font><font color="#E5E5E5"> onto</font><font color="#CCCCCC"> the back</font>

447
00:16:51,420 --> 00:16:54,180
and<font color="#E5E5E5"> it would validate does this</font>

448
00:16:53,160 --> 00:16:59,069
structure sound a little bit familiar

449
00:16:54,180 --> 00:17:00,239
<font color="#CCCCCC">because yeah</font><font color="#E5E5E5"> um</font><font color="#CCCCCC"> so if we ensure that our</font>

450
00:16:59,069 --> 00:17:02,040
authorization<font color="#CCCCCC"> to</font><font color="#E5E5E5"> follow certain</font>

451
00:17:00,240 --> 00:17:03,420
properties we<font color="#CCCCCC"> can avoid this type</font><font color="#E5E5E5"> of</font>

452
00:17:02,040 --> 00:17:07,319
problem from an engineering perspective

453
00:17:03,420 --> 00:17:08,369
and it just won't<font color="#E5E5E5"> happen again a little</font>

454
00:17:07,319 --> 00:17:09,780
bit of formalism here

455
00:17:08,369 --> 00:17:11,809
<font color="#CCCCCC">I feel free to read along but</font>

456
00:17:09,780 --> 00:17:15,829
<font color="#E5E5E5">essentially what I'm saying</font><font color="#CCCCCC"> here is that</font>

457
00:17:11,809 --> 00:17:18,539
<font color="#E5E5E5">if we ensure that the authorization</font>

458
00:17:15,829 --> 00:17:22,109
<font color="#E5E5E5">fields that that convey the proof of</font>

459
00:17:18,539 --> 00:17:24,109
authorization are in some way in a

460
00:17:22,109 --> 00:17:26,789
hierarchical relationship<font color="#E5E5E5"> with an</font>

461
00:17:24,109 --> 00:17:29,219
unambiguous hierarchical relationship

462
00:17:26,789 --> 00:17:30,900
with the thing<font color="#E5E5E5"> that they are authorizing</font>

463
00:17:29,220 --> 00:17:33,270
<font color="#E5E5E5">then there can be no potential for</font>

464
00:17:30,900 --> 00:17:36,360
<font color="#CCCCCC">confusion</font><font color="#E5E5E5"> this is an exercise and</font>

465
00:17:33,270 --> 00:17:37,980
explicitly specifying what it is to

466
00:17:36,360 --> 00:17:40,469
which this authorization applies and

467
00:17:37,980 --> 00:17:40,809
seeing to it that<font color="#CCCCCC"> this authorization</font><font color="#E5E5E5"> is</font>

468
00:17:40,470 --> 00:17:42,940
the

469
00:17:40,809 --> 00:17:46,418
specifically associated<font color="#E5E5E5"> with the thing</font>

470
00:17:42,940 --> 00:17:48,159
<font color="#E5E5E5">to which it applies um because again if</font>

471
00:17:46,419 --> 00:17:51,220
you<font color="#CCCCCC"> have those</font><font color="#E5E5E5"> cross references you</font>

472
00:17:48,159 --> 00:17:54,370
can't really<font color="#E5E5E5"> show what's going on</font><font color="#CCCCCC"> so</font>

473
00:17:51,220 --> 00:17:57,129
this<font color="#E5E5E5"> is also going</font><font color="#CCCCCC"> to come up when</font><font color="#E5E5E5"> I</font>

474
00:17:54,370 --> 00:17:59,080
<font color="#E5E5E5">talk about</font><font color="#CCCCCC"> checksums</font><font color="#E5E5E5"> later</font><font color="#CCCCCC"> on the third</font>

475
00:17:57,129 --> 00:18:01,299
one<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I see most</font><font color="#CCCCCC"> often is is an</font>

476
00:17:59,080 --> 00:18:03,789
<font color="#E5E5E5">objection</font><font color="#CCCCCC"> to length</font><font color="#E5E5E5"> fields and people</font>

477
00:18:01,299 --> 00:18:05,470
say well how on earth<font color="#E5E5E5"> do</font><font color="#CCCCCC"> I construct a</font>

478
00:18:03,789 --> 00:18:08,580
finite<font color="#E5E5E5"> state automaton or</font><font color="#CCCCCC"> a stack</font>

479
00:18:05,470 --> 00:18:11,110
machine that deals with<font color="#CCCCCC"> myleik</font><font color="#E5E5E5"> fields</font>

480
00:18:08,580 --> 00:18:13,600
this<font color="#E5E5E5"> it turns out is</font><font color="#CCCCCC"> not too terribly</font>

481
00:18:11,110 --> 00:18:15,340
difficult<font color="#CCCCCC"> on there's a device that we</font>

482
00:18:13,600 --> 00:18:19,029
use<font color="#E5E5E5"> in proving these things out called</font>

483
00:18:15,340 --> 00:18:22,749
unary or<font color="#E5E5E5"> with meticulous</font><font color="#CCCCCC"> tat le you know</font>

484
00:18:19,029 --> 00:18:24,820
<font color="#E5E5E5">five one</font><font color="#CCCCCC"> uses</font><font color="#E5E5E5"> five um that might begin</font>

485
00:18:22,749 --> 00:18:27,759
to looked<font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit to you like</font>

486
00:18:24,820 --> 00:18:29,590
matching<font color="#E5E5E5"> balanced</font><font color="#CCCCCC"> prints um when we</font>

487
00:18:27,759 --> 00:18:31,240
match<font color="#E5E5E5"> balanced parens essentially what</font>

488
00:18:29,590 --> 00:18:32,799
we're doing<font color="#CCCCCC"> is</font><font color="#E5E5E5"> we're creating a stack we</font>

489
00:18:31,240 --> 00:18:34,960
push the paren<font color="#CCCCCC"> onto the stack when we</font>

490
00:18:32,799 --> 00:18:36,789
see an open paren when we see a closed

491
00:18:34,960 --> 00:18:38,019
paren we pop it off the stack<font color="#CCCCCC"> and see if</font>

492
00:18:36,789 --> 00:18:39,850
it's the same<font color="#CCCCCC"> if it's not saying we</font>

493
00:18:38,019 --> 00:18:42,519
reject<font color="#E5E5E5"> if we reach the</font><font color="#CCCCCC"> end of the in</font>

494
00:18:39,850 --> 00:18:46,209
putting the stack is empty<font color="#E5E5E5"> then then we</font>

495
00:18:42,519 --> 00:18:48,249
accept the message<font color="#CCCCCC"> and</font><font color="#E5E5E5"> that is just a</font>

496
00:18:46,210 --> 00:18:49,539
formal way<font color="#CCCCCC"> of matching brackets no</font>

497
00:18:48,249 --> 00:18:53,139
actual computer would do this you<font color="#E5E5E5"> would</font>

498
00:18:49,539 --> 00:18:54,730
use counts but nonetheless<font color="#E5E5E5"> that's how we</font>

499
00:18:53,139 --> 00:18:57,008
do these proofs<font color="#E5E5E5"> um</font>

500
00:18:54,730 --> 00:18:59,230
so matching<font color="#E5E5E5"> balanced friends in</font><font color="#CCCCCC"> unary or</font>

501
00:18:57,009 --> 00:19:03,309
<font color="#CCCCCC">Kentucky</font><font color="#E5E5E5"> it turns out is</font><font color="#CCCCCC"> exactly the</font>

502
00:18:59,230 --> 00:19:05,499
same as matching matching characters in

503
00:19:03,309 --> 00:19:07,539
a message to<font color="#CCCCCC"> a unary tally established</font>

504
00:19:05,499 --> 00:19:08,799
by the<font color="#CCCCCC"> link</font><font color="#E5E5E5"> field so as long</font><font color="#CCCCCC"> as we see</font>

505
00:19:07,539 --> 00:19:10,480
that<font color="#E5E5E5"> the length field is in</font><font color="#CCCCCC"> a</font>

506
00:19:08,799 --> 00:19:13,330
hierarchical relationship<font color="#CCCCCC"> with the thing</font>

507
00:19:10,480 --> 00:19:15,429
to<font color="#E5E5E5"> which it applies then we can</font><font color="#CCCCCC"> validate</font>

508
00:19:13,330 --> 00:19:16,749
the packet this it turns out is one way

509
00:19:15,429 --> 00:19:19,360
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we could do something</font><font color="#CCCCCC"> like avoid</font>

510
00:19:16,749 --> 00:19:20,799
<font color="#CCCCCC">heartbleed</font><font color="#E5E5E5"> you might recall</font><font color="#CCCCCC"> that hurt</font>

511
00:19:19,360 --> 00:19:24,129
<font color="#CCCCCC">lead was essentially a light field</font>

512
00:19:20,799 --> 00:19:26,529
validation attack problem if there had

513
00:19:24,129 --> 00:19:30,100
<font color="#CCCCCC">been a parser somewhere in the beginning</font>

514
00:19:26,529 --> 00:19:32,019
<font color="#CCCCCC">that had said I'm going to now keep a</font>

515
00:19:30,100 --> 00:19:33,998
tally and see that I get<font color="#CCCCCC"> as many things</font>

516
00:19:32,019 --> 00:19:36,909
out of<font color="#E5E5E5"> this message as</font><font color="#CCCCCC"> it claims that</font><font color="#E5E5E5"> it</font>

517
00:19:33,999 --> 00:19:38,259
has in it<font color="#E5E5E5"> we wouldn't have had the</font>

518
00:19:36,909 --> 00:19:43,960
<font color="#CCCCCC">problem in the first place it</font><font color="#E5E5E5"> would have</font>

519
00:19:38,259 --> 00:19:45,970
said no<font color="#CCCCCC"> peso</font><font color="#E5E5E5"> Don you're gone by um so</font>

520
00:19:43,960 --> 00:19:49,059
we've just<font color="#E5E5E5"> done by</font><font color="#CCCCCC"> the way a proof by</font>

521
00:19:45,970 --> 00:19:51,100
reduction here we've shown<font color="#E5E5E5"> formally</font>

522
00:19:49,059 --> 00:19:53,080
without doing really<font color="#E5E5E5"> a lot of mass at</font>

523
00:19:51,100 --> 00:19:53,949
all<font color="#E5E5E5"> that it happens that links fields</font>

524
00:19:53,080 --> 00:19:57,399
are within<font color="#E5E5E5"> our death</font>

525
00:19:53,950 --> 00:19:58,779
deterministic context for<font color="#CCCCCC"> a TV you might</font>

526
00:19:57,399 --> 00:20:01,209
as I mentioned want to<font color="#E5E5E5"> implement the</font>

527
00:19:58,779 --> 00:20:03,340
stack is an unbounded<font color="#E5E5E5"> counter or better</font>

528
00:20:01,210 --> 00:20:04,840
still<font color="#CCCCCC"> you might want to be very explicit</font>

529
00:20:03,340 --> 00:20:07,120
<font color="#E5E5E5">about your specification inbound the</font>

530
00:20:04,840 --> 00:20:10,510
counter this<font color="#E5E5E5"> is an interesting point</font>

531
00:20:07,120 --> 00:20:13,529
because<font color="#CCCCCC"> no actual</font><font color="#E5E5E5"> machine really</font><font color="#CCCCCC"> is able</font>

532
00:20:10,510 --> 00:20:15,549
<font color="#E5E5E5">to implement a full pushdown automaton</font>

533
00:20:13,529 --> 00:20:18,399
<font color="#E5E5E5">lacking infinite stacked it's simply</font>

534
00:20:15,549 --> 00:20:21,879
<font color="#E5E5E5">impossible</font><font color="#CCCCCC"> I'm a very common bug</font><font color="#E5E5E5"> that</font>

535
00:20:18,399 --> 00:20:24,399
I've seen<font color="#E5E5E5"> unfortunately I don't have a</font>

536
00:20:21,880 --> 00:20:27,100
reference<font color="#E5E5E5"> for</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> handy is one whereby a</font>

537
00:20:24,399 --> 00:20:29,320
language will fail<font color="#CCCCCC"> to specify</font><font color="#E5E5E5"> that a</font>

538
00:20:27,100 --> 00:20:32,620
given<font color="#E5E5E5"> length is signed or unsigned</font><font color="#CCCCCC"> at</font>

539
00:20:29,320 --> 00:20:35,678
<font color="#CCCCCC">64-bit or we're</font><font color="#E5E5E5"> still it will demand</font>

540
00:20:32,620 --> 00:20:38,439
that that<font color="#CCCCCC"> the length field be up to you</font>

541
00:20:35,679 --> 00:20:40,570
<font color="#E5E5E5">864 max this is kind of a</font><font color="#CCCCCC"> nightmare for</font>

542
00:20:38,440 --> 00:20:44,679
Java programmers<font color="#CCCCCC"> because they have a</font>

543
00:20:40,570 --> 00:20:46,779
bound to sign<font color="#E5E5E5"> 64-bit integers and when</font>

544
00:20:44,679 --> 00:20:49,720
you have<font color="#E5E5E5"> that problem</font><font color="#CCCCCC"> a lot of</font><font color="#E5E5E5"> people</font>

545
00:20:46,779 --> 00:20:51,970
take shortcuts<font color="#E5E5E5"> so you can see how this</font>

546
00:20:49,720 --> 00:20:54,940
also<font color="#E5E5E5"> ties into the needs to couple it</font>

547
00:20:51,970 --> 00:20:56,860
with<font color="#E5E5E5"> an explicit specification of the</font>

548
00:20:54,940 --> 00:20:59,710
<font color="#CCCCCC">language for</font><font color="#E5E5E5"> you to really gain the</font>

549
00:20:56,860 --> 00:21:01,449
benefit of<font color="#E5E5E5"> it but both</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> these things</font>

550
00:20:59,710 --> 00:21:04,990
are required<font color="#CCCCCC"> you must</font><font color="#E5E5E5"> also do that and</font>

551
00:21:01,450 --> 00:21:08,980
then bugs like heart<font color="#CCCCCC"> leads will be a</font>

552
00:21:04,990 --> 00:21:10,960
thing of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> past on the most</font>

553
00:21:08,980 --> 00:21:13,000
complicated example that I have of this

554
00:21:10,960 --> 00:21:15,580
<font color="#CCCCCC">is checksum digesting signatures and</font>

555
00:21:13,000 --> 00:21:17,260
this is where I look<font color="#E5E5E5"> again I mentioned</font>

556
00:21:15,580 --> 00:21:19,899
when<font color="#CCCCCC"> were specifying protocols in RFC</font>

557
00:21:17,260 --> 00:21:22,059
<font color="#CCCCCC">adnf usually we</font><font color="#E5E5E5"> just say signature goes</font>

558
00:21:19,899 --> 00:21:22,989
here don't worry<font color="#E5E5E5"> about it in the context</font>

559
00:21:22,059 --> 00:21:25,330
of<font color="#E5E5E5"> this formal description of</font><font color="#CCCCCC"> the</font>

560
00:21:22,990 --> 00:21:28,179
language<font color="#E5E5E5"> well that's all well</font><font color="#CCCCCC"> and good I</font>

561
00:21:25,330 --> 00:21:30,610
don't<font color="#E5E5E5"> especially want</font><font color="#CCCCCC"> to draw up a</font>

562
00:21:28,179 --> 00:21:32,620
regular<font color="#CCCCCC"> expression that</font><font color="#E5E5E5"> validates is the</font>

563
00:21:30,610 --> 00:21:35,649
correct md5 sum of what<font color="#E5E5E5"> preceded it</font>

564
00:21:32,620 --> 00:21:37,059
either<font color="#CCCCCC"> I'm technically</font><font color="#E5E5E5"> it's possible</font><font color="#CCCCCC"> to</font>

565
00:21:35,649 --> 00:21:39,309
<font color="#E5E5E5">generate a regular expression</font><font color="#CCCCCC"> that does</font>

566
00:21:37,059 --> 00:21:41,470
very simple things though<font color="#E5E5E5"> like for</font>

567
00:21:39,309 --> 00:21:43,480
<font color="#CCCCCC">example</font><font color="#E5E5E5"> one that matches divisibility by</font>

568
00:21:41,470 --> 00:21:46,299
an arbitrary<font color="#E5E5E5"> natural number for all</font>

569
00:21:43,480 --> 00:21:47,440
<font color="#E5E5E5">members of radix</font><font color="#CCCCCC"> are that</font><font color="#E5E5E5"> is to say if</font>

570
00:21:46,299 --> 00:21:49,480
<font color="#E5E5E5">you told me</font>

571
00:21:47,440 --> 00:21:51,669
give me a<font color="#E5E5E5"> regular expression</font><font color="#CCCCCC"> that</font>

572
00:21:49,480 --> 00:21:54,279
<font color="#CCCCCC">matches all binary</font><font color="#E5E5E5"> numbers that are</font>

573
00:21:51,669 --> 00:21:56,710
divisible by<font color="#E5E5E5"> 7 I can actually draw that</font>

574
00:21:54,279 --> 00:21:58,720
<font color="#CCCCCC">and I'll</font><font color="#E5E5E5"> get into the reason that that's</font>

575
00:21:56,710 --> 00:21:59,889
also<font color="#E5E5E5"> in a little bit rather than boring</font>

576
00:21:58,720 --> 00:22:02,519
you<font color="#CCCCCC"> with the regular expression it's</font>

577
00:21:59,889 --> 00:22:04,750
actually miles long but<font color="#E5E5E5"> it does work I'm</font>

578
00:22:02,519 --> 00:22:05,860
<font color="#E5E5E5">the characteristics that we're</font><font color="#CCCCCC"> looking</font>

579
00:22:04,750 --> 00:22:08,830
<font color="#CCCCCC">for here in this proof</font>

580
00:22:05,860 --> 00:22:11,290
are simply v6<font color="#CCCCCC"> it has bounded computation</font>

581
00:22:08,830 --> 00:22:13,750
time so we know<font color="#E5E5E5"> it'll terminate and this</font>

582
00:22:11,290 --> 00:22:15,280
means<font color="#E5E5E5"> that it's it's not got a rice</font>

583
00:22:13,750 --> 00:22:19,750
theorem baste proof of Turing

584
00:22:15,280 --> 00:22:21,490
completeness it means that<font color="#E5E5E5"> it's we look</font>

585
00:22:19,750 --> 00:22:23,640
for the fact that it's<font color="#E5E5E5"> guaranteed</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font>

586
00:22:21,490 --> 00:22:27,040
both complete and either right<font color="#CCCCCC"> or</font><font color="#E5E5E5"> wrong</font>

587
00:22:23,640 --> 00:22:29,799
<font color="#E5E5E5">this again means that it's decidable</font><font color="#CCCCCC"> so</font>

588
00:22:27,040 --> 00:22:31,178
we see<font color="#E5E5E5"> that anything that is undecidable</font>

589
00:22:29,799 --> 00:22:33,429
cannot<font color="#E5E5E5"> all looking the</font><font color="#CCCCCC"> definition of</font>

590
00:22:31,179 --> 00:22:36,670
<font color="#E5E5E5">deterministic context-free happily</font>

591
00:22:33,429 --> 00:22:39,100
<font color="#E5E5E5">that's why we chose it we see that</font><font color="#CCCCCC"> it</font>

592
00:22:36,670 --> 00:22:41,320
can depend entirely and only on<font color="#CCCCCC"> specific</font>

593
00:22:39,100 --> 00:22:42,790
input that<font color="#E5E5E5"> means</font><font color="#CCCCCC"> that it has that</font>

594
00:22:41,320 --> 00:22:44,830
<font color="#E5E5E5">hierarchical relationship that I was</font>

595
00:22:42,790 --> 00:22:46,570
<font color="#E5E5E5">talking about before simply the fact</font>

596
00:22:44,830 --> 00:22:47,799
<font color="#CCCCCC">that it's tacked on to the end</font><font color="#E5E5E5"> or maybe</font>

597
00:22:46,570 --> 00:22:49,270
<font color="#E5E5E5">it's somewhere in the middle</font><font color="#CCCCCC"> but for</font>

598
00:22:47,799 --> 00:22:51,100
<font color="#CCCCCC">purposes of</font><font color="#E5E5E5"> computation replaced with</font>

599
00:22:49,270 --> 00:22:54,040
all<font color="#CCCCCC"> zeros as long as this process</font><font color="#E5E5E5"> is</font>

600
00:22:51,100 --> 00:22:56,469
<font color="#E5E5E5">fully deterministic and fully decides in</font>

601
00:22:54,040 --> 00:22:59,260
advance<font color="#E5E5E5"> to what it is</font><font color="#CCCCCC"> going to</font><font color="#E5E5E5"> apply</font>

602
00:22:56,470 --> 00:23:00,970
we're actually<font color="#E5E5E5"> fine to use it and so</font>

603
00:22:59,260 --> 00:23:04,179
<font color="#CCCCCC">again doesn't care about input semantics</font>

604
00:23:00,970 --> 00:23:06,160
<font color="#E5E5E5">is basically the same thing</font><font color="#CCCCCC"> constant</font>

605
00:23:04,179 --> 00:23:08,740
output<font color="#E5E5E5"> length simply means that it will</font>

606
00:23:06,160 --> 00:23:10,620
<font color="#E5E5E5">be within regular if it had an unbounded</font>

607
00:23:08,740 --> 00:23:12,850
output<font color="#E5E5E5"> length then it could be at best</font>

608
00:23:10,620 --> 00:23:16,030
<font color="#E5E5E5">context for you simply because it would</font>

609
00:23:12,850 --> 00:23:17,678
<font color="#E5E5E5">not have bounded state and then composed</font>

610
00:23:16,030 --> 00:23:19,000
<font color="#E5E5E5">of mathematical operations</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> finite</font>

611
00:23:17,679 --> 00:23:20,830
fields which is<font color="#CCCCCC"> what I was just</font>

612
00:23:19,000 --> 00:23:23,559
<font color="#E5E5E5">mentioning with the whole you know</font>

613
00:23:20,830 --> 00:23:25,418
divisibility<font color="#E5E5E5"> by</font><font color="#CCCCCC"> five the way that we</font>

614
00:23:23,559 --> 00:23:29,950
construct that finite state automaton is

615
00:23:25,419 --> 00:23:32,410
basically<font color="#E5E5E5"> by creating a</font><font color="#CCCCCC"> machine that add</font>

616
00:23:29,950 --> 00:23:34,179
by adding and shifting computes the

617
00:23:32,410 --> 00:23:38,590
modulus continuously of whatever<font color="#CCCCCC"> input</font>

618
00:23:34,179 --> 00:23:39,970
it<font color="#CCCCCC"> gets and so if we</font><font color="#E5E5E5"> bound ourselves to</font>

619
00:23:38,590 --> 00:23:42,189
things that are conclusive mathematical

620
00:23:39,970 --> 00:23:44,049
operations in finite fields<font color="#CCCCCC"> which</font><font color="#E5E5E5"> is</font>

621
00:23:42,190 --> 00:23:45,400
basically<font color="#E5E5E5"> that we can show</font><font color="#CCCCCC"> that they can</font>

622
00:23:44,049 --> 00:23:46,809
<font color="#CCCCCC">also be implemented</font><font color="#E5E5E5"> by regular</font>

623
00:23:45,400 --> 00:23:48,100
expression we just<font color="#CCCCCC"> don't want to</font>

624
00:23:46,809 --> 00:23:50,080
<font color="#CCCCCC">implement</font><font color="#E5E5E5"> them by regular expression</font>

625
00:23:48,100 --> 00:23:51,280
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> seriously enough</font><font color="#CCCCCC"> to show that it</font>

626
00:23:50,080 --> 00:23:54,580
<font color="#CCCCCC">can</font><font color="#E5E5E5"> be implemented with</font><font color="#CCCCCC"> a regular</font>

627
00:23:51,280 --> 00:23:57,610
<font color="#E5E5E5">expression so since we have this we</font><font color="#CCCCCC"> can</font>

628
00:23:54,580 --> 00:23:59,530
<font color="#E5E5E5">actually do math in our programs right</font>

629
00:23:57,610 --> 00:24:00,909
we can as long<font color="#E5E5E5"> as we keep ourselves to</font>

630
00:23:59,530 --> 00:24:03,639
cyclic arithmetic like that<font color="#CCCCCC"> to</font>

631
00:24:00,910 --> 00:24:05,440
arithmetic<font color="#E5E5E5"> in finite</font><font color="#CCCCCC"> field we don't</font><font color="#E5E5E5"> need</font>

632
00:24:03,640 --> 00:24:09,040
to go beyond regular which is one level

633
00:24:05,440 --> 00:24:10,630
<font color="#CCCCCC">below deterministic context-free as long</font>

634
00:24:09,040 --> 00:24:14,860
as the computation<font color="#E5E5E5"> looks like this</font>

635
00:24:10,630 --> 00:24:17,320
we're<font color="#E5E5E5"> flying we also don't need to to go</font>

636
00:24:14,860 --> 00:24:19,299
and specify details<font color="#E5E5E5"> BNF representations</font>

637
00:24:17,320 --> 00:24:22,629
<font color="#E5E5E5">is exactly how you compute an md5</font>

638
00:24:19,299 --> 00:24:24,789
<font color="#CCCCCC">in</font><font color="#E5E5E5"> a description of the md5 algorithm</font>

639
00:24:22,629 --> 00:24:30,730
that follows these six characteristics

640
00:24:24,789 --> 00:24:31,450
<font color="#CCCCCC">is enough</font><font color="#E5E5E5"> um</font><font color="#CCCCCC"> so what this</font><font color="#E5E5E5"> means is in</font>

641
00:24:30,730 --> 00:24:33,639
<font color="#E5E5E5">conclusion</font>

642
00:24:31,450 --> 00:24:35,320
most of the idioms that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> actually use</font>

643
00:24:33,639 --> 00:24:37,029
<font color="#CCCCCC">them</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> that don't</font><font color="#E5E5E5"> generate those</font>

644
00:24:35,320 --> 00:24:38,739
structures those cyclic structures<font color="#E5E5E5"> that</font>

645
00:24:37,029 --> 00:24:41,379
I was<font color="#E5E5E5"> talking about before and</font><font color="#CCCCCC"> that</font>

646
00:24:38,739 --> 00:24:44,259
don't cause your parser to do arbitrary

647
00:24:41,379 --> 00:24:46,449
computation<font color="#E5E5E5"> like the</font><font color="#CCCCCC"> Dow hack or like</font>

648
00:24:44,259 --> 00:24:49,960
parsing active documents and<font color="#E5E5E5"> somewhere</font>

649
00:24:46,450 --> 00:24:51,759
everywhere<font color="#E5E5E5"> you're you're actually going</font>

650
00:24:49,960 --> 00:24:54,489
to<font color="#CCCCCC"> be alright to not</font><font color="#E5E5E5"> have a lot</font><font color="#CCCCCC"> of bugs</font>

651
00:24:51,759 --> 00:24:56,049
<font color="#CCCCCC">so make sure that when you specify</font><font color="#E5E5E5"> a new</font>

652
00:24:54,489 --> 00:24:57,820
protocol<font color="#E5E5E5"> or when you have the</font>

653
00:24:56,049 --> 00:25:00,970
<font color="#E5E5E5">opportunity to amend an existing</font>

654
00:24:57,820 --> 00:25:03,999
protocol looking at HTTP<font color="#CCCCCC"> -</font><font color="#E5E5E5"> and most of</font>

655
00:25:00,970 --> 00:25:06,070
<font color="#E5E5E5">the things that you use are the things</font>

656
00:25:03,999 --> 00:25:08,230
that<font color="#CCCCCC"> you need</font><font color="#E5E5E5"> don't add things that</font>

657
00:25:06,070 --> 00:25:10,779
<font color="#CCCCCC">don't follow this it's premature ability</font>

658
00:25:08,230 --> 00:25:12,279
and features<font color="#E5E5E5"> that lift the input</font>

659
00:25:10,779 --> 00:25:15,059
language<font color="#CCCCCC"> to</font><font color="#E5E5E5"> context-sensitive or above</font>

660
00:25:12,279 --> 00:25:17,440
are almost always<font color="#E5E5E5"> the loci of bugs</font>

661
00:25:15,059 --> 00:25:18,820
all of the<font color="#E5E5E5"> examples that I was</font><font color="#CCCCCC"> talking</font>

662
00:25:17,440 --> 00:25:22,629
about<font color="#CCCCCC"> before and make more that are</font>

663
00:25:18,820 --> 00:25:25,269
cited<font color="#CCCCCC"> in</font><font color="#E5E5E5"> our other papers are directly</font>

664
00:25:22,629 --> 00:25:27,070
traceable to the<font color="#E5E5E5"> inclusion of complexity</font>

665
00:25:25,269 --> 00:25:28,779
<font color="#E5E5E5">such as this this is truly the</font>

666
00:25:27,070 --> 00:25:32,590
embodiment of complexity is the enemy

667
00:25:28,779 --> 00:25:34,269
<font color="#CCCCCC">dirty so we find that the language</font>

668
00:25:32,590 --> 00:25:35,738
theoretic advice to keep protocols

669
00:25:34,269 --> 00:25:37,659
within deterministic context-free is

670
00:25:35,739 --> 00:25:38,980
<font color="#CCCCCC">feasible</font><font color="#E5E5E5"> to implement it's actually not</font>

671
00:25:37,659 --> 00:25:40,239
<font color="#E5E5E5">too far from the way that</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> do things</font>

672
00:25:38,980 --> 00:25:42,820
now<font color="#E5E5E5"> there are only</font><font color="#CCCCCC"> very few things</font><font color="#E5E5E5"> that</font>

673
00:25:40,239 --> 00:25:45,899
depart from this and if you avoid things

674
00:25:42,820 --> 00:25:48,158
<font color="#E5E5E5">like this it won't be a</font><font color="#CCCCCC"> problem for you</font>

675
00:25:45,899 --> 00:25:50,799
<font color="#E5E5E5">so I'd encourage</font><font color="#CCCCCC"> you to</font><font color="#E5E5E5"> look at what</font>

676
00:25:48,159 --> 00:25:52,330
this work<font color="#E5E5E5"> is a further explanation of</font>

677
00:25:50,799 --> 00:25:54,639
which is<font color="#E5E5E5"> the paper that</font><font color="#CCCCCC"> we published</font>

678
00:25:52,330 --> 00:25:56,830
earlier this<font color="#CCCCCC"> November at I Triple E</font><font color="#E5E5E5"> SEC</font>

679
00:25:54,639 --> 00:25:58,809
<font color="#CCCCCC">debt as I get everyone at a security</font>

680
00:25:56,830 --> 00:26:05,499
<font color="#CCCCCC">conference</font><font color="#E5E5E5"> to scan my QR code I promise</font>

681
00:25:58,809 --> 00:26:06,999
it's not XSS and<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> very</font>

682
00:26:05,499 --> 00:26:09,220
<font color="#E5E5E5">much for giving me the the time and</font>

683
00:26:06,999 --> 00:26:13,539
opportunity<font color="#CCCCCC"> to do this I'd be</font><font color="#E5E5E5"> delighted</font>

684
00:26:09,220 --> 00:26:15,909
to<font color="#E5E5E5"> take questions both now and</font><font color="#CCCCCC"> I at as</font>

685
00:26:13,539 --> 00:26:17,379
<font color="#CCCCCC">little does anyone</font><font color="#E5E5E5"> know there's a</font>

686
00:26:15,909 --> 00:26:18,789
language theoretically curity conference

687
00:26:17,379 --> 00:26:20,619
embedded in I<font color="#E5E5E5"> Triple E Oakland</font><font color="#CCCCCC"> as a</font>

688
00:26:18,789 --> 00:26:22,419
<font color="#E5E5E5">workshop and we'd love to see</font><font color="#CCCCCC"> you there</font>

689
00:26:20,619 --> 00:26:24,759
<font color="#CCCCCC">- CFP actually just opened</font><font color="#E5E5E5"> a couple of</font>

690
00:26:22,419 --> 00:26:27,659
days ago<font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> much I'll open</font>

691
00:26:24,759 --> 00:26:27,659
for<font color="#CCCCCC"> questions</font><font color="#E5E5E5"> if I time</font>

692
00:26:28,900 --> 00:26:45,670
no questions<font color="#E5E5E5"> okay you can assessment</font><font color="#CCCCCC"> how</font>

693
00:26:43,270 --> 00:26:49,270
<font color="#CCCCCC">much work</font><font color="#E5E5E5"> that would take versus what</font>

694
00:26:45,670 --> 00:26:52,300
<font color="#CCCCCC">that</font><font color="#E5E5E5"> basically</font><font color="#CCCCCC"> doing a paper</font><font color="#E5E5E5"> attacking</font>

695
00:26:49,270 --> 00:26:55,570
comprehension analysis<font color="#CCCCCC"> formation</font><font color="#E5E5E5"> okay so</font>

696
00:26:52,300 --> 00:26:57,159
question<font color="#E5E5E5"> essentially did I just propose</font>

697
00:26:55,570 --> 00:26:59,679
that<font color="#E5E5E5"> we read you the whole internet</font><font color="#CCCCCC"> and</font>

698
00:26:57,160 --> 00:27:03,730
can<font color="#E5E5E5"> we do a cost-benefit analysis on</font>

699
00:26:59,680 --> 00:27:05,680
that<font color="#CCCCCC"> um well so we we don't</font><font color="#E5E5E5"> have to do</font>

700
00:27:03,730 --> 00:27:08,770
<font color="#E5E5E5">it all at once first but we</font><font color="#CCCCCC"> actually</font>

701
00:27:05,680 --> 00:27:10,930
we've already<font color="#E5E5E5"> started</font><font color="#CCCCCC"> um so the</font>

702
00:27:08,770 --> 00:27:13,150
<font color="#CCCCCC">cost-benefit analysis is largely being</font>

703
00:27:10,930 --> 00:27:15,310
done for<font color="#E5E5E5"> us now we're seeing a lot of</font>

704
00:27:13,150 --> 00:27:17,080
<font color="#E5E5E5">enterprises</font><font color="#CCCCCC"> doing things like disabling</font>

705
00:27:15,310 --> 00:27:18,429
<font color="#E5E5E5">active content</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> web pages by</font>

706
00:27:17,080 --> 00:27:21,060
prohibiting<font color="#E5E5E5"> the installation of flash</font>

707
00:27:18,430 --> 00:27:23,680
disabling flash plugins within browsers

708
00:27:21,060 --> 00:27:25,990
we<font color="#E5E5E5"> we see a lot of macro disablement</font>

709
00:27:23,680 --> 00:27:27,730
policies and<font color="#E5E5E5"> office documents we see as</font>

710
00:27:25,990 --> 00:27:29,530
well that<font color="#CCCCCC"> the cost-benefit analysis is</font>

711
00:27:27,730 --> 00:27:31,390
rapidly<font color="#E5E5E5"> being done for us by those that</font>

712
00:27:29,530 --> 00:27:34,060
side against ransomware<font color="#E5E5E5"> because that is</font>

713
00:27:31,390 --> 00:27:37,920
almost completely dependent<font color="#E5E5E5"> upon turing</font>

714
00:27:34,060 --> 00:27:39,600
completeness in document format um so

715
00:27:37,920 --> 00:27:43,210
unfortunately<font color="#E5E5E5"> I don't have a</font>

716
00:27:39,600 --> 00:27:45,820
<font color="#E5E5E5">cost-benefit analysis right here but I</font>

717
00:27:43,210 --> 00:27:47,860
<font color="#E5E5E5">hope</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the anecdotal evidence of</font>

718
00:27:45,820 --> 00:27:49,389
<font color="#E5E5E5">every time we see</font><font color="#CCCCCC"> one of</font><font color="#E5E5E5"> these bugs and</font>

719
00:27:47,860 --> 00:27:53,050
they all do seem<font color="#CCCCCC"> to fall within this</font>

720
00:27:49,390 --> 00:27:55,210
problem we immediately begin mitigating

721
00:27:53,050 --> 00:27:56,710
<font color="#E5E5E5">it by disabling large</font><font color="#CCCCCC"> swaths of features</font>

722
00:27:55,210 --> 00:27:59,140
<font color="#E5E5E5">from the internet that we put so much</font>

723
00:27:56,710 --> 00:28:00,790
<font color="#E5E5E5">work into</font><font color="#CCCCCC"> developing</font><font color="#E5E5E5"> I would say that it</font>

724
00:27:59,140 --> 00:28:04,320
<font color="#E5E5E5">will probably be extremely favorable</font>

725
00:28:00,790 --> 00:28:04,320
when sometimes<font color="#E5E5E5"> someone gets around to</font><font color="#CCCCCC"> it</font>

726
00:28:06,390 --> 00:28:10,290
alright<font color="#E5E5E5"> anyone</font><font color="#CCCCCC"> else</font>

727
00:28:12,769 --> 00:28:18,950
<font color="#CCCCCC">okay I'll be around all weekend</font>

728
00:28:15,750 --> 00:28:18,950
[Applause]

