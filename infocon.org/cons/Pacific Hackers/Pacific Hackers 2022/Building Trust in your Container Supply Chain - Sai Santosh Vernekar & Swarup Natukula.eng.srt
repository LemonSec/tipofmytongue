1
00:00:08,000 --> 00:00:11,160
all right this is a uh the very relevant

2
00:00:11,160 --> 00:00:14,880
talk or a supply chain we're being uh

3
00:00:14,880 --> 00:00:17,220
quite a bit of a pretty penny because of

4
00:00:17,220 --> 00:00:20,160
supply chain issues and this is a very

5
00:00:20,160 --> 00:00:22,619
important subject so today we're going

6
00:00:22,619 --> 00:00:25,580
to have it throughout

7
00:00:25,820 --> 00:00:29,160
to speak about building trust in your

8
00:00:29,160 --> 00:00:30,900
containers supply chain

9
00:00:30,900 --> 00:00:33,920
so here we go

10
00:00:34,260 --> 00:00:37,040
bye guys

11
00:00:49,920 --> 00:00:55,500
hello everyone hello yeah so uh so my

12
00:00:55,500 --> 00:00:58,379
name is Sai and uh along with swarup my

13
00:00:58,379 --> 00:01:01,320
friend here so we'll be talking on a

14
00:01:01,320 --> 00:01:03,180
subject called as building trust in your

15
00:01:03,180 --> 00:01:06,840
container supply chain so so I think

16
00:01:06,840 --> 00:01:08,700
most of you here must have heard about

17
00:01:08,700 --> 00:01:11,460
supply chain attacks right and for most

18
00:01:11,460 --> 00:01:13,560
of us might that might be on top of mind

19
00:01:13,560 --> 00:01:15,659
as well because especially with the

20
00:01:15,659 --> 00:01:17,159
recent hacks that have been happening

21
00:01:17,159 --> 00:01:19,140
around supply chain attacks so this is

22
00:01:19,140 --> 00:01:21,299
pretty much everywhere in the news but

23
00:01:21,299 --> 00:01:22,500
supply chain

24
00:01:22,500 --> 00:01:25,140
is different for every different uh

25
00:01:25,140 --> 00:01:27,119
context right so today we want to

26
00:01:27,119 --> 00:01:29,400
specifically talk around container

27
00:01:29,400 --> 00:01:31,799
ecosystem and how supply chain elements

28
00:01:31,799 --> 00:01:35,939
affect the container ecosystem and can

29
00:01:35,939 --> 00:01:39,659
be compromised so we'll start by looking

30
00:01:39,659 --> 00:01:41,939
and talking about some of the challenges

31
00:01:41,939 --> 00:01:44,900
that container supply chain

32
00:01:44,900 --> 00:01:47,939
basis right and this is very important

33
00:01:47,939 --> 00:01:49,860
because when you put together a

34
00:01:49,860 --> 00:01:51,299
container together right so there are a

35
00:01:51,299 --> 00:01:54,180
lot of elements that go together uh with

36
00:01:54,180 --> 00:01:56,399
the third party dependencies libraries

37
00:01:56,399 --> 00:01:59,100
Etc right and then we'll try to see how

38
00:01:59,100 --> 00:02:01,020
we can establish

39
00:02:01,020 --> 00:02:04,079
a certain level of trust using some of

40
00:02:04,079 --> 00:02:06,920
the tools and

41
00:02:06,920 --> 00:02:10,020
formats that we have like s-bomb and

42
00:02:10,020 --> 00:02:11,700
established trust because it is

43
00:02:11,700 --> 00:02:12,959
important right so when you're running

44
00:02:12,959 --> 00:02:14,819
the container in your ecosystem it's

45
00:02:14,819 --> 00:02:16,500
very important that you are aware of

46
00:02:16,500 --> 00:02:19,200
what you're running and with that we'll

47
00:02:19,200 --> 00:02:20,640
talk about something called a software

48
00:02:20,640 --> 00:02:23,280
developed materials uh which has got a

49
00:02:23,280 --> 00:02:25,980
lot of action recently and from that

50
00:02:25,980 --> 00:02:29,099
point on we will talk about container

51
00:02:29,099 --> 00:02:32,220
signing and verifying so this is a very

52
00:02:32,220 --> 00:02:34,160
important part of the talk today because

53
00:02:34,160 --> 00:02:37,620
uh this will help you understand how to

54
00:02:37,620 --> 00:02:39,800
establish a

55
00:02:39,800 --> 00:02:43,920
uh uh Trust on authenticity point of

56
00:02:43,920 --> 00:02:44,879
view

57
00:02:44,879 --> 00:02:47,700
so let's get started and we'll initially

58
00:02:47,700 --> 00:02:51,120
look at the container ecosystem wherein

59
00:02:51,120 --> 00:02:53,819
um ideally uh container life cycle which

60
00:02:53,819 --> 00:02:56,340
involves building a container image and

61
00:02:56,340 --> 00:02:58,800
then deploying it somewhere maybe a

62
00:02:58,800 --> 00:03:01,200
container orchestration tool right so

63
00:03:01,200 --> 00:03:03,900
with that typically it would involve a

64
00:03:03,900 --> 00:03:07,319
Dev setups devops life cycle wherein you

65
00:03:07,319 --> 00:03:09,300
start building and pushing code into

66
00:03:09,300 --> 00:03:10,560
your Repository

67
00:03:10,560 --> 00:03:13,319
let's say a user or developer who just

68
00:03:13,319 --> 00:03:15,420
go to a repository it might be Jenkins

69
00:03:15,420 --> 00:03:19,019
gitlab any CI platform and as soon as

70
00:03:19,019 --> 00:03:21,000
you push it it will start building the

71
00:03:21,000 --> 00:03:23,459
image but with all the artifacts or the

72
00:03:23,459 --> 00:03:26,879
dependencies libraries and next point

73
00:03:26,879 --> 00:03:28,920
would be the container image that is

74
00:03:28,920 --> 00:03:31,680
built out right and from that point on

75
00:03:31,680 --> 00:03:33,480
it will be pushed to a registering which

76
00:03:33,480 --> 00:03:36,180
can be Azure any private registry or

77
00:03:36,180 --> 00:03:38,400
public registry and from that point on

78
00:03:38,400 --> 00:03:40,980
order to deployed as a basic unit for

79
00:03:40,980 --> 00:03:42,959
any container orchestration tool like

80
00:03:42,959 --> 00:03:45,900
kubernetes or Docker swarm or any other

81
00:03:45,900 --> 00:03:49,200
commercial uh platforms as well right so

82
00:03:49,200 --> 00:03:52,799
from the start of building a container

83
00:03:52,799 --> 00:03:54,780
image to deploying there are multiple

84
00:03:54,780 --> 00:03:57,420
supply chain elements right so there are

85
00:03:57,420 --> 00:04:00,599
multiple entry points for third party

86
00:04:00,599 --> 00:04:01,140
um

87
00:04:01,140 --> 00:04:04,799
code that can enter and with that we'll

88
00:04:04,799 --> 00:04:06,659
take a closer look at how image is built

89
00:04:06,659 --> 00:04:08,819
and some of the issues that we can see

90
00:04:08,819 --> 00:04:12,299
there so so a typical container is built

91
00:04:12,299 --> 00:04:13,560
on top of

92
00:04:13,560 --> 00:04:16,798
a base image right and as you can see on

93
00:04:16,798 --> 00:04:17,699
the screen there are a bunch of

94
00:04:17,699 --> 00:04:20,459
instructions laid out so each of these

95
00:04:20,459 --> 00:04:22,919
instructions are nothing but a layer so

96
00:04:22,919 --> 00:04:25,740
if you uh if you decompose a Docker

97
00:04:25,740 --> 00:04:27,360
right they are nothing but layers so

98
00:04:27,360 --> 00:04:29,520
each of these instructions are not there

99
00:04:29,520 --> 00:04:31,560
so the first statement for instance from

100
00:04:31,560 --> 00:04:34,020
Ubuntu latest is the base image that

101
00:04:34,020 --> 00:04:35,160
will be pulled out from a public

102
00:04:35,160 --> 00:04:38,160
repository and it would come with its

103
00:04:38,160 --> 00:04:40,620
own binaries and all baggage depending

104
00:04:40,620 --> 00:04:42,540
on what kind of Base image you're going

105
00:04:42,540 --> 00:04:44,759
to use right from that point on you can

106
00:04:44,759 --> 00:04:47,880
run apt update make dir then you copy

107
00:04:47,880 --> 00:04:50,220
your Source from your current date to

108
00:04:50,220 --> 00:04:52,620
application and then install any other

109
00:04:52,620 --> 00:04:54,419
third-party requirements like

110
00:04:54,419 --> 00:04:56,160
dependencies libraries to build your

111
00:04:56,160 --> 00:05:00,300
custom app right so so as you see these

112
00:05:00,300 --> 00:05:02,940
are all intermediate layers and B each

113
00:05:02,940 --> 00:05:04,979
of these layers comes the supply chain

114
00:05:04,979 --> 00:05:05,880
element

115
00:05:05,880 --> 00:05:08,759
now for example uh the base image right

116
00:05:08,759 --> 00:05:10,800
so we'll take an example and a quick

117
00:05:10,800 --> 00:05:11,940
demo

118
00:05:11,940 --> 00:05:15,960
of how a base image a vulnerable base

119
00:05:15,960 --> 00:05:18,000
image which you are going to use to

120
00:05:18,000 --> 00:05:19,919
build your application can be

121
00:05:19,919 --> 00:05:21,960
compromised because the vulnerability

122
00:05:21,960 --> 00:05:24,960
was lying in the base image so as an

123
00:05:24,960 --> 00:05:27,900
example right so we are going to take a

124
00:05:27,900 --> 00:05:30,000
look at something called as imagine

125
00:05:30,000 --> 00:05:33,900
imagine so image magic is a very popular

126
00:05:33,900 --> 00:05:36,120
image processing Library so image

127
00:05:36,120 --> 00:05:38,280
processing can be resizing an image or

128
00:05:38,280 --> 00:05:40,740
changing it to different formats so back

129
00:05:40,740 --> 00:05:43,620
in like 2016 probably this was like uh

130
00:05:43,620 --> 00:05:45,120
this was shipped with most of the

131
00:05:45,120 --> 00:05:47,340
distribution like dbn right so today

132
00:05:47,340 --> 00:05:49,259
what we're going to use is we are going

133
00:05:49,259 --> 00:05:53,460
to take the base image uh and on top of

134
00:05:53,460 --> 00:05:55,800
that we have built our image app

135
00:05:55,800 --> 00:05:58,800
application the the app is nothing going

136
00:05:58,800 --> 00:06:00,720
doing nothing fancy it's just going to

137
00:06:00,720 --> 00:06:03,300
take the image a PNG file and it's going

138
00:06:03,300 --> 00:06:06,720
to resize it right this is the simple uh

139
00:06:06,720 --> 00:06:08,460
use case for that particular library

140
00:06:08,460 --> 00:06:10,800
that is part of the base image which we

141
00:06:10,800 --> 00:06:13,259
have used to build our application and

142
00:06:13,259 --> 00:06:15,419
now now that we have used the vulnerable

143
00:06:15,419 --> 00:06:17,400
version of the base image right

144
00:06:17,400 --> 00:06:19,259
so it's called as image charging so

145
00:06:19,259 --> 00:06:21,360
that's how it it was popular

146
00:06:21,360 --> 00:06:25,080
and uh so now that we deployed this the

147
00:06:25,080 --> 00:06:27,660
app is out there and any bad actor who

148
00:06:27,660 --> 00:06:29,639
gets that who gets hold of this and can

149
00:06:29,639 --> 00:06:31,080
test it or anything you know exploit it

150
00:06:31,080 --> 00:06:32,639
so there's a particular instead of

151
00:06:32,639 --> 00:06:34,860
uploading a PNG image what he could do

152
00:06:34,860 --> 00:06:37,139
is craft a malicious payload which would

153
00:06:37,139 --> 00:06:38,520
look something like this rather than

154
00:06:38,520 --> 00:06:41,580
image right so the the vulnerability was

155
00:06:41,580 --> 00:06:43,020
that there was always someone injection

156
00:06:43,020 --> 00:06:45,840
when you when you kind of provide a URL

157
00:06:45,840 --> 00:06:48,840
and then you know instead of do some

158
00:06:48,840 --> 00:06:50,280
nasty things behind the scene so what

159
00:06:50,280 --> 00:06:53,580
we'll be doing here is we'll run a

160
00:06:53,580 --> 00:06:57,180
reversion in which when processed by the

161
00:06:57,180 --> 00:06:59,340
vulnerable Library which was part of the

162
00:06:59,340 --> 00:07:01,860
base image right will connect back to

163
00:07:01,860 --> 00:07:03,479
the attacker giving access to the

164
00:07:03,479 --> 00:07:06,600
container which is running there okay so

165
00:07:06,600 --> 00:07:09,300
enough of talk and let's jump on to the

166
00:07:09,300 --> 00:07:13,020
demo so the container image that we have

167
00:07:13,020 --> 00:07:16,139
built is this one image tragic okay and

168
00:07:16,139 --> 00:07:18,600
we are already uh built that with the

169
00:07:18,600 --> 00:07:20,759
vulnerable base image which includes the

170
00:07:20,759 --> 00:07:23,940
vulnerable image imagine libraries don't

171
00:07:23,940 --> 00:07:26,280
you know run this

172
00:07:26,280 --> 00:07:28,259
okay the container is up and running so

173
00:07:28,259 --> 00:07:32,120
this is what the app should look like

174
00:07:34,860 --> 00:07:36,720
so this is a this is just an example

175
00:07:36,720 --> 00:07:38,520
which is going to take a

176
00:07:38,520 --> 00:07:42,419
image okay and research

177
00:07:42,419 --> 00:07:45,960
I'm just going to select this rc1.png so

178
00:07:45,960 --> 00:07:47,880
this is nothing but

179
00:07:47,880 --> 00:07:50,039
the piece of code that we just showed

180
00:07:50,039 --> 00:07:52,580
here right

181
00:07:52,620 --> 00:07:54,660
yeah if you look here right this is what

182
00:07:54,660 --> 00:07:57,300
it is doing so instead of doing the

183
00:07:57,300 --> 00:08:01,020
being a natural PNG pipe behind this is

184
00:08:01,020 --> 00:08:03,180
it's going to connect as soon as this

185
00:08:03,180 --> 00:08:05,160
has been processed it's going to make a

186
00:08:05,160 --> 00:08:07,919
reverse connection to the attacker so so

187
00:08:07,919 --> 00:08:09,599
for today's demo I'll be the good actor

188
00:08:09,599 --> 00:08:11,460
as well as a bad actor so I'm going to

189
00:08:11,460 --> 00:08:15,660
just run a listener okay so listener is

190
00:08:15,660 --> 00:08:18,360
where as soon as the image is processed

191
00:08:18,360 --> 00:08:22,800
it will connect back to me so let's run

192
00:08:22,800 --> 00:08:24,259
a listener

193
00:08:24,259 --> 00:08:27,599
and oh we can all possibly read that oh

194
00:08:27,599 --> 00:08:30,020
okay sorry

195
00:08:36,440 --> 00:08:39,740
is it better

196
00:08:53,120 --> 00:08:55,860
okay thank you

197
00:08:55,860 --> 00:08:57,240
thanks

198
00:08:57,240 --> 00:09:01,680
is it better yeah okay so so now we are

199
00:09:01,680 --> 00:09:03,060
just listening to that particular

200
00:09:03,060 --> 00:09:03,540
[Music]

201
00:09:03,540 --> 00:09:05,540
um

202
00:09:13,800 --> 00:09:15,959
so it's listening so let me just go back

203
00:09:15,959 --> 00:09:19,518
and click on resize

204
00:09:20,700 --> 00:09:22,740
and

205
00:09:22,740 --> 00:09:26,160
and it did connect back to the listener

206
00:09:26,160 --> 00:09:27,420
that I was talking now if you see here

207
00:09:27,420 --> 00:09:29,279
right so all these files are from the

208
00:09:29,279 --> 00:09:31,680
container image that was running there

209
00:09:31,680 --> 00:09:35,700
Okay and like yeah this is

210
00:09:35,700 --> 00:09:37,380
so we get root access if the container

211
00:09:37,380 --> 00:09:39,600
is running as a root so basically it's a

212
00:09:39,600 --> 00:09:42,360
simple flaw that was in the basement but

213
00:09:42,360 --> 00:09:44,700
we built our image on top of it and due

214
00:09:44,700 --> 00:09:48,540
to this that image uh Magic issue which

215
00:09:48,540 --> 00:09:50,580
was in the base image was inherited by

216
00:09:50,580 --> 00:09:53,880
our app so with this right so we'll move

217
00:09:53,880 --> 00:09:55,860
on and uh

218
00:09:55,860 --> 00:09:58,620
move forward to understand what are some

219
00:09:58,620 --> 00:10:00,360
of the things that we can do to

220
00:10:00,360 --> 00:10:03,000
establish some amount of trust right so

221
00:10:03,000 --> 00:10:04,140
there are multiple things that one can

222
00:10:04,140 --> 00:10:06,300
do so today we are going to look at so

223
00:10:06,300 --> 00:10:08,399
let's look back at the ecosystem that we

224
00:10:08,399 --> 00:10:09,779
are talking about developer which is

225
00:10:09,779 --> 00:10:11,580
code builds the image pushes the

226
00:10:11,580 --> 00:10:13,680
registry and from that point deploys

227
00:10:13,680 --> 00:10:16,740
right so here what can we do because

228
00:10:16,740 --> 00:10:18,120
this is the artifact that we have

229
00:10:18,120 --> 00:10:21,420
generated container so right now there

230
00:10:21,420 --> 00:10:23,279
is zero guarantee so if we know what

231
00:10:23,279 --> 00:10:25,560
goes into making of this image like what

232
00:10:25,560 --> 00:10:27,600
are the dependencies right so we can at

233
00:10:27,600 --> 00:10:30,000
least take a look and decide okay these

234
00:10:30,000 --> 00:10:31,560
are the libraries let me see some form

235
00:10:31,560 --> 00:10:33,120
of security security Assurance

236
00:10:33,120 --> 00:10:35,220
activities right so how can we do this

237
00:10:35,220 --> 00:10:36,600
by leveraging something called a

238
00:10:36,600 --> 00:10:38,640
software bill of materials so you

239
00:10:38,640 --> 00:10:40,860
generate softer bill of materials for

240
00:10:40,860 --> 00:10:42,480
this particular container image will

241
00:10:42,480 --> 00:10:45,060
tell you and give visibility or transfer

242
00:10:45,060 --> 00:10:47,399
to the dependencies libraries that you

243
00:10:47,399 --> 00:10:49,920
are using and with this right you will

244
00:10:49,920 --> 00:10:52,079
be able to do some form of security

245
00:10:52,079 --> 00:10:54,420
Assurance activities by generating the s

246
00:10:54,420 --> 00:10:56,279
bomb and giving it to a security scanner

247
00:10:56,279 --> 00:10:58,740
and say that hey uh can you tell me if

248
00:10:58,740 --> 00:11:00,720
there's any vulnerability here so now we

249
00:11:00,720 --> 00:11:03,240
have established certain amount of uh

250
00:11:03,240 --> 00:11:06,060
trust but you can put one step ahead now

251
00:11:06,060 --> 00:11:08,519
right by signing in verifying your

252
00:11:08,519 --> 00:11:10,820
container Dimensions because this will

253
00:11:10,820 --> 00:11:14,399
give you a trust on a authenticity

254
00:11:14,399 --> 00:11:17,040
standpoint not just the security

255
00:11:17,040 --> 00:11:19,200
Assurance activity but with tamper

256
00:11:19,200 --> 00:11:21,060
resistant like it will it will make sure

257
00:11:21,060 --> 00:11:23,100
that it is tamper resistant so we are

258
00:11:23,100 --> 00:11:24,600
going to take a deeper dive into the s

259
00:11:24,600 --> 00:11:26,700
bomb and container signing let's move on

260
00:11:26,700 --> 00:11:28,740
to understand what is soft bill of

261
00:11:28,740 --> 00:11:31,800
material right so software bill of

262
00:11:31,800 --> 00:11:33,779
material has been out there for a while

263
00:11:33,779 --> 00:11:35,160
but you have been getting traction

264
00:11:35,160 --> 00:11:36,959
because the recent uh government

265
00:11:36,959 --> 00:11:39,660
executive uh which is which is an

266
00:11:39,660 --> 00:11:42,779
enforcement to provide is form for for

267
00:11:42,779 --> 00:11:44,940
any software artifacts because if

268
00:11:44,940 --> 00:11:46,140
anybody wants to work with the

269
00:11:46,140 --> 00:11:47,579
government right and it's a good thing

270
00:11:47,579 --> 00:11:49,740
uh in today's world where supply chain

271
00:11:49,740 --> 00:11:51,480
attacks are a common thing right and

272
00:11:51,480 --> 00:11:52,980
going for probably this will become the

273
00:11:52,980 --> 00:11:54,959
non for all other organizations as well

274
00:11:54,959 --> 00:11:56,519
now

275
00:11:56,519 --> 00:11:59,160
now but what is exactly has bought right

276
00:11:59,160 --> 00:12:01,079
so let's say I'm sure everybody has

277
00:12:01,079 --> 00:12:02,579
walked into a grocery store today right

278
00:12:02,579 --> 00:12:05,700
and what is the one common thing that

279
00:12:05,700 --> 00:12:07,320
when you pick a product right what's one

280
00:12:07,320 --> 00:12:08,700
common thing you see there

281
00:12:08,700 --> 00:12:12,060
any guesses yeah

282
00:12:12,060 --> 00:12:14,180
apart from that anything else

283
00:12:14,180 --> 00:12:17,279
right that's right ingredients so this

284
00:12:17,279 --> 00:12:18,899
is the nutrition label that you will

285
00:12:18,899 --> 00:12:20,640
find across all the products out there

286
00:12:20,640 --> 00:12:23,579
right what is going to say is that what

287
00:12:23,579 --> 00:12:26,640
the calories cholesterol fat these are

288
00:12:26,640 --> 00:12:28,920
the facts of the ingredients that are

289
00:12:28,920 --> 00:12:31,019
going into your

290
00:12:31,019 --> 00:12:33,899
uh problem right as bomb is exactly

291
00:12:33,899 --> 00:12:35,640
something similar but in this Chocolate

292
00:12:35,640 --> 00:12:38,160
World right so s-bomb is a nested

293
00:12:38,160 --> 00:12:40,800
inventory of list of ingredients that

294
00:12:40,800 --> 00:12:43,800
make up your Stocker component and uh

295
00:12:43,800 --> 00:12:46,620
like the nutrition label S1 is a format

296
00:12:46,620 --> 00:12:48,420
it's a standard way to communicate

297
00:12:48,420 --> 00:12:50,040
across different organization with

298
00:12:50,040 --> 00:12:51,600
respect to your products or software

299
00:12:51,600 --> 00:12:54,540
components that you're building and as

300
00:12:54,540 --> 00:12:56,639
and one vital thing here is s-bomb

301
00:12:56,639 --> 00:12:59,639
itself is not a security active pack you

302
00:12:59,639 --> 00:13:01,440
can't do anything with that but you are

303
00:13:01,440 --> 00:13:03,899
going to send it out to other tools and

304
00:13:03,899 --> 00:13:06,540
downstream uh systems which will help

305
00:13:06,540 --> 00:13:09,300
you uh you know to and which will help

306
00:13:09,300 --> 00:13:10,680
you to understand like for example if

307
00:13:10,680 --> 00:13:12,660
you have the s-bomb you can ask hey can

308
00:13:12,660 --> 00:13:14,040
you please tell me

309
00:13:14,040 --> 00:13:16,560
by using this particular Library am I

310
00:13:16,560 --> 00:13:19,320
violating any kind of compliance right

311
00:13:19,320 --> 00:13:21,480
violating any license am I vomiting in

312
00:13:21,480 --> 00:13:23,940
license or you can give it to a 150

313
00:13:23,940 --> 00:13:25,500
scanner and say can you please find out

314
00:13:25,500 --> 00:13:27,120
I'm using all these libraries as part of

315
00:13:27,120 --> 00:13:29,459
this artifact and can you tell me if

316
00:13:29,459 --> 00:13:31,139
there are anything vulnerabilities as

317
00:13:31,139 --> 00:13:33,060
part of this right this is this is just

318
00:13:33,060 --> 00:13:35,579
an artifact in itself but it's going to

319
00:13:35,579 --> 00:13:36,779
help us

320
00:13:36,779 --> 00:13:39,000
do some of the Assurance activities that

321
00:13:39,000 --> 00:13:40,760
you would like to do

322
00:13:40,760 --> 00:13:43,500
now uh yeah so like you see here right

323
00:13:43,500 --> 00:13:45,240
it's just the nested libraries and you

324
00:13:45,240 --> 00:13:48,060
generate as Bond so so like we'll be

325
00:13:48,060 --> 00:13:50,579
talking about the facts right s bomb has

326
00:13:50,579 --> 00:13:52,920
a bare minimum element like the national

327
00:13:52,920 --> 00:13:54,360
telecommunition and Information

328
00:13:54,360 --> 00:13:55,980
Administration they are put together

329
00:13:55,980 --> 00:13:58,860
formats for generating s-bomb and these

330
00:13:58,860 --> 00:14:00,600
things that you've seen on screen right

331
00:14:00,600 --> 00:14:02,639
authors names the plan name component

332
00:14:02,639 --> 00:14:04,680
name button strain hash unique

333
00:14:04,680 --> 00:14:06,540
identifier and relationship between all

334
00:14:06,540 --> 00:14:08,639
other dependencies right so these are

335
00:14:08,639 --> 00:14:11,339
some of the base minimum elements that

336
00:14:11,339 --> 00:14:13,320
need to be part of your response

337
00:14:13,320 --> 00:14:15,600
now let's to take a look at some of

338
00:14:15,600 --> 00:14:18,000
these formats that we have right so the

339
00:14:18,000 --> 00:14:20,639
first format that is available is spdx

340
00:14:20,639 --> 00:14:22,860
software package and data exchange this

341
00:14:22,860 --> 00:14:24,360
is from Linux Foundation this has been

342
00:14:24,360 --> 00:14:27,660
there from almost 2010 and the next one

343
00:14:27,660 --> 00:14:30,060
is sweet that is software identification

344
00:14:30,060 --> 00:14:33,320
tagging and one of the important thing

345
00:14:33,320 --> 00:14:35,940
for us for us from a security standpoint

346
00:14:35,940 --> 00:14:38,240
is Cyclone DX because the difference is

347
00:14:38,240 --> 00:14:42,720
spdx is focused more on compliance of a

348
00:14:42,720 --> 00:14:44,880
license their roadmap and process is

349
00:14:44,880 --> 00:14:46,560
more towards that software

350
00:14:46,560 --> 00:14:48,360
identification tagging is more towards

351
00:14:48,360 --> 00:14:50,399
ID Asset Management like if you install

352
00:14:50,399 --> 00:14:52,500
a software it will tag it when you

353
00:14:52,500 --> 00:14:54,839
uninstall it will untag it but Cyclone

354
00:14:54,839 --> 00:14:56,160
DX is something that you'll be more

355
00:14:56,160 --> 00:14:58,440
interested in right so it is mostly for

356
00:14:58,440 --> 00:15:00,600
uh generating stock to develop materials

357
00:15:00,600 --> 00:15:03,420
right for uh the application security

358
00:15:03,420 --> 00:15:05,579
context and supply chain component

359
00:15:05,579 --> 00:15:06,899
analysis

360
00:15:06,899 --> 00:15:10,500
so these are a bomb related formats so

361
00:15:10,500 --> 00:15:12,360
let's quickly look

362
00:15:12,360 --> 00:15:14,519
at the tools that will help you to

363
00:15:14,519 --> 00:15:16,260
generate this as bomb and we are also

364
00:15:16,260 --> 00:15:17,459
going to have a quick demo on this one

365
00:15:17,459 --> 00:15:20,339
as well so the one of the tools it's

366
00:15:20,339 --> 00:15:21,839
very powerful too which will help you

367
00:15:21,839 --> 00:15:24,680
generate container as bonds right so

368
00:15:24,680 --> 00:15:27,420
Swift is one of the two CLI tool which

369
00:15:27,420 --> 00:15:29,279
is written in go uh which will help you

370
00:15:29,279 --> 00:15:31,199
generate container s Bond you can

371
00:15:31,199 --> 00:15:32,940
integrate that as part of your pipeline

372
00:15:32,940 --> 00:15:35,820
as well and it supports oci Docker and

373
00:15:35,820 --> 00:15:40,380
different formats and when you

374
00:15:40,380 --> 00:15:42,779
it provides a good framework when you

375
00:15:42,779 --> 00:15:45,240
send this as bomb to a container

376
00:15:45,240 --> 00:15:47,579
scanning tool like grind we are also

377
00:15:47,579 --> 00:15:48,899
going to see that so you have a

378
00:15:48,899 --> 00:15:50,339
containable like we saw a vulnerable

379
00:15:50,339 --> 00:15:51,839
container image that we ran right we are

380
00:15:51,839 --> 00:15:53,160
going to use that image and will

381
00:15:53,160 --> 00:15:55,260
generate as bomb for that

382
00:15:55,260 --> 00:15:56,579
so as bomb is going to look something

383
00:15:56,579 --> 00:15:58,860
like this and we are going to use the

384
00:15:58,860 --> 00:16:00,839
tool gripe which is a vulnerability

385
00:16:00,839 --> 00:16:04,380
scanner tool you can run the gripe tool

386
00:16:04,380 --> 00:16:06,660
on a container image itself or you don't

387
00:16:06,660 --> 00:16:08,519
even need an image but only the s-bomb

388
00:16:08,519 --> 00:16:10,320
for time so if you have this bomb it's

389
00:16:10,320 --> 00:16:11,220
going to tell you what are the

390
00:16:11,220 --> 00:16:12,959
vulnerabilities listed out there so

391
00:16:12,959 --> 00:16:17,880
let's quickly jump and take an example

392
00:16:17,880 --> 00:16:20,000
okay

393
00:16:24,720 --> 00:16:27,540
yeah so if you see right so this is we

394
00:16:27,540 --> 00:16:29,639
have already installed the step two so

395
00:16:29,639 --> 00:16:33,360
this is the image magic or tragic okay

396
00:16:33,360 --> 00:16:35,899
thanks

397
00:16:36,660 --> 00:16:39,740
so this is the uh image magic uh

398
00:16:39,740 --> 00:16:43,079
container that we have used and we are

399
00:16:43,079 --> 00:16:44,759
going to generate the s-bomb for this

400
00:16:44,759 --> 00:16:47,459
okay and we'll save it in a Json format

401
00:16:47,459 --> 00:16:50,779
like we'll just go save it

402
00:16:55,339 --> 00:16:59,519
it's loading image

403
00:16:59,519 --> 00:17:01,320
um so it'll take some time to generate

404
00:17:01,320 --> 00:17:04,020
the s-bomb and once like we said earlier

405
00:17:04,020 --> 00:17:07,020
as one element itself right it's not a

406
00:17:07,020 --> 00:17:09,000
security identify so it's just going to

407
00:17:09,000 --> 00:17:11,339
give you the dependency and list of the

408
00:17:11,339 --> 00:17:13,559
dependencies

409
00:17:13,559 --> 00:17:16,859
and once it is done right so

410
00:17:16,859 --> 00:17:20,099
you can send it out to grind it will

411
00:17:20,099 --> 00:17:21,419
scan the s bomb and tell you what

412
00:17:21,419 --> 00:17:23,040
vulnerabilities you have like what we'll

413
00:17:23,040 --> 00:17:25,020
do is we are using the image tragic

414
00:17:25,020 --> 00:17:27,959
image right we'll generate s form and

415
00:17:27,959 --> 00:17:30,240
we'll take that as Mom and due to crack

416
00:17:30,240 --> 00:17:32,340
and we'll also see that gripe is

417
00:17:32,340 --> 00:17:34,500
reporting that it had that OS execution

418
00:17:34,500 --> 00:17:37,260
that particular CV okay

419
00:17:37,260 --> 00:17:39,860
so

420
00:17:40,919 --> 00:17:43,200
so now if you see here you have this

421
00:17:43,200 --> 00:17:46,559
bomb and

422
00:17:50,760 --> 00:17:52,799
so if you see this is how the s-bomb is

423
00:17:52,799 --> 00:17:54,179
going to look like like you know all the

424
00:17:54,179 --> 00:17:56,160
metadata

425
00:17:56,160 --> 00:17:59,340
name version license author what kind of

426
00:17:59,340 --> 00:18:00,900
license it is so this is just the

427
00:18:00,900 --> 00:18:02,520
inventory and packs like the nutrition

428
00:18:02,520 --> 00:18:05,160
label and now let's go ahead

429
00:18:05,160 --> 00:18:08,160
and

430
00:18:09,299 --> 00:18:11,640
give this to a tool that we are talking

431
00:18:11,640 --> 00:18:13,200
about right gripe is a vulnerability

432
00:18:13,200 --> 00:18:14,840
scanner you can run it on content images

433
00:18:14,840 --> 00:18:17,460
or the s-bomb that was generated as well

434
00:18:17,460 --> 00:18:20,039
so now let's generate this bomb and what

435
00:18:20,039 --> 00:18:21,660
I have done is I'm going to grab for the

436
00:18:21,660 --> 00:18:23,760
CV that is image magic vulnerability

437
00:18:23,760 --> 00:18:25,380
right I'm just going to grab so that we

438
00:18:25,380 --> 00:18:27,419
can see that it was reporting it I'm

439
00:18:27,419 --> 00:18:30,260
just going to run back

440
00:18:34,260 --> 00:18:37,320
okay so now if you see that it took the

441
00:18:37,320 --> 00:18:38,580
s-bomb

442
00:18:38,580 --> 00:18:40,919
and it did run this camp and it has

443
00:18:40,919 --> 00:18:43,559
reported because we did grab it so you

444
00:18:43,559 --> 00:18:45,600
see that it is reporting that this is a

445
00:18:45,600 --> 00:18:48,059
vulnerability so if you put as far

446
00:18:48,059 --> 00:18:50,100
if you use this as part of your pipeline

447
00:18:50,100 --> 00:18:53,400
right so with generating as bomb and

448
00:18:53,400 --> 00:18:56,640
using a scanner you can to certain level

449
00:18:56,640 --> 00:18:58,520
right you can

450
00:18:58,520 --> 00:19:02,220
establish a trust and with this right we

451
00:19:02,220 --> 00:19:04,020
come to end of a certain section we'll

452
00:19:04,020 --> 00:19:06,240
look at container images I'll handle to

453
00:19:06,240 --> 00:19:07,860
solve we will be talking about container

454
00:19:07,860 --> 00:19:10,140
signing and verification which will be a

455
00:19:10,140 --> 00:19:14,179
next step as part of building Trust

456
00:19:14,360 --> 00:19:17,460
thank you

457
00:19:17,460 --> 00:19:20,600
very much

458
00:19:34,679 --> 00:19:37,100
yeah

459
00:19:44,539 --> 00:19:48,179
oh yes yes like like ideally I think

460
00:19:48,179 --> 00:19:50,100
even the public working like for the

461
00:19:50,100 --> 00:19:52,080
basement if you're downloading it right

462
00:19:52,080 --> 00:19:54,539
so they will if like for example if

463
00:19:54,539 --> 00:19:55,799
there are researchers who are reporting

464
00:19:55,799 --> 00:19:59,039
CVS for that so the the maintenance of

465
00:19:59,039 --> 00:20:00,419
that particular project are going to

466
00:20:00,419 --> 00:20:02,760
release patches and updates so you would

467
00:20:02,760 --> 00:20:05,400
want to consume the latest one which is

468
00:20:05,400 --> 00:20:08,400
available to build on top of that your

469
00:20:08,400 --> 00:20:12,740
own application does it make sense yeah

470
00:20:13,080 --> 00:20:15,419
oh oh yes like Lockport there right like

471
00:20:15,419 --> 00:20:17,760
we had one yeah so so I think there are

472
00:20:17,760 --> 00:20:20,340
at times uh if you're using some tools

473
00:20:20,340 --> 00:20:22,679
to if there is a workaround that might

474
00:20:22,679 --> 00:20:24,900
go or you have to work until you know

475
00:20:24,900 --> 00:20:27,720
the patch is available for that

476
00:20:27,720 --> 00:20:29,039
okay

477
00:20:29,039 --> 00:20:31,280
yeah

478
00:20:31,500 --> 00:20:33,840
thank you side

479
00:20:33,840 --> 00:20:36,678
and uh

480
00:20:40,320 --> 00:20:43,980
yeah if someone here is uh you know

481
00:20:43,980 --> 00:20:46,500
known about Google salsa framework which

482
00:20:46,500 --> 00:20:49,440
is uh for supply chain stuff

483
00:20:49,440 --> 00:20:53,280
so I has covered the layer one which is

484
00:20:53,280 --> 00:20:56,100
you know generating as bomb and at the

485
00:20:56,100 --> 00:20:58,799
same time verifying that as bomb but

486
00:20:58,799 --> 00:21:02,400
layer 2 is also very important how to

487
00:21:02,400 --> 00:21:05,220
make sure your images are tamper

488
00:21:05,220 --> 00:21:08,280
resistant basically so one quick example

489
00:21:08,280 --> 00:21:09,960
I can give that there is a tool called

490
00:21:09,960 --> 00:21:12,720
Docker scan so what data scan can do is

491
00:21:12,720 --> 00:21:15,660
like you can pull an image from public

492
00:21:15,660 --> 00:21:18,299
reports and you can progenize the image

493
00:21:18,299 --> 00:21:20,760
so what will happen when you do

494
00:21:20,760 --> 00:21:23,820
trojanize and when you push the image to

495
00:21:23,820 --> 00:21:26,460
public repository so people will pull

496
00:21:26,460 --> 00:21:28,860
them and use it so if you see the

497
00:21:28,860 --> 00:21:31,080
workflow here I pull the image from

498
00:21:31,080 --> 00:21:33,059
public repo and I have to organize the

499
00:21:33,059 --> 00:21:34,679
image and I pushed it to the public

500
00:21:34,679 --> 00:21:37,799
reports people use that what I did I

501
00:21:37,799 --> 00:21:39,720
just put a reversal there and I got the

502
00:21:39,720 --> 00:21:41,880
reversal back and I can do whatever I

503
00:21:41,880 --> 00:21:42,659
want

504
00:21:42,659 --> 00:21:45,900
so what can be done to stop all these

505
00:21:45,900 --> 00:21:49,440
things so let's talk about a big threat

506
00:21:49,440 --> 00:21:51,960
modeling perspective of these containers

507
00:21:51,960 --> 00:21:55,140
so what can be done one thing

508
00:21:55,140 --> 00:21:58,860
first comes into my mind is like pull

509
00:21:58,860 --> 00:22:02,520
the images from the official reports so

510
00:22:02,520 --> 00:22:04,559
what are official reports we can talk

511
00:22:04,559 --> 00:22:07,620
later and the second part is like

512
00:22:07,620 --> 00:22:10,320
maintaining yes bombs so why we need to

513
00:22:10,320 --> 00:22:12,480
maintain as bombs is like when you know

514
00:22:12,480 --> 00:22:14,280
what is there in your container then

515
00:22:14,280 --> 00:22:16,200
only you can protect it if you don't

516
00:22:16,200 --> 00:22:17,520
know what is there then you cannot

517
00:22:17,520 --> 00:22:19,440
protect it and

518
00:22:19,440 --> 00:22:22,320
the main thing is like the second layer

519
00:22:22,320 --> 00:22:24,659
of salsa talks about how to sign your

520
00:22:24,659 --> 00:22:26,880
images how to make your images are

521
00:22:26,880 --> 00:22:30,000
tamper proof so let's take an example in

522
00:22:30,000 --> 00:22:31,740
a real world example what will happen

523
00:22:31,740 --> 00:22:34,260
when I am trying to buy a property when

524
00:22:34,260 --> 00:22:35,940
I'm trying to buy asset what do you do

525
00:22:35,940 --> 00:22:38,520
buyer and seller comes and viral buyer

526
00:22:38,520 --> 00:22:40,620
and seller write everything on the paper

527
00:22:40,620 --> 00:22:43,200
and they will sign on it so what it will

528
00:22:43,200 --> 00:22:45,900
make sure is like nothing can be changed

529
00:22:45,900 --> 00:22:48,000
once the buyer and seller sign on it no

530
00:22:48,000 --> 00:22:49,679
nobody can change either buyer cannot

531
00:22:49,679 --> 00:22:51,120
change it our seller cannot change it

532
00:22:51,120 --> 00:22:53,039
and when it comes to technology

533
00:22:53,039 --> 00:22:54,840
perspective what will happen when you

534
00:22:54,840 --> 00:22:56,460
are sharing documents what will you do

535
00:22:56,460 --> 00:22:58,380
you'll sign on them using DocuSign or

536
00:22:58,380 --> 00:22:59,580
something else

537
00:22:59,580 --> 00:23:03,179
carry the same analogy to the images and

538
00:23:03,179 --> 00:23:05,159
sign the images with the softwares

539
00:23:05,159 --> 00:23:07,020
available and make them tamper-proof

540
00:23:07,020 --> 00:23:10,080
that's it it is it there is no rocket

541
00:23:10,080 --> 00:23:12,480
science behind it the analogy is simple

542
00:23:12,480 --> 00:23:16,380
carry the real world uh techniques to

543
00:23:16,380 --> 00:23:18,419
images to make sure they are

544
00:23:18,419 --> 00:23:21,659
tamper-proof and depth signing images

545
00:23:21,659 --> 00:23:24,780
what help what will help you know and

546
00:23:24,780 --> 00:23:26,340
what help you can get when you're

547
00:23:26,340 --> 00:23:29,039
assigning images is like

548
00:23:29,039 --> 00:23:31,080
it is nothing but adding a digital

549
00:23:31,080 --> 00:23:33,179
signature to your image at the same time

550
00:23:33,179 --> 00:23:35,520
it will verify the source of the image

551
00:23:35,520 --> 00:23:38,100
and identity of the image and using an

552
00:23:38,100 --> 00:23:40,140
unverified Public Image as you mentioned

553
00:23:40,140 --> 00:23:42,720
what will happen when I pull a image

554
00:23:42,720 --> 00:23:44,760
from public source using a unverified

555
00:23:44,760 --> 00:23:46,559
Public Image nothing but inviting risk

556
00:23:46,559 --> 00:23:48,720
into your application environment and

557
00:23:48,720 --> 00:23:50,580
the problem is like as I told you

558
00:23:50,580 --> 00:23:52,559
progenization is very easy with the

559
00:23:52,559 --> 00:23:54,900
tools available so attacker can easily

560
00:23:54,900 --> 00:23:57,659
put malware into that and he cannot

561
00:23:57,659 --> 00:23:59,820
reach it and people can start using it

562
00:23:59,820 --> 00:24:03,179
and you know signing again makes your

563
00:24:03,179 --> 00:24:05,580
images tamper resistant so there are

564
00:24:05,580 --> 00:24:07,620
popular tools available the market one

565
00:24:07,620 --> 00:24:10,260
is cosine another darker notary so there

566
00:24:10,260 --> 00:24:12,240
are many tools available for the purpose

567
00:24:12,240 --> 00:24:16,020
of the demo today I will be uh demoing

568
00:24:16,020 --> 00:24:19,679
on cosine what cosine will do cosine can

569
00:24:19,679 --> 00:24:22,500
in sign your images at the same time

570
00:24:22,500 --> 00:24:24,960
sign your binaries in the blobs cosine

571
00:24:24,960 --> 00:24:27,780
will sign your s bombs and attach those

572
00:24:27,780 --> 00:24:31,140
as bombs to the images and cosine can

573
00:24:31,140 --> 00:24:35,039
use KMS Tools like AWS DCP Azure Hashi

574
00:24:35,039 --> 00:24:38,220
Card World and there is a mechanism in

575
00:24:38,220 --> 00:24:41,039
cosine which is keyless signature and

576
00:24:41,039 --> 00:24:42,840
which is in an experimental phase I can

577
00:24:42,840 --> 00:24:44,760
explain you more once we are going

578
00:24:44,760 --> 00:24:46,799
through each and every step and include

579
00:24:46,799 --> 00:24:49,200
cosine in your sdlc is the final step so

580
00:24:49,200 --> 00:24:51,840
signing your images what will happen so

581
00:24:51,840 --> 00:24:54,539
you will be signing your image with your

582
00:24:54,539 --> 00:24:56,760
private key and you will be verifying

583
00:24:56,760 --> 00:24:58,679
the image when you are using that with

584
00:24:58,679 --> 00:25:03,240
your public key so let me simply take

585
00:25:03,240 --> 00:25:05,960
you to the demo

586
00:25:07,380 --> 00:25:12,919
so if you see this is my uh Docker hub

587
00:25:15,000 --> 00:25:17,580
so I have just one image here which is

588
00:25:17,580 --> 00:25:19,740
test image which is the latest I I

589
00:25:19,740 --> 00:25:23,580
pushed uh six hours ago and what will

590
00:25:23,580 --> 00:25:25,919
happen if I make it public and what will

591
00:25:25,919 --> 00:25:27,960
happen somebody can download it somebody

592
00:25:27,960 --> 00:25:30,779
can tamper it and somebody can add the

593
00:25:30,779 --> 00:25:32,580
malicious stuff and they'll push it and

594
00:25:32,580 --> 00:25:35,100
it will be added with the latest tag So

595
00:25:35,100 --> 00:25:37,020
to avoid all those things what I want to

596
00:25:37,020 --> 00:25:40,919
do is I want to sign my image so

597
00:25:40,919 --> 00:25:44,120
let's sign it

598
00:26:06,360 --> 00:26:09,360
cosine

599
00:26:12,179 --> 00:26:14,000
so I have generated

600
00:26:14,000 --> 00:26:19,260
the keys already and my image my repo is

601
00:26:19,260 --> 00:26:23,720
this one and my image name is

602
00:26:23,830 --> 00:26:27,030
[Music]

603
00:26:29,520 --> 00:26:32,820
so it is asking the password for my

604
00:26:32,820 --> 00:26:35,299
private key

605
00:26:36,960 --> 00:26:39,120
so what cosine will do here it is

606
00:26:39,120 --> 00:26:41,159
signing the image and it will push the

607
00:26:41,159 --> 00:26:43,380
signed image into the report so which is

608
00:26:43,380 --> 00:26:46,679
saved so once it pushes let's see what

609
00:26:46,679 --> 00:26:49,039
will happen

610
00:27:23,520 --> 00:27:26,520
foreign

611
00:27:40,320 --> 00:27:43,220
thank you

612
00:27:50,159 --> 00:27:51,179
okay

613
00:27:51,179 --> 00:27:53,900
I know this is gonna happen

614
00:27:53,900 --> 00:27:58,520
let me open my recording

615
00:28:00,480 --> 00:28:03,700
[Music]

616
00:28:05,100 --> 00:28:09,120
so as I mentioned I I will be I have

617
00:28:09,120 --> 00:28:10,860
signed my image and pushed into my

618
00:28:10,860 --> 00:28:13,020
report so once I pushed it to my report

619
00:28:13,020 --> 00:28:16,620
so there will be the signed image of the

620
00:28:16,620 --> 00:28:19,020
same latest image this is the signed

621
00:28:19,020 --> 00:28:23,880
image uh and you can do

622
00:28:23,880 --> 00:28:26,840
foreign

623
00:28:33,559 --> 00:28:36,840
version of the image basically so let's

624
00:28:36,840 --> 00:28:38,340
say I have signed and pushed it to the

625
00:28:38,340 --> 00:28:41,100
repo triangle it will I try to identify

626
00:28:41,100 --> 00:28:43,620
if there is a signed version of test

627
00:28:43,620 --> 00:28:47,640
Image Group here if it is there cosine

628
00:28:47,640 --> 00:28:49,799
will tell you s there is a signed

629
00:28:49,799 --> 00:28:51,480
version of this image and this is the

630
00:28:51,480 --> 00:28:53,940
signed version of this image so which is

631
00:28:53,940 --> 00:28:56,400
similar to what we have just pushed and

632
00:28:56,400 --> 00:28:58,159
at the same time

633
00:28:58,159 --> 00:29:01,020
cosine will verify

634
00:29:01,020 --> 00:29:04,080
whether the signed version is not

635
00:29:04,080 --> 00:29:06,960
tampered with the public key we have so

636
00:29:06,960 --> 00:29:11,340
now it one I do cosine verify the key

637
00:29:11,340 --> 00:29:13,320
which I have presented here is the

638
00:29:13,320 --> 00:29:15,419
public key and the key which I have

639
00:29:15,419 --> 00:29:17,760
presented when I am signing it is a

640
00:29:17,760 --> 00:29:19,740
private key so now

641
00:29:19,740 --> 00:29:23,580
when I try to see please verify my

642
00:29:23,580 --> 00:29:25,919
latest signed image is not tampered so

643
00:29:25,919 --> 00:29:30,080
then what cosine is telling me

644
00:29:30,080 --> 00:29:33,059
the cosine claims are validated the

645
00:29:33,059 --> 00:29:35,100
signature were verified again as the

646
00:29:35,100 --> 00:29:37,500
specific public key so the image is not

647
00:29:37,500 --> 00:29:40,320
tampered you can happily use that image

648
00:29:40,320 --> 00:29:43,200
so the clients are tampered here at the

649
00:29:43,200 --> 00:29:45,779
same time the signatures you have

650
00:29:45,779 --> 00:29:48,360
provided with respect to your public key

651
00:29:48,360 --> 00:29:50,460
has been verified so this is the

652
00:29:50,460 --> 00:29:53,159
important part so now I have pushed a

653
00:29:53,159 --> 00:29:55,140
signed image and I am using the signed

654
00:29:55,140 --> 00:29:57,240
image when I am pulling that and I'm

655
00:29:57,240 --> 00:29:59,700
verifying it and at the same time the

656
00:29:59,700 --> 00:30:01,679
problem because problem people faces is

657
00:30:01,679 --> 00:30:04,140
like how to maintain these many case now

658
00:30:04,140 --> 00:30:07,320
I have my public key private key and it

659
00:30:07,320 --> 00:30:09,840
is not you know easy task to do that so

660
00:30:09,840 --> 00:30:12,559
that is why

661
00:30:15,500 --> 00:30:19,200
as I mentioned sign with KMS Tools so

662
00:30:19,200 --> 00:30:23,100
what AWS Key Management tools what gcp

663
00:30:23,100 --> 00:30:25,080
are Azure and hashicab world will help

664
00:30:25,080 --> 00:30:27,779
you with like they will store the keys

665
00:30:27,779 --> 00:30:30,419
and you have to just make sure provide

666
00:30:30,419 --> 00:30:31,980
the path of the keys when you are

667
00:30:31,980 --> 00:30:33,779
signing the images or else you have to

668
00:30:33,779 --> 00:30:35,760
maintain the keys in your local reports

669
00:30:35,760 --> 00:30:37,200
are somewhere in the images and all

670
00:30:37,200 --> 00:30:39,720
those things which is again a vulnerable

671
00:30:39,720 --> 00:30:43,080
prone approach and what is next thing as

672
00:30:43,080 --> 00:30:45,299
I mentioned cosine can sign the binaries

673
00:30:45,299 --> 00:30:48,179
and blobs also so then you have built

674
00:30:48,179 --> 00:30:50,820
the batch file of your code and when you

675
00:30:50,820 --> 00:30:52,320
are going to deploy it ocean can

676
00:30:52,320 --> 00:30:54,419
generate signatures for the batch files

677
00:30:54,419 --> 00:30:58,140
also and as I mentioned s-bomb is

678
00:30:58,140 --> 00:31:02,340
nothing but what you have in your image

679
00:31:02,340 --> 00:31:04,260
so when you know what you have in your

680
00:31:04,260 --> 00:31:06,299
image then only you can protect it

681
00:31:06,299 --> 00:31:09,240
so and we have generated as bomb and you

682
00:31:09,240 --> 00:31:10,860
are verifying the album with the

683
00:31:10,860 --> 00:31:13,740
whatever you have generated how to make

684
00:31:13,740 --> 00:31:15,539
sure that is not tampered by someone

685
00:31:15,539 --> 00:31:17,399
else how to make sure the email

686
00:31:17,399 --> 00:31:19,380
something has been added to the image so

687
00:31:19,380 --> 00:31:20,820
that my s bomb will be changed

688
00:31:20,820 --> 00:31:24,240
completely So to avoid those things you

689
00:31:24,240 --> 00:31:26,700
can sign as one with your question

690
00:31:26,700 --> 00:31:28,020
so

691
00:31:28,020 --> 00:31:33,500
again I will take help of the recording

692
00:31:34,140 --> 00:31:37,140
okay

693
00:31:37,380 --> 00:31:40,140
so now what I am doing I am using the

694
00:31:40,140 --> 00:31:43,679
same shift tool to generate my s-bomb so

695
00:31:43,679 --> 00:31:46,200
for the image test image to a row so the

696
00:31:46,200 --> 00:31:49,140
moment it generates the S bar now I I

697
00:31:49,140 --> 00:31:50,760
just generated under the command prompt

698
00:31:50,760 --> 00:31:53,419
now what I'm doing is I am trying to

699
00:31:53,419 --> 00:31:56,820
load my s-bomb into

700
00:31:56,820 --> 00:32:02,960
a spdx format file once it is generated

701
00:32:03,179 --> 00:32:07,020
I am attaching my S bond to the image so

702
00:32:07,020 --> 00:32:09,240
what will happen when I attach s bomb to

703
00:32:09,240 --> 00:32:10,140
the image

704
00:32:10,140 --> 00:32:12,600
now I am telling my image this is your

705
00:32:12,600 --> 00:32:16,020
response so these are all the things you

706
00:32:16,020 --> 00:32:18,840
have within you so if something is

707
00:32:18,840 --> 00:32:20,640
changed please make sure that can be

708
00:32:20,640 --> 00:32:23,520
failed so what I did is like I have the

709
00:32:23,520 --> 00:32:26,220
the generated s bomb I'm attaching to

710
00:32:26,220 --> 00:32:28,260
the image so I am just giving that

711
00:32:28,260 --> 00:32:32,159
cosine attach my F-bomb to the test

712
00:32:32,159 --> 00:32:34,140
image Forum so it is attaching the s

713
00:32:34,140 --> 00:32:36,500
bomb

714
00:32:38,059 --> 00:32:41,120
and if You observe here there is the

715
00:32:41,120 --> 00:32:43,919
mistake I am doing is I'm just attaching

716
00:32:43,919 --> 00:32:46,020
this by my knight not signing the S Bar

717
00:32:46,020 --> 00:32:48,840
so the warning here is attaching Edge

718
00:32:48,840 --> 00:32:51,720
bombs this way does not sign them if you

719
00:32:51,720 --> 00:32:53,940
want to sign them use cosine attest

720
00:32:53,940 --> 00:32:55,860
predicate latest experience and all

721
00:32:55,860 --> 00:32:57,360
those things so

722
00:32:57,360 --> 00:33:00,840
again what I did I just attach my S bump

723
00:33:00,840 --> 00:33:03,419
to the image if you see the format up

724
00:33:03,419 --> 00:33:07,980
there it will be Dot sbom and again so

725
00:33:07,980 --> 00:33:09,720
now what I'm doing is

726
00:33:09,720 --> 00:33:12,419
I am following the

727
00:33:12,419 --> 00:33:15,960
secure way of signing my response and

728
00:33:15,960 --> 00:33:18,419
attaching my response to the image so

729
00:33:18,419 --> 00:33:21,779
this is like cosine sine p with my

730
00:33:21,779 --> 00:33:23,820
private key and attachment has gone to

731
00:33:23,820 --> 00:33:26,880
my image so once I do that what will

732
00:33:26,880 --> 00:33:29,100
happen it will create another signed

733
00:33:29,100 --> 00:33:30,960
image with

734
00:33:30,960 --> 00:33:34,860
signed as bomb in it and to make sure

735
00:33:34,860 --> 00:33:37,380
you know even the image will not be

736
00:33:37,380 --> 00:33:38,940
tampered at the same time the s-bomb

737
00:33:38,940 --> 00:33:40,320
with respect to the image will not be

738
00:33:40,320 --> 00:33:44,399
tempered so this is what uh profile will

739
00:33:44,399 --> 00:33:47,519
be helpful when you are making sure your

740
00:33:47,519 --> 00:33:50,640
image should not be tampered and and

741
00:33:50,640 --> 00:33:53,700
someone cannot put some malware or

742
00:33:53,700 --> 00:33:56,220
Trojans into your image so coming back

743
00:33:56,220 --> 00:33:58,200
to the presentation now

744
00:33:58,200 --> 00:34:01,140
now we talked about signing container

745
00:34:01,140 --> 00:34:02,580
images verifying containers images

746
00:34:02,580 --> 00:34:04,919
signing is bonds and verifying them at

747
00:34:04,919 --> 00:34:07,260
the same time kns tools so what is

748
00:34:07,260 --> 00:34:10,500
keyless signatures well with cosine they

749
00:34:10,500 --> 00:34:12,659
are still in the experimental phase so

750
00:34:12,659 --> 00:34:15,599
there are two tools called transparency

751
00:34:15,599 --> 00:34:18,060
logs and full Co with respect to cosine

752
00:34:18,060 --> 00:34:21,359
what they will do now currently you are

753
00:34:21,359 --> 00:34:23,699
generating your own key and which is

754
00:34:23,699 --> 00:34:26,780
nothing but your own root CA and

755
00:34:26,780 --> 00:34:29,760
if you want to avoid that full Co can

756
00:34:29,760 --> 00:34:30,839
provide

757
00:34:30,839 --> 00:34:34,440
the root ca for your cosine so no you

758
00:34:34,440 --> 00:34:36,060
don't need to generate anything and at

759
00:34:36,060 --> 00:34:38,879
the same time your transparency log will

760
00:34:38,879 --> 00:34:43,320
maintain short-term tokens to verify the

761
00:34:43,320 --> 00:34:46,379
sign I mean like to verify the I mean

762
00:34:46,379 --> 00:34:48,300
like authenticity of or Integrity of the

763
00:34:48,300 --> 00:34:51,060
image so you don't need to do anything

764
00:34:51,060 --> 00:34:53,580
difficulty on transparency logs will

765
00:34:53,580 --> 00:34:56,040
make your cosine assigning images part

766
00:34:56,040 --> 00:34:59,880
keyless basically so that is cosine and

767
00:34:59,880 --> 00:35:01,740
now I have signed and everything in

768
00:35:01,740 --> 00:35:03,839
place how to use that in my sdls how to

769
00:35:03,839 --> 00:35:06,060
use the different in my pipeline go

770
00:35:06,060 --> 00:35:08,280
ahead and put cosine in your pipeline

771
00:35:08,280 --> 00:35:11,880
and add the scene sign when you are

772
00:35:11,880 --> 00:35:15,720
pushing the images onto the uh repos and

773
00:35:15,720 --> 00:35:18,119
when you are pulling back verify with

774
00:35:18,119 --> 00:35:21,540
your public key and make sure nothing is

775
00:35:21,540 --> 00:35:24,359
gone wrong so when the pipeline will

776
00:35:24,359 --> 00:35:28,800
fail is when the public is unable to you

777
00:35:28,800 --> 00:35:30,780
know verify the image at the same time

778
00:35:30,780 --> 00:35:33,599
when the pro the provided image is wrong

779
00:35:33,599 --> 00:35:35,700
for the public key both ways the

780
00:35:35,700 --> 00:35:39,000
pipeline will fail and you are secure

781
00:35:39,000 --> 00:35:41,780
from tampering part

782
00:35:41,780 --> 00:35:44,640
so from the Google salsa framework

783
00:35:44,640 --> 00:35:47,160
perspective first part is like

784
00:35:47,160 --> 00:35:48,960
maintaining your response the second

785
00:35:48,960 --> 00:35:51,780
part is signing your images to make sure

786
00:35:51,780 --> 00:35:55,079
they are not uh changed

787
00:35:55,079 --> 00:35:57,540
what can be done so like you know what

788
00:35:57,540 --> 00:35:59,400
are the other recommendations you will

789
00:35:59,400 --> 00:36:01,560
talk so much about we talk so much about

790
00:36:01,560 --> 00:36:03,599
cosine what next

791
00:36:03,599 --> 00:36:06,480
first thing we have to do in your

792
00:36:06,480 --> 00:36:08,220
application environment is like only

793
00:36:08,220 --> 00:36:10,260
pull the container images from trusted

794
00:36:10,260 --> 00:36:11,700
sources what are the trusted sources

795
00:36:11,700 --> 00:36:13,560
basically the docker of maintains

796
00:36:13,560 --> 00:36:17,339
official uh repo of images and at the

797
00:36:17,339 --> 00:36:19,680
same time the second trusted Source from

798
00:36:19,680 --> 00:36:22,560
uh an organization perspective is like

799
00:36:22,560 --> 00:36:25,140
your own private request basically so

800
00:36:25,140 --> 00:36:27,839
where you can only pull push your images

801
00:36:27,839 --> 00:36:31,619
onto it nobody can have any authenticity

802
00:36:31,619 --> 00:36:33,839
to do that at the same time use specific

803
00:36:33,839 --> 00:36:36,560
tags the problem is like people

804
00:36:36,560 --> 00:36:39,359
uh don't use tax because you know

805
00:36:39,359 --> 00:36:41,820
maintaining them is very uh you know

806
00:36:41,820 --> 00:36:43,859
cumbersome activity but use specific

807
00:36:43,859 --> 00:36:46,680
tags so that you know you're pulling the

808
00:36:46,680 --> 00:36:48,720
image which you pushed basically that is

809
00:36:48,720 --> 00:36:51,359
one other thing now the same time don't

810
00:36:51,359 --> 00:36:55,260
completely uh depend upon tags there is

811
00:36:55,260 --> 00:36:57,119
there are many ways where you can you

812
00:36:57,119 --> 00:37:00,960
know uh make sure uh the chat the tags

813
00:37:00,960 --> 00:37:04,020
can be tampered uh in in a typo static

814
00:37:04,020 --> 00:37:07,020
way basically and generating as bomb and

815
00:37:07,020 --> 00:37:08,099
monitoring the vulnerabilities

816
00:37:08,099 --> 00:37:11,339
associated with it is very important and

817
00:37:11,339 --> 00:37:12,900
at the same time enable container

818
00:37:12,900 --> 00:37:16,380
scanning in your cicd pipeline so there

819
00:37:16,380 --> 00:37:18,300
are many tools like you know Prisma can

820
00:37:18,300 --> 00:37:21,000
provide the tools which can find

821
00:37:21,000 --> 00:37:23,520
vulnerabilities within the cacd pipeline

822
00:37:23,520 --> 00:37:25,260
at the same time

823
00:37:25,260 --> 00:37:28,320
updating your base images and containers

824
00:37:28,320 --> 00:37:31,020
is as important as whatever you are

825
00:37:31,020 --> 00:37:33,660
doing you know there is bombs or signing

826
00:37:33,660 --> 00:37:35,940
pages and all those things and sign and

827
00:37:35,940 --> 00:37:37,740
verify images in the next step sign and

828
00:37:37,740 --> 00:37:40,200
verify your s-bombs and least privileged

829
00:37:40,200 --> 00:37:44,160
user and when Psy is showing the

830
00:37:44,160 --> 00:37:46,800
reversal he got the user there is root

831
00:37:46,800 --> 00:37:48,900
basically and people always talks about

832
00:37:48,900 --> 00:37:50,940
you know container by default and runs

833
00:37:50,940 --> 00:37:52,560
as a root and all those things but the

834
00:37:52,560 --> 00:37:53,940
problem is like

835
00:37:53,940 --> 00:37:57,000
you can maintain your role based access

836
00:37:57,000 --> 00:37:59,280
control stuff and you can make you can

837
00:37:59,280 --> 00:38:00,900
properly put the roles Associated into

838
00:38:00,900 --> 00:38:02,760
the containers to make sure they are

839
00:38:02,760 --> 00:38:04,500
least trivialized what will happen there

840
00:38:04,500 --> 00:38:07,260
are few vulnerabilities associated

841
00:38:07,260 --> 00:38:10,380
those vulnerabilities basically need the

842
00:38:10,380 --> 00:38:13,020
container to be running as a civilized

843
00:38:13,020 --> 00:38:15,420
user to exploit so when you're running

844
00:38:15,420 --> 00:38:17,760
them in a least privileged user mode

845
00:38:17,760 --> 00:38:19,440
those vulnerabilities cannot be

846
00:38:19,440 --> 00:38:21,420
exploited basically so make sure your

847
00:38:21,420 --> 00:38:23,579
containers are running in at least

848
00:38:23,579 --> 00:38:26,339
privileged user at the same time prefer

849
00:38:26,339 --> 00:38:28,619
minimal or destroyless base images only

850
00:38:28,619 --> 00:38:31,140
install dependencies you need so I think

851
00:38:31,140 --> 00:38:32,579
majority of the people here know

852
00:38:32,579 --> 00:38:34,260
distrollers this Solace is nothing but

853
00:38:34,260 --> 00:38:36,960
an image with your code under runtime

854
00:38:36,960 --> 00:38:40,800
dependencies so why this flawless makes

855
00:38:40,800 --> 00:38:43,680
your journey smooth and at the same time

856
00:38:43,680 --> 00:38:46,440
your container secure is like so let's

857
00:38:46,440 --> 00:38:48,599
take a real world example so when I go

858
00:38:48,599 --> 00:38:51,300
to a fight or a battle what I would what

859
00:38:51,300 --> 00:38:53,220
I need is weapons basically so

860
00:38:53,220 --> 00:38:57,180
distrollers will cut off the weapons

861
00:38:57,180 --> 00:38:59,339
from an attacker or an hacker

862
00:38:59,339 --> 00:39:01,320
perspective what he needs within the

863
00:39:01,320 --> 00:39:04,560
container so now when I get a basic

864
00:39:04,560 --> 00:39:07,560
access into a container what I need I

865
00:39:07,560 --> 00:39:10,500
need some tools to pull exploits or to

866
00:39:10,500 --> 00:39:13,500
pull reverse shells into my image so

867
00:39:13,500 --> 00:39:16,260
that obligate a girl or something else

868
00:39:16,260 --> 00:39:19,500
to be there which should be put should

869
00:39:19,500 --> 00:39:21,599
be there to pull all those stuff so when

870
00:39:21,599 --> 00:39:23,099
you are maintaining your images or

871
00:39:23,099 --> 00:39:24,720
containers of the destroys nothing will

872
00:39:24,720 --> 00:39:27,180
be there which will help the attacker

873
00:39:27,180 --> 00:39:29,700
and it will definitely reduce the blast

874
00:39:29,700 --> 00:39:33,300
radius within the minimalist container

875
00:39:33,300 --> 00:39:37,320
he got access to so following all these

876
00:39:37,320 --> 00:39:40,500
is you know uh

877
00:39:40,500 --> 00:39:43,320
the basic recommendations when your

878
00:39:43,320 --> 00:39:46,200
application within your application life

879
00:39:46,200 --> 00:39:49,500
cycle of containerization basically and

880
00:39:49,500 --> 00:39:51,359
at the same time

881
00:39:51,359 --> 00:39:53,400
at first basically you know when you're

882
00:39:53,400 --> 00:39:54,660
starting your

883
00:39:54,660 --> 00:39:56,460
um uh when you're starting implementing

884
00:39:56,460 --> 00:39:58,920
security into your containers content

885
00:39:58,920 --> 00:40:01,079
raise life cycles it will be difficult

886
00:40:01,079 --> 00:40:04,020
but at the same time as you are doing it

887
00:40:04,020 --> 00:40:06,000
progressively as you are doing it in an

888
00:40:06,000 --> 00:40:07,500
integrated fashion

889
00:40:07,500 --> 00:40:09,420
the number of vulnerabilities should be

890
00:40:09,420 --> 00:40:12,000
reduced at the same time it will be very

891
00:40:12,000 --> 00:40:14,220
easy to maintain either the s-bombs or

892
00:40:14,220 --> 00:40:15,599
signing the image and all those things

893
00:40:15,599 --> 00:40:17,400
it will be very easy to maintain so

894
00:40:17,400 --> 00:40:21,079
telling I mean like mentioning that

895
00:40:21,079 --> 00:40:23,520
please try to follow the recommendations

896
00:40:23,520 --> 00:40:24,960
mentioned here

897
00:40:24,960 --> 00:40:27,540
and please let us know if you have any

898
00:40:27,540 --> 00:40:29,720
questions

899
00:40:37,980 --> 00:40:42,440
all right thank you everyone thank you

