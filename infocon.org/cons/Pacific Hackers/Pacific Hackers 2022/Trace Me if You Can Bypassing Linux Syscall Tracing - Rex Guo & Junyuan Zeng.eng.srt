1
00:00:07,799 --> 00:00:11,219
so we have our first press enter

2
00:00:11,219 --> 00:00:12,719
um

3
00:00:12,719 --> 00:00:17,279
and what is ranks or Rex is at Rockstar

4
00:00:17,279 --> 00:00:19,740
I know Rex from some time ago and uh

5
00:00:19,740 --> 00:00:22,920
he's been a speaker feature at black hat

6
00:00:22,920 --> 00:00:26,580
that gun and he's a part of one of our

7
00:00:26,580 --> 00:00:28,920
members uh so I'm assuming this next

8
00:00:28,920 --> 00:00:29,760
talk

9
00:00:29,760 --> 00:00:32,880
uh since we uh took a look at it it's

10
00:00:32,880 --> 00:00:35,399
gonna be pretty amazing so I'm Gonna

11
00:00:35,399 --> 00:00:39,360
Leave You with Rex uh and Dr Zen so Rex

12
00:00:39,360 --> 00:00:41,160
to grow in

13
00:00:41,160 --> 00:00:45,078
uh here we've got three seconds where

14
00:00:50,700 --> 00:00:52,920
is

15
00:00:52,920 --> 00:00:55,739
so you can just show the screen hello

16
00:00:55,739 --> 00:00:57,960
everyone good morning

17
00:00:57,960 --> 00:01:00,360
um how's everybody feeling

18
00:01:00,360 --> 00:01:02,520
awesome awesome

19
00:01:02,520 --> 00:01:05,220
um so my voice may be a little bit low

20
00:01:05,220 --> 00:01:07,760
today because

21
00:01:10,880 --> 00:01:13,920
before I come I really want Marco and

22
00:01:13,920 --> 00:01:16,560
well they say this audience should be

23
00:01:16,560 --> 00:01:18,960
okay with me well if you don't like the

24
00:01:18,960 --> 00:01:21,960
top because of that house

25
00:01:21,960 --> 00:01:24,540
just kidding it's a privilege to be here

26
00:01:24,540 --> 00:01:26,720
again

27
00:01:42,360 --> 00:01:44,400
all right awesome

28
00:01:44,400 --> 00:01:47,640
um so this talk is going to be pretty

29
00:01:47,640 --> 00:01:50,220
dense because we have given a different

30
00:01:50,220 --> 00:01:52,640
version of this

31
00:01:52,640 --> 00:01:55,740
and that's called last year but I had

32
00:01:55,740 --> 00:01:57,780
this year I've come this year he's a

33
00:01:57,780 --> 00:02:00,780
combination of City talks so if you

34
00:02:00,780 --> 00:02:03,180
don't understand anything totally don't

35
00:02:03,180 --> 00:02:05,520
don't feel bad um

36
00:02:05,520 --> 00:02:09,079
before we start a taco

37
00:02:10,878 --> 00:02:15,739
has anybody ever been a triple monster

38
00:02:16,430 --> 00:02:17,819
[Music]

39
00:02:17,819 --> 00:02:21,180
has everybody uh ever see through people

40
00:02:21,180 --> 00:02:24,780
is everybody about ebtf

41
00:02:24,780 --> 00:02:27,360
one person

42
00:02:27,360 --> 00:02:29,819
um who will try to be as

43
00:02:29,819 --> 00:02:31,860
detailed as possible we'll talk about

44
00:02:31,860 --> 00:02:34,640
those sectors

45
00:02:37,080 --> 00:02:39,060
okay so

46
00:02:39,060 --> 00:02:41,120
um

47
00:02:48,959 --> 00:02:51,060
yeah so uh really quickly introduce

48
00:02:51,060 --> 00:02:53,400
myself I work at least work

49
00:02:53,400 --> 00:02:54,000
um

50
00:02:54,000 --> 00:02:56,160
if you're not familiar with us it's a

51
00:02:56,160 --> 00:02:58,140
cloud platform company we basically

52
00:02:58,140 --> 00:03:02,280
build a platform that enable the

53
00:03:02,280 --> 00:03:04,560
customer to protect their cost security

54
00:03:04,560 --> 00:03:07,080
we satisfied pretty much multiple use

55
00:03:07,080 --> 00:03:08,099
cases

56
00:03:08,099 --> 00:03:11,099
well you don't Google Us online and

57
00:03:11,099 --> 00:03:13,620
already CNBC box everywhere

58
00:03:13,620 --> 00:03:15,780
as you can see work on I lead the whole

59
00:03:15,780 --> 00:03:17,700
project on track path analysis of this

60
00:03:17,700 --> 00:03:20,400
one basically it's one of the core power

61
00:03:20,400 --> 00:03:23,400
core technology in public so basically

62
00:03:23,400 --> 00:03:25,500
address all these different dimensions

63
00:03:25,500 --> 00:03:27,959
data and what we predict what is the

64
00:03:27,959 --> 00:03:32,040
highest risk of attack that could happen

65
00:03:32,040 --> 00:03:34,019
uh so that's more on the positive side

66
00:03:34,019 --> 00:03:36,000
and then I also work on building new

67
00:03:36,000 --> 00:03:37,620
photographs in the wrong kind of

68
00:03:37,620 --> 00:03:40,580
detection in the company

69
00:03:42,799 --> 00:03:46,200
yeah so I'm Julia right now a senior

70
00:03:46,200 --> 00:03:47,879
storage engineer at Lincoln working on

71
00:03:47,879 --> 00:03:50,819
chromatics so before that I was a

72
00:03:50,819 --> 00:03:53,640
security engineer for g.com for uh Cloud

73
00:03:53,640 --> 00:03:56,159
security and even before that I was

74
00:03:56,159 --> 00:03:59,120
working on mobile security

75
00:04:00,299 --> 00:04:01,379
yeah

76
00:04:01,379 --> 00:04:04,019
okay without further Ado let's time

77
00:04:04,019 --> 00:04:05,280
running

78
00:04:05,280 --> 00:04:08,099
um before we start I want to sort of

79
00:04:08,099 --> 00:04:10,019
tell the story

80
00:04:10,019 --> 00:04:12,420
this manifest some of the incidents that

81
00:04:12,420 --> 00:04:14,879
we have seen in the past that's a simple

82
00:04:14,879 --> 00:04:15,959
example

83
00:04:15,959 --> 00:04:18,180
so imagine you know it's Thanksgiving

84
00:04:18,180 --> 00:04:21,600
mother and your colleague

85
00:04:21,600 --> 00:04:24,620
there's a hacker coming in using log4j

86
00:04:24,620 --> 00:04:27,360
RC compromise your partner and

87
00:04:27,360 --> 00:04:30,080
regression right

88
00:04:32,100 --> 00:04:35,100
foreign

89
00:04:45,840 --> 00:04:48,979
[Music]

90
00:04:57,570 --> 00:05:01,649
[Music]

91
00:05:05,419 --> 00:05:08,900
environmental variable okay

92
00:05:08,900 --> 00:05:11,160
and then he did that when he moved to

93
00:05:11,160 --> 00:05:13,139
the second machine using this as the

94
00:05:13,139 --> 00:05:16,800
stage hijackable technology

95
00:05:16,800 --> 00:05:19,500
so as he is uh quickly celebrating right

96
00:05:19,500 --> 00:05:20,580
he

97
00:05:20,580 --> 00:05:22,740
um about his progress to find out that

98
00:05:22,740 --> 00:05:25,380
his assets is completely blocked

99
00:05:25,380 --> 00:05:27,720
he tried all these expert again nothing

100
00:05:27,720 --> 00:05:30,440
works yeah

101
00:05:33,060 --> 00:05:33,960
um

102
00:05:33,960 --> 00:05:36,539
now let's look at the other side of the

103
00:05:36,539 --> 00:05:38,580
story sorry I think that's the title

104
00:05:38,580 --> 00:05:42,539
this is the defender's view apologize

105
00:05:42,539 --> 00:05:44,100
so if we look here from the different

106
00:05:44,100 --> 00:05:47,699
side your C-Class security just require

107
00:05:47,699 --> 00:05:49,800
Cutting Edge security monitoring tool

108
00:05:49,800 --> 00:05:52,560
and the Security Management tool allows

109
00:05:52,560 --> 00:05:54,900
you to monitor all the process behaviors

110
00:05:54,900 --> 00:05:58,020
and system call following the system

111
00:05:58,020 --> 00:06:00,960
and therefore every single

112
00:06:00,960 --> 00:06:04,139
steps that the attacker perform here are

113
00:06:04,139 --> 00:06:06,600
actually translating like slack alerts

114
00:06:06,600 --> 00:06:09,259
or something

115
00:06:10,440 --> 00:06:13,620
um so those really powerful attacking

116
00:06:13,620 --> 00:06:16,039
technology

117
00:06:16,199 --> 00:06:18,600
um let's look at a really simple example

118
00:06:18,600 --> 00:06:22,259
of how we can detect this using uh

119
00:06:22,259 --> 00:06:24,720
management technology

120
00:06:24,720 --> 00:06:27,419
let's look at this particular example

121
00:06:27,419 --> 00:06:29,280
let's say I wanted to check

122
00:06:29,280 --> 00:06:32,880
a program reading our t-shirt okay so I

123
00:06:32,880 --> 00:06:35,039
will write a rule and it will be like

124
00:06:35,039 --> 00:06:37,280
this

125
00:06:37,280 --> 00:06:40,440
I detect there's a system called that

126
00:06:40,440 --> 00:06:43,440
it's open or open at and it has

127
00:06:43,440 --> 00:06:46,319
repetition while the system requires

128
00:06:46,319 --> 00:06:48,120
being evoked

129
00:06:48,120 --> 00:06:52,199
and then the file name is shadow

130
00:06:52,199 --> 00:06:54,360
and the program is not in the allowance

131
00:06:54,360 --> 00:06:56,460
because your have your regular program

132
00:06:56,460 --> 00:06:58,620
that you know you need at each other

133
00:06:58,620 --> 00:07:00,860
right

134
00:07:00,900 --> 00:07:03,060
now

135
00:07:03,060 --> 00:07:05,819
if you do if the attacker is able to

136
00:07:05,819 --> 00:07:09,900
let's say modify the file name attribute

137
00:07:09,900 --> 00:07:11,880
it's able to

138
00:07:11,880 --> 00:07:14,400
take the biology and the management

139
00:07:14,400 --> 00:07:16,740
software return something else then you

140
00:07:16,740 --> 00:07:18,660
pretty much complete the bypass the

141
00:07:18,660 --> 00:07:21,139
detection

142
00:07:21,180 --> 00:07:23,699
so this is what the stock is about

143
00:07:23,699 --> 00:07:25,199
um we're going to first talk about

144
00:07:25,199 --> 00:07:27,479
exactly how the Silicon Co-op tracing

145
00:07:27,479 --> 00:07:28,919
works and then we'll talk about the

146
00:07:28,919 --> 00:07:30,120
probability

147
00:07:30,120 --> 00:07:32,460
and we'll talk about different type of

148
00:07:32,460 --> 00:07:34,740
exploitations that can happen

149
00:07:34,740 --> 00:07:35,880
and finally we'll talk about

150
00:07:35,880 --> 00:07:38,360
Communications

151
00:07:42,560 --> 00:07:46,380
so um as reservation Cisco tracing is

152
00:07:46,380 --> 00:07:48,259
very important we didn't have any stress

153
00:07:48,259 --> 00:07:51,060
this is a diagram to show you the how

154
00:07:51,060 --> 00:07:52,740
system traces work

155
00:07:52,740 --> 00:07:54,419
uh so basically

156
00:07:54,419 --> 00:07:56,340
um this is called course president

157
00:07:56,340 --> 00:07:58,319
including two components one is the

158
00:07:58,319 --> 00:08:01,080
hooks for Cisco intersection another one

159
00:08:01,080 --> 00:08:03,240
is called tracing progress

160
00:08:03,240 --> 00:08:05,039
so when the application issue a system

161
00:08:05,039 --> 00:08:07,139
call into a kernel so the accessible

162
00:08:07,139 --> 00:08:10,919
code pass is executed and if we attach

163
00:08:10,919 --> 00:08:13,199
the training program to the host so the

164
00:08:13,199 --> 00:08:14,819
tracing program will be triggered to

165
00:08:14,819 --> 00:08:17,160
collect the Cisco information and send

166
00:08:17,160 --> 00:08:19,919
us information to the monitor agent to

167
00:08:19,919 --> 00:08:21,780
detect any stress

168
00:08:21,780 --> 00:08:24,419
so um the tracing program can be

169
00:08:24,419 --> 00:08:26,520
implemented in the internal space as

170
00:08:26,520 --> 00:08:28,680
shown on the net diagram or implement it

171
00:08:28,680 --> 00:08:32,039
as a usage-based program as part of the

172
00:08:32,039 --> 00:08:33,839
modern agent please show on the right

173
00:08:33,839 --> 00:08:34,700
side

174
00:08:34,700 --> 00:08:37,700
foreign

175
00:08:41,850 --> 00:08:43,099
[Music]

176
00:08:43,099 --> 00:08:46,080
is called tracing programs

177
00:08:46,080 --> 00:08:48,360
this Trace program can be attached to

178
00:08:48,360 --> 00:08:50,940
different hopes like Chase bankroll or

179
00:08:50,940 --> 00:08:52,860
key Trace we'll talk about this

180
00:08:52,860 --> 00:08:55,260
mechanism later in the topic

181
00:08:55,260 --> 00:08:58,260
so we can use the name as linking

182
00:08:58,260 --> 00:09:00,959
mechanism like I've traced super events

183
00:09:00,959 --> 00:09:03,120
throughout SEO or treating program or

184
00:09:03,120 --> 00:09:04,620
you can improve the electricity program

185
00:09:04,620 --> 00:09:07,560
totally by yourself as a kernel module

186
00:09:07,560 --> 00:09:10,560
of edpure pro or user space programs

187
00:09:10,560 --> 00:09:13,279
foreign

188
00:09:16,459 --> 00:09:20,180
so basically it's the kernel static hook

189
00:09:20,180 --> 00:09:23,279
for Cisco interception um the current

190
00:09:23,279 --> 00:09:25,500
provide to trace Point like this n

191
00:09:25,500 --> 00:09:28,140
adjust Point has this x to the point

192
00:09:28,140 --> 00:09:30,480
so if we attach the tracing program to

193
00:09:30,480 --> 00:09:32,040
this Trace point

194
00:09:32,040 --> 00:09:34,380
a function called trace this enter and

195
00:09:34,380 --> 00:09:37,260
traces exit will trigger uh the tracing

196
00:09:37,260 --> 00:09:39,600
program so we will use the same

197
00:09:39,600 --> 00:09:42,120
arguments like Rex and ID

198
00:09:42,120 --> 00:09:44,580
the first parameters of X is actually so

199
00:09:44,580 --> 00:09:47,300
the Cisco arguments and in second

200
00:09:47,300 --> 00:09:50,640
parameters ID actually is the Cisco

201
00:09:50,640 --> 00:09:51,660
number

202
00:09:51,660 --> 00:09:54,060
the first point has a low overhead for

203
00:09:54,060 --> 00:09:57,180
system for consumption but it only

204
00:09:57,180 --> 00:10:00,620
provides static insertion

205
00:10:01,560 --> 00:10:04,080
so um in this case we can also use the

206
00:10:04,080 --> 00:10:07,860
dynamic like open like paper using hey

207
00:10:07,860 --> 00:10:10,140
Pro you can register to treat the

208
00:10:10,140 --> 00:10:12,060
program or almost any instructions for

209
00:10:12,060 --> 00:10:14,160
an accessible pricing

210
00:10:14,160 --> 00:10:17,100
so when the instruction gets you hit the

211
00:10:17,100 --> 00:10:19,860
tracing program will be triggered

212
00:10:19,860 --> 00:10:22,500
so okay Pro is a dynamic approach we

213
00:10:22,500 --> 00:10:25,380
provide more disadvantages but it

214
00:10:25,380 --> 00:10:27,899
compared to the trace point is kind of

215
00:10:27,899 --> 00:10:30,300
slow and also we need to know how the

216
00:10:30,300 --> 00:10:32,220
data is stored in the stack and register

217
00:10:32,220 --> 00:10:34,620
in order to get the existing of

218
00:10:34,620 --> 00:10:38,420
information like arguments and so on

219
00:10:39,420 --> 00:10:42,360
so um Pinterest is a system core in the

220
00:10:42,360 --> 00:10:45,240
Linux you can use the key Trace to

221
00:10:45,240 --> 00:10:48,360
intercept the system hold in user space

222
00:10:48,360 --> 00:10:51,660
uh is a study hook same to the chest

223
00:10:51,660 --> 00:10:52,519
point

224
00:10:52,519 --> 00:10:55,560
you don't need to implement any kind of

225
00:10:55,560 --> 00:10:58,980
module or edpm progress and only the

226
00:10:58,980 --> 00:11:01,920
user space program as is needed

227
00:11:01,920 --> 00:11:04,220
compared to the previous two approach

228
00:11:04,220 --> 00:11:06,720
p-trace is very slow

229
00:11:06,720 --> 00:11:09,839
and but for optimization you can combine

230
00:11:09,839 --> 00:11:12,120
with the circle as the Cisco filtering

231
00:11:12,120 --> 00:11:14,880
to reduce the overhead

232
00:11:14,880 --> 00:11:16,800
so there are also another place of the

233
00:11:16,800 --> 00:11:18,300
system called intersection mechanism

234
00:11:18,300 --> 00:11:21,540
like the auditory load this approach is

235
00:11:21,540 --> 00:11:23,760
very efficient but it's also very easy

236
00:11:23,760 --> 00:11:26,339
to bypass for instance you then treat

237
00:11:26,339 --> 00:11:30,620
your assistant call slowly assembly code

238
00:11:31,800 --> 00:11:33,120
um so many of you have probably heard

239
00:11:33,120 --> 00:11:35,160
about the uh workload protection

240
00:11:35,160 --> 00:11:37,740
products and this product usually

241
00:11:37,740 --> 00:11:39,899
provide Advanced spread infection based

242
00:11:39,899 --> 00:11:41,420
on Cisco tracing

243
00:11:41,420 --> 00:11:44,220
so actually there's data entices of the

244
00:11:44,220 --> 00:11:45,420
cloud workloads like and virtual

245
00:11:45,420 --> 00:11:49,200
machines and containers that run it on

246
00:11:49,200 --> 00:11:52,019
the customer major VM and service

247
00:11:52,019 --> 00:11:53,760
containers they have also the others

248
00:11:53,760 --> 00:11:56,220
like AWS lambdas

249
00:11:56,220 --> 00:11:58,260
one thing I need to mention is for the

250
00:11:58,260 --> 00:12:00,720
service containers it usually allocate

251
00:12:00,720 --> 00:12:01,800
and maintain

252
00:12:01,800 --> 00:12:04,860
by the Cooperators so it usually have no

253
00:12:04,860 --> 00:12:07,700
access to the host

254
00:12:09,660 --> 00:12:13,040
so um this table summarized how we can

255
00:12:13,040 --> 00:12:15,899
use the system for tracing to protect

256
00:12:15,899 --> 00:12:18,839
the cloud workloads so for virtual

257
00:12:18,839 --> 00:12:21,120
machines usually you will have they have

258
00:12:21,120 --> 00:12:23,519
a full accessory host so we can use any

259
00:12:23,519 --> 00:12:25,260
kinds of the hooks like twist Point

260
00:12:25,260 --> 00:12:28,680
payroll key trace and we can implement

261
00:12:28,680 --> 00:12:30,420
the interesting program in the kernel

262
00:12:30,420 --> 00:12:33,720
and also in computer space

263
00:12:33,720 --> 00:12:37,500
you can use different tools to trace the

264
00:12:37,500 --> 00:12:40,800
system called like track or ETF kind of

265
00:12:40,800 --> 00:12:43,320
module and also paropatic

266
00:12:43,320 --> 00:12:46,139
I will talk about this Google statement

267
00:12:46,139 --> 00:12:50,160
and for the VM on the custom management

268
00:12:50,160 --> 00:12:52,019
you can have the same options as the

269
00:12:52,019 --> 00:12:54,360
virtual machine as long as we get enough

270
00:12:54,360 --> 00:12:57,240
helping it's like assist at the mean or

271
00:12:57,240 --> 00:12:59,220
since PDF

272
00:12:59,220 --> 00:13:01,860
so for service containers

273
00:13:01,860 --> 00:13:03,899
um as we mentioned you have no access to

274
00:13:03,899 --> 00:13:06,779
the host so the kernel instrumentation

275
00:13:06,779 --> 00:13:08,519
is not possible

276
00:13:08,519 --> 00:13:10,560
so you can only use the key tricks as

277
00:13:10,560 --> 00:13:13,079
token point and implement the tracing

278
00:13:13,079 --> 00:13:16,380
programs in the user space

279
00:13:16,380 --> 00:13:18,120
um the tools you can use is only an

280
00:13:18,120 --> 00:13:21,440
image to the micropedic

281
00:13:22,680 --> 00:13:25,200
so far call is an open source project

282
00:13:25,200 --> 00:13:30,120
and it's the original created by System

283
00:13:30,120 --> 00:13:33,000
it's a cmcf project and right now it's

284
00:13:33,000 --> 00:13:33,959
very popular

285
00:13:33,959 --> 00:13:37,260
so in a kernel is support kernel module

286
00:13:37,260 --> 00:13:40,139
and edu programs based on that choice

287
00:13:40,139 --> 00:13:41,160
point

288
00:13:41,160 --> 00:13:43,440
and in your space

289
00:13:43,440 --> 00:13:45,660
um the P data is delivered based on

290
00:13:45,660 --> 00:13:47,160
switch face

291
00:13:47,160 --> 00:13:50,700
so faculty is dedicated for the Cisco

292
00:13:50,700 --> 00:13:56,000
tracing for the service workloads

293
00:13:56,300 --> 00:13:59,579
so um did not evaluate other security

294
00:13:59,579 --> 00:14:02,339
monitoring tools but we believed the

295
00:14:02,339 --> 00:14:05,279
probability of buckle actually represent

296
00:14:05,279 --> 00:14:07,260
an implementation that is widely

297
00:14:07,260 --> 00:14:10,519
accepted by the community

298
00:14:10,519 --> 00:14:13,380
unfortunately this kind of even patients

299
00:14:13,380 --> 00:14:15,839
suffered the total issue

300
00:14:15,839 --> 00:14:17,940
so let's take a connection code for

301
00:14:17,940 --> 00:14:18,779
example

302
00:14:18,779 --> 00:14:21,420
the second Arguments for this circle is

303
00:14:21,420 --> 00:14:22,459
called the

304
00:14:22,459 --> 00:14:25,800
user V address which is the user pointer

305
00:14:25,800 --> 00:14:29,339
pointing to the user buffer or in this

306
00:14:29,339 --> 00:14:32,100
space so it's actually the sort the

307
00:14:32,100 --> 00:14:33,060
address

308
00:14:33,060 --> 00:14:35,040
so during final check

309
00:14:35,040 --> 00:14:37,380
the trace program trying to reference

310
00:14:37,380 --> 00:14:39,360
this used pointer to get the stock

311
00:14:39,360 --> 00:14:40,620
address

312
00:14:40,620 --> 00:14:43,380
at the same time during time we use the

313
00:14:43,380 --> 00:14:46,320
kernel May developer the same use of

314
00:14:46,320 --> 00:14:48,660
Hardware to get the subject address

315
00:14:48,660 --> 00:14:51,000
but between time or check and time of

316
00:14:51,000 --> 00:14:52,139
use

317
00:14:52,139 --> 00:14:54,360
the attacker can actually change the

318
00:14:54,360 --> 00:14:57,660
user level to make the hardware check

319
00:14:57,660 --> 00:14:59,639
and entire news difference so that

320
00:14:59,639 --> 00:15:02,899
you're causing a total issue

321
00:15:03,300 --> 00:15:05,579
so um let's say the organization code

322
00:15:05,579 --> 00:15:07,800
for example um this hopefully can help

323
00:15:07,800 --> 00:15:10,019
you understand how the autonomic issue

324
00:15:10,019 --> 00:15:12,839
exists in seasonal tracing

325
00:15:12,839 --> 00:15:15,060
so running application issue the connect

326
00:15:15,060 --> 00:15:16,920
system called the kernel

327
00:15:16,920 --> 00:15:19,920
executed

328
00:15:20,399 --> 00:15:23,579
and equino first to check if any tracing

329
00:15:23,579 --> 00:15:25,560
program attached to the static hook a

330
00:15:25,560 --> 00:15:29,220
system called enter like g-trace and uh

331
00:15:29,220 --> 00:15:31,320
system and adjust point

332
00:15:31,320 --> 00:15:34,139
and if it is true as you mentioned the

333
00:15:34,139 --> 00:15:38,300
attention program will be triggered

334
00:15:38,940 --> 00:15:42,300
so after that the current of your look

335
00:15:42,300 --> 00:15:44,040
at the Cisco table and jump to the

336
00:15:44,040 --> 00:15:46,560
analysis Accord trying to create a

337
00:15:46,560 --> 00:15:49,638
connection on a socket

338
00:15:49,820 --> 00:15:52,620
before the criminal return to the user

339
00:15:52,620 --> 00:15:53,639
space

340
00:15:53,639 --> 00:15:56,160
and it kind of will again check if any

341
00:15:56,160 --> 00:15:59,160
tracing program attached to these six

342
00:15:59,160 --> 00:16:04,740
acid hope like uh each race and 6x3.

343
00:16:04,740 --> 00:16:07,320
similar as the assistant enter if any

344
00:16:07,320 --> 00:16:09,300
interesting program is actually deployed

345
00:16:09,300 --> 00:16:12,680
very bigger as students

346
00:16:13,740 --> 00:16:16,380
so the as I mentioned earlier the second

347
00:16:16,380 --> 00:16:18,000
argument of what we can necessarily call

348
00:16:18,000 --> 00:16:21,360
is user pointer so this pointer will

349
00:16:21,360 --> 00:16:24,240
pass through the open accession called

350
00:16:24,240 --> 00:16:27,300
comes and assigned to different model

351
00:16:27,300 --> 00:16:30,060
variables which is highlighted in red

352
00:16:30,060 --> 00:16:32,899
foreign

353
00:16:34,339 --> 00:16:37,380
function move address to Gradle to copy

354
00:16:37,380 --> 00:16:40,620
the user buffer to the chronography and

355
00:16:40,620 --> 00:16:42,839
the chronographer is for address which

356
00:16:42,839 --> 00:16:45,980
is highlighted in green

357
00:16:47,279 --> 00:16:49,259
then because of real quality internal

358
00:16:49,259 --> 00:16:51,959
function says connect file to create a

359
00:16:51,959 --> 00:16:53,459
connection at the startup

360
00:16:53,459 --> 00:16:56,519
and this time of used by the kernel to

361
00:16:56,519 --> 00:16:59,880
use the stock address to create the

362
00:16:59,880 --> 00:17:02,360
connection

363
00:17:03,180 --> 00:17:07,140
before the memory combination so um

364
00:17:07,140 --> 00:17:08,819
you know the chronographer is not

365
00:17:08,819 --> 00:17:09,720
created

366
00:17:09,720 --> 00:17:12,240
so the user pointer is the common base

367
00:17:12,240 --> 00:17:15,179
to access the stock address from the

368
00:17:15,179 --> 00:17:17,600
user space

369
00:17:18,059 --> 00:17:20,220
in this case if you attach the tracing

370
00:17:20,220 --> 00:17:23,699
program to the study book like P trace

371
00:17:23,699 --> 00:17:26,040
or system address point

372
00:17:26,040 --> 00:17:29,220
or even use the phrase to select the

373
00:17:29,220 --> 00:17:31,440
paper to attach a tracing program to any

374
00:17:31,440 --> 00:17:34,140
instructions before Dynamic function

375
00:17:34,140 --> 00:17:37,799
you tracing program have to use the user

376
00:17:37,799 --> 00:17:40,799
function into the reference the use of

377
00:17:40,799 --> 00:17:42,860
this uh user pattern

378
00:17:42,860 --> 00:17:45,240
so again as I mentioned in user

379
00:17:45,240 --> 00:17:47,760
background is valuable to be changed by

380
00:17:47,760 --> 00:17:51,140
the attacker in user space

381
00:17:51,660 --> 00:17:54,120
and after the endemic copy function

382
00:17:54,120 --> 00:17:57,120
incredible buffer is created

383
00:17:57,120 --> 00:17:59,820
but unfortunately the public issue may

384
00:17:59,820 --> 00:18:02,880
still exist for example if we attach a

385
00:18:02,880 --> 00:18:05,880
tracing program to the sixth exit Trace

386
00:18:05,880 --> 00:18:07,860
point or the t-shirts kind of physical

387
00:18:07,860 --> 00:18:10,559
acidity the interesting program may

388
00:18:10,559 --> 00:18:12,780
still be reference to use operator to

389
00:18:12,780 --> 00:18:15,740
get and stop the address

390
00:18:16,679 --> 00:18:19,740
so flag of ptake use the key trace for

391
00:18:19,740 --> 00:18:22,860
both the assistant called enter and exit

392
00:18:22,860 --> 00:18:26,220
but you only use the second to filter in

393
00:18:26,220 --> 00:18:28,679
the system call because this mechanism

394
00:18:28,679 --> 00:18:30,900
is only available for system called

395
00:18:30,900 --> 00:18:32,580
enter

396
00:18:32,580 --> 00:18:37,799
ocol version other than 0.31.1 the

397
00:18:37,799 --> 00:18:41,039
kernel module and EDP implementation are

398
00:18:41,039 --> 00:18:44,400
based on 6X Express point

399
00:18:44,400 --> 00:18:47,100
so um hopefully you get some idea about

400
00:18:47,100 --> 00:18:50,220
the important issue for Cisco Trading

401
00:18:50,220 --> 00:18:52,620
and install score level so I will head

402
00:18:52,620 --> 00:18:54,000
over to Rex to talk about the

403
00:18:54,000 --> 00:18:57,980
availabilities and how to exploit

404
00:19:02,039 --> 00:19:03,480
okay so

405
00:19:03,480 --> 00:19:06,240
um first thing is you know whatever we

406
00:19:06,240 --> 00:19:08,880
think about this kind of issue we look

407
00:19:08,880 --> 00:19:11,460
at is this a general issue so basically

408
00:19:11,460 --> 00:19:13,740
this problem is this

409
00:19:13,740 --> 00:19:16,980
across Linux kernels it seems the trace

410
00:19:16,980 --> 00:19:20,460
Point first introduced so all links

411
00:19:20,460 --> 00:19:22,160
kernel has the same

412
00:19:22,160 --> 00:19:24,960
characteristic I would say for both

413
00:19:24,960 --> 00:19:28,039
transplant and features

414
00:19:28,200 --> 00:19:30,900
um when we first reported this back to

415
00:19:30,900 --> 00:19:32,520
buckle

416
00:19:32,520 --> 00:19:35,580
um it was a discussion about whether

417
00:19:35,580 --> 00:19:38,039
this is an issue in kernel or is in the

418
00:19:38,039 --> 00:19:41,419
issue industry is offered

419
00:19:42,020 --> 00:19:44,340
developer on these features and they say

420
00:19:44,340 --> 00:19:46,200
no this is not our problem

421
00:19:46,200 --> 00:19:49,080
because there's gonna be originally

422
00:19:49,080 --> 00:19:51,059
designed for performance and debugging

423
00:19:51,059 --> 00:19:55,559
and this thread is not being considered

424
00:19:55,559 --> 00:19:58,559
so then the responsibility shift to

425
00:19:58,559 --> 00:20:00,960
the stock security software actually

426
00:20:00,960 --> 00:20:02,120
continue to

427
00:20:02,120 --> 00:20:05,460
monitor these system calls in a secure

428
00:20:05,460 --> 00:20:08,880
way the recommendation is always belong

429
00:20:08,880 --> 00:20:10,559
to the kernel memory instead of the

430
00:20:10,559 --> 00:20:12,480
user's baby

431
00:20:12,480 --> 00:20:15,120
it's not very simple but typically you

432
00:20:15,120 --> 00:20:18,739
will see how compacted this is

433
00:20:19,260 --> 00:20:20,760
um so before I dive into a further

434
00:20:20,760 --> 00:20:23,520
technical details first one to go

435
00:20:23,520 --> 00:20:25,260
through sort of that's a scholar story

436
00:20:25,260 --> 00:20:27,840
uh very quickly

437
00:20:27,840 --> 00:20:30,720
um and it's very fun uh only first this

438
00:20:30,720 --> 00:20:35,580
called this was uh April in 2021 and we

439
00:20:35,580 --> 00:20:37,740
have our first version of the exploit

440
00:20:37,740 --> 00:20:39,960
which we'll talk about really quickly

441
00:20:39,960 --> 00:20:42,000
that can compromise any sort of system

442
00:20:42,000 --> 00:20:45,020
called any system called this game

443
00:20:45,020 --> 00:20:47,940
The Faculty has been pretty good um the

444
00:20:47,940 --> 00:20:49,860
response you know very quickly they fix

445
00:20:49,860 --> 00:20:52,679
the issue what's interesting about this

446
00:20:52,679 --> 00:20:55,799
initial response is

447
00:20:55,799 --> 00:20:58,440
um because of a specific exploitation

448
00:20:58,440 --> 00:21:01,080
primitive we use that's called user

449
00:21:01,080 --> 00:21:02,820
product basis and call

450
00:21:02,820 --> 00:21:05,400
and that system call is

451
00:21:05,400 --> 00:21:09,059
blocked by a Docker second profile by

452
00:21:09,059 --> 00:21:10,260
default

453
00:21:10,260 --> 00:21:12,539
so if you have darker second profile by

454
00:21:12,539 --> 00:21:14,340
default and you're only running

455
00:21:14,340 --> 00:21:17,760
containers then you're not you're immune

456
00:21:17,760 --> 00:21:21,919
to that particular type of expert and so

457
00:21:21,919 --> 00:21:25,799
they fixed in the way that they say okay

458
00:21:25,799 --> 00:21:27,900
we're going to detect the usage of and

459
00:21:27,900 --> 00:21:29,120
look forward

460
00:21:29,120 --> 00:21:32,580
and if we see that around its individual

461
00:21:32,580 --> 00:21:36,439
it's not going to exploit attempts

462
00:21:37,080 --> 00:21:41,299
notice that it's a detection

463
00:21:41,360 --> 00:21:46,100
which we'll see what happens next

464
00:21:46,260 --> 00:21:48,840
um this is also 2021 we also evaluate

465
00:21:48,840 --> 00:21:51,600
the next EC uh treatment for another

466
00:21:51,600 --> 00:21:53,820
very popular open source monitoring

467
00:21:53,820 --> 00:21:56,760
solution same issue

468
00:21:56,760 --> 00:21:59,580
um except uh it's called your process is

469
00:21:59,580 --> 00:22:01,200
a little bit interesting

470
00:22:01,200 --> 00:22:02,580
um they basically say oh we know the

471
00:22:02,580 --> 00:22:06,199
issue and therefore there's no issue

472
00:22:06,419 --> 00:22:08,580
you know I have certain things to do

473
00:22:08,580 --> 00:22:12,120
that in the past but anyway

474
00:22:12,120 --> 00:22:16,679
so fast forward to December 2021

475
00:22:16,679 --> 00:22:19,440
um after we publish our first you know

476
00:22:19,440 --> 00:22:22,919
exploit we you know give a talker.com

477
00:22:22,919 --> 00:22:25,260
and we think about hey are we actually

478
00:22:25,260 --> 00:22:27,539
improve those exploits such that it

479
00:22:27,539 --> 00:22:30,059
doesn't use user party

480
00:22:30,059 --> 00:22:32,100
um it seems pretty impossible at the

481
00:22:32,100 --> 00:22:34,140
time but we'll show you how it is

482
00:22:34,140 --> 00:22:35,419
possible

483
00:22:35,419 --> 00:22:38,480
and that was important the new exploit

484
00:22:38,480 --> 00:22:40,080
now

485
00:22:40,080 --> 00:22:43,620
alcohol has to actually fix the issue in

486
00:22:43,620 --> 00:22:45,120
a way that

487
00:22:45,120 --> 00:22:47,400
we'll talk about text but get some more

488
00:22:47,400 --> 00:22:49,740
powerful effects the basically do a

489
00:22:49,740 --> 00:22:51,120
double check

490
00:22:51,120 --> 00:22:54,918
what's the salary and also says X

491
00:22:55,440 --> 00:22:57,179
um in terms of how to visit the problem

492
00:22:57,179 --> 00:22:59,400
is basically look at all the local

493
00:22:59,400 --> 00:23:01,980
groups and you know most of them are

494
00:23:01,980 --> 00:23:06,620
available to also if I were a person

495
00:23:07,080 --> 00:23:10,320
okay let's uh finally talk about how to

496
00:23:10,320 --> 00:23:13,380
exploit this particular issue I hope the

497
00:23:13,380 --> 00:23:14,940
issue is very clear to everybody it's

498
00:23:14,940 --> 00:23:16,020
not very difficult to understand

499
00:23:16,020 --> 00:23:20,039
basically I'm running this to some call

500
00:23:20,039 --> 00:23:22,860
and then the kernels will fetch the user

501
00:23:22,860 --> 00:23:25,440
space memory and then the tracing

502
00:23:25,440 --> 00:23:27,419
software is going to patch you again but

503
00:23:27,419 --> 00:23:29,640
that user space memory can be changed

504
00:23:29,640 --> 00:23:31,860
between these two patches okay

505
00:23:31,860 --> 00:23:32,940
issues are hard to understand

506
00:23:32,940 --> 00:23:35,520
exploitative

507
00:23:35,520 --> 00:23:36,960
um

508
00:23:36,960 --> 00:23:39,179
now let's think about exploitation

509
00:23:39,179 --> 00:23:40,799
requirement

510
00:23:40,799 --> 00:23:42,600
um first of all we don't want to develop

511
00:23:42,600 --> 00:23:44,820
a village or capabilities right because

512
00:23:44,820 --> 00:23:47,159
if you can acquire data

513
00:23:47,159 --> 00:23:49,140
you may just delete the whole model to

514
00:23:49,140 --> 00:23:51,360
the software So Right There are rules

515
00:23:51,360 --> 00:23:53,400
you can do many things like problems and

516
00:23:53,400 --> 00:23:54,200
tricks

517
00:23:54,200 --> 00:23:56,760
so we're assuming like minimum privilege

518
00:23:56,760 --> 00:23:59,039
the attacker doesn't go in through our

519
00:23:59,039 --> 00:24:01,620
CE with minimum probability user and

520
00:24:01,620 --> 00:24:04,320
still be able to buy thousands

521
00:24:04,320 --> 00:24:06,360
uh we want to be able to control the

522
00:24:06,360 --> 00:24:08,820
time to interact with example

523
00:24:08,820 --> 00:24:11,940
the delay also have to be enough such

524
00:24:11,940 --> 00:24:13,919
that we can override that

525
00:24:13,919 --> 00:24:17,280
at that pointer also needs to be able to

526
00:24:17,280 --> 00:24:19,140
propagated to the entire system because

527
00:24:19,140 --> 00:24:20,760
we're talking about multiple systems

528
00:24:20,760 --> 00:24:22,679
we're talking about multiple threats

529
00:24:22,679 --> 00:24:25,200
asynchronously writing the same memory

530
00:24:25,200 --> 00:24:26,360
right

531
00:24:26,360 --> 00:24:29,360
lastly we want this to be 100 reliable

532
00:24:29,360 --> 00:24:32,039
we don't want this to be a one-off you

533
00:24:32,039 --> 00:24:34,020
know let's say I want this 50 of times

534
00:24:34,020 --> 00:24:37,140
60 no no or bypass exposure has to be

535
00:24:37,140 --> 00:24:39,539
100 reliable

536
00:24:39,539 --> 00:24:43,500
I could run it to a dollar damage but

537
00:24:43,500 --> 00:24:46,260
uh I will have to build it always with

538
00:24:46,260 --> 00:24:48,720
architecture we're going to be tempted

539
00:24:48,720 --> 00:24:50,220
okay so this is our high level

540
00:24:50,220 --> 00:24:52,380
requirements

541
00:24:52,380 --> 00:24:56,100
um let's think about uh strategy number

542
00:24:56,100 --> 00:24:57,059
one

543
00:24:57,059 --> 00:24:59,460
so here's what we want to do we want to

544
00:24:59,460 --> 00:25:01,140
trigger this

545
00:25:01,140 --> 00:25:03,120
you know let's take a particular system

546
00:25:03,120 --> 00:25:04,679
call and then we'll trigger with a

547
00:25:04,679 --> 00:25:06,179
malicious argument

548
00:25:06,179 --> 00:25:07,919
and then the kernel will read this

549
00:25:07,919 --> 00:25:10,559
malicious arguments and then perform a

550
00:25:10,559 --> 00:25:12,299
malicious action

551
00:25:12,299 --> 00:25:14,159
and then we'll override the data

552
00:25:14,159 --> 00:25:16,080
structure

553
00:25:16,080 --> 00:25:18,659
and then the access was basically

554
00:25:18,659 --> 00:25:21,240
populous is actually this one and the

555
00:25:21,240 --> 00:25:22,740
streaking program will read the data

556
00:25:22,740 --> 00:25:24,240
structure

557
00:25:24,240 --> 00:25:26,760
be referenced by the pointer and we

558
00:25:26,760 --> 00:25:28,799
already changed that right so it's going

559
00:25:28,799 --> 00:25:30,720
to be the wrong way okay but there are

560
00:25:30,720 --> 00:25:32,760
different challenges here uh how do we

561
00:25:32,760 --> 00:25:34,440
know when the kernels threat read the

562
00:25:34,440 --> 00:25:35,580
argument

563
00:25:35,580 --> 00:25:39,240
this can be done very easily yeah uh how

564
00:25:39,240 --> 00:25:41,340
can we synchronize this override with

565
00:25:41,340 --> 00:25:45,179
the kernels where we and uh I have to

566
00:25:45,179 --> 00:25:48,539
force a big enough using window

567
00:25:48,539 --> 00:25:52,020
um let's talk about this one

568
00:25:52,020 --> 00:25:54,720
first primitive we have to use uh in the

569
00:25:54,720 --> 00:25:56,580
first exploit is you look for the

570
00:25:56,580 --> 00:25:58,440
assistant call

571
00:25:58,440 --> 00:26:00,000
um there's a logistics one called by the

572
00:26:00,000 --> 00:26:03,000
weightline it's used by the KVM I

573
00:26:03,000 --> 00:26:05,700
believe a bunch of other hypervisor or

574
00:26:05,700 --> 00:26:07,020
Technologies

575
00:26:07,020 --> 00:26:09,419
um the reason that this exists is let me

576
00:26:09,419 --> 00:26:11,880
talk about what it does so whatever you

577
00:26:11,880 --> 00:26:14,220
have a page for in the memory typically

578
00:26:14,220 --> 00:26:16,620
the trigger like curveball execution but

579
00:26:16,620 --> 00:26:18,179
what this system call does is you can

580
00:26:18,179 --> 00:26:21,179
register a user thread so say hey when

581
00:26:21,179 --> 00:26:23,340
you have a kernel okay sorry when you

582
00:26:23,340 --> 00:26:25,080
have a memory page called

583
00:26:25,080 --> 00:26:26,580
I don't know please transfer control

584
00:26:26,580 --> 00:26:28,320
back to the real estate the user space

585
00:26:28,320 --> 00:26:30,059
will handle automatic management yes

586
00:26:30,059 --> 00:26:32,400
this is very very useful by the way this

587
00:26:32,400 --> 00:26:34,860
is for distributed system right but you

588
00:26:34,860 --> 00:26:38,220
have a distributed system your memory is

589
00:26:38,220 --> 00:26:39,960
managed by this in the distributed way

590
00:26:39,960 --> 00:26:42,539
so you want your user Space Program to

591
00:26:42,539 --> 00:26:44,820
manage then they go right so they handle

592
00:26:44,820 --> 00:26:46,320
back to the memory Management's

593
00:26:46,320 --> 00:26:48,120
operating user base it's going to manage

594
00:26:48,120 --> 00:26:51,379
across the distributed system

595
00:26:52,980 --> 00:26:55,559
um the next uh sort of exploit the

596
00:26:55,559 --> 00:26:58,100
material use is interrupt and scheduling

597
00:26:58,100 --> 00:27:00,539
an interrupt or talk about process

598
00:27:00,539 --> 00:27:03,299
whatever interact a notify a processor

599
00:27:03,299 --> 00:27:04,559
when an event

600
00:27:04,559 --> 00:27:08,400
uh require immediate detection and

601
00:27:08,400 --> 00:27:11,159
whatever you have interrupt the CPU

602
00:27:11,159 --> 00:27:12,779
typically you know for transfer control

603
00:27:12,779 --> 00:27:15,840
to the interrupt Handler

604
00:27:15,840 --> 00:27:18,299
um what's very interesting is interop

605
00:27:18,299 --> 00:27:20,700
can be triggered indirectly from system

606
00:27:20,700 --> 00:27:23,940
costs and there's a specific type of

607
00:27:23,940 --> 00:27:25,500
things where I've called cross-core

608
00:27:25,500 --> 00:27:28,620
integral which is going to be very

609
00:27:28,620 --> 00:27:30,080
important

610
00:27:30,080 --> 00:27:32,460
you can trigger this kind of cross-core

611
00:27:32,460 --> 00:27:35,460
interlock by typically two ways one is

612
00:27:35,460 --> 00:27:37,679
hot range one so typically when you have

613
00:27:37,679 --> 00:27:40,140
a computer there's some packet coming in

614
00:27:40,140 --> 00:27:42,419
there is typically a one CPU and that's

615
00:27:42,419 --> 00:27:45,000
responsible for handling that still

616
00:27:45,000 --> 00:27:48,240
putting our internal security

617
00:27:48,240 --> 00:27:51,240
foreign

618
00:27:58,530 --> 00:28:00,559
[Music]

619
00:28:00,559 --> 00:28:03,600
using memory management system costs

620
00:28:03,600 --> 00:28:04,860
like amp project

621
00:28:04,860 --> 00:28:07,080
right so every CPU have translation

622
00:28:07,080 --> 00:28:09,720
local local side Barbers like hash ee

623
00:28:09,720 --> 00:28:12,419
memory pages and recognitions

624
00:28:12,419 --> 00:28:15,000
now if one CPU Say Hey I want to flip

625
00:28:15,000 --> 00:28:16,559
with memory page permission then

626
00:28:16,559 --> 00:28:17,640
obviously if you will need to get

627
00:28:17,640 --> 00:28:19,080
notified of that that's why we trigger

628
00:28:19,080 --> 00:28:20,720
the cross-calling to it

629
00:28:20,720 --> 00:28:24,980
okay next let's talk about scheduling

630
00:28:24,980 --> 00:28:28,500
so these are user space API sketch says

631
00:28:28,500 --> 00:28:30,240
scheduler any any new user space

632
00:28:30,240 --> 00:28:32,059
programming copies

633
00:28:32,059 --> 00:28:36,200
of course if you want to do a real-time

634
00:28:36,200 --> 00:28:38,460
scheduling you need some additional

635
00:28:38,460 --> 00:28:41,340
capability

636
00:28:41,340 --> 00:28:45,360
last one is scan set Affinity uh this is

637
00:28:45,360 --> 00:28:47,400
also very common if you want to bring a

638
00:28:47,400 --> 00:28:51,860
specific thread to a specificity

639
00:28:53,940 --> 00:28:56,760
okay so you guys ready for the actual

640
00:28:56,760 --> 00:28:59,419
explosion

641
00:29:02,460 --> 00:29:04,140
um let's first look at this is a very

642
00:29:04,140 --> 00:29:05,700
complicated to understand so let me go

643
00:29:05,700 --> 00:29:07,260
with a solution let's first look at the

644
00:29:07,260 --> 00:29:10,559
this side this side let's first look at

645
00:29:10,559 --> 00:29:14,100
our code our goal is to

646
00:29:14,100 --> 00:29:16,679
open up malicious file

647
00:29:16,679 --> 00:29:18,539
using over that

648
00:29:18,539 --> 00:29:20,820
so

649
00:29:20,820 --> 00:29:22,919
um first this file name is going to

650
00:29:22,919 --> 00:29:24,419
point forward for each

651
00:29:24,419 --> 00:29:27,120
that is

652
00:29:27,120 --> 00:29:30,539
okay and our goal is to say later we're

653
00:29:30,539 --> 00:29:31,799
going to write it with some malicious

654
00:29:31,799 --> 00:29:34,860
content Colonel reader

655
00:29:34,860 --> 00:29:37,260
and then we're going to override it and

656
00:29:37,260 --> 00:29:39,840
then with this software read it

657
00:29:39,840 --> 00:29:41,760
it doesn't detect because the override

658
00:29:41,760 --> 00:29:44,600
with something that we'll think

659
00:29:44,600 --> 00:29:46,980
of right

660
00:29:46,980 --> 00:29:50,279
um now to set that up we need the

661
00:29:50,279 --> 00:29:53,039
orchestra to do that we need two three

662
00:29:53,039 --> 00:29:54,960
different threads we need a main thread

663
00:29:54,960 --> 00:29:56,940
the main thread is going to begin itself

664
00:29:56,940 --> 00:29:59,820
to some CPU let's say it used to it

665
00:29:59,820 --> 00:30:02,100
let's say

666
00:30:02,100 --> 00:30:04,140
uh yeah

667
00:30:04,140 --> 00:30:06,480
and then it's going to then map this

668
00:30:06,480 --> 00:30:07,740
page

669
00:30:07,740 --> 00:30:09,659
uh there's no allocation it doesn't

670
00:30:09,659 --> 00:30:10,740
matter

671
00:30:10,740 --> 00:30:13,020
it's going to register a user for a b

672
00:30:13,020 --> 00:30:15,480
thread so user part describes the second

673
00:30:15,480 --> 00:30:17,520
line in the middle it can be on any CPU

674
00:30:17,520 --> 00:30:19,140
it doesn't matter

675
00:30:19,140 --> 00:30:20,460
and then

676
00:30:20,460 --> 00:30:22,140
um we're also opening this on an

677
00:30:22,140 --> 00:30:24,120
override thread we're going to be into a

678
00:30:24,120 --> 00:30:26,220
different CPU because later this

679
00:30:26,220 --> 00:30:27,659
override spread guide is going to

680
00:30:27,659 --> 00:30:29,539
trigger into the process in production

681
00:30:29,539 --> 00:30:35,039
so they can be on the same CPU foreign

682
00:30:42,919 --> 00:30:46,020
act with some filing according to Major

683
00:30:46,020 --> 00:30:47,419
okay

684
00:30:47,419 --> 00:30:50,460
so kernel will took a baseball because

685
00:30:50,460 --> 00:30:52,679
it's not out of it

686
00:30:52,679 --> 00:30:54,600
what happened when the pH part happened

687
00:30:54,600 --> 00:30:56,820
it said okay go go back to the user

688
00:30:56,820 --> 00:30:59,760
space right please handle the Facebook

689
00:30:59,760 --> 00:31:02,159
so user space where I will say oh let me

690
00:31:02,159 --> 00:31:04,500
write it with the malicious

691
00:31:04,500 --> 00:31:07,640
take this motherhood

692
00:31:08,760 --> 00:31:11,820
um release the conditional new tax now

693
00:31:11,820 --> 00:31:13,500
the override spread will start writing

694
00:31:13,500 --> 00:31:16,260
b90 very quickly right

695
00:31:16,260 --> 00:31:18,179
at the same time this overlaps around

696
00:31:18,179 --> 00:31:20,340
the user Quest is amazing against each

697
00:31:20,340 --> 00:31:22,919
other but the user quality will be much

698
00:31:22,919 --> 00:31:24,840
faster we will release the conditioning

699
00:31:24,840 --> 00:31:28,919
attacks we turn the execute the kernels

700
00:31:28,919 --> 00:31:30,720
and also even the override thread

701
00:31:30,720 --> 00:31:33,659
override this content it's not going to

702
00:31:33,659 --> 00:31:35,580
immediately propagate without a CPU so

703
00:31:35,580 --> 00:31:37,620
not every CPU will see

704
00:31:37,620 --> 00:31:41,700
right so now you see on the left side

705
00:31:41,700 --> 00:31:43,320
um the kernel will do this call people

706
00:31:43,320 --> 00:31:45,059
User it's going to copy Dimension design

707
00:31:45,059 --> 00:31:48,720
start doing the actual job of the system

708
00:31:48,720 --> 00:31:51,059
and on the overrider I will do a memory

709
00:31:51,059 --> 00:31:53,880
consistency update uh this is CPU level

710
00:31:53,880 --> 00:31:55,399
prints

711
00:31:55,399 --> 00:31:58,799
instead of UCL brush flush the data from

712
00:31:58,799 --> 00:32:00,840
the cache to all the members

713
00:32:00,840 --> 00:32:03,240
this is what takes some time while this

714
00:32:03,240 --> 00:32:04,980
is taking time we're going to trigger

715
00:32:04,980 --> 00:32:06,679
this

716
00:32:06,679 --> 00:32:10,140
so CPU 2 is going to interrupt cpu3

717
00:32:10,140 --> 00:32:13,279
which increases

718
00:32:13,919 --> 00:32:16,620
um and then this window is picking up

719
00:32:16,620 --> 00:32:18,840
such that the memory consistent update

720
00:32:18,840 --> 00:32:21,059
will show up when the tracing program

721
00:32:21,059 --> 00:32:24,419
reads the Army and therefore I pass the

722
00:32:24,419 --> 00:32:26,899
body job

723
00:32:27,059 --> 00:32:31,340
see if you're not some confusing basis

724
00:32:38,580 --> 00:32:40,080
but yeah

725
00:32:40,080 --> 00:32:42,360
um let's revisit let's think about

726
00:32:42,360 --> 00:32:44,159
strategy number one I mean when we first

727
00:32:44,159 --> 00:32:46,260
discovered this you know we talked to

728
00:32:46,260 --> 00:32:48,779
many kernel people they were like super

729
00:32:48,779 --> 00:32:51,120
surprise you know this is impossible

730
00:32:51,120 --> 00:32:53,820
uh but when we discover exploit strategy

731
00:32:53,820 --> 00:32:55,380
number two

732
00:32:55,380 --> 00:32:57,419
we start thinking about you know what is

733
00:32:57,419 --> 00:32:58,980
the sort of assumption that we're using

734
00:32:58,980 --> 00:33:01,140
the explosivity level first of all we're

735
00:33:01,140 --> 00:33:02,940
rely on the fact that we're able to

736
00:33:02,940 --> 00:33:04,679
inject a delay

737
00:33:04,679 --> 00:33:07,140
it's big enough for the attack to

738
00:33:07,140 --> 00:33:08,640
succeed

739
00:33:08,640 --> 00:33:11,100
100 of the time

740
00:33:11,100 --> 00:33:14,179
but it's also relatively small

741
00:33:14,179 --> 00:33:17,039
you will understand what that means and

742
00:33:17,039 --> 00:33:19,200
it also rely on user quality

743
00:33:19,200 --> 00:33:21,360
that's why you know somebody say oh I'm

744
00:33:21,360 --> 00:33:22,799
going to have a detection in these

745
00:33:22,799 --> 00:33:25,320
things right how can we not use this

746
00:33:25,320 --> 00:33:27,539
system

747
00:33:27,539 --> 00:33:29,580
because that can't come by pass it

748
00:33:29,580 --> 00:33:31,500
somebody can argue oh I don't even have

749
00:33:31,500 --> 00:33:33,539
container workflows and my barcodes

750
00:33:33,539 --> 00:33:37,220
account profile to our governments

751
00:33:38,700 --> 00:33:41,820
now here's the big question what if what

752
00:33:41,820 --> 00:33:44,039
if we can interact with DNA that is

753
00:33:44,039 --> 00:33:46,620
order of magnitude larger than the

754
00:33:46,620 --> 00:33:49,200
system called execution time

755
00:33:49,200 --> 00:33:51,539
order magnitude right we don't need all

756
00:33:51,539 --> 00:33:53,220
these synchronization

757
00:33:53,220 --> 00:33:56,519
tricks it's automatically longer so just

758
00:33:56,519 --> 00:33:58,679
overwrite it trigger the delay it will

759
00:33:58,679 --> 00:34:00,480
show up because we don't need memory

760
00:34:00,480 --> 00:34:01,799
consistency update we don't need

761
00:34:01,799 --> 00:34:03,360
synchronization between current users

762
00:34:03,360 --> 00:34:04,380
yes right

763
00:34:04,380 --> 00:34:08,659
the question is how to do this

764
00:34:10,760 --> 00:34:12,659
interestingly

765
00:34:12,659 --> 00:34:14,339
um if you really really understand

766
00:34:14,339 --> 00:34:17,940
computer you will discover that

767
00:34:17,940 --> 00:34:19,980
many of the system calls that are

768
00:34:19,980 --> 00:34:21,599
performing critical functionality are

769
00:34:21,599 --> 00:34:23,760
actually blocking system costs we're

770
00:34:23,760 --> 00:34:26,040
walking in the sense that

771
00:34:26,040 --> 00:34:28,020
you know there's some type of blocking

772
00:34:28,020 --> 00:34:30,239
Department one is the standard working

773
00:34:30,239 --> 00:34:32,639
where system can say I am going to read

774
00:34:32,639 --> 00:34:35,000
a file

775
00:34:40,099 --> 00:34:42,899
any sort of very meaningful even

776
00:34:42,899 --> 00:34:44,820
different like memory management right

777
00:34:44,820 --> 00:34:46,619
but typically manual management resource

778
00:34:46,619 --> 00:34:48,179
people

779
00:34:48,179 --> 00:34:49,500
um

780
00:34:49,500 --> 00:34:51,540
so that's one category blocking the

781
00:34:51,540 --> 00:34:54,300
second category blocking is set up

782
00:34:54,300 --> 00:34:55,159
um

783
00:34:55,159 --> 00:34:58,440
second what that means is when like

784
00:34:58,440 --> 00:35:00,000
Junior earlier mentioned when you first

785
00:35:00,000 --> 00:35:01,619
come into the system call you're going

786
00:35:01,619 --> 00:35:04,580
to hit features you know hit second

787
00:35:04,580 --> 00:35:07,440
now second is a bunch of rules that

788
00:35:07,440 --> 00:35:09,540
program or program there's no limit on

789
00:35:09,540 --> 00:35:11,940
how many rules I mean yes there's a

790
00:35:11,940 --> 00:35:14,160
physical one that sets in the kernel but

791
00:35:14,160 --> 00:35:16,079
it's a really large you can program very

792
00:35:16,079 --> 00:35:17,599
many moves

793
00:35:17,599 --> 00:35:20,579
Computing through the resources politics

794
00:35:20,579 --> 00:35:22,440
are many many moves then it's going to

795
00:35:22,440 --> 00:35:24,480
increase the delay

796
00:35:24,480 --> 00:35:28,099
and we'll see how that is useful

797
00:35:28,440 --> 00:35:30,780
Okay so

798
00:35:30,780 --> 00:35:35,700
promise this exploit it's very hard to

799
00:35:35,700 --> 00:35:37,560
come up with but very easy to understand

800
00:35:37,560 --> 00:35:40,740
compared to the previous one

801
00:35:40,740 --> 00:35:42,800
um everybody who goes to a computer

802
00:35:42,800 --> 00:35:46,020
networking class in college must have

803
00:35:46,020 --> 00:35:48,720
you know know the same simac right

804
00:35:48,720 --> 00:35:50,880
between a client server but if you add

805
00:35:50,880 --> 00:35:53,040
in the system called context here right

806
00:35:53,040 --> 00:35:54,960
so you have a client let's say your

807
00:35:54,960 --> 00:35:58,579
client is running the security software

808
00:35:58,800 --> 00:36:01,020
um and then you also have a serving

809
00:36:01,020 --> 00:36:04,200
um Let me give a one additional context

810
00:36:04,200 --> 00:36:07,440
many times when a doctor compromise

811
00:36:07,440 --> 00:36:09,599
the machine

812
00:36:09,599 --> 00:36:11,400
they will do a few things right they'll

813
00:36:11,400 --> 00:36:14,040
try to produce to a lot of open but one

814
00:36:14,040 --> 00:36:15,900
important thing they try to do is talk

815
00:36:15,900 --> 00:36:17,220
to their command and control server

816
00:36:17,220 --> 00:36:21,599
which is control by the attacker

817
00:36:21,599 --> 00:36:22,560
um

818
00:36:22,560 --> 00:36:24,660
so let's imagine attacking compromise

819
00:36:24,660 --> 00:36:27,660
the client and it's a good controller

820
00:36:27,660 --> 00:36:28,800
server as well

821
00:36:28,800 --> 00:36:31,200
so attackers Say Hey I want to connect

822
00:36:31,200 --> 00:36:33,000
my computer control server I'm going to

823
00:36:33,000 --> 00:36:34,740
send a connects as we call right there's

824
00:36:34,740 --> 00:36:36,359
no way around it I have to set a

825
00:36:36,359 --> 00:36:37,619
connection

826
00:36:37,619 --> 00:36:39,420
there's the same practice Sunday from a

827
00:36:39,420 --> 00:36:42,180
current server server is found with CNN

828
00:36:42,180 --> 00:36:45,000
Wireless power back okay and then right

829
00:36:45,000 --> 00:36:47,460
after the ACT is being said system cover

830
00:36:47,460 --> 00:36:49,980
meter it will hit the return cable a

831
00:36:49,980 --> 00:36:51,180
certain Facebook

832
00:36:51,180 --> 00:36:54,379
and also features

833
00:36:54,599 --> 00:36:56,520
I think that's

834
00:36:56,520 --> 00:36:58,140
my Arabic goes in computer and

835
00:36:58,140 --> 00:36:59,640
everything's class probably understand

836
00:36:59,640 --> 00:37:01,619
this

837
00:37:01,619 --> 00:37:04,619
now let's add some ingredients right and

838
00:37:04,619 --> 00:37:07,760
see how it bypass this

839
00:37:08,099 --> 00:37:11,820
um same setup except on the trial now we

840
00:37:11,820 --> 00:37:13,320
have two thread

841
00:37:13,320 --> 00:37:16,260
right and first we're going to call the

842
00:37:16,260 --> 00:37:19,160
connect system call we're going to point

843
00:37:19,160 --> 00:37:22,020
the argument to the militia ID which is

844
00:37:22,020 --> 00:37:24,839
our Command and control server

845
00:37:24,839 --> 00:37:30,078
uh we also in this override thread right

846
00:37:30,420 --> 00:37:32,640
um now what happened to server jobs

847
00:37:32,640 --> 00:37:35,040
packet

848
00:37:35,040 --> 00:37:37,759
foreign

849
00:37:46,590 --> 00:37:49,859
[Music]

850
00:38:04,800 --> 00:38:07,380
uh the next free trial will come in like

851
00:38:07,380 --> 00:38:08,700
10 minutes

852
00:38:08,700 --> 00:38:12,359
time wrench system calling said hundreds

853
00:38:12,359 --> 00:38:16,440
to thousands of them Michael second

854
00:38:16,440 --> 00:38:18,480
and we're talking about minutes

855
00:38:18,480 --> 00:38:20,940
once you hear three retro

856
00:38:20,940 --> 00:38:23,220
that's a really really long delay could

857
00:38:23,220 --> 00:38:24,660
produce

858
00:38:24,660 --> 00:38:26,220
so the override rank I just can't

859
00:38:26,220 --> 00:38:28,440
probably say hey let me overwrite this

860
00:38:28,440 --> 00:38:30,599
I don't need to do anything else and

861
00:38:30,599 --> 00:38:32,880
when this server panel come back this is

862
00:38:32,880 --> 00:38:35,339
the map everything's already changed

863
00:38:35,339 --> 00:38:38,220
right after facing software how to

864
00:38:38,220 --> 00:38:41,720
release our modification

865
00:38:43,079 --> 00:38:44,400
yeah

866
00:38:44,400 --> 00:38:46,500
let's let's show a really quick video

867
00:38:46,500 --> 00:38:48,359
demo

868
00:38:48,359 --> 00:38:50,359
um

869
00:39:14,400 --> 00:39:16,079
okay

870
00:39:16,079 --> 00:39:16,640
um

871
00:39:16,640 --> 00:39:19,440
so I think what we're looking at first

872
00:39:19,440 --> 00:39:23,660
here is the Quran machine

873
00:39:24,420 --> 00:39:26,099
um

874
00:39:26,099 --> 00:39:27,780
actually started what's that server

875
00:39:27,780 --> 00:39:30,180
machine yeah

876
00:39:30,180 --> 00:39:33,440
well it's speckled

877
00:39:33,960 --> 00:39:35,119
that's

878
00:39:35,119 --> 00:39:39,740
176. okay give that circulation

879
00:39:40,619 --> 00:39:43,280
sorry it's been a while um

880
00:39:43,280 --> 00:39:46,560
oh yes perfect so then we're going to

881
00:39:46,560 --> 00:39:48,420
run the server side we run an xtp

882
00:39:48,420 --> 00:39:50,339
program if you're into like low level

883
00:39:50,339 --> 00:39:53,280
networking programming like uh more than

884
00:39:53,280 --> 00:39:55,560
Linux in the cloud they all you're able

885
00:39:55,560 --> 00:39:57,780
to run XT people but it allows the user

886
00:39:57,780 --> 00:39:59,960
space

887
00:39:59,960 --> 00:40:02,579
well it enable you to directly

888
00:40:02,579 --> 00:40:04,800
manipulate every single bits in the

889
00:40:04,800 --> 00:40:07,140
packet for this program we're going to

890
00:40:07,140 --> 00:40:09,420
do is hey if I see the same package from

891
00:40:09,420 --> 00:40:11,339
there then I'm going to drop the first

892
00:40:11,339 --> 00:40:14,460
two first two not three actually because

893
00:40:14,460 --> 00:40:16,260
during our experiment let me draw two

894
00:40:16,260 --> 00:40:17,520
will work

895
00:40:17,520 --> 00:40:20,520
foreign

896
00:40:25,760 --> 00:40:28,919
[Music]

897
00:40:41,220 --> 00:40:42,380
[Music]

898
00:40:42,380 --> 00:40:45,000
so we see exactly what's happening in

899
00:40:45,000 --> 00:40:46,740
The Wire

900
00:40:46,740 --> 00:40:49,819
in a compare the difference

901
00:40:51,000 --> 00:40:52,859
okay so this is the actual attack

902
00:40:52,859 --> 00:40:54,359
program and that's exactly what we

903
00:40:54,359 --> 00:40:56,579
talked about in the in the slide

904
00:40:56,579 --> 00:40:58,140
let's go ahead and talk to the server

905
00:40:58,140 --> 00:41:02,900
but so I have all these bypass hidden

906
00:41:04,859 --> 00:41:07,920
okay so very simple translator now it's

907
00:41:07,920 --> 00:41:09,119
connected to the server you can connect

908
00:41:09,119 --> 00:41:10,680
on screen

909
00:41:10,680 --> 00:41:14,598
and server should be able to respond

910
00:41:18,359 --> 00:41:21,300
yeah it's going to see collection is

911
00:41:21,300 --> 00:41:23,540
alive

912
00:41:24,000 --> 00:41:26,520
uh I can go any you know sort of

913
00:41:26,520 --> 00:41:30,859
delicious communication and every night

914
00:41:31,800 --> 00:41:35,160
okay so here's a most interesting part

915
00:41:35,160 --> 00:41:36,359
um this is the security of management

916
00:41:36,359 --> 00:41:38,520
software right here we use charcoal as

917
00:41:38,520 --> 00:41:40,920
an internal look at what it reports it

918
00:41:40,920 --> 00:41:43,740
says oh there's a connection call

919
00:41:43,740 --> 00:41:46,079
um it's coming from this 180 degree

920
00:41:46,079 --> 00:41:47,880
which is our client ID

921
00:41:47,880 --> 00:41:51,599
to 1.1.1.1

922
00:41:51,599 --> 00:41:53,099
which is not

923
00:41:53,099 --> 00:41:56,099
arbitrary

924
00:41:56,880 --> 00:42:00,980
and you can change the report too badly

925
00:42:03,420 --> 00:42:05,160
now if you look at a runner spark you

926
00:42:05,160 --> 00:42:07,260
see there's no communicating to 10101

927
00:42:07,260 --> 00:42:09,180
there's only communication between 183

928
00:42:09,180 --> 00:42:12,300
and 176.

929
00:42:12,300 --> 00:42:14,400
all right so that shows a successful

930
00:42:14,400 --> 00:42:16,820
bypass

931
00:42:17,300 --> 00:42:20,720
ing slide

932
00:42:37,740 --> 00:42:40,200
um yeah so we just talk about networking

933
00:42:40,200 --> 00:42:43,740
and next we'll talk about file system

934
00:42:43,740 --> 00:42:46,200
um it will leverage the same principle

935
00:42:46,200 --> 00:42:50,160
to bypass every single file system

936
00:42:50,160 --> 00:42:52,380
uh that's a

937
00:42:52,380 --> 00:42:55,079
bonus point you can actually bypass

938
00:42:55,079 --> 00:42:57,000
another system called Android lines from

939
00:42:57,000 --> 00:42:58,020
file system

940
00:42:58,020 --> 00:43:00,079
so for example if you're executing

941
00:43:00,079 --> 00:43:03,720
binaries exact B system call

942
00:43:03,720 --> 00:43:06,180
what does it do first it's going to

943
00:43:06,180 --> 00:43:08,280
attached on the actual file or from the

944
00:43:08,280 --> 00:43:09,599
file system so it's going to wait as

945
00:43:09,599 --> 00:43:12,319
well right

946
00:43:13,260 --> 00:43:16,489
[Music]

947
00:43:17,099 --> 00:43:19,680
yeah so uh I want to introduce how to

948
00:43:19,680 --> 00:43:21,780
bypass the overhead and open Assistant

949
00:43:21,780 --> 00:43:23,400
course

950
00:43:23,400 --> 00:43:26,460
um based on views so views actually is

951
00:43:26,460 --> 00:43:28,319
called a user space flight system

952
00:43:28,319 --> 00:43:29,339
framework

953
00:43:29,339 --> 00:43:31,619
and it usually including some components

954
00:43:31,619 --> 00:43:34,740
like uh kernel module and user space

955
00:43:34,740 --> 00:43:37,619
library and also a large utilities

956
00:43:37,619 --> 00:43:40,440
so in Cloud environment this is often

957
00:43:40,440 --> 00:43:43,440
used like remote storage to use this

958
00:43:43,440 --> 00:43:46,319
search Fields you can mount the cloud

959
00:43:46,319 --> 00:43:48,900
objects as the local biosystem and also

960
00:43:48,900 --> 00:43:51,540
access those objects as local files

961
00:43:51,540 --> 00:43:54,180
it also provides other benefits as the

962
00:43:54,180 --> 00:43:56,760
user Space by a system like the um is

963
00:43:56,760 --> 00:43:59,040
the support cluster involvement or

964
00:43:59,040 --> 00:44:01,380
development and also usually the wrong

965
00:44:01,380 --> 00:44:04,079
candidate kernel since it's a used based

966
00:44:04,079 --> 00:44:05,579
by System

967
00:44:05,579 --> 00:44:10,619
so uh this previous foreign

968
00:44:11,040 --> 00:44:13,260
here's the next example

969
00:44:13,260 --> 00:44:16,260
um showing like the major Cloud

970
00:44:16,260 --> 00:44:19,099
providers like Google Amazon and like

971
00:44:19,099 --> 00:44:23,420
Azure have their own fields

972
00:44:24,300 --> 00:44:26,640
so this is an overall architecture for

973
00:44:26,640 --> 00:44:28,920
how showing how the fields work

974
00:44:28,920 --> 00:44:30,839
so when the application wants to open

975
00:44:30,839 --> 00:44:33,660
the remote file so basically what it

976
00:44:33,660 --> 00:44:36,599
does is the same as open a local file it

977
00:44:36,599 --> 00:44:38,700
will issue an open apps or open system

978
00:44:38,700 --> 00:44:40,380
called into a kernel

979
00:44:40,380 --> 00:44:44,099
and since the file is stored remotely

980
00:44:44,099 --> 00:44:48,660
the opens system confident we do it to

981
00:44:48,660 --> 00:44:51,000
the kernel from the kernel to the user

982
00:44:51,000 --> 00:44:53,339
space and finally it will send a request

983
00:44:53,339 --> 00:44:58,440
to the uh remote server like AWS SP or

984
00:44:58,440 --> 00:45:00,420
GC storages

985
00:45:00,420 --> 00:45:03,599
and after a while when the response is

986
00:45:03,599 --> 00:45:05,640
back to the client

987
00:45:05,640 --> 00:45:07,560
the response will start back to the

988
00:45:07,560 --> 00:45:11,040
application through the original pass

989
00:45:11,040 --> 00:45:13,920
so one thing very important is the delay

990
00:45:13,920 --> 00:45:15,839
between the client and server is very

991
00:45:15,839 --> 00:45:18,300
long compared to the new system called

992
00:45:18,300 --> 00:45:19,440
itself

993
00:45:19,440 --> 00:45:21,780
so basically we can Leverage is the long

994
00:45:21,780 --> 00:45:26,599
delay to bypass the open access account

995
00:45:27,119 --> 00:45:29,700
so this this is the architecture and

996
00:45:29,700 --> 00:45:32,160
show you how it works so we have the

997
00:45:32,160 --> 00:45:34,380
religious client monitored by the

998
00:45:34,380 --> 00:45:35,880
tracing program

999
00:45:35,880 --> 00:45:38,760
it has The Silver Horse left that is

1000
00:45:38,760 --> 00:45:40,440
trying to open the remote file or

1001
00:45:40,440 --> 00:45:42,420
message file

1002
00:45:42,420 --> 00:45:44,280
as we mentioned it will issue an open

1003
00:45:44,280 --> 00:45:47,359
test system call into a kernel is the

1004
00:45:47,359 --> 00:45:50,160
arguments which is the pointer according

1005
00:45:50,160 --> 00:45:53,099
to the user space and restore the

1006
00:45:53,099 --> 00:45:55,560
mentions file name

1007
00:45:55,560 --> 00:45:58,140
so because the fire is stored remotely

1008
00:45:58,140 --> 00:46:00,960
we opened an accessible request in the

1009
00:46:00,960 --> 00:46:03,780
digital out to the wrong kernel to your

1010
00:46:03,780 --> 00:46:06,780
space and then to the most server

1011
00:46:06,780 --> 00:46:09,660
and before the results back from the

1012
00:46:09,660 --> 00:46:10,740
server

1013
00:46:10,740 --> 00:46:14,099
the overrides rep can jump in and trying

1014
00:46:14,099 --> 00:46:17,520
to override the user buffer change the

1015
00:46:17,520 --> 00:46:19,680
religious file name to the benign file

1016
00:46:19,680 --> 00:46:21,000
name

1017
00:46:21,000 --> 00:46:23,819
as we mentioned earlier the delay is

1018
00:46:23,819 --> 00:46:26,940
much longer between their client and

1019
00:46:26,940 --> 00:46:29,400
server and then the open path system

1020
00:46:29,400 --> 00:46:31,920
score itself so the CPU have enough time

1021
00:46:31,920 --> 00:46:34,079
to publicly change to the auto buffer

1022
00:46:34,079 --> 00:46:37,260
and also the register and so on

1023
00:46:37,260 --> 00:46:40,380
so once the response is back from his

1024
00:46:40,380 --> 00:46:42,720
server and before the current return to

1025
00:46:42,720 --> 00:46:44,760
the user space

1026
00:46:44,760 --> 00:46:47,700
the hooking Point as you mentioned 6X is

1027
00:46:47,700 --> 00:46:48,839
transpoint

1028
00:46:48,839 --> 00:46:50,819
it will have as many like Tracy program

1029
00:46:50,819 --> 00:46:52,800
attached to the trade uh this tradition

1030
00:46:52,800 --> 00:46:55,200
in point retracing program will be

1031
00:46:55,200 --> 00:46:57,660
triggered to read this is called

1032
00:46:57,660 --> 00:46:59,940
arguments but unfortunately at this

1033
00:46:59,940 --> 00:47:02,400
point the use of Hardware has been

1034
00:47:02,400 --> 00:47:05,040
changed to the design file which means

1035
00:47:05,040 --> 00:47:07,680
our bypassing is a state

1036
00:47:07,680 --> 00:47:11,540
so let's take a look

1037
00:47:11,579 --> 00:47:15,140
let's demo it um

1038
00:47:30,900 --> 00:47:33,720
so we deployed the backup in the GK

1039
00:47:33,720 --> 00:47:35,400
master

1040
00:47:35,400 --> 00:47:37,380
and we check the box if you have three

1041
00:47:37,380 --> 00:47:40,560
parts running and we line uh we can log

1042
00:47:40,560 --> 00:47:41,460
into

1043
00:47:41,460 --> 00:47:44,599
one of the point

1044
00:47:44,760 --> 00:47:47,700
and we check the process running inside

1045
00:47:47,700 --> 00:47:50,160
the container so we have a file called

1046
00:47:50,160 --> 00:47:51,900
Agent volume

1047
00:47:51,900 --> 00:47:55,079
and also we have the GCS views running

1048
00:47:55,079 --> 00:47:57,359
then highly amounts to identifier to the

1049
00:47:57,359 --> 00:48:00,740
remote storage in the cloud

1050
00:48:01,619 --> 00:48:04,380
so we check the lock for tobacco

1051
00:48:04,380 --> 00:48:06,359
so we only have one event generated

1052
00:48:06,359 --> 00:48:08,220
because if you just log into the

1053
00:48:08,220 --> 00:48:10,680
container

1054
00:48:10,680 --> 00:48:12,319
and we check the

1055
00:48:12,319 --> 00:48:15,599
folder so it's empty which means the

1056
00:48:15,599 --> 00:48:18,900
remote storage is in the Google cloud is

1057
00:48:18,900 --> 00:48:20,400
empty

1058
00:48:20,400 --> 00:48:23,700
and then you're trying to create a final

1059
00:48:23,700 --> 00:48:28,098
combination fire in energy folders

1060
00:48:33,079 --> 00:48:36,180
oh yeah and then you check

1061
00:48:36,180 --> 00:48:38,280
um yeah it's created

1062
00:48:38,280 --> 00:48:40,619
uh locally and also actually it's

1063
00:48:40,619 --> 00:48:44,119
remotely in Google Cloud

1064
00:48:44,640 --> 00:48:48,359
then each other lock for the buckle

1065
00:48:48,359 --> 00:48:51,480
so yeah we have one uh event detected by

1066
00:48:51,480 --> 00:48:52,920
the black but we're trying to open a

1067
00:48:52,920 --> 00:48:54,599
malicious file

1068
00:48:54,599 --> 00:48:57,200
foreign

1069
00:49:00,740 --> 00:49:03,599
[Music]

1070
00:49:03,599 --> 00:49:06,599
storage

1071
00:49:09,500 --> 00:49:13,160
and we run a pack

1072
00:49:14,280 --> 00:49:17,220
you check the file um so it's the next

1073
00:49:17,220 --> 00:49:22,680
file is created uh in the remote storage

1074
00:49:22,680 --> 00:49:24,960
and as I said uh yeah we also double

1075
00:49:24,960 --> 00:49:27,480
check if this event is detected so if

1076
00:49:27,480 --> 00:49:29,400
there's no new event generated

1077
00:49:29,400 --> 00:49:34,560
uh which means our bypasses

1078
00:49:52,200 --> 00:49:53,579
okay

1079
00:49:53,579 --> 00:49:56,579
um and now we have gone like a lot of

1080
00:49:56,579 --> 00:49:58,440
content to you guys

1081
00:49:58,440 --> 00:50:00,480
um this is the last one we'll be quick

1082
00:50:00,480 --> 00:50:02,460
promise

1083
00:50:02,460 --> 00:50:05,460
so we have a simple way to bypass the

1084
00:50:05,460 --> 00:50:08,460
tax department the exit now we're going

1085
00:50:08,460 --> 00:50:11,420
to switch what happened to enter

1086
00:50:11,420 --> 00:50:17,099
so I enter first in which means.com

1087
00:50:22,319 --> 00:50:22,980
um

1088
00:50:22,980 --> 00:50:25,020
what we have found is that for

1089
00:50:25,020 --> 00:50:27,960
transparent as a center

1090
00:50:27,960 --> 00:50:30,480
um we don't know a reliable way to do

1091
00:50:30,480 --> 00:50:33,119
the export because we do not find any

1092
00:50:33,119 --> 00:50:35,880
significantly talk about Windows Center

1093
00:50:35,880 --> 00:50:37,920
and this system

1094
00:50:37,920 --> 00:50:41,099
but between Beat Release and the second

1095
00:50:41,099 --> 00:50:43,500
part of the second

1096
00:50:43,500 --> 00:50:45,359
so can we actually use the account to do

1097
00:50:45,359 --> 00:50:49,040
something the one has to increase

1098
00:50:50,640 --> 00:50:52,759
um

1099
00:50:55,980 --> 00:50:58,559
for the same same two person

1100
00:50:58,559 --> 00:51:01,079
um so it's a kernel level mechanism

1101
00:51:01,079 --> 00:51:03,420
through restrict system cause it's very

1102
00:51:03,420 --> 00:51:04,859
very

1103
00:51:04,859 --> 00:51:06,660
it's very very useful

1104
00:51:06,660 --> 00:51:08,220
um

1105
00:51:08,220 --> 00:51:10,380
a lot of these sandboxes used to come

1106
00:51:10,380 --> 00:51:13,680
they call these are boxes are second as

1107
00:51:13,680 --> 00:51:15,240
well

1108
00:51:15,240 --> 00:51:17,400
um what it does is ask the application

1109
00:51:17,400 --> 00:51:22,140
developer you can actually insert a root

1110
00:51:22,140 --> 00:51:24,900
yourself into the application and it can

1111
00:51:24,900 --> 00:51:28,260
be removed from the data unless the you

1112
00:51:28,260 --> 00:51:29,880
know the attacker gets cut over the

1113
00:51:29,880 --> 00:51:32,880
bridge has some really smart tricks so

1114
00:51:32,880 --> 00:51:34,140
it basically allowing blocks with

1115
00:51:34,140 --> 00:51:36,000
answers

1116
00:51:36,000 --> 00:51:38,880
these rules can be pretty complex and

1117
00:51:38,880 --> 00:51:41,700
let's see evaluating the first in uh

1118
00:51:41,700 --> 00:51:44,460
sorry the first insertable or evaluated

1119
00:51:44,460 --> 00:51:48,800
last this is very very important

1120
00:51:49,859 --> 00:51:51,720
um

1121
00:51:51,720 --> 00:51:55,020
so the attack is actually pretty simple

1122
00:51:55,020 --> 00:51:55,680
um

1123
00:51:55,680 --> 00:51:58,200
what you do is basically

1124
00:51:58,200 --> 00:52:00,300
before you call the actual system called

1125
00:52:00,300 --> 00:52:02,400
bypass you insert a whole bunch of

1126
00:52:02,400 --> 00:52:04,440
second rules

1127
00:52:04,440 --> 00:52:06,359
and then

1128
00:52:06,359 --> 00:52:08,880
um you know you're going to call the

1129
00:52:08,880 --> 00:52:13,200
system call when the P3 is uh you know

1130
00:52:13,200 --> 00:52:14,579
the key trees

1131
00:52:14,579 --> 00:52:17,359
before the teacher is more interested

1132
00:52:17,359 --> 00:52:19,680
we're going to have the Opera as well

1133
00:52:19,680 --> 00:52:22,339
overwrite them

1134
00:52:22,619 --> 00:52:24,180
um I see I only have one name so I'm

1135
00:52:24,180 --> 00:52:25,859
going to just quickly jump over this but

1136
00:52:25,859 --> 00:52:28,200
happy to talk more in detail offline

1137
00:52:28,200 --> 00:52:30,359
about this

1138
00:52:30,359 --> 00:52:33,440
it's a simpler attack

1139
00:52:33,559 --> 00:52:36,720
because I do want to talk about I think

1140
00:52:36,720 --> 00:52:38,300
we don't have much time

1141
00:52:38,300 --> 00:52:41,280
patients either

1142
00:52:41,280 --> 00:52:42,780
um

1143
00:52:42,780 --> 00:52:45,180
let me summarize it this way

1144
00:52:45,180 --> 00:52:46,800
um if we want to do certain countries

1145
00:52:46,800 --> 00:52:49,200
and there's really three major way of

1146
00:52:49,200 --> 00:52:51,619
doing teachings transporting people

1147
00:52:51,619 --> 00:52:54,780
right we show that we can bypass key

1148
00:52:54,780 --> 00:52:57,839
trades the center p3s this exactly

1149
00:52:57,839 --> 00:53:00,119
these points is excellent these places

1150
00:53:00,119 --> 00:53:02,579
are very comfortable so I wouldn't say

1151
00:53:02,579 --> 00:53:04,619
successful White House okay

1152
00:53:04,619 --> 00:53:06,240
and people

1153
00:53:06,240 --> 00:53:08,400
how do you mitigate this

1154
00:53:08,400 --> 00:53:09,839
um

1155
00:53:09,839 --> 00:53:12,420
one mitigation come up from faculty is

1156
00:53:12,420 --> 00:53:14,220
they will compare those Trace points

1157
00:53:14,220 --> 00:53:17,160
this is under Society

1158
00:53:17,160 --> 00:53:20,280
you can do the same for heat trees of

1159
00:53:20,280 --> 00:53:22,319
course somebody may come up with another

1160
00:53:22,319 --> 00:53:25,640
bypass to say I change both

1161
00:53:25,640 --> 00:53:29,520
but nothing known today if you want to

1162
00:53:29,520 --> 00:53:32,220
use capable if the problem gets quickly

1163
00:53:32,220 --> 00:53:35,099
very complicated because yes you can

1164
00:53:35,099 --> 00:53:36,960
directly monitor a kernel memory which

1165
00:53:36,960 --> 00:53:39,720
is good but because of Linux kernel has

1166
00:53:39,720 --> 00:53:43,680
a variety of support or stable kernel

1167
00:53:43,680 --> 00:53:45,300
interfaces

1168
00:53:45,300 --> 00:53:46,980
so if you want to see more of a wide

1169
00:53:46,980 --> 00:53:50,359
event of Kernel you have to go

