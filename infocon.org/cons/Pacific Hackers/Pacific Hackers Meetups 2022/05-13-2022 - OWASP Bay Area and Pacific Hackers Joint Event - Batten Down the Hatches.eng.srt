1
00:17:31,919 --> 00:17:34,559
sort of packaged binary and uh

2
00:17:34,559 --> 00:17:36,640
kubernetes is really what we use as the

3
00:17:36,640 --> 00:17:38,799
underlying infrastructure to scale these

4
00:17:38,799 --> 00:17:40,880
things to provide some networking

5
00:17:40,880 --> 00:17:43,760
secrets management like it does a lot um

6
00:17:43,760 --> 00:17:46,720
and we're as of last week one not 24 the

7
00:17:46,720 --> 00:17:48,480
stargazer released there's some cool

8
00:17:48,480 --> 00:17:50,480
stuff that came out and there she said

9
00:17:50,480 --> 00:17:53,440
we can talk about that as well but

10
00:17:53,440 --> 00:17:55,679
kubernetes is

11
00:17:55,679 --> 00:17:58,320
100 the most configurable

12
00:17:58,320 --> 00:17:59,200
like

13
00:17:59,200 --> 00:18:01,520
biggest most successful container

14
00:18:01,520 --> 00:18:04,960
orchestration platform um available but

15
00:18:04,960 --> 00:18:07,120
that doesn't mean it's secure right like

16
00:18:07,120 --> 00:18:09,520
it's like saying aws is secure right we

17
00:18:09,520 --> 00:18:10,720
all know that

18
00:18:10,720 --> 00:18:13,360
we have jobs they pay really well to go

19
00:18:13,360 --> 00:18:15,360
fix these environments kubernetes is not

20
00:18:15,360 --> 00:18:17,120
any different it's like a data center

21
00:18:17,120 --> 00:18:19,440
inside of your data set so

22
00:18:19,440 --> 00:18:20,559
um

23
00:18:20,559 --> 00:18:23,280
this this top 10 project was like

24
00:18:23,280 --> 00:18:25,360
the culmination of i'm going on six

25
00:18:25,360 --> 00:18:26,559
years of

26
00:18:26,559 --> 00:18:29,280
blabbing about kubernetes security uh

27
00:18:29,280 --> 00:18:31,280
uh and it's still the same stuff from

28
00:18:31,280 --> 00:18:33,600
six years ago essentially it's now just

29
00:18:33,600 --> 00:18:35,120
compounded into

30
00:18:35,120 --> 00:18:36,799
instead of one cluster and now it's like

31
00:18:36,799 --> 00:18:39,679
500 at a single company so um it's even

32
00:18:39,679 --> 00:18:43,039
worse and the top 10 is like my

33
00:18:43,039 --> 00:18:44,480
kind of view of the world of this so

34
00:18:44,480 --> 00:18:46,640
this is not set stone but and they're

35
00:18:46,640 --> 00:18:48,559
not actually an order yet so

36
00:18:48,559 --> 00:18:50,160
we're just going to go through them

37
00:18:50,160 --> 00:18:51,440
these are the things that are happening

38
00:18:51,440 --> 00:18:52,480
today

39
00:18:52,480 --> 00:18:55,200
in containerized environments

40
00:18:55,200 --> 00:18:56,640
and feel free to interrupt the thing

41
00:18:56,640 --> 00:18:59,280
questions this is a pretty small

42
00:18:59,280 --> 00:19:01,360
group

43
00:19:01,360 --> 00:19:02,720
um so

44
00:19:02,720 --> 00:19:05,120
number one on

45
00:19:05,120 --> 00:19:07,919
my my list uh which is going to be other

46
00:19:07,919 --> 00:19:10,880
people's lists uh is

47
00:19:10,880 --> 00:19:13,200
a lot of people would agree uh calling

48
00:19:13,200 --> 00:19:15,120
it insecure workload configuration so

49
00:19:15,120 --> 00:19:17,280
inside of kubernetes you have a series

50
00:19:17,280 --> 00:19:19,600
of workloads right these workloads are

51
00:19:19,600 --> 00:19:22,320
deployed using yaml manifests they go

52
00:19:22,320 --> 00:19:24,480
through some sort of pipeline ultimately

53
00:19:24,480 --> 00:19:27,360
running a container inside the cluster

54
00:19:27,360 --> 00:19:29,919
and that container

55
00:19:29,919 --> 00:19:31,840
is can be configured in a number of

56
00:19:31,840 --> 00:19:34,640
different ways and what we end up seeing

57
00:19:34,640 --> 00:19:36,799
in really large kind of

58
00:19:36,799 --> 00:19:38,480
heterogeneous environments where you

59
00:19:38,480 --> 00:19:41,280
have gke over here some on-prem stuff

60
00:19:41,280 --> 00:19:43,919
and like maybe some eks clusters is that

61
00:19:43,919 --> 00:19:45,520
workload's getting disconfigured at

62
00:19:45,520 --> 00:19:46,720
scale

63
00:19:46,720 --> 00:19:48,880
and everything's broken so

64
00:19:48,880 --> 00:19:51,360
insecure workload configurations

65
00:19:51,360 --> 00:19:53,919
it's just hard to get right um

66
00:19:53,919 --> 00:19:56,240
there's a great survey linked here by

67
00:19:56,240 --> 00:19:59,280
red hat uh it's just basically like you

68
00:19:59,280 --> 00:20:01,280
can't make these numbers up it's like

69
00:20:01,280 --> 00:20:02,960
everything's kind of broken and now

70
00:20:02,960 --> 00:20:06,480
we've pushed the problem um further down

71
00:20:06,480 --> 00:20:08,080
the road and we still have disconfigured

72
00:20:08,080 --> 00:20:12,159
workbooks and what that means um

73
00:20:12,159 --> 00:20:15,039
under the hood is really

74
00:20:15,039 --> 00:20:16,480
all of these little bits of

75
00:20:16,480 --> 00:20:18,159
configuration we're not going to go into

76
00:20:18,159 --> 00:20:19,360
each of these individually we're

77
00:20:19,360 --> 00:20:20,480
actually going to play with this stuff

78
00:20:20,480 --> 00:20:23,440
hands-on in like the labs but

79
00:20:23,440 --> 00:20:25,120
the security context around the

80
00:20:25,120 --> 00:20:27,200
deployment or around the staple set or

81
00:20:27,200 --> 00:20:28,799
david said

82
00:20:28,799 --> 00:20:31,039
as you build these things you need

83
00:20:31,039 --> 00:20:32,480
different levels of access whether

84
00:20:32,480 --> 00:20:34,720
that's to a file system or to the linux

85
00:20:34,720 --> 00:20:37,919
kernel itself or if it's the user that

86
00:20:37,919 --> 00:20:40,000
that container process is running right

87
00:20:40,000 --> 00:20:42,480
user's writing is root um there's this

88
00:20:42,480 --> 00:20:44,240
thing called privilege mode that's very

89
00:20:44,240 --> 00:20:47,039
easy to switch from false to true and

90
00:20:47,039 --> 00:20:48,400
all of a sudden you're basically not

91
00:20:48,400 --> 00:20:49,360
running

92
00:20:49,360 --> 00:20:50,799
anymore so

93
00:20:50,799 --> 00:20:53,600
this kind of mashup of yaml

94
00:20:53,600 --> 00:20:56,000
has some implications right like if you

95
00:20:56,000 --> 00:20:57,840
look here

96
00:20:57,840 --> 00:21:00,480
privileged true under security context

97
00:21:00,480 --> 00:21:02,640
you've broken down the walls or barriers

98
00:21:02,640 --> 00:21:05,039
that are you know what docker or your

99
00:21:05,039 --> 00:21:07,039
container runtime is provided to you

100
00:21:07,039 --> 00:21:08,640
against kind of container breakout

101
00:21:08,640 --> 00:21:10,480
attacks so i'm going to go through all

102
00:21:10,480 --> 00:21:11,760
these but

103
00:21:11,760 --> 00:21:13,679
this configuration

104
00:21:13,679 --> 00:21:15,280
is hard to

105
00:21:15,280 --> 00:21:17,919
detect and prevent at scale right so we

106
00:21:17,919 --> 00:21:19,120
have tools

107
00:21:19,120 --> 00:21:22,000
today in kubernetes proper security

108
00:21:22,000 --> 00:21:24,640
policy uh pod security policy plus one

109
00:21:24,640 --> 00:21:27,200
of that it's deprecated now we have

110
00:21:27,200 --> 00:21:29,200
third party non-open source projects

111
00:21:29,200 --> 00:21:32,000
open policy agent kiverno

112
00:21:32,000 --> 00:21:33,520
q warden

113
00:21:33,520 --> 00:21:35,440
but however you slice or dice it you

114
00:21:35,440 --> 00:21:38,320
need to figure out how to set a baseline

115
00:21:38,320 --> 00:21:40,480
stick to it out of your clusters

116
00:21:40,480 --> 00:21:41,280
and

117
00:21:41,280 --> 00:21:43,520
build an environment where developers

118
00:21:43,520 --> 00:21:45,280
actually like

119
00:21:45,280 --> 00:21:47,120
you know shift code that's not powerful

120
00:21:47,120 --> 00:21:48,240
that's not utilizing these

121
00:21:48,240 --> 00:21:49,600
configurations

122
00:21:49,600 --> 00:21:52,480
so um in true oh fashion this is very

123
00:21:52,480 --> 00:21:54,640
broad right like the wasp top 10 always

124
00:21:54,640 --> 00:21:56,799
has like the final catch-all where it's

125
00:21:56,799 --> 00:21:57,679
like

126
00:21:57,679 --> 00:22:00,000
misconfigured applications and that's

127
00:22:00,000 --> 00:22:01,679
kind of what this is it's like there's a

128
00:22:01,679 --> 00:22:03,520
lot of things to this and i'm going to

129
00:22:03,520 --> 00:22:06,559
uh if you pop open the top 10 you'll see

130
00:22:06,559 --> 00:22:10,760
tons of like real examples

131
00:22:12,159 --> 00:22:14,559
there's me this number of things but

132
00:22:14,559 --> 00:22:16,240
more the number anyways

133
00:22:16,240 --> 00:22:17,360
so

134
00:22:17,360 --> 00:22:19,360
the next one we'll talk about is overly

135
00:22:19,360 --> 00:22:22,159
permissive our back configuration so

136
00:22:22,159 --> 00:22:26,000
has anybody used our backing kubernetes

137
00:22:34,320 --> 00:22:36,080
what about in kubernetes

138
00:22:36,080 --> 00:22:37,919
does anybody have a great time setting

139
00:22:37,919 --> 00:22:40,080
up roles cluster roles role bindings

140
00:22:40,080 --> 00:22:42,400
cultural bindings outside of humanities

141
00:22:42,400 --> 00:22:45,280
probably not so these

142
00:22:45,280 --> 00:22:47,760
this is this thing we have collectively

143
00:22:47,760 --> 00:22:49,840
ignored over the years of just saying

144
00:22:49,840 --> 00:22:51,679
like

145
00:22:51,679 --> 00:22:53,679
let's give people and service accounts

146
00:22:53,679 --> 00:22:56,000
for permissions that they need

147
00:22:56,000 --> 00:22:57,840
but it's it's how you access the

148
00:22:57,840 --> 00:23:00,960
kubernetes api so i am jimmy i'm

149
00:23:00,960 --> 00:23:03,360
authenticated to the api server but what

150
00:23:03,360 --> 00:23:05,120
can i do right and it's the

151
00:23:05,120 --> 00:23:08,240
authorization layer of i can list

152
00:23:08,240 --> 00:23:10,400
secrets in this name space but not this

153
00:23:10,400 --> 00:23:13,360
namespace i can create pods over here

154
00:23:13,360 --> 00:23:15,240
but not over there and this is

155
00:23:15,240 --> 00:23:18,640
extraordinarily tedious to get right and

156
00:23:18,640 --> 00:23:20,960
what ends up happening is

157
00:23:20,960 --> 00:23:23,520
as one does we over we give too many

158
00:23:23,520 --> 00:23:26,400
permissions right so you'll see um in

159
00:23:26,400 --> 00:23:28,000
the top 10 itself there's gonna be a lot

160
00:23:28,000 --> 00:23:28,880
of

161
00:23:28,880 --> 00:23:30,000
helpful

162
00:23:30,000 --> 00:23:31,679
kind of hints on how to get this right

163
00:23:31,679 --> 00:23:34,080
but for a security practitioner

164
00:23:34,080 --> 00:23:36,480
our back is going to be a nightmare

165
00:23:36,480 --> 00:23:38,320
probably right it's just it's hard to

166
00:23:38,320 --> 00:23:40,720
scale it's really hard to

167
00:23:40,720 --> 00:23:42,960
keep privileges at a minimum to have

168
00:23:42,960 --> 00:23:44,640
users only do what they should do and

169
00:23:44,640 --> 00:23:46,880
nothing more so we have tools such as

170
00:23:46,880 --> 00:23:51,039
brackets um this is uh

171
00:23:51,039 --> 00:23:51,919
uh

172
00:23:51,919 --> 00:23:54,320
our back with a k at the end i think

173
00:23:54,320 --> 00:23:57,200
there's all sorts of different ways to

174
00:23:57,200 --> 00:23:58,960
visualize what's happening in the

175
00:23:58,960 --> 00:23:59,919
cluster

176
00:23:59,919 --> 00:24:00,960
and then

177
00:24:00,960 --> 00:24:03,520
tie that back to a story that is least

178
00:24:03,520 --> 00:24:06,240
privileged right so i definitely put

179
00:24:06,240 --> 00:24:09,120
this in the top ten i gave it a three

180
00:24:09,120 --> 00:24:12,159
then we'll go back to two who knows um

181
00:24:12,159 --> 00:24:13,120
so

182
00:24:13,120 --> 00:24:16,159
next up on the list uh supply chain

183
00:24:16,159 --> 00:24:18,320
as we have we heard this term and we

184
00:24:18,320 --> 00:24:21,200
attended rsa

185
00:24:21,200 --> 00:24:23,919
we've been shoved supply chain security

186
00:24:23,919 --> 00:24:26,880
um for spend this term uh

187
00:24:26,880 --> 00:24:28,480
i

188
00:24:28,480 --> 00:24:30,720
the supply chain in kubernetes is insane

189
00:24:30,720 --> 00:24:32,960
right like there's many layers when we

190
00:24:32,960 --> 00:24:34,480
talk about what supply chain is and

191
00:24:34,480 --> 00:24:36,880
security but

192
00:24:36,880 --> 00:24:39,120
at its core kubernetes is a bunch of

193
00:24:39,120 --> 00:24:41,279
third-party stuff that you've decided to

194
00:24:41,279 --> 00:24:42,960
run in your requirement

195
00:24:42,960 --> 00:24:44,960
there's that part of the supply chain

196
00:24:44,960 --> 00:24:46,559
but then like where did your workload

197
00:24:46,559 --> 00:24:47,840
come from do you have different

198
00:24:47,840 --> 00:24:49,760
dependencies yeah

199
00:24:49,760 --> 00:24:52,080
will you eventually put like s in here

200
00:24:52,080 --> 00:24:54,640
yeah so in the top 10

201
00:24:54,640 --> 00:24:56,480
this is one that's actually

202
00:24:56,480 --> 00:25:00,039
more full featured

203
00:25:07,039 --> 00:25:09,200
so

204
00:25:09,279 --> 00:25:10,960
yeah so here in the how to prevent

205
00:25:10,960 --> 00:25:13,360
section

206
00:25:13,679 --> 00:25:15,520
this probably still isn't as compromised

207
00:25:15,520 --> 00:25:17,279
as it needs to be but s-bomb is

208
00:25:17,279 --> 00:25:19,520
certainly part of the story right

209
00:25:19,520 --> 00:25:22,159
software bill of materials is the other

210
00:25:22,159 --> 00:25:24,720
kind of hotness that's going circulating

211
00:25:24,720 --> 00:25:25,600
the

212
00:25:25,600 --> 00:25:27,360
community um

213
00:25:27,360 --> 00:25:30,640
the whole promise of this in container

214
00:25:30,640 --> 00:25:32,000
land is like

215
00:25:32,000 --> 00:25:35,039
i pulled an image my image has 1400

216
00:25:35,039 --> 00:25:37,440
dependencies i've added my own secret

217
00:25:37,440 --> 00:25:39,200
special stuff and my code which has

218
00:25:39,200 --> 00:25:41,520
another 1200 dependencies and then i

219
00:25:41,520 --> 00:25:43,279
have a base image of a fun tune which

220
00:25:43,279 --> 00:25:45,440
has three thousand dependencies so you

221
00:25:45,440 --> 00:25:47,200
bring that all in in the form of a

222
00:25:47,200 --> 00:25:48,960
workload inside of kubernetes what are

223
00:25:48,960 --> 00:25:50,720
you doing

224
00:25:50,720 --> 00:25:51,520
you

225
00:25:51,520 --> 00:25:53,600
probably want to know where they came

226
00:25:53,600 --> 00:25:55,840
from what's the risk score is there any

227
00:25:55,840 --> 00:25:58,400
no vulnerabilities or cves this is an

228
00:25:58,400 --> 00:26:00,159
area that like

229
00:26:00,159 --> 00:26:02,400
is so generic it's hard to say like one

230
00:26:02,400 --> 00:26:04,640
tool or one technique but it's a problem

231
00:26:04,640 --> 00:26:06,559
it could be it's like just because

232
00:26:06,559 --> 00:26:08,559
containers

233
00:26:08,559 --> 00:26:11,120
so i think the supply chain has a

234
00:26:11,120 --> 00:26:13,440
has a bright future um

235
00:26:13,440 --> 00:26:16,240
of being in the news for us still and uh

236
00:26:16,240 --> 00:26:18,159
being a real pain point for security

237
00:26:18,159 --> 00:26:21,159
practitioners

238
00:26:25,039 --> 00:26:27,840
so um

239
00:26:28,480 --> 00:26:30,159
some of the tooling here it's still

240
00:26:30,159 --> 00:26:32,720
pretty immature to be honest uh

241
00:26:32,720 --> 00:26:34,880
we are going down this path of like

242
00:26:34,880 --> 00:26:37,440
signing things right cryptographically

243
00:26:37,440 --> 00:26:39,039
using uh

244
00:26:39,039 --> 00:26:41,039
you know key pairs to say like this

245
00:26:41,039 --> 00:26:42,799
image has been signed at this

246
00:26:42,799 --> 00:26:45,840
attestation point in this registry and

247
00:26:45,840 --> 00:26:48,240
upon admission to this cluster verify

248
00:26:48,240 --> 00:26:50,080
that those keys make sense

249
00:26:50,080 --> 00:26:52,480
there's tools like cosine and sig store

250
00:26:52,480 --> 00:26:54,960
that are out there to help do that um

251
00:26:54,960 --> 00:26:57,039
and then we are starting to see like

252
00:26:57,039 --> 00:26:59,360
standardized s-bomb outputs which is

253
00:26:59,360 --> 00:27:00,720
really helpful because if you're just

254
00:27:00,720 --> 00:27:03,360
kind of yolo in your own s-bomb and just

255
00:27:03,360 --> 00:27:04,960
like whatever you want to print to the

256
00:27:04,960 --> 00:27:06,640
screen like that's not going to fit in

257
00:27:06,640 --> 00:27:08,320
the other landscape i don't know the

258
00:27:08,320 --> 00:27:10,480
other tools in the landscape so

259
00:27:10,480 --> 00:27:13,760
uh i think spgx is like the obos that's

260
00:27:13,760 --> 00:27:16,080
fine it's cyclone okay

261
00:27:16,080 --> 00:27:17,919
yeah so there's a homeless one cyclone

262
00:27:17,919 --> 00:27:20,480
dx right yeah sorry uh i picked a

263
00:27:20,480 --> 00:27:23,279
competitor but whatever um

264
00:27:23,279 --> 00:27:25,600
these are standards that you can use to

265
00:27:25,600 --> 00:27:28,320
provide s-bomb technologies

266
00:27:28,320 --> 00:27:30,399
to view all the stuff right like

267
00:27:30,399 --> 00:27:32,640
third-party dependencies

268
00:27:32,640 --> 00:27:35,039
software coming from different places

269
00:27:35,039 --> 00:27:37,919
just this space is new and still pretty

270
00:27:37,919 --> 00:27:40,960
messy um let's get that so

271
00:27:40,960 --> 00:27:43,679
back on track here um

272
00:27:43,679 --> 00:27:45,279
it was just having a conversation with

273
00:27:45,279 --> 00:27:47,600
someone from zoom about uh

274
00:27:47,600 --> 00:27:48,880
like

275
00:27:48,880 --> 00:27:50,960
this i'm calling centralized policy

276
00:27:50,960 --> 00:27:53,200
enforcement or lack thereof so this is

277
00:27:53,200 --> 00:27:54,880
basically

278
00:27:54,880 --> 00:27:56,240
we're at this point

279
00:27:56,240 --> 00:27:57,679
where no one's really running one

280
00:27:57,679 --> 00:27:59,360
cluster or two clusters or three

281
00:27:59,360 --> 00:28:01,840
clusters

282
00:28:03,840 --> 00:28:05,520
foundation

283
00:28:05,520 --> 00:28:07,440
that went across like the whole industry

284
00:28:07,440 --> 00:28:10,480
and it was like 48 of the respondents

285
00:28:10,480 --> 00:28:12,799
had 50 or more clusters

286
00:28:12,799 --> 00:28:14,240
which is like

287
00:28:14,240 --> 00:28:16,000
kind of shocking and terrifying and all

288
00:28:16,000 --> 00:28:18,399
the emotions at once of like well why

289
00:28:18,399 --> 00:28:19,840
are we having this

290
00:28:19,840 --> 00:28:22,240
many clusters in one environment

291
00:28:22,240 --> 00:28:24,000
because what happens from you know if

292
00:28:24,000 --> 00:28:26,080
you're in the defensive sort of

293
00:28:26,080 --> 00:28:28,159
industry you don't know how to see

294
00:28:28,159 --> 00:28:29,760
what's going on across all these

295
00:28:29,760 --> 00:28:32,000
clusters or enforce policies

296
00:28:32,000 --> 00:28:32,799
so

297
00:28:32,799 --> 00:28:35,200
tying back into misconfigured workloads

298
00:28:35,200 --> 00:28:37,840
how do i find what's violating of all

299
00:28:37,840 --> 00:28:39,760
these different rules i have in place

300
00:28:39,760 --> 00:28:41,679
and then how do i fix that right so

301
00:28:41,679 --> 00:28:44,480
centralized policy enforcement is

302
00:28:44,480 --> 00:28:46,559
really hard in like this

303
00:28:46,559 --> 00:28:49,279
disparate kubernetes multi-cluster

304
00:28:49,279 --> 00:28:51,679
multi-cloud world but it's really

305
00:28:51,679 --> 00:28:53,360
important and if you don't have a story

306
00:28:53,360 --> 00:28:55,200
here you're going to be kind of cherry

307
00:28:55,200 --> 00:28:56,960
picking individual clusters trying to

308
00:28:56,960 --> 00:28:58,720
make one secure while the other one is

309
00:28:58,720 --> 00:29:01,679
just crashing and learning

310
00:29:01,679 --> 00:29:05,279
uh lots of tools coming up here right i

311
00:29:05,279 --> 00:29:06,799
mentioned some of these the middle one

312
00:29:06,799 --> 00:29:10,080
is called cube organ

313
00:29:11,600 --> 00:29:14,159
open policy agent is a policy engine

314
00:29:14,159 --> 00:29:16,399
that you would write uh rego as the

315
00:29:16,399 --> 00:29:20,639
language has anybody written rego here

316
00:29:22,960 --> 00:29:25,440
it works

317
00:29:25,600 --> 00:29:27,919
so this

318
00:29:27,919 --> 00:29:29,440
these are all a little different keeper

319
00:29:29,440 --> 00:29:30,960
now is actually kind of more of a

320
00:29:30,960 --> 00:29:34,640
kubernetes native way to view policy but

321
00:29:34,640 --> 00:29:36,159
at the end of the day you need a central

322
00:29:36,159 --> 00:29:38,159
place to store policy and distribute it

323
00:29:38,159 --> 00:29:41,200
across clusters name spaces workloads um

324
00:29:41,200 --> 00:29:42,720
and uh

325
00:29:42,720 --> 00:29:44,080
it's kind of going to be up to you right

326
00:29:44,080 --> 00:29:45,919
when you hear things like cis benchmarks

327
00:29:45,919 --> 00:29:48,159
nsa hardware guidelines a lot of that

328
00:29:48,159 --> 00:29:50,159
ties back into these policies that you

329
00:29:50,159 --> 00:29:53,440
write in rego or yaml or i think hugh

330
00:29:53,440 --> 00:29:55,440
martin is like blossom there's a

331
00:29:55,440 --> 00:29:57,840
javascript one if you're a masochist you

332
00:29:57,840 --> 00:29:59,600
want to write your kubernetes policies

333
00:29:59,600 --> 00:30:00,799
javascript

334
00:30:00,799 --> 00:30:01,600
um

335
00:30:01,600 --> 00:30:03,600
all those exist

336
00:30:03,600 --> 00:30:05,760
uh number five halfway through here is

337
00:30:05,760 --> 00:30:08,320
inadequate logging and monitoring so

338
00:30:08,320 --> 00:30:11,360
kubernetes itself is

339
00:30:11,360 --> 00:30:13,279
a number of different components there's

340
00:30:13,279 --> 00:30:15,200
like tens of components that make up

341
00:30:15,200 --> 00:30:17,520
this thing we call a cluster

342
00:30:17,520 --> 00:30:19,760
some of them emit their own logs there's

343
00:30:19,760 --> 00:30:21,679
specialized logs that the api server

344
00:30:21,679 --> 00:30:23,200
layer there's logs in your cloud

345
00:30:23,200 --> 00:30:25,919
provider that are specific to kubernetes

346
00:30:25,919 --> 00:30:29,279
and what i've seen a trend of is

347
00:30:29,279 --> 00:30:31,039
we're not doing anything with that we

348
00:30:31,039 --> 00:30:33,279
kind of say you turned it on we have api

349
00:30:33,279 --> 00:30:34,640
auto logs but

350
00:30:34,640 --> 00:30:36,159
we're not watching for things that are

351
00:30:36,159 --> 00:30:37,919
happening or maybe we don't even know

352
00:30:37,919 --> 00:30:39,840
what to look for so

353
00:30:39,840 --> 00:30:40,960
um

354
00:30:40,960 --> 00:30:42,960
this this is like

355
00:30:42,960 --> 00:30:45,279
stuff we've known like we've done sim

356
00:30:45,279 --> 00:30:47,120
and sock type things for a long time but

357
00:30:47,120 --> 00:30:49,200
kubernetes just adds a new flavor to

358
00:30:49,200 --> 00:30:51,120
that so you're going to want to go see

359
00:30:51,120 --> 00:30:52,960
what you have turned on where those logs

360
00:30:52,960 --> 00:30:55,279
are actually being sunk into what you're

361
00:30:55,279 --> 00:30:57,200
doing with them right the kubernetes api

362
00:30:57,200 --> 00:30:58,880
audit logs

363
00:30:58,880 --> 00:31:01,440
are very valuable like it shows every

364
00:31:01,440 --> 00:31:04,240
single request to the api server so if i

365
00:31:04,240 --> 00:31:05,120
jimmy

366
00:31:05,120 --> 00:31:06,399
authenticate

367
00:31:06,399 --> 00:31:09,519
to a cluster over an eks and

368
00:31:09,519 --> 00:31:12,720
i do it at midnight and i am trying to

369
00:31:12,720 --> 00:31:14,880
dump secrets out of ncd

370
00:31:14,880 --> 00:31:16,480
that's going to be captured and it's

371
00:31:16,480 --> 00:31:19,039
going to show me like where i came from

372
00:31:19,039 --> 00:31:20,960
what was i doing what was it loud or

373
00:31:20,960 --> 00:31:23,600
denied and those are things that uh we

374
00:31:23,600 --> 00:31:26,159
need to be watching for closely

375
00:31:26,159 --> 00:31:28,720
or not or you can ignore that's what

376
00:31:28,720 --> 00:31:31,760
people do with laws typically

377
00:31:31,760 --> 00:31:33,440
so that's what they look like they're

378
00:31:33,440 --> 00:31:35,440
logs

379
00:31:35,440 --> 00:31:38,320
so next is broken authentication

380
00:31:38,320 --> 00:31:40,399
this is literally stealing the page from

381
00:31:40,399 --> 00:31:42,480
the overwatch top 10 if you've ever had

382
00:31:42,480 --> 00:31:44,840
to remember my first pen testing

383
00:31:44,840 --> 00:31:47,760
job but uh during my interview i

384
00:31:47,760 --> 00:31:48,640
remember

385
00:31:48,640 --> 00:31:50,559
the cto maybe

386
00:31:50,559 --> 00:31:51,600
i didn't know he's gonna do it but he

387
00:31:51,600 --> 00:31:54,559
gave me regurgitate the oauth top ten in

388
00:31:54,559 --> 00:31:56,880
order that's an interview question i was

389
00:31:56,880 --> 00:31:59,360
just like mortifying like is you

390
00:31:59,360 --> 00:32:00,799
shouldn't have to do that

391
00:32:00,799 --> 00:32:02,080
um

392
00:32:02,080 --> 00:32:03,360
but this is

393
00:32:03,360 --> 00:32:06,320
a problem across appsec into broadcast

394
00:32:06,320 --> 00:32:08,320
infrastructure

395
00:32:08,320 --> 00:32:09,519
and

396
00:32:09,519 --> 00:32:10,960
it's

397
00:32:10,960 --> 00:32:12,880
still fuzzy right because kubernetes

398
00:32:12,880 --> 00:32:15,200
doesn't do authentication for you it

399
00:32:15,200 --> 00:32:18,000
doesn't have some database that has your

400
00:32:18,000 --> 00:32:21,679
username like decrypted password sitting

401
00:32:21,679 --> 00:32:23,440
inside of the kubernetes api so it's

402
00:32:23,440 --> 00:32:26,320
always bring your own authentication and

403
00:32:26,320 --> 00:32:28,080
anytime you put this in the power of the

404
00:32:28,080 --> 00:32:30,399
people building uh these clusters it

405
00:32:30,399 --> 00:32:32,720
could bring the wrong thing right

406
00:32:32,720 --> 00:32:34,159
to this day i see a lot of shared

407
00:32:34,159 --> 00:32:37,440
credentials i see um certificates being

408
00:32:37,440 --> 00:32:38,159
like

409
00:32:38,159 --> 00:32:40,480
just sitting on laptops of like multiple

410
00:32:40,480 --> 00:32:43,039
people and it's you know you want a

411
00:32:43,039 --> 00:32:45,279
strong story around your authentication

412
00:32:45,279 --> 00:32:46,000
to

413
00:32:46,000 --> 00:32:48,159
the cluster itself and don't leave your

414
00:32:48,159 --> 00:32:50,399
api open to the internet that's a really

415
00:32:50,399 --> 00:32:52,240
good start right the kubernetes api

416
00:32:52,240 --> 00:32:56,240
that's not around here but um

417
00:32:56,240 --> 00:32:58,000
there's no one recommendation a lot of

418
00:32:58,000 --> 00:33:00,240
people lean towards like an oigc kind of

419
00:33:00,240 --> 00:33:03,600
sso uh or saml setup where you can go

420
00:33:03,600 --> 00:33:06,640
say hey i'm gonna off into octa

421
00:33:06,640 --> 00:33:08,880
or azure active directory

422
00:33:08,880 --> 00:33:11,360
and let that system handle

423
00:33:11,360 --> 00:33:12,960
authentication and then you are

424
00:33:12,960 --> 00:33:14,480
basically passing a jump to the

425
00:33:14,480 --> 00:33:15,919
kubernetes api

426
00:33:15,919 --> 00:33:16,720
and

427
00:33:16,720 --> 00:33:18,480
kubernetes takes over and does more

428
00:33:18,480 --> 00:33:21,120
backup authorization but mfa all that

429
00:33:21,120 --> 00:33:22,720
stuff matters here

430
00:33:22,720 --> 00:33:23,919
you're just going to want to be really

431
00:33:23,919 --> 00:33:25,679
tight around who can access your

432
00:33:25,679 --> 00:33:26,799
clusters and if you're sharing

433
00:33:26,799 --> 00:33:29,360
dimensions

434
00:33:31,039 --> 00:33:33,840
network segmentation so

435
00:33:33,840 --> 00:33:35,600
networking inside of kubernetes is

436
00:33:35,600 --> 00:33:37,600
interesting right it's if you think

437
00:33:37,600 --> 00:33:40,399
about a cluster you could have 10 nodes

438
00:33:40,399 --> 00:33:43,360
and maybe on each node you have

439
00:33:43,360 --> 00:33:46,080
50 containers right 50 workloads out of

440
00:33:46,080 --> 00:33:48,480
the box kubernetes is going to let each

441
00:33:48,480 --> 00:33:50,559
and every single one of those workloads

442
00:33:50,559 --> 00:33:52,720
talk to one another just kind of a flat

443
00:33:52,720 --> 00:33:55,039
network and under the under the hood it

444
00:33:55,039 --> 00:33:58,240
uses ip tables to kind of back to manage

445
00:33:58,240 --> 00:33:59,120
and

446
00:33:59,120 --> 00:34:01,760
deal with routing and it's not

447
00:34:01,760 --> 00:34:03,279
terribly

448
00:34:03,279 --> 00:34:05,600
segmented out of the box so you as the

449
00:34:05,600 --> 00:34:07,279
operator are going to have to bring some

450
00:34:07,279 --> 00:34:08,159
sort of

451
00:34:08,159 --> 00:34:10,480
overlay network or some network policy

452
00:34:10,480 --> 00:34:13,440
to to the table and build something that

453
00:34:13,440 --> 00:34:15,119
says hey my front end can only talk to

454
00:34:15,119 --> 00:34:17,040
my back end nothing else

455
00:34:17,040 --> 00:34:18,800
and kubernetes is not going to do that

456
00:34:18,800 --> 00:34:21,760
for you so oftentimes what you see is

457
00:34:21,760 --> 00:34:24,239
nothing here right like you know there's

458
00:34:24,239 --> 00:34:25,918
talks of service mesh

459
00:34:25,918 --> 00:34:29,359
um there's network policies uh but

460
00:34:29,359 --> 00:34:31,760
they take a lot of kind of overhead and

461
00:34:31,760 --> 00:34:33,520
planning and it's like building a

462
00:34:33,520 --> 00:34:35,040
firewall right so

463
00:34:35,040 --> 00:34:36,879
this is another thing we see very often

464
00:34:36,879 --> 00:34:39,040
now

465
00:34:39,359 --> 00:34:40,560
and

466
00:34:40,560 --> 00:34:42,159
there's actually a lot of options for

467
00:34:42,159 --> 00:34:45,839
network security in kubernetes one being

468
00:34:45,839 --> 00:34:47,918
like just using kubernetes network

469
00:34:47,918 --> 00:34:50,320
policies it's actually an api object

470
00:34:50,320 --> 00:34:53,040
kubernetes you could create these things

471
00:34:53,040 --> 00:34:56,159
slice up name spaces or labels let one

472
00:34:56,159 --> 00:34:57,920
pod talk to another pod

473
00:34:57,920 --> 00:34:59,599
not a different one

474
00:34:59,599 --> 00:35:01,520
or you could go full service mesh like

475
00:35:01,520 --> 00:35:02,400
istio

476
00:35:02,400 --> 00:35:03,599
d like

477
00:35:03,599 --> 00:35:05,359
all those things are great but they all

478
00:35:05,359 --> 00:35:07,200
have their own kind of complexity to

479
00:35:07,200 --> 00:35:10,000
manage these tools and uh

480
00:35:10,000 --> 00:35:11,359
networking is

481
00:35:11,359 --> 00:35:14,480
is always hard quick questions

482
00:35:14,480 --> 00:35:17,440
yeah have you seen evppf uh

483
00:35:17,440 --> 00:35:20,240
uh being used a lot

484
00:35:20,240 --> 00:35:22,800
um tools on top of it yeah like more of

485
00:35:22,800 --> 00:35:24,880
an observability network observability

486
00:35:24,880 --> 00:35:27,200
tool

487
00:35:30,000 --> 00:35:31,119
yeah

488
00:35:31,119 --> 00:35:34,800
not to distribute policy as much

489
00:35:35,119 --> 00:35:37,280
i think you see your traffic yeah you

490
00:35:37,280 --> 00:35:40,160
could totally use your ppf um but not

491
00:35:40,160 --> 00:35:42,240
not as the enforcement point that's a

492
00:35:42,240 --> 00:35:44,800
good point

493
00:35:44,800 --> 00:35:46,240
it wouldn't be a kubernetes talk if i

494
00:35:46,240 --> 00:35:49,279
didn't have eps

495
00:35:50,320 --> 00:35:52,079
next number nine

496
00:35:52,079 --> 00:35:55,280
rounding up to the end of our top ten

497
00:35:55,280 --> 00:35:57,040
secret spanish fan

498
00:35:57,040 --> 00:35:58,640
what is secrets management in the first

499
00:35:58,640 --> 00:36:00,960
place

500
00:36:01,040 --> 00:36:02,480
passwords

501
00:36:02,480 --> 00:36:06,720
what about notebooks tokens

502
00:36:08,320 --> 00:36:10,480
not just

503
00:36:10,480 --> 00:36:12,720
what

504
00:36:24,880 --> 00:36:26,960
it's

505
00:36:39,200 --> 00:36:41,359
so secrets

506
00:36:41,359 --> 00:36:44,160
in infrastructure land right like

507
00:36:44,160 --> 00:36:45,839
are really hard and they have been

508
00:36:45,839 --> 00:36:48,000
forever because you have this problem of

509
00:36:48,000 --> 00:36:50,320
a container that's

510
00:36:50,320 --> 00:36:52,480
ephemeral right it comes up does its

511
00:36:52,480 --> 00:36:54,320
task and goes away and another one

512
00:36:54,320 --> 00:36:58,000
replaces it so secrets become

513
00:36:58,000 --> 00:36:59,359
an issue

514
00:36:59,359 --> 00:37:00,640
all the way from the bootstrapping

515
00:37:00,640 --> 00:37:02,160
mechanism like how do you even get a

516
00:37:02,160 --> 00:37:04,400
secret to the place it's supposed to be

517
00:37:04,400 --> 00:37:05,839
and how do you

518
00:37:05,839 --> 00:37:08,640
attest that that container that workload

519
00:37:08,640 --> 00:37:10,079
is allowed to

520
00:37:10,079 --> 00:37:12,160
grab the secret use it throw the

521
00:37:12,160 --> 00:37:14,640
environment variable and um

522
00:37:14,640 --> 00:37:16,720
kubernetes hasn't solved this like

523
00:37:16,720 --> 00:37:18,000
battle so

524
00:37:18,000 --> 00:37:20,160
out of the box

525
00:37:20,160 --> 00:37:22,079
if you just use kubernetes you have a

526
00:37:22,079 --> 00:37:24,960
secret object kind secret right and

527
00:37:24,960 --> 00:37:26,240
these are

528
00:37:26,240 --> 00:37:28,240
key value pairs that kubernetes will

529
00:37:28,240 --> 00:37:31,119
store base64 encoded which is the best

530
00:37:31,119 --> 00:37:34,480
level of encryption ever right

531
00:37:42,800 --> 00:37:44,400
by default if you use secrets in

532
00:37:44,400 --> 00:37:47,119
kubernetes ncd which is this key value

533
00:37:47,119 --> 00:37:49,599
store that stores all configuration on

534
00:37:49,599 --> 00:37:51,760
the api itself

535
00:37:51,760 --> 00:37:53,440
your secrets are there right alongside

536
00:37:53,440 --> 00:37:55,280
your other configuration and they're

537
00:37:55,280 --> 00:37:57,680
basically encoded which is not security

538
00:37:57,680 --> 00:37:59,760
obviously it's in coding or

539
00:37:59,760 --> 00:38:02,480
um it's not cushion and

540
00:38:02,480 --> 00:38:04,560
that's not really a strong mechanism to

541
00:38:04,560 --> 00:38:06,320
store these things so

542
00:38:06,320 --> 00:38:08,960
the problem lies in

543
00:38:08,960 --> 00:38:11,119
people are going to choose the easy way

544
00:38:11,119 --> 00:38:13,359
and throw them into kubernetes secrets

545
00:38:13,359 --> 00:38:14,960
and that might not be the best way for

546
00:38:14,960 --> 00:38:17,119
your particular workload right so

547
00:38:17,119 --> 00:38:20,079
there's tools like hashtag fault that

548
00:38:20,079 --> 00:38:22,160
will run inside of kubernetes you could

549
00:38:22,160 --> 00:38:25,440
use aws kms like built-in cloud

550
00:38:25,440 --> 00:38:27,760
key management store that has

551
00:38:27,760 --> 00:38:30,240
decent integrations into kubernetes but

552
00:38:30,240 --> 00:38:32,400
either way um

553
00:38:32,400 --> 00:38:33,599
you're gonna have to actually put some

554
00:38:33,599 --> 00:38:36,560
fog into this like as you build up your

555
00:38:36,560 --> 00:38:39,119
construction

556
00:38:39,200 --> 00:38:41,200
there's also tools like sops has anybody

557
00:38:41,200 --> 00:38:42,960
used subs before

558
00:38:42,960 --> 00:38:45,040
you actually use kms to encrypt the

559
00:38:45,040 --> 00:38:48,880
secret check the secret into git

560
00:38:48,880 --> 00:38:50,560
which actually laughing but it's

561
00:38:50,560 --> 00:38:52,160
actually better than most it's better

562
00:38:52,160 --> 00:38:52,960
than

563
00:38:52,960 --> 00:38:53,680
it

564
00:38:53,680 --> 00:38:55,200
it's actually encrypted it's just the

565
00:38:55,200 --> 00:38:56,800
it's just to keep it it's just the key

566
00:38:56,800 --> 00:38:59,200
material and

567
00:38:59,200 --> 00:39:00,960
that way kubernetes can consume it and

568
00:39:00,960 --> 00:39:02,160
on the fly

569
00:39:02,160 --> 00:39:04,000
at admission into the cluster it reaches

570
00:39:04,000 --> 00:39:06,880
out to kms it doesn't description

571
00:39:06,880 --> 00:39:09,280
yeah people do crazy things um some are

572
00:39:09,280 --> 00:39:10,560
better than others

573
00:39:10,560 --> 00:39:13,560
um

574
00:39:17,680 --> 00:39:19,280
that's a good question so the question

575
00:39:19,280 --> 00:39:21,119
was does kubernetes provide access

576
00:39:21,119 --> 00:39:22,880
policies for the secrets

577
00:39:22,880 --> 00:39:24,640
do you think my answer is yes does

578
00:39:24,640 --> 00:39:27,119
kubernetes provide anything

579
00:39:27,119 --> 00:39:28,560
um

580
00:39:28,560 --> 00:39:30,400
our back is our only

581
00:39:30,400 --> 00:39:32,560
savior here so

582
00:39:32,560 --> 00:39:33,520
the

583
00:39:33,520 --> 00:39:35,359
you have to build an rbac policy that

584
00:39:35,359 --> 00:39:36,400
says

585
00:39:36,400 --> 00:39:37,359
this

586
00:39:37,359 --> 00:39:39,680
particular service account can access

587
00:39:39,680 --> 00:39:42,960
secrets in this date

588
00:39:52,400 --> 00:39:53,520
so

589
00:39:53,520 --> 00:39:55,920
you would use something like uh

590
00:39:55,920 --> 00:39:58,480
even like cube to im or or some sort of

591
00:39:58,480 --> 00:40:02,240
i am bridge that you can say like

592
00:40:02,240 --> 00:40:05,680
this yeah like this workload in here has

593
00:40:05,680 --> 00:40:11,078
the aws i am permissions to talk to kmsp

594
00:40:22,000 --> 00:40:24,640
uh and then the last one outdated and

595
00:40:24,640 --> 00:40:27,920
vulnerable kubernetes components

596
00:40:27,920 --> 00:40:31,359
this is a very overwaspy topic but um

597
00:40:31,359 --> 00:40:33,359
it still stands true in kubernetes right

598
00:40:33,359 --> 00:40:34,319
like

599
00:40:34,319 --> 00:40:36,880
there's legacy correct because things

600
00:40:36,880 --> 00:40:38,720
been running in production for like six

601
00:40:38,720 --> 00:40:40,880
years in some places and if you're

602
00:40:40,880 --> 00:40:42,960
rolling your own clusters

603
00:40:42,960 --> 00:40:44,800
you're you could be on

604
00:40:44,800 --> 00:40:47,680
some scary old stuff that has cbes that

605
00:40:47,680 --> 00:40:49,760
has like missing

606
00:40:49,760 --> 00:40:53,200
security features in entirety um and

607
00:40:53,200 --> 00:40:54,960
it's something like if you're using

608
00:40:54,960 --> 00:40:58,079
managed kubernetes like eks or pj

609
00:40:58,079 --> 00:40:59,200
they're going to take care of a lot of

610
00:40:59,200 --> 00:41:00,480
this stuff for you or at least tell you

611
00:41:00,480 --> 00:41:02,560
where something's on today

612
00:41:02,560 --> 00:41:04,560
but if you're doing your own kubernetes

613
00:41:04,560 --> 00:41:07,720
on prem

614
00:41:12,240 --> 00:41:13,680
so that's the top ten

615
00:41:13,680 --> 00:41:15,920
main questions

616
00:41:15,920 --> 00:41:19,280
we're all gonna go home and just be good

617
00:41:19,280 --> 00:41:21,760
yeah so please if you want to contribute

618
00:41:21,760 --> 00:41:24,400
or have feedback uh

619
00:41:24,400 --> 00:41:29,000
i'd love people to work with uh

620
00:41:46,079 --> 00:41:47,760
yeah that's a great question does

621
00:41:47,760 --> 00:41:49,440
anybody know

622
00:41:49,440 --> 00:41:51,520
what managed kubernetes does differently

623
00:41:51,520 --> 00:41:53,119
than a regular cluster that you would

624
00:41:53,119 --> 00:41:55,040
build yourself

625
00:41:55,040 --> 00:41:56,640
it might have to know they manage to

626
00:41:56,640 --> 00:41:58,400
master those

627
00:41:58,400 --> 00:42:02,440
control points yeah

628
00:42:05,320 --> 00:42:08,419
[Music]

629
00:42:11,440 --> 00:42:12,640
another

630
00:42:12,640 --> 00:42:16,799
thing that we are exploring is about

631
00:42:33,520 --> 00:42:36,079
one good thing is that you can assign

632
00:42:36,079 --> 00:42:38,880
actual security groups to target knots

633
00:42:38,880 --> 00:42:40,960
to their containers drawing products

634
00:42:40,960 --> 00:42:42,800
running at the

635
00:42:42,800 --> 00:42:45,119
nodes

636
00:42:57,760 --> 00:43:00,720
all that it's doing is taking away

637
00:43:00,720 --> 00:43:02,319
the control plane which we kind of

638
00:43:02,319 --> 00:43:03,839
historically

639
00:43:03,839 --> 00:43:07,119
deprecated from the master

640
00:43:07,200 --> 00:43:10,000
and they run it for you so

641
00:43:10,000 --> 00:43:12,480
on that control plane you have ncd you

642
00:43:12,480 --> 00:43:15,520
have the api server you have your

643
00:43:15,520 --> 00:43:17,280
api server is responsible for

644
00:43:17,280 --> 00:43:19,200
authentication

645
00:43:19,200 --> 00:43:20,480
there's a lot of things going on

646
00:43:20,480 --> 00:43:22,560
schedulers are there um

647
00:43:22,560 --> 00:43:25,280
what that does for you is

648
00:43:25,280 --> 00:43:28,480
i mean it takes away the option to shoot

649
00:43:28,480 --> 00:43:30,720
yourself right like there's many

650
00:43:30,720 --> 00:43:33,280
configurations on the control plane

651
00:43:33,280 --> 00:43:36,400
that are vastly misunderstood even by me

652
00:43:36,400 --> 00:43:37,920
today where you're like i don't know if

653
00:43:37,920 --> 00:43:40,640
i turn this off on or change this value

654
00:43:40,640 --> 00:43:42,079
like if

655
00:43:42,079 --> 00:43:44,079
i'm open to the world right so

656
00:43:44,079 --> 00:43:45,760
that's one good thing like

657
00:43:45,760 --> 00:43:47,599
manage kubernetes will give you

658
00:43:47,599 --> 00:43:50,319
basically check boxes to say like i want

659
00:43:50,319 --> 00:43:52,560
this this and this and they don't let

660
00:43:52,560 --> 00:43:54,640
you really leave that you can't press

661
00:43:54,640 --> 00:43:57,119
the sage to your control plane it's it's

662
00:43:57,119 --> 00:43:59,359
truly managed um

663
00:43:59,359 --> 00:44:01,359
the

664
00:44:01,359 --> 00:44:02,160
what

665
00:44:02,160 --> 00:44:03,920
most of this top ten

666
00:44:03,920 --> 00:44:05,200
i still think applies to manage

667
00:44:05,200 --> 00:44:07,440
kubernetes right it's like it does take

668
00:44:07,440 --> 00:44:08,480
away

669
00:44:08,480 --> 00:44:10,880
the tedium of like

670
00:44:10,880 --> 00:44:13,200
rolling upgrades and like making sure

671
00:44:13,200 --> 00:44:16,079
your your operating system of each node

672
00:44:16,079 --> 00:44:16,720
is

673
00:44:16,720 --> 00:44:17,920
you know within

674
00:44:17,920 --> 00:44:19,040
like not

675
00:44:19,040 --> 00:44:20,880
version

676
00:44:20,880 --> 00:44:22,720
what it won't do is any of the workloads

677
00:44:22,720 --> 00:44:24,880
to your stuff you know privilege like a

678
00:44:24,880 --> 00:44:26,720
security context block

679
00:44:26,720 --> 00:44:28,079
totally up to you

680
00:44:28,079 --> 00:44:29,200
um

681
00:44:29,200 --> 00:44:30,880
and

682
00:44:30,880 --> 00:44:31,760
it

683
00:44:31,760 --> 00:44:34,640
it does have good helpers into cloud

684
00:44:34,640 --> 00:44:37,920
infrastructure things kms and like i am

685
00:44:37,920 --> 00:44:39,599
it's going to

686
00:44:39,599 --> 00:44:41,920
integrate deeper with that so

687
00:44:41,920 --> 00:44:43,200
i would say

688
00:44:43,200 --> 00:44:44,720
if you don't have a reason to do your

689
00:44:44,720 --> 00:44:47,359
own kubernetes don't like there's

690
00:44:47,359 --> 00:44:50,480
there's no glory in

691
00:44:53,839 --> 00:44:55,760
there's a project kelsey hightower put

692
00:44:55,760 --> 00:44:56,720
out

693
00:44:56,720 --> 00:45:00,240
because kubernetes the hard way like

694
00:45:00,240 --> 00:45:02,800
like three years ago and

695
00:45:02,800 --> 00:45:05,760
it's crazy to like roll out kubernetes

696
00:45:05,760 --> 00:45:07,760
from scratch um there's a lot of stuff

697
00:45:07,760 --> 00:45:08,720
so

698
00:45:08,720 --> 00:45:10,400
yeah i mean managed kubernetes is great

699
00:45:10,400 --> 00:45:13,119
and i think it's

700
00:45:13,200 --> 00:45:15,760
for 90 of users it's the best thing and

701
00:45:15,760 --> 00:45:17,359
then some people need to do it

702
00:45:17,359 --> 00:45:19,119
themselves so hopefully they answer some

703
00:45:19,119 --> 00:45:20,079
questions

704
00:45:20,079 --> 00:45:22,319
oh there's a lot of chat going on

705
00:45:22,319 --> 00:45:24,400
no questions

706
00:45:24,400 --> 00:45:26,400
you're on it okay

707
00:45:26,400 --> 00:45:27,680
um

708
00:45:27,680 --> 00:45:31,960
okay well let's play with the cluster

709
00:45:32,960 --> 00:45:34,400
i'll come

710
00:45:34,400 --> 00:45:36,560
to my big list of doom out at the end i

711
00:45:36,560 --> 00:45:38,799
guess

712
00:45:40,160 --> 00:45:41,119
so

713
00:45:41,119 --> 00:45:45,880
i'm going to do this with you all

714
00:45:46,319 --> 00:45:47,599
and

715
00:45:47,599 --> 00:45:49,839
i think do we have until 4 pm

716
00:45:49,839 --> 00:45:50,880
that's true

717
00:45:50,880 --> 00:45:52,560
give or take okay

718
00:45:52,560 --> 00:45:54,480
so i can have a beer at 3 30 while i do

719
00:45:54,480 --> 00:45:56,640
this

720
00:45:57,359 --> 00:46:00,240
um is this helpful

721
00:46:00,240 --> 00:46:01,200
very good

722
00:46:01,200 --> 00:46:03,439
okay

723
00:46:05,359 --> 00:46:08,078
oh magnified

724
00:46:11,119 --> 00:46:14,960
so i just got this machine

725
00:46:22,640 --> 00:46:24,560
okay all right so

726
00:46:24,560 --> 00:46:27,280
um we'll see how far we get through

727
00:46:27,280 --> 00:46:29,119
this

728
00:46:29,119 --> 00:46:31,359
test

729
00:46:33,890 --> 00:46:34,900
[Applause]

730
00:46:34,900 --> 00:46:36,310
[Music]

731
00:46:36,310 --> 00:46:41,270
[Applause]

732
00:46:55,200 --> 00:46:59,520
so this is a attack defense

733
00:46:59,520 --> 00:47:00,400
sort of

734
00:47:00,400 --> 00:47:02,960
ctf style uh

735
00:47:02,960 --> 00:47:06,720
workshop i guess so i gave it with a few

736
00:47:06,720 --> 00:47:08,880
other folks brad eastman tavi sable

737
00:47:08,880 --> 00:47:10,960
peter benjamin awesome

738
00:47:10,960 --> 00:47:13,599
at kubecon 2019. don't let it deceive

739
00:47:13,599 --> 00:47:14,880
you um

740
00:47:14,880 --> 00:47:17,920
it's been updated over that time and

741
00:47:17,920 --> 00:47:19,599
actually nothing changes in kubernetes

742
00:47:19,599 --> 00:47:20,880
so it's the same

743
00:47:20,880 --> 00:47:22,880
difference

744
00:47:22,880 --> 00:47:26,400
and the whole premise here is

745
00:47:26,400 --> 00:47:28,720
giving you all a tool because we won't

746
00:47:28,720 --> 00:47:30,480
get through every single part of this

747
00:47:30,480 --> 00:47:31,359
but

748
00:47:31,359 --> 00:47:33,599
giving you a tool to actually

749
00:47:33,599 --> 00:47:35,520
take what we just talked about in the

750
00:47:35,520 --> 00:47:38,400
top 10 and like do it right because it's

751
00:47:38,400 --> 00:47:40,160
not fun to just talk to you

752
00:47:40,160 --> 00:47:41,680
um

753
00:47:41,680 --> 00:47:43,280
what we're going to do

754
00:47:43,280 --> 00:47:45,040
is

755
00:47:45,040 --> 00:47:47,119
uh just go through step by step so is

756
00:47:47,119 --> 00:47:49,040
anybody going to follow along

757
00:47:49,040 --> 00:47:50,000
in like

758
00:47:50,000 --> 00:47:52,960
typing land okay

759
00:48:05,440 --> 00:48:06,880
this

760
00:48:06,880 --> 00:48:09,599
you could leave this cluster up for like

761
00:48:09,599 --> 00:48:12,079
a week it would cost like three dollars

762
00:48:12,079 --> 00:48:15,040
it would i mean it would be really

763
00:48:15,040 --> 00:48:17,280
yeah it's a single node like it's like

764
00:48:17,280 --> 00:48:20,079
my micro instance

765
00:48:20,079 --> 00:48:21,839
clown provider is like

766
00:48:21,839 --> 00:48:23,839
they give you the control plate for free

767
00:48:23,839 --> 00:48:26,240
you know until you accidentally spin up

768
00:48:26,240 --> 00:48:28,960
45 nodes in your dose full of three

769
00:48:28,960 --> 00:48:30,800
thousand dollars

770
00:48:30,800 --> 00:48:33,440
from experience

771
00:48:33,440 --> 00:48:35,200
um so

772
00:48:35,200 --> 00:48:38,400
this is using gke

773
00:48:38,400 --> 00:48:40,640
and

774
00:48:40,800 --> 00:48:44,559
gke is superior for developer ergonomics

775
00:48:44,559 --> 00:48:46,240
we'll just say that it

776
00:48:46,240 --> 00:48:48,400
has a bunch of stuff that makes using

777
00:48:48,400 --> 00:48:50,960
kubernetes not terrible um

778
00:48:50,960 --> 00:48:51,920
i know

779
00:48:51,920 --> 00:48:52,880
it's not

780
00:48:52,880 --> 00:48:54,960
better or worse than eks from a security

781
00:48:54,960 --> 00:48:57,119
standpoint per se it's just for

782
00:48:57,119 --> 00:48:58,720
environments like this

783
00:48:58,720 --> 00:49:01,119
it's pretty slick

784
00:49:01,119 --> 00:49:03,200
so let's see if this will work

785
00:49:03,200 --> 00:49:04,240
um

786
00:49:04,240 --> 00:49:07,598
of course i don't have permission

787
00:49:07,760 --> 00:49:11,440
i'm going to do this in my account

788
00:49:14,000 --> 00:49:16,079
so if you are following along this will

789
00:49:16,079 --> 00:49:18,319
require you

790
00:49:18,319 --> 00:49:19,200
to

791
00:49:19,200 --> 00:49:21,680
create a google account

792
00:49:21,680 --> 00:49:22,800
um

793
00:49:22,800 --> 00:49:27,040
and there's 300 and free credits

794
00:49:27,040 --> 00:49:30,599
that you can use

795
00:49:50,480 --> 00:49:53,480
stand-by

796
00:50:07,040 --> 00:50:10,279
pretty sure

797
00:50:20,960 --> 00:50:25,000
yeah i just created one this

798
00:50:31,040 --> 00:50:32,240
so you're going to want to be logged

799
00:50:32,240 --> 00:50:35,359
into gcp and in a project

800
00:50:35,359 --> 00:50:39,480
so i'm going to select my project

801
00:50:40,160 --> 00:50:44,000
and just to make sure i'm in there

802
00:50:47,040 --> 00:50:51,760
was the mobile uh session hands-on today

803
00:50:51,760 --> 00:50:53,440
i used to do mobile security training

804
00:50:53,440 --> 00:50:56,800
way back in the day that's like

805
00:50:56,800 --> 00:50:59,280
very hard to make the whole like

806
00:50:59,280 --> 00:51:00,640
something that everyone in the audience

807
00:51:00,640 --> 00:51:05,640
can do is like insane um

808
00:51:21,359 --> 00:51:23,200
in there um right let's do this again

809
00:51:23,200 --> 00:51:25,759
this should be

810
00:51:26,960 --> 00:51:30,680
let's see if this works

811
00:51:43,440 --> 00:51:45,359
so that button

812
00:51:45,359 --> 00:51:50,000
that button that you click has

813
00:51:50,000 --> 00:51:51,920
interesting features it actually opens

814
00:51:51,920 --> 00:51:53,359
up cloud shell

815
00:51:53,359 --> 00:51:56,640
clones a git repository into cloud shell

816
00:51:56,640 --> 00:51:58,559
runs a setup script and gets the whole

817
00:51:58,559 --> 00:52:00,319
environment kind of ready to go with the

818
00:52:00,319 --> 00:52:02,480
cluster

819
00:52:02,480 --> 00:52:03,440
so

820
00:52:03,440 --> 00:52:06,800
gcp has a really nice built-in terminal

821
00:52:06,800 --> 00:52:09,119
ide which is kind of why we choose it

822
00:52:09,119 --> 00:52:10,079
for this

823
00:52:10,079 --> 00:52:11,839
workshop

824
00:52:11,839 --> 00:52:13,839
and

825
00:52:13,839 --> 00:52:15,440
what's going to happen is it's going to

826
00:52:15,440 --> 00:52:19,040
spin up a single node gke

827
00:52:19,040 --> 00:52:20,800
someday

828
00:52:20,800 --> 00:52:22,640
kind of feels like it

829
00:52:22,640 --> 00:52:24,799
and

830
00:52:26,480 --> 00:52:30,839
then we'll be able to play with it

831
00:52:36,640 --> 00:52:38,960
all right

832
00:52:41,119 --> 00:52:43,520
so it should have asked me if i was

833
00:52:43,520 --> 00:52:47,800
going to clone the repository

834
00:53:13,200 --> 00:53:14,960
that's strange well i'm going to do a

835
00:53:14,960 --> 00:53:16,640
manual clone

836
00:53:16,640 --> 00:53:18,400
so

837
00:53:18,400 --> 00:53:20,000
this cloud shell setup is really

838
00:53:20,000 --> 00:53:21,920
important it actually spins up the whole

839
00:53:21,920 --> 00:53:22,800
thing

840
00:53:22,800 --> 00:53:26,319
this button is supposed to do

841
00:53:26,839 --> 00:53:30,000
that i don't know why it isn't so if you

842
00:53:30,000 --> 00:53:32,079
look

843
00:53:32,079 --> 00:53:33,359
did it climb

844
00:53:33,359 --> 00:53:35,520
my cloud shell is really messed up right

845
00:53:35,520 --> 00:53:37,680
now

846
00:53:38,880 --> 00:53:43,040
so if you do an ls um first make sure

847
00:53:43,040 --> 00:53:44,720
there's a directory called cloud shell

848
00:53:44,720 --> 00:53:48,879
setup i i will i'll be there with you

849
00:53:52,720 --> 00:53:54,800
we'll all get on the same page

850
00:53:54,800 --> 00:53:57,839
in one second

851
00:53:58,079 --> 00:53:59,680
so

852
00:53:59,680 --> 00:54:03,200
what this is supposed to do

853
00:54:04,640 --> 00:54:06,400
is run this command

854
00:54:06,400 --> 00:54:08,880
get clone

855
00:54:08,880 --> 00:54:11,760
watch shell setup and once you do that

856
00:54:11,760 --> 00:54:13,040
you'll see

857
00:54:13,040 --> 00:54:15,280
the setup is here

858
00:54:15,280 --> 00:54:17,040
there's that's kind of the indicator

859
00:54:17,040 --> 00:54:18,800
that things are working

860
00:54:18,800 --> 00:54:21,200
my gcp account is not

861
00:54:21,200 --> 00:54:25,480
super happy right now um

862
00:54:36,240 --> 00:54:38,959
no we're trying to

863
00:54:42,450 --> 00:54:45,660
[Music]

864
00:54:48,400 --> 00:54:51,400
uh

865
00:54:52,000 --> 00:54:53,920
i would use like an incognito browser

866
00:54:53,920 --> 00:54:54,960
maybe

867
00:54:54,960 --> 00:54:57,920
google doesn't handle

868
00:54:57,920 --> 00:55:00,640
gcp specifically doesn't handle consoles

869
00:55:00,640 --> 00:55:04,240
across different accounts very well

870
00:55:04,240 --> 00:55:06,400
yeah i've kind of like given up on that

871
00:55:06,400 --> 00:55:08,480
and just use profiles now inside of

872
00:55:08,480 --> 00:55:11,680
chrome it's like it's a problem

873
00:55:11,680 --> 00:55:12,880
so

874
00:55:12,880 --> 00:55:14,880
once this is cloned

875
00:55:14,880 --> 00:55:16,799
this cloud shell set up

876
00:55:16,799 --> 00:55:17,839
pick it up

877
00:55:17,839 --> 00:55:19,440
you'll see there's a bunch of stuff in

878
00:55:19,440 --> 00:55:22,960
here the thing we care about right now

879
00:55:22,960 --> 00:55:26,079
is setup.sh

880
00:55:26,079 --> 00:55:27,119
and

881
00:55:27,119 --> 00:55:29,359
this is going to put me through a couple

882
00:55:29,359 --> 00:55:31,200
steps that

883
00:55:31,200 --> 00:55:32,480
i choose

884
00:55:32,480 --> 00:55:33,760
and it's going to have me create a

885
00:55:33,760 --> 00:55:35,359
password i'll explain what that is in a

886
00:55:35,359 --> 00:55:36,880
minute um

887
00:55:36,880 --> 00:55:40,000
but for now we're gonna let this project

888
00:55:40,000 --> 00:55:42,160
stay the same

889
00:55:42,160 --> 00:55:45,359
uh skates jimmy two two

890
00:55:45,359 --> 00:55:46,960
six six zero

891
00:55:46,960 --> 00:55:49,839
and then

892
00:55:50,079 --> 00:55:53,680
i'm going to make it oh wasp

893
00:55:53,680 --> 00:55:57,359
so this password is

894
00:55:57,359 --> 00:56:00,559
like gcp do whatever it needs to do

895
00:56:00,559 --> 00:56:02,160
this password we're going to use for our

896
00:56:02,160 --> 00:56:04,640
little big shell our uh hacker shell

897
00:56:04,640 --> 00:56:07,359
that gets created in the web application

898
00:56:07,359 --> 00:56:09,200
so when we originally presented this

899
00:56:09,200 --> 00:56:11,599
tutorial it was in front of 400 people

900
00:56:11,599 --> 00:56:13,839
so the password's only there so we

901
00:56:13,839 --> 00:56:15,680
didn't get messed with essentially like

902
00:56:15,680 --> 00:56:17,839
actually packed

903
00:56:17,839 --> 00:56:20,880
in the process so

904
00:56:23,599 --> 00:56:26,799
billing quote increase

905
00:56:26,799 --> 00:56:28,960
okay

906
00:56:28,960 --> 00:56:30,960
you know what i'm gonna do

907
00:56:30,960 --> 00:56:33,200
let's not be in this

908
00:56:33,200 --> 00:56:37,118
account because it's giving me problems

909
00:56:37,760 --> 00:56:39,920
this is my corporate account so maybe we

910
00:56:39,920 --> 00:56:41,599
just ran out of

911
00:56:41,599 --> 00:56:45,000
dc funding

912
00:56:50,079 --> 00:56:53,359
did you provide a credit card in

913
00:56:53,359 --> 00:56:57,078
as part of this yet

914
00:57:01,599 --> 00:57:03,280
you should be able to create a single

915
00:57:03,280 --> 00:57:05,680
cluster

916
00:57:08,799 --> 00:57:09,839
yeah

917
00:57:09,839 --> 00:57:13,720
it don't get created automatically

918
00:57:21,119 --> 00:57:22,799
you have to get the cloud shell set up

919
00:57:22,799 --> 00:57:25,040
right now okay and then that setup

920
00:57:25,040 --> 00:57:26,720
script you actually won't need to click

921
00:57:26,720 --> 00:57:30,359
anything um

922
00:57:49,040 --> 00:57:52,040
uh

923
00:58:00,079 --> 00:58:02,640
all right this should have plenty of

924
00:58:02,640 --> 00:58:04,559
money

925
00:58:04,559 --> 00:58:06,559
to do

926
00:58:06,559 --> 00:58:09,200
okay there we go um

927
00:58:09,200 --> 00:58:11,440
you're getting a quota increase

928
00:58:11,440 --> 00:58:12,240
uh

929
00:58:12,240 --> 00:58:14,799
request

930
00:58:18,160 --> 00:58:21,200
the setup script you got through it

931
00:58:21,200 --> 00:58:23,760
right you cloned it yeah good now do

932
00:58:23,760 --> 00:58:26,000
um

933
00:58:26,079 --> 00:58:29,839
just do the next step yep next step

934
00:58:30,319 --> 00:58:32,000
i was just in the wrong

935
00:58:32,000 --> 00:58:34,160
so this is what

936
00:58:34,160 --> 00:58:37,200
this is what we should be seeing

937
00:58:37,200 --> 00:58:39,119
is

938
00:58:39,119 --> 00:58:41,440
this sound script does all sorts of

939
00:58:41,440 --> 00:58:43,680
crazy stuff it creates a project

940
00:58:43,680 --> 00:58:45,839
it deploys

941
00:58:45,839 --> 00:58:47,440
it builds the cluster and deploys the

942
00:58:47,440 --> 00:58:49,359
cluster and places a bunch of workloads

943
00:58:49,359 --> 00:58:51,280
inside of it so it's just

944
00:58:51,280 --> 00:58:54,079
in theory if gcp cooperates

945
00:58:54,079 --> 00:58:57,599
should have everything ready for us

946
00:58:57,599 --> 00:59:01,000
in this project skates jimmy vesta

947
00:59:01,000 --> 00:59:04,960
11706 so we just have to get better

948
00:59:04,960 --> 00:59:06,559
and let me see if i can help with the

949
00:59:06,559 --> 00:59:09,559
building

950
00:59:26,720 --> 00:59:28,240
or

951
00:59:28,240 --> 00:59:31,240
yeah

952
00:59:36,240 --> 00:59:39,240
um

953
00:59:46,000 --> 00:59:47,359
are you still

954
00:59:47,359 --> 00:59:49,300
did you know

955
00:59:49,300 --> 00:59:51,920
[Music]

956
00:59:51,920 --> 00:59:55,000
you know

957
00:59:56,380 --> 00:59:59,669
[Music]

958
01:00:04,480 --> 01:00:07,480
um

959
01:00:08,970 --> 01:00:12,069
[Music]

960
01:00:23,920 --> 01:00:27,760
did it bounce you out to like

961
01:00:27,760 --> 01:00:30,809
[Music]

962
01:00:55,200 --> 01:00:56,559
all right

963
01:00:56,559 --> 01:00:59,559
um

964
01:01:18,480 --> 01:01:22,119
some way to switch

965
01:01:38,559 --> 01:01:41,880
one more time

966
01:02:11,380 --> 01:02:14,449
[Music]

967
01:02:43,760 --> 01:02:47,079
search projects

968
01:02:53,190 --> 01:02:57,030
[Music]

969
01:03:01,280 --> 01:03:05,200
all right so this is almost done

970
01:03:10,319 --> 01:03:14,038
i'll get you i'll get you

971
01:03:17,440 --> 01:03:19,760
all right so this setup script is going

972
01:03:19,760 --> 01:03:21,760
through

973
01:03:21,760 --> 01:03:23,119
creating

974
01:03:23,119 --> 01:03:24,960
i think four deployments a bunch of

975
01:03:24,960 --> 01:03:26,160
services

976
01:03:26,160 --> 01:03:28,799
it's dropping ctf flags all over the

977
01:03:28,799 --> 01:03:31,119
place

978
01:03:31,200 --> 01:03:34,480
and applying bonus content so

979
01:03:34,480 --> 01:03:36,559
if you made it that far and you want to

980
01:03:36,559 --> 01:03:39,599
see what that looks like

981
01:03:41,200 --> 01:03:44,520
in the ui

982
01:03:46,000 --> 01:03:50,000
you can see here's our cluster

983
01:03:50,720 --> 01:03:53,520
and one node two cpu

984
01:03:53,520 --> 01:03:55,039
it's

985
01:03:55,039 --> 01:03:56,720
seven and a half gigabytes so a little

986
01:03:56,720 --> 01:03:59,200
tiny tester and

987
01:03:59,200 --> 01:04:01,439
now

988
01:04:02,480 --> 01:04:03,760
we want to make sure that we have

989
01:04:03,760 --> 01:04:05,920
connectivity to it

990
01:04:05,920 --> 01:04:08,000
so i'm going to run cube ctl git pods

991
01:04:08,000 --> 01:04:09,760
all name spaces

992
01:04:09,760 --> 01:04:11,680
this is the classic command you run into

993
01:04:11,680 --> 01:04:13,119
kubernetes

994
01:04:13,119 --> 01:04:14,799
and you can see all the stuff that just

995
01:04:14,799 --> 01:04:17,440
got deployed

996
01:04:18,160 --> 01:04:20,559
anybody get to this point yet

997
01:04:20,559 --> 01:04:23,200
except for me

998
01:04:24,559 --> 01:04:26,960
or did we

999
01:04:56,000 --> 01:04:59,000
is

1000
01:05:20,720 --> 01:05:23,118
it's okay

1001
01:05:34,799 --> 01:05:37,038
right

1002
01:05:45,359 --> 01:05:48,359
uh

1003
01:05:52,480 --> 01:05:55,480
um

1004
01:06:08,400 --> 01:06:11,400
um

1005
01:06:37,920 --> 01:06:40,920
foreign

1006
01:07:00,799 --> 01:07:03,799
okay

1007
01:07:26,880 --> 01:07:28,960
like

1008
01:07:38,079 --> 01:07:41,079
is

1009
01:07:51,870 --> 01:07:54,319
[Music]

1010
01:07:54,319 --> 01:07:57,319
is

1011
01:08:12,960 --> 01:08:16,680
all right we're gonna move forward

1012
01:08:16,680 --> 01:08:19,879
[Music]

1013
01:08:37,279 --> 01:08:38,719
okay

1014
01:08:38,719 --> 01:08:40,799
so apparently google removed some stuff

1015
01:08:40,799 --> 01:08:44,479
last week and in google fashion

1016
01:08:44,640 --> 01:08:46,319
anyways i'll go through

1017
01:08:46,319 --> 01:08:49,600
um step by step

1018
01:08:50,238 --> 01:08:52,479
it's

1019
01:09:04,399 --> 01:09:06,960
but you

1020
01:09:46,799 --> 01:09:50,319
i'm going gonna press forward so

1021
01:09:50,319 --> 01:09:52,158
the whole the whole premise of this

1022
01:09:52,158 --> 01:09:54,640
little ctf is

1023
01:09:54,640 --> 01:09:57,760
this red and blue right such as life and

1024
01:09:57,760 --> 01:09:59,440
the red side

1025
01:09:59,440 --> 01:10:00,840
is the attack

1026
01:10:00,840 --> 01:10:04,000
and the attacker in this case

1027
01:10:04,000 --> 01:10:05,600
is kind of a script kitty doesn't really

1028
01:10:05,600 --> 01:10:07,520
know what they're doing and leverages

1029
01:10:07,520 --> 01:10:09,440
off the shelf attacks

1030
01:10:09,440 --> 01:10:13,520
so there's another helper script that

1031
01:10:13,520 --> 01:10:16,800
pretending i am red

1032
01:10:21,260 --> 01:10:24,399
[Music]

1033
01:10:25,440 --> 01:10:26,880
so

1034
01:10:26,880 --> 01:10:28,480
to get that shell

1035
01:10:28,480 --> 01:10:31,280
under the hood

1036
01:10:31,280 --> 01:10:32,960
we created some stuff

1037
01:10:32,960 --> 01:10:35,120
and

1038
01:10:35,120 --> 01:10:36,560
you can see here

1039
01:10:36,560 --> 01:10:38,239
you've got shells our system popped

1040
01:10:38,239 --> 01:10:39,679
another box for you

1041
01:10:39,679 --> 01:10:42,000
the fund's been deducted and you can

1042
01:10:42,000 --> 01:10:44,560
access your shelf from right here

1043
01:10:44,560 --> 01:10:46,080
this is what we're all supposed to be

1044
01:10:46,080 --> 01:10:47,760
seeing google didn't

1045
01:10:47,760 --> 01:10:49,199
cause problems

1046
01:10:49,199 --> 01:10:49,920
so

1047
01:10:49,920 --> 01:10:52,239
this web show

1048
01:10:52,239 --> 01:10:54,639
is

1049
01:10:55,679 --> 01:10:56,880
going to be

1050
01:10:56,880 --> 01:10:59,199
jimmy underscore

1051
01:10:59,199 --> 01:11:01,839
don't hack me

1052
01:11:04,880 --> 01:11:07,280
so this is our pretend

1053
01:11:07,280 --> 01:11:12,440
theoretical hacker show all right

1054
01:11:19,850 --> 01:11:22,919
[Music]

1055
01:11:35,840 --> 01:11:37,679
so

1056
01:11:37,679 --> 01:11:39,920
this is how attacks start right like

1057
01:11:39,920 --> 01:11:41,679
sometimes you buy a shell sometimes you

1058
01:11:41,679 --> 01:11:43,840
stumble across something and

1059
01:11:43,840 --> 01:11:45,520
you don't know where you're at so this

1060
01:11:45,520 --> 01:11:48,080
is the journey of finding

1061
01:11:48,080 --> 01:11:50,480
um your way right in

1062
01:11:50,480 --> 01:11:53,360
we don't even know we're in kubernetes

1063
01:11:53,360 --> 01:11:56,960
so the first thing we're gonna do

1064
01:11:56,960 --> 01:11:59,040
is not plan because we don't have time

1065
01:11:59,040 --> 01:12:00,640
we just need to get our cryptocurrency

1066
01:12:00,640 --> 01:12:01,920
writer right

1067
01:12:01,920 --> 01:12:04,239
and we're gonna poke around right so

1068
01:12:04,239 --> 01:12:06,960
these commands

1069
01:12:06,960 --> 01:12:10,239
should look familiar right what

1070
01:12:10,239 --> 01:12:13,040
what's it do

1071
01:12:16,719 --> 01:12:18,719
right

1072
01:12:18,719 --> 01:12:23,360
so my group my uiv

1073
01:12:24,000 --> 01:12:26,000
why would i want this as an attacker

1074
01:12:26,000 --> 01:12:28,480
what's useful about this

1075
01:12:28,480 --> 01:12:30,560
 but permissions

1076
01:12:30,560 --> 01:12:33,440
who i'm like who am i right i'm

1077
01:12:33,440 --> 01:12:36,480
somewhere and i you know i clearly like

1078
01:12:36,480 --> 01:12:38,000
am i rude

1079
01:12:38,000 --> 01:12:41,840
what can i do no i'm not rude so

1080
01:12:41,840 --> 01:12:43,600
that's fine and i'm just going to go

1081
01:12:43,600 --> 01:12:45,199
through

1082
01:12:45,199 --> 01:12:48,080
a couple more commands to

1083
01:12:48,080 --> 01:12:50,320
you know we call this recon right and

1084
01:12:50,320 --> 01:12:52,400
again reminder like this is the

1085
01:12:52,400 --> 01:12:55,760
attacker's lens into this particular

1086
01:12:55,760 --> 01:12:58,239
um scenario

1087
01:12:58,239 --> 01:12:59,199
so

1088
01:12:59,199 --> 01:13:01,440
linux machine is great not working with

1089
01:13:01,440 --> 01:13:03,199
windows sounds good

1090
01:13:03,199 --> 01:13:04,880
um

1091
01:13:04,880 --> 01:13:05,840
thank you

1092
01:13:05,840 --> 01:13:06,719
and

1093
01:13:06,719 --> 01:13:08,960
i'm going to go down through the list

1094
01:13:08,960 --> 01:13:13,040
right what's ps ef

1095
01:13:13,920 --> 01:13:15,600
the list of running problems

1096
01:13:15,600 --> 01:13:16,960
these are the process the pits the

1097
01:13:16,960 --> 01:13:19,120
running process ids that are wrong does

1098
01:13:19,120 --> 01:13:22,239
this look like a regular virtual machine

1099
01:13:22,239 --> 01:13:23,040
no

1100
01:13:23,040 --> 01:13:25,840
why what

1101
01:13:26,320 --> 01:13:28,239
very little right if you were to if you

1102
01:13:28,239 --> 01:13:31,600
were to be on like an ec2 instance

1103
01:13:31,600 --> 01:13:33,600
in this capacity you would definitely

1104
01:13:33,600 --> 01:13:34,320
see

1105
01:13:34,320 --> 01:13:36,159
quite a bit more action in your

1106
01:13:36,159 --> 01:13:38,719
processors right so what's that telling

1107
01:13:38,719 --> 01:13:40,800
you

1108
01:13:43,360 --> 01:13:45,520
it could be a container right

1109
01:13:45,520 --> 01:13:46,560
let's do

1110
01:13:46,560 --> 01:13:49,199
net stats

1111
01:13:50,719 --> 01:13:52,719
what's this telling me

1112
01:13:52,719 --> 01:13:55,360
supports protocols

1113
01:13:55,360 --> 01:13:57,280
3 000 8 000

1114
01:13:57,280 --> 01:14:00,920
nothing that exciting

1115
01:14:12,719 --> 01:14:14,320
so this is the process we're not going

1116
01:14:14,320 --> 01:14:16,880
to go through all this but the

1117
01:14:16,880 --> 01:14:18,560
um

1118
01:14:18,560 --> 01:14:22,000
one thing i am going to show you is this

1119
01:14:22,000 --> 01:14:24,480
little binary called am i contained

1120
01:14:24,480 --> 01:14:26,320
i'm starting to think i'm in a container

1121
01:14:26,320 --> 01:14:29,840
right and um jess brazell wrote this a

1122
01:14:29,840 --> 01:14:32,960
while ago but it still is a really cool

1123
01:14:32,960 --> 01:14:35,440
testing utility or hacker tool depending

1124
01:14:35,440 --> 01:14:37,920
on who you ask and um

1125
01:14:37,920 --> 01:14:38,960
it's going to tell you a little bit

1126
01:14:38,960 --> 01:14:41,199
about your environment

1127
01:14:41,199 --> 01:14:43,520
from a container's perspective so

1128
01:14:43,520 --> 01:14:45,600
this stuff is

1129
01:14:45,600 --> 01:14:49,360
super useful right what's that

1130
01:14:49,360 --> 01:14:50,560
what what's the

1131
01:14:50,560 --> 01:14:51,840
i mean

1132
01:14:51,840 --> 01:14:53,440
right kubernetes right

1133
01:14:53,440 --> 01:14:54,880
we know that

1134
01:14:54,880 --> 01:14:56,800
we set up this

1135
01:14:56,800 --> 01:14:59,360
janky gke cluster but the hacker now

1136
01:14:59,360 --> 01:15:00,320
knows

1137
01:15:00,320 --> 01:15:02,719
i mean kubernetes

1138
01:15:02,719 --> 01:15:04,960
has name spaces pid true that's the host

1139
01:15:04,960 --> 01:15:08,480
pin name space app armor profiles these

1140
01:15:08,480 --> 01:15:11,120
are your linux system capabilities these

1141
01:15:11,120 --> 01:15:12,960
are like what your container runtime is

1142
01:15:12,960 --> 01:15:16,320
allowing you to do to the kernel the the

1143
01:15:16,320 --> 01:15:18,640
calls that you can make so this is

1144
01:15:18,640 --> 01:15:20,560
pretty useful i can do something with

1145
01:15:20,560 --> 01:15:23,560
this

1146
01:15:26,640 --> 01:15:28,640
that's a good question so block system

1147
01:15:28,640 --> 01:15:30,159
calls anybody know what this is in the

1148
01:15:30,159 --> 01:15:33,280
context of a container

1149
01:15:33,520 --> 01:15:35,679
so your container run time

1150
01:15:35,679 --> 01:15:38,080
and this is a whole different topic but

1151
01:15:38,080 --> 01:15:40,239
the container run time is going to take

1152
01:15:40,239 --> 01:15:40,960
the

1153
01:15:40,960 --> 01:15:42,800
comprehensive list that we'll call it

1154
01:15:42,800 --> 01:15:45,280
200 system calls it's going to shrink

1155
01:15:45,280 --> 01:15:47,760
them to do only what it needs to do so

1156
01:15:47,760 --> 01:15:50,650
these are the things that docker or

1157
01:15:50,650 --> 01:15:53,809
[Applause]

1158
01:16:03,520 --> 01:16:05,440
and i know kubernetes

1159
01:16:05,440 --> 01:16:07,199
throws a bunch of environment variables

1160
01:16:07,199 --> 01:16:09,040
around right so let's see what we can

1161
01:16:09,040 --> 01:16:10,239
gather

1162
01:16:10,239 --> 01:16:14,000
it with the end command

1163
01:16:14,640 --> 01:16:16,480
what's n

1164
01:16:16,480 --> 01:16:17,600
environment

1165
01:16:17,600 --> 01:16:19,360
firebird variables right so our

1166
01:16:19,360 --> 01:16:21,120
environment so

1167
01:16:21,120 --> 01:16:22,719
if i grab cube

1168
01:16:22,719 --> 01:16:24,560
i see some stuff right

1169
01:16:24,560 --> 01:16:27,120
so what we're looking at is a bunch of

1170
01:16:27,120 --> 01:16:28,880
we're in a container

1171
01:16:28,880 --> 01:16:31,760
of compromised kubernetes cluster

1172
01:16:31,760 --> 01:16:32,960
and i'm dumping the environment

1173
01:16:32,960 --> 01:16:35,600
variables and these

1174
01:16:35,600 --> 01:16:37,360
every every pod inside of every

1175
01:16:37,360 --> 01:16:38,719
kubernetes cluster is always going to

1176
01:16:38,719 --> 01:16:40,320
have these available

1177
01:16:40,320 --> 01:16:43,040
to the running workload so for now i see

1178
01:16:43,040 --> 01:16:44,239
that

1179
01:16:44,239 --> 01:16:46,880
the most important one being

1180
01:16:46,880 --> 01:16:48,960
this one this is our kubernetes api

1181
01:16:48,960 --> 01:16:51,040
that's the api server with the private

1182
01:16:51,040 --> 01:16:52,880
ip address that i'm going to talk to

1183
01:16:52,880 --> 01:16:55,440
from the inside

1184
01:16:55,440 --> 01:16:57,280
and

1185
01:16:57,280 --> 01:17:00,320
i'm going to run some more commands

1186
01:17:00,320 --> 01:17:01,040
but

1187
01:17:01,040 --> 01:17:02,719
the most important one

1188
01:17:02,719 --> 01:17:05,520
is let's just install cube ctl does

1189
01:17:05,520 --> 01:17:09,360
anybody ever use cube ctl before

1190
01:17:11,040 --> 01:17:14,080
it's your controller

1191
01:17:14,080 --> 01:17:19,040
it is um so cube ctl

1192
01:17:19,040 --> 01:17:20,320
is

1193
01:17:20,320 --> 01:17:22,320
so the kubernetes api

1194
01:17:22,320 --> 01:17:23,120
is

1195
01:17:23,120 --> 01:17:25,040
accessible through curl or i mean

1196
01:17:25,040 --> 01:17:27,120
whatever it's just an api at a point

1197
01:17:27,120 --> 01:17:28,880
cube ctl wraps all these functions

1198
01:17:28,880 --> 01:17:30,880
together and lets you interact with it

1199
01:17:30,880 --> 01:17:32,640
much more nicely

1200
01:17:32,640 --> 01:17:35,199
so i'm going to install cube ctl

1201
01:17:35,199 --> 01:17:36,480
and i'm going to try to get some

1202
01:17:36,480 --> 01:17:38,000
information about the kubernetes

1203
01:17:38,000 --> 01:17:40,560
environment that i'm in so cube ctl get

1204
01:17:40,560 --> 01:17:41,840
all

1205
01:17:41,840 --> 01:17:43,360
this is actually going to go attempt to

1206
01:17:43,360 --> 01:17:47,520
get everything running in cluster

1207
01:17:47,520 --> 01:17:48,960
and i'm not allowed to do that it's

1208
01:17:48,960 --> 01:17:51,600
actually a funny time out

1209
01:17:51,600 --> 01:17:54,320
with this cluster

1210
01:17:54,320 --> 01:17:57,040
but i'm going to do

1211
01:18:10,960 --> 01:18:11,679
see

1212
01:18:11,679 --> 01:18:14,320
so cube ctl is going to let us

1213
01:18:14,320 --> 01:18:16,960
traverse and navigate the kubernetes

1214
01:18:16,960 --> 01:18:21,040
um api so what is this i did a cube ctl

1215
01:18:21,040 --> 01:18:24,320
git po dash dash all dash dash spaces

1216
01:18:24,320 --> 01:18:27,840
does anybody know what's happening here

1217
01:18:29,040 --> 01:18:30,640
okay

1218
01:18:30,640 --> 01:18:32,560
our back step right this is our back

1219
01:18:32,560 --> 01:18:34,400
telling me

1220
01:18:34,400 --> 01:18:36,239
you're not allowed but

1221
01:18:36,239 --> 01:18:38,560
this error is really useful right

1222
01:18:38,560 --> 01:18:40,880
because

1223
01:18:40,880 --> 01:18:43,520
who is this

1224
01:18:44,239 --> 01:18:47,360
user system service account prd

1225
01:18:47,360 --> 01:18:48,560
default

1226
01:18:48,560 --> 01:18:51,600
so kubernetes will automatically

1227
01:18:51,600 --> 01:18:54,159
place a service account token into every

1228
01:18:54,159 --> 01:18:56,719
name space that your pod

1229
01:18:56,719 --> 01:18:58,320
can use if it wants

1230
01:18:58,320 --> 01:18:59,600
and

1231
01:18:59,600 --> 01:19:02,000
this error is telling me

1232
01:19:02,000 --> 01:19:04,480
this service account in the prd name

1233
01:19:04,480 --> 01:19:06,800
space namespace always comes after the

1234
01:19:06,800 --> 01:19:09,280
service account um

1235
01:19:09,280 --> 01:19:10,800
and it's just the default service

1236
01:19:10,800 --> 01:19:12,640
account can't access this resource so

1237
01:19:12,640 --> 01:19:15,280
i'm in the prd date space which is

1238
01:19:15,280 --> 01:19:18,480
useful sounds like product

1239
01:19:18,560 --> 01:19:20,719
so

1240
01:19:21,679 --> 01:19:25,440
luckily cube ctl as again helper or

1241
01:19:25,440 --> 01:19:28,000
hacker function gives you this right

1242
01:19:28,000 --> 01:19:30,320
cube ctl off can i

1243
01:19:30,320 --> 01:19:32,400
so instead of me trying every command

1244
01:19:32,400 --> 01:19:34,320
under the sun i'm just going to ask the

1245
01:19:34,320 --> 01:19:37,360
api like what am i allowed to do wow

1246
01:19:37,360 --> 01:19:38,880
yeah it's gonna

1247
01:19:38,880 --> 01:19:40,960
tell me right like

1248
01:19:40,960 --> 01:19:42,640
i think if you were debugging this is

1249
01:19:42,640 --> 01:19:44,400
useful but this really just seems like a

1250
01:19:44,400 --> 01:19:47,600
hacker right it's like there's no other

1251
01:19:47,600 --> 01:19:49,600
great reason to need it so

1252
01:19:49,600 --> 01:19:52,400
um the ultimate question for red for

1253
01:19:52,400 --> 01:19:54,320
this first scenario is like can i create

1254
01:19:54,320 --> 01:19:55,360
pots

1255
01:19:55,360 --> 01:19:57,679
right a pod is a container running

1256
01:19:57,679 --> 01:19:59,360
inside of kubernetes and i have a

1257
01:19:59,360 --> 01:20:01,520
cryptocurrency miner

1258
01:20:01,520 --> 01:20:03,440
that i bought from a friend that i want

1259
01:20:03,440 --> 01:20:05,360
to get running so i'm going to ask the

1260
01:20:05,360 --> 01:20:07,040
api

1261
01:20:07,040 --> 01:20:09,840
can i create plugs

1262
01:20:09,840 --> 01:20:11,280
that's nice

1263
01:20:11,280 --> 01:20:13,920
yes that's a nice response this is a

1264
01:20:13,920 --> 01:20:16,639
very nice response

1265
01:20:16,639 --> 01:20:17,360
so

1266
01:20:17,360 --> 01:20:20,800
if that's the case what i'm going to do

1267
01:20:20,800 --> 01:20:22,560
is

1268
01:20:22,560 --> 01:20:24,400
build a deployment

1269
01:20:24,400 --> 01:20:26,080
from inside i'm going to run this

1270
01:20:26,080 --> 01:20:28,880
deployment and you can see here

1271
01:20:28,880 --> 01:20:30,560
it pulls in an image

1272
01:20:30,560 --> 01:20:32,960
from this is a docker hub

1273
01:20:32,960 --> 01:20:34,960
called bitcoin arrow

1274
01:20:34,960 --> 01:20:36,960
and runs command this is my entry money

1275
01:20:36,960 --> 01:20:38,239
money money

1276
01:20:38,239 --> 01:20:40,960
and i give it some memory requests and

1277
01:20:40,960 --> 01:20:45,040
limits and cpu limits and i'm going to

1278
01:20:45,040 --> 01:20:47,280
spin this up on the cluster

1279
01:20:47,280 --> 01:20:50,960
this is going to exist

1280
01:20:51,280 --> 01:20:52,000
in

1281
01:20:52,000 --> 01:20:54,080
the prv name space because that's where

1282
01:20:54,080 --> 01:20:55,360
my service account token is

1283
01:20:55,360 --> 01:20:56,880
authenticated that's where i'm talking

1284
01:20:56,880 --> 01:20:58,840
to right now

1285
01:20:58,840 --> 01:21:02,080
and it should take 10 seconds and then i

1286
01:21:02,080 --> 01:21:05,280
write qct i'll get pause

1287
01:21:05,280 --> 01:21:07,920
see here

1288
01:21:08,400 --> 01:21:10,239
bitcoin arrow right

1289
01:21:10,239 --> 01:21:12,639
so the impact of this

1290
01:21:12,639 --> 01:21:14,800
is through a shell

1291
01:21:14,800 --> 01:21:16,320
there's a lot of things that weren't set

1292
01:21:16,320 --> 01:21:17,600
up appropriately from a security

1293
01:21:17,600 --> 01:21:19,360
standpoint obviously that's the

1294
01:21:19,360 --> 01:21:20,480
intention

1295
01:21:20,480 --> 01:21:21,280
but

1296
01:21:21,280 --> 01:21:23,120
through a shell and some command line

1297
01:21:23,120 --> 01:21:25,199
access i'm not rude right like i

1298
01:21:25,199 --> 01:21:26,560
actually didn't even escalate dribble

1299
01:21:26,560 --> 01:21:28,960
just out of the container i leveraged

1300
01:21:28,960 --> 01:21:31,679
the built-in kubernetes service account

1301
01:21:31,679 --> 01:21:34,400
token that had some privileges but not

1302
01:21:34,400 --> 01:21:35,840
all the privileges

1303
01:21:35,840 --> 01:21:38,159
and i used it to talk to the kubernetes

1304
01:21:38,159 --> 01:21:41,199
api spin on the pod that had my payload

1305
01:21:41,199 --> 01:21:42,400
in it this could be anything

1306
01:21:42,400 --> 01:21:44,880
cryptocurrency miner some other backdoor

1307
01:21:44,880 --> 01:21:45,840
or whatever

1308
01:21:45,840 --> 01:21:48,159
and now i have

1309
01:21:48,159 --> 01:21:49,920
command execution essentially right like

1310
01:21:49,920 --> 01:21:53,440
it's just a container on this host

1311
01:21:53,440 --> 01:21:56,559
is anybody successful

1312
01:21:57,920 --> 01:22:00,639
can you assume other roles

1313
01:22:00,639 --> 01:22:03,520
um through our back

1314
01:22:03,520 --> 01:22:05,840
you can't yeah so our back has an

1315
01:22:05,840 --> 01:22:08,320
impersonate functionality that's

1316
01:22:08,320 --> 01:22:09,679
not part of this

1317
01:22:09,679 --> 01:22:12,400
like these examples but impersonate

1318
01:22:12,400 --> 01:22:16,639
lets you assume infinite like anything

1319
01:22:16,639 --> 01:22:20,480
and that's where things get really hairy

1320
01:22:20,480 --> 01:22:22,639
you can move around

1321
01:22:22,639 --> 01:22:25,120
yeah and some roles

1322
01:22:25,120 --> 01:22:27,840
just like linux system kind of system

1323
01:22:27,840 --> 01:22:28,960
calls like

1324
01:22:28,960 --> 01:22:30,560
you don't know the implication of giving

1325
01:22:30,560 --> 01:22:32,239
access to it right you think you can

1326
01:22:32,239 --> 01:22:34,080
pivot as you get access to a certain

1327
01:22:34,080 --> 01:22:34,960
thing

1328
01:22:34,960 --> 01:22:36,080
um

1329
01:22:36,080 --> 01:22:37,840
so that's scenario one fairly

1330
01:22:37,840 --> 01:22:39,040
straightforward

1331
01:22:39,040 --> 01:22:41,199
um

1332
01:22:41,199 --> 01:22:43,040
we have some time left i'll go through

1333
01:22:43,040 --> 01:22:45,600
this until whenever um

1334
01:22:45,600 --> 01:22:46,560
so

1335
01:22:46,560 --> 01:22:50,580
mission accomplished i feel good

1336
01:22:50,580 --> 01:22:53,689
[Music]

1337
01:23:04,800 --> 01:23:06,639
that's a great question is it is the

1338
01:23:06,639 --> 01:23:08,000
service control get generated

1339
01:23:08,000 --> 01:23:09,679
automatically or i have to do something

1340
01:23:09,679 --> 01:23:12,080
special so

1341
01:23:12,080 --> 01:23:15,679
i'm going to show you exactly where

1342
01:23:16,320 --> 01:23:20,280
service count token is

1343
01:23:20,639 --> 01:23:22,480
here it is okay

1344
01:23:22,480 --> 01:23:24,400
so

1345
01:23:24,400 --> 01:23:26,239
this is a weird legacy thing of

1346
01:23:26,239 --> 01:23:30,000
kubernetes it's always done this um

1347
01:23:30,000 --> 01:23:31,520
this token

1348
01:23:31,520 --> 01:23:34,560
lives here in bar run secrets kubernetes

1349
01:23:34,560 --> 01:23:36,239
i o service account

1350
01:23:36,239 --> 01:23:37,920
in every pod

1351
01:23:37,920 --> 01:23:38,960
it

1352
01:23:38,960 --> 01:23:41,040
unless you explicitly tell it not to

1353
01:23:41,040 --> 01:23:44,639
mount it so every photo

1354
01:23:44,880 --> 01:23:46,320
in the name

1355
01:23:46,320 --> 01:23:49,320
space

1356
01:23:50,239 --> 01:23:52,639
but this service account token

1357
01:23:52,639 --> 01:23:54,159
should

1358
01:23:54,159 --> 01:23:55,520
do nothing

1359
01:23:55,520 --> 01:23:57,199
unless you have granted additional

1360
01:23:57,199 --> 01:23:58,400
access

1361
01:23:58,400 --> 01:24:00,800
so what happens what would happen back

1362
01:24:00,800 --> 01:24:02,400
in the old days

1363
01:24:02,400 --> 01:24:05,679
before our back this surface count token

1364
01:24:05,679 --> 01:24:07,760
had cluster acting so you basically

1365
01:24:07,760 --> 01:24:10,159
mounted a surface cup token in every pod

1366
01:24:10,159 --> 01:24:12,320
that had cluster acne it's how a tesla

1367
01:24:12,320 --> 01:24:14,159
was

1368
01:24:14,159 --> 01:24:16,480
in 2017 forever but

1369
01:24:16,480 --> 01:24:17,520
the

1370
01:24:17,520 --> 01:24:21,040
today these have no access there's no rv

1371
01:24:21,040 --> 01:24:23,360
associated to this token unless you've

1372
01:24:23,360 --> 01:24:24,800
created

1373
01:24:24,800 --> 01:24:26,480
what people do

1374
01:24:26,480 --> 01:24:27,920
because generating service account

1375
01:24:27,920 --> 01:24:30,560
tokens individually is a pain it's hard

1376
01:24:30,560 --> 01:24:32,080
and kind of like

1377
01:24:32,080 --> 01:24:34,000
clunky everyone is like there's one

1378
01:24:34,000 --> 01:24:36,239
sitting right here so i'm just going to

1379
01:24:36,239 --> 01:24:39,040
give that one cluster admin or some

1380
01:24:39,040 --> 01:24:40,800
rvac policy

1381
01:24:40,800 --> 01:24:42,960
in some dev environment and when it

1382
01:24:42,960 --> 01:24:45,040
propagates out if you

1383
01:24:45,040 --> 01:24:47,360
have a name space which could be huge

1384
01:24:47,360 --> 01:24:50,880
that has this shared credential that

1385
01:24:50,880 --> 01:24:53,040
has like a dog pile of fireback policies

1386
01:24:53,040 --> 01:24:57,440
that's what happened here right so it's

1387
01:24:57,520 --> 01:25:00,719
you have to be explicit and say

1388
01:25:00,719 --> 01:25:02,480
please do not mount this

1389
01:25:02,480 --> 01:25:04,960
and no one does that so

1390
01:25:04,960 --> 01:25:06,639
um

1391
01:25:06,639 --> 01:25:08,000
yeah

1392
01:25:08,000 --> 01:25:10,960
i hope there's still people

1393
01:25:10,960 --> 01:25:13,440
so so scenario two

1394
01:25:13,440 --> 01:25:16,719
it's a good question though and it makes

1395
01:25:16,719 --> 01:25:18,560
i don't know why they

1396
01:25:18,560 --> 01:25:21,040
haven't deprecated it to be honest it

1397
01:25:21,040 --> 01:25:24,480
doesn't make any sense um

1398
01:25:24,480 --> 01:25:25,520
so

1399
01:25:25,520 --> 01:25:28,239
the defender right

1400
01:25:28,239 --> 01:25:29,920
this may be some of you all in the room

1401
01:25:29,920 --> 01:25:30,800
uh

1402
01:25:30,800 --> 01:25:33,040
blue gets paged at 1am with an urgent

1403
01:25:33,040 --> 01:25:35,760
problem right website is slow

1404
01:25:35,760 --> 01:25:36,639
uh

1405
01:25:36,639 --> 01:25:39,520
let me go take a quick look and

1406
01:25:39,520 --> 01:25:42,400
we're gonna put our defender hat on

1407
01:25:42,400 --> 01:25:44,960
over here

1408
01:25:45,120 --> 01:25:46,560
and

1409
01:25:46,560 --> 01:25:48,560
you know this guy might not really know

1410
01:25:48,560 --> 01:25:51,840
much about kubernetes either

1411
01:25:52,400 --> 01:25:56,880
let's do a cube ctl get get po

1412
01:25:56,880 --> 01:25:58,080
i don't know what i'm looking at it

1413
01:25:58,080 --> 01:25:59,600
looks like a bunch of

1414
01:25:59,600 --> 01:26:01,360
words that i don't understand everything

1415
01:26:01,360 --> 01:26:03,520
looks fine so i'm going to keep diving

1416
01:26:03,520 --> 01:26:06,239
in um one of the interesting ones to see

1417
01:26:06,239 --> 01:26:07,120
here

1418
01:26:07,120 --> 01:26:08,880
qctl top

1419
01:26:08,880 --> 01:26:10,159
what do you what do you all think this

1420
01:26:10,159 --> 01:26:12,719
probably does

1421
01:26:13,920 --> 01:26:16,400
it gives you resource consumption cpu

1422
01:26:16,400 --> 01:26:18,719
and memory of the individual pods you

1423
01:26:18,719 --> 01:26:20,719
can do this by node you can do this

1424
01:26:20,719 --> 01:26:22,639
carbonyl and kind of run this command

1425
01:26:22,639 --> 01:26:23,600
however

1426
01:26:23,600 --> 01:26:27,360
so here something stands out

1427
01:26:28,320 --> 01:26:29,600
this right

1428
01:26:29,600 --> 01:26:31,679
that's a lot of cpu cores compared to

1429
01:26:31,679 --> 01:26:32,880
other things

1430
01:26:32,880 --> 01:26:34,560
except for

1431
01:26:34,560 --> 01:26:37,040
our metric

1432
01:26:37,840 --> 01:26:40,400
and i also don't know what bitcoin arrow

1433
01:26:40,400 --> 01:26:41,600
means

1434
01:26:41,600 --> 01:26:43,199
keep in mind an attacker probably

1435
01:26:43,199 --> 01:26:45,760
wouldn't call it bitcoin arrow but

1436
01:26:45,760 --> 01:26:47,920
you know silly things happen

1437
01:26:47,920 --> 01:26:48,960
so

1438
01:26:48,960 --> 01:26:50,480
you know these commands down here are

1439
01:26:50,480 --> 01:26:51,760
for sake of time because i want to at

1440
01:26:51,760 --> 01:26:53,840
least show the second attack

1441
01:26:53,840 --> 01:26:56,320
uh help you dissect what's going on

1442
01:26:56,320 --> 01:26:58,800
right like let's let's dive in and see

1443
01:26:58,800 --> 01:26:59,840
like

1444
01:26:59,840 --> 01:27:00,560
what

1445
01:27:00,560 --> 01:27:02,960
this bitcoin aeropod is

1446
01:27:02,960 --> 01:27:04,880
how it was created right let's get

1447
01:27:04,880 --> 01:27:06,800
deployment um

1448
01:27:06,800 --> 01:27:08,560
and these are really useful commands

1449
01:27:08,560 --> 01:27:11,280
like in general uh

1450
01:27:11,280 --> 01:27:13,440
here's the image

1451
01:27:13,440 --> 01:27:15,120
here's the arguments

1452
01:27:15,120 --> 01:27:17,120
all the information i need

1453
01:27:17,120 --> 01:27:20,000
and um

1454
01:27:21,040 --> 01:27:22,880
i'm not going to open this up if you are

1455
01:27:22,880 --> 01:27:24,480
following along

1456
01:27:24,480 --> 01:27:25,440
what

1457
01:27:25,440 --> 01:27:28,000
what the nice thing about gk your

1458
01:27:28,000 --> 01:27:30,639
managed kubernetes is

1459
01:27:30,639 --> 01:27:33,679
a nice case stock sticker on your laptop

1460
01:27:33,679 --> 01:27:34,960
um

1461
01:27:34,960 --> 01:27:37,760
is that it's going to take these logs

1462
01:27:37,760 --> 01:27:40,320
for you in stackdriver by default like

1463
01:27:40,320 --> 01:27:42,639
you're not going to have to do anything

1464
01:27:42,639 --> 01:27:44,800
to see what's going on it's not a full

1465
01:27:44,800 --> 01:27:46,719
picture but it's a start

1466
01:27:46,719 --> 01:27:47,600
and

1467
01:27:47,600 --> 01:27:50,639
um you can dive in here and this takes a

1468
01:27:50,639 --> 01:27:53,199
minute so i wanna just for

1469
01:27:53,199 --> 01:27:55,520
time's sake but you can see

1470
01:27:55,520 --> 01:27:58,159
exactly who created it and what you end

1471
01:27:58,159 --> 01:27:59,679
up seeing is that

1472
01:27:59,679 --> 01:28:02,400
a service account token didn't which is

1473
01:28:02,400 --> 01:28:05,520
super suspicious like it it's not very

1474
01:28:05,520 --> 01:28:07,199
common that a pod that's mounting a

1475
01:28:07,199 --> 01:28:09,120
service account takes that presents

1476
01:28:09,120 --> 01:28:12,000
today server spins up the pod and all of

1477
01:28:12,000 --> 01:28:14,239
the things add to like this is totally

1478
01:28:14,239 --> 01:28:16,239
screwed so

1479
01:28:16,239 --> 01:28:17,440
this

1480
01:28:17,440 --> 01:28:20,000
particular security engineer

1481
01:28:20,000 --> 01:28:22,719
decides to

1482
01:28:22,719 --> 01:28:25,280
just delete the deployment um

1483
01:28:25,280 --> 01:28:27,120
which we all know is not good incident

1484
01:28:27,120 --> 01:28:29,040
response

1485
01:28:29,040 --> 01:28:31,280
in general but you know it's one in the

1486
01:28:31,280 --> 01:28:32,400
morning

1487
01:28:32,400 --> 01:28:35,520
so i'm going to delete the deployment

1488
01:28:35,520 --> 01:28:36,960
and

1489
01:28:36,960 --> 01:28:39,120
i'm actually just going to call it a day

1490
01:28:39,120 --> 01:28:41,360
there's a step down here too

1491
01:28:41,360 --> 01:28:42,400
to install

1492
01:28:42,400 --> 01:28:44,080
it's called falco

1493
01:28:44,080 --> 01:28:47,920
this is a runtime open source runtime

1494
01:28:47,920 --> 01:28:49,280
vulnerability

1495
01:28:49,280 --> 01:28:51,440
tool like it actually watches

1496
01:28:51,440 --> 01:28:54,080
using edpf the linux system calls that

1497
01:28:54,080 --> 01:28:56,000
are happening i'm not going to turn that

1498
01:28:56,000 --> 01:28:58,560
on just for saving time but

1499
01:28:58,560 --> 01:29:00,480
it is on and this all works good as part

1500
01:29:00,480 --> 01:29:02,800
of the workshop

1501
01:29:02,800 --> 01:29:04,800
so

1502
01:29:04,800 --> 01:29:07,120
now

1503
01:29:07,120 --> 01:29:07,920
this

1504
01:29:07,920 --> 01:29:10,400
i'm going to close this shell

1505
01:29:10,400 --> 01:29:12,320
that's what that is

1506
01:29:12,320 --> 01:29:13,840
now

1507
01:29:13,840 --> 01:29:15,920
my cryptocurrency miner is broken right

1508
01:29:15,920 --> 01:29:18,159
i'm not making money i need to call my

1509
01:29:18,159 --> 01:29:19,840
friend who knows more about hacking than

1510
01:29:19,840 --> 01:29:21,280
i do and

1511
01:29:21,280 --> 01:29:26,320
income uh dark red so for more bitcoin

1512
01:29:27,040 --> 01:29:29,440
market we are going to bring in somebody

1513
01:29:29,440 --> 01:29:30,880
that has experience

1514
01:29:30,880 --> 01:29:32,480
so i'm going to run

1515
01:29:32,480 --> 01:29:35,440
tac 2 helper

1516
01:29:36,080 --> 01:29:38,400
and this is supposed to simulate

1517
01:29:38,400 --> 01:29:40,560
a uh

1518
01:29:40,560 --> 01:29:43,679
the output of an nmac

1519
01:29:44,239 --> 01:29:45,840
if you were to run this map command

1520
01:29:45,840 --> 01:29:47,920
against the ip address space of these

1521
01:29:47,920 --> 01:29:50,000
this particular node you would actually

1522
01:29:50,000 --> 01:29:52,239
find this web shell

1523
01:29:52,239 --> 01:29:53,360
but

1524
01:29:53,360 --> 01:29:55,120
i don't think that's worth doing right

1525
01:29:55,120 --> 01:29:56,960
now so we're just going to open the show

1526
01:29:56,960 --> 01:29:59,040
up

1527
01:30:04,560 --> 01:30:06,719
so i have another shell

1528
01:30:06,719 --> 01:30:08,719
life is good but

1529
01:30:08,719 --> 01:30:10,239
i don't know where i'm at right my

1530
01:30:10,239 --> 01:30:12,239
original one's gone i know this is

1531
01:30:12,239 --> 01:30:14,080
probably the same cluster or maybe a

1532
01:30:14,080 --> 01:30:15,600
different cluster or

1533
01:30:15,600 --> 01:30:17,679
um but i don't know anything about the

1534
01:30:17,679 --> 01:30:20,719
container that i potentially compromise

1535
01:30:20,719 --> 01:30:24,080
so i'm going to go through the same

1536
01:30:26,880 --> 01:30:29,199
same commands but i'm going to

1537
01:30:29,199 --> 01:30:30,800
because i'm a b and i'm going to throw

1538
01:30:30,800 --> 01:30:32,719
them all in the same

1539
01:30:32,719 --> 01:30:34,960
the same uh single line command i can

1540
01:30:34,960 --> 01:30:36,239
see

1541
01:30:36,239 --> 01:30:38,560
again this is a container

1542
01:30:38,560 --> 01:30:40,560
i'm starting to get to just um and

1543
01:30:40,560 --> 01:30:42,159
you'll see why in a second

1544
01:30:42,159 --> 01:30:44,480
uh ubuntu

1545
01:30:44,480 --> 01:30:45,600
and

1546
01:30:45,600 --> 01:30:47,440
it's kubernetes right i've been in the

1547
01:30:47,440 --> 01:30:48,960
same cluster

1548
01:30:48,960 --> 01:30:50,320
so um

1549
01:30:50,320 --> 01:30:53,040
that's great and i am not through

1550
01:30:53,040 --> 01:30:55,520
right dashboard dashboard dashboard

1551
01:30:55,520 --> 01:30:57,280
so

1552
01:30:57,280 --> 01:30:59,600
now i'm gonna throw together all the

1553
01:30:59,600 --> 01:31:03,480
same commands from before

1554
01:31:03,679 --> 01:31:04,960
and

1555
01:31:04,960 --> 01:31:06,800
you can see the output here you can

1556
01:31:06,800 --> 01:31:09,040
still do a bunch of things

1557
01:31:09,040 --> 01:31:10,400
but

1558
01:31:10,400 --> 01:31:12,800
this is funny if anybody does appsec

1559
01:31:12,800 --> 01:31:15,120
it's sometimes when you're like doing an

1560
01:31:15,120 --> 01:31:17,040
assessment of an application

1561
01:31:17,040 --> 01:31:18,960
the error the errors are everything

1562
01:31:18,960 --> 01:31:21,679
right like they tell you more that

1563
01:31:21,679 --> 01:31:24,000
sometimes actually get into the system

1564
01:31:24,000 --> 01:31:27,199
so again system service account

1565
01:31:27,199 --> 01:31:29,040
dev default

1566
01:31:29,040 --> 01:31:30,880
so i'm in a different name space same

1567
01:31:30,880 --> 01:31:32,960
application maybe but i'm in a

1568
01:31:32,960 --> 01:31:35,120
completely different name space um

1569
01:31:35,120 --> 01:31:38,639
called depth sounds good

1570
01:31:38,639 --> 01:31:40,960
so instead of

1571
01:31:40,960 --> 01:31:43,199
this is kind of a party trick here but

1572
01:31:43,199 --> 01:31:45,760
instead of

1573
01:31:45,760 --> 01:31:48,239
running my cryptocurrency minor as a pod

1574
01:31:48,239 --> 01:31:49,920
because that's really easy to find right

1575
01:31:49,920 --> 01:31:51,440
like if you're

1576
01:31:51,440 --> 01:31:52,960
you're just like

1577
01:31:52,960 --> 01:31:54,960
kind of trolling around in cube ctl

1578
01:31:54,960 --> 01:31:56,960
you're gonna see random pods

1579
01:31:56,960 --> 01:31:59,760
um i want to perform a container

1580
01:31:59,760 --> 01:32:03,360
breakout attack so i'm trying to not

1581
01:32:03,360 --> 01:32:05,760
talk to the kubernetes api and spin up a

1582
01:32:05,760 --> 01:32:07,440
pod because kubernetes will be aware of

1583
01:32:07,440 --> 01:32:09,920
that i want to be on the note

1584
01:32:09,920 --> 01:32:13,679
as group so this shout out to duffy um

1585
01:32:13,679 --> 01:32:14,719
he fit

1586
01:32:14,719 --> 01:32:16,639
this

1587
01:32:16,639 --> 01:32:19,520
this container escaped into a tweet

1588
01:32:19,520 --> 01:32:21,120
which is always

1589
01:32:21,120 --> 01:32:22,639
super fancy

1590
01:32:22,639 --> 01:32:23,920
so

1591
01:32:23,920 --> 01:32:27,840
what this is doing again a compromise

1592
01:32:27,840 --> 01:32:29,520
a compromising container

1593
01:32:29,520 --> 01:32:31,199
i have a shell

1594
01:32:31,199 --> 01:32:33,280
this cube ctl command

1595
01:32:33,280 --> 01:32:36,000
is going to do a bunch of bad things but

1596
01:32:36,000 --> 01:32:37,120
like these aren't security

1597
01:32:37,120 --> 01:32:38,719
configurations these are kind of just

1598
01:32:38,719 --> 01:32:41,840
like things that kubernetes

1599
01:32:41,840 --> 01:32:44,159
again like back to the top ten like you

1600
01:32:44,159 --> 01:32:45,360
don't want to allow this kind of

1601
01:32:45,360 --> 01:32:47,440
nonsense in your environment

1602
01:32:47,440 --> 01:32:50,960
um but most people do so image lol the

1603
01:32:50,960 --> 01:32:52,719
overrides are what are expect uh what

1604
01:32:52,719 --> 01:32:55,199
are important so i want to share the

1605
01:32:55,199 --> 01:32:58,080
hostpit namespace that's bad do you see

1606
01:32:58,080 --> 01:33:00,000
anything running this is bad this means

1607
01:33:00,000 --> 01:33:03,360
the container isn't in its own namespace

1608
01:33:03,360 --> 01:33:05,199
it's not made spaced out or it's process

1609
01:33:05,199 --> 01:33:07,679
id it can actually see the hosts but

1610
01:33:07,679 --> 01:33:09,440
most importantly

1611
01:33:09,440 --> 01:33:11,600
um

1612
01:33:11,600 --> 01:33:13,199
privileged true

1613
01:33:13,199 --> 01:33:14,639
mixed with

1614
01:33:14,639 --> 01:33:16,639
an nscenter command is going to actually

1615
01:33:16,639 --> 01:33:17,679
just

1616
01:33:17,679 --> 01:33:18,400
be

1617
01:33:18,400 --> 01:33:20,000
hopefully because everything's still

1618
01:33:20,000 --> 01:33:21,199
working

1619
01:33:21,199 --> 01:33:25,199
give me the one-stop kind of shop right

1620
01:33:25,199 --> 01:33:26,960
this looks different

1621
01:33:26,960 --> 01:33:28,800
right what do we what do we think this

1622
01:33:28,800 --> 01:33:30,639
is

1623
01:33:30,639 --> 01:33:32,800
this is this is this root as the

1624
01:33:32,800 --> 01:33:34,560
container

1625
01:33:34,560 --> 01:33:37,360
or root on the host well we'll see

1626
01:33:37,360 --> 01:33:39,760
let's run our same recon

1627
01:33:39,760 --> 01:33:41,679
uh

1628
01:33:41,679 --> 01:33:44,000
here

1629
01:33:44,320 --> 01:33:45,840
things look a little different in this

1630
01:33:45,840 --> 01:33:47,199
land right

1631
01:33:47,199 --> 01:33:48,880
does this look like the ps command that

1632
01:33:48,880 --> 01:33:51,360
we ran inside of a container

1633
01:33:51,360 --> 01:33:54,159
absolutely not um this is this is a

1634
01:33:54,159 --> 01:33:55,679
virtual machine right this is a

1635
01:33:55,679 --> 01:33:57,840
full-fledged operating system

1636
01:33:57,840 --> 01:34:00,480
if you do like container 101 stuff

1637
01:34:00,480 --> 01:34:02,480
you're you're sharing the kernel but

1638
01:34:02,480 --> 01:34:04,719
you're in isolation through

1639
01:34:04,719 --> 01:34:07,280
post pit name spaces and

1640
01:34:07,280 --> 01:34:09,120
see groups and all those other things we

1641
01:34:09,120 --> 01:34:10,960
have escaped the context of that

1642
01:34:10,960 --> 01:34:12,320
container

1643
01:34:12,320 --> 01:34:13,840
we're still in a container actually

1644
01:34:13,840 --> 01:34:14,960
technically

1645
01:34:14,960 --> 01:34:16,480
but it broke down all the barriers we

1646
01:34:16,480 --> 01:34:19,840
mounted the root file system in and this

1647
01:34:19,840 --> 01:34:21,199
is

1648
01:34:21,199 --> 01:34:23,199
this is now

1649
01:34:23,199 --> 01:34:25,600
chrome os right this is this gke's

1650
01:34:25,600 --> 01:34:28,560
operating system again this is not like

1651
01:34:28,560 --> 01:34:30,719
this isn't finno day or something you

1652
01:34:30,719 --> 01:34:32,960
know this is just how containers

1653
01:34:32,960 --> 01:34:36,719
um so this looks good i feel

1654
01:34:36,719 --> 01:34:38,639
like we have access to what we need to

1655
01:34:38,639 --> 01:34:40,800
get stuff done

1656
01:34:40,800 --> 01:34:43,040
so instead of

1657
01:34:43,040 --> 01:34:45,119
instead of running

1658
01:34:45,119 --> 01:34:48,560
a pod let's just use docker straight up

1659
01:34:48,560 --> 01:34:51,040
on the host to spin up my cryptocurrency

1660
01:34:51,040 --> 01:34:54,000
miner this takes my payload out of the

1661
01:34:54,000 --> 01:34:56,000
purview of kubernetes kubernetes cannot

1662
01:34:56,000 --> 01:34:58,159
take it down kubernetes doesn't know

1663
01:34:58,159 --> 01:35:00,480
about it this is completely out of sight

1664
01:35:00,480 --> 01:35:02,320
out of mind of the kubernetes

1665
01:35:02,320 --> 01:35:04,080
controllers they will not see this

1666
01:35:04,080 --> 01:35:06,320
container so

1667
01:35:06,320 --> 01:35:08,000
um

1668
01:35:08,000 --> 01:35:09,760
every

1669
01:35:09,760 --> 01:35:12,080
kubernetes node has docker if you do a

1670
01:35:12,080 --> 01:35:13,360
docker ps

1671
01:35:13,360 --> 01:35:14,400
right like

1672
01:35:14,400 --> 01:35:16,239
crazy amounts of containers running on a

1673
01:35:16,239 --> 01:35:17,920
single door

1674
01:35:17,920 --> 01:35:19,840
redis other stuff

1675
01:35:19,840 --> 01:35:22,159
but i just want to run my bitcoin aero

1676
01:35:22,159 --> 01:35:23,840
liner

1677
01:35:23,840 --> 01:35:25,920
and i'm going to throw that

1678
01:35:25,920 --> 01:35:28,000
here

1679
01:35:28,000 --> 01:35:31,119
so i do doctor ps again at the very top

1680
01:35:31,119 --> 01:35:33,440
of this

1681
01:35:34,239 --> 01:35:35,600
i'm going to see

1682
01:35:35,600 --> 01:35:36,960
this container

1683
01:35:36,960 --> 01:35:37,920
so

1684
01:35:37,920 --> 01:35:39,199
we're at time

1685
01:35:39,199 --> 01:35:42,960
i'll keep going or whatever

1686
01:35:42,960 --> 01:35:44,000
but

1687
01:35:44,000 --> 01:35:46,639
the thing to drive home here is that

1688
01:35:46,639 --> 01:35:49,600
as the defender

1689
01:35:53,679 --> 01:35:55,199
well

1690
01:35:55,199 --> 01:35:57,199
you actually still see the fruit so this

1691
01:35:57,199 --> 01:35:59,600
is actually a good

1692
01:35:59,600 --> 01:36:02,239
i'm still i still have this fruit shell

1693
01:36:02,239 --> 01:36:04,320
open in my

1694
01:36:04,320 --> 01:36:05,920
browser here

1695
01:36:05,920 --> 01:36:07,280
right

1696
01:36:07,280 --> 01:36:08,159
so

1697
01:36:08,159 --> 01:36:10,880
if i do this

1698
01:36:10,880 --> 01:36:13,119
get out of there

1699
01:36:13,119 --> 01:36:15,280
and

1700
01:36:15,440 --> 01:36:17,679
this should

1701
01:36:17,679 --> 01:36:19,280
now be gone

1702
01:36:19,280 --> 01:36:20,800
right root's gone

1703
01:36:20,800 --> 01:36:21,760
so

1704
01:36:21,760 --> 01:36:23,920
you would detect that right i came in

1705
01:36:23,920 --> 01:36:26,800
and i used qctl to spin up this pod that

1706
01:36:26,800 --> 01:36:28,719
actually was a container escape

1707
01:36:28,719 --> 01:36:30,880
but you don't see bitcoin

1708
01:36:30,880 --> 01:36:32,320
because it's a docker container it's

1709
01:36:32,320 --> 01:36:33,840
running on the host

1710
01:36:33,840 --> 01:36:35,199
that makes sense

1711
01:36:35,199 --> 01:36:37,360
it's pretty cool i think

1712
01:36:37,360 --> 01:36:38,639
and this is what's happening in the

1713
01:36:38,639 --> 01:36:41,040
world today like it's not

1714
01:36:41,040 --> 01:36:42,400
like if you know anything about

1715
01:36:42,400 --> 01:36:44,080
kubernetes you wouldn't spin up your

1716
01:36:44,080 --> 01:36:46,239
like malware as a pod that would be a

1717
01:36:46,239 --> 01:36:48,480
really bad idea because it will get

1718
01:36:48,480 --> 01:36:50,159
caught or kubernetes will reconcile it

1719
01:36:50,159 --> 01:36:51,600
or whatever

1720
01:36:51,600 --> 01:36:53,840
you want to be in the scenario where

1721
01:36:53,840 --> 01:36:56,000
the container is running on the host or

1722
01:36:56,000 --> 01:36:58,800
just a binary or a service or a tunnel

1723
01:36:58,800 --> 01:37:01,600
or something like that

1724
01:37:02,400 --> 01:37:04,080
this part's pretty cool

1725
01:37:04,080 --> 01:37:05,920
happy to talk about it or go through it

1726
01:37:05,920 --> 01:37:08,320
but it's basically

1727
01:37:08,320 --> 01:37:10,880
building a back door into

1728
01:37:10,880 --> 01:37:13,199
this cluster using node ports

1729
01:37:13,199 --> 01:37:14,719
impersonating yourself as something

1730
01:37:14,719 --> 01:37:16,639
called istio in the cube system name

1731
01:37:16,639 --> 01:37:17,520
space

1732
01:37:17,520 --> 01:37:19,840
opening a port and bouncing through so

1733
01:37:19,840 --> 01:37:21,520
you can always come back over and over

1734
01:37:21,520 --> 01:37:24,400
again to your your show

1735
01:37:24,400 --> 01:37:27,280
so that's like the super fast version of

1736
01:37:27,280 --> 01:37:30,000
this uh it's four o'clock so

1737
01:37:30,000 --> 01:37:31,760
go drink beer and i'll be around for

1738
01:37:31,760 --> 01:37:32,719
questions

1739
01:37:32,719 --> 01:37:34,580
thank

1740
01:37:34,580 --> 01:37:37,779
[Applause]

1741
01:37:41,500 --> 01:37:44,560
[Music]

1742
01:37:47,040 --> 01:37:49,920
the defense oh yeah um so

1743
01:37:49,920 --> 01:37:53,280
yeah the the defense here was still

1744
01:37:53,280 --> 01:37:55,360
still mediocre at best um it's

1745
01:37:55,360 --> 01:37:58,000
intentional but

1746
01:37:58,000 --> 01:37:59,760
because we installed runtime and

1747
01:37:59,760 --> 01:38:02,719
security monitoring we saw

1748
01:38:02,719 --> 01:38:04,639
this privileged pod come in but the real

1749
01:38:04,639 --> 01:38:07,199
defense actually comes in at the bottom

1750
01:38:07,199 --> 01:38:08,639
like it's one thing to see an event

1751
01:38:08,639 --> 01:38:11,280
happen like oh i got hacked last week

1752
01:38:11,280 --> 01:38:12,320
that's not

1753
01:38:12,320 --> 01:38:13,679
entirely useful

1754
01:38:13,679 --> 01:38:15,199
at the bottom

1755
01:38:15,199 --> 01:38:17,199
we build

1756
01:38:17,199 --> 01:38:19,840
an open policy agent

1757
01:38:19,840 --> 01:38:21,520
like basically a regular policy that

1758
01:38:21,520 --> 01:38:22,639
says

1759
01:38:22,639 --> 01:38:24,719
i will never allow images that don't

1760
01:38:24,719 --> 01:38:26,880
come from my registry into this monster

1761
01:38:26,880 --> 01:38:28,719
and i will explicitly disallow

1762
01:38:28,719 --> 01:38:31,280
privileged funds those two things if you

1763
01:38:31,280 --> 01:38:33,119
do nothing or take nothing with this

1764
01:38:33,119 --> 01:38:34,159
like

1765
01:38:34,159 --> 01:38:37,199
go a long way it's not 100 but like

1766
01:38:37,199 --> 01:38:39,440
building a policy that does that makes

1767
01:38:39,440 --> 01:38:42,800
it vastly more difficult to engineer

1768
01:38:42,800 --> 01:38:44,960
like

1769
01:38:45,920 --> 01:38:48,639
yeah all the manifests are uh they're in

1770
01:38:48,639 --> 01:38:50,159
this

1771
01:38:50,159 --> 01:38:51,760
yeah and by the way never do this keep

1772
01:38:51,760 --> 01:38:54,400
secretly like raw

1773
01:38:54,400 --> 01:38:56,320
it's just like piping like curling

1774
01:38:56,320 --> 01:38:59,600
straight to bash like not good but um

1775
01:38:59,600 --> 01:39:01,440
you know

1776
01:39:01,440 --> 01:39:04,960
yeah the the policies are here

1777
01:39:04,960 --> 01:39:07,040
um

1778
01:39:07,040 --> 01:39:09,280
and

1779
01:39:09,280 --> 01:39:11,040
i can help you with policies too if you

1780
01:39:11,040 --> 01:39:12,800
have questions on that like that's

1781
01:39:12,800 --> 01:39:14,000
that's a

1782
01:39:14,000 --> 01:39:15,760
that's a thing i do a lot of these days

1783
01:39:15,760 --> 01:39:17,360
so um

1784
01:39:17,360 --> 01:39:19,440
that's the real defense though yeah like

1785
01:39:19,440 --> 01:39:21,840
the monitoring's

1786
01:39:21,840 --> 01:39:23,679
it's good right like attribution is

1787
01:39:23,679 --> 01:39:25,920
still not going to be easy but happy

1788
01:39:25,920 --> 01:39:28,880
event but really like

1789
01:39:28,880 --> 01:39:30,639
you should if you get an alert that says

1790
01:39:30,639 --> 01:39:32,239
somebody tried to create a privileged

1791
01:39:32,239 --> 01:39:35,840
pod and they denied it that's fine

1792
01:39:35,840 --> 01:39:39,320
any other questions

1793
01:39:51,840 --> 01:39:53,440
like

1794
01:39:53,440 --> 01:39:55,840
you could go anywhere like it just stick

1795
01:39:55,840 --> 01:39:58,960
it back in it it'll go there

1796
01:39:58,960 --> 01:40:01,119
they are extraordinarily crazy so

1797
01:40:01,119 --> 01:40:02,639
there's there's

1798
01:40:02,639 --> 01:40:04,560
there's an audit config

1799
01:40:04,560 --> 01:40:06,400
that you would want to tune

1800
01:40:06,400 --> 01:40:08,239
and look for events that you care about

1801
01:40:08,239 --> 01:40:12,559
or you are going to destroy your sport

1802
01:40:14,400 --> 01:40:15,920
yep same thing yeah but it's a

1803
01:40:15,920 --> 01:40:17,360
kubernetes

1804
01:40:17,360 --> 01:40:19,519
uh

1805
01:40:40,400 --> 01:40:41,280
um

1806
01:40:41,280 --> 01:40:42,400
yeah just write your name and then we're

1807
01:40:42,400 --> 01:40:47,170
going to draw there's two prizes here

1808
01:40:47,170 --> 01:40:52,360
[Laughter]

1809
01:41:01,360 --> 01:41:04,599
i was like

1810
01:41:14,510 --> 01:41:17,589
[Music]

1811
01:41:31,900 --> 01:41:35,228
[Music]

1812
01:41:45,360 --> 01:41:47,839
marijuana

1813
01:41:57,980 --> 01:41:59,120
[Music]

1814
01:41:59,120 --> 01:42:01,640
[Applause]

1815
01:42:01,640 --> 01:42:03,840
[Music]

1816
01:42:03,840 --> 01:42:04,870
i don't know i don't

1817
01:42:04,870 --> 01:42:07,989
[Applause]

1818
01:42:10,119 --> 01:42:12,239
know he was wondering where the dreams

1819
01:42:12,239 --> 01:42:14,050
were

1820
01:42:14,050 --> 01:42:17,260
[Music]

