1
00:00:01,520 --> 00:00:05,279
this conference will now be recorded

2
00:00:05,279 --> 00:00:07,600
and uh let me introduce our presenter

3
00:00:07,600 --> 00:00:08,400
today

4
00:00:08,400 --> 00:00:11,759
uh today we have our very own olevsky

5
00:00:11,759 --> 00:00:14,960
uh he um has presented before

6
00:00:14,960 --> 00:00:18,800
is uh always an amazing presenter

7
00:00:18,800 --> 00:00:20,640
uh and today he's going to talk to us

8
00:00:20,640 --> 00:00:23,199
about kubernetes security something that

9
00:00:23,199 --> 00:00:24,560
is very relevant

10
00:00:24,560 --> 00:00:26,160
i'm sure many of you have a lot of

11
00:00:26,160 --> 00:00:28,080
questions please

12
00:00:28,080 --> 00:00:30,640
type them and wait until the end uh try

13
00:00:30,640 --> 00:00:31,599
to mute yourself

14
00:00:31,599 --> 00:00:35,200
too um if uh if you can

15
00:00:35,200 --> 00:00:36,800
and if not i'm gonna have to if you're

16
00:00:36,800 --> 00:00:38,239
making a lot of noise

17
00:00:38,239 --> 00:00:42,239
uh and he uh he's been with us for now

18
00:00:42,239 --> 00:00:45,520
uh uh over a year so he has presented

19
00:00:45,520 --> 00:00:46,879
several times

20
00:00:46,879 --> 00:00:49,440
always giving us some great content and

21
00:00:49,440 --> 00:00:50,800
uh

22
00:00:50,800 --> 00:00:53,760
great technical uh skill and knowledge

23
00:00:53,760 --> 00:00:54,239
uh

24
00:00:54,239 --> 00:00:56,320
and with that i'm gonna give him the

25
00:00:56,320 --> 00:00:58,079
floor thank you very much

26
00:00:58,079 --> 00:01:01,280
uh learning and uh

27
00:01:01,280 --> 00:01:04,239
floor is yours man

28
00:01:04,479 --> 00:01:09,040
awesome thank you very much rod so okay

29
00:01:09,040 --> 00:01:13,840
let me try to share my screen

30
00:01:14,159 --> 00:01:17,040
done max i think guys asking me for

31
00:01:17,040 --> 00:01:18,320
permissions

32
00:01:18,320 --> 00:01:21,439
give me one second

33
00:01:22,159 --> 00:01:24,400
you may have to restart the client i had

34
00:01:24,400 --> 00:01:27,759
to do that earlier

35
00:01:27,759 --> 00:01:32,400
where is that yeah

36
00:01:33,040 --> 00:01:34,960
you have to give me permission so there

37
00:01:34,960 --> 00:01:41,200
you go

38
00:01:41,200 --> 00:01:44,479
so he should be back

39
00:01:46,560 --> 00:01:48,479
okay excellent let me make you a

40
00:01:48,479 --> 00:01:50,000
presenter

41
00:01:50,000 --> 00:01:54,560
and uh go for it

42
00:01:54,560 --> 00:01:59,680
okay okay

43
00:02:02,799 --> 00:02:11,599
this is he's complaining again um

44
00:02:12,720 --> 00:02:16,640
maybe one second yeah an accessibility

45
00:02:16,640 --> 00:02:19,520
add uh go to meeting and then as soon as

46
00:02:19,520 --> 00:02:20,959
you do that it's gonna tell you that you

47
00:02:20,959 --> 00:02:22,160
need to restart

48
00:02:22,160 --> 00:02:24,959
and then you will restart and that's it

49
00:02:24,959 --> 00:02:25,440
you'll be

50
00:02:25,440 --> 00:02:26,640
you'll be able to do it you're trying to

51
00:02:26,640 --> 00:02:29,280
share your screen right yeah yeah i

52
00:02:29,280 --> 00:02:32,080
already did that and now i check the box

53
00:02:32,080 --> 00:02:35,840
so i give permissions let

54
00:02:35,840 --> 00:02:37,599
yeah it's working out okay perfect

55
00:02:37,599 --> 00:02:39,360
awesome okay

56
00:02:39,360 --> 00:02:41,680
let me let me know you guys can see my

57
00:02:41,680 --> 00:02:43,599
screen

58
00:02:43,599 --> 00:02:47,760
you're good to go okay cool

59
00:02:49,680 --> 00:02:52,160
let me move these things a little bit

60
00:02:52,160 --> 00:02:52,720
okay

61
00:02:52,720 --> 00:02:55,200
present

62
00:02:56,720 --> 00:03:00,640
and let me pull out my notes

63
00:03:03,599 --> 00:03:06,800
okay cool i'm all set uh so

64
00:03:06,800 --> 00:03:08,800
okay thank you very much rod for invite

65
00:03:08,800 --> 00:03:09,840
me

66
00:03:09,840 --> 00:03:12,879
this is my google hub okay so

67
00:03:12,879 --> 00:03:15,120
yeah i'm going to talk about kubernetes

68
00:03:15,120 --> 00:03:16,879
specifically the security part

69
00:03:16,879 --> 00:03:19,760
because i think it's very relevant like

70
00:03:19,760 --> 00:03:21,519
a lot of

71
00:03:21,519 --> 00:03:23,519
a lot of companies are using it right

72
00:03:23,519 --> 00:03:25,040
now and

73
00:03:25,040 --> 00:03:27,440
basically yeah it's like a technology

74
00:03:27,440 --> 00:03:30,319
that has been like a few years for now

75
00:03:30,319 --> 00:03:33,760
and it's every time like more and more

76
00:03:33,760 --> 00:03:36,159
companies are adopting

77
00:03:36,159 --> 00:03:38,400
so yeah first of all a little bit about

78
00:03:38,400 --> 00:03:40,239
me you already

79
00:03:40,239 --> 00:03:42,480
introduced me but my name is lenny i'm

80
00:03:42,480 --> 00:03:45,040
from mexico i live here in the bay area

81
00:03:45,040 --> 00:03:47,120
i'm working as a security software

82
00:03:47,120 --> 00:03:48,879
engineer for a startup

83
00:03:48,879 --> 00:03:52,080
i do open source and yeah basically i

84
00:03:52,080 --> 00:03:54,400
i very i'm crazy in love with cyber

85
00:03:54,400 --> 00:03:55,599
security everything

86
00:03:55,599 --> 00:03:57,920
like literally i i never stall talk i

87
00:03:57,920 --> 00:03:59,360
never i cannot start

88
00:03:59,360 --> 00:04:02,159
i cannot stop talking about security and

89
00:04:02,159 --> 00:04:02,480
yeah

90
00:04:02,480 --> 00:04:05,519
that's my passion so

91
00:04:05,519 --> 00:04:07,439
yeah what is kubernetes anyway right

92
00:04:07,439 --> 00:04:08,799
like a lot of people

93
00:04:08,799 --> 00:04:11,519
is uh talking about this a lot of

94
00:04:11,519 --> 00:04:12,159
companies

95
00:04:12,159 --> 00:04:14,799
wants to get uh to deploy their

96
00:04:14,799 --> 00:04:16,320
applications and system in coordinates

97
00:04:16,320 --> 00:04:17,440
but

98
00:04:17,440 --> 00:04:19,519
what it is right it is secure like how

99
00:04:19,519 --> 00:04:21,358
can what can you do and what

100
00:04:21,358 --> 00:04:23,680
can you not do with kubernetes right so

101
00:04:23,680 --> 00:04:24,720
essentially

102
00:04:24,720 --> 00:04:27,360
kubernetes is like a orchestration tool

103
00:04:27,360 --> 00:04:28,000
right

104
00:04:28,000 --> 00:04:30,720
that allows you to deploy applications

105
00:04:30,720 --> 00:04:31,120
in

106
00:04:31,120 --> 00:04:33,440
in your private cloud or in your public

107
00:04:33,440 --> 00:04:35,120
cloud or every cloud

108
00:04:35,120 --> 00:04:37,280
so you can think about kubernetes as a

109
00:04:37,280 --> 00:04:38,320
framework for

110
00:04:38,320 --> 00:04:40,400
building distributed systems what do

111
00:04:40,400 --> 00:04:41,600
this mean like

112
00:04:41,600 --> 00:04:43,600
you can build infrastructure like this

113
00:04:43,600 --> 00:04:45,520
like this diagram you can

114
00:04:45,520 --> 00:04:47,280
separate logically separate your

115
00:04:47,280 --> 00:04:49,520
applications between namespace and then

116
00:04:49,520 --> 00:04:50,400
you can

117
00:04:50,400 --> 00:04:52,639
deploy as many copies of replicas of

118
00:04:52,639 --> 00:04:54,880
your application and basically

119
00:04:54,880 --> 00:04:57,440
the reason why is so popular is because

120
00:04:57,440 --> 00:05:00,240
it's very easy for developers to

121
00:05:00,240 --> 00:05:03,120
to achieve this right like uh basically

122
00:05:03,120 --> 00:05:05,440
with a little bit of code you can deploy

123
00:05:05,440 --> 00:05:07,600
hundreds of replicas you can scale it

124
00:05:07,600 --> 00:05:10,560
up and down and everybody is happy right

125
00:05:10,560 --> 00:05:11,840
so

126
00:05:11,840 --> 00:05:13,520
yeah it's basically more power for

127
00:05:13,520 --> 00:05:16,080
developers and a little bit of

128
00:05:16,080 --> 00:05:18,880
details or history it was uh released by

129
00:05:18,880 --> 00:05:20,880
i think google in 2014

130
00:05:20,880 --> 00:05:24,080
now nowadays it's been maintained by the

131
00:05:24,080 --> 00:05:26,320
the cloud foundation the native cloud

132
00:05:26,320 --> 00:05:27,360
foundation

133
00:05:27,360 --> 00:05:29,360
and a lot of people just start to call

134
00:05:29,360 --> 00:05:31,039
in kubernetes like the operating system

135
00:05:31,039 --> 00:05:31,440
of the

136
00:05:31,440 --> 00:05:33,600
of the internet right why because you

137
00:05:33,600 --> 00:05:35,680
you can you write your application once

138
00:05:35,680 --> 00:05:36,880
and then you can deploy

139
00:05:36,880 --> 00:05:38,720
everywhere right as long as it's running

140
00:05:38,720 --> 00:05:40,960
kubernetes and you have like a

141
00:05:40,960 --> 00:05:42,560
container runtime your application is

142
00:05:42,560 --> 00:05:45,520
going to run fine

143
00:05:46,240 --> 00:05:48,320
and yeah the next thing is uh before

144
00:05:48,320 --> 00:05:50,000
talking about the security part i would

145
00:05:50,000 --> 00:05:50,639
like to

146
00:05:50,639 --> 00:05:52,160
introduce you to the kubernetes

147
00:05:52,160 --> 00:05:54,880
primitives which is basically

148
00:05:54,880 --> 00:05:57,600
the language of kubernetes so usually

149
00:05:57,600 --> 00:05:59,600
when you want to deploy an application

150
00:05:59,600 --> 00:06:00,880
in kubernetes

151
00:06:00,880 --> 00:06:03,520
you need to think about services

152
00:06:03,520 --> 00:06:04,880
deployment spots

153
00:06:04,880 --> 00:06:06,880
stateful set configmap and all of that

154
00:06:06,880 --> 00:06:09,680
right so what you need to do is

155
00:06:09,680 --> 00:06:12,000
first you start by creating a service so

156
00:06:12,000 --> 00:06:12,960
the service

157
00:06:12,960 --> 00:06:15,600
is basically networking configuration is

158
00:06:15,600 --> 00:06:17,280
iptable rules

159
00:06:17,280 --> 00:06:19,199
that are generated automatically by

160
00:06:19,199 --> 00:06:20,639
kubernetes that

161
00:06:20,639 --> 00:06:23,600
tell how to route traffic to your actual

162
00:06:23,600 --> 00:06:24,960
application right

163
00:06:24,960 --> 00:06:27,440
so the service will will tell hey

164
00:06:27,440 --> 00:06:28,560
coordinates please

165
00:06:28,560 --> 00:06:30,880
route these packets route this traffic

166
00:06:30,880 --> 00:06:32,560
to these containers

167
00:06:32,560 --> 00:06:35,280
with the label with the label

168
00:06:35,280 --> 00:06:36,240
application one

169
00:06:36,240 --> 00:06:39,440
or application two or whatever right uh

170
00:06:39,440 --> 00:06:42,400
so yeah the traffic goes to the pot and

171
00:06:42,400 --> 00:06:44,319
then what is support a pot is

172
00:06:44,319 --> 00:06:47,520
a group of containers so

173
00:06:47,520 --> 00:06:49,599
the an important thing about here is

174
00:06:49,599 --> 00:06:51,759
that pods or the containers inside a

175
00:06:51,759 --> 00:06:53,360
culture many things

176
00:06:53,360 --> 00:06:55,199
like for example the networking

177
00:06:55,199 --> 00:06:57,199
namespace uh

178
00:06:57,199 --> 00:06:59,599
they can also share if you want the file

179
00:06:59,599 --> 00:07:01,440
system namespace right

180
00:07:01,440 --> 00:07:04,960
but basically this is how you interact

181
00:07:04,960 --> 00:07:06,880
with your application the requesting

182
00:07:06,880 --> 00:07:08,800
coming from the request and then

183
00:07:08,800 --> 00:07:11,440
arrives to the pod and then from the pod

184
00:07:11,440 --> 00:07:13,599
to the specific container inside

185
00:07:13,599 --> 00:07:15,360
then the next important thing is the

186
00:07:15,360 --> 00:07:18,000
deployment the deployment here is

187
00:07:18,000 --> 00:07:20,880
basically like a manifest or a series of

188
00:07:20,880 --> 00:07:21,840
rules

189
00:07:21,840 --> 00:07:24,160
that will compare the current state with

190
00:07:24,160 --> 00:07:25,919
the desired state

191
00:07:25,919 --> 00:07:29,199
so in this example i'm saying i want

192
00:07:29,199 --> 00:07:30,960
this application to run with three

193
00:07:30,960 --> 00:07:33,120
replicas so if one

194
00:07:33,120 --> 00:07:36,080
pod gets down like let's say because

195
00:07:36,080 --> 00:07:38,000
there is a networking issue or the

196
00:07:38,000 --> 00:07:38,720
actual

197
00:07:38,720 --> 00:07:40,720
node the physical machine in which that

198
00:07:40,720 --> 00:07:42,319
port is running

199
00:07:42,319 --> 00:07:45,199
is that kubernetes will be smart enough

200
00:07:45,199 --> 00:07:46,400
to reschedule

201
00:07:46,400 --> 00:07:49,039
deploying a new pod on on the next

202
00:07:49,039 --> 00:07:50,639
available machine right

203
00:07:50,639 --> 00:07:52,960
so remember deployment is basically a

204
00:07:52,960 --> 00:07:54,960
comparison between the current state and

205
00:07:54,960 --> 00:07:55,360
the

206
00:07:55,360 --> 00:07:59,440
desired state and after that we have

207
00:07:59,440 --> 00:08:01,120
the next interesting concept which is

208
00:08:01,120 --> 00:08:03,759
the config bob which basically

209
00:08:03,759 --> 00:08:07,280
allows you to store a kind on a

210
00:08:07,280 --> 00:08:09,919
kind as a database or data store fashion

211
00:08:09,919 --> 00:08:12,479
way like configurations and then they

212
00:08:12,479 --> 00:08:12,879
have

213
00:08:12,879 --> 00:08:15,039
secrets as well right which are not

214
00:08:15,039 --> 00:08:16,560
really secure because

215
00:08:16,560 --> 00:08:18,319
the main difference between conflict map

216
00:08:18,319 --> 00:08:19,840
and secret is

217
00:08:19,840 --> 00:08:22,080
uh when you store something in config

218
00:08:22,080 --> 00:08:23,599
map it's going to be stored as plain

219
00:08:23,599 --> 00:08:25,280
text and when you store something a

220
00:08:25,280 --> 00:08:25,759
secret

221
00:08:25,759 --> 00:08:28,639
is going to be basically for encoded uh

222
00:08:28,639 --> 00:08:30,400
then after that after this we're going

223
00:08:30,400 --> 00:08:32,000
to see whether what are those secrets

224
00:08:32,000 --> 00:08:33,440
stored

225
00:08:33,440 --> 00:08:37,120
but basically this is like a very

226
00:08:37,120 --> 00:08:40,159
simplified example of how can you

227
00:08:40,159 --> 00:08:42,080
run your applications in kubernetes

228
00:08:42,080 --> 00:08:43,519
right remember you

229
00:08:43,519 --> 00:08:46,240
you need three things at least services

230
00:08:46,240 --> 00:08:46,880
deployment

231
00:08:46,880 --> 00:08:50,160
and port and of course there is many

232
00:08:50,160 --> 00:08:50,880
other uh

233
00:08:50,880 --> 00:08:52,880
primitives like a certificate centric

234
00:08:52,880 --> 00:08:54,480
request like

235
00:08:54,480 --> 00:08:56,800
network policies like uh port security

236
00:08:56,800 --> 00:08:58,800
policies but this is the more relevant

237
00:08:58,800 --> 00:09:02,000
relevant so

238
00:09:02,000 --> 00:09:04,080
okay now that we know the the primitive

239
00:09:04,080 --> 00:09:06,880
let's talk about the components

240
00:09:06,880 --> 00:09:09,440
so yeah remember the diagram that i

241
00:09:09,440 --> 00:09:10,320
showed you

242
00:09:10,320 --> 00:09:12,320
in reality like under the hood you will

243
00:09:12,320 --> 00:09:14,160
have like a bunch of service

244
00:09:14,160 --> 00:09:17,600
servers so kubernetes basically

245
00:09:17,600 --> 00:09:20,160
distinguish between two type of servers

246
00:09:20,160 --> 00:09:23,200
which is the control plane or masters if

247
00:09:23,200 --> 00:09:24,959
we can

248
00:09:24,959 --> 00:09:26,880
we want to see it that way the master

249
00:09:26,880 --> 00:09:29,360
nodes and any other nodes the node

250
00:09:29,360 --> 00:09:30,800
components

251
00:09:30,800 --> 00:09:33,040
so the the difference between these two

252
00:09:33,040 --> 00:09:34,839
kind of nodes is going to be

253
00:09:34,839 --> 00:09:38,640
the the the kind of processes

254
00:09:38,640 --> 00:09:40,800
or programs that are running like for

255
00:09:40,800 --> 00:09:42,720
instance the the master node the the

256
00:09:42,720 --> 00:09:44,080
control plane

257
00:09:44,080 --> 00:09:47,839
will run the cube api server a cd

258
00:09:47,839 --> 00:09:50,000
cube scheduler and cube cubecontroller

259
00:09:50,000 --> 00:09:52,480
so what are these the cube api server is

260
00:09:52,480 --> 00:09:54,399
like the main interface

261
00:09:54,399 --> 00:09:56,080
for you to talk to your cluster

262
00:09:56,080 --> 00:09:57,839
basically uh when you

263
00:09:57,839 --> 00:10:00,160
want to deploy something you you put

264
00:10:00,160 --> 00:10:02,800
audio whatever you want on a jumbo

265
00:10:02,800 --> 00:10:05,360
file like please kubernetes deploy this

266
00:10:05,360 --> 00:10:06,880
application with this image how many

267
00:10:06,880 --> 00:10:07,920
replicas

268
00:10:07,920 --> 00:10:10,000
and then if the job of the cube api

269
00:10:10,000 --> 00:10:12,560
server validate that journal

270
00:10:12,560 --> 00:10:15,839
and make sure this is right

271
00:10:15,839 --> 00:10:18,480
and then everyone everyone is going to

272
00:10:18,480 --> 00:10:19,519
be happy right

273
00:10:19,519 --> 00:10:21,839
then at city we have a tv which is the

274
00:10:21,839 --> 00:10:23,680
data store used by kubernetes

275
00:10:23,680 --> 00:10:27,040
by default so this is a distributed

276
00:10:27,040 --> 00:10:28,720
key value store that is going to be

277
00:10:28,720 --> 00:10:31,600
deployed as long with coverage and

278
00:10:31,600 --> 00:10:33,600
all the configurations all the config

279
00:10:33,600 --> 00:10:35,440
maps all the secrets are going to be

280
00:10:35,440 --> 00:10:36,160
stored there

281
00:10:36,160 --> 00:10:38,800
in the cd then we have the scheduler

282
00:10:38,800 --> 00:10:39,440
component

283
00:10:39,440 --> 00:10:43,040
the scheduler component main job is to

284
00:10:43,040 --> 00:10:45,680
whenever a kubernetes wants to deploy an

285
00:10:45,680 --> 00:10:46,720
application

286
00:10:46,720 --> 00:10:49,360
the scheduler will make sure to deploy

287
00:10:49,360 --> 00:10:50,000
on the

288
00:10:50,000 --> 00:10:53,920
best note possible and it can

289
00:10:53,920 --> 00:10:56,240
like more advanced deployment strategies

290
00:10:56,240 --> 00:10:57,360
allow you to

291
00:10:57,360 --> 00:10:59,760
add rules and validations so you can

292
00:10:59,760 --> 00:11:01,200
deploy your applications

293
00:11:01,200 --> 00:11:04,000
in many different ways but once your

294
00:11:04,000 --> 00:11:06,160
application is deployed

295
00:11:06,160 --> 00:11:08,000
uh then it's the job of the cube

296
00:11:08,000 --> 00:11:09,440
controller uh

297
00:11:09,440 --> 00:11:11,200
check the current state with the desired

298
00:11:11,200 --> 00:11:13,120
state right this is the part i told you

299
00:11:13,120 --> 00:11:14,480
about like what

300
00:11:14,480 --> 00:11:16,880
let's say one of the of the nodes is

301
00:11:16,880 --> 00:11:17,519
down

302
00:11:17,519 --> 00:11:19,360
all the application leaving there needs

303
00:11:19,360 --> 00:11:21,600
to migrate to a different node right

304
00:11:21,600 --> 00:11:24,800
so what all these four components have

305
00:11:24,800 --> 00:11:25,519
in common

306
00:11:25,519 --> 00:11:27,200
is that they require like a level

307
00:11:27,200 --> 00:11:29,760
privilege right to run on this machine

308
00:11:29,760 --> 00:11:31,200
so this is

309
00:11:31,200 --> 00:11:33,920
very interesting then we have the node

310
00:11:33,920 --> 00:11:34,560
component

311
00:11:34,560 --> 00:11:37,920
the node components uh doesn't have that

312
00:11:37,920 --> 00:11:39,120
much privilege but

313
00:11:39,120 --> 00:11:41,360
still they have interesting stuff like

314
00:11:41,360 --> 00:11:43,279
for example they have the cube proxy the

315
00:11:43,279 --> 00:11:45,760
cube proxy is basically a component

316
00:11:45,760 --> 00:11:48,320
that will route traffic to an

317
00:11:48,320 --> 00:11:49,200
application

318
00:11:49,200 --> 00:11:52,560
so in this example

319
00:11:52,560 --> 00:11:54,399
any of the nodes that are here if they

320
00:11:54,399 --> 00:11:56,480
are exposed to the internet

321
00:11:56,480 --> 00:11:58,880
or to a client and then and if they

322
00:11:58,880 --> 00:11:59,839
receive a

323
00:11:59,839 --> 00:12:02,320
a request that need that has to be

324
00:12:02,320 --> 00:12:03,279
routed to a

325
00:12:03,279 --> 00:12:06,000
application that doesn't live inside

326
00:12:06,000 --> 00:12:07,279
that particular machine then

327
00:12:07,279 --> 00:12:10,399
q proxy will be smart enough to forward

328
00:12:10,399 --> 00:12:11,360
the

329
00:12:11,360 --> 00:12:13,120
the request to a different machine that

330
00:12:13,120 --> 00:12:15,600
contains that application right

331
00:12:15,600 --> 00:12:18,160
so this is the main um yeah the main

332
00:12:18,160 --> 00:12:20,560
purpose of the of the cube proxy

333
00:12:20,560 --> 00:12:22,639
then we have the cubelet the cubelet is

334
00:12:22,639 --> 00:12:25,040
basically the kubernetes agents

335
00:12:25,040 --> 00:12:27,519
right the kubernetes agent will go will

336
00:12:27,519 --> 00:12:29,440
go and talk to the master and receive

337
00:12:29,440 --> 00:12:30,880
commands and

338
00:12:30,880 --> 00:12:33,600
uh basically monitor all the the state

339
00:12:33,600 --> 00:12:35,200
of that particular node like

340
00:12:35,200 --> 00:12:37,680
like how many pods are living there like

341
00:12:37,680 --> 00:12:39,279
and also information about the

342
00:12:39,279 --> 00:12:41,680
the particular machine itself and then

343
00:12:41,680 --> 00:12:44,240
finally we have the container run time

344
00:12:44,240 --> 00:12:46,880
so when we say container room time we

345
00:12:46,880 --> 00:12:48,959
usually think about docker which is

346
00:12:48,959 --> 00:12:50,880
one of the most popular but nowadays i

347
00:12:50,880 --> 00:12:52,000
think is is being

348
00:12:52,000 --> 00:12:55,200
or is getting deprecated uh but yeah i

349
00:12:55,200 --> 00:12:56,560
have another talk about container

350
00:12:56,560 --> 00:12:57,519
runtime

351
00:12:57,519 --> 00:12:59,200
and youtube you can check it but yeah

352
00:12:59,200 --> 00:13:01,040
basically the container runtime is a

353
00:13:01,040 --> 00:13:02,399
software that

354
00:13:02,399 --> 00:13:04,800
controls and manage and create

355
00:13:04,800 --> 00:13:05,920
containers right

356
00:13:05,920 --> 00:13:09,200
on a machine so yeah this is the basic

357
00:13:09,200 --> 00:13:10,639
theory of kubernetes so

358
00:13:10,639 --> 00:13:14,240
with this we should be good to go

359
00:13:14,240 --> 00:13:17,760
and yeah now that we know that i want to

360
00:13:17,760 --> 00:13:18,320
start

361
00:13:18,320 --> 00:13:20,399
i'm going to talk about about the

362
00:13:20,399 --> 00:13:23,440
kubernetes most common attack techniques

363
00:13:23,440 --> 00:13:25,600
and there is a lot of stuff that you can

364
00:13:25,600 --> 00:13:27,519
do on kubernetes

365
00:13:27,519 --> 00:13:33,120
but give me one second i think

366
00:13:33,120 --> 00:13:36,639
i'm missing a slide here

367
00:13:43,760 --> 00:13:46,880
yeah i'm missing one slide here which is

368
00:13:46,880 --> 00:13:47,600
the actual

369
00:13:47,600 --> 00:13:52,090
uh the three thread matrix

370
00:13:52,090 --> 00:13:53,519
[Music]

371
00:13:53,519 --> 00:13:56,320
yeah anyways let me show you the article

372
00:13:56,320 --> 00:13:58,800
all this talk is based on this uh

373
00:13:58,800 --> 00:14:02,160
article from from microsoft which is

374
00:14:02,160 --> 00:14:06,800
these guys put together a very well

375
00:14:07,199 --> 00:14:09,839
yeah very well explanation post about

376
00:14:09,839 --> 00:14:12,000
all the threads in kubernetes

377
00:14:12,000 --> 00:14:15,279
so yeah they they start observing

378
00:14:15,279 --> 00:14:17,440
that kubernetes is getting more and more

379
00:14:17,440 --> 00:14:18,720
popular right

380
00:14:18,720 --> 00:14:21,600
so they put together they they analyze

381
00:14:21,600 --> 00:14:22,240
and they

382
00:14:22,240 --> 00:14:25,519
identify like common uh categories

383
00:14:25,519 --> 00:14:27,600
on like whenever some somebody is

384
00:14:27,600 --> 00:14:29,040
attacking a kubernetes cluster they are

385
00:14:29,040 --> 00:14:30,880
they

386
00:14:30,880 --> 00:14:34,399
uh analyze and they identify nine steps

387
00:14:34,399 --> 00:14:36,959
like from getting from getting access to

388
00:14:36,959 --> 00:14:37,839
the

389
00:14:37,839 --> 00:14:40,480
initial access to the cluster until you

390
00:14:40,480 --> 00:14:41,519
know a

391
00:14:41,519 --> 00:14:43,680
cluster take cover or destroying

392
00:14:43,680 --> 00:14:45,680
information in the cluster right

393
00:14:45,680 --> 00:14:49,040
so yeah like these nine steps

394
00:14:49,040 --> 00:14:50,880
cover like the most popular techniques

395
00:14:50,880 --> 00:14:52,800
like science initial access to

396
00:14:52,800 --> 00:14:56,880
impact uh and then it was last year i

397
00:14:56,880 --> 00:14:58,560
think they published this article in

398
00:14:58,560 --> 00:14:59,360
april

399
00:14:59,360 --> 00:15:02,639
uh 2020 and then because kubernetes is

400
00:15:02,639 --> 00:15:04,320
evolving and the attacks are evolving

401
00:15:04,320 --> 00:15:05,440
they

402
00:15:05,440 --> 00:15:11,040
they grind a second with an update

403
00:15:11,040 --> 00:15:14,320
let me yeah we know we don't update that

404
00:15:14,320 --> 00:15:16,639
basically they deprecate like uh

405
00:15:16,639 --> 00:15:18,480
all techniques and that they added new

406
00:15:18,480 --> 00:15:20,240
techniques so i'm going to talk about

407
00:15:20,240 --> 00:15:21,839
these techniques here

408
00:15:21,839 --> 00:15:24,320
so previously it was nine categories now

409
00:15:24,320 --> 00:15:26,240
we stand they added collection

410
00:15:26,240 --> 00:15:28,000
that has to do with collecting

411
00:15:28,000 --> 00:15:29,519
information from inside the cluster

412
00:15:29,519 --> 00:15:30,160
right

413
00:15:30,160 --> 00:15:33,680
so the first one is the initial access

414
00:15:33,680 --> 00:15:41,839
let me go back to my presentation

415
00:15:52,839 --> 00:15:54,240
okay

416
00:15:54,240 --> 00:15:56,160
okay so yeah there is a lot of

417
00:15:56,160 --> 00:15:58,399
similarities on how do you attack

418
00:15:58,399 --> 00:16:02,320
a kubernetes cluster like to how do you

419
00:16:02,320 --> 00:16:04,480
try to compromise a machine or how do

420
00:16:04,480 --> 00:16:06,240
you try to compromise a network

421
00:16:06,240 --> 00:16:08,399
like everything start about getting the

422
00:16:08,399 --> 00:16:09,839
initial access right

423
00:16:09,839 --> 00:16:13,279
and one way to do that is basically

424
00:16:13,279 --> 00:16:15,920
because more more and more kubernetes

425
00:16:15,920 --> 00:16:16,959
clusters

426
00:16:16,959 --> 00:16:19,680
are deployed on the public cloud like i

427
00:16:19,680 --> 00:16:20,399
mean

428
00:16:20,399 --> 00:16:23,680
amazon microsoft er

429
00:16:23,680 --> 00:16:27,440
google all those guys like offer do you

430
00:16:27,440 --> 00:16:30,079
offer you like manage like kubernetes

431
00:16:30,079 --> 00:16:31,839
clusters that they manage

432
00:16:31,839 --> 00:16:34,639
so if you compromise a machine that has

433
00:16:34,639 --> 00:16:36,639
some cloud credentials and then you you

434
00:16:36,639 --> 00:16:38,079
access to the

435
00:16:38,079 --> 00:16:41,199
to the cloud console and and

436
00:16:41,199 --> 00:16:45,120
you have enough power to go basically to

437
00:16:45,120 --> 00:16:46,320
to see all the infrastructure of a

438
00:16:46,320 --> 00:16:49,759
kubernetes cluster than you are in right

439
00:16:49,759 --> 00:16:52,000
another another very interesting way

440
00:16:52,000 --> 00:16:54,399
is like via compromise imagine

441
00:16:54,399 --> 00:16:55,440
registries right

442
00:16:55,440 --> 00:16:57,759
why is that because a lot of people

443
00:16:57,759 --> 00:16:58,720
deploy

444
00:16:58,720 --> 00:17:02,000
container images from public sources

445
00:17:02,000 --> 00:17:04,000
uh public sources that you don't trust

446
00:17:04,000 --> 00:17:06,559
usually and basically what you are doing

447
00:17:06,559 --> 00:17:08,559
is you are downloading code

448
00:17:08,559 --> 00:17:10,880
and executing that code inside your

449
00:17:10,880 --> 00:17:11,760
cluster right

450
00:17:11,760 --> 00:17:14,720
doesn't matter if you if you put like

451
00:17:14,720 --> 00:17:17,280
firewalls outside of the cluster

452
00:17:17,280 --> 00:17:18,959
or you block alcohol incoming

453
00:17:18,959 --> 00:17:21,679
communication as long as you have like

454
00:17:21,679 --> 00:17:22,240
somebody

455
00:17:22,240 --> 00:17:24,799
as long as you pull some some code into

456
00:17:24,799 --> 00:17:25,359
your

457
00:17:25,359 --> 00:17:27,199
cluster from an untrusted server you are

458
00:17:27,199 --> 00:17:29,120
going to give access to the attacker

459
00:17:29,120 --> 00:17:30,240
right

460
00:17:30,240 --> 00:17:32,799
uh the third way is via acute config

461
00:17:32,799 --> 00:17:33,360
file

462
00:17:33,360 --> 00:17:35,679
so a lot of people that work in software

463
00:17:35,679 --> 00:17:37,760
engineering know that this file contain

464
00:17:37,760 --> 00:17:40,000
contains the credentials for you to

465
00:17:40,000 --> 00:17:41,600
connect to a cluster right

466
00:17:41,600 --> 00:17:43,840
there is a an official tool from the

467
00:17:43,840 --> 00:17:46,160
kubernetes team called the the cube ctrl

468
00:17:46,160 --> 00:17:47,600
of cubecotto

469
00:17:47,600 --> 00:17:49,200
which is basically the command line

470
00:17:49,200 --> 00:17:51,280
interface for you to interact interact

471
00:17:51,280 --> 00:17:52,160
with the

472
00:17:52,160 --> 00:17:55,039
kubernetes cluster so if you steal this

473
00:17:55,039 --> 00:17:55,760
file from

474
00:17:55,760 --> 00:17:58,720
one of the developers laptop then

475
00:17:58,720 --> 00:18:00,320
basically you are stealing credentials

476
00:18:00,320 --> 00:18:02,640
and you can issue commands and you can

477
00:18:02,640 --> 00:18:06,640
retrieve infrastructure information

478
00:18:06,640 --> 00:18:09,120
and yeah that's another way to to get

479
00:18:09,120 --> 00:18:10,720
inside that cluster right

480
00:18:10,720 --> 00:18:12,559
the fourth way you'll be an application

481
00:18:12,559 --> 00:18:14,320
vulnerability of course so

482
00:18:14,320 --> 00:18:16,880
we developers write applications but

483
00:18:16,880 --> 00:18:19,120
those applications sometimes are exposed

484
00:18:19,120 --> 00:18:20,559
to the internet

485
00:18:20,559 --> 00:18:23,360
so if my application has a vulnerability

486
00:18:23,360 --> 00:18:24,000
that allow

487
00:18:24,000 --> 00:18:27,360
an attacker to execute code inside

488
00:18:27,360 --> 00:18:29,039
then that's the first step right he's

489
00:18:29,039 --> 00:18:32,240
going to be inside the cluster

490
00:18:32,240 --> 00:18:35,280
and the last one uses to be a

491
00:18:35,280 --> 00:18:37,520
kubernetes dashboard which nowadays is

492
00:18:37,520 --> 00:18:39,919
deprecated in favor of something worse i

493
00:18:39,919 --> 00:18:41,120
think which is

494
00:18:41,120 --> 00:18:43,760
uh nowadays there is a lot of companies

495
00:18:43,760 --> 00:18:44,559
that

496
00:18:44,559 --> 00:18:46,559
use focus on deploying kubernetes right

497
00:18:46,559 --> 00:18:48,400
like they they sell you support on how

498
00:18:48,400 --> 00:18:49,120
to

499
00:18:49,120 --> 00:18:51,039
manage your kubernetes cluster for your

500
00:18:51,039 --> 00:18:52,960
organization and they create

501
00:18:52,960 --> 00:18:55,039
like management dashboards like for

502
00:18:55,039 --> 00:18:56,000
example we have

503
00:18:56,000 --> 00:18:59,679
uh yeah we have like rancher

504
00:18:59,679 --> 00:19:02,480
we have like a queue flow we have the

505
00:19:02,480 --> 00:19:03,919
the kubernetes dashboard which is

506
00:19:03,919 --> 00:19:05,120
basically

507
00:19:05,120 --> 00:19:08,080
uh front ends to manage your kubernetes

508
00:19:08,080 --> 00:19:10,000
cluster so sometimes people expose those

509
00:19:10,000 --> 00:19:11,679
from them to the internet without

510
00:19:11,679 --> 00:19:14,000
authentication and that's a game over

511
00:19:14,000 --> 00:19:15,600
right because you can't do anything on

512
00:19:15,600 --> 00:19:18,000
the cluster from there

513
00:19:18,000 --> 00:19:20,400
so once you have the initial access the

514
00:19:20,400 --> 00:19:22,240
next thing you want to do is

515
00:19:22,240 --> 00:19:24,559
start executing your code inside the

516
00:19:24,559 --> 00:19:25,919
cluster right

517
00:19:25,919 --> 00:19:28,880
so if you have access to the cube ctl

518
00:19:28,880 --> 00:19:30,080
command like let's say

519
00:19:30,080 --> 00:19:31,919
let's say because you steal the cube

520
00:19:31,919 --> 00:19:34,480
conf file of one developer

521
00:19:34,480 --> 00:19:36,880
uh you are in the developer's machine

522
00:19:36,880 --> 00:19:39,200
but with the cube cube ctl except

523
00:19:39,200 --> 00:19:40,480
command you can

524
00:19:40,480 --> 00:19:43,120
actually get a shell from inside of the

525
00:19:43,120 --> 00:19:44,799
containers running on the on the

526
00:19:44,799 --> 00:19:46,160
kubernetes cluster right

527
00:19:46,160 --> 00:19:47,919
so it's very easy to use a single

528
00:19:47,919 --> 00:19:49,600
command and then you are you are inside

529
00:19:49,600 --> 00:19:51,039
the cluster right

530
00:19:51,039 --> 00:19:53,600
so another way is you can deploy your

531
00:19:53,600 --> 00:19:54,640
own container

532
00:19:54,640 --> 00:19:57,760
if you have a credentials power for

533
00:19:57,760 --> 00:19:59,280
powerful enough to deploy your own

534
00:19:59,280 --> 00:20:01,520
control your own container then you can

535
00:20:01,520 --> 00:20:02,240
run code

536
00:20:02,240 --> 00:20:05,440
inside the kubernetes context

537
00:20:05,440 --> 00:20:07,039
the tier one of course application

538
00:20:07,039 --> 00:20:08,880
exploit remote code execution

539
00:20:08,880 --> 00:20:10,799
if the vulnerable application allows you

540
00:20:10,799 --> 00:20:13,280
to run uh commands

541
00:20:13,280 --> 00:20:16,159
then like you can people right like you

542
00:20:16,159 --> 00:20:17,440
are you are

543
00:20:17,440 --> 00:20:19,120
you are outside the cluster but you can

544
00:20:19,120 --> 00:20:20,480
trigger like

545
00:20:20,480 --> 00:20:22,559
commands and you can scan the internal

546
00:20:22,559 --> 00:20:24,559
network and then you can communicate

547
00:20:24,559 --> 00:20:27,039
with the internal query services

548
00:20:27,039 --> 00:20:30,000
and do more interesting stuff the fourth

549
00:20:30,000 --> 00:20:30,960
one is

550
00:20:30,960 --> 00:20:32,960
something that is very common that i see

551
00:20:32,960 --> 00:20:34,080
organization do

552
00:20:34,080 --> 00:20:38,159
which is a ssh server but they deployed

553
00:20:38,159 --> 00:20:39,280
a container

554
00:20:39,280 --> 00:20:42,799
because they want people to have access

555
00:20:42,799 --> 00:20:45,840
to the inside inside the

556
00:20:45,840 --> 00:20:48,559
to to have access inside the to inside

557
00:20:48,559 --> 00:20:50,480
the the kubernetes cluster

558
00:20:50,480 --> 00:20:52,880
but they writing for for them is more

559
00:20:52,880 --> 00:20:53,520
easily

560
00:20:53,520 --> 00:20:55,600
used to deploy a ssh server and from

561
00:20:55,600 --> 00:20:56,880
them issue commands

562
00:20:56,880 --> 00:20:58,720
so if there is somebody brute force that

563
00:20:58,720 --> 00:21:00,000
then they

564
00:21:00,000 --> 00:21:01,360
they are automatically inside the

565
00:21:01,360 --> 00:21:03,760
cluster and the last one is

566
00:21:03,760 --> 00:21:05,760
some something that got added in this

567
00:21:05,760 --> 00:21:08,000
version which is a side car injection

568
00:21:08,000 --> 00:21:09,679
which basically is

569
00:21:09,679 --> 00:21:12,480
taking advantage of how kubernetes work

570
00:21:12,480 --> 00:21:13,520
which is

571
00:21:13,520 --> 00:21:15,760
uh what i already i mentioned in the

572
00:21:15,760 --> 00:21:16,880
past you have a pod

573
00:21:16,880 --> 00:21:19,039
but this pod is like a group of

574
00:21:19,039 --> 00:21:20,960
containers right you can have

575
00:21:20,960 --> 00:21:24,000
many containers inside a pot and

576
00:21:24,000 --> 00:21:26,240
this is getting more and more popular

577
00:21:26,240 --> 00:21:28,080
because let's say you are monitoring

578
00:21:28,080 --> 00:21:29,200
your

579
00:21:29,200 --> 00:21:31,520
your applications and every time you you

580
00:21:31,520 --> 00:21:32,320
go and

581
00:21:32,320 --> 00:21:33,919
tell kubernetes hey give me how many

582
00:21:33,919 --> 00:21:35,919
pots i'm running it will give you a

583
00:21:35,919 --> 00:21:37,840
number and maybe that number is the the

584
00:21:37,840 --> 00:21:39,760
number that you are expecting right

585
00:21:39,760 --> 00:21:42,799
but if you you don't pay attention

586
00:21:42,799 --> 00:21:45,679
like those spots can run more than more

587
00:21:45,679 --> 00:21:46,480
containers

588
00:21:46,480 --> 00:21:48,559
than the number that you are expected

589
00:21:48,559 --> 00:21:49,760
right and you can

590
00:21:49,760 --> 00:21:51,840
ignore that and maybe an attacker deploy

591
00:21:51,840 --> 00:21:54,960
a malicious container inside a

592
00:21:54,960 --> 00:21:57,360
an actual pot right an actual

593
00:21:57,360 --> 00:21:59,039
application that is running there

594
00:21:59,039 --> 00:22:00,559
so this is another another way to

595
00:22:00,559 --> 00:22:03,679
execute a code

596
00:22:03,679 --> 00:22:07,039
then once you already execute code then

597
00:22:07,039 --> 00:22:08,720
the next thing you want is persistent

598
00:22:08,720 --> 00:22:09,200
right

599
00:22:09,200 --> 00:22:12,240
how can i go back to the cluster if

600
00:22:12,240 --> 00:22:14,159
i go disconnected or somebody attacked

601
00:22:14,159 --> 00:22:15,919
me how can i maintain

602
00:22:15,919 --> 00:22:18,960
the hack right so yes i was mentioning

603
00:22:18,960 --> 00:22:21,919
back door containers

604
00:22:21,919 --> 00:22:24,559
if if the kubernetes administrator

605
00:22:24,559 --> 00:22:26,240
deploys an image

606
00:22:26,240 --> 00:22:29,039
from a public repository then you can

607
00:22:29,039 --> 00:22:32,240
modify that image and add your own

608
00:22:32,240 --> 00:22:35,120
bug door code area or your malware or

609
00:22:35,120 --> 00:22:37,120
whatever right

610
00:22:37,120 --> 00:22:39,120
another another import and another

611
00:22:39,120 --> 00:22:40,799
interesting one is the

612
00:22:40,799 --> 00:22:43,679
readable horsepower mode right because

613
00:22:43,679 --> 00:22:46,000
containers and ports support mounting

614
00:22:46,000 --> 00:22:47,520
actual physical

615
00:22:47,520 --> 00:22:49,679
volumes from the machine the physical

616
00:22:49,679 --> 00:22:50,640
machine

617
00:22:50,640 --> 00:22:53,360
if the if the kubernetes administrator

618
00:22:53,360 --> 00:22:54,000
mount

619
00:22:54,000 --> 00:22:56,799
a very critical path like for example

620
00:22:56,799 --> 00:22:58,240
you know the file that

621
00:22:58,240 --> 00:23:01,360
manage crawl jobs in linux then the

622
00:23:01,360 --> 00:23:03,200
application running there

623
00:23:03,200 --> 00:23:06,480
can make changes to that file and those

624
00:23:06,480 --> 00:23:08,159
files will persist on the machine

625
00:23:08,159 --> 00:23:11,840
right so he can persist

626
00:23:11,840 --> 00:23:14,480
the the attack there right there is

627
00:23:14,480 --> 00:23:16,080
another

628
00:23:16,080 --> 00:23:18,159
primitive of kubernetes another concept

629
00:23:18,159 --> 00:23:20,000
which is the kubernetes job which is

630
00:23:20,000 --> 00:23:21,679
basically operations

631
00:23:21,679 --> 00:23:24,320
that kubernetes will will do on a

632
00:23:24,320 --> 00:23:25,679
certain time right

633
00:23:25,679 --> 00:23:29,840
so you can uh you can manage or you can

634
00:23:29,840 --> 00:23:33,440
you can like a schedule you know like

635
00:23:33,440 --> 00:23:34,480
don't download these

636
00:23:34,480 --> 00:23:37,039
these deploy this malicious container

637
00:23:37,039 --> 00:23:38,640
but not not right now like

638
00:23:38,640 --> 00:23:40,960
wait five days or wait any amount of

639
00:23:40,960 --> 00:23:41,760
time right

640
00:23:41,760 --> 00:23:44,240
so deploy it like on the on the weekend

641
00:23:44,240 --> 00:23:44,799
right

642
00:23:44,799 --> 00:23:47,279
at 5 00 am when nobody is looking right

643
00:23:47,279 --> 00:23:50,000
so that is also possible via kubernetes

644
00:23:50,000 --> 00:23:50,799
scroll job

645
00:23:50,799 --> 00:23:53,919
and the last one which is uh one

646
00:23:53,919 --> 00:23:56,080
attack vector or attack technique that

647
00:23:56,080 --> 00:23:57,840
got added this year is a malicious

648
00:23:57,840 --> 00:23:59,919
admission controller which again

649
00:23:59,919 --> 00:24:03,200
is taking advantage of one of the

650
00:24:03,200 --> 00:24:04,559
kubernetes feature which is the

651
00:24:04,559 --> 00:24:06,640
admission controller which is basically

652
00:24:06,640 --> 00:24:07,600
a

653
00:24:07,600 --> 00:24:10,480
software component that will be sitting

654
00:24:10,480 --> 00:24:11,600
between

655
00:24:11,600 --> 00:24:14,799
uh the client and the api server

656
00:24:14,799 --> 00:24:16,480
and what it's going to do is going to

657
00:24:16,480 --> 00:24:18,159
receive a request

658
00:24:18,159 --> 00:24:20,080
it's going to analyze the request and

659
00:24:20,080 --> 00:24:21,840
you're going to mutate it

660
00:24:21,840 --> 00:24:24,720
and then send it to the api server so

661
00:24:24,720 --> 00:24:26,240
that way you can

662
00:24:26,240 --> 00:24:28,159
like every every time you know a

663
00:24:28,159 --> 00:24:30,720
developer wants to deploy a specific

664
00:24:30,720 --> 00:24:32,400
application you can

665
00:24:32,400 --> 00:24:35,279
sneak or you can add your own malicious

666
00:24:35,279 --> 00:24:36,080
container

667
00:24:36,080 --> 00:24:38,320
inside their deployment right and he

668
00:24:38,320 --> 00:24:40,720
will not know

669
00:24:40,720 --> 00:24:43,840
so yeah this is a new very smart way to

670
00:24:43,840 --> 00:24:44,320
do it

671
00:24:44,320 --> 00:24:47,440
as well so

672
00:24:47,440 --> 00:24:50,000
yeah after that once you have access and

673
00:24:50,000 --> 00:24:50,799
you you

674
00:24:50,799 --> 00:24:53,200
have persistence in the cluster the next

675
00:24:53,200 --> 00:24:54,720
logical step is to

676
00:24:54,720 --> 00:24:58,880
previous escalation right so

677
00:24:58,880 --> 00:25:02,000
how can we do that so kubernetes

678
00:25:02,000 --> 00:25:05,360
privilege uh kubernetes use

679
00:25:05,360 --> 00:25:06,960
tokens and a concept that is called

680
00:25:06,960 --> 00:25:08,400
service.com and

681
00:25:08,400 --> 00:25:10,000
service account has many different

682
00:25:10,000 --> 00:25:11,679
powers in kubernetes

683
00:25:11,679 --> 00:25:14,320
so if you know if you're inside a

684
00:25:14,320 --> 00:25:15,840
cluster and you know for a fact that

685
00:25:15,840 --> 00:25:16,400
another

686
00:25:16,400 --> 00:25:19,520
application require more privilege to do

687
00:25:19,520 --> 00:25:21,520
their their job like for example i'm on

688
00:25:21,520 --> 00:25:24,320
a cluster and i know there is a

689
00:25:24,320 --> 00:25:27,120
a container that is running gankings and

690
00:25:27,120 --> 00:25:28,480
i know jenkins

691
00:25:28,480 --> 00:25:31,360
require elevate privilege so i have to

692
00:25:31,360 --> 00:25:33,200
attack that container right because then

693
00:25:33,200 --> 00:25:34,559
if i if i'm able to

694
00:25:34,559 --> 00:25:36,960
to go inside that container i can steal

695
00:25:36,960 --> 00:25:38,320
the token

696
00:25:38,320 --> 00:25:41,200
and from that i can continue escalating

697
00:25:41,200 --> 00:25:42,480
right

698
00:25:42,480 --> 00:25:44,960
the next one is called the cluster admin

699
00:25:44,960 --> 00:25:45,520
binding

700
00:25:45,520 --> 00:25:47,440
i'm going to talk a little bit about

701
00:25:47,440 --> 00:25:48,880
more about the cluster

702
00:25:48,880 --> 00:25:51,520
cluster roles but cluster admin binding

703
00:25:51,520 --> 00:25:52,880
is a default

704
00:25:52,880 --> 00:25:54,559
a role in kubernetes which is very

705
00:25:54,559 --> 00:25:56,559
powerful that basically allow you to do

706
00:25:56,559 --> 00:25:57,360
anything

707
00:25:57,360 --> 00:25:59,520
so if you are inside a kubernetes

708
00:25:59,520 --> 00:26:00,559
cluster and

709
00:26:00,559 --> 00:26:03,039
there is an uh an application with a

710
00:26:03,039 --> 00:26:04,240
service account

711
00:26:04,240 --> 00:26:07,919
token that has uh the cluster admin role

712
00:26:07,919 --> 00:26:09,520
that will be like the jackpot right

713
00:26:09,520 --> 00:26:10,960
because if you compromise

714
00:26:10,960 --> 00:26:13,360
that container then you will be able to

715
00:26:13,360 --> 00:26:16,000
do anything that you want on the cluster

716
00:26:16,000 --> 00:26:17,760
so usually attackers are looking for

717
00:26:17,760 --> 00:26:19,919
this kind of

718
00:26:19,919 --> 00:26:23,679
privilege levels right hospital again as

719
00:26:23,679 --> 00:26:26,799
i say before so because you have access

720
00:26:26,799 --> 00:26:30,159
to the actual physical machine you can

721
00:26:30,159 --> 00:26:30,880
like

722
00:26:30,880 --> 00:26:32,720
do a stuff like like i mentioned like

723
00:26:32,720 --> 00:26:34,640
modifying uh create a new chrome job

724
00:26:34,640 --> 00:26:37,039
right or or read a sensitive file

725
00:26:37,039 --> 00:26:39,679
or trying basically try to escape the

726
00:26:39,679 --> 00:26:40,480
container

727
00:26:40,480 --> 00:26:42,720
into the physical machine right and once

728
00:26:42,720 --> 00:26:44,080
you're in the physical machine you can

729
00:26:44,080 --> 00:26:46,320
talk directly to the cubelet service and

730
00:26:46,320 --> 00:26:47,760
many other services

731
00:26:47,760 --> 00:26:50,480
used by kubernetes and the last one

732
00:26:50,480 --> 00:26:52,000
which is also very

733
00:26:52,000 --> 00:26:54,400
public cloud related is the access cloud

734
00:26:54,400 --> 00:26:55,520
resources

735
00:26:55,520 --> 00:26:58,720
which is usually when kubernetes is

736
00:26:58,720 --> 00:26:59,360
deployed

737
00:26:59,360 --> 00:27:02,080
with a in a public cloud like azure or

738
00:27:02,080 --> 00:27:02,559
google

739
00:27:02,559 --> 00:27:06,000
those guys are their own services

740
00:27:06,000 --> 00:27:09,360
that along with the integration right so

741
00:27:09,360 --> 00:27:12,960
for example they have like a meta

742
00:27:12,960 --> 00:27:15,039
services they have like uh

743
00:27:15,039 --> 00:27:17,919
amazon like uh they have many other

744
00:27:17,919 --> 00:27:19,679
resources like

745
00:27:19,679 --> 00:27:23,039
s3 storage like deploying easy instances

746
00:27:23,039 --> 00:27:24,320
like creating groups

747
00:27:24,320 --> 00:27:27,440
so a compromise

748
00:27:27,440 --> 00:27:30,559
container can also give you access to it

749
00:27:30,559 --> 00:27:32,399
to those other resources right

750
00:27:32,399 --> 00:27:35,919
so you can start escalating more

751
00:27:35,919 --> 00:27:37,760
so yeah this was pretty privileged

752
00:27:37,760 --> 00:27:39,840
escalation

753
00:27:39,840 --> 00:27:42,399
the next one is defensive asian what can

754
00:27:42,399 --> 00:27:43,279
we do

755
00:27:43,279 --> 00:27:46,880
to like uh avoid detection right so one

756
00:27:46,880 --> 00:27:49,200
usually one one thing attackers do is uh

757
00:27:49,200 --> 00:27:51,520
to clear container logs right

758
00:27:51,520 --> 00:27:55,279
so this may be deleted if the

759
00:27:55,279 --> 00:27:57,760
the logs folder is mounted in the

760
00:27:57,760 --> 00:27:59,279
container then you can

761
00:27:59,279 --> 00:28:00,799
go and delete those files and the

762
00:28:00,799 --> 00:28:03,360
changes will will persist

763
00:28:03,360 --> 00:28:04,960
uh there is another way in which

764
00:28:04,960 --> 00:28:07,440
kubernetes logs

765
00:28:07,440 --> 00:28:09,200
do the logging which is a kubernetes

766
00:28:09,200 --> 00:28:11,440
events the command is qctld

767
00:28:11,440 --> 00:28:14,399
get events but if you compromise uh

768
00:28:14,399 --> 00:28:14,799
power

769
00:28:14,799 --> 00:28:16,640
powerful if not enough credentials then

770
00:28:16,640 --> 00:28:18,640
you can delete all those events right

771
00:28:18,640 --> 00:28:21,039
and the developers will not know what is

772
00:28:21,039 --> 00:28:22,480
happening there right

773
00:28:22,480 --> 00:28:25,679
usually uh in those events you will see

774
00:28:25,679 --> 00:28:26,399
something like

775
00:28:26,399 --> 00:28:28,240
this spot got created this spot got

776
00:28:28,240 --> 00:28:29,679
deleted uh

777
00:28:29,679 --> 00:28:32,320
it got something failed because a reason

778
00:28:32,320 --> 00:28:34,000
whatever right

779
00:28:34,000 --> 00:28:37,600
and the next one is someone that is very

780
00:28:37,600 --> 00:28:40,080
i think is very funny and smart which is

781
00:28:40,080 --> 00:28:41,919
container name similarity

782
00:28:41,919 --> 00:28:45,279
so usually when you deploy ports

783
00:28:45,279 --> 00:28:49,120
via a controller such as a

784
00:28:49,120 --> 00:28:51,120
replica asset controller or stateful set

785
00:28:51,120 --> 00:28:53,760
controller or deployment controller

786
00:28:53,760 --> 00:28:55,520
you are not creating the the pods

787
00:28:55,520 --> 00:28:57,919
directly is a kubernetes component so

788
00:28:57,919 --> 00:28:58,799
this

789
00:28:58,799 --> 00:29:01,520
component will uh use the name of the

790
00:29:01,520 --> 00:29:02,320
deployment

791
00:29:02,320 --> 00:29:05,039
and then we'll add like a suffix with a

792
00:29:05,039 --> 00:29:06,960
random string

793
00:29:06,960 --> 00:29:09,360
so what you can do is if you have

794
00:29:09,360 --> 00:29:12,159
credentials that allow you to create

795
00:29:12,159 --> 00:29:15,520
content pods sorry what you can define

796
00:29:15,520 --> 00:29:17,919
whatever name you want so

797
00:29:17,919 --> 00:29:21,120
you can deploy your normal issues

798
00:29:21,120 --> 00:29:23,679
container or port in the cube system

799
00:29:23,679 --> 00:29:25,440
namespace and you can

800
00:29:25,440 --> 00:29:27,919
make it look like it was part of the of

801
00:29:27,919 --> 00:29:29,440
the same group of spots right

802
00:29:29,440 --> 00:29:32,480
you can choose a similar name that kind

803
00:29:32,480 --> 00:29:34,799
kindness dash and whatever random thing

804
00:29:34,799 --> 00:29:37,039
you want and then it will be very

805
00:29:37,039 --> 00:29:38,399
difficult to detect right because

806
00:29:38,399 --> 00:29:40,159
everything looks the same

807
00:29:40,159 --> 00:29:42,640
and the last one is connect from proxy

808
00:29:42,640 --> 00:29:44,480
server this one i think it has to do

809
00:29:44,480 --> 00:29:46,399
with the qct and proxy

810
00:29:46,399 --> 00:29:49,600
command which is it will mask or hide

811
00:29:49,600 --> 00:29:50,240
your real

812
00:29:50,240 --> 00:29:52,640
ip address right instead it will take

813
00:29:52,640 --> 00:29:54,000
the ip address of the machine

814
00:29:54,000 --> 00:29:56,960
that is running the the actual qctl

815
00:29:56,960 --> 00:29:58,399
proxy command which may be

816
00:29:58,399 --> 00:30:01,760
the developer's machine right so that

817
00:30:01,760 --> 00:30:05,039
was the friend servation

818
00:30:06,720 --> 00:30:09,120
the next one is credential success and

819
00:30:09,120 --> 00:30:10,080
here is where things

820
00:30:10,080 --> 00:30:12,399
start to get interesting right because i

821
00:30:12,399 --> 00:30:15,039
remember i was talking about

822
00:30:15,039 --> 00:30:18,399
config maps and secrets so

823
00:30:18,399 --> 00:30:20,880
by default service account token on an

824
00:30:20,880 --> 00:30:22,080
application

825
00:30:22,080 --> 00:30:25,360
we will allow you to list

826
00:30:25,360 --> 00:30:27,360
the secrets and copy map of a particular

827
00:30:27,360 --> 00:30:28,480
namespace

828
00:30:28,480 --> 00:30:31,840
so if you compromise an application

829
00:30:31,840 --> 00:30:33,440
you can use that service account token

830
00:30:33,440 --> 00:30:35,600
to go and talk to the api server

831
00:30:35,600 --> 00:30:38,480
and and ask for the other secrets on

832
00:30:38,480 --> 00:30:40,080
that particular

833
00:30:40,080 --> 00:30:42,960
namespace right so usually secrets are

834
00:30:42,960 --> 00:30:46,159
used to store like database credentials

835
00:30:46,159 --> 00:30:49,279
also kubernetes has this concept of a

836
00:30:49,279 --> 00:30:51,039
certain internal certificate authority

837
00:30:51,039 --> 00:30:53,039
so there is if there is an application

838
00:30:53,039 --> 00:30:55,120
deployed with tls

839
00:30:55,120 --> 00:30:57,760
very very probably that the certificates

840
00:30:57,760 --> 00:30:59,440
the actual public and privacy are going

841
00:30:59,440 --> 00:31:01,519
to be stored as kubernetes secrets

842
00:31:01,519 --> 00:31:03,840
so you can get those and then you can

843
00:31:03,840 --> 00:31:05,279
decrypt the incoming traffic

844
00:31:05,279 --> 00:31:08,960
to that to that particular application

845
00:31:08,960 --> 00:31:12,000
uh then because this list was based on

846
00:31:12,000 --> 00:31:14,000
microsoft blog posts so they

847
00:31:14,000 --> 00:31:16,000
they talk about the service principle

848
00:31:16,000 --> 00:31:17,519
which is a concept they

849
00:31:17,519 --> 00:31:19,919
they use on their azure kubernetes

850
00:31:19,919 --> 00:31:20,799
service

851
00:31:20,799 --> 00:31:24,000
which is a special file that contains

852
00:31:24,000 --> 00:31:27,039
some credentials and is mounted on every

853
00:31:27,039 --> 00:31:27,519
port

854
00:31:27,519 --> 00:31:30,159
on the cluster right so if you are able

855
00:31:30,159 --> 00:31:32,559
to get that file then you basically can

856
00:31:32,559 --> 00:31:33,440
access to

857
00:31:33,440 --> 00:31:38,399
cloud resources the next one is

858
00:31:38,640 --> 00:31:40,480
service account token which is by

859
00:31:40,480 --> 00:31:42,880
default service account token will be

860
00:31:42,880 --> 00:31:43,519
mounted

861
00:31:43,519 --> 00:31:46,799
to all the bots on the cluster under

862
00:31:46,799 --> 00:31:48,399
this path

863
00:31:48,399 --> 00:31:51,279
so you can if you have like common

864
00:31:51,279 --> 00:31:53,279
execution on that container you can go

865
00:31:53,279 --> 00:31:55,679
and read the token and you can basically

866
00:31:55,679 --> 00:31:58,080
literally use two core commands to the

867
00:31:58,080 --> 00:32:00,720
api api server kubernetes

868
00:32:00,720 --> 00:32:02,559
and include this token which will be

869
00:32:02,559 --> 00:32:04,240
your authorization and

870
00:32:04,240 --> 00:32:06,960
start retrieving information right of

871
00:32:06,960 --> 00:32:08,559
course depending on the level of access

872
00:32:08,559 --> 00:32:09,760
of the token

873
00:32:09,760 --> 00:32:12,720
but this is like very important and it

874
00:32:12,720 --> 00:32:14,960
will lead you

875
00:32:14,960 --> 00:32:18,159
like yeah escalate privilege and lateral

876
00:32:18,159 --> 00:32:20,480
movement

877
00:32:20,480 --> 00:32:22,799
also as i was mentioning applications

878
00:32:22,799 --> 00:32:25,120
creations are usually stored in conflict

879
00:32:25,120 --> 00:32:26,559
maps and secrets so

880
00:32:26,559 --> 00:32:28,240
yeah there is going to be a lot of stuff

881
00:32:28,240 --> 00:32:30,240
there and then we have

882
00:32:30,240 --> 00:32:32,720
access management identity which is also

883
00:32:32,720 --> 00:32:36,000
a public cloud concept which is

884
00:32:36,000 --> 00:32:39,519
uh basically applications that want to

885
00:32:39,519 --> 00:32:40,720
interact

886
00:32:40,720 --> 00:32:44,320
with cloud resources such as a database

887
00:32:44,320 --> 00:32:45,679
managed by the

888
00:32:45,679 --> 00:32:48,880
public cloud or s3

889
00:32:48,880 --> 00:32:50,799
object storage manager managed managed

890
00:32:50,799 --> 00:32:53,120
by the public cloud so

891
00:32:53,120 --> 00:32:56,399
if you compromise that that

892
00:32:56,399 --> 00:32:58,559
application then you automatically will

893
00:32:58,559 --> 00:32:59,760
also compromise

894
00:32:59,760 --> 00:33:02,000
the credentials in which that

895
00:33:02,000 --> 00:33:04,159
application has access right

896
00:33:04,159 --> 00:33:07,200
and again our good friend the manager

897
00:33:07,200 --> 00:33:10,000
admission controller leverage on the

898
00:33:10,000 --> 00:33:11,760
fact that this submission controller

899
00:33:11,760 --> 00:33:12,080
will

900
00:33:12,080 --> 00:33:15,360
intercept all the uh

901
00:33:15,360 --> 00:33:17,279
all the jammers that are incoming then

902
00:33:17,279 --> 00:33:19,519
you can inspect and look for credentials

903
00:33:19,519 --> 00:33:20,240
there right

904
00:33:20,240 --> 00:33:22,960
like uh yeah like you you can look for

905
00:33:22,960 --> 00:33:24,320
secrets or

906
00:33:24,320 --> 00:33:26,240
config maps on and also i'm going to

907
00:33:26,240 --> 00:33:27,519
talk about a little bit

908
00:33:27,519 --> 00:33:30,080
more about the image pull secrets which

909
00:33:30,080 --> 00:33:31,840
is a credential for

910
00:33:31,840 --> 00:33:33,519
downloading images from private

911
00:33:33,519 --> 00:33:34,960
repositories

912
00:33:34,960 --> 00:33:37,120
so as you can see there is many

913
00:33:37,120 --> 00:33:38,240
different ways right

914
00:33:38,240 --> 00:33:41,760
to get credentials when you have access

915
00:33:41,760 --> 00:33:43,760
uh the next one is discovery so

916
00:33:43,760 --> 00:33:45,440
discovery is once you are inside the

917
00:33:45,440 --> 00:33:46,320
cluster

918
00:33:46,320 --> 00:33:47,760
what can you see right because you are

919
00:33:47,760 --> 00:33:51,120
already inside the the cluster context

920
00:33:51,120 --> 00:33:54,000
you can scan the network like get

921
00:33:54,000 --> 00:33:55,840
information about any other pods

922
00:33:55,840 --> 00:33:58,399
any other applications or you can go and

923
00:33:58,399 --> 00:34:00,559
ask directly the cube the kubernetes api

924
00:34:00,559 --> 00:34:01,679
server right

925
00:34:01,679 --> 00:34:03,360
if you serve it as a contact and it's

926
00:34:03,360 --> 00:34:04,799
powerful enough you can

927
00:34:04,799 --> 00:34:06,320
tell kubernetes hey give me all the

928
00:34:06,320 --> 00:34:08,480
services and it will return you a list

929
00:34:08,480 --> 00:34:09,679
of services

930
00:34:09,679 --> 00:34:13,119
and which poll they are running right uh

931
00:34:13,119 --> 00:34:17,440
you can also ask the cubelet api

932
00:34:17,440 --> 00:34:20,960
like a cuban cubelet api has like a port

933
00:34:20,960 --> 00:34:22,800
exposed on the on the actual physical

934
00:34:22,800 --> 00:34:24,159
machine that doesn't require

935
00:34:24,159 --> 00:34:25,359
authentication

936
00:34:25,359 --> 00:34:27,679
and can also give you information about

937
00:34:27,679 --> 00:34:29,839
the what's the the current parts running

938
00:34:29,839 --> 00:34:31,359
on that particular machine

939
00:34:31,359 --> 00:34:34,079
and also some information on about the

940
00:34:34,079 --> 00:34:36,879
current node

941
00:34:36,879 --> 00:34:40,079
so yes i i was saying network mapping uh

942
00:34:40,079 --> 00:34:41,839
kubernetes dashboard if that thing is

943
00:34:41,839 --> 00:34:43,918
deployed there basically you can do

944
00:34:43,918 --> 00:34:44,960
anything you can do

945
00:34:44,960 --> 00:34:47,918
through the cli but in a graphical way

946
00:34:47,918 --> 00:34:48,239
an

947
00:34:48,239 --> 00:34:50,719
instance metadata api which again is

948
00:34:50,719 --> 00:34:52,879
very dependent on the public cloud

949
00:34:52,879 --> 00:34:55,599
so those guys add this because of the

950
00:34:55,599 --> 00:34:57,599
integration and because

951
00:34:57,599 --> 00:34:59,440
sometimes you as a developer wants to

952
00:34:59,440 --> 00:35:02,320
get information of metrics of the actual

953
00:35:02,320 --> 00:35:03,359
physical node

954
00:35:03,359 --> 00:35:05,760
so your application can take and make

955
00:35:05,760 --> 00:35:08,000
decisions right

956
00:35:08,000 --> 00:35:11,839
and yeah lateral movement so

957
00:35:11,839 --> 00:35:13,920
yeah what can you do as i was saying if

958
00:35:13,920 --> 00:35:15,440
you compromise a container

959
00:35:15,440 --> 00:35:18,320
you it's very probably that you you can

960
00:35:18,320 --> 00:35:20,079
have access to the cloud resources using

961
00:35:20,079 --> 00:35:20,800
that for

962
00:35:20,800 --> 00:35:22,560
by that container or that application

963
00:35:22,560 --> 00:35:24,160
right

964
00:35:24,160 --> 00:35:27,119
you can try to use the service account

965
00:35:27,119 --> 00:35:28,240
token

966
00:35:28,240 --> 00:35:31,280
to read uh secrets and credentials from

967
00:35:31,280 --> 00:35:32,240
other applications

968
00:35:32,240 --> 00:35:34,720
and then escalate or move to that

969
00:35:34,720 --> 00:35:37,119
application container right

970
00:35:37,119 --> 00:35:38,960
you can try to see what is inside the

971
00:35:38,960 --> 00:35:41,200
cluster internal networking

972
00:35:41,200 --> 00:35:44,560
and also they are the last one is very

973
00:35:44,560 --> 00:35:46,800
interesting and it was added in the last

974
00:35:46,800 --> 00:35:47,839
version of the

975
00:35:47,839 --> 00:35:49,520
the thread matrix of kubernetes which is

976
00:35:49,520 --> 00:35:51,280
the core dns poisoning

977
00:35:51,280 --> 00:35:53,599
which is core dns is basically a

978
00:35:53,599 --> 00:35:55,040
software component

979
00:35:55,040 --> 00:35:56,880
dns server used by the holding

980
00:35:56,880 --> 00:35:59,680
kubernetes and basically

981
00:35:59,680 --> 00:36:02,960
as the name says is manage the the

982
00:36:02,960 --> 00:36:04,640
the name resolving right the hostname

983
00:36:04,640 --> 00:36:06,480
resolving so

984
00:36:06,480 --> 00:36:10,079
coordinates store the the configuration

985
00:36:10,079 --> 00:36:13,200
in a config map file that is called the

986
00:36:13,200 --> 00:36:14,320
core file

987
00:36:14,320 --> 00:36:16,640
in kubernetes so if you have credentials

988
00:36:16,640 --> 00:36:18,640
that can go and modify that file

989
00:36:18,640 --> 00:36:21,359
then you can poison the basically the

990
00:36:21,359 --> 00:36:22,720
the coordinates

991
00:36:22,720 --> 00:36:24,960
answers right so yeah it's very

992
00:36:24,960 --> 00:36:26,720
interesting like when i read about this

993
00:36:26,720 --> 00:36:26,960
i

994
00:36:26,960 --> 00:36:28,960
i went to my local development cluster

995
00:36:28,960 --> 00:36:32,000
and i started playing there

996
00:36:32,480 --> 00:36:34,560
and then we have a collection which was

997
00:36:34,560 --> 00:36:36,160
the the

998
00:36:36,160 --> 00:36:38,079
the new category that was added and i

999
00:36:38,079 --> 00:36:41,119
was as i was telling like usually people

1000
00:36:41,119 --> 00:36:41,920
deploy

1001
00:36:41,920 --> 00:36:44,640
images from the public cloud but they

1002
00:36:44,640 --> 00:36:45,359
can also

1003
00:36:45,359 --> 00:36:47,280
deploy from private cloud but in order

1004
00:36:47,280 --> 00:36:48,560
to do that they

1005
00:36:48,560 --> 00:36:52,560
they have to to set credentials right

1006
00:36:52,560 --> 00:36:54,480
and these credentials are

1007
00:36:54,480 --> 00:36:56,880
are created as a kubernetes secret and

1008
00:36:56,880 --> 00:36:59,200
then those credentials are attached

1009
00:36:59,200 --> 00:37:02,160
to the port using the image pull secrets

1010
00:37:02,160 --> 00:37:03,280
directive

1011
00:37:03,280 --> 00:37:06,800
so you have access to uh you know

1012
00:37:06,800 --> 00:37:09,520
to to read this kind of of jaml files

1013
00:37:09,520 --> 00:37:10,800
then you can

1014
00:37:10,800 --> 00:37:13,440
base basically for the code this and has

1015
00:37:13,440 --> 00:37:14,240
access

1016
00:37:14,240 --> 00:37:19,440
to you know to extract private images

1017
00:37:19,440 --> 00:37:22,079
and the last one is the impact right now

1018
00:37:22,079 --> 00:37:23,119
that you

1019
00:37:23,119 --> 00:37:24,800
that an attacker is able to do all of

1020
00:37:24,800 --> 00:37:27,440
this he can do like basically three

1021
00:37:27,440 --> 00:37:29,599
things right he can do data destruction

1022
00:37:29,599 --> 00:37:30,800
like let's say

1023
00:37:30,800 --> 00:37:32,800
there is another concept that i didn't

1024
00:37:32,800 --> 00:37:34,320
mention at the beginning but

1025
00:37:34,320 --> 00:37:38,000
the way kubernetes uh persist

1026
00:37:38,000 --> 00:37:41,040
information from containers is via

1027
00:37:41,040 --> 00:37:43,680
persistent volumes so if you have access

1028
00:37:43,680 --> 00:37:44,640
to kubernetes

1029
00:37:44,640 --> 00:37:46,800
with the level previously you can delete

1030
00:37:46,800 --> 00:37:48,079
persistent volumes

1031
00:37:48,079 --> 00:37:49,599
and you basically that is destroying

1032
00:37:49,599 --> 00:37:52,640
data right uh resource hijacking

1033
00:37:52,640 --> 00:37:56,079
which is basically deploy like malicious

1034
00:37:56,079 --> 00:37:56,960
container that

1035
00:37:56,960 --> 00:37:59,280
maybe you want to mine bitcoin or

1036
00:37:59,280 --> 00:38:01,359
ethereum or

1037
00:38:01,359 --> 00:38:04,160
any other cryptocurrency or whatever so

1038
00:38:04,160 --> 00:38:04,800
you can

1039
00:38:04,800 --> 00:38:06,800
leverage the kubernetes the machine

1040
00:38:06,800 --> 00:38:07,920
resources

1041
00:38:07,920 --> 00:38:11,440
for you to uh to do stuff and the last

1042
00:38:11,440 --> 00:38:12,560
one which is the

1043
00:38:12,560 --> 00:38:14,560
denial of service which i think is very

1044
00:38:14,560 --> 00:38:16,800
easy to do in kubernetes because

1045
00:38:16,800 --> 00:38:19,520
i can imagine an scenario in which there

1046
00:38:19,520 --> 00:38:20,480
is a service

1047
00:38:20,480 --> 00:38:23,920
that is routing traffic to many ports

1048
00:38:23,920 --> 00:38:27,680
using a label and with a minimal change

1049
00:38:27,680 --> 00:38:29,520
on that service which is changing the

1050
00:38:29,520 --> 00:38:32,240
label like adding a typo to that label

1051
00:38:32,240 --> 00:38:34,320
then incoming requests will not be able

1052
00:38:34,320 --> 00:38:35,839
to reach the post

1053
00:38:35,839 --> 00:38:38,320
and from the outside is going to feel

1054
00:38:38,320 --> 00:38:38,880
like the

1055
00:38:38,880 --> 00:38:41,520
if the application is down right but if

1056
00:38:41,520 --> 00:38:43,359
if devops or developers won't see the

1057
00:38:43,359 --> 00:38:45,119
cluster they will see everything is fine

1058
00:38:45,119 --> 00:38:46,560
right they will see the

1059
00:38:46,560 --> 00:38:49,440
the pots are up the services are up and

1060
00:38:49,440 --> 00:38:50,640
everything looks fine

1061
00:38:50,640 --> 00:38:53,040
they have to go to the service

1062
00:38:53,040 --> 00:38:54,160
definition and see

1063
00:38:54,160 --> 00:38:57,280
the the actual title there right so that

1064
00:38:57,280 --> 00:38:59,119
is one way to do the network service

1065
00:38:59,119 --> 00:39:00,000
another way is

1066
00:39:00,000 --> 00:39:02,560
to go and delete directly the deployment

1067
00:39:02,560 --> 00:39:04,560
and when you delete the deployment

1068
00:39:04,560 --> 00:39:07,200
the pods depending on that deployment

1069
00:39:07,200 --> 00:39:10,240
window will also get deleted right

1070
00:39:10,240 --> 00:39:12,240
another one which is very obvious is if

1071
00:39:12,240 --> 00:39:14,160
you delete the service the kubernetes

1072
00:39:14,160 --> 00:39:14,960
service then

1073
00:39:14,960 --> 00:39:17,040
your application will be still living

1074
00:39:17,040 --> 00:39:19,200
inside the cluster but there is no

1075
00:39:19,200 --> 00:39:21,359
there is no way for kubernetes to roll

1076
00:39:21,359 --> 00:39:22,640
traffic right because

1077
00:39:22,640 --> 00:39:25,280
it doesn't know how like how to how to

1078
00:39:25,280 --> 00:39:27,040
react right

1079
00:39:27,040 --> 00:39:30,720
so yeah this is the impact

1080
00:39:30,720 --> 00:39:33,760
and yeah now i'm going to talk about the

1081
00:39:33,760 --> 00:39:36,880
defensive part now that i know how to

1082
00:39:36,880 --> 00:39:39,359
uh destroy a kubernetes cluster or haka

1083
00:39:39,359 --> 00:39:40,640
kubernete cluster

1084
00:39:40,640 --> 00:39:43,520
let's talk about what are the the build

1085
00:39:43,520 --> 00:39:45,040
building defenses right

1086
00:39:45,040 --> 00:39:46,960
what can kubernetes offer us in order

1087
00:39:46,960 --> 00:39:48,320
for for all

1088
00:39:48,320 --> 00:39:52,079
to secure our cubing cluster so there is

1089
00:39:52,079 --> 00:39:54,000
uh three things the third one is

1090
00:39:54,000 --> 00:39:56,640
security context for pods

1091
00:39:56,640 --> 00:40:00,720
so if we are building an application

1092
00:40:00,720 --> 00:40:04,160
like we want to like following the

1093
00:40:04,160 --> 00:40:05,920
principle of least privilege we

1094
00:40:05,920 --> 00:40:08,800
we should deploy applications that are

1095
00:40:08,800 --> 00:40:10,240
not running as root that

1096
00:40:10,240 --> 00:40:12,640
doesn't have more capability than the

1097
00:40:12,640 --> 00:40:15,359
one that is needed

1098
00:40:15,359 --> 00:40:17,440
probably with uh secure computing

1099
00:40:17,440 --> 00:40:20,000
profiles or apartment profiles and stuff

1100
00:40:20,000 --> 00:40:20,960
like that

1101
00:40:20,960 --> 00:40:23,760
and looking for us allow kubernetes

1102
00:40:23,760 --> 00:40:25,520
developers to do that right or those

1103
00:40:25,520 --> 00:40:26,800
people to do that

1104
00:40:26,800 --> 00:40:30,079
so you can add this type of security

1105
00:40:30,079 --> 00:40:31,520
directly into the port

1106
00:40:31,520 --> 00:40:35,760
using these directives here so

1107
00:40:35,760 --> 00:40:37,440
there is more but this is like the most

1108
00:40:37,440 --> 00:40:38,960
common one which is

1109
00:40:38,960 --> 00:40:40,960
a low privilege escalation will tell

1110
00:40:40,960 --> 00:40:42,000
kubernetes

1111
00:40:42,000 --> 00:40:43,760
that the processing inside that

1112
00:40:43,760 --> 00:40:45,359
container will never

1113
00:40:45,359 --> 00:40:48,560
cannot be more powerful than the actual

1114
00:40:48,560 --> 00:40:49,119
process

1115
00:40:49,119 --> 00:40:51,359
right that started the container then

1116
00:40:51,359 --> 00:40:53,119
capabilities is again

1117
00:40:53,119 --> 00:40:54,720
i i talked about this in the in the

1118
00:40:54,720 --> 00:40:56,720
previous step which is

1119
00:40:56,720 --> 00:41:00,000
like what powers does the process of

1120
00:41:00,000 --> 00:41:03,119
your application has access to right

1121
00:41:03,119 --> 00:41:05,839
privilege basically is if a container

1122
00:41:05,839 --> 00:41:07,760
has a privilege flag basically it will

1123
00:41:07,760 --> 00:41:09,440
have access to all the

1124
00:41:09,440 --> 00:41:11,680
the physical machine name spaces like

1125
00:41:11,680 --> 00:41:13,040
the networking space the process

1126
00:41:13,040 --> 00:41:14,960
namespace the file system namespace and

1127
00:41:14,960 --> 00:41:18,160
all of the other namespaces and

1128
00:41:18,160 --> 00:41:21,599
pronouns then you can by default it's

1129
00:41:21,599 --> 00:41:22,160
going to be

1130
00:41:22,160 --> 00:41:23,680
root if you deploy an application to

1131
00:41:23,680 --> 00:41:25,440
kubernetes by default you will see

1132
00:41:25,440 --> 00:41:27,920
that has root access but if you then

1133
00:41:27,920 --> 00:41:30,319
find like any other id like a random id

1134
00:41:30,319 --> 00:41:30,960
you're going to

1135
00:41:30,960 --> 00:41:32,079
you're not going to be rooted you're

1136
00:41:32,079 --> 00:41:34,319
going to be another user

1137
00:41:34,319 --> 00:41:37,680
and then we have sorry then we have an

1138
00:41:37,680 --> 00:41:39,680
option for you to to do the security

1139
00:41:39,680 --> 00:41:42,240
enhance a configuration of the second

1140
00:41:42,240 --> 00:41:43,200
profile

1141
00:41:43,200 --> 00:41:45,920
but remember if you were to download if

1142
00:41:45,920 --> 00:41:48,000
you are deploying application

1143
00:41:48,000 --> 00:41:50,240
you need to do this for each application

1144
00:41:50,240 --> 00:41:51,839
you want right like you are putting the

1145
00:41:51,839 --> 00:41:52,480
security

1146
00:41:52,480 --> 00:41:55,119
directly into the into the deployment or

1147
00:41:55,119 --> 00:41:56,079
the pot in this

1148
00:41:56,079 --> 00:41:58,000
scenario and that is not the idea

1149
00:41:58,000 --> 00:42:00,079
because people make mistakes and

1150
00:42:00,079 --> 00:42:01,520
somebody can

1151
00:42:01,520 --> 00:42:04,160
ignore this and then the deposit is

1152
00:42:04,160 --> 00:42:07,599
going to be deployed in an insecure way

1153
00:42:07,599 --> 00:42:10,319
uh the next defense is the networking

1154
00:42:10,319 --> 00:42:11,520
policies

1155
00:42:11,520 --> 00:42:14,480
uh because we already talked about that

1156
00:42:14,480 --> 00:42:16,800
by default in kubernetes

1157
00:42:16,800 --> 00:42:19,440
outputs can talk to any other port right

1158
00:42:19,440 --> 00:42:20,560
there is no

1159
00:42:20,560 --> 00:42:24,160
security enabled by default so

1160
00:42:24,160 --> 00:42:26,240
we can there is many things that we can

1161
00:42:26,240 --> 00:42:27,520
do right the first thing

1162
00:42:27,520 --> 00:42:30,560
is we need to install a cni driver cni

1163
00:42:30,560 --> 00:42:32,800
driver means container network interface

1164
00:42:32,800 --> 00:42:34,210
driver and

1165
00:42:34,210 --> 00:42:36,880
[Music]

1166
00:42:36,880 --> 00:42:40,400
yeah there is many different flavors are

1167
00:42:40,400 --> 00:42:42,400
but the most popular thing that i see in

1168
00:42:42,400 --> 00:42:44,240
the enterprise world is

1169
00:42:44,240 --> 00:42:47,359
planel calico and istio so flannel is

1170
00:42:47,359 --> 00:42:49,839
very easy to to configure very easy to

1171
00:42:49,839 --> 00:42:51,440
start but it's not very

1172
00:42:51,440 --> 00:42:54,640
powerful then i think calico

1173
00:42:54,640 --> 00:42:57,920
is the the next one this one requires a

1174
00:42:57,920 --> 00:42:59,920
little bit more configuration

1175
00:42:59,920 --> 00:43:02,720
but it's also very flexible very

1176
00:43:02,720 --> 00:43:03,680
powerful

1177
00:43:03,680 --> 00:43:06,400
and then there is istio that is their

1178
00:43:06,400 --> 00:43:07,359
own solution

1179
00:43:07,359 --> 00:43:09,520
themselves but they have their own cni

1180
00:43:09,520 --> 00:43:11,839
driver

1181
00:43:11,839 --> 00:43:14,160
yeah what network policy will allow you

1182
00:43:14,160 --> 00:43:15,680
to do is basically

1183
00:43:15,680 --> 00:43:19,040
define rules so tell we who can talk to

1184
00:43:19,040 --> 00:43:20,000
who

1185
00:43:20,000 --> 00:43:22,640
and again because in covenant everywhere

1186
00:43:22,640 --> 00:43:23,920
everything is

1187
00:43:23,920 --> 00:43:26,880
the declarative you can use say i want a

1188
00:43:26,880 --> 00:43:28,240
network policy

1189
00:43:28,240 --> 00:43:31,200
that will apply to all the ports on the

1190
00:43:31,200 --> 00:43:32,720
default namespace

1191
00:43:32,720 --> 00:43:36,400
that has the this particular label right

1192
00:43:36,400 --> 00:43:39,119
and then you can define ingress and an

1193
00:43:39,119 --> 00:43:40,880
egress boots

1194
00:43:40,880 --> 00:43:43,359
to tell uh who can talk to to these

1195
00:43:43,359 --> 00:43:45,599
spots in the default name space right

1196
00:43:45,599 --> 00:43:49,280
so in this particular example

1197
00:43:49,280 --> 00:43:52,640
we are saying that uh

1198
00:43:52,640 --> 00:43:55,680
all the like first of all if you have an

1199
00:43:55,680 --> 00:43:58,640
uh a network policy then the posts

1200
00:43:58,640 --> 00:43:59,680
inside that

1201
00:43:59,680 --> 00:44:02,079
namespace will be isolated but then you

1202
00:44:02,079 --> 00:44:02,880
can start

1203
00:44:02,880 --> 00:44:06,480
giving access to bots outside

1204
00:44:06,480 --> 00:44:08,400
based on rules like here for example i'm

1205
00:44:08,400 --> 00:44:10,079
saying the pod with a

1206
00:44:10,079 --> 00:44:14,079
role dbta label can receive connections

1207
00:44:14,079 --> 00:44:15,040
from a pod

1208
00:44:15,040 --> 00:44:18,079
in any other namespace as long as they

1209
00:44:18,079 --> 00:44:19,040
have the

1210
00:44:19,040 --> 00:44:22,240
the project my project label right so

1211
00:44:22,240 --> 00:44:25,359
yeah the bottom the on the right

1212
00:44:25,359 --> 00:44:27,760
at the bottom can go and talk to the

1213
00:44:27,760 --> 00:44:28,960
database

1214
00:44:28,960 --> 00:44:31,440
under that specific port but cannot go

1215
00:44:31,440 --> 00:44:34,160
and talk to the front end directly right

1216
00:44:34,160 --> 00:44:36,319
the front end yes can talk to the

1217
00:44:36,319 --> 00:44:37,920
database because they are in the same

1218
00:44:37,920 --> 00:44:39,200
namespace

1219
00:44:39,200 --> 00:44:41,839
and also the the database can go and

1220
00:44:41,839 --> 00:44:43,040
talk to

1221
00:44:43,040 --> 00:44:45,680
all the other pods within a particular

1222
00:44:45,680 --> 00:44:47,839
network segment

1223
00:44:47,839 --> 00:44:50,400
but the the front-end port cannot do

1224
00:44:50,400 --> 00:44:51,760
that because there is a

1225
00:44:51,760 --> 00:44:54,640
rule that prevents that right so network

1226
00:44:54,640 --> 00:44:56,319
policies will be the tool that allows

1227
00:44:56,319 --> 00:44:57,119
you to

1228
00:44:57,119 --> 00:44:59,680
to block communications or map

1229
00:44:59,680 --> 00:45:01,839
communications right so you can

1230
00:45:01,839 --> 00:45:03,760
add more security to your cluster and

1231
00:45:03,760 --> 00:45:06,000
you can mitigate like a

1232
00:45:06,000 --> 00:45:09,359
lateral movement with this

1233
00:45:09,440 --> 00:45:11,599
then the last defense is spot security

1234
00:45:11,599 --> 00:45:14,880
policy which is probably the most

1235
00:45:14,880 --> 00:45:18,079
secure way to to protect your cluster

1236
00:45:18,079 --> 00:45:19,839
but also the more complicated

1237
00:45:19,839 --> 00:45:22,079
because this this thing honestly is a

1238
00:45:22,079 --> 00:45:23,680
little bit of complicated there is

1239
00:45:23,680 --> 00:45:26,240
many many different concepts that i'm

1240
00:45:26,240 --> 00:45:27,839
going to try to summarize

1241
00:45:27,839 --> 00:45:31,599
but essentially pod security policies

1242
00:45:31,599 --> 00:45:35,040
uh different that the

1243
00:45:35,040 --> 00:45:37,359
security context in which you go and add

1244
00:45:37,359 --> 00:45:38,560
security

1245
00:45:38,560 --> 00:45:41,040
to that particular deployment or port

1246
00:45:41,040 --> 00:45:43,040
all security policies with al

1247
00:45:43,040 --> 00:45:45,920
which will add security to the cluster

1248
00:45:45,920 --> 00:45:46,800
itself and

1249
00:45:46,800 --> 00:45:50,319
will every time somebody wants to deploy

1250
00:45:50,319 --> 00:45:52,640
an application will run a series of

1251
00:45:52,640 --> 00:45:54,800
checks a series of rules

1252
00:45:54,800 --> 00:45:57,440
and if the port doesn't match those

1253
00:45:57,440 --> 00:45:58,160
rules

1254
00:45:58,160 --> 00:46:01,359
then it's going to be rejected right so

1255
00:46:01,359 --> 00:46:03,359
all this is based on four different

1256
00:46:03,359 --> 00:46:05,040
concepts which is the pod security

1257
00:46:05,040 --> 00:46:05,680
policy

1258
00:46:05,680 --> 00:46:08,319
itself which is a cover needs object

1259
00:46:08,319 --> 00:46:08,720
that

1260
00:46:08,720 --> 00:46:12,160
allows you to define the rules like

1261
00:46:12,160 --> 00:46:15,119
like you know i don't allow like uh

1262
00:46:15,119 --> 00:46:16,880
privileged containers on my on my

1263
00:46:16,880 --> 00:46:17,839
cluster right or

1264
00:46:17,839 --> 00:46:21,119
i don't allow uh pots running as root on

1265
00:46:21,119 --> 00:46:22,880
my cluster right

1266
00:46:22,880 --> 00:46:24,800
then we have the cluster role the

1267
00:46:24,800 --> 00:46:26,880
cluster role basically is a

1268
00:46:26,880 --> 00:46:30,000
concept in kubernetes that allows you

1269
00:46:30,000 --> 00:46:33,680
to group many different actions or verbs

1270
00:46:33,680 --> 00:46:36,960
to resources in this particular example

1271
00:46:36,960 --> 00:46:40,240
cluster role will tell

1272
00:46:40,240 --> 00:46:43,359
you can use which is the verb use

1273
00:46:43,359 --> 00:46:45,920
this spot security policy with this name

1274
00:46:45,920 --> 00:46:48,160
right now don't worry i have a diagram

1275
00:46:48,160 --> 00:46:48,880
to

1276
00:46:48,880 --> 00:46:51,280
show this like in a more graphical way

1277
00:46:51,280 --> 00:46:52,880
and then we have the cluster world

1278
00:46:52,880 --> 00:46:54,160
binding

1279
00:46:54,160 --> 00:46:57,440
which is a is going to bind an actual

1280
00:46:57,440 --> 00:46:59,280
cluster role with a resource that

1281
00:46:59,280 --> 00:47:02,319
resource can can be

1282
00:47:02,319 --> 00:47:05,359
a service account or a group or any

1283
00:47:05,359 --> 00:47:06,240
other

1284
00:47:06,240 --> 00:47:09,359
resource and the important thing is that

1285
00:47:09,359 --> 00:47:11,680
cluster roles and cluster role bindings

1286
00:47:11,680 --> 00:47:15,440
are not uh doesn't depend on

1287
00:47:15,440 --> 00:47:18,640
on a particular namespace so this this

1288
00:47:18,640 --> 00:47:20,640
will apply globally to the whole cluster

1289
00:47:20,640 --> 00:47:22,720
right to all the deployments

1290
00:47:22,720 --> 00:47:25,359
but then we have a problem because we if

1291
00:47:25,359 --> 00:47:26,640
we create a rule

1292
00:47:26,640 --> 00:47:29,760
like very strong rule then we can break

1293
00:47:29,760 --> 00:47:30,800
or cluster

1294
00:47:30,800 --> 00:47:33,440
because there is of course some some

1295
00:47:33,440 --> 00:47:34,800
deployment that

1296
00:47:34,800 --> 00:47:36,160
will require like more elevated

1297
00:47:36,160 --> 00:47:39,119
privilege like government owned services

1298
00:47:39,119 --> 00:47:39,599
right

1299
00:47:39,599 --> 00:47:41,920
like the cube controller or the core dns

1300
00:47:41,920 --> 00:47:42,880
that requires more

1301
00:47:42,880 --> 00:47:45,920
more privilege for that we have the

1302
00:47:45,920 --> 00:47:47,680
world binding which is

1303
00:47:47,680 --> 00:47:50,240
very similar very similar to the cluster

1304
00:47:50,240 --> 00:47:51,839
binding but it will affect only a

1305
00:47:51,839 --> 00:47:53,920
particular namespace

1306
00:47:53,920 --> 00:47:57,359
so let's say uh well here i

1307
00:47:57,359 --> 00:48:00,079
have some examples right whatever what i

1308
00:48:00,079 --> 00:48:01,599
already told you like what security

1309
00:48:01,599 --> 00:48:02,559
policies will

1310
00:48:02,559 --> 00:48:05,200
allow you to define rules and here in

1311
00:48:05,200 --> 00:48:07,280
this example i have a security policy

1312
00:48:07,280 --> 00:48:08,559
called restricted

1313
00:48:08,559 --> 00:48:12,079
that will uh tell you that privileges

1314
00:48:12,079 --> 00:48:14,000
has to be false whose network has to be

1315
00:48:14,000 --> 00:48:15,920
false unlock privileged validation

1316
00:48:15,920 --> 00:48:19,280
the press id namespace ipc all of that

1317
00:48:19,280 --> 00:48:20,800
has to be false

1318
00:48:20,800 --> 00:48:24,319
then cluster role will

1319
00:48:24,319 --> 00:48:26,960
attach to that port security policy via

1320
00:48:26,960 --> 00:48:28,000
the use verb

1321
00:48:28,000 --> 00:48:31,599
and finally i can i can do the cluster

1322
00:48:31,599 --> 00:48:33,119
role by binding

1323
00:48:33,119 --> 00:48:37,359
and put together the cluster role and

1324
00:48:37,359 --> 00:48:41,520
service accounts so this will

1325
00:48:41,520 --> 00:48:44,640
prevent any any high privilege container

1326
00:48:44,640 --> 00:48:48,559
to be deployed on my cluster

1327
00:48:48,559 --> 00:48:50,880
and this is one way to to protect right

1328
00:48:50,880 --> 00:48:52,559
my cluster from

1329
00:48:52,559 --> 00:48:54,800
us from somebody to to want to run like

1330
00:48:54,800 --> 00:48:56,079
malicious spots

1331
00:48:56,079 --> 00:48:59,040
so the diagram will look like this right

1332
00:48:59,040 --> 00:49:00,240
but security

1333
00:49:00,240 --> 00:49:03,359
policy at the bottom then attached

1334
00:49:03,359 --> 00:49:04,960
and put together with the via the

1335
00:49:04,960 --> 00:49:07,200
cluster role and the group

1336
00:49:07,200 --> 00:49:09,200
uh cluster role can have many different

1337
00:49:09,200 --> 00:49:11,280
verbs and many different resources but

1338
00:49:11,280 --> 00:49:13,119
right now for example i only have

1339
00:49:13,119 --> 00:49:15,280
restricted and then everything is put

1340
00:49:15,280 --> 00:49:17,599
together with the cluster role binding

1341
00:49:17,599 --> 00:49:20,720
so if i do that and then i want to

1342
00:49:20,720 --> 00:49:21,760
deploy

1343
00:49:21,760 --> 00:49:24,960
let's say nginx but in this example i

1344
00:49:24,960 --> 00:49:26,160
i'm

1345
00:49:26,160 --> 00:49:29,680
using the host network true whenever

1346
00:49:29,680 --> 00:49:33,599
the cube controllers try to to run this

1347
00:49:33,599 --> 00:49:35,280
i'm going to get an error right because

1348
00:49:35,280 --> 00:49:37,200
he's saying that this deployment could

1349
00:49:37,200 --> 00:49:37,920
not match

1350
00:49:37,920 --> 00:49:40,960
any policy and

1351
00:49:40,960 --> 00:49:43,040
he is even even giving me the reason

1352
00:49:43,040 --> 00:49:44,000
right like he's telling

1353
00:49:44,000 --> 00:49:47,440
hot network is not alone so i need to go

1354
00:49:47,440 --> 00:49:49,520
and change that

1355
00:49:49,520 --> 00:49:52,000
but yeah as i was saying if i drive like

1356
00:49:52,000 --> 00:49:54,160
very strong policies i may

1357
00:49:54,160 --> 00:49:56,079
break my own kubernetes cluster so this

1358
00:49:56,079 --> 00:49:58,240
is when i have to use the role binding

1359
00:49:58,240 --> 00:50:01,440
and here what i'm saying is i'm creating

1360
00:50:01,440 --> 00:50:03,920
a permissive policy

1361
00:50:03,920 --> 00:50:05,760
which has a load to anything to

1362
00:50:05,760 --> 00:50:07,520
everything in the cluster right

1363
00:50:07,520 --> 00:50:10,880
and then i attach this to the

1364
00:50:10,880 --> 00:50:12,800
demon set controller the replica

1365
00:50:12,800 --> 00:50:14,800
controller job controller and any other

1366
00:50:14,800 --> 00:50:16,559
service account that i want

1367
00:50:16,559 --> 00:50:19,280
but beyond this is very important under

1368
00:50:19,280 --> 00:50:21,040
the cube system namespace

1369
00:50:21,040 --> 00:50:23,680
so cube system namespace is the the

1370
00:50:23,680 --> 00:50:25,280
namespace used by all the kubernetes

1371
00:50:25,280 --> 00:50:26,319
services

1372
00:50:26,319 --> 00:50:28,559
because you know cover needs a

1373
00:50:28,559 --> 00:50:30,960
management tool run

1374
00:50:30,960 --> 00:50:33,680
over kubernetes themselves right so yeah

1375
00:50:33,680 --> 00:50:35,440
with this my cluster should be working

1376
00:50:35,440 --> 00:50:38,240
fine and everybody is going to be happy

1377
00:50:38,240 --> 00:50:41,599
so yeah we we we got to the end

1378
00:50:41,599 --> 00:50:44,880
so in summary right so

1379
00:50:44,880 --> 00:50:47,280
first thing is done uh of course in your

1380
00:50:47,280 --> 00:50:48,480
production cluster

1381
00:50:48,480 --> 00:50:51,040
is not a good idea to deploy images from

1382
00:50:51,040 --> 00:50:53,839
untrusted sources right because

1383
00:50:53,839 --> 00:50:56,160
there is a directive that says image

1384
00:50:56,160 --> 00:50:57,280
pull policy and

1385
00:50:57,280 --> 00:51:00,400
it can has like a value of always so if

1386
00:51:00,400 --> 00:51:01,839
a pod got deleted

1387
00:51:01,839 --> 00:51:04,800
it's going to try to delete even if the

1388
00:51:04,800 --> 00:51:05,839
if the

1389
00:51:05,839 --> 00:51:08,160
image already exists in the kubernetes

1390
00:51:08,160 --> 00:51:09,359
internal registry

1391
00:51:09,359 --> 00:51:12,000
it's going to try to download again the

1392
00:51:12,000 --> 00:51:13,920
image from the entrusted source

1393
00:51:13,920 --> 00:51:16,400
and somebody can put malware on that

1394
00:51:16,400 --> 00:51:18,000
image right

1395
00:51:18,000 --> 00:51:20,480
and and then compromise your cluster so

1396
00:51:20,480 --> 00:51:22,240
it's better to try to

1397
00:51:22,240 --> 00:51:25,599
use like a private registry for this uh

1398
00:51:25,599 --> 00:51:28,400
another thing is try to try not to store

1399
00:51:28,400 --> 00:51:29,520
sensitive data

1400
00:51:29,520 --> 00:51:31,520
in kubernetes secret because as i was

1401
00:51:31,520 --> 00:51:33,599
saying the data is not actually

1402
00:51:33,599 --> 00:51:35,599
secure it's not encrypted use base64

1403
00:51:35,599 --> 00:51:37,119
encoded so

1404
00:51:37,119 --> 00:51:39,680
instead of that it's better to use like

1405
00:51:39,680 --> 00:51:40,880
a tool

1406
00:51:40,880 --> 00:51:42,559
like the cubeseal the cubefield

1407
00:51:42,559 --> 00:51:44,640
controller which is going to

1408
00:51:44,640 --> 00:51:47,040
encrypt that information before being

1409
00:51:47,040 --> 00:51:47,920
encoded

1410
00:51:47,920 --> 00:51:50,640
and then it's going to be stored on a cd

1411
00:51:50,640 --> 00:51:52,000
or use an external key

1412
00:51:52,000 --> 00:51:54,319
kms right to manage secrets of course

1413
00:51:54,319 --> 00:51:55,280
this will depend

1414
00:51:55,280 --> 00:51:56,960
on on the application and all of that

1415
00:51:56,960 --> 00:51:58,960
because it's adding more complexity

1416
00:51:58,960 --> 00:52:00,079
right and

1417
00:52:00,079 --> 00:52:02,480
the whole purpose of all these things

1418
00:52:02,480 --> 00:52:04,640
distributed systems is that

1419
00:52:04,640 --> 00:52:06,480
you have many different replicas and if

1420
00:52:06,480 --> 00:52:07,920
some something is down then your

1421
00:52:07,920 --> 00:52:09,920
application will continue to operate

1422
00:52:09,920 --> 00:52:12,640
but what happens if the external kms is

1423
00:52:12,640 --> 00:52:14,240
is down right everything is going to be

1424
00:52:14,240 --> 00:52:16,000
down so you need to do like analysis

1425
00:52:16,000 --> 00:52:16,960
there

1426
00:52:16,960 --> 00:52:20,000
to have like a cosplay benefit

1427
00:52:20,000 --> 00:52:22,480
the next thing is protect your network

1428
00:52:22,480 --> 00:52:23,520
communications

1429
00:52:23,520 --> 00:52:25,920
choose a cni plugin that supports

1430
00:52:25,920 --> 00:52:27,599
networking policies

1431
00:52:27,599 --> 00:52:30,079
and do analysis like who really wants

1432
00:52:30,079 --> 00:52:32,319
who really needs to talk to who right

1433
00:52:32,319 --> 00:52:34,800
so create your rules there create your

1434
00:52:34,800 --> 00:52:36,400
networking policies and with this you

1435
00:52:36,400 --> 00:52:36,800
can

1436
00:52:36,800 --> 00:52:39,839
mitigate like if one

1437
00:52:39,839 --> 00:52:42,640
application got compromised uh it's

1438
00:52:42,640 --> 00:52:43,920
going to be

1439
00:52:43,920 --> 00:52:46,559
with this application does it doesn't do

1440
00:52:46,559 --> 00:52:48,319
don't really need to tell with

1441
00:52:48,319 --> 00:52:50,880
another very high critical application

1442
00:52:50,880 --> 00:52:51,920
so

1443
00:52:51,920 --> 00:52:55,200
you need to protect that right uh yeah

1444
00:52:55,200 --> 00:52:57,440
the fourth one is never use a cluster

1445
00:52:57,440 --> 00:53:00,240
admin as i was saying the cluster admin

1446
00:53:00,240 --> 00:53:02,720
is a cluster role that is created by the

1447
00:53:02,720 --> 00:53:04,960
following covenant and is very powerful

1448
00:53:04,960 --> 00:53:07,599
so if you put your hands on a service

1449
00:53:07,599 --> 00:53:09,599
account talking with this kind of role

1450
00:53:09,599 --> 00:53:12,400
it's basically a game over because you

1451
00:53:12,400 --> 00:53:13,040
can

1452
00:53:13,040 --> 00:53:15,040
talk to the api server and start getting

1453
00:53:15,040 --> 00:53:16,880
all the information and basically do

1454
00:53:16,880 --> 00:53:18,720
anything on the cluster so

1455
00:53:18,720 --> 00:53:21,760
never deploy applications using this uh

1456
00:53:21,760 --> 00:53:24,240
this wall the service account token and

1457
00:53:24,240 --> 00:53:25,680
you will be fine

1458
00:53:25,680 --> 00:53:27,599
and the last one which i think is the

1459
00:53:27,599 --> 00:53:30,160
most important for this talk is

1460
00:53:30,160 --> 00:53:31,680
in production you need to do the

1461
00:53:31,680 --> 00:53:33,920
analysis and define a strong

1462
00:53:33,920 --> 00:53:36,240
port security policies thinking about

1463
00:53:36,240 --> 00:53:37,440
the principle of

1464
00:53:37,440 --> 00:53:41,119
less privilege right with that you will

1465
00:53:41,119 --> 00:53:43,200
it's going to be harder for an attacker

1466
00:53:43,200 --> 00:53:44,240
to to

1467
00:53:44,240 --> 00:53:46,640
escalate privilege and compromise your

1468
00:53:46,640 --> 00:53:49,440
whole cluster

1469
00:53:49,760 --> 00:53:52,960
so yeah this is all the resources that i

1470
00:53:52,960 --> 00:53:55,680
used during this presentation so yeah

1471
00:53:55,680 --> 00:53:57,680
kubernete i i'm not like a super expert

1472
00:53:57,680 --> 00:53:59,359
on kubernetes this is something

1473
00:53:59,359 --> 00:54:01,040
that i've been using for the last two

1474
00:54:01,040 --> 00:54:02,400
years and i'm always

1475
00:54:02,400 --> 00:54:04,640
trying to learn so i put the resources i

1476
00:54:04,640 --> 00:54:06,400
use for this presentation here

1477
00:54:06,400 --> 00:54:08,480
and if you have like more that i can i

1478
00:54:08,480 --> 00:54:10,880
can use in the future i'll be happy to

1479
00:54:10,880 --> 00:54:12,720
to to read it and also put it here in

1480
00:54:12,720 --> 00:54:14,000
this list

1481
00:54:14,000 --> 00:54:16,160
and with that i think we're in the end

1482
00:54:16,160 --> 00:54:17,359
of the presentation

1483
00:54:17,359 --> 00:54:24,319
and thank you very much rod

1484
00:54:24,319 --> 00:54:26,319
thank you that was a an awesome

1485
00:54:26,319 --> 00:54:27,760
presentation

1486
00:54:27,760 --> 00:54:30,720
um so we can uh probably go over some

1487
00:54:30,720 --> 00:54:32,640
questions

1488
00:54:32,640 --> 00:54:35,680
so let's take a look at that

1489
00:54:35,680 --> 00:54:39,280
this is here is um can you tell us a

1490
00:54:39,280 --> 00:54:40,720
little bit actually one that

1491
00:54:40,720 --> 00:54:43,440
i actually over so can you tell us a

1492
00:54:43,440 --> 00:54:45,040
little bit what's going on with docker

1493
00:54:45,040 --> 00:54:46,160
and kubernetes

1494
00:54:46,160 --> 00:54:49,119
what's happening what's going on uh they

1495
00:54:49,119 --> 00:54:51,119
are deprecating basically i think it's

1496
00:54:51,119 --> 00:54:52,000
the docker ship

1497
00:54:52,000 --> 00:54:54,079
component they are deprecating that

1498
00:54:54,079 --> 00:54:56,000
dependency in favor of using use

1499
00:54:56,000 --> 00:54:57,040
container d

1500
00:54:57,040 --> 00:54:59,200
which is basically the the container

1501
00:54:59,200 --> 00:55:00,319
runtime

1502
00:55:00,319 --> 00:55:01,920
the official container runtime that

1503
00:55:01,920 --> 00:55:03,440
docker want to use

1504
00:55:03,440 --> 00:55:06,480
so i think they are going to deprecate

1505
00:55:06,480 --> 00:55:08,079
it in docker

1506
00:55:08,079 --> 00:55:12,799
one 1.21 or 1.20

1507
00:55:12,799 --> 00:55:14,559
is there a specific reason they're doing

1508
00:55:14,559 --> 00:55:16,480
that or

1509
00:55:16,480 --> 00:55:20,079
um i think i

1510
00:55:20,079 --> 00:55:22,079
i read this yesterday but i think i

1511
00:55:22,079 --> 00:55:23,680
forgot but it was saying like something

1512
00:55:23,680 --> 00:55:25,119
that

1513
00:55:25,119 --> 00:55:26,960
the article said the docker shim as the

1514
00:55:26,960 --> 00:55:28,799
name implies is like a temporary

1515
00:55:28,799 --> 00:55:29,760
solution

1516
00:55:29,760 --> 00:55:32,799
so this is why we are deprecating uh

1517
00:55:32,799 --> 00:55:34,559
so yeah they that's the whole reason but

1518
00:55:34,559 --> 00:55:36,480
that doesn't mean that your doctor

1519
00:55:36,480 --> 00:55:37,680
images

1520
00:55:37,680 --> 00:55:39,599
will stop working right because the

1521
00:55:39,599 --> 00:55:42,400
whole container thing is based on a

1522
00:55:42,400 --> 00:55:44,720
standard so as long as your docker

1523
00:55:44,720 --> 00:55:46,960
contain sorry your container runtime

1524
00:55:46,960 --> 00:55:49,520
follow that standard your images should

1525
00:55:49,520 --> 00:55:51,759
work

1526
00:55:51,920 --> 00:55:53,520
there's somebody here asking for the

1527
00:55:53,520 --> 00:55:57,119
last page for the references if you can

1528
00:55:57,119 --> 00:56:00,480
yes yes yes yeah this presentation i

1529
00:56:00,480 --> 00:56:01,599
think will be

1530
00:56:01,599 --> 00:56:03,599
i will share with you in the in the

1531
00:56:03,599 --> 00:56:05,839
slack channel so you great

1532
00:56:05,839 --> 00:56:08,160
excellent i'll post the link along with

1533
00:56:08,160 --> 00:56:09,760
the uh

1534
00:56:09,760 --> 00:56:12,960
with the video um

1535
00:56:12,960 --> 00:56:17,839
see we can find um

1536
00:56:18,720 --> 00:56:21,760
are there any other new hardware

1537
00:56:21,760 --> 00:56:26,400
features in intel or amd processors

1538
00:56:26,400 --> 00:56:29,839
such as secure enclaves being used by

1539
00:56:29,839 --> 00:56:32,160
kubernetes

1540
00:56:32,160 --> 00:56:34,400
hardware features i'm not sure i'm not

1541
00:56:34,400 --> 00:56:36,960
familiar with that

1542
00:56:36,960 --> 00:56:39,920
but i i yeah i really am not familiar

1543
00:56:39,920 --> 00:56:42,559
with hardware features

1544
00:56:42,559 --> 00:56:45,119
okay here's a good question uh in

1545
00:56:45,119 --> 00:56:46,640
regards to

1546
00:56:46,640 --> 00:56:48,880
vulnerability scanning for container

1547
00:56:48,880 --> 00:56:50,079
images

1548
00:56:50,079 --> 00:56:53,119
can you talk about the maturity for

1549
00:56:53,119 --> 00:56:56,559
uh current code uh scanning solutions

1550
00:56:56,559 --> 00:56:58,240
for detecting malicious code in the

1551
00:56:58,240 --> 00:56:59,920
image

1552
00:56:59,920 --> 00:57:02,880
uh yes there is many tools and i think

1553
00:57:02,880 --> 00:57:04,559
uh let me quickly

1554
00:57:04,559 --> 00:57:06,880
go to open this presentation there is

1555
00:57:06,880 --> 00:57:08,079
many tools

1556
00:57:08,079 --> 00:57:11,520
for scanning your your images and

1557
00:57:11,520 --> 00:57:15,520
also during runtime and during build

1558
00:57:15,520 --> 00:57:16,079
time

1559
00:57:16,079 --> 00:57:20,480
so let me show you a list here uh

1560
00:57:21,280 --> 00:57:23,599
container security tools yeah you can

1561
00:57:23,599 --> 00:57:24,640
use like

1562
00:57:24,640 --> 00:57:27,680
audi which basically like a checklist

1563
00:57:27,680 --> 00:57:30,720
so it will check for

1564
00:57:30,720 --> 00:57:33,680
uh you know like usually container

1565
00:57:33,680 --> 00:57:35,280
images

1566
00:57:35,280 --> 00:57:37,760
uh when you want to deploy to production

1567
00:57:37,760 --> 00:57:39,200
you want to deploy a

1568
00:57:39,200 --> 00:57:41,599
an image that is hard that has hardening

1569
00:57:41,599 --> 00:57:42,319
right

1570
00:57:42,319 --> 00:57:44,079
or a scratch image that doesn't allow

1571
00:57:44,079 --> 00:57:46,799
you to execute commands inside

1572
00:57:46,799 --> 00:57:49,599
so there is a very many tools like

1573
00:57:49,599 --> 00:57:51,760
docker bench how they did act

1574
00:57:51,760 --> 00:57:54,000
that will check for that and you can

1575
00:57:54,000 --> 00:57:56,000
implement all of these in your

1576
00:57:56,000 --> 00:57:59,680
pipelines so yeah there is many options

1577
00:57:59,680 --> 00:58:00,880
out there

1578
00:58:00,880 --> 00:58:02,799
you can use uh this is like a more

1579
00:58:02,799 --> 00:58:04,559
offensive security tool which is

1580
00:58:04,559 --> 00:58:09,520
docker scan the digital lens is an image

1581
00:58:09,520 --> 00:58:11,680
a tool that will take your image and

1582
00:58:11,680 --> 00:58:13,599
will basically remove everything that is

1583
00:58:13,599 --> 00:58:15,839
not needed so that way your image

1584
00:58:15,839 --> 00:58:19,200
will have many available tools inside

1585
00:58:19,200 --> 00:58:21,040
in case somebody compromised that

1586
00:58:21,040 --> 00:58:22,799
content the container running that image

1587
00:58:22,799 --> 00:58:24,079
right

1588
00:58:24,079 --> 00:58:26,799
but there is many different options so

1589
00:58:26,799 --> 00:58:27,680
yeah this strollers

1590
00:58:27,680 --> 00:58:29,760
is maintained by google so is a good

1591
00:58:29,760 --> 00:58:31,280
tool

1592
00:58:31,280 --> 00:58:36,079
and okay yeah

1593
00:58:36,079 --> 00:58:38,160
that's all that i have for you okay

1594
00:58:38,160 --> 00:58:39,119
here's another

1595
00:58:39,119 --> 00:58:42,799
uh question can service mesh

1596
00:58:42,799 --> 00:58:45,440
add security uh measures to uh

1597
00:58:45,440 --> 00:58:47,359
kubernetes

1598
00:58:47,359 --> 00:58:51,280
uh yes like i was mentioning istio

1599
00:58:51,280 --> 00:58:53,839
so i was playing with these two like a

1600
00:58:53,839 --> 00:58:55,040
couple months ago

1601
00:58:55,040 --> 00:58:58,160
and istio allows you to define their own

1602
00:58:58,160 --> 00:59:01,599
crds here this is this this concept of

1603
00:59:01,599 --> 00:59:03,200
kubernetes for you to create like custom

1604
00:59:03,200 --> 00:59:04,960
resource definitions

1605
00:59:04,960 --> 00:59:07,920
and the same way as network policies

1606
00:59:07,920 --> 00:59:08,640
allow you to

1607
00:59:08,640 --> 00:59:11,520
to tell who can tell with who also is

1608
00:59:11,520 --> 00:59:12,160
you

1609
00:59:12,160 --> 00:59:15,760
allow you to do that and istio will also

1610
00:59:15,760 --> 00:59:20,720
go beyond that will deploy like a

1611
00:59:20,720 --> 00:59:23,839
mtls like encryption between between

1612
00:59:23,839 --> 00:59:25,680
between ports because remember by

1613
00:59:25,680 --> 00:59:28,799
default kubernetes doesn't add any

1614
00:59:28,799 --> 00:59:30,480
communication security in terms of

1615
00:59:30,480 --> 00:59:32,079
encryption so all the all the

1616
00:59:32,079 --> 00:59:33,920
traffic inside the cluster is going to

1617
00:59:33,920 --> 00:59:36,000
to be plain text but if you deploy your

1618
00:59:36,000 --> 00:59:37,520
application with istio

1619
00:59:37,520 --> 00:59:40,319
istio will automatically add sidecars

1620
00:59:40,319 --> 00:59:41,680
proxies

1621
00:59:41,680 --> 00:59:45,119
so each proxy will talk to

1622
00:59:45,119 --> 00:59:48,559
to like the pods will have their own

1623
00:59:48,559 --> 00:59:50,720
proxy and the proxies will talk to each

1624
00:59:50,720 --> 00:59:51,520
other via

1625
00:59:51,520 --> 00:59:54,799
an encrypted channel and also

1626
00:59:54,799 --> 00:59:58,160
you can have metrics there you can log

1627
00:59:58,160 --> 01:00:00,559
hotel with who you can see all of this

1628
01:00:00,559 --> 01:00:02,160
in a nice dashboard

1629
01:00:02,160 --> 01:00:05,119
and you can define rules like uh same

1630
01:00:05,119 --> 01:00:07,040
way as networking policies like uh this

1631
01:00:07,040 --> 01:00:08,400
name space cannot talk with this

1632
01:00:08,400 --> 01:00:09,599
namespace or

1633
01:00:09,599 --> 01:00:11,520
only the application only the pod inside

1634
01:00:11,520 --> 01:00:13,280
need this link space can talk to the

1635
01:00:13,280 --> 01:00:14,319
outside world

1636
01:00:14,319 --> 01:00:16,960
stuff like that so yeah i think istio is

1637
01:00:16,960 --> 01:00:19,920
a very mature tool

1638
01:00:19,920 --> 01:00:22,079
here's a here's the i guess a question

1639
01:00:22,079 --> 01:00:23,680
that goes with it

1640
01:00:23,680 --> 01:00:26,160
can you go over the sidecar injection

1641
01:00:26,160 --> 01:00:27,599
again please

1642
01:00:27,599 --> 01:00:30,160
ah yes

1643
01:00:31,839 --> 01:00:34,558
yeah this one

1644
01:00:39,760 --> 01:00:41,440
yeah this is the sidecar injection you

1645
01:00:41,440 --> 01:00:43,440
want me to explain a little bit

1646
01:00:43,440 --> 01:00:47,040
yeah i think that's what it is okay so

1647
01:00:47,040 --> 01:00:50,720
yeah like when you deploy applications

1648
01:00:50,720 --> 01:00:52,400
in kubernetes

1649
01:00:52,400 --> 01:00:55,040
uh kubernetes will use this concept of

1650
01:00:55,040 --> 01:00:55,680
pot

1651
01:00:55,680 --> 01:00:58,559
what is use a group of containers that

1652
01:00:58,559 --> 01:00:59,440
live together

1653
01:00:59,440 --> 01:01:02,160
and share networking namespace and in

1654
01:01:02,160 --> 01:01:03,040
some cases

1655
01:01:03,040 --> 01:01:06,319
they also share file system namespace so

1656
01:01:06,319 --> 01:01:09,359
attackers tend to do these

1657
01:01:09,359 --> 01:01:13,040
uh to you know deceive

1658
01:01:13,040 --> 01:01:16,240
like uh if i have a list if you do if i

1659
01:01:16,240 --> 01:01:17,920
do keep city i'll get pots

1660
01:01:17,920 --> 01:01:21,119
and i get 10 pots

1661
01:01:21,119 --> 01:01:22,799
then i can say oh yeah my my

1662
01:01:22,799 --> 01:01:24,880
applications are running fine right but

1663
01:01:24,880 --> 01:01:26,880
those spots inside can have more

1664
01:01:26,880 --> 01:01:28,799
containers

1665
01:01:28,799 --> 01:01:31,359
can be a malicious container inside and

1666
01:01:31,359 --> 01:01:33,520
if i don't go there and look there

1667
01:01:33,520 --> 01:01:36,559
maybe this side this this container that

1668
01:01:36,559 --> 01:01:36,880
say

1669
01:01:36,880 --> 01:01:40,240
sidecar can be like uh

1670
01:01:40,240 --> 01:01:41,839
because they share the network namespace

1671
01:01:41,839 --> 01:01:43,520
can be a sniffing the traffic

1672
01:01:43,520 --> 01:01:46,960
receiving but by this port right or

1673
01:01:46,960 --> 01:01:50,319
can be reading the files there

1674
01:01:50,319 --> 01:01:53,440
there is a pods can be attached you can

1675
01:01:53,440 --> 01:01:54,960
attach volumes to pots

1676
01:01:54,960 --> 01:01:57,119
so the side can the sidecar container

1677
01:01:57,119 --> 01:01:59,440
can mount the same volumes and therefore

1678
01:01:59,440 --> 01:02:01,039
read the same credential the same

1679
01:02:01,039 --> 01:02:02,240
information

1680
01:02:02,240 --> 01:02:05,359
so this is a technique that

1681
01:02:05,359 --> 01:02:07,680
attackers are doing more and more right

1682
01:02:07,680 --> 01:02:10,720
are you using more and more

1683
01:02:10,880 --> 01:02:13,680
great um

1684
01:02:14,000 --> 01:02:17,200
here's a comment check falco

1685
01:02:17,200 --> 01:02:21,119
for kubernetes incident response

1686
01:02:21,119 --> 01:02:24,400
uh here's another question um

1687
01:02:24,400 --> 01:02:27,280
any best practices to achieve visibility

1688
01:02:27,280 --> 01:02:28,640
for security risk

1689
01:02:28,640 --> 01:02:32,400
or exploits giving that pots and

1690
01:02:32,400 --> 01:02:35,440
pots containers are short uh

1691
01:02:35,440 --> 01:02:38,720
short-lived and it is hard to track them

1692
01:02:38,720 --> 01:02:42,480
from logs uh since we have hundreds

1693
01:02:42,480 --> 01:02:44,160
i guess this is a person that's exposed

1694
01:02:44,160 --> 01:02:46,319
to such a big environment

1695
01:02:46,319 --> 01:02:49,280
uh hundreds of containers and they

1696
01:02:49,280 --> 01:02:50,000
generate

1697
01:02:50,000 --> 01:02:53,119
a lot of events uh yes

1698
01:02:53,119 --> 01:02:55,039
usually when you when you hear

1699
01:02:55,039 --> 01:02:56,160
kubernetes

1700
01:02:56,160 --> 01:02:59,119
you will hear let me quickly look my

1701
01:02:59,119 --> 01:03:03,839
laptop is going to die

1702
01:03:06,960 --> 01:03:12,799
i think it's only one second

1703
01:03:13,440 --> 01:03:16,960
so yeah when you hear about kubernetes

1704
01:03:16,960 --> 01:03:19,200
you will hear about also prometheus

1705
01:03:19,200 --> 01:03:21,359
which is a serbia a very popular service

1706
01:03:21,359 --> 01:03:22,319
that

1707
01:03:22,319 --> 01:03:25,520
will uh collect logs from

1708
01:03:25,520 --> 01:03:27,599
from metrics exposure to you in your

1709
01:03:27,599 --> 01:03:28,880
services

1710
01:03:28,880 --> 01:03:31,920
so yeah like

1711
01:03:31,920 --> 01:03:34,400
there is like i think one one good

1712
01:03:34,400 --> 01:03:35,680
practice is to

1713
01:03:35,680 --> 01:03:37,839
store logs outside of the cluster so

1714
01:03:37,839 --> 01:03:39,520
that way if somebody

1715
01:03:39,520 --> 01:03:43,200
has access to the cluster like will like

1716
01:03:43,200 --> 01:03:45,839
he can he can he can delete all the logs

1717
01:03:45,839 --> 01:03:46,880
of the cluster but

1718
01:03:46,880 --> 01:03:48,720
not the logs that are outside of in

1719
01:03:48,720 --> 01:03:50,000
another system right

1720
01:03:50,000 --> 01:03:52,720
so you can use prometheus to to track

1721
01:03:52,720 --> 01:03:55,359
all of that and i also i think also

1722
01:03:55,359 --> 01:03:58,079
a splunk right as long do login

1723
01:03:58,079 --> 01:03:59,039
monitoring

1724
01:03:59,039 --> 01:04:01,760
and then and you can do analysis on that

1725
01:04:01,760 --> 01:04:03,520
so

1726
01:04:03,520 --> 01:04:06,000
there's a splunk there's actually a

1727
01:04:06,000 --> 01:04:06,720
splunk

1728
01:04:06,720 --> 01:04:10,559
uh utility that is uh you had to sort of

1729
01:04:10,559 --> 01:04:11,440
install it

1730
01:04:11,440 --> 01:04:14,400
in the containers but yeah you it gets

1731
01:04:14,400 --> 01:04:14,960
it gets

1732
01:04:14,960 --> 01:04:18,640
very deep um visibility into

1733
01:04:18,640 --> 01:04:21,440
containers but you still have to there's

1734
01:04:21,440 --> 01:04:22,240
a work

1735
01:04:22,240 --> 01:04:24,240
right you have you at least you get the

1736
01:04:24,240 --> 01:04:26,319
lofts but you still you still have to do

1737
01:04:26,319 --> 01:04:28,319
some work on their analysis

1738
01:04:28,319 --> 01:04:32,000
and the uh um depends on what you're

1739
01:04:32,000 --> 01:04:35,359
actually trying to target correct yeah

1740
01:04:35,359 --> 01:04:37,280
and yeah i think yeah a lot of solutions

1741
01:04:37,280 --> 01:04:38,240
like this like

1742
01:04:38,240 --> 01:04:40,400
even istio is he still has many

1743
01:04:40,400 --> 01:04:42,720
different services

1744
01:04:42,720 --> 01:04:44,880
they're just seeing a black screen sorry

1745
01:04:44,880 --> 01:04:46,319
i thought

1746
01:04:46,319 --> 01:04:49,359
yeah okay

1747
01:04:49,359 --> 01:04:55,839
let me share my screen again

1748
01:05:09,359 --> 01:05:12,240
can you see it now or yeah yeah i can

1749
01:05:12,240 --> 01:05:12,720
okay

1750
01:05:12,720 --> 01:05:15,920
oh good so yeah like

1751
01:05:15,920 --> 01:05:19,119
yeah right now i can think of prometheus

1752
01:05:19,119 --> 01:05:21,920
splunk istio istio has many different

1753
01:05:21,920 --> 01:05:23,039
services

1754
01:05:23,039 --> 01:05:26,640
uh networking policies or networking

1755
01:05:26,640 --> 01:05:28,480
monitoring is only one thing that they

1756
01:05:28,480 --> 01:05:29,839
offer but they also

1757
01:05:29,839 --> 01:05:33,520
has like these dashboards that show you

1758
01:05:33,520 --> 01:05:36,000
what is going on between in terms of

1759
01:05:36,000 --> 01:05:38,000
communication between pods

1760
01:05:38,000 --> 01:05:41,680
uh so yeah there is uh you can use a

1761
01:05:41,680 --> 01:05:42,880
prometheus or

1762
01:05:42,880 --> 01:05:46,000
splunk or istio i can go and

1763
01:05:46,000 --> 01:05:47,839
investigate a little bit more on that

1764
01:05:47,839 --> 01:05:49,200
and then post it on the slack channel

1765
01:05:49,200 --> 01:05:50,400
but

1766
01:05:50,400 --> 01:05:52,640
yeah i think parameters is a thing that

1767
01:05:52,640 --> 01:05:54,960
is in terms of observability the thing

1768
01:05:54,960 --> 01:05:55,520
that is

1769
01:05:55,520 --> 01:05:58,720
most popular uh

1770
01:05:58,720 --> 01:06:01,680
actually uh falco runs as a demon set in

1771
01:06:01,680 --> 01:06:02,559
the node

1772
01:06:02,559 --> 01:06:05,119
so the in that way they monitor the uh

1773
01:06:05,119 --> 01:06:06,160
parts running in

1774
01:06:06,160 --> 01:06:07,839
and they have a lot of security rules to

1775
01:06:07,839 --> 01:06:10,079
identify things like say the container

1776
01:06:10,079 --> 01:06:12,079
compromise or privilege escalations

1777
01:06:12,079 --> 01:06:14,880
that's a good tool and um commercially

1778
01:06:14,880 --> 01:06:16,640
prisma cloud also has similar features

1779
01:06:16,640 --> 01:06:18,799
they also run as a

1780
01:06:18,799 --> 01:06:22,319
demonstrator awesome

1781
01:06:22,319 --> 01:06:24,079
i didn't know the things thanks for

1782
01:06:24,079 --> 01:06:25,680
sharing so

1783
01:06:25,680 --> 01:06:28,480
yeah it makes sense yeah this tool so

1784
01:06:28,480 --> 01:06:29,119
yeah

1785
01:06:29,119 --> 01:06:31,440
will run in the in the physical node

1786
01:06:31,440 --> 01:06:32,720
then right and will

1787
01:06:32,720 --> 01:06:34,960
monitor at the container level i think

1788
01:06:34,960 --> 01:06:36,079
with the

1789
01:06:36,079 --> 01:06:40,400
at the yeah the docker demo probably

1790
01:06:40,400 --> 01:06:43,520
there's somebody making a comment here

1791
01:06:43,520 --> 01:06:47,599
i saw some folks replace prometheus

1792
01:06:47,599 --> 01:06:50,720
with dynatrace

1793
01:06:51,359 --> 01:06:53,680
yeah i think yeah dynatrace is also a

1794
01:06:53,680 --> 01:06:55,839
metrics monitoring tool

1795
01:06:55,839 --> 01:06:58,960
i haven't used it myself but i i think

1796
01:06:58,960 --> 01:06:59,359
it's

1797
01:06:59,359 --> 01:07:02,640
similar to prometheus

1798
01:07:02,960 --> 01:07:05,520
apm

1799
01:07:09,440 --> 01:07:14,400
uh any other questions

1800
01:07:14,400 --> 01:07:16,079
this was an incredible uh presentation

1801
01:07:16,079 --> 01:07:17,440
like always do that you always

1802
01:07:17,440 --> 01:07:20,319
knock it out the park

1803
01:07:22,319 --> 01:07:25,760
i think i i lost audio once yeah we can

1804
01:07:25,760 --> 01:07:27,039
still hear you but you sound

1805
01:07:27,039 --> 01:07:29,839
far

1806
01:07:32,720 --> 01:07:35,039
can you hear me now yeah it's a little

1807
01:07:35,039 --> 01:07:36,240
uh yeah

1808
01:07:36,240 --> 01:07:39,440
my my airport's dying but i shot this

1809
01:07:39,440 --> 01:07:42,559
yeah that happened yeah

1810
01:07:42,559 --> 01:07:45,200
uh yeah i i don't know if somebody asked

1811
01:07:45,200 --> 01:07:47,599
any more questions

1812
01:07:47,599 --> 01:07:50,960
uh uh data dope somebody is actually

1813
01:07:50,960 --> 01:07:52,079
mentioning

1814
01:07:52,079 --> 01:07:54,319
yeah yeah i used to work for a company

1815
01:07:54,319 --> 01:07:55,680
and we use that as

1816
01:07:55,680 --> 01:07:58,960
theta dot again a a lot sorry we use

1817
01:07:58,960 --> 01:08:00,000
data dock a lot

1818
01:08:00,000 --> 01:08:01,920
and there was also another tool called

1819
01:08:01,920 --> 01:08:05,760
sumo logic tumor logic also

1820
01:08:05,760 --> 01:08:07,680
they have like a sdk and you as a

1821
01:08:07,680 --> 01:08:09,039
developer can

1822
01:08:09,039 --> 01:08:11,599
can integrate that sdk in your in your

1823
01:08:11,599 --> 01:08:14,319
application and send logs directly

1824
01:08:14,319 --> 01:08:16,640
and allow you to do like filtering and

1825
01:08:16,640 --> 01:08:19,120
analysis

1826
01:08:19,120 --> 01:08:21,520
so yeah there is two more data though

1827
01:08:21,520 --> 01:08:25,839
and sumo logic

1828
01:08:26,560 --> 01:08:29,679
that's great so um if

1829
01:08:29,679 --> 01:08:33,120
there are no other questions this was

1830
01:08:33,120 --> 01:08:33,679
again

1831
01:08:33,679 --> 01:08:37,439
an amazing presentation

1832
01:08:37,439 --> 01:08:40,560
i'm actually putting a new invitation in

1833
01:08:40,560 --> 01:08:41,600
the

1834
01:08:41,600 --> 01:08:46,399
um chat for everybody that wants to join

1835
01:08:46,399 --> 01:08:49,759
the um discord

1836
01:08:49,759 --> 01:08:52,799
remember we uh keep in touch

1837
01:08:52,799 --> 01:08:56,238
basically daily uh 24 7

1838
01:08:56,238 --> 01:08:58,880
by our discord or slack there's been

1839
01:08:58,880 --> 01:09:00,158
some rumors

1840
01:09:00,158 --> 01:09:03,359
of uh the purchase of

1841
01:09:03,359 --> 01:09:06,640
um discord by microsoft

1842
01:09:06,640 --> 01:09:10,238
uh so uh we use we still have both of

1843
01:09:10,238 --> 01:09:10,719
them

1844
01:09:10,719 --> 01:09:12,319
and we're going to be monitoring and see

1845
01:09:12,319 --> 01:09:14,238
what happens uh

1846
01:09:14,238 --> 01:09:17,600
but please join us uh i believe we have

1847
01:09:17,600 --> 01:09:18,479
a

1848
01:09:18,479 --> 01:09:21,679
a very interesting and exciting talk

1849
01:09:21,679 --> 01:09:23,120
our next meeting which is hacking

1850
01:09:23,120 --> 01:09:25,600
satellites that will be the first one

1851
01:09:25,600 --> 01:09:29,040
uh in pacific hackers and uh i'm really

1852
01:09:29,040 --> 01:09:30,080
looking forward to seeing this

1853
01:09:30,080 --> 01:09:31,040
presentation

1854
01:09:31,040 --> 01:09:34,080
remember join the vegas 2021 people are

1855
01:09:34,080 --> 01:09:35,279
starting to

1856
01:09:35,279 --> 01:09:38,640
uh organize and

1857
01:09:38,640 --> 01:09:42,560
prepare uh for this event

1858
01:09:42,560 --> 01:09:45,120
in las vegas and many of us will

1859
01:09:45,120 --> 01:09:46,158
probably be there

1860
01:09:46,158 --> 01:09:49,439
and we'll see what we can do older than

1861
01:09:49,439 --> 01:09:50,238
that

1862
01:09:50,238 --> 01:09:56,159
i'll thank you very much guys and i

