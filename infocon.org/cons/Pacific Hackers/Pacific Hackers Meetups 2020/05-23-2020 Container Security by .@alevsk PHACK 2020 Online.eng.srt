1
00:00:05,920 --> 00:00:08,160
all right everybody uh welcome

2
00:00:08,160 --> 00:00:10,559
uh to another meeting online meetup of

3
00:00:10,559 --> 00:00:12,400
pacific hackers

4
00:00:12,400 --> 00:00:15,920
is a continuation of today's percent 27

5
00:00:15,920 --> 00:00:17,119
meetings we have two meetings

6
00:00:17,119 --> 00:00:19,760
two presentations already uh on the east

7
00:00:19,760 --> 00:00:20,240
coast

8
00:00:20,240 --> 00:00:23,359
for uh hack miami then right now we're

9
00:00:23,359 --> 00:00:25,119
going to have two presentations

10
00:00:25,119 --> 00:00:28,640
one with with allen aleps

11
00:00:28,640 --> 00:00:31,599
about content security and myself on the

12
00:00:31,599 --> 00:00:32,800
second hour about

13
00:00:32,800 --> 00:00:36,480
attacking and defending drones um

14
00:00:36,480 --> 00:00:40,079
before we get in um

15
00:00:40,079 --> 00:00:42,800
let's do a little housework first the

16
00:00:42,800 --> 00:00:44,719
meetings will continue until it goes

17
00:00:44,719 --> 00:00:45,039
stay

18
00:00:45,039 --> 00:00:48,079
until it's safe to go back um right now

19
00:00:48,079 --> 00:00:51,600
um my reference which is florida

20
00:00:51,600 --> 00:00:54,800
uh as of monday most of the stuff

21
00:00:54,800 --> 00:00:58,559
was opening as of next week

22
00:00:58,559 --> 00:01:01,680
nightclubs gyms and

23
00:01:01,680 --> 00:01:05,438
uh even martial arts style type of

24
00:01:05,438 --> 00:01:08,479
businesses will be open so

25
00:01:08,479 --> 00:01:11,520
down here they're looking at around

26
00:01:11,520 --> 00:01:14,960
august for return to in-person meetings

27
00:01:14,960 --> 00:01:16,799
i know california is a little

28
00:01:16,799 --> 00:01:19,920
uh different we are looking at

29
00:01:19,920 --> 00:01:21,600
the california situation i know that

30
00:01:21,600 --> 00:01:23,439
santa clara just

31
00:01:23,439 --> 00:01:26,720
relaxed their restrictions

32
00:01:26,720 --> 00:01:29,280
and so uh we will be paying attention to

33
00:01:29,280 --> 00:01:31,040
it i'm in constant contact with

34
00:01:31,040 --> 00:01:33,520
marco mark was also monitoring the

35
00:01:33,520 --> 00:01:34,799
situation and

36
00:01:34,799 --> 00:01:37,280
when it's uh it's safe to go back we

37
00:01:37,280 --> 00:01:38,479
will

38
00:01:38,479 --> 00:01:41,680
announce um basically uh to our in

39
00:01:41,680 --> 00:01:42,960
person's meetings uh

40
00:01:42,960 --> 00:01:45,920
i would say that conservatively speaking

41
00:01:45,920 --> 00:01:47,920
uh we're probably looking at august

42
00:01:47,920 --> 00:01:50,479
that's that's what i think the the the

43
00:01:50,479 --> 00:01:51,680
provided that

44
00:01:51,680 --> 00:01:53,920
that you guys will know because in

45
00:01:53,920 --> 00:01:54,960
california you're

46
00:01:54,960 --> 00:01:58,000
you're a little uh behind here the

47
00:01:58,000 --> 00:02:00,479
head in florida so if people are gonna

48
00:02:00,479 --> 00:02:01,520
start

49
00:02:01,520 --> 00:02:04,799
dropping death dead left and right

50
00:02:04,799 --> 00:02:07,119
it will happen here first so so

51
00:02:07,119 --> 00:02:08,639
hopefully that would not be the case

52
00:02:08,639 --> 00:02:11,520
but we we're certainly looking at all

53
00:02:11,520 --> 00:02:12,000
those

54
00:02:12,000 --> 00:02:15,840
for the uh um for the return to uh

55
00:02:15,840 --> 00:02:17,440
in person meetings we'll see how that

56
00:02:17,440 --> 00:02:19,520
goes we may do some hybrids where

57
00:02:19,520 --> 00:02:20,959
there's some people

58
00:02:20,959 --> 00:02:23,280
in person and then some people uh online

59
00:02:23,280 --> 00:02:24,640
we we still have to see

60
00:02:24,640 --> 00:02:26,800
with the the situation with the airlines

61
00:02:26,800 --> 00:02:29,440
is also very confusing at this point

62
00:02:29,440 --> 00:02:32,720
um so it's it's uh again

63
00:02:32,720 --> 00:02:34,400
it's a very confusing situation and

64
00:02:34,400 --> 00:02:36,000
every and every in every area

65
00:02:36,000 --> 00:02:37,840
even the tdc doesn't seem to have a

66
00:02:37,840 --> 00:02:39,280
consistent message

67
00:02:39,280 --> 00:02:42,160
that's why i invite you to join slack

68
00:02:42,160 --> 00:02:42,640
and

69
00:02:42,640 --> 00:02:44,800
we have a channel a channel is called

70
00:02:44,800 --> 00:02:46,400
current disaster

71
00:02:46,400 --> 00:02:48,800
and that channel we we have been very

72
00:02:48,800 --> 00:02:49,440
accurate

73
00:02:49,440 --> 00:02:51,920
about things that had happened uh and

74
00:02:51,920 --> 00:02:52,480
now which

75
00:02:52,480 --> 00:02:55,760
we sort of made our own uh mindset of

76
00:02:55,760 --> 00:02:59,840
how to deal with this um so please

77
00:02:59,840 --> 00:03:03,120
in order to to keep connected it's

78
00:03:03,120 --> 00:03:04,000
important that you

79
00:03:04,000 --> 00:03:07,040
join the slack and participate um

80
00:03:07,040 --> 00:03:10,400
we have now um a new

81
00:03:10,400 --> 00:03:14,080
uh uh i guess mean of communicating we

82
00:03:14,080 --> 00:03:14,800
are testing

83
00:03:14,800 --> 00:03:18,319
a discord person 27 channel so

84
00:03:18,319 --> 00:03:21,519
uh we're gonna run discord in parallel

85
00:03:21,519 --> 00:03:24,799
and when the members feel comfortable

86
00:03:24,799 --> 00:03:25,519
then

87
00:03:25,519 --> 00:03:28,159
we might do the switch we don't know yet

88
00:03:28,159 --> 00:03:28,640
but

89
00:03:28,640 --> 00:03:31,040
i want to give enough time for everybody

90
00:03:31,040 --> 00:03:32,720
to feel comfortable and say okay i'm

91
00:03:32,720 --> 00:03:33,680
ready to

92
00:03:33,680 --> 00:03:36,560
to go to discord we are out of key base

93
00:03:36,560 --> 00:03:38,319
we used to have a key base backup what

94
00:03:38,319 --> 00:03:39,840
we got out of it

95
00:03:39,840 --> 00:03:42,319
so we're testing discord if you go to

96
00:03:42,319 --> 00:03:44,480
the slack channels right now you will

97
00:03:44,480 --> 00:03:45,200
find

98
00:03:45,200 --> 00:03:47,360
the invites everybody seems to be the

99
00:03:47,360 --> 00:03:49,440
hacker community seems to be embracing

100
00:03:49,440 --> 00:03:50,239
discord

101
00:03:50,239 --> 00:03:52,560
if you guys attended the red team

102
00:03:52,560 --> 00:03:53,519
village

103
00:03:53,519 --> 00:03:55,599
summit uh last week it was pretty

104
00:03:55,599 --> 00:03:56,640
amazing and

105
00:03:56,640 --> 00:04:00,159
it was a um i would say

106
00:04:00,159 --> 00:04:03,599
a sample of how defcon virtual death

107
00:04:03,599 --> 00:04:04,879
phone would be as

108
00:04:04,879 --> 00:04:06,640
we all know def con they would not be

109
00:04:06,640 --> 00:04:08,000
deficient in person and

110
00:04:08,000 --> 00:04:10,480
that sucks but there is um there are

111
00:04:10,480 --> 00:04:11,599
some efforts

112
00:04:11,599 --> 00:04:13,599
to do some villages specifically the red

113
00:04:13,599 --> 00:04:14,640
team village

114
00:04:14,640 --> 00:04:18,160
uh i i wrote the redding village.com or

115
00:04:18,160 --> 00:04:19,519
the io

116
00:04:19,519 --> 00:04:22,479
um address so you guys can go and check

117
00:04:22,479 --> 00:04:23,120
it out

118
00:04:23,120 --> 00:04:25,600
uh they did an amazing job and they're

119
00:04:25,600 --> 00:04:28,320
preparing a lot of cool stuff for for

120
00:04:28,320 --> 00:04:32,560
uh during the death on time ctfs um

121
00:04:32,560 --> 00:04:34,639
kinds of training so you guys want to

122
00:04:34,639 --> 00:04:36,479
check out you can still volunteer as

123
00:04:36,479 --> 00:04:37,280
well

124
00:04:37,280 --> 00:04:39,440
so please check that out there's also a

125
00:04:39,440 --> 00:04:40,479
uh

126
00:04:40,479 --> 00:04:43,040
some information about the blue team as

127
00:04:43,040 --> 00:04:44,400
soon as i get the blue team

128
00:04:44,400 --> 00:04:46,160
uh village information i will post it

129
00:04:46,160 --> 00:04:48,720
any village that i get information from

130
00:04:48,720 --> 00:04:50,880
i would definitely post here because we

131
00:04:50,880 --> 00:04:51,840
do want to keep

132
00:04:51,840 --> 00:04:55,360
um the community alive even though

133
00:04:55,360 --> 00:04:56,400
you know we're not going to be able to

134
00:04:56,400 --> 00:04:58,400
meet this this year in vegas which sucks

135
00:04:58,400 --> 00:04:59,120
there is

136
00:04:59,120 --> 00:05:01,840
by the way there's a chatter of an

137
00:05:01,840 --> 00:05:02,880
in-person con

138
00:05:02,880 --> 00:05:04,960
on official i don't know there's a group

139
00:05:04,960 --> 00:05:06,400
of people um

140
00:05:06,400 --> 00:05:08,560
and uh i keep hearing about it i don't

141
00:05:08,560 --> 00:05:09,440
know

142
00:05:09,440 --> 00:05:11,039
if that's gonna happen or not but

143
00:05:11,039 --> 00:05:13,199
definitely i know that there's a group

144
00:05:13,199 --> 00:05:14,000
of people

145
00:05:14,000 --> 00:05:15,919
that are gonna go there and they're

146
00:05:15,919 --> 00:05:18,080
gonna do def uh on official i guess

147
00:05:18,080 --> 00:05:20,800
uh because the official ones cancel so

148
00:05:20,800 --> 00:05:23,039
so we'll see if that

149
00:05:23,039 --> 00:05:26,160
happens i'm not going uh uh and uh

150
00:05:26,160 --> 00:05:28,080
most of us don't believe that is is

151
00:05:28,080 --> 00:05:29,600
still safe enough to

152
00:05:29,600 --> 00:05:32,320
we're clear enough to know what to do uh

153
00:05:32,320 --> 00:05:33,039
that's that's

154
00:05:33,039 --> 00:05:36,080
possibly the uh the biggest problem uh

155
00:05:36,080 --> 00:05:38,479
the the data is it's not clear and then

156
00:05:38,479 --> 00:05:39,199
we don't

157
00:05:39,199 --> 00:05:41,199
we don't have enough information to make

158
00:05:41,199 --> 00:05:43,759
a a rational decision so

159
00:05:43,759 --> 00:05:46,880
so we will still be um looking at uh

160
00:05:46,880 --> 00:05:49,039
the information's coming in and and make

161
00:05:49,039 --> 00:05:51,120
a decision based on that but

162
00:05:51,120 --> 00:05:52,720
as far as us we're going to continue

163
00:05:52,720 --> 00:05:55,600
online and again we're looking at august

164
00:05:55,600 --> 00:05:58,240
for for probably the restart of of the

165
00:05:58,240 --> 00:06:00,400
the impression meetings uh providing you

166
00:06:00,400 --> 00:06:02,639
know something bad happens or

167
00:06:02,639 --> 00:06:05,440
or there is an increase in cases and and

168
00:06:05,440 --> 00:06:07,039
and rates are death which is usually

169
00:06:07,039 --> 00:06:09,039
what i look at hospitalizations and

170
00:06:09,039 --> 00:06:10,240
breaks of death

171
00:06:10,240 --> 00:06:13,360
um layoffs are hitting the industry

172
00:06:13,360 --> 00:06:16,400
um that is worrisome

173
00:06:16,400 --> 00:06:20,000
uh some of us have been affected uh by

174
00:06:20,000 --> 00:06:21,520
uh change of either change of

175
00:06:21,520 --> 00:06:24,160
compensation or some people have been

176
00:06:24,160 --> 00:06:25,199
reduced hours

177
00:06:25,199 --> 00:06:28,240
so and some others have been let go um

178
00:06:28,240 --> 00:06:31,520
this is uh we just saw a a

179
00:06:31,520 --> 00:06:34,479
news from ibm that is worrisome because

180
00:06:34,479 --> 00:06:36,160
usually what happens is when they see a

181
00:06:36,160 --> 00:06:38,319
big company like ibm for example

182
00:06:38,319 --> 00:06:40,880
most likely others will follow suit uh

183
00:06:40,880 --> 00:06:41,680
so so

184
00:06:41,680 --> 00:06:45,360
please uh stay alert and uh communicate

185
00:06:45,360 --> 00:06:48,560
uh there is a job offers channel where

186
00:06:48,560 --> 00:06:50,160
we have plenty

187
00:06:50,160 --> 00:06:52,319
of offers uh if you are looking for job

188
00:06:52,319 --> 00:06:54,319
people you were affected by this

189
00:06:54,319 --> 00:06:57,919
we do have a a job offers channel where

190
00:06:57,919 --> 00:06:59,599
i post everything everybody posts

191
00:06:59,599 --> 00:07:00,000
everything

192
00:07:00,000 --> 00:07:02,319
including people that are hiring uh

193
00:07:02,319 --> 00:07:04,560
internally that may not publish

194
00:07:04,560 --> 00:07:06,479
or they may not use recruiters we're

195
00:07:06,479 --> 00:07:08,080
still using this channel

196
00:07:08,080 --> 00:07:10,160
to to help everybody that has been

197
00:07:10,160 --> 00:07:12,400
affected so please stay in touch it's

198
00:07:12,400 --> 00:07:13,680
important to

199
00:07:13,680 --> 00:07:15,120
to figure out where this is going

200
00:07:15,120 --> 00:07:18,319
because uh uh it seems like the

201
00:07:18,319 --> 00:07:20,400
the i see the the number of layouts

202
00:07:20,400 --> 00:07:23,120
growing and i see the number of of

203
00:07:23,120 --> 00:07:26,560
uh companies uh new

204
00:07:26,560 --> 00:07:28,080
every week and that's that's definitely

205
00:07:28,080 --> 00:07:30,560
worrisome um

206
00:07:30,560 --> 00:07:33,919
again we have a new discord channel

207
00:07:33,919 --> 00:07:37,120
uh we're sort of uh doing back and forth

208
00:07:37,120 --> 00:07:38,000
with it we're out

209
00:07:38,000 --> 00:07:39,840
right now we're playing the hackathon

210
00:07:39,840 --> 00:07:41,680
competition there's some people that are

211
00:07:41,680 --> 00:07:42,240
engaged

212
00:07:42,240 --> 00:07:45,280
uh you can actually play it or go there

213
00:07:45,280 --> 00:07:47,199
when uh whenever you feel like after the

214
00:07:47,199 --> 00:07:48,400
meetings that we

215
00:07:48,400 --> 00:07:51,199
i was there until late yesterday there

216
00:07:51,199 --> 00:07:52,639
were probably

217
00:07:52,639 --> 00:07:54,800
uh people overnight playing this game

218
00:07:54,800 --> 00:07:56,960
some of the challenges are pretty cool

219
00:07:56,960 --> 00:07:59,599
so i invite you to to join us and help

220
00:07:59,599 --> 00:08:00,639
us

221
00:08:00,639 --> 00:08:03,199
uh other than that these meetings are uh

222
00:08:03,199 --> 00:08:05,039
are gonna be recorded

223
00:08:05,039 --> 00:08:08,639
and um they will be in the youtube

224
00:08:08,639 --> 00:08:09,840
channel

225
00:08:09,840 --> 00:08:12,240
and again if you want an invalid for uh

226
00:08:12,240 --> 00:08:13,440
our

227
00:08:13,440 --> 00:08:16,560
slack and uh um um once you're on slack

228
00:08:16,560 --> 00:08:18,879
you'll get the information for

229
00:08:18,879 --> 00:08:22,160
um for discord uh just email me and i'll

230
00:08:22,160 --> 00:08:23,680
i'll just send you an invite

231
00:08:23,680 --> 00:08:26,960
so with that in mind um i'm gonna give

232
00:08:26,960 --> 00:08:29,199
um

233
00:08:29,199 --> 00:08:32,080
i'm gonna introduce alex uh which is

234
00:08:32,080 --> 00:08:35,279
gonna talk to us about

235
00:08:35,279 --> 00:08:38,320
container security so um

236
00:08:38,320 --> 00:08:41,279
he is part of our uh pacific hackers in

237
00:08:41,279 --> 00:08:42,479
california

238
00:08:42,479 --> 00:08:45,920
and uh i had the the actual

239
00:08:45,920 --> 00:08:49,279
uh opportunity to um to see his

240
00:08:49,279 --> 00:08:50,480
presentation

241
00:08:50,480 --> 00:08:53,440
it looks pretty awesome and i'm sure

242
00:08:53,440 --> 00:08:54,959
he's got a lot of great stuff to talk

243
00:08:54,959 --> 00:08:55,920
about today

244
00:08:55,920 --> 00:08:59,519
so without further ado uh this is mr

245
00:08:59,519 --> 00:09:02,320
olavsky

246
00:09:02,720 --> 00:09:05,440
okay thank you very much rod okay let me

247
00:09:05,440 --> 00:09:09,120
share my screen

248
00:09:09,120 --> 00:09:11,680
quick question alex uh do you do you

249
00:09:11,680 --> 00:09:13,440
want people just to post questions on

250
00:09:13,440 --> 00:09:15,519
the chat and you read them or

251
00:09:15,519 --> 00:09:18,320
do you want some of us to enter or

252
00:09:18,320 --> 00:09:19,920
people interrupt you and ask the

253
00:09:19,920 --> 00:09:21,200
questions

254
00:09:21,200 --> 00:09:24,399
uh yeah i think whatever option is fine

255
00:09:24,399 --> 00:09:26,080
yeah if you if you have a question

256
00:09:26,080 --> 00:09:27,279
please um

257
00:09:27,279 --> 00:09:30,959
please ask and yeah we can discuss it

258
00:09:30,959 --> 00:09:33,519
yes or do you want to have like a q a

259
00:09:33,519 --> 00:09:34,560
session at the end and

260
00:09:34,560 --> 00:09:37,120
going back to all the questions i think

261
00:09:37,120 --> 00:09:38,000
we can have a

262
00:09:38,000 --> 00:09:40,240
q a section at the end because i think i

263
00:09:40,240 --> 00:09:41,680
have like 45

264
00:09:41,680 --> 00:09:44,880
slides so i don't want to extend more

265
00:09:44,880 --> 00:09:46,800
than an hour so i don't want to steal

266
00:09:46,800 --> 00:09:47,920
time from from broad

267
00:09:47,920 --> 00:09:50,640
as well so we can have a short q a at

268
00:09:50,640 --> 00:09:51,600
the end

269
00:09:51,600 --> 00:09:54,560
okay so yes for people who ask questions

270
00:09:54,560 --> 00:09:54,959
uh

271
00:09:54,959 --> 00:09:57,279
if you you can put a q in front of the

272
00:09:57,279 --> 00:09:58,480
question so we can

273
00:09:58,480 --> 00:10:00,800
you know basically separate between

274
00:10:00,800 --> 00:10:01,760
comments and

275
00:10:01,760 --> 00:10:03,920
questions so you know if there's a cue

276
00:10:03,920 --> 00:10:05,600
but automatically we know there's

277
00:10:05,600 --> 00:10:07,920
a that's a question so uh if not you

278
00:10:07,920 --> 00:10:09,760
know we're still gonna read everything

279
00:10:09,760 --> 00:10:10,480
so

280
00:10:10,480 --> 00:10:13,839
uh uh anyways uh go ahead and looks and

281
00:10:13,839 --> 00:10:16,959
okay cool can you see my screen now

282
00:10:16,959 --> 00:10:20,959
uh no not yet it's coming

283
00:10:20,959 --> 00:10:23,760
okay i just share my screen and put the

284
00:10:23,760 --> 00:10:26,800
presentation mode

285
00:10:26,880 --> 00:10:32,160
i'm sharing uh it's not showing

286
00:10:32,160 --> 00:10:35,040
let me try again starting to share

287
00:10:35,040 --> 00:10:35,600
content

288
00:10:35,600 --> 00:10:38,800
so maybe stop and start again

289
00:10:38,800 --> 00:10:41,199
okay

290
00:10:42,720 --> 00:10:47,839
i'm going to try again

291
00:10:59,120 --> 00:11:01,760
again i'm sharing only that uh chrome

292
00:11:01,760 --> 00:11:04,240
window

293
00:11:05,279 --> 00:11:08,800
can you see it now or

294
00:11:08,880 --> 00:11:11,920
no same message negative okay i think

295
00:11:11,920 --> 00:11:12,560
what's

296
00:11:12,560 --> 00:11:15,519
what's going on maybe it's my screen

297
00:11:15,519 --> 00:11:16,240
it's like a

298
00:11:16,240 --> 00:11:19,600
5k so let me try to very quickly use

299
00:11:19,600 --> 00:11:22,399
only my laptop

300
00:11:26,320 --> 00:11:29,839
one second

301
00:11:36,480 --> 00:11:39,519
and also for the people who are not

302
00:11:39,519 --> 00:11:42,240
uh giving up asking a question or

303
00:11:42,240 --> 00:11:43,440
anything please go ahead and meet

304
00:11:43,440 --> 00:11:45,920
yourselves

305
00:11:54,480 --> 00:11:57,760
you can see it now okay oh okay

306
00:11:57,760 --> 00:12:00,880
but my screen is so dark so

307
00:12:00,880 --> 00:12:03,200
i think

308
00:12:04,320 --> 00:12:06,880
for me it's coming up okay you can see

309
00:12:06,880 --> 00:12:08,839
it now

310
00:12:08,839 --> 00:12:12,079
yeah okay cool let me move the window

311
00:12:12,079 --> 00:12:13,279
here

312
00:12:13,279 --> 00:12:15,519
i'm going to presentation mode and let

313
00:12:15,519 --> 00:12:19,040
me pull my notes

314
00:12:20,560 --> 00:12:24,320
i think okay can you see only the screen

315
00:12:24,320 --> 00:12:26,480
or also my notes

316
00:12:26,480 --> 00:12:29,680
uh your notes as well

317
00:12:32,240 --> 00:12:36,079
okay let's do rambo without notes

318
00:12:36,839 --> 00:12:40,079
okay okay so i'm going to talk about

319
00:12:40,079 --> 00:12:41,200
container security

320
00:12:41,200 --> 00:12:43,440
uh this is a presentation for pacific

321
00:12:43,440 --> 00:12:44,959
hackers meetup

322
00:12:44,959 --> 00:12:47,839
and i'm going to go ahead and introduce

323
00:12:47,839 --> 00:12:48,720
myself

324
00:12:48,720 --> 00:12:52,079
my name is lena levski i'm from mexico

325
00:12:52,079 --> 00:12:54,399
i'm not russian or communist but you

326
00:12:54,399 --> 00:12:56,800
still call me comrade if you want

327
00:12:56,800 --> 00:12:59,200
and i'm a security software engineer i

328
00:12:59,200 --> 00:13:01,040
live here in the bay area

329
00:13:01,040 --> 00:13:03,519
and i have a crazy obsession with

330
00:13:03,519 --> 00:13:04,639
security like

331
00:13:04,639 --> 00:13:06,800
literally i i love every aspect of

332
00:13:06,800 --> 00:13:08,160
security

333
00:13:08,160 --> 00:13:11,200
so yeah i'm going to start i'm going to

334
00:13:11,200 --> 00:13:14,000
talk about container security but first

335
00:13:14,000 --> 00:13:16,399
i would like to talk a little bit about

336
00:13:16,399 --> 00:13:17,120
history

337
00:13:17,120 --> 00:13:20,160
like how historically uh developers and

338
00:13:20,160 --> 00:13:22,399
devops people has run applications

339
00:13:22,399 --> 00:13:25,600
over the last 10 20 years

340
00:13:25,600 --> 00:13:28,320
and we can see like three three main

341
00:13:28,320 --> 00:13:29,680
architectures right

342
00:13:29,680 --> 00:13:31,040
we start with the traditional

343
00:13:31,040 --> 00:13:33,200
architecture which is

344
00:13:33,200 --> 00:13:35,519
uh we start with the hardware and we we

345
00:13:35,519 --> 00:13:38,160
install an operating system and we put

346
00:13:38,160 --> 00:13:41,279
applications there and whenever

347
00:13:41,279 --> 00:13:43,680
we want to run more applications

348
00:13:43,680 --> 00:13:44,959
isolated between them

349
00:13:44,959 --> 00:13:47,680
it was as easy as bringing more hardware

350
00:13:47,680 --> 00:13:48,880
but then

351
00:13:48,880 --> 00:13:51,920
everybody start start asking about

352
00:13:51,920 --> 00:13:53,600
software right

353
00:13:53,600 --> 00:13:56,160
and this starts to became a problem

354
00:13:56,160 --> 00:13:57,680
because

355
00:13:57,680 --> 00:13:59,360
usually people start running out of

356
00:13:59,360 --> 00:14:01,120
hardware so then the

357
00:14:01,120 --> 00:14:03,120
the virtual machine architecture start

358
00:14:03,120 --> 00:14:05,120
to come into into the play and

359
00:14:05,120 --> 00:14:07,519
now a single piece of hardware was able

360
00:14:07,519 --> 00:14:08,639
to support

361
00:14:08,639 --> 00:14:11,040
many many customers right many virtual

362
00:14:11,040 --> 00:14:11,839
machines

363
00:14:11,839 --> 00:14:14,399
and the applications were isolated and

364
00:14:14,399 --> 00:14:15,199
this model

365
00:14:15,199 --> 00:14:18,240
works very well for a time but then

366
00:14:18,240 --> 00:14:20,000
it starts to become a little bit messy

367
00:14:20,000 --> 00:14:22,000
because once you want to update your

368
00:14:22,000 --> 00:14:22,800
application

369
00:14:22,800 --> 00:14:24,800
usually you want to that your libraries

370
00:14:24,800 --> 00:14:26,880
and dependencies and those dependencies

371
00:14:26,880 --> 00:14:27,680
were tied

372
00:14:27,680 --> 00:14:30,639
to the underlying operating system so a

373
00:14:30,639 --> 00:14:31,519
single change

374
00:14:31,519 --> 00:14:33,600
your application could land in the whole

375
00:14:33,600 --> 00:14:35,680
update of the vm

376
00:14:35,680 --> 00:14:38,160
also another problem we seen in the past

377
00:14:38,160 --> 00:14:38,800
is

378
00:14:38,800 --> 00:14:41,199
uh moving moving around those bms

379
00:14:41,199 --> 00:14:43,279
between between machines it was

380
00:14:43,279 --> 00:14:47,040
a problem because virtual machines

381
00:14:47,040 --> 00:14:49,120
were very heavy like we were talking

382
00:14:49,120 --> 00:14:50,160
about like

383
00:14:50,160 --> 00:14:52,480
hundreds of gigabytes right and it was

384
00:14:52,480 --> 00:14:53,839
very slow

385
00:14:53,839 --> 00:14:57,440
so then the container application the

386
00:14:57,440 --> 00:14:59,279
container architecture coming to this

387
00:14:59,279 --> 00:15:02,079
place and it was a new paradigm of how

388
00:15:02,079 --> 00:15:04,240
to run applications now instead of an

389
00:15:04,240 --> 00:15:05,279
hypervisor

390
00:15:05,279 --> 00:15:07,839
you have a container engine and you only

391
00:15:07,839 --> 00:15:09,600
have on top of that your applications

392
00:15:09,600 --> 00:15:10,720
and libraries

393
00:15:10,720 --> 00:15:14,000
so when you end you end with

394
00:15:14,000 --> 00:15:17,920
a small pieces of software

395
00:15:17,920 --> 00:15:20,480
that you can transport between uh other

396
00:15:20,480 --> 00:15:22,480
container engines right or another or

397
00:15:22,480 --> 00:15:24,639
other pieces of hardware so this starts

398
00:15:24,639 --> 00:15:26,959
became very popular

399
00:15:26,959 --> 00:15:29,360
also became very popular among attackers

400
00:15:29,360 --> 00:15:31,360
right and we are going to

401
00:15:31,360 --> 00:15:33,839
talk about about the offensive and

402
00:15:33,839 --> 00:15:35,199
defensive side of

403
00:15:35,199 --> 00:15:39,120
those technologies so

404
00:15:39,120 --> 00:15:40,800
we start with this question right like

405
00:15:40,800 --> 00:15:42,880
what are containers usually when when we

406
00:15:42,880 --> 00:15:43,519
talk about

407
00:15:43,519 --> 00:15:45,600
when we hear the word container we

408
00:15:45,600 --> 00:15:47,440
immediately think about docker because

409
00:15:47,440 --> 00:15:48,000
it's the

410
00:15:48,000 --> 00:15:50,800
more popular right but in reality there

411
00:15:50,800 --> 00:15:51,040
is

412
00:15:51,040 --> 00:15:53,920
way more options like there is linux

413
00:15:53,920 --> 00:15:56,480
container there is elixir there is elixi

414
00:15:56,480 --> 00:15:57,440
and there is

415
00:15:57,440 --> 00:16:00,160
rocket i'm going to talk about mostly

416
00:16:00,160 --> 00:16:02,000
about docker because it's like the most

417
00:16:02,000 --> 00:16:02,800
popular and

418
00:16:02,800 --> 00:16:07,040
most of my examples are about docker but

419
00:16:07,040 --> 00:16:08,800
answering the question like if you're

420
00:16:08,800 --> 00:16:10,800
going to google you will find that

421
00:16:10,800 --> 00:16:13,040
docker is a technology that allows you

422
00:16:13,040 --> 00:16:14,399
to pack your application and

423
00:16:14,399 --> 00:16:16,480
dependencies in a single

424
00:16:16,480 --> 00:16:19,680
deployment vector right so you you can

425
00:16:19,680 --> 00:16:22,560
move those those applications between

426
00:16:22,560 --> 00:16:23,600
between

427
00:16:23,600 --> 00:16:26,480
container engines and everybody's happy

428
00:16:26,480 --> 00:16:26,880
but

429
00:16:26,880 --> 00:16:28,959
what if i tell you that that's a lie

430
00:16:28,959 --> 00:16:31,839
like everything is alive right like uh

431
00:16:31,839 --> 00:16:34,240
in reality there is no container it's

432
00:16:34,240 --> 00:16:35,920
just another process running in your

433
00:16:35,920 --> 00:16:36,560
machine

434
00:16:36,560 --> 00:16:39,839
and i'm going to explain why

435
00:16:39,839 --> 00:16:44,000
so uh what containers really are right

436
00:16:44,000 --> 00:16:46,720
like usually in your operating system

437
00:16:46,720 --> 00:16:47,680
when you

438
00:16:47,680 --> 00:16:50,480
open programs those programs exist in

439
00:16:50,480 --> 00:16:51,920
the way of processes

440
00:16:51,920 --> 00:16:54,880
and those processes belongs to groups

441
00:16:54,880 --> 00:16:57,279
and are surrounded by namespace right

442
00:16:57,279 --> 00:16:59,920
like you can define some rules to say to

443
00:16:59,920 --> 00:17:01,680
tell this process can only talk

444
00:17:01,680 --> 00:17:04,400
with this one and the processes are

445
00:17:04,400 --> 00:17:05,199
going to ask

446
00:17:05,199 --> 00:17:07,280
the operating system about resources but

447
00:17:07,280 --> 00:17:08,480
they cannot

448
00:17:08,480 --> 00:17:10,400
grab those resources directly for that

449
00:17:10,400 --> 00:17:12,079
they need to talk to the kernel

450
00:17:12,079 --> 00:17:15,199
via system calls and

451
00:17:15,199 --> 00:17:18,559
for doing all this thing of course this

452
00:17:18,559 --> 00:17:20,240
is an oversimplified diagram

453
00:17:20,240 --> 00:17:22,799
but for do do all these things there is

454
00:17:22,799 --> 00:17:24,640
three main mechanism that the operating

455
00:17:24,640 --> 00:17:25,839
system use

456
00:17:25,839 --> 00:17:28,480
which are the name spaces the c groups

457
00:17:28,480 --> 00:17:31,520
or control groups and the capabilities

458
00:17:31,520 --> 00:17:33,200
so i'm going to talk a little bit more

459
00:17:33,200 --> 00:17:35,120
about those three

460
00:17:35,120 --> 00:17:37,600
that give you like made your operating

461
00:17:37,600 --> 00:17:39,600
system work right

462
00:17:39,600 --> 00:17:42,799
so namespaces like

463
00:17:42,799 --> 00:17:45,840
you can summary this like is what you're

464
00:17:45,840 --> 00:17:47,679
essentially what your process can see

465
00:17:47,679 --> 00:17:49,600
and by default docker uses six

466
00:17:49,600 --> 00:17:51,039
namespaces

467
00:17:51,039 --> 00:17:53,840
like the third one is utc meaning uh

468
00:17:53,840 --> 00:17:54,640
user

469
00:17:54,640 --> 00:17:57,679
uh unix time sharing system

470
00:17:57,679 --> 00:18:01,520
which allows you to if you have run the

471
00:18:01,520 --> 00:18:02,240
docker

472
00:18:02,240 --> 00:18:04,000
wrong command in the past and then you

473
00:18:04,000 --> 00:18:06,400
accept or go inside that container you

474
00:18:06,400 --> 00:18:08,160
will notice that the name

475
00:18:08,160 --> 00:18:11,039
of that container is like something like

476
00:18:11,039 --> 00:18:12,960
an auto generated name right

477
00:18:12,960 --> 00:18:15,679
if you're wondering how is that possible

478
00:18:15,679 --> 00:18:16,720
that is

479
00:18:16,720 --> 00:18:19,200
a thing that is because of the uts

480
00:18:19,200 --> 00:18:20,320
namespace

481
00:18:20,320 --> 00:18:21,840
like allow you to define like a

482
00:18:21,840 --> 00:18:23,440
different name of the

483
00:18:23,440 --> 00:18:26,559
a name different than the host machine

484
00:18:26,559 --> 00:18:30,080
another one is the pid or or process id

485
00:18:30,080 --> 00:18:33,520
right this is uh this allows you to do

486
00:18:33,520 --> 00:18:36,799
a process isolation and this uh reads

487
00:18:36,799 --> 00:18:38,160
directly from the

488
00:18:38,160 --> 00:18:42,000
slash proc folder right so this is why

489
00:18:42,000 --> 00:18:44,000
if you leave the process in inside a

490
00:18:44,000 --> 00:18:45,120
container

491
00:18:45,120 --> 00:18:46,559
those processes are going to be

492
00:18:46,559 --> 00:18:48,559
different than in their host machine

493
00:18:48,559 --> 00:18:50,559
because they essentially have different

494
00:18:50,559 --> 00:18:52,640
pro proc folder

495
00:18:52,640 --> 00:18:54,880
then we have the ipc which means inter

496
00:18:54,880 --> 00:18:55,760
process

497
00:18:55,760 --> 00:18:58,480
communication and this essentially helps

498
00:18:58,480 --> 00:19:00,320
you to achieve the process isolation

499
00:19:00,320 --> 00:19:02,720
so processes inside a container cannot

500
00:19:02,720 --> 00:19:04,720
talk directly to processes running

501
00:19:04,720 --> 00:19:05,440
outside

502
00:19:05,440 --> 00:19:07,919
the container like in the real machine

503
00:19:07,919 --> 00:19:09,840
then we have the network

504
00:19:09,840 --> 00:19:12,240
which uh achieved isolation at the

505
00:19:12,240 --> 00:19:14,240
network interface level

506
00:19:14,240 --> 00:19:17,840
and we have user that allows you to have

507
00:19:17,840 --> 00:19:20,880
uh uh different users from inside the

508
00:19:20,880 --> 00:19:23,039
container and outside the container so

509
00:19:23,039 --> 00:19:26,720
usually when you run a docker container

510
00:19:26,720 --> 00:19:28,400
you will notice that you are

511
00:19:28,400 --> 00:19:30,799
root inside talk inside that container

512
00:19:30,799 --> 00:19:32,240
right but that doesn't mean

513
00:19:32,240 --> 00:19:35,039
that root user is the root of the host

514
00:19:35,039 --> 00:19:36,720
machine so this is

515
00:19:36,720 --> 00:19:40,320
achievable via the the username space

516
00:19:40,320 --> 00:19:42,400
and finally we have the mounting space

517
00:19:42,400 --> 00:19:44,240
that help you to achieve

518
00:19:44,240 --> 00:19:47,600
isolation at the file system level right

519
00:19:47,600 --> 00:19:52,400
so as i say before if you do the rocker

520
00:19:52,400 --> 00:19:55,200
docker command and then you you run like

521
00:19:55,200 --> 00:19:57,200
this image this mina your image

522
00:19:57,200 --> 00:19:59,280
and you go inside that container and do

523
00:19:59,280 --> 00:20:02,000
the list processes

524
00:20:02,000 --> 00:20:04,880
list network connections and then list

525
00:20:04,880 --> 00:20:05,679
files

526
00:20:05,679 --> 00:20:07,919
you will see a very different output

527
00:20:07,919 --> 00:20:09,840
that if you run those commands in the

528
00:20:09,840 --> 00:20:12,080
in the host machine right like

529
00:20:12,080 --> 00:20:13,760
containers they only see what the

530
00:20:13,760 --> 00:20:15,280
operating system want them

531
00:20:15,280 --> 00:20:18,159
to see like but they are like any other

532
00:20:18,159 --> 00:20:19,120
processes and

533
00:20:19,120 --> 00:20:20,880
most of the application running inside

534
00:20:20,880 --> 00:20:22,799
container doesn't know they are inside a

535
00:20:22,799 --> 00:20:25,360
container

536
00:20:26,400 --> 00:20:29,039
next one is the c groups right as i as i

537
00:20:29,039 --> 00:20:31,039
told before like

538
00:20:31,039 --> 00:20:34,240
c groups is a mechanism for applying

539
00:20:34,240 --> 00:20:38,320
limitations to how to resources of

540
00:20:38,320 --> 00:20:41,600
of of the processes right this is how

541
00:20:41,600 --> 00:20:44,000
you can achieve

542
00:20:44,000 --> 00:20:46,720
telling a container that you you should

543
00:20:46,720 --> 00:20:48,400
not use more than 50

544
00:20:48,400 --> 00:20:51,039
of the cpu or you should not use more

545
00:20:51,039 --> 00:20:52,000
than

546
00:20:52,000 --> 00:20:54,400
5 gigabytes of ram right like all the

547
00:20:54,400 --> 00:20:56,320
all that can be achievable using c

548
00:20:56,320 --> 00:20:58,159
groups and this is very transparent for

549
00:20:58,159 --> 00:21:00,000
the software right because

550
00:21:00,000 --> 00:21:01,679
a application developer should not

551
00:21:01,679 --> 00:21:04,080
concern about all these limitations

552
00:21:04,080 --> 00:21:06,240
so you put these limitations in place

553
00:21:06,240 --> 00:21:09,120
from outside application like we have

554
00:21:09,120 --> 00:21:12,480
in the container and finally we have the

555
00:21:12,480 --> 00:21:13,679
capabilities right

556
00:21:13,679 --> 00:21:15,840
which is the last piece of the puzzle so

557
00:21:15,840 --> 00:21:17,520
you start historically

558
00:21:17,520 --> 00:21:21,200
uh before kernel 2.2 i guess

559
00:21:21,200 --> 00:21:23,200
there were only two distinctions in

560
00:21:23,200 --> 00:21:26,320
linux the normal user and the super user

561
00:21:26,320 --> 00:21:28,320
like if you are the super user you can

562
00:21:28,320 --> 00:21:30,159
do everything in the system you can

563
00:21:30,159 --> 00:21:31,760
destroy the whole system right

564
00:21:31,760 --> 00:21:34,559
and that was a little bit of a problem

565
00:21:34,559 --> 00:21:35,360
because if i

566
00:21:35,360 --> 00:21:38,480
have a small application that need only

567
00:21:38,480 --> 00:21:40,159
to run

568
00:21:40,159 --> 00:21:42,559
a service on a privileged port i need to

569
00:21:42,559 --> 00:21:43,360
to give

570
00:21:43,360 --> 00:21:45,280
the whole super user power to that

571
00:21:45,280 --> 00:21:47,600
application and if that application is

572
00:21:47,600 --> 00:21:49,760
compromised that that became a problem

573
00:21:49,760 --> 00:21:50,400
right

574
00:21:50,400 --> 00:21:53,600
so after that capability concept was

575
00:21:53,600 --> 00:21:55,520
created and this is essentially

576
00:21:55,520 --> 00:21:58,240
like they are splitting the whole super

577
00:21:58,240 --> 00:21:59,200
user power

578
00:21:59,200 --> 00:22:02,159
into several units and each one of those

579
00:22:02,159 --> 00:22:04,480
units allows you to do a specific

580
00:22:04,480 --> 00:22:06,880
operation in the operating system like

581
00:22:06,880 --> 00:22:07,600
for example

582
00:22:07,600 --> 00:22:10,080
here the most popular we have a net

583
00:22:10,080 --> 00:22:12,480
route that allows you to

584
00:22:12,480 --> 00:22:13,919
communicate to the network create

585
00:22:13,919 --> 00:22:16,080
packages set uid

586
00:22:16,080 --> 00:22:19,918
set peak capability shown

587
00:22:20,000 --> 00:22:23,520
so that is here i'm showing 30x

588
00:22:23,520 --> 00:22:25,840
capabilities but i think in modern linux

589
00:22:25,840 --> 00:22:28,640
operating system there is more than

590
00:22:28,640 --> 00:22:31,840
40 capabilities and each one of these

591
00:22:31,840 --> 00:22:33,280
allow you to do

592
00:22:33,280 --> 00:22:35,039
one app connection in the operating

593
00:22:35,039 --> 00:22:37,440
system

594
00:22:37,520 --> 00:22:40,240
so okay enough about the theory let's

595
00:22:40,240 --> 00:22:41,039
talk

596
00:22:41,039 --> 00:22:42,480
a little bit about the offensive

597
00:22:42,480 --> 00:22:44,640
security part of the containers

598
00:22:44,640 --> 00:22:48,240
so we are going to talk uh about like

599
00:22:48,240 --> 00:22:48,880
how to

600
00:22:48,880 --> 00:22:51,600
abuse those three mechanism that we

601
00:22:51,600 --> 00:22:54,480
mentioned before

602
00:22:54,480 --> 00:22:58,640
so in this video example imagine that

603
00:22:58,640 --> 00:23:01,440
you are the root of the root user of a

604
00:23:01,440 --> 00:23:03,280
system right like all the comments on

605
00:23:03,280 --> 00:23:04,159
the right

606
00:23:04,159 --> 00:23:06,720
of the orange square are running by the

607
00:23:06,720 --> 00:23:07,520
root

608
00:23:07,520 --> 00:23:10,720
and you as a root user has a

609
00:23:10,720 --> 00:23:13,120
a secret file that contains like some

610
00:23:13,120 --> 00:23:14,640
secret information

611
00:23:14,640 --> 00:23:16,400
like you create the file you can leave

612
00:23:16,400 --> 00:23:19,679
the file obviously because

613
00:23:20,080 --> 00:23:23,039
it's another user in the system uh all

614
00:23:23,039 --> 00:23:24,559
the comments that are on the on the

615
00:23:24,559 --> 00:23:26,799
right of the yellow square

616
00:23:26,799 --> 00:23:29,840
that is trying to to see what is inside

617
00:23:29,840 --> 00:23:32,000
that file but naturally he cannot do

618
00:23:32,000 --> 00:23:33,679
that because he don't have permission

619
00:23:33,679 --> 00:23:34,400
but

620
00:23:34,400 --> 00:23:36,880
if force for any reason that user has

621
00:23:36,880 --> 00:23:38,240
access to the docker command

622
00:23:38,240 --> 00:23:41,440
and can can run it like he what he can

623
00:23:41,440 --> 00:23:42,000
do is

624
00:23:42,000 --> 00:23:45,600
uh he can run a new container mounting

625
00:23:45,600 --> 00:23:48,559
the the home folder of the root user and

626
00:23:48,559 --> 00:23:49,279
then

627
00:23:49,279 --> 00:23:52,080
go inside that container and list the

628
00:23:52,080 --> 00:23:53,440
secret file

629
00:23:53,440 --> 00:23:55,440
which is everything that is happening on

630
00:23:55,440 --> 00:23:57,200
the right of the blue square right

631
00:23:57,200 --> 00:23:59,600
and why is it happening because in in

632
00:23:59,600 --> 00:24:00,640
linux like

633
00:24:00,640 --> 00:24:03,120
every user that has access to the docker

634
00:24:03,120 --> 00:24:04,720
command is essentially

635
00:24:04,720 --> 00:24:07,360
can be ca can become like root of the

636
00:24:07,360 --> 00:24:09,200
system right because of the way docker

637
00:24:09,200 --> 00:24:11,120
works the level of privilege that

638
00:24:11,120 --> 00:24:14,720
that binary needs so this is a the

639
00:24:14,720 --> 00:24:15,840
container breakout

640
00:24:15,840 --> 00:24:19,120
by volume example and

641
00:24:19,120 --> 00:24:22,000
a host network breakout of host network

642
00:24:22,000 --> 00:24:24,000
is very similar right you can run

643
00:24:24,000 --> 00:24:26,159
a docker container using the privilege

644
00:24:26,159 --> 00:24:27,360
flag and then

645
00:24:27,360 --> 00:24:30,480
using the net and the the net net

646
00:24:30,480 --> 00:24:32,799
name space and passing the uh to be

647
00:24:32,799 --> 00:24:33,760
equal to host

648
00:24:33,760 --> 00:24:37,360
and if you execute into the container

649
00:24:37,360 --> 00:24:39,120
and then run the netstat command you

650
00:24:39,120 --> 00:24:40,159
will see

651
00:24:40,159 --> 00:24:42,799
all the uh everything that is running in

652
00:24:42,799 --> 00:24:43,679
the whole machine

653
00:24:43,679 --> 00:24:47,200
from the network perspective right

654
00:24:47,200 --> 00:24:49,200
and also the same is true for the for

655
00:24:49,200 --> 00:24:50,640
the process ids right

656
00:24:50,640 --> 00:24:52,799
if you if you do the same but this time

657
00:24:52,799 --> 00:24:55,279
you use pid namespace process id

658
00:24:55,279 --> 00:24:57,600
in space and you say equal to host and

659
00:24:57,600 --> 00:24:59,279
then you list all the processes inside

660
00:24:59,279 --> 00:25:00,159
the container

661
00:25:00,159 --> 00:25:02,000
you will see all the processes running

662
00:25:02,000 --> 00:25:04,720
in the machine

663
00:25:06,720 --> 00:25:09,679
and i have another example here which is

664
00:25:09,679 --> 00:25:12,320
called the container escape part one

665
00:25:12,320 --> 00:25:14,799
so in the previous example you can you

666
00:25:14,799 --> 00:25:15,679
can say but

667
00:25:15,679 --> 00:25:17,520
hey alex that's not fair you already

668
00:25:17,520 --> 00:25:19,520
have access to the operating system

669
00:25:19,520 --> 00:25:20,320
right

670
00:25:20,320 --> 00:25:22,400
like and i'm going to say yeah that's

671
00:25:22,400 --> 00:25:24,480
true but that is also possible

672
00:25:24,480 --> 00:25:26,559
to escape from inside a container right

673
00:25:26,559 --> 00:25:28,000
like previously we have already

674
00:25:28,000 --> 00:25:30,000
access to the code machine now we we are

675
00:25:30,000 --> 00:25:32,240
inside inside a container and our goal

676
00:25:32,240 --> 00:25:34,799
is to escape from that container

677
00:25:34,799 --> 00:25:38,320
and in order to do that

678
00:25:38,880 --> 00:25:42,640
that we're inside for some reason

679
00:25:42,640 --> 00:25:46,400
there is this special file mark as pink

680
00:25:46,400 --> 00:25:48,799
mounted inside a container right so this

681
00:25:48,799 --> 00:25:50,240
is the docker sock file

682
00:25:50,240 --> 00:25:52,000
and it's essentially a docker socket

683
00:25:52,000 --> 00:25:54,320
used by by the docker demon

684
00:25:54,320 --> 00:25:56,559
and if the if for any reason that is

685
00:25:56,559 --> 00:25:57,440
exposed

686
00:25:57,440 --> 00:25:59,440
inside the machine inside the container

687
00:25:59,440 --> 00:26:01,679
sorry what we can do is download the

688
00:26:01,679 --> 00:26:03,279
docker binary here i'm

689
00:26:03,279 --> 00:26:06,400
going to document binary and then

690
00:26:06,400 --> 00:26:09,600
we can run a docker commands right so

691
00:26:09,600 --> 00:26:11,200
here what i'm doing is

692
00:26:11,200 --> 00:26:14,080
on the right

693
00:26:14,240 --> 00:26:16,799
i'm doing i'm listing all the files and

694
00:26:16,799 --> 00:26:17,360
folder

695
00:26:17,360 --> 00:26:20,240
of the of the proc slash proc folder to

696
00:26:20,240 --> 00:26:22,720
demonstrate that this container has

697
00:26:22,720 --> 00:26:24,960
access only to the processes of the cont

698
00:26:24,960 --> 00:26:26,000
of

699
00:26:26,000 --> 00:26:28,640
inside the container and then i'm

700
00:26:28,640 --> 00:26:30,159
running a docker command

701
00:26:30,159 --> 00:26:33,679
that is saying docker run mount

702
00:26:33,679 --> 00:26:37,200
slash proc to slash proc

703
00:26:37,200 --> 00:26:40,159
fs and run this new container in

704
00:26:40,159 --> 00:26:41,600
privilege mode so

705
00:26:41,600 --> 00:26:45,840
here a very important question is

706
00:26:45,840 --> 00:26:47,760
which proc folder you think is going to

707
00:26:47,760 --> 00:26:50,000
be mounted the proc folder of the

708
00:26:50,000 --> 00:26:52,240
mini mini container or the proc folder

709
00:26:52,240 --> 00:26:53,440
of the host machine

710
00:26:53,440 --> 00:26:55,360
right the answer is the proc folder of

711
00:26:55,360 --> 00:26:57,039
the whole machine because this

712
00:26:57,039 --> 00:26:58,880
command is going to be executed by the

713
00:26:58,880 --> 00:27:00,240
docker demon

714
00:27:00,240 --> 00:27:03,520
the and what is going to happen there is

715
00:27:03,520 --> 00:27:06,559
if we exec into this new container and

716
00:27:06,559 --> 00:27:08,080
then we list

717
00:27:08,080 --> 00:27:10,400
a slash proc fs we are going to see way

718
00:27:10,400 --> 00:27:11,360
more processes

719
00:27:11,360 --> 00:27:13,120
that indeed these are the processes of

720
00:27:13,120 --> 00:27:14,799
the host machine

721
00:27:14,799 --> 00:27:17,120
so this is not enough to escape the

722
00:27:17,120 --> 00:27:18,080
container right

723
00:27:18,080 --> 00:27:20,799
we need to change the namespace so right

724
00:27:20,799 --> 00:27:21,919
now we we use

725
00:27:21,919 --> 00:27:24,159
break uh volume isolation we need to

726
00:27:24,159 --> 00:27:25,279
break uh

727
00:27:25,279 --> 00:27:27,760
user isolation and all the other uh

728
00:27:27,760 --> 00:27:29,360
namespaces

729
00:27:29,360 --> 00:27:32,480
so in order to do that we can

730
00:27:32,480 --> 00:27:35,679
go to proc fs slash one slash ns

731
00:27:35,679 --> 00:27:37,600
and this is very important because in

732
00:27:37,600 --> 00:27:38,960
linux like

733
00:27:38,960 --> 00:27:41,679
the initial process id is the id one and

734
00:27:41,679 --> 00:27:42,480
this is the

735
00:27:42,480 --> 00:27:45,760
init d process right so inside this

736
00:27:45,760 --> 00:27:47,520
folder we're going to see all the

737
00:27:47,520 --> 00:27:49,039
different name spaces

738
00:27:49,039 --> 00:27:51,360
and we can use the ns enter command to

739
00:27:51,360 --> 00:27:52,559
essentially as the name say

740
00:27:52,559 --> 00:27:55,200
enter those namespaces so here i'm i'm

741
00:27:55,200 --> 00:27:55,919
telling

742
00:27:55,919 --> 00:27:59,520
in the center to switch my ipc namespace

743
00:27:59,520 --> 00:28:01,919
my modem namespace ut's namespace and

744
00:28:01,919 --> 00:28:03,360
networking space

745
00:28:03,360 --> 00:28:06,720
so once i do that i

746
00:28:06,720 --> 00:28:09,600
i i go into that namespace and i can

747
00:28:09,600 --> 00:28:11,679
start like typing some commands

748
00:28:11,679 --> 00:28:15,039
as as i am in the in the

749
00:28:15,039 --> 00:28:16,799
hose machine right which is everything

750
00:28:16,799 --> 00:28:18,559
that is on the right of the yellow

751
00:28:18,559 --> 00:28:19,120
square

752
00:28:19,120 --> 00:28:22,880
so i do ls i do docker ps and i

753
00:28:22,880 --> 00:28:24,880
essentially escape the container right i

754
00:28:24,880 --> 00:28:26,640
effectively skate the container

755
00:28:26,640 --> 00:28:31,520
so this was a container escape part two

756
00:28:31,520 --> 00:28:33,919
and if you think like nobody is so silly

757
00:28:33,919 --> 00:28:36,159
to mount the doctor suck

758
00:28:36,159 --> 00:28:37,760
i'm very afraid to tell you that's not

759
00:28:37,760 --> 00:28:40,480
true if you go to the doctor

760
00:28:40,480 --> 00:28:43,039
sorry to to github search and do and

761
00:28:43,039 --> 00:28:45,200
search for docker suck you will see

762
00:28:45,200 --> 00:28:48,720
like almost 300 000 reference to the to

763
00:28:48,720 --> 00:28:50,640
that docker socket right

764
00:28:50,640 --> 00:28:53,600
and it's not completely a crazy idea

765
00:28:53,600 --> 00:28:55,600
there is a lot of project that

766
00:28:55,600 --> 00:28:59,200
need this docker socket like bricks like

767
00:28:59,200 --> 00:29:00,320
jenkins that did

768
00:29:00,320 --> 00:29:03,679
need to spin up container dynamically

769
00:29:03,679 --> 00:29:06,000
so they need that right the the only

770
00:29:06,000 --> 00:29:06,799
thing is that

771
00:29:06,799 --> 00:29:08,880
if you do this yeah you you need to

772
00:29:08,880 --> 00:29:10,640
create your software in a different way

773
00:29:10,640 --> 00:29:11,120
that

774
00:29:11,120 --> 00:29:13,200
cannot be compromised that easily

775
00:29:13,200 --> 00:29:15,200
because if someone compromised

776
00:29:15,200 --> 00:29:17,600
a container that has access to this

777
00:29:17,600 --> 00:29:18,399
socket like

778
00:29:18,399 --> 00:29:20,559
everything is came over right they can

779
00:29:20,559 --> 00:29:21,679
take over over

780
00:29:21,679 --> 00:29:24,720
the whole infrastructure

781
00:29:25,200 --> 00:29:27,760
okay that's enough for the offensive

782
00:29:27,760 --> 00:29:29,520
part now i'm going to talk about a

783
00:29:29,520 --> 00:29:31,520
little bit uh the defensive security how

784
00:29:31,520 --> 00:29:33,360
to protect your containers

785
00:29:33,360 --> 00:29:36,240
how to make it more secure and there is

786
00:29:36,240 --> 00:29:37,039
essentially

787
00:29:37,039 --> 00:29:39,760
uh two ways to do that right like

788
00:29:39,760 --> 00:29:40,559
container

789
00:29:40,559 --> 00:29:42,960
like protecting your your images and

790
00:29:42,960 --> 00:29:44,320
containers and

791
00:29:44,320 --> 00:29:46,480
at room time so i'm going to start about

792
00:29:46,480 --> 00:29:47,360
there

793
00:29:47,360 --> 00:29:50,240
how to create scratch containers when

794
00:29:50,240 --> 00:29:52,720
less is more

795
00:29:52,720 --> 00:29:55,679
so i have this uh a small example of a

796
00:29:55,679 --> 00:29:56,880
go program

797
00:29:56,880 --> 00:29:59,840
that is called main so this main program

798
00:29:59,840 --> 00:30:01,039
is going to

799
00:30:01,039 --> 00:30:04,720
start a basic uh service that expose a

800
00:30:04,720 --> 00:30:06,720
slash run endpoint and this endpoint

801
00:30:06,720 --> 00:30:09,039
will receive only two parameters

802
00:30:09,039 --> 00:30:12,399
comment and message and this is a very

803
00:30:12,399 --> 00:30:14,799
uh this program has a vulnerability

804
00:30:14,799 --> 00:30:16,799
called common injection because

805
00:30:16,799 --> 00:30:18,960
essentially a law allows an attacker to

806
00:30:18,960 --> 00:30:21,440
pass whatever command he wants

807
00:30:21,440 --> 00:30:24,000
and this program works with another

808
00:30:24,000 --> 00:30:24,799
program called

809
00:30:24,799 --> 00:30:28,000
encode so the main idea is that the main

810
00:30:28,000 --> 00:30:29,840
program is going to call

811
00:30:29,840 --> 00:30:33,760
this binary and a user can pass

812
00:30:33,760 --> 00:30:36,480
a message and it's going to receive the

813
00:30:36,480 --> 00:30:37,360
output of the

814
00:30:37,360 --> 00:30:39,840
encoded version of that message and if

815
00:30:39,840 --> 00:30:41,120
you deploy

816
00:30:41,120 --> 00:30:43,200
then the next step is to deploy that

817
00:30:43,200 --> 00:30:44,799
using containers right

818
00:30:44,799 --> 00:30:48,559
docker so this is the the syntax

819
00:30:48,559 --> 00:30:50,960
of how to create a basic container you

820
00:30:50,960 --> 00:30:52,880
you you can create containers using the

821
00:30:52,880 --> 00:30:54,000
docker file

822
00:30:54,000 --> 00:30:55,760
and the first thing i'm doing here is

823
00:30:55,760 --> 00:30:57,919
i'm installing all the dependencies and

824
00:30:57,919 --> 00:30:59,120
then i'm

825
00:30:59,120 --> 00:31:01,440
statically compiling the the binaries

826
00:31:01,440 --> 00:31:02,480
the two binaries

827
00:31:02,480 --> 00:31:05,120
and then i'm i'm telling in the with the

828
00:31:05,120 --> 00:31:05,600
cm

829
00:31:05,600 --> 00:31:07,760
cmd directive that whenever this

830
00:31:07,760 --> 00:31:09,760
container start is going to execute the

831
00:31:09,760 --> 00:31:10,559
main

832
00:31:10,559 --> 00:31:13,679
binary right so the syntax to build

833
00:31:13,679 --> 00:31:14,960
containers is

834
00:31:14,960 --> 00:31:18,559
the one that is in the bottom and then

835
00:31:18,559 --> 00:31:21,279
we run that container right we are ma

836
00:31:21,279 --> 00:31:22,720
we're exposing the

837
00:31:22,720 --> 00:31:25,120
the port into the real port of the whole

838
00:31:25,120 --> 00:31:27,200
machine so you can type

839
00:31:27,200 --> 00:31:30,880
localhost slash 1337 in your browser

840
00:31:30,880 --> 00:31:34,559
and the resulting image size of this uh

841
00:31:34,559 --> 00:31:37,679
for the for this container is going to

842
00:31:37,679 --> 00:31:38,880
be

843
00:31:38,880 --> 00:31:42,240
almost 900 mega megabytes

844
00:31:42,240 --> 00:31:44,880
so once your container is running if you

845
00:31:44,880 --> 00:31:46,399
go to your browser

846
00:31:46,399 --> 00:31:48,799
in the in the first example you you will

847
00:31:48,799 --> 00:31:49,519
see that the

848
00:31:49,519 --> 00:31:52,000
the program is working as expected right

849
00:31:52,000 --> 00:31:52,720
i'm saying

850
00:31:52,720 --> 00:31:55,200
a comment encount encode and then i'm

851
00:31:55,200 --> 00:31:57,120
passing a hello world message and i'm

852
00:31:57,120 --> 00:31:58,240
getting

853
00:31:58,240 --> 00:32:01,360
the base64 output but then

854
00:32:01,360 --> 00:32:04,240
what about you if a malicious user pass

855
00:32:04,240 --> 00:32:06,000
the cat command and then the etc

856
00:32:06,000 --> 00:32:06,880
password

857
00:32:06,880 --> 00:32:09,120
like you are you you just got pound

858
00:32:09,120 --> 00:32:10,320
right and the

859
00:32:10,320 --> 00:32:12,480
developers could argue like this is not

860
00:32:12,480 --> 00:32:14,000
a book or a vulnerability

861
00:32:14,000 --> 00:32:16,240
it's a feature because the software is

862
00:32:16,240 --> 00:32:18,399
working as intended and

863
00:32:18,399 --> 00:32:21,440
they don't want to be limited they

864
00:32:21,440 --> 00:32:23,120
they just want to keep adding more and

865
00:32:23,120 --> 00:32:24,960
more binaries into the container

866
00:32:24,960 --> 00:32:27,039
without changing the underlying code

867
00:32:27,039 --> 00:32:28,000
right so

868
00:32:28,000 --> 00:32:31,120
they will not fix the code but we can do

869
00:32:31,120 --> 00:32:31,519
that

870
00:32:31,519 --> 00:32:34,159
the way we can do that is using what is

871
00:32:34,159 --> 00:32:35,760
called a scratch image

872
00:32:35,760 --> 00:32:38,559
a scratch image is essentially a an

873
00:32:38,559 --> 00:32:39,600
empty image

874
00:32:39,600 --> 00:32:43,760
so once you do all the compilation

875
00:32:43,760 --> 00:32:46,159
and and the dependency download of your

876
00:32:46,159 --> 00:32:48,559
of your application then you essentially

877
00:32:48,559 --> 00:32:49,760
will copy

878
00:32:49,760 --> 00:32:51,679
only the binaries that you care about

879
00:32:51,679 --> 00:32:53,039
which are the the

880
00:32:53,039 --> 00:32:55,519
encode binary and the main binary into

881
00:32:55,519 --> 00:32:56,320
the scratch

882
00:32:56,320 --> 00:32:59,919
image and then we are saying that

883
00:32:59,919 --> 00:33:02,480
whenever this new image uh start we are

884
00:33:02,480 --> 00:33:04,000
going to run the main

885
00:33:04,000 --> 00:33:07,360
command the result is going to be a way

886
00:33:07,360 --> 00:33:11,200
like less image which is only almost

887
00:33:11,200 --> 00:33:12,039
it's only

888
00:33:12,039 --> 00:33:15,600
3.19 megabytes because we are ignoring

889
00:33:15,600 --> 00:33:17,519
everything that doesn't have to do with

890
00:33:17,519 --> 00:33:19,760
our application right

891
00:33:19,760 --> 00:33:23,760
so if we do the example again and

892
00:33:23,760 --> 00:33:25,679
the the functionality is still there is

893
00:33:25,679 --> 00:33:27,039
working as intended

894
00:33:27,039 --> 00:33:29,440
but now if an attacker wants to execute

895
00:33:29,440 --> 00:33:31,600
the cat command it will not work and

896
00:33:31,600 --> 00:33:33,760
he will receive an error that say the

897
00:33:33,760 --> 00:33:34,880
cat is not

898
00:33:34,880 --> 00:33:37,840
found right because this container only

899
00:33:37,840 --> 00:33:38,720
only has

900
00:33:38,720 --> 00:33:41,840
the main binary and then code binary

901
00:33:41,840 --> 00:33:43,919
and we can tell that it's true because

902
00:33:43,919 --> 00:33:45,840
if we also want to go inside that

903
00:33:45,840 --> 00:33:48,720
container via the docker exec command

904
00:33:48,720 --> 00:33:50,720
we we will not be able to do that

905
00:33:50,720 --> 00:33:52,080
because there is not bash

906
00:33:52,080 --> 00:33:54,080
there is no batch binary right so this

907
00:33:54,080 --> 00:33:55,760
is a very effective way

908
00:33:55,760 --> 00:33:59,039
to you know like

909
00:33:59,039 --> 00:34:01,200
have only what we care about and ignore

910
00:34:01,200 --> 00:34:03,039
everything that we don't care about and

911
00:34:03,039 --> 00:34:04,399
review the attack surface

912
00:34:04,399 --> 00:34:07,760
on this container so in this example it

913
00:34:07,760 --> 00:34:09,119
was very easy because

914
00:34:09,119 --> 00:34:12,800
i was using go and we can create like

915
00:34:12,800 --> 00:34:16,399
static statically linking binaries

916
00:34:16,399 --> 00:34:18,320
but what if you are using other

917
00:34:18,320 --> 00:34:20,239
programming languages like interpreted

918
00:34:20,239 --> 00:34:21,199
languages like

919
00:34:21,199 --> 00:34:25,040
python why it is possible to do with

920
00:34:25,040 --> 00:34:27,839
scratch containers but you will

921
00:34:27,839 --> 00:34:30,239
have to consider some like copying the

922
00:34:30,239 --> 00:34:31,280
interpreter and

923
00:34:31,280 --> 00:34:33,119
all the dependencies right but

924
00:34:33,119 --> 00:34:35,119
fortunately there is this distroless

925
00:34:35,119 --> 00:34:36,719
project which is part of the google

926
00:34:36,719 --> 00:34:38,000
container tools

927
00:34:38,000 --> 00:34:40,000
and these guys already have like

928
00:34:40,000 --> 00:34:41,520
pre-built images

929
00:34:41,520 --> 00:34:43,760
for most of the popular programming

930
00:34:43,760 --> 00:34:46,000
languages like if you want to do

931
00:34:46,000 --> 00:34:49,839
java or python ruby they have already

932
00:34:49,839 --> 00:34:52,879
versions ready for working with those

933
00:34:52,879 --> 00:34:55,440
language and will contain only the

934
00:34:55,440 --> 00:34:57,760
important tools and dependencies like

935
00:34:57,760 --> 00:35:00,079
they will not contain like a lot of

936
00:35:00,079 --> 00:35:02,079
operations operating system stuff that

937
00:35:02,079 --> 00:35:03,200
you don't need

938
00:35:03,200 --> 00:35:07,200
so if i if i i do the distort less

939
00:35:07,200 --> 00:35:10,078
image this time

940
00:35:10,400 --> 00:35:12,079
the image is going to be a little bit

941
00:35:12,079 --> 00:35:13,520
bigger because it's not a scratch

942
00:35:13,520 --> 00:35:15,680
container but

943
00:35:15,680 --> 00:35:18,800
this image will not contain

944
00:35:18,800 --> 00:35:22,240
the anything that can be abused right

945
00:35:22,240 --> 00:35:23,200
like the

946
00:35:23,200 --> 00:35:26,400
like the cat command so this is another

947
00:35:26,400 --> 00:35:28,839
way for you to create like a more secure

948
00:35:28,839 --> 00:35:33,280
images take away for this section is uh

949
00:35:33,280 --> 00:35:33,680
most

950
00:35:33,680 --> 00:35:36,400
docker images by default include lot of

951
00:35:36,400 --> 00:35:36,720
of

952
00:35:36,720 --> 00:35:38,720
necessary binaries right and those

953
00:35:38,720 --> 00:35:40,400
binaries often can be

954
00:35:40,400 --> 00:35:43,200
used to escalate privilege that we as we

955
00:35:43,200 --> 00:35:44,480
as we showed

956
00:35:44,480 --> 00:35:47,359
and the main idea is to build minor

957
00:35:47,359 --> 00:35:49,359
minimal containers to reduce the attack

958
00:35:49,359 --> 00:35:51,839
surface

959
00:35:52,640 --> 00:35:56,160
okay and now i'm going to talk about

960
00:35:56,160 --> 00:35:58,240
runtime protections right like we

961
00:35:58,240 --> 00:35:59,599
already know how to create

962
00:35:59,599 --> 00:36:02,240
secure images secure containers what

963
00:36:02,240 --> 00:36:02,880
about

964
00:36:02,880 --> 00:36:04,720
uh if the application is already

965
00:36:04,720 --> 00:36:06,560
deployed and

966
00:36:06,560 --> 00:36:09,599
how to mitigate the attacks right so in

967
00:36:09,599 --> 00:36:12,160
general there is four ways to do that

968
00:36:12,160 --> 00:36:15,200
via capabilities second which is short

969
00:36:15,200 --> 00:36:16,640
for secure computing

970
00:36:16,640 --> 00:36:18,800
up armor which is short for application

971
00:36:18,800 --> 00:36:20,079
armor and

972
00:36:20,079 --> 00:36:22,640
ce linux which is short for securing

973
00:36:22,640 --> 00:36:23,599
hands linux

974
00:36:23,599 --> 00:36:26,079
i'm going to talk a little bit about the

975
00:36:26,079 --> 00:36:27,599
the three ones

976
00:36:27,599 --> 00:36:30,240
and then your task your homework is to

977
00:36:30,240 --> 00:36:31,359
investigate more about

978
00:36:31,359 --> 00:36:34,800
sc linux so

979
00:36:34,800 --> 00:36:37,599
linux capabilities like uh docker

980
00:36:37,599 --> 00:36:39,599
command allow you to manage capability

981
00:36:39,599 --> 00:36:41,119
basically using

982
00:36:41,119 --> 00:36:44,400
four flags which has capability add and

983
00:36:44,400 --> 00:36:45,680
capability drop

984
00:36:45,680 --> 00:36:48,720
allow you to as the name says add and

985
00:36:48,720 --> 00:36:50,400
drop capabilities right

986
00:36:50,400 --> 00:36:53,680
so you can add whatever you want of the

987
00:36:53,680 --> 00:36:54,320
list that i

988
00:36:54,320 --> 00:36:56,000
showed you before and your application

989
00:36:56,000 --> 00:36:58,079
is going to behave in different ways

990
00:36:58,079 --> 00:36:58,720
right

991
00:36:58,720 --> 00:37:01,280
it may be game functionality or it may

992
00:37:01,280 --> 00:37:02,800
lose functionality

993
00:37:02,800 --> 00:37:05,760
then if you want by the file in docker

994
00:37:05,760 --> 00:37:06,800
the containers

995
00:37:06,800 --> 00:37:09,040
run in on privileged mode that means

996
00:37:09,040 --> 00:37:10,880
that it doesn't have access to the

997
00:37:10,880 --> 00:37:13,200
to the devices of the operating system

998
00:37:13,200 --> 00:37:15,040
if you pass the privilege

999
00:37:15,040 --> 00:37:17,359
flag then your container will have

1000
00:37:17,359 --> 00:37:19,040
access to all the devices

1001
00:37:19,040 --> 00:37:21,200
and if you do you don't do you don't

1002
00:37:21,200 --> 00:37:22,240
want that you can

1003
00:37:22,240 --> 00:37:23,839
use only the device flag and

1004
00:37:23,839 --> 00:37:25,280
specifically say

1005
00:37:25,280 --> 00:37:28,480
which device do you want to have

1006
00:37:28,480 --> 00:37:31,520
so uh by the file

1007
00:37:31,520 --> 00:37:34,960
docker will assign uh these capabilities

1008
00:37:34,960 --> 00:37:38,000
to to your container so everything that

1009
00:37:38,000 --> 00:37:39,200
is here

1010
00:37:39,200 --> 00:37:42,000
is going to move to be accessible for

1011
00:37:42,000 --> 00:37:51,839
your container

1012
00:37:58,650 --> 00:38:01,800
[Music]

1013
00:38:02,839 --> 00:38:05,839
um

1014
00:38:11,200 --> 00:38:14,400
okay cool thank you okay so uh where

1015
00:38:14,400 --> 00:38:16,400
we're okay links capabilities

1016
00:38:16,400 --> 00:38:18,960
so in this example i'm running a very

1017
00:38:18,960 --> 00:38:19,520
basic

1018
00:38:19,520 --> 00:38:22,560
alpine uh container and

1019
00:38:22,560 --> 00:38:25,119
if i go inside that container and do the

1020
00:38:25,119 --> 00:38:26,480
ping command

1021
00:38:26,480 --> 00:38:29,920
i get connectivity right and then

1022
00:38:29,920 --> 00:38:32,800
if i run again this container but this

1023
00:38:32,800 --> 00:38:33,200
time

1024
00:38:33,200 --> 00:38:36,240
i say drop the network route capability

1025
00:38:36,240 --> 00:38:39,200
and i try the ping command again i'm

1026
00:38:39,200 --> 00:38:41,119
going to get permission denied because

1027
00:38:41,119 --> 00:38:44,000
essentially these the processes inside

1028
00:38:44,000 --> 00:38:46,000
that container are not allowed to

1029
00:38:46,000 --> 00:38:49,040
to create raw packages right so you can

1030
00:38:49,040 --> 00:38:50,880
apply the same principle to any other

1031
00:38:50,880 --> 00:38:53,680
capability

1032
00:38:54,160 --> 00:38:57,440
and the next one is secure computing

1033
00:38:57,440 --> 00:39:00,880
right so this is a secure computing is a

1034
00:39:00,880 --> 00:39:03,520
uh as a another security mechanism for

1035
00:39:03,520 --> 00:39:05,440
linux that allow you to filter at the

1036
00:39:05,440 --> 00:39:06,000
cisco

1037
00:39:06,000 --> 00:39:09,599
level but for now uh by default docker

1038
00:39:09,599 --> 00:39:12,720
will block uh 44 out of the more than

1039
00:39:12,720 --> 00:39:14,960
300 cisco that exists in the linux

1040
00:39:14,960 --> 00:39:15,920
kernel

1041
00:39:15,920 --> 00:39:18,960
and blocking cisco have way

1042
00:39:18,960 --> 00:39:22,240
more more implications so

1043
00:39:22,240 --> 00:39:24,800
you can the way to do this is you can

1044
00:39:24,800 --> 00:39:25,440
define

1045
00:39:25,440 --> 00:39:29,440
all these policies via json

1046
00:39:29,440 --> 00:39:32,160
format and you can tell to block the

1047
00:39:32,160 --> 00:39:33,280
cisco or to

1048
00:39:33,280 --> 00:39:37,440
throw an error or to or to drop so

1049
00:39:37,440 --> 00:39:40,000
if you like you can take a look about

1050
00:39:40,000 --> 00:39:42,560
this file this file is the file

1051
00:39:42,560 --> 00:39:45,760
second profile and

1052
00:39:45,760 --> 00:39:47,920
you can see like all the policies that

1053
00:39:47,920 --> 00:39:49,760
are accessed here

1054
00:39:49,760 --> 00:39:52,800
so in this example like going back to

1055
00:39:52,800 --> 00:39:54,480
our previous example about the

1056
00:39:54,480 --> 00:39:57,760
vulnerable end point so and in the

1057
00:39:57,760 --> 00:40:00,480
in the top i'm i'm running the container

1058
00:40:00,480 --> 00:40:02,480
without the second profile

1059
00:40:02,480 --> 00:40:04,720
and an attacker is this time the

1060
00:40:04,720 --> 00:40:07,680
attacker tries to create a folder on the

1061
00:40:07,680 --> 00:40:09,760
slash temporary folder right so he's

1062
00:40:09,760 --> 00:40:11,359
creating the palm folder

1063
00:40:11,359 --> 00:40:14,880
so he send the request he don't get any

1064
00:40:14,880 --> 00:40:16,000
error and if we

1065
00:40:16,000 --> 00:40:18,480
exec or go inside that container we

1066
00:40:18,480 --> 00:40:20,240
we're going to see that the folder was

1067
00:40:20,240 --> 00:40:22,240
created correctly

1068
00:40:22,240 --> 00:40:26,079
but on the bottom like if we create this

1069
00:40:26,079 --> 00:40:30,079
uh secure computing uh policy

1070
00:40:30,079 --> 00:40:34,240
until a processes inside this container

1071
00:40:34,240 --> 00:40:36,319
are not allowed to create folders

1072
00:40:36,319 --> 00:40:38,480
and then we run the container using that

1073
00:40:38,480 --> 00:40:39,599
policy

1074
00:40:39,599 --> 00:40:41,520
and the attacker try to do the same he's

1075
00:40:41,520 --> 00:40:43,440
going to get an error this time

1076
00:40:43,440 --> 00:40:45,440
because the content the process inside

1077
00:40:45,440 --> 00:40:47,599
the container is not allowed to do that

1078
00:40:47,599 --> 00:40:51,200
and we can check if that's true if we

1079
00:40:51,200 --> 00:40:53,599
go if we accept in to the container and

1080
00:40:53,599 --> 00:40:54,880
leave the folders

1081
00:40:54,880 --> 00:40:57,200
inside them right we we will not see

1082
00:40:57,200 --> 00:40:58,240
anything

1083
00:40:58,240 --> 00:41:02,560
so uh you you cannot you can be asking

1084
00:41:02,560 --> 00:41:03,359
right now like

1085
00:41:03,359 --> 00:41:05,920
okay like why use block like making

1086
00:41:05,920 --> 00:41:08,000
directories why not block like reading

1087
00:41:08,000 --> 00:41:08,800
files

1088
00:41:08,800 --> 00:41:11,599
or even like cloning processes which is

1089
00:41:11,599 --> 00:41:13,760
another important system cause

1090
00:41:13,760 --> 00:41:16,640
well it's because uh blocking syscalls

1091
00:41:16,640 --> 00:41:18,400
is not that simple right as i said

1092
00:41:18,400 --> 00:41:19,760
before like blocking a

1093
00:41:19,760 --> 00:41:23,119
skull can can have like be a

1094
00:41:23,119 --> 00:41:25,440
a lot of implications right like the way

1095
00:41:25,440 --> 00:41:27,200
this thing works is like when you decide

1096
00:41:27,200 --> 00:41:29,119
to block a cisco you are not blocking

1097
00:41:29,119 --> 00:41:29,760
the cisco

1098
00:41:29,760 --> 00:41:32,240
only for a particular application you

1099
00:41:32,240 --> 00:41:33,680
are blocking the cisco for all the

1100
00:41:33,680 --> 00:41:35,440
applications or processes inside a

1101
00:41:35,440 --> 00:41:36,480
container

1102
00:41:36,480 --> 00:41:39,680
if we try for example to block the clone

1103
00:41:39,680 --> 00:41:41,520
syscall that is being used like for

1104
00:41:41,520 --> 00:41:43,359
example when we try to

1105
00:41:43,359 --> 00:41:46,880
change namespaces with the nsn3 command

1106
00:41:46,880 --> 00:41:49,040
our container will not even start right

1107
00:41:49,040 --> 00:41:50,640
we're going to get an error

1108
00:41:50,640 --> 00:41:53,200
at the beginning and then if we want to

1109
00:41:53,200 --> 00:41:54,960
block the read cisco for

1110
00:41:54,960 --> 00:41:57,040
an attacker not to be able to read what

1111
00:41:57,040 --> 00:41:58,560
is inside etc

1112
00:41:58,560 --> 00:42:01,119
password again the container will not

1113
00:42:01,119 --> 00:42:02,400
even start because

1114
00:42:02,400 --> 00:42:04,880
all these skulls are needed not only for

1115
00:42:04,880 --> 00:42:06,079
our application like

1116
00:42:06,079 --> 00:42:08,640
for the whole um container lifecycle

1117
00:42:08,640 --> 00:42:10,400
itself

1118
00:42:10,400 --> 00:42:16,400
so if one

1119
00:42:16,400 --> 00:42:19,440
uh very interesting thing to do with

1120
00:42:19,440 --> 00:42:20,480
containers but

1121
00:42:20,480 --> 00:42:22,800
it requires a lot of effort and if

1122
00:42:22,800 --> 00:42:23,920
you're willing to go

1123
00:42:23,920 --> 00:42:25,599
through all that suffering and still

1124
00:42:25,599 --> 00:42:27,280
want to learn more about

1125
00:42:27,280 --> 00:42:30,319
cisco and secure computing uh be my

1126
00:42:30,319 --> 00:42:31,520
guess and there is

1127
00:42:31,520 --> 00:42:34,160
ways to do that right there is the way

1128
00:42:34,160 --> 00:42:35,839
to do that is using uh

1129
00:42:35,839 --> 00:42:38,400
specialized uh tools like s trace d

1130
00:42:38,400 --> 00:42:40,319
trace and d trust

1131
00:42:40,319 --> 00:42:42,640
to do that right so i'm not going to

1132
00:42:42,640 --> 00:42:43,760
talk a little bit

1133
00:42:43,760 --> 00:42:46,160
i'm not going to talk about this tool

1134
00:42:46,160 --> 00:42:47,520
because they are very

1135
00:42:47,520 --> 00:42:49,359
specialized tools but you can

1136
00:42:49,359 --> 00:42:52,400
investigate more about those

1137
00:42:52,400 --> 00:42:55,520
and i think finally the last way to to

1138
00:42:55,520 --> 00:42:56,240
protect

1139
00:42:56,240 --> 00:42:58,640
running containers is using app armor or

1140
00:42:58,640 --> 00:43:00,880
application armor with it which is a

1141
00:43:00,880 --> 00:43:04,240
like a more easy way to do that like

1142
00:43:04,240 --> 00:43:08,319
uh in like um instead of blocking like

1143
00:43:08,319 --> 00:43:09,760
once it's called

1144
00:43:09,760 --> 00:43:11,599
for the whole container application

1145
00:43:11,599 --> 00:43:13,920
armor allows you to block

1146
00:43:13,920 --> 00:43:16,720
many different aspects of the of the

1147
00:43:16,720 --> 00:43:18,560
container like you can block a

1148
00:43:18,560 --> 00:43:19,520
capability

1149
00:43:19,520 --> 00:43:22,880
ciscos or execution of particular

1150
00:43:22,880 --> 00:43:23,839
binaries

1151
00:43:23,839 --> 00:43:25,680
you can be like more at the more

1152
00:43:25,680 --> 00:43:27,119
granular level right

1153
00:43:27,119 --> 00:43:30,160
and and you can also define uh

1154
00:43:30,160 --> 00:43:32,800
apply this policy only to this process

1155
00:43:32,800 --> 00:43:33,599
running

1156
00:43:33,599 --> 00:43:35,280
inside the container like in this

1157
00:43:35,280 --> 00:43:36,800
example this is a

1158
00:43:36,800 --> 00:43:40,240
armor profile for the nginx uh reverse

1159
00:43:40,240 --> 00:43:41,839
proxy software right

1160
00:43:41,839 --> 00:43:45,440
here we are telling nginx to block to

1161
00:43:45,440 --> 00:43:48,480
uh deny you know the the

1162
00:43:48,480 --> 00:43:51,839
the reading of etc groups right or deny

1163
00:43:51,839 --> 00:43:54,880
the reading and writing of the

1164
00:43:54,880 --> 00:43:58,160
run nginx pid file right so you can be

1165
00:43:58,160 --> 00:43:59,200
very specific

1166
00:43:59,200 --> 00:44:02,319
and you can block or allow only what you

1167
00:44:02,319 --> 00:44:02,960
need

1168
00:44:02,960 --> 00:44:06,160
and this is very useful

1169
00:44:07,200 --> 00:44:11,200
so uh okay i have one last example which

1170
00:44:11,200 --> 00:44:12,160
is

1171
00:44:12,160 --> 00:44:13,839
how to mitigate the same the same

1172
00:44:13,839 --> 00:44:15,599
vulnerability but now

1173
00:44:15,599 --> 00:44:18,079
using only application armor and we

1174
00:44:18,079 --> 00:44:19,280
start by creating this

1175
00:44:19,280 --> 00:44:23,040
small prop in app armor everything is

1176
00:44:23,040 --> 00:44:24,400
about profiles

1177
00:44:24,400 --> 00:44:26,720
the way it works is that you start

1178
00:44:26,720 --> 00:44:28,560
defining your rules in this case i'm

1179
00:44:28,560 --> 00:44:29,520
going to deny

1180
00:44:29,520 --> 00:44:32,640
all the reading and writing and

1181
00:44:32,640 --> 00:44:33,520
execution

1182
00:44:33,520 --> 00:44:37,839
and i think link is uh hard links

1183
00:44:37,839 --> 00:44:41,280
uh for these two files etc password and

1184
00:44:41,280 --> 00:44:41,839
etc

1185
00:44:41,839 --> 00:44:44,319
shadow and then what i'm what i need to

1186
00:44:44,319 --> 00:44:45,359
do is

1187
00:44:45,359 --> 00:44:47,760
run the app armor parser this command

1188
00:44:47,760 --> 00:44:49,280
essentially is going to load

1189
00:44:49,280 --> 00:44:52,400
that up armor profile into the kernel so

1190
00:44:52,400 --> 00:44:54,000
it can be used by all the other

1191
00:44:54,000 --> 00:44:55,920
applications and then

1192
00:44:55,920 --> 00:44:58,000
once the the profile is loading to the

1193
00:44:58,000 --> 00:44:59,200
kernel i can

1194
00:44:59,200 --> 00:45:02,000
use the security option flag for docker

1195
00:45:02,000 --> 00:45:04,720
and pass the app armor profile

1196
00:45:04,720 --> 00:45:08,240
and next time the attacker try to

1197
00:45:08,240 --> 00:45:11,680
to do the same thing about uh

1198
00:45:11,680 --> 00:45:13,839
cut command which is almost in the

1199
00:45:13,839 --> 00:45:16,240
bottom he's going to get a message

1200
00:45:16,240 --> 00:45:18,720
an error message right because there is

1201
00:45:18,720 --> 00:45:20,640
a policy in place for that container to

1202
00:45:20,640 --> 00:45:22,960
don't be able to read the etc password

1203
00:45:22,960 --> 00:45:23,839
and cat

1204
00:45:23,839 --> 00:45:27,520
use the etc uh sorry can't use the

1205
00:45:27,520 --> 00:45:31,680
the read syscall right and also is is

1206
00:45:31,680 --> 00:45:32,720
reading the

1207
00:45:32,720 --> 00:45:36,319
specific file that we are blocking

1208
00:45:36,720 --> 00:45:39,839
so uh app armor is a more

1209
00:45:39,839 --> 00:45:41,839
easy to use tool but still there is a

1210
00:45:41,839 --> 00:45:44,079
lot of configuration and a lot of

1211
00:45:44,079 --> 00:45:47,200
uh things that we need to learn so

1212
00:45:47,200 --> 00:45:50,079
there is a lot of work around armor and

1213
00:45:50,079 --> 00:45:52,079
specifically there is this tool that

1214
00:45:52,079 --> 00:45:53,760
is the one i like the most that is

1215
00:45:53,760 --> 00:45:55,839
called bain which is essentially a base

1216
00:45:55,839 --> 00:45:57,040
up armor right

1217
00:45:57,040 --> 00:45:59,359
you can define like the rules and

1218
00:45:59,359 --> 00:46:01,599
policies in a more friendly way like you

1219
00:46:01,599 --> 00:46:02,240
can

1220
00:46:02,240 --> 00:46:04,960
say things like deny exec or allow

1221
00:46:04,960 --> 00:46:06,319
capabilities

1222
00:46:06,319 --> 00:46:08,960
or allow these network interfaces and

1223
00:46:08,960 --> 00:46:09,920
you can write

1224
00:46:09,920 --> 00:46:12,800
all of this in in a more friendly format

1225
00:46:12,800 --> 00:46:14,319
right like i think this is

1226
00:46:14,319 --> 00:46:17,680
tumble format so you can download bane

1227
00:46:17,680 --> 00:46:18,720
and play around

1228
00:46:18,720 --> 00:46:21,359
and essentially write like better app

1229
00:46:21,359 --> 00:46:24,240
armor profiles

1230
00:46:24,480 --> 00:46:26,800
and we are reaching the last part of the

1231
00:46:26,800 --> 00:46:28,800
presentation which are the container

1232
00:46:28,800 --> 00:46:29,920
tools

1233
00:46:29,920 --> 00:46:32,400
so if you are more interesting about

1234
00:46:32,400 --> 00:46:33,920
what what tools are

1235
00:46:33,920 --> 00:46:37,119
are there for improving the security of

1236
00:46:37,119 --> 00:46:39,119
your containers or even doing like pen

1237
00:46:39,119 --> 00:46:40,880
testing of the containers

1238
00:46:40,880 --> 00:46:42,720
i have at least here i'm not going to

1239
00:46:42,720 --> 00:46:44,640
talk about all of them but i can tell

1240
00:46:44,640 --> 00:46:45,280
you like

1241
00:46:45,280 --> 00:46:48,240
if you want like a dockers uh like a

1242
00:46:48,240 --> 00:46:50,160
vulnerability scanner for your container

1243
00:46:50,160 --> 00:46:51,119
you can use

1244
00:46:51,119 --> 00:46:54,560
a docker scan or clear scan right also

1245
00:46:54,560 --> 00:46:56,400
if you want to

1246
00:46:56,400 --> 00:46:59,359
run docker in cloudless mode there is

1247
00:46:59,359 --> 00:47:01,520
this a project from docker itself which

1248
00:47:01,520 --> 00:47:01,920
is

1249
00:47:01,920 --> 00:47:03,760
an experimental mode that you should

1250
00:47:03,760 --> 00:47:05,520
take a look it's called

1251
00:47:05,520 --> 00:47:08,560
rotless we also have docker slim that

1252
00:47:08,560 --> 00:47:09,599
allows you to create

1253
00:47:09,599 --> 00:47:12,400
more slim containers automatically

1254
00:47:12,400 --> 00:47:12,800
without

1255
00:47:12,800 --> 00:47:15,520
you trying to worry about like which

1256
00:47:15,520 --> 00:47:18,640
binaries to copy only

1257
00:47:18,640 --> 00:47:20,480
we also have some tools for the

1258
00:47:20,480 --> 00:47:22,160
polishing complex guys

1259
00:47:22,160 --> 00:47:24,960
which is our dd and doctor these tools

1260
00:47:24,960 --> 00:47:26,079
are going to

1261
00:47:26,079 --> 00:47:29,359
to go and check for some basic uh

1262
00:47:29,359 --> 00:47:31,599
security best practices of your

1263
00:47:31,599 --> 00:47:33,359
container images and

1264
00:47:33,359 --> 00:47:35,839
continuous already running in production

1265
00:47:35,839 --> 00:47:38,000
and we have also docker bench which is

1266
00:47:38,000 --> 00:47:41,040
a like a framework for

1267
00:47:41,040 --> 00:47:45,920
ex container exploit exploitation

1268
00:47:46,240 --> 00:47:49,359
so in summary like containers is

1269
00:47:49,359 --> 00:47:51,920
container security is mostly based about

1270
00:47:51,920 --> 00:47:54,240
security that already exists in linux

1271
00:47:54,240 --> 00:47:54,800
right so

1272
00:47:54,800 --> 00:47:57,680
it leveration that you should be running

1273
00:47:57,680 --> 00:47:58,000
your

1274
00:47:58,000 --> 00:48:01,280
containers class as you don't trust them

1275
00:48:01,280 --> 00:48:02,640
right you don't throw the application

1276
00:48:02,640 --> 00:48:03,599
that are

1277
00:48:03,599 --> 00:48:06,480
inside those containers you should be

1278
00:48:06,480 --> 00:48:07,200
implementing

1279
00:48:07,200 --> 00:48:10,800
implementing a secure compute compute

1280
00:48:10,800 --> 00:48:13,359
doing white listing for the system calls

1281
00:48:13,359 --> 00:48:14,319
and also

1282
00:48:14,319 --> 00:48:16,880
implementing application armor doing

1283
00:48:16,880 --> 00:48:18,720
whitelist as well

1284
00:48:18,720 --> 00:48:20,720
drop all the linux capabilities that you

1285
00:48:20,720 --> 00:48:22,000
don't use

1286
00:48:22,000 --> 00:48:24,559
and i think i didn't mention that but

1287
00:48:24,559 --> 00:48:25,839
also please please

1288
00:48:25,839 --> 00:48:28,960
root your containers as

1289
00:48:28,960 --> 00:48:31,839
normal users right there is a a user

1290
00:48:31,839 --> 00:48:34,000
flag in docker that allows you to define

1291
00:48:34,000 --> 00:48:36,079
like a you can put whatever you want

1292
00:48:36,079 --> 00:48:37,599
like a user and group

1293
00:48:37,599 --> 00:48:39,440
and then the application inside that

1294
00:48:39,440 --> 00:48:43,119
container will not be rude right

1295
00:48:43,839 --> 00:48:47,040
so if you want to learn more about uh

1296
00:48:47,040 --> 00:48:48,880
how containers work like in the

1297
00:48:48,880 --> 00:48:50,160
internals

1298
00:48:50,160 --> 00:48:51,839
there is a i put here a list of

1299
00:48:51,839 --> 00:48:53,599
resources that i use

1300
00:48:53,599 --> 00:48:55,599
or that i have been reading and using

1301
00:48:55,599 --> 00:48:57,520
over the last six months like

1302
00:48:57,520 --> 00:49:00,480
from you know from internals to a high

1303
00:49:00,480 --> 00:49:01,599
level application

1304
00:49:01,599 --> 00:49:03,839
tool that allow you to to create more

1305
00:49:03,839 --> 00:49:05,599
secure containers so you should take a

1306
00:49:05,599 --> 00:49:07,680
look at this

1307
00:49:07,680 --> 00:49:10,160
and i think that will be everything from

1308
00:49:10,160 --> 00:49:10,880
my site

1309
00:49:10,880 --> 00:49:13,040
if you want to be in contact with me to

1310
00:49:13,040 --> 00:49:15,200
ask me more questions about containers

1311
00:49:15,200 --> 00:49:16,960
or if you want to

1312
00:49:16,960 --> 00:49:20,240
to ask me security related stuff

1313
00:49:20,240 --> 00:49:23,040
i have i can be reachable on twitter and

1314
00:49:23,040 --> 00:49:25,280
on linkedin you can drop me an email

1315
00:49:25,280 --> 00:49:28,160
and i also enjoy playing ctf if you want

1316
00:49:28,160 --> 00:49:28,559
a

1317
00:49:28,559 --> 00:49:30,640
member for your ctf team you can contact

1318
00:49:30,640 --> 00:49:32,960
me and i think that will be

1319
00:49:32,960 --> 00:49:36,160
everything for my side road

1320
00:49:37,520 --> 00:49:39,920
thank you very much that was a amazing

1321
00:49:39,920 --> 00:49:41,200
presentation

1322
00:49:41,200 --> 00:49:43,680
um do we want to go over the questions

1323
00:49:43,680 --> 00:49:44,319
now

1324
00:49:44,319 --> 00:49:48,559
um the q a

1325
00:49:48,559 --> 00:49:53,040
yeah there's one here

1326
00:49:53,280 --> 00:49:56,000
this is there's one that says if docker

1327
00:49:56,000 --> 00:49:56,480
dot

1328
00:49:56,480 --> 00:49:59,680
suck is somehow disabled will the

1329
00:49:59,680 --> 00:50:00,480
breakout

1330
00:50:00,480 --> 00:50:03,760
be still possible

1331
00:50:03,760 --> 00:50:07,119
if docker uh inside the container

1332
00:50:07,119 --> 00:50:10,960
i'm assuming so the thing is if if

1333
00:50:10,960 --> 00:50:11,680
dockers

1334
00:50:11,680 --> 00:50:13,760
if the soccer if the docker socket can

1335
00:50:13,760 --> 00:50:14,800
receive commands

1336
00:50:14,800 --> 00:50:17,599
those commands uh are going to be

1337
00:50:17,599 --> 00:50:20,079
executed by the docker demon

1338
00:50:20,079 --> 00:50:23,200
so yeah if it's exposed inside the

1339
00:50:23,200 --> 00:50:24,640
container like they can

1340
00:50:24,640 --> 00:50:28,480
cause a lot of damage right um i was

1341
00:50:28,480 --> 00:50:30,720
hearing this question the other day like

1342
00:50:30,720 --> 00:50:31,760
what can you do

1343
00:50:31,760 --> 00:50:34,880
like in the case you your container need

1344
00:50:34,880 --> 00:50:36,160
the docker sock

1345
00:50:36,160 --> 00:50:39,119
inside there the way to fix that is or

1346
00:50:39,119 --> 00:50:40,559
the approach to to do that

1347
00:50:40,559 --> 00:50:43,760
is try to do the docker demon in

1348
00:50:43,760 --> 00:50:46,160
rotless mode right which is experimental

1349
00:50:46,160 --> 00:50:46,960
feature

1350
00:50:46,960 --> 00:50:48,880
but that's the only thing you can do for

1351
00:50:48,880 --> 00:50:51,440
now i think

1352
00:50:51,599 --> 00:50:56,880
okay here's another question is um

1353
00:50:58,720 --> 00:51:01,280
yeah i i can't see this the drone is is

1354
00:51:01,280 --> 00:51:02,240
coming next

1355
00:51:02,240 --> 00:51:05,839
maura we're one of the questions for um

1356
00:51:05,839 --> 00:51:08,400
okay i was just wanting is i thought

1357
00:51:08,400 --> 00:51:11,119
maybe i missed something thank you

1358
00:51:11,119 --> 00:51:14,640
uh let's see where we are

1359
00:51:15,119 --> 00:51:18,400
okay is a sync second

1360
00:51:18,400 --> 00:51:21,839
profile is supplied on the command line

1361
00:51:21,839 --> 00:51:24,559
does this profile is on top of default

1362
00:51:24,559 --> 00:51:25,680
second profile

1363
00:51:25,680 --> 00:51:28,800
used by a docker i use my docker

1364
00:51:28,800 --> 00:51:31,280
one that blocks 44 system calls i guess

1365
00:51:31,280 --> 00:51:32,400
that's what he assumes

1366
00:51:32,400 --> 00:51:35,440
uh let me okay let me look for

1367
00:51:35,440 --> 00:51:38,079
profile is supplied on the command line

1368
00:51:38,079 --> 00:51:39,839
the profile is on top

1369
00:51:39,839 --> 00:51:43,599
of default second profile

1370
00:51:43,599 --> 00:51:46,720
used by docker no i i think

1371
00:51:46,720 --> 00:51:49,040
the second profile that you specify is

1372
00:51:49,040 --> 00:51:50,160
going to

1373
00:51:50,160 --> 00:51:53,280
affect all the processes inside like

1374
00:51:53,280 --> 00:51:55,040
it's going to be it's going to replace

1375
00:51:55,040 --> 00:51:57,040
by by default when whenever you run a

1376
00:51:57,040 --> 00:51:58,880
docker container it's going to have a

1377
00:51:58,880 --> 00:51:59,760
default

1378
00:51:59,760 --> 00:52:02,319
second profile so if you define your own

1379
00:52:02,319 --> 00:52:03,359
second profile

1380
00:52:03,359 --> 00:52:06,720
is going to overwrite whatever

1381
00:52:06,720 --> 00:52:08,960
docker provide by by default and so it's

1382
00:52:08,960 --> 00:52:10,960
possible for you to completely

1383
00:52:10,960 --> 00:52:13,440
eliminate the the default second profile

1384
00:52:13,440 --> 00:52:15,680
right

1385
00:52:17,520 --> 00:52:21,359
and i think that configure

1386
00:52:21,359 --> 00:52:24,640
so yeah in summary if you if you define

1387
00:52:24,640 --> 00:52:25,280
your own

1388
00:52:25,280 --> 00:52:28,000
second policies they will override

1389
00:52:28,000 --> 00:52:28,559
whatever

1390
00:52:28,559 --> 00:52:33,760
docker provide by default

1391
00:52:33,760 --> 00:52:36,079
okay there's another question is app

1392
00:52:36,079 --> 00:52:38,079
armor only available in particular

1393
00:52:38,079 --> 00:52:40,079
on particular distributions or linux i

1394
00:52:40,079 --> 00:52:41,599
believe so right

1395
00:52:41,599 --> 00:52:44,880
uh i think so up armor is um and second

1396
00:52:44,880 --> 00:52:45,680
are like very

1397
00:52:45,680 --> 00:52:49,760
old linux features so i have used only

1398
00:52:49,760 --> 00:52:52,079
application armor on ubuntu but i think

1399
00:52:52,079 --> 00:52:52,880
they are

1400
00:52:52,880 --> 00:52:54,960
they should be available in all the

1401
00:52:54,960 --> 00:52:56,079
other popular

1402
00:52:56,079 --> 00:52:58,720
uh distribution like moldivo for linux

1403
00:52:58,720 --> 00:53:00,720
server like santos

1404
00:53:00,720 --> 00:53:02,640
uh i think it should be there don't

1405
00:53:02,640 --> 00:53:04,079
trust me on that like i need to check

1406
00:53:04,079 --> 00:53:06,000
that

1407
00:53:06,000 --> 00:53:07,520
here's another question how does

1408
00:53:07,520 --> 00:53:10,480
docker's security requirements compare

1409
00:53:10,480 --> 00:53:14,240
to red hat's rewrite um

1410
00:53:14,240 --> 00:53:17,759
parenthesis podman

1411
00:53:20,720 --> 00:53:22,800
which one is that uh how does docker

1412
00:53:22,800 --> 00:53:26,240
security requirement compare to red cars

1413
00:53:26,240 --> 00:53:30,240
i don't i i have no idea what is pot man

1414
00:53:30,240 --> 00:53:31,839
yeah i need to investigate more about

1415
00:53:31,839 --> 00:53:34,880
that question no problem

1416
00:53:34,880 --> 00:53:42,880
any other questions

1417
00:53:42,880 --> 00:53:45,200
all right well would like to thank you

1418
00:53:45,200 --> 00:53:47,200
that was an amazing presentation

1419
00:53:47,200 --> 00:53:49,359
uh thank you very much this presentation

1420
00:53:49,359 --> 00:53:50,559
will be published

1421
00:53:50,559 --> 00:53:54,000
uh soon tonight in the youtube

1422
00:53:54,000 --> 00:53:57,119
channel for pacific hackers and

1423
00:53:57,119 --> 00:53:59,680
um remember because we don't have over

1424
00:53:59,680 --> 00:54:01,119
100

1425
00:54:01,119 --> 00:54:03,839
um subscribers yet we can have like our

1426
00:54:03,839 --> 00:54:05,680
own uri string so

1427
00:54:05,680 --> 00:54:07,119
at this point you gotta go to youtube

1428
00:54:07,119 --> 00:54:11,200
and search for pacific hackers

1429
00:54:11,200 --> 00:54:12,720
i think that there's another question

1430
00:54:12,720 --> 00:54:15,359
did app armor start on susie

1431
00:54:15,359 --> 00:54:17,599
and darius leno stuxi i think that that

1432
00:54:17,599 --> 00:54:19,280
he that he responded that question

1433
00:54:19,280 --> 00:54:20,800
previously

1434
00:54:20,800 --> 00:54:23,520
uh he says i think he's asking if it was

1435
00:54:23,520 --> 00:54:24,079
created

1436
00:54:24,079 --> 00:54:27,920
on sus yeah i'm wondering like i know up

1437
00:54:27,920 --> 00:54:28,960
armor is a very

1438
00:54:28,960 --> 00:54:32,000
old project also also

1439
00:54:32,000 --> 00:54:35,200
very old like like secure computing so

1440
00:54:35,200 --> 00:54:38,000
yeah maybe guys maybe that like sushi

1441
00:54:38,000 --> 00:54:40,240
held

1442
00:54:41,359 --> 00:54:44,240
all right let's uh all right um let me

1443
00:54:44,240 --> 00:54:44,880
uh do

1444
00:54:44,880 --> 00:54:46,240
this pretty quick and uh thank you very

1445
00:54:46,240 --> 00:54:48,319
much and we're going to very much

1446
00:54:48,319 --> 00:54:50,640
if you have more questions guys you can

1447
00:54:50,640 --> 00:54:52,000
send me a dm on twitter

1448
00:54:52,000 --> 00:54:53,520
and everything and thank you very much

1449
00:54:53,520 --> 00:54:56,079
for for the chance to speak about

1450
00:54:56,079 --> 00:55:01,000
docker container security let me stop

1451
00:55:01,000 --> 00:55:04,000
sharing

